#Область ОбработчикиРегламентныхЗаданий

Процедура ОбработкаСобытийNavision(Назначение, Входящие, Исходящие) Экспорт

	Если НЕ ТехническаяПоддержка.ВыполнениеЗаданияРазрешено("ОбработкаСобытийNavision") Тогда

		Возврат;

	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Если Назначение = "Классификаторы" Тогда

		ВнешниеИсточники.ОбновитьКлассификаторыПоДаннымNavision();
		ВнешниеИсточники.ПроверитьТипыПоступленийНоменклатуры();
		ВнешниеИсточники.ПроверитьНоменклатуруПоОстаткамNavision();

	ИначеЕсли Назначение = "ВыгрузкаВТаблицыСверкиДокументов" Тогда

		ВнешниеИсточникиСобытия.ОбработкаСобытийNavision(Назначение, Ложь, Истина);

	ИначеЕсли Назначение = "Контрагенты" Тогда

		ВнешниеИсточники.ПолучитьПоставщиковNavision();
		ВнешниеИсточники.ПолучитьПокупателейБезналNavision();

	ИначеЕсли Назначение = "ПродажиИнтернетМагазинаИнформативные" Тогда

		ДатаОкончания = НачалоДня(ТекущаяДата()) - 86400;	//	начало "вчерашних" суток
		ЗагрузитьПродажиИнтернетМагазинаИнформативные(ДатаОкончания - 86400 * 10, КонецДня(ДатаОкончания));

	ИначеЕсли Назначение = "ИнформативныеОстаткиЦентральныхСкладов" Тогда

		ЗагрузитьИнформативныеОстаткиЦентральныхСкладов();

	ИначеЕсли Назначение = "АссортиментнаяМатрица" Тогда

		ЗагрузитьАссортиментнуюМатрицу(Истина);	//	параметр - полная загрузка

	Иначе

		Если Назначение = "Справочники" Тогда

			Попытка

			//	Перед основным процессом отработаем назначенные команды... получить какой-то элемент или цену, например.
				ВнешниеИсточникиСобытия.ВыполнитьКомандыОбъектыДляОбработки();

			Исключение

				ТекстОшибки = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("ВыполнитьКомандыОбъектыДляОбработки", УровеньЖурналаРегистрации.Ошибка
				,,, "Ошибка: " + ТекстОшибки, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

			КонецПопытки;

		КонецЕсли;

		ВнешниеИсточникиСобытия.ОбработкаСобытийNavision(Назначение, Входящие, Исходящие);	//	Входящие, Исходящие

	КонецЕсли;

КонецПроцедуры

//	LNK 05.12.2021 05:07:27
Процедура ВыгрузкаДляNavisionБонусныхБалловMagento() Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

	//	Регламент всегда выгружает "на вчера".
		ВнешниеИсточникиСобытия.ВыгрузитьТаблицуБонусовMagento(НачалоДня(ТекущаяДата() - 86400));

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ИнформативныеОстаткиЦентральныхСкладовNavision

//	Стартовая процедура процесса
Процедура ЗагрузитьИнформативныеОстаткиЦентральныхСкладов()

	УстановитьПривилегированныйРежим(Истина);

	НомерОперацииNavision = ПолучитьНомерОперацииNavision();
	ДанныеNavision = ТаблицаОстатковЦентральныхСкладовNavision(НомерОперацииNavision);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОстаткиNavision.IDN КАК IDN,
	|	ОстаткиNavision.КодСклада КАК КодСклада,
	|	ОстаткиNavision.Количество КАК Количество
	|ПОМЕСТИТЬ ОстаткиNavision
	|ИЗ
	|	&ОстаткиNavision КАК ОстаткиNavision
	|ГДЕ
	|	НЕ ОстаткиNavision.IDN = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезервыNavision.IDN КАК IDN,
	|	РезервыNavision.КодСклада КАК КодСклада,
	|	-РезервыNavision.Количество КАК Количество
	|ПОМЕСТИТЬ РезервыNavision
	|ИЗ
	|	&РезервыNavision КАК РезервыNavision
	|ГДЕ
	|	НЕ РезервыNavision.IDN = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеNavision.IDN КАК IDN,
	|	ДанныеNavision.КодСклада КАК КодСклада,
	|	СУММА(ДанныеNavision.Количество) КАК Количество,
	|	СУММА(ДанныеNavision.КоличествоВРезерве) КАК КоличествоВРезерве,
	|	МИНИМУМ(ДанныеNavision.ТолькоРезервы) КАК ТолькоРезервы
	|ПОМЕСТИТЬ ДанныеNavision
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОстаткиNavision.IDN КАК IDN,
	|		ОстаткиNavision.КодСклада КАК КодСклада,
	|		ОстаткиNavision.Количество КАК Количество,
	|		0 КАК КоличествоВРезерве,
	|		ЛОЖЬ КАК ТолькоРезервы
	|	ИЗ
	|		ОстаткиNavision КАК ОстаткиNavision
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РезервыNavision.IDN,
	|		РезервыNavision.КодСклада,
	|		0,
	|		РезервыNavision.Количество,
	|		ИСТИНА
	|	ИЗ
	|		РезервыNavision КАК РезервыNavision) КАК ДанныеNavision
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеNavision.IDN,
	|	ДанныеNavision.КодСклада
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDN,
	|	КодСклада
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОстаткиNavision
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РезервыNavision
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСправочник.Ссылка КАК Склад,
	|	ДанныеNavision.КодСклада КАК КодСклада
	|ПОМЕСТИТЬ Склады
	|ИЗ
	|	ДанныеNavision КАК ДанныеNavision
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаСправочник
	|		ПО ДанныеNavision.КодСклада = ТаблицаСправочник.IDN
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСклада"
	);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОстаткиNavision", ДанныеNavision.ОстаткиNavision);
	Запрос.УстановитьПараметр("РезервыNavision", ДанныеNavision.РезервыNavision);
//	Инициализируем временные таблицы.
	Запрос.Выполнить();
	ДанныеNavision.ОстаткиNavision = Неопределено;
	ДанныеNavision.РезервыNavision = Неопределено;
	
//	1-й этап. Контроль отсутствующих позиций номенклатуры.
	ПроверитьСуществованиеНоменклатуры(Запрос);

//	2-й этап. В режиме получения последних движений требуем контроля цен на такие товары!
	Если НЕ НомерОперацииNavision = 0 Тогда

	//	LNK 04.01.2019 11:17:32 - после добавления других кодов бюджета слишком много цен! Отключаем
	//	УстановитьТребованиеЦенПоОстаткамNavision(Запрос);

	КонецЕсли;

//	3-й этап. Формирование информативных остатков.
	СформироватьИнформативныеОстаткиТоваровПоСкладам(Запрос, НомерОперацииNavision);

	Константы.НомерОперацииNavision.Установить(ДанныеNavision.НомерОперацииNavision);

КонецПроцедуры

//	LNK 22.01.2019 11:52:57
Функция ТаблицаОстатковЦентральныхСкладовNavision(НомерОперацииNavision)

	ДанныеNavision = Новый Структура(
		"НомерОперацииNavision, ОстаткиNavision, РезервыNavision"
		, НомерОперацииNavision, Неопределено, Неопределено);

	ТекстNavision =
	"SELECT MAX([Операция Но_]) AS ЗАДАНИЕНО
	|	FROM [Европродукт 2009$Товар Книга Операций] tko WITH(nolock)"
	;
	ТаблицаNavision = ВнешниеИсточники.ПолучитьДанныеОтNavision(ТекстNavision,,, Истина, 1000);
	ДанныеNavision.НомерОперацииNavision = ТаблицаNavision[0].ЗАДАНИЕНО;

	ТекстNavision = СтрЗаменить(
	"SELECT *
	|FROM [dbo].[GetStockBalanceGoods](#OPNUMBER#)"
	, "#OPNUMBER#"
	, ?(НомерОперацииNavision = 0, "default", Формат(НомерОперацииNavision, "ЧН=0; ЧГ=")))
	;
	ДанныеNavision.ОстаткиNavision = ВнешниеИсточники.ПолучитьДанныеОтNavision(ТекстNavision,,, Истина, 1000);

	ТекстNavision =
	"SELECT *
	|FROM [dbo].[GetPlannedDeliveryGoods](default,default)"
	;
	ДанныеNavision.РезервыNavision = ВнешниеИсточники.ПолучитьДанныеОтNavision(ТекстNavision,,, Истина, 1000);

	Возврат ДанныеNavision;

КонецФункции // ТаблицаОстатковЦентральныхСкладовNavision()

//	2-й этап. В режиме получения последних движений требуем контроля цен на такие товары!
Процедура УстановитьТребованиеЦенПоОстаткамNavision(Запрос)

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДанных.IDN КАК IDN
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДанныеNavision.IDN КАК IDN,
	|		ТаблицаСправочник.Ссылка КАК Номенклатура
	|	ИЗ
	|		ДанныеNavision КАК ДанныеNavision
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
	|			ПО ДанныеNavision.IDN = ТаблицаСправочник.IDN) КАК ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныТребующиеОбновления КАК ЦеныТребование
	|		ПО ТаблицаДанных.IDN = ЦеныТребование.IDN
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатуры
	|		ПО ТаблицаДанных.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|ГДЕ
	|	ЦеныТребование.IDN ЕСТЬ NULL
	|	И ВЫБОР
	|			КОГДА ЦеныНоменклатуры.Номенклатура ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЦеныНоменклатуры.Период < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ДЕНЬ, -2)
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДанных.IDN"
	;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		МенеджерЗаписи = РегистрыСведений.ЦеныТребующиеОбновления.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = ТекущаяДата();
		МенеджерЗаписи.IDN = Выборка.IDN;
		МенеджерЗаписи.КодПрайсЛиста = "АНТ";
		МенеджерЗаписи.ДатаИзменения = ТекущаяДатаСеанса();

		МенеджерЗаписи.Записать();

	КонецЦикла;

КонецПроцедуры

//	3-й этап. Формирование информативных остатков.
Процедура СформироватьИнформативныеОстаткиТоваровПоСкладам(Запрос, НомерОперацииNavision)

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСклады.Склад КАК Склад,
	|	ТаблицаТовары.Ссылка КАК Номенклатура,
	|	ДанныеNavision.Количество КАК Количество,
	|	ДанныеNavision.КоличествоВРезерве КАК КоличествоВРезерве,
	|	ДанныеNavision.ТолькоРезервы КАК ТолькоРезервы
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ДанныеNavision КАК ДанныеNavision
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Склады КАК ТаблицаСклады
	|		ПО ДанныеNavision.КодСклада = ТаблицаСклады.КодСклада
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаТовары
	|		ПО ДанныеNavision.IDN = ТаблицаТовары.IDN
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеNavision
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Склады
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Склад КАК Склад,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоВРезерве КАК КоличествоВРезерве,
	|	Товары.ТолькоРезервы КАК ТолькоРезервы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнформативныеОстаткиТоваровПоСкладам КАК ТаблицаРегистра
	|		ПО Товары.Склад = ТаблицаРегистра.Склад
	|			И Товары.Номенклатура = ТаблицаРегистра.Номенклатура
	|ГДЕ
	|	(ТаблицаРегистра.Номенклатура ЕСТЬ NULL
	|			ИЛИ ВЫБОР
	|				КОГДА Товары.ТолькоРезервы
	|					ТОГДА НЕ Товары.КоличествоВРезерве = ТаблицаРегистра.КоличествоВРезерве
	|				ИНАЧЕ НЕ(Товары.Количество = ТаблицаРегистра.Количество
	|							И Товары.КоличествоВРезерве = ТаблицаРегистра.КоличествоВРезерве)
	|			КОНЕЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаРегистра.Склад,
	|	ТаблицаРегистра.Номенклатура,
	|	0,
	|	0,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрСведений.ИнформативныеОстаткиТоваровПоСкладам КАК ТаблицаРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО ТаблицаРегистра.Склад = Товары.Склад
	|			И ТаблицаРегистра.Номенклатура = Товары.Номенклатура
	|ГДЕ
	|	Товары.Номенклатура ЕСТЬ NULL
	|	И &НомерОперацииNavision = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Склад,
	|	Номенклатура
	|АВТОУПОРЯДОЧИВАНИЕ"
	;
	Запрос.УстановитьПараметр("НомерОперацииNavision", НомерОперацииNavision);

	Выборка = Запрос.Выполнить().Выбрать();
	Счётчик = 0;	//	для целей отладки.

	НаборЗаписей = РегистрыСведений.ИнформативныеОстаткиТоваровПоСкладам.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);

	ОбменДаннымиСервер.УстановитьВсехПолучателей(НаборЗаписей.ОбменДанными.Получатели, "ПоМагазину");

	Пока Выборка.Следующий() Цикл

		НаборЗаписей.Очистить();
		НаборЗаписей.Отбор.Склад.Установить(Выборка.Склад);
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);

		Если Выборка.ТолькоРезервы Тогда

			НаборЗаписей.Прочитать();

			Если НаборЗаписей.Количество() = 0 Тогда

					ЗаписьНабора = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);

			Иначе	ЗаписьНабора = НаборЗаписей[0];
					ЗаписьНабора.КоличествоВРезерве = Выборка.КоличествоВРезерве;

			КонецЕсли;

			ЗаписьНабора.ДатаИзменения = ТекущаяДата();

		Иначе

			Если НЕ (Выборка.Количество = 0 И Выборка.КоличествоВРезерве = 0) Тогда

				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);

				ЗаписьНабора.ДатаИзменения = ТекущаяДата();

			КонецЕсли;

		КонецЕсли;

		НаборЗаписей.Записать();

		Счётчик = Счётчик + 1;

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьНомерОперацииNavision()

	ДатаСбросаНомера = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТехническаяПоддержка", "НомерОперацииNavision", '00010101',, "");

	Если НЕ НачалоДня(ДатаСбросаНомера) = НачалоДня(ТекущаяДатаСеанса()) Тогда

	//	Один раз в сутки производим полное чтение внешнего ресурса.
		Константы.НомерОперацииNavision.Установить(0);
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТехническаяПоддержка", "НомерОперацииNavision", ТекущаяДатаСеанса(),, "");

	КонецЕсли;

	НомерОперацииNavision = Константы.НомерОперацииNavision.Получить();

	Возврат НомерОперацииNavision;

КонецФункции // ПолучитьНомерОперацииNavision()

#КонецОбласти

#Область ПродажиИнтернетМагазинаИнформативные

//	LNK 06.12.2018 10:25:46
Процедура ЗагрузитьПродажиИнтернетМагазинаИнформативные(ДатаНачала, ДатаОкончания)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаNavision.ВидОперации КАК ВидОперации,
	|	ТаблицаNavision.КодИзменения КАК КодИзменения,
	|	ТаблицаNavision.ДатаУчета КАК ДатаУчета,
	|	ТаблицаNavision.КодСклада КАК КодСклада,
	|	ТаблицаNavision.КодБюджета КАК КодБюджета,
	|	ТаблицаNavision.НомерЗаказа КАК НомерЗаказа,
	|	ТаблицаNavision.IDN КАК IDN,
	|	ТаблицаNavision.Маржинальность КАК Маржинальность,
	|	ТаблицаNavision.Сумма КАК Стоимость,
	|	ТаблицаNavision.Сумма + ВЫБОР
	|		КОГДА ТаблицаNavision.СуммаСкидки < 0
	|			ТОГДА -ТаблицаNavision.СуммаСкидки
	|		ИНАЧЕ ТаблицаNavision.СуммаСкидки
	|	КОНЕЦ КАК СтоимостьБезСкидок,
	|	ТаблицаNavision.Количество КАК Количество
	|ПОМЕСТИТЬ ДанныеNavision
	|ИЗ
	|	&ТаблицаNavision КАК ТаблицаNavision
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеNavision.IDN КАК IDN
	|ИЗ
	|	ДанныеNavision КАК ДанныеNavision
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
	|		ПО ДанныеNavision.IDN = ТаблицаСправочник.IDN
	|ГДЕ
	|	ТаблицаСправочник.Ссылка ЕСТЬ NULL"
	);
	Запрос.УстановитьПараметр("ТаблицаNavision", ПодготовитьТаблицуПродажиИнтернетМагазинаИнформативные(ДатаНачала, ДатаОкончания));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СсылкиОбработаны = Новый Массив;

	ВнешниеИсточники.УстановитьНоменклатуруВТаблицеПодготовки(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("IDN"), Истина, СсылкиОбработаны);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыNavision.Период КАК Период,
	|	ТоварыNavision.Склад КАК Склад,
	|	ТоварыNavision.Магазин КАК Магазин,
	|	ЕСТЬNULL(ТаблицаЗаказы.Ссылка, ТоварыNavision.НомерЗаказа) КАК Заказ,
	|	ТоварыNavision.КодИзменения КАК КодИзменения,
	|	ТоварыNavision.ВидОперации КАК ВидОперации,
	|	ТоварыNavision.Номенклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ТоварыNavision.Маржинальность КАК Маржинальность,
	|	ТоварыNavision.КодБюджета КАК КодБюджета,
	|	ТоварыNavision.Стоимость КАК Стоимость,
	|	ТоварыNavision.СтоимостьБезСкидок КАК СтоимостьБезСкидок,
	|	ТоварыNavision.Количество КАК Количество,
	|	ТоварыNavision.КлючПорядка КАК КлючПорядка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеNavision.ДатаУчета КАК Период,
	|		ТаблицаСклады.Ссылка КАК Склад,
	|		ТаблицаСклады.Магазин КАК Магазин,
	|		ДанныеNavision.НомерЗаказа КАК НомерЗаказа,
	|		ДанныеNavision.КодИзменения КАК КодИзменения,
	|		ДанныеNavision.ВидОперации КАК ВидОперации,
	|		ТаблицаНоменклатура.Ссылка КАК Номенклатура,
	|		ДанныеNavision.Маржинальность КАК Маржинальность,
	|		ДанныеNavision.КодБюджета КАК КодБюджета,
	|		ДанныеNavision.Стоимость КАК Стоимость,
	|		ДанныеNavision.СтоимостьБезСкидок КАК СтоимостьБезСкидок,
	|		ДанныеNavision.Количество КАК Количество,
	|		ДанныеNavision.КодСклада КАК КлючПорядка
	|	ИЗ
	|		ДанныеNavision КАК ДанныеNavision
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаСклады
	|			ПО ДанныеNavision.КодСклада = ТаблицаСклады.IDN
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаНоменклатура
	|			ПО ДанныеNavision.IDN = ТаблицаНоменклатура.IDN) КАК ТоварыNavision
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ТаблицаЗаказы
	|		ПО ТоварыNavision.НомерЗаказа = ТаблицаЗаказы.НомерЗаказаНаСайте
	|			И ТоварыNavision.Магазин = ТаблицаЗаказы.Магазин
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	КлючПорядка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеNavision"
	;

	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		ПродажиВыборка = Результат.Выбрать();

		НаборЗаписей = РегистрыНакопления.ПродажиИнтернетМагазинаИнформативные.СоздатьНаборЗаписей();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
		НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;

		Пока ПродажиВыборка.Следующий() Цикл

			УстановитьПродажиИнтернетМагазинаИнформативные(ПродажиВыборка, НаборЗаписей);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьТаблицуПродажиИнтернетМагазинаИнформативные(ДатаНачала, ДатаОкончания)

//	Нужны все склады, не только введенные в эксплуатацию.. неизвестно, в каком периоде загрузки мог быть активен тот или иной склад
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктураУзлов.Магазин.СкладПродажи.IDN КАК КодСклада
	|ИЗ
	|	Справочник.СтруктураУзлов КАК СтруктураУзлов
	|ГДЕ
	|	СтруктураУзлов.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.СтруктураУзлов.ЦентральныйОфис))
	|	И НЕ СтруктураУзлов.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|	И НЕ СтруктураУзлов.Магазин.СкладУправляющейСистемы
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодСклада"
	);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокСкладов = "";

	Пока Выборка.Следующий() Цикл

		СписокСкладов = СписокСкладов + ?(ПустаяСтрока(СписокСкладов), "", ", ")
		+ "'" + СокрЛП(Выборка.КодСклада) + "'";

	КонецЦикла;

	ТекстЗапроса = ВнешниеИсточникиПовтИсп.ПолучитьТекстЗапроса("ПродажиWebNavision", Перечисления.ВнешниеИсточники.Navision);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#DSTART#"   , "'" + Формат(ДатаНачала   , "ДФ=yyyy-MM-dd") + "'");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#DSTOP#"    , "'" + Формат(ДатаОкончания, "ДФ='yyyy-MM-dd ЧЧ:мм:сс'") + "'");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#STOCKLIST#", СписокСкладов);

	ТаблицаNavision = ВнешниеИсточники.ПолучитьДанныеОтNavision(ТекстЗапроса,,, Истина, 1000);
	#Если _ Тогда
	ТаблицаNavision = Новый ТаблицаЗначений;
	#КонецЕсли

	ТаблицаNavision.Колонки.ВидОперации.Имя = "ВидОперацииТекст";
	ТаблицаNavision.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийЧекККМ"));

	Для каждого СтрокаNavision Из ТаблицаNavision Цикл

		СтрокаNavision.НомерЗаказа = ВнешниеИсточникиСобытия.ПривестиНомерЗаказаПокупателя(СтрокаNavision.НомерЗаказа);
		СтрокаNavision.ВидОперации = Перечисления.ВидыОперацийЧекККМ[СтрокаNavision.ВидОперацииТекст];

	КонецЦикла;

	ТаблицаNavision.Колонки.Удалить("ВидОперацииТекст");

	Возврат ТаблицаNavision;

КонецФункции

Функция УстановитьПродажиИнтернетМагазинаИнформативные(ПродажиВыборка, НаборЗаписей)

	#Если _ Тогда
	НаборЗаписей = РегистрыНакопления.ПродажиИнтернетМагазинаИнформативные.СоздатьНаборЗаписей();
	#КонецЕсли

	НаборЗаписей.ОбменДанными.Получатели.Очистить();
	ОбменДаннымиСервер.УстановитьПолучателейМагазина(НаборЗаписей.ОбменДанными.Получатели, ПродажиВыборка.Магазин);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Регистратор КАК Регистратор,
	|	ТаблицаПродажи.КодИзменения КАК КодИзменения
	|ИЗ
	|	РегистрНакопления.ПродажиИнтернетМагазинаИнформативные КАК ТаблицаПродажи
	|ГДЕ
	|	ТаблицаПродажи.Период = &Период
	|	И ТаблицаПродажи.Склад = &Склад
	|	И ТаблицаПродажи.Магазин = &Магазин
	|	И ТаблицаПродажи.Заказ = &Заказ
	|	И ТаблицаПродажи.ВидОперации = &ВидОперации
	|	И ТаблицаПродажи.Номенклатура = &Номенклатура
	|	И ТаблицаПродажи.Характеристика = &Характеристика
	|	И ТаблицаПродажи.КодБюджета = &КодБюджета"
	);
	Запрос.УстановитьПараметр("Период", ПродажиВыборка.Период);
	Запрос.УстановитьПараметр("Склад", ПродажиВыборка.Склад);
	Запрос.УстановитьПараметр("Магазин", ПродажиВыборка.Магазин);
	Запрос.УстановитьПараметр("Заказ", ПродажиВыборка.Заказ);
	Запрос.УстановитьПараметр("ВидОперации", ПродажиВыборка.ВидОперации);
	Запрос.УстановитьПараметр("Номенклатура", ПродажиВыборка.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ПродажиВыборка.Характеристика);
	Запрос.УстановитьПараметр("КодБюджета", ПродажиВыборка.КодБюджета);

	КодИзменения = "";	//	показатель наличия существующей записи
	Результат    = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		ОчисткаВыборка = Запрос.Выполнить().Выбрать();

		Пока ОчисткаВыборка.Следующий() Цикл

			Если ОчисткаВыборка.КодИзменения = ПродажиВыборка.КодИзменения Тогда

				КодИзменения = ОчисткаВыборка.КодИзменения;

			Иначе

				НаборЗаписей.Очистить();
				НаборЗаписей.Отбор.Регистратор.Установить(ОчисткаВыборка.Регистратор);
				НаборЗаписей.Записать();

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если ПустаяСтрока(КодИзменения) Тогда	//	нет нужной записи!

		НаборЗаписей.Очистить();
		НаборЗаписей.Отбор.Регистратор.Установить(Документы.КорректировкаРегистров.ПолучитьСсылку());

		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, ПродажиВыборка);
		ЗаписьНабора.Регистратор   = НаборЗаписей.Отбор.Регистратор.Значение;
		ЗаписьНабора.ДатаИзменения = ТекущаяДата();

		НаборЗаписей.Записать();

	КонецЕсли;

КонецФункции

#КонецОбласти

#Область АссортиментнаяМатрицаНоменклатурыНаСкладах

Процедура ЗагрузитьАссортиментнуюМатрицу(ПервичноеЗаполнение = Ложь)

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаNavision.IDN КАК IDN,
	|	ТаблицаNavision.КодСклада КАК КодСклада,
	|	ТаблицаNavision.КодИзменения КАК КодИзменения,
	|	ТаблицаNavision.Дата КАК ДатаИзменения,
	|	ТаблицаNavision.Количество КАК Количество
	|ПОМЕСТИТЬ ДанныеNavision
	|ИЗ
	|	&ТаблицаNavision КАК ТаблицаNavision
	|ГДЕ
	|	НЕ ТаблицаNavision.IDN = """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDN,
	|	КодСклада
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСправочник.Ссылка КАК Склад,
	|	ДанныеNavision.КодСклада КАК КодСклада
	|ПОМЕСТИТЬ Склады
	|ИЗ
	|	ДанныеNavision КАК ДанныеNavision
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаСправочник
	|		ПО (ДанныеNavision.КодСклада = ТаблицаСправочник.IDN
	|				И ТаблицаСправочник.НазначениеСклада = ЗНАЧЕНИЕ(Перечисление.НазначенияСкладов.ТорговыйЗал))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСклада"
	);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаNavision", ТаблицаАссортиментнойМатрицыNavision(ПервичноеЗаполнение));
//	Инициализируем временные таблицы.
	Запрос.Выполнить();

//	1-й этап. Контроль отсутствующих позиций номенклатуры.
	ПроверитьСуществованиеНоменклатуры(Запрос);

//	2-й этап. Формирование ассортиментной матрицы
	СформироватьАссортиментнуюМатрицу(Запрос, ПервичноеЗаполнение);

КонецПроцедуры

Функция ТаблицаАссортиментнойМатрицыNavision(ПервичноеЗаполнение)

	ТекстNavision =
	"SELECT
	|	 am.[Код] AS IDN
	|	,am.[Код Склада] AS КодСклада
	|	,CAST(CAST(am.timestamp AS bigint) AS varchar(40)) AS КодИзменения
	|	,CAST(am.[Кол-во] AS int) AS Количество
	|	,am.[Дата Изменения] AS Дата
	|FROM [dbo].[Европродукт 2009$SKU Template] am WITH(readuncommitted)
	|	WHERE am.[Тип] = 2
	|	AND #CONDITION#
	|	--AND am.[Код] IN ('6320070', '6460776')
	|	--AND am.[Кол-во] <> 0 -- полное заполнение первичное - только значащие количества
	|	--AND am.[Дата Изменения] >= '20170525' -- текущее заполнение, только за несколько последних суток"
	;

	Если ПервичноеЗаполнение Тогда

		ТекстNavision = СтрЗаменить(ТекстNavision, "#CONDITION#", "am.[Кол-во] <> 0");

	Иначе

		ТекстNavision = СтрЗаменить(ТекстNavision, "#CONDITION#"
			, "am.[Дата Изменения] >= '" + Формат(ТекущаяДатаСеанса() - 86400 * 5, "ДФ=yyyyMMdd") + "'");

	КонецЕсли;

	Возврат ВнешниеИсточники.ПолучитьДанныеОтNavision(ТекстNavision,,, Истина, 1000);

КонецФункции // ТаблицаАссортиментнойМатрицыNavision()

//	2-й этап. Формирование ассортиментной матрицы
Процедура СформироватьАссортиментнуюМатрицу(Запрос, ПервичноеЗаполнение)

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаСклады.Склад КАК Справочник.Склады).Магазин КАК Магазин,
	|	ТаблицаСклады.Склад КАК Склад,
	|	ТаблицаТовары.Ссылка КАК Номенклатура,
	|	ДанныеNavision.Количество КАК Количество,
	|	ДанныеNavision.КодИзменения КАК КодИзменения,
	|	ДанныеNavision.ДатаИзменения КАК ДатаИзменения,
	|	ТаблицаСклады.КодСклада КАК КодСклада,
	|	ДанныеNavision.IDN КАК IDN
	|ПОМЕСТИТЬ Матрица
	|ИЗ
	|	ДанныеNavision КАК ДанныеNavision
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Склады КАК ТаблицаСклады
	|		ПО ДанныеNavision.КодСклада = ТаблицаСклады.КодСклада
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаТовары
	|		ПО ДанныеNavision.IDN = ТаблицаТовары.IDN
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеNavision
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Склады
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатрицаNavision.Магазин КАК Магазин,
	|	МатрицаNavision.Склад КАК Склад,
	|	МатрицаNavision.Номенклатура КАК Номенклатура,
	|	МатрицаNavision.Количество КАК Количество,
	|	МатрицаNavision.КодИзменения,
	|	МатрицаNavision.ДатаИзменения,
	|	МатрицаNavision.КодСклада,
	|	МатрицаNavision.IDN КАК IDN,
	|	1 КАК НомерЗапроса
	|ИЗ
	|	Матрица КАК МатрицаNavision
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АссортиментнаяМатрица КАК МатрицаЛокальная
	|		ПО МатрицаNavision.Магазин = МатрицаЛокальная.Магазин
	|			И МатрицаNavision.Склад = МатрицаЛокальная.Склад
	|			И МатрицаNavision.Номенклатура = МатрицаЛокальная.Номенклатура
	|ГДЕ
	|	(МатрицаЛокальная.Номенклатура ЕСТЬ NULL 
	|			ИЛИ НЕ МатрицаNavision.Количество = МатрицаЛокальная.Количество)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	МатрицаЛокальная.Магазин,
	|	МатрицаЛокальная.Склад,
	|	МатрицаЛокальная.Номенклатура,
	|	МатрицаЛокальная.Количество,
	|	""УДАЛЕНО"",
	|	&ТекущаяДата,
	|	МатрицаЛокальная.КодСклада,
	|	МатрицаЛокальная.Номенклатура.IDN,
	|	2
	|ИЗ
	|	РегистрСведений.АссортиментнаяМатрица КАК МатрицаЛокальная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Матрица КАК МатрицаNavision
	|		ПО МатрицаЛокальная.Магазин = МатрицаNavision.Магазин
	|			И МатрицаЛокальная.Склад = МатрицаNavision.Склад
	|			И МатрицаЛокальная.Номенклатура = МатрицаNavision.Номенклатура
	|ГДЕ
	|	&ПервичноеЗаполнение = ИСТИНА
	|	И МатрицаNavision.Номенклатура ЕСТЬ NULL 
	|	И МатрицаЛокальная.Количество > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	IDN,
	|	Магазин,
	|	Склад
	|АВТОУПОРЯДОЧИВАНИЕ"
	;
	Запрос.УстановитьПараметр("ПервичноеЗаполнение", ПервичноеЗаполнение);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());

	Выборка = Запрос.Выполнить().Выбрать();

	Счётчик = 0;	//	для целей отладки.

	НаборЗаписей = РегистрыСведений.АссортиментнаяМатрица.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;

	Пока Выборка.Следующий() Цикл

		НаборЗаписей.Очистить();
		НаборЗаписей.ОбменДанными.Получатели.Очистить();
		ОбменДаннымиСервер.УстановитьПолучателейМагазина(НаборЗаписей.ОбменДанными.Получатели, Выборка.Магазин);

		НаборЗаписей.Отбор.Магазин.Установить(Выборка.Магазин);
		НаборЗаписей.Отбор.Склад.Установить(Выборка.Склад);
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);

		Если Выборка.КодИзменения = "УДАЛЕНО" Тогда

			ЗаписьНабора = Неопределено;	//	отладочная строка

		Иначе

			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);

			ЗаписьНабора.ДатаИзменения = ТекущаяДата();

		КонецЕсли;

		НаборЗаписей.Записать();

		Счётчик = Счётчик + 1;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

//	1-й этап (общий). Контроль отсутствующих позиций номенклатуры.
Процедура ПроверитьСуществованиеНоменклатуры(Запрос)

	Перем ОбъектБлокировки;

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	ДанныеNavision.IDN КАК IDN
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеNavision.IDN КАК IDN
	|	ИЗ
	|		ДанныеNavision КАК ДанныеNavision
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Номенклатура.IDN КАК IDN
	|			ИЗ
	|				Справочник.Номенклатура КАК Номенклатура
	|			ГДЕ
	|				Номенклатура.Ссылка В(&СсылкиОбработаны)) КАК Фильтр
	|			ПО ДанныеNavision.IDN = Фильтр.IDN
	|	ГДЕ
	|		Фильтр.IDN ЕСТЬ NULL ) КАК ДанныеNavision
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаТовары
	|		ПО ДанныеNavision.IDN = ТаблицаТовары.IDN
	|ГДЕ
	|	ТаблицаТовары.Ссылка ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	IDN"
	;
	СсылкиОбработаны = Новый Массив;

	Пока Истина Цикл

		Запрос.УстановитьПараметр("СсылкиОбработаны", СсылкиОбработаны);
		СписокКодов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("IDN");

		Если СписокКодов.Количество() = 0 Тогда

			Прервать;

		Иначе

			Если НЕ ВнешниеИсточники.БлокироватьПроцесс(Истина, ОбъектБлокировки) Тогда

				ВызватьИсключение "Не удалось заблокировать процесс!";

			КонецЕсли;

			ВнешниеИсточники.УстановитьНоменклатуруВТаблицеПодготовки(СписокКодов, Ложь, СсылкиОбработаны);

			ВнешниеИсточники.БлокироватьПроцесс(Ложь, ОбъектБлокировки);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры










