
Процедура СинхронизацияДанныхBigData() Экспорт
	Для каждого УзелПолучатель Из ОбменBigQueryПовтИсп.ПолучитьМассивУзлов() Цикл

		ВыполнитьВыгрузкуИзмененийВУзелBigQuery(УзелПолучатель);

	КонецЦикла;

	



КонецПроцедуры

//	LNK 23.01.2019 10:42:16
Процедура ВыполнитьВыгрузкуИзмененийВУзелBigQuery(УзелПолучатель)
ВыполнитьВыгрузкуЧеков(УзелПолучатель);
ВыполнитьВыгрузкуСегментовБезАкций(УзелПолучатель);	
//ВыполнитьВыгрузкуАкций(УзелПолучатель);
ВыполнитьВыгрузкуАкцийИСегментов(УзелПолучатель);
ВыполнитьВыгрузкуСчетчиков(УзелПолучатель);
КонецПроцедуры

Процедура ВыполнитьВыгрузкуЧеков(УзелПолучатель)
	УзелОбъект = УзелПолучатель.ПолучитьОбъект();

	Отказ = Ложь;
//	Определим, имеет ли место выгрузка изменений вплане обена, либо экстренная выгрузка какого-либо одного объекта. 
	//ВыгрузкаОдногоОбъекта = НЕ ДанныеОбъект = Неопределено;
	Попытка

		//Если НЕ РежимОтладки Тогда

			УзелОбъект.Заблокировать();
		//	сразу увеличим счётчик узла:
			УзелОбъект.НомерОтправленного = УзелОбъект.НомерОтправленного + 1;

		//КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();

		ЖурналСобытий.Регистрация(ОбменBigQueryПовтИсп.ИмяСобытияЖурнала() + ".Блокировка", УровеньЖурналаРегистрации.Предупреждение
			, УзелОбъект.Метаданные()
			, УзелОбъект.Ссылка
			,
			, "Не удалось заблокировать объект!" + Символы.ПС + ТекстОшибки
			, СокрЛП(УзелОбъект.Ссылка)
			, Истина
		);

		Отказ = Истина;

	КонецПопытки;

	Если НЕ Отказ Тогда
		ФильтрВыборки = ФильтрЧеки(УзелПолучатель);
		Если НЕ ФильтрВыборки.Количество() = 0 тогда 
			Попытка

				ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбъект.Ссылка, УзелОбъект.НомерОтправленного,ФильтрВыборки);

			Исключение

				ТекстОшибки = ОписаниеОшибки();

				ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала() + ".Выборка", УровеньЖурналаРегистрации.Предупреждение
					, УзелОбъект.Метаданные()
					, УзелОбъект.Ссылка
					,
					, "Не удалось выбрать изменения!" + Символы.ПС + ТекстОшибки
					, СокрЛП(УзелОбъект.Ссылка)
					, Истина
				);

				Отказ = Истина;

			КонецПопытки;
			ТаблицаДанных = Новый Массив;
			Пока ВыборкаИзменений.Следующий() Цикл
		        Данные = ВыборкаИзменений.Получить();
				ТаблицаДанных.Добавить(Данные.Ссылка);
			КонецЦикла;
			Результат   = ОбменBigQueryСервер.ВыполнитьЗапросКСерверуЧеки(ТаблицаДанных);
			Если НЕ Результат Тогда


					ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала()
						, УровеньЖурналаРегистрации.Ошибка
						, УзелОбъект.Метаданные()
						, УзелОбъект.Ссылка
						,
						, "Ошибка обмена: " +  Символы.ПС +
						  "Номер отправленного/полученного сообщения: " + Формат(УзелОбъект.НомерОтправленного, "ЧДЦ=; ЧН=0; ЧГ=") + " / " 
						, СокрЛП(УзелОбъект.Ссылка), Истина
					);

			Иначе
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелПолучатель, УзелОбъект.НомерОтправленного);
			КонецЕсли;
			КонецЕсли;
	КонецЕсли;	
	Если УзелОбъект.Заблокирован() Тогда

		УзелОбъект.Разблокировать();

	КонецЕсли;

КонецПроцедуры


Процедура ВыполнитьВыгрузкуАкций(УзелПолучатель)
	УзелОбъект = УзелПолучатель.ПолучитьОбъект();

	Отказ = Ложь;
//	Определим, имеет ли место выгрузка изменений вплане обена, либо экстренная выгрузка какого-либо одного объекта. 
	//ВыгрузкаОдногоОбъекта = НЕ ДанныеОбъект = Неопределено;
	Попытка

		//Если НЕ РежимОтладки Тогда

			УзелОбъект.Заблокировать();
		//	сразу увеличим счётчик узла:
			УзелОбъект.НомерОтправленного = УзелОбъект.НомерОтправленного + 1;

		//КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();

		ЖурналСобытий.Регистрация(ОбменBigQueryПовтИсп.ИмяСобытияЖурнала() + ".Блокировка", УровеньЖурналаРегистрации.Предупреждение
			, УзелОбъект.Метаданные()
			, УзелОбъект.Ссылка
			,
			, "Не удалось заблокировать объект!" + Символы.ПС + ТекстОшибки
			, СокрЛП(УзелОбъект.Ссылка), Истина
		);

		Отказ = Истина;

	КонецПопытки;

	Если НЕ Отказ Тогда

		ФильтрВыборки = ФильтрАкции(УзелПолучатель);
		Если НЕ ФильтрВыборки.Количество() = 0 тогда 
			Попытка

				ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбъект.Ссылка, УзелОбъект.НомерОтправленного,ФильтрВыборки);

			Исключение

				ТекстОшибки = ОписаниеОшибки();

				ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала() + ".Выборка", УровеньЖурналаРегистрации.Предупреждение
					, УзелОбъект.Метаданные()
					, УзелОбъект.Ссылка
					,
					, "Не удалось выбрать изменения!" + Символы.ПС + ТекстОшибки
					, СокрЛП(УзелОбъект.Ссылка), Истина
				);

				Отказ = Истина;

			КонецПопытки;

			ТаблицаДанных = Новый Массив;
			Пока ВыборкаИзменений.Следующий() Цикл
		        Данные = ВыборкаИзменений.Получить();
				ТаблицаДанных.Добавить(Данные.Ссылка);
			КонецЦикла;

			Результат   = ОбменBigQueryСервер.ВыполнитьЗапросКСерверуАкции(ТаблицаДанных);

			Если НЕ Результат Тогда

				ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала(), УровеньЖурналаРегистрации.Ошибка
					, УзелОбъект.Метаданные()
					, УзелОбъект.Ссылка
					,
					, "Ошибка обмена: " +  Символы.ПС +
					  "Номер отправленного/полученного сообщения: " + Формат(УзелОбъект.НомерОтправленного, "ЧДЦ=; ЧН=0; ЧГ=") + " / " 
					, СокрЛП(УзелОбъект.Ссылка), Истина
				);

			Иначе

				ПланыОбмена.УдалитьРегистрациюИзменений(УзелПолучатель, УзелОбъект.НомерОтправленного);

			КонецЕсли;

		КонецЕсли;

		КонецЕсли;			
		Если УзелОбъект.Заблокирован() Тогда

			УзелОбъект.Разблокировать();

		КонецЕсли;
	
КонецПроцедуры


Процедура ВыполнитьВыгрузкуАкцийИСегментов(УзелПолучатель)
	УзелОбъект = УзелПолучатель.ПолучитьОбъект();

	Отказ = Ложь;
//	Определим, имеет ли место выгрузка изменений вплане обена, либо экстренная выгрузка какого-либо одного объекта. 
	//ВыгрузкаОдногоОбъекта = НЕ ДанныеОбъект = Неопределено;
	Попытка

		//Если НЕ РежимОтладки Тогда

			УзелОбъект.Заблокировать();
		//	сразу увеличим счётчик узла:
			УзелОбъект.НомерОтправленного = УзелОбъект.НомерОтправленного + 1;

		//КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();

		ЖурналСобытий.Регистрация(ОбменBigQueryПовтИсп.ИмяСобытияЖурнала() + ".Блокировка", УровеньЖурналаРегистрации.Предупреждение
				, УзелОбъект.Метаданные()
				, УзелОбъект.Ссылка
				,
				, "Не удалось заблокировать объект!" + Символы.ПС + ТекстОшибки
				, СокрЛП(УзелОбъект.Ссылка), Истина
		);
		Отказ = Истина;

	КонецПопытки;

	Если НЕ Отказ Тогда

		ФильтрВыборки = ФильтрАкции(УзелПолучатель);
		Если НЕ ФильтрВыборки.Количество() = 0 тогда 
			Попытка

				ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбъект.Ссылка, УзелОбъект.НомерОтправленного,ФильтрВыборки);

			Исключение

				ТекстОшибки = ОписаниеОшибки();

				ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала() + ".Выборка", УровеньЖурналаРегистрации.Предупреждение
					, УзелОбъект.Метаданные()
					, УзелОбъект.Ссылка
					,
					, "Не удалось выбрать изменения!" + Символы.ПС + ТекстОшибки
					, СокрЛП(УзелОбъект.Ссылка), Истина
				);

				Отказ = Истина;

			КонецПопытки;
			ТаблицаДанных = Новый Массив;
			Пока ВыборкаИзменений.Следующий() Цикл
		        Данные = ВыборкаИзменений.Получить();
				ТаблицаДанных.Добавить(Данные.Ссылка);
			КонецЦикла;

			Результат   = ОбменBigQueryСервер.ВыполнитьЗапросКСерверуАкцииИСегменты(ТаблицаДанных);
			Если НЕ Результат Тогда

				ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала(), УровеньЖурналаРегистрации.Ошибка
					, УзелОбъект.Метаданные()
					, УзелОбъект.Ссылка
					,
					, "Ошибка обмена: " +  Символы.ПС +
					  "Номер отправленного/полученного сообщения: " + Формат(УзелОбъект.НомерОтправленного, "ЧДЦ=; ЧН=0; ЧГ=") + " / " 
					, СокрЛП(УзелОбъект.Ссылка)
					, Истина
				);

						Иначе
							ПланыОбмена.УдалитьРегистрациюИзменений(УзелПолучатель, УзелОбъект.НомерОтправленного);
			КонецЕсли;

		КонецЕсли;
			
		КонецЕсли;			
		Если УзелОбъект.Заблокирован() Тогда

			УзелОбъект.Разблокировать();

		КонецЕсли;
	
КонецПроцедуры



Процедура ВыполнитьВыгрузкуСегментов(УзелПолучатель)
	
	
	УзелОбъект = УзелПолучатель.ПолучитьОбъект();

	Отказ = Ложь;
//	Определим, имеет ли место выгрузка изменений вплане обена, либо экстренная выгрузка какого-либо одного объекта. 
	//ВыгрузкаОдногоОбъекта = НЕ ДанныеОбъект = Неопределено;
	Попытка

		//Если НЕ РежимОтладки Тогда

			УзелОбъект.Заблокировать();
		//	сразу увеличим счётчик узла:
			УзелОбъект.НомерОтправленного = УзелОбъект.НомерОтправленного + 1;

		//КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();

		ЖурналСобытий.Регистрация(ОбменBigQueryПовтИсп.ИмяСобытияЖурнала() + ".Блокировка", УровеньЖурналаРегистрации.Предупреждение
			, УзелОбъект.Метаданные()
			, УзелОбъект.Ссылка
			,
			, "Не удалось заблокировать объект!" + Символы.ПС + ТекстОшибки
			, СокрЛП(УзелОбъект.Ссылка), Истина
		);

		Отказ = Истина;

	КонецПопытки;

	Если НЕ Отказ Тогда
		ФильтрВыборки = ФильтрСегменты(УзелОбъект.Ссылка);
		Если НЕ ФильтрВыборки.Количество() = 0 тогда 
		Попытка

			ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбъект.Ссылка, УзелОбъект.НомерОтправленного,ФильтрВыборки);

		Исключение

			ТекстОшибки = ОписаниеОшибки();

			ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала() + ".Выборка", УровеньЖурналаРегистрации.Предупреждение
				, УзелОбъект.Метаданные()
				, УзелОбъект.Ссылка
				,
				, "Не удалось выбрать изменения!" + Символы.ПС + ТекстОшибки
				, СокрЛП(УзелОбъект.Ссылка)
				, Истина
			);

			Отказ = Истина;

		КонецПопытки;
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("Номенклатура");
		ТаблицаДанных.Колонки.Добавить("Сегмент");
		ТаблицаДанных.Колонки.Добавить("Действие");
		Пока ВыборкаИзменений.Следующий() Цикл
			        Данные = ВыборкаИзменений.Получить();
				Если НЕ Данные.Количество() = 0 Тогда

					Для каждого ЗаписьНабора Из Данные Цикл

						СтрокаТаблицы = ТаблицаДанных.Добавить();

						СтрокаТаблицы = ТаблицаДанных.Добавить();
						СтрокаТаблицы.Номенклатура =  ЗаписьНабора.Номенклатура;
						СтрокаТаблицы.Сегмент =  ЗаписьНабора.Сегмент;
						СтрокаТаблицы.Действие =  "create";

						
					КонецЦикла;

				Иначе

					СтрокаТаблицы = ТаблицаДанных.Добавить();


					СтрокаТаблицы.Номенклатура =  Данные.отбор.Номенклатура.Значение;
					СтрокаТаблицы.Сегмент =  Данные.отбор.Сегмент.Значение;
					СтрокаТаблицы.Действие =  "delete";

				КонецЕсли;
		КонецЦикла;
		Результат   = ОбменBigQueryСервер.ВыполнитьЗапросКСерверуСегменты(ТаблицаДанных);
			Если НЕ Результат Тогда

				ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала(), УровеньЖурналаРегистрации.Ошибка
					, УзелОбъект.Метаданные()
					, УзелОбъект.Ссылка
					,
					, "Ошибка обмена: " +  Символы.ПС +
					  "Номер отправленного/полученного сообщения: " + Формат(УзелОбъект.НомерОтправленного, "ЧДЦ=; ЧН=0; ЧГ=") + " / " 
					, СокрЛП(УзелОбъект.Ссылка)
					, Истина
				);

						Иначе
							ПланыОбмена.УдалитьРегистрациюИзменений(УзелПолучатель, УзелОбъект.НомерОтправленного);
						КонецЕсли;
					КонецЕсли;
			
			КонецЕсли;			
		Если УзелОбъект.Заблокирован() Тогда

			УзелОбъект.Разблокировать();

		КонецЕсли;
	
	
	
	
	
	
КонецПроцедуры

Процедура ВыполнитьВыгрузкуСегментовБезАкций(УзелПолучатель)
	
	
	УзелОбъект = УзелПолучатель.ПолучитьОбъект();

	Отказ = Ложь;
//	Определим, имеет ли место выгрузка изменений вплане обена, либо экстренная выгрузка какого-либо одного объекта. 
	//ВыгрузкаОдногоОбъекта = НЕ ДанныеОбъект = Неопределено;
	Попытка

		//Если НЕ РежимОтладки Тогда

			УзелОбъект.Заблокировать();
		//	сразу увеличим счётчик узла:
			УзелОбъект.НомерОтправленного = УзелОбъект.НомерОтправленного + 1;

		//КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();

			ЖурналСобытий.Регистрация(ОбменBigQueryПовтИсп.ИмяСобытияЖурнала() + ".Блокировка", УровеньЖурналаРегистрации.Предупреждение
				, УзелОбъект.Метаданные()
				, УзелОбъект.Ссылка
				,
				, "Не удалось заблокировать объект!" + Символы.ПС + ТекстОшибки
				, СокрЛП(УзелОбъект.Ссылка)
				, Истина
			);

		Отказ = Истина;

	КонецПопытки;

	Если НЕ Отказ Тогда
		ФильтрВыборки = ФильтрСегменты(УзелОбъект.Ссылка);
		Если НЕ ФильтрВыборки.Количество() = 0 тогда 
		Попытка

			ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбъект.Ссылка, УзелОбъект.НомерОтправленного,ФильтрВыборки);

		Исключение

			ТекстОшибки = ОписаниеОшибки();

			ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала() + ".Выборка", УровеньЖурналаРегистрации.Предупреждение
				, УзелОбъект.Метаданные()
				, УзелОбъект.Ссылка
				,
				, "Не удалось выбрать изменения!" + Символы.ПС + ТекстОшибки
				, СокрЛП(УзелОбъект.Ссылка)
				, Истина
			);

			Отказ = Истина;

		КонецПопытки;
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("Номенклатура");
		ТаблицаДанных.Колонки.Добавить("Сегмент");
		ТаблицаДанных.Колонки.Добавить("Действие");
		Пока ВыборкаИзменений.Следующий() Цикл
			        Данные = ВыборкаИзменений.Получить();
				Если НЕ Данные.Количество() = 0 Тогда

					Для каждого ЗаписьНабора Из Данные Цикл
						СтрокаТаблицы = ТаблицаДанных.Добавить();
						СтрокаТаблицы.Номенклатура =  ЗаписьНабора.Номенклатура;
						СтрокаТаблицы.Сегмент =  ЗаписьНабора.Сегмент;
						СтрокаТаблицы.Действие =  "create";
					КонецЦикла;

				Иначе

					СтрокаТаблицы = ТаблицаДанных.Добавить();


					СтрокаТаблицы.Номенклатура =  Данные.отбор.Номенклатура.Значение;
					СтрокаТаблицы.Сегмент =  Данные.отбор.Сегмент.Значение;
					СтрокаТаблицы.Действие =  "delete";

				КонецЕсли;
		КонецЦикла;
		Результат   = ОбменBigQueryСервер.ВыполнитьЗапросКСерверуСегментыБезАкций(ТаблицаДанных);
			Если НЕ Результат Тогда

				ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала(), УровеньЖурналаРегистрации.Ошибка
					, УзелОбъект.Метаданные()
					, УзелОбъект.Ссылка
					,
					, "Ошибка обмена: " +  Символы.ПС +
					  "Номер отправленного/полученного сообщения: " + Формат(УзелОбъект.НомерОтправленного, "ЧДЦ=; ЧН=0; ЧГ=") + " / " 
					, СокрЛП(УзелОбъект.Ссылка)
					, Истина
				);

						Иначе
							ПланыОбмена.УдалитьРегистрациюИзменений(УзелПолучатель, УзелОбъект.НомерОтправленного);
						КонецЕсли;
					КонецЕсли;
			
			КонецЕсли;			
		Если УзелОбъект.Заблокирован() Тогда

			УзелОбъект.Разблокировать();

		КонецЕсли;
	
	
	
	
	
	
КонецПроцедуры

Функция ФильтрСегменты(УзелПолучатель)
	
	Запрос = Новый Запрос;

	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 100000
		|	ТаблицаИзменений.Номенклатура КАК Номенклатура,
		|	ТаблицаИзменений.Сегмент КАК Сегмент,
		|	ТаблицаИзменений.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.НоменклатураСегмента.Изменения КАК ТаблицаИзменений
		|ГДЕ
		|	ТаблицаИзменений.Узел = &УзелПолучатель"
		;

	СписокОбъектов = Новый Массив;

	Запрос.УстановитьПараметр("УзелПолучатель", УзелПолучатель);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока    Выборка.Следующий() цикл
		НаборЗаписей = РегистрыСведений.НоменклатураСегмента.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		НаборЗаписей.Отбор.Сегмент.Установить(Выборка.Сегмент);		
		НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика);		
		СписокОбъектов.Добавить(НаборЗаписей);
	КонецЦикла;
	
	Возврат СписокОбъектов; 
КонецФункции

Процедура ВыполнитьВыгрузкуСчетчиковПрохода()
	
КонецПроцедуры

Процедура ВыполнитьВыгрузкуВидыСкидокНаценок()
	
КонецПроцедуры

Функция ФильтрЧеки(УзелПолучатель)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	ТаблицаИзменений.Ссылка КАК Ссылка,
		|	ТаблицаПоддержки.Дата КАК Период
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Изменения КАК ТаблицаИзменений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ТаблицаПоддержки
		|		ПО ТаблицаИзменений.Ссылка = ТаблицаПоддержки.Ссылка
		|ГДЕ
		|	ТаблицаИзменений.Узел = &УзелПолучатель
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ"
		;
		МенеджерОбъекта = Документы.ОтчетОРозничныхПродажах;
		КлючКласса      = "Ссылка";
	СписокОбъектов = Новый Массив;

	Запрос.УстановитьПараметр("УзелПолучатель", УзелПолучатель);

	//ЗаполнитьСписокОбъектов(МенеджерОбъекта, Запрос.Выполнить().Выбрать(), СписокОбъектов, КлючКласса);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока    Выборка.Следующий() цикл
		СписокОбъектов.Добавить(Выборка.Ссылка);		
	КонецЦикла;
		
	Возврат СписокОбъектов;

КонецФункции

Процедура ЗаполнитьСписокОбъектов(МенеджерОбъекта, Выборка, СписокОбъектов, КлючКласса)

	Пока Выборка.Следующий() Цикл
		
		Если КлючКласса = "НаборЗаписей" Тогда

		//	Для периодического регистра сведений в выборке должен присутствовать период.
			НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();

			Для каждого Элемент Из НаборЗаписей.Отбор Цикл

				Попытка

					Элемент.Установить(Выборка[Элемент.Имя]);

				Исключение

				//	У некоего измерения регистра может НЕ быть установлено свойство "Основной отбор".
					ТекстОшибки = ОписаниеОшибки();

				КонецПопытки;

			КонецЦикла;

			СписокОбъектов.Добавить(НаборЗаписей);

		Иначе

			СписокОбъектов.Добавить(Выборка.Ссылка);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ФильтрСчетчики(УзелПолучатель)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 3000
		|	ТаблицаИзменений.Ссылка КАК Ссылка,
		|	ТаблицаПоддержки.Дата КАК Период
		|ИЗ
		|	Документ.РегистрацияПодсчетаПосетителей.Изменения КАК ТаблицаИзменений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистрацияПодсчетаПосетителей КАК ТаблицаПоддержки
		|		ПО ТаблицаИзменений.Ссылка = ТаблицаПоддержки.Ссылка
		|ГДЕ
		|	ТаблицаИзменений.Узел = &УзелПолучатель
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ"
		;
		МенеджерОбъекта = Документы.РегистрацияПодсчетаПосетителей;
		КлючКласса      = "Ссылка";
	СписокОбъектов = Новый Массив;

	Запрос.УстановитьПараметр("УзелПолучатель", УзелПолучатель);

	//ЗаполнитьСписокОбъектов(МенеджерОбъекта, Запрос.Выполнить().Выбрать(), СписокОбъектов, КлючКласса);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока    Выборка.Следующий() цикл
		СписокОбъектов.Добавить(Выборка.Ссылка);		
	КонецЦикла;
		
	Возврат СписокОбъектов;

КонецФункции


Процедура ВыполнитьВыгрузкуСчетчиков(УзелПолучатель)
	УзелОбъект = УзелПолучатель.ПолучитьОбъект();
	Отказ = Ложь;
//	Определим, имеет ли место выгрузка изменений вплане обена, либо экстренная выгрузка какого-либо одного объекта. 
	//ВыгрузкаОдногоОбъекта = НЕ ДанныеОбъект = Неопределено;
	Попытка

		//Если НЕ РежимОтладки Тогда

			УзелОбъект.Заблокировать();
		//	сразу увеличим счётчик узла:
			УзелОбъект.НомерОтправленного = УзелОбъект.НомерОтправленного + 1;

		//КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();

		ЖурналСобытий.Регистрация(ОбменBigQueryПовтИсп.ИмяСобытияЖурнала() + ".Блокировка", УровеньЖурналаРегистрации.Предупреждение
			, УзелОбъект.Метаданные()
			, УзелОбъект.Ссылка
			,
			, "Не удалось заблокировать объект!" + Символы.ПС + ТекстОшибки
			, СокрЛП(УзелОбъект.Ссылка)
			, Истина
		);

		Отказ = Истина;

	КонецПопытки;

	Если НЕ Отказ Тогда

			ФильтрВыборки = ФильтрСчетчики(УзелПолучатель);
			Если НЕ ФильтрВыборки.Количество() = 0 тогда 

		Попытка

			ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбъект.Ссылка, УзелОбъект.НомерОтправленного,ФильтрВыборки);

		Исключение

			ТекстОшибки = ОписаниеОшибки();

			ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала() + ".Выборка", УровеньЖурналаРегистрации.Предупреждение
				, УзелОбъект.Метаданные()
				, УзелОбъект.Ссылка
				,
				, "Не удалось выбрать изменения!" + Символы.ПС + ТекстОшибки
				, СокрЛП(УзелОбъект.Ссылка)
				, Истина
			);

			Отказ = Истина;

		КонецПопытки;
		ТаблицаДанных = Новый Массив;
		Пока ВыборкаИзменений.Следующий() Цикл
	        Данные = ВыборкаИзменений.Получить();
			ТаблицаДанных.Добавить(Данные.Ссылка);
		КонецЦикла;
		Результат   = ОбменBigQueryСервер.ВыполнитьЗапросКСерверуСчетчики(ТаблицаДанных);
			Если НЕ Результат Тогда


				ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала(), УровеньЖурналаРегистрации.Ошибка
					, УзелОбъект.Метаданные()
					, УзелОбъект.Ссылка
					,
					, "Ошибка обмена: " +  Символы.ПС +
					  "Номер отправленного/полученного сообщения: " + Формат(УзелОбъект.НомерОтправленного, "ЧДЦ=; ЧН=0; ЧГ=") + " / " 
					, СокрЛП(УзелОбъект.Ссылка)
					, Истина
				);

						Иначе
							ПланыОбмена.УдалитьРегистрациюИзменений(УзелПолучатель, УзелОбъект.НомерОтправленного);
						КонецЕсли;
					КонецЕсли;
		КонецЕсли;	
					
		Если УзелОбъект.Заблокирован() Тогда

			УзелОбъект.Разблокировать();

		КонецЕсли;
	
КонецПроцедуры


Функция ФильтрАкции(УзелПолучатель)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	ТаблицаИзменений.Ссылка КАК Ссылка,
		|	ТаблицаПоддержки.Дата КАК Период
		|ИЗ
		|	Документ.МаркетинговаяАкция.Изменения КАК ТаблицаИзменений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркетинговаяАкция КАК ТаблицаПоддержки
		|		ПО ТаблицаИзменений.Ссылка = ТаблицаПоддержки.Ссылка
		|ГДЕ
		|	ТаблицаИзменений.Узел = &УзелПолучатель
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ"
		;
		МенеджерОбъекта = Документы.ОтчетОРозничныхПродажах;
		КлючКласса      = "Ссылка";
	СписокОбъектов = Новый Массив;

	Запрос.УстановитьПараметр("УзелПолучатель", УзелПолучатель);

	//ЗаполнитьСписокОбъектов(МенеджерОбъекта, Запрос.Выполнить().Выбрать(), СписокОбъектов, КлючКласса);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока    Выборка.Следующий() цикл
		СписокОбъектов.Добавить(Выборка.Ссылка);		
	КонецЦикла;
		
	Возврат СписокОбъектов;

КонецФункции


Функция ВыгрузкаАкцийПоРегистру()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	ОбъектыДляОбработкиBigQueryСрезПоследних.Объект КАК Объект,
		|	ОбъектыДляОбработкиBigQueryСрезПоследних.Магазин КАК Магазин,
		|	ОбъектыДляОбработкиBigQueryСрезПоследних.ДатаНачалаДействия КАК date_start,
		|	ОбъектыДляОбработкиBigQueryСрезПоследних.ДатаОкончанияДействия КАК date_end,
		|	ОбъектыДляОбработкиBigQueryСрезПоследних.action КАК action,
		|	ОбъектыДляОбработкиBigQueryСрезПоследних.Период КАК Период,
		|	Склады.IDN КАК pos_id
		|ИЗ
		|	РегистрСведений.ОбъектыДляОбработкиBigQuery.СрезПоследних КАК ОбъектыДляОбработкиBigQueryСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО (ОбъектыДляОбработкиBigQueryСрезПоследних.Магазин = Склады.Магазин
		|				И Склады.ПометкаУдаления = ЛОЖЬ
		|				И Склады.ТипСклада = &ТипСклада)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Объект";
	 Запрос.УстановитьПараметр("ТипСклада",Перечисления.ТипыСкладов.ТорговыйЗал);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТабЗнач	= Новый ТаблицаЗначений;
	ТабЗнач.Колонки.Добавить("date_start");
	ТабЗнач.Колонки.Добавить("date_end");
	ТабЗнач.Колонки.Добавить("action");
	ТабЗнач.Колонки.Добавить("Магазин");
	ТабЗнач.Колонки.Добавить("Период");
	ТабЗнач.Колонки.Добавить("Объект");
	ТабЗнач.Колонки.Добавить("pos_id");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СТр = ТабЗнач.Добавить();
	ЗаполнитьЗначенияСвойств(СТр,ВыборкаДетальныеЗаписи);
КонецЦикла;
Если ОбменBigQueryСервер.ОбработатьРегистр(ТабЗнач) тогда
	Очиститьегистр(ТабЗнач);
КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции


Функция Очиститьегистр(ТабЗнач)
	Для каждого строка из ТабЗнач цикл
	НаборЗаписей = РегистрыСведений.ОбъектыДляОбработкиBigQuery.СоздатьНаборЗаписей(); 

	НаборЗаписей.Отбор.Объект.Установить(строка.Объект);
	НаборЗаписей.Отбор.Период.Установить(строка.Период); 
	НаборЗаписей.Отбор.Магазин.Установить(строка.Магазин); 
	НаборЗаписей.Отбор.ДатаНачалаДействия.Установить(строка.date_start); 
	НаборЗаписей.Отбор.ДатаОкончанияДействия.Установить(строка.date_end); 
	НаборЗаписей.Записать(Истина);

	КонецЦикла;
КонецФункции

