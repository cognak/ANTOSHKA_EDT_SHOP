//	LNK 06.10.2016 10:32:52
Функция ВыполнениеЗаданияРазрешено(ИмяРегламентногоЗадания)	Экспорт

	Отказ = Ложь;
	УстановитьПривилегированныйРежим(Истина);

	Для каждого РегламентноеЗадание Из РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", ИмяРегламентногоЗадания)) Цикл

		ОтборЗаданий = Новый Структура(
			"Состояние, РегламентноеЗадание"
			, СостояниеФоновогоЗадания.Активно
			, РегламентноеЗадание);

		Для каждого ФоновоеЗадание Из ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий) Цикл

			Если НЕ ФоновоеЗадание.УникальныйИдентификатор = РегламентноеЗадание.ПоследнееЗадание.УникальныйИдентификатор Тогда

				ЗаписьЖурналаРегистрации("Регламентные задания." + ИмяРегламентногоЗадания
					, УровеньЖурналаРегистрации.Предупреждение
					, , ИмяРегламентногоЗадания
					, "Пресечено выполнение контекста регламента «" + ИмяРегламентногоЗадания + "» во время активного предыдущего сеанса."
					, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

				Отказ = Истина;
				Прервать;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь);

	Возврат НЕ Отказ;

КонецФункции // ВыполнениеЗаданияРазрешено()

//	LNK 30.09.2020 08:19:33
Функция ПолучитьРежимФункционала(Имя)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаРегистра.Отладка КАК Отладка,
	|	ТаблицаРегистра.ИмитацияAPI КАК ИмитацияAPI,
	|	ТаблицаРегистра.ИсключительныйРежим КАК ИсключительныйРежим,
	|	ТаблицаРегистра.ВыполняютсяСлужебныеДействия КАК ВыполняютсяСлужебныеДействия,
	|	1 КАК КлючПорядка
	|ИЗ
	|	РегистрСведений.РежимФункционала КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Пользователь = &ТекущийПользователь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаРегистра.Отладка,
	|	ТаблицаРегистра.ИмитацияAPI,
	|	ТаблицаРегистра.ИсключительныйРежим,
	|	ТаблицаРегистра.ВыполняютсяСлужебныеДействия,
	|	2
	|ИЗ
	|	РегистрСведений.РежимФункционала КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка"
	);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);

	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	Выборка.Следующий();

	СоставРеквизитов = ОбщегоНазначенияРТ.СоздатьСтруктуруПоСтрокеВыборки(Результат, Выборка, Истина);

	Возврат СоставРеквизитов[Имя];

КонецФункции

#Область ПроцессыДляОбеспечениеТехническойПоддержки

//	LNK 14.10.2016 08:01:21
Процедура ВыполнитьОтложенныеДвижения(СписокСсылок = Неопределено, СписокКлючей = Неопределено)	Экспорт

	Если СписокКлючей = Неопределено Тогда

		СписокКлючей = Новый Массив;

	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОтложенныеДвиженияДокументов.Документ КАК Документ,
	|	ОтложенныеДвиженияДокументов.ЭлементСтруктуры,
	|	ОтложенныеДвиженияДокументов.ДатаДокумента КАК ДатаДокумента
	|ИЗ
	|	РегистрСведений.ОтложенныеДвиженияДокументов КАК ОтложенныеДвиженияДокументов
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &СписокУказан = ИСТИНА
	|				ТОГДА ОтложенныеДвиженияДокументов.Документ В (&СписокСсылок)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ"
	);
	Запрос.УстановитьПараметр("СписокСсылок", ?(СписокСсылок = Неопределено, Новый Массив, СписокСсылок));
	Запрос.УстановитьПараметр("СписокУказан", НЕ Запрос.Параметры.СписокСсылок.Количество() = 0);
	
	Счётчик = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		Попытка

			ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
			ТипДокумента   = ТипЗнч(Выборка.Документ);

			Если НЕ ДокументОбъект.Проведен И НЕ ДокументОбъект.ПометкаУдаления Тогда

				Если ДокументОбъект.Дата = НачалоДня(ДокументОбъект.Дата) Тогда

					Счётчик = Счётчик + 1;
					ДокументОбъект.Дата = ДокументОбъект.Дата + Счётчик;

				КонецЕсли;

			//	Регистр "ЦеныНоменклатуры" имеет периодичность "секунда". Так что иногда регистраторы попадают в
			//	одну и ту же секунду. Попробуем минимизировать такую проблему.
				КоличествоИтераций = ?(ТипДокумента = Тип("ДокументСсылка.УстановкаЦенНоменклатуры"), 5, 1);

				Для Итерация = 1 По КоличествоИтераций Цикл

					Попытка
			
						ПараметрыСеанса.ИсключительныйРежим = Истина;

						ДокументОбъект.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);

						Прервать;

					Исключение

						ТекстОшибки = ОписаниеОшибки();

						Если Итерация = КоличествоИтераций Тогда

							ВызватьИсключение ТекстОшибки;

						Иначе

							Счётчик = Счётчик + 3;
							ДокументОбъект.Дата = ДокументОбъект.Дата + Счётчик;

						КонецЕсли;

					КонецПопытки;

				КонецЦикла;

			КонецЕсли;

			МенеджерЗаписи = РегистрыСведений.ОтложенныеДвиженияДокументов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Удалить();

			Если  ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.УстановкаЦенНоменклатуры")
				И НачалоДня(ДокументОбъект.Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда

				Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.ВидыЦен Цикл

					Если СписокКлючей.Найти(СтрокаТабличнойЧасти.ВидЦены) = Неопределено Тогда

						СписокКлючей.Добавить(СтрокаТабличнойЧасти.ВидЦены);

					КонецЕсли;

				КонецЦикла;

			КонецЕсли;

			ПараметрыСеанса.ИсключительныйРежим = Ложь;
		
		Исключение

			ТекстОшибки = ОписаниеОшибки();

			Попытка

				МенеджерЗаписи = РегистрыСведений.ОтложенныеДвиженияДокументов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);

				МенеджерЗаписи.КоличествоНеудачныхПроведений = МенеджерЗаписи.КоличествоНеудачныхПроведений + 1;
				МенеджерЗаписи.СообщениеОбОшибкеПроведения   = ТекстОшибки;

				МенеджерЗаписи.Записать();

			Исключение

				Сообщить("Не удалось обработать " + Выборка.Документ
					+ Символы.ПС + ТекстОшибки
					+ Символы.ПС + "(" + ОписаниеОшибки() + ")");

			КонецПопытки;

		КонецПопытки;

	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

//	LNK 20.05.2019 14:41:52
Процедура КонтрольНастроекСистемы() Экспорт

	УстановитьПривилегированныйРежим(Истина);

//	Проверяем и изменяем различные настройки системы, управляемые данными (например, флаги "РегистрыСведений.УчетнаяПолитикаМагазинов").

	РегистрыСведений.УчетнаяПолитикаМагазинов.ПроверитьРегламентФормированиеСегментов();
	Справочники.Алгоритмы.ПроверитьРегламентВыполненияАлгоритмов();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТотальныхПодписокНаСобытия

//	LNK 26.09.2016 13:20:26
Процедура ОбработчикПередУдалениемОбъекта(Источник, Отказ) Экспорт

	Если ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() = Истина
	ИЛИ  ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(Источник.ДополнительныеСвойства, "СлужебноеУдаление", Ложь) = Истина
	ИЛИ  ТехническаяПоддержкаПовтИсп.ТипыДанныхРазрешеноУдалить().Получить(ТипЗнч(Источник)) = Истина
	Тогда

		Возврат;

	КонецЕсли;

	Если Источник.ОбменДанными.Загрузка = Истина И ЗначениеЗаполнено(Источник.ОбменДанными.Отправитель) Тогда

	//	Это контекст обмена данными... пропускаем, чтобы не поломать обмены.
	//	Но, в дальнейшем, необходимо исключить отправку объекта "УдалениеДанных"! Не забыть, самое главное.
		Возврат;

	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Контроль целостности данных. Удаление объектов в системе запрещено! Отказано.",
		Источник,
		,
		,
		Отказ
	);

КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеДанныхОтложеннымиПроцессами

//	LNK 10.05.2017 14:33:37
Процедура ВыполнитьОтложенныеПроцессы(КлючПроцесса)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если КлючПроцесса = "ПереброскаТоваровМеждуМагазинами" Тогда

		Процесс_ПереброскаТоваровМеждуМагазинами();

	ИначеЕсли КлючПроцесса = "РеализацияЗаказовПокупателей" Тогда	//	LNK 25.07.2022 14:55:08

		Если НЕ (ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() ИЛИ ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().ВидУзла = Перечисления.ВидыУзлов.ТестовыйУзел) Тогда

			РегистрыСведений.РеализацияЗаказовПокупателей.СинхронизироватьРеализацияЗаказовПокупателей();

		КонецЕсли;

	ИначеЕсли КлючПроцесса = "НачисленияМотивационнойПрограммы" Тогда

		МотивационнаяПрограммаСервер.ВыполнитьНачисленияМотивационнойПрограммы(ТекущаяДатаСеанса() - 86400 * 3);	//	Позапозавчера
		МотивационнаяПрограммаСервер.ВыполнитьНачисленияМотивационнойПрограммы(ТекущаяДатаСеанса() - 86400 * 2);	//	Позавчера
		МотивационнаяПрограммаСервер.ВыполнитьНачисленияМотивационнойПрограммы(ТекущаяДатаСеанса() - 86400);		//	Вчера

	ИначеЕсли КлючПроцесса = "СверкаИнформативныхОстатковТоваровПоМагазинам" Тогда

		РегистрыСведений.ИнформативныеОстаткиТоваровПоМагазинам.ВыполнитьСверкуИнформативныеОстаткиТоваровПоМагазинам();

	ИначеЕсли КлючПроцесса = "ПроверкаПеремещенийПоЗаказамПокупателей" Тогда

		РезервированиеТоваровСервер.ПроверитьПеремещенияПоЗаказамПокупателей();

	ИначеЕсли КлючПроцесса = "ПроцедурыСрезаНакопленийДисконтныхКлиентов" Тогда

		ИнформационныеКартыСлужебный.РегламентЕжегодногоСрезаНакопленийИБлокировкиДисконтныхКарт();

	ИначеЕсли КлючПроцесса = "ФиксироватьГодовуюАктивностьПокупателя" Тогда

		Если ДеньГода(ТекущаяДата()) <= 10 Тогда

			ИнформационныеКартыСлужебный.ФиксироватьГодовуюАктивностьПокупателя(Год(ТекущаяДата() - 86400 * 30));

		КонецЕсли;

		ИнформационныеКартыСлужебный.ФиксироватьГодовуюАктивностьПокупателя(Год(ТекущаяДата()));

	ИначеЕсли КлючПроцесса = "ЗакрытиеЗаказовПокупателейИдентифицированное" Тогда

		Процесс_ЗакрытиеЗаказовПокупателейИдентифицированное();

	ИначеЕсли КлючПроцесса = "ЗагрузкаДанныхТоваровИнтернетМагазина" Тогда

		Процесс_ЗагрузкаДанныхТоваровИнтернетМагазина("http://backoffice.antoshka.ua/connector/export/softcube", ПолучитьИмяВременногоФайла("xml"));

	ИначеЕсли КлючПроцесса = "НоменклатурноеСостояние" Тогда

	//	работаем за 3 суток назад, ВКЛЮЧАЯ текущие сутки (продаж ещё нет, вроде).
	//	LNK 28.04.2021 17:19:12 - изменил Счётчик = 0 (ВКЛЮЧАЯ). Раньше было от 1 до 3
		Для Счётчик = 0 По 3 Цикл

			ПараметрыЗадания = Новый Массив(3);
			ПараметрыЗадания[0] = НачалоДня(НачалоДня(ТекущаяДата()) - 86400 * Счётчик);
			ПараметрыЗадания[1] = Неопределено;
			ПараметрыЗадания[2] = Неопределено;

			КлючЗадания = "#DAY#" + Формат(ПараметрыЗадания[0], "ДФ=dd.MM.yyyy");

			ФоновыеЗадания.Выполнить("ТехническаяПоддержка.Процесс_НоменклатурноеСостояние", ПараметрыЗадания);

		КонецЦикла;

	ИначеЕсли КлючПроцесса = "ОбзвонКлиентов" Тогда

	       ПоддержкаСписокОбзвона();

	ИначеЕсли КлючПроцесса = "ОбзвонКлиентовПарикмахерская" Тогда

	       ПоддержкаСписокОбзвонаПарикмахерские();

	ИначеЕсли КлючПроцесса = "ОбработкаВыданныхКарт" Тогда			//	LNK 05.03.2019 14:49:56

		ВерификацияКлиентовСервер.ВыполнитьОбработкуВыданныхКарт();

	ИначеЕсли КлючПроцесса = "ОповещениеОбАннуляцииБонусныхБаллов" Тогда	//	LNK 12.10.2022 06:03:42

		БонусныеБаллыСобытия.ВыполнитьОбщуюПроцедуруОповещенияАннуляции();

	КонецЕсли;

КонецПроцедуры

//	LNK 10.05.2017 14:37:36
Процедура Процесс_ПереброскаТоваровМеждуМагазинами(ДатаКонтроля = '00010101')	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокументы.Дата КАК Дата,
	|	ТаблицаДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ТаблицаЗавершение
	|		ПО ТаблицаДокументы.Ссылка = ТаблицаЗавершение.ДокументОснование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаУчета
	|		ПО (ТаблицаУчета.Объект ССЫЛКА Документ.ПеремещениеТоваров)
	|			И ТаблицаДокументы.Ссылка = ТаблицаУчета.Объект
	|			И (ТаблицаДокументы.МагазинОтправитель = ТаблицаУчета.Магазин
	|				ИЛИ ТаблицаДокументы.МагазинПолучательКонечный = ТаблицаУчета.Магазин)
	|ГДЕ
	|	ТаблицаДокументы.Проведен
	|	И НЕ ТаблицаДокументы.УзелСоздания = ЗНАЧЕНИЕ(Справочник.СтруктураУзлов.КСУ_Navision)
	|	И ТаблицаДокументы.МагазинПолучатель.СкладУправляющейСистемы = ИСТИНА
	|	И НЕ ТаблицаДокументы.МагазинПолучательКонечный = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|	И ТаблицаЗавершение.Ссылка ЕСТЬ NULL 
	|	И ТаблицаУчета.ДатаРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, -14), ДЕНЬ) И КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка"
	);
	Запрос.УстановитьПараметр("ТекущаяДата", ?(ДатаКонтроля = '00010101', ТекущаяДатаСеанса(), ДатаКонтроля));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		Документы.ПеремещениеТоваров.ПроверитьПоступлениеНаМагазинПолучательКонечный(Выборка.Ссылка, Ложь);

	КонецЦикла;

КонецПроцедуры

//	LNK 19.03.2018 15:11:15
Процедура Процесс_ЗакрытиеЗаказовПокупателейИдентифицированное()	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел()
	И НЕ РозничныеПродажиСерверПовтИсп.ЭтоУзелИнтернетМагазина()
	И НЕ ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИсточникЗаказовПокупателей") = Перечисления.УчетныеСистемыКомпании.MSDynCRM	Тогда

		ТаблицаОчистки = Новый ТаблицаЗначений;
		ТаблицаОчистки.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		ТаблицаОчистки.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));

		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаРегистра.Период КАК Период,
		|	ТаблицаДокументы.Магазин КАК Магазин,
		|	ТаблицаДокументы.Магазин.Организация КАК Организация,
		|	ТаблицаРегистра.Индекс КАК Индекс,
		|	ТаблицаДокументы.Ссылка КАК ЗаказПокупателя,
		|	ТаблицаРегистра.IDN КАК IDN
		|ИЗ
		|	РегистрСведений.ОбъектыДляОбработки КАК ТаблицаРегистра
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ТаблицаДокументы
		|		ПО ТаблицаРегистра.IDN = ТаблицаДокументы.НомерЗаказаНаСайте
		|ГДЕ
		|	ТаблицаРегистра.ДействиеКоманда = ""WEB_ЗАКРЫТЬ_ЗАКАЗ_ПОКУПАТЕЛЯ""
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	IDN
		|ИТОГИ
		|	МАКСИМУМ(Организация)
		|ПО
		|	Магазин"
		);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());

		МагазиныВыборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Контрольный = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаДокументы.Ссылка КАК ЗаказПокупателя
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ТаблицаДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(, Заказ В (&СписокЗаказов)) КАК ТаблицаРегистра
		|		ПО ТаблицаДокументы.Ссылка = ТаблицаРегистра.Заказ
		|ГДЕ
		|	ТаблицаДокументы.Ссылка В(&СписокЗаказов)
		|	И ТаблицаДокументы.Проведен
		|	И ТаблицаРегистра.КоличествоОстаток ЕСТЬ NULL"
		);

		Пока МагазиныВыборка.Следующий() Цикл

			Попытка

				НачатьТранзакцию();

				ДокументОбъект = Документы.ЗакрытиеЗаказовПокупателей.СоздатьДокумент();
				ДокументОбъект.Дата = ТекущаяДатаСеанса();
				ДокументОбъект.Магазин     = МагазиныВыборка.Магазин;
				ДокументОбъект.Организация = МагазиныВыборка.Организация;
				ДокументОбъект.Комментарий = "Идентифицированное закрытие заказов покупателей.";
				ДокументОбъект.КлючУникальности = "WEB: команда об отмене";

				ЗаказыВыборка = МагазиныВыборка.Выбрать();

				ТаблицаОчистки.Очистить();

				Пока ЗаказыВыборка.Следующий() Цикл

					Если ДокументОбъект.Реестр.Найти(ЗаказыВыборка.ЗаказПокупателя, "ЗаказПокупателя") = Неопределено Тогда

						СтрокаРеестра = ДокументОбъект.Реестр.Добавить();
						СтрокаРеестра.ЗаказПокупателя = ЗаказыВыборка.ЗаказПокупателя;
						СтрокаРеестра.ПричинаОтмены   = Справочники.ПричиныОтменыЗаказовПокупателей.ОтменаПоРаспоряжениюИнтернетМагазина;

					КонецЕсли;

					СтрокаОчистить = ТаблицаОчистки.Добавить();
					СтрокаОчистить.Период = ЗаказыВыборка.Период;
					СтрокаОчистить.Индекс = ЗаказыВыборка.Индекс;

				КонецЦикла;

				Если НЕ ДокументОбъект.Реестр.Количество() = 0 Тогда

					Контрольный.УстановитьПараметр("СписокЗаказов", ДокументОбъект.Реестр.ВыгрузитьКолонку("ЗаказПокупателя"));
					ВыборкаКонтроль = Контрольный.Выполнить().Выбрать();

					Пока ВыборкаКонтроль.Следующий() Цикл

						СтрокиРеестра = ДокументОбъект.Реестр.НайтиСтроки(Новый Структура("ЗаказПокупателя", ВыборкаКонтроль.ЗаказПокупателя));

						Для каждого СтрокаРеестра Из СтрокиРеестра Цикл

							ДокументОбъект.Реестр.Удалить(СтрокаРеестра);

						КонецЦикла;

					КонецЦикла;

					Если НЕ ДокументОбъект.Реестр.Количество() = 0 Тогда

						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);

					КонецЕсли;

				КонецЕсли;

				Для каждого СтрокаОчистить Из ТаблицаОчистки Цикл

					МенеджерЗаписи = РегистрыСведений.ОбъектыДляОбработки.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Период  = СтрокаОчистить.Период;
					МенеджерЗаписи.Магазин = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ЦентрУправляющейСистемы");
					МенеджерЗаписи.Индекс  = СтрокаОчистить.Индекс;

					МенеджерЗаписи.Удалить();

				КонецЦикла;

				ЗафиксироватьТранзакцию();

			Исключение

				ТекстОшибки = ОписаниеОшибки();
				ОтменитьТранзакцию();

			КонецПопытки;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	LNK 07.11.2018 10:58:06
Процедура Процесс_НоменклатурноеСостояние(Период, Магазин = Неопределено, Принудительно = Ложь)	Экспорт

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Возврат;

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Магазины.Ссылка КАК Магазин,
	|	Магазины.ПравилоЦенообразования.ВидЦен КАК ВидЦены,
	|	Магазины.НомерМагазина КАК НомерМагазина
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Магазин = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|						И НЕ Магазины.ПометкаУдаления
	|						И Магазины.ВведенВЭксплуатацию
	|			ИНАЧЕ Магазины.Ссылка = &Магазин
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерМагазина"
	);
	Запрос.УстановитьПараметр("Магазин", Магазин);

//	работаем по каждому активному магазину в отдельности!
	МагазиныВыборка = Запрос.Выполнить().Выбрать();

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК Склад,
	|	ТаблицаСправочник.НазначениеСклада КАК НазначениеСклада,
	|	ТаблицаСправочник.ТипСклада КАК ТипСклада
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	Справочник.Склады КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Магазин = &Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ТаблицаОстатки.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика КАК Характеристика,
	|	&Магазин КАК Магазин,
	|	СУММА(ТаблицаОстатки.КоличествоОстаток) КАК КоличествоНаСкладах,
	|	0 КАК КоличествоПриход,
	|	0 КАК КоличествоРасход,
	|	0 КАК КоличествоПродажи,
	|	0 КАК СуммаПродажи
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&Период, ДЕНЬ), СЕКУНДА, 1),
	|			Склад В
	|				(ВЫБРАТЬ
	|					Фильтр.Склад
	|				ИЗ
	|					Фильтр
	|				ГДЕ
	|					НЕ Фильтр.НазначениеСклада = ЗНАЧЕНИЕ(Перечисление.НазначенияСкладов.Брак))) КАК ТаблицаОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатки.Номенклатура,
	|	ТаблицаОстатки.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	ТаблицаОбороты.Номенклатура,
	|	ТаблицаОбороты.Характеристика,
	|	&Магазин,
	|	0,
	|	СУММА(ТаблицаОбороты.КоличествоПриход),
	|	СУММА(ТаблицаОбороты.КоличествоРасход),
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Обороты(
	|			НАЧАЛОПЕРИОДА(&Период, ДЕНЬ),
	|			КОНЕЦПЕРИОДА(&Период, ДЕНЬ),
	|			Регистратор,
	|			Склад В
	|				(ВЫБРАТЬ
	|					Фильтр.Склад
	|				ИЗ
	|					Фильтр)) КАК ТаблицаОбороты
	|ГДЕ
	|	НЕ ТаблицаОбороты.Регистратор ССЫЛКА Документ.ОрдерНаПеремещениеТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбороты.Номенклатура,
	|	ТаблицаОбороты.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика,
	|	&Магазин,
	|	0,
	|	0,
	|	0,
	|	СУММА(ТаблицаПродажи.КоличествоОборот),
	|	СУММА(ТаблицаПродажи.СтоимостьОборот)
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(
	|			НАЧАЛОПЕРИОДА(&Период, ДЕНЬ),
	|			КОНЕЦПЕРИОДА(&Период, ДЕНЬ),
	|			День,
	|			Склад В
	|				(ВЫБРАТЬ
	|					Фильтр.Склад
	|				ИЗ
	|					Фильтр)) КАК ТаблицаПродажи
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Фильтр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.Период КАК Период,
	|	ТаблицаДанных.Магазин КАК Магазин,
	|	ТаблицаДанных.Номенклатура КАК Номенклатура,
	|	ТаблицаДанных.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ТаблицаДанных.ТипПереоценки) КАК ТипПереоценки,
	|	СУММА(ТаблицаДанных.КоличествоНаСкладах) КАК КоличествоНаСкладах,
	|	СУММА(ТаблицаДанных.КоличествоПриход) КАК КоличествоПриход,
	|	СУММА(ТаблицаДанных.КоличествоРасход) КАК КоличествоРасход,
	|	СУММА(ТаблицаДанных.КоличествоПродажи) КАК КоличествоПродажи,
	|	СУММА(ТаблицаДанных.СуммаПродажи) КАК СуммаПродажи
	|ПОМЕСТИТЬ Состояния
	|ИЗ
	|	(ВЫБРАТЬ
	|		Данные.Период КАК Период,
	|		Данные.Магазин КАК Магазин,
	|		Данные.Номенклатура КАК Номенклатура,
	|		Данные.Характеристика КАК Характеристика,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыПереоценок.ПустаяСсылка) КАК ТипПереоценки,
	|		Данные.КоличествоНаСкладах КАК КоличествоНаСкладах,
	|		Данные.КоличествоПриход КАК КоличествоПриход,
	|		Данные.КоличествоРасход КАК КоличествоРасход,
	|		Данные.КоличествоПродажи КАК КоличествоПродажи,
	|		Данные.СуммаПродажи КАК СуммаПродажи
	|	ИЗ
	|		Данные КАК Данные
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&Период,
	|		&Магазин,
	|		ТаблицаЦены.Номенклатура,
	|		ТаблицаЦены.Характеристика,
	|		ТаблицаЦены.ТипПереоценки,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				КОНЕЦПЕРИОДА(&Период, ДЕНЬ),
	|				ВидЦены = &ВидЦены
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							Данные.Номенклатура
	|						ИЗ
	|							Данные)) КАК ТаблицаЦены) КАК ТаблицаДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДанных.Период,
	|	ТаблицаДанных.Магазин,
	|	ТаблицаДанных.Номенклатура,
	|	ТаблицаДанных.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Данные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИтоговая.Период КАК Период,
	|	ТаблицаИтоговая.Магазин КАК Магазин,
	|	ТаблицаИтоговая.Номенклатура КАК Номенклатура,
	|	ТаблицаИтоговая.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ТаблицаИтоговая.ТипПереоценки) КАК ТипПереоценки,
	|	СУММА(ТаблицаИтоговая.КоличествоНаСкладах) КАК КоличествоНаСкладах,
	|	СУММА(ТаблицаИтоговая.КоличествоПриход) КАК КоличествоПриход,
	|	СУММА(ТаблицаИтоговая.КоличествоРасход) КАК КоличествоРасход,
	|	СУММА(ТаблицаИтоговая.КоличествоПродажи) КАК КоличествоПродажи,
	|	СУММА(ТаблицаИтоговая.СуммаПродажи) КАК СуммаПродажи,
	|	МАКСИМУМ(ТаблицаИтоговая.Новые) КАК Новые,
	|	МАКСИМУМ(ТаблицаИтоговая.Старые) КАК Старые
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаНовая.Период КАК Период,
	|		ТаблицаНовая.Магазин КАК Магазин,
	|		ТаблицаНовая.Номенклатура КАК Номенклатура,
	|		ТаблицаНовая.Характеристика КАК Характеристика,
	|		ТаблицаНовая.ТипПереоценки КАК ТипПереоценки,
	|		ТаблицаНовая.КоличествоНаСкладах КАК КоличествоНаСкладах,
	|		ТаблицаНовая.КоличествоПриход КАК КоличествоПриход,
	|		ТаблицаНовая.КоличествоРасход КАК КоличествоРасход,
	|		ТаблицаНовая.КоличествоПродажи КАК КоличествоПродажи,
	|		ТаблицаНовая.СуммаПродажи КАК СуммаПродажи,
	|		ИСТИНА КАК Новые,
	|		ЛОЖЬ КАК Старые
	|	ИЗ
	|		Состояния КАК ТаблицаНовая
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаСтарая.ПериодДень,
	|		ТаблицаСтарая.Магазин,
	|		ТаблицаСтарая.Номенклатура,
	|		ТаблицаСтарая.Характеристика,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыПереоценок.ПустаяСсылка),
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		РегистрСведений.НоменклатурноеСостояние КАК ТаблицаСтарая
	|			ЛЕВОЕ СОЕДИНЕНИЕ Состояния КАК ТаблицаФильтр
	|			ПО ТаблицаСтарая.ПериодДень = ТаблицаФильтр.Период
	|				И ТаблицаСтарая.Номенклатура = ТаблицаФильтр.Номенклатура
	|				И ТаблицаСтарая.Характеристика = ТаблицаФильтр.Характеристика
	|				И ТаблицаСтарая.Магазин = ТаблицаФильтр.Магазин
	|	ГДЕ
	|		ТаблицаСтарая.ПериодДень = &Период
	|		И ТаблицаСтарая.Магазин = &Магазин
	|		И ВЫБОР
	|				КОГДА ТаблицаФильтр.Номенклатура ЕСТЬ NULL
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|							КОГДА ТаблицаСтарая.КоличествоНаСкладах = ЕСТЬNULL(ТаблицаФильтр.КоличествоНаСкладах, 0)
	|									И ТаблицаСтарая.КоличествоПриход = ЕСТЬNULL(ТаблицаФильтр.КоличествоПриход, 0)
	|									И ТаблицаСтарая.КоличествоРасход = ЕСТЬNULL(ТаблицаФильтр.КоличествоРасход, 0)
	|									И ТаблицаСтарая.КоличествоПродажи = ЕСТЬNULL(ТаблицаФильтр.КоличествоПродажи, 0)
	|									И ТаблицаСтарая.СуммаПродажи = ЕСТЬNULL(ТаблицаФильтр.СуммаПродажи, 0)
	|									И ТаблицаСтарая.ТипПереоценки = ЕСТЬNULL(ТаблицаФильтр.ТипПереоценки, ЗНАЧЕНИЕ(Перечисление.ТипыПереоценок.ПустаяСсылка))
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|						И ВЫБОР
	|							КОГДА &Принудительно = ИСТИНА
	|								ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|			КОНЕЦ) КАК ТаблицаИтоговая
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИтоговая.Период,
	|	ТаблицаИтоговая.Магазин,
	|	ТаблицаИтоговая.Номенклатура,
	|	ТаблицаИтоговая.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Состояния
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУдалить.Период КАК ПериодДень,
	|	ТаблицаУдалить.Магазин КАК Магазин,
	|	ТаблицаУдалить.Номенклатура КАК Номенклатура,
	|	ТаблицаУдалить.Характеристика КАК Характеристика,
	|	ТаблицаУдалить.ТипПереоценки КАК ТипПереоценки,
	|	ТаблицаУдалить.КоличествоНаСкладах КАК КоличествоНаСкладах,
	|	ТаблицаУдалить.КоличествоПриход КАК КоличествоПриход,
	|	ТаблицаУдалить.КоличествоРасход КАК КоличествоРасход,
	|	ТаблицаУдалить.КоличествоПродажи КАК КоличествоПродажи,
	|	ТаблицаУдалить.СуммаПродажи КАК СуммаПродажи,
	|	ТаблицаУдалить.Новые КАК Новые,
	|	ТаблицаУдалить.Старые КАК Старые
	|ИЗ
	|	Источник КАК ТаблицаУдалить
	|ГДЕ
	|	НЕ ТаблицаУдалить.Новые = ТаблицаУдалить.Старые
	|	И ТаблицаУдалить.Старые
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДобавить.Период КАК ПериодДень,
	|	ТаблицаДобавить.Магазин КАК Магазин,
	|	ТаблицаДобавить.Номенклатура КАК Номенклатура,
	|	ТаблицаДобавить.Характеристика КАК Характеристика,
	|	ТаблицаДобавить.ТипПереоценки КАК ТипПереоценки,
	|	ТаблицаДобавить.КоличествоНаСкладах КАК КоличествоНаСкладах,
	|	ТаблицаДобавить.КоличествоПриход КАК КоличествоПриход,
	|	ТаблицаДобавить.КоличествоРасход КАК КоличествоРасход,
	|	ТаблицаДобавить.КоличествоПродажи КАК КоличествоПродажи,
	|	ТаблицаДобавить.СуммаПродажи КАК СуммаПродажи,
	|	ТаблицаДобавить.Новые КАК Новые,
	|	ТаблицаДобавить.Старые КАК Старые
	|ИЗ
	|	Источник КАК ТаблицаДобавить
	|ГДЕ
	|	НЕ ТаблицаДобавить.Новые = ТаблицаДобавить.Старые
	|	И ТаблицаДобавить.Новые
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	;
	Запрос.УстановитьПараметр("Период", НачалоДня(Период));
	Запрос.УстановитьПараметр("Принудительно", Принудительно);

	НаборЗаписей = РегистрыСведений.НоменклатурноеСостояние.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;

	Пока МагазиныВыборка.Следующий() Цикл

		Запрос.УстановитьПараметр("Магазин", МагазиныВыборка.Магазин);
		Запрос.УстановитьПараметр("ВидЦены", МагазиныВыборка.ВидЦены);
		Результаты = Запрос.ВыполнитьПакет();

		НаборЗаписей.ОбменДанными.Получатели.Очистить();
		ОбменДаннымиСервер.УстановитьПолучателейМагазина(НаборЗаписей.ОбменДанными.Получатели, МагазиныВыборка.Магазин);

		ТоварыВыборка = Результаты[7].Выбрать();	//	УДАЛЕНИЕ

		Пока ТоварыВыборка.Следующий() Цикл

			НаборЗаписей.Очистить();
			НаборЗаписей.Отбор.ПериодДень.Установить(ТоварыВыборка.ПериодДень);
			НаборЗаписей.Отбор.Номенклатура.Установить(ТоварыВыборка.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(ТоварыВыборка.Характеристика);
			НаборЗаписей.Отбор.Магазин.Установить(ТоварыВыборка.Магазин);

			Попытка

				НаборЗаписей.Записать();

			Исключение

				ТекстОшибки = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("ТехническаяПоддержка.НоменклатурноеСостояние", УровеньЖурналаРегистрации.Ошибка
				, НаборЗаписей.Метаданные(),, "ОЧИСТКА: " + ТекстОшибки, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

			КонецПопытки;

		КонецЦикла;

		ТоварыВыборка = Результаты[8].Выбрать();	//	ДОБАВЛЕНИЕ

		Пока ТоварыВыборка.Следующий() Цикл

			НаборЗаписей.Очистить();
			НаборЗаписей.Отбор.ПериодДень.Установить(ТоварыВыборка.ПериодДень);
			НаборЗаписей.Отбор.Номенклатура.Установить(ТоварыВыборка.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(ТоварыВыборка.Характеристика);
			НаборЗаписей.Отбор.Магазин.Установить(ТоварыВыборка.Магазин);

			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, ТоварыВыборка);
			ЗаписьНабора.ДатаИзменения = ТекущаяДатаСеанса();

			Попытка

				НаборЗаписей.Записать();

			Исключение

				ТекстОшибки = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("ТехническаяПоддержка.НоменклатурноеСостояние", УровеньЖурналаРегистрации.Ошибка
				, НаборЗаписей.Метаданные(),, "ЗАПОЛНЕНИЕ: " + ТекстОшибки, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

			КонецПопытки;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

#Область ЗагрузкаДанныхТоваровИнтернетМагазина

//	LNK 21.03.2018 08:58:27
Процедура Процесс_ЗагрузкаДанныхТоваровИнтернетМагазина(ИмяФайлаXMLИсточник, ИмяФайлаXMLПриемник)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

//	КопироватьФайл(ИмяФайлаXMLИсточник, ИмяФайлаXMLПриемник);
	ДанныеАдреса = СервисыСервер.РазложитьURLнаИмяСервераИмяФайла(ИмяФайлаXMLИсточник);
	HTTPСоединение = Новый HTTPСоединение(ДанныеАдреса.Сервер,,,,,, Новый ЗащищенноеСоединениеOpenSSL); 
	HTTPСоединение.Получить(ДанныеАдреса.Файл, ИмяФайлаXMLПриемник);

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаXMLПриемник);

	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();

	Попытка

		УдалитьФайлы(ИмяФайлаXMLПриемник);

	Исключение	КонецПопытки;

	СписокКодов = Новый Массив;
	СоответствиеКодов = Новый Соответствие;

	Счётчик = 0;

	Для Каждого Item из ОбъектXDTO.Items.Item Цикл

		Если Лев(Item.id, 1) = "s" Тогда

		//	Это какие-то "сводные" позиции в интернет-магазине... они нам не нужны.
			Продолжить;

		КонецЕсли;

		Попытка

			СписокКодов.Добавить(ПривестиIDN(Item.id));

		Исключение

			ТекстОшибки = ОписаниеОшибки();

		КонецПопытки;

		Счётчик = Счётчик + 1;

	КонецЦикла;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.IDN КАК IDN,
	|	ТаблицаСправочник.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.IDN В(&СписокКодов)
	|	И НЕ ТаблицаСправочник.ЭтоГруппа
	|	И НЕ ТаблицаСправочник.IDN = """""
	);
	Запрос.УстановитьПараметр("СписокКодов", СписокКодов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		СоответствиеКодов.Вставить(Выборка.IDN, Выборка.Номенклатура);

	КонецЦикла;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	Если НЕ СоответствиеКодов.Количество() = 0 Тогда

		Счётчик = 0;

	    Для Каждого Item из ОбъектXDTO.Items.Item Цикл 

			Если Лев(Item.id, 1) = "s" Тогда

			//	Это какие-то "сводные" позиции в интернет-магазине... они нам не нужны.
				Продолжить;

			КонецЕсли;

			Попытка

				ЗаписьИзменена = Ложь;
				МенеджерЗаписи = РегистрыСведений.НоменклатурнаяИнформация.СоздатьМенеджерЗаписи();

				Номенклатура = СоответствиеКодов.Получить(ПривестиIDN(Item.id));
				МенеджерЗаписи.Номенклатура = Номенклатура;

				Если МенеджерЗаписи.Номенклатура.Пустая() Тогда

					ВнешниеИсточникиСобытия.УстановитьОбъектДляОбработки(ПривестиIDN(Item.id));

				Иначе

					МенеджерЗаписи.Прочитать();

					Если МенеджерЗаписи.Номенклатура.Пустая() Тогда

						ЗаписьИзменена = Истина;
						МенеджерЗаписи.Номенклатура = Номенклатура;

					КонецЕсли;

					ПрисвоитьЗначение(МенеджерЗаписи.URL,                         СвойствоXDTO(Item, "url"), ЗаписьИзменена);
					ПрисвоитьЗначение(МенеджерЗаписи.Описание,                    СвойствоXDTO(Item, "description"), ЗаписьИзменена);
					ПрисвоитьЗначение(МенеджерЗаписи.Наименование,                СвойствоXDTO(Item, "name"), ЗаписьИзменена);
					ПрисвоитьЗначение(МенеджерЗаписи.АдресКартинки,               СвойствоXDTO(Item, "image"), ЗаписьИзменена);
					ПрисвоитьЗначение(МенеджерЗаписи.АдресКартинкиДополнительный, СвойствоXDTO(Item, "additionalimage"), ЗаписьИзменена);
					ПрисвоитьЗначение(МенеджерЗаписи.АдресКартинкиПредпросмотр,   СвойствоXDTO(Item, "preview"), ЗаписьИзменена);

					Если ЗаписьИзменена Тогда

						МенеджерЗаписи.Записать();

					КонецЕсли;

				КонецЕсли;

			Исключение

				ТекстОшибки = ОписаниеОшибки();

			КонецПопытки;

			Счётчик = Счётчик + 1;

	    КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ПрисвоитьЗначение(ЗначениеТекущее, ЗначениеНовое, ЗаписьИзменена)

	Если НЕ ЗначениеТекущее = ЗначениеНовое Тогда

		ЗаписьИзменена  = Истина;
		ЗначениеТекущее = ЗначениеНовое;

	КонецЕсли;

КонецПроцедуры

Функция СвойствоXDTO(ОбъектXDTO, Имя, ЗначениеПоУмолчанию = "")

	Если ОбъектXDTO.Свойства().Получить(Имя) = Неопределено
	ИЛИ  ТипЗнч(ОбъектXDTO[Имя]) = Тип("ОбъектXDTO") Тогда

			Значение = ЗначениеПоУмолчанию;

	Иначе	Значение = СокрЛП(ОбъектXDTO[Имя]);

	КонецЕсли;

	Возврат Значение;

КонецФункции // СвойствоXDTO()

Функция ПривестиIDN(ID)

	IDN = СокрЛП(ID);
	
	//Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(IDN) Тогда

	//	IDN = СтроковыеФункцииКлиентСервер.ПолучитьЧислоИзСтроки(IDN, Истина);

	//КонецЕсли;

	Возврат IDN;

КонецФункции // ПривестиIDN()
	
#КонецОбласти

#КонецОбласти

#Область РегламентПоддержкиФункционалаРозницы

//	LNK 20.02.2017 08:25:17
Процедура РегламентВыполненияАлгоримов(ПараметрАлгоритм) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаАлгоритмов.Алгоритм КАК Алгоритм,
	|	ТаблицаАлгоритмов.Алгоритм.ТекстПрограммы КАК ТекстПрограммы,
	|	ТаблицаАлгоритмов.Алгоритм.Представление КАК АлгоритмПредставление
	|ИЗ
	|	Справочник.СтруктураУзлов.Алгоритмы КАК ТаблицаАлгоритмов
	|ГДЕ
	|	ТаблицаАлгоритмов.Ссылка = &ТекущийУзел
	|	И ВЫБОР
	|			КОГДА ТаблицаАлгоритмов.ВыполнятьАлгоритм = ЗНАЧЕНИЕ(Перечисление.ВыполнятьАлгоритм.ПустаяСсылка)
	|				ТОГДА ТаблицаАлгоритмов.Алгоритм.ВыполнятьАлгоритм = ЗНАЧЕНИЕ(Перечисление.ВыполнятьАлгоритм.ПоРасписанию)
	|			ИНАЧЕ ТаблицаАлгоритмов.ВыполнятьАлгоритм = ЗНАЧЕНИЕ(Перечисление.ВыполнятьАлгоритм.ПоРасписанию)
	|		КОНЕЦ
	|	И ТаблицаАлгоритмов.Алгоритм.Активность
	|	И &ПараметрАлгоритм = ЗНАЧЕНИЕ(Справочник.Алгоритмы.ПустаяСсылка)
	|	И НЕ ТаблицаАлгоритмов.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Алгоритмы.Ссылка,
	|	Алгоритмы.ТекстПрограммы,
	|	Алгоритмы.Представление
	|ИЗ
	|	Справочник.Алгоритмы КАК Алгоритмы
	|ГДЕ
	|	Алгоритмы.Ссылка = &ПараметрАлгоритм
	|	И Алгоритмы.Активность
	|	И НЕ Алгоритмы.ПометкаУдаления"
	);
	Запрос.УстановитьПараметр("ПараметрАлгоритм", ?(ТипЗнч(ПараметрАлгоритм) = Тип("СправочникСсылка.Алгоритмы"), ПараметрАлгоритм, Справочники.Алгоритмы.ПустаяСсылка()));
	Запрос.УстановитьПараметр("ТекущийУзел"     , ОбменДаннымиПовтИсп.ПолучитьТекущийЭлементСтруктурыУзлов());

	СписокВыполненных = Новый Соответствие;	//	во избежание повторов - в запросе взять различные не можем, т.к. имеем неограниченную строку.
	ВыборкаЗаданий = Запрос.Выполнить().Выбрать();

	Пока ВыборкаЗаданий.Следующий() Цикл

		Если СписокВыполненных.Получить(ВыборкаЗаданий.Алгоритм) = Неопределено Тогда

			Выполнить(ВыборкаЗаданий.ТекстПрограммы);

			СписокВыполненных.Вставить(ВыборкаЗаданий.Алгоритм, Истина);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//	LNK 11.07.2019 11:03:32
Процедура ВыполнитьАлгоритмПоНазначению(ВыполнятьАлгоритм, Получатель)	Экспорт

	Если НЕ (ВыполнятьАлгоритм = Перечисления.ВыполнятьАлгоритм.ПередПолучениемДанных
		ИЛИ  ВыполнятьАлгоритм = Перечисления.ВыполнятьАлгоритм.ПослеПолученияДанных
		ИЛИ  ВыполнятьАлгоритм = Перечисления.ВыполнятьАлгоритм.ПередОтправкойДанных
		ИЛИ  ВыполнятьАлгоритм = Перечисления.ВыполнятьАлгоритм.ПослеОтправкиДанных)	Тогда

		Возврат;

	КонецЕсли;

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Попытка

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаАлгоритмов.Код КАК Код,
		|	ТаблицаАлгоритмов.Ссылка КАК Алгоритм,
		|	ТаблицаАлгоритмов.ТекстПрограммы КАК ТекстПрограммы
		|ИЗ
		|	Справочник.Алгоритмы КАК ТаблицаАлгоритмов
		|ГДЕ
		|	НЕ ТаблицаАлгоритмов.ПометкаУдаления
		|	И ТаблицаАлгоритмов.ВыполнятьАлгоритм = &ВыполнятьАлгоритм
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код"
		);
		Запрос.УстановитьПараметр("ВыполнятьАлгоритм", ВыполнятьАлгоритм);
		
		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда

			СписокВыполненных = Новый Соответствие;	//	во избежание повторов - в запросе взять различные не можем, т.к. имеем неограниченную строку.

			ВыборкаЗаданий = Результат.Выбрать();
			
			Пока ВыборкаЗаданий.Следующий() Цикл

				Если СписокВыполненных.Получить(ВыборкаЗаданий.Алгоритм) = Неопределено Тогда

					Выполнить(ВыборкаЗаданий.ТекстПрограммы);

					СписокВыполненных.Вставить(ВыборкаЗаданий.Алгоритм, Истина);

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();

	КонецПопытки;

КонецПроцедуры

#Область ПроцедурыПримененияЦенПоЭксплуатируемымМагазинам

//	LNK 06.10.2016 10:20:19
Процедура РегламентПримененияЦенВМагазинах(Параметр) Экспорт

	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСправочник.Ссылка КАК Магазин,
		|	ТаблицаСправочник.НомерМагазина КАК НомерМагазина,
		|	ТаблицаСправочник.ПравилоЦенообразования.ВидЦен КАК ВидЦены
		|ИЗ
		|	Справочник.Магазины КАК ТаблицаСправочник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних КАК УчетнаяПолитика
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &УказаныНомера = ИСТИНА
		|				ТОГДА ТаблицаСправочник.НомерМагазина В (&СписокНомеров)
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И (НЕ ТаблицаСправочник.Блокирован
		|				И НЕ ТаблицаСправочник.ПометкаУдаления
		|				И НЕ ТаблицаСправочник.СкладУправляющейСистемы
		|				И НЕ ТаблицаСправочник.НомерМагазина = 0
		|				И ТаблицаСправочник.ВведенВЭксплуатацию = ИСТИНА
		|			ИЛИ ТаблицаСправочник.Ссылка = УчетнаяПолитика.ИнтернетМагазин)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерМагазина"
		);
		Запрос.УстановитьПараметр("СписокНомеров", ОбщегоНазначенияКлиентСервер.lx_FillValueList(, Параметр,, " ,;",,, Новый ОписаниеТипов("Число")));
		Запрос.УстановитьПараметр("УказаныНомера", НЕ Запрос.Параметры.СписокНомеров.Количество() = 0);

		ДанныеМагазинов = Запрос.Выполнить().Выбрать();

		Пока ДанныеМагазинов.Следующий() Цикл

			ВыполнитьПрименениеЦенНоменклатуры(ДанныеМагазинов, ТекущаяДатаСеанса());

		КонецЦикла;

		ДанныеМагазинов.Сбросить();
	//	Опорные цены устанавливаются только в контексте текущей даты!
		ВыполнитьУстановкуОпорныхЦенНоменклатуры(ДанныеМагазинов);

		ДанныеМагазинов.Сбросить();
	//	Предыдущие цены устанавливаются только в контексте текущей даты!
		ВыполнитьУстановкуПредыдущихЦенНоменклатуры(ДанныеМагазинов);

		УстановитьПривилегированныйРежим(Ложь);

	КонецЕсли;

КонецПроцедуры

//	LNK 13.02.2017 14:02:33
Процедура ВыполнитьПрименениеЦенНоменклатуры(ДанныеМагазина, ДатаПрименения)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаНовые.Номенклатура КАК Номенклатура,
	|	ТаблицаНовые.Характеристика КАК Характеристика,
	|	ТаблицаНовые.Цена КАК Цена,
	|	ТаблицаНовые.Упаковка КАК Упаковка,
	|	ТаблицаНовые.Акция КАК Акция
	|ПОМЕСТИТЬ НовыеЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&ДатаПрименения, ДЕНЬ), ВидЦены = &ВидЦены) КАК ТаблицаНовые
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНовые.Номенклатура КАК Номенклатура,
	|	ТаблицаНовые.Характеристика КАК Характеристика,
	|	ТаблицаНовые.Цена КАК Цена,
	|	ТаблицаНовые.Упаковка КАК Упаковка,
	|	ТаблицаНовые.Акция КАК Акция,
	|	ТаблицаСуществующие.Цена КАК ЦенаТекущая,
	|	ТаблицаСуществующие.Акция КАК АкцияТекущая,
	|	ЕСТЬNULL(ТаблицаСуществующие.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК Период,
	|	ЕСТЬNULL(ТаблицаСуществующие.Регистратор, ЗНАЧЕНИЕ(Документ.ПрименениеЦенНоменклатуры.ПустаяСсылка)) КАК Регистратор
	|ИЗ
	|	НовыеЦены КАК ТаблицаНовые
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&ДатаПрименения, ДЕНЬ), ОбъектЦенообразования = &Магазин) КАК ТаблицаСуществующие
	|		ПО ТаблицаНовые.Номенклатура = ТаблицаСуществующие.Номенклатура
	|			И ТаблицаНовые.Характеристика = ТаблицаСуществующие.Характеристика
	|			И ТаблицаНовые.Упаковка = ТаблицаСуществующие.Упаковка
	|ГДЕ
	|	(ТаблицаСуществующие.Цена ЕСТЬ NULL
	|			ИЛИ НЕ ТаблицаНовые.Цена = ЕСТЬNULL(ТаблицаСуществующие.Цена, 0)
	|			ИЛИ НЕ ТаблицаНовые.Акция = ЕСТЬNULL(ТаблицаСуществующие.Акция, ЛОЖЬ))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НовыеЦены"
	);
	Запрос.УстановитьПараметр("Магазин", ДанныеМагазина.Магазин);
	Запрос.УстановитьПараметр("ВидЦены", ДанныеМагазина.ВидЦены);
	Запрос.УстановитьПараметр("ДатаПрименения", ДатаПрименения);

	ЦеныВыборка = Запрос.Выполнить().Выбрать();

	НаборЗаписей = РегистрыСведений.ДействующиеЦеныНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьУстановкуПредыдущихЦен"    , Истина);
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	ОбменДаннымиСервер.УстановитьПолучателейМагазина(НаборЗаписей.ОбменДанными.Получатели, ДанныеМагазина.Магазин, Истина);

	Счётчик = 0;
	Период  = НачалоДня(ДатаПрименения);

	Пока ЦеныВыборка.Следующий() Цикл

		Счётчик = Счётчик + 1;

		Если НачалоДня(ЦеныВыборка.Период) = НачалоДня(ДатаПрименения) Тогда

		//	Цена на эту дату уже была установлена ранее! Не разбираемся, как так получилось.
		//	Просто в существующем наборе записей находим и удаляем "текущую" номенклатуру...
		//	Нужная запись в набор будет добавлена ниже. При этом сохраняем текущий состав набора записей.

			Регистратор = ЦеныВыборка.Регистратор;

			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			НаборЗаписей.Прочитать();

			Для каждого ЗаписьНабора Из НаборЗаписей Цикл

				Если ЗаписьНабора.Номенклатура = ЦеныВыборка.Номенклатура И ЗаписьНабора.Характеристика = ЦеныВыборка.Характеристика Тогда

					НаборЗаписей.Удалить(ЗаписьНабора);
					Прервать;

				КонецЕсли;

			КонецЦикла;

		Иначе

			Регистратор = Документы.ПрименениеЦенНоменклатуры.ПолучитьСсылку();

			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			НаборЗаписей.Очистить();

		КонецЕсли;

		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, ЦеныВыборка);

		ЗаписьНабора.Период      = Период;
		ЗаписьНабора.Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;

		ЗаписьНабора.ОбъектЦенообразования = ДанныеМагазина.Магазин;
		ЗаписьНабора.ВремяИзменения = ТекущаяДата();

		Попытка

			НаборЗаписей.Записать();

		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ЖурналСобытий.Регистрация("ПрименениеЦен.ОшибкаЗаписи", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Справочники.Номенклатура
				, ЦеныВыборка.Номенклатура
				,
				, "(" + ДанныеМагазина.НомерМагазина + ") " + ТекстОшибки, СокрЛП(ЦеныВыборка.Номенклатура)
				, Истина
				);

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

//	LNK 09.01.2019 14:47:23
Процедура ВыполнитьУстановкуОпорныхЦенНоменклатуры(ВедущаяВыборка)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаРегистра.Период) КАК Период,
	|	ТаблицаРегистра.ВидЦены КАК ВидЦены,
	|	ТаблицаРегистра.Номенклатура КАК Номенклатура,
	|	ТаблицаРегистра.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.ВидЦены = &ВидЦены
	|	И ТаблицаРегистра.ТипПереоценки = ЗНАЧЕНИЕ(Перечисление.ТипыПереоценок.ОпорнаяЦена)
	|	И ТаблицаРегистра.Период <= КОНЕЦПЕРИОДА(&ДатаПрименения, ДЕНЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРегистра.Номенклатура,
	|	ТаблицаРегистра.Характеристика,
	|	ТаблицаРегистра.ВидЦены
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦены,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Магазин КАК Магазин,
	|	ТаблицаРегистра.Номенклатура КАК Номенклатура,
	|	ТаблицаРегистра.Характеристика КАК Характеристика,
	|	ТаблицаРегистра.Цена КАК Цена,
	|	ТаблицаРегистра.Упаковка КАК Упаковка,
	|	ТаблицаРегистра.ТипПереоценки КАК ТипПереоценки,
	|	ТаблицаРегистра.Период КАК Период
	|ПОМЕСТИТЬ НовыеЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК ТаблицаРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
	|		ПО ТаблицаРегистра.Период = Фильтр.Период
	|			И ТаблицаРегистра.ВидЦены = Фильтр.ВидЦены
	|			И ТаблицаРегистра.Номенклатура = Фильтр.Номенклатура
	|			И ТаблицаРегистра.Характеристика = Фильтр.Характеристика
	|ГДЕ
	|	ТаблицаРегистра.ТипПереоценки = ЗНАЧЕНИЕ(Перечисление.ТипыПереоценок.ОпорнаяЦена)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Упаковка,
	|	Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНовые.Магазин КАК Магазин,
	|	ТаблицаНовые.Номенклатура КАК Номенклатура,
	|	ТаблицаНовые.Характеристика КАК Характеристика,
	|	ТаблицаНовые.Цена КАК Цена,
	|	ТаблицаНовые.Упаковка КАК Упаковка
	|ИЗ
	|	НовыеЦены КАК ТаблицаНовые
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОпорныеЦеныНоменклатуры.СрезПоследних(, ) КАК ТаблицаСуществующие
	|		ПО ТаблицаНовые.Магазин = ТаблицаСуществующие.Магазин
	|			И ТаблицаНовые.Номенклатура = ТаблицаСуществующие.Номенклатура
	|			И ТаблицаНовые.Характеристика = ТаблицаСуществующие.Характеристика
	|			И ТаблицаНовые.Упаковка = ТаблицаСуществующие.Упаковка
	|ГДЕ
	|	(ТаблицаСуществующие.Цена ЕСТЬ NULL
	|			ИЛИ НЕ ЕСТЬNULL(ТаблицаСуществующие.Цена, 0) = ТаблицаНовые.Цена)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Фильтр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НовыеЦены"
	);
	Запрос.УстановитьПараметр("ДатаПрименения", ТекущаяДата());

	Пока ВедущаяВыборка.Следующий() Цикл

		НаборЗаписей = РегистрыСведений.ОпорныеЦеныНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		ОбменДаннымиСервер.УстановитьПолучателейМагазина(НаборЗаписей.ОбменДанными.Получатели, ВедущаяВыборка.Магазин, Истина);

		Запрос.УстановитьПараметр("Магазин", ВедущаяВыборка.Магазин);
		Запрос.УстановитьПараметр("ВидЦены", ВедущаяВыборка.ВидЦены);
		
		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда

			ТоварыВыборка = Результат.Выбрать();
			
			Пока ТоварыВыборка.Следующий() Цикл

				НаборЗаписей.Очистить();
				
				ТекДата = ТекущаяДата();

				НаборЗаписей.Отбор.Период.Установить(ТекДата);
				НаборЗаписей.Отбор.Магазин.Установить(ТоварыВыборка.Магазин);
				НаборЗаписей.Отбор.Номенклатура.Установить(ТоварыВыборка.Номенклатура);
				НаборЗаписей.Отбор.Характеристика.Установить(ТоварыВыборка.Характеристика);

				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьНабора, ТоварыВыборка);
				ЗаписьНабора.ВремяИзменения = ТекущаяДата();
				ЗаписьНабора.Период = ТекДата;

				НаборЗаписей.Записать();

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//	LNK 27.02.2018 12:03:01
Процедура ВыполнитьУстановкуПредыдущихЦенНоменклатуры(ВедущаяВыборка)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДействующиеЦены.ОбъектЦенообразования КАК ОбъектЦенообразования,
	|	ДействующиеЦены.Номенклатура КАК Номенклатура,
	|	ДействующиеЦены.Характеристика КАК Характеристика,
	|	ДействующиеЦены.Цена КАК Цена,
	|	ВЫРАЗИТЬ(ДействующиеЦены.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
	|	ДействующиеЦены.Акция КАК Акция
	|ПОМЕСТИТЬ ТаблицаНабора
	|ИЗ
	|	РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(, ОбъектЦенообразования = &Магазин) КАК ДействующиеЦены
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ДействующиеЦены.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектЦенообразования,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаПредыдущие.Период) КАК Период,
	|	ТаблицаНабора.ОбъектЦенообразования КАК ОбъектЦенообразования,
	|	ТаблицаНабора.Номенклатура КАК Номенклатура,
	|	ТаблицаНабора.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	ТаблицаНабора КАК ТаблицаНабора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДействующиеЦеныНоменклатуры КАК ТаблицаПредыдущие
	|		ПО ТаблицаНабора.ОбъектЦенообразования = ТаблицаПредыдущие.ОбъектЦенообразования
	|			И ТаблицаНабора.Номенклатура = ТаблицаПредыдущие.Номенклатура
	|			И ТаблицаНабора.Характеристика = ТаблицаПредыдущие.Характеристика
	|			И (ТаблицаНабора.Цена / ВЫБОР
	|					КОГДА ТаблицаНабора.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|						ТОГДА 1
	|					ИНАЧЕ ТаблицаНабора.Упаковка.Коэффициент
	|				КОНЕЦ <> ТаблицаПредыдущие.Цена / ВЫБОР
	|					КОГДА ТаблицаПредыдущие.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|						ТОГДА 1
	|					ИНАЧЕ ТаблицаПредыдущие.Упаковка.Коэффициент
	|				КОНЕЦ
	|				ИЛИ НЕ ТаблицаНабора.Акция = ТаблицаПредыдущие.Акция)
	|ГДЕ
	|	ТаблицаПредыдущие.Период < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНабора.ОбъектЦенообразования,
	|	ТаблицаНабора.Номенклатура,
	|	ТаблицаНабора.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНабора.ОбъектЦенообразования КАК Магазин
	|ИЗ
	|	ТаблицаНабора КАК ТаблицаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ) КАК Период,
	|	ТаблицаПредыдущие.ОбъектЦенообразования КАК ОбъектЦенообразования,
	|	ТаблицаПредыдущие.Номенклатура КАК Номенклатура,
	|	ТаблицаПредыдущие.Характеристика КАК Характеристика,
	|	ТаблицаПредыдущие.Цена КАК Цена,
	|	ТаблицаПредыдущие.Упаковка КАК Упаковка,
	|	ТаблицаПредыдущие.Акция КАК Акция
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДействующиеЦеныНоменклатуры КАК ТаблицаПредыдущие
	|		ПО Фильтр.Период = ТаблицаПредыдущие.Период
	|			И Фильтр.ОбъектЦенообразования = ТаблицаПредыдущие.ОбъектЦенообразования
	|			И Фильтр.Номенклатура = ТаблицаПредыдущие.Номенклатура
	|			И Фильтр.Характеристика = ТаблицаПредыдущие.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Фильтр"
	);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());

	Пока ВедущаяВыборка.Следующий() Цикл

		НаборЗаписей = РегистрыСведений.ПредыдущиеЦеныНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		ОбменДаннымиСервер.УстановитьПолучателейМагазина(НаборЗаписей.ОбменДанными.Получатели, ВедущаяВыборка.Магазин, Истина);

		Запрос.УстановитьПараметр("Магазин", ВедущаяВыборка.Магазин);
		
		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда

			ТоварыВыборка = Результат.Выбрать();
			
			Пока ТоварыВыборка.Следующий() Цикл

				НаборЗаписей.Очистить();

				НаборЗаписей.Отбор.ОбъектЦенообразования.Установить(ТоварыВыборка.ОбъектЦенообразования);
				НаборЗаписей.Отбор.Номенклатура.Установить(ТоварыВыборка.Номенклатура);
				НаборЗаписей.Отбор.Характеристика.Установить(ТоварыВыборка.Характеристика);

				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьНабора, ТоварыВыборка);
				ЗаписьНабора.ВремяИзменения = ТекущаяДата();

				НаборЗаписей.Записать();

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры
	
#КонецОбласти

#КонецОбласти

Процедура УстановитьМонопольныйРежимПереопределенный(Режим)	Экспорт

	Если Ложь Тогда

		УстановитьМонопольныйРежим(Режим);

	КонецЕсли;

КонецПроцедуры

//	LNK 30.11.2016 09:07:35
Функция ПолучитьАдресаСетевыхИнтерфейсов()	Экспорт

	SWbemLocator  = Новый COMОбъект("WbemScripting.SWbemLocator");
	objWMIService = SWbemLocator.ConnectServer(".", "root\CIMV2");
	IPConfigSet   = objWMIService.ExecQuery("Select * from Win32_NetworkAdapterConfiguration where ipenabled = true");

	СписокАдресов = Новый Массив;

	Для Каждого СтрокаТаблицы in IPConfigSet Цикл

	    Для Каждого Адрес Из СтрокаТаблицы.IPAddress Цикл 

	        СписокАдресов.Добавить(Адрес);

	    КонецЦикла;

	КонецЦикла;

	Возврат СписокАдресов;

КонецФункции // ПолучитьАдресаСетевыхИнтерфейсов()

#Область РегламентнаяПоддержкаОбщегоНаправления

//	LNK 05.07.2017 08:56:23
Процедура ТехническаяПоддержка(ПараметрЗадания) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ТекстОшибки		= "";

	Если ПараметрЗадания = "ЗУП:ДогрузитьОтказанныеРанееСообщения" Тогда

		ОбменДаннымиЗУП.ДогрузитьОтказанныеРанееСообщения();

	ИначеЕсли ПараметрЗадания = "СтатистикаРегистрацииИзменений" Тогда

		РегламентСтатистикаРегистрацииИзменений();

	ИначеЕсли ПараметрЗадания = "ОчиститьВерсииОбъектов" Тогда

		РегламентОчисткиВерсийОбъектов();

	ИначеЕсли ПараметрЗадания = "НОВЫЙ_КАРТА_ВИРТУАЛЬНАЯ" Тогда	//	LNK 16.08.2021 06:38:13

		УчетнаяПолитика = ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику();
		ИнформационныеКартыСлужебный.ОбработчикЗаполненияПулаРезервныхВиртуальныхКарт(УчетнаяПолитика.РазмерПакетаВиртуальныхКартРезерва, ТекстОшибки, Ложь);

	ИначеЕсли ПараметрЗадания = "ПроверитьУчтеноNavisionДляОрдеров" Тогда	//	LNK 26.01.2023 06:18:00

		СкладскиеОперацииСервер.ПроверитьУчтеноNavisionДляОрдеров();

	Иначе

		ТекстОшибки = "ТП: Не предусмотрена обработка параметра [" + ПараметрЗадания + "]";

	КонецЕсли;

	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда

		ВызватьИсключение ТекстОшибки;

	КонецЕсли;

КонецПроцедуры

//	LNK 05.07.2017 12:06:27
Процедура РегламентСтатистикаРегистрацииИзменений()

	Для каждого СтруктураОбъекта Из ПолучитьСтруктуруТаблицРегистрации() Цикл

		Для каждого СтрокаСостава Из СтруктураОбъекта.Состав Цикл

			Если НЕ ЗначениеЗаполнено(СтрокаСостава.ОбъектМетаданных) Тогда

				Продолжить;

			КонецЕсли;

			ЗапросОбщий = Новый Запрос(СтрЗаменить(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ТаблицаИзменения.Узел) КАК Количество,
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаИзменения.НомерСообщения ЕСТЬ NULL 
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ) КАК КоличествоВыгружено
			|ИЗ
			|	РегистрСведений.АссортиментнаяМатрица.Изменения КАК ТаблицаИзменения
			|ГДЕ
			|	ТаблицаИзменения.Узел = &Узел"
			, "РегистрСведений.АссортиментнаяМатрица", СтрокаСостава.ПолноеИмя)
			);

			Если СтрокаСостава.НуженРазмерТаблицы Тогда

				Если СтрокаСостава.БазовыйТип = "Документы" Тогда
					
					ЗапросРазмера = Новый Запрос(ТекстЗапросаРегистрацияДокументы(СтрокаСостава));

				Иначе
					
					ЗапросРазмера = Новый Запрос(ТекстЗапросаРегистрацияРегистры(СтрокаСостава));
				
				КонецЕсли;

			Иначе

				ЗапросРазмера = Неопределено;

			КонецЕсли;

			Для каждого Узел Из СтруктураОбъекта.Узлы Цикл

				ЗапросОбщий.УстановитьПараметр("Узел", Узел);
				Выборка = ЗапросОбщий.Выполнить().Выбрать();
				Выборка.Следующий();

				Количество          = Выборка.Количество;
				КоличествоОбщее     = Выборка.Количество;
				КоличествоВыгружено = ?(ТипЗнч(Выборка.КоличествоВыгружено) = Тип("Число"), Выборка.КоличествоВыгружено, 0);

				Если НЕ Количество = 0 Тогда

					Если НЕ ЗапросРазмера = Неопределено Тогда

						ЗапросРазмера.УстановитьПараметр("Узел", Узел);
						Выборка = ЗапросРазмера.Выполнить().Выбрать();
						Выборка.Следующий();

						КоличествоОбщее     = КоличествоОбщее + ?(ТипЗнч(Выборка.КоличествоОбщее) = Тип("Число"), Выборка.КоличествоОбщее, 0);
						КоличествоВыгружено = КоличествоВыгружено + ?(ТипЗнч(Выборка.КоличествоВыгружено) = Тип("Число"), Выборка.КоличествоВыгружено, 0);

					КонецЕсли;

					МенеджерЗаписи = РегистрыСведений.СтатистикаРегистрацииИзменений.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Период = НачалоМинуты(ТекущаяДатаСеанса());
					МенеджерЗаписи.УзелПланаОбмена  = Узел;
					МенеджерЗаписи.ОбъектМетаданных = СтрокаСостава.ОбъектМетаданных;

					МенеджерЗаписи.Количество = Количество;
					МенеджерЗаписи.КоличествоОбщее = КоличествоОбщее;
					МенеджерЗаписи.КоличествоВыгружено = КоличествоВыгружено;

					МенеджерЗаписи.Записать();

				КонецЕсли;

			КонецЦикла;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

//	LNK 05.07.2017 11:07:53
Функция ПолучитьСтруктуруТаблицРегистрации()

	СтруктураТаблиц = Новый Массив;

	Для каждого ТипПланаОбмена Из Метаданные.РегистрыСведений.СтатистикаРегистрацииИзменений.Измерения.УзелПланаОбмена.Тип.Типы() Цикл

		МетаданныеПланаОбмена = Метаданные.НайтиПоТипу(ТипПланаОбмена);

		Запрос = Новый Запрос(СтрЗаменить(
		"ВЫБРАТЬ
		|	ТаблицаУзлы.Ссылка КАК Узел
		|ИЗ
		|	ПланОбмена.ПоМагазину КАК ТаблицаУзлы
		|ГДЕ
		|	НЕ ТаблицаУзлы.Ссылка = &ЭтотУзел"
		, "ПланОбмена.ПоМагазину КАК", "ПланОбмена." + МетаданныеПланаОбмена.Имя + " КАК")
		);
		Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена[МетаданныеПланаОбмена.Имя].ЭтотУзел());
		
		СтруктураОбъекта = Новый Структура(
			"Метаданные, Узлы, Состав"
			, МетаданныеПланаОбмена
			, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Узел")
			, Новый ТаблицаЗначений);

		СтруктураОбъекта.Состав.Колонки.Добавить("Метаданные");
		СтруктураОбъекта.Состав.Колонки.Добавить("ПолноеИмя" , Новый ОписаниеТипов("Строка"));
		СтруктураОбъекта.Состав.Колонки.Добавить("БазовыйТип", Новый ОписаниеТипов("Строка"));
		СтруктураОбъекта.Состав.Колонки.Добавить("ОбъектМетаданных"  , Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
		СтруктураОбъекта.Состав.Колонки.Добавить("НуженРазмерТаблицы", Новый ОписаниеТипов("Булево"));

		Для каждого ЭлементСостава Из МетаданныеПланаОбмена.Состав Цикл

			СтрокаСостава = СтруктураОбъекта.Состав.Добавить();
			СтрокаСостава.Метаданные = ЭлементСостава.Метаданные;
			СтрокаСостава.ПолноеИмя  = ЭлементСостава.Метаданные.ПолноеИмя();
			СтрокаСостава.БазовыйТип = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ЭлементСостава.Метаданные);
			СтрокаСостава.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ЭлементСостава.Метаданные);

			Если СтрокаСостава.БазовыйТип = "Документы" Тогда

				СтрокаСостава.НуженРазмерТаблицы = НЕ СтрокаСостава.Метаданные.ТабличныеЧасти.Количество() = 0;

			ИначеЕсли Лев(СтрокаСостава.БазовыйТип, 8) = "Регистры" Тогда

				Если СтрокаСостава.БазовыйТип = "РегистрыСведений" Тогда

				//		Если регистр "свободный", то обычно одна регистрация равна одной записи. В подчинении регистратору размер таблицы может быть любым.
						СтрокаСостава.НуженРазмерТаблицы = НЕ СтрокаСостава.Метаданные.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый;

				Иначе	СтрокаСостава.НуженРазмерТаблицы = Истина;	// Всегда в подчинении регистратора - размер набора записей может быть любым

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	//	=======================================================================================

		СтруктураТаблиц.Добавить(СтруктураОбъекта);

	КонецЦикла;

	Возврат СтруктураТаблиц;

КонецФункции // ПолучитьСтруктуруТаблицРегистрации()

//	LNK 06.07.2017 15:12:04
Функция ТекстЗапросаРегистрацияДокументы(СтрокаСостава)

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(Данные.КоличествоОбщее) КАК КоличествоОбщее,
	|	СУММА(Данные.КоличествоВыгружено) КАК КоличествоВыгружено
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(Товары.НомерСтроки) КАК КоличествоОбщее,
	|		СУММА(ВЫБОР
	|				КОГДА ТаблицаИзменения.НомерСообщения ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК КоличествоВыгружено
	|	ИЗ
	|		Документ.ЗаказПоставщику.Изменения КАК ТаблицаИзменения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК Товары
	|			ПО ТаблицаИзменения.Ссылка = Товары.Ссылка
	|	ГДЕ
	|		ТаблицаИзменения.Узел = &Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(ЭтапыОплат.НомерСтроки),
	|		СУММА(ВЫБОР
	|				КОГДА ТаблицаИзменения.НомерСообщения ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ)
	|	ИЗ
	|		Документ.ЗаказПоставщику.Изменения КАК ТаблицаИзменения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.ЭтапыОплат КАК ЭтапыОплат
	|			ПО ТаблицаИзменения.Ссылка = ЭтапыОплат.Ссылка
	|	ГДЕ
	|		ТаблицаИзменения.Узел = &Узел) КАК Данные"
	;

	ТекстТаблицы = 
	"ВЫБРАТЬ
	|		КОЛИЧЕСТВО(ТЧ_Товары.НомерСтроки) КАК КоличествоОбщее,
	|		СУММА(ВЫБОР
	|				КОГДА ТаблицаИзменения.НомерСообщения ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК КоличествоВыгружено
	|	ИЗ
	|		Документ.ЗаказПоставщику.Изменения КАК ТаблицаИзменения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ТЧ_Товары
	|			ПО ТаблицаИзменения.Ссылка = ТЧ_Товары.Ссылка
	|	ГДЕ
	|		ТаблицаИзменения.Узел = &Узел
	|";

	ТекстЗапроса = "";

	Для каждого ТабличнаяЧасть Из СтрокаСостава.Метаданные.ТабличныеЧасти Цикл

		ТекстЗапроса = ТекстЗапроса
		+ ?(ПустаяСтрока(ТекстЗапроса), "",
	"	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	")
		+ СтрЗаменить(СтрЗаменить(СтрЗаменить(ТекстТаблицы, "Документ.ЗаказПоставщику", СтрокаСостава.ПолноеИмя), "ТЧ_Товары", "ТЧ_" + ТабличнаяЧасть.Имя), ".Товары ", "." + ТабличнаяЧасть.Имя + " ");

	КонецЦикла;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(Данные.КоличествоОбщее) КАК КоличествоОбщее,
	|	СУММА(Данные.КоличествоВыгружено) КАК КоличествоВыгружено
	|ИЗ
	|	(" + ТекстЗапроса + ") КАК Данные";

	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаРегистрацияДокументы()

//	LNK 06.07.2017 17:14:30
Функция ТекстЗапросаРегистрацияРегистры(СтрокаСостава)

	ТекстЗапроса = СтрЗаменить(
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ТаблицаРегистра.НомерСтроки) КАК КоличествоОбщее,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаИзменения.НомерСообщения ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КоличествоВыгружено
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваНаличные.Изменения КАК ТаблицаИзменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваНаличные КАК ТаблицаРегистра
	|		ПО ТаблицаИзменения.Регистратор = ТаблицаРегистра.Регистратор
	|ГДЕ
	|	ТаблицаИзменения.Узел = &Узел"
	, "РегистрНакопления.ДенежныеСредстваНаличные", СтрокаСостава.ПолноеИмя)
	;

	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаРегистрацияРегистры()

//	LNK 08.02.2018 16:01:03
Процедура ПоддержкаКонфигурации() Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Платформа = ОбщегоНазначенияПовтИсп.ТипПлатформыСервера(Ложь);

	Если НЕ (Платформа = ТипПлатформы.Linux_x86_64 ИЛИ Платформа = ТипПлатформы.Linux_x86) И НЕ КонфигурацияИзменена() Тогда

		ЗаписьЖурналаРегистрации("Поддержка конфигурации", УровеньЖурналаРегистрации.Примечание
			,,, "1. Контроль типа платформы пройден. Вызов «Обработки.ПоддержкаКонфигурации.Создать()»");

		Обработки.ПоддержкаКонфигурации.Создать().ОбновлениеКонфигурации();

	КонецЕсли;

КонецПроцедуры

//	LNK 22.07.2020 06:39:00
Процедура РегламентОчисткиВерсийОбъектов(ДатаАктуальности = '00010101')

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаРегистра.Объект КАК Объект,
	|	ТаблицаРегистра.НомерВерсии КАК НомерВерсии,
	|	ТаблицаРегистра.ЭлементСтруктуры КАК ЭлементСтруктуры,
	|	ТаблицаРегистра.ДатаВерсии КАК ДатаВерсии
	|ИЗ
	|	РегистрСведений.ВерсииОбъектов КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.ДатаВерсии <= &ДатаАктуальности
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВерсии"
	);
	Запрос.УстановитьПараметр("ДатаАктуальности", ?(ДатаАктуальности = '00010101', ДобавитьМесяц(НачалоДня(ТекущаяДата()) - 1, -12), ДатаАктуальности));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ВерсииОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);

//	работаем в каждой ИБ.. миграция из ЦБ в перbферию слишком накладна получается

	Счётчик = 0;

	Пока Выборка.Следующий() Цикл

		НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
		НаборЗаписей.Отбор.НомерВерсии.Установить(Выборка.НомерВерсии);
		НаборЗаписей.Отбор.ЭлементСтруктуры.Установить(Выборка.ЭлементСтруктуры);

		НаборЗаписей.Записать();

		Счётчик = Счётчик + 1;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область РегламентВерификацииДержателейДисконтныхКарт

//	LNK 20.10.2017 12:10:20
Процедура ВерификацияПокупателей()	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаКарты.ВладелецКарты КАК Контрагент
	|ПОМЕСТИТЬ Покупатели
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ТаблицаКарты
	|ГДЕ
	|	ТаблицаКарты.ВладелецКарты ССЫЛКА Справочник.Контрагенты
	|	И ТаблицаКарты.ВидДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.ВидыДисконтныхКарт.НакопительныеКарты)
	|	И НЕ(ТаблицаКарты.ПометкаУдаления
	|				ИЛИ ТаблицаКарты.Блокирован)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВыполнен.Период КАК Период,
	|	ТаблицаВыполнен.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ Верифицированы
	|ИЗ
	|	РегистрСведений.ВерификацияКлиентовНазначение.СрезПоследних(
	|			ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ГОД, -1),
	|			НЕ(Контрагент.ПометкаУдаления
	|					ИЛИ Контрагент.Блокирован)) КАК ТаблицаВыполнен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВерификацияКлиентовНазначение.СрезПоследних КАК ТаблицаНазначен
	|		ПО ТаблицаВыполнен.Контрагент = ТаблицаНазначен.Контрагент
	|			И (ТаблицаНазначен.ВидВерификации = ЗНАЧЕНИЕ(Перечисление.ВидыВерификацииПокупателей.Плановая))
	|ГДЕ
	|	ТаблицаВыполнен.ВидВерификации = ЗНАЧЕНИЕ(Перечисление.ВидыВерификацииПокупателей.Выполнена)
	|	И ВЫБОР
	|			КОГДА ТаблицаНазначен.ВидВерификации ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаНазначен.Период < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ГОД, -1)
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
	|	Покупатели.Контрагент КАК Контрагент
	|ИЗ
	|	Покупатели КАК Покупатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВерификацияКлиентовНазначение.СрезПоследних(
	|				,
	|				Контрагент В
	|					(ВЫБРАТЬ
	|						Покупатели.Контрагент
	|					ИЗ
	|						Покупатели)) КАК ТаблицаРегистра
	|		ПО Покупатели.Контрагент = ТаблицаРегистра.Контрагент
	|ГДЕ
	|	ТаблицаРегистра.ВидВерификации ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Верифицированы.Период,
	|	Верифицированы.Контрагент
	|ИЗ
	|	Верифицированы КАК Верифицированы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(
	|				ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ГОД, -1),
	|				,
	|				Период,
	|				ВладелецДисконтнойКарты ССЫЛКА Справочник.Контрагенты
	|					И ВладелецДисконтнойКарты В
	|						(ВЫБРАТЬ
	|							Верифицированы.Контрагент
	|						ИЗ
	|							Верифицированы)) КАК ТаблицаПродажи
	|		ПО Верифицированы.Контрагент = ТаблицаПродажи.ВладелецДисконтнойКарты
	|ГДЕ
	|	ТаблицаПродажи.ВладелецДисконтнойКарты ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период"
	);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	КлиентыВыборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ВерификацияКлиентовНазначение.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);

	ОбменДаннымиСервер.УстановитьВсехПолучателей(НаборЗаписей.ОбменДанными.Получатели, "ПоМагазину");
	ОбменДаннымиСервер.УстановитьВсехПолучателей(НаборЗаписей.ОбменДанными.Получатели, "ПоМагазинуКонвертация");

	Пока КлиентыВыборка.Следующий() Цикл

		НаборЗаписей.Очистить();

		НаборЗаписей.Отбор.Период.Установить(ТекущаяДатаСеанса());
		НаборЗаписей.Отбор.Контрагент.Установить(КлиентыВыборка.Контрагент);

		ЗаписьНабора = НаборЗаписей.Добавить();

		ЗаписьНабора.Период = НаборЗаписей.Отбор.Период.Значение;
		ЗаписьНабора.Контрагент = НаборЗаписей.Отбор.Контрагент.Значение;
		ЗаписьНабора.ВидВерификации = Перечисления.ВидыВерификацииПокупателей.Плановая;

		ЗаписьНабора.ДатаИзменения = ТекущаяДата();

		НаборЗаписей.Записать();

	КонецЦикла;

КонецПроцедуры
	
#КонецОбласти

#Область АсинхроннаяОбработкаОбъектовВПериферийныхУзлах

//	LNK 20.11.2017 14:21:41
Процедура НазначитьОбъектуДействие(Объект, Проект = Неопределено, ДействиеКоманда, ПроверятьСертификат, Автор = Неопределено)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	СертификатСоответствует = ?(ПроверятьСертификат = Истина
		, ОбменДаннымиСервер.ПроверитьСертификатИнформационнойБазы() = 1
		, Истина);

	Если СертификатСоответствует Тогда

		Попытка
		
			МенеджерЗаписи = РегистрыСведений.РегистрацияОбъектов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = ТекущаяДатаСеанса();
			МенеджерЗаписи.Объект = Объект;
			МенеджерЗаписи.Проект = Проект;
			МенеджерЗаписи.ДействиеКоманда = ДействиеКоманда;
		//	LNK 24.12.2021 05:35:07
			МенеджерЗаписи.Автор		= Автор;
			МенеджерЗаписи.УзелСоздания	= ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().ЭлементСтруктуры;

			МенеджерЗаписи.Записать();
		
		Исключение

			ЖурналСобытий.Регистрация("ДЕЙСТВИЕ ДЛЯ ОБЪЕКТА"
				, УровеньЖурналаРегистрации.Ошибка
				,
				, Объект
				,
				, "Назначить «" + ДействиеКоманда + "»:" + Символы.ПС + ОписаниеОшибки()
				, СокрЛП(Объект)
				, Ложь
			);

		КонецПопытки;

	//	LNK 28.10.2021 11:16:15
		Если (ТипЗнч(Объект) = Тип("ДокументСсылка.ЧекККМ") ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаказПокупателя"))
		И	 ДействиеКоманда = "ПЕРЕДАТЬ_В_ЦЕНТР"
		И	 ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().ВидУзла = Перечисления.ВидыУзлов.Магазин
		Тогда

			Попытка

			//	Текущая процедура в "ПриЗаписи" объекта ЧекККМ и так выполняется в фоновом процессе.. 
				ТехническаяПоддержка.ПередатьЗарегистрированныеОбъектыВЦентральныйУзел("ПЕРЕДАТЬ_В_ЦЕНТР", Объект, "записать_обязательно");

			Исключение

				ТекстОшибки = ОписаниеОшибки();
				ЖурналСобытий.Регистрация("ПЕРЕДАТЬ_В_ЦЕНТР"
					, УровеньЖурналаРегистрации.Ошибка
					, Метаданные.Документы.ЧекККМ
					, Объект
					,
					, ТекстОшибки
					, СокрЛП(Объект)
					, Истина
					, Ложь
				);

			КонецПопытки;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 08.07.2020 11:32:31
Процедура УдалитьЗаписьВоздействия(Объект, Проект = Неопределено, Период = Неопределено)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если ТипЗнч(Период) = Тип("Строка") Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрацияОбъектов.Период КАК Период,
		|	РегистрацияОбъектов.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.РегистрацияОбъектов КАК РегистрацияОбъектов
		|ГДЕ
		|	РегистрацияОбъектов.Объект = &Объект
		|	И РегистрацияОбъектов.ДействиеКоманда = &ДействиеКоманда
		|	И РегистрацияОбъектов.Проект = &Проект
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период"
		);
		Запрос.УстановитьПараметр("Объект", Объект);
		Запрос.УстановитьПараметр("Проект", Проект);
		Запрос.УстановитьПараметр("ДействиеКоманда", Период);

		ТаблицаЗначений = Запрос.Выполнить().Выгрузить();

	Иначе

		ТаблицаЗначений = Новый ТаблицаЗначений;
		ТаблицаЗначений.Колонки.Добавить("Период");
		ТаблицаЗначений.Колонки.Добавить("Объект");

		СтрокаТаблицы = ТаблицаЗначений.Добавить();
		СтрокаТаблицы.Период = Период;
		СтрокаТаблицы.Объект = Объект;

	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		МенеджерЗаписи = РегистрыСведений.РегистрацияОбъектов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = СтрокаТаблицы.Период;
		МенеджерЗаписи.Объект = СтрокаТаблицы.Объект;
		МенеджерЗаписи.Удалить();

	КонецЦикла;

КонецПроцедуры

//	LNK 20.11.2017 14:03:43
Процедура РегламентРегистрацииОбъектов() Экспорт

	УстановитьПривилегированныйРежим(Истина);

//	Проводим безусловно в каждой ИБ.
	ФоновыеЗадания.Выполнить("ТехническаяПоддержка.ОчиститьУстаревшееНоменклатурноеСостояние"
	,, "ОЧИСТКА_НОМ_СОСТОЯНИЯ");

	Если   ОбменДаннымиПовтИсп.ЭтоГлавныйУзел()
	ИЛИ НЕ ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().ВидУзла = Перечисления.ВидыУзлов.Магазин
	ИЛИ НЕ ОбменДаннымиПовтИсп.ПроверитьСертификатИнформационнойБазы(Истина) = 1
	Тогда

		Возврат;
		
	КонецЕсли;

	ФоновыеЗадания.Выполнить("ПодарочныеСертификатыСервер.ВыполнитьПеремещениеСертификатовВЦентр"
	,, "ПЕРЕМЕЩЕНИЕ_СЕРТИФИКАТОВ");	//	LNK 20.03.2020 12:32:29

//	Очистку и дальнейшие действия проведём последовательно... "устаревшие" данные не нужно
//	передавать в центр - наверняка они уже и так "доехали".
	ФоновыеЗадания.Выполнить("ТехническаяПоддержка.ОчиститьУстаревшуюРегистрациюОбъектов"
	,, "ОЧИСТКА_РЕГИСТРАЦИИ");

	Если РозничныеПродажиСлужебный.РесурсWebRetailДоступен() Тогда

		Если ВнешниеИсточникиПовтИсп.ИспользоватьWEBПередачуОбъектовВЦБ(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин) Тогда

			ФоновыеЗадания.Выполнить("ТехническаяПоддержка.ПередатьЗарегистрированныеОбъектыВЦентральныйУзел"
			, ОбщегоНазначенияКлиентСервер.AAD("ПЕРЕДАТЬ_В_ЦЕНТР", Неопределено)
			, "ПЕРЕДАТЬ_В_ЦЕНТР");

			ФоновыеЗадания.Выполнить("ТехническаяПоддержка.ПередатьЗарегистрированныеОбъектыВЦентральныйУзел"
			, ОбщегоНазначенияКлиентСервер.AAD("ИЗМЕНЕНИЕ_СОСТОЯНИЯ_ПС", Неопределено)
			, "ИЗМЕНЕНИЕ_СОСТОЯНИЯ_ПС");

		КонецЕсли;

		Если ВнешниеИсточникиПовтИсп.ИспользоватьWEBЗагрузкуЗаказовПокупателей(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин) Тогда

			ФоновыеЗадания.Выполнить("ЗаказыПокупателейСервер.ПолучитьЗаказыПокупателейИзЦентральногоУзла"
			,, "ПОЛУЧИТЬ_ЗАКАЗЫ_ИЗ_ЦО");

			ФоновыеЗадания.Выполнить("ЗаказыПокупателейСервер.ПолучитьЗапросыДоступностиТоваровИзЦентральногоУзла"
			,, "ПОЛУЧИТЬ_ЗАПРОСЫ_ДОСТУПНОСТИ_ИЗ_ЦО");

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 15.12.2017 09:42:41
Процедура ПередатьЗарегистрированныеОбъектыВЦентральныйУзел(ДействиеКоманда, Объект = Неопределено, КомандаСсылочногоОбъекта = "записать_только_новый")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Индекс" , Новый ОписаниеТипов("Число"));
	ТаблицаОбъектов.Колонки.Добавить("Объект" , Новый ОписаниеТипов(
		"ДокументОбъект.ЗаказПокупателя, ДокументОбъект.ЧекККМ, СправочникОбъект.СерийныеНомера, РегистрСведенийНаборЗаписей.СерийныеНомераДляАкций, РегистрСведенийНаборЗаписей.СостоянияСерийныхНомеров"));
	ТаблицаОбъектов.Колонки.Добавить("Ссылка" , Новый ОписаниеТипов(
		"ДокументСсылка.ЗаказПокупателя, ДокументСсылка.ЧекККМ, СправочникСсылка.СерийныеНомера"));
	ТаблицаОбъектов.Колонки.Добавить("Команда", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
//	LNK 24.12.2021 05:26:40
	ТаблицаОбъектов.Колонки.Добавить("Автор"		, Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаОбъектов.Колонки.Добавить("УзелСоздания" , Новый ОписаниеТипов("СправочникСсылка.СтруктураУзлов"));

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрацияОбъектов.Период КАК Период,
	|	РегистрацияОбъектов.Объект КАК Объект,
	|	РегистрацияОбъектов.Автор КАК Автор,
	|	РегистрацияОбъектов.УзелСоздания КАК УзелСоздания
	|ИЗ
	|	РегистрСведений.РегистрацияОбъектов КАК РегистрацияОбъектов
	|ГДЕ
	|	РегистрацияОбъектов.ДействиеКоманда = &ДействиеКоманда
	|	И ВЫБОР
	|			КОГДА &Объект = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ РегистрацияОбъектов.Объект = &Объект
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Объект"
	);
	Запрос.УстановитьПараметр("ДействиеКоманда"	, ДействиеКоманда);
	Запрос.УстановитьПараметр("Объект"			, Объект);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();
		Индекс  = 0;

		Пока Выборка.Следующий() Цикл

			Если ДействиеКоманда = "ИЗМЕНЕНИЕ_СОСТОЯНИЯ_ПС" Тогда

				НаборЗаписей = РегистрыСведений.СостоянияСерийныхНомеров.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Объект);

				НаборЗаписей.Прочитать();

				СтрокаТаблицы = ТаблицаОбъектов.Добавить();
				СтрокаТаблицы.Индекс  = Индекс;
				СтрокаТаблицы.Объект  = НаборЗаписей;
				СтрокаТаблицы.Ссылка  = Выборка.Объект;
				СтрокаТаблицы.Команда = "записать_набор_записей";
			//	LNK 24.12.2021 05:28:38
				СтрокаТаблицы.Автор			= Выборка.Автор;
				СтрокаТаблицы.УзелСоздания	= Выборка.УзелСоздания;

				Индекс = Индекс + 1;

			Иначе

				СтрокаТаблицы = ТаблицаОбъектов.Добавить();
				СтрокаТаблицы.Индекс  = Индекс;
				СтрокаТаблицы.Объект  = Выборка.Объект.ПолучитьОбъект();
				СтрокаТаблицы.Ссылка  = Выборка.Объект;
				СтрокаТаблицы.Команда = ?(ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(Выборка.Объект.Метаданные())
					, КомандаСсылочногоОбъекта
					, "записать_только_новый"
				);
			//	LNK 24.12.2021 05:28:38
				СтрокаТаблицы.Автор			= Выборка.Автор;
				СтрокаТаблицы.УзелСоздания	= Выборка.УзелСоздания;

				Индекс = Индекс + 1;

				Если ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.СерийныеНомера") Тогда

					НаборЗаписей = РегистрыСведений.СерийныеНомераДляАкций.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.СерийныйНомер.Установить(Выборка.Объект);

					НаборЗаписей.Прочитать();

					СтрокаТаблицы = ТаблицаОбъектов.Добавить();
					СтрокаТаблицы.Индекс  = Индекс;
					СтрокаТаблицы.Объект  = НаборЗаписей;
					СтрокаТаблицы.Ссылка  = Выборка.Объект;
					СтрокаТаблицы.Команда = "записать_набор_записей";
				//	LNK 24.12.2021 05:28:38
					СтрокаТаблицы.Автор			= Выборка.Автор;
					СтрокаТаблицы.УзелСоздания	= Выборка.УзелСоздания;

					Индекс = Индекс + 1;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
		СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, ТаблицаОбъектов, НазначениеТипаXML.Явное);

		ТаблицаОбъектов = Неопределено;

		Подключение = СервисыСервер.Подключение("RetailPack");

		ЧтениеJSON = Новый ЧтениеJSON;	//	пытаемся получить таблицу обработанных ссылок.
		ЧтениеJSON.УстановитьСтроку(Подключение.SaveDokum(ЗаписьJSON.Закрыть()));

		Попытка
			
			ТаблицаСсылок = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	РегистрацияОбъектов.Период КАК Период,
			|	РегистрацияОбъектов.Объект КАК Объект
			|ИЗ
			|	РегистрСведений.РегистрацияОбъектов КАК РегистрацияОбъектов
			|ГДЕ
			|	РегистрацияОбъектов.Объект В(&СписокСсылок)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период,
			|	Объект"
			);
			Запрос.УстановитьПараметр("СписокСсылок", ТаблицаСсылок.ВыгрузитьКолонку("Объект"));

			Выборка = Запрос.Выполнить().Выбрать();

			Пока Выборка.Следующий() Цикл

				МенеджерЗаписи = РегистрыСведений.РегистрацияОбъектов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
				МенеджерЗаписи.Удалить();

			КонецЦикла;

		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ЖурналСобытий.Регистрация("WEB.РегламентРегистрацииОбъектов", УровеньЖурналаРегистрации.Ошибка
			,,,, "Обработка ответа SaveDokum: " + ТекстОшибки,, Ложь);

		КонецПопытки;

	КонецЕсли;

КонецПроцедуры

//	LNK 12.01.2018 08:03:46
Процедура ОчиститьУстаревшуюРегистрациюОбъектов()	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РегистрацияОбъектов.Период КАК Период,
	|	РегистрацияОбъектов.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.РегистрацияОбъектов КАК РегистрацияОбъектов
	|ГДЕ
	|	РегистрацияОбъектов.Период <= ДОБАВИТЬКДАТЕ(&ТекущаяДата, МИНУТА, -10)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Объект"
	);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		НаборЗаписей = РегистрыСведений.РегистрацияОбъектов.СоздатьНаборЗаписей();

		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл

			НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);

			НаборЗаписей.Записать();

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	LNK 28.02.2020 08:40:19
Процедура ОчиститьУстаревшееНоменклатурноеСостояние()	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

//	Работаем в каждой ИБ без передачи в обмены!

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРегистра.Магазин КАК Магазин,
	|	ТаблицаРегистра.ПериодДень КАК ПериодДень,
	|	ТаблицаРегистра.Магазин.НомерМагазина КАК НомерМагазина
	|ИЗ
	|	РегистрСведений.НоменклатурноеСостояние КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.ПериодДень < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ), МЕСЯЦ, -3)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодДень,
	|	НомерМагазина"
	);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());

	ВыборкаПериоды = Запрос.Выполнить().Выбрать();

	НаборЗаписей = РегистрыСведений.НоменклатурноеСостояние.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьУстановкуПредыдущихЦен"    , Истина);
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;

	Пока ВыборкаПериоды.Следующий() Цикл

		НаборЗаписей.Отбор.ПериодДень.Установить(ВыборкаПериоды.ПериодДень);
		НаборЗаписей.Отбор.Магазин.Установить(ВыборкаПериоды.Магазин);

		НаборЗаписей.Записать();

	КонецЦикла;

КонецПроцедуры

#КонецОбласти


#Область РегламентПоУдалениюНазначенныхДляЭтогоОбъектов

//	LNK 26.06.2018 14:17:16
Процедура РегламентУдаленияНазначенныхОбъектов()	Экспорт

	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Возврат;

	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСеанса.ИсключительныйРежим = Истина;
	ПараметрыСеанса.ВыполняютсяСлужебныеДействия = Истина;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КоличествоПопытокУдаления", ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику().КоличествоПопытокУдаления);
	Запрос.УстановитьПараметр("ТолькоЗаказПокупателя"	 , Ложь);	//	LNK 28.04.2023 08:07:38 - возможность отладки

	СброситьДоМаксимумаКоличествоПопыток(Запрос);	//	LNK 28.04.2023 07:51:49

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРегистра.Период КАК Период,
	|	ТаблицаРегистра.Магазин КАК Магазин,
	|	ТаблицаРегистра.Индекс КАК Индекс,
	|	ТаблицаРегистра.Объект КАК Объект
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	РегистрСведений.ОбъектыДляОбработки КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.ДействиеКоманда = ""УДАЛЕНИЕ_ОБЪЕКТА""
	|	И ТаблицаРегистра.КоличествоПопыток < &КоличествоПопытокУдаления
	|	И НЕ ТаблицаРегистра.Выполнен
	|	И ВЫБОР
	|			КОГДА &ТолькоЗаказПокупателя = ИСТИНА
	|				ТОГДА ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Объект) = ТИП(Документ.ЗаказПокупателя)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка КАК ЗакрытиеЗаказа,
	|	Источник.Объект КАК ЗаказПокупателя,
	|	Источник.Объект.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Источник КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеЗаказовПокупателей.Реестр КАК ТабличнаяЧасть
	|		ПО Источник.Объект = ТабличнаяЧасть.ЗаказПокупателя
	|ГДЕ
	|	Источник.Объект ССЫЛКА Документ.ЗаказПокупателя
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗакрытиеЗаказа
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателя)
	|ПО
	|	ЗакрытиеЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.Период КАК Период,
	|	Источник.Магазин КАК Магазин,
	|	Источник.Индекс КАК Индекс,
	|	Источник.Объект КАК Объект,
	|	Источник.Объект.ЭтоГруппа КАК ЭтоГруппа,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Источник.Объект) = ТИП(Документ.ВводОстатковПоНакопительнымСкидкам)
	|			ТОГДА 0
	|		КОГДА ТИПЗНАЧЕНИЯ(Источник.Объект) = ТИП(Справочник.ХранилищеШаблонов)
	|			ТОГДА 0
	|		КОГДА ТИПЗНАЧЕНИЯ(Источник.Объект) = ТИП(Справочник.ИнформационныеКарты)
	|			ТОГДА 1
	|		КОГДА ТИПЗНАЧЕНИЯ(Источник.Объект) = ТИП(Справочник.Контрагенты)
	|			ТОГДА ВЫБОР
	|					КОГДА Источник.Объект.ЭтоГруппа = ЛОЖЬ
	|						ТОГДА 2
	|					ИНАЧЕ 3
	|				КОНЕЦ
	|		КОГДА ТИПЗНАЧЕНИЯ(Источник.Объект) = ТИП(Справочник.Номенклатура)
	|			ТОГДА ВЫБОР
	|					КОГДА Источник.Объект.ЭтоГруппа = ЛОЖЬ
	|						ТОГДА 4
	|					ИНАЧЕ 5
	|				КОНЕЦ
	|		ИНАЧЕ 6
	|	КОНЕЦ КАК КлючПорядка,
	|	ЕСТЬNULL(Источник.Объект.Предопределенный, ЛОЖЬ) КАК Предопределенный
	|ИЗ
	|	Источник КАК Источник
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка,
	|	Период,
	|	Индекс
	|ИТОГИ
	|	МАКСИМУМ(ЭтоГруппа)
	|ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.Объект КАК Объект
	|ИЗ
	|	Источник КАК Источник
	|ГДЕ
	|	Источник.Объект ССЫЛКА Справочник.Номенклатура
	|	И Источник.Объект.ЭтоГруппа = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	;
	Результаты = Запрос.ВыполнитьПакет();

//	Задача: очистить ссылки на заказы покупателей в возможно присутствующих документах "ЗакрытиеЗаказовПокупателей"
//	и, после очистки, установить пометку удаления на эти заказы.
	ПодготовитьКУдалениюЗаказыПокупателей(Результаты[1]);

	СписокИсключений = СписокИсключенийПоискаСсылок();

	СписокГруппы = Результаты[3].Выгрузить();	//	LNK 30.10.2020 08:38:05
	СписокГруппы.Индексы.Добавить("Объект");

	ТипыСсылок = Новый Массив;
	ТипыСсылок.Добавить(Метаданные.Документы.ПеремещениеТоваров);
	ТипыСсылок.Добавить(Метаданные.Документы.ПриходныйОрдерНаТовары);
	ТипыСсылок.Добавить(Метаданные.Документы.РасходныйОрдерНаТовары);
	ТипыСсылок.Добавить(Метаданные.Документы.ОтчетОРозничныхПродажах);
	ТипыСсылок.Добавить(Метаданные.Документы.ЧекККМ);

	ОбъектыВыборка = Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ОбъектыВыборка.Следующий() Цикл

		Попытка	//	LNK 12.05.2023 05:43:10

			ТекущийОбъект = ОбъектыВыборка.Объект.ПолучитьОбъект();

		Исключение

			ТекущийОбъект = Неопределено;

		КонецПопытки;

		ОбъектИзменён = Ложь;

		Если НЕ (ТекущийОбъект = Неопределено ИЛИ ОбъектыВыборка.Предопределенный) Тогда

			РаботаемУдаление = Истина;

			СписокПоиска  = Новый Массив;
			СписокПоиска.Добавить(ОбъектыВыборка.Объект);
			ТаблицаСсылок = НайтиПоСсылкам(СписокПоиска, Новый Массив, ОбменДаннымиПовтИсп.ПолучитьСписокМетаданныхКонфигурации(), СписокИсключений);

			Если ТипЗнч(ТекущийОбъект) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда

			//	LNK 11.05.2023 16:15:00
			//	ликвидируем возможные косяки.. мало-ли, что-то грохнули
			//	в ЦБ, но есть существенные ссылки.. регистрируем обратно
			//	Документ заедет в ЦБ, а там дальше будем разбираться
				#Если _ Тогда
				ТекущийОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
				#КонецЕсли

				Для каждого СтрокаСсылки Из ТаблицаСсылок Цикл

					Для каждого ТипСсылки Из ТипыСсылок Цикл

						Если СтрокаСсылки.Метаданные = ТипСсылки
						И НЕ ОбщегоНазначенияКлиентСервер.СсылкаПустая(СтрокаСсылки.Данные)
						Тогда

							РаботаемУдаление = Ложь;
							ПланыОбмена.ЗарегистрироватьИзменения(ОбменДаннымиПовтИсп.ГлавныйУзел(), ОбъектыВыборка.Объект);
							ОчиститьОбъектыДляОбработки(ОбъектыВыборка.Выбрать());

							Если ТекущийОбъект.ПометкаУдаления Тогда

								ТекущийОбъект.УстановитьПометкуУдаления(Ложь);

							КонецЕсли;

							Прервать;

						КонецЕсли;

					КонецЦикла;

					Если РаботаемУдаление = Ложь Тогда

						Прервать;

					КонецЕсли;

				КонецЦикла;

			КонецЕсли;

			Если РаботаемУдаление = Ложь Тогда

				Продолжить;

			КонецЕсли;

		//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

			ОчиститьНекоторыеСвязиПередУдалениемСсылки(ОбъектыВыборка);

			ТекущийОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
			ТекущийОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);

			Попытка

				ОчиститьЛишниеСвязанныеСсылки(ОбъектыВыборка, ТаблицаСсылок, СписокГруппы);

				Если ТаблицаСсылок.Количество() = 0 Тогда

					ТекущийОбъект.ОбменДанными.Загрузка = Истина;	//	LNK 22.05.2023 08:57:20

				//	.. на всякий случай.. вдруг документ проведен!
				//	с "УдалениеОбъекта" была проблемка - его запись не вызывает отмену проведения.
				//	То есть, дуем на холодное
					ТекущийОбъект.УстановитьПометкуУдаления(Истина);

					ТекущийОбъект.Удалить();
					ОбъектИзменён = Истина;

					ОчиститьОбъектыДляОбработки(ОбъектыВыборка.Выбрать());

				Иначе

					Если ТекущийОбъект.ПометкаУдаления = Ложь Тогда

						ТекущийОбъект.УстановитьПометкуУдаления(Истина);
						ОбъектИзменён = Истина;

					КонецЕсли;

					Если ТипЗнч(ТекущийОбъект) = Тип("СправочникОбъект.Контрагенты") Тогда

						Если НЕ ТекущийОбъект.Родитель = Справочники.Контрагенты.Корзина Тогда

							ТекущийОбъект.Родитель = Справочники.Контрагенты.Корзина;
							ТекущийОбъект.Записать();
							ОбъектИзменён = Истина;

						КонецЕсли;

					КонецЕсли;

					ТекстОшибки = "Ссылки на объект:";	//	LNK 30.10.2020 06:17:38
					Счётчик     = 0;

					Для каждого СтрокаТаблицы Из ТаблицаСсылок Цикл

						КодЭлемента = "";
						Счётчик     = Счётчик + 1;

						Если ОбщегоНазначения.ЭтоСправочник(СтрокаТаблицы.Метаданные)
						И НЕ СтрокаТаблицы.Метаданные.ДлинаКода = 0	Тогда

							КодЭлемента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Данные, "Код", "", Ложь);

						КонецЕсли;

						ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
						+ ?(ПустаяСтрока(КодЭлемента), "", СокрЛП(КодЭлемента) + "#")
						+ СокрЛП(СтрокаТаблицы.Данные) + "#" + СтрокаТаблицы.Метаданные.ПолноеИмя();

						Если Счётчик >= 10 Тогда

							Если Счётчик < ТаблицаСсылок.Количество() Тогда

								ТекстОшибки = ТекстОшибки + Символы.ПС
								+ "......" + Символы.ПС + "(всего ссылок " + ТаблицаСсылок.Количество() + ")"

							КонецЕсли;

							Прервать;

						КонецЕсли;

						ПроверитьОбъектВЦентральнойБазе(ОбъектыВыборка.Объект, СтрокаТаблицы.Данные, СтрокаТаблицы.Метаданные);

					КонецЦикла;

					ОбновитьПопыткуОбъектыДляОбработки(ОбъектыВыборка.Выбрать());

					ЖурналСобытий.Регистрация("УДАЛЕНИЕ_ОБЪЕКТА", УровеньЖурналаРегистрации.Предупреждение
						, ТекущийОбъект.Метаданные()
						, ОбъектыВыборка.Объект
						,
						, ТекстОшибки
						, СокрЛП(ОбъектыВыборка.Объект)
						, Истина
						, Ложь
					);

				КонецЕсли;

			Исключение

				ТекстОшибки = ОписаниеОшибки();
				ЖурналСобытий.Регистрация("УДАЛЕНИЕ_ОБЪЕКТА", УровеньЖурналаРегистрации.Ошибка
					, ТекущийОбъект.Метаданные()
					, ОбъектыВыборка.Объект
					,
					, ТекстОшибки
					, СокрЛП(ОбъектыВыборка.Объект)
					, Истина
					, Ложь
				);

			КонецПопытки;

		Иначе

			Если НЕ ТекущийОбъект = Неопределено И ОбъектыВыборка.Предопределенный И ТекущийОбъект.ПометкаУдаления Тогда

				ТекущийОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
				ТекущийОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);

				ТекущийОбъект.УстановитьПометкуУдаления(Ложь);
				ОбъектИзменён = Истина;

			КонецЕсли;

			ОчиститьОбъектыДляОбработки(ОбъектыВыборка.Выбрать());

		КонецЕсли;

		Если ОбъектИзменён = Истина Тогда

			ОчиститьРегистрациюСопутствующихОбъектов(ОбъектыВыборка.Объект);

		КонецЕсли;

	КонецЦикла;

	ПараметрыСеанса.ИсключительныйРежим = Ложь;
	ПараметрыСеанса.ВыполняютсяСлужебныеДействия = Ложь;

КонецПроцедуры

//	LNK 17.05.2023 07:06:18
Функция СписокИсключенийПоискаСсылок()	Экспорт

	СписокИсключений = Новый Массив;
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов);
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.ЖурналСобытий);
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.КлючевыеАтрибутыДокументов);			//	LNK 11.01.2022 05:57:38
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.КлючевыеАтрибутыЗаказовПокупателей);	//	LNK 11.01.2022 05:57:38
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.КлючевыеАтрибутыКонтрагентов);		//	LNK 11.01.2022 05:57:38
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.КлючевыеАтрибутыПрограммЛояльности);	//	LNK 11.01.2022 05:57:38
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.НаборыЗначенийДоступа);
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.ОбъектыДляОбработки);
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.ОбъектыПроблемныеДоВыяснения);
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.СоответствияОбъектовУчетныхСистем);
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.НоменклатураСегмента);		//	LNK 30.10.2020 06:31:33
	СписокИсключений.Добавить(Метаданные.Документы.ЗакрытиеЗаказовПокупателей);			//	LNK 27.04.2023 05:40:15
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.КомментарийИнтернетЗаказа);	//	LNK 11.05.2023 13:58:37
	СписокИсключений.Добавить(Метаданные.РегистрыСведений.КомплексОбменаMagento);		//	LNK 17.05.2023 07:02:39

	Возврат СписокИсключений;

КонецФункции

Процедура СброситьДоМаксимумаКоличествоПопыток(Запрос)	//	LNK 28.04.2023 07:52:17

//	Обеспечиваем возможность управления количеством
//	попыток удаления. В учётной политике снизили количество -
//	значение разъехалось на периферию и сбросило уже "отработавшие"
//	записи в это значение.
//	Потом увеличили количество попыток - и процессы поехали заново,
//	с учётом сделанных изменений в коде конфигурации.

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРегистра.Период КАК Период,
	|	ТаблицаРегистра.Магазин КАК Магазин,
	|	ТаблицаРегистра.Индекс КАК Индекс
	|ИЗ
	|	РегистрСведений.ОбъектыДляОбработки КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.КоличествоПопыток > &КоличествоПопытокУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Магазин,
	|	Индекс"
	;
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		НаборЗаписей = РегистрыСведений.ОбъектыДляОбработки.СоздатьНаборЗаписей();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);

		КлючиВыборка = РезультатЗапроса.Выбрать();

		Пока КлючиВыборка.Следующий() Цикл

			НаборЗаписей.Отбор.Период.Установить(КлючиВыборка.Период);
			НаборЗаписей.Отбор.Магазин.Установить(КлючиВыборка.Магазин);
			НаборЗаписей.Отбор.Индекс.Установить(КлючиВыборка.Индекс);

			НаборЗаписей.Прочитать();

			Для каждого ЗаписьНабора Из НаборЗаписей Цикл

				Если ЗаписьНабора.КоличествоПопыток > Запрос.Параметры.КоличествоПопытокУдаления Тогда

					ЗаписьНабора.КоличествоПопыток = Запрос.Параметры.КоличествоПопытокУдаления;

				КонецЕсли;

			КонецЦикла;

			Если НаборЗаписей.Модифицированность() Тогда

				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	LNK 05.06.2019 10:31:13
Процедура ОчиститьНекоторыеСвязиПередУдалениемСсылки(ОбъектыВыборка)

	ТипЗначения = ТипЗнч(ОбъектыВыборка.Объект);

	Если (ТипЗначения = Тип("СправочникСсылка.Номенклатура") ИЛИ ТипЗначения = Тип("СправочникСсылка.Магазины"))
		И ОбъектыВыборка.ЭтоГруппа = Ложь
	Тогда

		Измерение = ?(ТипЗначения = Тип("СправочникСсылка.Номенклатура"), "Номенклатура", "Магазин");

		НаборЗаписей = ПодготовитьНаборЗаписей("РазмерыЦенников", РегистрыСведений);
		НаборЗаписей.Отбор[Измерение].Установить(ОбъектыВыборка.Объект);
		НаборЗаписей.Записать();

	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Контрагенты")  Тогда

		НаборЗаписей = ПодготовитьНаборЗаписей("ФИОФизЛиц", РегистрыСведений);
		НаборЗаписей.Отбор.ФизЛицо.Установить(ОбъектыВыборка.Объект);
		НаборЗаписей.Записать();

		НаборЗаписей = ПодготовитьНаборЗаписей("ВерификацияКлиентовНазначение", РегистрыСведений);
		НаборЗаписей.Отбор.Контрагент.Установить(ОбъектыВыборка.Объект);
		НаборЗаписей.Записать();

		НаборЗаписей = ПодготовитьНаборЗаписей("ВерификацияКлиентовСобытия", РегистрыСведений);
		НаборЗаписей.Отбор.Контрагент.Установить(ОбъектыВыборка.Объект);
		НаборЗаписей.Записать();

		НаборЗаписей = ПодготовитьНаборЗаписей("КлючевыеАтрибутыКонтрагентов", РегистрыСведений);
		НаборЗаписей.Отбор.Объект.Установить(ОбъектыВыборка.Объект);
		НаборЗаписей.Записать();

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаРегистра.Период КАК Период,
		|	ТаблицаРегистра.Номенклатура КАК Номенклатура,
		|	ТаблицаРегистра.Продавец КАК Продавец,
		|	ТаблицаРегистра.ДокументПродажи КАК ДокументПродажи,
		|	ТаблицаРегистра.Магазин КАК Магазин
		|ИЗ
		|	РегистрСведений.КачествоОбслуживанияПродаж КАК ТаблицаРегистра
		|ГДЕ
		|	ТаблицаРегистра.ВладелецДисконтнойКарты = &Объект
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период"
		);
		Запрос.УстановитьПараметр("Объект", ОбъектыВыборка.Объект);
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда

			НаборЗаписей = ПодготовитьНаборЗаписей("КачествоОбслуживанияПродаж", РегистрыСведений);

			Выборка = Результат.Выбрать();

			Пока Выборка.Следующий() Цикл

				НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
				НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
				НаборЗаписей.Отбор.Продавец.Установить(Выборка.Продавец);
				НаборЗаписей.Отбор.ДокументПродажи.Установить(Выборка.ДокументПродажи);
				НаборЗаписей.Отбор.Магазин.Установить(Выборка.Магазин);

				НаборЗаписей.Записать();

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьНаборЗаписей(Имя, МенеджерРегистра)	//	LNK 25.02.2021 07:51:05

	НаборЗаписей = МенеджерРегистра[Имя].СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);

	Возврат НаборЗаписей;

КонецФункции

//	LNK 30.10.2020 10:37:38
Процедура ОчиститьЛишниеСвязанныеСсылки(ОбъектыВыборка, ТаблицаСсылок, СписокГруппы)

	Если НЕ ТаблицаСсылок.Количество() = 0 Тогда

		СтрокиУдалить = Новый Массив;

	//	Назначим к удалению строки, ссылающиеся "сами на себя"
		Для каждого СтрокаТаблицы Из ТаблицаСсылок Цикл

			Если СтрокаТаблицы.Данные = СтрокаТаблицы.Ссылка Тогда

				СтрокиУдалить.Добавить(СтрокаТаблицы);

			КонецЕсли;

		КонецЦикла;

	//	.. дальше идём по типам

		Если ТипЗнч(ОбъектыВыборка.Объект) = Тип("СправочникСсылка.Номенклатура")	Тогда

			Если ОбъектыВыборка.ЭтоГруппа = Истина Тогда

			//	Очистим ссылки на подчинённые группы, если они так же будут удаляться..
			//	как бы дополнительный предохранитель.

				Для каждого СтрокаТаблицы Из ТаблицаСсылок Цикл

					Если НЕ СписокГруппы.Найти(СтрокаТаблицы.Данные, "Объект") = Неопределено Тогда

						СтрокиУдалить.Добавить(СтрокаТаблицы);

					КонецЕсли;

				КонецЦикла;

			КонецЕсли;

		ИначеЕсли ОбщегоНазначения.ЭтоДокумент(ОбъектыВыборка.Объект.Метаданные()) Тогда

			Для каждого СтрокаТаблицы Из ТаблицаСсылок Цикл

				Если СтрокаТаблицы.Данные = СтрокаТаблицы.Ссылка Тогда

					Продолжить;	//	отработано выше

				КонецЕсли;

				Попытка

					Если СтрокаТаблицы.Метаданные = Метаданные.РегистрыСведений.ОбъектУчтенВNavision
					ИЛИ  СтрокаТаблицы.Метаданные = Метаданные.РегистрыСведений.СоответствиеДокументовNavision
					Тогда

						НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаТаблицы.Метаданные.ПолноеИмя()).СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.Объект.Установить(ОбъектыВыборка.Объект);
						НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
						НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);

						НаборЗаписей.Записать();

						СтрокиУдалить.Добавить(СтрокаТаблицы);

					ИначеЕсли ТипЗнч(ОбъектыВыборка.Объект) = Тип("ДокументСсылка.ПеремещениеТоваров")
							И ТипЗнч(СтрокаТаблицы.Данные) = Тип("ДокументСсылка.ПрименениеЦенНоменклатуры") Тогда

						ОбъектЛишний = СтрокаТаблицы.Данные.ПолучитьОбъект();

						Если НЕ ОбъектЛишний = Неопределено И ОбъектЛишний.ДокументОснование = ОбъектыВыборка.Объект Тогда

							ОбъектЛишний.ДокументОснование = Неопределено;
							ЗаписатьОбъект(ОбъектЛишний);

						КонецЕсли;

					ИначеЕсли ТипЗнч(ОбъектыВыборка.Объект) = Тип("ДокументСсылка.ЗаказПокупателя")
							И ТипЗнч(СтрокаТаблицы.Данные) = Тип("ДокументСсылка.ЗакрытиеЗаказовПокупателей") Тогда

					//	игнорируем этот вид документа
						СтрокиУдалить.Добавить(СтрокаТаблицы);

					ИначеЕсли СтрокаТаблицы.Данные.ПолучитьОбъект() = Неопределено Тогда

					//	объекта как такового нет.. я не понял ещё причину, но ссылка недействительна
						СтрокиУдалить.Добавить(СтрокаТаблицы);

					Иначе

						а = 22;

					КонецЕсли;

				Исключение

					ЗаписьЖурналаРегистрации("УДАЛЕНИЕ_ОБЪЕКТА", УровеньЖурналаРегистрации.Предупреждение
						, СтрокаТаблицы.Метаданные
						, СтрокаТаблицы.Данные
						, "Очистка связанной ссылки для «" + ОбъектыВыборка.Объект + "»" + Символы.ПС
						+ ОписаниеОшибки()
						, Ложь
					);

				КонецПопытки;

			КонецЦикла;

		КонецЕсли;

		Для каждого СтрокаТаблицы Из СтрокиУдалить Цикл

			ТаблицаСсылок.Удалить(СтрокаТаблицы);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	LNK 09.08.2018 07:02:56
Процедура ОчиститьРегистрациюСопутствующихОбъектов(ЛюбаяСсылка)	Экспорт

	#Если _ Тогда
	ЛюбаяСсылка = Документы.ЗаказПокупателя.ПустаяСсылка();
	#КонецЕсли

	МетаОбъекта = ЛюбаяСсылка.Метаданные();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаРегистраций.Владелец КАК Владелец
	|ИЗ
	|	РегистрСведений.НомераОтсканированныхФайлов.Изменения КАК ТаблицаРегистраций
	|ГДЕ
	|	ТаблицаРегистраций.Узел ССЫЛКА ПланОбмена.ПоМагазину
	|	И ТаблицаРегистраций.Владелец = &ЛюбаяСсылка"
	);
	Запрос.УстановитьПараметр("ЛюбаяСсылка", ЛюбаяСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

		НаборЗаписей = РегистрыСведений.НомераОтсканированныхФайлов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Владелец.Установить(ЛюбаяСсылка);

		ПланыОбмена.УдалитьРегистрациюИзменений(ОбменДаннымиПовтИсп.ПолучитьМассивУзловПланаОбмена("ПоМагазину"), НаборЗаписей);

	КонецЕсли;

	Если ОбщегоНазначения.ЭтоДокумент(МетаОбъекта) Тогда

		Для каждого МетаНабораЗаписей Из МетаОбъекта.Движения Цикл

			Если Метаданные.ПланыОбмена.ПоМагазину.Состав.Содержит(МетаНабораЗаписей) Тогда

				Попытка

					НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаНабораЗаписей.ПолноеИмя()).СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Регистратор.Установить(ЛюбаяСсылка);

					ПланыОбмена.УдалитьРегистрациюИзменений(ОбменДаннымиПовтИсп.ПолучитьМассивУзловПланаОбмена("ПоМагазину"), НаборЗаписей);

				Исключение

					ТекстОшибки = ОписаниеОшибки();
					ЖурналСобытий.Регистрация("УДАЛЕНИЕ_ОБЪЕКТА.Движения"
						, УровеньЖурналаРегистрации.Ошибка
						, МетаОбъекта
						, ЛюбаяСсылка
						,
						, ТекстОшибки
						, СокрЛП(ЛюбаяСсылка)
						, Истина
						, Ложь
					);

				КонецПопытки;

			КонецЕсли;

		КонецЦикла;

		Если Метаданные.РегистрыСведений.ВерсииОбъектов.Измерения.Объект.Тип.СодержитТип(ТипЗнч(ЛюбаяСсылка)) Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаРегистрации.Объект КАК Объект,
			|	ТаблицаРегистрации.НомерВерсии КАК НомерВерсии,
			|	ТаблицаРегистрации.ЭлементСтруктуры КАК ЭлементСтруктуры
			|ИЗ
			|	РегистрСведений.ВерсииОбъектов.Изменения КАК ТаблицаРегистрации
			|ГДЕ
			|	ТаблицаРегистрации.Объект = &ЛюбаяСсылка"
			);
			Запрос.УстановитьПараметр("ЛюбаяСсылка", ЛюбаяСсылка);
			
			ДанныеВыборка = Запрос.Выполнить().Выбрать();
			
			Пока ДанныеВыборка.Следующий() Цикл

				НаборЗаписей = РегистрыСведений.ВерсииОбъектов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(ДанныеВыборка.Объект);
				НаборЗаписей.Отбор.НомерВерсии.Установить(ДанныеВыборка.НомерВерсии);
				НаборЗаписей.Отбор.ЭлементСтруктуры.Установить(ДанныеВыборка.ЭлементСтруктуры);

				ПланыОбмена.УдалитьРегистрациюИзменений(ОбменДаннымиПовтИсп.ПолучитьМассивУзловПланаОбмена("ПоМагазину"), НаборЗаписей);

			КонецЦикла;

		КонецЕсли;

		Если Метаданные.РегистрыСведений.НомераОтсканированныхФайлов.Измерения.Владелец.Тип.СодержитТип(ТипЗнч(ЛюбаяСсылка)) Тогда

			НаборЗаписей = РегистрыСведений.НомераОтсканированныхФайлов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Владелец.Установить(ЛюбаяСсылка);

			ПланыОбмена.УдалитьРегистрациюИзменений(ОбменДаннымиПовтИсп.ПолучитьМассивУзловПланаОбмена("ПоМагазину"), НаборЗаписей);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 27.06.2018 11:44:43
Процедура ПодготовитьКУдалениюЗаказыПокупателей(РезультатЗапроса)

	ЗакрытияВыборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ЗакрытияВыборка.Следующий() Цикл

		НачатьТранзакцию();

		ЗаказыВыборка = ЗакрытияВыборка.Выбрать();

		Попытка

			Если НЕ ЗакрытияВыборка.ЗакрытиеЗаказа = NULL Тогда

			//	Изменения "вторичного" документа регистрируем для отправки - во всех узлах должны быть одни данные.
					ОбъектЗакрытиеЗаказа = ЗакрытияВыборка.ЗакрытиеЗаказа.ПолучитьОбъект();
					ОбъектЗакрытиеЗаказа.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);

			Иначе	ОбъектЗакрытиеЗаказа = Неопределено;

			КонецЕсли;

			Пока ЗаказыВыборка.Следующий() Цикл

				Если НЕ ОбъектЗакрытиеЗаказа = Неопределено Тогда

					СтрокиОчистить = ОбъектЗакрытиеЗаказа.Реестр.НайтиСтроки(Новый Структура("ЗаказПокупателя", ЗаказыВыборка.ЗаказПокупателя));

					Для каждого СтрокаТабличнойЧасти Из СтрокиОчистить Цикл

						ОбъектЗакрытиеЗаказа.Реестр.Удалить(СтрокаТабличнойЧасти);

					КонецЦикла;

				КонецЕсли;

				Если НЕ ЗаказыВыборка.ПометкаУдаления = Истина Тогда

				//	Требуемый к удалению заказ покупателя помечаем к удалению без регистрации в ЦБ.
					ОбъектЗаказ = ЗаказыВыборка.ЗаказПокупателя.ПолучитьОбъект();
					ОбъектЗаказ.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
					ОбъектЗаказ.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);

					ОбъектЗаказ.УстановитьПометкуУдаления(Истина);

				КонецЕсли;

			КонецЦикла;

			Если НЕ ОбъектЗакрытиеЗаказа = Неопределено Тогда

				Если ОбъектЗакрытиеЗаказа.Проведен И НЕ ОбъектЗакрытиеЗаказа.Реестр.Количество() = 0 Тогда

						ОбъектЗакрытиеЗаказа.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);

				Иначе	ОбъектЗакрытиеЗаказа.Записать();

				КонецЕсли;

				Если НЕ ОбъектЗакрытиеЗаказа.ПометкаУдаления И ОбъектЗакрытиеЗаказа.Реестр.Количество() = 0 Тогда

				//	изменения уже записаны - помечаем к удалению
					ОбъектЗакрытиеЗаказа.УстановитьПометкуУдаления(Истина);

				КонецЕсли;

			КонецЕсли;

			ЗафиксироватьТранзакцию();

		Исключение

			ОтменитьТранзакцию();

			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

			ЗаписьЖурналаРегистрации("УдалениеОбъектов.ПодготовкаЗаказовПокупателей", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.ЗакрытиеЗаказовПокупателей, ЗакрытияВыборка.ЗакрытиеЗаказа, ОписаниеОшибки);

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

//	LNK 27.06.2018 14:18:07
Процедура ОчиститьОбъектыДляОбработки(КлючиВыборка)

	НаборЗаписей = РегистрыСведений.ОбъектыДляОбработки.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);

	Пока КлючиВыборка.Следующий() Цикл

		НаборЗаписей.Отбор.Период.Установить(КлючиВыборка.Период);
		НаборЗаписей.Отбор.Магазин.Установить(КлючиВыборка.Магазин);
		НаборЗаписей.Отбор.Индекс.Установить(КлючиВыборка.Индекс);

		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();

	КонецЦикла;

КонецПроцедуры

//	LNK 10.11.2020 06:14:57
Процедура ОбновитьПопыткуОбъектыДляОбработки(КлючиВыборка)

	НаборЗаписей = РегистрыСведений.ОбъектыДляОбработки.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);

	Пока КлючиВыборка.Следующий() Цикл

		НаборЗаписей.Отбор.Период.Установить(КлючиВыборка.Период);
		НаборЗаписей.Отбор.Магазин.Установить(КлючиВыборка.Магазин);
		НаборЗаписей.Отбор.Индекс.Установить(КлючиВыборка.Индекс);

		НаборЗаписей.Прочитать();

		Для каждого ЗаписьНабора Из НаборЗаписей Цикл

			ЗаписьНабора.КоличествоПопыток = ЗаписьНабора.КоличествоПопыток + 1;

		КонецЦикла;

		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();

	КонецЦикла;

КонецПроцедуры

//	LNK 17.11.2020 10:15:14
Процедура ПроверитьОбъектВЦентральнойБазе(СсылкаУдаляемая, СсылкаМешающая, МетаданныеМешающие)

	Если ТипЗнч(МетаданныеМешающие) = Тип("ОбъектМетаданных") И НЕ ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеМешающие) Тогда

		Возврат;

	КонецЕсли;

	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел()
	ИЛИ НЕ РозничныеПродажиСлужебный.РесурсWebRetailДоступен() Тогда

		Возврат;

	КонецЕсли;

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Подключение = СервисыСервер.Подключение("RetailPack", 10);

	RequestData = ОбщегоНазначенияКлиентСервер.СериализоватьJSON(СсылкаМешающая);

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Подключение.PerformAction("GetObjectInfo", RequestData));

	ДанныеОтвета = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	Если ДанныеОтвета.Объект = Неопределено Тогда

	//	Ситуация непонятная и сложноанализируемая.. такого объекта "СсылкаМешающая" в ЦБ нет..
	//	Назначим его к удалению и здесь.
		ВнешниеИсточникиСобытия.УстановитьОбъектДляОбработки("", "УДАЛЕНИЕ_ОБЪЕКТА", СсылкаМешающая,, Истина);

	Иначе

		ОбъектЛокальный = СсылкаМешающая.ПолучитьОбъект();
		ПроверитьСсылки = Истина;

		Если ОбщегоНазначения.ЭтоДокумент(МетаданныеМешающие) Тогда

			ЗаменитьКонкретныеРеквизитыОбъекта(СсылкаУдаляемая, ОбъектЛокальный, ДанныеОтвета);

			Если ТипЗнч(ОбъектЛокальный) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда


			Иначе


			КонецЕсли;

			ПроверитьСсылки = Ложь;

		КонецЕсли;

		Если ПроверитьСсылки Тогда

		//	В итоге проверим, ссылается ли "центральный" объект на нашу удаляемую ссылку?
		//	если в центре НЕ ссылается, то очистим такой реквизит и здесь.
		//	То есть это, как бы, общая проверка.
			ПроверитьСсылкиОбъектаЦентральнойБазы(ОбъектЛокальный, СсылкаУдаляемая, ДанныеОтвета);

		КонецЕсли;

		ЗаписатьОбъект(ОбъектЛокальный);

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьСсылкиОбъектаЦентральнойБазы(ОбъектЛокальный, СсылкаУдаляемая, ДанныеОтвета)

	ИменаРеквизиты = Новый Массив;
	ИменаРеквизиты.Добавить("СтандартныеРеквизиты");
	ИменаРеквизиты.Добавить("Реквизиты");

	Для каждого ИмяРеквизиты Из ИменаРеквизиты Цикл

		ПроверитьРеквизитыКоллекции(ОбъектЛокальный, СсылкаУдаляемая, ОбъектЛокальный.Метаданные()[ИмяРеквизиты], ДанныеОтвета.Атрибуты);

	КонецЦикла;

	Для каждого МетаТабличнаяЧасть Из ОбъектЛокальный.Метаданные().ТабличныеЧасти Цикл

		ИндексСтроки = 0;

		Для каждого СтрокаТабличнойЧасти Из ОбъектЛокальный[МетаТабличнаяЧасть.Имя] Цикл

			ПроверитьРеквизитыКоллекции(СтрокаТабличнойЧасти, СсылкаУдаляемая, МетаТабличнаяЧасть.Реквизиты, ДанныеОтвета.Атрибуты.ТабличныеЧасти[МетаТабличнаяЧасть.Имя], ИндексСтроки);
			ИндексСтроки = ИндексСтроки + 1;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьРеквизитыКоллекции(Коллекция, СсылкаУдаляемая, МетаРеквизиты, ДанныеЦентра, ИндексСтроки = Неопределено)

	ПереданаТаблицаЗначений = ТипЗнч(ДанныеЦентра) = Тип("ТаблицаЗначений");

	Для каждого МетаРеквизит Из МетаРеквизиты Цикл

		Если Коллекция[МетаРеквизит.Имя] = СсылкаУдаляемая Тогда

		//	в реквизите содержится интересующее нас значение.. теперь проверим,
		//	а какое заполнение этот реквизит имеет в ЦБ?
		//	(при этом нелишним будет проверить, а есть ли такой реквизит в объекте ЦБ? проблема маловероятна.. но всё же)

			ЕстьТакойРеквизит = ?(ПереданаТаблицаЗначений
				, НЕ ДанныеЦентра.Колонки.Найти(МетаРеквизит.Имя) = Неопределено
				, ДанныеЦентра.Свойство(МетаРеквизит.Имя));

			Если ЕстьТакойРеквизит = Истина Тогда

				Если ПереданаТаблицаЗначений Тогда

						КоллекцияДанных = ?(ИндексСтроки < ДанныеЦентра.Количество(), ДанныеЦентра[ИндексСтроки], Неопределено);

				Иначе	КоллекцияДанных = ДанныеЦентра;

				КонецЕсли;

				Если НЕ КоллекцияДанных = Неопределено Тогда

					Если КоллекцияДанных[МетаРеквизит.Имя] = Неопределено
					ИЛИ НЕ КоллекцияДанных[МетаРеквизит.Имя].Ссылка = СсылкаУдаляемая Тогда

					//	нет, в ЦБ какое-то другое значение.. неважно какое. Здесь очищаем.
						Коллекция[МетаРеквизит.Имя] = Неопределено;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ЗаменитьКонкретныеРеквизитыОбъекта(СсылкаУдаляемая, ОбъектЛокальный, ДанныеЦентра);

	ТипСсылки = ТипЗнч(СсылкаУдаляемая);

	Если ТипСсылки = Тип("СправочникСсылка.Контрагенты") Тогда

		СписокПолей = Новый Массив;
		СписокПолей.Добавить("Контрагент");
		СписокПолей.Добавить("ВладелецДисконтнойКарты");

		Для каждого ИмяПоля Из СписокПолей Цикл

			Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ОбъектЛокальный, ИмяПоля) Тогда

				Если НЕ ОбъектЛокальный[ИмяПоля] = ДанныеЦентра.Объект[ИмяПоля] Тогда

					ОбъектЛокальный[ИмяПоля] = ДанныеЦентра.Объект[ИмяПоля];

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	ИначеЕсли ЛОЖЬ И ТипСсылки = Тип("СправочникСсылка.Номенклатура") ИЛИ ТипСсылки = Тип("СправочникСсылка.УпаковкиНоменклатуры") Тогда

		Для каждого МетаТабличнаяЧасть Из ОбъектЛокальный.Метаданные().ТабличныеЧасти Цикл

			СписокПолей = Новый Массив;

			Для каждого МетаРеквизит Из МетаТабличнаяЧасть.Реквизиты Цикл

				Если МетаРеквизит.Тип.СодержитТип(ТипСсылки) Тогда

					СписокПолей.Добавить(МетаРеквизит.Имя);

				КонецЕсли;

			КонецЦикла;

			ИндексСтроки = 0;

			Для каждого СтрокаТабличнойЧасти Из ОбъектЛокальный[МетаТабличнаяЧасть.Имя] Цикл

				Если ИндексСтроки >= ДанныеЦентра.Объект[МетаТабличнаяЧасть.Имя].Количество() Тогда

					Прервать;

				КонецЕсли;

				Для каждого ИмяПоля Из СписокПолей Цикл

					Если СтрокаТабличнойЧасти[ИмяПоля] = СсылкаУдаляемая Тогда

						СтрокаТабличнойЧасти[ИмяПоля] = ДанныеЦентра.Объект[МетаТабличнаяЧасть.Имя][ИндексСтроки][ИмяПоля];

					КонецЕсли;

				КонецЦикла;

				ИндексСтроки = ИндексСтроки + 1;

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьОбъект(ОбъектДанных)

	Если ОбъектДанных.Модифицированность() Тогда

		ОбъектДанных.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		ОбъектДанных.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);

		ОбъектДанных.Записать();

	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область РегламентСпискиОбзвона

Процедура ПоддержкаСписокОбзвона() 
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Магазины.Ссылка КАК Магазин
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|ГДЕ
		|	Магазины.Организация = &Организация
		|	И Магазины.Блокирован = ЛОЖЬ
		|	И Магазины.ВведенВЭксплуатацию = ИСТИНА";
	
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику().ОсновнаяОрганизация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	КолКлиентов = 0;	
	Магазин = ВыборкаДетальныеЗаписи.Магазин;
	
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПродажиПоЧекам.ВладелецДисконтнойКарты) КАК КолКлиентов
	//	|ИЗ
	//	|	РегистрНакопления.ПродажиПоЧекам КАК ПродажиПоЧекам
	//	|ГДЕ
	//	|	ПродажиПоЧекам.Период МЕЖДУ &ПериодС И &ПериодПо
	//	|	И НЕ ПродажиПоЧекам.ВладелецДисконтнойКарты В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	//	|	И ЕСТЬNULL(ПродажиПоЧекам.Регистратор.ЗаказПокупателя, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	//	|	И ПродажиПоЧекам.Магазин = &Магазин";
	//
	//Запрос.УстановитьПараметр("ПериодПо", НачалоДня(ТекущаяДата()));
	//Запрос.УстановитьПараметр("ПериодС", НачалоДня(ТекущаяДата())-7*24*60*60);
	//Запрос.УстановитьПараметр("Магазин", Магазин);
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Выборка2 = РезультатЗапроса.Выбрать();
	//Список = Новый СписокЗначений;
	//Пока Выборка2.Следующий() Цикл
	//	КолКлиентов = Цел(Выборка2.КолКлиентов/20);
	//КонецЦикла;
	

	
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	КонтрагентыСегмента.Контрагент КАК Контрагент
	//	|ИЗ
	//	|	РегистрСведений.КонтрагентыСегмента КАК КонтрагентыСегмента
	//	|ГДЕ
	//	|	КонтрагентыСегмента.Период МЕЖДУ &ПериодС И &ПериодПо
	//	|	И КонтрагентыСегмента.Магазин = &Магазин
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	КонтрагентыСегмента.Контрагент";
	//
	//Запрос.УстановитьПараметр("Магазин", Магазин);
	//Запрос.УстановитьПараметр("ПериодПо", КонецДня(ТекущаяДата()));
	//Запрос.УстановитьПараметр("ПериодС", НачалоДня(ТекущаяДата()) - 180*24*60*60);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//КонецЦикла;
	//

		//|ВЫБРАТЬ ПЕРВЫЕ "+ КолКлиентов +" 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПродажиПоЧекам.ВладелецДисконтнойКарты КАК Клиент,
		|	МАКСИМУМ(ПродажиПоЧекам.Период) КАК Период
		|ПОМЕСТИТЬ ТабКлиенты
		|ИЗ
		|	РегистрНакопления.ПродажиПоЧекам КАК ПродажиПоЧекам
		|ГДЕ
		|	ПродажиПоЧекам.Период МЕЖДУ &ПериодС И &ПериодПо
		|	И ПродажиПоЧекам.Магазин = &Магазин
		|	И НЕ ПродажиПоЧекам.ВладелецДисконтнойКарты В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|	И ЕСТЬNULL(ПродажиПоЧекам.Регистратор.ЗаказПокупателя, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|	И НЕ ПродажиПоЧекам.ВладелецДисконтнойКарты В
		|				(ВЫБРАТЬ
		|					КонтрагентыСегмента.Контрагент КАК Контрагент
		|				ИЗ
		|					РегистрСведений.КонтрагентыСегмента КАК КонтрагентыСегмента
		|				ГДЕ
		|					КонтрагентыСегмента.Период МЕЖДУ &СегментПериодС И &СегментПериодПо
		|				и КонтрагентыСегмента.Сегмент <> ""ОбзвонКлиентов.УслугиПарикмахерской""
		|				СГРУППИРОВАТЬ ПО
		|					КонтрагентыСегмента.Контрагент)
		|	И НЕ ПродажиПоЧекам.ВладелецДисконтнойКарты В
		|				(ВЫБРАТЬ
		|					КонтрагентыСегмента.Контрагент КАК Контрагент
		|				ИЗ
		|					РегистрСведений.ЧерныйСписокДляNPS КАК КонтрагентыСегмента
		|				)
		
		|
		|СГРУППИРОВАТЬ ПО
		|	ПродажиПоЧекам.ВладелецДисконтнойКарты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Клиент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		//|ВЫБРАТЬ ПЕРВЫЕ "+ КолКлиентов +"
		|	ТабКлиенты.Клиент КАК Клиент,
		|	ТабКлиенты.Период КАК ДатаПродажи
		|ИЗ
		|	ТабКлиенты КАК ТабКлиенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|		ПО ТабКлиенты.Клиент = КонтрагентыКонтактнаяИнформация.Ссылка
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Вид = &Вид
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТабКлиенты";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	Запрос.УстановитьПараметр("ПериодПо", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ПериодС", НачалоДня(ТекущаяДата())-24*60*60);
	Запрос.УстановитьПараметр("СегментПериодПо", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("СегментПериодС", НачалоДня(ТекущаяДата()) - 90*24*60*60);
	Запрос.УстановитьПараметр("Магазин", Магазин);  	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка3 = РезультатЗапроса.Выбрать();
	
	Пока Выборка3.Следующий() Цикл  		
		НаборЗаписей = РегистрыСведений.КонтрагентыСегмента.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Период.Установить(НачалоДня(ТекущаяДата())); 		
		НаборЗаписей.Отбор.Контрагент.Установить(Выборка3.Клиент);
		НаборЗаписей.Отбор.Магазин.Установить(Магазин); 
		НаборЗаписей.Отбор.Сегмент.Установить("ОбзвонКлиентов.Офлайн"); 
		НовЗапись = НаборЗаписей.Добавить();
		НовЗапись.Контрагент = Выборка3.Клиент;
		НовЗапись.Магазин = Магазин;
		НовЗапись.Сегмент = "ОбзвонКлиентов.Офлайн";
		НовЗапись.Период = НачалоДня(ТекущаяДата()); 
		НовЗапись.ДатаПродажи = Выборка3.ДатаПродажи; 		
		НаборЗаписей.Записать(Истина);		
	КонецЦикла;
	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Магазины.Ссылка КАК Магазин
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|ГДЕ
		|	Магазины.Организация = &Организация
		|	И Магазины.Блокирован = ЛОЖЬ
		|	И Магазины.ВведенВЭксплуатацию = ИСТИНА";
	
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику().ОсновнаяОрганизация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка4 = РезультатЗапроса.Выбрать();
	
	Пока Выборка4.Следующий() Цикл

	Магазин = Выборка4.Магазин;
	
	//КолКлиентов = 0;	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПродажиПоЧекам.ВладелецДисконтнойКарты) КАК КолКлиентов
	//	|ИЗ
	//	|	РегистрНакопления.ПродажиПоЧекам КАК ПродажиПоЧекам
	//	|ГДЕ
	//	|	ПродажиПоЧекам.Период МЕЖДУ &ПериодС И &ПериодПо
	//	|	И НЕ ПродажиПоЧекам.ВладелецДисконтнойКарты В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	//	|	И НЕ ЕСТЬNULL(ПродажиПоЧекам.Регистратор.ЗаказПокупателя, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	//	|	И ПродажиПоЧекам.Магазин = &Магазин";
	//
	//Запрос.УстановитьПараметр("ПериодПо", НачалоДня(ТекущаяДата()));
	//Запрос.УстановитьПараметр("ПериодС", НачалоДня(ТекущаяДата())-7*24*60*60);
	//Запрос.УстановитьПараметр("Магазин", Магазин);
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Выборка5 = РезультатЗапроса.Выбрать();
	//Список = Новый СписокЗначений;
	//Пока Выборка5.Следующий() Цикл
	//	КолКлиентов = Цел(Выборка5.КолКлиентов/20);
	//КонецЦикла;
	//
		//|ВЫБРАТЬ ПЕРВЫЕ "+ КолКлиентов +" 

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПродажиПоЧекам.ВладелецДисконтнойКарты КАК Клиент,
		|	МАКСИМУМ(ПродажиПоЧекам.Период) КАК Период
		|ПОМЕСТИТЬ ТабКлиенты
		|ИЗ
		|	РегистрНакопления.ПродажиПоЧекам КАК ПродажиПоЧекам
		|ГДЕ
		|	ПродажиПоЧекам.Период МЕЖДУ &ПериодС И &ПериодПо
		|	И ПродажиПоЧекам.Магазин = &Магазин
		|	И НЕ ПродажиПоЧекам.ВладелецДисконтнойКарты В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|	И НЕ ЕСТЬNULL(ПродажиПоЧекам.Регистратор.ЗаказПокупателя, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|	И НЕ ПродажиПоЧекам.ВладелецДисконтнойКарты В
		|				(ВЫБРАТЬ
		|					КонтрагентыСегмента.Контрагент КАК Контрагент
		|				ИЗ
		|					РегистрСведений.КонтрагентыСегмента КАК КонтрагентыСегмента
		|				ГДЕ
		|					КонтрагентыСегмента.Период МЕЖДУ &СегментПериодС И &СегментПериодПо
		|					И КонтрагентыСегмента.Магазин = &Магазин
		|				и КонтрагентыСегмента.Сегмент <> ""ОбзвонКлиентов.УслугиПарикмахерской""
		|				СГРУППИРОВАТЬ ПО
		|					КонтрагентыСегмента.Контрагент)
		|	И НЕ ПродажиПоЧекам.ВладелецДисконтнойКарты В
		|				(ВЫБРАТЬ
		|					КонтрагентыСегмента.Контрагент КАК Контрагент
		|				ИЗ
		|					РегистрСведений.ЧерныйСписокДляNPS КАК КонтрагентыСегмента
		|				)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПродажиПоЧекам.ВладелецДисконтнойКарты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Клиент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабКлиенты.Клиент КАК Клиент,
		|	ТабКлиенты.Период КАК ДатаПродажи
		|ИЗ
		|	ТабКлиенты КАК ТабКлиенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|		ПО ТабКлиенты.Клиент = КонтрагентыКонтактнаяИнформация.Ссылка
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Вид = &Вид
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТабКлиенты";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	Запрос.УстановитьПараметр("ПериодПо", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ПериодС", НачалоДня(ТекущаяДата())-24*60*60);
	Запрос.УстановитьПараметр("СегментПериодПо", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("СегментПериодС", НачалоДня(ТекущаяДата()) - 90*24*60*60);
	Запрос.УстановитьПараметр("Магазин", Магазин);  	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка6 = РезультатЗапроса.Выбрать();
	
	Пока Выборка6.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.КонтрагентыСегмента.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Период.Установить(НачалоДня(ТекущаяДата())); 		
		НаборЗаписей.Отбор.Контрагент.Установить(Выборка6.Клиент);
		НаборЗаписей.Отбор.Магазин.Установить(Магазин); 
		НаборЗаписей.Отбор.Сегмент.Установить("ОбзвонКлиентов.Онлайн"); 
		НовЗапись = НаборЗаписей.Добавить();
		НовЗапись.Контрагент = Выборка6.Клиент;
		НовЗапись.Магазин = Магазин;
		НовЗапись.Сегмент = "ОбзвонКлиентов.Онлайн";
		НовЗапись.Период = НачалоДня(ТекущаяДата()); 
		НовЗапись.ДатаПродажи = Выборка6.ДатаПродажи; 
		НаборЗаписей.Записать(Истина);		
	КонецЦикла;
	
	КонецЦикла;


КонецПроцедуры


Процедура ПоддержкаСписокОбзвонаПарикмахерские() 
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Магазины.Ссылка КАК Магазин
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|ГДЕ
		|	Магазины.Организация = &Организация
		|	И Магазины.Блокирован = ЛОЖЬ
		|	И Магазины.ВведенВЭксплуатацию = ИСТИНА";
	
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику().ОсновнаяОрганизация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		КолКлиентов = 0;	
		Магазин = ВыборкаДетальныеЗаписи.Магазин;
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПродажиПоЧекам.ВладелецДисконтнойКарты КАК Клиент,
			|	МАКСИМУМ(ПродажиПоЧекам.Период) КАК Период
			|ПОМЕСТИТЬ ТабКлиенты
			|ИЗ
			|	РегистрНакопления.ПродажиПоЧекам КАК ПродажиПоЧекам
			|ГДЕ
			|	ПродажиПоЧекам.Период МЕЖДУ &ПериодС И &ПериодПо
			|	И ПродажиПоЧекам.Магазин = &Магазин
			|	И НЕ ПродажиПоЧекам.ВладелецДисконтнойКарты В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
			|	И ЕСТЬNULL(ПродажиПоЧекам.Регистратор.ЗаказПокупателя, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
			|	И НЕ ПродажиПоЧекам.ВладелецДисконтнойКарты В
			|				(ВЫБРАТЬ
			|					КонтрагентыСегмента.Контрагент КАК Контрагент
			|				ИЗ
			|					РегистрСведений.КонтрагентыСегмента КАК КонтрагентыСегмента
			|				ГДЕ
			|					КонтрагентыСегмента.Период МЕЖДУ &СегментПериодС И &СегментПериодПо
			|					и КонтрагентыСегмента.Сегмент = ""ОбзвонКлиентов.УслугиПарикмахерской""
			|				СГРУППИРОВАТЬ ПО
			|					КонтрагентыСегмента.Контрагент)
			|	И НЕ ПродажиПоЧекам.ВладелецДисконтнойКарты В
			|				(ВЫБРАТЬ
			|					КонтрагентыСегмента.Контрагент КАК Контрагент
			|				ИЗ
			|					РегистрСведений.ЧерныйСписокДляNPS КАК КонтрагентыСегмента)
			|	И ПродажиПоЧекам.Номенклатура.IDN = ""7010400""
			|
			|СГРУППИРОВАТЬ ПО
			|	ПродажиПоЧекам.ВладелецДисконтнойКарты
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Клиент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТабКлиенты.Клиент КАК Клиент,
			|	ТабКлиенты.Период КАК ДатаПродажи
			|ИЗ
			|	ТабКлиенты КАК ТабКлиенты
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
			|		ПО ТабКлиенты.Клиент = КонтрагентыКонтактнаяИнформация.Ссылка
			|ГДЕ
			|	КонтрагентыКонтактнаяИнформация.Вид = &Вид
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ТабКлиенты";
		
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
		Запрос.УстановитьПараметр("ПериодПо", НачалоДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("ПериодС", НачалоДня(ТекущаяДата())-24*60*60);
		Запрос.УстановитьПараметр("СегментПериодПо", КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("СегментПериодС", НачалоДня(ТекущаяДата()) - 90*24*60*60);
		Запрос.УстановитьПараметр("Магазин", Магазин);  	
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка3 = РезультатЗапроса.Выбрать();
		
		Пока Выборка3.Следующий() Цикл  		
			НаборЗаписей = РегистрыСведений.КонтрагентыСегмента.СоздатьНаборЗаписей(); 
			НаборЗаписей.Отбор.Период.Установить(НачалоДня(ТекущаяДата())); 		
			НаборЗаписей.Отбор.Контрагент.Установить(Выборка3.Клиент);
			НаборЗаписей.Отбор.Магазин.Установить(Магазин); 
			НаборЗаписей.Отбор.Сегмент.Установить("ОбзвонКлиентов.УслугиПарикмахерской"); 
			НовЗапись = НаборЗаписей.Добавить();
			НовЗапись.Контрагент = Выборка3.Клиент;
			НовЗапись.Магазин = Магазин;
			НовЗапись.Сегмент = "ОбзвонКлиентов.УслугиПарикмахерской";
			НовЗапись.Период = НачалоДня(ТекущаяДата()); 
			НовЗапись.ДатаПродажи = Выборка3.ДатаПродажи; 		
			НаборЗаписей.Записать(Истина);		
		КонецЦикла;
		
	КонецЦикла;
	

КонецПроцедуры

#КонецОбласти


