#Область ПрограммныйИнтерфейс

// Отправляет SMS через настроенного поставщика услуги, возвращает идентификатор сообщения.
//
// Параметры:
//  НомераПолучателей  - Массив - массив строк номеров получателей в формате +7ХХХХХХХХХХ;
//  Текст              - Строка - текст сообщения, максимальная длина у операторов может быть разной;
//  ИмяОтправителя     - Строка - имя отправителя, которое будет отображаться вместо номера у получателей.
//  ПеревестиВТранслит - Булево - Истина, если требуется переводить текст сообщения в транслит перед отправкой.
//
// Возвращаемое значение:
//  Структура - результат отправки:
//    * ОтправленныеСообщения - Массив - массив структур:
//      ** НомерПолучателя - Строка - номер получателя SMS.
//      ** ИдентификаторСообщения - Строка - идентификатор SMS, присвоенный провайдером для отслеживания доставки.
//    * ОписаниеОшибки - Строка - пользовательское представление ошибки, если пустая строка, то ошибки нет.
//
Функция ОтправитьSMS(НомераПолучателей, Знач Текст, ИмяОтправителя = Неопределено, ПеревестиВТранслит = Ложь)	Экспорт

	Результат = Новый Структура("ОтправленныеСообщения, ОписаниеОшибки, Идентификатор, Ошибка, КодОтвета", Новый Массив, "", "", Ложь, 0);
	
	Если ПеревестиВТранслит Тогда

		Текст = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(Текст);

	КонецЕсли;

	Если НЕ НастройкаОтправкиSMSВыполнена() Тогда

		Результат.Ошибка = Истина;
		Результат.ОписаниеОшибки = НСтр("ru = 'Неверно заданы настройки провайдера для отправки SMS.'");

	Иначе

		НастройкиОтправкиSMS = ОтправкаSMSПовтИсп.НастройкиОтправкиSMS();

		Если ИмяОтправителя = Неопределено Тогда

			ИмяОтправителя = НастройкиОтправкиSMS.ИмяОтправителя;

		КонецЕсли;

		Если НастройкиОтправкиSMS.Провайдер = Перечисления.ПровайдерыSMS.GMSU Тогда

			Результат = ОтправкаSMSЧерезGMSU.ОтправитьSMS(НомераПолучателей
					, Текст
					, ИмяОтправителя
					, НастройкиОтправкиSMS.Логин
					, НастройкиОтправкиSMS.Пароль
					, НастройкиОтправкиSMS.Таймаут
			);

		ИначеЕсли НастройкиОтправкиSMS.Провайдер = Перечисления.ПровайдерыSMS.Infobip Тогда

			Результат = ОтправкаSMSЧерезInfobip.ОтправитьSMS(НомераПолучателей
					, Текст
					, ИмяОтправителя
					, НастройкиОтправкиSMS.Логин
					, НастройкиОтправкиSMS.Пароль
					, НастройкиОтправкиSMS.Таймаут
			);

		Иначе

			Результат.Ошибка = Истина;
			Результат.ОписаниеОшибки = "Нет определения провайдера либо не описан обработчик провайдера!";

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Проверяет правильность сохраненных настроек отправки SMS.
//
// Возвращаемое значение:
//  Булево - Истина, если отправка SMS уже настроена.
Функция НастройкаОтправкиSMSВыполнена() Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Результат = Истина;

	НастройкиОтправкиSMS = ОтправкаSMSПовтИсп.НастройкиОтправкиSMS();
	Провайдер = НастройкиОтправкиSMS.Провайдер;

	Если ЗначениеЗаполнено(НастройкиОтправкиSMS.Провайдер) Тогда

		Отказ = Ложь;
		ОтправкаSMSПереопределяемый.ПриПроверкеНастроекОтправкиSMS(НастройкиОтправкиSMS, Отказ);
		Результат = НЕ Отказ;

	Иначе

		Результат = Ложь;

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьНомерТелефона(Знач НомерТелефона, Безусловно = Ложь)	Экспорт

	Если НЕ ПустаяСтрока(НомерТелефона) Тогда

		НастройкиОтправкиSMS = ОтправкаSMSПовтИсп.НастройкиОтправкиSMS();

		Если Безусловно = Истина ИЛИ НастройкиОтправкиSMS.Провайдер = Перечисления.ПровайдерыSMS.GMSU Тогда

			НомерТелефона = ОтправкаSMSЧерезGMSU.ПодготовитьНомерТелефона(НомерТелефона);

		КонецЕсли;

	КонецЕсли;

	Возврат НомерТелефона;

КонецФункции // ПодготовитьНомерТелефона()

#КонецОбласти

