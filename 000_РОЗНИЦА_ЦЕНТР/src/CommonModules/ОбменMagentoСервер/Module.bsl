#Область ЗаполнениеСтруктурыДанныхКонтрагентаПоВнешнимДанным

Функция ИнициализацияДанныхКонтрагента(ДанныеКонтрагента = Неопределено, НомерТелефона = "")	Экспорт

	Если ДанныеКонтрагента = Неопределено Тогда

		ДанныеКонтрагента = Новый Структура;

	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("КОДЫ"	, Новый Структура("IDC, IDMGT, EDRPOU", "", "", ""), ДанныеКонтрагента);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("IDC"	, "", ДанныеКонтрагента.КОДЫ);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("IDMGT"	, "", ДанныеКонтрагента.КОДЫ);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("EDRPOU"	, "", ДанныеКонтрагента.КОДЫ);

	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("КОНТАКТЫ"	  , Новый Структура("НомерТелефона, email", "", "", ""), ДанныеКонтрагента);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("НомерТелефона", НомерТелефона, ДанныеКонтрагента.КОНТАКТЫ);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Email"		  , "", ДанныеКонтрагента.КОНТАКТЫ);

	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("КодКарты"	 , "", ДанныеКонтрагента);

	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Фамилия"	 , "", ДанныеКонтрагента);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Имя"		 , "", ДанныеКонтрагента);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Отчество"	 , "", ДанныеКонтрагента);

	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Блокирован"	 , Ложь, ДанныеКонтрагента);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Пол"		 , Перечисления.ПолФизическогоЛица.ПустаяСсылка(), ДанныеКонтрагента);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("ДатаРождения", '00010101', ДанныеКонтрагента);

	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Дети"	 , Новый Массив, ДанныеКонтрагента);

	Возврат ДанныеКонтрагента;

КонецФункции

Функция ЗаполнитьСтруктуруПоВнешнимДанным(ДанныеКонтрагента, ДанныеВнешние)	Экспорт

	ДанныеКонтрагента = ОбменMagentoСервер.ИнициализацияДанныхКонтрагента(ДанныеКонтрагента);

	УстановитьЗначениеПоТипу(ДанныеКонтрагента.КОДЫ.IDC   , "IDC", Тип("Строка"), ДанныеВнешние);
	УстановитьЗначениеПоТипу(ДанныеКонтрагента.КОДЫ.IDMGT , "IDMGT", Тип("Строка"), ДанныеВнешние);
	УстановитьЗначениеПоТипу(ДанныеКонтрагента.КОДЫ.EDRPOU, "EDRPOU", Тип("Строка"), ДанныеВнешние);

	УстановитьЗначениеПоТипу(ДанныеКонтрагента.КОНТАКТЫ.НомерТелефона, "phoneNumber", "НомерТелефона", ДанныеВнешние);
	УстановитьЗначениеПоТипу(ДанныеКонтрагента.КОНТАКТЫ.Email        , "email"      , Тип("Строка"), ДанныеВнешние);

	УстановитьЗначениеПоТипу(ДанныеКонтрагента.КодКарты       , "cardNumber"        , Тип("Строка"), ДанныеВнешние);

	УстановитьЗначениеПоТипу(ДанныеКонтрагента.Имя            , "First_Name"        , Тип("Строка"), ДанныеВнешние);
	УстановитьЗначениеПоТипу(ДанныеКонтрагента.Отчество       , "Middle_Name"       , Тип("Строка"), ДанныеВнешние);
	УстановитьЗначениеПоТипу(ДанныеКонтрагента.Фамилия        , "Last_Name"         , Тип("Строка"), ДанныеВнешние);

	УстановитьЗначениеПоТипу(ДанныеКонтрагента.Блокирован     , "blocked"           , Тип("Булево"), ДанныеВнешние);
	УстановитьЗначениеПоТипу(ДанныеКонтрагента.ДатаРождения   , "Date_Born"         , Тип("Дата"), ДанныеВнешние);
	УстановитьЗначениеПоТипу(ДанныеКонтрагента.Пол            , "gender"            , Тип("ПеречислениеСсылка.ПолФизическогоЛица"), ДанныеВнешние);

	Если ДанныеВнешние.Свойство("childs") Тогда

		Для каждого СоставВнешний Из ДанныеВнешние.childs Цикл

			ЭлементДанных = ОписаниеВнешнихДанных("Дети");

			УстановитьЗначениеПоТипу(ЭлементДанных.Имя, "Child_Name"  , Тип("Строка"), СоставВнешний);
			УстановитьЗначениеПоТипу(ЭлементДанных.Пол, "Child_Gender", Тип("ПеречислениеСсылка.ПолФизическогоЛица"), СоставВнешний);
			УстановитьЗначениеПоТипу(ЭлементДанных.ДатаРождения, "Date_Child_Born", Тип("Дата"), СоставВнешний);

			ДанныеКонтрагента.Дети.Добавить(ЭлементДанных);

		КонецЦикла;

	КонецЕсли;

	Возврат ДанныеКонтрагента;

КонецФункции

Функция ОписаниеВнешнихДанных(ТипДанных)	Экспорт

	ОписаниеДанных = Новый Структура;

	Если ТипДанных = "Карты" Тогда

		ОписаниеДанных.Вставить("КодКарты"    , "");
		ОписаниеДанных.Вставить("IDC_Карта"   , "");
		ОписаниеДанных.Вставить("IDC_Магазин" , "");
		ОписаниеДанных.Вставить("Блокирован"  , Ложь);
		ОписаниеДанных.Вставить("ДатаОткрытия", '00010101');
		ОписаниеДанных.Вставить("ДатаСоздания", '00010101');
		ОписаниеДанных.Вставить("ДатаЗакрытия", '00010101');


	ИначеЕсли ТипДанных = "Дети" Тогда

		ОписаниеДанных.Вставить("Имя"         , "");
		ОписаниеДанных.Вставить("Пол"         , Перечисления.ПолФизическогоЛица.ПустаяСсылка());
		ОписаниеДанных.Вставить("ДатаРождения", '00010101');

	КонецЕсли;

	Возврат ОписаниеДанных;

КонецФункции

#КонецОбласти

#Область ЗаполнениеОбразаДокументаПоВнешнимДанным

Функция ПолучитьДокументMagento(ДанныеВнешние, ИмяОбъекта, РежимЭмуляции, УчетнаяПолитика, СоставОшибки)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

//	Получим определяющие реквизиты поиска документа.
	Номер = ЗначениеПоТипу(ДанныеВнешние, "Number", Тип("Строка"));
	Дата  = ЗначениеПоТипу(ДанныеВнешние, "Date", Тип("Дата"));
	//Перевод даты к нашему часовому поясу
	Дата = МестноеВремя(Дата, ЧасовойПояс());

	Если НЕ РежимЭмуляции = Истина И (Дата = НачалоДня(Дата) ИЛИ НачалоДня(Дата) = '00010101') Тогда

		Если НачалоДня(Дата) = '00010101' Тогда

				Дата = ТекущаяДата();

		Иначе	Дата = Дата + (ТекущаяДата() - НачалоДня(ТекущаяДата()));

		КонецЕсли;

	КонецЕсли;

	Магазин		  = Справочники.Магазины.ПолучитьМагазин(ЗначениеПоТипу(ДанныеВнешние, "Depot", Тип("Строка")), УчетнаяПолитика.ИнтернетМагазин);
	Организация	  = Справочники.Организации.ПолучитьОрганизацию(ЗначениеПоТипу(ДанныеВнешние, "Сompany", Тип("Строка")), Истина);

	ДокументОбъект = ПолучитьДокументОбъект(Номер, Дата, Магазин, ИмяОбъекта, РежимЭмуляции);
	#Если _ Тогда
	ДокументОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
	#КонецЕсли

	Если РежимЭмуляции = Истина Тогда	//	в этом случае - структура!

		Если НЕ ДокументОбъект.Свойство("КоррекцияНачисленийПоПродаже") Тогда

			ДокументОбъект.Вставить("КоррекцияНачисленийПоПродаже", Ложь);

		КонецЕсли;

	//	Добавим дополнительную "интерфейсную" колонку.. она только на формах, в объекте её нет.
		ДокументОбъект.Товары.Колонки.Добавить("СуммаВсего", Новый ОписаниеТипов("Число"));

	КонецЕсли;

	ЗаполнитьТабличныеЧасти = НЕ ДокументОбъект.КоррекцияНачисленийПоПродаже;

	Если ИмяОбъекта = "ЗаказПокупателя" Тогда	//	специфика "Документы.ЗаказПокупателя"

		Если ДокументОбъект.УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.Розница Тогда
			
			//	Блок "Оплата" ("Payment")
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("СтатусОплаты"			, ?(JSON.ЧислоКакБулево(ЗначениеПоТипу(ДанныеВнешние.Payment, "Status", Тип("Число"))), Перечисления.СтатусОплаты.Оплачен, Перечисления.СтатусОплаты.НеОплачен), ДокументОбъект, Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("СуммаОплаты"				, ЗначениеПоТипу(ДанныеВнешние.Payment, "Summa", Тип("Число")), ДокументОбъект, Ложь);
		//	.. проблемные
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ТипОплаты"				, ОбменMagentoСлужебный.ТипОплатыИнтернетМагазина(ЗначениеПоТипу(ДанныеВнешние.Payment, "Type", Тип("Строка")), СоставОшибки), ДокументОбъект, Истина);

		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("УчитыватьНДС"  , Истина, ДокументОбъект, Ложь);
			//ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("УчетнаяСистема", Перечисления.УчетныеСистемыКомпании.Magento, ДокументОбъект, Истина);
	
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("НомерЗаказаОсновной"		, ЗначениеПоТипу(ДанныеВнешние, "MainOrder", Тип("Строка")), ДокументОбъект, Истина);
			//ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ДатаРезервированияЗаказа", ЗначениеПоТипу(ДанныеВнешние, "DateReserve", Тип("Дата")), ДокументОбъект, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ДатаРезервированияЗаказа", МестноеВремя(ЗначениеПоТипу(ДанныеВнешние, "DateReserve", Тип("Дата")), ЧасовойПояс()), ДокументОбъект, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("МагазинПолучатель"		, Справочники.Магазины.ПолучитьМагазин(ЗначениеПоТипу(ДанныеВнешние, "DepotReceiver", Тип("Строка")), УчетнаяПолитика.ИнтернетМагазин), ДокументОбъект, Истина);
	
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Комментарий"				, ЗначениеПоТипу(ДанныеВнешние, "ClientComment", Тип("Строка")), ДокументОбъект, Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("НеПерезванивать"			, ЗначениеПоТипу(ДанныеВнешние, "DontCall", Тип("Число")), ДокументОбъект, Ложь);
	
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Склад"					, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Магазин, "СкладПродажи",, Ложь), ДокументОбъект, Ложь);
	
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ДатаПродажиЖелаемая"	 	, ДокументОбъект.Дата, ДокументОбъект, Истина);
	
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("СтатусИМ"				, ОбменMagentoСлужебный.СтатусИнтернетМагазина(ЗначениеПоТипу(ДанныеВнешние, "OrderStatus", Тип("Строка")), СоставОшибки), ДокументОбъект, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Статус"					, ОбменMagentoСлужебный.СтатусЗаказаПокупателя(ДокументОбъект.СтатусИМ, СоставОшибки), ДокументОбъект, Истина);
		
		//	Блок "Доставка" ("Delivery")
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("СуммаДоставкиОплачена"	, JSON.ЧислоКакБулево(ЗначениеПоТипу(ДанныеВнешние.Delivery, "AmountPaidClient", Тип("Число"))), ДокументОбъект, Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("СуммаДоставки"		 	, ЗначениеПоТипу(ДанныеВнешние.Delivery, "SumClient"  , Тип("Число")), ДокументОбъект, Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("СуммаДоставкиОператор"	, ЗначениеПоТипу(ДанныеВнешние.Delivery, "SumOperator", Тип("Число")), ДокументОбъект, Ложь);
		//	.. проблемные
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ТипДоставки"	 			, ОбменMagentoСлужебный.ТипДоставкиИнтернетМагазина(ЗначениеПоТипу(ДанныеВнешние.Delivery, "Type", Тип("Строка")), СоставОшибки), ДокументОбъект, Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ОператорДоставки"	 	, ОбменMagentoСлужебный.ОператорыДоставкиИнтернетМагазина(ЗначениеПоТипу(ДанныеВнешние.Delivery, "Type", Тип("Строка")), СоставОшибки), ДокументОбъект, Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ДоставкаНаАдрес"	 		, ОбменMagentoСлужебный.ДоставкаНаАдресИнтернетМагазина(ЗначениеПоТипу(ДанныеВнешние.Delivery, "Type", Тип("Строка")), СоставОшибки), ДокументОбъект, Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("АдресДоставки"			, ЗначениеПоТипу(ДанныеВнешние.Delivery, "DeliveryAdress", Тип("Строка")), ДокументОбъект, Ложь);
			//+  Бакан 27.07.22
			//ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Город"					, ЗначениеПоТипу(ДанныеВнешние.Delivery, "DeliveryAdress", Тип("Строка")), ДокументОбъект, Ложь);
			//ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Отделение"				, ЗначениеПоТипу(ДанныеВнешние.Delivery, "City", Тип("Строка")), ДокументОбъект, Ложь);
			//ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Дом"						, ЗначениеПоТипу(ДанныеВнешние.Delivery, "HouseNumber", Тип("Строка")), ДокументОбъект, Ложь);
			//ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Квартира"				, ЗначениеПоТипу(ДанныеВнешние.Delivery, "ApartmentNumber", Тип("Строка")), ДокументОбъект, Ложь);		
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Район"					, ЗначениеПоТипу(ДанныеВнешние.Delivery, "District", Тип("Строка")), ДокументОбъект, Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Область"					, ЗначениеПоТипу(ДанныеВнешние.Delivery, "Region", Тип("Строка")), ДокументОбъект, Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Город"					, ЗначениеПоТипу(ДанныеВнешние.Delivery, "City", Тип("Строка")), ДокументОбъект, Ложь);
			
			Отделение = Справочники.Отделения.НайтиПоРеквизиту("Идентификатор",ЗначениеПоТипу(ДанныеВнешние.Delivery, "Warehouse", Тип("Строка")));
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Отделение"				, Отделение, ДокументОбъект, Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Улица"					, ЗначениеПоТипу(ДанныеВнешние.Delivery, "Street", Тип("Строка")), ДокументОбъект, Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Дом"						, ЗначениеПоТипу(ДанныеВнешние.Delivery, "House", Тип("Строка")), ДокументОбъект, Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Квартира"				, ЗначениеПоТипу(ДанныеВнешние.Delivery, "Flat", Тип("Строка")), ДокументОбъект, Ложь);
			//-  Бакан 27.07.22		
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Фамилия"					, ЗначениеПоТипу(ДанныеВнешние.Delivery, "RecipientLastName", Тип("Строка")), ДокументОбъект, Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Имя"						, ЗначениеПоТипу(ДанныеВнешние.Delivery, "RecipientFirstName", Тип("Строка")), ДокументОбъект, Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Отчество"				, ЗначениеПоТипу(ДанныеВнешние.Delivery, "RecipientMiddleName", Тип("Строка")), ДокументОбъект, Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Телефон"					, ЗначениеПоТипу(ДанныеВнешние.Delivery, "RecipientPhoneNumber", Тип("Строка")), ДокументОбъект, Ложь);
			//	Блок "Оплата" ("Payment")
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("СтатусОплаты"			, ?(JSON.ЧислоКакБулево(ЗначениеПоТипу(ДанныеВнешние.Payment, "Status", Тип("Число"))), Перечисления.СтатусОплаты.Оплачен, Перечисления.СтатусОплаты.НеОплачен), ДокументОбъект, Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("СуммаОплаты"				, ЗначениеПоТипу(ДанныеВнешние.Payment, "Summa", Тип("Число")), ДокументОбъект, Ложь);
		//	.. проблемные
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ТипОплаты"				, ОбменMagentoСлужебный.ТипОплатыИнтернетМагазина(ЗначениеПоТипу(ДанныеВнешние.Payment, "Type", Тип("Строка")), СоставОшибки), ДокументОбъект, Истина);
	
		КонецЕсли;
		
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Организация"					, Организация, ДокументОбъект, Ложь);

	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("СкидкиРассчитаны"			, Истина, ДокументОбъект, Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ЦенаВключаетНДС"				, JSON.ЧислоКакБулево(ЗначениеПоТипу(ДанныеВнешние, "TaxInclud", Тип("Число"))), ДокументОбъект, Ложь);

	СоставПрограммы = Справочники.УслугиБанка.КредитнаяПрограмма(ЗначениеПоТипу(ДанныеВнешние, "CreditProgram", Тип("Строка")), ЗначениеПоТипу(ДанныеВнешние, "CreditDepth", Тип("Число")));
	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("УслугаБанка"					, СоставПрограммы.УслугаБанка, ДокументОбъект, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("УслугаБанкаПериодПредоставления", СоставПрограммы.УслугаБанкаПериодПредоставления, ДокументОбъект, Ложь);

	Если ДанныеВнешние.BuyerSpecified Тогда

		Если НЕ ПустаяСтрока(ДанныеВнешние.Buyer.phoneNumber) Тогда

			СтрокаВнешняя = Справочники.Контрагенты.НайтиКонтрагентаПоДаннымMagento(ДанныеВнешние.Buyer);

			Если СтрокаВнешняя.Найден Тогда

				ДокументОбъект.ВладелецДисконтнойКарты = СтрокаВнешняя.Контрагент;
				ДокументОбъект.ДисконтнаяКарта = СтрокаВнешняя.ДисконтнаяКарта;

				Если ИмяОбъекта = "ЗаказПокупателя" Тогда	//	в чеке такого реквизита нет.
					
					ДокументОбъект.Контрагент = СтрокаВнешняя.Контрагент;
					Если  ДанныеВнешние.Buyer.phoneNumber <> ДанныеВнешние.Delivery.RecipientPhoneNumber тогда
						ДокументОбъект.ПолучательТретееЛицо = Истина;  
					КонецЕсли;
					
				КонецЕсли;
				
				Если ТипЗнч(ДанныеВнешние.Buyer.EDRPOU) = Тип("Строка") И НЕ ПустаяСтрока(ДанныеВнешние.Buyer.EDRPOU) Тогда

					ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
						, "Покупець не є фізичною особою (отримано код за ЄДРПОУ [" + ДанныеВнешние.Buyer.EDRPOU + "]). Знижка не надається."
					);

				КонецЕсли;
  			Иначе

			//	ну, нет клиента так нет.. чек будет без клиента, но об этом сообщим.
			//	Но для заказа всегда даём отказ!
				ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
					, СтрокаВнешняя.ОписаниеОшибки
					, ?(ИмяОбъекта = "ЗаказПокупателя", СоставОшибки.Отказ, Ложь)
				);

				Если ИмяОбъекта = "ЗаказПокупателя" Тогда

					СоставОшибки.СтатусОшибки = "BUYER:UNDEF";

				КонецЕсли;

			КонецЕсли;

		Иначе

			ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
				, "для покупця не заповнено номер телефону"
				, СоставОшибки.Отказ
			);
			СоставОшибки.СтатусОшибки = "BUYER:PHONE";

		КонецЕсли;

	Иначе

		ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
			, "у переданій інформації відсутній атрибут [Buyer] або не вказано жодного ключового атрибуту"
		);

		Если ИмяОбъекта = "ЗаказПокупателя" Тогда	//	Контрагент обязателен только для "ЗаказПокупателя"

			СоставОшибки.Отказ = Истина;
			СоставОшибки.СтатусОшибки = "BUYER:NONE_ATTR";

		КонецЕсли;

	КонецЕсли;

	Если НЕ СоставОшибки.Отказ = Истина Тогда
		
		Если ИмяОбъекта = "ЗаказПокупателя"
				И ДокументОбъект.УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.Розница Тогда
		
			ПолучитьСоставОплатыЗаказа(ДанныеВнешние, ДокументОбъект, РежимЭмуляции, ИмяОбъекта, СоставОшибки);

		ИначеЕсли ЗаполнитьТабличныеЧасти Тогда
	
			ПолучитьСоставТовары(ДанныеВнешние, ДокументОбъект, РежимЭмуляции, ИмяОбъекта, СоставОшибки);
			ПолучитьСоставСкидкиНаценки(ДанныеВнешние, ДокументОбъект, РежимЭмуляции, ИмяОбъекта, СоставОшибки);
			ПолучитьСоставНачислениеБонусныхБаллов(ДанныеВнешние, ДокументОбъект, РежимЭмуляции, ИмяОбъекта, СоставОшибки);
			ПолучитьСоставОплатаБонуснымиБаллами(ДанныеВнешние, ДокументОбъект, РежимЭмуляции, ИмяОбъекта, СоставОшибки);
			ПолучитьСоставПогашениеСкидочныхКупонов(ДанныеВнешние, ДокументОбъект, РежимЭмуляции, ИмяОбъекта, СоставОшибки);
			
			Если ИмяОбъекта = "ЗаказПокупателя" Тогда
			
				ПолучитьСоставОплатыЗаказа(ДанныеВнешние, ДокументОбъект, РежимЭмуляции, ИмяОбъекта, СоставОшибки);
			
			КонецЕсли;
				
		КонецЕсли;

	КонецЕсли;

	ДокументОбъект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);

	Возврат ДокументОбъект;

КонецФункции

Функция ПроверитьДокументMagento(ДокументОбъект, СоставОшибки)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	#Если _ Тогда
	ДокументОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
	#КонецЕсли

	Если ДокументОбъект.Дата < '20211101' Тогда	//	отсечка на 1 ноября 2021 года

		ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
			, "Дата входящего [" + ДокументОбъект.Дата + "] НЕДОПУСТИМА! Не ранее 1 ноября 2021 года"
			, СоставОшибки.Отказ
		);

	КонецЕсли;

	Если НЕ ДокументОбъект.ЭтоНовый() Тогда

		Запрос = Новый Запрос(	//	изменён Магазин - отказываем, если в подчинении заказа есть документы.
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК ЗаказПокупателя,
		|	ТаблицаДокумента.Магазин КАК Магазин,
		|	ТаблицаДокумента.Склад КАК Склад,
		|	ТаблицаДокумента.Статус КАК Статус
		|ПОМЕСТИТЬ Фильтр
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &ТекущаяСсылка
		|	И НЕ ТаблицаДокумента.Магазин = &Магазин
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказПокупателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Фильтр.ЗаказПокупателя КАК ЗаказПокупателя,
		|	Фильтр.Магазин КАК Магазин,
		|	Фильтр.Склад КАК Склад,
		|	Фильтр.Статус КАК Статус
		|ИЗ
		|	Фильтр КАК Фильтр
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОформления.Дата КАК Период,
		|	ТаблицаОформления.Ссылка КАК ДокументВПодчинении
		|ИЗ
		|	Документ.ЧекККМ КАК ТаблицаОформления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
		|		ПО ТаблицаОформления.ЗаказПокупателя = Фильтр.ЗаказПокупателя
		|ГДЕ
		|	ТаблицаОформления.Проведен
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаОформления.Дата,
		|	ТаблицаОформления.Ссылка
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ТаблицаОформления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
		|		ПО ТаблицаОформления.ЗаказПокупателя = Фильтр.ЗаказПокупателя
		|ГДЕ
		|	НЕ ТаблицаОформления.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаОформления.Дата,
		|	ТаблицаОформления.Ссылка
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ТаблицаОформления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
		|		ПО ТаблицаОформления.ДокументОснование = Фильтр.ЗаказПокупателя
		|ГДЕ
		|	НЕ ТаблицаОформления.ПометкаУдаления
		|	И ТаблицаОформления.ДокументОснование ССЫЛКА Документ.ЗаказПокупателя
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	ДокументВПодчинении
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Фильтр"
		);
		Запрос.УстановитьПараметр("ТекущаяСсылка", ДокументОбъект.Ссылка);
		Запрос.УстановитьПараметр("Магазин"		 , ДокументОбъект.Магазин);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();	//	LNK 18.11.2021 13:21:13

		Если НЕ РезультатыЗапроса[2].Пустой() Тогда

			СоставОшибки.УжеОформлен  = Истина;
			СоставОшибки.СтатусОшибки = "ЗАКАЗ_УЖЕ_ОФОРМЛЕН";

			Выборка = РезультатыЗапроса[2].Выбрать();

			Пока Выборка.Следующий() Цикл

				ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
					, "оформлен по [" + СокрЛП(Выборка.ДокументВПодчинении) + "]"
				);

			КонецЦикла;

			Если СоставОшибки.УжеОформлен = Истина Тогда

			//	Восстановим статус документа по ссылке
				Выборка = РезультатыЗапроса[1].Выбрать();
				Выборка.Следующий();

				ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Магазин"	, Выборка.Магазин, ДокументОбъект, Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Склад"	, Выборка.Склад, ДокументОбъект, Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Статус"	, Выборка.Статус, ДокументОбъект, Истина);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл

		Если СтрокаТабличнойЧасти.КоличествоУпаковок = 0 Тогда

			ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
				, "[Товары]: в строке " + Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧДЦ=; ЧГ=") + " не указано [Количество]"
				, СоставОшибки.Отказ
			);

		ИначеЕсли СтрокаТабличнойЧасти.Сумма = 0 Тогда

			ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
				, "[Товары]: в строке " + Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧДЦ=; ЧГ=") + " не указана [Сумма]"
				, СоставОшибки.Отказ
			);

		КонецЕсли;

		Если НЕ СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0 Тогда

			СуммаКонтрольная = 0;

			СтрокиСкидки = ДокументОбъект.СкидкиНаценки.НайтиСтроки(Новый Структура(
				"КлючСвязи, СпособПримененияСкидки"
					, СтрокаТабличнойЧасти.КлючСвязи
					, Перечисления.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок
				)
			);

			Для каждого СтрокаСкидки Из СтрокиСкидки Цикл

				СуммаКонтрольная = СуммаКонтрольная + СтрокаСкидки.Сумма;

			КонецЦикла;

			Если НЕ СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = СуммаКонтрольная Тогда

				ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
					, "[Товары]: в строке " + Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧДЦ=; ЧГ=")
					+ " [СуммаАвтоматическойСкидки] не равна сумме строк в [СкидкиНаценки] по ключу связи"
					, СоставОшибки.Отказ
				);

			КонецЕсли;

		КонецЕсли;

		Если НЕ СтрокаТабличнойЧасти.СуммаБонусныхБалловНачислено = 0 Тогда

			СуммаКонтрольная = 0;

			СтрокиСкидки = ДокументОбъект.СкидкиНаценки.НайтиСтроки(Новый Структура(
				"КлючСвязи, СпособПримененияСкидки"
					, СтрокаТабличнойЧасти.КлючСвязи
					, Перечисления.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы
				)
			);

			Для каждого СтрокаСкидки Из СтрокиСкидки Цикл

				СуммаКонтрольная = СуммаКонтрольная + СтрокаСкидки.Сумма;

			КонецЦикла;

			Если НЕ СтрокаТабличнойЧасти.СуммаБонусныхБалловНачислено = СуммаКонтрольная Тогда

				ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
					, "[Товары]: в строке " + Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧДЦ=; ЧГ=")
					+ " [СуммаАвтоматическойСкидки] не равна сумме строк в [СкидкиНаценки] по ключу связи"
					, СоставОшибки.Отказ
				);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.СкидкиНаценки Цикл

		Если НЕ СтрокаТабличнойЧасти.КлючСвязи = 0 Тогда

			СтрокаСвязи = ДокументОбъект.Товары.Найти(СтрокаТабличнойЧасти.КлючСвязи, "КлючСвязи");

			Если СтрокаСвязи = Неопределено Тогда

				ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
					, "[СкидкиНаценки]: в строке " + Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧДЦ=; ЧГ=")
					+ " указан плохой 'КлючСвязи' [" + Формат(СтрокаТабличнойЧасти.КлючСвязи, "ЧДЦ=; ЧГ=") + "] (такого нет в [Товары])"
					, СоставОшибки.Отказ
				);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.ОплатаБонуснымиБаллами Цикл

		Если НЕ СтрокаТабличнойЧасти.КлючСвязиБонусныхБаллов = 0 Тогда

			СтрокаСвязи = ДокументОбъект.Товары.Найти(СтрокаТабличнойЧасти.КлючСвязиБонусныхБаллов, "КлючСвязиБонусныхБаллов");

			Если СтрокаСвязи = Неопределено Тогда

					ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
						, "[ОплатаБонуснымиБаллами]: в строке " + Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧДЦ=; ЧГ=")
						+ " указан плохой 'КлючСвязиБонусныхБаллов' [" + Формат(СтрокаТабличнойЧасти.КлючСвязиБонусныхБаллов, "ЧДЦ=; ЧГ=") + "] (такого нет в [Товары])"
						, СоставОшибки.Отказ
					);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат НЕ СоставОшибки.Отказ;

КонецФункции

Функция ПолучитьДокументОбъект(Номер, Дата, Магазин, ИмяОбъекта, РежимЭмуляции)

	ЭтоНовый = Ложь;

	Если РежимЭмуляции = Истина Тогда

		ДокументОбъект = ОбщегоНазначенияРТСервер.ПолучитьСтруктуруПоДокументу(ИмяОбъекта, Ложь);
		ЭтоНовый	   = Истина;

		ДокументОбъект.Номер = Номер;
		ДокументОбъект.Дата  = Дата;

	Иначе

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номер", Номер);
		Запрос.УстановитьПараметр("Дата" , Дата);
		Запрос.УстановитьПараметр("Магазин", Магазин);

		Если ИмяОбъекта = "ЗаказПокупателя" Тогда

			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаДокументы.Дата КАК Дата,
			|	ТаблицаДокументы.Ссылка КАК Ссылка,
			|	ВЫБОР
			|		КОГДА ТаблицаДокументы.ПометкаУдаления
			|			ТОГДА 2
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК КлючПорядка
			|ИЗ
			|	Документ.ЗаказПокупателя КАК ТаблицаДокументы
			|ГДЕ
			|	ТаблицаДокументы.Номер = &Номер
			|
			|УПОРЯДОЧИТЬ ПО
			|	КлючПорядка,
			|	Дата УБЫВ,
			|	Ссылка УБЫВ"
			;

		Иначе	//	эта ветка на текущий момент не используется

			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаДокументы.Дата КАК Дата,
			|	ТаблицаДокументы.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ЧекККМ КАК ТаблицаДокументы
			|ГДЕ
			|	ТаблицаДокументы.Номер = &Номер
			|	И НАЧАЛОПЕРИОДА(ТаблицаДокументы.Дата, ГОД) = НАЧАЛОПЕРИОДА(&Дата, ГОД)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата УБЫВ,
			|	Ссылка УБЫВ"
			;

		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда

			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();

			#Если _ Тогда
			ДокументОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
			#КонецЕсли

			Если ИмяОбъекта = "ЗаказПокупателя" И ДокументОбъект.ПометкаУдаления = Истина Тогда

				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ДокументОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаДокументаОтMagento", Истина);
				ДокументОбъект.УстановитьПометкуУдаления(Ложь);

				ДокументОбъект.ОбменДанными.Загрузка = Ложь;	//	убираем обязательно!

			КонецЕсли;

		Иначе

			ДокументОбъект = Документы[ИмяОбъекта].СоздатьДокумент();
			ЭтоНовый	   = Истина;

			ДокументОбъект.Номер = Номер;
			ДокументОбъект.Дата  = Дата;

		КонецЕсли;

	КонецЕсли;

	Если ЭтоНовый = Истина Тогда

		Если ИмяОбъекта = "ЗаказПокупателя" Тогда

			ДокументОбъект.НомерЗаказаНаСайте = Номер;
			ДокументОбъект.ДатаЗаказаНаСайте  = Дата;

		КонецЕсли;

	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Магазин", Магазин, ДокументОбъект, Истина);

	Возврат ДокументОбъект;

КонецФункции

Процедура ПолучитьСоставТовары(ДанныеВнешние, ДокументОбъект, РежимЭмуляции, ИмяОбъекта, СоставОшибки)

	КэшированныеЗначения = Новый Структура;

	Если ДанныеВнешние.Свойство("Products") Тогда

		ТаблицаВнешняя = ОбменMagentoСлужебный.ИнициализацияТаблицыНоменклатурыДляВнешнихДанных();

		НомерСтроки = 0;  
		
		Если ДанныеВнешние.Свойство("Delivery") Тогда
			
			СкладIDN = ЗначениеПоТипу(ДанныеВнешние.Delivery, "DeliveryAdress", Тип("Строка")); 
			СкладДоставки = ПолучитьСкладMagentoПоIDN(СкладIDN);
			МагазинПолучатель = СкладДоставки.Магазин;
			
		Иначе
			
			СкладДоставки = Справочники.Склады.ПустаяСсылка();
			МагазинПолучатель = Справочники.Магазины.ПустаяСсылка();
			
		КонецЕсли; 
		
		Для каждого ДанныеСтроки Из ДанныеВнешние.Products Цикл

			НомерСтроки = НомерСтроки + 1;
			
			СтрокаВнешняя = ТаблицаВнешняя.Добавить();
			СтрокаВнешняя.НомерСтроки  = НомерСтроки;
			СтрокаВнешняя.IDN		   = ЗначениеПоТипу(ДанныеСтроки, "IDN", Тип("Строка"));
			СтрокаВнешняя.УпаковкаИмя  = ЗначениеПоТипу(ДанныеСтроки, "PackName", Тип("Строка"));
			СтрокаВнешняя.Коэффициент  = ЗначениеПоТипу(ДанныеСтроки, "PackRate", Тип("Число")); 
			Если ИмяОбъекта = "ЗаказПокупателя" Тогда
				СтрокаВнешняя.Самовывоз    = ?(ДокументОбъект.ТипДоставки = Перечисления.ТипДоставкиЗаказПокупателя.Самовывоз, Истина, Ложь);
				СтрокаВнешняя.МагазинПолучатель  = СкладДоставки.Магазин;
			КонецЕсли; 
			
			СтрокаВнешняя.ДанныеСтроки = ДанныеСтроки;
			
		КонецЦикла;

		Справочники.Номенклатура.ПолучитьНоменклатуруПоСпискуMagento(ТаблицаВнешняя);

		ДокументОбъект.Товары.Очистить();

		Для каждого СтрокаВнешняя Из ТаблицаВнешняя Цикл

			СтрокаТабличнойЧасти = ДокументОбъект.Товары.Добавить();

			Если ИмяОбъекта = "ЗаказПокупателя" Тогда
				
				СтрокаТабличнойЧасти.Резервировать = Истина;	//	здесь, как бы, нужно внешнее управление..
				
				СтрокаТабличнойЧасти.Самовывоз	   = СтрокаВнешняя.Самовывоз;  
				Если СтрокаТабличнойЧасти.Самовывоз Тогда  
					СтрокаТабличнойЧасти.МагазинПолучатель	   = СтрокаВнешняя.МагазинПолучатель; 
					Если Не ПолучитьДанныеОстаткаПоСкладу(СтрокаВнешняя.Номенклатура, СкладIDN) = 0 Тогда
						СтрокаТабличнойЧасти.Склад	   = СкладДоставки; 
					КонецЕсли; 
				Иначе
					
					СтрокаТабличнойЧасти.Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Магазин, "СкладПродажи",, Ложь);

				КонецЕсли;
			КонецЕсли;

			СтрокаТабличнойЧасти.КлючСвязи				 = ЗначениеПоТипу(СтрокаВнешняя.ДанныеСтроки, "KeyLink", Тип("Число"));
			СтрокаТабличнойЧасти.КлючСвязиБонусныхБаллов = ЗначениеПоТипу(СтрокаВнешняя.ДанныеСтроки, "KeyLinkBonus", Тип("Число"));

			СтрокаТабличнойЧасти.АкционнаяЦена = JSON.ЧислоКакБулево(ЗначениеПоТипу(СтрокаВнешняя.ДанныеСтроки, "Action", Тип("Число")));
			СтрокаТабличнойЧасти.Номенклатура  = СтрокаВнешняя.Номенклатура;
			СтрокаТабличнойЧасти.Упаковка	   = СтрокаВнешняя.Упаковка;
			
			
			СтрокаТабличнойЧасти.Цена		= ЗначениеПоТипу(СтрокаВнешняя.ДанныеСтроки, "Price", Тип("Число"));
			СтрокаТабличнойЧасти.Сумма		= ЗначениеПоТипу(СтрокаВнешняя.ДанныеСтроки, "Summa", Тип("Число"));
			СтрокаТабличнойЧасти.СуммаНДС	= ЗначениеПоТипу(СтрокаВнешняя.ДанныеСтроки, "TaxSumma", Тип("Число"));

			Если РежимЭмуляции = Истина Тогда

				СтрокаТабличнойЧасти.СуммаВсего	= ЗначениеПоТипу(СтрокаВнешняя.ДанныеСтроки, "Summa", Тип("Число"));

			КонецЕсли;

			СтрокаТабличнойЧасти.КоличествоУпаковок = ЗначениеПоТипу(СтрокаВнешняя.ДанныеСтроки, "Count", Тип("Число"));
			СтрокаТабличнойЧасти.Количество			= СтрокаВнешняя.Коэффициент * СтрокаТабличнойЧасти.КоличествоУпаковок;

			СтрокаТабличнойЧасти.СуммаРучнойСкидки		   = ЗначениеПоТипу(СтрокаВнешняя.ДанныеСтроки, "SummaManualDiscount", Тип("Число"));
			СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = ЗначениеПоТипу(СтрокаВнешняя.ДанныеСтроки, "SummaAutoDiscount", Тип("Число"));

			СтрокаТабличнойЧасти.СуммаБонусныхБалловНачислено = ЗначениеПоТипу(СтрокаВнешняя.ДанныеСтроки, "SummaBonusAccrue", Тип("Число"));
			СтрокаТабличнойЧасти.СуммаБонусныхБалловСписано	  = ЗначениеПоТипу(СтрокаВнешняя.ДанныеСтроки, "SummaBonusPay", Тип("Число"));

			СтрокаТабличнойЧасти.СтавкаНДС = НДСОбщегоНазначенияСервер.ПолучитьСтавкуНДСПоЗначению(ЗначениеПоТипу(СтрокаВнешняя.ДанныеСтроки, "TaxRate", Тип("Число")));

		//	LNK 10.06.2021 08:04:29 - концепция того, что в Magento-1 нет нихера.. ни НДС, ни суммы они считать не могут.. ыыых
		//	Независимо от полученных данных пересчитаем суммы по строке.
			Если Истина Тогда	//	поместим в отдельную конструкцию.. чтобы потом проще было

				СтрокаТабличнойЧасти.СтавкаНДС	= СтрокаВнешняя.СтавкаНДС;

				СтруктураДействий = Новый Структура("ПересчитатьСуммуНДС", Новый Структура("ЦенаВключаетНДС", ДокументОбъект.ЦенаВключаетНДС));
				ОбработкаТабличнойЧастиТоварыСервер.ПересчитатьСуммуНДСВСтрокеТЧСервер(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения); 

				Если РежимЭмуляции = Истина Тогда

					СтрокаТабличнойЧасти.СуммаВсего = СтрокаТабличнойЧасти.Сумма;

				КонецЕсли;

			КонецЕсли;

			Если НЕ ПустаяСтрока(СтрокаВнешняя.ОписаниеОшибки) Тогда

				ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
					, СтрокаВнешняя.ОписаниеОшибки
					, СоставОшибки.Отказ
				);

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;


КонецПроцедуры

Процедура ПолучитьСоставСкидкиНаценки(ДанныеВнешние, ДокументОбъект, РежимЭмуляции, ИмяОбъекта, СоставОшибки)

	Если ДанныеВнешние.Свойство("Discounts") Тогда

		ДокументОбъект.СкидкиНаценки.Очистить();

		Для каждого СтрокаВнешняя Из ДанныеВнешние.Discounts Цикл

			СтрокаТабличнойЧасти = ДокументОбъект.СкидкиНаценки.Добавить();
			СтрокаТабличнойЧасти.КлючСвязи				= СтрокаВнешняя.KeyLink;
			СтрокаТабличнойЧасти.СкидкаНаценка			= Справочники.СкидкиНаценки.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаВнешняя.Discount));
			СтрокаТабличнойЧасти.СпособПримененияСкидки = ОбменMagentoПовтИсп.СпособПримененияСкидкиЗначение(СтрокаВнешняя.TypeApplication);
			СтрокаТабличнойЧасти.Сумма					= СтрокаВнешняя.Summa;

			Если ОбщегоНазначенияКлиентСервер.СсылкаПустая(СтрокаТабличнойЧасти.СкидкаНаценка)  Тогда

				ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
					, "не найдена «СкидкаНаценка» по ИД [" + СтрокаВнешняя.Discount + "]"
					, СоставОшибки.Отказ
				);

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьСоставНачислениеБонусныхБаллов(ДанныеВнешние, ДокументОбъект, РежимЭмуляции, ИмяОбъекта, СоставОшибки)

	Если ДанныеВнешние.Свойство("AccrueBonusPoints") Тогда

		ДокументОбъект.НачислениеБонусныхБаллов.Очистить();

		Для каждого СтрокаВнешняя Из ДанныеВнешние.AccrueBonusPoints Цикл

			СтрокаТабличнойЧасти = ДокументОбъект.НачислениеБонусныхБаллов.Добавить();
			СтрокаТабличнойЧасти.ПрограммаЛояльности = Справочники.ПрограммыЛояльности.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаВнешняя.LoyaltyProgram));
			СтрокаТабличнойЧасти.ДатаНачисления		 = СтрокаВнешняя.DateAccrual;
			СтрокаТабличнойЧасти.ДатаСписания		 = СтрокаВнешняя.DateCancel;
			СтрокаТабличнойЧасти.СуммаБонусныхБаллов = СтрокаВнешняя.Summa;

			Если ОбщегоНазначенияКлиентСервер.СсылкаПустая(СтрокаТабличнойЧасти.ПрограммаЛояльности)  Тогда

				ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
					, "[Начисление]: не найдена «ПрограммаЛояльности» по ИД [" + СтрокаВнешняя.LoyaltyProgram + "]"
					, СоставОшибки.Отказ
				);

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьСоставОплатаБонуснымиБаллами(ДанныеВнешние, ДокументОбъект, РежимЭмуляции, ИмяОбъекта, СоставОшибки)

	Если ДанныеВнешние.Свойство("PayBonusPoints") Тогда

		ДокументОбъект.ОплатаБонуснымиБаллами.Очистить();

		Для каждого СтрокаВнешняя Из ДанныеВнешние.PayBonusPoints Цикл

			СтрокаТабличнойЧасти = ДокументОбъект.ОплатаБонуснымиБаллами.Добавить();
			СтрокаТабличнойЧасти.КлючСвязиБонусныхБаллов = СтрокаВнешняя.KeyLinkBonus;
			СтрокаТабличнойЧасти.ПрограммаЛояльности	 = Справочники.ПрограммыЛояльности.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаВнешняя.LoyaltyProgram));
			СтрокаТабличнойЧасти.ТипБонусов				 = ОбменMagentoПовтИсп.ТипБонусовЗначение(СтрокаВнешняя.TypeBonus);
			СтрокаТабличнойЧасти.СуммаБонусныхБаллов	 = СтрокаВнешняя.Summa;

			Если ОбщегоНазначенияКлиентСервер.СсылкаПустая(СтрокаТабличнойЧасти.ПрограммаЛояльности)  Тогда

				ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
					, "[Оплата]: не найдена «ПрограммаЛояльности» по ИД [" + СтрокаВнешняя.LoyaltyProgram + "]"
					, СоставОшибки.Отказ
				);

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьСоставПогашениеСкидочныхКупонов(ДанныеВнешние, ДокументОбъект, РежимЭмуляции, ИмяОбъекта, СоставОшибки)

	Если ДанныеВнешние.Свойство("CouponsRedeemed") Тогда

		ДокументОбъект.ПогашениеСкидочныхКупонов.Очистить();

		Для каждого СтрокаВнешняя Из ДанныеВнешние.CouponsRedeemed Цикл

			Если НЕ ПустаяСтрока(СтрокаВнешняя.SerialNumber)
			И (СтрокаВнешняя.Type = "Coupon" ИЛИ СтрокаВнешняя.Type = "string" ИЛИ ПустаяСтрока(СтрокаВнешняя.Type)) Тогда

				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ТаблицаСправочник.Ссылка КАК Номенклатура
				|ПОМЕСТИТЬ Фильтр
				|ИЗ
				|	Справочник.Номенклатура КАК ТаблицаСправочник
				|ГДЕ
				|	ТаблицаСправочник.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.СкидочныйКупон)"
				);
				Запрос.УстановитьПараметр("СерийныйНомер", СтрокаВнешняя.SerialNumber);
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

				Запрос.Выполнить();

				Для Итерация = 1 По 2 Цикл

				//	Запросы выполняем отдельно, по очереди, чтобы не создавать лишнюю нагрузку
					Если Итерация = 1 Тогда

						Запрос.Текст =
						"ВЫБРАТЬ
						|	ТаблицаСправочник.Ссылка КАК Ссылка,
						|	ТаблицаСправочник.Владелец КАК Владелец
						|ИЗ
						|	Справочник.СерийныеНомера КАК ТаблицаСправочник
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
						|		ПО ТаблицаСправочник.Владелец = Фильтр.Номенклатура
						|ГДЕ
						|	НЕ ТаблицаСправочник.КодСерийногоНомера = """"
						|	И ТаблицаСправочник.КодСерийногоНомера = &СерийныйНомер"
						;

					Иначе

						Запрос.Текст =
						"ВЫБРАТЬ
						|	&СерийныйНомер КАК Ссылка,
						|	ТаблицаВедущая.Номенклатура КАК Владелец
						|ИЗ
						|	Фильтр КАК ТаблицаВедущая
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК ТаблицаРегистра
						|		ПО ТаблицаВедущая.Номенклатура = ТаблицаРегистра.Владелец
						|ГДЕ
						|	ТаблицаРегистра.Штрихкод = &СерийныйНомер
						|
						|ОБЪЕДИНИТЬ
						|
						|ВЫБРАТЬ
						|	ТаблицаВедущая.Ссылка,
						|	ТаблицаВедущая.Владелец
						|ИЗ
						|	Справочник.СерийныеНомера КАК ТаблицаВедущая
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
						|		ПО ТаблицаВедущая.Владелец = Фильтр.Номенклатура
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК ТаблицаРегистра
						|		ПО ТаблицаВедущая.Ссылка = ТаблицаРегистра.Владелец
						|ГДЕ
						|	ТаблицаРегистра.Штрихкод = &СерийныйНомер"
						;

					КонецЕсли;

					РезультатЗапроса = Запрос.Выполнить();

					Если НЕ РезультатЗапроса.Пустой() Тогда

						Выборка = РезультатЗапроса.Выбрать();
						Выборка.Следующий();

						СтрокаТабличнойЧасти = ДокументОбъект.ПогашениеСкидочныхКупонов.Добавить();
						СтрокаТабличнойЧасти.СкидочныйКупон	= Выборка.Владелец;
						СтрокаТабличнойЧасти.СерийныйНомер	= Выборка.Ссылка;

						Прервать;

					КонецЕсли;

				КонецЦикла;

				Запрос.Текст =
				"УНИЧТОЖИТЬ Фильтр"
				;
				Запрос.Выполнить();

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьСоставОплатыЗаказа(ДанныеВнешние, ДокументОбъект, РежимЭмуляции, ИмяОбъекта, СоставОшибки)

	СтруктураДляПоиска = Новый Структура;
	СтруктураДляПоиска.Вставить("НомерОплаты",0);
	МассивСтрок = ДокументОбъект.ОплатаЗаказа.НайтиСтроки(СтруктураДляПоиска); 
	
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = ДокументОбъект.ОплатаЗаказа.Добавить();
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
		
	СтрокаТабличнойЧасти.НомерОплаты	= 0;
	СтрокаТабличнойЧасти.ВидОплаты		= Перечисления.ВидыОплатыЗаказаПокупателя.Оплата; 
	СтрокаТабличнойЧасти.ТипОплаты		= ОбменMagentoСлужебный.ТипОплатыИнтернетМагазина(ЗначениеПоТипу(ДанныеВнешние.Payment, "Type", Тип("Строка")), СоставОшибки); 
	СтрокаТабличнойЧасти.СтатусОплаты	= ?(JSON.ЧислоКакБулево(ЗначениеПоТипу(ДанныеВнешние.Payment, "Status", Тип("Число"))), Перечисления.СтатусОплаты.Оплачен, Перечисления.СтатусОплаты.НеОплачен);
	СтрокаТабличнойЧасти.Сумма			= ЗначениеПоТипу(ДанныеВнешние.Payment, "Summa", Тип("Число")) + ЗначениеПоТипу(ДанныеВнешние.Delivery, "SumClient"  , Тип("Число"));

	Если Не ДокументОбъект.Ссылка.Пустая() Тогда	
		//Запись в регистр
		СтруктураЗаписи = РегистрыСведений.ОплатаЗаказаКлиента.ИнициализацияСтруктурыЗаписи();
		
		СтруктураЗаписи.ВидОплаты	 	= Перечисления.ВидыОплатыЗаказаПокупателя.Оплата;
		СтруктураЗаписи.ЗаказКлиента 	= ДокументОбъект.Ссылка;
		СтруктураЗаписи.НомерОплаты 	= 0;
		СтруктураЗаписи.ТипОплаты 		= ОбменMagentoСлужебный.ТипОплатыИнтернетМагазина(ЗначениеПоТипу(ДанныеВнешние.Payment, "Type", Тип("Строка")), СоставОшибки); 
		СтруктураЗаписи.Сумма 			= ЗначениеПоТипу(ДанныеВнешние.Payment, "Summa", Тип("Число")) + ЗначениеПоТипу(ДанныеВнешние.Delivery, "SumClient"  , Тип("Число"));
		СтруктураЗаписи.СтатусОплаты 	= ?(JSON.ЧислоКакБулево(ЗначениеПоТипу(ДанныеВнешние.Payment, "Status", Тип("Число"))), Перечисления.СтатусОплаты.Оплачен, Перечисления.СтатусОплаты.НеОплачен);
		СтруктураЗаписи.Отменён 		= Ложь;
		СтруктураЗаписи.ДатаОплаты 		= ?(JSON.ЧислоКакБулево(ЗначениеПоТипу(ДанныеВнешние.Payment, "Status", Тип("Число"))), ТекущаяДатаСеанса(), Дата(1,1,1));
		СтруктураЗаписи.ИДОплаты 		= "";
		
		РегистрыСведений.ОплатаЗаказаКлиента.ЗаписьСтрокиВРегистр(СтруктураЗаписи);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыКомплексаОбменРозницаMagento_МодульОбменMagentoСервер	//	LNK 23.04.2022 06:51:09

Процедура ВыполнитьВыгрузкуИзмененийВУзелMagento(УзелОбъект, ДанныеЗапроса, ЗаписьJSON, СоставОшибки)	Экспорт

	#Если _ Тогда
	УзелОбъект = ПланыОбмена.ОбменРозницаMagento.СоздатьУзел();
	#КонецЕсли

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если НЕ СоставОшибки.Ошибка = Истина Тогда

		Если ДанныеЗапроса.Command = "get_reg_data" Тогда

			УдалитьРегистрациюИзменений(УзелОбъект.Ссылка, ДанныеЗапроса.Number_PackMGT);

			ФильтрВыборки = ОтключитьИспользованиеВОтборе(ОбменДаннымиСерверПакеты.ПолучитьПакетРегистрацииРозницаMagento(УзелОбъект.Ссылка, ДанныеЗапроса.PackSize));

			Попытка

				ТаблицаДанных = ПолучитьСтруктуруТаблицыДанных();
				#Если _ Тогда
				ТаблицаДанных = Новый ТаблицаЗначений;
				#КонецЕсли
				
				ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбъект.Ссылка, УзелОбъект.НомерОтправленного, ФильтрВыборки);

				Пока ВыборкаИзменений.Следующий() Цикл

					Данные = ВыборкаИзменений.Получить();

					Для каждого ЗаписьНабора Из Данные Цикл

						СтрокаТаблицы = ТаблицаДанных.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЗаписьНабора);

					КонецЦикла;

				КонецЦикла;

				ТаблицаТовары = ТаблицаДанных.Скопировать(, "Измерение_2");
				ТаблицаТовары.Свернуть("Измерение_2");
			//	Получили уникальный массив "Номенклатура"
				СписокТоваров = ТаблицаТовары.ВыгрузитьКолонку("Измерение_2");

				ПолучитьДанныеРегистрации(СписокТоваров, ДанныеЗапроса, ЗаписьJSON, СоставОшибки);

				УстановитьВыгруженВКомплексеОбмена(ТаблицаДанных);

			Исключение

				СоставОшибки.Ошибка = Истина;
				СоставОшибки.КодОшибки		= "NO_GET_REG_DATA";
				СоставОшибки.ОписаниеОшибки = "[" + УзелОбъект.Код + "]:" + Символы.ПС + ОписаниеОшибки();

			КонецПопытки;

		ИначеЕсли ДанныеЗапроса.Command = "get_sku_list" Тогда

			Если ДанныеЗапроса.Свойство("SKU") Тогда

				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ТаблицаСправочник.Ссылка КАК Номенклатура
				|ИЗ
				|	Справочник.Номенклатура КАК ТаблицаСправочник
				|ГДЕ
				|	НЕ ТаблицаСправочник.ЭтоГруппа
				|	И ТаблицаСправочник.IDN В(&СписокКодов)"
				);
				Запрос.УстановитьПараметр("СписокКодов", ОбщегоНазначенияКлиентСервер.lx_FillValueList(, ДанныеЗапроса.SKU));
				
				СписокТоваров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");

				Если НЕ СписокТоваров.Количество() = 0 Тогда

					ПолучитьДанныеРегистрации(СписокТоваров, ДанныеЗапроса, ЗаписьJSON, СоставОшибки);

				Иначе

					СоставОшибки.Ошибка = Истина;
					СоставОшибки.КодОшибки		= "GET_LIST:WRONG_CODE";
					СоставОшибки.ОписаниеОшибки = "Коды SKU ошибочны - список товаров пустой";

				КонецЕсли;

			Иначе

				СоставОшибки.Ошибка = Истина;
				СоставОшибки.КодОшибки		= "GET_LIST:SKU";
				СоставОшибки.ОписаниеОшибки = "Не указан атрибут [SKU]";
			
			КонецЕсли;

		Иначе

			СоставОшибки.Ошибка = Истина;
			СоставОшибки.КодОшибки		= "UNDEF_COMMAND";
			СоставОшибки.ОписаниеОшибки = "Неизвестная команда [" + ДанныеЗапроса.Command + "]";

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьСтруктуруТаблицыДанных()

	ТаблицаДанных = РегистрыСведений.КомплексОбменаMagento.СоздатьНаборЗаписей().ВыгрузитьКолонки(
		"Измерение_1, Измерение_2, Измерение_3, ТипРегистрации, Значение, Уточнение, Выгружен"
	);

	ТаблицаДанных.Индексы.Добавить("Измерение_1, Измерение_2, Измерение_3, Уточнение");

	Возврат ТаблицаДанных;

КонецФункции

Процедура ПолучитьДанныеРегистрации(СписокТоваров, ДанныеЗапроса, ЗаписьJSON, СоставОшибки)

	Запрос = Новый Запрос(ТекстЗапросаПоРегистрации());

	Запрос.УстановитьПараметр("СписокТоваров", СписокТоваров);

	УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();
	Запрос.УстановитьПараметр("ИнтернетМагазин", УчетнаяПолитика.ИнтернетМагазин);
	Запрос.УстановитьПараметр("СкладЦентральныйИнтернетМагазина", УчетнаяПолитика.СкладЦентральныйИнтернетМагазина);

	Результаты = Запрос.ВыполнитьПакет();

	ТоварыВыборка = Результаты[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДеталиВыборка = Результаты[4].Выбрать();

	ЗаписьJSON.ЗаписатьИмяСвойства("goods");

		ЗаписьJSON.ЗаписатьНачалоМассива();

		Пока ТоварыВыборка.Следующий() Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

			JSON.ЗаписатьСвойство("sku"		, ТоварыВыборка.КодТовара, ЗаписьJSON);
			JSON.ЗаписатьСвойство("qty"		, ТоварыВыборка.КоличествоСклад , ЗаписьJSON);
			JSON.ЗаписатьСвойство("qty_r1"	, ТоварыВыборка.КоличествоЗаказы, ЗаписьJSON);

			СкладыВыборка = ТоварыВыборка.Выбрать();

			ЗаписьJSON.ЗаписатьИмяСвойства("stock");

				ЗаписьJSON.ЗаписатьНачалоМассива();

				Пока СкладыВыборка.Следующий() Цикл

					ЗаписьJSON.ЗаписатьНачалоОбъекта();

						JSON.ЗаписатьСвойство("wh_code"	, СкладыВыборка.КодСклада, ЗаписьJSON);
						JSON.ЗаписатьСвойство("qty"		, СкладыВыборка.КоличествоСклад , ЗаписьJSON);
						JSON.ЗаписатьСвойство("qty_r1"	, СкладыВыборка.КоличествоЗаказы, ЗаписьJSON);

						СтруктураОтбора = Новый Структура(
							"КодСклада, КодТовара"
							, СкладыВыборка.КодСклада, СкладыВыборка.КодТовара);

						БылаДетализация = Ложь;

						Пока ДеталиВыборка.НайтиСледующий(СтруктураОтбора) Цикл

							Если НЕ БылаДетализация Тогда

								ЗаписьJSON.ЗаписатьИмяСвойства("detailing");
								ЗаписьJSON.ЗаписатьНачалоМассива();

							КонецЕсли;

							БылаДетализация = Истина;

							ЗаписьJSON.ЗаписатьНачалоОбъекта();

								JSON.ЗаписатьСвойство("number", СокрЛП(ДеталиВыборка.НомерЗаказа), ЗаписьJSON);
								JSON.ЗаписатьСвойство("qty_r1", ДеталиВыборка.КоличествоЗаказы, ЗаписьJSON);

							ЗаписьJSON.ЗаписатьКонецОбъекта();

						КонецЦикла;

						Если БылаДетализация Тогда

							ЗаписьJSON.ЗаписатьКонецМассива();

						КонецЕсли;

					ЗаписьJSON.ЗаписатьКонецОбъекта();

				КонецЦикла;

				ЗаписьJSON.ЗаписатьКонецМассива();

			ЗаписьJSON.ЗаписатьКонецОбъекта();

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();

	JSON.ЗаписатьСвойство("count_results", ТоварыВыборка.Количество(), ЗаписьJSON);

КонецПроцедуры

Функция ТекстЗапросаПоРегистрации(ПоСкладуIDN = Ложь)

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаСправочник.IDN КАК КодСклада,
	|	ТаблицаРеквизиты.Ссылка КАК Склад,
	|	ТаблицаСправочник.Магазин КАК Магазин,
	|	ТаблицаСправочник.НазначениеСклада КАК НазначениеСклада
	|ПОМЕСТИТЬ Склады
	|ИЗ
	|	Справочник.Склады КАК ТаблицаСправочник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады.ДополнительныеРеквизиты КАК ТаблицаРеквизиты
	|		ПО ТаблицаСправочник.Ссылка = ТаблицаРеквизиты.Ссылка
	|ГДЕ
	|	НЕ ТаблицаСправочник.Магазин = &ИнтернетМагазин
	|	И ТаблицаРеквизиты.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.СкладОтраженВОстаткахДляИнтернетМагазина)
	|	И ТаблицаРеквизиты.Значение = ИСТИНА
	|	И НЕ ТаблицаРеквизиты.Ссылка.IDN = """"
	|	И НЕ(ТаблицаСправочник.Блокирован
	|				ИЛИ ТаблицаСправочник.ПометкаУдаления)
	|	И НЕ ТаблицаСправочник.НазначениеСклада = ЗНАЧЕНИЕ(Перечисление.НазначенияСкладов.Брак)
	|	И ТаблицаСправочник.IDN = &ПоСкладуIDN
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК Номенклатура,
	|	ТаблицаСправочник.IDN КАК КодТовара
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Ссылка В(&СписокТоваров)
	|	И НЕ ТаблицаСправочник.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыСклады.КодСклада КАК КодСклада,
	|	РеквизитыТовары.КодТовара КАК КодТовара,
	|	ТаблицаОстатков.Заказ.НомерЗаказаНаСайте КАК НомерЗаказа,
	|	СУММА(ТаблицаОстатков.КоличествоОстаток) КАК КоличествоЗаказы
	|ПОМЕСТИТЬ Заказы
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	|			,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						Товары.Номенклатура
	|					ИЗ
	|						Товары)
	|				И НЕ Магазин = &ИнтернетМагазин) КАК ТаблицаОстатков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Склады КАК РеквизитыСклады
	|		ПО ТаблицаОстатков.Магазин = РеквизитыСклады.Магазин
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК РеквизитыТовары
	|		ПО ТаблицаОстатков.Номенклатура = РеквизитыТовары.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатков.Заказ.НомерЗаказаНаСайте,
	|	РеквизитыСклады.КодСклада,
	|	РеквизитыТовары.КодТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТоваров.КодСклада КАК КодСклада,
	|	ДанныеТоваров.КодТовара КАК КодТовара,
	|	СУММА(ДанныеТоваров.КоличествоСклад) КАК КоличествоСклад,
	|	СУММА(ДанныеТоваров.КоличествоЗаказы) КАК КоличествоЗаказы
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеквизитыСклады.КодСклада КАК КодСклада,
	|		РеквизитыТовары.КодТовара КАК КодТовара,
	|		ТоварыНаСкладах.КоличествоОстаток КАК КоличествоСклад,
	|		0 КАК КоличествоЗаказы
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				Номенклатура В
	|						(ВЫБРАТЬ
	|							Товары.Номенклатура
	|						ИЗ
	|							Товары)
	|					И Склад В
	|						(ВЫБРАТЬ
	|							Склады.Склад
	|						ИЗ
	|							Склады)) КАК ТоварыНаСкладах
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Склады КАК РеквизитыСклады
	|			ПО ТоварыНаСкладах.Склад = РеквизитыСклады.Склад
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК РеквизитыТовары
	|			ПО ТоварыНаСкладах.Номенклатура = РеквизитыТовары.Номенклатура
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РеквизитыСклады.КодСклада,
	|		РеквизитыТовары.КодТовара,
	|		ТаблицаРегистра.Количество,
	|		0
	|	ИЗ
	|		РегистрСведений.ИнформативныеОстаткиТоваровПоСкладам КАК ТаблицаРегистра
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Склады КАК РеквизитыСклады
	|			ПО ТаблицаРегистра.Склад = РеквизитыСклады.Склад
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК РеквизитыТовары
	|			ПО ТаблицаРегистра.Номенклатура = РеквизитыТовары.Номенклатура
	|	ГДЕ
	|		ТаблицаРегистра.Номенклатура В
	|				(ВЫБРАТЬ
	|					Товары.Номенклатура
	|				ИЗ
	|					Товары)
	|		И ТаблицаРегистра.Склад В
	|				(ВЫБРАТЬ
	|					Склады.Склад
	|				ИЗ
	|					Склады)
	|		И НЕ ТаблицаРегистра.Склад = &СкладЦентральныйИнтернетМагазина
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыПокупателей.КодСклада,
	|		ЗаказыПокупателей.КодТовара,
	|		0,
	|		СУММА(ЗаказыПокупателей.КоличествоЗаказы)
	|	ИЗ
	|		Заказы КАК ЗаказыПокупателей
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыПокупателей.КодСклада,
	|		ЗаказыПокупателей.КодТовара) КАК ДанныеТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеТоваров.КодСклада,
	|	ДанныеТоваров.КодТовара
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодТовара,
	|	КодСклада
	|ИТОГИ
	|	СУММА(КоличествоСклад),
	|	СУММА(КоличествоЗаказы)
	|ПО
	|	КодТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказы.КодСклада КАК КодСклада,
	|	ТаблицаЗаказы.КодТовара КАК КодТовара,
	|	ТаблицаЗаказы.НомерЗаказа КАК НомерЗаказа,
	|	ТаблицаЗаказы.КоличествоЗаказы КАК КоличествоЗаказы
	|ИЗ
	|	Заказы КАК ТаблицаЗаказы
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодТовара,
	|	КодСклада
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Склады
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Заказы"
	;

	Если Не ПоСкладуIDN Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ТаблицаСправочник.IDN = &ПоСкладуIDN", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

//	LNK 17.05.2022 18:41:17
Функция ОтключитьИспользованиеВОтборе(ФильтрВыборки)

//	отключаем ненужные на сегодня фильтры
	Для каждого НаборЗаписей Из ФильтрВыборки Цикл

		НаборЗаписей.Отбор.Измерение_1.Использование	= Ложь;
		НаборЗаписей.Отбор.Измерение_3.Использование	= Ложь;
		НаборЗаписей.Отбор.ТипРегистрации.Использование	= Ложь;

	КонецЦикла;

	Возврат ФильтрВыборки;

КонецФункции

Процедура УстановитьВыгруженВКомплексеОбмена(ТаблицаДанных)

	НаборЗаписей = РегистрыСведений.КомплексОбменаMagento.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииРозницаMagento", Истина);

	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл

		Если СтрокаТаблицы.Выгружен = Истина Тогда

			Продолжить;

		КонецЕсли;

		НаборЗаписей.Отбор.Измерение_1.Установить(СтрокаТаблицы.Измерение_1);
		НаборЗаписей.Отбор.Измерение_2.Установить(СтрокаТаблицы.Измерение_2);
		НаборЗаписей.Отбор.Измерение_3.Установить(СтрокаТаблицы.Измерение_3);
		НаборЗаписей.Отбор.ТипРегистрации.Установить(СтрокаТаблицы.ТипРегистрации);

		НаборЗаписей.Прочитать();

		Для каждого ЗаписьНабора Из НаборЗаписей Цикл

			ЗаписьНабора.Выгружен = Истина;
			ЗаписьНабора.ДатаВыгружен = ТекущаяДата();

		КонецЦикла;

		НаборЗаписей.Записать();

	КонецЦикла;

КонецПроцедуры

Процедура УдалитьРегистрациюИзменений(УзелПолучатель, НомерСообщения)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаИзменения.Измерение_1 КАК Измерение_1,
	|	ТаблицаИзменения.Измерение_2 КАК Измерение_2,
	|	ТаблицаИзменения.Измерение_3 КАК Измерение_3,
	|	ТаблицаИзменения.ТипРегистрации КАК ТипРегистрации,
	|	ТаблицаИзменения.НомерСообщения КАК НомерСообщения
	|ИЗ
	|	РегистрСведений.КомплексОбменаMagento.Изменения КАК ТаблицаИзменения
	|ГДЕ
	|	ТаблицаИзменения.Узел = &УзелПолучатель
	|	И ТаблицаИзменения.НомерСообщения <= &НомерСообщения
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСообщения"
	);
	Запрос.УстановитьПараметр("УзелПолучатель", УзелПолучатель);
	Запрос.УстановитьПараметр("НомерСообщения", НомерСообщения);
	
	ИзмененияВыборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.КомплексОбменаMagento.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииРозницаMagento", Истина);

	Пока ИзмененияВыборка.Следующий() Цикл

		НаборЗаписей.Отбор.Измерение_1.Установить(ИзмененияВыборка.Измерение_1);
		НаборЗаписей.Отбор.Измерение_2.Установить(ИзмененияВыборка.Измерение_2);
		НаборЗаписей.Отбор.Измерение_3.Установить(ИзмененияВыборка.Измерение_3);
		НаборЗаписей.Отбор.ТипРегистрации.Установить(ИзмененияВыборка.ТипРегистрации);

		НаборЗаписей.Записать();

	КонецЦикла;

	ПланыОбмена.УдалитьРегистрациюИзменений(УзелПолучатель, НомерСообщения);

КонецПроцедуры

//	LNK 09.05.2022 06:56:05
Процедура УдалитьРегистрациюПоТаблицеКлючей(ТаблицаКлючей, Краткий = Ложь)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;
	
	УзелПолучатель = ОбменMagentoПовтИсп.ПолучитьАктивныйУзел();

	НаборЗаписей = РегистрыСведений.КомплексОбменаMagento.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииРозницаMagento", Истина);

	Для каждого КлючЗаписи Из ТаблицаКлючей Цикл

		НачатьТранзакцию();

		Попытка

			НаборЗаписей.Отбор.Измерение_2.Установить(КлючЗаписи.Измерение_2);	//	всегда есть

			Если Краткий = Истина Тогда

				НаборЗаписей.Отбор.Измерение_1.Использование = Ложь;
				НаборЗаписей.Отбор.Измерение_3.Использование = Ложь;
				НаборЗаписей.Отбор.ТипРегистрации.Использование = Ложь;

			Иначе

				НаборЗаписей.Отбор.Измерение_1.Установить(КлючЗаписи.Измерение_1);
				НаборЗаписей.Отбор.Измерение_3.Установить(КлючЗаписи.Измерение_3);
				НаборЗаписей.Отбор.ТипРегистрации.Установить(КлючЗаписи.ТипРегистрации);

			КонецЕсли;

			НаборЗаписей.Записать();

			ПланыОбмена.УдалитьРегистрациюИзменений(УзелПолучатель, НаборЗаписей);

			ЗафиксироватьТранзакцию();

		Исключение

			ТекстОшибки = ОписаниеОшибки();

			ОтменитьТранзакцию();

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

#Область ФункционалПолнойРегистрации

//	LNK 23.05.2022 11:43:23
Процедура ВыполнитьПолнуюРегистрациюТоварногоСостояния(УзелПолучатель, ДанныеЗапроса, СоставОшибки)	Экспорт

	КоличествоПопыток = 10;

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если НЕ СоставОшибки.Ошибка = Истина Тогда

		УзелОбъект = УзелПолучатель.ПолучитьОбъект();
		#Если _ Тогда
		УзелОбъект = ПланыОбмена.ОбменРозницаMagento.СоздатьУзел();
		#КонецЕсли

		Для ИндексБлока = 1 По КоличествоПопыток Цикл	//	пытаемся заблокировать узел несколько раз..

		//	В нормале эта процедура выполняется фоново.. ждём, а вдруг не успела
		//	произойти разблокировка узла в "верхней" процедуре вызова
			ОбщегоНазначенияКлиентСервер.Пауза();

			Попытка

				УзелОбъект.Заблокировать();
				Прервать;

			Исключение

				Если ИндексБлока = КоличествоПопыток Тогда

					СоставОшибки.Ошибка			= Истина;
					СоставОшибки.КодОшибки		= "NO_BLOCK_FULL_REG:ROOT";
					СоставОшибки.ОписаниеОшибки = "Регистрация в узел [" + СокрЛП(УзелПолучатель) + "]:" + Символы.ПС + ОписаниеОшибки();

				КонецЕсли;

			КонецПопытки;

		КонецЦикла;

		Атрибуты = Новый Структура("Всего, Счётчик", 0, 0);

		Если НЕ УзелОбъект.Заблокирован() Тогда

			ВыполнитьПолнуюРегистрацию_ПротоколЗаписать(ДанныеЗапроса.IDP
				, "Не удалось заблокировать узел обмена"	//	Комментарий
				, УзелОбъект.Ссылка							//	Данные
				, Атрибуты									//	Атрибуты счётчика
				, "PROC:NoBlock"	//	###						Статус
				, УровеньЖурналаРегистрации.Ошибка
			);

		Иначе	//	получилось! - работаем

			ВыполнитьПолнуюРегистрацию_ПротоколЗаписать(ДанныеЗапроса.IDP
				, "Начало полной регистрации"				//	Комментарий
				, УзелОбъект.Ссылка							//	Данные
				, Атрибуты									//	Атрибуты счётчика
				, "PROC:Start"		//	###						Статус
				, УровеньЖурналаРегистрации.Информация
			);

			Если ВыполнитьПолнуюРегистрацию_Очистка(УзелПолучатель, ДанныеЗапроса, Атрибуты, СоставОшибки) Тогда

				Если ВыполнитьПолнуюРегистрацию_Заполнение(УзелПолучатель, ДанныеЗапроса, Атрибуты, СоставОшибки) Тогда

					УзелОбъект.НомерОтправленного = 0;
					УзелОбъект.Записать();

					ВыполнитьПолнуюРегистрацию_ПротоколЗаписать(ДанныеЗапроса.IDP
						, "Успешное завершение полной регистрации. Номер сообщения сброшен"	//	Комментарий
						, УзелОбъект.Ссылка													//	Данные
						, Атрибуты															//	Атрибуты счётчика
						, "PROC:End"		//	###												Статус
						, УровеньЖурналаРегистрации.Информация
					);

				КонецЕсли;

			КонецЕсли;

			УзелОбъект.Разблокировать();

			Если СоставОшибки.Ошибка = Истина Тогда

				ВыполнитьПолнуюРегистрацию_ПротоколЗаписать(ДанныеЗапроса.IDP
					, "Процесс НЕ выполнен: " + СоставОшибки.ОписаниеОшибки	//	Комментарий
					, УзелОбъект.Ссылка										//	Данные
					, Атрибуты												//	Атрибуты счётчика
					, "PROC:Error"	//	###										Статус
					, УровеньЖурналаРегистрации.Ошибка
				);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 23.05.2022 12:00:49
Функция ВыполнитьПолнуюРегистрацию_Очистка(УзелПолучатель, ДанныеЗапроса, Атрибуты, СоставОшибки)

	НачатьТранзакцию();

	Попытка

		ВыполнитьПолнуюРегистрацию_ПротоколЗаписать(ДанныеЗапроса.IDP
			, "Очистка таблиц регистрации: Начало"		//	Комментарий
			, УзелПолучатель							//	Данные
			, Атрибуты									//	Атрибуты счётчика
			, "PROC:Cleaning:Start"	//	###					Статус
			, УровеньЖурналаРегистрации.Примечание
		);

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ТаблицаРегистра.Измерение_2) КАК Счётчик
		|ИЗ
		|	РегистрСведений.КомплексОбменаMagento КАК ТаблицаРегистра"
		);
		
		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда

			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();

			Атрибуты.Счётчик = Выборка.Счётчик;

		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.КомплексОбменаMagento.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииРозницаMagento", Истина);

		НаборЗаписей.Записать();

		ПланыОбмена.УдалитьРегистрациюИзменений(УзелПолучатель, Метаданные.РегистрыСведений.КомплексОбменаMagento);

		ЗафиксироватьТранзакцию();

		Атрибуты.Всего = Атрибуты.Счётчик;

		ВыполнитьПолнуюРегистрацию_ПротоколЗаписать(ДанныеЗапроса.IDP
			, "Очистка таблиц регистрации: Успешное завершение"		//	Комментарий
			, УзелПолучатель										//	Данные
			, Атрибуты												//	Атрибуты счётчика
			, "PROC:Cleaning:Successfully"	//	###						Статус
			, УровеньЖурналаРегистрации.Примечание
		);

	Исключение

		СоставОшибки.Ошибка			= Истина;
		СоставОшибки.КодОшибки		= "NO_FULL_REG:DELETE";
		СоставОшибки.ОписаниеОшибки = "Очистка регистрации [" + СокрЛП(УзелПолучатель) + "]:" + Символы.ПС + ОписаниеОшибки();

		ОтменитьТранзакцию();

		ВыполнитьПолнуюРегистрацию_ПротоколЗаписать(ДанныеЗапроса.IDP
			, СоставОшибки.ОписаниеОшибки		//	Комментарий
			, УзелПолучатель					//	Данные
			, Атрибуты							//	Атрибуты счётчика
			, "PROC:Cleaning:Error"	//	###			Статус
			, УровеньЖурналаРегистрации.Ошибка
		);

	КонецПопытки;

	Возврат НЕ СоставОшибки.Ошибка = Истина;

КонецФункции

//	LNK 24.05.2022 06:45:15
Функция ВыполнитьПолнуюРегистрацию_Заполнение(УзелПолучатель, ДанныеЗапроса, Атрибуты, СоставОшибки)

	Если НЕ СоставОшибки.Ошибка = Истина Тогда

		Запрос = Новый Запрос(ТекстЗапросаТоварноеСостояние());

		УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();
		Запрос.УстановитьПараметр("ИнтернетМагазин", УчетнаяПолитика.ИнтернетМагазин);
	//	LNK 17.05.2022 19:24:31	- параметр ниже НЕ используется по требованию Михайлова - им нужны только склады 1С:Розница
		Запрос.УстановитьПараметр("СкладЦентральныйИнтернетМагазина", УчетнаяПолитика.СкладЦентральныйИнтернетМагазина);

		НаборЗаписей  = РегистрыСведений.КомплексОбменаMagento.СоздатьНаборЗаписей();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииРозницаMagento", Истина);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		НаборЗаписей.ОбменДанными.Получатели.Добавить(УзелПолучатель);

		ИтерацияСчётчик		= 0;
		ИтерацияОграничение	= 100;	//	цифра с потолка взята.. хез

		Атрибуты.Всего	 = 0;
		Атрибуты.Счётчик = 0;

		ВыполнитьПолнуюРегистрацию_ПротоколЗаписать(ДанныеЗапроса.IDP
			, "Заполнение таблиц регистрации: Начало"	//	Комментарий
			, УзелПолучатель							//	Данные
			, Атрибуты									//	Атрибуты счётчика
			, "PROC:Filling:Start"	//	###					Статус
			, УровеньЖурналаРегистрации.Примечание
		);

		Пока Истина Цикл

			ИтерацияСчётчик = ИтерацияСчётчик + 1;

			СоставОшибки.Ошибка			= Ложь;
			СоставОшибки.КодОшибки		= "";
			СоставОшибки.ОписаниеОшибки = "";

			Попытка

				РезультатЗапроса = Запрос.Выполнить();

				Если РезультатЗапроса.Пустой() Тогда

					Прервать;

				Иначе

					ДанныеРегистрации = РезультатЗапроса.Выбрать();

					Если ИтерацияСчётчик = 1 Тогда

						Атрибуты.Всего = ДанныеРегистрации.Количество();

					Иначе

						ВыполнитьПолнуюРегистрацию_ПротоколЗаписать(ДанныеЗапроса.IDP
							, "Итерация #" + ИтерацияСчётчик + "#: Повтор"	//	Комментарий
							, УзелПолучатель								//	Данные
							, Атрибуты										//	Атрибуты счётчика
							, "PROC:Filling:Repeat"	//	###						Статус
							, УровеньЖурналаРегистрации.Примечание
						);

					КонецЕсли;

					Счётчик = 0;	//	элемент отладки.

					Пока ДанныеРегистрации.Следующий() Цикл

						НаборЗаписей.Очистить();
						НаборЗаписей.Отбор.Измерение_2.Установить(ДанныеРегистрации.Номенклатура);

						ЗаписьНабора = НаборЗаписей.Добавить();

						ЗаписьНабора.Измерение_2	= ДанныеРегистрации.Номенклатура;
						ЗаписьНабора.Значение		= ТекущаяДата();
						ЗаписьНабора.ДатаИзменения	= ТекущаяДата();

						НаборЗаписей.Записать();

						Счётчик = Счётчик + 1;	//	в текущей итерации
						Атрибуты.Счётчик = Атрибуты.Счётчик + 1;	//	учитывает общее количество объектов

						Если Атрибуты.Счётчик % 1000 = 0 Тогда

							ВыполнитьПолнуюРегистрацию_ПротоколЗаписать(ДанныеЗапроса.IDP
								, "Заполнение таблиц регистрации: .. процесс"	//	Комментарий
								, УзелПолучатель								//	Данные
								, Атрибуты										//	Атрибуты счётчика
								, "PROC:Filling:Processing"	//	###					Статус
								, УровеньЖурналаРегистрации.Примечание
							);

						КонецЕсли;

					КонецЦикла;

				КонецЕсли;

			Исключение

				СоставОшибки.Ошибка			= Истина;
				СоставОшибки.КодОшибки		= "NO_FULL_REG:FILLING";
				СоставОшибки.ОписаниеОшибки = "Фиксация данных [" + СокрЛП(УзелПолучатель) + "]:" + Символы.ПС + ОписаниеОшибки();

				ВыполнитьПолнуюРегистрацию_ПротоколЗаписать(ДанныеЗапроса.IDP
					, "Итерация #" + ИтерацияСчётчик + "#: " + СоставОшибки.ОписаниеОшибки	//	Комментарий
					, УзелПолучатель														//	Данные
					, Атрибуты																//	Атрибуты счётчика
					, "PROC:Filling:Error"	//	###												Статус
					, УровеньЖурналаРегистрации.Ошибка
				);

			КонецПопытки;

			Если ИтерацияСчётчик >= ИтерацияОграничение Тогда

				Прервать;

			КонецЕсли;

		КонецЦикла;

		Если НЕ СоставОшибки.Ошибка = Истина Тогда

			ВыполнитьПолнуюРегистрацию_ПротоколЗаписать(ДанныеЗапроса.IDP
				, "Заполнение таблиц регистрации: Успешное завершение"	//	Комментарий
				, УзелПолучатель										//	Данные
				, Атрибуты												//	Атрибуты счётчика
				, "PROC:Filling:Successfully"	//	###						Статус
				, УровеньЖурналаРегистрации.Примечание
			);

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ СоставОшибки.Ошибка = Истина;

КонецФункции

//	LNK 06.05.2022 07:35:14
Функция ТекстЗапросаТоварноеСостояние()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаРеквизиты.Ссылка КАК Склад,
	|	ТаблицаСправочник.Магазин КАК Магазин
	|ПОМЕСТИТЬ Склады
	|ИЗ
	|	Справочник.Склады КАК ТаблицаСправочник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады.ДополнительныеРеквизиты КАК ТаблицаРеквизиты
	|		ПО ТаблицаСправочник.Ссылка = ТаблицаРеквизиты.Ссылка
	|ГДЕ
	|	НЕ ТаблицаСправочник.Магазин = &ИнтернетМагазин
	|	И ТаблицаРеквизиты.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.СкладОтраженВОстаткахДляИнтернетМагазина)
	|	И ТаблицаРеквизиты.Значение = ИСТИНА
	|	И НЕ ТаблицаРеквизиты.Ссылка.IDN = """"
	|	И НЕ(ТаблицаСправочник.Блокирован
	|				ИЛИ ТаблицаСправочник.ПометкаУдаления)
	|	И НЕ ТаблицаСправочник.НазначениеСклада = ЗНАЧЕНИЕ(Перечисление.НазначенияСкладов.Брак)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад,
	|	Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСклады.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Номенклатура.WEB_Выгружать
	|				И Склад В
	|					(ВЫБРАТЬ
	|						Склады.Склад
	|					ИЗ
	|						Склады)) КАК ТаблицаСклады
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаРезервы.Номенклатура
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	|			,
	|			Номенклатура.WEB_Выгружать
	|				И Магазин В
	|					(ВЫБРАТЬ
	|						Склады.Магазин
	|					ИЗ
	|						Склады)
	|				И НЕ Магазин = &ИнтернетМагазин) КАК ТаблицаРезервы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведущая.Номенклатура КАК Номенклатура
	|ИЗ
	|	Товары КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КомплексОбменаMagento КАК ТаблицаНаличие
	|		ПО Ведущая.Номенклатура = ТаблицаНаличие.Измерение_2
	|ГДЕ
	|	ТаблицаНаличие.Измерение_2 ЕСТЬ NULL"
	;
	Возврат ТекстЗапроса;

КонецФункции

#Область ПротоколированиеПолнойРегистрации

Процедура ВыполнитьПолнуюРегистрацию_ПротоколЗаписать(IDP, ПредставлениеДанных, Данные, Атрибуты, Статус, УровеньЖурнала)

	ЖурналСобытий.Регистрация("MAGENTO_FULL_REG." + Статус
		, УровеньЖурнала
		, Метаданные.ПланыОбмена.ОбменРозницаMagento
		, Данные
		,
		, ПредставлениеДанных
		, IDP + "#" + Формат(Атрибуты.Счётчик, "ЧН=0; ЧГ=") + ":" + Формат(Атрибуты.Всего, "ЧН=0; ЧГ=")
		, Ложь
		, Ложь
	);

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"MAGENTO_INTEGRATION", 
		"FULL_REG_PROCESS", 
		СоставХранилищаПротокола(IDP, Статус, Атрибуты, ПредставлениеДанных)
	);

КонецПроцедуры

Функция ВыполнитьПолнуюРегистрацию_ПротоколПолучить()	Экспорт

	ДанныеПротокола = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"MAGENTO_INTEGRATION",
		"FULL_REG_PROCESS",
		СоставХранилищаПротокола()
	);

	Возврат ДанныеПротокола;

КонецФункции

Функция СоставХранилищаПротокола(IDP = "", Статус = "", Атрибуты = Неопределено, ТекстСообщения = "")

	ДанныеПротокола = Новый Структура(
		"IDP, Период, Статус, Атрибуты, ТекстСообщения"
		, IDP
		, ТекущаяДата()
		, Статус
		, Атрибуты
		, ТекстСообщения
	);

	Возврат ДанныеПротокола;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область РаботаСДатамиJSON

Функция ИменаТипаДата()	Экспорт

	ИменаДата = Новый Массив;

	ИменаДата.Добавить("Date");
	ИменаДата.Добавить("DateReserve");

	ИменаДата.Добавить("TimeChangeStatus");
	ИменаДата.Добавить("TimeSend");

	ИменаДата.Добавить("DateAccrual");
	ИменаДата.Добавить("DateCancel");

	ИменаДата.Добавить("Date_Born");
	ИменаДата.Добавить("Date_Child_Born");

	Возврат ИменаДата;

КонецФункции

//	LNK 09.11.2021 08:22:17
Функция ПолучитьДатуОтMagento(Свойство, Значение, ДополнительныеПараметры)	Экспорт

//	Значение = "1960/01/04 17:43:15"

	Если НЕ (НЕ ТипЗнч(Значение) = Тип("Строка") ИЛИ ПустаяСтрока(Значение)) Тогда	//	предохранитель

		ЗначениеВозврата = СтрЗаменить(Значение, "/", "");
		ЗначениеВозврата = СтрЗаменить(ЗначениеВозврата, " ", "");
		ЗначениеВозврата = СтрЗаменить(ЗначениеВозврата, ":", "");
		ЗначениеВозврата = СтрЗаменить(ЗначениеВозврата, "T", "");
		ЗначениеВозврата = СтрЗаменить(ЗначениеВозврата, "-", "");
		//ЗначениеВозврата = СтрЗаменить(СтрЗаменить(СтрЗаменить(Значение, "/", ""), " ", ""), ":", "");
		ЗначениеВозврата = ?(ПустаяСтрока(ЗначениеВозврата), '00010101', Дата(ЗначениеВозврата));

	Иначе

		ЗначениеВозврата = '00010101';

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции

//	LNK 27.09.2022 08:30:36
&НаСервере
Функция ПередатьДатуДляMagento(Свойство, Значение, ДополнительныеПараметры, Отказ)	Экспорт

	Если ТипЗнч(Значение) = Тип("РегистрСведенийНаборЗаписей.АннуляцияПродажи") Тогда	//	преобразование даты "ХитраяДата(Значение)"

		ЗначениеВозврата = Формат(Значение.Отбор.Период.Значение, "ДФ='yyyy/MM/dd ЧЧ:мм:сс'");

	Иначе

		ЗначениеВозврата = Значение;

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции

//	LNK 27.09.2022 12:29:20
Функция ХитраяДата(Значение)	Экспорт

	НекийОбъект = РегистрыСведений.АннуляцияПродажи.СоздатьНаборЗаписей();
	НекийОбъект.Отбор.Период.Установить(Значение);

	Возврат НекийОбъект;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьЗначениеПоТипу(ЗначениеДанных, ИмяЗначения, ТипЗначения, ДанныеВнешние)

	Перем ЗначениеВходящее;

	#Если _ Тогда
	ДанныеВнешние = Новый Структура;
	#КонецЕсли

	Если ДанныеВнешние.Свойство(ИмяЗначения, ЗначениеВходящее) Тогда

		Если ТипЗначения = Тип("Строка") Тогда

			ЗначениеДанных = СокрЛП(ЗначениеВходящее);

		ИначеЕсли ТипЗначения = Тип("Число") ИЛИ ТипЗначения = Тип("Булево")
			ИЛИ  (ТипЗначения = Тип("Дата") И ТипЗнч(ЗначениеДанных) = Тип("Дата")) Тогда

			ЗначениеДанных = ЗначениеВходящее;

		ИначеЕсли ТипЗначения = Тип("Дата") Тогда	//	для совместимости

			ЗначениеДанных = ОбменMicrosoftDynamicsКлиентСервер.ПривестиДату(ЗначениеВходящее);

		ИначеЕсли ТипЗначения = "НомерТелефона" Тогда

			ЗначениеДанных = ОтправкаSMS.ПодготовитьНомерТелефона(ЗначениеВходящее, Истина);

		ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ПолФизическогоЛица") Тогда

			ЗначениеДанных = ?(НРег(ЗначениеВходящее) = "female" ИЛИ ЗначениеВходящее = 0, Перечисления.ПолФизическогоЛица.Женский, Перечисления.ПолФизическогоЛица.Мужской);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ЗначениеПоТипу(ДанныеВнешние, Имя, ТипЗначения)

	Перем ЗначениеДанных;

	#Если _ Тогда
	ДанныеВнешние = Новый Структура;
	#КонецЕсли

	Попытка

		Если ДанныеВнешние.Свойство(Имя, ЗначениеДанных) И ТипЗнч(ЗначениеДанных) = ТипЗначения Тогда

			ЗначениеВозврата = ЗначениеДанных;

			Если ТипЗначения = Тип("Строка") Тогда

				ЗначениеВозврата = СокрЛП(ЗначениеДанных);

			КонецЕсли;

		Иначе
			
			СписокТипов = Новый Массив;
			СписокТипов.Добавить(ТипЗначения);
			ОписаниеТипов = Новый ОписаниеТипов(СписокТипов);

			ЗначениеВозврата = ОписаниеТипов.ПривестиЗначение(ЗначениеДанных);
		
		КонецЕсли;

	Исключение

		ТекстОшибки = "Имя:[" + Имя + "]; ДанныеВнешние:[" + ДанныеВнешние + "]"
			+ ОписаниеОшибки();
		ВызватьИсключение ТекстОшибки;

	КонецПопытки;

	Возврат ЗначениеВозврата;

КонецФункции

//	LNK 21.04.2022 11:11:38
Функция ПолучитьМассивУзлов(Активный = Ложь)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаУзлов.Ссылка КАК Узел
	|ИЗ
	|	ПланОбмена.ОбменРозницаMagento КАК ТаблицаУзлов
	|ГДЕ
	|	НЕ(ТаблицаУзлов.ЭтотУзел
	|				ИЛИ ТаблицаУзлов.ПометкаУдаления)
	|	И ВЫБОР
	|			КОГДА &Активный = ИСТИНА
	|				ТОГДА ТаблицаУзлов.Активен
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ"
	);
	Запрос.УстановитьПараметр("Активный", Активный);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Узел");

КонецФункции

//	LNK 23.04.2022 06:54:54
Функция СоздатьJSON(НомерСообщения = -1, ДанныеЗапроса, СоставОшибки = Неопределено)	Экспорт

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	JSON.ЗаписатьСвойство("IDBASE", Константы.ИдентификаторУчетнойСистемы.Получить(), ЗаписьJSON);
	JSON.ЗаписатьСвойство("Number_PackMGT", НомерСообщения, ЗаписьJSON);
	JSON.ЗаписатьСвойство("DIFF", СокрЛП(Новый УникальныйИдентификатор), ЗаписьJSON);

	Если ТипЗнч(ДанныеЗапроса) = Тип("Структура") И ДанныеЗапроса.Свойство("Command") Тогда

			JSON.ЗаписатьСвойство("Command", ДанныеЗапроса.Command, ЗаписьJSON);

	Иначе	JSON.ЗаписатьСвойство("Command", "Undef", ЗаписьJSON);

	КонецЕсли;

	Если НЕ СоставОшибки = Неопределено Тогда

		JSON.ЗаписатьСвойство("Error", JSON.БулевоКакЧисло(СоставОшибки.Ошибка), ЗаписьJSON);
		JSON.ЗаписатьСвойство("ErrorCode", СоставОшибки.КодОшибки, ЗаписьJSON);
		JSON.ЗаписатьСвойство("ErrorMessage", СоставОшибки.ОписаниеОшибки, ЗаписьJSON);

	КонецЕсли;

	Возврат ЗаписьJSON;

КонецФункции

Функция ПолучитьСкладMagentoПоIDN(IDN) Экспорт
	СкладВыбора = Справочники.Склады.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаРеквизиты.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК ТаблицаСправочник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады.ДополнительныеРеквизиты КАК ТаблицаРеквизиты
		|		ПО ТаблицаСправочник.Ссылка = ТаблицаРеквизиты.Ссылка
		|ГДЕ
		|	ТаблицаРеквизиты.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.СкладОтраженВОстаткахДляИнтернетМагазина)
		|	И ТаблицаРеквизиты.Значение = ИСТИНА
		|	И НЕ(ТаблицаСправочник.Блокирован
		|				ИЛИ ТаблицаСправочник.ПометкаУдаления)
		|	И НЕ ТаблицаСправочник.НазначениеСклада = ЗНАЧЕНИЕ(Перечисление.НазначенияСкладов.Брак)
		|	И ТаблицаСправочник.IDN = &IDN";
	
	Запрос.УстановитьПараметр("IDN", IDN);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда 
		СкладВыбора = Выборка.Склад;
	КонецЕсли;
	
	Возврат СкладВыбора;
КонецФункции 

Функция ПолучитьДанныеОстаткаПоСкладу(СписокТоваров, СкладIDN)

	ДоступныйОстаток = 0;
	
	Запрос = Новый Запрос(ТекстЗапросаПоРегистрации(Истина));

	Запрос.УстановитьПараметр("СписокТоваров", СписокТоваров);

	УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();
	Запрос.УстановитьПараметр("ИнтернетМагазин", УчетнаяПолитика.ИнтернетМагазин);
	Запрос.УстановитьПараметр("СкладЦентральныйИнтернетМагазина", УчетнаяПолитика.СкладЦентральныйИнтернетМагазина);
	Запрос.УстановитьПараметр("ПоСкладуIDN", СкладIDN);

	Результаты = Запрос.ВыполнитьПакет();

	ТоварыВыборка = Результаты[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	
	Пока ТоварыВыборка.Следующий() Цикл
		
		СкладыВыборка = ТоварыВыборка.Выбрать();
		
		Пока СкладыВыборка.Следующий() Цикл
			ДоступныйОстаток = СкладыВыборка.КоличествоСклад - СкладыВыборка.КоличествоЗаказы;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДоступныйОстаток;

КонецФункции

#КонецОбласти











