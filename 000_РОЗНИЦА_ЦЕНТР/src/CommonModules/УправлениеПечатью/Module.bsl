////////////////////////////////////////////////////////////////////////////////
// Подсистема "Печать".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Проверить, нужно ли печатать макет.
//
// Параметры:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - см. ПодготовитьКоллекциюПечатныхФорм();
//  ИмяМакета             - Строка          - имя проверяемого макета.
//
// Возвращаемое значение:
//  Булево - Истина, если макет надо печатать.
Функция НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяМакета) Экспорт
	
	Возврат КоллекцияПечатныхФорм.Найти(ВРег(ИмяМакета), "ИмяВРЕГ") <> Неопределено;
	
КонецФункции

// Добавляет табличный документ в коллекцию печатных форм.
//
// Параметры:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - см. ПодготовитьКоллекциюПечатныхФорм();
//  ИмяМакета             - Строка - имя макета;
//  СинонимМакета         - Строка - представление макета;
//  ТабличныйДокумент     - ТабличныйДокумент - печатная форма документа;
//  Картинка              - Картинка;
//  ПолныйПутьКМакету     - Строка - путь к макету в дереве метаданных.
//  ЭтоМногоязычнаяПечатнаяФорма - Булево - признак того что печатная форма может быть сформирована на другом языке
Процедура ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, СинонимМакета, ТабличныйДокумент, Картинка = Неопределено, ПолныйПутьКМакету = "", ЭтоМногоязычнаяПечатнаяФорма = Ложь) Экспорт

	Стр = КоллекцияПечатныхФорм.Найти(ВРег(ИмяМакета), "ИмяВРЕГ");
	#Если Клиент Тогда
	//ТабличныйДокумент = Новый ТабличныйДокумент;
	#КонецЕсли

	Если Стр <> Неопределено Тогда

		ТабличныйДокумент.Вывод = ИспользованиеВывода.Разрешить;	//	LNK 27.04.2020 10:29:58
		Стр.ТабличныйДокумент = ТабличныйДокумент;
		Стр.СинонимМакета = СинонимМакета;
		Стр.Картинка = Картинка;
		Стр.ПолныйПутьКМакету = ПолныйПутьКМакету;
		Стр.ЭтоМногоязычнаяПечатнаяФорма = ЭтоМногоязычнаяПечатнаяФорма;

	КонецЕсли;
	
КонецПроцедуры

// Задаёт область печати объекта в табличном документе.
// Применяется для связывания области в табличном документе, с объектом печати (ссылка).
// Необходимо вызывать при формировании очередной области печатной формы в табличном
// документе.
//
// Параметры:
//  ТабличныйДокумент - табличный документ - табличный документ печатной формы
//  НомерСтрокиНачало - число - позиция начала очередной области в документе
//  ОбъектыПечати - СписокЗначений - список объектов печати
//  Ссылка - ссылка на объект ИБ - объект печати
//
Процедура ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка) Экспорт
	
	Элемент = ОбъектыПечати.НайтиПоЗначению(Ссылка);
	Если Элемент = Неопределено Тогда
		ИмяОбласти = "Документ_" + Формат(ОбъектыПечати.Количество() + 1, "ЧН=; ЧГ=");
		ОбъектыПечати.Добавить(Ссылка, ИмяОбласти);
	Иначе
		ИмяОбласти = Элемент.Представление;
	КонецЕсли;
	
	НомерСтрокиОкончание = ТабличныйДокумент.ВысотаТаблицы;
	ТабличныйДокумент.Область(НомерСтрокиНачало, , НомерСтрокиОкончание, ).Имя = ИмяОбласти;

КонецПроцедуры

// Возвращает список внешних печатных форм.
//
// Параметры:
//  ПолноеИмяОбъектаМетаданных - Строка - полное имя объекта метаданных, для которого необходимо получить список печатных форм.
//
// Возвращаемое значение:
//  Список: значение      - Строка - идентификатор печатной формы;
//          представление - Строка - представление печатной формы.
Функция СписокПечатныхФормИзВнешнихИсточников(ПолноеИмяОбъектаМетаданных) Экспорт
	
	ВнешниеПечатныеФормы = Новый СписокЗначений;
	ПриПолученииСпискаВнешнихПечатныхФорм(ВнешниеПечатныеФормы, ПолноеИмяОбъектаМетаданных);
	
	Возврат ВнешниеПечатныеФормы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с шаблонами офисных документов

// Добавляет к параметру НаборОбластей новую запись об области
// Параметры
// НаборОбластей - массив - набор областей (массив структур)
// ИмяОбласти - строка - имя добавляемой области
// ТипОбласти - строка - тип области:
//			ВерхнийКолонтитул
//			НижнийКолонтитул
//			Общая
//			СтрокаТаблицы
//			Список
//
Процедура ДобавитьОписаниеОбласти(НаборОбластей, знач ИмяОбласти, знач ТипОбласти) Экспорт
	
	НоваяОбласть = Новый Структура;
	
	НоваяОбласть.Вставить("ИмяОбласти", ИмяОбласти);
	НоваяОбласть.Вставить("ТипОбласти", ТипОбласти);
	
	НаборОбластей.Вставить(ИмяОбласти, НоваяОбласть);
	
КонецПроцедуры

// Интерфейс для вызова из клиентских модулей печати форм по макетам офисных документов.
// Получает за один вызов всю необходимую информацию: данные объектов по макетам, двоичные
// данные макетов, описание областей макетов.
// Параметры:
// ИмяМенеджераПечати - строка - имя для обращения к менеджеру объекта, например "Документ.<Имя документа>"
// ИменаМакетов       - строка - имена макетов, по которым будут формироваться печатные формы
// СоставДокументов   - массив ссылок - ссылки на объекты информационной базы (должны быть одного типа)
//
Функция ПолучитьМакетыИДанныеОбъектов(знач ИмяМенеджераПечати,
									  знач ИменаМакетов,
									  знач СоставДокументов) Экспорт
	
	МассивИменМакетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(ИменаМакетов, " ", ""), ",");
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМенеджераПечати);
	МакетыИДанные = МенеджерОбъекта.ПолучитьДанныеПечати(СоставДокументов, МассивИменМакетов);
	МакетыИДанные.Вставить("ЛокальныйКаталогФайловПечати", ПолучитьЛокальныйКаталогФайловПечати());
	
	Возврат МакетыИДанные;
	
КонецФункции

// Возвращает макет по полному пути к макету.
// Параметры:
//  ПолныйПутьКМакету - Строка - формат полного пути:
//								"Документ.<ИмяДокумента>.<ИмяМакета>"
//								"Обработка.<ИмяОбработки>.<ИмяМакета>"
//								"ОбщийМакет.<ИмяМакета>"
//  КодЯзыка          - Строка - Код языка для многоязычных макетов,
//                               Пустая строка для одноязычных макетов
// Возвращаемое значение:
//	для макета типа MXL - табличный документ
//	для макетов DOC и ODT - двоичные данные
//
Функция ПолучитьМакет(ПолныйПутьКМакету, знач КодЯзыка = "") Экспорт
	
	КодЯзыка = НРег(СокрЛП(КодЯзыка));
	
	ЧастиПути = СтрЗаменить(ПолныйПутьКМакету, ".", Символы.ПС);
	
	Если СтрЧислоСтрок(ЧастиПути) = 3 Тогда
		ПутьКМетаданным = СтрПолучитьСтроку(ЧастиПути, 1) + "." + СтрПолучитьСтроку(ЧастиПути, 2);
		ПутьКОбъектуМетаданных = СтрПолучитьСтроку(ЧастиПути, 3);
	ИначеЕсли СтрЧислоСтрок(ЧастиПути) = 2 Тогда
		ПутьКМетаданным = СтрПолучитьСтроку(ЧастиПути, 1);
		ПутьКОбъектуМетаданных = СтрПолучитьСтроку(ЧастиПути, 2);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Макет ""%1"" не найден. Операция прервана.'"), ПолныйПутьКМакету);
	КонецЕсли;
	
	Если (Найти(ПутьКОбъектуМетаданных, "ПФ_DOC") ИЛИ Найти(ПутьКОбъектуМетаданных, "ПФ_ODT")) И Не ПустаяСтрока(КодЯзыка) Тогда
		// многоязычный DOC, ODT
		ПутьКОбъектуМетаданных = ПутьКОбъектуМетаданных+"_"+КодЯзыка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "Выбрать Макет КАК Макет, Использование КАК Использование
					|ИЗ
					|	РегистрСведений.ПользовательскиеМакетыПечати
					|ГДЕ
					|	Объект=&Объект
					|	И	ИмяМакета=&ИмяМакета
					|	И	Использование";
	
	Запрос.Параметры.Вставить("Объект", ПутьКМетаданным);
	Запрос.Параметры.Вставить("ИмяМакета", ПутьКОбъектуМетаданных);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Неопределено;
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Макет.Получить();
	Иначе
		Если СтрЧислоСтрок(ЧастиПути) = 3 Тогда
			Результат = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПутьКМетаданным).ПолучитьМакет(ПутьКОбъектуМетаданных);
		Иначе
			Результат = ПолучитьОбщийМакет(ПутьКОбъектуМетаданных);
		КонецЕсли;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Макет ""%1"" не найден. Операция прервана.'"), ПолныйПутьКМакету);
	КонецЕсли;
	
	Если Найти(ПутьКОбъектуМетаданных, "ПФ_MXL") И ЗначениеЗаполнено(КодЯзыка) Тогда
		Результат.КодЯзыкаМакета = КодЯзыка; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает на входе двоичные данные табличного документа
// и на их основе создает объект - табличный документ.
// Параметры
//  ДвоичныеДанные - двоичные данные табличного документа
// Возвращаемое значение
//  Табличный документ
//
Функция ПолучитьТабличныйДокументПоДвоичнымДанным(ДвоичныеДанные) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ИмяВременногоФайла);
	Если НЕ БезопасныйРежим() <> Ложь Тогда	//	может вернуть строку
		УдалитьФайлы(ИмяВременногоФайла);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"УправлениеПечатью");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.5";
	Обработчик.Процедура = "УправлениеПечатью.СброситьПользовательскиеНастройкиФормыПечатьДокументов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.3.22";
	Обработчик.Процедура = "УправлениеПечатью.ПреобразоватьДвоичныеДанныеПользовательскихМакетовMXLВТабличныеДокументы";
	
КонецПроцедуры

// Сбрасывает пользовательские настройки количества печатных форм и порядка.
Процедура СброситьПользовательскиеНастройкиФормыПечатьДокументов() Экспорт
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить("НастройкиПечатныхФорм", Неопределено, Неопределено);
КонецПроцедуры

// Преобразует пользовательские макеты MXL, хранящиеся в виде двоичных данных в табличные документы.
Процедура ПреобразоватьДвоичныеДанныеПользовательскихМакетовMXLВТабличныеДокументы() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПользовательскиеМакетыПечати.ИмяМакета,
	|	ПользовательскиеМакетыПечати.Объект,
	|	ПользовательскиеМакетыПечати.Макет,
	|	ПользовательскиеМакетыПечати.Использование
	|ИЗ
	|	РегистрСведений.ПользовательскиеМакетыПечати КАК ПользовательскиеМакетыПечати";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ВыборкаМакетов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаМакетов.Следующий() Цикл
		Если Лев(ВыборкаМакетов.ИмяМакета, 6) = "ПФ_MXL" Тогда
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			
			ДвоичныеДанныеМакета = ВыборкаМакетов.Макет.Получить();
			Если ТипЗнч(ДвоичныеДанныеМакета) <> Тип("ДвоичныеДанные") Тогда
				Продолжить;
			КонецЕсли;
			
			ДвоичныеДанныеМакета.Записать(ИмяВременногоФайла);
			
			ТабличныйДокументПрочитан = Истина;
			ТабличныйДокумент = Новый ТабличныйДокумент;
			Попытка
				ТабличныйДокумент.Прочитать(ИмяВременногоФайла);
			Исключение
				ТабличныйДокументПрочитан = Ложь; // файл оказался не табличным документом, удаляем.
			КонецПопытки;
			
			Запись = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаМакетов, , "Макет");
			
			Если ТабличныйДокументПрочитан Тогда
				Запись.Макет = Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9));
				Запись.Записать();
			Иначе
				Запись.Удалить();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает ссылку на объект-источник внешней печатной формы.
//
// Параметры:
//  Идентификатор              - Строка - идентификатор формы;
//  ПолноеИмяОбъектаМетаданных - Строка - полное имя объекта метаданных, для которого требуется получить ссылку
//                                        на источник внешней печатной формы.
//
// Возвращаемое значение:
//  Ссылка - см. УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику, параметр ИсточникДанных.
Функция ВнешняяПечатнаяФорма(Идентификатор, ПолноеИмяОбъектаМетаданных)
	ВнешняяПечатнаяФормаСсылка = Неопределено;
	
	ПриПолученииВнешнейПечатнойФормы(Идентификатор, ПолноеИмяОбъектаМетаданных, ВнешняяПечатнаяФормаСсылка);
	
	Возврат ВнешняяПечатнаяФормаСсылка;
КонецФункции

// Сформировать печатные формы
Процедура СформироватьПечатныеФормы(ИмяМенеджераПечати, Знач ИменаМакетов, МассивОбъектов, ПараметрыПечати,
	КоллекцияПечатныхФорм, ОбъектыПечати = Неопределено, ПараметрыВывода) Экспорт
	
	ПараметрыВывода = ПодготовитьСтруктуруПараметровВывода(ПараметрыВывода);
	
	Если ОбъектыПечати = Неопределено Тогда
		ОбъектыПечати = Новый СписокЗначений;
	КонецЕсли;
	
	
	КоллекцияПечатныхФорм = ПодготовитьКоллекциюПечатныхФорм(Новый Массив);
	
	Если ТипЗнч(ИменаМакетов) = Тип("Строка") Тогда
		ИменаМакетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаМакетов);
	Иначе // Тип("Массив")
		ИменаМакетов = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИменаМакетов);
	КонецЕсли;
	
	ПрефиксВнешнихПечатныхФорм = "ВнешняяПечатнаяФорма.";
	ВнешниеПечатныеФормы = СписокПечатныхФормИзВнешнихИсточников(ИмяМенеджераПечати);
	
	// добавление внешних печатных форм в комплект
	ДобавленныеВнешниеПечатныеФормы = Новый Массив;
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") 
		И ПараметрыПечати.Свойство("ДополнитьКомплектВнешнимиПечатнымиФормами") 
		И ПараметрыПечати.ДополнитьКомплектВнешнимиПечатнымиФормами Тогда 
		
		ИдентификаторыВнешнихПечатныхФорм = ВнешниеПечатныеФормы.ВыгрузитьЗначения();
		Для Каждого Идентификатор Из ИдентификаторыВнешнихПечатныхФорм Цикл
			Если ИменаМакетов.Найти(Идентификатор) = Неопределено Тогда
				ИменаМакетов.Добавить(ПрефиксВнешнихПечатныхФорм + Идентификатор);
				ДобавленныеВнешниеПечатныеФормы.Добавить(ПрефиксВнешнихПечатныхФорм + Идентификатор);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ИмяМакета Из ИменаМакетов Цикл
		// проверка наличия уже напечатанной формы
		НайденнаяПечатнаяФорма = КоллекцияПечатныхФорм.Найти(ИмяМакета, "ИмяМакета");
		Если НайденнаяПечатнаяФорма <> Неопределено Тогда
			ПоследняяДобавленнаяПечатнаяФорма = КоллекцияПечатныхФорм[КоллекцияПечатныхФорм.Количество()-1];
			Если ПоследняяДобавленнаяПечатнаяФорма.ИмяМакета = НайденнаяПечатнаяФорма.ИмяМакета Тогда
				ПоследняяДобавленнаяПечатнаяФорма.Экземпляров = ПоследняяДобавленнаяПечатнаяФорма.Экземпляров + 1;
			Иначе
				КопияПечатнойФормы = КоллекцияПечатныхФорм.Добавить();
				ЗаполнитьЗначенияСвойств(КопияПечатнойФормы, НайденнаяПечатнаяФорма);
				КопияПечатнойФормы.Экземпляров = 1;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// поиск указания дополнительного менеджера печати в имени печатной формы
		ИмяДополнительногоМенеджераПечати = "";
		Идентификатор = ИмяМакета;
		Если Найти(Идентификатор, ПрефиксВнешнихПечатныхФорм) > 0 Тогда // это внешняя печатная форма
			Идентификатор = Сред(Идентификатор, СтрДлина(ПрефиксВнешнихПечатныхФорм) + 1);
		ИначеЕсли Найти(Идентификатор, ".") > 0 Тогда // указан дополнительный менеджер печати
			Позиция = СтроковыеФункцииКлиентСервер.НайтиСимволСКонца(Идентификатор, ".");
			ИмяДополнительногоМенеджераПечати = Лев(Идентификатор, Позиция - 1);
			Идентификатор = Сред(Идентификатор, Позиция + 1);
		КонецЕсли;
			
		// поиск внешней печатной формы
		// если идентификатор внешней печатной формы совпадает с внутренним, то осуществляется подмена печатной формы на внешнюю.
		ВнешняяПечатнаяФорма = ВнешниеПечатныеФормы.НайтиПоЗначению(Идентификатор);
		
		ВременнаяКоллекцияДляОднойПечатнойФормы = ПодготовитьКоллекциюПечатныхФорм(Идентификатор);
		
		Если ВнешняяПечатнаяФорма <> Неопределено Тогда
			// печать внешней печатной формы
			УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(
				ВнешняяПечатнаяФорма(ВнешняяПечатнаяФорма.Значение, ИмяМенеджераПечати),
				Новый Структура("ИдентификаторКоманды, ОбъектыНазначения", ВнешняяПечатнаяФорма.Значение, МассивОбъектов),
				ВременнаяКоллекцияДляОднойПечатнойФормы,
				ОбъектыПечати,
				ПараметрыВывода);
		Иначе
			// выбор менеджера печати
			ИспользуемыйМенеджерПечати = ИмяДополнительногоМенеджераПечати;
			Если ПустаяСтрока(ИспользуемыйМенеджерПечати) Тогда
				ИспользуемыйМенеджерПечати = ИмяМенеджераПечати;
			КонецЕсли;
			МенеджерПечати = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИспользуемыйМенеджерПечати);

			// печать внутренней печатной формы
			МенеджерПечати.Печать(МассивОбъектов, ПараметрыПечати, ВременнаяКоллекцияДляОднойПечатнойФормы, ОбъектыПечати, ПараметрыВывода);
		КонецЕсли;
		
		// обновление коллекции
		Отказ = ВременнаяКоллекцияДляОднойПечатнойФормы.Количество() = 0;
		// предполагается одна печатная форма, но для обратной совместимости принимается вся коллекция.
		Для Каждого ВременнаяПечатнаяФорма Из ВременнаяКоллекцияДляОднойПечатнойФормы Цикл 
			Если ВременнаяПечатнаяФорма.ТабличныйДокумент <> Неопределено Тогда
				ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
				ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ВременнаяПечатнаяФорма);
				Если ВременнаяКоллекцияДляОднойПечатнойФормы.Количество() = 1 Тогда
					ПечатнаяФорма.ИмяМакета = ИмяМакета;
					ПечатнаяФорма.ИмяВРЕГ = ВРег(ИмяМакета);
				КонецЕсли;
			Иначе
				// возникла ошибка при формировании печатной формы
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// вызов исключения при возникновении ошибки
		Если Отказ Тогда
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При формировании печатной формы ""%1"" возникла ошибка. Обратитесь к администратору.'"), ИмяМакета);
			ВызватьИсключение(ТекстСообщенияОбОшибке);
		КонецЕсли;
		
	КонецЦикла;
	
	// установка количества экземпляров табличным документам
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		Если ДобавленныеВнешниеПечатныеФормы.Найти(ПечатнаяФорма.ИмяМакета) <> Неопределено Тогда
			ПечатнаяФорма.Экземпляров = 0; // для автоматически добавленных форм
		КонецЕсли;
		Если ПечатнаяФорма.ТабличныйДокумент <> Неопределено Тогда
			ПечатнаяФорма.ТабличныйДокумент.КоличествоЭкземпляров = ПечатнаяФорма.Экземпляров;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Сформировать печатные формы для непосредственного вывода на принтер
Процедура СформироватьПечатныеФормыДляБыстройПечати(
		ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати,
		ТабличныеДокументы, ОбъектыПечати, ПараметрыВывода, Отказ) Экспорт
	
	Если НЕ ПравоДоступа("Вывод", Метаданные) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	КоллекцияПечатныхФорм = Неопределено;
	ОбъектыПечати = Новый СписокЗначений;
	
	СформироватьПечатныеФормы(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати,
		КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
		
	ТабличныеДокументы = Новый СписокЗначений;
	
	Для Каждого Стр Из КоллекцияПечатныхФорм Цикл
		Если (ТипЗнч(Стр.ТабличныйДокумент) = Тип("ТабличныйДокумент")) И (Стр.ТабличныйДокумент.ВысотаТаблицы <> 0) Тогда
			ТабличныеДокументы.Добавить(Стр.ТабличныйДокумент, Стр.СинонимМакета);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Сформировать печатные формы для непосредственного вывода на принтер
// в серверном режиме в обычном приложении
Процедура СформироватьПечатныеФормыДляБыстройПечатиОбычноеПриложение(
				ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати,
				Адрес, ОбъектыПечати, ПараметрыВывода, Отказ) Экспорт
	
	Перем ОбъектыПечатиСЗ, ТабличныеДокументы;
	
	СформироватьПечатныеФормыДляБыстройПечати(
			ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати,
			ТабличныеДокументы, ОбъектыПечатиСЗ, ПараметрыВывода, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыПечати = Новый Соответствие;
	
	Для Каждого ОбъектПечати Из ОбъектыПечатиСЗ Цикл
		ОбъектыПечати.Вставить(ОбъектПечати.Представление, ОбъектПечати.Значение);
	КонецЦикла;
	
	Адрес = ПоместитьВоВременноеХранилище(ТабличныеДокументы);
	
КонецПроцедуры

// Подготовить коллекцию печатных форм - таблицу значений используемые при формировании печатных форм
//
Функция ПодготовитьКоллекциюПечатныхФорм(Знач ИменаМакетов) Экспорт
	
	Макеты = Новый ТаблицаЗначений;
	Макеты.Колонки.Добавить("ИмяМакета");
	Макеты.Колонки.Добавить("ИмяВРЕГ");
	Макеты.Колонки.Добавить("СинонимМакета");
	Макеты.Колонки.Добавить("ТабличныйДокумент");
	Макеты.Колонки.Добавить("Экземпляров");
	Макеты.Колонки.Добавить("Картинка");
	Макеты.Колонки.Добавить("ПолныйПутьКМакету");
	Макеты.Колонки.Добавить("ЭтоМногоязычнаяПечатнаяФорма", Новый ОписаниеТипов("Булево"));

	Если ТипЗнч(ИменаМакетов) = Тип("Строка") Тогда
		ИменаМакетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаМакетов);
	КонецЕсли;
	
	Для Каждого ИмяМакета Из ИменаМакетов Цикл
		Макет = Макеты.Найти(ИмяМакета, "ИмяМакета");
		Если Макет = Неопределено Тогда
			Макет = Макеты.Добавить();
			Макет.ИмяМакета = ИмяМакета;
			Макет.ИмяВРЕГ = ВРег(ИмяМакета);
			Макет.Экземпляров = 1;
		Иначе
			Макет.Экземпляров = Макет.Экземпляров + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Макеты;
	
КонецФункции

// Подготовить структуру параметров вывода для менеджера объекта формирующего печатные формы
//
Функция ПодготовитьСтруктуруПараметровВывода(ПараметрыВыводаОснование = Неопределено) Экспорт
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ДоступнаПечатьПоКомплектно", Ложь);
	
	СтруктураПараметровПисьма = Новый Структура("Получатель,Тема,Текст", Неопределено, "", "");
	ПараметрыВывода.Вставить("ПараметрыОтправки", СтруктураПараметровПисьма);
	ПараметрыВывода.Вставить("КодЯзыкаДляМногоязычныхПечатныхФорм",	"ru");
	Если ПараметрыВыводаОснование <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыВывода, ПараметрыВыводаОснование);
	КонецЕсли;

	Возврат ПараметрыВывода;
	
КонецФункции

// Возвращает путь к каталогу, используемому при печати, из временного хранилища
//
Функция ПолучитьЛокальныйКаталогФайловПечати() Экспорт
	
	Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЛокальныйКаталогФайловПечати");
	Возврат ?(Значение = Неопределено, "", Значение);
	
КонецФункции

// Сохраняет путь к каталогу, используемому при печати, во временном хранилище
// Параметры
//  Каталог - строка - путь к каталогу печати
//
Процедура СохранитьЛокальныйКаталогФайловПечати(Каталог) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ЛокальныйКаталогФайловПечати", , Каталог);
	
КонецПроцедуры

// Возвращает таблицу возможных форматов для сохранения табличного документа.
//
// Возвращаемое значение
//  ТаблицаЗначений:
//                   ТипФайлаТабличногоДокумента - ТипФайлаТабличногоДокумента                 - значение в платформе, соответствующее формату;
//                   Ссылка                      - ПеречислениеСсылка.ФорматыСохраненияОтчетов - ссылка на метаданные, где хранится представление;
//                   Представление               - Строка -                                    - представление типа файла (заполняется из перечисления);
//                   Расширение                  - Строка -                                    - тип файла для операционной системы;
//                   Картинка                    - Картинка                                    - значок формата.
//
// Примечание: таблица форматов может быть переопределена в процедуре УправлениеПечатьюПереопределяемый.ПриЗаполненииНастроекФорматовСохранения().
//
Функция НастройкиФорматовСохраненияТабличногоДокумента() Экспорт
	
	ТаблицаФорматов = Новый ТаблицаЗначений;
	
	ТаблицаФорматов.Колонки.Добавить("ТипФайлаТабличногоДокумента", Новый ОписаниеТипов("ТипФайлаТабличногоДокумента"));
	ТаблицаФорматов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ПеречислениеСсылка.ФорматыСохраненияОтчетов"));
	ТаблицаФорматов.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ТаблицаФорматов.Колонки.Добавить("Расширение", Новый ОписаниеТипов("Строка"));
	ТаблицаФорматов.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));

	// Документ PDF (.pdf)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.PDF;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.PDF;
	НовыйФормат.Расширение = "pdf";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматPDF;
	
	// Лист Microsoft Excel 2007 (.xlsx)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.XLSX;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.XLSX;
	НовыйФормат.Расширение = "xlsx";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматExcel2007;

	// Лист Microsoft Excel 97-2003 (.xls)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.XLS;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.XLS;
	НовыйФормат.Расширение = "xls";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматExcel;

	// Электронная таблица OpenDocument (.ods)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.ODS;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.ODS;
	НовыйФормат.Расширение = "ods";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматOpenOfficeCalc;
	
	// Табличный документ (.mxl)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.MXL;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.MXL;
	НовыйФормат.Расширение = "mxl";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматMXL;

	// Документ Word 2007 (.docx)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.DOCX;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.DOCX;
	НовыйФормат.Расширение = "docx";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматWord2007;
	
	// Веб-страница (.html)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.HTML;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.HTML;
	НовыйФормат.Расширение = "html";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматHTML;
	
	// Текстовый документ UTF-8 (.txt)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.TXT;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.TXT;
	НовыйФормат.Расширение = "txt";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматTXT;
	
	// Текстовый документ ANSI (.txt)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.ANSITXT;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.ANSITXT;
	НовыйФормат.Расширение = "txt";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматTXT;

	// дополнительные форматы / изменение списка текущих
	УправлениеПечатьюПереопределяемый.ПриЗаполненииНастроекФорматовСохраненияТабличногоДокумента(ТаблицаФорматов);
	
	Для Каждого ФорматСохранения Из ТаблицаФорматов Цикл
		ФорматСохранения.Представление = Строка(ФорматСохранения.Ссылка);
	КонецЦикла;
		
	Возврат ТаблицаФорматов;
	
КонецФункции

// Возвращает истину, если есть право проведения хотя бы для одного документа.
Функция ДоступноПравоПроведения(СписокДокументов) Экспорт
	ТипыДокументов = Новый Массив;
	Для Каждого Документ Из СписокДокументов Цикл
		ТипДокумента = ТипЗнч(Документ);
		Если ТипыДокументов.Найти(ТипДокумента) <> Неопределено Тогда
			Продолжить;
		Иначе
			ТипыДокументов.Добавить(ТипДокумента);
		КонецЕсли;
		Если ПравоДоступа("Проведение", Метаданные.НайтиПоТипу(ТипДокумента)) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы

// Присоединяет файл печатной формы к объекту.
// Вызывается из общей формы ПечатьДокументов.
//
// Параметры:
//  СсылкаНаОбъект            - ЛюбаяСсылка - объект, к которому надо присоединить файл печатной формы;
//  ИмяФайла                  - Строка      - имя присоединяемого файла с расширением;
//  АдресВоВременномХранилище - Строка      - адрес двоичных данных файла во временном хранилище.
//
Процедура ПриПрисоединенииПечатнойФормыКОбъекту(СсылкаНаОбъект, ИмяФайла, АдресВоВременномХранилище) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ПрисоединенныеФайлы");
		Модуль.ДобавитьФайл(СсылкаНаОбъект, ИмяФайла, , , , АдресВоВременномХранилище, , НСтр("ru = 'Печатная форма'"));
	КонецЕсли;
	
КонецПроцедуры

// Определяет возможность сохранения печатной формы при объекте.
// Вызывается из общей формы СохранениеПечатнойФормы.
//
// Параметры:
//  СсылкаНаОбъект    - ЛюбаяСсылка - объект, к которому надо присоединить файл печатной формы;
//  МожноПрисоединять - Булево - (возвращаемый) признак возможности присоединения файлов к объекту.
//
Процедура ПриПроверкеВозможностиПрисоединенияФайловКОбъекту(СсылкаНаОбъект, МожноПрисоединять) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ПрисоединенныеФайлы");
		МожноПрисоединять = Модуль.КОбъектуМожноПрисоединятьФайлы(СсылкаНаОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список печатных форм из внешних источников.
//
// Параметры:
//  ВнешниеПечатныеФормы - СписокЗначений:
//                                         Значение      - Строка - идентификатор печатной формы;
//                                         Представление - Строка - название печатной формы.
//  ПолноеИмяОбъектаМетаданных - Строка - полное имя объекта метаданных, для которого требуется получить список печатных форм.
//
Процедура ПриПолученииСпискаВнешнихПечатныхФорм(ВнешниеПечатныеФормы, ПолноеИмяОбъектаМетаданных) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		Модуль.ПриПолученииСпискаВнешнихПечатныхФорм(ВнешниеПечатныеФормы, ПолноеИмяОбъектаМетаданных);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылку на объект внешней печатной формы.
//
Процедура ПриПолученииВнешнейПечатнойФормы(Идентификатор, ПолноеИмяОбъектаМетаданных, ВнешняяПечатнаяФормаСсылка) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		Модуль.ПриПолученииВнешнейПечатнойФормы(Идентификатор, ПолноеИмяОбъектаМетаданных, ВнешняяПечатнаяФормаСсылка);
	КонецЕсли;
	
КонецПроцедуры

// Размещает команды печати на форме.
//
// Параметры:
//   Форма                            - УправляемаяФорма - форма, в которой необходимо разместить подменю Печать.
//   МестоРазмещенияКомандПоУмолчанию - ЭлементФормы - группа, в которую необходимо разместить подменю Печать,
//                                                     по умолчанию размещается в командную панель формы.
//   ОбъектыПечати                    - Массив - список объектов метаданных, для которых необходимо сформировать
//                                               объединенное подменю Печать.
Процедура ПриСозданииНаСервере(Форма, МестоРазмещенияКомандПоУмолчанию = Неопределено, ОбъектыПечати = Неопределено) Экспорт
	
	КомандыПечати = КомандыПечатиФормы(Форма, ОбъектыПечати);
	Если МестоРазмещенияКомандПоУмолчанию <> Неопределено Тогда
		Для Каждого КомандаПечати Из КомандыПечати Цикл
			Если ПустаяСтрока(КомандаПечати.МестоРазмещения) Тогда
				КомандаПечати.МестоРазмещения = МестоРазмещенияКомандПоУмолчанию.Имя;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КомандыПечати.Колонки.Добавить("ИмяКомандыНаФорме", Новый ОписаниеТипов("Строка"));
	
	ТаблицаКоманд = КомандыПечати.Скопировать(,"МестоРазмещения");
	ТаблицаКоманд.Свернуть("МестоРазмещения");
	МестаРазмещения = ТаблицаКоманд.ВыгрузитьКолонку("МестоРазмещения");
	
	Для Каждого МестоРазмещения Из МестаРазмещения Цикл
		НайденныеКоманды = КомандыПечати.НайтиСтроки(Новый Структура("МестоРазмещения,СкрытаФункциональнымиОпциями", МестоРазмещения, Ложь));
		
		ЭлементФормыДляРазмещения = Форма.Элементы.Найти(МестоРазмещения);
		Если ЭлементФормыДляРазмещения = Неопределено Тогда
			ЭлементФормыДляРазмещения = МестоРазмещенияКомандПоУмолчанию;
		КонецЕсли;
		
		Если НайденныеКоманды.Количество() > 0 Тогда
			ДобавитьКомандыПечати(Форма, НайденныеКоманды, ЭлементФормыДляРазмещения);
		КонецЕсли;
	КонецЦикла;
	
	АдресКомандПечатиВоВременномХранилище = "АдресКомандПечатиВоВременномХранилище";
	КомандаФормы = Форма.Команды.Найти(АдресКомандПечатиВоВременномХранилище);
	Если КомандаФормы = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(АдресКомандПечатиВоВременномХранилище);
		КомандаФормы.Действие = ПоместитьВоВременноеХранилище(КомандыПечати, Форма.УникальныйИдентификатор);
	Иначе
		ОбщийСписокКомандПечатиФормы = ПолучитьИзВременногоХранилища(КомандаФормы.Действие);
		Для Каждого КомандаПечати Из КомандыПечати Цикл
			ЗаполнитьЗначенияСвойств(ОбщийСписокКомандПечатиФормы.Добавить(), КомандаПечати);
		КонецЦикла;
		КомандаФормы.Действие = ПоместитьВоВременноеХранилище(ОбщийСписокКомандПечатиФормы, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры


// Возвращает список команд печати для указанной формы.
//
// Параметры:
//  Форма - УправляемаяФорма, Строка - форма или полное имя формы, для которой необходимо получить список команд печати.
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание см. в СоздатьКоллекциюКомандПечати().
Функция КомандыПечатиФормы(Форма, СписокОбъектов = Неопределено) Экспорт
	
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
		ИмяФормы = Форма.ИмяФормы;
	Иначе
		ИмяФормы = Форма;
	КонецЕсли;
	
	КомандыПечати = СоздатьКоллекциюКомандПечати();
	КомандыПечати.Колонки.Добавить("СкрытаФункциональнымиОпциями", Новый ОписаниеТипов("Булево"));
	
	СтандартнаяОбработка = Истина;
	УправлениеПечатьюПереопределяемый.ПередДобавлениемКомандПечати(ИмяФормы, КомандыПечати, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяФормы);
		Если ОбъектМетаданных <> Неопределено Тогда
			ОбъектМетаданных = ОбъектМетаданных.Родитель();
		КонецЕсли;
		
		Если СписокОбъектов <> Неопределено Тогда
			ЗаполнитьКомандыПечатиДляСпискаОбъектов(СписокОбъектов, КомандыПечати);
		ИначеЕсли ОбъектМетаданных = Неопределено Тогда
			Возврат КомандыПечати;
		Иначе
			МенеджерПечати = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
			КомандыДобавлены = ДобавитьКомандыИзМенеджераПечати(МенеджерПечати, КомандыПечати);
			Если КомандыДобавлены Тогда
				Для Каждого КомандаПечати Из КомандыПечати Цикл
					Если ПустаяСтрока(КомандаПечати.МенеджерПечати) Тогда
						КомандаПечати.МенеджерПечати = ОбъектМетаданных.ПолноеИмя();
					КонецЕсли;
				КонецЦикла;
				Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
					//МодульДополнительныеОтчетыИОбработки = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
					ДополнительныеОтчетыИОбработки.ПриПолученииКомандПечати(КомандыПечати, ИмяФормы);
				КонецЕсли;
			ИначеЕсли ОбщегоНазначения.ЭтоЖурналДокументов(ОбъектМетаданных) Тогда
				ЗаполнитьКомандыПечатиДляСпискаОбъектов(ОбъектМетаданных.РегистрируемыеДокументы, КомандыПечати);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		Если КомандаПечати.Порядок = 0 Тогда
			КомандаПечати.Порядок = 50;
		КонецЕсли;
	КонецЦикла;
	
	КомандыПечати.Сортировать("Порядок Возр, Представление Возр");
	
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФормы, ".", Истина);
	КраткоеИмяФормы = ЧастиИмени[ЧастиИмени.Количество()-1];
	
	// фильтр по именам форм
	Для НомерСтроки = -КомандыПечати.Количество() + 1 По 0 Цикл
		КомандаПечати = КомандыПечати[-НомерСтроки];
		СписокФорм = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КомандаПечати.СписокФорм, ",", Истина);
		Если СписокФорм.Количество() > 0 И СписокФорм.Найти(КраткоеИмяФормы) = Неопределено Тогда
			КомандыПечати.Удалить(КомандаПечати);
		КонецЕсли;
	КонецЦикла;
	
	ОпределитьВидимостьКомандПечатиПоФункциональнымОпциям(КомандыПечати, Форма);
	
	Возврат КомандыПечати;
	
КонецФункции

// Создает пустую таблицу для размещения в нее команд печати.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - описание команд печати:
//
//  * Идентификатор - Строка - Идентификатор команды печати, по которому менеджер печати определяет печатную
//                             форму, которую необходимо сформировать.
//                             Пример: "СчетЗаказ".
//
//                                        Для печати нескольких печатных форм можно указывать одновременно несколько их
//                                        идентификаторов (строкой, через запятую, либо массивом строк), например:
//                                         "СчетЗаказ,ГарантийноеПисьмо".
//
//                                        Если необходимо задать количество копий печати для печатной формы, то ее
//                                        идентификатор нужно продублировать столько раз, сколько копий необходимо
//                                        сформировать. При этом следует учитывать, что порядок следования печатных
//                                        форм в комплекте будет соответствовать порядку идентификаторов печатных форм,
//                                        указанных в этом параметре. Пример (2 счета на оплату + 1 гарантийное письмо):
//                                        "СчетЗаказ,СчетЗаказ,ГарантийноеПисьмо".
//
//                                        Идентификатор печатной формы может содержать в себе и альтернативный менеджер
//                                        печати, если он отличается от указанного в параметре МенеджерПечати,
//                                         например: "СчетЗаказ,Обработка.ПечатнаяФорма.ГарантийноеПисьмо".
//
//                                        В этом примере ГарантийноеПисьмо формируется в менеджере печати
//                                        Обработка._ДемоПечатнаяФорма, а СчетЗаказ - в менеджере печати, указанном в
//                                        параметре МенеджерПечати.
//
//                  - Массив - список идентификаторов команд печати.
//
//  * Представление - Строка            - Представление команды в меню Печать. 
//                                         Пример: "Счет на оплату".
//
//  * МенеджерПечати - Строка           - (необязательный) Имя объекта, в модуле менеджера которого располагается
//                                        процедура Печать, формирующая табличные документы для этой команды.
//                                        Значение по умолчанию: имя модуля менеджера объекта.
//                                         Пример: "Документ.СчетНаОплатуПокупателю".
//  * ТипыОбъектовПечати - Массив       - (необязательный) список типов объектов, для которых предназначена команда
//                                        печати. Параметр предназначен для команд печати в журналах документов, где
//                                        требуется проверка передаваемого типа объекта перед вызовом менеджера печати.
//                                        Если список не заполнен, то при автоматическом создании списка команд печати
//                                        в журнале документов он заполняется типом объекта, из которого была
//                                        импортирована команда печати.
//
//  * Обработчик    - Строка            - (необязательный) Клиентский обработчик команды, в который необходимо передать
//                                        управление вместо стандартного обработчика команды печать. Используется,
//                                        например, когда печатная форма формируется на клиенте.
//                                         Пример: "ОбработчикиПечатиКлиент.ПечатьСчетовНаОплатуПокупателю".
//
//  * Порядок       - Число             - (необязательный) Значение от 1 до 100, указывающее порядок размещения команды
//                                        по отношению к другим командам. Сортировка команд меню Печать осуществляется
//                                        сначала по полю Порядок, затем по представлению.
//                                        Значение по умолчанию: 50.
//
//  * Картинка      - Картинка          - (необязательный) Картинка, которая отображается возле команды в меню Печать.
//                                         Пример: БиблиотекаКартинок.ФорматPDF.
//
//  * СписокФорм    - Строка            - (необязательный) Имена форм через запятую, в которых должна отображаться
//                                        команда. Если параметр не указан, то команда печати будет отображаться во
//                                        всех формах объекта, где встроена подсистема Печать.
//                                         Пример: "ФормаДокумента".
//
//  * МестоРазмещения - Строка          - (необязательный) Имя командной панели формы, в которую необходимо разместить
//                                        команду печати. Параметр необходимо использовать только в случае, когда на
//                                        форме размещается более одного подменю "Печать". В остальных случаях место
//                                        размещения необходимо задавать в модуле формы при вызове метода
//                                        УправлениеПечатью.ПриСозданииНаСервере.
//                                        
//  * ЗаголовокФормы  - Строка          - (необязательный) Произвольная строка, переопределяющая стандартных заголовок
//                                        формы «Печать документов».
//                                         Пример: "Настраиваемый комплект".
//
//  * ФункциональныеОпции - Строка      - (необязательный) Имена функциональных опций через запятую, от которых зависит
//                                        доступность команды печати.
//
//  * ПроверкаПроведенияПередПечатью - Булево - (необязательный) Признак необходимости проверки проведенности
//                                        документов перед печатью. Если параметр не указан, то проверка проведенности
//                                        не выполняется.
//
//  * СразуНаПринтер - Булево           - (необязательный) Признак необходимости печати документов без предварительного
//                                        просмотра, сразу на принтер. Если параметр не указан, то при выборе команды
//                                        печати открывается форма предварительного просмотра «Печать документов».
//
//  * ФорматСохранения - ТипФайлаТабличногоДокумента - (необязательный) Применяется для быстрого сохранения печатной
//                                        формы (без дополнительных действий) в различные форматы, отличные от mxl.
//                                        Если параметр не указан, то формируется обычный mxl.
//                                         Пример: ТипФайлаТабличногоДокумента.PDF.
//
//                                        При выборе команды печати сразу открывается сформированный в формате pdf
//                                        документ.
//
//  * ПереопределитьПользовательскиеНастройкиКоличества - Булево - (необязательный) Признак необходимости отключения в
//                                        форме ПечатьДокументов механизма сохранения/восстановления выбранного
//                                        пользователем количества экземпляров на печать. Если параметр не указан, то
//                                        механизм сохранения/восстановления настроек будет работать при открытии формы
//                                        ПечатьДокументов.
//
//  * ДополнитьКомплектВнешнимиПечатнымиФормами - Булево - (необязательный) Признак необходимости дополнить комплект
//                                        документов всеми подключенными к объекту внешними печатными формами
//                                        (подсистема ДополнительныеОтчетыИОбработки). Если параметр не указан, внешние
//                                        печатные формы не добавляются в комплект.
//
//  * ФиксированныйКомплект - Булево    - (необязательный) Признак необходимости блокировки от изменения пользователем
//                                        состава комплекта документов. Если параметр не указан, то пользователь сможет
//                                        исключать отдельные печатные формы из комплекта в форме ПечатьДокументов, а
//                                        также изменять их количество.
//
//  * НеВыполнятьЗаписьВФорме - Булево  - (необязательный) Признак необходимости отключения механизма записи объекта
//                                        перед выполнением команды печати. Используется в исключительных случаях. Если
//                                        параметр не указан, производится запись объекта в случае, если в форме
//                                        объекта установлен признак модифицированности.
//
//  * ТребуетсяРасширениеРаботыСФайлами - Булево - (необязательный) Признак необходимости подключения расширения работы
//                                        с файлами перед выполнением команды. Если параметр не указан, подключение
//                                        расширения работы с файлами выполняться не будет.
//
Функция СоздатьКоллекциюКомандПечати() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	// описание
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	//////////
	// опции (необязательные параметры)
	
	// менеджер печати
	Результат.Колонки.Добавить("МенеджерПечати", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ТипыОбъектовПечати", Новый ОписаниеТипов("Массив"));
	
	// альтернативный обработчик команды
	Результат.Колонки.Добавить("Обработчик", Новый ОписаниеТипов("Строка"));
	
	// представление
	Результат.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
	Результат.Колонки.Добавить("СписокФорм", Новый ОписаниеТипов("Строка")); // имена форм для размещения команд, разделитель - запятая.
	Результат.Колонки.Добавить("МестоРазмещения", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЗаголовокФормы", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ФункциональныеОпции", Новый ОписаниеТипов("Строка")); // имена функциональных опций, влияющих на видимость команды, разделитель - запятая.
	
	// проверка проведения
	Результат.Колонки.Добавить("ПроверкаПроведенияПередПечатью", Новый ОписаниеТипов("Булево"));
	
	// вывод
	Результат.Колонки.Добавить("СразуНаПринтер", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ФорматСохранения"); // ТипФайлаТабличногоДокумента
	
	// настройки комплектов
	Результат.Колонки.Добавить("ПереопределитьПользовательскиеНастройкиКоличества", Новый ОписаниеТипов("Булево")); // запрет сохранения настроек пользователя
	Результат.Колонки.Добавить("ДополнитьКомплектВнешнимиПечатнымиФормами", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ФиксированныйКомплект", Новый ОписаниеТипов("Булево")); // запрет изменения комплекта
	
	// дополнительные параметры
	Результат.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
	
	// специальный режим выполнения команды
	// по умолчанию выполняется запись модифицированного объекта перед выполнением команды.
	Результат.Колонки.Добавить("НеВыполнятьЗаписьВФорме", Новый ОписаниеТипов("Булево"));
	
	// для использования макетов офисных документов в веб-клиенте
	Результат.Колонки.Добавить("ТребуетсяРасширениеРаботыСФайлами", Новый ОписаниеТипов("Булево"));
	
	Возврат Результат;
	
КонецФункции



// Добавляет команды печати в список, если у менеджера печати есть соответствующая процедура.
Функция ДобавитьКомандыИзМенеджераПечати(МенеджерПечати, КомандыПечати)
	ДобавляемыеКомандыПечати = СоздатьКоллекциюКомандПечати();
	Попытка
		МенеджерПечати.ДобавитьКомандыПечати(ДобавляемыеКомандыПечати);
	Исключение
		Если ДобавляемыеКомандыПечати.Количество() > 0 Тогда
			ВызватьИсключение;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецПопытки;
	
	Для Каждого КомандаПечати Из ДобавляемыеКомандыПечати Цикл
		ЗаполнитьЗначенияСвойств(КомандыПечати.Добавить(), КомандаПечати);
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

// Собирает список команд печати из нескольких объектов.
Процедура ЗаполнитьКомандыПечатиДляСпискаОбъектов(СписокОбъектов, КомандыПечати)
	Для Каждого ОбъектМетаданных Из СписокОбъектов Цикл
		Если ОбъектМетаданных.ОсновнаяФормаСписка = Неопределено Тогда
			Продолжить; // не предусмотрены команды печати в основной форме списка объекта
		КонецЕсли;
		ИмяФормыСписка = ОбъектМетаданных.ОсновнаяФормаСписка.ПолноеИмя();
		Для Каждого ДобавляемаяКомандаПечати Из КомандыПечатиФормы(ИмяФормыСписка) Цикл
			// поиск аналогичной ранее добавленной команды печати
			СтруктураОтбора = "Идентификатор,Обработчик,СразуНаПринтер,ФорматСохранения";
			Если ПустаяСтрока(ДобавляемаяКомандаПечати.Обработчик) Тогда
				СтруктураОтбора = СтруктураОтбора + ",МенеджерПечати";
			КонецЕсли;
			Отбор = Новый Структура(СтруктураОтбора);
			ЗаполнитьЗначенияСвойств(Отбор, ДобавляемаяКомандаПечати);
			НайденныеКоманды = КомандыПечати.НайтиСтроки(Отбор);
			Если НайденныеКоманды.Количество() > 0 Тогда
				Для Каждого ИмеющаясяКомандаПечати Из НайденныеКоманды Цикл
					// если уже есть такая команда, дополняем список типов объектов, для которых она предназначена
					ТипОбъекта = Тип(СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".", "Ссылка."));
					Если ИмеющаясяКомандаПечати.ТипыОбъектовПечати.Найти(ТипОбъекта) = Неопределено Тогда
						ИмеющаясяКомандаПечати.ТипыОбъектовПечати.Добавить(ТипОбъекта);
					КонецЕсли;
					// очистим МенеджерПечати в случае, если у имеющейся команды он отличается
					Если ИмеющаясяКомандаПечати.МенеджерПечати <> ДобавляемаяКомандаПечати.МенеджерПечати Тогда
						ИмеющаясяКомандаПечати.МенеджерПечати = "";
					КонецЕсли;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			Если ДобавляемаяКомандаПечати.ТипыОбъектовПечати.Количество() = 0 Тогда
				ДобавляемаяКомандаПечати.ТипыОбъектовПечати.Добавить(Тип(СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".", "Ссылка.")));
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(КомандыПечати.Добавить(), ДобавляемаяКомандаПечати);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Создает подменю "Печать" на форме и добавляет в него команды печати.
// Если команда печати одна, то вместо подменю добавляется кнопка с названием печатной формы.
Процедура ДобавитьКомандыПечати(Форма, КомандыПечати, Знач МестоРазмещенияКоманд = Неопределено)
	
	Если МестоРазмещенияКоманд = Неопределено Тогда
		МестоРазмещенияКоманд = Форма.КоманднаяПанель;
	КонецЕсли;
	
	ОднаКомандаПечати = КомандыПечати.Количество() = 1;
	Если Не ОднаКомандаПечати Тогда
		ПодменюПечать = Форма.Элементы.Добавить(МестоРазмещенияКоманд.Имя + "ПодменюПечать", Тип("ГруппаФормы"), МестоРазмещенияКоманд);
		ПодменюПечать.Вид = ВидГруппыФормы.Подменю;
		ПодменюПечать.Заголовок = НСтр("ru='Печать';uk='Друк'");
		ПодменюПечать.Картинка = БиблиотекаКартинок.Печать;
		
		МестоРазмещенияКоманд = ПодменюПечать;
	КонецЕсли;
	
	Для Каждого ОписаниеКомандыПечати Из КомандыПечати Цикл
		НомерКоманды = ОписаниеКомандыПечати.Владелец().Индекс(ОписаниеКомандыПечати);
		ИмяКоманды = МестоРазмещенияКоманд.Имя + "КомандаПечати" + НомерКоманды;
		
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуПечати";
		КомандаФормы.Заголовок = ОписаниеКомандыПечати.Представление;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		
		Если ЗначениеЗаполнено(ОписаниеКомандыПечати.Картинка) Тогда
			КомандаФормы.Картинка = ОписаниеКомандыПечати.Картинка;
		ИначеЕсли ОднаКомандаПечати Тогда
			КомандаФормы.Картинка = БиблиотекаКартинок.Печать;
		КонецЕсли;
		
		ОписаниеКомандыПечати.ИмяКомандыНаФорме = ИмяКоманды;
		
		НовыйЭлемент = Форма.Элементы.Добавить(МестоРазмещенияКоманд.Имя + ИмяКоманды, Тип("КнопкаФормы"), МестоРазмещенияКоманд);
		НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает описание команды по имени элемента формы.
// 
// Возвращаемое значение
//  Структура - строка таблицы из функции КомандыПечатиФормы, преобразованная в структуру.
Функция ОписаниеКомандыПечати(ИмяКоманды, АдресКомандПечатиВоВременномХранилище) Экспорт
	
	КомандыПечати = ПолучитьИзВременногоХранилища(АдресКомандПечатиВоВременномХранилище);
	Для Каждого КомандаПечати Из КомандыПечати.НайтиСтроки(Новый Структура("ИмяКомандыНаФорме", ИмяКоманды)) Цикл
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(КомандаПечати);
	КонецЦикла;
	
КонецФункции

// Фильтрует список команд печати в соответствии с установленными функциональными опциями.
Процедура ОпределитьВидимостьКомандПечатиПоФункциональнымОпциям(КомандыПечати, Форма)
	Для НомерКоманды = -КомандыПечати.Количество() + 1 По 0 Цикл
		ОписаниеКомандыПечати = КомандыПечати[-НомерКоманды];
		ФункциональныеОпцииКомандыПечати = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеКомандыПечати.ФункциональныеОпции, ",", Истина);
		ВидимостьКоманды = ФункциональныеОпцииКомандыПечати.Количество() = 0;
		Для Каждого ФункциональнаяОпция Из ФункциональныеОпцииКомандыПечати Цикл
			Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
				ВидимостьКоманды = ВидимостьКоманды Или Форма.ПолучитьФункциональнуюОпциюФормы(ФункциональнаяОпция);
			Иначе
				ВидимостьКоманды = ВидимостьКоманды Или ПолучитьФункциональнуюОпцию(ФункциональнаяОпция);
			КонецЕслИ;
			
			Если ВидимостьКоманды Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ОписаниеКомандыПечати.СкрытаФункциональнымиОпциями = Не ВидимостьКоманды;
	КонецЦикла;
КонецПроцедуры

// Возвращает макет печатной формы по полному пути к макету.
//
// Параметры:
//  ПолныйПутьКМакету - Строка - полный путь к макету в формате:
//								"Документ.<ИмяДокумента>.<ИмяМакета>"
//								"Обработка.<ИмяОбработки>.<ИмяМакета>"
//								"ОбщийМакет.<ИмяМакета>"
//  КодЯзыка          - Строка - Код языка для многоязычных макетов,
//                               Пустая строка для одноязычных макетов
//
// Возвращаемое значение:
//   ТабличныйДокумент - для макета типа MXL
//	 ДвоичныеДанные    - для макетов DOC и ODT
//
Функция МакетПечатнойФормы(ПолныйПутьКМакету, знач КодЯзыка = "") Экспорт	
	
	КодЯзыка = НРег(СокрЛП(КодЯзыка));
	
	ЧастиПути = СтрЗаменить(ПолныйПутьКМакету, ".", Символы.ПС);
	
	Если СтрЧислоСтрок(ЧастиПути) = 3 Тогда
		ПутьКМетаданным = СтрПолучитьСтроку(ЧастиПути, 1) + "." + СтрПолучитьСтроку(ЧастиПути, 2);
		ПутьКОбъектуМетаданных = СтрПолучитьСтроку(ЧастиПути, 3);
	ИначеЕсли СтрЧислоСтрок(ЧастиПути) = 2 Тогда
		ПутьКМетаданным = СтрПолучитьСтроку(ЧастиПути, 1);
		ПутьКОбъектуМетаданных = СтрПолучитьСтроку(ЧастиПути, 2);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Макет ""%1"" не найден. Операция прервана.';uk='Макет ""%1"" не знайдений. Операція перервана.'"), ПолныйПутьКМакету);
	КонецЕсли;
	
	Если (Найти(ПутьКОбъектуМетаданных, "ПФ_DOC") ИЛИ Найти(ПутьКОбъектуМетаданных, "ПФ_ODT")) И Не ПустаяСтрока(КодЯзыка) Тогда
		// многоязычный DOC, ODT
		ПутьКОбъектуМетаданных = ПутьКОбъектуМетаданных+"_"+КодЯзыка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "Выбрать Макет КАК Макет, Использование КАК Использование
					|ИЗ
					|	РегистрСведений.ПользовательскиеМакетыПечати
					|ГДЕ
					|	Объект=&Объект
					|	И	ИмяМакета=&ИмяМакета
					|	И	Использование";
	
	Запрос.Параметры.Вставить("Объект", ПутьКМетаданным);
	Запрос.Параметры.Вставить("ИмяМакета", ПутьКОбъектуМетаданных);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Неопределено;
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Макет.Получить();
	Иначе
		Если СтрЧислоСтрок(ЧастиПути) = 3 Тогда
			Результат = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПутьКМетаданным).ПолучитьМакет(ПутьКОбъектуМетаданных);
		Иначе
			Результат = ПолучитьОбщийМакет(ПутьКОбъектуМетаданных);
		КонецЕсли;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Макет ""%1"" не найден. Операция прервана.';uk='Макет ""%1"" не знайдений. Операція перервана.'"), ПолныйПутьКМакету);
	КонецЕсли;
	
	Если Найти(ПутьКОбъектуМетаданных, "ПФ_MXL") И ЗначениеЗаполнено(КодЯзыка) Тогда
		Результат.КодЯзыкаМакета = КодЯзыка; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
