#Область ПроцедурыОбщегоНазначения

//	LNK 03.01.2019 13:50:26
Функция ВыполнитьЗапросКСерверу(ИмяПроцедуры, ТекстЗапроса, АдресСервера, Метод = "POST", ИмяМетода = "", Знач Таймаут = 40, ТекстОтвета = "")	Экспорт

	Результат = Новый Структура(
		"КодОтвета, Ошибка, ОписаниеОшибки, ДанныеОтвета"
		, 0, Ложь, "", Неопределено);
	//
	ЗаписьВЖурналВыполнена = Ложь;
	Таймаут = Макс(5, Таймаут);

	Попытка

	//	Выполняем подключение к WEB API Dynamics:
	//	http://antoshkawebapi.westeurope.cloudapp.azure.com/api/Stores/SendStores
	//	https://antoshkawebapi.azurewebsites.net/api/Stores/SendStores
		HTTP = Новый HTTPСоединение(АдресСервера,,,,, Таймаут, Новый ЗащищенноеСоединениеOpenSSL);

		Попытка

		//	формирование заголовка
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		//	Заголовки.Вставить("Content-Length", XMLСтрока(СтрДлина(ТекстЗапроса)));	//	у них WS из-за этой настройки режет пакет.. !!

			HTTPЗапрос = Новый HTTPЗапрос(ИмяПроцедуры
				+ ?(Метод = "GET"
					, "?IDBASE=" + ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторУчетнойСистемы")
					+ ?(ПустаяСтрока(ИмяМетода), "", "&methodName=" + ИмяМетода), "")
				, Заголовки);
			HTTPЗапрос.УстановитьТелоИзСтроки(ТекстЗапроса);

			Если Метод = "POST" Тогда

				HTTPОтвет = HTTP.ОтправитьДляОбработки(HTTPЗапрос);

			Иначе	//	Метод = "GET"

				HTTPОтвет = HTTP.Получить(HTTPЗапрос);

			КонецЕсли;

			Результат.КодОтвета = HTTPОтвет.КодСостояния;
			ДанныеRFC2616 = СервисыСерверПовтИсп.КодыRFC2616(HTTPОтвет.КодСостояния);

			Результат.Ошибка = НЕ Результат.КодОтвета = 200;
			Результат.ОписаниеОшибки = Формат(Результат.КодОтвета, "ЧДЦ=; ЧН=000; ЧГ=") + Символы.ПС + ДанныеRFC2616.Описание;

			ТекстОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();	//	LNK 10.09.2019 13:54:49

			Попытка

				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
				Результат.ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON);

				Если Результат.Ошибка И НЕ ПустаяСтрока(Результат.ДанныеОтвета.error) Тогда

					Результат.ОписаниеОшибки = "Метод [" + ИмяПроцедуры + "]" + Символы.ПС + СокрЛП(Результат.ОписаниеОшибки)
						+ Символы.ПС + "Ответ CRM:" + Символы.ПС + Результат.ДанныеОтвета.error;

				КонецЕсли;

			Исключение

				Результат.Ошибка = Истина;
				Результат.ОписаниеОшибки = "Парсер JSON [" + ИмяПроцедуры + "]:"
					+ Символы.ПС + ОписаниеОшибки() + Символы.ПС
					+ Символы.ПС + ОбщегоНазначенияКлиентСервер.REPEAT("-", 100)
					+ Символы.ПС + "Ответ CRM (текст ответа):" + Символы.ПС + ТекстОтвета
					+ Символы.ПС + Символы.ПС + ОбщегоНазначенияКлиентСервер.REPEAT("-", 100)
					+ Символы.ПС + "Текст запроса к CRM:" + Символы.ПС + ТекстЗапроса;
				ЗаписьВЖурналВыполнена   = Истина;

				ЖурналСобытий.Регистрация("JSON.error", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.ПланыОбмена.ОбменMicrosoftDynamics
				,
				,
				, Результат.ОписаниеОшибки,, Ложь);

			КонецПопытки;

		Исключение

			Результат.Ошибка = Истина;
			Результат.ОписаниеОшибки = "Запрос (" + ИмяПроцедуры + "): "
				+ Символы.ПС + ОписаниеОшибки()
				+ Символы.ПС + "Текст запроса: " + Лев(ТекстЗапроса, 300) + ?(СтрДлина(ТекстЗапроса) > 300, "...", "");

		КонецПопытки;	 

	Исключение

		Результат.Ошибка = Истина;
		Результат.ОписаниеОшибки = "Подключение (" + АдресСервера + " / " + ИмяПроцедуры + "): " + Символы.ПС + ОписаниеОшибки();

	КонецПопытки;

	Если Результат.Ошибка Тогда

		Если НЕ ЗаписьВЖурналВыполнена Тогда	//	LNK 03.12.2019 10:46:51

			ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала()
			, УровеньЖурналаРегистрации.Ошибка
			, Метаданные.ПланыОбмена.ОбменMicrosoftDynamics
			,
			,
			, Результат.ОписаниеОшибки,, Ложь);

		КонецЕсли;

		ВызватьИсключение Результат.ОписаниеОшибки;

	КонецЕсли;

	Возврат Результат;

КонецФункции

//	LNK 08.08.2019 11:49:38
Функция ВнешнийРесурсДоступен(ТекстОшибки)

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	РесурсДоступен = Ложь;

	Попытка

		АдресСервера = УправлениеДоступомСлужебныйПовтИсп.ПолучитьАдресСервераMSDynamics(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);

		Если НЕ ПустаяСтрока(АдресСервера) Тогда

			Таймаут   = 1;	//	в переменной для возможности изменения в отладчике
			Результат = ОбменMicrosoftDynamicsСервер.ВыполнитьЗапросКСерверу("api/service/ping", "", АдресСервера, "GET",, Таймаут);

			Если ТипЗнч(Результат.ДанныеОтвета) = Тип("Структура") Тогда

				РесурсДоступен = Результат.ДанныеОтвета.status;

				Если НЕ РесурсДоступен Тогда

					ТекстОшибки = "Отключено по команде внешней системы (""status"":true)";

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();

	КонецПопытки;

	Возврат РесурсДоступен;

КонецФункции

//	LNK 19.08.2019 10:28:16
Функция ПолучитьМассивУзлов(ТипРегистрации = Неопределено, ВсеАктивные = Ложь)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка КАК Узел
	|ИЗ
	|	ПланОбмена.ОбменMicrosoftDynamics КАК ТаблицаУзлы
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ТипРегистрации = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаУзлы.ТипРегистрации = &ТипРегистрации
	|		КОНЕЦ
	|	И НЕ(ТаблицаУзлы.ПометкаУдаления
	|				ИЛИ ТаблицаУзлы.ЭтотУзел)
	|	И ВЫБОР
	|			КОГДА &ВсеАктивные = ИСТИНА
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаУзлы.РегистрироватьИзменения
	|		КОНЕЦ"
	);
	Запрос.УстановитьПараметр("ТипРегистрации", ТипРегистрации);
	Запрос.УстановитьПараметр("ВсеАктивные"   , ВсеАктивные);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Узел");

КонецФункции

#КонецОбласти

#Область ОписаниеВнешнихДанныхКонтрагента

//	LNK 14.08.2019 08:42:47
Функция ИнициализацияДанныхКонтрагента(ДанныеКонтрагента = Неопределено, НомерТелефона = "")	Экспорт

	Если ДанныеКонтрагента = Неопределено Тогда

		ДанныеКонтрагента = Новый Структура;

	КонецЕсли;

//	формируем поэлементно.. во имя однозначности
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("УИ", Новый Структура("IDC, IDD, IDN", "", "", ""), ДанныеКонтрагента);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("IDC", "", ДанныеКонтрагента.УИ);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("IDD", "", ДанныеКонтрагента.УИ);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("IDN", "", ДанныеКонтрагента.УИ);

	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("ОтключитьМеханизмРегистрацииMicrosoftDynamics", Ложь, ДанныеКонтрагента);

	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Фамилия" , "", ДанныеКонтрагента);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Имя"	 , "", ДанныеКонтрагента);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Отчество", "", ДанныеКонтрагента);

	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Наименование", "", ДанныеКонтрагента);

	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Действия", Новый Массив, ДанныеКонтрагента);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Карты"	 , Новый Массив, ДанныеКонтрагента);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Дети"	 , Новый Массив, ДанныеКонтрагента);

	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("БонусБазаБаланс", 0, ДанныеКонтрагента);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("СуммаПокупок"	, 0, ДанныеКонтрагента);

	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Блокирован"		, Ложь, ДанныеКонтрагента);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("УдалениеОбъекта", Ложь, ДанныеКонтрагента);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Верифицировать"	, Ложь, ДанныеКонтрагента);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("РазрешеноСозданиеНового", Истина, ДанныеКонтрагента);	//	LNK 15.07.2020 08:10:41

	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("НомерТелефона"		   , НомерТелефона, ДанныеКонтрагента);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("НомерТелефонаСлужебный", "", ДанныеКонтрагента);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Email"				   , "", ДанныеКонтрагента);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("EmailСлужебный"		   , "", ДанныеКонтрагента);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("АдресПочтовый"		   , "", ДанныеКонтрагента);

	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Пол"		 , Перечисления.ПолФизическогоЛица.ПустаяСсылка(), ДанныеКонтрагента);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("ДатаРождения", '00010101', ДанныеКонтрагента);

	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("УзелСоздания"       , ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().ЭлементСтруктуры, ДанныеКонтрагента);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Магазин"            , ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин, ДанныеКонтрагента);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("ТекущийПользователь", Справочники.Пользователи.АдминистраторАвтоматов, ДанныеКонтрагента);

	Попытка

		ДанныеКонтрагента.ТекущийПользователь = Пользователи.ТекущийПользователь();

	Исключение

		ТекстОшибки = ОписаниеОшибки();

	КонецПопытки;

	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("ИнтерактивныйВводНового", Ложь, ДанныеКонтрагента);	//	флаг для кассира РМК

	Возврат ДанныеКонтрагента;

КонецФункции

//	LNK 21.08.2019 10:07:04
Функция ИнициализироватьСоставДанных()	Экспорт

	СоставДанных = Новый Структура(
		"Контрагент, ДисконтнаяКарта, НомерТелефона, IDD, Отложено, ПоискВыполнен, Ошибка, ОписаниеОшибки"
		,,, "", "", Ложь, Ложь, Ложь, "");
//	LNK 17.09.2020 11:12:26 - "ПоискВыполнен" = Истина говорит о том, что поиск был, но ссылка НЕ найден.

	Возврат СоставДанных;

КонецФункции

//	LNK 13.08.2019 14:39:21
Функция ОписаниеВнешнихДанных(ТипДанных)	Экспорт

	ОписаниеДанных = Новый Структура;

	Если ТипДанных = "Действия" Тогда

		ОписаниеДанных.Вставить("Действие", "");
		ОписаниеДанных.Вставить("Значение", "");

	ИначеЕсли ТипДанных = "Карты" Тогда

		ОписаниеДанных.Вставить("КодКарты"    , "");
		ОписаниеДанных.Вставить("IDC_Карта"   , "");
		ОписаниеДанных.Вставить("IDC_Магазин" , "");
		ОписаниеДанных.Вставить("Блокирован"  , Ложь);
		ОписаниеДанных.Вставить("ДатаОткрытия", '00010101');
		ОписаниеДанных.Вставить("ДатаСоздания", '00010101');
		ОписаниеДанных.Вставить("ДатаЗакрытия", '00010101');


	ИначеЕсли ТипДанных = "Дети" Тогда

		ОписаниеДанных.Вставить("IDC"         , "");
		ОписаниеДанных.Вставить("IDD"         , "");
		ОписаниеДанных.Вставить("Имя"         , "");
		ОписаниеДанных.Вставить("Пол"         , Перечисления.ПолФизическогоЛица.ПустаяСсылка());
		ОписаниеДанных.Вставить("ДатаРождения", '00010101');

	КонецЕсли;

	Возврат ОписаниеДанных;

КонецФункции

// Сичкаренко 13.05.2021
Функция ИнициализацияДанныхФИО(ДанныеФИО, Фамилия = "", Имя = "", Отчетсво = "") Экспорт 
	Если ДанныеФИО = Неопределено Тогда

		ДанныеФИО = Новый Структура;

	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Фамилия" , Фамилия, ДанныеФИО);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Имя"	 , Имя, ДанныеФИО);
	ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Отчество", Отчетсво, ДанныеФИО);
	
	Возврат ДанныеФИО;

КонецФункции

#КонецОбласти

#Область ЗаполнениеСтруктурыДанныхКонтрагентаПоВнешнимДаннымCRM

//	LNK 14.08.2019 08:01:33
Функция ЗаполнитьСтруктуруПоВнешнимДанным(ДанныеКонтрагента, ДанныеВнешние)	Экспорт

	ДанныеКонтрагента = ИнициализацияДанныхКонтрагента(ДанныеКонтрагента);

	УстановитьЗначениеПоТипу(ДанныеКонтрагента.УИ.IDC, "IDC_Client", Тип("Строка"), ДанныеВнешние);
	УстановитьЗначениеПоТипу(ДанныеКонтрагента.УИ.IDD, "IDD_client", Тип("Строка"), ДанныеВнешние);
	УстановитьЗначениеПоТипу(ДанныеКонтрагента.УИ.IDN, "IDN_client", Тип("Строка"), ДанныеВнешние);

	ДанныеКонтрагента.ОтключитьМеханизмРегистрацииMicrosoftDynamics = НЕ ПустаяСтрока(ДанныеКонтрагента.УИ.IDC);

	УстановитьЗначениеПоТипу(ДанныеКонтрагента.Блокирован     , "blocked"            , Тип("Булево"), ДанныеВнешние);
	УстановитьЗначениеПоТипу(ДанныеКонтрагента.Верифицировать , "verificationStatus" , Тип("Булево"), ДанныеВнешние);

	УстановитьЗначениеПоТипу(ДанныеКонтрагента.БонусБазаБаланс, "bonusAccountBalance", Тип("Число"), ДанныеВнешние);
	УстановитьЗначениеПоТипу(ДанныеКонтрагента.СуммаПокупок   , "totalSum"           , Тип("Число"), ДанныеВнешние);

	УстановитьЗначениеПоТипу(ДанныеКонтрагента.НомерТелефона  , "phoneNumber"        , "НомерТелефона", ДанныеВнешние);
	УстановитьЗначениеПоТипу(ДанныеКонтрагента.НомерТелефонаСлужебный, "phone"       , "НомерТелефона", ДанныеВнешние);
	УстановитьЗначениеПоТипу(ДанныеКонтрагента.Email          , "email"              , Тип("Строка"), ДанныеВнешние);
	УстановитьЗначениеПоТипу(ДанныеКонтрагента.EmailСлужебный , "email2"             , Тип("Строка"), ДанныеВнешние);

	УстановитьЗначениеПоТипу(ДанныеКонтрагента.АдресПочтовый  , "mailingAddress"     , Тип("Строка"), ДанныеВнешние);

	УстановитьЗначениеПоТипу(ДанныеКонтрагента.Имя            , "firstName"          , Тип("Строка"), ДанныеВнешние);
	УстановитьЗначениеПоТипу(ДанныеКонтрагента.Отчество       , "middlename"         , Тип("Строка"), ДанныеВнешние);
	УстановитьЗначениеПоТипу(ДанныеКонтрагента.Фамилия        , "lastName"           , Тип("Строка"), ДанныеВнешние);

	УстановитьЗначениеПоТипу(ДанныеКонтрагента.ДатаРождения   , "birthdate"          , Тип("Дата"), ДанныеВнешние);
	УстановитьЗначениеПоТипу(ДанныеКонтрагента.Пол            , "gender"             , Тип("ПеречислениеСсылка.ПолФизическогоЛица"), ДанныеВнешние);

//	опционально.. возможно отсутствие.

	Если ДанныеВнешние.Свойство("clientname") Тогда

		УстановитьЗначениеПоТипу(ДанныеКонтрагента.Наименование, "clientname", Тип("Строка"), ДанныеВнешние);

	КонецЕсли;

	Если ДанныеВнешние.Свойство("PrimaryDeleted") Тогда

		УстановитьЗначениеПоТипу(ДанныеКонтрагента.УдалениеОбъекта, "PrimaryDeleted", Тип("Булево"), ДанныеВнешние);

	КонецЕсли;

	Если ДанныеВнешние.Свойство("actions") Тогда

		Для каждого СоставВнешний Из ДанныеВнешние.actions Цикл

			ЭлементДанных = ОписаниеВнешнихДанных("Действия");

			ЭлементДанных.Действие = СоставВнешний.nameAction;
			ЭлементДанных.Значение = СоставВнешний.value;

			ДанныеКонтрагента.Действия.Добавить(ЭлементДанных);

		КонецЦикла;

	КонецЕсли;

	Если ДанныеВнешние.Свойство("cards") Тогда

		Для каждого СоставВнешний Из ДанныеВнешние.cards Цикл

			ЭлементДанных = ОписаниеВнешнихДанных("Карты");

			УстановитьЗначениеПоТипу(ЭлементДанных.КодКарты  , "number" , Тип("Строка"), СоставВнешний);
			УстановитьЗначениеПоТипу(ЭлементДанных.Блокирован, "blocked", Тип("Булево"), СоставВнешний);

			УстановитьЗначениеПоТипу(ЭлементДанных.IDC_Карта  , "IDC_loyalCard", Тип("Строка"), СоставВнешний);
			УстановитьЗначениеПоТипу(ЭлементДанных.IDC_Магазин, "IDC_store"    , Тип("Строка"), СоставВнешний);

			УстановитьЗначениеПоТипу(ЭлементДанных.ДатаОткрытия, "activationDate", Тип("Дата"), СоставВнешний);
			УстановитьЗначениеПоТипу(ЭлементДанных.ДатаСоздания, "creationDate1C", Тип("Дата"), СоставВнешний);
			УстановитьЗначениеПоТипу(ЭлементДанных.ДатаЗакрытия, "endDate"       , Тип("Дата"), СоставВнешний);

			ДанныеКонтрагента.Карты.Добавить(ЭлементДанных);

		КонецЦикла;

	КонецЕсли;

	Если ДанныеВнешние.Свойство("childs") Тогда

		Для каждого СоставВнешний Из ДанныеВнешние.childs Цикл

			ЭлементДанных = ОписаниеВнешнихДанных("Дети");

			УстановитьЗначениеПоТипу(ЭлементДанных.IDC, "IDC_child", Тип("Строка"), СоставВнешний);
			УстановитьЗначениеПоТипу(ЭлементДанных.IDD, "IDD_child", Тип("Строка"), СоставВнешний);

			УстановитьЗначениеПоТипу(ЭлементДанных.Имя, "name"     , Тип("Строка"), СоставВнешний);
			УстановитьЗначениеПоТипу(ЭлементДанных.Пол, "gender"   , Тип("ПеречислениеСсылка.ПолФизическогоЛица"), СоставВнешний);

			УстановитьЗначениеПоТипу(ЭлементДанных.ДатаРождения, "birthdate", Тип("Дата"), СоставВнешний);

			ДанныеКонтрагента.Дети.Добавить(ЭлементДанных);

		КонецЦикла;

	КонецЕсли;

	Возврат ДанныеКонтрагента;

КонецФункции

//	LNK 14.08.2019 08:05:54
Процедура УстановитьЗначениеПоТипу(ЗначениеДанных, ИмяЗначения, ТипЗначения, ДанныеВнешние)

	Перем ЗначениеВходящее;

	Если ДанныеВнешние.Свойство(ИмяЗначения, ЗначениеВходящее) Тогда

		Если ТипЗначения = Тип("Строка") Тогда

			ЗначениеДанных = СокрЛП(ЗначениеВходящее);

		ИначеЕсли ТипЗначения = Тип("Число") ИЛИ ТипЗначения = Тип("Булево") Тогда

			ЗначениеДанных = ЗначениеВходящее;

		ИначеЕсли ТипЗначения = Тип("Дата") Тогда

			ЗначениеДанных = ОбменMicrosoftDynamicsКлиентСервер.ПривестиДату(ЗначениеВходящее);

		ИначеЕсли ТипЗначения = "НомерТелефона" Тогда

			ЗначениеДанных = ОтправкаSMS.ПодготовитьНомерТелефона(ЗначениеВходящее);

		ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ПолФизическогоЛица") Тогда

			ЗначениеДанных = ?(НРег(ЗначениеВходящее) = "female" ИЛИ ЗначениеВходящее = 0, Перечисления.ПолФизическогоЛица.Женский, Перечисления.ПолФизическогоЛица.Мужской);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ГруппируемыеБлокиПроцедур

//	LNK 12.08.2019 09:03:00
Процедура ПроверкаДоступностиMicrosoftDynamics(УчитыватьСчётчик)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если Константы.РесурсMicrosoftDynamicsРучноеОтключение.Получить() = Истина Тогда

	//	Контроль доступности отключен.
		Возврат;

	КонецЕсли;

	ТекстОшибки = "";

	Если ВнешнийРесурсДоступен(ТекстОшибки) Тогда

		Если НЕ Константы.РесурсMicrosoftDynamicsСчётчик.Получить() = 0 Тогда

			Константы.РесурсMicrosoftDynamicsСчётчик.Установить(0);

		КонецЕсли;

		Если Константы.РесурсMicrosoftDynamicsДоступен.Получить() = Ложь Тогда

			ИзменитьДоступностьMicrosoftDynamics(Истина);

		КонецЕсли;

	Иначе

		КоличествоПопыток = Константы.РесурсMicrosoftDynamicsСчётчик.Получить();

		Если НЕ УчитыватьСчётчик = Истина ИЛИ КоличествоПопыток >= 2 Тогда	//	это уже ТРЕТЬЯ попытка

			Если Константы.РесурсMicrosoftDynamicsДоступен.Получить() = Истина Тогда

				ИзменитьДоступностьMicrosoftDynamics(Ложь,, ТекстОшибки);

			КонецЕсли;

		Иначе

			Константы.РесурсMicrosoftDynamicsСчётчик.Установить(КоличествоПопыток + 1);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 12.12.2019 13:14:25
Процедура ИзменитьДоступностьMicrosoftDynamics(Доступен, РучноеУправление = Ложь, ТекстОшибки = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	МенеджерКонстанты = Константы.РесурсMicrosoftDynamicsДоступен.СоздатьМенеджерЗначения();

	Если НЕ РучноеУправление Тогда

		МенеджерКонстанты.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);

	КонецЕсли;

	МенеджерКонстанты.Значение = Доступен;
	МенеджерКонстанты.Записать();

	ЖурналСобытий.Регистрация("MSCRM.Доступность"
	, ?(Доступен, УровеньЖурналаРегистрации.Примечание, УровеньЖурналаРегистрации.Предупреждение)
	, Метаданные.Константы.РесурсMicrosoftDynamicsДоступен
	, Доступен
	,
	, ?(Доступен, "Работа с ресурсом разрешена", "Работа с ресурсом запрещена" + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС + ТекстОшибки))
	,, Ложь);

	Если НЕ Доступен Тогда

		Константы.РесурсMicrosoftDynamicsСчётчик.Установить(0);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

//	LNK 23.12.2019 06:36:11
Функция УчетнаяПолитика(Магазин, ГраницаСреза = '00010101')	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Ведущая.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ЕСТЬNULL(ПолитикаМагазина.CRM_РазрешитьОбменВходящий, Ведущая.CRM_РазрешитьОбменВходящий) КАК РазрешитьОбменВходящий,
	|	ЕСТЬNULL(ПолитикаМагазина.CRM_РазрешитьОбменИсходящий, Ведущая.CRM_РазрешитьОбменИсходящий) КАК РазрешитьОбменИсходящий,
	|	ЕСТЬNULL(ПолитикаМагазина.CRM_ПродажиАктивированы, Ведущая.CRM_ПродажиАктивированы) КАК ПродажиАктивированы,
	|	ЕСТЬNULL(ПолитикаМагазина.CRM_УправлениеЦенниками, Ведущая.CRM_УправлениеЦенниками) КАК УправлениеЦенниками,
	|	ЕСТЬNULL(ПолитикаМагазина.CRM_ТаймаутРасчетаЧека, Ведущая.CRM_ТаймаутРасчетаЧека) КАК ТаймаутРасчетаЧека,
	|	ЕСТЬNULL(ПолитикаМагазина.CRM_ТаймаутКонтрагента, Ведущая.CRM_ТаймаутКонтрагента) КАК ТаймаутКонтрагента,
	|	ВЫБОР
	|		КОГДА ПолитикаМагазина.Магазин = &Магазин
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлючПорядка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА УчетнаяПолитика.ПрограммаЛояльности = ЗНАЧЕНИЕ(Перечисление.ВидыПрограммЛояльности.ПустаяСсылка)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПрограммЛояльности.СкидкиНаценки)
	|			ИНАЧЕ УчетнаяПолитика.ПрограммаЛояльности
	|		КОНЕЦ КАК ПрограммаЛояльности,
	|		ЛОЖЬ КАК CRM_РазрешитьОбменВходящий,
	|		ЛОЖЬ КАК CRM_РазрешитьОбменИсходящий,
	|		ЛОЖЬ КАК CRM_ПродажиАктивированы,
	|		ЛОЖЬ КАК CRM_УправлениеЦенниками,
	|		10 КАК CRM_ТаймаутРасчетаЧека,
	|		10 КАК CRM_ТаймаутКонтрагента
	|	ИЗ
	|		РегистрСведений.УчетнаяПолитика.СрезПоследних(&ГраницаСреза, ) КАК УчетнаяПолитика) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаМагазинов.СрезПоследних(
	|				&ГраницаСреза,
	|				Магазин = &Магазин
	|					ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК ПолитикаМагазина
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка УБЫВ"
	);
	Запрос.УстановитьПараметр("Магазин"     , Магазин);
	Запрос.УстановитьПараметр("ГраницаСреза", ?(ГраницаСреза = '00010101', ТекущаяДатаСеанса(), ГраницаСреза));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	ДанныеПолитики = Новый Структура(
		"ПрограммаЛояльности, РазрешитьОбменВходящий, РазрешитьОбменИсходящий, ПродажиАктивированы, УправлениеЦенниками, ТаймаутРасчетаЧека, ТаймаутКонтрагента"
		, Выборка.ПрограммаЛояльности
		, Выборка.РазрешитьОбменВходящий
		, Выборка.РазрешитьОбменИсходящий
		, Выборка.ПродажиАктивированы
		, Выборка.УправлениеЦенниками
		, Макс(5, Выборка.ТаймаутРасчетаЧека)
		, Макс(5, Выборка.ТаймаутКонтрагента)
	);
	Возврат ДанныеПолитики;

КонецФункции









