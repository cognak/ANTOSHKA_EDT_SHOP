#Область ПоддержкаОбменовЗарплатаИУправлениеПерсоналом

#Область ПрограммныйИнтерфейс

//	LNK 19.07.2018 13:55:34
Процедура ВыполнитьЗагрузкуДанныхДляУзла(УзелПолучатель, ДанныеСообщения, ДанныеОтвета, РежимДогрузки = Ложь)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	СсылочныйКеш = Новый Соответствие;

//	Первым делом отрабатываем ссылки..
//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	Для каждого СтрокаТаблицы Из ДанныеСообщения.ТаблицаСсылок Цикл

		ПараметрыПоиска = Новый Структура(
			"Узел, СтрокаТаблицы, КакОбъект, Создать"
			, УзелПолучатель.Ссылка
			, СтрокаТаблицы
			, Ложь
			, Ложь
		);

		Если Лев(СтрокаТаблицы.Имя, 10) = "Справочник" Тогда

			Если СтрокаТаблицы.Имя = "Справочник.ФизическиеЛица" Тогда
				ПараметрыПоиска = Новый Структура(
					"Узел, СтрокаТаблицы, КакОбъект, Создать"
					, УзелПолучатель.Ссылка
					, СтрокаТаблицы
					, Ложь
					, Истина
				);
				ПараметрыПоиска.КакОбъект = Истина;
				ЭкземплярОбъекта = ЗаполнитьДанныеФизЛица(ПолучитьСсылочныйОбъект(ПараметрыПоиска, Справочники.ФизическиеЛица, "Справочник.ФизическиеЛица", "ИНН", СсылочныйКеш), СтрокаТаблицы.Данные);

			ИначеЕсли СтрокаТаблицы.Имя = "Справочник.Организации" Тогда

				ЭкземплярОбъекта = ПолучитьСсылочныйОбъект(ПараметрыПоиска, Справочники.Организации, "Справочник.Организации", "КодПоЕДРПОУ", СсылочныйКеш);

			ИначеЕсли СтрокаТаблицы.Имя = "Справочник.ДолжностиОрганизаций" Тогда

				ПараметрыПоиска.Создать = Истина;
				ЭкземплярОбъекта = ПолучитьСсылочныйОбъект(ПараметрыПоиска, Справочники.ДолжностиОрганизаций, "Справочник.ДолжностиОрганизаций", "КодКП", СсылочныйКеш);

			ИначеЕсли СтрокаТаблицы.Имя = "Справочник.ПодразделенияОрганизаций" Тогда	//	"сводим" через склад на магазин!

				ЭкземплярОбъекта = ПолучитьСсылочныйОбъект(ПараметрыПоиска, Справочники.Склады, "Справочник.Склады", "IDN", СсылочныйКеш);
				
				ПараметрыПоиска.Создать = Истина;
				ПараметрыПоиска.КакОбъект = Истина;
				ЭкземплярОбъекта1 = ЗаполнитьДанныеПодразделение(ПолучитьСсылочныйОбъект(ПараметрыПоиска, Справочники.ОбособленныеПодразделенияОрганизаций, "Справочник.ОбособленныеПодразделенияОрганизаций", "Код", СсылочныйКеш), СтрокаТаблицы.Данные, ПараметрыПоиска.СтрокаТаблицы.Идентификатор, СсылочныйКеш);
				
				Если Не ЭкземплярОбъекта = Неопределено Тогда 
					ЭкземплярОбъекта = ЭкземплярОбъекта1;
				КонецЕсли;
				
			Иначе

				ЭкземплярОбъекта = Неопределено;

			КонецЕсли;

		Иначе

			Отладочная = 22;

		КонецЕсли;

		Если ЭкземплярОбъекта = Неопределено Тогда

			ДанныеОтказа = РегистрыСведений.ОчередьОтказанныхСообщений.СтруктураОтказа();
			ДанныеОтказа.ТипОтправителя  = СтрокаТаблицы.Имя;
			ДанныеОтказа.Идентификатор   = СтрокаТаблицы.Идентификатор;
			ДанныеОтказа.ДанныеСообщения = ОбщегоНазначенияКлиентСервер.СтрокаТаблицыКакСтруктура(ДанныеСообщения.ТаблицаСсылок.Колонки, СтрокаТаблицы, Истина);
			ДанныеОтказа.ОснованиеОтказа = "не связано «" + СтрокаТаблицы.Данные.Наименование + "» (" + СтрокаТаблицы.Имя + ")";

			РегистрыСведений.ОчередьОтказанныхСообщений.УстановитьВОчереди(УзелПолучатель.Ссылка, ДанныеСообщения.НомерСообщения, ДанныеОтказа);

		КонецЕсли;

	КонецЦикла;

//	Теперь работаем со структурой набора записей..
//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	НаборЗаписей = РегистрыСведений.РаботникиОрганизаций.СоздатьНаборЗаписей();

	Для каждого СтруктураНабора Из ДанныеСообщения.ДанныеРегистра Цикл
		
		Если СтруктураНабора.ТипРегистра = "РегистрСведенийНаборЗаписей.СостояниеРаботниковОрганизаций" Тогда 
			Для каждого СтрокаТаблицы Из СтруктураНабора.НаборЗаписей Цикл
				НаборЗаписей = РегистрыСведений.СостояниеРаботниковОрганизаций.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Организация.Установить(СсылочныйКеш.Получить("Справочник.Организации#" + СтрокаТаблицы.Организация));
				НаборЗаписей.Отбор.Сотрудник.Установить(СсылочныйКеш.Получить("Справочник.ФизическиеЛица#" + СтрокаТаблицы.ФизЛицо));
				НаборЗаписей.Отбор.ДокументДвижения.Установить(СтруктураНабора.Отбор.ДокументДвиженияИД);
				НаборЗаписей.Очистить();
				
				ЗаписьНабора = НаборЗаписей.Добавить();
				
				ЗаписьНабора.Период = СтрокаТаблицы.Период;
				ЗаписьНабора.Организация   = НаборЗаписей.Отбор.Организация.Значение;
				ЗаписьНабора.Сотрудник     = НаборЗаписей.Отбор.Сотрудник.Значение;
				ЗаписьНабора.ДокументДвижения     = НаборЗаписей.Отбор.ДокументДвижения.Значение;
				
				ЗаписьНабора.Состояние        = ОбщегоНазначенияКлиентСервер.ЗначениеПеречисления(Перечисления.СостоянияРаботникаОрганизации, СтрокаТаблицы.Состояние);
				ЗаписьНабора.ПериодЗавершения    = СтрокаТаблицы.ПериодЗавершения;
				ЗаписьНабора.СостояниеЗавершения        = ОбщегоНазначенияКлиентСервер.ЗначениеПеречисления(Перечисления.СостоянияРаботникаОрганизации, СтрокаТаблицы.СостояниеЗавершения);
				
				ЗаписьНабора.ДокументДвиженияПредставление = СтрокаТаблицы.ДокументДвиженияПредставление;
				
				НаборЗаписей.Записать(Истина);
			КонецЦикла;
			
		ИначеЕсли СтруктураНабора.ТипРегистра = "РегистрСведенийНаборЗаписей.РаботникиОрганизацийДляОбмена" Тогда
			
			НаборЗаписей = РегистрыСведений.РаботникиОрганизаций.СоздатьНаборЗаписей();

		//	Отрабатываем значения отбора..
			//НаборЗаписей.Отбор.ПериодНачала.Установить(СтруктураНабора.Отбор.Период);
			НаборЗаписей.Отбор.Организация.Установить(СсылочныйКеш.Получить("Справочник.Организации#" + СтруктураНабора.Отбор.Организация));
			НаборЗаписей.Отбор.Сотрудник.Установить(СсылочныйКеш.Получить("Справочник.ФизическиеЛица#" + СтруктураНабора.Отбор.ФизЛицо));
			НаборЗаписей.Отбор.Идентификатор.Установить(СтруктураНабора.Отбор.ДокументДвижения);
			НаборЗаписей.Очистить();

			Для каждого СтрокаТаблицы Из СтруктураНабора.НаборЗаписей Цикл

				Если НЕ СтрокаТаблицы.Удалить Тогда	//	в случае "Удалить" запишем пустой набор записей

					ЗаписьНабора = НаборЗаписей.Добавить();
					
					СостояниеСотрудника = ОбщегоНазначенияКлиентСервер.ЗначениеПеречисления(Перечисления.ПричиныИзмененияСостояния, СтрокаТаблицы.ПричинаИзмененияСостояния);
					Если СостояниеСотрудника = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда 

						ЗаписьНабора.ПериодНачала = Дата(Год(СтруктураНабора.Отбор.Период), 
														Месяц(СтруктураНабора.Отбор.Период),
														День(СтруктураНабора.Отбор.Период));
					Иначе 								
						ЗаписьНабора.ПериодНачала = Дата(Год(СтруктураНабора.Отбор.Период), 
														Месяц(СтруктураНабора.Отбор.Период),
														День(СтруктураНабора.Отбор.Период),
														Час(СтрокаТаблицы.ВремяДокумента),
														Минута(СтрокаТаблицы.ВремяДокумента),
														Секунда(СтрокаТаблицы.ВремяДокумента));
														
					КонецЕсли;
					ЗаписьНабора.Организация   = НаборЗаписей.Отбор.Организация.Значение;
					ЗаписьНабора.Сотрудник     = НаборЗаписей.Отбор.Сотрудник.Значение;
					ЗаписьНабора.Идентификатор = НаборЗаписей.Отбор.Идентификатор.Значение;

					ЗаписьНабора.ВидЗанятости        = ОбщегоНазначенияКлиентСервер.ЗначениеПеречисления(Перечисления.ВидыЗанятости, СтрокаТаблицы.ВидЗанятости);
					ЗаписьНабора.ЗанимаемыхСтавок    = СтрокаТаблицы.ЗанимаемыхСтавок;
					ЗаписьНабора.Магазин             = СсылочныйКеш.Получить("Справочник.Магазины#" + СтрокаТаблицы.ПодразделениеОрганизации);
				//	ЗаписьНабора.ПериодНачала       =
					ЗаписьНабора.Должность           = СсылочныйКеш.Получить("Справочник.ДолжностиОрганизаций#" + СтрокаТаблицы.Должность);
					ЗаписьНабора.СостояниеСотрудника = ОбщегоНазначенияКлиентСервер.ЗначениеПеречисления(Перечисления.ПричиныИзмененияСостояния, СтрокаТаблицы.ПричинаИзмененияСостояния);
					ЗаписьНабора.ПринятНаНовоеРабочееМесто = СтрокаТаблицы.ПринятНаНовоеРабочееМесто;

					ЗаписьНабора.ДокументДвижения = СтрокаТаблицы.ДокументДвиженияПредставление;
					
					//ЗаполнитьОбособленноеПодразделение(СсылочныйКеш.Получить("Справочник.ОбособленныеПодразделенияОрганизаций#" + СтрокаТаблицы.ПодразделениеОрганизации),
					//									СсылочныйКеш.Получить("Справочник.Магазины#" + СтрокаТаблицы.ПодразделениеОрганизации),
					//									НаборЗаписей.Отбор.Организация.Значение);
					
				КонецЕсли;

			КонецЦикла;

			ОснованиеОтказа = "";

			Если ПроверитьВозможностьПринятияНабораЗаписей(НаборЗаписей, ОснованиеОтказа) Тогда

				НаборЗаписей.Записать(Истина);
				СделатьЗаписьДляОбновленияСпрПользователиИФизЛица(НаборЗаписей.Отбор.Сотрудник.Значение);
				РегистрыСведений.ОчередьОтказанныхСообщений.УдалитьИзОчереди(УзелПолучатель.Ссылка, "РегистрСведенийНаборЗаписей.РаботникиОрганизаций", СтруктураНабора.Отбор.ДокументДвижения); 
			Иначе

				ДанныеОтказа = РегистрыСведений.ОчередьОтказанныхСообщений.СтруктураОтказа();
				ДанныеОтказа.ТипОтправителя  = "РегистрСведенийНаборЗаписей.РаботникиОрганизаций";
				ДанныеОтказа.Идентификатор   = СтруктураНабора.Отбор.ДокументДвижения;
				ДанныеОтказа.ДанныеСообщения = СтруктураНабора;
				ДанныеОтказа.ОснованиеОтказа = ОснованиеОтказа;

				РегистрыСведений.ОчередьОтказанныхСообщений.УстановитьВОчереди(УзелПолучатель.Ссылка, ДанныеСообщения.НомерСообщения, ДанныеОтказа);

			КонецЕсли;
		КонецЕсли;
		

	КонецЦикла;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	Если НЕ РежимДогрузки Тогда

		УзелПолучатель.НомерПринятого = ДанныеСообщения.НомерСообщения;
		УзелПолучатель.Записать();

		ДанныеОтвета.НомерПринятого = УзелПолучатель.НомерПринятого;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьОбособленноеПодразделение(СсылкаНаОбособленноеПодразделение, Магазин, Владелец)
	
	ОбъектОбособленноеПодразделение = СсылкаНаОбособленноеПодразделение.ПолучитьОбъект();
	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Владелец", Владелец, ОбъектОбособленноеПодразделение);
	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("НаименованиеПолное", ОбъектОбособленноеПодразделение.Наименование, ОбъектОбособленноеПодразделение);
				
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураУзловМагазины.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтруктураУзлов.Магазины КАК СтруктураУзловМагазины
		|ГДЕ
		|	(СтруктураУзловМагазины.Магазин = &Магазин
		|			ИЛИ СтруктураУзловМагазины.Ссылка.Магазин = &Магазин)";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ЭлементСтруктуры", Выборка.Ссылка, ОбъектОбособленноеПодразделение);
	Иначе 
		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ЭлементСтруктуры", Справочники.СтруктураУзлов.ЦентральныйОфис, ОбъектОбособленноеПодразделение);
	КонецЕсли;
	
	Если ОбъектОбособленноеПодразделение.Модифицированность() Тогда
		ОбъектОбособленноеПодразделение.ОбменДанными.Загрузка = Истина;
		ОбъектОбособленноеПодразделение.Записать();
	КонецЕсли;
			
	
	
КонецПроцедуры


//	LNK 19.07.2018 13:20:25
Функция ПолучитьОбъектУзла(КлючиУзла)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	УзелСсылка = ПланыОбмена.ОбменРозницаЗарплатаУправлениеПерсоналом.ПолучитьСсылку(Новый УникальныйИдентификатор(КлючиУзла.Идентификатор));
	УзелОбъект = УзелСсылка.ПолучитьОбъект();

	Если УзелОбъект = Неопределено Тогда

	//	.. попытаемся найти по коду! Актуально для тестовых ИБ.

		УзелСсылка = ПланыОбмена.ОбменРозницаЗарплатаУправлениеПерсоналом.НайтиПоКоду(КлючиУзла.Код);
		УзелОбъект = УзелСсылка.ПолучитьОбъект();

		Если УзелОбъект = Неопределено Тогда

			УзелОбъект = ПланыОбмена.ОбменРозницаЗарплатаУправлениеПерсоналом.СоздатьУзел();
			УзелОбъект.УстановитьСсылкуНового(УзелСсылка);

			УзелОбъект.Код = КлючиУзла.Код;
			УзелОбъект.Наименование = КлючиУзла.Наименование;

			УзелОбъект.Записать();

		КонецЕсли;

	КонецЕсли;

	Возврат УзелОбъект;

КонецФункции // ПолучитьОбъектУзла()

//	LNK 30.07.2018 11:09:28
Процедура ДогрузитьОтказанныеРанееСообщения()	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаОчереди.УзелПолучатель КАК УзелПолучатель,
	|	ТаблицаОчереди.НомерСообщения КАК НомерСообщения,
	|	ВЫБОР
	|		КОГДА ТаблицаОчереди.ТипОтправителя = ""РегистрСведенийНаборЗаписей.РаботникиОрганизаций""
	|			ТОГДА ""2.НаборЗаписей""
	|		ИНАЧЕ ""1.Ссылки""
	|	КОНЕЦ КАК КлючТаблицы,
	|	ТаблицаОчереди.ТипОтправителя КАК ТипОтправителя,
	|	ТаблицаОчереди.Идентификатор КАК Идентификатор,
	|	ТаблицаОчереди.Индекс КАК Индекс,
	|	ТаблицаОчереди.ДанныеСообщения КАК ДанныеСообщения,
	|	ТаблицаОчереди.ДатаИзменения КАК ДатаИзменения
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	РегистрСведений.ОчередьОтказанныхСообщений КАК ТаблицаОчереди
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	УзелПолучатель,
	|	НомерСообщения,
	|	КлючТаблицы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСообщений.УзелПолучатель КАК УзелПолучатель,
	|	ТаблицаСообщений.КлючТаблицы КАК КлючТаблицы,
	|	ТаблицаСообщений.НомерСообщения КАК НомерСообщения
	|ИЗ
	|	Источник КАК ТаблицаСообщений
	|
	|УПОРЯДОЧИТЬ ПО
	|	УзелПолучатель,
	|	КлючТаблицы
	|ИТОГИ ПО
	|	УзелПолучатель,
	|	КлючТаблицы"
	);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	УзлыВыборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока УзлыВыборка.Следующий() Цикл

		КлючиВыборка = УзлыВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока КлючиВыборка.Следующий() Цикл

			НомерВыборка = КлючиВыборка.Выбрать();

			Пока НомерВыборка.Следующий() Цикл

				ТаблицаСсылок = Новый ТаблицаЗначений;
				ТаблицаСсылок.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
				ТаблицаСсылок.Колонки.Добавить("Имя"          , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(256)));
				ТаблицаСсылок.Колонки.Добавить("Данные"       , Новый ОписаниеТипов("Структура"));

				ДанныеСообщения = Новый Структура(
					"НомерСообщения, ТаблицаСсылок, ДанныеРегистра"
					, НомерВыборка.НомерСообщения
					, ТаблицаСсылок
					, Новый Массив
				);

				Запрос.Текст =
				"ВЫБРАТЬ
				|	Источник.ТипОтправителя КАК Имя,
				|	Источник.Идентификатор КАК Идентификатор,
				|	Источник.Индекс КАК Индекс,
				|	Источник.ДанныеСообщения КАК ДанныеСообщения,
				|	Источник.ДатаИзменения КАК ДатаИзменения
				|ИЗ
				|	Источник КАК Источник
				|ГДЕ
				|	Источник.УзелПолучатель = &УзелПолучатель
				|	И Источник.КлючТаблицы = &КлючТаблицы
				|	И Источник.НомерСообщения = &НомерСообщения
				|
				|УПОРЯДОЧИТЬ ПО
				|	Имя,
				|	ДатаИзменения"
				;
				Запрос.УстановитьПараметр("УзелПолучатель", НомерВыборка.УзелПолучатель);
				Запрос.УстановитьПараметр("КлючТаблицы"   , НомерВыборка.КлючТаблицы);
				Запрос.УстановитьПараметр("НомерСообщения", НомерВыборка.НомерСообщения);

				ДеталиВыборка = Запрос.Выполнить().Выбрать();

				Пока ДеталиВыборка.Следующий() Цикл

					Если Лев(НомерВыборка.КлючТаблицы, 2) = "1." Тогда

						СтрокаТаблицы = ДанныеСообщения.ТаблицаСсылок.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДеталиВыборка.ДанныеСообщения.Получить());

					Иначе

						ДанныеСообщения.ДанныеРегистра.Добавить(ДеталиВыборка.ДанныеСообщения.Получить());

					КонецЕсли;

				КонецЦикла;

				ВыполнитьЗагрузкуДанныхДляУзла(НомерВыборка.УзелПолучатель, ДанныеСообщения,, Истина);

			КонецЦикла;

		КонецЦикла;

	КонецЦикла;

	Запрос.Текст =
	"УНИЧТОЖИТЬ Источник"
	;
	Запрос.Выполнить();

КонецПроцедуры

#Область ЗаполнениеДанныхФизическогоЛица
//	LNK 23.07.2018 14:11:42
Функция ЗаполнитьДанныеФизЛица(ЭкземплярОбъекта, ДанныеФизЛица)

	Если НЕ ЭкземплярОбъекта = Неопределено Тогда

		#Если _ Тогда
		ЭкземплярОбъекта = Справочники.ФизическиеЛица.СоздатьЭлемент();
		#КонецЕсли

		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ПометкаУдаления", ДанныеФизЛица.ПометкаУдаления, ЭкземплярОбъекта);
		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Наименование", ДанныеФизЛица.Наименование, ЭкземплярОбъекта);
		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ДатаРождения", ДанныеФизЛица.ДатаРождения, ЭкземплярОбъекта);
		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ИНН", ДанныеФизЛица.ИНН, ЭкземплярОбъекта);
		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Пол", ОбщегоНазначенияКлиентСервер.ЗначениеПеречисления(Перечисления.ПолФизическогоЛица, ДанныеФизЛица.Пол), ЭкземплярОбъекта);

		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ДатаВыдачиПаспорта", ДанныеФизЛица.Паспорт.ДатаВыдачиПаспорта, ЭкземплярОбъекта);
		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("КемВыданПаспорт", ДанныеФизЛица.Паспорт.КемВыданПаспорт, ЭкземплярОбъекта);
		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("НомерПаспорта", СокрЛП(ДанныеФизЛица.Паспорт.НомерПаспорта), ЭкземплярОбъекта);

		//Если ЭкземплярОбъекта.Модифицированность() Тогда

			НачатьТранзакцию();

			Попытка

			//	1. Непосредственно ФизЛицо
				ЭкземплярОбъекта.ОбменДанными.Загрузка = Истина;
				ЭкземплярОбъекта.Записать();

			//	2. Фамилия Имя Отчество
				ФизЛицоФамилияИмяОтчество(ЭкземплярОбъекта.Ссылка, ДанныеФизЛица);

			//	3. Документ ФизЛица (Паспорт)
				ФизЛицоПаспорт(ЭкземплярОбъекта.Ссылка, ДанныеФизЛица);


			//	4. Телефоны ФизЛица 
				ФизЛицоТелефоны(ЭкземплярОбъекта, ДанныеФизЛица);
				ЗафиксироватьТранзакцию();
			
			Исключение

				ОтменитьТранзакцию();

				ТекстОшибки = ОписаниеОшибки();
				ВызватьИсключение ТекстОшибки;

			КонецПопытки;

		//КонецЕсли;

		ЭкземплярОбъекта = ЭкземплярОбъекта.Ссылка;
	Иначе	
		
	КонецЕсли;

	Возврат ЭкземплярОбъекта;

КонецФункции // ЗаполнитьДанныеФизЛица()

Функция ЗаполнитьДанныеПодразделение(ЭкземплярОбъекта, ДанныеПодразделения, Магазин, СсылочныйКеш)

	Если НЕ ЭкземплярОбъекта = Неопределено Тогда

		#Если _ Тогда
		ЭкземплярОбъекта = Справочники.ОбособленныеПодразделенияОрганизаций.СоздатьЭлемент();
		#КонецЕсли

		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Владелец", СсылочныйКеш.Получить("Справочник.Организации#" + ДанныеПодразделения.Владелец), ЭкземплярОбъекта);
		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Родитель", СсылочныйКеш.Получить("Справочник.ОбособленныеПодразделенияОрганизаций#" + ДанныеПодразделения.Родитель), ЭкземплярОбъекта);
		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("НаименованиеПолное", ДанныеПодразделения.Наименование, ЭкземплярОбъекта);

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтруктураУзловМагазины.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.СтруктураУзлов.Магазины КАК СтруктураУзловМагазины
			|ГДЕ
			|	(СтруктураУзловМагазины.Магазин = &Магазин
			|			ИЛИ СтруктураУзловМагазины.Ссылка.Магазин = &Магазин)";
		
		Запрос.УстановитьПараметр("Магазин", СсылочныйКеш.Получить("Справочник.Магазины#" + Магазин));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ЭлементСтруктуры", Выборка.Ссылка, ЭкземплярОбъекта);
		Иначе 
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ЭлементСтруктуры", Справочники.СтруктураУзлов.ЦентральныйОфис, ЭкземплярОбъекта);
		КонецЕсли;
		Если ЭкземплярОбъекта.Модифицированность() Тогда

			НачатьТранзакцию();

			Попытка

			//	1. Непосредственно ФизЛицо
				ЭкземплярОбъекта.ОбменДанными.Загрузка = Истина;
				ЭкземплярОбъекта.Записать();

				ЗафиксироватьТранзакцию();
			
			Исключение

				ОтменитьТранзакцию();

				ТекстОшибки = ОписаниеОшибки();
				ВызватьИсключение ТекстОшибки;

			КонецПопытки;

		КонецЕсли;

		ЭкземплярОбъекта = ЭкземплярОбъекта.Ссылка;
	Иначе	
		
	КонецЕсли;

	Возврат ЭкземплярОбъекта;

КонецФункции // ЗаполнитьДанныеФизЛица()

//	LNK 29.08.2018 14:16:54
Процедура ФизЛицоФамилияИмяОтчество(ФизЛицоСсылка, ДанныеФизЛица)	Экспорт

	Если ДанныеФизЛица.Свойство("ФИО") И НЕ ДанныеФизЛица.ФИО.Колонки.Количество() = 0 Тогда

		НаборЗаписей = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Отбор.ФизЛицо.Установить(ФизЛицоСсылка);

		НаборЗаписей.Записать();	//	очищаем всё!

		Для каждого СтрокаТаблицы Из ДанныеФизЛица.ФИО Цикл

			НаборЗаписей.Очистить();
			НаборЗаписей.Отбор.Период.Установить(СтрокаТаблицы.Период);

			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, СтрокаТаблицы);
			ЗаписьНабора.ФизЛицо = ФизЛицоСсылка;

			НаборЗаписей.Записать();	//	записываем уже по периодам.

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	LNK 29.08.2018 14:19:34
Процедура ФизЛицоПаспорт(ФизЛицоСсылка, ДанныеФизЛица)	Экспорт

	Если ДанныеФизЛица.Паспорт.Свойство("НомерПаспорта") И НЕ ПустаяСтрока(ДанныеФизЛица.Паспорт.НомерПаспорта) Тогда

		НаборЗаписей = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Отбор.Период.Установить(?(ДанныеФизЛица.Паспорт.Свойство("Период"), ДанныеФизЛица.Паспорт.Период, ДанныеФизЛица.Паспорт.ДатаВыдачиПаспорта));
		НаборЗаписей.Отбор.ФизЛицо.Установить(ФизЛицоСсылка);
		НаборЗаписей.Отбор.ВидДокумента.Установить(Справочники.ВидыДокументовФизическихЛиц.Паспорт);

		ЗаписьНабора = НаборЗаписей.Добавить();

		ЗаписьНабора.Период       = НаборЗаписей.Отбор.Период.Значение;
		ЗаписьНабора.ФизЛицо      = НаборЗаписей.Отбор.ФизЛицо.Значение;
		ЗаписьНабора.ВидДокумента = НаборЗаписей.Отбор.ВидДокумента.Значение;

		Если ДанныеФизЛица.Паспорт.Свойство("Серия") Тогда

			ЗаписьНабора.Серия = ДанныеФизЛица.Паспорт.Серия;
			ЗаписьНабора.Номер = ДанныеФизЛица.Паспорт.Номер;

		Иначе

			НомерПаспорта = СокрЛП(ДанныеФизЛица.Паспорт.НомерПаспорта);

			ПозицияРазделителя = СтрНайти(НомерПаспорта, " ");
			ЗаписьНабора.Серия = Лев(НомерПаспорта, ПозицияРазделителя - 1);
			ЗаписьНабора.Номер = Сред(НомерПаспорта, ПозицияРазделителя + 1);

		КонецЕсли;

		ЗаписьНабора.ДатаВыдачи = ДанныеФизЛица.Паспорт.ДатаВыдачиПаспорта;
		ЗаписьНабора.КемВыдан   = ДанныеФизЛица.Паспорт.КемВыданПаспорт;

		ЗаписьНабора.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
		ЗаписьНабора.ДатаИзменения = ТекущаяДата();

		НаборЗаписей.ЗаполнитьПредставление();

		НаборЗаписей.Записать();

	КонецЕсли;

КонецПроцедуры

Процедура ФизЛицоТелефоны(ФизЛицоОбъект, ДанныеФизЛица)	Экспорт

	Если ДанныеФизЛица.Телефоны.Свойство("Представление") И НЕ ПустаяСтрока(ДанныеФизЛица.Телефоны.Представление) Тогда
		
		ВидКИТелефон = Справочники.ВидыКонтактнойИнформации.ТелефонФизическогоЛица;
		ТипКИТелефон = Перечисления.ТипыКонтактнойИнформации.Телефон;
		
		ЗначениеXML = КонтактнаяИнформацияВызовСервера.ПарсингКонтактнойИнформацииXML(ДанныеФизЛица.Телефоны.Представление, ВидКИТелефон);
		
		СтрокаТелефона = ФизЛицоОбъект.КонтактнаяИнформация.Добавить();
		Для Каждого СтрокаКонтактнойИнформации Из ФизЛицоОбъект.КонтактнаяИнформация Цикл 
			
			Если СтрокаКонтактнойИнформации.Вид = ВидКИТелефон  Тогда 
				
				СтрокаТелефона = СтрокаКонтактнойИнформации;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ФизЛицоОбъект, ЗначениеXML, ВидКИТелефон, ТипКИТелефон,, СтрокаТелефона);
		
		
	//	Приведение номера к стандарту поиска.
		НомерТелефона = ОтправкаSMS.ПодготовитьНомерТелефона(ДанныеФизЛица.Телефоны.Представление);
		Контрагент    = Неопределено;	//	сбрасываем значение, возможно, ранее установленное

		ПараметрыИдентификации = Новый Структура(
			"НазначениеДанных, РазрешеноСозданиеНового"
			, Перечисления.НазначениеКонтрагентовОтложенных.ПроверкаВРознице
			, Истина
		);

		ДанныеКонтрагента = Новый Структура;
		ДанныеФИО = Неопределено;
		Если ДанныеФизЛица.Свойство("ФИО") И НЕ ДанныеФизЛица.ФИО.Колонки.Количество() = 0 Тогда
			Для каждого СтрокаТаблицы Из ДанныеФизЛица.ФИО Цикл
				ДанныеФИО = ОбменMicrosoftDynamicsСервер.ИнициализацияДанныхФИО(ДанныеФИО, СтрокаТаблицы.Фамилия, СтрокаТаблицы.Имя, СтрокаТаблицы.Отчество);
			КонецЦикла;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("Пол"		 , Перечисления.ПолФизическогоЛица.ПустаяСсылка(), ДанныеКонтрагента);
		ОбщегоНазначенияКлиентСервер.ПроверитьСвойство("ДатаРождения", '00010101', ДанныеКонтрагента);
		
		ДанныеКонтрагента.Пол = ОбщегоНазначенияКлиентСервер.ЗначениеПеречисления(Перечисления.ПолФизическогоЛица, ДанныеФизЛица.Пол);
		ДанныеКонтрагента.ДатаРождения = ДанныеФизЛица.ДатаРождения;

		
		СоставДанных = ОбменMicrosoftDynamicsСлужебный.ИдентифицироватьКлиентаПоДаннымCRM(
			  Неопределено
			, ДанныеКонтрагента
			, ""
			, НомерТелефона
			, Неопределено
			, ПараметрыИдентификации
			, ДанныеФИО
		);

		Если СоставДанных.Контрагент = Неопределено ИЛИ СоставДанных.Ошибка = Истина Тогда

			ТекстСообщения = "Покупатель по номеру телефона «" + НомерТелефона + "» НЕ ОБНАРУЖЕН!"
			+ ?(ПустаяСтрока(СоставДанных.ОписаниеОшибки), "", Символы.ПС + СоставДанных.ОписаниеОшибки);

		Иначе
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоставДанных.Контрагент, "ФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка(), Ложь).Пустая() Тогда 
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ИменаЛюдей.Ссылка КАК Ссылка
					|ПОМЕСТИТЬ ИмяФизЛица
					|ИЗ
					|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ) КАК ФизическоеЛицо
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИменаЛюдей КАК ИменаЛюдей
					|		ПО (ИменаЛюдей.Наименование = ФизическоеЛицо.Имя
					|				ИЛИ ФизическоеЛицо.Имя = ИменаЛюдей.НаименованиеУкраинское)
					|ГДЕ
					|	ФизическоеЛицо.ФизЛицо = &ФизЛицо
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ИменаЛюдей.Ссылка КАК Ссылка
					|ПОМЕСТИТЬ ИмяКонтрагента
					|ИЗ
					|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ) КАК Контрагент
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИменаЛюдей КАК ИменаЛюдей
					|		ПО (ИменаЛюдей.Наименование = Контрагент.Имя
					|				ИЛИ Контрагент.Имя = ИменаЛюдей.НаименованиеУкраинское)
					|ГДЕ
					|	Контрагент.ФизЛицо = &Контрагент
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ИмяФизЛица.Ссылка КАК Ссылка
					|ИЗ
					|	ИмяФизЛица КАК ИмяФизЛица
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИмяКонтрагента КАК ИмяКонтрагента
					|		ПО (ИмяКонтрагента.Ссылка = ИмяФизЛица.Ссылка)";
				
				Запрос.УстановитьПараметр("Контрагент", СоставДанных.Контрагент);
				Запрос.УстановитьПараметр("ФизЛицо", ФизЛицоОбъект.Ссылка);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Если Не РезультатЗапроса.Пустой() Тогда 
					
					КонтрагентОбъект = СоставДанных.Контрагент.ПолучитьОбъект();
					КонтрагентОбъект.ФизЛицо = ФизЛицоОбъект.Ссылка;
					КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
					КонтрагентОбъект.Записать();
					
				Иначе
					Тема = "Ошибка связи клиента и ФизЛица";
					
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Физическое лицо - %1
						|ИНН: %2 
						|Телефон: %3
						|Контрагент по этому телефону: %4",
						ФизЛицоОбъект, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизЛицоОбъект.Ссылка,"ИНН"), ДанныеФизЛица.Телефоны.Представление, СоставДанных.Контрагент);
							
					ПараметрыПисьма = Новый Структура;
					ПараметрыПисьма.Вставить("Тема", Тема);
					ПараметрыПисьма.Вставить("Тело", Текст);
					КомуОтправлятьМассив = Новый Массив;
					КомуОтправлятьМассив.Добавить(Новый Структура("Адрес, Представление","serhii.myshynskyi@antoshka.ua",""));
					КомуОтправлятьМассив.Добавить(Новый Структура("Адрес, Представление","yurii.sichkarenko@antoshka.ua",""));
					
					ПараметрыПисьма.Вставить("Кому", КомуОтправлятьМассив);
							
					РаботаСПочтовымиСообщениями.ОтправитьСообщение(РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
				КонецЕсли;
				
				ТекстСообщения = ""; 
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

//	LNK 20.07.2018 14:49:17
Функция ПроверитьВозможностьПринятияНабораЗаписей(НаборЗаписей, ОснованиеОтказа)

	Отказ = Ложь;

	КлючиКонтроля = Новый Массив;
	КлючиКонтроля.Добавить(Новый Структура("Имя, Описание", "Организация", "Справочник.Организации"));
	КлючиКонтроля.Добавить(Новый Структура("Имя, Описание", "Сотрудник", "Справочник.ФизическиеЛица"));

	Для каждого КлючКонтроля Из КлючиКонтроля Цикл

		Если НЕ ЗначениеЗаполнено(НаборЗаписей.Отбор[КлючКонтроля.Имя].Значение) Тогда

			Отказ = Истина;
			ОснованиеОтказа = ОснованиеОтказа + ?(ПустаяСтрока(ОснованиеОтказа), "", Символы.ПС)
			+ "Измерение «" + КлючКонтроля.Имя + "» (" + КлючКонтроля.Описание + ")"

		КонецЕсли;

	КонецЦикла;

	КлючиКонтроля = Новый Массив;
	КлючиКонтроля.Добавить(Новый Структура("Имя, Описание", "ВидЗанятости", "Перечисление.ВидыЗанятости"));
	КлючиКонтроля.Добавить(Новый Структура("Имя, Описание", "Магазин", "связано по Справочник.Склады"));
	КлючиКонтроля.Добавить(Новый Структура("Имя, Описание", "Должность", "Справочник.ДолжностиОрганизаций"));
	КлючиКонтроля.Добавить(Новый Структура("Имя, Описание", "СостояниеСотрудника", "Перечисление.ПричиныИзмененияСостояния"));

	НомерСтроки = 1;
	БылУказанРегистратор = Ложь;

	Для каждого ЗаписьНабора Из НаборЗаписей Цикл

		ОснованиеСтроки = "";

		Для каждого КлючКонтроля Из КлючиКонтроля Цикл

			Если НЕ ЗначениеЗаполнено(ЗаписьНабора[КлючКонтроля.Имя]) Тогда

				ОснованиеСтроки = ОснованиеСтроки + ?(ПустаяСтрока(ОснованиеСтроки), "", " # ")
				+ "ресурс «" + КлючКонтроля.Имя + "» (" + КлючКонтроля.Описание + ")"

			КонецЕсли;

		КонецЦикла;

		Если НЕ ПустаяСтрока(ОснованиеСтроки) Тогда

			Отказ = Истина;
			ОснованиеОтказа = ОснованиеОтказа + ?(ПустаяСтрока(ОснованиеОтказа), "", Символы.ПС)
				+ "стр." + Формат(НомерСтроки, "ЧДЦ=; ЧГ=") + ". " + ОснованиеСтроки;

		КонецЕсли;

		НомерСтроки = НомерСтроки + 1;

		Если Отказ И НЕ БылУказанРегистратор Тогда

		//	Представление регистратора только в таблице "набора записей".
			ОснованиеОтказа = "Регистратор: " + ЗаписьНабора.ДокументДвижения + Символы.ПС + ОснованиеОтказа;
			БылУказанРегистратор = Истина;

		КонецЕсли;

	КонецЦикла;

	Возврат НЕ Отказ;

КонецФункции

//	LNK 19.07.2018 14:55:23
Функция ПолучитьСсылочныйОбъект(ПараметрыПоиска, МенеджерОбъекта, ПолноеИмя, ВторичныйКлюч = "", СсылочныйКеш)

	//СсылкаНаОбъект = СсылочныйКеш.Получить(ПараметрыПоиска.СтрокаТаблицы.Имя + "#" + ПараметрыПоиска.СтрокаТаблицы.Идентификатор);
	СсылкаНаОбъект = СсылочныйКеш.Получить(ПолноеИмя + "#" + ПараметрыПоиска.СтрокаТаблицы.Идентификатор);

	Если СсылкаНаОбъект = Неопределено Тогда

		СсылкаНаОбъект = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(ПараметрыПоиска.СтрокаТаблицы.Идентификатор));

		НайденПоСоответствию = Ложь;

		Если ОбщегоНазначенияКлиентСервер.СсылкаПустая(СсылкаНаОбъект) Тогда

			Если НЕ ПустаяСтрока(ВторичныйКлюч) И НЕ ПустаяСтрока(ПараметрыПоиска.СтрокаТаблицы.Данные[ВторичныйКлюч]) Тогда

				ТекстЗапроса =
				"ВЫБРАТЬ
				|	ТаблицаСправочник.Ссылка КАК Ссылка,
				|	ТаблицаСправочник.ПометкаУдаления КАК ПометкаУдаления
				|ИЗ
				|	Справочник.ФизическиеЛица КАК ТаблицаСправочник
				|ГДЕ
				|	ТаблицаСправочник.ИНН = &ВторичныйКлюч
				|
				|УПОРЯДОЧИТЬ ПО
				|	ПометкаУдаления УБЫВ"
				;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.ФизическиеЛица КАК", ПолноеИмя + " КАК");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаСправочник.ИНН =", "ТаблицаСправочник." + ВторичныйКлюч + " =");

				Запрос = Новый Запрос(ТекстЗапроса);
				Запрос.УстановитьПараметр("ВторичныйКлюч", ПараметрыПоиска.СтрокаТаблицы.Данные[ВторичныйКлюч]);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда

					СсылкаНаОбъект = Выборка.Ссылка;

				КонецЕсли;

			КонецЕсли;

			Если ОбщегоНазначенияКлиентСервер.СсылкаПустая(СсылкаНаОбъект) Тогда	//	.. нет такого объекта!

				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ТаблицаСоответствий.УникальныйИдентификаторИсточника КАК Ссылка
				|ИЗ
				|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК ТаблицаСоответствий
				|ГДЕ
				|	ТаблицаСоответствий.УзелИнформационнойБазы = &Узел
				|	И ТаблицаСоответствий.УникальныйИдентификаторПриемника = &Идентификатор
				|	И ТаблицаСоответствий.ТипПриемника = &ТипПриемника
				|	И ТаблицаСоответствий.ТипИсточника = &ТипИсточника"
				);
				Запрос.УстановитьПараметр("Узел", ПараметрыПоиска.Узел);
				Запрос.УстановитьПараметр("ТипПриемника" , ПараметрыПоиска.СтрокаТаблицы.Имя);	//	"Внешнее" имя!
				Запрос.УстановитьПараметр("ТипИсточника" , ПолноеИмя);			//	"Внутреннее" имя!
				Запрос.УстановитьПараметр("Идентификатор", ПараметрыПоиска.СтрокаТаблицы.Идентификатор);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				НужноЗаполнитьСоответствие = Истина;
				Пока Выборка.Следующий() Цикл 
					Если НЕ ОбщегоНазначенияКлиентСервер.СсылкаПустая(Выборка.Ссылка) Тогда
						СсылкаНаОбъект = Выборка.Ссылка;
						НайденПоСоответствию = Истина; 
						НужноЗаполнитьСоответствие = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ОбщегоНазначенияКлиентСервер.СсылкаПустая(СсылкаНаОбъект) Тогда

					Если ПараметрыПоиска.Создать Тогда

						НовыйОбъект = МенеджерОбъекта.СоздатьЭлемент();

						НовыйОбъект.УстановитьСсылкуНового(МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(ПараметрыПоиска.СтрокаТаблицы.Идентификатор)));
						НовыйОбъект.Наименование = ПараметрыПоиска.СтрокаТаблицы.Данные.Наименование;

						Если НЕ НовыйОбъект.Метаданные().ДлинаКода = 0 Тогда

							НовыйОбъект.УстановитьНовыйКод();

						КонецЕсли;

						Если НЕ ПустаяСтрока(ВторичныйКлюч) И НЕ ПустаяСтрока(ПараметрыПоиска.СтрокаТаблицы.Данные[ВторичныйКлюч]) Тогда

							НовыйОбъект[ВторичныйКлюч] = ПараметрыПоиска.СтрокаТаблицы.Данные[ВторичныйКлюч];

						КонецЕсли;

						НовыйОбъект.ОбменДанными.Загрузка = Истина;
						
						Если ОбщегоНазначения.ЕстьРеквизитОбъекта(НовыйОбъект, "НаименованиеПолное") Тогда 
							НовыйОбъект.НаименованиеПолное = НовыйОбъект.Наименование;
						КонецЕсли;
						
						НовыйОбъект.Записать();
						СсылкаНаОбъект = НовыйОбъект.Ссылка;

					ИначеЕсли НужноЗаполнитьСоответствие Тогда

						НаборЗаписей = РегистрыСведений.СоответствияОбъектовИнформационныхБаз.СоздатьНаборЗаписей();
						НаборЗаписей.ОбменДанными.Загрузка = Истина;

						НаборЗаписей.Отбор.УзелИнформационнойБазы.Установить(ПараметрыПоиска.Узел);
						НаборЗаписей.Отбор.УникальныйИдентификаторПриемника.Установить(ПараметрыПоиска.СтрокаТаблицы.Идентификатор);
						НаборЗаписей.Отбор.ТипПриемника.Установить(ПараметрыПоиска.СтрокаТаблицы.Имя);	//	"Внешнее" имя!
						НаборЗаписей.Отбор.ТипИсточника.Установить(ПолноеИмя);			//	"Внутреннее" имя!

						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаписьНабора.УзелИнформационнойБазы = НаборЗаписей.Отбор.УзелИнформационнойБазы.Значение;
						ЗаписьНабора.УникальныйИдентификаторПриемника = НаборЗаписей.Отбор.УникальныйИдентификаторПриемника.Значение;
						ЗаписьНабора.ТипПриемника = НаборЗаписей.Отбор.ТипПриемника.Значение;
						ЗаписьНабора.ТипИсточника = НаборЗаписей.Отбор.ТипИсточника.Значение;

						ЗаписьНабора.Представление = ПараметрыПоиска.СтрокаТаблицы.Данные.Наименование;

						НаборЗаписей.Записать();

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		Если НЕ ОбщегоНазначенияКлиентСервер.СсылкаПустая(СсылкаНаОбъект) Тогда

			СсылочныйКеш.Вставить(ПолноеИмя + "#" + ПараметрыПоиска.СтрокаТаблицы.Идентификатор, СсылкаНаОбъект);

			Если НЕ НайденПоСоответствию Тогда

				УдалитьОбъектИзРегистраСоответствий(ПараметрыПоиска.Узел, ПараметрыПоиска.СтрокаТаблицы, ПолноеИмя, СсылкаНаОбъект);

			КонецЕсли;

			РегистрыСведений.ОчередьОтказанныхСообщений.УдалитьИзОчереди(ПараметрыПоиска.Узел, ПараметрыПоиска.СтрокаТаблицы.Имя, ПараметрыПоиска.СтрокаТаблицы.Идентификатор);

			Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Склады") Тогда

			//	"переводим" склад в магазин..
				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ТаблицаСправочник.Магазин КАК Магазин
				|ИЗ
				|	Справочник.Склады КАК ТаблицаСправочник
				|ГДЕ
				|	ТаблицаСправочник.Ссылка = &СсылкаНаОбъект"
				);
				Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);

				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();

				СсылкаНаОбъект = Выборка.Магазин;
			//	.. и в кеше тоже слепим подмену понятий!
				СсылочныйКеш.Вставить("Справочник.Магазины#" + ПараметрыПоиска.СтрокаТаблицы.Идентификатор, СсылкаНаОбъект);

			КонецЕсли;

		Иначе

			СсылкаНаОбъект = Неопределено;

		КонецЕсли;

	КонецЕсли;

	Возврат ?(ПараметрыПоиска.КакОбъект И НЕ СсылкаНаОбъект = Неопределено, СсылкаНаОбъект.ПолучитьОбъект(), СсылкаНаОбъект);

КонецФункции // ПолучитьСсылочныйОбъект()

//	LNK 20.07.2018 08:19:33
Процедура УдалитьОбъектИзРегистраСоответствий(Узел, СтрокаТаблицы, ПолноеИмя, СсылкаНаОбъект)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСоответствий.УникальныйИдентификаторИсточника КАК УникальныйИдентификаторИсточника,
	|	ТаблицаСоответствий.УникальныйИдентификаторПриемника КАК УникальныйИдентификаторПриемника,
	|	ТаблицаСоответствий.ТипПриемника КАК ТипПриемника
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК ТаблицаСоответствий
	|ГДЕ
	|	ТаблицаСоответствий.УзелИнформационнойБазы = &Узел
	|	И (ТаблицаСоответствий.УникальныйИдентификаторИсточника = &СсылкаНаОбъект
	|			ИЛИ ТаблицаСоответствий.УникальныйИдентификаторПриемника = &Идентификатор
	|				И (ТаблицаСоответствий.ТипПриемника = &ТипПриемника
	|					И ТаблицаСоответствий.ТипИсточника = &ТипИсточника))"
	);
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ТипПриемника"  , СтрокаТаблицы.Имя);	//	"Внешнее" имя!
	Запрос.УстановитьПараметр("Идентификатор" , СтрокаТаблицы.Идентификатор);
	Запрос.УстановитьПараметр("ТипИсточника" , ПолноеИмя);			//	"Внутреннее" имя!
	
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		Выборка = Результат.Выбрать();

		НаборЗаписей = РегистрыСведений.СоответствияОбъектовИнформационныхБаз.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;

		Пока Выборка.Следующий() Цикл

			НаборЗаписей.Отбор.УзелИнформационнойБазы.Установить(Узел);
			НаборЗаписей.Отбор.УникальныйИдентификаторИсточника.Установить(Выборка.УникальныйИдентификаторИсточника);
			НаборЗаписей.Отбор.УникальныйИдентификаторПриемника.Установить(Выборка.УникальныйИдентификаторПриемника);
			НаборЗаписей.Отбор.ТипПриемника.Установить(Выборка.ТипПриемника);	//	"Внешнее" имя!
			НаборЗаписей.Отбор.ТипПриемника.Установить(ПолноеИмя);			//	"Внутреннее" имя!

			НаборЗаписей.Записать();

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура  СделатьЗаписьДляОбновленияСпрПользователиИФизЛица(ФизЛицо)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьОтказанныхСообщений.ФизЛицо КАК ФизЛицо
		|ИЗ
		|	РегистрСведений.ОчередьОтказанныхСообщений КАК ОчередьОтказанныхСообщений
		|ГДЕ
		|	ОчередьОтказанныхСообщений.ФизЛицо = &ФизЛицо";
	
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
		НаборЗаписей = РегистрыСведений.ОчередьОтказанныхСообщений.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;

		НаборЗаписей.Отбор.УзелПолучатель.Установить(ПланыОбмена.ОбменРозницаЗарплатаУправлениеПерсоналом.ПустаяСсылка());
		НаборЗаписей.Отбор.НомерСообщения.Установить(1);
		НаборЗаписей.Отбор.ТипОтправителя.Установить("Розница");
		НаборЗаписей.Отбор.Идентификатор.Установить(Строка(ФизЛицо.УникальныйИдентификатор()));
		НаборЗаписей.Отбор.Индекс.Установить(1);

		ЗаписьНабора = НаборЗаписей.Добавить();

		ЗаписьНабора.УзелПолучатель = ПланыОбмена.ОбменРозницаЗарплатаУправлениеПерсоналом.ПустаяСсылка();
		ЗаписьНабора.НомерСообщения = 1;
		ЗаписьНабора.ТипОтправителя = "Розница";
		ЗаписьНабора.Идентификатор  = Строка(ФизЛицо.УникальныйИдентификатор());
		ЗаписьНабора.Индекс = 1;
		ЗаписьНабора.ДанныеСообщения = Новый ХранилищеЗначения("Обвноить справочники Физ лица и Пользователи!", Новый СжатиеДанных(9));

		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти
