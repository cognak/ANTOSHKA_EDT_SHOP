#Область ПолучениеНекоторыхНастроекПодсистемы

//	LNK 16.02.2021 09:38:41
Функция ИспользоватьБонуснуюСистему(Период = '00010101')	Экспорт

	УчетнаяПолитика = ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику(?(Период = '00010101', ТекущаяДата(), Период));

	Возврат УчетнаяПолитика.ИспользоватьБонуснуюСистему;

КонецФункции

Функция НеНачислятьБаллыПриОплатеБонусами()	Экспорт

	Возврат ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику().НеНачислятьБаллыПриОплатеБонусами;

КонецФункции

//	LNK 11.06.2021 07:45:40
Функция СписыватьАкционныеБонусныеБаллы(ПолноеИмяМетаданных)	Экспорт

	Возврат Справочники.ИдентификаторыОбъектовМетаданных.СписыватьАкционныеБонусныеБаллы(ПолноеИмяМетаданных);

КонецФункции

Функция ЕстьТабличнаяЧастьОплатаБонуснымиБаллами(ПолноеИмяМетаданных)	Экспорт

	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных);

	Возврат НЕ МетаданныеОбъекта.ТабличныеЧасти.Найти("ОплатаБонуснымиБаллами") = Неопределено;

КонецФункции

Функция ДвиженияЧековВыполняются(СтатусЧекаККМ, Период = '00010101')	Экспорт	//	LNK 20.10.2021 11:44:31

	ЕстьДвижения = ОбменДаннымиПовтИсп.ЭтоГлавныйУзел();	//	в ЦБ движения есть всегда!

	Если НЕ ЕстьДвижения Тогда	//	только на периферии

		УчетнаяПолитика = ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику(?(Период = '00010101', ТекущаяДата(), Период));

	//	LNK 21.10.2021 04:49:39 "УчетнаяПолитика.ИспользоватьБонуснуюСистему" не учитываем, так как если есть состав ТЧ, то и движения нужно делать.
		Если УчетнаяПолитика.ИспользоватьЧекиКакРегистраторыНачисленияБонусныхБаллов Тогда

				ЕстьДвижения = Истина;

		Иначе	ЕстьДвижения = (СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый);

		КонецЕсли;

	КонецЕсли;

	Возврат ЕстьДвижения;

КонецФункции

#КонецОбласти

#Область МетодыОпределенияНазначенияТипаБонусов

Функция ПриоритетТипаБонусов(ТипБонусов)	Экспорт

	СоставТипов = Новый Соответствие;
	СоставТипов.Вставить(Перечисления.ТипыБонусов.Органический, 1);
	СоставТипов.Вставить(Перечисления.ТипыБонусов.Привлечение , 2);
	СоставТипов.Вставить(Перечисления.ТипыБонусов.Акционный	  , 3);

	ПриоритетТипа = СоставТипов.Получить(ТипБонусов);
	ПриоритетТипа = ?(ПриоритетТипа = Неопределено, 0, ПриоритетТипа);

	Возврат ПриоритетТипа;

КонецФункции

Функция АвтоматическиеТипыБонусов()	Экспорт

	ТипыБонусов = Новый Массив;

	ТипыБонусов.Добавить(Перечисления.ТипыБонусов.Акционный);

	Возврат ТипыБонусов;

КонецФункции

Функция УправляемыеТипыБонусов()	Экспорт

	ТипыБонусов = Новый Массив;
	АвтоматическиеТипы = АвтоматическиеТипыБонусов();
	#Если _ Тогда
	АвтоматическиеТипы = Новый Массив;
	#КонецЕсли

	Для каждого ТипБонусов Из Перечисления.ТипыБонусов Цикл

		Если АвтоматическиеТипы.Найти(ТипБонусов) = Неопределено Тогда

			ТипыБонусов.Добавить(ТипБонусов);

		КонецЕсли;

	КонецЦикла;

	Возврат ТипыБонусов;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#КонецОбласти







