
#Область ПрограммныйИнтерфейс

Процедура ОтправитьСообщения() Экспорт

	МассивСообщений = Новый Массив;
	МассивДляУдаления = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 50
		|	ДанныеДляБрокераСообщений.Канал КАК Канал,
		|	ДанныеДляБрокераСообщений.НомерЗаписи КАК НомерЗаписи,
		|	ДанныеДляБрокераСообщений.ДанныеДляОтправки КАК ДанныеДляОтправки,
		|	ДанныеДляБрокераСообщений.УИ,
		|	ДанныеДляБрокераСообщений.Тип,
		|	ДанныеДляБрокераСообщений.ОтметкаВремени,
		|	ДанныеДляБрокераСообщений.Представление,
		|	ДанныеДляБрокераСообщений.ТипСодержимого,
		|	ДанныеДляБрокераСообщений.ПромежуточнаяЗапись,
		|	ДанныеДляБрокераСообщений.СсылкаНаОбъект
		|ИЗ
		|	РегистрСведений.КафкаДанныеДляБрокераСообщений КАК ДанныеДляБрокераСообщений
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерЗаписи
		|ИТОГИ
		|ПО
		|	Канал";

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаКанал = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаКанал.Следующий() Цикл

		Выборка = ВыборкаКанал.Выбрать();

		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ПромежуточнаяЗапись Тогда
				Если Выборка.ТипСодержимого = Перечисления.КафкаТипСодержимого.application_json Тогда
					ДанныеДляОтправки=КафкаСервер.ОбъектВСтрокуJSON(Выборка.СсылкаНаОбъект); 
				Иначе
					ДанныеДляОтправки=КафкаСервер.ОбъектВСтрокуXML(Выборка.СсылкаНаОбъект, Выборка.ДанныеДляОтправки); 
				КонецЕсли;
				
				Набор = РегистрыСведений.КафкаДанныеДляБрокераСообщений.СоздатьНаборЗаписей();
				Набор.Отбор.Канал.Установить(Выборка.Канал);
				Набор.Отбор.НомерЗаписи.Установить(Выборка.НомерЗаписи);
				Набор.Прочитать();
				Набор[0].Канал = Выборка.Канал;
				Набор[0].НомерЗаписи = Выборка.НомерЗаписи;
				Набор[0].УИ = Выборка.УИ;
				Набор[0].Тип = Выборка.Тип;
				Набор[0].ОтметкаВремени = Выборка.ОтметкаВремени;
				Набор[0].Представление = Выборка.Представление;
				Набор[0].ТипСодержимого = Выборка.ТипСодержимого;
				Набор[0].СсылкаНаОбъект = Выборка.СсылкаНаОбъект;
				Набор[0].ПромежуточнаяЗапись = Ложь;
				Набор[0].ДанныеДляОтправки = ДанныеДляОтправки;
				Набор.Записать();
			Иначе
				ГотовоеСообщение = ПодготовкаСообщения(Выборка);
				МассивСообщений.Добавить(ГотовоеСообщение);

			КонецЕсли;
			
		КонецЦикла;
		
		Если Не МассивСообщений.Количество() = 0 Тогда
	
			ОтветСервера = КафкаСервер.ОтправитьПоКаналу(МассивСообщений, ВыборкаКанал.Канал);
				
			Если Не ОтветСервера = Неопределено Тогда
				
				Для ИндекДляМассива = 0 По МассивСообщений.Количество() - 1 Цикл
					
					Если ОтветСервера[ИндекДляМассива].error_code = Неопределено Тогда
						
						Набор = РегистрыСведений.КафкаДанныеДляБрокераСообщений.СоздатьНаборЗаписей();
						Набор.Отбор.Канал.Установить(МассивСообщений[ИндекДляМассива].ИмяКаналаОтправки);
						Набор.Отбор.НомерЗаписи.Установить(МассивСообщений[ИндекДляМассива].НомерЗаписи);
						Набор.Записать();
						
					КонецЕсли;

				КонецЦикла;
				
			КонецЕсли;
	
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры

// Получить сообщение.
// 
// Параметры:
//  КаналПолучения - Произвольный - Канал получения
Процедура ПолучитьСообщение(КаналПолучения) Экспорт
	
	ДанныеПолучены = КафкаСервер.ПолучитьСообщения(КаналПолучения);

	Если ДанныеПолучены Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДанныеПотокаОбмена.ВремяПолучения,
			|	ДанныеПотокаОбмена.ПолученныеДанные
			|ИЗ
			|	РегистрСведений.КафкаДанныеПотокаОбмена КАК ДанныеПотокаОбмена
			|ГДЕ
			|	ДанныеПотокаОбмена.ОтветСервера";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл

			ЗаписиПотока = Выборка.ПолученныеДанные.Получить();
			Попытка
				Для Каждого _ЗаписьВПотоке из ЗаписиПотока Цикл
					Попытка
						ДанныеПотока = _ЗаписьВПотоке["value"];
						
						МенеджерЗаписи = РегистрыСведений.КафкаДанныеПотокаОбмена.СоздатьМенеджерЗаписи();
					
						МенеджерЗаписи.ВремяПолучения = ТекущаяУниверсальнаяДатаВМиллисекундах();
						МенеджерЗаписи.ОтветСервера = Ложь;
						МенеджерЗаписи.ПолученныеДанные = Новый ХранилищеЗначения(ДанныеПотока);
						МенеджерЗаписи.Записать();  
						
		//				ДанныеДляФиксации = ДанныеФиксации(СокрЛП(КаналПолучения.КаналПодписки),
		//					_ЗаписьВПотоке["partition"],
		//					_ЗаписьВПотоке["offset"]);
		//				КоннекторHTTP.Post(
		//					БазовыйURL + "/offsets ", ДанныеДляФиксации, Новый Структура("Заголовки", ЗаголовкиПодписки)
		//				);
					Исключение
						ВызватьИсключение;
					КонецПопытки;
				
				КонецЦикла;
				
				Набор = РегистрыСведений.КафкаДанныеПотокаОбмена.СоздатьНаборЗаписей();
				Набор.Отбор.ОтветСервера.Установить(Истина);
				Набор.Отбор.ВремяПолучения.Установить(Выборка.ВремяПолучения);
				Набор.Записать();
			Исключение
				Прервать;
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеПотокаОбмена.ВремяПолучения,
		|	ДанныеПотокаОбмена.ПолученныеДанные
		|ИЗ
		|	РегистрСведений.КафкаДанныеПотокаОбмена КАК ДанныеПотокаОбмена
		|ГДЕ
		|	НЕ ДанныеПотокаОбмена.ОтветСервера";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл

		ДанныеПотока = Выборка.ПолученныеДанные.Получить();
		
		Попытка
			ДанныеДляОбработки = ДанныеПотока["data"];
		
			Если ДанныеПотока.datacontenttype = ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.КафкаТипСодержимого.application_xml) Тогда

				Обработка  = Обработки.УниверсальныйОбменДаннымиXML.Создать();
				ИмяВременногоФайлаДанных = ПолучитьИмяВременногоФайла("xml");
				
				Текст = Новый ТекстовыйДокумент;
				Текст.ДобавитьСтроку(ДанныеДляОбработки);
				Текст.Записать(ИмяВременногоФайлаДанных);
				
				Обработка.НеВыводитьНикакихИнформационныхСообщенийПользователю = Истина;
				Обработка.ИмяФайлаОбмена = ИмяВременногоФайлаДанных;
				Обработка.РежимОбмена    = "Загрузка";
				Обработка.ЗаписыватьРегистрыНаборамиЗаписей = Истина;
				Обработка.ЗаписыватьВИнформационнуюБазуТолькоИзмененныеОбъекты = Истина;
				Обработка.ЗагружатьДанныеВРежимеОбмена = Истина;
				Обработка.ВыполнитьЗагрузку();
				УдалитьФайлы(ИмяВременногоФайлаДанных);
				
				Набор = РегистрыСведений.КафкаДанныеПотокаОбмена.СоздатьНаборЗаписей();
				Набор.Отбор.ОтветСервера.Установить(Ложь);
				Набор.Отбор.ВремяПолучения.Установить(Выборка.ВремяПолучения);
				Набор.Записать();

			ИначеЕсли ДанныеПотока.datacontenttype = ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.КафкаТипСодержимого.application_json) Тогда
				 
				ОбъектДляЗагрузки = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(ДанныеДляОбработки);
				ОбъектДляЗагрузки.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов"	, Истина);
				ОбъектДляЗагрузки.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииMicrosoftDynamics", Истина);
				ОбъектДляЗагрузки.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"	, Истина);
				ОбъектДляЗагрузки.ДополнительныеСвойства.Вставить("ЗагрузкаKafka"	, Истина);
				ОбъектДляЗагрузки.ОбменДанными.Загрузка = Истина;
				ОбъектДляЗагрузки.Записать();
				 
				Набор = РегистрыСведений.КафкаДанныеПотокаОбмена.СоздатьНаборЗаписей();
				Набор.Отбор.ВремяПолучения.Установить(Выборка.ВремяПолучения);
				Набор.Записать();

			КонецЕсли;
			
		Исключение
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'КАФКА. Обработка полученных сообщений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ОписаниеОшибки());

//				Набор = РегистрыСведений.КафкаДанныеПотокаОбмена.СоздатьНаборЗаписей();
//				Набор.Отбор.ВремяПолучения.Установить(Выборка.ВремяПолучения);
//				Набор.Записать();

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодготовкаСообщения(ДанныеСообщения)
	
	СтруктураСообщения = Новый Структура;
	
	СтруктураСообщения.Вставить("ВерсияСпецификации", "1.0");
	СтруктураСообщения.Вставить("Тип", ДанныеСообщения.Тип);
	СтруктураСообщения.Вставить("Источник", "e1s://retail.antoshka.ua");
	СтруктураСообщения.Вставить("Идентификатор", ДанныеСообщения.УИ);
	СтруктураСообщения.Вставить("ОтметкаВремени", ДанныеСообщения.ОтметкаВремени);
	СтруктураСообщения.Вставить("ПредметИсточника", ДанныеСообщения.Представление);
	СтруктураСообщения.Вставить("СхемаДанных", "http://localhost:8081/");
	СтруктураСообщения.Вставить("Данные", ДанныеСообщения.ДанныеДляОтправки);
	СтруктураСообщения.Вставить("ИмяКаналаОтправки", ДанныеСообщения.Канал);
	СтруктураСообщения.Вставить("ТипСодержимого", ОбщегоНазначения.ИмяЗначенияПеречисления(ДанныеСообщения.ТипСодержимого));
	СтруктураСообщения.Вставить("НомерЗаписи", ДанныеСообщения.НомерЗаписи);

	Возврат СтруктураСообщения;
КонецФункции

#КонецОбласти


