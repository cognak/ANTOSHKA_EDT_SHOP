
#Область ПрограммныйИнтерфейс

Функция Подключение(ИмяСервиса, Таймаут = 40)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ЗащищенноеСоединение = Ложь;	//	LNK 06.09.2022 06:06:42

	Определения = Новый WSОпределения(УправлениеДоступомСлужебныйПовтИсп.ПолучитьСтрокуWebСоединения(ПараметрыСеанса.ТекущийМагазин, ЗащищенноеСоединение) + "ws/" + ИмяСервиса + ".1cws?wsdl"
		, УправлениеДоступомСлужебныйПовтИсп.ИдентификаторWebПосредника()
		, УправлениеДоступомСлужебныйПовтИсп.ПарольWebПосредника()
		,
		, Таймаут
		, ?(ЗащищенноеСоединение = Истина, Новый ЗащищенноеСоединениеOpenSSL, Неопределено)
	);
	Прокси = Новый WSПрокси(Определения, "http://antoshka/retail/" + НРег(ИмяСервиса), ИмяСервиса, ИмяСервиса + "Soap",, Таймаут);

	Прокси.Пользователь = УправлениеДоступомСлужебныйПовтИсп.ИдентификаторWebПосредника();
	Прокси.Пароль       = УправлениеДоступомСлужебныйПовтИсп.ПарольWebПосредника();

	Возврат Прокси;

КонецФункции

//	Сичкаренко 04.02.2021
Функция ПодключениеHTTP(Таймаут = 40)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;
	
	ЗащищенноеСоединение = Ложь;	//	LNK 06.09.2022 06:06:42

	СтруктураАдреса = ПолучениеФайловИзИнтернетаКлиентСервер.СтруктураURI(УправлениеДоступомСлужебныйПовтИсп.ПолучитьСтрокуWebСоединения(ПараметрыСеанса.ТекущийМагазин, ЗащищенноеСоединение));
	
	Если СтруктураАдреса.Схема = "https" Тогда
		HTTP = Новый HTTPСоединение(СтруктураАдреса.ИмяСервера,,УправлениеДоступомСлужебныйПовтИсп.ИдентификаторHTTPПосредника(),УправлениеДоступомСлужебныйПовтИсп.ПарольHTTPПосредника(),,Таймаут, Новый ЗащищенноеСоединениеOpenSSL);
	Иначе 
		HTTP = Новый HTTPСоединение(СтруктураАдреса.ИмяСервера,,УправлениеДоступомСлужебныйПовтИсп.ИдентификаторHTTPПосредника(),УправлениеДоступомСлужебныйПовтИсп.ПарольHTTPПосредника(),,Таймаут);
	КонецЕсли;
	
	Возврат HTTP;

КонецФункции // Подключение()

//	LNK 18.02.2019 13:22:48
Функция Таймаут(Идентификатор)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаПараметры.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ОбщиеПараметрыСинхронизации КАК ТаблицаПараметры
	|ГДЕ
	|	ТаблицаПараметры.Идентификатор = &Идентификатор
	|	И ТИПЗНАЧЕНИЯ(ТаблицаПараметры.Значение) = ТИП(ЧИСЛО)"
	);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		Попытка

			ЗначениеВозврата = Макс(Выборка.Значение, 5);	//	не менее 5 секунд

		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ЗначениеВозврата = 40;

		КонецПопытки;

	Иначе

		ЗначениеВозврата = 40;

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции // Таймаут()

//	LNK 20.03.2018 10:33:55
Функция ПолучитьИнформациюОНоменклатуре(IDN, НомерМагазина, ПрямойВызов = Ложь)	Экспорт

//	Параметр "ПрямойВызов = Истина" говорит о том, что мобильное устройство подключено непосредственно к ЦБ
//	и, в этом случае, нужно получить оперативный остаток товара на складе.
//	В случае ".. = Ложь" вызов происходит каскадно - сначала к ИБ магазина, а из неё уже к ЦБ, где есть данные ИнтернетМагазина.

	СтруктураДанных = Новый Структура(
		"Найдено, Интернет, УИ, IDN, Код, Артикул, Производитель, Марка, Цена, Номенклатура, ДанныеМагазина, ДопРеквизиты, Остатки"
		, Ложь, Ложь, "", "", "", "", "", "", 0, Справочники.Номенклатура.ПустаяСсылка(), Новый Структура, Новый Массив, Новый Массив);

	ДанныеТовара = ПолучитьНоменклатуру(IDN);
	СтруктураДанных.Найдено = НЕ ДанныеТовара.Номенклатура.Пустая();

	Если СтруктураДанных.Найдено Тогда

		СтруктураДанных.УИ  = ДанныеТовара.УИ;
		СтруктураДанных.IDN = ДанныеТовара.IDN;
		СтруктураДанных.Код = ДанныеТовара.Код;
		СтруктураДанных.Артикул = ДанныеТовара.Артикул;
		СтруктураДанных.Номенклатура  = ДанныеТовара.Номенклатура;
		СтруктураДанных.Производитель = ДанныеТовара.Производитель;
		СтруктураДанных.Марка = ДанныеТовара.Марка;
		СтруктураДанных.ДопРеквизиты = ДанныеТовара.ДопРеквизиты;
		СтруктураДанных.ДанныеМагазина = ПолучитьДанныеМагазина(НомерМагазина);

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаИнформация.URL КАК URL,
		|	ТаблицаИнформация.Описание КАК Описание,
		|	ТаблицаИнформация.Наименование КАК Наименование,
		|	ТаблицаИнформация.АдресКартинки КАК АдресКартинки,
		|	ТаблицаИнформация.АдресКартинкиДополнительный КАК АдресКартинкиДополнительный,
		|	ТаблицаИнформация.АдресКартинкиПредпросмотр КАК АдресКартинкиПредпросмотр
		|ИЗ
		|	РегистрСведений.НоменклатурнаяИнформация КАК ТаблицаИнформация
		|ГДЕ
		|	ТаблицаИнформация.Номенклатура = &Номенклатура"
		);
		Запрос.УстановитьПараметр("Номенклатура", ДанныеТовара.Номенклатура);
		
		Результат = Запрос.Выполнить();
		СтруктураДанных.Интернет = НЕ Результат.Пустой();

		Для Каждого Колонка Из Результат.Колонки Цикл

			СтруктураДанных.Вставить(Колонка.Имя, Колонка.ТипЗначения.ПривестиЗначение())

		КонецЦикла;

		Если СтруктураДанных.Интернет Тогда

			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);

		Иначе

			Запрос.Текст =
			"ВЫБРАТЬ
			|	"""" КАК URL,
			|	"""" КАК Описание,
			|	ТаблицаСправочник.Наименование КАК Наименование,
			|	"""" КАК АдресКартинки,
			|	"""" КАК АдресКартинкиДополнительный,
			|	"""" КАК АдресКартинкиПредпросмотр
			|ИЗ
			|	Справочник.Номенклатура КАК ТаблицаСправочник
			|ГДЕ
			|	ТаблицаСправочник.Ссылка = &Номенклатура"
			;
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);

		КонецЕсли;

		ПодготовитьКартинкиСтруктурыДанных(СтруктураДанных);
		ПолучитьЦенуОстаткиПоМагазинам(СтруктураДанных, ПрямойВызов, Ложь);

	КонецЕсли;

	Возврат СтруктураДанных;

КонецФункции

Функция GetConfirmation(PhoneNumber) Экспорт 

	УстановитьПривилегированныйРежим(Истина);

	Результат = Новый Структура(
		"КодКлиента, Указан"
		, "", Ложь);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаПодтверждений.Период КАК Период,
	|	ТаблицаПодтверждений.Код КАК КодКлиента
	|ИЗ
	|	РегистрСведений.КодыПодтверждения.СрезПоследних(, НомерТелефона = &НомерТелефона) КАК ТаблицаПодтверждений"
	);
	Запрос.УстановитьПараметр("НомерТелефона", PhoneNumber);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Результат.Указан     = Истина;
		Результат.КодКлиента = Выборка.КодКлиента;

	КонецЕсли;

//	---------------------------------------------------------------------------------------

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Результат);

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

Функция SendSMS(Type, PhoneNumber, Знач Message, IsConfirmation, SendersData) Экспорт

	Перем ДанныеПротокола;

//	Параметр "Type" содержит имя значения "Перечисления.ВидыСообщений"

	УстановитьПривилегированныйРежим(Истина);

	Результат = ОтправкаSMS.ОтправитьSMS(
		ОбщегоНазначенияКлиентСервер.AAD(PhoneNumber), ?(IsConfirmation, "ID ", "") + СокрЛП(Message));

	Если НЕ Результат.Ошибка Тогда

		ДанныеОтправителя = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(SendersData);

		Если IsConfirmation Тогда

		//	Данный запрос является отправкой кода подтверждения покупателю!
		//	Необходимо записать информацию отправленного сообщения в регистр.

			МенеджерЗаписи = РегистрыСведений.КодыПодтверждения.СоздатьМенеджерЗаписи();

			Попытка

				МенеджерЗаписи.Период = ТекущаяДатаСеанса();
				МенеджерЗаписи.НомерТелефона = PhoneNumber;
				МенеджерЗаписи.Код = Message;
				МенеджерЗаписи.Идентификатор = Результат.Идентификатор;

				МенеджерЗаписи.ЭлементСтруктуры = ДанныеОтправителя.ЭлементСтруктуры;	//	удалить
				МенеджерЗаписи.Магазин       = ДанныеОтправителя.Магазин;
				МенеджерЗаписи.ИмяКомпьютера = ДанныеОтправителя.ИмяКомпьютера;
				МенеджерЗаписи.Контрагент    = ДанныеОтправителя.Контрагент;

				МенеджерЗаписи.Автор		 = ДанныеОтправителя.Пользователь;
				МенеджерЗаписи.УзелСоздания	 = ДанныеОтправителя.ЭлементСтруктуры;

				МенеджерЗаписи.Записать();
			
			Исключение

				Результат.ОписаниеОшибки = "Код відправлено, але підтвердження неможливе через:" + Символы.ПС + ОписаниеОшибки();

			КонецПопытки;

		КонецЕсли;

		Если ДанныеОтправителя.Свойство("ДанныеПротокола", ДанныеПротокола) Тогда

			МенеджерЗаписи = РегистрыСведений.ПротоколСообщений.СоздатьМенеджерЗаписи();

			Попытка

				МенеджерЗаписи.Период		= ТекущаяДатаСеанса();
				МенеджерЗаписи.Объект		= ДанныеПротокола.Объект;
				МенеджерЗаписи.Контрагент	= ДанныеОтправителя.Контрагент;
				МенеджерЗаписи.ВидСообщения	= Перечисления.ВидыСообщений[Type];

				МенеджерЗаписи.Значение		 = Новый ХранилищеЗначения(ДанныеПротокола, Новый СжатиеДанных(9));
				МенеджерЗаписи.Идентификатор = PhoneNumber;
				МенеджерЗаписи.Магазин       = ДанныеОтправителя.Магазин;
				МенеджерЗаписи.ИмяКомпьютера = ДанныеОтправителя.ИмяКомпьютера;

				МенеджерЗаписи.Автор		 = ДанныеОтправителя.Пользователь;
				МенеджерЗаписи.УзелСоздания	 = ДанныеОтправителя.ЭлементСтруктуры;

				МенеджерЗаписи.Записать();

			Исключение

				Результат.ОписаниеОшибки = "Помилка запису до протоколу:" + Символы.ПС + ОписаниеОшибки();

			КонецПопытки;

		КонецЕсли;

	КонецЕсли;

//	---------------------------------------------------------------------------------------

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Результат);

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

//	LNK 29.10.2021 12:39:47
Процедура РегистрацияОшибки(ТекстОшибки, ПроверитьСоединение = Ложь, ОбъектМетаданных = Неопределено, Данные = Неопределено)	Экспорт

	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда

		ЗаписьЖурналаРегистрации("СЕРВИСЫ_СОЕДИНЕНИЕ", УровеньЖурналаРегистрации.Ошибка
			, ОбъектМетаданных
			, Данные
			, ТекстОшибки
		);

	КонецЕсли;

	Если ПроверитьСоединение = Истина Тогда

		Попытка

			ФоновыеЗадания.Выполнить("ОбменWebRetailСервер.ПроверкаДоступностиWebRetail"
				, ОбщегоНазначенияКлиентСервер.AAD(Ложь)
				, "ПРОВЕРКА_СОЕДИНЕНИЯ"
			);

		Исключение

		//	запуск фонового технический.. не случилось и хорошо.
			ТекстОшибкиЗапуска = ОписаниеОшибки();

		КонецПопытки;

	КонецЕсли;

КонецПроцедуры

Функция ОбъектXDTOСодержитСвойство(ОбъектXDTO, Свойство)	Экспорт

	ЕстьСвойство = НЕ ОбъектXDTO.Свойства().Получить(Свойство) = Неопределено
				И  НЕ ОбъектXDTO[Свойство] = Неопределено;

	Возврат ЕстьСвойство;

КонецФункции

//	LNK 14.05.2018 15:03:55
Функция РазложитьURLнаИмяСервераИмяФайла(Знач АдресФайла)	Экспорт

	АдресФайла = Сред(АдресФайла, Найти(АдресФайла, "://") + 3);

	ДанныеАдреса = Новый Структура(
		"Сервер, Файл"
		, Лев(АдресФайла, Найти(АдресФайла, "/") - 1)
		, Сред(АдресФайла, Найти(АдресФайла, "/")));

	Возврат ДанныеАдреса;

КонецФункции // РазложитьURLнаИмяСервераИмяФайла()

//	LNK 29.05.2018 16:29:17
Функция СоздатьОтложенныйЧек(УзелПолучатель, СтруктураДанных, НомерМагазина)	Экспорт

	ДокументОбъект = ПолучитьЧекОбъект(СтруктураДанных, ПолучитьДанныеМагазина(НомерМагазина));

	ДокументОбъект.УстановитьНовыйНомер();
	ДокументОбъект.УзелСоздания = Справочники.СтруктураУзлов.ПолучитьСсылку(УзелПолучатель.УникальныйИдентификатор());

	ДокументОбъект.Записать();

	СтруктураДанных.Вставить("НомерЧека", ДокументОбъект.Номер);

	Возврат СтруктураДанных;

КонецФункции

//	LNK 29.05.2018 14:03:08
Функция ПолучитьДанныеПроверкиЧека(СтруктураДанных, НомерМагазина)	Экспорт

	Для каждого СтрокаТабличнойЧасти Из ПолучитьЧекОбъект(СтруктураДанных, ПолучитьДанныеМагазина(НомерМагазина)).Товары Цикл

		СтрокаТаблицы = СтруктураДанных.Товары.Найти(СтрокаТабличнойЧасти.НомерСтроки, "НомерСтроки");

		СтрокаТаблицы.Цена  = СтрокаТабличнойЧасти.Цена;
		СтрокаТаблицы.Сумма = СтрокаТабличнойЧасти.Сумма;
		СтрокаТаблицы.ПроцентАвтоматическойСкидки = СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки;
		СтрокаТаблицы.СуммаАвтоматическойСкидки   = СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки;

	КонецЦикла;

	Возврат СтруктураДанных;

КонецФункции

//	LNK 29.05.2018 11:57:48
Функция ПолучитьИнформациюОКонтрагенте(КодКарты, НомерМагазина)	Экспорт

	СтруктураДанных = Новый Структура(
		"Найдено, Блокирован, УИ, Код, Наименование, СуммаНакоплений"
		, Ложь, Ложь, "", "", "", 0);

	Если НЕ ПустаяСтрока(КодКарты) Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Ведущая.Блокирован КАК Блокирован,
		|	Ведущая.Контрагент КАК Контрагент,
		|	Ведущая.Код КАК Код,
		|	Ведущая.Наименование КАК Наименование,
		|	СУММА(ЕСТЬNULL(ТаблицаПродажи.СуммаОстаток, 0)) КАК СуммаНакоплений
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ТаблицаКарты.ПометкаУдаления
		|					ИЛИ ТаблицаКарты.Блокирован
		|					ИЛИ ТаблицаКлиенты.ПометкаУдаления
		|					ИЛИ ТаблицаКлиенты.Блокирован
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК Блокирован,
		|		ТаблицаКлиенты.Ссылка КАК Контрагент,
		|		ТаблицаКлиенты.Код КАК Код,
		|		ТаблицаКлиенты.Наименование КАК Наименование
		|	ИЗ
		|		Справочник.ИнформационныеКарты КАК ТаблицаКарты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаКлиенты
		|			ПО ТаблицаКарты.ВладелецКарты = ТаблицаКлиенты.Ссылка
		|	ГДЕ
		|		ТаблицаКарты.КодКарты = &КодКарты
		|		И ТаблицаКарты.ВладелецКарты ССЫЛКА Справочник.Контрагенты) КАК Ведущая
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(, ВладелецДисконтнойКарты ССЫЛКА Справочник.Контрагенты) КАК ТаблицаПродажи
		|		ПО Ведущая.Контрагент = ТаблицаПродажи.ВладелецДисконтнойКарты
		|
		|СГРУППИРОВАТЬ ПО
		|	Ведущая.Блокирован,
		|	Ведущая.Контрагент,
		|	Ведущая.Код,
		|	Ведущая.Наименование"
		);
		Запрос.УстановитьПараметр("КодКарты", КодКарты);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда

			СтруктураДанных.Найдено = Истина;
			ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
			СтруктураДанных.УИ = СокрЛП(Выборка.Контрагент.УникальныйИдентификатор());

		КонецЕсли;

	КонецЕсли;

	Возврат СтруктураДанных;

КонецФункции // ПолучитьИнформациюОКонтрагенте()

Процедура ПолучитьЦенуОстаткиПоМагазинам(СтруктураДанных, ПрямойВызов, ТолькоЭтотМагазин)	Экспорт

	Если НЕ СтруктураДанных.Найдено Тогда

		Возврат;

	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата" , ТекущаяДата());
	Запрос.УстановитьПараметр("Номенклатура", СтруктураДанных.Номенклатура);
	Запрос.УстановитьПараметр("ПрямойВызов" , ПрямойВызов);
	Запрос.УстановитьПараметр("ТолькоЭтотМагазин", ТолькоЭтотМагазин);

	Для каждого КлючЗначение Из СтруктураДанных.ДанныеМагазина Цикл

		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);

	КонецЦикла;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ведущая.НомерМагазина КАК НомерМагазина,
	|	Ведущая.Магазин КАК Магазин,
	|	Ведущая.Город КАК Город,
	|	Ведущая.Регион КАК Регион,
	|	Ведущая.КлючПорядка КАК КлючПорядка,
	|	ЕСТЬNULL(ТоварыНаСкладах.КоличествоОстаток, 0) КАК Количество,
	|	ЕСТЬNULL(ЦеныМагазина.Цена, 0) КАК Цена
	|ИЗ
	|	(ВЫБРАТЬ
	|		&НомерМагазина КАК НомерМагазина,
	|		ПРЕДСТАВЛЕНИЕ(&Магазин) КАК Магазин,
	|		&Город КАК Город,
	|		&Регион КАК Регион,
	|		0 КАК КлючПорядка) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				Номенклатура = &Номенклатура
	|					И Склад В (&Склады)) КАК ТоварыНаСкладах
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
	|				КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ),
	|				ОбъектЦенообразования = &Магазин
	|					И Номенклатура = &Номенклатура) КАК ЦеныМагазина
	|		ПО (ИСТИНА)
	|ГДЕ
	|	(&ПрямойВызов = ИСТИНА
	|			ИЛИ &ТолькоЭтотМагазин = ИСТИНА)"
	+ ?(ТолькоЭтотМагазин, "", Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС +
	"ВЫБРАТЬ
	|	ТоварыПоМагазинам.Магазин.НомерМагазина КАК НомерМагазина,
	|	ПРЕДСТАВЛЕНИЕ(ТоварыПоМагазинам.Магазин) КАК Магазин,
	|	ТоварыПоМагазинам.Магазин.Город КАК Город,
	|	ТоварыПоМагазинам.Магазин.ОбособленноеПодразделениеОрганизации КАК Регион,
	|	ВЫБОР
	|		КОГДА ТоварыПоМагазинам.Магазин.Город = &Город
	|			ТОГДА 1
	|		КОГДА ТоварыПоМагазинам.Магазин.ОбособленноеПодразделениеОрганизации = &Регион
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК КлючПорядка,
	|	ТоварыПоМагазинам.Количество КАК Количество,
	|	0 КАК Цена
	|ИЗ
	|	РегистрСведений.ИнформативныеОстаткиТоваровПоМагазинам КАК ТоварыПоМагазинам
	|ГДЕ
	|	НЕ ТоварыПоМагазинам.Магазин = &Магазин
	|	И ТоварыПоМагазинам.Номенклатура = &Номенклатура
	|	И ТоварыПоМагазинам.Количество > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыПоСкладам.Склад.IDN,
	|	ПРЕДСТАВЛЕНИЕ(ТоварыПоСкладам.Склад),
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	4,
	|	ТоварыПоСкладам.Количество,
	|	0
	|ИЗ
	|	РегистрСведений.ИнформативныеОстаткиТоваровПоСкладам КАК ТоварыПоСкладам
	|ГДЕ
	|	ТоварыПоСкладам.Номенклатура = &Номенклатура
	|	И ТоварыПоСкладам.Количество > 0") + "
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка"
	;

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		Если Выборка.КлючПорядка = 0 Тогда

			СтруктураДанных.Цена = Выборка.Цена;

		КонецЕсли;

		СтруктураДанных.Остатки.Добавить(Новый Структура(
			"НомерМагазина, Магазин, КлючПорядка, Количество"
			, Выборка.НомерМагазина, Выборка.Магазин, Выборка.КлючПорядка, Выборка.Количество));

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//	LNK 11.01.2019 13:17:23
Функция ПолучитьНоменклатуру(IDN, ПоискПоШтрихкоду = Ложь)

	ДанныеТовара = Новый Структура(
		"УИ, IDN, Код, Артикул, Производитель, Марка, Номенклатура, ДопРеквизиты"
		, "", "", "", "", "", "", Справочники.Номенклатура.ПустаяСсылка(), Новый Массив);

	Если НЕ ПустаяСтрока(IDN) Тогда

		Если СтрДлина(IDN) < 8 И НЕ ПоискПоШтрихкоду = Истина Тогда

			ИсточникНомер = 0;
			ТекстЗапроса  =
			"ВЫБРАТЬ
			|	ТаблицаСправочник.IDN КАК IDN,
			|	ТаблицаСправочник.Код КАК Код,
			|	ТаблицаСправочник.Артикул КАК Артикул,
			|	ТаблицаСправочник.Ссылка КАК Номенклатура,
			|	ЕСТЬNULL(ТаблицаСправочник.Производитель.Код, """") КАК ПроизводительКод,
			|	ЕСТЬNULL(ТаблицаСправочник.Производитель.Наименование, """") КАК ПроизводительПредставление,
			|	ЕСТЬNULL(ТаблицаСправочник.Марка.Код, """") КАК МаркаКод,
			|	ЕСТЬNULL(ТаблицаСправочник.Марка.Наименование, """") КАК МаркаПредставление,
			|	ТабличнаяЧасть.Свойство КАК Реквизит,
			|	ТабличнаяЧасть.Значение КАК РеквизитЗначение
			|ИЗ
			|	Справочник.Номенклатура КАК ТаблицаСправочник
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ТабличнаяЧасть
			|		ПО ТаблицаСправочник.Ссылка = ТабличнаяЧасть.Ссылка
			|ГДЕ
			|	ТаблицаСправочник.IDN = &IDN
			|	И НЕ ТаблицаСправочник.IDN = """"
			|ИТОГИ
			|	МАКСИМУМ(IDN),
			|	МАКСИМУМ(Код)
			|ПО
			|	Номенклатура"
			;
		Иначе

			ИсточникНомер = 1;
			ТекстЗапроса  =
			"ВЫБРАТЬ
			|	ТаблицаСправочник.IDN КАК IDN,
			|	ТаблицаСправочник.Код КАК Код,
			|	ТаблицаСправочник.Артикул КАК Артикул,
			|	ТаблицаРегистра.Владелец КАК Номенклатура,
			|	ЕСТЬNULL(ТаблицаСправочник.Производитель.Код, """") КАК ПроизводительКод,
			|	ЕСТЬNULL(ТаблицаСправочник.Производитель.Наименование, """") КАК ПроизводительПредставление,
			|	ЕСТЬNULL(ТаблицаСправочник.Марка.Код, """") КАК МаркаКод,
			|	ЕСТЬNULL(ТаблицаСправочник.Марка.Наименование, """") КАК МаркаПредставление,
			|	ТабличнаяЧасть.Свойство КАК Реквизит,
			|	ТабличнаяЧасть.Значение КАК РеквизитЗначение
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК ТаблицаРегистра
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ТабличнаяЧасть
			|			ПО ТаблицаСправочник.Ссылка = ТабличнаяЧасть.Ссылка
			|		ПО ТаблицаРегистра.Владелец = ТаблицаСправочник.Ссылка
			|ГДЕ
			|	ТаблицаРегистра.Штрихкод = &IDN
			|	И ТаблицаРегистра.Владелец ССЫЛКА Справочник.Номенклатура
			|	И НЕ ТаблицаРегистра.Штрихкод = """"
			|ИТОГИ
			|	МАКСИМУМ(IDN),
			|	МАКСИМУМ(Код)
			|ПО
			|	Номенклатура"
			;
		КонецЕсли;

		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("IDN", IDN);

		ВыборкаВедущая = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Если ВыборкаВедущая.Следующий() Тогда

			ЗаполнитьЗначенияСвойств(ДанныеТовара, ВыборкаВедущая);
			ДанныеТовара.УИ = СокрЛП(ВыборкаВедущая.Номенклатура.УникальныйИдентификатор());

			ДанныеТовара.Производитель = ?(ПустаяСтрока(ВыборкаВедущая.ПроизводительКод), "", СокрЛП(ВыборкаВедущая.ПроизводительКод) + "#" + СокрЛП(ВыборкаВедущая.ПроизводительПредставление));
			ДанныеТовара.Марка         = ?(ПустаяСтрока(ВыборкаВедущая.МаркаКод), "", СокрЛП(ВыборкаВедущая.МаркаКод) + "#" + СокрЛП(ВыборкаВедущая.МаркаПредставление));

			ВыборкаРеквизиты = ВыборкаВедущая.Выбрать();

			Пока ВыборкаРеквизиты.Следующий() Цикл

				ДанныеТовара.ДопРеквизиты.Добавить(Новый Структура(
					"Реквизит, Значение"
					, СокрЛП(ВыборкаРеквизиты.Реквизит)
					, СокрЛП(ВыборкаРеквизиты.РеквизитЗначение)));

			КонецЦикла;

		Иначе

			Если ИсточникНомер = 0 Тогда

				ДанныеТовара = ПолучитьНоменклатуру(IDN, Истина);

			ИначеЕсли СтрДлина(IDN) < 8 Тогда

				ВнешниеИсточникиСобытия.УстановитьОбъектДляОбработки(IDN);
			
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат ДанныеТовара;

КонецФункции // ПолучитьНоменклатуру()

Функция ПолучитьДанныеМагазина(НомерМагазина)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&НомерМагазина КАК НомерМагазина,
	|	ЕСТЬNULL(ТаблицаМагазины.Ссылка, ТаблицаВедущая.Магазин) КАК Магазин,
	|	ЕСТЬNULL(ТаблицаМагазины.Город, ТаблицаВедущая.Город) КАК Город,
	|	ЕСТЬNULL(ТаблицаМагазины.ОбособленноеПодразделениеОрганизации, ТаблицаВедущая.Регион) КАК Регион,
	|	ЕСТЬNULL(ТаблицаОрганизаций.Организация, ТаблицаВедущая.Организация) КАК Организация,
	|	ТаблицаСклады.Ссылка КАК Склад
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка) КАК Магазин,
	|		ЗНАЧЕНИЕ(Справочник.Города.ПустаяСсылка) КАК Город,
	|		ЗНАЧЕНИЕ(Справочник.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка) КАК Регион,
	|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация) КАК ТаблицаВедущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины КАК ТаблицаМагазины
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаСклады
	|			ПО ТаблицаМагазины.Ссылка = ТаблицаСклады.Магазин
	|		ПО (ТаблицаМагазины.НомерМагазина = &НомерМагазина)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииПодразделений.СрезПоследних(&Период, ) КАК ТаблицаОрганизаций
	|		ПО ТаблицаМагазины.Ссылка = ТаблицаОрганизаций.Владелец
	|ИТОГИ
	|	МАКСИМУМ(НомерМагазина),
	|	МАКСИМУМ(Город),
	|	МАКСИМУМ(Регион),
	|	МАКСИМУМ(Организация)
	|ПО
	|	Магазин"
	);
	Запрос.УстановитьПараметр("НомерМагазина"	, НомерМагазина);
	Запрос.УстановитьПараметр("Период"			, ТекущаяДата());

	ОбщаяВыборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ОбщаяВыборка.Следующий();

	ДанныеМагазина = Новый Структура(
		"НомерМагазина, Магазин, Город, Регион, Организация, Склады"
		, ОбщаяВыборка.НомерМагазина, ОбщаяВыборка.Магазин, ОбщаяВыборка.Город, ОбщаяВыборка.Регион, ОбщаяВыборка.Организация, Новый Массив);

	СкладыВыборка = ОбщаяВыборка.Выбрать();

	Пока СкладыВыборка.Следующий() Цикл

		ДанныеМагазина.Склады.Добавить(СкладыВыборка.Склад);

	КонецЦикла;

	Возврат ДанныеМагазина;

КонецФункции

Процедура ПодготовитьКартинкиСтруктурыДанных(СтруктураДанных)

	БылиАдреса = Новый Соответствие;

	ИменаКартинок = Новый Массив;
	ИменаКартинок.Добавить(Новый Структура("Адрес, Данные", "АдресКартинки", "КартинкаОсновная"));
	ИменаКартинок.Добавить(Новый Структура("Адрес, Данные", "АдресКартинкиДополнительный", "КартинкаДополнительная"));
	ИменаКартинок.Добавить(Новый Структура("Адрес, Данные", "АдресКартинкиПредпросмотр", "КартинкаПредпросмотр"));

	Для каждого Ключи Из ИменаКартинок Цикл

		АдресКартинки = СтруктураДанных[Ключи.Адрес];

		СтруктураДанных.Вставить(Ключи.Данные);

		Если ЗначениеЗаполнено(АдресКартинки) И БылиАдреса.Получить(АдресКартинки) = Неопределено Тогда

			Расширение = ОбщегоНазначенияКлиентСервер.lx_GetTooken(АдресКартинки, ".");

			Если НЕ(ПустаяСтрока(Расширение) ИЛИ СтрДлина(Расширение)  > 4) Тогда

				ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);

				Попытка

					ДанныеАдреса = РазложитьURLнаИмяСервераИмяФайла(АдресКартинки);
					HTTPСоединение = Новый HTTPСоединение(ДанныеАдреса.Сервер,,,,,, Новый ЗащищенноеСоединениеOpenSSL); 
					HTTPСоединение.Получить(ДанныеАдреса.Файл, ИмяВременногоФайла);
				//	КопироватьФайл(АдресКартинки, ИмяВременногоФайла);

					СтруктураДанных[Ключи.Данные] = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяВременногоФайла));

					УдалитьФайлы(ИмяВременногоФайла);

				Исключение

					ТекстОшибки = ОписаниеОшибки();

				КонецПопытки;

			КонецЕсли;

			БылиАдреса.Вставить(АдресКартинки, Истина);

		КонецЕсли;

		СтруктураДанных.Удалить(Ключи.Адрес);

	КонецЦикла;

КонецПроцедуры

//	LNK 29.05.2018 14:07:56
Функция ПолучитьЧекОбъект(СтруктураОбразаЧека, ДанныеМагазина)

	ДокументОбъект = Документы.ЧекККМ.СоздатьДокумент();

	ДокументОбъект.Дата    = СтруктураОбразаЧека.Дата;
	ДокументОбъект.Магазин = ДанныеМагазина.Магазин;
	ДокументОбъект.Организация = ДанныеМагазина.Организация;
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
	ДокументОбъект.Комментарий = СтруктураОбразаЧека.Комментарий;
	ДокументОбъект.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;
	ДокументОбъект.СтатусЧекаККМ   = Перечисления.СтатусыЧековККМ.Отложенный;
	ДокументОбъект.ЦенаВключаетНДС = Истина;
	ДокументОбъект.Ответственный   = Справочники.Пользователи.АдминистраторАвтоматов;

	Если НЕ ПустаяСтрока(СтруктураОбразаЧека.ПродавецИдентификатор) Тогда

		ДокументОбъект.Продавец    = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураОбразаЧека.ПродавецИдентификатор));

	КонецЕсли;

	Если НЕ ПустаяСтрока(СтруктураОбразаЧека.КодКарты) Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаКарты.Ссылка КАК Карта,
		|	ТаблицаКарты.ВладелецКарты КАК Контрагент
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ТаблицаКарты
		|ГДЕ
		|	ТаблицаКарты.КодКарты = &КодКарты
		|	И ТаблицаКарты.ВладелецКарты ССЫЛКА Справочник.Контрагенты"
		);
		Запрос.УстановитьПараметр("КодКарты", СтруктураОбразаЧека.КодКарты);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда

			ДокументОбъект.ДисконтнаяКарта = Выборка.Карта;
			ДокументОбъект.ВладелецДисконтнойКарты = Выборка.Контрагент;

		КонецЕсли;

	КонецЕсли;
	
	СтруктураОбразаЧека.Товары.Сортировать("НомерСтроки");	//	.. на всякий случай

	Для каждого СтрокаТовары Из СтруктураОбразаЧека.Товары Цикл

		Если НЕ ПустаяСтрока(СтрокаТовары.НоменклатураИдентификатор) Тогда

			СтрокаТабличнойЧасти = ДокументОбъект.Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовары.НоменклатураИдентификатор));
			СтрокаТабличнойЧасти.Количество   = СтрокаТовары.Количество;
			СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТовары.Количество;
			СтрокаТабличнойЧасти.Продавец     = ДокументОбъект.Продавец;
			СтрокаТабличнойЧасти.Склад        = ДанныеМагазина.Склады[0];

			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(ДокументОбъект, Истина));
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", Новый Структура("Дата, Организация", ДокументОбъект.Дата, ДокументОбъект.Организация));
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ДокументОбъект));
			СтруктураДействий.Вставить("ПересчитатьСумму");

			КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);

		КонецЕсли;

	КонецЦикла;

	ДокументОбъект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);

	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);//Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки",                ДокументОбъект.УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	СтруктураПараметры.Вставить("ПорядковыйНомерПродажи",           0);
	СтруктураПараметры.Вставить("ПеренестиСкидкиПодаркиВТовары");
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	Ложь);
	СтруктураПараметры.Вставить("РабочееМесто", "");
	СтруктураПараметры.Вставить("ДатаРасчета" , ДокументОбъект.Дата);	//	LNK 19.05.2021 07:36:49

	ДанныеРасчетаСкидок = СкидкиНаценкиСерверПереопределяемый.Рассчитать(ДокументОбъект, СтруктураПараметры);

	СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(ДокументОбъект, "Товары", ДанныеРасчетаСкидок[0].Результаты.ТаблицаСкидкиНаценки,, СтруктураПараметры);

	СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(ДокументОбъект, "Товары", "СкидкиНаценки");
	
	ДокументОбъект.СкидкиРассчитаны = Истина;

	Возврат ДокументОбъект;

КонецФункции

#КонецОбласти
