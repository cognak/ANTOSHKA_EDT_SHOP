
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция программно создает новую дисконтную карту
// Параметры
//		СтруктураПараметров - Структура - данные для заполнения реквизитов создаваемой карты
// Возвращаемое значение
//		СсылкаРезультат - СправочникСсылка.ИнформационныеКарты - ссылка на созданную карту
// 			в случае возникновения исключительной ситуации возвращается пустая ссылка
Функция СоздатьДисконтнуюКарту(СтруктураПараметров) Экспорт
	
	ВыполненоУспешно = Ложь;
	
	Попытка
		
		ИнформационнаяКарта = Справочники.ИнформационныеКарты.СоздатьЭлемент();
		ИнформационнаяКарта.Наименование = СтруктураПараметров.КодКарты;
		
		ИнформационнаяКарта.ВидКарты = СтруктураПараметров.ВидКарты;
		ИнформационнаяКарта.ДатаОткрытия = ТекущаяДатаСеанса();
		ИнформационнаяКарта.Родитель = СтруктураПараметров.ГруппаКарты;
		ИнформационнаяКарта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная;
		
		Если СтруктураПараметров.ВидКарты <> Перечисления.ВидыИнформационныхКарт.Штриховая Тогда
			ИнформационнаяКарта.КодКарты = СтруктураПараметров.КодКарты;
		КонецЕсли;
		
		ИнформационнаяКарта.ВидДисконтнойКарты = СтруктураПараметров.ВидДисконтнойКарты;
		
		Если СтруктураПараметров.Свойство("ПроводитьОпросВладельцаПриРегистрации")
			И СтруктураПараметров.ПроводитьОпросВладельцаПриРегистрации Тогда
			ИнформационнаяКарта.ДатаСледующегоОпроса = ИнформационнаяКарта.ДатаОткрытия;
		КонецЕсли;
		
		ИнформационнаяКарта.Записать();
		
		Если СтруктураПараметров.ВидКарты = Перечисления.ВидыИнформационныхКарт.Штриховая Тогда
			
			НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Владелец.Установить(ИнформационнаяКарта.Ссылка);
			НаборЗаписей.Отбор.Штрихкод.Установить(СтруктураПараметров.КодКарты);
			НаборЗаписей.Отбор.ТипШтрихкода.Установить(СтруктураПараметров.ТипШтрихкода);
			
			ЗаписьШтрихкода = НаборЗаписей.Добавить();
			ЗаписьШтрихкода.Владелец     = ИнформационнаяКарта.Ссылка;
			ЗаписьШтрихкода.ТипШтрихкода = СтруктураПараметров.ТипШтрихкода;
			ЗаписьШтрихкода.Штрихкод     = СтруктураПараметров.КодКарты;

			НаборЗаписей.Записать();
			
		КонецЕсли;
		ВыполненоУспешно = Истина;
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ТекстСообщенияОбОшибке = НСтр("ru = 'Ошибка при создании информационной карты: %1'");
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, КраткоеПредставлениеОшибки(Инфо));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Маркетинг. Создание дисконтной карты'"), УровеньЖурналаРегистрации.Ошибка, , ПодробноеПредставлениеОшибки(Инфо));
		ВыполненоУспешно = Ложь;
		
	КонецПопытки;
	
	СсылкаРезультат = Справочники.ИнформационныеКарты.ПустаяСсылка();
	Если ВыполненоУспешно Тогда
		СсылкаРезультат = ИнформационнаяКарта.Ссылка;
	КонецЕсли;
	
	Возврат СсылкаРезультат;
	
КонецФункции	

//	LNK 09.10.2017 16:01:43
// Функция определяет, нужно ли проводить опрос владельца проверяемой карты на указанную дату
// Параметры
//		Карта - СправочникСсылка.ИнформационныеКарты - ссылка на проверяемую карту
//		ДатаСобытия - Дата - дата проверки
// Возвращаемое значение
// 		ЕстьНеобходимость - Булево - Истина - нужно проводить опрос, Ложь - иначе
Функция НеобходимостьОпросаВладельца(Карта, ДатаСобытия, ОпросПользователюРазрешён = Неопределено) Экспорт
	
	ЕстьНеобходимость = Ложь;

	Если ОпросПользователюРазрешён = Неопределено Тогда

		ОпросПользователюРазрешён = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
									ПланыВидовХарактеристик.ПраваПользователей.ПроводитьОпросВладельцевДисконтныхКартПриОформленииДокументов,
									Ложь);

	КонецЕсли;
	
	Если ОпросПользователюРазрешён = Истина Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСправочник.ВладелецКарты КАК ВладелецКарты,
		|	ТаблицаСправочник.ВидДисконтнойКарты КАК ВидДисконтнойКарты
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ТаблицаСправочник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.МаркетинговыеГруппы КАК КонтрагентыМаркетинговыеГруппы
		|		ПО (ТаблицаСправочник.ВладелецКарты = КонтрагентыМаркетинговыеГруппы.Ссылка
		|				И КонтрагентыМаркетинговыеГруппы.Группа = ЗНАЧЕНИЕ(Справочник.МаркетинговыеГруппы.VIP))
		|ГДЕ
		|	ТаблицаСправочник.Ссылка = &Карта
		|	И КонтрагентыМаркетинговыеГруппы.Группа ЕСТЬ NULL"
		);
		Запрос.УстановитьПараметр("Карта", Карта);

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда

			Если Выборка.ВидДисконтнойКарты = Справочники.ВидыДисконтныхКарт.ПредварительныеКартыЛояльности Тогда

				ЕстьНеобходимость = Истина;	//	LNK 06.02.2019 14:14:05

			Иначе

				Запрос.Текст =
				"ВЫБРАТЬ
				|	ВерификацияНазначение.ВидВерификации КАК ВидВерификации
				|ИЗ
				|	РегистрСведений.ВерификацияКлиентовНазначение.СрезПоследних(&ДатаСобытия, Контрагент = &ВладелецКарты) КАК ВерификацияНазначение
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.МаркетинговыеГруппы КАК КонтрагентыМаркетинговыеГруппы
				|		ПО ВерификацияНазначение.Контрагент = КонтрагентыМаркетинговыеГруппы.Ссылка
				|			И (КонтрагентыМаркетинговыеГруппы.Группа = ЗНАЧЕНИЕ(Справочник.МаркетинговыеГруппы.VIP))
				|ГДЕ
				|	НЕ ВерификацияНазначение.ВидВерификации = ЗНАЧЕНИЕ(Перечисление.ВидыВерификацииПокупателей.Выполнена)
				|	И КонтрагентыМаркетинговыеГруппы.Группа ЕСТЬ NULL"
				;
				Запрос.УстановитьПараметр("ВладелецКарты", Выборка.ВладелецКарты);
				Запрос.УстановитьПараметр("ДатаСобытия"  , ДатаСобытия);

				Выборка = Запрос.Выполнить().Выбрать();

				Если Выборка.Следующий() Тогда

					ЕстьНеобходимость = Истина;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат ЕстьНеобходимость;

КонецФункции // НеобходимостьОпросаВладельца()




