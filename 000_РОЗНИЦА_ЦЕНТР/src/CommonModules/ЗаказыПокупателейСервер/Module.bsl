#Область ФункционалЗапросДоступностиТоваров

//	LNK 08.04.2019 13:35:07
Процедура УстановитьСостояниеЗапросаДоступностиТоваров(ДокументСсылка, ДанныеСостояния)	Экспорт

//	"ПолучениеРассмотрения" - значит, что выполняется загрузка документа из внешнего источника (WebСервисы.MSDynCRM.RequestAvailability)
//	В этом случае нужно ТОЛЬКО установить флаг "Рассмотрен"

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;  
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	ДокументОбъект.СтатусЗапроса = ДанныеСостояния;
	ДокументОбъект.Записать();

КонецПроцедуры

//	LNK 05.04.2019 10:53:58
Функция ПолучитьСостояниеЗапросаДоступностиТоваров(ДокументСсылка)	Экспорт

	ДанныеСостояния = Новый Структура(
		"Существует, Отправлен, Рассмотрен"
		, Ложь, Ложь, Ложь);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСТИНА КАК Существует,
	|	ТаблицаРегистра.Отправлен КАК Отправлен,
	|	ТаблицаРегистра.Рассмотрен КАК Рассмотрен
	|ИЗ
	|	РегистрСведений.СостояниеЗапросаДоступностиТоваров КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.ЗапросДоступностиТоваров = &ДокументСсылка"
	);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеСостояния, Выборка);

	КонецЕсли;

	Возврат ДанныеСостояния;

КонецФункции // ПолучитьСостояниеЗапросаДоступностиТоваров()
	
Функция ПолучитьСледующийСтатусЗапросаДоступностиТоваров(ДанныеСостоянияДокумента)	Экспорт
	
	ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПустаяСсылка();
	
	ДанныеДляПроверки = ДанныеСостоянияДокумента.СтатусЗапроса;
	
	Если ДанныеДляПроверки = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Новый Тогда 
		
		ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе;
		
	ИначеЕсли ДанныеДляПроверки = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтмену Тогда 
		
		ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Отменён;
		
	ИначеЕсли ДанныеДляПроверки = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Изменён Тогда  
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗапросДоступностиТоваровТовары.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ЗапросДоступностиТоваров.Товары КАК ЗапросДоступностиТоваровТовары
			|ГДЕ
			|	НЕ(ЗапросДоступностиТоваровТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён)
			|				ИЛИ ЗапросДоступностиТоваровТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён))
			|	И ЗапросДоступностиТоваровТовары.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеСостоянияДокумента);
		
		Если Запрос.Выполнить().Пустой() Тогда 
			
			ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Отменён;

		Иначе 
			
			ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе; 
			
		КонецЕсли;
		
	ИначеЕсли ДанныеДляПроверки = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе Тогда 
		
		ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Согласован;

	ИначеЕсли ДанныеДляПроверки = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Согласован Тогда 
		
		ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПустаяСсылка();
		
	ИначеЕсли ДанныеДляПроверки = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Сборка Тогда 
		
		ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.КОтправке;
		
	ИначеЕсли ДанныеДляПроверки = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПродажаБезнал Тогда 
		
		ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Закрыт;
		
	КонецЕсли;
	
	Возврат ДанныеСостояния;
	
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

//	LNK 15.12.2017 09:46:38
Процедура ПолучитьЗаказыПокупателейИзЦентральногоУзла()	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если РозничныеПродажиСлужебный.РесурсWebRetailДоступен() И НЕ ПустаяСтрока(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Код) Тогда

		Подключение  = СервисыСервер.Подключение("RetailPack");
		СтрокаДанных = Подключение.GetBuyersOrder(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Код);

		Если НЕ ПустаяСтрока(СтрокаДанных) Тогда

			ТаблицаСсылок = Новый ТаблицаЗначений;
			ТаблицаСсылок.Колонки.Добавить("Ссылка"      , Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
			ТаблицаСсылок.Колонки.Добавить("ЕстьДвижения", Новый ОписаниеТипов("Булево"));

			ЧтениеJSON = Новый ЧтениеJSON;	//	пытаемся получить таблицу обработанных ссылок.
			ЧтениеJSON.УстановитьСтроку(СтрокаДанных);

			СтруктураДанных = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();

			Для каждого СтрокаТаблицы Из СтруктураДанных.ТаблицаОбъектов Цикл

				СтрокаТаблицы.Объект.ОбменДанными.Загрузка = Истина;
				СтрокаТаблицы.Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
				СтрокаТаблицы.Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);

				Для каждого НаборЗаписей Из СтрокаТаблицы.Объект.Движения Цикл

					НаборЗаписей.Записывать = Истина;
					ТаблицаДвижений = СтрокаТаблицы.Движения.Получить(НаборЗаписей.Метаданные().ПолноеИмя());

					Если НЕ ТаблицаДвижений = Неопределено Тогда

						НаборЗаписей.Загрузить(ТаблицаДвижений);

					КонецЕсли;

				КонецЦикла;

				Попытка

					СтрокаТаблицы.Объект.Записать();
				//	Для отправки "обратно" - удалить регистрацию объекта в этот узел.
				//	Так же будут удалена регистрация и по коллекции "Движения".
					СтрокаСсылки = ТаблицаСсылок.Добавить();
					СтрокаСсылки.Ссылка = СтрокаТаблицы.Объект.Ссылка;
					СтрокаСсылки.ЕстьДвижения = Истина;

				Исключение

						ТекстОшибки = ОписаниеОшибки();
						ЖурналСобытий.Регистрация("GetBuyersOrder.ЗаписьОбъекта", УровеньЖурналаРегистрации.Ошибка
							, Метаданные.Документы.ЗаказПокупателя
							, ?(СтрокаТаблицы.Объект.Ссылка.Пустая()
								, СтрокаТаблицы.Объект.ПолучитьСсылкуНового()
								, СтрокаТаблицы.Объект.Ссылка)
							,
							, ТекстОшибки
							, СокрЛП(СтрокаТаблицы.Объект)
						);

				КонецПопытки;

			КонецЦикла;

		//	Так же могут переданы дополнительные объекты, как-то связанные с документами... например, Контрагент или ещё чего.
		//	Эти объекты будет только создавать новые, если таковые в текущей БД отсутствуют.
			Для каждого СтрокаТаблицы Из СтруктураДанных.ТаблицаСвязей Цикл

				Если СтрокаТаблицы.Объект.Ссылка.Пустая() Тогда

					СтрокаТаблицы.Объект.ОбменДанными.Загрузка = Истина;
					СтрокаТаблицы.Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
					СтрокаТаблицы.Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);

					Попытка

						СтрокаТаблицы.Объект.Записать();

					Исключение

						ТекстОшибки = ОписаниеОшибки();
						ЖурналСобытий.Регистрация("GetBuyersOrder.ЗаписьСвязанногоОбъекта", УровеньЖурналаРегистрации.Ошибка
							, Метаданные.Документы.ЗаказПокупателя
							, ?(СтрокаТаблицы.Объект.Ссылка.Пустая()
								, СтрокаТаблицы.Объект.ПолучитьСсылкуНового()
								, СтрокаТаблицы.Объект.Ссылка)
							,
							, ТекстОшибки
							, СокрЛП(СтрокаТаблицы.Объект)
						);

					КонецПопытки;

				КонецЕсли;

			КонецЦикла;

			Если НЕ ТаблицаСсылок.Количество() = 0 Тогда

				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
				СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, ТаблицаСсылок, НазначениеТипаXML.Явное);

				ТаблицаСсылок = Неопределено;

				Подключение = СервисыСервер.Подключение("RetailPack");

				ЧтениеJSON = Новый ЧтениеJSON;	//	пытаемся получить таблицу обработанных ссылок.
				Подключение.DeleteChangeRegistrations(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Код, ЗаписьJSON.Закрыть());

			КонецЕсли;

		КонецЕсли;

	Иначе

		ЖурналСобытий.Регистрация("GetBuyersOrder.WebService", УровеньЖурналаРегистрации.Ошибка
			, Метаданные.Документы.ЗаказПокупателя
			,
			,
			, "Нет доступа к WS ЦБ для узла «" + ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Код + "»"
		);

	КонецЕсли;

КонецПроцедуры

//	LNK 17.04.2019 10:10:05
Процедура ПолучитьЗапросыДоступностиТоваровИзЦентральногоУзла()	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если НЕ ПустаяСтрока(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Код) Тогда

		Подключение  = СервисыСервер.Подключение("RetailPack");
		СтрокаДанных = Подключение.GetRequestAvailability(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Код);

		Если НЕ ПустаяСтрока(СтрокаДанных) Тогда

			ТаблицаСсылок = Новый ТаблицаЗначений;
			ТаблицаСсылок.Колонки.Добавить("Ссылка"      , Новый ОписаниеТипов("ДокументСсылка.ЗапросДоступностиТоваров"));
			ТаблицаСсылок.Колонки.Добавить("ЕстьДвижения", Новый ОписаниеТипов("Булево"));

			ЧтениеJSON = Новый ЧтениеJSON;	//	пытаемся получить таблицу обработанных ссылок.
			ЧтениеJSON.УстановитьСтроку(СтрокаДанных);

			СтруктураДанных = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();

			Для каждого СтрокаТаблицы Из СтруктураДанных.ТаблицаОбъектов Цикл

				СтрокаТаблицы.Объект.ОбменДанными.Загрузка = Истина;
				СтрокаТаблицы.Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
				СтрокаТаблицы.Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);

				Для каждого НаборЗаписей Из СтрокаТаблицы.Объект.Движения Цикл

					НаборЗаписей.Записывать = Истина;
					ТаблицаДвижений = СтрокаТаблицы.Движения.Получить(НаборЗаписей.Метаданные().ПолноеИмя());

					Если НЕ ТаблицаДвижений = Неопределено Тогда

						НаборЗаписей.Загрузить(ТаблицаДвижений);

					КонецЕсли;

				КонецЦикла;

				Попытка

					СтрокаТаблицы.Объект.Записать();
				//	Для отправки "обратно" - удалить регистрацию объекта в этот узел.
				//	Так же будут удалена регистрация и по коллекции "Движения".
					СтрокаСсылки = ТаблицаСсылок.Добавить();
					СтрокаСсылки.Ссылка = СтрокаТаблицы.Объект.Ссылка;
					СтрокаСсылки.ЕстьДвижения = Истина;

				Исключение

						ТекстОшибки = ОписаниеОшибки();
						ЖурналСобытий.Регистрация("GetRequestAvailability.ЗаписьОбъекта", УровеньЖурналаРегистрации.Ошибка
							,
							, ?(СтрокаТаблицы.Объект.Ссылка.Пустая()
								, СтрокаТаблицы.Объект.ПолучитьСсылкуНового()
								, СтрокаТаблицы.Объект.Ссылка)
							,
							, ТекстОшибки
							, СокрЛП(СтрокаТаблицы.Объект)
						);

				КонецПопытки;

			КонецЦикла;

			Если НЕ ТаблицаСсылок.Количество() = 0 Тогда

				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
				СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, ТаблицаСсылок, НазначениеТипаXML.Явное);

				ТаблицаСсылок = Неопределено;

				Подключение = СервисыСервер.Подключение("RetailPack");

				ЧтениеJSON = Новый ЧтениеJSON;	//	пытаемся получить таблицу обработанных ссылок.
				Подключение.DeleteChangeRegistrations(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Код, ЗаписьJSON.Закрыть());

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры
	
#КонецОбласти


#Область ДляРаботыКоллЦентра

Функция ЯвляетсяСотрудникомКоллЦентра(СотрудникКакПользователь) Экспорт   
	
	СтруктураОтвета = Новый Структура("СотрудникКоллЦентра, ВыбранТекущийПользовательОтветственным");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиКоллЦентра.Ссылка КАК Ссылка,
		|	СотрудникиКоллЦентра.Владелец КАК Владелец
		|ИЗ
		|	Справочник.СотрудникиКоллЦентра КАК СотрудникиКоллЦентра
		|ГДЕ
		|	СотрудникиКоллЦентра.Владелец = &Владелец
		|	И НЕ СотрудникиКоллЦентра.НеРаботает";
	
	Запрос.УстановитьПараметр("Владелец", СотрудникКакПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		
		СтруктураОтвета.СотрудникКоллЦентра = Справочники.СотрудникиКоллЦентра.ПустаяСсылка();
		СтруктураОтвета.ВыбранТекущийПользовательОтветственным = Ложь;
		
	Иначе 
		Выборка.Следующий();
		СтруктураОтвета.СотрудникКоллЦентра = Выборка.Ссылка;
		СтруктураОтвета.ВыбранТекущийПользовательОтветственным = (Выборка.Владелец = ПараметрыСеанса.ТекущийПользователь);    
		
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции // ЯвляетсяСотрудникомКоллЦентра()

Функция ЯвляетсяСуперВайзеромКоллЦентра(СотрудникКакПользователь) Экспорт
	
	СотрудникКЦ = ЯвляетсяСотрудникомКоллЦентра(СотрудникКакПользователь).СотрудникКоллЦентра;
	
	Возврат СотрудникКЦ.РольСотрудника = Перечисления.РолиСотрудниковКоллЦентра.СуперВайзер;
	
КонецФункции 

Функция СотрудникРаботает(Сотрудник) Экспорт
	
	ДанныеОСотруднике = ДанныеОСотрудникеИзРегистра(Сотрудник, НачалоДня(ТекущаяДата()));
	
	Возврат ДанныеОСотруднике.НаРаботе;
	
КонецФункции // СотрудникРаботает()

Процедура СотрудникНаРаботе(Сотрудник, НаРаботе, ДатаЗаписи = Неопределено) Экспорт
	
	Если ДатаЗаписи = Неопределено Тогда 
		ДатаЗаписи = НачалоДня(ТекущаяДата());
	Иначе 
		ДатаЗаписи = НачалоДня(ДатаЗаписи);
	КонецЕсли;
	
	ДанныеОСотруднике = ДанныеОСотрудникеИзРегистра(Сотрудник, ДатаЗаписи);
	
	ДанныеОСотруднике.НаРаботе = НаРаботе;
	
	ЗаписьВРегистрКоллЦентра(ДанныеОСотруднике, Сотрудник, ДатаЗаписи); 

КонецПроцедуры

Процедура СотрудникНовыйЗаказ(Сотрудник, ДатаЗаписи = Неопределено) Экспорт
	
	Если ДатаЗаписи = Неопределено Тогда 
		ДатаЗаписи = НачалоДня(ТекущаяДата());
	Иначе 
		ДатаЗаписи = НачалоДня(ДатаЗаписи);
	КонецЕсли;
	
	ДанныеОСотруднике = ДанныеОСотрудникеИзРегистра(Сотрудник, ДатаЗаписи);
	
	ДанныеОСотруднике.НовыеЗаказы = ДанныеОСотруднике.НовыеЗаказы + 1;
	
	ЗаписьВРегистрКоллЦентра(ДанныеОСотруднике, Сотрудник, ДатаЗаписи);
	
КонецПроцедуры

Процедура СотрудникИзменениеОтветственного(СотрудникСтарый, СотрудникНовый, ДатаЗаписи) Экспорт 
	
	ДатаЗаписиВРегистр = НачалоДня(ДатаЗаписи);
	
	ДанныеОСотруднике = ДанныеОСотрудникеИзРегистра(СотрудникСтарый, ДатаЗаписиВРегистр);
	
	ДанныеОСотруднике.НовыеЗаказы = ДанныеОСотруднике.НовыеЗаказы - 1;
	
	ЗаписьВРегистрКоллЦентра(ДанныеОСотруднике, СотрудникСтарый, ДатаЗаписиВРегистр);
	
	ДанныеОСотруднике = ДанныеОСотрудникеИзРегистра(СотрудникНовый, ДатаЗаписиВРегистр);
	
	ДанныеОСотруднике.НовыеЗаказы = ДанныеОСотруднике.НовыеЗаказы + 1;
	
	ЗаписьВРегистрКоллЦентра(ДанныеОСотруднике, СотрудникНовый, ДатаЗаписиВРегистр);
	
КонецПроцедуры

Процедура СотрудникОбработанныйЗаказ(Сотрудник, ДатаЗаписи = Неопределено) Экспорт
	
	Если ДатаЗаписи = Неопределено Тогда 
		ДатаЗаписи = НачалоДня(ТекущаяДата());
	Иначе 
		ДатаЗаписи = НачалоДня(ДатаЗаписи);
	КонецЕсли;
	
	ДанныеОСотруднике = ДанныеОСотрудникеИзРегистра(Сотрудник, ДатаЗаписи);
	
	ДанныеОСотруднике.ОтработанныеЗаказы = ДанныеОСотруднике.ОтработанныеЗаказы + 1;
	
	ЗаписьВРегистрКоллЦентра(ДанныеОСотруднике, Сотрудник, ДатаЗаписи);
	
КонецПроцедуры

Процедура ЗаписьВРегистрКоллЦентра(СтруктураЗаписи, Сотрудник, ДатаЗаписи)
	ТекущийПривилегированныйРежим = ПривилегированныйРежим();
	
	УстановитьПривилегированныйРежим(Истина);
	Набор = РегистрыСведений.РаботаСотрудниковКоллЦентра.СоздатьНаборЗаписей();
	Набор.Отбор.Период.Установить(ДатаЗаписи);
	Набор.Отбор.Сотрудник.Установить(Сотрудник);
	
	Запись = Набор.Добавить();
	Запись.Период = ДатаЗаписи;
	Запись.Сотрудник = Сотрудник;
	Запись.НовыеЗаказы = СтруктураЗаписи.НовыеЗаказы;
	Запись.ОтработанныеЗаказы = СтруктураЗаписи.ОтработанныеЗаказы;
	Запись.НаРаботе = СтруктураЗаписи.НаРаботе;
	Набор.Записать(); 
	
	УстановитьПривилегированныйРежим(ТекущийПривилегированныйРежим);
	
КонецПроцедуры

Функция ДанныеОСотрудникеИзРегистра(Сотрудник, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаботаСотрудниковКоллЦентра.НовыеЗаказы КАК НовыеЗаказы,
		|	РаботаСотрудниковКоллЦентра.ОтработанныеЗаказы КАК ОтработанныеЗаказы,
		|	РаботаСотрудниковКоллЦентра.НаРаботе КАК НаРаботе
		|ИЗ
		|	РегистрСведений.РаботаСотрудниковКоллЦентра КАК РаботаСотрудниковКоллЦентра
		|ГДЕ
		|	РаботаСотрудниковКоллЦентра.Период = &Период
		|	И РаботаСотрудниковКоллЦентра.Сотрудник = &Сотрудник";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Период", НачалоДня(Период));
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() = 0 Тогда
		
		Результат = Новый Структура("НовыеЗаказы, ОтработанныеЗаказы, НаРаботе", 0, 0, Ложь);
		
	Иначе
		
		Результат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТЗ[0]);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтветственныйЗаЗаказ(КонтрагентЗаказа, ПоУмолчанию = Истина, ПериодДокумента = Неопределено, Пользователь = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаботаСотрудниковКоллЦентра.Сотрудник КАК Сотрудник,
		|	РаботаСотрудниковКоллЦентра.НовыеЗаказы + РаботаСотрудниковКоллЦентра.ОтработанныеЗаказы КАК ВсеЗаказы,
		|	1 КАК ПоУмолчанию
		|ПОМЕСТИТЬ ВыбранныеСотрудники
		|ИЗ
		|	РегистрСведений.РаботаСотрудниковКоллЦентра КАК РаботаСотрудниковКоллЦентра
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СотрудникиКоллЦентра КАК СотрудникиКоллЦентра
		|		ПО РаботаСотрудниковКоллЦентра.Сотрудник = СотрудникиКоллЦентра.Ссылка
		|ГДЕ
		|	НЕ СотрудникиКоллЦентра.НеРаботает
		|	И РаботаСотрудниковКоллЦентра.НаРаботе
		|	И РаботаСотрудниковКоллЦентра.Период = &ПериодРаботы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СотрудникиКоллЦентра.Ссылка,
		|	0,
		|	2
		|ИЗ
		|	Справочник.СотрудникиКоллЦентра КАК СотрудникиКоллЦентра
		|ГДЕ
		|	НЕ СотрудникиКоллЦентра.НеРаботает
		|	И СотрудникиКоллЦентра.ЗаказыПоУмолчанию
		|	И &ПоУмолчанию
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СотрудникиКоллЦентра.Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателя.Ссылка),
		|	0
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СотрудникиКоллЦентра КАК СотрудникиКоллЦентра
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботаСотрудниковКоллЦентра КАК РаботаСотрудниковКоллЦентра
		|			ПО СотрудникиКоллЦентра.Ссылка = РаботаСотрудниковКоллЦентра.Сотрудник
		|		ПО ЗаказПокупателя.Ответственный = СотрудникиКоллЦентра.Владелец
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ЗаказПокупателя.Дата, ДЕНЬ) = &ПериодДокумента
		|	И НЕ СотрудникиКоллЦентра.НеРаботает
		|	И НЕ СотрудникиКоллЦентра.ЗаказыПоУмолчанию
		|	И РаботаСотрудниковКоллЦентра.Период = &ПериодРаботы
		|	И РаботаСотрудниковКоллЦентра.НаРаботе
		|	И ЗаказПокупателя.Контрагент = &Контрагент
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиКоллЦентра.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбранныеСотрудники.Сотрудник КАК Сотрудник,
		|	ВыбранныеСотрудники.ВсеЗаказы КАК ВсеЗаказы,
		|	ВыбранныеСотрудники.ПоУмолчанию КАК ПоУмолчанию
		|ИЗ
		|	ВыбранныеСотрудники КАК ВыбранныеСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ВыбранныеСотрудники.Сотрудник.Владелец = Пользователи.Ссылка
		|ГДЕ
		|	НЕ Пользователи.Ссылка = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПоУмолчанию,
		|	ВсеЗаказы";
	
	Если ПериодДокумента = Неопределено Тогда 
		Запрос.УстановитьПараметр("ПериодДокумента", НачалоДня(ТекущаяДата())); 
	Иначе 
		Запрос.УстановитьПараметр("ПериодДокумента", НачалоДня(ПериодДокумента)); 
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПериодРаботы", НачалоДня(ТекущаяДата())); 
	Запрос.УстановитьПараметр("ПоУмолчанию", ПоУмолчанию);
	Запрос.УстановитьПараметр("Контрагент", КонтрагентЗаказа);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Сотрудник;
	Иначе 
		Результат = Справочники.СотрудникиКоллЦентра.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОтветственныйЗаЗаказ()

Процедура ВыборСотрудникаКЦ(ДанныеВыбора, ВсеСотрудники) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиКоллЦентра.Владелец КАК Владелец,
		|	ЕСТЬNULL(РаботаСотрудниковКоллЦентра.НаРаботе, ЛОЖЬ) КАК НаРаботе
		|ПОМЕСТИТЬ СотрудникиКЦ
		|ИЗ
		|	Справочник.СотрудникиКоллЦентра КАК СотрудникиКоллЦентра
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботаСотрудниковКоллЦентра КАК РаботаСотрудниковКоллЦентра
		|		ПО (РаботаСотрудниковКоллЦентра.Сотрудник = СотрудникиКоллЦентра.Ссылка)
		|			И (РаботаСотрудниковКоллЦентра.Период = &Период)
		|ГДЕ
		|	НЕ СотрудникиКоллЦентра.НеРаботает
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиКЦ.Владелец КАК Ответственный,
		|	СотрудникиКЦ.НаРаботе КАК НаРаботе,
		|	СотрудникиКЦ.Владелец.Наименование КАК ОтветственныйНаименование
		|ИЗ
		|	СотрудникиКЦ КАК СотрудникиКЦ
		|ГДЕ
		|	(СотрудникиКЦ.НаРаботе
		|			ИЛИ &ВсеСотрудники)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтветственныйНаименование";
	
	Запрос.УстановитьПараметр("ВсеСотрудники", ВсеСотрудники);
	Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДата()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ответственный, Выборка.ОтветственныйНаименование);
	КонецЦикла; 

КонецПроцедуры

Функция ЗаполненностьДокументаДляЗапроса(АктивныйДокумент) Экспорт
	
	ЗапросДоступностиРазрешен = Новый Структура("СтрокиЗаполнены, ВсеОтменены", Ложь, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЗаказПокупателяТовары.Ссылка) КАК Строки,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаказПокупателяТовары.Отменено
	|				ТОГДА 1
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НЕ ЗаказПокупателяТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|						ТОГДА ВЫБОР
	|								КОГДА ЗаказПокупателяТовары.Самовывоз
	|										И НЕ ЗаказПокупателяТовары.МагазинПолучатель = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|									ТОГДА 1
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК Склады,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаказПокупателяТовары.Отменено
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СтрокаОтмена
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", АктивныйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ЗапросДоступностиРазрешен.СтрокиЗаполнены = (Выборка.Строки = Выборка.Склады);
		ЗапросДоступностиРазрешен.ВсеОтменены = (Выборка.Строки = Выборка.СтрокаОтмена);
		
	КонецЦикла;
	
	Возврат ЗапросДоступностиРазрешен;
	
КонецФункции

Функция ПолучитьСостаяниеЗаказаПокупателя(АктивныйДокумент) Экспорт
	
	Результат = Перечисления.СостоянияЗаказовПокупателей.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.КлючевыеАтрибутыЗаказовПокупателей.СрезПоследних КАК КлючевыеАтрибутыЗаказовПокупателейСрезПоследних
		|ГДЕ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ЗаказПокупателя = &ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", АктивныйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Результат = Выборка.Состояние;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьКлючСвязиЗапросаДоступности(ТабличнаяЧасть, Перезаполнить = Ложь) Экспорт

	Если Перезаполнить = Истина Тогда

		КлючСвязиЗапросаДоступности = 0;

		Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл

			КлючСвязиЗапросаДоступности = КлючСвязиЗапросаДоступности + 1;
			СтрокаТабличнойЧасти.КлючСвязиЗапросаДоступности = КлючСвязиЗапросаДоступности;

		КонецЦикла;

	Иначе

		ДанныеКлючей = ПолучитьДанныеКлючейСвязи(ТабличнаяЧасть, "КлючСвязиЗапросаДоступности");

		Если НЕ ДанныеКлючей.ВсёХорошо Тогда

		//	Первым делом уничтожим возможные повторы в исходной таблице.

			Для каждого КлючСвязи Из ДанныеКлючей.Повторы Цикл

				СтрокиТабличнойЧасти = ТабличнаяЧасть.НайтиСтроки(Новый Структура("КлючСвязиЗапросаДоступности", КлючСвязи));

				Индекс = СтрокиТабличнойЧасти.Количество() - 1;

				Пока Индекс > 0 Цикл

					СтрокиТабличнойЧасти[Индекс].КлючСвязиЗапросаДоступности = 0;
					Индекс = Индекс - 1;

				КонецЦикла;

			КонецЦикла;

		//	Теперь устанавливаем нулевые позиции ключей с учётом пропущенных.
			КлючСвязиЗапросаДоступности = ДанныеКлючей.КлючМаксимальный;	//	дальше будем идти с пре-итерацией в 1

			Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл

				Если СтрокаТабличнойЧасти.КлючСвязиЗапросаДоступности <= 0 Тогда

					Если НЕ ДанныеКлючей.Пропуски.Количество() = 0 Тогда

						СтрокаТабличнойЧасти.КлючСвязиЗапросаДоступности = ДанныеКлючей.Пропуски[0];
						ДанныеКлючей.Пропуски.Удалить(0);

					Иначе

						КлючСвязиЗапросаДоступности = КлючСвязиЗапросаДоступности + 1;
						СтрокаТабличнойЧасти.КлючСвязиЗапросаДоступности = КлючСвязиЗапросаДоступности;

					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры 

Функция ПолучитьДанныеКлючейСвязи(КоллекцияКлючей, ИмяКлюча)

	ДанныеКлючей = Новый Структура(
		"КлючМаксимальный, ВсёХорошо, Повторы, Пропуски"
		, 0
		, Истина
		, Новый Массив
		, Новый Массив
	);

	ТаблицаКлючей = Новый ТаблицаЗначений;
	ТаблицаКлючей.Колонки.Добавить(ИмяКлюча , Новый ОписаниеТипов("Число"));
	ТаблицаКлючей.Колонки.Добавить("Счетчик", Новый ОписаниеТипов("Число"));

	КонтрольПропусков = Новый Соответствие;

	Для каждого СтрокаКоллекции Из КоллекцияКлючей Цикл

		Если СтрокаКоллекции[ИмяКлюча] > 0 Тогда

			СтрокаТаблицы = ТаблицаКлючей.Добавить();
			СтрокаТаблицы[ИмяКлюча] = СтрокаКоллекции[ИмяКлюча];
			СтрокаТаблицы.Счетчик	= 1;

			КонтрольПропусков.Вставить(СтрокаКоллекции[ИмяКлюча], Истина);

		Иначе

			ДанныеКлючей.ВсёХорошо = Ложь;

		КонецЕсли;

	КонецЦикла;

	Если НЕ ТаблицаКлючей.Количество() = 0 Тогда

		ТаблицаКлючей.Свернуть(ИмяКлюча, "Счетчик");
		ТаблицаКлючей.Сортировать(ИмяКлюча);

		ДанныеКлючей.КлючМаксимальный = ТаблицаКлючей[ТаблицаКлючей.Количество() - 1][ИмяКлюча];

		Для каждого СтрокаТаблицы Из ТаблицаКлючей Цикл

			Если НЕ СтрокаТаблицы.Счетчик = 1 Тогда

				ДанныеКлючей.Повторы.Добавить(СтрокаТаблицы[ИмяКлюча]);
				ДанныеКлючей.ВсёХорошо = Ложь;

			КонецЕсли;

		КонецЦикла;

		Для НомерСтроки = 1 По ДанныеКлючей.КлючМаксимальный Цикл

			Если КонтрольПропусков.Получить(НомерСтроки) = Неопределено Тогда

				ДанныеКлючей.Пропуски.Добавить(НомерСтроки);

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат ДанныеКлючей;

КонецФункции

Процедура ИзменениеСтатусовЗаказаПокупателей() Экспорт
	// Изменение статуса запроса доступности при отправке на магазин 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗапросДоступностиТоваровТовары.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров.Товары КАК ЗапросДоступностиТоваровТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСтрокЗаказаПокупателя КАК СостояниеСтрокЗаказаПокупателя
		|		ПО ЗапросДоступностиТоваровТовары.Ссылка = СостояниеСтрокЗаказаПокупателя.ЗапросДоступностиТоваров
		|			И ЗапросДоступностиТоваровТовары.КлючСвязи = СостояниеСтрокЗаказаПокупателя.КлючСвязи
		|ГДЕ
		|	ЗапросДоступностиТоваровТовары.Ссылка.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.КОтправке)
		|	И СостояниеСтрокЗаказаПокупателя.Отправлен";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Отправлен;
		ДокументОбъект.Записать();
		
	КонецЦикла;  

	// Изменение статуса запроса доступности при получении магазином
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗапросДоступностиТоваровТовары.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров.Товары КАК ЗапросДоступностиТоваровТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСтрокЗаказаПокупателя КАК СостояниеСтрокЗаказаПокупателя
		|		ПО ЗапросДоступностиТоваровТовары.Ссылка = СостояниеСтрокЗаказаПокупателя.ЗапросДоступностиТоваров
		|			И ЗапросДоступностиТоваровТовары.КлючСвязи = СостояниеСтрокЗаказаПокупателя.КлючСвязи
		|ГДЕ
		|	ЗапросДоступностиТоваровТовары.Ссылка.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отправлен)
		|	И СостояниеСтрокЗаказаПокупателя.Получен";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Получен;
		ДокументОбъект.Записать();
		
	КонецЦикла;  

КонецПроцедуры

Процедура АвтоматическоеИзменениеСтатусов() Экспорт
	
	ТаблицаЗаказов = Новый ТаблицаЗначений();
	ТаблицаЗаказов.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	
#Область ПереводЗаказаВЗапросДоступности

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ЗаказПокупателя КАК ДокументЗаказа
		|ИЗ
		|	РегистрСведений.КлючевыеАтрибутыЗаказовПокупателей.СрезПоследних КАК КлючевыеАтрибутыЗаказовПокупателейСрезПоследних
		|ГДЕ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ГотовКЗапросу)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументЗаказа = Выборка.ДокументЗаказа.ПолучитьОбъект();
		ДокументЗаказа.Статус = Перечисления.СтатусыЗаказовПокупателей.ЗапросДоступности;
		ДокументЗаказа.Записать();
	
	КонецЦикла;

#КонецОбласти

#Область ПереводЗаказаВПродажу

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ЗаказПокупателя КАК ДокументЗаказа
		|ИЗ
		|	РегистрСведений.КлючевыеАтрибутыЗаказовПокупателей.СрезПоследних КАК КлючевыеАтрибутыЗаказовПокупателейСрезПоследних
		|ГДЕ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ГотовКПродаже)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументЗаказа = Выборка.ДокументЗаказа.ПолучитьОбъект();
		ДокументЗаказа.Статус = Перечисления.СтатусыЗаказовПокупателей.Продажа;
		ДокументЗаказа.Записать();
	
	КонецЦикла;

#КонецОбласти

#Область ПереводЗаказаВПеремещение

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ЗаказПокупателя КАК ДокументЗаказа
		|ИЗ
		|	РегистрСведений.КлючевыеАтрибутыЗаказовПокупателей.СрезПоследних КАК КлючевыеАтрибутыЗаказовПокупателейСрезПоследних
		|ГДЕ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ГотовКПеремещению)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументЗаказа = Выборка.ДокументЗаказа.ПолучитьОбъект();
		ДокументЗаказа.Статус = Перечисления.СтатусыЗаказовПокупателей.Перемещение;
		ДокументЗаказа.Записать();
	
	КонецЦикла;

#КонецОбласти

#Область ПереводЗаказаВДоставку

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ЗаказПокупателя КАК ДокументЗаказа
		|ИЗ
		|	РегистрСведений.КлючевыеАтрибутыЗаказовПокупателей.СрезПоследних КАК КлючевыеАтрибутыЗаказовПокупателейСрезПоследних
		|ГДЕ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ГотовКДоставке)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументЗаказа = Выборка.ДокументЗаказа.ПолучитьОбъект();
		ДокументЗаказа.Статус = Перечисления.СтатусыЗаказовПокупателей.Доставка;
		ДокументЗаказа.Записать();
	
	КонецЦикла;

#КонецОбласти

#Область ПереводЗаказаОтправлен
	// Изменение статуса запроса доступности при отправке на магазин 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗапросДоступностиТоваровТовары.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров.Товары КАК ЗапросДоступностиТоваровТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСтрокЗаказаПокупателя КАК СостояниеСтрокЗаказаПокупателя
		|		ПО ЗапросДоступностиТоваровТовары.Ссылка = СостояниеСтрокЗаказаПокупателя.ЗапросДоступностиТоваров
		|			И ЗапросДоступностиТоваровТовары.КлючСвязи = СостояниеСтрокЗаказаПокупателя.КлючСвязи
		|ГДЕ
		|	ЗапросДоступностиТоваровТовары.Ссылка.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.КОтправке)
		|	И СостояниеСтрокЗаказаПокупателя.Отправлен";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Отправлен;
		ДокументОбъект.Записать();
		
	КонецЦикла;  

#КонецОбласти	

#Область ПереводЗаказаПолучен

	// Изменение статуса запроса доступности при получении магазином
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗапросДоступностиТоваровТовары.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров.Товары КАК ЗапросДоступностиТоваровТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСтрокЗаказаПокупателя КАК СостояниеСтрокЗаказаПокупателя
		|		ПО ЗапросДоступностиТоваровТовары.Ссылка = СостояниеСтрокЗаказаПокупателя.ЗапросДоступностиТоваров
		|			И ЗапросДоступностиТоваровТовары.КлючСвязи = СостояниеСтрокЗаказаПокупателя.КлючСвязи
		|ГДЕ
		|	ЗапросДоступностиТоваровТовары.Ссылка.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отправлен)
		|	И СостояниеСтрокЗаказаПокупателя.Получен";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Получен;
		ДокументОбъект.Записать();
		
	КонецЦикла; 

#КонецОбласти

#Область ПереводЗаказаЗакрыт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ЗаказПокупателя КАК ДокументЗаказа,
		|	ЗапросДоступностиТоваров.Ссылка КАК ЗапросДоступности
		|ИЗ
		|	РегистрСведений.КлючевыеАтрибутыЗаказовПокупателей.СрезПоследних КАК КлючевыеАтрибутыЗаказовПокупателейСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров КАК ЗапросДоступностиТоваров
		|		ПО КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ЗаказПокупателя = ЗапросДоступностиТоваров.ДокументОснование
		|		И НЕ (ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отменён)
		|		ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Удалён))
		|ГДЕ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ГотовКЗакрытию)
		|ИТОГИ
		|ПО
		|	ДокументЗаказа";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДокументЗаказа = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументЗаказа.Следующий() Цикл
	
		ДокументЗаказа = ВыборкаДокументЗаказа.ДокументЗаказа.ПолучитьОбъект();
		ДокументЗаказа.Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт;
		ДокументЗаказа.Записать();

		ВыборкаДетальныеЗаписи = ВыборкаДокументЗаказа.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ДокументЗапросДоступности = ВыборкаДетальныеЗаписи.ЗапросДоступности.ПолучитьОбъект();
			ДокументЗапросДоступности.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Закрыт;
			ДокументЗапросДоступности.Записать();
			
		КонецЦикла;

	КонецЦикла;

#КонецОбласти

#Область ПереводЗапросаДоступностиДляЧастичнойПродажи

	СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПустаяСсылка();

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗапросДоступностиТоваров.Ссылка КАК ДокументЗапроса,
		|	ЗаказПокупателя.СтатусОплаты,
		|	ЗаказПокупателя.ТипОплаты
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров КАК ЗапросДоступностиТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ПО ЗапросДоступностиТоваров.ДокументОснование = ЗаказПокупателя.Ссылка
		|ГДЕ
		|	ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Согласован)
		|	И ЗапросДоступностиТоваров.Проведен
		|	И ЗапросДоступностиТоваров.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипОплаты = Перечисления.ТипОплатыЗаказПокупателя.Наличные Тогда
			СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПродажаНаКассе;
		ИначеЕсли Выборка.СтатусОплаты = Перечисления.СтатусОплаты.Оплачен Тогда 
			СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПродажаБезнал;
		КонецЕсли;
		
		Если Не СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПустаяСсылка() Тогда
			ДокументЗапроса = Выборка.ДокументЗапроса.ПолучитьОбъект();
			ДокументЗапроса.СтатусЗапроса = СтатусЗапроса;
			ДокументЗапроса.Записать();
		КонецЕсли;
		
	КонецЦикла;

#КонецОбласти

#Область ПерепроведениеИзмененногоЗаказа

	ТаблицаЗаказов.Свернуть("Заказ");
	
	Для Каждого СтрокаЗаказов Из ТаблицаЗаказов Цикл
		
		ДокументЗаказа = СтрокаЗаказов.Заказ.ПолучитьОбъект();
		ДокументЗаказа.Записать();
		
	КонецЦикла;

#КонецОбласти

КонецПроцедуры

Процедура АвтоматическаяПродажаПоЧеку() Экспорт
	
	ТаблицаЗаказов = Новый ТаблицаЗначений();
	ТаблицаЗаказов.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	
#Область ПроверкаПродажиПоЧеку

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокуменЗаказ.Ссылка КАК ДокументЗаказа
		|ПОМЕСТИТЬ ДокументыЗаказов
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ДокуменЗаказ
		|ГДЕ
		|	ДокуменЗаказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Продажа)
		|	И ДокуменЗаказ.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыТовары.КлючСвязиЗапросаДоступности КАК КлючСвязиЗапросаДоступности,
		|	ДокументыЗаказов.ДокументЗаказа КАК ДокументЗаказа,
		|	ЗапросДоступностиТовары.Ссылка КАК ЗапросДоступностиЗаказа
		|ИЗ
		|	ДокументыЗаказов КАК ДокументыЗаказов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказыТовары
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ЧекТовары
		|			ПО (ЗаказыТовары.КлючСвязи = ЧекТовары.КлючСвязи)
		|			И (ЗаказыТовары.Ссылка = ЧекТовары.Ссылка.ЗаказПокупателя)
		|			И (ЧекТовары.Ссылка.Проведен)
		|			И (ЧекТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров.Товары КАК ЗапросДоступностиТовары
		|			ПО (ЗаказыТовары.Ссылка = ЗапросДоступностиТовары.Ссылка.ДокументОснование)
		|			И (ЗаказыТовары.КлючСвязиЗапросаДоступности = ЗапросДоступностиТовары.КлючСвязи)
		|		ПО (ДокументыЗаказов.ДокументЗаказа = ЗаказыТовары.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗапросДоступностиТовары.КлючСвязи,
		|	ДокументыЗаказов.ДокументЗаказа,
		|	ЗапросДоступностиТовары.Ссылка
		|ИЗ
		|	ДокументыЗаказов КАК ДокументыЗаказов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров.Товары КАК ЗапросДоступностиТовары
		|		ПО ДокументыЗаказов.ДокументЗаказа = ЗапросДоступностиТовары.Ссылка.ДокументОснование
		|		И
		|			ЗапросДоступностиТовары.Ссылка.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Закрыт)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаЗаписиВРегистр = РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ИнициализацияСтрокиЗаписи();
		СтрокаЗаписиВРегистр.ЗаказПокупателя = Выборка.ДокументЗаказа;
		СтрокаЗаписиВРегистр.ЗапросДоступностиТоваров = Выборка.ЗапросДоступностиЗаказа;
		СтрокаЗаписиВРегистр.КлючСвязи = Выборка.КлючСвязиЗапросаДоступности;
		СтрокаЗаписиВРегистр.Продано = Истина;
		
		РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ЗаписьВРегистрСтроки(СтрокаЗаписиВРегистр);
		
		СтрокаЗаказов = ТаблицаЗаказов.Добавить();
		СтрокаЗаказов.Заказ = Выборка.ДокументЗаказа;
	
	КонецЦикла;
	
#КонецОбласти	

#Область ПерепроведениеИзмененногоЗаказа

	ТаблицаЗаказов.Свернуть("Заказ");
	
	Для Каждого СтрокаЗаказов Из ТаблицаЗаказов Цикл
		
		ДокументЗаказа = СтрокаЗаказов.Заказ.ПолучитьОбъект();
		ДокументЗаказа.Записать();
		
	КонецЦикла;

#КонецОбласти

КонецПроцедуры

Процедура СозданиеПеремещений() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗапросДоступностиТоваров.Ссылка
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров КАК ЗапросДоступностиТоваров
		|ГДЕ
		|	ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПродажаБезнал)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.КОтправке)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НовыйДокумент = Документы.ПеремещениеТоваров.СоздатьДокумент();
		НовыйДокумент.Заполнить(Выборка.Ссылка);
		Если Не НовыйДокумент.ДополнительныеСвойства.Свойство("ПеремещениеУжеЕсть") Тогда
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры
#КонецОбласти






