#Область ФункционалЗапросДоступностиТоваров

// Отправка почты по запросу доступности.
// Сичкаренко Ю.П. 28.08.2023
// 
// Параметры:
//  ЗапросДоступности - ДокументОбъект.ЗапросДоступностиТоваров
// Возвращаемое значение:
// 	Структура - структура регистр для записи:
//		* ПочтаОтправлена - Булево
//		* ТекстОтвета - Строка
//  
Функция ОтправкаПочтыПоЗапросуДоступности(ЗапросДоступности) Экспорт

	//УчетныеДанныеОтправителя = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("СостояниеЗД", Истина);
	УчетныеДанныеОтправителя = РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись();
	Результат = Новый Структура("ПочтаОтправлена, ТекстОтвета", Ложь, "");;
	
	Если Не УчетныеДанныеОтправителя.Пустая() Тогда

		Если ЗапросДоступности.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Новый 
				Или ЗапросДоступности.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Сборка
				Или ЗапросДоступности.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Изменён
				Или ЗапросДоступности.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ТоварВМагазине
				Или ЗапросДоступности.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтменуОтправитель
				Или ЗапросДоступности.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтменуПолучатель Тогда

			ТребуетсяОтправкаПочты = Ложь;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	ТаблицаАтрибутов.ЗапросДоступности,
				|	ТаблицаАтрибутов.ОтправкаПочты
				|ИЗ
				|	РегистрСведений.КлючевыеАтрибутыЗапросовДоступности.СрезПоследних(, ЗапросДоступности = &ЗапросДоступности) КАК
				|		ТаблицаАтрибутов
				|ГДЕ
				|	ТаблицаАтрибутов.СтатусЗапроса = &СтатусЗапроса";
			
			Запрос.УстановитьПараметр("ЗапросДоступности", ЗапросДоступности.Ссылка);
			Запрос.УстановитьПараметр("СтатусЗапроса", ЗапросДоступности.СтатусЗапроса);

			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Количество() = 0 Тогда
				
				ТребуетсяОтправкаПочты = Истина;
				
			Иначе
				
				Выборка.Следующий();
				ТребуетсяОтправкаПочты = Не Выборка.ОтправкаПочты;
				
			КонецЕсли;
			
			Если ТребуетсяОтправкаПочты Тогда

				Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
					Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("УправлениеКонтактнойИнформацией");
					Если ЗапросДоступности.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ТоварВМагазине Тогда
						Адрес = Модуль.ПолучитьКонтактнуюИнформацияОбъекта(
							ЗапросДоступности.МагазинПолучатель, Справочники.ВидыКонтактнойИнформации.EmailМагазина);
					Иначе
						Адрес = Модуль.ПолучитьКонтактнуюИнформацияОбъекта(
							ЗапросДоступности.МагазинОтправитель, Справочники.ВидыКонтактнойИнформации.EmailМагазина);
					КонецЕсли;
	
					Если ПустаяСтрока(Адрес) Тогда
						
						Результат.ТекстОтвета = "Не указан электронный адрес магазина";
						
					Иначе
						
						ДанныеЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗапросДоступности.ДокументОснование, "Номер, Ответственный");
						ОтветственныйПочта = Модуль.ПолучитьКонтактнуюИнформацияОбъекта(
							ДанныеЗаказа.Ответственный, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
						
						ПараметрыПисьма = Новый Структура;
						ПараметрыПисьма.Вставить("Кому", Адрес);
						ПараметрыПисьма.Вставить("Тема", "ЗД #"
										 + СокрЛП(ЗапросДоступности.Номер)
										 + ", статус "
										 + СокрЛП(ЗапросДоступности.СтатусЗапроса));
						ТелоПисьма = "Требуется обработка Запроса Доступности #"
							+ СокрЛП(ЗапросДоступности.Номер)
							+ " по заказу #"
							+ СокрЛП(ДанныеЗаказа.Номер)
							+ " в статусе "
							+ СокрЛП(ЗапросДоступности.СтатусЗапроса)
							+ "."
							+ Символы.ПС 
							+ Символы.ПС
							+ "Ответственный за Заказ: "
							+ СокрЛП(ДанныеЗаказа.Ответственный)
							+ " "
							+ СокрЛП(ОтветственныйПочта);
						ПараметрыПисьма.Вставить("Тело", ТелоПисьма);
		
						Результат.ТекстОтвета = ЭлектроннаяПочта.ОтправитьПочтовоеСообщение(УчетныеДанныеОтправителя, ПараметрыПисьма);
						Результат.ПочтаОтправлена = Истина;
	
					КонецЕсли;
	
				КонецЕсли;
			
			Иначе
				
				Результат.ТекстОтвета = "";
				Результат.ПочтаОтправлена = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

//	LNK 08.04.2019 13:35:07
Процедура УстановитьСостояниеЗапросаДоступностиТоваров(ДокументСсылка, ДанныеСостояния)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;  
	
	НачатьТранзакцию();
	
	Попытка
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ДокументОбъект.СтатусЗапроса = ДанныеСостояния;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);

		ЗафиксироватьТранзакцию();
		 		
		
	Исключение
		
		ОтменитьТранзакцию();
	
	КонецПопытки;

КонецПроцедуры

//	LNK 05.04.2019 10:53:58
Функция ПолучитьСостояниеЗапросаДоступностиТоваров(ДокументСсылка)	Экспорт

	ДанныеСостояния = Новый Структура(
		"Существует, Отправлен, Рассмотрен"
		, Ложь, Ложь, Ложь);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСТИНА КАК Существует,
	|	ТаблицаРегистра.Отправлен КАК Отправлен,
	|	ТаблицаРегистра.Рассмотрен КАК Рассмотрен
	|ИЗ
	|	РегистрСведений.СостояниеЗапросаДоступностиТоваров КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.ЗапросДоступностиТоваров = &ДокументСсылка"
	);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеСостояния, Выборка);

	КонецЕсли;

	Возврат ДанныеСостояния;

КонецФункции // ПолучитьСостояниеЗапросаДоступностиТоваров()
	
Функция ПолучитьСледующийСтатусЗапросаДоступностиТоваров(ДанныеСостоянияДокумента)	Экспорт
	
	ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПустаяСсылка();
	
	ДанныеДляПроверки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСостоянияДокумента, "СтатусЗапроса");

	Если ДанныеДляПроверки = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Новый Тогда 
		
		ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе;
		
	ИначеЕсли ДанныеДляПроверки = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтменуОтправитель 
			Или ДанныеДляПроверки = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтменуПолучатель Тогда 
		
		ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Отменён;
		
	ИначеЕсли ДанныеДляПроверки = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Изменён Тогда  
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗапросДоступностиТоваровТовары.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ЗапросДоступностиТоваров.Товары КАК ЗапросДоступностиТоваровТовары
			|ГДЕ
			|	НЕ(ЗапросДоступностиТоваровТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён)
			|				ИЛИ ЗапросДоступностиТоваровТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён))
			|	И ЗапросДоступностиТоваровТовары.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеСостоянияДокумента);
		
		Если Запрос.Выполнить().Пустой() Тогда 
			
			ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Отменён;

		Иначе 
			
			ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе; 
			
		КонецЕсли;
		
	ИначеЕсли ДанныеДляПроверки = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе Тогда 
		
		ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Согласован;

	ИначеЕсли ДанныеДляПроверки = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Согласован Тогда 
		
		ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПустаяСсылка();
		
	ИначеЕсли ДанныеДляПроверки = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Сборка Тогда 
		
		ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.КОтправке;
		
	ИначеЕсли ДанныеДляПроверки = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПродажаБезнал Тогда 
		
		ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Выдан;
		
	ИначеЕсли ДанныеДляПроверки = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ТоварВМагазине Тогда 
		
		ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Получен;
		
	ИначеЕсли ДанныеДляПроверки = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.КОтправке Тогда 

		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТоварыЗапрос.Ссылка КАК Ссылка,
			|	ВЫБОР
			|		КОГДА ТоварыПеремещение.Ссылка ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ПеремещениеЕсть
			|ИЗ
			|	Документ.ЗапросДоступностиТоваров.Товары КАК ТоварыЗапрос
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ТоварыПеремещение
			|		ПО ТоварыЗапрос.Ссылка = ТоварыПеремещение.Ссылка.ДокументОснование
			|		И ТоварыПеремещение.Номенклатура = ТоварыЗапрос.Номенклатура
			|		И НЕ ТоварыПеремещение.Ссылка.ПометкаУдаления
			|ГДЕ
			|	ТоварыЗапрос.Ссылка = &Ссылка
			|	И НЕ (ТоварыЗапрос.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён)
			|	ИЛИ ТоварыЗапрос.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён))
			|	И (ТоварыЗапрос.Ссылка.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз)
			|		ИЛИ ТоварыЗапрос.Ссылка.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.СлужбаДоставки)
			|	)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДокументЗапроса.Ссылка,
			|	ВЫБОР
			|		КОГДА ЭлектроннаяНакладная.Ссылка ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ
			|ИЗ
			|	Документ.ЗапросДоступностиТоваров КАК ДокументЗапроса
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяНакладная КАК ЭлектроннаяНакладная
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЭН.СрезПоследних КАК СтатусыЭНСрезПоследних
			|			ПО ЭлектроннаяНакладная.Ссылка = СтатусыЭНСрезПоследних.ДокументРегистратор
			|		ПО ДокументЗапроса.Ссылка = ЭлектроннаяНакладная.ДокументОснование
			|ГДЕ
			|	ДокументЗапроса.Ссылка = &Ссылка
			|	И НЕ (ДокументЗапроса.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отменён)
			|	ИЛИ ДокументЗапроса.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Удалён))
			|	И НЕ ДокументЗапроса.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз)
			|	И НЕ (СтатусыЭНСрезПоследних.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Отменена)
			|	ИЛИ СтатусыЭНСрезПоследних.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Новая))";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеСостоянияДокумента);
		
		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();  
		
		Если Выборка.Количество() = 1 Тогда
			
			Если Выборка.Следующий() Тогда
				ПеремещениеУжеЕсть = Выборка.ПеремещениеЕсть;
			КонецЕсли;
			
		Иначе
			ПеремещениеУжеЕсть = Ложь;
		КонецЕсли;
		
		Если ПеремещениеУжеЕсть Тогда
			
			ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ВыданДоставке;
			
		Иначе
			
			ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПустаяСсылка();
			
		КонецЕсли;

	КонецЕсли;
	
	Возврат ДанныеСостояния;
	
КонецФункции

// Доступность для редактирования.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросДоступностиТоваров - ссылка
// 
// Возвращаемое значение:
//  Булево - Доступность для редактирования
Функция ДоступностьДляРедактирования(ДокументСсылка) Экспорт

	МожемРедактировать = Ложь;
	
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "МагазинОтправитель,
	|																				СтатусЗапроса,
	|																				МагазинПолучатель,
	|																				Дата");
	
	УчетнаяПолитика = ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику(РеквизитыОбъекта.Дата);
	
	НазначениеСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыОбъекта.МагазинОтправитель, "НазначениеСклада", Перечисления.НазначенияСкладов.ПустаяСсылка(), Ложь);
	
	ПополнениеМагазина = (НазначениеСклада = Перечисления.НазначенияСкладов.УправляющаяСистема)
			И Не (УчетнаяПолитика.ИнтернетМагазин = РеквизитыОбъекта.МагазинПолучатель);
	
	Если ТипЗнч(РеквизитыОбъекта.МагазинОтправитель) = Тип("СправочникСсылка.Магазины")
				И ((РеквизитыОбъекта.МагазинОтправитель = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин
				И (РеквизитыОбъекта.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Новый
					Или РеквизитыОбъекта.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе
					Или РеквизитыОбъекта.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Изменён
					Или РеквизитыОбъекта.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Сборка
					Или РеквизитыОбъекта.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтменуОтправитель
					Или РеквизитыОбъекта.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.КОтправке)) 
				Или (РеквизитыОбъекта.МагазинПолучатель = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин
				И (РеквизитыОбъекта.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ТоварВМагазине
					Или РеквизитыОбъекта.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПродажаБезнал
					Или РеквизитыОбъекта.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтменуПолучатель
					Или РеквизитыОбъекта.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Выдан))) Тогда
		
		МожемРедактировать = Истина;
		
	ИначеЕсли ПополнениеМагазина Тогда 
		
		МожемРедактировать = Истина;
		
	ИначеЕсли ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда
		
		МожемРедактировать = Истина;
		
	КонецЕсли;
		
	Возврат МожемРедактировать;
	
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

//	LNK 15.12.2017 09:46:38
Процедура ПолучитьЗаказыПокупателейИзЦентральногоУзла()	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если РозничныеПродажиСлужебный.РесурсWebRetailДоступен() И НЕ ПустаяСтрока(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Код) Тогда

		Подключение  = СервисыСервер.Подключение("RetailPack");
		СтрокаДанных = Подключение.GetBuyersOrder(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Код);

		Если НЕ ПустаяСтрока(СтрокаДанных) Тогда

			ТаблицаСсылок = Новый ТаблицаЗначений;
			ТаблицаСсылок.Колонки.Добавить("Ссылка"      , Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
			ТаблицаСсылок.Колонки.Добавить("ЕстьДвижения", Новый ОписаниеТипов("Булево"));

			ЧтениеJSON = Новый ЧтениеJSON;	//	пытаемся получить таблицу обработанных ссылок.
			ЧтениеJSON.УстановитьСтроку(СтрокаДанных);

			СтруктураДанных = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();

			Для каждого СтрокаТаблицы Из СтруктураДанных.ТаблицаОбъектов Цикл

				СтрокаТаблицы.Объект.ОбменДанными.Загрузка = Истина;
				СтрокаТаблицы.Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
				СтрокаТаблицы.Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);

				Для каждого НаборЗаписей Из СтрокаТаблицы.Объект.Движения Цикл

					НаборЗаписей.Записывать = Истина;
					ТаблицаДвижений = СтрокаТаблицы.Движения.Получить(НаборЗаписей.Метаданные().ПолноеИмя());

					Если НЕ ТаблицаДвижений = Неопределено Тогда

						НаборЗаписей.Загрузить(ТаблицаДвижений);

					КонецЕсли;

				КонецЦикла;

				Попытка

					СтрокаТаблицы.Объект.Записать();
				//	Для отправки "обратно" - удалить регистрацию объекта в этот узел.
				//	Так же будут удалена регистрация и по коллекции "Движения".
					СтрокаСсылки = ТаблицаСсылок.Добавить();
					СтрокаСсылки.Ссылка = СтрокаТаблицы.Объект.Ссылка;
					СтрокаСсылки.ЕстьДвижения = Истина;

				Исключение

						ТекстОшибки = ОписаниеОшибки();
						ЖурналСобытий.Регистрация("GetBuyersOrder.ЗаписьОбъекта", УровеньЖурналаРегистрации.Ошибка
							, Метаданные.Документы.ЗаказПокупателя
							, ?(СтрокаТаблицы.Объект.Ссылка.Пустая()
								, СтрокаТаблицы.Объект.ПолучитьСсылкуНового()
								, СтрокаТаблицы.Объект.Ссылка)
							,
							, ТекстОшибки
							, СокрЛП(СтрокаТаблицы.Объект)
						);

				КонецПопытки;

			КонецЦикла;

		//	Так же могут переданы дополнительные объекты, как-то связанные с документами... например, Контрагент или ещё чего.
		//	Эти объекты будет только создавать новые, если таковые в текущей БД отсутствуют.
			Для каждого СтрокаТаблицы Из СтруктураДанных.ТаблицаСвязей Цикл

				Если СтрокаТаблицы.Объект.Ссылка.Пустая() Тогда

					СтрокаТаблицы.Объект.ОбменДанными.Загрузка = Истина;
					СтрокаТаблицы.Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
					СтрокаТаблицы.Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);

					Попытка

						СтрокаТаблицы.Объект.Записать();

					Исключение

						ТекстОшибки = ОписаниеОшибки();
						ЖурналСобытий.Регистрация("GetBuyersOrder.ЗаписьСвязанногоОбъекта", УровеньЖурналаРегистрации.Ошибка
							, Метаданные.Документы.ЗаказПокупателя
							, ?(СтрокаТаблицы.Объект.Ссылка.Пустая()
								, СтрокаТаблицы.Объект.ПолучитьСсылкуНового()
								, СтрокаТаблицы.Объект.Ссылка)
							,
							, ТекстОшибки
							, СокрЛП(СтрокаТаблицы.Объект)
						);

					КонецПопытки;

				КонецЕсли;

			КонецЦикла;

			Если НЕ ТаблицаСсылок.Количество() = 0 Тогда

				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
				СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, ТаблицаСсылок, НазначениеТипаXML.Явное);

				ТаблицаСсылок = Неопределено;

				Подключение = СервисыСервер.Подключение("RetailPack");

				ЧтениеJSON = Новый ЧтениеJSON;	//	пытаемся получить таблицу обработанных ссылок.
				Подключение.DeleteChangeRegistrations(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Код, ЗаписьJSON.Закрыть());

			КонецЕсли;

		КонецЕсли;

	Иначе

		ЖурналСобытий.Регистрация("GetBuyersOrder.WebService", УровеньЖурналаРегистрации.Ошибка
			, Метаданные.Документы.ЗаказПокупателя
			,
			,
			, "Нет доступа к WS ЦБ для узла «" + ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Код + "»"
		);

	КонецЕсли;

КонецПроцедуры

//	LNK 17.04.2019 10:10:05
Процедура ПолучитьЗапросыДоступностиТоваровИзЦентральногоУзла()	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если НЕ ПустаяСтрока(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Код) Тогда

		Подключение  = СервисыСервер.Подключение("RetailPack");
		СтрокаДанных = Подключение.GetRequestAvailability(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Код);

		Если НЕ ПустаяСтрока(СтрокаДанных) Тогда

			ТаблицаСсылок = Новый ТаблицаЗначений;
			ТаблицаСсылок.Колонки.Добавить("Ссылка"      , Новый ОписаниеТипов("ДокументСсылка.ЗапросДоступностиТоваров"));
			ТаблицаСсылок.Колонки.Добавить("ЕстьДвижения", Новый ОписаниеТипов("Булево"));

			ЧтениеJSON = Новый ЧтениеJSON;	//	пытаемся получить таблицу обработанных ссылок.
			ЧтениеJSON.УстановитьСтроку(СтрокаДанных);

			СтруктураДанных = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();

			Для каждого СтрокаТаблицы Из СтруктураДанных.ТаблицаОбъектов Цикл

				СтрокаТаблицы.Объект.ОбменДанными.Загрузка = Истина;
				СтрокаТаблицы.Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
				СтрокаТаблицы.Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);

				Для каждого НаборЗаписей Из СтрокаТаблицы.Объект.Движения Цикл

					НаборЗаписей.Записывать = Истина;
					ТаблицаДвижений = СтрокаТаблицы.Движения.Получить(НаборЗаписей.Метаданные().ПолноеИмя());

					Если НЕ ТаблицаДвижений = Неопределено Тогда

						НаборЗаписей.Загрузить(ТаблицаДвижений);

					КонецЕсли;

				КонецЦикла;

				Попытка

					СтрокаТаблицы.Объект.Записать();
				//	Для отправки "обратно" - удалить регистрацию объекта в этот узел.
				//	Так же будут удалена регистрация и по коллекции "Движения".
					СтрокаСсылки = ТаблицаСсылок.Добавить();
					СтрокаСсылки.Ссылка = СтрокаТаблицы.Объект.Ссылка;
					СтрокаСсылки.ЕстьДвижения = Истина;

				Исключение

						ТекстОшибки = ОписаниеОшибки();
						ЖурналСобытий.Регистрация("GetRequestAvailability.ЗаписьОбъекта", УровеньЖурналаРегистрации.Ошибка
							,
							, ?(СтрокаТаблицы.Объект.Ссылка.Пустая()
								, СтрокаТаблицы.Объект.ПолучитьСсылкуНового()
								, СтрокаТаблицы.Объект.Ссылка)
							,
							, ТекстОшибки
							, СокрЛП(СтрокаТаблицы.Объект)
						);

				КонецПопытки;

			КонецЦикла;

			Если НЕ ТаблицаСсылок.Количество() = 0 Тогда

				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
				СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, ТаблицаСсылок, НазначениеТипаXML.Явное);

				ТаблицаСсылок = Неопределено;

				Подключение = СервисыСервер.Подключение("RetailPack");

				ЧтениеJSON = Новый ЧтениеJSON;	//	пытаемся получить таблицу обработанных ссылок.
				Подключение.DeleteChangeRegistrations(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Код, ЗаписьJSON.Закрыть());

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры
	
#КонецОбласти

//СЮП 15.05.2024 13.58.39 
Функция ДанныеСтрокиЗаказа(Ссылка, КлючСвязи) Экспорт

	СтруктураОтвет = Новый Структура;
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказПокупателяТовары.Цена КАК Цена,
		|	ЗаказПокупателяТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	ЗаказПокупателяТовары.СуммаБонусныхБалловНачислено КАК СуммаБонусныхБалловНачислено,
		|	ЗаказПокупателяТовары.СуммаБонусныхБалловСписано КАК СуммаБонусныхБалловСписано,
		|	ЗаказПокупателяТовары.СуммаОкругления КАК СуммаОкругления,
		|	ЗаказПокупателяТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|	ЗаказПокупателяТовары.Сумма КАК Сумма,
		|	ЗаказПокупателяТовары.СуммаДоставки КАК СуммаДоставки
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка = &Ссылка
		|	И ЗаказПокупателяТовары.КлючСвязиЗапросаДоступности = &КлючСвязиЗапросаДоступности";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("КлючСвязиЗапросаДоступности", КлючСвязи);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	СтруктураОтвет = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса[0]);
	
	Возврат СтруктураОтвет;

КонецФункции

//	LNK 24.05.2023 14:04:56
Процедура ПроверитьДвиженияДляПодчинённыхДокументов(ЗаказПокупателя)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	НаборЗаписей = РегистрыНакопления.ЗаказыПокупателей.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииРозницаMagento", Истина);
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	ОбменДаннымиСервер.УстановитьВсехПолучателей(НаборЗаписей.ОбменДанными.Получатели, "ПоМагазину");

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Регистратор = &ЗаказПокупателя"
	);
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
//	Проверяем - есть ли движения у нашего заказа покупателя?
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда	//	заказ не сделал движений!
		
	//	.. получаем регистраторы, сделавшие движения по регистру.
		Запрос = Новый Запрос(ТекстЗапросаДвиженияПодчинённыхПоЗаказуПокупателя());
		Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда

			Выборка = РезультатЗапроса.Выбрать();

			Пока Выборка.Следующий() Цикл

				Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ЗакрытиеЗаказовПокупателей") Тогда

					//	в этом документе необходимо очистить его содержимое (ну, которое отновится к заказу)
						ОчиститьЗакрытиеЗаказовПокупателей(ЗаказПокупателя, Выборка.Регистратор);

				Иначе	ОчиститьНаборЗаписей(ЗаказПокупателя, Выборка.Регистратор, НаборЗаписей);

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 24.05.2023 14:48:40
Процедура ОчиститьЗакрытиеЗаказовПокупателей(ЗаказПокупателя, Регистратор)

	ДокументОбъект = Регистратор.ПолучитьОбъект();

	ДокументОбъект.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);
	ДокументОбъект.ДополнительныеСвойства.Вставить("РежимОчисткиЗакрытиеЗаказовПокупателей", Истина);
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);	//	LNK 01.12.2020 06:51:01
	ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииРозницаMagento", Истина);

	ДокументОбъект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	ОбменДаннымиСервер.УстановитьПолучателейМагазина(ДокументОбъект.ОбменДанными.Получатели, ДокументОбъект.Магазин);

	СтрокиДляУдаления = Новый Массив;

	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.Реестр Цикл

		Если СтрокаТабличнойЧасти.ЗаказПокупателя = ЗаказПокупателя Тогда

			СтрокиДляУдаления.Добавить(СтрокаТабличнойЧасти);

		КонецЕсли;

	КонецЦикла;

	Для каждого СтрокаТабличнойЧасти Из СтрокиДляУдаления Цикл

		ДокументОбъект.Реестр.Удалить(СтрокаТабличнойЧасти);

	КонецЦикла;

	Если ДокументОбъект.Проведен И НЕ ДокументОбъект.Реестр.Количество() = 0 Тогда

			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);

	Иначе	ДокументОбъект.Записать();

	КонецЕсли;

	Если ДокументОбъект.Реестр.Количество() = 0 Тогда

		ДокументОбъект.УстановитьПометкуУдаления(Истина);

	КонецЕсли;

КонецПроцедуры

Процедура ОчиститьНаборЗаписей(ЗаказПокупателя, Регистратор, НаборЗаписей)

	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписей.Прочитать();

	СтрокиДляУдаления = Новый Массив;

	Для каждого ЗаписьНабора Из НаборЗаписей Цикл

		Если ЗаписьНабора.Заказ = ЗаказПокупателя Тогда

			СтрокиДляУдаления.Добавить(ЗаписьНабора);

		КонецЕсли;

	КонецЦикла;

	Если НЕ СтрокиДляУдаления.Количество() = 0 Тогда

		Для каждого ЗаписьНабора Из СтрокиДляУдаления Цикл

			НаборЗаписей.Удалить(ЗаписьНабора);

		КонецЦикла;

		НаборЗаписей.Записать();

	КонецЕсли;

КонецПроцедуры

//	LNK 24.05.2023 14:15:35
Функция ТекстЗапросаДвиженияПодчинённыхПоЗаказуПокупателя()

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРегистра.Период КАК Период,
	|	ТаблицаРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Заказ = &ЗаказПокупателя
	|	И НЕ ТаблицаРегистра.Регистратор = &ЗаказПокупателя"
	;
	Возврат ТекстЗапроса;

КонецФункции


#Область ДляРаботыКоллЦентра

Функция ЯвляетсяСотрудникомКоллЦентра(СотрудникКакПользователь) Экспорт   
	
	СтруктураОтвета = Новый Структура("СотрудникКоллЦентра
										|	, ВыбранТекущийПользовательОтветственным
										|	, НераспределенныеЗаказы");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиКоллЦентра.Ссылка КАК Ссылка,
		|	СотрудникиКоллЦентра.Владелец КАК Владелец,
		|	СотрудникиКоллЦентра.ЗаказыПоУмолчанию КАК ЗаказыПоУмолчанию
		|ИЗ
		|	Справочник.СотрудникиКоллЦентра КАК СотрудникиКоллЦентра
		|ГДЕ
		|	СотрудникиКоллЦентра.Владелец = &Владелец
		|	И НЕ СотрудникиКоллЦентра.НеРаботает";
	
	Запрос.УстановитьПараметр("Владелец", СотрудникКакПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		
		СтруктураОтвета.СотрудникКоллЦентра = Справочники.СотрудникиКоллЦентра.ПустаяСсылка();
		СтруктураОтвета.ВыбранТекущийПользовательОтветственным = Ложь;
		
	Иначе 
		Выборка.Следующий();
		СтруктураОтвета.СотрудникКоллЦентра = Выборка.Ссылка;
		СтруктураОтвета.НераспределенныеЗаказы = Выборка.ЗаказыПоУмолчанию;
		СтруктураОтвета.ВыбранТекущийПользовательОтветственным = (Выборка.Владелец = ПараметрыСеанса.ТекущийПользователь);    
		
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции // ЯвляетсяСотрудникомКоллЦентра()

Функция ЯвляетсяСуперВайзеромКоллЦентра(СотрудникКакПользователь) Экспорт
	
	СотрудникКЦ = ЯвляетсяСотрудникомКоллЦентра(СотрудникКакПользователь).СотрудникКоллЦентра;
	
	Возврат СотрудникКЦ.РольСотрудника = Перечисления.РолиСотрудниковКоллЦентра.СуперВайзер;
	
КонецФункции 

Функция СотрудникРаботает(Сотрудник) Экспорт
	
	ДанныеОСотруднике = ДанныеОСотрудникеИзРегистра(Сотрудник, НачалоДня(ТекущаяДата()));
	
	Возврат ДанныеОСотруднике.НаРаботе;
	
КонецФункции // СотрудникРаботает()

Процедура СотрудникНаРаботе(Сотрудник, НаРаботе, ДатаЗаписи = Неопределено) Экспорт
	
	Если ДатаЗаписи = Неопределено Тогда 
		ДатаЗаписи = НачалоДня(ТекущаяДата());
	Иначе 
		ДатаЗаписи = НачалоДня(ДатаЗаписи);
	КонецЕсли;
	
	ДанныеОСотруднике = ДанныеОСотрудникеИзРегистра(Сотрудник, ДатаЗаписи);
	
	ДанныеОСотруднике.НаРаботе = НаРаботе;
	
	ЗаписьВРегистрКоллЦентра(ДанныеОСотруднике, Сотрудник, ДатаЗаписи); 

КонецПроцедуры

Процедура СотрудникНовыйЗаказ(Сотрудник, ДатаЗаписи = Неопределено) Экспорт
	
	Если ДатаЗаписи = Неопределено Тогда 
		ДатаЗаписи = НачалоДня(ТекущаяДата());
	Иначе 
		ДатаЗаписи = НачалоДня(ДатаЗаписи);
	КонецЕсли;
	
	ДанныеОСотруднике = ДанныеОСотрудникеИзРегистра(Сотрудник, ДатаЗаписи);
	
	ДанныеОСотруднике.НовыеЗаказы = ДанныеОСотруднике.НовыеЗаказы + 1;
	
	ЗаписьВРегистрКоллЦентра(ДанныеОСотруднике, Сотрудник, ДатаЗаписи);
	
КонецПроцедуры

Процедура СотрудникИзменениеОтветственного(СотрудникСтарый, СотрудникНовый, ДатаЗаписи) Экспорт 
	
	ДатаЗаписиВРегистр = НачалоДня(ДатаЗаписи);
	
	ДанныеОСотруднике = ДанныеОСотрудникеИзРегистра(СотрудникСтарый, ДатаЗаписиВРегистр);
	
	ДанныеОСотруднике.НовыеЗаказы = ДанныеОСотруднике.НовыеЗаказы - 1;
	
	ЗаписьВРегистрКоллЦентра(ДанныеОСотруднике, СотрудникСтарый, ДатаЗаписиВРегистр);
	
	ДанныеОСотруднике = ДанныеОСотрудникеИзРегистра(СотрудникНовый, ДатаЗаписиВРегистр);
	
	ДанныеОСотруднике.НовыеЗаказы = ДанныеОСотруднике.НовыеЗаказы + 1;
	
	ЗаписьВРегистрКоллЦентра(ДанныеОСотруднике, СотрудникНовый, ДатаЗаписиВРегистр);
	
КонецПроцедуры

Процедура СотрудникОбработанныйЗаказ(Сотрудник, ДатаЗаписи = Неопределено) Экспорт
	
	Если ДатаЗаписи = Неопределено Тогда 
		ДатаЗаписи = НачалоДня(ТекущаяДата());
	Иначе 
		ДатаЗаписи = НачалоДня(ДатаЗаписи);
	КонецЕсли;
	
	ДанныеОСотруднике = ДанныеОСотрудникеИзРегистра(Сотрудник, ДатаЗаписи);
	
	ДанныеОСотруднике.ОтработанныеЗаказы = ДанныеОСотруднике.ОтработанныеЗаказы + 1;
	
	ЗаписьВРегистрКоллЦентра(ДанныеОСотруднике, Сотрудник, ДатаЗаписи);
	
КонецПроцедуры

Процедура ЗаписьВРегистрКоллЦентра(СтруктураЗаписи, Сотрудник, ДатаЗаписи)
	ТекущийПривилегированныйРежим = ПривилегированныйРежим();
	
	УстановитьПривилегированныйРежим(Истина);
	Набор = РегистрыСведений.РаботаСотрудниковКоллЦентра.СоздатьНаборЗаписей();
	Набор.Отбор.Период.Установить(ДатаЗаписи);
	Набор.Отбор.Сотрудник.Установить(Сотрудник);
	
	Запись = Набор.Добавить();
	Запись.Период = ДатаЗаписи;
	Запись.Сотрудник = Сотрудник;
	Запись.НовыеЗаказы = СтруктураЗаписи.НовыеЗаказы;
	Запись.ОтработанныеЗаказы = СтруктураЗаписи.ОтработанныеЗаказы;
	Запись.НаРаботе = ?(СтруктураЗаписи.Приоритет = 1, Ложь, СтруктураЗаписи.НаРаботе);
	Набор.Записать(); 
	
	УстановитьПривилегированныйРежим(ТекущийПривилегированныйРежим);
	
КонецПроцедуры

Функция ДанныеОСотрудникеИзРегистра(Сотрудник, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаботаСотрудниковКоллЦентра.НовыеЗаказы КАК НовыеЗаказы,
		|	РаботаСотрудниковКоллЦентра.ОтработанныеЗаказы КАК ОтработанныеЗаказы,
		|	РаботаСотрудниковКоллЦентра.НаРаботе КАК НаРаботе,
		|	2 КАК Приоритет
		|ИЗ
		|	РегистрСведений.РаботаСотрудниковКоллЦентра КАК РаботаСотрудниковКоллЦентра
		|ГДЕ
		|	РаботаСотрудниковКоллЦентра.Период = &Период
		|	И РаботаСотрудниковКоллЦентра.Сотрудник = &Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	0,
		|	Истина,
		|	1
		|ИЗ
		|	Справочник.СотрудникиКоллЦентра КАК СотрудникиКоллЦентра
		|ГДЕ
		|	СотрудникиКоллЦентра.ЗаказыПоУмолчанию
		|	И СотрудникиКоллЦентра.Ссылка = &Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Период", НачалоДня(Период));
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() = 0 Тогда
		
		Результат = Новый Структура("НовыеЗаказы, ОтработанныеЗаказы, НаРаботе, Приоритет", 0, 0, Ложь, 0);
		
	Иначе
		
		Результат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТЗ[0]);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Ответственный за заказ.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЗаказПокупателя - объект
//  ПоУмолчанию - Булево - По умолчанию
//  ПериодДокумента - Неопределено - Период документа
//  Пользователь - Неопределено - Пользователь
// 
// Возвращаемое значение:
// 	Структура - структура с данными сотрудника и пользователя:
//   Сотрудник - СправочникСсылка.СотрудникиКоллЦентра - Сотрудник ответственный за заказ
//   Пользователь - СправочникСсылка.Пользователи - пользователь, который привязан к сотруднику
Функция ОтветственныйЗаЗаказ(ДокументОбъект, ПоУмолчанию = Истина, ПериодДокумента = Неопределено, Пользователь = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Сотрудник", Справочники.СотрудникиКоллЦентра.ПустаяСсылка());
	Результат.Вставить("Пользователь", Справочники.Пользователи.ПустаяСсылка());

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаСотрудников.ВерсияДанных,
		|	ТаблицаСотрудников.Владелец КАК Пользователь,
		|	ТаблицаСотрудников.ИмяПредопределенныхДанных,
		|	ТаблицаСотрудников.Наименование,
		|	ТаблицаСотрудников.ПометкаУдаления,
		|	ТаблицаСотрудников.Предопределенный,
		|	ТаблицаСотрудников.Ссылка,
		|	ТаблицаСотрудников.РольСотрудника,
		|	ТаблицаСотрудников.ЗаказыПоУмолчанию,
		|	ТаблицаСотрудников.НеРаботает
		|ПОМЕСТИТЬ ТаблицаСотрудников
		|ИЗ
		|	Справочник.СотрудникиКоллЦентра КАК ТаблицаСотрудников
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.ВерсияДанных,
		|	ТаблицаСотрудников.Владелец,
		|	ТаблицаСотрудников.ИмяПредопределенныхДанных,
		|	ТаблицаСотрудников.Наименование,
		|	ТаблицаСотрудников.ПометкаУдаления,
		|	ТаблицаСотрудников.Предопределенный,
		|	ТаблицаСотрудников.Ссылка,
		|	ТаблицаСотрудников.РольСотрудника,
		|	ТаблицаСотрудников.ЗаказыПоУмолчанию,
		|	ТаблицаСотрудников.НеРаботает
		|ИЗ
		|	Справочник.СотрудникиКоллЦентра КАК ТаблицаСотрудников
		|ГДЕ
		|	ТаблицаСотрудников.ЗаказыПоУмолчанию
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Ссылка КАК Сотрудник,
		|	СУММА(ВЫБОР
		|		КОГДА ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Новый)
		|		ИЛИ ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.ВРаботе)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК ВсеЗаказы,
		|	1 КАК ПоУмолчанию,
		|	ТаблицаСотрудников.ЗаказыПоУмолчанию КАК ЗаказыПоУмолчанию,
		|	ТаблицаСотрудников.Пользователь
		|ПОМЕСТИТЬ ВыбранныеСотрудники
		|ИЗ
		|	ТаблицаСотрудников КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботаСотрудниковКоллЦентра КАК РаботаСотрудниковКоллЦентра
		|		ПО (ТаблицаСотрудников.Ссылка = РаботаСотрудниковКоллЦентра.Сотрудник)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ПО (ЗаказПокупателя.Ответственный = ТаблицаСотрудников.Пользователь)
		|		И (ЗаказПокупателя.Дата >= &Дата)
		|ГДЕ
		|	НЕ ТаблицаСотрудников.НеРаботает
		|	И РаботаСотрудниковКоллЦентра.НаРаботе
		|	И РаботаСотрудниковКоллЦентра.Период = &ПериодРаботы
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаСотрудников.Ссылка,
		|	ТаблицаСотрудников.ЗаказыПоУмолчанию,
		|	ТаблицаСотрудников.Пользователь
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Ссылка КАК Ссылка,
		|	0 КАК Поле1,
		|	2 КАК Поле2,
		|	ТаблицаСотрудников.ЗаказыПоУмолчанию КАК ЗаказыПоУмолчанию,
		|	ТаблицаСотрудников.Пользователь
		|ИЗ
		|	ТаблицаСотрудников КАК ТаблицаСотрудников
		|ГДЕ
		|	НЕ ТаблицаСотрудников.НеРаботает
		|	И ТаблицаСотрудников.ЗаказыПоУмолчанию
		|	И &ПоУмолчанию
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Ссылка КАК Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателя.Ссылка) КАК Ссылка1,
		|	0 КАК Поле1,
		|	ТаблицаСотрудников.ЗаказыПоУмолчанию КАК ЗаказыПоУмолчанию,
		|	ТаблицаСотрудников.Пользователь
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСотрудников КАК ТаблицаСотрудников
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботаСотрудниковКоллЦентра КАК РаботаСотрудниковКоллЦентра
		|			ПО ТаблицаСотрудников.Ссылка = РаботаСотрудниковКоллЦентра.Сотрудник
		|		ПО ЗаказПокупателя.Ответственный = ТаблицаСотрудников.Пользователь
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ЗаказПокупателя.Дата, ДЕНЬ) >= &ПериодДокумента
		|	И НЕ ТаблицаСотрудников.НеРаботает
		|	И НЕ ТаблицаСотрудников.ЗаказыПоУмолчанию
		|	И РаботаСотрудниковКоллЦентра.Период = &ПериодРаботы
		|	И РаботаСотрудниковКоллЦентра.НаРаботе
		|	И ЗаказПокупателя.Контрагент = &Контрагент
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаСотрудников.Ссылка,
		|	ТаблицаСотрудников.ЗаказыПоУмолчанию,
		|	ТаблицаСотрудников.Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбранныеСотрудники.Сотрудник КАК Сотрудник,
		|	ВыбранныеСотрудники.ПоУмолчанию КАК ПоУмолчанию,
		|	ВыбранныеСотрудники.ВсеЗаказы КАК ВсеЗаказы,
		|	ВыбранныеСотрудники.ЗаказыПоУмолчанию КАК ЗаказыПоУмолчанию,
		|	ВыбранныеСотрудники.Пользователь
		|ИЗ
		|	ВыбранныеСотрудники КАК ВыбранныеСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ВыбранныеСотрудники.Пользователь = Пользователи.Ссылка
		|ГДЕ
		|	НЕ Пользователи.Ссылка = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПоУмолчанию,
		|	ВсеЗаказы";
	
	Если ПериодДокумента = Неопределено Тогда 
		Запрос.УстановитьПараметр("ПериодДокумента", НачалоДня(ТекущаяДатаСеанса())); 
	Иначе 
		Запрос.УстановитьПараметр("ПериодДокумента", НачалоДня(ПериодДокумента)); 
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПериодРаботы", НачалоДня(ТекущаяДатаСеанса())); 
	Запрос.УстановитьПараметр("ПоУмолчанию", ПоУмолчанию);
	Запрос.УстановитьПараметр("Контрагент", ДокументОбъект.Контрагент);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Дата", Дата(2023, 11, 12));
	Если (ДокументОбъект.ТипОплаты = Перечисления.ТипОплатыЗаказПокупателя.БРПостоплата
			Или ДокументОбъект.ТипОплаты = Перечисления.ТипОплатыЗаказПокупателя.БРПредоплата) Тогда
	
		Запрос.УстановитьПараметр("РольДляДокумента", Перечисления.РолиСотрудниковКоллЦентра.СотрудникЮрЛица);
		
	Иначе
		
		Запрос.УстановитьПараметр("РольДляДокумента", Перечисления.РолиСотрудниковКоллЦентра.Сотрудник);
		
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда

		Результат.Сотрудник = Выборка.Сотрудник;
		Результат.Пользователь = Выборка.Пользователь;

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОтветственныйЗаЗаказ()

Процедура ВыборСотрудникаКЦ(ДанныеВыбора, ВсеСотрудники) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиКоллЦентра.Владелец КАК Владелец,
		|	ЕСТЬNULL(РаботаСотрудниковКоллЦентра.НаРаботе, ЛОЖЬ) КАК НаРаботе
		|ПОМЕСТИТЬ СотрудникиКЦ
		|ИЗ
		|	Справочник.СотрудникиКоллЦентра КАК СотрудникиКоллЦентра
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботаСотрудниковКоллЦентра КАК РаботаСотрудниковКоллЦентра
		|		ПО (РаботаСотрудниковКоллЦентра.Сотрудник = СотрудникиКоллЦентра.Ссылка)
		|		И (РаботаСотрудниковКоллЦентра.Период = &Период)
		|ГДЕ
		|	НЕ СотрудникиКоллЦентра.НеРаботает
		|	И НЕ СотрудникиКоллЦентра.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиКЦ.Владелец КАК Ответственный,
		|	СотрудникиКЦ.НаРаботе КАК НаРаботе,
		|	СотрудникиКЦ.Владелец.Наименование КАК ОтветственныйНаименование
		|ИЗ
		|	СотрудникиКЦ КАК СотрудникиКЦ
		|ГДЕ
		|	(СотрудникиКЦ.НаРаботе
		|	ИЛИ &ВсеСотрудники)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтветственныйНаименование";
	
	Запрос.УстановитьПараметр("ВсеСотрудники", ВсеСотрудники);
	Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДата()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ответственный, Выборка.ОтветственныйНаименование);
	КонецЦикла; 

КонецПроцедуры

Функция ЗаполненностьДокументаДляЗапроса(АктивныйДокумент) Экспорт
	
	ЗапросДоступностиРазрешен = Новый Структура("СтрокиЗаполнены, ВсеОтменены", Ложь, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЗаказПокупателяТовары.Ссылка) КАК Строки,
	|	СУММА(ВЫБОР
	|		КОГДА ЗаказПокупателяТовары.Отменено
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|			КОГДА НЕ ЗаказПокупателяТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				ТОГДА ВЫБОР
	|					КОГДА ЗаказПокупателяТовары.Самовывоз
	|					И НЕ ЗаказПокупателяТовары.МагазинПолучатель = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|					ИЛИ НЕ ЗаказПокупателяТовары.Самовывоз
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ) КАК Склады,
	|	СУММА(ВЫБОР
	|		КОГДА ЗаказПокупателяТовары.Отменено
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СтрокаОтмена
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", АктивныйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ЗапросДоступностиРазрешен.СтрокиЗаполнены = (Выборка.Строки = Выборка.Склады);
		ЗапросДоступностиРазрешен.ВсеОтменены = (Выборка.Строки = Выборка.СтрокаОтмена);
		
	КонецЦикла;
	
	Возврат ЗапросДоступностиРазрешен;
	
КонецФункции

Функция ПолучитьСостаяниеЗаказаПокупателя(АктивныйДокумент) Экспорт
	
	Результат = Перечисления.СостоянияЗаказовПокупателей.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.КлючевыеАтрибутыЗаказовПокупателей.СрезПоследних КАК КлючевыеАтрибутыЗаказовПокупателейСрезПоследних
		|ГДЕ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ЗаказПокупателя = &ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", АктивныйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Результат = Выборка.Состояние;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьКлючСвязиЗапросаДоступности(ТабличнаяЧасть, Перезаполнить = Ложь) Экспорт

	Если Перезаполнить = Истина Тогда

		КлючСвязиЗапросаДоступности = 0;

		Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл

			КлючСвязиЗапросаДоступности = КлючСвязиЗапросаДоступности + 1;
			СтрокаТабличнойЧасти.КлючСвязиЗапросаДоступности = КлючСвязиЗапросаДоступности;

		КонецЦикла;

	Иначе

		ДанныеКлючей = ОбщегоНазначения.ПолучитьДанныеКлючейСвязи(ТабличнаяЧасть, "КлючСвязиЗапросаДоступности");

		Если НЕ ДанныеКлючей.ВсёХорошо Тогда

		//	Первым делом уничтожим возможные повторы в исходной таблице.

			Для каждого КлючСвязи Из ДанныеКлючей.Повторы Цикл

				СтрокиТабличнойЧасти = ТабличнаяЧасть.НайтиСтроки(Новый Структура("КлючСвязиЗапросаДоступности", КлючСвязи));

				Индекс = СтрокиТабличнойЧасти.Количество() - 1;

				Пока Индекс > 0 Цикл

					СтрокиТабличнойЧасти[Индекс].КлючСвязиЗапросаДоступности = 0;
					Индекс = Индекс - 1;

				КонецЦикла;

			КонецЦикла;

		//	Теперь устанавливаем нулевые позиции ключей с учётом пропущенных.
			КлючСвязиЗапросаДоступности = ДанныеКлючей.КлючМаксимальный;	//	дальше будем идти с пре-итерацией в 1

			Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл

				Если СтрокаТабличнойЧасти.КлючСвязиЗапросаДоступности <= 0 Тогда

					Если НЕ ДанныеКлючей.Пропуски.Количество() = 0 Тогда

						СтрокаТабличнойЧасти.КлючСвязиЗапросаДоступности = ДанныеКлючей.Пропуски[0];
						ДанныеКлючей.Пропуски.Удалить(0);

					Иначе

						КлючСвязиЗапросаДоступности = КлючСвязиЗапросаДоступности + 1;
						СтрокаТабличнойЧасти.КлючСвязиЗапросаДоступности = КлючСвязиЗапросаДоступности;

					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры 

Процедура АвтоматическоеИзменениеСтатусов() Экспорт

	Запрос = Новый Запрос;
	//0
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ЗаказПокупателя КАК ДокументЗаказа
		|ИЗ
		|	РегистрСведений.КлючевыеАтрибутыЗаказовПокупателей.СрезПоследних(, ЗаказПокупателя В
		|		(ВЫБРАТЬ
		|			ЗаказПокупателя.Ссылка
		|		ИЗ
		|			Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ГДЕ
		|			ЗаказПокупателя.Проведен
		|			И ЗаказПокупателя.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.Розница)
		|			И НЕ (ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
		|			ИЛИ ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Отменён)))) КАК
		|		КлючевыеАтрибутыЗаказовПокупателейСрезПоследних
		|ГДЕ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ГотовКПродаже)";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//1
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ЗаказПокупателя КАК ДокументЗаказа
		|ИЗ
		|	РегистрСведений.КлючевыеАтрибутыЗаказовПокупателей.СрезПоследних(, ЗаказПокупателя В
		|		(ВЫБРАТЬ
		|			ЗаказПокупателя.Ссылка
		|		ИЗ
		|			Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ГДЕ
		|			ЗаказПокупателя.Проведен
		|			И ЗаказПокупателя.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.Розница)
		|			И НЕ (ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
		|			ИЛИ ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Отменён)))) КАК
		|		КлючевыеАтрибутыЗаказовПокупателейСрезПоследних
		|ГДЕ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ГотовКПеремещению)";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//2
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ЗаказПокупателя КАК ДокументЗаказа
		|ИЗ
		|	РегистрСведений.КлючевыеАтрибутыЗаказовПокупателей.СрезПоследних(, ЗаказПокупателя В
		|		(ВЫБРАТЬ
		|			ЗаказПокупателя.Ссылка
		|		ИЗ
		|			Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ГДЕ
		|			ЗаказПокупателя.Проведен
		|			И ЗаказПокупателя.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.Розница)
		|			И НЕ (ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
		|			ИЛИ ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Отменён)))) КАК
		|		КлючевыеАтрибутыЗаказовПокупателейСрезПоследних
		|ГДЕ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ГотовКДоставке)";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//3
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗДТТовары.Ссылка КАК ДокументЗаказа,
		|	СостояниеСтрок.Отправлен КАК Отправлен,
		|	НЕ ЗДТТовары.Ссылка.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз) КАК СлужбаДоставки,
		|	ЗДТТовары.Ссылка.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.СлужбаДоставки) КАК
		|		КурьерскаяДоставка,
		|	ЗДТТовары.Ссылка.ОтправлятьВNavision = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросаДоступностиВNavision.ПустаяСсылка) КАК
		|		ОтправлятьВНАВ
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров.Товары КАК ЗДТТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСтрокЗаказаПокупателя КАК СостояниеСтрок
		|		ПО ЗДТТовары.Ссылка = СостояниеСтрок.ЗапросДоступностиТоваров
		|		И ЗДТТовары.КлючСвязи = СостояниеСтрок.КлючСвязи
		|ГДЕ
		|	ЗДТТовары.Ссылка.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ВыданДоставке)
		|	И ЗДТТовары.Ссылка.Проведен
		|ИТОГИ
		|ПО
		|	ДокументЗаказа";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//4
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаЗДТовары.Ссылка КАК ДокументЗаказа,
		|	СостояниеСтрокЗП.Получен КАК Получен
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров.Товары КАК ТаблицаЗДТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСтрокЗаказаПокупателя КАК СостояниеСтрокЗП
		|		ПО ТаблицаЗДТовары.Ссылка = СостояниеСтрокЗП.ЗапросДоступностиТоваров
		|		И ТаблицаЗДТовары.КлючСвязи = СостояниеСтрокЗП.КлючСвязи
		|ГДЕ
		|	ТаблицаЗДТовары.Ссылка.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отправлен)
		|	И ТаблицаЗДТовары.Ссылка.Проведен
		|	И ТаблицаЗДТовары.Ссылка.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз)
		|ИТОГИ
		|ПО
		|	ДокументЗаказа";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//5
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	АртибутыЗаказа.ЗаказПокупателя КАК ДокументЗаказа,
		|	ЗДТ.Ссылка КАК ЗапросДоступности
		|ИЗ
		|	РегистрСведений.КлючевыеАтрибутыЗаказовПокупателей.СрезПоследних(, ЗаказПокупателя В
		|		(ВЫБРАТЬ
		|			ЗаказПокупателя.Ссылка
		|		ИЗ
		|			Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ГДЕ
		|			ЗаказПокупателя.Проведен
		|			И ЗаказПокупателя.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.Розница)
		|			И НЕ (ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
		|			ИЛИ ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Отменён)))) КАК АртибутыЗаказа
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров КАК ЗДТ
		|		ПО АртибутыЗаказа.ЗаказПокупателя = ЗДТ.ДокументОснование
		|		И НЕ (ЗДТ.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отменён)
		|		ИЛИ ЗДТ.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Удалён)
		|		ИЛИ ЗДТ.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтменуОтправитель)
		|		ИЛИ ЗДТ.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтменуПолучатель))
		|ГДЕ
		|	АртибутыЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ГотовКЗакрытию)
		|ИТОГИ
		|ПО
		|	ДокументЗаказа";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//6
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗапросДоступностиТоваров.Ссылка КАК ДокументЗапроса,
		|	ЗаказПокупателя.СтатусОплаты КАК СтатусОплаты,
		|	ЗаказПокупателя.ТипОплаты КАК ТипОплаты,
		|	ЗаказПокупателя.Ссылка КАК ДокументЗаказа
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров КАК ЗапросДоступностиТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ПО ЗапросДоступностиТоваров.ДокументОснование = ЗаказПокупателя.Ссылка
		|ГДЕ
		|	ЗапросДоступностиТоваров.Проведен
		|	И ЗапросДоступностиТоваров.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз)
		|	И (ЗапросДоступностиТоваров.МагазинОтправитель = ЗапросДоступностиТоваров.МагазинПолучатель
		|	И ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Согласован)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Получен))
		|	И ЗаказПокупателя.Проведен";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//7
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДокументЗапроса.Ссылка КАК ДокументЗапроса,
		|	ДокументЗапроса.ДокументОснование КАК ДокументЗаказа
		|ИЗ
		|	РегистрСведений.СтатусыЭН КАК СтатусыТТН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяНакладная КАК ДокументЭН
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров КАК ДокументЗапроса
		|			ПО ДокументЭН.ДокументОснование = ДокументЗапроса.Ссылка
		|			И (ДокументЗапроса.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отправлен))
		|		ПО СтатусыТТН.ДокументРегистратор = ДокументЭН.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КодыСтатусовТТН КАК КодыСтатусовТТН
		|		ПО СтатусыТТН.СтатусЭН = КодыСтатусовТТН.Ссылка
		|		И (КодыСтатусовТТН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Получена)
		|		ИЛИ КодыСтатусовТТН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Отказ))
		|ГДЕ
		|	ДокументЗапроса.Проведен
		|	И ДокументЗапроса.ДокументОснование.Проведен
		|	И НЕ ДокументЗапроса.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз)";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//8
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаЗапрос.Ссылка КАК ДокументЗапроса,
		|	ВЫБОР
		|		КОГДА ТаблицаСклад.НазначениеСклада ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ВЫБОР
		|			КОГДА УПСрезПоследних.СкладЗакупки = ТаблицаЗапрос.МагазинОтправитель
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ТаблицаСклад.НазначениеСклада = ЗНАЧЕНИЕ(Перечисление.НазначенияСкладов.УправляющаяСистема)
		|		КОНЕЦ
		|	КОНЕЦ КАК ЦентральныйСклад,
		|	УПСрезПоследних.ИнтернетМагазин = ТаблицаЗапрос.МагазинПолучатель КАК ИнтернетМагазин,
		|	ТаблицаЗапрос.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.СлужбаДоставки) КАК СлужбаДоставки
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ТаблицаЗаказ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров КАК ТаблицаЗапрос
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаСклад
		|			ПО (ТаблицаЗапрос.МагазинОтправитель = ТаблицаСклад.Ссылка)
		|		ПО (ТаблицаЗаказ.Ссылка = ТаблицаЗапрос.ДокументОснование)
		|		И (ТаблицаЗапрос.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Согласован))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних КАК УПСрезПоследних
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаЗаказ.Проведен
		|	И ТаблицаЗапрос.Проведен
		|	И НЕ ТаблицаЗапрос.МагазинОтправитель = ТаблицаЗапрос.МагазинПолучатель
		|	И ВЫБОР
		|		КОГДА ТаблицаЗаказ.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипОплатыЗаказПокупателя.Наличные)
		|		ИЛИ ТаблицаЗаказ.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипОплатыЗаказПокупателя.БРПостоплата)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ТаблицаЗаказ.СтатусОплаты = ЗНАЧЕНИЕ(Перечисление.СтатусОплаты.Оплачен)
		|	КОНЕЦ";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//9
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаказПокупателя.Ссылка КАК ДокументЗаказа
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Доставка)
		|	И ЗаказПокупателя.Проведен";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//10
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗапросДоступностиТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров КАК ЗапросДоступностиТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ПО ЗапросДоступностиТоваров.ДокументОснование = ЗаказПокупателя.Ссылка
		|		И (ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт))
		|		И (НЕ (ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Закрыт)
		|		ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Удалён)
		|		ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отменён)))
		|ГДЕ
		|	ЗаказПокупателя.Проведен
		|	И ЗапросДоступностиТоваров.Проведен";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//13
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДокуменЗаказ.Ссылка КАК ДокументЗаказа
		|ПОМЕСТИТЬ ДокументыЗаказов
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ДокуменЗаказ
		|ГДЕ
		|	(ДокуменЗаказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Продажа)
		|	ИЛИ ДокуменЗаказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Доставка)
		|	ИЛИ ДокуменЗаказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Перемещение))
		|	И ДокуменЗаказ.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаказыТовары.КлючСвязиЗапросаДоступности КАК КлючСвязиЗапросаДоступности,
		|	ДокументыЗаказов.ДокументЗаказа КАК ДокументЗаказа,
		|	ДокументЗапросаТовары.Ссылка КАК ЗапросДоступностиЗаказа,
		|	ЗаказыТовары.КлючСвязи КАК КлючСвязи,
		|	ВЫБОР
		|		КОГДА ВозвратТовары.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьВозврат
		|ПОМЕСТИТЬ ПроданныеСтроки
		|ИЗ
		|	ДокументыЗаказов КАК ДокументыЗаказов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказыТовары
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ЧекТовары
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ВозвратТовары
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних КАК ТаблицаУП
		|					ПО ТаблицаУП.ИнтернетМагазин = ВозвратТовары.Ссылка.Магазин
		|				ПО ВозвратТовары.Ссылка.ЧекККМПродажа = ЧекТовары.Ссылка
		|				И ВозвратТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
		|				И ВозвратТовары.Ссылка.Проведен
		|				И ВозвратТовары.КлючСвязи = ЧекТовары.КлючСвязи
		|			ПО ЗаказыТовары.КлючСвязиЗапросаДоступности = ЧекТовары.КлючСвязи
		|			И ЗаказыТовары.Ссылка = ЧекТовары.Ссылка.ЗаказПокупателя
		|			И (ЧекТовары.Ссылка.Проведен)
		|			И (ЧекТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа))
		|			И (ЧекТовары.Количество = ЗаказыТовары.Количество)
		|			И (ЧекТовары.Номенклатура = ЗаказыТовары.Номенклатура)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров.Товары КАК ДокументЗапросаТовары
		|			ПО ЗаказыТовары.Ссылка = ДокументЗапросаТовары.Ссылка.ДокументОснование
		|			И ЗаказыТовары.КлючСвязиЗапросаДоступности = ДокументЗапросаТовары.КлючСвязи
		|			И НЕ (ДокументЗапросаТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён)
		|			ИЛИ ДокументЗапросаТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён))
		|		ПО ДокументыЗаказов.ДокументЗаказа = ЗаказыТовары.Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗаказыТовары.КлючСвязиЗапросаДоступности,
		|	ДокументыЗаказов.ДокументЗаказа,
		|	ДокументЗапросаТовары.Ссылка,
		|	ЗаказыТовары.КлючСвязи,
		|	ВЫБОР
		|		КОГДА ВозвратТовары.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|ИЗ
		|	ДокументыЗаказов КАК ДокументыЗаказов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказыТовары
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ЧекТовары
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ВозвратТовары
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних КАК ТаблицаУП
		|					ПО ТаблицаУП.ИнтернетМагазин = ВозвратТовары.Ссылка.Магазин
		|				ПО ВозвратТовары.Ссылка.ЧекККМПродажа = ЧекТовары.Ссылка
		|				И ВозвратТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
		|				И ВозвратТовары.Ссылка.Проведен
		|				И ВозвратТовары.КлючСвязи = ЧекТовары.КлючСвязи
		|			ПО ЗаказыТовары.КлючСвязи = ЧекТовары.КлючСвязи
		|			И ЗаказыТовары.Ссылка = ЧекТовары.Ссылка.ЗаказПокупателя
		|			И (ЧекТовары.Ссылка.Проведен)
		|			И (ЧекТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа))
		|			И (ЧекТовары.Количество = ЗаказыТовары.Количество)
		|			И (ЧекТовары.Номенклатура = ЗаказыТовары.Номенклатура)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров.Товары КАК ДокументЗапросаТовары
		|			ПО ЗаказыТовары.Ссылка = ДокументЗапросаТовары.Ссылка.ДокументОснование
		|			И ЗаказыТовары.КлючСвязиЗапросаДоступности = ДокументЗапросаТовары.КлючСвязи
		|			И НЕ (ДокументЗапросаТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён)
		|			ИЛИ ДокументЗапросаТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён))
		|		ПО ДокументыЗаказов.ДокументЗаказа = ЗаказыТовары.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПроданныеСтроки.КлючСвязиЗапросаДоступности КАК КлючСвязиЗапросаДоступности,
		|	ПроданныеСтроки.ДокументЗаказа КАК ДокументЗаказа,
		|	ПроданныеСтроки.ЗапросДоступностиЗаказа КАК ЗапросДоступностиЗаказа,
		|	СостояниеСтрок.Продано КАК Продано,
		|	ПроданныеСтроки.ЕстьВозврат КАК ЕстьВозврат
		|ИЗ
		|	ПроданныеСтроки КАК ПроданныеСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСтрокЗаказаПокупателя КАК СостояниеСтрок
		|		ПО (ПроданныеСтроки.КлючСвязиЗапросаДоступности = СостояниеСтрок.КлючСвязи)
		|		И (ПроданныеСтроки.ДокументЗаказа = СостояниеСтрок.ЗаказПокупателя)
		|		И (ПроданныеСтроки.ЗапросДоступностиЗаказа = СостояниеСтрок.ЗапросДоступностиТоваров)
		|ГДЕ
		|	(СостояниеСтрок.Продано
		|	И ПроданныеСтроки.ЕстьВозврат
		|	ИЛИ НЕ СостояниеСтрок.Продано
		|	И НЕ ПроданныеСтроки.ЕстьВозврат)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПроданныеСтроки.КлючСвязиЗапросаДоступности,
		|	ПроданныеСтроки.ДокументЗаказа,
		|	ПроданныеСтроки.ЗапросДоступностиЗаказа,
		|	СостояниеСтрок.Продано,
		|	ПроданныеСтроки.ЕстьВозврат
		|ИЗ
		|	ПроданныеСтроки КАК ПроданныеСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСтрокЗаказаПокупателя КАК СостояниеСтрок
		|		ПО (ПроданныеСтроки.КлючСвязи = СостояниеСтрок.КлючСвязиЗаказа)
		|		И (ПроданныеСтроки.ДокументЗаказа = СостояниеСтрок.ЗаказПокупателя)
		|		И (ПроданныеСтроки.ЗапросДоступностиЗаказа = СостояниеСтрок.ЗапросДоступностиТоваров)
		|ГДЕ
		|	(СостояниеСтрок.Продано
		|	И ПроданныеСтроки.ЕстьВозврат
		|	ИЛИ НЕ СостояниеСтрок.Продано
		|	И НЕ ПроданныеСтроки.ЕстьВозврат)";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//14
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗДТТовары.Ссылка КАК ДокументЗапроса,
		|	СостояниеСтрокЗП.ЗаказПокупателя КАК ДокументЗаказа,
		|	ВЫБОР
		|		КОГДА ПеремещениеТоваровТовары.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПеремещениеЕсть,
		|	ВЫБОР
		|		КОГДА ТаблицаСклад.НазначениеСклада ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ТаблицаСклад.НазначениеСклада = ЗНАЧЕНИЕ(Перечисление.НазначенияСкладов.УправляющаяСистема)
		|	КОНЕЦ КАК ЦентральныйСклад,
		|	ЗДТТовары.Ссылка.ОтправлятьВNavision = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросаДоступностиВNavision.ПередатьВNavision) КАК
		|		ПереданВНавижн,
		|	ЗапросДоступностиТоваров.МагазинПолучатель = УПСрезПоследних.ИнтернетМагазин КАК ИнтернетМагазин,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаказа.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЮрЛицо
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров.Товары КАК ЗДТТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСтрокЗаказаПокупателя КАК СостояниеСтрокЗП
		|		ПО ЗДТТовары.Ссылка = СостояниеСтрокЗП.ЗапросДоступностиТоваров
		|		И ЗДТТовары.КлючСвязи = СостояниеСтрокЗП.КлючСвязи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|		ПО ЗДТТовары.Ссылка = ПеремещениеТоваровТовары.Ссылка.ДокументОснование
		|		И ПеремещениеТоваровТовары.Номенклатура = ЗДТТовары.Номенклатура
		|		И НЕ ПеремещениеТоваровТовары.Ссылка.ПометкаУдаления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаСклад
		|		ПО ЗапросДоступностиТоваров.МагазинОтправитель = ТаблицаСклад.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних КАК УПСрезПоследних
		|		ПО ИСТИНА
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ТаблицаЗаказа
		|		ПО ТаблицаЗаказа.Ссылка = ЗДТТовары.Ссылка.ДокументОснование
		|ГДЕ
		|	(ЗДТТовары.Ссылка.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Выдан)
		|	ИЛИ НЕ ЗДТТовары.Ссылка.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз)
		|	И ЗДТТовары.Ссылка.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Получен))
		|	И ЗДТТовары.Ссылка.Проведен
		|ИТОГИ
		|ПО
		|	ДокументЗапроса,
		|	ДокументЗаказа";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//15
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗапросДоступностиТоваров.Ссылка КАК ДокументЗапроса,
		|	ВЫБОР
		|		КОГДА ТаблицаСклад.НазначениеСклада ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ТаблицаСклад.НазначениеСклада = ЗНАЧЕНИЕ(Перечисление.НазначенияСкладов.УправляющаяСистема)
		|	КОНЕЦ КАК ЦентральныйСклад,
		|	ЗапросДоступностиТоваров.ДокументОснование КАК ДокументЗаказа,
		|	ЗапросДоступностиТоваров.МагазинПолучатель = УчетнаяПолитикаСрезПоследних.ИнтернетМагазин КАК ИнтернетМагазин
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров КАК ЗапросДоступностиТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяНакладная КАК ЭлектроннаяНакладная
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЭН.СрезПоследних КАК СтатусыЭНСрезПоследних
		|			ПО ЭлектроннаяНакладная.Ссылка = СтатусыЭНСрезПоследних.ДокументРегистратор
		|		ПО ЗапросДоступностиТоваров.Ссылка = ЭлектроннаяНакладная.ДокументОснование
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаСклад
		|		ПО ЗапросДоступностиТоваров.МагазинОтправитель = ТаблицаСклад.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних КАК УчетнаяПолитикаСрезПоследних
		|		ПО ИСТИНА
		|ГДЕ
		|	ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ВыданДоставке)
		|	И (СтатусыЭНСрезПоследних.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.ВДороге)
		|	ИЛИ СтатусыЭНСрезПоследних.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Получена)
		|	ИЛИ СтатусыЭНСрезПоследних.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Отказ))
		|	И ЗапросДоступностиТоваров.Проведен
		|	И ЗапросДоступностиТоваров.ДокументОснование.Проведен";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//16
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗапросДоступностиТоваров.Ссылка КАК ДокументЗапроса
		|ИЗ
		|	РегистрСведений.СтатусыЭН.СрезПоследних КАК СтатусыЭНСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяНакладная КАК ЭлектроннаяНакладная
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров КАК ЗапросДоступностиТоваров
		|			ПО ЭлектроннаяНакладная.ДокументОснование = ЗапросДоступностиТоваров.Ссылка
		|		ПО СтатусыЭНСрезПоследних.ДокументРегистратор = ЭлектроннаяНакладная.Ссылка
		|ГДЕ
		|	(СтатусыЭНСрезПоследних.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.ВДороге)
		|	ИЛИ СтатусыЭНСрезПоследних.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Доставлена)
		|	ИЛИ СтатусыЭНСрезПоследних.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Получена)
		|	ИЛИ СтатусыЭНСрезПоследних.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Отказ))
		|	И ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.КОтправке)
		|	И НЕ ЗапросДоступностиТоваров.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз)
		|	И ЗапросДоступностиТоваров.Проведен";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//17
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДокументЗапросаТовары.Ссылка КАК ДокументЗапроса,
		|	ЕСТЬNULL(СостояниеСтрокЗаказа.Продано, ЛОЖЬ) КАК Продано,
		|	ЕСТЬNULL(СостояниеСтрокЗаказа.СогласованоВNavision, ЛОЖЬ) КАК СогласованоВNavision,
		|	ДокументЗапросаТовары.Ссылка.ТипДоставки КАК ТипДоставки,
		|	ДокументЗапросаТовары.Ссылка.ТипОплаты КАК ТипОплаты
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров.Товары КАК ДокументЗапросаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСтрокЗаказаПокупателя КАК СостояниеСтрокЗаказа
		|		ПО ДокументЗапросаТовары.Ссылка = СостояниеСтрокЗаказа.ЗапросДоступностиТоваров
		|		И ДокументЗапросаТовары.КлючСвязи = СостояниеСтрокЗаказа.КлючСвязи
		|ГДЕ
		|	(ДокументЗапросаТовары.Ссылка.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ЧекВКЦ)
		|	ИЛИ
		|		ДокументЗапросаТовары.Ссылка.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПродажаНаКассе))
		|	И ДокументЗапросаТовары.Ссылка.Проведен
		|	И НЕ (ДокументЗапросаТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён)
		|	ИЛИ ДокументЗапросаТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён))
		|ИТОГИ
		|ПО
		|	ДокументЗапроса";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//19
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка,
		|	СУММА(ВЫБОР
		|		КОГДА ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Удалён)
		|		ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отменён)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК Удаленные,
		|	КОЛИЧЕСТВО(ЗапросДоступностиТоваров.Ссылка) КАК ВсегоЗапросов,
		|	СУММА(ВЫБОР
		|		КОГДА ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Закрыт)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК Закрытые
		|ПОМЕСТИТЬ ЗакрытыеЗапросы
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров КАК ЗапросДоступностиТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ПО ЗапросДоступностиТоваров.ДокументОснование = ЗаказПокупателя.Ссылка
		|ГДЕ
		|	НЕ (ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
		|	ИЛИ ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Отменён))
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателя.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗакрытыеЗапросы.Ссылка КАК ДокументЗаказа,
		|	ВЫБОР
		|		КОГДА ЗакрытыеЗапросы.ВсегоЗапросов - (ЗакрытыеЗапросы.Удаленные + ЗакрытыеЗапросы.Закрытые) = 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЗакрытьЗаказ
		|ИЗ
		|	ЗакрытыеЗапросы КАК ЗакрытыеЗапросы
		|ГДЕ
		|	ЗакрытыеЗапросы.Закрытые > 0";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//20
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ
		|	ТаблицаОрдеры.ДокументОснование КАК ДокументОснование,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА ТаблицаОрдеры.Проведен
		|		И ТаблицаУчтено.Объект ЕСТЬ NULL
		|			ТОГДА 2
		|		КОГДА ТаблицаУчтено.Объект ЕСТЬ НЕ NULL
		|		И НЕ ТаблицаУчтено.УчтеноNavision
		|			ТОГДА 3
		|		КОГДА ТаблицаУчтено.УчтеноNavision
		|			ТОГДА 4
		|		ИНАЧЕ 1
		|	КОНЕЦ) КАК НомерСтатуса,
		|	ТаблицаОрдеры.ДокументЗапроса КАК ДокументЗапроса
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаОрдеры.ДокументОснование КАК ДокументОснование,
		|		ТаблицаОрдеры.Ссылка КАК Ордер,
		|		ТаблицаОрдеры.Проведен КАК Проведен,
		|		ТаблицаОрдеры.Магазин КАК Магазин,
		|		ТаблицаДоступности.Ссылка КАК ДокументЗапроса
		|	ИЗ
		|		Документ.ПриходныйОрдерНаТовары КАК ТаблицаОрдеры
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ТаблицаПеремещения
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров КАК ТаблицаДоступности
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючевыеАтрибутыЗапросовДоступности.СрезПоследних КАК ТаблицаАтрибутов
		|					ПО ТаблицаДоступности.Ссылка = ТаблицаАтрибутов.ЗапросДоступности
		|				ПО ТаблицаПеремещения.ДокументОснование = ТаблицаДоступности.Ссылка
		|			ПО ТаблицаОрдеры.ДокументОснование = ТаблицаПеремещения.Ссылка
		|	ГДЕ
		|		НЕ ТаблицаОрдеры.ПометкаУдаления
		|		И
		|			ТаблицаАтрибутов.ОправленоВNavision = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросаДоступностиВNavision.ПроверкаВозможностиЗакрытияВNavision)
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ТаблицаОрдеры.ДокументОснование,
		|		ТаблицаОрдеры.Ссылка,
		|		ТаблицаОрдеры.Проведен,
		|		ТаблицаОрдеры.Магазин,
		|		ТаблицаДоступности.Ссылка
		|	ИЗ
		|		Документ.РасходныйОрдерНаТовары КАК ТаблицаОрдеры
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ТаблицаПеремещения
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров КАК ТаблицаДоступности
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючевыеАтрибутыЗапросовДоступности.СрезПоследних КАК ТаблицаАтрибутов
		|					ПО ТаблицаДоступности.Ссылка = ТаблицаАтрибутов.ЗапросДоступности
		|				ПО ТаблицаПеремещения.ДокументОснование = ТаблицаДоступности.Ссылка
		|			ПО ТаблицаОрдеры.ДокументОснование = ТаблицаПеремещения.Ссылка
		|	ГДЕ
		|		НЕ ТаблицаОрдеры.ПометкаУдаления
		|		И
		|			ТаблицаАтрибутов.ОправленоВNavision = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросаДоступностиВNavision.ПроверкаВозможностиЗакрытияВNavision)) КАК
		|		ТаблицаОрдеры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаУчтено
		|		ПО (ТаблицаУчтено.Объект ССЫЛКА Документ.ПриходныйОрдерНаТовары
		|		ИЛИ ТаблицаУчтено.Объект ССЫЛКА Документ.РасходныйОрдерНаТовары)
		|		И ТаблицаОрдеры.Ордер = ТаблицаУчтено.Объект
		|		И ТаблицаОрдеры.Магазин = ТаблицаУчтено.Магазин
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОрдеры.ДокументОснование,
		|	ТаблицаОрдеры.ДокументЗапроса
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	4,
		|	ТаблицаДоступности.Ссылка
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров КАК ТаблицаДоступности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючевыеАтрибутыЗапросовДоступности.СрезПоследних КАК ТаблицаАтрибутов
		|		ПО (ТаблицаДоступности.Ссылка = ТаблицаАтрибутов.ЗапросДоступности)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО (ТаблицаДоступности.МагазинОтправитель = Склады.Ссылка)
		|ГДЕ
		|	ТаблицаАтрибутов.ОправленоВNavision = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросаДоступностиВNavision.ПроверкаВозможностиЗакрытияВNavision)
		|	И Склады.НазначениеСклада = ЗНАЧЕНИЕ(Перечисление.НазначенияСкладов.УправляющаяСистема)
		|ИТОГИ
		|ПО
		|	ДокументЗапроса";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//22
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ
		|	ОплатаЗаказаКлиента.ЗаказКлиента КАК ЗаказКлиента,
		|	СУММА(ВЫБОР
		|		КОГДА ОплатаЗаказаКлиента.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыОплатыЗаказаПокупателя.Оплата)
		|			ТОГДА ОплатаЗаказаКлиента.Сумма
		|		ИНАЧЕ -ОплатаЗаказаКлиента.Сумма
		|	КОНЕЦ) КАК Сумма,
		|	ЗаказПокупателя.СуммаДокумента + ЗаказПокупателя.СуммаДоставки КАК СуммаДокумента
		|ПОМЕСТИТЬ ТаблицаОплат
		|ИЗ
		|	РегистрСведений.ОплатаЗаказаКлиента КАК ОплатаЗаказаКлиента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ПО (ОплатаЗаказаКлиента.ЗаказКлиента = ЗаказПокупателя.Ссылка)
		|ГДЕ
		|	НЕ ОплатаЗаказаКлиента.Отменён
		|	И ОплатаЗаказаКлиента.СтатусОплаты = ЗНАЧЕНИЕ(Перечисление.СтатусОплаты.Оплачен)
		|	И ЗаказПокупателя.СтатусОплаты = ЗНАЧЕНИЕ(Перечисление.СтатусОплаты.НеОплачен)
		|	И ЗаказПокупателя.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.Розница)
		|СГРУППИРОВАТЬ ПО
		|	ОплатаЗаказаКлиента.ЗаказКлиента,
		|	ЗаказПокупателя.СуммаДокумента + ЗаказПокупателя.СуммаДоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОплатаЗаказаКлиента.НомерОплаты КАК НомерОплаты,
		|	ОплатаЗаказаКлиента.ТипОплаты КАК ТипОплаты,
		|	ОплатаЗаказаКлиента.Сумма КАК Сумма,
		|	ОплатаЗаказаКлиента.СтатусОплаты КАК СтатусОплаты,
		|	ОплатаЗаказаКлиента.Отменён КАК Отменён,
		|	ОплатаЗаказаКлиента.ВидОплаты КАК ВидОплаты,
		|	ОплатаЗаказаКлиента.ДатаОплаты КАК ДатаОплаты,
		|	ОплатаЗаказаКлиента.ДатаСоздания КАК ДатаСоздания,
		|	ОплатаЗаказаКлиента.ИДОплаты КАК ИДОплаты,
		|	ТаблицаОплат.ЗаказКлиента КАК ДокументЗаказа
		|ИЗ
		|	ТаблицаОплат КАК ТаблицаОплат
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаЗаказаКлиента КАК ОплатаЗаказаКлиента
		|		ПО ТаблицаОплат.ЗаказКлиента = ОплатаЗаказаКлиента.ЗаказКлиента
		|ГДЕ
		|	ТаблицаОплат.Сумма = ТаблицаОплат.СуммаДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОплатаЗаказаКлиента.НомерОплаты
		|ИТОГИ
		|ПО
		|	ДокументЗаказа";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//23
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗДТТовары.Ссылка КАК ДокументЗаказа,
		|	СостояниеСтрокЗП.Отправлен КАК Отправлен
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров.Товары КАК ЗДТТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСтрокЗаказаПокупателя КАК СостояниеСтрокЗП
		|		ПО ЗДТТовары.Ссылка = СостояниеСтрокЗП.ЗапросДоступностиТоваров
		|		И ЗДТТовары.КлючСвязи = СостояниеСтрокЗП.КлючСвязи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ЗДТТовары.Ссылка.МагазинОтправитель = Склады.Ссылка,
		|	РегистрСведений.УчетнаяПолитика.СрезПоследних КАК ТаблицаПолитики
		|ГДЕ
		|	Склады.НазначениеСклада = ЗНАЧЕНИЕ(Перечисление.НазначенияСкладов.УправляющаяСистема)
		|	И НЕ Склады.Ссылка = ТаблицаПолитики.СкладЗакупки
		|	И НЕ ЗДТТовары.Ссылка.МагазинПолучатель = ТаблицаПолитики.ИнтернетМагазин
		|	И ЗДТТовары.Ссылка.Проведен
		|	И (ЗДТТовары.Ссылка.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Сборка)
		|	ИЛИ ЗДТТовары.Ссылка.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.КОтправке))
		|ИТОГИ
		|ПО
		|	ДокументЗаказа";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//24
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭНТаблица.Ссылка КАК Ссылка,
		|	ЭНТаблица.Номер КАК Номер,
		|	ЭНТаблица.ВнешняяСсылка КАК ВнешняяСсылка,
		|	СтатусыЭНТаблица.СтатусЭН КАК СтатусЭН
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров КАК ЗДТаблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяНакладная КАК ЭНТаблица
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЭН.СрезПоследних КАК СтатусыЭНТаблица
		|			ПО (ЭНТаблица.Ссылка = СтатусыЭНТаблица.ДокументРегистратор)
		|		ПО (ЗДТаблица.Ссылка = ЭНТаблица.ДокументОснование)
		|ГДЕ
		|	(ЗДТаблица.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтменуОтправитель)
		|	ИЛИ
		|		ЗДТаблица.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтменуПолучатель)
		|	ИЛИ ЗДТаблица.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Удалён)
		|	ИЛИ ЗДТаблица.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отменён))
		|	И НЕ СтатусыЭНТаблица.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Отменена)";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//25
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.ДокументЗаказа КАК ДокументЗаказа,
		|	ВложенныйЗапрос.ЕстьКасса КАК ЕстьКасса,
		|	ВложенныйЗапрос.ЕстьЗакрытые КАК ЕстьЗакрытые,
		|	ВложенныйЗапрос.ВсеЗапросы КАК ВсеЗапросы
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ЗаказПокупателя.Ссылка КАК ДокументЗаказа,
		|		СУММА(ВЫБОР
		|			КОГДА ЗДТаблица.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПродажаНаКассе)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЕстьКасса,
		|		СУММА(ВЫБОР
		|			КОГДА ЗДТаблица.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Закрыт)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЕстьЗакрытые,
		|		КОЛИЧЕСТВО(ЗаказПокупателя.Ссылка) КАК ВсеЗапросы
		|	ИЗ
		|		Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров КАК ЗДТаблица
		|			ПО (ЗДТаблица.ДокументОснование = ЗаказПокупателя.Ссылка)
		|	ГДЕ
		|		НЕ
		|			(ЗДТаблица.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтменуПолучатель)
		|		ИЛИ ЗДТаблица.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Удалён)
		|		ИЛИ ЗДТаблица.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отменён))
		|		И НЕ (ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
		|		ИЛИ ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Отменён))
		|		И НЕ ЗаказПокупателя.ПометкаУдаления
		|		И НЕ ЗДТаблица.ПометкаУдаления
		|		И ЗДТаблица.ОператорДоставки = ЗНАЧЕНИЕ(Перечисление.ОператорыДоставки.ВнутренняяЛогистика)
		|		И ЗДТаблица.Дата >= ДАТАВРЕМЯ(2024, 1, 22)
		|		И ЗаказПокупателя.ДатаРезервированияЗаказа = ДАТАВРЕМЯ(1, 1, 1)
		|	СГРУППИРОВАТЬ ПО
		|		ЗаказПокупателя.Ссылка) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.ЕстьКасса = ВложенныйЗапрос.ВсеЗапросы";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//26
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ
		|	СостояниеЗаказаПокупателя.ЗаказПокупателя КАК ЗаказПокупателя
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ТаблицаЗаказа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеЗаказаПокупателя КАК СостояниеЗаказаПокупателя
		|		ПО СостояниеЗаказаПокупателя.ЗаказПокупателя = ТаблицаЗаказа.Ссылка
		|ГДЕ
		|	НЕ ТаблицаЗаказа.Статус = СостояниеЗаказаПокупателя.Статус
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаЗаказа.Дата";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//27
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВозвратТовары.Ссылка КАК ДокументВозврата,
		|	НЕ ЧекВовзратТовары.Ссылка ЕСТЬ NULL КАК ВозвратныйЧек
		|ИЗ
		|	Документ.ВозвратИнтернетЗаказа.Товары КАК ВозвратТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказТовары
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ЧекВовзратТовары
		|			ПО (ЗаказТовары.Ссылка = ЧекВовзратТовары.Ссылка.ЗаказПокупателя)
		|			И (ЗаказТовары.КлючСвязи = ЧекВовзратТовары.КлючСвязи)
		|			И (ЧекВовзратТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат))
		|		ПО (ЗаказТовары.Ссылка = ВозвратТовары.Ссылка.ДокументОснование)
		|		И (ВозвратТовары.КлючСвязиЗапросаДоступности = ЗаказТовары.КлючСвязиЗапросаДоступности)
		|		И (ВозвратТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВозвратаЗаказаПокупателя.Чек))
		|ИТОГИ
		|ПО
		|	ДокументВозврата";
	
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//28
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВозвратИнтернетЗаказа.Ссылка КАК ДокументВозврата
		|ИЗ
		|	Документ.ВозвратИнтернетЗаказа КАК ВозвратИнтернетЗаказа
		|ГДЕ
		|	ВозвратИнтернетЗаказа.СтатусОплаты = ЗНАЧЕНИЕ(Перечисление.СтатусОплаты.Оплачен)
		|	И ВозвратИнтернетЗаказа.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВозвратаЗаказаПокупателя.ВозвратОплаты)
		|	И НЕ ВозвратИнтернетЗаказа.ПометкаУдаления";
	
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//29
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВозвратИнтернетЗаказа.Ссылка КАК ДокументВозврата
		|ИЗ
		|	Документ.ВозвратИнтернетЗаказа КАК ВозвратИнтернетЗаказа
		|ГДЕ
		|	ВозвратИнтернетЗаказа.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВозвратаЗаказаПокупателя.СогласованиеNavision)
		|	И НЕ ВозвратИнтернетЗаказа.ПометкаУдаления
		|	И ВозвратИнтернетЗаказа.Оформлен";
	
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//30
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаВозврата.Ссылка КАК ДокументВозврата,
		|	ВЫБОР
		|		КОГДА ТаблицаВозврата.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВозвратаЗаказаПокупателя.Новый)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВозвратаЗаказаПокупателя.Отправлен)
		|		ИНАЧЕ ВЫБОР
		|			КОГДА ТаблицаВозврата.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВозвратаЗаказаПокупателя.Отправлен)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВозвратаЗаказаПокупателя.Доставлен)
		|			ИНАЧЕ ВЫБОР
		|				КОГДА ТаблицаВозврата.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВозвратаЗаказаПокупателя.Доставлен)
		|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВозвратаЗаказаПокупателя.Чек)
		|			КОНЕЦ
		|		КОНЕЦ
		|	КОНЕЦ КАК СтатусВозврата
		|ИЗ
		|	РегистрСведений.СтатусыЭН.СрезПоследних КАК СтатусыЭНСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяНакладная КАК ТаблицаЭН
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратИнтернетЗаказа КАК ТаблицаВозврата
		|			ПО ТаблицаЭН.ДокументОснование = ТаблицаВозврата.Ссылка
		|		ПО СтатусыЭНСрезПоследних.ДокументРегистратор = ТаблицаЭН.Ссылка
		|ГДЕ
		|	(СтатусыЭНСрезПоследних.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Получена)
		|	И (ТаблицаВозврата.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВозвратаЗаказаПокупателя.Новый)
		|	ИЛИ ТаблицаВозврата.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВозвратаЗаказаПокупателя.Отправлен)
		|	ИЛИ ТаблицаВозврата.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВозвратаЗаказаПокупателя.Доставлен))
		|	И (ТаблицаВозврата.ТипВозврата = ЗНАЧЕНИЕ(Перечисление.ТипыВозвратаИнтернетЗаказа.ВозвратПочтой)))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаВозврата.Ссылка,
		|	ВЫБОР
		|		КОГДА ТаблицаВозврата.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВозвратаЗаказаПокупателя.Новый)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВозвратаЗаказаПокупателя.Отправлен)
		|		ИНАЧЕ ВЫБОР
		|			КОГДА ТаблицаВозврата.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВозвратаЗаказаПокупателя.Отправлен)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВозвратаЗаказаПокупателя.Доставлен)
		|			ИНАЧЕ ВЫБОР
		|				КОГДА ТаблицаВозврата.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВозвратаЗаказаПокупателя.Доставлен)
		|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВозвратаЗаказаПокупателя.Чек)
		|			КОНЕЦ
		|		КОНЕЦ
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.СтатусыЭН.СрезПоследних КАК СтатусыЭНСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяНакладная КАК ТаблицаЭН
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратИнтернетЗаказа КАК ТаблицаВозврата
		|			ПО ТаблицаЭН.Ссылка = ТаблицаВозврата.ЭлектроннаяНакладная
		|		ПО СтатусыЭНСрезПоследних.ДокументРегистратор = ТаблицаЭН.Ссылка
		|ГДЕ
		|	(СтатусыЭНСрезПоследних.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Получена)
		|	И (ТаблицаВозврата.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВозвратаЗаказаПокупателя.Новый)
		|	ИЛИ ТаблицаВозврата.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВозвратаЗаказаПокупателя.Отправлен)
		|	ИЛИ ТаблицаВозврата.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВозвратаЗаказаПокупателя.Доставлен))
		|	И ТаблицаВозврата.ТипВозврата = ЗНАЧЕНИЕ(Перечисление.ТипыВозвратаИнтернетЗаказа.АвтоВозврат))";
	
	Запрос.Текст = Запрос.Текст + 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	//31
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаЗДТовары.Ссылка КАК ДокументЗаказа,
		|	СостояниеСтрокЗП.Получен КАК Получен
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров.Товары КАК ТаблицаЗДТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСтрокЗаказаПокупателя КАК СостояниеСтрокЗП
		|		ПО ТаблицаЗДТовары.Ссылка = СостояниеСтрокЗП.ЗапросДоступностиТоваров
		|		И ТаблицаЗДТовары.КлючСвязи = СостояниеСтрокЗП.КлючСвязи
		|ГДЕ
		|	ТаблицаЗДТовары.Ссылка.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отправлен)
		|	И ТаблицаЗДТовары.Ссылка.Проведен
		|	И ТаблицаЗДТовары.Ссылка.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.СлужбаДоставки)
		|ИТОГИ
		|ПО
		|	ДокументЗаказа";


	РезультатыЗапроса = Запрос.ВыполнитьПакет();

#Область ПереводЗаказаВПродажу_0

	Выборка = РезультатыЗапроса[0].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
		
			ДокументЗаказа = Выборка.ДокументЗаказа.ПолучитьОбъект();
			ДокументЗаказа.Статус = Перечисления.СтатусыЗаказовПокупателей.Продажа;
			ДокументЗаказа.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводЗаказаВПродажу", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.ЗаказПокупателя
				, Выборка.ДокументЗаказа
				, ТекстОшибки
			);
			
		КонецПопытки;

	КонецЦикла;

#КонецОбласти

#Область ПереводЗаказаВПеремещение_1

	Выборка = РезультатыЗапроса[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
		
			ДокументЗаказа = Выборка.ДокументЗаказа.ПолучитьОбъект();
			ДокументЗаказа.Статус = Перечисления.СтатусыЗаказовПокупателей.Перемещение;
			ДокументЗаказа.Записать(РежимЗаписиДокумента.Проведение);

		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводЗаказаВПеремещение", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.ЗаказПокупателя
				, Выборка.ДокументЗаказа
				, ТекстОшибки
			);
			
		КонецПопытки;

	КонецЦикла;

#КонецОбласти

#Область ПереводЗаказаВДоставку_2

	Выборка = РезультатыЗапроса[2].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
		
			ДокументЗаказа = Выборка.ДокументЗаказа.ПолучитьОбъект();
			ДокументЗаказа.Статус = Перечисления.СтатусыЗаказовПокупателей.Доставка;
			ДокументЗаказа.Записать(РежимЗаписиДокумента.Проведение);

		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводЗаказаВДоставку", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.ЗаказПокупателя
				, Выборка.ДокументЗаказа
				, ТекстОшибки
			);
			
		КонецПопытки;

	КонецЦикла;

#КонецОбласти

#Область ПереводЗаказаОтправлен_3
	// Изменение статуса запроса доступности при отправке на магазин 

	ВыборкаДокументЗаказа = РезультатыЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументЗаказа.Следующий() Цикл

		Выборка = ВыборкаДокументЗаказа.Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			
			Выборка.Следующий();
			
			Если Выборка.Отправлен Тогда
		
				Попытка

					ДокументОбъект = Выборка.ДокументЗаказа.ПолучитьОбъект();
	
					Если Выборка.КурьерскаяДоставка И Выборка.ОтправлятьВНАВ Тогда
							
						ДокументОбъект.ДополнительныеСвойства.Вставить("ОтправлятьВNavision");
							
					Иначе
						
						ДокументОбъект.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Отправлен;
						Если Выборка.СлужбаДоставки Тогда
							ДокументОбъект.ДополнительныеСвойства.Вставить("ПроверкаВозможностиЗакрытияВNavision");
						КонецЕсли;
					
					КонецЕсли;
					
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
				Исключение
		
					ТекстОшибки = ОписаниеОшибки();
					ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводЗаказаОтправлен", УровеньЖурналаРегистрации.Ошибка
						, Метаданные.Документы.ЗапросДоступностиТоваров
						, Выборка.ДокументЗаказа
						, ТекстОшибки
					);
					
				КонецПопытки;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;  

#КонецОбласти	

#Область ПереводЗаказаПолучен_4

	// Изменение статуса запроса доступности при получении магазином

	ВыборкаДокументЗаказа = РезультатыЗапроса[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументЗаказа.Следующий() Цикл

		Выборка = ВыборкаДокументЗаказа.Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			
			Выборка.Следующий();
			
			Если Выборка.Получен Тогда
		
				Попытка
		
					ДокументОбъект = Выборка.ДокументЗаказа.ПолучитьОбъект();
					ДокументОбъект.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ТоварВМагазине;
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
				Исключение
		
					ТекстОшибки = ОписаниеОшибки();
					ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводЗаказаПолучен", УровеньЖурналаРегистрации.Ошибка
						, Метаданные.Документы.ЗапросДоступностиТоваров
						, Выборка.ДокументЗаказа
						, ТекстОшибки
					);
					
				КонецПопытки;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;  

#КонецОбласти

#Область ПереводЗаказаЗакрыт_5

	ВыборкаДокументЗаказа = РезультатыЗапроса[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументЗаказа.Следующий() Цикл
		
		Попытка
		
			ДокументЗаказа = ВыборкаДокументЗаказа.ДокументЗаказа.ПолучитьОбъект();
			ДокументЗаказа.Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт;
			ДокументЗаказа.Записать(РежимЗаписиДокумента.Проведение);
	
			Выборка = ВыборкаДокументЗаказа.Выбрать();
		
			Пока Выборка.Следующий() Цикл
			
				Попытка
			
					ДокументЗапросДоступности = Выборка.ЗапросДоступности.ПолучитьОбъект();
					ДокументЗапросДоступности.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Закрыт;
					ДокументЗапросДоступности.Записать(РежимЗаписиДокумента.Проведение);
		
				Исключение
		
					ТекстОшибки = ОписаниеОшибки();
					ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводЗаказаЗакрыт", УровеньЖурналаРегистрации.Ошибка
						, Метаданные.Документы.ЗапросДоступностиТоваров
						, Выборка.ЗапросДоступности
						, ТекстОшибки
					);
					
				КонецПопытки;

			КонецЦикла;
		
		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводЗаказаЗакрыт", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.ЗаказПокупателя
				, ВыборкаДокументЗаказа.ДокументЗаказа
				, ТекстОшибки
			);
			
		КонецПопытки;

	КонецЦикла;

#КонецОбласти

#Область ПереводЗапросаДоступностиДляЧастичнойПродажи_6

	Выборка = РезультатыЗапроса[6].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПустаяСсылка();

		Если Выборка.ТипОплаты = Перечисления.ТипОплатыЗаказПокупателя.Наличные Тогда
			СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПродажаНаКассе;
		ИначеЕсли Выборка.СтатусОплаты = Перечисления.СтатусОплаты.Оплачен Тогда 
			СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПродажаБезнал;
		КонецЕсли;
		
		Если Не СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПустаяСсылка() Тогда
		
			Попытка
			
				ДокументЗапроса = Выборка.ДокументЗапроса.ПолучитьОбъект();
				ДокументЗапроса.СтатусЗапроса = СтатусЗапроса;
				ДокументЗапроса.Записать(РежимЗаписиДокумента.Проведение);
				
				ТекстКомментария = "ТипОплаты " + Выборка.ТипОплаты + ". СтатусОплаты " + Выборка.СтатусОплаты;
				РегистрыСведений.КомментарийИнтернетЗаказа.ЗаписьКомментария(Выборка.ДокументЗаказа,
												Справочники.Пользователи.ПустаяСсылка(),
												ТекстКомментария);
				
			
			Исключение
	
				ТекстОшибки = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводЗапросаДоступностиДляЧастичнойПродажи", УровеньЖурналаРегистрации.Ошибка
					, Метаданные.Документы.ЗапросДоступностиТоваров
					, Выборка.ДокументЗапроса
					, ТекстОшибки
				);
				
			КонецПопытки;

		КонецЕсли;
		
	КонецЦикла;

#КонецОбласти

#Область ПереводЗапросаДоступностиДоставлено_7

	Выборка = РезультатыЗапроса[7].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
				
			Для Каждого СтрокаТЧ Из Выборка.ДокументЗапроса.Товары Цикл

				Если СтрокаТЧ.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Согласован Тогда

					СтрокаЗаписиВРегистр = РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ИнициализацияСтрокиЗаписи();
					СтрокаЗаписиВРегистр.ЗаказПокупателя = Выборка.ДокументЗаказа;
					СтрокаЗаписиВРегистр.ЗапросДоступностиТоваров = Выборка.ДокументЗапроса;
					СтрокаЗаписиВРегистр.КлючСвязи = СтрокаТЧ.КлючСвязи;
					СтрокаЗаписиВРегистр.Доставлено = Истина;
					
					РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ЗаписьВРегистрСтроки(СтрокаЗаписиВРегистр);
					
				КонецЕсли;
			КонецЦикла;
	
			ДокументЗапроса = Выборка.ДокументЗапроса.ПолучитьОбъект();
			ДокументЗапроса.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Получен;
			ДокументЗапроса.Записать(РежимЗаписиДокумента.Проведение);
				
		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводЗапросаДоступностиДоставлено", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.ЗапросДоступностиТоваров
				, Выборка.ДокументЗапроса
				, ТекстОшибки
			);
			
		КонецПопытки;

	КонецЦикла;

#КонецОбласти

#Область ПереводЗапросаДоступностиСборка_8

	Выборка = РезультатыЗапроса[8].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ИнтернетМагазин
				И Выборка.ЦентральныйСклад
				И Не Выборка.СлужбаДоставки Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Попытка
				
			ДокументЗапроса = Выборка.ДокументЗапроса.ПолучитьОбъект();
			Если Выборка.ЦентральныйСклад Тогда
				ДокументЗапроса.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.КОтправке;
			Иначе
				ДокументЗапроса.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Сборка;
			КонецЕсли;
			ДокументЗапроса.Записать(РежимЗаписиДокумента.Проведение);
				
		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводЗапросаДоступностиСборка", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.ЗапросДоступностиТоваров
				, Выборка.ДокументЗапроса
				, ТекстОшибки
			);
			
		КонецПопытки;

	КонецЦикла;

#КонецОбласти

#Область ПереводЗаказКЗакрытиюПриДоставке_9

	Выборка = РезультатыЗапроса[9].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
				
			НовоеСостояние = Документы.ЗаказПокупателя.ПолучитьСостояниеЗаказаПокупателя(Выборка.ДокументЗаказа);
			
			Если НовоеСостояние.Состояние = Перечисления.СостоянияЗаказовПокупателей.ГотовКЗакрытию Тогда
				
				ДокументЗаказа = Выборка.ДокументЗаказа.ПолучитьОбъект();
	
				Для Каждого СтрокаОплаты Из ДокументЗаказа.ОплатаЗаказа Цикл
					
					Если СтрокаОплаты.ТипОплаты = Перечисления.ТипОплатыЗаказПокупателя.Наличные
							И СтрокаОплаты.ВидОплаты = Перечисления.ВидыОплатыЗаказаПокупателя.Оплата
							И Не СтрокаОплаты.Отменён Тогда
						СтрокаОплаты.СтатусОплаты = Перечисления.СтатусОплаты.Оплачен;
					КонецЕсли;
					
				КонецЦикла;
				
				ДокументЗаказа.Записать(РежимЗаписиДокумента.Проведение);
				
			КонецЕсли;
				
		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводЗаказКЗакрытиюПриДоставке", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.ЗаказПокупателя
				, Выборка.ДокументЗаказа
				, ТекстОшибки
			);
			
		КонецПопытки;

	КонецЦикла;

#КонецОбласти

#Область ПереводВсехЗапросовВЗакрыт_10

	Выборка = РезультатыЗапроса[10].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Попытка
					
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Закрыт;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводВсехЗапросовВЗакрыт", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.ЗапросДоступностиТоваров
				, Выборка.Ссылка
				, ТекстОшибки
			);
			
		КонецПопытки;

	КонецЦикла;  

#КонецОбласти	

#Область ПроверкаПродажиПоЧеку_13
	
	ТаблицаЗаказов = Новый ТаблицаЗначений();
	ТаблицаЗаказов.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));

	Выборка = РезультатыЗапроса[13].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
						
			СтрокаЗаписиВРегистр = РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ИнициализацияСтрокиЗаписи();
			СтрокаЗаписиВРегистр.ЗаказПокупателя = Выборка.ДокументЗаказа;
			СтрокаЗаписиВРегистр.ЗапросДоступностиТоваров = Выборка.ЗапросДоступностиЗаказа;
			СтрокаЗаписиВРегистр.КлючСвязи = Выборка.КлючСвязиЗапросаДоступности;
			СтрокаЗаписиВРегистр.Продано = Не Выборка.ЕстьВозврат;
			Если Выборка.ЗапросДоступностиЗаказа.ТипДоставки = Перечисления.ТипДоставкиЗаказПокупателя.Самовывоз Тогда
				СтрокаЗаписиВРегистр.Доставлено = Истина;
			КонецЕсли;
	
			РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ЗаписьВРегистрСтроки(СтрокаЗаписиВРегистр);
			
			СтрокаЗаказов = ТаблицаЗаказов.Добавить();
			СтрокаЗаказов.Заказ = Выборка.ДокументЗаказа;
					
		Исключение

			ТекстОшибки = Выборка.ДокументЗаказа + " " + Выборка.ЗапросДоступностиЗаказа + " " + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("АвтоСтатусы.ПроверкаПродажиПоЧеку", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.РегистрыСведений.СостояниеСтрокЗаказаПокупателя
				, 
				, ТекстОшибки
			);
			
		КонецПопытки;

	КонецЦикла;

	ТаблицаЗаказов.Свернуть("Заказ");
	
	Для Каждого СтрокаЗаказов Из ТаблицаЗаказов Цикл
		
		Попытка
						
			ДокументЗаказа = СтрокаЗаказов.Заказ.ПолучитьОбъект();
			ДокументЗаказа.Записать(РежимЗаписиДокумента.Проведение);
					
		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("АвтоСтатусы.ПроверкаПродажиПоЧеку", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.ЗаказПокупателя
				, СтрокаЗаказов.Заказ
				, ТекстОшибки
			);
			
		КонецПопытки;

	КонецЦикла;

#КонецОбласти	

#Область ПереводЗапросаДоступностиПолученоПриБезнальнойВыдаче_14

	ВыборкаДокументЗапроса = РезультатыЗапроса[14].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументЗапроса.Следующий() Цикл
	
		ВыборкаДокументЗаказа = ВыборкаДокументЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВыборкаДокументЗаказа.Следующий() Цикл	
			
			Выборка = ВыборкаДокументЗаказа.Выбрать();
	
			Если Выборка.Количество() = 1 Тогда
			
				Пока Выборка.Следующий() Цикл
					
					Если Выборка.ПеремещениеЕсть Или Выборка.ЦентральныйСклад Тогда

						Для Каждого СтрокаТЧ Из Выборка.ДокументЗапроса.Товары Цикл
		
							Попытка
						
								Если Выборка.ЦентральныйСклад И Выборка.ИнтернетМагазин Тогда
									
									Если СтрокаТЧ.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Отменён
											Или СтрокаТЧ.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Удалён Тогда
										
										Продолжить;
										
									КонецЕсли;
								
								ИначеЕсли Не СтрокаТЧ.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Согласован Тогда
									
									Продолжить;
										
								КонецЕсли;
								
								СтрокаЗаписиВРегистр = РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ИнициализацияСтрокиЗаписи();
								СтрокаЗаписиВРегистр.ЗаказПокупателя = Выборка.ДокументЗаказа;
								СтрокаЗаписиВРегистр.ЗапросДоступностиТоваров = Выборка.ДокументЗапроса;
								СтрокаЗаписиВРегистр.КлючСвязи = СтрокаТЧ.КлючСвязи;
								СтрокаЗаписиВРегистр.Получен = Истина;
								
								РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ЗаписьВРегистрСтроки(СтрокаЗаписиВРегистр);
					
							Исключение
					
								ТекстОшибки = Выборка.ДокументЗаказа + " " + Выборка.ДокументЗапроса + " " + ОписаниеОшибки();
								ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводЗапросаДоступностиПолученоПриБезнальнойВыдаче", УровеньЖурналаРегистрации.Ошибка
									, Метаданные.РегистрыСведений.СостояниеСтрокЗаказаПокупателя
									, 
									, ТекстОшибки
								);
								
							КонецПопытки;

						КонецЦикла;
		
						Попытка
						
							ДокументЗапроса = Выборка.ДокументЗапроса.ПолучитьОбъект();
							Если Выборка.ПереданВНавижн Тогда
								//СЮП 12.02.2024 11.15.15 
								//https://awdev.atlassian.net/browse/RETAIL1C-628
								Если Выборка.ЮрЛицо Тогда
									Для Каждого СтрокаТЧ Из Выборка.ДокументЗапроса.Товары Цикл
										
										Попытка
	
											Если СтрокаТЧ.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Отменён
													Или СтрокаТЧ.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Удалён Тогда
												
												Продолжить;
												
											КонецЕсли;
											СтрокаЗаписиВРегистр = РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ИнициализацияСтрокиЗаписи();
											СтрокаЗаписиВРегистр.ЗаказПокупателя = Выборка.ДокументЗаказа;
											СтрокаЗаписиВРегистр.ЗапросДоступностиТоваров = Выборка.ДокументЗапроса;
											СтрокаЗаписиВРегистр.КлючСвязи = СтрокаТЧ.КлючСвязи;
											СтрокаЗаписиВРегистр.Продано = Истина;
											
											РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ЗаписьВРегистрСтроки(СтрокаЗаписиВРегистр);
								
										Исключение
								
											ТекстОшибки = Выборка.ДокументЗаказа + " " + Выборка.ДокументЗапроса + " " + ОписаниеОшибки();
											ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводЗапросаДоступностиПолученоПриБезнальнойВыдаче", УровеньЖурналаРегистрации.Ошибка
												, Метаданные.РегистрыСведений.СостояниеСтрокЗаказаПокупателя
												, 
												, ТекстОшибки
											);
											
										КонецПопытки;
									КонецЦикла;
								КонецЕсли;
								ДокументЗапроса.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ЧекВКЦ;
							Иначе	
								ДокументЗапроса.ДополнительныеСвойства.Вставить("ОтправлятьВNavision");
							КонецЕсли;
							ДокументЗапроса.Записать(РежимЗаписиДокумента.Проведение);
					
						Исключение
				
							ТекстОшибки = ОписаниеОшибки();
							ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводЗапросаДоступностиПолученоПриБезнальнойВыдаче", УровеньЖурналаРегистрации.Ошибка
								, Метаданные.Документы.ЗапросДоступностиТоваров
								, Выборка.ДокументЗапроса
								, ТекстОшибки
							);
							
						КонецПопытки;

					КонецЕсли;

				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

#КонецОбласти

#Область ПереводЗапросаДоступностиОтправленногоСлужбойДоставки_15

	Выборка = РезультатыЗапроса[15].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Для Каждого СтрокаТЧ Из Выборка.ДокументЗапроса.Товары Цикл
		
			Попытка
				
				Если Выборка.ЦентральныйСклад И Выборка.ИнтернетМагазин Тогда
					
					Если СтрокаТЧ.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Отменён
							Или СтрокаТЧ.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Удалён Тогда
						
						Продолжить;
						
					КонецЕсли;
				
				ИначеЕсли Не СтрокаТЧ.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Согласован Тогда
					
					Продолжить;
						
				КонецЕсли;
				
				СтрокаЗаписиВРегистр = РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ИнициализацияСтрокиЗаписи();
				СтрокаЗаписиВРегистр.ЗаказПокупателя = Выборка.ДокументЗаказа;
				СтрокаЗаписиВРегистр.ЗапросДоступностиТоваров = Выборка.ДокументЗапроса;
				СтрокаЗаписиВРегистр.КлючСвязи = СтрокаТЧ.КлючСвязи;
				СтрокаЗаписиВРегистр.Отправлен = Истина;
				СтрокаЗаписиВРегистр.Согласовано = Истина;
				
				РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ЗаписьВРегистрСтроки(СтрокаЗаписиВРегистр);
					
			Исключение
	
				ТекстОшибки = Выборка.ДокументЗаказа + " " + Выборка.ДокументЗапроса + " " + ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводЗапросаДоступностиОтправленногоСлужбойДоставки", УровеньЖурналаРегистрации.Ошибка
					, Метаданные.РегистрыСведений.СостояниеСтрокЗаказаПокупателя
					, 
					, ТекстОшибки
				);
				
			КонецПопытки;

		КонецЦикла;

	КонецЦикла;

#КонецОбласти

#Область ПереводЗапросаДоступностиОтправленаСЦентральногоСкладаСлужбойДоставки_16

	Выборка = РезультатыЗапроса[16].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
						
			ДокументОбъект = Выборка.ДокументЗапроса.ПолучитьОбъект();
			ДокументОбъект.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ВыданДоставке;
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтправлятьВNavision");
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					
		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводЗапросаДоступностиОтправленаСЦентральногоСкладаСлужбойДоставки", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.ЗапросДоступностиТоваров
				, Выборка.ДокументЗапроса
				, ТекстОшибки
			);
			
		КонецПопытки;

	КонецЦикла;

#КонецОбласти

#Область ПереводЗапросаДоступностиВЗакрыт_17

	ВыборкаДокументЗапроса = РезультатыЗапроса[17].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументЗапроса.Следующий() Цикл
		
		Выборка = ВыборкаДокументЗапроса.Выбрать();
	
		Если Выборка.Количество() = 1 Тогда
		
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Продано И Выборка.СогласованоВNavision Тогда
		
					Попытка
						
						ДокументЗапроса = Выборка.ДокументЗапроса.ПолучитьОбъект();
						ДокументЗапроса.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Закрыт;
						ДокументЗапроса.Записать(РежимЗаписиДокумента.Проведение);
					
					Исключение
			
						ТекстОшибки = ОписаниеОшибки();
						ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводЗапросаДоступностиВЗакрыт", УровеньЖурналаРегистрации.Ошибка
							, Метаданные.Документы.ЗапросДоступностиТоваров
							, Выборка.ДокументЗапроса
							, ТекстОшибки
						);
						
					КонецПопытки;
					
				ИначеЕсли Выборка.ТипДоставки = Перечисления.ТипДоставкиЗаказПокупателя.Самовывоз
						И Выборка.ТипОплаты = Перечисления.ТипОплатыЗаказПокупателя.Наличные
						И Не Выборка.СогласованоВNavision Тогда 
					
					ЗаписьВРегистр = РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ИнициализацияСтрок();
					ЗаписьВРегистр.ДокументДляЗаписи = Выборка.ДокументЗапроса.Ссылка;
					ЗаписьВРегистр.СогласованоВNavision = Истина;
					ЗаписьВРегистр.Товары = Выборка.ДокументЗапроса.ПолучитьОбъект().Товары;
					РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ЗаписьВРегистр(ЗаписьВРегистр);

				КонецЕсли;

			КонецЦикла;
		
		КонецЕсли;

	КонецЦикла;

#КонецОбласти

#Область ПереводЗаказКЗакрытиюПриЗакрытыхЗапросахДоступности_19

	Выборка = РезультатыЗапроса[19].Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЗакрытьЗаказ Тогда
		
			Попытка
						
				ДокументЗаказа = Выборка.ДокументЗаказа.ПолучитьОбъект();
				ДокументЗаказа.Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт;
				ДокументЗаказа.Записать(РежимЗаписиДокумента.Проведение);
					
			Исключение
	
				ТекстОшибки = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводЗаказКЗакрытиюПриЗакрытыхЗапросахДоступности", УровеньЖурналаРегистрации.Ошибка
					, Метаданные.Документы.ЗаказПокупателя
					, Выборка.ДокументЗаказа
					, ТекстОшибки
				);
				
			КонецПопытки;

		КонецЕсли;

	КонецЦикла;

#КонецОбласти

#Область ПереводЗапросаДляЗакрытияВNavision_20

	ВыборкаДокументЗапроса = РезультатыЗапроса[20].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументЗапроса.Следующий() Цикл

		ВыборкаДетальныеЗаписи = ВыборкаДокументЗапроса.Выбрать();
		
		МожноЗакрывать = Истина;
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если Не ВыборкаДетальныеЗаписи.НомерСтатуса = 4 Тогда
				
				МожноЗакрывать = Ложь;
				
			КонецЕсли;

		КонецЦикла;
		
		Если МожноЗакрывать Тогда
	
			СтруктураАтрибутов = РегистрыСведений.КлючевыеАтрибутыЗапросовДоступности.ИнициализацияСтруктурыЗаписиРегистра(ВыборкаДокументЗапроса.ДокументЗапроса);
			СтруктураАтрибутов.ОправленоВNavision = Перечисления.СтатусыЗапросаДоступностиВNavision.ГотовКЗакрытиюВNavision;
			РегистрыСведений.КлючевыеАтрибутыЗапросовДоступности.ЗаписьКлючевыхАтребутовЗапросаДоступности(СтруктураАтрибутов);
			ПланыОбмена.ЗарегистрироватьИзменения(ВнешниеИсточникиПовтИсп.СписокУзловNavision(), ВыборкаДокументЗапроса.ДокументЗапроса);
		КонецЕсли;

	КонецЦикла;

#КонецОбласти

#Область ПереводЗаказаВОплачен_22
	// Изменение статуса запроса доступности при отправке на магазин 

	ВыборкаДокументЗаказа = РезультатыЗапроса[22].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаДокументЗаказа.Следующий() Цикл
		
		Попытка
						
			ДокументОбъект = ВыборкаДокументЗаказа.ДокументЗаказа.ПолучитьОбъект();
			ДокументОбъект.ОплатаЗаказа.Очистить();
	
			Выборка = ВыборкаДокументЗаказа.Выбрать();
	
			Пока Выборка.Следующий() Цикл
	
				НоваяСтрока = ДокументОбъект.ОплатаЗаказа.Добавить();
	
				НоваяСтрока.ВидОплаты = Выборка.ВидОплаты;
				НоваяСтрока.ИДОплаты = Выборка.ИДОплаты;
				НоваяСтрока.НомерОплаты = Выборка.НомерОплаты;
				НоваяСтрока.Отменён = Выборка.Отменён;
				НоваяСтрока.СтатусОплаты = Выборка.СтатусОплаты;
				НоваяСтрока.Сумма = Выборка.Сумма;
				НоваяСтрока.ТипОплаты = Выборка.ТипОплаты;
			
			КонецЦикла;
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводЗаказаВОплачен", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.ЗаказПокупателя
				, ВыборкаДокументЗаказа.ДокументЗаказа
				, ТекстОшибки
			);
			
		КонецПопытки;

	КонецЦикла;  

#КонецОбласти	

#Область ПереводЗаказаОтправленДляЦеннтральногоСклада_23

	// Изменение статуса запроса доступности при получении магазином

	ВыборкаДокументЗаказа = РезультатыЗапроса[23].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументЗаказа.Следующий() Цикл

		Выборка = ВыборкаДокументЗаказа.Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			
			Выборка.Следующий();
			
			Если Выборка.Отправлен Тогда
		
				Попытка
						
					ДокументОбъект = Выборка.ДокументЗаказа.ПолучитьОбъект();
					ДокументОбъект.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Отправлен;
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				Исключение
		
					ТекстОшибки = ОписаниеОшибки();
					ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводЗаказаВОплачен", УровеньЖурналаРегистрации.Ошибка
						, Метаданные.Документы.ЗапросДоступностиТоваров
						, Выборка.ДокументЗаказа
						, ТекстОшибки
					);
					
				КонецПопытки;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;  

#КонецОбласти

#Область ОтменаТТННаОтмененныеЗапросы_24

	Выборка = РезультатыЗапроса[24].Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Попытка
			Если ПустаяСтрока(Выборка.Номер) Тогда
				
				РегистрыСведений.СтатусыЭН.ОтменитьПосылку(Выборка.Ссылка); 
		
			Иначе 
				
				Если Не РегистрыСведений.СтатусыЭН.ПосылкаВДороге(Выборка.Ссылка) Тогда
					
					ДокументЭН = Выборка.Ссылка.ПолучитьОбъект();
					
					ОбменНПСервер.УдалитьИзРеестра(Выборка.Ссылка, Выборка.ВнешняяСсылка);
					ДокументЭН.Реестр = Документы.РеестрЭН.ПустаяСсылка();
	
					Если СокрЛП(Выборка.ВнешняяСсылка) = СокрЛП(ОбменНПСервер.УдалитьНакладную(Выборка.ВнешняяСсылка)) Тогда
	
						ОбменНПСервер.ПолучитьСтатусТТН(, Выборка.Номер);
	
						ДокументЭН.Записать();
					
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
		Исключение
			
		КонецПопытки;

	КонецЦикла;

#КонецОбласти

#Область УстановкаРезервирования72Часа_25

	Выборка = РезультатыЗапроса[25].Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Попытка
						
			ДокументОбъект = Выборка.ДокументЗаказа.ПолучитьОбъект();
			ДокументОбъект.ДатаРезервированияЗаказа = ТекущаяДатаСеанса() + 72*3600;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("АвтоСтатусы.УстановкаРезервирования72Часа", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.ЗаказПокупателя
				, Выборка.ДокументЗаказа
				, ТекстОшибки
			);
			
		КонецПопытки;

	КонецЦикла;

#КонецОбласти

#Область ВосстановлениеСтатусаВРегистре_26

	Выборка = РезультатыЗапроса[26].Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Попытка
						
			РегистрыСведений.СостояниеЗаказаПокупателя.ЗаписьСостояния(Выборка.ЗаказПокупателя);

		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("АвтоСтатусы.ВосстановлениеСтатусаВРегистре", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.РегистрыСведений.СостояниеЗаказаПокупателя
				, Выборка.ЗаказПокупателя
				, ТекстОшибки
			);
			
		КонецПопытки;

	КонецЦикла;

#КонецОбласти

#Область ПроверкаЧекаВозвратногоДокумента_27

	ВыборкаДокументаВозврата = РезультатыЗапроса[27].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаДокументаВозврата.Следующий() Цикл

		Выборка = ВыборкаДокументаВозврата.Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			
			Выборка.Следующий();
			
			Если Выборка.ВозвратныйЧек Тогда
		
				Попытка
						
					ДокументОбъект = Выборка.ДокументВозврата.ПолучитьОбъект();
					ДокументОбъект.Статус = Перечисления.СтатусыВозвратаЗаказаПокупателя.ВозвратОплаты;
					ДокументОбъект.Записать();
				
				Исключение
		
					ТекстОшибки = ОписаниеОшибки();
					ЗаписьЖурналаРегистрации("АвтоСтатусы.ПроверкаЧекаВозвратногоДокумента", УровеньЖурналаРегистрации.Ошибка
						, Метаданные.Документы.ВозвратИнтернетЗаказа
						, Выборка.ДокументВозврата
						, ТекстОшибки
					);
					
				КонецПопытки;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;  

#КонецОбласти

#Область СогласованиеNavisionВозвратногоДокумента_28

	ВыборкаДокументаВозврата = РезультатыЗапроса[28].Выбрать();

	Пока ВыборкаДокументаВозврата.Следующий() Цикл

		Попытка
						
			ДокументОбъект = ВыборкаДокументаВозврата.ДокументВозврата.ПолучитьОбъект();
			ДокументОбъект.Статус = Перечисления.СтатусыВозвратаЗаказаПокупателя.СогласованиеNavision;
			ДокументОбъект.Записать();
		
		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("АвтоСтатусы.СогласованиеNavisionВозвратногоДокумента", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.ВозвратИнтернетЗаказа
				, ВыборкаДокументаВозврата.ДокументВозврата
				, ТекстОшибки
			);
			
		КонецПопытки;

	КонецЦикла;  

#КонецОбласти

#Область ЗакрытиеВозвратногоДокумента_29

	ВыборкаДокументаВозврата = РезультатыЗапроса[29].Выбрать();

	Пока ВыборкаДокументаВозврата.Следующий() Цикл

		Попытка
						
			ДокументОбъект = ВыборкаДокументаВозврата.ДокументВозврата.ПолучитьОбъект();
			ДокументОбъект.Статус = Перечисления.СтатусыВозвратаЗаказаПокупателя.Закрыт;
			ДокументОбъект.Записать();
		
		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("АвтоСтатусы.ЗакрытиеВозвратногоДокумента", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.ВозвратИнтернетЗаказа
				, ВыборкаДокументаВозврата.ДокументВозврата
				, ТекстОшибки
			);
			
		КонецПопытки;

	КонецЦикла;  

#КонецОбласти

#Область ПереводВозвратаПочтойПоСтатусам_30

	ВыборкаДокументаВозврата = РезультатыЗапроса[30].Выбрать();

	Пока ВыборкаДокументаВозврата.Следующий() Цикл

		Попытка
						
			ДокументОбъект = ВыборкаДокументаВозврата.ДокументВозврата.ПолучитьОбъект();
			ДокументОбъект.Статус = ВыборкаДокументаВозврата.СтатусВозврата;
			ДокументОбъект.Записать();
		
		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводВозвратаПочтойПоСтатусам_30", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.ВозвратИнтернетЗаказа
				, ВыборкаДокументаВозврата.ДокументВозврата
				, ТекстОшибки
			);
			
		КонецПопытки;

	КонецЦикла;  

#КонецОбласти

#Область ПереводЗапросаКурераВЧек_31

	ВыборкаДокументЗаказа = РезультатыЗапроса[31].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументЗаказа.Следующий() Цикл

		Выборка = ВыборкаДокументЗаказа.Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			
			Выборка.Следующий();
			
			Если Выборка.Получен Тогда
		
				Попытка
		
					ДокументОбъект = Выборка.ДокументЗаказа.ПолучитьОбъект();
					ДокументОбъект.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ЧекВКЦ;
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
				Исключение
		
					ТекстОшибки = ОписаниеОшибки();
					ЗаписьЖурналаРегистрации("АвтоСтатусы.ПереводЗапросаКурераВЧек", УровеньЖурналаРегистрации.Ошибка
						, Метаданные.Документы.ЗапросДоступностиТоваров
						, Выборка.ДокументЗаказа
						, ТекстОшибки
					);
					
				КонецПопытки;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;  

#КонецОбласти

КонецПроцедуры

Процедура АвтоматическаяПродажаПоЧеку() Экспорт
	
	ТаблицаЗаказов = Новый ТаблицаЗначений();
	ТаблицаЗаказов.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	
#Область ПроверкаПродажиПоЧеку

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокуменЗаказ.Ссылка КАК ДокументЗаказа
		|ПОМЕСТИТЬ ДокументыЗаказов
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ДокуменЗаказ
		|ГДЕ
		|	ДокуменЗаказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Продажа)
		|	И ДокуменЗаказ.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыТовары.КлючСвязиЗапросаДоступности КАК КлючСвязиЗапросаДоступности,
		|	ДокументыЗаказов.ДокументЗаказа КАК ДокументЗаказа,
		|	ЗапросДоступностиТовары.Ссылка КАК ЗапросДоступностиЗаказа
		|ПОМЕСТИТЬ ПроданныеСтроки
		|ИЗ
		|	ДокументыЗаказов КАК ДокументыЗаказов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказыТовары
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ЧекТовары
		|			ПО ЗаказыТовары.КлючСвязи = ЧекТовары.КлючСвязи
		|			И ЗаказыТовары.Ссылка = ЧекТовары.Ссылка.ЗаказПокупателя
		|			И (ЧекТовары.Ссылка.Проведен)
		|			И (ЧекТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров.Товары КАК ЗапросДоступностиТовары
		|			ПО ЗаказыТовары.Ссылка = ЗапросДоступностиТовары.Ссылка.ДокументОснование
		|			И ЗаказыТовары.КлючСвязиЗапросаДоступности = ЗапросДоступностиТовары.КлючСвязи
		|		ПО ДокументыЗаказов.ДокументЗаказа = ЗаказыТовары.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроданныеСтроки.КлючСвязиЗапросаДоступности КАК КлючСвязиЗапросаДоступности,
		|	ПроданныеСтроки.ДокументЗаказа КАК ДокументЗаказа,
		|	ПроданныеСтроки.ЗапросДоступностиЗаказа КАК ЗапросДоступностиЗаказа,
		|	СостояниеСтрок.Продано КАК Продано
		|ИЗ
		|	ПроданныеСтроки КАК ПроданныеСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСтрокЗаказаПокупателя КАК СостояниеСтрок
		|		ПО (ПроданныеСтроки.КлючСвязиЗапросаДоступности = СостояниеСтрок.КлючСвязи)
		|		И (ПроданныеСтроки.ДокументЗаказа = СостояниеСтрок.ЗаказПокупателя)
		|		И (ПроданныеСтроки.ЗапросДоступностиЗаказа = СостояниеСтрок.ЗапросДоступностиТоваров)
		|ГДЕ
		|	НЕ СостояниеСтрок.Продано";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаЗаписиВРегистр = РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ИнициализацияСтрокиЗаписи();
		СтрокаЗаписиВРегистр.ЗаказПокупателя = Выборка.ДокументЗаказа;
		СтрокаЗаписиВРегистр.ЗапросДоступностиТоваров = Выборка.ЗапросДоступностиЗаказа;
		СтрокаЗаписиВРегистр.КлючСвязи = Выборка.КлючСвязиЗапросаДоступности;
		СтрокаЗаписиВРегистр.Продано = Истина;
		
		РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ЗаписьВРегистрСтроки(СтрокаЗаписиВРегистр);
		
		СтрокаЗаказов = ТаблицаЗаказов.Добавить();
		СтрокаЗаказов.Заказ = Выборка.ДокументЗаказа;
	
	КонецЦикла;
	
#КонецОбласти	

#Область ПерепроведениеИзмененногоЗаказа

	ТаблицаЗаказов.Свернуть("Заказ");
	
	Для Каждого СтрокаЗаказов Из ТаблицаЗаказов Цикл
		
//		ДокументЗаказа = СтрокаЗаказов.Заказ.ПолучитьОбъект();
//		ДокументЗаказа.Записать();
		
	КонецЦикла;

#КонецОбласти

КонецПроцедуры

Процедура СозданиеПеремещений() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗДТ.Ссылка КАК Ссылка,
		|	ЗДТ.Номенклатура.ВидНоменклатуры КАК Проект,
		|	НЕ ЗДТ.Ссылка.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз)
		|	И (ЗДТ.Ссылка.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ВыданДоставке)
		|	ИЛИ ЗДТ.Ссылка.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отправлен))
		|	ИЛИ ЗДТ.Ссылка.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Выдан) КАК Ордер
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров.Товары КАК ЗДТ
		|ГДЕ
		|	((ЗДТ.Ссылка.МагазинОтправитель = &ТекМагазин
		|	И ВЫБОР
		|		КОГДА ЗДТ.Ссылка.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз)
		|		ИЛИ ЗДТ.Ссылка.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.СлужбаДоставки)
		|			ТОГДА ЗДТ.Ссылка.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.КОтправке)
		|		ИНАЧЕ ЗДТ.Ссылка.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ВыданДоставке)
		|		ИЛИ ЗДТ.Ссылка.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отправлен)
		|	КОНЕЦ
		|	ИЛИ ЗДТ.Ссылка.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Выдан))
		|	И ЗДТ.Ссылка.Проведен)";

	Запрос.УстановитьПараметр("ТекМагазин", ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			НачатьТранзакцию();

			НовыйДокумент = Документы.ПеремещениеТоваров.СоздатьДокумент();
			НовыйДокумент.Заполнить(Выборка.Ссылка);
			ПеремещениеУжеЕсть = Ложь;
			НовыйДокумент.ДополнительныеСвойства.Свойство("ПеремещениеУжеЕсть", ПеремещениеУжеЕсть);
			Если Не ПеремещениеУжеЕсть Тогда
				НовыйДокумент.ДополнительныеСвойства.Вставить("ПропуститьКонтрольДоступногоКоличества", Истина);
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
				
				Если Выборка.Ордер Тогда
					
					НовыйРасходныйОрдер = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
					НовыйРасходныйОрдер.Заполнить(НовыйДокумент.Ссылка);
					НовыйРасходныйОрдер.Комментарий = НовыйДокумент.Комментарий;
					НовыйРасходныйОрдер.Дата = ТекущаяДатаСеанса();
					НовыйРасходныйОрдер.ДополнительныеСвойства.Вставить("ПропуститьКонтрольРезультатовПроведения", Истина);
					НовыйРасходныйОрдер.Записать(РежимЗаписиДокумента.Проведение);
					НовыйРасходныйОрдер.ДополнительныеСвойства.Вставить("ПропуститьКонтрольРезультатовПроведения", Истина);
					НовыйРасходныйОрдер.ДополнительныеСвойства.Вставить("РегистрацияПередачиВNavision", Истина);
					НовыйРасходныйОрдер.Записать(РежимЗаписиДокумента.Проведение);
					
				КонецЕсли;

			КонецЕсли;
			
			ЗафиксироватьТранзакцию();

		Исключение
			
			ОтменитьТранзакцию();

			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("АвтоПеремещения", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.ЗапросДоступностиТоваров
				, Выборка.Ссылка
				, ТекстОшибки
			);

		КонецПопытки;

	КонецЦикла;
			
КонецПроцедуры

Процедура ОтменаРезерваЗаказаПоВремени() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаказПокупателя.Ссылка КАК ДокументЗаказа
		|ПОМЕСТИТЬ ЗаказДляОтмены
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	НЕ (ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
		|	ИЛИ ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Отменён))
		|	И НЕ ЗаказПокупателя.ПометкаУдаления
		|	И ЗаказПокупателя.Проведен
		|	И ЗаказПокупателя.ДатаРезервированияЗаказа < &ДатаРезервированияЗаказа
		|	И НЕ ЗаказПокупателя.ДатаРезервированияЗаказа = ДАТАВРЕМЯ(1, 1, 1)
		|	И ЗаказПокупателя.Дата > ДАТАВРЕМЯ(2024, 1, 22)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказДляОтмены.ДокументЗаказа КАК ДокументЗаказа,
		|	КОЛИЧЕСТВО(ЗДТ.Ссылка) КАК ВсегоЗапросов,
		|	СУММА(ВЫБОР
		|		КОГДА ЗДТ.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПродажаНаКассе)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК ПродажаНаКассе,
		|	СУММА(ВЫБОР
		|		КОГДА ЗДТ.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отменён)
		|		ИЛИ ЗДТ.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтменуОтправитель)
		|		ИЛИ ЗДТ.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтменуПолучатель)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК Отмененные,
		|	ВложенныйЗапрос.ПроданныеСтроки КАК ПроданныеСтроки
		|ИЗ
		|	ЗаказДляОтмены КАК ЗаказДляОтмены
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров КАК ЗДТ
		|		ПО (ЗаказДляОтмены.ДокументЗаказа = ЗДТ.ДокументОснование)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЗаказДляОтмены.ДокументЗаказа КАК ДокументЗаказа,
		|			СУММА(ВЫБОР
		|				КОГДА СостояниеСтрок.Продано
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК ПроданныеСтроки
		|		ИЗ
		|			ЗаказДляОтмены КАК ЗаказДляОтмены
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСтрокЗаказаПокупателя КАК СостояниеСтрок
		|				ПО ЗаказДляОтмены.ДокументЗаказа = СостояниеСтрок.ЗаказПокупателя
		|		СГРУППИРОВАТЬ ПО
		|			ЗаказДляОтмены.ДокументЗаказа) КАК ВложенныйЗапрос
		|		ПО (ЗаказДляОтмены.ДокументЗаказа = ВложенныйЗапрос.ДокументЗаказа)
		|СГРУППИРОВАТЬ ПО
		|	ЗаказДляОтмены.ДокументЗаказа,
		|	ВложенныйЗапрос.ПроданныеСтроки";

	Запрос.УстановитьПараметр("ДатаРезервированияЗаказа", НачалоДня(ТекущаяДатаСеанса()));

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			НачатьТранзакцию();
			
			Если (Выборка.ВсегоЗапросов - Выборка.Отмененные) = Выборка.ПродажаНаКассе
					И Выборка.ПроданныеСтроки = 0 Тогда
				
				ДокументОбъект = Выборка.ДокументЗаказа.ПолучитьОбъект();
				ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПокупателей.Отменён;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
			КонецЕсли;

			
			ЗафиксироватьТранзакцию();

		Исключение
			
			ОтменитьТранзакцию();

			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ОтменаРезерваЗаказаПоВремени", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.ЗаказПокупателя
				, Выборка.ДокументЗаказа
				, ТекстОшибки
			);

		КонецПопытки;

	КонецЦикла;
			
КонецПроцедуры

Процедура СообщениеОСрокеРезерва() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаказПокупателя.Ссылка КАК ДокументЗаказа,
		|	ОбменСЕСпутником.Ссылка КАК УзелОбмена
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.ОбменСЕСпутником КАК ОбменСЕСпутником
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ (ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
		|	ИЛИ ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Отменён))
		|	И НЕ ЗаказПокупателя.ПометкаУдаления
		|	И ЗаказПокупателя.Проведен
		|	И НАЧАЛОПЕРИОДА(ЗаказПокупателя.ДатаРезервированияЗаказа, ДЕНЬ) = &ДатаРезервированияЗаказа
		|	И НЕ ЗаказПокупателя.ДатаРезервированияЗаказа = ДАТАВРЕМЯ(1, 1, 1)
		|	И ЗаказПокупателя.Дата > ДАТАВРЕМЯ(2024, 1, 22)
		|	И НЕ ОбменСЕСпутником.ЭтотУзел";

	Запрос.УстановитьПараметр("ДатаРезервированияЗаказа", НачалоДня(ТекущаяДатаСеанса()));

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПланыОбмена.ЗарегистрироватьИзменения(Выборка.УзелОбмена, Выборка.ДокументЗаказа);

	КонецЦикла;
			
КонецПроцедуры

Функция ПолучитьЗаказДляПеремещения(НомерЗапросаДоступности) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаказКлиента", Документы.ЗаказПокупателя.ПустаяСсылка());
	Результат.Вставить("ЗапросДоступности", Документы.ЗапросДоступностиТоваров.ПустаяСсылка());

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	ЗаказПокупателя.Ссылка КАК ЗаказКлиента,
		|	ЗапросДоступностиТоваров.Ссылка КАК ЗапросДоступности
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров КАК ЗапросДоступностиТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ПО ЗапросДоступностиТоваров.ДокументОснование = ЗаказПокупателя.Ссылка
		|ГДЕ
		|	ЗапросДоступностиТоваров.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Номер", НомерЗапросаДоступности);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Результат.ЗаказКлиента = Выборка.ЗаказКлиента;
		Результат.ЗапросДоступности = Выборка.ЗапросДоступности;

	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Процедура ТоварыСкладВыбор(СписокТоваров, ДанныеВыбора) Экспорт
	
	ДанныеЗапроса = Новый Структура;
	
	ДанныеЗапроса.Вставить("Command", "get_sku_list");
	ДанныеЗапроса.Вставить("SUPPLIER", "");
	Если ТипЗнч(СписокТоваров) = Тип("Массив") Тогда 
		
		ВыборДляМассива = Истина; 
		
		Результат = "";
		
		Для Каждого Элемент Из СписокТоваров Цикл 
			
			Подстрока = Элемент.Товар.IDN;
			РазделительПодстрок = ?(ПустаяСтрока(Результат), "", ",");
			Результат = Результат + РазделительПодстрок + Подстрока;
			
		КонецЦикла; 
		
		ДанныеЗапроса.Вставить("SKU", Результат);
		
	Иначе 
		
		ВыборДляМассива = Ложь;
		ДанныеЗапроса.Вставить("SKU", СписокТоваров.Товар.IDN);
		
	КонецЕсли;
	
	ЗаписьJSON = ОбменMagentoСервер.СоздатьJSON(-1, ДанныеЗапроса);  
		
	СоставОшибки = Новый Структура("Ошибка, КодОшибки, ОписаниеОшибки", Ложь, "", "");
	
	ОбменMagentoСервер.ВыполнитьВыгрузкуИзмененийВУзелMagento(Неопределено, ДанныеЗапроса, ЗаписьJSON, СоставОшибки);	
	
	JSON.ЗаписатьСвойство("Error", JSON.БулевоКакЧисло(СоставОшибки.Ошибка), ЗаписьJSON);
	JSON.ЗаписатьСвойство("ErrorCode", СоставОшибки.КодОшибки, ЗаписьJSON);
	JSON.ЗаписатьСвойство("ErrorMessage", СоставОшибки.ОписаниеОшибки, ЗаписьJSON);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ТекстJSON = ЗаписьJSON.Закрыть();
	
	ЧтениеJSON = Новый ЧтениеJSON;   
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);

	ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON, Ложь,,, "ПолучитьДатуОтMagento", ОбменMagentoСервер,, ОбменMagentoСервер.ИменаТипаДата()); 
	
	ПервыйЭлементМассива = Истина;
	МассивВыбора = Новый Массив;
	МассивВыбораПромежуточный = Новый Массив;
	
	Для Каждого СтрокаТовара Из ДанныеОтвета.goods Цикл

		Для Каждого СтрокаСклада Из СтрокаТовара.stock Цикл
			
			Если ПустаяСтрока(СтрокаСклада.wh_code) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СокрЛП(СтрокаСклада.wh_code) = "ОДЕССА" Тогда
				Продолжить;
			КонецЕсли;
			
			СвободныйОстаток = СтрокаСклада.qty - ?(СтрокаСклада.qty_r1<0, 0, СтрокаСклада.qty_r1); 
			
			Если ВыборДляМассива Тогда
				
				НедостаточноКоличества = Ложь;
				
				Для Каждого Элемент Из СписокТоваров Цикл 
			
					Если Элемент.Товар.IDN = СтрокаТовара.sku
							И Элемент.Количество > СвободныйОстаток Тогда
								
						НедостаточноКоличества = Истина;
						Прервать;
							
					КонецЕсли;
				
				КонецЦикла;
				Если (ПервыйЭлементМассива Или Не МассивВыбора.Найти(СтрокаСклада.wh_code) = Неопределено)
						И СвободныйОстаток > 0
						И Не НедостаточноКоличества Тогда
						
					МассивВыбораПромежуточный.Добавить(СтрокаСклада.wh_code);
						
				КонецЕсли;

			Иначе
				
				КодСклада = СтрокаСклада.wh_code;

				ДанныеВыбора.Добавить(ОбменMagentoСервер.ПолучитьСкладMagentoПоIDN(КодСклада).СкладВыбора,
					КодСклада + " (" + Строка(СвободныйОстаток) + ")");
				
			КонецЕсли;

		КонецЦикла;
		
		МассивВыбора = МассивВыбораПромежуточный;
		СЗДляКопирования = Новый СписокЗначений;
		СЗДляКопирования.ЗагрузитьЗначения(МассивВыбораПромежуточный); 
		МассивВыбора = СЗДляКопирования.ВыгрузитьЗначения();
		ПервыйЭлементМассива = Ложь; 
		МассивВыбораПромежуточный.Очистить();
		
	КонецЦикла;
	
	МассивВыбора1С = Новый Массив;
	ПервыйЭлементМассива = Истина;
	 
	Если ДанныеЗапроса.Свойство("SKU") Тогда

	 	ДанныеОтвета = ОбменMagentoСервер.ПолучитьОстатокПоставщика(ДанныеЗапроса);
		
		Для Каждого СтрокаТовара Из ДанныеОтвета.data.productsImmediate Цикл

			Для Каждого СтрокаСклада Из СтрокаТовара.balances Цикл
				
				КодСклада = СтрокаСклада.warehouse.code;

				Если ПустаяСтрока(КодСклада)
						Или СтрокаСклада.qty = 0 Тогда
					Продолжить;
				КонецЕсли;

				Если ВыборДляМассива Тогда
				
					НедостаточноКоличества = Ложь;
				
					Для Каждого Элемент Из СписокТоваров Цикл 
			
						Если Элемент.Товар.IDN = СтрокаТовара.sku
								И Элемент.Количество > СтрокаСклада.qty Тогда
								
							НедостаточноКоличества = Истина;
							Прервать;
							
						КонецЕсли;
				
					КонецЦикла;
				
					Если (ПервыйЭлементМассива Или Не МассивВыбора1С.Найти(КодСклада) = Неопределено)
							И Не НедостаточноКоличества Тогда
							
						МассивВыбораПромежуточный.Добавить(КодСклада);
							
					КонецЕсли;

				Иначе
					
					КодСклада = СтрокаСклада.warehouse.code;
	
					Если КодСклада = "__SUPPLIER" Тогда
			
						УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();
						ДанныеВыбора.Добавить(УчетнаяПолитика.СкладЗакупки, "__SUPPLIER (есть)");
						
					Иначе
						
						СкладВыбора = ОбменMagentoСервер.ПолучитьСкладMagentoПоIDN(КодСклада).СкладВыбора;
						НайденныйВыбор = ДанныеВыбора.НайтиПоЗначению(СкладВыбора);
						Если НайденныйВыбор = Неопределено Тогда
							
							ПредставлениеВыбора = КодСклада + 
								" (0) (" + Строка(СтрокаСклада.qty) + ")";
							
						Иначе
							
							ПредставлениеВыбора = НайденныйВыбор.Представление + 
								" (" + Строка(СтрокаСклада.qty) + ")";
							ДанныеВыбора.Удалить(НайденныйВыбор);
						
						КонецЕсли;
					
						ДанныеВыбора.Добавить(СкладВыбора, ПредставлениеВыбора);
						
					КонецЕсли;
	
				КонецЕсли;

			КонецЦикла;

			МассивВыбора1С = МассивВыбораПромежуточный;
			СЗДляКопирования = Новый СписокЗначений;
			СЗДляКопирования.ЗагрузитьЗначения(МассивВыбораПромежуточный); 
			МассивВыбора1С = СЗДляКопирования.ВыгрузитьЗначения();
			ПервыйЭлементМассива = Ложь; 
			МассивВыбораПромежуточный.Очистить();
			
		КонецЦикла;
			
		Если ВыборДляМассива Тогда
			Для Каждого СтрокаМассива Из МассивВыбора1С Цикл 
					Если СтрокаМассива = "__SUPPLIER" Тогда
			
						УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();
						ДанныеВыбора.Добавить(УчетнаяПолитика.СкладЗакупки, "__SUPPLIER (есть)");
						
					Иначе
						
						ДанныеВыбора.Добавить(ОбменMagentoСервер.ПолучитьСкладMagentoПоIDN(СтрокаМассива).СкладВыбора, СтрокаМассива);
						
					КонецЕсли;
			КонецЦикла;

			Для Каждого СтрокаМассива Из МассивВыбора Цикл 
				
				Если МассивВыбора1С.Найти(СтрокаМассива) = Неопределено Тогда
					
					ДанныеВыбора.Добавить(ОбменMagentoСервер.ПолучитьСкладMagentoПоIDN(СтрокаМассива).СкладВыбора, СтрокаМассива);  

				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДанныеВыбора.СортироватьПоПредставлению();

	КонецЕсли;

КонецПроцедуры

#КонецОбласти