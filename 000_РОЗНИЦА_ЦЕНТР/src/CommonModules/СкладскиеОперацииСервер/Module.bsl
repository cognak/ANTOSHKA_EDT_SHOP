// Проверяет, что в табличной части нет номенклатуры/Характеристики,
// которые есть в других документах пересчета
// Параметры
//  ДокументОбъект - объект проводимого документа документа.
//  ИмяТабличнойЧасти - Имя табличной части Товары
//  Отказ - Переменная отвечающая за прерывание проведения
//
Процедура ПроверитьДублиВДругихПересчетах(
	ДокументОбъект, 
	ИмяТабличнойЧасти, 
	Отказ,
	ТекстОшибки = ""
	) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТабТовары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПересчетТоваровТовары.Номенклатура,
	|	ПересчетТоваровТовары.Характеристика,
	|	ПересчетТоваровТовары.Ссылка
	|ПОМЕСТИТЬ ТоварыДругихПересчетов
	|ИЗ
	|	Документ.ПересчетТоваров.Товары КАК ПересчетТоваровТовары
	|ГДЕ
	|	ПересчетТоваровТовары.Ссылка.Проведен
	|	И ПересчетТоваровТовары.Ссылка <> &ПересчетТоваров
	|	И ПересчетТоваровТовары.Ссылка.ДокументОснование = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабТовары.Номенклатура,
	|	ТабТовары.Характеристика,
	|	ТабТовары.НомерСтроки,
	|	ТоварыДругихПересчетов.Ссылка.Представление КАК ПересчетТоваров
	|ИЗ
	|	ТабТовары КАК ТабТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыДругихПересчетов КАК ТоварыДругихПересчетов
	|		ПО ТабТовары.Номенклатура = ТоварыДругихПересчетов.Номенклатура
	|			И ТабТовары.Характеристика = ТоварыДругихПересчетов.Характеристика";
	
	Запрос.УстановитьПараметр("Товары", ДокументОбъект[ИмяТабличнойЧасти].Выгрузить());
	Запрос.УстановитьПараметр("ПересчетТоваров", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОбъект.ДокументОснование);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В строке №%1 табличной части ""%2"" находится ранее пересчитанный товар. %3'"),
			Выборка.НомерСтроки,
			ИмяТабличнойЧасти,
			Выборка.ПересчетТоваров,
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			ИмяТабличнойЧасти+"[" + (Выборка.НомерСтроки - 1) + "].Номенклатура" ,
			,
			Отказ
		);
		ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
	КонецЦикла;
	

КонецПроцедуры // ПроверитьЧтоНетПодарочныхСертификатов()

#Область ОбработкаПодчиненныхДокументов

//	LNK 29.11.2017 13:08:35
Процедура ПриЗаписиПроверитьПодчинённыеДокументы(ТекущийДокумент, Контрагент, ВозвратПоставщику, ДополнительныеСвойства)	Экспорт

//	Работаем только в случае взведенного флага регистрации в Navision.
	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "РегистрацияПередачиВNavision", Ложь)	Тогда

		УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаДокументы.Ссылка КАК ДокументСсылка,
		|	Ведущая.ВидДокумента КАК ВидДокумента,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументы.Ссылка ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НужноСоздать,
		|	ЕСТЬNULL(ТаблицаДокументы.Проведен, ЛОЖЬ) КАК ПеремещениеПроведено,
		|	ЕСТЬNULL(ТаблицаДокументы.Проведен, ЛОЖЬ) КАК Проведен,
		|	Ведущая.Порядок КАК Порядок
		|ПОМЕСТИТЬ БазоваяТаблица
		|ИЗ
		|	(ВЫБРАТЬ
		|		&ТекущийДокумент КАК ТекущийДокумент,
		|		""ПеремещениеТоваров"" КАК ВидДокумента,
		|		1 КАК Порядок) КАК Ведущая
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ТаблицаДокументы
		|		ПО (ТаблицаДокументы.ДокументОснование ССЫЛКА Документ.ЗаказПоставщику)
		|			И Ведущая.ТекущийДокумент = ТаблицаДокументы.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БазоваяТаблица.ДокументСсылка КАК ДокументСсылка,
		|	БазоваяТаблица.ДокументСсылка КАК ПеремещениеТоваров,
		|	БазоваяТаблица.ПеремещениеПроведено КАК ПеремещениеПроведено,
		|	БазоваяТаблица.ВидДокумента КАК ВидДокумента,
		|	БазоваяТаблица.НужноСоздать КАК НужноСоздать,
		|	БазоваяТаблица.Проведен КАК Проведен,
		|	БазоваяТаблица.Порядок КАК Порядок
		|ИЗ
		|	БазоваяТаблица КАК БазоваяТаблица
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокументы.Ссылка,
		|	БазоваяТаблица.ДокументСсылка,
		|	БазоваяТаблица.ПеремещениеПроведено,
		|	""ПриходныйОрдерНаТовары"",
		|	ВЫБОР
		|		КОГДА ТаблицаДокументы.Ссылка ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ЕСТЬNULL(ТаблицаДокументы.Проведен, ЛОЖЬ),
		|	2
		|ИЗ
		|	БазоваяТаблица КАК БазоваяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары КАК ТаблицаДокументы
		|		ПО (ТаблицаДокументы.ДокументОснование ССЫЛКА Документ.ПеремещениеТоваров)
		|			И БазоваяТаблица.ДокументСсылка = ТаблицаДокументы.ДокументОснование
		|ГДЕ
		|	&ВозвратПоставщику = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокументы.Ссылка,
		|	БазоваяТаблица.ДокументСсылка,
		|	БазоваяТаблица.ПеремещениеПроведено,
		|	""РасходныйОрдерНаТовары"",
		|	ВЫБОР
		|		КОГДА ТаблицаДокументы.Ссылка ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ЕСТЬNULL(ТаблицаДокументы.Проведен, ЛОЖЬ),
		|	2
		|ИЗ
		|	БазоваяТаблица КАК БазоваяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК ТаблицаДокументы
		|		ПО (ТаблицаДокументы.ДокументОснование ССЫЛКА Документ.ПеремещениеТоваров)
		|			И БазоваяТаблица.ДокументСсылка = ТаблицаДокументы.ДокументОснование
		|ГДЕ
		|	&ВозвратПоставщику = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок"
		);
		Запрос.УстановитьПараметр("ТекущийДокумент"  , ТекущийДокумент);
		Запрос.УстановитьПараметр("ВозвратПоставщику", ВозвратПоставщику);

		ТаблицаПодчинения = Запрос.Выполнить().Выгрузить();

		КонтрагентуРазрешенаПрямаяЗакупка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "РазрешитьПрямуюЗакупку", Ложь);

	//	Суть в чем... у заказа поставщику должны быть в подчинении документы поступления товаров с ЦентральногоСклада на Магазин.
	//	Но только в том случае, если поставщику (Контрагенту) разрешена прямая закупка.
	//	Если документов нет, но прямая закупка разрешена, нужно создать такие документы.
	//	Если документы есть, нужно проверить их регистрацию в Navision. При этом обращать внимание на разрешение прямой закупки
	//	уже не будем - даже если закупка НЕ разрешена, то раньше, вероятно, она была разрешена, раз документы существуют.

		НачатьТранзакцию();

		Попытка

			Для каждого СтрокаПодчинения Из ТаблицаПодчинения Цикл

				РаботаСПеремещением = СтрокаПодчинения.ВидДокумента = "ПеремещениеТоваров";	//	это первый проход

				Если РаботаСПеремещением Тогда	//	отрабатываем условие необходимости воздействия.

						НужноСоздатьДокумент = СтрокаПодчинения.НужноСоздать;

				Иначе	НужноСоздатьДокумент = СтрокаПодчинения.НужноСоздать И СтрокаПодчинения.ПеремещениеПроведено;

				КонецЕсли;

				Если НужноСоздатьДокумент Тогда

					Если КонтрагентуРазрешенаПрямаяЗакупка Тогда

						ДокументОбъект = Документы[СтрокаПодчинения.ВидДокумента].СоздатьДокумент();
						ДокументОбъект.Заполнить(?(РаботаСПеремещением, ТекущийДокумент, СтрокаПодчинения.ПеремещениеТоваров));
						ДокументОбъект.Дата = ТекущаяДатаСеанса() + ?(РаботаСПеремещением, 0, 180);

						ДокументОбъект.ДополнительныеСвойства.Вставить("РегистрацияПередачиВNavision", Истина);
						ДокументОбъект.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);

						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);

						Если РаботаСПеремещением Тогда	//	при первом проходе, если нужно, заменяем данные перемещения

							ТаблицаПодчинения.ЗаполнитьЗначения(ДокументОбъект.Ссылка  , "ПеремещениеТоваров");
							ТаблицаПодчинения.ЗаполнитьЗначения(ДокументОбъект.Проведен, "ПеремещениеПроведено");

						КонецЕсли;

						СтрокаПодчинения.ДокументСсылка = ДокументОбъект.Ссылка;
						СтрокаПодчинения.Проведен       = ДокументОбъект.Проведен;

					КонецЕсли;

				ИначеЕсли ЗначениеЗаполнено(СтрокаПодчинения.ДокументСсылка) Тогда

					Если РаботаСПеремещением Тогда	//	отрабатываем условие необходимости воздействия.

							ФлагРежимаЗаписи = ?(СтрокаПодчинения.ПеремещениеПроведено, 0, 1);

					Иначе	ФлагРежимаЗаписи = ?(СтрокаПодчинения.ПеремещениеПроведено, ?(СтрокаПодчинения.Проведен, 0, 1), -1);

					КонецЕсли;

					Если НЕ ФлагРежимаЗаписи = 0 Тогда

						ДокументОбъект = СтрокаПодчинения.ДокументСсылка.ПолучитьОбъект();
						ДокументОбъект.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);

						ДокументОбъект.Записать(?(ФлагРежимаЗаписи = 1, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.ОтменаПроведения));

						Если РаботаСПеремещением И ФлагРежимаЗаписи = 1 Тогда	//	при первом проходе, если нужно, заменяем данные перемещения

							ТаблицаПодчинения.ЗаполнитьЗначения(ДокументОбъект.Проведен, "ПеремещениеПроведено");

						КонецЕсли;

						СтрокаПодчинения.Проведен = ДокументОбъект.Проведен;

					КонецЕсли;

					Если СтрокаПодчинения.ПеремещениеПроведено Тогда

						ВнешниеИсточникиСобытия.УстановитьПереданоNavision(СтрокаПодчинения.ДокументСсылка, ОбщегоНазначенияРТСервер.ПолучитьМагазиныПоОбъекту(СтрокаПодчинения.ДокументСсылка),,,,, Истина);

					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

			ЗафиксироватьТранзакцию();

		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ОтменитьТранзакцию();

			ЖурналСобытий.Регистрация("ЗаказПоставщику.ПодчинённыеДокументы", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.ЗаказПоставщику
				, ТекущийДокумент
				,
				, ТекстОшибки, СокрЛП(ТекущийДокумент)
				, Истина
			);

		КонецПопытки;

		УстановитьПривилегированныйРежим(Ложь);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

//	LNK 05.01.2018 14:26:12
Функция БлокироватьДвиженияПоПересчетуСамостоятельному(Магазин, ДатаСреза = '00010101')	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПолитикаМагазина.БлокироватьДвиженияПоПересчетуСамостоятельному, Ведущая.БлокироватьДвиженияПоПересчетуСамостоятельному) КАК БлокироватьДвиженияПоПересчетуСамостоятельному,
	|	ВЫБОР
	|		КОГДА ПолитикаМагазина.Магазин = &Магазин
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлючПорядка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЛОЖЬ КАК БлокироватьДвиженияПоПересчетуСамостоятельному) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаМагазинов.СрезПоследних(
	|				&ДатаСреза,
	|				(Магазин = &Магазин
	|					ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	|					И ВЫРАЗИТЬ(&Магазин КАК Справочник.Магазины).СкладУправляющейСистемы = ЛОЖЬ) КАК ПолитикаМагазина
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка УБЫВ"
	);
	Запрос.УстановитьПараметр("Магазин"  , Магазин);
	Запрос.УстановитьПараметр("ДатаСреза", ?(ДатаСреза = '00010101', ТекущаяДатаСеанса(), ДатаСреза));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка.БлокироватьДвиженияПоПересчетуСамостоятельному;

КонецФункции // БлокироватьДвиженияПоПересчетуСамостоятельному()

//	LNK 30.01.2020 12:02:57
Функция ДанныеМагазиновПеремещения(МагазинОтправитель, МагазинПолучатель)	Экспорт

	ДанныеМагазинов = Новый Структура(
		"Отправитель, Получатель"
		, Новый Структура("Магазин, СкладУправляющейСистемы, НомерМагазина, ИспользоватьОрдернуюСхемуПриПеремещении"
			, Справочники.Магазины.ПустаяСсылка(), Ложь, 0, Ложь)
		, Новый Структура("Магазин, СкладУправляющейСистемы, НомерМагазина, ИспользоватьОрдернуюСхемуПриПеремещении"
			, Справочники.Магазины.ПустаяСсылка(), Ложь, 0, Ложь));

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаДанных.ОтправительМагазин, Ведущая.ОтправительМагазин)) КАК ОтправительМагазин,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаДанных.ПолучательМагазин, Ведущая.ПолучательМагазин)) КАК ПолучательМагазин,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаДанных.ОтправительНомерМагазина, Ведущая.ОтправительНомерМагазина)) КАК ОтправительНомерМагазина,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаДанных.ПолучательНомерМагазина, Ведущая.ПолучательНомерМагазина)) КАК ПолучательНомерМагазина,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаДанных.ОтправительСкладУправляющейСистемы, Ведущая.ОтправительСкладУправляющейСистемы)) КАК ОтправительСкладУправляющейСистемы,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаДанных.ПолучательСкладУправляющейСистемы, Ведущая.ПолучательСкладУправляющейСистемы)) КАК ПолучательСкладУправляющейСистемы,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаДанных.ОтправительИспользоватьОрдернуюСхемуПриПеремещении, Ведущая.ОтправительИспользоватьОрдернуюСхемуПриПеремещении)) КАК ОтправительИспользоватьОрдернуюСхемуПриПеремещении,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаДанных.ПолучательИспользоватьОрдернуюСхемуПриПеремещении, Ведущая.ПолучательИспользоватьОрдернуюСхемуПриПеремещении)) КАК ПолучательИспользоватьОрдернуюСхемуПриПеремещении
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка) КАК ОтправительМагазин,
	|		0 КАК ОтправительНомерМагазина,
	|		ЛОЖЬ КАК ОтправительСкладУправляющейСистемы,
	|		ЛОЖЬ КАК ОтправительИспользоватьОрдернуюСхемуПриПеремещении,
	|		ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка) КАК ПолучательМагазин,
	|		0 КАК ПолучательНомерМагазина,
	|		ЛОЖЬ КАК ПолучательСкладУправляющейСистемы,
	|		ЛОЖЬ КАК ПолучательИспользоватьОрдернуюСхемуПриПеремещении) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаОтправитель.Ссылка КАК ОтправительМагазин,
	|			ТаблицаОтправитель.НомерМагазина КАК ОтправительНомерМагазина,
	|			ТаблицаОтправитель.СкладУправляющейСистемы КАК ОтправительСкладУправляющейСистемы,
	|			ТаблицаОтправитель.ИспользоватьОрдернуюСхемуПриПеремещении КАК ОтправительИспользоватьОрдернуюСхемуПриПеремещении,
	|			ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка) КАК ПолучательМагазин,
	|			0 КАК ПолучательНомерМагазина,
	|			ЛОЖЬ КАК ПолучательСкладУправляющейСистемы,
	|			ЛОЖЬ КАК ПолучательИспользоватьОрдернуюСхемуПриПеремещении
	|		ИЗ
	|			Справочник.Магазины КАК ТаблицаОтправитель
	|		ГДЕ
	|			ТаблицаОтправитель.Ссылка = &МагазинОтправитель
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка),
	|			0,
	|			ЛОЖЬ,
	|			ЛОЖЬ,
	|			ТаблицаОтправитель.Ссылка,
	|			ТаблицаОтправитель.НомерМагазина,
	|			ТаблицаОтправитель.СкладУправляющейСистемы,
	|			ТаблицаОтправитель.ИспользоватьОрдернуюСхемуПриПеремещении
	|		ИЗ
	|			Справочник.Магазины КАК ТаблицаОтправитель
	|		ГДЕ
	|			ТаблицаОтправитель.Ссылка = &МагазинПолучатель) КАК ТаблицаДанных
	|		ПО (ИСТИНА)"
	);
	Запрос.УстановитьПараметр("МагазинОтправитель", МагазинОтправитель);
	Запрос.УстановитьПараметр("МагазинПолучатель" , МагазинПолучатель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	ДанныеМагазинов.Отправитель.Магазин = Выборка.ОтправительМагазин;
	ДанныеМагазинов.Отправитель.НомерМагазина = Выборка.ОтправительНомерМагазина;
	ДанныеМагазинов.Отправитель.СкладУправляющейСистемы = Выборка.ОтправительСкладУправляющейСистемы;
	ДанныеМагазинов.Отправитель.ИспользоватьОрдернуюСхемуПриПеремещении = Выборка.ОтправительИспользоватьОрдернуюСхемуПриПеремещении;

	ДанныеМагазинов.Получатель.Магазин = Выборка.ПолучательМагазин;
	ДанныеМагазинов.Получатель.НомерМагазина = Выборка.ПолучательНомерМагазина;
	ДанныеМагазинов.Получатель.СкладУправляющейСистемы  = Выборка.ПолучательСкладУправляющейСистемы;
	ДанныеМагазинов.Получатель.ИспользоватьОрдернуюСхемуПриПеремещении  = Выборка.ПолучательИспользоватьОрдернуюСхемуПриПеремещении;

	Возврат ДанныеМагазинов;

КонецФункции

#Область РезультатыИнвентаризацииВТекстовыйФайл

Функция ПолучитьТекстРезультатовИнвентаризации(СписокДокументов)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаТовары.IDN КАК IDN,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	СУММА(ТаблицаТовары.Сумма) КАК Сумма,
	|	ВЫБОР
	|		КОГДА &Единственный = ИСТИНА
	|			ТОГДА ТаблицаТовары.НомерСтроки
	|		ИНАЧЕ ТаблицаТовары.IDN
	|	КОНЕЦ КАК КлючПорядка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Номенклатура.IDN = """"
	|				ТОГДА ТабличнаяЧасть.Номенклатура.Код
	|			ИНАЧЕ ТабличнаяЧасть.Номенклатура.IDN
	|		КОНЕЦ КАК IDN,
	|		ТабличнаяЧасть.КоличествоФакт КАК Количество,
	|		ТабличнаяЧасть.СуммаФакт КАК Сумма
	|	ИЗ
	|		Документ.ПересчетТоваров.Товары КАК ТабличнаяЧасть
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка В(&СписокДокументов)) КАК ТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &Единственный = ИСТИНА
	|			ТОГДА ТаблицаТовары.НомерСтроки
	|		ИНАЧЕ ТаблицаТовары.IDN
	|	КОНЕЦ,
	|	ТаблицаТовары.IDN
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка"
	);
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.УстановитьПараметр("Единственный", СписокДокументов.Количество() = 1);
	
	Выборка = Запрос.Выполнить().Выбрать();

	ТекстФайла = "";
	
	Пока Выборка.Следующий() Цикл

		ТекстФайла = ТекстФайла + ?(ПустаяСтрока(ТекстФайла), "", Символы.ПС)
			+ "^" + СокрЛП(Выборка.IDN) + "^|"
			+ "^" + Формат(Выборка.Количество, "ЧДЦ=; ЧН=0; ЧГ=") + "^|"
			+ "^" + Формат(Выборка.Сумма, "ЧРД=.; ЧН=0; ЧГ=") + "^";

	КонецЦикла;

	Возврат ТекстФайла;

КонецФункции

Функция ПолучитьСтрокуНомеровДокументов(СписокДокументов, ИмяТипа = "ПересчетТоваров")	Экспорт

	СтрокаНомеров = "";

	Запрос = Новый Запрос(СтрЗаменить(
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Номер КАК Номер
	|ИЗ
	|	Документ.ПересчетТоваров КАК ТаблицаДокументы
	|ГДЕ
	|	ТаблицаДокументы.Ссылка В(&СписокДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер"
	, "Документ.ПересчетТоваров КАК", "Документ." + ИмяТипа + " КАК")
	);
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		СтрокаНомеров = СтрокаНомеров + ?(ПустаяСтрока(СтрокаНомеров), "", "_")
		+ СокрЛП(Выборка.Номер);

	КонецЦикла;

	Возврат СтрокаНомеров;

КонецФункции

#КонецОбласти







