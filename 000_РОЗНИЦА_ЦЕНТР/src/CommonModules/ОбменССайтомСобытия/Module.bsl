#Область ПрограммныйИнтерфейс

// Записывает текст ошибки в журнал регистрации
//
Процедура ЗаписатьОшибку(ТекстСообщения, УзелОбмена) Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с сайтами'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				УзелОбмена.Метаданные(),
				УзелОбмена,
				ТекстСообщения + " " + НСтр("ru = 'Обмен отменен.'"));
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПодписок

// Обработчик подписки на событие "ОбменССайтомПередЗаписьюРегистра".
// Выполняет регистрацию изменений для узлов плана обмена с сайтом. 
//
Процедура ОбменССайтомПередЗаписьюРегистраПередЗаписью(Источник, Отказ, Замещение) Экспорт

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел()
	И НЕ ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику().ИспользоватьОбменССайтомНаПериферийныхУзлах = Истина	Тогда	//	LNK 17.05.2021 05:18:57

		Возврат;

	КонецЕсли;
	
	ЗарегистрироватьИзменения(Источник, Замещение);
	
КонецПроцедуры

// Обработчик подписки на событие "ОбменССайтомПриЗаписиСправочника".
// Выполняет регистрацию изменений для узлов плана обмена с сайтом. 
//
Процедура ОбменССайтомПриЗаписиОбъектаПриЗаписи(Источник, Отказ) Экспорт

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел()
	И НЕ ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику().ИспользоватьОбменССайтомНаПериферийныхУзлах = Истина	Тогда	//	LNK 17.05.2021 05:18:57

		Возврат;

	КонецЕсли;
	
	ЗарегистрироватьИзменения(Источник);
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияИзменений

// Выборочно регистрирует изменения для узлов плана обмена с сайтом.
//
// Параметры:
//	Объект	- Объект метаданных - источник события.
//	Замещение - Булево - режим записи набора записей регистра.
//
Процедура ЗарегистрироватьИзменения(Объект, Замещение = Ложь)
	
	Если Объект.ОбменДанными.Загрузка  Тогда

		Возврат;

	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Попытка

	//	LNK 08.06.2017 13:19:16
		Если Объект.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда

			Возврат;

		КонецЕсли;

	Исключение	КонецПопытки;

	ОбменССайтомПереопределяемый.ЗарегистрироватьИзмененияВУзлахТовары(Объект, ОбменССайтомПовтИсп.МассивУзловДляРегистрации(Истина), Замещение);
	ОбменССайтомПереопределяемый.ЗарегистрироватьИзмененияВУзлахЗаказы(Объект, ОбменССайтомПовтИсп.МассивУзловДляРегистрации(,Истина), Замещение);

	//МассивУзловТовары = ОбменССайтомПовтИсп.МассивУзловДляРегистрации(Истина);
	//МассивУзловЗаказы = ОбменССайтомПовтИсп.МассивУзловДляРегистрации(,Истина);
	//ОбменССайтомПереопределяемый.ЗарегистрироватьИзмененияВУзлах(Объект, МассивУзловТовары, МассивУзловЗаказы, Замещение);
	
КонецПроцедуры

// Записывает в структуру ссылки на измененные объекты по узлу плана обмена.
//
// Параметры:
//	УзелПланаОбмена - ПланОбмена.Ссылка
//	СтруктураВозврата - Структура
//
Процедура ЗаполнитьСтруктуруИзмененийДляУзла(УзелПланаОбмена, СтруктураВозврата) Экспорт
	
	СтруктураВозврата.Вставить("Товары", Новый Массив);
	СтруктураВозврата.Вставить("Заказы", Новый Массив);
	
	ПолучитьИзмененияУзла(СтруктураВозврата, УзелПланаОбмена);
	
КонецПроцедуры

// Удаляет регистрацию у тех заказов, которые были загружены с сайта
Процедура ОтменитьРегистрацию(ЗаказСсылка) Экспорт
	
	МассивУзлов = ОбменССайтомПовтИсп.МассивУзловДляРегистрации(, Истина);
	ПланыОбмена.УдалитьРегистрациюИзменений(МассивУзлов, ЗаказСсылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбменССайтом

// Выполняет запуск обмена с сайтом из регламентного задания.
//
// Параметры:
//   КодУзлаОбмена		- строка с кодом узла плана обмена.
Процедура ЗаданиеВыполнитьОбмен(КодУзлаОбмена) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		РегистрыСведений.ДанныеКонтрагентовОтложенные.ПроверитьОтложенныхКонтрагентов(Перечисления.НазначениеКонтрагентовОтложенных.Magento);
		РегистрыСведений.ДанныеКонтрагентовОтложенные.ПроверитьВЧекахПоЗаказамИзмененияКонтрагентов();

	КонецЕсли;
	
	УзелОбмена = ПланыОбмена.ОбменССайтом.НайтиПоКоду(КодУзлаОбмена);
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с сайтами'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			УзелОбмена.Метаданные(),
			УзелОбмена,
			НСтр("ru = 'Не найден узел обмена с кодом'") + " " + КодУзлаОбмена);
		
		Возврат;
		
	КонецЕсли;

	Если УзелОбмена.ПометкаУдаления Тогда
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с сайтами'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			УзелОбмена.Метаданные(),
			УзелОбмена,
			НСтр("ru = 'Настройка обмена помечена на удаление. Обмен отменен.'"));
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбмен(УзелОбмена, НСтр("ru = 'Фоновый обмен'"));
	
КонецПроцедуры

// Запускает процедуру обмена с сайтом.
// Параметры
//	УзелОбмена - Ссылка на план обмена с сайтом.
//	РежимЗапускаОбмена - строка, поясняющая был ли обмен запущен интерактивно
//						или через регл. задание.
//	ВыгружатьТолькоИзменения - Булево, определяет будут выгружаться все данные
// 						или только зарегистрированные.
Процедура ВыполнитьОбмен(УзелОбмена, РежимЗапускаОбмена, ВыгружатьТолькоИзменения = Истина, ИнтерактивныйОбмен = Ложь) Экспорт
	
	Отказ = Ложь;
	ОписаниеОшибки = "";

//	LNK 26.12.2017 09:44:58
	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() И ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ОбменССайтомТолькоВГлавномУзле") Тогда

		ТекстСообщения = НСтр("ru = 'Отказано! В текущем узле обмен с сайтом не разрешён (Константа.ОбменССайтомТолькоВГлавномУзле).'");

		Если ИнтерактивныйОбмен = Истина Тогда

			Сообщить(ТекстСообщения);
			Возврат;

		Иначе

			ВызватьИсключение ТекстСообщения;

		КонецЕсли;

	КонецЕсли;
	
//	---------------------------------------------------------------------------------------

	// Перед обменом необходимо убедиться что есть доступ на сайт или к каталогу.
	ТекстСообщения = "";
	Если УзелОбмена.ВыгружатьНаСайт Тогда
		
		ДоступноПодключениеКСайту = Ложь;
		
		ПроверитьПодключениеКСайту(ДоступноПодключениеКСайту, УзелОбмена, ТекстСообщения);

		Если Не ДоступноПодключениеКСайту Тогда
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с сайтами'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				УзелОбмена.Метаданные(),
				УзелОбмена,
				ТекстСообщения+ " " + НСтр("ru = 'Обмен отменен.'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		КаталогВыгрузки = УзелОбмена.КаталогВыгрузки;
		КаталогДоступен = Ложь;
		ПроверитьДоступностьКаталогаВыгрузки(КаталогДоступен, КаталогВыгрузки, ТекстСообщения);
		Если Не КаталогДоступен Тогда
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с сайтами'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			УзелОбмена.Метаданные(),
			УзелОбмена,
			ТекстСообщения + " " + НСтр("ru = 'Обмен отменен.'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаИнформации = РегистрыСведений.СостоянияОбменовДанными.СоздатьНаборЗаписей().Выгрузить();
	ТаблицаИнформации.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	
	НастройкиПодключения = Новый Структура;
	ЗаполнитьНастройкиПодключения(НастройкиПодключения, УзелОбмена);
	
	РазрешенныеТипыКартинок = Новый Массив;
	РазрешенныеТипыКартинок.Добавить("gif");
	РазрешенныеТипыКартинок.Добавить("jpg");
	РазрешенныеТипыКартинок.Добавить("jpeg");
	РазрешенныеТипыКартинок.Добавить("png");

	ПараметрыОбмена = Новый Структура;
	ПараметрыОбмена.Вставить("УзелОбмена", УзелОбмена);
	ПараметрыОбмена.Вставить("НастройкиПодключения", НастройкиПодключения);
//	LNK 26.12.2017 10:03:46
	ПараметрыОбмена.Вставить("ОбменССайтомТолькоВГлавномУзле", ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ОбменССайтомТолькоВГлавномУзле"));

	Если ВыгружатьТолькоИзменения Тогда

			ВыгружатьИзменения = УзелОбмена.ВыгружатьИзменения;

	Иначе	ВыгружатьИзменения = Ложь;

	КонецЕсли;

	ПараметрыОбмена.Вставить("ВыгружатьИзменения", ВыгружатьИзменения);

	ПараметрыОбмена.Вставить("РазмерПорции", УзелОбмена.РазмерПорции);
	ПараметрыОбмена.Вставить("КоличествоПовторов",УзелОбмена.КоличествоПовторений);
	ПараметрыОбмена.Вставить("РежимВыгрузки", УзелОбмена.РежимВыгрузки);
	ПараметрыОбмена.Вставить("ВладелецКаталога", УзелОбмена.ВладелецКаталога);
	ПараметрыОбмена.Вставить("ОбменЗаказами", УзелОбмена.ОбменЗаказами);
//	ПараметрыОбмена.Вставить("ОбменТоварами", УзелОбмена.ОбменТоварами);
	ПараметрыОбмена.Вставить("ОбменТоварами", Ложь);	//	LNK 01.07.2021 15:15:52
	
	ПараметрыОбмена.Вставить("КаталогВыгрузки", УзелОбмена.КаталогВыгрузки);
	ПараметрыОбмена.Вставить("ВыгружатьНаСайт", УзелОбмена.ВыгружатьНаСайт);
	//Криворучко
	ПараметрыОбмена.Вставить("КаталогВыгрузкиСайта", УзелОбмена.КаталогВыгрузкиСайта);
	//
	ПараметрыОбмена.Вставить("ВыгружатьКартинки", УзелОбмена.ВыгружатьКартинки);
	
	ПараметрыОбмена.Вставить("РазрешенныеТипыКартинок",РазрешенныеТипыКартинок);
	ПараметрыОбмена.Вставить("НаименованиеНалога", НСтр("ru = 'НДС'"));
	
	ИспользоватьХарактеристики = Истина;
	
	ОбменССайтомПереопределяемый.УстановитьПризнакИспользоватьХарактеристики(ИспользоватьХарактеристики);
	ПараметрыОбмена.Вставить("ИспользоватьХарактеристики", ИспользоватьХарактеристики);
	
	ПараметрыОбмена.Вставить("РежимЗапускаОбмена", РежимЗапускаОбмена);
	
	ПрикладныеПараметры = ПараметрыПрикладногоРешения(УзелОбмена);
	//Криворучко
	ПрикладныеПараметры.Вставить("ИсточникЗагрузки", НСтр("ru = 'Сайт'"));
	//
	ПараметрыОбмена.Вставить("ПрикладныеПараметры", ПрикладныеПараметры);
	
	ФайлЗагрузки = УзелОбмена.ФайлЗагрузки;
	ФайлЗагрузки = ОбменССайтом.ПодготовитьПутьДляПлатформы(ОбменССайтом.ПлатформаWindows(), ФайлЗагрузки);
	
	ПараметрыОбмена.Вставить("ФайлЗагрузки", ФайлЗагрузки);
	
	ПараметрыОбмена.Вставить("МассивКаталогов", Новый Массив);
	ПараметрыОбмена.Вставить("ДанныеОЗаказах", Неопределено);
	
	СтруктураИзменений = Новый Структура;
	СтруктураИзменений.Вставить("Заказы", Новый Массив);
	Если ВыгружатьТолькоИзменения Тогда
		СтруктураИзменений.Вставить("Товары", Новый Массив);
	КонецЕсли;
	ПолучитьИзмененияУзла(СтруктураИзменений, УзелОбмена);
	
	ПараметрыОбмена.Вставить("СтруктураИзменений",СтруктураИзменений);
	
	РезультатОбмена = Новый Структура;
	
	ОбменССайтом.ВыполнитьОбменССайтом(ПараметрыОбмена, РезультатОбмена, ТаблицаИнформации);
	
	Ошибка = НЕ(РезультатОбмена.ТоварыВыгружены Или РезультатОбмена.ВыполненОбменЗаказами);
	
	ВыполнитьДействияПриЗавершенииОбмена(ПараметрыОбмена, ТаблицаИнформации, Ошибка);
	
КонецПроцедуры

// Проверяет доступно ли подключение к сайту.
//
// Параметры:
//  Результат - Булево - результат проверки подключения.
//  УзелОбмена - УзелОбмена - ссылка на узел обмена.
//  ТекстСообщения - строка - описание ошибки.
//
Процедура ПроверитьПодключениеКСайту(Результат, УзелОбмена, ТекстСообщения)
	
	НастройкиПодключения = Новый Структура;
	ЗаполнитьНастройкиПодключения(НастройкиПодключения, УзелОбмена);
	
	ТекстСообщения = "";
	Если ОбменССайтом.ВыполнитьТестовоеПодключениеКСайту(НастройкиПодключения, ТекстСообщения) Тогда
		Результат = Истина;
	Иначе
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с сайтами'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			УзелОбмена.Метаданные(),
			УзелОбмена,
			ТекстСообщения + " " + НСтр("ru = 'Обмен отменен.'"));
			
		Результат = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДоступностьКаталогаВыгрузки(КаталогДоступен, КаталогВыгрузки, ТекстСообщения)
	
	КаталогДоступен = Истина;
		
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
		
		КаталогВыгрузки = КаталогВременныхФайлов();
		
	Иначе
		
		ПоследнийСимвол = Прав(КаталогВыгрузки, 1);
		
		Если НЕ ПоследнийСимвол = "\" Тогда
			КаталогВыгрузки = КаталогВыгрузки + "\";
		КонецЕсли;
		
	КонецЕсли;
	
	ПодкаталогБезопасностиКаталогаВыгрузки = "webdata";
	КаталогНаДиске = КаталогВыгрузки + ПодкаталогБезопасностиКаталогаВыгрузки;
	КаталогНаДиске = ОбменССайтом.ПодготовитьПутьДляПлатформы(ОбменССайтом.ПлатформаWindows(), КаталогНаДиске);
	
	Попытка
		
		СоздатьКаталог(КаталогНаДиске);
		
	Исключение
		
		ТекстСообщения = ОбменССайтом.ОписаниеИсключительнойОшибки();
		КаталогДоступен = Ложь;
		
		Возврат;
		
	КонецПопытки;
	
	ОписаниеОшибки = "";
	Если НЕ ОчиститьКаталог(КаталогНаДиске, ОписаниеОшибки) Тогда
		
		ТекстСообщения = ОбменССайтом.ОписаниеИсключительнойОшибки();
		КаталогДоступен = Ложь;
		
		Возврат;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьНастройкиПодключения(НастройкиПодключения, УзелОбмена)
	
	НастройкиПодключения.Вставить("Пользователь", УзелОбмена.ИмяПользователя);
	НастройкиПодключения.Вставить("Пароль", УзелОбмена.Пароль);
	НастройкиПодключения.Вставить("АдресСайта", УзелОбмена.АдресСайта);

КонецПроцедуры

Функция ОчиститьКаталог(Каталог, ОписаниеОшибки)
	
	Попытка
		
		УдалитьФайлы(Каталог, "*.*");
		
	Исключение
		
		ОписаниеИсключительнойОшибки = ОбменССайтом.ОписаниеИсключительнойОшибки(
											НСтр("ru = 'Не удалось очистить каталог обмена:")
											+ " "+"(" + Каталог + ")");
		
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеИсключительнойОшибки);
			
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Выполняет необходимые действия при завершении обмена.
//
// Параметры:
//  Параметры - Структура - основные параметры.
//  ТаблицаИнформации - ТаблицаЗначений - состояние текущего сеанса обмена.
//  Ошибка - Булево - Истина, если необходимо зафиксировать завершение обмена с ошибками.
//
Процедура ВыполнитьДействияПриЗавершенииОбмена(Параметры, ТаблицаИнформации, Ошибка = Ложь)
	
	ТаблицаИнформации.ЗаполнитьЗначения(Параметры.УзелОбмена, "УзелИнформационнойБазы");
	
	// Записываем информацию по каждому действию в журнал регистрации.
	
	Для Каждого СтрокаТаблицыИнформации Из ТаблицаИнформации Цикл
		
		СобытиеЖурнала = ПолучитьКлючСообщенияЖурналаРегистрации(Параметры.УзелОбмена,
			СтрокаТаблицыИнформации.ДействиеПриОбмене);
		
		Если СтрокаТаблицыИнформации.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		Иначе
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
		КонецЕсли;
		
		Если Ошибка Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(СобытиеЖурнала,
			УровеньЖурнала,
			Параметры.УзелОбмена.Метаданные(),
			Параметры.УзелОбмена,
			Параметры.РежимЗапускаОбмена + Символы.ПС + СтрокаТаблицыИнформации.Описание);
			
	КонецЦикла;

	// Объединяем 2 строки информации по выгрузке (товары и заказы) в одну (ВыгрузкаДанных).
	
	СтрокиВыгрузки = ТаблицаИнформации.НайтиСтроки(Новый Структура("ДействиеПриОбмене",
		Перечисления.ДействияПриОбмене.ВыгрузкаДанных));
	
	Если СтрокиВыгрузки.Количество() = 2 Тогда
		
		Если СтрокиВыгрузки[1].РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка Тогда
			СтрокиВыгрузки[0].РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		КонецЕсли;
		
		ТаблицаИнформации.Удалить(СтрокиВыгрузки[1]);
		
	КонецЕсли;
	
	// Записываем состояния обмена.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТаблицыИнформации Из ТаблицаИнформации Цикл
		
		ЗаписьСостояния = РегистрыСведений.СостоянияОбменовДанными.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(ЗаписьСостояния, СтрокаТаблицыИнформации);
		
		// Даты записываем по границам сеанса, чтобы работал отбор журнала.
		
		ЗаписьСостояния.ДатаНачала = Параметры.ДатаФормирования;
		ЗаписьСостояния.ДатаОкончания = ТекущаяДатаСеанса();
		
		ЗаписьСостояния.Записать();
		
		Если ЗначениеЗаполнено(ЗаписьСостояния.ДействиеПриОбмене)
			И (ЗаписьСостояния.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено
			ИЛИ ЗаписьСостояния.РезультатВыполненияОбмена
				= Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями) Тогда
			
			ЗаписьУспешногоСостояния = РегистрыСведений.СостоянияУспешныхОбменовДанными.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(ЗаписьУспешногоСостояния, ЗаписьСостояния);
			
			ЗаписьУспешногоСостояния.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКлючСообщенияЖурналаРегистрации(УзелПланаОбмена, ДействиеПриОбмене)
	
	ИмяПланаОбмена     = УзелПланаОбмена.Метаданные().Имя;
	КодУзлаПланаОбмена = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелПланаОбмена, "Код"));
	
	КлючСообщения = НСтр("ru = 'Обмен данными.[ИмяПланаОбмена].Узел [КодУзла].[ДействиеПриОбмене]'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	КлючСообщения = СтрЗаменить(КлючСообщения, "[ИмяПланаОбмена]",    ИмяПланаОбмена);
	КлючСообщения = СтрЗаменить(КлючСообщения, "[КодУзла]",           КодУзлаПланаОбмена);
	КлючСообщения = СтрЗаменить(КлючСообщения, "[ДействиеПриОбмене]", ДействиеПриОбмене);
	
	Возврат КлючСообщения;
	
КонецФункции


Функция ПараметрыПрикладногоРешения(УзелОбмена)
	
	ПрикладныеПараметры  = Новый Структура;
	РеквизитыПланаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УзелОбмена, "ПараметрыПрикладногоРешения, ВыгружатьКартинки");
	СохраненныеНастройки	 = РеквизитыПланаОбмена.ПараметрыПрикладногоРешения.Получить();
	Если Не ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		Возврат ПрикладныеПараметры;
	КонецЕсли;
	
	Если Не СохраненныеНастройки.Свойство("ПараметрыПрикладногоРешения") Тогда
		Возврат ПрикладныеПараметры;
	КонецЕсли;
	
	ПрикладныеПараметры = СохраненныеНастройки.ПараметрыПрикладногоРешения;
	ПрикладныеПараметры.Вставить("ВыгружатьКартинки", РеквизитыПланаОбмена.ВыгружатьКартинки);
	
	ОбменССайтомПереопределяемый.ДополнитьПараметрыПрикладногоРешения(ПрикладныеПараметры);
	
	Возврат ПрикладныеПараметры;

КонецФункции

// Записывает в лог информацию об обмене с сайтом.
//
// Параметры:
//	ТаблицаИнформации - ТаблицаЗначений - соответствующая регистру СостоянияОбменовДанными.
//	Параметры - Структура - данные и настройки для обмена.
//	ДатаНачала - Дата - время события (загрузка или выгрузка заказов).
//	Загрузка - Булево - флаг, указывающий происходила загрузка или выгрузка.
//	Успех - Булево - результат загрузки/выгрузки.
//	СтруктураСтатистики - Структура - значения количества созданных документов, обновленных и пр.
//	ОписаниеОшибки - Строка - текстовая информация об ошибке.
//
Процедура ЗаписатьИнформациюПоЗаказамВТаблицуИнформации(ТаблицаИнформации, Параметры, ДатаНачала, Загрузка, Успех,
		СтруктураСтатистики, ОписаниеОшибки) Экспорт
	
	СтрокаТаблицыИнформации = ТаблицаИнформации.Добавить();
	СтрокаТаблицыИнформации.ДатаНачала = ДатаНачала;
	СтрокаТаблицыИнформации.ДатаОкончания = ТекущаяДатаСеанса();
	Если Загрузка Тогда
		Действие = Перечисления.ДействияПриОбмене.ЗагрузкаДанных;
	Иначе
		Действие = Перечисления.ДействияПриОбмене.ВыгрузкаДанных;
	КонецЕсли;
	
	СтрокаТаблицыИнформации.ДействиеПриОбмене = Действие;
	
	Если Действие = Перечисления.ДействияПриОбмене.ЗагрузкаДанных Тогда
		
		Описание = Строка(ДатаНачала) + " " + НСтр("ru = 'Запуск загрузки заказов'")
			+ Символы.ПС + НСтр("ru = 'Обработано:'")+ " " + СтруктураСтатистики.ОбработаноНаЗагрузке
			+ Символы.ПС + НСтр("ru = 'Загружено:'")+ " " + СтруктураСтатистики.Загружено.Количество();
		
		ВывестиСписокДокументовДляПротокола(Описание, Параметры,СтруктураСтатистики.Загружено);
		
		Описание = Описание
			+ Символы.ПС + НСтр("ru = 'Пропущено:'") + " " + СтруктураСтатистики.Пропущено.Количество();
		
		ВывестиСписокДокументовДляПротокола(Описание, Параметры,СтруктураСтатистики.Пропущено);
		
		Описание = Описание
			+ Символы.ПС + НСтр("ru = 'Обновлено:'") + " " + СтруктураСтатистики.Обновлено.Количество();
		
		ВывестиСписокДокументовДляПротокола(Описание, Параметры, СтруктураСтатистики.Обновлено);
		
		Описание = Описание
			+ Символы.ПС + НСтр("ru = 'Создано:'") + " " + СтруктураСтатистики.Создано.Количество();
		
		ВывестиСписокДокументовДляПротокола(Описание, Параметры,СтруктураСтатистики.Создано);
		
		Описание = Описание
			+ Символы.ПС
			+ СтрокаТаблицыИнформации.ДатаОкончания
			+ " "
			+ НСтр("ru = 'Завершена загрузка заказов'");
			
	Иначе
		
		Описание = Строка(ДатаНачала) + " " + НСтр("ru = 'Запуск выгрузки заказов'")
			+ Символы.ПС + НСтр("ru = 'Выгружено:'")+ " " + СтруктураСтатистики.Выгружено.Количество();
		
		ВывестиСписокДокументовДляПротокола(Описание, Параметры, СтруктураСтатистики.Выгружено);
		
		Описание = Описание
			+ Символы.ПС
			+ СтрокаТаблицыИнформации.ДатаОкончания
			+ " "
			+ НСтр("ru = 'Завершена выгрузка заказов'");
	
	КонецЕсли;
	
	СтрокаТаблицыИнформации.Описание = Описание;
	
	Если Успех Тогда
		СтрокаТаблицыИнформации.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
	Иначе
		СтрокаТаблицыИнформации.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыИнформации.Описание = СтрокаТаблицыИнформации.Описание
		+ Символы.ПС + НСтр("ru = 'Дополнительная информация:'") + Символы.ПС + ОписаниеОшибки;

	
КонецПроцедуры
	
Процедура ВывестиСписокДокументовДляПротокола(Описание, Параметры, МассивДокументов)
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Описание = Описание + ". " + НСтр("ru = 'Список документов:'");
	
	Для Каждого Док Из МассивДокументов Цикл
		
		
		СтруктураРеквизитовЗаказаНаСайте = Неопределено;
				
		СтруктураРеквизитовЗаказаНаСайте = ОбменССайтомПереопределяемый.РеквизитыЗаказаНаСайте(Док.Ссылка, Параметры.УзелОбмена);
		Если СтруктураРеквизитовЗаказаНаСайте = Неопределено Тогда
			НомерЗаказаНаСайте = "";
			ДатаЗаказаНаСайте = "";
		Иначе
			
			НомерЗаказаНаСайте = СтруктураРеквизитовЗаказаНаСайте.НомерЗаказаНаСайте;
			ДатаЗаказаНаСайте = СтруктураРеквизитовЗаказаНаСайте.ДатаЗаказаНаСайте;
		КонецЕсли;
		
		Описание = Описание + Символы.ПС + Символы.НПП + Символы.НПП
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '№ %1 от %2 (№ %3 от %4 на сайте)'"),
				Док.Номер,
				Док.Дата,
				НомерЗаказаНаСайте,
				ДатаЗаказаНаСайте);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьИзмененияУзла(СтруктураВозврата, УзелПланаОбмена)
	
	ИмяСправочникаТовары = ОбменССайтомПовтИсп.ИмяПрикладногоСправочника("Номенклатура");
	ИмяСправочникаФайлы = ОбменССайтомПовтИсп.ИмяПрикладногоСправочника("НоменклатураПрисоединенныеФайлы");
	ИмяДокументаЗаказы = ОбменССайтомПовтИсп.ИмяПрикладногоДокумента("ЗаказПокупателя");
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказыИзменения.Ссылка КАК Ссылка,
	|	""Заказы"" КАК ТипСсылки
	|ИЗ
	|	Документ." + ИмяДокументаЗаказы + ".Изменения КАК ЗаказыИзменения
	|ГДЕ
	|	ЗаказыИзменения.Узел = &Узел";
	
	Если СтруктураВозврата.Свойство("Товары") Тогда 
		ТекстЗапроса = ТекстЗапроса
		+ "
		|
		|ОБЪЕДИНИТЬ ВСЕ	
		|
		|ВЫБРАТЬ
		|	НоменклатураИзменения.Ссылка,
		|	""Товары"" 
		|ИЗ
		|	Справочник." + ИмяСправочникаТовары + ".Изменения КАК НоменклатураИзменения
		|ГДЕ
		|	НоменклатураИзменения.Узел = &Узел";

	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Узел", УзелПланаОбмена);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураВозврата[Выборка.ТипСсылки].Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти

