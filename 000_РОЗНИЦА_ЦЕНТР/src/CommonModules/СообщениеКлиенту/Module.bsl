Процедура ОтправитьСообщение() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбменСЕСпутником.Ссылка КАК Ссылка,
		|	ОбменСЕСпутником.ОтправительViber КАК ОтправительViber,
		|	ОбменСЕСпутником.ОтправительSMS КАК ОтправительSMS
		|ИЗ
		|	ПланОбмена.ОбменСЕСпутником КАК ОбменСЕСпутником
		|ГДЕ
		|	НЕ ОбменСЕСпутником.ЭтотУзел
		|	И НЕ ОбменСЕСпутником.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(); 
	
	Если Выборка.Следующий() Тогда 
		
		УзелОбмена = Выборка.Ссылка; 
		ОтправительViber = Выборка.ОтправительViber;
		ОтправительSMS = Выборка.ОтправительSMS;
		ОтправлятьНаViber = Не ПустаяСтрока(Выборка.ОтправительViber);
		ОтправлятьНаSMS = Не ПустаяСтрока(Выборка.ОтправительSMS); 
		
	Иначе 
		
		Возврат;
		
	КонецЕсли; 
	
	Если ОтправлятьНаViber Тогда
		ОтправитьViber(УзелОбмена, ОтправительViber)	
	КонецЕсли;
	
	Если ОтправлятьНаSMS Тогда 
		ОтправитьSMS(УзелОбмена, ОтправительSMS)	
	КонецЕсли;
	
	//проверка сообщений Viber
	ПроверкаСообщений(УзелОбмена);
	
	//	
	//
	////}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	//
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ВариантыОтправкиСМС.Ссылка КАК Ссылка,
	//	|	ВариантыОтправкиСМС.ВерсияДанных КАК ВерсияДанных,
	//	|	ВариантыОтправкиСМС.ПометкаУдаления КАК ПометкаУдаления,
	//	|	ВариантыОтправкиСМС.Наименование КАК Наименование,
	//	|	ВариантыОтправкиСМС.ШаблонСМС КАК ШаблонСМС,
	//	|	ВариантыОтправкиСМС.Использовать КАК Использовать,
	//	|	ВариантыОтправкиСМС.СхемаКомпоновкиДанных КАК СхемаКомпоновкиДанных,
	//	|	ВариантыОтправкиСМС.ДатаНачала КАК ДатаНачала,
	//	|	ВариантыОтправкиСМС.Описание КАК Описание,
	//	|	ВариантыОтправкиСМС.ИмяШаблонаСКД КАК ИмяШаблонаСКД,
	//	|	ВариантыОтправкиСМС.Ответственный КАК Ответственный,
	//	|	ВариантыОтправкиСМС.Предопределенный КАК Предопределенный,
	//	|	ВариантыОтправкиСМС.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	//	|ИЗ
	//	|	Справочник.ВариантыОтправкиСМС КАК ВариантыОтправкиСМС
	//	|ГДЕ
	//	|	ВариантыОтправкиСМС.Использовать
	//	|	И ВариантыОтправкиСМС.ДатаНачала <= &ДатаНачала";
	//
	//Запрос.УстановитьПараметр("ДатаНачала", ТекущаяДатаСеанса());
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Выборка = РезультатЗапроса.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл 
	//	
	//	ТЗДанныхДляСМС = СписокЭлементовСКД(Выборка.Ссылка, Выборка.ДатаНачала);  
	//	
	//	
	//	Для Каждого СтрокаТЗ Из ТЗДанныхДляСМС Цикл
	//		
	//		НаборСМС = РегистрыСведений.СМСДляОтправки.СоздатьНаборЗаписей();
	//		НаборСМС.Отбор.ОбъектДляСМС.Установить(СтрокаТЗ.Ссылка);
	//		НаборСМС.Отбор.ВариантСМС.Установить(Выборка.Ссылка);
	//		НаборСМС.Прочитать();
	//		Если НаборСМС.Количество() = 0 Тогда
	//			НовыйСМС = НаборСМС.Добавить();
	//			НовыйСМС.ОбъектДляСМС = СтрокаТЗ.Ссылка;
	//			НовыйСМС.ВариантСМС = Выборка.Ссылка;
	//		Иначе
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		ТекстШаблона = Выборка.ШаблонСМС;
	//		ИмяКонтрагента =  ПолучитьИмяКонтрагента(СтрокаТЗ.Контрагент);
	//		ТекстШаблона = СтрЗаменить(ТекстШаблона, "[ИмяКонтрагента]", СокрЛП(ИмяКонтрагента));  
	//		
	//		Для Каждого Колонки Из ТЗДанныхДляСМС.Колонки Цикл 
	//			
	//			ИмяКолонка = Колонки.Имя;
	//			ТекстШаблона = СтрЗаменить(ТекстШаблона, "[" + ИмяКолонка + "]", СокрЛП(СтрокаТЗ[ИмяКолонка])); 
	//			
	//		КонецЦикла;
	//		
	//		НовыйСМС.СМС = ТекстШаблона;
	//		
	//		НаборСМС.Записать();
	//		
	//	КонецЦикла; 
	//	
	//КонецЦикла;   

КонецПроцедуры  

Функция СписокЭлементовСКД(СсылкаНаШаблон, ДатаНачала)

	Настройки = ПолучитьНастройкиСписка(СсылкаНаШаблон, ДатаНачала);
	Возврат ТаблицаСКД(Настройки.СКД, Настройки.Настройки);

КонецФункции

Функция ПолучитьНастройкиСписка(СсылкаНаШаблон, ДатаНачала)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВариантыОтправкиСМС.СхемаКомпоновкиДанных КАК СхемаКомпоновкиДанных
	|ИЗ
	|	Справочник.ВариантыОтправкиСМС КАК ВариантыОтправкиСМС
	|ГДЕ
	|	ВариантыОтправкиСМС.Ссылка = &Сегмент"
	);
	Запрос.УстановитьПараметр("Сегмент", СсылкаНаШаблон);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	СКД = Выборка.СхемаКомпоновкиДанных.Получить();

	Если СКД = Неопределено Тогда

		ВызватьИсключение "Настройки шаблона СМС отсутствуют! Схема компоновки не определена.";

	КонецЕсли;

	//подключить поля запроса списка 
	Для каждого НаборДанных Из СКД.НаборыДанных Цикл 
		Для Каждого Поле Из НаборДанных.Поля Цикл
			Поле.ОграничениеИспользования.Поле = Ложь;
		КонецЦикла;
	КонецЦикла;//подключить поля запроса списка     
	
	//СКД.Параметры.ДатаНачала.Значение = ТекущаяДатаСеанса();
	
	НастройкиСписка = СКД.ВариантыНастроек.Основной.Настройки;
	Настройки = СКД.НастройкиПоУмолчанию;   
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаНачала", ДатаНачала);
	//ОбщегоНазначенияРТКлиентСервер.СкопироватьЭлементы(НастройкиСписка.ПараметрыДанных, Настройки.ПараметрыДанных,, Ложь);
	//ОбщегоНазначенияРТКлиентСервер.СкопироватьЭлементы(НастройкиСписка.Отбор, Настройки.Отбор,, Ложь);

	Возврат Новый Структура("СКД, Настройки", СКД, НастройкиСписка);

КонецФункции 

Функция ТаблицаСКД(СКД, Настройки)

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СКД,Настройки,,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
	);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат ТаблицаЗначений;

КонецФункции    

Функция ПолучитьИмяКонтрагента(КонтрагентСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФИОФизЛицСрезПоследних.Имя КАК Имя
		|ИЗ
		|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &Контрагент) КАК ФИОФизЛицСрезПоследних";
	
	Запрос.УстановитьПараметр("Контрагент", КонтрагентСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Результат = Выборка.Имя;
	Иначе 
		Результат = "";
	КонецЕсли;
	
	Возврат Результат; 

КонецФункции




Процедура ОтправитьViber(УзелОбмена, ОтправительViber)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщениеКлиенту.Дата КАК Дата,
		|	СообщениеКлиенту.ИДСообщения КАК ИДСообщения,
		|	СообщениеКлиенту.ТекстСообщения КАК ТекстСообщения,
		|	СообщениеКлиенту.ТипСообщения КАК ТипСообщения,
		|	СообщениеКлиенту.СостояниеСообщения КАК СостояниеСообщения,
		|	СообщениеКлиенту.Телефон КАК Телефон,
		|	СообщениеКлиенту.ДатаСледующейОтправки КАК ДатаСледующейОтправки
		|ИЗ
		|	РегистрСведений.СообщениеКлиенту КАК СообщениеКлиенту
		|ГДЕ
		|	СообщениеКлиенту.ИДСообщения ПОДОБНО ""Новое%""
		|	И СообщениеКлиенту.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийКлиенту.Viber)
		|	И СообщениеКлиенту.ДатаСледующейОтправки < &ДатаСледующейОтправки";
	
	Запрос.УстановитьПараметр("ДатаСледующейОтправки", ТекущаяДатаСеанса());

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		СтруктураВыгрузки = Новый Структура("УзелОбмена, ДанныеДляОтправки, ТекстЗапроса"); 
		СтруктураВыгрузки.УзелОбмена = УзелОбмена;

		СтруктураЗапроса = Новый Структура;
		СтруктураЗапроса.Вставить("text"				, Строка(Выборка.ТекстСообщения));
		СтруктураЗапроса.Вставить("iosExpirityText"		, Строка(Выборка.ТекстСообщения));
		СтруктураЗапроса.Вставить("from"				, Строка(ОтправительViber));
		
		МассивТелефонов = Новый Массив;
		МассивТелефонов.Добавить(Выборка.Телефон);
		
		СтруктураЗапроса.Вставить("phoneNumbers"		, МассивТелефонов);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(); 
		ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса);	
		СтруктураВыгрузки.ТекстЗапроса = ЗаписьJSON.Закрыть(); 
		
		ОтветСервера = ЕСпутникСервер.ОтправитьСообщениеViber(СтруктураВыгрузки); 
		
		Если ОтветСервера.ТелоОтвета.Свойство("results")
				И ОтветСервера.ТелоОтвета.results.Свойство("requestId") Тогда 
				
			ДатаСообщения = ТекущаяДатаСеанса();
			
			СтруктураСообщенияКлиенту = РегистрыСведений.СообщениеКлиенту.СтруктураЗаписиРегистра(); 
			
			СтруктураСообщенияКлиенту.Дата 						= Выборка.Дата;
			СтруктураСообщенияКлиенту.ИДСообщения 				= ОтветСервера.ТелоОтвета.results.requestId;
			СтруктураСообщенияКлиенту.ТекстСообщения 			= Выборка.ТекстСообщения;
			СтруктураСообщенияКлиенту.ТипСообщения 				= Перечисления.ТипыСообщенийКлиенту.Viber;
			СтруктураСообщенияКлиенту.СостояниеСообщения 		= Перечисления.СостояниеСообщенийКлиенту.Отправлено;
			СтруктураСообщенияКлиенту.Телефон 					= Выборка.Телефон;
			СтруктураСообщенияКлиенту.ДатаСледующейОтправки 	= ДатаСообщения + 120; 
			
			РегистрыСведений.СообщениеКлиенту.ЗаписьСообщенияВРегистр(СтруктураСообщенияКлиенту, Выборка.ИДСообщения);  
			
		Иначе
				
			//РегистрыСведений.КомментарийИнтернетЗаказа.ЗаписьКомментария(ЗаказКлиента, ПараметрыСеанса.ТекущийПользователь, "ОШИБКА!!! " + ОтветСервера.ТелоОтветаСтрока);
			
		КонецЕсли;
		
		
	КонецЦикла; 
		
КонецПроцедуры

Процедура ОтправитьSMS(УзелОбмена, ОтправительSMS) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщениеКлиенту.Дата КАК Дата,
		|	СообщениеКлиенту.ИДСообщения КАК ИДСообщения,
		|	СообщениеКлиенту.ТекстСообщения КАК ТекстСообщения,
		|	СообщениеКлиенту.ТипСообщения КАК ТипСообщения,
		|	СообщениеКлиенту.СостояниеСообщения КАК СостояниеСообщения,
		|	СообщениеКлиенту.Телефон КАК Телефон,
		|	СообщениеКлиенту.ДатаСледующейОтправки КАК ДатаСледующейОтправки
		|ИЗ
		|	РегистрСведений.СообщениеКлиенту КАК СообщениеКлиенту
		|ГДЕ
		|	СообщениеКлиенту.ИДСообщения ПОДОБНО ""Новое%""
		|	И СообщениеКлиенту.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийКлиенту.SMS)
		|	И СообщениеКлиенту.ДатаСледующейОтправки < &ДатаСледующейОтправки";
	
	Запрос.УстановитьПараметр("ДатаСледующейОтправки", ТекущаяДатаСеанса());

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СтруктураВыгрузки = Новый Структура("УзелОбмена, ДанныеДляОтправки, ТекстЗапроса"); 
		СтруктураВыгрузки.УзелОбмена = УзелОбмена;
	
		СтруктураЗапроса = Новый Структура;
		СтруктураЗапроса.Вставить("text"				, Строка(Выборка.ТекстСообщения));
		СтруктураЗапроса.Вставить("from"				, Строка(ОтправительSMS));
		
		МассивТелефонов = Новый Массив;
		МассивТелефонов.Добавить(Выборка.Телефон);
		
		СтруктураЗапроса.Вставить("phoneNumbers"		, МассивТелефонов);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(); 
		ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса);	
		СтруктураВыгрузки.ТекстЗапроса = ЗаписьJSON.Закрыть(); 
		
		ОтветСервера = ЕСпутникСервер.ОтправитьСообщениеSMS(СтруктураВыгрузки); 
		
		Если ОтветСервера.ТелоОтвета.Свойство("results")
				И ОтветСервера.ТелоОтвета.results.Свойство("requestId") Тогда 
				
			ДатаСообщения = ТекущаяДатаСеанса();
			
			СтруктураСообщенияКлиенту = РегистрыСведений.СообщениеКлиенту.СтруктураЗаписиРегистра(); 
			
			СтруктураСообщенияКлиенту.Дата 						= Выборка.Дата;
			СтруктураСообщенияКлиенту.ИДСообщения 				= ОтветСервера.ТелоОтвета.results.requestId;
			СтруктураСообщенияКлиенту.ТекстСообщения 			= Выборка.ТекстСообщения;
			СтруктураСообщенияКлиенту.ТипСообщения 				= Перечисления.ТипыСообщенийКлиенту.SMS;
			СтруктураСообщенияКлиенту.СостояниеСообщения 		= Перечисления.СостояниеСообщенийКлиенту.Отправлено;
			СтруктураСообщенияКлиенту.Телефон 					= Выборка.Телефон;
			СтруктураСообщенияКлиенту.ДатаСледующейОтправки 	= ДатаСообщения + 120; 
			
			РегистрыСведений.СообщениеКлиенту.ЗаписьСообщенияВРегистр(СтруктураСообщенияКлиенту, Выборка.ИДСообщения);  
			
		Иначе
				
			//РегистрыСведений.КомментарийИнтернетЗаказа.ЗаписьКомментария(ЗаказКлиента, ПараметрыСеанса.ТекущийПользователь, "ОШИБКА!!! " + ОтветСервера.ТелоОтветаСтрока);
			
		КонецЕсли;
		
		
	КонецЦикла; 
		
КонецПроцедуры    

Процедура ПроверкаСообщений(УзелОбмена)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщениеКлиенту.Дата КАК Дата,
		|	СообщениеКлиенту.ИДСообщения КАК ИДСообщения,
		|	СообщениеКлиенту.ТекстСообщения КАК ТекстСообщения,
		|	СообщениеКлиенту.ТипСообщения КАК ТипСообщения,
		|	СообщениеКлиенту.СостояниеСообщения КАК СостояниеСообщения,
		|	СообщениеКлиенту.Телефон КАК Телефон,
		|	СообщениеКлиенту.ДатаСледующейОтправки КАК ДатаСледующейОтправки
		|ИЗ
		|	РегистрСведений.СообщениеКлиенту КАК СообщениеКлиенту
		|ГДЕ
		|	СообщениеКлиенту.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийКлиенту.Viber)
		|	И СообщениеКлиенту.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостояниеСообщенийКлиенту.Отправлено)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураВыгрузки = Новый Структура("УзелОбмена, ДанныеДляОтправки, ТекстЗапроса"); 
		СтруктураВыгрузки.УзелОбмена = УзелОбмена;
		СтруктураВыгрузки.ТекстЗапроса = Выборка.ИДСообщения; 
		
		ОтветСервера = ЕСпутникСервер.ПолучитьСостояниеСообщения(СтруктураВыгрузки); 
		
		Если ОтветСервера.ТелоОтвета.Свойство("results")
			И ОтветСервера.ТелоОтвета.results.Свойство("delivered")  
			И ОтветСервера.ТелоОтвета.results.delivered Тогда 
			
			ДатаСообщения = ТекущаяДатаСеанса();
			
			СтруктураСообщенияКлиенту = РегистрыСведений.СообщениеКлиенту.СтруктураЗаписиРегистра(); 
			
			СтруктураСообщенияКлиенту.Дата 						= Выборка.Дата;
			СтруктураСообщенияКлиенту.ИДСообщения 				= Выборка.ИДСообщения;
			СтруктураСообщенияКлиенту.ТекстСообщения 			= Выборка.ТекстСообщения;
			СтруктураСообщенияКлиенту.ТипСообщения 				= Перечисления.ТипыСообщенийКлиенту.Viber;
			СтруктураСообщенияКлиенту.СостояниеСообщения 		= Перечисления.СостояниеСообщенийКлиенту.Доставлено;
			СтруктураСообщенияКлиенту.Телефон 					= Выборка.Телефон;
			СтруктураСообщенияКлиенту.ДатаСледующейОтправки 	= ДатаСообщения + 60; 
			
			РегистрыСведений.СообщениеКлиенту.ЗаписьСообщенияВРегистр(СтруктураСообщенияКлиенту);  
			
		ИначеЕсли ОтветСервера.ТелоОтвета.Свойство("results")
			И ОтветСервера.ТелоОтвета.results.Свойство("failed")  
			И ОтветСервера.ТелоОтвета.results.failed Тогда
			
			ДатаСообщения = ТекущаяДатаСеанса();
			
			СтруктураСообщенияКлиенту = РегистрыСведений.СообщениеКлиенту.СтруктураЗаписиРегистра(); 
			
			СтруктураСообщенияКлиенту.Дата 						= Выборка.Дата;
			СтруктураСообщенияКлиенту.ИДСообщения 				= Выборка.ИДСообщения;
			СтруктураСообщенияКлиенту.ТекстСообщения 			= Выборка.ТекстСообщения;
			СтруктураСообщенияКлиенту.ТипСообщения 				= Перечисления.ТипыСообщенийКлиенту.Viber;
			СтруктураСообщенияКлиенту.СостояниеСообщения 		= Перечисления.СостояниеСообщенийКлиенту.Перенаправлено;
			СтруктураСообщенияКлиенту.Телефон 					= Выборка.Телефон;
			СтруктураСообщенияКлиенту.ДатаСледующейОтправки 	= ДатаСообщения + 60;
			
			РегистрыСведений.СообщениеКлиенту.ЗаписьСообщенияВРегистр(СтруктураСообщенияКлиенту); 
			
			СтруктураСообщенияКлиенту = РегистрыСведений.СообщениеКлиенту.СтруктураЗаписиРегистра(); 
			
			СтруктураСообщенияКлиенту.Дата 						= Выборка.Дата;
			СтруктураСообщенияКлиенту.ИДСообщения 				= "Новое";
			СтруктураСообщенияКлиенту.ТекстСообщения 			= Выборка.ТекстСообщения;
			СтруктураСообщенияКлиенту.ТипСообщения 				= Перечисления.ТипыСообщенийКлиенту.SMS;
			СтруктураСообщенияКлиенту.СостояниеСообщения 		= Перечисления.СостояниеСообщенийКлиенту.Новое;
			СтруктураСообщенияКлиенту.Телефон 					= Выборка.Телефон;
			СтруктураСообщенияКлиенту.ДатаСледующейОтправки 	= ДатаСообщения + 60; 
			
			РегистрыСведений.СообщениеКлиенту.ЗаписьСообщенияВРегистр(СтруктураСообщенияКлиенту); 
			
		Иначе
			
			//РегистрыСведений.КомментарийИнтернетЗаказа.ЗаписьКомментария(ЗаказКлиента, ПараметрыСеанса.ТекущийПользователь, "ОШИБКА!!! " + ОтветСервера.ТелоОтветаСтрока);
			
		КонецЕсли;  
		
	КонецЦикла;

КонецПроцедуры


