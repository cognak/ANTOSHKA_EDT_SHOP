#Область ПрограммныйИнтерфейсБонусныеБаллыПартионныйУчет

//	LNK 27.09.2021 06:22:56
Процедура ВыполнитьСписаниеПоДокументуНачисления(Период, Регистратор, Контрагент)	Экспорт

	Перем РЕГ;

//	Параметры "Период, Регистратор, Контрагент" - измерения записи последовательности

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	СоздатьНаборыЗаписей(РЕГ, Регистратор);	//	LNK 10.12.2021 16:05:59
	ДанныеСписания = ПолучитьДанныеДляСписания(Период, Регистратор, Контрагент);
	ТаблицаТекущая = ПолучитьТаблицуТекущую(Регистратор, Контрагент, РЕГ);

	Если ДанныеСписания.СписаниеПартий Тогда

	//	В контексте одного регистратора могут быть несколько требований к списанию по одной
	//	программе лояльности. Так как набор записей записывается после отработки всех
	//	назначенных строк, необходимо учитывать уже потраченные партии.
		ТаблицаИспользованныхПартий = ПолучитьТаблицуПартийКонтрагента(,,,,,,, Истина);

		Для каждого СтрокаСписать Из ДанныеСписания.ТаблицаСписать Цикл

			Если СтрокаСписать.ВидОперации = Перечисления.ВидыОперацийБонусныхБаллов.Аннуляция Тогда

				Продолжить;

			КонецЕсли;

			СуммаБонусныхБалловСписание = СтрокаСписать.СуммаБонусныхБаллов;

			СтрокаТекущейОперации = ПолучитьСтрокуТекущейОперации(Контрагент, СтрокаСписать, ТаблицаТекущая);
		//	Восстанавливаем данные строки операции, так как в предыдущих (ранние восстановления последовательности)
		//	партионных списаниях информация в строке могла быть изменена.
			СтрокаТекущейОперации.СуммаБонусныхБаллов = СуммаБонусныхБалловСписание * ?(СтрокаСписать.ВозвратБонусныхБаллов, -1, 1);
			СтрокаТекущейОперации.Перенос_ПрограммаЛояльности = Неопределено;
			СтрокаТекущейОперации.Перенос_ДокументНачисления  = Неопределено;
			СтрокаТекущейОперации.СуммаБонусныхБалловОригинал = 0;
			СтрокаТекущейОперации.Примечание = "";

		//	ВОЗВРАТ БОНУСНЫХ БАЛЛОВ
		//	=======================================================================================
			Если СтрокаСписать.ВозвратБонусныхБаллов Тогда

				ДанныеДокументаПродажи = ПолучитьДанныеДокументаПродажи(СтрокаСписать.ДокументПродажи
					, СтрокаСписать.Контрагент
					, СтрокаСписать.ПрограммаЛояльности
					, ?(СтрокаСписать.ВидОперации = Перечисления.ВидыОперацийБонусныхБаллов.Использование
						, Перечисления.ВидыОперацийБонусныхБаллов.Использование
						, Перечисления.ВидыОперацийБонусныхБаллов.Начисление
					)
					, СтрокаСписать.ПериодДвижения
					, Период	//	для среза "УчетнаяПолитика"
					, Новый Граница(Новый МоментВремени(СтрокаСписать.ПериодДвижения, Регистратор), ВидГраницы.Исключая)
					, ТаблицаТекущая
					, Регистратор
					, СтрокаСписать.ДокументОперации
				);

				Если СтрокаСписать.ВидОперации = Перечисления.ВидыОперацийБонусныхБаллов.Использование Тогда	//	СПИСАНИЯ ВОЗВРАТ

				//	При использовании документ партии всегда неизвестен.
					СтрокаТекущейОперации.ДокументНачисления = Неопределено;
					ОригиналСтрокиТекущей = ОбщегоНазначенияКлиентСервер.СтрокаТаблицыКакСтруктура(ТаблицаТекущая.Колонки, СтрокаТекущейОперации);

					ПервыйПроход = Истина;

					Для каждого СтрокаИспользовано Из ДанныеДокументаПродажи Цикл

						СуммаСписанияПартии = Макс(0, Мин(СуммаБонусныхБалловСписание, СтрокаИспользовано.СуммаБонусныхБаллов));

						Если СуммаСписанияПартии > 0 Тогда

							Если ПервыйПроход Тогда

							//	Первое списание относим на текущую строку операции регистра "БонусныеБаллы"
							//	Это НЕ "СписаниеПартий = Истина"! Не забываем.
								СтрокаОперацииПартия = СтрокаТекущейОперации;
								СтрокаОперацииПартия.СуммаБонусныхБалловОригинал = СтрокаОперацииПартия.СуммаБонусныхБаллов;

							Иначе

								СтрокаОперацииПартия = ТаблицаТекущая.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаОперацииПартия, СтрокаТекущейОперации);
								СтрокаОперацииПартия.СписаниеПартий = Истина;	//	отмечаем добавленные строки

							КонецЕсли;

							РЕГ.Рабочий.Записывать = Истина;	//	флаг изменения данных таблицы.
							СтрокаОперацииПартия.ДокументНачисления  = СтрокаИспользовано.ДокументНачисления;
							СтрокаОперацииПартия.СуммаБонусныхБаллов = -СуммаСписанияПартии;
							СтрокаОперацииПартия.Примечание = "В.И.прод." + СтрокаСписать.ДокументПродажи;

							Если НЕ СтрокаИспользовано.ДатаСписания = '00010101' Тогда

								СтрокаОперацииАннуляция = ТаблицаТекущая.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаОперацииАннуляция, СтрокаОперацииПартия);

								СтрокаОперацииАннуляция.ВидДвижения			= ВидДвиженияНакопления.Расход;
								СтрокаОперацииАннуляция.Период				= КонецДня(СтрокаИспользовано.ДатаСписания);
								СтрокаОперацииАннуляция.ВидОперации			= Перечисления.ВидыОперацийБонусныхБаллов.Аннуляция;
								СтрокаОперацииАннуляция.СуммаБонусныхБаллов = СуммаСписанияПартии;	//	ПЛЮС
								СтрокаОперацииАннуляция.СписаниеПартий		= Истина;	//	отмечаем добавленные строки

							КонецЕсли;

							СуммаБонусныхБалловСписание = СуммаБонусныхБалловСписание - СуммаСписанияПартии;
							ПервыйПроход = Ложь;

						КонецЕсли;

					КонецЦикла;

					ПараметрыПогашения = Новый Структура(
						"ДокументПродажи, Примечание, РеквизитыАннуляции, ПогаситьОстатокПереноса, ИспользоватьТекущую"
						, СтрокаСписать.ДокументПродажи
						, "Погашение возврата оплаты бонусами"
						, Неопределено
						, Истина//Ложь
						, ПервыйПроход
					);

					Если ПервыйПроход Тогда	//	нет строк по документу продажи, текущая строка не отработана!
						
						СтрокаТекущейОперации.ДокументНачисления = СтрокаСписать.ДокументПродажи;
						ОригиналСтрокиТекущей = СтрокаТекущейОперации;

					Иначе
						
						ОригиналСтрокиТекущей.ДокументНачисления = СтрокаСписать.ДокументПродажи;

					КонецЕсли;

					ПогашениеАварийногоДвижения(ОригиналСтрокиТекущей, СуммаБонусныхБалловСписание, ТаблицаТекущая, ПараметрыПогашения, РЕГ);

				Иначе	//	НАЧИСЛЕНИЯ ВОЗВРАТ

				//	СуммаСписанияПартии = Макс(0, Мин(СуммаБонусныхБалловСписание, ДанныеДокументаПродажи.СуммаБонусныхБалловОстаток));
					СуммаСписанияПартии = Макс(0, СуммаБонусныхБалловСписание);	//	LNK 16.07.2024 11:22:19

				//	Возможно, начисления продажи уже были списаны "реставрацией".. поэтому нужно обнулить движения.
					Если СуммаСписанияПартии > 0 Тогда

						РЕГ.Рабочий.Записывать = Истина;	//	флаг изменения данных таблицы.

						СтрокаТекущейОперации.Период			  = СтрокаСписать.ДатаОперации;	//	период записи выравниваем по регистратору
						СтрокаТекущейОперации.ДокументНачисления  = ДанныеДокументаПродажи.ДокументНачисления;
						СтрокаТекущейОперации.СуммаБонусныхБаллов = -СуммаСписанияПартии;
						СтрокаТекущейОперации.Примечание = "В.Н.";

						Если СтрокаТекущейОперации.Период < ДанныеДокументаПродажи.ДатаНачисления Тогда
							
						//	Тут случай возврата ДО начисления. Переносим "Период" на момент начисления (во избежание отрицательных остатков).
							СтрокаТекущейОперации.Период = ДанныеДокументаПродажи.ДатаНачисления;

						КонецЕсли;

					//	.. сторнируем аннуляцию на списанную сумму партии
						ДанныеАннуляции = ПолучитьДанныеАннуляции(СтрокаТекущейОперации);

						Если НЕ ДанныеАннуляции.ДатаСписания = '00010101' Тогда

							СтрокиТекущейАннуляции = ТаблицаТекущая.НайтиСтроки(
								Новый Структура(
									"Контрагент, ПрограммаЛояльности, ДокументОперации, ДокументНачисления, ВидОперации"
									, СтрокаТекущейОперации.Контрагент
									, СтрокаТекущейОперации.ПрограммаЛояльности
									, СтрокаТекущейОперации.ДокументОперации
									, СтрокаСписать.ДокументПродажи
									, Перечисления.ВидыОперацийБонусныхБаллов.Аннуляция
								)
							);

							Если НЕ СтрокиТекущейАннуляции.Количество() = 0 Тогда

								СтрокаОперацииАннуляция = СтрокиТекущейАннуляции[0];
								СтрокаОперацииАннуляция.ДокументНачисления	= СтрокаТекущейОперации.ДокументНачисления;
								СтрокаОперацииАннуляция.СуммаБонусныхБаллов	= СтрокаТекущейОперации.СуммаБонусныхБаллов;
								СтрокаОперацииАннуляция.Примечание = СтрокаТекущейОперации.Примечание + "(текущая)";

							Иначе

								СтрокаОперацииАннуляция = ТаблицаТекущая.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаОперацииАннуляция, СтрокаТекущейОперации);

								СтрокаОперацииАннуляция.СписаниеПартий	= Истина;	//	отмечаем добавленные строки

							КонецЕсли;

							СтрокаОперацииАннуляция.ВидДвижения	= ВидДвиженияНакопления.Расход;
							СтрокаОперацииАннуляция.Период		= КонецДня(ДанныеАннуляции.ДатаСписания);
							СтрокаОперацииАннуляция.ВидОперации	= Перечисления.ВидыОперацийБонусныхБаллов.Аннуляция;

						КонецЕсли;

						СуммаБонусныхБалловСписание = СуммаБонусныхБалловСписание - СуммаСписанияПартии;

					КонецЕсли;

					Если СуммаБонусныхБалловСписание > 0 Тогда

					//	Укажем основание продажи, как использованную партию - ведь движения регистра ещё не изменились!
						ТаблицаИспользованныхПартий.Добавить().ДокументНачисления = ДанныеДокументаПродажи.ДокументНачисления;

						ТаблицаПартий = ПолучитьТаблицуПартийКонтрагента(Контрагент
							, СтрокаСписать.ВидОперации
							, СтрокаСписать.ПериодДвижения
							, Регистратор
							, СтрокаСписать.ПрограммаЛояльности
							, Истина
							, ТаблицаИспользованныхПартий
							, Ложь
						);
						ПараметрыСписания = Новый Структура(
							"СтрокаСписать, ИспользоватьТекущую, РежимВозврата, ПереносПартий, ПрефиксПримечения"
							, СтрокаСписать
						//	, СтрокаТекущейОперации.ДокументНачисления = Неопределено//Ложь
							, СтрокаСписать.ВидОперации = Перечисления.ВидыОперацийБонусныхБаллов.Возврат	//	LNK 12.07.2024 08:14:03
							, Истина
							, Истина
							, "В.Н.перенос"
						);

					//	Выполняем возврат сумм в доступные партии
						СписаниеТаблицыПартий(
							  ТаблицаТекущая
							, СтрокаТекущейОперации
							, ТаблицаПартий
							, ТаблицаИспользованныхПартий
							, СуммаБонусныхБалловСписание
							, ПараметрыСписания
							, РЕГ
						);

					КонецЕсли;

				//	В условии ниже НЕ уверен.. имеется ввиду возврат начислений больше, чем было в продаже.
				//	То есть, в таком случае, разница не должна увеличивать начисления.. как бы так.
					Если СтрокаТекущейОперации.СуммаБонусныхБаллов > 0 Тогда	//	LNK 04.12.2021 05:25:22

						ПараметрыПогашения = Новый Структура(
							"ДокументПродажи, Примечание, РеквизитыАннуляции, ПогаситьОстатокПереноса, ИспользоватьТекущую"
							, СтрокаСписать.ДокументПродажи
							, "Погашение возврата начислений [" + СтрокаСписать.ДокументПродажи + "]"
							, Новый Структура(
								"ДокументНачисления, ДатаСписания"
								, СтрокаСписать.ДокументПродажи
								, СтрокаСписать.ДатаСписания
							)
							, Ложь
							, Ложь
						);
						ПогашениеАварийногоДвижения(СтрокаТекущейОперации, СуммаБонусныхБалловСписание, ТаблицаТекущая, ПараметрыПогашения, РЕГ);

					КонецЕсли;

				КонецЕсли;

		//	СПИСАНИЕ НАЧИСЛЕНИЙ БОНУСНЫХ БАЛЛОВ
		//	=======================================================================================
			Иначе
				
			//	При списании начислений документ партии всегда неизвестен.
				СтрокаТекущейОперации.ДокументНачисления  = Неопределено;
			//	для возможного погашения аварийного движения сохраним данные строки
				ОригиналСтрокиТекущей	= ОбщегоНазначенияКлиентСервер.СтрокаТаблицыКакСтруктура(ТаблицаТекущая.Колонки, СтрокаТекущейОперации);
				ПогаситьОстатокПереноса	= СуммаБонусныхБалловСписание;	//	выполнить начисление остатка "перенесенной" партии

				Для НомерПрохода = 1 По 2 Цикл

					Если СуммаБонусныхБалловСписание = 0 Тогда

						Прервать;

					КонецЕсли;

				//	При нормальном состоянии дел вся сумма должна списаться на первом проходе.
				//	Если вся сумма не списалась - какой-то перекос в оплатах бонусами, т.е. оплачено больше, чем начислено.
				//	Гасим такое дело переносом на другие партии (другая программа лояльности).

					ТаблицаПартий = ПолучитьТаблицуПартийКонтрагента(Контрагент
						, СтрокаСписать.ВидОперации
						, СтрокаСписать.ПериодДвижения
						, Регистратор
						, СтрокаСписать.ПрограммаЛояльности
						, ?(НомерПрохода = 1, Ложь, Истина)	// ПолучитьВсеПартии
						, ТаблицаИспользованныхПартий
						, Ложь
					);
					ПараметрыСписания = Новый Структура(
						"СтрокаСписать, ИспользоватьТекущую, РежимВозврата, ПереносПартий, ПрефиксПримечения"
						, СтрокаСписать
						, Истина
						, Ложь
						, ?(НомерПрохода = 1, Ложь, Истина)
						, ?(НомерПрохода = 1, "Списание начислений", "Перенос списаний начислений")
					);

				//	Выполняем непосредственное списание/начисление партий
					СписаниеТаблицыПартий(
						  ТаблицаТекущая
						, СтрокаТекущейОперации
						, ТаблицаПартий, ТаблицаИспользованныхПартий
						, СуммаБонусныхБалловСписание
						, ПараметрыСписания
						, РЕГ
					);
					ПогаситьОстатокПереноса = ?(НомерПрохода = 2, ПогаситьОстатокПереноса - СуммаБонусныхБалловСписание, ПогаситьОстатокПереноса);

				КонецЦикла;

				ПараметрыПогашения = Новый Структура(
					"ДокументПродажи, Примечание, РеквизитыАннуляции, ПогаситьОстатокПереноса, ИспользоватьТекущую"
					, Неопределено
					, "Погашение остатка списания бонусных баллов"
					, Неопределено
					, НЕ ПогаситьОстатокПереноса = 0
					, Ложь
				);
				ПогашениеАварийногоДвижения(ОригиналСтрокиТекущей, СуммаБонусныхБалловСписание, ТаблицаТекущая, ПараметрыПогашения, РЕГ);

			КонецЕсли;

		КонецЦикла;

		РеставрацияАварийногоДвижения(Период, Регистратор, Контрагент, ТаблицаТекущая, ДанныеСписания.Реставрация, РЕГ);

	//	Регистратор отработан.. выполняем завершающие действия

		РЕГ.Рабочий.Загрузить(ТаблицаТекущая);
		РЕГ.Рабочий.Записать();

		РЕГ.Проблемы.Записать();	//	LNK 01.12.2021 20:01:41

	//	Переносим ГП на отработанный регистратор с проверкой последовательности.
		Если НЕ УстановитьГраницу(Период, Регистратор, Контрагент, Истина) Тогда

			а = 22;	//	выясняем, почему?

		КонецЕсли;

//	Это регистратор не требует списания партий (только начисление)
	Иначе

	//	Переносим ГП на регистратор с проверкой последовательности.
		Если НЕ УстановитьГраницу(Период, Регистратор, Контрагент, Истина) Тогда

			а = 22;	//	выясняем, почему?

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область НепосредственнаяРаботаПоСписаниюПартий

Процедура СписаниеТаблицыПартий(ТаблицаТекущая, СтрокаТекущейОперации, ТаблицаПартий, ТаблицаИспользованныхПартий, СуммаБонусныхБалловСписание, ПараметрыСписания, РЕГ);

	#Если _ Тогда
	ПараметрыСписания = Новый Структура("СтрокаСписать, ИспользоватьТекущую, РежимВозврата, ПрефиксПримечения");
	#КонецЕсли

	ЗнакОперации = ?(ПараметрыСписания.РежимВозврата, -1, 1);
//	ИСТИНА в списании продажи или при возврате начисления
	ПервыйПроход = ПараметрыСписания.ИспользоватьТекущую
		И (НЕ ЗначениеЗаполнено(СтрокаТекущейОперации.ДокументНачисления) ИЛИ СтрокаТекущейОперации.ВидОперации = Перечисления.ВидыОперацийБонусныхБаллов.Возврат);

	Для каждого СтрокаПартии Из ТаблицаПартий Цикл

		Если НЕ СтрокаПартии.СуммаБонусныхБаллов > 0 Тогда

			Продолжить;

		КонецЕсли;

		СуммаСписанияПартии = Мин(СуммаБонусныхБалловСписание, СтрокаПартии.СуммаБонусныхБаллов);

		Если СуммаСписанияПартии > 0 Тогда

			Если ПервыйПроход Тогда

			//	Первое списание относим на текущую строку операции регистра "БонусныеБаллы"
			//	Это НЕ "СписаниеПартий = Истина"! Не забываем.
				СтрокаОперацииПартия = СтрокаТекущейОперации;
				СтрокаОперацииПартия.СуммаБонусныхБалловОригинал = СтрокаОперацииПартия.СуммаБонусныхБаллов;

			Иначе

				СтрокаОперацииПартия = ТаблицаТекущая.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОперацииПартия, СтрокаТекущейОперации);
				СтрокаОперацииПартия.СписаниеПартий = Истина;	//	отмечаем добавленные строки

			КонецЕсли;

			Если ПараметрыСписания.РежимВозврата ИЛИ ПараметрыСписания.ПереносПартий Тогда

				СтрокаОперацииПартия.Перенос_ПрограммаЛояльности = СтрокаТекущейОперации.ПрограммаЛояльности;

				Если ПараметрыСписания.РежимВозврата Тогда

					СтрокаОперацииПартия.Перенос_ДокументНачисления = ПараметрыСписания.СтрокаСписать.ДокументПродажи;

				КонецЕсли;

			КонецЕсли;

			РЕГ.Рабочий.Записывать = Истина;	//	флаг изменения данных таблицы.
			СтрокаОперацииПартия.ПрограммаЛояльности = СтрокаПартии.ПрограммаЛояльности;
			СтрокаОперацииПартия.ДокументНачисления  = СтрокаПартии.ДокументНачисления;
			СтрокаОперацииПартия.СуммаБонусныхБаллов = СуммаСписанияПартии * ЗнакОперации;
			СтрокаОперацииПартия.Примечание = ПараметрыСписания.ПрефиксПримечения;

		//	LNK 13.07.2024 08:23:39	- аннуляция при возврате уже сделана
			Если НЕ СтрокаТекущейОперации.ВидОперации = Перечисления.ВидыОперацийБонусныхБаллов.Возврат Тогда

			//	.. сторнируем аннуляцию на списанную сумму партии
				ДанныеАннуляции = ПолучитьДанныеАннуляции(СтрокаОперацииПартия);

				Если НЕ ДанныеАннуляции.ДатаСписания = '00010101' Тогда

					СтрокаОперацииАннуляция = ТаблицаТекущая.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОперацииАннуляция, СтрокаОперацииПартия);

					СтрокаОперацииАннуляция.Период				= КонецДня(ДанныеАннуляции.ДатаСписания);
					СтрокаОперацииАннуляция.ВидДвижения			= ВидДвиженияНакопления.Расход;	//	всегда расход!
					СтрокаОперацииАннуляция.ВидОперации			= Перечисления.ВидыОперацийБонусныхБаллов.Аннуляция;
					СтрокаОперацииАннуляция.СписаниеПартий		= Истина;	//	отмечаем добавленные строки
					СтрокаОперацииАннуляция.СуммаБонусныхБаллов = -СуммаСписанияПартии;	//	всегода СТОРНО!

					Если ПараметрыСписания.РежимВозврата ИЛИ ПараметрыСписания.ПереносПартий Тогда

						СтрокаОперацииАннуляция.Перенос_ПрограммаЛояльности = СтрокаТекущейОперации.ПрограммаЛояльности;

						Если ПараметрыСписания.РежимВозврата Тогда

							СтрокаОперацииАннуляция.Перенос_ДокументНачисления = ПараметрыСписания.СтрокаСписать.ДокументПродажи;

						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

			ПервыйПроход  = Ложь;

			СтрокаПартии.СуммаБонусныхБаллов = СтрокаПартии.СуммаБонусныхБаллов - СуммаСписанияПартии;
			УстановитьИспользованнуюПартию(СтрокаПартии, ТаблицаИспользованныхПартий);

			СуммаБонусныхБалловСписание = СуммаБонусныхБалловСписание - СуммаСписанияПартии;

		КонецЕсли;

		Если СуммаБонусныхБалловСписание = 0 Тогда

			Прервать;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//	LNK 08.10.2021 07:06:53
Процедура ПогашениеАварийногоДвижения(СтрокаТекущейОперации, СуммаБонусныхБалловСписание, ТаблицаТекущая, ПараметрыПогашения, РЕГ)

	Если НЕ СуммаБонусныхБалловСписание = 0 Тогда

	//	Нет остатков начислений для списания суммы баллов.. печально.
	//	Вероятно, имеет место какой-то сбой при получении суммы баллов для оплаты либо ещё что-то.
	//	Добавляем такую-же сторнирующую строку.. то есть дарим клиенту эту сумму.

		РЕГ.Рабочий.Записывать = Истина;	//	флаг изменения данных таблицы.

		Если ПараметрыПогашения.ИспользоватьТекущую Тогда
			
			СтрокаОперацииПартия = СтрокаТекущейОперации;

		Иначе

			СтрокаОперацииПартия = ТаблицаТекущая.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОперацииПартия, СтрокаТекущейОперации);
			СтрокаОперацииПартия.СписаниеПартий	= Истина;	//	отмечаем добавленные строки
			СтрокаОперацииПартия.Перенос_ДокументНачисления = ПараметрыПогашения.ДокументПродажи;

		КонецЕсли;

		СтрокаОперацииПартия.СуммаБонусныхБалловОригинал = СтрокаТекущейОперации.СуммаБонусныхБаллов;
		СтрокаОперацииПартия.СуммаБонусныхБаллов = СуммаБонусныхБалловСписание * ?(СтрокаОперацииПартия.СуммаБонусныхБаллов > 0, -1, 1);
		СтрокаОперацииПартия.Примечание			 = "ПРОБЛЕМА: " + ПараметрыПогашения.Примечание;
		СтрокаОперацииПартия.Авария				 = Истина;

		БонусныеБаллыПогашениеРегистрацияАварии(СтрокаОперацииПартия, РЕГ);

		Если ПараметрыПогашения.ПогаситьОстатокПереноса Тогда

			СтрокаОперацииПеренос = ТаблицаТекущая.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОперацииПеренос, СтрокаОперацииПартия);
			СтрокаОперацииПеренос.СписаниеПартий = Истина;	//	отмечаем добавленные строки

			СтрокаОперацииПеренос.СуммаБонусныхБаллов = -СтрокаОперацииПеренос.СуммаБонусныхБаллов;
			СтрокаОперацииПеренос.Примечание		  = "ПРОБЛЕМА: ввод компенсации перенесенного списания";
			СтрокаОперацииПеренос.СуммаБонусныхБалловОригинал = СтрокаТекущейОперации.СуммаБонусныхБаллов;

		КонецЕсли;

		Если НЕ ПараметрыПогашения.РеквизитыАннуляции = Неопределено И НЕ ПараметрыПогашения.РеквизитыАннуляции.ДатаСписания = '00010101' Тогда

		//	.. сторнируем аннуляцию на списанную сумму бонусных баллов
			СтрокаОперацииАннуляция = ТаблицаТекущая.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОперацииАннуляция, СтрокаОперацииПартия);
			СтрокаОперацииАннуляция.СписаниеПартий = Истина;	//	отмечаем добавленные строки

			СтрокаОперацииАннуляция.ВидДвижения		= ВидДвиженияНакопления.Расход;
			СтрокаОперацииАннуляция.Период			= КонецДня(ПараметрыПогашения.РеквизитыАннуляции.ДатаСписания);
			СтрокаОперацииАннуляция.ВидОперации		= Перечисления.ВидыОперацийБонусныхБаллов.Аннуляция;
			СтрокаОперацииАннуляция.СписаниеПартий	= Истина;	//	отмечаем добавленные строки

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура РеставрацияАварийногоДвижения(Период, Регистратор, Контрагент, ТаблицаТекущая, Реставрация, РЕГ)

	Если НЕ Реставрация.СуммаБонусныхБаллов > 0 Тогда	//	.. то и говорить не о чем

		Возврат;

	КонецЕсли;

	ТаблицаРеставрации  = ТаблицаТекущая.СкопироватьКолонки();
	ТаблицаПогашения	= РЕГ.Проблемы.Выгрузить();
	ТаблицаПогашенияРес	= ТаблицаПогашения.СкопироватьКолонки();

	Для каждого СтрокаТекущейОперации Из ТаблицаТекущая Цикл

		Если НЕ (СтрокаТекущейОперации.ВидОперации = Перечисления.ВидыОперацийБонусныхБаллов.Начисление И НЕ СтрокаТекущейОперации.СписаниеПартий И СтрокаТекущейОперации.СуммаБонусныхБаллов > 0) Тогда

			Продолжить;

		КонецЕсли;

		Если Реставрация.СуммаБонусныхБаллов > 0 Тогда

			СуммаБонусныхБалловТекущая = СтрокаТекущейОперации.СуммаБонусныхБаллов;

			Для каждого СтрокаОстаток Из Реставрация.Таблица Цикл

				Если НЕ (СтрокаОстаток.СуммаБонусныхБаллов > 0 И СуммаБонусныхБалловТекущая > 0) Тогда

					Продолжить;

				КонецЕсли;

				СуммаБонусныхБалловПринять = Мин(СуммаБонусныхБалловТекущая, Мин(СтрокаОстаток.СуммаБонусныхБаллов, Реставрация.СуммаБонусныхБаллов));

				Если СуммаБонусныхБалловПринять > 0 Тогда

				//	1. Фиксируем запись "Начисление" восстановления "подаренной" ранее суммы.
				//	---------------------------------------------------------------------------------------
					СтрокаРеставрации = ТаблицаРеставрации.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРеставрации, СтрокаТекущейОперации);
				//	запись реставрации всегда сторнирующая!
					СтрокаРеставрации.ВидОперации		  = Перечисления.ВидыОперацийБонусныхБаллов.Реставрация;
					СтрокаРеставрации.СуммаБонусныхБаллов = - СуммаБонусныхБалловПринять;
					СтрокаРеставрации.СписаниеПартий	  = Истина;
					СтрокаРеставрации.Перенос_ПрограммаЛояльности = ?(НЕ СтрокаОстаток.ПрограммаЛояльности = СтрокаРеставрации.ПрограммаЛояльности, СтрокаОстаток.ПрограммаЛояльности, Неопределено);
					СтрокаРеставрации.Перенос_ДокументНачисления  = СтрокаОстаток.ДокументНачисления;
					СтрокаРеставрации.Примечание = "Погашение задолженности «подаренной суммы»";

				//	2. Аналогично сторнируем "Аннуляцию", если таковая имеется ..
				//	---------------------------------------------------------------------------------------
					СтрокиАннуляции = ТаблицаТекущая.НайтиСтроки(Новый Структура(
							"ВидОперации, ПрограммаЛояльности, ДокументНачисления, СуммаБонусныхБаллов"
							, Перечисления.ВидыОперацийБонусныхБаллов.Аннуляция
							, СтрокаТекущейОперации.ПрограммаЛояльности
							, СтрокаТекущейОперации.ДокументНачисления
							, СтрокаТекущейОперации.СуммаБонусныхБаллов
						)
					);

					Если НЕ СтрокиАннуляции.Количество() = 0 Тогда

						СтрокаАннуляции = ТаблицаРеставрации.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаАннуляции, СтрокиАннуляции[0]);
					//	запись реставрации всегда сторнирующая!
						СтрокаАннуляции.ВидОперации			= Перечисления.ВидыОперацийБонусныхБаллов.Реставрация;
						СтрокаАннуляции.СуммаБонусныхБаллов	= - СуммаБонусныхБалловПринять;
						СтрокаАннуляции.СписаниеПартий		= Истина;
						СтрокаАннуляции.Перенос_ПрограммаЛояльности = ?(НЕ СтрокаОстаток.ПрограммаЛояльности = СтрокаАннуляции.ПрограммаЛояльности, СтрокаОстаток.ПрограммаЛояльности, Неопределено);
						СтрокаАннуляции.Перенос_ДокументНачисления  = СтрокаОстаток.ДокументНачисления;
						СтрокаАннуляции.Примечание = "Погашение задолженности «подаренной суммы»";

					КонецЕсли;

				//	3. Погашаем восстановленную сумму в регистре аварийных погашений.
				//	---------------------------------------------------------------------------------------
					СтрокаПогашения = ТаблицаПогашенияРес.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПогашения, СтрокаРеставрации);
					СтрокаПогашения.ВидДвижения = ВидДвиженияНакопления.Расход;
					СтрокаПогашения.ВидОперации			= Перечисления.ВидыОперацийБонусныхБаллов.Реставрация;
					СтрокаПогашения.ДокументНачисления	= СтрокаОстаток.ДокументНачисления;
					СтрокаПогашения.ПрограммаЛояльности	= СтрокаОстаток.ПрограммаЛояльности;
					СтрокаПогашения.СуммаБонусныхБаллов	= СуммаБонусныхБалловПринять;
					СтрокаПогашения.СписаниеПартий		= Истина;

				//	4. Учитываем использованную сумму в данных остатка.
				//	---------------------------------------------------------------------------------------
					Реставрация.СуммаБонусныхБаллов	  = Реставрация.СуммаБонусныхБаллов - СуммаБонусныхБалловПринять;
					СтрокаОстаток.СуммаБонусныхБаллов = СтрокаОстаток.СуммаБонусныхБаллов - СуммаБонусныхБалловПринять;
					СуммаБонусныхБалловТекущая		  = СуммаБонусныхБалловТекущая - СуммаБонусныхБалловПринять;

				КонецЕсли;

				Если НЕ Реставрация.СуммаБонусныхБаллов > 0 Тогда

					Прервать;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	Если НЕ ТаблицаРеставрации.Количество() = 0 Тогда

	//	ИТОГ. Переносим "временные" таблицы в основные и сортируем по "Период"
	//	---------------------------------------------------------------------------------------
		ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(ТаблицаРеставрации , ТаблицаТекущая, Ложь);
		ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(ТаблицаПогашенияРес, ТаблицаПогашения, Ложь);

		ТаблицаТекущая.Сортировать("Период");
		ТаблицаПогашения.Сортировать("Период");

		РЕГ.Проблемы.Загрузить(ТаблицаПогашения);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаПоРегистрацииЛишнегоСписанияЕгоРеставрации	//	LNK 03.12.2021 05:49:20

Процедура БонусныеБаллыПогашениеРегистрацияАварии(СтрокаОперацииПартия, РЕГ)

	РЕГ.Проблемы.Записывать = Истина;	//	флаг изменения данных таблицы.

	СтрокаПогашения = РЕГ.Проблемы.Добавить();
	#Если _ Тогда
	СтрокаПогашения = РегистрыНакопления.БонусныеБаллыПогашение.СоздатьНаборЗаписей().Добавить();
	#КонецЕсли

	ЗаполнитьЗначенияСвойств(СтрокаПогашения, СтрокаОперацииПартия);	//	дефолтное заполнение

//	Регистр является "зеркальным" отображением "БонусныеБаллы", поэтому устанавливаем "обратные" движение и сумму.
	СтрокаПогашения.ВидДвижения			= ?(СтрокаОперацииПартия.ВидДвижения = ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
	СтрокаПогашения.СуммаБонусныхБаллов	= СтрокаОперацииПартия.СуммаБонусныхБаллов
		* ?(СтрокаПогашения.ВидОперации = Перечисления.ВидыОперацийБонусныхБаллов.Возврат, 1, -1);

//	сбрасываем флаг.. "СписаниеПартий" будет установлен только в строках "использования" остатка суммы
	СтрокаПогашения.СписаниеПартий = Ложь;

//	для этого регистра данная запись является начислением.
	СтрокаПогашения.ДокументНачисления = СтрокаПогашения.ДокументОперации;

КонецПроцедуры

#КонецОбласти

#Область ПолучениеИПодготовкаТаблицДляСписания

Функция ПолучитьДанныеДляСписания(Период, Регистратор, Контрагент)

	ДанныеСписания = Новый Структура(
		"СписаниеПартий, ТаблицаСписать, Реставрация"
		, Ложь
		, Новый ТаблицаЗначений
		, Новый Структура("СуммаБонусныхБаллов, Таблица", 0, Новый ТаблицаЗначений)
	);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСписание.ВидОперации КАК ВидОперации,
	|	ТаблицаСписание.ПериодДвижения КАК ПериодДвижения,
	|	ТаблицаСписание.ДатаОперации КАК ДатаОперации,
	|	ТаблицаСписание.ДатаНачисления КАК ДатаНачисления,
	|	ТаблицаСписание.ДатаСписания КАК ДатаСписания,
	|	ТаблицаСписание.ДокументОперации КАК ДокументОперации,
	|	ВЫБОР
	|		КОГДА ТаблицаСписание.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Возврат)
	|			ТОГДА ТаблицаСписание.ДокументПродажи
	|		ИНАЧЕ ТаблицаСписание.ДокументПродажи
	|	КОНЕЦ КАК ДокументПродажи,
	|	ТаблицаСписание.Контрагент КАК Контрагент,
	|	ТаблицаСписание.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТаблицаСписание.СуммаБонусныхБаллов * ВЫБОР
	|		КОГДА ТаблицаСписание.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Возврат)
	|			ТОГДА -1
	|		КОГДА ТаблицаСписание.ДокументПродажи В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Документ.РеализацияТоваров.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))
	|			ТОГДА 1
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК СуммаБонусныхБаллов,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаСписание.ДокументОперации) = ТИП(Документ.НачислениеИСписаниеБонусныхБаллов)
	|				И ТаблицаСписание.СуммаБонусныхБаллов < 0
	|			ТОГДА ИСТИНА
	|		КОГДА ТаблицаСписание.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Возврат)
	|			ТОГДА ИСТИНА
	|		КОГДА ТаблицаСписание.ДокументПродажи В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Документ.РеализацияТоваров.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВозвратБонусныхБаллов,
	|	ТаблицаСписание.СписаниеПартий КАК СписаниеПартий
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	РегистрСведений.СписанныеБонусныеБаллы КАК ТаблицаСписание
	|ГДЕ
	|	ТаблицаСписание.Регистратор = &Регистратор
	|	И ТаблицаСписание.Контрагент = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСписаний.ВидОперации КАК ВидОперации,
	|	ТаблицаСписаний.ПериодДвижения КАК ПериодДвижения,
	|	ТаблицаСписаний.ДатаОперации КАК ДатаОперации,
	|	ТаблицаСписаний.ДатаНачисления КАК ДатаНачисления,
	|	ТаблицаСписаний.ДатаСписания КАК ДатаСписания,
	|	ТаблицаСписаний.ДокументОперации КАК ДокументОперации,
	|	ТаблицаСписаний.ДокументПродажи КАК ДокументПродажи,
	|	ТаблицаСписаний.Контрагент КАК Контрагент,
	|	ТаблицаСписаний.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТаблицаСписаний.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов,
	|	ТаблицаСписаний.ВозвратБонусныхБаллов КАК ВозвратБонусныхБаллов
	|ИЗ
	|	Источник КАК ТаблицаСписаний
	|ГДЕ
	|	ТаблицаСписаний.СписаниеПартий
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(Источник.ДатаНачисления) КАК ДатаНачисления
	|ИЗ
	|	Источник КАК Источник
	|ГДЕ
	|	Источник.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Начисление)
	|	И НЕ Источник.ВозвратБонусныхБаллов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	);
	Запрос.УстановитьПараметр("Регистратор"	, Регистратор);
	Запрос.УстановитьПараметр("Контрагент"	, Контрагент);

	РезультатыЗапроса = Запрос.ВыполнитьПакет();

	Если НЕ РезультатыЗапроса[1].Пустой() Тогда

		ДанныеСписания.СписаниеПартий = Истина;
		ДанныеСписания.ТаблицаСписать = РезультатыЗапроса[1].Выгрузить();

	КонецЕсли;

	Если НЕ РезультатыЗапроса[2].Пустой() Тогда

		ВыборкаПериод = РезультатыЗапроса[2].Выбрать();
		ВыборкаПериод.Следующий();

		Если ТипЗнч(ВыборкаПериод.ДатаНачисления) = Тип("Дата") И НЕ ВыборкаПериод.ДатаНачисления = '00010101' Тогда

			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаПогашения.ПрограммаЛояльности КАК ПрограммаЛояльности,
			|	ТаблицаПогашения.ДокументНачисления КАК ДокументНачисления,
			|	ТаблицаПогашения.СуммаБонусныхБалловОстаток КАК СуммаБонусныхБаллов
			|ИЗ
			|	РегистрНакопления.БонусныеБаллыПогашение.Остатки(&ГраницаСреза, Контрагент = &Контрагент) КАК ТаблицаПогашения
			|ИТОГИ
			|	СУММА(СуммаБонусныхБаллов)
			|ПО
			|	ОБЩИЕ"
			;
			Запрос.УстановитьПараметр("ГраницаСреза", Новый Граница(Новый МоментВремени(ВыборкаПериод.ДатаНачисления, Регистратор), ВидГраницы.Исключая));

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда

				ВыборкаРеставрация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				ВыборкаРеставрация.Следующий();

				ДанныеСписания.Реставрация.СуммаБонусныхБаллов = ВыборкаРеставрация.СуммаБонусныхБаллов;

				ДанныеСписания.Реставрация.Таблица = ОбщегоНазначенияКлиентСервер.ОформитьСтруктуруТаблицы(РезультатЗапроса.Колонки);

				ВыборкаДетали = ВыборкаРеставрация.Выбрать();

				Пока ВыборкаДетали.Следующий() Цикл

					СтрокаТаблицы = ДанныеСписания.Реставрация.Таблица.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаДетали);

				КонецЦикла;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат ДанныеСписания;

КонецФункции

Функция ПолучитьТаблицуТекущую(Регистратор, Контрагент, РЕГ)

	СтрокиУдалить  = Новый Массив;
	ТаблицаТекущая = РЕГ.Рабочий.Выгрузить();

	Для каждого СтрокаТаблицы Из ТаблицаТекущая Цикл

		Если НЕ СтрокаТаблицы.Контрагент = Контрагент Тогда

			Продолжить;

		КонецЕсли;

		Если СтрокаТаблицы.СписаниеПартий = Истина Тогда

			СтрокиУдалить.Добавить(СтрокаТаблицы);

		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийБонусныхБаллов.Использование
			И НЕ  СтрокаТаблицы.Перенос_ПрограммаЛояльности.Пустая() Тогда

		//	Восстанавливаем, иначе не сможем найти текущую строку..
			СтрокаТаблицы.ПрограммаЛояльности = СтрокаТаблицы.Перенос_ПрограммаЛояльности;

		КонецЕсли;

		СтрокаТаблицы.Авария = Ложь;	//	.. сбрасываем возможный флаг аларма
		СтрокаТаблицы.Примечание = "";	//	.. очищаем сопроводительный текст
		СтрокаТаблицы.Перенос_ПрограммаЛояльности = Справочники.ПрограммыЛояльности.ПустаяСсылка();

	КонецЦикла;

	Для каждого СтрокаТаблицы Из СтрокиУдалить Цикл

		ТаблицаТекущая.Удалить(СтрокаТаблицы);

	КонецЦикла;

	Возврат ТаблицаТекущая;

КонецФункции

Функция ПолучитьТаблицуПартийКонтрагента(Контрагент, ВидОперации, Период, Регистратор, ПрограммаЛояльности, ПолучитьВсеПартии, ТаблицаИспользованныхПартий, ПустаяТаблица)

	Если ПустаяТаблица = Ложь Тогда

		Запрос = Новый Запрос;

		Запрос.УстановитьПараметр("Контрагент"			, Контрагент);
		Запрос.УстановитьПараметр("ПрограммаЛояльности"	, ПрограммаЛояльности);
		Запрос.УстановитьПараметр("ГраницаСреза"		, Новый Граница(Новый МоментВремени(Период, Регистратор), ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("ПолучитьВсеПартии"	, ПолучитьВсеПартии);
		Запрос.УстановитьПараметр("ТаблицаПартий"		, ТаблицаИспользованныхПартий);
		Запрос.УстановитьПараметр("Период"				, Период);

		Если ВидОперации = Перечисления.ВидыОперацийБонусныхБаллов.Возврат Тогда

		//	Параметр запроса "СписокИспользовано" (массив) содержит, собственно, только документ начисления,
		//	в который и нужно вернуть партии, им начисленные.
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаПартий.ДокументНачисления КАК ДокументНачисления
			|ПОМЕСТИТЬ Партии
			|ИЗ
			|	&ТаблицаПартий КАК ТаблицаПартий
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаНакоплений.Период КАК Период,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаСписания,
			|	ТаблицаНакоплений.ДокументНачисления КАК ДокументНачисления,
			|	ТаблицаНакоплений.ПрограммаЛояльности КАК ПрограммаЛояльности,
			|	ТаблицаНакоплений.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов,
			|	ВЫБОР
			|		КОГДА ТаблицаНакоплений.ПрограммаЛояльности = &ПрограммаЛояльности
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК КлючПорядка
			|ИЗ
			|	РегистрНакопления.БонусныеБаллы КАК ТаблицаНакоплений
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Партии КАК Фильтр
			|		ПО ТаблицаНакоплений.Регистратор = Фильтр.ДокументНачисления
			|			И (ТаблицаНакоплений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Начисление))
			|
			|УПОРЯДОЧИТЬ ПО
			|	КлючПорядка,
			|	ДатаСписания,
			|	Период,
			|	ДокументНачисления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ Партии";

		Иначе

			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаПартий.ДокументНачисления КАК ДокументНачисления
			|ПОМЕСТИТЬ Партии
			|ИЗ
			|	&ТаблицаПартий КАК ТаблицаПартий
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаПоддержка.ПериодДвижения КАК Период,
			|	ТаблицаПоддержка.ДатаСписания КАК ДатаСписания,
			|	ТаблицаНакоплений.ДокументНачисления КАК ДокументНачисления,
			|	ТаблицаНакоплений.ПрограммаЛояльности КАК ПрограммаЛояльности
			|ПОМЕСТИТЬ Фильтр
			|ИЗ
			|	РегистрНакопления.БонусныеБаллы.Остатки(
			|			&ГраницаСреза,
			|			Контрагент = &Контрагент
			|				И ВЫБОР
			|					КОГДА &ПолучитьВсеПартии = ИСТИНА
			|						ТОГДА ИСТИНА
			|					ИНАЧЕ ПрограммаЛояльности = &ПрограммаЛояльности
			|				КОНЕЦ) КАК ТаблицаНакоплений
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеБонусныеБаллы КАК ТаблицаПоддержка
			|		ПО ТаблицаНакоплений.ДокументНачисления = ТаблицаПоддержка.ДокументОперации
			|			И ТаблицаНакоплений.Контрагент = ТаблицаПоддержка.Контрагент
			|			И ТаблицаНакоплений.ПрограммаЛояльности = ТаблицаПоддержка.ПрограммаЛояльности
			|			И (ТаблицаПоддержка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Начисление))
			|			И (ТаблицаПоддержка.ДатаСписания = ДАТАВРЕМЯ(1, 1, 1)
			|				ИЛИ ТаблицаПоддержка.ДатаСписания > &Период)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Партии КАК ТаблицаПартии
			|		ПО ТаблицаНакоплений.ДокументНачисления = ТаблицаПартии.ДокументНачисления
			|ГДЕ
			|	ТаблицаНакоплений.СуммаБонусныхБалловОстаток > 0
			|	И ТаблицаПартии.ДокументНачисления ЕСТЬ NULL
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ДокументНачисления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Фильтр.Период КАК Период,
			|	Фильтр.ДатаСписания КАК ДатаСписания,
			|	ТаблицаНакоплений.ПрограммаЛояльности КАК ПрограммаЛояльности,
			|	ТаблицаНакоплений.ДокументНачисления КАК ДокументНачисления,
			|	ТаблицаНакоплений.СуммаБонусныхБалловОстаток КАК СуммаБонусныхБаллов,
			|	ВЫБОР
			|		КОГДА ТаблицаНакоплений.ПрограммаЛояльности = &ПрограммаЛояльности
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК КлючПорядка
			|ИЗ
			|	РегистрНакопления.БонусныеБаллы.Остатки(
			|			&ГраницаСреза,
			|			Контрагент = &Контрагент
			|				И ВЫБОР
			|					КОГДА &ПолучитьВсеПартии = ИСТИНА
			|						ТОГДА ИСТИНА
			|					ИНАЧЕ ПрограммаЛояльности = &ПрограммаЛояльности
			|				КОНЕЦ) КАК ТаблицаНакоплений
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
			|		ПО ТаблицаНакоплений.ДокументНачисления = Фильтр.ДокументНачисления
			|			И ТаблицаНакоплений.ПрограммаЛояльности = Фильтр.ПрограммаЛояльности
			|ГДЕ
			|	ТаблицаНакоплений.СуммаБонусныхБалловОстаток > 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	КлючПорядка,
			|	ДатаСписания,
			|	Период,
			|	ДокументНачисления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ Партии
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ Фильтр"
			;

		КонецЕсли;

		ТаблицаПартий = Запрос.Выполнить().Выгрузить();

		Для каждого СтрокаИспользовано Из ТаблицаИспользованныхПартий Цикл

			СтрокиПартий = ТаблицаПартий.НайтиСтроки(
				Новый Структура(
					"Период, ПрограммаЛояльности, ДокументНачисления"
					, СтрокаИспользовано.Период
					, СтрокаИспользовано.ПрограммаЛояльности
					, СтрокаИспользовано.ДокументНачисления
				)
			);

			Для каждого СтрокаПартии Из СтрокиПартий Цикл

				СтрокаПартии.СуммаБонусныхБаллов = СтрокаИспользовано.СуммаБонусныхБаллов;

			КонецЦикла;

		КонецЦикла;

	Иначе

		ТаблицаПартий = Новый ТаблицаЗначений;
		ТаблицаПартий.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		ТаблицаПартий.Колонки.Добавить("ПрограммаЛояльности", Новый ОписаниеТипов("СправочникСсылка.ПрограммыЛояльности"));
		ТаблицаПартий.Колонки.Добавить("ДокументНачисления" , Новый ОписаниеТипов(ОбщегоНазначенияПовтИсп.ТипыАтрибутаРазделаУчета("РегистрыНакопления", "БонусныеБаллы", "Измерения", "ДокументНачисления")));
		ТаблицаПартий.Колонки.Добавить("СуммаБонусныхБаллов", Новый ОписаниеТипов("Число"));

	КонецЕсли;
	
	Возврат ТаблицаПартий;

КонецФункции

Процедура СоздатьНаборыЗаписей(РЕГ, Регистратор)	//	LNK 10.12.2021 16:04:47

	РЕГ = Новый Структура;

//	Таблицу покашения всегда формируем заново - поэтому не читаем.
	РЕГ.Вставить("Проблемы", РегистрыНакопления.БонусныеБаллыПогашение.СоздатьНаборЗаписей());
	РЕГ.Проблемы.Отбор.Регистратор.Установить(Регистратор);
//	---------------------------------------------------------------------------------------
	РЕГ.Вставить("Рабочий", РегистрыНакопления.БонусныеБаллы.СоздатьНаборЗаписей());
	РЕГ.Рабочий.Отбор.Регистратор.Установить(Регистратор);
	РЕГ.Рабочий.ДополнительныеСвойства.Вставить("ОтключитьУправлениеПоследовательностью", Истина);
	РЕГ.Рабочий.Прочитать();

КонецПроцедуры

#КонецОбласти

#Область ЛокальнаяПоддержкаФункционалаПартионныхСписаний

Функция УстановитьГраницу(Период, Регистратор, Контрагент, Проверять = Истина)

	МоментГраницы	= Новый МоментВремени(Период, Регистратор);
	СтруктураДанных	= Новый Структура("Контрагент", Контрагент);

	ПоследовательностьПроверена = ?(Проверять = Истина
		, Последовательности.СписаниеБонусныхПрограмм.Проверить(МоментГраницы, СтруктураДанных)
		, Истина
	);

	Если ПоследовательностьПроверена Тогда

		Последовательности.СписаниеБонусныхПрограмм.УстановитьГраницу(МоментГраницы, СтруктураДанных);

	КонецЕсли;

	Возврат ПоследовательностьПроверена;

КонецФункции

Функция ПолучитьСтрокуТекущейОперации(Контрагент, СтрокаСписать, ТаблицаТекущая)

	СтрокиТаблицаТекущая = ТаблицаТекущая.НайтиСтроки(
		Новый Структура(
			"Контрагент, ПрограммаЛояльности, ВидОперации, ДокументОперации, СписаниеПартий, Перенос_ПрограммаЛояльности"
			, Контрагент
			, СтрокаСписать.ПрограммаЛояльности
			, СтрокаСписать.ВидОперации
			, СтрокаСписать.ДокументОперации
			, Ложь
			, Справочники.ПрограммыЛояльности.ПустаяСсылка()
		)
	);

	Если СтрокиТаблицаТекущая.Количество() = 1 Тогда

		СтрокаТекущейОперации = СтрокиТаблицаТекущая[0];

	Иначе

		ВызватьИсключение "Ошибка 'СтрокиОперации.БонусныеБаллы' ["
			+ СокрЛП(Контрагент)
			+ ", " + СокрЛП(СтрокаСписать.ПрограммаЛояльности)
			+ ", " + СокрЛП(СтрокаСписать.ВидОперации)
			+ ", " + СокрЛП(СтрокаСписать.ДокументОперации)
			+ ", " + Формат(СтрокаСписать.СуммаБонусныхБаллов, "ЧДЦ=2; ЧН=0,00")
			+ "]";

	КонецЕсли;

	Возврат СтрокаТекущейОперации;

КонецФункции

Функция ПолучитьДанныеАннуляции(СтрокаОперацииПартия)

	ДанныеАннуляции = Новый Структура;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаРегистра.ВидОперации КАК ВидОперации,
	|	ТаблицаРегистра.ДатаСписания КАК ДатаСписания,
	|	ТаблицаРегистра.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов
	|ИЗ
	|	РегистрСведений.СписанныеБонусныеБаллы КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Контрагент = &Контрагент
	|	И ТаблицаРегистра.ПрограммаЛояльности = &ПрограммаЛояльности
	|	И ТаблицаРегистра.ДокументОперации = &ДокументОперации
	|	И ТаблицаРегистра.ВидОперации = значение(Перечисление.ВидыОперацийБонусныхБаллов.Аннуляция)"
	);
	Запрос.УстановитьПараметр("Контрагент"			, СтрокаОперацииПартия.Контрагент);
	Запрос.УстановитьПараметр("ПрограммаЛояльности"	, СтрокаОперацииПартия.ПрограммаЛояльности);
	Запрос.УстановитьПараметр("ДокументОперации"	, СтрокаОперацииПартия.ДокументНачисления);

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, Выборка, ДанныеАннуляции,, Истина);

	Возврат ДанныеАннуляции;

КонецФункции

Функция ПолучитьДанныеДокументаПродажи(ДокументПродажи, Контрагент, ПрограммаЛояльности, ВидОперации, Период, ПериодТекущий, ГраницаСреза, ТаблицаТекущая, Регистратор, ДокументОперации)

	ДанныеДокументаПродажи = Новый Структура;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПродажи"		, ДокументПродажи);
	Запрос.УстановитьПараметр("Период"				, Период);
	Запрос.УстановитьПараметр("ПериодТекущий"		, ПериодТекущий);
	Запрос.УстановитьПараметр("ПрограммаЛояльности"	, ПрограммаЛояльности);
	Запрос.УстановитьПараметр("Контрагент"			, Контрагент);
	Запрос.УстановитьПараметр("ВидОперации"			, ВидОперации);
	Запрос.УстановитьПараметр("ГраницаСреза"		, ГраницаСреза);
	Запрос.УстановитьПараметр("ТаблицаТекущая"		, ТаблицаТекущая);
	Запрос.УстановитьПараметр("Регистратор"			, Регистратор);

	Если ВидОперации = Перечисления.ВидыОперацийБонусныхБаллов.Использование Тогда

		Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Регистратор КАК Регистратор,
		|	Таблица.ДокументНачисления КАК ДокументНачисления,
		|	Таблица.ДокументОперации КАК ДокументОперации,
		|	Таблица.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов,
		|	Таблица.ПрограммаЛояльности КАК ПрограммаЛояльности
		|ПОМЕСТИТЬ Текущая
		|ИЗ
		|	&ТаблицаТекущая КАК Таблица
		|ГДЕ
		|	Таблица.ДокументОперации = &ДокументПродажи
		|	И Таблица.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Использование)
		|	И Таблица.ПрограммаЛояльности = &ПрограммаЛояльности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПродажи.Регистратор КАК Регистратор,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаПродажи.ДокументНачисления) = ТИП(Документ.ЧекККМ)
		|				И ЕСТЬNULL(УчетнаяПолитика.ИспользоватьЧекиКакРегистраторыНачисленияБонусныхБаллов, ИСТИНА) = ЛОЖЬ
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаПродажи.ДокументНачисления.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
		|						ТОГДА ТаблицаПродажи.ДокументНачисления.ОтчетОРозничныхПродажах
		|					ИНАЧЕ ТаблицаПродажи.ДокументНачисления
		|				КОНЕЦ
		|		ИНАЧЕ ТаблицаПродажи.ДокументНачисления
		|	КОНЕЦ КАК РегистраторНачисления,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Начисление) КАК ВидОперации,
		|	ТаблицаПродажи.ДокументОперации КАК ДокументОперации,
		|	ТаблицаПродажи.ДокументНачисления КАК ДокументНачисления,
		|	ТаблицаПродажи.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов,
		|	ТаблицаПродажи.ПрограммаЛояльности КАК ПрограммаЛояльности
		|ПОМЕСТИТЬ ИспользованоПродажей
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ТаблицаПродажи.ДокументОперации) = ТИП(Документ.ЧекККМ)
		|					И ЕСТЬNULL(УчетнаяПолитика.ИспользоватьЧекиКакРегистраторыНачисленияБонусныхБаллов, ИСТИНА) = ЛОЖЬ
		|				ТОГДА ВЫБОР
		|						КОГДА ТаблицаПродажи.ДокументОперации.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
		|							ТОГДА ТаблицаПродажи.ДокументОперации.ОтчетОРозничныхПродажах
		|						ИНАЧЕ ТаблицаПродажи.ДокументОперации
		|					КОНЕЦ
		|			ИНАЧЕ ТаблицаПродажи.ДокументОперации
		|		КОНЕЦ КАК Регистратор,
		|		ТаблицаПродажи.ДокументОперации КАК ДокументОперации,
		|		ТаблицаПродажи.ДокументНачисления КАК ДокументНачисления,
		|		ТаблицаПродажи.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов,
		|		ТаблицаПродажи.ПрограммаЛояльности КАК ПрограммаЛояльности
		|	ИЗ
		|		РегистрНакопления.БонусныеБаллы КАК ТаблицаПродажи
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних(&ПериодТекущий, ) КАК УчетнаяПолитика
		|			ПО (ИСТИНА)
		|	ГДЕ
		|		ТаблицаПродажи.ДокументОперации = &ДокументПродажи
		|		И ТаблицаПродажи.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Использование)
		|		И ТаблицаПродажи.ПрограммаЛояльности = &ПрограммаЛояльности
		|		И НЕ ТаблицаПродажи.Регистратор = &Регистратор
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаТекущая.Регистратор,
		|		ТаблицаТекущая.ДокументОперации,
		|		ТаблицаТекущая.ДокументНачисления,
		|		ТаблицаТекущая.СуммаБонусныхБаллов,
		|		ТаблицаТекущая.ПрограммаЛояльности
		|	ИЗ
		|		Текущая КАК ТаблицаТекущая) КАК ТаблицаПродажи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних(&ПериодТекущий, ) КАК УчетнаяПолитика
		|		ПО (ИСТИНА)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	РегистраторНачисления,
		|	ДокументНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Текущая
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИспользованоПродажей.Регистратор КАК Регистратор,
		|	ИспользованоПродажей.ДокументНачисления КАК ДокументНачисления,
		|	ИспользованоПродажей.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов,
		|	ТаблицаСведений.ДатаНачисления КАК ДатаНачисления,
		|	ТаблицаСведений.ДатаСписания КАК ДатаСписания
		|ИЗ
		|	ИспользованоПродажей КАК ИспользованоПродажей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеБонусныеБаллы КАК ТаблицаСведений
		|		ПО ИспользованоПродажей.РегистраторНачисления = ТаблицаСведений.Регистратор
		|			И ИспользованоПродажей.ДокументНачисления = ТаблицаСведений.ДокументОперации
		|			И ИспользованоПродажей.ВидОперации = ТаблицаСведений.ВидОперации
		|			И (ТаблицаСведений.Контрагент = &Контрагент)
		|			И (ТаблицаСведений.ПрограммаЛояльности = &ПрограммаЛояльности)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ИспользованоПродажей"
		;

		РезультатЗапроса = Запрос.Выполнить();
		ДанныеДокументаПродажи = РезультатЗапроса.Выгрузить();

	Иначе

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Регистратор КАК Регистратор,
		|	ТаблицаДокумента.ДокументПродажи КАК ДокументПродажи,
		|	ТаблицаСписания.ВидОперации КАК ВидОперации,
		|	ТаблицаСписания.Контрагент КАК Контрагент,
		|	ТаблицаСписания.ПрограммаЛояльности КАК ПрограммаЛояльности,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ТаблицаСписания.ДатаНачисления = НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДокументПродажиДата, ДЕНЬ)
		|				ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаДокумента.ДокументПродажиДата, ЧАС, 1)
		|			ИНАЧЕ ТаблицаСписания.ДатаНачисления
		|		КОНЕЦ) КАК ДатаНачисления,
		|	МАКСИМУМ(КОНЕЦПЕРИОДА(ТаблицаСписания.ДатаСписания, ДЕНЬ)) КАК ДатаСписания,
		|	МАКСИМУМ(ЕСТЬNULL(ТаблицаОстатка.СуммаБонусныхБаллов, 0)) КАК СуммаБонусныхБаллов
		|ПОМЕСТИТЬ Фильтр
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ТаблицаДокумента.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
		|					И ЕСТЬNULL(УчетнаяПолитика.ИспользоватьЧекиКакРегистраторыНачисленияБонусныхБаллов, ИСТИНА) = ЛОЖЬ
		|				ТОГДА ТаблицаДокумента.ОтчетОРозничныхПродажах
		|			ИНАЧЕ ТаблицаДокумента.Ссылка
		|		КОНЕЦ КАК Регистратор,
		|		ТаблицаДокумента.Ссылка КАК ДокументПродажи,
		|		ТаблицаДокумента.Дата КАК ДокументПродажиДата
		|	ИЗ
		|		Документ.ЧекККМ КАК ТаблицаДокумента
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних(&ПериодТекущий, ) КАК УчетнаяПолитика
		|			ПО (ИСТИНА)
		|	ГДЕ
		|		ТИПЗНАЧЕНИЯ(&ДокументПродажи) = ТИП(Документ.ЧекККМ)
		|		И ТаблицаДокумента.Ссылка = &ДокументПродажи
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаДокумента.Ссылка,
		|		ТаблицаДокумента.Ссылка,
		|		ТаблицаДокумента.Дата
		|	ИЗ
		|		Документ.НачислениеИСписаниеБонусныхБаллов КАК ТаблицаДокумента
		|	ГДЕ
		|		ТИПЗНАЧЕНИЯ(&ДокументПродажи) = ТИП(Документ.НачислениеИСписаниеБонусныхБаллов)
		|		И ТаблицаДокумента.Ссылка = &ДокументПродажи
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаДокумента.Ссылка,
		|		ТаблицаДокумента.Ссылка,
		|		ТаблицаДокумента.Дата
		|	ИЗ
		|		Документ.РеализацияТоваров КАК ТаблицаДокумента
		|	ГДЕ
		|		ТИПЗНАЧЕНИЯ(&ДокументПродажи) = ТИП(Документ.РеализацияТоваров)
		|		И ТаблицаДокумента.Ссылка = &ДокументПродажи
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаДокумента.Ссылка,
		|		ТаблицаДокумента.Ссылка,
		|		ТаблицаДокумента.Дата
		|	ИЗ
		|		Документ.ЗаказПокупателя КАК ТаблицаДокумента
		|	ГДЕ
		|		ТИПЗНАЧЕНИЯ(&ДокументПродажи) = ТИП(Документ.ЗаказПокупателя)
		|		И ТаблицаДокумента.Ссылка = &ДокументПродажи) КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеБонусныеБаллы КАК ТаблицаСписания
		|		ПО ТаблицаДокумента.Регистратор = ТаблицаСписания.Регистратор
		|			И ТаблицаДокумента.ДокументПродажи = ТаблицаСписания.ДокументОперации
		|			И (ТаблицаСписания.Контрагент = &Контрагент)
		|			И (ТаблицаСписания.ПрограммаЛояльности = &ПрограммаЛояльности)
		|			И (ТаблицаСписания.ВидОперации = &ВидОперации)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТаблицаРегистра.СуммаБонусныхБалловОстаток КАК СуммаБонусныхБаллов
		|		ИЗ
		|			РегистрНакопления.БонусныеБаллы.Остатки(
		|					&ГраницаСреза,
		|					ПрограммаЛояльности = &ПрограммаЛояльности
		|						И Контрагент = &Контрагент
		|						И ДокументНачисления = &ДокументПродажи) КАК ТаблицаРегистра) КАК ТаблицаОстатка
		|		ПО (ИСТИНА)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Регистратор,
		|	ТаблицаДокумента.ДокументПродажи,
		|	ТаблицаСписания.Контрагент,
		|	ТаблицаСписания.ПрограммаЛояльности,
		|	ТаблицаСписания.ВидОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНакоплений.ПрограммаЛояльности КАК ПрограммаЛояльности,
		|	ТаблицаНакоплений.Контрагент КАК Контрагент,
		|	ТаблицаНакоплений.ДокументНачисления КАК ДокументНачисления,
		|	ТаблицаНакоплений.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов,
		|	ВЫБОР
		|		КОГДА Фильтр.ДатаНачисления > &Период
		|			ТОГДА ТаблицаНакоплений.СуммаБонусныхБаллов
		|		ИНАЧЕ Фильтр.СуммаБонусныхБаллов
		|	КОНЕЦ КАК СуммаБонусныхБалловОстаток,
		|	ТаблицаНакоплений.НомерСтроки КАК НомерСтроки,
		|	ТаблицаНакоплений.ВидОперации КАК ВидОперации,
		|	Фильтр.ДатаНачисления КАК ДатаНачисления,
		|	Фильтр.ДатаСписания КАК ДатаСписания
		|ИЗ
		|	РегистрНакопления.БонусныеБаллы КАК ТаблицаНакоплений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
		|		ПО ТаблицаНакоплений.Регистратор = Фильтр.Регистратор
		|			И ТаблицаНакоплений.Контрагент = Фильтр.Контрагент
		|			И ТаблицаНакоплений.ПрограммаЛояльности = Фильтр.ПрограммаЛояльности
		|			И ТаблицаНакоплений.ДокументНачисления = Фильтр.ДокументПродажи
		|			И ТаблицаНакоплений.ВидОперации = Фильтр.ВидОперации
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		;

		РезультатЗапроса = Запрос.Выполнить();
		
	//	Если в результате запроса больше одной строки - это какой-то косяк!
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, Выборка, ДанныеДокументаПродажи,, Истина);

	КонецЕсли;

	Возврат ДанныеДокументаПродажи;

КонецФункции

Процедура УстановитьИспользованнуюПартию(СтрокаПартии, ТаблицаИспользованныхПартий)

	СтрокиТаблицы = ТаблицаИспользованныхПартий.НайтиСтроки(Новый Структура("ПрограммаЛояльности, ДокументНачисления", СтрокаПартии.ПрограммаЛояльности, СтрокаПартии.ДокументНачисления));

	Если СтрокиТаблицы.Количество() = 0 Тогда

		СтрокаИспользованнойПартии = ТаблицаИспользованныхПартий.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИспользованнойПартии, СтрокаПартии);

	Иначе

		СтрокаИспользованнойПартии = СтрокиТаблицы[0];
		СтрокаИспользованнойПартии.СуммаБонусныхБаллов = СтрокаПартии.СуммаБонусныхБаллов;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

















