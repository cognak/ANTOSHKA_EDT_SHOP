#Область ПрограммныйИнтерфейс

// Процедура - Регистрация
//
// Параметры:
//  Событие				 - Строка - Обязательный. Событие указывается строкой.
//                                  Может содержать точки для обозначения иерархии событий. 
//                                  Запрещена запись событий использующих сочетания символов "_$" и "$_",
//                                  зарезервированные для системных событий.
//                                  Например: _$МоеСобытие$_ или _$МояГруппаСобытий$_.МоеСобытие
//  УровеньСообщения				 - УровеньЖурналаРегистрации - Необязательный. Уровень важности события, если не указан, то "Примечание"
//  ОбъектМетаданных	 - ОбъектМетаданных - Необязательный. Метаданные объекта или полное имя объекта метаданных, к которому относится событие
//  Данные				 - Произвольный - Необязательный. Данные, с которыми связано событие. 
//                                        Рекомендуется указывать ссылки на объекты данных (элементы справочников,
//                                        документы, к которым относится событие). 
//  Комментарий			 - Строка - Необязательный. Произвольная строка комментария к событию.
//                                  Значение по умолчанию: Пустая строка.
//  ПредставлениеДанных	 - Строка - Необязательный. Желаемое представление указанных данных (если данные указаны)
//                                  Либо просто какое-то представление как дополнение к комментарию.
//                                  Если не указано, то принимается стандартное представление данных.
//  ЗаписыватьЖурналРегистрации	 - Булево - Необязательный. Производить запись в штатный ЖурналРегистрации
//
Процедура Регистрация(Событие, Знач УровеньСообщения = Неопределено, ОбъектМетаданных = Неопределено, Данные = Неопределено, ДанныеХранилища = Неопределено, Комментарий = "", ПредставлениеДанных = "", ЗаписыватьЖурналРегистрации = Ложь, ИгнорироватьСлужебныеДействия = Истина)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если ТехническаяПоддержкаВызовСервера.ВыполняютсяСлужебныеДействия() И ИгнорироватьСлужебныеДействия = Истина Тогда

		Возврат;

	КонецЕсли;

	Попытка

		УровеньСообщения = ПривестиПараметрУровеньСообщения(УровеньСообщения);

		НаборЗаписей = РегистрыСведений.ЖурналСобытий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТекущаяДатаСеанса());
		НаборЗаписей.Отбор.КодУзлаОбмена.Установить(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Код);

		НаборЗаписей.Прочитать();
		НоваяЗапись	= НаборЗаписей.Добавить();

		НоваяЗапись.Событие = Событие;
		НоваяЗапись.Уровень = ПривестиКЗначениюУровняЖурналаСобытий(УровеньСообщения);
		НоваяЗапись.ОбъектМетаданных = ПривестиПараметрОбъектМетаданных(ОбъектМетаданных);

		НоваяЗапись.Данные      = Данные;
		НоваяЗапись.Комментарий = Комментарий;
		НоваяЗапись.ДанныеПредставление	= СокрЛП(?(ПустаяСтрока(ПредставлениеДанных), Данные, ПредставлениеДанных));

		Если НЕ ДанныеХранилища = Неопределено Тогда

			Если ТипЗнч(ДанныеХранилища) = Тип("ХранилищеЗначения") Тогда

					НоваяЗапись.Хранилище = ДанныеХранилища;

			Иначе	НоваяЗапись.Хранилище = Новый ХранилищеЗначения(ДанныеХранилища, Новый СжатиеДанных(9));
		
			КонецЕсли;

		КонецЕсли;

		НаборЗаписей.Записать(Истина);

		Если ЗаписыватьЖурналРегистрации = Истина Тогда

			ЗаписьЖурналаРегистрации(Событие, УровеньСообщения
			, ?(ТипЗнч(ОбъектМетаданных) = Тип("Строка"), ОбщегоНазначения.ОбъектМетаданныхПоПолномуИмени(ОбъектМетаданных, Ложь), ОбъектМетаданных)
			, Данные, Комментарий, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ЖурналСобытий.Запись", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка записи: " + ТекстОшибки, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

	КонецПопытки;

КонецПроцедуры

//	LNK 29.12.2016 16:03:09
Процедура ФиксироватьСостояниеДокумента(ДокументСсылка, ТекущиеСвойства, ДополнительныеСвойства)	Экспорт

	Попытка

		Если НЕ ТекущиеСвойства.ПометкаУдаления = ДополнительныеСвойства.ПометкаУдаления
		ИЛИ  НЕ ТекущиеСвойства.Проведен = ДополнительныеСвойства.Проведен	Тогда

			ТекстСообщения = "Режим записи [" + СокрЛП(ДополнительныеСвойства.РежимЗаписи) + "]";

			Если НЕ ТекущиеСвойства.Проведен = ДополнительныеСвойства.Проведен Тогда

				ТекстСообщения = ТекстСообщения + Символы.ПС
				+ "Был " + ?(ДополнительныеСвойства.Проведен, "", "НЕ ") + "ПРОВЕДЕН; "
				+ "Стал " + ?(ТекущиеСвойства.Проведен, "", "НЕ ") + "ПРОВЕДЕН";

			КонецЕсли;

			Если НЕ ТекущиеСвойства.ПометкаУдаления = ДополнительныеСвойства.ПометкаУдаления Тогда

				ТекстСообщения = ТекстСообщения + Символы.ПС
				+ "Был " + ?(ДополнительныеСвойства.ПометкаУдаления, "", "НЕ ") + "ПОМЕЧЕН К УДАЛЕНИЮ; "
				+ "Стал " + ?(ТекущиеСвойства.ПометкаУдаления, "", "НЕ ") + "ПОМЕЧЕН К УДАЛЕНИЮ";

			КонецЕсли;

			Регистрация("ИзменениеСостоянияДокумента", УровеньЖурналаРегистрации.Примечание
				, ДокументСсылка.Метаданные(), ДокументСсылка,, ТекстСообщения, СокрЛП(ДокументСсылка));

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();	//	отладочная

	КонецПопытки;

КонецПроцедуры

//	LNK 16.03.2017 13:22:19
Процедура РегламентнаяОчистка()	Экспорт

	БылИсключительныйРежим = ПараметрыСеанса.ИсключительныйРежим;
	ПараметрыСеанса.ИсключительныйРежим = Истина;
	УстановитьПривилегированныйРежим(Истина);

	СписокСобытий = Новый Массив;
//	СписокСобытий.Добавить("Подарочный сертификат скидкой");

//	Еженедельная очистка событий журнала
	УдалениеСобытий(СписокСобытий, "Неделя");

	СписокСобытий.Очистить();

//	Конечная (глубиной в месяц) очистка событий журнала
	УдалениеСобытий(СписокСобытий, "Месяц");

	УстановитьПривилегированныйРежим(Ложь);
	ПараметрыСеанса.ИсключительныйРежим = БылИсключительныйРежим;

КонецПроцедуры

#КонецОбласти

Функция ПривестиКЗначениюУровняЖурналаСобытий(УровеньЖурнала)

	ЗначениеПеречисления = Перечисления.УровеньЖурналаРегистрации.ПустаяСсылка();

	Попытка

		Если УровеньЖурнала = УровеньЖурналаРегистрации.Информация Тогда

			ЗначениеПеречисления = Перечисления.УровеньЖурналаРегистрации.Информация;

		ИначеЕсли УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка Тогда

			ЗначениеПеречисления = Перечисления.УровеньЖурналаРегистрации.Ошибка;

		ИначеЕсли УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение Тогда

			ЗначениеПеречисления = Перечисления.УровеньЖурналаРегистрации.Предупреждение;

		Иначе//Если УровеньЖурнала = УровеньЖурналаРегистрации.Примечание Тогда

			ЗначениеПеречисления = Перечисления.УровеньЖурналаРегистрации.Примечание;

		КонецЕсли;

	Исключение	КонецПопытки;

	Возврат ЗначениеПеречисления;

КонецФункции // ПривестиКЗначениюУровняЖурналаСобытий()

//	LNK 04.01.2018 10:05:49
Функция ПривестиПараметрОбъектМетаданных(ОбъектМетаданных)

	Если ТипЗнч(ОбъектМетаданных) = Тип("ОбъектМетаданных") Тогда
		
		ПредставлениеОбъекта = ОбъектМетаданных.ПолноеИмя();

	ИначеЕсли ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда
		
		ПредставлениеОбъекта = ОбъектМетаданных;

	Иначе
		
		ПредставлениеОбъекта = "<НетОпределенияОбъектаМетаданных>";
	
	КонецЕсли;

	Возврат ПредставлениеОбъекта;

КонецФункции // ПривестиПараметрОбъектМетаданных()

//	LNK 04.01.2018 10:10:07
Функция ПривестиПараметрУровеньСообщения(Знач УровеньСообщения)

	Если ТипЗнч(УровеньСообщения) = Тип("Строка") Тогда

		Попытка
		
			УровеньСообщения = УровеньЖурналаРегистрации[УровеньСообщения];
		
		Исключение

			УровеньСообщения = УровеньЖурналаРегистрации.Примечание;

		КонецПопытки;

	КонецЕсли;

	Возврат УровеньСообщения;

КонецФункции // ПривестиПараметрУровеньСообщения()

//	LNK 16.03.2017 13:37:12
Процедура УдалениеСобытий(СписокСобытий, Глубина)

//	Не удаляем некоторые события.. чистим потом, возможно, вручную.
	СписокЗащита = Новый Массив;
	СписокЗащита.Добавить("WHDOC_MOVE_LINE");

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 10000
	|	ТаблицаЖурнала.Период КАК Период,
	|	ТаблицаЖурнала.КодУзлаОбмена КАК КодУзлаОбмена,
	|	ТаблицаЖурнала.Индекс КАК Индекс
	|ИЗ
	|	РегистрСведений.ЖурналСобытий КАК ТаблицаЖурнала
	|ГДЕ
	|	ТаблицаЖурнала.Период < ВЫБОР
	|			КОГДА &Глубина = ""Неделя""
	|				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ДЕНЬ, -7)
	|			КОГДА &Глубина = ""Месяц""
	|				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), МЕСЯЦ, -1)
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), КВАРТАЛ, -2)
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &СписокУказан = ИСТИНА
	|				ТОГДА ТаблицаЖурнала.Событие В (&СписокСобытий)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ ТаблицаЖурнала.Событие В (&СписокЗащита)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период"
	);
	Запрос.УстановитьПараметр("ТекущаяДата"  , ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СписокСобытий", СписокСобытий);
	Запрос.УстановитьПараметр("СписокЗащита" , СписокЗащита);
	Запрос.УстановитьПараметр("СписокУказан" , НЕ СписокСобытий.Количество() = 0);
	Запрос.УстановитьПараметр("Глубина"      , Глубина);

	Пока Истина Цикл

		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда

			Прервать;

		Иначе

			Выборка = Результат.Выбрать();

			Пока Выборка.Следующий() Цикл

				МенеджерЗаписи = РегистрыСведений.ЖурналСобытий.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);

				МенеджерЗаписи.Удалить();

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры












