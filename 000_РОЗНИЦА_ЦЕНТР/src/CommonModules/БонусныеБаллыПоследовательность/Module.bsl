Процедура ПодготовитьДополнительныеСвойства(ДополнительныеСвойства)	Экспорт	//	LNK 02.03.2021 08:39:03

	Если НЕ ДополнительныеСвойства.Свойство("УправлениеПоследовательностьюБонусныеБаллы") Тогда

		ДополнительныеСвойства.Вставить("УправлениеПоследовательностьюБонусныеБаллы"
			, Новый Структура(
				"МенеджерВременныхТаблиц"
				, Новый МенеджерВременныхТаблиц
			)
		);

	КонецЕсли;

КонецПроцедуры

//	LNK 01.03.2021 07:04:24 -	вызывается из "ОбработкаПроведения(Отказ, РежимПроведения)"
//								или "ПриЗаписи(Отказ)" в случае "Документы.КорректировкаРегистров"
Процедура УправлениеПоследовательностью(НаборЗаписей, Отказ)	Экспорт

	Если Отказ
	ИЛИ	 НаборЗаписей.ДополнительныеСвойства.Свойство("ОтключитьУправлениеПоследовательностью")
	ИЛИ НЕ (ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() ИЛИ ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().ВидУзла = Перечисления.ВидыУзлов.ТестовыйУзел)
	Тогда

	//	Последовательность отрабатываем только в главном узле!
		Возврат;

	КонецЕсли;

	#Если _ Тогда
	НаборЗаписей = РегистрыНакопления.БонусныеБаллы.СоздатьНаборЗаписей();
	#КонецЕсли

	Если НаборЗаписей.ДополнительныеСвойства.Свойство("УправлениеПоследовательностьюБонусныеБаллы") Тогда	//	на всякий случай..

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаДвижений.Период КАК Период,
		|	ТаблицаДвижений.Регистратор КАК Регистратор,
		|	ТаблицаДвижений.Проведен КАК Проведен,
		|	ТаблицаДвижений.Контрагент КАК Контрагент,
		|	ТаблицаДвижений.ДатаОперации КАК ДатаОперации,
		|	ТаблицаДвижений.ПрограммаЛояльностиПередЗаписью КАК ПрограммаЛояльностиПередЗаписью,
		|	ТаблицаДвижений.ПрограммаЛояльностиПриЗаписи КАК ПрограммаЛояльностиПриЗаписи,
		|	ТаблицаДвижений.СуммаБонусныхБалловПередЗаписью КАК СуммаБонусныхБалловПередЗаписью,
		|	ТаблицаДвижений.СуммаБонусныхБалловПриЗаписи КАК СуммаБонусныхБалловПриЗаписи,
		|	ЕСТЬNULL(ТаблицаПоддержка.СтатусЧекаККМ, ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробитый)) КАК СтатусРегистратора,
		|	ВЫБОР
		|		КОГДА ТаблицаПоследовательность.Контрагент ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьРегистрация
		|ИЗ
		|	БонусныеБаллыДвижения КАК ТаблицаДвижений
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ТаблицаПоддержка
		|		ПО ТаблицаДвижений.Регистратор = ТаблицаПоддержка.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.СписаниеБонусныхПрограмм КАК ТаблицаПоследовательность
		|		ПО ТаблицаДвижений.Регистратор = ТаблицаПоследовательность.Регистратор
		|			И ТаблицаДвижений.Контрагент = ТаблицаПоследовательность.Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ БонусныеБаллыДвижения"
		);
		Запрос.МенеджерВременныхТаблиц = НаборЗаписей.ДополнительныеСвойства.УправлениеПоследовательностьюБонусныеБаллы.МенеджерВременныхТаблиц;

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда

			УчетнаяПолитика		 = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();
			ПроверенаРегистрация = Новый Соответствие;
			КешированныеГраницы  = Новый Соответствие;

			Выборка = РезультатЗапроса.Выбрать();

			Пока Выборка.Следующий() Цикл

				Если Выборка.Проведен = Истина Тогда

				//	Проверим наличие регистратора в последовательности.
					Если ПроверенаРегистрация.Получить(Выборка.Контрагент) = Неопределено Тогда

						УчавствуетВПоследовательности = ?(УчетнаяПолитика.ИспользоватьЧекиКакРегистраторыНачисленияБонусныхБаллов
							, Истина
							, Выборка.СтатусРегистратора = Перечисления.СтатусыЧековККМ.Пробитый
						);

						Если УчавствуетВПоследовательности Тогда

							Если Выборка.ЕстьРегистрация = Ложь Тогда

								РегистрацияВПоследовательности(Выборка.Период, Выборка.Регистратор, Выборка.Контрагент, Истина, УчетнаяПолитика);

							КонецЕсли;

						ИначеЕсли Выборка.ЕстьРегистрация = Истина Тогда

							РегистрацияВПоследовательности(Выборка.Период, Выборка.Регистратор, Выборка.Контрагент, Ложь, УчетнаяПолитика);

						КонецЕсли;

						ПроверенаРегистрация.Вставить(Выборка.Контрагент, Истина);

					КонецЕсли;

					КонтекстОбмена = НаборЗаписей.ОбменДанными.Загрузка И ЗначениеЗаполнено(НаборЗаписей.ОбменДанными.Отправитель);
					ДанныеИзменены = НЕ ( Выборка.СуммаБонусныхБалловПередЗаписью = Выборка.СуммаБонусныхБалловПриЗаписи
										И Выборка.ПрограммаЛояльностиПередЗаписью = Выборка.ПрограммаЛояльностиПриЗаписи);
				//	Поле "Регистратор" - сущность фиксированная.. в данном контексте это всегда константа.
				//	посему работаем исключительно с полем "Период"

					СдвинутьГраницуСписаниеБонусныхПрограмм(Выборка.Период, Выборка.Регистратор, Выборка.Контрагент, ДанныеИзменены, УчетнаяПолитика, КонтекстОбмена, КешированныеГраницы);

				Иначе	//	Выборка.Проведен = ЛОЖЬ

					РегистрацияВПоследовательности(Выборка.Период, Выборка.Регистратор, Выборка.Контрагент, Ложь, УчетнаяПолитика);

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьРегистрациюНепробитогоЧека(Регистратор, СписокКонтрагентов)	Экспорт

	УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаПоследовательность.Период КАК Период,
	|	ТаблицаСправочник.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК ТаблицаСправочник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Последовательность.СписаниеБонусныхПрограмм КАК ТаблицаПоследовательность
	|		ПО (ТаблицаПоследовательность.Регистратор = &Регистратор)
	|			И ТаблицаСправочник.Ссылка = ТаблицаПоследовательность.Контрагент
	|ГДЕ
	|	ТаблицаСправочник.Ссылка В(&СписокКонтрагентов)"
	);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		РегистрацияВПоследовательности(Выборка.Период, Регистратор, Выборка.Контрагент, Ложь, УчетнаяПолитика);

	КонецЦикла;

КонецПроцедуры

#Область ПроцедурыВлиянияНаПоследовательность

Процедура РегистрацияВПоследовательности(Период, Регистратор, Контрагент, Добавление, УчетнаяПолитика)	Экспорт

	НачатьТранзакцию();	//	LNK 20.06.2024 07:42:02

	Попытка

		НаборЗаписей = Последовательности.СписаниеБонусныхПрограмм.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);

		НаборЗаписей.Прочитать();

	//	Проверяем - есть ли в наборе такой Контрагент? Если есть, то перед добавлением строку удаляем.
		ТаблицаНабора = НаборЗаписей.Выгрузить();

		СтрокиТаблицыУдалить = ТаблицаНабора.НайтиСтроки(Новый Структура("Контрагент", Контрагент));

		Если НЕ СтрокиТаблицыУдалить.Количество() = 0 Тогда

			Для каждого СтрокаТаблицы Из СтрокиТаблицыУдалить Цикл

				МоментВремениГраницы		= Последовательности.СписаниеБонусныхПрограмм.ПолучитьГраницу(Новый Структура("Контрагент", Контрагент));
				МоментВремениДокумента		= Новый МоментВремени(Период, Регистратор);
				ПозицияОтносительноГраницы	= МоментВремениДокумента.Сравнить(МоментВремениГраницы);
			//	-1	Документ РАНЬШНЕ ГП
			//	 0	Документ РАВЕН ГП
			//	 1	Документ ПОЗЖЕ
				
				Если ПозицияОтносительноГраницы = -1 ИЛИ ПозицияОтносительноГраницы = 0 И НЕ Добавление = Истина Тогда

				//	Граница установлена на текущий регистратор или позже него.
				//	Необходимо снести её на предыдущий регистратор в последовательности.

					МоментВремениГраницыНовый = ПредыдущийРегистраторПоследовательности(СтрокаТаблицы.Период, Регистратор, Контрагент
							, ?(УчетнаяПолитика.ИспользоватьЧекиКакРегистраторыНачисленияБонусныхБаллов, Истина, НЕ ТипЗнч(Регистратор) = Тип("ДокументСсылка.ЧекККМ"))
					);

					Если МоментВремениГраницыНовый.Сравнить(МоментВремениГраницы) = -1 Тогда

					//	То есть в случае, когда новая ГП будет раньше текущей - иначе нет смысла.
					//	Вероятно, более "ранней" границы уже нет.

						Последовательности.СписаниеБонусныхПрограмм.УстановитьГраницу(
							  МоментВремениГраницыНовый
							, Новый Структура("Контрагент", Контрагент)
						);
						ЖурналСобытий.Регистрация("ПОСЛЕДОВАТЕЛЬНОСТЬ.Откат", УровеньЖурналаРегистрации.Предупреждение
							, Регистратор.Метаданные()
							, Регистратор
							,
							, "1.ГП(была) : " + СокрЛП(МоментВремениГраницы) + Символы.ПС
							+ "  ГП(новая): " + СокрЛП(МоментВремениГраницыНовый)
							, СокрЛП(Регистратор)
							, Ложь
							, Ложь
						);

					КонецЕсли;

				КонецЕсли;

				ТаблицаНабора.Удалить(СтрокаТаблицы);

			КонецЦикла;

		КонецЕсли;

		Если Добавление = Истина Тогда

			СтрокаТаблицы = ТаблицаНабора.Добавить();
			СтрокаТаблицы.Период = Период;
			СтрокаТаблицы.Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
			СтрокаТаблицы.Контрагент = Контрагент;

		//	сбрасывем границу последовательности - при добавлении нарушается вся картинка.
			Последовательности.СписаниеБонусныхПрограмм.УстановитьГраницу(
				  '00010101'
				, Новый Структура("Контрагент", Контрагент)
			);

		Иначе

			ГП = Последовательности.СписаниеБонусныхПрограмм.ПолучитьГраницу(
				Новый Структура("Контрагент", Контрагент));

			Если ГП.Ссылка = Регистратор Тогда

			//	сбрасывем границу последовательности
				Последовательности.СписаниеБонусныхПрограмм.УстановитьГраницу(
					  '00010101'
					, Новый Структура("Контрагент", Контрагент)
				);

			КонецЕсли;

		КонецЕсли;

		НаборЗаписей.Загрузить(ТаблицаНабора);

		НаборЗаписей.Записать();

		ЗафиксироватьТранзакцию();

	Исключение

		ТекстОшибки = ОписаниеОшибки();
		ОтменитьТранзакцию();

	КонецПопытки;

КонецПроцедуры

Процедура СдвинутьГраницуСписаниеБонусныхПрограмм(Период, Регистратор, Контрагент, ДанныеИзменены, УчетнаяПолитика, КонтекстОбмена, КешированныеГраницы)

	#Если _ Тогда
	КешированныеГраницы = Новый Соответствие;
	#КонецЕсли

	Если КешированныеГраницы.Получить(Контрагент) = Неопределено Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаГраницы.МоментВремени КАК МоментВремени
		|ИЗ
		|	Последовательность.СписаниеБонусныхПрограмм.Границы КАК ТаблицаГраницы
		|ГДЕ
		|	ТаблицаГраницы.Контрагент = &Контрагент"
		);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда

			КешированныеГраницы.Вставить(Контрагент, Выборка.МоментВремени);

		КонецЕсли;

	КонецЕсли;

	МоментВремениГраницы = КешированныеГраницы.Получить(Контрагент);

	Если НЕ МоментВремениГраницы = Неопределено Тогда

		МоментВремениДокумента		= Новый МоментВремени(Период, Регистратор);
		ПозицияОтносительноГраницы	= МоментВремениДокумента.Сравнить(МоментВремениГраницы);
	//	-1	Документ РАНЬШНЕ ГП
	//	 0	Документ РАВЕН ГП
	//	 1	Документ ПОЗЖЕ

		Если НЕ ПозицияОтносительноГраницы = 0 Тогда	//	документ не является ГП!

			УстановитьГраницу = Ложь;

			Если ПозицияОтносительноГраницы = -1 Тогда
				
			//	Граница переносится назад, если документ проводится задним числом
			//	LNK 03.07.2024 14:02:22	- условие по отладке
				УстановитьГраницу = ТехническаяПоддержкаПовтИсп.ОтладочныйРежимРаботы() ИЛИ ДанныеИзменены;	//	зависимость от изменения атрибутов записи

				Если УстановитьГраницу Тогда

					ЖурналСобытий.Регистрация("ПОСЛЕДОВАТЕЛЬНОСТЬ.Откат", УровеньЖурналаРегистрации.Предупреждение
						, Регистратор.Метаданные()
						, Регистратор
						,
						, "2.ГП(была) : " + СокрЛП(МоментВремениГраницы) + Символы.ПС
						+ "  ГП(новая): " + СокрЛП(МоментВремениДокумента)
						, СокрЛП(Регистратор)
						, Ложь
						, Ложь
					);

				КонецЕсли;

			ИначеЕсли ЛОЖЬ Тогда	//	LNK 15.10.2021 07:57:23 - вперёд только в режиме восстановления последовательности!

			//	здесь будем двигать ГП вперёд!
				Если НЕ КонтекстОбмена И Последовательности.СписаниеБонусныхПрограмм.Проверить(МоментВремениДокумента, Новый Структура("Контрагент", Контрагент)) Тогда

				//	Последовательность на момент документа восстановлена!
				//	Можно перенести границу на этот документ.
					УстановитьГраницу = Истина;

				КонецЕсли;

			КонецЕсли;

			Если УстановитьГраницу Тогда

				Последовательности.СписаниеБонусныхПрограмм.УстановитьГраницу(
					МоментВремениДокумента, Новый Структура("Контрагент", Контрагент));

				КешированныеГраницы.Удалить(Контрагент);

			КонецЕсли;

		Иначе	//	LNK 15.10.2021 08:04:41 - это интерактивное проведение! Сдвигаем ГП назад.

			МоментВремениГраницыНовый = ПредыдущийРегистраторПоследовательности(Период, Регистратор, Контрагент
					, ?(УчетнаяПолитика.ИспользоватьЧекиКакРегистраторыНачисленияБонусныхБаллов, Истина, НЕ ТипЗнч(Регистратор) = Тип("ДокументСсылка.ЧекККМ"))
			);
			Последовательности.СписаниеБонусныхПрограмм.УстановитьГраницу(
				  МоментВремениГраницыНовый
				, Новый Структура("Контрагент", Контрагент)
			);
			ЖурналСобытий.Регистрация("ПОСЛЕДОВАТЕЛЬНОСТЬ.Откат", УровеньЖурналаРегистрации.Предупреждение
				, Регистратор.Метаданные()
				, Регистратор
				,
				, "3.ГП(была) : " + СокрЛП(МоментВремениГраницы) + Символы.ПС
				+ "  ГП(новая): " + СокрЛП(МоментВремениГраницыНовый)
				, СокрЛП(Регистратор)
				, Ложь
				, Ложь
			);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 06.11.2022 06:46:09
Функция СброситьГраницуВНачалоПоследовательности(Контрагент)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписаниеБонусныхПрограмм.Период КАК Период,
	|	СписаниеБонусныхПрограмм.Регистратор КАК Регистратор,
	|	СписаниеБонусныхПрограмм.Контрагент КАК Контрагент
	|ИЗ
	|	Последовательность.СписаниеБонусныхПрограмм КАК СписаниеБонусныхПрограмм
	|ГДЕ
	|	СписаниеБонусныхПрограмм.Контрагент = &Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор"
	);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить();
	Выполнено = Ложь;
	
	Если НЕ Результат.Пустой() Тогда

		Выборка = Результат.Выбрать();
	    Выборка.Следующий();

		Последовательности.СписаниеБонусныхПрограмм.УстановитьГраницу(
			Новый МоментВремени(Выборка.Период, Выборка.Регистратор),
			Новый Структура("Контрагент", Выборка.Контрагент)
		);
		Выполнено = Истина;

	КонецЕсли;

	Возврат Выполнено;

КонецФункции

#КонецОбласти

#Область РаботаСПоследовательностьюВКонтекстеСписанияПартий

//	LNK 27.09.2021 06:38:40
Процедура ВыполнитьВосстановлениеПоследовательности(Контрагент = Неопределено, ПроверкаНеобходимости = Истина, ВыполнятьКорректировку = Истина, ВызыватьИсключение = Ложь)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	СписокКонтрагентов = Новый Массив;

	Если НЕ ТипЗнч(Контрагент) = Тип("Массив") Тогда

		Если ЗначениеЗаполнено(Контрагент) Тогда

			СписокКонтрагентов.Добавить(Контрагент);

		КонецЕсли;

	Иначе	СписокКонтрагентов = Контрагент;

	КонецЕсли;

	Если СписокКонтрагентов.Количество() = 0 И НЕ ЗначениеЗаполнено(Контрагент) Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаПоследовательность.Контрагент КАК Контрагент
		|ИЗ
		|	Последовательность.СписаниеБонусныхПрограмм КАК ТаблицаПоследовательность"
		);
		СписокКонтрагентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
		ПроверкаНеобходимости = Истина;

	КонецЕсли;

	Если ПроверкаНеобходимости = Истина Тогда

		СписокКонтрагентов = ПроверитьНеобходимостьВосстановления(СписокКонтрагентов);

	КонецЕсли;

	Если НЕ СписокКонтрагентов.Количество() = 0 Тогда

		УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();

		Если ВыполнятьКорректировку = Истина Тогда

			Для каждого КонтрагентИзСписка Из СписокКонтрагентов Цикл

				ВыполнитьКорректировкуПоследовательности(КонтрагентИзСписка, УчетнаяПолитика);	//	всегда, на всякий случай.

			КонецЦикла;

		КонецЕсли;

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаГраницы.Контрагент КАК Контрагент,
		|	ТаблицаГраницы.Период КАК КлючПорядка,
		|	ТаблицаГраницы.МоментВремени КАК МоментВремени
		|ПОМЕСТИТЬ Текущие
		|ИЗ
		|	Последовательность.СписаниеБонусныхПрограмм.Границы КАК ТаблицаГраницы
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ОтборУстановлен = ИСТИНА
		|				ТОГДА ТаблицаГраницы.Контрагент В (&СписокКонтрагентов)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Текущие.Контрагент КАК Контрагент,
		|	Текущие.КлючПорядка КАК КлючПорядка,
		|	Текущие.МоментВремени КАК МоментВремени
		|ИЗ
		|	Текущие КАК Текущие
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаСправочник.Ссылка,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	Справочник.Контрагенты КАК ТаблицаСправочник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Текущие КАК Текущие
		|		ПО ТаблицаСправочник.Ссылка = Текущие.Контрагент
		|ГДЕ
		|	ТаблицаСправочник.Ссылка В(&СписокКонтрагентов)
		|	И Текущие.Контрагент ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	КлючПорядка"
		);
		Запрос.УстановитьПараметр("ОтборУстановлен"   , НЕ СписокКонтрагентов.Количество() = 0);
		Запрос.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов);

		РезультатЗапроса = Запрос.Выполнить();

		Если РезультатЗапроса.Пустой() Тогда

			Возврат;	//	на нет и суда нет.. нет ни одной границы.

		КонецЕсли;

		ИмяСобытия = "ВОССТАНОВЛЕНИЕ_ГП";
	//	.. изменяем текст запроса на выборку регистраторов последовательности
		Запрос.Текст = ПолучитьТекстЗапросаПоследовательностиРегистраторов();

		ГраницыВыборка = РезультатЗапроса.Выбрать();

		Пока ГраницыВыборка.Следующий() Цикл

			Граница = Новый Структура(
				"Контрагент, МоментВремени, Дата, Ссылка"
				, ГраницыВыборка.Контрагент
				, ГраницыВыборка.МоментВремени
				, ?(ГраницыВыборка.МоментВремени = Неопределено, '00010101', ГраницыВыборка.МоментВремени.Дата)		//	изменяемый элемент
				, ?(ГраницыВыборка.МоментВремени = Неопределено, Неопределено, ГраницыВыборка.МоментВремени.Ссылка)	//	изменяемый элемент
			);

			Попытка

				Запрос.УстановитьПараметр("Контрагент"	, Граница.Контрагент);
				Запрос.УстановитьПараметр("Период"		, Граница.Дата);
				Запрос.УстановитьПараметр("Регистратор"	, Граница.Ссылка);

			//	Обработку документов выполняем включая и текущий регистратор ГП..

				РезультатЗапроса = Запрос.Выполнить();

				Если НЕ РезультатЗапроса.Пустой() Тогда

					ВыборкаОбъектов = РезультатЗапроса.Выбрать();

					Пока ВыборкаОбъектов.Следующий() Цикл

						БонусныеБаллыПартионныйУчет.ВыполнитьСписаниеПоДокументуНачисления(ВыборкаОбъектов.Период, ВыборкаОбъектов.Регистратор, ВыборкаОбъектов.Контрагент);
					//	ВыполнитьСписаниеПоДокументуНачисления(ВыборкаОбъектов.Период, ВыборкаОбъектов.Регистратор, ВыборкаОбъектов.Контрагент);

					КонецЦикла;

				КонецЕсли;

			Исключение

				ТекстОшибки = ОписаниеОшибки();
				ЖурналСобытий.Регистрация(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка
					, Метаданные.Последовательности.СписаниеБонусныхПрограмм
					, ГраницыВыборка.Контрагент
					,
					, ТекстОшибки
					, СокрЛП(ГраницыВыборка.Контрагент)
					, Ложь
					, Ложь
				);

				Если ВызыватьИсключение = Истина Тогда

					ВызватьИсключение ТекстОшибки;

				КонецЕсли;

			КонецПопытки;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьКорректировкуПоследовательности(Контрагент = Неопределено, УчетнаяПолитика = Неопределено, РазмерПакета = 0, ПорядокПоВозрастанию = Ложь)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если УчетнаяПолитика = Неопределено Тогда

		УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();

	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапросаКорректировкиПоследовательности(ПорядокПоВозрастанию));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);

//	1.	Устраняем "недостатки" регистрации в последовательности
	ВыборкаОбъектов = Запрос.Выполнить().Выбрать();

	Счётчик = 0;

	Пока ВыборкаОбъектов.Следующий() Цикл
 
		РегистрацияВПоследовательности(
			ВыборкаОбъектов.Период,
			ВыборкаОбъектов.Регистратор,
			ВыборкаОбъектов.Контрагент,
			ВыборкаОбъектов.Действие = "добавить",
			УчетнаяПолитика
		);

		Счётчик = Счётчик + 1;

		ЗавершитьЦикл = РазмерПакета > 0 И Счётчик >= РазмерПакета;	//	LNK 21.06.2024 06:23:37

		Если Счётчик % 100 = 0 ИЛИ ЗавершитьЦикл Тогда

			ЗаписьЖурналаРегистрации("ПОСЛЕДОВАТЕЛЬНОСТЬ.Бонусы.Корректировка", УровеньЖурналаРегистрации.Предупреждение
				, Метаданные.Последовательности.СписаниеБонусныхПрограмм
				, ВыборкаОбъектов.Контрагент
				, "Изменено [" + Формат(Счётчик, "ЧДЦ=; ЧГ=") + "] на " + ВыборкаОбъектов.Период
				, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
			);

		КонецЕсли;

		Если ЗавершитьЦикл Тогда

			Прервать;	//	LNK 30.05.2024 09:19:28

		КонецЕсли;

	КонецЦикла;

	Сообщить("Всего " + ВыборкаОбъектов.Количество() + "; Принято " + Счётчик);

	Если НЕ Контрагент = Неопределено Тогда

	//	2.	Назначаем ГП для тех контрагентов, где граница не установлена.
	//		Устанавливаем ГП, понятно, на самый первый период (регистратор не учитываем - это неважно).

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МИНИМУМ(ТаблицаВедущая.Период) КАК Период,
		|	ТаблицаВедущая.Контрагент КАК Контрагент
		|ИЗ
		|	Последовательность.СписаниеБонусныхПрограмм КАК ТаблицаВедущая
		|		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.СписаниеБонусныхПрограмм.Границы КАК ТаблицаГраницы
		|		ПО ТаблицаВедущая.Контрагент = ТаблицаГраницы.Контрагент
		|ГДЕ
		|	ТаблицаГраницы.Контрагент ЕСТЬ NULL
		|	И ТаблицаВедущая.Контрагент = &Контрагент
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаВедущая.Контрагент"
		);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
		ВыборкаОбъектов = Запрос.Выполнить().Выбрать();

		Пока ВыборкаОбъектов.Следующий() Цикл

			МоментВремениГраницы = Новый МоментВремени(ВыборкаОбъектов.Период);

			Последовательности.СписаниеБонусныхПрограмм.УстановитьГраницу(
				МоментВремениГраницы,
				Новый Структура("Контрагент", ВыборкаОбъектов.Контрагент)
			);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	LNK 29.05.2024 08:55:05
Функция ТекстЗапросаКорректировкиПоследовательности(ПорядокПоВозрастанию)

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНакопления.Период КАК Период,
	|	ТаблицаНакопления.Регистратор КАК Регистратор,
	|	ТаблицаНакопления.Контрагент КАК Контрагент,
	|	""добавить"" КАК Действие,
	|	1 КАК Номер
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы КАК ТаблицаНакопления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.СписаниеБонусныхПрограмм КАК ТаблицаПоследовательность
	|		ПО ТаблицаНакопления.Регистратор = ТаблицаПоследовательность.Регистратор
	|			И ТаблицаНакопления.Контрагент = ТаблицаПоследовательность.Контрагент
	|ГДЕ
	|	ТаблицаПоследовательность.Регистратор ЕСТЬ NULL
	|	И ВЫБОР
	|			КОГДА &Контрагент = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаНакопления.Контрагент = &Контрагент
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаПоследовательность.Период,
	|	ТаблицаПоследовательность.Регистратор,
	|	ТаблицаПоследовательность.Контрагент,
	|	""удалить"",
	|	2
	|ИЗ
	|	Последовательность.СписаниеБонусныхПрограмм КАК ТаблицаПоследовательность
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеБонусныеБаллы КАК ТаблицаНазначение
	|		ПО ТаблицаПоследовательность.Регистратор = ТаблицаНазначение.Регистратор
	|ГДЕ
	|	ТаблицаНазначение.Регистратор ЕСТЬ NULL
	|	И ВЫБОР
	|			КОГДА &Контрагент = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаПоследовательность.Контрагент = &Контрагент
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаПоследовательность.Период,
	|	ТаблицаПоследовательность.Регистратор,
	|	ТаблицаПоследовательность.Контрагент,
	|	""удалить"",
	|	3
	|ИЗ
	|	Последовательность.СписаниеБонусныхПрограмм КАК ТаблицаПоследовательность
	|ГДЕ
	|	НЕ ТаблицаПоследовательность.Регистратор.Проведен
	|	И ВЫБОР
	|			КОГДА &Контрагент = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаПоследовательность.Контрагент = &Контрагент
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаГраницы.Период,
	|	ТаблицаГраницы.Регистратор,
	|	ТаблицаГраницы.Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистратор.Проведен
	|				И ТаблицаПоследовательность.Регистратор ЕСТЬ NULL
	|			ТОГДА ""добавить""
	|		ИНАЧЕ ""удалить""
	|	КОНЕЦ,
	|	4
	|ИЗ
	|	Последовательность.СписаниеБонусныхПрограмм.Границы КАК ТаблицаГраницы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ТаблицаРегистратор
	|		ПО ТаблицаГраницы.Регистратор = ТаблицаРегистратор.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.СписаниеБонусныхПрограмм КАК ТаблицаПоследовательность
	|		ПО ТаблицаГраницы.Регистратор = ТаблицаПоследовательность.Регистратор
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Контрагент = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаГраницы.Контрагент = &Контрагент
	|		КОНЕЦ
	|	И (ТаблицаРегистратор.Проведен
	|				И ТаблицаПоследовательность.Регистратор ЕСТЬ NULL
	|			ИЛИ НЕ ТаблицаРегистратор.Проведен
	|				И ТаблицаПоследовательность.Регистратор ЕСТЬ НЕ NULL )
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаГраницы.Период,
	|	ТаблицаГраницы.Регистратор,
	|	ТаблицаГраницы.Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистратор.Проведен
	|				И ТаблицаПоследовательность.Регистратор ЕСТЬ NULL
	|			ТОГДА ""добавить""
	|		ИНАЧЕ ""удалить""
	|	КОНЕЦ,
	|	5
	|ИЗ
	|	Последовательность.СписаниеБонусныхПрограмм.Границы КАК ТаблицаГраницы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ТаблицаРегистратор
	|		ПО ТаблицаГраницы.Регистратор = ТаблицаРегистратор.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.СписаниеБонусныхПрограмм КАК ТаблицаПоследовательность
	|		ПО ТаблицаГраницы.Регистратор = ТаблицаПоследовательность.Регистратор
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Контрагент = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаГраницы.Контрагент = &Контрагент
	|		КОНЕЦ
	|	И (ТаблицаРегистратор.Проведен
	|				И ТаблицаПоследовательность.Регистратор ЕСТЬ NULL
	|			ИЛИ НЕ ТаблицаРегистратор.Проведен
	|				И ТаблицаПоследовательность.Регистратор ЕСТЬ НЕ NULL )
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаГраницы.Период,
	|	ТаблицаГраницы.Регистратор,
	|	ТаблицаГраницы.Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистратор.Проведен
	|				И ТаблицаПоследовательность.Регистратор ЕСТЬ NULL
	|			ТОГДА ""добавить""
	|		ИНАЧЕ ""удалить""
	|	КОНЕЦ,
	|	6
	|ИЗ
	|	Последовательность.СписаниеБонусныхПрограмм.Границы КАК ТаблицаГраницы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеИСписаниеБонусныхБаллов КАК ТаблицаРегистратор
	|		ПО ТаблицаГраницы.Регистратор = ТаблицаРегистратор.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.СписаниеБонусныхПрограмм КАК ТаблицаПоследовательность
	|		ПО ТаблицаГраницы.Регистратор = ТаблицаПоследовательность.Регистратор
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Контрагент = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаГраницы.Контрагент = &Контрагент
	|		КОНЕЦ
	|	И (ТаблицаРегистратор.Проведен
	|				И ТаблицаПоследовательность.Регистратор ЕСТЬ NULL
	|			ИЛИ НЕ ТаблицаРегистратор.Проведен
	|				И ТаблицаПоследовательность.Регистратор ЕСТЬ НЕ NULL )
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаГраницы.Период,
	|	ТаблицаГраницы.Регистратор,
	|	ТаблицаГраницы.Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистратор.Проведен
	|				И ТаблицаПоследовательность.Регистратор ЕСТЬ NULL
	|			ТОГДА ""добавить""
	|		ИНАЧЕ ""удалить""
	|	КОНЕЦ,
	|	7
	|ИЗ
	|	Последовательность.СписаниеБонусныхПрограмм.Границы КАК ТаблицаГраницы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ТаблицаРегистратор
	|		ПО ТаблицаГраницы.Регистратор = ТаблицаРегистратор.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.СписаниеБонусныхПрограмм КАК ТаблицаПоследовательность
	|		ПО ТаблицаГраницы.Регистратор = ТаблицаПоследовательность.Регистратор
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Контрагент = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаГраницы.Контрагент = &Контрагент
	|		КОНЕЦ
	|	И (ТаблицаРегистратор.Проведен
	|				И ТаблицаПоследовательность.Регистратор ЕСТЬ NULL
	|			ИЛИ НЕ ТаблицаРегистратор.Проведен
	|				И ТаблицаПоследовательность.Регистратор ЕСТЬ НЕ NULL )
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаГраницы.Период,
	|	ТаблицаГраницы.Регистратор,
	|	ТаблицаГраницы.Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистратор.Проведен
	|				И ТаблицаПоследовательность.Регистратор ЕСТЬ NULL
	|			ТОГДА ""добавить""
	|		ИНАЧЕ ""удалить""
	|	КОНЕЦ,
	|	8
	|ИЗ
	|	Последовательность.СписаниеБонусныхПрограмм.Границы КАК ТаблицаГраницы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваров КАК ТаблицаРегистратор
	|		ПО ТаблицаГраницы.Регистратор = ТаблицаРегистратор.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.СписаниеБонусныхПрограмм КАК ТаблицаПоследовательность
	|		ПО ТаблицаГраницы.Регистратор = ТаблицаПоследовательность.Регистратор
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Контрагент = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаГраницы.Контрагент = &Контрагент
	|		КОНЕЦ
	|	И (ТаблицаРегистратор.Проведен
	|				И ТаблицаПоследовательность.Регистратор ЕСТЬ NULL
	|			ИЛИ НЕ ТаблицаРегистратор.Проведен
	|				И ТаблицаПоследовательность.Регистратор ЕСТЬ НЕ NULL )
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаГраницы.Период,
	|	ТаблицаГраницы.Регистратор,
	|	ТаблицаГраницы.Контрагент,
	|	""добавить"",
	|	9
	|ИЗ
	|	Последовательность.СписаниеБонусныхПрограмм.Границы КАК ТаблицаГраницы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ТаблицаРегистратор
	|		ПО ТаблицаГраницы.Регистратор = ТаблицаРегистратор.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.СписаниеБонусныхПрограмм КАК ТаблицаПоследовательность
	|		ПО ТаблицаГраницы.Регистратор = ТаблицаПоследовательность.Регистратор
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Контрагент = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаГраницы.Контрагент = &Контрагент
	|		КОНЕЦ
	|	И (ТаблицаРегистратор.Проведен
	|				И ТаблицаПоследовательность.Регистратор ЕСТЬ NULL
	|			ИЛИ НЕ ТаблицаРегистратор.Проведен
	|				И ТаблицаПоследовательность.Регистратор ЕСТЬ НЕ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.Период КАК Период,
	|	Источник.Регистратор КАК Регистратор,
	|	Источник.Контрагент КАК Контрагент,
	|	Источник.Действие КАК Действие,
	|	Источник.Номер КАК Номер
	|ИЗ
	|	Источник КАК Источник"
	+ Символы.ПС +
	"
	|	УПОРЯДОЧИТЬ ПО
	|	Период" + ?(ПорядокПоВозрастанию, "", " Убыв") + ",
	|	Регистратор" + ?(ПорядокПоВозрастанию, "", " Убыв") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	;
	Возврат ТекстЗапроса;

КонецФункции
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуГраниц(СтрокиИзмерений)

//	"СтрокиИзмерений" - это массив строк таблицы значений
	ТаблицаОтбора = Новый ТаблицаЗначений;
	ТаблицаОтбора.Колонки.Добавить("Контрагент");

	Для каждого СтрокаТаблицы Из СтрокиИзмерений Цикл

		ТаблицаОтбора.Добавить().Контрагент = СтрокаТаблицы.Контрагент;

	КонецЦикла;

	Возврат Последовательности.СписаниеБонусныхПрограмм.ПолучитьГраницы("Контрагент", ТаблицаОтбора);

КонецФункции

Функция ПредыдущийРегистраторПоследовательности(Период, Регистратор, Контрагент, УчитыватьВсеТипы)

//	Чеки могут присутствовать в последовательности только в статусе "Пробитый".
//	За некоторое время восстановление границы могло установить на такой чек.
//	После закрытия кассовой смены чеки НЕ ДОЛЖНЫ присутствовать в последовательности.
//	Соответственно, если такая "левая" граница обнаружена, нужно её снести
//	на максимально близкий предыдущий регистратор, но НЕ ЧекККМ (чтобы не переносить
//	при каждом получении очередного чека в пакете).
//	Тут ещё нужно не забыть как-то управлять процессом восстановления последовательности,
//	если таковой протекает в момент получения чеков... тут, конечно, вопрос..

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПоследовательность.Период КАК Период,
	|	ТаблицаПоследовательность.Регистратор КАК Регистратор,
	|	ТаблицаПоследовательность.Регистратор.Проведен КАК Проведен
	|ИЗ
	|	Последовательность.СписаниеБонусныхПрограмм КАК ТаблицаПоследовательность
	|ГДЕ
	|	ТаблицаПоследовательность.Период <= &Период
	|	И ТаблицаПоследовательность.Контрагент = &Контрагент
	|	И НЕ ТаблицаПоследовательность.Регистратор = &Регистратор
	|	И ТаблицаПоследовательность.Регистратор.Проведен
	|	И ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ТаблицаПоследовательность.Регистратор) = ТИП(Документ.ЧекККМ)
	|				ТОГДА &УчитыватьВсеТипы = ИСТИНА
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ,
	|	Регистратор УБЫВ"
	);
	Запрос.УстановитьПараметр("Период"			, Период);
	Запрос.УстановитьПараметр("Регистратор"		, Регистратор);
	Запрос.УстановитьПараметр("Контрагент"		, Контрагент);
	Запрос.УстановитьПараметр("УчитыватьВсеТипы", УчитыватьВсеТипы);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

			МоментВремени = Новый МоментВремени(Выборка.Период, Выборка.Регистратор);

	Иначе	МоментВремени = Новый МоментВремени('00010101');

	КонецЕсли;

	Возврат МоментВремени;

КонецФункции

Функция ПолучитьТекстЗапросаПоследовательностиРегистраторов()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаПоследовательность.Период КАК Период,
	|	ТаблицаПоследовательность.Регистратор КАК Регистратор,
	|	ТаблицаПоследовательность.Контрагент КАК Контрагент
	|ИЗ
	|	Последовательность.СписаниеБонусныхПрограмм КАК ТаблицаПоследовательность
	|ГДЕ
	|	ТаблицаПоследовательность.Контрагент = &Контрагент
	|	И (ТаблицаПоследовательность.Период > &Период
	|			ИЛИ ТаблицаПоследовательность.Период = &Период
	|				И ТаблицаПоследовательность.Регистратор >= &Регистратор)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор"
	;
	Возврат ТекстЗапроса;

КонецФункции

//	LNK 28.10.2021 10:15:09
Функция ПроверитьНеобходимостьВосстановления(СписокПараметр)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаВедущая.Контрагент.Код КАК Код,
	|	ТаблицаВедущая.Контрагент КАК Контрагент,
	|	ТаблицаВедущая.Период КАК Период,
	|	МАКСИМУМ(ТаблицаВедущая.Регистратор) КАК Регистратор,
	|	ТаблицаГраницы.Период КАК Период_ГП,
	|	ТаблицаГраницы.Регистратор КАК Регистратор_ГП
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаРеестр.Контрагент КАК Контрагент,
	|		ТаблицаРеестр.Период КАК Период,
	|		МАКСИМУМ(ТаблицаРеестр.Регистратор) КАК Регистратор
	|	ИЗ
	|		Последовательность.СписаниеБонусныхПрограмм КАК ТаблицаРеестр
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ТаблицаПериоды.Контрагент КАК Контрагент,
	|				МАКСИМУМ(ТаблицаПериоды.Период) КАК Период
	|			ИЗ
	|				Последовательность.СписаниеБонусныхПрограмм КАК ТаблицаПериоды
	|			ГДЕ
	|				ВЫБОР
	|						КОГДА &СписокУказан = ИСТИНА
	|							ТОГДА ТаблицаПериоды.Контрагент В (&СписокКонтрагентов)
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ТаблицаПериоды.Контрагент) КАК ТаблицаПериоды
	|			ПО ТаблицаРеестр.Контрагент = ТаблицаПериоды.Контрагент
	|				И ТаблицаРеестр.Период = ТаблицаПериоды.Период
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА &СписокУказан = ИСТИНА
	|					ТОГДА ТаблицаРеестр.Контрагент В (&СписокКонтрагентов)
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаРеестр.Контрагент,
	|		ТаблицаРеестр.Период) КАК ТаблицаВедущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.СписаниеБонусныхПрограмм.Границы КАК ТаблицаГраницы
	|		ПО ТаблицаВедущая.Контрагент = ТаблицаГраницы.Контрагент
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ТаблицаГраницы.МоментВремени ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ ТаблицаВедущая.Регистратор = ТаблицаГраницы.Регистратор
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВедущая.Контрагент,
	|	ТаблицаВедущая.Период,
	|	ТаблицаГраницы.Период,
	|	ТаблицаГраницы.Регистратор,
	|	ТаблицаВедущая.Контрагент.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период"
	);	//	группирока МАКСИМУМ(Регистратор) на случай, если несколько регистраторов в одно время.. мало-ли!
	Запрос.УстановитьПараметр("СписокКонтрагентов", СписокПараметр);
	Запрос.УстановитьПараметр("СписокУказан", ТипЗнч(СписокПараметр) = Тип("Массив"));
	
	СписокКонтрагентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");

	Возврат СписокКонтрагентов;

КонецФункции

#КонецОбласти














