#Область ОписаниеВнешнихСоединений

Функция ПолучитьСоединение(Источник)	Экспорт

	Ключи = ВнешниеИсточникиПовтИсп.ПолучитьПараметрыСоединения(Источник);

	COMСоединение = Новый COMОбъект("ADODB.Connection");
	COMСоединение.ConnectionString  = Ключи.ConnectionString;
	COMСоединение.ConnectionTimeOut = 1200;
	COMСоединение.IsolationLevel    = 256;
	COMСоединение.CursorLocation    = ?(Источник = Перечисления.ВнешниеИсточники.Navision, 3, 2);
    
    Попытка

        COMСоединение.Open(COMСоединение.ConnectionString);

    Исключение

        COMСоединение = Неопределено;
		ТекстОшибки   = "Ошибка соединения" + Символы.ПС + ОписаниеОшибки();
        Сообщить(ТекстОшибки);
		ЗаписьЖурналаРегистрации("ADODB.Connection", УровеньЖурналаРегистрации.Ошибка
		,, Источник, ТекстОшибки, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

    КонецПопытки;

    Возврат COMСоединение;

КонецФункции

Функция ПолучитьПараметрыСоединения(Источник)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ПараметрыСоединения = Новый Структура(
		"Account, Password, ServerAddress, BaseName, ConnectionString", "", "", "", "", "");

	Запрос	= Новый Запрос(
	"ВЫБРАТЬ
	|	ПараметрыСоединения.Account КАК Account,
	|	ПараметрыСоединения.Password КАК Password,
	|	ПараметрыСоединения.ServerAddress КАК ServerAddress,
	|	ВЫБОР
	|		КОГДА ПараметрыСоединения.BaseName = """"
	|			ТОГДА ВЫБОР
	|					КОГДА &Источник = ЗНАЧЕНИЕ(Перечисление.ВнешниеИсточники.Navision)
	|						ТОГДА ""Euro2009""
	|					КОГДА &Источник = ЗНАЧЕНИЕ(Перечисление.ВнешниеИсточники.CountersMotion)
	|						ТОГДА ""cm_database""
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ПараметрыСоединения.BaseName
	|	КОНЕЦ КАК BaseName
	|ИЗ
	|	РегистрСведений.ПараметрыСоединения КАК ПараметрыСоединения
	|ГДЕ
	|	ПараметрыСоединения.Источник = &Источник
	|	И ПараметрыСоединения.Активен"
	);
	Запрос.УстановитьПараметр("Источник", Источник);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		ЗаполнитьЗначенияСвойств(ПараметрыСоединения, Выборка);

		ПараметрыСоединения.ConnectionString =
			?(Источник = Перечисления.ВнешниеИсточники.Navision
				, "DRIVER={SQL Server};SERVER=#server#;UID=#account#;PWD=#password#;DATABASE=#basename#;LANGUAGE=русский",
			?(Источник = Перечисления.ВнешниеИсточники.CountersMotion
				, "DRIVER={SQL Server};SERVER=#server#;UID=#account#;PWD=#password#;DATABASE=#basename#;LANGUAGE=русский",
			?(Источник = Перечисления.ВнешниеИсточники.Oracle
				, "DRIVER={Oracle in instantclient_12_1};DBQ=#server#;UID=#account#;PWD=#password#"
				, "")));
		ПараметрыСоединения.ConnectionString = СтрЗаменить(ПараметрыСоединения.ConnectionString, "#server#"  , ПараметрыСоединения.ServerAddress);
		ПараметрыСоединения.ConnectionString = СтрЗаменить(ПараметрыСоединения.ConnectionString, "#account#" , ПараметрыСоединения.Account);
		ПараметрыСоединения.ConnectionString = СтрЗаменить(ПараметрыСоединения.ConnectionString, "#password#", ПараметрыСоединения.Password);
		ПараметрыСоединения.ConnectionString = СтрЗаменить(ПараметрыСоединения.ConnectionString, "#basename#", ПараметрыСоединения.BaseName);

	Иначе

		ВызватьИсключение "Для источника «" + СокрЛП(Источник) + "» не указаны активные параметры соединения!";

	КонецЕсли;

	Возврат ПараметрыСоединения;

КонецФункции

Функция УточнитьТекстЗапроса(ТекстЗапроса, Источник)	Экспорт

	Ключи = ВнешниеИсточникиПовтИсп.ПолучитьПараметрыСоединения(Источник);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Euro2009]", "[" + Ключи.BaseName + "]");

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область ОсновнойВнешнийИнтерфейс

//	Выполняет искусственную блокировку некоего процесса, блокируя один никому не нужный объект
Функция БлокироватьПроцесс(Блокировать, ОбъектБлокировки)	Экспорт

	Если Блокировать Тогда

		ОбъектБлокировки = Справочники.СтруктураУзлов.КСУ_Navision.ПолучитьОбъект();

		Если ОбъектБлокировки.Заблокирован() Тогда

			ЕстьБлокировка = Ложь;

		Иначе

			Попытка

				ОбъектБлокировки.Заблокировать();
				ЕстьБлокировка = Истина;

			Исключение

				ОбъектБлокировки = Неопределено;
				ЕстьБлокировка	 = Ложь;

			КонецПопытки;

		КонецЕсли;

	Иначе

		ОбъектБлокировки = Неопределено;
		ЕстьБлокировка	 = Ложь;

	КонецЕсли;

	Возврат ЕстьБлокировка;

КонецФункции // БлокироватьПроцесс()

//	LNK 14.11.2022 06:13:26
Функция СброситьКодИзменения(НекотораяСсылка)	Экспорт

	ДанныеВозврата = Новый Структура(
		"Выполнено, ТекстСообщения"
		, Ложь
		, ""
	);

	ТипЗначения = ТипЗнч(НекотораяСсылка);

	Если ТипЗначения = Тип("СправочникСсылка.Склады") Тогда

		СброситьКодИзмененияДляСклада(НекотораяСсылка, ДанныеВозврата);

	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Магазины") Тогда

		Если НЕ ПривилегированныйРежим() Тогда

			УстановитьПривилегированныйРежим(Истина);

		КонецЕсли;

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаМагазины.СкладПереброски КАК СкладПереброски,
		|	ТаблицаМагазины.СкладПоступления КАК СкладПоступления,
		|	ТаблицаМагазины.СкладПродажи КАК СкладПродажи,
		|	ТаблицаМагазины.СкладСвязи КАК СкладСвязи
		|ПОМЕСТИТЬ Источник
		|ИЗ
		|	Справочник.Магазины КАК ТаблицаМагазины
		|ГДЕ
		|	ТаблицаМагазины.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Источник.СкладПереброски КАК Склад
		|ИЗ
		|	Источник КАК Источник
		|ГДЕ
		|	НЕ Источник.СкладПереброски = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Источник.СкладПоступления
		|ИЗ
		|	Источник КАК Источник
		|ГДЕ
		|	НЕ Источник.СкладПоступления = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Источник.СкладПродажи
		|ИЗ
		|	Источник КАК Источник
		|ГДЕ
		|	НЕ Источник.СкладПродажи = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Источник.СкладСвязи
		|ИЗ
		|	Источник КАК Источник
		|ГДЕ
		|	НЕ Источник.СкладСвязи = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Источник"
		);
		Запрос.УстановитьПараметр("Ссылка", НекотораяСсылка);
		
		РезультатЗапроса = Запрос.Выполнить();

		Если РезультатЗапроса.Пустой() Тогда

			ДанныеВозврата.ТекстСообщения = "Спроба отримання складів магазину не мала успіху";

		Иначе

			Выборка = РезультатЗапроса.Выбрать();

			Пока Выборка.Следующий() Цикл

				СброситьКодИзмененияДляСклада(Выборка.Склад, ДанныеВозврата);

			КонецЦикла;

			ДанныеВозврата.Выполнено = Истина;

		КонецЕсли;

	Иначе

		ДанныеВозврата.ТекстСообщения = "Тип переданого параметра «" + ТипЗначения + "» не обробляється."; 

	КонецЕсли;

	Возврат ДанныеВозврата;

КонецФункции

//	LNK 15.11.2022 10:55:28
Процедура СброситьКодИзмененияДляСклада(СкладСсылка, ДанныеВозврата)

	Если ТипЗнч(СкладСсылка) = Тип("СправочникСсылка.Склады") И НЕ ОбщегоНазначенияКлиентСервер.СсылкаПустая(СкладСсылка) Тогда

		СкладОбъект = СкладСсылка.ПолучитьОбъект();
		#Если _ Тогда
		СкладОбъект = Справочники.Склады.СоздатьЭлемент();
		#КонецЕсли

		Если НЕ ПустаяСтрока(СкладОбъект.КодИзменения) Тогда

			СкладОбъект.КодИзменения = "";

		КонецЕсли;

		Если СкладОбъект.Модифицированность() Тогда

		//	СкладОбъект.ДополнительныеСвойства.Вставить("СлужебныйРежимЗаписи", Истина);
			СкладОбъект.ОбменДанными.Загрузка = Истина;
			СкладОбъект.Записать();

			ДанныеВозврата.ТекстСообщения = ДанныеВозврата.ТекстСообщения + ?(ПустаяСтрока(ДанныеВозврата.ТекстСообщения), "", Символы.ПС)
			+ "виконано для складу з кодом «" + СокрЛП(СкладОбъект.Код) + "»"

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхИзВнешнихИсточников

Функция ПрочитатьВнешнийНаборДанных(РежимСоединения, ТекстЗапроса, ТаблицаЗначений, СоответствиеИмен = Неопределено, ДлительностьПаузы = 1000)

	Перем RecordSet;

	Connection = ВнешниеИсточникиПовтИсп.ПолучитьСоединение(РежимСоединения);

	Если НЕ Connection = Неопределено Тогда

		Для Итерация = 1 По 5 Цикл

			Попытка

				Command   = Новый COMОбъект("ADODB.Command");
				RecordSet = Новый COMОбъект("ADODB.RecordSet");

				Command.ActiveConnection = Connection;
				Command.CommandText      = ТекстЗапроса;
				Command.CommandTimeout   = 1200;	//	LNK 16.10.2018 10:05:48

				RecordSet = Command.Execute();
				Прервать;

			Исключение

				ТекстОшибки = ОписаниеОшибки()
					+ Символы.ПС + "Текст запроса:"
					+ Символы.ПС + ТекстЗапроса;
				ЗаписьЖурналаРегистрации("ADODB.Execute", УровеньЖурналаРегистрации.Ошибка
				,,, "Пауза " + Окр(ДлительностьПаузы / 1000 / 60, 3) + " мин. Ошибка:"
				+ Символы.ПС + ТекстОшибки);

				Если Итерация = 5 Тогда

					ВызватьИсключение ТекстОшибки;

				КонецЕсли;

				ОбщегоНазначенияКлиентСервер.Пауза(ДлительностьПаузы);

			КонецПопытки;

		КонецЦикла;

	//	---------------------------------------------------------------------------------------

		СоответствиеИмен = Новый Соответствие;
		СоставПолей      = ВнешниеИсточникиПовтИсп.СоответствиеПолейВнешнихИсточников();

		Если RecordSet.Fields.Count = 0 Тогда

			ВызватьИсключение "Запрос к внешнему источнику «" + РежимСоединения + "» вернул пустую таблицу (нет полей таблицы)";

		Иначе

			КоличествоПолей  = RecordSet.Fields.Count - 1;

			Для Индекс = 0 По КоличествоПолей Цикл

				NameField  = RecordSet.Fields(Индекс).Name;
				ИмяПоля    = ПривестиКОбщемуПравилуИмен(NameField);
				СоставПоля = СоставПолей.Получить(ВРег(ИмяПоля));
				СоответствиеИмен.Вставить(ИмяПоля, NameField);

				Если НЕ СоставПоля = Неопределено И СоставПоля.Да Тогда

					ТаблицаЗначений.Колонки.Добавить(ИмяПоля, СоставПоля.Тип);

				Иначе

					Отладка = 22;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Возврат RecordSet;

КонецФункции

Функция ПривестиКОбщемуПравилуИмен(Знач Текст, ВерхнийРегистр = Ложь)	Экспорт

	Текст = СокрЛП(Текст);
	Текст = СтрЗаменить(Текст, " ",  "");
	Текст = СтрЗаменить(Текст, "-", "_");
	Текст = СтрЗаменить(Текст, ".", "_");
	Текст = ?(Лев(Текст, 1) < "A", "A", "") + Текст;

	Возврат ?(ВерхнийРегистр, ВРег(Текст), Текст);

КонецФункции // ПривестиКОбщемуПравилуИмен()

Функция ПолучитьДанныеПоКлиентамИКартамИзOracle(ИмяМакета, КодыПокупателей)

	ТаблицаOracle = Новый ТаблицаЗначений;
	ТекстЗапроса  = СтрЗаменить(ВнешниеИсточникиПовтИсп.ПолучитьТекстЗапроса(ИмяМакета, Перечисления.ВнешниеИсточники.Oracle), "in (9999999999)", "in (" + СокрЛП(КодыПокупателей) + ")");
	RecordSet     = ПрочитатьВнешнийНаборДанных(Перечисления.ВнешниеИсточники.Oracle, ТекстЗапроса, ТаблицаOracle);

	Если НЕ (RecordSet.BOF() И RecordSet.EOF()) Тогда

		RecordSet.MoveFirst();

		Пока RecordSet.EOF() = 0 Цикл   

			СтрокаТаблицы = ТаблицаOracle.Добавить();

			Для каждого Колонка Из ТаблицаOracle.Колонки Цикл

				Значение = RecordSet.Fields(Колонка.Имя).Value;

				Если ТипЗнч(СтрокаТаблицы[Колонка.Имя]) = Тип("Строка") И ТипЗнч(Значение) = Тип("Число")	Тогда

					Значение = Формат(Значение, "ЧГ=");

				ИначеЕсли ТипЗнч(СтрокаТаблицы[Колонка.Имя]) = Тип("Дата") И ТипЗнч(Значение) = Тип("Строка") Тогда

					Значение = ПолучитьДатуИзСтроки(Значение);

				КонецЕсли;					

				СтрокаТаблицы[Колонка.Имя] = Значение;

			КонецЦикла;

			RecordSet.MoveNext();

		КонецЦикла; 

	КонецЕсли;

	Возврат ТаблицаOracle;

КонецФункции

Функция ПолучитьДанныеОтNavision(ИмяМакета, СтрокаПоиска = "IN ('9999999999')", СтрокаЗамены = "", ПереданТекстЗапроса = Ложь, ДлительностьПаузы = 1000, ПараметрПервые = "")	Экспорт

	Перем СоответствиеИмен;

	ТаблицаNavision = Новый ТаблицаЗначений;
	ТекстЗапроса    = ?(ПереданТекстЗапроса, ИмяМакета, СтрЗаменить(ВнешниеИсточникиПовтИсп.ПолучитьТекстЗапроса(ИмяМакета, Перечисления.ВнешниеИсточники.Navision), СтрокаПоиска, СокрЛП(СтрокаЗамены)));
	ТекстЗапроса    = СтрЗаменить(ТекстЗапроса, "#TOP#", СокрЛП(ПараметрПервые));
	RecordSet       = ПрочитатьВнешнийНаборДанных(Перечисления.ВнешниеИсточники.Navision
		, ТекстЗапроса
		, ТаблицаNavision
		, СоответствиеИмен
		, ДлительностьПаузы
	);

	Если НЕ (RecordSet.BOF() И RecordSet.EOF()) Тогда

		RecordSet.MoveFirst();

		Пока RecordSet.EOF() = 0 Цикл   

			СтрокаТаблицы = ТаблицаNavision.Добавить();

			Для каждого Колонка Из ТаблицаNavision.Колонки Цикл

				СтрокаТаблицы[Колонка.Имя] = RecordSet.Fields(СоответствиеИмен.Получить(Колонка.Имя)).Value;

			КонецЦикла;

			RecordSet.MoveNext();

		КонецЦикла;

	КонецЕсли;

	Если ТаблицаNavision.Колонки.Найти("IDN") = Неопределено Тогда

		ТаблицаNavision.Колонки.Добавить("IDN", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));

	КонецЕсли;

	Возврат ТаблицаNavision;

КонецФункции

//	LNK 03.01.2020 13:31:58
Функция ПолучитьДанныеCountersMotion(ТекстЗапроса, ДлительностьПаузы = 1000)	Экспорт

	Перем СоответствиеИмен;

	ТаблицаВнешняя = Новый ТаблицаЗначений;

	RecordSet = ПрочитатьВнешнийНаборДанных(Перечисления.ВнешниеИсточники.CountersMotion
		, ТекстЗапроса
		, ТаблицаВнешняя
		, СоответствиеИмен
		, ДлительностьПаузы);

	Если НЕ (RecordSet.BOF() И RecordSet.EOF()) Тогда

		RecordSet.MoveFirst();

		Пока RecordSet.EOF() = 0 Цикл   

			СтрокаТаблицы = ТаблицаВнешняя.Добавить();

			Для каждого Колонка Из ТаблицаВнешняя.Колонки Цикл

				Значение = RecordSet.Fields(СоответствиеИмен.Получить(Колонка.Имя)).Value;

				Если ТипЗнч(Значение) = Тип("Число") И ТипЗнч(СтрокаТаблицы[Колонка.Имя]) = Тип("Строка") Тогда

				//	LNK 06.01.2020 10:42:06	- избавляемся от НПП
					СтрокаТаблицы[Колонка.Имя] = Формат(Значение, "ЧГ=");

				Иначе

					СтрокаТаблицы[Колонка.Имя] = Значение;

				КонецЕсли;

			КонецЦикла;

			RecordSet.MoveNext();

		КонецЦикла;

	КонецЕсли;

	Возврат ТаблицаВнешняя;

КонецФункции

#КонецОбласти

#Область СозданиеЛокальныхОбъектовПоВнешнимДанным

#Область ФормированиеДокументов

Процедура УстановитьДанныеДокумента(ВыборкаДокументы, Колонки, ОбновитьАналитику, СсылкиОбработаны)

	Если ЗначениеЗаполнено(ВыборкаДокументы.Документ) Тогда

		ДокументОбъект = ВыборкаДокументы.Документ.ПолучитьОбъект();
		ДокументОбъект.Товары.Очистить();
		ДокументОбъект.Оплата.Очистить();

	Иначе

		ДокументОбъект = Документы.ЧекККМ.СоздатьДокумент();
		ДокументОбъект.Дата        = ВыборкаДокументы.Дата;
		ДокументОбъект.Номер       = ВыборкаДокументы.Номер;
		ДокументОбъект.ДополнительныеСвойства.Вставить("ПолучениеИзВнешнегоИсточника", Истина);

	КонецЕсли;

	ДокументОбъект.НомерЧекаККМ = ВыборкаДокументы.НомерФискальный;
	ДокументОбъект.Магазин      = ВыборкаДокументы.Магазин;
	ДокументОбъект.ВидОперации  = ВыборкаДокументы.ВидОперации;
	ДокументОбъект.Организация  = ВыборкаДокументы.Организация;
	ДокументОбъект.КассаККМ     = УстановитьКассуККМ(ВыборкаДокументы, ОбновитьАналитику, СсылкиОбработаны);

	ДокументОбъект.ВладелецДисконтнойКарты = ВыборкаДокументы.ВладелецДисконтнойКарты;
	ДокументОбъект.ДисконтнаяКарта         = ВыборкаДокументы.ДисконтнаяКарта;

	ДокументОбъект.СкидкиРассчитаны = Истина;
	ДокументОбъект.ЦенаВключаетНДС  = Истина;
	ДокументОбъект.АналитикаХозяйственнойОперации = ?(ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат
		, Справочники.АналитикаХозяйственныхОпераций.ВозвратОтПокупателя
		, Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров);

	Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат И ЗначениеЗаполнено(ВыборкаДокументы.ДокументПродажи) Тогда

		ДокументОбъект.ЧекККМПродажа = ВыборкаДокументы.ДокументПродажи;

	КонецЕсли;

//	---------------------------------------------------------------------------------------

	ТаблицаПодготовки = ПолучитьПредварительнуюТаблицуТовары(ВыборкаДокументы.Выбрать(), Колонки);

	Если НЕ ТаблицаПодготовки.Количество() = 0 Тогда

		ИтоговыеСтроки = ТаблицаПодготовки.НайтиСтроки(Новый Структура("ИтогЧека", Истина));

		Если ИтоговыеСтроки.Количество() = 0 Тогда

			Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда

			//	Типа как не доехала итоговая запись... сообщим и примем первую строку.
				Сообщить("Данные по чеку (" + ДокументОбъект.ВидОперации + ") № " + ВыборкаДокументы.Номер + " от " + ВыборкаДокументы.Дата + " НЕКОРРЕКТНЫ! - нет итоговой строки.");

			КонецЕсли;

			СтрокаИтогЧека     = ТаблицаПодготовки[0];
			ЕстьИтоговаяСтрока = Ложь;

		Иначе

			СтрокаИтогЧека     = ИтоговыеСтроки[0];
			ЕстьИтоговаяСтрока = Истина;

		КонецЕсли;

		Если ИтоговыеСтроки.Количество() > 1 Тогда

		//	А тут какая-то проблема... и, наверное, неслабая! Считаем критической!
			Сообщить("В чеке № " + ВыборкаДокументы.Номер + " от " + ВыборкаДокументы.Дата + " несколько итоговых строк!");

		Иначе

			ДокументОбъект.СтатусЧекаККМ = ?(СтрокаИтогЧека.ЧекПробит, Перечисления.СтатусыЧековККМ.Архивный, Перечисления.СтатусыЧековККМ.Отложенный);

			Если ЕстьИтоговаяСтрока И ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда

				ДокументОбъект.СуммаДокумента = СтрокаИтогЧека.СуммаОплаты;

				Если НЕ СтрокаИтогЧека.СуммаОплатыБезнал = 0 Тогда

					СтрокаОплата = ДокументОбъект.Оплата.Добавить();
					СтрокаОплата.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПлатежнойКартой;
					СтрокаОплата.Сумма     = СтрокаИтогЧека.СуммаОплатыБезнал;

				КонецЕсли;

			Иначе

				ДокументОбъект.СуммаДокумента = ТаблицаПодготовки.Итог("Сумма");

				Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат И ЗначениеЗаполнено(ДокументОбъект.ЧекККМПродажа) Тогда

					Запрос	= Новый Запрос(
					"ВЫБРАТЬ
					|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
					|	ТабличнаяЧасть.ВидОплаты,
					|	ТабличнаяЧасть.ЭквайринговыйТерминал,
					|	СУММА(ТабличнаяЧасть.Сумма) КАК Сумма,
					|	ТабличнаяЧасть.СсылочныйНомер,
					|	ТабличнаяЧасть.НомерЧекаЭТ,
					|	ТабличнаяЧасть.НомерПлатежнойКарты,
					|	ТабличнаяЧасть.ДанныеПереданыВБанк
					|ПОМЕСТИТЬ Оплата
					|ИЗ
					|	Документ.ЧекККМ.Оплата КАК ТабличнаяЧасть
					|ГДЕ
					|	ТабличнаяЧасть.Ссылка = &ЧекККМПродажа
					|
					|СГРУППИРОВАТЬ ПО
					|	ТабличнаяЧасть.НомерСтроки,
					|	ТабличнаяЧасть.ВидОплаты,
					|	ТабличнаяЧасть.ЭквайринговыйТерминал,
					|	ТабличнаяЧасть.СсылочныйНомер,
					|	ТабличнаяЧасть.НомерЧекаЭТ,
					|	ТабличнаяЧасть.НомерПлатежнойКарты,
					|	ТабличнаяЧасть.ДанныеПереданыВБанк
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Оплата.НомерСтроки,
					|	Оплата.ВидОплаты,
					|	Оплата.ЭквайринговыйТерминал,
					|	Оплата.Сумма * ВЫБОР
					|		КОГДА Итоги.Сумма = 0
					|			ТОГДА 0
					|		КОГДА &СуммаДокумента >= Итоги.Сумма
					|			ТОГДА 1
					|		ИНАЧЕ &СуммаДокумента / Итоги.Сумма
					|	КОНЕЦ КАК Сумма,
					|	Оплата.СсылочныйНомер,
					|	Оплата.НомерЧекаЭТ,
					|	Оплата.НомерПлатежнойКарты,
					|	Оплата.ДанныеПереданыВБанк
					|ИЗ
					|	Оплата КАК Оплата,
					|	(ВЫБРАТЬ
					|		СУММА(Оплата.Сумма) КАК Сумма
					|	ИЗ
					|		Оплата КАК Оплата) КАК Итоги
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ТаблицаДокументы.ВладелецДисконтнойКарты,
					|	ТаблицаДокументы.ДисконтнаяКарта,
					|	ТаблицаДокументы.ДоговорЭквайринга
					|ИЗ
					|	Документ.ЧекККМ КАК ТаблицаДокументы
					|ГДЕ
					|	ТаблицаДокументы.Ссылка = &ЧекККМПродажа"
					);
					Запрос.УстановитьПараметр("ЧекККМПродажа" , ДокументОбъект.ЧекККМПродажа);
					Запрос.УстановитьПараметр("СуммаДокумента", ДокументОбъект.СуммаДокумента);

					Результаты = Запрос.ВыполнитьПакет();
					ДокументОбъект.Оплата.Загрузить(Результаты[1].Выгрузить());

					ВыборкаОснование = Результаты[2].Выбрать();

					Если ВыборкаОснование.Следующий() Тогда

						Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВладелецДисконтнойКарты) И ЗначениеЗаполнено(ВыборкаОснование.ВладелецДисконтнойКарты) Тогда

							ДокументОбъект.ВладелецДисконтнойКарты = ВыборкаОснование.ВладелецДисконтнойКарты;

						КонецЕсли;

						Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДисконтнаяКарта) И ЗначениеЗаполнено(ВыборкаОснование.ДисконтнаяКарта) Тогда

							ДокументОбъект.ДисконтнаяКарта = ВыборкаОснование.ДисконтнаяКарта;

						КонецЕсли;

						Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорЭквайринга) И ЗначениеЗаполнено(ВыборкаОснование.ДоговорЭквайринга) Тогда

							ДокументОбъект.ДоговорЭквайринга = ВыборкаОснование.ДоговорЭквайринга;

						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

			УстановитьНоменклатуруВТаблицеПодготовки(ТаблицаПодготовки, ОбновитьАналитику, СсылкиОбработаны);

			Для каждого СтрокаПодготовка Из ТаблицаПодготовки Цикл

				Если СтрокаПодготовка.ИтогЧека Тогда

					Продолжить;

				КонецЕсли;

				СтрокаТабличнойЧасти = ДокументОбъект.Товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура    = СтрокаПодготовка.Номенклатура;
				СтрокаТабличнойЧасти.Цена            = СтрокаПодготовка.ЦенаВРознице;	// Цена = ЦенаБезСкидки
				СтрокаТабличнойЧасти.Сумма           = СтрокаПодготовка.Сумма;			//	Сумма пляшет от поля "Цена"
				СтрокаТабличнойЧасти.Количество      = СтрокаПодготовка.Количество;
				СтрокаТабличнойЧасти.СтавкаНДС       = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
				СтрокаТабличнойЧасти.СуммаНДС        = ОбработкаТабличнойЧастиТоварыКлиентСервер.РассчитатьСуммуНДСПоСуммеСНДС(СтрокаТабличнойЧасти.Сумма
														, НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТабличнойЧасти.СтавкаНДС)
														, ДокументОбъект.ЦенаВключаетНДС);
				СтрокаТабличнойЧасти.Штрихкод        = СтрокаПодготовка.Штрихкод;
				СтрокаТабличнойЧасти.Склад           = СтрокаПодготовка.Склад;
				СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.Количество;

				Если НЕ СтрокаПодготовка.Цена = СтрокаТабличнойЧасти.Цена Тогда

					СуммаБезСкидки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

					Если НЕ СуммаБезСкидки = 0 Тогда

						Если ПустаяСтрока(СтрокаПодготовка.КодКарты) Тогда

							СтрокаТабличнойЧасти.ПроцентРучнойСкидки = 100 * (1 - СтрокаТабличнойЧасти.Сумма / СуммаБезСкидки);
							СтрокаТабличнойЧасти.СуммаРучнойСкидки   = СуммаБезСкидки - СтрокаТабличнойЧасти.Сумма;

						Иначе

							СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 100 * (1 - СтрокаТабличнойЧасти.Сумма / СуммаБезСкидки);
							СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки   = СуммаБезСкидки - СтрокаТабличнойЧасти.Сумма;

						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

			ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
				ДокументОбъект,
				ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС),
				"СуммаДокумента");

			СуммаРазница = ДокументОбъект.СуммаДокумента - ДокументОбъект.Оплата.Итог("Сумма");

			Если НЕ СуммаРазница = 0 Тогда

				СтрокаОплата = ДокументОбъект.Оплата.Добавить();
				СтрокаОплата.Сумма = СуммаРазница;
				СтрокаОплата.ВидОплаты = Справочники.ВидыОплатЧекаККМ.Наличные;

			КонецЕсли;

			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.ПометкаУдаления = Ложь;
			ДокументОбъект.Проведен = Истина;
			ДокументОбъект.Записать();

			Документы.ЧекККМ.ВыполнитьДвиженияРасширеннойАналитикиПродаж(ДокументОбъект.Ссылка, ДокументОбъект.Дата, ДокументОбъект.СтатусЧекаККМ, Истина,, Ложь, Ложь);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 22.06.2020 10:52:21
Процедура ПроверитьКолонкиПредварительнойТаблицы(ТаблицаПодготовки)

	КолонкиОбязательные = Новый Массив;
	КолонкиОбязательные.Добавить(Новый Структура("Имя, ТипЗначения", "IDN", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20))));
	КолонкиОбязательные.Добавить(Новый Структура("Имя, ТипЗначения", "Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")));
//	LNK 22.06.2020 10:28:12 - Принудительно обновить, в обход сравнения таймштампа
	КолонкиОбязательные.Добавить(Новый Структура("Имя, ТипЗначения", "Force", Новый ОписаниеТипов("Булево")));

	Для каждого Колонка Из КолонкиОбязательные Цикл

		Если ТаблицаПодготовки.Колонки.Найти(Колонка.Имя) = Неопределено Тогда

			ТаблицаПодготовки.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьПредварительнуюТаблицуТовары(ВыборкаДетали, Колонки = Неопределено)	Экспорт

	ТаблицаПодготовки = Новый ТаблицаЗначений;
	ТаблицаПодготовки.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));

	Если Колонки = Неопределено Тогда

		Колонки = Новый Массив;

	КонецЕсли;

	Для каждого Колонка Из Колонки Цикл

		ТаблицаПодготовки.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);

	КонецЦикла;

//	Теперь проверим наличие обязательных колонок.
	ПроверитьКолонкиПредварительнойТаблицы(ТаблицаПодготовки);

	НомерСтроки = 0;

	Если ТипЗнч(ВыборкаДетали) = Тип("Массив") Тогда

		Для каждого ЭлементМассива Из ВыборкаДетали Цикл

			Если НЕ ПустаяСтрока(ЭлементМассива) Тогда

				СтрокаТаблицы = ТаблицаПодготовки.Добавить();

				НомерСтроки = НомерСтроки + 1;
				СтрокаТаблицы.НомерСтроки = НомерСтроки;
				СтрокаТаблицы.IDN         = ЭлементМассива;

			КонецЕсли;

		КонецЦикла;

	ИначеЕсли НЕ ВыборкаДетали = Неопределено Тогда

		Пока ВыборкаДетали.Следующий() Цикл

			СтрокаТаблицы = ТаблицаПодготовки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаДетали);

			НомерСтроки = НомерСтроки + 1;
			СтрокаТаблицы.НомерСтроки = НомерСтроки;

		КонецЦикла;

	КонецЕсли;

	Возврат ТаблицаПодготовки;

КонецФункции // ПолучитьПредварительнуюТаблицуТовары()

Процедура УстановитьНоменклатуруВТаблицеПодготовки(ТаблицаЗначений, ОбновитьАналитику, СсылкиОбработаны, ПараметрыВыборки = Неопределено)	Экспорт

	Перем СписокКодовЗапроса;

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если ТипЗнч(ПараметрыВыборки) = Тип("Структура") Тогда

	//	Передана уже готовая выборка...
	//	в этом случае должна быть передана и строка кодов "СписокКодовЗапроса" - это обязательно!
		ВыборкаОбновить    = ПараметрыВыборки.ВыборкаДанных;
		СписокКодовЗапроса = ПараметрыВыборки.СписокКодов;

		ВнешниеИсточникиСобытия.ВыполнитьЗаданиеУстановкиПлановыхЦенНоменклатуры(СписокКодовЗапроса);	//	LNK 04.03.2019 11:00:56

	Иначе

		Если ТипЗнч(ТаблицаЗначений) = Тип("Строка") ИЛИ ТипЗнч(ТаблицаЗначений) = Тип("Массив") Тогда

		//	Переданы IDN в виде строки с разделителями... установим эти коды в массив
			ТаблицаЗначений = ПолучитьПредварительнуюТаблицуТовары(?(ТипЗнч(ТаблицаЗначений) = Тип("Строка"), ОбщегоНазначенияКлиентСервер.lx_FillValueList(, ТаблицаЗначений), ТаблицаЗначений));

		Иначе

			ПроверитьКолонкиПредварительнойТаблицы(ТаблицаЗначений);

		КонецЕсли;

		Если НЕ ОбновитьАналитику Тогда

			НужноПолучитьТовары = Ложь;

			Для каждого СтрокТаблицы Из ТаблицаЗначений Цикл

				Если НЕ ПустаяСтрока(СтрокТаблицы.IDN) И НЕ ЗначениеЗаполнено(СтрокТаблицы.Номенклатура) Тогда

					НужноПолучитьТовары = Истина;
					Прервать;

				КонецЕсли;

			КонецЦикла;

			Если НЕ НужноПолучитьТовары Тогда

				Возврат;

			Иначе

				Отладка = 22;	//	поиск возможных проблем

			КонецЕсли;

		КонецЕсли;

		ВнешниеИсточникиСобытия.ВыполнитьЗаданиеУстановкиПлановыхЦенНоменклатуры(ПолучитьСтрокуIDNТоваров(ТаблицаЗначений.ВыгрузитьКолонку("IDN")));	//	LNK 04.03.2019 11:00:56

		ВыборкаОбновить = ПолучитьВыборкуНоменклатурыОбновления(ТаблицаЗначений, ОбновитьАналитику, СсылкиОбработаны, СписокКодовЗапроса);
	
	КонецЕсли;

	Если НЕ ВыборкаОбновить.Количество() = 0 Тогда

		ТоварыNavision = Новый ПостроительЗапроса;
		ТоварыNavision.ИсточникДанных = Новый ОписаниеИсточникаДанных(ПолучитьДанныеОтNavision("ТоварыNavision",, "IN (" + СписокКодовЗапроса + ")"));
		ТоварыNavision.Отбор.Добавить("IDN");

		УпаковкиNavision = Новый ПостроительЗапроса;
		УпаковкиNavision.ИсточникДанных = Новый ОписаниеИсточникаДанных(ПолучитьДанныеОтNavision("УпаковкиNavision",, "IN (" + СписокКодовЗапроса + ")"));
		УпаковкиNavision.Отбор.Добавить("IDN");

		ШтрихкодыNavision = Новый ПостроительЗапроса;
		ШтрихкодыNavision.ИсточникДанных = Новый ОписаниеИсточникаДанных(ПолучитьДанныеОтNavision("ШтрихкодыNavision",, "IN (" + СписокКодовЗапроса + ")"));
		ШтрихкодыNavision.Отбор.Добавить("IDN");

		ВыборкаОбновить.Сбросить();
	//	В текущей выборке уже учитывается наличие / отсутствие номенклатуры и необходимость её обновления. 

		Пока ВыборкаОбновить.Следующий() Цикл

			СтрокаТаблицы = ТаблицаЗначений[ВыборкаОбновить.НомерСтроки - 1];

			Если ПустаяСтрока(СтрокаТаблицы.IDN) Тогда

				Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда

					СсылкиОбработаны.Добавить(СтрокаТаблицы.Номенклатура);

				КонецЕсли;

				Продолжить;

			КонецЕсли;

			ТоварыNavision.Отбор.IDN.Установить(СтрокаТаблицы.IDN);

			ТоварыNavision.Выполнить();
			ТоварыNavisionВыборка = ТоварыNavision.Результат.Выбрать();

			Если ТоварыNavisionВыборка.Следующий() Тогда

				УпаковкиNavision.Отбор.IDN.Установить(СтрокаТаблицы.IDN);
				УпаковкиNavision.Выполнить();

				ШтрихкодыNavision.Отбор.IDN.Установить(СтрокаТаблицы.IDN);
				ШтрихкодыNavision.Выполнить();

				НачатьТранзакцию();

				Попытка

					СтрокаТаблицы.Номенклатура = ПолучитьНоменклатуру(ТоварыNavisionВыборка
							, ВнешниеИсточникиПовтИсп.УровниГруппировокТоваровNavision().Количество()
							, ТоварыNavisionВыборка.Наименование
							, СтрокаТаблицы.Номенклатура
							, УпаковкиNavision.Результат.Выгрузить()
							, ШтрихкодыNavision.Результат.Выгрузить()
							, СтрокаТаблицы.IDN
							, ОбновитьАналитику
							, СсылкиОбработаны
							, Неопределено);

					ЗафиксироватьТранзакцию();

				Исключение

					ТекстОшибки = ОписаниеОшибки();
					ОтменитьТранзакцию();
					ВызватьИсключение ТекстОшибки;

				КонецПопытки;

			Иначе

				Отладка = 11;	//	какая-то проблема!

			КонецЕсли;

		КонецЦикла;

		ВнешниеИсточникиСобытия.УстановитьХарактеристикиЦенниковНоменклатуры(СписокКодовЗапроса);

	КонецЕсли;

	Если СсылкиОбработаны.Количество() > 10000 Тогда

		СсылкиОбработаны = Новый Массив;

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьВыборкуНоменклатурыОбновления(ТаблицаЗначений, ОбновитьАналитику, СсылкиОбработаны, СписокКодовЗапроса)

	Запрос	= Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЗначений.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаЗначений.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаЗначений.IDN КАК IDN,
	|	ТаблицаЗначений.Force КАК Force
	|ПОМЕСТИТЬ Ведущая
	|ИЗ
	|	&ТаблицаЗначений КАК ТаблицаЗначений
	|ГДЕ
	|	ТаблицаЗначений.IDN <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведущая.IDN КАК IDN,
	|	Ведущая.Номенклатура КАК Номенклатура,
	|	Ведущая.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Ведущая КАК Ведущая
	|ГДЕ
	|	Ведущая.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И НЕ Ведущая.Номенклатура В (&СсылкиОбработаны)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	);
	Запрос.УстановитьПараметр("ТаблицаЗначений"  , ТаблицаЗначений);
	Запрос.УстановитьПараметр("ОбновитьАналитику", ОбновитьАналитику);
	Запрос.УстановитьПараметр("СсылкиОбработаны" , СсылкиОбработаны);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
//	Первым запросом необходимо получить все доступные в текущей БД значения "КодИзменения"
//	для того, чтобы в следующем запросе сравнить их со значениями [timestamp] внешнего источника данных.

	СписокКодовЗапроса = ПолучитьСтрокуIDNТоваров(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("IDN"));

	Если НЕ ПустаяСтрока(СписокКодовЗапроса) Тогда

		ТаблицаИзменений = ПолучитьДанныеОтNavision("КодИзмененияNavision",, "IN (" + СписокКодовЗапроса + ")");

	Иначе

		ТаблицаИзменений = Новый ТаблицаЗначений;
		ТаблицаИзменений.Колонки.Добавить("IDN", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
		ТаблицаИзменений.Колонки.Добавить("КодИзменения", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));

	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИзменений.IDN КАК IDN,
	|	ТаблицаИзменений.КодИзменения КАК КодИзменения
	|ПОМЕСТИТЬ ТаблицаИзменений
	|ИЗ
	|	&ТаблицаИзменений КАК ТаблицаИзменений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведущая.IDN КАК IDN,
	|	Ведущая.Номенклатура КАК Номенклатура,
	|	Ведущая.НомерСтроки КАК НомерСтроки,
	|	Ведущая.Force КАК Force
	|ИЗ
	|	Ведущая КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИзменений КАК ТаблицаИзменений
	|		ПО Ведущая.IDN = ТаблицаИзменений.IDN
	|ГДЕ
	|	(Ведущая.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ИЛИ (&ОбновитьАналитику = ИСТИНА
	|				ИЛИ Ведущая.Force = ИСТИНА)
	|				И НЕ Ведущая.Номенклатура В (&СсылкиОбработаны)
	|			ИЛИ ВЫБОР
	|				КОГДА Ведущая.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|						И НЕ ТаблицаИзменений.КодИзменения ЕСТЬ NULL
	|						И НЕ Ведущая.Номенклатура В (&СсылкиОбработаны)
	|					ТОГДА ТаблицаИзменений.КодИзменения <> ВЫРАЗИТЬ(Ведущая.Номенклатура КАК Справочник.Номенклатура).КодИзменения
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
	РезультатЗапроса = Запрос.Выполнить();

	СписокКодовЗапроса = ПолучитьСтрокуIDNТоваров(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("IDN"));

	Возврат РезультатЗапроса.Выбрать();

КонецФункции

#КонецОбласти

#Область ФормированиеСправочников

#Область СправочникНоменклатура

Функция БлокироватьНоменклатураНовый()

	Блокиратор = Справочники.БлокираторыПроцессов.НовыйНоменклатура.ПолучитьОбъект();
	Блокиратор.Заблокировать();

	Возврат Блокиратор;

КонецФункции

Функция ПолучитьНоменклатуру(ДанныеNavision, Уровень, Наименование = Неопределено, Номенклатура = Неопределено, Упаковки = Неопределено, Штрихкоды = Неопределено, IDN = Неопределено, ОбновитьАналитику, СсылкиОбработаны, Блокиратор = Неопределено)

	Перем Объект;

//	Если попали в эту функцию, значит, необходимо обновить значения.
//	И по всем родителям тоже!

//	"Прямой" вызов функции для определения элемента в параметре "Номенклатура" передает пустую ссылку!
	КонтекстГруппы = (Номенклатура = Неопределено);
	БлокираторРазблокировать = (Блокиратор = Неопределено);

	Если НЕ КонтекстГруппы Тогда

	//	Работаем с элементом справочника. Если ссылка пустая, то попытаемся найти ссылку по IDN... мало ли где косяк лежит.

		Если Номенклатура.Пустая() Тогда

			Объект	   = Неопределено;

			Если ЗначениеЗаполнено(IDN) Тогда

				Запрос	= Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ТаблицаСправочник.Ссылка КАК Номенклатура
				|ИЗ
				|	Справочник.Номенклатура КАК ТаблицаСправочник
				|ГДЕ
				|	ТаблицаСправочник.IDN = &IDN"
				);
				Запрос.УстановитьПараметр("IDN", IDN);
				
				Выборка = Запрос.Выполнить().Выбрать();

				Если Выборка.Следующий() Тогда

					Объект = Выборка.Номенклатура.ПолучитьОбъект();

				КонецЕсли;

			КонецЕсли;

			Если Объект = Неопределено Тогда

				Если Блокиратор = Неопределено Тогда

					Блокиратор = БлокироватьНоменклатураНовый();

				КонецЕсли;

				Объект = Справочники.Номенклатура.СоздатьЭлемент();
				Объект.УстановитьСсылкуНового(Справочники.Номенклатура.ПолучитьСсылку());

			КонецЕсли;

		Иначе

			Объект = ?(ОбновитьАналитику, Номенклатура.ПолучитьОбъект(), Номенклатура);

		КонецЕсли;

		Если Уровень > 0 И ТипЗнч(Объект) = Тип("СправочникОбъект.Номенклатура") Тогда

			Объект.Родитель = ПолучитьНоменклатуру(ДанныеNavision, Уровень - 1,,,,,, ОбновитьАналитику, СсылкиОбработаны, Блокиратор);

		КонецЕсли;

		Если БлокираторРазблокировать = Истина И НЕ Блокиратор = Неопределено Тогда

			Блокиратор.Разблокировать();
		
		КонецЕсли;

	Иначе

		КлючиГруппы  = ВнешниеИсточникиПовтИсп.УровниГруппировокТоваровNavision()[Уровень];
		IDN          = ДанныеNavision[КлючиГруппы.Код];
		IDNG         = ДанныеNavision[КлючиГруппы.IDNG];
		Наименование = ДанныеNavision[КлючиГруппы.Имя];
		Объект       = Справочники.Номенклатура.ПустаяСсылка();

		Если ПустаяСтрока(IDN) Тогда

			Если Уровень > 0 Тогда

				Объект = ПолучитьНоменклатуру(ДанныеNavision, Уровень - 1,,,,,, ОбновитьАналитику, СсылкиОбработаны, Блокиратор);

			КонецЕсли;

		Иначе

			Запрос	= Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаГруппы.Ссылка КАК Ссылка,
			|	ВЫБОР
			|		КОГДА НЕ ТаблицаГруппы.IDNG = &IDNG
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК Обновить,
			|	ТаблицаГруппы.КлючПорядка КАК КлючПорядка
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТаблицаСправочник.IDNG КАК IDNG,
			|		ТаблицаСправочник.Ссылка КАК Ссылка,
			|		1 КАК КлючПорядка
			|	ИЗ
			|		Справочник.Номенклатура КАК ТаблицаСправочник
			|	ГДЕ
			|		ТаблицаСправочник.IDNG = &IDNG
			|		И ТаблицаСправочник.ЭтоГруппа
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ТаблицаСправочник.IDNG,
			|		ТаблицаСправочник.Ссылка,
			|		2
			|	ИЗ
			|		Справочник.Номенклатура КАК ТаблицаСправочник
			|	ГДЕ
			|		ТаблицаСправочник.IDNG = &IDNG_OLD
			|		И ТаблицаСправочник.ЭтоГруппа) КАК ТаблицаГруппы
			|
			|УПОРЯДОЧИТЬ ПО
			|	КлючПорядка"
			);
			Запрос.УстановитьПараметр("IDNG_OLD", СформироватьIDNGпоДаннымNavision(ДанныеNavision, Уровень));
			Запрос.УстановитьПараметр("IDNG", IDNG);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();

			Если Результат.Пустой() Тогда

				Если Блокиратор = Неопределено Тогда

					Блокиратор = БлокироватьНоменклатураНовый();

				КонецЕсли;

				Объект = Справочники.Номенклатура.СоздатьГруппу();
				Объект.УстановитьСсылкуНового(Справочники.Номенклатура.ПолучитьСсылку());

			Иначе

				Выборка = Результат.Выбрать();
				Выборка.Следующий();

				УжеОбновлялся = НЕ (СсылкиОбработаны.Найти(Выборка.Ссылка) = Неопределено);
				Объект = ?(НЕ УжеОбновлялся И (ОбновитьАналитику ИЛИ Выборка.Обновить), Выборка.Ссылка.ПолучитьОбъект(), Выборка.Ссылка);

			КонецЕсли;

			Если Уровень > 0 И ТипЗнч(Объект) = Тип("СправочникОбъект.Номенклатура") Тогда

				Объект.Родитель = ПолучитьНоменклатуру(ДанныеNavision, Уровень - 1,,,,,, ОбновитьАналитику, СсылкиОбработаны, Блокиратор);

			КонецЕсли;

			Если БлокираторРазблокировать = Истина И НЕ Блокиратор = Неопределено Тогда

				Блокиратор.Разблокировать();
			
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	ТипЗначения = ТипЗнч(Объект);
	#Если _ Тогда
	Объект = Справочники.Номенклатура.СоздатьЭлемент();
	#КонецЕсли

	ТребуетсяОбновление = ТипЗначения = Тип("СправочникОбъект.Номенклатура")
						И ВнешниеИсточникиПовтИсп.КодыИсключенияЗагрузкиNavision().Получить(IDN) = Неопределено;

	Если ТребуетсяОбновление Тогда

		Если Объект.ЭтоГруппа Тогда

				IDNG = ДанныеNavision[ВнешниеИсточникиПовтИсп.УровниГруппировокТоваровNavision()[Уровень].IDNG];

		Иначе	IDNG = ДанныеNavision.IDNG;	//	всегда по родителю! Так решили на текущий момент

		КонецЕсли;

	//	Дополнительные проверки.
		Если НЕ (ОбновитьАналитику ИЛИ Объект.ЭтоНовый()) Тогда

			ТребуетсяОбновление = НЕ Объект.IDNG = IDNG;

		КонецЕсли;

	КонецЕсли;

	Если ТребуетсяОбновление Тогда

		Объект.ДополнительныеСвойства.Вставить("ОбменДаннымиNavision", Истина);

		Объект.Код  = IDN;
		Объект.IDN  = IDN;
		Объект.IDNG = IDNG;
		Объект.КодИзменения = ДанныеNavision.КодИзменения;
		Объект.Наименование = Наименование;

		Если НЕ Объект.ЭтоГруппа Тогда

			Объект.НаименованиеПолное = ДанныеNavision.НаименованиеУкраина;
			Объект.Артикул = СокрЛП(ДанныеNavision.Артикул);
			Объект.КодПоУКТЗЕД      = СокрЛП(ДанныеNavision.КодПоУКТЗЕД);
			Объект.НаборУпаковок    = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
			Объект.ЕдиницаИзмерения = ОбщегоНазначенияПовтИсп.ЕдиницаШтука();
			Объект.Вес = ДанныеNavision.ЕдиницаВесНетто;
			Объект.Блокирован = ДанныеNavision.Блокирован;
		//	LNK 31.03.2022 23:34:12 - ВОЙНА
		//	Объект.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		//	LNK 31.07.2023 10:25:00 - ПОСЛЕ ВОЙНЫ
			Объект.СтавкаНДС  = ?(ДанныеNavision.СтавкаНДСЗначение = 20
									, Перечисления.СтавкиНДС.НДС20,
								?(ДанныеNavision.СтавкаНДСЗначение = 14
									, Перечисления.СтавкиНДС.НДС14,
								?(ДанныеNavision.СтавкаНДСЗначение = 7
									, Перечисления.СтавкиНДС.НДС7
									, Перечисления.СтавкиНДС.БезНДС))
								);
		//	LNK 09.10.2017 15:23:07
			Объект.Новинка   = ДанныеNavision.Новинка;
			Объект.НовинкаДо = ДанныеNavision.НовинкаДата;
			Объект.Эксклюзив = ДанныеNavision.Эсклюзив;
			Объект.Маржинальность = ДанныеNavision.Маржинальность;
		//	LNK 10.05.2021 07:00:57
			Объект.WEB_АвторепрайсЦен = ДанныеNavision.WEB_АвторепрайсЦен;
			Объект.WEB_Выгружать	  = ДанныеNavision.WEB_Выгружать;
			Объект.WEB_МониторингЦен  = ДанныеNavision.WEB_МониторингЦен;

			Объект.ТолькоОбычныйЦенник			= ДанныеNavision.ТолькоОбычныйЦенник;			//	LNK 06.09.2019 10:54:12
			Объект.ПечатьЦенниковБезПиктограмм	= ДанныеNavision.ПечатьЦенниковБезПиктограмм;	//	LNK 04.05.2023 05:50:58

			Если Объект.ТипНоменклатуры.Пустая() Тогда

				Объект.ТипНоменклатуры  = Перечисления.ТипыНоменклатуры.Товар;

			КонецЕсли;

			Если ПустаяСтрока(ДанныеNavision.НазначениеТовара) Тогда

				Объект.НазначениеТовара = Перечисления.НазначенияТовара.ТоварОбычный;

			Иначе

				Объект.НазначениеТовара = Перечисления.НазначенияТовара[ДанныеNavision.НазначениеТовара];

			КонецЕсли;

			УстановитьВидНоменклатуры(ДанныеNavision, Объект.ВидНоменклатуры);
			ПолучитьПроизводителейNavision(ДанныеNavision.ПроизводительКод, Объект.Производитель);
			УстановитьУпаковкиНоменклатуры( ?(Объект.ЭтоНовый(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка), IDN, Упаковки);
			УстановитьШтрихкодыНоменклатуры(?(Объект.ЭтоНовый(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка), IDN, Штрихкоды);

			УстановитьДополнительныеРеквизиты(ДанныеNavision, Объект);

		КонецЕсли;

		Если НЕ ПустаяСтрока(Объект.IDN) Тогда

			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();

		Иначе

			ЗаписьЖурналаРегистрации("НоменклатураNavision", УровеньЖурналаРегистрации.Предупреждение
				, Метаданные.Справочники.Номенклатура, Объект.Ссылка, "Пресечена запись с пустым IDN", РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

		КонецЕсли;

	КонецЕсли;

	ЗначениеВозврата = ?(ТипЗначения = Тип("СправочникОбъект.Номенклатура"), Объект.Ссылка, Объект);

	СсылкиОбработаны.Добавить(ЗначениеВозврата);

	Возврат ЗначениеВозврата;

КонецФункции

Процедура УстановитьВидНоменклатуры(ДанныеNavision, ВидНоменклатуры)

	Если ВидНоменклатуры.Пустая() Тогда

		Элемент = Справочники.ВидыНоменклатуры.НайтиПоРеквизиту("IDN", ДанныеNavision.ПроектКод);

		Если Элемент = Справочники.ВидыНоменклатуры.ПустаяСсылка() Тогда

			Элемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
			Элемент.IDN = ДанныеNavision.ПроектКод;
			Элемент.НомерПроекта = ДанныеNavision.ПроектНомер;
			Элемент.Наименование = ДанныеNavision.ПроектНаименование;
			Элемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;

			Элемент.Записать();
			ВидНоменклатуры = Элемент.Ссылка;

		Иначе

			ВидНоменклатуры = Элемент;

		КонецЕсли;

	КонецЕсли;

	Если НЕ ВидНоменклатуры.Пустая() Тогда

		НужныеРеквизиты = Новый ТаблицаЗначений;
		НужныеРеквизиты.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));

		Если НЕ ПустаяСтрока(ДанныеNavision.ПолКод) Тогда

			НужныеРеквизиты.Добавить().Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ГендерноеНазначение;

		КонецЕсли;

		Если НЕ ПустаяСтрока(ДанныеNavision.ВозрастКод) Тогда

			НужныеРеквизиты.Добавить().Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ВозрастнойИнтервал;

		КонецЕсли;

		Если НЕ ПустаяСтрока(ДанныеNavision.Размер) Тогда

			НужныеРеквизиты.Добавить().Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.РазмерностьТовара;

		КонецЕсли;

		Если НЕ ПустаяСтрока(ДанныеNavision.ТорговаяМаркаКод) Тогда

			НужныеРеквизиты.Добавить().Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ТорговыеМарки;

		КонецЕсли;

		Если НЕ ПустаяСтрока(ДанныеNavision.СтранаПроисхожденияКод) Тогда

			НужныеРеквизиты.Добавить().Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СтранаПроисхождения;

		КонецЕсли;

		Если НЕ ПустаяСтрока(ДанныеNavision.СезонностьКод) Тогда

			НужныеРеквизиты.Добавить().Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Сезонность;

		КонецЕсли;

		Если НЕ ПустаяСтрока(ДанныеNavision.МатериалКод) Тогда

			НужныеРеквизиты.Добавить().Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.МатериалТовара;

		КонецЕсли;

		Если НЕ ПустаяСтрока(ДанныеNavision.МодельКод) Тогда

			НужныеРеквизиты.Добавить().Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.МодельТовара;

		КонецЕсли;

		Если НЕ ПустаяСтрока(ДанныеNavision.СтатусТовара) Тогда

			НужныеРеквизиты.Добавить().Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СтатусТовара;

		КонецЕсли;

		Если НЕ ПустаяСтрока(ДанныеNavision.Цвет) Тогда

			НужныеРеквизиты.Добавить().Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Цвет;

		КонецЕсли;

	//	LNK 01.11.2018 13:39:09
		НужныеРеквизиты.Добавить().Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.КратностьЗаказа;

	//	---------------------------------------------------------------------------------------

		Если НЕ НужныеРеквизиты.Количество() = 0 Тогда

			Запрос	= Новый Запрос(
			"ВЫБРАТЬ
			|	НужныеРеквизиты.Свойство
			|ПОМЕСТИТЬ НужныеРеквизиты
			|ИЗ
			|	&НужныеРеквизиты КАК НужныеРеквизиты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Ведущая.НаборСвойств КАК НаборСвойств,
			|	Ведущая.Свойство
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВидыНоменклатуры.НаборСвойств КАК НаборСвойств,
			|		НужныеРеквизиты.Свойство КАК Свойство
			|	ИЗ
			|		Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры,
			|		НужныеРеквизиты КАК НужныеРеквизиты
			|	ГДЕ
			|		ВидыНоменклатуры.Ссылка = &ВидНоменклатуры) КАК Ведущая
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТабличнаяЧасть
			|		ПО Ведущая.НаборСвойств = ТабличнаяЧасть.Ссылка
			|			И Ведущая.Свойство = ТабличнаяЧасть.Свойство
			|ГДЕ
			|	ТабличнаяЧасть.Свойство ЕСТЬ NULL 
			|ИТОГИ ПО
			|	НаборСвойств"
			);
			Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
			Запрос.УстановитьПараметр("НужныеРеквизиты", НужныеРеквизиты);

			Результат = Запрос.Выполнить();

			Если НЕ Результат.Пустой() Тогда

				НаборВыборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

				Если НаборВыборка.Следующий() Тогда

					НаборОбъект = НаборВыборка.НаборСвойств.ПолучитьОбъект();
					СвойстваВыборка = НаборВыборка.Выбрать();

					Пока СвойстваВыборка.Следующий() Цикл

						НаборОбъект.ДополнительныеРеквизиты.Добавить().Свойство = СвойстваВыборка.Свойство;

					КонецЦикла;

					Если НаборОбъект.Модифицированность() Тогда

						НаборОбъект.Записать();

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура УстановитьУпаковкиНоменклатуры(Номенклатура, IDN, Упаковки)

	Для каждого СтрокаТаблицы Из Упаковки Цикл

		УстановитьУпаковкуНоменклатуры(Номенклатура, СтрокаТаблицы);

	КонецЦикла;

КонецПроцедуры

Процедура УстановитьШтрихкодыНоменклатуры(Номенклатура, IDN, Штрихкоды)

	Штрихкоды.Колонки.Добавить("УпаковкаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	Штрихкоды.Колонки.Добавить("ТипШтрихкода"        , Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ТипыШтрихкодов"));

	Для каждого СтрокаТаблицы Из Штрихкоды Цикл

		СтрокаТаблицы.Штрихкод = СокрЛП(СтрокаТаблицы.Штрихкод);
		СтрокаТаблицы.УпаковкаНоменклатуры = УстановитьУпаковкуНоменклатуры(Номенклатура, СтрокаТаблицы);

		ДлинаШтрихкода = СтрДлина(СтрокаТаблицы.Штрихкод);

		Если ДлинаШтрихкода = 8 Тогда

			СтрокаТаблицы.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8;

		ИначеЕсли ДлинаШтрихкода = 13 Тогда

			СтрокаТаблицы.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;

		ИначеЕсли ДлинаШтрихкода <= 39 Тогда

			СтрокаТаблицы.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.CODE39;

		Иначе

			СтрокаТаблицы.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.CODE128;

		КонецЕсли;

	КонецЦикла;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура) КАК Владелец,
	|	ВЫРАЗИТЬ(Таблица.УпаковкаНоменклатуры КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	Таблица.ТипШтрихкода КАК ТипШтрихкода,
	|	Таблица.Штрихкод КАК Штрихкод,
	|	Таблица.ДатаИзменения КАК ДатаИзменения,
	|	Таблица.Блокирован КАК Блокирован
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	&Таблица КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец,
	|	Характеристика,
	|	ТипШтрихкода,
	|	Упаковка,
	|	Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	Штрихкоды.Владелец КАК Владелец,
	|	Штрихкоды.Характеристика КАК Характеристика,
	|	Штрихкоды.ТипШтрихкода КАК ТипШтрихкода,
	|	Штрихкоды.Упаковка КАК Упаковка,
	|	Штрихкоды.ДатаИзменения КАК ДатаИзменения,
	|	Штрихкоды.Блокирован КАК Блокирован
	|ПОМЕСТИТЬ Текущие
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Владелец = &Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Штрихкод,
	|	Владелец,
	|	Характеристика,
	|	ТипШтрихкода,
	|	Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Текущие.Штрихкод КАК Штрихкод,
	|	Текущие.Владелец КАК Владелец,
	|	Текущие.Характеристика КАК Характеристика,
	|	Текущие.ТипШтрихкода КАК ТипШтрихкода,
	|	Текущие.Упаковка КАК Упаковка,
	|	"""" КАК ПредставлениеШтрихкода,
	|	Текущие.ДатаИзменения КАК ДатаИзменения,
	|	Текущие.Блокирован КАК Блокирован,
	|	ИСТИНА КАК Удалить
	|ИЗ
	|	Текущие КАК Текущие
	|		ЛЕВОЕ СОЕДИНЕНИЕ Фильтр КАК Новые
	|		ПО Текущие.Штрихкод = Новые.Штрихкод
	|			И Текущие.Владелец = Новые.Владелец
	|			И Текущие.Характеристика = Новые.Характеристика
	|			И Текущие.ТипШтрихкода = Новые.ТипШтрихкода
	|			И Текущие.Упаковка = Новые.Упаковка
	|ГДЕ
	|	Новые.Штрихкод ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Новые.Штрихкод,
	|	Новые.Владелец,
	|	Новые.Характеристика,
	|	Новые.ТипШтрихкода,
	|	Новые.Упаковка,
	|	Новые.Штрихкод,
	|	Новые.ДатаИзменения,
	|	Новые.Блокирован,
	|	ЛОЖЬ
	|ИЗ
	|	Фильтр КАК Новые
	|		ЛЕВОЕ СОЕДИНЕНИЕ Текущие КАК Текущие
	|		ПО Новые.Штрихкод = Текущие.Штрихкод
	|			И Новые.Владелец = Текущие.Владелец
	|			И Новые.Характеристика = Текущие.Характеристика
	|			И Новые.ТипШтрихкода = Текущие.ТипШтрихкода
	|			И Новые.Упаковка = Текущие.Упаковка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Текущие.Штрихкод ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НЕ(Новые.ДатаИзменения = Текущие.ДатаИзменения
	|								И Новые.Блокирован = Текущие.Блокирован)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ"
	);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Таблица"     , Штрихкоды);
	
	КлючиВыборка = Запрос.Выполнить().Выбрать();
	
	Пока КлючиВыборка.Следующий() Цикл

		МенеджерЗаписи = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючиВыборка);

		Если КлючиВыборка.Удалить Тогда

				МенеджерЗаписи.Удалить();

		Иначе	МенеджерЗаписи.Записать(Истина);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция УстановитьУпаковкуНоменклатуры(Номенклатура, ОписательУпаковки)

	Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();

	Если НЕ ОписательУпаковки.Упаковка = "ШТ" Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УпаковкиНоменклатуры.Ссылка КАК Упаковка
		|ИЗ
		|	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Владелец = &Номенклатура
		|	И УпаковкиНоменклатуры.Наименование = &Упаковка"
		);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Упаковка"    , ОписательУпаковки.Упаковка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда

			Упаковка = Выборка.Упаковка;

		Иначе

			Упаковка = Справочники.УпаковкиНоменклатуры.СоздатьЭлемент();
			Упаковка.Владелец     = Номенклатура;
			Упаковка.Наименование = ОписательУпаковки.Упаковка;
			Упаковка.Вес          = ОписательУпаковки.Вес;
			Упаковка.Объем        = ОписательУпаковки.Объем;
			Упаковка.ЕдиницаИзмерения = ОбщегоНазначенияПовтИсп.ЕдиницаУпаковка();
			Упаковка.Коэффициент      = ОписательУпаковки.Коэффициент;

			Упаковка.ОбменДанными.Загрузка = Истина;
			Упаковка.Записать();
			Упаковка = Упаковка.Ссылка;

		КонецЕсли;

	КонецЕсли;

	Возврат Упаковка;

КонецФункции // УстановитьУпаковкуНоменклатуры()

Процедура УстановитьДополнительныеРеквизиты(ДанныеNavision, ТоварОбъект)

//	ВОЗВРАСТ ---------------------------------------------------------------------------------------

	СтрокаРеквизита = ТоварОбъект.ДополнительныеРеквизиты.Найти(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ВозрастнойИнтервал, "Свойство");

	Если ПустаяСтрока(ДанныеNavision.ВозрастКод) Тогда

		Если НЕ СтрокаРеквизита = Неопределено Тогда

			ТоварОбъект.ДополнительныеРеквизиты.Удалить(СтрокаРеквизита);

		КонецЕсли;

	Иначе

		Элемент = Справочники.ВозрастныеИнтервалы.НайтиПоКоду(ДанныеNavision.ВозрастКод);

		Если Элемент = Справочники.ВозрастныеИнтервалы.ПустаяСсылка()	Тогда

			Элемент = Справочники.ВозрастныеИнтервалы.СоздатьЭлемент();
			Элемент.Код = ДанныеNavision.ВозрастКод;
			Элемент.Наименование = ДанныеNavision.Возраст;
			Элемент.НачалоИнтервала = ДанныеNavision.ВозрастМесяцНачало;
			Элемент.КонецИнтервала = ДанныеNavision.ВозрастМесяцКонец;

			Элемент.Записать();
			Элемент = Элемент.Ссылка;

		КонецЕсли;

		Если СтрокаРеквизита = Неопределено Тогда

			СтрокаРеквизита = ТоварОбъект.ДополнительныеРеквизиты.Добавить();
			СтрокаРеквизита.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ВозрастнойИнтервал;

		КонецЕсли;

		СтрокаРеквизита.Значение = Элемент;
		СтрокаРеквизита.ТекстоваяСтрока = СокрЛП(Элемент);

	КонецЕсли;

//	ПОЛ ---------------------------------------------------------------------------------------

	СтрокаРеквизита = ТоварОбъект.ДополнительныеРеквизиты.Найти(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ГендерноеНазначение, "Свойство");

	Если ПустаяСтрока(ДанныеNavision.ПолКод) Тогда

		Если НЕ СтрокаРеквизита = Неопределено Тогда

			ТоварОбъект.ДополнительныеРеквизиты.Удалить(СтрокаРеквизита);

		КонецЕсли;

	Иначе

		Элемент = Неопределено;

		Если ДанныеNavision.ПолНаименование = "Мальчик" Тогда

			Элемент = Перечисления.ГендерноеНазначение.Мальчик;

		ИначеЕсли ДанныеNavision.ПолНаименование = "Девочка" Тогда

			Элемент = Перечисления.ГендерноеНазначение.Девочка;

		ИначеЕсли ДанныеNavision.ПолНаименование = "Унисекс" Тогда

			Элемент = Перечисления.ГендерноеНазначение.Унисекс;

		ИначеЕсли ДанныеNavision.ПолНаименование = "Мужской" Тогда

			Элемент = Перечисления.ГендерноеНазначение.Мужчина;

		ИначеЕсли ДанныеNavision.ПолНаименование = "Женский" Тогда

			Элемент = Перечисления.ГендерноеНазначение.Женщина;

		КонецЕсли;

		Если Элемент = Неопределено Тогда

			Если НЕ СтрокаРеквизита = Неопределено Тогда

				ТоварОбъект.ДополнительныеРеквизиты.Удалить(СтрокаРеквизита);

			КонецЕсли;

		Иначе

			Если СтрокаРеквизита = Неопределено Тогда

				СтрокаРеквизита = ТоварОбъект.ДополнительныеРеквизиты.Добавить();
				СтрокаРеквизита.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ГендерноеНазначение;

			КонецЕсли;

			СтрокаРеквизита.Значение = Элемент;
			СтрокаРеквизита.ТекстоваяСтрока = СокрЛП(Элемент);

		КонецЕсли;

	КонецЕсли;

//	РАЗМЕР ---------------------------------------------------------------------------------------

	СтрокаРеквизита = ТоварОбъект.ДополнительныеРеквизиты.Найти(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.РазмерностьТовара, "Свойство");

	Если ПустаяСтрока(ДанныеNavision.Размер) Тогда

		Если НЕ СтрокаРеквизита = Неопределено Тогда

			ТоварОбъект.ДополнительныеРеквизиты.Удалить(СтрокаРеквизита);

		КонецЕсли;

	Иначе

		Если СтрокаРеквизита = Неопределено Тогда

			СтрокаРеквизита = ТоварОбъект.ДополнительныеРеквизиты.Добавить();
			СтрокаРеквизита.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.РазмерностьТовара;

		КонецЕсли;

		СтрокаРеквизита.Значение = ДанныеNavision.Размер;
		СтрокаРеквизита.ТекстоваяСтрока = СокрЛП(ДанныеNavision.Размер);

	КонецЕсли;

//	ЦВЕТ ---------------------------------------------------------------------------------------

	СтрокаРеквизита = ТоварОбъект.ДополнительныеРеквизиты.Найти(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Цвет, "Свойство");

	Если ПустаяСтрока(ДанныеNavision.Цвет) Тогда

		Если НЕ СтрокаРеквизита = Неопределено Тогда

			ТоварОбъект.ДополнительныеРеквизиты.Удалить(СтрокаРеквизита);

		КонецЕсли;

	Иначе

		Если СтрокаРеквизита = Неопределено Тогда

			СтрокаРеквизита = ТоварОбъект.ДополнительныеРеквизиты.Добавить();
			СтрокаРеквизита.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Цвет;

		КонецЕсли;

		СтрокаРеквизита.Значение = ДанныеNavision.Цвет;
		СтрокаРеквизита.ТекстоваяСтрока = СокрЛП(ДанныеNavision.Цвет);

	КонецЕсли;

//	СТРАНА ПРОИСХОЖДЕНИЯ ---------------------------------------------------------------------------------------

	СтрокаРеквизита = ТоварОбъект.ДополнительныеРеквизиты.Найти(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СтранаПроисхождения, "Свойство");

	Если ПустаяСтрока(ДанныеNavision.СтранаПроисхожденияКод) Тогда

		Если НЕ СтрокаРеквизита = Неопределено Тогда

			ТоварОбъект.ДополнительныеРеквизиты.Удалить(СтрокаРеквизита);

		КонецЕсли;

	Иначе

		Запрос	= Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтраныМира.Ссылка КАК СтранаПроисхождения,
		|	СтраныМира.Представление
		|ИЗ
		|	Справочник.СтраныМира КАК СтраныМира
		|ГДЕ
		|	(СтраныМира.Код = &СтранаПроисхожденияКод
		|			ИЛИ СтраныМира.КодАльфа2 = &СтранаПроисхожденияКод
		|			ИЛИ СтраныМира.КодАльфа3 = &СтранаПроисхожденияКод)"
		);
		Запрос.УстановитьПараметр("СтранаПроисхожденияКод", ДанныеNavision.СтранаПроисхожденияКод);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда

			Если СтрокаРеквизита = Неопределено Тогда

				СтрокаРеквизита = ТоварОбъект.ДополнительныеРеквизиты.Добавить();
				СтрокаРеквизита.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СтранаПроисхождения;

			КонецЕсли;

			СтрокаРеквизита.Значение = Выборка.СтранаПроисхождения;
			СтрокаРеквизита.ТекстоваяСтрока = СокрЛП(Выборка.Представление);

		Иначе

			Если НЕ СтрокаРеквизита = Неопределено Тогда

				ТоварОбъект.ДополнительныеРеквизиты.Удалить(СтрокаРеквизита);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

//	ТОРГОВАЯ МАРКА ---------------------------------------------------------------------------------------

	СтрокаРеквизита = ТоварОбъект.ДополнительныеРеквизиты.Найти(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ТорговыеМарки, "Свойство");

	Если ПустаяСтрока(ДанныеNavision.ТорговаяМаркаКод) Тогда

		ТоварОбъект.Марка = Неопределено;

		Если НЕ СтрокаРеквизита = Неопределено Тогда

			ТоварОбъект.ДополнительныеРеквизиты.Удалить(СтрокаРеквизита);

		КонецЕсли;

	Иначе

		Элемент = Справочники.Марки.НайтиПоРеквизиту("IDN", ДанныеNavision.ТорговаяМаркаКод);

		Если Элемент = Справочники.Марки.ПустаяСсылка()	Тогда

			Элемент = Справочники.Марки.НайтиПоКоду(ДанныеNavision.ТорговаяМаркаКод);

			Если Элемент = Справочники.Марки.ПустаяСсылка() Тогда

				Элемент = Справочники.Марки.СоздатьЭлемент();
				Элемент.ОбменДанными.Загрузка = Истина;

				Элемент.Код = ДанныеNavision.ТорговаяМаркаКод;
				Элемент.Наименование = ДанныеNavision.ТорговаяМаркаНаименование;
				Элемент.IDN = ДанныеNavision.ТорговаяМаркаКод;

				Элемент.Записать();
				Элемент = Элемент.Ссылка;

			КонецЕсли;

		Иначе

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Марки.Код КАК Код,
			|	Марки.Наименование КАК Наименование,
			|	Марки.IDN КАК IDN
			|ИЗ
			|	Справочник.Марки КАК Марки
			|ГДЕ
			|	Марки.Ссылка = &Элемент"
			);
			Запрос.УстановитьПараметр("Элемент", Элемент);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() И НЕ Выборка.Наименование = ДанныеNavision.ТорговаяМаркаНаименование Тогда

				Элемент = Элемент.ПолучитьОбъект();
				Элемент.ОбменДанными.Загрузка = Истина;

				Элемент.Наименование = ДанныеNavision.ТорговаяМаркаНаименование;

				Элемент.Записать();
				Элемент = Элемент.Ссылка;

			КонецЕсли;

		КонецЕсли;

	//	LNK 01.11.2018 13:44:17 - уходим от доп.реквизита на реквизит "Марка". В дальнейшем вообще грохнуть этот доп.реквизит
		ТоварОбъект.Марка = Элемент;

		Если СтрокаРеквизита = Неопределено Тогда

			СтрокаРеквизита = ТоварОбъект.ДополнительныеРеквизиты.Добавить();
			СтрокаРеквизита.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ТорговыеМарки;

		КонецЕсли;

		СтрокаРеквизита.Значение = Элемент;
		СтрокаРеквизита.ТекстоваяСтрока = СокрЛП(Элемент);

	КонецЕсли;

//	ЦЕНОВОЙ СЕГМЕНТ ---------------------------------------------------------------------------------------

	Если ПустаяСтрока(ДанныеNavision.ЦеновойСегмент) Тогда

		ТоварОбъект.ЦеноваяГруппа = Неопределено;

	Иначе

		Элемент = Справочники.ЦеновыеГруппы.НайтиПоРеквизиту("IDN", ДанныеNavision.ЦеновойСегмент);

		Если Элемент = Справочники.ЦеновыеГруппы.ПустаяСсылка()	Тогда

			Элемент = Справочники.ЦеновыеГруппы.СоздатьЭлемент();
			Элемент.Наименование = ДанныеNavision.ЦеновойСегмент;
			Элемент.IDN = ДанныеNavision.ЦеновойСегмент;

			Элемент.Записать();
			Элемент = Элемент.Ссылка;

		КонецЕсли;

		ТоварОбъект.ЦеноваяГруппа = Элемент;

	КонецЕсли;

//	КРАТНОСТЬ ЗАКАЗА ---------------------------------------------------------------------------------------

	СтрокаРеквизита = ТоварОбъект.ДополнительныеРеквизиты.Найти(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.КратностьЗаказа, "Свойство");

	Если СтрокаРеквизита = Неопределено Тогда

		СтрокаРеквизита = ТоварОбъект.ДополнительныеРеквизиты.Добавить();
		СтрокаРеквизита.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.КратностьЗаказа;

	КонецЕсли;

	СтрокаРеквизита.Значение = ДанныеNavision.КратностьЗаказа;
	СтрокаРеквизита.ТекстоваяСтрока = СокрЛП(ДанныеNavision.КратностьЗаказа);

//	=======================================================================================

	УстановитьСвойствоНоменклатуры(ДанныеNavision.СтатусТовара, ДанныеNavision.СтатусТовара, "СтатусТовара", ТоварОбъект);
	УстановитьСвойствоНоменклатуры(ДанныеNavision.МодельКод, ДанныеNavision.МодельНаименование, "МодельТовара", ТоварОбъект);
	УстановитьСвойствоНоменклатуры(ДанныеNavision.МатериалКод, ДанныеNavision.МатериалНаименование, "МатериалТовара", ТоварОбъект);
	УстановитьСвойствоНоменклатуры(ДанныеNavision.ФурнитураКод, ДанныеNavision.ФурнитураНаименование, "Фурнитура", ТоварОбъект);
	УстановитьСвойствоНоменклатуры(ДанныеNavision.СезонностьКод, ?(ПустаяСтрока(ДанныеNavision.СезонностьНаименование), ДанныеNavision.СезонностьКод, ДанныеNavision.СезонностьНаименование), "Сезонность", ТоварОбъект);
	УстановитьСвойствоНоменклатуры(ДанныеNavision.Коллекция, ДанныеNavision.Коллекция, "Коллекция", ТоварОбъект);

//	=======================================================================================

	СтрокиУдалить = ТоварОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка()));

	Для каждого СтрокаУдалить Из СтрокиУдалить Цикл

		ТоварОбъект.ДополнительныеРеквизиты.Удалить(СтрокаУдалить);

	КонецЦикла;

КонецПроцедуры

Процедура УстановитьСвойствоНоменклатуры(IDN, Наименование, ТипСвойства, ТоварОбъект)

	СтрокаРеквизита = ТоварОбъект.ДополнительныеРеквизиты.Найти(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения[ТипСвойства], "Свойство");

	Если ПустаяСтрока(IDN) Тогда

		Если НЕ СтрокаРеквизита = Неопределено Тогда

			ТоварОбъект.ДополнительныеРеквизиты.Удалить(СтрокаРеквизита);

		КонецЕсли;

	Иначе

		Запрос	= Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СвойстваНоменклатуры.Ссылка,
		|	ВЫБОР
		|		КОГДА СвойстваНоменклатуры.Код = &IDN
		|			ТОГДА 1
		|		КОГДА СвойстваНоменклатуры.IDN = &IDN
		|			ТОГДА 0
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	Справочник.СвойстваНоменклатуры КАК СвойстваНоменклатуры
		|ГДЕ
		|	(СвойстваНоменклатуры.Код = &IDN
		|				И &УчитыватьКод
		|			ИЛИ СвойстваНоменклатуры.IDN = &IDN)
		|	И СвойстваНоменклатуры.ТипСвойства = &ТипСвойства
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет УБЫВ"
		);
		Запрос.УстановитьПараметр("IDN", IDN);
		Запрос.УстановитьПараметр("УчитыватьКод", СтрДлина(IDN) <= ВнешниеИсточникиПовтИсп.ДлинаКодаСвойстваНоменклатуры());
		Запрос.УстановитьПараметр("ТипСвойства" , Перечисления.ТипыСвойствНоменклатуры[ТипСвойства]);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Элемент = Выборка.Ссылка;

		Иначе

			Элемент = Справочники.СвойстваНоменклатуры.СоздатьЭлемент();
			Элемент.Код = IDN;
			Элемент.Наименование = ?(ПустаяСтрока(Наименование), IDN, Наименование);
			Элемент.IDN = IDN;
			Элемент.ТипСвойства = Запрос.Параметры.ТипСвойства;

			Элемент.ОбменДанными.Загрузка = Истина;
			Элемент.Записать();
			Элемент = Элемент.Ссылка;

		КонецЕсли;

		Если СтрокаРеквизита = Неопределено Тогда

			СтрокаРеквизита = ТоварОбъект.ДополнительныеРеквизиты.Добавить();
			СтрокаРеквизита.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения[ТипСвойства];

		КонецЕсли;

		СтрокаРеквизита.Значение = Элемент;
		СтрокаРеквизита.ТекстоваяСтрока = СокрЛП(Элемент);

	КонецЕсли;

КонецПроцедуры

//	LNK 11.05.2019 13:21:28
Функция СформироватьIDNGпоДаннымNavision(ДанныеNavision, Уровень)

	IDNG = "";

	Для Индекс = 0 По Уровень Цикл

		Значение = ДанныеNavision[ВнешниеИсточникиПовтИсп.УровниГруппировокТоваровNavision()[Индекс].Код + ?(Индекс = 0, "", "_OLD")];

		Если НЕ ПустаяСтрока(Значение) Тогда

			IDNG = IDNG + ?(ПустаяСтрока(IDNG), "", "_") + Значение;

		КонецЕсли;

	КонецЦикла;

	Возврат IDNG;

КонецФункции // СформироватьIDNGпоДаннымNavision()

#КонецОбласти

#Область СправочникКонтрагенты

Процедура ПолучитьПоставщиковNavision(Отладка = Ложь)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаNavision.IDN КАК IDN,
	|	ТаблицаNavision.КодИзменения КАК КодИзменения,
	|	ТаблицаNavision.Наименование КАК Наименование,
	|	ТаблицаNavision.НаименованиеПолное КАК НаименованиеПолное,
	|	ТаблицаNavision.Отправитель КАК Отправитель,
	|	ТаблицаNavision.Покупатель КАК Покупатель,
	|	ТаблицаNavision.Поставщик КАК Поставщик,
	|	ТаблицаNavision.АдресУлица КАК АдресУлица,
	|	ТаблицаNavision.АдресГород КАК АдресГород,
	|	ТаблицаNavision.ТелефонСлужеб КАК ТелефонСлужебный,
	|	ТаблицаNavision.ТелефонЛичный КАК ТелефонЛичный,
	|	ТаблицаNavision.КодПроекта КАК КодПроекта,
	|	ТаблицаNavision.РазрешитьПрямуюЗакупку КАК РазрешитьПрямуюЗакупку,
	|	ТаблицаNavision.Блокирован КАК Блокирован,
	|	ТаблицаNavision.ИННПлательщикаНДС КАК ИННПлательщикаНДС,
	|	ТаблицаNavision.ПочтаСлужеб КАК ПочтаСлужебный,
	|	ТаблицаNavision.ПлательщикНДС КАК ПлательщикНДС,
	|	ТаблицаNavision.НомерСвидетельстваПлательщикаНДС КАК НомерСвидетельстваПлательщикаНДС,
	|	ТаблицаNavision.Комментарий КАК Комментарий,
	|	ТаблицаNavision.МФО КАК МФО,
	|	ТаблицаNavision.РасчетныйСчет КАК РасчетныйСчет,
	|	ТаблицаNavision.КодПоЕДРПОУ КАК КодПоЕДРПОУ
	|ПОМЕСТИТЬ ДанныеNavision
	|ИЗ
	|	&ТаблицаNavision КАК ТаблицаNavision
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеNavision.IDN КАК IDN,
	|	ТаблицаПоставщики.Ссылка КАК Контрагент,
	|	ДанныеNavision.КодИзменения КАК КодИзменения,
	|	ДанныеNavision.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ДанныеNavision.НаименованиеПолное КАК СТРОКА(3))) = ""   ""
	|			ТОГДА ДанныеNavision.Наименование
	|		ИНАЧЕ ДанныеNavision.НаименованиеПолное
	|	КОНЕЦ КАК НаименованиеПолное,
	|	ДанныеNavision.Отправитель КАК Отправитель,
	|	ДанныеNavision.Покупатель КАК Покупатель,
	|	ДанныеNavision.Поставщик КАК Поставщик,
	|	ДанныеNavision.АдресУлица КАК АдресУлица,
	|	ДанныеNavision.АдресГород КАК АдресГород,
	|	ДанныеNavision.ТелефонСлужебный КАК ТелефонСлужебный,
	|	ДанныеNavision.ТелефонЛичный КАК ТелефонЛичный,
	|	ДанныеNavision.КодПроекта КАК КодПроекта,
	|	ДанныеNavision.РазрешитьПрямуюЗакупку КАК РазрешитьПрямуюЗакупку,
	|	ДанныеNavision.Блокирован КАК Блокирован,
	|	ДанныеNavision.ИННПлательщикаНДС КАК ИННПлательщикаНДС,
	|	ДанныеNavision.ПочтаСлужебный КАК ПочтаСлужебный,
	|	ДанныеNavision.ПлательщикНДС КАК ПлательщикНДС,
	|	ДанныеNavision.НомерСвидетельстваПлательщикаНДС КАК НомерСвидетельстваПлательщикаНДС,
	|	ДанныеNavision.Комментарий КАК Комментарий,
	|	ДанныеNavision.МФО КАК МФО,
	|	ДанныеNavision.РасчетныйСчет КАК РасчетныйСчет,
	|	ДанныеNavision.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	|	ТаблицаБанки.Ссылка КАК Банк,
	|	ТаблицаСчета.Ссылка КАК БанковскийСчет,
	|	ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо) КАК ЮрФизЛицо
	|ИЗ
	|	ДанныеNavision КАК ДанныеNavision
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаПоставщики
	|		ПО ДанныеNavision.IDN = ТаблицаПоставщики.IDN
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК ТаблицаБанки
	|		ПО ДанныеNavision.МФО = ТаблицаБанки.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК ТаблицаСчета
	|		ПО (ТаблицаБанки.Ссылка = ТаблицаСчета.Банк)
	|			И ДанныеNavision.РасчетныйСчет = ТаблицаСчета.НомерСчета
	|			И (ТаблицаПоставщики.Ссылка = ТаблицаСчета.Владелец)
	|ГДЕ
	|	(ТаблицаПоставщики.IDN ЕСТЬ NULL
	|			ИЛИ НЕ ДанныеNavision.КодИзменения = ТаблицаПоставщики.КодИзменения
	|			ИЛИ НЕ ДанныеNavision.Блокирован = ТаблицаПоставщики.Блокирован
	|			ИЛИ НЕ ДанныеNavision.РазрешитьПрямуюЗакупку = ТаблицаПоставщики.РазрешитьПрямуюЗакупку)
	|
	|УПОРЯДОЧИТЬ ПО
	|	IDN"
	);
	Запрос.УстановитьПараметр("ТаблицаNavision", ПолучитьДанныеОтNavision("ПоставщикиNavision"));

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл

			ДанныеОбъекта = ОбщегоНазначенияРТ.СоздатьСтруктуруПоСтрокеВыборки(РезультатЗапроса, Выборка, Истина);

		//	Контакты приведём к единому виду.
		//	---------------------------------------------------------------------------------------
			ДанныеОбъекта.Вставить("Контакты", Новый Структура(
					"ТелефонКонтрагента, ТелефонКонтрагентаСлужебный, EmailКонтрагентаСлужебный, Адреса, НайденПоТелефону"
					, ОтправкаSMS.ПодготовитьНомерТелефона(ДанныеОбъекта.ТелефонЛичный)
					, ОтправкаSMS.ПодготовитьНомерТелефона(ДанныеОбъекта.ТелефонСлужебный)
					, ДанныеОбъекта.ПочтаСлужебный
					, Новый Массив
					, Ложь
				)
			);
			ДанныеОбъекта.Контакты.Адреса.Добавить(Новый Структура(
					"Вид, Страна, Город, Улица, Представление"
					, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента
					, ""
					, ДанныеОбъекта.АдресГород
					, ДанныеОбъекта.АдресУлица
					, ДанныеОбъекта.АдресУлица
				)
			);
		//	для красоты, однозначности и общей целостности удалим неиспользуемые свойства структуры
			ОбщегоНазначенияКлиентСервер.СвойствоУдалить("ТелефонЛичный, ТелефонСлужебный, ПочтаСлужебный, АдресГород, АдресУлица", ДанныеОбъекта);

			Атрибуты = Новый Структура(
				"Родитель, Ошибка, ТекстОшибки"
				, Справочники.Контрагенты.Поставщики
				, Ложь, ""
			);
		//	.. возвращаемое значение здесь не нужно
			ПолучитьКонтрагентаNavision(ДанныеОбъекта, Атрибуты, Истина, Отладка);	//	LNK 02.08.2022 06:04:15

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьПокупателейБезналNavision(Отладка = Ложь)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаNavision.IDN КАК IDN,
	|	ТаблицаNavision.КодИзменения КАК КодИзменения,
	|	ТаблицаNavision.Блокирован КАК Блокирован,
	|	ТаблицаNavision.Наименование КАК Наименование,
	|	ТаблицаNavision.НаименованиеПолное КАК НаименованиеПолное,
	|	ТаблицаNavision.Отправитель КАК Отправитель,
	|	ТаблицаNavision.Покупатель КАК Покупатель,
	|	ТаблицаNavision.Поставщик КАК Поставщик,
	|	ТаблицаNavision.ИННПлательщикаНДС КАК ИННПлательщикаНДС,
	|	ТаблицаNavision.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	|	ТаблицаNavision.НомерСвидетельстваПлательщикаНДС КАК НомерСвидетельстваПлательщикаНДС,
	|	ТаблицаNavision.МФО КАК МФО,
	|	ТаблицаNavision.РасчетныйСчет КАК РасчетныйСчет,
	|	ТаблицаNavision.АдресФактический КАК АдресФактический,
	|	ТаблицаNavision.АдресЮридический КАК АдресЮридический,
	|	ТаблицаNavision.ЭлектроннаяПочта КАК ПочтаСлужебный,
	|	ТаблицаNavision.ТелефонСлужеб КАК ТелефонСлужебный,
	|	ТаблицаNavision.Телефон1 КАК Телефон1,
	|	ТаблицаNavision.Телефон2 КАК Телефон2,
	|	ТаблицаNavision.Телефон3 КАК Телефон3,
	|	ТаблицаNavision.Телефон4 КАК Телефон4,
	|	ТаблицаNavision.Телефон5 КАК Телефон5,
	|	ТаблицаNavision.ПлательщикНДС КАК ПлательщикНДС,
	|	ТаблицаNavision.Комментарий КАК Комментарий
	|ПОМЕСТИТЬ ДанныеNavision
	|ИЗ
	|	&ТаблицаNavision КАК ТаблицаNavision
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеNavision.IDN КАК IDN,
	|	ТаблицаКонтрагенты.Ссылка КАК Контрагент,
	|	ДанныеNavision.КодИзменения КАК КодИзменения,
	|	ДанныеNavision.Блокирован КАК Блокирован,
	|	ДанныеNavision.Наименование КАК Наименование,
	|	ДанныеNavision.НаименованиеПолное КАК НаименованиеПолное,
	|	ДанныеNavision.Отправитель КАК Отправитель,
	|	ДанныеNavision.Покупатель КАК Покупатель,
	|	ДанныеNavision.Поставщик КАК Поставщик,
	|	ДанныеNavision.ИННПлательщикаНДС КАК ИННПлательщикаНДС,
	|	ДанныеNavision.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	|	ДанныеNavision.НомерСвидетельстваПлательщикаНДС КАК НомерСвидетельстваПлательщикаНДС,
	|	ДанныеNavision.МФО КАК МФО,
	|	ТаблицаБанки.Ссылка КАК Банк,
	|	ДанныеNavision.РасчетныйСчет КАК РасчетныйСчет,
	|	ТаблицаСчета.Ссылка КАК БанковскийСчет,
	|	ДанныеNavision.АдресФактический КАК АдресФактический,
	|	ДанныеNavision.АдресЮридический КАК АдресЮридический,
	|	ДанныеNavision.ТелефонСлужебный КАК ТелефонСлужебный,
	|	ДанныеNavision.ПочтаСлужебный КАК ПочтаСлужебный,
	|	ДанныеNavision.Телефон1 КАК Телефон1,
	|	ДанныеNavision.Телефон2 КАК Телефон2,
	|	ДанныеNavision.Телефон3 КАК Телефон3,
	|	ДанныеNavision.Телефон4 КАК Телефон4,
	|	ДанныеNavision.Телефон5 КАК Телефон5,
	|	ДанныеNavision.ПлательщикНДС КАК ПлательщикНДС,
	|	ДанныеNavision.Комментарий КАК Комментарий,
	|	ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо) КАК ЮрФизЛицо
	|ИЗ
	|	ДанныеNavision КАК ДанныеNavision
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаКонтрагенты
	|		ПО ДанныеNavision.IDN = ТаблицаКонтрагенты.IDN
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК ТаблицаБанки
	|		ПО ДанныеNavision.МФО = ТаблицаБанки.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК ТаблицаСчета
	|		ПО (ТаблицаБанки.Ссылка = ТаблицаСчета.Банк)
	|			И ДанныеNavision.РасчетныйСчет = ТаблицаСчета.НомерСчета
	|			И (ТаблицаКонтрагенты.Ссылка = ТаблицаСчета.Владелец)
	|ГДЕ
	|	(ТаблицаКонтрагенты.IDN ЕСТЬ NULL
	|			ИЛИ НЕ ДанныеNavision.КодИзменения = ТаблицаКонтрагенты.КодИзменения
	|			ИЛИ НЕ ДанныеNavision.Блокирован = ТаблицаКонтрагенты.Блокирован)
	|
	|УПОРЯДОЧИТЬ ПО
	|	IDN"
	);
	Запрос.УстановитьПараметр("ТаблицаNavision", ПолучитьДанныеОтNavision("ПокупателиNavision"));

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл

			ДанныеОбъекта = ОбщегоНазначенияРТ.СоздатьСтруктуруПоСтрокеВыборки(РезультатЗапроса, Выборка, Истина);

			ТелефонЛичный =  ?(НЕ ПустаяСтрока(ДанныеОбъекта.Телефон1), ДанныеОбъекта.Телефон1
							,?(НЕ ПустаяСтрока(ДанныеОбъекта.Телефон2), ДанныеОбъекта.Телефон2
							,?(НЕ ПустаяСтрока(ДанныеОбъекта.Телефон3), ДанныеОбъекта.Телефон3
							,?(НЕ ПустаяСтрока(ДанныеОбъекта.Телефон4), ДанныеОбъекта.Телефон4
																	  , ДанныеОбъекта.Телефон5)))
			);
		//	Контакты приведём к единому виду.
		//	---------------------------------------------------------------------------------------
			ДанныеОбъекта.Вставить("Контакты", Новый Структура(
					"ТелефонКонтрагента, ТелефонКонтрагентаСлужебный, EmailКонтрагентаСлужебный, Адреса, НайденПоТелефону"
					, ОтправкаSMS.ПодготовитьНомерТелефона(ТелефонЛичный)
					, ОтправкаSMS.ПодготовитьНомерТелефона(ДанныеОбъекта.ТелефонСлужебный)
					, ДанныеОбъекта.ПочтаСлужебный
					, Новый Массив
					, Ложь
				)
			);
			ДанныеОбъекта.Контакты.Адреса.Добавить(Новый Структура(
					"Вид, Страна, Город, Улица, Представление"
					, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента
					, ""
					, ""
					, ""
					, ДанныеОбъекта.АдресФактический
				)
			);
			ДанныеОбъекта.Контакты.Адреса.Добавить(Новый Структура(
					"Вид, Страна, Город, Улица, Представление"
					, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента
					, ""
					, ""
					, ""
					, ДанныеОбъекта.АдресЮридический
				)
			);
		//	для красоты, однозначности и общей целостности удалим неиспользуемые свойства структуры
			ОбщегоНазначенияКлиентСервер.СвойствоУдалить("Телефон1, Телефон2, Телефон3, Телефон4, Телефон5, ТелефонСлужебный, ПочтаСлужебный, АдресФактический, АдресЮридический", ДанныеОбъекта);

			Атрибуты = Новый Структура(
				"Родитель, Ошибка, ТекстОшибки"
				, Справочники.Контрагенты.ПокупателиЮридическиеЛица
				, Ложь, ""
			);
		//	.. возвращаемое значение здесь не нужно
			ПолучитьКонтрагентаNavision(ДанныеОбъекта, Атрибуты, Истина, Отладка);	//	LNK 02.08.2022 06:04:15

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьПроизводителейNavision(ID, РеквизитОбъекта = Неопределено, БлокироватьПроцесс = Истина, Отладка = Ложь)	Экспорт	//	LNK 21.05.2021 05:46:10

	Перем Блокиратор;

	СтрокаID = СтрЗаменить(СтрЗаменить(ID, "DV.", ""), " ", "");

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	""DV."" + ТаблицаNavision.ID КАК IDN,
	|	ТаблицаNavision.Блокирован КАК Блокирован,
	|	ТаблицаNavision.Код КАК Код,
	|	ТаблицаNavision.КодПоставщика КАК КодПоставщика,
	|	ТаблицаNavision.КодПроекта КАК КодПроекта,
	|	ТаблицаNavision.Наименование КАК Наименование,
	|	ТаблицаNavision.Укр_Наименование КАК НаименованиеУкраинское,
	|	ТаблицаNavision.Маржинальность КАК ПоказательМаржинальности,
	|	ТаблицаNavision.Ктоизменил КАК УчетнаяЗапись,
	|	ТаблицаNavision.ДатаИзменения КАК ДатаИзменения,
	|	ТаблицаNavision.ДатаСоздания КАК ДатаСоздания
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаNavision КАК ТаблицаNavision
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК Контрагент,
	|	ТаблицаСправочник.Производитель КАК СсылкаПроизводитель,
	|	ТаблицаСправочник.Блокирован КАК СсылкаБлокирован,
	|	ТаблицаСправочник.Наименование КАК СсылкаНаименование,
	|	ТаблицаСправочник.НаименованиеПолное КАК СсылкаНаименованиеПолное,
	|	Ведущая.IDN КАК IDN,
	|	Ведущая.Блокирован КАК Блокирован,
	|	Ведущая.Код КАК Код,
	|	Ведущая.КодПоставщика КАК КодПоставщика,
	|	Ведущая.КодПроекта КАК КодПроекта,
	|	Ведущая.Наименование КАК Наименование,
	|	Ведущая.НаименованиеУкраинское КАК НаименованиеУкраинское,
	|	Ведущая.ПоказательМаржинальности КАК ПоказательМаржинальности,
	|	Ведущая.УчетнаяЗапись КАК УчетнаяЗапись,
	|	Ведущая.ДатаИзменения КАК ДатаИзменения,
	|	Ведущая.ДатаСоздания КАК ДатаСоздания,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистра.Контрагент ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		КОГДА НЕ(ТаблицаРегистра.Блокирован = Ведущая.Блокирован
	|					И ТаблицаРегистра.Код = Ведущая.Код
	|					И ТаблицаРегистра.КодПоставщика = Ведущая.КодПоставщика
	|					И ТаблицаРегистра.КодПроекта = Ведущая.КодПроекта
	|					И ТаблицаРегистра.Наименование = Ведущая.Наименование
	|					И ТаблицаРегистра.НаименованиеУкраинское = Ведущая.НаименованиеУкраинское
	|					И ТаблицаРегистра.ПоказательМаржинальности = Ведущая.ПоказательМаржинальности)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаписыватьРеквизиты
	|ИЗ
	|	Источник КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаСправочник
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыКонтрагентов.СрезПоследних КАК ТаблицаРегистра
	|			ПО ТаблицаСправочник.Ссылка = ТаблицаРегистра.Контрагент
	|		ПО Ведущая.IDN = ТаблицаСправочник.IDN
	|
	|УПОРЯДОЧИТЬ ПО
	|	IDN
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	);
	Запрос.УстановитьПараметр("ТаблицаNavision", ПолучитьДанныеОтNavision("SELECT * FROM dbo.Get_Manufacturers_Propety('" + СтрокаID + "')",,, Истина));
	
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		КонтрагентыВыборка = РезультатЗапроса.Выбрать();
		
		НаборЗаписей = РегистрыСведений.РеквизитыКонтрагентов.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		ОбменДаннымиСервер.УстановитьВсехПолучателей(НаборЗаписей.ОбменДанными.Получатели, "ПоМагазину");

		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);

		Пока КонтрагентыВыборка.Следующий() Цикл

			ТребуетсяЗапись = ?(КонтрагентыВыборка.Контрагент = NULL
							, 1
							, ?( НЕ КонтрагентыВыборка.СсылкаПроизводитель
							ИЛИ  НЕ КонтрагентыВыборка.СсылкаБлокирован = КонтрагентыВыборка.Блокирован
							ИЛИ  НЕ КонтрагентыВыборка.СсылкаНаименование = СокрЛП(КонтрагентыВыборка.Наименование)
							ИЛИ  НЕ КонтрагентыВыборка.СсылкаНаименованиеПолное = СокрЛП(КонтрагентыВыборка.НаименованиеУкраинское)
							, 2
							, 0)
			);

			Если БлокироватьПроцесс = Истина И НЕ ТребуетсяЗапись = 0 Тогда

				Попытка

					Блокиратор = Справочники.БлокираторыПроцессов.НовыйКонтрагент.ПолучитьОбъект();
					Блокиратор.Заблокировать();

				Исключение

					ЖурналСобытий.Регистрация("GET_NAV.Производители", УровеньЖурналаРегистрации.Предупреждение
						, Метаданные.Справочники.Контрагенты, КонтрагентыВыборка.Контрагент
						,
						, "Отложено. Не удалось получить управление процессом."
						, "Производитель [" + КонтрагентыВыборка.IDN + "]", Истина, Ложь
					);

					Продолжить;

				КонецПопытки;

			КонецЕсли;

			Если ТребуетсяЗапись = 1 Тогда

				КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
				КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
				КонтрагентОбъект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				КонтрагентОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
				ОбменДаннымиСервер.УстановитьВсехПолучателей(КонтрагентОбъект.ОбменДанными.Получатели, "ПоМагазину");

				КонтрагентОбъект.IDN = КонтрагентыВыборка.IDN;
				КонтрагентОбъект.Блокирован	   = КонтрагентыВыборка.Блокирован;
				КонтрагентОбъект.Наименование  = СокрЛП(КонтрагентыВыборка.Наименование);
				КонтрагентОбъект.НаименованиеПолное  = СокрЛП(КонтрагентыВыборка.НаименованиеУкраинское);
				КонтрагентОбъект.Родитель      = Справочники.Контрагенты.Производители;
				КонтрагентОбъект.ЮрФизЛицо     = Перечисления.ЮрФизЛицо.ЮрЛицо;
				КонтрагентОбъект.Производитель = Истина;

				КонтрагентОбъект.ДополнительныеСвойства.Вставить("ПрефиксНеДополнять");
				КонтрагентОбъект.ДополнительныеСвойства.Вставить("Префикс", "000");
				КонтрагентОбъект.УстановитьНовыйКод();

				КонтрагентОбъект.Записать();

				Контрагент = КонтрагентОбъект.Ссылка;

			Иначе

				Контрагент = КонтрагентыВыборка.Контрагент;

				Если ТребуетсяЗапись = 2 Тогда

					КонтрагентОбъект = КонтрагентыВыборка.Контрагент.ПолучитьОбъект();
					КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
					КонтрагентОбъект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
					КонтрагентОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
					ОбменДаннымиСервер.УстановитьВсехПолучателей(КонтрагентОбъект.ОбменДанными.Получатели, "ПоМагазину");

					КонтрагентОбъект.Производитель = Истина;
					КонтрагентОбъект.Блокирован    = КонтрагентыВыборка.Блокирован;
					КонтрагентОбъект.Наименование  = СокрЛП(КонтрагентыВыборка.Наименование);
					КонтрагентОбъект.НаименованиеПолное  = СокрЛП(КонтрагентыВыборка.НаименованиеУкраинское);

					КонтрагентОбъект.Записать();

				КонецЕсли;

			КонецЕсли;

			Если НЕ РеквизитОбъекта = Контрагент Тогда

				РеквизитОбъекта = Контрагент;

			КонецЕсли;

			Если КонтрагентыВыборка.ЗаписыватьРеквизиты Тогда

				НаборЗаписей.Очистить();
				НаборЗаписей.Отбор.Период.Установить(?(КонтрагентыВыборка.ДатаИзменения = '00010101', ТекущаяДата(), КонтрагентыВыборка.ДатаИзменения));
				НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);

				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьНабора, КонтрагентыВыборка);
				ЗаписьНабора.Период		= НаборЗаписей.Отбор.Период.Значение;
				ЗаписьНабора.Контрагент	= Контрагент;

				НаборЗаписей.Записать();

			КонецЕсли;

			Если НЕ Блокиратор = Неопределено И Блокиратор.Заблокирован() Тогда

				Блокиратор.Разблокировать();

			КонецЕсли;

			Блокиратор = Неопределено;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

#Область СозданиеОбновлениеКонтрагента

//	LNK 13.09.2022 04:27:10
Функция КонтрагентNavisionКорректен(ДанныеОбъекта, Атрибуты)

	Отказ = Ложь;

	ПрефиксыЗапретить = Новый Массив;
	ПрефиксыЗапретить.Добавить("SFWEB");

	Для каждого Префикс Из ПрефиксыЗапретить Цикл

		Если Лев(ДанныеОбъекта.IDN, СтрДлина(Префикс)) = Префикс Тогда

			Отказ = Истина;
			Прервать;
			
		КонецЕсли;

	КонецЦикла;

	Возврат НЕ Отказ;

КонецФункции

//	LNK 26.08.2022 06:56:41
Процедура ПолучитьКонтрагентаNavisionУточнение(ДанныеОбъекта, Атрибуты)

	Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.Контрагент) И НЕ ПустаяСтрока(ДанныеОбъекта.Контакты.ТелефонКонтрагента) Тогда

		Запрос = Новый Запрос(
	//	"ПЕРВЫЕ 4" - для ограничения выборки.. мало ли! Вдруг таких клиентов будет много!
	//	а именно "4" для уточнения (в отладке), что клиент НЕ единственный.
		"ВЫБРАТЬ ПЕРВЫЕ 4
		|	ТаблицаВладельцы.Код КАК Код,
		|	ТаблицаВладельцы.Ссылка КАК Контрагент,
		|	ТаблицаВладельцы.Поставщик КАК Поставщик,
		|	ТаблицаВладельцы.Покупатель КАК Покупатель,
		|	ТаблицаВладельцы.ЮрФизЛицо КАК ЮрФизЛицо
		|ИЗ
		|	Справочник.Контрагенты КАК ТаблицаВладельцы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтакты
		|		ПО ТаблицаВладельцы.Ссылка = ТаблицаКонтакты.Ссылка
		|ГДЕ
		|	ТаблицаКонтакты.НомерТелефона = &НомерТелефона
		|	И ТаблицаКонтакты.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код"
		);
		Запрос.УстановитьПараметр("НомерТелефона", ДанныеОбъекта.Контакты.ТелефонКонтрагента);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда

			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();

			ДанныеОбъекта.Контрагент = Выборка.Контрагент;
			ДанныеОбъекта.Контакты.НайденПоТелефону = Истина;	//	информационный флаг

			ИменаРеквизитов = Новый Массив;
			ИменаРеквизитов.Добавить("Поставщик");
			ИменаРеквизитов.Добавить("Покупатель");
			ИменаРеквизитов.Добавить("ЮрФизЛицо");

			Для каждого Имя Из ИменаРеквизитов Цикл

			//	Сохраняем значения "взведенных" по ссылке флагов!
				Если НЕ ДанныеОбъекта[Имя] = Выборка[Имя] Тогда

					ДанныеОбъекта[Имя] = Выборка[Имя];

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 02.08.2022 05:52:18
Функция ПолучитьКонтрагентаNavision(ДанныеОбъекта, Атрибуты, БлокироватьНовый = Истина, Отладка = Ложь)

	Перем Блокиратор, СчетОбъект, КонтрагентСсылка;

	Если КонтрагентNavisionКорректен(ДанныеОбъекта, Атрибуты) Тогда

	//	Проверим существование по ключевым атрибутам, если "Контрагент" НЕ найден и номер телефона указан!
		ПолучитьКонтрагентаNavisionУточнение(ДанныеОбъекта, Атрибуты);

		КонтрагентРозницы = (ДанныеОбъекта.Отправитель = "АНТ") ИЛИ ДанныеОбъекта.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;

		Если ЗначениеЗаполнено(ДанныеОбъекта.Контрагент) Тогда

			КонтрагентОбъект = ДанныеОбъекта.Контрагент.ПолучитьОбъект();

		ИначеЕсли КонтрагентРозницы = Истина Тогда	//	LNK 11.04.2023 06:19:54

			КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
			КонтрагентОбъект.УстановитьСсылкуНового(Справочники.Контрагенты.ПолучитьСсылку());

		//	Префикс, передаваемый в "ДополнительныеСвойства", заменяет префикс узла, в данном случае
		//	"000" (процесс выполняется только в ЦБ).
			КонтрагентОбъект.ДополнительныеСвойства.Вставить("ПрефиксНеДополнять");
			КонтрагентОбъект.ДополнительныеСвойства.Вставить("Префикс", "000");
			КонтрагентОбъект.УстановитьНовыйКод();

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаСправочник.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК ТаблицаСправочник
			|ГДЕ
			|	ТаблицаСправочник.Код = &ТекущийКод"
			);
			Запрос.УстановитьПараметр("ТекущийКод", КонтрагентОбъект.Код);

			Результат = Запрос.Выполнить();

			Если НЕ Результат.Пустой() Тогда
				
			//	такой код присутствует.. изменяем префикс на "аварийный"
				КонтрагентОбъект.ДополнительныеСвойства.Префикс = "Ц1";
				КонтрагентОбъект.УстановитьНовыйКод();

			КонецЕсли;

		Иначе

			КонтрагентОбъект = Неопределено;

		КонецЕсли;
		
		Если КонтрагентРозницы = Истина Тогда

			КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
			КонтрагентОбъект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			КонтрагентОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
			ОбменДаннымиСервер.УстановитьВсехПолучателей(КонтрагентОбъект.ОбменДанными.Получатели, "ПоМагазину");

		//	---------------------------------------------------------------------------------------

			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ПометкаУдаления", Ложь, КонтрагентОбъект);	//	LNK 17.04.2023 12:05:06

			КлючДанных("IDN", "IDN", ДанныеОбъекта, КонтрагентОбъект);
			КлючДанных("Наименование", "Наименование", ДанныеОбъекта, КонтрагентОбъект);
			КлючДанных("НаименованиеПолное", "НаименованиеПолное", ДанныеОбъекта, КонтрагентОбъект);
			КлючДанных("Блокирован", "Блокирован", ДанныеОбъекта, КонтрагентОбъект);
			КлючДанных("РазрешитьПрямуюЗакупку", "РазрешитьПрямуюЗакупку", ДанныеОбъекта, КонтрагентОбъект);						//	имя в запросе изменено LNK 04.08.2022 06:30:15
			КлючДанных("Комментарий", "Комментарий", ДанныеОбъекта, КонтрагентОбъект);
			КлючДанных("КодПоЕДРПОУ", "КодПоЕДРПОУ", ДанныеОбъекта, КонтрагентОбъект);
			КлючДанных("ИННПлательщикаНДС", "ИННПлательщикаНДС", ДанныеОбъекта, КонтрагентОбъект);									//	имя в запросе изменено LNK 04.08.2022 06:30:15
			КлючДанных("ПлательщикНДС", "ПлательщикНДС", ДанныеОбъекта, КонтрагентОбъект);
			КлючДанных("НомерСвидетельстваПлательщикаНДС", "НомерСвидетельстваПлательщикаНДС", ДанныеОбъекта, КонтрагентОбъект);	//	имя в запросе изменено LNK 04.08.2022 06:30:15

			КлючДанных("Поставщик"	, "Поставщик" , ДанныеОбъекта, КонтрагентОбъект);
			КлючДанных("Покупатель"	, "Покупатель", ДанныеОбъекта, КонтрагентОбъект);

			Если КонтрагентОбъект.Поставщик И НЕ КонтрагентОбъект.РазрешитьПрямуюЗакупку Тогда	//	в NAV - не УКРАИНА

			//	только "Поставщики" -> [Euro2009].[dbo].[Европродукт 2009$Поставщик]
				ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, КонтрагентОбъект);
			
			Иначе

			//	Ветка - Покупатели и Поставщики (которые "местные", т.е. РазрешитьПрямуюЗакупку=Истина)

				Если ПустаяСтрока(КонтрагентОбъект.КодПоЕДРПОУ) Тогда

					Если КонтрагентОбъект.Покупатель И (КонтрагентОбъект.ИННПлательщикаНДС = "100000000000") Тогда

							ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо, КонтрагентОбъект);

					Иначе	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель, КонтрагентОбъект);

					КонецЕсли;
				
				Иначе

					ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо, КонтрагентОбъект);

					Если КонтрагентОбъект.Покупатель Тогда

						Атрибуты.Родитель = Справочники.Контрагенты.ПокупателиЮридическиеЛица;

					КонецЕсли;
				
				КонецЕсли;

			КонецЕсли;

			КлючДанных("Родитель", "Родитель",, КонтрагентОбъект, Атрибуты);

			ЗаполнитьКонтактнуюИнформацию(КонтрагентОбъект, ДанныеОбъекта);

			НачатьТранзакцию();

			Попытка

				Если НЕ ПустаяСтрока(ДанныеОбъекта.МФО) И ЗначениеЗаполнено(ДанныеОбъекта.Банк) И НЕ ПустаяСтрока(ДанныеОбъекта.РасчетныйСчет) Тогда

					Если ЗначениеЗаполнено(ДанныеОбъекта.БанковскийСчет) Тогда

							СчетОбъект = ДанныеОбъекта.БанковскийСчет.ПолучитьОбъект();

					Иначе	СчетОбъект = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
							СчетОбъект.Владелец = ?(КонтрагентОбъект.ЭтоНовый(), КонтрагентОбъект.ПолучитьСсылкуНового(), КонтрагентОбъект.Ссылка);

					КонецЕсли;

					КлючДанных("Банк", "Банк", ДанныеОбъекта, СчетОбъект);
					КлючДанных("РасчетныйСчет", "НомерСчета", ДанныеОбъекта, СчетОбъект);
					КлючДанных("МФО", "КодБанка", ДанныеОбъекта, СчетОбъект);

					ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ВидСчета", "Текущий", СчетОбъект);
					ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Наименование"
						, СокрЛП(СчетОбъект.НомерСчета) + " (" + СчетОбъект.КодБанка + ") «" + СокрЛП(КонтрагентОбъект.Наименование) + "»"
						, СчетОбъект
					);

				КонецЕсли;
				
				Если КонтрагентОбъект.ЭтоНовый() Тогда	//	LNK 14.08.2022 09:33:53 Модифицированность() однозачно в Истина

					Попытка

						Блокиратор = Справочники.БлокираторыПроцессов.НовыйКонтрагент.ПолучитьОбъект();
						Блокиратор.Заблокировать();

					Исключение

					//	тут переход в обработку исключения ниже и процесс записи выполнен не будет.
						ВызватьИсключение "БЛОКИРОВКА: не удалось захватить управление процессом";

					КонецПопытки;

				КонецЕсли;

				Если ТипЗнч(СчетОбъект) = Тип("СправочникОбъект.БанковскиеСчетаКонтрагентов") Тогда

					Если СчетОбъект.Модифицированность() И НЕ Отладка = Истина Тогда

						СчетОбъект.ОбменДанными.Загрузка = Истина;
						СчетОбъект.Записать();

					КонецЕсли;

				КонецЕсли;

				Если КонтрагентОбъект.Модифицированность() Тогда

				//	LNK 15.08.2022 06:11:09 - Только если есть отличия.
				//	Ведь могли в NAV просто записать объект, не изменяя данные?
					КлючДанных("КодИзменения", "КодИзменения", ДанныеОбъекта, КонтрагентОбъект);

					Если НЕ Отладка = Истина Тогда

						КонтрагентОбъект.Записать();

					КонецЕсли;

				КонецЕсли;

				Если ТипЗнч(Блокиратор) = Тип("СправочникОбъект.БлокираторыПроцессов") И Блокиратор.Заблокирован() Тогда

					Блокиратор.Разблокировать();

				КонецЕсли;

				ЗафиксироватьТранзакцию();

				КонтрагентСсылка = КонтрагентОбъект.Ссылка;

			Исключение

				Атрибуты.Ошибка = Истина;
				Атрибуты.ТекстОшибки = Атрибуты.ТекстОшибки + ?(ПустаяСтрока(Атрибуты.ТекстОшибки), "", Символы.ПС)
									+ ОписаниеОшибки();
				ОтменитьТранзакцию();

			КонецПопытки;

		Иначе	//	LNK 11.04.2023 06:22:49 - НЕ КонтрагентРозницы = Истина

			Если ТипЗнч(КонтрагентОбъект) = Тип("СправочникОбъект.Контрагенты") Тогда

				#Если _ Тогда
				КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
				#КонецЕсли

				КонтрагентОбъект.УстановитьПометкуУдаления(Истина);	//	LNK 11.04.2023 06:26:32
				КонтрагентСсылка = КонтрагентОбъект.Ссылка;

			Иначе

				КонтрагентСсылка = Справочники.Контрагенты.ПустаяСсылка();

			КонецЕсли;

		КонецЕсли;

	Иначе

		КонтрагентСсылка = Справочники.Контрагенты.ПустаяСсылка();

	КонецЕсли;

	Возврат КонтрагентСсылка;

КонецФункции

//	LNK 03.08.2022 12:54:45
Процедура ЗаполнитьКонтактнуюИнформацию(КонтрагентОбъект, ДанныеОбъекта)

	Контакты = ДанныеОбъекта.Контакты;

	Если НЕ ПустаяСтрока(Контакты.ТелефонКонтрагента) Тогда

		УстановитьКонтактнуюИнформацию(Контакты.ТелефонКонтрагента, Контакты.ТелефонКонтрагента, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, Перечисления.ТипыКонтактнойИнформации.Телефон, КонтрагентОбъект.КонтактнаяИнформация);

	КонецЕсли;

	Если НЕ ПустаяСтрока(Контакты.ТелефонКонтрагентаСлужебный) Тогда

		УстановитьКонтактнуюИнформацию(Контакты.ТелефонКонтрагентаСлужебный, Контакты.ТелефонКонтрагентаСлужебный, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагентаСлужебный, Перечисления.ТипыКонтактнойИнформации.Телефон, КонтрагентОбъект.КонтактнаяИнформация);

	КонецЕсли;

	Если НЕ ПустаяСтрока(Контакты.EmailКонтрагентаСлужебный) Тогда

		УстановитьКонтактнуюИнформацию(Контакты.EmailКонтрагентаСлужебный,, Справочники.ВидыКонтактнойИнформации.EmailКонтрагентаСлужебный, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, КонтрагентОбъект.КонтактнаяИнформация);

	КонецЕсли;

	Для каждого Адрес Из Контакты.Адреса Цикл
	
		Если КонтрагентОбъект.РазрешитьПрямуюЗакупку И ПустаяСтрока(Адрес.Страна) Тогда

			Адрес.Страна = "УКРАЇНА";

		КонецЕсли;

		Если НЕ ПустаяСтрока(Адрес.Город) Тогда

			УстановитьАдресКонтрагента("", Адрес.Страна, Адрес.Город, Адрес.Улица, "", "", КонтрагентОбъект.КонтактнаяИнформация, Адрес.Вид);

		ИначеЕсли НЕ ПустаяСтрока(Адрес.Представление) Тогда

			УстановитьКонтактнуюИнформацию(Адрес.Представление,, Адрес.Вид, Перечисления.ТипыКонтактнойИнформации.Адрес, КонтрагентОбъект.КонтактнаяИнформация);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//	LNK 02.08.2022 06:23:55
Функция КлючДанных(Ключ, ИмяРеквизита = Неопределено, ДанныеОбъекта, ОбъектДанных = Неопределено, ДанныеКлюча = Неопределено, ЗначениеПоУмолчанию = Неопределено)

	Перем ОбъектСелективный;

	Значение = ЗначениеПоУмолчанию;

	Если ДанныеКлюча = Неопределено Тогда

		Если НЕ ТипЗнч(ДанныеОбъекта) = Тип("Структура") ИЛИ ДанныеОбъекта.Свойство(Ключ) Тогда

			ОбъектСелективный = ДанныеОбъекта;

		КонецЕсли;

	Иначе	ОбъектСелективный = ДанныеКлюча;	//	Ключ обязан быть!

	КонецЕсли;

	Если НЕ ОбъектСелективный = Неопределено Тогда	//	в переданных данных нет такого ключа - нет смысла устанавливать значение реквизита

		Значение = ОбъектСелективный[Ключ];

		Если НЕ (ИмяРеквизита = Неопределено ИЛИ ОбъектДанных = Неопределено) Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается(ИмяРеквизита, Значение, ОбъектДанных);

		КонецЕсли;

	КонецЕсли;

	Возврат Значение;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
	
#КонецОбласти

#Область ВспомогательныеПроцедуры

Процедура УстановитьКонтактнуюИнформацию(Представление, НомерТелефона = "", Вид, Тип, КонтактнаяИнформация)

	СтрокаКонтакты	= КонтактнаяИнформация.Найти(Вид, "Вид");
	ТипТелефон		= (Тип = Перечисления.ТипыКонтактнойИнформации.Телефон ИЛИ Тип = Перечисления.ТипыКонтактнойИнформации.Факс);
	НоваяСтрока		= Ложь;

	Если СтрокаКонтакты = Неопределено Тогда

		СтрокаКонтакты	= КонтактнаяИнформация.Добавить();
		НоваяСтрока		= Истина;

	КонецЕсли;

	Если НоваяСтрока ИЛИ НЕ ТипТелефон Тогда	//	LNK 14.08.2022 08:57:36

		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Вид", Вид, СтрокаКонтакты);
		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Тип", Тип, СтрокаКонтакты);
		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Представление", СокрЛП(Представление), СтрокаКонтакты);

	КонецЕсли;

	Если ТипТелефон Тогда	//	LNK 21.06.2018 11:39:50

		ТаблицаКонтакты = КонтактнаяИнформация.ВыгрузитьКолонки();
		ТаблицаКонтакты.Колонки.Добавить("Обработан", Новый ОписаниеТипов("Булево"));

		СтрокаТаблицы = ТаблицаКонтакты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаКонтакты);
		СтрокаТаблицы.ЗначенияПолей = "";	//	... очистим предварительно

		КонтактнаяИнформацияВызовСервера.ПарсерНомераТелефона(СтрокаТаблицы, ТаблицаКонтакты.Колонки);

		Для каждого Колонка Из Метаданные.Справочники.Контрагенты.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты Цикл

			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается(Колонка.Имя, СтрокаТаблицы[Колонка.Имя], СтрокаКонтакты);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура УстановитьАдресКонтрагента(Индекс, Страна, Город, Улица, Дом, Квартира, КонтактнаяИнформация, Вид)

	СтрокаАдрес = "";

	Если ЗначениеЗаполнено(Индекс) Тогда

		СтрокаАдрес = СтрокаАдрес + Формат(Индекс, "ЧЦ=5; ЧГ=");

	КонецЕсли;

	Если НЕ ПустаяСтрока(Страна) Тогда

		СтрокаАдрес = СтрокаАдрес + ?(ПустаяСтрока(СтрокаАдрес), "", ", ")
		+ СокрЛП(Страна);

	КонецЕсли;

	Если НЕ ПустаяСтрока(Город) Тогда

		СтрокаАдрес = СтрокаАдрес + ?(ПустаяСтрока(СтрокаАдрес), "", ", ")
		+ СокрЛП(Город);

	КонецЕсли;

	Если НЕ ПустаяСтрока(Улица) Тогда

		СтрокаАдрес = СтрокаАдрес + ?(ПустаяСтрока(СтрокаАдрес), "", ", ")
		+ СокрЛП(Улица);

	КонецЕсли;

	Если НЕ ПустаяСтрока(Дом) Тогда

		СтрокаАдрес = СтрокаАдрес + ?(ПустаяСтрока(СтрокаАдрес), "", ", ")
		+ "дом " + СокрЛП(Дом);

	КонецЕсли;

	Если НЕ ПустаяСтрока(Квартира) Тогда

		СтрокаАдрес = СтрокаАдрес + ?(ПустаяСтрока(СтрокаАдрес), "", ", ")
		+ "кв." + СокрЛП(Квартира);

	КонецЕсли;

//	---------------------------------------------------------------------------------------

	Если НЕ ПустаяСтрока(СтрокаАдрес) Тогда

		СтрокаКонтакты = КонтактнаяИнформация.Найти(Вид, "Вид");

		Если СтрокаКонтакты = Неопределено Тогда

			СтрокаКонтакты = КонтактнаяИнформация.Добавить();

		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Вид", Вид, СтрокаКонтакты);
		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес, СтрокаКонтакты);
		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Представление", СтрЗаменить(СтрокаАдрес, "  ", " "), СтрокаКонтакты);

		Если НЕ ПустаяСтрока(Страна) Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Страна", СокрЛП(Страна), СтрокаКонтакты);

		КонецЕсли;

		Если НЕ ПустаяСтрока(Город) Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Город", СокрЛП(Город), СтрокаКонтакты);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция УстановитьКассуККМ(ДанныеOracle, ОбновитьАналитику, СсылкиОбработаны)

	Если НЕ ЗначениеЗаполнено(ДанныеOracle.Магазин) Тогда

		ВызватьИсключение "Попытка создания кассы ККМ с пустым магазином!";

	КонецЕсли;

	Запрос	= Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка
	|ИЗ
	|	Справочник.КассыККМ КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Магазин = &Магазин
	|	И ТаблицаСправочник.Владелец = &Организация
	|	И ТаблицаСправочник.НомерВМагазине = &НомерВМагазине"
	);
	Запрос.УстановитьПараметр("Магазин"       , ДанныеOracle.Магазин);
	Запрос.УстановитьПараметр("Организация"   , ДанныеOracle.Организация);
	Запрос.УстановитьПараметр("НомерВМагазине", ?(ЗначениеЗаполнено(ДанныеOracle.НомерКассыККМ), ДанныеOracle.НомерКассыККМ, 0));
	
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда

		КассаККМ = Справочники.КассыККМ.СоздатьЭлемент();
		КассаККМ.Владелец       = ДанныеOracle.Организация;
		КассаККМ.Магазин        = ДанныеOracle.Магазин;
		КассаККМ.НомерВМагазине = ДанныеOracle.НомерКассыККМ;
		КассаККМ.ТипКассы       = Перечисления.ТипыКассККМ.ФискальныйРегистратор;

		КассаККМ.УстановитьНовыйКод(Формат(ДанныеOracle.НомерМагазина, "ЧЦ=3; ЧН=000; ЧВН=; ЧГ="));
		КассаККМ.Наименование = "РРО № " + Формат(ДанныеOracle.НомерКассыККМ, "ЧН=0; ЧГ=") + " (" + СокрЛП(ДанныеOracle.Магазин) + ")";

	Иначе

		Выборка = Результат.Выбрать();
		Выборка.Следующий();

		КассаККМ = ?(ОбновитьАналитику И СсылкиОбработаны.Найти(Выборка.Ссылка) = Неопределено, Выборка.Ссылка.ПолучитьОбъект(), Выборка.Ссылка);

	КонецЕсли;

//	отключаем обновление... только запись новых.
	Если (ЛОЖЬ И ОбновитьАналитику) ИЛИ ТипЗнч(КассаККМ) = Тип("СправочникОбъект.КассыККМ") Тогда

		Если СтрДлина(ДанныеOracle.НомерРегистратора) > 5 Тогда

			КассаККМ.РегистрационныйНомер = ДанныеOracle.НомерРегистратора;

		КонецЕсли;

		КассаККМ.ОбменДанными.Загрузка = Истина;
		КассаККМ.Записать();
		КассаККМ = КассаККМ.Ссылка;

	КонецЕсли;

	Возврат КассаККМ;

КонецФункции

Функция ПолучитьДатуИзСтроки(Значение)

	ЗначениеВозврата = '00010101';

	Если НЕ ПустаяСтрока(Значение) Тогда

		СоставДаты = ОбщегоНазначенияКлиентСервер.lx_FillValueList(, Значение);

		Если СоставДаты.Количество() = 3 Тогда

			Год = Число(СоставДаты[2]);
			ЗначениеВозврата = Дата(?(Год > 16, 1900, 2000) + Год, Число(СоставДаты[1]), Число(СоставДаты[0]));

		КонецЕсли;

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции // ПолучитьДатуИзСтроки()

#КонецОбласти

#Область ОбновлениеКлассификаторовПоДаннымNavision

Процедура ОбновитьКлассификаторыПоДаннымNavision()	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ОбновитьКлассификаторыПоДаннымNavision_Организации();
	ОбновитьКлассификаторыПоДаннымNavision_Склады();
	ОбновитьКлассификаторыПоДаннымNavision_ПрайсЛисты();

	УстановитьОрганизациюМагазиновПоДаннымСкладов();

КонецПроцедуры

//	LNK 05.01.2022 05:20:01
Процедура ОбновитьКлассификаторыПоДаннымNavision_Организации()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаNavision.IDN,
	|	ТаблицаNavision.Наименование,
	|	ТаблицаNavision.НаименованиеДляНалоговой,
	|	ТаблицаNavision.НаименованиеУкраина,
	|	ТаблицаNavision.НаименованиеУкраинаДляНалоговой,
	|	ТаблицаNavision.АдресФактический,
	|	ТаблицаNavision.АдресЮридический,
	|	ТаблицаNavision.Телефоны,
	|	ТаблицаNavision.КодПоЕДРПОУ,
	|	ТаблицаNavision.ИННПлательщикаНДС,
	|	ТаблицаNavision.НомерСвидетельстваПлательщикаНДС,
	|	ТаблицаNavision.ГлавныйБухгалтер,
	|	ТаблицаNavision.Розница,
	|	ТаблицаNavision.Блокирован,
	|	ТаблицаNavision.ПлательщикНДС
	|ПОМЕСТИТЬ ТаблицаNavision
	|ИЗ
	|	&ТаблицаNavision КАК ТаблицаNavision
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаNavision.IDN КАК IDN,
	|	ТаблицаСправочник.Ссылка КАК Организация,
	|	ТаблицаNavision.Наименование,
	|	ТаблицаNavision.НаименованиеДляНалоговой,
	|	ТаблицаNavision.НаименованиеУкраина,
	|	ТаблицаNavision.НаименованиеУкраинаДляНалоговой,
	|	ТаблицаNavision.АдресФактический,
	|	ТаблицаNavision.АдресЮридический,
	|	ТаблицаNavision.Телефоны,
	|	ТаблицаNavision.КодПоЕДРПОУ,
	|	ТаблицаNavision.ИННПлательщикаНДС,
	|	ТаблицаNavision.НомерСвидетельстваПлательщикаНДС,
	|	ТаблицаNavision.ГлавныйБухгалтер,
	|	ТаблицаNavision.Розница,
	|	ТаблицаNavision.Блокирован,
	|	ТаблицаNavision.ПлательщикНДС
	|ИЗ
	|	ТаблицаNavision КАК ТаблицаNavision
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ТаблицаСправочник
	|		ПО ТаблицаNavision.IDN = ТаблицаСправочник.IDN
	|
	|УПОРЯДОЧИТЬ ПО
	|	IDN"
	);
	Запрос.УстановитьПараметр("ТаблицаNavision", ПолучитьДанныеОтNavision("ОрганизацииNavision"));

	ОрганизацииВыборка = Запрос.Выполнить().Выбрать();

	Пока ОрганизацииВыборка.Следующий() Цикл

		НачатьТранзакцию();

		Попытка

			УстановитьОрганизациюПоДаннымNavision(ОрганизацииВыборка, Ложь);
			ЗафиксироватьТранзакцию();

		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ОтменитьТранзакцию();
			ВызватьИсключение ТекстОшибки;

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

//	LNK 05.01.2022 05:22:02
Процедура ОбновитьКлассификаторыПоДаннымNavision_Склады()	Экспорт	//	Экспорт в целях отладки!

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаNavision.IDN КАК IDN,
	|	ТаблицаNavision.Наименование КАК Наименование,
	|	ТаблицаNavision.КодИзменения КАК КодИзменения,
	|	ТаблицаNavision.ТипСклада КАК ТипСклада,
	|	ТаблицаNavision.Филиал КАК Филиал,
	|	ТаблицаNavision.АдресФактический КАК АдресФактический,
	|	ТаблицаNavision.Префикс КАК Префикс,
	|	ТаблицаNavision.Отдел КАК Отдел,
	|	ТаблицаNavision.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
	|	ТаблицаNavision.Блокирован КАК Блокирован,
	|	ТаблицаNavision.КодБюджета КАК КодБюджета
	|ПОМЕСТИТЬ ТаблицаNavision
	|ИЗ
	|	&ТаблицаNavision КАК ТаблицаNavision
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаNavision.IDN КАК IDN,
	|	ТаблицаСклады.Ссылка КАК Склад,
	|	ТаблицаОрганизации.Ссылка КАК Организация,
	|	ТаблицаNavision.Наименование КАК Наименование,
	|	ТаблицаNavision.КодИзменения КАК КодИзменения,
	|	ТаблицаNavision.ТипСклада КАК ТипСклада,
	|	ТаблицаNavision.Филиал КАК Филиал,
	|	ТаблицаNavision.АдресФактический КАК АдресФактический,
	|	ТаблицаNavision.Префикс КАК Префикс,
	|	ТаблицаNavision.Отдел КАК Отдел,
	|	ТаблицаNavision.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
	|	ТаблицаNavision.Блокирован КАК Блокирован,
	|	ТаблицаNavision.КодБюджета КАК КодБюджета,
	|	ЕСТЬNULL(ТаблицаАдрес.Представление, """") КАК СсылкаАдресФактический
	|ИЗ
	|	ТаблицаNavision КАК ТаблицаNavision
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаСклады
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ТаблицаОрганизации
	|			ПО ТаблицаСклады.Отдел = ТаблицаОрганизации.IDN
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.КонтактнаяИнформация КАК ТаблицаАдрес
	|			ПО ТаблицаСклады.Ссылка = ТаблицаАдрес.Ссылка
	|				И (ТаблицаАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресСклада))
	|		ПО ТаблицаNavision.IDN = ТаблицаСклады.IDN
	|ГДЕ
	|	НЕ ТаблицаNavision.КодИзменения = ЕСТЬNULL(ТаблицаСклады.КодИзменения, """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	IDN"
	);
	Запрос.УстановитьПараметр("ТаблицаNavision", ПолучитьДанныеОтNavision("СкладыNavision"));

	Результат = Запрос.Выполнить();	//	в целях отладки - получить таблицу значений.

	Если НЕ Результат.Пустой() Тогда

		СкладыВыборка = Результат.Выбрать();

		Пока СкладыВыборка.Следующий() Цикл

			НачатьТранзакцию();

			Попытка

				УстановитьСкладПоДаннымNavision(СкладыВыборка, Истина);
				ЗафиксироватьТранзакцию();

			Исключение

				ТекстОшибки = ОписаниеОшибки();
				ОтменитьТранзакцию();
				ВызватьИсключение ТекстОшибки;

			КонецПопытки;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	LNK 05.01.2022 05:23:43
Процедура ОбновитьКлассификаторыПоДаннымNavision_ПрайсЛисты()

	Запрос	= Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаNavision.КодСклада КАК IDN,
	|	ТаблицаNavision.КодПрайсЛиста КАК КодПрайсЛиста,
	|	ТаблицаNavision.КодПроекта КАК КодПроекта
	|ПОМЕСТИТЬ ТаблицаNavision
	|ИЗ
	|	&ТаблицаNavision КАК ТаблицаNavision
	|ГДЕ
	|	НЕ ТаблицаNavision.КодСклада = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаNavision.IDN КАК IDN,
	|	ТаблицаNavision.КодПрайсЛиста КАК КодПрайсЛиста,
	|	ТаблицаNavision.КодПроекта КАК КодПроекта,
	|	ТаблицаСклады.Ссылка КАК Склад,
	|	ЛОЖЬ КАК Удалить
	|ИЗ
	|	ТаблицаNavision КАК ТаблицаNavision
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаСклады
	|		ПО ТаблицаNavision.IDN = ТаблицаСклады.IDN
	|			И (ТаблицаСклады.Магазин.СкладУправляющейСистемы = ИСТИНА
	|				ИЛИ ТаблицаСклады.Ссылка = ТаблицаСклады.Магазин.СкладПродажи)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаРегистра.IDN,
	|	ТаблицаРегистра.КодПрайсЛиста,
	|	ТаблицаРегистра.КодПроекта,
	|	ТаблицаРегистра.Склад,
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.СоответствиеПрайсовСкладамNavision КАК ТаблицаРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаNavision КАК ТаблицаNavision
	|		ПО ТаблицаРегистра.IDN = ТаблицаNavision.IDN
	|			И ТаблицаРегистра.КодПрайсЛиста = ТаблицаNavision.КодПрайсЛиста
	|			И ТаблицаРегистра.КодПроекта = ТаблицаNavision.КодПроекта
	|ГДЕ
	|	ТаблицаNavision.IDN ЕСТЬ NULL
	|	И НЕ ТаблицаРегистра.Обязательно
	|
	|УПОРЯДОЧИТЬ ПО
	|	IDN,
	|	КодПрайсЛиста"
	);
	Запрос.УстановитьПараметр("ТаблицаNavision", ПолучитьДанныеОтNavision("SELECT * FROM PL_GetPriceListByStore(null)",,, Истина));

	Результат = Запрос.Выполнить();	//	в целях отладки - получить таблицу значений.

	Если НЕ Результат.Пустой() Тогда

		ВыборкаNavision = Результат.Выбрать();
		ДатаИзменения   = ТекущаяДата();

		Пока ВыборкаNavision.Следующий() Цикл

			МенеджерЗаписи = РегистрыСведений.СоответствиеПрайсовСкладамNavision.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаNavision);

			Если ВыборкаNavision.Удалить Тогда

				МенеджерЗаписи.Удалить();

			Иначе

				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.IDN <> ВыборкаNavision.IDN ИЛИ МенеджерЗаписи.КодПрайсЛиста <> ВыборкаNavision.КодПрайсЛиста ИЛИ
					МенеджерЗаписи.КодПроекта <> ВыборкаNavision.КодПроекта ИЛИ МенеджерЗаписи.Склад <> ВыборкаNavision.Склад тогда
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаNavision);
					МенеджерЗаписи.ДатаИзменения = ДатаИзменения;

					МенеджерЗаписи.Записать(Истина);
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеКлассификаторовПоДаннымNavisionРаботаСОбъектами

Функция УстановитьМагазинПоДаннымNavision(НомерМагазина, ДанныеNavision, ОбновитьАналитику, СкладСсылка = Неопределено)

	МагазинОбъект = Справочники.Магазины.ПустаяСсылка();

	Если ЗначениеЗаполнено(НомерМагазина) Тогда

		СкладУправляющейСистемы = ТипЗнч(НомерМагазина) = Тип("Строка");

		Если СкладУправляющейСистемы Тогда

			Запрос	= Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаСправочник.Ссылка КАК Магазин
			|ИЗ
			|	Справочник.Магазины КАК ТаблицаСправочник
			|ГДЕ
			|	ТаблицаСправочник.КодФилиала = &КодФилиала
			|	И ТаблицаСправочник.СкладУправляющейСистемы"
			);
			Запрос.УстановитьПараметр("КодФилиала", НомерМагазина);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда

				МагазинОбъект = Выборка.Магазин;

			КонецЕсли;

		Иначе

			МагазинОбъект = Справочники.Магазины.НайтиПоРеквизиту("НомерМагазина", НомерМагазина);

		КонецЕсли;

		Если НЕ МагазинОбъект.Пустая() Тогда

			МагазинОбъект = МагазинОбъект.ПолучитьОбъект();

		Иначе
			
			МагазинОбъект = Справочники.Магазины.СоздатьЭлемент();
			МагазинОбъект.УстановитьСсылкуНового(Справочники.Магазины.ПолучитьСсылку());
		//	Наименование в NAV совсем не такое, как было в магазинах на 7.7, поэтому такие приседания
			МагазинОбъект.Наименование  = СокрЛП(?(СкладУправляющейСистемы, ДанныеNavision.Филиал, ДанныеNavision.Наименование));
			МагазинОбъект.НомерМагазина = НомерМагазина;
			МагазинОбъект.СкладУправляющейСистемы = СкладУправляющейСистемы;

			Если МагазинОбъект.СкладУправляющейСистемы Тогда

					МагазинОбъект.Код = "00-" + Прав("000000" + ДанныеNavision.Филиал, 6);

			Иначе	МагазинОбъект.Код = "00-" + Формат(НомерМагазина, "ЧЦ=6; ЧДЦ=; ЧН=000000; ЧВН=; ЧГ=");

			КонецЕсли;

		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Наименование"
			, СокрЛП(?(СкладУправляющейСистемы
						, ДанныеNavision.Филиал
						, ДанныеNavision.Наименование
					)
			)
			, МагазинОбъект
		);
		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("КодФилиала", ДанныеNavision.Филиал, МагазинОбъект);
		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Блокирован", ДанныеNavision.Блокирован, МагазинОбъект);

		НужноОбновлять = ОбновитьАналитику ИЛИ МагазинОбъект.ЭтоНовый();

		Если НужноОбновлять Тогда

			Если МагазинОбъект.СкладПоступления.Пустая() Тогда

				Если СкладСсылка = Неопределено Тогда

						МагазинОбъект.СкладПоступления = УстановитьСкладПоДаннымNavision(ДанныеNavision, Ложь
									, ?(МагазинОбъект.ЭтоНовый(), МагазинОбъект.ПолучитьСсылкуНового(), МагазинОбъект.Ссылка));

				Иначе	МагазинОбъект.СкладПоступления = СкладСсылка;

				КонецЕсли;

			КонецЕсли;

			Если НЕ СкладУправляющейСистемы Тогда

				ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("СкладПродажи", МагазинОбъект.СкладПоступления, МагазинОбъект, Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ПравилоЦенообразования"
					, Справочники.ПравилаЦенообразования.ПолучитьПоНомеруМагазина(МагазинОбъект.НомерМагазина)
					, МагазинОбъект
				);

				МагазинОбъект.ИспользоватьОрдернуюСхемуПриПоступлении = Истина;
				МагазинОбъект.ИспользоватьОрдернуюСхемуПриПеремещении = Истина;
				МагазинОбъект.ИспользоватьПрименениеЦен               = Истина;

			КонецЕсли;

			Если НЕ ПустаяСтрока(ДанныеNavision.АдресФактический) Тогда

				УстановитьКонтактнуюИнформацию(ДанныеNavision.АдресФактический,, Справочники.ВидыКонтактнойИнформации.ФактАдресСклада, Перечисления.ТипыКонтактнойИнформации.Адрес, МагазинОбъект.КонтактнаяИнформация);

			КонецЕсли;

			Если НЕ ПустаяСтрока(ДанныеNavision.ЭлектроннаяПочта) Тогда

				УстановитьКонтактнуюИнформацию(ДанныеNavision.ЭлектроннаяПочта,, Справочники.ВидыКонтактнойИнформации.EmailСклада, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, МагазинОбъект.КонтактнаяИнформация);

			КонецЕсли;

		КонецЕсли;

		ИменаПрочее = Новый Массив;
		ИменаПрочее.Добавить("ТипСклада");
		ИменаПрочее.Добавить("Филиал");
		ИменаПрочее.Добавить("Префикс");
		ИменаПрочее.Добавить("Отдел");
		ИменаПрочее.Добавить("КодБюджета");

		СтрокаПрочее = "";

		Для каждого Имя Из ИменаПрочее Цикл

			Если НЕ ПустаяСтрока(ДанныеNavision[Имя]) Тогда

				СтрокаПрочее = СтрокаПрочее + "[" + Имя + "]=" + СокрЛП(ДанныеNavision[Имя]) + Символы.ПС;

			КонецЕсли;

		КонецЦикла;

		Если НЕ ПустаяСтрока(СтрокаПрочее) Тогда

			УстановитьКонтактнуюИнформацию(СтрокаПрочее,, Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияМагазина, Перечисления.ТипыКонтактнойИнформации.Другое, МагазинОбъект.КонтактнаяИнформация);

		КонецЕсли;

	//	---------------------------------------------------------------------------------------

		Если МагазинОбъект.Модифицированность() Тогда

			МагазинОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаИзNavision", Истина);
			МагазинОбъект.ОбменДанными.Загрузка = Истина;
			МагазинОбъект.Записать();

		КонецЕсли;

	КонецЕсли;

	Возврат МагазинОбъект.Ссылка;

КонецФункции

Функция УстановитьСкладПоДаннымNavision(ДанныеNavision, ОбновитьАналитику, МагазинСсылка = Неопределено)

	Если ЗначениеЗаполнено(ДанныеNavision.Склад) Тогда

		СкладОбъект = ДанныеNavision.Склад.ПолучитьОбъект();

	Иначе

		СкладОбъект = Справочники.Склады.СоздатьЭлемент();
		СкладОбъект.УстановитьСсылкуНового(Справочники.Склады.ПолучитьСсылку());
		СкладОбъект.УстановитьНовыйКод();
		СкладОбъект.IDN = ДанныеNavision.IDN;

	КонецЕсли;

	Если ДанныеNavision.ТипСклада = "Магазины" И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ДанныеNavision.Префикс) Тогда

			ТипСклада = Перечисления.ТипыСкладов.ТорговыйЗал;

	Иначе	ТипСклада = Перечисления.ТипыСкладов.СкладскоеПомещение;
	
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ТипСклада"	, ТипСклада, СкладОбъект);

	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Блокирован"	, ДанныеNavision.Блокирован, СкладОбъект);
	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("КодИзменения", ДанныеNavision.КодИзменения, СкладОбъект);
	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Отдел"		, ДанныеNavision.Отдел, СкладОбъект);
	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Организация"	, ДанныеNavision.Организация, СкладОбъект);

	Если СкладОбъект.ЭтоНовый() Тогда

		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Наименование", ДанныеNavision.Наименование, СкладОбъект);

	КонецЕсли;

//	Обработка реквизита "Магазин".
//	---------------------------------------------------------------------------------------
	МагазинСклада = СкладОбъект.Магазин;

	Если СкладОбъект.ТипСклада = Перечисления.ТипыСкладов.ТорговыйЗал Тогда

		Если МагазинСсылка = Неопределено Тогда

			МагазинСклада = УстановитьМагазинПоДаннымNavision(Число(ДанныеNavision.Префикс), ДанныеNavision, Истина
							, ?(СкладОбъект.ЭтоНовый(), СкладОбъект.ПолучитьСсылкуНового(), СкладОбъект.Ссылка));
		Иначе

			МагазинСклада = МагазинСсылка;

		КонецЕсли;

	Иначе

		МагазинСклада = УстановитьМагазинПоДаннымNavision(ДанныеNavision.Филиал, ДанныеNavision, Истина
						, ?(СкладОбъект.ЭтоНовый(), СкладОбъект.ПолучитьСсылкуНового(), СкладОбъект.Ссылка));

	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Магазин"	, МагазинСклада, СкладОбъект);
//	---------------------------------------------------------------------------------------

	Если НЕ ПустаяСтрока(ДанныеNavision.АдресФактический) Тогда

		УстановитьКонтактнуюИнформацию(ДанныеNavision.АдресФактический,, Справочники.ВидыКонтактнойИнформации.ФактАдресСклада, Перечисления.ТипыКонтактнойИнформации.Адрес, СкладОбъект.КонтактнаяИнформация);

	КонецЕсли;

	Если НЕ ПустаяСтрока(ДанныеNavision.ЭлектроннаяПочта) Тогда

		УстановитьКонтактнуюИнформацию(ДанныеNavision.ЭлектроннаяПочта,, Справочники.ВидыКонтактнойИнформации.EmailСклада, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, СкладОбъект.КонтактнаяИнформация);

	КонецЕсли;

	ИменаПрочее = Новый Массив;
	ИменаПрочее.Добавить("ТипСклада");
	ИменаПрочее.Добавить("Филиал");
	ИменаПрочее.Добавить("Префикс");
	ИменаПрочее.Добавить("КодБюджета");

	СтрокаПрочее = "";

	Для каждого Имя Из ИменаПрочее Цикл

		Если НЕ ПустаяСтрока(ДанныеNavision[Имя]) Тогда

			СтрокаПрочее = СтрокаПрочее + "[" + Имя + "]=" + СокрЛП(ДанныеNavision[Имя]) + Символы.ПС;

		КонецЕсли;

	КонецЦикла;

	Если НЕ ПустаяСтрока(СтрокаПрочее) Тогда

		УстановитьКонтактнуюИнформацию(СтрокаПрочее,, Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияСклада, Перечисления.ТипыКонтактнойИнформации.Другое, СкладОбъект.КонтактнаяИнформация);

	КонецЕсли;

//	---------------------------------------------------------------------------------------

	Если СкладОбъект.Модифицированность() Тогда

		СкладОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаИзNavision", Истина);
		СкладОбъект.ОбменДанными.Загрузка = Истина;
		СкладОбъект.Записать();

	КонецЕсли;

	Возврат СкладОбъект.Ссылка;

КонецФункции

//	LNK 01.05.2017 13:27:48
Функция УстановитьОрганизациюПоДаннымNavision(ДанныеNavision, ОбновитьАналитику)

	Если ЗначениеЗаполнено(ДанныеNavision.Организация) Тогда

		ОрганизацияОбъект = ДанныеNavision.Организация.ПолучитьОбъект();

	Иначе

		ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
		ОрганизацияОбъект.УстановитьСсылкуНового(Справочники.Организации.ПолучитьСсылку());
		ОрганизацияОбъект.УстановитьНовыйКод();
		ОрганизацияОбъект.IDN = ДанныеNavision.IDN;

	КонецЕсли;

//	LNK 02.05.2017 08:42:54
//	Некторые организации в NAV ещё не оформлены... или всегда могут быть не до конца оформлены.
//	Бардак'c, однако. Поэтому ключевые реквизиты всякий раз переписываем... а что делать?
//	Если что изменится, нужно текст от этой строки и до записи менеджера записи перенести в блок создания элемента.
	ОрганизацияОбъект.КодПоЕДРПОУ = ДанныеNavision.КодПоЕДРПОУ;
	ОрганизацияОбъект.ВестиУчетДенежныхСредствПоОбособленнымПодразделениям = Истина;
	ОрганизацияОбъект.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	ОрганизацияОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо[?(ДанныеNavision.ПлательщикНДС, "ЮрЛицо", "ИндивидуальныйПредприниматель")];

	МенеджерЗаписи = РегистрыСведений.СистемыНалогообложенияОрганизаций.СоздатьМенеджерЗаписи();

	Если ОрганизацияОбъект.ЭтоНовый() Тогда

		МенеджерЗаписи.Период = НачалоМесяца(ТекущаяДатаСеанса());
		МенеджерЗаписи.Организация = ОрганизацияОбъект.ПолучитьСсылкуНового();

	Иначе

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаРегистра.Период КАК Период
		|ИЗ
		|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(, Организация = &Организация) КАК ТаблицаРегистра"
		);
		Запрос.УстановитьПараметр("Организация", ОрганизацияОбъект.Ссылка);
		
		ПериодВыборка = Запрос.Выполнить().Выбрать();
		ПериодВыборка.Следующий();

		МенеджерЗаписи.Период = ПериодВыборка.Период;
		МенеджерЗаписи.Организация = ОрганизацияОбъект.Ссылка;
		МенеджерЗаписи.Прочитать();

	КонецЕсли;

	МенеджерЗаписи.СистемаНалогообложения = Перечисления.СистемыНалогообложения[?(ДанныеNavision.ПлательщикНДС, "НалогНаПрибыльИНДС", "ЕдиныйНалог")];
	МенеджерЗаписи.ИННПлательщикаНДС = ДанныеNavision.ИННПлательщикаНДС;
	МенеджерЗаписи.НомерСвидетельстваПлательщикаНДС = ДанныеNavision.НомерСвидетельстваПлательщикаНДС;

	МенеджерЗаписи.Записать(Истина);

	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Блокирован", ДанныеNavision.Блокирован, ОрганизацияОбъект);
	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Наименование", СокрЛП(ДанныеNavision.Наименование), ОрганизацияОбъект);
	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("НаименованиеПолное", СокрЛП(ДанныеNavision.НаименованиеУкраина), ОрганизацияОбъект);
	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("НаименованиеСокращенное", СокрЛП(ДанныеNavision.НаименованиеУкраинаДляНалоговой), ОрганизацияОбъект);

	Если НЕ ПустаяСтрока(ДанныеNavision.АдресФактический) Тогда

		УстановитьКонтактнуюИнформацию(ДанныеNavision.АдресФактический,, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, Перечисления.ТипыКонтактнойИнформации.Адрес, ОрганизацияОбъект.КонтактнаяИнформация);

	КонецЕсли;

	Если НЕ ПустаяСтрока(ДанныеNavision.АдресЮридический) Тогда

		УстановитьКонтактнуюИнформацию(ДанныеNavision.АдресЮридический,, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Перечисления.ТипыКонтактнойИнформации.Адрес, ОрганизацияОбъект.КонтактнаяИнформация);

	КонецЕсли;

	Если НЕ ПустаяСтрока(ДанныеNavision.Телефоны) Тогда

		УстановитьКонтактнуюИнформацию(ДанныеNavision.Телефоны,, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, Перечисления.ТипыКонтактнойИнформации.Телефон, ОрганизацияОбъект.КонтактнаяИнформация);

	КонецЕсли;

	Если ОрганизацияОбъект.Модифицированность() Тогда

		ОрганизацияОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаИзNavision", Истина);
		ОрганизацияОбъект.ОбменДанными.Загрузка = Истина;
		ОрганизацияОбъект.Записать();

	КонецЕсли;

	Возврат ОрганизацияОбъект.Ссылка;

КонецФункции

//	LNK 01.05.2017 13:27:52
Процедура УстановитьОрганизациюМагазиновПоДаннымСкладов()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК Магазин,
	|	ТаблицаСправочник.КассаМагазина КАК КассаМагазина,
	|	ТаблицаСправочник.Организация КАК Организация,
	|	ЕСТЬNULL(ТаблицаСправочник.СкладПоступления.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ОрганизацияНужна,
	|	ТаблицаСправочник.НомерМагазина КАК НомерМагазина
	|ИЗ
	|	Справочник.Магазины КАК ТаблицаСправочник
	|ГДЕ
	|	НЕ ТаблицаСправочник.Блокирован
	|	И НЕ ТаблицаСправочник.ПометкаУдаления
	|	И ТаблицаСправочник.ВведенВЭксплуатацию
	|	И (НЕ ЕСТЬNULL(ТаблицаСправочник.СкладПоступления.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				И НЕ ТаблицаСправочник.Организация = ТаблицаСправочник.СкладПоступления.Организация
	|			ИЛИ ТаблицаСправочник.КассаМагазина = ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерМагазина"
	);

	МагазинВыборка = Запрос.Выполнить().Выбрать();

	Пока МагазинВыборка.Следующий() Цикл

		Если НЕ МагазинВыборка.Организация = МагазинВыборка.ОрганизацияНужна И НЕ МагазинВыборка.ОрганизацияНужна.Пустая()
			ИЛИ МагазинВыборка.КассаМагазина.Пустая() Тогда

			МагазинОбъект = МагазинВыборка.Магазин.ПолучитьОбъект();

			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Организация", МагазинВыборка.ОрганизацияНужна, МагазинОбъект);

			Если МагазинОбъект.КассаМагазина.Пустая() Тогда

				Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Кассы.Ссылка Касса,
				|	Кассы.ПометкаУдаления КАК ПометкаУдаления
				|ИЗ
				|	Справочник.Кассы КАК Кассы
				|ГДЕ
				|	Кассы.Магазин = &Магазин
				|	И Кассы.Владелец = &Организация
				|
				|УПОРЯДОЧИТЬ ПО
				|	ПометкаУдаления УБЫВ"
				);
				Запрос.УстановитьПараметр("Магазин", МагазинОбъект.Ссылка);
				Запрос.УстановитьПараметр("Организация", МагазинОбъект.Организация);
				
				КассыВыборка = Запрос.Выполнить().Выбрать();
				
				Если КассыВыборка.Следующий() Тогда

					МагазинОбъект.КассаМагазина = КассыВыборка.Касса;

				Иначе

					КассаОбъект = Справочники.Кассы.СоздатьЭлемент();
					КассаОбъект.Наименование = "Касса ГЛ. «" + СокрЛП(МагазинОбъект.Наименование) + "»";
					КассаОбъект.Владелец = МагазинОбъект.Организация;
					КассаОбъект.Магазин  = МагазинОбъект.Ссылка;

					КассаОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаИзNavision", Истина);
					КассаОбъект.ОбменДанными.Загрузка = Истина;
					КассаОбъект.Записать();

					МагазинОбъект.КассаМагазина = КассаОбъект.Ссылка;

				КонецЕсли;

			КонецЕсли;

			Если МагазинОбъект.Модифицированность() Тогда

				МагазинОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаИзNavision", Истина);
				МагазинОбъект.ОбменДанными.Загрузка = Истина;
				МагазинОбъект.Записать();

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ТаблицаКодовПоОстаткамNavision()

	ТекстNavision = ВнешниеИсточники.УточнитьТекстЗапроса(
	"SELECT
	|	  rest.IDN
	|	, cast(cast(tov.[timestamp] as bigint) as varchar(40)) AS КодИзменения
	|	FROM(
	|	SELECT distinct
	|			 os.[Товар Но_] AS IDN
	|	  FROM [Euro2009].[dbo].[Европродукт 2009$Остаток 1С] os WITH(readuncommitted)
	|	  WHERE os.[Товар Но_] <> '' AND (os.Остаток <> 0 OR os.[Резерв ИМ] <> 0)
	|	) rest
	|LEFT JOIN [Euro2009].[dbo].[Европродукт 2009$Товар] tov WITH(readuncommitted)
	|	ON (rest.IDN = tov.[Но_])
	|	WHERE NOT tov.[Но_] IS NULL
	|ORDER BY rest.IDN
	|"
	, Перечисления.ВнешниеИсточники.Navision
	);

	Возврат ПолучитьДанныеОтNavision(ТекстNavision,,, Истина);

КонецФункции

Процедура ПроверитьНоменклатуруПоОстаткамNavision(ВсеТовары = Ложь)	Экспорт
	
	СсылкиОбработаны = Новый Массив;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаNavision.IDN,
	|	ТаблицаNavision.КодИзменения
	|ПОМЕСТИТЬ ДанныеNavision
	|ИЗ
	|	&ТаблицаNavision КАК ТаблицаNavision
	|"
	);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаNavision" , ТаблицаКодовПоОстаткамNavision());
	Запрос.УстановитьПараметр("ВсеТовары", ВсеТовары);	//	LNK 31.07.2023 13:21:34

	Запрос.Выполнить();

	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	0 КАК НомерСтроки,
	|	ДанныеNavision.IDN КАК IDN,
	|	ЕСТЬNULL(ТаблицаТовары.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеNavision.IDN КАК IDN,
	|		ДанныеNavision.КодИзменения КАК КодИзменения
	|	ИЗ
	|		ДанныеNavision КАК ДанныеNavision
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Номенклатура.IDN КАК IDN
	|			ИЗ
	|				Справочник.Номенклатура КАК Номенклатура
	|			ГДЕ
	|				Номенклатура.Ссылка В(&СсылкиОбработаны)) КАК Фильтр
	|			ПО ДанныеNavision.IDN = Фильтр.IDN
	|	ГДЕ
	|		Фильтр.IDN ЕСТЬ NULL ) КАК ДанныеNavision
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаТовары
	|		ПО ДанныеNavision.IDN = ТаблицаТовары.IDN
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВсеТовары = ИСТИНА ИЛИ ТаблицаТовары.КодИзменения ЕСТЬ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ ДанныеNavision.КодИзменения = ТаблицаТовары.КодИзменения
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	IDN"
	;

	Пока Истина Цикл

		Запрос.УстановитьПараметр("СсылкиОбработаны", СсылкиОбработаны);
		ТаблицаЗначений = Запрос.Выполнить().Выгрузить();

		Если ТаблицаЗначений.Количество() = 0 Тогда

			Прервать;

		Иначе

			НомерСтроки = 0;

			Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

				НомерСтроки = НомерСтроки + 1;
				СтрокаТаблицы.НомерСтроки = НомерСтроки;

			КонецЦикла;

			ТоварыПодготовленные = Новый ПостроительЗапроса;
			ТоварыПодготовленные.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаЗначений);
			ТоварыПодготовленные.Выполнить();

			ПараметрыВыборки = Новый Структура(
				"ВыборкаДанных,
				| СписокКодов"
				, ТоварыПодготовленные.Результат.Выбрать()
				, ПолучитьСтрокуIDNТоваров(ТаблицаЗначений.ВыгрузитьКолонку("IDN")));

			Если НЕ ПустаяСтрока(ПараметрыВыборки.СписокКодов) Тогда

				УстановитьНоменклатуруВТаблицеПодготовки(ТаблицаЗначений, Истина, СсылкиОбработаны, ПараметрыВыборки);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Запрос.Текст = "УНИЧТОЖИТЬ ДанныеNavision";
	Запрос.Выполнить();

КонецПроцедуры

Процедура ПроверитьНоменклатуруПоОстаткамНаСкладах()	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 800
	|	ТоварыНаСкладах.Номенклатура.IDN КАК IDN,
	|	ТоварыНаСкладах.Номенклатура
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладах
	|ГДЕ
	|	НЕ ТоварыНаСкладах.Номенклатура.IDN В (&СписокОтработанныхКодов)
	|	И НЕ ТоварыНаСкладах.Номенклатура.IDN = """"
//	|	И ТоварыНаСкладах.Номенклатура.IDN >= &IDN
	|
	|УПОРЯДОЧИТЬ ПО
	|	IDN"
	);
	Запрос.УстановитьПараметр("СписокОтработанныхКодов", Новый Массив);
//	Запрос.УстановитьПараметр("IDN", "6037709");	//	LNK 01.08.2023 07:36:38 - комментарий
	
	Пока Истина Цикл

		Попытка

			СписокКодов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("IDN");

			Если СписокКодов.Количество() = 0 Тогда
				
				Прервать;

			Иначе

			//	Обновим существующие товарные позиции или создадим новые, если так случилось.
				УстановитьНоменклатуруВТаблицеПодготовки(СписокКодов, Истина, Новый Массив);

				Для каждого СтрокаТаблицы Из СписокКодов Цикл

					Запрос.Параметры.СписокОтработанныхКодов.Добавить(СтрокаТаблицы.IDN);

				КонецЦикла;

				а = 22;	// отладочная

			КонецЕсли;

		Исключение

			ТекстОшибки = ОписаниеОшибки();

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьСтрокуIDNТоваров(МассивКодов, Разделитель = "'")	Экспорт

	СтрокаКодов = "";

	Для каждого IDN Из МассивКодов Цикл

		Если НЕ ПустаяСтрока(IDN) Тогда

			СтрокаКодов = СтрокаКодов + ?(ПустаяСтрока(СтрокаКодов), "", ",") + Разделитель + СокрЛП(IDN) + Разделитель;

		КонецЕсли;

	КонецЦикла;

	Возврат СтрокаКодов;

КонецФункции // ПолучитьСтрокуКодовNavision()

//	LNK 27.11.2018 13:53:45
Процедура ПроверитьТипыПоступленийНоменклатуры()	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаNavision.IDNСКЛАДА КАК IDN,
	|	ТаблицаNavision.ПРОИЗВОДИТЕЛЬКОД КАК ПРОИЗВОДИТЕЛЬКОД,
	|	ТаблицаNavision.ТИППОСТАВКИ КАК ТИППОСТАВКИ,
	|	ТаблицаNavision.КОДПОСТАВЩИКА КАК КОДПОСТАВЩИКА
	|ПОМЕСТИТЬ ТаблицаNavision
	|ИЗ
	|	&ТаблицаNavision КАК ТаблицаNavision
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.Магазин КАК Магазин,
	|	ТаблицаДанных.Производитель КАК Производитель,
	|	ТаблицаДанных.Тип КАК Тип,
	|	ТаблицаДанных.Поставщик КАК Поставщик,
	|	МАКСИМУМ(ТаблицаДанных.Новый) КАК Новый,
	|	МАКСИМУМ(ТаблицаДанных.Старый) КАК Старый
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаСклады.Магазин КАК Магазин,
	|		ТаблицаПроизводители.Ссылка КАК Производитель,
	|		ТаблицаNavision.ТИППОСТАВКИ КАК Тип,
	|		ТаблицаNavision.КОДПОСТАВЩИКА КАК Поставщик,
	|		ИСТИНА КАК Новый,
	|		ЛОЖЬ КАК Старый
	|	ИЗ
	|		ТаблицаNavision КАК ТаблицаNavision
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаСклады
	|			ПО ТаблицаNavision.IDN = ТаблицаСклады.IDN
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаПроизводители
	|			ПО ТаблицаNavision.ПРОИЗВОДИТЕЛЬКОД = ТаблицаПроизводители.IDN
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТекущая.Магазин,
	|		ТаблицаТекущая.Производитель,
	|		ТаблицаТекущая.Тип,
	|		ТаблицаТекущая.Поставщик,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		РегистрСведений.ТипыПоступленийНоменклатуры КАК ТаблицаТекущая) КАК ТаблицаДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДанных.Магазин,
	|	ТаблицаДанных.Производитель,
	|	ТаблицаДанных.Тип,
	|	ТаблицаДанных.Поставщик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаNavision
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.Магазин КАК Магазин,
	|	Источник.Производитель КАК Производитель,
	|	Источник.Тип КАК Тип,
	|	Источник.Поставщик КАК Поставщик
	|ИЗ
	|	Источник КАК Источник
	|ГДЕ
	|	НЕ Источник.Новый = Источник.Старый
	|	И Источник.Старый
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.Магазин КАК Магазин,
	|	Источник.Производитель КАК Производитель,
	|	Источник.Тип КАК Тип,
	|	Источник.Поставщик КАК Поставщик
	|ИЗ
	|	Источник КАК Источник
	|ГДЕ
	|	НЕ Источник.Новый = Источник.Старый
	|	И Источник.Новый
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	);
	Запрос.УстановитьПараметр("ТаблицаNavision", ПолучитьДанныеОтNavision("ТипыПоступленийНоменклатуры"));
	
	Результаты = Запрос.ВыполнитьПакет();

	НаборЗаписей = РегистрыСведений.ТипыПоступленийНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;

//	Очистка неактуальных записей
	Выборка = Результаты[3].Выбрать();
	
	Пока Выборка.Следующий() Цикл

		НаборЗаписей.Очистить();
		НаборЗаписей.ОбменДанными.Получатели.Очистить();

		НаборЗаписей.Отбор.Магазин.Установить(Выборка.Магазин);
		НаборЗаписей.Отбор.Производитель.Установить(Выборка.Производитель);

		НаборЗаписей.Записать();

	КонецЦикла;

//	Добавление новый записей
	Выборка = Результаты[4].Выбрать();
	
	Пока Выборка.Следующий() Цикл

		НаборЗаписей.Очистить();
		НаборЗаписей.ОбменДанными.Получатели.Очистить();

		НаборЗаписей.Отбор.Магазин.Установить(Выборка.Магазин);
		НаборЗаписей.Отбор.Производитель.Установить(Выборка.Производитель);

		ЗаписьНабора = НаборЗаписей.Добавить();

		ЗаписьНабора.Магазин       = Выборка.Магазин;
		ЗаписьНабора.Производитель = Выборка.Производитель;

		ЗаписьНабора.Тип           = Выборка.Тип;
		ЗаписьНабора.Поставщик     = Выборка.Поставщик;

		ЗаписьНабора.ДатаИзменения = ТекущаяДата();

		НаборЗаписей.Записать();

	КонецЦикла;

КонецПроцедуры
	
#КонецОбласти

#Область УстановкаЦенНоменклатуры

//	Контроль всех имеющихся цен. Запускать только осознанно!
//
Процедура АктуализироватьЦеныНоменклатуры()	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСправочник.ПравилоЦенообразования.ВидЦен КАК ВидЦен
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	Справочник.Магазины КАК ТаблицаСправочник
	|ГДЕ
	|	НЕ ТаблицаСправочник.Блокирован
	|	И НЕ ТаблицаСправочник.ПометкаУдаления
	|	И НЕ ТаблицаСправочник.СкладУправляющейСистемы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	ТаблицаВедущая.Номенклатура КАК Номенклатура,
	|	ТаблицаВедущая.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ТаблицаВедущая.Номенклатура.IDN КАК IDN,
	|	ТаблицаВедущая.Номенклатура.ВидНоменклатуры.IDN КАК IDNВида
	|ИЗ
	|	(ВЫБРАТЬ
	|		Фильтр.ВидЦен КАК ВидЦен,
	|		ТаблицаСправочник.Ссылка КАК Номенклатура
	|	ИЗ
	|		Справочник.Номенклатура КАК ТаблицаСправочник,
	|		Фильтр КАК Фильтр
	|	ГДЕ
	|		НЕ ТаблицаСправочник.ЭтоГруппа
	|		И НЕ ТаблицаСправочник.Ссылка В (&СсылкиОбработаны)) КАК ТаблицаВедущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ТаблицаЦены
	|		ПО ТаблицаВедущая.ВидЦен = ТаблицаЦены.ВидЦены
	|			И ТаблицаВедущая.Номенклатура = ТаблицаЦены.Номенклатура
	|ГДЕ
	|	(ТаблицаЦены.ВидЦены ЕСТЬ NULL 
	|			ИЛИ НАЧАЛОПЕРИОДА(ТаблицаЦены.Период, ДЕНЬ) < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ДЕНЬ, -1))"
	);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());

	Параметры = Новый Структура(
		"ОбязательнаяУстановка, СсылкиОбработаны, РежимЗаписи"
		, Ложь, Новый Массив, РежимЗаписиДокумента.Проведение);
	ДеревоДокументов = ДеревоДокументовОформить();

	Пока Истина Цикл

		Запрос.УстановитьПараметр("СсылкиОбработаны", Параметры.СсылкиОбработаны);
		
		РезультатЗапроса = Запрос.Выполнить();

		Если РезультатЗапроса.Пустой() Тогда

			Прервать;

		Иначе

			ДеревоДокументов.Строки.Очистить();
			УстановкаЦенНоменклатурыФормирование(РезультатЗапроса.Выбрать(), Параметры, ДеревоДокументов);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура УстановитьЦеныНоменклатурыПоВсемТоварам()	Экспорт

	ДеревоДокументов = ДеревоДокументовОформить();
	СсылкиОбработаны = Новый Массив;

//	Устраиваем цикл небольшими выборками, так как ну очень долго получаем данные от КСУ.
//	---------------------------------------------------------------------------------------

	Пока Истина Цикл

		ДеревоДокументов.Строки.Очистить();

		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЦеныНоменклатуры.ВидЦены КАК ВидЦены
		|ПОМЕСТИТЬ ВидыЦен
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатуры
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатуры.ВидЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2000
		|	ТаблицаСправочник.Ссылка КАК Номенклатура,
		|	ТаблицаСправочник.ВидНоменклатуры,
		|	ТаблицаСправочник.IDN КАК IDN,
		|	ТаблицаСправочник.ВидНоменклатуры.IDN КАК IDNВида
		|ИЗ
		|	Справочник.Номенклатура КАК ТаблицаСправочник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				,
		|				ВидЦены В
		|					(ВЫБРАТЬ
		|						ВидыЦен.ВидЦены
		|					ИЗ
		|						ВидыЦен)) КАК ЦеныНоменклатуры
		|		ПО ТаблицаСправочник.Ссылка = ЦеныНоменклатуры.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыЦен КАК ВидыЦен
		|		ПО (ВидыЦен.ВидЦены = ЦеныНоменклатуры.ВидЦены)
		|ГДЕ
		|	НЕ ТаблицаСправочник.ЭтоГруппа
		|	И НЕ ТаблицаСправочник.IDN = """"
		|	И ЦеныНоменклатуры.Цена ЕСТЬ NULL 
		|	И НЕ ТаблицаСправочник.Ссылка В (&СсылкиОбработаны)
		|
		|УПОРЯДОЧИТЬ ПО
		|	IDNВида,
		|	IDN"
		);
		Запрос.УстановитьПараметр("СсылкиОбработаны", СсылкиОбработаны);

		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда

			Прервать;

		КонецЕсли;

		Параметры = Новый Структура(
			"ОбязательнаяУстановка, СсылкиОбработаны, РежимЗаписи"
			, Ложь, СсылкиОбработаны, РежимЗаписиДокумента.Проведение);
		УстановкаЦенНоменклатурыФормирование(Результат.Выбрать(), Параметры, ДеревоДокументов);

	КонецЦикла;

КонецПроцедуры

Процедура УстановитьЦеныНоменклатурыПоСтрокеКодов(СтрокаКодовIDN)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.IDN,
	|	ТаблицаСправочник.Ссылка КАК Номенклатура,
	|	ТаблицаСправочник.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ТаблицаСправочник.ВидНоменклатуры.IDN КАК IDNВида
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.IDN В(&СписокКодовIDN)"
	);
	Запрос.УстановитьПараметр("СписокКодовIDN", ОбщегоНазначенияКлиентСервер.lx_FillValueList(, СтрокаКодовIDN,,,, Истина));

	Параметры = Новый Структура(
		"ОбязательнаяУстановка, СсылкиОбработаны, РежимЗаписи"
		, Ложь, Новый Массив, РежимЗаписиДокумента.Проведение);
	ДеревоДокументов = ДеревоДокументовОформить();
	
	ДеревоДокументов.Строки.Очистить();
	УстановкаЦенНоменклатурыФормирование(Запрос.Выполнить().Выбрать(), Параметры, ДеревоДокументов);

КонецПроцедуры

Процедура УстановитьЦеныНоменклатурыПоМагазинам(НомераМагазинов)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Склады.Ссылка КАК Склад
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО Магазины.Ссылка = Склады.Магазин
	|ГДЕ
	|	Магазины.НомерМагазина В(&СписокНомеров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 500
	|	ТоварыНаСкладах.Номенклатура.IDN КАК IDN,
	|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладах.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ТоварыНаСкладах.Номенклатура.ВидНоменклатуры.IDN КАК ВидНоменклатурыIDN
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			НЕ Номенклатура В (&СсылкиОбработаны)
	|				И Склад В
	|					(ВЫБРАТЬ
	|						Фильтр.Склад
	|					ИЗ
	|						Фильтр)) КАК ТоварыНаСкладах
	|
	|УПОРЯДОЧИТЬ ПО
	|	IDN"
	);
	Запрос.УстановитьПараметр("СписокНомеров", ОбщегоНазначенияКлиентСервер.lx_FillValueList(, НомераМагазинов,,,, Истина, Новый ОписаниеТипов("Число")));

	Параметры = Новый Структура(
		"ОбязательнаяУстановка, СсылкиОбработаны, РежимЗаписи"
		, Ложь, Новый Массив, РежимЗаписиДокумента.Проведение);
	ДеревоДокументов = ДеревоДокументовОформить();

	Пока Истина Цикл

		Запрос.УстановитьПараметр("СсылкиОбработаны", Параметры.СсылкиОбработаны);
		
		РезультатЗапроса = Запрос.Выполнить();

		Если РезультатЗапроса.Пустой() Тогда

			Прервать;

		Иначе

			ДеревоДокументов.Строки.Очистить();
			УстановкаЦенНоменклатурыФормирование(РезультатЗапроса.Выбрать(), Параметры, ДеревоДокументов);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура УстановитьЦеныНоменклатурыПоОстаткамNavision()	Экспорт

	ДеревоДокументов = ДеревоДокументовОформить();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаNavision.IDN,
	|	ТаблицаNavision.КодИзменения
	|ПОМЕСТИТЬ ДанныеNavision
	|ИЗ
	|	&ТаблицаNavision КАК ТаблицаNavision
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 2000
	|	ТаблицаТовары.Ссылка КАК Номенклатура,
	|	ТаблицаТовары.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ДанныеNavision.IDN КАК IDN,
	|	ТаблицаТовары.ВидНоменклатуры.IDN КАК IDNВида
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеNavision.IDN КАК IDN,
	|		ДанныеNavision.КодИзменения КАК КодИзменения
	|	ИЗ
	|		ДанныеNavision КАК ДанныеNavision
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Номенклатура.IDN КАК IDN
	|			ИЗ
	|				Справочник.Номенклатура КАК Номенклатура
	|			ГДЕ
	|				Номенклатура.Ссылка В(&СсылкиОбработаны)) КАК Фильтр
	|			ПО ДанныеNavision.IDN = Фильтр.IDN
	|	ГДЕ
	|		Фильтр.IDN ЕСТЬ NULL ) КАК ДанныеNavision
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаТовары
	|		ПО ДанныеNavision.IDN = ТаблицаТовары.IDN
	|
	|УПОРЯДОЧИТЬ ПО
	|	IDN"
	);
	Запрос.УстановитьПараметр("ТаблицаNavision" , ТаблицаКодовПоОстаткамNavision());

	Параметры = Новый Структура(
		"ОбязательнаяУстановка, СсылкиОбработаны, РежимЗаписи"
		, Ложь, Новый Массив, РежимЗаписиДокумента.Проведение);

	Пока Истина Цикл

		ДеревоДокументов.Строки.Очистить();

		Запрос.УстановитьПараметр("СсылкиОбработаны", Параметры.СсылкиОбработаны);

		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда

			Прервать;

		КонецЕсли;

		УстановкаЦенНоменклатурыФормирование(Результат.Выбрать(), Параметры, ДеревоДокументов);

	КонецЦикла;

КонецПроцедуры

Процедура УстановкаЦенНоменклатурыПоПеремещениям()	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабличнаяЧасть.Номенклатура.IDN КАК IDN,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ТабличнаяЧасть.Номенклатура.ВидНоменклатуры.IDN КАК IDNВида
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.УзелСоздания = ЗНАЧЕНИЕ(Справочник.СтруктураУзлов.КСУ_Navision)"
	);

	Параметры = Новый Структура(
		"ОбязательнаяУстановка, СсылкиОбработаны, РежимЗаписи"
		, Ложь, Новый Массив, РежимЗаписиДокумента.Проведение);
	ДеревоДокументов = ДеревоДокументовОформить();
	
	ДеревоДокументов.Строки.Очистить();
	УстановкаЦенНоменклатурыФормирование(Запрос.Выполнить().Выбрать(), Параметры, ДеревоДокументов);

КонецПроцедуры

Процедура УстановитьЦеныПоВидуНоменклатуры(ВидНоменклатуры)	Экспорт

	ДеревоДокументов = ДеревоДокументовОформить();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 800
	|	ТаблицаСправочник.IDN КАК IDN,
	|	ТаблицаСправочник.Ссылка КАК Номенклатура,
	|	ТаблицаСправочник.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ТаблицаСправочник.ВидНоменклатуры.IDN КАК IDNВида
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.ВидНоменклатуры = &ВидНоменклатуры
	|	И НЕ ТаблицаСправочник.Ссылка В (&СсылкиОбработаны)
	|
	|УПОРЯДОЧИТЬ ПО
	|	IDN"
	);
	Запрос.УстановитьПараметр("ВидНоменклатуры" , ВидНоменклатуры);

	Параметры = Новый Структура(
		"ОбязательнаяУстановка, СсылкиОбработаны, РежимЗаписи"
		, Ложь, Новый Массив, РежимЗаписиДокумента.Проведение);

	Пока Истина Цикл

		ДеревоДокументов.Строки.Очистить();

		Запрос.УстановитьПараметр("СсылкиОбработаны", Параметры.СсылкиОбработаны);

		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда

			Прервать;

		КонецЕсли;

		УстановкаЦенНоменклатурыФормирование(Результат.Выбрать(), Параметры, ДеревоДокументов);

	КонецЦикла;

КонецПроцедуры

//	Основной метод формирования документов установки цен.
Функция УстановкаЦенНоменклатурыФормирование(ТоварыВыборка, Параметры, ДеревоДокументов = Неопределено)	Экспорт

	ПроверитьПараметрыУстановкиЦен(ДеревоДокументов, Параметры);
	ПредставлениеДаты = Формат(Параметры.ПериодСреза, "ДФ=yyyyMMdd");
	СписокДокументов  = Новый Массив;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	Пока ТоварыВыборка.Следующий() Цикл

		Параметры.СсылкиОбработаны.Добавить(ТоварыВыборка.Номенклатура);

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаNavision.КОДСКЛАДА КАК IDN,
		|	ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ТаблицаNavision.КОДЕДИНИЦЫИЗМЕРЕНИЯ КАК КодУпаковки,
		|	ТаблицаNavision.ДатаНачала КАК ДатаНачала,
		|	ТаблицаNavision.Акция КАК Акция,
		|	ТаблицаNavision.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ТаблицаNavision.КодВалюты КАК КодВалюты,
		|	ТаблицаNavision.ЦенаЕдиницы КАК Цена,
		|	ВЫБОР
		|		КОГДА ТаблицаNavision.НДСБИЗНЕСГРУППАЦЕНЫ = ""НДС20""
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|		КОГДА ТаблицаNavision.НДСБИЗНЕСГРУППАЦЕНЫ = ""НДС14""
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
		|		КОГДА ТаблицаNavision.НДСБИЗНЕСГРУППАЦЕНЫ = ""НДС7""
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
		|		ИНАЧЕ ТаблицаNavision.НДСБИЗНЕСГРУППАЦЕНЫ
		|	КОНЕЦ КАК СтавкаНДС
		|ПОМЕСТИТЬ ТаблицаNavision
		|ИЗ
		|	&ТаблицаNavision КАК ТаблицаNavision
		|ГДЕ
		|	НЕ ТаблицаNavision.ЦенаЕдиницы = 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	IDN,
		|	КодУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.IDN КАК IDN,
		|	Данные.Номенклатура КАК Номенклатура,
		|	Данные.КодУпаковки КАК КодУпаковки,
		|	Данные.ДатаНачала КАК ДатаНачала,
		|	Данные.Акция КАК Акция,
		|	Данные.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	Данные.КодВалюты КАК КодВалюты,
		|	Данные.Цена КАК Цена,
		|	Данные.СтавкаНДС КАК СтавкаНДС,
		|	Данные.Магазин КАК Магазин,
		|	Данные.ВидЦены КАК ВидЦены,
		|	Данные.Упаковка КАК Упаковка,
		|	Данные.КлючСортировки КАК КлючСортировки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаNavision.IDN КАК IDN,
		|		ТаблицаNavision.Номенклатура КАК Номенклатура,
		|		ТаблицаNavision.КодУпаковки КАК КодУпаковки,
		|		ВЫБОР
		|			КОГДА ТаблицаNavision.ДатаНачала <= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				ТОГДА &ТекущаяДата
		|			ИНАЧЕ КОНЕЦПЕРИОДА(ТаблицаNavision.ДатаНачала, ДЕНЬ)
		|		КОНЕЦ КАК ДатаНачала,
		|		ТаблицаNavision.Акция КАК Акция,
		|		ТаблицаNavision.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|		ТаблицаNavision.КодВалюты КАК КодВалюты,
		|		ТаблицаNavision.Цена * ВЫБОР
		|			КОГДА ТаблицаNavision.ЦенаВключаетНДС = ЛОЖЬ
		|				ТОГДА ВЫБОР
		|						КОГДА ТаблицаNavision.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|							ТОГДА 1.2
		|						КОГДА ТаблицаNavision.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
		|							ТОГДА 1.14
		|						КОГДА ТаблицаNavision.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
		|							ТОГДА 1.07
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК Цена,
		|		ТаблицаNavision.СтавкаНДС КАК СтавкаНДС,
		|		ТаблицаСклады.Магазин КАК Магазин,
		|		ТаблицаСклады.Магазин.ПравилоЦенообразования.ВидЦен КАК ВидЦены,
		|		ЕСТЬNULL(Упаковки.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КАК Упаковка,
		|		ТаблицаNavision.Номенклатура.Наименование КАК КлючСортировки
		|	ИЗ
		|		ТаблицаNavision КАК ТаблицаNavision
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				МАКСИМУМ(УпаковкиНоменклатуры.Ссылка) КАК Упаковка,
		|				ТаблицаNavision.КодУпаковки КАК КодУпаковки
		|			ИЗ
		|				ТаблицаNavision КАК ТаблицаNavision
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|					ПО ТаблицаNavision.Номенклатура = УпаковкиНоменклатуры.Владелец
		|						И ТаблицаNavision.КодУпаковки = УпаковкиНоменклатуры.Наименование
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ТаблицаNavision.КодУпаковки) КАК Упаковки
		|			ПО ТаблицаNavision.КодУпаковки = Упаковки.КодУпаковки
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаСклады
		|			ПО ТаблицаNavision.IDN = ТаблицаСклады.IDN
		|				И (ВЫБОР
		|					КОГДА &УказанСписокВидовЦен = ИСТИНА
		|						ТОГДА ТаблицаСклады.Магазин.ПравилоЦенообразования.ВидЦен В (&СписокВидовЦен)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ)
		|	ГДЕ
		|		ТаблицаСклады.Ссылка ЕСТЬ НЕ NULL ) КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), ) КАК ЦеныНоменклатуры
		|		ПО (НЕ &ОбязательнаяУстановка = ИСТИНА)
		|			И Данные.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|			И (ВЫБОР
		|				КОГДА Данные.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА Данные.Упаковка = ЦеныНоменклатуры.Упаковка
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|			И (ЦеныНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|			И Данные.ВидЦены = ЦеныНоменклатуры.ВидЦены
		|ГДЕ
		|	НЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) = (ВЫРАЗИТЬ(Данные.Цена КАК ЧИСЛО(15, 2)))
		|
		|УПОРЯДОЧИТЬ ПО
		|	КлючСортировки"
		);
		Запрос.УстановитьПараметр("ТаблицаNavision", ПолучитьДанныеОтNavision("select * from dbo.PL_GetItemPriceRec('" + СокрЛП(ТоварыВыборка.IDN) + "', '" + ПредставлениеДаты + "')",,, Истина));
		Запрос.УстановитьПараметр("Номенклатура"   , ТоварыВыборка.Номенклатура);
		Запрос.УстановитьПараметр("ТекущаяДата"    , Параметры.ПериодСреза);
		Запрос.УстановитьПараметр("СписокВидовЦен" , Параметры.СписокВидовЦен);
		Запрос.УстановитьПараметр("УказанСписокВидовЦен" , НЕ Параметры.СписокВидовЦен.Количество() = 0);
		Запрос.УстановитьПараметр("ОбязательнаяУстановка", Параметры.ОбязательнаяУстановка);

		ДеталиВыборка = Запрос.Выполнить().Выбрать();

		Пока ДеталиВыборка.Следующий() Цикл

			ВеткаМагазин = ДеревоДокументов.Строки.Найти(ДеталиВыборка.Магазин, "Значение");

			Если ВеткаМагазин = Неопределено Тогда

				ВеткаМагазин = ДеревоДокументов.Строки.Добавить();
				ВеткаМагазин.Значение = ДеталиВыборка.Магазин;
				ВеткаМагазин.ВидЦены  = ДеталиВыборка.ВидЦены;

			КонецЕсли;

			ВеткаВидНоменклатуры = ВеткаМагазин.Строки.Найти(ТоварыВыборка.ВидНоменклатуры, "Значение");

			Если ВеткаВидНоменклатуры = Неопределено Тогда

				ВеткаВидНоменклатуры = ВеткаМагазин.Строки.Добавить();
				ВеткаВидНоменклатуры.Значение = ТоварыВыборка.ВидНоменклатуры;

			КонецЕсли;

			ВеткаНоменклатура = ВеткаВидНоменклатуры.Строки.Найти(ТоварыВыборка.Номенклатура, "Значение");

			Если ВеткаНоменклатура = Неопределено Тогда

				ВеткаНоменклатура = ВеткаВидНоменклатуры.Строки.Добавить();
				ВеткаНоменклатура.Значение = ТоварыВыборка.Номенклатура;

			КонецЕсли;

			ЗаполнитьЗначенияСвойств(ВеткаНоменклатура, ДеталиВыборка);

		КонецЦикла;

	КонецЦикла;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	Для каждого ВеткаМагазин Из ДеревоДокументов.Строки Цикл

		Для каждого ВеткаВидНоменклатуры Из ВеткаМагазин.Строки Цикл

			ВеткаВидНоменклатуры.Строки.Сортировать("КлючСортировки");

			ДокументУстановки = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
			ДокументУстановки.Дата = Параметры.ДатаДокумента;
			ДокументУстановки.УстановитьНовыйНомер();
			ДокументУстановки.Ответственный = Справочники.Пользователи.АдминистраторАвтоматов;

			ДокументУстановки.Согласован = Истина;

			Для каждого СтрокаНоменклатура Из ВеткаВидНоменклатуры.Строки Цикл

				СтрокиТабличнойЧасти = ДокументУстановки.Товары.НайтиСтроки(
					Новый Структура("ВидЦены, Номенклатура", ВеткаМагазин.ВидЦены, СтрокаНоменклатура.Номенклатура));

				Если СтрокиТабличнойЧасти.Количество() = 0 Тогда

					СтрокаТабличнойЧасти = ДокументУстановки.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаНоменклатура);
					СтрокаТабличнойЧасти.ВидЦены = ВеткаМагазин.ВидЦены;

				Иначе

					Для каждого СтрокаТабличнойЧасти Из СтрокиТабличнойЧасти Цикл

					//	Обновим строки по последней загрузке. Актуальной будет последняя загруженная цена.
						ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаНоменклатура);
						СтрокаТабличнойЧасти.ВидЦены = ВеткаМагазин.ВидЦены;

					КонецЦикла;

				КонецЕсли;

			КонецЦикла;

			СтрокаТабличнойЧасти = ДокументУстановки.ВидыЦен.Найти(ВеткаМагазин.ВидЦены, "ВидЦены");

			Если СтрокаТабличнойЧасти = Неопределено Тогда

				СтрокаТабличнойЧасти = ДокументУстановки.ВидыЦен.Добавить();
				СтрокаТабличнойЧасти.ВидЦены = ВеткаМагазин.ВидЦены;

			КонецЕсли;

			Если НЕ ДокументУстановки.Товары.Количество() = 0 тогда

				Сообщить(?(Параметры.РежимЗаписи = РежимЗаписиДокумента.Проведение, "Проведен", "Записан")
					+ " «УЦН № " + ДокументУстановки.Номер + " от " + ДокументУстановки.Дата + "», кол-во строк = " + ДокументУстановки.Товары.Количество());

				ДокументУстановки.ДополнительныеСвойства.Вставить("РегистрацияПередачиВNavision", Истина);
				ДокументУстановки.УзелСоздания = Справочники.СтруктураУзлов.КСУ_Navision;

				ВнешниеИсточникиСобытия.ЗаписатьОбъект(ДокументУстановки
					, ?(НЕ Параметры.РежимЗаписи = РежимЗаписиДокумента.Проведение И ДокументУстановки.Проведен
						, РежимЗаписиДокумента.ОтменаПроведения
						, Параметры.РежимЗаписи)
					, Истина, Истина);

				СписокДокументов.Добавить(ДокументУстановки.Ссылка);

				Если Параметры.ОтложенноеПроведение ИЛИ НЕ ДокументУстановки.Проведен Тогда

					РегистрыСведений.ОтложенныеДвиженияДокументов.НазначитьОтложенноеПроведение(ДокументУстановки.Ссылка, ДокументУстановки.Дата);

				КонецЕсли;

			Иначе

				Сообщить("В документе «УЦН № " + ДокументУстановки.Номер + " от " + ДокументУстановки.Дата + "», не заполнена ТЧ Товары. Документ записан не будет! " );

		    КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Возврат СписокДокументов;

КонецФункции

Процедура ПроверитьПараметрыУстановкиЦен(ДеревоДокументов, Параметры)

	Если ДеревоДокументов = Неопределено Тогда

		ДеревоДокументов = ДеревоДокументовОформить();

	КонецЕсли;

	Если НЕ Параметры.Свойство("СписокВидовЦен") Тогда

		Параметры.Вставить("СписокВидовЦен", Новый Массив);

	КонецЕсли;

	Если НЕ Параметры.Свойство("СсылкиОбработаны") Тогда

		Параметры.Вставить("СсылкиОбработаны", Новый Массив);

	КонецЕсли;

	Если НЕ Параметры.Свойство("ДатаДокумента") Тогда

		Параметры.Вставить("ДатаДокумента", ТекущаяДата());

	КонецЕсли;

	Если НЕ Параметры.Свойство("ПериодСреза") Тогда

		Параметры.Вставить("ПериодСреза", Параметры.ДатаДокумента);

	КонецЕсли;

	Если НЕ Параметры.Свойство("РежимЗаписи") Тогда

		Параметры.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);

	КонецЕсли;

	Если НЕ Параметры.Свойство("ОтложенноеПроведение") Тогда

		Параметры.Вставить("ОтложенноеПроведение", НЕ Параметры.РежимЗаписи = РежимЗаписиДокумента.Проведение);

	КонецЕсли;

КонецПроцедуры

Функция ДеревоДокументовОформить()

	ДеревоДокументов = Новый ДеревоЗначений;
	ДеревоДокументов.Колонки.Добавить("Значение", Новый ОписаниеТипов("СправочникСсылка.Магазины, СправочникСсылка.ВидыНоменклатуры, СправочникСсылка.Номенклатура"));
	ДеревоДокументов.Колонки.Добавить("КлючСортировки", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));

	Для каждого Колонка Из Метаданные.Документы.УстановкаЦенНоменклатуры.ТабличныеЧасти.Товары.Реквизиты Цикл

		ДеревоДокументов.Колонки.Добавить(Колонка.Имя, Колонка.Тип);

	КонецЦикла;

	Возврат ДеревоДокументов;

КонецФункции // ДеревоДокументовОформить()

#КонецОбласти

//	LNK 31.10.2019 13:54:45
Функция ДатаПередачиВNavision(ДокументСсылка)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаРегистра.ДатаРегистрации) КАК ДатаРегистрации
	|ИЗ
	|	РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Объект = &ДокументСсылка
	|	И ТаблицаРегистра.ВидПередачи = ЗНАЧЕНИЕ(Перечисление.ВидыПередачиNavision.ПереданВNavision)"
	);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() И НЕ Выборка.ДатаРегистрации = NULL Тогда

			ДатаРегистрации = Выборка.ДатаРегистрации;

	Иначе	ДатаРегистрации = '00010101';

	КонецЕсли;

	Возврат ДатаРегистрации;

КонецФункции















