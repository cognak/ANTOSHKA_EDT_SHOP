#Область ПроцедурыПоддержкиГенерацииСерийныхНомеров

Функция СформироватьКодСерийногоНомера(ТипСертификата, Номинал, НомерПервый)	Экспорт

	КодСерийногоНомера = МаскаТипНоминал(ТипСертификата, Номинал)
	+ Формат(НомерПервый, "ЧЦ=9; ЧДЦ=; ЧН=000000000; ЧВН=; ЧГ=");

	Возврат КодСерийногоНомера;

КонецФункции

Функция МаскаТипНоминал(ТипСертификата, Номинал)	Экспорт

	МаскаСертификата = ТипСертификата
	+ Формат(Номинал, "ЧЦ=5; ЧДЦ=; ЧН=00000; ЧВН=; ЧГ=");

	Возврат МаскаСертификата;

КонецФункции

Функция ПолучитьКритерииВладельца(Номенклатура)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаВладельца.Номинал КАК Номинал,
	|	ТаблицаВладельца.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаВладельца.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
	|	ЕСТЬNULL(МАКСИМУМ(ТаблицаСерийныеНомера.КодСерийногоНомера), """") КАК КодСерийногоНомера,
	|	КОЛИЧЕСТВО(ТаблицаСерийныеНомера.Ссылка) КАК КоличествоСерийныхНомеров
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаВладельца
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерийныеНомера КАК ТаблицаСерийныеНомера
	|		ПО ТаблицаВладельца.Ссылка = ТаблицаСерийныеНомера.Владелец
	|ГДЕ
	|	ТаблицаВладельца.Ссылка = &Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВладельца.Номинал,
	|	ТаблицаВладельца.ТипНоменклатуры,
	|	ТаблицаВладельца.ИспользоватьСерийныеНомера"
	);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить();

	КритерииВладельца = Новый Структура;

	Для каждого Колонка Из Результат.Колонки Цикл

		ТипЗначения = Новый ОписаниеТипов(Колонка.ТипЗначения,, "NULL");
		КритерииВладельца.Вставить(Колонка.Имя, ТипЗначения.ПривестиЗначение());

	КонецЦикла;
	
	КритерииВладельца.Вставить("ТипСертификата", "");
	КритерииВладельца.Вставить("НомерПервый"   , 1);

	Если НЕ Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();

		ЗаполнитьЗначенияСвойств(КритерииВладельца, Выборка);

		Если НЕ ПустаяСтрока(КритерииВладельца.КодСерийногоНомера) Тогда

			КритерииВладельца.ТипСертификата = Лев(КритерииВладельца.КодСерийногоНомера, 2);
			КритерииВладельца.НомерПервый    = Число(Сред(КритерииВладельца.КодСерийногоНомера, 8)) + 1;

		Иначе

			КритерииВладельца.ТипСертификата = ПодарочныеСертификатыПовтИсп.ТипыСертификатов(Истина)[0];

		КонецЕсли;
	
	КонецЕсли;

	Возврат КритерииВладельца;

КонецФункции

Процедура ЗаполнитьДиапазонСерийныхНомеров(Номенклатура, ТипСертификата, Номинал, НомерПервый, Количество, ТекстОшибки)	Экспорт

	Перем Object;

	Попытка

		Блокиратор = Справочники.БлокираторыПроцессов.ЗаполнениеДиапазонаНомеровСертификатов.ПолучитьОбъект();
		Блокиратор.Заблокировать();

	Исключение

		ТекстОшибки = "Не удалось стать владельцем процесса!";

	КонецПопытки;

	Если ПустаяСтрока(ТекстОшибки) Тогда

		Счётчик = 0;

		Пока Истина Цикл

			Счётчик = Счётчик + 1;

			Если Счётчик > Количество  Тогда

				Прервать;

			КонецЕсли;

			КодСерийногоНомера = СформироватьКодСерийногоНомера(ТипСертификата, Номинал, НомерПервый);

		//	Уникальность кода проверям в цикле, "поштучно".. во избежание групповой транзакции и дублирования кодов.

			Если КодСерийногоНомераУникален(КодСерийногоНомера) Тогда

				СоздатьЭлементСерийныйНомер(КодСерийногоНомера, Номенклатура, ТипСертификата, Object, ТекстОшибки);

				Если НЕ ПустаяСтрока(ТекстОшибки) Тогда

					Прервать;

				КонецЕсли;

				НомерПервый = НомерПервый + 1;

			Иначе

				ТекстОшибки = "Номер «" + КодСерийногоНомераУникален(КодСерийногоНомера) + "» УЖЕ существует.";
				Прервать;

			КонецЕсли;

		КонецЦикла;

		Блокиратор.Разблокировать();

	КонецЕсли;

КонецПроцедуры

Процедура СоздатьЭлементСерийныйНомер(КодСерийногоНомера, Номенклатура, ТипСертификата, Object, ТекстОшибки)

	НачатьТранзакцию();

	Попытка

		СерийныйНомер = Справочники.СерийныеНомера.СоздатьЭлемент();
		СерийныйНомер.ОбменДанными.Загрузка = Истина;
		СерийныйНомер.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		СерийныйНомер.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
		ОбменДаннымиСервер.УстановитьВсехПолучателей(СерийныйНомер.ОбменДанными.Получатели, "ПоМагазину");

		СерийныйНомер.Владелец = Номенклатура;
		СерийныйНомер.КодСерийногоНомера = КодСерийногоНомера;
		СерийныйНомер.ДатаСоздания = ТекущаяДата();

		СерийныйНомер.Наименование = КодСерийногоНомера;
		СерийныйНомер.ДополнительныеСвойства.Вставить("Префикс", Лев(ТипСертификата + "ККК", 3));
		СерийныйНомер.УстановитьНовыйКод();

		СерийныйНомер.Записать();

	//	---------------------------------------------------------------------------------------

		НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
		ОбменДаннымиСервер.УстановитьВсехПолучателей(НаборЗаписей.ОбменДанными.Получатели, "ПоМагазину");

		НаборЗаписей.Отбор.Штрихкод.Установить(КодСерийногоНомера);
		НаборЗаписей.Отбор.Владелец.Установить(СерийныйНомер.Ссылка);
		НаборЗаписей.Отбор.Характеристика.Установить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		НаборЗаписей.Отбор.ТипШтрихкода.Установить(ПланыВидовХарактеристик.ТипыШтрихкодов.CODE39);
		НаборЗаписей.Отбор.Упаковка.Установить(Справочники.УпаковкиНоменклатуры.ПустаяСсылка());

		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Штрихкод = НаборЗаписей.Отбор.Штрихкод.Значение;
		ЗаписьНабора.Владелец = НаборЗаписей.Отбор.Владелец.Значение;
		ЗаписьНабора.Характеристика = НаборЗаписей.Отбор.Характеристика.Значение;
		ЗаписьНабора.ТипШтрихкода = НаборЗаписей.Отбор.ТипШтрихкода.Значение;
		ЗаписьНабора.Упаковка = НаборЗаписей.Отбор.Упаковка.Значение;

		НаборЗаписей.Записать();

	//	---------------------------------------------------------------------------------------

		НаборЗаписей = РегистрыСведений.СерийныеНомераКлючи.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
		ОбменДаннымиСервер.УстановитьВсехПолучателей(НаборЗаписей.ОбменДанными.Получатели, "ПоМагазину");

		НаборЗаписей.Отбор.СерийныйНомер.Установить(СерийныйНомер.Ссылка);

		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.СерийныйНомер = НаборЗаписей.Отбор.СерийныйНомер.Значение;
		ЗаписьНабора.КлючНомера    = НовыйСекретныйКлючНомера(Object, 16);	//	длина пароля утверждена! Не изменять.
		ЗаписьНабора.ДатаСоздания  = ТекущаяДата();

		НаборЗаписей.Записать();

		ЗафиксироватьТранзакцию();

	Исключение

		ТекстОшибки = ОписаниеОшибки();
		ОтменитьТранзакцию();

	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область МетодыСекретногоКлюча

Функция НовыйСекретныйКлючНомера(Object, ДлинаПароля)

	Пока Истина Цикл

		СоставКлюча = Новый Структура(
			"КлючНомера, КлючСекретный"
			, "", ""
		);

	//	1.	Непосредственно генерация уникального ключа номера.
		Пока СтрДлина(СоставКлюча.КлючНомера) < ДлинаПароля Цикл

			НекийСимвол = Символ(ОбщегоНазначенияКлиентСервер.RANDOM(48, 122, Object));

			Если ПодарочныеСертификатыПовтИсп.СимволыИсключитьИзПароля().Получить(НекийСимвол) = Истина Тогда

			    Продолжить;

			КонецЕсли;

			СоставКлюча.КлючНомера = СоставКлюча.КлючНомера + НекийСимвол;

		КонецЦикла;

	//	2.	Шифруем полученный ключ номера.
		СоставКлюча.КлючСекретный = ЗашифроватьКлючНомера(СоставКлюча.КлючНомера);

	//	3.	Проверяем существование такого ключа в секретном регистре..
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаРегистра.СерийныйНомер КАК СерийныйНомер,
		|	ТаблицаРегистра.КлючНомера КАК КлючНомера
		|ИЗ
		|	РегистрСведений.СерийныеНомераКлючи КАК ТаблицаРегистра
		|ГДЕ
		|	ТаблицаРегистра.КлючНомера = &КлючСекретный"
		);
		Запрос.УстановитьПараметр("КлючСекретный", СоставКлюча.КлючСекретный);

		Если Запрос.Выполнить().Пустой() Тогда

		//	.. уникальность проверена.. выходим из цикла.
			Прервать;

		КонецЕсли;

	КонецЦикла;

	Возврат СоставКлюча.КлючСекретный;

КонецФункции

Функция ЗашифроватьКлючНомера(КлючНомераОткрытый)	Экспорт

	КлючШифрования = УправлениеДоступомВызовСервера.ПолучитьКлючШифрования(
		УправлениеДоступомВызовСервера.ВременныйПароль(, УправлениеДоступомСлужебныйПовтИсп.СекретКлючаШифрования())
		, СтрДлина(КлючНомераОткрытый)
	);
	Возврат УправлениеДоступомВызовСервера.ЗашифроватьСтроку(КлючНомераОткрытый, КлючШифрования);

КонецФункции

Функция РасшифроватьКлючНомера(КлючНомераСекретный)	Экспорт

	КлючШифрования = УправлениеДоступомВызовСервера.ПолучитьКлючШифрования(
		УправлениеДоступомВызовСервера.ВременныйПароль(, УправлениеДоступомСлужебныйПовтИсп.СекретКлючаШифрования())
		, СтрДлина(КлючНомераСекретный)
	);
	Возврат УправлениеДоступомВызовСервера.РасшифроватьСтроку(КлючНомераСекретный, КлючШифрования);

КонецФункции

#КонецОбласти

#Область ПолучениеСоставаИУникальностиСерийногоНомера

Функция КодСерийногоНомераУникален(КодСерийногоНомера)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СерийныеНомера.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	СерийныеНомера.КодСерийногоНомера = &КодСерийногоНомера"
	);
	Запрос.УстановитьПараметр("КодСерийногоНомера", КодСерийногоНомера);
	
	Возврат Запрос.Выполнить().Пустой();

КонецФункции

Функция ПолучитьСоставСерийногоНомера(КлючНомера)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСТИНА КАК Найден,
	|	ТаблицаСерийныеНомера.Владелец КАК Владелец,
	|	ТаблицаКлючей.СерийныйНомер КАК СерийныйНомер,
	|	ТаблицаСерийныеНомера.КодСерийногоНомера КАК КодСерийногоНомера,
	|	ТаблицаСерийныеНомера.ДатаСоздания КАК ДатаСоздания,
	|	ТаблицаВладельца.Номинал КАК Номинал,
	|	ТаблицаВладельца.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаВладельца.Код КАК КодВладельца
	|ИЗ
	|	РегистрСведений.СерийныеНомераКлючи КАК ТаблицаКлючей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерийныеНомера КАК ТаблицаСерийныеНомера
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаВладельца
	|			ПО ТаблицаСерийныеНомера.Владелец = ТаблицаВладельца.Ссылка
	|		ПО ТаблицаКлючей.СерийныйНомер = ТаблицаСерийныеНомера.Ссылка
	|ГДЕ
	|	ТаблицаКлючей.КлючНомера = &КлючНомераСекретный
	|	И НЕ ТаблицаСерийныеНомера.ПометкаУдаления"
	);
	Запрос.УстановитьПараметр("КлючНомераСекретный", ЗашифроватьКлючНомера(КлючНомера));
	
	Результат = Запрос.Выполнить();

	СоставОбъекта = СтруктураРезультатаЗапроса(Результат, Ложь);

	Если НЕ Результат.Пустой() Тогда

		Выборка = Результат.Выбрать();
		Выборка.Следующий();

		ЗаполнитьЗначенияСвойств(СоставОбъекта, Выборка);

	КонецЕсли;
	
	Возврат СоставОбъекта;

КонецФункции

#КонецОбласти

#Область ПоддержкаАктуальнойИнформацииОСостоянииСертификата

Функция ПолучитьСостояниеПодарочногоСертификатаКод(КодСерийногоНомера, РесурсWebRetailДоступен, Период = '00010101')	Экспорт

	ДанныеСертификата = Новый Структура;

//	Подготовка параметров запроса. Эти приседания связаны с тем, что параметром может быть:
//	1. Просто код серийного номера (строка - одиночные вызовы)
//	2. Структура массива серийных номеров("прямой" вызов из этой ИБ)
//	3. Строка JSON (вызов из web-сервиса с передачей структуры из п.2)

	Если ТипЗнч(КодСерийногоНомера) = Тип("Структура") Тогда

		ПараметрыЗапроса = КодСерийногоНомера;
		ВернутьТаблицу   = Истина;

	Иначе

		Если СтрНайти(КодСерийногоНомера, "#ARRAY#") > 0 Тогда

			ПараметрыЗапроса = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(КодСерийногоНомера);
			ВернутьТаблицу   = Истина;

		Иначе

			ПараметрыЗапроса = Новый Структура(
				"СерийныеНомера, Регистратор, Период"
				, Новый Массив
				, Неопределено
				, ?(Период = '00010101', '39991231', Период)	//	принимаем конец всех времён
			);
			ПараметрыЗапроса.СерийныеНомера.Добавить(КодСерийногоНомера);
			ВернутьТаблицу = Ложь;

		КонецЕсли;
	
	КонецЕсли;

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() И РесурсWebRetailДоступен Тогда

		Подключение = СервисыСервер.Подключение("RetailPack");
		ДанныеСертификата = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(Подключение.GetGiftCertificateCode(
			?(ВернутьТаблицу, ОбщегоНазначенияКлиентСервер.СериализоватьJSON(ПараметрыЗапроса), КодСерийногоНомера), Период));

	Иначе

		ПараметрыЗапроса.Вставить("ГраницаСреза", Новый Граница(Новый МоментВремени(ПараметрыЗапроса.Период, ПараметрыЗапроса.Регистратор), ВидГраницы.Исключая));

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА КАК Найден,
		|	ТаблицаВладельца.Ссылка КАК Владелец,
		|	ТаблицаВедущая.Ссылка КАК СерийныйНомер,
		|	ТаблицаВедущая.КодСерийногоНомера КАК КодСерийногоНомера,
		|	ЕСТЬNULL(ТаблицаДвиженияСерийныхНомеров.Получатель, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК СкладНаличия,
		|	ЕСТЬNULL(ТаблицаДвиженияСерийныхНомеров.Получатель.Магазин, ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК МагазинНаличия,
		|	ЕСТЬNULL(ТаблицаСостоянияСерийныхНомеров.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияСерийныхНомеров.ПустаяСсылка)) КАК Состояние,
		|	ЕСТЬNULL(ТаблицаСостоянияСерийныхНомеров.ДатаОкончанияДействия, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияДействия,
		|	ТаблицаВладельца.Номинал КАК Номинал,
		|	ТаблицаВладельца.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаВладельца.Код КАК КодВладельца
		|ИЗ
		|	Справочник.СерийныеНомера КАК ТаблицаВедущая
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаВладельца
		|		ПО ТаблицаВедущая.Владелец = ТаблицаВладельца.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДвиженияСерийныхНомеров.СрезПоследних(&ГраницаСреза, ) КАК ТаблицаДвиженияСерийныхНомеров
		|		ПО ТаблицаВедущая.Владелец = ТаблицаДвиженияСерийныхНомеров.Номенклатура
		|			И ТаблицаВедущая.Ссылка = ТаблицаДвиженияСерийныхНомеров.СерийныйНомер
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСерийныхНомеров.СрезПоследних(&ГраницаСреза, ) КАК ТаблицаСостоянияСерийныхНомеров
		|		ПО ТаблицаВедущая.Владелец = ТаблицаСостоянияСерийныхНомеров.Номенклатура
		|			И ТаблицаВедущая.Ссылка = ТаблицаСостоянияСерийныхНомеров.СерийныйНомер
		|ГДЕ
		|	ТаблицаВедущая.КодСерийногоНомера В(&СписокНомеров)
		|	И НЕ ТаблицаВедущая.ПометкаУдаления
		|	И ТаблицаВладельца.ИспользоватьСерийныеНомера
		|	И ТаблицаВладельца.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)"
		);
		Запрос.УстановитьПараметр("СписокНомеров", ПараметрыЗапроса.СерийныеНомера);
		Запрос.УстановитьПараметр("ГраницаСреза" , ПараметрыЗапроса.ГраницаСреза);
		
		Результат = Запрос.Выполнить();

		ДанныеСертификата = СтруктураРезультатаЗапроса(Результат, ВернутьТаблицу);
		
		Если НЕ Результат.Пустой() Тогда

			Выборка = Результат.Выбрать();

			Если ВернутьТаблицу = Истина Тогда

				Пока Выборка.Следующий() Цикл

					СтрокаТаблицы = ДанныеСертификата.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);

				КонецЦикла;

			Иначе

				Выборка.Следующий();
				ЗаполнитьЗначенияСвойств(ДанныеСертификата, Выборка);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат ДанныеСертификата;

КонецФункции

//	LNK 24.02.2020 11:18:27
Функция ПолучитьСостояниеПодарочногоСертификатаКлюч(КлючНомера, РесурсWebRetailДоступен, Период = '00010101')	Экспорт

	ДанныеСертификата = Новый Структура;

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() И РесурсWebRetailДоступен Тогда

		Подключение = СервисыСервер.Подключение("RetailPack");
		ДанныеСертификата = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(Подключение.GetGiftCertificateKey(КлючНомера, Период));

	Иначе

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА КАК Найден,
		|	ТаблицаСерийныеНомера.Владелец КАК Владелец,
		|	ТаблицаКлючей.СерийныйНомер КАК СерийныйНомер,
		|	ТаблицаСерийныеНомера.КодСерийногоНомера КАК КодСерийногоНомера,
		|	ЕСТЬNULL(ТаблицаСостоянияСерийныхНомеров.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ОрганизацияАктивации,
		|	ЕСТЬNULL(ТаблицаДвиженияСерийныхНомеров.Получатель, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК СкладНаличия,
		|	ЕСТЬNULL(ТаблицаДвиженияСерийныхНомеров.Получатель.Магазин, ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК МагазинНаличия,
		|	ЕСТЬNULL(ТаблицаСостоянияСерийныхНомеров.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодСостояния,
		|	ЕСТЬNULL(ТаблицаСостоянияСерийныхНомеров.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияСерийныхНомеров.ПустаяСсылка)) КАК Состояние,
		|	ЕСТЬNULL(ТаблицаСостоянияСерийныхНомеров.ДатаОкончанияДействия, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияДействия,
		|	ТаблицаВладельца.Номинал КАК Номинал,
		|	ТаблицаВладельца.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаВладельца.Код КАК КодВладельца
		|ИЗ
		|	РегистрСведений.СерийныеНомераКлючи КАК ТаблицаКлючей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерийныеНомера КАК ТаблицаСерийныеНомера
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаВладельца
		|			ПО ТаблицаСерийныеНомера.Владелец = ТаблицаВладельца.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДвиженияСерийныхНомеров.СрезПоследних(&Период, ) КАК ТаблицаДвиженияСерийныхНомеров
		|			ПО ТаблицаСерийныеНомера.Владелец = ТаблицаДвиженияСерийныхНомеров.Номенклатура
		|				И ТаблицаСерийныеНомера.Ссылка = ТаблицаДвиженияСерийныхНомеров.СерийныйНомер
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСерийныхНомеров.СрезПоследних(&Период, ) КАК ТаблицаСостоянияСерийныхНомеров
		|			ПО ТаблицаСерийныеНомера.Владелец = ТаблицаСостоянияСерийныхНомеров.Номенклатура
		|				И ТаблицаСерийныеНомера.Ссылка = ТаблицаСостоянияСерийныхНомеров.СерийныйНомер
		|		ПО ТаблицаКлючей.СерийныйНомер = ТаблицаСерийныеНомера.Ссылка
		|ГДЕ
		|	ТаблицаКлючей.КлючНомера = &КлючНомераСекретный
		|	И НЕ ТаблицаСерийныеНомера.ПометкаУдаления"
		);
		Запрос.УстановитьПараметр("КлючНомераСекретный", ЗашифроватьКлючНомера(КлючНомера));
		Запрос.УстановитьПараметр("Период"             , ?(Период = '00010101', '39991231', Период));	//	принимаем конец всех времён
		
		Результат = Запрос.Выполнить();

		ДанныеСертификата = СтруктураРезультатаЗапроса(Результат, Ложь);
		
		Если НЕ Результат.Пустой() Тогда

			Выборка = Результат.Выбрать();
			Выборка.Следующий();

			ЗаполнитьЗначенияСвойств(ДанныеСертификата, Выборка);

			Если ДанныеСертификата.ОрганизацияАктивации = Справочники.Организации.ПустаяСсылка() Тогда

			//	LNK 29.12.2023 10:21:44
				ДанныеСертификата.ОрганизацияАктивации = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику(Выборка.ПериодСостояния).ОсновнаяОрганизация;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат ДанныеСертификата;

КонецФункции

#КонецОбласти

#Область ПоддержкаПроведенияИПроверкиЗаполнения

Процедура ДвижениеСерийныхНомеровРазрешитьРМК(ТоварыКоллекция, Операция, Магазин, Отказ, ТекстСообщения, РесурсWebRetailДоступен)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Магазины.СкладПродажи КАК Склад,
	|	Магазины.Ссылка КАК Магазин,
	|	Магазины.СкладУправляющейСистемы КАК СкладУправляющейСистемы,
	|	ЕСТЬNULL(ПолитикаМагазина.ОтключитьКонтрольПодарочныхСертификатов, ЕСТЬNULL(ПолитикаПустогоМагазина.ОтключитьКонтрольПодарочныхСертификатов, ЛОЖЬ)) КАК ОтключитьКонтрольПодарочныхСертификатов
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаМагазинов.СрезПоследних(, Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК ПолитикаПустогоМагазина
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаМагазинов.СрезПоследних(, Магазин = &Магазин) КАК ПолитикаМагазина
	|		ПО Магазины.Ссылка = ПолитикаМагазина.Магазин
	|ГДЕ
	|	Магазины.Ссылка = &Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСертификаты.Ссылка КАК СерийныйНомер
	|ИЗ
	|	Источник КАК Источник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерийныеНомера КАК ТаблицаСертификаты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаВладельцы
	|			ПО ТаблицаСертификаты.Владелец = ТаблицаВладельцы.Ссылка
	|		ПО Источник.Номенклатура = ТаблицаСертификаты.Ссылка
	|ГДЕ
	|	ТаблицаВладельцы.ИспользоватьСерийныеНомера
	|	И ТаблицаВладельцы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.НомерСтроки КАК НомерСтроки,
	|	Источник.Номенклатура КАК Номенклатура
	|ИЗ
	|	Источник КАК Источник
	|ГДЕ
	|	Источник.Номенклатура ССЫЛКА Справочник.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	);
	Запрос.УстановитьПараметр("Товары" , ТоварыКоллекция.Выгрузить());
	Запрос.УстановитьПараметр("Магазин", ?(ЗначениеЗаполнено(Магазин), Магазин, ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин));
	
	Результаты = Запрос.ВыполнитьПакет();

	Если НЕ Результаты[1].Пустой() Тогда

		ДанныеМагазина = Результаты[1].Выбрать();
		ДанныеМагазина.Следующий();

		Если НЕ ДанныеМагазина.ОтключитьКонтрольПодарочныхСертификатов = Истина Тогда

			Если НЕ Результаты[2].Пустой() Тогда

				ДанныеСертификатов = ДвижениеСерийныхНомеровРазрешить(Результаты[2].Выгрузить(), Операция, Неопределено, ТекущаяДата(), ДанныеМагазина, Отказ, ТекстСообщения, РесурсWebRetailДоступен);

			КонецЕсли;

			Если НЕ Результаты[3].Пустой() Тогда

				ПроверитьАбсолютныеСрокиДействия(Результаты[3].Выгрузить(), ТекущаяДата(), Отказ, ТекстСообщения);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ДвижениеСерийныхНомеровРазрешить(ТабличнаяЧасть, Операция, Регистратор, Период, ДанныеМагазина, Отказ, ТекстСообщения, РесурсWebRetailДоступен)

//	"Активные" сертификаты запрещаем к движению.

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.СерийныйНомер КАК СерийныйНомер
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСерийныеНомера.КодСерийногоНомера КАК КодСерийногоНомера
	|ИЗ
	|	ТабличнаяЧасть КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерийныеНомера КАК ТаблицаСерийныеНомера
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаВладельцев
	|			ПО ТаблицаСерийныеНомера.Владелец = ТаблицаВладельцев.Ссылка
	|		ПО ТабличнаяЧасть.СерийныйНомер = ТаблицаСерийныеНомера.Ссылка
	|ГДЕ
	|	ТаблицаВладельцев.ИспользоватьСерийныеНомера
	|	И ТаблицаВладельцев.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТабличнаяЧасть"
	);
	Запрос.УстановитьПараметр("ТабличнаяЧасть", ТабличнаяЧасть);

	Результат = Запрос.Выполнить();

	ДанныеСертификатов = Новый Массив;

	Если НЕ Результат.Пустой() Тогда

		ПараметрыЗапроса = Новый Структура(
			"Флаг, СерийныеНомера, Регистратор, Период"
			, "#ARRAY#"	//	атрибут ОБЯЗАТЕЛЕН, как флаг сериализованной в строку JSON структуры
			, Результат.Выгрузить().ВыгрузитьКолонку("КодСерийногоНомера")
			, Регистратор
			, Период
		);

		ТаблицаДанных = ПолучитьСостояниеПодарочногоСертификатаКод(ПараметрыЗапроса, РесурсWebRetailДоступен);

		Для каждого СтрокаДанных Из ТаблицаДанных Цикл

		//	Заполняем массив для значения возврата.
			ДанныеСертификатов.Добавить(ОбщегоНазначенияКлиентСервер.СтрокаТаблицыКакСтруктура(ТаблицаДанных.Колонки, СтрокаДанных));

			ПредставлениеСертификата = "Сертификат [" + СокрЛП(СтрокаДанных.КодВладельца) + "]«" + СтрокаДанных.КодСерийногоНомера + "» ";

			Если Операция = "Возврат" ИЛИ Операция = "Погашение" Тогда

				Если НЕ СтрокаДанных.Состояние = Перечисления.СостоянияСерийныхНомеров.Активен Тогда

					ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
					+ ПредставлениеСертификата
					+ "НЕ АКТИВИРОВАН! " + ?(Операция = "Возврат", "Возврат невозможен.", "Погашение невозможно.");

				КонецЕсли;

			ИначеЕсли СтрокаДанных.Состояние = Перечисления.СостоянияСерийныхНомеров.Активен
				ИЛИ   СтрокаДанных.Состояние = Перечисления.СостоянияСерийныхНомеров.Блокирован	Тогда

				ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
				+ ПредставлениеСертификата
				+ ?(СтрокаДанных.Состояние = Перечисления.СостоянияСерийныхНомеров.Активен, "АКТИВИРОВАН", "БЛОКИРОВАН")
				+ "! Движение невозможно.";

			ИначеЕсли СтрокаДанных.Состояние = Перечисления.СостоянияСерийныхНомеров.Возврат
				И НЕ ТипЗнч(Регистратор) = Тип("ДокументСсылка.СписаниеТоваров")	Тогда

					ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
					+ ПредставлениеСертификата
					+ "в состоянии [ВОЗВРАТ]. Операция допустима только для документа вида «Списание товаров».";

			ИначеЕсли Операция = "Поступление" Тогда

				Если ЗначениеЗаполнено(СтрокаДанных.МагазинНаличия) Тогда

					ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
					+ ПредставлениеСертификата
					+ "принадлежит магазину «" + СтрокаДанных.МагазинНаличия + "»! Поступление невозможно!";

				ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.Состояние) Тогда

					ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
					+ ПредставлениеСертификата
					+ "в состоянии «" + СтрокаДанных.Состояние + "»! Поступление невозможно!";

				КонецЕсли;

			ИначеЕсли Операция = "Списание" Тогда

				Если НЕ СтрокаДанных.СкладНаличия = ДанныеМагазина.Склад И НЕ ДанныеМагазина.СкладУправляющейСистемы = Истина Тогда

					ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
					+ ПредставлениеСертификата
					+ "отсутствует на складе '" + ДанныеМагазина.Склад + "'! Движение невозможно.";

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда

		Отказ = Истина;

	КонецЕсли;

	Возврат ДанныеСертификатов;

КонецФункции

Функция ПроверитьАбсолютныеСрокиДействия(ТабличнаяЧасть, Период, Отказ, ТекстСообщения)

	Если НЕ Отказ Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ТабличнаяЧасть
		|ИЗ
		|	&ТабличнаяЧасть КАК ТабличнаяЧасть
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСправочник.Код КАК Код,
		|	ТаблицаСправочник.Наименование КАК Наименование,
		|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
		|	ТаблицаСправочник.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		|	ТаблицаСправочник.ТипНоменклатуры КАК ТипНоменклатуры
		|ИЗ
		|	ТабличнаяЧасть КАК ТабличнаяЧасть
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
		|		ПО ТабличнаяЧасть.Номенклатура = ТаблицаСправочник.Ссылка
		|ГДЕ
		|	(ТаблицаСправочник.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|			ИЛИ ТаблицаСправочник.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.СкидочныйКупон))
		|	И ТаблицаСправочник.ТипСрокаДействия = ЗНАЧЕНИЕ(Перечисление.СрокДействияПодарочныхСертификатов.СОграничениемНаДату)
		|	И КОНЕЦПЕРИОДА(ТаблицаСправочник.ДатаОкончанияДействия, ДЕНЬ) < &Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		);
		Запрос.УстановитьПараметр("ТабличнаяЧасть", ТабличнаяЧасть);
		Запрос.УстановитьПараметр("Период", Период);

		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда

			Отказ   = Истина;
			Выборка = Результат.Выбрать();

			Пока Выборка.Следующий() Цикл

				ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"Стр.%1. %2 [%3]«%4» ПРОСРОЧЕН! Действителен до %5",
					Выборка.НомерСтроки,
					?(Выборка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат, "Сертификат", "Купон"),
					Выборка.Код,
					Выборка.Наименование,
					Формат(Выборка.ДатаОкончанияДействия, "ДФ=dd.MM.yyyy")
				);

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

//	LNK 05.03.2020 10:28:49
Функция ОбработкаПроведенияКонтроль(Операция, ДокументОбъект, Отказ, ИмяТабличнойЧасти = "СерийныеНомера")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ТипДокумента = ТипЗнч(ДокументОбъект);
	ПроверятьАбсолютныеСрокиДействия = Ложь;

	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДокументОбъект.ДополнительныеСвойства, "ЗагрузкаИзNavision", Ложь) = Истина Тогда

		Возврат НЕ Отказ;	//	LNK 02.02.2021 15:28:56

	КонецЕсли;

	Если НЕ ОбщегоНазначенияРТ.ЕстьТЧОбъекта(ИмяТабличнойЧасти, ДокументОбъект.Метаданные()) Тогда

		ЖурналСобытий.Регистрация("СЕРТИФИКАТЫ.ОШИБКА", УровеньЖурналаРегистрации.Ошибка
			, ДокументОбъект.Метаданные()
			, ДокументОбъект.Ссылка
			,
			, "Нет табличной части [" + ИмяТабличнойЧасти + "]"
			, СокрЛП(ДокументОбъект)
			, Истина
		);

		Возврат НЕ Отказ;

	КонецЕсли;

	Если ТипДокумента = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		
		ДанныеМагазина = ПолучитьДанныеМагазина(ДокументОбъект.МагазинОтправитель, ДокументОбъект.СкладОтправитель);

	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ОрдерНаПеремещениеТоваров") Тогда
		
		ДанныеМагазина = ПолучитьДанныеМагазина(ДокументОбъект.Магазин, ДокументОбъект.СкладОтправитель);

	Иначе
		
		Если Операция = "Продажа"
		И (ТипДокумента = Тип("ДокументОбъект.РеализацияТоваров") ИЛИ ТипДокумента = Тип("ДокументОбъект.ЧекККМ")) Тогда

			ПроверятьАбсолютныеСрокиДействия = Истина;

		КонецЕсли;

		Если ТипДокумента = Тип("ДокументОбъект.ЧекККМ") ИЛИ ТипДокумента = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда

			ДанныеМагазина = ПолучитьДанныеМагазина(ДокументОбъект.Магазин, Неопределено);

		Иначе
			
			ЕстьСклад   = ОбщегоНазначения.ЕстьРеквизитОбъекта(ДокументОбъект, "Склад");
			ЕстьМагазин = ОбщегоНазначения.ЕстьРеквизитОбъекта(ДокументОбъект, "Магазин");

			Если ЕстьМагазин И ЕстьСклад Тогда

				ДанныеМагазина = ПолучитьДанныеМагазина(ДокументОбъект.Магазин, ДокументОбъект.Склад);

			ИначеЕсли ЕстьМагазин И НЕ ЕстьСклад Тогда

				ДанныеМагазина = ПолучитьДанныеМагазина(ДокументОбъект.Магазин, Неопределено);

			ИначеЕсли НЕ ЕстьМагазин И ЕстьСклад Тогда

				ДанныеМагазина = ПолучитьДанныеМагазина(, ДокументОбъект.Склад);

			Иначе

				ЖурналСобытий.Регистрация("СЕРТИФИКАТЫ.ОШИБКА", УровеньЖурналаРегистрации.Ошибка
					, ДокументОбъект.Метаданные()
					, ДокументОбъект.Ссылка
					,
					, "Нет реквизитов [Магазин] и [Склад]"
					, СокрЛП(ДокументОбъект)
					, Истина
				);

				Возврат НЕ Отказ;
			
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ДанныеМагазина.ОтключитьКонтрольПодарочныхСертификатов = Истина Тогда

		Возврат НЕ Отказ;	//	LNK 26.08.2020 05:52:02

	КонецЕсли;

	ТекстСообщения = "";
	
	РесурсWebRetailДоступен = РозничныеПродажиСлужебный.РесурсWebRetailДоступен();

	Если НЕ БлокироватьОперацииПриОтсутствииСоединенияЦБ(Операция, НЕ ДокументОбъект[ИмяТабличнойЧасти].Количество() = 0, Отказ, РесурсWebRetailДоступен, ТекстСообщения) Тогда

	//	LNK 17.08.2020 09:27:21
	//	В любом случае сначала проверяем в текущей БД.. есть случаи, что кассиры дважды пробивают один и тот же сертификат, а
	//	информация об этом ещё не успела доехать до ЦБ..
		ДанныеСертификатов = ДвижениеСерийныхНомеровРазрешить(ДокументОбъект[ИмяТабличнойЧасти]
			, Операция
			, ДокументОбъект.Ссылка
			, ДокументОбъект.Дата
			, ДанныеМагазина
			, Отказ
			, ТекстСообщения
			, Ложь	//	флаг указывает, что НУЖНО проверить в локальной БД (в ЦБ не лезть).
		);

	КонецЕсли;

	Если НЕ Отказ Тогда
	//	LNK 18.08.2020 05:43:15
	//	временно.. уточнить алгоритм для Отказ=Ложь в ПБ, как "разрешить".. пока не могу сообразить

		РесурсWebRetailДоступен = РесурсWebRetailДоступен
			И НЕ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДокументОбъект.ДополнительныеСвойства, "РежимЗакрытияСмены", Ложь) = Истина;

		ДанныеСертификатов = ДвижениеСерийныхНомеровРазрешить(ДокументОбъект[ИмяТабличнойЧасти]
			, Операция
			, ДокументОбъект.Ссылка
			, ДокументОбъект.Дата
			, ДанныеМагазина
			, Отказ
			, ТекстСообщения
			, РесурсWebRetailДоступен
		);

		Если ПроверятьАбсолютныеСрокиДействия Тогда

			ПроверитьАбсолютныеСрокиДействия(ДокументОбъект.Товары, ДокументОбъект.Дата, Отказ, ТекстСообщения);

		КонецЕсли;

	КонецЕсли;

	Если Отказ Тогда

		Сообщить("Отказано в проведении операции «" + Операция + "»"
		+ Символы.ПС + ДокументОбъект.Метаданные().Имя + " No." + ДокументОбъект.Номер + " от " + Формат(ДокументОбъект.Дата, "ДФ=dd.MM.yyyy")
		+ Символы.ПС + ТекстСообщения);

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

#КонецОбласти

//	LNK 17.11.2020 06:03:24
Функция БлокироватьОперацииПриОтсутствииСоединенияЦБ(Операция, ЕстьСерийныеНомера, Отказ, РесурсWebRetailДоступен, ТекстСообщения)	Экспорт

	Если ЕстьСерийныеНомера И Операция = "Поступление" Тогда

		Если НЕ (РесурсWebRetailДоступен = Истина ИЛИ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел()) Тогда

			Если ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику().БлокироватьОперацииПриОтсутствииСоединенияЦБ = Истина Тогда

				Отказ = Истина;
				ТекстСообщения = "Отсутствует соединение с Центральным Сервером!";

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат Отказ;

КонецФункции

#Область ОбслуживаниеПередачиСертификатовВУправляющуюСистему

//	LNK 16.07.2020 06:00:23
Функция ВыполнитьПередачуСертификатовВУправляющуюСистему(ДокументСсылка, Проект, ТекстСообщения = "", АдресПеремещения = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Магазин КАК Магазин,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.КассоваяСмена КАК КассоваяСмена,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ТабличнаяЧасть.СерийныйНомер КАК СерийныйНомер,
	|	ТабличнаяЧасть.Количество КАК Количество,
	|	ТаблицаДокумента.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.ПогашениеПодарочныхСертификатов КАК ТабличнаяЧасть
	|		ПО ТаблицаДокумента.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументСсылка
	|	И НЕ ТаблицаДокумента.КассоваяСмена = ЗНАЧЕНИЕ(Документ.КассоваяСмена.ПустаяСсылка)
	|	И ТабличнаяЧасть.ПодарочныйСертификат.ВидНоменклатуры = &Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Реквизиты.Магазин КАК Магазин,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.КассоваяСмена КАК КассоваяСмена
	|ИЗ
	|	Источник КАК Реквизиты"
	);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Проект"		  , Проект);

	Результаты = Запрос.Выполнить();

	Выполнено = Ложь;
	ТекстСообщения = "";

	Если НЕ Результаты.Пустой() Тогда

		РеквизитыПродаж = Результаты.Выбрать();
		РеквизитыПродаж.Следующий();

		Попытка

		//	предохранитель одновременного выполнения процесса.
			ОбъектБлокировки = РеквизитыПродаж.КассоваяСмена.ПолучитьОбъект();
			ОбъектБлокировки.Заблокировать();

		Исключение

			ТекстСообщения = "Ошибка блокировки процедуры по «" + ДокументСсылка + "»:" + Символы.ПС + ОписаниеОшибки();

			ЖурналСобытий.Регистрация("ПЕРЕМЕЩЕНИЕ_СЕРТИФИКАТОВ"
				, УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.ПеремещениеТоваров
				,
				,
				, ТекстСообщения
				,
				, Ложь
			);

			Запрос.Текст =
			"УНИЧТОЖИТЬ Источник"
			;
			Запрос.Выполнить();

			Возврат Выполнено;

		КонецПопытки;

	Иначе

		ТекстСообщения = "Подарочных сертификатов НЕ обнаружено в «" + ДокументСсылка + "»!";

		Запрос.Текст =
		"УНИЧТОЖИТЬ Источник"
		;
		Запрос.Выполнить();

		Возврат Истина;

	КонецЕсли;

//	---------------------------------------------------------------------------------------

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.ПодарочныйСертификат КАК Номенклатура,
	|	ТабличнаяЧасть.СерийныйНомер КАК СерийныйНомер,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
	|	ТабличнаяЧасть.Количество КАК Количество,
	|	ТабличнаяЧасть.Количество КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ПогашениеСертификатов
	|ИЗ
	|	Источник КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПеремещениеТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Источник КАК Фильтр
	|		ПО ПеремещениеТоваров.ДокументОснование = Фильтр.Ссылка
	|			И (ПеремещениеТоваров.ВидПеремещения = ЗНАЧЕНИЕ(Перечисление.ВидыПеремещенийТоваров.ПередачаСертификатов))
	|			И (ПеремещениеТоваров.ВидНоменклатуры = &Проект)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	;
	
	Результаты = Запрос.Выполнить();
	
	Если НЕ Результаты.Пустой() Тогда
		
	//	Нет ПС в продажах либо перемещение уже имеется.
		Запрос.Текст =
		"УНИЧТОЖИТЬ ПогашениеСертификатов"
		;
		Запрос.Выполнить();

		РеквизитыПродаж = Результаты.Выбрать();
		РеквизитыПродаж.Следующий();

		ТекстСообщения   = "Обнаружен документ передачи ПС «" + РеквизитыПродаж.Ссылка + "»";
		АдресПеремещения = ПолучитьНавигационнуюСсылку(РеквизитыПродаж.Ссылка);

		Возврат Истина;

	КонецЕсли;

	Попытка

		ПеремещениеОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();

		ПеремещениеОбъект.Дата = ТекущаяДатаСеанса();
		ПеремещениеОбъект.ВидНоменклатуры	= Проект;
		ПеремещениеОбъект.ВидПеремещения    = Перечисления.ВидыПеремещенийТоваров.ПередачаСертификатов;
		ПеремещениеОбъект.ДокументОснование = ДокументСсылка;
		ПеремещениеОбъект.Организация       = РеквизитыПродаж.Организация;
		ПеремещениеОбъект.Ответственный     = ПараметрыСеанса.ТекущийПользователь;

		ПеремещениеОбъект.МагазинОтправитель = РеквизитыПродаж.Магазин;
		ПеремещениеОбъект.МагазинПолучатель  = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ЦентрУправляющейсистемы");

		ПеремещениеОбъект.СкладОтправитель   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПеремещениеОбъект.МагазинОтправитель, "СкладПоступления");
		ПеремещениеОбъект.СкладПолучатель    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПеремещениеОбъект.МагазинПолучатель , "СкладПереброски");

		Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество,
		|	СУММА(ТаблицаТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	ТаблицаТовары.Упаковка КАК Упаковка,
		|	ТаблицаТовары.Номенклатура.Номинал КАК Цена,
		|	ТаблицаТовары.Номенклатура.Номинал * СУММА(ТаблицаТовары.Количество) КАК Сумма
		|ИЗ
		|	ПогашениеСертификатов КАК ТаблицаТовары
		|ГДЕ
		|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Упаковка,
		|	ТаблицаТовары.Номенклатура.Номинал
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСерийныеНомера.Номенклатура КАК Номенклатура,
		|	ТаблицаСерийныеНомера.СерийныйНомер КАК СерийныйНомер,
		|	0 КАК КлючСвязиСерийныхНомеров
		|ИЗ
		|	ПогашениеСертификатов КАК ТаблицаСерийныеНомера
		|ГДЕ
		|	ВЫРАЗИТЬ(ТаблицаСерийныеНомера.Номенклатура КАК Справочник.Номенклатура).ИспользоватьСерийныеНомера
		|	И ВЫРАЗИТЬ(ТаблицаСерийныеНомера.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПогашениеСертификатов"
		;
		Результаты = Запрос.ВыполнитьПакет();

		ПеремещениеОбъект.Товары.Загрузить(Результаты[0].Выгрузить());
		ТаблицаСерийныеНомера = Результаты[1].Выгрузить();

		КлючСвязиНомера    = 0;
		СоответствиеКлючей = Новый Соответствие;

		Для каждого СтрокаТаблицы Из ТаблицаСерийныеНомера Цикл

			Если СоответствиеКлючей.Получить(СтрокаТаблицы.Номенклатура) = Неопределено Тогда

				КлючСвязиНомера = КлючСвязиНомера + 1;
				СоответствиеКлючей.Вставить(СтрокаТаблицы.Номенклатура, КлючСвязиНомера);

			КонецЕсли;

			СтрокаТовары = ПеремещениеОбъект.Товары.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
			СтрокаТаблицы.КлючСвязиСерийныхНомеров = СоответствиеКлючей.Получить(СтрокаТаблицы.Номенклатура);
			СтрокаТовары.КлючСвязиСерийныхНомеров  = СоответствиеКлючей.Получить(СтрокаТаблицы.Номенклатура);

		КонецЦикла;

		ПеремещениеОбъект.СерийныеНомера.Загрузить(ТаблицаСерийныеНомера);

		Попытка

			ПеремещениеОбъект.УстановитьНовыйНомер();
			ПеремещениеОбъект.ДополнительныеСвойства.Вставить("ПропуститьКонтрольДоступногоКоличества", Истина);
			ПеремещениеОбъект.ДополнительныеСвойства.Вставить("РежимЗакрытияСмены", Истина);
			ПеремещениеОбъект.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);

			ПеремещениеОбъект.УстановитьВидНоменклатуры();

			ПеремещениеОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			Выполнено = Истина;

			ТекстСообщения   = "Создано и проведено Перемещение ПС «" + ПеремещениеОбъект.Ссылка + "» по документу «" + ДокументСсылка + "»";
			АдресПеремещения = ПолучитьНавигационнуюСсылку(ПеремещениеОбъект.Ссылка);

			ЖурналСобытий.Регистрация("ПЕРЕМЕЩЕНИЕ_СЕРТИФИКАТОВ"
				, УровеньЖурналаРегистрации.Примечание
				, Метаданные.Документы.ПеремещениеТоваров
				, ПеремещениеОбъект.Ссылка
				,
				, ТекстСообщения
				, СокрЛП(ПеремещениеОбъект.Ссылка)
				, Ложь
			);

		Исключение

			ТекстСообщения = "Ошибка передачи по «" + ДокументСсылка + "»:" + Символы.ПС + ОписаниеОшибки();

			ЖурналСобытий.Регистрация("ПЕРЕМЕЩЕНИЕ_СЕРТИФИКАТОВ"
				, УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.ПеремещениеТоваров
				, ПеремещениеОбъект.Ссылка
				,
				, ТекстСообщения
				, "Перемещение товаров " + ПеремещениеОбъект.Номер + " от " + ПеремещениеОбъект.Дата
				, Ложь
			);

		КонецПопытки;

	Исключение

		ТекстСообщения = "Ошибка передачи по «" + ДокументСсылка + "»:" + Символы.ПС + ОписаниеОшибки();

		ЖурналСобытий.Регистрация("ПЕРЕМЕЩЕНИЕ_СЕРТИФИКАТОВ"
			, УровеньЖурналаРегистрации.Ошибка
			, Метаданные.Документы.ПеремещениеТоваров
			,
			,
			, ТекстСообщения
			,
			, Ложь
		);

	КонецПопытки;

	Возврат Выполнено;

КонецФункции

//	LNK 20.03.2020 12:31:12
Процедура ВыполнитьПеремещениеСертификатовВЦентр()	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрацияОбъектов.Период КАК Период,
	|	РегистрацияОбъектов.Объект КАК Объект,
	|	РегистрацияОбъектов.Проект КАК Проект
	|ИЗ
	|	РегистрСведений.РегистрацияОбъектов КАК РегистрацияОбъектов
	|ГДЕ
	|	РегистрацияОбъектов.ДействиеКоманда = ""ВЕРНУТЬ_СЕРТИФИКАТЫ""
	|
	|УПОРЯДОЧИТЬ ПО
	|	Объект"
	);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл

			Если ВыполнитьПередачуСертификатовВУправляющуюСистему(Выборка.Объект, Выборка.Проект) Тогда

				ТехническаяПоддержка.УдалитьЗаписьВоздействия(Выборка.Объект, Выборка.Проект, Выборка.Период);

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПеремещениеПоОтчетуОРозничныхПродажах(ПеремещениеОбъект, ОтчетОРозничныхПродажах, ТекстОшибки)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Дата КАК Дата,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Магазин КАК МагазинОтправитель,
	|	ЦентрУправляющейсистемы.Значение КАК МагазинПолучатель,
	|	ЕСТЬNULL(ТаблицаДокумента.Магазин.СкладПродажи, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК СкладОтправитель,
	|	ЕСТЬNULL(ЦентрУправляющейсистемы.Значение.СкладПереброски, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК СкладПолучатель
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ТаблицаДокумента,
	|	Константа.ЦентрУправляющейсистемы КАК ЦентрУправляющейсистемы
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ОтчетОРозничныхПродажах
	|	И ТаблицаДокумента.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПогашения.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПогашения.ПодарочныйСертификат КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ТаблицаПогашения.СерийныйНомер КАК СерийныйНомер,
	|	ТаблицаПогашения.Количество КАК Количество,
	|	ТаблицаПогашения.Количество КАК КоличествоУпаковок,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
	|	ТаблицаПогашения.ПодарочныйСертификат.Номинал КАК Цена
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ПогашениеПодарочныхСертификатов КАК ТаблицаПогашения
	|ГДЕ
	|	ТаблицаПогашения.Ссылка = &ОтчетОРозничныхПродажах
	|	И ТаблицаПогашения.ПодарочныйСертификат.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТабличнаяЧасть.НомерСтроки) КАК НомерСтроки,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	СУММА(ТабличнаяЧасть.Количество) КАК Количество,
	|	СУММА(ТабличнаяЧасть.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	ТабличнаяЧасть.Упаковка КАК Упаковка,
	|	ТабличнаяЧасть.Цена КАК Цена,
	|	ТабличнаяЧасть.Цена * СУММА(ТабличнаяЧасть.КоличествоУпаковок) КАК Сумма
	|ИЗ
	|	ТабличнаяЧасть КАК ТабличнаяЧасть
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Упаковка,
	|	ТабличнаяЧасть.Цена
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.СерийныйНомер КАК СерийныйНомер,
	|	0 КАК КлючСвязиСерийныхНомеров
	|ИЗ
	|	ТабличнаяЧасть КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И ТабличнаяЧасть.Номенклатура.ИспользоватьСерийныеНомера
	|
	|УПОРЯДОЧИТЬ ПО
	|	СерийныйНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТабличнаяЧасть"
	);
	Запрос.УстановитьПараметр("ОтчетОРозничныхПродажах", ОтчетОРозничныхПродажах);
	
	Результаты = Запрос.ВыполнитьПакет();

	Если НЕ (Результаты[0].Пустой() ИЛИ Результаты[2].Пустой()) Тогда
		
		Шапка = Результаты[0].Выбрать();
		Шапка.Следующий();

		Если ПеремещениеОбъект.Дата < Шапка.Дата Тогда

			ПеремещениеОбъект.Дата = ?(Шапка.Дата > ТекущаяДатаСеанса(), Шапка.Дата + 1, ТекущаяДатаСеанса());

		КонецЕсли;

		ПеремещениеОбъект.ВидПеремещения    = Перечисления.ВидыПеремещенийТоваров.ПередачаСертификатов;
		ПеремещениеОбъект.ДокументОснование = ОтчетОРозничныхПродажах;
		ПеремещениеОбъект.Организация       = Шапка.Организация;
		ПеремещениеОбъект.Ответственный     = ПараметрыСеанса.ТекущийПользователь;

		ПеремещениеОбъект.МагазинОтправитель = Шапка.МагазинОтправитель;
		ПеремещениеОбъект.МагазинПолучатель  = Шапка.МагазинПолучатель;

		ПеремещениеОбъект.СкладОтправитель   = Шапка.СкладОтправитель;
		ПеремещениеОбъект.СкладПолучатель    = Шапка.СкладПолучатель;

		ПеремещениеОбъект.Товары.Загрузить(Результаты[2].Выгрузить());
		ТаблицаСерийныеНомера = Результаты[3].Выгрузить();

		КлючСвязиНомера    = 0;
		СоответствиеКлючей = Новый Соответствие;

		Для каждого СтрокаТаблицы Из ТаблицаСерийныеНомера Цикл

			Если СоответствиеКлючей.Получить(СтрокаТаблицы.Номенклатура) = Неопределено Тогда

				КлючСвязиНомера = КлючСвязиНомера + 1;
				СоответствиеКлючей.Вставить(СтрокаТаблицы.Номенклатура, КлючСвязиНомера);

			КонецЕсли;

			СтрокаТовары = ПеремещениеОбъект.Товары.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
			СтрокаТаблицы.КлючСвязиСерийныхНомеров = СоответствиеКлючей.Получить(СтрокаТаблицы.Номенклатура);
			СтрокаТовары.КлючСвязиСерийныхНомеров  = СоответствиеКлючей.Получить(СтрокаТаблицы.Номенклатура);

		КонецЦикла;

		ПеремещениеОбъект.СерийныеНомера.Загрузить(ТаблицаСерийныеНомера);

	Иначе

		ТекстОшибки = "В документе продажи нет серийных номеров подарочных сертификатов!";

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьДанныеМагазина(Магазин, Склад)

	ДанныеМагазина = Новый Структура("Магазин, Склад, СкладУправляющейСистемы, ОтключитьКонтрольПодарочныхСертификатов");

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаМагазины.Ссылка КАК Магазин,
	|	ВЫБОР
	|		КОГДА &Склад = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаМагазины.СкладПродажи
	|		ИНАЧЕ &Склад
	|	КОНЕЦ КАК Склад,
	|	ТаблицаМагазины.СкладУправляющейСистемы КАК СкладУправляющейСистемы
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	Справочник.Магазины КАК ТаблицаМагазины
	|ГДЕ
	|	ТаблицаМагазины.Ссылка = &Магазин
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаСклады.Магазин,
	|	ТаблицаСклады.Ссылка,
	|	ТаблицаСклады.Магазин.СкладУправляющейСистемы
	|ИЗ
	|	Справочник.Склады КАК ТаблицаСклады
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Магазин = НЕОПРЕДЕЛЕНО
	|				ТОГДА ТаблицаСклады.Ссылка = &Склад
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.Магазин КАК Магазин,
	|	Источник.Склад КАК Склад,
	|	Источник.СкладУправляющейСистемы КАК СкладУправляющейСистемы,
	|	ЕСТЬNULL(ПолитикаМагазина.ОтключитьКонтрольПодарочныхСертификатов, ЕСТЬNULL(ПолитикаПустогоМагазина.ОтключитьКонтрольПодарочныхСертификатов, ЛОЖЬ)) КАК ОтключитьКонтрольПодарочныхСертификатов
	|ИЗ
	|	Источник КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаМагазинов.СрезПоследних(, Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК ПолитикаПустогоМагазина
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаМагазинов.СрезПоследних(, Магазин = &Магазин) КАК ПолитикаМагазина
	|		ПО Источник.Магазин = ПолитикаМагазина.Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	);
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("Склад", Склад);

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДанныеМагазина.Магазин = Выборка.Магазин;
	ДанныеМагазина.Склад   = Выборка.Склад;
	ДанныеМагазина.СкладУправляющейСистемы = Выборка.СкладУправляющейСистемы;
	ДанныеМагазина.ОтключитьКонтрольПодарочныхСертификатов = Выборка.ОтключитьКонтрольПодарочныхСертификатов;

	Возврат ДанныеМагазина;

КонецФункции

Функция СтруктураРезультатаЗапроса(РезультатЗапроса, ВернутьТаблицу)	Экспорт

	Если ВернутьТаблицу = Истина Тогда

		СтруктураРезультата = Новый ТаблицаЗначений;

		Для каждого Колонка Из РезультатЗапроса.Колонки Цикл

			СтруктураРезультата.Колонки.Добавить(Колонка.Имя, Новый ОписаниеТипов(Колонка.ТипЗначения,, "NULL"));

		КонецЦикла;

	Иначе

		СтруктураРезультата = Новый Структура;

		Для каждого Колонка Из РезультатЗапроса.Колонки Цикл

			ТипЗначения = Новый ОписаниеТипов(Колонка.ТипЗначения,, "NULL");
			СтруктураРезультата.Вставить(Колонка.Имя, ТипЗначения.ПривестиЗначение());

		КонецЦикла;

	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции
	
#КонецОбласти











