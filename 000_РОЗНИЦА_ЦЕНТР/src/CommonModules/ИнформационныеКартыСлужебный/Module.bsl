#Область ПрограммныйИнтерфейс

//	LNK 25.01.2018 09:19:21
Процедура РегламентЕжегодногоСрезаНакопленийИБлокировкиДисконтныхКарт()	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		ВызватьИсключение "Отказано! Регламент ежегодного среза нужно выполнять только в ЦБ.";

	КонецЕсли;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	ПериодНазначения = Дата(Год(ТекущаяДата()), 1, 8);

	Если ТекущаяДата() > ПериодНазначения Тогда

	//	Проверим наличие необходимой записи в регистре...

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	&ПериодНазначения КАК Период,
		|	Ведущая.ВидНазначения КАК ВидСреза
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.ВидыСрезаНакоплений.НакопленияДисконтныхКарт) КАК ВидНазначения) КАК Ведущая
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыСрезаНакопленийДисконтногоКлуба.СрезПоследних КАК ТаблицаНазначений
		|		ПО (ТаблицаНазначений.Период = &ПериодНазначения)
		|			И Ведущая.ВидНазначения = ТаблицаНазначений.ВидСреза
		|ГДЕ
		|	ТаблицаНазначений.ВидСреза ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ПериодНазначения,
		|	Ведущая.ВидНазначения
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.ВидыСрезаНакоплений.БлокировкаДисконтныхКарт) КАК ВидНазначения) КАК Ведущая
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыСрезаНакопленийДисконтногоКлуба.СрезПоследних КАК ТаблицаНазначений
		|		ПО (ТаблицаНазначений.Период = &ПериодНазначения)
		|			И Ведущая.ВидНазначения = ТаблицаНазначений.ВидСреза
		|ГДЕ
		|	ЛОЖЬ
		|	И ТаблицаНазначений.ВидСреза ЕСТЬ NULL"
		);	//	блокировку на текущий момент отключим
		Запрос.УстановитьПараметр("ПериодНазначения", ПериодНазначения);
		
	//	... если записей назначения регламента нет, - создадим их!
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл

			МенеджерЗаписи = РегистрыСведений.ПериодыСрезаНакопленийДисконтногоКлуба.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);

			МенеджерЗаписи.Записать();

		КонецЦикла;

		Если ТекущаяДата() >= (ПериодНазначения + 86400 * 12 - 3600 * 1.5) Тогда	//	плюс 12 суток и минус 2 часа = 22:30 19 января. 

		//	Начало работы регламента - 20 число после времени "Ч". В данном случае мы можем начать выполнение процедур среза.
		//	Регламент среза состоит из двух последовательных процессов:
		//	1. Срез накоплений по дисконтных картам в разрезе контрагента.
		//	2. Блокировка дисконтных карт, по которым отсутствуют движения за два года.

			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаНазначений.ВидСреза КАК ВидСреза,
			|	ВЫБОР
			|		КОГДА ТаблицаНазначений.ВидСреза = ЗНАЧЕНИЕ(Перечисление.ВидыСрезаНакоплений.НакопленияДисконтныхКарт)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК КлючПорядка
			|ИЗ
			|	РегистрСведений.ПериодыСрезаНакопленийДисконтногоКлуба.СрезПоследних КАК ТаблицаНазначений
			|ГДЕ
			|	ТаблицаНазначений.ДатаВыполнения = ДАТАВРЕМЯ(1, 1, 1)
			|	И ТаблицаНазначений.Период = &ПериодНазначения
			|
			|УПОРЯДОЧИТЬ ПО
			|	КлючПорядка"
			;

			Выборка = Запрос.Выполнить().Выбрать();

			Пока Выборка.Следующий() Цикл

				Если Выборка.ВидСреза = Перечисления.ВидыСрезаНакоплений.НакопленияДисконтныхКарт Тогда

					ИнформационныеКартыСлужебный.ЕжегодныйСрезНакопленийКлиентовДисконтногоКлуба();

				ИначеЕсли Выборка.ВидСреза = Перечисления.ВидыСрезаНакоплений.БлокировкаДисконтныхКарт Тогда

					ИнформационныеКартыСлужебный.ЕжегоднаяПроцедураБлокировкиДисконтныхКарт();

				Иначе

					ВызватьИсключение "Получен недопустимый вид среза: <" + Выборка.ВидСреза + ">";

				КонецЕсли;

				МенеджерЗаписи = РегистрыСведений.ПериодыСрезаНакопленийДисконтногоКлуба.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период   = ПериодНазначения;
				МенеджерЗаписи.ВидСреза = Выборка.ВидСреза;

				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.ДатаВыполнения = ТекущаяДата();
				МенеджерЗаписи.Записать();

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 26.01.2018 11:58:57
Процедура ФиксироватьГодовуюАктивностьПокупателя(ГодКакЧисло)	Экспорт

	ВсегоМесяцев = ?(ГодКакЧисло = Год(ТекущаяДата()), Месяц(ТекущаяДата()), 12);

	Для НомерМесяца = 1 По ВсегоМесяцев Цикл

		МесяцНачало    = Дата(ГодКакЧисло, НомерМесяца, ?(НомерМесяца = 1, 8, 1));	//	начало с 8 января!
		МесяцОкончание = КонецДня(?(НомерМесяца = 12, Дата(ГодКакЧисло + 1, 1, 7), КонецМесяца(Дата(ГодКакЧисло, НомерМесяца, 1))));

		ФиксироватьАктивностьПокупателя(МесяцНачало, МесяцОкончание);

	КонецЦикла;

КонецПроцедуры
	
#КонецОбласти

#Область ПроцедурыСрезаНакопленийИБлокировкиДисконтныхКарт

//	LNK 17.01.2018 10:58:15
Процедура ЕжегодныйСрезНакопленийКлиентовДисконтногоКлуба(ТолькоНовые = Ложь)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		ВызватьИсключение "Отказано! Предназначено для выполнения только в ЦБ.";

	КонецЕсли;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

//	1. Этап среза общего остатка по клиенту.
//	На этом этапе учитываем активность клиента только в прошлом году:
//	-- если не было активности в прошлом году - сумму границы на шаг вниз.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаПродажи.ВладелецДисконтнойКарты КАК Контрагент,
	|	ТаблицаПродажи.СуммаОстаток КАК СуммаНакопления,
	|	ВЫБОР
	|		КОГДА ТаблицаПродажи.СуммаОстаток >= 25000
	|			ТОГДА 25000
	|		КОГДА ТаблицаПродажи.СуммаОстаток >= 15000
	|			ТОГДА 15000
	|		КОГДА ТаблицаПродажи.СуммаОстаток >= 7000
	|			ТОГДА 7000
	|		КОГДА ТаблицаПродажи.СуммаОстаток >= 500
	|			ТОГДА 500
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаГраницы
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(&КонецПериода, ) КАК ТаблицаПродажи
	|ГДЕ
	|	ТаблицаПродажи.СуммаОстаток >= 0
	|	И ТаблицаПродажи.СуммаОстаток < 25000
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГодоваяАктивность.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ГодоваяАктивность
	|ИЗ
	|	РегистрСведений.ГодоваяАктивностьПокупателя.СрезПоследних(
	|			ДОБАВИТЬКДАТЕ(&КонецПериода, СЕКУНДА, -1),
	|			Контрагент В
	|				(ВЫБРАТЬ
	|					Источник.Контрагент
	|				ИЗ
	|					Источник)) КАК ГодоваяАктивность
	|ГДЕ
	|	ГодоваяАктивность.Период >= НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, -1), ГОД)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведущая.Контрагент КАК Контрагент,
	|	Ведущая.СуммаНакопления КАК СуммаНакопления,
	|	ВЫБОР
	|		КОГДА ГодоваяАктивность.Контрагент ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Ведущая.СуммаГраницы = 25000
	|						ТОГДА 15000
	|					КОГДА Ведущая.СуммаГраницы = 15000
	|						ТОГДА 7000
	|					КОГДА Ведущая.СуммаГраницы = 7000
	|						ТОГДА 500
	|					КОГДА Ведущая.СуммаГраницы = 500
	|						ТОГДА 0
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ Ведущая.СуммаГраницы
	|	КОНЕЦ КАК СуммаГраницы,
	|	ВЫБОР
	|		КОГДА ГодоваяАктивность.Контрагент ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СдвигНоминала
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	Источник КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГодоваяАктивность КАК ГодоваяАктивность
	|		ПО Ведущая.Контрагент = ГодоваяАктивность.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ГодоваяАктивность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Контрагент КАК Контрагент,
	|	Данные.СуммаНакопления КАК СуммаНакопления,
	|	Данные.СуммаГраницы КАК СуммаГраницы,
	|	Данные.СдвигНоминала КАК СдвигНоминала
	|ИЗ
	|	Данные КАК Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(ДОБАВИТЬКДАТЕ(&КонецПериода, СЕКУНДА, 2), ) КАК ТаблицаКонтроля
	|		ПО Данные.Контрагент = ТаблицаКонтроля.ВладелецДисконтнойКарты
	|ГДЕ
	|	ТаблицаКонтроля.СуммаОстаток > Данные.СуммаГраницы
	|
	|УПОРЯДОЧИТЬ ПО
	|	СуммаГраницы,
	|	СуммаНакопления
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагент),
	|	СУММА(СуммаНакопления)
	|ПО
	|	СуммаГраницы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Данные"
	);
	Запрос.УстановитьПараметр("КонецПериода", Дата(Год(ТекущаяДата()), 1, 8));
	Запрос.УстановитьПараметр("ТекущаяДата" , ТекущаяДата());

	ГраницыВыборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПродажи.Регистратор КАК Регистратор,
	|	ТаблицаПродажи.ВладелецДисконтнойКарты КАК ВладелецДисконтнойКарты
	|ПОМЕСТИТЬ Реестр
	|ИЗ
	|	РегистрНакопления.ПродажиПоДисконтнымКартам КАК ТаблицаПродажи
	|ГДЕ
	|	ТаблицаПродажи.Период = &КонецПериода
	|	И ТаблицаПродажи.ВладелецДисконтнойКарты = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Реестр.Регистратор, ЗНАЧЕНИЕ(Документ.КорректировкаРегистров.ПустаяСсылка)) КАК Регистратор,
	|	ТаблицаДетализация.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ТаблицаДетализация.ВладелецДисконтнойКарты КАК ВладелецДисконтнойКарты,
	|	ТаблицаДетализация.Номенклатура КАК Номенклатура,
	|	ТаблицаДетализация.Характеристика КАК Характеристика,
	|	ТаблицаДетализация.СуммаОстаток КАК Сумма,
	|	ТаблицаДетализация.КоличествоОстаток КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаДетализация.ДисконтнаяКарта.Блокирован
	|				ИЛИ ТаблицаДетализация.ДисконтнаяКарта.ПометкаУдаления
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Блокирован,
	|	ВЫБОР
	|		КОГДА ТаблицаДетализация.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КлючПорядка
	|ИЗ
	|	РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(&КонецПериода, ВладелецДисконтнойКарты = &Контрагент) КАК ТаблицаДетализация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реестр КАК Реестр
	|		ПО ТаблицаДетализация.ВладелецДисконтнойКарты = Реестр.ВладелецДисконтнойКарты
	|ГДЕ
	|	ТаблицаДетализация.СуммаОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Реестр"
	;

	НаборЗаписей = РегистрыНакопления.ПродажиПоДисконтнымКартам.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	ОбменДаннымиСервер.УстановитьВсехПолучателей(НаборЗаписей.ОбменДанными.Получатели, "ПоМагазину");
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);

	СчетчикКлиентов = 0;

	Пока ГраницыВыборка.Следующий() Цикл

		КлиентыВыборка = ГраницыВыборка.Выбрать();

		Пока КлиентыВыборка.Следующий() Цикл

			ВыполнитьКорректировкуНакопленияПоКартамКлиента(КлиентыВыборка, Запрос, НаборЗаписей, ТолькоНовые);
			СчетчикКлиентов = СчетчикКлиентов + 1;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

//	LNK 17.01.2018 12:32:33
Процедура ВыполнитьКорректировкуНакопленияПоКартамКлиента(КлиентыВыборка, Запрос, НаборЗаписей, ТолькоНовые)

	Запрос.УстановитьПараметр("Контрагент", КлиентыВыборка.Контрагент);

	ДеталиВыборка = Запрос.Выполнить().Выбрать();

	НаборЗаписей.Очистить();

	ПерваяИтерация  = Истина;
	СуммаУжеСнята   = 0;
	СуммаНужноСнять = КлиентыВыборка.СуммаНакопления - КлиентыВыборка.СуммаГраницы;

	Пока ДеталиВыборка.Следующий() Цикл

		Если СуммаУжеСнята = СуммаНужноСнять Тогда

			Прервать;

		КонецЕсли;

		Если ПерваяИтерация Тогда

			Если ДеталиВыборка.Регистратор.Пустая() Тогда

				НаборЗаписей.Отбор.Регистратор.Установить(Документы.КорректировкаРегистров.ПолучитьСсылку());

			ИначеЕсли ТолькоНовые = Истина Тогда

			//	Работа с "только новыми" регистраторами - для ускорения отладки.
				Возврат;

			Иначе

				НаборЗаписей.Отбор.Регистратор.Установить(ДеталиВыборка.Регистратор);

			КонецЕсли;

		КонецЕсли;

		ПерваяИтерация = Ложь;

		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, ДеталиВыборка);

		ЗаписьНабора.Период      = Запрос.Параметры.КонецПериода;
		ЗаписьНабора.Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;

		Если (СуммаУжеСнята + ЗаписьНабора.Сумма) > СуммаНужноСнять Тогда

			ЗаписьНабора.Сумма      = СуммаНужноСнять - СуммаУжеСнята;
			ЗаписьНабора.Количество = ЗаписьНабора.Количество * ЗаписьНабора.Сумма / ДеталиВыборка.Сумма;

		КонецЕсли;

		СуммаУжеСнята = СуммаУжеСнята + ЗаписьНабора.Сумма;
	//	Устанавливаем знак сторно ...
		ЗаписьНабора.Сумма      = -ЗаписьНабора.Сумма;
		ЗаписьНабора.Количество = -ЗаписьНабора.Количество;

	КонецЦикла;

	Если СуммаУжеСнята < СуммаНужноСнять Тогда

		а = 223;	//	отладочная

	КонецЕсли;

	НаборЗаписей.Записать();

КонецПроцедуры

//	LNK 24.01.2018 13:34:18
Процедура ЕжегоднаяПроцедураБлокировкиДисконтныхКарт()	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		ВызватьИсключение "Отказано! Предназначено для выполнения только в ЦБ.";

	КонецЕсли;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПродажи.ВладелецДисконтнойКарты КАК Контрагент
	|ПОМЕСТИТЬ Випы
	|ИЗ
	|	РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(&КонецПериода, ) КАК ТаблицаПродажи
	|ГДЕ
	|	ТаблицаПродажи.СуммаОстаток >= 25000
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ведущая.Ссылка КАК Карта,
	|	Ведущая.КодКарты КАК КодКарты,
	|	Ведущая.ДатаОткрытия КАК ДатаОткрытия,
	|	Ведущая.ДатаСоздания КАК ДатаСоздания,
	|	ВЫБОР
	|		КОГДА Ведущая.ДатаОткрытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА Ведущая.ДатаСоздания
	|		ИНАЧЕ Ведущая.ДатаОткрытия
	|	КОНЕЦ КАК КлючПорядка
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГодоваяАктивностьПокупателя.СрезПоследних(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, -1), ) КАК ДвиженияПрошлыйГод
	|		ПО Ведущая.Ссылка = ДвиженияПрошлыйГод.ДисконтнаяКарта
	|			И (ДвиженияПрошлыйГод.Период = НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, -1), ГОД))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГодоваяАктивностьПокупателя.СрезПоследних(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, -2), ) КАК ДвиженияПозапрошлыйГод
	|		ПО Ведущая.Ссылка = ДвиженияПозапрошлыйГод.ДисконтнаяКарта
	|			И (ДвиженияПозапрошлыйГод.Период = НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, -2), ГОД))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГодоваяАктивностьПокупателя.СрезПоследних(&ТекущаяДата, ) КАК ДвиженияЭтотГод
	|		ПО Ведущая.Ссылка = ДвиженияЭтотГод.ДисконтнаяКарта
	|			И (ДвиженияЭтотГод.Период = НАЧАЛОПЕРИОДА(&ТекущаяДата, ГОД))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Випы КАК ДанныеВИП
	|		ПО Ведущая.ВладелецКарты = ДанныеВИП.Контрагент
	|ГДЕ
	|	НЕ(Ведущая.ПометкаУдаления
	|				ИЛИ Ведущая.Блокирован)
	|	И ДанныеВИП.Контрагент ЕСТЬ NULL
	|	И Ведущая.ВладелецКарты ССЫЛКА Справочник.Контрагенты
	|	И ДвиженияПозапрошлыйГод.ДисконтнаяКарта ЕСТЬ NULL
	|	И ДвиженияПрошлыйГод.ДисконтнаяКарта ЕСТЬ NULL
	|	И ДвиженияЭтотГод.ДисконтнаяКарта ЕСТЬ NULL
	|	И ВЫБОР
	|			КОГДА Ведущая.ДатаОткрытия = ДАТАВРЕМЯ(1, 1, 1)
	|					И Ведущая.ДатаСоздания = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДАТАВРЕМЯ(2018, 12, 1)
	|			КОГДА Ведущая.ДатаОткрытия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА Ведущая.ДатаСоздания
	|			ИНАЧЕ Ведущая.ДатаОткрытия
	|		КОНЕЦ < НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, -1), ГОД)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка,
	|	КодКарты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Випы"
	);
	Запрос.УстановитьПараметр("КонецПериода", Дата(Год(ТекущаяДата()), 1, 8));
	Запрос.УстановитьПараметр("ТекущаяДата" , ТекущаяДата());
	
	Счетчик = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		КартаОбъект = Выборка.Карта.ПолучитьОбъект();
		КартаОбъект.ОбменДанными.Загрузка = Истина;
		КартаОбъект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		КартаОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
		КартаОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);

		ОбменДаннымиСервер.УстановитьВсехПолучателей(КартаОбъект.ОбменДанными.Получатели, "ПоМагазину");

		КартаОбъект.Блокирован = Истина;

		Если КартаОбъект.ДатаЗакрытия = '00010101' Тогда

			КартаОбъект.ДатаЗакрытия = ТекущаяДата();

		КонецЕсли;

		КартаОбъект.Записать();
		Счетчик = Счетчик + 1;

	КонецЦикла;

КонецПроцедуры

//	LNK 22.01.2018 13:23:54
Процедура ФиксироватьАктивностьПокупателя(МесяцНачало, МесяцОкончание)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		ВызватьИсключение "Отказано! Предназначено для выполнения только в ЦБ.";

	КонецЕсли;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МесяцНачало"   , МесяцНачало);
	Запрос.УстановитьПараметр("МесяцОкончание", МесяцОкончание);

	Если МесяцНачало < '20170301' Тогда

	//	Запуск всех магазинов произошел в феврале 2017. Поэтому в период "до" работаем по чекам.

		Запрос.Текст =
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(&МесяцНачало, ГОД) КАК Период,
		|	ТаблицаЧеков.ВладелецДисконтнойКарты КАК Контрагент,
		|	ТаблицаЧеков.ДисконтнаяКарта КАК ДисконтнаяКарта
		|ПОМЕСТИТЬ Покупатели
		|ИЗ
		|	Документ.ЧекККМ КАК ТаблицаЧеков
		|ГДЕ
		|	ТаблицаЧеков.Проведен
		|	И ТаблицаЧеков.ВладелецДисконтнойКарты ССЫЛКА Справочник.Контрагенты
		|	И НЕ ТаблицаЧеков.ВладелецДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	И НЕ ТаблицаЧеков.ДисконтнаяКарта = ЗНАЧЕНИЕ(Справочник.ИнформационныеКарты.ПустаяСсылка)
		|	И ТаблицаЧеков.Дата МЕЖДУ &МесяцНачало И &МесяцОкончание
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(&МесяцНачало, ГОД),
		|	ТаблицаПродажи.ВладелецДисконтнойКарты,
		|	ТаблицаПродажи.ДисконтнаяКарта
		|ИЗ
		|	РегистрНакопления.ПродажиПоДисконтнымКартам КАК ТаблицаПродажи
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ТаблицаПродажи.Регистратор ССЫЛКА Документ.КорректировкаРегистров
		|					ИЛИ ТаблицаПродажи.Регистратор ССЫЛКА Документ.СверткаИзУправляющейСистемы
		|				ТОГДА ЛОЖЬ
		|			КОГДА ТаблицаПродажи.Регистратор ССЫЛКА Документ.ВводОстатковПоНакопительнымСкидкам
		|				ТОГДА НЕ ТаблицаПродажи.Регистратор.НачальныеОстатки = ИСТИНА
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ТаблицаПродажи.ВладелецДисконтнойКарты ССЫЛКА Справочник.Контрагенты
		|	И НЕ ТаблицаПродажи.ВладелецДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	И НЕ ТаблицаПродажи.ДисконтнаяКарта = ЗНАЧЕНИЕ(Справочник.ИнформационныеКарты.ПустаяСсылка)
		|	И ТаблицаПродажи.Период МЕЖДУ &МесяцНачало И &МесяцОкончание
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент,
		|	ДисконтнаяКарта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Ведущая.Период КАК Период,
		|	Ведущая.Контрагент КАК Контрагент,
		|	Ведущая.ДисконтнаяКарта КАК ДисконтнаяКарта
		|ИЗ
		|	Покупатели КАК Ведущая
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГодоваяАктивностьПокупателя.СрезПоследних(НАЧАЛОПЕРИОДА(&МесяцНачало, ГОД), ) КАК ГодоваяАктивность
		|		ПО Ведущая.Контрагент = ГодоваяАктивность.Контрагент
		|			И Ведущая.ДисконтнаяКарта = ГодоваяАктивность.ДисконтнаяКарта
		|			И (ГодоваяАктивность.Период = НАЧАЛОПЕРИОДА(&МесяцНачало, ГОД))
		|ГДЕ
		|	ГодоваяАктивность.ДисконтнаяКарта ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Покупатели"
		;
	Иначе

		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(&МесяцНачало, ГОД) КАК Период,
		|	ТаблицаПродажи.ВладелецДисконтнойКарты КАК Контрагент,
		|	ТаблицаПродажи.ДисконтнаяКарта КАК ДисконтнаяКарта
		|ПОМЕСТИТЬ Покупатели
		|ИЗ
		|	РегистрНакопления.ПродажиПоДисконтнымКартам КАК ТаблицаПродажи
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ТаблицаПродажи.Регистратор ССЫЛКА Документ.КорректировкаРегистров
		|					ИЛИ ТаблицаПродажи.Регистратор ССЫЛКА Документ.СверткаИзУправляющейСистемы
		|				ТОГДА ЛОЖЬ
		|			КОГДА ТаблицаПродажи.Регистратор ССЫЛКА Документ.ВводОстатковПоНакопительнымСкидкам
		|				ТОГДА НЕ ТаблицаПродажи.Регистратор.НачальныеОстатки = ИСТИНА
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ТаблицаПродажи.ВладелецДисконтнойКарты ССЫЛКА Справочник.Контрагенты
		|	И НЕ ТаблицаПродажи.ВладелецДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	И НЕ ТаблицаПродажи.ДисконтнаяКарта = ЗНАЧЕНИЕ(Справочник.ИнформационныеКарты.ПустаяСсылка)
		|	И ТаблицаПродажи.Период МЕЖДУ &МесяцНачало И &МесяцОкончание
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент,
		|	ДисконтнаяКарта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ведущая.Период КАК Период,
		|	Ведущая.Контрагент КАК Контрагент,
		|	Ведущая.ДисконтнаяКарта КАК ДисконтнаяКарта
		|ИЗ
		|	Покупатели КАК Ведущая
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГодоваяАктивностьПокупателя.СрезПоследних(НАЧАЛОПЕРИОДА(&МесяцНачало, ГОД), ) КАК ГодоваяАктивность
		|		ПО Ведущая.Контрагент = ГодоваяАктивность.Контрагент
		|			И Ведущая.ДисконтнаяКарта = ГодоваяАктивность.ДисконтнаяКарта
		|			И (ГодоваяАктивность.Период = НАЧАЛОПЕРИОДА(&МесяцНачало, ГОД))
		|ГДЕ
		|	ГодоваяАктивность.ДисконтнаяКарта ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Покупатели"
		;
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();

	НаборЗаписей = РегистрыСведений.ГодоваяАктивностьПокупателя.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;

	Пока Выборка.Следующий() Цикл

		НаборЗаписей.Очистить();

		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.Контрагент.Установить(Выборка.Контрагент);
		НаборЗаписей.Отбор.ДисконтнаяКарта.Установить(Выборка.ДисконтнаяКарта);

		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);

		НаборЗаписей.Записать(Истина);

	КонецЦикла;

КонецПроцедуры
	
#КонецОбласти


#Область ВИРТУАЛЬНЫЕ_КАРТЫ_ПОКУПАТЕЛЕЙ	//	LNK 12.08.2021 12:35:19

#Область Виртуальные_Карты_ПрограммныйИнтерфейс

//	LNK 15.08.2021 10:32:47
Процедура ОбработчикЗаполненияПулаРезервныхВиртуальныхКарт(Знач РазмерПакета, ТекстОшибки, ОшибкуГенерировать = Истина)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

//	1. Получаем блокиратор процесса.
//	---------------------------------------------------------------------------------------
	Попытка

		Блокиратор = Справочники.БлокираторыПроцессов.НовыйИнформационнаяКартаВиртуальная.ПолучитьОбъект();

		Блокиратор.Заблокировать();

	Исключение

		ТекстОшибки = "Не удалось стать владельцем процесса [ПАКЕТ ВИРТУАЛЬНЫХ КАРТ]!" + Символы.ПС + ОписаниеОшибки();

		Если ОшибкуГенерировать = Истина Тогда

			ВызватьИсключение ТекстОшибки;

		КонецЕсли;

	КонецПопытки;

	Если Блокиратор.Заблокирован() Тогда	//	стали "владельцем" процесса.. работаем дальше.

		Попытка

		//	2. Уточняем количество, необходимое для поддержания резерва в нужном объёме.
		//	---------------------------------------------------------------------------------------
		//	Под величиной "РазмерПакета" понимаем величину пула находящихся в резерве карт.
		//	Поэтому скорректируем требуемое количество по текущему наличию уже созданных карт.

			РазмерРезерва = ПолучитьКоличествоРезервныхЭлементов();

			Если НЕ РазмерРезерва = 0 Тогда

				РазмерПакета = Макс(0, РазмерПакета - РазмерРезерва);

			КонецЕсли;

			Если РазмерПакета > 0 Тогда	//	если нужно дополнить пул резерва!

				КоличествоСоздано	 = 0;
				ПрефиксКартыДисконта = Константы.ПрефиксКартыДисконта.Получить();	//	фиксируем текущее значение константы.. дельше его будем изменять, если перейдём на другой префикс.

			//	3. Строим цикл по префиксам, назначенным в учетной политике.
			//	---------------------------------------------------------------------------------------

				Для каждого ПрефиксКарты Из ПолучитьСписокПрефиксов() Цикл

					Если КоличествоСоздано >= РазмерПакета Тогда

						Прервать;	//	контроль выхода из цикла

					КонецЕсли;

				//	4. Строим цикл по сериям. Всего серий 8 - от 1 до 9.
				//	---------------------------------------------------------------------------------------
					Для Серия = 1 По 9 Цикл

						Если КоличествоСоздано >= РазмерПакета Тогда

							Прервать;	//	контроль выхода из цикла

						КонецЕсли;

					//	Длина числового кода карты - 7 знаков (8-я цифра - контрольная!).
					//	Максимальное значение: 9 999 999.00
						ДанныеКода = КодКартыМаксимум(ПрефиксКарты, Серия);

						РазмерДоступно = ДанныеКода.НомерМакс - ДанныеКода.Номер;

						Если РазмерДоступно > 0 Тогда

							Для Счётчик = 1 По Мин(РазмерДоступно, РазмерПакета) Цикл

								НоваяВиртуальнаяКартаРезерва(ДанныеКода, КоличествоСоздано);

								УстановитьКонстантуПрефиксКартыДисконта(ПрефиксКартыДисконта, ПрефиксКарты);

								Если КоличествоСоздано >= РазмерПакета Тогда

									Прервать;	//	контроль выхода из цикла

								КонецЕсли;

							КонецЦикла;

						КонецЕсли;

					КонецЦикла;

				КонецЦикла;

			КонецЕсли;

		Исключение

			ТекстОшибки = ОписаниеОшибки();

			Если ОшибкуГенерировать = Истина Тогда

				ВызватьИсключение ТекстОшибки;

			КонецЕсли;

		КонецПопытки;

		Блокиратор.Разблокировать();

	КонецЕсли;

КонецПроцедуры

Функция ПрисвоитьРезервнуюВиртуальнуюКарту(Контрагент, Магазин, НомерТелефона, ТекущийПользователь = Неопределено, БлокироватьКонтрагента = Истина)	Экспорт

	Перем БлокираторКонтрагента;

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	КартаСсылка = Справочники.ИнформационныеКарты.ПустаяСсылка();

	Если НЕ НомерТелефона = ОтправкаSMS.ПодготовитьНомерТелефона(НомерТелефона) Тогда

		ЖурналСобытий.Регистрация("ВКАРТА_НАЗНАЧИТЬ", УровеньЖурналаРегистрации.Предупреждение
			, Метаданные.Справочники.Контрагенты
			, Контрагент
			,
			, "Отказ номера телефона НЕ [" + НомерТелефона + "] = [" + ОтправкаSMS.ПодготовитьНомерТелефона(НомерТелефона) + "]"
			, СокрЛП(Контрагент)
			, Ложь
			, Ложь
		);

	Иначе

		Попытка

			Если БлокироватьКонтрагента = Истина Тогда

				БлокираторКонтрагента = Контрагент.ПолучитьОбъект();
				#Если _ Тогда
				БлокираторКонтрагента = Справочники.Контрагенты.СоздатьЭлемент();
				#КонецЕсли

				БлокираторКонтрагента.Заблокировать();
				КонтрагентЗаблокирован = БлокираторКонтрагента.Заблокирован();

			Иначе

				КонтрагентЗаблокирован = Истина;

			КонецЕсли;

			Если КонтрагентЗаблокирован Тогда

				Для Итерация = 1 По 5 Цикл

					Запрос = Новый Запрос(
					"ВЫБРАТЬ
					|	МИНИМУМ(ТаблицаСправочник.КодКарты) КАК КодКарты
					|ПОМЕСТИТЬ Фильтр
					|ИЗ
					|	Справочник.ИнформационныеКарты КАК ТаблицаСправочник
					|ГДЕ
					|	ТаблицаСправочник.ВидДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.ВидыДисконтныхКарт.ВиртуальныеКарты)
					|	И ТаблицаСправочник.ВладелецКарты = НЕОПРЕДЕЛЕНО
					|	И ТаблицаСправочник.Резерв
					|	И НЕ ТаблицаСправочник.ПометкаУдаления
					|	И НЕ ТаблицаСправочник.Блокирован
					|	И НЕ ТаблицаСправочник.ЭтоГруппа
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ ПЕРВЫЕ 1
					|	ТаблицаСправочник.Ссылка КАК Карта
					|ИЗ
					|	Справочник.ИнформационныеКарты КАК ТаблицаСправочник
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
					|		ПО ТаблицаСправочник.КодКарты = Фильтр.КодКарты
					|ГДЕ
					|	ТаблицаСправочник.ВидДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.ВидыДисконтныхКарт.ВиртуальныеКарты)
					|	И ТаблицаСправочник.ВладелецКарты = НЕОПРЕДЕЛЕНО
					|	И ТаблицаСправочник.Резерв
					|	И НЕ ТаблицаСправочник.ПометкаУдаления
					|	И НЕ ТаблицаСправочник.Блокирован
					|	И НЕ ТаблицаСправочник.ЭтоГруппа
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ Фильтр"
					);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					Если НЕ РезультатЗапроса.Пустой() Тогда

						Выборка = РезультатЗапроса.Выбрать();
						Выборка.Следующий();

						Если ТипЗнч(Выборка.Карта) = Тип("СправочникСсылка.ИнформационныеКарты") Тогда

							КартаОбъект = Выборка.Карта.ПолучитьОбъект();
							#Если _ Тогда
							КартаОбъект = Справочники.ИнформационныеКарты.СоздатьЭлемент();
							#КонецЕсли
						    КартаОбъект.ОбменДанными.Загрузка = Истина;

							Попытка

								КартаОбъект.Заблокировать();

								Если КартаОбъект.Заблокирован() Тогда

									КартаОбъект.ВладелецКарты = Контрагент;
									КартаОбъект.ДатаОткрытия  = ТекущаяДата();
									КартаОбъект.Магазин	= Магазин;
									КартаОбъект.Резерв	= Ложь;

									Если НЕ ОбщегоНазначенияКлиентСервер.СсылкаПустая(ТекущийПользователь) Тогда

										КартаОбъект.Автор = ТекущийПользователь;

									ИначеЕсли НЕ ПараметрыСеанса.ТекущийПользователь.Пустая() И НЕ ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.АдминистраторАвтоматов Тогда

										КартаОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;

									КонецЕсли;

								//	Проверим ЕЩЁ РАЗ, что у контрагента НЕТ виртуальной карты!
								//	мало-ли.. пока то да сё, а клиент уже подхватил карту из какого-то другого процесса.
									Если ПолучитьВиртуальнуюКартуДляКонтрагента(Контрагент).Пустая() Тогда

										КартаОбъект.Записать();

										КартаСсылка = КартаОбъект.Ссылка;

									КонецЕсли;

									КартаОбъект.Разблокировать();

									Прервать;

								Иначе

									Продолжить;

								КонецЕсли;

							Исключение

								ТекстОшибки = ОписаниеОшибки();
								Продолжить;

							КонецПопытки;

						КонецЕсли;

					КонецЕсли;

				КонецЦикла;

				Если НЕ БлокираторКонтрагента = Неопределено И БлокироватьКонтрагента = Истина Тогда

					БлокираторКонтрагента.Разблокировать();

				КонецЕсли;

			КонецЕсли;

		Исключение

			ТекстОшибки = ОписаниеОшибки();

		КонецПопытки;

	КонецЕсли;

	Возврат КартаСсылка;

КонецФункции

#КонецОбласти	//	Виртуальные_Карты_ПрограммныйИнтерфейс

#Область Виртуальные_Карты_СлужебныйФункционал

Процедура НоваяВиртуальнаяКартаРезерва(ДанныеКода, КоличествоСоздано)

	Номер	 = ?(ДанныеКода.Номер = 0, 1, ДанныеКода.Номер + 1);
	КодКарты = Формат(Номер, "ЧЦ=7; ЧВН=; ЧГ=");
	КодКарты = СокрЛП(ДанныеКода.Серия) + ДанныеКода.Префикс + КодКарты + КонтрольнаяЦифраВиртуальногоНомера(КодКарты, 7);

	КартаОбъект = Справочники.ИнформационныеКарты.СоздатьЭлемент();
	КартаОбъект.ОбменДанными.Загрузка = Истина;
	КартаОбъект.ДополнительныеСвойства.Вставить("СлужебныйРежимЗаписи", Истина);
	КартаОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);

	КартаОбъект.Код			 = КодКарты;
	КартаОбъект.Наименование = КодКарты;
	КартаОбъект.КодКарты	 = КодКарты;

	КартаОбъект.ВладелецКарты = Неопределено;
	КартаОбъект.ДатаОткрытия  = '00010101';
	КартаОбъект.ДатаСоздания  = ТекущаяДата();

	КартаОбъект.Резерв	 = Истина;	//	карта поступает в резервный пул, свободный от владельца
	КартаОбъект.ВидКарты = Перечисления.ВидыИнформационныхКарт.Магнитная;
	КартаОбъект.ВидДисконтнойКарты = Справочники.ВидыДисконтныхКарт.ВиртуальныеКарты;
	КартаОбъект.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная;

	КартаОбъект.Записать();

	КоличествоСоздано = КоличествоСоздано + 1;

	ДанныеКода.Номер	= Номер;
	ДанныеКода.КодКарты = КодКарты;

КонецПроцедуры

Функция ПолучитьКоличествоРезервныхЭлементов()	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ТаблицаСправочник.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.ВидДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.ВидыДисконтныхКарт.ВиртуальныеКарты)
	|	И ТаблицаСправочник.Резерв
	|	И НЕ ТаблицаСправочник.ПометкаУдаления
	|	И НЕ ТаблицаСправочник.Блокирован
	|	И НЕ ТаблицаСправочник.ЭтоГруппа"
	);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка.Количество;

КонецФункции

Функция КодКартыМаксимум(Префикс, Серия = 0)

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ДанныеКода = Новый Структура(
		"Серия, Префикс, Номер, КодКарты, НомерМакс"
		, Серия
		, Префикс
		, 0
		, ""
		, 9999999);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаСправочник.КодКарты) КАК КодКарты
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.ВидДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.ВидыДисконтныхКарт.ВиртуальныеКарты)
	|	И ТаблицаСправочник.КодКарты ПОДОБНО ВЫБОР
	|			КОГДА &Серия = """"
	|				ТОГДА ""[1-9]""
	|			ИНАЧЕ &Серия
	|		КОНЕЦ + &Префикс + ""%"""
	);
	Запрос.УстановитьПараметр("Префикс"	, Префикс);
	Запрос.УстановитьПараметр("Серия"	, ?(Серия = 0, "", Формат(Серия, "ЧЦ=1")));

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();

		Если НЕ Выборка.КодКарты = NULL Тогда

			ДанныеКода.КодКарты	= Выборка.КодКарты;
			ДанныеКода.Серия	= Число(Лев(Выборка.КодКарты, 1));
			ДанныеКода.Префикс	= Сред(Выборка.КодКарты, 2, 3);
			ДанныеКода.Номер	= Число(Сред(Выборка.КодКарты, 5, 7));

		КонецЕсли;

	КонецЕсли;

	Возврат ДанныеКода;

КонецФункции

Функция КонтрольнаяЦифраВиртуальногоНомера(НомерКарты, КоличествоСимволов)

	СуммаЧетных   = 0;
	СуммаНечетных = 0;

	Для Позиция = 1 По КоличествоСимволов Цикл

		Значение = Число(Сред(НомерКарты, Позиция, 1));

		Если (Позиция + 1) % 2 = 0 Тогда

				СуммаЧетных   = СуммаЧетных + Значение;

		Иначе	СуммаНечетных = СуммаНечетных + Значение;

		КонецЕсли;

	КонецЦикла;

	РезультатПодсчета = СуммаЧетных * 2 + СуммаНечетных;

	Большее10 = РезультатПодсчета;

	Для Счётчик = 1 По 10 Цикл

		Большее10 = Большее10 + 1;

		Если Большее10 % 10 = 0 Тогда

			Прервать;

		КонецЕсли;

	КонецЦикла;

	Возврат Формат(?((Большее10 - РезультатПодсчета) = 10, 0, Большее10 - РезультатПодсчета), "ЧЦ=1; ЧН=0");

КонецФункции

Функция ПолучитьСписокПрефиксов()

	СписокПрефиксов = Новый Массив;

	ДанныеХранилища = РегистрыСведений.БезопасноеХранилищеДанных.ДанныеПрочитать(РегистрыСведений.УчетнаяПолитика.КлючБезопасногоХранилища()).Получить();

	РегистрыСведений.УчетнаяПолитика.ПроверитьСтруктуруХранилища(ДанныеХранилища);

//	---------------------------------------------------------------------------------------

	ПрефиксТекущий = Константы.ПрефиксКартыДисконта.Получить();
	ПринятьПрефикс = Ложь;	//	заполняем из списка только ПОСЛЕ текущего префикса!
	СписокПрефиксов.Добавить(ПрефиксТекущий);

	Для каждого Префикс Из ДанныеХранилища.ПрефиксыКарт Цикл

		Если ПринятьПрефикс Тогда

			СписокПрефиксов.Добавить(Префикс);

		ИначеЕсли Префикс = ПрефиксТекущий Тогда

			ПринятьПрефикс = Истина;

		КонецЕсли;

	КонецЦикла;

	Возврат СписокПрефиксов;

КонецФункции

Процедура УстановитьКонстантуПрефиксКартыДисконта(ПрефиксКартыДисконта, ПрефиксКарты)

	Если НЕ ПрефиксКартыДисконта = ПрефиксКарты Тогда

		МенеджерКонстанты = Константы.ПрефиксКартыДисконта.СоздатьМенеджерЗначения();
		МенеджерКонстанты.ОбменДанными.Загрузка = Истина;

		МенеджерКонстанты.Значение = ПрефиксКарты;
		МенеджерКонстанты.Записать();

		ЖурналСобытий.Регистрация(ИмяСобытия() + ".Константа.ПрефиксКартыДисконта"
			, УровеньЖурналаРегистрации.Предупреждение
			, Метаданные.Константы.ПрефиксКартыДисконта
			, ПрефиксКарты
			,
			, "Изменение с [" + ПрефиксКартыДисконта + "] на [" + ПрефиксКарты + "]"
			,
			, Истина
			, Ложь
		);

		ПрефиксКартыДисконта = Константы.ПрефиксКартыДисконта.Получить();

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьВиртуальнуюКартуДляКонтрагента(Контрагент)	//	LNK 31.08.2021 09:08:17

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаКарты.Ссылка КАК Карта
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ТаблицаКарты
	|ГДЕ
	|	ТаблицаКарты.ВладелецКарты = &Контрагент
	|	И ТаблицаКарты.ВидДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.ВидыДисконтныхКарт.ВиртуальныеКарты)"
	);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();

	ЗначениеВозврата = Справочники.ИнформационныеКарты.ПустаяСсылка();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗначениеВозврата = Выборка.Карта;

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции

Функция ИмяСобытия()

	Возврат "ВИРТУАЛЬНЫЕ_КАРТЫ";

КонецФункции

#КонецОбласти	//	Виртуальные_Карты_СлужебныйФункционал

#КонецОбласти	//	ВИРТУАЛЬНЫЕ_КАРТЫ_ПОКУПАТЕЛЕЙ
















