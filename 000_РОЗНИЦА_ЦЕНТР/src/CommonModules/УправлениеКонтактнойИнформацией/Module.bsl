////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы и модуля объекта

// Обработчик для события формы ПриСозданииНаСервере
//
// Параметры:
//    Форма                - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации
//    Объект               - Объект-владелец контактной информации
//    ПоложениеЗаголовкаКИ - Может принимать значения ПоложениеЗаголовкаЭлементаФормы.Лево 
//                           или ПоложениеЗаголовкаЭлементаФормы.Верх (по умолчанию)
//
Процедура ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения = "", ПоложениеЗаголовкаКИ = "") Экспорт
	
	Строка500 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
	
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	// Создадим таблицу значений
	ИмяОписания = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяРеквизита", Строка500, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Вид", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Тип", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗначенияПолей", Новый ОписаниеТипов("СписокЗначений, Строка"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Представление", Строка500, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Комментарий", Новый ОписаниеТипов("Строка"), ИмяОписания));
	
	ИмяТаблицыДобавленных = "ДобавленныеЭлементыКонтактнойИнформации";
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяТаблицыДобавленных, Новый ОписаниеТипов("ТаблицаЗначений")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяЭлемента", Строка500, ИмяТаблицыДобавленных));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Приоритет", Новый ОписаниеТипов("Число"), ИмяТаблицыДобавленных));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоКоманда", ОписаниеТипаБулево, ИмяТаблицыДобавленных));
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СписокДобавляемыхЭлементовКонтактнойИнформации", Новый ОписаниеТипов("СписокЗначений")));
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("КонтактнаяИнформацияПоложениеЗаголовка", Строка500));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("КонтактнаяИнформацияГруппаДляРазмещения", Строка500));
	
	// Получим список видов КИ
	
	СсылкаНаОбъект = Объект.Ссылка;
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
	ИмяГруппыВидовКИ = СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "");
	ГруппаВидовКИ = Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ];
	ИмяОбъекта = МетаданныеОбъекта.Имя;
	
	Запрос = Новый Запрос(СтрЗаменить(
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК Представление,
	|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	|	КонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
	|	КонтактнаяИнформация.Вид КАК Вид
	|ПОМЕСТИТЬ КонтактнаяИнформация
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВиды.Ссылка КАК Вид,
	|	ТаблицаВиды.Тип КАК Тип,
	|	ТаблицаВиды.ОбязательноеЗаполнение КАК ОбязательноеЗаполнение,
	|	ТаблицаВиды.Подсказка КАК Подсказка,
	|	ТаблицаВиды.Наименование КАК Наименование,
	|	ТаблицаВиды.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	ЕСТЬNULL(ТабличнаяЧасть.Представление, """") КАК Представление,
	|	ЕСТЬNULL(ТабличнаяЧасть.ЗначенияПолей, """") КАК ЗначенияПолей,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ("""""""" КАК СТРОКА(200)) КАК ИмяРеквизита,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК Комментарий
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ТаблицаВиды
	|		ЛЕВОЕ СОЕДИНЕНИЕ КонтактнаяИнформация КАК ТабличнаяЧасть
	|		ПО ТаблицаВиды.Ссылка = ТабличнаяЧасть.Вид
	|ГДЕ
	|	(ТаблицаВиды.Родитель = &ГруппаВидовКИ
	|			ИЛИ ТаблицаВиды.Родитель.Родитель = &ГруппаВидовКИ)
	|	И ТаблицаВиды.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование"
	, "Справочник.Контрагенты", ПолноеИмяОбъектаМетаданных)
	);
	Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
	Запрос.УстановитьПараметр("Владелец", СсылкаНаОбъект);

	УстановитьПривилегированныйРежим(Истина);
	КонтактнаяИнформация = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией).Строки;
	УстановитьПривилегированныйРежим(Ложь);
	
	КонтактнаяИнформация.Сортировать("РеквизитДопУпорядочивания, НомерСтроки");
	
	Для Каждого ОбъектКонтактнойИнформации Из КонтактнаяИнформация Цикл
		
		ОбъектКонтактнойИнформации.ИмяРеквизита = "КонтактнаяИнформацияПоле" + КонтактнаяИнформация.Индекс(ОбъектКонтактнойИнформации);
		ОбъектКонтактнойИнформации.Комментарий = КонтактнаяИнформацияСлужебный.КомментарийКонтактнойИнформации(ОбъектКонтактнойИнформации.ЗначенияПолей);
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ОбъектКонтактнойИнформации.ИмяРеквизита, Строка500, , ОбъектКонтактнойИнформации.Наименование, Истина));
		
	КонецЦикла;
	
	// Добавим новые реквизиты
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	Форма.КонтактнаяИнформацияПоложениеЗаголовка = ПоложениеЗаголовкаКИ;
	Форма.КонтактнаяИнформацияГруппаДляРазмещения = ИмяЭлементаДляРазмещения;
	
	ПредыдущийВид = Неопределено;
	
	Отбор = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	КоличествоАдресов = КонтактнаяИнформация.НайтиСтроки(Отбор).Количество();
	
	// Создадим элементы на форме и заполним значения реквизитов
	Родитель = ?(ПустаяСтрока(ИмяЭлементаДляРазмещения), Форма, Форма.Элементы[ИмяЭлементаДляРазмещения]);
	
	// Создаем группы для контактной информации
	ГруппаКомпоновки = Группа("ГруппаКомпоновкиКонтактнойИнформации",
	Форма, Родитель, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, 5);
	ГруппаЗаголовков = Группа("ГруппаЗаголовковКонтактнойИнформации",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
	ГруппаПолейВвода = Группа("ГруппаПолейВводаКонтактнойИнформации",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
	ГруппаДействий = Группа("ГруппаДействийКонтактнойИнформации",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
	
	ЗаголовокСлева = ЗаголовокСлева(Форма, ПоложениеЗаголовкаКИ);
	
	Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
		
		Вид = СтрокаКИ.Вид;
		Тип = СтрокаКИ.Тип;
		ЕстьКомментарий = ЗначениеЗаполнено(СтрокаКИ.Комментарий);
		ИмяРеквизита = СтрокаКИ.ИмяРеквизита;
		
		ЭтоНовыйВидКИ = (Вид <> ПредыдущийВид);
		
		// Добавляем заголовок
		Если ЗаголовокСлева Тогда
			
			Заголовок(Форма, Тип, ИмяРеквизита, ГруппаЗаголовков, СтрокаКИ.Наименование, ЭтоНовыйВидКИ, ЕстьКомментарий);
			
		КонецЕсли;
		
		ПолеВвода(Форма, Вид, Тип, ИмяРеквизита, СтрокаКИ.Подсказка, ЭтоНовыйВидКИ, СтрокаКИ.ОбязательноеЗаполнение);
		
		// Выводим комментарий
		Если ЕстьКомментарий Тогда
			
			ИмяКомментария = "Комментарий" + ИмяРеквизита;
			Комментарий(Форма, СтрокаКИ.Комментарий, ИмяКомментария, ГруппаПолейВвода);
			
		КонецЕсли;
		
		// Заглушка , если заголовок у поля сверху
		Если Не ЗаголовокСлева И ЭтоНовыйВидКИ Тогда
			
			ИмяДекорации = "ДекорацияВерх" + ИмяРеквизита;
			Декорация = Форма.Элементы.Добавить(ИмяДекорации, Тип("ДекорацияФормы"), ГруппаДействий);
			ДобавитьОписаниеЭлемента(Форма, ИмяДекорации, 2);
			
		КонецЕсли;
		
		Действие(Форма, Тип, ИмяРеквизита, ГруппаДействий, КоличествоАдресов, ЕстьКомментарий);
		ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ЭтоНовыйВидКИ);
		
		ПредыдущийВид = Вид;
		
	КонецЦикла;
	
	Если Форма.СписокДобавляемыхЭлементовКонтактнойИнформации.Количество() > 0 Тогда
		
		ГруппаКоманды = Группа("ГруппаКонтактнаяИнформацияДобавитьПолеВвода",
		Форма, Родитель, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, 5);
		ГруппаКоманды.Отображение = ОтображениеОбычнойГруппы.Отступ;
		
		ИмяКоманды = "КонтактнаяИнформацияДобавитьПолеВвода";
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Подсказка = НСтр("ru='Добавить дополнительное поле контактной информации'");
		Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Команда.Картинка = БиблиотекаКартинок.ДобавитьЭлементСписка;
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
		
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаКоманды);
		Кнопка.Заголовок = НСтр("ru='Добавить'");
		Кнопка.ИмяКоманды = ИмяКоманды;
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для события формы ПриЧтенииНаСервере
Процедура ПриЧтенииНаСервере(Форма, Объект) Экспорт
	
	СписокРеквизитовФормы = Форма.ПолучитьРеквизиты();
	
	ПовторныйЗапуск = Ложь;
	Для Каждого Реквизит Из СписокРеквизитовФормы Цикл
		Если Реквизит.Имя = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов" Тогда
			ПовторныйЗапуск = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПовторныйЗапуск Тогда
		
		ПоложениеЗаголовкаКИ = Форма.КонтактнаяИнформацияПоложениеЗаголовка;
		ПоложениеЗаголовкаКИ = ?(ЗначениеЗаполнено(ПоложениеЗаголовкаКИ), ПоложениеЗаголовкаЭлементаФормы[ПоложениеЗаголовкаКИ], ПоложениеЗаголовкаЭлементаФормы.Верх);
		
		ИмяЭлементаДляРазмещения = Форма.КонтактнаяИнформацияГруппаДляРазмещения;
		
		УдалитьКомандыИЭлементыФормы(Форма);
		
		МассивУдаляемыхРеквизитов = Новый Массив;
		
		ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
		
		Для Каждого РеквизитФормы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл

			МассивУдаляемыхРеквизитов.Добавить(РеквизитФормы.ИмяРеквизита);

		КонецЦикла;
		
		МассивУдаляемыхРеквизитов.Добавить("ДобавленныеЭлементыКонтактнойИнформации");
		МассивУдаляемыхРеквизитов.Добавить("СписокДобавляемыхЭлементовКонтактнойИнформации");
		МассивУдаляемыхРеквизитов.Добавить("КонтактнаяИнформацияПоложениеЗаголовка");
		МассивУдаляемыхРеквизитов.Добавить("КонтактнаяИнформацияГруппаДляРазмещения");
		МассивУдаляемыхРеквизитов.Добавить("КонтактнаяИнформацияОписаниеДополнительныхРеквизитов");
		
		Форма.ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
		
		ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для события формы ОбработкаПроверкиЗаполненияНаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Объект, Отказ) Экспорт
	
	ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
	УровеньОшибок = 0;
	ПредыдущийВид = Неопределено;
	
	Для Каждого СтрокаТаблицы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		ВидИнформации = СтрокаТаблицы.Вид;
		ТипИнформации = СтрокаТаблицы.Тип;
		Комментарий   = СтрокаТаблицы.Комментарий;
		ИмяРеквизита  = СтрокаТаблицы.ИмяРеквизита;
		ОбязательноеЗаполнение = ВидИнформации.ОбязательноеЗаполнение;
		
		Представление = Форма[ИмяРеквизита];
		
		Если ВидИнформации <> ПредыдущийВид И ОбязательноеЗаполнение И ПустаяСтрока(Представление) Тогда
			
			ТекстСообщения = Нстр("ru = 'Поле ""%1"" не заполнено.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВидИнформации.Наименование);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,ИмяРеквизита);
			ТекущийУровеньОшибок = 2;
			
		Иначе
			
			ТекущийУровеньОшибок = ПроверитьКонтактнуюИнформацию(Представление, СтрокаТаблицы.ЗначенияПолей,
			ВидИнформации, ТипИнформации, ИмяРеквизита, Комментарий);
			
		КонецЕсли;
		
		УровеньОшибок = ?(ТекущийУровеньОшибок > УровеньОшибок, ТекущийУровеньОшибок, УровеньОшибок);
		
		ПредыдущийВид = ВидИнформации;
		
	КонецЦикла;
	
	Если УровеньОшибок <> 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для события формы ПередЗаписьюНаСервере
Процедура ПередЗаписьюНаСервере(Форма, Объект, Отказ = Ложь) Экспорт
	
	Объект.КонтактнаяИнформация.Очистить();
	ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
	ПредыдущийВид = Неопределено;
	
	Для Каждого СтрокаТаблицы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		ВидИнформации = СтрокаТаблицы.Вид;
		ТипИнформации = СтрокаТаблицы.Тип;
		ИмяРеквизита  = СтрокаТаблицы.ИмяРеквизита;
		ОбязательноеЗаполнение = ВидИнформации.ОбязательноеЗаполнение;
		
		ЗаписатьКонтактнуюИнформацию(Объект, СтрокаТаблицы.ЗначенияПолей, ВидИнформации, ТипИнформации, Объект.КонтактнаяИнформация.Добавить());
		
		ПредыдущийВид = ВидИнформации;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет (удаляет) поле ввода или комментарий на форму
//
Функция ОбновитьКонтактнуюИнформацию(Форма, Объект, Результат = Неопределено) Экспорт
	
	Если Результат.Свойство("ЭтоДобавлениеКомментария") Тогда
		
		ИзменитьКомментарий(Форма, Результат.ИмяРеквизита, Результат.ЭтоДобавлениеКомментария);
		
	ИначеЕсли Результат.Свойство("ДобавляемыйВид") Тогда
		
		ДобавитьСтрокуКонтактнойИнформации(Форма, Результат);
		
	КонецЕсли;
	
КонецФункции

// Проверяет адрес на соответствие российского адреса требованиям к адресной информации
//
// Параметры:
//    СтруктураПолейАдреса - Структура, СписокЗначений, Строка, содержащая поля адресной информации
//                           Структура и СписокЗначений, содержит имена полей адреса и их значения,
//                           Строка - содержит строки с именами полей и их значениями
//
//    ВидКонтактнойИнформации - необязательная ссылка на справочник "Виды контактной информации" 
//                              соответствующая проверяемому адресу
//
// Возвращаемое значение:
//    Массив структур с полями:
//        - ТипОшибки - строка с наименованием ошибки. Принимаемые значения:
//                - ПредставлениеНеСоответствуетНаборуПолей
//                - НеЗаполненыОбязательныеПоля
//                - НеУказаныСокращенияПолей
//                - НедопустимыеСимволыПолей
//                - НеСоответствуетДлинаПолей
//                - ОшибкиПоКлассификатору
//        - Сообщение - Подробный текст ошибки
//        - Поля - массив структур с полями:
//                - ИмяПоля - Строка, название элемента в структуре адреса
//                - Сообщение - строка, подробный текст ошибки для поля
//
Функция ПроверитьАдрес(Знач СтруктураПолейАдреса, ВидКонтактнойИнформации=Неопределено) Экспорт
	Возврат КонтактнаяИнформацияСлужебный.ОшибкиЗаполненияАдреса(СтруктураПолейАдреса, ВидКонтактнойИнформации, Истина);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Чтение контактной информации другими подсистемами

// Получить значение определенного вида контактной информации у объекта.
//
// Параметры
//  Ссылка                  - ЛюбаяСсылка - ссылка на объект-владелец контактной информации (организация, контрагент, партнер и т.д.)
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации
//
// Возвращаемое значение:
//  Строка - строковое представление значения.
//
Функция ПолучитьКонтактнуюИнформацияОбъекта(Ссылка, ВидКонтактнойИнформации) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Ссылка);
	
	КонтактнаяИнформацияОбъекта = КонтактнаяИнформацияОбъектов(МассивОбъектов,, ВидКонтактнойИнформации);
	
	Если КонтактнаяИнформацияОбъекта.Количество() > 0 Тогда
		Возврат КонтактнаяИнформацияОбъекта[0].Представление;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Предназначена для создания временной таблицы с контактной информацией нескольких объектов
//
// Параметры:
//    МенеджерВременныхТаблиц
//    МассивОбъектов, массив владельцев контактной информации
//        Тип – массив
//        Все элементы одного типа
//    ТипыКИ – массив, необязательный, если не задан все типы
//    ВидыКИ – массив, необязательный, если не задан все виды
//
// В менеджер создается временная таблица ВТКонтактнаяИнформация с полями:
//    Объект
//    Вид
//    Тип
//    ЗначенияПолей
//    Представление
//
Процедура СоздатьВТКонтактнаяИнформация(МенеджерВременныхТаблиц, МассивОбъектов, ТипыКИ = Неопределено, ВидыКИ = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ТипыКИ", ТипыКИ);
	Запрос.УстановитьПараметр("ВидыКИ", ВидыКИ);
	
	Если ТипЗнч(МассивОбъектов) = Тип("Массив") И МассивОбъектов.Количество() > 0 Тогда
		Ссылка = МассивОбъектов.Получить(0);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Ссылка КАК Объект,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	|	КонтактнаяИнформация.Представление КАК Представление
	|ПОМЕСТИТЬ ВТКонтактнаяИнформация
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + ".КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка В(&МассивОбъектов)
	|	И (КонтактнаяИнформация.Тип В (&ТипыКИ)
	|			ИЛИ &ТипыКИ = НЕОПРЕДЕЛЕНО)
	|	И (КонтактнаяИнформация.Вид В (&ВидыКИ)
	|			ИЛИ &ВидыКИ = НЕОПРЕДЕЛЕНО)";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Предназначена для получения контактной информации для нескольких объектов
//
// Параметры:
//    МассивОбъектов, массив владельцев контактной информации
//        Тип – массив
//        Все элементы одного типа
//    ТипыКИ – массив, необязательный, если не задан все типы
//    ВидыКИ – массив, необязательный, если не задан все виды
//
// Возвращаемое значение
//    Таблица значений с полями:
//        Объект
//        Вид
//        Тип
//        ЗначенияПолей
//        Представление
//
Функция КонтактнаяИнформацияОбъектов(МассивОбъектов, ТипыКИ = Неопределено, ВидыКИ = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТКонтактнаяИнформация(Запрос.МенеджерВременныхТаблиц, МассивОбъектов, ТипыКИ, ВидыКИ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект КАК Объект,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	|	КонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	ВТКонтактнаяИнформация КАК КонтактнаяИнформация";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики[
		"СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"
	].Добавить("УправлениеКонтактнойИнформацией");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Обновляет поля контактной информации из ТаблицыЗначений (например объекта другого вида справочника)
//
// Параметры:
//    Источник - ТаблицаЗначений - таблица значений с контактной информацией.
//    Приемник - УправляемаяФорма - форма объекта. куда надо передать контактную информацию.
//
Процедура ЗаполнитьКонтактнуюИнформацию(Источник, Приемник) Экспорт
	КоллекцияПолейКонтактнойИнформации = Приемник.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Для Каждого ЭлементКоллекцияПолейКонтактнойИнформации Из КоллекцияПолейКонтактнойИнформации Цикл
		
		СтрокаВКИ = Источник.Найти(ЭлементКоллекцияПолейКонтактнойИнформации.Вид, "Вид");
		Если СтрокаВКИ <> Неопределено Тогда
			Приемник[ЭлементКоллекцияПолейКонтактнойИнформации.ИмяРеквизита] = СтрокаВКИ.Представление;
			ЭлементКоллекцияПолейКонтактнойИнформации.ЗначенияПолей          = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(СтрокаВКИ.ЗначенияПолей);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Будет удалено в следующем релизе БСП. Необходимо использовать вызов процедуры "ЗаполнитьКонтактнуюИнформацию"
Процедура ЗаполнитьКонтактнуюИнофрмацию(Источник, Приемник) Экспорт
	ЗаполнитьКонтактнуюИнформацию(Источник, Приемник);
КонецПроцедуры

Процедура ДобавитьОписаниеЭлемента(Форма, ИмяЭлемента, Приоритет, ЭтоКоманда = Ложь)
	
	НоваяСтрока = Форма.ДобавленныеЭлементыКонтактнойИнформации.Добавить();
	НоваяСтрока.ИмяЭлемента = ИмяЭлемента;
	НоваяСтрока.Приоритет = Приоритет;
	НоваяСтрока.ЭтоКоманда = ЭтоКоманда;
	
КонецПроцедуры

Процедура УдалитьОписаниеЭлемента(Форма, ИмяЭлемента)
	
	ДобавленныеЭлементы = Форма.ДобавленныеЭлементыКонтактнойИнформации;
	Отбор = Новый Структура("ИмяЭлемента", ИмяЭлемента);
	НайденнаяСтрока = ДобавленныеЭлементы.НайтиСтроки(Отбор)[0];
	ДобавленныеЭлементы.Удалить(НайденнаяСтрока);
	
КонецПроцедуры

Функция ЗаголовокСлева(Форма, Знач ПоложениеЗаголовкаКИ = Неопределено)
	
	Если Не ЗначениеЗаполнено(ПоложениеЗаголовкаКИ) Тогда
		
		СохраненноеПоложениеЗаголовка = Форма.КонтактнаяИнформацияПоложениеЗаголовка;
		Если ЗначениеЗаполнено(СохраненноеПоложениеЗаголовка) Тогда
			ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы[СохраненноеПоложениеЗаголовка];
		Иначе
			ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Верх;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат (ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Лево);
	
КонецФункции

Процедура ИзменитьКомментарий(Форма, ИмяРеквизита, ЭтоДобавлениеКомментария)
	
	ОписаниеКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденнаяСтрока = ОписаниеКонтактнойИнформации.НайтиСтроки(Отбор)[0];
	
	// Заголовок и поле ввода
	ЗаголовокЭлемента = Форма.Элементы.Найти("Заголовок" + ИмяРеквизита);
	ИмяКомментария = "Комментарий" + ИмяРеквизита;
	
	ЗаголовокСлева = ЗаголовокСлева(Форма);
	
	Если ЭтоДобавлениеКомментария Тогда
		
		ПолеВвода = Форма.Элементы.Найти(ИмяРеквизита);
		ГруппаПолейВвода = Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации;
		
		ТекущийЭлемент = ?(ГруппаПолейВвода.ПодчиненныеЭлементы.Найти(ПолеВвода.Имя) = Неопределено, ПолеВвода.Родитель, ПолеВвода);
		ИндексТекущегоЭлемента = ГруппаПолейВвода.ПодчиненныеЭлементы.Индекс(ТекущийЭлемент);
		СледующийЭлемент = ГруппаПолейВвода.ПодчиненныеЭлементы.Получить(ИндексТекущегоЭлемента + 1);
		
		Комментарий = Комментарий(Форма, НайденнаяСтрока.Комментарий, ИмяКомментария, ГруппаПолейВвода);
		Форма.Элементы.Переместить(Комментарий, ГруппаПолейВвода, СледующийЭлемент);
		
		Если ЗаголовокСлева Тогда
			
			ГруппаЗаголовков = Форма.Элементы.ГруппаЗаголовковКонтактнойИнформации;
			ИндексЗаголовка = ГруппаЗаголовков.ПодчиненныеЭлементы.Индекс(ЗаголовокЭлемента);
			СледующийЗаголовок = ГруппаЗаголовков.ПодчиненныеЭлементы.Получить(ИндексЗаголовка + 1);
			
			ИмяЗаглушки = "ЗаглушкаЗаголовка" + ИмяРеквизита;
			Заглушка = Форма.Элементы.Добавить(ИмяЗаглушки, Тип("ДекорацияФормы"), ГруппаЗаголовков);
			Форма.Элементы.Переместить(Заглушка, ГруппаЗаголовков, СледующийЗаголовок);
			ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушки, 2);
			
		КонецЕсли;
		
	Иначе
		
		Комментарий = Форма.Элементы[ИмяКомментария];
		Форма.Элементы.Удалить(Комментарий);
		УдалитьОписаниеЭлемента(Форма, ИмяКомментария);
		
		Если ЗаголовокСлева Тогда
			
			ЗаголовокЭлемента.Высота = 1;
			
			ИмяЗаглушки = "ЗаглушкаЗаголовка" + ИмяРеквизита;
			ЗаглушкаЗаголовка = Форма.Элементы[ИмяЗаглушки];
			Форма.Элементы.Удалить(ЗаглушкаЗаголовка);
			УдалитьОписаниеЭлемента(Форма, ИмяЗаглушки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Действие
	ГруппаДействий = Форма.Элементы.ГруппаДействийКонтактнойИнформации;
	ИмяЗаглушкиДействия = "ЗаглушкаДействия" + ИмяРеквизита;
	ЗаглушкаДействия = Форма.Элементы.Найти(ИмяЗаглушкиДействия);
	
	Если ЭтоДобавлениеКомментария Тогда
		
		Если ЗаглушкаДействия = Неопределено Тогда
			
			ЗаглушкаДействия = Форма.Элементы.Добавить(ИмяЗаглушкиДействия, Тип("ДекорацияФормы"), ГруппаДействий);
			ЗаглушкаДействия.Высота = 1;
			Действие = Форма.Элементы["Команда" + ИмяРеквизита];
			ИндексКоманды = ГруппаДействий.ПодчиненныеЭлементы.Индекс(Действие);
			СледующийЭлемент = ГруппаДействий.ПодчиненныеЭлементы.Получить(ИндексКоманды + 1);
			Если ЗаглушкаДействия <> СледующийЭлемент Тогда
				Форма.Элементы.Переместить(ЗаглушкаДействия, ГруппаДействий, СледующийЭлемент);
			КонецЕсли;
			ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия, 2);
			
		Иначе
			
			ЗаглушкаДействия.Высота = 2;
			
		КонецЕсли;
		
	Иначе
		
		Если ЗаглушкаДействия.Высота = 1 Тогда
			
			Форма.Элементы.Удалить(ЗаглушкаДействия);
			УдалитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия);
			
		Иначе
			
			ЗаглушкаДействия.Высота = 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуКонтактнойИнформации(Форма, Результат)
	
	ДобавляемыйВид = Результат.ДобавляемыйВид;
	ТаблицаКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Отбор = Новый Структура("Вид", ДобавляемыйВид);
	НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(Отбор);
	КоличествоЭлементов = НайденныеСтроки.Количество();
	
	ПоследняяСтрока = НайденныеСтроки.Получить(КоличествоЭлементов-1);
	ИндексДобавляемойСтроки = ТаблицаКонтактнойИнформации.Индекс(ПоследняяСтрока) + 1;
	ЭтоПоследняяСтрока = Ложь;
	Если ИндексДобавляемойСтроки = ТаблицаКонтактнойИнформации.Количество() Тогда
		ЭтоПоследняяСтрока = Истина;
	Иначе
		ИмяСледующегоРеквизита = ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки].ИмяРеквизита;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаКонтактнойИнформации.Вставить(ИндексДобавляемойСтроки);
	ИмяРеквизита = "КонтактнаяИнформацияПоле" + НоваяСтрока.ПолучитьИдентификатор();
	Тип = ДобавляемыйВид.Тип;
	НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
	НоваяСтрока.Вид = ДобавляемыйВид;
	НоваяСтрока.Тип = Тип;
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500)), , ДобавляемыйВид.Наименование, Истина));
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ЗаголовокСлева = ЗаголовокСлева(Форма);
	
	//Отрисовка на форме
	Если ЗаголовокСлева Тогда
		ГруппаЗаголовков = Форма.Элементы.ГруппаЗаголовковКонтактнойИнформации;
		Заголовок = Заголовок(Форма, Тип, ИмяРеквизита, ГруппаЗаголовков, ДобавляемыйВид.Наименование);
		
		Если Не ЭтоПоследняяСтрока Тогда
			СледующийЗаголовок = Форма.Элементы["Заголовок" + ИмяСледующегоРеквизита];
			Форма.Элементы.Переместить(Заголовок, ГруппаЗаголовков, СледующийЗаголовок);
		КонецЕсли;
	КонецЕсли;
	
	ГруппаПолейВвода = Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации;
	ПолеВвода = ПолеВвода(Форма, ДобавляемыйВид, Тип, ИмяРеквизита, ДобавляемыйВид.Подсказка);
	
	Если Не ЭтоПоследняяСтрока Тогда
		
		ИмяСледующегоЭлемента = ПоследняяСтрока.ИмяРеквизита;
		
		Если ЗначениеЗаполнено(ПоследняяСтрока.Комментарий) Тогда
			ИмяСледующегоЭлемента = "Комментарий" + ИмяСледующегоЭлемента;
		КонецЕсли;
		
		ИндексСледующегоЭлемента = ГруппаПолейВвода.ПодчиненныеЭлементы.Индекс(Форма.Элементы[ИмяСледующегоЭлемента]) + 1;
		СледующийЭлемент = ГруппаПолейВвода.ПодчиненныеЭлементы.Получить(ИндексСледующегоЭлемента);
		
		Форма.Элементы.Переместить(ПолеВвода, ГруппаПолейВвода, СледующийЭлемент);
		
	КонецЕсли;
	
	ГруппаДействий = Форма.Элементы.ГруппаДействийКонтактнойИнформации;
	Отбор = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	КоличествоАдресов = ТаблицаКонтактнойИнформации.НайтиСтроки(Отбор).Количество();
	
	ИмяДействия = "Команда" + ИмяСледующегоРеквизита;
	ИмяЗаглушки = "ДекорацияВерх" + ИмяСледующегоРеквизита;
	
	Если Форма.Элементы.Найти(ИмяЗаглушки) <> Неопределено Тогда
		ИмяСледующегоДействия = ИмяЗаглушки;
	ИначеЕсли Форма.Элементы.Найти(ИмяДействия) <> Неопределено Тогда
		ИмяСледующегоДействия = ИмяДействия;
	Иначе
		ИмяСледующегоДействия = "ЗаглушкаДействия" + ИмяСледующегоРеквизита;
	КонецЕсли;
	
	Действие = Действие(Форма, Тип, ИмяРеквизита, ГруппаДействий, КоличествоАдресов);
	Если Не ЭтоПоследняяСтрока Тогда
		СледующееДействие = Форма.Элементы[ИмяСледующегоДействия];
		Форма.Элементы.Переместить(Действие, ГруппаДействий, СледующееДействие);
	КонецЕсли;
	
	Форма.ТекущийЭлемент = Форма.Элементы[ИмяРеквизита];
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
		И ДобавляемыйВид.РедактированиеТолькоВДиалоге Тогда
		
		Результат.Вставить("ЭлементФормыАдреса", ИмяРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры

Функция Заголовок(Форма, Тип, ИмяРеквизита, ГруппаЗаголовков, Наименование, ЭтоНовыйВидКИ = Ложь, ЕстьКомментарий = Ложь)
	
	ИмяЗаголовка = "Заголовок" + ИмяРеквизита;
	Элемент = Форма.Элементы.Добавить(ИмяЗаголовка, Тип("ДекорацияФормы"), ГруппаЗаголовков);
	Элемент.Заголовок = ?(ЭтоНовыйВидКИ, Наименование + ":", "");
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Элемент.Высота = 5;
		Элемент.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
	Иначе
		Элемент.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
	КонецЕсли;
	
	ДобавитьОписаниеЭлемента(Форма, ИмяЗаголовка, 2);
	
	Если ЕстьКомментарий Тогда
		
		ИмяЗаглушки = "ЗаглушкаЗаголовка" + ИмяРеквизита;
		Заглушка = Форма.Элементы.Добавить(ИмяЗаглушки, Тип("ДекорацияФормы"), ГруппаЗаголовков);
		ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушки, 2);
		
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ПолеВвода(Форма, Вид, Тип, ИмяРеквизита, Подсказка, ЭтоНовыйВидКИ = Ложь, ОбязательноеЗаполнение = Ложь)
	
	ЗаголовокСлева = ЗаголовокСлева(Форма);
	
	Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.Подсказка = Подсказка;
	Элемент.ПутьКДанным = ИмяРеквизита;
	Элемент.РастягиватьПоГоризонтали = Истина;
	Элемент.ПоложениеЗаголовка = ?(ЗаголовокСлева Или Не ЭтоНовыйВидКИ, ПоложениеЗаголовкаЭлементаФормы.Нет, ПоложениеЗаголовкаЭлементаФормы.Верх);
	Элемент.УстановитьДействие("Очистка", "Подключаемый_КонтактнаяИнформацияОчистка");
	
	ДобавитьОписаниеЭлемента(Форма, ИмяРеквизита, 2);
	
	// Устанавливаем свойства поля ввода
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Элемент.Высота = 5;
		Элемент.МногострочныйРежим = Истина;
		Элемент.РастягиватьПоВертикали = Ложь;
	Иначе
		
		// Ввод комментария через контекстное меню
		ИмяКоманды = "КонтекстноеМеню" + ИмяРеквизита;
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
		Команда.Подсказка = НСтр("ru='Ввести комментарий'");
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Кнопка.Заголовок = НСтр("ru='Ввести комментарий'");
		Кнопка.ИмяКоманды = ИмяКоманды;
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 1);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
		
	КонецЕсли;
	
	Если ОбязательноеЗаполнение И ЭтоНовыйВидКИ Тогда
		Элемент.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	// Редактирование в диалоге
	Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(Тип) Тогда
		
		Элемент.КнопкаВыбора = Истина;
		
		Если Вид.РедактированиеТолькоВДиалоге Тогда
			Элемент.РедактированиеТекста = Ложь;
			Элемент.ЦветФона = ЦветаСтиля.КонтактнаяИнформацияСРедактированиемВДиалогеЦвет;
		КонецЕсли;
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
		
	КонецЕсли;
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
	
	Возврат Элемент;
	
КонецФункции

Функция Действие(Форма, Тип, ИмяРеквизита, ГруппаДействий, КоличествоАдресов, ЕстьКомментарий = Ложь)
	
	Если (Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница
		Или Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		Или (Тип = Перечисления.ТипыКонтактнойИнформации.Адрес И КоличествоАдресов > 1) Тогда
		
		// Есть действие
		ИмяКоманды = "Команда" + ИмяРеквизита;
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
		Команда.Отображение = ОтображениеКнопки.Картинка;
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Элемент = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаДействий);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
		Элемент.ИмяКоманды = ИмяКоманды;
		
		Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			
			Элемент.Заголовок = НСтр("ru='Заполнить'");
			Команда.Подсказка = НСтр("ru='Заполнить адрес'");
			Команда.Картинка = БиблиотекаКартинок.ПереместитьВлево;
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			
			Элемент.Заголовок = НСтр("ru='Перейти'");
			Команда.Подсказка = НСтр("ru='Перейти по ссылке'");
			Команда.Картинка = БиблиотекаКартинок.КонтактнаяИнформацияПерейтиПоСсылке;
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			
			Элемент.Заголовок = НСтр("ru='Написать письмо'");
			Команда.Подсказка = НСтр("ru='Написать письмо'");
			Команда.Картинка = БиблиотекаКартинок.ОтправитьЭлектронноеПисьмо;
			
		КонецЕсли;
		
		Если ЕстьКомментарий Тогда
			
			ИмяЗаглушкиДействия = "ЗаглушкаДействия" + ИмяРеквизита;
			ЗаглушкаДействия = Форма.Элементы.Добавить(ИмяЗаглушкиДействия, Тип("ДекорацияФормы"), ГруппаДействий);
			ЗаглушкаДействия.Высота = 1;
			ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия, 2);
			
		КонецЕсли;
		
	Иначе
		
		//Действия нет, ставим заглушку
		ИмяЗаглушкиДействия = "ЗаглушкаДействия" + ИмяРеквизита;
		Элемент = Форма.Элементы.Добавить(ИмяЗаглушкиДействия, Тип("ДекорацияФормы"), ГруппаДействий);
		ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия, 2);
		Если ЕстьКомментарий Тогда
			Элемент.Высота = 2;
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
			Элемент.Высота = 5;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция Комментарий(Форма, Комментарий, ИмяКомментария, ГруппаДляРазмещения)
	
	Элемент = Форма.Элементы.Добавить(ИмяКомментария, Тип("ДекорацияФормы"), ГруппаДляРазмещения);
	Элемент.Заголовок = Комментарий;
	Элемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	Элемент.РастягиватьПоГоризонтали = Истина;
	Элемент.РастягиватьПоВертикали = Ложь;
	Элемент.Высота = 1;
	Элемент.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
	
	ДобавитьОписаниеЭлемента(Форма, ИмяКомментария, 2);
	
	Возврат Элемент;
	
КонецФункции

Функция Группа(ИмяГруппы, Форма, Родитель, Группировка, ПорядокУдаления)
	
	НоваяГруппа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка = Группировка;
	ДобавитьОписаниеЭлемента(Форма, ИмяГруппы, ПорядокУдаления);
	
	Возврат НоваяГруппа;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем БСП

// Заполняет массив типов неразделенных данных. Он используется при обновлении ссылок 
// при загрузке-выгрузке конфигурации
// 
// Параметры:
//    МассивТипов - массив
//
Процедура ПриОпределенииСтандартныхТиповОбщихДанных(Знач МассивТипов) Экспорт
	
	МассивТипов.Добавить(Тип("СправочникСсылка.СтраныМира"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение дополнительных реквизитов табличной части "Контактная информация"

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для адреса
//
// Параметры:
//    СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - объект XDTO с контактной информацией
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаТабличнойЧасти, Источник)
	
	// Умолчания
	СтрокаТабличнойЧасти.Страна = "";
	СтрокаТабличнойЧасти.Область = "";
	СтрокаТабличнойЧасти.Город  = "";
	
	Адрес = Источник.Состав;
	
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	ЭтоАдрес = ТипЗнч(Адрес)=Тип("ОбъектXDTO") И Адрес.Тип()=ФабрикаXDTO.Тип(ПространствоИмен, "Адрес");
	Если ЭтоАдрес И Адрес.Состав<>Неопределено Тогда 
		СтрокаТабличнойЧасти.Страна = Адрес.Страна;
		ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
		АдресПострочно = КонтактнаяИнформацияСлужебный.ПострочныйАдрес(Адрес);
		Если АдресПострочно<>Неопределено Тогда
			Если АдресПострочно.Тип()=ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
				СтрокаТабличнойЧасти.Область = АдресПострочно.СубъектРФ;
			Иначе
				СтрокаТабличнойЧасти.Область = АдресПострочно.Область;
			КонецЕсли;
			СтрокаТабличнойЧасти.Город  = АдресПострочно.Город;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для адреса электронной почты.
//
// Параметры:
//    СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - объект XDTO с контактной информацией
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(СтрокаТабличнойЧасти, Источник)
	
	Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СтрокаТабличнойЧасти.Представление, Ложь);
	
	Если Результат.Количество() > 0 Тогда
		СтрокаТабличнойЧасти.АдресЭП = Результат[0].Адрес;
		
		Поз = Найти(СтрокаТабличнойЧасти.АдресЭП, "@");
		Если Поз <> 0 Тогда
			СтрокаТабличнойЧасти.ДоменноеИмяСервера = Сред(СтрокаТабличнойЧасти.АдресЭП, Поз+1);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для телефона и факса.
//
// Параметры:
//    СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - объект XDTO с контактной информацией
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаТабличнойЧасти, Источник)
	
	// Умолчания
	СтрокаТабличнойЧасти.НомерТелефонаБезКодов = "";
	СтрокаТабличнойЧасти.НомерТелефона         = "";
	
	Телефон = Источник.Состав;
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Если Телефон<>Неопределено И Телефон.Тип()=ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
		КодСтраны     = Телефон.КодСтраны;
		КодГорода     = Телефон.КодГорода;
		НомерТелефона = Телефон.Номер;
		
		Если Лев(КодСтраны, 1) = "+" Тогда
			КодСтраны = Сред(КодСтраны, 2);
		КонецЕсли;
		
		Поз = Найти(НомерТелефона, ",");
		Если Поз <> 0 Тогда
			НомерТелефона = Лев(НомерТелефона, Поз-1);
		КонецЕсли;
		
		Поз = Найти(НомерТелефона, Символы.ПС);
		Если Поз <> 0 Тогда
			НомерТелефона = Лев(НомерТелефона, Поз-1);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.НомерТелефонаБезКодов = УбратьРазделителиВНомерТелефона(НомерТелефона);
		СтрокаТабличнойЧасти.НомерТелефона         = УбратьРазделителиВНомерТелефона(Строка(КодСтраны) + КодГорода + НомерТелефона);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для телефона и факса.
//
// Параметры:
//    СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - объект XDTO с контактной информацией
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(СтрокаТабличнойЧасти, Источник)
	
	// Умолчания
	СтрокаТабличнойЧасти.ДоменноеИмяСервера = "";
	
	АдресСтраницы = Источник.Состав;
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Если АдресСтраницы<>Неопределено И АдресСтраницы.Тип()=ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт") Тогда
		АдресСтрокой = АдресСтраницы.Значение;
		
		//Удалим протокол
		АдресСервера = Прав(АдресСтрокой, СтрДлина(АдресСтрокой) - Найти(АдресСтрокой, "://") );
		Поз = Найти(АдресСервера, "/");
		//Удалим путь
		АдресСервера = ?(Поз=0, АдресСервера, Лев(АдресСервера,  Поз-1));
		
		СтрокаТабличнойЧасти.ДоменноеИмяСервера = АдресСервера;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет контактную информацию электронной почты и сообщает об ошибках. 
//  Возвращает уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие
//
//  Параметры:
//     Источник      - объект XDTO с контактной информацией
//     ВидИнформации - ссылка на справочник видов КИ с настройками проверки
//     ИмяРеквизита  - необязательно имя реквизита для привязки сообщения об ошибке
//
Функция ОшибкиЗаполненияЭлектроннойПочты(Источник, ВидИнформации, Знач ИмяРеквизита="", ПолеРеквизита = "")
	
	Если Не ВидИнформации.ПроверятьКорректность Тогда
		Возврат 0;
	КонецЕсли;
	
	СтрокаОшибки = "";
	
	АдресЭП = Источник.Состав;
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Если АдресЭП <> Неопределено И АдресЭП.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта") Тогда
		Попытка
			Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(АдресЭП.Значение);
			Если Результат.Количество() > 1 Тогда
				
				СтрокаОшибки = Нстр("ru = 'Допускается ввод только одного адреса электронной почты'");
				
			КонецЕсли;
		Исключение
			СтрокаОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтрокаОшибки) Тогда
		ВывестиСообщениеПользователю(СтрокаОшибки, ИмяРеквизита, ПолеРеквизита);
		УровеньОшибки = ?(ВидИнформации.ЗапрещатьВводНекорректного, 2, 1);
	Иначе
		УровеньОшибки = 0;
	КонецЕсли;
	
	Возврат УровеньОшибки;
	
КонецФункции

// Проверяет контактную информацию адреса и сообщает об ошибках. Возвращает флаг наличия ошибок
// Возвращает уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие
//
// Параметры:
//    Источник      - объект XDTO с контактной информацией
//    ВидИнформации - ссылка на справочник видов КИ с настройками проверки
//    ИмяРеквизита  - необязательно имя реквизита для привязки сообщения об ошибке
//
Функция ОшибкиЗаполненияАдреса(Источник, ВидИнформации, ИмяРеквизита="", ПолеРеквизита = "")
	Если Не ВидИнформации.ПроверятьКорректность Тогда
		Возврат 0;
	КонецЕсли;
	ЕстьОшибки = Ложь;
	
	Адрес = Источник.Состав;
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Если Адрес<>Неопределено И Адрес.Тип()=ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		СписокОшибок = КонтактнаяИнформацияСлужебный.ОшибкиЗаполненияАдреса(Адрес, ВидИнформации);
		Для Каждого Элемент Из СписокОшибок Цикл
			ВывестиСообщениеПользователю(Элемент.Представление, ИмяРеквизита, ПолеРеквизита);
			ЕстьОшибки = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьОшибки И ВидИнформации.ЗапрещатьВводНекорректного Тогда
		Возврат 2;
	ИначеЕсли ЕстьОшибки Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
КонецФункции    

//  Проверяет контактную информацию телефона и сообщает об ошибках. Возвращает флаг наличия ошибок
//  Возвращает уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие
//
//  Параметры:
//    Источник      - объект XDTO с контактной информацией
//    ВидИнформации - ссылка на справочник видов КИ с настройками проверки
//    ИмяРеквизита  - необязательно имя реквизита для привязки сообщения об ошибке
//
Функция ОшибкиЗаполненияТелефона(Источник, ВидИнформации, ИмяРеквизита="")
	Возврат 0;
КонецФункции

// Проверяет контактную информацию веб страницы и сообщает об ошибках. Возвращает флаг наличия ошибок
// Возвращает уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие
//
// Параметры:
//    Источник      - объект XDTO с контактной информацией
//    ВидИнформации - ссылка на справочник видов КИ с настройками проверки
//    ИмяРеквизита  - необязательно имя реквизита для привязки сообщения об ошибке
//
Функция ОшибкиЗаполненияВебСтраницы(Источник, ВидИнформации, ИмяРеквизита="")
	Возврат 0;
КонецФункции

// Убирает разделители в номере телефона.
//
// Параметры:
//    НомерТелефона - Строка - номер телефона или факса.
//
// Возвращаемое значение - Строка - номер телефона или факса без разделителей.
//
Функция УбратьРазделителиВНомерТелефона(Знач НомерТелефона)
	
	Поз = Найти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	
	Возврат НомерТелефона;
	
КонецФункции

// Проверяет контактную информацию и записывает ее в таблицу значений
//
Функция ПроверитьКонтактнуюИнформацию(Представление, ЗначенияПолей, ВидИнформации, ТипИнформации,
	ИмяРеквизита, Комментарий = Неопределено, ПутьКРеквизиту = "")
	
	ТекстСериализации = ?(ПустаяСтрока(ЗначенияПолей), Представление, ЗначенияПолей);
	
	ОбъектКИ = КонтактнаяИнформацияСлужебный.ДесериализацияКонтактнойИнформации(ТекстСериализации, ВидИнформации);
	Если Комментарий <> Неопределено Тогда
		КонтактнаяИнформацияСлужебный.КомментарийКонтактнойИнформации(ОбъектКИ, Комментарий);
	КонецЕсли;
	
	КонтактнаяИнформацияСлужебный.ПредставлениеКонтактнойИнформации(ОбъектКИ, Представление);
	ЗначенияПолей = КонтактнаяИнформацияСлужебный.СериализацияКонтактнойИнформации(ОбъектКИ);
	
	Если ПустаяСтрока(Представление) И ПустаяСтрока(ОбъектКИ.Комментарий) Тогда
		Возврат 0;
	КонецЕсли;
	
	// Проверка
	Если ТипИнформации=Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		УровеньОшибок = ОшибкиЗаполненияЭлектроннойПочты(ОбъектКИ, ВидИнформации, ИмяРеквизита, ПутьКРеквизиту);
	ИначеЕсли ТипИнформации=Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		УровеньОшибок = ОшибкиЗаполненияАдреса(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации=Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		УровеньОшибок = ОшибкиЗаполненияТелефона(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации=Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		УровеньОшибок = ОшибкиЗаполненияТелефона(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации=Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		УровеньОшибок = ОшибкиЗаполненияВебСтраницы(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	Иначе
		// Другое(прочее) не проверяем
		УровеньОшибок = 0;
	КонецЕсли;
	
	Возврат УровеньОшибок;
	
КонецФункции

Процедура ЗаписатьКонтактнуюИнформацию(Объект, ЗначенияПолей, ВидИнформации, ТипИнформации, НоваяСтрока) Экспорт
	
	ОбъектКИ = КонтактнаяИнформацияСлужебный.ДесериализацияКонтактнойИнформации(ЗначенияПолей, ВидИнформации);
	
	Если ПустаяСтрока(ОбъектКИ.Представление) И ПустаяСтрока(ОбъектКИ.Комментарий) Тогда
		Возврат;
	КонецЕсли;
	
	//НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
	НоваяСтрока.Представление = ОбъектКИ.Представление;
	НоваяСтрока.ЗначенияПолей = ЗначенияПолей;
	НоваяСтрока.Вид           = ВидИнформации;
	НоваяСтрока.Тип           = ТипИнформации;
	
	// Заполнение дополнительных реквизитов ТЧ
	Если ТипИнформации=Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(НоваяСтрока, ОбъектКИ);
		
	ИначеЕсли ТипИнформации=Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(НоваяСтрока, ОбъектКИ);
		
	ИначеЕсли ТипИнформации=Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрока, ОбъектКИ);
		
	ИначеЕсли ТипИнформации=Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрока, ОбъектКИ);
		
	ИначеЕсли ТипИнформации=Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(НоваяСтрока, ОбъектКИ);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные

// Заполняет дополнительные реквизиты строки табличной части "Контактная информация"
//
// Параметры:
//    СтрокаКИ       - строка табличной части "Контактная информация"
//    Представление - Строка, представление значения
//    ЗначенияПолей - список значений, значения полей
//
Процедура ЗаполнитьДополнительныеРеквизитыКонтактнойИнформации(СтрокаКИ, Представление, ЗначенияПолей)
	
	// Заполним значения дополнительных реквизитов таб. части
	Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		// Email
		СообщениеОбОшибке = "";
		ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(СтрокаКИ, СообщениеОбОшибке);
		Если НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, , Представление);
			Отказ = Истина;
		КонецЕсли;
	ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		// Адрес
		ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаКИ, ЗначенияПолей);
	ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
		Или СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		// Телефон/факс
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаКИ, ЗначенияПолей);
	ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		// WWW
		ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(СтрокаКИ, ЗначенияПолей);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает пустую структура адреса
//
// Возвращаемое значение:
//    СтруктураАдреса - ключи - имена полей, значения поля
//
Функция ПолучитьПустуюСтруктуруАдреса() Экспорт
	
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.СтруктураПолейАдреса();
	
КонецФункции

// Возвращает доступно ли редактирование в диалоге по типу контактной информации.
//
// Параметры:
//    Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//
// Возвращаемое значение - Булево - доступно или нет редактирование в диалоге.
//
Функция ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(Тип)
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьЗначенияРеквизитовПроверки(Объект, НастройкиПроверки = Неопределено)
	
	Объект.ПроверятьКорректность = ?(НастройкиПроверки = Неопределено, Ложь, НастройкиПроверки.ПроверятьКорректность);
	Объект.АдресТолькоУкраинский = Ложь;
	Объект.ВключатьСтрануВПредставление = Ложь;
	Объект.ЗапрещатьВводНекорректного =?(НастройкиПроверки = Неопределено, Ложь, НастройкиПроверки.ЗапрещатьВводНекорректного);
	Объект.СкрыватьНеактуальныеАдреса = Ложь;
	
КонецПроцедуры

Процедура ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ЭтоНовыйВидКИ)
	
	НоваяСтрока = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
	НоваяСтрока.ИмяРеквизита  = СтрокаКИ.ИмяРеквизита;
	НоваяСтрока.Вид           = СтрокаКИ.Вид;
	НоваяСтрока.Тип           = СтрокаКИ.Тип;
	
	Если ПустаяСтрока(СтрокаКИ.ЗначенияПолей) ТОгда
		НоваяСтрока.ЗначенияПолей = "";
	Иначе
		НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(СтрокаКИ.ЗначенияПолей);
	КонецЕсли;
	
	НоваяСтрока.Представление = СтрокаКИ.Представление;
	НоваяСтрока.Комментарий   = СтрокаКИ.Комментарий;
	
	Форма[СтрокаКИ.ИмяРеквизита] = СтрокаКИ.Представление;
	
	Если ЭтоНовыйВидКИ И СтрокаКИ.Вид.РазрешитьВводНесколькихЗначений Тогда
		
		Форма.СписокДобавляемыхЭлементовКонтактнойИнформации.Добавить(СтрокаКИ.Вид, СтрокаКИ.Вид.Наименование);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьКомандыИЭлементыФормы(Форма)
	
	ДобавленныеЭлементы = Форма.ДобавленныеЭлементыКонтактнойИнформации;
	ДобавленныеЭлементы.Сортировать("Приоритет");
	
	Для Каждого УдаляемыйЭлемент Из ДобавленныеЭлементы Цикл
		
		Если УдаляемыйЭлемент.ЭтоКоманда Тогда
			Форма.Команды.Удалить(Форма.Команды[УдаляемыйЭлемент.ИмяЭлемента]);
		Иначе
			Форма.Элементы.Удалить(Форма.Элементы[УдаляемыйЭлемент.ИмяЭлемента]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСообщениеПользователю(ТекстСообщения, ИмяРеквизита, ПолеРеквизита)
	
	ИмяРеквизита = ?(ПустаяСтрока(ПолеРеквизита), ИмяРеквизита, "");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ПолеРеквизита, ИмяРеквизита);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.

//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.3.50";
	Обработчик.Процедура = "УправлениеКонтактнойИнформацией.ЗагрузитьСтраныМира";
	Обработчик.ОбщиеДанные = Истина;
	
КонецПроцедуры	

// Обновляет один вид контактной информации.
//
// Параметры:
//    ВидКИ - Справочник.ВидыКонтактнойИнформации - вид контактной информации.
//    Тип - Перечисление.ТипыКонтактнойИнформации - тип контактной информации.
//    МожноИзменятьСпособРедактирования - Булево - Истина, если есть возможность изменять способ редактирования, Ложь - иначе.
//    РедактированиеТолькоВДиалоге - Булево - Истина, если редактировать только в диалоге, Ложь - иначе.
//    АдресТолькоУкраинский - Булево - Истина, если адрес только российский, Ложь - Иначе.
//    Порядок - Неопределено или Число - порядок вида контактной информации.
//
Процедура ОбновитьВидКИ(ВидКИ, Тип, МожноИзменятьСпособРедактирования, РедактированиеТолькоВДиалоге, АдресТолькоУкраинский,
	Порядок = Неопределено) Экспорт
	
	Объект = ВидКИ.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка);
	Объект.Тип									= Тип;
	Объект.МожноИзменятьСпособРедактирования	= МожноИзменятьСпособРедактирования;
	Объект.РедактированиеТолькоВДиалоге			= РедактированиеТолькоВДиалоге;
	Объект.АдресТолькоУкраинский				= АдресТолькоУкраинский;
	Если Порядок <> Неопределено Тогда
		Объект.РеквизитДопУпорядочивания = Порядок;
	КонецЕсли;
	
	Объект.Записать();
	
КонецПроцедуры

// Обновляет один вид контактной информации.
//
// Параметры:
//    Вид - Справочник.ВидыКонтактнойИнформации - вид контактной информации.
//    Тип - Перечисление.ТипыКонтактнойИнформации - тип контактной информации.
//    Подсказка - Строка - Подсказка к виду контактной информации.
//    МожноИзменятьСпособРедактирования - Булево - Истина, если есть возможность изменять настройки вида, Ложь - иначе.
//    РедактированиеТолькоВДиалоге - Булево - Истина, если редактировать только в диалоге, Ложь - иначе.
//    ОбязательноеЗаполнение - Булево - Истина, если требуется обязательное заполнение поля, Ложь - иначе.
//    Порядок - Неопределено или Число - порядок вида контактной информации.
//    РазрешитьВводНесколькихЗначений - Булево - Признак возможности использования дополнительных полей ввода для данного вида.
//    НастройкиПроверки
//        Для типа Адрес - Структура
//            АдресТолькоУкраинский - Булево - Истина, если используются только российские адреса, Ложь - иначе.
//            ПроверятьКорректность - Булево - Истина, если используется проверка адреса по классификатору (Только если АдресТолькоУкраинский = Истина), Ложь - иначе.
//            ЗапрещатьВводНекорректного - - Булево - Истина, если требуется запрещать пользователю записывать некорректный адрес (Только если ПроверятьКорректность = Истина), Ложь - иначе.
//            СкрыватьНеактуальныеАдреса - Булево - Истина, если не требуется показывать неактуальные адреса при вводе(Только если АдресТолькоУкраинский = Истина), Ложь - иначе.
//            ВключатьСтрануВПредставление - Булево - Истина, если требуется включать наименование страны в представление адреса, Ложь - иначе.
//            Для типа АдресЭлектроннойПочты - Структура
//            ПроверятьКорректность - Булево - Истина, если требуется проверка адреса электронной почты на корректность, Ложь - иначе.
//            ЗапрещатьВводНекорректного - Булево - Истина, если требуется запрещать пользователю записывать некорректный адрес (Только если ПроверятьКорректность = Истина), Ложь - иначе.
//            Для остальных типов или для задания настроек по умолчанию используется Неопределено
//
// Примечание:
//    Установка параметра ПроверятьКорректность в значение Истина требует так же установить параметр
//    ЗапрещатьВводНекорректного в значение Истина.
//
Процедура ОбновитьВидКонтактнойИнформации(Вид, Тип, Подсказка, МожноИзменятьСпособРедактирования, РедактированиеТолькоВДиалоге,
	ОбязательноеЗаполнение, Порядок = Неопределено, РазрешитьВводНесколькихЗначений = Ложь, НастройкиПроверки = Неопределено) Экспорт
	
	Объект = Вид.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка);
	
	Объект.Тип                               = Тип;
	Объект.Подсказка                         = Подсказка;
	Объект.МожноИзменятьСпособРедактирования = МожноИзменятьСпособРедактирования;
	Объект.РедактированиеТолькоВДиалоге      = РедактированиеТолькоВДиалоге;
	Объект.ОбязательноеЗаполнение            = ОбязательноеЗаполнение;
	Объект.РазрешитьВводНесколькихЗначений   = РазрешитьВводНесколькихЗначений;
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес И ТипЗнч(НастройкиПроверки) = Тип("Структура") Тогда
		
		ТекстИсключения = НСтр("ru='Некорректно заполнены настройки проверки адреса'");
		
		Если НастройкиПроверки.АдресТолькоУкраинский Тогда
			
			Если Не НастройкиПроверки.ПроверятьКорректность Тогда
				
				Если НастройкиПроверки.ЗапрещатьВводНекорректного Тогда
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
				
			Иначе
				
				// см. примечание
				Если Не НастройкиПроверки.ЗапрещатьВводНекорректного Тогда
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если НастройкиПроверки.ПроверятьКорректность
				Или НастройкиПроверки.ЗапрещатьВводНекорректного
				Или НастройкиПроверки.СкрыватьНеактуальныеАдреса Тогда
				
				ВызватьИсключение ТекстИсключения;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Объект, НастройкиПроверки);
		
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты И ТипЗнч(НастройкиПроверки) = Тип("Структура") Тогда
		
		Если Не НастройкиПроверки.ПроверятьКорректность Тогда
			
			Если НастройкиПроверки.ЗапрещатьВводНекорректного Тогда
				
				ВызватьИсключение ТекстИсключения;
				
			КонецЕсли;
			
		Иначе
			
			// см. примечание
			Если Не НастройкиПроверки.ЗапрещатьВводНекорректного Тогда
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьЗначенияРеквизитовПроверки(Объект, НастройкиПроверки);
		
	Иначе
		
		УстановитьЗначенияРеквизитовПроверки(Объект);
		
	КонецЕсли;
	
	Если Порядок <> Неопределено Тогда
		Объект.РеквизитДопУпорядочивания = Порядок;
	КонецЕсли;
	
	Объект.Записать();
	
КонецПроцедуры

// Обновить справочник стран мира согласно данным из макета Справочники.СтраныМира.Макеты.Классификатор.
// Идентификация существующих элементов в справочнике выполняется по полю Код.
//
Процедура ЗагрузитьСтраныМира() Экспорт
	
	Справочники.СтраныМира.ОбновитьСтраныМираПоКлассификатору(Истина);
	Возврат;
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	СтраныМира.Ссылка             КАК Ссылка,
		|	СтраныМира.Код                КАК Код,
		|	СтраныМира.Наименование       КАК Наименование,
		|	СтраныМира.КодАльфа2          КАК КодАльфа2,
		|	СтраныМира.КодАльфа3          КАК КодАльфа3,
		|	СтраныМира.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	Справочник.СтраныМира КАК СтраныМира
		|");
	СтраныМира = Запрос.Выполнить().Выгрузить();
	СтраныМира.Индексы.Добавить("Код");
		
	Макет = Справочники.СтраныМира.ПолучитьМакет("Классификатор");
	
	ДанныеКлассификатора = ОбщегоНазначения.ТаблицаЗначенийИзXML(Макет.ПолучитьТекст());
	
	
	// Сравнивать в запросе нельзя из-за возможной регистронезависимости базы данных
	Для Каждого СтрокаКлассификатора Из ДанныеКлассификатора.Данные Цикл
		Если Не ЗначениеЗаполнено(СтрокаКлассификатора.НаименованиеПолное) Тогда
			СтрокаКлассификатора.НаименованиеПолное = СтрокаКлассификатора.Наименование;
		КонецЕсли;
		
		СтрокаСправочника = СтраныМира.Найти(СтрокаКлассификатора.Код, "Код");
		Если СтрокаСправочника=Неопределено Тогда
			// Добавление страны
			Страна = Справочники.СтраныМира.СоздатьЭлемент();
		ИначеЕсли СтрокаСправочника.Наименование<>СтрокаКлассификатора.Наименование
			  Или СтрокаСправочника.КодАльфа2<>СтрокаКлассификатора.КодАльфа2
			  Или СтрокаСправочника.КодАльфа3<>СтрокаКлассификатора.КодАльфа3
			  Или СтрокаСправочника.НаименованиеПолное<>СтрокаКлассификатора.НаименованиеПолное
			Тогда
			// Изменение страны
			Страна = СтрокаСправочника.Ссылка.ПолучитьОбъект();
		Иначе
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Страна, СтрокаКлассификатора, "Код, Наименование, КодАльфа2, КодАльфа3, НаименованиеПолное");
		Страна.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Обновляем только существующие элементы стран мира по классификатору, исключения не выбрасываем
Процедура ОбработчикОбновленияСуществующихСтранМира(Добавлять = Ложь) Экспорт
	
	Справочники.СтраныМира.ОбновитьСтраныМираПоКлассификатору(Добавлять);
	
КонецПроцедуры

// Получить значения определенного типа контактной информации у объекта.
//
// Параметры
//    Ссылка                  - ЛюбаяСсылка - ссылка на объект-владелец контактной информации (организация, контрагент, партнер и т.д.)
//    ТипКонтактнойИнформации - ПеречислениеСсылка.ТипыКонтактнойИнформации
//
// Возвращаемое значение:
//    ТаблицаЗначений - с полями 
//        Значение (строка) - строковое представление значения
//        Вид (строка)      - представление вида контактной информации
//
Функция ЗначенияКонтактнойИнформацииОбъекта(Ссылка, ТипКонтактнойИнформации) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Ссылка);
	
	КонтактнаяИнформацияОбъекта = КонтактнаяИнформацияОбъектов(МассивОбъектов, ТипКонтактнойИнформации);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонтактнаяИнформацияОбъекта", КонтактнаяИнформацияОбъекта);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтактнаяИнформацияОбъекта.Представление,
	|	КонтактнаяИнформацияОбъекта.Вид.Представление КАК Вид
	|ПОМЕСТИТЬ ВТКонтактнаяИнформацияОбъекта
	|ИЗ
	|	КонтактнаяИнформацияОбъекта КАК КонтактнаяИнформацияОбъекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактнаяИнформацияОбъекта.Представление КАК Значение,
	|	КонтактнаяИнформацияОбъекта.Вид КАК Вид
	|ИЗ
	|	ВТКонтактнаяИнформацияОбъекта КАК КонтактнаяИнформацияОбъекта";
	
	Возврат КонтактнаяИнформацияОбъекта;
	
КонецФункции

// Получить значения поля адреса.
//
// Параметры:
//    СтрокаЗначенийПолей - строка со значениями полей адреса.
//    ИмяПоля             - имя поля. Например, "Район".
// 
// Возвращаемое значение:
//  Строка - значение поля.
//
Функция ПолучитьЗначениеПоляАдреса(СтрокаЗначенийПолей, ИмяПоля) Экспорт
	
	ПозицияПоля = Найти(СтрокаЗначенийПолей, ИмяПоля);
	Значение = "";
	Если ПозицияПоля <> 0 Тогда
		ЗначенияПолей = Прав(СтрокаЗначенийПолей, СтрДлина(СтрокаЗначенийПолей) - ПозицияПоля - СтрДлина(ИмяПоля));
		ПозицияПС = Найти(ЗначенияПолей, Символы.ПС);
		Значение = Сред(ЗначенияПолей, 0 ,ПозицияПС - 1);
	КонецЕсли;
	Возврат Значение;
	
КонецФункции

// Получает значения поля адреса
//
// Параметры:
//    СтрокаЗначенийПолей - Строка - строка значений полей 
//    ИмяПоля - Строка - имя поля 
//
// Возвращаемое значение - Строка - значение контактной информации.
//
Функция ПолучитьЗначениеКонтактнойИнформации(СтрокаЗначенийПолей, ИмяПоля) Экспорт
	
	ПозицияПоля = Найти(СтрокаЗначенийПолей, ИмяПоля);
	Значение = "";
	Если ПозицияПоля <> 0 Тогда
		ЗначенияПолей = Прав(СтрокаЗначенийПолей, СтрДлина(СтрокаЗначенийПолей) - ПозицияПоля - СтрДлина(ИмяПоля));
		ПозицияПС   = Найти(ЗначенияПолей, Символы.ПС);
		Значение    = Сред(ЗначенияПолей, 0 , ПозицияПС - 1);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы

// Определяет Используются ли в конфигурации классификаторы
//
// Параметры:
//  Используются - Булево - Истина, если используются, Ложь - иначе.
//
Процедура ПриОпределенииИспользованияКлассификатора(Используются) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Используются = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Определяет по индексу записи в адресном классификаторе.
//
// Параметры:
//    Индекс - Строка - индекс, по которому будет производиться поиск.
//    АдресныеОбъекты - Неопределено или Структура с полями:
//        Количество      - Число - количество найденных вариантов
//        НайденныйРегион - Строка - если найден один регион
//        НайденныйРайон  - Строка - если найден один район
//        ПризнакАктуальности - Число - признак актуальности если найден один вариант
//        АдресВХранилище - Строка - идентификатор сохраненной в хранилище таблицы с найденными вариантами
//
Процедура ПриОпределенииЗаписейПоИндексу(Индекс, АдресныеОбъекты) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		АдресныеОбъекты = Модуль.НайтиЗаписиПоИндексу(Индекс);
	КонецЕсли;
	
КонецПроцедуры

// Получить компоненты адресного элемента по его коду
//
// Параметры:
//    КодАдресногоЭлемента - Число - код адресного элемента, по которому ищутся компоненты адреса 
//    Результат - структура с полями(в которую выгружается результат поиска):
//        Регион - Строка - наименование найденного региона
//        Район - Строка - наименование найденного района
//        Город - Строка - наименование найденного города
//        НаселенныйПункт - Строка - наименование найденного населенного пункта
//        Улица - Строка - наименование найденной улицы
//        ПризнакАктуальности - Число - признак актуальности найденного адреса
//
Процедура ПоКодуАдресногоЭлементаВСтруктуруПолучитьЕгоКомпоненты(КодАдресногоЭлемента, Результат) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		Модуль.ПоКодуАдресногоЭлементаВСтруктуруПолучитьЕгоКомпоненты(КодАдресногоЭлемента, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Определяет структуру адреса.
//
// Параметры:
//    СтруктураАдреса -Структура с полями:
//    Индекс - Строка - индекс адреса по переданным параметрам
//    Регион - Строка - регион по переданному коду
//    Район - Строка - район по переданному коду
//    Город - Строка - город по переданному коду
//    НаселенныйПункт - Строка - населенный пункт по переданному коду
//    Улица - Строка - улица по переданному коду
//    Дом - Строка - переданный номер дома
//    Корпус - Строка - переданный номер корпуса
//    Квартира - Строка - переданный номер квартиры
//    КодАдресногоЭлемента - Число - код адресного элемента, по которому ищутся компоненты адреса 
//    Дом - Строка - номер дома, если требуется
//    Корпус - Строка - номер корпуса, если требуется
//    Квартира - Строка - номер квартиры, если требуется
//
Процедура ПриОпределенииСтруктурыАдреса(СтруктураАдреса, КодАдресногоЭлемента, Дом = "", Корпус = "", Квартира = "") Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		Модуль.ПолучитьСтруктуруАдреса(КодАдресногоЭлемента, Дом, Корпус, Квартира);
	КонецЕсли;
	
КонецПроцедуры

// Определяет индекс по переданным региону, району, городу, населенному пункту,
// улице, дому и корпусу
//
// Параметры: 
//    Индекс - Строка - почтовый индекс.
//    НазваниеРегиона - название региона( с сокращением)
//    НазваниеРайона - название района( с сокращением)
//    НазваниеГорода - название города( с сокращением)
//    НазваниеНаселенногоПункта - название населенного пункта( с сокращением)
//    Улица - название улицы ( с сокращением)
//    НомерДома - номер дома, для которого необходимо получить индекс
//    НомерКорпуса - номер корпуса
//    РодительИндекса - переменная, в которую сохраняется структура найденного адресного элемента
//
Процедура ПриОпределенииИндекса(Индекс, НазваниеРегиона, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта,
	НазваниеУлицы, НомерДома, НомерКорпуса, РодительИндекса = Неопределено) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		Индекс = Модуль.ПолучитьИндекс(НазваниеРегиона, НазваниеРайона, НазваниеГорода,
		НазваниеНаселенногоПункта, НазваниеУлицы, НомерДома, НомерКорпуса, РодительИндекса);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик автоподбора в адресном элементе ввода.
//
// Параметры:
//    СписокАвтоПодбора - СписокЗначений - список для автоподбора.
//    Текст  - Строка - введенный пользователем текст в адресном элементе ввода
//    Регион - Строка - ранее введенное название региона
//    Район  - Строка - ранее введенное название района
//    Город  - Строка - ранее введенное название города
//    НаселенныйПункт - Строка - ранее введенное название населенного пункта
//    УровеньЭлемента - Число - идентификатор адресного элемента ввода.
//                      1 - регион, 2 - район, 3 - город, 4 - населенный пункт, 5 - улица, 0 - прочее.
//    ПризнакАктуальности - Число - признак актуальности элемента.
//
// Возвращаемое значение:
//    СписокЗначений; Неопределено
//
Процедура ПриОпределенииСпискаАвтоПодбораТекстаВАдресномЭлементе(СписокАвтоПодбора, Текст, Регион, Район, Город,
	НаселенныйПункт, УровеньЭлемента, ПризнакАктуальности = 0) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		СписокАвтоПодбора = Модуль.АвтоПодборТекстВАдресномЭлементе(Текст, Регион, Район, Город,
		НаселенныйПункт, УровеньЭлемента, ПризнакАктуальности);
	КонецЕсли;
	
КонецПроцедуры

// Определяет соответствие адреса КЛАДРу по переданным индексу, региону, району, городу, населенному пункту,
// улице, дому и корпусу.
//
// Параметры:
//    СтруктураПроверки - Структура с полями:
//        Регион - Структура - структура полей найденного региона
//        Район - Структура - структура полей найденного района
//        Город - Структура - структура полей найденного города
//        НаселенныйПункт - Структура - структура полей найденного населенного пункта
//        Улица - Структура - структура полей найденной улицы
//        Дом - Структура - структура полей найденного дома
//        ЕстьОшибки - Булево - найдены ли ошибки при проверке
//        СтруктураОшибок - Структура - структура в которой в качестве ключа выступает название элемента
//                          а в качестве значения - подробный текст ошибки.
//    УказанныйИндекс - Строка - индекс
//    НазваниеРегиона - Строка - название региона(с сокращением)
//    НазваниеРайона - Строка - название района(с сокращением)
//    НазваниеГорода - Строка - название города(с сокращением)
//    НазваниеНаселенногоПункта - Строка - название населенного пункта(с сокращением)
//    НазваниеУлицы - Строка - название улицы(с сокращением)
//    НомерДома - Строка - номер дома, для которого необходимо получить индекс
//    НомерКорпуса - Строка - номер корпуса
//
Процедура ПриОпределенииСоответствияАдресаКЛАДРу(СтруктураПроверки, УказанныйИндекс = "", НазваниеРегиона = "", НазваниеРайона = "",
	НазваниеГорода = "", НазваниеНаселенногоПункта = "", НазваниеУлицы = "", НомерДома = "", НомерКорпуса = "") Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		СтруктураПроверки = Модуль.ПроверитьСоответствиеАдресаКЛАДРу(УказанныйИндекс, НазваниеРегиона,НазваниеРайона,
		НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы, НомерДома , НомерКорпуса);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет загружен ли адресный элемент в базу.
//
// Параметры: 
//    АдресныйЭлементЗагружен - Булево - признак загруженности адресного элемента.
//    НазваниеРегиона - Строка - название региона(с сокращением)
//    НазваниеРайона - Строка - название района(с сокращением)
//    НазваниеГорода - Строка - название города(с сокращением)
//    НазваниеНаселенногоПункта - Строка - название населенного пункта(с сокращением)
//    НазваниеУлицы - Строка - название улицы(с сокращением)
//    Уровень - Число - уровень, который нужно проверить на загруженность
//
// Возвращаемое значение:
//    Булево - Истина, если адресный элемент загружен, Ложь - в противном случае.
//
Процедура ПриОпределенииЗагруженностиАдресногоЭлемента(АдресныйЭлементЗагружен, НазваниеРегиона, НазваниеРайона = "", НазваниеГорода = "",
	НазваниеНаселенногоПункта = "", НазваниеУлицы = "", Уровень = 1) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		АдресныйЭлементЗагружен = Модуль.АдресныйЭлементЗагружен(НазваниеРегиона, НазваниеРайона, НазваниеГорода,
		НазваниеНаселенногоПункта, НазваниеУлицы, Уровень);
	КонецЕсли;
	
КонецПроцедуры

// По полному наименованию адресного элемента определяет отдельно его имя, и отдельно его адресное сокращение
//
// Параметры:
//    ИмяИАдресноеСокращение - Строка - имя адресное сокращение.
//    СтрокаЭлемента - Строка - строка элемента.
//    АдресноеСокращение - Строка - адресное сокращение.
//
Процедура ПриОпределенииИмениИАдресногоСокращение(ИмяИАдресноеСокращение, СтрокаЭлемента, АдресноеСокращение) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		ИмяИАдресноеСокращение = Модуль.ПолучитьИмяИАдресноеСокращение(СтрокаЭлемента, АдресноеСокращение);
	КонецЕсли;
	
КонецПроцедуры

// По переданным элементам адреса определяет, загружен ли КЛАДР по соответствующим элементам. 
//
// Параметры:
//    СтруктураЗагруженныхЭлементовАдреса - Структура с полями:
//        Регион - Булево - регион загружен
//        Район - Булево - район загружен
//        Город - Булево - город загружен
//        НаселенныйПункт - населенный пункт загружен
//        Улица - Булево - улица загружена
//        Дом - Булево - дом загружен.
//   НазваниеРегиона - Строка - название региона(с сокращением)
//   НазваниеРайона - Строка - название района(с сокращением)
//   НазваниеГорода - Строка - название города(с сокращением)
//   НазваниеНаселенногоПункта - Строка - название населенного пункта(с сокращением)
//   НазваниеУлицы - Строка - название улицы(с сокращением)
//
Процедура ПриОпределенииСтруктурыЗагруженныхЭлементовАдреса(СтруктураЗагруженныхЭлементовАдреса, НазваниеРегиона,
	НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		СтруктураЗагруженныхЭлементовАдреса = Модуль.СтруктураЗагруженныхЭлементовАдреса(НазваниеРегиона,
		НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы);
	КонецЕсли;
	
КонецПроцедуры

// Определяет наименование региона по коду.
//
// Параметры:
//    НаименованиеРегиона - наименование региона.
//    КодРегиона - Число - код региона.
//
Процедура ПриОпределенииНаименованияРегионаПоКоду(НаименованиеРегиона, КодРегиона) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		НаименованиеРегиона = Модуль.ПолучитьНаименованиеРегионаПоКоду(КодРегиона);
	КонецЕсли;
	
КонецПроцедуры

// Определяет код региона по наименованию.
//
// Параметры:
//    КодРегиона - Число - код региона.
//    Регион - Строка - наименование региона.
//
Процедура ПриОпределенииКодаРегионаПоНаименованию(КодРегиона, Регион) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		КодРегиона = Модуль.ПолучитьКодРегионаПоНаименованию(Регион);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает строку(структуру) адресного классификатора по значениям адресных элементов
//
// Параметры:
//    СтруктураАдресногоКлассификатора - Неопределено или Структура - Структура полей по найденому адресному элементу (см. функцию "АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса()")
//    НазваниеРегиона - название региона( с сокращением)
//    НазваниеРайона - название района( с сокращением)
//    НазваниеГорода - название города( с сокращением)
//    НазваниеНаселенногоПункта - название населенного пункта( с сокращением)
//    НазваниеУлицы - название улицы( с сокращением)
//
Процедура ПриОпределенииСтрокиАдресногоКлассификатораПоАдреснымЭлементам(СтруктураАдресногоКлассификатора, НазваниеРегиона, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		СтруктураАдресногоКлассификатора = Модуль.ВернутьСтруктуруАдресногоКлассификатораПоАдреснымЭлементам(
		НазваниеРегиона, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы);
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает потомков определенного адресного элемента
//
// Параметры:
//    Регион - строка - строка, куда будет помещено строковое представление "родительского" региона.
//    Район - строка - строка, куда будет помещено строковое представление "родительского" района.
//    Город - строка - строка, куда будет помещено строковое представление "родительского" города.
//    НаселенныйПункт - строка - строка, куда будет помещено строковое представление "родительского" населенного пункта.
//    Улица - строка - строка, куда будет помещено строковое представление "родительской" улицы.
//    Дом - строка - строка, куда будет помещено строковое представление "родительского" номера дома.
//    Корпус - строка - строка, куда будет помещено строковое представление "родительского" номера корпуса дома.
//    Квартира - строка - строка, куда будет помещено строковое представление "родительского" номера квартиры.
//    Уровень - Число - уровень адресного элемента.
//
Процедура ПриОчисткеПотомковПоУровнюАдресногоЭлемента(Регион, Район, Город, НаселенныйПункт, Улица, Дом, Корпус, Квартира, Уровень) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		Модуль.ОчиститьПотомковПоУровнюАдресногоЭлемента(Регион, Район, Город,
		НаселенныйПункт, Улица, Дом, Корпус, Квартира, Уровень);
	КонецЕсли;
	
КонецПроцедуры

// Определяет используется ли в конфигурации запрет редактирования реквизитов
//
// Параметры:
//    Используется - Булево - Истина, если используется, Ложь - иначе.
//
Процедура ПриОпределенииИспользованияЗапретаРедактированияРеквизитов(Используется) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
		Используется = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Блокирует запрещенные для редактирования реквизиты
//
Процедура ПриБлокировкеРеквизитовОбъекта(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
		Модуль = Вычислить("ЗапретРедактированияРеквизитовОбъектов");
		Модуль.ЗаблокироватьРеквизиты(Форма);
	КонецЕсли;
	
КонецПроцедуры