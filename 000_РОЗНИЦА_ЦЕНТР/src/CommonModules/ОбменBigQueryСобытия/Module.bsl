Процедура BigQueryЗарегистрироватьИзменение(Источник, Отказ) Экспорт
	//	
	//Если НЕ MicrosoftDynamicsОбщиеДействияПередРегистрацией(Источник) Тогда

	//	Возврат;

	//КонецЕсли;

	//Регистрировать = Ложь;
	//ТипЗначения    = ТипЗнч(Источник);

	//ТипыТолькоЭлементы = Новый Соответствие;
	//ТипыТолькоЭлементы.Вставить(Тип("СправочникОбъект.Контрагенты"), 1);
	//ТипыТолькоЭлементы.Вставить(Тип("СправочникОбъект.ИнформационныеКарты"), 1);
	//ТипыТолькоЭлементы.Вставить(Тип("СправочникОбъект.Магазины"), 2);
	//ТипыТолькоЭлементы.Вставить(Тип("СправочникОбъект.Склады"), 2);

	//Если НЕ ТипыТолькоЭлементы.Получить(ТипЗначения) = Неопределено Тогда

	//	Если НЕ Источник.ЭтоГруппа Тогда

	//		Если ТипЗначения = Тип("СправочникОбъект.Контрагенты") Тогда

	//			Регистрировать = Источник.Покупатель;

	//		ИначеЕсли ТипЗначения = Тип("СправочникОбъект.ИнформационныеКарты") Тогда

	//			Регистрировать = РегистрироватьИнформационнуюКарту(Источник);

	//		ИначеЕсли ТипыТолькоЭлементы.Получить(ТипЗначения) = 2 Тогда

	//			ЯвляетсяСкладом = (ТипЗначения = Тип("СправочникОбъект.Склады"));

	//			Если ЯвляетсяСкладом Тогда

	//					РеквизитыИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Магазин, "НомерМагазина, СкладУправляющейСистемы");

	//			Иначе	РеквизитыИсточника = Новый Структура("НомерМагазина, СкладУправляющейСистемы", 0, Ложь);

	//			КонецЕсли;

	//			Запрос = Новый Запрос(
	//			"ВЫБРАТЬ
	//			|	ТаблицаСсылки.Магазин КАК Магазин,
	//			|	ВЫБОР
	//			|		КОГДА ТаблицаСсылки.Магазин ЕСТЬ NULL
	//			|			ТОГДА ВЫБОР
	//			|					КОГДА ТаблицаОбъекта.СкладУправляющейСистемы = ЛОЖЬ
	//			|							И НЕ ТаблицаОбъекта.СкладПродажи.IDN = """"
	//			|							И НЕ ТаблицаОбъекта.НомерМагазина = 0
	//			|						ТОГДА ИСТИНА
	//			|					ИНАЧЕ ЛОЖЬ
	//			|				КОНЕЦ
	//			|		КОГДА (ТаблицаСсылки.Магазин.СкладУправляющейСистемы = ЛОЖЬ
	//			|				ИЛИ ТаблицаОбъекта.СкладУправляющейСистемы = ЛОЖЬ)
	//			|				И (НЕ ТаблицаСсылки.Магазин.СкладПродажи.IDN = """"
	//			|					ИЛИ НЕ ТаблицаОбъекта.СкладПродажи.IDN = """")
	//			|				И (НЕ ТаблицаСсылки.Магазин.НомерМагазина = 0
	//			|					ИЛИ НЕ ТаблицаОбъекта.НомерМагазина = 0)
	//			|			ТОГДА ИСТИНА
	//			|		ИНАЧЕ ЛОЖЬ
	//			|	КОНЕЦ КАК Регистрировать
	//			|ИЗ
	//			|	(ВЫБРАТЬ
	//			|		ВЫРАЗИТЬ(&СкладПродажи КАК Справочник.Склады) КАК СкладПродажи,
	//			|		&НомерМагазина КАК НомерМагазина,
	//			|		&СкладУправляющейСистемы КАК СкладУправляющейСистемы) КАК ТаблицаОбъекта
	//			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//			|			ТаблицаСправочник.Ссылка КАК Магазин
	//			|		ИЗ
	//			|			Справочник.Магазины КАК ТаблицаСправочник
	//			|		ГДЕ
	//			|			&ЯвляетсяСкладом = ЛОЖЬ
	//			|			И ТаблицаСправочник.Ссылка = &ТекущаяСсылка
	//			|		
	//			|		ОБЪЕДИНИТЬ
	//			|		
	//			|		ВЫБРАТЬ
	//			|			ТаблицаСправочник.Магазин
	//			|		ИЗ
	//			|			Справочник.Склады КАК ТаблицаСправочник
	//			|		ГДЕ
	//			|			&ЯвляетсяСкладом = ИСТИНА
	//			|			И ТаблицаСправочник.Ссылка = &ТекущаяСсылка) КАК ТаблицаСсылки
	//			|		ПО (ИСТИНА)"
	//			);
	//			Запрос.УстановитьПараметр("ЯвляетсяСкладом", ЯвляетсяСкладом);
	//			Запрос.УстановитьПараметр("ТекущаяСсылка"  , ?(ЯвляетсяСкладом, Источник.Магазин, Источник.Ссылка));
	//			Запрос.УстановитьПараметр("СкладПродажи"   , ?(ЯвляетсяСкладом, Источник.Ссылка, Источник.СкладПродажи));
	//			Запрос.УстановитьПараметр("НомерМагазина"  , ?(ЯвляетсяСкладом, РеквизитыИсточника.НомерМагазина, Источник.НомерМагазина));
	//			Запрос.УстановитьПараметр("СкладУправляющейСистемы", ?(ЯвляетсяСкладом, РеквизитыИсточника.СкладУправляющейСистемы, Источник.СкладУправляющейСистемы));

	//			РезультатЗапроса = Запрос.Выполнить();

	//			Если НЕ РезультатЗапроса.Пустой() Тогда

	//				Выборка = РезультатЗапроса.Выбрать();
	//				Выборка.Следующий();

	//				Регистрировать = (Выборка.Регистрировать = Истина);

	//			КонецЕсли;

	//		КонецЕсли;

	//	КонецЕсли;

	//ИначеЕсли ТипЗначения = Тип("СправочникОбъект.Номенклатура") Тогда

	//	#Если _ Тогда
	//	Источник = Справочники.Номенклатура.СоздатьЭлемент();
	//	#КонецЕсли

	//	Если НЕ ПустаяСтрока(Источник.IDN) Тогда

	//		Регистрировать = Истина;

	//	КонецЕсли;

	//ИначеЕсли ТипЗначения = Тип("СправочникОбъект.ИменаЛюдей") Тогда

	//	Регистрировать = Истина;

	//КонецЕсли;

	//Если Регистрировать Тогда

	//	Для каждого Узел Из ОбменMicrosoftDynamicsПовтИсп.ПолучитьМассивУзлов(ОбменMicrosoftDynamicsПовтИсп.ОпределитьТипРегистрации(Источник.Метаданные().ПолноеИмя())) Цикл

	//		Источник.ОбменДанными.Получатели.Добавить(Узел);

	//	КонецЦикла;

	//КонецЕсли;

КонецПроцедуры

Процедура MicrosoftDynamicsЗарегистрироватьИзменениеДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
		
	//Если НЕ MicrosoftDynamicsОбщиеДействияПередРегистрацией(Источник) Тогда

	//	Возврат;

	//КонецЕсли;

	//Регистрировать = Ложь;
	//ТипЗначения = ТипЗнч(Источник);

	//Если ТипЗначения = Тип("ДокументОбъект.ЧекККМ") Тогда

	//	#Если _ Тогда
	//	Источник = Документы.ЧекККМ.СоздатьДокумент();
	//	#КонецЕсли

	//	Если ИсточникПроводился(Источник, РежимЗаписи) И (Источник.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый
	//	ИЛИ Источник.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный
	//	ИЛИ Источник.ДополнительныеСвойства.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый
	//	ИЛИ Источник.ДополнительныеСвойства.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный)	Тогда

	//	//	CRM говорит, что чеки по web-заказам будут грузиться непосредственно из Magento..??
	//		Регистрировать = НЕ ЗначениеЗаполнено(Источник.ЗаказПокупателя);

	//	КонецЕсли;

	//ИначеЕсли ТипЗначения = Тип("ДокументОбъект.ВыдачаДисконтныхКарт") ИЛИ ТипЗначения = Тип("ДокументОбъект.ЗаменаДисконтныхКарт") Тогда

	//	Регистрировать = ИсточникПроводился(Источник, РежимЗаписи);

	//КонецЕсли;

	//Если Регистрировать Тогда

	//	Для каждого Узел Из ОбменMicrosoftDynamicsПовтИсп.ПолучитьМассивУзлов(ОбменMicrosoftDynamicsПовтИсп.ОпределитьТипРегистрации(Источник.Метаданные().ПолноеИмя())) Цикл

	//		Источник.ОбменДанными.Получатели.Добавить(Узел);

	//	КонецЦикла;

	//КонецЕсли;

КонецПроцедуры

Процедура BigDataЗарегистрироватьИзменениеДокументаПриЗаписи(Источник, Отказ) Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура BigDataЗарегистрироватьУдалениеПередУдалением(Источник, Отказ) Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

Функция BigQueryОбщиеДействияПередРегистрацией(Источник)

	НужнаРегистрация = ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() И ОбменMicrosoftDynamicsПовтИсп.ОбменАктивен(ОбменMicrosoftDynamicsПовтИсп.ОпределитьТипРегистрации(Источник.Метаданные().ПолноеИмя()));
	
	Если НужнаРегистрация Тогда

		Если Источник.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииMicrosoftDynamics") Тогда

			НужнаРегистрация = НЕ Источник.ДополнительныеСвойства.ОтключитьМеханизмРегистрацииMicrosoftDynamics = Истина;

		КонецЕсли;

		Если НужнаРегистрация И НЕ ПривилегированныйРежим() Тогда

			УстановитьПривилегированныйРежим(Истина);

		КонецЕсли;

	КонецЕсли;

	Возврат НужнаРегистрация;

КонецФункции // ОбщиеДействияПередРегистрацией()
