#Область СлужебныеПроцедурыИФункции

// Отправляет SMS через Infibip.
//
// Параметры:
//  НомераПолучателей - Массив - номера получателей в формате 38ХХХХХХХХХХ (строкой без плюса);
//  Текст             - Строка - текст сообщения, длиной не более 1000 символов;
//  ИмяОтправителя 	  - Строка - имя отправителя, которое будет отображаться вместо номера входящего SMS;
//  Логин             - Строка - логин пользователя услуги отправки sms;
//  Пароль            - Строка - пароль пользователя услуги отправки sms.
//
// Возвращаемое значение:
//  Структура: ОтправленныеСообщения - Массив структур: НомерОтправителя.
//                                                  ИдентификаторСообщения.
//             ОписаниеОшибки    - Строка - пользовательское представление ошибки, если пустая строка,
//                                          то ошибки нет.
Функция ОтправитьSMS(НомераПолучателей, Текст, ИмяОтправителя, Логин, Знач Пароль, Таймаут) Экспорт

	Результат = Новый Структура("ОтправленныеСообщения, ОписаниеОшибки, Ошибка, КодОтвета", Новый Массив, "", Ложь, 0);
	Результат.Вставить("Идентификатор", СтрЗаменить(Новый УникальныйИдентификатор, "-", ""));

//	Подготовка параметров запроса.
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("login"        , Логин);
	ПараметрыЗапроса.Вставить("password"     , Пароль);
	ПараметрыЗапроса.Вставить("POST"         , "/sms/1/text/single HTTP/1.1");
	ПараметрыЗапроса.Вставить("Host"         , "api.infobip.com");
	ПараметрыЗапроса.Вставить("Authorization", Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(Логин + ":" + Пароль)));
	ПараметрыЗапроса.Вставить("from"         , ИмяОтправителя);
	ПараметрыЗапроса.Вставить("text"         , Текст);

	Для каждого НомерТелефона Из НомераПолучателей Цикл

		ПараметрыЗапроса.Вставить("to", ПодготовитьНомерТелефона(НомерТелефона));
	//	собственно, процедура отправки запроса
		ИмяФайлаОтвета = ВыполнитьЗапрос(ПараметрыЗапроса, Результат, Таймаут);

	//	здесь как бы отсутствующий блок парсера файла ответа... но не случилось!

		Попытка

		//	Почистим за собой..
			УдалитьФайлы(ИмяФайлаОтвета);

		Исключение	КонецПопытки;

	КонецЦикла;

	Возврат Результат;

КонецФункции // ОтправитьSMS()

Функция ВыполнитьЗапрос(ПараметрыЗапроса, Результат, Таймаут)

	ТекстЗапроса   = ПолучитьТекстPOSTЗапроса(ПараметрыЗапроса);
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла("txt");
//	ИмяФайлаОтвета = "E:\TEMP\request.txt";	//	отладочная

	Попытка

	//	Выполняем подключение к серверу ""https://api.infobip.com/sms/1/text/single
		HTTP = Новый HTTPСоединение("api.infobip.com/sms/1/text/single",, ПараметрыЗапроса.login, ПараметрыЗапроса.password,, Таймаут, Новый ЗащищенноеСоединениеOpenSSL);

		Попытка

		//	формирование заголовка
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("POST", ПараметрыЗапроса.POST);
			Заголовки.Вставить("Host", ПараметрыЗапроса.Host);
			Заголовки.Вставить("Content-Type", "application/json");
			Заголовки.Вставить("Accept", "application/json");

			HTTPЗапрос = Новый HTTPЗапрос("/", Заголовки);
			HTTPЗапрос.УстановитьТелоИзСтроки(ТекстЗапроса);

			HTTPОтвет = HTTP.ОтправитьДляОбработки(HTTPЗапрос, ИмяФайлаОтвета);

			Результат.КодОтвета = HTTPОтвет.КодСостояния;
			ДанныеRFC2616 = СервисыСерверПовтИсп.КодыRFC2616(HTTPОтвет.КодСостояния);

			Результат.Ошибка = НЕ Результат.КодОтвета = 200;
			Результат.ОписаниеОшибки = Формат(Результат.КодОтвета, "ЧДЦ=; ЧН=000; ЧГ=") + Символы.ПС + ДанныеRFC2616.Описание;

		Исключение

			Результат.Ошибка = Истина;
			Результат.ОписаниеОшибки = "ошибка отправки сообщения: " + ОписаниеОшибки();

		КонецПопытки;	 

	Исключение

		Результат.Ошибка = Истина;
		Результат.ОписаниеОшибки = "ошибка при подключению к серверу: " + ОписаниеОшибки();

	КонецПопытки;

	Если Результат.Ошибка = Истина Тогда

		ЗаписьЖурналаРегистрации("ОтправитьSMS", УровеньЖурналаРегистрации.Ошибка
		,,, Результат.ОписаниеОшибки , РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

	Иначе

	//	Почистим за собой только когда НЕТ ошибки. Если ошибка, оставим файлы для последующего анализа.
		Попытка

			УдалитьФайлы(ИмяФайлаОтвета);

		Исключение	КонецПопытки;

	КонецЕсли;
	
	Возврат ИмяФайлаОтвета;

КонецФункции // ВыполнитьЗапрос()

Функция ПолучитьТекстPOSTЗапроса(ПараметрыЗапроса)

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

		ЗаписьJSON.ЗаписатьИмяСвойства("from");
		ЗаписьJSON.ЗаписатьЗначение(ПараметрыЗапроса.from);

		ЗаписьJSON.ЗаписатьИмяСвойства("to");
		ЗаписьJSON.ЗаписатьЗначение(ПараметрыЗапроса.to);

		ЗаписьJSON.ЗаписатьИмяСвойства("text");
		ЗаписьJSON.ЗаписатьЗначение(ПараметрыЗапроса.text);

	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции // ПолучитьТекстPOSTЗапроса()

// Возвращает текстовое представление статуса доставки сообщения.
//
// Параметры:
//  ИдентификаторСообщения - Строка - идентификатор, присвоенный sms при отправке;
//  НастройкиОтправкиSMS   - Структура - см. ОтправкаSMSПовтИсп.НастройкиОтправкиSMS;
//
// Возвращаемое значение:
//  Строка - статус доставки. См. описание функции ОтправкаSMS.СтатусДоставки.
Функция СтатусДоставки(ИдентификаторСообщения, НастройкиОтправкиSMS) Экспорт

	Возврат "";

КонецФункции

Функция ПодготовитьНомерТелефона(Знач НомерТелефона)	Экспорт

	НомерТелефона = СокрЛП(НомерТелефона);

	Для каждого СимволУдалить Из ОбщегоНазначенияКлиентСервер.AAD(" ", "+") Цикл

		НомерТелефона = СтрЗаменить(НомерТелефона, СимволУдалить, ""); 

	КонецЦикла;

	Если НЕ Лев(НомерТелефона, 1) = "0" И НЕ Лев(НомерТелефона, 2) = "38" Тогда

		НомерТелефона = "0" + НомерТелефона;

	КонецЕсли;

	Если НЕ Лев(НомерТелефона, 2) = "38" Тогда

		НомерТелефона = "38" + НомерТелефона;

	КонецЕсли;

	Возврат НомерТелефона;

КонецФункции // ПодготовитьНомерТелефона()

#КонецОбласти
