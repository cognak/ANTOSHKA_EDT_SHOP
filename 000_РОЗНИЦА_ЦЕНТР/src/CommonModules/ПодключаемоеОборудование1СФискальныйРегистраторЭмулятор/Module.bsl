
///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция осуществляет подключение устройства.
//
// Параметры:
//  ОбъектДрайвера   - <*>
//           - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;
	ПараметрыПодключения.Вставить("СерийныйНомерККМ", "0");
	ПараметрыПодключения.Вставить("ИДУстройства", "");
	ПараметрыПодключения.Вставить("ФРПодключен", Ложь);
  	ПараметрыПодключения.Вставить("СтрокаЛога", "");

	//Обязательные выходные
	ВыходныеПараметры = Новый Массив();

	// Проверка настроенных параметров
	КодСимволаЧастичногоОтреза = Неопределено;
	НомерСекции                = Неопределено;
	Модель                     = Неопределено;
	ТаблицаСоответствийНалоговыхГрупп = Неопределено;

	Параметры.Свойство("КодСимволаЧастичногоОтреза", КодСимволаЧастичногоОтреза);
	Параметры.Свойство("НомерСекции"               , НомерСекции);
	Параметры.Свойство("Модель"                    , Модель);
	Параметры.Свойство("ТаблицаСоответствийНалоговыхГрупп", ТаблицаСоответствийНалоговыхГрупп);

	Если КодСимволаЧастичногоОтреза = Неопределено
	 Или НомерСекции                = Неопределено
	 Или Модель                     = Неопределено Тогда

		 Результат = Ложь;
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(
			"Не настроєно параметри пристрою.
			|Для коректної роботи пристрою потрібно задати параметри його работи.
			|Зробити це можна з допомогою панелі «Налаштування параметрів» моделі
			|підключаємого обладнання у панелі «Підключення та налаштування обладнання»."
		);

	ИначеЕсли ТаблицаСоответствийНалоговыхГрупп = Неопределено Тогда
		Результат = Ложь;
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Не заповнені параметри торгового обладнання (параметри оподаткування).");
	КонецЕсли;
	// Конец: Проверка настроенных параметров

	Если Результат Тогда
		Если ПараметрыПодключения.ФРПодключен Тогда
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("Фіскальний реєстратор вже підключено");
			Результат = Ложь;
		Иначе
			ПараметрыПодключения.ФРПодключен = Истина;

			ВыходныеПараметры.Добавить(""); // Источник событий
			ВыходныеПараметры.Добавить(Неопределено); // Список событий
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет отключение устройства.
//
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;

	//Обязательные выходные
	ВыходныеПараметры = Неопределено;

	ПараметрыПодключения.ФРПодключен = Ложь;

	Возврат Результат;

КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт

	Результат = Истина;

	ВыходныеПараметры = Новый Массив();

	// Открыть смену
	Если Команда = "OpenDay" Тогда
		Результат = ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Печать чека
	ИначеЕсли Команда = "PrintReceipt" Тогда
		Результат = ПечатьЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры,	ВыходныеПараметры);

	// Печать слип чека
	ИначеЕсли Команда = "PrintText" Тогда
		СтрокаТекста = ВходныеПараметры[0];
		Результат = ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                         СтрокаТекста, ВыходныеПараметры);

	// Печать чека внесения/выемки
	ИначеЕсли Команда = "Encash" Тогда
		ТипИнкассации = ВходныеПараметры[0];
		Сумма         = ВходныеПараметры[1];
		Результат = Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипИнкассации, Сумма, ВыходныеПараметры);

	// Печать отчета без гашения
	ИначеЕсли Команда = "PrintXReport" Тогда
		Результат = НапечататьОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Печать отчета с гашением
	ИначеЕсли Команда = "PrintZReport" Тогда
		Результат = НапечататьОтчетСГашением(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Открытие денежного ящика
	ИначеЕсли Команда = "OpenCashDrawer" Тогда
		Результат = ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Печать переодического отчета по датам
	ИначеЕсли Команда = "PrintPReportDate" Тогда
		Результат = НапечататьПериодическийОтчетПоДатам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать периодического отчета по номерам
	ИначеЕсли Команда = "PrintPReportNumber" Тогда
		Результат = НапечататьПериодическийОтчетПоНомерам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать нулевого чека
	ИначеЕсли Команда = "PrintNullReceipt" Тогда
		Результат = НапечататьНулевойЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	ИначеЕсли Команда = "OpenCheck" ИЛИ Команда = "ОткрытьЧек" ИЛИ Команда = "beginNonFiscal"  Тогда	//	LNK 15.11.2022 07:24:04

	//	Открыть фискальный чек
		ЧекВозврата   = ВходныеПараметры[0];
		ФискальныйЧек = ?(Команда = "beginNonFiscal", Ложь, ВходныеПараметры[1]);

		Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры);

	ИначеЕсли Команда = "CancelCheck" ИЛИ Команда = "ОтменитьЧек"  Тогда	//	LNK 15.11.2022 08:34:31

	//	Отменить открытый фискальный чек
		Результат = ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Печать отчета о проданных товарах
	ИначеЕсли Команда = "PrintSoldReport" Тогда
		Результат = НапечататьОтчетОПроданныхТоварах(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	ИначеЕсли Команда = "beginNonFiscal" Тогда	//	LNK 19.11.2019 12:44:17

		Результат = Истина;
		
	ИначеЕсли Команда = "endNonFiscal" Тогда	//	LNK 19.11.2019 12:44:17

		Результат = ЗавершитьНефискальныйЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры,	ВыходныеПараметры);
		
	ИначеЕсли Команда = "printNonFiscalText" Тогда	//	LNK 19.11.2019 12:44:17

		Результат = НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры[2], ВыходныеПараметры);
		
	ИначеЕсли Команда = "printBarCode" ИЛИ Команда = "ПечатьШтрихкода" Тогда	//	LNK 19.11.2019 12:44:17

		ТипШтрихКода = ВходныеПараметры[0];
		ШтрихКод     = ВходныеПараметры[1];

		Результат = ПечатьШтрихкода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипШтрихКода, ШтрихКод, ВыходныеПараметры);

	ИначеЕсли Команда = "PrintQR" ИЛИ Команда = "ПечатьQR" Тогда	//	LNK 27.08.2021 05:59:22

		Результат = Истина;

	Иначе
		
	//	Указанная команда не поддерживается данным драйвером
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(СтрЗаменить(
				"Команда «%Команда%» не підтримується інстальованим драйвером."
				, "%Команда%"
				, Команда
			)
		);

		Результат = Ложь;

	КонецЕсли;

	Возврат Результат;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция осуществляет открытие смены
Функция ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	СтрокаЛога = "----- Зміну відкрито -----";

	// Заполнение выходных параметров
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(ТекущаяДата());

	СообщитьПользователю(СтрокаЛога);

	Возврат Результат;

КонецФункции
                    
// Осуществляет печать фискального чека
Функция ПечатьЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)

	ПараметрыПодключения.СтрокаЛога = "";

	Результат = МенеджерОборудованияКлиентПереопределяемый.ПечатьЧека(ПодключаемоеОборудование1СФискальныйРегистраторЭмулятор,
		ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	СообщитьПользователю(ПараметрыПодключения.СтрокаЛога);

	Возврат Результат;
	
КонецФункции

Функция ЗавершитьНефискальныйЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)

	Результат  = Истина;
		
	СообщитьПользователю(ПараметрыПодключения.СтрокаЛога);

	Возврат Результат;

КонецФункции

// Функция осуществляет печать слип-чека
Функция ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                       СтрокаТекста, ВыходныеПараметры)

	Результат  = Истина;

	// Открываем чек
	Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, Ложь, Ложь, ВыходныеПараметры);

	// Печатаем строки чека
	Если Результат Тогда
		Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТекста) Цикл
			ВыделеннаяСтрока = СтрПолучитьСтроку(СтрокаТекста, НомерСтроки);
			Если Найти(ВыделеннаяСтрока, Символ(Параметры.КодСимволаЧастичногоОтреза)) > 0 Тогда
				ТаблицаОплат = Новый Массив();
				Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры);
				Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, Ложь, Ложь, ВыходныеПараметры);
			Иначе
				Если НЕ НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
				                                     ВыделеннаяСтрока, ВыходныеПараметры) Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Закрываем чек
	Если Результат Тогда
		ТаблицаОплат = Новый Массив();
		Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры);
	КонецЕсли;

	СообщитьПользователю(ПараметрыПодключения.СтрокаЛога);
	
	Возврат Результат;

КонецФункции

// Функция осуществляет открытие нового чека.
//
Функция ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры) Экспорт

	Результат  = Истина;
	СтрокаЛога = "";

	мНомерСмены = 1;
	мНомерЧека  = 1;

	СтрокаЛога = СтрокаЛога + "===== " + ?(ЧекВозврата, "Відкриття чека повернення", "Відкриття чека продажу") + " =====" + Символы.ПС;

	СтрокаЛога = СтрокаЛога + "=====" + ?(ФискальныйЧек, "== " + "Фіскальний режим", " " + "Нефіскальний режим") + "=====" + Символы.ПС;
	
	СтрокаЛога = СтрокаЛога + "№ чека: " + Формат(мНомерЧека,  "ЧЦ=4; ЧН=0; ЧВН=")
	           + "    "
	           + "№ зміни: " + Формат(мНомерСмены, "ЧЦ=4; ЧН=0; ЧВН=") + Символы.ПС;

	НомерСмены = мНомерСмены;
	НомерЧека  = мНомерЧека;

//	Заполнение выходных параметров
	ВыходныеПараметры.Добавить(НомерСмены);
	ВыходныеПараметры.Добавить(НомерЧека);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(ТекущаяДата());

	ПараметрыПодключения.Вставить("ФискальныйЧек", ФискальныйЧек);
	ПараметрыПодключения.Вставить("ЧекОткрыт"    , Истина);
	ПараметрыПодключения.Вставить("ИтогЧека"     , 0);

	ПараметрыПодключения.СтрокаЛога = ПараметрыПодключения.СтрокаЛога + СтрокаЛога;

	Возврат Результат;

КонецФункции

// Функция осуществляет отмену ранее открытого чека.
//	LNK 15.11.2022 08:33:26
Функция ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат  = Истина;
	СтрокаЛога = "";

	мНомерСмены = 1;
	мНомерЧека  = 1;

	Попытка

		СтрокаЛога = СтрокаЛога + "№ чека: " + Формат(мНомерЧека,  "ЧЦ=4; ЧН=0; ЧВН=")
		           + "    "
		           + "№ зміни: " + Формат(мНомерСмены, "ЧЦ=4; ЧН=0; ЧВН=") + Символы.ПС;

	//	Заполнение выходных параметров
		ВыходныеПараметры.Добавить(мНомерСмены);
		ВыходныеПараметры.Добавить(мНомерЧека);
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(ТекущаяДата());

		ПараметрыПодключения.СтрокаЛога = ПараметрыПодключения.СтрокаЛога + СтрокаЛога;

	Исключение

		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.ОтменитьЧек>:" + ОписаниеОшибки());

	КонецПопытки;

	Возврат Результат;   

КонецФункции

// Функция осуществляет печать фискальной строки.
//
Функция НапечататьФискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                   Наименование, Количество, Цена, ПроцентСкидки, Сумма,
                                   НомерСекции, СтавкаНДС, ДопРеквизиты, ВыходныеПараметры) Экспорт

	Результат = Истина;
	СтрокаЛога = "";

	Если Не ПараметрыПодключения.ЧекОткрыт Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Чек не було відкрито");
		Результат = Ложь;
	Иначе
		СтавкаНДССтрокой = Неопределено;
		ЭтоПодакцизныйТовар = Неопределено;
		ДопРеквизиты = МенеджерОборудованияСервер.ПолучитьТаблицуДопРеквизитов(ДопРеквизиты);
		СтавкаНДССтрокой = ДопРеквизиты[0];
		ЭтоПодакцизныйТовар = ДопРеквизиты[1];
		// Печать строки чека
		СтрокаЛога = ".............................." + Символы.ПС;
		СтрокаЛога = СтрокаЛога + Наименование + Символы.ПС;
		СтрокаЛога = СтрокаЛога + Строка(Количество) + " * " + Строка(Цена) + " = " + Формат(Количество*Цена, "ЧЦ=15; ЧДЦ=2; ЧН=0; ЧГ=0") + Символы.ПС;

		СкидкаНаценка = Сумма - Цена*Количество;
		Если СкидкаНаценка < 0 Тогда
			СтрокаЛога = СтрокаЛога + "Знижка: " + Формат(-СкидкаНаценка, "ЧЦ=15; ЧДЦ=2; ЧН=0; ЧГ=0")
					   + " (" + ПроцентСкидки + "%)" + Символы.ПС;
		Иначе
			СтрокаЛога = СтрокаЛога + "Націнка: " + Формат(СкидкаНаценка, "ЧЦ=15; ЧДЦ=2; ЧН=0; ЧГ=0")
					   + " (" + ПроцентСкидки + "%)" + Символы.ПС;
		КонецЕсли;
		СтрокаЛога = СтрокаЛога + "Відділ: №" + НомерСекции + Символы.ПС;
		Если СтавкаНДС > 0 Тогда
			СтрокаЛога = СтрокаЛога + "ПДВ: " + СтавкаНДС + "%" + Символы.ПС;
		КонецЕсли;
		Если ЭтоПодакцизныйТовар <> Неопределено Тогда
			СтавкаАкциза = УчетАкцизногоНалогаКлиентСервер.ПолучитьСтавкуАкцизногоНалога(ЭтоПодакцизныйТовар);
			СтрокаЛога = СтрокаЛога + "Акциз: " + ?(СтавкаАкциза = Неопределено, "5", СтавкаАкциза*100) + "%" + Символы.ПС;
		КонецЕсли;
		Если СтавкаНДССтрокой <> Неопределено И ЭтоПодакцизныйТовар <> Неопределено Тогда
			НалоговаяГруппа = 0;
			ТаблицаСоответствий = Неопределено;
			Параметры.Свойство("ТаблицаСоответствийНалоговыхГрупп", ТаблицаСоответствий);
			Для каждого Строка из ТаблицаСоответствий Цикл
				Если Строка[1] = ДопРеквизиты[0] И Строка[2] = ДопРеквизиты[1] Тогда
					НалоговаяГруппа = Строка[0];
					Прервать;
				КонецЕсли;
			КонецЦикла;
			СтрокаЛога = СтрокаЛога + "НалоговаяГрупа: " + НалоговаяГруппа + Символы.ПС;
		КонецЕсли;
		СтрокаЛога = СтрокаЛога + ".............................." + Символы.ПС;
		ПараметрыПодключения.ИтогЧека = ПараметрыПодключения.ИтогЧека + Сумма;
	КонецЕсли;

	ПараметрыПодключения.СтрокаЛога = ПараметрыПодключения.СтрокаЛога + СтрокаЛога;
	Возврат Результат;

КонецФункции

// Функция осуществляет печать нефискальной строки.
//
Функция НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры) Экспорт

	Результат = Истина;

	ПараметрыПодключения.СтрокаЛога = ПараметрыПодключения.СтрокаЛога + СтрокаТекста + Символы.ПС;

	Возврат Результат;

КонецФункции

//	LNK 07.07.2020 09:25:43
Функция ПечатьШтрихкода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипШтрихКода, ШтрихКод, ВыходныеПараметры)

	Результат = Истина;

	ПараметрыПодключения.СтрокаЛога = ПараметрыПодключения.СтрокаЛога + "[" + ШтрихКод + "]" + Символы.ПС;

	Возврат Результат;

КонецФункции

// Функция осуществляет закрытие ранее открытого чека.
//
Функция ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры) Экспорт

	Результат = Истина;
	СтрокаЛога = "";

	СуммаНаличнойОплаты     = 0;
	СуммаБезналичнойОплаты1 = 0;
	СуммаБезналичнойОплаты2 = 0;

	Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
		Если ТаблицаОплат[ИндексОплаты][0].Значение = 0 Тогда
			СуммаНаличнойОплаты = СуммаНаличнойОплаты + ТаблицаОплат[ИндексОплаты][1].Значение;
		ИначеЕсли ТаблицаОплат[ИндексОплаты][0].Значение = 1 Тогда
			СуммаБезналичнойОплаты1 = СуммаБезналичнойОплаты1 + ТаблицаОплат[ИндексОплаты][1].Значение;
		Иначе
			СуммаБезналичнойОплаты2 = СуммаБезналичнойОплаты2 + ТаблицаОплат[ИндексОплаты][1].Значение;
		КонецЕсли;
	КонецЦикла;

	Если Не ПараметрыПодключения.ЧекОткрыт Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Чек не було відкрито");
		Результат = Ложь;
	Иначе
		Если ПараметрыПодключения.ФискальныйЧек Тогда
			СтрокаЛога = СтрокаЛога + "РАЗОМ: " + Формат(ПараметрыПодключения.ИтогЧека, "ЧЦ=15; ЧДЦ=2; ЧН=0; ЧГ=0") + Символы.ПС;
			СтрокаЛога = СтрокаЛога + "Сплачено готівкою: "      + СуммаНаличнойОплаты + Символы.ПС;
			СтрокаЛога = СтрокаЛога + "Сплачено безготівковими 1: " + СуммаБезналичнойОплаты1 + Символы.ПС;
			СтрокаЛога = СтрокаЛога + "Сплачено безготівковими 2: " + СуммаБезналичнойОплаты2 + Символы.ПС;
			СтрокаЛога = СтрокаЛога + "Решта: "
			                        + Строка(СуммаНаличнойОплаты
			                               + СуммаБезналичнойОплаты1
			                               + СуммаБезналичнойОплаты2
			                               - ПараметрыПодключения.ИтогЧека) + Символы.ПС;
		КонецЕсли;
		СтрокаЛога = СтрокаЛога + "===== "
		                        + ?(ПараметрыПодключения.ФискальныйЧек,
		                            "Закриття фіскального чеку",
		                            "Закриття нефіскального чеку")
		                        + " =====" + Символы.ПС;
		ПараметрыПодключения.ЧекОткрыт = Ложь;
	КонецЕсли;

	ПараметрыПодключения.СтрокаЛога = ПараметрыПодключения.СтрокаЛога + СтрокаЛога;
	Возврат Результат;

КонецФункции

// Функция осуществляет внесение или выемку суммы на ФР.
//
Функция Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипИнкассации, Сумма, ВыходныеПараметры)

	Результат = Истина;

	СообщитьПользователю(?(ТипИнкассации = 1, "Внесення на суму", "Виїмка на суму") + " " + Сумма);

	// Заполнение выходных параметров
	ВыходныеПараметры.Добавить(1);
	ВыходныеПараметры.Добавить(1);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(ТекущаяДата());

	Возврат Результат;

КонецФункции

// Функция осуществляет снятие отчёта без гашения.
//
Функция НапечататьОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	СообщитьПользователю("Друк звіту без гасіння");

	// Заполнение выходных параметров
	ВыходныеПараметры.Добавить(1);
	ВыходныеПараметры.Добавить(1);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(ТекущаяДата());

	Возврат Результат;

КонецФункции

// Функция осуществляет снятие отчёта с гашением.
//
Функция НапечататьОтчетСГашением(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	СообщитьПользователю("Друк звіту з гасінням" + Символы.ПС
	                      + "----- " + "Зміна закрита" + " -----");

	// Заполнение выходных параметров
	ВыходныеПараметры.Добавить(1);
	ВыходныеПараметры.Добавить(1);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(ТекущаяДата());

	Возврат Результат;

КонецФункции

// Функция осуществляет открытие денежного ящика
//
Функция ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	СообщитьПользователю("Грошова скринька відкрита");

	Возврат Результат;

КонецФункции


// Функция осуществляет печать периодического отчёта по датам.
//
Функция НапечататьПериодическийОтчетПоДатам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)

	Результат = Истина;

	СообщитьПользователю("Друк періодичного звіту щодо дат, з дати" + Формат(ВходныеПараметры[0], "ДФ=dd.MM.yyyy")+
						 " до дати " + Формат(ВходныеПараметры[1], "ДФ=dd.MM.yyyy"));

	// Заполнение выходных параметров
	ВыходныеПараметры.Добавить(1);
	ВыходныеПараметры.Добавить(1);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(ТекущаяДата());

	Возврат Результат;

КонецФункции

// Функция осуществляет печать периодического отчёта по номерам дневных отчетов.
//
Функция НапечататьПериодическийОтчетПоНомерам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)

	Результат = Истина;

	СообщитьПользователю("Друк періодичного звіту за номерами, з номера " + ВходныеПараметры[0]+
						 " по номер " + ВходныеПараметры[1]);

	// Заполнение выходных параметров
	ВыходныеПараметры.Добавить(1);
	ВыходныеПараметры.Добавить(1);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(ТекущаяДата());

	Возврат Результат;

КонецФункции

// Функция осуществляет печать нулевого чека.
//
Функция НапечататьНулевойЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	ПараметрыПодключения.СтрокаЛога = "";
	
	ТаблицаОплат = Новый Массив();
		                 
	Результат  = Истина;
	// Открываем чек
	Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, Ложь, Истина, ВыходныеПараметры);

	// Печатаем строки чека   
	Если Результат Тогда
		ОшибкаПриПечатиСтроки = Ложь;

		Если НЕ ОшибкаПриПечатиСтроки Тогда
		  	// Закрываем чек
			Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры);	
		Иначе
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	СообщитьПользователю(ПараметрыПодключения.СтрокаЛога);
	
	Возврат Результат;

КонецФункции

// Функция осуществляет печать отчёта о проданных товарах.
//
Функция НапечататьОтчетОПроданныхТоварах(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	СообщитьПользователю("Друк звіту про продані товари");

	// Заполнение выходных параметров
	ВыходныеПараметры.Добавить(1);
	ВыходныеПараметры.Добавить(1);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(ТекущаяДата());

	Возврат Результат;

КонецФункции

// Формирует и выводит сообщение 
//
Процедура СообщитьПользователю(ТекстСообщения)
	
	ПоказатьОповещениеПользователя("Вбудований фіскальний реєстратор (емулятор)", , ТекстСообщения);
	
КонецПроцедуры
