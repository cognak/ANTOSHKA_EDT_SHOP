////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Событие ПриИзменении в колонке Представление таблицы контактной информации
Процедура ПредставлениеПриИзменении(Форма, Элемент, КИТабличнойЧасти = Ложь) Экспорт
	
	ЭтоТабличнаяЧасть = ЭтоТабличнаяЧасть(Элемент);
	
	Если ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения = Форма.Элементы[Форма.ТекущийЭлемент.Имя].ТекущиеДанные;
		Если ДанныеЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ДанныеЗаполнения = Форма;
	КонецЕсли;
	
	// Если это очистка, то сбрасываем представление
	ДанныеСтроки = ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, ЭтоТабличнаяЧасть);
	Если ДанныеСтроки=Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		ДанныеЗаполнения[Элемент.Имя] = "";
		Если ЭтоТабличнаяЧасть Тогда
			ДанныеЗаполнения[Элемент.Имя + "ЗначенияПолей"] = "";
		КонецЕсли;
		ДанныеСтроки.Представление = "";
		ДанныеСтроки.ЗначенияПолей = Неопределено;
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.ЗначенияПолей = КонтактнаяИнформацияВызовСервера.ПарсингКонтактнойИнформацииXML(Текст, ДанныеСтроки.Вид);
	ДанныеСтроки.Представление = Текст;
	
	Если ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения[Элемент.Имя + "ЗначенияПолей"] = ДанныеСтроки.ЗначенияПолей;
	КонецЕсли;
	
КонецПроцедуры

// Событие НачалоВыбора в колонке Представление таблицы контактной информации
Функция ПредставлениеНачалоВыбора(Форма, Элемент, Модифицированность = Истина, СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Результат = Новый Структура;
	Результат.Вставить("ИмяРеквизита", Элемент.Имя);
	
	ЭтоТабличнаяЧасть = ЭтоТабличнаяЧасть(Элемент);
	
	Если ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения = Форма.Элементы[Форма.ТекущийЭлемент.Имя].ТекущиеДанные;
		Если ДанныеЗаполнения = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
	Иначе
		ДанныеЗаполнения = Форма;
	КонецЕсли;
	
	ДанныеСтроки = ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, ЭтоТабличнаяЧасть);
	
	// Если представление было изменено в поле и не соответствует реквизиту, то приводим в соответствие
	Если ДанныеЗаполнения[Элемент.Имя]<>Элемент.ТекстРедактирования Тогда
		ДанныеЗаполнения[Элемент.Имя] = Элемент.ТекстРедактирования;
		ДанныеСтроки.ЗначенияПолей = Неопределено
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ДанныеСтроки.Вид);
	ПараметрыОткрытия.Вставить("ЗначенияПолей", ДанныеСтроки.ЗначенияПолей);
	ПараметрыОткрытия.Вставить("Представление", Элемент.ТекстРедактирования);
	
	Если Не ЭтоТабличнаяЧасть Тогда
		ПараметрыОткрытия.Вставить("Комментарий", ДанныеСтроки.Комментарий);
	КонецЕсли;
	
	РезультатОткрытияФормы = КонтактнаяИнформацияКлиент.ОткрытьФормуКонтактнойИнформацииМодально(ПараметрыОткрытия);
	Если ТипЗнч(РезультатОткрытияФормы)<>Тип("Структура") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЭтоТабличнаяЧасть Тогда
		
		ДанныеЗаполнения[Элемент.Имя + "ЗначенияПолей"] = РезультатОткрытияФормы.КонтактнаяИнформация;
		
	Иначе
		
		Если ПустаяСтрока(ДанныеСтроки.Комментарий) И Не ПустаяСтрока(РезультатОткрытияФормы.Комментарий) Тогда
			Результат.Вставить("ЭтоДобавлениеКомментария", Истина);
		ИначеЕсли Не ПустаяСтрока(ДанныеСтроки.Комментарий) И ПустаяСтрока(РезультатОткрытияФормы.Комментарий) Тогда
			Результат.Вставить("ЭтоДобавлениеКомментария", Ложь);
		Иначе
			Если Не ПустаяСтрока(ДанныеСтроки.Комментарий) Тогда
				Форма.Элементы["Комментарий" + Элемент.Имя].Заголовок = РезультатОткрытияФормы.Комментарий;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеСтроки.Представление = РезультатОткрытияФормы.Представление;
		ДанныеСтроки.ЗначенияПолей = РезультатОткрытияФормы.КонтактнаяИнформация;
		ДанныеСтроки.Комментарий   = РезультатОткрытияФормы.Комментарий;
		
	КонецЕсли;
	
	ДанныеЗаполнения[Элемент.Имя] = РезультатОткрытияФормы.Представление;
	
	Форма.Модифицированность = Истина;
	
	Возврат Результат;
	
КонецФункции

// Событие Очистка в колонке Представление таблицы контактной информации
Функция ПредставлениеОчистка(Форма, ИмяРеквизита) Экспорт
	
	Результат = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденнаяСтрока = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Результат)[0];
	НайденнаяСтрока.ЗначенияПолей = "";
	НайденнаяСтрока.Представление = "";
	
	Если ЗначениеЗаполнено(НайденнаяСтрока.Комментарий) Тогда
		Результат.Вставить("ЭтоДобавлениеКомментария", Ложь);
	КонецЕсли;
	НайденнаяСтрока.Комментарий = "";
	
	Форма[ИмяРеквизита] = "";
	Форма.Модифицированность = Истина;
	
	Возврат Результат;
	
КонецФункции

// Обработчик дополнительной команды (копирование, активация и.т.п) контактной информации
Функция ПодключаемаяКоманда(Форма, Знач ИмяКоманды) Экспорт
	
	Результат = Новый Структура;
	
	Если ИмяКоманды = "КонтактнаяИнформацияДобавитьПолеВвода" Тогда
		
		ВыбраннаяСтрока = Форма.ВыбратьИзМеню(Форма.СписокДобавляемыхЭлементовКонтактнойИнформации, Форма.Элементы.КонтактнаяИнформацияДобавитьПолеВвода);
		
		Если ВыбраннаяСтрока <> Неопределено Тогда
			Результат.Вставить("ДобавляемыйВид", ВыбраннаяСтрока.Значение);
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	ИначеЕсли Лев(ИмяКоманды, 7) = "Команда" Тогда
		ИмяРеквизита = СтрЗаменить(ИмяКоманды, "Команда", "");
		КомандаКонтекстногоМеню = Ложь;
	Иначе
		ИмяРеквизита = СтрЗаменить(ИмяКоманды, "КонтекстноеМеню", "");
		КомандаКонтекстногоМеню = Истина;
	КонецЕсли;
	
	Результат.Вставить("ИмяРеквизита", ИмяРеквизита);
	НайденнаяСтрока = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Результат)[0];
	ТипКонтактнойИнформации = НайденнаяСтрока.Тип;
	
	Если КомандаКонтекстногоМеню Тогда
		
		ВвестиКомментарий(Форма, ИмяРеквизита, НайденнаяСтрока, Результат);
		
	Иначе
		
		Если ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
			
			ЗаполнитьАдрес(Форма, ИмяРеквизита, НайденнаяСтрока, Результат);
			
		ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
			
			НаписатьПисьмо(Форма, ИмяРеквизита);
			
		ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница") Тогда
			
			ПерейтиПоСсылке(Форма, ИмяРеквизита);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обработчик открытия формы адреса
Процедура ОткрытьФормуВводаАдреса(Форма, Результат) Экспорт
	
	Если Результат.Свойство("ЭлементФормыАдреса") Тогда
		ПредставлениеНачалоВыбора(Форма, Форма.Элементы[Результат.ЭлементФормыАдреса]);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает строку дополнительных значений по имени реквизита.
//
// Параметры:
//    Форма   - Форма - передаваемая форма.
//    Элемент - ДанныеФормыСтруктураСКоллекцией - данные формы.
//
// Возвращаемое значение - Неопределено или СтрокаКоллекции - строка коллекции.
//
Функция ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, ЭтоТабличнаяЧасть = Ложь)
	
	Отбор = Новый Структура("ИмяРеквизита", Элемент.Имя);
	Строки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	
	Если ЭтоТабличнаяЧасть И ДанныеСтроки <> Неопределено Тогда
		
		ПутьКСтроке = Форма.Элементы[Форма.ТекущийЭлемент.Имя].ТекущиеДанные;
		
		ДанныеСтроки.Представление = ПутьКСтроке[Элемент.Имя];
		ДанныеСтроки.ЗначенияПолей = ПутьКСтроке[Элемент.Имя + "ЗначенияПолей"];
		
	КонецЕсли;
	
	Возврат ДанныеСтроки;
	
КонецФункции

// Формирует строковое представление телефона.
//
// Параметры:
//    КодСтраны     - Строка - код страны.
//    КодГорода     - Строка - код города.
//    НомерТелефона - Строка - номер телефона.
//    Добавочный    - Строка - добавочный номер.
//    Комментарий - Строка - комментарий.
//
// Возвращаемое значение - Строка - представление телефона.
//
Функция СформироватьПредставлениеТелефона(КодСтраны, КодГорода, НомерТелефона, Добавочный, Комментарий) Экспорт
	
	Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
	КодСтраны, КодГорода, НомерТелефона, Добавочный, Комментарий);
	
	Возврат Представление;
	
КонецФункции

Процедура НаписатьПисьмо(Форма, ИмяРеквизита)
	
	АдресПочты = Форма.Элементы[ИмяРеквизита].ТекстРедактирования;
	
	МодульПочты = МодульКлиентаПочты();
	Если МодульПочты=Неопределено Тогда
		// Нет подсистемы почты
		ЗапуститьПриложение("mailto:" + АдресПочты);
	Иначе        
		// Используем встроенную
		МодульПочты.ОткрытьФормуОтправкиПочтовогоСообщения(, АдресПочты);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерейтиПоСсылке(Форма, ИмяРеквизита)
	
	АдресСсылки = Форма.Элементы[ИмяРеквизита].ТекстРедактирования;
	
	Попытка
		ПерейтиПоНавигационнойСсылке(АдресСсылки);
	Исключение
		Попытка
			АдресСсылкиHttp = "http://" + АдресСсылки;
			ПерейтиПоНавигационнойСсылке(АдресСсылкиHttp);
		Исключение
			ПерейтиПоНавигационнойСсылке(АдресСсылки);
		КонецПопытки;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьАдрес(Форма, ИмяРеквизита, НайденнаяСтрока, Результат)
	
	Отбор = Новый Структура("Тип, ЭтоРеквизитТабличнойЧасти", НайденнаяСтрока.Тип, Ложь);
	НайденныеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	
	НайденныеСтроки.Удалить(НайденныеСтроки.Найти(НайденнаяСтрока));
	
	АдресаДляЗаполнения = Новый СписокЗначений;
	
	Для Каждого Адрес Из НайденныеСтроки Цикл
		
		Если ПустаяСтрока(Адрес.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		АдресаДляЗаполнения.Добавить(Адрес, Строка(Адрес.Вид) + ": " + Адрес.Представление);
		
	КонецЦикла;
	
	КоличествоАдресов = АдресаДляЗаполнения.Количество();
	
	Если КоличествоАдресов = 1 Тогда
		
		ВыбранныйАдрес = АдресаДляЗаполнения[0];
		
	ИначеЕсли КоличествоАдресов > 1 Тогда
		
		ВыбранныйАдрес = Форма.ВыбратьИзМеню(АдресаДляЗаполнения, Форма.Элементы["Команда" + ИмяРеквизита]);
		
	Иначе
		
		ВыбранныйАдрес = Неопределено;
		
	КонецЕсли;
	
	Если ВыбранныйАдрес <> Неопределено Тогда
		
		СтрокаДляКопирования = ВыбранныйАдрес.Значение;
		
		Если ПустаяСтрока(НайденнаяСтрока.Комментарий) И Не ПустаяСтрока(СтрокаДляКопирования.Комментарий) Тогда
			Результат.Вставить("ЭтоДобавлениеКомментария", Истина);
		ИначеЕсли Не ПустаяСтрока(НайденнаяСтрока.Комментарий) И ПустаяСтрока(СтрокаДляКопирования.Комментарий) Тогда
			Результат.Вставить("ЭтоДобавлениеКомментария", Ложь);
		КонецЕсли;
		
		НайденнаяСтрока.ЗначенияПолей = СтрокаДляКопирования.ЗначенияПолей;
		НайденнаяСтрока.Представление = СтрокаДляКопирования.Представление;
		НайденнаяСтрока.Комментарий = СтрокаДляКопирования.Комментарий;
		
		Форма[ИмяРеквизита] = СтрокаДляКопирования.Представление;
		
		Форма.Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВвестиКомментарий(Форма, ИмяРеквизита, НайденнаяСтрока, Результат)
	
	ИмяКомментарияРеквизита = НСтр("ru='Комментарий'") + ИмяРеквизита;
	
	Комментарий = НайденнаяСтрока.Комментарий;
	
	КомментарийБылПустой = ПустаяСтрока(Комментарий);
	
	КомментарийИзменился = Ложь;
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Комментарий, Комментарий, КомментарийИзменился);
	
	КомментарийСталПустой = ПустаяСтрока(Комментарий);
	
	ТребуетсяПерерисовка = Ложь;
	
	Если КомментарийИзменился Тогда
		
		Форма.Модифицированность = Истина;
		НайденнаяСтрока.Комментарий = Комментарий;
		
		Если КомментарийБылПустой И Не КомментарийСталПустой Тогда
			Результат.Вставить("ЭтоДобавлениеКомментария", Истина);
		ИначеЕсли Не КомментарийБылПустой И КомментарийСталПустой Тогда
			Результат.Вставить("ЭтоДобавлениеКомментария", Ложь);
		Иначе
			
			КомментарийЭлемента = Форма.Элементы[ИмяКомментарияРеквизита];
			КомментарийЭлемента.Заголовок = Комментарий;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоТабличнаяЧасть(Элемент)
	
	Родитель = Элемент.Родитель;
	
	Пока ТипЗнч(Родитель) <> Тип("УправляемаяФорма") Цикл
		
		Если ТипЗнч(Родитель) = Тип("ТаблицаФормы") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Родитель = Родитель.Родитель;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы

// Открывает форму загрузки адресного классификатора.
//
Процедура ПриЗагрузкеАдресногоКлассификатора() Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификаторКлиент");
		Модуль.ЗагрузитьАдресныйКлассификатор();
	КонецЕсли;
	
КонецПроцедуры

// Подбирает адресный объект через форму.
//
// Параметры:
//    СтруктураАдреса     - Структура - структура адреса.
//    СтруктураРезультата - Неопределено или Структура - структура возврат выбранного адресного объекта.
//
Процедура ПриПодбореАдресногоОбъекта(Знач СтруктураАдреса, СтруктураРезультата) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификаторКлиент");
		Модуль.ПриПодбореАдресногоОбъекта(СтруктураАдреса, СтруктураРезультата);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность изменения заблокированных реквизитов формы
//
Процедура ПриРазрешенииРедактированияРеквизитовОбъекта(Форма, РедактированиеРазрешено) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектовКлиент");
		РедактированиеРазрешено = Модуль.РазрешитьРедактированиеРеквизитовОбъекта(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает доступность элементов формы
//
Процедура ПриУстановкеДоступностиЭлементовФормы(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектовКлиент");
		Модуль.УстановитьДоступностьЭлементовФормы(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет использование подсистемы "Работа с почтовыми сообщениями", возвращает клиентский модуль для работы
//
Функция МодульКлиентаПочты()
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		Возврат ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
	КонецЕсли;
	Возврат Неопределено;
КонецФункции
