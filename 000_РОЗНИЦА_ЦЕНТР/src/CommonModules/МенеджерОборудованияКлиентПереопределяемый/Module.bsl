
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает текущую дату, приведенную к часовому поясу сеанса.
// Предназначена для использования вместо функции ТекущаяДата().
//
Функция ДатаСеанса() Экспорт
	Возврат ОбщегоНазначенияКлиент.ДатаСеанса();
КонецФункции

// Функция возвращает объект обработчика драйвера по его наименованию
//
Функция ПолучитьОбработчикДрайвера(ОбработчикДрайвера) Экспорт
	
	Результат = Неопределено;   

	// Вызов метода выполнения команды у обработчика
	Если ОбработчикДрайвера <> Неопределено Тогда
		
		// Сканеры штрихкода
		Если ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССканерыШтрихкода") Тогда
			Возврат ПодключаемоеОборудование1ССканерыШтрихкодаКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодСканерыШтрихкода") Тогда
			Возврат ПодключаемоеОборудованиеСканкодСканерыШтрихкодаКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСканерыШтрихкода") Тогда
			Возврат ПодключаемоеОборудованиеАтолСканерыШтрихкодаКлиент;
		КонецЕсли;
		// Конец Сканеры штрихкода
		
		// Считыватели магнитных карт
		Если ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССчитывателиМагнитныхКарт") Тогда
			Возврат ПодключаемоеОборудование1ССчитывателиМагнитныхКартКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСчитывателиМагнитныхКарт") Тогда
			Возврат ПодключаемоеОборудованиеАтолСчитывателиМагнитныхКартКлиент;
		КонецЕсли;
		// Конец Считыватели магнитных карт

		// Фискальные регистраторы
		Если ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СФискальныйРегистраторЭмулятор") Тогда
			Возврат ПодключаемоеОборудование1СФискальныйРегистраторЭмулятор;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАртСофтФискальныйРегистратор") Тогда
			Возврат ПодключаемоеОборудованиеАртСофтФискальныйРегистратор;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикResonanceФискальныйРегистратор") Тогда
			Возврат ПодключаемоеОборудованиеResonanceФискальныйРегистратор;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикDeviceManagerФискальныйРегистратор") Тогда
			Возврат ПодключаемоеОборудованиеDeviceManagerФискальныйРегистратор;
		КонецЕсли;
		// Конец Фискальные регистраторы

		// Дисплеи покупателя
		Если ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолДисплеиПокупателя") Тогда
			Возврат ПодключаемоеОборудованиеАтолДисплеиПокупателяКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодДисплеиПокупателя") Тогда
			Возврат ПодключаемоеОборудованиеСканкодДисплеиПокупателяКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМДисплеиПокупателя") Тогда
			Возврат ПодключаемоеОборудованиеШтрихМДисплеиПокупателяКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикККСДисплеиПокупателя") Тогда
			Возврат ПодключаемоеОборудованиеККСДисплеиПокупателяКлиент;
		КонецЕсли;                 
		// Конец Дисплеи покупателя
		
		// Терминалы сбора данных
		Если ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолТерминалыСбораДанных") Тогда
			Возврат ПодключаемоеОборудованиеАтолТерминалыСбораДанныхКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМТерминалыСбораДанных") Тогда
			Возврат ПодключаемоеОборудованиеШтрихМТерминалыСбораДанныхКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодТерминалыСбораДанных") Тогда
			Возврат ПодключаемоеОборудованиеСканкодТерминалыСбораДанныхКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканситиТерминалыСбораДанных") Тогда
			Возврат ПодключаемоеОборудованиеСканситиТерминалыСбораДанныхКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикКлеверенсТерминалыСбораДанных") Тогда
			Возврат ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;
		КонецЕсли;

		// Конец Терминалы сбора данных
		
		// Эквайринговые терминалы
		Если ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикIngenicoECRCommXПриватбанк")
			// + HVOYA 12.01.2017 14:30:43, Латышев А.А.
			или ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикРайфайзенБанк") Тогда
			// - HVOYA 12.01.2017 14:30:43, Латышев А.А.   
			Возврат ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;
		КонецЕсли;
		// Конец Эквайринговые терминалы
		                     
		// Электронные весы
		Если ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолЭлектронныеВесы") Тогда
			Возврат ПодключаемоеОборудованиеАтолЭлектронныеВесыКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМЭлектронныеВесы") Тогда
			Возврат ПодключаемоеОборудованиеШтрихМЭлектронныеВесыКлиент;
		КонецЕсли;
		// Конец Электронные весы
		
		// Весы с печатью этикеток
		Если ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикACOMВесыСПечатьюЭтикеток") Тогда
			Возврат ПодключаемоеОборудованиеACOMВесыСПечатьюЭтикетокКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикScaleCASВесыСПечатьюЭтикеток") Тогда
			Возврат ПодключаемоеОборудованиеScaleCASВесыСПечатьюЭтикетокКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМВесыСПечатьюЭтикеток") Тогда
			Возврат ПодключаемоеОборудованиеШтрихМВесыСПечатьюЭтикетокКлиент;
		КонецЕсли;
		// Конец Весы с печатью этикеток
		
		// ККМ offline
		// Конец ККМ offline
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Осуществляет печать фискального чека
//
Функция ПечатьЧека(ОбщийМодульОборудования, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры, ВывестиСообщениеПользователю = Ложь) Экспорт
	
	ТаблицаНоменклатуры  = ВходныеПараметры[0];
	ТаблицаОплат         = ВходныеПараметры[1];
	ОбщиеПараметры       = ВходныеПараметры[2];
	ПараметрыШаблонаЧека = ОбщиеПараметры[17];
	
	ТаблицаДопРеквизитов = Новый Массив;
	ТаблицаДопРеквизитов.Добавить(Новый Массив);
	
	Результат  = Истина;
	ПараметрыПодключения.Вставить("СтрокаЛога", "");
	
	// Открываем чек
	Результат = ОбщийМодульОборудования.ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения,
	                       ОбщиеПараметры[0] = 1, ОбщиеПараметры[1], ВыходныеПараметры);
	// Печатаем строки чека   
	Если Результат Тогда

		СтруктураШаблонаЧека = МенеджерОборудованияСерверПереопределяемый.ПолучитьСтруктуруШаблонаЧека(ПараметрыШаблонаЧека, ТаблицаНоменклатуры.Количество(), ПараметрыПодключения.ИДУстройства);
		МассивТекстаСтрокиШапки   = СтруктураШаблонаЧека.МассивТекстаСтрокиШапки;
		МассивТекстаСтрокиПодвал  = СтруктураШаблонаЧека.МассивТекстаСтрокиПодвал;
		МассивШапкаЧека           = СтруктураШаблонаЧека.Шапка;
		МассивПодвалЧека          = СтруктураШаблонаЧека.Подвал;
		ОднаФискальнаяСтрока      = СтруктураШаблонаЧека.ОднаФискальнаяСтрока;
		ФискальнаяСтрокаБезПечати = СтруктураШаблонаЧека.ФискальнаяСтрокаБезПечати;
		
		// Печать шапки чека
		Для Каждого СтрокаШапки Из МассивШапкаЧека Цикл
			Если НЕ ОбщийМодульОборудования.НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
			                                     СтрокаШапки, ВыходныеПараметры) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ИтогПоЧеку = 0.00;
		ПроцентСкидки = 0.00;
		
		Для ИндексМассива = 0 По ТаблицаНоменклатуры.Количество() - 1 Цикл
			// Печать шапки строки
			Для Каждого СтрокаШапки Из МассивТекстаСтрокиШапки[ИндексМассива] Цикл
				Если НЕ ОбщийМодульОборудования.НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
				                                     СтрокаШапки, ВыходныеПараметры) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
				
			Если НЕ ОднаФискальнаяСтрока Тогда
				Если НЕ ФискальнаяСтрокаБезПечати Тогда
					Наименование = ТаблицаНоменклатуры[ИндексМассива][0].Значение;
				Иначе
					Наименование = "";
				КонецЕсли;
				Количество    = ТаблицаНоменклатуры[ИндексМассива][5].Значение;
				Цена          = ТаблицаНоменклатуры[ИндексМассива][4].Значение;
				ПроцентСкидки = ТаблицаНоменклатуры[ИндексМассива][8].Значение;
				Сумма         = ТаблицаНоменклатуры[ИндексМассива][9].Значение;
				НомерСекции   = ТаблицаНоменклатуры[ИндексМассива][3].Значение;
				СтавкаНДС     = ТаблицаНоменклатуры[ИндексМассива][12].Значение;
				ТаблицаДопРеквизитов[0].Очистить();
				ТаблицаДопРеквизитов[0].Добавить(ТаблицаНоменклатуры[ИндексМассива][17].Значение);
				ТаблицаДопРеквизитов[0].Добавить(ТаблицаНоменклатуры[ИндексМассива][18].Значение);
				
				ДопРеквизиты = МенеджерОборудованияСервер.СформироватьТаблицуДопРеквизитов(ТаблицаДопРеквизитов);
					
				Если НЕ ОбщийМодульОборудования.НапечататьФискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
				                                   Наименование, Количество, Цена, ПроцентСкидки, Сумма,
												   НомерСекции, СтавкаНДС, ДопРеквизиты, ВыходныеПараметры) Тогда
					Прервать;
				КонецЕсли;
			Иначе
				ИтогПоЧеку    = ИтогПоЧеку + ТаблицаНоменклатуры[ИндексМассива][9].Значение; // Сумма строки
				ПроцентСкидки = ПроцентСкидки + ТаблицаНоменклатуры[ИндексМассива][8].Значение; // Процент скидки по строке
			КонецЕсли;
			// Печать подвала строки
			Для Каждого СтрокаШапки Из МассивТекстаСтрокиПодвал[ИндексМассива] Цикл
				Если НЕ ОбщийМодульОборудования.НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
				                                     СтрокаШапки, ВыходныеПараметры) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если ОднаФискальнаяСтрока Тогда
			Наименование  = "Всего:";
			Количество    = 1.00;
			Цена          = ИтогПоЧеку;
			ПроцентСкидки = ПроцентСкидки;
			Сумма         = ИтогПоЧеку;
			НомерСекции   = НомерСекции;
			СтавкаНДС     = 0.00;
			
			ТаблицаДопРеквизитов[0].Очистить();
			ТаблицаДопРеквизитов[0].Добавить(НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДССтрокой(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НеНДС")));
			ТаблицаДопРеквизитов[0].Добавить(Ложь);
			
			ДопРеквизиты = МенеджерОборудованияСервер.СформироватьТаблицуДопРеквизитов(ТаблицаДопРеквизитов);
			
			// Печать фискальных строк
			Если НЕ ОбщийМодульОборудования.НапечататьФискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
												Наименование, Количество, Цена, ПроцентСкидки, Сумма,
												НомерСекции, СтавкаНДС, ДопРеквизиты, ВыходныеПараметры) Тогда
			КонецЕсли;
		КонецЕсли;
		// Печать подвала чека
		Для Каждого СтрокаШапки Из МассивПодвалЧека Цикл
			Если НЕ ОбщийМодульОборудования.НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
			                                     СтрокаШапки, ВыходныеПараметры) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	// Закрываем чек
	Если Результат Тогда
		Результат = ОбщийМодульОборудования.ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры);
	КонецЕсли;
	
	Если ВывестиСообщениеПользователю Тогда
		ОбщийМодульОборудования.СообщитьПользователю(ПараметрыПодключения.СтрокаЛога);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Осуществляет печать фискального чека по умолчанию
//
Функция ПечатьЧекаПоУмолчанию(ОбщийМодульОборудования, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры, ВывестиСообщениеПользователю = Ложь) Экспорт
	
	ТаблицаНоменклатуры = ВходныеПараметры[0];
	ТаблицаОплат        = ВходныеПараметры[1];
	ОбщиеПараметры      = ВходныеПараметры[2];
	
	ТаблицаДопРеквизитов = Новый Массив;
	ТаблицаДопРеквизитов.Добавить(Новый Массив);
	
	Результат  = Истина;
	// Открываем чек
	Результат = ОбщийМодульОборудования.ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения,
	                       ОбщиеПараметры[0] = 1, ОбщиеПараметры[1], ВыходныеПараметры);

	// Печатаем строки чека   
	Если Результат Тогда
		ОшибкаПриПечатиСтроки = Ложь;
		// Печатаем строки чека
		Для ИндексМассива = 0 По ТаблицаНоменклатуры.Количество() - 1 Цикл
			Наименование  = ТаблицаНоменклатуры[ИндексМассива][0].Значение;
			Количество    = ТаблицаНоменклатуры[ИндексМассива][5].Значение;
			Цена          = ТаблицаНоменклатуры[ИндексМассива][4].Значение;
			ПроцентСкидки = ТаблицаНоменклатуры[ИндексМассива][8].Значение;
			Сумма         = ТаблицаНоменклатуры[ИндексМассива][9].Значение;
			НомерСекции   = ТаблицаНоменклатуры[ИндексМассива][3].Значение;
			СтавкаНДС     = ТаблицаНоменклатуры[ИндексМассива][12].Значение;
			ТаблицаДопРеквизитов[0].Очистить();
			ТаблицаДопРеквизитов[0].Добавить(ТаблицаНоменклатуры[ИндексМассива][17].Значение);
			ТаблицаДопРеквизитов[0].Добавить(ТаблицаНоменклатуры[ИндексМассива][18].Значение);
			
			ДопРеквизиты = МенеджерОборудованияСервер.СформироватьТаблицуДопРеквизитов(ТаблицаДопРеквизитов);

			Если НЕ ОбщийМодульОборудования.НапечататьФискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
											   Наименование, Количество, Цена, ПроцентСкидки, Сумма,
											   НомерСекции, СтавкаНДС, ДопРеквизиты, ВыходныеПараметры) Тогда
				ОшибкаПриПечатиСтроки = Истина;   
				Прервать;
			КонецЕсли;
			
		КонецЦикла;

		Если НЕ ОшибкаПриПечатиСтроки Тогда
		  	// Закрываем чек
			Результат = ОбщийМодульОборудования.ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры);	
		Иначе
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции