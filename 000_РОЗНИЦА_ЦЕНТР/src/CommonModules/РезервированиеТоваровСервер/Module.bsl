//	LNK 31.10.2017 15:44:46
Процедура ПроверитьДоступностьТоваровСУчетомРезерва(СтруктураПараметров, РежимЗаписи, Отказ)	Экспорт

	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(СтруктураПараметров, "ПропуститьКонтрольРезультатовПроведения", Ложь) = Истина Тогда

		Возврат;

	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	БылОтказ = Отказ;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Магазин КАК Справочник.Магазины) КАК Магазин,
	|	ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады) КАК Склад,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Магазин,
	|	Склад,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатков.Характеристика КАК Характеристика,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОстатков.КоличествоНаСкладе < 0
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаОстатков.КоличествоНаСкладе
	|		КОНЕЦ) КАК КоличествоНаСкладе,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОстатков.КоличествоЗаказано < 0
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаОстатков.КоличествоЗаказано
	|		КОНЕЦ) КАК КоличествоЗаказано,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОстатков.КоличествоЖелания < 0
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаОстатков.КоличествоЖелания
	|		КОНЕЦ) КАК КоличествоЖелания
	|ПОМЕСТИТЬ Ресурсы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|		ТоварыНаСкладах.Характеристика КАК Характеристика,
	|		ТоварыНаСкладах.КоличествоОстаток КАК КоличествоНаСкладе,
	|		0 КАК КоличествоЗаказано,
	|		0 КАК КоличествоЖелания
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				&Граница,
	|				(Склад, Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						Товары.Склад,
	|						Товары.Номенклатура,
	|						Товары.Характеристика
	|					ИЗ
	|						Товары)) КАК ТоварыНаСкладах
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыПокупателей.Номенклатура,
	|		ЗаказыПокупателей.Характеристика,
	|		0,
	|		ЗаказыПокупателей.КоличествоОстаток,
	|		0
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(
	|				&Граница,
	|				(Магазин, Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							Товары.Магазин,
	|							Товары.Номенклатура,
	|							Товары.Характеристика
	|						ИЗ
	|							Товары)
	|					И ВЫБОР
	|						КОГДА НЕ ТИПЗНАЧЕНИЯ(&ЗаказИсключить) В (ТИП(Документ.ЗаказПокупателя), ТИП(Документ.ЗапросДоступностиТоваров))
	|								ИЛИ &ЗаказИсключить В (ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.ЗапросДоступностиТоваров.ПустаяСсылка))
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ НЕ Заказ = &ЗаказИсключить
	|					КОНЕЦ) КАК ЗаказыПокупателей
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЛистыЖеланий.Номенклатура,
	|		ЛистыЖеланий.Характеристика,
	|		0,
	|		0,
	|		ЛистыЖеланий.КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЛистыЖеланий.Остатки(
	|				&Граница,
	|				(Магазин, Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						Товары.Магазин,
	|						Товары.Номенклатура,
	|						Товары.Характеристика
	|					ИЗ
	|						Товары)) КАК ЛистыЖеланий) КАК ТаблицаОстатков
	|ГДЕ
	|	(ТаблицаОстатков.КоличествоНаСкладе >= 0
	|			ИЛИ ТаблицаОстатков.КоличествоЗаказано >= 0
	|			ИЛИ ТаблицаОстатков.КоличествоЖелания >= 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатков.Номенклатура,
	|	ТаблицаОстатков.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведущая.Номенклатура.Код КАК Код,
	|	Ведущая.Номенклатура.Наименование КАК Наименование,
	|	Ведущая.Номенклатура КАК Номенклатура,
	|	Ведущая.Характеристика КАК Характеристика,
	|	Ведущая.Количество КАК Количество,
	|	ЕСТЬNULL(Ресурсы.КоличествоНаСкладе, 0) КАК КоличествоНаСкладе,
	|	ЕСТЬNULL(Ресурсы.КоличествоЗаказано, 0) КАК КоличествоЗаказано,
	|	ЕСТЬNULL(Ресурсы.КоличествоЖелания, 0) КАК КоличествоЖелания,
	|	ЕСТЬNULL(Ресурсы.КоличествоНаСкладе, 0) - (ЕСТЬNULL(Ресурсы.КоличествоЗаказано, 0) + ЕСТЬNULL(Ресурсы.КоличествоЖелания, 0)) КАК КоличествоДоступно,
	|	Ведущая.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|	Ведущая.Склад КАК Склад
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.Склад.Наименование КАК Склад,
	|		Товары.Номенклатура КАК Номенклатура,
	|		Товары.Характеристика КАК Характеристика,
	|		СУММА(Товары.Количество) КАК Количество
	|	ИЗ
	|		Товары КАК Товары
	|	ГДЕ
	|		НЕ Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Товары.Номенклатура,
	|		Товары.Характеристика,
	|		Товары.Склад.Наименование) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Ресурсы КАК Ресурсы
	|		ПО Ведущая.Номенклатура = Ресурсы.Номенклатура
	|			И Ведущая.Характеристика = Ресурсы.Характеристика
	|ГДЕ
	|	Ведущая.Количество > ЕСТЬNULL(Ресурсы.КоличествоНаСкладе, 0) - (ЕСТЬNULL(Ресурсы.КоличествоЗаказано, 0) + ЕСТЬNULL(Ресурсы.КоличествоЖелания, 0))"
	);
	Запрос.УстановитьПараметр("Граница", СтруктураПараметров.Граница);
	Запрос.УстановитьПараметр("ЗаказИсключить", ?(СтруктураПараметров.Свойство("ЗаказПокупателя"), СтруктураПараметров.ЗаказПокупателя, Документы.ЗаказПокупателя.ПустаяСсылка()));
	Запрос.УстановитьПараметр("Товары" , СтруктураПараметров.Товары);
	
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		СообщитьОбОшибкахДоступностиТоваров(Результат, Отказ);

		Если Отказ И ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда

			Отказ = БылОтказ;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедуры выдачи сообщений об ошибках проведения.
//
Процедура СообщитьОбОшибкахДоступностиТоваров(РезультатЗапроса, Отказ)

	ШаблонСообщения = НСтр("ru = 'Товар %1 
		|Превышен свободный остаток на складе %2 на %3 %4 с учётом остатка %5 %4 и резерва ИЗ= %6 %4, ЛЖ= %7 %4
		|Требуется %8 %4, а доступно %9 %4'");

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.Номенклатура, Выборка.Характеристика,,, "[" + СокрЛП(Выборка.Код) + "] «" + СокрЛП(Выборка.Наименование) + "»"),
			СокрЛП(Выборка.Склад),
			СокрЛП(Выборка.Количество - Выборка.КоличествоДоступно),
			СокрЛП(Выборка.ЕдиницаИзмерения),
			СокрЛП(Выборка.КоличествоНаСкладе),
			СокрЛП(Выборка.КоличествоЗаказано),
			СокрЛП(Выборка.КоличествоЖелания),
			СокрЛП(Выборка.Количество),
			СокрЛП(Выборка.КоличествоДоступно));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);

	КонецЦикла;

КонецПроцедуры

//	LNK 06.12.2017 12:31:09
Функция ПолучитьЗаказПокупателяПоНомеруМагазину(НомерДокумента, Магазин)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();

	Если НЕ ПустаяСтрока(НомерДокумента) Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаДокументы.Дата КАК Дата,
		|	ТаблицаДокументы.Ссылка КАК ЗаказПокупателя
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ТаблицаДокументы
		|ГДЕ
		|	ТаблицаДокументы.Номер = &НомерДокумента
		|	И ТаблицаДокументы.Магазин = &Магазин
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокументы.Дата,
		|	ТаблицаДокументы.Ссылка
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ТаблицаДокументы
		|ГДЕ
		|	ТаблицаДокументы.Номер = &НомерДокумента
		|	И ТаблицаДокументы.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.Розница)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ,
		|	ЗаказПокупателя УБЫВ"
		);//СЮП 15.02.2024 11.14.04 https://awdev.atlassian.net/browse/RETAIL1C-652
		Запрос.УстановитьПараметр("НомерДокумента", СокрЛП(НомерДокумента));
		Запрос.УстановитьПараметр("Магазин"       , Магазин);
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда

			Выборка = Результат.Выбрать();
			Выборка.Следующий();

			ЗаказПокупателя = Выборка.ЗаказПокупателя;

		КонецЕсли;

	КонецЕсли;

	Возврат ЗаказПокупателя;

КонецФункции // ПолучитьЗаказПокупателяПоНомеруМагазину()

//	LNK 06.12.2017 14:19:13
Процедура ПроверитьЗаказПокупателяВПеремещенииТоваров(ЗаказПокупателя, НомерДокумента, ДатаДокумента, Магазин)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Ведущая.Дата КАК Дата,
	|	Ведущая.Ссылка КАК ПеремещениеТоваров,
	|	ВЫРАЗИТЬ(&ЗаказПокупателя КАК Документ.ЗаказПокупателя) КАК ЗаказПокупателя,
	|	ЕСТЬNULL(ТаблицаПодчиненные.Ссылка, ЗНАЧЕНИЕ(Документ.РасходныйОрдерНаТовары.ПустаяСсылка)) КАК РасходныйОрдер,
	|	ЕСТЬNULL(ТаблицаПодчиненные.Проведен, ЛОЖЬ) КАК ОрдерПроведен
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК ТаблицаПодчиненные
	|		ПО Ведущая.Ссылка = ТаблицаПодчиненные.ДокументОснование
	|ГДЕ
	|	НЕ Ведущая.ПометкаУдаления
	|	И Ведущая.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаДокумента, ДЕНЬ, -10) И ДОБАВИТЬКДАТЕ(&ДатаДокумента, ДЕНЬ, 10)
	|	И Ведущая.НомерВнешнегоДокумента = &НомерДокумента
	|	И Ведущая.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА Ведущая.МагазинОтправитель.СкладУправляющейСистемы = ЛОЖЬ
	|				ТОГДА Ведущая.МагазинОтправитель
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ = &Магазин
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ПеремещениеТоваров"
	);
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	Запрос.УстановитьПараметр("НомерДокумента" , СокрЛП(НомерДокумента));
	Запрос.УстановитьПараметр("ДатаДокумента"  , ДатаДокумента);
	Запрос.УстановитьПараметр("Магазин"        , Магазин);
	
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		ПараметрыСеанса.ВыполняютсяСлужебныеДействия = Истина;
		ПараметрыСеанса.ИсключительныйРежим = Истина;
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл

			НачатьТранзакцию();

			Попытка

				ПеремещениеОбъект = Выборка.ПеремещениеТоваров.ПолучитьОбъект();
				ПеремещениеОбъект.ОбменДанными.Загрузка = Истина;
				ПеремещениеОбъект.ЗаказПокупателя = Выборка.ЗаказПокупателя;

				ПеремещениеОбъект.Записать();

				Если Выборка.ОрдерПроведен И НЕ Выборка.РасходныйОрдер.Пустая() Тогда

					ОрдерОбъект = Выборка.РасходныйОрдер.ПолучитьОбъект();
					ОрдерОбъект.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);
					ОрдерОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
					ОрдерОбъект.ДополнительныеСвойства.Вставить("НеПроверятьРегистрациюВОбменNavision", Истина);

					ОрдерОбъект.Записать(РежимЗаписиДокумента.Проведение);

				КонецЕсли;

				ЗафиксироватьТранзакцию();

			Исключение

				ТекстОшибки = ОписаниеОшибки();
				ОтменитьТранзакцию();

				ЖурналСобытий.Регистрация("ЗаказПокупателя.ПодчинённыеДокументы", УровеньЖурналаРегистрации.Ошибка
					, Метаданные.Документы.ЗаказПокупателя, ЗаказПокупателя
					,
					, ТекстОшибки, СокрЛП(ЗаказПокупателя), Истина);

			КонецПопытки;

		КонецЦикла;

		ПараметрыСеанса.ВыполняютсяСлужебныеДействия = Ложь;
		ПараметрыСеанса.ИсключительныйРежим = Ложь;

	КонецЕсли;

КонецПроцедуры

//	LNK 07.12.2017 10:59:50
Процедура ПровестиПодчиненныйРасходныйОрдер(ПеремещениеТоваров)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаОрдеров.Дата КАК Период,
	|	ТаблицаОрдеров.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК ТаблицаОрдеров
	|ГДЕ
	|	ТаблицаОрдеров.ДокументОснование = &ПеремещениеТоваров
	|	И ТаблицаОрдеров.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор"
	);
	Запрос.УстановитьПараметр("ПеремещениеТоваров", ПеремещениеТоваров);

	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		ПараметрыСеанса.ВыполняютсяСлужебныеДействия = Истина;
		ПараметрыСеанса.ИсключительныйРежим = Истина;

		Выборка = Результат.Выбрать();

		Пока Выборка.Следующий() Цикл

			Попытка

				ОрдерОбъект = Выборка.Регистратор.ПолучитьОбъект();
				ОрдерОбъект.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);
				ОрдерОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
				ОрдерОбъект.ДополнительныеСвойства.Вставить("НеПроверятьРегистрациюВОбменNavision", Истина);

				ОрдерОбъект.Записать(РежимЗаписиДокумента.Проведение);

			Исключение

				ТекстОшибки = ОписаниеОшибки();

				ЖурналСобытий.Регистрация("ЗаказПокупателя.ПодчинённыеДокументы", УровеньЖурналаРегистрации.Ошибка
					, Метаданные.Документы.ПеремещениеТоваров, ПеремещениеТоваров
					,
					, ТекстОшибки, СокрЛП(ПеремещениеТоваров), Истина);

			КонецПопытки;

		КонецЦикла;

		ПараметрыСеанса.ВыполняютсяСлужебныеДействия = Ложь;
		ПараметрыСеанса.ИсключительныйРежим = Ложь;

	КонецЕсли;

КонецПроцедуры

//	LNK 07.12.2017 10:33:57
Процедура ПроверитьПеремещенияПоЗаказамПокупателей()	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ПроверятьПеремещенияПоЗаказамВЦентре = ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику().ПроверятьПеремещенияПоЗаказамВЦентре;

	Если ПроверятьПеремещенияПоЗаказамВЦентре = Истина Тогда

		Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

			Возврат;

		КонецЕсли;

	Иначе

		Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

			Возврат;

		КонецЕсли;

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаВедущая.Дата КАК Период,
	|	ТаблицаВедущая.Ссылка КАК ПеремещениеТоваров,
	|	ТаблицаВедущая.НомерВнешнегоДокумента КАК НомерВнешнегоДокумента,
	|	ТаблицаВедущая.МагазинОтправитель КАК Магазин,
	|	ТаблицаОрдеры.Ссылка КАК РасходныйОрдер,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя,
	|	ИСТИНА КАК НачальноеЗаполнение
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ТаблицаВедущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК ТаблицаОрдеры
	|		ПО ТаблицаВедущая.Ссылка = ТаблицаОрдеры.ДокументОснование
	|			И (ТаблицаОрдеры.Проведен)
	|ГДЕ
	|	ТаблицаВедущая.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Период, ДЕНЬ), ДЕНЬ, -5) И ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&Период, ДЕНЬ), ДЕНЬ, 5)
	|	И НЕ ТаблицаВедущая.НомерВнешнегоДокумента = """"
	|	И ТаблицаВедущая.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И НЕ ТаблицаВедущая.МагазинОтправитель.СкладУправляющейСистемы
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаВедущая.Дата,
	|	ТаблицаВедущая.Ссылка,
	|	ТаблицаВедущая.НомерВнешнегоДокумента,
	|	ТаблицаВедущая.МагазинОтправитель,
	|	ТаблицаОрдеры.Ссылка,
	|	ТаблицаВедущая.ЗаказПокупателя,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ТаблицаВедущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК ТаблицаОрдеры
	|		ПО ТаблицаВедущая.Ссылка = ТаблицаОрдеры.ДокументОснование
	|			И (ТаблицаОрдеры.Проведен)
	|ГДЕ
	|	ТаблицаВедущая.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Период, ДЕНЬ), ДЕНЬ, -5) И ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&Период, ДЕНЬ), ДЕНЬ, 5)
	|	И НЕ ТаблицаВедущая.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И НЕ ТаблицаВедущая.МагазинОтправитель.СкладУправляющейСистемы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасходныйОрдер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Источник.РасходныйОрдер КАК РасходныйОрдер
	|ПОМЕСТИТЬ Списания
	|ИЗ
	|	Источник КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоЗаказамПокупателей КАК ТаблицаРегистра
	|		ПО Источник.РасходныйОрдер = ТаблицаРегистра.Регистратор
	|ГДЕ
	|	ТаблицаРегистра.Регистратор ЕСТЬ NULL
	|	И НЕ Источник.НачальноеЗаполнение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасходныйОрдер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.Период КАК Период,
	|	Источник.ПеремещениеТоваров КАК ПеремещениеТоваров,
	|	Источник.НомерВнешнегоДокумента КАК НомерВнешнегоДокумента,
	|	Источник.Магазин КАК Магазин,
	|	Источник.РасходныйОрдер КАК РасходныйОрдер,
	|	Источник.ЗаказПокупателя КАК ЗаказПокупателя,
	|	Источник.НачальноеЗаполнение КАК НачальноеЗаполнение
	|ПОМЕСТИТЬ Реестр
	|ИЗ
	|	Источник КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Списания КАК Списания
	|		ПО Источник.РасходныйОрдер = Списания.РасходныйОрдер
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Источник.НачальноеЗаполнение
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Списания.РасходныйОрдер ЕСТЬ НЕ NULL 
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерВнешнегоДокумента,
	|	Магазин,
	|	ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРеестра.Период КАК Период,
	|	ДанныеРеестра.ПеремещениеТоваров КАК ПеремещениеТоваров,
	|	ТаблицаЗаказыПокупателя.Ссылка КАК ЗаказПокупателя,
	|	ДанныеРеестра.РасходныйОрдер КАК РасходныйОрдер,
	|	ДанныеРеестра.НачальноеЗаполнение КАК НачальноеЗаполнение
	|ИЗ
	|	Реестр КАК ДанныеРеестра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ТаблицаЗаказыПокупателя
	|		ПО (ВЫБОР
	|				КОГДА ДанныеРеестра.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ТОГДА ДанныеРеестра.НомерВнешнегоДокумента = ТаблицаЗаказыПокупателя.Номер
	|							И ДанныеРеестра.Магазин = ТаблицаЗаказыПокупателя.Магазин
	|				ИНАЧЕ ДанныеРеестра.ЗаказПокупателя = ТаблицаЗаказыПокупателя.Ссылка
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	ПеремещениеТоваров
	|ИТОГИ
	|	МАКСИМУМ(ЗаказПокупателя),
	|	МАКСИМУМ(НачальноеЗаполнение)
	|ПО
	|	ПеремещениеТоваров"
	);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());

	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		ПараметрыСеанса.ВыполняютсяСлужебныеДействия = Истина;
		ПараметрыСеанса.ИсключительныйРежим = Истина;

		ПеремещенияВыборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ПеремещенияВыборка.Следующий() Цикл

			НачатьТранзакцию();

			Попытка

				Если ПеремещенияВыборка.НачальноеЗаполнение Тогда

					ПеремещениеОбъект = ПеремещенияВыборка.ПеремещениеТоваров.ПолучитьОбъект();
					ПеремещениеОбъект.ОбменДанными.Загрузка = Истина;
					ПеремещениеОбъект.ЗаказПокупателя = ПеремещенияВыборка.ЗаказПокупателя;

					ПеремещениеОбъект.Записать();

				КонецЕсли;

				ОрдерыВыборка = ПеремещенияВыборка.Выбрать();

				Пока ОрдерыВыборка.Следующий() Цикл

					ОрдерОбъект = ОрдерыВыборка.РасходныйОрдер.ПолучитьОбъект();
					ОрдерОбъект.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);
					ОрдерОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
					ОрдерОбъект.ДополнительныеСвойства.Вставить("НеПроверятьРегистрациюВОбменNavision", Истина);

					ОрдерОбъект.Записать(РежимЗаписиДокумента.Проведение);

				КонецЦикла;

				ЗафиксироватьТранзакцию();

			Исключение

				ТекстОшибки = ОписаниеОшибки();
				ОтменитьТранзакцию();
				ЖурналСобытий.Регистрация("ЗаказПокупателя.ПодчинённыеДокументы.Регламент", УровеньЖурналаРегистрации.Ошибка
					, Метаданные.Документы.ПеремещениеТоваров, ПеремещенияВыборка.ПеремещениеТоваров
					,
					, ТекстОшибки, СокрЛП(ПеремещенияВыборка.ПеремещениеТоваров), Истина);

			КонецПопытки;

		КонецЦикла;

		ПараметрыСеанса.ВыполняютсяСлужебныеДействия = Ложь;
		ПараметрыСеанса.ИсключительныйРежим = Ложь;

	КонецЕсли;

КонецПроцедуры




