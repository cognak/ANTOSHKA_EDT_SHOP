#Область ПреобразованиеСпособПримененияСкидки

Функция СпособПримененияСкидкиИдентификатор(СпособПримененияСкидки)	Экспорт

	Идентификатор = "";

	Если СпособПримененияСкидки = Перечисления.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок Тогда

		Идентификатор = "ApplyImmediately";

	ИначеЕсли СпособПримененияСкидки = Перечисления.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы Тогда

		Идентификатор = "AccrueBonusPoints";

	КонецЕсли;

	Возврат Идентификатор;

КонецФункции

Функция СпособПримененияСкидкиЗначение(Идентификатор)	Экспорт

	ЗначениеВозврата = Перечисления.СпособыПримененияСкидокНаценок.ПустаяСсылка();

	Если НРег(СокрЛП(Идентификатор)) = "applyimmediately" Тогда

		ЗначениеВозврата = Перечисления.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок;
	
	ИначеЕсли НРег(СокрЛП(Идентификатор)) = "accruebonuspoints" Тогда

		ЗначениеВозврата = Перечисления.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы;

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции

#КонецОбласти

#Область ПреобразованиеТипБонусов

Функция ТипБонусовИдентификатор(Знач ТипБонусов)	Экспорт

	Идентификатор = "";

	Если ТипЗнч(ТипБонусов) = Тип("СправочникСсылка.ПрограммыЛояльности") Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСправочник.ТипБонусов КАК ТипБонусов
		|ИЗ
		|	Справочник.ПрограммыЛояльности КАК ТаблицаСправочник
		|ГДЕ
		|	ТаблицаСправочник.Ссылка = &ПрограммаЛояльности"
		);
		Запрос.УстановитьПараметр("ПрограммаЛояльности", ТипБонусов);
		
		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда

			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ТипБонусов = Выборка.ТипБонусов;

		КонецЕсли;

	КонецЕсли;

	Если ТипБонусов = Перечисления.ТипыБонусов.Акционный Тогда

		Идентификатор = "Promotional";

	ИначеЕсли ТипБонусов = Перечисления.ТипыБонусов.Привлечение Тогда

		Идентификатор = "Attraction";

	ИначеЕсли ТипБонусов = Перечисления.ТипыБонусов.Органический Тогда

		Идентификатор = "Organic";

	КонецЕсли;

	Возврат Идентификатор;

КонецФункции

Функция ТипБонусовЗначение(Идентификатор)	Экспорт

	ЗначениеВозврата = Перечисления.ТипыБонусов.ПустаяСсылка();

	Если НРег(СокрЛП(Идентификатор)) = "promotional" Тогда

		ЗначениеВозврата = Перечисления.ТипыБонусов.Акционный;
	
	ИначеЕсли НРег(СокрЛП(Идентификатор)) = "attraction" Тогда

		ЗначениеВозврата = Перечисления.ТипыБонусов.Привлечение;
	
	ИначеЕсли НРег(СокрЛП(Идентификатор)) = "organic" Тогда

		ЗначениеВозврата = Перечисления.ТипыБонусов.Органический;

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции

#КонецОбласти

#Область ФункционалРегистрацииВУзел

Функция ОбменАктивен()	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Возврат НЕ ОбменMagentoСервер.ПолучитьМассивУзлов(Истина).Количество() = 0;

КонецФункции

//	LNK 21.04.2022 11:11:38
Функция ПолучитьМассивУзлов(Активный = Ложь)	Экспорт

	Возврат ОбменMagentoСервер.ПолучитьМассивУзлов(Активный);

КонецФункции

//	LNK 05.05.2022 07:25:48
Функция ПолучитьАктивныйУзел(ВернутьОбъект = Ложь)	Экспорт

	СписокУзлов = ОбменMagentoСервер.ПолучитьМассивУзлов(Истина);

	Если СписокУзлов.Количество() = 0 Тогда

		АктивныйУзел = Неопределено;

	Иначе

		Если ВернутьОбъект = Истина Тогда

				АктивныйУзел = СписокУзлов[0].ПолучитьОбъект();

		Иначе	АктивныйУзел = СписокУзлов[0];

		КонецЕсли;
	
	КонецЕсли;

	Возврат АктивныйУзел;

КонецФункции

#КонецОбласти











