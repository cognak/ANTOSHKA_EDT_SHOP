
Процедура ТабельПериодРегистрацииПриИзменении(Форма) Экспорт
	Объект = Форма.Объект;
	
	УчетРабочегоВремениРасширенныйКлиентСервер.ТабельУстановитьПериодДокумента(Форма);
	ОформитьПоляТаблицыДнейМесяца(Форма.Элементы, НачалоМесяца(Объект.ДатаНачалаПериода), "ДанныеОВремениВремя%1Представление");	
	
	ТабельУстановитьВидимостьКолонокДнейПериода(Форма);
	ОформитьПоляТаблицыДнейМесяца(Форма.Элементы, НачалоМесяца(Объект.ДатаНачалаПериода), "СостоянияСотрудниковДень%1");	
	//ТабельПоместитьОписаниеВидовВремениВДанныеФормы(Форма);
	ТабельУстановитьВидимостьКолонокОтутсвия(Форма);
	
КонецПроцедуры	

// Процедура заполняет заголовки полей таблицы "подневного" ввода данных,
// а также делает невидимыми колонки с 29 по 31 
// в зависимости от количества дней в выбранном месяце.
//
// Параметры:
//	ЭлементыФормы - коллекция элементов формы.
//	Месяц - дата, начало выбранного месяца.
//	ШаблонИмениПоля - строка, имя поля дня, в котором номер дня обозначен "%1".
//
Процедура ОформитьПоляТаблицыДнейМесяца(ЭлементыФормы, Месяц, ШаблонИмениПоля, ПереноситьПредставлениеДня = ложь) Экспорт
	
	ЦветРабочегоДня = ЦветаСтиля.ЦветТекстаФормы;
	ЦветВыходногоДня = ЦветаСтиля.ЦветОсобогоТекста;
	
	ПоследнийДеньМесяца = ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(Месяц);
	
	Для НомерДня = 1 По ПоследнийДеньМесяца Цикл
		
		ТекущийДень = Дата(Год(Месяц), Месяц(Месяц), НомерДня);
		
		ДеньНедели = ДеньНедели(ТекущийДень);
		
		Разделить = ?(ПереноситьПредставлениеДня, Символы.ПС, " ");
		
		Элемент = ЭлементыФормы[СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениПоля, НомерДня)];
		Элемент.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								"%1%2%3", НомерДня, Разделить, Формат(ТекущийДень, "ДФ=ддд"));
		Элемент.ЦветТекстаЗаголовка = ?(ДеньНедели = 6 Или ДеньНедели = 7, ЦветВыходногоДня, ЦветРабочегоДня);
		
	КонецЦикла;		
КонецПроцедуры	


Процедура ТабельУстановитьВидимостьКолонокОтутсвия(Форма)
	ПервыйДеньПериода = День(Форма.Объект.ДатаНачалаПериода);
	ПоследнийДеньПериода = День(Форма.Объект.ДатаОкончанияПериода);
	
	Для НомерДня = 1 По ПервыйДеньПериода - 1 Цикл
		Форма.Элементы["СостоянияСотрудниковДень" + НомерДня].Видимость = Ложь;		
	КонецЦикла;	
	
	Для НомерДня = ПервыйДеньПериода По ПоследнийДеньПериода Цикл
		Форма.Элементы["СостоянияСотрудниковДень" + НомерДня].Видимость = Истина;		
	КонецЦикла;	
	
	Для НомерДня = ПоследнийДеньПериода + 1 По 31 Цикл
		Форма.Элементы["СостоянияСотрудниковДень" + НомерДня].Видимость = Ложь;		
	КонецЦикла;		
КонецПроцедуры	


Процедура ТабельУстановитьВидимостьКолонокДнейПериода(Форма)
	ПервыйДеньПериода = День(Форма.Объект.ДатаНачалаПериода);
	ПоследнийДеньПериода = День(Форма.Объект.ДатаОкончанияПериода);
	
	Для НомерДня = 1 По ПервыйДеньПериода - 1 Цикл
		Форма.Элементы["ДанныеОВремениВремя" + НомерДня + "Представление"].Видимость = Ложь;		
	КонецЦикла;	
	
	Для НомерДня = ПервыйДеньПериода По ПоследнийДеньПериода Цикл
		Форма.Элементы["ДанныеОВремениВремя" + НомерДня + "Представление"].Видимость = Истина;		
	КонецЦикла;	
	
	Для НомерДня = ПоследнийДеньПериода + 1 По 31 Цикл
		Форма.Элементы["ДанныеОВремениВремя" + НомерДня + "Представление"].Видимость = Ложь;		
	КонецЦикла;		
КонецПроцедуры	


Процедура ТабельОбновитьДанныеПоСотрудникам(Форма) Экспорт
	Объект = Форма.Объект;
	
	ТаблицаСотрудников = ТабельПустаяТаблицаСотрудников();
	
	СтрокиПоСотрудникам = Новый Соответствие;
	
	СотрудникиДокумента = Новый Массив;
	
	Для Каждого СтрокаДанныхОВремени Из Объект.ДанныеОВремени Цикл
		Если СтрокаДанныхОВремени.ЭтоПерваяСтрокаПоСотруднику Тогда 
			МассивСтрокПоСотруднику = УчетРабочегоВремениРасширенныйКлиентСервер.ТабельСтрокиПоСотруднику(Объект.ДанныеОВремени, СтрокаДанныхОВремени.НомерСтрокиСотрудник);
	
			ТабельОчиститьСтрокиСотрудника(МассивСтрокПоСотруднику);
						
			СтрокиПоСотрудникам.Вставить(СтрокаДанныхОВремени.Сотрудник, МассивСтрокПоСотруднику);			
		КонецЕсли;	
	КонецЦикла;	
	
	//ТабельЗаполнитьДанныеПоСотрудникам(Форма, СотрудникиДокумента, СтрокиПоСотрудникам, 2);  Бакан потом проверить
	
КонецПроцедуры	


Функция ТабельПустаяТаблицаСотрудников()
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ПериодРегистрации", Новый ОписаниеТипов("Дата"));
	
	Возврат ТаблицаСотрудников;
КонецФункции	


Процедура ТабельОчиститьСтрокиСотрудника(СтрокиПоСотруднику)
	Для Каждого СтрокаДанныхОВремени Из СтрокиПоСотруднику Цикл
		СтрокаДанныхОВремени.ВремяИтог = "";
		Для НомерДня = 1 По 31 Цикл
			СтрокаДанныхОВремени["Часов" + НомерДня] = 0;      
			СтрокаДанныхОВремени["ВидВремени" + НомерДня] = Справочники.ВидыИспользованияРабочегоВремени.ПустаяСсылка();
			СтрокаДанныхОВремени["Время" + НомерДня + "Представление"] = "";
			СтрокаДанныхОВремени["ЧасовНорма" + НомерДня] = 0;
		КонецЦикла;	
	КонецЦикла;		
КонецПроцедуры	


Процедура ТабельЗаполнитьДанныеПоСотрудникам(Форма, СписокСотрудников = Неопределено, СтрокиПоСотрудникам = Неопределено, ВысотаСтроки = 2, ЗаполнятьТерриторииИУсловия = Ложь)
	//КодыВидовВремени = УчетРабочегоВремениРасширенный.КодыВидовВремени(Форма.Объект.ПериодРегистрации);    // Бакан потом проверить
	//
	//МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Форма.Объект.Ссылка);
	//
	//ВыборкаДанныхОВремени = МенеджерОбъекта.ВыборкаДанныхОВремени(Форма.Объект, СписокСотрудников);
	//
	//ТекущийСотрудник = Неопределено;
	//ДанныеОВремениПоСотруднику = Новый Массив;
	//НомерСтрокиСотрудник = 1;
	//
	//ДанныеОВремениПоСотруднику = Новый ТаблицаЗначений;
	//ДанныеОВремениПоСотруднику.Колонки.Добавить("Сотрудник");
	//ДанныеОВремениПоСотруднику.Колонки.Добавить("ВидУчетаВремени");
	//ДанныеОВремениПоСотруднику.Колонки.Добавить("Дата");
	//ДанныеОВремениПоСотруднику.Колонки.Добавить("Дни");
	//ДанныеОВремениПоСотруднику.Колонки.Добавить("Часы");
	//ДанныеОВремениПоСотруднику.Колонки.Добавить("НормаЧасов"); 
	//
	//Если ЗаполнятьТерриторииИУсловия Тогда
	//	ДанныеОВремениПоСотруднику.Колонки.Добавить("Территория");
	//	ДанныеОВремениПоСотруднику.Колонки.Добавить("УсловияТруда"); 
	//КонецЕсли;	
	//
	//Пока ВыборкаДанныхОВремени.СледующийПоЗначениюПоля("Сотрудник") Цикл
	//	ДанныеОВремениПоСотруднику.Очистить();
	//	Пока ВыборкаДанныхОВремени.Следующий() Цикл
	//		СтрокаТаблицыДанныхОВремени = ДанныеОВремениПоСотруднику.Добавить();
	//		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДанныхОВремени, ВыборкаДанныхОВремени)
	//	КонецЦикла;	
	//	
	//	Если СтрокиПоСотрудникам = Неопределено Тогда
	//		МассивСтрокПоСотруднику = ТабельНоваяСтрокаДанныхОВремени(Форма.Объект.ДанныеОВремени, ВыборкаДанныхОВремени.Сотрудник, НомерСтрокиСотрудник, Форма.ВысотаСтроки);
	//	Иначе					
	//		МассивСтрокПоСотруднику = СтрокиПоСотрудникам[ВыборкаДанныхОВремени.Сотрудник];
	//	КонецЕсли;	
	//	
	//	ТабельЗаполнитьСтрокиПоСотруднику(
	//		Форма, 
	//		ДанныеОВремениПоСотруднику, 
	//		МассивСтрокПоСотруднику, 
	//		КодыВидовВремени, 
	//		ВысотаСтроки,
	//		ЗаполнятьТерриторииИУсловия);
	//		
	//	НомерСтрокиСотрудник = НомерСтрокиСотрудник + 1;	
	//КонецЦикла;	
	//	
	//ТабельУстановитьВысотуСтрокПоСотрудникам(Форма, ВысотаСтроки);
	//
	//ТабельЗаполнитьИтогиПоСотрудникамДокумента(Форма);
КонецПроцедуры	


Процедура ТабельПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт 
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
			
		Если Не ЗначениеЗаполнено(Форма.Объект.ДатаНачалаПериода)
			И Не ЗначениеЗаполнено(Форма.Объект.ДатаОкончанияПериода) Тогда
			УчетРабочегоВремениРасширенныйКлиентСервер.ТабельУстановитьПериодДокумента(Форма);
		КонецЕсли;
		
		ТабельПриЧтенииДанных(Форма);
	КонецЕсли;
	
	//БуквенныйКодИмяРеквизита = УчетРабочегоВремениРасширенный.БуквенныйКодИмяРеквизита(Форма.Объект.ПериодРегистрации);
	//ВидВремениЯвка = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка");
	//Форма.ОбозначениеВидаВремениПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидВремениЯвка, БуквенныйКодИмяРеквизита);
	
КонецПроцедуры


Процедура ТабельУчетаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт 
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
			
		Если Не ЗначениеЗаполнено(Форма.Объект.ДатаНачалаПериода)
			И Не ЗначениеЗаполнено(Форма.Объект.ДатаОкончанияПериода) Тогда
			УчетРабочегоВремениРасширенныйКлиентСервер.ТабельУстановитьПериодДокумента(Форма);
		КонецЕсли;
		
		ТабельУчетаПриЧтенииДанных(Форма);
	КонецЕсли;
	
	//БуквенныйКодИмяРеквизита = УчетРабочегоВремениРасширенный.БуквенныйКодИмяРеквизита(Форма.Объект.ПериодРегистрации);
	//ВидВремениЯвка = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка");
	//Форма.ОбозначениеВидаВремениПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидВремениЯвка, БуквенныйКодИмяРеквизита);
	
КонецПроцедуры


Процедура ТабельПриЧтенииДанных(Форма)
	
	//Если ТипЗнч(Форма.ОписаниеВидовВремени) <> Тип("ФиксированноеСоответствие") Тогда
	//	ТабельПоместитьОписаниеВидовВремениВДанныеФормы(форма);
	//КонецЕсли;
	
	//ИсправлениеДокументовЗарплатаКадры.ГруппаИсправлениеДополнитьФорму(Форма);
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(Форма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой");

	ТабельУстановитьВидимостьКолонокДнейПериода(Форма);
	
	ТабельДанныеВРеквизит(Форма);
	
	
	УчетРабочегоВремениРасширенныйКлиентСервер.ТабельУстановитьДоступностьЭлементовПериодаВводаДанных(Форма);
	
	ОформитьПоляТаблицыДнейМесяца(Форма.Элементы, НачалоМесяца(Форма.Объект.ДатаНачалаПериода), "ДанныеОВремениВремя%1Представление");
	
КонецПроцедуры


Процедура ТабельУчетаПриЧтенииДанных(Форма)
	
	//Если ТипЗнч(Форма.ОписаниеВидовВремени) <> Тип("ФиксированноеСоответствие") Тогда
	//	ТабельПоместитьОписаниеВидовВремениВДанныеФормы(форма);
	//КонецЕсли;
	
	//ИсправлениеДокументовЗарплатаКадры.ГруппаИсправлениеДополнитьФорму(Форма);
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(Форма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой");

	ТабельУчетаУстановитьВидимостьКолонокДнейПериода(Форма);
	
	ТабельДанныеВРеквизит(Форма);
	
	
	УчетРабочегоВремениРасширенныйКлиентСервер.ТабельУстановитьДоступностьЭлементовПериодаВводаДанных(Форма);
	
	ОформитьПоляТаблицыДнейМесяца(Форма.Элементы, НачалоМесяца(Форма.Объект.ДатаНачалаПериода), "ДанныеОВремениВремя%1Представление");
	
КонецПроцедуры


Процедура ТабельДанныеВРеквизит(Форма)
	
	
	
	
	
	
	
КонецПроцедуры

// Заполняет реквизит представлением месяца, хранящегося в другом реквизите.
//
// Параметры:
//		РедактируемыйОбъект
//		ПутьРеквизита - Строка, путь к реквизиту, содержащего дату.
//		ПутьРеквизитаПредставления - Строка, путь к реквизиту в который помещается представление месяца.
//
Процедура ЗаполнитьМесяцПоДате(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления) Экспорт
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
	
КонецПроцедуры


// Возвращает представление месяца по переданной дате.
//
// Параметры:
//		ДатаНачалаМесяца
//
// Возвращаемое значение;
//		Строка
//
Функция ПолучитьПредставлениеМесяца(ДатаНачалаМесяца) Экспорт
	
	Возврат Формат(ДатаНачалаМесяца, "ДФ='ММММ гггг'");
	
КонецФункции

Процедура ТабельПериодВводаДанныхОВремениПриИзменении(Форма) Экспорт
	УчетРабочегоВремениРасширенныйКлиентСервер.ТабельУстановитьПериодДокумента(Форма);
	УчетРабочегоВремениРасширенныйКлиентСервер.ТабельУстановитьДоступностьЭлементовПериодаВводаДанных(Форма);
	ТабельПериодРегистрацииПриИзменении(Форма);	
	
	
КонецПроцедуры	



Процедура ТабельУчетаПериодРегистрацииПриИзменении(Форма) Экспорт
	Объект = Форма.Объект;
	
	УчетРабочегоВремениРасширенныйКлиентСервер.ТабельУстановитьПериодДокумента(Форма);
	ОформитьПоляТаблицыДнейМесяца(Форма.Элементы, НачалоМесяца(Объект.ДатаНачалаПериода), "ДанныеОВремениВремя%1Представление");	
	ТабельУчетаУстановитьВидимостьКолонокДнейПериода(Форма);
	
КонецПроцедуры	


Процедура ТабельУчетаУстановитьВидимостьКолонокДнейПериода(Форма)
	ПервыйДеньПериода = День(Форма.Объект.ДатаНачалаПериода);
	ПоследнийДеньПериода = День(Форма.Объект.ДатаОкончанияПериода);
	
	Для НомерДня = 1 По ПервыйДеньПериода - 1 Цикл
		Форма.Элементы["ДанныеОВремениГруппа" + НомерДня].Видимость = Ложь;		
	КонецЦикла;	
	
	Для НомерДня = ПервыйДеньПериода По ПоследнийДеньПериода Цикл
		Форма.Элементы["ДанныеОВремениГруппа" + НомерДня].Видимость = Истина;		
	КонецЦикла;	
	
	Для НомерДня = ПоследнийДеньПериода + 1 По 31 Цикл
		Форма.Элементы["ДанныеОВремениГруппа" + НомерДня].Видимость = Ложь;		
	КонецЦикла;		
КонецПроцедуры	


//// Процедура заполняет заголовки полей таблицы "подневного" ввода данных,
//// а также делает невидимыми колонки с 29 по 31 
//// в зависимости от количества дней в выбранном месяце.
////
//// Параметры:
////	ЭлементыФормы - коллекция элементов формы.
////	Месяц - дата, начало выбранного месяца.
////	ШаблонИмениПоля - строка, имя поля дня, в котором номер дня обозначен "%1".
////
//Процедура ОформитьПоляТаблицыДнейМесяца(ЭлементыФормы, Месяц, ШаблонИмениПоля, ПереноситьПредставлениеДня = Истина) Экспорт
//	
//	ЦветРабочегоДня = ЦветаСтиля.ЦветТекстаФормы;
//	ЦветВыходногоДня = ЦветаСтиля.ЦветОсобогоТекста;
//	
//	ПоследнийДеньМесяца = ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(Месяц);
//	
//	Для НомерДня = 1 По ПоследнийДеньМесяца Цикл
//		
//		ТекущийДень = Дата(Год(Месяц), Месяц(Месяц), НомерДня);
//		
//		ДеньНедели = ДеньНедели(ТекущийДень);
//		
//		Разделить = ?(ПереноситьПредставлениеДня, Символы.ПС, " ");
//		
//		Элемент = ЭлементыФормы[СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениПоля, НомерДня)];
//		Элемент.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//								"%1%2%3", НомерДня, Разделить, Формат(ТекущийДень, "ДФ=ддд"));
//		Элемент.ЦветТекстаЗаголовка = ?(ДеньНедели = 6 Или ДеньНедели = 7, ЦветВыходногоДня, ЦветРабочегоДня);
//		
//	КонецЦикла;		
//КонецПроцедуры	
