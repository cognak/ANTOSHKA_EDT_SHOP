                                            
///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция осуществляет подключение устройства.
//
// Параметры:
//  ОбъектДрайвера   - <*>
//           - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;
	ВыходныеПараметры = Новый Массив();
	ПараметрыПодключения.Вставить("ИДУстройства", Неопределено);

	Попытка   
		ОбъектДрайвера = Новый("AddIn.SD849.TcpClient");
		ОбъектДрайвера.Open(Параметры.АдресУстройства,Параметры.ПортУстройства);
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОписаниеОшибки());
	КонецПопытки;
	
	ПараметрыПодключения.Вставить("КодОригинальнойТранзакции", Неопределено);
	ПараметрыПодключения.Вставить("ТипТранзакции", "");

	Возврат Результат;

КонецФункции

// Функция осуществляет отключение устройства.
//
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;

	ВыходныеПараметры = Новый Массив();

	Попытка   
		ОбъектДрайвера.Close();
		ОбъектДрайвера = Неопределено;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОписаниеОшибки());
	КонецПопытки;
	
	
	
	Возврат Результат;

КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
	
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ ВСЕХ ТИПОВ ДРАЙВЕРОВ
	
	// Тестирование устройства
	Если Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" ИЛИ Команда = "GetVersion" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение описание драйвера
	ИначеЕсли Команда = "ПолучитьОписаниеДрайвера" ИЛИ Команда = "GetDescription" Тогда
		Результат = ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ЭКВАЙРИНГОВЫМИ ТЕРМИНАЛАМИ
	
	// Функция возвращает, будет ли печать слип-чеков на терминале
	ИначеЕсли Команда = "PrintSlipOnTerminal" ИЛИ Команда = "ПечатьКвитанцийНаТерминале" Тогда
		Результат = ПечатьКвитанцийНаТерминале(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Оплата платежной картой
	ИначеЕсли Команда = "AuthorizeSales" ИЛИ Команда = "ОплатитьПлатежнойКартой" Тогда
		Сумма      = ВходныеПараметры[0];
		НомерКарты = ВходныеПараметры[1];
		Если ВходныеПараметры.Количество() > 2 Тогда
			НомерЧека  = ВходныеПараметры[2];
		Иначе
			НомерЧека  = "";
		КонецЕсли;
		Результат = ОплатитьПлатежнойКартой(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                            НомерКарты, Сумма, НомерЧека, ВыходныеПараметры);
	// Возврат платежа
	ИначеЕсли Команда = "AuthorizeRefund" Тогда
		Сумма          = ВходныеПараметры[0];
		НомерКарты     = ВходныеПараметры[1];
		СсылочныйНомер = ВходныеПараметры[2];
		НомерЧека      = ВходныеПараметры[3];
		Результат = ВернутьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                          Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	// Отмена платежа
	ИначеЕсли Команда = "AuthorizeVoid" Тогда
		Сумма          = ВходныеПараметры[0];
		СсылочныйНомер = ВходныеПараметры[1];
		НомерЧека      = ВходныеПараметры[2];
		Результат = ОтменитьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                           Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	//// Сверка итогов по картам
	//ИначеЕсли Команда = "Settlement" ИЛИ Команда = "ИтогиДняПоКартам" Тогда
	//	Результат = ИтогиДняПоКартам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	//	
	//// Аварийная отмена платежа
	//ИначеЕсли Команда = "EmergencyVoid" ИЛИ Команда = "АварийнаяОтменаОперации" Тогда
	//	Сумма          = ВходныеПараметры[0];
	//	СсылочныйНомер = ВходныеПараметры[1];
	//	НомерЧека      = ВходныеПараметры[2];
	//	Результат = АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
	//	                                    Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	//	
	//// Преавторизация платежа
	//ИначеЕсли Команда = "AuthorizePreSales" ИЛИ Команда = "ПреавторизацияПоПлатежнойКарте" Тогда
	//	Сумма      = ВходныеПараметры[0];
	//	НомерКарты = ВходныеПараметры[1];
	//	Результат = ПреавторизоватьПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
	//												Сумма, НомерКарты, ВыходныеПараметры);
	//	
	//// Отмена преавторизации платежа
	//ИначеЕсли Команда = "AuthorizeVoidPreSales" ИЛИ Команда = "ОтменитьПреавторизациюПоПлатежнойКарте" Тогда
	//	Сумма          = ВходныеПараметры[0];
	//	НомерКарты     = ВходныеПараметры[1];
	//	СсылочныйНомер = ВходныеПараметры[2];
	//	НомерЧека      = ВходныеПараметры[3];
	//	Результат = ОтменитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
	//	                                                   Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	//												
	//// Завершение преавторизации платежа
	//ИначеЕсли Команда = "AuthorizeCompletion" Тогда
	//	Сумма          = ВходныеПараметры[0];
	//	НомерКарты     = ВходныеПараметры[1];
	//	СсылочныйНомер = ВходныеПараметры[2];
	//	НомерЧека      = ВходныеПараметры[3];
	//	Результат = ЗавершитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
	//														Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
		
	Иначе
		
	//	Указанная команда не поддерживается данным драйвером
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(СтрЗаменить(
				"Команда «%Команда%» не підтримується інстальованим драйвером."
				, "%Команда%"
				, Команда
			)
		);

		Результат = Ложь;

	КонецЕсли;
	
	Возврат Результат;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции общие для работы с эквайринговыми терминалами

// Функция возвращает, будет ли печать слип-чеков на терминале
//
Функция ПечатьКвитанцийНаТерминале(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ПечатьКвитанцийНаТерминале();
		ВыходныеПараметры.Очистить();  
		ВыходныеПараметры.Добавить(Ответ);
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПечатьКвитанцийНаТерминале>:'") + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет сверку итогов по картам.
//
Функция ИтогиДняПоКартам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;
	Ответ     = Ложь;
	СлипЧек   = "";

	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Сверка итогов'");

	Попытка
		Ответ = ОбъектДрайвера.ИтогиДняПоКартам(ПараметрыПодключения.ИДУстройства, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		Иначе
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ИтогиДняПоКартам>:'") + ОписаниеОшибки());
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет авторизацию/оплату по карте.
//
Функция ОплатитьПлатежнойКартой(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                НомерКарты, Сумма, НомерЧека, ВыходныеПараметры)

	Результат      = Истина;
	КодRRN         = Неопределено;
	КодАвторизации = Неопределено;
	СлипЧек        = "";
	// + HVOYA 04.10.2016 12:17:51, Латышев А.А.
	ДействительнаДо = Неопределено;
	Клиент = Неопределено; 
	Эмитент = Неопределено;
	// - HVOYA 04.10.2016 12:17:51, Латышев А.А. 
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Оплатить'");
	
	Если НЕ (Сумма > 0) Тогда
		Результат = Ложь;
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.'"));
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		//// + HVOYA 30.09.2016 16:07:45, Латышев А.А.
		////Ответ = ОбъектДрайвера.Подключить(ПараметрыПодключения.ИДУстройства);
		//Если ОбъектДрайвера = "РайфайзенБанк" Тогда
		//	Ответ = ПродажаРайфайзен(Сумма, НомерКарты, НомерЧека, КодRRN, КодАвторизации, ДействительнаДо, Клиент, Эмитент, СлипЧек, Параметры.P_PortNumber);
		//ИначеЕсли ТипЗнч(ОбъектДрайвера) = ТИП("AddIn.IngenicoECR.a_ingenicopb1c82") Тогда
		//	Ответ = Продажа(Сумма, НомерКарты, НомерЧека, КодRRN, КодАвторизации, ДействительнаДо, Клиент, Эмитент, СлипЧек, Параметры.P_PortNumber);
		//ИначеЕсли ТипЗнч(ОбъектДрайвера) = ТИП("AddIn.SD849.TcpClient") Тогда
		//	ПараметрыОплаты = Новый Структура;
		//	ПараметрыОплаты.Вставить("ОбъектДрайвера",ОбъектДрайвера);
		//	ПараметрыОплаты.Вставить("ПараметрыДрайвера",Параметры);
		//	ПараметрыОплаты.Вставить("Сумма",Сумма);
		//	СтруктураОтвета = ПродажаДЖСОН(ПараметрыОплаты);
		//	Ответ = СтруктураОтвета.Успешно;
		//Иначе
		//	Ответ = ОбъектДрайвера.ОплатитьПлатежнойКартой(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
		//	НомерЧека, КодRRN, КодАвторизации, СлипЧек); 
		//КонецЕсли; 
		//// - HVOYA 30.09.2016 16:07:45, Латышев А.А. 
		
		//2024-10-18 sa Вызываем оплату;
		ПараметрыПлатежа = Новый Структура;
		ПараметрыПлатежа.Вставить("Сумма",Сумма);
		ПараметрыПлатежа.Вставить("ПараметрыДрайвера",Параметры);
		Ответ = ПродажаДЖСОН(ПараметрыПлатежа);
		
		Если Ответ.Успешно Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Ответ.НомерКарты);
			ВыходныеПараметры.Добавить(Ответ.КодRRN);
			ВыходныеПараметры.Добавить(Ответ.НомерЧека);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[3].Добавить("СлипЧек");
			ВыходныеПараметры[3].Добавить(Ответ.СлипЧек);
			// + HVOYA 04.10.2016 12:27:03, Латышев А.А.
			ВыходныеПараметры.Добавить(Ответ.КодАвторизации);
			ВыходныеПараметры.Добавить(Ответ.ДействительнаДо);
			ВыходныеПараметры.Добавить(Ответ.Клиент);
			ВыходныеПараметры.Добавить(Ответ.Эмитент);
			// - HVOYA 04.10.2016 12:27:03, Латышев А.А. 
			ВыходныеПараметры.Добавить(Ответ.МерчантИД);
			ВыходныеПараметры.Добавить(Ответ.ТерминалИД);
		Иначе
			Результат = Ложь;
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(Ответ.ОписаниеОшибки);
			//ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОплатитьПлатежнойКартой>:'") + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет возврат платежа по карте.
//
Функция ВернутьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                      Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры)
	  
	Результат      = Истина;
	КодRRN         = СсылочныйНомер;
	КодАвторизации = Неопределено;
	СлипЧек        = "";
	НомерКарты     = "";

	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Вернуть платеж'");
	
	Если НЕ (Сумма > 0) Тогда
		Результат = Ложь;
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.'"));
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Ответ = ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, КодRRN, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерКарты);
			ВыходныеПараметры.Добавить(КодRRN);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[3].Добавить("СлипЧек");
			ВыходныеПараметры[3].Добавить(СлипЧек);
		Иначе
			Результат = Ложь;
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте>:'") + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отмену платежа по карте.
//
Функция ОтменитьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                      Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры)
	  
	Результат      = Истина;
	КодRRN         = СсылочныйНомер;
	КодАвторизации = Неопределено;
	СлипЧек        = "";
	НомерКарты     = "";

	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отменить платеж'");
	
	Если НЕ (Сумма > 0) Тогда
		Результат = Ложь;
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.'"));
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		// + HVOYA 24.10.2016 20:45:47, Латышев А.А.
		//Если ОбъектДрайвера = "РайфайзенБанк" Тогда
		//	Ответ = ВозвратПоРайффайзен(Сумма, 0, Параметры.P_MerchantNum, КодRRN,  Параметры.P_PortNumber);
		//ИначеЕсли ТипЗнч(ОбъектДрайвера) = ТИП("AddIn.IngenicoECR.a_ingenicopb1c82") Тогда
		//	Ответ = ВозвратПопривату(Сумма, 0, Параметры.P_MerchantNum, КодRRN,  Параметры.P_PortNumber);
		//Иначе
		//	Ответ = ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
		//												НомерЧека, КодRRN, КодАвторизации, СлипЧек);
		//КонецЕсли; 
		// - HVOYA 24.10.2016 20:45:47, Латышев А.А. 
		
		//2024-10-18 sa Вызываем возврат;
		ПараметрыПлатежа = Новый Структура;
		ПараметрыПлатежа.Вставить("Сумма",Сумма);
		ПараметрыПлатежа.Вставить("ПараметрыДрайвера",Параметры);
		ПараметрыПлатежа.Вставить("НомерТранзакции", СсылочныйНомер);
		ПараметрыПлатежа.Вставить("НомерЧека", НомерЧека);
		
		Ответ = ВозвратДЖСОН(ПараметрыПлатежа);
		
		Если Ответ.Успешно Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(Ответ.СлипЧек);
		Иначе
			Результат = Ложь;
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(Ответ.ОписаниеОшибки);
			//ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте>:'") + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет аварийную отмену операции по карте.
//
Функция АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры)

	Ответ = Ложь;
	Результат = Истина;

	Попытка
		Ответ = ОбъектДрайвера.АварийнаяОтменаОперации(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.АварийнаяОтменаОперации>:'") + ОписаниеОшибки());
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет преавторизацию по карте.
// 
Функция ПреавторизоватьПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                        Сумма, НомерКарты, ВыходныеПараметры)
	Результат      = Истина;
	КодRRN         = Неопределено;
	КодАвторизации = Неопределено;
	НомерЧека      = Неопределено;
	СлипЧек        = "";
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Преавторизовать платеж'");
	
	Если НЕ (Сумма > 0) Тогда
		Результат = Ложь;
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.'"));
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Ответ = ОбъектДрайвера.ПреавторизацияПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, КодRRN, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерКарты);
			ВыходныеПараметры.Добавить(КодRRN);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[3].Добавить("СлипЧек");
			ВыходныеПараметры[3].Добавить(СлипЧек);
		Иначе
			Результат = Ложь;
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПреавторизацияПоПлатежнойКарте>:'") + ОписаниеОшибки());
	 КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отмену преавторизации по карте.
//
Функция ОтменитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                               Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры)
	Результат      = Истина;
	КодАвторизации = Неопределено;
	СлипЧек        = "";
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отменить преавторизацию'");
	
	Попытка
		Ответ = ОбъектДрайвера.ОтменитьПреавторизациюПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, СсылочныйНомер, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		Иначе
			Результат = Ложь; 
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОтменитьПреавторизациюПоПлатежнойКарте>:'") + ОписаниеОшибки());
	 КонецПопытки;
	 
	 Возврат Результат;
	 
 КонецФункции

// Функция осуществляет завершение преавторизации по карте.
//
Функция ЗавершитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                                Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры)
	Результат = Истина;
	
	Результат      = Истина;
	КодАвторизации = Неопределено;
	СлипЧек        = "";
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Завершить преавторизацию'");
	
	Попытка
		Ответ = ОбъектДрайвера.ЗавершитьПреавторизациюПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, СсылочныйНомер, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		Иначе
			Результат = Ложь; 
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗавершитьПреавторизациюПоПлатежнойКарте>:'") + ОписаниеОшибки());
	 КонецПопытки;
	 
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции общие для работы с терминалами сбора данными

// Функция осуществляет выгрузку данных в терминал сбора данных.
//
Функция ВыгрузитьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаВыгрузки, ВыходныеПараметры)

	Результат = Истина;

	Если ТаблицаВыгрузки.Количество() = 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для выгрузки.'"));
		Возврат Ложь;
	КонецЕсли;
	
	РазмерПакета     = 100;
	ТекущийПакет     = 1;
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = ТаблицаВыгрузки.Количество();
	СтатусПакета     = "first";
	
	ТекущийПроцент = 0;
	Состояние(НСтр("ru='Инициализация выгрузки...'"), Окр(ТекущийПроцент));
	ПроцентИнкремент = 100 / (ЗаписейВсего / РазмерПакета);
	
	МассивТоваров = Новый Массив;



	Для Каждого Позиция Из ТаблицаВыгрузки  Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		
		СтрокаМассиваТСД = Новый СписокЗначений; 
		СтрокаМассиваТСД.Добавить(Позиция[0].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[1].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[2].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[3].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[4].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[5].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[6].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[7].Значение);
		МассивТоваров.Добавить(СтрокаМассиваТСД);
		
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  

			
			ДанныеДляВыгрузки = МенеджерОборудованияСервер.СформироватьТаблицуТоваров(МассивТоваров);
			
			Если (ЗаписейВыгружено = ЗаписейВсего) Тогда
				СтатусПакета = "last";
			ИначеЕсли (ТекущийПакет > 1) Тогда
				СтатусПакета = "regular";
			КонецЕсли;
			
			Ответ = ОбъектДрайвера.ВыгрузитьТаблицу(ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
			Если НЕ Ответ Тогда
				Результат = Ложь;
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить("");
				ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
				Возврат Результат;
			КонецЕсли;
			
			ЗаписьВПакете = 0;
			ТекущийПакет = ТекущийПакет + 1;
			
			ТекущийПроцент = ТекущийПроцент + ПроцентИнкремент;
			Состояние(НСтр("ru='Выгрузка данных...'"), Окр(ТекущийПроцент));
			 
		 КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет загрузку таблицы из терминала сбора данных.
//
Функция ЗагрузитьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;
	ДанныеЗагрузки = "";
	Состояние(НСтр("ru='Загрузка данных...'"));
	
	Попытка
		
		Ответ = ОбъектДрайвера.ЗагрузитьТаблицу(ПараметрыПодключения.ИДУстройства, ДанныеЗагрузки);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;      
		
		Если НЕ ПустаяСтрока(ДанныеЗагрузки) Тогда
			МассивДанных = МенеджерОборудованияСервер.ПолучитьТаблицуТоваров(ДанныеЗагрузки);
		КонецЕсли;
	
		Если ПустаяСтрока(ДанныеЗагрузки) Или (МассивДанных.Количество() = 0) Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для загрузки.'"));
		Иначе
			ВыходныеПараметры.Добавить(МассивДанных);
		КонецЕсли;   
		
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗагрузитьТаблицу>:'") + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Очищает загруженную ранее таблицу товаров в ТСД
//
Функция ОчиститьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Состояние(НСтр("ru='Выполнение операции...'"));	
	
	Попытка
		Ответ = ОбъектДрайвера.ОчиститьТаблицу(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОчиститьТаблицу>:'") + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции общие для работы с дисплеями покупателя

// Функция осуществляет вывод списка строк на дисплей покупателя.
//
Функция ВывестиСтрокуНаДисплейПокупателя(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры)
	
	Результат = Истина;
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(СтрПолучитьСтроку(СтрокаТекста, 1));
	МассивСтрок.Добавить(СтрПолучитьСтроку(СтрокаТекста, 2));
	
	Попытка
		Ответ = ОбъектДрайвера.ВывестиСтрокуНаДисплейПокупателя(ПараметрыПодключения.ИДУстройства, МассивСтрок);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВывестиСтрокуНаДисплейПокупателя>:'") + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет очистку дисплея покупателя.
//
Функция ОчиститьДисплейПокупателя(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ОчиститьДисплейПокупателя(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОчиститьДисплейПокупателя>:'") + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает параметры вывода на дисплей покупателя)
//
Функция ПолучитьПараметрыВывода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	СтолбцовНаДисплее = 20; 
	СтрокНаДисплее    = 2;
	
	Попытка
		Ответ = ОбъектДрайвера.ПолучитьПараметрыВывода(ПараметрыПодключения.ИДУстройства, СтолбцовНаДисплее, СтрокНаДисплее);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
			ВыходныеПараметры.Добавить(СтолбцовНаДисплее);
			ВыходныеПараметры.Добавить(СтрокНаДисплее);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьПараметрыВывода>:'") + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции общие для работы с электронными весами

// Функция осуществляет получение веса груза, расположенного на весах
//
Функция ПолучитьВес(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	Вес = 0;
	
	Попытка
		Ответ = ОбъектДрайвера.ПолучитьВес(ПараметрыПодключения.ИДУстройства, Вес);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
			ВыходныеПараметры.Добавить(Вес);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьВес>:'") + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет установку веса тары на весах
//
Функция Тарировать(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры, ВесТары = 0)
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.УстановитьВесТары(ПараметрыПодключения.ИДУстройства, ВесТары);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.Тарировать>:'") + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////
// Процедуры и функции общие для всех типов драйверов

// Функция осуществляет тестирование устройства.
//
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат            = Истина;
	РезультатТеста       = "";
	АктивированДемоРежим = "";
	
	РезультатПроверки = Новый Структура;
	Попытка
		Ответ = ИнициализироватьУстройство(ОбъектДрайвера,Параметры);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
		Иначе
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Параметры.ОписаниеОшибки);
		КонецЕсли;
		ВыходныеПараметры.Добавить(РезультатТеста);
		ВыходныеПараметры.Добавить(АктивированДемоРежим);
	
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ТестУстройства>:'") + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция возвращает версию установленного драйвера
//
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));

	Попытка
		ВыходныеПараметры[1] = "1.01";
	Исключение
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция возвращает описание установленного драйвера
//
Функция ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='1.01'"));
	
	ВыходныеПараметры.Добавить(НСтр("ru='ДрайверПриватбанкJSON'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Универсальный драйвер для работы с банковскими терминалами через TCP-порт в формате JSON'"));
	ВыходныеПараметры.Добавить(НСтр("ru='ЭквайринговыйТерминал'"));
	ВыходныеПараметры.Добавить("1");
	ВыходныеПараметры.Добавить(Ложь);
	ВыходныеПараметры.Добавить(Истина);
	ВыходныеПараметры.Добавить("Redhead Family");
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить("");
	
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ИнициализироватьУстройство(ОбъектДрайвера,СтруктураПараметров)
	
	ОбъектДрайвера.Open(СтруктураПараметров.АдресУстройства,СтруктураПараметров.ПортУстройства);
	
	КомандаТерминала_ = "{""method"":""PingDevice"",""step"":0}";
	ОтветТерминала = ВыполнитьКомандуТерминала(ОбъектДрайвера, КомандаТерминала_);
	
	Если Не ОтветТерминала.Успешно Тогда
		СтруктураПараметров.Вставить("ОписаниеОшибки", ОтветТерминала.ОписаниеОшибки);
		Сообщить("ОШИБКА PingDevice: "+ОтветТерминала.ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	КомандаТерминала_ = "{""method"":""ServiceMessage"",""step"":0,""params"":{""msgType"":""identify""}}";
	ОтветТерминала = ВыполнитьКомандуТерминала(ОбъектДрайвера, КомандаТерминала_);
	
	Если Не ОтветТерминала.Успешно Тогда
		СтруктураПараметров.Вставить("ОписаниеОшибки", ОтветТерминала.ОписаниеОшибки);
		Сообщить("ОШИБКА identify: "+ОтветТерминала.ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ВыполнитьКомандуТерминала(ОбъектДрайвера, КомандаТерминала_)
	СтруктураОтвета = Новый Структура("Успешно,Запрос,Ответ,ОписаниеОшибки,СтруктураОтвета",Ложь,"","","","");
	
	ЭтоСервиснаяКоманда = Найти(КомандаТерминала_,"ServiceMessage")>0;
	СообщениеХекс = "";
	Поток = Новый ПотокВПамяти;
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	Если Не ЗначениеЗаполнено(КомандаТерминала_) Тогда
		Сообщить("Нет команды");
		СтруктураОтвета.Вставить("ОписаниеОшибки", "Нет команды");
		Возврат СтруктураОтвета;
	КонецЕсли;
	ДанныеОтправки_ = СокрЛП(КомандаТерминала_)+Символ(00);
	Попытка
		РазмерБуфера = СтрДлина(ДанныеОтправки_);
		Для н = 1 По РазмерБуфера Цикл
			Байт_ = КодСимвола(ДанныеОтправки_,н);
			//Если Байт_ <0 ИЛИ Байт_ >255 Тогда
			//	Сообщить("Позиция["+н+"] Некоректный символ: "+Байт_);	
			//КонецЕсли;
			ЗаписьДанных.ЗаписатьБайт(Байт_);
			СимволХекс = ПреобразоватьВХекс(Байт_);
			СообщениеХекс = СообщениеХекс+СимволХекс+" ";
		КонецЦикла;
		ЗаписьДанных.Закрыть();
		ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
		ОбъектДрайвера.Write(ДвоичныеДанные);
		//ОтправленоБайт = ОтправленоБайт + РазмерБуфера;
		ОтветТерминала = ОжиданиеОтветаТерминала(ОбъектДрайвера,ЭтоСервиснаяКоманда);
		//sa #####  Иногда терминал не успевает отдать все данные и ответ вроде как есть, но в нем ДЖСОН не до конца.
		Если ТипЗнч(ОтветТерминала) = Тип("Структура") Тогда
			Если ОтветТерминала.error Тогда
				СтруктураОтвета.Вставить("Успешно", Ложь);
				СтруктураОтвета.Вставить("ОписаниеОшибки", ОтветТерминала.errorDescription);
			Иначе
				СтруктураОтвета.Вставить("Успешно", Истина);
			КонецЕсли;
			СтруктураОтвета.Вставить("Ответ", ОбщегоНазначенияКлиент.СтруктуруВТекстДЖСОН(ОтветТерминала));
		КонецЕсли;
		СтруктураОтвета.Вставить("СтруктураОтвета",ОтветТерминала);
	Исключение
		СтруктураОтвета.Вставить("ОписаниеОшибки", ОписаниеОшибки());
	КонецПопытки;
	СтруктураОтвета.Вставить("Запрос",ДанныеОтправки_);
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаКлиенте
Функция ОжиданиеОтветаТерминала(ОбъектДрайвера,Сервисное = Ложь)
	ОтветТерминала = Новый Структура("error,errorDescription",true,"Не получен ответ терминала!");
	Если Сервисное Тогда
		ЧасОжиданияPOS = 3;
	Иначе
		ЧасОжиданияPOS = 60;
	КонецЕсли;
	ЧасНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	КомандаТекСтатус = "{""method"": ""ServiceMessage"",""step"": 0, ""params"": {""msgType"": ""getLastResult""}}";
	КомандаОписание  = "{""method"": ""ServiceMessage"",""step"": 0, ""params"": {""msgType"": ""getLastStatMsgDescription""}}";
	КомандаПрерватьОперацию  = "{""method"": ""ServiceMessage"",""step"": 0, ""params"": {""msgType"": ""interrupt""}}";
	
	ТипыСервисныхСообщенийИгнор = Новый Массив;
	ТипыСервисныхСообщенийИгнор.Добавить("Ожидание");
	ТипыСервисныхСообщенийИгнор.Добавить("getLastResult");
	ТипыСервисныхСообщенийИгнор.Добавить("getLastStatMsgCode");
	ТипыСервисныхСообщенийИгнор.Добавить("getLastStatMsgDescription");
	ТипыСервисныхСообщенийИгнор.Добавить("deviceBusy");
	
	Для н = 1 По ЧасОжиданияPOS Цикл
		ВыполнениеКоманды = ПрочитатьОтветТерминала(ОбъектДрайвера);
		//sa #####  Иногда терминал не успевает отдать все данные и ответ вроде как есть, но в нем ДЖСОН не до конца.
		Если ТипЗнч(ОтветТерминала) = Тип("Структура") Тогда
			Если ВыполнениеКоманды.error Тогда
				Возврат ВыполнениеКоманды;
			Иначе
				Если ТипыСервисныхСообщенийИгнор.Найти(ВыполнениеКоманды.method)=Неопределено Тогда
					Возврат ВыполнениеКоманды;
				Иначе
					Если ВыполнениеКоманды.method <> "Ожидание" Тогда
						//Сообщить("Вижу сервисное сообщение: "+СтруктуруВТекстДЖСОН(ВыполнениеКоманды));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
				Возврат ВыполнениеКоманды;
		КонецЕсли;
		
		Если Сервисное Тогда
			Пауза(1000,0);
		Иначе
			Прогресс = Окр(100*н/ЧасОжиданияPOS);
			Прогресс = ?(Прогресс > 100,100,Прогресс);
			Пауза(1000,Прогресс);
		КонецЕсли;
	КонецЦикла;
	
	Если Сервисное Тогда
		//Последний шанс прочитать сообщение
		ОтветТерминала = ПрочитатьОтветТерминала(ОбъектДрайвера);
		Возврат ОтветТерминала;
	Иначе
		//Отправляем сервисную команду на прерывание операции
		Посылка_ = ВыполнитьКомандуТерминала(ОбъектДрайвера, КомандаПрерватьОперацию);
		Если Не Посылка_.Успешно Тогда
			ОтветТерминала.errorDescription = Посылка_.ОписаниеОшибки;
			Возврат ОтветТерминала;
		КонецЕсли;
		ВыполнениеКоманды = ОжиданиеОтветаТерминала(ОбъектДрайвера,Истина);
		Если  ВыполнениеКоманды.method = "Ожидание" Тогда
			ВыполнениеКоманды = Новый Структура("error,errorDescription",true,"Не получен ответ терминала!");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВыполнениеКоманды;
	
КонецФункции

&НаКлиенте
Функция ПрочитатьОтветТерминала(ОбъектДрайвера)
	Стр = "";
	ОтветСтр = "";
	Попытка
		ДвоичныеДанные = ОбъектДрайвера.Read();
		ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанные);
		Пока ЧтениеДанных.ЧтениеЗавершено=Ложь Цикл
			//ОтветСтр = ОтветСтр + ЧтениеДанных.ПрочитатьСимволы(16,КодировкаТекста.UTF8);
			Стр = ЧтениеДанных.ПрочитатьСтроку();
			//Сообщить(""+Стр);
			//sa ### из-за спецсимволов в слип-чеке не преобразовывается в ДЖСОН
			//будем пропускать строку слип-чека, вся нужная информация есть в структуре.
			Если (Лев(СокрЛП(Стр),9) = """receipt""") Тогда
				Продолжить;
			КонецЕсли;
			ОтветСтр = ОтветСтр + Строка(Стр);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ОтветСтр) И СокрЛП(ОтветСтр) <> Символ(00) Тогда
			ОтветТерминала = ОбщегоНазначенияКлиент.ТекстДЖСОНвСтруктуру(ОтветСтр);
		Иначе
			//пока данный нет, ожидаем
			ОтветТерминала = Новый Структура("error,errorDescription,method",false,"","Ожидание");
			
			Возврат ОтветТерминала;
		КонецЕсли;
	Исключение
		ОтветТерминала = Новый Структура("error,errorDescription",true,ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ОтветТерминала;
КонецФункции

&НаКлиенте
Функция ИнициализироватьКомпоненту()
	Если ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверПриватбанкTCPClient", "SD849", ТипВнешнейКомпоненты.Native) Тогда
		ОбъектДрайвера = Новый("AddIn.SD849.TcpClient");
	Иначе
		#Если ТонкийКлиент Тогда
			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверПриватбанкTCPClient");
		#КонецЕсли
		Если ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверПриватбанкTCPClient", "SD849", ТипВнешнейКомпоненты.Native) Тогда
			ОбъектДрайвера = Новый("AddIn.SD849.TcpClient");
		КонецЕсли;
	КонецЕсли;
	Если ОбъектДрайвера=Неопределено Тогда
		Сообщить("Ошибка подключения компоненты!");
		Возврат Неопределено;
	КонецЕсли;
	КомпонентаКлиент = ОбъектДрайвера;
	Возврат ОбъектДрайвера;	
КонецФункции


&НаКлиенте
Функция ПродажаДЖСОН(ПараметрыПлатежа)
	РезультатОплаты = Новый Структура("Успешно,Сумма,ОписаниеОшибки,Банк,НомерКарты,КодRRN,НомерЧека,КодАвторизации,ДействительнаДо,Клиент,Эмитент,ТерминалИД,МерчантИД,СлипЧек",Ложь,0);
	
	ПараметрыДрайвера = ПараметрыПлатежа.ПараметрыДрайвера;
	//ОбъектДрайвера = ПараметрыПлатежа.ОбъектДрайвера;
	АдресСервера = ПараметрыДрайвера.АдресУстройства;
	Порт = ПараметрыДрайвера.ПортУстройства;
	
	//ОбъектДрайвера = Новый("AddIn.SD849.TcpClient");
	//Из-за того что библиотека работающая с TCP - является ДЕМО, у нее есть ограничение на количество обрабатываемых символов.
	//Около 30 кб. Поэтому будем переинициализировать компоненту перед каждой операцией заново.
	ОбъектДрайвера = ИнициализироватьКомпоненту();
	Если ОбъектДрайвера = Неопределено Тогда
		РезультатОплаты.ОписаниеОшибки = "Не вдалося ініціалізувати драйвер банківського терміналу";
		Возврат РезультатОплаты;
	КонецЕсли;
	//ОбъектДрайвера.Open(АдресСервера,Порт,Ложь);
	
	Успешно = ИнициализироватьУстройство(ОбъектДрайвера,ПараметрыДрайвера);
	Если Не Успешно Тогда
		Возврат РезультатОплаты;
	КонецЕсли;
	
	//СуммаПлатежа = СтрЗаменить(ПараметрыПлатежа.Сумма,Символы.НПП,"");
	СуммаПлатежа = 0.5;
	
	КомандаОплаты = "{""method"":""Purchase"",""step"": 0,""params"": {""amount"": """+СуммаПлатежа+""",""discount"": """",""merchantId"": ""0"",""facepay"": ""false""}}";
	
	ОтветТерминала = ВыполнитьКомандуТерминала(ОбъектДрайвера,КомандаОплаты);
	ОбъектДрайвера.Close();
	Если Не ОтветТерминала.Успешно Тогда
		РезультатОплаты.Вставить("ОписаниеОшибки", ОтветТерминала.ОписаниеОшибки);
		Сообщить("ОШИБКА Purchase: "+ОтветТерминала.ОписаниеОшибки);
		Возврат РезультатОплаты;
	КонецЕсли;
	//ЗавершитьРаботуУстройства(ОбъектДрайвера);
	
	СтруктураОтвета = ОтветТерминала.СтруктураОтвета;
	РезультатыПлатежа = СтруктураОтвета.params;	
	РезультатОплаты.Успешно = Не СтруктураОтвета.error;
	РезультатОплаты.Сумма = СуммаПлатежа;
	РезультатОплаты.Банк = РезультатыПлатежа.bankAcquirer;
	РезультатОплаты.НомерКарты = РезультатыПлатежа.pan;
	РезультатОплаты.КодRRN = РезультатыПлатежа.rrn;
	РезультатОплаты.НомерЧека = РезультатыПлатежа.invoiceNumber;
	РезультатОплаты.КодАвторизации = РезультатыПлатежа.approvalCode;
	РезультатОплаты.ДействительнаДо = РезультатыПлатежа.cardExpiryDate;
	РезультатОплаты.Клиент = РезультатыПлатежа.cardHolderName;
	РезультатОплаты.Эмитент = РезультатыПлатежа.issuerName;
	РезультатОплаты.ТерминалИД = РезультатыПлатежа.terminalId;
	РезультатОплаты.МерчантИД = РезультатыПлатежа.merchant;
	 
	
	РезультатОплаты.СлипЧек = ""+РезультатОплаты.Банк + Символы.ПС + 
			  Символы.ПС +
			  Строка(РезультатОплаты.Эмитент) + Символы.ПС +
			  //"ДЕЙСТВ. ДО: " + Прав(ДействительнаДо,2) + "/" + Лев(ДействительнаДо,2) + Символы.ПС +
			  Строка(РезультатОплаты.НомерКарты) + Символы.ПС +
			  "КОД АВТОРИЗАЦИИ: " + РезультатОплаты.КодАвторизации + Символы.ПС +
			  "RRN: " + РезультатОплаты.КодRRN + Символы.ПС +
			  "СУММА: " + СТРОКА(СуммаПлатежа) + " ГРН" + Символы.ПС + Символы.ПС +
			  "КЛИЕНТ: " + РезультатОплаты.Клиент + Символы.ПС+
			  "МЕРЧАНТ ID: " + РезультатОплаты.merchant + Символы.ПС+
			  "ТЕРМИНАЛ ID: " + РезультатОплаты.terminalId;
			  
	
	Возврат РезультатОплаты;
КонецФункции // ПродажаДЖСОН()

&НаКлиенте
Функция ВозвратДЖСОН(ПараметрыПлатежа)
	РезультатОплаты = Новый Структура("Успешно,Сумма,ОписаниеОшибки,Банк,НомерКарты,КодRRN,НомерЧека,КодАвторизации,ДействительнаДо,Клиент,Эмитент,ТерминалИД,МерчантИД,СлипЧек",Ложь,0);
	
	ПараметрыДрайвера = ПараметрыПлатежа.ПараметрыДрайвера;
	//ОбъектДрайвера = ПараметрыПлатежа.ОбъектДрайвера;
	//АдресСервера = ПараметрыДрайвера.АдресСервера;
	//Порт = ПараметрыДрайвера.Порт;
	
	ОбъектДрайвера = ИнициализироватьКомпоненту();
	Если ОбъектДрайвера = Неопределено Тогда
		РезультатОплаты.ОписаниеОшибки = "Не вдалося ініціалізувати драйвер банківського терміналу";
		Возврат РезультатОплаты;
	КонецЕсли;
	//ОбъектДрайвера.Open(АдресСервера,Порт,Ложь);
	
	Успешно = ИнициализироватьУстройство(ОбъектДрайвера,ПараметрыДрайвера);
	Если Не Успешно Тогда
		Возврат РезультатОплаты;
	КонецЕсли;
	
	//СуммаПлатежа = СтрЗаменить(ПараметрыПлатежа.Сумма,Символы.НПП,"");
	СуммаПлатежа = 0.5;
	НомерТранзакции = ПараметрыПлатежа.НомерТранзакции;
	НомерТранзакции = "088326417851";	
	КомандаВозврата = "{""method"":""Refund"",""step"": 0,""params"": {""amount"": """+СуммаПлатежа+""",""discount"": """",""merchantId"": ""0"",""rrn"": """+НомерТранзакции+"""}}";

	ОтветТерминала = ВыполнитьКомандуТерминала(ОбъектДрайвера,КомандаВозврата);
	ОбъектДрайвера.Close();
	Если Не ОтветТерминала.Успешно Тогда
		РезультатОплаты.Вставить("ОписаниеОшибки", ОтветТерминала.ОписаниеОшибки);
		Сообщить("ОШИБКА Refund: "+ОтветТерминала.ОписаниеОшибки);
		Возврат РезультатОплаты;
	КонецЕсли;
	//ЗавершитьРаботуУстройства(ОбъектДрайвера);
	
	СтруктураОтвета = ОтветТерминала.СтруктураОтвета;
	
	СтруктураОтвета = ОтветТерминала.СтруктураОтвета;
	РезультатыПлатежа = СтруктураОтвета.params;	
	РезультатОплаты.Успешно = Не СтруктураОтвета.error;
	РезультатОплаты.Сумма = СуммаПлатежа;
	РезультатОплаты.Банк = РезультатыПлатежа.bankAcquirer;
	РезультатОплаты.НомерКарты = РезультатыПлатежа.pan;
	РезультатОплаты.КодRRN = РезультатыПлатежа.rrn;
	РезультатОплаты.НомерЧека = РезультатыПлатежа.invoiceNumber;
	РезультатОплаты.КодАвторизации = РезультатыПлатежа.approvalCode;
	РезультатОплаты.ДействительнаДо = РезультатыПлатежа.cardExpiryDate;
	РезультатОплаты.Клиент = РезультатыПлатежа.cardHolderName;
	РезультатОплаты.Эмитент = РезультатыПлатежа.issuerName;
	РезультатОплаты.ТерминалИД = РезультатыПлатежа.terminalId;
	РезультатОплаты.МерчантИД = РезультатыПлатежа.merchant;
	 
	
	РезультатОплаты.СлипЧек = ""+РезультатОплаты.Банк + Символы.ПС + 
			  Символы.ПС +
			  Строка(РезультатОплаты.Эмитент) + Символы.ПС +
			  //"ДЕЙСТВ. ДО: " + Прав(ДействительнаДо,2) + "/" + Лев(ДействительнаДо,2) + Символы.ПС +
			  Строка(РезультатОплаты.НомерКарты) + Символы.ПС +
			  "КОД АВТОРИЗАЦИИ: " + РезультатОплаты.КодАвторизации + Символы.ПС +
			  "RRN: " + РезультатОплаты.КодRRN + Символы.ПС +
			  "СУММА: " + СТРОКА(СуммаПлатежа) + " ГРН" + Символы.ПС + Символы.ПС +
			  "КЛИЕНТ: " + РезультатОплаты.Клиент + Символы.ПС+
			  "МЕРЧАНТ ID: " + РезультатОплаты.merchant + Символы.ПС+
			  "ТЕРМИНАЛ ID: " + РезультатОплаты.terminalId;
			  
	
	Возврат РезультатОплаты;
КонецФункции // ПродажаДЖСОН()

&НаКлиенте
Функция ПреобразоватьВХекс(Знач Число_)
	Если Число_ = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	СимволыХекс = "0123456789ABCDEF";
	ЦелаяЧасть = Цел(Число_/16);
	ДробнаяЧасть = Число_%16;
	СимволХекс_ = Сред(СимволыХекс,ЦелаяЧасть+1,1) + Сред(СимволыХекс,ДробнаяЧасть+1,1);
	
	
	Возврат СимволХекс_;
	
КонецФункции

&НаКлиенте
Процедура Пауза(ЗадержкаВМиллисекундах,Прогресс = 100)
	ТаймерМС = ТекущаяУниверсальнаяДатаВМиллисекундах() + ЗадержкаВМиллисекундах;
	Пока ТаймерМС > ТекущаяУниверсальнаяДатаВМиллисекундах() Цикл
		Если Прогресс > 0 Тогда
        	Состояние("Ожидание банковского терминала",Прогресс);
		КонецЕсли;
    КонецЦикла;		
КонецПроцедуры

&НаКлиенте
Функция Продажа(Сумма, НомерКарты, НомерЧека, КодRRN, КодАвторизации, ДействительнаДо, Клиент, Эмитент, СлипЧек, Порт)
	Перем POSТерминал;
	Если POSТерминал = Неопределено Then
		//Initialize library
		POSТерминал = Новый COMОбъект("ECRCommX.BPOS1Lib");
		POSТерминал.CommOpen(Порт, 115200);
		LastResult = POSТерминал.Lastresult();
		Если НЕ LastResult=0 Тогда
			POSТерминал.CommClose();
			POSТерминал = Неопределено;
			Возврат Ложь;
		КонецЕсли;
		POSТерминал.Purchase(Сумма*100,0,0);
		mErr = ОжиданиеОтветаТерминала(POSТерминал);
		Если Не mErr = 0 Тогда
			POSТерминал.CommClose();
			POSТерминал = Неопределено;
			Возврат Ложь;
		КонецЕсли; 
		НомерКарты = POSТерминал.PAN;
		КодRRN = POSТерминал.RRN;
		НомерЧека = POSТерминал.InvoiceNum;
		КодАвторизации = POSТерминал.AuthCode;
		ДействительнаДо = POSТерминал.ExpDate;
		Клиент = POSТерминал.CardHolder;
		Эмитент = POSТерминал.IssuerName;
	КонецЕсли;	
	POSТерминал.Confirm();
	mErr = ОжиданиеОтветаТерминала(POSТерминал);
	POSТерминал.CommClose();
	POSТерминал = Неопределено;
	СлипЧек = "ПРИВАТ" + Символы.ПС + 
			  Символы.ПС +
			  Строка(Эмитент) + Символы.ПС +
			  //"ДЕЙСТВ. ДО: " + Прав(ДействительнаДо,2) + "/" + Лев(ДействительнаДо,2) + Символы.ПС +
			  Строка(НомерКарты) + Символы.ПС +
			  "КОД АВТОРИЗАЦИИ: " + КодАвторизации + Символы.ПС +
			  "RRN: " + КодRRN + Символы.ПС +
			  "СУММА: " + СТРОКА(Сумма) + "ГРН" + Символы.ПС + Символы.ПС +
			  "КЛИЕНТ: " + Клиент + Символы.ПС;
			  
	Если mErr = 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
			
КонецФункции // Продажа()

&НаКлиенте
Функция  ВозвратПопривату(Сумма, ReservedForFutureUse, P_MerchantNum, КодRRN, Порт)

	Перем POSТерминал;
	Если POSТерминал = Неопределено Then
		//Initialize library
		POSТерминал = Новый COMОбъект("ECRCommX.BPOS1Lib");
		POSТерминал.CommOpen(Порт, 115200);
		LastResult = POSТерминал.Lastresult();
		Если НЕ LastResult=0 Тогда
			POSТерминал.CommClose();
			POSТерминал = Неопределено;
			Возврат Ложь;
		КонецЕсли;
		POSТерминал.Refund(Сумма*100,0,P_MerchantNum, КодRRN);
		mErr = ОжиданиеОтветаТерминала(POSТерминал);
		Если Не mErr = 0 Тогда
			POSТерминал.CommClose();
			POSТерминал = Неопределено;
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли;	
	POSТерминал.Confirm();
	mErr = ОжиданиеОтветаТерминала(POSТерминал);
	POSТерминал.CommClose();
	POSТерминал = Неопределено;
	Если mErr = 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 

КонецФункции //  ВозвратПопривату(Сумма, 0, Параметры.P_MerchantNum, КодRRN)()

&НаКлиенте
Функция ПроверитьЭТРайфайзен(РезультатТеста, АктивированДемоРежим, Порт)
	//Initialize library
	POSТерминал = Новый COMОбъект("CardPay.PosApi");
	LastResult = POSТерминал.pos_open("com" + Порт, "C:\logAval.txt");
	АктивированДемоРежим = Ложь;	
	POSТерминал.pos_close();
	POSТерминал = Неопределено;
	Если Не LastResult=0 Тогда
		РезультатТеста = "Успешно";
		Возврат Истина;
	Иначе
		РезультатТеста = "Ошибка";
		Возврат Ложь;
	КонецЕсли;
КонецФункции // 

&НаКлиенте
Функция ПродажаРайфайзен(Сумма, НомерКарты, НомерЧека, КодRRN, КодАвторизации, ДействительнаДо, Клиент, Эмитент, СлипЧек, Порт)
	Перем Значение;
	Перем Параметр;
	Перем POSТерминал;
	Если POSТерминал = Неопределено Then
		//Initialize library
		POSТерминал = Новый COMОбъект("CardPay.PosApi");
		LastResult = POSТерминал.pos_open("com" + Порт , "C:\logAval.txt");
		Если LastResult=0 Тогда
			POSТерминал.pos_close();
			POSТерминал = Неопределено;
			Возврат Ложь;
		КонецЕсли;
		POSТерминал.pos_set(POSТерминал.POS_AMOUNT, Сумма*100);
		POSТерминал.pos_set(POSТерминал.POS_CURRENCY, "980");
		LastResult = POSТерминал.pos_send(POSТерминал.ACTION_PAYMENT);
		Если LastResult = 0 Тогда
			POSТерминал.pos_close();
			POSТерминал = Неопределено;
			Возврат Ложь;
		КонецЕсли;
		
		Пока Истина Цикл
			Ответ = POSТерминал.pos_receive(180000);
			Если Ответ = POSТерминал.RESP_MESSAGE или Ответ = POSТерминал.RESP_IDENTIFIER Тогда
			ИначеЕсли Ответ = POSТерминал.RESP_TIMEOUT Тогда
				Режим = РежимДиалогаВопрос.ДаНет;
				Ответ = Вопрос("Вышло время ожидания ответа, желаете ещё подождать?", Режим, 0);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					POSТерминал.pos_close();
					POSТерминал = Неопределено;
					Возврат Ложь;
				КонецЕсли
			ИначеЕсли Ответ = POSТерминал.ACTION_BREAK или Ответ = POSТерминал.RESP_DECLINE Тогда
				POSТерминал.pos_close();
				POSТерминал = Неопределено;
				Возврат Ложь;;
			ИначеЕсли Ответ > 0 и Ответ <> POSТерминал.RESP_TIMEOUT Тогда
				Если POSТерминал.pos_get_first(Параметр, Значение) Тогда
					Пока POSТерминал.pos_get_next(Параметр, Значение) Цикл
						Если Параметр = "card_pan" Тогда
							НомерКарты = Значение;
						ИначеЕсли Параметр = "trans_rcpt" Тогда
							НомерЧека = Значение;
						ИначеЕсли Параметр = "card_holder" Тогда
							Клиент = Значение;
						ИначеЕсли Параметр = "rrn" Тогда
							КодRRN = Значение;
						ИначеЕсли Параметр = "approval" Тогда
							КодАвторизации = Значение;
						ИначеЕсли Параметр = "receipt" Тогда
							IDТранзакции = Значение;
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли;	
	POSТерминал.pos_close();
	POSТерминал = Неопределено;
	СлипЧек = "РАЙФФАЙЗЕН БАНК АВАЛЬ" + Символы.ПС + 
			  Символы.ПС +
			  Строка(Эмитент) + Символы.ПС +
			  //"ДЕЙСТВ. ДО: " + Прав(ДействительнаДо,2) + "/" + Лев(ДействительнаДо,2) + Символы.ПС +
			  Строка(НомерКарты) + Символы.ПС +
			  "КОД АВТОРИЗАЦИИ: " + КодАвторизации + Символы.ПС +
			  "ID ТРАНЗАКЦИИ: " + IDТранзакции + Символы.ПС +
			  "RRN: " + КодRRN + Символы.ПС +
			  "СУММА: " + СТРОКА(Сумма*100) + " ГРН" + Символы.ПС + 
			  "КЛИЕНТ: " + Клиент + Символы.ПС;
			  
	Возврат Истина;
			
КонецФункции // Продажа()
  
// + HVOYA 22.01.2017 20:52:53, Латышев А.А.
&НаКлиенте
Функция  ВозвратПоРайффайзен(Сумма, ReservedForFutureUse, P_MerchantNum, КодRRN, Порт)
	Перем Значение;
	Перем Параметр;
	Перем POSТерминал;
	Если POSТерминал = Неопределено Then
		//Initialize library
		POSТерминал = Новый COMОбъект("CardPay.PosApi");
		LastResult = POSТерминал.pos_open("com" + Порт , "C:\logAval.txt");
		Если LastResult=0 Тогда
			POSТерминал.pos_close();
			POSТерминал = Неопределено;
			Возврат Ложь;
		КонецЕсли;
		POSТерминал.pos_set(POSТерминал.POS_AMOUNT, Сумма*100);
		POSТерминал.pos_set(POSТерминал.POS_CURRENCY, "980");
		LastResult = POSТерминал.pos_send(POSТерминал.ACTION_RETURN);
		Если LastResult = 0 Тогда
			POSТерминал.pos_close();
			POSТерминал = Неопределено;
			Возврат Ложь;
		КонецЕсли;
		
		Пока Истина Цикл
			Ответ = POSТерминал.pos_receive(180000);
			Если Ответ = POSТерминал.RESP_MESSAGE или Ответ = POSТерминал.RESP_IDENTIFIER Тогда
			ИначеЕсли Ответ = POSТерминал.RESP_TIMEOUT Тогда
				Режим = РежимДиалогаВопрос.ДаНет;
				Ответ = Вопрос("Вышло время ожидания ответа, желаете ещё подождать?", Режим, 0);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					POSТерминал.pos_close();
					POSТерминал = Неопределено;
					Возврат Ложь;
				КонецЕсли
			ИначеЕсли Ответ = POSТерминал.ACTION_BREAK или Ответ = POSТерминал.RESP_DECLINE Тогда
				POSТерминал.pos_close();
				POSТерминал = Неопределено;
				Возврат Ложь;;
			ИначеЕсли Ответ > 0 и Ответ <> POSТерминал.RESP_TIMEOUT Тогда
				Если POSТерминал.pos_get_first(Параметр, Значение) Тогда
					Пока POSТерминал.pos_get_next(Параметр, Значение) Цикл
						Если Параметр = "card_pan" Тогда
							НомерКарты = Значение;
						ИначеЕсли Параметр = "trans_rcpt" Тогда
							НомерЧека = Значение;
						ИначеЕсли Параметр = "card_holder" Тогда
							Клиент = Значение;
						ИначеЕсли Параметр = "rrn" Тогда
							КодRRN = Значение;
						ИначеЕсли Параметр = "approval" Тогда
							КодАвторизации = Значение;
						ИначеЕсли Параметр = "receipt" Тогда
							IDТранзакции = Значение;
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли;
				Прервать;
			КонецЕсли;		КонецЦикла; 
		
	КонецЕсли;	
	POSТерминал.pos_close();
	POSТерминал = Неопределено;
			  
	Возврат Истина;
КонецФункции //  ВозвратПопривату(Сумма, 0, Параметры.P_MerchantNum, КодRRN)()
// - HVOYA 22.01.2017 20:52:53, Латышев А.А.  