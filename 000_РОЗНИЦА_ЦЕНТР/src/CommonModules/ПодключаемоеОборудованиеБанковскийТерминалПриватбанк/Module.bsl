&НаКлиенте
///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция осуществляет подключение устройства.
//
// Параметры:
//  ОбъектДрайвера   - <*>
//           - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;
	ВыходныеПараметры = Новый Массив();
	ПараметрыПодключения.Вставить("ИДУстройства", Новый УникальныйИдентификатор);

	Попытка   
		//ОбъектДрайвера = Новый("AddIn.SD849.TcpClient");
		//ОбъектДрайвера.Open(Параметры.АдресУстройства,Параметры.ПортУстройства);
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОписаниеОшибки());
	КонецПопытки;
	
	ПараметрыПодключения.Вставить("КодОригинальнойТранзакции", Неопределено);
	ПараметрыПодключения.Вставить("ТипТранзакции", "");

	Возврат Результат;

КонецФункции

// Функция осуществляет отключение устройства.
//
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;

	ВыходныеПараметры = Новый Массив();

	Попытка   
		//ОбъектДрайвера.Close();
		ОбъектДрайвера = Неопределено;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОписаниеОшибки());
	КонецПопытки;
	
	
	
	Возврат Результат;

КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
	
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ ВСЕХ ТИПОВ ДРАЙВЕРОВ
	
	// Тестирование устройства
	Если Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" ИЛИ Команда = "GetVersion" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение описание драйвера
	ИначеЕсли Команда = "ПолучитьОписаниеДрайвера" ИЛИ Команда = "GetDescription" Тогда
		Результат = ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ЭКВАЙРИНГОВЫМИ ТЕРМИНАЛАМИ
	
	// Функция возвращает, будет ли печать слип-чеков на терминале
	ИначеЕсли Команда = "PrintSlipOnTerminal" ИЛИ Команда = "ПечатьКвитанцийНаТерминале" Тогда
		Результат = ПечатьКвитанцийНаТерминале(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Оплата платежной картой
	ИначеЕсли Команда = "AuthorizeSales" ИЛИ Команда = "ОплатитьПлатежнойКартой" Тогда
		Сумма      = ВходныеПараметры[0];
		НомерКарты = ВходныеПараметры[1];
		Если ВходныеПараметры.Количество() > 2 Тогда
			НомерЧека  = ВходныеПараметры[2];
		Иначе
			НомерЧека  = "";
		КонецЕсли;
		Результат = ОплатитьПлатежнойКартой(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                            НомерКарты, Сумма, НомерЧека, ВыходныеПараметры);
	// Возврат платежа
	ИначеЕсли Команда = "AuthorizeRefund" Тогда
		Сумма          = ВходныеПараметры[0];
		НомерКарты     = ВходныеПараметры[1];
		СсылочныйНомер = ВходныеПараметры[2];
		НомерЧека      = ВходныеПараметры[3];
		Результат = ВернутьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                          Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	// Отмена платежа
	ИначеЕсли Команда = "AuthorizeVoid" Тогда
		Сумма          = ВходныеПараметры[0];
		СсылочныйНомер = ВходныеПараметры[1];
		НомерЧека      = ВходныеПараметры[2];
		Результат = ОтменитьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                           Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	Иначе
		
	//	Указанная команда не поддерживается данным драйвером
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(СтрЗаменить(
				"Команда «%Команда%» не підтримується інстальованим драйвером."
				, "%Команда%"
				, Команда
			)
		);

		Результат = Ложь;

	КонецЕсли;
	
	Возврат Результат;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции общие для работы с эквайринговыми терминалами

// Функция возвращает, будет ли печать слип-чеков на терминале
//
Функция ПечатьКвитанцийНаТерминале(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ПечатьКвитанцийНаТерминале();
		ВыходныеПараметры.Очистить();  
		ВыходныеПараметры.Добавить(Ответ);
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПечатьКвитанцийНаТерминале>:'") + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет сверку итогов по картам.
//
Функция ИтогиДняПоКартам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;
	Ответ     = Ложь;
	СлипЧек   = "";

	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Сверка итогов'");

	Попытка
		Ответ = ОбъектДрайвера.ИтогиДняПоКартам(ПараметрыПодключения.ИДУстройства, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		Иначе
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ИтогиДняПоКартам>:'") + ОписаниеОшибки());
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет авторизацию/оплату по карте.
//
Функция ОплатитьПлатежнойКартой(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                НомерКарты, Сумма, НомерЧека, ВыходныеПараметры)

	Результат      = Истина;
	КодRRN         = Неопределено;
	КодАвторизации = Неопределено;
	СлипЧек        = "";
	ДействительнаДо = Неопределено;
	Клиент = Неопределено; 
	Эмитент = Неопределено;
	
	Если НЕ (Сумма > 0) Тогда
		Результат = Ложь;
		ПараметрыПодключения.Вставить("ТипТранзакции","Отказ");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.'"));
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		//2024-10-18 sa Вызываем оплату;
		ПараметрыПлатежа = Новый Структура;
		ПараметрыПлатежа.Вставить("Сумма",Сумма);
		ПараметрыПлатежа.Вставить("ПараметрыДрайвера",Параметры);
		ОтключитьУстройство(ОбъектДрайвера,Параметры,ПараметрыПодключения,ВыходныеПараметры);
		
		Ответ = ПродажаДЖСОН(ПараметрыПлатежа);
		//ПодключитьУстройство(ОбъектДрайвера,Параметры,ПараметрыПодключения,ВыходныеПараметры);
		
		Если Ответ.Успешно Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Ответ.НомерКарты);
			ВыходныеПараметры.Добавить(Ответ.КодRRN);
			ВыходныеПараметры.Добавить(Ответ.НомерЧека);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[3].Добавить("СлипЧек");
			ВыходныеПараметры[3].Добавить(Ответ.СлипЧек);
			ВыходныеПараметры.Добавить(Ответ.КодАвторизации);
			ВыходныеПараметры.Добавить(Ответ.ДействительнаДо);
			ВыходныеПараметры.Добавить(Ответ.Клиент);
			ВыходныеПараметры.Добавить(Ответ.Эмитент);
			ВыходныеПараметры.Добавить(Ответ.МерчантИД);
			ВыходныеПараметры.Добавить(Ответ.ТерминалИД);
		Иначе
			Результат = Ложь;
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(Ответ.ОписаниеОшибки);
			//ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОплатитьПлатежнойКартой>:'") + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет возврат платежа по карте.
//
Функция ВернутьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                      Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры)
	  
	Результат      = Истина;
	КодRRN         = СсылочныйНомер;
	КодАвторизации = Неопределено;
	СлипЧек        = "";
	НомерКарты     = "";

	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Вернуть платеж'");
	
	Если НЕ (Сумма > 0) Тогда
		Результат = Ложь;
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.'"));
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Ответ = ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, КодRRN, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерКарты);
			ВыходныеПараметры.Добавить(КодRRN);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[3].Добавить("СлипЧек");
			ВыходныеПараметры[3].Добавить(СлипЧек);
		Иначе
			Результат = Ложь;
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте>:'") + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отмену платежа по карте.
//
Функция ОтменитьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                      Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры)
	  
	Результат      = Истина;
	КодRRN         = СсылочныйНомер;
	КодАвторизации = Неопределено;
	СлипЧек        = "";
	НомерКарты     = "";

	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отменить платеж'");
	
	Если НЕ (Сумма > 0) Тогда
		Результат = Ложь;
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.'"));
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		//Из-за ограничений демо-версии библиотеки для обмена с терминалом 
		//инициализируем устройство каждый раз перед выполнением транзакции
		//ОтключитьУстройство(ОбъектДрайвера,Параметры,ПараметрыПодключения,ВыходныеПараметры);
		//2024-10-18 sa Вызываем возврат;
		ПараметрыПлатежа = Новый Структура;
		ПараметрыПлатежа.Вставить("Сумма",Сумма);
		ПараметрыПлатежа.Вставить("ПараметрыДрайвера",Параметры);
		ПараметрыПлатежа.Вставить("НомерТранзакции", СсылочныйНомер);
		ПараметрыПлатежа.Вставить("НомерЧека", НомерЧека);
		
		Ответ = ВозвратДЖСОН(ПараметрыПлатежа);
		
		Если Ответ.Успешно Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(Ответ.СлипЧек);
		Иначе
			Результат = Ложь;
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(Ответ.ОписаниеОшибки);
			//ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте>:'") + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет аварийную отмену операции по карте.
//
Функция АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры)

	Ответ = Ложь;
	Результат = Истина;
	КомандаПрерватьОперацию  = "{""method"": ""ServiceMessage"",""step"": 0, ""params"": {""msgType"": ""interrupt""}}";

	Попытка
		//Отправляем сервисную команду на прерывание операции
		Ответ = ВыполнитьКомандуТерминала(ОбъектДрайвера, КомандаПрерватьОперацию,Параметры);
		Если Не Ответ.Успешно Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.АварийнаяОтменаОперации>:'") + Ответ.ОписаниеОшибки);
		КонецЕсли;
		ВыполнениеКоманды = ОжиданиеОтветаТерминала(ОбъектДрайвера,Истина,Параметры);
		Если  ВыполнениеКоманды.method = "Ожидание" Тогда
			ВыполнениеКоманды = Новый Структура("error,errorDescription",true,"Не получен ответ терминала!");
			Ответ.Успешно = Ложь;
		КонецЕсли;
		
		//Ответ = ОбъектДрайвера.АварийнаяОтменаОперации(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ.Успешно Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ВыполнениеКоманды.errorDescription);
			//ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.АварийнаяОтменаОперации>:'") + ОписаниеОшибки());
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет преавторизацию по карте.
// 
Функция ПреавторизоватьПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                        Сумма, НомерКарты, ВыходныеПараметры)
	Результат      = Истина;
	КодRRN         = Неопределено;
	КодАвторизации = Неопределено;
	НомерЧека      = Неопределено;
	СлипЧек        = "";
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Преавторизовать платеж'");
	
	Если НЕ (Сумма > 0) Тогда
		Результат = Ложь;
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.'"));
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Ответ = ОбъектДрайвера.ПреавторизацияПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, КодRRN, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерКарты);
			ВыходныеПараметры.Добавить(КодRRN);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[3].Добавить("СлипЧек");
			ВыходныеПараметры[3].Добавить(СлипЧек);
		Иначе
			Результат = Ложь;
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПреавторизацияПоПлатежнойКарте>:'") + ОписаниеОшибки());
	 КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отмену преавторизации по карте.
//
Функция ОтменитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                               Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры)
	Результат      = Истина;
	КодАвторизации = Неопределено;
	СлипЧек        = "";
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отменить преавторизацию'");
	
	Попытка
		Ответ = ОбъектДрайвера.ОтменитьПреавторизациюПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, СсылочныйНомер, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		Иначе
			Результат = Ложь; 
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОтменитьПреавторизациюПоПлатежнойКарте>:'") + ОписаниеОшибки());
	 КонецПопытки;
	 
	 Возврат Результат;
	 
 КонецФункции

// Функция осуществляет завершение преавторизации по карте.
//
Функция ЗавершитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                                Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры)
	Результат = Истина;
	
	Результат      = Истина;
	КодАвторизации = Неопределено;
	СлипЧек        = "";
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Завершить преавторизацию'");
	
	Попытка
		Ответ = ОбъектДрайвера.ЗавершитьПреавторизациюПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, СсылочныйНомер, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		Иначе
			Результат = Ложь; 
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗавершитьПреавторизациюПоПлатежнойКарте>:'") + ОписаниеОшибки());
	 КонецПопытки;
	 
	Возврат Результат;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////
// Процедуры и функции общие для всех типов драйверов

// Функция осуществляет тестирование устройства.
//
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат            = Истина;
	РезультатТеста       = "";
	АктивированДемоРежим = "";
	
	РезультатПроверки = Новый Структура;
	Попытка
		Ответ = ИнициализироватьУстройство(ОбъектДрайвера,Параметры);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
		Иначе
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Параметры.ОписаниеОшибки);
		КонецЕсли;
		ВыходныеПараметры.Добавить(РезультатТеста);
		ВыходныеПараметры.Добавить(АктивированДемоРежим);
	
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ТестУстройства>:'") + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция возвращает версию установленного драйвера
//
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));

	Попытка
		ВыходныеПараметры[1] = "1.01";
	Исключение
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция возвращает описание установленного драйвера
//
Функция ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;
	ВыходныеПараметры.Очистить();
	
	Попытка
		ОбъектДрайвера = Новый("AddIn.SD849.TcpClient");
		ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
		ВыходныеПараметры.Добавить(НСтр("ru='1.01'"));
	Исключение
		ВыходныеПараметры.Добавить(НСтр("ru='Не установлен'"));
		ВыходныеПараметры.Добавить("");
	КонецПопытки;
		
	
	
	ВыходныеПараметры.Добавить(НСтр("ru='ДрайверПриватбанкJSON'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Универсальный драйвер для работы с банковскими терминалами через TCP-порт в формате JSON'"));
	ВыходныеПараметры.Добавить(НСтр("ru='ЭквайринговыйТерминал'"));
	ВыходныеПараметры.Добавить("1");
	ВыходныеПараметры.Добавить(Ложь);
	ВыходныеПараметры.Добавить(Истина);
	ВыходныеПараметры.Добавить("Redhead Family");
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить("");
	
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ИнициализироватьУстройство(ОбъектДрайвера,ПараметрыДрайвера)
	
	ОбъектДрайвера.Open(ПараметрыДрайвера.АдресУстройства,ПараметрыДрайвера.ПортУстройства);
	
	КомандаТерминала_ = "{""method"":""PingDevice"",""step"":0}";
	ОтветТерминала = ВыполнитьКомандуТерминала(ОбъектДрайвера, КомандаТерминала_,ПараметрыДрайвера);
	
	//мДлительностьТаймаута = СтруктураПараметров.ДлительностьТаймаута;
	//иногда может остаться мусор от предыдущей транзакции. Например когда пред. транзакция завершилась по таймауту.
	//Отсекаем его тут.
	ПингУспешно = Ложь;
	Если ТипЗнч(ОтветТерминала) = Тип("Структура") И ОтветТерминала.Свойство("СтруктураОтвета") Тогда
		Если ТипЗнч(ОтветТерминала.СтруктураОтвета) = Тип("Структура") И ОтветТерминала.СтруктураОтвета.Свойство("method") Тогда
			Если ОтветТерминала.СтруктураОтвета.method = "PingDevice" Тогда
				ПингУспешно = Истина;
			Иначе
				Если ПараметрыДрайвера.Отладка = Истина Тогда
					Сообщить("Обнаружен мусор в данных: "+ОтветТерминала.Ответ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПингУспешно Тогда	//был мусор пробуем еще раз
		ОтветТерминала = ВыполнитьКомандуТерминала(ОбъектДрайвера, КомандаТерминала_,ПараметрыДрайвера);
		Если Не ОтветТерминала.Успешно Тогда
			ПараметрыДрайвера.Вставить("ОписаниеОшибки", ОтветТерминала.ОписаниеОшибки);
			Сообщить("ОШИБКА PingDevice: "+ОтветТерминала.ОписаниеОшибки);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	КомандаТерминала_ = "{""method"":""ServiceMessage"",""step"":0,""params"":{""msgType"":""identify""}}";
	ОтветТерминала = ВыполнитьКомандуТерминала(ОбъектДрайвера, КомандаТерминала_,ПараметрыДрайвера);
	
	Если Не ОтветТерминала.Успешно Тогда
		ПараметрыДрайвера.Вставить("ОписаниеОшибки", ОтветТерминала.ОписаниеОшибки);
		Сообщить("ОШИБКА identify: "+ОтветТерминала.ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ВыполнитьКомандуТерминала(ОбъектДрайвера, КомандаТерминала_,ПараметрыДрайвера)
	СтруктураОтвета = Новый Структура("Успешно,Запрос,Ответ,ОписаниеОшибки,СтруктураОтвета",Ложь,"","","","");
	
	ЭтоСервиснаяКоманда = Найти(КомандаТерминала_,"ServiceMessage")>0;
	СообщениеХекс = "";
	Поток = Новый ПотокВПамяти;
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	Если Не ЗначениеЗаполнено(КомандаТерминала_) Тогда
		Сообщить("Нет команды");
		СтруктураОтвета.Вставить("ОписаниеОшибки", "Нет команды");
		Возврат СтруктураОтвета;
	КонецЕсли;
	ДанныеОтправки_ = СокрЛП(КомандаТерминала_)+Символ(00);
	Попытка
		РазмерБуфера = СтрДлина(ДанныеОтправки_);
		Для н = 1 По РазмерБуфера Цикл
			Байт_ = КодСимвола(ДанныеОтправки_,н);
			//Если Байт_ <0 ИЛИ Байт_ >255 Тогда
			//	Сообщить("Позиция["+н+"] Некоректный символ: "+Байт_);	
			//КонецЕсли;
			ЗаписьДанных.ЗаписатьБайт(Байт_);
			СимволХекс = ПреобразоватьВХекс(Байт_);
			СообщениеХекс = СообщениеХекс+СимволХекс+" ";
		КонецЦикла;
		ЗаписьДанных.Закрыть();
		ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
		ОбъектДрайвера.Write(ДвоичныеДанные);
		//ОтправленоБайт = ОтправленоБайт + РазмерБуфера;
		ОтветТерминала = ОжиданиеОтветаТерминала(ОбъектДрайвера,ЭтоСервиснаяКоманда,ПараметрыДрайвера);
		//sa #####  Иногда терминал не успевает отдать все данные и ответ вроде как есть, но в нем ДЖСОН не до конца.
		Если ТипЗнч(ОтветТерминала) = Тип("Структура") Тогда
			Если ОтветТерминала.error Тогда
				СтруктураОтвета.Вставить("Успешно", Ложь);
				СтруктураОтвета.Вставить("ОписаниеОшибки", ОтветТерминала.errorDescription);
			Иначе
				СтруктураОтвета.Вставить("Успешно", Истина);
			КонецЕсли;
			СтруктураОтвета.Вставить("Ответ", ОбщегоНазначенияКлиент.СтруктуруВТекстДЖСОН(ОтветТерминала));
		КонецЕсли;
		СтруктураОтвета.Вставить("СтруктураОтвета",ОтветТерминала);
	Исключение
		СтруктураОтвета.Вставить("ОписаниеОшибки", ОписаниеОшибки());
	КонецПопытки;
	СтруктураОтвета.Вставить("Запрос",ДанныеОтправки_);
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаКлиенте
Функция ОтправитьКомандуВТерминал(ОбъектДрайвера, КомандаТерминала_,ПараметрыДрайвера)
	СтруктураОтвета = Новый Структура("Успешно,Запрос,Ответ,ОписаниеОшибки,СтруктураОтвета",Ложь,"","","","");
	
	ЭтоСервиснаяКоманда = Найти(КомандаТерминала_,"ServiceMessage")>0;
	СообщениеХекс = "";
	Поток = Новый ПотокВПамяти;
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	Если Не ЗначениеЗаполнено(КомандаТерминала_) Тогда
		Сообщить("Нет команды");
		СтруктураОтвета.Вставить("ОписаниеОшибки", "Нет команды");
		Возврат СтруктураОтвета;
	КонецЕсли;
	ДанныеОтправки_ = СокрЛП(КомандаТерминала_)+Символ(00);
	Попытка
		РазмерБуфера = СтрДлина(ДанныеОтправки_);
		Для н = 1 По РазмерБуфера Цикл
			Байт_ = КодСимвола(ДанныеОтправки_,н);
			//Если Байт_ <0 ИЛИ Байт_ >255 Тогда
			//	Сообщить("Позиция["+н+"] Некоректный символ: "+Байт_);	
			//КонецЕсли;
			ЗаписьДанных.ЗаписатьБайт(Байт_);
			СимволХекс = ПреобразоватьВХекс(Байт_);
			СообщениеХекс = СообщениеХекс+СимволХекс+" ";
		КонецЦикла;
		ЗаписьДанных.Закрыть();
		ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
		ОбъектДрайвера.Write(ДвоичныеДанные);
		
		СтруктураОтвета.Успешно = Истина;
	Исключение
		СтруктураОтвета.Вставить("ОписаниеОшибки", ОписаниеОшибки());
	КонецПопытки;
	СтруктураОтвета.Вставить("Запрос",ДанныеОтправки_);
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаКлиенте
Функция СтруктураВТекст(ВходнаяСтруктура)
	Рез = "";
	Если ТипЗнч(ВходнаяСтруктура) <> Тип("Структура")Тогда
		Возврат Строка(ВходнаяСтруктура);
	КонецЕсли;
	Для Каждого КлючИЗначение Из ВходнаяСтруктура Цикл
		Рез = Рез + КлючИЗначение.Ключ + ": "+КлючИЗначение.Значение + Символы.ПС;	
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

Процедура СообщитьОтладка(Стр, ЭтоОтладка=Ложь)
	Если ЭтоОтладка Тогда
		Сообщить(""+ТекущаяДата()+" "+Стр);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ОжиданиеОтветаТерминала(ОбъектДрайвера,Сервисное = Ложь, ПараметрыДрайвера)
	ОтветТерминала = Новый Структура("error,errorDescription",true,"Не получен ответ терминала!");
	Если Сервисное Тогда
		ЧасОжиданияPOS = 3;
	Иначе
		Если НЕ ПараметрыДрайвера.Свойство("ДлительностьТаймаута") ИЛИ ПараметрыДрайвера.ДлительностьТаймаута = Неопределено Тогда
			ЧасОжиданияPOS = 60;
		Иначе
			ЧасОжиданияPOS = ПараметрыДрайвера.ДлительностьТаймаута;
		КонецЕсли;
	КонецЕсли;
	ЧасНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	КомандаТекСтатус = "{""method"": ""ServiceMessage"",""step"": 0, ""params"": {""msgType"": ""getLastResult""}}";
	КомандаОписание  = "{""method"": ""ServiceMessage"",""step"": 0, ""params"": {""msgType"": ""getLastStatMsgDescription""}}";
	КомандаПрерватьОперацию  = "{""method"": ""ServiceMessage"",""step"": 0, ""params"": {""msgType"": ""interrupt""}}";
	
	ТипыСервисныхСообщенийИгнор = Новый Массив;
	ТипыСервисныхСообщенийИгнор.Добавить("Ожидание");
	ТипыСервисныхСообщенийИгнор.Добавить("getLastResult");
	ТипыСервисныхСообщенийИгнор.Добавить("getLastStatMsgCode");
	ТипыСервисныхСообщенийИгнор.Добавить("getLastStatMsgDescription");
	ТипыСервисныхСообщенийИгнор.Добавить("deviceBusy");
	ТипыСервисныхСообщенийИгнор.Добавить("ServiceMessage");
	
	Для н = 1 По ЧасОжиданияPOS Цикл
		СообщитьОтладка("Читаю ответ терминала...",ПараметрыДрайвера.Отладка);
		ВыполнениеКоманды = ПрочитатьОтветТерминала(ОбъектДрайвера, ПараметрыДрайвера);
		//sa #####  Иногда терминал не успевает отдать все данные и ответ вроде как есть, но в нем ДЖСОН не до конца.
		Если ТипЗнч(ВыполнениеКоманды) = Тип("Структура") Тогда
			Если Не ВыполнениеКоманды.Свойство("error") Тогда
				Сообщить("ПРОБЛЕМА!!!!!");	
				Возврат ВыполнениеКоманды;
			КонецЕсли;
			Если ВыполнениеКоманды.error Тогда
				Возврат ВыполнениеКоманды;
			Иначе
				Если ТипыСервисныхСообщенийИгнор.Найти(ВыполнениеКоманды.method)=Неопределено Тогда
					Возврат ВыполнениеКоманды;
				Иначе
					Если ВыполнениеКоманды.method <> "Ожидание" Тогда
						//Сообщить("Вижу сервисное сообщение: "+СтруктуруВТекстДЖСОН(ВыполнениеКоманды));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
				СообщитьОтладка("Ответ получен. Возвращаю: "+СтруктураВТекст(ВыполнениеКоманды),ПараметрыДрайвера.Отладка);
				Возврат ВыполнениеКоманды;
		КонецЕсли;
		
		Если Сервисное Тогда
			Пауза(1000,0);
		Иначе
			Прогресс = Окр(100*н/ЧасОжиданияPOS);
			Прогресс = ?(Прогресс > 100,100,Прогресс);
			Пауза(1000,Прогресс);
		КонецЕсли;
	КонецЦикла;
	
	Если Сервисное Тогда
		//Последний шанс прочитать сообщение (либо выполняется сервисная команда)
		СообщитьОтладка("Читаю сервисный ответ (последний шанс)",ПараметрыДрайвера.Отладка);
		ОтветТерминала = ПрочитатьОтветТерминала(ОбъектДрайвера, ПараметрыДрайвера);
		СообщитьОтладка("Возвращаю сервисный ответ (последний шанс): "+СтруктураВТекст(ОтветТерминала),ПараметрыДрайвера.Отладка);
		Возврат ОтветТерминала;
	Иначе
		//Отправляем сервисную команду на прерывание операции
		СообщитьОтладка("Отправляю запрос на прерывание операции",ПараметрыДрайвера.Отладка);
		//Посылка_ = ВыполнитьКомандуТерминала(ОбъектДрайвера, КомандаПрерватьОперацию,ПараметрыДрайвера);
		//Если Не Посылка_.Успешно Тогда
		//	ОтветТерминала.errorDescription = Посылка_.ОписаниеОшибки;
		//	Возврат ОтветТерминала;
		//КонецЕсли;
		ОтправитьКомандуВТерминал(ОбъектДрайвера, КомандаПрерватьОперацию,ПараметрыДрайвера);
		СообщитьОтладка("Ожидаю ответ терминала на прерывание операции",ПараметрыДрайвера.Отладка);
		ВыполнениеКоманды = ОжиданиеОтветаТерминала(ОбъектДрайвера,Истина,ПараметрыДрайвера);
		СообщитьОтладка("Получен ответ на запрос на прерывание операции: "+СтруктураВТекст(ВыполнениеКоманды),ПараметрыДрайвера.Отладка);
		Если  ВыполнениеКоманды.method = "Ожидание" Тогда
			ВыполнениеКоманды = Новый Структура("error,errorDescription",true,"Не получен ответ терминала!");
		КонецЕсли;
		//иначе должен вернуться либо результат операции либо результат отмены операции
		
	КонецЕсли;
	
	СообщитьОтладка("Возвращаю выполнение команды: "+СтруктураВТекст(ВыполнениеКоманды),ПараметрыДрайвера.Отладка);
	Возврат ВыполнениеКоманды;
	
КонецФункции

&НаКлиенте
Функция ПрочитатьОтветТерминала(ОбъектДрайвера,ПараметрыДрайвера)
	Стр = "";
	ОтветСтр = "";
	Попытка
		ДвоичныеДанные = ОбъектДрайвера.Read();
		ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанные);
		Пока ЧтениеДанных.ЧтениеЗавершено=Ложь Цикл
			//ОтветСтр = ОтветСтр + ЧтениеДанных.ПрочитатьСимволы(16,КодировкаТекста.UTF8);
			Стр = ЧтениеДанных.ПрочитатьСтроку();
			Если ПараметрыДрайвера.Отладка Тогда
				Сообщить(""+Стр);
			КонецЕсли;
			//sa ### из-за спецсимволов в слип-чеке не преобразовывается в ДЖСОН
			//будем пропускать строку слип-чека, вся нужная информация есть в структуре.
			Если (Лев(СокрЛП(Стр),9) = """receipt""") Тогда
				Продолжить;
			КонецЕсли;
			ОтветСтр = ОтветСтр + Строка(Стр);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ОтветСтр) И СокрЛП(ОтветСтр) <> Символ(00) Тогда
			ОтветТерминала = ОбщегоНазначенияКлиент.ТекстДЖСОНвСтруктуру(ОтветСтр);
		Иначе
			//пока данный нет, ожидаем
			ОтветТерминала = Новый Структура("error,errorDescription,method",false,"","Ожидание");
			
			Возврат ОтветТерминала;
		КонецЕсли;
	Исключение
		ОтветТерминала = Новый Структура("error,errorDescription",true,ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ОтветТерминала;
КонецФункции

&НаКлиенте
Функция ИнициализироватьКомпоненту()
	Если ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверПриватбанкTCPClient", "SD849", ТипВнешнейКомпоненты.Native) Тогда
		ОбъектДрайвера = Новый("AddIn.SD849.TcpClient");
	Иначе
		#Если ТонкийКлиент Тогда
			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверПриватбанкTCPClient");
		#КонецЕсли
		Если ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверПриватбанкTCPClient", "SD849", ТипВнешнейКомпоненты.Native) Тогда
			ОбъектДрайвера = Новый("AddIn.SD849.TcpClient");
		КонецЕсли;
	КонецЕсли;
	Если ОбъектДрайвера=Неопределено Тогда
		Сообщить("Ошибка подключения компоненты!");
		Возврат Неопределено;
	КонецЕсли;
	КомпонентаКлиент = ОбъектДрайвера;
	Возврат ОбъектДрайвера;	
КонецФункции


&НаКлиенте
Функция ПродажаДЖСОН(ПараметрыПлатежа)
	РезультатОплаты = Новый Структура("Успешно,Сумма,ОписаниеОшибки,Банк,НомерКарты,КодRRN,НомерЧека,КодАвторизации,ДействительнаДо,Клиент,Эмитент,ТерминалИД,МерчантИД,СлипЧек",Ложь,0);
	
	ПараметрыДрайвера = ПараметрыПлатежа.ПараметрыДрайвера;
	
	//Из-за того что библиотека работающая с TCP - является ДЕМО, у нее есть ограничение на количество обрабатываемых символов.
	//Около 30 кб. Поэтому будем переинициализировать компоненту перед каждой операцией заново.
	ОбъектДрайвера = ИнициализироватьКомпоненту();
	Если ОбъектДрайвера = Неопределено Тогда
		РезультатОплаты.ОписаниеОшибки = "Не вдалося ініціалізувати драйвер банківського терміналу";
		Возврат РезультатОплаты;
	КонецЕсли;
	
	Успешно = ИнициализироватьУстройство(ОбъектДрайвера,ПараметрыДрайвера);
	Если Не Успешно Тогда
		РезультатОплаты.ОписаниеОшибки = ПараметрыДрайвера.ОписаниеОшибки;
		Возврат РезультатОплаты;
	КонецЕсли;
	
	СуммаПлатежа = СтрЗаменить(ПараметрыПлатежа.Сумма,Символы.НПП,"");
	//СуммаПлатежа = 0.5;
	
	КомандаОплаты = "{""method"":""Purchase"",""step"": 0,""params"": {""amount"": """+СуммаПлатежа+""",""discount"": """",""merchantId"": ""0"",""facepay"": ""false""}}";
	
	ОтветТерминала = ВыполнитьКомандуТерминала(ОбъектДрайвера,КомандаОплаты,ПараметрыДрайвера);
	ОбъектДрайвера.Close();
	ОбъектДрайвера = Неопределено;
	Если Не ОтветТерминала.Успешно Тогда
		РезультатОплаты.Вставить("ОписаниеОшибки", ОтветТерминала.ОписаниеОшибки);
		СообщитьОтладка("ОШИБКА Purchase: "+ОтветТерминала.ОписаниеОшибки,ПараметрыДрайвера.Отладка);
		Возврат РезультатОплаты;
	КонецЕсли;
	
	//2024-11-13 sa Еше может быть вариант что устройство занято
	Если ТипЗнч(ОтветТерминала.СтруктураОтвета) = Тип("Структура") И ОтветТерминала.СтруктураОтвета.Свойство("method") И ОтветТерминала.СтруктураОтвета.method = "ServiceMessage" Тогда
		Если ОтветТерминала.СтруктураОтвета.params.msgType = "deviceBusy" Тогда
			РезультатОплаты.Вставить("ОписаниеОшибки","Устройство занято");
			Возврат РезультатОплаты;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураОтвета = ОтветТерминала.СтруктураОтвета;
	РезультатыПлатежа = СтруктураОтвета.params;	
	РезультатОплаты.Успешно = Не СтруктураОтвета.error;
	РезультатОплаты.Сумма = СуммаПлатежа;
	РезультатОплаты.Банк = РезультатыПлатежа.bankAcquirer;
	РезультатОплаты.НомерКарты = РезультатыПлатежа.pan;
	РезультатОплаты.КодRRN = РезультатыПлатежа.rrn;
	РезультатОплаты.НомерЧека = РезультатыПлатежа.invoiceNumber;
	РезультатОплаты.КодАвторизации = РезультатыПлатежа.approvalCode;
	РезультатОплаты.ДействительнаДо = РезультатыПлатежа.cardExpiryDate;
	РезультатОплаты.Клиент = РезультатыПлатежа.cardHolderName;
	РезультатОплаты.Эмитент = РезультатыПлатежа.issuerName;
	РезультатОплаты.ТерминалИД = РезультатыПлатежа.terminalId;
	РезультатОплаты.МерчантИД = РезультатыПлатежа.merchant;
	 
	
	РезультатОплаты.СлипЧек = ""+РезультатОплаты.Банк + Символы.ПС + 
			  Символы.ПС +
			  Строка(РезультатОплаты.Эмитент) + Символы.ПС +
			  //"ДЕЙСТВ. ДО: " + Прав(ДействительнаДо,2) + "/" + Лев(ДействительнаДо,2) + Символы.ПС +
			  Строка(РезультатОплаты.НомерКарты) + Символы.ПС +
			  "КОД АВТОРИЗАЦИИ: " + РезультатОплаты.КодАвторизации + Символы.ПС +
			  "RRN: " + РезультатОплаты.КодRRN + Символы.ПС +
			  "СУММА: " + СТРОКА(СуммаПлатежа) + " ГРН" + Символы.ПС + Символы.ПС +
			  "КЛИЕНТ: " + РезультатОплаты.Клиент + Символы.ПС+
			  "МЕРЧАНТ ID: " + РезультатОплаты.МерчантИД + Символы.ПС+
			  "ТЕРМИНАЛ ID: " + РезультатОплаты.ТерминалИД;
			  
	
	Возврат РезультатОплаты;
КонецФункции // ПродажаДЖСОН()

&НаКлиенте
Функция ВозвратДЖСОН(ПараметрыПлатежа)
	РезультатОплаты = Новый Структура("Успешно,Сумма,ОписаниеОшибки,Банк,НомерКарты,КодRRN,НомерЧека,КодАвторизации,ДействительнаДо,Клиент,Эмитент,ТерминалИД,МерчантИД,СлипЧек",Ложь,0);
	
	ПараметрыДрайвера = ПараметрыПлатежа.ПараметрыДрайвера;
	
	ОбъектДрайвера = ИнициализироватьКомпоненту();
	Если ОбъектДрайвера = Неопределено Тогда
		РезультатОплаты.ОписаниеОшибки = "Не вдалося ініціалізувати драйвер банківського терміналу";
		Возврат РезультатОплаты;
	КонецЕсли;
	
	Успешно = ИнициализироватьУстройство(ОбъектДрайвера,ПараметрыДрайвера);
	Если Не Успешно Тогда
		РезультатОплаты.ОписаниеОшибки = ПараметрыДрайвера.ОписаниеОшибки;
		Возврат РезультатОплаты;
	КонецЕсли;
	
	СуммаПлатежа = СтрЗаменить(ПараметрыПлатежа.Сумма,Символы.НПП,"");
	//СуммаПлатежа = 0.5;
	НомерТранзакции = ПараметрыПлатежа.НомерТранзакции;
	КомандаВозврата = "{""method"":""Refund"",""step"": 0,""params"": {""amount"": """+СуммаПлатежа+""",""discount"": """",""merchantId"": ""0"",""rrn"": """+НомерТранзакции+"""}}";

	ОтветТерминала = ВыполнитьКомандуТерминала(ОбъектДрайвера,КомандаВозврата,ПараметрыДрайвера);
	ОбъектДрайвера.Close();
	ОбъектДрайвера = Неопределено;
	Если Не ОтветТерминала.Успешно Тогда
		РезультатОплаты.Вставить("ОписаниеОшибки", ОтветТерминала.ОписаниеОшибки);
		СообщитьОтладка("ОШИБКА Refund: "+ОтветТерминала.ОписаниеОшибки,ПараметрыДрайвера.Отладка);
		Возврат РезультатОплаты;
	КонецЕсли;
	
	СтруктураОтвета = ОтветТерминала.СтруктураОтвета;
	
	СтруктураОтвета = ОтветТерминала.СтруктураОтвета;
	РезультатыПлатежа = СтруктураОтвета.params;	
	РезультатОплаты.Успешно = Не СтруктураОтвета.error;
	РезультатОплаты.Сумма = СуммаПлатежа;
	РезультатОплаты.Банк = РезультатыПлатежа.bankAcquirer;
	РезультатОплаты.НомерКарты = РезультатыПлатежа.pan;
	РезультатОплаты.КодRRN = РезультатыПлатежа.rrn;
	РезультатОплаты.НомерЧека = РезультатыПлатежа.invoiceNumber;
	РезультатОплаты.КодАвторизации = РезультатыПлатежа.approvalCode;
	РезультатОплаты.ДействительнаДо = РезультатыПлатежа.cardExpiryDate;
	РезультатОплаты.Клиент = РезультатыПлатежа.cardHolderName;
	РезультатОплаты.Эмитент = РезультатыПлатежа.issuerName;
	РезультатОплаты.ТерминалИД = РезультатыПлатежа.terminalId;
	РезультатОплаты.МерчантИД = РезультатыПлатежа.merchant;
	 
	
	РезультатОплаты.СлипЧек = ""+РезультатОплаты.Банк + Символы.ПС + 
			  Символы.ПС +
			  Строка(РезультатОплаты.Эмитент) + Символы.ПС +
			  //"ДЕЙСТВ. ДО: " + Прав(ДействительнаДо,2) + "/" + Лев(ДействительнаДо,2) + Символы.ПС +
			  Строка(РезультатОплаты.НомерКарты) + Символы.ПС +
			  "КОД АВТОРИЗАЦИИ: " + РезультатОплаты.КодАвторизации + Символы.ПС +
			  "RRN: " + РезультатОплаты.КодRRN + Символы.ПС +
			  "СУММА: " + СТРОКА(СуммаПлатежа) + " ГРН" + Символы.ПС + Символы.ПС +
			  "КЛИЕНТ: " + РезультатОплаты.Клиент + Символы.ПС+
			  "МЕРЧАНТ ID: " + РезультатОплаты.МерчантИД + Символы.ПС+
			  "ТЕРМИНАЛ ID: " + РезультатОплаты.ТерминалИД;
			  
	
	Возврат РезультатОплаты;
КонецФункции // ПродажаДЖСОН()

&НаКлиенте
Функция ПреобразоватьВХекс(Знач Число_)
	Если Число_ = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	СимволыХекс = "0123456789ABCDEF";
	ЦелаяЧасть = Цел(Число_/16);
	ДробнаяЧасть = Число_%16;
	СимволХекс_ = Сред(СимволыХекс,ЦелаяЧасть+1,1) + Сред(СимволыХекс,ДробнаяЧасть+1,1);
	
	
	Возврат СимволХекс_;
	
КонецФункции

&НаКлиенте
Процедура Пауза(ЗадержкаВМиллисекундах,Прогресс = 100)
	ТаймерМС = ТекущаяУниверсальнаяДатаВМиллисекундах() + ЗадержкаВМиллисекундах;
	Пока ТаймерМС > ТекущаяУниверсальнаяДатаВМиллисекундах() Цикл
		Если Прогресс > 0 Тогда
        	Состояние("Ожидание банковского терминала",Прогресс);
		КонецЕсли;
    КонецЦикла;		
КонецПроцедуры
