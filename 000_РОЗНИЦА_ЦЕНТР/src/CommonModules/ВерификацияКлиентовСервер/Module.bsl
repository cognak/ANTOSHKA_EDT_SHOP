Функция УстановитьСобытиеВерификации(Контрагент, ИнформационнаяКарта, СобытиеВерификации, ПериодВерификации = '00010101')	Экспорт

	Выполнено = Ложь;
	ТранзакцияНачата = Ложь;

	Если ЗначениеЗаполнено(Контрагент) Тогда

		УстановитьПривилегированныйРежим(Истина);

		Если НЕ ТранзакцияАктивна() Тогда

			ТранзакцияНачата = Истина;
			НачатьТранзакцию();

		КонецЕсли;

		Попытка

			МенеджерЗаписи = РегистрыСведений.ВерификацияКлиентовСобытия.СоздатьМенеджерЗаписи();

			Период = ?(ПериодВерификации = '00010101', ТекущаяДатаСеанса(), ПериодВерификации);

		//	Выполняем "базовую" запись, как указано в параметрах.
			МенеджерЗаписи.Период     = Период;
			МенеджерЗаписи.Контрагент = Контрагент;
			МенеджерЗаписи.Нормальный = НЕ СобытиеВерификации = Перечисления.СобытияВерификацииПокупателей.ОтказПокупателя;
			МенеджерЗаписи.Событие    = СобытиеВерификации;
			МенеджерЗаписи.ИнформационнаяКарта = ИнформационнаяКарта;
			МенеджерЗаписи.ДатаИзменения = ТекущаяДата();

			МенеджерЗаписи.Записать();

			Если СобытиеВерификации = Перечисления.СобытияВерификацииПокупателей.Выполнено Тогда

				ОчиститьОтказыОтВерификации(Контрагент, ТекущаяДатаСеанса());

			//	Теперь нужно сбросить назначенную клиенту верификацию... проверять не будем
				МенеджерЗаписи = РегистрыСведений.ВерификацияКлиентовНазначение.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период     = Период;
				МенеджерЗаписи.Контрагент = Контрагент;
				МенеджерЗаписи.ВидВерификации = Перечисления.ВидыВерификацииПокупателей.Выполнена;

				МенеджерЗаписи.Записать();

			КонецЕсли;

		//	---------------------------------------------------------------------------------------

			Если ТранзакцияНачата Тогда

				ЗафиксироватьТранзакцию();

			КонецЕсли;

			Выполнено = Истина;

		Исключение

			Если ТранзакцияНачата Тогда

				ОтменитьТранзакцию();

			КонецЕсли;

		КонецПопытки;

	КонецЕсли;

	Возврат Выполнено;

КонецФункции

//	LNK 18.12.2017 10:43:13
Процедура ОчиститьОтказыОтВерификации(Контрагент, Период)	Экспорт

//	Возможно, клиент когда-то отказывался от верификации... нужно "деактивировать" такие записи,
//	ведь он сейчас прошёл верификацию и все отказы мы можем забыть!
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаРегистра.Период КАК Период,
	|	ТаблицаРегистра.Контрагент КАК Контрагент,
	|	ТаблицаРегистра.Нормальный КАК Нормальный,
	|	ТаблицаРегистра.Событие КАК Событие,
	|	ТаблицаРегистра.ИнформационнаяКарта КАК ИнформационнаяКарта,
	|	ТаблицаРегистра.Автор КАК Автор,
	|	ТаблицаРегистра.УзелСоздания КАК УзелСоздания
	|ИЗ
	|	РегистрСведений.ВерификацияКлиентовСобытия КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Контрагент = &Контрагент
	|	И НЕ ТаблицаРегистра.Нормальный
	|	И ТаблицаРегистра.Период <= &Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период"
	);
	Запрос.УстановитьПараметр("Период"    , ?(Период = '00010101', ТекущаяДатаСеанса(), Период));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	ВыборкаСобытия = Запрос.Выполнить().Выбрать();

	НаборЗаписей = РегистрыСведений.ВерификацияКлиентовСобытия.СоздатьНаборЗаписей();
	
	Пока ВыборкаСобытия.Следующий() Цикл

		НачатьТранзакцию();

		Попытка

			НаборЗаписей.Очистить();
			НаборЗаписей.Отбор.Период.Установить(ВыборкаСобытия.Период);
			НаборЗаписей.Отбор.Контрагент.Установить(ВыборкаСобытия.Контрагент);
			НаборЗаписей.Отбор.Нормальный.Установить(ВыборкаСобытия.Нормальный);

		//	1. Очищаем набор в разрезе измерения "Нормальный" = Ложь
			НаборЗаписей.Записать();

		//	2. Формируем набор в разрезе измерения "Нормальный" = Да
			НаборЗаписей.Отбор.Нормальный.Установить(Истина);
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, ВыборкаСобытия);
			ЗаписьНабора.Нормальный    = Истина;	//	установили флаг "нормальности".
			ЗаписьНабора.Количество    = 0;
			ЗаписьНабора.ДатаИзменения = ТекущаяДата();

			НаборЗаписей.Записать();

			ЗафиксироватьТранзакцию();

		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ОтменитьТранзакцию();

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

Функция ОтправитьКодПодтверждения(НомерТелефона, ДополнительныеПараметры, СообщитьОбОшибке = Ложь)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	КодКлиента  = Формат(ОбщегоНазначенияКлиентСервер.RANDOM(1, 9999), "ЧЦ=4; ЧВН=; ЧГ=");
	
	ДанныеОтправителя = ОбщегоНазначенияКлиентСервер.СериализоватьJSON(
		Новый Структура(
			"ЭлементСтруктуры, Магазин, ИмяКомпьютера, Контрагент, Пользователь"
			, ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().ЭлементСтруктуры
			, ПараметрыСеанса.ТекущийМагазин
			, ДополнительныеПараметры.ИмяКомпьютера
			, ДополнительныеПараметры.Контрагент
			, ПараметрыСеанса.ТекущийПользователь
		)
	);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	
	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда
		
		ЧтениеJSON.УстановитьСтроку(СервисыСервер.SendSMS(ОбщегоНазначенияКлиентСервер.РеквизитПеречисления(Перечисления.ВидыСообщений.SMS)
				, НомерТелефона
				, КодКлиента
				, Истина
				, ДанныеОтправителя
			)
		);
		
	Иначе
		
		Подключение = СервисыСервер.Подключение("RetailPack", СервисыСервер.Таймаут("RetailPack.SendSMS.Timeout"));

		ЧтениеJSON.УстановитьСтроку(Подключение.SendSMS(ОбщегоНазначенияКлиентСервер.РеквизитПеречисления(Перечисления.ВидыСообщений.SMS)
				, НомерТелефона
				, КодКлиента
				, Истина
				, ДанныеОтправителя
			)
		);
		
	КонецЕсли;
	
	Результат = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();

	Если Результат.Ошибка И СообщитьОбОшибке Тогда

		Сообщить(Результат.ОписаниеОшибки);

	КонецЕсли;

	Возврат НЕ Результат.Ошибка;

КонецФункции

Функция ПолучитьКодПодтверждения(НомерТелефона, СообщитьОбОшибке = Ложь)	Экспорт

	ЧтениеJSON = Новый ЧтениеJSON;
	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда
		
		ЧтениеJSON.УстановитьСтроку(СервисыСервер.GetConfirmation(НомерТелефона));
		
	Иначе 
		
		Подключение = СервисыСервер.Подключение("RetailPack");
		ЧтениеJSON.УстановитьСтроку(Подключение.GetConfirmation(НомерТелефона));
		
	КонецЕсли;
	
	Результат = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();

	Если НЕ Результат.Указан И СообщитьОбОшибке Тогда

		Сообщить("Ошибка! Код клиента не обнаружен.");

	КонецЕсли;

	Возврат Результат;
	
КонецФункции // ПолучитьКодПодтверждения()

Функция ЗаписатьВерифицированныеДанныеКонтрагента(ДанныеКонтрагента)	Экспорт

	Результат = Новый Структура("Выполнено, ТекстОшибки", Ложь, "");

	УстановитьПривилегированныйРежим(Истина);

	НачатьТранзакцию();

	Попытка

		Если НЕ ДанныеКонтрагента.Контрагент.Пустая() Тогда	//	LNK 05.02.2019 15:00:50

			КонтрагентОбъект = ДанныеКонтрагента.Контрагент.ПолучитьОбъект();

			Если ПустаяСтрока(КонтрагентОбъект.IDN) Тогда

				КонтрагентОбъект.IDN = КонтрагентОбъект.Код;

			КонецЕсли;

		Иначе

			КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
			КонтрагентОбъект.УстановитьНовыйКод();
			КонтрагентОбъект.IDN = КонтрагентОбъект.Код;
			КонтрагентОбъект.Родитель = Справочники.Контрагенты.Покупатели;

			КонтрагентОбъект.УстановитьСсылкуНового(Справочники.Контрагенты.ПолучитьСсылку());
			ДанныеКонтрагента.Контрагент = КонтрагентОбъект.ПолучитьСсылкуНового();

		КонецЕсли;

		КонтрагентОбъект.Покупатель      = Истина;
		КонтрагентОбъект.ПометкаУдаления = Ложь;
		КонтрагентОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		КонтрагентОбъект.Пол = ДанныеКонтрагента.Пол;
	//	Выполним минимальную нормализацию наименования..
		КонтрагентОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПривестиНаименование(
			СокрЛП(ДанныеКонтрагента.Фамилия) + " " + СокрЛП(ДанныеКонтрагента.Имя) + " " + СокрЛП(ДанныеКонтрагента.Отчество)
			, Ложь, Истина
		);
		КонтрагентОбъект.НаименованиеПолное = КонтрагентОбъект.Наименование;

		ДатаСеансаТекущая = ТекущаяДатаСеанса();

		СтруктураЗаписи = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(ДатаСеансаТекущая, Новый Структура("ФизЛицо", ДанныеКонтрагента.Контрагент));

		Если 	НЕ СтруктураЗаписи.Фамилия = СокрЛП(ДанныеКонтрагента.Фамилия)
			ИЛИ НЕ СтруктураЗаписи.Отчество = СокрЛП(ДанныеКонтрагента.Отчество)
			ИЛИ НЕ СтруктураЗаписи.Имя = СокрЛП(ДанныеКонтрагента.Имя) Тогда

			МенеджерЗаписи = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();

			МенеджерЗаписи.ФизЛицо  = ДанныеКонтрагента.Контрагент;
			МенеджерЗаписи.Период   = ДатаСеансаТекущая;
			МенеджерЗаписи.Фамилия  = СокрЛП(ДанныеКонтрагента.Фамилия);
			МенеджерЗаписи.Имя      = СокрЛП(ДанныеКонтрагента.Имя);
			МенеджерЗаписи.Отчество = СокрЛП(ДанныеКонтрагента.Отчество);

			МенеджерЗаписи.Записать(Истина);

		КонецЕсли;

	//	ТЕЛЕФОН
	//	---------------------------------------------------------------------------------------
		СтрокаКонтакта = ПолучитьСтрокуКонтакта(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, КонтрагентОбъект.КонтактнаяИнформация);

		Если ПустаяСтрока(ДанныеКонтрагента.НомерТелефона) Тогда

			КонтрагентОбъект.КонтактнаяИнформация.Удалить(КонтрагентОбъект.КонтактнаяИнформация.Индекс(СтрокаКонтакта));

		Иначе

			СтрокаКонтакта.НомерТелефона = СокрЛП(ДанныеКонтрагента.НомерТелефона);
			СтрокаКонтакта.ЗначенияПолей = СформироватьДанныеТелефона(СтрокаКонтакта.НомерТелефона, СтрокаКонтакта.НомерТелефонаБезКодов);
			СтрокаКонтакта.Представление = СокрЛП(СтрокаКонтакта.НомерТелефона);

		КонецЕсли;

		Если ДанныеКонтрагента.РасширенныеДанные Тогда

			КонтрагентОбъект.ДатаРождения = ДанныеКонтрагента.ДатаРождения;

		//	ЭЕКТРОПОЧТА
		//	---------------------------------------------------------------------------------------
			СтрокаКонтакта = ПолучитьСтрокуКонтакта(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, КонтрагентОбъект.КонтактнаяИнформация);

			Если ПустаяСтрока(ДанныеКонтрагента.Электропочта) Тогда

				КонтрагентОбъект.КонтактнаяИнформация.Удалить(КонтрагентОбъект.КонтактнаяИнформация.Индекс(СтрокаКонтакта));

			Иначе

				СтрокаКонтакта.Представление = СокрЛП(ДанныеКонтрагента.Электропочта);
				СтрокаКонтакта.АдресЭП       = СокрЛП(ДанныеКонтрагента.Электропочта);

			КонецЕсли;

			КонтрагентОбъект.Дети.Загрузить(ДанныеКонтрагента.Дети);

		КонецЕсли;

	//	---------------------------------------------------------------------------------------

		КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
		КонтрагентОбъект.Записать();

	//	---------------------------------------------------------------------------------------

		ЗаписатьДанныеИнформационныхКартКонтрагента(ДанныеКонтрагента);

		УстановитьСобытиеВерификации(ДанныеКонтрагента.Контрагент, ДанныеКонтрагента.ИнформационнаяКарта, Перечисления.СобытияВерификацииПокупателей.Выполнено);

		Результат.Выполнено = Истина;

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();
		ТекстОшибки = ОписаниеОшибки();
		ВызватьИсключение "ОШИБКА СИСТЕМЫ:" + Символы.ПС + ТекстОшибки;

	КонецПопытки;

	Возврат Результат;

КонецФункции // ЗаписатьВерифицированныеДанныеКонтрагента()

//	LNK 08.11.2017 16:21:38
Процедура ЗаписатьДанныеИнформационныхКартКонтрагента(ДанныеКонтрагента)

	Попытка
	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСправочник.Ссылка КАК Карта,
		|	ТаблицаСправочник.ВидДисконтнойКарты КАК ВидДисконтнойКарты
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ТаблицаСправочник
		|ГДЕ
		|	(ТаблицаСправочник.ВладелецКарты = &Контрагент
		|			ИЛИ ТаблицаСправочник.Ссылка = &ИнформационнаяКарта)
		|	И (ТаблицаСправочник.ВладелецКарты ССЫЛКА Справочник.Контрагенты
		|			ИЛИ ТаблицаСправочник.ВладелецКарты В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
		|				И ТаблицаСправочник.ВидДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.ВидыДисконтныхКарт.ПредварительныеКартыЛояльности))"
		);
		Запрос.УстановитьПараметр("Контрагент", ДанныеКонтрагента.Контрагент);
		Запрос.УстановитьПараметр("ИнформационнаяКарта", ДанныеКонтрагента.ИнформационнаяКарта);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл

			КартаОбъект = Выборка.Карта.ПолучитьОбъект();

			КартаОбъект.ДатаПоследнегоОпроса = ТекущаяДатаСеанса();

			ВыдачаКарты = Ложь;

			Если Выборка.Карта = ДанныеКонтрагента.ИнформационнаяКарта И Выборка.ВидДисконтнойКарты = Справочники.ВидыДисконтныхКарт.ПредварительныеКартыЛояльности Тогда

				КартаОбъект.ВладелецКарты = ДанныеКонтрагента.Контрагент;
				КартаОбъект.ВидДисконтнойКарты = Справочники.ВидыДисконтныхКарт.НакопительныеКарты;
				ВыдачаКарты = Истина;

			//	В данном случае - конкретно момент выдачи (или активации) карты дисконта! Фиксируем.
				КартаОбъект.Магазин = ДанныеКонтрагента.Магазин;
				КартаОбъект.ДатаОткрытия = ТекущаяДата();

			КонецЕсли;

			КартаОбъект.ОбменДанными.Загрузка = Истина;
			КартаОбъект.Записать();

			Если ВыдачаКарты Тогда

				НазначитьОбработкуВыданнойКарты(Выборка.Карта);

			КонецЕсли;

		КонецЦикла;
	
	Исключение

		Отладочная = 22;	// ничего не сообщаем.

	КонецПопытки;

КонецПроцедуры

//	LNK 13.02.2019 11:18:22
Процедура УстановитьДанныеИнформационнойКарты(СтрокаТабличнойЧасти)	Экспорт

	КартаОбъект = СтрокаТабличнойЧасти.ИнформационнаяКарта.ПолучитьОбъект();

	КартаОбъект.Магазин = СтрокаТабличнойЧасти.Магазин;

	Если НЕ СтрокаТабличнойЧасти.ДатаВыдачиКарты = '00010101' Тогда

		КартаОбъект.ДатаОткрытия = СтрокаТабличнойЧасти.ДатаВыдачиКарты;
		КартаОбъект.ДатаПоследнегоОпроса = СтрокаТабличнойЧасти.ДатаВыдачиКарты;

	Иначе

		КартаОбъект.ДатаПоследнегоОпроса = ТекущаяДатаСеанса();

	КонецЕсли;

	ВыдачаКарты = Ложь;

	Если СтрокаТабличнойЧасти.ВидДисконтнойКарты = Справочники.ВидыДисконтныхКарт.ПредварительныеКартыЛояльности Тогда

		КартаОбъект.ВладелецКарты = СтрокаТабличнойЧасти.Контрагент;
		КартаОбъект.ВидДисконтнойКарты = Справочники.ВидыДисконтныхКарт.НакопительныеКарты;
		ВыдачаКарты = Истина;

		Если КартаОбъект.ДатаОткрытия = '00010101' Тогда

			КартаОбъект.ДатаОткрытия = ТекущаяДата();

		КонецЕсли;

	КонецЕсли;

	КартаОбъект.ОбменДанными.Загрузка = Истина;
	КартаОбъект.Записать();

	Если ВыдачаКарты Тогда

		НазначитьОбработкуВыданнойКарты(СтрокаТабличнойЧасти.ИнформационнаяКарта);

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьСтрокуКонтакта(Вид, КонтактнаяИнформация)

	СтрокаКонтакты = КонтактнаяИнформация.Найти(Вид, "Вид");

	Если СтрокаКонтакты = Неопределено Тогда

		СтрокаКонтакты = КонтактнаяИнформация.Добавить();
		СтрокаКонтакты.Вид = Вид;
		СтрокаКонтакты.Тип = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Вид, "Тип");

	КонецЕсли;

	Возврат СтрокаКонтакты;

КонецФункции

Функция СформироватьДанныеТелефона(ПредставлениеТефона, НомерТелефонаБезКодов)	Экспорт

	Если ПустаяСтрока(ПредставлениеТефона) Тогда
		
		НомерТелефонаБезКодов = "";
		Возврат "";

	КонецЕсли;

	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Комментарий = "Данные верификации";
	
	Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));

	ДанныеТелефона = ОбщегоНазначенияКлиентСервер.lx_FillValueList(, ПредставлениеТефона,, " ", 5, Ложь, Новый ОписаниеТипов("Строка"));

	Результат.Состав.КодСтраны  = СтрЗаменить(СокрЛП(ДанныеТелефона[0]), "+", "");
	Результат.Состав.КодГорода  = СокрЛП(ДанныеТелефона[1]);
	Результат.Состав.Номер      = СтрЗаменить(СокрЛП(ДанныеТелефона[2]) + СокрЛП(ДанныеТелефона[3]) + СокрЛП(ДанныеТелефона[4]), " ", "");
	Результат.Состав.Добавочный = "";

//	Представление
	Результат.Представление = КонтактнаяИнформацияСлужебный.ПредставлениеТелефона(Результат.Состав);
//	Только для отображения в таблице этой формы
	ПредставлениеТефона   = Результат.Представление;
	НомерТелефонаБезКодов = Результат.Состав.Номер;

	Возврат КонтактнаяИнформацияСлужебный.СериализацияКонтактнойИнформации(Результат);

КонецФункции

//	LNK 20.10.2017 15:29:52
Функция ПрименитьСкидкуДисконтойКарты(Контрагент, Магазин, ДатаСреза = '00010101')	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если РозничныеПродажиСерверПовтИсп.РазрешитьОтказВерификацииКонтрагента(Магазин, ДатаСреза) Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаВерификаций.Количество КАК Количество
		|ИЗ
		|	РегистрСведений.ВерификацияКлиентовСобытия.СрезПоследних(
		|			,
		|			Контрагент = &Контрагент
		|				И НЕ Нормальный) КАК ТаблицаВерификаций"
		);
		Запрос.УстановитьПараметр("Контрагент"	, Контрагент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда

		//		Отказов клиента было не более одного!
				Применить = НЕ Выборка.Количество > 1;

		Иначе	Применить = Истина;

		КонецЕсли;

	Иначе

		Применить = Истина;

	КонецЕсли;

	Возврат Применить;

КонецФункции

//	LNK 05.03.2019 12:23:22
Процедура НазначитьОбработкуВыданнойКарты(ИнформационнаяКарта)

	ВнешниеИсточникиСобытия.УстановитьОбъектДляОбработки("", "КАРТА_ВЫДАНА", ИнформационнаяКарта);

КонецПроцедуры // НазначитьОбработкуВыданнойКарты()

//	LNK 05.03.2019 14:49:44
Процедура ВыполнитьОбработкуВыданныхКарт()	Экспорт

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Возврат;

	КонецЕсли;

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаРегистра.Период КАК Период,
	|	ТаблицаРегистра.Магазин КАК Магазин,
	|	ТаблицаРегистра.Индекс КАК Индекс,
	|	Фильтр.Ссылка КАК Объект,
	|	Фильтр.ВладелецКарты КАК ВладелецКарты,
	|	Фильтр.Код КАК КлючПорядка
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	РегистрСведений.ОбъектыДляОбработки КАК ТаблицаРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК Фильтр
	|		ПО ТаблицаРегистра.Объект = Фильтр.Ссылка
	|ГДЕ
	|	ТаблицаРегистра.ДействиеКоманда = ""КАРТА_ВЫДАНА""
	|	И ТаблицаРегистра.Объект ССЫЛКА Справочник.ИнформационныеКарты
	|	И Фильтр.ВидДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.ВидыДисконтныхКарт.НакопительныеКарты)
	|	И Фильтр.ВладелецКарты ССЫЛКА Справочник.Контрагенты
	|	И НЕ Фильтр.ВладелецКарты = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Источник.Объект КАК ИнформационнаяКарта,
	|	ТаблицаПродажи.Период КАК Период,
	|	ТаблицаПродажи.Регистратор КАК Регистратор,
	|	Источник.ВладелецКарты КАК ВладелецКарты,
	|	Источник.КлючПорядка КАК КлючПорядка
	|ИЗ
	|	Источник КАК Источник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоДисконтнымКартам КАК ТаблицаПродажи
	|		ПО Источник.Объект = ТаблицаПродажи.ДисконтнаяКарта
	|			И (ТаблицаПродажи.ВладелецДисконтнойКарты В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|				И ТаблицаПродажи.Регистратор ССЫЛКА Документ.ВводОстатковПоНакопительнымСкидкам)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка,
	|	Период,
	|	Регистратор
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Регистратор)
	|ПО
	|	ИнформационнаяКарта"
	);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("СписокОбъектов", Новый Массив);
	
	КартыВыборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	НаборЗаписей = РегистрыНакопления.ПродажиПоДисконтнымКартам.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);
	ОбменДаннымиСервер.УстановитьВсехПолучателей(НаборЗаписей.ОбменДанными.Получатели, "ПоМагазину");

	Пока КартыВыборка.Следующий() Цикл

		Попытка
			
			ДеталиВыборка = КартыВыборка.Выбрать();

			Пока ДеталиВыборка.Следующий() Цикл

				НаборЗаписей.Очистить();
				НаборЗаписей.Отбор.Регистратор.Установить(ДеталиВыборка.Регистратор);

				НаборЗаписей.Прочитать();

				Для каждого ЗаписьНабора Из НаборЗаписей Цикл

					Если ЗаписьНабора.ДисконтнаяКарта = КартыВыборка.ИнформационнаяКарта И НЕ ЗначениеЗаполнено(ЗаписьНабора.ВладелецДисконтнойКарты) Тогда

						ЗаписьНабора.ВладелецДисконтнойКарты = КартыВыборка.ВладелецКарты;

					КонецЕсли;

				КонецЦикла;

				Если НаборЗаписей.Модифицированность() Тогда

					НаборЗаписей.Записать();

				КонецЕсли;

			КонецЦикла;

			Запрос.Параметры.СписокОбъектов.Добавить(КартыВыборка.ИнформационнаяКарта);
		
		Исключение

			ТекстОшибки = ОписаниеОшибки();

		КонецПопытки;

	КонецЦикла;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРегистра.Период КАК Период,
	|	ТаблицаРегистра.Магазин КАК Магазин,
	|	ТаблицаРегистра.Индекс КАК Индекс,
	|	ТаблицаРегистра.Объект КАК Объект
	|ИЗ
	|	Источник КАК ТаблицаРегистра
	|ГДЕ
	|	(ТаблицаРегистра.Объект В (&СписокОбъектов)
	|			ИЛИ НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕНЬ) < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ДЕНЬ, -1))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Магазин,
	|	Индекс"
	;

	ОчисткаВыборка = Запрос.Выполнить().Выбрать();

	НаборЗаписей = РегистрыСведений.ОбъектыДляОбработки.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);

	Пока ОчисткаВыборка.Следующий() Цикл

		НаборЗаписей.ОбменДанными.Получатели.Очистить();

		НаборЗаписей.Отбор.Период.Установить(ОчисткаВыборка.Период);
		НаборЗаписей.Отбор.Магазин.Установить(ОчисткаВыборка.Магазин);
		НаборЗаписей.Отбор.Индекс.Установить(ОчисткаВыборка.Индекс);

		НаборЗаписей.Записать();

	КонецЦикла;

КонецПроцедуры





