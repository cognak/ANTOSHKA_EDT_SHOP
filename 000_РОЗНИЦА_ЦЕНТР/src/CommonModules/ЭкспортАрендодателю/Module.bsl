#Область ПрограммныйИнтерфейс

//	LNK 22.09.2023 05:40:23
Процедура ВыполнитьОтложенныеПроцессы()	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаНазначено.Период КАК Период,
		|	ТаблицаНазначено.Магазин КАК Магазин,
		|	ТаблицаНазначено.Индекс КАК Индекс,
		|	ТаблицаНазначено.Объект КАК Объект,
		|	РАЗНОСТЬДАТ(ТаблицаНазначено.Период, &ТекущаяДата, МИНУТА) КАК ПрошлоМинут
		|ИЗ
		|	РегистрСведений.ОбъектыДляОбработки КАК ТаблицаНазначено
		|ГДЕ
		|	ТаблицаНазначено.ДействиеКоманда = ""ЭКСПОРТ_АРЕНДОДАТЕЛЮ""
		|	И ТаблицаНазначено.Объект ССЫЛКА Документ.КассовыйДень
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Объект
		|ИТОГИ
		|	МАКСИМУМ(ПрошлоМинут)
		|ПО
		|	Объект"
		);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда

			ОбъектыВыборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ОбъектыВыборка.Следующий() Цикл

			//	Выгружаем минимум через 30 минут после назначения для выгрузки!
				Если ОбъектыВыборка.ПрошлоМинут > 30 И ВнешниеИсточникиСобытия.ПередачаNavision(ОбъектыВыборка.Объект) = Истина Тогда

					ВыгрузитьКассовыйДень(ОбъектыВыборка.Объект);

				//	В случае ошибки в процедуре "ВыгрузитьКассовыйДень"
				//	должно вывываться исключение.. соответственно ниже по коду
				//	процесс не попадёт!

					ДеталиВыборка = ОбъектыВыборка.Выбрать();

					Пока ДеталиВыборка.Следующий() Цикл

						МенеджерЗаписи = РегистрыСведений.ОбъектыДляОбработки.СоздатьМенеджерЗаписи();
						ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДеталиВыборка);
						МенеджерЗаписи.Удалить();

					КонецЦикла;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 31.05.2023 15:45:20
Процедура ВыгрузитьКассовыйДень(ДокументСсылка)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда

		Возврат;

	КонецЕсли;

	ПараметрыСоединения = ЭкспортАрендодателю.ПараметрыСоединения();

	Если НЕ ПараметрыСоединения.Активен = Истина Тогда

		Возврат;

	КонецЕсли;

	Попытка

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаПродаж.ОтчетОРозничныхПродажах.КассоваяСмена.КассовыйДень.Дата КАК ДатаВыгрузки,
		|	ТаблицаПродаж.КассаККМ.НомерВМагазине КАК НомерКассы,
		|	ТаблицаПродаж.Дата КАК Период,
		|	ТаблицаПродаж.Ссылка КАК Регистратор,
		|	ТаблицаПродаж.Номер КАК НомерРегистратора,
		|	ТаблицаПродаж.ВидОперации КАК ВидОперации
		|ПОМЕСТИТЬ Фильтр
		|ИЗ
		|	Документ.ЧекККМ КАК ТаблицаПродаж
		|ГДЕ
		|	ТаблицаПродаж.ОтчетОРозничныхПродажах.КассоваяСмена.КассовыйДень = &ДокументСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Фильтр.ДатаВыгрузки КАК ДатаВыгрузки,
		|	Фильтр.Период КАК Период,
		|	Фильтр.Регистратор КАК Регистратор,
		|	Фильтр.НомерРегистратора КАК НомерРегистратора,
		|	Фильтр.НомерКассы КАК НомерКассы,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА Фильтр.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
		|			ТОГДА ""0""
		|		ИНАЧЕ ""1""
		|	КОНЕЦ КАК ВидОперации,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК ВидОплаты,
		|	ТаблицаТовары.Номенклатура.Код КАК ТоварКод,
		|	ТаблицаТовары.Номенклатура.Наименование КАК ТоварНаименование,
		|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Наименование, ""шт"") КАК ТоварЕдиница,
		|	(ТаблицаТовары.Сумма - ТаблицаТовары.СуммаНДС) / ТаблицаТовары.КоличествоУпаковок КАК Цена,
		|	ТаблицаТовары.КоличествоУпаковок КАК Количество,
		|	(ТаблицаТовары.Сумма - ТаблицаТовары.СуммаНДС) * ВЫБОР
		|		КОГДА Фильтр.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
		|			ТОГДА -1
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаТовары.Сумма КАК СуммаСНДС,
		|	ТаблицаТовары.СуммаНДС * ВЫБОР
		|		КОГДА Фильтр.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
		|			ТОГДА -1
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК СуммаНДС
		|ИЗ
		|	Фильтр КАК Фильтр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ТаблицаТовары
		|		ПО Фильтр.Регистратор = ТаблицаТовары.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаВыгрузки,
		|	Период,
		|	Регистратор,
		|	НомерКассы,
		|	НомерСтроки
		|ИТОГИ
		|	МАКСИМУМ(Период),
		|	МАКСИМУМ(НомерРегистратора),
		|	МАКСИМУМ(НомерКассы),
		|	СУММА(Сумма),
		|	СУММА(СуммаНДС)
		|ПО
		|	ДатаВыгрузки,
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Фильтр.Регистратор КАК Регистратор,
		|	ВЫБОР
		|		КОГДА ТаблицаОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.Наличные)
		|			ТОГДА ""Наличный""
		|		ИНАЧЕ ""Безналичный""
		|	КОНЕЦ КАК ВидОплаты,
		|	СУММА(ТаблицаОплата.Сумма) КАК Сумма
		|ИЗ
		|	Документ.ЧекККМ.Оплата КАК ТаблицаОплата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
		|		ПО ТаблицаОплата.Ссылка = Фильтр.Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ТаблицаОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.Наличные)
		|			ТОГДА ""Наличный""
		|		ИНАЧЕ ""Безналичный""
		|	КОНЕЦ,
		|	Фильтр.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Фильтр"
		);
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
		
		ЗаписьXML = Новый ЗаписьXML;

		РезультатыЗапроса = Запрос.ВыполнитьПакет();

		Если НЕ РезультатыЗапроса[1].Пустой() Тогда

			ОбщаяВыборка = РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ОбщаяВыборка.Следующий();	//	всегда один элемент

			ОплатыВыборка = РезультатыЗапроса[2].Выбрать();

			ФайлXML = Новый Файл(КаталогВременныхФайлов() + Формат(ОбщаяВыборка.ДатаВыгрузки, "ДФ=ггггММддЧЧмм") + ".xml");

			ЗаписьXML.ОткрытьФайл(ФайлXML.ПолноеИмя);
			ЗаписьXML.ЗаписатьОбъявлениеXML();

			ЗаписьXML.ЗаписатьНачалоЭлемента("ALLDATA");
			ЗаписьXML.ЗаписатьНачалоЭлемента("OBLECT");
			ЗаписьXML.ЗаписатьТекст(ПараметрыСоединения.OBLECT);
			ЗаписьXML.ЗаписатьКонецЭлемента();

			ЗаписьXML.ЗаписатьНачалоЭлемента("SALES");

			ЧекиВыборка = ОбщаяВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ЧекиВыборка.Следующий() Цикл

				ЗаписьXML.ЗаписатьНачалоЭлемента("SALE");

				ЗаписьXML.ЗаписатьНачалоЭлемента("PosNum");
				ЗаписьXML.ЗаписатьТекст(Формат(ЧекиВыборка.НомерКассы, "ЧДЦ=; ЧН=0; ЧГ="));
				ЗаписьXML.ЗаписатьКонецЭлемента();

				ЗаписьXML.ЗаписатьНачалоЭлемента("ChequeNum");
				ЗаписьXML.ЗаписатьТекст(Формат(ЧекиВыборка.Период, "ДФ=гг") + ЧекиВыборка.НомерРегистратора);
				ЗаписьXML.ЗаписатьКонецЭлемента();

				ЗаписьXML.ЗаписатьНачалоЭлемента("ChequeDate");
				ЗаписьXML.ЗаписатьТекст(Формат(ЧекиВыборка.Период, "ДФ='дд-ММ-ггг ЧЧ:мм:сс'"));
				ЗаписьXML.ЗаписатьКонецЭлемента();

				ТаблицаТовары = ТаблицаТоварыПоВидамОплат(ЧекиВыборка.Регистратор, ЧекиВыборка.Выбрать(), ОплатыВыборка, РезультатыЗапроса[1].Колонки, РезультатыЗапроса[2].Колонки);

				Для каждого СтрокаТовары Из ТаблицаТовары Цикл

					ЗаписьXML.ЗаписатьНачалоЭлемента("LINE");

						ЗаписьXML.ЗаписатьАтрибут("LineNum"			, Формат(СтрокаТовары.НомерСтроки, "ЧДЦ=; ЧН=0; ЧГ="));
						ЗаписьXML.ЗаписатьАтрибут("OperationDate"	, Формат(ЧекиВыборка.Период, "ДФ='дд-ММ-ггг ЧЧ:мм:сс'"));
						ЗаписьXML.ЗаписатьАтрибут("OperationType"	, СтрокаТовары.ВидОперации);
						ЗаписьXML.ЗаписатьАтрибут("PaymentType"		, СтрокаТовары.ВидОплаты);

						ЗаписьXML.ЗаписатьАтрибут("GoodsCode"		, СокрЛП(СтрокаТовары.ТоварКод));
						ЗаписьXML.ЗаписатьАтрибут("GoodsName"		, СокрЛП(СтрокаТовары.ТоварНаименование));
						ЗаписьXML.ЗаписатьАтрибут("GoodsUnit"		, СокрЛП(СтрокаТовары.ТоварЕдиница));

						ЗаписьXML.ЗаписатьАтрибут("GoodsPrice"		, Формат(СтрокаТовары.Цена, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ="));
						ЗаписьXML.ЗаписатьАтрибут("GoodsQty"		, Формат(СтрокаТовары.Количество, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ="));
						ЗаписьXML.ЗаписатьАтрибут("GoodsTotal"		, Формат(Макс(СтрокаТовары.Сумма, -СтрокаТовары.Сумма), "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ="));
						ЗаписьXML.ЗаписатьАтрибут("TaxesTotal"		, Формат(Макс(СтрокаТовары.СуммаНДС, -СтрокаТовары.СуммаНДС), "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ="));

					ЗаписьXML.ЗаписатьКонецЭлемента();

				КонецЦикла;

				ЗаписьXML.ЗаписатьКонецЭлемента();

			КонецЦикла;

			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();

			ЗаписьXML.Закрыть();

			Если ФайлXML.Существует() Тогда

				Попытка

					FTPСоединение = Новый FTPСоединение(
						  ПараметрыСоединения.FTP.Адрес
						, ПараметрыСоединения.FTP.Порт
						, ПараметрыСоединения.FTP.Логин
						, ПараметрыСоединения.FTP.Пароль
						,
						, Истина
						, 15
					);

					FTPСоединение.Записать(ФайлXML.ПолноеИмя, ФайлXML.Имя);

				Исключение

					Попытка

						УдалитьФайлы(ФайлXML.ПолноеИмя);

					Исключение

						ТекстОшибки = ОписаниеОшибки();

					КонецПопытки;

					ВызватьИсключение "Ошибка записи на FTP: " + ТекстОшибки;

				КонецПопытки;

				Попытка

					УдалитьФайлы(ФайлXML.ПолноеИмя);

				Исключение

					ТекстОшибки = ОписаниеОшибки();

				КонецПопытки;

				ЖурналСобытий.Регистрация("OUT_FTP_ARENDA"
					, УровеньЖурналаРегистрации.Информация
					, Метаданные.Документы.КассовыйДень
					, ДокументСсылка
					,
					, "Продажи успешно выгружены!" + Символы.ПС + ФайлXML.ПолноеИмя
					,
					, Истина
					, Ложь
				);

			КонецЕсли;

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();
		ЖурналСобытий.Регистрация("OUT_FTP_ARENDA"
			, УровеньЖурналаРегистрации.Ошибка
			, Метаданные.Документы.КассовыйДень
			, ДокументСсылка
			,
			, ТекстОшибки
			,
			, Истина
			, Ложь
		);

		ВызватьИсключение "Ошибка экспорта: " + ТекстОшибки;

	КонецПопытки;

КонецПроцедуры

//	LNK 02.06.2023 07:43:03
//	ТЦ Ocean Plaza
//	ПараметрыСоединения = Новый Структура(
//		"FTP, OBLECT"
//		, Новый Структура(
//			"Адрес, Логин, Пароль"
//			, "194.183.186.6"
//			, "antoshka"
//			, "8V36Zuja4D"
//		)
//		, "ANTOSHKA"
//	);
//
Функция ПараметрыСоединения()	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ПараметрыСоединения = Новый Структура(
		"Активен, FTP, OBLECT"
		, Ложь
		, Новый Структура(
			"Адрес, Порт, Логин, Пароль"
			, ""
			, 0
			, ""
			, ""
		)
		, "ANTOSHKA"
	);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаРегистра.Адрес КАК Адрес,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистра.Порт = 0
	|			ТОГДА 21
	|		ИНАЧЕ ТаблицаРегистра.Порт
	|	КОНЕЦ КАК Порт,
	|	ТаблицаРегистра.Account КАК Логин,
	|	ТаблицаРегистра.Password КАК Пароль
	|ИЗ
	|	РегистрСведений.АдресаWebДоступа КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Магазин = &Магазин
	|	И ТаблицаРегистра.Протокол = ""ftpAR""
	|	И НЕ ТаблицаРегистра.Адрес = """"
	|	И НЕ ТаблицаРегистра.Account = """"
	|	И НЕ ТаблицаРегистра.Password = """""
	);
	Запрос.УстановитьПараметр("Магазин", ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();

		ЗаполнитьЗначенияСвойств(ПараметрыСоединения.FTP, Выборка);
		ПараметрыСоединения.Активен = Истина;
	
	КонецЕсли;

	Возврат ПараметрыСоединения;

КонецФункции

//	LNK 05.06.2023 08:23:36
Процедура ВыполнитьФоновуюВыгрузку(ДокументСсылка)	Экспорт

	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ДокументСсылка);
	ФоновыеЗадания.Выполнить("ЭкспортАрендодателю.ВыгрузитьКассовыйДень", ПараметрыЗадания, "EXP_ARENDA");

КонецПроцедуры

#КонецОбласти

#Область ПоддержкаФункционала

Функция ТаблицаТоварыПоВидамОплат(Регистратор, ТоварыВыборка, ОплатыВыборка, КолонкиТовары, КолонкиОплата)

	Перем ТаблицаТовары, ТаблицаОплаты;

	#Если _ Тогда
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаОплаты = Новый ТаблицаЗначений;
	#КонецЕсли

	ПолучитьСтруктуруТаблиц(ТаблицаТовары, ТаблицаОплаты, КолонкиТовары, КолонкиОплата);
	ЗаполнитьТаблицыПродажи(ТаблицаТовары, ТаблицаОплаты, ТоварыВыборка, ОплатыВыборка, Регистратор);

//	ПРИМЕЧАНИЕ из ТЗ:
//	---------------------------------------------------------------------------------------
//	Проблема при змішаних оплатах.
//	Домовились, що якщо товар в чеку один, а оплата змішана, тоді записуємо в файл ту яка більша по сумі.
//	Якщо товарів багато, тоді сортуємо товари від найдешевшого до найдорожчого і заповнюємо оплати по сумах 
//	видів оплат від меншого до більшого. Коли на якомусь із товарів залишкової суми оплати (від меншої)
//	недостатньо для покриття суми товару, тоді переходимо до наступного виду оплати.

	Если ТаблицаОплаты.Количество() = 1 Тогда

		ТаблицаТовары.ЗаполнитьЗначения(ТаблицаОплаты[0].ВидОплаты, "ВидОплаты");

	Иначе

		Если ТаблицаТовары.Количество() = 1 Тогда

		//	распределять, как бы, нечего.. принимаем значение первой строки оплат
			ТаблицаТовары.ЗаполнитьЗначения(ТаблицаОплаты[0].ВидОплаты, "ВидОплаты");

		Иначе

			СуммаДокумента = ТаблицаТовары.Итог("СуммаСНДС");
			ТаблицаТовары.Сортировать("Цена");	//	от меньшего к большему!

			Для каждого СтрокаОплаты Из ТаблицаОплаты Цикл

				Для каждого СтрокаТовары Из ТаблицаТовары Цикл

					Если СтрокаОплаты.Сумма > 0
					И	 СтрокаТовары.СуммаОплаты < СтрокаТовары.СуммаСНДС
				//	И	 ПустаяСтрока(СтрокаТовары.ВидОплаты)
					Тогда

						СуммаОплаты = Мин(СтрокаТовары.СуммаСНДС - СтрокаТовары.СуммаОплаты, СтрокаОплаты.Сумма);

						СтрокаОплаты.Сумма = Макс(0, СтрокаОплаты.Сумма - СуммаОплаты);
						СтрокаТовары.СуммаОплаты = СтрокаТовары.СуммаОплаты + СуммаОплаты;

						Если ПустаяСтрока(СтрокаТовары.ВидОплаты) Тогда	//	LNK 25.06.2024 06:00:35

							СтрокаТовары.ВидОплаты = СтрокаОплаты.ВидОплаты;

						КонецЕсли;

					КонецЕсли;

				КонецЦикла;

			КонецЦикла;

			ТаблицаТовары.Сортировать("НомерСтроки");	//	восстанавливаем порядок строк

		КонецЕсли;

	КонецЕсли;

	Возврат ТаблицаТовары;

КонецФункции

Процедура ПолучитьСтруктуруТаблиц(ТаблицаТовары, ТаблицаОплаты, КолонкиТовары, КолонкиОплата)

	ТаблицаТовары = Новый ТаблицаЗначений;

	Для каждого Колонка Из КолонкиТовары Цикл

		ТаблицаТовары.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);

	КонецЦикла;

	ТаблицаТовары.Колонки.Добавить("СуммаОплаты", Новый ОписаниеТипов("Число"));

	ТаблицаОплаты = Новый ТаблицаЗначений;

	Для каждого Колонка Из КолонкиОплата Цикл

		ТаблицаОплаты.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);

	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьТаблицыПродажи(ТаблицаТовары, ТаблицаОплаты, ТоварыВыборка, ОплатыВыборка, Регистратор)

	Пока ТоварыВыборка.Следующий() Цикл

		СтрокаТаблицы = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТоварыВыборка);

	КонецЦикла;

	ОплатыВыборка.Сбросить();

	Пока ОплатыВыборка.НайтиСледующий(Новый Структура("Регистратор", Регистратор)) Цикл

		СтрокаТаблицы = ТаблицаОплаты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ОплатыВыборка);

	КонецЦикла;

//	Значений "ВидОплаты" может быть два - "Наличный" и "Безналичный".
//	Если суммы одинаковы, то первым всегда будет "Безналичный"..
//	хер его знает, но, наверное, арендодателю не нужно лишний
//	раз мозолить глаза наличными
	ТаблицаОплаты.Сортировать("Сумма Убыв, ВидОплаты");

КонецПроцедуры

#КонецОбласти




















