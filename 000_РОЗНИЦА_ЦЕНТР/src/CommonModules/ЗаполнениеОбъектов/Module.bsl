//	LNK 07.12.2016 17:19:57
Процедура ОформитьЗакрытиеИнвентаризацииПоПроектам(ПриказНаИнвентаризацию, ВидДокумента)	Экспорт

	Запрос = Новый Запрос(СтрЗаменить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТовары.Номенклатура.ВидНоменклатуры КАК Проект,
	|	ТаблицаТовары.Ссылка.Магазин,
	|	ТаблицаТовары.Ссылка КАК ДокументДвижения
	|ПОМЕСТИТЬ Подчиненные
	|ИЗ
	|	Документ.ОприходованиеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка.ДокументОснование = &ПриказНаИнвентаризацию
	|	И ТаблицаТовары.Ссылка.ДокументОснование ССЫЛКА Документ.ПриказНаПроведениеИнвентаризацииТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК Проект,
	|	ТаблицаСправочник.IDN КАК IDN,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТаблицаУчтен.ВидПередачи ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК Отправлен,
	|	Подчиненные.ДокументДвижения,
	|	Подчиненные.ДокументДвижения.Представление КАК ДокументПредставление,
	|	Ведущая.ПриказНаИнвентаризацию.Магазин КАК Магазин,
	|	Ведущая.ПриказНаИнвентаризацию.Организация КАК Организация,
	|	Ведущая.ПриказНаИнвентаризацию.Склад КАК Склад,
	|	Ведущая.ПриказНаИнвентаризацию.Дата КАК ДатаПриказа
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫРАЗИТЬ(&ПриказНаИнвентаризацию КАК Документ.ПриказНаПроведениеИнвентаризацииТоваров) КАК ПриказНаИнвентаризацию) КАК Ведущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ТаблицаСправочник
	|			ЛЕВОЕ СОЕДИНЕНИЕ Подчиненные КАК Подчиненные
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаУчтен
	|				ПО (ТаблицаУчтен.Объект ССЫЛКА Документ.ОприходованиеТоваров)
	|					И Подчиненные.Магазин = ТаблицаУчтен.Магазин
	|					И Подчиненные.ДокументДвижения = ТаблицаУчтен.Объект
	|			ПО ТаблицаСправочник.Ссылка = Подчиненные.Проект
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ТаблицаСправочник.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСправочник.Ссылка,
	|	ТаблицаСправочник.IDN,
	|	Подчиненные.ДокументДвижения,
	|	Подчиненные.ДокументДвижения.Представление,
	|	Ведущая.ПриказНаИнвентаризацию.Магазин,
	|	Ведущая.ПриказНаИнвентаризацию.Организация,
	|	Ведущая.ПриказНаИнвентаризацию.Склад,
	|	Ведущая.ПриказНаИнвентаризацию.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	IDN
	|ИТОГИ
	|	МАКСИМУМ(Магазин),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Склад),
	|	МАКСИМУМ(ДатаПриказа)
	|ПО
	|	Проект"
	, "Документ.ОприходованиеТоваров", "Документ." + ВидДокумента)
	);
	Запрос.УстановитьПараметр("ПриказНаИнвентаризацию", ПриказНаИнвентаризацию);

	ПроектыВыборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	НачатьТранзакцию();

	Попытка

		Пока ПроектыВыборка.Следующий() Цикл

			ОбъектПроекта = Неопределено;
			ДеталиВыборка = ПроектыВыборка.Выбрать();

			Пока ДеталиВыборка.Следующий() Цикл

				Если ДеталиВыборка.Отправлен = Истина Тогда

					ВызватьИсключение "Документ «" + ДеталиВыборка.ДокументПредставление + "» назначен к отправке в Navision! Изменение невозможно.";

				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(ДеталиВыборка.ДокументДвижения) Тогда

					Прервать;

				КонецЕсли;

				ДокументОбъект = ДеталиВыборка.ДокументДвижения.ПолучитьОбъект();

				Если ОбъектПроекта = Неопределено Тогда

					ОбъектПроекта = ДокументОбъект;

				КонецЕсли;

				ДокументОбъект.УстановитьПометкуУдаления(Истина);

			КонецЦикла;

			Если ОбъектПроекта = Неопределено Тогда

				ОбъектПроекта = Документы[ВидДокумента].СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(ОбъектПроекта, ПроектыВыборка);

				ОбъектПроекта.Дата = ПроектыВыборка.ДатаПриказа + 10;
				ОбъектПроекта.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.ОприходованиеПоИнвентаризации;

			КонецЕсли;

			ОбъектПроекта.Товары.Очистить();
			ОбъектПроекта.Заполнить(Новый Структура(
				"ДокументОснование, Проект, СообщатьПриЗаполнении"
				, ПриказНаИнвентаризацию, ПроектыВыборка.Проект, Ложь)
			);
			ОбъектПроекта.ПометкаУдаления = Ложь;

			Если НЕ ОбъектПроекта.Товары.Количество() = 0 Тогда

				ЗапасыСервер.ЗаполнитьЦеныПоРозничнымЦенам(ОбъектПроекта, "Товары", ОбъектПроекта.Магазин, Ложь);
				ОбъектПроекта.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				Сообщить("Принят по проекту «" + ПроектыВыборка.Проект + "» документ " + СокрЛП(ОбъектПроекта.Ссылка));

			КонецЕсли;

		КонецЦикла;

		ЗафиксироватьТранзакцию();

	Исключение

		ТекстОшибки = ОписаниеОшибки();
		ОтменитьТранзакцию();

		Сообщить("Групповая обработка завершилась ошибкой по причине:" + Символы.ПС + ТекстОшибки);

	КонецПопытки;

КонецПроцедуры

//	LNK 17.02.2017 07:30:29
Функция КлючевыеСвойстваДокумента(ДокументСсылка)	Экспорт

	КлючевыеСвойства = Новый Структура(
		"Дата, Проведен, СозданВ1СРозница"
		, '00010101', Ложь, Ложь);

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(СтрЗаменить(
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Дата,
	|	ЕСТЬNULL(ТаблицаДокументы.Проведен, ЛОЖЬ) КАК Проведен,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ТаблицаДокументы.УзелСоздания.ВидУзла В (ЗНАЧЕНИЕ(Перечисление.ВидыУзлов.Магазин), ЗНАЧЕНИЕ(Перечисление.ВидыУзлов.УзелРРО), ЗНАЧЕНИЕ(Перечисление.ВидыУзлов.ЦентральныйОфис))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ, ЛОЖЬ) КАК СозданВ1СРозница
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК Ключ) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ТаблицаДокументы
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаДокументы.Ссылка = &ДокументОснование"
	, "СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК", "СОЕДИНЕНИЕ Документ." + ДокументСсылка.Метаданные().Имя + " КАК")
	);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылка);

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	ЗаполнитьЗначенияСвойств(КлючевыеСвойства, Выборка);

	Возврат КлючевыеСвойства;

КонецФункции

//	LNK 17.02.2017 07:43:00
Процедура ПерезаполнитьПеремещениеПоОрдеру(ПеремещениеСсылка, ОрдерСсылка)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ПеремещениеОбъект = ПеремещениеСсылка.ПолучитьОбъект();
	ОрдерОбъект       = ОрдерСсылка.ПолучитьОбъект();

	ПеремещениеОбъект.Дата = Документы.ПеремещениеТоваров.ПолучитьДатуПоОрдеру(ОрдерОбъект.Дата);
	ПеремещениеОбъект.Товары.Загрузить(ОрдерОбъект.Товары.Выгрузить());
	ПеремещениеОбъект.СерийныеНомера.Загрузить(ОрдерОбъект.СерийныеНомера.Выгрузить());
	ПеремещениеОбъект.Серии.Загрузить(ОрдерОбъект.Серии.Выгрузить());

	Для каждого СтрокаТабличнойЧасти Из ПеремещениеОбъект.Товары Цикл

		СтрокаТабличнойЧасти.СтатусУказанияСерийОтправитель = СтрокаТабличнойЧасти.СтатусУказанияСерий;
		СтрокаТабличнойЧасти.СтатусУказанияСерийПолучатель  = СтрокаТабличнойЧасти.СтатусУказанияСерий;

	КонецЦикла;

	ПеремещениеОбъект.ДополнительныеСвойства.Вставить("РегистрацияПередачиВNavision"      , Истина);
	ПеремещениеОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	ПеремещениеОбъект.ДополнительныеСвойства.Вставить("ИзменениеСтатусаРаботыСТерминалом" , Истина);

	ЖурналСобытий.Регистрация("КоррекцияПеремещения.Перезаполнение", УровеньЖурналаРегистрации.Информация
		, Метаданные.Документы.ПеремещениеТоваров
		, ПеремещениеСсылка
		,
		, "Выравнивание инициировано «" + СокрЛП(ОрдерСсылка) + "»"
		, СокрЛП(ОрдерСсылка)
		, Истина
	);

	ПеремещениеОбъект.ПометкаУдаления = Ложь;
	ПеремещениеОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);

КонецПроцедуры

//	LNK 06.03.2017 11:16:13
Функция ЗагрузитьДанныеВМассивИзТаблицыExcel(АдресВХранилище, Расширение, ВернутьТолькоСсылки = Ложь)	Экспорт

	ТабличныйДокумент  = Новый ТабличныйДокумент;
	МассивДанных       = Новый Массив;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);

	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(11)));
	ТаблицаЗначений.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("ЦенаСтарая", Новый ОписаниеТипов("Число"));

	СоставСтроки = Новый Массив;
	СоставСтроки.Добавить(Новый Структура("Колонка, Имя", 1, "Код"));
	СоставСтроки.Добавить(Новый Структура("Колонка, Имя", 2, "Количество"));
	СоставСтроки.Добавить(Новый Структура("Колонка, Имя", 3, "Цена"));
	СоставСтроки.Добавить(Новый Структура("Колонка, Имя", 4, "ЦенаСтарая"));
	ТипЧисло = Новый ОписаниеТипов("Число");

	Попытка

		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);

		ПерваяСтрока    = 1;
		КоличествоСтрок = ТабличныйДокумент.ВысотаТаблицы;
	 //	КонечнаяКолонка = ТабличныйДокумент.ПолучитьОбласть().ШиринаТаблицы;

	 	Для НомерСтроки = ПерваяСтрока По КоличествоСтрок Цикл

			Для каждого Позиция Из СоставСтроки Цикл

				ТекущаяОбласть = ТабличныйДокумент.ПолучитьОбласть(
					"R" + Формат(НомерСтроки, "ЧДЦ=; ЧН=0; ЧГ=") +
					"C" + Формат(Позиция.Колонка, "ЧДЦ=; ЧН=0; ЧГ=")).ТекущаяОбласть;

				Попытка

					ЗначениеЯчейки = ТекущаяОбласть.Значение;

				Исключение
					
					ЗначениеЯчейки = ТипЧисло.ПривестиЗначение(СтрЗаменить(ТекущаяОбласть.Текст, ",", "."));

				КонецПопытки;

				Если ТипЗнч(ЗначениеЯчейки) = Тип("Число") И Позиция.Имя = "Код" Тогда

					ЗначениеЯчейки = Формат(ЗначениеЯчейки, "ЧДЦ=; ЧГ=");

				КонецЕсли;

				Если Позиция.Имя = "Код" Тогда

					Если НЕ ПустаяСтрока(ЗначениеЯчейки) И СтрДлина(ЗначениеЯчейки) > 5 И СтрДлина(ЗначениеЯчейки) <= 11 Тогда

						СтрокаТаблицы = ТаблицаЗначений.Добавить();
						СтрокаТаблицы.НомерСтроки = НомерСтроки;

					Иначе

						Прервать;

					КонецЕсли;

				КонецЕсли;

				СтрокаТаблицы[Позиция.Имя] = ЗначениеЯчейки;

			КонецЦикла;

		КонецЦикла;

		УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаЗначений.НомерСтроки,
		|	ТаблицаЗначений.Код,
		|	ТаблицаЗначений.Количество,
		|	ТаблицаЗначений.Цена,
		|	ТаблицаЗначений.ЦенаСтарая
		|ПОМЕСТИТЬ Источник
		|ИЗ
		|	&ТаблицаЗначений КАК ТаблицаЗначений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Источник.Код КАК Код,
		|	ТаблицаСправочник.Ссылка КАК Номенклатура,
		|	Источник.НомерСтроки КАК НомерСтроки,
		|	Источник.Количество,
		|	Источник.Цена,
		|	Источник.ЦенаСтарая,
		|	ТаблицаСправочник.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Источник КАК Источник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
		|		ПО Источник.Код = ТаблицаСправочник.Код
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Источник.Код,
		|	МАКСИМУМ(Штрихкоды.Владелец) КАК Номенклатура,
		|	Источник.НомерСтроки,
		|	Источник.Количество,
		|	Источник.Цена,
		|	Источник.ЦенаСтарая,
		|	МАКСИМУМ(Штрихкоды.Владелец.СтавкаНДС) КАК СтавкаНДС
		|ИЗ
		|	Источник КАК Источник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
		|		ПО (Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
		|				И Источник.Код = Штрихкоды.Штрихкод)
		|ГДЕ
		|	НЕ Источник.Код В
		|				(ВЫБРАТЬ
		|					Товары.Код
		|				ИЗ
		|					Товары)
		|
		|СГРУППИРОВАТЬ ПО
		|	Источник.НомерСтроки,
		|	Источник.Код,
		|	Источник.Количество,
		|	Источник.Цена,
		|	Источник.ЦенаСтарая
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Товары.Код,
		|	Товары.Номенклатура,
		|	Товары.НомерСтроки,
		|	Товары.Количество,
		|	Товары.Цена,
		|	Товары.ЦенаСтарая,
		|	Товары.СтавкаНДС
		|ИЗ
		|	Товары КАК Товары"
		);
		Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаЗначений);
		
		Выборка = Запрос.Выполнить().Выбрать();

		Запрос = Неопределено;
		ТаблицаЗначений = Неопределено;
		
		Пока Выборка.Следующий() Цикл

			Если ВернутьТолькоСсылки = Истина Тогда

				МассивДанных.Добавить(Выборка.Номенклатура);

			Иначе

				МассивДанных.Добавить(Новый Структура(
					"Код, Номенклатура, Количество, Цена, ЦенаСтарая, СтавкаНДС"
					, Выборка.Код, Выборка.Номенклатура, Выборка.Количество, Выборка.Цена, Выборка.ЦенаСтарая, Выборка.СтавкаНДС));

			КонецЕсли;

		КонецЦикла;

		Попытка

			УдалитьФайлы(ИмяВременногоФайла);

		Исключение	КонецПопытки;

	Исключение

		ТекстОшибки = ОписаниеОшибки();
		Сообщить(ТекстОшибки);

	КонецПопытки;

	Возврат МассивДанных;

КонецФункции

//	LNK 09.02.2018 14:10:37
Функция ЗагрузитьСерийныеНомераИзТаблицыExcel(Номенклатура, ТипСерийногоНомера, АдресВХранилище, Расширение)	Экспорт

	Перем ТипШтрихкода;

	Отказ = Ложь;

	ТабличныйДокумент  = Новый ТабличныйДокумент;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ПолучитьИзВременногоХранилища(АдресВХранилище).Записать(ИмяВременногоФайла);

	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("НомерСтроки"  , Новый ОписаниеТипов("Число"));
//	уникальность по "Наименование"... п..ц, но не я это делал. Длина строки равна длине этого реквизита.
	ТаблицаЗначений.Колонки.Добавить("СерийныйНомер", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));

	Попытка

		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);

	 	Для НомерСтроки = 1 По ТабличныйДокумент.ВысотаТаблицы Цикл

			ТекущаяОбласть = ТабличныйДокумент.ПолучитьОбласть("R" + Формат(НомерСтроки, "ЧДЦ=; ЧН=0; ЧГ=") + "C1").ТекущаяОбласть;

			Если НЕ ПустаяСтрока(ТекущаяОбласть.Текст) Тогда

				СтрокаТаблицы = ТаблицаЗначений.Добавить();
				СтрокаТаблицы.НомерСтроки   = НомерСтроки;
				СтрокаТаблицы.СерийныйНомер = СтрЗаменить(СтрЗаменить(СокрЛП(ТекущаяОбласть.Текст), " ", ""), Символы.НПП, "");

			КонецЕсли;

		КонецЦикла;

		Сообщить("1.(" + Формат(ТекущаяДата(), "ДФ=ЧЧ:мм") + ") Прочитано номеров: " + Формат(ТаблицаЗначений.Количество(), "ЧДЦ=; ЧН=0; ЧГ="));

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаЗначений.НомерСтроки КАК НомерСтроки,
		|	ТаблицаЗначений.СерийныйНомер КАК СерийныйНомер
		|ПОМЕСТИТЬ Источник
		|ИЗ
		|	&ТаблицаЗначений КАК ТаблицаЗначений
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СерийныйНомер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(Источник.НомерСтроки) КАК НомерСтроки,
		|	Источник.СерийныйНомер КАК СерийныйНомер
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Источник КАК Источник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерийныеНомера КАК ТаблицаСправочник
		|		ПО Источник.СерийныйНомер = ТаблицаСправочник.Наименование
		|ГДЕ
		|	ТаблицаСправочник.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	Источник.СерийныйНомер
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СерийныйНомер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Источник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.НомерСтроки КАК НомерСтроки,
		|	Данные.СерийныйНомер КАК СерийныйНомер,
		|	ВЫБОР
		|		КОГДА ТаблицаШтрихкоды.Штрихкод ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ШтрихкодУникален
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК ТаблицаШтрихкоды
		|		ПО Данные.СерийныйНомер = ТаблицаШтрихкоды.Штрихкод
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Данные"
		);
		Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаЗначений);

		Выборка = Запрос.Выполнить().Выбрать();

		Запрос = Неопределено;
		ТаблицаЗначений = Неопределено;

		НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
		ОбменДаннымиСервер.УстановитьВсехПолучателей(НаборЗаписей.ОбменДанными.Получатели, "ПоМагазину");

		СчётчикЗаписано = 0;

		Пока Выборка.Следующий() Цикл

			Если НЕ Выборка.ШтрихкодУникален Тогда

				Сообщить(Формат(Выборка.НомерСтроки, "ЧДЦ=; ЧГ=") + ". ШК <" + Выборка.СерийныйНомер + "> НЕ УНИКАЛЕН! Пропущено.");
				Продолжить;

			КонецЕсли;

			НачатьТранзакцию();

			Попытка

                ЭлементОбъект = Справочники.СерийныеНомера.СоздатьЭлемент();
				ЭлементОбъект.ОбменДанными.Загрузка = Истина;
				ЭлементОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
				ОбменДаннымиСервер.УстановитьВсехПолучателей(ЭлементОбъект.ОбменДанными.Получатели, "ПоМагазину");

                ЭлементОбъект.Владелец = Номенклатура;

				Если ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой Тогда

                    ЭлементОбъект.Наименование = Выборка.СерийныйНомер;

                ИначеЕсли ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Магнитный Тогда

                    ЭлементОбъект.Наименование       = Выборка.СерийныйНомер;
                    ЭлементОбъект.КодСерийногоНомера = Выборка.СерийныйНомер;

                Иначе	//	смешанный тип

                    ЭлементОбъект.Наименование       = Выборка.СерийныйНомер;
                    ЭлементОбъект.КодСерийногоНомера = Выборка.СерийныйНомер;

				КонецЕсли;

				ЭлементОбъект.УстановитьНовыйКод();
				ЭлементОбъект.Записать();

				Если НЕ ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Магнитный Тогда

					Если ТипШтрихкода = Неопределено Тогда

						ТипШтрихкода = ПодключаемоеОборудованиеРТ.ОпределитьТипШтрихкода(ЭлементОбъект.Наименование);

					КонецЕсли;

					НаборЗаписей.Отбор.Владелец.Установить(ЭлементОбъект.Ссылка);
					НаборЗаписей.Очистить();

					ЗаписьНабора = НаборЗаписей.Добавить();
					ЗаписьНабора.Владелец = ЭлементОбъект.Ссылка;
					ЗаписьНабора.Штрихкод = Выборка.СерийныйНомер;
					ЗаписьНабора.ТипШтрихкода = ТипШтрихкода;

					Если ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128 Тогда

						ЗаписьНабора.ПредставлениеШтрихкода = ЗаписьНабора.Штрихкод;

					КонецЕсли;

					НаборЗаписей.Записать();

				КонецЕсли;

				ЗафиксироватьТранзакцию();
				СчётчикЗаписано = СчётчикЗаписано + 1;

			Исключение

				ТекстОшибки = ОписаниеОшибки();
				ОтменитьТранзакцию();
				Сообщить(Формат(Выборка.НомерСтроки, "ЧДЦ=; ЧГ=") + ". Ошибка записи кода <" + Выборка.СерийныйНомер + ">: " + ТекстОшибки);

			КонецПопытки;

		КонецЦикла;

	Исключение

		Отказ = Истина;
		ТекстОшибки = ОписаниеОшибки();
		Сообщить(ТекстОшибки);

	КонецПопытки;

	Сообщить("2.(" + Формат(ТекущаяДата(), "ДФ=ЧЧ:мм") + ") Записано номеров: " + Формат(СчётчикЗаписано, "ЧДЦ=; ЧН=0; ЧГ="));

	Возврат НЕ Отказ;

КонецФункции // ЗагрузитьСерийныеНомераИзТаблицыExcel()

//	LNK 06.03.2017 11:16:13
Функция ЗагрузитьДанныеВМассивИзТаблицыExcelПоШтрихкоду(АдресВХранилище, Расширение, ВернутьТолькоСсылки = Ложь)	Экспорт

	ТабличныйДокумент  = Новый ТабличныйДокумент;
	МассивДанных       = Новый Массив;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);

	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(11)));
	ТаблицаЗначений.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("ЦенаСтарая", Новый ОписаниеТипов("Число"));

	СоставСтроки = Новый Массив;
	СоставСтроки.Добавить(Новый Структура("Колонка, Имя", 1, "Штрихкод"));
	СоставСтроки.Добавить(Новый Структура("Колонка, Имя", 2, "Количество"));
	СоставСтроки.Добавить(Новый Структура("Колонка, Имя", 3, "Цена"));
	СоставСтроки.Добавить(Новый Структура("Колонка, Имя", 4, "ЦенаСтарая"));
	ТипЧисло = Новый ОписаниеТипов("Число");

	Попытка

		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);

		ПерваяСтрока    = 1;
		КоличествоСтрок = ТабличныйДокумент.ВысотаТаблицы;
	 //	КонечнаяКолонка = ТабличныйДокумент.ПолучитьОбласть().ШиринаТаблицы;

	 	Для НомерСтроки = ПерваяСтрока По КоличествоСтрок Цикл

			Для каждого Позиция Из СоставСтроки Цикл

				ТекущаяОбласть = ТабличныйДокумент.ПолучитьОбласть(
					"R" + Формат(НомерСтроки, "ЧДЦ=; ЧН=0; ЧГ=") +
					"C" + Формат(Позиция.Колонка, "ЧДЦ=; ЧН=0; ЧГ=")).ТекущаяОбласть;

				Попытка

					ЗначениеЯчейки = ТекущаяОбласть.Значение;

				Исключение
					
					ЗначениеЯчейки = ТипЧисло.ПривестиЗначение(СтрЗаменить(ТекущаяОбласть.Текст, ",", "."));

				КонецПопытки;

				Если ТипЗнч(ЗначениеЯчейки) = Тип("Число") И Позиция.Имя = "Штрихкод" Тогда

					ЗначениеЯчейки = Формат(ЗначениеЯчейки, "ЧДЦ=; ЧГ=");

				КонецЕсли;

				Если Позиция.Имя = "Код" Тогда

					Если НЕ ПустаяСтрока(ЗначениеЯчейки) И СтрДлина(ЗначениеЯчейки) > 5 И СтрДлина(ЗначениеЯчейки) <= 13 Тогда

						СтрокаТаблицы = ТаблицаЗначений.Добавить();
						СтрокаТаблицы.НомерСтроки = НомерСтроки;

					Иначе

						Прервать;

					КонецЕсли;

				КонецЕсли;

				СтрокаТаблицы[Позиция.Имя] = ЗначениеЯчейки;

			КонецЦикла;

		КонецЦикла;

		УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаЗначений.НомерСтроки,
		|	ТаблицаЗначений.Код,
		|	ТаблицаЗначений.Количество,
		|	ТаблицаЗначений.Цена,
		|	ТаблицаЗначений.ЦенаСтарая
		|ПОМЕСТИТЬ Источник
		|ИЗ
		|	&ТаблицаЗначений КАК ТаблицаЗначений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Источник.Код КАК Код,
		|	ТаблицаСправочник.Ссылка КАК Номенклатура,
		|	Источник.НомерСтроки КАК НомерСтроки,
		|	Источник.Количество,
		|	Источник.Цена,
		|	Источник.ЦенаСтарая,
		|	ТаблицаСправочник.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Источник КАК Источник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
		|		ПО Источник.Код = ТаблицаСправочник.Код
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Источник.Код,
		|	МАКСИМУМ(Штрихкоды.Владелец) КАК Номенклатура,
		|	Источник.НомерСтроки,
		|	Источник.Количество,
		|	Источник.Цена,
		|	Источник.ЦенаСтарая,
		|	МАКСИМУМ(Штрихкоды.Владелец.СтавкаНДС) КАК СтавкаНДС
		|ИЗ
		|	Источник КАК Источник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
		|		ПО (Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
		|				И Источник.Код = Штрихкоды.Штрихкод)
		|ГДЕ
		|	НЕ Источник.Код В
		|				(ВЫБРАТЬ
		|					Товары.Код
		|				ИЗ
		|					Товары)
		|
		|СГРУППИРОВАТЬ ПО
		|	Источник.НомерСтроки,
		|	Источник.Код,
		|	Источник.Количество,
		|	Источник.Цена,
		|	Источник.ЦенаСтарая
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Товары.Код,
		|	Товары.Номенклатура,
		|	Товары.НомерСтроки,
		|	Товары.Количество,
		|	Товары.Цена,
		|	Товары.ЦенаСтарая,
		|	Товары.СтавкаНДС
		|ИЗ
		|	Товары КАК Товары"
		);
		Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаЗначений);
		
		Выборка = Запрос.Выполнить().Выбрать();

		Запрос = Неопределено;
		ТаблицаЗначений = Неопределено;
		
		Пока Выборка.Следующий() Цикл

			Если ВернутьТолькоСсылки = Истина Тогда

				МассивДанных.Добавить(Выборка.Номенклатура);

			Иначе

				МассивДанных.Добавить(Новый Структура(
					"Код, Номенклатура, Количество, Цена, ЦенаСтарая, СтавкаНДС"
					, Выборка.Код, Выборка.Номенклатура, Выборка.Количество, Выборка.Цена, Выборка.ЦенаСтарая, Выборка.СтавкаНДС));

			КонецЕсли;

		КонецЦикла;

		Попытка

			УдалитьФайлы(ИмяВременногоФайла);

		Исключение	КонецПопытки;

	Исключение

		ТекстОшибки = ОписаниеОшибки();
		Сообщить(ТекстОшибки);

	КонецПопытки;

	Возврат МассивДанных;

КонецФункции

#Область Функционал_ПередЗаписьюДокумента	//	LNK 09.08.2022 05:38:08

//	LNK 09.08.2022 05:37:58
Функция ДокументНаходитсяВКассовомДне(Источник, Отказ)	Экспорт

	#Если _ Тогда
	Источник = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
	#КонецЕсли

	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда

		Запрос = Новый Запрос(СтрЗаменить(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ТаблицаДокументы.Касса.Магазин, Ведущая.Магазин) КАК Магазин
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка) КАК Магазин) КАК Ведущая
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер КАК ТаблицаДокументы
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаДокументы.Ссылка = &Объект"
		, "Документ.ПриходныйКассовыйОрдер", "Документ." + Источник.Метаданные().Имя)
		);
		Запрос.УстановитьПараметр("Объект", Источник.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();

		Магазин = Выборка.Магазин;

	Иначе

		Магазин = Источник[ЗаполнениеОбъектовСобытияПовтИсп.ИмяКлючевогоРеквизитаМагазин(Источник.Метаданные().ПолноеИмя())];

	КонецЕсли;

//	Вызывается из "ПриЗаписи" - атрибуты должны быть обновлены.
	Если НЕ (Источник.ПометкаУдаления ИЛИ РозничныеПродажиСерверПовтИсп.ОтключитьОграниченияПериодаПоКассовомуДню(Магазин, Источник.Дата)) Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаУчета.КассовыйДень КАК КассовыйДень
		|ИЗ
		|	РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаУчета
		|ГДЕ
		|	ТаблицаУчета.Объект = &Объект
		|	И НЕ ТаблицаУчета.КассовыйДень = ЗНАЧЕНИЕ(Документ.КассовыйДень.ПустаяСсылка)"
		);
		Запрос.УстановитьПараметр("Объект", Источник.Ссылка);

		РезультатЗапроса = Запрос.Выполнить();

	//	Проверяем только в том случае, если документ ещё не "привязан" к кассовому дню!
		Если РезультатЗапроса.Пустой() Тогда

			ТекстОшибки  = "";

			Запрос.Текст =
			"ВЫБРАТЬ
			|	МАКСИМУМ(ТаблицаДни.Дата) КАК Дата
			|ПОМЕСТИТЬ Фильтр
			|ИЗ
			|	Документ.КассовыйДень КАК ТаблицаДни
			|ГДЕ
			|	ТаблицаДни.Магазин = &Магазин
			|	И ТаблицаДни.СтатусКассовогоДня = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
			|	И ТаблицаДни.Проведен
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Дата
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаДни.Ссылка КАК КассовыйДень,
			|	ТаблицаДни.НачалоКассовогоДня КАК НачалоКассовогоДня,
			|	ВЫБОР
			|		КОГДА ТаблицаДни.ОкончаниеКассовогоДня = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ВЫБОР
			|					КОГДА &ТекущаяДата > ДОБАВИТЬКДАТЕ(ТаблицаДни.НачалоКассовогоДня, ДЕНЬ, 1)
			|						ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаДни.НачалоКассовогоДня, ДЕНЬ, 1)
			|					ИНАЧЕ &ТекущаяДата
			|				КОНЕЦ
			|		ИНАЧЕ ТаблицаДни.ОкончаниеКассовогоДня
			|	КОНЕЦ КАК ОкончаниеКассовогоДня
			|ИЗ
			|	Документ.КассовыйДень КАК ТаблицаДни
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
			|		ПО ТаблицаДни.Дата = Фильтр.Дата
			|ГДЕ
			|	ТаблицаДни.Магазин = &Магазин
			|	И ТаблицаДни.СтатусКассовогоДня = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
			|	И ТаблицаДни.Проведен"
			;
			Запрос.УстановитьПараметр("Магазин"		, Магазин);
			Запрос.УстановитьПараметр("ТекущаяДата"	, ТекущаяДата());

			РезультатЗапроса = Запрос.Выполнить();

			Если РезультатЗапроса.Пустой() Тогда

				ТекстОшибки	= "Отказано! Нет открытого кассового дня по магазину [" + Магазин + "].";

			Иначе

				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();

				Если НЕ (Источник.Дата >= Выборка.НачалоКассовогоДня И Источник.Дата <= Выборка.ОкончаниеКассовогоДня) Тогда

					ТекстОшибки	= "Отказано! Дата:время документа не попадает в период кассового дня по магазину [" + Магазин + "].";

				КонецЕсли;

			КонецЕсли;

			Если НЕ ПустаяСтрока(ТекстОшибки) Тогда

				ТекстОшибки = ТекстОшибки + Символы.ПС
				+ "(дата документа должна быть в интервале действия кассового дня)";

				Если ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда

						ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС
						+ "АДМИНИСТРАТОР - РАЗРЕШЕНО!";

				Иначе	Отказ = Истина;

				КонецЕсли;

				Сообщить(ТекстОшибки);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

#КонецОбласти










