#Область ОбщийИнтерфейс

Процедура ЗаписьИсторииЗапроса(СчетПокупателюСсылка,СтрокаЗапроса, ТекстЗапроса, Результат)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсторияЗапросовВБанк.НомерЗапроса КАК НомерЗапроса
		|ИЗ
		|	РегистрСведений.ИсторияЗапросовВБанк КАК ИсторияЗапросовВБанк
		|ГДЕ
		|	ИсторияЗапросовВБанк.СчетНаОплату = &СчетНаОплату
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерЗапроса УБЫВ";
	
	Запрос.УстановитьПараметр("СчетНаОплату", СчетПокупателюСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		НомерЗаписи = Выборка.НомерЗапроса + 1;
	Иначе 
		НомерЗаписи = 1;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ИсторияЗапросовВБанк.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.СчетНаОплату.Установить(СчетПокупателюСсылка);
	НаборЗаписей.Отбор.НомерЗапроса.Установить(НомерЗаписи);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.СчетНаОплату = СчетПокупателюСсылка;
	НоваяЗапись.НомерЗапроса = НомерЗаписи;
	НоваяЗапись.СтрокаЗапроса = СтрокаЗапроса; 
	НоваяЗапись.ДанныеЗапроса = ТекстЗапроса; 
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, Результат.ДанныеОтвета, Новый НастройкиСериализацииJSON);	
	
	
	НоваяЗапись.ДанныеОтвета = ЗаписьJSON.Закрыть();	
	
	
	
	//НоваяЗапись.ДанныеОтвета = Результат.ДанныеОтвета; 
	
	НаборЗаписей.Записать(); 
	
КонецПроцедуры


//	Сичкаренко 03.02.2021
Функция ПодатьЗаявкуНаОформлениеКредита(СчетПокупателюСсылка, КредитнаяПрограмма, ТекстСообщения = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Отказ = Ложь;
	
	ДанныеСоединения = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);
	
	Если ПроверитьНазначениеСоединения(ДанныеСоединения, КредитнаяПрограмма, ТекстСообщения, Отказ) Тогда

		Результат = ОбменСБанкамиАльфаБанкСлужебный.ВыполнитьЗапросКСерверу("api/PartnerInstallment/v1.0/createOrder"
				, ПолучитьJSONЗаявкиНаОформлениеПокупкиЧастями(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)
				, ДанныеСоединения
		);
		
		//Запись в тестовый регистр
		
		ЗаписьИсторииЗапроса(СчетПокупателюСсылка,"api/PartnerInstallment/v1.0/createOrder"
				,ПолучитьJSONЗаявкиНаОформлениеПокупкиЧастями(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)
				,Результат);
		

		Если НЕ Результат.Ошибка Тогда

			УстановитьДанныеОтветаБанка(СчетПокупателюСсылка, КредитнаяПрограмма, Результат.ДанныеОтвета, Отказ);

		Иначе

			Отказ = Истина;
			ТекстСообщения = Результат.ОписаниеОшибки;

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

Функция ПодатьЗаявкуНаОформлениеВозврата(СчетПокупателюСсылка, КредитнаяПрограмма, ТекстСообщения = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Отказ = Ложь;
	
	ДанныеСоединения = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);
	
	Если ПроверитьНазначениеСоединения(ДанныеСоединения, КредитнаяПрограмма, ТекстСообщения, Отказ) Тогда

		Результат = ОбменСБанкамиАльфаБанкСлужебный.ВыполнитьЗапросКСерверу("api/PartnerInstallment/v1.0/reversalOrder"
				, ПолучитьJSONЗаявкиНаОформлениеВозврата(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)
				, ДанныеСоединения
		);
		
		//Запись в тестовый регистр
		
		ЗаписьИсторииЗапроса(СчетПокупателюСсылка,"api/PartnerInstallment/v1.0/reversalOrder"
				,ПолучитьJSONЗаявкиНаОформлениеВозврата(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)
				,Результат);
		

		Если НЕ Результат.Ошибка Тогда

			УстановитьДанныеОтветаБанка(СчетПокупателюСсылка, КредитнаяПрограмма, Результат.ДанныеОтвета, Отказ);

		Иначе

			Отказ = Истина;
			ТекстСообщения = Результат.ОписаниеОшибки;

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

//	Сичкаренко 03.02.2021
Функция ОбновитьЗаявкуНаОформлениеКредита(СчетПокупателюСсылка, КредитнаяПрограмма, ТекстСообщения = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Отказ = Ложь;
	
	ДанныеСоединения = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);
	
	Если ПроверитьНазначениеСоединения(ДанныеСоединения, КредитнаяПрограмма, ТекстСообщения, Отказ) Тогда

		Результат = ОбменСБанкамиАльфаБанкСлужебный.ВыполнитьЗапросКСерверу("api/PartnerInstallment/v1.0/updateOrder"
				, ПолучитьJSONОбновленияЗаявкиНаОформлениеПокупкиЧастями(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)
				, ДанныеСоединения
		);
		//Запись в тестовый регистр
		
		ЗаписьИсторииЗапроса(СчетПокупателюСсылка,"api/PartnerInstallment/v1.0/updateOrder"
				,ПолучитьJSONОбновленияЗаявкиНаОформлениеПокупкиЧастями(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)
				,Результат);
		
		Если НЕ Результат.Ошибка Тогда

			УстановитьДанныеОтветаБанка(СчетПокупателюСсылка, КредитнаяПрограмма, Результат.ДанныеОтвета, Отказ);

		Иначе

			Отказ = Истина;
			ТекстСообщения = Результат.ОписаниеОшибки;

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

Функция ЗакрытьЗаявкуНаОформлениеКредита(СчетПокупателюСсылка, КредитнаяПрограмма, ТекстСообщения = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Отказ = Ложь;
	
	ДанныеСоединения = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);
	
	Если ПроверитьНазначениеСоединения(ДанныеСоединения, КредитнаяПрограмма, ТекстСообщения, Отказ) Тогда

		Результат = ОбменСБанкамиАльфаБанкСлужебный.ВыполнитьЗапросКСерверу("api/PartnerInstallment/v1.0/confirmOrder"
				, ПолучитьJSONИДБанкаЗаявки(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)
				, ДанныеСоединения
		);
		//Запись в тестовый регистр
		
		ЗаписьИсторииЗапроса(СчетПокупателюСсылка,"api/PartnerInstallment/v1.0/confirmOrder"
				,ПолучитьJSONИДБанкаЗаявки(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)
				,Результат);

		Если НЕ Результат.Ошибка Тогда

			УстановитьДанныеОтветаБанка(СчетПокупателюСсылка, КредитнаяПрограмма, Результат.ДанныеОтвета, Отказ);

		Иначе

			Отказ = Истина;
			ТекстСообщения = Результат.ОписаниеОшибки;

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

Функция ОтменитьЗаявкуНаОформлениеКредита(СчетПокупателюСсылка, КредитнаяПрограмма, ТекстСообщения = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;
	
	ДанныеОтвета     = ОбменСБанкамиСервер.СтруктураОтветаВнешнейСистемы();
	ДанныеСоединения = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);

	Если ПроверитьНазначениеСоединения(ДанныеСоединения, КредитнаяПрограмма, ДанныеОтвета.ТекстСообщения, ДанныеОтвета.Отказ) Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаРегистра.ИдентификаторБанка КАК ИдентификаторБанка,
		|	ТаблицаРегистра.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ДанныеКредитныхПрограмм КАК ТаблицаРегистра
		|ГДЕ
		|	ТаблицаРегистра.СчетНаОплатуПокупателю = &СчетНаОплатуПокупателю
		|	И ТаблицаРегистра.УслугаБанка = &КредитнаяПрограмма"
		);
		Запрос.УстановитьПараметр("СчетНаОплатуПокупателю", СчетПокупателюСсылка);
		Запрос.УстановитьПараметр("КредитнаяПрограмма", КредитнаяПрограмма);
		
		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда

			Выборка = Результат.Выбрать();
			Выборка.Следующий();

			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

			JSON.ЗаписатьСвойство("orderId", Выборка.Идентификатор, ЗаписьJSON);
			JSON.ЗаписатьСвойство("messageId", Выборка.ИдентификаторБанка, ЗаписьJSON);
			JSON.ЗаписатьСвойство("cancelId", "test", ЗаписьJSON);
			JSON.ЗаписатьСвойство("rasonCancel", "test", ЗаписьJSON);

			ЗаписьJSON.ЗаписатьКонецОбъекта();
			ТекстЗапроса = ЗаписьJSON.Закрыть();

			Результат = ОбменСБанкамиАльфаБанкСлужебный.ВыполнитьЗапросКСерверу("api/PartnerInstallment/v1.0/cancelOrder"
					, ТекстЗапроса
					, ДанныеСоединения
			);
			//Запись в тестовый регистр
			
			ЗаписьИсторииЗапроса(СчетПокупателюСсылка,"api/PartnerInstallment/v1.0/cancelOrder"
					,ТекстЗапроса
					,Результат);


			Если НЕ Результат.Ошибка Тогда
				
				УстановитьДанныеОтветаБанка(СчетПокупателюСсылка, КредитнаяПрограмма, Результат.ДанныеОтвета, ДанныеОтвета.Отказ);
				
			Иначе

				ДанныеОтвета.Отказ = Истина;
				ДанныеОтвета.ТекстСообщения = Результат.ОписаниеОшибки;

			КонецЕсли;

		Иначе

			ДанныеОтвета.Отказ = Истина;
			ДанныеОтвета.ТекстСообщения = "Не обнаружена кредитная программа «" + КредитнаяПрограмма + "» по «" + СчетПокупателюСсылка + "»";

		КонецЕсли;

	КонецЕсли;

	Возврат ДанныеОтвета;

КонецФункции

Функция ПодтверждениеВыдачиТовараКлиенту(СчетПокупателюСсылка, КредитнаяПрограмма)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;
	
	ДанныеОтвета     = ОбменСБанкамиСервер.СтруктураОтветаВнешнейСистемы();
	ТекстСообщения = "";
	
	ДанныеОтвета.Отказ = Не ЗакрытьЗаявкуНаОформлениеКредита(СчетПокупателюСсылка, КредитнаяПрограмма, ТекстСообщения);
	ДанныеОтвета.ТекстСообщения = ТекстСообщения;
	
	Возврат ДанныеОтвета;

КонецФункции

Функция ПроверитьСостояниеЗаявкиНаОформлениеКредита(СчетПокупателюСсылка, КредитнаяПрограмма, ТекстСообщения = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;
	
	ВозвратПоПрограмме = Не (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетПокупателюСсылка, "ОснованиеЗаявки", Документы.СчетНаОплатуПокупателю.ПустаяСсылка()) = Документы.СчетНаОплатуПокупателю.ПустаяСсылка());
	
	Если ВозвратПоПрограмме Тогда 
		АдресЗапроса = "api/PartnerInstallment/v1.0/getReversal";
	Иначе 
		АдресЗапроса = "api/PartnerInstallment/v1.0/getOrder";
	КонецЕсли;
	
	Отказ = Ложь;

	ДанныеСоединения = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);

	Если ПроверитьНазначениеСоединения(ДанныеСоединения, КредитнаяПрограмма, ТекстСообщения, Ложь) Тогда

		Результат = ОбменСБанкамиАльфаБанкСлужебный.ВыполнитьЗапросКСерверу(АдресЗапроса
				, ПолучитьJSONИДБанкаЗаявки(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)
				, ДанныеСоединения
				, "GET"
		);
		//Запись в тестовый регистр
		
		ЗаписьИсторииЗапроса(СчетПокупателюСсылка,АдресЗапроса
				,ПолучитьJSONИДБанкаЗаявки(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)
				,Результат);

				
		Если НЕ Результат.Ошибка Тогда

			УстановитьДанныеОтветаБанка(СчетПокупателюСсылка, КредитнаяПрограмма, Результат.ДанныеОтвета, Отказ);
			
			Если Не ВозвратПоПрограмме Тогда 
				ПолучитьДанныеГарантийногоПисьма(СчетПокупателюСсылка, КредитнаяПрограмма, ТекстСообщения);
			КонецЕсли;
			

		Иначе

			Отказ = Истина;
			ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
			+ Результат.ОписаниеОшибки;

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

Функция ПолучитьДанныеГарантийногоПисьма(СчетПокупателюСсылка, КредитнаяПрограмма, ТекстСообщения = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;
	
	Отказ = Ложь;

	ДанныеСоединения = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);

	Если ПроверитьНазначениеСоединения(ДанныеСоединения, КредитнаяПрограмма, ТекстСообщения, Ложь) Тогда

		Результат = ОбменСБанкамиАльфаБанкСлужебный.ВыполнитьЗапросКСерверу("api/PartnerInstallment/v1.0/getGuarantee"
				, ПолучитьJSONИДБанкаЗаявки(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)
				, ДанныеСоединения
				, "GET"
		);

		//Запись в тестовый регистр
		
		ЗаписьИсторииЗапроса(СчетПокупателюСсылка,"api/PartnerInstallment/v1.0/getGuarantee"
				,ПолучитьJSONИДБанкаЗаявки(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)
				,Результат);

		Если НЕ Результат.Ошибка Тогда
			
			ДанныеОтвета = Новый Структура(
				"ГарантийноеПисьмоДанные, ГарантийноеПисьмоПодтверждено"
				, Результат.ДанныеОтвета
				, Истина);
				
			Статус = Результат.ДанныеОтвета.statusCode;	
			Если Статус = "GUARANTEE_IS_OK" Или Статус = "GUARANTEE_MAIL_OK" Тогда 
				ДанныеОтвета.ГарантийноеПисьмоПодтверждено = Истина;
			Иначе 
				ДанныеОтвета.ГарантийноеПисьмоПодтверждено = Ложь;
			КонецЕсли;
			
			ОбменСБанкамиСервер.УстановитьДанныеОтветаБанка(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеОтвета);

		Иначе

			Отказ = Истина;
			ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
			+ Результат.ОписаниеОшибки;

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

#КонецОбласти

#Область ПолучениеДанныхОбъектовИФормированиеТекстовJSON

Функция ПолучитьJSONЗаявкиНаОформлениеПокупкиЧастями(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)

	Результаты = ОбменСБанкамиСервер.ДанныеЗаказаПокупателя(СчетПокупателюСсылка, КредитнаяПрограмма);
	Шапка = Результаты[1].Выбрать();
	Шапка.Следующий();
	Программы = Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Товары = Результаты[3].Выбрать();

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	JSON.ЗаписатьСвойство("mPhone"			, ПодготовитьНомерТелефона(Шапка.НомерТелефона), ЗаписьJSON);
	JSON.ЗаписатьСвойство("orderId"			, Шапка.Идентификатор, ЗаписьJSON);
	JSON.ЗаписатьСвойство("orderSum"		, Шапка.СуммаКредита * 100, ЗаписьJSON, );
	JSON.ЗаписатьСвойство("shopId"			, Шапка.Код, ЗаписьJSON, );
	JSON.ЗаписатьСвойство("callBackURL"		, "https://antoshka.ua", ЗаписьJSON);
	JSON.ЗаписатьСвойство("eMailPartner"	, "test@mytestemail.com", ЗаписьJSON);

		Если Программы.Следующий() Тогда 
			ЗначенияГлубины = Программы.Выбрать();
			Если ЗначенияГлубины.Следующий() Тогда 
				JSON.ЗаписатьСвойство("panEnd"			, Формат(ЗначенияГлубины.КартаКлиентаДляОплатыЧастями,"ЧЦ=4; ЧН=Ноль; ЧВН=; ЧГ="), ЗаписьJSON);
				JSON.ЗаписатьСвойство("orderTerm"		, ЗначенияГлубины.ПериодПредоставления, ЗаписьJSON);
			КонецЕсли;
		КонецЕсли;

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	ТекстЗапроса = ЗаписьJSON.Закрыть();

	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьJSONЗаявкиНаОформлениеВозврата(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)

	Результаты = ОбменСБанкамиСервер.ДанныеЗаказаПокупателя(СчетПокупателюСсылка.ОснованиеЗаявки, КредитнаяПрограмма);
	Шапка = Результаты[1].Выбрать();
	Шапка.Следующий();
	Программы = Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Товары = Результаты[3].Выбрать();

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	JSON.ЗаписатьСвойство("orderId"			, Шапка.Идентификатор, ЗаписьJSON);
	JSON.ЗаписатьСвойство("reversalId"		, Шапка.ИдентификаторВозврата, ЗаписьJSON);
	JSON.ЗаписатьСвойство("reversalSum"		, Шапка.СуммаКредита * 100, ЗаписьJSON, );
	JSON.ЗаписатьСвойство("shopId"		, Шапка.Код, ЗаписьJSON, );
	JSON.ЗаписатьСвойство("callBackURL"		, "https://antoshka.ua", ЗаписьJSON);


	ЗаписьJSON.ЗаписатьКонецОбъекта();

	ТекстЗапроса = ЗаписьJSON.Закрыть();

	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьJSONОбновленияЗаявкиНаОформлениеПокупкиЧастями(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)

	Результаты = ОбменСБанкамиСервер.ДанныеЗаказаПокупателя(СчетПокупателюСсылка, КредитнаяПрограмма);
	Шапка = Результаты[1].Выбрать();
	Шапка.Следующий();
	Программы = Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Товары = Результаты[3].Выбрать();

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	JSON.ЗаписатьСвойство("mPhone"			, ПодготовитьНомерТелефона(Шапка.НомерТелефона), ЗаписьJSON);
	JSON.ЗаписатьСвойство("orderId"			, Шапка.Идентификатор, ЗаписьJSON);
	JSON.ЗаписатьСвойство("orderSum"		, Шапка.СуммаКредита * 100, ЗаписьJSON, );

		Если Программы.Следующий() Тогда 
			ЗначенияГлубины = Программы.Выбрать();
			Если ЗначенияГлубины.Следующий() Тогда 
				JSON.ЗаписатьСвойство("panEnd"			, Формат(ЗначенияГлубины.КартаКлиентаДляОплатыЧастями,"ЧЦ=4; ЧН=Ноль; ЧВН=; ЧГ="), ЗаписьJSON);
				JSON.ЗаписатьСвойство("orderTerm"		, ЗначенияГлубины.ПериодПредоставления, ЗаписьJSON);
			КонецЕсли;
		КонецЕсли;

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	ТекстЗапроса = ЗаписьJSON.Закрыть();

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьJSONИДБанкаЗаявки(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)

	ВозвратПоПрограмме = Не (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетПокупателюСсылка, "ОснованиеЗаявки", Документы.СчетНаОплатуПокупателю.ПустаяСсылка()) = Документы.СчетНаОплатуПокупателю.ПустаяСсылка());

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ВозвратПоПрограмме
	|			ТОГДА ТаблицаРегистра.ИдентификаторБанкаВозврата
	|		ИНАЧЕ ТаблицаРегистра.ИдентификаторБанка
	|	КОНЕЦ КАК messageId
	|ИЗ
	|	РегистрСведений.ДанныеКредитныхПрограмм КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.СчетНаОплатуПокупателю = &СчетНаОплатуПокупателю
	|	И ТаблицаРегистра.УслугаБанка = &КредитнаяПрограмма"
	);
	Запрос.УстановитьПараметр("СчетНаОплатуПокупателю", ?(ВозвратПоПрограмме, СчетПокупателюСсылка.ОснованиеЗаявки, СчетПокупателюСсылка));
	Запрос.УстановитьПараметр("КредитнаяПрограмма"    , КредитнаяПрограмма);
	Запрос.УстановитьПараметр("ВозвратПоПрограмме"    , ВозвратПоПрограмме);
	
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		Выборка = Результат.Выбрать();
		Выборка.Следующий();

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписьJSON.ЗаписатьНачалоОбъекта();

		JSON.ЗаписатьСвойство("messageId", Выборка.messageId, ЗаписьJSON);

		ЗаписьJSON.ЗаписатьКонецОбъекта();

		ТекстЗапроса = ЗаписьJSON.Закрыть();

	Иначе

		ТекстЗапроса = "";

	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьJSONПолученияГарантийногоПисьма(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаРегистра.ИдентификаторБанка КАК messageId 
	|ИЗ
	|	РегистрСведений.ДанныеКредитныхПрограмм КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.СчетНаОплатуПокупателю = &СчетНаОплатуПокупателю
	|	И ТаблицаРегистра.УслугаБанка = &КредитнаяПрограмма"
	);
	Запрос.УстановитьПараметр("СчетНаОплатуПокупателю", СчетПокупателюСсылка);
	Запрос.УстановитьПараметр("КредитнаяПрограмма"    , КредитнаяПрограмма);
	
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		Выборка = Результат.Выбрать();
		Выборка.Следующий();

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписьJSON.ЗаписатьНачалоОбъекта();

		JSON.ЗаписатьСвойство("messageId", Выборка.messageId, ЗаписьJSON);

		ЗаписьJSON.ЗаписатьКонецОбъекта();

		ТекстЗапроса = ЗаписьJSON.Закрыть();

	Иначе

		ТекстЗапроса = "";

	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьНазначениеСоединения(ДанныеСоединения, КредитнаяПрограмма, ТекстСообщения, Отказ)
	
	Если НЕ ДанныеСоединения.Найден Тогда

		Отказ = Истина;
		ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
		+ "Для программы «" + КредитнаяПрограмма + "» данные НЕ обнаружены.";

	ИначеЕсли НЕ ДанныеСоединения.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Альфабанк Тогда

		Отказ = Истина;

		Если НЕ ДанныеСоединения.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Альфабанк Тогда

			ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
			+ "Кредитная программа «" + КредитнаяПрограмма + "» не назначена для Альфабанка!";
		
		Иначе

			ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
			+ "Кредитная программа «" + КредитнаяПрограмма + "» не имеет web-адресации!";

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

Функция ПодготовитьНомерТелефона(Знач НомерТелефона)

	Если ЗначениеЗаполнено(НомерТелефона) Тогда
		
		НомерТелефона = "+" + ОтправкаSMS.ПодготовитьНомерТелефона(НомерТелефона);

	Иначе

		НомерТелефона = "";

	КонецЕсли;

	Возврат НомерТелефона;

КонецФункции

#КонецОбласти


#Область ПоддержкаРегистраСведенийДанныеКредитныхПрограмм

Функция ВыполнитьДвиженияПоРегиструДанныеКредитныхПрограмм(ДокументСсылка, УслугаБанка, Отказ, ДанныеПрограммы = Неопределено)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ДанныеПрограммы = ОбщегоНазначенияПовтИсп.ПолучитьСтруктуруЗаписиРегистра("РегистрСведений.ДанныеКредитныхПрограмм");

	НаборЗаписей = РегистрыСведений.ДанныеКредитныхПрограмм.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СчетНаОплатуПокупателю.Установить(ДокументСсылка);

	НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда

		ЗаписьНабора    = Неопределено;
		ВыполнитьЗапись = Истина;

	Иначе

		ЗаписьНабора = НаборЗаписей[0];
	//	проверяем, зарегистрирован ли этот документв БД банка..
		ВыполнитьЗапись = ПустаяСтрока(ЗаписьНабора.ИдентификаторБанка);

	КонецЕсли;

	Если ВыполнитьЗапись ИЛИ ЗаписьНабора = Неопределено Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Магазин КАК Магазин,
		|	ТабличнаяЧасть.УслугаБанкаПериодПредоставления КАК УслугаБанкаПериодПредоставления,
		|	ТабличнаяЧасть.УслугаБанка.Банк.Интеграция КАК Интеграция,
		|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента,
		|	ТаблицаДокумента.Дата КАК ДатаДокумента
		|ПОМЕСТИТЬ Фильтр
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.КредитныеПрограммы КАК ТабличнаяЧасть
		|		ПО ТаблицаДокумента.Ссылка = ТабличнаяЧасть.Ссылка
		|			И (ТабличнаяЧасть.НомерСтроки = 1)
		|			И (ТабличнаяЧасть.УслугаБанка = &УслугаБанка)
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &ДокументСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Ведущая.Магазин КАК Магазин,
		|	Ведущая.УслугаБанкаПериодПредоставления КАК УслугаБанкаПериодПредоставления,
		|	Ведущая.Интеграция КАК Интеграция,
		|	Ведущая.СуммаДокумента КАК СуммаДокумента,
		|	ВЫБОР
		|		КОГДА Ведущая.СуммаДокумента > ЕСТЬNULL(ТаблицаОплата.СуммаПредоплаты, 0)
		|			ТОГДА Ведущая.СуммаДокумента - ЕСТЬNULL(ТаблицаОплата.СуммаПредоплаты, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаКредита,
		|	Ведущая.ДатаДокумента КАК ДатаДокумента
		|ИЗ
		|	Фильтр КАК Ведущая
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Ведущая.Ссылка КАК Ссылка,
		|			СУММА(ТаблицаОплата.Сумма) КАК СуммаПредоплаты
		|		ИЗ
		|			Фильтр КАК Ведущая
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.Оплата КАК ТаблицаОплата
		|				ПО Ведущая.Ссылка = ТаблицаОплата.Ссылка
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Ведущая.Ссылка) КАК ТаблицаОплата
		|		ПО Ведущая.Ссылка = ТаблицаОплата.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Фильтр"
		);
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
		Запрос.УстановитьПараметр("УслугаБанка"   , УслугаБанка);
		
		РеквизитыВыборка = Запрос.Выполнить().Выбрать();
		
		Если РеквизитыВыборка.Следующий() Тогда

			Если ЗаписьНабора = Неопределено Тогда

				ЗаписьНабора = НаборЗаписей.Добавить();

				ЗаписьНабора.СчетНаОплатуПокупателю = НаборЗаписей.Отбор.СчетНаОплатуПокупателю.Значение;
				ЗаписьНабора.ДокументПродажи = Документы.ЧекККМ.ПолучитьСсылку();
				ЗаписьНабора.Идентификатор   = СтрЗаменить(СокрЛП(ДокументСсылка.УникальныйИдентификатор()), "-", "");

			КонецЕсли;

			ЗаписьНабора.УслугаБанка = УслугаБанка;

			ЗаписьНабора.Магазин    = РеквизитыВыборка.Магазин;
			ЗаписьНабора.Интеграция = РеквизитыВыборка.Интеграция;
			ЗаписьНабора.ДатаДокумента = РеквизитыВыборка.ДатаДокумента;
			ЗаписьНабора.УслугаБанкаПериодПредоставления = РеквизитыВыборка.УслугаБанкаПериодПредоставления;

			Если НЕ ЗаписьНабора.Интеграция Тогда

				ЗаписьНабора.Статус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.ОжидаетсяОтгрузка;

			КонецЕсли;

			ЗаписьНабора.СуммаДокумента = РеквизитыВыборка.СуммаДокумента;
			ЗаписьНабора.СуммаКредита   = РеквизитыВыборка.СуммаКредита;

			НаборЗаписей.Записать();

		КонецЕсли;

	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ДанныеПрограммы, ЗаписьНабора);

	Возврат НЕ Отказ;

КонецФункции

Процедура УстановитьДанныеОтветаБанка(ДокументСсылка, УслугаБанка, ДанныеОтвета, Отказ)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	НаборЗаписей = РегистрыСведений.ДанныеКредитныхПрограмм.СоздатьНаборЗаписей();
	
	ВозвратПоПрограмме = Не (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ОснованиеЗаявки", Документы.СчетНаОплатуПокупателю.ПустаяСсылка()) = Документы.СчетНаОплатуПокупателю.ПустаяСсылка());

	Если ВозвратПоПрограмме Тогда 
		
		НаборЗаписей.Отбор.СчетНаОплатуПокупателю.Установить(ДокументСсылка.ОснованиеЗаявки);
		
	Иначе 
		
		НаборЗаписей.Отбор.СчетНаОплатуПокупателю.Установить(ДокументСсылка);
		
	КонецЕсли;

	НаборЗаписей.Прочитать();

	Если НЕ НаборЗаписей.Количество() = 0 Тогда

		ЗаписьНабора = НаборЗаписей[0];
		
		Если ДанныеОтвета.Свойство("statusCode") И СокрЛП(ДанныеОтвета.statusCode) = "IN_PROCESSING" Тогда
			
			Если ДанныеОтвета.Свойство("messageId") Тогда
				Если ВозвратПоПрограмме Тогда
					ЗаписьНабора.ИдентификаторБанкаВозврата = ДанныеОтвета.messageId;
				Иначе
					ЗаписьНабора.ИдентификаторБанка = ДанныеОтвета.messageId;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		//Если ДанныеОтвета.Свойство("Отгружено") Тогда

		//	ЗаписьНабора.Отгружено = ДанныеОтвета.Отгружено;

		//КонецЕсли;

		//Если ДанныеОтвета.Свойство("СуммаКредитаВозврат") Тогда

		//	ЗаписьНабора.СуммаКредитаВозврат = ДанныеОтвета.СуммаКредитаВозврат;

		//КонецЕсли;

		//Если ДанныеОтвета.Свойство("ДанныеВозвратов") Тогда

		//	ЗаписьНабора.ДанныеВозвратов = Новый ХранилищеЗначения(ДанныеОтвета.ДанныеВозвратов, Новый СжатиеДанных(9));

		//КонецЕсли;

		//Если ДанныеОтвета.Свойство("Отменить") Тогда

		//	ЗаписьНабора.Отменить = ДанныеОтвета.Отменить;

		//КонецЕсли;

		//Если ДанныеОтвета.Свойство("ГарантийноеПисьмоДанные") Тогда

		//	ЗаписьНабора.ГарантийноеПисьмоДанные = Новый ХранилищеЗначения(ДанныеОтвета.ГарантийноеПисьмоДанные);

		//	Если ДанныеОтвета.Свойство("ГарантийноеПисьмоПодтверждено") Тогда

		//		ЗаписьНабора.ГарантийноеПисьмоПодтверждено = ДанныеОтвета.ГарантийноеПисьмоПодтверждено;

		//	КонецЕсли;

		//КонецЕсли;

		АнализОтветаБанка(ДанныеОтвета, ЗаписьНабора, Отказ, ВозвратПоПрограмме);

		Если НаборЗаписей.Модифицированность() Тогда

			НаборЗаписей.Записать();

		КонецЕсли;

	Иначе

		ВызватьИсключение "Не обнаружено данных счёта по кредитной программе";

	КонецЕсли;

КонецПроцедуры

Процедура АнализОтветаБанка(ДанныеОтвета, ЗаписьНабора, Отказ, ВозвратПоПрограмме = Ложь)

	Если ДанныеОтвета.Свойство("statusCode") Тогда
		
		СоответствиеОтветаСтатусу = Новый Соответствие();
		СоответствиеОтветаСтатусу.Вставить("IN_PROCESSING", "Замовлення в обробці!");
		СоответствиеОтветаСтатусу.Вставить("NO_PRODUCT", "Не знайдено продукт розстрочки");
		СоответствиеОтветаСтатусу.Вставить("UPDATE_IS_OK", "Дані успішно оновлено");
		СоответствиеОтветаСтатусу.Вставить("INST_ALLOWED_OK", "За карткою можлива розстрочка, відбувається перевірка");
		СоответствиеОтветаСтатусу.Вставить("PURCHASE_IS_OK", "Покупка успішна, відправлено Гарантійний лист");
		СоответствиеОтветаСтатусу.Вставить("PRE_PURCHASE_IS_OK", "Покупка успішна, відправлено Гарантійний лист");
		СоответствиеОтветаСтатусу.Вставить("CANCEL_IS_OK", "Скасування замовлення в обробці");
		СоответствиеОтветаСтатусу.Вставить("MATCH_ORDERID", "Замовлення з таким номером вже існує!");
		СоответствиеОтветаСтатусу.Вставить("INST_ALLOWED_FAIL", "За карткою неможливо оформити розстрочку");
		СоответствиеОтветаСтатусу.Вставить("FINAL_CANCEL_OK", "Обробка скасування замовлення успішна");
		СоответствиеОтветаСтатусу.Вставить("REVERSAL_IS_OK", "Повернення замовлення оброблено успішно");
		СоответствиеОтветаСтатусу.Вставить("FINAL_ORDER_OK", "Товар видано клієнту");
		СоответствиеОтветаСтатусу.Вставить("CONFIRM_IS_OK", "Замовлення підтверджено!");
		СоответствиеОтветаСтатусу.Вставить("INVALID_MPHONE", "Указано некоректний номер телефона");
		СоответствиеОтветаСтатусу.Вставить("INVALID_PANEND", "Указано некоректний номер картки");
		СоответствиеОтветаСтатусу.Вставить("INVALID_ORDERSUM", "Указано некоректну суму розстрочки");
		СоответствиеОтветаСтатусу.Вставить("INVALID_ORDERTERM", "Указано некоректний строк розстрочки");
		СоответствиеОтветаСтатусу.Вставить("INVALID_CALLBACKURL", "Указано некоректний URL");
		СоответствиеОтветаСтатусу.Вставить("ORDERSUM_EXCEEDS", "Сума розстрочки перевищує допустиме значення");
		СоответствиеОтветаСтатусу.Вставить("PURCHASE_IS_FAIL", "Покупка неуспішна! Замовлення не оформлено!");
		СоответствиеОтветаСтатусу.Вставить("PRE_PURCHASE_IS_FAIL", "Блокування коштів неуспішне! Замовлення не оформлено!");
		СоответствиеОтветаСтатусу.Вставить("PRE_PURCHASE_IS_FAIL_EX", "Блокування коштів неуспішне! Замовлення не оформлено!");
		СоответствиеОтветаСтатусу.Вставить("PURCHASE_IS_FAIL_EX", "Покупка неуспішна! Замовлення не оформлено!");
		СоответствиеОтветаСтатусу.Вставить("ORDERSUM_LOW", "Сума розстрочки нижче допустимого значення");

		Статус    = ДанныеОтвета.statusCode;
		Подстатус = "";

		ЗаписьНабораОтветБанка = ДанныеОтвета.statusCode;
		ЗаписьНабораСтатус = "";

		Если ДанныеОтвета.Свойство("statusText") Тогда

			ЗаписьНабораОтветБанка = ЗаписьНабораОтветБанка + Символы.ПС + ДанныеОтвета.statusText;

		КонецЕсли;

		Если Статус = "IN_PROCESSING" Или 
			 Статус = "UPDATE_IS_OK" Тогда
			
			ЗаписьНабораСтатус = ?(ВозвратПоПрограмме, Перечисления.СтатусыЗаявкиНаОформлениеКредита.РассматриваетсяВозврат,
														Перечисления.СтатусыЗаявкиНаОформлениеКредита.Рассматривается);
			
		ИначеЕсли Статус = "INST_ALLOWED_OK" Тогда 
			
			ЗаписьНабораСтатус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.СогласованоБанком;
			
		ИначеЕсли Статус = "PURCHASE_IS_OK" Или
				  Статус = "PRE_PURCHASE_IS_OK" Или 
				  Статус = "INST_ALLOWED_FAIL" Или 
				  Статус = "INVALID_ORDERID" Тогда
				  
			ЗаписьНабораСтатус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.ОжидаетсяОтгрузка;
			
		ИначеЕсли Статус = "CANCEL_IS_OK" Тогда
			
			ЗаписьНабораСтатус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.ЗаявкаНаОтмену;
			
		ИначеЕсли Статус = "NO_PARTNERID" Или
				  Статус = "PURCHASE_IS_FAIL" Или 
				  Статус = "PRE_PURCHASE_IS_FAIL" Или 
				  Статус = "PRE_PURCHASE_IS_FAIL_EX" Или 
				  Статус = "PURCHASE_IS_FAIL_EX" Или 
				  Статус = "MATCH_ORDERID" Или 
				  Статус = "INST_ALLOWED_FAIL" Или 
				  Статус = "INVALID_ORDERID" Тогда
				  
			ЗаписьНабораСтатус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.Отклонено;
			
		ИначеЕсли Статус = "FINAL_CANCEL_OK" Тогда
			
			ЗаписьНабораСтатус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.ОтменаСогласована;

		ИначеЕсли Статус = "REVERSAL_IS_OK" Тогда
			
			ЗаписьНабораСтатус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.ВозвратСогласован;

		ИначеЕсли Статус = "FINAL_ORDER_OK" Или 
				  Статус = "CONFIRM_IS_OK" Тогда
				  
			ЗаписьНабораСтатус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.ЗаявкаЗавершена;

		ИначеЕсли Статус = "INVALID_MPHONE" Или
				  Статус = "INVALID_PANEND" Или 
				  Статус = "INVALID_ORDERSUM" Или 
				  Статус = "INVALID_ORDERTERM" Или 
				  Статус = "INVALID_CALLBACKURL" Или 
				  Статус = "ORDERSUM_EXCEEDS" Или 
				  Статус = "ORDERSUM_LOW" Тогда

			Отказ = Истина;
		Иначе 
			//Неизвестный статус
			Отказ = Истина;
			
		КонецЕсли;
		
		ОтветПоСтатусу = СоответствиеОтветаСтатусу.Получить(Статус);
		
		ЗаписьНабораОтветБанка = ЗаписьНабораОтветБанка + Символы.ПС + ?(ОтветПоСтатусу = Неопределено,"",ОтветПоСтатусу);

		Если ВозвратПоПрограмме Тогда 
			
			ЗаписьНабора.ОтветБанкаВозврат = ЗаписьНабораОтветБанка;
			Если Не ПустаяСтрока(ЗаписьНабораСтатус) Тогда 
				ЗаписьНабора.СтатусВозврата = ЗаписьНабораСтатус;
			КонецЕсли;
			
		Иначе 
			
			ЗаписьНабора.ОтветБанка = ЗаписьНабораОтветБанка;
			Если Не ПустаяСтрока(ЗаписьНабораСтатус) Тогда 
				ЗаписьНабора.Статус = ЗаписьНабораСтатус;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры 


#КонецОбласти