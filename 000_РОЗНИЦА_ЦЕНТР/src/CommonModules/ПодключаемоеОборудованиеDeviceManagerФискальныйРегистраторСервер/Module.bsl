
Функция ПолучитьQRкод(QRСтрока, УровеньКоррекции, Размер) Экспорт

	ГенераторQRКода = ПолучитьГенераторQRкода();

	Если ГенераторQRКода = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Попытка

		ДвоичныеДанныеКартинки = ГенераторQRКода.GenerateQRCode(QRСтрока, УровеньКоррекции, Размер);

	Исключение

		Сообщить(ОписаниеОшибки());

	КонецПопытки;

	Возврат ДвоичныеДанныеКартинки;
	
КонецФункции	

Функция ПолучитьГенераторQRкода() Экспорт

	ГенераторQRкода	= Неопределено;
	ИмяКомпоненты	= "QR" + СтрЗаменить(СокрЛП(Новый УникальныйИдентификатор), "-", "");	//	LNK 02.03.2024 15:35:22

	Попытка

		Если ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПечатиQRКода", ИмяКомпоненты) Тогда	//	LNK 02.03.2024 15:35:32

				ГенераторQRкода = Новый("AddIn." + ИмяКомпоненты + ".QRCodeExtension");

		Иначе	Сообщить("Не вдалося підключити компонент генерації QR коду");		

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();

	КонецПопытки;

	Возврат ГенераторQRкода;

КонецФункции	

Функция ПолучитьТабличныйДокументЧек(ОтветККМ, ПараметрыЗакрытия, ТекстЗаголовка = "", URL = "", ТабличныйДокумент = Неопределено, Копия = Ложь, НулевойЧек = Ложь) Экспорт
	
	Макет = ПолучитьОбщийМакет("ПРРО_ШаблонЧекаDeviceManagerФискальныйРегистратор");

	Если ТабличныйДокумент = Неопределено Тогда

			ТабличныйДокумент = Новый ТабличныйДокумент;
			ТабличныйДокумент.Вывод = ИспользованиеВывода.Разрешить;	//	LNK 08.01.2023 09:15:22
			ТабличныйДокумент.ИмяПараметровПечати = "ПРРО_ПАРАМЕТРЫ_ПЕЧАТИ_ЧЕК_ПРИНТЕР";

	Иначе	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		

	КонецЕсли;

	URL			= "";
	КодЧекаККМ	= "";
	printinfo	= Неопределено;
	goods		= "";
	pays		= "";
	taxes		= "";

	Если ЗначениеЗаполнено(ОтветККМ) Тогда

		Попытка

			Если ТипЗнч(ОтветККМ) = Тип("Строка") Тогда

					сОтветККМ = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.РасшифроватьJSON(ОтветККМ);

			Иначе	сОтветККМ = ОтветККМ;	//	LNK 27.10.2023 09:34:27 - копия, по данным, хранящимся в чеке

			КонецЕсли;

			сИнфо = сОтветККМ.Получить("info");

		Исключение

			ТекстОшибки = ОписаниеОшибки();

		КонецПопытки;

		Если ТипЗнч(сИнфо) = Тип("Соответствие") Тогда

			URL = ПолучитьЗначениеСоответствия(сИнфо, "qr", URL);
			URL = Лев(URL, СтрНайти(URL, "?MAC:"));
			КодЧекаККМ = ПолучитьЗначениеСоответствия(сИнфо, "doccode", КодЧекаККМ);
			
			task =  ПолучитьЗначениеСоответствия(сИнфо, "task", "");
			ЭтоВозврат	= (task = 2);
			cashier		=  ПолучитьЗначениеСоответствия(сИнфо, "cashier", СокрЛП(ПользователиКлиентСервер.ТекущийПользователь()));	//	LNK 09.03.2024 08:01:44
			
			//printinfo
			printinfo = ПолучитьЗначениеСоответствия(сИнфо, "printinfo", printinfo);
			
			Если ТипЗнч(printinfo) = Тип("Соответствие") Тогда
				
				goods	=  ПолучитьЗначениеСоответствия(printinfo, "goods", goods);
				pays	=  ПолучитьЗначениеСоответствия(printinfo, "pays", pays);
				taxes	=  ПолучитьЗначениеСоответствия(printinfo, "taxes", taxes);

			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.fis_code	= ПолучитьЗначениеСоответствия(printinfo, "fis_code", ""); 
			ОбластьМакета.Параметры.name		= ПолучитьЗначениеСоответствия(printinfo, "name", ""); 
			ОбластьМакета.Параметры.shopad		= ПолучитьЗначениеСоответствия(printinfo, "shopad", ""); 
			ОбластьМакета.Параметры.shopname	= ПолучитьЗначениеСоответствия(printinfo, "shopname", ""); 
			ОбластьМакета.Параметры.vat_code	= ПолучитьЗначениеСоответствия(printinfo, "vat_code", ""); 
			//ОбластьМакета.Параметры.fisid		= СтрЗаменить(ПолучитьЗначениеСоответствия(printinfo, "fisid", ""), Символы.НПП, "");
			ОбластьМакета.Параметры.fisid		= "";
		//	LNK 27.10.2023 11:27:56
			ОбластьМакета.Параметры.copy		= ?(Копия = Истина, "КОПИЯ", "");

			ТабличныйДокумент.Вывести(ОбластьМакета);	//	ПараметрыЗакрытия.Объект.Ответственный

			Если НулевойЧек Тогда

				ОбластьМакета = Макет.ПолучитьОбласть("ПТекст_Центр");
				ОбластьМакета.Параметры.Комментарий = "СЛУЖБОВИЙ ДОКУМЕНТ";

				ТабличныйДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("ПТекст_Центр");
				ОбластьМакета.Параметры.Комментарий = "НУЛЬОВИЙ ЧЕК";
				ТабличныйДокумент.Вывести(ОбластьМакета);

			КонецЕсли;

			//2025-02-27 sa  кассира убираем. согласно последней форме чека он не нужен.
			//ОбластьМакета = Макет.ПолучитьОбласть("О_Текст");
			//ОбластьМакета.Параметры.Комментарий = "Касир: " + cashier;
			//ТабличныйДокумент.Вывести(ОбластьМакета);

			ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
			ТабличныйДокумент.Вывести(ОбластьМакета);		

			Для каждого СтрокаТоваров ИЗ goods Цикл

				ОбластьМакета = Макет.ПолучитьОбласть("Товар");
				ОбластьМакета.Параметры.cnt = Формат(ПолучитьЗначениеСоответствия(СтрокаТоваров, "cnt", ""),"ЧДЦ=3"); 
				ОбластьМакета.Параметры.price = Формат(ПолучитьЗначениеСоответствия(СтрокаТоваров, "price", ""),"ЧДЦ=2");  			
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				code2 = ПолучитьЗначениеСоответствия(СтрокаТоваров, "code2", "");

				Если ЗначениеЗаполнено(code2) Тогда

					ОбластьМакета = Макет.ПолучитьОбласть("УКТЗЕД");
					ОбластьМакета.Параметры.code2 = СокрЛП(code2);
					ТабличныйДокумент.Вывести(ОбластьМакета);

				КонецЕсли;

				ОбластьМакета = Макет.ПолучитьОбласть("ТоварИмя");

				ОбластьМакета.Параметры.name = ПолучитьЗначениеСоответствия(СтрокаТоваров, "name", ""); 

				ОбластьМакета.Параметры.cost =  Формат(ПолучитьЗначениеСоответствия(СтрокаТоваров, "cost", ""),"ЧДЦ=2");  
				ОбластьМакета.Параметры.taxlit = ПолучитьЗначениеСоответствия(СтрокаТоваров, "taxlit", ""); 
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				disc = ПолучитьЗначениеСоответствия(СтрокаТоваров, "disc", ""); 

				Если ЗначениеЗаполнено(disc) Тогда

					ОбластьМакета = Макет.ПолучитьОбласть("Скидка");
					ОбластьМакета.Параметры.disc = Формат(disc,"ЧДЦ=2"); 
					ОбластьМакета.Параметры.taxlit = ПолучитьЗначениеСоответствия(СтрокаТоваров, "taxlit", ""); 
					
					ТабличныйДокумент.Вывести(ОбластьМакета);

				КонецЕсли;
				
				comment = ПолучитьЗначениеСоответствия(СтрокаТоваров, "comment", "");

				Если ЗначениеЗаполнено(comment) Тогда

					ОбластьМакета = Макет.ПолучитьОбласть("Комментарий");
					ОбластьМакета.Параметры.comment = comment; 
					
					ТабличныйДокумент.Вывести(ОбластьМакета);

				КонецЕсли;

				ОбластьМакета = Макет.ПолучитьОбласть("ПробелУзкий");
				ТабличныйДокумент.Вывести(ОбластьМакета);		

			КонецЦикла;

			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		

			
			//2025-02-27 sa для теста смотреть что там шлет ПРРО в ответ.
			//ПДФФайлСтр = "";
			//ПДФФайлДанные = Base64Значение(Сред(ПолучитьЗначениеСоответствия(сОтветККМ, "pf_image", ""),23));
			//ИмяФайла_ = КаталогВременныхФайлов()+"Receipt_"+Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd_HH-mm-ss")+".png";
			//ПДФФайлДанные.Записать(ИмяФайла_);
			
			ВидОплатыУжеВыводилсяНаПечать = Ложь;
			СдачаПоЧеку = 0;
			Для каждого СтрокаОплат ИЗ pays Цикл

				ТипОплаты = СтрокаОплат.Получить("type");
				//2025-02-27 sa После товара указывается идентификатор эквайера (если есть)
				//выводим информацию о платежном средстве
				ПлатежнаяСистема = ПолучитьЗначениеСоответствия(СтрокаОплат, "paysys", "");
				МерчантИД = ПолучитьЗначениеСоответствия(СтрокаОплат, "bank_id", "");
				ТерминалИД = ПолучитьЗначениеСоответствия(СтрокаОплат, "term_id", "");
				Картка = ПолучитьЗначениеСоответствия(СтрокаОплат, "cardmask", "");
				НомерТранзакции = ПолучитьЗначениеСоответствия(СтрокаОплат, "rrn", "");
				КодАвторизации = ПолучитьЗначениеСоответствия(СтрокаОплат, "auth_code", "");
				ДопИнфо = ПолучитьЗначениеСоответствия(СтрокаОплат, "comment", "");
				
				Если ТипОплаты = 1 ИЛИ ТипОплаты = 2 ИЛИ ТипОплаты = 5 Тогда   //оплата по IBAN (не должна быть здесь) или оплата картой  или кредит
					//тут в ДопИнфо должно быть название банка эквайера (Приватбанк/Райфайзен/...)
					ВывестиПараметрЧека(ТабличныйДокумент,Макет,ДопИнфо,"",Истина);
				КонецЕсли;
				ВывестиПараметрЧека(ТабличныйДокумент,Макет,"ІДЕНТ. ЕКВАЙРА",МерчантИД);
				ВывестиПараметрЧека(ТабличныйДокумент,Макет,"ТЕРМІНАЛ",ТерминалИД);
				///Вид оплаты выводится один раз только для первого вида оплаты
				Если ВидОплатыУжеВыводилсяНаПечать = Ложь Тогда
					Если ЭтоВозврат Тогда
						ВывестиПараметрЧека(ТабличныйДокумент,Макет,"ПОВЕРНЕННЯ","",Истина);
					Иначе
						ВывестиПараметрЧека(ТабличныйДокумент,Макет,"ПРОДАЖ","",Истина);
					КонецЕсли;
					ВидОплатыУжеВыводилсяНаПечать = Истина;
				КонецЕсли;
				ВывестиПараметрЧека(ТабличныйДокумент,Макет,"ЕПЗ",Картка);
				ВывестиПараметрЧека(ТабличныйДокумент,Макет,"ПЛАТІЖНА СИСТЕМА",ПлатежнаяСистема);
				ВывестиПараметрЧека(ТабличныйДокумент,Макет,"КОД АВТ.",КодАвторизации);
				ВывестиПараметрЧека(ТабличныйДокумент,Макет,"RRN",НомерТранзакции);
					
					
				ТипОплаты = СтрокаОплат.Получить("type");
				Если ТипОплаты = 0 Тогда   //наличка
					ОбластьМакета = Макет.ПолучитьОбласть("Оплата");
					ОбластьМакета.Параметры.sum = Формат(ПолучитьЗначениеСоответствия(СтрокаОплат, "sum", "") ,"ЧДЦ=2") + " грн.";
					
					ОбластьМакета.Параметры.type = ИмяТипаОплаты(СтрокаОплат); 
					
					ТабличныйДокумент.Вывести(ОбластьМакета);
					
					СдачаПоЧеку = СдачаПоЧеку + ПолучитьЗначениеСоответствия(СтрокаОплат, "change", 0);
					
				Иначе
					ОбластьМакета = Макет.ПолучитьОбласть("Оплата");
					ОбластьМакета.Параметры.sum = Формат(ПолучитьЗначениеСоответствия(СтрокаОплат, "sum", "") ,"ЧДЦ=2") + " грн.";
					Если ТипОплаты = 1 ИЛИ ТипОплаты = 2 ИЛИ ТипОплаты = 5 Тогда   //оплата по IBAN (не должна быть здесь) или оплата картой  или кредит
						ОбластьМакета.Параметры.type = "БЕЗГОТІВКОВА"; 
					Иначе
						ОбластьМакета.Параметры.type = "ІНШЕ"; 
					КонецЕсли;
					ТабличныйДокумент.Вывести(ОбластьМакета);
					ОбластьМакета = Макет.ПолучитьОбласть("ФормаОплаты");
					ОбластьМакета.Параметры.typen = ИмяТипаОплаты(СтрокаОплат); 
					ТабличныйДокумент.Вывести(ОбластьМакета);
					
					
				КонецЕсли;
			КонецЦикла;
			
			sum_topay	= ПолучитьЗначениеСоответствия(printinfo, "sum_topay", "");
			sum_0		= ПолучитьЗначениеСоответствия(printinfo, "sum_0", "");
			sum_disc	= ПолучитьЗначениеСоответствия(printinfo,"sum_disc", "");
			round		= sum_0 - sum_topay - sum_disc;
			
			Если НЕ round = 0 Тогда

				ОбластьМакета = Макет.ПолучитьОбласть("Округления");
				ОбластьМакета.Параметры.round = Формат(round, "ЧДЦ=2");  
				ТабличныйДокумент.Вывести(ОбластьМакета);	

			КонецЕсли;

			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		
			
			ОбластьМакета = Макет.ПолучитьОбласть("Итог");
			ОбластьМакета.Параметры.sum_topay = Формат(sum_0-sum_disc, "ЧДЦ=2; ЧН=0,00") + " грн.";  
			ТабличныйДокумент.Вывести(ОбластьМакета);	

			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		

			Для каждого СтрокаНалогов ИЗ taxes Цикл

				tax_sum = Формат(ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_sum", ""),"ЧДЦ=2");  

				Если ЗначениеЗаполнено(tax_sum) Тогда

					ОбластьМакета = Макет.ПолучитьОбласть("Налог");
					ОбластьМакета.Параметры.tax_percent = Формат(ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_percent", ""),"ЧДЦ=2");  
					ОбластьМакета.Параметры.tax_name = ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_name", ""); 
					ОбластьМакета.Параметры.tax_sum = Формат(ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_sum", ""),"ЧДЦ=2");  

					ТабличныйДокумент.Вывести(ОбластьМакета);

				КонецЕсли;

				ex_sum = ПолучитьЗначениеСоответствия(СтрокаНалогов, "ex_sum", "");

				Если ЗначениеЗаполнено(ex_sum) Тогда

					ОбластьМакета = Макет.ПолучитьОбласть("Акциз");
					ОбластьМакета.Параметры.ex_percent = Формат(ПолучитьЗначениеСоответствия(СтрокаНалогов, "ex_percent", ""),"ЧДЦ=2");  
					ОбластьМакета.Параметры.ex_name = ПолучитьЗначениеСоответствия(СтрокаНалогов, "ex_name", ""); 
					ОбластьМакета.Параметры.ex_sum = Формат(ex_sum, "ЧДЦ=2; ЧН=0,00");  

					ТабличныйДокумент.Вывести(ОбластьМакета);

				КонецЕсли

			КонецЦикла;

			Если НЕ НулевойЧек Тогда

				ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		

				ОбластьМакета = Макет.ПолучитьОбласть("КОплате");

				Если ЭтоВозврат Тогда

						ОбластьМакета.Параметры.ДоОплаты = "До повернення"

				Иначе	ОбластьМакета.Параметры.ДоОплаты = "До сплати"

				КонецЕсли;

				ОбластьМакета.Параметры.sum_topay = Формат(ПолучитьЗначениеСоответствия(printinfo, "sum_topay", ""), "ЧДЦ=2") + " грн."; 
				ТабличныйДокумент.Вывести(ОбластьМакета);	

				//2025-02-28 Sa Сдача теперь обязательное поле для налички
				Если Не ЭтоВозврат Тогда
					ВывестиПараметрЧека(ТабличныйДокумент,Макет,"РЕШТА",""+Формат(СдачаПоЧеку, "ЧДЦ=2; ЧН=0.00")+" грн.");
				КонецЕсли;

			КонецЕсли;

			Если НЕ НулевойЧек И ПараметрыЗакрытия.ПечатьПодвала = Истина Тогда	//	LNK 25.03.2022 10:19:48

				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалИнфо|Тело");
				ОбластьМакета.Параметры.ТекстПодвала = Символы.ПС + СокрЛП(ПараметрыЗакрытия.ТекстПодвала);

				ТабличныйДокумент.Вывести(ОбластьМакета);	

				ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		

			КонецЕсли;

			ОбластьМакета = Макет.ПолучитьОбласть("ФНомер");
			ОбластьМакета.Параметры.fn = ПолучитьЗначениеСоответствия(printinfo, "fisn", ""); 
			ОбластьМакета.Параметры.dt = ПолучитьЗначениеСоответствия(printinfo, "dt", ""); 
			ТабличныйДокумент.Вывести(ОбластьМакета);	
			
			Если НЕ НулевойЧек И ЗначениеЗаполнено(URL) Тогда

				РазмерQRВПискселях = 250;
				ДанныеQRКода = ПолучитьQRкод(URL, 0, РазмерQRВПискселях);
				
				Область = Макет.ПолучитьОбласть("Картинка"); 
				Рисунок = Область.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка); 
				
				Рисунок.Верх	=  0; 
				Рисунок.Высота	= 38;//59; 
				Рисунок.Ширина	= 38;//59;         
				Рисунок.Лево	=  2;//8; 
				
				Рисунок.ГраницаСверху	= Ложь;
				Рисунок.ГраницаСнизу	= Ложь;
				Рисунок.ГраницаСлева	= Ложь;
				Рисунок.ГраницаСправа	= Ложь;

				Рисунок.Картинка = Новый Картинка(ДанныеQRКода);
				
				ТабличныйДокумент.АвтоМасштаб = Истина;
				ТабличныйДокумент.ОтображатьСетку = Ложь;
				
				ТабличныйДокумент.Вывести(Область);

			Иначе

				ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		

			КонецЕсли;

			ОбластьМакета = Макет.ПолучитьОбласть("Подвал2");
			//ОбластьМакета.Параметры.isOffline = Формат(ПолучитьЗначениеСоответствия(printinfo, "isOffline", ""),"ЧДЦ=2"); 
			ОбластьМакета.Параметры.mac = ПолучитьЗначениеСоответствия(printinfo, "mac", ""); 
			ОбластьМакета.Параметры.Онлайн =  ?(НЕ ПолучитьЗначениеСоответствия(printinfo, "isOffline", ""), "Онлайн", "Офлайн"); 		
			ОбластьМакета.Параметры.fisid = СтрЗаменить(ПолучитьЗначениеСоответствия(printinfo, "fisid", ""), Символы.НПП, "");
			ТекстЗаголовка = "ФН ПРРО" + ОбластьМакета.Параметры.fisid;

			Если ЭтоВозврат Тогда

					ОбластьМакета.Параметры.Чек = "ВИДАТКОВИЙ ЧЕК"

			Иначе	ОбластьМакета.Параметры.Чек = "ФІСКАЛЬНИЙ ЧЕК"

			КонецЕсли;

			ОбластьМакета.Параметры.manuf = ПолучитьЗначениеСоответствия(printinfo, "manuf", ""); 
			ТабличныйДокумент.Вывести(ОбластьМакета);	

		КонецЕсли;

	Иначе 

		Сообщить("Документ не прийнято сервером ПРРО, друк неможливий!");
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;

КонецФункции

Процедура ВывестиПараметрЧека(ТабличныйДокумент,Макет,ИмяПараметра,ЗначениеПараметра = "",ПроверятьПараметр=Ложь)
	
	Если ПроверятьПараметр Тогда
		Если ЗначениеЗаполнено(ИмяПараметра) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Параметр");
			ОбластьМакета.Параметры.Параметр = ИмяПараметра;
			ОбластьМакета.Параметры.Значение = ЗначениеПараметра; 
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Параметр");
			ОбластьМакета.Параметры.Параметр = ИмяПараметра;
			ОбластьМакета.Параметры.Значение = ЗначениеПараметра; 
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


//	LNK 12.03.2024 13:48:10
Функция ПолучитьТабличныйДокументСлужебный(ОтветККМ, ТекстЗаголовка)	Экспорт

	Макет = ПолучитьОбщийМакет("ПРРО_ШаблонЧекаDeviceManagerФискальныйРегистратор");

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Вывод = ИспользованиеВывода.Разрешить;
	ТабличныйДокумент.ИмяПараметровПечати = "ПРРО_ПАРАМЕТРЫ_ПЕЧАТИ_СЛУЖ_ДЕНЬГИ_ПРИНТЕР";

	URL			= "";
	КодЧекаККМ	= "";
	printinfo	= Неопределено;

	Если ТипЗнч(ОтветККМ) = Тип("Строка") Тогда

		Попытка

			сИнфо = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.РасшифроватьJSON(ОтветККМ).Получить("info");

			URL = ПолучитьЗначениеСоответствия(сИнфо, "qr", URL);
			URL = Лев(URL, СтрНайти(URL, "?MAC:"));
			КодЧекаККМ = ПолучитьЗначениеСоответствия(сИнфо, "doccode", КодЧекаККМ);
			
		//	task (тип number). Для виконання службового внесення = 3, для винесення = 4
		//	Дорівнює тому ж значенню що прийшло в запиті. Для відкриття зміни завжди 0.
			task =  ПолучитьЗначениеСоответствия(сИнфо, "task", 0);

			Если task = 3 ИЛИ task = 4 Тогда

				printinfo = ПолучитьЗначениеСоответствия(сИнфо, "printinfo", printinfo);
			
				ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
				ОбластьМакета.Параметры.fis_code	= ПолучитьЗначениеСоответствия(printinfo, "fis_code", ""); 
				ОбластьМакета.Параметры.name		= ПолучитьЗначениеСоответствия(printinfo, "name", ""); 
				ОбластьМакета.Параметры.shopad		= ПолучитьЗначениеСоответствия(printinfo, "shopad", ""); 
				ОбластьМакета.Параметры.shopname	= ПолучитьЗначениеСоответствия(printinfo, "shopname", ""); 
				ОбластьМакета.Параметры.vat_code	= ПолучитьЗначениеСоответствия(printinfo, "vat_code", ""); 
				ОбластьМакета.Параметры.fisid		= СтрЗаменить(ПолучитьЗначениеСоответствия(printinfo, "fisid", ""), Символы.НПП, "");
				ТекстЗаголовка = ОбластьМакета.Параметры.fisid;

				ТабличныйДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("ПТекст_Центр");
				ОбластьМакета.Параметры.Комментарий = "СЛУЖБОВЕ " + ?(task = 3, "ВНЕСЕННЯ", "ВИЛУЧЕННЯ");
				ТекстЗаголовка = ОбластьМакета.Параметры.Комментарий + " " + ТекстЗаголовка;

				ТабличныйДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("О_Текст");
				ОбластьМакета.Параметры.Комментарий = "Касир: " + СокрЛП(ПараметрыСеанса.ТекущийПользователь);
				ТабличныйДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
				ТабличныйДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("Оплата");
				ОбластьМакета.Параметры.sum = Формат(ПолучитьЗначениеСоответствия(printinfo, "sum_topay", ""), "ЧДЦ=2") + " грн.";
				ОбластьМакета.Параметры.type = "ГОТІВКОЮ"; 
				
				ТабличныйДокумент.Вывести(ОбластьМакета);

			//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

				ОбластьМакета = Макет.ПолучитьОбласть("ФНомер");
				ОбластьМакета.Параметры.fn = ПолучитьЗначениеСоответствия(printinfo, "fisn", ""); 
				ОбластьМакета.Параметры.dt = ПолучитьЗначениеСоответствия(printinfo, "dt", ""); 
				ТабличныйДокумент.Вывести(ОбластьМакета);	
				
				Если ЗначениеЗаполнено(URL) Тогда

					РазмерQRВПискселях = 250;
					ДанныеQRКода = ПолучитьQRкод(URL, 0, РазмерQRВПискселях);
					
					Область = Макет.ПолучитьОбласть("Картинка"); 
					Рисунок = Область.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка); 
					
					Рисунок.Верх	=  0; 
					Рисунок.Высота	= 38;//59; 
					Рисунок.Ширина	= 38;//59;         
					Рисунок.Лево	=  2;//8; 
					
					Рисунок.ГраницаСверху	= Ложь;
					Рисунок.ГраницаСнизу	= Ложь;
					Рисунок.ГраницаСлева	= Ложь;
					Рисунок.ГраницаСправа	= Ложь;

					Рисунок.Картинка = Новый Картинка(ДанныеQRКода);
					
					ТабличныйДокумент.АвтоМасштаб = Истина;
					ТабличныйДокумент.ОтображатьСетку = Ложь;
					
					ТабличныйДокумент.Вывести(Область);

				Иначе

					ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		

				КонецЕсли;

				ОбластьМакета = Макет.ПолучитьОбласть("Подвал2");
				ОбластьМакета.Параметры.Онлайн	=  ?(НЕ ПолучитьЗначениеСоответствия(printinfo, "isOffline", ""), "Онлайн", "Офлайн"); 		
				ОбластьМакета.Параметры.fisid	= СтрЗаменить(ПолучитьЗначениеСоответствия(printinfo, "fisid", ""), Символы.НПП, "");

				ОбластьМакета.Параметры.manuf = ПолучитьЗначениеСоответствия(printinfo, "manuf", ""); 
				ТабличныйДокумент.Вывести(ОбластьМакета);	

			Иначе

				Сообщить("Ймовірно, касову зміну на ПРРО не відкрито! Друк неможливий.");

			КонецЕсли;

		Исключение

			ТекстОшибки = ОписаниеОшибки();

		КонецПопытки;

	Иначе

		Сообщить("Документ не прийнято сервером ПРРО, друк неможливий!");

	КонецЕсли;

	Возврат ТабличныйДокумент;

КонецФункции

//	LNK 29.12.2023 18:31:23
Функция ПолучитьТабличныйДокументОтчет(НаименованиеОтчета, сИнфо, ОтчетПериодический = Ложь, РасширенныйПериодескийОтчет = Ложь)	Экспорт

	Макет = ПолучитьОбщийМакет("ПРРО_ШаблонЧекаDeviceManagerФискальныйРегистратор");

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Вывод = ИспользованиеВывода.Разрешить;	//	LNK 09.01.2023 06:51:11
	ТабличныйДокумент.ИмяПараметровПечати = "ПРРО_ПАРАМЕТРЫ_ПЕЧАТИ_ОТЧЁТ_ПРИНТЕР";

	printinfo = ПолучитьЗначениеСоответствия(сИнфо, "printheader", Новый Соответствие);
	receipt	  = ПолучитьЗначениеСоответствия(сИнфо, "receipt"	 , Новый Соответствие);	//	LNK 09.01.2023 07:07:00
	taxes	  = ПолучитьЗначениеСоответствия(сИнфо, "taxes"		 , Новый Массив);
	pays	  = ПолучитьЗначениеСоответствия(сИнфо, "pays"		 , Новый Массив);
	money	  = ПолучитьЗначениеСоответствия(сИнфо, "money"		 , Новый Массив);
	summary	  = ПолучитьЗначениеСоответствия(сИнфо, "summary"	 , Новый Соответствие);
	lastcheck = ПолучитьЗначениеСоответствия(сИнфо, "lastcheck"	 , Новый Соответствие);
	reportes  = ПолучитьЗначениеСоответствия(сИнфо, "reports"	 , Новый Массив);
	
	КодОтчета	= ПолучитьЗначениеСоответствия(сИнфо, "doccode", "");
	НомерОтчета	= ПолучитьЗначениеСоответствия(сИнфо, "docno", "");
	ДатаОтчета	= ПолучитьЗначениеСоответствия(сИнфо, "dt", "");

	Область = Макет.ПолучитьОбласть("Заголовок|Тело");
	Область.Параметры.name = НаименованиеОтчета + ?(ПустаяСтрока(НомерОтчета), "", " No." + НомерОтчета);

	Если ОтчетПериодический = Истина Тогда

		Первый	  = reportes[0];
		Последний = reportes[reportes.Количество() - 1];

		Область.Параметры.name = Область.Параметры.name
		+ Символы.ПС + "з  '" + ПолучитьЗначениеСоответствия(Первый   , "docno", "") + "' " + ДатаDM(ПолучитьЗначениеСоответствия(Первый   , "dt", ""))
		+ Символы.ПС + "по '" + ПолучитьЗначениеСоответствия(Последний, "docno", "") + "' " + ДатаDM(ПолучитьЗначениеСоответствия(Последний, "dt", ""));

	Иначе

		Область.Параметры.name = Область.Параметры.name
		+ Символы.ПС + "вiд " + ДатаDM(ДатаОтчета);

	КонецЕсли;

	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Подчеркивание|Тело"));		

	ТабличныйДокумент.Вывести(Область);

	Область = Макет.ПолучитьОбласть("Шапка|Тело");

	Область.Параметры.name		= ПолучитьЗначениеСоответствия(printinfo, "name", "");
	Область.Параметры.fis_code	= ПолучитьЗначениеСоответствия(printinfo, "fis_code", ""); 
	Область.Параметры.shopad	= ПолучитьЗначениеСоответствия(printinfo, "shopad", ""); 
	Область.Параметры.shopname	= ПолучитьЗначениеСоответствия(printinfo, "shopname", ""); 
	Область.Параметры.vat_code	= ПолучитьЗначениеСоответствия(printinfo, "vat_code", ""); 
	Область.Параметры.fisid		= СтрЗаменить(ПолучитьЗначениеСоответствия(printinfo, "fisid", ""), Символы.НПП, ""); 

	ТабличныйДокумент.Вывести(Область);
	
//	LNK 09.01.2023 07:25:09
	Область = Макет.ПолучитьОбласть("ШапкаОтчет|Тело");

	count_p	= ПолучитьЗначениеСоответствия(receipt, "count_p", 0);	//	продажа
	count_m	= ПолучитьЗначениеСоответствия(receipt, "count_m", 0);	//	возврат
	Область.Параметры.count_R	= count_p + count_m;
	Область.Параметры.count_p	= count_p;
	Область.Параметры.count_m	= count_m;

	ТабличныйДокумент.Вывести(Область);

	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

//	П Р О Д А Ж И
//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	Область = Макет.ПолучитьОбласть("О_Текст|Тело");
	Область.Параметры.Комментарий = "ПРОДАЖІ";
	ТабличныйДокумент.Вывести(Область);
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Подчеркивание|Тело"));		

	Область = Макет.ПолучитьОбласть("Оплата|Тело");

	base_sum_итог = 0;
	tax_sum_итог  = 0;

	Для каждого СтрокаНалогов Из taxes Цикл

		base_sum = ПолучитьЗначениеСоответствия(СтрокаНалогов, "base_sum_p", 0);  
		tax_sum	 = ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_sum_p" , 0);

		Если base_sum > 0 Тогда

			Область.Параметры.type = "Cума продажів:";
			Область.Параметры.sum  = Формат(base_sum, "ЧДЦ=2; ЧН=0.00");
			ТабличныйДокумент.Вывести(Область);

			Область.Параметры.type = "Cума податку (" + ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_fname", "") + ")";
			Область.Параметры.sum  = Формат(tax_sum, "ЧДЦ=2; ЧН=0.00");
			ТабличныйДокумент.Вывести(Область);

			base_sum_итог = base_sum_итог + base_sum;
			tax_sum_итог  = tax_sum_итог + tax_sum;

		КонецЕсли;

	КонецЦикла;

	Область.Параметры.type = "Обіг загальний:";
	Область.Параметры.sum  = Формат(base_sum_итог, "ЧДЦ=2; ЧН=0.00");
	ТабличныйДокумент.Вывести(Область);

	Область.Параметры.type = "Податок загальний";
	Область.Параметры.sum  = Формат(tax_sum_итог, "ЧДЦ=2; ЧН=0.00");
	ТабличныйДокумент.Вывести(Область);

	ТаблицаВыручки = Новый ТаблицаЗначений;
	ТаблицаВыручки.Колонки.Добавить("type", Новый ОписаниеТипов("Число"));
	ТаблицаВыручки.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	ТаблицаВыручки.Колонки.Добавить("СуммаПлюс"	, Новый ОписаниеТипов("Число"));
	ТаблицаВыручки.Колонки.Добавить("СуммаМинус", Новый ОписаниеТипов("Число"));

	Если НЕ pays.Количество() = 0 Тогда

		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

		Область = Макет.ПолучитьОбласть("О_Текст|Тело");
		Область.Параметры.Комментарий = "ОТРИМАНО ВІД КЛІЄНТІВ ЗА ФОРМАМИ ОПЛАТИ";
		ТабличныйДокумент.Вывести(Область);

		Область = Макет.ПолучитьОбласть("Оплата|Тело");

		Для каждого СтрокаОперации ИЗ pays Цикл

			sum_pay = ПолучитьЗначениеСоответствия(СтрокаОперации, "sum_p", 0);

			Если sum_pay > 0 Тогда

				Область.Параметры.type = ИмяТипаОплаты(СтрокаОперации);
				Область.Параметры.sum  = Формат(sum_pay, "ЧДЦ=2; ЧН=0.00");
				ТабличныйДокумент.Вывести(Область);

				СтрокаВыручки = ТаблицаВыручки.Добавить();
				СтрокаВыручки.type = ПолучитьЗначениеСоответствия(СтрокаОперации, "type", -1);
				СтрокаВыручки.name = Область.Параметры.type;
				СтрокаВыручки.СуммаПлюс = СтрокаВыручки.СуммаПлюс + sum_pay;

			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;

	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

	Область = Макет.ПолучитьОбласть("Оплата|Тело");
	Область.Параметры.type = "Кількість чеків:";
	Область.Параметры.sum  = Формат(count_p, "ЧДЦ=; ЧН=0");
	ТабличныйДокумент.Вывести(Область);

//	В О З В Р А Т Ы
//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

	Область = Макет.ПолучитьОбласть("О_Текст|Тело");
	Область.Параметры.Комментарий = "ПОВЕРНЕННЯ";
	ТабличныйДокумент.Вывести(Область);
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Подчеркивание|Тело"));		

	Область = Макет.ПолучитьОбласть("Оплата|Тело");

	base_sum_итог = 0;
	tax_sum_итог  = 0;

	Для каждого СтрокаНалогов Из taxes Цикл

		base_sum = ПолучитьЗначениеСоответствия(СтрокаНалогов, "base_sum_m", 0);  
		tax_sum	 = ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_sum_m" , 0);

		Если base_sum > 0 Тогда

			Область.Параметры.type = "Cума видано:";
			Область.Параметры.sum  = Формат(base_sum, "ЧДЦ=2; ЧН=0.00");
			ТабличныйДокумент.Вывести(Область);

			Область.Параметры.type = "Cума податку (" + ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_fname", "") + ")";
			Область.Параметры.sum  = Формат(tax_sum, "ЧДЦ=2; ЧН=0.00");
			ТабличныйДокумент.Вывести(Область);

			base_sum_итог = base_sum_итог + base_sum;
			tax_sum_итог  = tax_sum_итог + tax_sum;

		КонецЕсли;

	КонецЦикла;

	Область.Параметры.type = "Обіг загальний:";
	Область.Параметры.sum  = Формат(base_sum_итог, "ЧДЦ=2; ЧН=0.00");
	ТабличныйДокумент.Вывести(Область);

	Область.Параметры.type = "Податок загальний";
	Область.Параметры.sum  = Формат(tax_sum_итог, "ЧДЦ=2; ЧН=0.00");
	ТабличныйДокумент.Вывести(Область);

	Если НЕ pays.Количество() = 0 Тогда

		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

		Область = Макет.ПолучитьОбласть("О_Текст|Тело");
		Область.Параметры.Комментарий = "ВИДАНО КЛІЄНТАМ ЗА ФОРМАМИ ОПЛАТИ";
		ТабличныйДокумент.Вывести(Область);

		Область = Макет.ПолучитьОбласть("Оплата|Тело");

		Для каждого СтрокаОперации ИЗ pays Цикл

			sum_pay = ПолучитьЗначениеСоответствия(СтрокаОперации, "sum_m", 0);

			Если sum_pay > 0 Тогда

				Область.Параметры.type = ИмяТипаОплаты(СтрокаОперации);
				Область.Параметры.sum  = Формат(sum_pay, "ЧДЦ=2; ЧН=0.00");
				ТабличныйДокумент.Вывести(Область);

				СтрокаВыручки = ТаблицаВыручки.Найти(ПолучитьЗначениеСоответствия(СтрокаОперации, "type", -1), "type");

				Если СтрокаВыручки = Неопределено Тогда

					СтрокаВыручки = ТаблицаВыручки.Добавить();
					СтрокаВыручки.type = ПолучитьЗначениеСоответствия(СтрокаОперации, "type", -1);
					СтрокаВыручки.name = Область.Параметры.type;

				КонецЕсли;

				СтрокаВыручки.СуммаМинус = СтрокаВыручки.СуммаМинус + sum_pay;

			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;

	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

	Область = Макет.ПолучитьОбласть("Оплата|Тело");
	Область.Параметры.type = "Кількість чеків:";
	Область.Параметры.sum  = Формат(count_m, "ЧДЦ=; ЧН=0");
	ТабличныйДокумент.Вывести(Область);

//	Н А Л И Ч Н Ы Е   Д Е Н Ь Г И   В   К А С С Е
//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

	Область = Макет.ПолучитьОбласть("О_Текст|Тело");
	Область.Параметры.Комментарий = "ГОТІВКОВІ КОШТИ В КАСІ";
	ТабличныйДокумент.Вывести(Область);
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Подчеркивание|Тело"));		

	Область = Макет.ПолучитьОбласть("Оплата|Тело");

	sum_many = ПолучитьЗначениеСоответствия(сИнфо, "safe_start_shift", 0);
	Область.Параметры.type = "Початковий залишок:";
	Область.Параметры.sum  = Формат(sum_many, "ЧДЦ=2; ЧН=0.00");
	ТабличныйДокумент.Вывести(Область);

	Для каждого СтрокаОперации Из money Цикл

		sum_many = ПолучитьЗначениеСоответствия(СтрокаОперации, "sum_p", 0);

		Если sum_many > 0 Тогда

			Область.Параметры.type = "Внесення";
			Область.Параметры.sum  = Формат(sum_many, "ЧДЦ=2; ЧН=0.00");
			ТабличныйДокумент.Вывести(Область);

		КонецЕсли;

		sum_many = ПолучитьЗначениеСоответствия(СтрокаОперации, "sum_m", 0);

		Если sum_many > 0 Тогда

			Область.Параметры.type = "Вилучення";
			Область.Параметры.sum  = Формат(sum_many, "ЧДЦ=2; ЧН=0.00");
			ТабличныйДокумент.Вывести(Область);

		КонецЕсли;

	КонецЦикла;

	sum_many = ПолучитьЗначениеСоответствия(сИнфо, "safe", 0);
	Область.Параметры.type = "Кінцевий залишок:";
	Область.Параметры.sum  = Формат(sum_many, "ЧДЦ=2; ЧН=0.00");
	ТабличныйДокумент.Вывести(Область);

//	В Ы Р У Ч К А
//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	Если НЕ ТаблицаВыручки.Количество() = 0 Тогда

		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

		Область = Макет.ПолучитьОбласть("О_Текст|Тело");
		Область.Параметры.Комментарий = "ВИРУЧКА";
		ТабличныйДокумент.Вывести(Область);
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Подчеркивание|Тело"));		

		Область = Макет.ПолучитьОбласть("Оплата|Тело");

		ТаблицаВыручки.Сортировать("type");

		Для каждого СтрокаВыручки Из ТаблицаВыручки Цикл

			Область.Параметры.type = СтрокаВыручки.name;
			Область.Параметры.sum  = Формат(СтрокаВыручки.СуммаПлюс - СтрокаВыручки.СуммаМинус, "ЧДЦ=2; ЧН=0.00");
			ТабличныйДокумент.Вывести(Область);

		КонецЦикла;

	КонецЕсли;

	Область = Макет.ПолучитьОбласть("Оплата|Тело");
	НомерЧека = ПолучитьЗначениеСоответствия(lastcheck, "fisnum", "");

	Если НЕ ПустаяСтрока(НомерЧека) Тогда

		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Подчеркивание|Тело"));		

		Область.Параметры.type = "НОМЕР ОСТАННЬОГО ЧЕКА";
		Область.Параметры.sum  = НомерЧека;
		ТабличныйДокумент.Вывести(Область);

	КонецЕсли;

	Если ОтчетПериодический = Истина И РасширенныйПериодескийОтчет = Истина Тогда

		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Подчеркивание|Тело"));
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

		Область = Макет.ПолучитьОбласть("О_Текст|Тело");
		Область.Параметры.Комментарий = "РЕЄСТР ЗВІТІВ";
		ТабличныйДокумент.Вывести(Область);
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Подчеркивание|Тело"));		

		Для каждого Отчёт Из reportes Цикл

			Область = Макет.ПолучитьОбласть("О_Текст|Тело");
			Область.Параметры.Комментарий = "No.'" + ПолучитьЗначениеСоответствия(Отчёт, "docno", "") + "' " + ДатаDM(ПолучитьЗначениеСоответствия(Отчёт, "dt", ""));
			ТабличныйДокумент.Вывести(Область);
			Область = Макет.ПолучитьОбласть("Оплата|Тело");
			Область.Параметры.type = "Денний обіг:";
			Область.Параметры.sum  = Формат(ПолучитьЗначениеСоответствия(Отчёт, "docsum", 0), "ЧДЦ=2; ЧН=0.00");
			ТабличныйДокумент.Вывести(Область);

		КонецЦикла;

	КонецЕсли;

	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Подчеркивание|Тело"));		

	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

	Область = Макет.ПолучитьОбласть("О_Текст|Тело");
	Область.Параметры.Комментарий = ДатаОтчета;
	ТабличныйДокумент.Вывести(Область);

	Если ЗначениеЗаполнено(КодОтчета) Тогда

		Область.Параметры.Комментарий = "No." + НомерОтчета + "; Код: " + КодОтчета;
		ТабличныйДокумент.Вывести(Область);

	КонецЕсли;

	Возврат ТабличныйДокумент;

КонецФункции

Функция ПолучитьЗначениеСоответствия(Соответствие, Ключ, ЗначениеПоУмолчанию = Неопределено) Экспорт

	Если ТипЗнч(Соответствие) = Тип("Соответствие") Тогда	//	LNK 18.03.2024 09:51:48

		Значение = Соответствие.Получить(Ключ);

		Если Значение = Неопределено Тогда

			Возврат ЗначениеПоУмолчанию;

		КонецЕсли;

	Иначе	Возврат ЗначениеПоУмолчанию;

	КонецЕсли;

	Возврат Значение;

КонецФункции

Функция ДатаDM(ДатаСтрока)	//	LNK 31.12.2023 12:17:31

//	"30-06-2023 11:22:32"
	Возврат Лев(СокрЛП(ДатаСтрока), 10);

КонецФункции

Функция РасшифроватьJSON(Знач СтрокаJSON) Экспорт

	СтрокаJSON = СтрЗаменить(СтрокаJSON, Символ(65279), "");

	JR = Новый ЧтениеJSON;
	JR.УстановитьСтроку(СтрокаJSON);

	Возврат ПрочитатьJSON(JR, true);

КонецФункции

Функция ПолучитьУИДЧека(Ссылка) Экспорт

	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда

		Возврат Ссылка.Номер + "-" + Ссылка.УникальныйИдентификатор();

	КонецЕсли;

	Возврат Новый УникальныйИдентификатор;

КонецФункции

//	LNK 19.02.2022 06:07:25
//	Используется при формировании данных для ФР
Функция ПолучитьПараметрТипыОплаты(Идентификатор)	Экспорт

	ПараметрыУстройства = МенеджерОборудованияСервер.ПолучитьПараметрыУстройства(Идентификатор);

	Если НЕ ТипЗнч(ПараметрыУстройства) = Тип("Структура")	Тогда

		ПараметрыУстройства = Новый Структура;

	КонецЕсли;

	Если НЕ ПараметрыУстройства.Свойство("ТаблицаТиповОплат") Тогда

		МассивТипыОплат = Новый Массив;
		МассивТипыОплат.Добавить(ОбщегоНазначенияКлиентСервер.AAD(0, Перечисления.ТипыОплатЧекаККМ.Наличные));
		МассивТипыОплат.Добавить(ОбщегоНазначенияКлиентСервер.AAD(1, Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта));
		МассивТипыОплат.Добавить(ОбщегоНазначенияКлиентСервер.AAD(2, Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта));
		МассивТипыОплат.Добавить(ОбщегоНазначенияКлиентСервер.AAD(3, Перечисления.ТипыОплатЧекаККМ.Предоплата));
		МассивТипыОплат.Добавить(ОбщегоНазначенияКлиентСервер.AAD(4, Перечисления.ТипыОплатЧекаККМ.Послеплата));
		МассивТипыОплат.Добавить(ОбщегоНазначенияКлиентСервер.AAD(5, Перечисления.ТипыОплатЧекаККМ.БанковскийКредит));
		МассивТипыОплат.Добавить(ОбщегоНазначенияКлиентСервер.AAD(6, Перечисления.ТипыОплатЧекаККМ.ПодарочныйСертификат));

		ПараметрыУстройства.Вставить("ТаблицаТиповОплат", МассивТипыОплат);

	КонецЕсли;

	ПараметрТипыОплат = Новый Массив;
//	Порядок элементов имеет значение!

	Для каждого ЭлементМассива Из ПараметрыУстройства.ТаблицаТиповОплат Цикл

		ПараметрТипыОплат.Добавить(Новый Структура(
			"ID, ТипОплаты"
			, ЭлементМассива[0], ЭлементМассива[1]
			)
		);

	КонецЦикла;

	Возврат ПараметрТипыОплат;

КонецФункции

//	LNK 25.03.2022 10:30:43
Функция ОтправитьУведомлениеПокупателю(НомерТелефона, Контрагент, ДанныеПротокола, ВидСообщения, ИмяКомпьютера = "", СообщитьОбОшибке = Ложь)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Попытка

		Подключение = СервисыСервер.Подключение("RetailPack", СервисыСервер.Таймаут("RetailPack.SendSMS.Timeout"));

		ДанныеОтправителя = ОбщегоНазначенияКлиентСервер.СериализоватьJSON(
			Новый Структура(
				"ЭлементСтруктуры, Магазин, ИмяКомпьютера, Контрагент, Пользователь, ДанныеПротокола"
				, ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().ЭлементСтруктуры
				, ПараметрыСеанса.ТекущийМагазин
				, ИмяКомпьютера
				, Контрагент
				, ПараметрыСеанса.ТекущийПользователь
				, ДанныеПротокола	//	специфика РегистрыСведений.ПротоколСообщений
			)
		);

		ТекстСообщения = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей("За посиланням Ваш E-чек:") + Символы.ПС
						+ ДанныеПротокола.URL + Символы.ПС
						+ СтроковыеФункцииКлиентСервер.СтрокаЛатиницей("Гаряча лінія: 0800306063");

		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Подключение.SendSMS(
				  ОбщегоНазначенияКлиентСервер.РеквизитПеречисления(ВидСообщения)
				, ОтправкаSMS.ПодготовитьНомерТелефона(НомерТелефона)
				, ТекстСообщения
				, Ложь
				, ДанныеОтправителя
			)
		);
		РезультатУведомления = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();

		Если РезультатУведомления.Ошибка И СообщитьОбОшибке Тогда

			Сообщить(РезультатУведомления.ОписаниеОшибки);

		КонецЕсли;

	Исключение

		РезультатУведомления = ОтправкаSMS.ОписаниеРезультата();

		РезультатУведомления.Ошибка = Истина;
		РезультатУведомления.ОписаниеОшибки = ОписаниеОшибки();

	КонецПопытки;

	ЖурналСобытий.Регистрация("ПРРО.SMS", ?(РезультатУведомления.Ошибка = Истина, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Примечание)
		, Метаданные.Справочники.Контрагенты
		, Контрагент
		,
		, "Телефон: " + ОтправкаSMS.ПодготовитьНомерТелефона(НомерТелефона)
			+ Символы.ПС + ?(РезультатУведомления.Ошибка = Истина, РезультатУведомления.ОписаниеОшибки, "Повідомлення надіслано")
		,
		, Истина
		, Ложь
	);

	Возврат РезультатУведомления;

КонецФункции

//	LNK 26.02.2024 07:15:57
Функция УстановитьДанныеПротокола(Объект = Неопределено, URL = "", ДанныеPDF = Неопределено, ОтветПРРО = Неопределено)	Экспорт

	ДанныеПротокола = Новый Структура(
		"Объект, URL, ДанныеPDF, ОтветПРРО"
		, Объект
		, URL
		, ДанныеPDF
		, ?(ОтветПРРО = Неопределено, Новый Соответствие, ОтветПРРО)
	);

	Возврат ДанныеПротокола;

КонецФункции

//	LNK 25.12.2022 06:07:01
Функция ПолучитьДанныеЧека(ДокументСсылка)	Экспорт

	ДанныеПротокола = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.УстановитьДанныеПротокола();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаПротокола.Контрагент КАК Контрагент,
	|	ТаблицаПротокола.ВидСообщения КАК ВидСообщения,
	|	ТаблицаПротокола.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ПротоколСообщений КАК ТаблицаПротокола
	|ГДЕ
	|	ТаблицаПротокола.Объект = &ДокументСсылка
	|	И ТаблицаПротокола.ВидСообщения В (ЗНАЧЕНИЕ(Перечисление.ВидыСообщений.SMS), ЗНАЧЕНИЕ(Перечисление.ВидыСообщений.Viber))"
	);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		ПротоколВыборка = РезультатЗапроса.Выбрать();
		ПротоколВыборка.Следующий();

		Буффер = ПротоколВыборка.Значение.Получить();

		Если ТипЗнч(Буффер) = Тип("Структура") Тогда

			ЗаполнитьЗначенияСвойств(ДанныеПротокола, Буффер);

		КонецЕсли;

	КонецЕсли;

	Возврат ДанныеПротокола;

КонецФункции

//	LNK 23.12.2023 07:37:56
Процедура ЗаписьИзображенияОтчетаОтладочная(СтрокаКартинки, ИмяФайла)	Экспорт

	Если ТипЗнч(СтрокаКартинки) = Тип("Строка") Тогда

		Попытка

			ФайлКартинки = Новый Файл("D:\TEMP");

			Если ФайлКартинки.Существует() Тогда

				ФайлКартинки = Новый Файл("D:\TEMP\" + ИмяФайла + ".png");
				Картинка = Новый Картинка(Base64Значение(СтрЗаменить(СтрокаКартинки, "data:image/png;base64,", "")));
				Картинка.Записать(ФайлКартинки.ПолноеИмя);

			КонецЕсли;

		Исключение

			ТекстОшибки = ОписаниеОшибки();

		КонецПопытки;

	КонецЕсли;

КонецПроцедуры

#Область НовыйФорматВчасно	//	LNK 21.12.2023 07:20:06

Функция ПолучитьМакетНаСервере(ИмяМакета) Экспорт
	
	Макет = ПолучитьОбщийМакет(ИмяМакета);
	
	Возврат Макет;
	
КонецФункции

Функция ПолучитьОбластьНаСервере(Макет, ИмяОбласти) Экспорт
	
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	Возврат Область;
	
КонецФункции

Процедура ВывестиОбластьНаСервере(ТабличныйДокумент, Область) Экспорт
	
	ТабличныйДокумент.Вывести(Область);
	
КонецПроцедуры

#КонецОбласти

//	LNK 03.01.2024 05:39:54
Функция НапечататьЧекНаПринтере(ВходныеПараметры)	Экспорт

	Возврат ПолучитьПараметрКассыККМ("ПечатьЧековНаПринтер", ВходныеПараметры, Ложь);

КонецФункции

//	LNK 03.01.2024 09:06:41
Функция РасширенныйПериодескийОтчет(ВходныеПараметры)	Экспорт

	Возврат ПолучитьПараметрКассыККМ("РасширенныйПериодескийОтчет", ВходныеПараметры, Ложь);

КонецФункции

//	LNK 03.01.2024 09:00:20
Функция ПолучитьПараметрКассыККМ(Имя, ВходныеПараметры, ЗначениеПоУмолчанию)

	ТекстОшибки	= "";
	ЗначениеПараметра = ЗначениеПоУмолчанию;

	Попытка	//	LNK 03.01.2024 05:47:09 - Гасим возникшую ошибку!

		Если ВходныеПараметры.Количество() = 3 Тогда

			Если ВходныеПараметры[2].Количество() = 22 Тогда

				Если ТипЗнч(ВходныеПараметры[2][21]) = Тип("Структура") Тогда

					ЗначениеПараметра = (ВходныеПараметры[2][21][Имя] = Истина);

				Иначе	ТекстОшибки = "Тип 'ВходныеПараметры[2][21]' не является структурой!";

				КонецЕсли;

			Иначе	ТекстОшибки = "Размерность (21) 'ВходныеПараметры' не соответствует требуемой!";

			КонецЕсли;

		Иначе	ТекстОшибки = "Размерность (2) 'ВходныеПараметры' не соответствует требуемой!";

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();

	КонецПопытки;

	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда

		ЗаписьЖурналаРегистрации("ПРРО.ПечатьЧековНаПринтер", УровеньЖурналаРегистрации.Ошибка
			,
			,
			, "(ВходныеПараметры[" + Имя + "]): " + ТекстОшибки
			, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
		);

	КонецЕсли;

	Возврат ЗначениеПараметра;

КонецФункции

//	LNK 11.03.2024 15:54:27
Функция ИмяТипаОплаты(СтрокаОплат)	Экспорт

	Индекс	= ПолучитьЗначениеСоответствия(СтрокаОплат, "type", -1);	//	LNK 03.12.2023 07:30:17
	ИмяТипа	= ?(Индекс = 1 ИЛИ Индекс = 2, "ЕПЗ", ПолучитьЗначениеСоответствия(СтрокаОплат, "typen", Неопределено));

	Если ИмяТипа = Неопределено Тогда

		ИмяТипа	= ?(Индекс = 1 ИЛИ Индекс = 2, "ЕПЗ", ПолучитьЗначениеСоответствия(СтрокаОплат, "name", ""));

	КонецЕсли;

	Возврат ИмяТипа;

КонецФункции


Функция ЗаписатьФискальныйНомер(ОтветККМ,ЧекККМОбъект) Экспорт
	СтруктураККМ = ОбменWebRetailСервер.ТекстДЖСОНвСтруктуру(ОтветККМ);
	ФН = "";
	Если СтруктураККМ.Свойство("info") И СтруктураККМ.info.Свойство("doccode") Тогда
		ФН = СтруктураККМ.info.doccode;
		ФР = СтруктураККМ.info.fisid;
	Иначе
		Возврат Новый Структура("Успешно,ОписаниеОшибки",Ложь,"Відповідь фіскального реєстратора не містить фіскального номера чека");
	КонецЕсли;
	
	СтруктураОтвета = Документы.ЧекККМ.ЗаписатьФискальныйНомер(ЧекККМОбъект.Ссылка,ФН,ФР);
	
	Возврат СтруктураОтвета;
КонецФункции
	
Функция ПолучитьФискальныйНомерЧека(ЧекККМ) Экспорт
	СтруктураОтвета = Новый Структура("Успешно,ФискальныйНомер,ФискальныйРегистратор",Ложь,"","");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФискальныеНомераЧеков.ФискальныйНомер КАК ФискальныйНомер,
	               |	ФискальныеНомераЧеков.ФискальныйРегистратор КАК ФискальныйРегистратор,
	               |	ИСТИНА КАК Успешно
	               |ИЗ
	               |	РегистрСведений.ФискальныеНомераЧеков КАК ФискальныеНомераЧеков
	               |ГДЕ
	               |	ФискальныеНомераЧеков.ЧекККМ = &ЧекККМ";
	Запрос.УстановитьПараметр("ЧекККМ",ЧекККМ);
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураОтвета,Рез);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции


Функция ПолучитьФискальныйНомерЧекаПродажиПоУИД(УИД)  Экспорт
	ЧекККМ =  Документы.ЧекККМ.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
	
	Если ЧекККМ.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		Возврат ПолучитьФискальныйНомерЧека(ЧекККМ.ЧекККМПродажа);
	Иначе
		Возврат ПолучитьФискальныйНомерЧека(ЧекККМ);
	КонецЕсли;
КонецФункции

Функция ПолучитьПлатежныеРеквизиты(УИД) Экспорт
	ЧекККМ =  Документы.ЧекККМ.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(УИД,36)));
	
	Возврат Документы.ЧекККМ.ПолучитьПлатежныеРеквизиты(ЧекККМ);
	
КонецФункции


Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Перем IP, ПортIP, ИмяУстройства, Токен;

	Если НЕ ЗначениеЗаполнено(ОбъектДрайвера) ИЛИ ОбъектДрайвера.Параметры = Неопределено Тогда

		ОбъектДрайвера = СоздатьОбъектДрайвера(Параметры);	

	КонецЕсли;

	Результат = Истина;

	ОбъектДрайвера.Параметры.Свойство("IP", IP);
	ОбъектДрайвера.Параметры.Свойство("ПортIP", ПортIP);
	ОбъектДрайвера.Параметры.Свойство("ИмяУстройства", ИмяУстройства);
	ОбъектДрайвера.Параметры.Свойство("Токен", Токен);
	
	ОбъектДрайвера.Драйвер = Новый Структура;
	ЗаполнитьПараметры(ОбъектДрайвера.Параметры);
	
	Если ВыходныеПараметры = Неопределено Тогда

		ВыходныеПараметры = Новый Массив;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция СоздатьОбъектДрайвера(Параметры) Экспорт

	ОбъектДрайвера = Новый Структура(
		"Параметры, Драйвер, ОписаниеОшибки, ТекущееЗадание"
		, Параметры
		, Неопределено
		, Новый ОписаниеТипов("Строка")
		, Неопределено
	);

	Возврат ОбъектДрайвера;

КонецФункции

Функция ЗаполнитьПараметры(Параметры) Экспорт
	
//	Типы фискального задания:
//	1 - продажный чек
//	2 - возвратный чек
//	3 - служебный внесение денег
//	4 - служебный вынесение денег
//	10 - X-отчет
//	11 - Z-отчет
//	12 - периодический отчет по номерам
//	13 - периодический отчет по датам
//	20 - повтор последнего документа

	enFiscalTaskType = Новый Структура;
	enFiscalTaskType.Вставить("OPEN_SHIFT", 0);
	enFiscalTaskType.Вставить("SALE_RECEIPT", 1);
	enFiscalTaskType.Вставить("REFUND_RECEIPT", 2);
	enFiscalTaskType.Вставить("CASH_IN", 3);
	enFiscalTaskType.Вставить("CASH_OUT", 4);
	enFiscalTaskType.Вставить("X_REPORT", 10);
	enFiscalTaskType.Вставить("Z_REPORT", 11);

//	LNK 21.12.2023 08:04:53
	enFiscalTaskType.Вставить("Z_REPORT_BY_NUM"	, 12);
	enFiscalTaskType.Вставить("Z_REPORT_BY_DATE", 13);

	enFiscalTaskType.Вставить("LAST_DOCUMENT_COPY", 20);        

//	Типы заданий ДМ: 1 = фискальная; 2 = документ; 3 = оплата; 4 = весы
	enDMTaskType = Новый Структура;
	enDMTaskType.Вставить("FISCAL", 1);
	enDMTaskType.Вставить("DOCUMENT", 2);
	enDMTaskType.Вставить("PAYMENT", 3);
	enDMTaskType.Вставить("WEIGHT", 4);
	
	PrroStatus = Новый СписокЗначений;
	PrroStatus.Добавить( 0, "Онлайн");
	PrroStatus.Добавить( 1, "Онлайн (после ошибки)");
	PrroStatus.Добавить( 2, "Онлайн (коллизия)");
	PrroStatus.Добавить( 3, "Онлайн (ошибка)");
	PrroStatus.Добавить(10, "Офлайн");
	PrroStatus.Добавить(12, "Офлайн (ошибка)");
	PrroStatus.Добавить(20, "Заблокирован");
	
	Параметры.Вставить("enFiscalTaskType"	, enFiscalTaskType);
	Параметры.Вставить("enDMTaskType"		, enDMTaskType);
	Параметры.Вставить("PrroStatus"			, PrroStatus);

	Возврат Параметры;

КонецФункции

Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;

	ВыходныеПараметры = Новый Массив();

	Возврат Результат;

КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
	
	Результат = Истина;

	Если НЕ ЗначениеЗаполнено(ОбъектДрайвера) Тогда

		ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	КонецЕсли;

	ВыходныеПараметры = Новый Массив;
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ ВСЕХ ТИПОВ ДРАЙВЕРОВ
	
	// Тестирование устройства
	Если Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда

		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" ИЛИ Команда = "GetVersion" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение описание драйвера
	ИначеЕсли Команда = "ПолучитьОписаниеДрайвера" ИЛИ Команда = "GetDescription" Тогда

		Результат = ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ФИСКАЛЬНЫМИ РЕГИСТРАТОРАМИ

	// Открыть смену
	ИначеЕсли Команда = "OpenDay" ИЛИ Команда = "ОткрытьСмену" Тогда

		Результат = ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры, Истина);

//	Печать переодического отчета по датам
	ИначеЕсли Команда = "PrintPReportDate" ИЛИ Команда = "НапечататьПериодическийОтчетПоДатам" Тогда

		Результат = НапечататьПериодическийОтчет(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры, "ПоДатам");

//	Печать периодического отчета по номерам
	ИначеЕсли Команда = "PrintPReportNumber" ИЛИ Команда = "НапечататьПериодическийОтчетПоНомерам" Тогда

		Результат = НапечататьПериодическийОтчет(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры, "ПоНомерам");

//	Печать отчета без гашения
	ИначеЕсли Команда = "PrintXReport" ИЛИ Команда = "НапечататьОтчетБезГашения" Тогда

		Результат = НапечататьОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);

//	Печать отчета с гашением
	ИначеЕсли Команда = "PrintZReport" ИЛИ Команда = "НапечататьОтчетСГашением" Тогда

		Результат = НапечататьОтчетСГашением(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);

//	Печать чека
	ИначеЕсли Команда = "PrintReceipt" ИЛИ Команда = "ПечатьЧека" Тогда

		Результат = ПечатьЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);

// Печать нулевого чека
	ИначеЕсли Команда = "PrintNullReceipt" ИЛИ Команда = "НапечататьНулевойЧек" Тогда

		Результат = Истина;

//	Печать слип чека
	ИначеЕсли Команда = "PrintText" ИЛИ Команда = "ПечатьТекста"  Тогда

		Результат = ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);

	ИначеЕсли Команда = "OpenCheck" ИЛИ Команда = "ОткрытьЧек"  Тогда

		ЧекВозврата   = ВходныеПараметры[0];
		ФискальныйЧек = ВходныеПараметры[1];
		Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры);

	// Отменить открытый чек
	ИначеЕсли Команда = "CancelCheck" ИЛИ Команда = "ОтменитьЧек"  Тогда

		Результат = ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	ИначеЕсли Команда = "Encash" ИЛИ Команда = "Инкассация" Тогда

	//	Печать чека внесения/выемки
		ТипИнкассации	= ВходныеПараметры[0];
		Сумма			= ВходныеПараметры[1];

		Результат = Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипИнкассации, Сумма, ВходныеПараметры, ВыходныеПараметры);
		
	ИначеЕсли Команда = "PrintBarCode" ИЛИ Команда = "ПечатьШтрихкода" Тогда

		Результат = Истина;

	Иначе
		
	//	Указанная команда не поддерживается данным драйвером
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(СтрЗаменить(
				"Команда «%Команда%» не підтримується інстальованим драйвером."
				, "%Команда%"
				, Команда
			)
		);

		Результат = Ложь;

	КонецЕсли;
		
	Возврат Результат;

КонецФункции

Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		ОбъектДрайвера = СоздатьОбъектДрайвера(Параметры);
	КонецЕсли;
	ОбъектДрайвера.Вставить("ДополнительноеОписание");
	Результат  = ПодключитьУстройство(ОбъектДрайвера,Параметры,,);
	ДополнительноеОписание ="";
	Если Результат Тогда 
		res = ПолучитьДанные(ОбъектДрайвера);
		Результат = ТипЗНЧ(res) = Тип("Соответствие");
		Если НЕ Результат Тогда 
			ОбъектДрайвера.ОписаниеОшибки = "Помилка отримання інформації! " + ПолучитьКодИТекстОшибки(ОбъектДрайвера);
		Иначе
			errortxt = ПолучитьЗначениеСоответствия(res,"errortxt","");
			Если ЗначениеЗаполнено(errortxt) Тогда
				ОбъектДрайвера.ОписаниеОшибки = "Помилка отримання інформації! " + ПолучитьКодИТекстОшибки(ОбъектДрайвера);	
				Результат = Ложь;
			Иначе
				devices = res.Получить("devices");
				Для каждого Стр ИЗ devices Цикл
					device =  ПолучитьЗначениеСоответствия(Стр, "device", "");
					Если device <> ОбъектДрайвера.Параметры.ИмяУстройства Тогда
						Продолжить;
					КонецЕсли;
					
					Для каждого Элемент ИЗ Стр Цикл
						ДополнительноеОписание = ДополнительноеОписание+"
						|"+(Элемент.Ключ+"  : "+Элемент.Значение);  	
					КонецЦикла;
					ОбъектДрайвера.ДополнительноеОписание =ДополнительноеОписание;
					Прервать;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	ВыходныеПараметры.Добавить("Встановлений");
	ВыходныеПараметры.Добавить("Не визначена");

	Попытка
		ВыходныеПараметры[1] = ПолучитьВерсиюДрайвераКлиент();
	Исключение
	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить("Встановлений");
	ВыходныеПараметры.Добавить("Не визначена");
	
	ВыходныеПараметры.Добавить("Не визначено");
	ВыходныеПараметры.Добавить("Не визначено");
	ВыходныеПараметры.Добавить("Не визначено");
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционнаяБиблиотека  = "";
	ОсновнойДрайверУстановлен = "";
	РевизияИнтерфейса         = "";
	URLЗагрузкиДрайвера       = "";
	ПараметрыДрайвера         = "";
	ДополнительныеДействия    = "";
	
	Попытка

		ВерсияДрайвера = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);	
		ВыходныеПараметры[1] = ВерсияДрайвера;
										
		Наименование = " Device Manager: Универсальный драйвер фискальных регистраторов";
		Описание = " Device Manager – предназначена для работы прикладных программ с POS оборудованием в операционных системах MS Windows";
		ТипОборудования = "ФискальныйРегистратор";
		ИнтеграционнаяБиблиотека = "DeviceManagerMob.exe";
		РевизияИнтерфейса = "1.0.9.8";
		ОсновнойДрайверУстановлен = Истина;
		ПолучитьURLCкачивания = "";
		
		ВыходныеПараметры[2] = НаименованиеДрайвера;
		ВыходныеПараметры[3] = ОписаниеДрайвера;
		ВыходныеПараметры[4] = ТипОборудования;
		ВыходныеПараметры[5] = РевизияИнтерфейса;
		ВыходныеПараметры[6] = ИнтеграционнаяБиблиотека;
		ВыходныеПараметры[7] = ОсновнойДрайверУстановлен;
		ВыходныеПараметры[8] = URLЗагрузкиДрайвера;
		
		ПараметрыДрайвера = "";	
		ВыходныеПараметры[9] = ПараметрыДрайвера;
		
		ДополнительныеДействия = "";	
		ВыходныеПараметры[10] = ДополнительныеДействия;

	Исключение

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Помилка отримання опису драйвера");

	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры, ВывестиСообщение = Ложь)	Экспорт
	
//	LNK 08.03.2024 10:22:29 - Экспорт в отладочных целях

	Результат = Истина;
	мЕстьОкругление = Ложь;
	СтрокаЛога = "Пристрій «#DEV#»";
	
	res = ПолучитьДанные(ОбъектДрайвера);
	Успешно = ТипЗНЧ(res) = Тип("Соответствие");

	Если НЕ Успешно Тогда

		ОбъектДрайвера.ОписаниеОшибки = "Помилка отримання інформації! " + ПолучитьКодИТекстОшибки(ОбъектДрайвера);
		ДобавитьСтрокуЛога(ОбъектДрайвера.ОписаниеОшибки, СтрокаЛога);
		Результат = Ложь;

	Иначе

		devices = res.Получить("devices");

		Если devices = Неопределено Тогда

			ОбъектДрайвера.ОписаниеОшибки = "Помилка драйвера! Можливо, не активна служба EDMSrv («EVO DeviceManager Service»).";
			ДобавитьСтрокуЛога(ОбъектДрайвера.ОписаниеОшибки, СтрокаЛога);
			Результат = Ложь;
		
		Иначе

			Для каждого Стр ИЗ devices Цикл

				device = ПолучитьЗначениеСоответствия(Стр, "device", "");;

				Если НЕ device = ОбъектДрайвера.Параметры.ИмяУстройства	Тогда

					Продолжить;

				КонецЕсли;

				СтрокаЛога = СтрЗаменить(СтрокаЛога, "#DEV#", device);

				shiftdt = ПолучитьЗначениеСоответствия(Стр, "shiftdt", "") ;
				dev_id = ПолучитьЗначениеСоответствия(Стр, "dev_id", "") ;
				Группы = ПолучитьДанные(ОбъектДрайвера,"/dm/vchasno-kasa/api/v1/prro/groups?dev_id="+dev_id);
				pay_types = Группы.Получить("pay_types");

				Для каждого стрpay_types Из pay_types Цикл

					pay_id = ПолучитьЗначениеСоответствия(стрpay_types, "pay_id", "");

					Если pay_id = 100 Тогда

						мЕстьОкругление = Истина;
						Прервать;	

					КонецЕсли;

				КонецЦикла;

				Прервать

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Если Результат = Истина И shiftdt = "" Тогда

		res = ОтправитьПакет(ОбъектДрайвера, ОбъектДрайвера.Параметры.enFiscalTaskType.OPEN_SHIFT);
		Успешно = (res.get("res") = 0);

		Если НЕ Успешно Тогда 

			ОбъектДрайвера.ОписаниеОшибки = "Помилка внесення/видачі готівки! " + ПолучитьКодИТекстОшибки(ОбъектДрайвера);
			ДобавитьСтрокуЛога(ОбъектДрайвера.ОписаниеОшибки, СтрокаЛога);
			Результат = Ложь;

		КонецЕсли;

	КонецЕсли;
	
	Если Результат = Истина Тогда

			ДобавитьСтрокуЛога("----- " + "Зміна на пристрої відкрита" + " -----", СтрокаЛога);

	Иначе	ДобавитьСтрокуЛога("При відкритті зміни виникли помилки", СтрокаЛога);

	КонецЕсли;

	Если ВывестиСообщение = Истина Тогда

		ЗаписьЖурналаРегистрации("АвтоЧекИМ", УровеньЖурналаРегистрации.Информация
			, 
			, 
			, СтрокаЛога
		);

	КонецЕсли;

	ОбъектДрайвера.Параметры.Вставить("мЕстьОкругление", мЕстьОкругление);

//	Заполнение выходных параметров
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(ТекущаяДатаСеанса());
	
	Возврат Результат;
	
КонецФункции

Функция НапечататьПериодическийОтчет(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры, ВидОтчёта)
 	
	Результат		 = Истина;
	СуффиксСообщения = "";

	Попытка

		reqData = Новый Соответствие;

		Если ВидОтчёта = "ПоДатам" Тогда

			СуффиксСообщения = " щодо дат";
			reqData.Вставить("dt_from"	, Формат(ВходныеПараметры[0], "ДФ=yyyyMMddHHmmss"));
			reqData.Вставить("dt_to"	, Формат(ВходныеПараметры[1], "ДФ=yyyyMMddHHmmss"));

		Иначе
			СуффиксСообщения = " за номерами";
			reqData.Вставить("n_from"	, ВходныеПараметры[0]);
			reqData.Вставить("n_to"		, ВходныеПараметры[1]);

		КонецЕсли;

		res = ОтправитьПакет(
			  ОбъектДрайвера
			, ОбъектДрайвера.Параметры.enFiscalTaskType[?(ВидОтчёта = "ПоДатам", "Z_REPORT_BY_DATE", "Z_REPORT_BY_NUM")]
			, reqData
		);
		Успешно = (res.get("res") = 0);

		Если Успешно = Истина Тогда

			errortxt = ПолучитьЗначениеСоответствия(res, "errortxt", "");

			Если ЗначениеЗаполнено(errortxt) Тогда

				Успешно = Ложь;
				ОбъектДрайвера.ОписаниеОшибки = "1. Помилка друку періодичного звіту" + СуффиксСообщения + ":" + Символы.ПС
					+ "'dt_from' = [" + reqData["dt_from"] + "]; 'dt_to' = [" + reqData["dt_to"] + "]" + Символы.ПС	//	LNK 14.04.2024 07:48:01
					+ ПолучитьКодИТекстОшибки(ОбъектДрайвера);

				Результат = Ложь;
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеОшибки);

			Иначе

				Расширенный = РасширенныйПериодескийОтчет(ВходныеПараметры);

				ТекстЗаголовка	  = "Періодичний звіт" + ?(Расширенный = Истина, " повний", " скорочений");
				ТабличныйДокумент = ПолучитьТабличныйДокументОтчет(
					  ТекстЗаголовка
					, res.Получить("info")
					, Истина
					, Расширенный
				);
//				#Если _ Тогда
//				ТабличныйДокумент = Новый ТабличныйДокумент;
//				#КонецЕсли

				Если НапечататьЧекНаПринтере(ВходныеПараметры) Тогда

					ТабличныйДокумент.АвтоМасштаб = Ложь;
					ТабличныйДокумент.ШиринаСтраницы = 50;
					ТабличныйДокумент.ВысотаСтраницы = 3276;
					ТабличныйДокумент.ПолеСлева		 = 0;
					ТабличныйДокумент.ПолеСправа	 = 0;

					ТабличныйДокумент.Напечатать();

//					ПоказатьОповещениеПользователя("Періодичний звіт" + СуффиксСообщения + " надруковано",	//	LNK 16.05.2023 15:15:15
//						, "Періодичний звіт" + СуффиксСообщения + " сформовано та надіслано на принтер за замовчуванням"
//						, БиблиотекаКартинок.Информация32
//					);

				КонецЕсли;

				ПараметрыФормы = Новый Структура(
					"ТекстЗаголовка, ТабличныйДокумент"
					, ТекстЗаголовка
					, ТабличныйДокумент
				);

//				ОткрытьФорму("ОбщаяФорма.ФормаПростогоТабличногоДокумента"
//					, ПараметрыФормы
//				);

				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(ТекущаяДатаСеанса());

				ЗаписьИзображенияОтчетаОтладочная(res["pf_image"], ВидОтчёта);

			КонецЕсли;

		Иначе

			ОбъектДрайвера.ОписаниеОшибки = "2.Помилка друку періодичного звіту" + СуффиксСообщения + ":" + Символы.ПС
				+ "'dt_from' = [" + reqData["dt_from"] + "]; 'dt_to' = [" + reqData["dt_to"] + "]" + Символы.ПС	//	LNK 14.04.2024 07:48:01
				+ ПолучитьКодИТекстОшибки(ОбъектДрайвера);

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеОшибки);

		КонецЕсли;

	Исключение

		Результат = Ложь;
		ТекстОшибки	= ОписаниеОшибки();
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьПериодическийОтчет>:" + СуффиксСообщения + Символы.ПС
		//	LNK 14.04.2024 07:48:01
			+ "'dt_from' = [" + ?(ВидОтчёта = "ПоДатам", Формат(ВходныеПараметры[0], "ДФ=yyyyMMddHHmmss"), ВходныеПараметры[0]) + "]; "
			+ "'dt_to' = ["   + ?(ВидОтчёта = "ПоДатам", Формат(ВходныеПараметры[1], "ДФ=yyyyMMddHHmmss"), ВходныеПараметры[1]) + "]" + Символы.ПС
			+ ТекстОшибки
		);

	КонецПопытки;
	
	Если Результат = Ложь Тогда

		ЖурналСобытий.Регистрация("ПЕРИОДИЧЕСКИЙ_ОТЧЕТ", "Ошибка"
			, "Метаданные.Обработки.РМК"
			,
			,
			, ВыходныеПараметры[1]
			,
			, Истина
			, Ложь
		);

	КонецЕсли;

	Возврат Результат;
	
КонецФункции

//	Функция осуществляет снятие отчета без гашения 
//	LNK 08.04.2022 09:25:48
Функция НапечататьОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)

	Результат = Истина;

	Попытка

	//	Снятие X-отчёта ФР
		res = ОтправитьПакет(
			  ОбъектДрайвера
			, ОбъектДрайвера.Параметры.enFiscalTaskType.X_REPORT
		);
		Успешно = (res.get("res") = 0);

		Если Успешно = Истина Тогда

			errortxt = ПолучитьЗначениеСоответствия(res, "errortxt", "");

			Если ЗначениеЗаполнено(errortxt) Тогда

				Успешно = Ложь;
				ОбъектДрайвера.ОписаниеОшибки = "Помилка друку Х-звіту! "
					+ ПолучитьКодИТекстОшибки(ОбъектДрайвера);

			Иначе

				ТекстЗаголовка	  = "Х-звіт";
				ТабличныйДокумент = ПолучитьТабличныйДокументОтчет(ТекстЗаголовка, res.Получить("info"));
//				#Если _ Тогда
//				ТабличныйДокумент = Новый ТабличныйДокумент;
//				#КонецЕсли

				Если НапечататьЧекНаПринтере(ВходныеПараметры) Тогда

					ТабличныйДокумент.АвтоМасштаб = Ложь;
					ТабличныйДокумент.ШиринаСтраницы = 50;
					ТабличныйДокумент.ВысотаСтраницы = 3276;
					ТабличныйДокумент.ПолеСлева		 = 0;
					ТабличныйДокумент.ПолеСправа	 = 0;

					ТабличныйДокумент.Напечатать();

//					ПоказатьОповещениеПользователя("Х-звіт надруковано",	//	LNK 16.05.2023 15:15:15
//						, "Х-звіт сформовано та надіслано на принтер за замовчуванням"
//						, БиблиотекаКартинок.Информация32
//					);

				КонецЕсли;

				ПараметрыФормы = Новый Структура(
					"ТекстЗаголовка, ТабличныйДокумент"
					, ТекстЗаголовка
					, ТабличныйДокумент
				);

//				ОткрытьФорму("ОбщаяФорма.ФормаПростогоТабличногоДокумента"
//					, ПараметрыФормы
//				);

				ЗаписьИзображенияОтчетаОтладочная(res["pf_image"], "X_отчет");

			КонецЕсли;

		Иначе

			ОбъектДрайвера.ОписаниеОшибки = "Помилка друку Х-звіту! "
				+ ПолучитьКодИТекстОшибки(ОбъектДрайвера);

		КонецЕсли;

		Если НЕ Успешно Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(res.get("errortxt"));

		Иначе

			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(ТекущаяДатаСеанса());

		КонецЕсли;

	Исключение

		Результат	= Ложь;
		ТекстОшибки	= ОписаниеОшибки();
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьОтчетБезГашения>:" + Символы.ПС + ТекстОшибки);

	КонецПопытки;

	Возврат Результат;

КонецФункции

//	Функция осуществляет снятие отчета с гашением 
//	LNK 08.04.2022 09:25:48
Функция НапечататьОтчетСГашением(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)

	Результат = Истина;

	Попытка

	//	Снятие Z-отчёта ФР
		res = ОтправитьПакет(
			  ОбъектДрайвера
			, ОбъектДрайвера.Параметры.enFiscalTaskType.Z_REPORT
		);
		Успешно = (res.get("res") = 0);

		Если Успешно = Истина Тогда

			errortxt = ПолучитьЗначениеСоответствия(res, "errortxt", "");

			Если ЗначениеЗаполнено(errortxt) Тогда

				Успешно = Ложь;
				ОбъектДрайвера.ОписаниеОшибки = "Помилка друку Z-звіту!"
					+ ПолучитьКодИТекстОшибки(ОбъектДрайвера);

			Иначе

				ТекстЗаголовка	  = "Z-звіт";
				ТабличныйДокумент = ПолучитьТабличныйДокументОтчет(ТекстЗаголовка, res.Получить("info"));
//				#Если _ Тогда
//				ТабличныйДокумент = Новый ТабличныйДокумент;
//				#КонецЕсли

				Если  НапечататьЧекНаПринтере(ВходныеПараметры)	//	LNK 03.01.2024 05:44:49
					И ВходныеПараметры[2][21].ПРРО_ПД_Печать_Z_Отчета = Истина
				Тогда

					ТабличныйДокумент.АвтоМасштаб = Ложь;
					ТабличныйДокумент.ШиринаСтраницы = 50;
					ТабличныйДокумент.ВысотаСтраницы = 3276;
					ТабличныйДокумент.ПолеСлева		 = 0;
					ТабличныйДокумент.ПолеСправа	 = 0;

					ТабличныйДокумент.Напечатать();

//					ПоказатьОповещениеПользователя("Z-звіт надруковано",	//	LNK 16.05.2023 15:15:15
//						, "Z-звіт сформовано та надіслано на принтер за замовчуванням"
//						, БиблиотекаКартинок.Информация32
//					);

				КонецЕсли;

				ПараметрыФормы = Новый Структура(
					"ТекстЗаголовка, ТабличныйДокумент"
					, ТекстЗаголовка
					, ТабличныйДокумент
				);

//				ОткрытьФорму("ОбщаяФорма.ФормаПростогоТабличногоДокумента"
//					, ПараметрыФормы
//				);

				ЗаписьИзображенияОтчетаОтладочная(res["pf_image"], "Z_отчет");

			КонецЕсли;

		Иначе

			ОбъектДрайвера.ОписаниеОшибки = "Помилка друку Z-звіту! "
				+ ПолучитьКодИТекстОшибки(ОбъектДрайвера);

		КонецЕсли;

		Если НЕ Успешно Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(res.get("errortxt"));

		Иначе

			МенеджерОборудованияСервер.СохранитьПараметрыУстройства(Параметры.Идентификатор, Параметры);

			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(ТекущаяДатаСеанса());

		КонецЕсли;

	Исключение

		Результат	= Ложь;
		ТекстОшибки	= ОписаниеОшибки();
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьОтчетСГашением>:" + Символы.ПС + ТекстОшибки);

	КонецПопытки;

	Возврат Результат;

КонецФункции

// Осуществляет печать фискального чека
//
Функция ПечатьЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	ШаблонЧека = СформироватьШаблонЧека(ВходныеПараметры);
	 
	Результат  = Истина;
	
	ОбщиеПараметры	 = ШаблонЧека[0];
	ТребованиеПечати = Ложь;
	ОбщиеПараметры.ПечататьЧек = Ложь;

	ОбъектДрайвера.Параметры.Вставить("УИД", ПолучитьУИДЧека(ОбщиеПараметры.ДокументОснование));
	ОбъектДрайвера.Параметры.Вставить("ПечататьЧек"		, ОбщиеПараметры.ПечататьЧек);	//	LNK 25.10.2023 06:12:57
	ОбъектДрайвера.Параметры.Вставить("ТребованиеПечати", ТребованиеПечати);			//	LNK 07.02.2024 17:20:13
	
	ПозицииЧека    = ШаблонЧека[1];
	ТаблицаОплат   = ШаблонЧека[2];
	
	ТаблицаДопРеквизитов = Новый Массив;
	ТаблицаДопРеквизитов.Добавить(Новый Массив);

	ФискальныйЧек	= Истина;
	ЧекВозврата		= ?(ОбщиеПараметры.Свойство("ТипЧека"), ?(ВРег(ОбщиеПараметры.ТипЧека) = "ПРОДАЖА", Ложь, Истина), Ложь);
	
	Результат = ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры);
	Для ИндексМассива = 0 По ПозицииЧека.Количество() - 1 Цикл
		
		СтруктураДопРеквизитов = Новый Структура("СтавкаНДССтрокой, ЭтоПодакцизныйТовар, КодДляННиРРО, КодДляННиРРОВыводитьПриПечатиЧека,");

		ПозицияЧека = ПозицииЧека[ИндексМассива];
		
		Наименование  = ?(ПозицияЧека.Свойство("Наименование") , ПозицияЧека.Наименование, "");
		Количество    = ?(ПозицияЧека.Свойство("Количество")   , ПозицияЧека.Количество  , 1);
		Цена          = ?(ПозицияЧека.Свойство("Цена")         , ПозицияЧека.Цена        , 0);
		Сумма         = ?(ПозицияЧека.Свойство("Сумма")        , ПозицияЧека.Сумма       , 0);
		НомерСекции   = ?(ПозицияЧека.Свойство("НомерСекции")  , ПозицияЧека.НомерСекции , 0);
		СтавкаНДС     = ?(ПозицияЧека.Свойство("СтавкаНДС")    , ПозицияЧека.СтавкаНДС   , 0);
		СуммаСкидок   = ?(ПозицияЧека.Свойство("СуммаСкидок")  , ПозицияЧека.СуммаСкидок , 0);

		СтруктураДопРеквизитов.Вставить("СтавкаНДССтрокой",?(ПозицияЧека.Свойство("СтавкаНДССтрокой")  , ПозицияЧека.СтавкаНДССтрокой , ""));
		СтруктураДопРеквизитов.Вставить("ЭтоПодакцизныйТовар",?(ПозицияЧека.Свойство("ЭтоПодакцизныйТовар")  , ПозицияЧека.ЭтоПодакцизныйТовар , Ложь));
		СтруктураДопРеквизитов.Вставить("КодДляННиРРО",?(ПозицияЧека.Свойство("КодПоУКТВЭД")				, ПозицияЧека.КодПоУКТВЭД , ""));
		Если СтруктураДопРеквизитов.ЭтоПодакцизныйТовар И ЗначениеЗаполнено(СтруктураДопРеквизитов.КодДляННиРРО) Тогда   
			СтруктураДопРеквизитов.Вставить("КодДляННиРРОВыводитьПриПечатиЧека",Истина);
		Иначе
			СтруктураДопРеквизитов.Вставить("КодДляННиРРОВыводитьПриПечатиЧека",Ложь);
		КонецЕсли;

		СтруктураДопРеквизитов.Вставить("Штрихкод",ПозицияЧека.Штрихкод);
		
		Если НЕ НапечататьФискальнуюСтроку(
				  ОбъектДрайвера
				, Параметры
				, ПараметрыПодключения
				, Наименование
				, Количество
				, Цена
				, Сумма
				, СуммаСкидок
				, НомерСекции
				, СтавкаНДС
				, СтруктураДопРеквизитов
				, ВыходныеПараметры
				)
		Тогда

			ОшибкаПриПечати = Истина;   
			Прервать;

		КонецЕсли;

	КонецЦикла;

	Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры, Истина, Ложь, ВходныеПараметры[2]);
	ОбъектДрайвера.Параметры.Удалить("УИД");
	ОбъектДрайвера.Параметры.Удалить("ПечататьЧек");
	ОбъектДрайвера.Параметры.Удалить("ТребованиеПечати");

	Возврат Результат;

КонецФункции

Функция ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры)	Экспорт
	
	Результат = Истина;

	// 20200414
	packet = Неопределено;

	мФискальныйЧек = ФискальныйЧек;
	ИмяКассира = "";
	Успешно = Истина;

//	Открытие фискального чека ФР
	newReceipt = Новый Соответствие;
	newReceipt.insert("pays", new Array);
	newReceipt.insert("rows", new Array);
	newReceipt.insert("sum" , 0);

	Попытка

		Если НЕ ЧекВозврата Тогда

				packet = СоздатьПакет(ОбъектДрайвера, ОбъектДрайвера.Параметры.enFiscalTaskType.SALE_RECEIPT,	new Structure("receipt", newReceipt));

		Иначе	packet = СоздатьПакет(ОбъектДрайвера, ОбъектДрайвера.Параметры.enFiscalTaskType.REFUND_RECEIPT,	new Structure("receipt", newReceipt));

		КонецЕсли;

		ОбъектДрайвера.insert("ТекущееЗадание", packet);

	//	Заполнение выходных параметров
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(0); // Номер документа
		ВыходныеПараметры.Добавить(ТекущаяДатаСеанса());

	Исключение

		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.ОткрытьЧек>:" + ОписаниеОшибки());

	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры, ФискальныйЧек = Истина, НулевойЧек = Ложь, ОбщиеПараметры = Неопределено) Экспорт
	
//	LNK 30.03.2023 07:38:22
//	"ПараметрыКассыККМ" - ОбщиеПараметры[21]
	Результат = Истина;

	fiscal	= ОбъектДрайвера.ТекущееЗадание.get("fiscal");
	receipt	= fiscal.get("receipt");
	pays	= receipt.get("pays");

	Если ТипЗнч(ОбщиеПараметры) = Тип("Массив") Тогда

			cashier = СокрЛП(ОбщиеПараметры[12]);

	Иначе	cashier = СокрЛП(ПользователиКлиентСервер.ТекущийПользователь());
	
	КонецЕсли;

	fiscal.Insert("cashier", cashier);
	
	//2025-02-27 sa возвращаем форму чека в формате PDF
	receipt.Insert("need_pf_pdf", 2);

	мЕстьОкругление		= ОбъектДрайвера.Параметры.мЕстьОкругление;
	СуммаДокумента		= receipt.get("sum");
	СуммаОкругления		= 0;
	ИтСуммаОкругления	= 0;
	СуммаОплат			= 0;   

	Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл

		СуммаОплат = СуммаОплат + ТаблицаОплат[ИндексОплаты].Сумма;

	КонецЦикла;

	Сдача = СуммаОплат - СуммаДокумента;

	Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл

		Стр = ТаблицаОплат[ИндексОплаты];
		СуммаОкругления = 0;

		Если НЕ Стр.Сумма = 0 Тогда			

			Если Стр.ТипОплаты = 0 и мЕстьОкругление Тогда

				СуммаДляОкругления = Мин(Стр.Сумма-Сдача,СуммаДокумента);
				СуммаОкругления = РасчитатьОкругление(СуммаДляОкругления);
				Сумма = Стр.Сумма + СуммаОкругления - Сдача;

			ИначеЕсли Стр.ТипОплаты = 0 Тогда

					Сумма = Стр.Сумма-Сдача;

			Иначе	Сумма = Стр.Сумма;

			КонецЕсли;

			pay = Новый Соответствие;
			pay.insert("sum",Сумма);
			pay.insert("type", Стр.ТипОплаты);
			//2025-02-28 Sa Сдача теперь обязательное поле
			Если Сдача > 0 Тогда
				pay.insert("change",Сдача);
			КонецЕсли;
			//2024-09-04 sa Если это оплата картой или кредит, то нужно получить банковские реквизиты по оплате
			//2024-11-13 sa Тип оплаты = 3 - Предоплата. Используется в Интернет магазине
			Если Стр.ТипОплаты = 1 ИЛИ Стр.ТипОплаты = 2  ИЛИ Стр.ТипОплаты = 3 Тогда
				ПлатежныеРеквизиты = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.ПолучитьПлатежныеРеквизиты(ОбъектДрайвера.Параметры.УИД);
				pay.insert("comment",СокрЛП(ПлатежныеРеквизиты.bank_name)); //Имя банка не возвращается в ответе. дублируем в комментарий.
				pay.insert("bank_name",СокрЛП(ПлатежныеРеквизиты.bank_name));
				pay.insert("bank_id",СокрЛП(ПлатежныеРеквизиты.bank_id));
				pay.insert("term_id",СокрЛП(ПлатежныеРеквизиты.term_id));
				pay.insert("paysys",СокрЛП(ПлатежныеРеквизиты.paysys));
				pay.insert("rrn",СокрЛП(ПлатежныеРеквизиты.rrn));
				pay.insert("cardmask",СокрЛП(ПлатежныеРеквизиты.cardmask));
				pay.insert("auth_code",СокрЛП(ПлатежныеРеквизиты.auth_code));
			КонецЕсли;
			pays.add(pay);

		КонецЕсли;

		ИтСуммаОкругления = ИтСуммаОкругления + СуммаОкругления;

	КонецЦикла;				 

	Если ИтСуммаОкругления <> 0 Тогда

		receipt.insert("round", ИтСуммаОкругления);	

	КонецЕсли;

	ПараметрыЗакрытия = Новый Структура(
		"ПечатьПодвала, ТекстПодвала, НомерТелефона, Контрагент, Объект"
		, Ложь
		, ""
		, ""
		, Неопределено
		, Неопределено
	);

	Если НЕ ОбщиеПараметры = Неопределено Тогда

		ПараметрыЗакрытия.ТекстПодвала	= ОбщиеПараметры[7];
		ПараметрыЗакрытия.ПечатьПодвала = ОбъектДрайвера.Параметры.ПечатьПодвала И НЕ ПустаяСтрока(ПараметрыЗакрытия.ТекстПодвала);
		ПараметрыЗакрытия.НомерТелефона	= ОбщиеПараметры[19];
		ПараметрыЗакрытия.Контрагент	= ОбщиеПараметры[20];
		ПараметрыЗакрытия.Объект		= ОбщиеПараметры[17][2];

		receipt.insert("comment_down", ПараметрыЗакрытия.ТекстПодвала);	

	КонецЕсли;
	
	res = ОтправитьПакет(ОбъектДрайвера);

	Попытка

		errortxt = res.get("errortxt");

		Если ЗначениеЗаполнено(errortxt) Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ВыходныеПараметры[1] = res.get("errortxt");

		Иначе

			ОтветККМ		  = ОбъектДрайвера.resJsonString;
			ТекстЗаголовка	  = "";
			URL				  = "";
			
			//2024-09-03 sa Запишем фискальный номер в базу
			ОтветЧека = ЗаписатьФискальныйНомер(ОтветККМ,ПараметрыЗакрытия.Объект);
			Если Не ОтветЧека.Успешно Тогда
				ДанныеПротокола = Неопределено;
				ЗаписьЖурналаРегистрации("АвтоЧекИМ", УровеньЖурналаРегистрации.Ошибка
					, 
					, 
					, "Помилка запису номера чека в базу 1С:" + Символы.ПС + ОтветЧека.ОписаниеОшибки
				);

			КонецЕсли;
			
			ТабличныйДокумент = ПолучитьТабличныйДокументЧек(ОтветККМ, ПараметрыЗакрытия, ТекстЗаголовка, URL,,, НулевойЧек);

			Попытка	//	LNK 30.03.2023 07:43:53

				ПотокБуффер = Новый ПотокВПамяти;
				ТабличныйДокумент.Записать(ПотокБуффер, ТипФайлаТабличногоДокумента.PDF);

				ДанныеПротокола = УстановитьДанныеПротокола(
					  ПараметрыЗакрытия.Объект
					, URL
					, ПотокБуффер.ЗакрытьИПолучитьДвоичныеДанные()
					, РасшифроватьJSON(ОтветККМ)
				);

			Исключение

			//	LNK 30.03.2023 07:47:48
				ДанныеПротокола = Неопределено;
				ЗаписьЖурналаРегистрации("АвтоЧекИМ", УровеньЖурналаРегистрации.Ошибка
					, 
					, 
					, "Помилка формування складу друкарської форми:" + Символы.ПС + ОписаниеОшибки()
				);

			КонецПопытки;

			ЕстьДанныеФлагов = (ТипЗнч(ДанныеПротокола) = Тип("Структура"));

			Если ЕстьДанныеФлагов Тогда

				ВыходныеПараметры = Новый Массив(3);
			//	"ДанныеPDF" НЕ сохраняем в чеке.. объём всё-таки!
				ВыходныеПараметры[2] = Новый Структура(
					"URL, ОтветПРРО, ПараметрыЗакрытия, ФлагиПечати"
					, ДанныеПротокола.URL
					, ДанныеПротокола.ОтветПРРО
					, ПараметрыЗакрытия
					, Новый Структура(	//	LNK 06.02.2024 07:40:57
						"Напечатан, ТребованиеПечати, SMS"
						, Ложь													//	была ли печать на принтер чеков вообще?
						, ОбъектДрайвера.Параметры.ТребованиеПечати = Истина	//	Покупателю нужна бумажная копия!
						, Ложь													//	был отправлен SMS
					)
				);

			КонецЕсли;

			ВывестиЧекНаПечать(ТабличныйДокумент, ОбъектДрайвера, ОбщиеПараметры, ВыходныеПараметры, ТекстЗаголовка, ЕстьДанныеФлагов);	//	LNK 19.02.2024 12:51:55

			Если НЕ ПустаяСтрока(ПараметрыЗакрытия.НомерТелефона) И НЕ ПустаяСтрока(URL) И НЕ ДанныеПротокола = Неопределено
				 И ОбъектДрайвера.Параметры.ВидСообщения = ПредопределенноеЗначение("Перечисление.ВидыСообщений.SMS")	Тогда

				Попытка

					РезультатУведомления = ОтправитьУведомлениеПокупателю(
						  ПараметрыЗакрытия.НомерТелефона
						, ПараметрыЗакрытия.Контрагент
						, ДанныеПротокола
						, ОбъектДрайвера.Параметры.ВидСообщения
						, ИмяКомпьютера()
						, Ложь
					);

					Если НЕ РезультатУведомления.Ошибка = Истина Тогда

						Если ЕстьДанныеФлагов Тогда	//	LNK 06.02.2024 07:40:40

							ВыходныеПараметры[2].ФлагиПечати.SMS = Истина;

						КонецЕсли;

					Иначе

						ЗаписьЖурналаРегистрации("АвтоЧекИМ", УровеньЖурналаРегистрации.Ошибка
							, 
							, 
							, "Помилка повідомлення клієнту:" + Символы.ПС + РезультатУведомления.ОписаниеОшибки
						);

					КонецЕсли;

				Исключение

					ЗаписьЖурналаРегистрации("АвтоЧекИМ", УровеньЖурналаРегистрации.Ошибка
						, 
						, 
						, "Помилка повідомлення клієнту:" + Символы.ПС + ОписаниеОшибки()
					);

				КонецПопытки;

			КонецЕсли;

		КонецЕсли;		

	Исключение

		Результат	= Ложь;
		ТекстОшибки	= ОписаниеОшибки();
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.ЗакрытьЧек>:" + Символы.ПС + ТекстОшибки);

	КонецПопытки;
	
	Возврат Результат;

КонецФункции

Функция ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	   
	ДанныеПРРО	= ВходныеПараметры[0];
	ТекстОшибки	= "";

	Если ТипЗнч(ДанныеПРРО) = Тип("Структура") И ДанныеПРРО.Свойство("ОтветПРРО") Тогда

		Результат = НЕ ДанныеПРРО.ОтветПРРО.Количество() = 0;  

		Если Результат = Истина Тогда

			ОбъектДрайвера.Параметры.Вставить("ПечататьЧек", ВходныеПараметры[2][21].ПечатьЧековНаПринтер = Истина И ВходныеПараметры[2][21].ПРРО_ПД_ПечатьЧеков = Истина);

			ТекстЗаголовка	  = "";
			ТабличныйДокумент = ПолучитьТабличныйДокументЧек(
				  ДанныеПРРО.ОтветПРРО
				, ДанныеПРРО.ПараметрыЗакрытия
				, ТекстЗаголовка
				, ДанныеПРРО.URL
				,
				, Истина
			);

			ВывестиЧекНаПечать(ТабличныйДокумент, ОбъектДрайвера, ВходныеПараметры[2], ВыходныеПараметры, ТекстЗаголовка, Ложь);	//	LNK 19.02.2024 12:51:55

			ОбъектДрайвера.Параметры.Удалить("ПечататьЧек");

		Иначе

			ТекстОшибки = "відповідь ПРРО не містить інформації для друку";

		КонецЕсли;

	Иначе

	//	это всего лишь текст.. считаем, что всё нормально!
		Результат = Истина;	//	LNK 02.03.2024 08:02:24

	КонецЕсли;

	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда

		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.ПечатьТекста>:"
		+ Символы.ПС + ТекстОшибки);

	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;

	Возврат Результат;   
	
КонецФункции

Функция Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипИнкассации, Сумма, ВходныеПараметры, ВыходныеПараметры)
	
	Результат	= Истина;
	СтрокаЛога	= "ПРРО.Каса. ";

	Попытка
		
	//	Внесение или изъятие суммы
	//	Положительная сумма - внесение, отрицательная- изъятие
		cash = Новый Соответствие;
		cash.insert("type", 0);	// 99
		cash.insert("sum", Сумма);

		Если ТипИнкассации = 0 Тогда //	Выемка		

				ДобавитьСтрокуЛога("Винесено: " + Сумма, СтрокаЛога);

		Иначе	ДобавитьСтрокуЛога("Внесено: " + Сумма, СтрокаЛога);

		КонецЕсли;
		
		res = ОтправитьПакет(ОбъектДрайвера
			, ?(ТипИнкассации = 0
				, ОбъектДрайвера.Параметры.enFiscalTaskType.CASH_OUT
				, ОбъектДрайвера.Параметры.enFiscalTaskType.CASH_IN)
			, Новый Структура("cash", cash)
		);
		Успешно = (res.get("res") = 0);

		Если Успешно Тогда 

			ТекстЗаголовка	  = "";
			ТабличныйДокумент = ПолучитьТабличныйДокументСлужебный(
				  ОбъектДрайвера.resJsonString
				, ТекстЗаголовка
			);

			ОбъектДрайвера.Параметры.Вставить("ПечататьЧек", ВходныеПараметры[2][21].ПечатьЧековНаПринтер = Истина И ВходныеПараметры[2][21].ПРРО_ПД_ПечатьЧеков = Истина);

			ВывестиЧекНаПечать(ТабличныйДокумент, ОбъектДрайвера, ВходныеПараметры[2], ВыходныеПараметры, ТекстЗаголовка, Ложь);	//	LNK 19.02.2024 12:51:55

			ОбъектДрайвера.Параметры.Удалить("ПечататьЧек");

		Иначе

			ОбъектДрайвера.ОписаниеОшибки = "Помилка внесення/видачі готівки:" + Символы.ПС + res.get("errortxt");
			Результат = Ложь;

		КонецЕсли;

		Если НЕ Результат Тогда

			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ВыходныеПараметры[1] = res.get("errortxt");

		Иначе

			ЗаписьЖурналаРегистрации("АвтоЧекИМ", УровеньЖурналаРегистрации.Информация
				, 
				, 
				, СтрокаЛога
			);
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(ТекущаяДатаСеанса());

		КонецЕсли;

	Исключение

		Результат	= Ложь;
		ТекстОшибки	= ОписаниеОшибки();

		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьЧекВнесенияВыемки>:"
			+ Символы.ПС + ТекстОшибки);

	КонецПопытки;

	Возврат Результат;

КонецФункции

// Доп функции

Функция ПолучитьДанные(ОбъектДрайвера,Запрос = Неопределено) Экспорт 

	Перем IP, ПортIP, ИмяУстройства, Токен;
	  
	ОбъектДрайвера.Параметры.Свойство("IP", IP);
	ОбъектДрайвера.Параметры.Свойство("ПортIP", ПортIP);
	ОбъектДрайвера.Параметры.Свойство("ИмяУстройства", ИмяУстройства);
	ОбъектДрайвера.Параметры.Свойство("Токен", Токен);
	
	dm = ОбъектДрайвера.Драйвер;
	
	resData = Неопределено;
	reqJsonString = "";
	
	Если Запрос = Неопределено Тогда
		Запрос = "/dm/vchasno-kasa/api/v1/dashboard";
	КонецЕсли;
	
	
	Попытка
		connection = new HTTPConnection(IP, ПортIP);
		
	Исключение
		resData = СтруктураВМассив(new Structure("res, errortxt", -1, nStr("ru = 'Не удалось установить соединение с DeviceManager:'; en = 'Не вдалося встановити з''єднання з DeviceManager:'; uk = 'Cannot connect with DeviceManager:'")
		+ " " + ErrorDescription()));
		connection = Неопределено;
	КонецПопытки;
	
	Если resData = Неопределено Тогда
		request = new HTTPRequest(Запрос);
		request.headers.insert("Content-Type", "application/json");
		
		Попытка
			//Сообщить(reqJsonString);
			response = connection.GET(request);
			resJsonString = response.getBodyAsString();
			
		Исключение
			resData = СтруктураВМассив(new Structure("res, errortxt", -2, nStr("ru = 'Ошибка получения ответа от DeviceManager:'; en = 'Помилка отримання відповіді від DeviceManager:'; uk = 'Error getting response from DeviceManager:'")
			+ " " + ErrorDescription()));
			connection = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	
	Если resData = Неопределено Тогда
		Если valueIsFilled(resJsonString) Тогда
			resData = РасшифроватьJSON(resJsonString);
			
		Иначе
			resData = СтруктураВМассив(new Structure("res, errortxt", -3, nStr("ru = 'Отсутствует ответ от DeviceManager'; uk = 'Отсутствует ответ от DeviceManager'; en = 'Отсутствует ответ от DeviceManager'")));
		КонецЕсли;
	КонецЕсли;
	
	Если resData = Неопределено Тогда
		resData = СтруктураВМассив(new Structure("res, errortxt", -4, nStr("ru = 'Ошибка расшифровки ответа от DeviceManager'; uk = 'Ошибка расшифровки ответа от DeviceManager'; en = 'Ошибка расшифровки ответа от DeviceManager'")));
	КонецЕсли;
	
	ОбъектДрайвера.insert("lastResp", resData);
	ОбъектДрайвера.insert("resJsonString", resJsonString);
	
	Возврат resData;
КонецФункции

Функция СтруктураВМассив(struct)

	Коллекция = Новый Соответствие;

	Для каждого kv Из struct Цикл

		Коллекция.Вставить(kv.key, kv.value);

	КонецЦикла;

	Возврат Коллекция;

КонецФункции

Функция ПолучитьКодИТекстОшибки(ОбъектРРО) Экспорт

	ТекстОшибки = "";

	Если ОбъектРРО.Свойство("lastResp") Тогда

		Если ЗначениеЗаполнено(ОбъектРРО.lastResp.get("res")) Тогда

			ТекстОшибки = Строка(ОбъектРРО.lastResp.get("res")) + " " + ОбъектРРО.lastResp.get("errortxt");

		КонецЕсли;

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции

Функция ПолучитьВерсиюДрайвераКлиент()
	Возврат "6.0";
КонецФункции

Функция ДобавитьСтрокуЛога(ТекстСообщения, СтрокаЛога)	Экспорт

	СтрокаЛога = СокрЛП(СтрокаЛога) + Символы.ПС + СокрЛП(ТекстСообщения);

	Возврат СтрокаЛога;

КонецФункции

Функция ОтправитьПакет(ОбъектДрайвера, Задание = "", reqData = Неопределено) Экспорт

  	Перем IP, ПортIP, ТипСоединения, ИмяУстройства, Токен;
	  
	ОбъектДрайвера.Параметры.Свойство("IP", IP);
	ОбъектДрайвера.Параметры.Свойство("ПортIP", ПортIP);
	ОбъектДрайвера.Параметры.Свойство("ИмяУстройства", ИмяУстройства);
	ОбъектДрайвера.Параметры.Свойство("Токен", Токен);

	dm = ОбъектДрайвера.Драйвер;

	Если Задание = "" Тогда

			reqJsonString = СформироватьJSON(ОбъектДрайвера.ТекущееЗадание);

	Иначе	reqJsonString = СформироватьJSON(СоздатьПакет(ОбъектДрайвера, Задание, reqData));

	КонецЕсли;
	
	resData = Неопределено;
	
	Попытка

		connection = new HTTPConnection(IP, ПортIP);
		
	Исключение

		resData = СтруктураВМассив(new Structure("res, errortxt", -1, "Не вдалося встановити з'єднання з DeviceManager:"
			+ " " + ErrorDescription()));
		connection = Неопределено;

	КонецПопытки;

	Если resData = Неопределено Тогда

		request = new HTTPRequest("/dm/execute");
		request.headers.insert("Content-Type", "application/json");
		request.setBodyFromString(reqJsonString); //, TextEncoding.UTF8, ByteOrderMarkUsage.DontUse);

		Попытка

			response = connection.POST(request);
			resJsonString = response.getBodyAsString();

		Исключение

			resData = СтруктураВМассив(new Structure("res, errortxt", -2, "Помилка отримання відповіді від DeviceManager:"
			+ " " + ErrorDescription()));

			connection = Неопределено;

		КонецПопытки;

	КонецЕсли;

	Если resData = Неопределено Тогда

		Если valueIsFilled(resJsonString) Тогда

				resData = РасшифроватьJSON(resJsonString);

		Иначе	resData = СтруктураВМассив(new Structure("res, errortxt", -3, "Відсутня відповідь DeviceManager"));

		КонецЕсли;

	КонецЕсли;

	Если resData = Неопределено Тогда

		resData = СтруктураВМассив(new Structure("res, errortxt", -4, "Помилка розшифровки відповіді DeviceManager"));

	КонецЕсли;
	
	ОбъектДрайвера.insert("lastResp", resData);
	ОбъектДрайвера.insert("resJsonString", resJsonString);
	
	Возврат resData;

КонецФункции

Функция СформироватьJSON(data)

	jsonWriter = new JSONWriter;
	jsonWriter.setString(new JSONWriterSettings(JSONLineBreak.Unix, " ", true));
	writeJSON(jsonWriter, data);

	Возврат jsonWriter.close();

КонецФункции

Функция СоздатьПакет(ОбъектДрайвера, Задание, reqData = Неопределено)

	Если ОбъектДрайвера.Параметры.Свойство("УИД") Тогда

			tag = ОбъектДрайвера.Параметры.УИД;

	Иначе	tag = СокрЛП(Задание) + "_" + format(ТекущаяДатаСеанса(), "ДФ=yyyyMMddHHmmss"); //открытие смены

	КонецЕсли;

	packet = Новый Соответствие;
	packet.Вставить("ver"		, 6);
	packet.Вставить("source"	, "1C||BAS");   
	packet.Вставить("device"	, ОбъектДрайвера.Параметры.ИмяУстройства);
	packet.Вставить("token"		, ОбъектДрайвера.Параметры.Токен);
	packet.Вставить("tag"		, tag);
	packet.Вставить("dt"		, Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMddHHmmss"));
	packet.Вставить("type"		, ОбъектДрайвера.Параметры.enDMTaskType.FISCAL);
	
//	LNK 23.12.2023 07:24:00 - временно, для контроля картинкой "pf_image"
	packet.Вставить("need_pf_img"	, 2);
	packet.Вставить("need_pf_pdf"	, 1);
	packet.Вставить("need_pf_txt"	, 1);

	Если Задание >= 0 Тогда

		fiscal = Новый Соответствие;
		fiscal.Вставить("casher", "");
		fiscal.Вставить("cpwd"	, "");
		fiscal.Вставить("fisid"	, "");
		fiscal.Вставить("task"	, Задание);

		//2024-09-03 sa для возвратов нужно передавать поле содержащее фискальный номер чека продажи
		Если Задание = 2 Тогда
			//ФН_Продажи = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.ПолучитьФискальныйНомерЧека();
			СтруктураОтвета = ПолучитьФискальныйНомерЧекаПродажиПоУИД(Прав(ОбъектДрайвера.Параметры.УИД,36));
			Если СтруктураОтвета.Успешно Тогда
				fiscal.Вставить("purchase_receipt_fisn"	, СтруктураОтвета.ФискальныйНомер);
				fiscal.Вставить("purchase_rro_fisn"	, СтруктураОтвета.ФискальныйРегистратор);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ reqData = Неопределено Тогда

			Для каждого КлючЗначение Из reqData Цикл

				fiscal.Вставить(КлючЗначение.key, КлючЗначение.value);

			КонецЦикла;

		КонецЕсли;

		packet.Вставить("fiscal", fiscal);

	Иначе

		Если НЕ reqData = Неопределено Тогда

			Для каждого КлючЗначение Из reqData Цикл

				packet.Вставить(КлючЗначение.key, КлючЗначение.value);

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;
	
	Возврат packet;

КонецФункции

// Функция формирует шаблон чека.
Функция СформироватьШаблонЧека(ВходныеПараметры, ДополнительныйТекст = Неопределено, ТипОборудования = "") Экспорт

	ТаблицаНоменклатуры = ВходныеПараметры[0];
	ТаблицаОплат        = ВходныеПараметры[1];
	ОбщиеПараметры      = ВходныеПараметры[2];

	ТипыЧеков = Новый Соответствие();
	ТипыЧеков.Вставить(0, "ПРОДАЖА"); 
	ТипыЧеков.Вставить(1, "ВОЗВРАТ");
	ТипыЧеков.Вставить(2, "ВНЕСЕНИЕ"); 
	ТипыЧеков.Вставить(3, "ВЫЕМКА");
	ТипыЧеков.Вставить(4, "ОТЧЕТ БЕЗ ГАШЕНИЯ");
	ТипыЧеков.Вставить(5, "ОТЧЕТ С ГАШЕНИЕМ");
	
	// Общие параметры чека
	ПараметрыЧека = Новый Структура;

	ПараметрыЧека.Вставить("ТипЧека"			, ТипыЧеков.Получить(ОбщиеПараметры[0])); 
	ПараметрыЧека.Вставить("ФискальныйЧек"		, ОбщиеПараметры[1]);
	ПараметрыЧека.Вставить("СуммаДокумента"		, ОбщиеПараметры[3]);

	ПараметрыЧека.Вставить("ТекстШапки"			, ВРег(ОбщиеПараметры[6]));
	ПараметрыЧека.Вставить("ТекстПодвала"		, ВРег(ОбщиеПараметры[7]));
	ПараметрыЧека.Вставить("НомерЧека"			, ОбщиеПараметры[ 9]);
	ПараметрыЧека.Вставить("НомерКассы"			, ОбщиеПараметры[10]);
	ПараметрыЧека.Вставить("ДатаВремя"			, ВРег(ОбщиеПараметры[11]));
	ПараметрыЧека.Вставить("ИмяКассира"			, ВРег(ОбщиеПараметры[12]));
	ПараметрыЧека.Вставить("ОрганизацияНазвание", "");//ВРег(ОбщиеПараметры[13]));
	ПараметрыЧека.Вставить("ОрганизацияИНН"     , "");//ОбщиеПараметры[14]);
	ПараметрыЧека.Вставить("ДокументОснование"	, ОбщиеПараметры[17][2]);
	ПараметрыЧека.Вставить("НомерЧекаВозврата"	, "");//ОбщиеПараметры[18]);

//	LNK 25.10.2023 05:41:37
	ПараметрыЧека.Вставить("НомерТелефона"			, ОбщиеПараметры[19]);
	ПараметрыЧека.Вставить("ВладелецДисконтнойКарты", ОбщиеПараметры[20]);
	ПараметрыЧека.Вставить("ВызовИзРМК"	, ?(ОбщиеПараметры[21].Свойство("ВызовИзРМК"), ОбщиеПараметры[21].ВызовИзРМК, Ложь));
	ПараметрыЧека.Вставить("ПечататьЧек", ОбщиеПараметры[21].ПечатьЧековНаПринтер = Истина И ОбщиеПараметры[21].ПРРО_ПД_ПечатьЧеков = Истина);
	
	ТаблицаДопРеквизитов = Новый Массив;
	ТаблицаДопРеквизитов.Добавить(Новый Массив);

	// Формируем позиции чека
	Если НЕ ТаблицаНоменклатуры = Неопределено Тогда

		ПозицииЧека = Новый Массив;

		Для ИндексМассива = 0 По ТаблицаНоменклатуры.Количество() - 1 Цикл

			СтрокаПозицииЧека = Новый Структура;

			ДанныеСтроки = ТаблицаНоменклатуры[ИндексМассива];

			СтрокаПозицииЧека.Вставить("ФискальнаяСтрока");
			СтрокаПозицииЧека.Вставить("Наименование"			, ДанныеСтроки[ 0].Значение);
			СтрокаПозицииЧека.Вставить("Штрихкод"			   	, ДанныеСтроки[ 1].Значение);
			СтрокаПозицииЧека.Вставить("Артикул"			   	, ДанныеСтроки[ 2].Значение);
			СтрокаПозицииЧека.Вставить("НомерСекции" 			, ДанныеСтроки[ 3].Значение);

			СтрокаПозицииЧека.Вставить("Цена"					, ДанныеСтроки[ 4].Значение);
			СтрокаПозицииЧека.Вставить("Количество"				, ДанныеСтроки[ 5].Значение);

			СтрокаПозицииЧека.Вставить("СуммаСкидок" 			, ДанныеСтроки[ 7].Значение);
			СтрокаПозицииЧека.Вставить("ПроцентСкидок"			, ДанныеСтроки[ 8].Значение);

			СтрокаПозицииЧека.Вставить("Сумма"       			, ДанныеСтроки[ 9].Значение);
			СтрокаПозицииЧека.Вставить("СуммаНДС" 				, ДанныеСтроки[11].Значение);
			СтрокаПозицииЧека.Вставить("СтавкаНДС"   			, ДанныеСтроки[12].Значение);
			СтрокаПозицииЧека.Вставить("СтавкаНДССтрокой"		, ДанныеСтроки[17].Значение);

			СтрокаПозицииЧека.Вставить("ЭтоПодакцизныйТовар"   	, ДанныеСтроки[18].Значение);

			СтрокаПозицииЧека.Вставить("КодПоУКТВЭД"		   	, ДанныеСтроки[19].Значение);
			СтрокаПозицииЧека.Вставить("ЕдиницаИзмерения"		, ДанныеСтроки[20].Значение);
			СтрокаПозицииЧека.Вставить("ЦенаВключаетНДС"		, ДанныеСтроки[21].Значение);

			ПозицииЧека.Добавить(СтрокаПозицииЧека);

		КонецЦикла;

	Иначе

		ПозицииЧека = Неопределено;

	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДополнительныйТекст) Тогда

		Если ПозицииЧека = Неопределено Тогда

			ПозицииЧека = Новый Массив;

		КонецЕсли;

		СтрокаПозицииЧека = Новый Структура;
		СтрокаПозицииЧека.Вставить("ТекстоваяСтрока");
		СтрокаПозицииЧека.Вставить("Текст",  ДополнительныйТекст);

		ПозицииЧека.Добавить(СтрокаПозицииЧека);

	КонецЕсли;
	
	// Формируем таблицу оплат.
	Если НЕ ТаблицаОплат = Неопределено Тогда

		ОплатаЧека = Новый Массив;

		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл

			СтрокаОплаты = Новый Структура;

			СтрокаОплаты.Вставить("ТипОплаты"   , ТаблицаОплат[ИндексОплаты][0].Значение);
			СтрокаОплаты.Вставить("Сумма"       , ТаблицаОплат[ИндексОплаты][1].Значение);
			СтрокаОплаты.Вставить("Наименование", ТаблицаОплат[ИндексОплаты][2].Значение);

			ОплатаЧека.Добавить(СтрокаОплаты);

		КонецЦикла; 

	Иначе

		ТаблицаОплат = Неопределено;

	КонецЕсли;
	
	// Подготовка данных.
	ШаблонЧека  = Новый Массив();
	ШаблонЧека.Добавить(ПараметрыЧека);
	ШаблонЧека.Добавить(ПозицииЧека);
	ШаблонЧека.Добавить(ОплатаЧека);
	
	Возврат ШаблонЧека;

КонецФункции

Функция НапечататьФискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                   Наименование, Количество, Цена, Сумма, СуммоваяСкидка,
                                   НомерСекции, СтавкаНДС, ДопРеквизиты, ВыходныеПараметры) Экспорт
	Результат = Истина;
	
	// Печать строки чека
	мКодДляННиРРО = СтрЗаменить(ДопРеквизиты.КодДляННиРРО," ","");
	мКодДляННиРРОВыводитьПриПечатиЧека = ДопРеквизиты.КодДляННиРРОВыводитьПриПечатиЧека;

	НалоговаяГруппа = ПолучитьНалоговуюГруппу(ОбъектДрайвера, СтавкаНДС, ДопРеквизиты);
	
	//Вычленим КОД УКТВЭД
	Если ЗначениеЗаполнено(мКодДляННиРРО) Тогда
		НомерСимвола = Найти(Наименование,мКодДляННиРРО);
		Если НомерСимвола > 0 Тогда
			Наименование = Сред(Наименование,НомерСимвола+СтрДлина(мКодДляННиРРО)+1);
		КонецЕсли;
	КонецЕсли;

	row = Новый Соответствие;
	row.insert("name", Наименование);
	row.insert("cnt", Количество);
	row.insert("disc", СуммоваяСкидка);
	row.insert("cost", Сумма+СуммоваяСкидка);
	row.insert("taxgrp", НалоговаяГруппа);
	
	//2024-09-02 sa для национальной программы Кэшбек вводим печать ШК
	//2024-09-03 sa Мишинский хочет передавать только ШК начинающиеся с 482 или 20
	//2024-09-09 sa Решили передавать все ШК
	//Если Лев(ДопРеквизиты.Штрихкод,3) = "482" ИЛИ Лев(ДопРеквизиты.Штрихкод,2) = "20" Тогда
		row.insert("code1", ДопРеквизиты.Штрихкод);
	//КонецЕсли;
	

	//Код для НН\РРО
	Если мКодДляННиРРОВыводитьПриПечатиЧека Тогда 
		row.insert("code2", мКодДляННиРРО);
	КонецЕсли;
	
	receipt = ОбъектДрайвера.ТекущееЗадание.get("fiscal").get("receipt");
	receipt.get("rows").add(row);
	receipt.insert("sum", receipt.get("sum") + (Сумма));
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНалоговуюГруппу(ОбъектРРО, НДС, СтруктураДопРеквизитов)
	СтавкаНДССтрокой = Неопределено;
	ЭтоПодакцизныйТовар = Неопределено;
	
	Рез = 1;
	
	СтруктураДопРеквизитов.Свойство("СтавкаНДССтрокой", СтавкаНДССтрокой);
	СтруктураДопРеквизитов.Свойство("ЭтоПодакцизныйТовар", ЭтоПодакцизныйТовар);
	
	ТаблицаСоответствий = Неопределено;
	ОбъектРРО.Параметры.Свойство("ТаблицаСоответствийНалоговыхГрупп", ТаблицаСоответствий);
	Для каждого Строка из ТаблицаСоответствий Цикл
		Если Строка[3] = СтавкаНДССтрокой И Строка[2] = ЭтоПодакцизныйТовар Тогда
			Рез = Строка[0];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
КонецФункции	

Функция РасчитатьОкругление(Сумма)
	Возврат Окр(Сумма,1)- Сумма;
КонецФункции

Процедура ВывестиЧекНаПечать(ТабличныйДокумент, ОбъектДрайвера, ОбщиеПараметры, ВыходныеПараметры, ТекстЗаголовка, ЕстьДанныеФлагов)

	Если ОбъектДрайвера.Параметры.ПечататьЧек = Истина Тогда

		ТабличныйДокумент.АвтоМасштаб = Ложь;
		ТабличныйДокумент.ШиринаСтраницы = 50;
		ТабличныйДокумент.ВысотаСтраницы = 3276;
		ТабличныйДокумент.ПолеСлева		 = 0;
		ТабличныйДокумент.ПолеСправа	 = 0;

		ТабличныйДокумент.Напечатать();

		Если ЕстьДанныеФлагов Тогда

			ВыходныеПараметры[2].ФлагиПечати.Напечатан = Истина;

		КонецЕсли;

	ИначеЕсли НЕ (ОбщиеПараметры[21].ПечатьЧековНаПринтер = Истина И ОбщиеПараметры[21].ПРРО_ПД_ПечатьЧеков = Истина) Тогда

		ПараметрыФормы = Новый Структура(
			"ТекстЗаголовка, ТабличныйДокумент"
			, ТекстЗаголовка
			, ТабличныйДокумент
		);

//		ОткрытьФорму("ОбщаяФорма.ФормаПростогоТабличногоДокумента"
//			, ПараметрыФормы
//		);

	КонецЕсли;

КонецПроцедуры


