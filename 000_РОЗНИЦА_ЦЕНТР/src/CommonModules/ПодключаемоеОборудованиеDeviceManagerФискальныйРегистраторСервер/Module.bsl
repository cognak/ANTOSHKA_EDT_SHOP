
Функция ПолучитьQRкод(QRСтрока, УровеньКоррекции, Размер) Экспорт
	ГенераторQRКода = ПолучитьГенераторQRкода();
	Если ГенераторQRКода = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанныеКартинки = ГенераторQRКода.GenerateQRCode(QRСтрока, УровеньКоррекции, Размер);
	Исключение
		сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ДвоичныеДанныеКартинки;
	
КонецФункции	

Функция ПолучитьГенераторQRкода() Экспорт
	лМакетКомпоненты = ПолучитьОбщийМакет("КомпонентаПечатиQRКода");
	лАдрес = ПоместитьВоВременноеХранилище(лМакетКомпоненты);
	ГенераторQRкода = Неопределено;
	попытка
		Если ПодключитьВнешнююКомпоненту(лАдрес,"QR") тогда
			ГенераторQRкода = Новый("AddIn.QR.QRCodeExtension");
		иначе
			Сообщить("Не вдалося підключити компонент генерації QR коду");		
		конецЕсли;
	исключение
		Сообщить(ОписаниеОшибки());	
	КонецПопытки;
	возврат ГенераторQRкода;
КонецФункции	

Функция ПолучитьТабличныйДокументЧек(ОтветККМ, ПараметрыЗакрытия, ТекстЗаголовка = "", URL = "", ТабличныйДокумент = Неопределено, Копия = Ложь) Экспорт
	
	Макет = ПолучитьОбщийМакет("ПРРО_ШаблонЧекаDeviceManagerФискальныйРегистратор");

	Если ТабличныйДокумент = Неопределено Тогда

		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.Вывод = ИспользованиеВывода.Разрешить;	//	LNK 08.01.2023 09:15:22
		ТабличныйДокумент.ИмяПараметровПечати = "ПРРО_ПАРАМЕТРЫ_ПЕЧАТИ_ЧЕК_ПРИНТЕР";

	Иначе

		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		

	КонецЕсли;
	
	URL			= "";
	КодЧекаККМ	= "";
	printinfo	= "";
	goods		= "";
	pays		= "";
	taxes		= "";

	Если ЗначениеЗаполнено(ОтветККМ) Тогда

		Попытка

			Если ТипЗнч(ОтветККМ) = Тип("Строка") Тогда

					сОтветККМ = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.РасшифроватьJSON(ОтветККМ);

			Иначе	сОтветККМ = ОтветККМ;	//	LNK 27.10.2023 09:34:27 - копия, по данным, хранящимся в чеке

			КонецЕсли;

			сИнфо = сОтветККМ.Получить("info");

			Если НЕ сИнфо = Неопределено И ТипЗнч(сИнфо) = Тип("Соответствие") Тогда

				URL = ПолучитьЗначениеСоответствия(сИнфо, "qr", URL);
				URL = Лев(URL, СтрНайти(URL, "?MAC:"));
				КодЧекаККМ = ПолучитьЗначениеСоответствия(сИнфо, "doccode", КодЧекаККМ);

			КонецЕсли;

		Исключение

			ТекстОшибки = ОписаниеОшибки();

		КонецПопытки;

		Если НЕ сИнфо = Неопределено И ТипЗнч(сИнфо) = Тип("Соответствие") Тогда
			
			task =  ПолучитьЗначениеСоответствия(сИнфо, "task", "");
			ЭтоВозврат = task = 2;
			
			//printinfo
			printinfo = ПолучитьЗначениеСоответствия(сИнфо, "printinfo", printinfo);
			
			Если НЕ printinfo = Неопределено И ТипЗнч(printinfo) = Тип("Соответствие") Тогда
				
				goods =  ПолучитьЗначениеСоответствия(printinfo, "goods", goods);
				pays =  ПолучитьЗначениеСоответствия(printinfo, "pays", pays);
				taxes =  ПолучитьЗначениеСоответствия(printinfo, "taxes", taxes);

			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.fis_code = ПолучитьЗначениеСоответствия(printinfo, "fis_code", ""); 
			ОбластьМакета.Параметры.name = ПолучитьЗначениеСоответствия(printinfo, "name", ""); 
			ОбластьМакета.Параметры.shopad = ПолучитьЗначениеСоответствия(printinfo, "shopad", ""); 
			ОбластьМакета.Параметры.shopname = ПолучитьЗначениеСоответствия(printinfo, "shopname", ""); 
			ОбластьМакета.Параметры.vat_code = ПолучитьЗначениеСоответствия(printinfo, "vat_code", ""); 
			ОбластьМакета.Параметры.fisid = СтрЗаменить(ПолучитьЗначениеСоответствия(printinfo, "fisid", ""), Символы.НПП, "");
		//	LNK 27.10.2023 11:27:56
			ОбластьМакета.Параметры.copy = ?(Копия = Истина, "КОПИЯ", "");

			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
			ТабличныйДокумент.Вывести(ОбластьМакета);		

			Для каждого СтрокаТоваров ИЗ goods Цикл

				ОбластьМакета = Макет.ПолучитьОбласть("Товар");
				ОбластьМакета.Параметры.cnt = Формат(ПолучитьЗначениеСоответствия(СтрокаТоваров, "cnt", ""),"ЧДЦ=3"); 
				ОбластьМакета.Параметры.price = Формат(ПолучитьЗначениеСоответствия(СтрокаТоваров, "price", ""),"ЧДЦ=2");  			
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				code2 = ПолучитьЗначениеСоответствия(СтрокаТоваров, "code2", "");
				Если ЗначениеЗаполнено(code2) Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("УКТЗЕД");
					ОбластьМакета.Параметры.code2 = СокрЛП(code2);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЕсли;
				
				ОбластьМакета = Макет.ПолучитьОбласть("ТоварИмя");
				
				ОбластьМакета.Параметры.name = ПолучитьЗначениеСоответствия(СтрокаТоваров, "name", ""); 
				//"code2" "code1" "code3"
				
				ОбластьМакета.Параметры.cost =  Формат(ПолучитьЗначениеСоответствия(СтрокаТоваров, "cost", ""),"ЧДЦ=2");  
				ОбластьМакета.Параметры.taxlit = ПолучитьЗначениеСоответствия(СтрокаТоваров, "taxlit", ""); 
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				disc = ПолучитьЗначениеСоответствия(СтрокаТоваров, "disc", ""); 

				Если ЗначениеЗаполнено(disc) Тогда

					ОбластьМакета = Макет.ПолучитьОбласть("Скидка");
					ОбластьМакета.Параметры.disc = Формат(disc,"ЧДЦ=2"); 
					ОбластьМакета.Параметры.taxlit = ПолучитьЗначениеСоответствия(СтрокаТоваров, "taxlit", ""); 
					
					ТабличныйДокумент.Вывести(ОбластьМакета);

				КонецЕсли;
				
				comment = ПолучитьЗначениеСоответствия(СтрокаТоваров, "comment", "");

				Если ЗначениеЗаполнено(comment) Тогда

					ОбластьМакета = Макет.ПолучитьОбласть("Комментарий");
					ОбластьМакета.Параметры.comment = comment; 
					
					ТабличныйДокумент.Вывести(ОбластьМакета);

				КонецЕсли;

				ОбластьМакета = Макет.ПолучитьОбласть("ПробелУзкий");
				ТабличныйДокумент.Вывести(ОбластьМакета);		

			КонецЦикла;

			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		

			Для каждого СтрокаОплат ИЗ pays Цикл

				ОбластьМакета = Макет.ПолучитьОбласть("Оплата");
				ОбластьМакета.Параметры.sum = Формат(ПолучитьЗначениеСоответствия(СтрокаОплат, "sum", ""),"ЧДЦ=2")+" грн.";  
				ОбластьМакета.Параметры.type = ПолучитьЗначениеСоответствия(СтрокаОплат, "typen", ""); 
				//"info" "typ"
				
				ТабличныйДокумент.Вывести(ОбластьМакета);

			КонецЦикла;
			
			sum_topay =  ПолучитьЗначениеСоответствия(printinfo, "sum_topay", "");
			sum_0 = ПолучитьЗначениеСоответствия(printinfo, "sum_0", "");
			sum_disc = ПолучитьЗначениеСоответствия(printinfo,"sum_disc", "");
			round = sum_0-sum_topay -sum_disc;
			
			Если round <> 0 Тогда

				ОбластьМакета = Макет.ПолучитьОбласть("Округления");
				ОбластьМакета.Параметры.round = Формат(round, "ЧДЦ=2");  
				ТабличныйДокумент.Вывести(ОбластьМакета);	

			КонецЕсли;

			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		
			
			ОбластьМакета = Макет.ПолучитьОбласть("Итог");
			ОбластьМакета.Параметры.sum_topay = Формат(sum_0-sum_disc,"ЧДЦ=2")+" грн.";  
			ТабличныйДокумент.Вывести(ОбластьМакета);	

			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		
			
			Для каждого СтрокаНалогов ИЗ taxes Цикл
				tax_sum = Формат(ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_sum", ""),"ЧДЦ=2");  
				Если ЗначениеЗаполнено(tax_sum) Тогда
					
					ОбластьМакета = Макет.ПолучитьОбласть("Налог");
					ОбластьМакета.Параметры.tax_percent = Формат(ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_percent", ""),"ЧДЦ=2");  
					ОбластьМакета.Параметры.tax_name = ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_name", ""); 
					ОбластьМакета.Параметры.tax_sum = Формат(ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_sum", ""),"ЧДЦ=2");  
					//"gr_code" "base_sum"
					
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЕсли;

				ex_sum = ПолучитьЗначениеСоответствия(СтрокаНалогов, "ex_sum", "");

				Если ЗначениеЗаполнено(ex_sum) Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Акциз");
					ОбластьМакета.Параметры.ex_percent = Формат(ПолучитьЗначениеСоответствия(СтрокаНалогов, "ex_percent", ""),"ЧДЦ=2");  
					ОбластьМакета.Параметры.ex_name = ПолучитьЗначениеСоответствия(СтрокаНалогов, "ex_name", ""); 
					ОбластьМакета.Параметры.ex_sum = Формат(ex_sum,"ЧДЦ=2");  
					
					ТабличныйДокумент.Вывести(ОбластьМакета);
					
				КонецЕсли

			КонецЦикла;

			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		

			ОбластьМакета = Макет.ПолучитьОбласть("КОплате");
			Если ЭтоВозврат Тогда
				ОбластьМакета.Параметры.ДоОплаты = "До повернення"
			Иначе
				ОбластьМакета.Параметры.ДоОплаты = "До сплати"
			КонецЕсли;
			ОбластьМакета.Параметры.sum_topay = Формат(ПолучитьЗначениеСоответствия(printinfo, "sum_topay", ""), "ЧДЦ=2") + " грн."; 
			ТабличныйДокумент.Вывести(ОбластьМакета);	

			Если ПараметрыЗакрытия.ПечатьПодвала = Истина Тогда	//	LNK 25.03.2022 10:19:48

				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалИнфо|Тело");
				ОбластьМакета.Параметры.ТекстПодвала = Символы.ПС + СокрЛП(ПараметрыЗакрытия.ТекстПодвала);

				ТабличныйДокумент.Вывести(ОбластьМакета);	

				ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		

			КонецЕсли;

			ОбластьМакета = Макет.ПолучитьОбласть("ФНомер");
			ОбластьМакета.Параметры.fn = ПолучитьЗначениеСоответствия(printinfo, "fisn", ""); 
			ОбластьМакета.Параметры.dt = ПолучитьЗначениеСоответствия(printinfo, "dt", ""); 
			ТабличныйДокумент.Вывести(ОбластьМакета);	
			
			Если ЗначениеЗаполнено(URL) Тогда

				РазмерQRВПискселях = 250;
				ДанныеQRКода = ПолучитьQRкод(URL, 0, РазмерQRВПискселях);
				
				Область = Макет.ПолучитьОбласть("Картинка"); 
				Рисунок = Область.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка); 
				
				Рисунок.Верх	=  0; 
				Рисунок.Высота	= 38;//59; 
				Рисунок.Ширина	= 38;//59;         
				Рисунок.Лево	=  2;//8; 
				
				Рисунок.ГраницаСверху	= Ложь;
				Рисунок.ГраницаСнизу	= Ложь;
				Рисунок.ГраницаСлева	= Ложь;
				Рисунок.ГраницаСправа	= Ложь;

				Рисунок.Картинка = Новый Картинка(ДанныеQRКода);
				
				ТабличныйДокумент.АвтоМасштаб = Истина;
				ТабличныйДокумент.ОтображатьСетку = Ложь;
				
				ТабличныйДокумент.Вывести(Область);

			Иначе

				ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		

			КонецЕсли;

			ОбластьМакета = Макет.ПолучитьОбласть("Подвал2");
			//ОбластьМакета.Параметры.isOffline = Формат(ПолучитьЗначениеСоответствия(printinfo, "isOffline", ""),"ЧДЦ=2"); 
			ОбластьМакета.Параметры.Онлайн =  ?(НЕ ПолучитьЗначениеСоответствия(printinfo, "isOffline", ""),"Онлайн","Офлайн"); 		
			//ОбластьМакета.Параметры.mac = ПолучитьЗначениеСоответствия(printinfo, "mac", ""); 
			ОбластьМакета.Параметры.fisid = СтрЗаменить(ПолучитьЗначениеСоответствия(printinfo, "fisid", ""),Символы.НПП,"");
			ТекстЗаголовка = "ФН " + ОбластьМакета.Параметры.fisid;
			
			Если ЭтоВозврат Тогда
				ОбластьМакета.Параметры.Чек = "ВИДАТКОВИЙ ЧЕК"
			Иначе
				ОбластьМакета.Параметры.Чек = "ФІСКАЛЬНИЙ ЧЕК"
			КонецЕсли;

			ОбластьМакета.Параметры.manuf = ПолучитьЗначениеСоответствия(printinfo, "manuf", ""); 
			ТабличныйДокумент.Вывести(ОбластьМакета);	

		КонецЕсли;

	Иначе 

		Сообщить("Документ не фискализирован, печать невозможна");
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;

КонецФункции

//	LNK 08.04.2022 07:32:37
Функция ПолучитьТабличныйДокументОтчет(НаименованиеОтчета, сИнфо)	Экспорт

	Макет = ПолучитьОбщийМакет("ПРРО_ШаблонЧекаDeviceManagerФискальныйРегистратор");
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Вывод = ИспользованиеВывода.Разрешить;	//	LNK 09.01.2023 06:51:11

	printinfo = ПолучитьЗначениеСоответствия(сИнфо, "printheader", Новый Соответствие);
	receipt	  = ПолучитьЗначениеСоответствия(сИнфо, "receipt"	 , Новый Соответствие);	//	LNK 09.01.2023 07:07:00
	taxes	  = ПолучитьЗначениеСоответствия(сИнфо, "taxes", "");
	pays	  = ПолучитьЗначениеСоответствия(сИнфо, "pays", "");
	money	  = ПолучитьЗначениеСоответствия(сИнфо, "money", "");

	Область = Макет.ПолучитьОбласть("Шапка|Тело");
	Область.Параметры.name		= НаименованиеОтчета
					+ Символы.ПС + ОбщегоНазначенияКлиентСервер.REPEAT("-", 15)
					+ Символы.ПС + ПолучитьЗначениеСоответствия(printinfo, "name", ""); 
	Область.Параметры.fis_code	= ПолучитьЗначениеСоответствия(printinfo, "fis_code", ""); 
	Область.Параметры.shopad	= ПолучитьЗначениеСоответствия(printinfo, "shopad", ""); 
	Область.Параметры.shopname	= ПолучитьЗначениеСоответствия(printinfo, "shopname", ""); 
	Область.Параметры.vat_code	= ПолучитьЗначениеСоответствия(printinfo, "vat_code", ""); 
	Область.Параметры.fisid		= СтрЗаменить(ПолучитьЗначениеСоответствия(printinfo, "fisid", ""),Символы.НПП,""); 

	ТабличныйДокумент.Вывести(Область);
	
//	LNK 09.01.2023 07:25:09
	Область = Макет.ПолучитьОбласть("ШапкаОтчет|Тело");

	count_p	= ПолучитьЗначениеСоответствия(receipt, "count_p", 0);	//	продажа
	count_m	= ПолучитьЗначениеСоответствия(receipt, "count_m", 0);	//	возврат
	Область.Параметры.count_R	= count_p + count_m;
	Область.Параметры.count_p	= count_p;
	Область.Параметры.count_m	= count_m;

	ТабличныйДокумент.Вывести(Область);
	
	Если НЕ money.Количество() = 0 Тогда

		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

		Область = Макет.ПолучитьОбласть("О_Текст|Тело");
		Область.Параметры.Комментарий = ОбщегоНазначенияКлиентСервер.PAD("------Внесення\винесення:", 10, Ложь, "-");
		ТабличныйДокумент.Вывести(Область);

		Область = Макет.ПолучитьОбласть("Оплата|Тело");

		Для каждого СтрокаОплат ИЗ money Цикл

			sum_p = Формат(ПолучитьЗначениеСоответствия(СтрокаОплат, "sum_p", 0), "ЧДЦ=2; ЧН=0.00");
			sum_m = Формат(ПолучитьЗначениеСоответствия(СтрокаОплат, "sum_m", 0), "ЧДЦ=2; ЧН=0.00");

			Если ЗначениеЗаполнено(sum_p) Тогда

				Область.Параметры.type = "Внесення";
				Область.Параметры.sum  = sum_p;
				ТабличныйДокумент.Вывести(Область);

			КонецЕсли;

			Если ЗначениеЗаполнено(sum_m) Тогда

				Область.Параметры.type = "Винесення";
				Область.Параметры.sum  = sum_m;
				ТабличныйДокумент.Вывести(Область);

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если НЕ pays.Количество() = 0 Тогда

		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

		Область = Макет.ПолучитьОбласть("О_Текст|Тело");
		Область.Параметры.Комментарий = ОбщегоНазначенияКлиентСервер.PAD("------Оплати:", 10, Ложь, "-");
		ТабличныйДокумент.Вывести(Область);

		Область = Макет.ПолучитьОбласть("Оплата|Тело");

		Для каждого СтрокаОплат ИЗ pays Цикл

			sum_p = Формат(ПолучитьЗначениеСоответствия(СтрокаОплат, "sum_p", ""), "ЧДЦ=2; ЧН=0.00");
			sum_m = Формат(ПолучитьЗначениеСоответствия(СтрокаОплат, "sum_m", ""), "ЧДЦ=2; ЧН=0.00");

			Если ЗначениеЗаполнено(sum_p) Тогда

				Область.Параметры.type = "Cума продажів: " + ПолучитьЗначениеСоответствия(СтрокаОплат, "name", "");
				Область.Параметры.sum  = sum_p;
				ТабличныйДокумент.Вывести(Область);

			КонецЕсли;
			
			Если ЗначениеЗаполнено(sum_m) Тогда

				Область.Параметры.type = "Cума повернення: " + ПолучитьЗначениеСоответствия(СтрокаОплат, "name", "");
				Область.Параметры.sum  = sum_m;
				ТабличныйДокумент.Вывести(Область);

			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;

	Если НЕ taxes.Количество() = 0 Тогда

		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

		Область = Макет.ПолучитьОбласть("О_Текст|Тело");
		Область.Параметры.Комментарий = ОбщегоНазначенияКлиентСервер.PAD("------Податки:", 10, Ложь, "-");
		ТабличныйДокумент.Вывести(Область);

		Область = Макет.ПолучитьОбласть("Оплата|Тело");

		Для каждого СтрокаНалогов ИЗ taxes Цикл

			base_sum_p = Формат(ПолучитьЗначениеСоответствия(СтрокаНалогов, "base_sum_p", ""), "ЧДЦ=2; ЧН=0.00");  
			tax_sum	   = Формат(ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_sum_p" , ""), "ЧДЦ=2; ЧН=0.00");  

			Если ЗначениеЗаполнено(base_sum_p) Тогда

				Область.Параметры.type = "Cума продажів:";
				Область.Параметры.sum  = Формат(base_sum_p, "ЧДЦ=2; ЧН=0.00");
				ТабличныйДокумент.Вывести(Область);

				Область.Параметры.type = "Cума податку (" + ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_fname", "") + ")";
				Область.Параметры.sum  = Формат(tax_sum, "ЧДЦ=2; ЧН=0.00");
				ТабличныйДокумент.Вывести(Область);

			КонецЕсли;
			
			base_sum_m = Формат(ПолучитьЗначениеСоответствия(СтрокаНалогов, "base_sum_m", ""), "ЧДЦ=2; ЧН=0.00");  
			tax_sum	   = Формат(ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_sum_m" , ""), "ЧДЦ=2; ЧН=0.00");  

			Если ЗначениеЗаполнено(base_sum_m) Тогда

				Область.Параметры.type = "Cума повернення:";
				Область.Параметры.sum  = Формат(base_sum_m, "ЧДЦ=2; ЧН=0.00");
				ТабличныйДокумент.Вывести(Область);

				Область.Параметры.type = "Cума податку (" + ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_name", "") + ")";
				Область.Параметры.sum  = Формат(tax_sum, "ЧДЦ=2; ЧН=0.00");
				ТабличныйДокумент.Вывести(Область);

			КонецЕсли;

			ex_sum = ПолучитьЗначениеСоответствия(СтрокаНалогов, "ex_sum_p", "");

			Если ЗначениеЗаполнено(ex_sum) Тогда				

				Область.Параметры.type = "Cума:";
				Область.Параметры.sum  = Формат(base_sum_p, "ЧДЦ=2; ЧН=0.00");
				ТабличныйДокумент.Вывести(Область);

				Область.Параметры.type = "Cума податку (" + ПолучитьЗначениеСоответствия(СтрокаНалогов, "ex_name", "") + ")";
				Область.Параметры.sum  = Формат(ex_sum, "ЧДЦ=2; ЧН=0.00");
				ТабличныйДокумент.Вывести(Область);

			КонецЕсли		

		КонецЦикла;

	КонецЕсли;

	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

	Область = Макет.ПолучитьОбласть("О_Текст|Тело");
	Область.Параметры.Комментарий = ОбщегоНазначенияКлиентСервер.PAD("------Сейф:", 10, Ложь, "-");
	ТабличныйДокумент.Вывести(Область);

	Область = Макет.ПолучитьОбласть("Оплата|Тело");

	safe = ПолучитьЗначениеСоответствия(сИнфо, "safe", 0);

	Область.Параметры.type = "Залишок у каcі:";
	Область.Параметры.sum  = Формат(safe, "ЧДЦ=2; ЧН=0.00");
	ТабличныйДокумент.Вывести(Область);
	
	КодОтчета	= ПолучитьЗначениеСоответствия(сИнфо, "doccode", "");
	НомерОтчета	= ПолучитьЗначениеСоответствия(сИнфо, "docno", "");
	ДатаОтчета	= ПолучитьЗначениеСоответствия(сИнфо, "dt", "");

	Область = Макет.ПолучитьОбласть("О_Текст|Тело");
	Область.Параметры.Комментарий = ДатаОтчета;
	ТабличныйДокумент.Вывести(Область);

	Если ЗначениеЗаполнено(КодОтчета) Тогда

		Область.Параметры.Комментарий = "No." + НомерОтчета + "; Код: " + КодОтчета;
		ТабличныйДокумент.Вывести(Область);

	КонецЕсли;

	Возврат ТабличныйДокумент;

КонецФункции

Функция ПолучитьЗначениеСоответствия(Соответствие, Ключ, ЗначениеПоУмолчанию = Неопределено) Экспорт
	Значение = Соответствие.Получить(Ключ);
	Если Значение = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	Возврат Значение;
КонецФункции

Функция РасшифроватьJSON(Знач СтрокаJSON) Экспорт

	СтрокаJSON = СтрЗаменить(СтрокаJSON, Символ(65279), "");

	JR = Новый ЧтениеJSON;
	JR.УстановитьСтроку(СтрокаJSON);

	Возврат ПрочитатьJSON(JR, true);

КонецФункции

Функция ПолучитьУИДЧека(Ссылка) Экспорт

	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда

		Возврат Ссылка.Номер + "-" + Ссылка.УникальныйИдентификатор();

	КонецЕсли;

	Возврат Новый УникальныйИдентификатор;

КонецФункции

//	LNK 19.02.2022 06:07:25
//	Используется при формировании данных для ФР
Функция ПолучитьПараметрТипыОплаты(Идентификатор)	Экспорт

	ПараметрыУстройства = МенеджерОборудованияСервер.ПолучитьПараметрыУстройства(Идентификатор);

	Если НЕ ТипЗнч(ПараметрыУстройства) = Тип("Структура")	Тогда

		ПараметрыУстройства = Новый Структура;

	КонецЕсли;

	Если НЕ ПараметрыУстройства.Свойство("ТаблицаТиповОплат") Тогда

		МассивТипыОплат = Новый Массив;
		МассивТипыОплат.Добавить(ОбщегоНазначенияКлиентСервер.AAD(0, Перечисления.ТипыОплатЧекаККМ.Наличные));
		МассивТипыОплат.Добавить(ОбщегоНазначенияКлиентСервер.AAD(1, Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта));
		МассивТипыОплат.Добавить(ОбщегоНазначенияКлиентСервер.AAD(2, Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта));
		МассивТипыОплат.Добавить(ОбщегоНазначенияКлиентСервер.AAD(3, Перечисления.ТипыОплатЧекаККМ.Предоплата));
		МассивТипыОплат.Добавить(ОбщегоНазначенияКлиентСервер.AAD(4, Перечисления.ТипыОплатЧекаККМ.Послеплата));
		МассивТипыОплат.Добавить(ОбщегоНазначенияКлиентСервер.AAD(5, Перечисления.ТипыОплатЧекаККМ.БанковскийКредит));
		МассивТипыОплат.Добавить(ОбщегоНазначенияКлиентСервер.AAD(6, Перечисления.ТипыОплатЧекаККМ.ПодарочныйСертификат));

		ПараметрыУстройства.Вставить("ТаблицаТиповОплат", МассивТипыОплат);

	КонецЕсли;

	ПараметрТипыОплат = Новый Массив;
//	Порядок элементов имеет значение!

	Для каждого ЭлементМассива Из ПараметрыУстройства.ТаблицаТиповОплат Цикл

		ПараметрТипыОплат.Добавить(Новый Структура(
			"ID, ТипОплаты"
			, ЭлементМассива[0], ЭлементМассива[1]
			)
		);

	КонецЦикла;

	Возврат ПараметрТипыОплат;

КонецФункции

//	LNK 25.03.2022 10:30:43
Функция ОтправитьУведомлениеПокупателю(НомерТелефона, Контрагент, ДанныеПротокола, ВидСообщения, ИмяКомпьютера = "", СообщитьОбОшибке = Ложь)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Попытка

		Подключение = СервисыСервер.Подключение("RetailPack", СервисыСервер.Таймаут("RetailPack.SendSMS.Timeout"));

		ДанныеОтправителя = ОбщегоНазначенияКлиентСервер.СериализоватьJSON(
			Новый Структура(
				"ЭлементСтруктуры, Магазин, ИмяКомпьютера, Контрагент, Пользователь, ДанныеПротокола"
				, ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().ЭлементСтруктуры
				, ПараметрыСеанса.ТекущийМагазин
				, ИмяКомпьютера
				, Контрагент
				, ПараметрыСеанса.ТекущийПользователь
				, ДанныеПротокола	//	специфика РегистрыСведений.ПротоколСообщений
			)
		);

		ТекстСообщения = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей("За посиланням Ваш E-чек:") + Символы.ПС
						+ ДанныеПротокола.URL + Символы.ПС
						+ СтроковыеФункцииКлиентСервер.СтрокаЛатиницей("Гаряча лінія: 0800306063");

		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Подключение.SendSMS(
				  ОбщегоНазначенияКлиентСервер.РеквизитПеречисления(ВидСообщения)
				, ОтправкаSMS.ПодготовитьНомерТелефона(НомерТелефона)
				, ТекстСообщения
				, Ложь
				, ДанныеОтправителя
			)
		);
		РезультатУведомления = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();

		Если РезультатУведомления.Ошибка И СообщитьОбОшибке Тогда

			Сообщить(РезультатУведомления.ОписаниеОшибки);

		КонецЕсли;

	Исключение

		РезультатУведомления = ОтправкаSMS.ОписаниеРезультата();

		РезультатУведомления.Ошибка = Истина;
		РезультатУведомления.ОписаниеОшибки = ОписаниеОшибки();

	КонецПопытки;

	ЖурналСобытий.Регистрация("ПРРО.SMS", ?(РезультатУведомления.Ошибка = Истина, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Примечание)
		, Метаданные.Справочники.Контрагенты
		, Контрагент
		,
		, "Телефон: " + ОтправкаSMS.ПодготовитьНомерТелефона(НомерТелефона)
			+ Символы.ПС + ?(РезультатУведомления.Ошибка = Истина, РезультатУведомления.ОписаниеОшибки, "Повідомлення надіслано")
		,
		, Истина
		, Ложь
	);

	Возврат РезультатУведомления;

КонецФункции

//	LNK 25.12.2022 06:07:01
Функция ПолучитьДанныеЧека(ДокументСсылка)	Экспорт

	//ДанныеПротокола = Новый Структура(
	//	"Объект, URL, ДанныеPDF"
	//	, ПараметрыЗакрытия.Объект
	//	, URL
	//	, ПотокБуффер.ЗакрытьИПолучитьДвоичныеДанные()
	//);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаПротокола.Контрагент КАК Контрагент,
	|	ТаблицаПротокола.ВидСообщения КАК ВидСообщения,
	|	ТаблицаПротокола.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ПротоколСообщений КАК ТаблицаПротокола
	|ГДЕ
	|	ТаблицаПротокола.Объект = &ДокументСсылка"
	);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл


	КонецЦикла;

	Возврат Новый Структура;

КонецФункции

















