
Функция ПолучитьQRкод(QRСтрока, УровеньКоррекции, Размер) Экспорт

	ГенераторQRКода = ПолучитьГенераторQRкода();

	Если ГенераторQRКода = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Попытка

		ДвоичныеДанныеКартинки = ГенераторQRКода.GenerateQRCode(QRСтрока, УровеньКоррекции, Размер);

	Исключение

		Сообщить(ОписаниеОшибки());

	КонецПопытки;

	Возврат ДвоичныеДанныеКартинки;
	
КонецФункции	

Функция ПолучитьГенераторQRкода() Экспорт

	ГенераторQRкода	= Неопределено;
	ИмяКомпоненты	= "QR" + СтрЗаменить(СокрЛП(Новый УникальныйИдентификатор), "-", "");	//	LNK 02.03.2024 15:35:22

	Попытка

		Если ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПечатиQRКода", ИмяКомпоненты) Тогда	//	LNK 02.03.2024 15:35:32

				ГенераторQRкода = Новый("AddIn." + ИмяКомпоненты + ".QRCodeExtension");

		Иначе	Сообщить("Не вдалося підключити компонент генерації QR коду");		

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();

	КонецПопытки;

	Возврат ГенераторQRкода;

КонецФункции	

Функция ПолучитьТабличныйДокументЧек(ОтветККМ, ПараметрыЗакрытия, ТекстЗаголовка = "", URL = "", ТабличныйДокумент = Неопределено, Копия = Ложь, НулевойЧек = Ложь) Экспорт
	
	Макет = ПолучитьОбщийМакет("ПРРО_ШаблонЧекаDeviceManagerФискальныйРегистратор");

	Если ТабличныйДокумент = Неопределено Тогда

			ТабличныйДокумент = Новый ТабличныйДокумент;
			ТабличныйДокумент.Вывод = ИспользованиеВывода.Разрешить;	//	LNK 08.01.2023 09:15:22
			ТабличныйДокумент.ИмяПараметровПечати = "ПРРО_ПАРАМЕТРЫ_ПЕЧАТИ_ЧЕК_ПРИНТЕР";

	Иначе	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		

	КонецЕсли;

	URL			= "";
	КодЧекаККМ	= "";
	printinfo	= Неопределено;
	goods		= "";
	pays		= "";
	taxes		= "";

	Если ЗначениеЗаполнено(ОтветККМ) Тогда

		Попытка

			Если ТипЗнч(ОтветККМ) = Тип("Строка") Тогда

					сОтветККМ = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.РасшифроватьJSON(ОтветККМ);

			Иначе	сОтветККМ = ОтветККМ;	//	LNK 27.10.2023 09:34:27 - копия, по данным, хранящимся в чеке

			КонецЕсли;

			сИнфо = сОтветККМ.Получить("info");

		Исключение

			ТекстОшибки = ОписаниеОшибки();

		КонецПопытки;

		Если ТипЗнч(сИнфо) = Тип("Соответствие") Тогда

			URL = ПолучитьЗначениеСоответствия(сИнфо, "qr", URL);
			URL = Лев(URL, СтрНайти(URL, "?MAC:"));
			КодЧекаККМ = ПолучитьЗначениеСоответствия(сИнфо, "doccode", КодЧекаККМ);
			
			task =  ПолучитьЗначениеСоответствия(сИнфо, "task", "");
			ЭтоВозврат	= (task = 2);
			cashier		=  ПолучитьЗначениеСоответствия(сИнфо, "cashier", СокрЛП(ПользователиКлиентСервер.ТекущийПользователь()));	//	LNK 09.03.2024 08:01:44
			
			//printinfo
			printinfo = ПолучитьЗначениеСоответствия(сИнфо, "printinfo", printinfo);
			
			Если ТипЗнч(printinfo) = Тип("Соответствие") Тогда
				
				goods	=  ПолучитьЗначениеСоответствия(printinfo, "goods", goods);
				pays	=  ПолучитьЗначениеСоответствия(printinfo, "pays", pays);
				taxes	=  ПолучитьЗначениеСоответствия(printinfo, "taxes", taxes);

			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.fis_code	= ПолучитьЗначениеСоответствия(printinfo, "fis_code", ""); 
			ОбластьМакета.Параметры.name		= ПолучитьЗначениеСоответствия(printinfo, "name", ""); 
			ОбластьМакета.Параметры.shopad		= ПолучитьЗначениеСоответствия(printinfo, "shopad", ""); 
			ОбластьМакета.Параметры.shopname	= ПолучитьЗначениеСоответствия(printinfo, "shopname", ""); 
			ОбластьМакета.Параметры.vat_code	= ПолучитьЗначениеСоответствия(printinfo, "vat_code", ""); 
			ОбластьМакета.Параметры.fisid		= СтрЗаменить(ПолучитьЗначениеСоответствия(printinfo, "fisid", ""), Символы.НПП, "");
		//	LNK 27.10.2023 11:27:56
			ОбластьМакета.Параметры.copy		= ?(Копия = Истина, "КОПИЯ", "");

			ТабличныйДокумент.Вывести(ОбластьМакета);	//	ПараметрыЗакрытия.Объект.Ответственный

			Если НулевойЧек Тогда

				ОбластьМакета = Макет.ПолучитьОбласть("ПТекст_Центр");
				ОбластьМакета.Параметры.Комментарий = "СЛУЖБОВИЙ ДОКУМЕНТ";

				ТабличныйДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("ПТекст_Центр");
				ОбластьМакета.Параметры.Комментарий = "НУЛЬОВИЙ ЧЕК";
				ТабличныйДокумент.Вывести(ОбластьМакета);

			КонецЕсли;

			ОбластьМакета = Макет.ПолучитьОбласть("О_Текст");
			ОбластьМакета.Параметры.Комментарий = "Касир: " + cashier;
			ТабличныйДокумент.Вывести(ОбластьМакета);

			ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
			ТабличныйДокумент.Вывести(ОбластьМакета);		

			Для каждого СтрокаТоваров ИЗ goods Цикл

				ОбластьМакета = Макет.ПолучитьОбласть("Товар");
				ОбластьМакета.Параметры.cnt = Формат(ПолучитьЗначениеСоответствия(СтрокаТоваров, "cnt", ""),"ЧДЦ=3"); 
				ОбластьМакета.Параметры.price = Формат(ПолучитьЗначениеСоответствия(СтрокаТоваров, "price", ""),"ЧДЦ=2");  			
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				code2 = ПолучитьЗначениеСоответствия(СтрокаТоваров, "code2", "");

				Если ЗначениеЗаполнено(code2) Тогда

					ОбластьМакета = Макет.ПолучитьОбласть("УКТЗЕД");
					ОбластьМакета.Параметры.code2 = СокрЛП(code2);
					ТабличныйДокумент.Вывести(ОбластьМакета);

				КонецЕсли;

				ОбластьМакета = Макет.ПолучитьОбласть("ТоварИмя");

				ОбластьМакета.Параметры.name = ПолучитьЗначениеСоответствия(СтрокаТоваров, "name", ""); 

				ОбластьМакета.Параметры.cost =  Формат(ПолучитьЗначениеСоответствия(СтрокаТоваров, "cost", ""),"ЧДЦ=2");  
				ОбластьМакета.Параметры.taxlit = ПолучитьЗначениеСоответствия(СтрокаТоваров, "taxlit", ""); 
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				disc = ПолучитьЗначениеСоответствия(СтрокаТоваров, "disc", ""); 

				Если ЗначениеЗаполнено(disc) Тогда

					ОбластьМакета = Макет.ПолучитьОбласть("Скидка");
					ОбластьМакета.Параметры.disc = Формат(disc,"ЧДЦ=2"); 
					ОбластьМакета.Параметры.taxlit = ПолучитьЗначениеСоответствия(СтрокаТоваров, "taxlit", ""); 
					
					ТабличныйДокумент.Вывести(ОбластьМакета);

				КонецЕсли;
				
				comment = ПолучитьЗначениеСоответствия(СтрокаТоваров, "comment", "");

				Если ЗначениеЗаполнено(comment) Тогда

					ОбластьМакета = Макет.ПолучитьОбласть("Комментарий");
					ОбластьМакета.Параметры.comment = comment; 
					
					ТабличныйДокумент.Вывести(ОбластьМакета);

				КонецЕсли;

				ОбластьМакета = Макет.ПолучитьОбласть("ПробелУзкий");
				ТабличныйДокумент.Вывести(ОбластьМакета);		

			КонецЦикла;

			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		

			Для каждого СтрокаОплат ИЗ pays Цикл

				ОбластьМакета = Макет.ПолучитьОбласть("Оплата");
				ОбластьМакета.Параметры.sum = Формат(ПолучитьЗначениеСоответствия(СтрокаОплат, "sum", "") ,"ЧДЦ=2") + " грн.";

				ОбластьМакета.Параметры.type = ИмяТипаОплаты(СтрокаОплат); 
				
				ТабличныйДокумент.Вывести(ОбластьМакета);

			КонецЦикла;
			
			sum_topay	= ПолучитьЗначениеСоответствия(printinfo, "sum_topay", "");
			sum_0		= ПолучитьЗначениеСоответствия(printinfo, "sum_0", "");
			sum_disc	= ПолучитьЗначениеСоответствия(printinfo,"sum_disc", "");
			round		= sum_0 - sum_topay - sum_disc;
			
			Если НЕ round = 0 Тогда

				ОбластьМакета = Макет.ПолучитьОбласть("Округления");
				ОбластьМакета.Параметры.round = Формат(round, "ЧДЦ=2");  
				ТабличныйДокумент.Вывести(ОбластьМакета);	

			КонецЕсли;

			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		
			
			ОбластьМакета = Макет.ПолучитьОбласть("Итог");
			ОбластьМакета.Параметры.sum_topay = Формат(sum_0-sum_disc, "ЧДЦ=2; ЧН=0,00") + " грн.";  
			ТабличныйДокумент.Вывести(ОбластьМакета);	

			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		

			Для каждого СтрокаНалогов ИЗ taxes Цикл

				tax_sum = Формат(ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_sum", ""),"ЧДЦ=2");  

				Если ЗначениеЗаполнено(tax_sum) Тогда

					ОбластьМакета = Макет.ПолучитьОбласть("Налог");
					ОбластьМакета.Параметры.tax_percent = Формат(ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_percent", ""),"ЧДЦ=2");  
					ОбластьМакета.Параметры.tax_name = ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_name", ""); 
					ОбластьМакета.Параметры.tax_sum = Формат(ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_sum", ""),"ЧДЦ=2");  

					ТабличныйДокумент.Вывести(ОбластьМакета);

				КонецЕсли;

				ex_sum = ПолучитьЗначениеСоответствия(СтрокаНалогов, "ex_sum", "");

				Если ЗначениеЗаполнено(ex_sum) Тогда

					ОбластьМакета = Макет.ПолучитьОбласть("Акциз");
					ОбластьМакета.Параметры.ex_percent = Формат(ПолучитьЗначениеСоответствия(СтрокаНалогов, "ex_percent", ""),"ЧДЦ=2");  
					ОбластьМакета.Параметры.ex_name = ПолучитьЗначениеСоответствия(СтрокаНалогов, "ex_name", ""); 
					ОбластьМакета.Параметры.ex_sum = Формат(ex_sum, "ЧДЦ=2; ЧН=0,00");  

					ТабличныйДокумент.Вывести(ОбластьМакета);

				КонецЕсли

			КонецЦикла;

			Если НЕ НулевойЧек Тогда

				ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		

				ОбластьМакета = Макет.ПолучитьОбласть("КОплате");

				Если ЭтоВозврат Тогда

						ОбластьМакета.Параметры.ДоОплаты = "До повернення"

				Иначе	ОбластьМакета.Параметры.ДоОплаты = "До сплати"

				КонецЕсли;

				ОбластьМакета.Параметры.sum_topay = Формат(ПолучитьЗначениеСоответствия(printinfo, "sum_topay", ""), "ЧДЦ=2") + " грн."; 
				ТабличныйДокумент.Вывести(ОбластьМакета);	

			КонецЕсли;

			Если НЕ НулевойЧек И ПараметрыЗакрытия.ПечатьПодвала = Истина Тогда	//	LNK 25.03.2022 10:19:48

				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалИнфо|Тело");
				ОбластьМакета.Параметры.ТекстПодвала = Символы.ПС + СокрЛП(ПараметрыЗакрытия.ТекстПодвала);

				ТабличныйДокумент.Вывести(ОбластьМакета);	

				ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		

			КонецЕсли;

			ОбластьМакета = Макет.ПолучитьОбласть("ФНомер");
			ОбластьМакета.Параметры.fn = ПолучитьЗначениеСоответствия(printinfo, "fisn", ""); 
			ОбластьМакета.Параметры.dt = ПолучитьЗначениеСоответствия(printinfo, "dt", ""); 
			ТабличныйДокумент.Вывести(ОбластьМакета);	
			
			Если НЕ НулевойЧек И ЗначениеЗаполнено(URL) Тогда

				РазмерQRВПискселях = 250;
				ДанныеQRКода = ПолучитьQRкод(URL, 0, РазмерQRВПискселях);
				
				Область = Макет.ПолучитьОбласть("Картинка"); 
				Рисунок = Область.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка); 
				
				Рисунок.Верх	=  0; 
				Рисунок.Высота	= 38;//59; 
				Рисунок.Ширина	= 38;//59;         
				Рисунок.Лево	=  2;//8; 
				
				Рисунок.ГраницаСверху	= Ложь;
				Рисунок.ГраницаСнизу	= Ложь;
				Рисунок.ГраницаСлева	= Ложь;
				Рисунок.ГраницаСправа	= Ложь;

				Рисунок.Картинка = Новый Картинка(ДанныеQRКода);
				
				ТабличныйДокумент.АвтоМасштаб = Истина;
				ТабличныйДокумент.ОтображатьСетку = Ложь;
				
				ТабличныйДокумент.Вывести(Область);

			Иначе

				ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		

			КонецЕсли;

			ОбластьМакета = Макет.ПолучитьОбласть("Подвал2");
			//ОбластьМакета.Параметры.isOffline = Формат(ПолучитьЗначениеСоответствия(printinfo, "isOffline", ""),"ЧДЦ=2"); 
			ОбластьМакета.Параметры.Онлайн =  ?(НЕ ПолучитьЗначениеСоответствия(printinfo, "isOffline", ""), "Онлайн", "Офлайн"); 		
			//ОбластьМакета.Параметры.mac = ПолучитьЗначениеСоответствия(printinfo, "mac", ""); 
			ОбластьМакета.Параметры.fisid = СтрЗаменить(ПолучитьЗначениеСоответствия(printinfo, "fisid", ""), Символы.НПП, "");
			ТекстЗаголовка = "ФН " + ОбластьМакета.Параметры.fisid;

			Если ЭтоВозврат Тогда

					ОбластьМакета.Параметры.Чек = "ВИДАТКОВИЙ ЧЕК"

			Иначе	ОбластьМакета.Параметры.Чек = "ФІСКАЛЬНИЙ ЧЕК"

			КонецЕсли;

			ОбластьМакета.Параметры.manuf = ПолучитьЗначениеСоответствия(printinfo, "manuf", ""); 
			ТабличныйДокумент.Вывести(ОбластьМакета);	

		КонецЕсли;

	Иначе 

		Сообщить("Документ не прийнято сервером ПРРО, друк неможливий!");
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;

КонецФункции

//	LNK 12.03.2024 13:48:10
Функция ПолучитьТабличныйДокументСлужебный(ОтветККМ, ТекстЗаголовка)	Экспорт

	Макет = ПолучитьОбщийМакет("ПРРО_ШаблонЧекаDeviceManagerФискальныйРегистратор");

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Вывод = ИспользованиеВывода.Разрешить;
	ТабличныйДокумент.ИмяПараметровПечати = "ПРРО_ПАРАМЕТРЫ_ПЕЧАТИ_СЛУЖ_ДЕНЬГИ_ПРИНТЕР";

	URL			= "";
	КодЧекаККМ	= "";
	printinfo	= Неопределено;

	Если ТипЗнч(ОтветККМ) = Тип("Строка") Тогда

		Попытка

			сИнфо = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.РасшифроватьJSON(ОтветККМ).Получить("info");

			URL = ПолучитьЗначениеСоответствия(сИнфо, "qr", URL);
			URL = Лев(URL, СтрНайти(URL, "?MAC:"));
			КодЧекаККМ = ПолучитьЗначениеСоответствия(сИнфо, "doccode", КодЧекаККМ);
			
		//	task (тип number). Для виконання службового внесення = 3, для винесення = 4
		//	Дорівнює тому ж значенню що прийшло в запиті. Для відкриття зміни завжди 0.
			task =  ПолучитьЗначениеСоответствия(сИнфо, "task", 0);

			Если task = 3 ИЛИ task = 4 Тогда

				printinfo = ПолучитьЗначениеСоответствия(сИнфо, "printinfo", printinfo);
			
				ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
				ОбластьМакета.Параметры.fis_code	= ПолучитьЗначениеСоответствия(printinfo, "fis_code", ""); 
				ОбластьМакета.Параметры.name		= ПолучитьЗначениеСоответствия(printinfo, "name", ""); 
				ОбластьМакета.Параметры.shopad		= ПолучитьЗначениеСоответствия(printinfo, "shopad", ""); 
				ОбластьМакета.Параметры.shopname	= ПолучитьЗначениеСоответствия(printinfo, "shopname", ""); 
				ОбластьМакета.Параметры.vat_code	= ПолучитьЗначениеСоответствия(printinfo, "vat_code", ""); 
				ОбластьМакета.Параметры.fisid		= СтрЗаменить(ПолучитьЗначениеСоответствия(printinfo, "fisid", ""), Символы.НПП, "");
				ТекстЗаголовка = ОбластьМакета.Параметры.fisid;

				ТабличныйДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("ПТекст_Центр");
				ОбластьМакета.Параметры.Комментарий = "СЛУЖБОВЕ " + ?(task = 3, "ВНЕСЕННЯ", "ВИЛУЧЕННЯ");
				ТекстЗаголовка = ОбластьМакета.Параметры.Комментарий + " " + ТекстЗаголовка;

				ТабличныйДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("О_Текст");
				ОбластьМакета.Параметры.Комментарий = "Касир: " + СокрЛП(ПараметрыСеанса.ТекущийПользователь);
				ТабличныйДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
				ТабличныйДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("Оплата");
				ОбластьМакета.Параметры.sum = Формат(ПолучитьЗначениеСоответствия(printinfo, "sum_topay", ""), "ЧДЦ=2") + " грн.";
				ОбластьМакета.Параметры.type = "ГОТІВКОЮ"; 
				
				ТабличныйДокумент.Вывести(ОбластьМакета);

			//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

				ОбластьМакета = Макет.ПолучитьОбласть("ФНомер");
				ОбластьМакета.Параметры.fn = ПолучитьЗначениеСоответствия(printinfo, "fisn", ""); 
				ОбластьМакета.Параметры.dt = ПолучитьЗначениеСоответствия(printinfo, "dt", ""); 
				ТабличныйДокумент.Вывести(ОбластьМакета);	
				
				Если ЗначениеЗаполнено(URL) Тогда

					РазмерQRВПискселях = 250;
					ДанныеQRКода = ПолучитьQRкод(URL, 0, РазмерQRВПискселях);
					
					Область = Макет.ПолучитьОбласть("Картинка"); 
					Рисунок = Область.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка); 
					
					Рисунок.Верх	=  0; 
					Рисунок.Высота	= 38;//59; 
					Рисунок.Ширина	= 38;//59;         
					Рисунок.Лево	=  2;//8; 
					
					Рисунок.ГраницаСверху	= Ложь;
					Рисунок.ГраницаСнизу	= Ложь;
					Рисунок.ГраницаСлева	= Ложь;
					Рисунок.ГраницаСправа	= Ложь;

					Рисунок.Картинка = Новый Картинка(ДанныеQRКода);
					
					ТабличныйДокумент.АвтоМасштаб = Истина;
					ТабличныйДокумент.ОтображатьСетку = Ложь;
					
					ТабличныйДокумент.Вывести(Область);

				Иначе

					ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел"));		

				КонецЕсли;

				ОбластьМакета = Макет.ПолучитьОбласть("Подвал2");
				ОбластьМакета.Параметры.Онлайн	=  ?(НЕ ПолучитьЗначениеСоответствия(printinfo, "isOffline", ""), "Онлайн", "Офлайн"); 		
				ОбластьМакета.Параметры.fisid	= СтрЗаменить(ПолучитьЗначениеСоответствия(printinfo, "fisid", ""), Символы.НПП, "");

				ОбластьМакета.Параметры.manuf = ПолучитьЗначениеСоответствия(printinfo, "manuf", ""); 
				ТабличныйДокумент.Вывести(ОбластьМакета);	

			Иначе

				Сообщить("Ймовірно, касову зміну на ПРРО не відкрито! Друк неможливий.");

			КонецЕсли;

		Исключение

			ТекстОшибки = ОписаниеОшибки();

		КонецПопытки;

	Иначе

		Сообщить("Документ не прийнято сервером ПРРО, друк неможливий!");

	КонецЕсли;

	Возврат ТабличныйДокумент;

КонецФункции

//	LNK 29.12.2023 18:31:23
Функция ПолучитьТабличныйДокументОтчет(НаименованиеОтчета, сИнфо, ОтчетПериодический = Ложь, РасширенныйПериодескийОтчет = Ложь)	Экспорт

	Макет = ПолучитьОбщийМакет("ПРРО_ШаблонЧекаDeviceManagerФискальныйРегистратор");

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Вывод = ИспользованиеВывода.Разрешить;	//	LNK 09.01.2023 06:51:11
	ТабличныйДокумент.ИмяПараметровПечати = "ПРРО_ПАРАМЕТРЫ_ПЕЧАТИ_ОТЧЁТ_ПРИНТЕР";

	printinfo = ПолучитьЗначениеСоответствия(сИнфо, "printheader", Новый Соответствие);
	receipt	  = ПолучитьЗначениеСоответствия(сИнфо, "receipt"	 , Новый Соответствие);	//	LNK 09.01.2023 07:07:00
	taxes	  = ПолучитьЗначениеСоответствия(сИнфо, "taxes"		 , Новый Массив);
	pays	  = ПолучитьЗначениеСоответствия(сИнфо, "pays"		 , Новый Массив);
	money	  = ПолучитьЗначениеСоответствия(сИнфо, "money"		 , Новый Массив);
	summary	  = ПолучитьЗначениеСоответствия(сИнфо, "summary"	 , Новый Соответствие);
	lastcheck = ПолучитьЗначениеСоответствия(сИнфо, "lastcheck"	 , Новый Соответствие);
	reportes  = ПолучитьЗначениеСоответствия(сИнфо, "reports"	 , Новый Массив);
	
	КодОтчета	= ПолучитьЗначениеСоответствия(сИнфо, "doccode", "");
	НомерОтчета	= ПолучитьЗначениеСоответствия(сИнфо, "docno", "");
	ДатаОтчета	= ПолучитьЗначениеСоответствия(сИнфо, "dt", "");

	Область = Макет.ПолучитьОбласть("Заголовок|Тело");
	Область.Параметры.name = НаименованиеОтчета + ?(ПустаяСтрока(НомерОтчета), "", " No." + НомерОтчета);

	Если ОтчетПериодический = Истина Тогда

		Первый	  = reportes[0];
		Последний = reportes[reportes.Количество() - 1];

		Область.Параметры.name = Область.Параметры.name
		+ Символы.ПС + "з  '" + ПолучитьЗначениеСоответствия(Первый   , "docno", "") + "' " + ДатаDM(ПолучитьЗначениеСоответствия(Первый   , "dt", ""))
		+ Символы.ПС + "по '" + ПолучитьЗначениеСоответствия(Последний, "docno", "") + "' " + ДатаDM(ПолучитьЗначениеСоответствия(Последний, "dt", ""));

	Иначе

		Область.Параметры.name = Область.Параметры.name
		+ Символы.ПС + "вiд " + ДатаDM(ДатаОтчета);

	КонецЕсли;

	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Подчеркивание|Тело"));		

	ТабличныйДокумент.Вывести(Область);

	Область = Макет.ПолучитьОбласть("Шапка|Тело");

	Область.Параметры.name		= ПолучитьЗначениеСоответствия(printinfo, "name", "");
	Область.Параметры.fis_code	= ПолучитьЗначениеСоответствия(printinfo, "fis_code", ""); 
	Область.Параметры.shopad	= ПолучитьЗначениеСоответствия(printinfo, "shopad", ""); 
	Область.Параметры.shopname	= ПолучитьЗначениеСоответствия(printinfo, "shopname", ""); 
	Область.Параметры.vat_code	= ПолучитьЗначениеСоответствия(printinfo, "vat_code", ""); 
	Область.Параметры.fisid		= СтрЗаменить(ПолучитьЗначениеСоответствия(printinfo, "fisid", ""), Символы.НПП, ""); 

	ТабличныйДокумент.Вывести(Область);
	
//	LNK 09.01.2023 07:25:09
	Область = Макет.ПолучитьОбласть("ШапкаОтчет|Тело");

	count_p	= ПолучитьЗначениеСоответствия(receipt, "count_p", 0);	//	продажа
	count_m	= ПолучитьЗначениеСоответствия(receipt, "count_m", 0);	//	возврат
	Область.Параметры.count_R	= count_p + count_m;
	Область.Параметры.count_p	= count_p;
	Область.Параметры.count_m	= count_m;

	ТабличныйДокумент.Вывести(Область);

	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

//	П Р О Д А Ж И
//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	Область = Макет.ПолучитьОбласть("О_Текст|Тело");
	Область.Параметры.Комментарий = "ПРОДАЖІ";
	ТабличныйДокумент.Вывести(Область);
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Подчеркивание|Тело"));		

	Область = Макет.ПолучитьОбласть("Оплата|Тело");

	base_sum_итог = 0;
	tax_sum_итог  = 0;

	Для каждого СтрокаНалогов Из taxes Цикл

		base_sum = ПолучитьЗначениеСоответствия(СтрокаНалогов, "base_sum_p", 0);  
		tax_sum	 = ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_sum_p" , 0);

		Если base_sum > 0 Тогда

			Область.Параметры.type = "Cума продажів:";
			Область.Параметры.sum  = Формат(base_sum, "ЧДЦ=2; ЧН=0.00");
			ТабличныйДокумент.Вывести(Область);

			Область.Параметры.type = "Cума податку (" + ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_fname", "") + ")";
			Область.Параметры.sum  = Формат(tax_sum, "ЧДЦ=2; ЧН=0.00");
			ТабличныйДокумент.Вывести(Область);

			base_sum_итог = base_sum_итог + base_sum;
			tax_sum_итог  = tax_sum_итог + tax_sum;

		КонецЕсли;

	КонецЦикла;

	Область.Параметры.type = "Обіг загальний:";
	Область.Параметры.sum  = Формат(base_sum_итог, "ЧДЦ=2; ЧН=0.00");
	ТабличныйДокумент.Вывести(Область);

	Область.Параметры.type = "Податок загальний";
	Область.Параметры.sum  = Формат(tax_sum_итог, "ЧДЦ=2; ЧН=0.00");
	ТабличныйДокумент.Вывести(Область);

	ТаблицаВыручки = Новый ТаблицаЗначений;
	ТаблицаВыручки.Колонки.Добавить("type", Новый ОписаниеТипов("Число"));
	ТаблицаВыручки.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	ТаблицаВыручки.Колонки.Добавить("СуммаПлюс"	, Новый ОписаниеТипов("Число"));
	ТаблицаВыручки.Колонки.Добавить("СуммаМинус", Новый ОписаниеТипов("Число"));

	Если НЕ pays.Количество() = 0 Тогда

		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

		Область = Макет.ПолучитьОбласть("О_Текст|Тело");
		Область.Параметры.Комментарий = "ОТРИМАНО ВІД КЛІЄНТІВ ЗА ФОРМАМИ ОПЛАТИ";
		ТабличныйДокумент.Вывести(Область);

		Область = Макет.ПолучитьОбласть("Оплата|Тело");

		Для каждого СтрокаОперации ИЗ pays Цикл

			sum_pay = ПолучитьЗначениеСоответствия(СтрокаОперации, "sum_p", 0);

			Если sum_pay > 0 Тогда

				Область.Параметры.type = ИмяТипаОплаты(СтрокаОперации);
				Область.Параметры.sum  = Формат(sum_pay, "ЧДЦ=2; ЧН=0.00");
				ТабличныйДокумент.Вывести(Область);

				СтрокаВыручки = ТаблицаВыручки.Добавить();
				СтрокаВыручки.type = ПолучитьЗначениеСоответствия(СтрокаОперации, "type", -1);
				СтрокаВыручки.name = Область.Параметры.type;
				СтрокаВыручки.СуммаПлюс = СтрокаВыручки.СуммаПлюс + sum_pay;

			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;

	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

	Область = Макет.ПолучитьОбласть("Оплата|Тело");
	Область.Параметры.type = "Кількість чеків:";
	Область.Параметры.sum  = Формат(count_p, "ЧДЦ=; ЧН=0");
	ТабличныйДокумент.Вывести(Область);

//	В О З В Р А Т Ы
//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

	Область = Макет.ПолучитьОбласть("О_Текст|Тело");
	Область.Параметры.Комментарий = "ПОВЕРНЕННЯ";
	ТабличныйДокумент.Вывести(Область);
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Подчеркивание|Тело"));		

	Область = Макет.ПолучитьОбласть("Оплата|Тело");

	base_sum_итог = 0;
	tax_sum_итог  = 0;

	Для каждого СтрокаНалогов Из taxes Цикл

		base_sum = ПолучитьЗначениеСоответствия(СтрокаНалогов, "base_sum_m", 0);  
		tax_sum	 = ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_sum_m" , 0);

		Если base_sum > 0 Тогда

			Область.Параметры.type = "Cума видано:";
			Область.Параметры.sum  = Формат(base_sum, "ЧДЦ=2; ЧН=0.00");
			ТабличныйДокумент.Вывести(Область);

			Область.Параметры.type = "Cума податку (" + ПолучитьЗначениеСоответствия(СтрокаНалогов, "tax_fname", "") + ")";
			Область.Параметры.sum  = Формат(tax_sum, "ЧДЦ=2; ЧН=0.00");
			ТабличныйДокумент.Вывести(Область);

			base_sum_итог = base_sum_итог + base_sum;
			tax_sum_итог  = tax_sum_итог + tax_sum;

		КонецЕсли;

	КонецЦикла;

	Область.Параметры.type = "Обіг загальний:";
	Область.Параметры.sum  = Формат(base_sum_итог, "ЧДЦ=2; ЧН=0.00");
	ТабличныйДокумент.Вывести(Область);

	Область.Параметры.type = "Податок загальний";
	Область.Параметры.sum  = Формат(tax_sum_итог, "ЧДЦ=2; ЧН=0.00");
	ТабличныйДокумент.Вывести(Область);

	Если НЕ pays.Количество() = 0 Тогда

		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

		Область = Макет.ПолучитьОбласть("О_Текст|Тело");
		Область.Параметры.Комментарий = "ВИДАНО КЛІЄНТАМ ЗА ФОРМАМИ ОПЛАТИ";
		ТабличныйДокумент.Вывести(Область);

		Область = Макет.ПолучитьОбласть("Оплата|Тело");

		Для каждого СтрокаОперации ИЗ pays Цикл

			sum_pay = ПолучитьЗначениеСоответствия(СтрокаОперации, "sum_m", 0);

			Если sum_pay > 0 Тогда

				Область.Параметры.type = ИмяТипаОплаты(СтрокаОперации);
				Область.Параметры.sum  = Формат(sum_pay, "ЧДЦ=2; ЧН=0.00");
				ТабличныйДокумент.Вывести(Область);

				СтрокаВыручки = ТаблицаВыручки.Найти(ПолучитьЗначениеСоответствия(СтрокаОперации, "type", -1), "type");

				Если СтрокаВыручки = Неопределено Тогда

					СтрокаВыручки = ТаблицаВыручки.Добавить();
					СтрокаВыручки.type = ПолучитьЗначениеСоответствия(СтрокаОперации, "type", -1);
					СтрокаВыручки.name = Область.Параметры.type;

				КонецЕсли;

				СтрокаВыручки.СуммаМинус = СтрокаВыручки.СуммаМинус + sum_pay;

			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;

	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

	Область = Макет.ПолучитьОбласть("Оплата|Тело");
	Область.Параметры.type = "Кількість чеків:";
	Область.Параметры.sum  = Формат(count_m, "ЧДЦ=; ЧН=0");
	ТабличныйДокумент.Вывести(Область);

//	Н А Л И Ч Н Ы Е   Д Е Н Ь Г И   В   К А С С Е
//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

	Область = Макет.ПолучитьОбласть("О_Текст|Тело");
	Область.Параметры.Комментарий = "ГОТІВКОВІ КОШТИ В КАСІ";
	ТабличныйДокумент.Вывести(Область);
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Подчеркивание|Тело"));		

	Область = Макет.ПолучитьОбласть("Оплата|Тело");

	sum_many = ПолучитьЗначениеСоответствия(сИнфо, "safe_start_shift", 0);
	Область.Параметры.type = "Початковий залишок:";
	Область.Параметры.sum  = Формат(sum_many, "ЧДЦ=2; ЧН=0.00");
	ТабличныйДокумент.Вывести(Область);

	Для каждого СтрокаОперации Из money Цикл

		sum_many = ПолучитьЗначениеСоответствия(СтрокаОперации, "sum_p", 0);

		Если sum_many > 0 Тогда

			Область.Параметры.type = "Внесення";
			Область.Параметры.sum  = Формат(sum_many, "ЧДЦ=2; ЧН=0.00");
			ТабличныйДокумент.Вывести(Область);

		КонецЕсли;

		sum_many = ПолучитьЗначениеСоответствия(СтрокаОперации, "sum_m", 0);

		Если sum_many > 0 Тогда

			Область.Параметры.type = "Вилучення";
			Область.Параметры.sum  = Формат(sum_many, "ЧДЦ=2; ЧН=0.00");
			ТабличныйДокумент.Вывести(Область);

		КонецЕсли;

	КонецЦикла;

	sum_many = ПолучитьЗначениеСоответствия(сИнфо, "safe", 0);
	Область.Параметры.type = "Кінцевий залишок:";
	Область.Параметры.sum  = Формат(sum_many, "ЧДЦ=2; ЧН=0.00");
	ТабличныйДокумент.Вывести(Область);

//	В Ы Р У Ч К А
//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	Если НЕ ТаблицаВыручки.Количество() = 0 Тогда

		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

		Область = Макет.ПолучитьОбласть("О_Текст|Тело");
		Область.Параметры.Комментарий = "ВИРУЧКА";
		ТабличныйДокумент.Вывести(Область);
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Подчеркивание|Тело"));		

		Область = Макет.ПолучитьОбласть("Оплата|Тело");

		ТаблицаВыручки.Сортировать("type");

		Для каждого СтрокаВыручки Из ТаблицаВыручки Цикл

			Область.Параметры.type = СтрокаВыручки.name;
			Область.Параметры.sum  = Формат(СтрокаВыручки.СуммаПлюс - СтрокаВыручки.СуммаМинус, "ЧДЦ=2; ЧН=0.00");
			ТабличныйДокумент.Вывести(Область);

		КонецЦикла;

	КонецЕсли;

	Область = Макет.ПолучитьОбласть("Оплата|Тело");
	НомерЧека = ПолучитьЗначениеСоответствия(lastcheck, "fisnum", "");

	Если НЕ ПустаяСтрока(НомерЧека) Тогда

		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Подчеркивание|Тело"));		

		Область.Параметры.type = "НОМЕР ОСТАННЬОГО ЧЕКА";
		Область.Параметры.sum  = НомерЧека;
		ТабличныйДокумент.Вывести(Область);

	КонецЕсли;

	Если ОтчетПериодический = Истина И РасширенныйПериодескийОтчет = Истина Тогда

		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Подчеркивание|Тело"));
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

		Область = Макет.ПолучитьОбласть("О_Текст|Тело");
		Область.Параметры.Комментарий = "РЕЄСТР ЗВІТІВ";
		ТабличныйДокумент.Вывести(Область);
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Подчеркивание|Тело"));		

		Для каждого Отчёт Из reportes Цикл

			Область = Макет.ПолучитьОбласть("О_Текст|Тело");
			Область.Параметры.Комментарий = "No.'" + ПолучитьЗначениеСоответствия(Отчёт, "docno", "") + "' " + ДатаDM(ПолучитьЗначениеСоответствия(Отчёт, "dt", ""));
			ТабличныйДокумент.Вывести(Область);
			Область = Макет.ПолучитьОбласть("Оплата|Тело");
			Область.Параметры.type = "Денний обіг:";
			Область.Параметры.sum  = Формат(ПолучитьЗначениеСоответствия(Отчёт, "docsum", 0), "ЧДЦ=2; ЧН=0.00");
			ТабличныйДокумент.Вывести(Область);

		КонецЦикла;

	КонецЕсли;

	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Подчеркивание|Тело"));		

	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пробел|Тело"));		

	Область = Макет.ПолучитьОбласть("О_Текст|Тело");
	Область.Параметры.Комментарий = ДатаОтчета;
	ТабличныйДокумент.Вывести(Область);

	Если ЗначениеЗаполнено(КодОтчета) Тогда

		Область.Параметры.Комментарий = "No." + НомерОтчета + "; Код: " + КодОтчета;
		ТабличныйДокумент.Вывести(Область);

	КонецЕсли;

	Возврат ТабличныйДокумент;

КонецФункции

Функция ПолучитьЗначениеСоответствия(Соответствие, Ключ, ЗначениеПоУмолчанию = Неопределено) Экспорт

	Если ТипЗнч(Соответствие) = Тип("Соответствие") Тогда	//	LNK 18.03.2024 09:51:48

		Значение = Соответствие.Получить(Ключ);

		Если Значение = Неопределено Тогда

			Возврат ЗначениеПоУмолчанию;

		КонецЕсли;

	Иначе	Возврат ЗначениеПоУмолчанию;

	КонецЕсли;

	Возврат Значение;

КонецФункции

Функция ДатаDM(ДатаСтрока)	//	LNK 31.12.2023 12:17:31

//	"30-06-2023 11:22:32"
	Возврат Лев(СокрЛП(ДатаСтрока), 10);

КонецФункции

Функция РасшифроватьJSON(Знач СтрокаJSON) Экспорт

	СтрокаJSON = СтрЗаменить(СтрокаJSON, Символ(65279), "");

	JR = Новый ЧтениеJSON;
	JR.УстановитьСтроку(СтрокаJSON);

	Возврат ПрочитатьJSON(JR, true);

КонецФункции

Функция ПолучитьУИДЧека(Ссылка) Экспорт

	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда

		Возврат Ссылка.Номер + "-" + Ссылка.УникальныйИдентификатор();

	КонецЕсли;

	Возврат Новый УникальныйИдентификатор;

КонецФункции

//	LNK 19.02.2022 06:07:25
//	Используется при формировании данных для ФР
Функция ПолучитьПараметрТипыОплаты(Идентификатор)	Экспорт

	ПараметрыУстройства = МенеджерОборудованияСервер.ПолучитьПараметрыУстройства(Идентификатор);

	Если НЕ ТипЗнч(ПараметрыУстройства) = Тип("Структура")	Тогда

		ПараметрыУстройства = Новый Структура;

	КонецЕсли;

	Если НЕ ПараметрыУстройства.Свойство("ТаблицаТиповОплат") Тогда

		МассивТипыОплат = Новый Массив;
		МассивТипыОплат.Добавить(ОбщегоНазначенияКлиентСервер.AAD(0, Перечисления.ТипыОплатЧекаККМ.Наличные));
		МассивТипыОплат.Добавить(ОбщегоНазначенияКлиентСервер.AAD(1, Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта));
		МассивТипыОплат.Добавить(ОбщегоНазначенияКлиентСервер.AAD(2, Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта));
		МассивТипыОплат.Добавить(ОбщегоНазначенияКлиентСервер.AAD(3, Перечисления.ТипыОплатЧекаККМ.Предоплата));
		МассивТипыОплат.Добавить(ОбщегоНазначенияКлиентСервер.AAD(4, Перечисления.ТипыОплатЧекаККМ.Послеплата));
		МассивТипыОплат.Добавить(ОбщегоНазначенияКлиентСервер.AAD(5, Перечисления.ТипыОплатЧекаККМ.БанковскийКредит));
		МассивТипыОплат.Добавить(ОбщегоНазначенияКлиентСервер.AAD(6, Перечисления.ТипыОплатЧекаККМ.ПодарочныйСертификат));

		ПараметрыУстройства.Вставить("ТаблицаТиповОплат", МассивТипыОплат);

	КонецЕсли;

	ПараметрТипыОплат = Новый Массив;
//	Порядок элементов имеет значение!

	Для каждого ЭлементМассива Из ПараметрыУстройства.ТаблицаТиповОплат Цикл

		ПараметрТипыОплат.Добавить(Новый Структура(
			"ID, ТипОплаты"
			, ЭлементМассива[0], ЭлементМассива[1]
			)
		);

	КонецЦикла;

	Возврат ПараметрТипыОплат;

КонецФункции

//	LNK 25.03.2022 10:30:43
Функция ОтправитьУведомлениеПокупателю(НомерТелефона, Контрагент, ДанныеПротокола, ВидСообщения, ИмяКомпьютера = "", СообщитьОбОшибке = Ложь)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Попытка

		Подключение = СервисыСервер.Подключение("RetailPack", СервисыСервер.Таймаут("RetailPack.SendSMS.Timeout"));

		ДанныеОтправителя = ОбщегоНазначенияКлиентСервер.СериализоватьJSON(
			Новый Структура(
				"ЭлементСтруктуры, Магазин, ИмяКомпьютера, Контрагент, Пользователь, ДанныеПротокола"
				, ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().ЭлементСтруктуры
				, ПараметрыСеанса.ТекущийМагазин
				, ИмяКомпьютера
				, Контрагент
				, ПараметрыСеанса.ТекущийПользователь
				, ДанныеПротокола	//	специфика РегистрыСведений.ПротоколСообщений
			)
		);

		ТекстСообщения = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей("За посиланням Ваш E-чек:") + Символы.ПС
						+ ДанныеПротокола.URL + Символы.ПС
						+ СтроковыеФункцииКлиентСервер.СтрокаЛатиницей("Гаряча лінія: 0800306063");

		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Подключение.SendSMS(
				  ОбщегоНазначенияКлиентСервер.РеквизитПеречисления(ВидСообщения)
				, ОтправкаSMS.ПодготовитьНомерТелефона(НомерТелефона)
				, ТекстСообщения
				, Ложь
				, ДанныеОтправителя
			)
		);
		РезультатУведомления = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();

		Если РезультатУведомления.Ошибка И СообщитьОбОшибке Тогда

			Сообщить(РезультатУведомления.ОписаниеОшибки);

		КонецЕсли;

	Исключение

		РезультатУведомления = ОтправкаSMS.ОписаниеРезультата();

		РезультатУведомления.Ошибка = Истина;
		РезультатУведомления.ОписаниеОшибки = ОписаниеОшибки();

	КонецПопытки;

	ЖурналСобытий.Регистрация("ПРРО.SMS", ?(РезультатУведомления.Ошибка = Истина, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Примечание)
		, Метаданные.Справочники.Контрагенты
		, Контрагент
		,
		, "Телефон: " + ОтправкаSMS.ПодготовитьНомерТелефона(НомерТелефона)
			+ Символы.ПС + ?(РезультатУведомления.Ошибка = Истина, РезультатУведомления.ОписаниеОшибки, "Повідомлення надіслано")
		,
		, Истина
		, Ложь
	);

	Возврат РезультатУведомления;

КонецФункции

//	LNK 26.02.2024 07:15:57
Функция УстановитьДанныеПротокола(Объект = Неопределено, URL = "", ДанныеPDF = Неопределено, ОтветПРРО = Неопределено)	Экспорт

	ДанныеПротокола = Новый Структура(
		"Объект, URL, ДанныеPDF, ОтветПРРО"
		, Объект
		, URL
		, ДанныеPDF
		, ?(ОтветПРРО = Неопределено, Новый Соответствие, ОтветПРРО)
	);

	Возврат ДанныеПротокола;

КонецФункции

//	LNK 25.12.2022 06:07:01
Функция ПолучитьДанныеЧека(ДокументСсылка)	Экспорт

	ДанныеПротокола = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.УстановитьДанныеПротокола();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаПротокола.Контрагент КАК Контрагент,
	|	ТаблицаПротокола.ВидСообщения КАК ВидСообщения,
	|	ТаблицаПротокола.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ПротоколСообщений КАК ТаблицаПротокола
	|ГДЕ
	|	ТаблицаПротокола.Объект = &ДокументСсылка
	|	И ТаблицаПротокола.ВидСообщения В (ЗНАЧЕНИЕ(Перечисление.ВидыСообщений.SMS), ЗНАЧЕНИЕ(Перечисление.ВидыСообщений.Viber))"
	);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		ПротоколВыборка = РезультатЗапроса.Выбрать();
		ПротоколВыборка.Следующий();

		Буффер = ПротоколВыборка.Значение.Получить();

		Если ТипЗнч(Буффер) = Тип("Структура") Тогда

			ЗаполнитьЗначенияСвойств(ДанныеПротокола, Буффер);

		КонецЕсли;

	КонецЕсли;

	Возврат ДанныеПротокола;

КонецФункции

//	LNK 23.12.2023 07:37:56
Процедура ЗаписьИзображенияОтчетаОтладочная(СтрокаКартинки, ИмяФайла)	Экспорт

	Если ТипЗнч(СтрокаКартинки) = Тип("Строка") Тогда

		Попытка

			ФайлКартинки = Новый Файл("D:\TEMP");

			Если ФайлКартинки.Существует() Тогда

				ФайлКартинки = Новый Файл("D:\TEMP\" + ИмяФайла + ".png");
				Картинка = Новый Картинка(Base64Значение(СтрЗаменить(СтрокаКартинки, "data:image/png;base64,", "")));
				Картинка.Записать(ФайлКартинки.ПолноеИмя);

			КонецЕсли;

		Исключение

			ТекстОшибки = ОписаниеОшибки();

		КонецПопытки;

	КонецЕсли;

КонецПроцедуры

#Область НовыйФорматВчасно	//	LNK 21.12.2023 07:20:06

Функция ПолучитьМакетНаСервере(ИмяМакета) Экспорт
	
	Макет = ПолучитьОбщийМакет(ИмяМакета);
	
	Возврат Макет;
	
КонецФункции

Функция ПолучитьОбластьНаСервере(Макет, ИмяОбласти) Экспорт
	
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	Возврат Область;
	
КонецФункции

Процедура ВывестиОбластьНаСервере(ТабличныйДокумент, Область) Экспорт
	
	ТабличныйДокумент.Вывести(Область);
	
КонецПроцедуры

#КонецОбласти

//	LNK 03.01.2024 05:39:54
Функция НапечататьЧекНаПринтере(ВходныеПараметры)	Экспорт

	Возврат ПолучитьПараметрКассыККМ("ПечатьЧековНаПринтер", ВходныеПараметры, Ложь);

КонецФункции

//	LNK 03.01.2024 09:06:41
Функция РасширенныйПериодескийОтчет(ВходныеПараметры)	Экспорт

	Возврат ПолучитьПараметрКассыККМ("РасширенныйПериодескийОтчет", ВходныеПараметры, Ложь);

КонецФункции

//	LNK 03.01.2024 09:00:20
Функция ПолучитьПараметрКассыККМ(Имя, ВходныеПараметры, ЗначениеПоУмолчанию)

	ТекстОшибки	= "";
	ЗначениеПараметра = ЗначениеПоУмолчанию;

	Попытка	//	LNK 03.01.2024 05:47:09 - Гасим возникшую ошибку!

		Если ВходныеПараметры.Количество() = 3 Тогда

			Если ВходныеПараметры[2].Количество() = 22 Тогда

				Если ТипЗнч(ВходныеПараметры[2][21]) = Тип("Структура") Тогда

					ЗначениеПараметра = (ВходныеПараметры[2][21][Имя] = Истина);

				Иначе	ТекстОшибки = "Тип 'ВходныеПараметры[2][21]' не является структурой!";

				КонецЕсли;

			Иначе	ТекстОшибки = "Размерность (21) 'ВходныеПараметры' не соответствует требуемой!";

			КонецЕсли;

		Иначе	ТекстОшибки = "Размерность (2) 'ВходныеПараметры' не соответствует требуемой!";

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();

	КонецПопытки;

	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда

		ЗаписьЖурналаРегистрации("ПРРО.ПечатьЧековНаПринтер", УровеньЖурналаРегистрации.Ошибка
			,
			,
			, "(ВходныеПараметры[" + Имя + "]): " + ТекстОшибки
			, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
		);

	КонецЕсли;

	Возврат ЗначениеПараметра;

КонецФункции

//	LNK 11.03.2024 15:54:27
Функция ИмяТипаОплаты(СтрокаОплат)	Экспорт

	Индекс	= ПолучитьЗначениеСоответствия(СтрокаОплат, "type", -1);	//	LNK 03.12.2023 07:30:17
	ИмяТипа	= ?(Индекс = 1 ИЛИ Индекс = 2, "ЕПЗ", ПолучитьЗначениеСоответствия(СтрокаОплат, "typen", Неопределено));

	Если ИмяТипа = Неопределено Тогда

		ИмяТипа	= ?(Индекс = 1 ИЛИ Индекс = 2, "ЕПЗ", ПолучитьЗначениеСоответствия(СтрокаОплат, "name", ""));

	КонецЕсли;

	Возврат ИмяТипа;

КонецФункции


Функция ЗаписатьФискальныйНомер(ОтветККМ,ЧекККМОбъект) Экспорт
	СтруктураККМ = ОбменWebRetailСервер.ТекстДЖСОНвСтруктуру(ОтветККМ);
	ФН = "";
	Если СтруктураККМ.Свойство("info") И СтруктураККМ.info.Свойство("doccode") Тогда
		ФН = СтруктураККМ.info.doccode;
		ФР = СтруктураККМ.info.fisid;
	Иначе
		Возврат Новый Структура("Успешно,ОписаниеОшибки",Ложь,"Відповідь фіскального реєстратора не містить фіскального номера чека");
	КонецЕсли;
	
	СтруктураОтвета = Документы.ЧекККМ.ЗаписатьФискальныйНомер(ЧекККМОбъект.Ссылка,ФН,ФР);
	
	Возврат СтруктураОтвета;
КонецФункции
	
Функция ПолучитьФискальныйНомерЧека(ЧекККМ) Экспорт
	СтруктураОтвета = Новый Структура("Успешно,ФискальныйНомер,ФискальныйРегистратор",Ложь,"","");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФискальныеНомераЧеков.ФискальныйНомер КАК ФискальныйНомер,
	               |	ФискальныеНомераЧеков.ФискальныйРегистратор КАК ФискальныйРегистратор,
	               |	ИСТИНА КАК Успешно
	               |ИЗ
	               |	РегистрСведений.ФискальныеНомераЧеков КАК ФискальныеНомераЧеков
	               |ГДЕ
	               |	ФискальныеНомераЧеков.ЧекККМ = &ЧекККМ";
	Запрос.УстановитьПараметр("ЧекККМ",ЧекККМ);
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураОтвета,Рез);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции


Функция ПолучитьФискальныйНомерЧекаПродажиПоУИД(УИД)  Экспорт
	ЧекККМ =  Документы.ЧекККМ.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
	
	Если ЧекККМ.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		Возврат ПолучитьФискальныйНомерЧека(ЧекККМ.ЧекККМПродажа);
	Иначе
		Возврат ПолучитьФискальныйНомерЧека(ЧекККМ);
	КонецЕсли;
КонецФункции

Функция ПолучитьПлатежныеРеквизиты(УИД) Экспорт
	ЧекККМ =  Документы.ЧекККМ.ПолучитьСсылку(Новый УникальныйИдентификатор(Прав(УИД,36)));
	
	Возврат Документы.ЧекККМ.ПолучитьПлатежныеРеквизиты(ЧекККМ);
	
КонецФункции








