////////////////////////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация"
// 
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Разбирает представление контактной информации и возвращает строку XML со значениями полей
//
//  Параметры:
//      Текст        - строка XML
//      ОжидаемыйТип - ссылка на вид КИ или перечисление типа КИ для контроля типов
//
Функция ПарсингКонтактнойИнформацииXML(Текст, ОжидаемыйВид) Экспорт
	Возврат КонтактнаяИнформацияСлужебный.ПарсингКонтактнойИнформацииXML(Текст, ОжидаемыйВид);
КонецФункции    

//  Возвращает представление контактной информации, хранящееся внутри XML.
//
//  Параметры:
//      Текст - XML строка контактной информации
//
Функция ПредставлениеКонтактнойИнформацииXML(Текст) Экспорт
	Возврат КонтактнаяИнформацияСлужебный.ПредставлениеКонтактнойИнформации(Текст);
КонецФункции                                                  

//  Возвращает или устанавливает комментарий для контактной информации
//
//  Параметры:
//      Текст         - XML строка контактной информации. Строка может измениться.
//      НовоеЗначение - необязательный устанавливаемый новый комментарий. Если параметр не указан,
//                      то значение параметра "Текст" не меняется, иначе он принимает значение XML,
//                      соответствующее сериализованной КИ с новым комментарием
//  Возвращаемое значение:
//      Комментарий, хранящийся внутри XML. Возможно обновленный после установки из параметра "НовоеЗначение"
//
Функция КомментарийКонтактнойИнформацииXML(Текст, НовоеЗначение=Неопределено) Экспорт
	Возврат КонтактнаяИнформацияСлужебный.КомментарийКонтактнойИнформации(Текст, НовоеЗначение);
КонецФункции

#Область ПарсингНомераТелефонаИПриведениеЕгоКСтандартномуВиду

//	LNK 21.06.2018 11:05:33
Процедура ПарсерНомераТелефона(СтрокаТаблицы, Колонки, ТаблицаТелефоныНовые = Неопределено)	Экспорт

	Счётчик = 0;
	ОригиналСтроки = ОбщегоНазначенияКлиентСервер.СтрокаТаблицыКакСтруктура(Колонки, СтрокаТаблицы);
	СписокНомеров  = ОбщегоНазначенияКлиентСервер.lx_FillValueList(, СтрокаТаблицы.Представление,, ",;:");

	ЕстьКолонкаОбработан = НЕ Колонки.Найти("Обработан") = Неопределено;

	Для каждого НомерПредставление Из СписокНомеров Цикл

		Счётчик = Счётчик + 1;

		НомерПредставление = СтроковыеФункцииКлиентСервер.ПолучитьЧислоИзСтроки(НомерПредставление, Истина, Истина);

		Если НЕ ПустаяСтрока(НомерПредставление) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерПредставление) Тогда

			Если Лев(НомерПредставление, 3) = "380" Тогда

				НомерПредставление = Сред(НомерПредставление, 4);

			ИначеЕсли Лев(НомерПредставление, 2) = "80" Тогда	//	предположим, что "3" где-то потеряли

				НомерПредставление = Сред(НомерПредставление, 3);

			ИначеЕсли Лев(НомерПредставление, 1) = "0" Тогда

				НомерПредставление = Сред(НомерПредставление, 2);

			ИначеЕсли Лев(НомерПредставление, 1) = "7" И СтрДлина(НомерПредставление) = 7 Тогда	//	это одесский номер без кода!

				НомерПредставление = "48" + НомерПредставление;

			КонецЕсли;

			Если СтрДлина(НомерПредставление) = 10 И Лев(НомерПредставление, 1) = "0" Тогда

				НомерПредставление = Сред(НомерПредставление, 2);

			КонецЕсли;

			Если СтрДлина(НомерПредставление) = 9 Тогда

				Если Счётчик = 1 ИЛИ ?(ЕстьКолонкаОбработан, НЕ СтрокаТаблицы.Обработан, Ложь) ИЛИ ТаблицаТелефоныНовые = Неопределено Тогда

						НаборДанных = СтрокаТаблицы;

				Иначе	НаборДанных = ТаблицаТелефоныНовые.Добавить();
						ЗаполнитьЗначенияСвойств(НаборДанных, ОригиналСтроки);

				КонецЕсли;

			//	Телефон в формате (пробелы убраны): 67 387 45 34
				ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
				XDTOКонтакт = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
				XDTOКонтакт.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));

				XDTOКонтакт.Состав.КодСтраны  = "380";
				XDTOКонтакт.Состав.КодГорода  = Лев(НомерПредставление, 2);
				XDTOКонтакт.Состав.Номер      = Сред(НомерПредставление, 3);
				XDTOКонтакт.Состав.Добавочный = "";

				ЗаполнитьДанныеТелефона(НаборДанных, XDTOКонтакт, СтрокаТаблицы.Представление, ЕстьКолонкаОбработан);

			КонецЕсли;

			Если ТаблицаТелефоныНовые = Неопределено И ?(ЕстьКолонкаОбработан, СтрокаТаблицы.Обработан, Ложь)  Тогда

				Прервать;

			КонецЕсли;

		Иначе

			Отладка = 1;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//	LNK 21.06.2018 11:05:33
Процедура ЗаполнитьДанныеТелефона(НаборДанных, XDTOКонтакт, НомерПредставление, ЕстьКолонкаОбработан)

	XDTOКонтакт.Представление = КонтактнаяИнформацияСлужебный.ПредставлениеТелефона(XDTOКонтакт.Состав);

	ТекстРемарки = "used:" + НомерПредставление;

	Если ТипЗнч(XDTOКонтакт.Комментарий) = Тип("Строка") Тогда

		ПозицияРемарки = Найти(XDTOКонтакт.Комментарий, "used:");

		Если ПозицияРемарки > 0 Тогда
			
			XDTOКонтакт.Комментарий = СокрЛП(Лев(XDTOКонтакт.Комментарий, ПозицияРемарки - 1));
		
		КонецЕсли;

		XDTOКонтакт.Комментарий = СокрЛП(XDTOКонтакт.Комментарий) + " " + ТекстРемарки;

	Иначе

		XDTOКонтакт.Комментарий = ТекстРемарки;

	КонецЕсли;

	НаборДанных.Представление = XDTOКонтакт.Представление;
	НаборДанных.НомерТелефона = XDTOКонтакт.Состав.КодСтраны + XDTOКонтакт.Состав.КодГорода + XDTOКонтакт.Состав.Номер;
	НаборДанных.НомерТелефонаБезКодов = XDTOКонтакт.Состав.Номер;
	НаборДанных.ЗначенияПолей = КонтактнаяИнформацияСлужебный.СериализацияКонтактнойИнформации(XDTOКонтакт);

	Если ЕстьКолонкаОбработан Тогда

		НаборДанных.Обработан = Истина;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

//  Возвращает значение перечисления типа соответствующего переданному виду КИ
//
//  Параметры:
//      ВидИнформации - ссылка на справочник ВидыКонтактнойИнформации 
//
Функция ТипВидаКонтактнойИнформации(ВидИнформации) Экспорт
	Возврат ВидИнформации.Тип;
КонецФункции


Функция ОчиститьДанныеКлиента(КонтрагентСсылка) Экспорт
	Возврат КонтактнаяИнформацияСервер.ОчиститьДанныеКлиента(КонтрагентСсылка);	
КонецФункции
