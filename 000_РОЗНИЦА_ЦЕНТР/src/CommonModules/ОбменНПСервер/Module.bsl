

Процедура ПолучениеПечатныхДокументовДоставки() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектроннаяНакладная.Ссылка КАК Ссылка,
		|	ЭлектроннаяНакладная.ДокументОснование КАК ДокументОснование,
		|	ЭлектроннаяНакладная.Номер КАК Номер,
		|	ЭлектроннаяНакладная.ВнешняяСсылка КАК ВнешняяСсылка
		|ИЗ
		|	РегистрСведений.СтатусыЭН.СрезПоследних КАК СтатусыЭНСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяНакладная КАК ЭлектроннаяНакладная
		|		ПО (СтатусыЭНСрезПоследних.ДокументРегистратор = ЭлектроннаяНакладная.Ссылка)
		|ГДЕ
		|	НЕ ЭлектроннаяНакладная.ВнешняяСсылка = """"
		|	И ЭлектроннаяНакладная.ПутьКФайлуТТН = """"
		|	И ТИПЗНАЧЕНИЯ(ЭлектроннаяНакладная.ДокументОснование) = ТИП(Документ.ЗапросДоступностиТоваров)
		|	И НЕ ЭлектроннаяНакладная.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗапросДоступностиТоваров.ПустаяСсылка)
		|	И не СтатусыЭНСрезПоследних.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Отменена)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураОтветаЭН = СтруктураОтветаПоЭНИнициализация(Выборка.ДокументОснование);
	
		СтруктураОтветаЭН.НомерТТН = СокрЛП(Выборка.Номер);
		СтруктураОтветаЭН.ТТНRef = Выборка.ВнешняяСсылка;
		ФайлыДляНакладной = СохранитьТТНвPDF(СтруктураОтветаЭН);
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
	
		ДокументОбъект.ПутьКФайлуТТН = ФайлыДляНакладной.ПутьКФайлуТТН;
		ДокументОбъект.ПутьКФайлуСтикера = ФайлыДляНакладной.ПутьКФайлуСтикера;
		
		ДокументОбъект.Записать();

	КонецЦикла;

КонецПроцедуры

// Заполнение справочников
Процедура ОбновитьСправочникНП() Экспорт
	
	ЗагрузитьСправочники();

КонецПроцедуры

Процедура ЗаполнитьРусНазваниеУлицНП() Экспорт
	
	ЗагрузитьРусНаименование();
	
КонецПроцедуры

Процедура ЗагрузитьСправочники() 
	
	ТаблицаМетодов = Новый ТаблицаЗначений;
	ТаблицаМетодов.Колонки.Добавить("Метод");
	ТаблицаМетодов.Колонки.Добавить("Файл");
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getAreas";
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCities";		
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getStreet";		
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getWarehouseTypes";
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getWarehouses";
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getMessageCodeText";
	ЗаполнитьСправочникиНП(ТаблицаМетодов);
	
КонецПроцедуры

Процедура ЗагрузитьРусНаименование()
	ТаблицаМетодов = Новый ТаблицаЗначений;
	ТаблицаМетодов.Колонки.Добавить("Метод");
	ТаблицаМетодов.Колонки.Добавить("Файл");
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getsettlement";		
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "searchsettlementstreet";	
	ЗаполнитьСправочникиНП(ТаблицаМетодов);
КонецПроцедуры

Процедура ЗаполнитьСправочникиНП(Знач ТаблицаМетодов, вхМетод = "", ДополнительныеПараметры = Неопределено) Экспорт

	ТочкаВхода = ОбменНПСлужебный.ПолучитьТочкуВхода();

	Ключ = ОбменНПСлужебный.ПолучитьКлючAPI();
	ГородЗагрузки = Справочники.ГородаДоставки.ПустаяСсылка();
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("КлючАПИ",Ключ);
	ПараметрыМетода.Вставить("ДатаОбновления", ТекущаяДатаСеанса());
	
	Если ТаблицаМетодов = Неопределено Тогда
		ТаблицаМетодов = ПолучитьТаблицуМетодов();
	КонецЕсли;
	
	Если вхМетод <> "" Тогда
		ТаблицаМетодов.Очистить();
		НоваяСтрока = ТаблицаМетодов.Добавить();
		НоваяСтрока.Метод = вхМетод;
	КонецЕсли;

	
	Для каждого Строка Из ТаблицаМетодов Цикл
		ПараметрыМетода.Вставить("ИмяМетода",Строка.Метод);
		Если Строка.Метод = "getStreet" Или Строка.Метод = "getWarehouses" Или Строка.Метод = "getTimeIntervals" Тогда
			Если Не ДополнительныеПараметры = Неопределено Тогда
				ГородЗагрузки = ДополнительныеПараметры.ГородЗагрузки;
			КонецЕсли;			
			Города = Справочники.ГородаДоставки.Выбрать();
			Пока Города.Следующий() Цикл
				Если ЗначениеЗаполнено(ГородЗагрузки) И Не Города.Ссылка = ГородЗагрузки Тогда
					Продолжить;
				КонецЕсли;
				ПараметрыМетода.Вставить("CityRef",Города.Идентификатор);
				ПараметрыМетода.Вставить("CityDescription",Города.Наименование);
				Для Стр = 1 По 7 Цикл
					НужноПовторить = Истина;
					Пока НужноПовторить Цикл 
						НужноПовторить = Ложь;
						ПараметрыМетода.Вставить("Page",Стр - 1);
						ТекстЗапроса = ПолучитьТекстЗапроса(Строка.Метод,ПараметрыМетода);
						Если не ЗначениеЗаполнено(ТекстЗапроса) тогда
							Сообщить("Не удалось сформировать запрос по методу: "+Строка.Метод);
							Продолжить;
						КонецЕсли;
						ДокументДом  = ПолучитьОтветДОМ(ТочкаВхода,ТекстЗапроса);
						Если  ДокументДом = Неопределено тогда
							Сообщить("Ошибка при получении ответа, метод: "+ Строка.Метод);
						КонецЕсли;
						Если не  ЭтоУспех(ДокументДом) тогда
							ТекстИсключения = ВернутьЕрор(ДокументДом);
							Сообщить(ТекстИсключения+" "+Строка.Метод);
							ОбщегоНазначенияКлиентСервер.Пауза();
							НужноПовторить = Истина;
							Продолжить;
						КонецЕсли;
						лВыполняемаяобработка = ПолучитьПроцедуруПоМетоду(Строка.Метод);
						Если не ЗначениеЗаполнено(лВыполняемаяобработка) тогда
							Сообщить(ТекстИсключения = "Не назначен обработчик методу: "+ Строка.Метод);
						КонецЕсли;
						Результат = новый Структура();
						РаспарситьОтвет(лВыполняемаяобработка, ДокументДом,Результат, Строка.Метод,ПараметрыМетода);
					Конеццикла;
					Если Строка.Метод <> "getStreet" И Строка.Метод <> "GETSTREET" И Стр >=1 Тогда
						Прервать;
					КонецЕсли;
				Конеццикла;
			Конеццикла;
		ИначеЕсли Строка.Метод = "getCounterparties" тогда
			МассивТипов = Новый Массив;
			//МассивТипов.Добавить("Recipient");
			МассивТипов.Добавить("Sender");
			//МассивТипов.Добавить("ThirdPerson");
			запрос=
			"<file>
			|<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
			|<modelName>Counterparty</modelName>
			|<calledMethod>"+Строка.Метод+"</calledMethod>
			|<methodProperties>
			|<CounterpartyProperty>{Counter}</CounterpartyProperty>
			|</methodProperties>
			|</file>";
			Для Каждого Элемент из МассивТипов Цикл
				запрос = СтрЗаменить(запрос,"{Counter}",Элемент);
				НомерПоследней = ПолучитьНомерПоследней(запрос,100);
				Для НомСтр = 1 По НомерПоследней Цикл
					ПараметрыМетода.Вставить("Тип",Элемент);
					ПараметрыМетода.Вставить("Страница",НомСтр);
					ТекстЗапроса = ПолучитьТекстЗапроса(Строка.Метод,ПараметрыМетода);
					НужноПовторить = Истина;
					Пока НужноПовторить Цикл
						НужноПовторить = Ложь;
						Если не ЗначениеЗаполнено(ТекстЗапроса) тогда
							Сообщить("Не удалось сформировать запрос по методу: "+Строка.Метод);
							Продолжить;
						КонецЕсли;
						ДокументДом  = ПолучитьОтветДОМ(ТочкаВхода,ТекстЗапроса);
						Если  ДокументДом = Неопределено тогда
							Сообщить("Ошибка при получении ответа, метод: "+ Строка.Метод);
						КонецЕсли;
						Если не  ЭтоУспех(ДокументДом) тогда
							ТекстИсключения = ВернутьЕрор(ДокументДом);
							Сообщить(ТекстИсключения+" "+Строка.Метод);
							ОбщегоНазначенияКлиентСервер.Пауза();
							НужноПовторить = Истина;
							Продолжить;
						КонецЕсли;
						лВыполняемаяобработка = ПолучитьПроцедуруПоМетоду(Строка.Метод);
						Если не ЗначениеЗаполнено(лВыполняемаяобработка) тогда
							Сообщить(ТекстИсключения = "Не назначен обработчик методу: "+ Строка.Метод);
						КонецЕсли;
						Результат = новый Структура();
						РаспарситьОтвет(лВыполняемаяобработка, ДокументДом,Результат, Строка.Метод,ПараметрыМетода);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли Строка.Метод = "getCounterpartyAddresses" Или Строка.Метод = "getCounterpartyContactPersons" или Строка.Метод = "getCounterpartyOptions" Тогда
			тмпзапрос=
			"<file>
			|<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
			|<modelName>Counterparty</modelName>
			|<calledMethod>"+Строка.Метод+"</calledMethod>
			|<methodProperties>
			|<Ref>{Ref}</Ref>
			|</methodProperties>
			|</file>";
			Если Строка.Метод = "getCounterpartyAddresses" Тогда
				квостр = 500;
			Иначе
				квостр = 100;
			КонецЕсли;
			Выборка = Справочники.КонтрагентыСлужбыДоставки.Выбрать();
			Пока Выборка.Следующий() Цикл
				ПараметрыМетода.Вставить("Тип","Sender");
				ПараметрыМетода.Вставить("Контрагент",Выборка.Идентификатор);
				запрос = СтрЗаменить(тмпзапрос,"{Ref}",Выборка.Идентификатор);
				НомерПоследней = ПолучитьНомерПоследней(запрос,квостр);
				Для НомСтр = 1 По НомерПоследней Цикл
					ПараметрыМетода.Вставить("Страница",НомСтр);
					ТекстЗапроса = ПолучитьТекстЗапроса(Строка.Метод,ПараметрыМетода);
					НужноПовторить = Истина;
					Пока НужноПовторить Цикл
						НужноПовторить = Ложь;
						Если не ЗначениеЗаполнено(ТекстЗапроса) тогда
							Сообщить("Не удалось сформировать запрос по методу: "+Строка.Метод);
							Продолжить;
						КонецЕсли;
						ДокументДом  = ПолучитьОтветДОМ(ТочкаВхода,ТекстЗапроса);
						Если  ДокументДом = Неопределено тогда
							Сообщить("Ошибка при получении ответа, метод: "+ Строка.Метод);
						КонецЕсли;
						Если не  ЭтоУспех(ДокументДом) тогда
							ТекстИсключения = ВернутьЕрор(ДокументДом);
							Сообщить(ТекстИсключения+" "+Строка.Метод);
							ОбщегоНазначенияКлиентСервер.Пауза();
							НужноПовторить = Истина;
							Продолжить;
						КонецЕсли;
						лВыполняемаяобработка = ПолучитьПроцедуруПоМетоду(Строка.Метод);
						Если не ЗначениеЗаполнено(лВыполняемаяобработка) тогда
							Сообщить(ТекстИсключения = "Не назначен обработчик методу: "+ Строка.Метод);
						КонецЕсли;
						Результат = новый Структура();
						РаспарситьОтвет(лВыполняемаяобработка, ДокументДом,Результат, Строка.Метод,ПараметрыМетода);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли Строка.Метод = "searchsettlementstreet" тогда
			Города = Справочники.ГородаДоставки.Выбрать();			
			Пока Города.Следующий() Цикл
	
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	Улицы.Наименование КАК Наименование,
					|	Улицы.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.Улицы КАК Улицы
					|ГДЕ
					|	Улицы.Город = &Город";
				
				Запрос.УстановитьПараметр("Город", Города.Ссылка);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Улицы = РезультатЗапроса.Выбрать();
				
				Пока Улицы.Следующий() Цикл
				ПараметрыМетода.Вставить("SettlementRef",Города.ИдентификаторSettlement);
				ПараметрыМетода.Вставить("StreetName",Улицы.Наименование);				
				ТекстЗапроса = ПолучитьТекстЗапроса(Строка.Метод,ПараметрыМетода);
				Если не ЗначениеЗаполнено(ТекстЗапроса) тогда
					//Сообщить("Не удалось сформировать запрос по методу: "+Строка.Метод);
					Продолжить;
				КонецЕсли;
				Ответ = ПолучитьОтвет(ТочкаВхода,ТекстЗапроса);
				Обработать_SEARCSETTLEMENTSTREET(Улицы.Ссылка,Ответ);
				Конеццикла;
			Конеццикла;
		Иначе
			ТекстЗапроса = ПолучитьТекстЗапроса(Строка.Метод,ПараметрыМетода);
			Если не ЗначениеЗаполнено(ТекстЗапроса) тогда
				//Сообщить("Не удалось сформировать запрос по методу: "+Строка.Метод);
				Продолжить;
			КонецЕсли;
			НужноПовторить = Истина;
			Пока НужноПовторить Цикл
				НужноПовторить = Ложь;
				ДокументДом  = ПолучитьОтветДОМ(ТочкаВхода,ТекстЗапроса);
				Если  ДокументДом = Неопределено тогда
					//Сообщить("Ошибка при получении ответа, метод: "+ Строка.Метод);
				КонецЕсли;
				Если не  ЭтоУспех(ДокументДом) тогда
					ТекстИсключения = ВернутьЕрор(ДокументДом);
					Сообщить(ТекстИсключения+" "+Строка.Метод);
					ОбщегоНазначенияКлиентСервер.Пауза();
					НужноПовторить = Истина;
					Продолжить;
				КонецЕсли;
			КонецЦикла;
			лВыполняемаяобработка = ПолучитьПроцедуруПоМетоду(Строка.Метод);
			Если не ЗначениеЗаполнено(лВыполняемаяобработка) тогда
				//Сообщить(ТекстИсключения = "Не назначен обработчик методу: "+ Строка.Метод);
			КонецЕсли;
			Результат = новый Структура();
			РаспарситьОтвет(лВыполняемаяобработка, ДокументДом,Результат, Строка.Метод,ПараметрыМетода);
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуМетодов()
	ТаблицаМетодов = Новый ТаблицаЗначений;
	ТаблицаМетодов.Колонки.Добавить("Метод");
	ТаблицаМетодов.Колонки.Добавить("Файл");
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getAreas";
	Строка.Файл = "\Areas.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCities";
	Строка.Файл = "\Cities.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getStreet";
	Строка.Файл = "\Streets.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getWarehouseTypes";
	Строка.Файл = "\whtypes.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getWarehouses";
	Строка.Файл = "\whouse.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCounterparties";
	Строка.Файл = "\counter1.dbf";
	Строка.Метод = "getCounterparties";
	Строка.Файл = "\counter2.dbf";
	Строка.Метод = "getCounterparties";
	Строка.Файл = "\counter3.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getOwnershipFormsList";
	Строка.Файл = "\ownform.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getTypesOfPayers";
	Строка.Файл = "\payertyp.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getTypesOfCounterparties";
	Строка.Файл = "\counttyp.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCargoTypes";
	Строка.Файл = "\cargotyp.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getServiceTypes";
	Строка.Файл = "\servtype.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getBackwardDeliveryCargoTypes";
	Строка.Файл = "\bdelct.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCargoDescriptionList";
	Строка.Файл = "\cargodes.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getTypesOfPayersForRedelivery";
	Строка.Файл = "\redevpt.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCounterpartyAddresses";
	Строка.Файл = "\countadr.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCounterpartyContactPersons";
	Строка.Файл = "\countcp.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCounterpartyOptions";
	Строка.Файл = "\countopt.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getPaymentForms";
	Строка.Файл = "\payforms.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getPalletsList";
	Строка.Файл = "\pallets.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getTimeIntervals";
	Строка.Файл = "\timeint.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getTraysList";
	Строка.Файл = "\trays.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getTiresWheelsList";
	Строка.Файл = "\tires.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getMessageCodeText";
	Строка.Файл = "\Errors.dbf";
	
	Возврат ТаблицаМетодов;
КонецФункции

Функция ПолучитьТекстЗапроса(знач ИмяМетода, ПараметрыМетода = неопределено)
	
	Текст = "";
	ИмяМетодаВрег = ВРег(СокрЛП(ИмяМетода));
	//////////////////
	//Address
	Если ИмяМетодаВрег = "GETCITIES" тогда
		Текст = ПолучитьЗапрос_getCities(ПараметрыМетода);
	ИначеЕсли ИмяМетодаВрег = "GETSTREET" тогда
		Текст = ПолучитьЗапрос_getStreet(ПараметрыМетода);
	ИначеЕсли ИмяМетода = "searchsettlementsstreet" тогда
		Текст = ПолучитьЗапрос_searchsettlementsstreet(ПараметрыМетода);		
	ИначеЕсли ИмяМетодаВрег = "GETWAREHOUSES" тогда
		Текст = ПолучитьЗапрос_getWarehouses(ПараметрыМетода);		
	ИначеЕсли ИмяМетодаВрег = "GETWAREHOUSETYPES" тогда
		Текст = ПолучитьЗапрос_getWarehouseTypes(ПараметрыМетода);
	ИначеЕсли ИмяМетодаВрег = "GETCOUNTERPARTIES" тогда
		Текст = ПолучитьЗапрос_getCounterparties(ПараметрыМетода);
	ИначеЕсли ИмяМетодаВрег = "GETCOUNTERPARTYADDRESSES" тогда
		Текст = ПолучитьЗапрос_getCounterpartyAddresses(ПараметрыМетода);
	ИначеЕсли ИмяМетодаВрег = "GETCOUNTERPARTYCONTACTPERSONS" тогда
		Текст = ПолучитьЗапрос_getCounterpartyContactPersons(ПараметрыМетода);
	ИначеЕсли ИмяМетодаВрег = "GETTYPESOFPAYERS" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);		
	ИначеЕсли ИмяМетодаВрег = "GETPAYMENTFORMS" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);		
	ИначеЕсли ИмяМетодаВрег = "GETCARGOTYPES" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);		
	ИначеЕсли ИмяМетодаВрег = "GETSERVICETYPES" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);
	ИначеЕсли ИмяМетодаВрег = "GETCARGODESCRIPTIONLIST" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);//getCargoDescriptionList
	ИначеЕсли ИмяМетодаВрег = "GETAREAS" тогда
		Текст = ПолучитьЗапрос_getArea(ПараметрыМетода);
	ИначеЕсли ИмяМетодаВрег = "GETOWNERSHIPFORMSLIST" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);//getOwnershipFormsList
	ИначеЕсли ИмяМетодаВрег = "GETBACKWARDDELIVERYCARGOTYPES" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);//getBackwardDeliveryCargoTypes
	ИначеЕсли ИмяМетодаВрег = "GETPALLETSLIST" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);//getPalletsList
	ИначеЕсли ИмяМетодаВрег = "GETTYPESOFCOUNTERPARTIES" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);//getTypesOfCounterparties
	ИначеЕсли ИмяМетодаВрег = "GETTYPESOFPAYERSFORREDELIVERY" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);
	ИначеЕсли ИмяМетодаВрег = "GETTIMEINTERVALS" тогда
		Текст = ПолучитьЗапрос_getTimeIntervals(ТекущаяДата(),ПараметрыМетода);
	ИначеЕсли ИмяМетодаВрег = "GETTIRESWHEELSLIST" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);
	ИначеЕсли ИмяМетодаВрег = "GETTRAYSLIST" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода); //getTraysList
	ИначеЕсли ИмяМетодаВрег = "GETDOCUMENTSTATUSES" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);
	ИначеЕсли ИмяМетодаВрег = "GETMESSAGECODETEXT" тогда
		Текст = ПолучитьЗапрос_getMessageCodeText(ПараметрыМетода);
	КонецЕсли;	
	
	Возврат Текст;
	
КонецФункции

Функция ПолучитьЗапрос_getArea(ПараметрыМетода)
	
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|<calledMethod>getAreas</calledMethod>
	|<methodProperties />
	|<modelName>Address</modelName>
	|</file>";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьЗапрос_getCities(ПараметрыМетода)
	
	ТекстЗапроса = 
	//"
	//|
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|<calledMethod>getCities</calledMethod>
	|<methodProperties/>
	|<modelName>Address</modelName>
	|</file>
	|";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьЗапрос_getStreet(ПараметрыМетода)
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|	<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|	<calledMethod>getStreet</calledMethod>
	|	<methodProperties>
	|		<CityRef>"+ПараметрыМетода.CityRef+"</CityRef>
	|		<Page>"+ПараметрыМетода.Page+"</Page>
	|	</methodProperties>
	|	<modelName>Address</modelName>
	|</file>";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьЗапрос_searchsettlementsstreet(ПараметрыМетода)
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|	<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|	<calledMethod>searchsettlementsstreet</calledMethod>
	|	<methodProperties>
	|		<settlementsstreetRef>"+ПараметрыМетода.settlementsstreetRef+"</settlementsstreetRef>
//	|		<Page>"+ПараметрыМетода.Page+"</Page>
	|	</methodProperties>
	|	<modelName>Address</modelName>
	|</file>";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьЗапрос_getWarehouses(ПараметрыМетода)
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|	<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|	<calledMethod>getWarehouses</calledMethod>
	|	<methodProperties>
	|		<CityRef>"+ПараметрыМетода.CityRef+"</CityRef>
	|	</methodProperties>
	|	<modelName>Address</modelName>
	|</file>";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьЗапрос_getWarehouseTypes(ПараметрыМетода)
	
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|	<modelName>Address</modelName>
	|	<calledMethod>getWarehouseTypes</calledMethod>
	|	<methodProperties/>
	|	<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|</file>";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьЗапрос_getCounterpartyAddresses(ПараметрыМетода)
	
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|	<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|	<calledMethod>getCounterpartyAddresses</calledMethod>
	|	<methodProperties>
	|	<CounterpartyProperty>"+ПараметрыМетода.Тип+"</CounterpartyProperty> 
	|	<Ref>"+ПараметрыМетода.Контрагент+"</Ref>
	|	<Page>"+ПараметрыМетода.Страница+"</Page>
	|	</methodProperties>
	|	<modelName>Counterparty</modelName>
	|</file>";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьЗапрос_getCounterpartyContactPersons(ПараметрыМетода)
	
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|	<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|	<calledMethod>getCounterpartyContactPersons</calledMethod>
	|	<methodProperties>
	|	<Ref>"+ПараметрыМетода.Контрагент+"</Ref>
	|	<Page>"+ПараметрыМетода.Страница+"</Page>
	|	</methodProperties>
	|	<modelName>Counterparty</modelName>
	|</file>";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьЗапрос_getCounterparties(ПараметрыМетода)
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|	<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|	<calledMethod>getCounterparties</calledMethod>
	|	<methodProperties>
	|	<CounterpartyProperty>"+ПараметрыМетода.Тип+"</CounterpartyProperty>
	|	<Page>"+ПараметрыМетода.Страница+"</Page>
	|	</methodProperties>
	|	<modelName>Counterparty</modelName>
	|</file>";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьЗапрос_Common(ПараметрыМетода)
	
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|<calledMethod>"+ПараметрыМетода.ИмяМетода+"</calledMethod>
	|<methodProperties/>
	|<modelName>Common</modelName>
	|</file>";
	
	Возврат ТекстЗапроса;
КонецФункции

Процедура РаспарситьОтвет(лВыполняемаяобработка,ДокументДом, Результат, Владелец = неопределено,Параметры = Неопределено)
	Если Не лВыполняемаяобработка = "Обработать_getMessageCodeText" Тогда
		Узел = ДокументДом.ПолучитьЭлементыПоИмени("Item");
	Иначе
		Узел = ДокументДом.ПолучитьЭлементыПоИмени("data");
	конецЕсли;
	КоличествоЭлементов = Узел.Количество();
	Если КоличествоЭлементов > 0 тогда
		Item = Узел.Элемент(0);
		
		Пока не Item = неопределено цикл
			Элемент_Item = Item.ПервыйДочерний;
			
			ВыполнитьОбработчик(Владелец, лВыполняемаяобработка,Элемент_Item, Результат,Параметры);
			Item = Item.СледующийСоседний;
		КонецЦикла;
		
	КонецЕсли;	
	//здесь пишем дбф?	
КонецПроцедуры

Функция ПолучитьПроцедуруПоМетоду(ИмяМетода)
	Текст = "";
	ИмяМетода = ВРег(СокрЛП(ИмяМетода));
	
	Если ИмяМетода = "GETCITIES" тогда
		Текст = "Обработать_getCities";
	ИначеЕсли ИмяМетода = "GETSETTLEMENT" тогда
		Текст = "Обработать_GETSETTLEMENT";		
	ИначеЕсли ИмяМетода = "SEARCHSETTLEMENTSTREET" тогда
		Текст = "Обработать_SEARCSETTLEMENTSTREET";
	ИначеЕсли ИмяМетода = "GETSTREET" тогда
		Текст = "Обработать_getStreet";
	ИначеЕсли ИмяМетода = "GETWAREHOUSES" тогда
		Текст = "Обработать_getWarehouses";		
	ИначеЕсли ИмяМетода = "GETWAREHOUSETYPES" тогда
		Текст = "Обработать_getWarehouseTypes";
	ИначеЕсли ИмяМетода = "GETCOUNTERPARTIES" тогда
		Текст = "Обработать_getCounterparties";
	ИначеЕсли ИмяМетода = "GETCOUNTERPARTYADDRESSES" тогда
		Текст = "Обработать_getCounterpartyAddresses";
	ИначеЕсли ИмяМетода = "GETCOUNTERPARTYCONTACTPERSONS" тогда
		Текст = "Обработать_getCounterpartyContactPersons";
	ИначеЕсли ИмяМетода = "GETTYPESOFPAYERS" тогда
		Текст = "Обработать_Common";		
	ИначеЕсли ИмяМетода = "GETPAYMENTFORMS" тогда
		Текст = "Обработать_Common";		
	ИначеЕсли ИмяМетода = "GETCARGOTYPES" тогда
		Текст = "Обработать_Common";		
	ИначеЕсли ИмяМетода = "GETSERVICETYPES" тогда
		Текст = "Обработать_Common";
	ИначеЕсли ИмяМетода = "GETCARGODESCRIPTIONLIST" тогда
		Текст = "Обработать_Common";//getCargoDescriptionList
	ИначеЕсли ИмяМетода = "GETAREAS" тогда
		Текст = "Обработать_getArea";
	ИначеЕсли ИмяМетода = "GETOWNERSHIPFORMSLIST" тогда
		Текст = "Обработать_Common";//getOwnershipFormsList
	ИначеЕсли ИмяМетода = "GETBACKWARDDELIVERYCARGOTYPES" тогда
		Текст = "Обработать_Common";//getBackwardDeliveryCargoTypes
	ИначеЕсли ИмяМетода = "GETPALLETSLIST" тогда
		Текст = "Обработать_Common";//getPalletsList
	ИначеЕсли ИмяМетода = "GETTYPESOFCOUNTERPARTIES" тогда
		Текст = "Обработать_Common";//getTypesOfCounterparties
	ИначеЕсли ИмяМетода = "GETTYPESOFPAYERSFORREDELIVERY" тогда
		Текст = "Обработать_Common";
	ИначеЕсли ИмяМетода = "GETTIMEINTERVALS" тогда
		Текст = "Обработать_getTimeIntervals";
	ИначеЕсли ИмяМетода = "GETTIRESWHEELSLIST" тогда
		Текст = "Обработать_Common";
	ИначеЕсли ИмяМетода = "GETTRAYSLIST" тогда
		Текст = "Обработать_Common"; //getTraysList
	ИначеЕсли ИмяМетода = "GETDOCUMENTSTATUSES" тогда
		Текст = "Обработать_getDocumentStatuses";
	ИначеЕсли ИмяМетода = "GETCOUNTERPARTYOPTIONS" тогда
		Текст = "Обработать_getCounterpartyOptions";			
	ИначеЕсли ИмяМетода = "SAVECOUNTERPARTY" тогда
		Текст = "Обработать_SaveCounterparty";		
	ИначеЕсли ИмяМетода = "SAVECONTACTPERSON" тогда
		Текст = "Обработать_SaveContactPerson";	
	ИначеЕсли ИмяМетода = "SAVEINTERNETDOCUMENT" тогда
		Текст = "Обработать_SaveInternetDocument";	
	ИначеЕсли ИмяМетода = "INSERTDOCUMENTSSCANSHEET" тогда
		Текст = "Обработать_insertDocumentsScanSheet";
	ИначеЕсли ИмяМетода = "REMOVEDOCUMENTS" тогда
		Текст = "Обработать_removeDocuments";
	ИначеЕсли ИмяМетода = "DELETESCANSHEET" тогда
		Текст = "Обработать_deleteScanSheet";
	ИначеЕсли ИмяМетода = "DELETEDOC" тогда
		Текст = "Обработать_deleteDoc";
	ИначеЕсли ИмяМетода = "GETSTATUSDOCUMENTS" тогда
		Текст = "Обработать_getStatusDocuments";
	ИначеЕсли ИмяМетода = "GETMESSAGECODETEXT" тогда
		Текст = "Обработать_getMessageCodeText";
	КонецЕсли;	
	
	Возврат Текст
КонецФункции	

Функция ПолучитьНомерПоследней(запрос,квостр)
	НомерПоследней = 1;
	Всего = 1;
	Ответ=GetXMLResponserNewPost(запрос);
	ОтветФорма=Ответ;
	Чтение=новый ЧтениеXML;
	Чтение.УстановитьСтроку(Ответ);	
	Пока Чтение.Прочитать() Цикл
		Если чтение.Имя="totalCount" and чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента тогда
			чтение.Прочитать();
			Всего=Число(чтение.Значение);			
		КонецЕсли;
	КонецЦикла;;
	НомерПоследней = ?(Всего/квостр - Цел(Всего/квостр) = 0,Цел(Всего/квостр),Цел(Всего/квостр)+1);
	Возврат НомерПоследней;
КонецФункции

Функция ПолучитьЗапрос_getTimeIntervals(Дата,ПараметрыМетода)
	
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|	<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|	<calledMethod>getTimeIntervals</calledMethod>
	|	<methodProperties>
	|	<DateTime>"+Формат(Дата,"ДФ=dd.MM.yyyy")+"</DateTime>
	|	<RecipientCityRef>" + ПараметрыМетода.CityRef + "</RecipientCityRef>
	|	</methodProperties>
	|	<modelName>Common</modelName>
	|</file>";
	
	
	Возврат ТекстЗапроса;
КонецФункции

Функция Обработать_SEARCSETTLEMENTSTREET(Улица,Наименование)

			Если ЗначениеЗаполнено(Улица) И ЗначениеЗаполнено(Наименование) тогда
				СпрУлица = Улица.ПолучитьОбъект();
				//СпрУлица.НаименованиеRU =  Строка.НаименованиеRU;
				СпрУлица.НаименованиеRU =  Наименование;
				СпрУлица.Записать();
			КонецЕсли;
КонецФункции

Функция ПолучитьЗапрос_getMessageCodeText(ПараметрыМетода)
	
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|<calledMethod>getMessageCodeText</calledMethod>
	|<methodProperties/>
	|<modelName>CommonGeneral</modelName>
	|</file>";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ВернутьЕрор(ДокументДом) 
	ТекстОшибки  = "";
	
	Узел =  ДокументДом.ПолучитьЭлементыПоИмени("errors");
	Если Узел.количество() = 0 Тогда
		Возврат "";
	КонецЕсли;	
	
	Узел = Узел[0].первыйДочерний;
	Пока не Узел = Неопределено цикл
		ТекстОшибки = ТекстОшибки + Символы.ПС + Узел.ТекстовоеСодержимое ;
		Узел = Узел.СледующийСоседний;
	КонецЦикла;	 
	
	Возврат ТекстОшибки;	
КонецФункции

Функция ЭтоУспех(ДокументДом)
	success =  ДокументДом.ПолучитьЭлементыПоИмени("success");// = "true"
	
	Возврат success[0].ТекстовоеСодержимое = "true";
КонецФункции

Функция ПолучитьОтветДОМ(Адрес,ТекстXML, ответ = "")
	Попытка 
		Попытка
			ХМЛХТТП = ПолучитьCOMОбъект("", "MSXML2.ServerXMLHTTP.6.0");
		Исключение
			ХМЛХТТП = ПолучитьCOMОбъект("", "Microsoft.XMLHTTP");
		КонецПопытки;
		
		ХМЛХТТП.Open("POST", Адрес, Ложь);
		ХМЛХТТП.SetRequestHeader("Content-Type", "text/xml");
		ХМЛХТТП.Send(ТекстXML);
		//	Сообщить(ХМЛХТТП.ResponseText);
		XMLДокумент = Новый ЧтениеXML;
		XMLДокумент.УстановитьСтроку(ХМЛХТТП.ResponseText);
		Ответ = ХМЛХТТП.ResponseText;
		ПостроительДом = Новый ПостроительDOM;
		ДокументДом = ПостроительДом.Прочитать(XMLДокумент);
		XMLДокумент.Закрыть();	
		
		Возврат ДокументДом;
	Исключение 
		//Сообщить(ОписаниеОшибки());
		Ответтекст = GetXMLResponserNewPost(ТекстXML);
		XMLДокумент = Новый ЧтениеXML;
		XMLДокумент.УстановитьСтроку(Ответтекст);
		ПостроительДом = Новый ПостроительDOM;
		ДокументДом = ПостроительДом.Прочитать(XMLДокумент);
		XMLДокумент.Закрыть();	
		Возврат ДокументДом;
		
		//Возврат Неопределено
	КонецПопытки;
КонецФункции

Функция Обработать_Common(ЭлементДом,Результат, Владелец, Параметры)
	тзВидыОбратнойДоставки = Новый ТаблицаЗначений;
	тзСпособыОплаты = Новый ТаблицаЗначений;
	тзТипыКонтрагентов = Новый ТаблицаЗначений;
	тзОписанияГруза = Новый ТаблицаЗначений;
	тзФормыСобственности = Новый ТаблицаЗначений;
	тзВидыПаллет = Новый ТаблицаЗначений;
	тзТипыПлательщиковОбратнойДоставки = Новый ТаблицаЗначений;
	тзПоддоны = Новый ТаблицаЗначений;
	тзТипыПлательщиков = Новый ТаблицаЗначений;
	тзВидыГруза = Новый ТаблицаЗначений;
	//тзВидыОбратнойДоставки = Новый ТаблицаЗначений;
	//тзВидыОбратнойДоставки = Новый ТаблицаЗначений;
	//тзВидыОбратнойДоставки = Новый ТаблицаЗначений;
	
	СтруктураПараметров = Новый структура;
	
	Пока не ЭлементДом = неопределено цикл
		Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла)  тогда
			СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);
		Иначе
			Текст = "Ошибка Common";
			ВызватьИсключение Текст;
		КонецЕсли;	 
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	Если Параметры.ИмяМетода = "getTypesOfCounterparties" Тогда
		Строка = тзТипыКонтрагентов.Добавить();
	ИначеЕсли Параметры.ИмяМетода = "getTypesOfPayers" Тогда
		Строка = тзТипыПлательщиков.Добавить();
	ИначеЕсли Параметры.ИмяМетода = "getPaymentForms" Тогда
		Строка = тзСпособыОплаты.Добавить();
	ИначеЕсли Параметры.ИмяМетода = "getCargoTypes" Тогда
		Строка = тзВидыГруза.Добавить();	
	//ИначеЕсли Параметры.ИмяМетода = "getServiceTypes" Тогда
	//	Строка = тзТехнологииДоставки.Добавить();
	ИначеЕсли Параметры.ИмяМетода = "getCargoDescriptionList" Тогда
		Строка = тзОписанияГруза.Добавить();
		Строка.НаименованиеRU = СтруктураПараметров.DescriptionRu;
	ИначеЕсли Параметры.ИмяМетода = "getOwnershipFormsList" Тогда
		Строка = тзФормыСобственности.Добавить();
		Строка.НаименованиеПолное = СтруктураПараметров.FullName;
	ИначеЕсли Параметры.ИмяМетода = "getBackwardDeliveryCargoTypes" Тогда
		Строка = тзВидыОбратнойДоставки.Добавить();
	ИначеЕсли Параметры.ИмяМетода = "getPalletsList" Тогда
		Строка = тзВидыПаллет.Добавить();
		Строка.НаименованиеRU = СтруктураПараметров.DescriptionRu;
		Строка.Вес = СтруктураПараметров.Weight;
		//ИначеЕсли Параметры.ИмяМетода = "getTypesOfCounterparties" Тогда
		//	Строка = тзТипыКонтрагентов.Добавить();
	ИначеЕсли Параметры.ИмяМетода = "getTypesOfPayersForRedelivery" Тогда
		Строка = тзТипыПлательщиковОбратнойДоставки.Добавить();
	//ИначеЕсли Параметры.ИмяМетода = "getTiresWheelsList" Тогда
	//	Строка = тзШины.Добавить();
	//	Строка.НаименованиеRU = СтруктураПараметров.DescriptionRu;
	//	Строка.Вес = СтруктураПараметров.Weight;
	//	Строка.Тип = СтруктураПараметров.DescriptionType;
	ИначеЕсли Параметры.ИмяМетода = "getTraysList" Тогда
		Строка = тзПоддоны.Добавить();
		Строка.НаименованиеRU = СтруктураПараметров.DescriptionRu;
		Строка.Вес = СтруктураПараметров.Weight;
	КонецЕсли;
	Строка.Идентификатор = СтруктураПараметров.Ref;
	Строка.Наименование = СтруктураПараметров.Description;
	
КонецФункции

Функция ВыполнитьОбработчик(Владелец, ИмяФункции, П1 = Неопределено, П2 = Неопределено, П3=Неопределено)
	Получилось = Ложь;
	Если не Получилось тогда
		//Попытка
		Выполнить(""+ИмяФункции+"(П1,П2,Владелец,П3)");
		Получилось = истина;
		//Исключение
		//КонецПопытки;
	КонецЕсли;
	Возврат Получилось;
КонецФункции

Функция Обработать_getCities(ЭлементДом,Результат, Владелец, Параметры)
	СтруктураПараметров = Новый структура;
	тзГорода = Новый ТаблицаЗначений;
	тзГорода.Колонки.Добавить("Наименование");
	тзГорода.Колонки.Добавить("НаименованиеRU");
	тзГорода.Колонки.Добавить("РайонRef");
	тзГорода.Колонки.Добавить("Район");	
	тзГорода.Колонки.Добавить("CityID");
	тзГорода.Колонки.Добавить("Доставка1");
	тзГорода.Колонки.Добавить("Доставка2");
	тзГорода.Колонки.Добавить("Доставка3");
	тзГорода.Колонки.Добавить("Доставка4");
	тзГорода.Колонки.Добавить("Доставка5");
	тзГорода.Колонки.Добавить("Доставка6");
	тзГорода.Колонки.Добавить("Доставка7");
	тзГорода.Колонки.Добавить("Идентификатор");
	тзГорода.Колонки.Добавить("ОбластьRef");
	тзГорода.Колонки.Добавить("Область");
	Пока не ЭлементДом = неопределено цикл
		Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла)  тогда
			СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);
		Иначе
			Текст = "Ошибка getCities";
			ВызватьИсключение Текст;
		КонецЕсли;	 
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	Строка	= тзГорода.Добавить();
	Строка.Наименование = СтруктураПараметров.Description;
	Строка.НаименованиеRU = СтруктураПараметров.DescriptionRu;
	Строка.Идентификатор = СтруктураПараметров.Ref;
	Строка.Область = СтруктураПараметров.AreaDescription;	
	Строка.ОбластьRef = СтруктураПараметров.Area;
	//Строка.Район = СтруктураПараметров.;		
	//Строка.РайонRef = СтруктураПараметров.AreaDescription;			
	//Строка.РайонРУ = СтруктураПараметров.AreaDescriptionRu;
	Строка.CityID = СтруктураПараметров.CityID;
	Строка.Доставка1 = ?(СтруктураПараметров.Delivery1 = "1",Истина,Ложь);
	Строка.Доставка2 = ?(СтруктураПараметров.Delivery2 = "1",Истина,Ложь);
	Строка.Доставка3 = ?(СтруктураПараметров.Delivery3 = "1",Истина,Ложь);
	Строка.Доставка4 = ?(СтруктураПараметров.Delivery4 = "1",Истина,Ложь);
	Строка.Доставка5 = ?(СтруктураПараметров.Delivery5 = "1",Истина,Ложь);
	Строка.Доставка6 = ?(СтруктураПараметров.Delivery6 = "1",Истина,Ложь);
	Строка.Доставка7 = ?(СтруктураПараметров.Delivery7 = "1",Истина,Ложь);
	РайонСсылка = Справочники.Районы.ПустаяСсылка();
	Если  СтруктураПараметров.Свойство("Regoin")и СтруктураПараметров.Свойство("RegoinDescription") тогда
		Район = Справочники.Районы.НайтиПоРеквизиту("Идентификатор",СтруктураПараметров.Regoin);
		Если Не ЗначениеЗаполнено(Район) тогда
			Район = Справочники.Районы.СоздатьЭлемент();
			Район.Идентификатор =  СтруктураПараметров.Regoin;
			Район.НаименованиеRU =  СтруктураПараметров.RegoinDescriptionRU;
			Район.Наименование =  СтруктураПараметров.Наименование;
			Район.ОператорДоставки =  Перечисления.ОператорыДоставки.НоваяПочта;
			Район.Записать();
			РайонСсылка = Район.Ссылка;
		ИначеЕсли Район.Наименование <>  СтруктураПараметров.RegoinDescription тогда
			СпрРайон = Район.ПолучитьОбъект();
			СпрРайон.НаименованиеRU =  СтруктураПараметров.RegoinDescriptionRU;
			СпрРайон.Наименование =  СтруктураПараметров.RegoinDescription;
			СпрРайон.Записать();
			РайонСсылка = Район;
		КонецЕсли;
	КонецЕсли;
	СпрОбласть = Справочники.Области.НайтиПоРеквизиту("Идентификатор",СтруктураПараметров.Area); 
	Город = Справочники.ГородаДоставки.НайтиПоРеквизиту("Идентификатор",Строка.Идентификатор);  
	//Если НЕ ЗначениеЗаполнено(СпрОбласть) тогда 
	//	СпрОбластьЭлемент = Справочники.Области.СоздатьЭлемент();
	//	СпрОбластьЭлемент.Наименование =  Строка.Наименование;
	//	СпрОбластьЭлемент.НаименованиеRU =  Строка.НаименованиеRU;
	//	СпрОбластьЭлемент.Записать();
	//	СпрОбласть = СпрОбластьЭлемент.Ссылка;
	//КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Город) тогда
		СпрГород = Справочники.ГородаДоставки.СоздатьЭлемент();
		СпрГород.Идентификатор = Строка.Идентификатор;		
		СпрГород.Наименование = Строка.Наименование;
		СпрГород.НаименованиеRU = Строка.НаименованиеRU;
		СпрГород.Область = СпрОбласть;
		СпрГород.Район = РайонСсылка;
		СпрГород.CityID = Строка.CityID;
		СпрГород.ПН = Строка.Доставка1;
		СпрГород.ВТ = Строка.Доставка2;
		СпрГород.СР = Строка.Доставка3;
		СпрГород.ЧТ = Строка.Доставка4;
		СпрГород.ПТ = Строка.Доставка5;
		СпрГород.СБ = Строка.Доставка6;
		СпрГород.ВС = Строка.Доставка7;
		СпрГород.ОператорДоставки =  Перечисления.ОператорыДоставки.НоваяПочта;
		СпрГород.Записать();
	ИначеЕсли Город.Наименование <>  Строка.Наименование тогда
		СпрГород = Город.ПолучитьОбъект();
		СпрГород.НаименованиеRU =  Строка.НаименованиеRU;
		СпрГород.Наименование =  Строка.Наименование;
		СпрГород.Записать();
	КонецЕсли;
КонецФункции

Функция Обработать_getCounterparties(ЭлементДом,Результат, Владелец, Параметры)
	СтруктураПараметров = Новый структура;
	
	Пока не ЭлементДом = неопределено цикл
		Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла)  тогда
			СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);
		Иначе
			Текст = "Ошибка getCounterparties";
			ВызватьИсключение Текст;
		КонецЕсли;	 
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	СтруктураПараметров.Вставить("Владелец",Владелец);

	Если Параметры.Тип = "Sender" Тогда
		КонтрагентСлужбыДоставки = Справочники.КонтрагентыСлужбыДоставки.НайтиПоРеквизиту("Идентификатор", СтруктураПараметров.Ref);
		Если НЕ ЗначениеЗаполнено(КонтрагентСлужбыДоставки) Тогда
			Строка = Справочники.КонтрагентыСлужбыДоставки.СоздатьЭлемент();
		Иначе
			Строка = КонтрагентСлужбыДоставки.ПолучитьОбъект();
		КонецЕсли;

		Строка.Идентификатор 		= СтруктураПараметров.Ref;
		Строка.Контрагент 			= СтруктураПараметров.Description;
		Строка.Город 				= СтруктураПараметров.City;
		Строка.ГородИмя 			= СтруктураПараметров.CityDescription;
		Строка.Фамилия				= СтруктураПараметров.LastName;
		Строка.Имя 					= СтруктураПараметров.FirstName;
		Строка.Отчество 			 = СтруктураПараметров.MiddleName;
		Строка.ФормаСобственностиRef = СтруктураПараметров.OwnershipFormRef;
		Строка.ФормаСобственности 	 = СтруктураПараметров.OwnershipFormDescription;
		Строка.ЕДРПОУ 				 = СтруктураПараметров.EDRPOU;
		Строка.ТипКонтрагента		 = СтруктураПараметров.CounterpartyType;
		
		Строка.Записать();	 
	КонецЕсли;

	

	
КонецФункции

Функция Обработать_getCounterpartyContactPersons(ЭлементДом,Результат, Владелец, Параметры)
	СтруктураПараметров = Новый структура;
	
	Пока не ЭлементДом = неопределено цикл
		Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла)  тогда
			СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);
		Иначе
			Текст = "Ошибка getCounterpartyContactPersons";
			ВызватьИсключение Текст;
		КонецЕсли;	 
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	СтруктураПараметров.Вставить("Владелец",Владелец);

	КонтактныеЛицаСлужбыДоставки = Справочники.КонтактныеЛицаСлужбыДоставки.НайтиПоРеквизиту("Идентификатор", СтруктураПараметров.Ref);
	Если НЕ ЗначениеЗаполнено(КонтактныеЛицаСлужбыДоставки) Тогда
		Строка = Справочники.КонтактныеЛицаСлужбыДоставки.СоздатьЭлемент();
	Иначе
		Строка = КонтактныеЛицаСлужбыДоставки.ПолучитьОбъект();
	КонецЕсли;

	Строка.Контрагент 		= Справочники.КонтрагентыСлужбыДоставки.НайтиПоРеквизиту("Идентификатор", Параметры.Контрагент);
	Строка.Идентификатор 	= СтруктураПараметров.Ref;
	Строка.КонтактноеЛицо 	= СтруктураПараметров.Description;
	Строка.Телефон 			= СтруктураПараметров.Phones;
	Строка.Email 			= СтруктураПараметров.Email;
	Строка.Фамилия 			= СтруктураПараметров.LastName;
	Строка.Имя 				= СтруктураПараметров.FirstName;
	Строка.Отчество 		= СтруктураПараметров.MiddleName;
	Строка.ДатаОбновления	= Параметры.ДатаОбновления;
	
	Строка.Записать();
	
КонецФункции
	
Функция Обработать_getArea(ЭлементДом, Результат, Владелец, Параметры)
	СтруктураПараметров = новый Структура;	
	тзРегионы = Новый ТаблицаЗначений;
	тзРегионы.Колонки.Добавить("Наименование");
	тзРегионы.Колонки.Добавить("Идентификатор");
	тзРегионы.Колонки.Добавить("НаименованиеRU");
	Пока не ЭлементДом = неопределено цикл
		Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла) тогда
			СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);
		Иначе
			Текст = "Ошибка getArea";
			ВызватьИсключение Текст;	 
		КонецЕсли;	 
		
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	Строка	= тзРегионы.Добавить();
	Строка.НаименованиеRU = СтруктураПараметров.DescriptionRU;
	Строка.Идентификатор = СтруктураПараметров.Ref;
	Строка.Наименование = СтруктураПараметров.Description;
	//Строка.AreaCenter = СтруктураПараметров.AreasCenter;
	Область = Справочники.Области.НайтиПоРеквизиту("Идентификатор",Строка.Идентификатор);  
	Если НЕ ЗначениеЗаполнено(Область) тогда
		СпрОбласть = Справочники.Области.СоздатьЭлемент();
		СпрОбласть.Идентификатор = Строка.Идентификатор;
		СпрОбласть.Наименование = Строка.Наименование;
		СпрОбласть.НаименованиеRU = Строка.Наименование;
		СпрОбласть.ОператорДоставки =  Перечисления.ОператорыДоставки.НоваяПочта;					
		СпрОбласть.Записать();
	ИначеЕсли Область.Наименование <>  Строка.Наименование тогда
		СпрОбласть = Область.ПолучитьОбъект();
		СпрОбласть.Наименование =  Строка.Наименование;
		СпрОбласть.Записать();
	КонецЕсли;
	
КонецФункции

Функция Обработать_getStreet(ЭлементДом,Результат, Владелец,Параметры)
	СтруктураПараметров = Новый структура;
	тзУлицы = Новый ТаблицаЗначений;
	тзУлицы.Колонки.Добавить("Наименование");
	тзУлицы.Колонки.Добавить("Город");
	тзУлицы.Колонки.Добавить("ТипУлицы");
	тзУлицы.Колонки.Добавить("RefТипУлицы");
	тзУлицы.Колонки.Добавить("Идентификатор");
	Пока не ЭлементДом = неопределено цикл
		Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла)  тогда
			СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);
		Иначе
			Текст = "Ошибка getStreet";
			ВызватьИсключение Текст;
		КонецЕсли;	 
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	СтруктураПараметров.Вставить("Владелец",Владелец);
	Строка	= тзУлицы.Добавить();
	Строка.Идентификатор = СтруктураПараметров.Ref;
	Строка.Наименование = СтруктураПараметров.Description;
	Строка.ТипУлицы = СтруктураПараметров.StreetsType;
	Строка.RefТипУлицы = СтруктураПараметров.StreetsTypeRef;
	Строка.Город = Параметры.CityRef;
	Улица = Справочники.Улицы.НайтиПоРеквизиту("Идентификатор",Строка.Идентификатор);  
	ТипУлицы = Справочники.ТипыУлиц.НайтиПоРеквизиту("Идентификатор",Строка.RefТипУлицы);
	Если не ЗначениеЗаполнено(ТипУлицы) тогда
		СпрТипУлицы = Справочники.ТипыУлиц.СоздатьЭлемент();
		СпрТипУлицы.Идентификатор = Строка.RefТипУлицы;
		СпрТипУлицы.Наименование = Строка.ТипУлицы;
		СпрТипУлицы.Записать();
		ТипУлицы = СпрТипУлицы.Ссылка;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Улица) тогда
		СпрУлица = Справочники.Улицы.СоздатьЭлемент();
		СпрУлица.Идентификатор = Строка.Идентификатор;
		СпрУлица.Наименование = Строка.Наименование;
//		СпрУлица.НаименованиеRU = Строка.НаименованиеRU;
		СпрУлица.ТипУлицы = ТипУлицы;
		СпрУлица.Город =Справочники.ГородаДоставки.НайтиПоРеквизиту("Идентификатор",Строка.Город);
		СпрУлица.ОператорДоставки =  Перечисления.ОператорыДоставки.НоваяПочта;		
		СпрУлица.Записать();
	ИначеЕсли Улица.Наименование <>  Строка.Наименование тогда
		СпрУлица = Улица.ПолучитьОбъект();
		//СпрУлица.НаименованиеRU =  Строка.НаименованиеRU;
		СпрУлица.Наименование =  Строка.Наименование;
		СпрУлица.Записать();
	КонецЕсли;
КонецФункции

Функция Обработать_getWarehouses(ЭлементДом,Результат, Владелец, Параметры)
	СтруктураПараметров = Новый Структура;
	тзОтделения = Новый ТаблицаЗначений;
	тзОтделения.Колонки.Добавить("Наименование");
	тзОтделения.Колонки.Добавить("НаименованиеRU");
	тзОтделения.Колонки.Добавить("НомерОтделения");
	тзОтделения.Колонки.Добавить("ТелефонОтделения");
	тзОтделения.Колонки.Добавить("Город");
	тзОтделения.Колонки.Добавить("ТипОтделения");
	тзОтделения.Колонки.Добавить("Широта");
	тзОтделения.Колонки.Добавить("Долгота");
	тзОтделения.Колонки.Добавить("МаксимальныйВесМеста");
	тзОтделения.Колонки.Добавить("ОбщийМаксимальныйВес");
	тзОтделения.Колонки.Добавить("ГородРеф");
	тзОтделения.Колонки.Добавить("Идентификатор");
	тзОтделения.Колонки.Добавить("МаксимальнаяВысота");
	тзОтделения.Колонки.Добавить("МаксимальнаяШирина");
	тзОтделения.Колонки.Добавить("МаксимальнаяДлинна");
	
	Пока не ЭлементДом = неопределено цикл
		Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла)  тогда     
			Если ЭлементДом.ИмяУзла = "ReceivingLimitationsOnDimensions" Тогда

				ЭлементДомДочерний = ЭлементДом.ПервыйДочерний;				
				Пока Не ЭлементДомДочерний = Неопределено Цикл 
					
					СтруктураПараметров.Вставить(Строка(ЭлементДомДочерний.ИмяУзла),ЭлементДомДочерний.ТекстовоеСодержимое);
					ЭлементДомДочерний = ЭлементДомДочерний.СледующийСоседний;
					
				КонецЦикла;

			Иначе	
				СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);  
			КонецЕсли;
		Иначе
			Текст = "Ошибка getWarehouses";
			ВызватьИсключение Текст;
		КонецЕсли;	 
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	СтруктураПараметров.Вставить("Владелец",Владелец);
	//Если тзТипыОтделений.Количество() = 0 Тогда		
		Если СтрЧислоВхождений(СтруктураПараметров.Description,"Поштомат") = 0 Тогда
			Тип = "Отделение";		
		Иначе
			Тип = "Почтамат";		
		КонецЕсли;
		Строка = тзОтделения.Добавить();
	Строка.НомерОтделения = СтруктураПараметров.Number;
	Строка.Идентификатор = СтруктураПараметров.Ref;
	Строка.Наименование = СтруктураПараметров.Description;
	Строка.НаименованиеRU = СтруктураПараметров.DescriptionRu;
	Строка.НомерОтделения = СтруктураПараметров.Number;
	Строка.ТелефонОтделения = СтруктураПараметров.Phone;
	Строка.Город = Параметры.CityDescription;
	Строка.ГородРеф = Параметры.CityRef;
	Строка.ТипОтделения = СтруктураПараметров.TypeOfWarehouse;
	Строка.Широта = СтруктураПараметров.Latitude;
	Строка.Долгота = СтруктураПараметров.Longitude;
	Строка.МаксимальныйВесМеста = СтруктураПараметров.PlaceMaxWeightAllowed;
	Строка.ОбщийМаксимальныйВес = СтруктураПараметров.TotalMaxWeightAllowed;   
	Строка.МаксимальнаяВысота = СтруктураПараметров.Height;
	Строка.МаксимальнаяШирина = СтруктураПараметров.Width;
	Строка.МаксимальнаяДлинна = СтруктураПараметров.Length;
	Если ЗначениеЗаполнено(СтруктураПараметров.TypeOfWarehouse) тогда
		ТипОтделения = Справочники.ТипыОтделений.НайтиПоРеквизиту("Идентификатор",СтруктураПараметров.TypeOfWarehouse);
	Иначе
		ТипОтделения = Справочники.ТипыОтделений.ПустаяСсылка();
	КонецЕсли;
	Если СтрЧислоВхождений(СтруктураПараметров.Description,"Поштомат") = 0 Тогда
		Тип = "Отделения";
	Иначе
		Тип = "Почтоматы";
	КонецЕсли;
		Отделение = Справочники[Тип].НайтиПоРеквизиту("Идентификатор",Строка.Идентификатор);
	Если НЕ ЗначениеЗаполнено(Отделение) тогда
		СпрОтделение = Справочники[Тип].СоздатьЭлемент();
		СпрОтделение.Идентификатор = Строка.Идентификатор;
		СпрОтделение.Наименование = Строка.Наименование;
		СпрОтделение.НаименованиеRU = Строка.НаименованиеRU;
		СпрОтделение.Город =Справочники.ГородаДоставки.НайтиПоРеквизиту("Идентификатор",Строка.ГородРеф);
		СпрОтделение.ТипОтделения = ТипОтделения;
		СпрОтделение.НомерОтделения = Строка.НомерОтделения;
		СпрОтделение.Широта = Строка.Широта;
		СпрОтделение.Долгота = Строка.Долгота;
		СпрОтделение.МаксимальныйВесМеста = Строка.МаксимальныйВесМеста;
		СпрОтделение.ОбщийМаксимальныйВес = Строка.ОбщийМаксимальныйВес;
		СпрОтделение.ОператорДоставки =  Перечисления.ОператорыДоставки.НоваяПочта;	
		СпрОтделение.ТелефонОтделения =  Строка.ТелефонОтделения;	
		СпрОтделение.Работает = СтруктураПараметров.WarehouseStatus = "Working"; 
		СпрОтделение.МаксимальнаяВысота =  Строка.МаксимальнаяВысота;
		СпрОтделение.МаксимальнаяШирина =  Строка.МаксимальнаяШирина;	
		СпрОтделение.МаксимальнаяДлинна =  Строка.МаксимальнаяДлинна;	
		СпрОтделение.Записать();
	ИначеЕсли Отделение.Наименование <>  Строка.Наименование
			ИЛИ Отделение.ТелефонОтделения <>  Строка.ТелефонОтделения 
			ИЛИ Отделение.ТипОтделения <>  ТипОтделения
			ИЛИ Строка(Формат(Отделение.МаксимальныйВесМеста,"ЧН=0; ЧГ=;" )) <>  Строка.МаксимальныйВесМеста 
			ИЛИ Отделение.Работает <> (СтруктураПараметров.WarehouseStatus = "Working")
			ИЛИ Строка(Формат(Отделение.МаксимальнаяВысота,"ЧН=0; ЧГ=;" )) <>  Строка.МаксимальнаяВысота
			ИЛИ Строка(Формат(Отделение.МаксимальнаяШирина,"ЧН=0; ЧГ=;" )) <>  Строка.МаксимальнаяШирина
			ИЛИ Строка(Формат(Отделение.МаксимальнаяДлинна,"ЧН=0; ЧГ=;" )) <>  Строка.МаксимальнаяДлинна
			ИЛИ Строка(Отделение.НомерОтделения) <>  Строка.НомерОтделения
			ИЛИ Строка(Формат(Отделение.ОбщийМаксимальныйВес,"ЧН=0; ЧГ=;" )) <>  Строка.ОбщийМаксимальныйВес Тогда
		СпрОтделение = Отделение.ПолучитьОбъект();
		СпрОтделение.Наименование = Строка.Наименование;
		СпрОтделение.НаименованиеRU = Строка.НаименованиеRU;
		СпрОтделение.Город =Справочники.ГородаДоставки.НайтиПоРеквизиту("Идентификатор",Строка.ГородРеф);
		СпрОтделение.ТипОтделения = ТипОтделения;
		СпрОтделение.НомерОтделения = Строка.НомерОтделения;
		СпрОтделение.Широта = Строка.Широта;
		СпрОтделение.Долгота = Строка.Долгота;
		СпрОтделение.МаксимальныйВесМеста = Строка.МаксимальныйВесМеста;
		СпрОтделение.ОбщийМаксимальныйВес = Строка.ОбщийМаксимальныйВес;
		СпрОтделение.ТелефонОтделения =  Строка.ТелефонОтделения;	
		СпрОтделение.Работает = (СтруктураПараметров.WarehouseStatus = "Working"); 
		СпрОтделение.МаксимальнаяВысота =  Строка.МаксимальнаяВысота;
		СпрОтделение.МаксимальнаяШирина =  Строка.МаксимальнаяШирина;	
		СпрОтделение.МаксимальнаяДлинна =  Строка.МаксимальнаяДлинна;	
		СпрОтделение.Записать();
	КонецЕсли;
КонецФункции

Функция Обработать_getCounterpartyAddresses(ЭлементДом,Результат, Владелец, Параметры)
	СтруктураПараметров = Новый структура;
	
	Пока не ЭлементДом = неопределено цикл
		Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла)  тогда
			СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);
		Иначе
			Текст = "Ошибка getCounterpartyAddresses";
			ВызватьИсключение Текст;
		КонецЕсли;	 
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	СтруктураПараметров.Вставить("Владелец",Владелец);

	АдресСлужбыДоставки = Справочники.АдресаСлужбыДоставки.НайтиПоРеквизиту("Идентификатор", СтруктураПараметров.Ref);

	Если НЕ ЗначениеЗаполнено(АдресСлужбыДоставки) тогда
		Строка = Справочники.АдресаСлужбыДоставки.СоздатьЭлемент();
	Иначе
		Строка = АдресСлужбыДоставки.ПолучитьОбъект();
	КонецЕсли;
	
	Строка.Контрагент 	= Справочники.КонтрагентыСлужбыДоставки.НайтиПоРеквизиту("Идентификатор", Параметры.Контрагент);
	Строка.Адрес 		= СтруктураПараметров.Description;
	Строка.Идентификатор = СтруктураПараметров.Ref;
	Строка.ИДГорода 	= Справочники.ГородаДоставки.НайтиПоРеквизиту("Идентификатор", СтруктураПараметров.CityRef);
	Строка.ИДУлицы 		= Справочники.Улицы.НайтиПоРеквизиту("Идентификатор", СтруктураПараметров.StreetRef);
	Строка.Дом 			= СтруктураПараметров.BuildingDescription;
	Строка.Примечание = СтруктураПараметров.Note;
	Строка.ДатаОбновления = Параметры.ДатаОбновления;
	Строка.Записать();
	
КонецФункции

Функция Обработать_getWarehouseTypes(ЭлементДом,Результат, Владелец, Параметры)
	СтруктураПараметров = Новый структура;
	тзТипыОтделений = Новый ТаблицаЗначений;
	тзТипыОтделений.Колонки.Добавить("Наименование");
	тзТипыОтделений.Колонки.Добавить("Идентификатор");
	Пока не ЭлементДом = неопределено цикл
		Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла)  тогда
			СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);
		Иначе
			Текст = "Ошибка getWarehouseTypes";
			ВызватьИсключение Текст;
		КонецЕсли;	 
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	Строка	= тзТипыОтделений.Добавить();
	Строка.Идентификатор = СтруктураПараметров.Ref;
	Строка.Наименование = СтруктураПараметров.Description; 
	ТипОтделения = Справочники.ТипыОтделений.НайтиПоРеквизиту("Идентификатор",Строка.Идентификатор);  
	Если НЕ ЗначениеЗаполнено(ТипОтделения) тогда
		СпрТипОтделения = Справочники.ТипыОтделений.СоздатьЭлемент();
		СпрТипОтделения.Идентификатор = Строка.Идентификатор;
		СпрТипОтделения.Наименование = Строка.Наименование;
		СпрТипОтделения.ОператорДоставки =  Перечисления.ОператорыДоставки.НоваяПочта;					
		СпрТипОтделения.Записать();
	ИначеЕсли ТипОтделения.Наименование <>  Строка.Наименование тогда
		СпрТипОтделения = ТипОтделения.ПолучитьОбъект();
		СпрТипОтделения.Наименование =  Строка.Наименование;
		СпрТипОтделения.Записать();
	КонецЕсли;
КонецФункции

Функция GetXMLResponserNewPost(запрос) экспорт
	Ключ = ОбменНПСлужебный.ПолучитьКлючAPI();
	запрос=СтрЗаменить(запрос,"[ВАШ КЛЮЧ]",Ключ);
	url= "api.novaposhta.ua/v2.0/xml/";
	//хтппсоед=новый HTTPСоединение(url,,,,,,new ЗащищенноеСоединениеOpenSSL);
	хтппсоед = Новый HTTPСоединение(url,,,,,,);
	
	хтппзапрос = Новый HTTPЗапрос(url);
	хтппзапрос.УстановитьТелоИзСтроки(запрос);
	хтппзапрос.Заголовки.Вставить("Content-Type", "text/xml");
	тело = запрос;
	
	ответ = хтппсоед.ОтправитьДляОбработки(хтппзапрос);
	ОтветСтрока = ответ.ПолучитьТелоКакСтроку();
	
	Возврат ОтветСтрока;
	
КонецФункции	

Функция Обработать_getSettlement(ЭлементДом,Результат, Владелец, Параметры)
	СтруктураПараметров = Новый структура;
	тзГорода = Новый ТаблицаЗначений;
	тзГорода.Колонки.Добавить("Наименование");
	тзГорода.Колонки.Добавить("НаименованиеRU");
	тзГорода.Колонки.Добавить("РайонRef");
	тзГорода.Колонки.Добавить("Район");	
	тзГорода.Колонки.Добавить("CityID");
	тзГорода.Колонки.Добавить("Доставка1");
	тзГорода.Колонки.Добавить("Доставка2");
	тзГорода.Колонки.Добавить("Доставка3");
	тзГорода.Колонки.Добавить("Доставка4");
	тзГорода.Колонки.Добавить("Доставка5");
	тзГорода.Колонки.Добавить("Доставка6");
	тзГорода.Колонки.Добавить("Доставка7");
	тзГорода.Колонки.Добавить("Идентификатор");
	тзГорода.Колонки.Добавить("ОбластьRef");
	тзГорода.Колонки.Добавить("Область");
	Пока не ЭлементДом = неопределено цикл
		Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла)  тогда
			СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);
		Иначе
			Текст = "Ошибка getCities";
			ВызватьИсключение Текст;
		КонецЕсли;	 
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	Строка	= тзГорода.Добавить();
	Строка.Наименование = СтруктураПараметров.Description;
	Строка.НаименованиеRU = СтруктураПараметров.DescriptionRu;
	Строка.Идентификатор = СтруктураПараметров.Ref;
	Строка.Область = СтруктураПараметров.AreaDescription;	
	Строка.ОбластьRef = СтруктураПараметров.Area;
	РайонСсылка = Справочники.Районы.ПустаяСсылка();
	Если  СтруктураПараметров.Свойство("Region")и СтруктураПараметров.Свойство("RegionsDescription") тогда
		Район = Справочники.Районы.НайтиПоРеквизиту("Идентификатор",СтруктураПараметров.Region);
		Если Не ЗначениеЗаполнено(Район) тогда
			Район = Справочники.Районы.СоздатьЭлемент();
			Район.Идентификатор =  СтруктураПараметров.Region;
			Район.НаименованиеRU =  СтруктураПараметров.RegionsDescriptionRu;
			Район.Наименование =  СтруктураПараметров.RegionsDescription;
			Район.ОператорДоставки =  Перечисления.ОператорыДоставки.НоваяПочта;
			Район.Записать();
			РайонСсылка = Район.Ссылка;
		ИначеЕсли Район.Наименование <>  СтруктураПараметров.RegionsDescription тогда
			СпрРайон = Район.ПолучитьОбъект();
			СпрРайон.НаименованиеRU =  СтруктураПараметров.RegionsDescriptionRu;
			СпрРайон.Наименование =  СтруктураПараметров.RegionsDescription;
			СпрРайон.Записать();
			РайонСсылка = Район;
		КонецЕсли;
	КонецЕсли;
	СпрОбласть = Справочники.Области.НайтиПоРеквизиту("Идентификатор",СтруктураПараметров.Area); 
	Город = Справочники.ГородаДоставки.НайтиПоНаименованию(Строка.Наименование);  
	Если  ЗначениеЗаполнено(Город) тогда 
		ЕСЛИ НЕ ЗначениеЗаполнено(Город.ИдентификаторSettlement) тогда
			СпрГород = Город.ПолучитьОбъект();
			СпрГород.Район = РайонСсылка;
			СпрГород.ИдентификаторSettlement = Строка.Идентификатор;
			СпрГород.Записать();
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПолучитьОтвет(Адрес,ТекстXML, ответ = "")
	Попытка
		Попытка
			ХМЛХТТП = ПолучитьCOMОбъект("", "MSXML2.ServerXMLHTTP.6.0");
		Исключение
			ХМЛХТТП = ПолучитьCOMОбъект("", "Microsoft.XMLHTTP");
		КонецПопытки;
		
		ХМЛХТТП.Open("POST", Адрес, Ложь);
		ХМЛХТТП.SetRequestHeader("Content-Type", "text/xml");
		ХМЛХТТП.Send(ТекстXML);
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ХМЛХТТП.ResponseText);
		Читаем = Ложь;
		//Перебор узлов	
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ЧтениеXML.ЛокальноеИмя = "SettlementStreetDescriptionRu" Тогда
					Читаем = Истина;
				КонецЕсли;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				Если Читаем Тогда
					Ответ = XMLЗначение(Тип("Строка"), ЧтениеXML.Значение);
					Читаем = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
		
   		ЧтениеXML.Закрыть();	

		Возврат Ответ;
	Исключение 
		Возврат Ответ;
		
		//Возврат Неопределено
	КонецПопытки;
КонецФункции

   // Регистранция ЕН
   
Функция РегистрацияЕН(ДокССылка) Экспорт

	КлючAPI = ОбменНПСлужебный.ПолучитьКлючAPI();
	
	ДокЗаказ 			= ДокССылка.ДокументОснование;
	СтруктураОтветаЭН = СтруктураОтветаПоЭНИнициализация(ДокЗаказ);

	ОтправкаИзМагазина 	= ДокССылка.ОтправкаИзМагазина;
	ОтпраккаНаАдрес     = ДокССылка.ДоставкаНаАдрес;
	Если  ОтправкаИзМагазина тогда 
		Если ОтпраккаНаАдрес  тогда
			 Запрос =  ТТНАдресАдрес(ДокССылка,КлючAPI);
		Иначе
			 Запрос =  ТТНАдресОтделение(ДокССылка,КлючAPI);
		КонецЕсли;
	Иначе
		Если ОтпраккаНаАдрес  тогда
			 Запрос =  ТТНОтделениеАдрес(ДокССылка,КлючAPI);
		Иначе
			 Запрос =  ТТНОтделениеОтделение(ДокССылка,КлючAPI);
		КонецЕсли;
	КонецЕсли;
	Ответтекст=GetXMLResponserNewPost(запрос);
	Если СтрЧислоВхождений(Ответтекст,"<success>true</success>") then 
		СтруктураОтветаЭН.Успех = Истина;
		Чтение=new ЧтениеXML;
		Чтение.УстановитьСтроку(Ответтекст);
		Пока (Чтение.Прочитать()) Цикл
			Если чтение.Имя="IntDocNumber" and чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента тогда
				чтение.Прочитать();
				СтруктураОтветаЭН.НомерТТН=чтение.Значение;
				//Список.Добавить(Значение,Имя);
			ИначеЕсли чтение.Имя="Ref" and чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента then
				чтение.Прочитать();
				СтруктураОтветаЭН.ТТНRef=чтение.Значение;
			ИначеЕсли чтение.Имя="EstimatedDeliveryDate" and чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента then
				чтение.Прочитать();
				Попытка
					СтруктураОтветаЭН.ДатаДоставки = Дата(чтение.Значение + " 00:00:00");
				Исключение
					СтруктураОтветаЭН.ДатаДоставки = Дата(1, 1, 1);
					ЖурналСобытий.Регистрация("Ошибка данных ТТН Новая Почта",,,ДокСсылка,,Ответтекст,,,Ложь);
				КонецПопытки;
			ИначеЕсли чтение.Имя="CostOnSite" and чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента then
				чтение.Прочитать();
				СтруктураОтветаЭН.СуммаОтОператора=?(чтение.Значение = "",0,Число(чтение.Значение));
			КонецЕсли;
		КонецЦикла;
		
		Если Не ПустаяСтрока(СтруктураОтветаЭН.НомерТТН) Тогда

			СтруктураОтветаЭН.ЭлектроннаяНакладная = ДокССылка;
  			СделатьЗаписиВРегистрРН(СтруктураОтветаЭН); 

		Иначе  
			//  Сделать запись в журнал о ошибке

			СтруктураОтветаЭН.Успех = Ложь;
			СтруктураОтветаЭН.ТексОшибки = СформироватьТекстОшибки(Ответтекст);
			СделатьЗаписьВжурнал(СтруктураОтветаЭН.ТексОшибки,ДокССылка);

		КонецЕсли;	
	Иначе
		
		СтруктураОтветаЭН.ТексОшибки = СформироватьТекстОшибки(Ответтекст);
		СделатьЗаписьВжурнал(СтруктураОтветаЭН.ТексОшибки,ДокССылка);
	
	КонецЕсли;
	
   	Возврат СтруктураОтветаЭН;
КонецФункции

Функция СтруктураОтветаПоЭНИнициализация(ДокуменДляТТН) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ДокументДляТТН", ДокуменДляТТН);
	Результат.Вставить("НомерТТН", "");
	Результат.Вставить("ТТНRef", "");
	Результат.Вставить("ДатаДоставки", Дата('00010101'));
	Результат.Вставить("СуммаОтОператора", 0);
	Результат.Вставить("ОператорДоставки", Перечисления.ОператорыДоставки.НоваяПочта);
	Результат.Вставить("ЭлектроннаяНакладная", Документы.ЭлектроннаяНакладная.ПустаяСсылка());
	Результат.Вставить("ПутьКФайлуТТН", "");
	Результат.Вставить("ПутьКФайлуТТННакладная", "");
	Результат.Вставить("ПутьКФайлуСтикера", "");
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("ТексОшибки", "");
	Результат.Вставить("ОтказОтПолучения", Ложь);
	Результат.Вставить("Переадресация", Ложь);

	Возврат Результат;
КонецФункции

Функция ТТНУжеСоздана(ДокССылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(ЭлектроннаяНакладная.Ссылка) КАК КоличеествоЭН,
		|	СУММА(ВЫБОР
		|		КОГДА СтатусыЭНСрезПоследних.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Отменена)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК КоличествоОтмененных,
		|	ЗапросДоступностиТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров КАК ЗапросДоступностиТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяНакладная КАК ЭлектроннаяНакладная
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЭН.СрезПоследних КАК СтатусыЭНСрезПоследних
		|			ПО ЭлектроннаяНакладная.Ссылка = СтатусыЭНСрезПоследних.ДокументРегистратор
		|		ПО ЗапросДоступностиТоваров.Ссылка = ЭлектроннаяНакладная.ДокументОснование
		|ГДЕ
		|	ЗапросДоступностиТоваров.Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ЗапросДоступностиТоваров.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокССылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Результат = Не (Выборка.КоличествоОтмененных = Выборка.КоличеествоЭН);
		
	Иначе
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции  

Функция  СоздатьДокументЭН(СтруктураДляЗаписи) Экспорт
	
	Результат = Документы.ЭлектроннаяНакладная.ПустаяСсылка();
	НачатьТранзакцию();

	Попытка
		НовыйДокумент = Документы.ЭлектроннаяНакладная.СоздатьДокумент();
		НовыйДокумент.Дата = ТекущаяДатаСеанса();  
		НовыйДокумент.Номер = СтруктураДляЗаписи.НомерТТН;  
		НовыйДокумент.ВнешняяСсылка = СтруктураДляЗаписи.ТТНRef;  
		НовыйДокумент.ДатаДоставки = СтруктураДляЗаписи.ДатаДоставки;  
		НовыйДокумент.ДокументОснование = СтруктураДляЗаписи.ДокументДляТТН;  
		НовыйДокумент.ОператорДоставки = СтруктураДляЗаписи.ОператорДоставки;  
		НовыйДокумент.СуммаДоставки = СтруктураДляЗаписи.СуммаОтОператора;  
		НовыйДокумент.ПутьКФайлуТТН = СтруктураДляЗаписи.ПутьКФайлуТТН;  
		НовыйДокумент.ПутьКФайлуСтикера = СтруктураДляЗаписи.ПутьКФайлуСтикера;
		НовыйДокумент.ВозвратнаяНакладная = СтруктураДляЗаписи.ОтказОтПолучения;  
		НовыйДокумент.ПереадресацияНакладная = СтруктураДляЗаписи.Переадресация;  
		НовыйДокумент.Записать();
		Результат = НовыйДокумент.Ссылка;
		ЗафиксироватьТранзакцию();
		РегистрыСведений.СтатусыЭН.СозданаПосылка(Результат);
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Создание Электронной накладной"
			, УровеньЖурналаРегистрации.Ошибка
			, Метаданные.Документы.ЭлектроннаяНакладная
			, СтруктураДляЗаписи.ДокументДляТТН
			, ТекстОшибки
		);
		
	КонецПопытки;
		
	Возврат Результат;

КонецФункции
 
Процедура  СделатьЗаписиВРегистрРН(СтруктураДляЗаписи)
 	НаборЗаписей = РегистрыНакопления.ТТН.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(СтруктураДляЗаписи.ДокументДляТТН);
	Запись 					= НаборЗаписей.ДобавитьПриход();
	Запись.Регистратор 		= СтруктураДляЗаписи.ДокументДляТТН;
	Запись.ОператорДоставки = СтруктураДляЗаписи.ОператорДоставки;
	Запись.Сумма 			= СтруктураДляЗаписи.СуммаОтОператора;  
	Запись.Период 			= ТекущаяДатаСеанса();  
	НаборЗаписей.Записать();   
КонецПроцедуры

Процедура СделатьЗаписьВжурнал(СписокОшибок,ДокСсылка)
	Сообщить(СписокОшибок);
	ЖурналСобытий.Регистрация("Ошибка создания ТТН  Новая Почта",,,ДокСсылка,,СписокОшибок);	
КонецПроцедуры

Функция СформироватьТекстОшибки(Текст)
	тзОшибки = новый ТаблицаЗначений;
	тзОшибки.Колонки.Добавить("Код");
	тзОшибки.Колонки.Добавить("ТекстUk");
	тзОшибки.Колонки.Добавить("ТекстEn");
	СтрокаОшибки = "Ошибки:";
	СтрокаОшибкиСтар = "Ошибки:";
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Текст);
	Пока(Чтение.Прочитать()) Цикл
		Если Чтение.Имя="item" И Чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			Чтение.Прочитать();
			//СтрокаОшибкиСтар = СтрокаОшибкиСтар+"
			//|"+СокрЛП(Чтение.Значение);
			СтруктураОтбора = новый структура;
			Структураотбора.Вставить("Код",СокрЛП(Чтение.Значение));
			СтрокиТаблицы = тзОшибки.НайтиСтроки(Структураотбора);
			Если СтрокиТаблицы.Количество() > 0 Тогда
				СтрокаОшибки = СтрокаОшибки +"
				|"+СтрокиТаблицы[0].Код+", "+?(СокрЛП(СтрокиТаблицы[0].ТекстUk) = "",СокрЛП(СтрокиТаблицы[0].ТекстEn),СокрЛП(СтрокиТаблицы[0].ТекстUk));
			Иначе
				СтрокаОшибки = СтрокаОшибки +", "+Чтение.Значение;

			конецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат СтрокаОшибки;
КонецФункции

Функция ЗапросДляПочты(ДокументЗапроса)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаЗП.СтатусОплаты, ЗНАЧЕНИЕ(Перечисление.СтатусОплаты.Оплачен)) КАК СтатусОплаты,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаЭН.ГородПолучатель) = ТИП(Справочник.ГородаДоставки)
	|			ТОГДА ТаблицаЭН.ГородПолучатель.Наименование
	|		ИНАЧЕ ТаблицаЭН.ГородПолучатель
	|	КОНЕЦ КАК ГородПолучатель,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаЭН.ГородПолучатель) = ТИП(Справочник.ГородаДоставки)
	|			ТОГДА ТаблицаЭН.ГородПолучатель.Идентификатор
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ГородПолучательИдентификатор,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаЭН.ОтделениеПолучатель) = ТИП(Справочник.Отделения)
	|			ТОГДА ТаблицаЭН.ОтделениеПолучатель.НомерОтделения
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаЭН.ОтделениеПолучатель) = ТИП(Справочник.Почтоматы)
	|			ТОГДА ТаблицаЭН.ОтделениеПолучатель.НомерОтделения
	|		ИНАЧЕ ТаблицаЭН.ОтделениеПолучатель
	|	КОНЕЦ КАК ОтделениеПолучатель,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаЭН.УлицаПолучатель) = ТИП(Справочник.Улицы)
	|			ТОГДА ТаблицаЭН.УлицаПолучатель.Наименование
	|		ИНАЧЕ ТаблицаЭН.УлицаПолучатель
	|	КОНЕЦ КАК УлицаПолучатель,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаЭН.УлицаПолучатель) = ТИП(Справочник.Улицы)
	|			ТОГДА ТаблицаЭН.УлицаПолучатель.Идентификатор
	|		ИНАЧЕ ТаблицаЭН.УлицаПолучатель
	|	КОНЕЦ КАК УлицаПолучательИдентификатор,
	|	ТаблицаЭН.ДомПолучатель КАК ДомПолучатель,
	|	ТаблицаЭН.КвартираПолучатель КАК КвартираПолучатель,
	|	ВЫБОР
	|		КОГДА ТаблицаЭН.ВозвратОтКлиента
	|			ТОГДА КонтрагентыСлужбыДоставки.Наименование
	|		ИНАЧЕ ТаблицаЭН.ФамилияПолучатель
	|	КОНЕЦ ФамилияПолучатель,
	|	ВЫБОР
	|		КОГДА ТаблицаЭН.ВозвратОтКлиента
	|			ТОГДА """"
	|		ИНАЧЕ ТаблицаЭН.ИмяПолучатель
	|	КОНЕЦ ИмяПолучатель,
	|	ВЫБОР
	|		КОГДА ТаблицаЭН.ВозвратОтКлиента
	|			ТОГДА """"
	|		ИНАЧЕ ТаблицаЭН.ОтчествоПолучатель
	|	КОНЕЦ как ОтчествоПолучатель,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаЭН.ГородПолучатель) = ТИП(Справочник.ГородаДоставки)
	|			ТОГДА ТаблицаЭН.ГородПолучатель.Область.Наименование
	|		ИНАЧЕ ТаблицаЭН.ОтчествоПолучатель
	|	КОНЕЦ КАК ОбластьПолучатель,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаЭН.ГородПолучатель) = ТИП(Справочник.ГородаДоставки)
	|			ТОГДА ТаблицаЭН.ГородПолучатель.Район.Наименование
	|		ИНАЧЕ ТаблицаЭН.РайонПолучатель
	|	КОНЕЦ КАК РайонПолучатель,
	|	ТаблицаЭН.КонтактноеЛицоОтправитель.Идентификатор КАК КонтактноеЛицоОтправитель,
	|	ТаблицаЭН.КонтрагентОтправитель.Идентификатор КАК КонтрагентОтправитель,
	|	ТаблицаЭН.ГородОтправитель.Идентификатор КАК ГородОтправитель,
	|	ТаблицаЭН.НомерТелефонаОтправитель КАК НомерТелефонаОтправитель,
	|	ТаблицаЭН.АдресОтправитель.Идентификатор КАК АдресОтправитель,
	|	ТаблицаЭН.ОтделениеОтправитель.Идентификатор КАК ОтделениеОтправитель,
	|	ТаблицаЭН.ТелефонПолучатель КАК ТелефонПолучатель,
	|	ЕСТЬNULL(ТаблицаЗД.Номер, ТаблицаВозврат.Номер) КАК НомерЗаказа,
	|	ЕСТЬNULL(ТаблицаЗД.СуммаДокумента, ТаблицаВозврат.СуммаДокумента) КАК СуммаДокумента,
	|	ЕСТЬNULL(ТаблицаЗД.СуммаОплатыДоставки, 0) КАК СуммаОплатыДоставки,
	|	ТаблицаЭН.НашаСуммаДоставки КАК НашаСуммаДоставки,
	|	ВЫБОР
	|		КОГДА ТаблицаЭН.ВозвратОтКлиента
	|			ТОГДА ТаблицаЗП.Телефон + "";"" + ТаблицаЗП.Контрагент.Наименование
	|		ИНАЧЕ ТаблицаЗП.КомментарийДляДоставки
	|	КОНЕЦ КАК КомментарийДляДоставки,
	|	ВЫБОР
	|		КОГДА ТаблицаЭН.ВозвратОтКлиента
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|			КОГДА ТаблицаЗД.ОператорДоставки = ЗНАЧЕНИЕ(Перечисление.ОператорыДоставки.ВнутренняяЛогистика)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаЗП.СтатусОплаты ЕСТЬ NULL
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ТаблицаЗП.СтатусОплаты = ЗНАЧЕНИЕ(Перечисление.СтатусОплаты.НеОплачен)
	|			КОНЕЦ
	|		КОНЕЦ
	|	КОНЕЦ КАК КонтрольОплаты,
	|	ВЫБОР
	|		КОГДА ТаблицаЭН.ВозвратОтКлиента
	|			ТОГДА ""Organization""
	|		ИНАЧЕ ""PrivatePerson""
	|	КОНЕЦ КАК ТипПолучателя,
	|	ВЫБОР
	|		КОГДА ТаблицаЭН.ВозвратОтКлиента
	|			ТОГДА КонтрагентыСлужбыДоставки.ЕДРПОУ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ЕДРПОУ,
	|	ВЫБОР
	|		КОГДА ТаблицаЭН.ВозвратОтКлиента
	|			ТОГДА КонтрагентыСлужбыДоставки.ФормаСобственностиRef
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ФормаСобственностиRef,
	|	УчетнаяПолитикаСрезПоследних.КонтактноеЛицоНовойПочты.КонтактноеЛицо КАК КонтактноеЛицоНовойПочты,
	|	ТаблицаЭН.ВозвратОтКлиента КАК ВозвратОтКлиента
	|ИЗ
	|	Документ.ЭлектроннаяНакладная КАК ТаблицаЭН
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ТаблицаЗП
	|		ПО ТаблицаЭН.ЗаказПокупателя = ТаблицаЗП.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров КАК ТаблицаЗД
	|		ПО ТаблицаЭН.ДокументОснование = ТаблицаЗД.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратИнтернетЗаказа КАК ТаблицаВозврат
	|		ПО ТаблицаЭН.ДокументОснование = ТаблицаВозврат.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних КАК УчетнаяПолитикаСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтрагентыСлужбыДоставки КАК КонтрагентыСлужбыДоставки
	|			ПО УчетнаяПолитикаСрезПоследних.КонтрагентНовойПочты = КонтрагентыСлужбыДоставки.Ссылка
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаЭН.Ссылка = &Ссылка";
	
    Запрос.УстановитьПараметр("Ссылка",ДокументЗапроса);
    
    Возврат Запрос;
	
КонецФункции

Функция ТТНАдресАдрес(ДокССылка,КлючAPI)  
 	Метод = "save";

	Запрос = ЗапросДляПочты(ДокССылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
	    БлокПолучателя = "";

		СуммаЭлектронногоДокумента = Формат(Выборка.СуммаДокумента + Выборка.НашаСуммаДоставки,"ЧГ=;");
		ДопУслуги = "<AdditionalInformation>
			|" + Символы.ПС + Лев(СокрЛП(Выборка.КомментарийДляДоставки), 36) + "
			|</AdditionalInformation>";
		ДопУслуги = ДопУслуги + "<InfoRegClientBarcodes>" + Выборка.НомерЗаказа + "</InfoRegClientBarcodes>";
		Если Выборка.КонтрольОплаты тогда
			ДопУслуги = ДопУслуги + "
			|	<AfterpaymentOnGoodsCost>"
				+ СуммаЭлектронногоДокумента
				+"</AfterpaymentOnGoodsCost>";
		КонецЕсли;                   
		ФиоКлиента = "";
		ФИОКлиента = СокрЛП(СокрЛП(Выборка.ФамилияПолучатель)
						+ " " + СокрЛП(Выборка.ИмяПолучатель)
						+ " " + СокрЛП(Выборка.ОтчествоПолучатель));
		Если Выборка.ВозвратОтКлиента Тогда
	
			PayerType 	= "Recipient";	
			БлокПолучателя = БлокПолучателя + "
					|<NewAddress>1</NewAddress>
					|<RecipientCityName>"+сокрлп(Выборка.ГородПолучатель)+"</RecipientCityName>
					|<RecipientAddressName>"+СокрЛП(Выборка.УлицаПолучатель)+"</RecipientAddressName>
					|<RecipientHouse>"+Строка(Выборка.ДомПолучатель)+"</RecipientHouse>
					|<RecipientFlat>"+Строка(Выборка.КвартираПолучатель)+"</RecipientFlat>
					|<RecipientName>"+сокрлп(ФИОКлиента)+"</RecipientName>
					|<RecipientType>"+Строка(Выборка.ТипПолучателя)+"</RecipientType>
					|<OwnershipForm>"+Строка(Выборка.ФормаСобственностиRef)+"</OwnershipForm>
					|<RecipientContactName>"+Строка(Выборка.КонтактноеЛицоНовойПочты)+"</RecipientContactName>
					|<EDRPOU>"+Строка(Выборка.ЕДРПОУ)+"</EDRPOU>";

		Иначе
	
			PayerType 	= "Sender";	
			БлокПолучателя = БлокПолучателя + "
					|<NewAddress>1</NewAddress>
					|<RecipientCityName>"+сокрлп(Выборка.ГородПолучатель)+"</RecipientCityName>
					|<RecipientArea>"+сокрлп(Выборка.ОбластьПолучатель)+"</RecipientArea>
					|<RecipientAreaRegions>"+сокрлп(Выборка.РайонПолучатель)+"</RecipientAreaRegions>
					|<RecipientAddressName>"+СокрЛП(Выборка.УлицаПолучатель)+"</RecipientAddressName>
					|<RecipientHouse>"+Строка(Выборка.ДомПолучатель)+"</RecipientHouse>
					|<RecipientFlat>"+Строка(Выборка.КвартираПолучатель)+"</RecipientFlat>
					|<RecipientName>"+сокрлп(ФИОКлиента)+"</RecipientName>
					|<RecipientType>"+Строка(Выборка.ТипПолучателя)+"</RecipientType>";

		КонецЕсли;
		ContactSender 	= СокрЛП(Выборка.КонтактноеЛицоОтправитель);
		Sender 		  	= СокрЛП(Выборка.КонтрагентОтправитель);	
	  	CitySender	 	= СокрЛП(Выборка.ГородОтправитель);
		SendersPhone  	= СокрЛП(Выборка.НомерТелефонаОтправитель);
		SenderAddress 	= СокрЛП(Выборка.АдресОтправитель);
	   	PForm 		= "NonCash";
		DescriptionCargo = "Дитячі товари";
		ServiceType = "DoorsDoors";	
		Мест = ПолучитьКоличествоМест(ДокСсылка);
		RecipientsPhone = СокрЛП(Выборка.ТелефонПолучатель);
		CargoType = "Parcel";
		Вес = ПолучитьВес(ДокСсылка);  
		Объем = ПолучитьОбъем(ДокСсылка);
		ЗапросAPI=
		"<root>
		|<apiKey>[ВАШ КЛЮЧ]</apiKey>
		|<modelName>InternetDocument</modelName>
		|<calledMethod>"+Метод+"</calledMethod>
		|<methodProperties>
		|<CargoType>"+CargoType+"</CargoType>
		|<Cost>"+СуммаЭлектронногоДокумента+"</Cost>
		|<DateTime>"+Формат(ТекущаяДатаСеанса(),"ДФ=dd.MM.yyyy")+"</DateTime>
		|<Description>"+DescriptionCargo+"</Description>
		|<PayerType>"+PayerType+"</PayerType>
		|<PaymentMethod>"+PForm+"</PaymentMethod>
		|<VolumeGeneral>"+Объем+"</VolumeGeneral>
		|<Weight>"+Вес+"</Weight>
		|<SeatsAmount>"+Строка(Мест)+"</SeatsAmount>" + ЗаполнитьКоличествоМест(ДокССылка) + "
		|<ServiceType>"+ServiceType+"</ServiceType>"+ДопУслуги+"
		|<CitySender>"+CitySender+"</CitySender>
		|<Sender>"+Sender+"</Sender>
		|<SenderAddress>"+SenderAddress+"</SenderAddress>
		|<ContactSender>"+ContactSender+"</ContactSender>
		|<SendersPhone>"+SendersPhone+"</SendersPhone>"+Блокполучателя+"
		|<RecipientsPhone>"+RecipientsPhone+"</RecipientsPhone>
		|</methodProperties>
		|</root>";
		ЗапросAPI=СтрЗаменить(ЗапросAPI,"[ВАШ КЛЮЧ]",КлючAPI);
	
	КонецЕсли;	
    Возврат  ЗапросAPI;
КонецФункции

Функция ТТНАдресОтделение(ДокССылка,КлючAPI)  
 	Метод = "save";

	Запрос = ЗапросДляПочты(ДокССылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
	    БлокПолучателя = "";

		СуммаЭлектронногоДокумента = Формат(Выборка.СуммаДокумента + Выборка.НашаСуммаДоставки,"ЧГ=;");
		ДопУслуги = "<AdditionalInformation>
			|" + Символы.ПС + Лев(СокрЛП(Выборка.КомментарийДляДоставки), 36) + "
			|</AdditionalInformation>";
		ДопУслуги = ДопУслуги + "<InfoRegClientBarcodes>" + Выборка.НомерЗаказа + "</InfoRegClientBarcodes>";
		Если Выборка.КонтрольОплаты тогда
			ДопУслуги = ДопУслуги + "
			|	<AfterpaymentOnGoodsCost>"
				+ СуммаЭлектронногоДокумента
				+"</AfterpaymentOnGoodsCost>";
		КонецЕсли;                   
		ФиоКлиента = "";
		ФИОКлиента = СокрЛП(Выборка.ФамилияПолучатель)
						+ " " + СокрЛП(Выборка.ИмяПолучатель)
						+ " " + СокрЛП(Выборка.ОтчествоПолучатель);

		БлокПолучателя = БлокПолучателя + "
				|<NewAddress>1</NewAddress>
				|<RecipientCityName>"+сокрлп(Выборка.ГородПолучатель)+"</RecipientCityName>
				|<RecipientArea>"+сокрлп(Выборка.ОбластьПолучатель)+"</RecipientArea>
				|<RecipientAreaRegions>"+сокрлп(Выборка.РайонПолучатель)+"</RecipientAreaRegions>
				|<RecipientAddressName>"+СокрЛП(Выборка.ОтделениеПолучатель)+"</RecipientAddressName>
				|<RecipientHouse></RecipientHouse>
				|<RecipientFlat></RecipientFlat>
				|<RecipientName>"+сокрлп(ФИОКлиента)+"</RecipientName>
				|<RecipientType>"+Строка(Выборка.ТипПолучателя)+"</RecipientType>";

		ContactSender 	= СокрЛП(Выборка.КонтактноеЛицоОтправитель);
		Sender 		  	= СокрЛП(Выборка.КонтрагентОтправитель);	
	  	CitySender	 	= СокрЛП(Выборка.ГородОтправитель);
		SendersPhone  	= СокрЛП(Выборка.НомерТелефонаОтправитель);
		SenderAddress 	= СокрЛП(Выборка.АдресОтправитель);
		PayerType 	= "Sender";	
	   	PForm 		= "NonCash";
		DescriptionCargo = "Дитячі товари";
		ServiceType = "DoorsWarehouse";	
		Мест = ПолучитьКоличествоМест(ДокСсылка);
		RecipientsPhone = СокрЛП(Выборка.ТелефонПолучатель);
		CargoType = "Parcel";
		Вес = ПолучитьВес(ДокСсылка);  
		Объем = ПолучитьОбъем(ДокСсылка);
		ЗапросAPI=
		"<root>
		|<apiKey>[ВАШ КЛЮЧ]</apiKey>
		|<modelName>InternetDocument</modelName>
		|<calledMethod>"+Метод+"</calledMethod>
		|<methodProperties>
		|<CargoType>"+CargoType+"</CargoType>
		|<Cost>"+СуммаЭлектронногоДокумента+"</Cost>
		|<DateTime>"+Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy")+"</DateTime>
		|<Description>"+DescriptionCargo+"</Description>
		|<PayerType>"+PayerType+"</PayerType>
		|<PaymentMethod>"+PForm+"</PaymentMethod>
		|<VolumeGeneral>"+Объем+"</VolumeGeneral>
		|<Weight>"+Вес+"</Weight>
		|<SeatsAmount>"+Строка(Мест)+"</SeatsAmount>" + ЗаполнитьКоличествоМест(ДокССылка) + "
		|<ServiceType>"+ServiceType+"</ServiceType>"+ДопУслуги+"
		|<CitySender>"+CitySender+"</CitySender>
		|<Sender>"+Sender+"</Sender>
		|<SenderAddress>"+SenderAddress+"</SenderAddress>
		|<ContactSender>"+ContactSender+"</ContactSender>
		|<SendersPhone>"+SendersPhone+"</SendersPhone>"+Блокполучателя+"
		|<RecipientsPhone>"+RecipientsPhone+"</RecipientsPhone>
		|</methodProperties>
		|</root>";
		ЗапросAPI=СтрЗаменить(ЗапросAPI,"[ВАШ КЛЮЧ]",КлючAPI);

	КонецЕсли;	
    Возврат  ЗапросAPI;
КонецФункции

Функция ТТНОтделениеОтделение(ДокССылка,КлючAPI)  
 	Метод = "save";

	Запрос = ЗапросДляПочты(ДокССылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
	    БлокПолучателя = "";

		СуммаЭлектронногоДокумента = Формат(Выборка.СуммаДокумента + Выборка.НашаСуммаДоставки,"ЧГ=;");
		ДопУслуги = "<AdditionalInformation>
			|" + Символы.ПС + Лев(СокрЛП(Выборка.КомментарийДляДоставки), 36) + "
			|</AdditionalInformation>";
		ДопУслуги = ДопУслуги + "<InfoRegClientBarcodes>" + Выборка.НомерЗаказа + "</InfoRegClientBarcodes>";
		Если Выборка.КонтрольОплаты тогда
			ДопУслуги = ДопУслуги + "
			|	<AfterpaymentOnGoodsCost>"
				+ СуммаЭлектронногоДокумента
				+"</AfterpaymentOnGoodsCost>";
		КонецЕсли;                   
		ФиоКлиента = "";
		ФИОКлиента = СокрЛП(Выборка.ФамилияПолучатель)
						+ " " + СокрЛП(Выборка.ИмяПолучатель)
						+ " " + СокрЛП(Выборка.ОтчествоПолучатель);

		БлокПолучателя = БлокПолучателя + "
				|<NewAddress>1</NewAddress>
				|<RecipientCityName>"+сокрлп(Выборка.ГородПолучатель)+"</RecipientCityName>
				|<RecipientArea>"+сокрлп(Выборка.ОбластьПолучатель)+"</RecipientArea>
				|<RecipientAreaRegions>"+сокрлп(Выборка.РайонПолучатель)+"</RecipientAreaRegions>
				|<RecipientAddressName>"+СокрЛП(Выборка.ОтделениеПолучатель)+"</RecipientAddressName>
				|<RecipientHouse></RecipientHouse>
				|<RecipientFlat></RecipientFlat>
				|<RecipientName>"+сокрлп(ФИОКлиента)+"</RecipientName>
				|<RecipientType>"+Строка(Выборка.ТипПолучателя)+"</RecipientType>";

		ContactSender 	= СокрЛП(Выборка.КонтактноеЛицоОтправитель);
		Sender 		  	= СокрЛП(Выборка.КонтрагентОтправитель);	
	  	CitySender	 	= СокрЛП(Выборка.ГородОтправитель);
		SendersPhone  	= СокрЛП(Выборка.НомерТелефонаОтправитель);
		SenderAddress 	= СокрЛП(Выборка.ОтделениеОтправитель);;
		PayerType 	= "Sender";	
	   	PForm 		= "NonCash";
		DescriptionCargo = "Дитячі товари";
		ServiceType = "WarehouseWarehouse";	
		Мест = ПолучитьКоличествоМест(ДокСсылка);
		RecipientsPhone = СокрЛП(Выборка.ТелефонПолучатель);
		CargoType = "Parcel";
		Вес = ПолучитьВес(ДокСсылка);  
		Объем = ПолучитьОбъем(ДокСсылка);
		ЗапросAPI=
		"<root>
		|<apiKey>[ВАШ КЛЮЧ]</apiKey>
		|<modelName>InternetDocument</modelName>
		|<calledMethod>"+Метод+"</calledMethod>
		|<methodProperties>
		|<CargoType>"+CargoType+"</CargoType>
		|<Cost>"+СуммаЭлектронногоДокумента+"</Cost>
		|<DateTime>"+Формат(ТекущаяДатаСеанса(),"ДФ=dd.MM.yyyy")+"</DateTime>
		|<Description>"+DescriptionCargo+"</Description>
		|<PayerType>"+PayerType+"</PayerType>
		|<PaymentMethod>"+PForm+"</PaymentMethod>
		|<VolumeGeneral>"+Объем+"</VolumeGeneral>
		|<Weight>"+Вес+"</Weight>
		|<SeatsAmount>"+Строка(Мест)+"</SeatsAmount>" + ЗаполнитьКоличествоМест(ДокССылка) + "
		|<ServiceType>"+ServiceType+"</ServiceType>"+ДопУслуги+"
		|<CitySender>"+CitySender+"</CitySender>
		|<Sender>"+Sender+"</Sender>
		|<SenderAddress>"+SenderAddress+"</SenderAddress>
		|<ContactSender>"+ContactSender+"</ContactSender>
		|<SendersPhone>"+SendersPhone+"</SendersPhone>"+Блокполучателя+"
		|<RecipientsPhone>"+RecipientsPhone+"</RecipientsPhone>
		|</methodProperties>
		|</root>";
		ЗапросAPI=СтрЗаменить(ЗапросAPI,"[ВАШ КЛЮЧ]",КлючAPI);

	КонецЕсли;	
    Возврат  ЗапросAPI;
КонецФункции

Функция ТТНОтделениеАдрес(ДокССылка,КлючAPI)  
 	Метод = "save";

	Запрос = ЗапросДляПочты(ДокССылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
	    БлокПолучателя = "";

		СуммаЭлектронногоДокумента = Формат(Выборка.СуммаДокумента + Выборка.НашаСуммаДоставки,"ЧГ=;");
		ДопУслуги = "<AdditionalInformation>
			|" + Символы.ПС + Лев(СокрЛП(Выборка.КомментарийДляДоставки), 36) + "
			|</AdditionalInformation>";
		ДопУслуги = ДопУслуги + "<InfoRegClientBarcodes>" + Выборка.НомерЗаказа + "</InfoRegClientBarcodes>";
		Если Выборка.КонтрольОплаты тогда
			ДопУслуги = ДопУслуги + "
			|	<AfterpaymentOnGoodsCost>"
				+ СуммаЭлектронногоДокумента
				+"</AfterpaymentOnGoodsCost>";
		КонецЕсли;                   
		ФиоКлиента = "";
		ФИОКлиента = СокрЛП(Выборка.ФамилияПолучатель)
						+ " " + СокрЛП(Выборка.ИмяПолучатель)
						+ " " + СокрЛП(Выборка.ОтчествоПолучатель);

		Если Выборка.ВозвратОтКлиента Тогда
	
			PayerType 	= "Recipient";	
			БлокПолучателя = БлокПолучателя + "
					|<NewAddress>1</NewAddress>
					|<RecipientCityName>"+сокрлп(Выборка.ГородПолучатель)+"</RecipientCityName>
					|<RecipientAddressName>"+СокрЛП(Выборка.УлицаПолучатель)+"</RecipientAddressName>
					|<RecipientHouse>"+Строка(Выборка.ДомПолучатель)+"</RecipientHouse>
					|<RecipientFlat>"+Строка(Выборка.КвартираПолучатель)+"</RecipientFlat>
					|<RecipientName>"+сокрлп(ФИОКлиента)+"</RecipientName>
					|<RecipientType>"+Строка(Выборка.ТипПолучателя)+"</RecipientType>
					|<OwnershipForm>"+Строка(Выборка.ФормаСобственностиRef)+"</OwnershipForm>
					|<RecipientContactName>"+Строка(Выборка.КонтактноеЛицоНовойПочты)+"</RecipientContactName>
					|<EDRPOU>"+Строка(Выборка.ЕДРПОУ)+"</EDRPOU>";

		Иначе
	
			PayerType 	= "Sender";	
			БлокПолучателя = БлокПолучателя + "
					|<NewAddress>1</NewAddress>
					|<RecipientCityName>"+сокрлп(Выборка.ГородПолучатель)+"</RecipientCityName>
					|<RecipientArea>"+сокрлп(Выборка.ОбластьПолучатель)+"</RecipientArea>
					|<RecipientAreaRegions>"+сокрлп(Выборка.РайонПолучатель)+"</RecipientAreaRegions>
					|<RecipientAddressName>"+СокрЛП(Выборка.УлицаПолучатель)+"</RecipientAddressName>
					|<RecipientHouse>"+Строка(Выборка.ДомПолучатель)+"</RecipientHouse>
					|<RecipientFlat>"+Строка(Выборка.КвартираПолучатель)+"</RecipientFlat>
					|<RecipientName>"+сокрлп(ФИОКлиента)+"</RecipientName>
					|<RecipientType>"+Строка(Выборка.ТипПолучателя)+"</RecipientType>";

		КонецЕсли;
		ContactSender 	= СокрЛП(Выборка.КонтактноеЛицоОтправитель);
		Sender 		  	= СокрЛП(Выборка.КонтрагентОтправитель);	
	  	CitySender	 	= СокрЛП(Выборка.ГородОтправитель);
		SendersPhone  	= СокрЛП(Выборка.НомерТелефонаОтправитель);
		SenderAddress 	= СокрЛП(Выборка.ОтделениеОтправитель);;
	   	PForm 		= "NonCash";
		DescriptionCargo = "Дитячі товари";
		ServiceType = "WarehouseDoors";	
		Мест = ПолучитьКоличествоМест(ДокСсылка);
		RecipientsPhone = СокрЛП(Выборка.ТелефонПолучатель);
		CargoType = "Parcel";
		Вес = ПолучитьВес(ДокСсылка);  
		Объем = ПолучитьОбъем(ДокСсылка);
		ЗапросAPI=
		"<root>
		|<apiKey>[ВАШ КЛЮЧ]</apiKey>
		|<modelName>InternetDocument</modelName>
		|<calledMethod>"+Метод+"</calledMethod>
		|<methodProperties>
		|<CargoType>"+CargoType+"</CargoType>
		|<Cost>"+СуммаЭлектронногоДокумента+"</Cost>
		|<DateTime>"+Формат(ТекущаяДатаСеанса(),"ДФ=dd.MM.yyyy")+"</DateTime>
		|<Description>"+DescriptionCargo+"</Description>
		|<PayerType>"+PayerType+"</PayerType>
		|<PaymentMethod>"+PForm+"</PaymentMethod>
		|<VolumeGeneral>"+Объем+"</VolumeGeneral>
		|<Weight>"+Вес+"</Weight>
		|<SeatsAmount>"+Строка(Мест)+"</SeatsAmount>" + ЗаполнитьКоличествоМест(ДокССылка) + "
		|<ServiceType>"+ServiceType+"</ServiceType>"+ДопУслуги+"
		|<CitySender>"+CitySender+"</CitySender>
		|<Sender>"+Sender+"</Sender>
		|<SenderAddress>"+SenderAddress+"</SenderAddress>
		|<ContactSender>"+ContactSender+"</ContactSender>
		|<SendersPhone>"+SendersPhone+"</SendersPhone>"+Блокполучателя+"
		|<RecipientsPhone>"+RecipientsPhone+"</RecipientsPhone>
		|</methodProperties>
		|</root>";
		ЗапросAPI=СтрЗаменить(ЗапросAPI,"[ВАШ КЛЮЧ]",КлючAPI);

	КонецЕсли;	
    Возврат  ЗапросAPI;
КонецФункции

Функция ПолучитьМестоОтправки(Магазин)
	ОтправкаИзМагазина = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСлужбДоставки.ОтправкаИзМагазина КАК ОтправкаИзМагазина
		|ИЗ
		|	РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|ГДЕ
		|	НастройкиСлужбДоставки.Магазин = &Магазин
		|	И НастройкиСлужбДоставки.ОператорДоставки = &ОператорДоставки";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ОператорДоставки", Перечисления.ОператорыДоставки.НоваяПочта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОтправкаИзМагазина = ВыборкаДетальныеЗаписи.ОтправкаИзМагазина;
	КонецЦикла;
	
	Возврат ОтправкаИзМагазина; 
КонецФункции

Функция ЗаполнитьКоличествоМест(ДокССылка)  
	Места = "";
	Места = Места + "<OptionsSeat>";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ЗапросДоступностиТоваровУпаковки.Ширина, 1) КАК Ширина,
		|	ЕСТЬNULL(ЗапросДоступностиТоваровУпаковки.Высота, 1) КАК Высота,
		|	ЕСТЬNULL(ЗапросДоступностиТоваровУпаковки.Глубина, 1) КАК Длина,
		|	ЕСТЬNULL(ЗапросДоступностиТоваровУпаковки.Вес, 1) КАК Вес
		|ИЗ
		|	Документ.ЭлектроннаяНакладная КАК ЭлектроннаяНакладная
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров.Упаковки КАК ЗапросДоступностиТоваровУпаковки
		|		ПО ЗапросДоступностиТоваровУпаковки.Ссылка = ЭлектроннаяНакладная.ДокументОснование
		|ГДЕ
		|	ЭлектроннаяНакладная.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокССылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объем = (Выборка.Ширина*Выборка.Длина*Выборка.Высота)/1000000;
		Места = Места + "
			|<item>
			|<volumetricVolume>"+Формат(Объем, "ЧГ=;")+"</volumetricVolume>
			|<volumetricWidth>"+Формат(Выборка.Ширина, "ЧГ=;")+"</volumetricWidth>
			|<volumetricLength>"+Формат(Выборка.Длина, "ЧГ=;")+"</volumetricLength>
			|<volumetricHeight>"+Формат(Выборка.Высота, "ЧГ=;")+"</volumetricHeight>
			|<weight>"+Формат(Выборка.Вес, "ЧГ=;")+"</weight>
			|</item>";
	КонецЦикла;
	
	Места = Места + "</OptionsSeat>";
	
	Возврат Места;

КонецФункции  


Функция ПолучитьВес(ДокССылка)  
	Вес = 1;	  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЗапросДоступностиТоваровУпаковки.Вес) КАК Вес
		|ИЗ
		|	Документ.ЭлектроннаяНакладная КАК ЭлектроннаяНакладная
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров.Упаковки КАК ЗапросДоступностиТоваровУпаковки
		|		ПО ЭлектроннаяНакладная.ДокументОснование = ЗапросДоступностиТоваровУпаковки.Ссылка
		|ГДЕ
		|	ЭлектроннаяНакладная.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокССылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Вес =   ВыборкаДетальныеЗаписи.Вес;
	Конеццикла;
	Возврат Вес;		
КонецФункции  

Функция ПолучитьОбъем(ДокССылка)  
	Объем = 1;	  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЗапросДоступностиТоваровУпаковки.Ширина / 100 * ЗапросДоступностиТоваровУпаковки.Высота / 100 *
		|		ЗапросДоступностиТоваровУпаковки.Глубина / 100) КАК Объем
		|ИЗ
		|	Документ.ЭлектроннаяНакладная КАК ЭлектроннаяНакладная
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров.Упаковки КАК ЗапросДоступностиТоваровУпаковки
		|		ПО ЭлектроннаяНакладная.ДокументОснование = ЗапросДоступностиТоваровУпаковки.Ссылка
		|ГДЕ
		|	ЭлектроннаяНакладная.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокССылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объем =   ВыборкаДетальныеЗаписи.Объем;
	Конеццикла;
	Возврат Объем;		
КонецФункции  

 

Функция ПолучитьКоличествоМест(ДокССылка)  
	Мест = 1;	  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектроннаяНакладная.Ссылка,
		|	КОЛИЧЕСТВО(ЗапросДоступностиТоваровУпаковки.НомерСтроки) КАК Мест
		|ИЗ
		|	Документ.ЭлектроннаяНакладная КАК ЭлектроннаяНакладная
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров.Упаковки КАК ЗапросДоступностиТоваровУпаковки
		|		ПО ЭлектроннаяНакладная.ДокументОснование = ЗапросДоступностиТоваровУпаковки.Ссылка
		|ГДЕ
		|	ЭлектроннаяНакладная.Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ЭлектроннаяНакладная.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокССылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Мест =   ВыборкаДетальныеЗаписи.Мест;
	Конеццикла;
	Возврат Мест;		
КонецФункции  

Функция ПолучитьАдресОтправки(Магазин,ОператорДоставки)  
	Адрес = "";	  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСлужбДоставки.Адрес КАК Адрес
		|ИЗ
		|	РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|ГДЕ
		|	НастройкиСлужбДоставки.Магазин = &Магазин
		|	И НастройкиСлужбДоставки.ОператорДоставки = &ОператорДоставки";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ОператорДоставки", ОператорДоставки);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Адрес = СокрЛП(ВыборкаДетальныеЗаписи.Адрес);	  
	Конеццикла;
	Возврат Адрес;		
КонецФункции  


Функция ПолучитьОтделениеОтправки(Магазин,ОператорДоставки)  
	Адрес = "";	  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСлужбДоставки.Отделение КАК Отделение
		|ИЗ
		|	РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|ГДЕ
		|	НастройкиСлужбДоставки.Магазин = &Магазин
		|	И НастройкиСлужбДоставки.ОператорДоставки = &ОператорДоставки";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ОператорДоставки", ОператорДоставки);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Адрес = СокрЛП(ВыборкаДетальныеЗаписи.Отделение);	  
	Конеццикла;
	Возврат Адрес;		
КонецФункции  




            
Функция ПолучитьГородОтправителя(Магазин,ОператорДоставки)  
	Город = "";	  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСлужбДоставки.Город.Идентификатор КАК Город
		|ИЗ
		|	РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|ГДЕ
		|	НастройкиСлужбДоставки.Магазин = &Магазин
		|	И НастройкиСлужбДоставки.ОператорДоставки = &ОператорДоставки";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ОператорДоставки", ОператорДоставки);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Город = СокрЛП(ВыборкаДетальныеЗаписи.Город);	  
	Конеццикла;
	Возврат Город;		
КонецФункции 

Функция ПолучитьНомерТелефона(Клиент)  
	Телефон = "";	  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.Представление КАК Представление
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Ссылка = &Клиент
		|	И КонтрагентыКонтактнаяИнформация.Тип = &Тип";
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Телефон = СокрЛП(ВыборкаДетальныеЗаписи.Представление);	  
	Конеццикла;
	Возврат Телефон;		
КонецФункции  

  
Функция ПолучитьКонтактноеЛицо(Магазин,ОператорДоставки)  
	КонтактноеЛицо = "";	  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСлужбДоставки.КонтактноеЛицо КАК КонтактноеЛицо
		|ИЗ
		|	РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|ГДЕ
		|	НастройкиСлужбДоставки.Магазин = &Магазин
		|	И НастройкиСлужбДоставки.ОператорДоставки = &ОператорДоставки";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ОператорДоставки", ОператорДоставки);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		КонтактноеЛицо = СокрЛП(ВыборкаДетальныеЗаписи.КонтактноеЛицо);	  
	Конеццикла;
	Возврат КонтактноеЛицо;		
КонецФункции  



Функция ПолучитьОтправителя(Магазин,ОператорДоставки)  
	Контрагент = "";	  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСлужбДоставки.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|ГДЕ
		|	НастройкиСлужбДоставки.Магазин = &Магазин
		|	И НастройкиСлужбДоставки.ОператорДоставки = &ОператорДоставки";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ОператорДоставки", ОператорДоставки);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Контрагент = СокрЛП(ВыборкаДетальныеЗаписи.Контрагент);	  
	Конеццикла;
	Возврат Контрагент;		
КонецФункции  



   
Функция ПолучитьТелефонОтправителя(Магазин,ОператорДоставки)  
	НомерТелефона = "";	  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСлужбДоставки.НомерТелефона КАК НомерТелефона
		|ИЗ
		|	РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|ГДЕ
		|	НастройкиСлужбДоставки.Магазин = &Магазин
		|	И НастройкиСлужбДоставки.ОператорДоставки = &ОператорДоставки";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ОператорДоставки", ОператорДоставки);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НомерТелефона = СокрЛП(ВыборкаДетальныеЗаписи.НомерТелефона);	  
	Конеццикла;
	Возврат НомерТелефона;		
КонецФункции  


                           
// Сохранинение PDF
Функция СохранитьТТНвPDF(СтруктураДляЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФайлыДляНакладной = Новый Структура;
	
	ТекущийКлюч = ОбменНПСлужебный.ПолучитьКлючAPI();

	//ТТН 
	ИмяФайлаЗаписиТТН = "TTN"+СокрЛП(СтруктураДляЗаписи.НомерТТН)+".pdf";
	КоличествоПопыток = 5;
	Пока Не КоличествоПопыток = 0 Цикл
		КоличествоПопыток = КоличествоПопыток - 1;
		Если СформироватьФайл(ТекущийКлюч, СтруктураДляЗаписи.ТТНRef, ИмяФайлаЗаписиТТН, "printDocument") Тогда
			КоличествоПопыток = 0;
		КонецЕсли;
	КонецЦикла;

	// Стикер
	ИмяФайлаЗаписиСтикер = "STICKER"+СокрЛП(СтруктураДляЗаписи.НомерТТН)+".pdf";	
	КоличествоПопыток = 5;
	Пока Не КоличествоПопыток = 0 Цикл
		КоличествоПопыток = КоличествоПопыток - 1;
		Если СформироватьФайл(ТекущийКлюч, СокрЛП(СтруктураДляЗаписи.ТТНRef), ИмяФайлаЗаписиСтикер, "printMarkings") Тогда
			КоличествоПопыток = 0;
		КонецЕсли;
	КонецЦикла;

	МассивОбъектов = Новый Массив();
	МассивОбъектов.Добавить(СтруктураДляЗаписи.ДокументДляТТН);
	ОбъектыПечати = Новый СписокЗначений();
	ПараметрыВывода = Новый Структура("КодЯзыкаДляМногоязычныхПечатныхФорм", "uk");
	ДокументТоварнаяНакладная = Документы.ЗапросДоступностиТоваров.ПечатьТоварнаяНакладная(МассивОбъектов, ОбъектыПечати, ПараметрыВывода);

	ИмяФайлаЗаписи = ПолучитьИмяВременногоФайла("pdf");
		
	Файл = Новый Файл(ИмяФайлаЗаписи);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ИмяФайлаЗаписи);
	КонецЕсли;

	ДокументТоварнаяНакладная.Записать(ИмяФайлаЗаписи, ТипФайлаТабличногоДокумента.PDF); 
	ИмяФайлаЗаписиНакладной = "INVOICE"+СокрЛП(СтруктураДляЗаписи.НомерТТН)+".pdf";
	ПередатьФайл(ИмяФайлаЗаписи, ИмяФайлаЗаписиНакладной);
	
	Соединение = Новый HTTPСоединение("cbone.antoshka.ua",,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	HTTPЗапрос = Новый HTTPЗапрос("ttninvoice/" + СокрЛП(СтруктураДляЗаписи.НомерТТН));
	ОтветHTTP = Соединение.Получить(HTTPЗапрос); // финал	
	ИмяФайлаЗаписиТТННакладная = "TTNINVOICE"+СокрЛП(СтруктураДляЗаписи.НомерТТН)+".pdf";

	ФайлыДляНакладной.Вставить("ПутьКФайлуТТН", "https://cbone.antoshka.ua/np/" + ИмяФайлаЗаписиТТН);
	ФайлыДляНакладной.Вставить("ПутьКФайлуТТННакладная", "https://cbone.antoshka.ua/np/" + ИмяФайлаЗаписиТТННакладная);
	ФайлыДляНакладной.Вставить("ПутьКФайлуСтикера", "https://cbone.antoshka.ua/np/" + ИмяФайлаЗаписиСтикер);

	Возврат ФайлыДляНакладной;
	
КонецФункции

Функция СформироватьФайл(ТекущийКлюч,ЕНРеф,ИмяФайлаЗаписиНаФТП,ТипДокумента)
	ТочкаВхода =  "https://api.novaposhta.ua/v2.0/xml/";
		
	ТекстЗапроса = "<?xml version=""1.0"" encoding=""UTF-8"" ?>
	|<root>
	|<apiKey>"+ТекущийКлюч+"</apiKey>
	|<modelName>InternetDocument</modelName>
	|<calledMethod>"+ТипДокумента+"</calledMethod>
	|<methodProperties>
	|<DocumentRefs>";
	ТекстЗапроса = ТекстЗапроса + "
	|<item>"+ЕНРеф+"</item>";
	Если ТипДокумента = "printDocument" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|<item>"+ЕНРеф+"</item>";
	КонецЕсли;		
	ТекстЗапроса = ТекстЗапроса +"
	|</DocumentRefs>
	|<Type>pdf</Type>
	|</methodProperties>
	|</root>			
	|";
	Попытка

		Попытка
			ХМЛХТТП = ПолучитьCOMОбъект("", "MSXML2.ServerXMLHTTP.6.0");
		Исключение
			ХМЛХТТП = ПолучитьCOMОбъект("", "Microsoft.XMLHTTP");
		КонецПопытки;
		
		ХМЛХТТП.Open("POST", ТочкаВхода, Ложь);
		ХМЛХТТП.SetRequestHeader("Content-Type", "text/xml");
		ХМЛХТТП.Send(ТекстЗапроса);

		Буфер = ХМЛХТТП.ResponseBody();
		Поток = Новый COMОбъект("ADODB.Stream");	
		Поток.Type = 1;  //Бинарный	
		Поток.Mode = 3; 	
		Поток.Open();	
		Поток.Write(Буфер);
		ИмяФайлаЗаписи = ПолучитьИмяВременногоФайла("pdf");
		
		Файл = Новый Файл(ИмяФайлаЗаписи);
		Если Файл.Существует() Тогда
			УдалитьФайлы(ИмяФайлаЗаписи);
		КонецЕсли;
		Поток.SaveToFile(ИмяФайлаЗаписи);
		Поток.Close();
		
		ПередатьФайл(ИмяФайлаЗаписи, ИмяФайлаЗаписиНаФТП);

		Возврат Истина;

	Исключение 
		Сообщить(ОписаниеОшибки());
		
		Возврат Ложь;
	КонецПопытки;

КонецФункции
		
Функция ПередатьФайл(ИмяФайлаЗаписи, ИмяФайлаЗаписиНаФТП)

	Попытка

		КартинкаИмяПараметра = "file";

		Картинка = Новый Картинка(ИмяФайлаЗаписи); // любым удобным способом, по факту нужны ДД изображения

		Разделитель = СтрЗаменить(Новый УникальныйИдентификатор(), "-", ""); // все что угодно, можно даже руками указать "razzdell", главное что бы оно было уникальное во всем тексте тела
		
		Тело = Новый ПотокВПамяти();
		ЗаписьДанных = Новый ЗаписьДанных(Тело, , , Символы.ВК + Символы.ПС, ""); // то самое переопределение разделителей               
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
		ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=" + КартинкаИмяПараметра + "; filename=" + ИмяФайлаЗаписиНаФТП);
		ЗаписьДанных.ЗаписатьСтроку("Content-Type: application/pdf");
		ЗаписьДанных.ЗаписатьСтроку(""); // пустая строка для доп переноса и воспроизведения структуры тела
		ЗаписьДанных.Записать(Картинка.ПолучитьДвоичныеДанные()); // добавляет данные но каретка остается после данных
		ЗаписьДанных.ЗаписатьСтроку(""); // записать не добавляет переносов, добавляем их пустой строкой
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--"); // добавляются еще доп переносы, но они уже не на что не влияют, так же после разделителя добавляем "--", должно обозначать конец тела
		ЗаписьДанных.Закрыть();
		
		ДанныеТела = Тело.ЗакрытьИПолучитьДвоичныеДанные(); // получаем дело в дд, можно и через запись в файл, просто лишний раз не трогаем диски и не делаем доп операций

		Соединение = Новый HTTPСоединение("cbone.antoshka.ua",,,,,,Новый ЗащищенноеСоединениеOpenSSL);

		HTTPЗапрос = Новый HTTPЗапрос("np");

		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДанныеТела); // установили тело
		HTTPЗапрос.Заголовки.Вставить("Content-Length", XMLСтрока(ДанныеТела.Размер()));
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + разделитель);
		ОтветHTTP = Соединение.ОтправитьДляОбработки(HTTPЗапрос); // финал	

		Возврат Истина;

	Исключение 
		Сообщить(ОписаниеОшибки());
		
		Возврат Неопределено;
	КонецПопытки;

КонецФункции
		
Функция ПолучитьПараметрыФТП(ОператорыДоставки)
	
	ПараметрыФТП = Новый Структура;
	ПараметрыФТП.Вставить("Адрес","192.168.9.68");  
	ПараметрыФТП.Вставить("Порт",21);
	ПараметрыФТП.Вставить("Логин","ttn");
	ПараметрыФТП.Вставить("Пароль","mjU3JT3a12");	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСлужбДоставки.АдресFTP КАК Адрес,
		|	НастройкиСлужбДоставки.ПортFTP КАК Порт,
		|	НастройкиСлужбДоставки.ЛогинFTP КАК Логин,
		|	НастройкиСлужбДоставки.ПарольFTP КАК Пароль
		|ИЗ
		|	РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|ГДЕ
		|	НастройкиСлужбДоставки.Магазин = &Магазин
		|	И НастройкиСлужбДоставки.ОператорДоставки = &ОператорДоставки";
	
	Запрос.УстановитьПараметр("Магазин", ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);
	Запрос.УстановитьПараметр("ОператорДоставки", ОператорыДоставки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
		Если Не ПустаяСтрока(ВыборкаДетальныеЗаписи.Адрес) Тогда
			ПараметрыФТП.Вставить("Адрес",СокрЛП(ВыборкаДетальныеЗаписи.Адрес));  
			ПараметрыФТП.Вставить("Порт",ВыборкаДетальныеЗаписи.Порт);
			ПараметрыФТП.Вставить("Логин",СокрЛП(ВыборкаДетальныеЗаписи.Логин));
			ПараметрыФТП.Вставить("Пароль",СокрЛП(ВыборкаДетальныеЗаписи.Пароль));	
		КонецЕсли;		
	КонецЦикла;
	
    Возврат ПараметрыФТП; 
КонецФункции

Процедура ПолучитьСписокТТН(КлючAPI = Неопределено) Экспорт
	ТочкаВхода =  "https://api.novaposhta.ua/v2.0/xml/";
	ПараметрыМетода = Новый Структура;
	Если КлючAPI = Неопределено Тогда
		ТекущийКлюч = ОбменНПСлужебный.ПолучитьКлючAPI();
		ПараметрыМетода.Вставить("Тестовый", Ложь);
		ПараметрыМетода.Вставить("КлючАПИ",ТекущийКлюч);
	Иначе
		ТекущийКлюч = КлючAPI;
		ПараметрыМетода.Вставить("Тестовый", Истина);
		ПараметрыМетода.Вставить("КлючАПИ",ТекущийКлюч);

		ДатаС 	= ТекущаяДатаСеанса() - 15*24*60*60;  
		ДатаПо 	= ТекущаяДатаСеанса() + 7*24*60*60;	
		ТекстЗапроса = "<?xml version=""1.0"" encoding=""UTF-8""?>
		|<root>
		|<apiKey>"+ТекущийКлюч+"</apiKey>
		|<modelName>InternetDocument</modelName>
		|<calledMethod>getDocumentList</calledMethod>
		|<methodProperties>
		|<DateTimeFrom>"+Формат(ДатаС,"ДФ=dd.MM.yyyy")+"</DateTimeFrom > 
		|<DateTimeTo>"+Формат(ДатаПо,"ДФ=dd.MM.yyyy")+"</DateTimeTo> 
		|<GetFullList>1</GetFullList>
		|</methodProperties>
		|</root>";
		
		ДокументДом  = ПолучитьОтветДОМ(ТочкаВхода,ТекстЗапроса);
		Если  ДокументДом = Неопределено тогда
			// Сделать запись в журнал
		КонецЕсли;
		
		Если не ЭтоУспех(ДокументДом) тогда
			ТекстИсключения = ВернутьЕрор(ДокументДом);
			// Сделать запись в журнал
		Иначе
			Результат = новый Структура();
			РаспарситьОтвет("Обработать_getDocumentList", ДокументДом, Результат, "getDocumentList", ПараметрыМетода);
		КонецЕсли;

	КонецЕсли;

	ПолучитьСтатусТТН(КлючAPI);
	
КонецПроцедуры

Функция ПолучитьСтатусТТН(КлючAPI = Неопределено, НомерЭН = "", НоваяТТН = Ложь, Возвратная = Ложь) Экспорт

	Результат = новый Структура();
	ТочкаВхода =  "https://api.novaposhta.ua/v2.0/xml/";
	ПараметрыМетода = Новый Структура;
	Если КлючAPI = Неопределено Тогда
		ТекущийКлюч = ОбменНПСлужебный.ПолучитьКлючAPI();
		ПараметрыМетода.Вставить("Тестовый", Ложь);
	Иначе
		ТекущийКлюч = КлючAPI;
		ПараметрыМетода.Вставить("Тестовый", Истина);
	КонецЕсли;
	
	ПараметрыМетода.Вставить("КлючАПИ",ТекущийКлюч);
	ПараметрыМетода.Вставить("Возвратная",Возвратная);

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаЭН.Номер КАК Номер,
		|	ТаблицаЭН.ТелефонПолучатель КАК ТелефонПолучатель,
		|	СтатусыЭН.СтатусЭН.СтатусПосылки КАК СтатусЭНСтатусПосылки,
		|	ТаблицаЭН.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭлектроннаяНакладная КАК ТаблицаЭН
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЭН.СрезПоследних КАК СтатусыЭН
		|		ПО (СтатусыЭН.ДокументРегистратор = ТаблицаЭН.Ссылка)
		|ГДЕ
		|	ТаблицаЭН.ОператорДоставки = ЗНАЧЕНИЕ(Перечисление.ОператорыДоставки.НоваяПочта)
		|	И (ТаблицаЭН.Номер = &НомерЭН
		|	ИЛИ &ВсеДокументы)
		|	И (НЕ (СтатусыЭН.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Получена)
		|	ИЛИ СтатусыЭН.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Отменена)
		|	ИЛИ СтатусыЭН.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Отказ))
		|	ИЛИ &НоваяТТН
		|	ИЛИ НЕ &ВсеДокументы)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаЭН.Номер,
		|	ТаблицаЭН.ТелефонПолучатель,
		|	СтатусыЭН.СтатусЭН.СтатусПосылки,
		|	ТаблицаЭН.Ссылка
		|ИЗ
		|	Документ.ЭлектроннаяНакладная КАК ТаблицаЭН
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЭН.СрезПоследних КАК СтатусыЭН
		|		ПО (СтатусыЭН.ДокументРегистратор = ТаблицаЭН.Ссылка)
		|ГДЕ
		|	ТаблицаЭН.ОператорДоставки = ЗНАЧЕНИЕ(Перечисление.ОператорыДоставки.НоваяПочта)
		|	И НЕ ТаблицаЭН.Номер = """"
		|	И &ВсеДокументы
		|	И ЕСТЬNULL(СтатусыЭН.Период, ТаблицаЭН.Дата) >= ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, -3)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаЭН.Номер,
		|	ТаблицаЭН.ТелефонПолучатель,
		|	СтатусыЭН.СтатусЭН.СтатусПосылки,
		|	ТаблицаЭН.Ссылка
		|ИЗ
		|	Документ.ЭлектроннаяНакладная КАК ТаблицаЭН
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЭН.СрезПоследних КАК СтатусыЭН
		|		ПО (СтатусыЭН.ДокументРегистратор = ТаблицаЭН.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров КАК ТаблицаЗапроса
		|		ПО ТаблицаЭН.ДокументОснование = ТаблицаЗапроса.Ссылка
		|ГДЕ
		|	НЕ ТаблицаЭН.Номер = """"
		|	И ТаблицаЭН.ОператорДоставки = ЗНАЧЕНИЕ(Перечисление.ОператорыДоставки.НоваяПочта)
		|	И СтатусыЭН.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Отменена)
		|	И &ВсеДокументы
		|	И НЕ (ТаблицаЗапроса.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Закрыт)
		|	ИЛИ
		|		ТаблицаЗапроса.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтменуОтправитель)
		|	ИЛИ
		|		ТаблицаЗапроса.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтменуПолучатель)
		|	ИЛИ ТаблицаЗапроса.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отменён))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаЭН.Номер,
		|	ТаблицаЭН.ТелефонПолучатель,
		|	КодыСтатусовТТН.СтатусПосылки,
		|	ТаблицаЭН.Ссылка
		|ИЗ
		|	Документ.ЭлектроннаяНакладная КАК ТаблицаЭН
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяНакладная КАК ВозвратЭН
		|		ПО (ВозвратЭН.ДокументОснование = ТаблицаЭН.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЭН.СрезПоследних КАК СтатусыЭН
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КодыСтатусовТТН КАК КодыСтатусовТТН
		|			ПО СтатусыЭН.СтатусЭН = КодыСтатусовТТН.Ссылка
		|		ПО (СтатусыЭН.ДокументРегистратор = ТаблицаЭН.Ссылка)
		|ГДЕ
		|	КодыСтатусовТТН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Отказ)
		|	И ВозвратЭН.Ссылка ЕСТЬ NULL
		|	И &ВсеДокументы
		|	И НЕ ТаблицаЭН.ПереадресацияНакладная";
	
	//СЮП 20.02.2024 01.07.27 https://awdev.atlassian.net/browse/RETAIL1C-653
	Запрос.УстановитьПараметр("НомерЭН", НомерЭН);
	Запрос.УстановитьПараметр("ВсеДокументы", ПустаяСтрока(НомерЭН));
	Запрос.УстановитьПараметр("НоваяТТН", НоваяТТН);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	МассивЗапросов = Новый Массив();

	КоличествоЭлементов = 0;
	КоличествоДокументов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если ПустаяСтрока(Выборка.Номер) Тогда
			Продолжить;
		КонецЕсли;

		Если КоличествоДокументов = 0 Тогда
			МассивЗапросов.Добавить("");
		КонецЕсли;

		МассивЗапросов[КоличествоЭлементов] = МассивЗапросов[КоличествоЭлементов]
			+ "<item><DocumentNumber>"
			+ СокрЛП(Выборка.Номер)
			+ "</DocumentNumber></item>" + Символы.ПС;

		КоличествоДокументов = КоличествоДокументов + 1;

		Если КоличествоДокументов = 100 Тогда
			КоличествоЭлементов = КоличествоЭлементов + 1;
			КоличествоДокументов = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаМассива Из МассивЗапросов Цикл

		ТекстЗапроса = "<?xml version=""1.0"" encoding=""UTF-8""?>
		|<root>
		|<apiKey>"+ТекущийКлюч+"</apiKey>
		|<modelName>TrackingDocument</modelName>
		|<calledMethod>getStatusDocuments</calledMethod>
		|<methodProperties>
		|<Documents>";
	
		ТекстЗапроса = ТекстЗапроса + СтрокаМассива;
	
		ТекстЗапроса = ТекстЗапроса	+
		"</Documents>
		|</methodProperties>
		|</root>";

		ДокументДом  = ПолучитьОтветДОМ(ТочкаВхода,ТекстЗапроса);
		Если  ДокументДом = Неопределено тогда
			// Сделать запись в журнал
		КонецЕсли;
		
		Если не ЭтоУспех(ДокументДом) тогда
			ТекстИсключения = ВернутьЕрор(ДокументДом);
			// Сделать запись в журнал
		Иначе
			
			РаспарситьОтвет("Обработать_getStatusDocuments", ДокументДом, Результат, "getStatusDocuments", ПараметрыМетода);
		КонецЕсли;

	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция Обработать_getDocumentList(ЭлементДом, Результат, Владелец, Параметры)
	
	СтруктураПараметров = ПараметрыЗаписи();
	СтруктураПараметров.Вставить("Тестовый", Параметры.Тестовый);
	СтруктураПараметров.Вставить("ДокументОснование", "");
	СтруктураПараметров.Вставить("КлючАПИ", Параметры.КлючАПИ);

	Пока не ЭлементДом = неопределено цикл
			
		Попытка
			Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла) тогда
				СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);
			Иначе
				Текст = "Ошибка getDocumentList"; 
				// сделать запись в журнал
				ВызватьИсключение Текст;	 
			КонецЕсли;	
			
		Исключение
			Текст = "Ошибка getDocumentList";
			// сделать запись в журнал			
			ВызватьИсключение Текст;	 
		КонецПопытки;
		
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	СоздатьЭН(СтруктураПараметров);	
	
КонецФункции     

Функция Обработать_getStatusDocuments(ЭлементДом, Результат, ТаблицаРегистра, Параметры)

	ЭНСоответствие = Новый Соответствие();
	ЭНСоответствие.Вставить("Number", "Номер");
	ЭНСоответствие.Вставить("Status", "Статус");
	ЭНСоответствие.Вставить("StatusCode", "КодСтатуса");
	ЭНСоответствие.Вставить("LastCreatedOnTheBasisNumber", "НомерВозратнойНакладной");
	ЭНСоответствие.Вставить("RefCityRecipient", "ГородПолучателяИдентификатор");
	ЭНСоответствие.Вставить("RefCitySender", "ГородОтправителяИдентификатор");
	ЭНСоответствие.Вставить("ServiceType", "МестоДоставкиПосылки");
	
	СтруктураНакладной = Новый Структура;
	Для Каждого СтрокаСоответствия Из ЭНСоответствие Цикл

		СтруктураНакладной.Вставить(СтрокаСоответствия.Значение);

	КонецЦикла;

	Пока Не ЭлементДом = Неопределено Цикл
		
		ЗначениеСоответствия = ЭНСоответствие.Получить(ЭлементДом.ИмяУзла);
		
		Если Не ЗначениеСоответствия = Неопределено Тогда

			СтруктураНакладной.Вставить(ЗначениеСоответствия, ЭлементДом.ТекстовоеСодержимое);
			
		КонецЕсли;

		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	
	Результат = СтруктураНакладной;

	ТекДата = ТекущаяДатаСеанса();	

	СтруктураСтатуса = Новый Структура;
	СтруктураСтатуса.Вставить("Номер", СтруктураНакладной.Номер);
	СтруктураСтатуса.Вставить("КодСтатуса", СтруктураНакладной.КодСтатуса);
	СтруктураСтатуса.Вставить("Наименование", СтруктураНакладной.Статус);
	СтруктураСтатуса.Вставить("ОператорДоставки", Перечисления.ОператорыДоставки.НоваяПочта);
	
	СтатусТТН = Справочники.КодыСтатусовТТН.ПолучитьСтатус(СтруктураСтатуса);
	Если СтатусТТН.НеЗаписывать Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаНакладной.Ссылка КАК Ссылка,
		|	СтатусыЭНСрезПоследних.СтатусЭН КАК СтатусЭН,
		|	ТаблицаНакладной.Реестр КАК Реестр,
		|	ЕСТЬNULL(ТаблицаЗаказа.Ответственный, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Ответственный,
		|	ЕСТЬNULL(ТаблицаЗаказа.Номер, """") КАК НомерЗаказа,
		|	ЕСТЬNULL(ТаблицаЗапроса.Номер, """") КАК НомерЗапроса,
		|	ТаблицаНакладной.Номер КАК Номер,
		|	ТаблицаНакладной.ВозвратнаяНакладная КАК ВозвратнаяНакладная,
		|	ТаблицаНакладной.ПереадресацияНакладная КАК ПереадресацияНакладная
		|ИЗ
		|	Документ.ЭлектроннаяНакладная КАК ТаблицаНакладной
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЭН.СрезПоследних КАК СтатусыЭНСрезПоследних
		|		ПО СтатусыЭНСрезПоследних.ДокументРегистратор = ТаблицаНакладной.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ТаблицаЗаказа
		|		ПО ТаблицаНакладной.ЗаказПокупателя = ТаблицаЗаказа.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров КАК ТаблицаЗапроса
		|		ПО ТаблицаНакладной.ДокументОснование = ТаблицаЗапроса.Ссылка
		|ГДЕ
		|	ТаблицаНакладной.ОператорДоставки = &ОператорДоставки
		|	И ТаблицаНакладной.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Номер", СтруктураНакладной.Номер);
	Запрос.УстановитьПараметр("ОператорДоставки", Перечисления.ОператорыДоставки.НоваяПочта);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.СтатусЭН = СтатусТТН.СсылкаКодСтатуса Тогда

			РегистрыСведений.СтатусыЭН.ЗаписьСтатуса(Выборка.Ссылка, СтатусТТН.СсылкаКодСтатуса);
				
			Если СтатусТТН.СтатусПосылки = Перечисления.СтатусыПосылокСлужбыДоставки.ВДороге Тогда
				
				Если Не Выборка.Реестр.Пустая() Тогда
					
					ПолучитьФайлРеестра(Выборка.Реестр);
					
				КонецЕсли;

			КонецЕсли; 

			Если СтатусТТН.СтатусПосылки = Перечисления.СтатусыПосылокСлужбыДоставки.Получена
					Или СтатусТТН.СтатусПосылки = Перечисления.СтатусыПосылокСлужбыДоставки.Отказ
					Или СтатусТТН.СтатусПосылки = Перечисления.СтатусыПосылокСлужбыДоставки.Отменена Тогда
						
				Соединение = Новый HTTPСоединение("cbone.antoshka.ua",,,,,,Новый ЗащищенноеСоединениеOpenSSL);
				HTTPЗапрос = Новый HTTPЗапрос("del/" + СокрЛП(СтруктураНакладной.Номер));
				ОтветHTTP = Соединение.Получить(HTTPЗапрос); // финал	

			КонецЕсли; 

		КонецЕсли;

		Если Не ПустаяСтрока(СтруктураНакладной.НомерВозратнойНакладной)
				И Не Параметры.Возвратная Тогда
			
			ПараметрыДляЗаписи = ПараметрыЗаписи();
			ПараметрыДляЗаписи.Вставить("StateId", СтруктураНакладной.КодСтатуса);
			ПараметрыДляЗаписи.Вставить("StateName", СтруктураНакладной.Статус);
			ПараметрыДляЗаписи.Вставить("Ref", "");
			ПараметрыДляЗаписи.Вставить("IntDocNumber", СтруктураНакладной.НомерВозратнойНакладной);
			ПараметрыДляЗаписи.Вставить("CostOnSite", "");
			ПараметрыДляЗаписи.Вставить("PreferredDeliveryDate", "0001-01-01 00:00:00");
			ПараметрыДляЗаписи.Вставить("ДокументОснование", Выборка.Ссылка);
			ПараметрыДляЗаписи.Вставить("Тестовый", Параметры.Тестовый);
			ПараметрыДляЗаписи.Вставить("КлючАПИ", Параметры.КлючАПИ);
			ПараметрыДляЗаписи.Вставить("ОтказОтПолучения", СтатусТТН.СтатусПосылки = Перечисления.СтатусыПосылокСлужбыДоставки.Отказ);
			ПараметрыДляЗаписи.Вставить("Переадресация", СтатусТТН.СтатусПосылки = Перечисления.СтатусыПосылокСлужбыДоставки.Переадресация);

			СоздатьЭН(ПараметрыДляЗаписи);
	
		КонецЕсли;

	КонецЦикла;

КонецФункции	

Процедура СоздатьЭН(ПараметрыДляЗаписи)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектроннаяНакладная.Ссылка КАК Ссылка,
		|	ЭлектроннаяНакладная.ВозвратнаяНакладная КАК ВозвратнаяНакладная
		|ИЗ
		|	Документ.ЭлектроннаяНакладная КАК ЭлектроннаяНакладная
		|ГДЕ
		|	((ЭлектроннаяНакладная.ВнешняяСсылка = &ВнешняяСсылка
		|	И &ПоВнешнейСсылке
		|	ИЛИ ЭлектроннаяНакладная.Номер = &Номер
		|	И &ПоНомеру))
		|	И ЭлектроннаяНакладная.ОператорДоставки = &ОператорДоставки";
	
	Запрос.УстановитьПараметр("ВнешняяСсылка", ПараметрыДляЗаписи.Ref);
	Запрос.УстановитьПараметр("Номер", ПараметрыДляЗаписи.IntDocNumber);
	Запрос.УстановитьПараметр("ПоВнешнейСсылке", Не ПустаяСтрока(ПараметрыДляЗаписи.Ref));
	Запрос.УстановитьПараметр("ПоНомеру", Не ПустаяСтрока(ПараметрыДляЗаписи.IntDocNumber));
	Запрос.УстановитьПараметр("ОператорДоставки", Перечисления.ОператорыДоставки.НоваяПочта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЭлектроннаяНакладная = Выборка.Ссылка;
		ВозвратнаяНакладная = Выборка.ВозвратнаяНакладная;
		
	Иначе
		
		СтруктураОтветаЭН = СтруктураОтветаПоЭНИнициализация(Документы.ЗапросДоступностиТоваров.ПустаяСсылка());
		СтруктураОтветаЭН.НомерТТН		 	= ПараметрыДляЗаписи.IntDocNumber;
		СтруктураОтветаЭН.ТТНRef		 	= ПараметрыДляЗаписи.Ref;
		ПреобразованнаяДата = СтрЗаменить(ПараметрыДляЗаписи.PreferredDeliveryDate, "-", "");
		ПреобразованнаяДата = СтрЗаменить(ПреобразованнаяДата, " ", "");
		ПреобразованнаяДата = СтрЗаменить(ПреобразованнаяДата, ":", "");
		СтруктураОтветаЭН.ДатаДоставки	 	= Дата(ПреобразованнаяДата);
		СтруктураОтветаЭН.ОтказОтПолучения = ПараметрыДляЗаписи.ОтказОтПолучения;
		СтруктураОтветаЭН.Переадресация = ПараметрыДляЗаписи.Переадресация;
		СтруктураОтветаЭН.СуммаОтОператора 	= ?(ПараметрыДляЗаписи.CostOnSite = "",
													0,
													Число(ПараметрыДляЗаписи.CostOnSite));
		
		Если Не ПустаяСтрока(ПараметрыДляЗаписи.ДокументОснование) Тогда
			
			СтруктураОтветаЭН.ДокументДляТТН 	= ПараметрыДляЗаписи.ДокументОснование;
			
		КонецЕсли;
	
		ЭлектроннаяНакладная = СоздатьДокументЭН(СтруктураОтветаЭН);
		ВозвратнаяНакладная = ПараметрыДляЗаписи.ОтказОтПолучения;
		
	КонецЕсли;
	
	Если ПараметрыДляЗаписи.ОтказОтПолучения И ВозвратнаяНакладная Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВозвратИнтернетЗаказа.Ссылка
			|ИЗ
			|	Документ.ВозвратИнтернетЗаказа КАК ВозвратИнтернетЗаказа
			|ГДЕ
			|	ВозвратИнтернетЗаказа.ЭлектроннаяНакладная = &ЭлектроннаяНакладная";
		
		Запрос.УстановитьПараметр("ЭлектроннаяНакладная", ЭлектроннаяНакладная);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			
			Попытка
				
				НовыйДокумент = Документы.ВозвратИнтернетЗаказа.СоздатьДокумент();
				НовыйДокумент.Заполнить(ЭлектроннаяНакладная);
				НовыйДокумент.Записать();
	
			Исключение
					
				ТекстОшибки = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("Создание возвратной накладной"
					, УровеньЖурналаРегистрации.Ошибка
					, Метаданные.Документы.ВозвратИнтернетЗаказа
					, ЭлектроннаяНакладная
					, ТекстОшибки
				);

			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ПроверитьОбъемныйВес(ДокументПроверки, Отделение) Экспорт 

	//СЮП 12.02.2024 09.41.40 
	//https://awdev.atlassian.net/browse/RETAIL1C-646
	Если ЗначениеЗаполнено(Отделение) Тогда

		ДанныеОВесе = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Отделение, "МаксимальныйВесМеста,ОбщийМаксимальныйВес");
		МаксимальныйВесОтделения = Макс(ДанныеОВесе.МаксимальныйВесМеста, ДанныеОВесе.ОбщийМаксимальныйВес);

	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Если МаксимальныйВесОтделения = 0 Тогда
		
		Возврат Ложь;

	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗапросДоступностиТоваровУпаковки.Ширина / 100 * (ЗапросДоступностиТоваровУпаковки.Высота / 100) *
		|		(ЗапросДоступностиТоваровУпаковки.Глубина / 100) * 250 КАК Вес
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров.Упаковки КАК ЗапросДоступностиТоваровУпаковки
		|ГДЕ
		|	ЗапросДоступностиТоваровУпаковки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументПроверки.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда 
		Возврат Истина;
	КонецЕсли;

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Вес > МаксимальныйВесОтделения тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;

	Возврат Ложь;
КонецФункции

Функция ПроверитьРедактирование(НомерДок,Телефон) Экспорт
	КлючAPI = ОбменНПСлужебный.ПолучитьКлючAPI();
	Если СокрЛП(КлючAPI) = "" Тогда
		Сообщить("Не внесен ключ API, функционал недоступен!");
		Возврат 0;
	КонецЕсли;
	ТекстЗапроса = "<file>
	|<apiKey>"+СокрЛП(КлючAPI)+"</apiKey>
	|<modelName>TrackingDocument</modelName>
	|<calledMethod>getStatusDocuments</calledMethod>
	|<methodProperties>
	|<Documents>
	|<item>
	|<DocumentNumber>"+СокрЛП(НомерДок)+"</DocumentNumber>
	|<Phone>"+СокрЛП(Телефон)+"</Phone>
	|</item>
	|</Documents>
	|</methodProperties>
	|</file>";
	Ответ=GetXMLResponserNewPost(ТекстЗапроса);
	Если СтрЧислоВхождений(Ответ,"<StatusCode>1</StatusCode>") Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция УдалитьНакладную(НомерНакладнойRef) Экспорт
	ТочкаВхода = ОбменНПСлужебный.ПолучитьТочкуВхода();
	ПараметрыМетода = Новый Структура;

	КлючAPI = ОбменНПСлужебный.ПолучитьКлючAPI();
	Если СокрЛП(КлючAPI) = "" Тогда

		Сообщить("Не внесен ключ API, функционал недоступен!");
		Результат = "";
	
	Иначе

		ТекстЗапроса = 
		"<?xml version=""1.0"" encoding=""UTF-8""?>
		|<root>
		|<apiKey>"+СокрЛП(КлючAPI)+"</apiKey>
		|<modelName>InternetDocument</modelName>
		|<calledMethod>delete</calledMethod>
		|<methodProperties>
		|<DocumentRefs>
		|<item>"+СокрЛП(НомерНакладнойRef)+"</item>
		|</DocumentRefs>
		|</methodProperties>
		|</root>";
		ДокументДом  = ПолучитьОтветДОМ(ТочкаВхода,ТекстЗапроса);
		Если ДокументДом = Неопределено тогда
			Сообщить("Ошибка при получении ответа, метод: insertDocumentsScanSheet");
		КонецЕсли;
		Если не  ЭтоУспех(ДокументДом) тогда
			ТекстИсключения = ВернутьЕрор(ДокументДом);
			Сообщить(ТекстИсключения+" deleteDoc");
		КонецЕсли;
		лВыполняемаяобработка = ПолучитьПроцедуруПоМетоду("deleteDoc");
		Если не ЗначениеЗаполнено(лВыполняемаяобработка) тогда
			Сообщить(ТекстИсключения = "Не назначен обработчик методу: deleteDoc");
		КонецЕсли;
		Результат = "";
		РаспарситьОтвет(лВыполняемаяобработка, ДокументДом,Результат, "deleteDoc",ПараметрыМетода);
	
	КонецЕсли;	

	Возврат Результат;

КонецФункции

Функция Обработать_deleteDoc(ЭлементДом, Результат, ТаблицаРегистра,Параметры)

	Пока не ЭлементДом = неопределено цикл

		Если ЭлементДом.ИмяУзла = "Ref" Тогда
			Результат = ЭлементДом.ТекстовоеСодержимое;
		КонецЕсли;

		ЭлементДом = ЭлементДом.СледующийСоседний; 

	КонецЦикла;

КонецФункции

Функция Обработать_getMessageCodeText(ЭлементДом, Результат, Владелец, Параметры)	
	Итем = ЭлементДом;
	пока Не Итем = Неопределено Цикл
		СтруктураПараметров = новый Структура;
		Элемент = Итем.ПервыйДочерний;
		Пока Не Элемент = Неопределено Цикл
			Если не СтруктураПараметров.Свойство(Элемент.ИмяУзла) тогда
				СтруктураПараметров.Вставить(Строка(Элемент.ИмяУзла),Элемент.ТекстовоеСодержимое);
			Иначе
				Текст = "Ошибка getMessageCodeText";
				ВызватьИсключение Текст;	 
			КонецЕсли;	 
			
			Элемент = Элемент.СледующийСоседний; 
		КонецЦикла;

		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КодыОшибокСлужбыДоставки.Ссылка
			|ИЗ
			|	Справочник.КодыОшибокСлужбыДоставки КАК КодыОшибокСлужбыДоставки
			|ГДЕ
			|	КодыОшибокСлужбыДоставки.Код = &Код
			|	И КодыОшибокСлужбыДоставки.ОператорДоставки = &ОператорДоставки";
		
		Запрос.УстановитьПараметр("Код", СтруктураПараметров.MessageCode);
		Запрос.УстановитьПараметр("ОператорДоставки", Перечисления.ОператорыДоставки.НоваяПочта);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЭлементСправочника = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			ЭлементСправочника = Справочники.КодыОшибокСлужбыДоставки.СоздатьЭлемент();
		КонецЕсли;
		
		Если Не ЭлементСправочника.ТекстUk = СтруктураПараметров.MessageDescriptionUA Тогда
			
			ЭлементСправочника.Код = СтруктураПараметров.MessageCode;
			ЭлементСправочника.ТекстEn = СтруктураПараметров.MessageText;
			ЭлементСправочника.ТекстUk = СтруктураПараметров.MessageDescriptionUA;
			ЭлементСправочника.ТекстRu = СтруктураПараметров.MessageDescriptionRU;
			ЭлементСправочника.ОператорДоставки = Перечисления.ОператорыДоставки.НоваяПочта;
			ЭлементСправочника.Записать();
			
		КонецЕсли;

		Итем = Итем.СледующийСоседний;
	КонецЦикла;

КонецФункции

Функция ПолучитьСтатусЭН(СсылкаНаЭН) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СтатусЭН", Справочники.КодыСтатусовТТН.ПустаяСсылка());
	Результат.Вставить("СтатусСлужбыДоставки", Перечисления.СтатусыПосылокСлужбыДоставки.ПустаяСсылка());

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СтатусыЭНСрезПоследних.СтатусЭН КАК СтатусЭН,
		|	СтатусыЭНСрезПоследних.СтатусЭН.СтатусПосылки КАК СтатусСлужбыДоставки
		|ИЗ
		|	РегистрСведений.СтатусыЭН.СрезПоследних(, ДокументРегистратор = &ДокументРегистратор) КАК СтатусыЭНСрезПоследних";
	
	Запрос.УстановитьПараметр("ДокументРегистратор", СсылкаНаЭН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Результат.СтатусЭН = Выборка.СтатусЭН;
		Результат.СтатусСлужбыДоставки = Выборка.СтатусСлужбыДоставки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗапрос_insertDocumentsScanSheet(ПараметрыМетода)
	
	Если ПараметрыМетода.Свойство("РефРеестра") Тогда
		Реф = "
		|<Ref>"+СокрЛП(ПараметрыМетода.РефРеестра)+"</Ref>";
	Иначе
		Реф = "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|<apiKey>"+ ПараметрыМетода.API20+"</apiKey>
	|<modelName>ScanSheet</modelName>
	|<calledMethod>insertDocuments</calledMethod>
	|<methodProperties>"+Реф+"
	|<DocumentRefs>";
	ТекстЗапроса = ТекстЗапроса + "<item>" + ПараметрыМетода.ЕНРеф + "</item>" + Символы.ПС;
	ТекстЗапроса = ТекстЗапроса	+
	"</DocumentRefs>
	|</methodProperties>
	|</file>";
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ДобавитьВРеестрЕН(СсылкаЕН, ЕНРеф, РефРеестра = Неопределено) Экспорт
	ТочкаВхода = ОбменНПСлужебный.ПолучитьТочкуВхода();
	ПараметрыМетода = Новый Структура;

	КлючAPI = ОбменНПСлужебный.ПолучитьКлючAPI();
	Если СокрЛП(КлючAPI) = "" Тогда

		Сообщить("Не внесен ключ API, функционал недоступен!");
		Результат = "";
	
	Иначе

		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("API20",КлючAPI);
		ПараметрыМетода.Вставить("ЕНРеф",ЕНРеф);
		ПараметрыМетода.Вставить("СсылкаЕН",СсылкаЕН);
		Если Не РефРеестра = Неопределено Тогда
			
			ПараметрыМетода.Вставить("РефРеестра",РефРеестра);
						
		КонецЕсли;

		ТекстЗапроса = ПолучитьЗапрос_insertDocumentsScanSheet(ПараметрыМетода);
		Ответ = "";
		ДокументДом  = ПолучитьОтветДОМ(ТочкаВхода,ТекстЗапроса,Ответ);
		Если  ДокументДом = Неопределено тогда
			Сообщить("Ошибка при получении ответа, метод: insertDocumentsScanSheet");
		КонецЕсли;
		Если Не ЭтоУспех(ДокументДом) тогда

			ТекстИсключения = ВернутьЕрор(ДокументДом);
			Сообщить(ТекстИсключения+" insertDocumentsScanSheet");

		Иначе
			
			СписокЭлементовData =  ДокументДом.ПолучитьЭлементыПоИмени("Data");	
			Для Каждого ТекЭлементСписокЭлементовData из СписокЭлементовData Цикл
				Если ЗначениеЗаполнено(ТекЭлементСписокЭлементовData.ТекстовоеСодержимое) Тогда
					СписокЭлементовDataNumber = ТекЭлементСписокЭлементовData.ПолучитьЭлементыПоИмени("Number");
					Если СписокЭлементовDataNumber.Количество() > 0 Тогда
						НомерРеестра = СокрЛП(СписокЭлементовDataNumber[0].ТекстовоеСодержимое);
						Если ПустаяСтрока(НомерРеестра) Тогда
							Сообщить(ответ);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			лВыполняемаяобработка = ПолучитьПроцедуруПоМетоду("insertDocumentsScanSheet");
			Если не ЗначениеЗаполнено(лВыполняемаяобработка) тогда
				Сообщить(ТекстИсключения = "Не назначен обработчик методу: insertDocumentsScanSheet");
			КонецЕсли;
			Результат = новый Структура();
			РаспарситьОтвет(лВыполняемаяобработка, ДокументДом,Результат, "insertDocumentsScanSheet",ПараметрыМетода);

		КонецЕсли;
		
		СписокЭлементовDOM  = ДокументДом.ПолучитьЭлементыПоИмени("Errors");		
		Если СписокЭлементовDOM.Количество() > 0 Тогда
			
			Для Каждого ТекЭлемент из СписокЭлементовDOM Цикл
				ТекстовоеСодержимое = ТекЭлемент.ТекстовоеСодержимое;
				Если ТекстовоеСодержимое <> "" Тогда

					ЭлементыИтем = ТекЭлемент.ПолучитьЭлементыПоИмени("item");
					
					Для Каждого ТекЭлементИтем из ЭлементыИтем Цикл
						
						ДочерниеЭлементыИтем = ТекЭлементИтем.ДочерниеУзлы;
						
						ТекстСообщения = "";
						
						Для каждого ТекЭлементДочерниеЭлементыИтем из ДочерниеЭлементыИтем Цикл
							//Если ТекЭлементДочерниеЭлементыИтем.ИмяЭлемента = "Error"
							//	или  ТекЭлементДочерниеЭлементыИтем.ИмяЭлемента = "Number" Тогда
							//	
								ТекстСообщения = ТекстСообщения + " "+ ТекЭлементДочерниеЭлементыИтем.ТекстовоеСодержимое;
							//КонецЕсли;
							
							
						КонецЦикла;
						
						Если ТекстСообщения <> "" Тогда
							Сообщить(ТекстСообщения);

						КонецЕсли;
						
					КонецЦикла;
					
					
				КонецЕсли;
			КонецЦикла;
		
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Функция Обработать_insertDocumentsScanSheet(ЭлементДом, Результат, ТаблицаРегистра,Параметры)
	
	Результат = Документы.РеестрЭН.ПустаяСсылка();

	ТабПараметров = Новый ТаблицаЗначений;
	ТабПараметров.Колонки.Добавить("RefРеестр");
	ТабПараметров.Колонки.Добавить("NumРеестр");
	ТабПараметров.Колонки.Добавить("RefТТН");
	ТабПараметров.Колонки.Добавить("NumТТН");
	RefРеестр = ЭлементДом.ТекстовоеСодержимое;
	NumРеестр = ЭлементДом.СледующийСоседний.ТекстовоеСодержимое;
	ДатаРеестр = ЭлементДом.СледующийСоседний.СледующийСоседний.ТекстовоеСодержимое;
	Пока не ЭлементДом = неопределено цикл
		Если ЭлементДом.ИмяУзла = "Success" Тогда // data
			Для Каждого Узел2 из ЭлементДом.ДочерниеУзлы Цикл
				Если Узел2.ИмяУзла ="item" Тогда
					RefТТН = "";
					NumТТН = "";
					Для Каждого ТТН из Узел2.ДочерниеУзлы Цикл
						Если ТТН.ИмяУзла = "Ref" Тогда
							RefТТН = ТТН.ТекстовоеСодержимое;
						ИначеЕсли  ТТН.ИмяУзла = "Number" Тогда
							NumТТН = ТТН.ТекстовоеСодержимое;
						КонецЕсли;
					КонецЦикла;
					СтрокаТаб = ТабПараметров.Добавить();
					СтрокаТаб.RefРеестр = RefРеестр;
					СтрокаТаб.NumРеестр = NumРеестр;
					СтрокаТаб.RefТТН = RefТТН;
					СтрокаТаб.NumТТН = NumТТН;
				КонецЕсли;
			КонецЦикла;
			//КонецЕсли;
			//КонецЦикла;
		КонецЕсли;
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;

	Если Не ТабПараметров.Количество() = 0 Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	РеестрЭН.Ссылка
			|ИЗ
			|	Документ.РеестрЭН КАК РеестрЭН
			|ГДЕ
			|	РеестрЭН.Номер = &Номер
			|	И РеестрЭН.ВнешняяСсылка = &ВнешняяСсылка";
		
		Запрос.УстановитьПараметр("Номер", СокрЛП(NumРеестр));
		Запрос.УстановитьПараметр("ВнешняяСсылка", СокрЛП(RefРеестр));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			ДокументРеестра = Выборка.Ссылка.ПолучитьОбъект();
			
		Иначе
			
			ДокументРеестра = Документы.РеестрЭН.СоздатьДокумент();
			ДокументРеестра.ВнешняяСсылка = RefРеестр;
			ДокументРеестра.Номер = NumРеестр;
			ДатаДок = СтрЗаменить(ДатаРеестр,"-","");
			ДатаДок = СтрЗаменить(ДатаДок," ","");
			ДатаДок = СтрЗаменить(ДатаДок,":","");
			ДокументРеестра.Дата = Дата(ДатаДок);
			ЗапросДоступности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.СсылкаЕН, "ДокументОснование");
			МагазинОтправитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗапросДоступности, "МагазинОтправитель");
			ДокументРеестра.МагазинСклад = МагазинОтправитель;
			ДокументРеестра.Записать();

		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	РеестрЭНСписокЭН.Ссылка
			|ИЗ
			|	Документ.РеестрЭН.СписокЭН КАК РеестрЭНСписокЭН
			|ГДЕ
			|	РеестрЭНСписокЭН.Ссылка = &Ссылка
			|	И РеестрЭНСписокЭН.ЭлектронныеНакладные = &ЭлектронныеНакладные";
		
		Запрос.УстановитьПараметр("ЭлектронныеНакладные", Параметры.СсылкаЕН);
		Запрос.УстановитьПараметр("Ссылка", ДокументРеестра.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если РезультатЗапроса.Пустой() Тогда
			СтрокаРеестра = ДокументРеестра.СписокЭН.Добавить();
			СтрокаРеестра.ЭлектронныеНакладные = Параметры.СсылкаЕН;
			
			ДокументРеестра.Записать();

		КонецЕсли;
		
		Результат = ДокументРеестра.Ссылка;

	КонецЕсли;
	
КонецФункции

Процедура УдалитьИзРеестра(СсылкаЕН, ЕНРеф) Экспорт
	ТочкаВхода = ОбменНПСлужебный.ПолучитьТочкуВхода();
	ПараметрыМетода = Новый Структура;

	КлючAPI = ОбменНПСлужебный.ПолучитьКлючAPI();
	Если СокрЛП(КлючAPI) = "" Тогда

		Сообщить("Не внесен ключ API, функционал недоступен!");
		Результат = "";
	
	Иначе

		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("API20",КлючAPI);
		ПараметрыМетода.Вставить("ЕНРеф",ЕНРеф);
		ПараметрыМетода.Вставить("СсылкаЕН", СсылкаЕН);

		ТекстЗапроса = ПолучитьЗапрос_removeDocuments(ПараметрыМетода);
		ДокументДом  = ПолучитьОтветДОМ(ТочкаВхода,ТекстЗапроса);
		Если  ДокументДом = Неопределено тогда
			Сообщить("Ошибка при получении ответа, метод: removeDocuments");
		КонецЕсли;
		Если не  ЭтоУспех(ДокументДом) тогда
			ТекстИсключения = ВернутьЕрор(ДокументДом);
			Сообщить(ТекстИсключения+" removeDocuments");
		КонецЕсли;
		лВыполняемаяобработка = ПолучитьПроцедуруПоМетоду("removeDocuments");
		Если не ЗначениеЗаполнено(лВыполняемаяобработка) тогда
			Сообщить(ТекстИсключения = "Не назначен обработчик методу: removeDocuments");
		КонецЕсли;
		Результат = новый Структура();
		РаспарситьОтвет(лВыполняемаяобработка, ДокументДом,Результат, "removeDocuments",ПараметрыМетода);
		
	КонецЕсли;

КонецПроцедуры	

Функция ПолучитьЗапрос_removeDocuments(ПараметрыМетода)
	
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|<apiKey>"+ ПараметрыМетода.API20+"</apiKey>
	|<modelName>ScanSheet</modelName>
	|<calledMethod>removeDocuments</calledMethod>
	|<methodProperties>
	|<DocumentRefs>";

	ТекстЗапроса = ТекстЗапроса + "<item>" + ПараметрыМетода.ЕНреф + "</item>" + Символы.ПС;

	ТекстЗапроса = ТекстЗапроса	+
	"</DocumentRefs>
	|</methodProperties>
	|</file>";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция Обработать_removeDocuments(ЭлементДом, Результат, ТаблицаРегистра,Параметры)

	ТабПараметров = Новый ТаблицаЗначений;
	ТабПараметров.Колонки.Добавить("RefРеестр");
	ТабПараметров.Колонки.Добавить("RefТТН");
	ТабПараметров.Колонки.Добавить("NumТТН");
	RefТТН = "";
	NumТТН = "";
	RefРеестр = "";
	Пока не ЭлементДом = неопределено цикл
		Если ЭлементДом.ИмяУзла = "Ref" Тогда
			RefТТН = ЭлементДом.ТекстовоеСодержимое;
		ИначеЕсли  ЭлементДом.ИмяУзла = "Number" Тогда
			NumТТН = ЭлементДом.ТекстовоеСодержимое;
		ИначеЕсли ЭлементДом.ИмяУзла = "Document" Тогда
			RefРеестр = ЭлементДом.ТекстовоеСодержимое;
		КонецЕсли;
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	СтрокаТаб = ТабПараметров.Добавить();
	СтрокаТаб.RefРеестр = RefРеестр;
	СтрокаТаб.RefТТН = RefТТН;
	СтрокаТаб.NumТТН = NumТТН;
	Если Не ТабПараметров.Количество() = 0 Тогда
		
		ДокументРеестрССылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.СсылкаЕН, "Реестр");
		Если Не ДокументРеестрССылка.Пустая() Тогда
			
			ДокументРеестр = ДокументРеестрССылка.ПолучитьОбъект();
			СтруктураДляПоиска = Новый Структура("ЭлектронныеНакладные", Параметры.СсылкаЕН);
			ТабличнаяЧастьДок = ДокументРеестр.СписокЭН;
			МассивСтрок = ТабличнаяЧастьДок.НайтиСтроки(СтруктураДляПоиска);
			Для Каждого Строка Из МассивСтрок Цикл
				ТабличнаяЧастьДок.Удалить(Строка);
			КонецЦикла; 
			ДокументРеестр.Записать();
		КонецЕсли;

	КонецЕсли;

КонецФункции

Функция ПолучитьФайлРеестра(РеестрСсылка) Экспорт
	
	ДокументРеестра = РеестрСсылка.ПолучитьОбъект();
	ДокументРеестра.Напечатан = Истина;
	ДокументРеестра.Записать();
	
	RefРеестр = ДокументРеестра.ВнешняяСсылка;

	ЕстьДокументыВРеестре = Ложь;
	
	Результат = Новый Структура("ЕстьДокумет, СсылкаНаДокумент", Ложь, "");
	
	КлючAPI = ОбменНПСлужебный.ПолучитьКлючAPI();
	Если СокрЛП(КлючAPI) = "" Тогда

		Сообщить("Не внесен ключ API, функционал недоступен!");

	Иначе
		ТекстЗапроса = 
		"<file>
		|<apiKey>"+СокрЛП(КлючAPI)+"</apiKey>
		|<modelName>ScanSheet</modelName>
		|<calledMethod>getScanSheet</calledMethod>
		|<methodProperties>
		|<Ref>"+СокрЛП(RefРеестр)+"</Ref>
		|</methodProperties>
		|</file>";
		Ответ=GetXMLResponserNewPost(ТекстЗапроса);
		Если СтрЧислоВхождений(Ответ,"<success>true</success>") Тогда
			Чтение=новый ЧтениеXML;
			Чтение.УстановитьСтроку(Ответ);
			Пока Чтение.Прочитать() Цикл
				Если чтение.Имя="Count" and чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента тогда
					чтение.Прочитать();
					ЕстьДокументыВРеестре = Не (Число(чтение.Значение) = 0);
				КонецЕсли;
			Конеццикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьДокументыВРеестре Тогда
		Результат.ЕстьДокумет = Истина;
		Результат.СсылкаНаДокумент = "https://my.novaposhta.ua/scanSheet/printScanSheet/refs[]/"
									 + СокрЛП(RefРеестр)
									 + "/type/pdf/apiKey/"
									 + СокрЛП(КлючAPI);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции	

Функция ГородАвтоПодбор(Текст) Экспорт

    СписокВыбора = Новый СписокЗначений;
    
    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
    |	ГородаДоставки.Ссылка КАК Ссылка,
    |	ГородаДоставки.Наименование КАК Наименование,
    |	ГородаДоставки.Область КАК Область
    |ИЗ
    |	Справочник.ГородаДоставки КАК ГородаДоставки
    |ГДЕ
    |	ГородаДоставки.Наименование ПОДОБНО &Текст
    |	ИЛИ ГородаДоставки.НаименованиеRU ПОДОБНО &Текст
    |
    |УПОРЯДОЧИТЬ ПО
    |	Наименование";
    Запрос.УстановитьПараметр("Текст", Текст+"%");
    
    Выборка = Запрос.Выполнить().Выбрать();
    Пока Выборка.Следующий() Цикл
    	
    	ПредставлениеГорода = Выборка.Наименование+" (Область - "+Выборка.Область+")";
        СписокВыбора.Добавить(Выборка.Ссылка, ПредставлениеГорода);    
    
    КонецЦикла; 
    
    Возврат СписокВыбора;

КонецФункции

Функция ОтделениеАвтоПодбор(Текст, Город) Экспорт
	
	СписокВыбора = Новый СписокЗначений;
    
    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
    |	Отделения.Ссылка КАК Ссылка,
    |	Отделения.НаименованиеRU КАК НаименованиеRU,
    |	Отделения.Наименование КАК Наименование
    |ИЗ
    |	Справочник.Отделения КАК Отделения
    |ГДЕ
    |	Отделения.Работает
    |	И (Отделения.НомерОтделения ПОДОБНО &Текст
    |	ИЛИ Отделения.НаименованиеRU ПОДОБНО &Текст
    |	ИЛИ Отделения.Наименование ПОДОБНО &Текст)
    |	И (Отделения.Город = &Город)
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	Почтоматы.Ссылка,
    |	Почтоматы.НаименованиеRU,
    |	Почтоматы.Наименование
    |ИЗ
    |	Справочник.Почтоматы КАК Почтоматы
    |ГДЕ
    |	Почтоматы.Работает
    |	И (Почтоматы.НомерОтделения ПОДОБНО &Текст
    |	ИЛИ Почтоматы.НаименованиеRU ПОДОБНО &Текст
    |	ИЛИ Почтоматы.Наименование ПОДОБНО &Текст)
    |	И (Почтоматы.Город = &Город)
    |
    |УПОРЯДОЧИТЬ ПО
    |	Наименование";
    Запрос.УстановитьПараметр("Текст", "%"+Текст+"%");
    Запрос.УстановитьПараметр("Город", Город );
    Выборка = Запрос.Выполнить().Выбрать();
    Пока Выборка.Следующий() Цикл
    	
    	ПредставлениеОтделения = Выборка.Наименование;
        СписокВыбора.Добавить(Выборка.Ссылка, ПредставлениеОтделения);    
    
    КонецЦикла; 
    
    Возврат СписокВыбора;
КонецФункции

Функция УлицаАвтоПодбор(Текст, Город) Экспорт

	СписокВыбора = Новый СписокЗначений;

    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
    |	Улицы.Ссылка КАК Ссылка,
    |	Улицы.Наименование КАК Наименование,
    |	ГородаДоставки.Область КАК Область
    |ИЗ
    |	Справочник.Улицы КАК Улицы
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГородаДоставки КАК ГородаДоставки
    |		ПО Улицы.Город = ГородаДоставки.Ссылка
    |ГДЕ
    |	ГородаДоставки.Ссылка = &Ссылка
    |	И (Улицы.Наименование ПОДОБНО &Текст
    |	ИЛИ Улицы.НаименованиеRU ПОДОБНО &Текст)
    |
    |УПОРЯДОЧИТЬ ПО
    |	Наименование";
 
    Запрос.УстановитьПараметр("Текст", "%"+Текст+"%");
    Запрос.УстановитьПараметр("Ссылка", Город);
    
    Выборка = Запрос.Выполнить().Выбрать();
    Пока Выборка.Следующий() Цикл
    	
    	ПредставлениеУлицы = Выборка.Наименование+" (Область - "+Выборка.Область+")";
        СписокВыбора.Добавить(Выборка.Ссылка, ПредставлениеУлицы);    
    
    КонецЦикла; 
    
    Возврат СписокВыбора;

КонецФункции

Функция АдресКонтрагентаЗаписать(ПараметрыАдреса) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ТектОшибки", "");
	Результат.Вставить("АдресИнд", "");
	Результат.Вставить("Адрес", "");
	
	КлючAPI = ОбменНПСлужебный.ПолучитьКлючAPI();
	Если СокрЛП(КлючAPI) = "" Тогда
		
		Результат.ТектОшибки = "Не внесен ключ API, функционал недоступен!";
		Результат.Ошибка = Истина;

	Иначе
	
		Если СокрЛП(ПараметрыАдреса.АдресИнд) = "" Тогда
			ТекстЗАпроса = "<?xml version=""1.0"" encoding=""UTF-8"" ?>
			|<file>
			|<apiKey>"+СокрЛП(КлючAPI)+"</apiKey>
			|<calledMethod>save</calledMethod>
			|<methodProperties>
			|<CounterpartyRef>"+СокрЛП(ПараметрыАдреса.Контрагент)+"</CounterpartyRef>
			|<StreetRef>"+СокрЛП(ПараметрыАдреса.ИДУлицы)+"</StreetRef>
			|<BuildingNumber>"+СокрЛП(ПараметрыАдреса.Дом)+"</BuildingNumber>
			|<Flat>"+СокрЛП(ПараметрыАдреса.Квартира)+"</Flat>
			|<Note>"+СокрЛП(ПараметрыАдреса.Примечание)+"</Note>
			|</methodProperties>
			|<modelName>Address</modelName>
			|</file>
			|";
		Иначе
			ТекстЗАпроса = "<?xml version=""1.0"" encoding=""UTF-8"" ?>
			|<file>
			|<apiKey>"+СокрЛП(КлючAPI)+"</apiKey>
			|<calledMethod>update</calledMethod>
			|<methodProperties>
			|<CounterpartyRef>"+СокрЛП(ПараметрыАдреса.Контрагент)+"</CounterpartyRef>
			|<StreetRef>"+СокрЛП(ПараметрыАдреса.ИДУлицы)+"</StreetRef>
			|<BuildingNumber>"+СокрЛП(ПараметрыАдреса.Дом)+"</BuildingNumber>
			|<Flat>"+СокрЛП(ПараметрыАдреса.Квартира)+"</Flat>
			|<Note>"+СокрЛП(ПараметрыАдреса.Примечание)+"</Note>
			|<Ref>"+СокрЛП(ПараметрыАдреса.АдресИнд)+"</Ref>
			|</methodProperties>
			|<modelName>Address</modelName>
			|</file>
			|";
		КонецЕсли;
		Ответ=GetXMLResponserNewPost(ТекстЗапроса);
		Если СтрЧислоВхождений(Ответ,"<success>true</success>") > 0 Тогда
			Чтение = Новый ЧтениеXML;
			Чтение.УстановитьСтроку(Ответ);
			Пока(Чтение.Прочитать()) Цикл
				Если Чтение.Имя="Ref" И Чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
					Чтение.Прочитать();
					Результат.АдресИнд=СокрЛП(Чтение.Значение);
				ИначеЕсли Чтение.Имя="Description" И Чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
					Чтение.Прочитать();
					Результат.Адрес = СокрЛП(Чтение.Значение);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Результат.ТектОшибки = СформироватьТекстОшибки(Ответ);
			Результат.Ошибка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция КонтактноеЛицоКонтрагентаЗаписать(ПараметрыКонтактноеЛицо) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ТектОшибки", "");
	Результат.Вставить("КонтактИнд", "");
	Результат.Вставить("КонтактноеЛицо", "");
	
	КлючAPI = ОбменНПСлужебный.ПолучитьКлючAPI();
	Если СокрЛП(КлючAPI) = "" Тогда
		
		Результат.ТектОшибки = "Не внесен ключ API, функционал недоступен!";
		Результат.Ошибка = Истина;

	Иначе
		Если СокрЛП(ПараметрыКонтактноеЛицо.КонтактИнд) = "" Тогда
			ТекстЗАпроса = "<?xml version=""1.0"" encoding=""UTF-8"" ?>
			|<file>
			|<apiKey>"+СокрЛП(КлючAPI)+"</apiKey>
			|<calledMethod>save</calledMethod>
			|<methodProperties>
			|<CounterpartyRef>"+СокрЛП(ПараметрыКонтактноеЛицо.Контрагент)+"</CounterpartyRef>
			|<Email>"+СокрЛП(ПараметрыКонтактноеЛицо.Email)+"</Email>
			|<FirstName>"+СокрЛП(ПараметрыКонтактноеЛицо.Имя)+"</FirstName>
			|<LastName>"+СокрЛП(ПараметрыКонтактноеЛицо.Фамилия)+"</LastName>
			|<MiddleName>"+СокрЛП(ПараметрыКонтактноеЛицо.Отчество)+"</MiddleName>
			|<Phone>"+СокрЛП(ПараметрыКонтактноеЛицо.Телефон)+"</Phone>
			|</methodProperties>
			|<modelName>ContactPerson</modelName>
			|</file>
			|";
		Иначе
			ТекстЗАпроса = "<?xml version=""1.0"" encoding=""UTF-8"" ?>
			|<file>
			|<apiKey>"+СокрЛП(КлючAPI)+"</apiKey>
			|<calledMethod>update</calledMethod>
			|<methodProperties>
			|<CounterpartyRef>"+СокрЛП(ПараметрыКонтактноеЛицо.Контрагент)+"</CounterpartyRef>
			|<Email>"+СокрЛП(ПараметрыКонтактноеЛицо.Email)+"</Email>
			|<FirstName>"+СокрЛП(ПараметрыКонтактноеЛицо.Имя)+"</FirstName>
			|<LastName>"+СокрЛП(ПараметрыКонтактноеЛицо.Фамилия)+"</LastName>
			|<MiddleName>"+СокрЛП(ПараметрыКонтактноеЛицо.Отчество)+"</MiddleName>
			|<Phone>"+СокрЛП(ПараметрыКонтактноеЛицо.Телефон)+"</Phone>
			|<Ref>"+СокрЛП(ПараметрыКонтактноеЛицо.КонтактИнд)+"</Ref>
			|</methodProperties>
			|<modelName>ContactPerson</modelName>
			|</file>
			|";
		КонецЕсли;
		Ответ=GetXMLResponserNewPost(ТекстЗапроса);
		Если СтрЧислоВхождений(Ответ,"<success>true</success>") > 0 Тогда
			Чтение = Новый ЧтениеXML;
			Чтение.УстановитьСтроку(Ответ);
			Пока(Чтение.Прочитать()) Цикл
				Если Чтение.Имя="Ref" И Чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
					Чтение.Прочитать();
					Результат.КонтактИнд=СокрЛП(Чтение.Значение);
				ИначеЕсли Чтение.Имя="Description" И Чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
					Чтение.Прочитать();
					Результат.КонтактноеЛицо = СокрЛП(Чтение.Значение);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Результат.ТектОшибки = СформироватьТекстОшибки(Ответ);
			Результат.Ошибка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыЗаписи()
	
	Результат = Новый Структура;
	Результат.Вставить("StateId", "");
	Результат.Вставить("StateName", "");
	Результат.Вставить("Ref", "");
	Результат.Вставить("IntDocNumber", "");
	Результат.Вставить("CostOnSite", "");
	Результат.Вставить("PreferredDeliveryDate", "0001-01-01 00:00:00");
	Результат.Вставить("ДокументОснование", "");
	Результат.Вставить("Тестовый", Ложь);
	Результат.Вставить("КлючАПИ", Неопределено);
	Результат.Вставить("ОтказОтПолучения", Ложь);
	Результат.Вставить("Переадресация", Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура ВызовМашины() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаНастроек.Магазин КАК Магазин,
		|	ТаблицаНастроек.КоличествоНакладныхДляМашины КАК КоличествоНакладныхДляМашины,
		|	РеестрЭН.Ссылка КАК Реестр,
		|	ТаблицаНастроек.Контрагент.Идентификатор КАК КонтрагентИдентификатор,
		|	ТаблицаНастроек.Город.Идентификатор КАК ГородИдентификатор,
		|	ТаблицаНастроек.КонтактноеЛицо.Идентификатор КАК КонтактноеЛицоИдентификатор,
		|	ТаблицаНастроек.НомерТелефона КАК НомерТелефона,
		|	ТаблицаНастроек.Улица.Идентификатор КАК УлицаИдентификатор,
		|	ТаблицаНастроек.НомерДома КАК НомерДома,
		|	РеестрЭН.ВнешняяСсылка КАК РеестрИдентификатор,
		|	ВЫБОР
		|		КОГДА ТаблицаВызова.НомерВызова ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК МашинаВызвана,
		|	ТаблицаНастроек.ОператорДоставки
		|ПОМЕСТИТЬ ВызыватьМашину
		|ИЗ
		|	РегистрСведений.НастройкиСлужбДоставки КАК ТаблицаНастроек
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВызовМашины КАК ТаблицаВызова
		|		ПО ТаблицаНастроек.Магазин = ТаблицаВызова.Магазин
		|		И ТаблицаНастроек.ОператорДоставки = ТаблицаВызова.ОператорДоставки
		|		И НЕ ТаблицаВызова.ВызовОтменён
		|		И НАЧАЛОПЕРИОДА(ТаблицаВызова.ДатаВызова, ДЕНЬ) = &ДатаВызоваМашины
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрЭН КАК РеестрЭН
		|		ПО ТаблицаНастроек.Магазин = РеестрЭН.МагазинСклад
		|		И НЕ РеестрЭН.Напечатан
		|		И НЕ РеестрЭН.ПометкаУдаления
		|ГДЕ
		|	ТаблицаНастроек.ВызовМашины
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РеестрЭНСписокЭН.ЭлектронныеНакладные) КАК КоличествоЭН,
		|	ВызыватьМашину.КоличествоНакладныхДляМашины КАК КоличествоНакладныхДляМашины,
		|	ВызыватьМашину.Магазин КАК Магазин,
		|	ВызыватьМашину.Реестр КАК Реестр,
		|	ВызыватьМашину.КонтрагентИдентификатор КАК КонтрагентИдентификатор,
		|	ВызыватьМашину.ГородИдентификатор КАК ГородИдентификатор,
		|	ВызыватьМашину.КонтактноеЛицоИдентификатор КАК КонтактноеЛицоИдентификатор,
		|	ВызыватьМашину.НомерТелефона КАК НомерТелефона,
		|	ВызыватьМашину.УлицаИдентификатор КАК УлицаИдентификатор,
		|	ВызыватьМашину.НомерДома КАК НомерДома,
		|	ВызыватьМашину.РеестрИдентификатор КАК РеестрИдентификатор,
		|	ВызыватьМашину.МашинаВызвана,
		|	ВызыватьМашину.ОператорДоставки
		|ИЗ
		|	ВызыватьМашину КАК ВызыватьМашину
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрЭН.СписокЭН КАК РеестрЭНСписокЭН
		|		ПО ВызыватьМашину.Реестр = РеестрЭНСписокЭН.Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ВызыватьМашину.КоличествоНакладныхДляМашины,
		|	ВызыватьМашину.Магазин,
		|	ВызыватьМашину.Реестр,
		|	ВызыватьМашину.КонтрагентИдентификатор,
		|	ВызыватьМашину.ГородИдентификатор,
		|	ВызыватьМашину.КонтактноеЛицоИдентификатор,
		|	ВызыватьМашину.НомерТелефона,
		|	ВызыватьМашину.УлицаИдентификатор,
		|	ВызыватьМашину.НомерДома,
		|	ВызыватьМашину.РеестрИдентификатор,
		|	ВызыватьМашину.МашинаВызвана,
		|	ВызыватьМашину.ОператорДоставки";
	
	ДатаЗапроса= ТекущаяДатаСеанса();
	Запрос.УстановитьПараметр("ДатаВызоваМашины", НачалоДня(ДатаЗапроса));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.КоличествоНакладныхДляМашины <= Выборка.КоличествоЭН И Не Выборка.МашинаВызвана Тогда
			
			СтруктураВызоваМашины = ИнициализацияСтруктурыВызоваМашины();
			ЗаполнитьЗначенияСвойств(СтруктураВызоваМашины, Выборка);
			СтруктураВызоваМашины.ДатаЗапроса = ДатаЗапроса;
			ВызватьМашину(,СтруктураВызоваМашины);
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ИнициализацияСтруктурыВызоваМашины()
	
	Результат = Новый Структура;
	Результат.Вставить("КонтрагентИдентификатор");
	Результат.Вставить("ГородИдентификатор");
	Результат.Вставить("КонтактноеЛицоИдентификатор");
	Результат.Вставить("НомерТелефона");
	Результат.Вставить("УлицаИдентификатор");
	Результат.Вставить("НомерДома");
	Результат.Вставить("КоличествоЭН");
	Результат.Вставить("РеестрИдентификатор");
	Результат.Вставить("ОператорДоставки");
	Результат.Вставить("Магазин");
	Результат.Вставить("ДатаЗапроса");
	
	Возврат Результат;
	
КонецФункции

Процедура ВызватьМашину(КлючAPI = Неопределено, СтруктураВызова) Экспорт

	ТочкаВхода =  "https://api.novaposhta.ua/v2.0/xml/";
	ПараметрыМетода = Новый Структура;
	Если КлючAPI = Неопределено Тогда
		ТекущийКлюч = ОбменНПСлужебный.ПолучитьКлючAPI();
		ПараметрыМетода.Вставить("Тестовый", Ложь);
	Иначе
		ТекущийКлюч = КлючAPI;
		ПараметрыМетода.Вставить("Тестовый", Истина);
	КонецЕсли;
	
	ПараметрыМетода.Вставить("КлючАПИ", ТекущийКлюч);
	ПараметрыМетода.Вставить("ОператорДоставки", СтруктураВызова.ОператорДоставки);
	ПараметрыМетода.Вставить("Магазин", СтруктураВызова.Магазин);
	ПараметрыМетода.Вставить("ДатаЗапроса", СтруктураВызова.ДатаЗапроса);

	ТекстЗапроса = "<?xml version=""1.0"" encoding=""UTF-8""?>
		|<root>
		|<apiKey>"+ТекущийКлюч+"</apiKey>
		|<modelName>CarCallGeneral</modelName>
		|<calledMethod>save</calledMethod>
		|<methodProperties>
		|<CounterpartySender>" + СокрЛП(СтруктураВызова.КонтрагентИдентификатор) + "</CounterpartySender>
		|<SenderCityRef>" + СокрЛП(СтруктураВызова.ГородИдентификатор) + "</SenderCityRef>
		|<ContactSenderRef>" + СокрЛП(СтруктураВызова.КонтактноеЛицоИдентификатор) + "</ContactSenderRef>
		|<SenderPhone>" + СокрЛП(СтруктураВызова.НомерТелефона) + "</SenderPhone>
		|<SenderStreet>" + СокрЛП(СтруктураВызова.УлицаИдентификатор) + "</SenderStreet>
		|<SenderHouse>" + СокрЛП(СтруктураВызова.НомерДома) + "</SenderHouse>
		|<DocumentQuantity>" + СтруктураВызова.КоличествоЭН + "</DocumentQuantity>
		|<PayerType>Sender</PayerType>
		|<DateTime>" + Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy;") + "</DateTime>
		|<PaymentMethod>NonCash</PaymentMethod>
		|<CounterpartyThirdPerson></CounterpartyThirdPerson>
		|<ScanSheetRef>" + СокрЛП(СтруктураВызова.РеестрИдентификатор) + "</ScanSheetRef>
		|<FactualWeight>40</FactualWeight>
		|<VolumetricWeight>50</VolumetricWeight>
		|<TimeInterval>CityPickingTimeInterval3</TimeInterval>
		|</methodProperties>
		|</root>";

	ДокументДом  = ПолучитьОтветДОМ(ТочкаВхода, ТекстЗапроса);
	Если  ДокументДом = Неопределено тогда
		// Сделать запись в журнал
	КонецЕсли;
	
	Если не ЭтоУспех(ДокументДом) тогда
		
		ТекстИсключения = ВернутьЕрор(ДокументДом);

	Иначе

		Результат = новый Структура();
		РаспарситьОтвет("Обработать_ВызовМашины", ДокументДом, Результат, "getStatusDocuments", ПараметрыМетода);

	КонецЕсли;

КонецПроцедуры

Функция Обработать_ВызовМашины(ЭлементДом, Результат, ТаблицаРегистра, Параметры)

	Пока Не ЭлементДом = Неопределено Цикл

		Если ЭлементДом.ИмяУзла = "Barcode" Тогда
			НомерДокументаВызоваМашины = ЭлементДом.ТекстовоеСодержимое;
		КонецЕсли;

		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;

	НаборЗаписей = РегистрыСведений.ВызовМашины.СоздатьНаборЗаписей(); 
	
	НаборЗаписей.Отбор.Магазин.Установить(Параметры.Магазин); 
	НаборЗаписей.Отбор.ОператорДоставки.Установить(Параметры.ОператорДоставки); 
	НаборЗаписей.Отбор.ДатаВызова.Установить(Параметры.ДатаЗапроса); 
	
	НоваяЗапись 					 = НаборЗаписей.Добавить();
	НоваяЗапись.Магазин				 = Параметры.Магазин; 
	НоваяЗапись.ОператорДоставки	 = Параметры.ОператорДоставки; 
	НоваяЗапись.ДатаВызова			 = Параметры.ДатаЗапроса;
	НоваяЗапись.НомерВызова			 = НомерДокументаВызоваМашины; 
	НоваяЗапись.ВызовОтменён		 = Ложь; 
	НаборЗаписей.Записать();

	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда

		Адрес = "yura.sichkarenko@gmail.com;";

		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить("Кому", Адрес);
		ПараметрыПисьма.Вставить("Тема", "Виклик машини на " + Формат(Параметры.ДатаЗапроса, "ДФ=dd.MM.yyyy;"));
		ТелоПисьма = "Кур'єрська машина служби доставки викликана до магазину. Номер виклика #"
			+ СокрЛП(НомерДокументаВызоваМашины);
		ПараметрыПисьма.Вставить("Тело", ТелоПисьма);

		ТекстОтвета = ЭлектроннаяПочта.ОтправитьПочтовоеСообщение(РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);

	КонецЕсли;

КонецФункции	
