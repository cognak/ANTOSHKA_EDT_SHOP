
// Заполнение справочников
Процедура ОбновитьСправочникНП() Экспорт
	ЗагрузитьСправочники()
КонецПроцедуры

Процедура ЗаполнитьРусНазваниеУлицНП() Экспорт
ЗагрузитьРусНаименование()
КонецПроцедуры

Процедура ЗагрузитьСправочники() 
	
	ТаблицаМетодов = Новый ТаблицаЗначений;
	ТаблицаМетодов.Колонки.Добавить("Метод");
	ТаблицаМетодов.Колонки.Добавить("Файл");
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getAreas";
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCities";		
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getStreet";		
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getWarehouseTypes";
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getWarehouses";
	ЗаполнитьСправочникиНП(ТаблицаМетодов);
	
КонецПроцедуры

Процедура ЗагрузитьРусНаименование()
	ТаблицаМетодов = Новый ТаблицаЗначений;
	ТаблицаМетодов.Колонки.Добавить("Метод");
	ТаблицаМетодов.Колонки.Добавить("Файл");
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getsettlement";		
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "searchsettlementstreet";	
	ЗаполнитьСправочникиНП(ТаблицаМетодов);
КонецПроцедуры

Процедура ЗаполнитьСправочникиНП(Знач ТаблицаМетодов, вхМетод = "")
	ТзГорода = Новый ТаблицаЗначений;
	ТочкаВхода = ОбменНПСлужебный.ПолучитьТочкуВхода();
	датан=ТекущаяДата();
	
	Ключ = ОбменНПСлужебный.ПолучитьКлючAPI();
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("КлючАПИ",Ключ);
	
	Если ТаблицаМетодов = Неопределено Тогда
		ТаблицаМетодов = ПолучитьТаблицуМетодов();
	КонецЕсли;
	
	Если вхМетод <> "" Тогда
		ТаблицаМетодов.Очистить();
		НоваяСтрока = ТаблицаМетодов.Добавить();
		НоваяСтрока.Метод = вхМетод;
	КонецЕсли;

	
	Для каждого Строка Из ТаблицаМетодов Цикл
		ПараметрыМетода.Вставить("ИмяМетода",Строка.Метод);
		Если Строка.Метод = "getStreet" Или Строка.Метод = "getWarehouses" Или Строка.Метод = "getTimeIntervals" Тогда
			Города = Справочники.ГородаДоставки.Выбрать();			
			Пока Города.Следующий() Цикл
				ПараметрыМетода.Вставить("CityRef",Города.Идентификатор);
				ПараметрыМетода.Вставить("CityDescription",Города.Наименование);
				Для Стр = 1 По 7 Цикл 
					ПараметрыМетода.Вставить("Page",Стр);
					ТекстЗапроса = ПолучитьТекстЗапроса(Строка.Метод,ПараметрыМетода);
					Если не ЗначениеЗаполнено(ТекстЗапроса) тогда
						//Сообщить("Не удалось сформировать запрос по методу: "+Строка.Метод);
						Продолжить;
					КонецЕсли;
					ДокументДом  = ПолучитьОтветДОМ(ТочкаВхода,ТекстЗапроса);
					Если  ДокументДом = Неопределено тогда
						//Сообщить("Ошибка при получении ответа, метод: "+ Строка.Метод);
					КонецЕсли;
					Если не  ЭтоУспех(ДокументДом) тогда
						ТекстИсключения = ВернутьЕрор(ДокументДом);
						//Сообщить(ТекстИсключения+" "+Строка.Метод);
						Возврат;
					КонецЕсли;
					лВыполняемаяобработка = ПолучитьПроцедуруПоМетоду(Строка.Метод);
					Если не ЗначениеЗаполнено(лВыполняемаяобработка) тогда
						//Сообщить(ТекстИсключения = "Не назначен обработчик методу: "+ Строка.Метод);
					КонецЕсли;
					Результат = новый Структура();
					РаспарситьОтвет(лВыполняемаяобработка, ДокументДом,Результат, Строка.Метод,ПараметрыМетода);
					Если Строка.Метод <> "getStreet" И Строка.Метод <> "GETSTREET" И Стр >=1 Тогда
						Прервать;
					КонецЕсли;
				Конеццикла;
			Конеццикла;
		ИначеЕсли Строка.Метод = "searchsettlementstreet" тогда
			Города = Справочники.ГородаДоставки.Выбрать();			
			Пока Города.Следующий() Цикл
	
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	Улицы.Наименование КАК Наименование,
					|	Улицы.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.Улицы КАК Улицы
					|ГДЕ
					|	Улицы.Город = &Город";
				
				Запрос.УстановитьПараметр("Город", Города.Ссылка);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Улицы = РезультатЗапроса.Выбрать();
				
				Пока Улицы.Следующий() Цикл
				ПараметрыМетода.Вставить("SettlementRef",Города.ИдентификаторSettlement);
				ПараметрыМетода.Вставить("StreetName",Улицы.Наименование);				
				ТекстЗапроса = ПолучитьТекстЗапроса(Строка.Метод,ПараметрыМетода);
				Если не ЗначениеЗаполнено(ТекстЗапроса) тогда
					//Сообщить("Не удалось сформировать запрос по методу: "+Строка.Метод);
					Продолжить;
				КонецЕсли;
				Ответ = ПолучитьОтвет(ТочкаВхода,ТекстЗапроса);
				Обработать_SEARCSETTLEMENTSTREET(Улицы.Ссылка,Ответ);
				Конеццикла;
			Конеццикла;
		Иначе
			ТекстЗапроса = ПолучитьТекстЗапроса(Строка.Метод,ПараметрыМетода);
			Если не ЗначениеЗаполнено(ТекстЗапроса) тогда
				//Сообщить("Не удалось сформировать запрос по методу: "+Строка.Метод);
				Продолжить;
			КонецЕсли;
			ДокументДом  = ПолучитьОтветДОМ(ТочкаВхода,ТекстЗапроса);
			Если  ДокументДом = Неопределено тогда
				//Сообщить("Ошибка при получении ответа, метод: "+ Строка.Метод);
			КонецЕсли;
			Если не  ЭтоУспех(ДокументДом) тогда
				ТекстИсключения = ВернутьЕрор(ДокументДом);
				//Сообщить(ТекстИсключения+" "+Строка.Метод);
				Возврат;
			КонецЕсли;
			лВыполняемаяобработка = ПолучитьПроцедуруПоМетоду(Строка.Метод);
			Если не ЗначениеЗаполнено(лВыполняемаяобработка) тогда
				//Сообщить(ТекстИсключения = "Не назначен обработчик методу: "+ Строка.Метод);
			КонецЕсли;
			Результат = новый Структура();
			РаспарситьОтвет(лВыполняемаяобработка, ДокументДом,Результат, Строка.Метод,ПараметрыМетода);
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуМетодов()
	ТаблицаМетодов = Новый ТаблицаЗначений;
	ТаблицаМетодов.Колонки.Добавить("Метод");
	ТаблицаМетодов.Колонки.Добавить("Файл");
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getAreas";
	Строка.Файл = "\Areas.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCities";
	Строка.Файл = "\Cities.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getStreet";
	Строка.Файл = "\Streets.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getWarehouseTypes";
	Строка.Файл = "\whtypes.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getWarehouses";
	Строка.Файл = "\whouse.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCounterparties";
	Строка.Файл = "\counter1.dbf";
	Строка.Метод = "getCounterparties";
	Строка.Файл = "\counter2.dbf";
	Строка.Метод = "getCounterparties";
	Строка.Файл = "\counter3.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getOwnershipFormsList";
	Строка.Файл = "\ownform.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getTypesOfPayers";
	Строка.Файл = "\payertyp.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getTypesOfCounterparties";
	Строка.Файл = "\counttyp.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCargoTypes";
	Строка.Файл = "\cargotyp.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getServiceTypes";
	Строка.Файл = "\servtype.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getBackwardDeliveryCargoTypes";
	Строка.Файл = "\bdelct.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCargoDescriptionList";
	Строка.Файл = "\cargodes.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getTypesOfPayersForRedelivery";
	Строка.Файл = "\redevpt.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCounterpartyAddresses";
	Строка.Файл = "\countadr.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCounterpartyContactPersons";
	Строка.Файл = "\countcp.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCounterpartyOptions";
	Строка.Файл = "\countopt.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getPaymentForms";
	Строка.Файл = "\payforms.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getPalletsList";
	Строка.Файл = "\pallets.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getTimeIntervals";
	Строка.Файл = "\timeint.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getTraysList";
	Строка.Файл = "\trays.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getTiresWheelsList";
	Строка.Файл = "\tires.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getMessageCodeText";
	Строка.Файл = "\Errors.dbf";
	
	Возврат ТаблицаМетодов;
КонецФункции

Функция ПолучитьТекстЗапроса(знач ИмяМетода, ПараметрыМетода = неопределено)
	
	Текст = "";
	ИмяМетодаВрег = ВРег(СокрЛП(ИмяМетода));
	//////////////////
	//Address
	Если ИмяМетодаВрег = "GETCITIES" тогда
		Текст = ПолучитьЗапрос_getCities(ПараметрыМетода);
	ИначеЕсли ИмяМетодаВрег = "GETSTREET" тогда
		Текст = ПолучитьЗапрос_getStreet(ПараметрыМетода);
	ИначеЕсли ИмяМетода = "searchsettlementsstreet" тогда
		Текст = ПолучитьЗапрос_searchsettlementsstreet(ПараметрыМетода);		
	ИначеЕсли ИмяМетодаВрег = "GETWAREHOUSES" тогда
		Текст = ПолучитьЗапрос_getWarehouses(ПараметрыМетода);		
	ИначеЕсли ИмяМетодаВрег = "GETWAREHOUSETYPES" тогда
		Текст = ПолучитьЗапрос_getWarehouseTypes(ПараметрыМетода);
	//ИначеЕсли ИмяМетодаВрег = "GETCOUNTERPARTIES" тогда
	//	Текст = ПолучитьЗапрос_getCounterparties(ПараметрыМетода);
	//ИначеЕсли ИмяМетодаВрег = "GETCOUNTERPARTYADDRESSES" тогда
	//	Текст = ПолучитьЗапрос_getCounterpartyAddresses(ПараметрыМетода);
	//ИначеЕсли ИмяМетодаВрег = "GETCOUNTERPARTYCONTACTPERSONS" тогда
	//	Текст = ПолучитьЗапрос_getCounterpartyContactPersons(ПараметрыМетода);
	ИначеЕсли ИмяМетодаВрег = "GETTYPESOFPAYERS" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);		
	ИначеЕсли ИмяМетодаВрег = "GETPAYMENTFORMS" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);		
	ИначеЕсли ИмяМетодаВрег = "GETCARGOTYPES" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);		
	ИначеЕсли ИмяМетодаВрег = "GETSERVICETYPES" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);
	ИначеЕсли ИмяМетодаВрег = "GETCARGODESCRIPTIONLIST" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);//getCargoDescriptionList
	ИначеЕсли ИмяМетодаВрег = "GETAREAS" тогда
		Текст = ПолучитьЗапрос_getArea(ПараметрыМетода);
	ИначеЕсли ИмяМетодаВрег = "GETOWNERSHIPFORMSLIST" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);//getOwnershipFormsList
	ИначеЕсли ИмяМетодаВрег = "GETBACKWARDDELIVERYCARGOTYPES" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);//getBackwardDeliveryCargoTypes
	ИначеЕсли ИмяМетодаВрег = "GETPALLETSLIST" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);//getPalletsList
	ИначеЕсли ИмяМетодаВрег = "GETTYPESOFCOUNTERPARTIES" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);//getTypesOfCounterparties
	ИначеЕсли ИмяМетодаВрег = "GETTYPESOFPAYERSFORREDELIVERY" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);
	ИначеЕсли ИмяМетодаВрег = "GETTIMEINTERVALS" тогда
		Текст = ПолучитьЗапрос_getTimeIntervals(ТекущаяДата(),ПараметрыМетода);
	ИначеЕсли ИмяМетодаВрег = "GETTIRESWHEELSLIST" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);
	ИначеЕсли ИмяМетодаВрег = "GETTRAYSLIST" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода); //getTraysList
	ИначеЕсли ИмяМетодаВрег = "GETDOCUMENTSTATUSES" тогда
		Текст = ПолучитьЗапрос_Common(ПараметрыМетода);
	ИначеЕсли ИмяМетодаВрег = "GETMESSAGECODETEXT" тогда
		Текст = ПолучитьЗапрос_getMessageCodeText(ПараметрыМетода);
	КонецЕсли;	
	
	Возврат Текст;
	
КонецФункции

Функция ПолучитьЗапрос_getArea(ПараметрыМетода)
	
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|<calledMethod>getAreas</calledMethod>
	|<methodProperties />
	|<modelName>Address</modelName>
	|</file>";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьЗапрос_getCities(ПараметрыМетода)
	
	ТекстЗапроса = 
	//"
	//|
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|<calledMethod>getCities</calledMethod>
	|<methodProperties/>
	|<modelName>Address</modelName>
	|</file>
	|";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьЗапрос_getStreet(ПараметрыМетода)
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|	<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|	<calledMethod>getStreet</calledMethod>
	|	<methodProperties>
	|		<CityRef>"+ПараметрыМетода.CityRef+"</CityRef>
	|		<Page>"+ПараметрыМетода.Page+"</Page>
	|	</methodProperties>
	|	<modelName>Address</modelName>
	|</file>";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьЗапрос_searchsettlementsstreet(ПараметрыМетода)
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|	<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|	<calledMethod>searchsettlementsstreet</calledMethod>
	|	<methodProperties>
	|		<settlementsstreetRef>"+ПараметрыМетода.settlementsstreetRef+"</settlementsstreetRef>
//	|		<Page>"+ПараметрыМетода.Page+"</Page>
	|	</methodProperties>
	|	<modelName>Address</modelName>
	|</file>";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьЗапрос_getWarehouses(ПараметрыМетода)
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|	<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|	<calledMethod>getWarehouses</calledMethod>
	|	<methodProperties>
	|		<CityRef>"+ПараметрыМетода.CityRef+"</CityRef>
	|	</methodProperties>
	|	<modelName>Address</modelName>
	|</file>";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьЗапрос_getWarehouseTypes(ПараметрыМетода)
	
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|	<modelName>Address</modelName>
	|	<calledMethod>getWarehouseTypes</calledMethod>
	|	<methodProperties/>
	|	<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|</file>";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьЗапрос_Common(ПараметрыМетода)
	
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|<calledMethod>"+ПараметрыМетода.ИмяМетода+"</calledMethod>
	|<methodProperties/>
	|<modelName>Common</modelName>
	|</file>";
	
	Возврат ТекстЗапроса;
КонецФункции

Процедура РаспарситьОтвет(лВыполняемаяобработка,ДокументДом, Результат, Владелец = неопределено,Параметры = Неопределено)
	Если Не лВыполняемаяобработка = "Обработать_getMessageCodeText" Тогда
		Узел = ДокументДом.ПолучитьЭлементыПоИмени("Item");
	Иначе
		Узел = ДокументДом.ПолучитьЭлементыПоИмени("data");
	конецЕсли;
	КоличествоЭлементов = Узел.Количество();
	Если КоличествоЭлементов > 0 тогда
		Item = Узел.Элемент(0);
		
		Пока не Item = неопределено цикл
			Элемент_Item = Item.ПервыйДочерний;
			
			ВыполнитьОбработчик(Владелец, лВыполняемаяобработка,Элемент_Item, Результат,Параметры);
			Item = Item.СледующийСоседний;
		КонецЦикла;
		
	КонецЕсли;	
	//здесь пишем дбф?	
КонецПроцедуры

Функция ПолучитьПроцедуруПоМетоду(ИмяМетода)
	Текст = "";
	ИмяМетода = ВРег(СокрЛП(ИмяМетода));
	
	Если ИмяМетода = "GETCITIES" тогда
		Текст = "Обработать_getCities";
	ИначеЕсли ИмяМетода = "GETSETTLEMENT" тогда
		Текст = "Обработать_GETSETTLEMENT";		
	ИначеЕсли ИмяМетода = "SEARCHSETTLEMENTSTREET" тогда
		Текст = "Обработать_SEARCSETTLEMENTSTREET";
	ИначеЕсли ИмяМетода = "GETSTREET" тогда
		Текст = "Обработать_getStreet";
	ИначеЕсли ИмяМетода = "GETWAREHOUSES" тогда
		Текст = "Обработать_getWarehouses";		
	ИначеЕсли ИмяМетода = "GETWAREHOUSETYPES" тогда
		Текст = "Обработать_getWarehouseTypes";
	ИначеЕсли ИмяМетода = "GETCOUNTERPARTIES" тогда
		Текст = "Обработать_getCounterparties";
	ИначеЕсли ИмяМетода = "GETCOUNTERPARTYADDRESSES" тогда
		Текст = "Обработать_getCounterpartyAddresses";
	ИначеЕсли ИмяМетода = "GETCOUNTERPARTYCONTACTPERSONS" тогда
		Текст = "Обработать_getCounterpartyContactPersons";
	ИначеЕсли ИмяМетода = "GETTYPESOFPAYERS" тогда
		Текст = "Обработать_Common";		
	ИначеЕсли ИмяМетода = "GETPAYMENTFORMS" тогда
		Текст = "Обработать_Common";		
	ИначеЕсли ИмяМетода = "GETCARGOTYPES" тогда
		Текст = "Обработать_Common";		
	ИначеЕсли ИмяМетода = "GETSERVICETYPES" тогда
		Текст = "Обработать_Common";
	ИначеЕсли ИмяМетода = "GETCARGODESCRIPTIONLIST" тогда
		Текст = "Обработать_Common";//getCargoDescriptionList
	ИначеЕсли ИмяМетода = "GETAREAS" тогда
		Текст = "Обработать_getArea";
	ИначеЕсли ИмяМетода = "GETOWNERSHIPFORMSLIST" тогда
		Текст = "Обработать_Common";//getOwnershipFormsList
	ИначеЕсли ИмяМетода = "GETBACKWARDDELIVERYCARGOTYPES" тогда
		Текст = "Обработать_Common";//getBackwardDeliveryCargoTypes
	ИначеЕсли ИмяМетода = "GETPALLETSLIST" тогда
		Текст = "Обработать_Common";//getPalletsList
	ИначеЕсли ИмяМетода = "GETTYPESOFCOUNTERPARTIES" тогда
		Текст = "Обработать_Common";//getTypesOfCounterparties
	ИначеЕсли ИмяМетода = "GETTYPESOFPAYERSFORREDELIVERY" тогда
		Текст = "Обработать_Common";
	ИначеЕсли ИмяМетода = "GETTIMEINTERVALS" тогда
		Текст = "Обработать_getTimeIntervals";
	ИначеЕсли ИмяМетода = "GETTIRESWHEELSLIST" тогда
		Текст = "Обработать_Common";
	ИначеЕсли ИмяМетода = "GETTRAYSLIST" тогда
		Текст = "Обработать_Common"; //getTraysList
	ИначеЕсли ИмяМетода = "GETDOCUMENTSTATUSES" тогда
		Текст = "Обработать_getDocumentStatuses";
	ИначеЕсли ИмяМетода = "GETCOUNTERPARTYOPTIONS" тогда
		Текст = "Обработать_getCounterpartyOptions";			
	ИначеЕсли ИмяМетода = "SAVECOUNTERPARTY" тогда
		Текст = "Обработать_SaveCounterparty";		
	ИначеЕсли ИмяМетода = "SAVECONTACTPERSON" тогда
		Текст = "Обработать_SaveContactPerson";	
	ИначеЕсли ИмяМетода = "SAVEINTERNETDOCUMENT" тогда
		Текст = "Обработать_SaveInternetDocument";	
	ИначеЕсли ИмяМетода = "INSERTDOCUMENTSSCANSHEET" тогда
		Текст = "Обработать_insertDocumentsScanSheet";
	ИначеЕсли ИмяМетода = "REMOVEDOCUMENTS" тогда
		Текст = "Обработать_removeDocuments";
	ИначеЕсли ИмяМетода = "DELETESCANSHEET" тогда
		Текст = "Обработать_deleteScanSheet";
	ИначеЕсли ИмяМетода = "DELETEDOC" тогда
		Текст = "Обработать_deleteDoc";
	ИначеЕсли ИмяМетода = "GETSTATUSDOCUMENTS" тогда
		Текст = "Обработать_getStatusDocuments";
	ИначеЕсли ИмяМетода = "GETMESSAGECODETEXT" тогда
		Текст = "Обработать_getMessageCodeText";
	КонецЕсли;	
	
	Возврат Текст
КонецФункции	

Функция ПолучитьНомерПоследней(запрос,квостр)
	НомерПоследней = 1;
	Всего = 1;
	Ответ=GetXMLResponserNewPost(запрос);
	ОтветФорма=Ответ;
	Чтение=новый ЧтениеXML;
	Чтение.УстановитьСтроку(Ответ);	
	Пока Чтение.Прочитать() Цикл
		Если чтение.Имя="totalCount" and чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента тогда
			чтение.Прочитать();
			Всего=Число(чтение.Значение);			
		КонецЕсли;
	КонецЦикла;;
	НомерПоследней = ?(Всего/квостр - Цел(Всего/квостр) = 0,Цел(Всего/квостр),Цел(Всего/квостр)+1);
	Возврат НомерПоследней;
КонецФункции

Функция ПолучитьЗапрос_getTimeIntervals(Дата,ПараметрыМетода)
	
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|	<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|	<calledMethod>getTimeIntervals</calledMethod>
	|	<methodProperties>
	|	<DateTime>"+Формат(Дата,"ДФ=dd.MM.yyyy")+"</DateTime>
	|	<RecipientCityRef>" + ПараметрыМетода.CityRef + "</RecipientCityRef>
	|	</methodProperties>
	|	<modelName>Common</modelName>
	|</file>";
	
	
	Возврат ТекстЗапроса;
КонецФункции

Функция Обработать_SEARCSETTLEMENTSTREET(Улица,Наименование)

			Если ЗначениеЗаполнено(Улица) И ЗначениеЗаполнено(Наименование) тогда
				СпрУлица = Улица.ПолучитьОбъект();
				//СпрУлица.НаименованиеRU =  Строка.НаименованиеRU;
				СпрУлица.НаименованиеRU =  Наименование;
				СпрУлица.Записать();
			КонецЕсли;
КонецФункции

Функция ПолучитьЗапрос_getMessageCodeText(ПараметрыМетода)
	
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|<calledMethod>getMessageCodeText</calledMethod>
	|<methodProperties/>
	|<modelName>CommonGeneral</modelName>
	|</file>";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ВернутьЕрор(ДокументДом) 
	ТекстОшибки  = "";
	
	Узел =  ДокументДом.ПолучитьЭлементыПоИмени("errors");
	Если Узел.количество() = 0 Тогда
		Возврат "";
	КонецЕсли;	
	
	Узел = Узел[0].первыйДочерний;
	Пока не Узел = Неопределено цикл
		ТекстОшибки = ТекстОшибки + Символы.ПС + Узел.ТекстовоеСодержимое ;
		Узел = Узел.СледующийСоседний;
	КонецЦикла;	 
	
	Возврат ТекстОшибки;	
КонецФункции

Функция ЭтоУспех(ДокументДом)
	success =  ДокументДом.ПолучитьЭлементыПоИмени("success");// = "true"
	
	Возврат success[0].ТекстовоеСодержимое = "true";
КонецФункции

Функция ПолучитьОтветДОМ(Адрес,ТекстXML, ответ = "")
	Попытка 
		Попытка
			ХМЛХТТП = ПолучитьCOMОбъект("", "MSXML2.ServerXMLHTTP.6.0");
		Исключение
			ХМЛХТТП = ПолучитьCOMОбъект("", "Microsoft.XMLHTTP");
		КонецПопытки;
		
		ХМЛХТТП.Open("POST", Адрес, Ложь);
		ХМЛХТТП.SetRequestHeader("Content-Type", "text/xml");
		ХМЛХТТП.Send(ТекстXML);
		//	Сообщить(ХМЛХТТП.ResponseText);
		XMLДокумент = Новый ЧтениеXML;
		XMLДокумент.УстановитьСтроку(ХМЛХТТП.ResponseText);
		Ответ = ХМЛХТТП.ResponseText;
		ПостроительДом = Новый ПостроительDOM;
		ДокументДом = ПостроительДом.Прочитать(XMLДокумент);
		XMLДокумент.Закрыть();	
		
		Возврат ДокументДом;
	Исключение 
		//Сообщить(ОписаниеОшибки());
		Ответтекст = GetXMLResponserNewPost(ТекстXML);
		XMLДокумент = Новый ЧтениеXML;
		XMLДокумент.УстановитьСтроку(Ответтекст);
		ПостроительДом = Новый ПостроительDOM;
		ДокументДом = ПостроительДом.Прочитать(XMLДокумент);
		XMLДокумент.Закрыть();	
		Возврат ДокументДом;
		
		//Возврат Неопределено
	КонецПопытки;
КонецФункции

Функция Обработать_Common(ЭлементДом,Результат, Владелец, Параметры)
	тзВидыОбратнойДоставки = Новый ТаблицаЗначений;
	тзСпособыОплаты = Новый ТаблицаЗначений;
	тзТипыКонтрагентов = Новый ТаблицаЗначений;
	тзОписанияГруза = Новый ТаблицаЗначений;
	тзФормыСобственности = Новый ТаблицаЗначений;
	тзВидыПаллет = Новый ТаблицаЗначений;
	тзТипыПлательщиковОбратнойДоставки = Новый ТаблицаЗначений;
	тзПоддоны = Новый ТаблицаЗначений;
	тзТипыПлательщиков = Новый ТаблицаЗначений;
	тзВидыГруза = Новый ТаблицаЗначений;
	//тзВидыОбратнойДоставки = Новый ТаблицаЗначений;
	//тзВидыОбратнойДоставки = Новый ТаблицаЗначений;
	//тзВидыОбратнойДоставки = Новый ТаблицаЗначений;
	
	СтруктураПараметров = Новый структура;
	
	Пока не ЭлементДом = неопределено цикл
		Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла)  тогда
			СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);
		Иначе
			Текст = "Ошибка Common";
			ВызватьИсключение Текст;
		КонецЕсли;	 
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	Если Параметры.ИмяМетода = "getTypesOfCounterparties" Тогда
		Строка = тзТипыКонтрагентов.Добавить();
	ИначеЕсли Параметры.ИмяМетода = "getTypesOfPayers" Тогда
		Строка = тзТипыПлательщиков.Добавить();
	ИначеЕсли Параметры.ИмяМетода = "getPaymentForms" Тогда
		Строка = тзСпособыОплаты.Добавить();
	ИначеЕсли Параметры.ИмяМетода = "getCargoTypes" Тогда
		Строка = тзВидыГруза.Добавить();	
	//ИначеЕсли Параметры.ИмяМетода = "getServiceTypes" Тогда
	//	Строка = тзТехнологииДоставки.Добавить();
	ИначеЕсли Параметры.ИмяМетода = "getCargoDescriptionList" Тогда
		Строка = тзОписанияГруза.Добавить();
		Строка.НаименованиеRU = СтруктураПараметров.DescriptionRu;
	ИначеЕсли Параметры.ИмяМетода = "getOwnershipFormsList" Тогда
		Строка = тзФормыСобственности.Добавить();
		Строка.НаименованиеПолное = СтруктураПараметров.FullName;
	ИначеЕсли Параметры.ИмяМетода = "getBackwardDeliveryCargoTypes" Тогда
		Строка = тзВидыОбратнойДоставки.Добавить();
	ИначеЕсли Параметры.ИмяМетода = "getPalletsList" Тогда
		Строка = тзВидыПаллет.Добавить();
		Строка.НаименованиеRU = СтруктураПараметров.DescriptionRu;
		Строка.Вес = СтруктураПараметров.Weight;
		//ИначеЕсли Параметры.ИмяМетода = "getTypesOfCounterparties" Тогда
		//	Строка = тзТипыКонтрагентов.Добавить();
	ИначеЕсли Параметры.ИмяМетода = "getTypesOfPayersForRedelivery" Тогда
		Строка = тзТипыПлательщиковОбратнойДоставки.Добавить();
	//ИначеЕсли Параметры.ИмяМетода = "getTiresWheelsList" Тогда
	//	Строка = тзШины.Добавить();
	//	Строка.НаименованиеRU = СтруктураПараметров.DescriptionRu;
	//	Строка.Вес = СтруктураПараметров.Weight;
	//	Строка.Тип = СтруктураПараметров.DescriptionType;
	ИначеЕсли Параметры.ИмяМетода = "getTraysList" Тогда
		Строка = тзПоддоны.Добавить();
		Строка.НаименованиеRU = СтруктураПараметров.DescriptionRu;
		Строка.Вес = СтруктураПараметров.Weight;
	КонецЕсли;
	Строка.Идентификатор = СтруктураПараметров.Ref;
	Строка.Наименование = СтруктураПараметров.Description;
	
КонецФункции

Функция ВыполнитьОбработчик(Владелец, ИмяФункции, П1 = Неопределено, П2 = Неопределено, П3=Неопределено)
	Получилось = Ложь;
	Если не Получилось тогда
		//Попытка
		Выполнить(""+ИмяФункции+"(П1,П2,Владелец,П3)");
		Получилось = истина;
		//Исключение
		//КонецПопытки;
	КонецЕсли;
	Возврат Получилось;
КонецФункции

Функция Обработать_getCities(ЭлементДом,Результат, Владелец, Параметры)
	СтруктураПараметров = Новый структура;
	тзГорода = Новый ТаблицаЗначений;
	тзГорода.Колонки.Добавить("Наименование");
	тзГорода.Колонки.Добавить("НаименованиеRU");
	тзГорода.Колонки.Добавить("РайонRef");
	тзГорода.Колонки.Добавить("Район");	
	тзГорода.Колонки.Добавить("CityID");
	тзГорода.Колонки.Добавить("Доставка1");
	тзГорода.Колонки.Добавить("Доставка2");
	тзГорода.Колонки.Добавить("Доставка3");
	тзГорода.Колонки.Добавить("Доставка4");
	тзГорода.Колонки.Добавить("Доставка5");
	тзГорода.Колонки.Добавить("Доставка6");
	тзГорода.Колонки.Добавить("Доставка7");
	тзГорода.Колонки.Добавить("Идентификатор");
	тзГорода.Колонки.Добавить("ОбластьRef");
	тзГорода.Колонки.Добавить("Область");
	Пока не ЭлементДом = неопределено цикл
		Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла)  тогда
			СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);
		Иначе
			Текст = "Ошибка getCities";
			ВызватьИсключение Текст;
		КонецЕсли;	 
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	Строка	= тзГорода.Добавить();
	Строка.Наименование = СтруктураПараметров.Description;
	Строка.НаименованиеRU = СтруктураПараметров.DescriptionRu;
	Строка.Идентификатор = СтруктураПараметров.Ref;
	Строка.Область = СтруктураПараметров.AreaDescription;	
	Строка.ОбластьRef = СтруктураПараметров.Area;
	//Строка.Район = СтруктураПараметров.;		
	//Строка.РайонRef = СтруктураПараметров.AreaDescription;			
	//Строка.РайонРУ = СтруктураПараметров.AreaDescriptionRu;
	Строка.CityID = СтруктураПараметров.CityID;
	Строка.Доставка1 = ?(СтруктураПараметров.Delivery1 = "1",Истина,Ложь);
	Строка.Доставка2 = ?(СтруктураПараметров.Delivery2 = "1",Истина,Ложь);
	Строка.Доставка3 = ?(СтруктураПараметров.Delivery3 = "1",Истина,Ложь);
	Строка.Доставка4 = ?(СтруктураПараметров.Delivery4 = "1",Истина,Ложь);
	Строка.Доставка5 = ?(СтруктураПараметров.Delivery5 = "1",Истина,Ложь);
	Строка.Доставка6 = ?(СтруктураПараметров.Delivery6 = "1",Истина,Ложь);
	Строка.Доставка7 = ?(СтруктураПараметров.Delivery7 = "1",Истина,Ложь);
	РайонСсылка = Справочники.Районы.ПустаяСсылка();
	Если  СтруктураПараметров.Свойство("Regoin")и СтруктураПараметров.Свойство("RegoinDescription") тогда
		Район = Справочники.Районы.НайтиПоРеквизиту("Идентификатор",СтруктураПараметров.Regoin);
		Если Не ЗначениеЗаполнено(Район) тогда
			Район = Справочники.Районы.СоздатьЭлемент();
			Район.Идентификатор =  СтруктураПараметров.Regoin;
			Район.НаименованиеRU =  СтруктураПараметров.RegoinDescriptionRU;
			Район.Наименование =  СтруктураПараметров.Наименование;
			Район.ОператорДоставки =  Перечисления.ОператорыДоставки.НоваяПочта;
			Район.Записать();
			РайонСсылка = Район.Ссылка;
		ИначеЕсли Район.Наименование <>  СтруктураПараметров.RegoinDescription тогда
			СпрРайон = Район.ПолучитьОбъект();
			СпрРайон.НаименованиеRU =  СтруктураПараметров.RegoinDescriptionRU;
			СпрРайон.Наименование =  СтруктураПараметров.RegoinDescription;
			СпрРайон.Записать();
			РайонСсылка = Район;
		КонецЕсли;
	КонецЕсли;
	СпрОбласть = Справочники.Области.НайтиПоРеквизиту("Идентификатор",СтруктураПараметров.Area); 
	Город = Справочники.ГородаДоставки.НайтиПоРеквизиту("Идентификатор",Строка.Идентификатор);  
	//Если НЕ ЗначениеЗаполнено(СпрОбласть) тогда 
	//	СпрОбластьЭлемент = Справочники.Области.СоздатьЭлемент();
	//	СпрОбластьЭлемент.Наименование =  Строка.Наименование;
	//	СпрОбластьЭлемент.НаименованиеRU =  Строка.НаименованиеRU;
	//	СпрОбластьЭлемент.Записать();
	//	СпрОбласть = СпрОбластьЭлемент.Ссылка;
	//КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Город) тогда
		СпрГород = Справочники.ГородаДоставки.СоздатьЭлемент();
		СпрГород.Идентификатор = Строка.Идентификатор;		
		СпрГород.Наименование = Строка.Наименование;
		СпрГород.НаименованиеRU = Строка.НаименованиеRU;
		СпрГород.Область = СпрОбласть;
		СпрГород.Район = РайонСсылка;
		СпрГород.CityID = Строка.CityID;
		СпрГород.ПН = Строка.Доставка1;
		СпрГород.ВТ = Строка.Доставка2;
		СпрГород.СР = Строка.Доставка3;
		СпрГород.ЧТ = Строка.Доставка4;
		СпрГород.ПТ = Строка.Доставка5;
		СпрГород.СБ = Строка.Доставка6;
		СпрГород.ВС = Строка.Доставка7;
		СпрГород.ОператорДоставки =  Перечисления.ОператорыДоставки.НоваяПочта;
		СпрГород.Записать();
	ИначеЕсли Город.Наименование <>  Строка.Наименование тогда
		СпрГород = Город.ПолучитьОбъект();
		СпрГород.НаименованиеRU =  Строка.НаименованиеRU;
		СпрГород.Наименование =  Строка.Наименование;
		СпрГород.Записать();
	КонецЕсли;
КонецФункции

Функция Обработать_getArea(ЭлементДом, Результат, Владелец, Параметры)
	СтруктураПараметров = новый Структура;	
	тзРегионы = Новый ТаблицаЗначений;
	тзРегионы.Колонки.Добавить("Наименование");
	тзРегионы.Колонки.Добавить("Идентификатор");
	тзРегионы.Колонки.Добавить("НаименованиеRU");
	Пока не ЭлементДом = неопределено цикл
		Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла) тогда
			СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);
		Иначе
			Текст = "Ошибка getArea";
			ВызватьИсключение Текст;	 
		КонецЕсли;	 
		
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	Строка	= тзРегионы.Добавить();
	Строка.НаименованиеRU = СтруктураПараметров.DescriptionRU;
	Строка.Идентификатор = СтруктураПараметров.Ref;
	Строка.Наименование = СтруктураПараметров.Description;
	//Строка.AreaCenter = СтруктураПараметров.AreasCenter;
	Область = Справочники.Области.НайтиПоРеквизиту("Идентификатор",Строка.Идентификатор);  
	Если НЕ ЗначениеЗаполнено(Область) тогда
		СпрОбласть = Справочники.Области.СоздатьЭлемент();
		СпрОбласть.Идентификатор = Строка.Идентификатор;
		СпрОбласть.Наименование = Строка.Наименование;
		СпрОбласть.НаименованиеRU = Строка.Наименование;
		СпрОбласть.ОператорДоставки =  Перечисления.ОператорыДоставки.НоваяПочта;					
		СпрОбласть.Записать();
	ИначеЕсли Область.Наименование <>  Строка.Наименование тогда
		СпрОбласть = Область.ПолучитьОбъект();
		СпрОбласть.Наименование =  Строка.Наименование;
		СпрОбласть.Записать();
	КонецЕсли;
	
КонецФункции

Функция Обработать_getStreet(ЭлементДом,Результат, Владелец,Параметры)
	СтруктураПараметров = Новый структура;
	тзУлицы = Новый ТаблицаЗначений;
	тзУлицы.Колонки.Добавить("Наименование");
	тзУлицы.Колонки.Добавить("Город");
	тзУлицы.Колонки.Добавить("ТипУлицы");
	тзУлицы.Колонки.Добавить("RefТипУлицы");
	тзУлицы.Колонки.Добавить("Идентификатор");
	Пока не ЭлементДом = неопределено цикл
		Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла)  тогда
			СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);
		Иначе
			Текст = "Ошибка getStreet";
			ВызватьИсключение Текст;
		КонецЕсли;	 
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	СтруктураПараметров.Вставить("Владелец",Владелец);
	Строка	= тзУлицы.Добавить();
	Строка.Идентификатор = СтруктураПараметров.Ref;
	Строка.Наименование = СтруктураПараметров.Description;
	Строка.ТипУлицы = СтруктураПараметров.StreetsType;
	Строка.RefТипУлицы = СтруктураПараметров.StreetsTypeRef;
	Строка.Город = Параметры.CityRef;
	Улица = Справочники.Улицы.НайтиПоРеквизиту("Идентификатор",Строка.Идентификатор);  
	ТипУлицы = Справочники.ТипыУлиц.НайтиПоРеквизиту("Идентификатор",Строка.RefТипУлицы);
	Если не ЗначениеЗаполнено(ТипУлицы) тогда
		СпрТипУлицы = Справочники.ТипыУлиц.СоздатьЭлемент();
		СпрТипУлицы.Идентификатор = Строка.RefТипУлицы;
		СпрТипУлицы.Наименование = Строка.ТипУлицы;
		СпрТипУлицы.Записать();
		ТипУлицы = СпрТипУлицы.Ссылка;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Улица) тогда
		СпрУлица = Справочники.Улицы.СоздатьЭлемент();
		СпрУлица.Идентификатор = Строка.Идентификатор;
		СпрУлица.Наименование = Строка.Наименование;
//		СпрУлица.НаименованиеRU = Строка.НаименованиеRU;
		СпрУлица.ТипУлицы = ТипУлицы;
		СпрУлица.Город =Справочники.ГородаДоставки.НайтиПоРеквизиту("Идентификатор",Строка.Город);
		СпрУлица.ОператорДоставки =  Перечисления.ОператорыДоставки.НоваяПочта;		
		СпрУлица.Записать();
	ИначеЕсли Улица.Наименование <>  Строка.Наименование тогда
		СпрУлица = Улица.ПолучитьОбъект();
		//СпрУлица.НаименованиеRU =  Строка.НаименованиеRU;
		СпрУлица.Наименование =  Строка.Наименование;
		СпрУлица.Записать();
	КонецЕсли;
КонецФункции

Функция Обработать_getWarehouses(ЭлементДом,Результат, Владелец, Параметры)
	СтруктураПараметров = Новый Структура;
	тзОтделения = Новый ТаблицаЗначений;
	тзОтделения.Колонки.Добавить("Наименование");
	тзОтделения.Колонки.Добавить("НаименованиеRU");
	тзОтделения.Колонки.Добавить("НомерОтделения");
	тзОтделения.Колонки.Добавить("ТелефонОтделения");
	тзОтделения.Колонки.Добавить("Город");
	тзОтделения.Колонки.Добавить("ТипОтделения");
	тзОтделения.Колонки.Добавить("Широта");
	тзОтделения.Колонки.Добавить("Долгота");
	тзОтделения.Колонки.Добавить("МаксимальныйВесМеста");
	тзОтделения.Колонки.Добавить("ОбщийМаксимальныйВес");
	тзОтделения.Колонки.Добавить("ГородРеф");
	тзОтделения.Колонки.Добавить("Идентификатор");
	
	
	Пока не ЭлементДом = неопределено цикл
		Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла)  тогда
			СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);
		Иначе
			Текст = "Ошибка getWarehouses";
			ВызватьИсключение Текст;
		КонецЕсли;	 
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	СтруктураПараметров.Вставить("Владелец",Владелец);
	//Если тзТипыОтделений.Количество() = 0 Тогда		
		Если СтрЧислоВхождений(СтруктураПараметров.Description,"Поштомат") = 0 Тогда
			Тип = "Отделение";		
		Иначе
			Тип = "Почтамат";		
		КонецЕсли;
		Строка = тзОтделения.Добавить();
	Строка.НомерОтделения = СтруктураПараметров.Number;
	Строка.Идентификатор = СтруктураПараметров.Ref;
	Строка.Наименование = СтруктураПараметров.Description;
	Строка.НаименованиеRU = СтруктураПараметров.DescriptionRu;
	Строка.НомерОтделения = СтруктураПараметров.Number;
	Строка.ТелефонОтделения = СтруктураПараметров.Phone;
	Строка.Город = Параметры.CityDescription;
	Строка.ГородРеф = Параметры.CityRef;
	Строка.ТипОтделения = СтруктураПараметров.TypeOfWarehouse;
	Строка.Широта = СтруктураПараметров.Latitude;
	Строка.Долгота = СтруктураПараметров.Longitude;
	Строка.МаксимальныйВесМеста = СтруктураПараметров.PlaceMaxWeightAllowed;
	Строка.ОбщийМаксимальныйВес = СтруктураПараметров.TotalMaxWeightAllowed;
	Если ЗначениеЗаполнено(СтруктураПараметров.TypeOfWarehouse) тогда
		ТипОтделения = Справочники.ТипыОтделений.НайтиПоРеквизиту("Идентификатор",СтруктураПараметров.TypeOfWarehouse);
	Иначе
		ТипОтделения = Справочники.ТипыОтделений.ПустаяСсылка();
	КонецЕсли;
	Если СтрЧислоВхождений(СтруктураПараметров.Description,"Поштомат") = 0 Тогда
		Тип = "Отделения";
	Иначе
		Тип = "Почтоматы";
	КонецЕсли;
		Отделение = Справочники[Тип].НайтиПоРеквизиту("Идентификатор",Строка.Идентификатор);
	Если НЕ ЗначениеЗаполнено(Отделение) тогда
		СпрОтделение = Справочники[Тип].СоздатьЭлемент();
		СпрОтделение.Идентификатор = Строка.Идентификатор;
		СпрОтделение.Наименование = Строка.Наименование;
		СпрОтделение.НаименованиеRU = Строка.НаименованиеRU;
		СпрОтделение.Город =Справочники.ГородаДоставки.НайтиПоРеквизиту("Идентификатор",Строка.ГородРеф);
		СпрОтделение.ТипОтделения = ТипОтделения;
		СпрОтделение.НомерОтделения = Строка.НомерОтделения;
		СпрОтделение.Широта = Строка.Широта;
		СпрОтделение.Долгота = Строка.Долгота;
		СпрОтделение.МаксимальныйВесМеста = Строка.МаксимальныйВесМеста;
		СпрОтделение.ОбщийМаксимальныйВес = Строка.ОбщийМаксимальныйВес;
		СпрОтделение.ОператорДоставки =  Перечисления.ОператорыДоставки.НоваяПочта;	
		СпрОтделение.ТелефонОтделения =  Строка.ТелефонОтделения;	
		СпрОтделение.Записать();
	ИначеЕсли Отделение.Наименование <>  Строка.Наименование ИЛИ Отделение.ТелефонОтделения <>  Строка.ТелефонОтделения 
		ИЛИ Отделение.ТипОтделения <>  ТипОтделения ИЛИ Отделение.МаксимальныйВесМеста <>  Строка.МаксимальныйВесМеста 
		ИЛИ Отделение.ОбщийМаксимальныйВес <>  Строка.ОбщийМаксимальныйВес тогда
		СпрОтделение = Отделение.ПолучитьОбъект();
		СпрОтделение.Наименование = Строка.Наименование;
		СпрОтделение.НаименованиеRU = Строка.НаименованиеRU;
		СпрОтделение.Город =Справочники.ГородаДоставки.НайтиПоРеквизиту("Идентификатор",Строка.ГородРеф);
		СпрОтделение.ТипОтделения = ТипОтделения;
		СпрОтделение.НомерОтделения = Строка.НомерОтделения;
		СпрОтделение.Широта = Строка.Широта;
		СпрОтделение.Долгота = Строка.Долгота;
		СпрОтделение.МаксимальныйВесМеста = Строка.МаксимальныйВесМеста;
		СпрОтделение.ОбщийМаксимальныйВес = Строка.ОбщийМаксимальныйВес;
		СпрОтделение.ТелефонОтделения =  Строка.ТелефонОтделения;	
		СпрОтделение.Записать();
	КонецЕсли;
КонецФункции

Функция Обработать_getWarehouseTypes(ЭлементДом,Результат, Владелец, Параметры)
	СтруктураПараметров = Новый структура;
	тзТипыОтделений = Новый ТаблицаЗначений;
	тзТипыОтделений.Колонки.Добавить("Наименование");
	тзТипыОтделений.Колонки.Добавить("Идентификатор");
	Пока не ЭлементДом = неопределено цикл
		Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла)  тогда
			СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);
		Иначе
			Текст = "Ошибка getWarehouseTypes";
			ВызватьИсключение Текст;
		КонецЕсли;	 
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	Строка	= тзТипыОтделений.Добавить();
	Строка.Идентификатор = СтруктураПараметров.Ref;
	Строка.Наименование = СтруктураПараметров.Description; 
	ТипОтделения = Справочники.ТипыОтделений.НайтиПоРеквизиту("Идентификатор",Строка.Идентификатор);  
	Если НЕ ЗначениеЗаполнено(ТипОтделения) тогда
		СпрТипОтделения = Справочники.ТипыОтделений.СоздатьЭлемент();
		СпрТипОтделения.Идентификатор = Строка.Идентификатор;
		СпрТипОтделения.Наименование = Строка.Наименование;
		СпрТипОтделения.ОператорДоставки =  Перечисления.ОператорыДоставки.НоваяПочта;					
		СпрТипОтделения.Записать();
	ИначеЕсли ТипОтделения.Наименование <>  Строка.Наименование тогда
		СпрТипОтделения = ТипОтделения.ПолучитьОбъект();
		СпрТипОтделения.Наименование =  Строка.Наименование;
		СпрТипОтделения.Записать();
	КонецЕсли;
КонецФункции

Функция GetXMLResponserNewPost(запрос) экспорт
	Ключ = ОбменНПСлужебный.ПолучитьКлючAPI();
	запрос=СтрЗаменить(запрос,"[ВАШ КЛЮЧ]",Ключ);
	url= "api.novaposhta.ua/v2.0/xml/";
	//хтппсоед=новый HTTPСоединение(url,,,,,,new ЗащищенноеСоединениеOpenSSL);
	хтппсоед = Новый HTTPСоединение(url,,,,,,);
	
	хтппзапрос = Новый HTTPЗапрос(url);
	хтппзапрос.УстановитьТелоИзСтроки(запрос);
	хтппзапрос.Заголовки.Вставить("Content-Type", "text/xml");
	тело = запрос;
	
	ответ = хтппсоед.ОтправитьДляОбработки(хтппзапрос);
	ОтветСтрока = ответ.ПолучитьТелоКакСтроку();
	
	Возврат ОтветСтрока;
	
КонецФункции	

Функция Обработать_getSettlement(ЭлементДом,Результат, Владелец, Параметры)
	СтруктураПараметров = Новый структура;
	тзГорода = Новый ТаблицаЗначений;
	тзГорода.Колонки.Добавить("Наименование");
	тзГорода.Колонки.Добавить("НаименованиеRU");
	тзГорода.Колонки.Добавить("РайонRef");
	тзГорода.Колонки.Добавить("Район");	
	тзГорода.Колонки.Добавить("CityID");
	тзГорода.Колонки.Добавить("Доставка1");
	тзГорода.Колонки.Добавить("Доставка2");
	тзГорода.Колонки.Добавить("Доставка3");
	тзГорода.Колонки.Добавить("Доставка4");
	тзГорода.Колонки.Добавить("Доставка5");
	тзГорода.Колонки.Добавить("Доставка6");
	тзГорода.Колонки.Добавить("Доставка7");
	тзГорода.Колонки.Добавить("Идентификатор");
	тзГорода.Колонки.Добавить("ОбластьRef");
	тзГорода.Колонки.Добавить("Область");
	Пока не ЭлементДом = неопределено цикл
		Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла)  тогда
			СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);
		Иначе
			Текст = "Ошибка getCities";
			ВызватьИсключение Текст;
		КонецЕсли;	 
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	Строка	= тзГорода.Добавить();
	Строка.Наименование = СтруктураПараметров.Description;
	Строка.НаименованиеRU = СтруктураПараметров.DescriptionRu;
	Строка.Идентификатор = СтруктураПараметров.Ref;
	Строка.Область = СтруктураПараметров.AreaDescription;	
	Строка.ОбластьRef = СтруктураПараметров.Area;
	РайонСсылка = Справочники.Районы.ПустаяСсылка();
	Если  СтруктураПараметров.Свойство("Region")и СтруктураПараметров.Свойство("RegionsDescription") тогда
		Район = Справочники.Районы.НайтиПоРеквизиту("Идентификатор",СтруктураПараметров.Region);
		Если Не ЗначениеЗаполнено(Район) тогда
			Район = Справочники.Районы.СоздатьЭлемент();
			Район.Идентификатор =  СтруктураПараметров.Region;
			Район.НаименованиеRU =  СтруктураПараметров.RegionsDescriptionRu;
			Район.Наименование =  СтруктураПараметров.RegionsDescription;
			Район.ОператорДоставки =  Перечисления.ОператорыДоставки.НоваяПочта;
			Район.Записать();
			РайонСсылка = Район.Ссылка;
		ИначеЕсли Район.Наименование <>  СтруктураПараметров.RegionsDescription тогда
			СпрРайон = Район.ПолучитьОбъект();
			СпрРайон.НаименованиеRU =  СтруктураПараметров.RegionsDescriptionRu;
			СпрРайон.Наименование =  СтруктураПараметров.RegionsDescription;
			СпрРайон.Записать();
			РайонСсылка = Район;
		КонецЕсли;
	КонецЕсли;
	СпрОбласть = Справочники.Области.НайтиПоРеквизиту("Идентификатор",СтруктураПараметров.Area); 
	Город = Справочники.ГородаДоставки.НайтиПоНаименованию(Строка.Наименование);  
	Если  ЗначениеЗаполнено(Город) тогда 
		ЕСЛИ НЕ ЗначениеЗаполнено(Город.ИдентификаторSettlement) тогда
			СпрГород = Город.ПолучитьОбъект();
			СпрГород.Район = РайонСсылка;
			СпрГород.ИдентификаторSettlement = Строка.Идентификатор;
			СпрГород.Записать();
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПолучитьОтвет(Адрес,ТекстXML, ответ = "")
	Попытка
		Попытка
			ХМЛХТТП = ПолучитьCOMОбъект("", "MSXML2.ServerXMLHTTP.6.0");
		Исключение
			ХМЛХТТП = ПолучитьCOMОбъект("", "Microsoft.XMLHTTP");
		КонецПопытки;
		
		ХМЛХТТП.Open("POST", Адрес, Ложь);
		ХМЛХТТП.SetRequestHeader("Content-Type", "text/xml");
		ХМЛХТТП.Send(ТекстXML);
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ХМЛХТТП.ResponseText);
		Читаем = Ложь;
		//Перебор узлов	
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ЧтениеXML.ЛокальноеИмя = "SettlementStreetDescriptionRu" Тогда
					Читаем = Истина;
				КонецЕсли;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				Если Читаем Тогда
					Ответ = XMLЗначение(Тип("Строка"), ЧтениеXML.Значение);
					Читаем = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
		
   		ЧтениеXML.Закрыть();	

		Возврат Ответ;
	Исключение 
		Возврат Ответ;
		
		//Возврат Неопределено
	КонецПопытки;
КонецФункции

   // Регистранция ЕН
   
Функция РегистрацияЕН(ДокССылка) Экспорт
	Если ТТНУжеСоздана(ДокССылка) тогда 
		Возврат Истина;
	КонецЕсли; 
	
	Успех = Ложь;	
	КлючAPI = ОбменНПСлужебный.ПолучитьКлючAPI();

	ОтправкаИзМагазина 	= ПолучитьМестоОтправки(ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокССылка,"МагазинОтправитель"));
	ДокЗаказ 			= ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокССылка,"ДокументОснование");
	ОтпраккаНаАдрес     = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокЗаказ,"ДоставкаНаАдрес");
	Если  ОтправкаИзМагазина тогда 
		Если ОтпраккаНаАдрес  тогда
			 Запрос =  ТТНАдресАдрес(ДокССылка,КлючAPI);
		Иначе
			 Запрос =  ТТНАдресОтделение(ДокССылка,КлючAPI);
		КонецЕсли;
	Иначе
		Если ОтпраккаНаАдрес  тогда
			 Запрос =  ТТНОтделениеАдрес(ДокССылка,КлючAPI);
		Иначе
			 Запрос =  ТТНОтделениеОтделение(ДокССылка,КлючAPI);
		КонецЕсли;
	КонецЕсли;
	Ответтекст=GetXMLResponserNewPost(запрос);
	Успех = Ложь;
	Если СтрЧислоВхождений(Ответтекст,"<success>true</success>") then 
		Успех = Истина;
		IntDocNumber = "";
		EstDocDate = Дата('00010101');
		DelCost = 0;
		ОтветФорма=("Накладная успешно создана!");
		Чтение=new ЧтениеXML;
		Чтение.УстановитьСтроку(Ответтекст);
		Пока (Чтение.Прочитать()) Цикл
			Если чтение.Имя="IntDocNumber" and чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента тогда
				чтение.Прочитать();
				IntDocNumber=чтение.Значение;
				//Список.Добавить(Значение,Имя);
			ИначеЕсли чтение.Имя="Ref" and чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента then
				чтение.Прочитать();
				RefDoc=чтение.Значение;
			ИначеЕсли чтение.Имя="EstimatedDeliveryDate" and чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента then
				чтение.Прочитать();
				EstDocDate=чтение.Значение;
			ИначеЕсли чтение.Имя="CostOnSite" and чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента then
				чтение.Прочитать();
				DelCost=?(чтение.Значение = "",0,Число(чтение.Значение));
			КонецЕсли;
		КонецЦикла;
		
		Если Не ПустаяСтрока(IntDocNumber) Тогда
			ЕНРефДок = RefDoc;
			СделатьЗаписиВРегистрРС(ДокССылка,RefDoc,DelCost,IntDocNumber,EstDocDate,Перечисления.ОператорыДоставки.НоваяПочта,"Создана ЭН");
  			СделатьЗаписиВРегистрРН(ДокССылка,DelCost,Перечисления.ОператорыДоставки.НоваяПочта); 
			СохранитьТТНвPDF(IntDocNumber,RefDoc);
		Иначе  
			//  Сделать запись в журнал о ошибке
			
			//Элементы.НадписьНомерЕН.Заголовок = "Возникла ошибка создания";
			//Сообщить("Регистрация ЕН
			//|"+СформироватьТекстОшибки(Ответтекст)); 
			Успех = Ложь;
			СделатьЗаписьВжурнал(СформироватьТекстОшибки(Ответтекст),ДокССылка);
		КонецЕсли;	
	Иначе
			СделатьЗаписьВжурнал(СформироватьТекстОшибки(Ответтекст),ДокССылка);
	КонецЕсли;
	
   	Возврат Успех
  КонецФункции

Функция ТТНУжеСоздана(ДокССылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнформацияТТН.НомерТТН КАК НомерТТН
		|ИЗ
		|	РегистрСведений.ИнформацияТТН КАК ИнформацияТТН
		|ГДЕ
		|	ИнформацияТТН.Регистратор = &Регистратор";
	
	Запрос.УстановитьПараметр("Регистратор", ДокССылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если   РезультатЗапроса.Пустой() тогда
		Возврат Ложь;
	ИНаче
		Возврат Истина;
	КонецЕсли;
	
КонецФункции  
  
Процедура  СделатьЗаписиВРегистрРС(ДокССылка,ТТН,СуммаОтОператора,НомерТТН,ДатаДоставки,ОператорДоставки,Статус)
ТекДата = ТекущаяДата();  

НаборЗаписей = РегистрыСведений.СтатусыТТН.СоздатьНаборЗаписей(); 

НаборЗаписей.Отбор.ДокументРегистратор.Установить(ДокССылка); 
НаборЗаписей.Отбор.ОператорДоставки.Установить(ОператорДоставки); 
НаборЗаписей.Отбор.Статус.Установить(Статус);    
НаборЗаписей.Отбор.Период.Установить(ТекДата);  

НоваяЗапись 					= НаборЗаписей.Добавить();
НоваяЗапись.ДокументРегистратор    = ДокССылка; 
НоваяЗапись.Период 				= ТекДата;
НоваяЗапись.ОператорДоставки    = ОператорДоставки; 
НоваяЗапись.Статус    			= Статус; 
НаборЗаписей.Записать();  

НаборЗаписей = РегистрыСведений.ИнформацияТТН.СоздатьНаборЗаписей(); 
НаборЗаписей.Отбор.Регистратор.Установить(ДокССылка); 
НоваяЗапись 					= НаборЗаписей.Добавить();
НоваяЗапись.Документ 			= ДокССылка;
НоваяЗапись.Регистратор 		= ДокССылка;
НоваяЗапись.НомерТТН 			= НомерТТН;
НоваяЗапись.СуммаОтОператора 	= СуммаОтОператора;
НоваяЗапись.ТТН 				= ТТН; 
НоваяЗапись.ДатаДоставки 		= ДатаДоставки; 
НоваяЗапись.ОператорДоставки    = ОператорДоставки; 
НоваяЗапись.ДатаИзменения    	= ТекДата; 
НаборЗаписей.Записать();  


КонецПроцедуры

  
Процедура  СделатьЗаписиВРегистрРН(ДокССылка,Сумма,ОператорДоставки)
 	НаборЗаписей = РегистрыНакопления.ТТН.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДокССылка);
	Запись 					= НаборЗаписей.ДобавитьПриход();
	Запись.Регистратор 		= ДокССылка;
	Запись.ОператорДоставки = ОператорДоставки;
	Запись.Сумма 			= Сумма;  
	Запись.Период 			= ТекущаяДата();  
	НаборЗаписей.Записать();   
КонецПроцедуры



Процедура СделатьЗаписьВжурнал(СписокОшибок,ДокСсылка)
	ЖурналСобытий.Регистрация("Ошибка создания ТТН  Новая Почта",,,ДокСсылка,,СписокОшибок);	
КонецПроцедуры

Функция СформироватьТекстОшибки(Текст)
	тзОшибки = новый ТаблицаЗначений;
	тзОшибки.Колонки.Добавить("Код");
	тзОшибки.Колонки.Добавить("ТекстUk");
	тзОшибки.Колонки.Добавить("ТекстEn");
	СтрокаОшибки = "Ошибки:";
	СтрокаОшибкиСтар = "Ошибки:";
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Текст);
	Пока(Чтение.Прочитать()) Цикл
		Если Чтение.Имя="item" И Чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			Чтение.Прочитать();
			//СтрокаОшибкиСтар = СтрокаОшибкиСтар+"
			//|"+СокрЛП(Чтение.Значение);
			СтруктураОтбора = новый структура;
			Структураотбора.Вставить("Код",СокрЛП(Чтение.Значение));
			СтрокиТаблицы = тзОшибки.НайтиСтроки(Структураотбора);
			Если СтрокиТаблицы.Количество() > 0 Тогда
				СтрокаОшибки = СтрокаОшибки +"
				|"+СтрокиТаблицы[0].Код+", "+?(СокрЛП(СтрокиТаблицы[0].ТекстUk) = "",СокрЛП(СтрокиТаблицы[0].ТекстEn),СокрЛП(СтрокиТаблицы[0].ТекстUk));
			Иначе
				СтрокаОшибки = СтрокаОшибки +", "+Чтение.Значение;

			конецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат СтрокаОшибки;
КонецФункции


Функция ТТНАдресАдрес1(ДокССылка,КлючAPI)
 	Метод = "save";
	РефДок = "";
	ЕНРефДок = "";

		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗапросДоступностиТоваров.ДокументОснование.СтатусОплаты КАК ДокументОснованиеСтатусОплаты,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаОплаты КАК ДокументОснованиеСуммаОплаты,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаДоставкиОплачена КАК ДокументОснованиеСуммаДоставкиОплачена,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаДоставкиОператор КАК ДокументОснованиеСуммаДоставкиОператор,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаДоставки КАК ДокументОснованиеСуммаДоставки,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Город) = ТИП(Справочник.ГородаДоставки)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Город.Наименование
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Город
		|	КОНЕЦ КАК ДокументОснованиеГород,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Отделение) = ТИП(Справочник.Отделения)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Отделение.НомерОтделения
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Отделение) = ТИП(Справочник.Почтоматы)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Отделение.НомерОтделения
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Отделение
		|	КОНЕЦ КАК ДокументОснованиеОтделение,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Улица) = ТИП(Справочник.Улицы)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Улица.Наименование
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Улица
		|	КОНЕЦ КАК ДокументОснованиеУлица,
		|	ЗапросДоступностиТоваров.ДокументОснование.Дом КАК ДокументОснованиеДом,
		|	ЗапросДоступностиТоваров.ДокументОснование.Квартира КАК ДокументОснованиеКвартира,
		|	ВЫБОР
		|		КОГДА ЗапросДоступностиТоваров.ДокументОснование.Фамилия = """"
		|			ТОГДА ФИОФизЛиц.Фамилия
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Фамилия
		|	КОНЕЦ КАК Фамилия,
		|	ВЫБОР
		|		КОГДА ЗапросДоступностиТоваров.ДокументОснование.Имя = """"
		|			ТОГДА ФИОФизЛиц.Имя
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Имя
		|	КОНЕЦ КАК Имя,
		|	ВЫБОР
		|		КОГДА ЗапросДоступностиТоваров.ДокументОснование.Отчество = """"
		|			ТОГДА ФИОФизЛиц.Отчество
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Отчество
		|	КОНЕЦ КАК Отчество,
		|	ЗапросДоступностиТоваров.ДокументОснование.Телефон КАК ДокументОснованиеТелефон,
		|	ЗапросДоступностиТоваров.ДокументОснование.Контрагент КАК ДокументОснованиеКонтрагент,
		|	ЗапросДоступностиТоваров.ДокументОснование.ДоставкаНаАдрес КАК ДокументОснованиеДоставкаНаАдрес,
		|	ЗапросДоступностиТоваров.СуммаДокумента КАК КонтрольОплаты,
		|	ЗапросДоступностиТоваров.Дата КАК Дата,
		|	ЗапросДоступностиТоваров.МагазинОтправитель КАК МагазинОтправитель,
		|	ЗапросДоступностиТоваров.ДокументОснование.Район КАК Район,
		|	ЗапросДоступностиТоваров.ДокументОснование.Область КАК Область,
		|	ЗапросДоступностиТоваров.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров КАК ЗапросДоступностиТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
		|		ПО ЗапросДоступностиТоваров.ДокументОснование.Контрагент.ФизЛицо = ФИОФизЛиц.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|		ПО ЗапросДоступностиТоваров.МагазинОтправитель = НастройкиСлужбДоставки.Магазин
		|ГДЕ
		|	ЗапросДоступностиТоваров.Ссылка = &Ссылка";
    Запрос.УстановитьПараметр("Ссылка",ДокССылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
    БлокПолучателя = "";
	Адрес = "";
	
	
	Места = ЗаполнитьКоличествоМест(ДокССылка);
	ДопУслуги = "";	
	Если ДеньНедели(ТекущаяДата()) = 6 Тогда
		ДопУслуги = ДопУслуги + "
		|	<SaturdayDelivery>1</SaturdayDelivery>";
	КонецЕсли; 
	Если  Выборка.СуммаОплаты > 0 тогда
		ДопУслуги = ДопУслуги + "
		|	<AfterpaymentOnGoodsCost>"+стрЗаменить(ВЫборка.КонтрольОплаты,Символы.НПП,"")+"</AfterpaymentOnGoodsCost>";
	
		ОбратнаяДоставка = "";
			СуммаОД = "
			|	<RedeliveryString>"+СтрЗаменить(Строка(Выборка.СуммаОплаты),Символы.НПП,"")+"</RedeliveryString>";
		ОбратнаяДоставка = ОбратнаяДоставка + "
		|	<BackwardDeliveryData>
		|	<item>
		|	<PayerType>"+сокрЛП("Recipient")+"</PayerType>
		|	<CargoType>"+сокрЛП("Money")+"</CargoType>"+СуммаОД+"
		|	</item>
		|	</BackwardDeliveryData>";
	
		ОписаниеГрузаДет =  "
		|<CargoDetails>
		|<item>
		|<CargoDescription>"+"Товары для детей"+"</CargoDescription>
		|<Amount>"+стрЗаменить(Строка(1),символы.НПП,"")+"</Amount>
		|</item>
		|</CargoDetails>";
	КонецЕсли;
	
	Адрес = сокрлп(Выборка.Отделение);

	БлокПолучателя = БлокПолучателя + "
			|<NewAddress>1</NewAddress>
			|<RecipientCityName>"+сокрлп(Выборка.Город)+"</RecipientCityName>
			|<RecipientArea>"+сокрлп(Выборка.Область)+"</RecipientArea>
			|<RecipientAreaRegions>"+сокрлп(Выборка.Район)+"</RecipientAreaRegions>
			|<RecipientName>"+сокрлп(Выборка.ФИОКлиента)+"</RecipientName>
			|<RecipientType>PrivatePerson</RecipientType>";
	Лицо3 			= "";
	ContactSender 	= ПолучитьКонтактноеЛицо(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);	
	Sender 		  	= ПолучитьОтправителя(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);	
  	CitySender	 	= ПолучитьГородОтправителя(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);
	SendersPhone  	= ПолучитьТелефонОтправителя(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);
	SenderAddress 	= ПолучитьАдресОтправки(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);
    Если выборка.СуммаДоставкиОператор > 0 тогда
		PayerType 	= "Recipient";
   		PForm 		= "Cash";
	Иначе
		PayerType 	= "Sender";	
   		PForm 		= "NonCash";
	КонецЕсли;
	DescriptionCargo = "Товары для детей";
	ServiceType = "DoorsDoors";	
	Мест = ПолучитьКоличествоМест(ДокСсылка);  
	Если ЗначениеЗаполнено(Выборка.НомерТелефона) тогда
		RecipientsPhone = СокрЛП(Выборка.НомерТелефона);
	Иначе 
		RecipientsPhone = СокрЛП(ПолучитьНомерТелефона(Выборка.Контрагент)); 
	КонецЕсли;
	CargoType = "Parcel";
	СтоимостьЗаказа = Выборка.СтоимостьДокумента;
	Мест = ПолучитьКоличествоМест(ДокСсылка);    
	Вес = ПолучитьВес(ДокСсылка);  
	Объем = ПолучитьОбъем(ДокСсылка);
	
	запрос=
	"<root>
	|<apiKey>[ВАШ КЛЮЧ]</apiKey>
	|<modelName>InternetDocument</modelName>
	|<calledMethod>"+Метод+"</calledMethod>
	|<methodProperties>
	|<CargoType>"+CargoType+"</CargoType>
	|<Cost>"+СтоимостьЗаказа+"</Cost>
	|<DateTime>"+Формат(ВЫборка.Дата,"ДФ=dd.MM.yyyy")+"</DateTime>
	|<Description>"+DescriptionCargo+"</Description>
	|<PayerType>"+PayerType+"</PayerType>"+Лицо3+"
	|<PaymentMethod>"+PForm+"</PaymentMethod>
	|<VolumeGeneral>"+Объем+"</VolumeGeneral>
	|<Weight>"+Вес+"</Weight>
	|<SeatsAmount>"+Строка(Мест)+"</SeatsAmount>
	|<ServiceType>"+ServiceType+"</ServiceType>"+ДопУслуги+ОбратнаяДоставка+"
	|<CitySender>"+CitySender+"</CitySender>
	|<Sender>"+Sender+"</Sender>
	|<SenderAddress>"+SenderAddress+"</SenderAddress>
	|<ContactSender>"+ContactSender+"</ContactSender>
	|<SendersPhone>"+SendersPhone+"</SendersPhone>"+Блокполучателя+"
	|<RecipientsPhone>"+RecipientsPhone+"</RecipientsPhone>
	|</methodProperties>
	|</root>";
	Запрос=СтрЗаменить(Запрос,"[ВАШ КЛЮЧ]",КлючAPI);

	КонецЦикла;	
    Возврат  Запрос;
	
КонецФункции


Функция ТТНАдресАдрес(ДокССылка,КлючAPI)  
 	Метод = "save";
	РефДок = "";
	ЕНРефДок = "";

		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗапросДоступностиТоваров.ДокументОснование.СтатусОплаты КАК СтатусОплаты,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаОплаты КАК СуммаОплаты,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаДоставкиОплачена КАК СуммаДоставкиОплачена,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаДоставкиОператор КАК СуммаДоставкиОператор,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаДоставки КАК СуммаДоставки,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Город) = ТИП(Справочник.ГородаДоставки)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Город.Наименование
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Город
		|	КОНЕЦ КАК Город,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Отделение) = ТИП(Справочник.Отделения)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Отделение.НомерОтделения
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Отделение) = ТИП(Справочник.Почтоматы)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Отделение.НомерОтделения
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Отделение
		|	КОНЕЦ КАК Отделение,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Улица) = ТИП(Справочник.Улицы)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Улица.Наименование
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Улица
		|	КОНЕЦ КАК Улица,
		|	ЗапросДоступностиТоваров.ДокументОснование.Дом КАК Дом,
		|	ЗапросДоступностиТоваров.ДокументОснование.Квартира КАК Квартира,
		|	ВЫБОР
		|		КОГДА ЗапросДоступностиТоваров.ДокументОснование.Фамилия = """"
		|			ТОГДА ФИОФизЛиц.Фамилия
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Фамилия
		|	КОНЕЦ КАК Фамилия,
		|	ВЫБОР
		|		КОГДА ЗапросДоступностиТоваров.ДокументОснование.Имя = """"
		|			ТОГДА ФИОФизЛиц.Имя
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Имя
		|	КОНЕЦ КАК Имя,
		|	ВЫБОР
		|		КОГДА ЗапросДоступностиТоваров.ДокументОснование.Отчество = """"
		|			ТОГДА ФИОФизЛиц.Отчество
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Отчество
		|	КОНЕЦ КАК Отчество,
		|	ЗапросДоступностиТоваров.ДокументОснование.Телефон КАК НомерТелефона,
		|	ЗапросДоступностиТоваров.ДокументОснование.Контрагент КАК Контрагент,
		|	ЗапросДоступностиТоваров.ДокументОснование.ДоставкаНаАдрес КАК ДоставкаНаАдрес,
		|	ЗапросДоступностиТоваров.СуммаДокумента КАК КонтрольОплаты,
		|	ЗапросДоступностиТоваров.Дата КАК Дата,
		|	ЗапросДоступностиТоваров.МагазинОтправитель КАК МагазинОтправитель,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Город) = ТИП(Справочник.ГородаДоставки)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Город.Район.Наименование
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Район
		|	КОНЕЦ КАК Район,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Город) = ТИП(Справочник.ГородаДоставки)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Город.Область.Наименование
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Область
		|	КОНЕЦ КАК Область,
		|	ЗапросДоступностиТоваров.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров КАК ЗапросДоступностиТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
		|		ПО ЗапросДоступностиТоваров.ДокументОснование.Контрагент.ФизЛицо = ФИОФизЛиц.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|		ПО ЗапросДоступностиТоваров.МагазинОтправитель = НастройкиСлужбДоставки.Магазин
		|ГДЕ
		|	ЗапросДоступностиТоваров.Ссылка = &Ссылка";
	
    Запрос.УстановитьПараметр("Ссылка",ДокССылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
    БлокПолучателя = "";
	Адрес = "";
	
	
	Места = ЗаполнитьКоличествоМест(ДокССылка);
	ДопУслуги = "";	
	Если ДеньНедели(ТекущаяДата()) = 6 Тогда
		ДопУслуги = ДопУслуги + "
		|	<SaturdayDelivery>1</SaturdayDelivery>";
	КонецЕсли; 
	Если  Выборка.СуммаОплаты > 0 тогда
		ДопУслуги = ДопУслуги + "
		|	<AfterpaymentOnGoodsCost>"+стрЗаменить(Выборка.СуммаОплаты,Символы.НПП,"")+"</AfterpaymentOnGoodsCost>";
	КонецЕсли;                   
	ФиоКлиента = "";
	ФИОКлиента = СокрЛП(Выборка.Фамилия)+ " " + СокрЛП(Выборка.Имя)+ " " + СокрЛП(Выборка.Отчество);
	Адрес = сокрлп(Выборка.Отделение);

	БлокПолучателя = БлокПолучателя + "
			|<NewAddress>1</NewAddress>
			|<RecipientCityName>"+сокрлп(Выборка.Город)+"</RecipientCityName>
			|<RecipientArea>"+сокрлп(Выборка.Область)+"</RecipientArea>
			|<RecipientAreaRegions>"+сокрлп(Выборка.Район)+"</RecipientAreaRegions>
			|<RecipientAddressName>"+СокрЛП(Выборка.Улица)+"</RecipientAddressName>
			|<RecipientHouse>"+Строка(Выборка.Дом)+"</RecipientHouse>
			|<RecipientFlat>"+Строка(Выборка.Квартира)+"</RecipientFlat>
			|<RecipientName>"+сокрлп(ФИОКлиента)+"</RecipientName>
			|<RecipientType>PrivatePerson</RecipientType>";
	Лицо3 			= "";
	ContactSender 	= ПолучитьКонтактноеЛицо(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);	
	Sender 		  	= ПолучитьОтправителя(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);	
  	CitySender	 	= ПолучитьГородОтправителя(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);
	SendersPhone  	= ПолучитьТелефонОтправителя(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);
	SenderAddress 	= ПолучитьАдресОтправки(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);
    Если выборка.СуммаДоставкиОператор > 0 тогда
		PayerType 	= "Recipient";
   		PForm 		= "Cash";
	Иначе
		PayerType 	= "Sender";	
   		PForm 		= "NonCash";
	КонецЕсли;
	DescriptionCargo = "Товары для детей";
	ServiceType = "DoorsDoors";	
	Мест = ПолучитьКоличествоМест(ДокСсылка);  
	Если ЗначениеЗаполнено(Выборка.НомерТелефона) тогда
		RecipientsPhone = СокрЛП(Выборка.НомерТелефона);
	Иначе 
		RecipientsPhone = СокрЛП(ПолучитьНомерТелефона(Выборка.Контрагент)); 
	КонецЕсли;
	CargoType = "Parcel";
	СтоимостьЗаказа = Выборка.СуммаДокумента;
	Мест = ПолучитьКоличествоМест(ДокСсылка);    
	Вес = ПолучитьВес(ДокСсылка);  
	Объем = ПолучитьОбъем(ДокСсылка);
	ОбратнаяДоставка = "";
	запрос=
	"<root>
	|<apiKey>[ВАШ КЛЮЧ]</apiKey>
	|<modelName>InternetDocument</modelName>
	|<calledMethod>"+Метод+"</calledMethod>
	|<methodProperties>
	|<CargoType>"+CargoType+"</CargoType>
	|<Cost>"+СтоимостьЗаказа+"</Cost>
	|<DateTime>"+Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy")+"</DateTime>
	|<Description>"+DescriptionCargo+"</Description>
	|<PayerType>"+PayerType+"</PayerType>"+Лицо3+"
	|<PaymentMethod>"+PForm+"</PaymentMethod>
	|<VolumeGeneral>"+Объем+"</VolumeGeneral>
	|<Weight>"+Вес+"</Weight>
	|<SeatsAmount>"+Строка(Мест)+"</SeatsAmount>
	|<ServiceType>"+ServiceType+"</ServiceType>"+ДопУслуги+ОбратнаяДоставка+"
	|<CitySender>"+CitySender+"</CitySender>
	|<Sender>"+Sender+"</Sender>
	|<SenderAddress>"+SenderAddress+"</SenderAddress>
	|<ContactSender>"+ContactSender+"</ContactSender>
	|<SendersPhone>"+SendersPhone+"</SendersPhone>"+Блокполучателя+"
	|<RecipientsPhone>"+RecipientsPhone+"</RecipientsPhone>
	|</methodProperties>
	|</root>";
	Запрос=СтрЗаменить(Запрос,"[ВАШ КЛЮЧ]",КлючAPI);

	КонецЦикла;	
    Возврат  Запрос;
КонецФункции
 


Функция ТТНАдресОтделение(ДокССылка,КлючAPI)  
 	Метод = "save";
	РефДок = "";
	ЕНРефДок = "";

		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗапросДоступностиТоваров.ДокументОснование.СтатусОплаты КАК СтатусОплаты,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаОплаты КАК СуммаОплаты,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаДоставкиОплачена КАК СуммаДоставкиОплачена,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаДоставкиОператор КАК СуммаДоставкиОператор,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаДоставки КАК СуммаДоставки,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Город) = ТИП(Справочник.ГородаДоставки)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Город.Наименование
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Город
		|	КОНЕЦ КАК Город,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Отделение) = ТИП(Справочник.Отделения)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Отделение.НомерОтделения
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Отделение) = ТИП(Справочник.Почтоматы)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Отделение.НомерОтделения
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Отделение
		|	КОНЕЦ КАК Отделение,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Улица) = ТИП(Справочник.Улицы)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Улица.Наименование
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Улица
		|	КОНЕЦ КАК Улица,
		|	ЗапросДоступностиТоваров.ДокументОснование.Дом КАК Дом,
		|	ЗапросДоступностиТоваров.ДокументОснование.Квартира КАК Квартира,
		|	ВЫБОР
		|		КОГДА ЗапросДоступностиТоваров.ДокументОснование.Фамилия = """"
		|			ТОГДА КлючевыеАтрибутыКонтрагентовСрезПоследних.Фамилия
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Фамилия
		|	КОНЕЦ КАК Фамилия,
		|	ВЫБОР
		|		КОГДА ЗапросДоступностиТоваров.ДокументОснование.Имя = """"
		|			ТОГДА КлючевыеАтрибутыКонтрагентовСрезПоследних.Имя
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Имя
		|	КОНЕЦ КАК Имя,
		|	ВЫБОР
		|		КОГДА ЗапросДоступностиТоваров.ДокументОснование.Отчество = """"
		|			ТОГДА КлючевыеАтрибутыКонтрагентовСрезПоследних.Отчество
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Отчество
		|	КОНЕЦ КАК Отчество,
		|	ЗапросДоступностиТоваров.ДокументОснование.Телефон КАК НомерТелефона,
		|	ЗапросДоступностиТоваров.ДокументОснование.Контрагент КАК Контрагент,
		|	ЗапросДоступностиТоваров.ДокументОснование.ДоставкаНаАдрес КАК ДоставкаНаАдрес,
		|	ЗапросДоступностиТоваров.СуммаДокумента КАК КонтрольОплаты,
		|	ЗапросДоступностиТоваров.Дата КАК Дата,
		|	ЗапросДоступностиТоваров.МагазинОтправитель КАК МагазинОтправитель,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Город) = ТИП(Справочник.ГородаДоставки)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Город.Район.Наименование
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Район
		|	КОНЕЦ КАК Район,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Город) = ТИП(Справочник.ГородаДоставки)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Город.Область.Наименование
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Область
		|	КОНЕЦ КАК Область,
		|	ЗапросДоступностиТоваров.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров КАК ЗапросДоступностиТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|		ПО ЗапросДоступностиТоваров.МагазинОтправитель = НастройкиСлужбДоставки.Магазин
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлючевыеАтрибутыКонтрагентов.СрезПоследних(, ) КАК КлючевыеАтрибутыКонтрагентовСрезПоследних
		|		ПО ЗапросДоступностиТоваров.ДокументОснование.Контрагент = КлючевыеАтрибутыКонтрагентовСрезПоследних.Объект
		|ГДЕ
		|	ЗапросДоступностиТоваров.Ссылка = &Ссылка";
	
    Запрос.УстановитьПараметр("Ссылка",ДокССылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
    БлокПолучателя = "";
	Адрес = "";
	
	
	Места = ЗаполнитьКоличествоМест(ДокССылка);
	ДопУслуги = "";	
	Если ДеньНедели(ТекущаяДата()) = 6 Тогда
		ДопУслуги = ДопУслуги + "
		|	<SaturdayDelivery>1</SaturdayDelivery>";
	КонецЕсли; 
	Если  Выборка.СуммаОплаты > 0 тогда
		ДопУслуги = ДопУслуги + "
		|	<AfterpaymentOnGoodsCost>"+стрЗаменить(Выборка.СуммаОплаты,Символы.НПП,"")+"</AfterpaymentOnGoodsCost>";
	КонецЕсли;                   
	ФиоКлиента = "";
	ФИОКлиента = СокрЛП(Выборка.Фамилия)+ " " + СокрЛП(Выборка.Имя)+ " " + СокрЛП(Выборка.Отчество);
	Адрес = сокрлп(Выборка.Отделение);

	БлокПолучателя = БлокПолучателя + "
	|<NewAddress>1</NewAddress>
	|<RecipientCityName>"+сокрлп(Выборка.Город)+"</RecipientCityName>
	|<RecipientArea>"+сокрлп(Выборка.Область)+"</RecipientArea>
	|<RecipientAreaRegions>"+сокрлп(Выборка.Район)+"</RecipientAreaRegions>
	|<RecipientAddressName>"+Выборка.Отделение+"</RecipientAddressName>
	|<RecipientHouse></RecipientHouse>
	|<RecipientFlat></RecipientFlat>
	|<RecipientName>"+ФИОКлиента+"</RecipientName>
	|<RecipientType>PrivatePerson</RecipientType>";
	Лицо3 			= "";
	ContactSender 	= ПолучитьКонтактноеЛицо(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);	
	Sender 		  	= ПолучитьОтправителя(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);	
  	CitySender	 	= ПолучитьГородОтправителя(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);
	SendersPhone  	= ПолучитьТелефонОтправителя(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);
	SenderAddress 	= ПолучитьАдресОтправки(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);
    Если выборка.СуммаДоставкиОператор > 0 тогда
		PayerType 	= "Recipient";
   		PForm 		= "Cash";
	Иначе
		PayerType 	= "Sender";	
   		PForm 		= "NonCash";
	КонецЕсли;
	DescriptionCargo = "Товары для детей";
	ServiceType = "DoorsWarehouse";	
	Мест = ПолучитьКоличествоМест(ДокСсылка);  
	Если ЗначениеЗаполнено(Выборка.НомерТелефона) тогда
		RecipientsPhone = СокрЛП(Выборка.НомерТелефона);
	Иначе 
		RecipientsPhone = СокрЛП(ПолучитьНомерТелефона(Выборка.Контрагент)); 
	КонецЕсли;
	CargoType = "Parcel";
	СтоимостьЗаказа = Выборка.СуммаДокумента;
	Мест = ПолучитьКоличествоМест(ДокСсылка);    
	Вес = ПолучитьВес(ДокСсылка);  
	Объем = ПолучитьОбъем(ДокСсылка);
	ОбратнаяДоставка = "";
	запрос=
	"<root>
	|<apiKey>[ВАШ КЛЮЧ]</apiKey>
	|<modelName>InternetDocument</modelName>
	|<calledMethod>"+Метод+"</calledMethod>
	|<methodProperties>
	|<CargoType>"+CargoType+"</CargoType>
	|<Cost>"+СтоимостьЗаказа+"</Cost>
	|<DateTime>"+Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy")+"</DateTime>
	|<Description>"+DescriptionCargo+"</Description>
	|<PayerType>"+PayerType+"</PayerType>"+Лицо3+"
	|<PaymentMethod>"+PForm+"</PaymentMethod>
	|<VolumeGeneral>"+Объем+"</VolumeGeneral>
	|<Weight>"+Вес+"</Weight>
	|<SeatsAmount>"+Строка(Мест)+"</SeatsAmount>
	|<ServiceType>"+ServiceType+"</ServiceType>"+ДопУслуги+ОбратнаяДоставка+"
	|<CitySender>"+CitySender+"</CitySender>
	|<Sender>"+Sender+"</Sender>
	|<SenderAddress>"+SenderAddress+"</SenderAddress>
	|<ContactSender>"+ContactSender+"</ContactSender>
	|<SendersPhone>"+SendersPhone+"</SendersPhone>"+Блокполучателя+"
	|<RecipientsPhone>"+RecipientsPhone+"</RecipientsPhone>
	|</methodProperties>
	|</root>";
	Запрос=СтрЗаменить(Запрос,"[ВАШ КЛЮЧ]",КлючAPI);

	КонецЦикла;	
    Возврат  Запрос;
КонецФункции
 

Функция ТТНОтделениеОтделение(ДокССылка,КлючAPI)  
 	Метод = "save";
	РефДок = "";
	ЕНРефДок = "";

		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗапросДоступностиТоваров.ДокументОснование.СтатусОплаты КАК СтатусОплаты,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаОплаты КАК СуммаОплаты,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаДоставкиОплачена КАК СуммаДоставкиОплачена,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаДоставкиОператор КАК СуммаДоставкиОператор,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаДоставки КАК СуммаДоставки,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Город) = ТИП(Справочник.ГородаДоставки)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Город.Наименование
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Город
		|	КОНЕЦ КАК Город,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Отделение) = ТИП(Справочник.Отделения)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Отделение.НомерОтделения
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Отделение) = ТИП(Справочник.Почтоматы)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Отделение.НомерОтделения
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Отделение
		|	КОНЕЦ КАК Отделение,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Улица) = ТИП(Справочник.Улицы)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Улица.Наименование
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Улица
		|	КОНЕЦ КАК Улица,
		|	ЗапросДоступностиТоваров.ДокументОснование.Дом КАК Дом,
		|	ЗапросДоступностиТоваров.ДокументОснование.Квартира КАК Квартира,
		|	ВЫБОР
		|		КОГДА ЗапросДоступностиТоваров.ДокументОснование.Фамилия = """"
		|			ТОГДА ФИОФизЛиц.Фамилия
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Фамилия
		|	КОНЕЦ КАК Фамилия,
		|	ВЫБОР
		|		КОГДА ЗапросДоступностиТоваров.ДокументОснование.Имя = """"
		|			ТОГДА ФИОФизЛиц.Имя
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Имя
		|	КОНЕЦ КАК Имя,
		|	ВЫБОР
		|		КОГДА ЗапросДоступностиТоваров.ДокументОснование.Отчество = """"
		|			ТОГДА ФИОФизЛиц.Отчество
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Отчество
		|	КОНЕЦ КАК Отчество,
		|	ЗапросДоступностиТоваров.ДокументОснование.Телефон КАК НомерТелефона,
		|	ЗапросДоступностиТоваров.ДокументОснование.Контрагент КАК Контрагент,
		|	ЗапросДоступностиТоваров.ДокументОснование.ДоставкаНаАдрес КАК ДоставкаНаАдрес,
		|	ЗапросДоступностиТоваров.СуммаДокумента КАК КонтрольОплаты,
		|	ЗапросДоступностиТоваров.Дата КАК Дата,
		|	ЗапросДоступностиТоваров.МагазинОтправитель КАК МагазинОтправитель,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Город) = ТИП(Справочник.ГородаДоставки)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Город.Район.Наименование
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Район
		|	КОНЕЦ КАК Район,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Город) = ТИП(Справочник.ГородаДоставки)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Город.Область.Наименование
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Область
		|	КОНЕЦ КАК Область,
		|	ЗапросДоступностиТоваров.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров КАК ЗапросДоступностиТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
		|		ПО ЗапросДоступностиТоваров.ДокументОснование.Контрагент.ФизЛицо = ФИОФизЛиц.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|		ПО ЗапросДоступностиТоваров.МагазинОтправитель = НастройкиСлужбДоставки.Магазин
		|ГДЕ
		|	ЗапросДоступностиТоваров.Ссылка = &Ссылка";
	
    Запрос.УстановитьПараметр("Ссылка",ДокССылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
    БлокПолучателя = "";
	Адрес = "";
	
	
	Места = ЗаполнитьКоличествоМест(ДокССылка);
	ДопУслуги = "";	
	Если ДеньНедели(ТекущаяДата()) = 6 Тогда
		ДопУслуги = ДопУслуги + "
		|	<SaturdayDelivery>1</SaturdayDelivery>";
	КонецЕсли; 
	Если  Выборка.СуммаОплаты > 0 тогда
		ДопУслуги = ДопУслуги + "
		|	<AfterpaymentOnGoodsCost>"+стрЗаменить(Выборка.СуммаОплаты,Символы.НПП,"")+"</AfterpaymentOnGoodsCost>";
	КонецЕсли;                   
	ФиоКлиента = "";
	ФИОКлиента = СокрЛП(Выборка.Фамилия)+ " " + СокрЛП(Выборка.Имя)+ " " + СокрЛП(Выборка.Отчество);
	Адрес = сокрлп(Выборка.Отделение);

	БлокПолучателя = БлокПолучателя + "
	|<NewAddress>1</NewAddress>
	|<RecipientCityName>"+сокрлп(Выборка.Город)+"</RecipientCityName>
	|<RecipientArea>"+сокрлп(Выборка.Область)+"</RecipientArea>
	|<RecipientAreaRegions>"+сокрлп(Выборка.Район)+"</RecipientAreaRegions>
	|<RecipientAddressName>"+Выборка.Отделение+"</RecipientAddressName>
	|<RecipientHouse></RecipientHouse>
	|<RecipientFlat></RecipientFlat>
	|<RecipientName>"+ФИОКлиента+"</RecipientName>
	|<RecipientType>PrivatePerson</RecipientType>";
	Лицо3 			= "";
	ContactSender 	= ПолучитьКонтактноеЛицо(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);	
	Sender 		  	= ПолучитьОтправителя(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);	
  	CitySender	 	= ПолучитьГородОтправителя(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);
	SendersPhone  	= ПолучитьТелефонОтправителя(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);
	SenderAddress 	= ПолучитьОтделениеОтправки(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);
    Если выборка.СуммаДоставкиОператор > 0 тогда
		PayerType 	= "Recipient";
   		PForm 		= "Cash";
	Иначе
		PayerType 	= "Sender";	
   		PForm 		= "NonCash";
	КонецЕсли;
	DescriptionCargo = "Товары для детей";
	ServiceType = "WarehouseWarehouse";	
	Мест = ПолучитьКоличествоМест(ДокСсылка);  
	Если ЗначениеЗаполнено(Выборка.НомерТелефона) тогда
		RecipientsPhone = СокрЛП(Выборка.НомерТелефона);
	Иначе 
		RecipientsPhone = СокрЛП(ПолучитьНомерТелефона(Выборка.Контрагент)); 
	КонецЕсли;
	CargoType = "Parcel";
	СтоимостьЗаказа = Выборка.СуммаДокумента;
	Мест = ПолучитьКоличествоМест(ДокСсылка);    
	Вес = ПолучитьВес(ДокСсылка);  
	Объем = ПолучитьОбъем(ДокСсылка);
	ОбратнаяДоставка = "";
	запрос=
	"<root>
	|<apiKey>[ВАШ КЛЮЧ]</apiKey>
	|<modelName>InternetDocument</modelName>
	|<calledMethod>"+Метод+"</calledMethod>
	|<methodProperties>
	|<CargoType>"+CargoType+"</CargoType>
	|<Cost>"+СтоимостьЗаказа+"</Cost>
	|<DateTime>"+Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy")+"</DateTime>
	|<Description>"+DescriptionCargo+"</Description>
	|<PayerType>"+PayerType+"</PayerType>"+Лицо3+"
	|<PaymentMethod>"+PForm+"</PaymentMethod>
	|<VolumeGeneral>"+Объем+"</VolumeGeneral>
	|<Weight>"+Вес+"</Weight>
	|<SeatsAmount>"+Строка(Мест)+"</SeatsAmount>
	|<ServiceType>"+ServiceType+"</ServiceType>"+ДопУслуги+ОбратнаяДоставка+"
	|<CitySender>"+CitySender+"</CitySender>
	|<Sender>"+Sender+"</Sender>
	|<SenderAddress>"+SenderAddress+"</SenderAddress>
	|<ContactSender>"+ContactSender+"</ContactSender>
	|<SendersPhone>"+SendersPhone+"</SendersPhone>"+Блокполучателя+"
	|<RecipientsPhone>"+RecipientsPhone+"</RecipientsPhone>
	|</methodProperties>
	|</root>";
	Запрос=СтрЗаменить(Запрос,"[ВАШ КЛЮЧ]",КлючAPI);

	КонецЦикла;	
    Возврат  Запрос;
КонецФункции


Функция ТТНОтделениеАдрес(ДокССылка,КлючAPI)  
 	Метод = "save";
	РефДок = "";
	ЕНРефДок = "";

		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗапросДоступностиТоваров.ДокументОснование.СтатусОплаты КАК СтатусОплаты,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаОплаты КАК СуммаОплаты,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаДоставкиОплачена КАК СуммаДоставкиОплачена,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаДоставкиОператор КАК СуммаДоставкиОператор,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаДоставки КАК СуммаДоставки,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Город) = ТИП(Справочник.ГородаДоставки)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Город.Наименование
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Город
		|	КОНЕЦ КАК Город,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Отделение) = ТИП(Справочник.Отделения)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Отделение.НомерОтделения
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Отделение) = ТИП(Справочник.Почтоматы)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Отделение.НомерОтделения
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Отделение
		|	КОНЕЦ КАК Отделение,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Улица) = ТИП(Справочник.Улицы)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Улица.Наименование
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Улица
		|	КОНЕЦ КАК Улица,
		|	ЗапросДоступностиТоваров.ДокументОснование.Дом КАК Дом,
		|	ЗапросДоступностиТоваров.ДокументОснование.Квартира КАК Квартира,
		|	ВЫБОР
		|		КОГДА ЗапросДоступностиТоваров.ДокументОснование.Фамилия = """"
		|			ТОГДА ФИОФизЛиц.Фамилия
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Фамилия
		|	КОНЕЦ КАК Фамилия,
		|	ВЫБОР
		|		КОГДА ЗапросДоступностиТоваров.ДокументОснование.Имя = """"
		|			ТОГДА ФИОФизЛиц.Имя
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Имя
		|	КОНЕЦ КАК Имя,
		|	ВЫБОР
		|		КОГДА ЗапросДоступностиТоваров.ДокументОснование.Отчество = """"
		|			ТОГДА ФИОФизЛиц.Отчество
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Отчество
		|	КОНЕЦ КАК Отчество,
		|	ЗапросДоступностиТоваров.ДокументОснование.Телефон КАК НомерТелефона,
		|	ЗапросДоступностиТоваров.ДокументОснование.Контрагент КАК Контрагент,
		|	ЗапросДоступностиТоваров.ДокументОснование.ДоставкаНаАдрес КАК ДоставкаНаАдрес,
		|	ЗапросДоступностиТоваров.СуммаДокумента КАК КонтрольОплаты,
		|	ЗапросДоступностиТоваров.Дата КАК Дата,
		|	ЗапросДоступностиТоваров.МагазинОтправитель КАК МагазинОтправитель,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Город) = ТИП(Справочник.ГородаДоставки)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Город.Район.Наименование
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Район
		|	КОНЕЦ КАК Район,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Город) = ТИП(Справочник.ГородаДоставки)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Город.Область.Наименование
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Область
		|	КОНЕЦ КАК Область,
		|	ЗапросДоступностиТоваров.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров КАК ЗапросДоступностиТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
		|		ПО ЗапросДоступностиТоваров.ДокументОснование.Контрагент.ФизЛицо = ФИОФизЛиц.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|		ПО ЗапросДоступностиТоваров.МагазинОтправитель = НастройкиСлужбДоставки.Магазин
		|ГДЕ
		|	ЗапросДоступностиТоваров.Ссылка = &Ссылка";
	
    Запрос.УстановитьПараметр("Ссылка",ДокССылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
    БлокПолучателя = "";
	Адрес = "";
	
	
	Места = ЗаполнитьКоличествоМест(ДокССылка);
	ДопУслуги = "";	
	Если ДеньНедели(ТекущаяДата()) = 6 Тогда
		ДопУслуги = ДопУслуги + "
		|	<SaturdayDelivery>1</SaturdayDelivery>";
	КонецЕсли;
	Если  Выборка.СуммаОплаты > 0 тогда
		ДопУслуги = ДопУслуги + "
		|	<AfterpaymentOnGoodsCost>"+стрЗаменить(Выборка.СуммаОплаты,Символы.НПП,"")+"</AfterpaymentOnGoodsCost>";
	КонецЕсли;                   
	//Если  Выборка.СуммаОплаты > 0 тогда
	//	ДопУслуги = ДопУслуги + "
	//	|	<AfterpaymentOnGoodsCost>1</AfterpaymentOnGoodsCost>";
	//
	//	ОбратнаяДоставка = "";
	//		СуммаОД = "
	//		|	<RedeliveryString>"+СтрЗаменить(Строка(Выборка.СуммаДокумента),Символы.НПП,"")+"</RedeliveryString>";
	//	ОбратнаяДоставка = ОбратнаяДоставка + "
	//	|	<BackwardDeliveryData>
	//	|	<item>
	//	|	<PayerType>Recipient</PayerType>
	//	|	<CargoType>Money</CargoType>"+СуммаОД+"
	//	|	</item>
	//	|	</BackwardDeliveryData>";
	//
	//	ОписаниеГрузаДет =  "
	//	|<CargoDetails>
	//	|<item>
	//	|<CargoDescription>"+"Товары для детей"+"</CargoDescription>
	//	|<Amount>"+стрЗаменить(Строка(1),символы.НПП,"")+"</Amount>
	//	|</item>
	//	|</CargoDetails>";
	//КонецЕсли;                   
	ФиоКлиента = "";
	ФИОКлиента = СокрЛП(Выборка.Фамилия)+ " " + СокрЛП(Выборка.Имя)+ " " + СокрЛП(Выборка.Отчество);
	Адрес = сокрлп(Выборка.Отделение);

	БлокПолучателя = БлокПолучателя + "
			|<NewAddress>1</NewAddress>
			|<RecipientCityName>"+сокрлп(Выборка.Город)+"</RecipientCityName>
			|<RecipientArea>"+сокрлп(Выборка.Область)+"</RecipientArea>
			|<RecipientAreaRegions>"+сокрлп(Выборка.Район)+"</RecipientAreaRegions>
			|<RecipientAddressName>"+СокрЛП(Выборка.Улица)+"</RecipientAddressName>
			|<RecipientHouse>"+Строка(Выборка.Дом)+"</RecipientHouse>
			|<RecipientFlat>"+Строка(Выборка.Квартира)+"</RecipientFlat>
			|<RecipientName>"+сокрлп(ФИОКлиента)+"</RecipientName>
			|<RecipientType>PrivatePerson</RecipientType>";
	Лицо3 			= "";
	ContactSender 	= ПолучитьКонтактноеЛицо(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);	
	Sender 		  	= ПолучитьОтправителя(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);	
  	CitySender	 	= ПолучитьГородОтправителя(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);
	SendersPhone  	= ПолучитьТелефонОтправителя(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);
	SenderAddress 	= ПолучитьОтделениеОтправки(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);
    Если выборка.СуммаДоставкиОператор > 0 тогда
		PayerType 	= "Recipient";
   		PForm 		= "Cash";
	Иначе
		PayerType 	= "Sender";	
   		PForm 		= "NonCash";
	КонецЕсли;
	DescriptionCargo = "Товары для детей";
	ServiceType = "WarehousDoors";	
	Мест = ПолучитьКоличествоМест(ДокСсылка);  
	Если ЗначениеЗаполнено(Выборка.НомерТелефона) тогда
		RecipientsPhone = СокрЛП(Выборка.НомерТелефона);
	Иначе 
		RecipientsPhone = СокрЛП(ПолучитьНомерТелефона(Выборка.Контрагент)); 
	КонецЕсли;
	CargoType = "Parcel";
	СтоимостьЗаказа = Выборка.СуммаДокумента;
	Мест = ПолучитьКоличествоМест(ДокСсылка);    
	Вес = ПолучитьВес(ДокСсылка);  
	Объем = ПолучитьОбъем(ДокСсылка);
	ОбратнаяДоставка = "";
	запрос=
	"<root>
	|<apiKey>[ВАШ КЛЮЧ]</apiKey>
	|<modelName>InternetDocument</modelName>
	|<calledMethod>"+Метод+"</calledMethod>
	|<methodProperties>
	|<CargoType>"+CargoType+"</CargoType>
	|<Cost>"+СтоимостьЗаказа+"</Cost>
	|<DateTime>"+Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy")+"</DateTime>
	|<Description>"+DescriptionCargo+"</Description>
	|<PayerType>"+PayerType+"</PayerType>"+Лицо3+"
	|<PaymentMethod>"+PForm+"</PaymentMethod>
	|<VolumeGeneral>"+Объем+"</VolumeGeneral>
	|<Weight>"+Вес+"</Weight>
	|<SeatsAmount>"+Строка(Мест)+"</SeatsAmount>
	|<ServiceType>"+ServiceType+"</ServiceType>"+ДопУслуги+ОбратнаяДоставка+"
	|<CitySender>"+CitySender+"</CitySender>
	|<Sender>"+Sender+"</Sender>
	|<SenderAddress>"+SenderAddress+"</SenderAddress>
	|<ContactSender>"+ContactSender+"</ContactSender>
	|<SendersPhone>"+SendersPhone+"</SendersPhone>"+Блокполучателя+"
	|<RecipientsPhone>"+RecipientsPhone+"</RecipientsPhone>
	|</methodProperties>
	|</root>";
	Запрос=СтрЗаменить(Запрос,"[ВАШ КЛЮЧ]",КлючAPI);

	КонецЦикла;	
    Возврат  Запрос;
КонецФункции

Функция ТТНОтделениеАдрес1(ДокССылка,КлючAPI)  
	
 	Метод = "save";
	РефДок = "";
	ЕНРефДок = "";

		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗапросДоступностиТоваров.ДокументОснование.СтатусОплаты КАК ДокументОснованиеСтатусОплаты,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаОплаты КАК ДокументОснованиеСуммаОплаты,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаДоставкиОплачена КАК ДокументОснованиеСуммаДоставкиОплачена,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаДоставкиОператор КАК ДокументОснованиеСуммаДоставкиОператор,
		|	ЗапросДоступностиТоваров.ДокументОснование.СуммаДоставки КАК ДокументОснованиеСуммаДоставки,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Город) = ТИП(Справочник.ГородаДоставки)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Город.Наименование
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Город
		|	КОНЕЦ КАК ДокументОснованиеГород,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Отделение) = ТИП(Справочник.Отделения)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Отделение.НомерОтделения
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Отделение) = ТИП(Справочник.Почтоматы)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Отделение.НомерОтделения
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Отделение
		|	КОНЕЦ КАК ДокументОснованиеОтделение,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗапросДоступностиТоваров.ДокументОснование.Улица) = ТИП(Справочник.Улицы)
		|			ТОГДА ЗапросДоступностиТоваров.ДокументОснование.Улица.Наименование
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Улица
		|	КОНЕЦ КАК ДокументОснованиеУлица,
		|	ЗапросДоступностиТоваров.ДокументОснование.Дом КАК ДокументОснованиеДом,
		|	ЗапросДоступностиТоваров.ДокументОснование.Квартира КАК ДокументОснованиеКвартира,
		|	ВЫБОР
		|		КОГДА ЗапросДоступностиТоваров.ДокументОснование.Фамилия = """"
		|			ТОГДА ФИОФизЛиц.Фамилия
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Фамилия
		|	КОНЕЦ КАК Фамилия,
		|	ВЫБОР
		|		КОГДА ЗапросДоступностиТоваров.ДокументОснование.Имя = """"
		|			ТОГДА ФИОФизЛиц.Имя
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Имя
		|	КОНЕЦ КАК Имя,
		|	ВЫБОР
		|		КОГДА ЗапросДоступностиТоваров.ДокументОснование.Отчество = """"
		|			ТОГДА ФИОФизЛиц.Отчество
		|		ИНАЧЕ ЗапросДоступностиТоваров.ДокументОснование.Отчество
		|	КОНЕЦ КАК Отчество,
		|	ЗапросДоступностиТоваров.ДокументОснование.Телефон КАК ДокументОснованиеТелефон,
		|	ЗапросДоступностиТоваров.ДокументОснование.Контрагент КАК ДокументОснованиеКонтрагент,
		|	ЗапросДоступностиТоваров.ДокументОснование.ДоставкаНаАдрес КАК ДокументОснованиеДоставкаНаАдрес,
		|	ЗапросДоступностиТоваров.СуммаДокумента КАК КонтрольОплаты,
		|	ЗапросДоступностиТоваров.Дата КАК Дата,
		|	ЗапросДоступностиТоваров.МагазинОтправитель КАК МагазинОтправитель,
		|	ЗапросДоступностиТоваров.ДокументОснование.Район КАК Район,
		|	ЗапросДоступностиТоваров.ДокументОснование.Область КАК Область,
		|	ЗапросДоступностиТоваров.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров КАК ЗапросДоступностиТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
		|		ПО ЗапросДоступностиТоваров.ДокументОснование.Контрагент.ФизЛицо = ФИОФизЛиц.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|		ПО ЗапросДоступностиТоваров.МагазинОтправитель = НастройкиСлужбДоставки.Магазин
		|ГДЕ
		|	ЗапросДоступностиТоваров.Ссылка = &Ссылка";
    Запрос.УстановитьПараметр("Ссылка",ДокССылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
    БлокПолучателя = "";
	Адрес = "";
	
	
	//Места = ЗаполнитьКоличествоМест(ДокССылка);
	ДопУслуги = "";	
	Если ДеньНедели(ТекущаяДата()) = 6 Тогда
		ДопУслуги = ДопУслуги + "
		|	<SaturdayDelivery>1</SaturdayDelivery>";
	КонецЕсли; 
	Если  Выборка.СуммаОплаты > 0 тогда
		ДопУслуги = ДопУслуги + "
		|	<AfterpaymentOnGoodsCost>"+стрЗаменить(ВЫборка.КонтрольОплаты,Символы.НПП,"")+"</AfterpaymentOnGoodsCost>";
	
		ОбратнаяДоставка = "";
			СуммаОД = "
			|	<RedeliveryString>"+СтрЗаменить(Строка(Выборка.СуммаОплаты),Символы.НПП,"")+"</RedeliveryString>";
		ОбратнаяДоставка = ОбратнаяДоставка + "
		|	<BackwardDeliveryData>
		|	<item>
		|	<PayerType>"+сокрЛП("Recipient")+"</PayerType>
		|	<CargoType>"+сокрЛП("Money")+"</CargoType>"+СуммаОД+"
		|	</item>
		|	</BackwardDeliveryData>";
	
		ОписаниеГрузаДет =  "
		|<CargoDetails>
		|<item>
		|<CargoDescription>"+"Товары для детей"+"</CargoDescription>
		|<Amount>"+стрЗаменить(Строка(1),символы.НПП,"")+"</Amount>
		|</item>
		|</CargoDetails>";
	КонецЕсли;
	
	Адрес = сокрлп(Выборка.Отделение);

	БлокПолучателя = БлокПолучателя + "
			|<NewAddress>1</NewAddress>
			|<RecipientCityName>"+сокрлп(Выборка.Город)+"</RecipientCityName>
			|<RecipientArea>"+сокрлп(Выборка.Область)+"</RecipientArea>
			|<RecipientAreaRegions>"+сокрлп(Выборка.Район)+"</RecipientAreaRegions>
			|<RecipientName>"+сокрлп(Выборка.ФИОКлиента)+"</RecipientName>
			|<RecipientType>PrivatePerson</RecipientType>";
	Лицо3 			= "";
	ContactSender 	= ПолучитьКонтактноеЛицо(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);	
	Sender 		  	= ПолучитьОтправителя(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);	
  	CitySender	 	= ПолучитьГородОтправителя(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);
	SendersPhone  	= ПолучитьТелефонОтправителя(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);
	SenderAddress 	= ПолучитьАдресОтправки(Выборка.МагазинОтправитель,Перечисления.ОператорыДоставки.НоваяПочта);
    Если выборка.СуммаДоставкиОператор > 0 тогда
		PayerType 	= "Recipient";
   		PForm 		= "Cash";
	Иначе
		PayerType 	= "Sender";	
   		PForm 		= "NonCash";
	КонецЕсли;
	DescriptionCargo = "Товары для детей";
	ServiceType = "WarehouseDoors";	
	Мест = ПолучитьКоличествоМест(ДокСсылка);  
	Если ЗначениеЗаполнено(Выборка.НомерТелефона) тогда
		RecipientsPhone = СокрЛП(Выборка.НомерТелефона);
	Иначе 
		RecipientsPhone = СокрЛП(ПолучитьНомерТелефона(Выборка.Контрагент)); 
	КонецЕсли;
	CargoType = "Parcel";
	СтоимостьЗаказа = Выборка.СтоимостьДокумента;
	//Мест = ПолучитьКоличествоМест(ДокСсылка);    
	Вес = ПолучитьВес(ДокСсылка);  
	Объем = ПолучитьОбъем(ДокСсылка);
	
	запрос=
	"<root>
	|<apiKey>[ВАШ КЛЮЧ]</apiKey>
	|<modelName>InternetDocument</modelName>
	|<calledMethod>"+Метод+"</calledMethod>
	|<methodProperties>
	|<CargoType>"+CargoType+"</CargoType>
	|<Cost>"+СтоимостьЗаказа+"</Cost>
	|<DateTime>"+Формат(ВЫборка.Дата,"ДФ=dd.MM.yyyy")+"</DateTime>
	|<Description>"+DescriptionCargo+"</Description>
	|<PayerType>"+PayerType+"</PayerType>"+Лицо3+"
	|<PaymentMethod>"+PForm+"</PaymentMethod>
	|<VolumeGeneral>"+Объем+"</VolumeGeneral>
	|<Weight>"+Вес+"</Weight>
	|<SeatsAmount>"+Строка(Мест)+"</SeatsAmount>
	|<ServiceType>"+ServiceType+"</ServiceType>"+ДопУслуги+ОбратнаяДоставка+"
	|<CitySender>"+CitySender+"</CitySender>
	|<Sender>"+Sender+"</Sender>
	|<SenderAddress>"+SenderAddress+"</SenderAddress>
	|<ContactSender>"+ContactSender+"</ContactSender>
	|<SendersPhone>"+SendersPhone+"</SendersPhone>"+Блокполучателя+"
	|<RecipientsPhone>"+RecipientsPhone+"</RecipientsPhone>
	|</methodProperties>
	|</root>";
	Запрос=СтрЗаменить(Запрос,"[ВАШ КЛЮЧ]",КлючAPI);

	КонецЦикла;	
    Возврат  Запрос;

	
КонецФункции

Функция ПолучитьМестоОтправки(Магазин)
	ОтправкаИзМагазина = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСлужбДоставки.ОтправкаИзМагазина КАК ОтправкаИзМагазина
		|ИЗ
		|	РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|ГДЕ
		|	НастройкиСлужбДоставки.Магазин = &Магазин
		|	И НастройкиСлужбДоставки.ОператорДоставки = &ОператорДоставки";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ОператорДоставки", Перечисления.ОператорыДоставки.НоваяПочта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОтправкаИзМагазина = ВыборкаДетальныеЗаписи.ОтправкаИзМагазина;
	КонецЦикла;
	
	Возврат ОтправкаИзМагазина; 
КонецФункции

Функция ЗаполнитьКоличествоМест(ДокССылка)  
	Места = "";	  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗапросДоступностиТоваровУпаковки.Ширина КАК Ширина,
		|	ЗапросДоступностиТоваровУпаковки.Высота КАК Высота,
		|	ЗапросДоступностиТоваровУпаковки.Глубина КАК Длина,
		|	ЗапросДоступностиТоваровУпаковки.Вес КАК Вес
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров.Упаковки КАК ЗапросДоступностиТоваровУпаковки
		|ГДЕ
		|	ЗапросДоступностиТоваровУпаковки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокССылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	
      	Объем = ВыборкаДетальныеЗаписи.Ширина*ВыборкаДетальныеЗаписи.Длина*ВыборкаДетальныеЗаписи.Высота;
		Места = Места + "
		|<OptionsSeat>";
			Места = Места + "
			|<item>
			|<volumetricVolume>"+Объем+"</volumetricVolume>
			|<volumetricWidth>"+ВыборкаДетальныеЗаписи.Ширина+"</volumetricWidth>
			|<volumetricLength>"+ВыборкаДетальныеЗаписи.Длина+"</volumetricLength>
			|<volumetricHeight>"+ВыборкаДетальныеЗаписи.Высота+"</volumetricHeight>
			|<weight>"+ВыборкаДетальныеЗаписи.Вес+"</weight>
			|</item>";
		Конеццикла;
		Места = Места + "
		|</OptionsSeat>";
	Возврат Места;		
КонецФункции  


Функция ПолучитьВес(ДокССылка)  
	Вес = 0;	  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЗапросДоступностиТоваровУпаковки.Вес) КАК Вес
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров.Упаковки КАК ЗапросДоступностиТоваровУпаковки
		|ГДЕ
		|	ЗапросДоступностиТоваровУпаковки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокССылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Вес =   ВыборкаДетальныеЗаписи.Вес;
	Конеццикла;
	Возврат Вес;		
КонецФункции  

Функция ПолучитьОбъем(ДокССылка)  
	Объем = 0;	  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА((ЗапросДоступностиТоваровУпаковки.Ширина/100) * (ЗапросДоступностиТоваровУпаковки.Высота/100) * (ЗапросДоступностиТоваровУпаковки.Глубина/100)) КАК Объем
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров.Упаковки КАК ЗапросДоступностиТоваровУпаковки
		|ГДЕ
		|	ЗапросДоступностиТоваровУпаковки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокССылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объем =   ВыборкаДетальныеЗаписи.Объем;
	Конеццикла;
	Возврат Объем;		
КонецФункции  

 

Функция ПолучитьКоличествоМест(ДокССылка)  
	Мест = 0;	  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗапросДоступностиТоваровУпаковки.Ссылка КАК Ссылка,
		|	КОЛИЧЕСТВО(ЗапросДоступностиТоваровУпаковки.НомерСтроки) КАК Мест
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров.Упаковки КАК ЗапросДоступностиТоваровУпаковки
		|ГДЕ
		|	ЗапросДоступностиТоваровУпаковки.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗапросДоступностиТоваровУпаковки.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокССылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Мест =   ВыборкаДетальныеЗаписи.Мест;
	Конеццикла;
	Возврат Мест;		
КонецФункции  

Функция ПолучитьАдресОтправки(Магазин,ОператорДоставки)  
	Адрес = "";	  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСлужбДоставки.Адрес КАК Адрес
		|ИЗ
		|	РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|ГДЕ
		|	НастройкиСлужбДоставки.Магазин = &Магазин
		|	И НастройкиСлужбДоставки.ОператорДоставки = &ОператорДоставки";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ОператорДоставки", ОператорДоставки);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Адрес = СокрЛП(ВыборкаДетальныеЗаписи.Адрес);	  
	Конеццикла;
	Возврат Адрес;		
КонецФункции  


Функция ПолучитьОтделениеОтправки(Магазин,ОператорДоставки)  
	Адрес = "";	  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСлужбДоставки.Отделение КАК Отделение
		|ИЗ
		|	РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|ГДЕ
		|	НастройкиСлужбДоставки.Магазин = &Магазин
		|	И НастройкиСлужбДоставки.ОператорДоставки = &ОператорДоставки";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ОператорДоставки", ОператорДоставки);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Адрес = СокрЛП(ВыборкаДетальныеЗаписи.Отделение);	  
	Конеццикла;
	Возврат Адрес;		
КонецФункции  




            
Функция ПолучитьГородОтправителя(Магазин,ОператорДоставки)  
	Город = "";	  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСлужбДоставки.Город.Идентификатор КАК Город
		|ИЗ
		|	РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|ГДЕ
		|	НастройкиСлужбДоставки.Магазин = &Магазин
		|	И НастройкиСлужбДоставки.ОператорДоставки = &ОператорДоставки";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ОператорДоставки", ОператорДоставки);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Город = СокрЛП(ВыборкаДетальныеЗаписи.Город);	  
	Конеццикла;
	Возврат Город;		
КонецФункции 

Функция ПолучитьНомерТелефона(Клиент)  
	Телефон = "";	  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.Представление КАК Представление
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Ссылка = &Клиент
		|	И КонтрагентыКонтактнаяИнформация.Тип = &Тип";
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Телефон = СокрЛП(ВыборкаДетальныеЗаписи.Представление);	  
	Конеццикла;
	Возврат Телефон;		
КонецФункции  

  
Функция ПолучитьКонтактноеЛицо(Магазин,ОператорДоставки)  
	КонтактноеЛицо = "";	  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСлужбДоставки.КонтактноеЛицо КАК КонтактноеЛицо
		|ИЗ
		|	РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|ГДЕ
		|	НастройкиСлужбДоставки.Магазин = &Магазин
		|	И НастройкиСлужбДоставки.ОператорДоставки = &ОператорДоставки";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ОператорДоставки", ОператорДоставки);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		КонтактноеЛицо = СокрЛП(ВыборкаДетальныеЗаписи.КонтактноеЛицо);	  
	Конеццикла;
	Возврат КонтактноеЛицо;		
КонецФункции  



Функция ПолучитьОтправителя(Магазин,ОператорДоставки)  
	Контрагент = "";	  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСлужбДоставки.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|ГДЕ
		|	НастройкиСлужбДоставки.Магазин = &Магазин
		|	И НастройкиСлужбДоставки.ОператорДоставки = &ОператорДоставки";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ОператорДоставки", ОператорДоставки);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Контрагент = СокрЛП(ВыборкаДетальныеЗаписи.Контрагент);	  
	Конеццикла;
	Возврат Контрагент;		
КонецФункции  



   
    Функция ПолучитьТелефонОтправителя(Магазин,ОператорДоставки)  
	НомерТелефона = "";	  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСлужбДоставки.НомерТелефона КАК НомерТелефона
		|ИЗ
		|	РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|ГДЕ
		|	НастройкиСлужбДоставки.Магазин = &Магазин
		|	И НастройкиСлужбДоставки.ОператорДоставки = &ОператорДоставки";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ОператорДоставки", ОператорДоставки);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НомерТелефона = СокрЛП(ВыборкаДетальныеЗаписи.НомерТелефона);	  
	Конеццикла;
	Возврат НомерТелефона;		
КонецФункции  


                           
// Сохранинение PDF
Функция СохранитьТТНвPDF(ТТН,ЕНРеф) Экспорт
	ТекущийКлюч = ОбменНПСлужебный.ПолучитьКлючAPI();
	ИмяФайлаЗаписи = "ТТН"+СокрЛП(ТТН)+".pdf";
	СформироватьФайл(ТекущийКлюч,ЕНРеф,ИмяФайлаЗаписи,"printDocument"); //ТТН 
	ИмяФайлаЗаписи = "Стикер"+СокрЛП(ТТН)+".pdf";	
	СформироватьФайл(ТекущийКлюч,СокрЛП(ЕНРеф),ИмяФайлаЗаписи,"printMarkings");  // Стикер
	
	//Двоичное = ПолучитьИзВременногоХранилища(АдресФайла);
	//Двоичное.Записать(ИмяФайлаЗаписи);
КонецФункции

Функция ПолучитьПутьЗаписиФайла()
	
КонецФункции   



Функция СформироватьФайл(ТекущийКлюч,ЕНРеф,ИмяФайлаЗаписиНаФТП,ТипДокумента)
	ТочкаВхода =  "https://api.novaposhta.ua/v2.0/xml/";
			ТекстЗапроса = "<?xml version=""1.0"" encoding=""UTF-8"" ?>
			|<root>
			|<apiKey>"+ТекущийКлюч+"</apiKey>
			|<modelName>InternetDocument</modelName>
			|<calledMethod>"+ТипДокумента+"</calledMethod>
			|<methodProperties>
			|<DocumentRefs>";
			ТекстЗапроса = ТекстЗапроса + "
			|<item>"+ЕНРеф+"</item>";		
			ТекстЗапроса = ТекстЗапроса +"
			|</DocumentRefs>
			|<Type>pdf</Type>
			|</methodProperties>
			|</root>			
			|";
			Попытка
				//ХМЛХТТП = ПолучитьCOMОбъект("", "Microsoft.XMLHTTP");
				Попытка
					ХМЛХТТП = ПолучитьCOMОбъект("", "MSXML2.ServerXMLHTTP.6.0");
				Исключение
					ХМЛХТТП = ПолучитьCOMОбъект("", "Microsoft.XMLHTTP");
				КонецПопытки;
				
				ХМЛХТТП.Open("POST", ТочкаВхода, Ложь);
				ХМЛХТТП.SetRequestHeader("Content-Type", "text/xml");
				ХМЛХТТП.Send(ТекстЗапроса);
				//XMLДокумент = Новый ЧтениеXML;
				//XMLДокумент.УстановитьСтроку(ХМЛХТТП.ResponseText);
				//Сообщить(ХМЛХТТП.ResponseText);
				Буфер = ХМЛХТТП.ResponseBody();
				Поток = Новый COMОбъект("ADODB.Stream");	
				Поток.Type = 1;  //Бинарный	
				Поток.Mode = 3; 	
				Поток.Open();	
				Поток.Write(Буфер);
				
				ИмяФайлаЗаписи = ПолучитьИмяВременногоФайла("pdf");
				
				Файл = Новый Файл(ИмяФайлаЗаписи);
				Если Файл.Существует() Тогда
					УдалитьФайлы(ИмяФайлаЗаписи);
				КонецЕсли;
				Поток.SaveToFile(ИмяФайлаЗаписи);
				Поток.Close();
				ПараметрыФТП = ПолучитьПараметрыФТП(Перечисления.ОператорыДоставки.НоваяПочта);
				Если  ЗначениеЗаполнено(ПараметрыФТП) тогда 
					АдресСайта = ПараметрыФТП.Адрес ;
					Порт = ПараметрыФТП.Порт;
					Логин = ПараметрыФТП.Логин;
					Пароль = ПараметрыФТП.пароль; 
					Прокси = Новый ИнтернетПрокси(Ложь);
					ssl = Новый ЗащищенноеСоединениеOpenSSL();
					FTPСоединение = Новый FTPСоединение(АдресСайта,Порт,Логин,Пароль,Прокси,Истина,1800);
					FTPСоединение.Записать(ИмяФайлаЗаписи,ИмяФайлаЗаписиНаФТП);
				Иначе
				   // Сделать запись в журнал
				КонецЕсли;
				
				Возврат Истина;
	
			Исключение 
				Сообщить(ОписаниеОшибки());
				
				Возврат Неопределено;
			КонецПопытки;

		КонецФункции
		
Функция ПолучитьПараметрыФТП(ОператорыДоставки)
	ПараметрыФТП = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСлужбДоставки.АдресFTP КАК Адрес,
		|	НастройкиСлужбДоставки.ПортFTP КАК Порт,
		|	НастройкиСлужбДоставки.ЛогинFTP КАК Логин,
		|	НастройкиСлужбДоставки.ПарольFTP КАК Пароль
		|ИЗ
		|	РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|ГДЕ
		|	НастройкиСлужбДоставки.Магазин = &Магазин
		|	И НастройкиСлужбДоставки.ОператорДоставки = &ОператорДоставки";
	
	Запрос.УстановитьПараметр("Магазин", ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);
	Запрос.УстановитьПараметр("ОператорДоставки", ОператорыДоставки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
		ПараметрыФТП = Новый Структура;
		ПараметрыФТП.Вставить("Адрес",СокрЛП(ВыборкаДетальныеЗаписи.Адрес));  
		ПараметрыФТП.Вставить("Порт",ВыборкаДетальныеЗаписи.Порт);
		ПараметрыФТП.Вставить("Логин",СокрЛП(ВыборкаДетальныеЗаписи.Логин));
		ПараметрыФТП.Вставить("Пароль",СокрЛП(ВыборкаДетальныеЗаписи.Пароль));		
	КонецЦикла;
	
    Возврат ПараметрыФТП; 
КонецФункции

Процедура ПолучитьСписокТТН() Экспорт
	ТочкаВхода =  "https://api.novaposhta.ua/v2.0/xml/";
	ТекущийКлюч = ОбменНПСлужебный.ПолучитьКлючAPI();
	ДатаС 	= ТекущаяДата() - 30*24*60*60;  
	ДатаПо 	= ТекущаяДата() + 7*24*60*60;	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("КлючАПИ",ТекущийКлюч);
	ТекстЗапроса = "<?xml version=""1.0"" encoding=""UTF-8""?>
	|<root>
	|<apiKey>"+ТекущийКлюч+"</apiKey>
	|<modelName>InternetDocument</modelName>
	|<calledMethod>getDocumentList</calledMethod>
	|<methodProperties>
	|<DateTimeFrom>"+Формат(ДатаС,"ДФ=dd.MM.yyyy")+"</DateTimeFrom > 
	|<DateTimeTo>"+Формат(ДатаПо,"ДФ=dd.MM.yyyy")+"</DateTimeTo> 
	|<GetFullList>1</GetFullList>
	|</methodProperties>
	|</root>";
	
	ДокументДом  = ПолучитьОтветДОМ(ТочкаВхода,ТекстЗапроса);
	Если  ДокументДом = Неопределено тогда
		// Сделать запись в журнал
	КонецЕсли;
	
	Если не ЭтоУспех(ДокументДом) тогда
		ТекстИсключения = ВернутьЕрор(ДокументДом);
		// Сделать запись в журнал
	Иначе
		Результат = новый Структура();
		РаспарситьОтвет("Обработать_getDocumentList", ДокументДом, Результат, "getDocumentList", ПараметрыМетода);
	КонецЕсли;
	
	
КонецПроцедуры

   

Функция Обработать_getDocumentList(ЭлементДом, Результат, Владелец, Параметры)
	СтруктураПараметров = новый Структура;
	ТекущийКлюч = ОбменНПСлужебный.ПолучитьКлючAPI();
	ТочкаВхода =  "https://api.novaposhta.ua/v2.0/xml/";
	Пока не ЭлементДом = неопределено цикл
		
		Попытка
			Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла) тогда
				СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);
			Иначе
				Текст = "Ошибка getDocumentList"; 
				// сделать запись в журнал
				ВызватьИсключение Текст;	 
			КонецЕсли;	
			
		Исключение
			Текст = "Ошибка getDocumentList";
			// сделать запись в журнал			
			ВызватьИсключение Текст;	 
		КонецПопытки;
		
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	СделатьЗапиьВРССтатусТТН(СтруктураПараметров.StateId,СтруктураПараметров.IntDocNumber);	
	
КонецФункции     

 
Процедура СделатьЗапиьВРССтатусТТН(Кодстатуса,НомерТТН)	
СтатусТТН = Справочники.КодыСтатусовТТН.НайтиПоРеквизиту("КодСтатуса",КодСтатуса);
Если ЗначениеЗаполнено(СтатусТТН) тогда 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнформацияТТН.Регистратор КАК Регистратор,
		|	ИнформацияТТН.ОператорДоставки КАК ОператорДоставки,
		|	СтатусыТТНСрезПоследних.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.ИнформацияТТН КАК ИнформацияТТН
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыТТН.СрезПоследних КАК СтатусыТТНСрезПоследних
		|		ПО ИнформацияТТН.Регистратор = СтатусыТТНСрезПоследних.ДокументРегистратор
		|			И ИнформацияТТН.ОператорДоставки = СтатусыТТНСрезПоследних.ОператорДоставки
		|ГДЕ
		|	ИнформацияТТН.НомерТТН = &НомерТТН";
	
	Запрос.УстановитьПараметр("НомерТТН", НомерТТН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТекДата = ТекущаяДата();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи <>  СтатусТТН тогда
			НаборЗаписей = РегистрыСведений.СтатусыТТН.СоздатьНаборЗаписей(); 

			НаборЗаписей.Отбор.ДокументРегистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор); 
			НаборЗаписей.Отбор.ОператорДоставки.Установить(ВыборкаДетальныеЗаписи.ОператорДоставки); 
			НаборЗаписей.Отбор.Статус.Установить(СтатусТТН);    
			НаборЗаписей.Отбор.Период.Установить(ТекДата);  

			НоваяЗапись 					= НаборЗаписей.Добавить();
			НоваяЗапись.ДокументРегистратор = ВыборкаДетальныеЗаписи.Регистратор; 
			НоваяЗапись.Период 				= ТекДата;
			НоваяЗапись.ОператорДоставки    = ВыборкаДетальныеЗаписи.ОператорДоставки; 
			НоваяЗапись.Статус    			= СтатусТТН; 
			НаборЗаписей.Записать();  
		КонецЕсли;		
	КонецЦикла;
 КонецЕсли;
КонецПроцедуры