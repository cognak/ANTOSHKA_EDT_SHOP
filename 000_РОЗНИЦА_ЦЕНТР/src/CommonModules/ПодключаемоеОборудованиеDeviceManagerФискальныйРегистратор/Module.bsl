///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция создаёт объект драйвера.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Выходной параметр; объект драйвера торгового
//                                   оборудования.
//
//  Модель                         - <Строка>
//                                 - Модель торгового оборудования, для которой
//                                   создаётся экземпляр драйвера.
//
//  Параметры                      - <Структура>
//                                 - Параметры подключаемого торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
&НаКлиенте
Функция СоздатьОбъектДрайвера(Параметры) Экспорт

	ОбъектДрайвера = Новый Структура(
		"Параметры, Драйвер, ОписаниеОшибки, ТекущееЗадание"
		, Параметры
		, Неопределено
		, Новый ОписаниеТипов("Строка")
		, Неопределено
	);

	Возврат ОбъектДрайвера;

КонецФункции

// Функция осуществляет подключение устройства.
//
// Параметры:
//  ОбъектДрайвера   - <*>
//           - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
&НаКлиенте
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Перем IP, ПортIP, ИмяУстройства, Токен;

	Если НЕ ЗначениеЗаполнено(ОбъектДрайвера) ИЛИ ОбъектДрайвера.Параметры = Неопределено Тогда

		ОбъектДрайвера = СоздатьОбъектДрайвера(Параметры);	

	КонецЕсли;

	Результат = Истина;

	ОбъектДрайвера.Параметры.Свойство("IP", IP);
	ОбъектДрайвера.Параметры.Свойство("ПортIP", ПортIP);
	ОбъектДрайвера.Параметры.Свойство("ИмяУстройства", ИмяУстройства);
	ОбъектДрайвера.Параметры.Свойство("Токен", Токен);
	
	ОбъектДрайвера.Драйвер = Новый Структура;
	ЗаполнитьПараметры(ОбъектДрайвера.Параметры);
	
	Если ВыходныеПараметры = Неопределено Тогда

		ВыходныеПараметры = Новый Массив;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет отключение устройства.
//
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
&НаКлиенте
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;

	ВыходныеПараметры = Новый Массив();

	//ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторИнтерфейсВК.Отключить(ОбъектДрайвера);

	Возврат Результат;

КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу
//
&НаКлиенте
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
	
	Результат = Истина;

	Если НЕ ЗначениеЗаполнено(ОбъектДрайвера) Тогда

		ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	КонецЕсли;

	ВыходныеПараметры = Новый Массив;
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ ВСЕХ ТИПОВ ДРАЙВЕРОВ
	
	// Тестирование устройства
	Если Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда

		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" ИЛИ Команда = "GetVersion" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение описание драйвера
	ИначеЕсли Команда = "ПолучитьОписаниеДрайвера" ИЛИ Команда = "GetDescription" Тогда

		Результат = ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ФИСКАЛЬНЫМИ РЕГИСТРАТОРАМИ

	// Открыть смену
	ИначеЕсли Команда = "OpenDay" ИЛИ Команда = "ОткрытьСмену" Тогда

		Результат = ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры, Истина);

//	Печать переодического отчета по датам
	ИначеЕсли Команда = "PrintPReportDate" ИЛИ Команда = "НапечататьПериодическийОтчетПоДатам" Тогда

		Результат = НапечататьПериодическийОтчет(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры, "ПоДатам");

//	Печать периодического отчета по номерам
	ИначеЕсли Команда = "PrintPReportNumber" ИЛИ Команда = "НапечататьПериодическийОтчетПоНомерам" Тогда

		Результат = НапечататьПериодическийОтчет(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры, "ПоНомерам");

//	Печать отчета без гашения
	ИначеЕсли Команда = "PrintXReport" ИЛИ Команда = "НапечататьОтчетБезГашения" Тогда

		Результат = НапечататьОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);

//	Печать отчета с гашением
	ИначеЕсли Команда = "PrintZReport" ИЛИ Команда = "НапечататьОтчетСГашением" Тогда

		Результат = НапечататьОтчетСГашением(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);

//	Печать чека
	ИначеЕсли Команда = "PrintReceipt" ИЛИ Команда = "ПечатьЧека" Тогда

		Результат = ПечатьЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);

// Печать нулевого чека
	ИначеЕсли Команда = "PrintNullReceipt" ИЛИ Команда = "НапечататьНулевойЧек" Тогда

		Результат = Истина;	//	LNK 12.03.2024 09:21:14 - отключаем эту возможность!
	//	Результат = НапечататьНулевойЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);

//	Печать слип чека
	ИначеЕсли Команда = "PrintText" ИЛИ Команда = "ПечатьТекста"  Тогда

		Результат = ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);

	ИначеЕсли Команда = "OpenCheck" ИЛИ Команда = "ОткрытьЧек"  Тогда

		ЧекВозврата   = ВходныеПараметры[0];
		ФискальныйЧек = ВходныеПараметры[1];
		Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры);

	// Отменить открытый чек
	ИначеЕсли Команда = "CancelCheck" ИЛИ Команда = "ОтменитьЧек"  Тогда

		Результат = ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	ИначеЕсли Команда = "Encash" ИЛИ Команда = "Инкассация" Тогда

	//	Печать чека внесения/выемки
		ТипИнкассации	= ВходныеПараметры[0];
		Сумма			= ВходныеПараметры[1];

		Результат = Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипИнкассации, Сумма, ВходныеПараметры, ВыходныеПараметры);
		
	ИначеЕсли Команда = "PrintBarCode" ИЛИ Команда = "ПечатьШтрихкода" Тогда

		Результат = Истина;
		//ТипШтрихКода = ВходныеПараметры[0];
		//ШтрихКод     = ВходныеПараметры[1];
		//Результат = ПечатьШтрихкода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипШтрихКода, ШтрихКод, ВыходныеПараметры);

	//// Открытие денежного ящика
	//ИначеЕсли Команда = "OpenCashDrawer" ИЛИ Команда = "ОткрытьДенежныйЯщик" Тогда
	//	Результат = ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	//	
	//// Получение ширины строки в символах
	//ИначеЕсли Команда = "GetLineLength" ИЛИ Команда = "ПолучитьШиринуСтроки" Тогда
	//	Результат = ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	//// Печать отчета о проданных товарах
	//ИначеЕсли Команда = "PrintSoldReport" ИЛИ Команда = "НапечататьОтчетОПроданныхТоварах" Тогда
	//	Результат = НапечататьОтчетОПроданныхТоварах(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	//	
	//// Вывод информации на дисплей
	//ИначеЕсли Команда = "displayText" ИЛИ Команда = "ВывестиИнформациюНаДисплейПокупателя" Тогда
	//	Результат = ВывестиИнформациюНаДисплейПокупателя(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	//// Очистка дисплея
	//ИначеЕсли Команда = "сlearText" ИЛИ Команда = "ОчиститьДисплейПокупателя" Тогда
	//	Результат = ОчиститьДисплейПокупателя(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	Иначе
		
	//	Указанная команда не поддерживается данным драйвером
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(СтрЗаменить(
				"Команда «%Команда%» не підтримується інстальованим драйвером."
				, "%Команда%"
				, Команда
			)
		);

		Результат = Ложь;

	КонецЕсли;
		
	Возврат Результат;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции общие для работы с фискальными регистраторами

// Функция осуществляет открытие смены
//
&НаКлиенте
Функция ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры, ВывестиСообщение = Ложь)	Экспорт
	
//	LNK 08.03.2024 10:22:29 - Экспорт в отладочных целях

	Результат = Истина;
	мЕстьОкругление = Ложь;
	СтрокаЛога = "Пристрій «#DEV#»";
	
	res = ПолучитьДанные(ОбъектДрайвера);
	Успешно = ТипЗНЧ(res) = Тип("Соответствие");

	Если НЕ Успешно Тогда

		ОбъектДрайвера.ОписаниеОшибки = "Помилка отримання інформації! " + ПолучитьКодИТекстОшибки(ОбъектДрайвера);
		ДобавитьСтрокуЛога(ОбъектДрайвера.ОписаниеОшибки, СтрокаЛога);
		Результат = Ложь;

	Иначе

		devices = res.Получить("devices");

		Если devices = Неопределено Тогда

			ОбъектДрайвера.ОписаниеОшибки = "Помилка драйвера! Можливо, не активна служба EDMSrv («EVO DeviceManager Service»).";
			ДобавитьСтрокуЛога(ОбъектДрайвера.ОписаниеОшибки, СтрокаЛога);
			Результат = Ложь;
		
		Иначе

			Для каждого Стр ИЗ devices Цикл

				device = ПолучитьЗначениеСоответствия(Стр, "device", "");;

				Если НЕ device = ОбъектДрайвера.Параметры.ИмяУстройства	Тогда

					Продолжить;

				КонецЕсли;

				СтрокаЛога = СтрЗаменить(СтрокаЛога, "#DEV#", device);

				shiftdt = ПолучитьЗначениеСоответствия(Стр, "shiftdt", "") ;
				dev_id = ПолучитьЗначениеСоответствия(Стр, "dev_id", "") ;
				Группы = ПолучитьДанные(ОбъектДрайвера,"/dm/vchasno-kasa/api/v1/prro/groups?dev_id="+dev_id);
				pay_types = Группы.Получить("pay_types");

				Для каждого стрpay_types Из pay_types Цикл

					pay_id = ПолучитьЗначениеСоответствия(стрpay_types, "pay_id", "");

					Если pay_id = 100 Тогда

						мЕстьОкругление = Истина;
						Прервать;	

					КонецЕсли;

				КонецЦикла;

				Прервать

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Если Результат = Истина И shiftdt = "" Тогда

		res = ОтправитьПакет(ОбъектДрайвера, ОбъектДрайвера.Параметры.enFiscalTaskType.OPEN_SHIFT);
		Успешно = (res.get("res") = 0);

		Если НЕ Успешно Тогда 

			ОбъектДрайвера.ОписаниеОшибки = "Помилка внесення/видачі готівки! " + ПолучитьКодИТекстОшибки(ОбъектДрайвера);
			ДобавитьСтрокуЛога(ОбъектДрайвера.ОписаниеОшибки, СтрокаЛога);
			Результат = Ложь;

		КонецЕсли;

	КонецЕсли;
	
	Если Результат = Истина Тогда

			ДобавитьСтрокуЛога("----- " + "Зміна на пристрої відкрита" + " -----", СтрокаЛога);

	Иначе	ДобавитьСтрокуЛога("При відкритті зміни виникли помилки", СтрокаЛога);

	КонецЕсли;

	Если ВывестиСообщение = Истина Тогда

		СообщитьПользователю(СтрокаЛога);

	КонецЕсли;

	ОбъектДрайвера.Параметры.Вставить("мЕстьОкругление", мЕстьОкругление);

//	Заполнение выходных параметров
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(ОбщегоНазначенияКлиент.ДатаСеанса());
	
	Возврат Результат;
	
КонецФункции

// Осуществляет печать чека по шаблону.
//
&НаКлиенте
Функция ПечатьЧекаПоШаблону(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) Экспорт
	       
	Возврат МенеджерОборудованияКлиент.ПечатьЧекаПоШаблону(ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер,
		ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	
КонецФункции

// Осуществляет печать фискального чека
//
&НаКлиенте
Функция ПечатьЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	ШаблонЧека = СформироватьШаблонЧека(ВходныеПараметры);
	 
	Результат  = Истина;
	
	ОбщиеПараметры	 = ШаблонЧека[0];
	ТребованиеПечати = Ложь;

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда

	Если ОбщиеПараметры.ПечататьЧек = Истина
	И	 ОбщиеПараметры.ВызовИзРМК = Истина
	И НЕ РозничныеПродажиКлиентПовтИсп.ЭтоУзелИнтернетМагазина()
	И	 ЗначениеЗаполнено(ОбщиеПараметры.ВладелецДисконтнойКарты)
	И	 НЕ ПустаяСтрока(ОбщиеПараметры.НомерТелефона)
	Тогда

 		ОтветПользователя = ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМК("Вам потрібен паперовий чек?");
		
		Если ВРЕГ(ОтветПользователя) = "ДА" Тогда

				ТребованиеПечати = Истина;

		Иначе	ОбщиеПараметры.ПечататьЧек = Ложь;

		КонецЕсли;

	КонецЕсли;

#КонецЕсли

	ОбъектДрайвера.Параметры.Вставить("УИД", ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.ПолучитьУИДЧека(ОбщиеПараметры.ДокументОснование));
	ОбъектДрайвера.Параметры.Вставить("ПечататьЧек"		, ОбщиеПараметры.ПечататьЧек);	//	LNK 25.10.2023 06:12:57
	ОбъектДрайвера.Параметры.Вставить("ТребованиеПечати", ТребованиеПечати);			//	LNK 07.02.2024 17:20:13
	
	ПозицииЧека    = ШаблонЧека[1];
	ТаблицаОплат   = ШаблонЧека[2];
	
	ТаблицаДопРеквизитов = Новый Массив;
	ТаблицаДопРеквизитов.Добавить(Новый Массив);

	ФискальныйЧек	= Истина;
	ЧекВозврата		= ?(ОбщиеПараметры.Свойство("ТипЧека"), ?(ВРег(ОбщиеПараметры.ТипЧека) = "ПРОДАЖА", Ложь, Истина), Ложь);
	
	Результат = ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры);
	Для ИндексМассива = 0 По ПозицииЧека.Количество() - 1 Цикл
		
		СтруктураДопРеквизитов = Новый Структура("СтавкаНДССтрокой, ЭтоПодакцизныйТовар, КодДляННиРРО, КодДляННиРРОВыводитьПриПечатиЧека,");

		ПозицияЧека = ПозицииЧека[ИндексМассива];
		
		Наименование  = ?(ПозицияЧека.Свойство("Наименование") , ПозицияЧека.Наименование, "");
		Количество    = ?(ПозицияЧека.Свойство("Количество")   , ПозицияЧека.Количество  , 1);
		Цена          = ?(ПозицияЧека.Свойство("Цена")         , ПозицияЧека.Цена        , 0);
		Сумма         = ?(ПозицияЧека.Свойство("Сумма")        , ПозицияЧека.Сумма       , 0);
		НомерСекции   = ?(ПозицияЧека.Свойство("НомерСекции")  , ПозицияЧека.НомерСекции , 0);
		СтавкаНДС     = ?(ПозицияЧека.Свойство("СтавкаНДС")    , ПозицияЧека.СтавкаНДС   , 0);
		СуммаСкидок   = ?(ПозицияЧека.Свойство("СуммаСкидок")  , ПозицияЧека.СуммаСкидок , 0);

		СтруктураДопРеквизитов.Вставить("СтавкаНДССтрокой",?(ПозицияЧека.Свойство("СтавкаНДССтрокой")  , ПозицияЧека.СтавкаНДССтрокой , ""));
		СтруктураДопРеквизитов.Вставить("ЭтоПодакцизныйТовар",?(ПозицияЧека.Свойство("ЭтоПодакцизныйТовар")  , ПозицияЧека.ЭтоПодакцизныйТовар , Ложь));
		СтруктураДопРеквизитов.Вставить("КодДляННиРРО",?(ПозицияЧека.Свойство("КодПоУКТВЭД")				, ПозицияЧека.КодПоУКТВЭД , ""));
		Если СтруктураДопРеквизитов.ЭтоПодакцизныйТовар И ЗначениеЗаполнено(СтруктураДопРеквизитов.КодДляННиРРО) Тогда   
			СтруктураДопРеквизитов.Вставить("КодДляННиРРОВыводитьПриПечатиЧека",Истина);
		Иначе
			СтруктураДопРеквизитов.Вставить("КодДляННиРРОВыводитьПриПечатиЧека",Ложь);
		КонецЕсли;

		СтруктураДопРеквизитов.Вставить("Штрихкод",ПозицияЧека.Штрихкод);
		
		Если НЕ НапечататьФискальнуюСтроку(
				  ОбъектДрайвера
				, Параметры
				, ПараметрыПодключения
				, Наименование
				, Количество
				, Цена
				, Сумма
				, СуммаСкидок
				, НомерСекции
				, СтавкаНДС
				, СтруктураДопРеквизитов
				, ВыходныеПараметры
				)
		Тогда

			ОшибкаПриПечати = Истина;   
			Прервать;

		КонецЕсли;

	КонецЦикла;

	Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры, Истина, Ложь, ВходныеПараметры[2]);
	ОбъектДрайвера.Параметры.Удалить("УИД");
	ОбъектДрайвера.Параметры.Удалить("ПечататьЧек");
	ОбъектДрайвера.Параметры.Удалить("ТребованиеПечати");

	Возврат Результат;

КонецФункции

// Осуществляет печать текста
//
&НаКлиенте
Функция ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	   
	ДанныеПРРО	= ВходныеПараметры[0];
	ТекстОшибки	= "";

	Если ТипЗнч(ДанныеПРРО) = Тип("Структура") И ДанныеПРРО.Свойство("ОтветПРРО") Тогда

		Результат = НЕ ДанныеПРРО.ОтветПРРО.Количество() = 0;  

		Если Результат = Истина Тогда

			ОбъектДрайвера.Параметры.Вставить("ПечататьЧек", ВходныеПараметры[2][21].ПечатьЧековНаПринтер = Истина И ВходныеПараметры[2][21].ПРРО_ПД_ПечатьЧеков = Истина);

			ТекстЗаголовка	  = "";
			ТабличныйДокумент = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.ПолучитьТабличныйДокументЧек(
				  ДанныеПРРО.ОтветПРРО
				, ДанныеПРРО.ПараметрыЗакрытия
				, ТекстЗаголовка
				, ДанныеПРРО.URL
				,
				, Истина
			);
			#Если _ Тогда
			ТабличныйДокумент = Новый ТабличныйДокумент;
			#КонецЕсли

			ВывестиЧекНаПечать(ТабличныйДокумент, ОбъектДрайвера, ВходныеПараметры[2], ВыходныеПараметры, ТекстЗаголовка, Ложь);	//	LNK 19.02.2024 12:51:55

			ОбъектДрайвера.Параметры.Удалить("ПечататьЧек");

		Иначе

			ТекстОшибки = "відповідь ПРРО не містить інформації для друку";

		КонецЕсли;

	Иначе

	//	это всего лишь текст.. считаем, что всё нормально!
		Результат = Истина;	//	LNK 02.03.2024 08:02:24

	КонецЕсли;

	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда

		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.ПечатьТекста>:"
		+ Символы.ПС + ТекстОшибки);

	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Функция осуществляет открытие нового чека
//
&НаКлиенте
Функция ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры)	Экспорт
	
	Результат = Истина;

	// 20200414
	packet = Неопределено;

	мФискальныйЧек = ФискальныйЧек;
	ИмяКассира = "";
	Успешно = Истина;

//	Открытие фискального чека ФР
	newReceipt = Новый Соответствие;
	newReceipt.insert("pays", new Array);
	newReceipt.insert("rows", new Array);
	newReceipt.insert("sum" , 0);

	Попытка

		Если НЕ ЧекВозврата Тогда

				packet = СоздатьПакет(ОбъектДрайвера, ОбъектДрайвера.Параметры.enFiscalTaskType.SALE_RECEIPT,	new Structure("receipt", newReceipt));

		Иначе	packet = СоздатьПакет(ОбъектДрайвера, ОбъектДрайвера.Параметры.enFiscalTaskType.REFUND_RECEIPT,	new Structure("receipt", newReceipt));

		КонецЕсли;

		ОбъектДрайвера.insert("ТекущееЗадание", packet);

	//	Заполнение выходных параметров
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(0); // Номер документа
		ВыходныеПараметры.Добавить(ОбщегоНазначенияКлиент.ДатаСеанса());

	Исключение

		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.ОткрытьЧек>:" + ОписаниеОшибки());

	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет закрытие ранее открытого чека
//
&НаКлиенте
Функция ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры, ФискальныйЧек = Истина, НулевойЧек = Ложь, ОбщиеПараметры = Неопределено) Экспорт
	
//	LNK 30.03.2023 07:38:22
//	"ПараметрыКассыККМ" - ОбщиеПараметры[21]
	Результат = Истина;

	fiscal	= ОбъектДрайвера.ТекущееЗадание.get("fiscal");
	receipt	= fiscal.get("receipt");
	pays	= receipt.get("pays");

	Если ТипЗнч(ОбщиеПараметры) = Тип("Массив") Тогда

			cashier = СокрЛП(ОбщиеПараметры[12]);

	Иначе	cashier = СокрЛП(ПользователиКлиентСервер.ТекущийПользователь());
	
	КонецЕсли;

	fiscal.Insert("cashier", cashier);

	//2025-02-27 sa возвращаем форму чека в формате PDF
	receipt.Insert("need_pf_pdf", 2);
	
	мЕстьОкругление		= ОбъектДрайвера.Параметры.мЕстьОкругление;
	СуммаДокумента		= receipt.get("sum");
	СуммаОкругления		= 0;
	ИтСуммаОкругления	= 0;
	СуммаОплат			= 0;   

	Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл

		СуммаОплат = СуммаОплат + ТаблицаОплат[ИндексОплаты].Сумма;

	КонецЦикла;

	Сдача = СуммаОплат - СуммаДокумента;

	Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл

		Стр = ТаблицаОплат[ИндексОплаты];
		СуммаОкругления = 0;

		Если НЕ Стр.Сумма = 0 Тогда			

			Если Стр.ТипОплаты = 0 и мЕстьОкругление Тогда

				СуммаДляОкругления = Мин(Стр.Сумма-Сдача,СуммаДокумента);
				СуммаОкругления = РасчитатьОкругление(СуммаДляОкругления);
				Сумма = Стр.Сумма + СуммаОкругления - Сдача;

			ИначеЕсли Стр.ТипОплаты = 0 Тогда

					Сумма = Стр.Сумма-Сдача;

			Иначе	Сумма = Стр.Сумма;

			КонецЕсли;

			pay = Новый Соответствие;
			pay.insert("sum",Сумма);
			pay.insert("type", Стр.ТипОплаты);
			//2025-02-28 Sa Сдача теперь обязательное поле
			Если Сдача > 0 Тогда
				pay.insert("change",Сдача);
			КонецЕсли;
			//2024-09-04 sa Если это оплата картой или кредит, то нужно получить банковские реквизиты по оплате
			//2024-11-13 sa Тип оплаты = 3 - Предоплата. Используется в Интернет магазине
			Если Стр.ТипОплаты = 1 ИЛИ Стр.ТипОплаты = 2  ИЛИ Стр.ТипОплаты = 3 Тогда
				ПлатежныеРеквизиты = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.ПолучитьПлатежныеРеквизиты(ОбъектДрайвера.Параметры.УИД);
				pay.insert("comment",СокрЛП(ПлатежныеРеквизиты.bank_name)); //Имя банка не возвращается в ответе. дублируем в комментарий.
				pay.insert("bank_name",СокрЛП(ПлатежныеРеквизиты.bank_name));
				pay.insert("bank_id",СокрЛП(ПлатежныеРеквизиты.bank_id));
				pay.insert("term_id",СокрЛП(ПлатежныеРеквизиты.term_id));
				pay.insert("paysys",СокрЛП(ПлатежныеРеквизиты.paysys));
				pay.insert("rrn",СокрЛП(ПлатежныеРеквизиты.rrn));
				pay.insert("cardmask",СокрЛП(ПлатежныеРеквизиты.cardmask));
				pay.insert("auth_code",СокрЛП(ПлатежныеРеквизиты.auth_code));
			КонецЕсли;
			
			Если Стр.ТипОплаты = 6 Тогда //оплата сертификатом добавляем номер сертификата
				pay.insert("comment",СокрЛП(Стр.Инфо));
			КонецЕсли;
			pays.add(pay);

		КонецЕсли;

		ИтСуммаОкругления = ИтСуммаОкругления + СуммаОкругления;

	КонецЦикла;				 

	Если ИтСуммаОкругления <> 0 Тогда

		receipt.insert("round", ИтСуммаОкругления);	

	КонецЕсли;

	ПараметрыЗакрытия = Новый Структура(
		"ПечатьПодвала, ТекстПодвала, НомерТелефона, Контрагент, Объект"
		, Ложь
		, ""
		, ""
		, Неопределено
		, Неопределено
	);

	Если НЕ ОбщиеПараметры = Неопределено Тогда

		ПараметрыЗакрытия.ТекстПодвала	= ОбщиеПараметры[7];
		ПараметрыЗакрытия.ПечатьПодвала = ОбъектДрайвера.Параметры.ПечатьПодвала И НЕ ПустаяСтрока(ПараметрыЗакрытия.ТекстПодвала);
		ПараметрыЗакрытия.НомерТелефона	= ОбщиеПараметры[19];
		ПараметрыЗакрытия.Контрагент	= ОбщиеПараметры[20];
		ПараметрыЗакрытия.Объект		= ОбщиеПараметры[17][2];

		receipt.insert("comment_down", ПараметрыЗакрытия.ТекстПодвала);	

	КонецЕсли;
	
	res = ОтправитьПакет(ОбъектДрайвера);

	Попытка

		errortxt = res.get("errortxt");

		Если ЗначениеЗаполнено(errortxt) Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ВыходныеПараметры[1] = res.get("errortxt");

		Иначе

			ОтветККМ		  = ОбъектДрайвера.resJsonString;
			ТекстЗаголовка	  = "";
			URL				  = "";
			
			//2024-09-03 sa Запишем фискальный номер в базу
			ОтветЧека = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.ЗаписатьФискальныйНомер(ОтветККМ,ПараметрыЗакрытия.Объект);
			Если Не ОтветЧека.Успешно Тогда
				ДанныеПротокола = Неопределено;
				СообщитьПользователю("Помилка запису номера чека в базу 1С:" + Символы.ПС + ОтветЧека.ОписаниеОшибки);
			КонецЕсли;
			
			ТабличныйДокумент = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.ПолучитьТабличныйДокументЧек(ОтветККМ, ПараметрыЗакрытия, ТекстЗаголовка, URL,,, НулевойЧек);
			#Если _ Тогда
			ТабличныйДокумент = Новый ТабличныйДокумент;
			#КонецЕсли

			
			Попытка	//	LNK 30.03.2023 07:43:53

				ПотокБуффер = Новый ПотокВПамяти;
				ТабличныйДокумент.Записать(ПотокБуффер, ТипФайлаТабличногоДокумента.PDF);

				ДанныеПротокола = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.УстановитьДанныеПротокола(
					  ПараметрыЗакрытия.Объект
					, URL
					, ПотокБуффер.ЗакрытьИПолучитьДвоичныеДанные()
					, ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.РасшифроватьJSON(ОтветККМ)
				);

			Исключение

			//	LNK 30.03.2023 07:47:48
				ДанныеПротокола = Неопределено;
				СообщитьПользователю("Помилка формування складу друкарської форми:" + Символы.ПС + ОписаниеОшибки());

			КонецПопытки;

			ЕстьДанныеФлагов = (ТипЗнч(ДанныеПротокола) = Тип("Структура"));

			Если ЕстьДанныеФлагов Тогда

				ВыходныеПараметры = Новый Массив(3);
			//	"ДанныеPDF" НЕ сохраняем в чеке.. объём всё-таки!
				ВыходныеПараметры[2] = Новый Структура(
					"URL, ОтветПРРО, ПараметрыЗакрытия, ФлагиПечати"
					, ДанныеПротокола.URL
					, ДанныеПротокола.ОтветПРРО
					, ПараметрыЗакрытия
					, Новый Структура(	//	LNK 06.02.2024 07:40:57
						"Напечатан, ТребованиеПечати, SMS"
						, Ложь													//	была ли печать на принтер чеков вообще?
						, ОбъектДрайвера.Параметры.ТребованиеПечати = Истина	//	Покупателю нужна бумажная копия!
						, Ложь													//	был отправлен SMS
					)
				);

			КонецЕсли;

			ВывестиЧекНаПечать(ТабличныйДокумент, ОбъектДрайвера, ОбщиеПараметры, ВыходныеПараметры, ТекстЗаголовка, ЕстьДанныеФлагов);	//	LNK 19.02.2024 12:51:55

			Если НЕ ПустаяСтрока(ПараметрыЗакрытия.НомерТелефона) И НЕ ПустаяСтрока(URL) И НЕ ДанныеПротокола = Неопределено
				 И ОбъектДрайвера.Параметры.ВидСообщения = ПредопределенноеЗначение("Перечисление.ВидыСообщений.SMS")	Тогда

				Попытка

					РезультатУведомления = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.ОтправитьУведомлениеПокупателю(
						  ПараметрыЗакрытия.НомерТелефона
						, ПараметрыЗакрытия.Контрагент
						, ДанныеПротокола
						, ОбъектДрайвера.Параметры.ВидСообщения
						, ИмяКомпьютера()
						, Ложь
					);

					Если НЕ РезультатУведомления.Ошибка = Истина Тогда

						Если ЕстьДанныеФлагов Тогда	//	LNK 06.02.2024 07:40:40

							ВыходныеПараметры[2].ФлагиПечати.SMS = Истина;

						КонецЕсли;

					Иначе

						СообщитьПользователю("Помилка повідомлення клієнту:" + Символы.ПС + РезультатУведомления.ОписаниеОшибки);

					КонецЕсли;

				Исключение

					СообщитьПользователю("Помилка повідомлення клієнту:" + Символы.ПС + ОписаниеОшибки());

				КонецПопытки;

			КонецЕсли;

		КонецЕсли;		

	Исключение

		Результат	= Ложь;
		ТекстОшибки	= ОписаниеОшибки();
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.ЗакрытьЧек>:" + Символы.ПС + ТекстОшибки);

	КонецПопытки;
	
	Возврат Результат;

КонецФункции

Процедура ВывестиЧекНаПечать(ТабличныйДокумент, ОбъектДрайвера, ОбщиеПараметры, ВыходныеПараметры, ТекстЗаголовка, ЕстьДанныеФлагов)

//	Если ОбщиеПараметры[21].ПечатьЧековНаПринтер = Истина И ОбщиеПараметры[21].ПРРО_ПД_ПечатьЧеков = Истина
	Если ОбъектДрайвера.Параметры.ПечататьЧек = Истина	//	LNK 25.10.2023 06:30:30
	Тогда	//	ОбъектДрайвера.Параметры.НаПринтер

		ТабличныйДокумент.АвтоМасштаб = Ложь;
		ТабличныйДокумент.ШиринаСтраницы = 50;
		ТабличныйДокумент.ВысотаСтраницы = 3276;
		ТабличныйДокумент.ПолеСлева		 = 0;
		ТабличныйДокумент.ПолеСправа	 = 0;

		ТабличныйДокумент.Напечатать();

		Если ЕстьДанныеФлагов Тогда	//	LNK 06.02.2024 07:40:40

			ВыходныеПараметры[2].ФлагиПечати.Напечатан = Истина;

		КонецЕсли;

	ИначеЕсли НЕ (ОбщиеПараметры[21].ПечатьЧековНаПринтер = Истина И ОбщиеПараметры[21].ПРРО_ПД_ПечатьЧеков = Истина) Тогда
	//	LNK 25.10.2023 06:40:17	- имеется ввиду, что показываем чек только если в параметрах
	//	НЕ назначена печать чека. Отказ пользователя не считается.

		ПараметрыФормы = Новый Структура(
			"ТекстЗаголовка, ТабличныйДокумент"
			, ТекстЗаголовка
			, ТабличныйДокумент
		);

		ОткрытьФорму("ОбщаяФорма.ФормаПростогоТабличногоДокумента"
			, ПараметрыФормы
		);

	КонецЕсли;

КонецПроцедуры

// Функция осуществляет отмену ранее открытого чека.
//
&НаКлиенте
Функция ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	Попытка
		//ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторИнтерфейсВК.ОтменитьЧек(ОбъектДрайвера);
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.ОтменитьЧек>: " + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;   
	
КонецФункции

#Область ПечатьФискальныхОтчетов

//	Функция осуществляет снятие отчета без гашения 
//	LNK 08.04.2022 09:25:48
Функция НапечататьОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)

	Результат = Истина;

	Попытка

	//	Снятие X-отчёта ФР
		res = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистратор.ОтправитьПакет(
			  ОбъектДрайвера
			, ОбъектДрайвера.Параметры.enFiscalTaskType.X_REPORT
		);
		Успешно = (res.get("res") = 0);

		Если Успешно = Истина Тогда

			errortxt = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистратор.ПолучитьЗначениеСоответствия(res, "errortxt", "");

			Если ЗначениеЗаполнено(errortxt) Тогда

				Успешно = Ложь;
				ОбъектДрайвера.ОписаниеОшибки = "Помилка друку Х-звіту! "
					+ ПодключаемоеОборудованиеDeviceManagerФискальныйРегистратор.ПолучитьКодИТекстОшибки(ОбъектДрайвера);

			Иначе

				ТекстЗаголовка	  = "Х-звіт";
				ТабличныйДокумент = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.ПолучитьТабличныйДокументОтчет(ТекстЗаголовка, res.Получить("info"));
				#Если _ Тогда
				ТабличныйДокумент = Новый ТабличныйДокумент;
				#КонецЕсли

				Если ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.НапечататьЧекНаПринтере(ВходныеПараметры)	//	LNK 03.01.2024 05:44:29
				Тогда

					ТабличныйДокумент.АвтоМасштаб = Ложь;
					ТабличныйДокумент.ШиринаСтраницы = 50;
					ТабличныйДокумент.ВысотаСтраницы = 3276;
					ТабличныйДокумент.ПолеСлева		 = 0;
					ТабличныйДокумент.ПолеСправа	 = 0;

					ТабличныйДокумент.Напечатать();

					ПоказатьОповещениеПользователя("Х-звіт надруковано",	//	LNK 16.05.2023 15:15:15
						, "Х-звіт сформовано та надіслано на принтер за замовчуванням"
						, БиблиотекаКартинок.Информация32
					);

				КонецЕсли;

				ПараметрыФормы = Новый Структура(
					"ТекстЗаголовка, ТабличныйДокумент"
					, ТекстЗаголовка
					, ТабличныйДокумент
				);

				ОткрытьФорму("ОбщаяФорма.ФормаПростогоТабличногоДокумента"
					, ПараметрыФормы
				);

				ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.ЗаписьИзображенияОтчетаОтладочная(res["pf_image"], "X_отчет");

			КонецЕсли;

		Иначе

			ОбъектДрайвера.ОписаниеОшибки = "Помилка друку Х-звіту! "
				+ ПодключаемоеОборудованиеDeviceManagerФискальныйРегистратор.ПолучитьКодИТекстОшибки(ОбъектДрайвера);

		КонецЕсли;

		Если НЕ Успешно Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(res.get("errortxt"));

		Иначе

			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(ОбщегоНазначенияКлиент.ДатаСеанса());

		КонецЕсли;

	Исключение

		Результат	= Ложь;
		ТекстОшибки	= ОписаниеОшибки();
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьОтчетБезГашения>:" + Символы.ПС + ТекстОшибки);

	КонецПопытки;

	Возврат Результат;

КонецФункции

//	Функция осуществляет снятие отчета с гашением 
//	LNK 08.04.2022 09:25:48
Функция НапечататьОтчетСГашением(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)

	Результат = Истина;

	Попытка

	//	Снятие Z-отчёта ФР
		res = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистратор.ОтправитьПакет(
			  ОбъектДрайвера
			, ОбъектДрайвера.Параметры.enFiscalTaskType.Z_REPORT
		);
		Успешно = (res.get("res") = 0);

		Если Успешно = Истина Тогда

			errortxt = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистратор.ПолучитьЗначениеСоответствия(res, "errortxt", "");

			Если ЗначениеЗаполнено(errortxt) Тогда

				Успешно = Ложь;
				ОбъектДрайвера.ОписаниеОшибки = "Помилка друку Z-звіту!"
					+ ПодключаемоеОборудованиеDeviceManagerФискальныйРегистратор.ПолучитьКодИТекстОшибки(ОбъектДрайвера);

			Иначе

				ТекстЗаголовка	  = "Z-звіт";
				ТабличныйДокумент = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.ПолучитьТабличныйДокументОтчет(ТекстЗаголовка, res.Получить("info"));
				#Если _ Тогда
				ТабличныйДокумент = Новый ТабличныйДокумент;
				#КонецЕсли

				Если  ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.НапечататьЧекНаПринтере(ВходныеПараметры)	//	LNK 03.01.2024 05:44:49
					И ВходныеПараметры[2][21].ПРРО_ПД_Печать_Z_Отчета = Истина
				Тогда

					ТабличныйДокумент.АвтоМасштаб = Ложь;
					ТабличныйДокумент.ШиринаСтраницы = 50;
					ТабличныйДокумент.ВысотаСтраницы = 3276;
					ТабличныйДокумент.ПолеСлева		 = 0;
					ТабличныйДокумент.ПолеСправа	 = 0;

					ТабличныйДокумент.Напечатать();

					ПоказатьОповещениеПользователя("Z-звіт надруковано",	//	LNK 16.05.2023 15:15:15
						, "Z-звіт сформовано та надіслано на принтер за замовчуванням"
						, БиблиотекаКартинок.Информация32
					);

				КонецЕсли;

				ПараметрыФормы = Новый Структура(
					"ТекстЗаголовка, ТабличныйДокумент"
					, ТекстЗаголовка
					, ТабличныйДокумент
				);

				ОткрытьФорму("ОбщаяФорма.ФормаПростогоТабличногоДокумента"
					, ПараметрыФормы
				);

				ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.ЗаписьИзображенияОтчетаОтладочная(res["pf_image"], "Z_отчет");

			КонецЕсли;

		Иначе

			ОбъектДрайвера.ОписаниеОшибки = "Помилка друку Z-звіту! "
				+ ПодключаемоеОборудованиеDeviceManagerФискальныйРегистратор.ПолучитьКодИТекстОшибки(ОбъектДрайвера);

		КонецЕсли;

		Если НЕ Успешно Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(res.get("errortxt"));

		Иначе

			МенеджерОборудованияСервер.СохранитьПараметрыУстройства(Параметры.Идентификатор, Параметры);

			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(ОбщегоНазначенияКлиент.ДатаСеанса());

		КонецЕсли;

	Исключение

		Результат	= Ложь;
		ТекстОшибки	= ОписаниеОшибки();
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьОтчетСГашением>:" + Символы.ПС + ТекстОшибки);

	КонецПопытки;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПечатьПериодическихОтчетов

// Функция осуществляет печать периодического отчёта по датам.
//
&НаКлиенте
Функция НапечататьПериодическийОтчет(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры, ВидОтчёта)
 	
	Результат		 = Истина;
	СуффиксСообщения = "";

	Попытка

		reqData = Новый Соответствие;

		Если ВидОтчёта = "ПоДатам" Тогда

				СуффиксСообщения = " щодо дат";
				reqData.Вставить("dt_from"	, Формат(ВходныеПараметры[0], "ДФ=yyyyMMddHHmmss"));
				reqData.Вставить("dt_to"	, Формат(ВходныеПараметры[1], "ДФ=yyyyMMddHHmmss"));

		Иначе	СуффиксСообщения = " за номерами";
				reqData.Вставить("n_from"	, ВходныеПараметры[0]);
				reqData.Вставить("n_to"		, ВходныеПараметры[1]);

		КонецЕсли;

		res = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистратор.ОтправитьПакет(
			  ОбъектДрайвера
			, ОбъектДрайвера.Параметры.enFiscalTaskType[?(ВидОтчёта = "ПоДатам", "Z_REPORT_BY_DATE", "Z_REPORT_BY_NUM")]
			, reqData
		);
		Успешно = (res.get("res") = 0);

		Если Успешно = Истина Тогда

			errortxt = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистратор.ПолучитьЗначениеСоответствия(res, "errortxt", "");

			Если ЗначениеЗаполнено(errortxt) Тогда

				Успешно = Ложь;
				ОбъектДрайвера.ОписаниеОшибки = "1. Помилка друку періодичного звіту" + СуффиксСообщения + ":" + Символы.ПС
					+ "'dt_from' = [" + reqData["dt_from"] + "]; 'dt_to' = [" + reqData["dt_to"] + "]" + Символы.ПС	//	LNK 14.04.2024 07:48:01
					+ ПодключаемоеОборудованиеDeviceManagerФискальныйРегистратор.ПолучитьКодИТекстОшибки(ОбъектДрайвера);

				Результат = Ложь;
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеОшибки);

			Иначе

				Расширенный = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.РасширенныйПериодескийОтчет(ВходныеПараметры);

				ТекстЗаголовка	  = "Періодичний звіт" + ?(Расширенный = Истина, " повний", " скорочений");
				ТабличныйДокумент = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.ПолучитьТабличныйДокументОтчет(
					  ТекстЗаголовка
					, res.Получить("info")
					, Истина
					, Расширенный
				);
				#Если _ Тогда
				ТабличныйДокумент = Новый ТабличныйДокумент;
				#КонецЕсли

				Если ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.НапечататьЧекНаПринтере(ВходныеПараметры)	//	LNK 03.01.2024 05:40:42
				Тогда

					ТабличныйДокумент.АвтоМасштаб = Ложь;
					ТабличныйДокумент.ШиринаСтраницы = 50;
					ТабличныйДокумент.ВысотаСтраницы = 3276;
					ТабличныйДокумент.ПолеСлева		 = 0;
					ТабличныйДокумент.ПолеСправа	 = 0;

					ТабличныйДокумент.Напечатать();

					ПоказатьОповещениеПользователя("Періодичний звіт" + СуффиксСообщения + " надруковано",	//	LNK 16.05.2023 15:15:15
						, "Періодичний звіт" + СуффиксСообщения + " сформовано та надіслано на принтер за замовчуванням"
						, БиблиотекаКартинок.Информация32
					);

				КонецЕсли;

				ПараметрыФормы = Новый Структура(
					"ТекстЗаголовка, ТабличныйДокумент"
					, ТекстЗаголовка
					, ТабличныйДокумент
				);

				ОткрытьФорму("ОбщаяФорма.ФормаПростогоТабличногоДокумента"
					, ПараметрыФормы
				);

				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(ОбщегоНазначенияКлиент.ДатаСеанса());

				ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.ЗаписьИзображенияОтчетаОтладочная(res["pf_image"], ВидОтчёта);

			КонецЕсли;

		Иначе

			ОбъектДрайвера.ОписаниеОшибки = "2.Помилка друку періодичного звіту" + СуффиксСообщения + ":" + Символы.ПС
				+ "'dt_from' = [" + reqData["dt_from"] + "]; 'dt_to' = [" + reqData["dt_to"] + "]" + Символы.ПС	//	LNK 14.04.2024 07:48:01
				+ ПодключаемоеОборудованиеDeviceManagerФискальныйРегистратор.ПолучитьКодИТекстОшибки(ОбъектДрайвера);

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеОшибки);

		КонецЕсли;

	Исключение

		Результат = Ложь;
		ТекстОшибки	= ОписаниеОшибки();
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьПериодическийОтчет>:" + СуффиксСообщения + Символы.ПС
		//	LNK 14.04.2024 07:48:01
			+ "'dt_from' = [" + ?(ВидОтчёта = "ПоДатам", Формат(ВходныеПараметры[0], "ДФ=yyyyMMddHHmmss"), ВходныеПараметры[0]) + "]; "
			+ "'dt_to' = ["   + ?(ВидОтчёта = "ПоДатам", Формат(ВходныеПараметры[1], "ДФ=yyyyMMddHHmmss"), ВходныеПараметры[1]) + "]" + Символы.ПС
			+ ТекстОшибки
		);

	КонецПопытки;
	
	Если Результат = Ложь Тогда

		ЖурналСобытий.Регистрация("ПЕРИОДИЧЕСКИЙ_ОТЧЕТ", "Ошибка"
			, "Метаданные.Обработки.РМК"
			,
			,
			, ВыходныеПараметры[1]
			,
			, Истина
			, Ложь
		);

	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Функция осуществляет печать фискальной строки 
//
&НаКлиенте
Функция НапечататьФискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                   Наименование, Количество, Цена, Сумма, СуммоваяСкидка,
                                   НомерСекции, СтавкаНДС, ДопРеквизиты, ВыходныеПараметры) Экспорт
	Результат = Истина;
	
	// Печать строки чека
	мКодДляННиРРО = СтрЗаменить(ДопРеквизиты.КодДляННиРРО," ","");
	мКодДляННиРРОВыводитьПриПечатиЧека = ДопРеквизиты.КодДляННиРРОВыводитьПриПечатиЧека;

	НалоговаяГруппа = ПолучитьНалоговуюГруппу(ОбъектДрайвера, СтавкаНДС, ДопРеквизиты);
	
	//Вычленим КОД УКТВЭД
	Если ЗначениеЗаполнено(мКодДляННиРРО) Тогда
		НомерСимвола = Найти(Наименование,мКодДляННиРРО);
		Если НомерСимвола > 0 Тогда
			Наименование = Сред(Наименование,НомерСимвола+СтрДлина(мКодДляННиРРО)+1);
		КонецЕсли;
	КонецЕсли;

	row = Новый Соответствие;
	row.insert("name", Наименование);
	row.insert("cnt", Количество);
	row.insert("disc", СуммоваяСкидка);
	row.insert("cost", Сумма+СуммоваяСкидка);
	row.insert("taxgrp", НалоговаяГруппа);
	
	//2024-09-02 sa для национальной программы Кэшбек вводим печать ШК
	//2024-09-03 sa Мишинский хочет передавать только ШК начинающиеся с 482 или 20
	//2024-09-09 sa Решили передавать все ШК
	//Если Лев(ДопРеквизиты.Штрихкод,3) = "482" ИЛИ Лев(ДопРеквизиты.Штрихкод,2) = "20" Тогда
		row.insert("code1", ДопРеквизиты.Штрихкод);
	//КонецЕсли;
	

	//Код для НН\РРО
	Если мКодДляННиРРОВыводитьПриПечатиЧека Тогда 
		row.insert("code2", мКодДляННиРРО);
	КонецЕсли;
	
	receipt = ОбъектДрайвера.ТекущееЗадание.get("fiscal").get("receipt");
	receipt.get("rows").add(row);
	receipt.insert("sum", receipt.get("sum") + (Сумма));
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет печать нефискальной строки 
//
&НаКлиенте
Функция НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры, ФискальныйЧек = Ложь) Экспорт
	
	Результат = Истина;
	
	Попытка
		//Ответ = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторИнтерфейсВК.НапечататьНефискСтроку(ОбъектДрайвера, СтрокаТекста, ФискальныйЧек);
		Ответ = Истина;
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			//ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторИнтерфейсВК.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);
			ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьНефискСтроку>: " + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет внесение или выемку суммы 
//
&НаКлиенте
Функция Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипИнкассации, Сумма, ВходныеПараметры, ВыходныеПараметры)
	
	Результат	= Истина;
	СтрокаЛога	= "ПРРО.Каса. ";

	Попытка
		
	//	Внесение или изъятие суммы
	//	Положительная сумма - внесение, отрицательная- изъятие
		cash = Новый Соответствие;
		cash.insert("type", 0);	// 99
		cash.insert("sum", Сумма);

		Если ТипИнкассации = 0 Тогда //	Выемка		

				ДобавитьСтрокуЛога("Винесено: " + Сумма, СтрокаЛога);

		Иначе	ДобавитьСтрокуЛога("Внесено: " + Сумма, СтрокаЛога);

		КонецЕсли;
		
		res = ОтправитьПакет(ОбъектДрайвера
			, ?(ТипИнкассации = 0
				, ОбъектДрайвера.Параметры.enFiscalTaskType.CASH_OUT
				, ОбъектДрайвера.Параметры.enFiscalTaskType.CASH_IN)
			, Новый Структура("cash", cash)
		);
		Успешно = (res.get("res") = 0);

		Если Успешно Тогда 

			ТекстЗаголовка	  = "";
			ТабличныйДокумент = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.ПолучитьТабличныйДокументСлужебный(
				  ОбъектДрайвера.resJsonString
				, ТекстЗаголовка
			);

			ОбъектДрайвера.Параметры.Вставить("ПечататьЧек", ВходныеПараметры[2][21].ПечатьЧековНаПринтер = Истина И ВходныеПараметры[2][21].ПРРО_ПД_ПечатьЧеков = Истина);

			ВывестиЧекНаПечать(ТабличныйДокумент, ОбъектДрайвера, ВходныеПараметры[2], ВыходныеПараметры, ТекстЗаголовка, Ложь);	//	LNK 19.02.2024 12:51:55

			ОбъектДрайвера.Параметры.Удалить("ПечататьЧек");

		Иначе

			ОбъектДрайвера.ОписаниеОшибки = "Помилка внесення/видачі готівки:" + Символы.ПС + res.get("errortxt");
			Результат = Ложь;

		КонецЕсли;

		Если НЕ Результат Тогда

			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ВыходныеПараметры[1] = res.get("errortxt");

		Иначе

			СообщитьПользователю(СтрокаЛога);
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(ОбщегоНазначенияКлиент.ДатаСеанса());

		КонецЕсли;

	Исключение

		Результат	= Ложь;
		ТекстОшибки	= ОписаниеОшибки();

		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьЧекВнесенияВыемки>:"
			+ Символы.ПС + ТекстОшибки);

	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет печать штрихкода 
//
&НаКлиенте
Функция ПечатьШтрихкода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипШтрихКода, ШтрихКод, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		//Ответ = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторИнтерфейсВК.НапечататьШтрихКод(ОбъектДрайвера, ТипШтрихКода, ШтрихКод);
		Ответ = Истина;
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			//ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторИнтерфейсВК.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьШтрихКод>: " + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет открытие денежного ящика
//
&НаКлиенте
Функция ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		//Ответ = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторИнтерфейсВК.ОткрытьДенежныйЯщик(ОбъектДрайвера);
		Ответ = Истина;
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			//ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторИнтерфейсВК.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.ОткрытьДенежныйЯщик>: " + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция получает ширину строки в символах
//  
&НаКлиенте
Функция ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	ШиринаСтроки = 0;
	 
	Попытка
		//Ответ = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторИнтерфейсВК.ПолучитьШиринуСтроки(ОбъектДрайвера, ШиринаСтроки);
		Ответ = Истина;
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			//ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторИнтерфейсВК.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);
		Иначе
			ВыходныеПараметры.Очистить();  
			ВыходныеПараметры.Добавить(ШиринаСтроки);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.ПолучитьШиринуСтроки>: " + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет печать нулевого чека.
&НаКлиенте	//	LNK 08.03.2024 09:28:09
Функция НапечататьНулевойЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)

	Результат = Истина;
	
	Попытка

		ШаблонЧека		= ПодключаемоеОборудованиеDeviceManagerФискальныйРегистратор.СформироватьШаблонЧека(ВходныеПараметры);
		ОбщиеПараметры	= ШаблонЧека[0];
		ФискальныйЧек	= Ложь;

		ОбъектДрайвера.Параметры.Вставить("ПечататьЧек"		, ОбщиеПараметры.ПечататьЧек);
		ОбъектДрайвера.Параметры.Вставить("ТребованиеПечати", Ложь);

		Результат = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистратор.ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

		Если Результат Тогда

			Результат = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистратор.ОткрытьЧек(
				  ОбъектДрайвера
				, Параметры
				, ПараметрыПодключения
				, Ложь
				, ФискальныйЧек
				, ВыходныеПараметры
			);

			Если Результат Тогда

				Результат = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистратор.ЗакрытьЧек(
					  ОбъектДрайвера
					, Параметры
					, ПараметрыПодключения
					, Новый Массив
					, ВыходныеПараметры
					, ФискальныйЧек
					, Истина	//	Нулевой чек
					, ВходныеПараметры[2]
				);

			КонецЕсли;

		КонецЕсли;

		ОбъектДрайвера.Параметры.Удалить("ПечататьЧек");
		ОбъектДрайвера.Параметры.Удалить("ТребованиеПечати");

		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(ОбщегоНазначенияКлиент.ДатаСеанса());

	Исключение

		Результат = Ложь;
		ТекстОшибки = ОписаниеОшибки();
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьНулевойЧек>:" + Символы.ПС + ТекстОшибки);

	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет печать отчёта о проданных товарах.
//
&НаКлиенте
Функция НапечататьОтчетОПроданныхТоварах(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		//Ответ = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторИнтерфейсВК.НапечататьОтчетОПроданныхТоварах(ОбъектДрайвера);
		Ответ = Истина;
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			//ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторИнтерфейсВК.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);
		Иначе
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(ОбщегоНазначенияКлиент.ДатаСеанса());
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьОтчетСГашением>: " + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет вывод информации на дисплей покупателя.
//
&НаКлиенте
Функция ВывестиИнформациюНаДисплейПокупателя(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		//Ответ = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторИнтерфейсВК.ВывестиИнформациюНаДисплейПокупателя(ОбъектДрайвера, Параметры, ВходныеПараметры[0], ВходныеПараметры[1]);
		Ответ = Истина;
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			//ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторИнтерфейсВК.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);
		Иначе
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(ОбщегоНазначенияКлиент.ДатаСеанса());
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.ВывестиСтрокуНаДисплейПокупателя>: " + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет очистку дисплея покупателя.
//
&НаКлиенте
Функция ОчиститьДисплейПокупателя(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	//Ответ = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторИнтерфейсВК.ОчиститьДисплейПокупателя(ОбъектДрайвера);
	Ответ = Истина;
	Если Не Ответ Тогда
		Результат = Ложь;
		ОбъектДрайвера.ПолучитьОшибку(ОбъектДрайвера.ОписаниеОшибки);
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеОшибки);
	КонецЕсли;

	Возврат Результат;

КонецФункции

//////////////////////////////////////////////////////////////////////////////
// Процедуры и функции общие для всех типов драйверов

// Функция осуществляет тестирование устройства.
//
&НаКлиенте
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		ОбъектДрайвера = СоздатьОбъектДрайвера(Параметры);
	КонецЕсли;
	ОбъектДрайвера.Вставить("ДополнительноеОписание");
	Результат  = ПодключитьУстройство(ОбъектДрайвера,Параметры,,);
	ДополнительноеОписание ="";
	Если Результат Тогда 
		res = ПолучитьДанные(ОбъектДрайвера);
		Результат = ТипЗНЧ(res) = Тип("Соответствие");
		Если НЕ Результат Тогда 
			ОбъектДрайвера.ОписаниеОшибки = "Помилка отримання інформації! " + ПолучитьКодИТекстОшибки(ОбъектДрайвера);
		Иначе
			errortxt = ПолучитьЗначениеСоответствия(res,"errortxt","");
			Если ЗначениеЗаполнено(errortxt) Тогда
				ОбъектДрайвера.ОписаниеОшибки = "Помилка отримання інформації! " + ПолучитьКодИТекстОшибки(ОбъектДрайвера);	
				Результат = Ложь;
			Иначе
				devices = res.Получить("devices");
				Для каждого Стр ИЗ devices Цикл
					device =  ПолучитьЗначениеСоответствия(Стр, "device", "");
					Если device <> ОбъектДрайвера.Параметры.ИмяУстройства Тогда
						Продолжить;
					КонецЕсли;
					
					Для каждого Элемент ИЗ Стр Цикл
						ДополнительноеОписание = ДополнительноеОписание+"
						|"+(Элемент.Ключ+"  : "+Элемент.Значение);  	
					КонецЦикла;
					ОбъектДрайвера.ДополнительноеОписание =ДополнительноеОписание;
					Прервать;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции


// Функция возвращает версию установленного драйвера
//
&НаКлиенте
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	ВыходныеПараметры.Добавить("Встановлений");
	ВыходныеПараметры.Добавить("Не визначена");

	Попытка
		ВыходныеПараметры[1] = ПолучитьВерсиюДрайвераКлиент();
	Исключение
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция возвращает описание установленного драйвера
//
&НаКлиенте
Функция ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить("Встановлений");
	ВыходныеПараметры.Добавить("Не визначена");
	
	ВыходныеПараметры.Добавить("Не визначено");
	ВыходныеПараметры.Добавить("Не визначено");
	ВыходныеПараметры.Добавить("Не визначено");
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционнаяБиблиотека  = "";
	ОсновнойДрайверУстановлен = "";
	РевизияИнтерфейса         = "";
	URLЗагрузкиДрайвера       = "";
	ПараметрыДрайвера         = "";
	ДополнительныеДействия    = "";
	
	Попытка

		ВерсияДрайвера = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);	
		ВыходныеПараметры[1] = ВерсияДрайвера;
										
		Наименование = " Device Manager: Универсальный драйвер фискальных регистраторов";
		Описание = " Device Manager – предназначена для работы прикладных программ с POS оборудованием в операционных системах MS Windows";
		ТипОборудования = "ФискальныйРегистратор";
		ИнтеграционнаяБиблиотека = "DeviceManagerMob.exe";
		РевизияИнтерфейса = "1.0.9.8";
		ОсновнойДрайверУстановлен = Истина;
		ПолучитьURLCкачивания = "";
		
		ВыходныеПараметры[2] = НаименованиеДрайвера;
		ВыходныеПараметры[3] = ОписаниеДрайвера;
		ВыходныеПараметры[4] = ТипОборудования;
		ВыходныеПараметры[5] = РевизияИнтерфейса;
		ВыходныеПараметры[6] = ИнтеграционнаяБиблиотека;
		ВыходныеПараметры[7] = ОсновнойДрайверУстановлен;
		ВыходныеПараметры[8] = URLЗагрузкиДрайвера;
		
		ПараметрыДрайвера = "";	
		ВыходныеПараметры[9] = ПараметрыДрайвера;
		
		ДополнительныеДействия = "";	
		ВыходныеПараметры[10] = ДополнительныеДействия;

	Исключение

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Помилка отримання опису драйвера");

	КонецПопытки;

	Возврат Результат;

КонецФункции
                                            
///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция возвращает возможность работы модуля в асинхронном режиме.
// Стандартные команды модуля:
// - ПодключитьУстройство
// - ОтключитьУстройство
// - ВыполнитьКоманду
// Команды модуля для работы асинхронном режиме (должны быть определены):
// - НачатьПодключениеУстройства
// - НачатьОтключениеУстройства
// - НачатьВыполнениеКоманды
//
&НаКлиенте
Функция ПоддержкаАсинхронногоРежима() Экспорт
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьПараметры(Параметры) Экспорт
	
//	Типы фискального задания:
//	1 - продажный чек
//	2 - возвратный чек
//	3 - служебный внесение денег
//	4 - служебный вынесение денег
//	10 - X-отчет
//	11 - Z-отчет
//	12 - периодический отчет по номерам
//	13 - периодический отчет по датам
//	20 - повтор последнего документа

	enFiscalTaskType = Новый Структура;
	enFiscalTaskType.Вставить("OPEN_SHIFT", 0);
	enFiscalTaskType.Вставить("SALE_RECEIPT", 1);
	enFiscalTaskType.Вставить("REFUND_RECEIPT", 2);
	enFiscalTaskType.Вставить("CASH_IN", 3);
	enFiscalTaskType.Вставить("CASH_OUT", 4);
	enFiscalTaskType.Вставить("X_REPORT", 10);
	enFiscalTaskType.Вставить("Z_REPORT", 11);

//	LNK 21.12.2023 08:04:53
	enFiscalTaskType.Вставить("Z_REPORT_BY_NUM"	, 12);
	enFiscalTaskType.Вставить("Z_REPORT_BY_DATE", 13);

	enFiscalTaskType.Вставить("LAST_DOCUMENT_COPY", 20);        

//	Типы заданий ДМ: 1 = фискальная; 2 = документ; 3 = оплата; 4 = весы
	enDMTaskType = Новый Структура;
	enDMTaskType.Вставить("FISCAL", 1);
	enDMTaskType.Вставить("DOCUMENT", 2);
	enDMTaskType.Вставить("PAYMENT", 3);
	enDMTaskType.Вставить("WEIGHT", 4);
	
	PrroStatus = Новый СписокЗначений;
	PrroStatus.Добавить( 0, "Онлайн");
	PrroStatus.Добавить( 1, "Онлайн (после ошибки)");
	PrroStatus.Добавить( 2, "Онлайн (коллизия)");
	PrroStatus.Добавить( 3, "Онлайн (ошибка)");
	PrroStatus.Добавить(10, "Офлайн");
	PrroStatus.Добавить(12, "Офлайн (ошибка)");
	PrroStatus.Добавить(20, "Заблокирован");
	
	Параметры.Вставить("enFiscalTaskType"	, enFiscalTaskType);
	Параметры.Вставить("enDMTaskType"		, enDMTaskType);
	Параметры.Вставить("PrroStatus"			, PrroStatus);

	Возврат Параметры;

КонецФункции

&НаКлиенте
Функция ОтправитьПакет(ОбъектДрайвера, Задание = "", reqData = Неопределено) Экспорт

  	Перем IP, ПортIP, ТипСоединения, ИмяУстройства, Токен;
	  
	ОбъектДрайвера.Параметры.Свойство("IP", IP);
	ОбъектДрайвера.Параметры.Свойство("ПортIP", ПортIP);
	ОбъектДрайвера.Параметры.Свойство("ИмяУстройства", ИмяУстройства);
	ОбъектДрайвера.Параметры.Свойство("Токен", Токен);

	dm = ОбъектДрайвера.Драйвер;

	Если Задание = "" Тогда

			reqJsonString = СформироватьJSON(ОбъектДрайвера.ТекущееЗадание);

	Иначе	reqJsonString = СформироватьJSON(СоздатьПакет(ОбъектДрайвера, Задание, reqData));

	КонецЕсли;
	
	resData = Неопределено;
	
	Попытка

		connection = new HTTPConnection(IP, ПортIP);
		
	Исключение

		resData = СтруктураВМассив(new Structure("res, errortxt", -1, "Не вдалося встановити з'єднання з DeviceManager:"
			+ " " + ErrorDescription()));
		connection = Неопределено;

	КонецПопытки;

	Если resData = Неопределено Тогда

		request = new HTTPRequest("/dm/execute");
		request.headers.insert("Content-Type", "application/json");
		request.setBodyFromString(reqJsonString); //, TextEncoding.UTF8, ByteOrderMarkUsage.DontUse);

		Попытка

			response = connection.POST(request);
			resJsonString = response.getBodyAsString();

		Исключение

			resData = СтруктураВМассив(new Structure("res, errortxt", -2, "Помилка отримання відповіді від DeviceManager:"
			+ " " + ErrorDescription()));

			connection = Неопределено;

		КонецПопытки;

	КонецЕсли;

	Если resData = Неопределено Тогда

		Если valueIsFilled(resJsonString) Тогда

				resData = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.РасшифроватьJSON(resJsonString);

		Иначе	resData = СтруктураВМассив(new Structure("res, errortxt", -3, "Відсутня відповідь DeviceManager"));

		КонецЕсли;

	КонецЕсли;

	Если resData = Неопределено Тогда

		resData = СтруктураВМассив(new Structure("res, errortxt", -4, "Помилка розшифровки відповіді DeviceManager"));

	КонецЕсли;
	
	ОбъектДрайвера.insert("lastResp", resData);
	ОбъектДрайвера.insert("resJsonString", resJsonString);
	
	Возврат resData;

КонецФункции

&НаКлиенте
Функция ПолучитьДанные(ОбъектДрайвера,Запрос = Неопределено) Экспорт 

	Перем IP, ПортIP, ИмяУстройства, Токен;
	  
	ОбъектДрайвера.Параметры.Свойство("IP", IP);
	ОбъектДрайвера.Параметры.Свойство("ПортIP", ПортIP);
	ОбъектДрайвера.Параметры.Свойство("ИмяУстройства", ИмяУстройства);
	ОбъектДрайвера.Параметры.Свойство("Токен", Токен);
	
	dm = ОбъектДрайвера.Драйвер;
	
	resData = Неопределено;
	reqJsonString = "";
	
	Если Запрос = Неопределено Тогда
		Запрос = "/dm/vchasno-kasa/api/v1/dashboard";
	КонецЕсли;
	
	
	Попытка
		connection = new HTTPConnection(IP, ПортIP);
		
	Исключение
		resData = СтруктураВМассив(new Structure("res, errortxt", -1, nStr("ru = 'Не удалось установить соединение с DeviceManager:'; en = 'Не вдалося встановити з''єднання з DeviceManager:'; uk = 'Cannot connect with DeviceManager:'")
		+ " " + ErrorDescription()));
		connection = Неопределено;
	КонецПопытки;
	
	Если resData = Неопределено Тогда
		request = new HTTPRequest(Запрос);
		request.headers.insert("Content-Type", "application/json");
		
		Попытка
			//Сообщить(reqJsonString);
			response = connection.GET(request);
			resJsonString = response.getBodyAsString();
			
		Исключение
			resData = СтруктураВМассив(new Structure("res, errortxt", -2, nStr("ru = 'Ошибка получения ответа от DeviceManager:'; en = 'Помилка отримання відповіді від DeviceManager:'; uk = 'Error getting response from DeviceManager:'")
			+ " " + ErrorDescription()));
			connection = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	
	Если resData = Неопределено Тогда
		Если valueIsFilled(resJsonString) Тогда
			resData = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.РасшифроватьJSON(resJsonString);
			
		Иначе
			resData = СтруктураВМассив(new Structure("res, errortxt", -3, nStr("ru = 'Отсутствует ответ от DeviceManager'; uk = 'Отсутствует ответ от DeviceManager'; en = 'Отсутствует ответ от DeviceManager'")));
		КонецЕсли;
	КонецЕсли;
	
	Если resData = Неопределено Тогда
		resData = СтруктураВМассив(new Structure("res, errortxt", -4, nStr("ru = 'Ошибка расшифровки ответа от DeviceManager'; uk = 'Ошибка расшифровки ответа от DeviceManager'; en = 'Ошибка расшифровки ответа от DeviceManager'")));
	КонецЕсли;
	
	ОбъектДрайвера.insert("lastResp", resData);
	ОбъектДрайвера.insert("resJsonString", resJsonString);
	
	Возврат resData;
КонецФункции

&НаКлиенте
Функция СформироватьJSON(data)

	jsonWriter = new JSONWriter;
	jsonWriter.setString(new JSONWriterSettings(JSONLineBreak.Unix, " ", true));
	writeJSON(jsonWriter, data);

	Возврат jsonWriter.close();

КонецФункции

&НаКлиенте
Функция СоздатьПакет(ОбъектДрайвера, Задание, reqData = Неопределено)

	Если ОбъектДрайвера.Параметры.Свойство("УИД") Тогда

			tag = ОбъектДрайвера.Параметры.УИД;

	Иначе	tag = СокрЛП(Задание) + "_" + format(currentDate(), "ДФ=yyyyMMddHHmmss"); //открытие смены

	КонецЕсли;

	packet = Новый Соответствие;
	packet.Вставить("ver"		, 6);
	packet.Вставить("source"	, "1C||BAS");   
	packet.Вставить("device"	, ОбъектДрайвера.Параметры.ИмяУстройства);
	packet.Вставить("token"		, ОбъектДрайвера.Параметры.Токен);
	packet.Вставить("tag"		, tag);
	packet.Вставить("dt"		, Формат(currentDate(), "ДФ=yyyyMMddHHmmss"));
	packet.Вставить("type"		, ОбъектДрайвера.Параметры.enDMTaskType.FISCAL);
	
//	LNK 23.12.2023 07:24:00 - временно, для контроля картинкой "pf_image"
	packet.Вставить("need_pf_img"	, 2);
	packet.Вставить("need_pf_pdf"	, 1);
	packet.Вставить("need_pf_txt"	, 1);

	Если Задание >= 0 Тогда

		fiscal = Новый Соответствие;
		fiscal.Вставить("casher", "");
		fiscal.Вставить("cpwd"	, "");
		fiscal.Вставить("fisid"	, "");
		fiscal.Вставить("task"	, Задание);

		//2024-09-03 sa для возвратов нужно передавать поле содержащее фискальный номер чека продажи
		Если Задание = 2 Тогда
			//ФН_Продажи = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.ПолучитьФискальныйНомерЧека();
			СтруктураОтвета = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.ПолучитьФискальныйНомерЧекаПродажиПоУИД(Прав(ОбъектДрайвера.Параметры.УИД,36));
			Если СтруктураОтвета.Успешно Тогда
				fiscal.Вставить("purchase_receipt_fisn"	, СтруктураОтвета.ФискальныйНомер);
				fiscal.Вставить("purchase_rro_fisn"	, СтруктураОтвета.ФискальныйРегистратор);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ reqData = Неопределено Тогда

			Для каждого КлючЗначение Из reqData Цикл

				fiscal.Вставить(КлючЗначение.key, КлючЗначение.value);

			КонецЦикла;

		КонецЕсли;

		packet.Вставить("fiscal", fiscal);

	Иначе

		Если НЕ reqData = Неопределено Тогда

			Для каждого КлючЗначение Из reqData Цикл

				packet.Вставить(КлючЗначение.key, КлючЗначение.value);

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;
	
	Возврат packet;

КонецФункции

&НаКлиенте
Функция СтруктураВМассив(struct)

	Коллекция = Новый Соответствие;

	Для каждого kv Из struct Цикл

		Коллекция.Вставить(kv.key, kv.value);

	КонецЦикла;

	Возврат Коллекция;

КонецФункции

&НаКлиенте
Функция ПолучитьВерсиюДрайвераКлиент()
	Возврат "6.0";
КонецФункции

&НаКлиенте
Функция ПолучитьКодИТекстОшибки(ОбъектРРО) Экспорт

	ТекстОшибки = "";

	Если ОбъектРРО.Свойство("lastResp") Тогда

		Если ЗначениеЗаполнено(ОбъектРРО.lastResp.get("res")) Тогда

			ТекстОшибки = Строка(ОбъектРРО.lastResp.get("res")) + " " + ОбъектРРО.lastResp.get("errortxt");

		КонецЕсли;

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции	

&НаКлиенте
Функция ПолучитьЗначениеСоответствия(Соответствие, Ключ, ЗначениеПоУмолчанию=Неопределено) Экспорт
	Значение = Соответствие.Получить(Ключ);
	Если Значение = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	Возврат Значение;
КонецФункции

#Область МетодыСообщенияПользователю

&НаКлиенте
Процедура СообщитьПользователю(ТекстСообщения) Экспорт

	ПоказатьОповещениеПользователя("ПРРО:", , ТекстСообщения);

КонецПроцедуры

&НаКлиенте
Функция ДобавитьСтрокуЛога(ТекстСообщения, СтрокаЛога)	Экспорт

	СтрокаЛога = СокрЛП(СтрокаЛога) + Символы.ПС + СокрЛП(ТекстСообщения);

	Возврат СтрокаЛога;

КонецФункции

#КонецОбласти

&НаКлиенте
Функция ПолучитьНалоговуюГруппу(ОбъектРРО, НДС, СтруктураДопРеквизитов)
	СтавкаНДССтрокой = Неопределено;
	ЭтоПодакцизныйТовар = Неопределено;
	
	Рез = 1;
	
	СтруктураДопРеквизитов.Свойство("СтавкаНДССтрокой", СтавкаНДССтрокой);
	СтруктураДопРеквизитов.Свойство("ЭтоПодакцизныйТовар", ЭтоПодакцизныйТовар);
	
	ТаблицаСоответствий = Неопределено;
	ОбъектРРО.Параметры.Свойство("ТаблицаСоответствийНалоговыхГрупп", ТаблицаСоответствий);
	Для каждого Строка из ТаблицаСоответствий Цикл
		Если Строка[3] = СтавкаНДССтрокой И Строка[2] = ЭтоПодакцизныйТовар Тогда
			Рез = Строка[0];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
КонецФункции	

// Функция формирует шаблон чека.
&НаКлиенте
Функция СформироватьШаблонЧека(ВходныеПараметры, ДополнительныйТекст = Неопределено, ТипОборудования = "") Экспорт

	ТаблицаНоменклатуры = ВходныеПараметры[0];
	ТаблицаОплат        = ВходныеПараметры[1];
	ОбщиеПараметры      = ВходныеПараметры[2];

	ТипыЧеков = Новый Соответствие();
	ТипыЧеков.Вставить(0, "ПРОДАЖА"); 
	ТипыЧеков.Вставить(1, "ВОЗВРАТ");
	ТипыЧеков.Вставить(2, "ВНЕСЕНИЕ"); 
	ТипыЧеков.Вставить(3, "ВЫЕМКА");
	ТипыЧеков.Вставить(4, "ОТЧЕТ БЕЗ ГАШЕНИЯ");
	ТипыЧеков.Вставить(5, "ОТЧЕТ С ГАШЕНИЕМ");
	
	// Общие параметры чека
	ПараметрыЧека = Новый Структура;

	ПараметрыЧека.Вставить("ТипЧека"			, ТипыЧеков.Получить(ОбщиеПараметры[0])); 
	ПараметрыЧека.Вставить("ФискальныйЧек"		, ОбщиеПараметры[1]);
	ПараметрыЧека.Вставить("СуммаДокумента"		, ОбщиеПараметры[3]);

	ПараметрыЧека.Вставить("ТекстШапки"			, ВРег(ОбщиеПараметры[6]));
	ПараметрыЧека.Вставить("ТекстПодвала"		, ВРег(ОбщиеПараметры[7]));
	ПараметрыЧека.Вставить("НомерЧека"			, ОбщиеПараметры[ 9]);
	ПараметрыЧека.Вставить("НомерКассы"			, ОбщиеПараметры[10]);
	ПараметрыЧека.Вставить("ДатаВремя"			, ВРег(ОбщиеПараметры[11]));
	ПараметрыЧека.Вставить("ИмяКассира"			, ВРег(ОбщиеПараметры[12]));
	ПараметрыЧека.Вставить("ОрганизацияНазвание", "");//ВРег(ОбщиеПараметры[13]));
	ПараметрыЧека.Вставить("ОрганизацияИНН"     , "");//ОбщиеПараметры[14]);
	ПараметрыЧека.Вставить("ДокументОснование"	, ОбщиеПараметры[17][2]);
	ПараметрыЧека.Вставить("НомерЧекаВозврата"	, "");//ОбщиеПараметры[18]);

//	LNK 25.10.2023 05:41:37
	ПараметрыЧека.Вставить("НомерТелефона"			, ОбщиеПараметры[19]);
	ПараметрыЧека.Вставить("ВладелецДисконтнойКарты", ОбщиеПараметры[20]);
	ПараметрыЧека.Вставить("ВызовИзРМК"	, ?(ОбщиеПараметры[21].Свойство("ВызовИзРМК"), ОбщиеПараметры[21].ВызовИзРМК, Ложь));
	ПараметрыЧека.Вставить("ПечататьЧек", ОбщиеПараметры[21].ПечатьЧековНаПринтер = Истина И ОбщиеПараметры[21].ПРРО_ПД_ПечатьЧеков = Истина);
	
	ТаблицаДопРеквизитов = Новый Массив;
	ТаблицаДопРеквизитов.Добавить(Новый Массив);

	// Формируем позиции чека
	Если НЕ ТаблицаНоменклатуры = Неопределено Тогда

		ПозицииЧека = Новый Массив;

		Для ИндексМассива = 0 По ТаблицаНоменклатуры.Количество() - 1 Цикл

			СтрокаПозицииЧека = Новый Структура;

			ДанныеСтроки = ТаблицаНоменклатуры[ИндексМассива];

			СтрокаПозицииЧека.Вставить("ФискальнаяСтрока");
			СтрокаПозицииЧека.Вставить("Наименование"			, ДанныеСтроки[ 0].Значение);
			СтрокаПозицииЧека.Вставить("Штрихкод"			   	, ДанныеСтроки[ 1].Значение);
			СтрокаПозицииЧека.Вставить("Артикул"			   	, ДанныеСтроки[ 2].Значение);
			СтрокаПозицииЧека.Вставить("НомерСекции" 			, ДанныеСтроки[ 3].Значение);

			СтрокаПозицииЧека.Вставить("Цена"					, ДанныеСтроки[ 4].Значение);
			СтрокаПозицииЧека.Вставить("Количество"				, ДанныеСтроки[ 5].Значение);

			СтрокаПозицииЧека.Вставить("СуммаСкидок" 			, ДанныеСтроки[ 7].Значение);
			СтрокаПозицииЧека.Вставить("ПроцентСкидок"			, ДанныеСтроки[ 8].Значение);

			СтрокаПозицииЧека.Вставить("Сумма"       			, ДанныеСтроки[ 9].Значение);
			СтрокаПозицииЧека.Вставить("СуммаНДС" 				, ДанныеСтроки[11].Значение);
			СтрокаПозицииЧека.Вставить("СтавкаНДС"   			, ДанныеСтроки[12].Значение);
			СтрокаПозицииЧека.Вставить("СтавкаНДССтрокой"		, ДанныеСтроки[17].Значение);

			СтрокаПозицииЧека.Вставить("ЭтоПодакцизныйТовар"   	, ДанныеСтроки[18].Значение);

			СтрокаПозицииЧека.Вставить("КодПоУКТВЭД"		   	, ДанныеСтроки[19].Значение);
			СтрокаПозицииЧека.Вставить("ЕдиницаИзмерения"		, ДанныеСтроки[20].Значение);
			СтрокаПозицииЧека.Вставить("ЦенаВключаетНДС"		, ДанныеСтроки[21].Значение);

			ПозицииЧека.Добавить(СтрокаПозицииЧека);

		КонецЦикла;

	Иначе

		ПозицииЧека = Неопределено;

	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДополнительныйТекст) Тогда

		Если ПозицииЧека = Неопределено Тогда

			ПозицииЧека = Новый Массив;

		КонецЕсли;

		СтрокаПозицииЧека = Новый Структура;
		СтрокаПозицииЧека.Вставить("ТекстоваяСтрока");
		СтрокаПозицииЧека.Вставить("Текст",  ДополнительныйТекст);

		ПозицииЧека.Добавить(СтрокаПозицииЧека);

	КонецЕсли;
	
	// Формируем таблицу оплат.
	Если НЕ ТаблицаОплат = Неопределено Тогда

		ОплатаЧека = Новый Массив;

		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл

			СтрокаОплаты = Новый Структура;

			СтрокаОплаты.Вставить("ТипОплаты"   , 	ТаблицаОплат[ИндексОплаты][0].Значение);
			СтрокаОплаты.Вставить("Сумма"       , 	ТаблицаОплат[ИндексОплаты][1].Значение);
			СтрокаОплаты.Вставить("Наименование", 	ТаблицаОплат[ИндексОплаты][2].Значение);
			СтрокаОплаты.Вставить("Инфо", 			ТаблицаОплат[ИндексОплаты][3].Значение);

			ОплатаЧека.Добавить(СтрокаОплаты);

		КонецЦикла; 

	Иначе

		ТаблицаОплат = Неопределено;

	КонецЕсли;
	
	// Подготовка данных.
	ШаблонЧека  = Новый Массив();
	ШаблонЧека.Добавить(ПараметрыЧека);
	ШаблонЧека.Добавить(ПозицииЧека);
	ШаблонЧека.Добавить(ОплатаЧека);
	
	Возврат ШаблонЧека;

КонецФункции

&НаКлиенте
Функция РасчитатьОкругление(Сумма)
	Возврат Окр(Сумма,1)- Сумма;
КонецФункции

#Область ПоддержкаФункционала

//	LNK 26.12.2022 06:10:16
Функция ПолучитьДанныеЧека(ДокументСсылка)	Экспорт

	ДанныеЧека = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.ПолучитьДанныеЧека(ДокументСсылка);

	Возврат ДанныеЧека;

КонецФункции

#КонецОбласти













