
///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция осуществляет подключение устройства.
//
// Параметры:
//  ОбъектДрайвера   - <*>
//           - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;

	ПараметрыПодключения.Вставить("ИДУстройства", "");

	ВыходныеПараметры = Новый Массив();

	// Проверка настроенных параметров
	Порт         = Неопределено;
	Наименование = Неопределено;

	Параметры.Свойство("Порт"        , Порт);
	Параметры.Свойство("Модель", Наименование);

	Если Порт         = Неопределено
	 Или Наименование = Неопределено Тогда
	 	ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.
		|Сделать это можно при помощи формы ""Настройка параметров"" модели
		|подключаемого оборудования в форме ""Подключение и настройка оборудования"".'"));

		Результат = Ложь;                    
		Возврат Результат;
	КонецЕсли;                               
	
	НомерУстройства = Порт -1;

	Если Результат Тогда
		Если ОбъектДрайвера.Connect(НомерУстройства) Тогда
			ПараметрыПодключения.ИДУстройства = ОбъектДрайвера.SerialNumber;

		Иначе
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ОбъектДрайвера.LastError);

			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет отключение устройства.
//
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;

	ВыходныеПараметры = Новый Массив();
	
	Порт         = Неопределено;
	Наименование = Неопределено;

	Если ОбъектДрайвера.IsEnabled Тогда
		Параметры.Свойство("Порт"        , Порт);
		ОбъектДрайвера.Disconnect(Порт-1);
	Иначе 
		Сообщить("Биосканер уже отключен!");
	КонецЕсли;
	
	ПараметрыПодключения.ИДУстройства = Неопределено;

	Возврат Результат;

КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт

	Результат = Истина;

	ВыходныеПараметры = Новый Массив();

	// Подключить устройство 
	Если Команда = "ПодключитьУстройство" ИЛИ Команда = "Connect" Тогда
		
		Результат = ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	// Отключить устройство
	ИначеЕсли Команда = "ОтключитьУстройство" ИЛИ Команда = "Disconnect" Тогда
		Результат = ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	ИначеЕсли Команда = "ИдентифицироватьСотрудника" ИЛИ Команда = "IdentifyEmployee" Тогда 
		Результат = ИдентифицироватьСотрудника(ОбъектДрайвера, ВходныеПараметры, ВыходныеПараметры);
	ИначеЕсли Команда = "ПоследнийОтпечаток" ИЛИ Команда = "LastScan" Тогда
		Попытка
			ВыходныеПараметры.Добавить(ОбъектДрайвера.LastScan);
			ДанныеКартинки = ОбъектДрайвера.GetPicture();
			ДвоичныеДанные2 = ДвоичныеДанныеИзSafe(ДанныеКартинки);
			Картинка_ = Новый Картинка(ДвоичныеДанные2);

			ВыходныеПараметры.Добавить(Картинка_);
			Результат = Истина;
		Исключение
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("Не удалось получить отпечаток: "+ОбъектДрайвера.LastError+" {"+ОписаниеОшибки()+"}");
			Результат = Ложь;
		КонецПопытки;         
		
		Возврат Результат;

	ИначеЕсли Команда = "ОбработатьСобытие" ИЛИ Команда = "ExternalEvent" Тогда
		Если ТипЗнч(ВходныеПараметры)<> Тип("Массив") ИЛИ ВходныеПараметры.Количество()=0 Тогда
			Возврат Ложь;
		КонецЕсли;
		Результат = ОбработатьСобытие(ОбъектДрайвера, ВходныеПараметры[0], ВыходныеПараметры);

	// Начать захват отпечатка
	ИначеЕсли Команда = "ЗахватОтпечатка" ИЛИ Команда = "StartIdentify" Тогда

		Если ОбъектДрайвера.StartCapture() Тогда
			//Сообщить("Старт захвата отпечатка!");
		Иначе
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("Не удалось начать захват отпечатка: "+ОбъектДрайвера.LastError);

			Результат = Ложь;
		КонецЕсли;	                                        

	// Закончить захват отпечатка
	ИначеЕсли Команда = "ОстановитьЗахват" ИЛИ Команда = "EndIdentify" Тогда

		Если ОбъектДрайвера.StopCapture() Тогда
			//Сообщить("Захват отпечатка остановлен!");
		Иначе
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("Не удалось остановить захват отпечатка: "+ОбъектДрайвера.LastError);

			Результат = Ложь;
		КонецЕсли;	                                        

	// Запускает процедуру регистрации отпечатка. Регистрация состоит из трех этапов. (Палец нужно приложить к сенсору 3 раза по указанию драйвера)
	// По результатам каждого этапа библиотека генерирует Внешнее событие Enroll в котором можно выловить результат этапа, ИД отпечатка и его фото. 
	ИначеЕсли Команда = "РегистрацияОтпечатка" ИЛИ Команда = "Enroll" Тогда
 
		ОбъектДрайвера.AcquireFingerprint(0); 
		//Сообщить("Запустили регистрацию отпечатка");               
		
	// Запускает процедуру регистрации отпечатка по трем подготовленными отпечаткам. Отпечатки могут быть получены функцией ЗахватОтпечатка.
	// На вход подаем массив отпечатков. В случае успешного выполнения зарегистрированный отпечаток можно получить в параметре LastScan
	// если вторым параметром указан сотрудник, то фиксируем его в этой базе.
	ИначеЕсли Команда = "РегистрацияПоДанным" ИЛИ Команда = "Register" Тогда
		Если ТипЗнч(ВходныеПараметры) <> Тип("Массив") ИЛИ ВходныеПараметры.Количество() =0  Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("Нет данных для регистрации сотрудника!");

			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
    	МассивОтпечатков = ВходныеПараметры[0];                              
		Если ТипЗнч(МассивОтпечатков) <> Тип("Массив") ИЛИ МассивОтпечатков.Количество() <>3 Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("Нет данных для регистрации сотрудника! Для регистрации нужно передать три отпечатка!");

			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;

		БМ = Новый COMSafeArray(МассивОтпечатков,"VT_BSTR",МассивОтпечатков.Количество()); 
		Если ОбъектДрайвера.RegisterFingerprint(БМ) Тогда
			ЗарегистрированныйОтпечаток = ОбъектДрайвера.LastScan;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(ЗарегистрированныйОтпечаток);
			
			Результат = Истина;
			
			Возврат Результат;
			
		Иначе     
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("Ошибка регистрации отпечатка: "+ОбъектДрайвера.LastError);

			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		
		
	// Сравнение отпечатков. На вход подаются два ИД отпечатка, на выходе оценка их совпадения. 0 - не совпадает, 100 - полное совпадение.
	ИначеЕсли Команда = "СравнитьОтпечатки" ИЛИ Команда = "Compare" Тогда 
		Если ТипЗнч(ВходныеПараметры) <> Тип("Массив") ИЛИ ВходныеПараметры.Количество() < 2 Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("Нет данных для сравнения!");

			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		
		
		Оценка = ОбъектДрайвера.VerifyFingerprint(Строка(ВходныеПараметры[0]),Строка(ВходныеПараметры[1]));
		//Сообщить("Оценка совпадения = "+Оценка);
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(Оценка);

	// Инициализирует встроенную базу данных отпечатков. Инициализация может выполняться один раз после подключения сканера. В встроенную базу загружаются отпечатки сотрудников магазина
	// Дальнейший поиск может осуществляться по этой БД. Преимущества - быстрая загрузка отпечатков в память сканера, быстрый поиск отпечатка по БД. 
	// Недостатки - в результате возвращает порядковый номер отпечатка в БД, поэтому нужно хранить отдельно сопоставление отпечатков и Сотрудников-владельцев 
	// этих отпечатков. После отключения устройства БД стирается.
	// Во входных параметрах должен быть указан строковой массив загружаемых ИД отпечатков.
	ИначеЕсли Команда = "ИнициализацияБД" ИЛИ Команда = "InitDB" Тогда       
		Если ТипЗнч(ВходныеПараметры) <> Тип("Массив") ИЛИ ВходныеПараметры.Количество() =0  Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("Нет данных для инициализации встроенной БД!");

			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		
		ДанныеБиометрии = ВходныеПараметры[0];
		Если ТипЗнч(ДанныеБиометрии) <> Тип("Массив") ИЛИ ДанныеБиометрии.Количество() =0 Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("Нет данных для инициализации встроенной БД!");

			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		
		БМ = Новый COMSafeArray(ДанныеБиометрии,"VT_BSTR",ДанныеБиометрии.Количество()); 
		Если ОбъектДрайвера.InitDB(БМ) Тогда
			//Сообщить("База данных биосканера инициализированна успешно!");
		Иначе     
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("Ошибка инициализации встроенной БД: "+ОбъектДрайвера.LastError);

			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		
	ИначеЕсли Команда = "ИнициализацияБДпоУИД" ИЛИ Команда = "InitDBbyID" Тогда       
		Если ТипЗнч(ВходныеПараметры) <> Тип("Массив") ИЛИ ВходныеПараметры.Количество() =0  Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("Нет данных для инициализации встроенной БД!");

			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		
		ДанныеБиометрии = ВходныеПараметры[0];
		УИДСотрудников = ВходныеПараметры[1];
		Если ТипЗнч(ДанныеБиометрии) <> Тип("Массив") ИЛИ ДанныеБиометрии.Количество() =0  
				ИЛИ  ТипЗнч(УИДСотрудников) <> Тип("Массив") ИЛИ УИДСотрудников.Количество() =0  
				ИЛИ ДанныеБиометрии.Количество() <> УИДСотрудников.Количество() Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("Нет данных для инициализации встроенной БД!");

			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		
		БМ = Новый COMSafeArray(ДанныеБиометрии,"VT_BSTR",ДанныеБиометрии.Количество()); 
		СМ = Новый COMSafeArray(УИДСотрудников,"VT_BSTR",УИДСотрудников.Количество()); 
		Если ОбъектДрайвера.InitDBStr(СМ, БМ) Тогда
			//Сообщить("База данных биосканера инициализированна успешно!");
		Иначе     
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("Ошибка инициализации встроенной БД: "+ОбъектДрайвера.LastError);

			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		
	// Сравнение отпечатков по встроенной базе данных. На вход подается ИД отпечатка, на выходе Номер отпечатка в базе.
	ИначеЕсли Команда = "НайтиПоБД" ИЛИ Команда = "MatchDB" Тогда
		
		Если ТипЗнч(ВходныеПараметры) <> Тип("Массив") ИЛИ ВходныеПараметры.Количество() = 0 Тогда
			//ВыходныеПараметры.Очистить();
			//ВыходныеПараметры.Добавить(999);
			//ВыходныеПараметры.Добавить("Нет данных для поиска по встроенной БД!");

			//Результат = Ложь;
			//Возврат Результат;     
			Отпечаток = ОбъектДрайвера.LastScan;
		Иначе
			Отпечаток = Строка(ВходныеПараметры[0]);
		КонецЕсли;
		
		НомерОтпечатка = ОбъектДрайвера.MatchDB(Отпечаток);
		
		Если НомерОтпечатка <> -1 Тогда
			//Сообщить("Найден отпечаток по внутренней базе данных! Номер отпечатка = "+НомерОтпечатка);
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерОтпечатка);
		Иначе
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("Отпечаток не найден по встроенной БД!");

			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		
	// Сравнение отпечатков по встроенной базе данных. На вход подается ИД отпечатка, на выходе Номер отпечатка в базе.
	ИначеЕсли Команда = "НайтиУИДвБД" ИЛИ Команда = "MatchDBbyID" Тогда
		
		Если ТипЗнч(ВходныеПараметры) <> Тип("Массив") ИЛИ ВходныеПараметры.Количество() = 0 Тогда
			//ВыходныеПараметры.Очистить();
			//ВыходныеПараметры.Добавить(999);
			//ВыходныеПараметры.Добавить("Нет данных для поиска по встроенной БД!");

			//Результат = Ложь;
			//Возврат Результат;     
			Отпечаток = ОбъектДрайвера.LastScan;
		Иначе
			Отпечаток = Строка(ВходныеПараметры[0]);
		КонецЕсли;
		
		УИДСотрудника = ОбъектДрайвера.MatchFingerDB(Отпечаток);
		
		Если УИДСотрудника <> "" Тогда
			//Сообщить("Найден отпечаток по внутренней базе данных! Номер отпечатка = "+НомерОтпечатка);
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(УИДСотрудника);
		Иначе
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("Отпечаток не найден по встроенной БД!");

			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		 
	// Тестирование устройства
	ИначеЕсли Команда = "CheckHealth" ИЛИ Команда = "ТестУстройства" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Указанная команда не поддерживается данным драйвером
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Результат = Ложь;

	КонецЕсли;

	Возврат Результат;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


// Функция осуществляет тестирование устройства.
//
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;
	
	ВыходныеПараметрыВрем = Неопределено;
	ОтключатьУстройство = Ложь;
	Если Не ОбъектДрайвера.IsEnabled Тогда
		ОтключатьУстройство = Истина;
		Результат = ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметрыВрем);
    КонецЕсли;
	//ОбъектДрайвера.НомерТекущегоУстройства = ПараметрыПодключения.ИДУстройства;
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(?(Результат, 0, 999));
    ВыходныеПараметры.Добавить(?(Результат, "Биосканер s/n: "+ОбъектДрайвера.SerialNumber+" протестирован успешно!",
		НСтр("ru='Ошибка при подключении устройства'")));
	
	Если Результат И ОтключатьУстройство Тогда	
		Результат = ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметрыВрем);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция возвращает версию установленного драйвера
//
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));

	Попытка
		ВыходныеПараметры[1] = ОбъектДрайвера.Version;
	Исключение
	КонецПопытки;

	Возврат Результат;

КонецФункции      

Функция ИдентифицироватьСотрудника(ОбъектДрайвера, ВходныеПараметры, ВыходныеПараметры)
    //код не написан пока. Используем Поиск по БД.
	Возврат Истина;
КонецФункции

Функция SafeИзДвоичныхДанных(ДвоичныеДанные)
    Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
                Буфер = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ДвоичныеДанные);
    КонецЕсли;
    
    Байтов = Буфер.Размер;
    COMSafeArray = Новый COMSafeArray("VT_UI1", Байтов);//однобайтовый без знака
    Для сч = 0 по Байтов-1 Цикл
        COMSafeArray.SetValue(сч, Буфер.Получить(сч));
    КонецЦикла;
    Возврат COMSafeArray;
КонецФункции

Функция ДвоичныеДанныеИзSafe(SafeArray)
	Массив = SafeArray.Выгрузить();
    Длинна = Массив.Количество();
    Буфер = Новый БуферДвоичныхДанных(Длинна);
    Для индекс = 0 по Длинна - 1 Цикл
        Буфер.Установить(индекс,Массив[индекс]);    
    КонецЦикла;    
    Поток = Новый ПотокВПамяти(Буфер);
    ДД = Поток.ЗакрытьИПолучитьДвоичныеДанные();    
	
	Возврат ДД;
КонецФункции

//События могут быть
//Identify - идентификация отпечатка
//Enroll_OK - этап регистрации отпечатка
//Enroll_END - окончание регистрации отпечатка.
Функция ОбработатьСобытие(ОбъектДрайвера,Событие,ВыходныеПараметры)
	ВыходныеПараметры = Новый Массив;
	Результат = Ложь;
	Попытка
		ВыходныеПараметры.Вставить(ОбъектДрайвера.LastScan);
		ВыходныеПараметры.Вставить(ОбъектДрайвера.GetPicture());
		Результат = Истина;
	Исключение
	КонецПопытки;    
	
	Возврат Результат;
КонецФункции

