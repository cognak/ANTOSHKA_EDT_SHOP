

// ПРОЦЕДУРА "ПриИзменении" НА КЛИЕНТЕ.
// ВЫЗОВ ЭТОЙ ПРОЦЕДУРЫ ДОЛЖЕН ОСУЩЕСТВЛЯТЬСЯ ИЗ ФОРМ ДОКУМЕНТОВ.
//
// СтруктураДействий - Структура. Возможно передавать следующие поля:
//  "ПроверитьХарактеристикуПоВладельцу", Характеристика.
//  "ПроверитьЗаполнитьУпаковкуПоВладельцу"      , Упаковка.
//  "ПересчитатьКоличествоЕдиниц".
//  "ПересчитатьКоличествоЕдиницПлан".
//  "ПересчитатьКоличествоЕдиницФакт", ИмяФакта
//  "ОчиститьКоличествоУчет"
//  "ЗаполнитьОбъемВесУпаковки"	        , Упаковка.
//  "ЗаполнитьЦенуПродажи"              , СтруктураПараметровДействия.
//  "ПересчитатьСумму". ИмяКоличества
//  "ПересчитатьСуммуСУчетомРучнойСкидки"     , СтруктураПараметровДействия.
//  "ПересчитатьСуммуСУчетомАвтоматическойСкидки"     , СтруктураПараметровДействия.
//  "ПересчитатьЦенуЗаУпаковку"         , КоличествоЕдиницДоПересчета.
//  "ПересчитатьСуммуНДС".
//  "ЗаполнитьСтавкуНДС".
//  "ПересчитатьКоличествоУпаковок". Имя
//  "ПересчитатьКоличествоУпаковокФакт". ИмяФакта
//  "ОбработатьШтрихкоды".
//  "ПроверитьСерийныеНомераПоВладельцу", СтруктураПараметровДействия.
//  "ЗаполнитьЦенуПродажиРозница" , СтруктураПараметровДействия.
//  "ПересчитатьСуммуРучнойСкидки".
//  "ПересчитатьПроцентРучнойСкидки".
//  "ПересчитатьСуммуФактВСтрокеТЧКлиент", ИмяКоличества
//  "ПересчитатьЦенуПоСуммеФактВСтрокеТЧКлиент" 
Процедура ПриИзмененииРеквизитовВТЧКлиент(ТЧ, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем ЗначениеИзСтруктуры;

	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;

	ПараметрыОбработкиТЧ = ПолучитьПараметрыОбработкиТЧ(ТЧ,
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения
	);

	Если ПараметрыОбработкиТЧ.НеобходимВызовСервера Тогда

		СтруктураТЧ = Новый Структура;
		СтруктураТЧ.Вставить("СтруктураПолейТЧ", ПолучитьСтруктуруПолейТЧ(ПараметрыОбработкиТЧ.СтруктураДействий));

		Если ПараметрыОбработкиТЧ.НеобходимоОбработатьВсюТЧ Тогда

			СтрокиТЧ = Новый Массив;

			Для Каждого ТекущаяСтрокаТЧ Из ТЧ Цикл

				ТекущаяСтрока = ПолучитьДанныеТекущейСтроки(ТекущаяСтрокаТЧ, СтруктураТЧ.СтруктураПолейТЧ);
				ТекущаяСтрока.Вставить("_ИдентификаторСтроки_", ТекущаяСтрокаТЧ.ПолучитьИдентификатор());

				СтрокиТЧ.Добавить(ТекущаяСтрока);

			КонецЦикла;

			СтруктураТЧ.Вставить("СтрокиТЧ" , СтрокиТЧ);

			ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, КэшированныеЗначения);

			Для Каждого ТекСтрока Из СтруктураТЧ.СтрокиТЧ Цикл

				Если ТекСтрока.Свойство("_ИдентификаторСтроки_", ЗначениеИзСтруктуры) Тогда
					ТекСтрокаТЧ = ТЧ.НайтиПоИдентификатору(ЗначениеИзСтруктуры);
				Иначе
					ТекСтрокаТЧ = ТЧ.Добавить();
				КонецЕсли;

				ЗаполнитьЗначенияСвойств(ТекСтрокаТЧ, ТекСтрока);

			КонецЦикла;

		Иначе

			СтруктураТЧ.Вставить("ТекущаяСтрока" , ПолучитьДанныеТекущейСтроки(ТекущаяСтрока, СтруктураТЧ.СтруктураПолейТЧ));

			ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, КэшированныеЗначения);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураТЧ.ТекущаяСтрока);

		КонецЕсли;

	Иначе // все можно обработать на клиенте

		СоответствиеДействий = Новый Соответствие;

		ОбработатьШтрихкодыКлиент(ТЧ, СтруктураДействий, КэшированныеЗначения, СоответствиеДействий);
		ПересчитатьСуммыНДСКлиент(ТЧ, СтруктураДействий, КэшированныеЗначения, СоответствиеДействий);
		ОчиститьКоличествоУчетКлиент(ТЧ, СтруктураДействий, КэшированныеЗначения, СоответствиеДействий);
		
		Если ПараметрыОбработкиТЧ.НеобходимоОбработатьВсюТЧ Тогда
			Для Каждого ТекущаяСтрока Из ТЧ Цикл
				
				ТекСтруктураДействий = СоответствиеДействий[ТекущаяСтрока];
				
				Если ТекСтруктураДействий <> Неопределено Тогда
					ОбработатьСтрокуТЧКлиент(ТекущаяСтрока, ТекСтруктураДействий, КэшированныеЗначения);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ОбработатьСтрокуТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура обработки строки
//
Процедура ОбработатьСтрокуТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ПроверитьСерийныеНомераПоВладельцуКлиент(ТекущаяСтрока                   , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьДанныеПоДокументуПродажиВСтрокеТЧКлиент(ТекущаяСтрока           , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьТипНоменклатурыВСтрокеТЧКлиент(ТекущаяСтрока                    , СтруктураДействий, КэшированныеЗначения);
	ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковкиКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоУпаковокВСтрокеТЧКлиент(ТекущаяСтрока               , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоУпаковокФактВСтрокеТЧКлиент(ТекущаяСтрока           , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоЕдиницПланВСтрокеТЧКлиент(ТекущаяСтрока             , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоЕдиницФактВСтрокеТЧКлиент(ТекущаяСтрока             , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьОчиститьКоличествоУчетВСтрокеТЧКлиент(ТекущаяСтрока           , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоЕдиницВСтрокеТЧКлиент(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуЗаУпаковкуВСтрокеТЧКлиент(ТекущаяСтрока                   , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСкладПродажиВСтрокеТЧКлиент(ТекущаяСтрока                       , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьОрганизациюПродажиВСтрокеТЧКлиент(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуПродажиРозницаВСтрокеТЧКлиент(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуЗакупкиВСтрокеТЧКлиент(ТекущаяСтрока                        , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуПрошлойЗакупкиВСтрокеТЧКлиент(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьДействующуюЦенуПродажиВСтрокеТЧКлиент(ТекущаяСтрока             , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДСВСтрокеТЧКлиент(ТекущаяСтрока                          , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДСВСтрокеСкладВСтрокеТЧКлиент(ТекущаяСтрока              , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДСВСтрокеСкладВШапкеТЧКлиент(ТекущаяСтрока               , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьПроцентРучнойСкидкиВСтрокеТЧКлиент(ТекущаяСтрока              , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуРучнойСкидкиВСтрокеТЧКлиент(ТекущаяСтрока                , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуВСтрокеТЧКлиент(ТекущаяСтрока                            , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧКлиент(ТекущаяСтрока       , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧКлиент(ТекущаяСтрока       , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧКлиент(ТекущаяСтрока , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуСУчетомБонусыНачислениеВСтрокеТЧКлиент(ТекущаяСтрока     , СтруктураДействий, КэшированныеЗначения);	//	LNK 19.03.2021 10:23:57
	ПересчитатьСуммуСУчетомБонусыСписаниеВСтрокеТЧКлиент(ТекущаяСтрока       , СтруктураДействий, КэшированныеЗначения);	//	LNK 19.03.2021 10:23:57
	ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧКлиент(ТекущаяСтрока         , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуНДСВСтрокеТЧКлиент(ТекущаяСтрока                         , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуНДСиАкцизногоНалогаВСтрокеТЧКлиент(ТекущаяСтрока         , СтруктураДействий, КэшированныеЗначения);	
	ПересчитатьСуммуНДСПоСуммеСНДСВСтрокеТЧКлиент(ТекущаяСтрока              , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуСНДСВСтрокеТЧКлиент(ТекущаяСтрока                        , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуФактВСтрокеТЧКлиент(ТекущаяСтрока                        , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуПоСуммеФактВСтрокеТЧКлиент(ТекущаяСтрока                  , СтруктураДействий, КэшированныеЗначения);
	ПроставитьПродавцаВСтрокеТЧКлиент(ТекущаяСтрока                          , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуПоСуммеСНДСВСтрокеТЧКлиент(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуПоСуммеВЗакупкахВСтрокеТЧКлиент(ТекущаяСтрока             , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьДубликатыЗависимыхРеквизитовКлиент(ТекущаяСтрока				 , СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

// ПРОЦЕДУРЫ ПЕРЕСЧЕТА И ЗАПОЛНЕНИЯ КЛИЕНТ.

// Процедура пересчета "ПроверитьСерийныеНомераПоВладельцу"
//
Процедура ПроверитьСерийныеНомераПоВладельцуКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если СтруктураДействий.Свойство("ПроверитьСерийныеНомераПоВладельцу") Тогда
		
		
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПроверитьХарактеристикуПоВладельцу" и "ПроверитьЗаполнитьУпаковкуПоВладельцу"
//
Процедура ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковкиКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
		ТекущаяСтрока.Характеристика = Неопределено;
		ТекущаяСтрока.ХарактеристикиИспользуются = Ложь;
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
		ТекущаяСтрока.Упаковка = Неопределено;
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьКоличествоЕдиниц"
//
Процедура ПересчитатьКоличествоЕдиницВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц") Тогда
		ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок
		   * ПолучитьКоэффициентУпаковкиКлиент(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьКоличествоЕдиницПлан"
//
Процедура ПересчитатьКоличествоЕдиницПланВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницПлан") Тогда
		ТекущаяСтрока.КоличествоПлан = ТекущаяСтрока.КоличествоУпаковокПлан
		   * ПолучитьКоэффициентУпаковкиКлиент(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьКоличествоЕдиницФакт"
//
Процедура ПересчитатьКоличествоЕдиницФактВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяФакта = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницФакт",ИмяФакта) Тогда
		ТекущаяСтрока["Количество"+ИмяФакта] = ТекущаяСтрока["КоличествоУпаковок"+ИмяФакта]
		   * ПолучитьКоэффициентУпаковкиКлиент(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ОчиститьКоличествоУчет"
//
Процедура ПересчитатьОчиститьКоличествоУчетВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ОчиститьКоличествоУчет") Тогда
		
		ТекущаяСтрока.Количество 		 = 0;
		ТекущаяСтрока.КоличествоУпаковок = 0;
		
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьЦенуЗаУпаковку"
//
Процедура ПересчитатьЦенуЗаУпаковкуВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем КоличествоЕдиницДоПересчета;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку", КоличествоЕдиницДоПересчета)
	   И КоличествоЕдиницДоПересчета <> 0 Тогда
		ТекущаяСтрока.Цена = ТекущаяСтрока.Цена
		   / КоличествоЕдиницДоПересчета
		   * ТекущаяСтрока.Количество;
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ЗаполнитьСтавкуНДС"
//
Процедура ЗаполнитьСтавкуНДСВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС") Тогда
		ТекущаяСтрока.СтавкаНДС = Неопределено;
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ЗаполнитьСтавкуНДССкладВСтроке"
//
Процедура ЗаполнитьСтавкуНДСВСтрокеСкладВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССкладВСтроке") Тогда
		ТекущаяСтрока.СтавкаНДС = Неопределено;
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ЗаполнитьСтавкуНДССкладВШапке"
//
Процедура ЗаполнитьСтавкуНДСВСтрокеСкладВШапкеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССкладВШапке") Тогда
		ТекущаяСтрока.СтавкаНДС = Неопределено;
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьСумму"
//
Процедура ПересчитатьСуммуВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСумму",ИмяКоличества) Тогда
		Если Не ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок";
		КонецЕсли;
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьСуммуФакт"
//
Процедура ПересчитатьСуммуФактВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуФакт",ИмяКоличества) Тогда
		Если Не ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковокФакт";
		КонецЕсли;
		ТекущаяСтрока.СуммаФакт = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьПроцентРучнойСкидки"
//
Процедура ПересчитатьПроцентРучнойСкидкиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьПроцентРучнойСкидки", СтруктураПараметровДействия) Тогда
		
		Если ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена <> 0 Тогда
			ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / (ТекущаяСтрока.КоличествоУпаковок *ТекущаяСтрока.Цена), 2);
		Иначе
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьСуммуРучнойСкидки"
//
Процедура ПересчитатьСуммуРучнойСкидкиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРучнойСкидки", СтруктураПараметровДействия) Тогда
		
		ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока.КоличествоУпаковок *ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100, 2);
		
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьСуммуСУчетомРучнойСкидки"
//
Процедура ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки", СтруктураПараметровДействия) Тогда
		
		Очищать = Неопределено;
		ПересчитыватьСуммуРучнойСкидки = Неопределено;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			
			СтруктураПараметровДействия.Свойство("Очищать", Очищать);
			СтруктураПараметровДействия.Свойство("ПересчитыватьСуммуРучнойСкидки", ПересчитыватьСуммуРучнойСкидки);
			
			Если Очищать = Истина Тогда
				
				ТекущаяСтрока.СуммаРучнойСкидки = 0;
				ТекущаяСтрока.ПроцентРучнойСкидки = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПересчитыватьСуммуРучнойСкидки = Ложь Тогда
			
		Иначе
			ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока.КоличествоУпаковок *ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100, 2);
		КонецЕсли;
			
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаРучнойСкидки;
		
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьЦенуСкидкуПоСуммеВПродажах"
//
Процедура ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПараметровДействия) Тогда
		
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИспользоватьАвтоматическиеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьАвтоматическиеСкидки") Тогда
				ИспользоватьАвтоматическиеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах Тогда
			
			Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
				Сумма = ТекущаяСтрока.Цена;
			Иначе
				Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
			КонецЕсли;
			
			Если Сумма = 0 Или ТекущаяСтрока.Сумма = 0 Тогда
				
				ТекущаяСтрока.Цена                = ТекущаяСтрока.Сумма;
				ТекущаяСтрока.СуммаРучнойСкидки   = 0;
				ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			Иначе
				
				ТекущаяСтрока.СуммаРучнойСкидки   = Сумма - ТекущаяСтрока.Сумма;
				ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / Сумма, 2);
				
			КонецЕсли;
			
		Иначе
			
			Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
				ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
			Иначе
				ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.КоличествоУпаковок, 2);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьАвтоматическиеСкидки Тогда
			Если КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
				ТекущаяСтрока.СуммаАвтоматическойСкидки   = 0;
				ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчета "ПересчитатьЦенуСкидкуПоСуммеВЗакупках"
//
Процедура ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", СтруктураПараметровДействия) Тогда
		
		ИспользоватьРучныеСкидки =Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках Тогда
			
			Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
				Сумма = ТекущаяСтрока.Цена;
			Иначе
				Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
			КонецЕсли;
			
			Если Сумма = 0 Или ТекущаяСтрока.Сумма = 0 Тогда
				
				ТекущаяСтрока.Цена                = ТекущаяСтрока.Сумма;
				ТекущаяСтрока.СуммаРучнойСкидки   = 0;
				ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			Иначе
				
				ТекущаяСтрока.СуммаРучнойСкидки   = Сумма - ТекущаяСтрока.Сумма;
				ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / Сумма, 2);
				
			КонецЕсли;
			
		Иначе
			
			Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
				ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
			Иначе
				ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.КоличествоУпаковок, 2);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчета "ПересчитатьЦенуПоСуммеВЗакупках"
//
Процедура ПересчитатьЦенуПоСуммеВЗакупкахВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПоСуммеВЗакупках", СтруктураПараметровДействия) Тогда
		
		Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
			ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
		Иначе
			ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.КоличествоУпаковок, 2);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчета "ПересчитатьЦенуПоСуммеФакт"
//
Процедура ПересчитатьЦенуПоСуммеФактВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПоСуммеФакт", СтруктураПараметровДействия) Тогда
		
		Если ТекущаяСтрока.КоличествоУпаковокФакт = 0 Тогда
			
			ТекущаяСтрока.Цена = ТекущаяСтрока.СуммаФакт;
			
		Иначе
			
			ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.СуммаФакт / ТекущаяСтрока.КоличествоУпаковокФакт, 2);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчета "ПроставитьПродавца"
//
Процедура ПроставитьПродавцаВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	Перем Продавец;

	Если СтруктураДействий.Свойство("ПроставитьПродавца", Продавец) Тогда
		
		ТекущаяСтрока.Продавец = Продавец;
		
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьСуммуСУчетомАвтоматическойСкидки"
//
Процедура ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки", СтруктураПараметровДействия) Тогда
		
		Очищать = Неопределено;
		СтруктураПараметровДействия.Свойство("Очищать", Очищать);
		
		Если Очищать Тогда
			
			ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
			ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
			
		КонецЕсли;
		
		Скидка = ТекущаяСтрока.СуммаАвтоматическойСкидки;
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - Скидка;
		
	КонецЕсли;

КонецПроцедуры

//	LNK 19.03.2021 10:19:15
Процедура ПересчитатьСуммуСУчетомБонусыНачислениеВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", СтруктураПараметровДействия) Тогда
		
		Очищать = Неопределено;
		СтруктураПараметровДействия.Свойство("Очищать", Очищать);
		
		Если Очищать Тогда
			
			ТекущаяСтрока.СуммаБонусныхБалловНачислено = 0;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

//	LNK 19.03.2021 10:19:15
Процедура ПересчитатьСуммуСУчетомБонусыСписаниеВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомБонусныхБалловСписано", СтруктураПараметровДействия) Тогда
		
		Очищать = Неопределено;
		СтруктураПараметровДействия.Свойство("Очищать", Очищать);
		
		Если Очищать Тогда
			
			ТекущаяСтрока.СуммаБонусныхБалловСписано = 0;
			
		КонецЕсли;
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаБонусныхБалловСписано;

	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьСуммуНДС"
//
Процедура ПересчитатьСуммуНДСВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС", СтруктураПараметровДействия) Тогда
		
		ТекПроцентНДС = ПолучитьПроцентНДСКлиент(ТекущаяСтрока.СтавкаНДС, КэшированныеЗначения);
		ТекущаяСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.РассчитатьСуммуНДС(ТекущаяСтрока.Сумма, ТекПроцентНДС, СтруктураПараметровДействия.ЦенаВключаетНДС);
	
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьСуммуНДСиАкцизногоНалога"
//
Процедура ПересчитатьСуммуНДСиАкцизногоНалогаВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДСиАкцизногоНалога", СтруктураПараметровДействия) Тогда
		
		ТекПроцентНДС = ПолучитьПроцентНДСКлиент(ТекущаяСтрока.СтавкаНДС, КэшированныеЗначения);
		Если УчетАкцизногоНалогаКлиентСервер.ДействуетАкцизныйНалог(СтруктураПараметровДействия.Дата) Тогда
			ТекущаяСтрока.СуммаАкцизногоНалога = УчетАкцизногоНалогаКлиентСервер.РассчитатьСуммуАкцизногоНалога(
												 		ТекущаяСтрока.Сумма, 
														СтруктураПараметровДействия.ЦенаВключаетНДС, 
														ТекущаяСтрока.ПодакцизныйТовар, 
														ТекущаяСтрока.ПодакцизныеТоварыДляКоммерческогоИспользования
														);
		Иначе
			ТекущаяСтрока.СуммаАкцизногоНалога = 0;
		КонецЕсли; 
		
		ТекущаяСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.РассчитатьСуммуНДС(ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаАкцизногоНалога, ТекПроцентНДС, СтруктураПараметровДействия.ЦенаВключаетНДС);
		
	КонецЕсли;
	
КонецПроцедуры


// Процедура пересчета "ПересчитатьСуммуНДСПоСуммеСНДС"
//
Процедура ПересчитатьСуммуНДСПоСуммеСНДСВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДСПоСуммеСНДС", СтруктураПараметровДействия) Тогда
		
		ТекПроцентНДС = ПолучитьПроцентНДСКлиент(ТекущаяСтрока.СтавкаНДС, КэшированныеЗначения);
		ТекущаяСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.РассчитатьСуммуНДСПоСуммеСНДС(ТекущаяСтрока.СуммаВсего, ТекПроцентНДС, СтруктураПараметровДействия.ЦенаВключаетНДС);
	
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьСуммуПоСуммеСНДС"
//
Процедура ПересчитатьСуммуПоСуммеСНДСВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПоСуммеСНДС", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.ЦенаВключаетНДС Тогда
			ТекущаяСтрока.Сумма = ТекущаяСтрока.СуммаВсего;
		Иначе
			ТекущаяСтрока.Сумма = ТекущаяСтрока.СуммаВсего - ТекущаяСтрока.СуммаНДС;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчета "ПересчитатьСуммуСНДС"
//
Процедура ПересчитатьСуммуСНДСВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС", СтруктураПараметровДействия) Тогда
		
		ТекущаяСтрока.СуммаСНДС = ТекущаяСтрока.Сумма + ?(СтруктураПараметровДействия.ЦенаВключаетНДС, 0, ТекущаяСтрока.СуммаНДС);
	
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьКоличествоУпаковок"
//
Процедура ПересчитатьКоличествоУпаковокВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Имя = "";
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок",Имя) Тогда
		ТекущаяСтрока["КоличествоУпаковок" + Имя] = ТекущаяСтрока["Количество" + Имя]
		   / ПолучитьКоэффициентУпаковкиКлиент(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьКоличествоУпаковокФакт"
//
Процедура ПересчитатьКоличествоУпаковокФактВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяФакта = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокФакт",ИмяФакта) Тогда
		ТекущаяСтрока["КоличествоУпаковок" + ИмяФакта] = ТекущаяСтрока["Количество" + ИмяФакта]
		   / ПолучитьКоэффициентУпаковкиКлиент(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ОбработатьШтрихкоды"
//
Процедура ОбработатьШтрихкодыКлиент(ТЧ, СтруктураДействий, КэшированныеЗначения, СоответствиеДействий)

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ОбработатьШтрихкоды", СтруктураПараметровДействия) Тогда
		Для Каждого ТекШтрихкод Из СтруктураПараметровДействия.Штрихкоды Цикл
			ДанныеШтрихкода = КэшированныеЗначения.Штрихкоды[ТекШтрихкод.Штрихкод];

			Если ДанныеШтрихкода.Количество() = 0 Тогда
				СтруктураПараметровДействия.НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
			Иначе
				НоваяСтруктураДействий = Новый Структура;
				ОбщегоНазначенияРТКлиентСервер.ДобавитьВСтруктуру(НоваяСтруктураДействий, СтруктураДействий);

				МассивСтрокТЧ = ТЧ.НайтиСтроки(ДанныеШтрихкода);
				Если МассивСтрокТЧ.Количество() = 0 Тогда
					ОбщегоНазначенияРТКлиентСервер.ДобавитьВСтруктуру(НоваяСтруктураДействий, СтруктураПараметровДействия.СтруктураДействийСДобавленнымиСтроками);

					НайденнаяСтрока = ТЧ.Добавить();
					НайденнаяСтрока.Номенклатура       = ДанныеШтрихкода.Номенклатура;
					НайденнаяСтрока.Характеристика     = ДанныеШтрихкода.Характеристика;
					НайденнаяСтрока.Упаковка           = ДанныеШтрихкода.Упаковка;
					НайденнаяСтрока.КоличествоУпаковок = ТекШтрихкод.Количество;
				Иначе
					ОбщегоНазначенияРТКлиентСервер.ДобавитьВСтруктуру(НоваяСтруктураДействий, СтруктураПараметровДействия.СтруктураДействийСИзмененнымиСтроками);

					НайденнаяСтрока = МассивСтрокТЧ[0];
					НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок + ТекШтрихкод.Количество;
				КонецЕсли;

				СоответствиеДействий.Вставить(НайденнаяСтрока, НоваяСтруктураДействий);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьСуммуНДС"
//
Процедура ПересчитатьСуммыНДСКлиент(ТЧ, СтруктураДействий, КэшированныеЗначения, СоответствиеДействий)

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС", СтруктураПараметровДействия) ИЛИ СтруктураДействий.Свойство("ПересчитатьСуммуНДСПоСуммеСНДС", СтруктураПараметровДействия) Тогда
		Если СтруктураПараметровДействия.Свойство("НеобходимоОбработатьВсюТЧ") Тогда
			Для Каждого ТекСтрока Из ТЧ Цикл
				НоваяСтруктураДействий = Новый Структура;
				ОбщегоНазначенияРТКлиентСервер.ДобавитьВСтруктуру(НоваяСтруктураДействий, СтруктураДействий);
				СоответствиеДействий.Вставить(ТекСтрока, НоваяСтруктураДействий);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ОчиститьКоличествоУчет"
//
Процедура ОчиститьКоличествоУчетКлиент(ТЧ, СтруктураДействий, КэшированныеЗначения, СоответствиеДействий)
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ОчиститьКоличествоУчет", СтруктураПараметровДействия) Тогда
		Если СтруктураПараметровДействия.Свойство("НеобходимоОбработатьВсюТЧ") Тогда
			Для Каждого ТекСтрока Из ТЧ Цикл
				НоваяСтруктураДействий = Новый Структура;
				ОбщегоНазначенияРТКлиентСервер.ДобавитьВСтруктуру(НоваяСтруктураДействий, СтруктураДействий);
				СоответствиеДействий.Вставить(ТекСтрока, НоваяСтруктураДействий);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ЗаполнитьТипНоменклатуры"
//
Процедура ЗаполнитьТипНоменклатурыВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если СтруктураДействий.Свойство("ЗаполнитьТипНоменклатуры") Тогда
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТипНоменклатурыВСтрокеТЧКлиент()

// Процедура пересчета "ЗаполнитьЦенуПродажиРозница"
//
Процедура ЗаполнитьЦенуПродажиРозницаВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиРозница") Тогда
		ТекущаяСтрока.Цена = 0;
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчета "ЗаполнитьЦенуЗакупки"
//
Процедура ЗаполнитьЦенуЗакупкиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки") Тогда
		ТекущаяСтрока.Цена = 0;
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчета "ЗаполнитьЦенуПрошлойЗакупки"
//
Процедура ЗаполнитьЦенуПрошлойЗакупкиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПрошлойЗакупки") Тогда
		ТекущаяСтрока.ЦенаПрошлойЗакупки = 0;
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчета "ЗаполнитьДействующуюЦенуПродажи"
//
Процедура ЗаполнитьДействующуюЦенуПродажиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьДействующуюЦенуПродажи") Тогда
		ТекущаяСтрока.Цена = 0;
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчета "ЗаполнитьСкладПродажи"
//
Процедура ЗаполнитьСкладПродажиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьСкладПродажи") Тогда
		ТекущаяСтрока.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчета "ЗаполнитьОрганизациюПродажи"
//
Процедура ЗаполнитьОрганизациюПродажиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьОрганизациюПродажи") Тогда
		ТекущаяСтрока.Склад = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчета "ЗаполнитьОбъемВесУпаковки"
//
Процедура ЗаполнитьОбъемВесПоУпаковкеВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ЗаполнитьОбъемВесУпаковки") Тогда
		ТекущаяСтрока.ОбъемУпаковки =  ПолучитьОбъемУпаковкиКлиент(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
		ТекущаяСтрока.ВесУпаковки = ПолучитьВесУпаковкиКлиент(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ЗаполнитьДанныеПоДокументуПродажи"
//
Процедура ЗаполнитьДанныеПоДокументуПродажиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если СтруктураДействий.Свойство("ЗаполнитьДанныеПоДокументуПродажи") Тогда
		
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДубликатыЗависимыхРеквизитовКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем ПараметрСтруктурыДействий;
	Если Не СтруктураДействий.Свойство("ЗаполнитьДубликатыЗависимыхРеквизитов", ПараметрСтруктурыДействий) Тогда
		Возврат;
	КонецЕсли;
	
	// ПараметрСтруктурыДействий - Структура
	// 		Ключ: Имя реквизита флага активности
	// 		Значение: Строка с перечислением через запятую имен зависимых реквизитов
	
	Для Каждого ПолеСтруктуры Из ПараметрСтруктурыДействий Цикл
		
		ИмяФлагаАктивности = ПолеСтруктуры.Ключ;
		ЗначениеФлагаАктивности = ТекущаяСтрока[ИмяФлагаАктивности];
		
		ЗависимыеРеквизиты = Новый Структура(ПолеСтруктуры.Значение);
		Для Каждого Реквизит Из ЗависимыеРеквизиты Цикл
			ТекущаяСтрока[Реквизит.Ключ+ИмяФлагаАктивности] = ?(
				ЗначениеФлагаАктивности,
				ТекущаяСтрока[Реквизит.Ключ],
				0
			);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// ФУНКЦИИ ПОЛУЧЕНИЯ СТРУКТУР ПАРАМЕТРОВ ДЛЯ ОБРАБОТКИ ТАБЛИЧНОЙ ЧАСТИ "ТОВАРЫ".

// Получение структуры пересчета суммы НДС в строке
//
Функция ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект) Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
КонецФункции

// Получение структуры пересчета суммы НДС в ТЧ
//
Функция ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект) Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
КонецФункции

// Получение структуры заполнения цены закупки в строке
//
Функция ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект) Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
КонецФункции

// Получение структуры заполнения ставки НДС
//
Функция ПолучитьСтруктуруЗаполненияСтавкиНДС(Объект) Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияСтавкиНДС(Объект);
КонецФункции

// Получение структуры заполнения условий продаж в строке
//
Функция ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект) Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект);
КонецФункции

// Получение структуры условий закупок в строке
//
Функция ПолучитьСтруктуруЗаполненияУсловийЗакупокВСтрокеТЧ(Объект) Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийЗакупокВСтрокеТЧ(Объект);
КонецФункции

// Получение структуры обработки штрихкодов
//
Функция ПолучитьСтруктуруОбработкиШтрихкодов(Объект, Штрихкоды, СтруктураДействийСДобавленнымиСтроками, СтруктураДействийСИзмененнымиСтроками) Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруОбработкиШтрихкодов(Объект, Штрихкоды, СтруктураДействийСДобавленнымиСтроками, СтруктураДействийСИзмененнымиСтроками);
КонецФункции

// Получение структуры проверки серийных номеров по владельцу
//
Функция ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, ТЧСерийныеНомера) Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, ТЧСерийныеНомера);
КонецФункции

// Получение массива серийных номеров для строки товаров
//
Функция ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(КлючСвязи, ТЧСерийныеНомера, ИмяТаблицы = "Товары") Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(КлючСвязи, ТЧСерийныеНомера, ИмяТаблицы);
КонецФункции

// Получение структуры пересчета скидки при продажах
//
Функция ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект) Экспорт
	
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект);
	
КонецФункции

// Получение структуры пересчета скидки при закупках
//
Функция ПолучитьСтруктуруПересчетаЦеныСкидкиВЗакупкахВТЧ(Объект) Экспорт
	
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВЗакупкахВТЧ(Объект);
	
КонецФункции

// Получение структуры заполнения цены продажи в строке
//
Функция ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, ПриводитьКМинимальнойЦене = Ложь, АкционнаяЦена = Ложь) Экспорт

	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, ПриводитьКМинимальнойЦене, АкционнаяЦена);

КонецФункции

// Получение структуры заполнения назначенной цены
//
Функция ПолучитьСтруктуруЗаполненияЦеныНазначеннойВСтрокеТЧ(Объект) Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныНазначеннойВСтрокеТЧ(Объект);
КонецФункции

// Получение структуры заполнения цены по виду цен
//
Функция ПолучитьСтруктуруЗаполненияЦеныПоВидуЦенВСтрокеТЧ(Объект) Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоВидуЦенВСтрокеТЧ(Объект);
КонецФункции

//////////////////////////////////////////////////////////////////////
// ИНТЕРАКТИВНЫЕ ПРОЦЕДУРЫ.

// Процедура получения списка упаковок для выбора
//
Процедура ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, ТекущаяСтрока, ДобавлятьПустуюУпаковку = Истина) Экспорт

	СтандартнаяОбработка = Ложь;

	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ДанныеВыбора = Новый СписокЗначений;
		ОбработкаТабличнойЧастиТоварыСервер.ПолучитьСписокДляВыбораУпаковок(ТекущаяСтрока.Номенклатура, ДанныеВыбора, ДобавлятьПустуюУпаковку);
	КонецЕсли;

КонецПроцедуры

// Процедура получения характеристик номенклатуры
//
Процедура ВыбратьХарактеристикуНоменклатуры(Форма, Элемент, СтандартнаяОбработка, ТекущаяСтрока) Экспорт

	СтандартнаяОбработка = Ложь;

	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ВладелецХарактеристики = Неопределено;
		Если ОбработкаТабличнойЧастиТоварыСервер.ПроверитьИспользованиеХарактеристикИПолучитьВладельцаДляВыбора(ТекущаяСтрока.Номенклатура, ВладелецХарактеристики) Тогда
			Если ВладелецХарактеристики = Неопределено Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Для данной номенклатуры характеристики не заданы.'"));
			Иначе
				ПараметрыФормыВыбора = Новый Структура;
				ПараметрыФормыВыбора.Вставить("ТекущийЭлемент"  , ТекущаяСтрока.Характеристика);
				ПараметрыФормыВыбора.Вставить("ПараметрВладелец", ВладелецХарактеристики);
				ПараметрыФормыВыбора.Вставить("Номенклатура"    , ТекущаяСтрока.Номенклатура);

				ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
			КонецЕсли;
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Для данной номенклатуры отключено использование характеристик.'"));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура поиска по штрихкоду
//
Функция ВвестиШтрихкод(Штрихкод, ТекстЗаголовка = "") Экспорт

	Результат = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = НСтр("ru = 'Введите штрихкод'");
	КонецЕсли;
	
	Штрихкод = "";
	Если ВвестиЗначение(Штрихкод, ТекстЗаголовка) Тогда
		Если Не ПустаяСтрока(Штрихкод) Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Процедура сообщения пользователю о неизвестных штрихкодах
//
Процедура СообщитьОНеизвестныхШтрихкодах(НеизвестныеШтрихкоды) Экспорт

	Для Каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
	КонецЦикла;

КонецПроцедуры

// Процедура разбиения строки
//
Функция РазбитьСтрокуТЧ(ТЧ, ДанныеФормы, ИмяПоляКоличество = "", Заголовок = "", РазрешитьНулевоеКоличество = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяПоляКоличество) Тогда
		ИмяПоляКоличество = "КоличествоУпаковок";
	КонецЕсли;
	
	ТекущаяСтрока	= ДанныеФормы.ТекущиеДанные;
	ЧислоВведено = Истина;
	ТекстЗаголовка	= ?(ЗначениеЗаполнено(Заголовок), Заголовок, НСтр("ru = 'Введите количество товара в новой строке'"));
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Для выполнения команды требуется выбрать строку табличной части.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат Неопределено
	ИначеЕсли ТекущаяСтрока[ИмяПоляКоличество] = 0
		И Не РазрешитьНулевоеКоличество Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно разбить строку с нулевым количеством.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат Неопределено
	КонецЕсли;
	
	Если ТекущаяСтрока[ИмяПоляКоличество] <> 0 Тогда
		
		Количество = ?(ТекущаяСтрока[ИмяПоляКоличество] = 0, 0, Неопределено);
		
		Пока Количество = Неопределено Цикл
			Количество = ТекущаяСтрока[ИмяПоляКоличество];
			ЧислоВведено = ВвестиЧисло(Количество, ТекстЗаголовка, 15, 3);
			
			Если Не ЧислоВведено Тогда
				Возврат Неопределено;
			ИначеЕсли Количество = 0
				И Не РазрешитьНулевоеКоличество Тогда
				ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть равно нулю.'");
				ПоказатьПредупреждение(, ТекстСообщения);
				Количество = Неопределено;
			ИначеЕсли ТекущаяСтрока[ИмяПоляКоличество] >= 0
				И Количество < 0 Тогда
				ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть отрицательным.'");
				ПоказатьПредупреждение(, ТекстСообщения);
				Количество = Неопределено;
			ИначеЕсли ТекущаяСтрока[ИмяПоляКоличество] <= 0
				И Количество > 0 Тогда
				ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть положительным.'");
				ПоказатьПредупреждение(, ТекстСообщения);
				Количество = Неопределено;
			ИначеЕсли ТекущаяСтрока[ИмяПоляКоличество] >= 0
				И Количество >  ТекущаяСтрока[ИмяПоляКоличество] Тогда
				ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть больше количества в текущей.'");
				ПоказатьПредупреждение(, ТекстСообщения);
				Количество = Неопределено;
			ИначеЕсли ТекущаяСтрока[ИмяПоляКоличество] <= 0
				И Количество <  ТекущаяСтрока[ИмяПоляКоличество] Тогда
				ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть меньше количества в текущей.'");
				ПоказатьПредупреждение(, ТекстСообщения);
				Количество = Неопределено;
			ИначеЕсли Количество =  ТекущаяСтрока[ИмяПоляКоличество]
				И Не РазрешитьНулевоеКоличество Тогда
				ТекстСообщения = НСтр("ru = 'Количество в новой строке должно отличаться от количества в текущей.'");
				ПоказатьПредупреждение(, ТекстСообщения);
				Количество = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		Количество = 0;
	КонецЕсли;
		
	ИндексТекущейСтроки 	 = ТЧ.Индекс(ТекущаяСтрока);
	НоваяСтрока 			 = ТЧ.Вставить(ИндексТекущейСтроки + 1);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	
	НоваяСтрока[ИмяПоляКоличество]      = Количество;
	ТекущаяСтрока[ИмяПоляКоличество] 	= ТекущаяСтрока[ИмяПоляКоличество] - НоваяСтрока[ИмяПоляКоличество];
	
	ДанныеФормы.ТекущаяСтрока  = НоваяСтрока.ПолучитьИдентификатор();
	
	Возврат НоваяСтрока;
КонецФункции

//////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ВЫБОРА СЕРИЙНЫХ НОМЕРОВ В ДОКУМЕНТАХ

// Процедура проверки использования номеров подарочных сертификатов
//
Функция ПроверитьИспользованиеСерийныхНомеров(Номенклатура)

	Результат          = Истина;
	ЗначениеРеквизитов = ОбщегоНазначенияРТ.ПолучитьЗначенияРеквизитовОбъекта(Номенклатура,
			Новый Структура("ИспользоватьСерийныеНомера, ТипНоменклатуры, Представление"));

	// +HVOYA. 14.11.2016 19:36:39, Львова Е.А.
	//Если НЕ ЗначениеРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
	Если НЕ (ЗначениеРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") 
		ИЛИ ЗначениеРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.СкидочныйКупон")) Тогда
	// -HVOYA. 14.11.2016 19:36:58, Львова Е.А.
		Результат = Ложь;
		
		СтрокаСообщения = НСтр("ru = 'Номенклатура ""%1%"" не является подарочным сертификатом!'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ЗначениеРеквизитов.Представление);
		ПоказатьПредупреждение(, СтрокаСообщения);
	ИначеЕсли Не ЗначениеРеквизитов.ИспользоватьСерийныеНомера Тогда
		Результат = Ложь;
		
		СтрокаСообщения = НСтр("ru = 'Для номенклатуры ""%1%"" не используются номера подарочных сертификатов!'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ЗначениеРеквизитов.Представление);
		ПоказатьПредупреждение(, СтрокаСообщения);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Процедура добавления номера подарочного сертификата в ТЧ
//
Функция ДобавитьСерийныеНомераВТабличнуюЧасть(ТЧСерийныеНомера, МассивСерийныхНомеров, ТекущийКлючСвязи, ИмяТаблицы = "Товары") Экспорт

	НовыйКлючСвязи = 0;

	Попытка	//	LNK 12.02.2020 11:53:56

		СтрокиСерий = ТЧСерийныеНомера.НайтиСтроки(Новый Структура("КлючСвязиСерийныхНомеров, ИмяТаблицы", ТекущийКлючСвязи, ИмяТаблицы));
		ЕстьИмяТаблицы = Истина;

	Исключение

		СтрокиСерий = ТЧСерийныеНомера.НайтиСтроки(Новый Структура("КлючСвязиСерийныхНомеров", ТекущийКлючСвязи));
		ЕстьИмяТаблицы = Ложь;

	КонецПопытки;

	Если ТекущийКлючСвязи <> 0 Тогда

		Для Каждого СтрокаТЧ Из СтрокиСерий Цикл

			ТЧСерийныеНомера.Удалить(ТЧСерийныеНомера.Индекс(СтрокаТЧ));

		КонецЦикла;

	КонецЕсли;

	Если МассивСерийныхНомеров.Количество() = 0 Тогда

		НовыйКлючСвязи = 0;

	Иначе

		Если ТекущийКлючСвязи = 0 Тогда

			ВремКлючСвязи = 0;

			Для Каждого СтрокаТЧ Из ТЧСерийныеНомера Цикл

				Если ВремКлючСвязи < СтрокаТЧ.КлючСвязиСерийныхНомеров Тогда

					ВремКлючСвязи = СтрокаТЧ.КлючСвязиСерийныхНомеров;

				КонецЕсли;

			КонецЦикла;

			НовыйКлючСвязи = ВремКлючСвязи + 1;

		Иначе

			НовыйКлючСвязи = ТекущийКлючСвязи;

		КонецЕсли;

		Для Каждого СерийныйНомер Из МассивСерийныхНомеров Цикл

			НоваяСтрокаСН = ТЧСерийныеНомера.Добавить();
			НоваяСтрокаСН.СерийныйНомер            = СерийныйНомер;
			НоваяСтрокаСН.КлючСвязиСерийныхНомеров = НовыйКлючСвязи;

			Если ЕстьИмяТаблицы Тогда

				НоваяСтрокаСН.ИмяТаблицы = ИмяТаблицы;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат НовыйКлючСвязи;

КонецФункции

// Процедура открытия формы ввода номеров подарочных сертификатов
//
Функция ВвестиПодарочныеСертификаты(Форма, ТЧСерийныеНомера, ТекущийКлючСвязи, Номенклатура, НовыйКлючСвязи, Количество = 0, ИмяТаблицы = "Товары", КоличествоНеИзменять = Ложь)

	Результат = Ложь;

	Если ПроверитьИспользованиеСерийныхНомеров(Номенклатура) Тогда

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МассивСерийныхНомеров"    , ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(ТекущийКлючСвязи, ТЧСерийныеНомера, ИмяТаблицы));
		ПараметрыФормы.Вставить("Номенклатура"             , Номенклатура);
		ПараметрыФормы.Вставить("КоличествоСертификатов"   , ТЧСерийныеНомера.Количество());
		ПараметрыФормы.Вставить("ПредставлениеНоменклатуры", Строка(Номенклатура));
		ПараметрыФормы.Вставить("ТолькоПросмотр"           , Форма.ТолькоПросмотр);
		ПараметрыФормы.Вставить("КоличествоНеИзменять"     , КоличествоНеИзменять);

		НовыеСерийныеНомера = ОткрытьФормуМодально("Справочник.СерийныеНомера.Форма.ФормаВводаСерийныхНомеров",
			ПараметрыФормы,
			Форма);

		Если НЕ (Форма.ТолькоПросмотр ИЛИ КоличествоНеИзменять = Истина) Тогда

			Если ТипЗнч(НовыеСерийныеНомера) = Тип("Массив") Тогда

				Результат = Истина;
				НовыйКлючСвязи = ДобавитьСерийныеНомераВТабличнуюЧасть(ТЧСерийныеНомера, НовыеСерийныеНомера, ТекущийКлючСвязи, ИмяТаблицы);
				Количество = НовыеСерийныеНомера.Количество();

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Процедура ввода номера подарочного сертификата в шапке документа
//
Процедура ВвестиСерийныйНомерНоменклатурыВШапке(Форма, ТЧСерийныеНомера, Номенклатура) Экспорт
	Перем НовыйКлючСвязи;

//	LNK 25.02.2020 11:22:45 - в настоящее время НЕ ИСПОЛЬЗУЕТСЯ

	Если ВвестиПодарочныеСертификаты(Форма, ТЧСерийныеНомера, Форма.Объект.КлючСвязиСерийныхНомеров, Номенклатура, НовыйКлючСвязи) Тогда

		Форма.Модифицированность              = Истина;
		Форма.Объект.КлючСвязиСерийныхНомеров = НовыйКлючСвязи;

	КонецЕсли;

КонецПроцедуры

// Процедура ввода номеров подарочных сертификатов в ТЧ
//
Процедура ВвестиСерийныеНомераНоменклатурыВТЧ(Форма, ТЧСерийныеНомера, СтрокаТЧ, ПересчетКоличества = Ложь, ИмяТаблицы = "Товары", КоличествоНеИзменять = Ложь) Экспорт
	Перем НовыйКлючСвязи;
	Перем Количество;

	Если СтрокаТЧ = Неопределено Тогда

		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана строка, для которой необходимо Ввести подарочные сертификаты!'"));
		Возврат;

	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда

		ПоказатьПредупреждение(, НСтр("ru = 'Для ввода номеров подарочных сертификатов необходимо выбрать номенклатуру!'"));
		Возврат;

	КонецЕсли;
	
	Если ВвестиПодарочныеСертификаты(Форма, ТЧСерийныеНомера, СтрокаТЧ.КлючСвязиСерийныхНомеров, СтрокаТЧ.Номенклатура, НовыйКлючСвязи, Количество, ИмяТаблицы, КоличествоНеИзменять) Тогда

		Форма.Модифицированность          = Истина;
		СтрокаТЧ.КлючСвязиСерийныхНомеров = НовыйКлючСвязи;
		ПересчетКоличества                = НЕ (СтрокаТЧ.КоличествоУпаковок = Количество);
		СтрокаТЧ.КоличествоУпаковок       = Количество;

	КонецЕсли;

КонецПроцедуры

// Процедура очистки номеров подарочных сертификатов
//
Процедура ОчиститьСерийныеНомера(СтрокаТабличнойЧасти, ДокументОбъект, ИмяТабличнойЧастиСерийныхНомеров = Неопределено, ИмяТаблицы = "Товары") Экспорт

	Если ИмяТабличнойЧастиСерийныхНомеров = Неопределено Тогда

		ИмяТабличнойЧастиСерийныхНомеров = "СерийныеНомера"

	КонецЕсли;
	
	ТабличнаяЧасть = ДокументОбъект[ИмяТабличнойЧастиСерийныхНомеров];

	Если ТабличнаяЧасть.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	СтруктураПоиска = Новый Структура("КлючСвязиСерийныхНомеров", СтрокаТабличнойЧасти.КлючСвязиСерийныхНомеров);

	Попытка	//	LNK 30.05.2020 10:53:32

		Буффер = ТабличнаяЧасть[0].ИмяТаблицы;	//	проверка наличия такой колонки.
		СтруктураПоиска.Вставить("ИмяТаблицы", ИмяТаблицы);

	Исключение	КонецПопытки;

	МассивЭлементов = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	КолвоЭлементов  = МассивЭлементов.Количество();

	Если КолвоЭлементов = 0 Тогда

		Возврат;

	КонецЕсли;

	Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл

		ТабличнаяЧасть.Удалить(МассивЭлементов[КолвоЭлементов - ОбратныйИндекс]);

	КонецЦикла;
	
	СтрокаТабличнойЧасти.Количество = 0;
	
	Если СтрокаТабличнойЧасти.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.СкидочныйКупон") Тогда

		Попытка

			Если ДокументОбъект.Свойство("ПогашениеСкидочныхКупонов") Тогда

			// +HVOYA. 31.08.2016 11:58:14, Львова Е.А.
				ДокументОбъект.ПогашениеСкидочныхКупонов.Очистить();	

			КонецЕсли;

		Исключение	КонецПопытки;

	КонецЕсли;

КонецПроцедуры

//////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ РАБОТЫ С СЕРИЯМИ

// Функция проверяет необходимость указания серий в строке
// Параметры
//		Форма - форма документа, в которой инициировано указание серий
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соответствующей процедурой модуля менеджера документа
// Возвращаемое значение
//      Тип Булево
Функция ПроверитьВозможностьУказанияСерий(Форма,ПараметрыУказанияСерий,ИмяТабличногоПоля = "") Экспорт
	
	ИмяТЧТовары = "";
	ИмяТЧСерии  = "";
	ТоварВШапке = Ложь;
	Если Не ПараметрыУказанияСерий.Свойство("ТоварВШапке", ТоварВШапке) Тогда
		ТоварВШапке = Ложь;
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧТовары", ИмяТЧТовары) Тогда
		ИмяТЧТовары = "Товары";
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	Если ИмяТабличногоПоля = "" Тогда
		ИмяТабличногоПоля = ИмяТЧТовары;
	КонецЕсли;
	
	Если ТоварВШапке Тогда
		Если Форма.Объект.СтатусУказанияСерий = 0 Тогда
			ТекстСообщения = НСтр("ru='Для указанного товара серии указывать не нужно.'");
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		ТекущиеДанные = Форма.Элементы[ИмяТабличногоПоля].ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Необходимо выбрать строку товаров, для которой необходимо указать серии.'");
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат Ложь;
		ИначеЕсли ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
			ТекстСообщения = НСтр("ru='Для выбранной строки товаров серии указывать не нужно.'");
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат Ложь;
		ИначеЕсли ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено
			И Не ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда
			
			ТекстСообщения = НСтр("ru='Перед указанием серий нужно заполнить упаковку.'");
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Функция проверяет возможность отмены указания серий в строке
// Параметры
//		Форма - форма документа, в которой инициировано указание серий
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соответствующей процедурой модуля менеджера документа
// Возвращаемое значение
//      Тип Булево
Функция ПроверитьВозможностьОтменыУказанияСерий(Форма,ПараметрыУказанияСерий) Экспорт
	
	ИмяТЧТовары = "";
	ИмяТЧСерии  = "";
	ТоварВШапке = Ложь;
	Если Не ПараметрыУказанияСерий.Свойство("ТоварВШапке", ТоварВШапке) Тогда
		ТоварВШапке = Ложь;
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧТовары", ИмяТЧТовары) Тогда
		ИмяТЧТовары = "Товары";
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	ИмяТабличногоПоля = ИмяТЧТовары;
	
	Если ТоварВШапке Тогда
		Если Не Форма.Объект.УказыватьСерии Тогда
			ТекстСообщения = НСтр("ru='Для указанного товара серии не указаны.'");
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		ТекущиеДанные = Форма.Элементы[ИмяТабличногоПоля].ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Необходимо выбрать строку товаров, для которой необходимо отменить указание серий.'");
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат Ложь;
		ИначеЕсли Не ТекущиеДанные.УказыватьСерии Тогда
			ТекстСообщения = НСтр("ru='Для выбранной строки серии не указаны.'");
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Процедура обновляет кеш ключевых реквизитов текущей строки товаров. По ключевым реквизитам осуществляется связь
// между ТЧ серий и ТЧ товаров
// Параметры
//		ТаблицаФормы - таблица формы, отображающая ТЧ товаров
//      КэшированныеЗначения - переменная модуля формы, в которой хранятся кешируемые значения
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соответствующей процедурой модуля менеджера документа
//      Копирование - признак, что кешированная строка скопирована (параметр события ПриНачалеРедактирования)
Процедура ОбновитьКэшированныеЗначенияДляУчетаСерий(ТаблицаФормы,КэшированныеЗначения,ПараметрыУказанияСерий,Копирование = Ложь) Экспорт

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьКэшированныеЗначенияДляУчетаСерий(
		ТаблицаФормы.ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий, Копирование);

КонецПроцедуры

// Процедура обновляет кеш ключевых реквизитов товара в шапке документа. По ключевым реквизитам осуществляется связь
// между ТЧ серий товаром
// Параметры
//		Объект - ДанныеФормыСтуктура - основной реквизит формы
//      КэшированныеЗначения - переменная модуля формы, в которой хранятся кешируемые значения
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соответствующей процедурой модуля менеджера документа
Процедура ОбновитьКэшированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	КэшированныеЗначения.Вставить("НоменклатураШапка",Объект.Номенклатура);
	КэшированныеЗначения.Вставить("ХарактеристикаШапка",Объект.Характеристика);
	КэшированныеЗначения.Вставить("КоличествоШапка",Объект.Количество);
	
	Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		КэшированныеЗначения.Вставить(СтрМас+"Шапка",Объект[СтрМас]);
	КонецЦикла;
		
КонецПроцедуры

// Функция проверяет необходимость обновления статусов указания серий при окончании редактирования строки товаров
// Параметры
//		ТаблицаФормы - таблица формы, отображающая ТЧ товаров
//      КэшированныеЗначения - переменная модуля формы, в которой хранятся кешируемые значения
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соответствующей процедурой модуля менеджера документа
//		Удаление - признак, что проверка вызывается при удалении строки ТЧ
// Возвращаемое значение
//		ИСТИНА - нужно обновить статусы указания серий, ЛОЖЬ - в противном случае
Функция НеобходимоОбновитьСтатусыСерий(ТаблицаФормы,КэшированныеЗначения,ПараметрыУказанияСерий, Удаление = Ложь) Экспорт
	
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Удаление Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИмяТЧТовары = "";
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧТовары", ИмяТЧТовары) Тогда
		ИмяТЧТовары = "Товары";
	КонецЕсли;
	
	ИмяТЧСерии  = "";
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	Если ИмяТЧТовары = ИмяТЧСерии Тогда
		Если КэшированныеЗначения.Номенклатура = ТекущиеДанные.Номенклатура Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ТекстПоляСвязи = "";
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас;
	КонецЦикла;
	
	Если ПараметрыУказанияСерий.Свойство("ЭтоЗаказ")
		И ПараметрыУказанияСерий.ЭтоЗаказ
		И ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки")) = Неопределено
		И ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки")) = Неопределено Тогда
		ЕстьОтменаСтроки = Истина;
	Иначе
		ЕстьОтменаСтроки = Ложь;
	КонецЕсли;
	
	Если ЕстьОтменаСтроки Тогда
		ТекстПоляСвязи = ТекстПоляСвязи + ",Отменено";
	КонецЕсли;
	
	ИмяКолонкиКоличество = "";
	Если Не ПараметрыУказанияСерий.Свойство("ИмяКолонкиКоличество", ИмяКолонкиКоличество) Тогда
		ИмяКолонкиКоличество = "Количество";
	КонецЕсли;
	
	Если Не ОбщегоНазначенияРТКлиентСервер.СтруктурыРавны(КэшированныеЗначения, ТекущиеДанные,
		ИмяКолонкиКоличество + ",Номенклатура,Характеристика"+ТекстПоляСвязи) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция проверяет необходимость обновления статуса указания серий для товара в шапке документа
// Параметры
//		Объект - ДанныеФормыСтуктура - основной реквизит формы
//      КэшированныеЗначения - переменная модуля формы, в которой хранятся кешируемые значения
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соответствующей процедурой модуля менеджера документа
// Возвращаемое значение
//		ИСТИНА - нужно обновить статус указания серий, ЛОЖЬ - в противном случае
Функция НеобходимоОбновитьСтатусСерийВШапке(Объект,КэшированныеЗначения,Знач ПараметрыУказанияСерий) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если КэшированныеЗначения.НоменклатураШапка <> Объект.Номенклатура
		Или  КэшированныеЗначения.ХарактеристикаШапка <> Объект.Характеристика
		Или  КэшированныеЗначения.КоличествоШапка <> Объект.Количество Тогда
		Возврат Истина;
	Иначе	
		Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
			Если КэшированныеЗначения[СтрМас+"Шапка"] <> Объект[СтрМас] Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

//////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ.

// Функция получения параметров для обработки ТЧ
//
Функция ПолучитьПараметрыОбработкиТЧ(ТЧ, ТекущаяСтрока, СтруктураОбщихДействий, КэшированныеЗначения)

	Перем Характеристика;
	Перем Упаковка;
	Перем СтруктураПараметровДействия;

	НеобходимВызовСервера     = Ложь;
	НеобходимоОбработатьВсюТЧ = Ложь;

	СтруктураДействий = Новый Структура;
	ОбщегоНазначенияРТКлиентСервер.ДобавитьВСтруктуру(СтруктураДействий, СтруктураОбщихДействий);

	БудутДобавленныеСтроки = Ложь;
	БудутИзмененныеСтроки  = Ложь;
    	
	Если СтруктураДействий.Свойство("ПроверитьСерийныеНомераПоВладельцу", СтруктураПараметровДействия)
	   И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		НеобходимВызовСервера = Истина;
	КонецЕсли;
	
	ПроверитьХарактеристикуПоВладельцу = СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу", Характеристика);
	ПроверитьЗаполнитьУпаковкуПоВладельцу = СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу", Упаковка);
	
	Если (ПроверитьХарактеристикуПоВладельцу
		ИЛИ ПроверитьЗаполнитьУпаковкуПоВладельцу) 
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		 
		НеобходимВызовСервера = Истина;
				
	КонецЕсли;

	Если (СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц")
	 Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок")
	 Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокФакт")
	 Или СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницПлан") 
	 Или СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницФакт") 	 
	 Или СтруктураДействий.Свойство("ЗаполнитьОбъемВесУпаковки")) Тогда
		Если НеобходимоОбработатьВсюТЧ Тогда
			Если БудутДобавленныеСтроки Тогда
				НеобходимВызовСервера = Истина;
			Иначе
				Для Каждого СтрокаТЧ Из ТЧ Цикл
					Если ЗначениеЗаполнено(СтрокаТЧ.Упаковка)
					   И КэшированныеЗначения.КоэффициентыУпаковок[СтрокаТЧ.Упаковка] = Неопределено Тогда
						НеобходимВызовСервера = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
			   И ЗначениеЗаполнено(ТекущаяСтрока.Упаковка)
			   И КэшированныеЗначения.КоэффициентыУпаковок[ТекущаяСтрока.Упаковка] = Неопределено Тогда
				НеобходимВызовСервера = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

//	LNK 15.11.2016 14:01:06
	Если СтруктураДействий.Свойство("ПолучитьОстатокСклада") Тогда

		НеобходимВызовСервера = Истина;

		Если НЕ СтруктураПараметровДействия = Неопределено И СтруктураПараметровДействия.Свойство("НеобходимоОбработатьВсюТЧ") Тогда

			НеобходимоОбработатьВсюТЧ = Истина;

		КонецЕсли;

	КонецЕсли;

//	LNK 05.04.2017 16:09:36
	Если СтруктураДействий.Свойство("ПолучитьКоличествоПлановое") Тогда

		НеобходимВызовСервера = Истина;

		Если НЕ СтруктураПараметровДействия = Неопределено И СтруктураПараметровДействия.Свойство("НеобходимоОбработатьВсюТЧ") Тогда

			НеобходимоОбработатьВсюТЧ = Истина;

		КонецЕсли;

	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьКоличествоУчет", СтруктураПараметровДействия) Тогда
		Если НЕ СтруктураПараметровДействия = Неопределено И СтруктураПараметровДействия.Свойство("НеобходимоОбработатьВсюТЧ") Тогда
			НеобходимоОбработатьВсюТЧ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи", СтруктураПараметровДействия) Тогда
		Если НеобходимоОбработатьВсюТЧ Тогда
			Если БудутДобавленныеСтроки Тогда
				НеобходимВызовСервера = Истина;
			Иначе
				Для Каждого СтрокаТЧ Из ТЧ Цикл
					Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура)  Тогда
						НеобходимВызовСервера = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
				НеобходимВызовСервера = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиНазначенную", СтруктураПараметровДействия) Тогда
		Если НеобходимоОбработатьВсюТЧ Тогда
			Если БудутДобавленныеСтроки Тогда
				НеобходимВызовСервера = Истина;
			Иначе
				Для Каждого СтрокаТЧ Из ТЧ Цикл
					Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура)  Тогда
						НеобходимВызовСервера = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
				НеобходимВызовСервера = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПоВидуЦен", СтруктураПараметровДействия) Тогда
		Если НеобходимоОбработатьВсюТЧ Тогда
			Если БудутДобавленныеСтроки Тогда
				НеобходимВызовСервера = Истина;
			Иначе
				Для Каждого СтрокаТЧ Из ТЧ Цикл
					Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура)  Тогда
						НеобходимВызовСервера = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
				НеобходимВызовСервера = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;                                             
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия) Тогда
		Если НеобходимоОбработатьВсюТЧ Тогда
			Если БудутДобавленныеСтроки Тогда
				НеобходимВызовСервера = Истина;
			Иначе
				Для Каждого СтрокаТЧ Из ТЧ Цикл
					Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) 
						И ЗначениеЗаполнено(СтруктураПараметровДействия.Контрагент) Тогда
						НеобходимВызовСервера = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)  
				И ЗначениеЗаполнено(СтруктураПараметровДействия.Контрагент) Тогда
				НеобходимВызовСервера = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПрошлойЗакупки", СтруктураПараметровДействия) Тогда
		Если НеобходимоОбработатьВсюТЧ Тогда
			Если БудутДобавленныеСтроки Тогда
				НеобходимВызовСервера = Истина;
			Иначе
				Для Каждого СтрокаТЧ Из ТЧ Цикл
					Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
						НеобходимВызовСервера = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
				НеобходимВызовСервера = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;   
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.Свойство("НеобходимоОбработатьВсюТЧ") Тогда
			НеобходимоОбработатьВсюТЧ = Истина;
		КонецЕсли;
		
		Если НеобходимоОбработатьВсюТЧ Тогда
			Если БудутДобавленныеСтроки Тогда
				НеобходимВызовСервера = Истина;
			Иначе
				Для Каждого СтрокаТЧ Из ТЧ Цикл
					Если КэшированныеЗначения.ПроцентыСтавокНДС[СтрокаТЧ.СтавкаНДС] = Неопределено Тогда
						НеобходимВызовСервера = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если КэшированныеЗначения.ПроцентыСтавокНДС[ТекущаяСтрока.СтавкаНДС] = Неопределено Тогда
				НеобходимВызовСервера = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДСиАкцизногоНалога", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.Свойство("НеобходимоОбработатьВсюТЧ") Тогда
			НеобходимоОбработатьВсюТЧ = Истина;
		КонецЕсли;
		
		Если НеобходимоОбработатьВсюТЧ Тогда
			Если БудутДобавленныеСтроки Тогда
				НеобходимВызовСервера = Истина;
			Иначе
				Для Каждого СтрокаТЧ Из ТЧ Цикл
					Если КэшированныеЗначения.ПроцентыСтавокНДС[СтрокаТЧ.СтавкаНДС] = Неопределено Тогда
						НеобходимВызовСервера = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если КэшированныеЗначения.ПроцентыСтавокНДС[ТекущаяСтрока.СтавкаНДС] = Неопределено Тогда
				НеобходимВызовСервера = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
 	
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДСПоСуммеСНДС", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.Свойство("НеобходимоОбработатьВсюТЧ") Тогда
			НеобходимоОбработатьВсюТЧ = Истина;
		КонецЕсли;
		
		Если НеобходимоОбработатьВсюТЧ Тогда
			Если БудутДобавленныеСтроки Тогда
				НеобходимВызовСервера = Истина;
			Иначе
				Для Каждого СтрокаТЧ Из ТЧ Цикл
					Если КэшированныеЗначения.ПроцентыСтавокНДС[СтрокаТЧ.СтавкаНДС] = Неопределено Тогда
						НеобходимВызовСервера = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если КэшированныеЗначения.ПроцентыСтавокНДС[ТекущаяСтрока.СтавкаНДС] = Неопределено Тогда
				НеобходимВызовСервера = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьТипНоменклатуры", СтруктураПараметровДействия) Тогда
		Если НеобходимоОбработатьВсюТЧ Тогда
			Если БудутДобавленныеСтроки Тогда
				НеобходимВызовСервера = Истина;
			Иначе
				Для Каждого СтрокаТЧ Из ТЧ Цикл
					Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
						НеобходимВызовСервера = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
				НеобходимВызовСервера = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
			
	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре", СтруктураПараметровДействия)
	   И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		НеобходимВызовСервера = Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуВозвратСУчетомОснования", СтруктураПараметровДействия) Тогда
		НеобходимВызовСервера = Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровДействия) Тогда
		НеобходимВызовСервера = Истина;
		
		Если СтруктураПараметровДействия.Свойство("НеобходимоОбработатьВсюТЧ") Тогда
			НеобходимоОбработатьВсюТЧ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССкладВШапке", СтруктураПараметровДействия) Тогда
		НеобходимВызовСервера = Истина;
		
		Если СтруктураПараметровДействия.Свойство("НеобходимоОбработатьВсюТЧ") Тогда
			НеобходимоОбработатьВсюТЧ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПараметровДействия) Тогда
		
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИспользоватьАвтоматическиеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьАвтоматическиеСкидки") Тогда
				ИспользоватьАвтоматическиеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если (ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах = Неопределено)
			Или (ИспользоватьАвтоматическиеСкидки И КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах = Неопределено) Тогда
			
			НеобходимВызовСервера = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", СтруктураПараметровДействия) Тогда
		
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьРучныеСкидки  <> Неопределено И КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках = Неопределено Тогда
			НеобходимВызовСервера = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДанныеПоДокументуПродажи", СтруктураПараметровДействия) Тогда
		
		НеобходимВызовСервера = Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьАссортиментСтроки")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		НеобходимВызовСервера = Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗапретРозничнойПродажи")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		НеобходимВызовСервера = Истина;
		
	КонецЕсли;
	
	Возврат Новый Структура("НеобходимВызовСервера, НеобходимоОбработатьВсюТЧ, СтруктураДействий",
	   НеобходимВызовСервера,
	   НеобходимоОбработатьВсюТЧ,
	   СтруктураДействий);

КонецФункции

// Функция получения структуры полей ТЧ
//
Функция ПолучитьСтруктуруПолейТЧ(СтруктураДействий)

	Перем СтруктураПараметровДействия;

	СтруктураПолейТЧ = Новый Структура;

	Если СтруктураДействий.Свойство("ОбработатьШтрихкоды", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьСерийныеНомераПоВладельцу") Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КлючСтроки");
		СтруктураПолейТЧ.Вставить("КлючСвязиСерийныхНомеров");
		СтруктураПолейТЧ.Вставить("ИспользоватьСерийныеНомера");
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи") Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ОпорнаяЦена", 0);
		СтруктураПолейТЧ.Вставить("ЦенаСтандартная", 0);
		СтруктураПолейТЧ.Вставить("АкционнаяЦена", Ложь);	//	LNK 05.08.2021 13:40:25
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиНазначенную") Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("АкционнаяЦена", Ложь);	//	LNK 05.08.2021 13:40:25
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПоВидуЦен") Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		
	КонецЕсли;
    	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПрошлойЗакупки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ЦенаПрошлойЗакупки", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДСПоСуммеСНДС") Тогда
		СтруктураПолейТЧ.Вставить("СуммаВсего", 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС"  , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДСиАкцизногоНалога") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаАкцизногоНалога",0);
		СтруктураПолейТЧ.Вставить("ПодакцизныеТоварыДляКоммерческогоИспользования");
		СтруктураПолейТЧ.Вставить("ПодакцизныйТовар");
	КонецЕсли;
 
	Если СтруктураДействий.Свойство("ПересчитатьСумму") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"             , 0);
		СтруктураПолейТЧ.Вставить("Цена"              , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"              , 0);
		СтруктураПолейТЧ.Вставить("Количество"         , 0);
		СтруктураПолейТЧ.Вставить("Цена      "         , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомБонусныхБалловНачислено") Тогда

		СтруктураПолейТЧ.Вставить("Сумма"                       , 0);
		СтруктураПолейТЧ.Вставить("СуммаБонусныхБалловНачислено", 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"   , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки" , 0);

	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомБонусныхБалловСписано") Тогда

		СтруктураПолейТЧ.Вставить("Сумма"                       , 0);
		СтруктураПолейТЧ.Вставить("СуммаБонусныхБалловСписано"  , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"   , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки" , 0);

	КонецЕсли;

	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуФакт", ИмяКоличества) Тогда
		             	
		Если Не ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "Факт";
		КонецЕсли;
				
		СтруктураПолейТЧ.Вставить("СуммаФакт"                         , 0);
		СтруктураПолейТЧ.Вставить("Цена"                              , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок" + ИмяКоличества, 0);
				
	КонецЕсли;
    	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуВозвратСУчетомОснования") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Коэффициент"         , 1);
		СтруктураПолейТЧ.Вставить("ПроцентСкидкиНаценки", 1);
		СтруктураПолейТЧ.Вставить("Сумма"               , 0);
		СтруктураПолейТЧ.Вставить("Цена"                , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"  , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("Цена"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок", ИмяКоличества) Тогда
		
		СтруктураПолейТЧ.Вставить("Упаковка");
		Если ЗначениеЗаполнено(ИмяКоличества) Тогда
			СтруктураПолейТЧ.Вставить("КоличествоУпаковок" + ИмяКоличества, 0);
			СтруктураПолейТЧ.Вставить("Количество" + ИмяКоличества, 0);
		Иначе
			СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
			СтруктураПолейТЧ.Вставить("Количество" , 0);
		КонецЕсли;	
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницПлан") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПлан", 0);
		СтруктураПолейТЧ.Вставить("КоличествоПлан"        , 0);
	КонецЕсли;
	
	ИмяФакта = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницФакт",ИмяФакта) Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+ИмяФакта, 0);
		СтруктураПолейТЧ.Вставить("Количество"+ИмяФакта    , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьКоличествоУчет") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("Количество");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокФакт",ИмяФакта) Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+ИмяФакта, 0);
		СтруктураПолейТЧ.Вставить("Количество"+ИмяФакта    , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре") Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЭтоУслуга");
		СтруктураПолейТЧ.Вставить("ЭтоПодарочныйСертификат");

	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьТипНоменклатуры") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьСкладПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОрганизациюПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("Организация");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССкладВСтроке") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССкладВШапке") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроставитьПродавца") Тогда
		СтруктураПолейТЧ.Вставить("Продавец");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДанныеПоДокументуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ДокументПродажи");
		СтруктураПолейТЧ.Вставить("ЧекККМ");
		СтруктураПолейТЧ.Вставить("Продавец");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена");
		СтруктураПолейТЧ.Вставить("Сумма");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("Количество");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПоСуммеВЗакупках") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("Цена");
		СтруктураПолейТЧ.Вставить("СуммаВсего");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПоСуммеСНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьАссортиментСтроки") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗапретРозничнойПродажи") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;

//	LNK 15.11.2016 14:16:19
	Если СтруктураДействий.Свойство("ПолучитьОстатокСклада") Тогда

		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("КоличествоНаСкладе");

	КонецЕсли;

//	LNK 05.04.2017 16:10:05
	Если СтруктураДействий.Свойство("ПолучитьКоличествоПлановое") Тогда

		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("КоличествоПлановое");

	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре") Тогда	//	LNK 14.02.2020 10:03:12

	//	для справки смотрим "Справочники.Номенклатура.ПолучитьРеквизитыНоменклатуры(ТекущаяСтрока.Номенклатура)"
		СтруктураПолейТЧ.Вставить("КодНоменклатуры");
		СтруктураПолейТЧ.Вставить("IDN");
		СтруктураПолейТЧ.Вставить("Блокирован");
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("ЭтоУслуга");
		СтруктураПолейТЧ.Вставить("ЭтоПодарочныйСертификат");

	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьДубликатыЗависимыхРеквизитов", СтруктураПараметровДействия) Тогда
		Для Каждого ПолеСтруктуры Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(ПолеСтруктуры.Ключ);
			ЗависимыеРеквизиты = Новый Структура(ПолеСтруктуры.Значение);
			Для Каждого Реквизит Из ЗависимыеРеквизиты Цикл
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ+ПолеСтруктуры.Ключ, 0);
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ, 0);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураПолейТЧ;

КонецФункции

// Функция данных текущей строки по структуре полей
//
Функция ПолучитьДанныеТекущейСтроки(ТекущаяСтрока, СтруктураПолейТЧ)

	ДанныеТекущейСтроки = Новый Структура;
	ОбщегоНазначенияРТКлиентСервер.ДобавитьВСтруктуру(ДанныеТекущейСтроки, СтруктураПолейТЧ);
	ЗаполнитьЗначенияСвойств(ДанныеТекущейСтроки, ТекущаяСтрока);

	Возврат ДанныеТекущейСтроки;

КонецФункции

// Функция получения коэффициента упаковки
//
Функция ПолучитьКоэффициентУпаковкиКлиент(ТекУпаковка, КэшированныеЗначения)

	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		ТекКоэффициент = КэшированныеЗначения.КоэффициентыУпаковок[ТекУпаковка];
	Иначе
		ТекКоэффициент = 1;
	КонецЕсли;

	Возврат ТекКоэффициент;

КонецФункции

// Функция получения объема упаковки
//
Функция ПолучитьОбъемУпаковкиКлиент(ТекУпаковка, КэшированныеЗначения)

	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		ТекОбъем = КэшированныеЗначения.ОбъемУпаковок[ТекУпаковка];
	Иначе
		ТекОбъем = 0;
	КонецЕсли;

	Возврат ТекОбъем;

КонецФункции

// Функция получения веса упаковки
//
Функция ПолучитьВесУпаковкиКлиент(ТекУпаковка, КэшированныеЗначения)

	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		ТекВес = КэшированныеЗначения.ВесУпаковок[ТекУпаковка];
	Иначе
		ТекВес = 0;
	КонецЕсли;

	Возврат ТекВес;

КонецФункции

// Функция получения процента НДС
//
Функция ПолучитьПроцентНДСКлиент(ТекСтавкаНДС, КэшированныеЗначения)

	Если ЗначениеЗаполнено(ТекСтавкаНДС) Тогда
		Результат = КэшированныеЗначения.ПроцентыСтавокНДС[ТекСтавкаНДС];
	Иначе
		Результат = 0;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция получения суммы документа без подарочных сертификатов
Функция ПолучитьСуммуДокументаБезПодарочныхСертификатов(Объект, ИмяТЧ = "Товары") Экспорт
	
	СуммаДокументаБезПодарочныхСертификатов = Объект[ИмяТЧ].Итог("Сумма");
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
	
	СтрокиПодарочныхСертификатов = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаПодарочногоСертификата Из СтрокиПодарочныхСертификатов Цикл
	
		СуммаДокументаБезПодарочныхСертификатов = СуммаДокументаБезПодарочныхСертификатов - СтрокаПодарочногоСертификата.Сумма;
	
	КонецЦикла;
	
	Возврат СуммаДокументаБезПодарочныхСертификатов;
	
КонецФункции

//	LNK 04.07.2021 07:09:36
Функция СкопироватьВСтруктуруЭлементКоллекции(ДанныеСтроки, КоллекцияФормы)	Экспорт

	СтруктураЭлемента = Новый Структура;

	Если НЕ ДанныеСтроки = Неопределено Тогда

		БуфферКоллекции  = КоллекцияФормы;
		СтруктураКолонок = ОбработкаТабличнойЧастиТоварыСервер.СтруктуруКолонокКоллекции(БуфферКоллекции);

		Для каждого КлючЗначение Из СтруктураКолонок Цикл

			СтруктураЭлемента.Вставить(КлючЗначение.Ключ, ДанныеСтроки[КлючЗначение.Ключ]);

		КонецЦикла;

		Если СтруктураЭлемента.Свойство("КлючСвязиБонусныхБаллов") И ДанныеСтроки.КлючСвязиБонусныхБаллов = 0 Тогда

			КлючСвязиБонусныхБаллов = 0;

			Для каждого СтрокаКоллекции Из КоллекцияФормы Цикл

				Если КлючСвязиБонусныхБаллов < СтрокаКоллекции.КлючСвязиБонусныхБаллов Тогда

					КлючСвязиБонусныхБаллов = СтрокаКоллекции.КлючСвязиБонусныхБаллов;

				КонецЕсли;

			КонецЦикла;

			ДанныеСтроки.КлючСвязиБонусныхБаллов	  = КлючСвязиБонусныхБаллов + 1;
			СтруктураЭлемента.КлючСвязиБонусныхБаллов = ДанныеСтроки.КлючСвязиБонусныхБаллов;

		КонецЕсли;

	КонецЕсли;

	Возврат СтруктураЭлемента;

КонецФункции













