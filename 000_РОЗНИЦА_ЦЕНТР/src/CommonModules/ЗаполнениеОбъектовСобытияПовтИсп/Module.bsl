//	LNK 22.11.2016 13:31:51
Функция ТекстЗапросаПроверкаПодчиненных(ПолноеИмяМетаданных)	Экспорт

	ТекстЗапроса = "";

	Для каждого ТекстПодзапроса Из ПолучитьСписокИсточниковДанных(ПолноеИмяМетаданных) Цикл

		ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), ""
			, Символы.ПС + "ОБЪЕДИНИТЬ" + Символы.ПС)
			+ ТекстПодзапроса;

	КонецЦикла;

	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда

		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";

	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаПроверкаПодчиненных()

Функция ПолучитьСписокИсточниковДанных(ПолноеИмяМетаданных)

	ШаблонЗапроса =
	"
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИсточник#ТЧ#.Дата КАК Дата,
	|	ТаблицаИсточник.Ссылка,
	|	ТаблицаИсточник#ТЧ#.Проведен КАК Проведен,
	|	ТаблицаИсточник#ТЧ#.ПометкаУдаления КАК ПометкаУдаления,
	|	ТаблицаИсточник#ТЧ#.Представление КАК Представление
	|ИЗ
	|	#ИСТОЧНИК# КАК ТаблицаИсточник
	|ГДЕ
	|	НЕ ТаблицаИсточник.Ссылка = &ТекущаяСсылка
	|	И ТаблицаИсточник.#ИМЯ# = &ТекущаяСсылка
	|	И ТаблицаИсточник.#ИМЯ# ССЫЛКА Документ.#ВИД#
	|	И ТаблицаИсточник#ТЧ#.Проведен = &ПроверяемПроведенные
	|";

	МетаданныеОснования = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных);
	СписокИсточников    = Новый Массив;

	Для каждого ЭлементСостава Из Метаданные.КритерииОтбора.СвязанныеДокументы.Состав Цикл

		Для каждого ТипЗначения Из ЭлементСостава.Тип.Типы() Цикл

			Если Метаданные.НайтиПоТипу(ТипЗначения) = МетаданныеОснования Тогда

				СоставИсточника = ОбщегоНазначенияКлиентСервер.lx_FillValueList(, СтрЗаменить(ЭлементСостава.ПолноеИмя(), "Реквизит.", ""),, ".");

			//	Принимаем (пока что) только документы
				Если СоставИсточника[0] = "Документ" Тогда

					Если СоставИсточника[2] = "ТабличнаяЧасть" Тогда

							ТабличнаяЧасть = ".Ссылка";
							ИсточникДанных = СоставИсточника[0] + "." + СоставИсточника[1] + "." + СоставИсточника[3];

					Иначе	ТабличнаяЧасть = "";
							ИсточникДанных = СоставИсточника[0] + "." + СоставИсточника[1];

					КонецЕсли;

					ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "#ИСТОЧНИК#", ИсточникДанных);
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса , "#ТЧ#"      , ТабличнаяЧасть);
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса , "#ИМЯ#"     , ЭлементСостава.Имя);
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса , "#ВИД#"     , ОбщегоНазначенияКлиентСервер.lx_FillValueList(, ПолноеИмяМетаданных,, ".")[1]);

					СписокИсточников.Добавить(ТекстЗапроса);

					Прервать;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Возврат СписокИсточников;

КонецФункции // ПолучитьСписокИсточниковДанных()

//	LNK 23.01.2017 15:54:57
Функция ТипыОбъектУчтенВNavision()	Экспорт

	СписокТипов = Новый Соответствие;

	Для каждого ТипЗначения Из Метаданные.РегистрыСведений.ОбъектУчтенВNavision.Измерения.Объект.Тип.Типы() Цикл

		СписокТипов.Вставить(ТипЗначения, Истина);

	КонецЦикла;

	Возврат СписокТипов;

КонецФункции // ТипыОбъектУчтенВNavision()

//	LNK 23.01.2017 16:59:54
Функция ТипыОформленияКорректировкиПеремещения()	Экспорт

	СписокТипов = Новый Соответствие;

	СписокТипов.Вставить(Тип("ДокументСсылка.ПеремещениеТоваров")    , Истина);
	СписокТипов.Вставить(Тип("ДокументСсылка.ПриходныйОрдерНаТовары"), Истина);
	СписокТипов.Вставить(Тип("ДокументСсылка.РасходныйОрдерНаТовары"), Истина);

	СписокТипов.Вставить(Тип("ДокументОбъект.ПеремещениеТоваров")    , Истина);
	СписокТипов.Вставить(Тип("ДокументОбъект.ПриходныйОрдерНаТовары"), Истина);
	СписокТипов.Вставить(Тип("ДокументОбъект.РасходныйОрдерНаТовары"), Истина);

	Возврат СписокТипов;

КонецФункции // ТипыОформленияКорректировкиПеремещения()

//	LNK 24.01.2017 08:52:50
Функция ТипыИнвентаризация()	Экспорт

	СписокТипов = Новый Соответствие;

	СписокТипов.Вставить(Тип("ДокументСсылка.ВедомостьИнвентаризационная"), Истина);
	СписокТипов.Вставить(Тип("ДокументСсылка.ПересчетТоваров")            , Истина);

	СписокТипов.Вставить(Тип("ДокументОбъект.ВедомостьИнвентаризационная"), Истина);
	СписокТипов.Вставить(Тип("ДокументОбъект.ПересчетТоваров")            , Истина);

	Возврат СписокТипов;

КонецФункции // ТипыИнвентаризация()

//	LNK 24.03.2020 13:28:07
Функция ТипыМультиПроектов()	Экспорт

	СписокТипов = Новый Соответствие;

	СписокТипов.Вставить(Тип("ДокументСсылка.РеализацияТоваров")        , Истина);
	СписокТипов.Вставить(Тип("ДокументСсылка.ЗаказПокупателя")          , Истина);
	СписокТипов.Вставить(Тип("ДокументСсылка.ОрдерНаПеремещениеТоваров"), Истина);
	СписокТипов.Вставить(Тип("ДокументСсылка.СчетНаОплатуПокупателю")   , Истина);

	СписокТипов.Вставить(Тип("ДокументОбъект.РеализацияТоваров")        , Истина);
	СписокТипов.Вставить(Тип("ДокументОбъект.ЗаказПокупателя")          , Истина);
	СписокТипов.Вставить(Тип("ДокументОбъект.ОрдерНаПеремещениеТоваров"), Истина);
	СписокТипов.Вставить(Тип("ДокументОбъект.СчетНаОплатуПокупателю")   , Истина);

	Возврат СписокТипов;

КонецФункции

#Область Функционал_ПередЗаписьюДокумента	//	LNK 09.08.2022 05:35:06

//	LNK 09.08.2022 04:47:28
Функция ВремяДокументаОграниченоКассовымДнём(ПолноеИмяМетаданных)	Экспорт

//	Включаем только такие документы, которые "привязываются" к кассовому дню
//	только в пределах периода этого кассового дня.
	СписокТипов = Новый Соответствие;
	СписокТипов.Вставить(Метаданные.Документы.ПриходныйКассовыйОрдер.ПолноеИмя(), Истина);
	СписокТипов.Вставить(Метаданные.Документы.РасходныйКассовыйОрдер.ПолноеИмя(), Истина);

	//СписокТипов.Вставить(Метаданные.Документы.РеализацияТоваров.ПолноеИмя(), Истина);
	//СписокТипов.Вставить(Метаданные.Документы.ВозвратТоваровОтПокупателя.ПолноеИмя(), Истина);

	//СписокТипов.Вставить(Метаданные.Документы.ЗаказПоставщику.ПолноеИмя(), Истина);
	//СписокТипов.Вставить(Метаданные.Документы.ПоступлениеТоваров.ПолноеИмя(), Истина);
	//СписокТипов.Вставить(Метаданные.Документы.ВозвратТоваровПоставщику.ПолноеИмя(), Истина);

	Возврат СписокТипов.Получить(ПолноеИмяМетаданных) = Истина;

КонецФункции

#КонецОбласти


//	LNK 25.05.2017 11:58:10
Функция ИмяКлючевогоРеквизитаМагазин(ПолноеИмяМетаданных)	Экспорт

	КлючевыеРеквизиты = Новый Соответствие;

	КлючевыеРеквизиты.Вставить(Метаданные.Документы.ЗаказНаПеремещение.ПолноеИмя(), "МагазинОтправитель");
	КлючевыеРеквизиты.Вставить(Метаданные.Документы.КорректировкаПеремещения.ПолноеИмя(), "МагазинОтправитель");
	КлючевыеРеквизиты.Вставить(Метаданные.Документы.ПеремещениеТоваров.ПолноеИмя(), "МагазинОтправитель");
	КлючевыеРеквизиты.Вставить(Метаданные.Документы.ПрименениеЦенНоменклатуры.ПолноеИмя(), "ОбъектЦенообразования");

	ИмяРеквизита = КлючевыеРеквизиты.Получить(ПолноеИмяМетаданных);

	Возврат ?(ИмяРеквизита = Неопределено, "Магазин", ИмяРеквизита);

КонецФункции

