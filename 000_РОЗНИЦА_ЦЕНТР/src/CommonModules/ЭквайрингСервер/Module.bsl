// Функция возвращает процент торговой уступки для переданных
// договора эквайринга и вида оплаты - платежная карта.
//
// Параметры:
//  ДоговорЭквайринга - договор эквайринга, по которому нужно получить % торговой уступки.
//  ВидОплаты - вид оплаты, для которого  нужно получить % торговой уступки.
//
// Возвращаемое значение:
//  Число. Процент торговой уступки. 0 - если не найден.
//
Функция ПолучитьПроцентТорговойУступкиПлатежнаяКарта(ДоговорЭквайринга, ВидОплаты) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Тарифы.ПроцентТорговойУступки КАК ПроцентТорговойУступки
	|ИЗ
	|	Справочник.ДоговорыЭквайринга.ТарифыЗаРасчетноеОбслуживание КАК Тарифы
	|ГДЕ
	|	Тарифы.Ссылка = &ДоговорЭквайринга
	|	И Тарифы.ВидОплаты = &ВидОплаты
	|");
		
	Запрос.УстановитьПараметр("ДоговорЭквайринга", ДоговорЭквайринга);
	Запрос.УстановитьПараметр("ВидОплаты", ВидОплаты);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПроцентТорговойУступки = Выборка.ПроцентТорговойУступки;
	Иначе
		ПроцентТорговойУступки = 0;
	КонецЕсли;

	Возврат ПроцентТорговойУступки;

КонецФункции


// По виду оплаты заполняет банка-кредитора и процент комиссии;
//
// Параметры
//  ВидОплаты                 - Справочник "ВидыОплатЧекаККМ"
//  БанкКредитор              - Справочник "Контрагенты"
//  ПроцентБанковскойКомиссии - Число
//
Процедура ЗаполнитьБанкиПроцентКомиссии(ВидОплаты, БанкКредитор, ПроцентБанковскойКомиссии) Экспорт

	БанкКредитор              = ВидОплаты.БанкКредитор;
	ПроцентБанковскойКомиссии = ВидОплаты.ПроцентБанковскойКомиссии;

КонецПроцедуры // ЗаполнитьБанкиПроцентКомиссии()


// Функция возвращает процент торговой уступки для переданных
// вида оплаты - банковский кредит.
//
// Параметры
//  ВидОплаты - вид оплаты, для которого  нужно получить % торговой уступки.
//
// Возвращаемое значение:
//  Число. Процент торговой уступки. 0 - если не найден.
//
Функция ПолучитьПроцентТорговойУступкиБанковскийКредит(ВидОплаты) Экспорт

	Возврат ВидОплаты.ПроцентБанковскойКомиссии;

КонецФункции // ПолучитьПроцентТорговойУступкиБанковскийКредит()


// Функция возвращает процент торговой уступки
//
// Параметры
// Параметры:
//  ДоговорЭквайринга - договор эквайринга, по которому нужно получить % торговой уступки.
//  ВидОплаты - вид оплаты, для которого  нужно получить % торговой уступки.
//
// Возвращаемое значение:
//  Число. Процент торговой уступки. 0 - если не найден.
//
Функция ПолучитьПроцентТорговойУступки(ДоговорЭквайринга, ВидОплаты) Экспорт
	
	ТипОплаты = ВидОплаты.ТипОплаты;
	
	Если ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
		
		Возврат ПолучитьПроцентТорговойУступкиПлатежнаяКарта(ДоговорЭквайринга, ВидОплаты);
		
	ИначеЕсли ТипОплаты = Перечисления.ТипыОплатЧекаККМ.БанковскийКредит Тогда
		
		Возврат ПолучитьПроцентТорговойУступкиБанковскийКредит(ВидОплаты);
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции // ПолучитьПроцентТорговойНаценки()

// Функция возвращает процент торговой уступки
//
// Параметры
// Параметры:
//  ДоговорЭквайринга - договор эквайринга, по которому нужно получить % торговой уступки.
//  ВидОплаты - вид оплаты, для которого  нужно получить % торговой уступки.
//
// Возвращаемое значение:
//  Число. Процент торговой уступки. 0 - если не найден.
//
Функция ПолучитьПроцентТорговойУступкиПоТерминалу(ТерминалЭквайринга, ВидОплаты) Экспорт
	
	Возврат ПолучитьПроцентТорговойУступки(ТерминалЭквайринга.Владелец, ВидОплаты);
	
КонецФункции // ПолучитьПроцентТорговойНаценки()
