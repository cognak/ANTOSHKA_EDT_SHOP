#Область ОсновнойПрограммныйИнтерфейс	//	LNK 21.11.2019 10:55:20

Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)	Экспорт

	Результат = Истина;
	ВыходныеПараметры = Новый Массив();
	ПараметрыПодключения.Вставить("ИДУстройства", Неопределено);

	Если Результат Тогда

		Ответ = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.Подключить(ОбъектДрайвера, Параметры);

		Если НЕ Ответ Тогда

			Результат = Ложь;
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);

		Иначе

			ПараметрыПодключения.Вставить("КодОригинальнойТранзакции", Неопределено);
			ПараметрыПодключения.Вставить("ТипТранзакции", "");
			
			ВыходныеПараметры.Добавить(ПараметрыПодключения.ИДУстройства);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[1].Добавить("Штрихкод");
			
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)	Экспорт

	Результат = Истина;

	ВыходныеПараметры = Новый Массив();

	ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.Отключить(ОбъектДрайвера);

	Возврат Результат;

КонецФункции

Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения)	Экспорт

	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ ВСЕХ ТИПОВ ДРАЙВЕРОВ
	
	Если Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда

	//	Тестирование устройства
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" ИЛИ Команда = "GetVersion" Тогда

	//	Получение версии драйвера
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	ИначеЕсли Команда = "ПолучитьОписаниеДрайвера" ИЛИ Команда = "GetDescription" Тогда

	//	Получение описание драйвера
		Результат = ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
//	ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ФИСКАЛЬНЫМИ РЕГИСТРАТОРАМИ
//	=======================================================================================
	
	ИначеЕсли Команда = "OpenDay" ИЛИ Команда = "ОткрытьСмену" Тогда

	//	Открыть смену
		Результат = ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	ИначеЕсли Команда = "PrintXReport" ИЛИ Команда = "НапечататьОтчетБезГашения" Тогда

	//	Печать отчета без гашения
		Результат = НапечататьОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	ИначеЕсли Команда = "PrintZReport" ИЛИ Команда = "НапечататьОтчетСГашением" Тогда

	//	Печать отчета с гашением
		Результат = НапечататьОтчетСГашением(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	ИначеЕсли Команда = "PrintReceipt" ИЛИ Команда = "ПечатьЧека" Тогда

	//	Печать чека
		Результат = ПечатьЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	ИначеЕсли Команда = "PrintText" ИЛИ Команда = "ПечатьТекста" ИЛИ Команда = "printNonFiscalText"  Тогда

		Если Команда = "printNonFiscalText" Тогда

			НомерШрифта = ?(ВходныеПараметры.Количество() > 3, ?(ТипЗнч(ВходныеПараметры[3]) = Тип("Число"), Макс(0, Мин(ВходныеПараметры[3], 3)), 0), 0);

			НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры[2], НомерШрифта, ВыходныеПараметры);

		Иначе

		//	Печать слип чека
			СтрокаТекста = ВходныеПараметры[0];
			Результат    = ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры);

		КонецЕсли;

	ИначеЕсли Команда = "PrintNullReceipt" ИЛИ Команда = "НапечататьНулевойЧек" Тогда

	//	Печать нулевого чека
		Результат = НапечататьНулевойЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	ИначеЕсли Команда = "OpenCheck" ИЛИ Команда = "ОткрытьЧек" ИЛИ Команда = "beginNonFiscal"  Тогда

	//	Открыть фискальный чек
		ЧекВозврата   = ВходныеПараметры[0];
		ФискальныйЧек = ?(Команда = "beginNonFiscal", Ложь, ВходныеПараметры[1]);

		Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры);

	ИначеЕсли Команда = "CancelCheck" ИЛИ Команда = "ОтменитьЧек"  Тогда

	//	Отменить открытый фискальный чек
		Результат = ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	ИначеЕсли Команда = "endNonFiscal" Тогда

		Результат = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ЗакрытьЧек(ОбъектДрайвера, Неопределено, Неопределено, Неопределено, Неопределено, Неопределено, Ложь);  

	ИначеЕсли Команда = "Encash" ИЛИ Команда = "Инкассация" Тогда

	//	Печать чека внесения/выемки
		ТипИнкассации = ВходныеПараметры[0];
		Сумма         = ВходныеПараметры[1];

		Результат = Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипИнкассации, Сумма, ВыходныеПараметры);
		
	ИначеЕсли Команда = "OpenCashDrawer" ИЛИ Команда = "ОткрытьДенежныйЯщик" Тогда

	//	Открытие денежного ящика
		Результат = ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	ИначеЕсли Команда = "GetLineLength" ИЛИ Команда = "ПолучитьШиринуСтроки" Тогда

	//	Получение ширины строки в символах
		Результат = ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	ИначеЕсли НРег(Команда) = "printbarcode" ИЛИ Команда = "ПечатьШтрихкода" Тогда

		ТипШтрихКода = ВходныеПараметры[0];
		ШтрихКод     = ВходныеПараметры[1];

		Результат = ПечатьШтрихкода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипШтрихКода, ШтрихКод, ВыходныеПараметры);

	ИначеЕсли Команда = "displayText" ИЛИ Команда = "ВывестиИнформациюНаДисплейПокупателя" Тогда

	//	Вывод информации на дисплей
		Результат = ВывестиИнформациюНаДисплейПокупателя(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);

	ИначеЕсли Команда = "сlearText" ИЛИ Команда = "ОчиститьДисплейПокупателя" Тогда

	//	Очистка дисплея
		Результат = ОчиститьДисплейПокупателя(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	ИначеЕсли Команда = "PrintPReportDate" ИЛИ Команда = "НапечататьПериодическийОтчетПоДатам" Тогда

	//	Печать переодического отчета по датам
		Результат = НапечататьПериодическийОтчетПоДатам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	ИначеЕсли Команда = "PrintPReportNumber" ИЛИ Команда = "НапечататьПериодическийОтчетПоНомерам" Тогда

	//	Печать периодического отчета по номерам
		Результат = НапечататьПериодическийОтчетПоНомерам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);

	ИначеЕсли Команда = "PrintSoldReport" ИЛИ Команда = "НапечататьОтчетОПроданныхТоварах" Тогда

	//	Печать отчета о проданных товарах
		Результат = НапечататьОтчетОПроданныхТоварах(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	ИначеЕсли Команда = "setTime" ИЛИ Команда = "УстановитьВремя" Тогда

	//	Установка времени в фискальном регистраторе
		Результат = УстановитьВремяРегистратора(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	ИначеЕсли Команда = "PrintQR" ИЛИ Команда = "ПечатьQR" Тогда	//	LNK 27.08.2021 05:59:22

		ДанныеКода = ВходныеПараметры[0];
		РазмерКода = ЗначениеЭлемента(ВходныеПараметры, 1, 67);
		Коррекция  = ЗначениеЭлемента(ВходныеПараметры, 2, Неопределено);

		Результат = ПечатьQRКода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ДанныеКода, РазмерКода, Коррекция, ВыходныеПараметры);

	Иначе
		
	//	Указанная команда не поддерживается данным драйвером
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(СтрЗаменить(
				"Команда «%Команда%» не підтримується інстальованим драйвером."
				, "%Команда%"
				, Команда
			)
		);

		Результат = Ложь;

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПроцедурыфункцииОбщиеДляВсехТиповДрайверов

// Функция осуществляет открытие смены
//
Функция ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
//	Заполнение выходных параметров
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(ОбщегоНазначенияКлиент.ДатаСеанса());

	Возврат Результат;
	
КонецФункции

// Функция осуществляет снятие отчета без гашения 
//
Функция НапечататьОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	Попытка

		Ответ = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.НапечататьОтчетБезГашения(ОбъектДрайвера);

		Если НЕ Ответ Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");

			ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);

		Иначе

			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(ОбщегоНазначенияКлиент.ДатаСеанса());

		КонецЕсли;

	Исключение

		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьОтчетБезГашения>:" + ОписаниеОшибки());

	КонецПопытки;

	Возврат Результат;
	
КонецФункции

// Функция осуществляет снятие отчета с гашением 
//
Функция НапечататьОтчетСГашением(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	Попытка

		Ответ = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.НапечататьОтчетСГашением(ОбъектДрайвера);

		Если НЕ Ответ Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");

			ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);

		Иначе

			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(ОбщегоНазначенияКлиент.ДатаСеанса());

		КонецЕсли;

	Исключение

		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьОтчетСГашением>:" + ОписаниеОшибки());

	КонецПопытки;

	Возврат Результат;

КонецФункции

#Область РаботаСФискальнымЧеком

// Функция осуществляет открытие нового чека
//
Функция ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры) Экспорт

	Результат  = Истина;
	НомерСмены = 0;
	НомерЧека  = 0;

	Попытка

		Ответ = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ОткрытьЧек(ОбъектДрайвера, ФискальныйЧек, ЧекВозврата,  Истина, НомерЧека, НомерСмены);

		Если НЕ Ответ Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);

		Иначе

		//	Заполнение выходных параметров
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерСмены);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(0); // Номер документа
			ВыходныеПараметры.Добавить(ОбщегоНазначенияКлиент.ДатаСеанса());

		КонецЕсли;

	Исключение

		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.ОткрытьЧек>:" + ОписаниеОшибки());

	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет закрытие ранее открытого чека
//
Функция ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры, ФискальныйЧек = Истина, СлужебнаяИнформация = Неопределено) Экспорт

	Результат = Истина;

	СуммаНаличнойОплаты     = 0;
	СуммаБезналичнойОплаты1 = 0;
	СуммаБезналичнойОплаты2 = 0;
	СуммаБезналичнойОплаты3 = 0;
	СуммаБезналичнойОплаты4 = 0;	//	LNK 04.03.2021 12:46:25

	Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл

		Если ТаблицаОплат[ИндексОплаты][0].Значение = 0 Тогда

			СуммаНаличнойОплаты = СуммаНаличнойОплаты + ТаблицаОплат[ИндексОплаты][1].Значение;

		ИначеЕсли ТаблицаОплат[ИндексОплаты][0].Значение = 1 Тогда

			СуммаБезналичнойОплаты1 = СуммаБезналичнойОплаты1 + ТаблицаОплат[ИндексОплаты][1].Значение;
			//по идее 1 - оплата картой
			Если Параметры.Свойство("НовыеФункции") И Параметры.НовыеФункции = Истина Тогда
				//Если Параметры.Модель = "304Т6" Тогда
				Параметры.ДопПараметрыЧека.Вставить("ПоддержкаСлипЧека",Истина);	
				//КонецЕсли;
			Иначе
				Параметры.ДопПараметрыЧека.Вставить("ПоддержкаСлипЧека",Ложь);	
			КонецЕсли;
			Успешно = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ДобавитьСлип(ОбъектДрайвера,Параметры.ДопПараметрыЧека,1);

		ИначеЕсли ТаблицаОплат[ИндексОплаты][0].Значение = 2 Тогда

			СуммаБезналичнойОплаты2 = СуммаБезналичнойОплаты2 + ТаблицаОплат[ИндексОплаты][1].Значение;

		ИначеЕсли ТаблицаОплат[ИндексОплаты][0].Значение = 3 Тогда

			СуммаБезналичнойОплаты3 = СуммаБезналичнойОплаты3 + ТаблицаОплат[ИндексОплаты][1].Значение;

		Иначе

			СуммаБезналичнойОплаты4 = СуммаБезналичнойОплаты4 + ТаблицаОплат[ИндексОплаты][1].Значение;

		КонецЕсли;

	КонецЦикла;

	Попытка

		Ответ = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ЗакрытьЧек(ОбъектДрайвера,
	                                     				СуммаНаличнойОплаты,
														СуммаБезналичнойОплаты1,
														СуммаБезналичнойОплаты2,
														СуммаБезналичнойОплаты3,
														СуммаБезналичнойОплаты4,
														ФискальныйЧек, СлужебнаяИнформация);
		Если НЕ Ответ Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");

			ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);
			
			ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

		Иначе

			Ответ = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ОткрытьДенежныйЯщик(ОбъектДрайвера);

		КонецЕсли

	Исключение

		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.ЗакрытьЧек>:" + ОписаниеОшибки());

	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет отмену ранее открытого чека.
//
Функция ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;

	Попытка

		ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ОтменитьЧек(ОбъектДрайвера);

	Исключение

		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.ОтменитьЧек>:" + ОписаниеОшибки());

	КонецПопытки;

	Возврат Результат;   

КонецФункции

Функция УстановитьЧекПродажиПриВозврате(ОбъектДрайвера, НомерЧекаПродажи,ВыходныеПараметры)
	Результат = Истина;

	Попытка

		Результат = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.УстановитьЧекПродажиПриВозврате(ОбъектДрайвера,НомерЧекаПродажи);

	Исключение

		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.УстановитьЧекПродажиПриВозврате>:" + ОписаниеОшибки());

	КонецПопытки;

	Возврат Результат;   
	
КонецФункции

// Осуществляет печать фискального чека
//
Функция ПечатьЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	ТаблицаНоменклатуры = ВходныеПараметры[0];
	ТаблицаОплат        = ВходныеПараметры[1];
	ОбщиеПараметры      = ВходныеПараметры[2];
	
	ТаблицаДопРеквизитов = Новый Массив;
	ТаблицаДопРеквизитов.Добавить(Новый Массив);
	
	Результат  = Истина;

	ДопПараметрыЧека = ОбщиеПараметры[22];
	
	ЧекВозврата = ОбщиеПараметры[0] = 1;
	Если ЧекВозврата Тогда
		Если ДопПараметрыЧека.ЧекККМПродажа.Свойство("ФискальныйНомер") Тогда
			НомерЧекаПродажи = ДопПараметрыЧека.ЧекККМПродажа.ФискальныйНомер;
		Иначе
			НомерЧекаПродажи = "1";
		КонецЕсли;
		Результат = УстановитьЧекПродажиПриВозврате(ОбъектДрайвера,НомерЧекаПродажи,ВыходныеПараметры);
		НапечататьНефискальнуюСтроку(ОбъектДрайвера,Параметры,ПараметрыПодключения,"RNO="+ДопПараметрыЧека.ЧекККМПродажа.ФискальныйНомер,0,ВыходныеПараметры);
		НапечататьНефискальнуюСтроку(ОбъектДрайвера,Параметры,ПараметрыПодключения,"FN="+ДопПараметрыЧека.ФискальныйРегистратор,0,ВыходныеПараметры);
		НапечататьНефискальнуюСтроку(ОбъектДрайвера,Параметры,ПараметрыПодключения,"TS="+Формат(ДопПараметрыЧека.ЧекККМПродажа.Дата,"ДФ=yyyyMMdd"),0,ВыходныеПараметры);
	КонецЕсли;
	
	Если Результат Тогда
//		Открываем чек
		Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения,
	                       ЧекВозврата, ОбщиеПараметры[1], ВыходныеПараметры);
	КонецЕсли;
					   
//	Печатаем строки чека   
	Если Результат Тогда

		ОшибкаПриПечатиСтроки = Ложь;

	//	Печатаем строки чека
		Для ИндексМассива = 0 По ТаблицаНоменклатуры.Количество() - 1 Цикл

			Наименование  = ТаблицаНоменклатуры[ИндексМассива][0].Значение;
			Количество    = ТаблицаНоменклатуры[ИндексМассива][5].Значение;
			Цена          = ТаблицаНоменклатуры[ИндексМассива][4].Значение;
			ПроцентСкидки = ТаблицаНоменклатуры[ИндексМассива][8].Значение;
			Сумма         = ТаблицаНоменклатуры[ИндексМассива][9].Значение;
			НомерСекции   = ТаблицаНоменклатуры[ИндексМассива][3].Значение;
			СтавкаНДС     = ТаблицаНоменклатуры[ИндексМассива][12].Значение;

			ТаблицаДопРеквизитов[0].Очистить();
			ТаблицаДопРеквизитов[0].Добавить(ТаблицаНоменклатуры[ИндексМассива][17].Значение);
			ТаблицаДопРеквизитов[0].Добавить(ТаблицаНоменклатуры[ИндексМассива][18].Значение);

			ДопРеквизиты = МенеджерОборудованияСервер.СформироватьТаблицуДопРеквизитов(ТаблицаДопРеквизитов);

			Если Параметры.Свойство("ПечатьШК") И Параметры.ПечатьШК = Истина Тогда
				вПозНач = Найти(Наименование,"#");
				вПозКон = Найти(Наименование," ");
				Штрихкод = ТаблицаНоменклатуры[ИндексМассива][1].Значение;
				Наименование = СокрЛП(Сред(Наименование,вПозКон));
				ПараметрыСтроки = Новый Структура;
				ПараметрыСтроки.Вставить("Наименование",Наименование);
				ПараметрыСтроки.Вставить("Количество",Количество);
				ПараметрыСтроки.Вставить("Цена",Цена);
				ПараметрыСтроки.Вставить("ПроцентСкидки",ПроцентСкидки);
				ПараметрыСтроки.Вставить("Сумма",Сумма);
				ПараметрыСтроки.Вставить("НомерСекции",НомерСекции);
				ПараметрыСтроки.Вставить("СтавкаНДС",СтавкаНДС);
				ПараметрыСтроки.Вставить("Штрихкод",Штрихкод);
				
				Если НЕ НапечататьФискальнуюСтрокуЕх(ОбъектДрайвера, Параметры, ПараметрыПодключения,
												   ПараметрыСтроки, ДопРеквизиты, ВыходныеПараметры) Тогда

					ОшибкаПриПечатиСтроки = Истина;					   
					Прервать;

				КонецЕсли;
			Иначе
				Если НЕ НапечататьФискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
												   Наименование, Количество, Цена, ПроцентСкидки, Сумма,
												   НомерСекции, СтавкаНДС, ДопРеквизиты, ВыходныеПараметры) Тогда

					ОшибкаПриПечатиСтроки = Истина;					   
					Прервать;

				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если НЕ ОшибкаПриПечатиСтроки Тогда
			Параметры.Вставить("ДопПараметрыЧека",ДопПараметрыЧека);

		//	Закрываем чек
			Результат = ЗакрытьЧек(ОбъектДрайвера
				, Параметры
				, ПараметрыПодключения
				, ТаблицаОплат
				, ВыходныеПараметры
				, ОбщиеПараметры[1]
				, ?(ОбщиеПараметры.Количество() >= 19, ОбщиеПараметры[18], "")
			);

			Если Результат Тогда
				СтруктураНастроекФР = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьНастройкиФР(ОбъектДрайвера);
				ДанныеФН = Новый Структура;
				ДанныеФН.Вставить("ФискальныйНомер",Строка(ВыходныеПараметры[1]));
				ДанныеФН.Вставить("ФискальныйРегистратор",СтруктураНастроекФР.ФискальныйНомер);
				РМКСервер.ЗаписатьФискальныйНомер(ДанныеФН,ДопПараметрыЧека.УИД);
			КонецЕсли;
		Иначе

			Результат = Ложь;

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции
	
#КонецОбласти

// Функция осуществляет печать нулевого чека.
//
Функция НапечататьНулевойЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	Попытка

		Ответ = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.НапечататьНулевойЧек(ОбъектДрайвера);

		Если НЕ Ответ Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);

		Иначе

			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(ОбщегоНазначенияКлиент.ДатаСеанса());

		КонецЕсли;

	Исключение

		Результат   = Ложь;
		ТекстОшибки = ОписаниеОшибки();

		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьНулевойЧек>:" + ТекстОшибки);

	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Осуществляет печать текста
//
Функция ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры)

	Результат  = Истина;  

//	Открываем чек
	Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, Ложь, Ложь, ВыходныеПараметры);

//	Печатаем строки чека
	Если Результат Тогда

		Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТекста) Цикл

			ВыделеннаяСтрока = СтрПолучитьСтроку(СтрокаТекста, НомерСтроки);

			Если (Найти(ВыделеннаяСтрока, "[отрезка]") > 0)
			 ИЛИ (Найти(ВыделеннаяСтрока, "[cut]") > 0) Тогда

				ТаблицаОплат = Новый Массив();
				Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры, Ложь);
				Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, Ложь, Ложь, ВыходныеПараметры);

			Иначе

				Если НЕ НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
				                                     ВыделеннаяСтрока, 0, ВыходныеПараметры) Тогда
					Прервать;

				КонецЕсли;

			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;

//	Закрываем чек
	Если Результат Тогда

		ТаблицаОплат = Новый Массив();
		Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры, Ложь);

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет тестирование устройства.
//
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат	   = Истина;
	РезультатТеста = "";

	Попытка

		Ответ = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ТестУстройства(ОбъектДрайвера, РезультатТеста, Параметры);

		Если Ответ Тогда

			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);

		Иначе

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);

		КонецЕсли;

		ВыходныеПараметры.Добавить(РезультатТеста);

	Исключение

		Результат   = Ложь;
		ТекстОшибки = ОписаниеОшибки();

		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.ТестУстройства>:" + ТекстОшибки);

	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция возвращает версию установленного драйвера
//
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	ВыходныеПараметры.Добавить("Інстальовано");
	ВыходныеПараметры.Добавить("<не визначено>");

	ВыходныеПараметры[1] = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьНомерВерсии(ОбъектДрайвера);

	Возврат Результат;

КонецФункции

// Функция возвращает описание установленного драйвера
//
Функция ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить("Інстальовано");
	ВыходныеПараметры.Добавить("<не визначено>");
	
	ВыходныеПараметры.Добавить("<не визначено>");
	ВыходныеПараметры.Добавить("<не визначено>");
	ВыходныеПараметры.Добавить("<не визначено>");
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционнаяБиблиотека  = "";
	ОсновнойДрайверУстановлен = "";
	РевизияИнтерфейса         = "";
	URLЗагрузкиДрайвера       = "";
	ПараметрыДрайвера         = "";
	ДополнительныеДействия    = "";
	
//	Получаем версию драйвера
	ВыходныеПараметры[1] = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьНомерВерсии(ОбъектДрайвера);

//	Получаем описание драйвера
	ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьОписание(ОбъектДрайвера,
									НаименованиеДрайвера,
									ОписаниеДрайвера, 
									ТипОборудования, 
									РевизияИнтерфейса, 
									ИнтеграционнаяБиблиотека, 
									ОсновнойДрайверУстановлен, 
									URLЗагрузкиДрайвера
	);

	ВыходныеПараметры[2] = НаименованиеДрайвера;
	ВыходныеПараметры[3] = ОписаниеДрайвера;
	ВыходныеПараметры[4] = ТипОборудования;
	ВыходныеПараметры[5] = РевизияИнтерфейса;
	ВыходныеПараметры[6] = ИнтеграционнаяБиблиотека;
	ВыходныеПараметры[7] = ОсновнойДрайверУстановлен;
	ВыходныеПараметры[8] = URLЗагрузкиДрайвера;
	
//	Получаем описание драйвера
	ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьПараметры(ОбъектДрайвера, ПараметрыДрайвера);
	ВыходныеПараметры[9] = ПараметрыДрайвера;
	
//	Получаем дополнительные действия
	ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьДополнительныеДействия(ОбъектДрайвера, ДополнительныеДействия);
	ВыходныеПараметры[10] = ДополнительныеДействия;
	
	Возврат Результат;

КонецФункции


// Функция осуществляет печать фискальной строки 
//
Функция НапечататьФискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                   Наименование, Количество, Цена, ПроцентСкидки, Сумма,
                                   НомерСекции, СтавкаНДС, ДопРеквизиты, ВыходныеПараметры) Экспорт
	Результат = Истина;

	Попытка

		Ответ = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.НапечататьФискСтроку(ОбъектДрайвера, Наименование, Количество, Цена,
	                                                Сумма, НомерСекции, СтавкаНДС, ДопРеквизиты, Параметры);
		Если НЕ Ответ Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);
			ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

		КонецЕсли;

	Исключение

		ОбъектДрайвера.AbortCheck();

		Результат   = Ложь;
		ТекстОшибки = ОписаниеОшибки();

		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьФискСтроку>:" + ТекстОшибки);

	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция НапечататьФискальнуюСтрокуЕх(ОбъектДрайвера, Параметры, ПараметрыПодключения, ПараметрыСтроки, ДопРеквизиты, ВыходныеПараметры) Экспорт
	Результат = Истина;

	Попытка

		Ответ = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.НапечататьФискСтрокуЕх(ОбъектДрайвера, ПараметрыСтроки, ДопРеквизиты, Параметры);
		Если НЕ Ответ Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);
			ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

		КонецЕсли;

	Исключение

		ОбъектДрайвера.AbortCheck();

		Результат   = Ложь;
		ТекстОшибки = ОписаниеОшибки();

		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьФискСтроку>:" + ТекстОшибки);

	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет печать нефискальной строки 
//
Функция НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, НомерШрифта, ВыходныеПараметры) Экспорт

	Результат = Истина;

	Попытка

		Ответ = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.НапечататьНефискСтроку(ОбъектДрайвера, СтрокаТекста, НомерШрифта);

		Если НЕ Ответ Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");

			ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);

			ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

		КонецЕсли;

	Исключение

		Результат   = Ложь;
		ТекстОшибки = ОписаниеОшибки();

		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьНефискСтроку>:" + ТекстОшибки);

	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет вывод информации на дисплей покупателя.
//
Функция ВывестиИнформациюНаДисплейПокупателя(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)

	Результат = Истина;

	Попытка

		Ответ = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ВывестиИнформациюНаДисплейПокупателя(ОбъектДрайвера, Параметры, ВходныеПараметры[0], ВходныеПараметры[1]);

		Если НЕ Ответ Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");

			ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);

		Иначе

			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(ОбщегоНазначенияКлиент.ДатаСеанса());

		КонецЕсли;

	Исключение

		Результат   = Ложь;
		ТекстОшибки = ОписаниеОшибки();

		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.ВывестиСтрокуНаДисплейПокупателя>:" + ТекстОшибки);

	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет очистку дисплея покупателя.
//
Функция ОчиститьДисплейПокупателя(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	Ответ = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ОчиститьДисплейПокупателя(ОбъектДрайвера);

	Если НЕ Ответ Тогда

		Результат = Ложь;

		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");

		ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);

	КонецЕсли;

	Возврат Результат;

КонецФункции

#Область ПечатьПериодическихОтчетов

// Функция осуществляет печать периодического отчёта по датам.
//
Функция НапечататьПериодическийОтчетПоДатам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
 	
	Результат = Истина;

	Попытка

		Ответ = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.НапечататьПериодическийОтчетПоДатам(ОбъектДрайвера, ВходныеПараметры[0], ВходныеПараметры[1], Истина); //+HVOYA Ложь (полный) заменена на Истина (короткий)

		Если НЕ Ответ Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");

			ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);

		Иначе

			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(ОбщегоНазначенияКлиент.ДатаСеанса());

		КонецЕсли;

	Исключение

		Результат   = Ложь;
		ТекстОшибки = ОписаниеОшибки();

		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьОтчетСГашением>:" + ТекстОшибки);

	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет печать периодического отчёта по номерам дневных отчетов.
//
Функция НапечататьПериодическийОтчетПоНомерам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)

	Результат = Истина;

	Попытка

		Ответ = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.НапечататьПериодическийОтчетПоНомерам(ОбъектДрайвера, ВходныеПараметры[0], ВходныеПараметры[1], Истина); //+HVOYA Истина - сокращенный

		Если НЕ Ответ Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");

			ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);

		Иначе

			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(ОбщегоНазначенияКлиент.ДатаСеанса());

		КонецЕсли;

	Исключение

		Результат   = Ложь;
		ТекстОшибки = ОписаниеОшибки();

		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьОтчетСГашением>:" + ТекстОшибки);

	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет печать отчёта о проданных товарах.
//
Функция НапечататьОтчетОПроданныхТоварах(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	Попытка

		Ответ = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.НапечататьОтчетОПроданныхТоварах(ОбъектДрайвера);

		Если НЕ Ответ Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");

			ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);

		Иначе

			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(ОбщегоНазначенияКлиент.ДатаСеанса());

		КонецЕсли;

	Исключение

		Результат   = Ложь;
		ТекстОшибки = ОписаниеОшибки();

		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьОтчетОПроданныхТоварах>:" + ТекстОшибки);

	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции
	
#КонецОбласти

// Функция осуществляет внесение или выемку суммы 
//
Функция Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипИнкассации, Сумма, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка

		Ответ = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.НапечататьЧекВнесенияВыемки(ОбъектДрайвера, ТипИнкассации, Сумма);

		Если НЕ Ответ Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);

		Иначе

			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(ОбщегоНазначенияКлиент.ДатаСеанса());

		КонецЕсли;

	Исключение

		Результат   = Ложь;
		ТекстОшибки = ОписаниеОшибки();

		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьЧекВнесенияВыемки>:" + ТекстОшибки);

	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет печать штрихкода 
//
Функция ПечатьШтрихкода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипШтрихКода, ШтрихКод, ВыходныеПараметры)
	
	Результат = Истина;

	Попытка

		Ответ = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.НапечататьШтрихКод(ОбъектДрайвера, ТипШтрихКода, ШтрихКод);

		Если НЕ Ответ Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");

			ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);

		КонецЕсли;

	Исключение

		Результат   = Ложь;
		ТекстОшибки = ОписаниеОшибки();

		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьШтрихКод>:" + ТекстОшибки);

	КонецПопытки;

	Возврат Результат;
	
КонецФункции

// Функция осуществляет открытие денежного ящика
//
Функция ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	Попытка

		Ответ = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ОткрытьДенежныйЯщик(ОбъектДрайвера);

		Если НЕ Ответ Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");

			ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);

		КонецЕсли;

	Исключение

		Результат   = Ложь;
		ТекстОшибки = ОписаниеОшибки();

		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.ОткрытьДенежныйЯщик>:" + ТекстОшибки);

	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция получает ширину строки в символах
//  
Функция ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;
	ШиринаСтроки = 0;

	Попытка

		Ответ = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьШиринуСтроки(ОбъектДрайвера, ШиринаСтроки);

		Если НЕ Ответ Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);

		Иначе

			ВыходныеПараметры.Очистить();  
			ВыходныеПараметры.Добавить(ШиринаСтроки);

		КонецЕсли;

	Исключение

		Результат   = Ложь;
		ТекстОшибки = ОписаниеОшибки();

		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.ПолучитьШиринуСтроки>:" + ТекстОшибки);

	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция УстановитьВремяРегистратора(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	Попытка

		Ответ = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.УстановитьВремяРегистратора(ОбъектДрайвера);

		Если НЕ Ответ Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");

			ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);

		Иначе

			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(ОбщегоНазначенияКлиент.ДатаСеанса());

		КонецЕсли;

	Исключение

		Результат   = Ложь;
		ТекстОшибки = ОписаниеОшибки();

		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.УстановитьВремяРегистратора>:" + ТекстОшибки);

	КонецПопытки;
	
	Возврат Результат;

КонецФункции // УстановитьВремяРегистратора()

//	LNK 27.08.2021 06:02:53
Функция ПечатьQRКода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ДанныеКода, РазмерКода, Коррекция, ВыходныеПараметры)
	
	Результат = Истина;

	Попытка

		Ответ = ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.НапечататьQRКод(ОбъектДрайвера, ДанныеКода, РазмерКода, Коррекция);

		Если НЕ Ответ Тогда

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(998);
			ВыходныеПараметры.Добавить("");

			ПодключаемоеОборудованиеResonanceФискальныйРегистраторИнтерфейс.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);

		КонецЕсли;

	Исключение

		Результат   = Ложь;
		ТекстОшибки = ОписаниеОшибки();

		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(998);
		ВыходныеПараметры.Добавить("Помилка виклику методу <ОбъектДрайвера.НапечататьQRКод>:" + ТекстОшибки);

	КонецПопытки;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныйФункционал

Функция ЗначениеЭлемента(ДанныеМассив, Индекс, ЗначениеПоУмолчанию)	//	LNK 27.08.2021 06:09:12

	Значение = ЗначениеПоУмолчанию;

	Если ДанныеМассив.Количество() >= (Индекс + 1) Тогда

		Значение = ДанныеМассив[Индекс];

	КонецЕсли;

	Возврат Значение;

КонецФункции


#КонецОбласти








