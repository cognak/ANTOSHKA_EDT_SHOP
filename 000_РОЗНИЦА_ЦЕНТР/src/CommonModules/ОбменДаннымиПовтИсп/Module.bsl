////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обмен данными"
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Механизм регистрации объектов на узлах планов обмена (МРО)

// Получает имя этой информационной базы из константы или из синонима конфигурации
// (Только для внутреннего использования)
//
Функция ИмяЭтойИнформационнойБазы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Константы.ЗаголовокСистемы.Получить();
	
	Если ПустаяСтрока(Результат) Тогда
		
		Результат = Метаданные.Синоним;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Получает код предопределенного узла плана обмена
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
// 
// Возвращаемое значение:
//  Строка - код предопределенного узла плана обмена
//
Функция ПолучитьКодЭтогоУзлаДляПланаОбмена(ИмяПланаОбмена) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолучитьЭтотУзелПланаОбмена(ИмяПланаОбмена), "Код");
	
КонецФункции

// Получает наименование предопределенного узла плана обмена
//
// Параметры:
//  УзелИнформационнойБазы – ПланОбменаСсылка – узел плана обмена
// 
// Возвращаемое значение:
//  Строка - наименование предопределенного узла плана обмена
//
Функция НаименованиеЭтогоУзла(Знач УзелИнформационнойБазы) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолучитьЭтотУзелПланаОбмена(ПолучитьИмяПланаОбмена(УзелИнформационнойБазы)), "Наименование");
	
КонецФункции

// Получает массив имен планов обмена конфигурации, которые используют функционал БСП.
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
// Массив – массив элементов имен планов обмена
//
Функция ПланыОбменаБСП() Экспорт
	
	Возврат СписокПлановОбменаБСП().ВыгрузитьЗначения();
	
КонецФункции

// Устарело. В будущем необходимо использовать "УстановитьВнешнееСоединениеСБазой"
//
Функция УстановитьВнешнееСоединение(ПараметрыВнешнегоСоединения, СтрокаСообщенияОбОшибке = "") Экспорт
    
    Результат = ОбщегоНазначения.УстановитьВнешнееСоединениеСБазой(ПараметрыВнешнегоСоединения);
    СтрокаСообщенияОбОшибке = Результат.ПодробноеОписаниеОшибки;
    
	Возврат Результат.Соединение;
КонецФункции

// Устанавливает внешнее соединение с информационной базой и возвращает указатель на это соединение
// (Только для внутреннего использования)
//
Функция УстановитьВнешнееСоединениеСБазой(ПараметрыВнешнегоСоединения) Экспорт
    Возврат ОбщегоНазначения.УстановитьВнешнееСоединениеСБазой(ПараметрыВнешнегоСоединения);
КонецФункции

// Возвращает признак предопределенного узла этой информационной базы по переданному значению ссылки
//
// Параметры:
//  УзелПланаОбмена - ПланОбменаСсылка - любой узел плана обмена
// 
// Возвращаемое значение:
//  Булево - признак предопределенного узла этой информационной базы
//
Функция ЭтоПредопределенныйУзелПланаОбмена(УзелПланаОбмена) Экспорт
	
	Если Не ЗначениеЗаполнено(УзелПланаОбмена) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПолучитьЭтотУзелПланаОбменаПоСсылке(УзелПланаОбмена) = УзелПланаОбмена;
	
КонецФункции

//

// Определяет, используется ли план обмена, идентифицируемый именем, в модели сервиса.
// Чтобы дать возможность это определить, все планы обмена на уровне модуля менеджера 
// определяют функцию ПланОбменаИспользуетсяВМоделиСервиса(), 
// явно возвращающую значение Истина или Ложь.
//
// Параметры:
// ИмяПланаОбмена - Строка.
//
// Возвращаемое значение:
// Булево.
//
Функция ПланОбменаИспользуетсяВМоделиСервиса(Знач ИмяПланаОбмена) Экспорт
	
	Результат = Ложь;
	
	Если ПланыОбменаБСП().Найти(ИмяПланаОбмена) <> Неопределено Тогда
		
		Результат = ПланыОбмена[ИмяПланаОбмена].ПланОбменаИспользуетсяВМоделиСервиса();
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//

// Для внутреннего использования
//
Функция АвтономнаяРаботаПоддерживается() Экспорт
	
	Возврат ПланыОбменаАвтономнойРаботы().Количество() = 1;
	
КонецФункции

// Для внутреннего использования
//
Функция ПланОбменаАвтономнойРаботы() Экспорт
	
	Результат = ПланыОбменаАвтономнойРаботы();
	
	Если Результат.Количество() = 0 Тогда
		
		ВызватьИсключение НСтр("ru = 'Автономная работа в системе не предусмотрена.'");
		
	ИначеЕсли Результат.Количество() > 1 Тогда
		
		ВызватьИсключение НСтр("ru = 'Создано более одного плана обмена для автономной работы.'");
		
	КонецЕсли;
	
	Возврат Результат[0];
КонецФункции

// Для внутреннего использования
//
Функция ЭтоАвтономноеРабочееМесто() Экспорт
	
	Возврат АвтономнаяРаботаПоддерживается()
			И ОбменДаннымиПовтИсп.ГлавныйУзел() <> Неопределено
			И ОбменДаннымиПовтИсп.ГлавныйУзел().Метаданные().Имя = ПланОбменаАвтономнойРаботы()
	;
	
КонецФункции

// Определяет, является ли переданный узел плана обмена автономным рабочим местом.
//
Функция ЭтоУзелАвтономногоРабочегоМеста(Знач УзелИнформационнойБазы) Экспорт
	
	Возврат АвтономнаяРаботаПоддерживается()
		И УзелИнформационнойБазы.Метаданные().Имя = ПланОбменаАвтономнойРаботы()
	;
КонецФункции

//

// Для внутреннего использования
//
Функция НайтиУзелПланаОбменаПоКоду(ИмяПланаОбмена, КодУзла) Экспорт

	Запрос = Новый Запрос(СтрЗаменить(
	"ВЫБРАТЬ
	|	ПланОбмена.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.[ИмяПланаОбмена] КАК ПланОбмена
	|ГДЕ
	|	ПланОбмена.Код = &Код"
	, "[ИмяПланаОбмена]", ИмяПланаОбмена)
	);
	Запрос.УстановитьПараметр("Код", КодУзла);

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	Возврат Выборка.Ссылка;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Механизм регистрации объектов на узлах планов обмена (МРО)

// Получает таблицу правил регистрации объектов для плана обмена.
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе,
//                    для которого необходимо получить правила регистрации.
// 
// Возвращаемое значение:
// Таблица значений - таблица правил регистрации для текущего плана обмена
//
Функция ПравилаРегистрацииОбъектовПланаОбмена(Знач ИмяПланаОбмена) Экспорт
	
	ПравилаРегистрацииОбъектов = ОбменДаннымиВызовСервера.ПараметрыСеансаПравилаРегистрацииОбъектов().Получить();
	
	Возврат ПравилаРегистрацииОбъектов.Скопировать(Новый Структура("ИмяПланаОбмена", ИмяПланаОбмена));
КонецФункции

// Получает таблицу правил регистрации объекта для заданного плана обмена.
//
// Параметры:
//  ИмяПланаОбмена   - Строка - имя плана обмена как оно задано в конфигураторе
//  ПолноеИмяОбъекта - Строка - полное имя объекта метаданных,
//                   для которого необходимо получить правила регистрации
// 
// Возвращаемое значение:
// Таблица значений - таблица правил регистрации объекта по заданному плану обмена
//
Функция ПравилаРегистрацииОбъекта(Знач ИмяПланаОбмена, Знач ПолноеИмяОбъекта) Экспорт
	
	ПравилаРегистрацииОбъектовПланаОбмена = ОбменДаннымиСобытия.ПравилаРегистрацииОбъектовПланаОбмена(ИмяПланаОбмена);
	
	Возврат ПравилаРегистрацииОбъектовПланаОбмена.Скопировать(Новый Структура("ОбъектМетаданныхИмя", ПолноеИмяОбъекта));
	
КонецФункции

// Возвращает признак того, что существуют правила регистрации для объекта по заданному плану обмена.
//
// Параметры:
//  ИмяПланаОбмена   - Строка - имя плана обмена как оно задано в конфигураторе
//  ПолноеИмяОбъекта - Строка - полное имя объекта метаданных,
//                   для которого необходимо определить признак наличия правил регистрации.
// 
//  Возвращаемое значение:
//  Истина – правила регистрации для объекта существуют; Ложь – нет.
//
Функция ПравилаРегистрацииОбъектаСуществуют(Знач ИмяПланаОбмена, Знач ПолноеИмяОбъекта) Экспорт
	
	Возврат ОбменДаннымиСобытия.ПравилаРегистрацииОбъекта(ИмяПланаОбмена, ПолноеИмяОбъекта).Количество() <> 0;
	
КонецФункции

// Определяет признак авторегистрации объекта метаданных в составе плана обмена.
//
// Параметры:
//  ИмяПланаОбмена   – Строка – имя плана обмена, как оно задано в конфигураторе, в состав которого входит объект метаданных.
//  ПолноеИмяОбъекта – Строка - полное имя объекта метаданных, для которого требуется получить признак авторегистрации.
//
//  Возвращаемое значение:
//  Тип: Булево.
//   Истина – объект метаданных имеет признак авторегистрации "Разрешена" в составе плана обмена;
//   Ложь – объект метаданных имеет признак авторегистрации "Запрещена" в составе плана обмена
//          или объект метаданных не входит в состав плана обмена.
//
Функция АвтоРегистрацияРазрешена(Знач ИмяПланаОбмена, Знач ПолноеИмяОбъекта) Экспорт
	
	ЭлементСоставаПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав.Найти(Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта));
	
	Если ЭлементСоставаПланаОбмена = Неопределено Тогда
		Возврат Ложь; // объект метаданных не входит в состав плана обмена
	КонецЕсли;
	
	Возврат ЭлементСоставаПланаОбмена.АвтоРегистрация = АвтоРегистрацияИзменений.Разрешить;
КонецФункции

// Определяет признак вхождения объекта метаданных в состав плана обмена.
//
// Параметры:
//  ИмяПланаОбмена   – Строка – имя плана обмена, как оно задано в конфигураторе.
//  ПолноеИмяОбъекта – Строка - полное имя объекта метаданных, для которого требуется получить признак.
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – объект входит в состав плана обмена; Ложь – не входит.
//
Функция ПланОбменаСодержитОбъект(Знач ИмяПланаОбмена, Знач ПолноеИмяОбъекта) Экспорт
	
	ЭлементСоставаПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав.Найти(Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта));
	
	Возврат ЭлементСоставаПланаОбмена <> Неопределено;
КонецФункции

// Определяет признак того, то регистрацию изменений объекта следует выполнять с использованием правил регистрации.
//
// Параметры:
//  ИмяПланаОбмена   – Строка – имя плана обмена, как оно задано в конфигураторе.
//  ПолноеИмяОбъекта – Строка - полное имя объекта метаданных, для которого требуется получить признак использования правил регистрации.
// 
Функция РегистрироватьИзмененияПоПравиламРегистрацииОбъекта(Знач ИмяПланаОбмена, Знач ПолноеИмяОбъекта) Экспорт
	
	Если АвтоРегистрацияРазрешена(ИмяПланаОбмена, ПолноеИмяОбъекта) Тогда
		Возврат Ложь;
	ИначеЕсли Не ПравилаРегистрацииОбъектаСуществуют(ИмяПланаОбмена, ПолноеИмяОбъекта) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Возвращает признак использования плана обмена в обмене данными.
// Если план обмена содержит хотя бы один узел кроме предопределенного,
// то считается, что он используется.
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, как оно задано в конфигураторе.
//
// Возвращаемое значение:
// Тип: Булево. Истина – план обмена используется, Ложь – нет.
//
Функция ОбменДаннымиВключен(Знач ИмяПланаОбмена) Экспорт
	
	Возврат ПараметрыСеанса.ИспользуемыеПланыОбмена.Найти(ИмяПланаОбмена) <> Неопределено;
	
КонецФункции

//

// Получает таблицу реквизитов регистрации объектов для механизма выборочной регистрации объектов
//
// Параметры:
//  ИмяОбъекта     - Строка - полное имя объекта метаданного, например, "Справочник.Номенклатура"
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
//
// Возвращаемое значение:
//  ТаблицаРеквизитовРегистрации - таблица значений - таблица реквизитов регистрации, 
//  упорядоченная по полю "Порядок", для заданного объекта метаданного
//
Функция ПолучитьТаблицуРеквизитовРегистрации(ИмяОбъекта, ИмяПланаОбмена) Экспорт
	
	ТаблицаРеквизитовРегистрацииОбъектов = ОбменДаннымиСервер.ПолучитьПравилаВыборочнойРегистрацииОбъектовПС();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяПланаОбмена", ИмяПланаОбмена);
	Отбор.Вставить("ИмяОбъекта",     ИмяОбъекта);
	
	ТаблицаРеквизитовРегистрации = ТаблицаРеквизитовРегистрацииОбъектов.Скопировать(Отбор);
	
	ТаблицаРеквизитовРегистрации.Сортировать("Порядок Возр");
	
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

// Получает таблицу правил выборочной регистрации объектов из параметров сеанса.
//
// Параметры:
// Нет.
// 
// Возвращаемое значение:
// Таблица значений - таблица реквизитов регистрации для всех объектов метаданных
//
Функция ПолучитьПравилаВыборочнойРегистрацииОбъектовПС() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПараметрыСеанса.ПравилаВыборочнойРегистрацииОбъектов.Получить();
	
КонецФункции

// Получает предопределенный узел плана обмена
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
// 
// Возвращаемое значение:
//  ЭтотУзел - ПланОбменаСсылка - предопределенный узел плана обмена
//
Функция ПолучитьЭтотУзелПланаОбмена(ИмяПланаОбмена) Экспорт
	
	Возврат ПланыОбмена[ИмяПланаОбмена].ЭтотУзел()
	
КонецФункции

// Получает предопределенный узел плана обмена по ссылке на узел плана обмена
//
// Параметры:
//  УзелПланаОбмена - ПланОбменаСсылка - любой узел плана обмена
// 
// Возвращаемое значение:
//  ЭтотУзел - ПланОбменаСсылка - предопределенный узел плана обмена
//
Функция ПолучитьЭтотУзелПланаОбменаПоСсылке(УзелПланаОбмена) Экспорт
	
	Возврат ПолучитьЭтотУзелПланаОбмена(ПолучитьИмяПланаОбмена(УзелПланаОбмена));
	
КонецФункции

// Возвращает признак принадлежности узла к плану обмена РИБ
//
// Параметры:
//  УзелИнформационнойБазы – ПланОбменаСсылка – узел плана обмена, для которого требуется получить значение функции
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – узел принадлежит плану обмена РИБ; Ложь – нет.
//
Функция ЭтоУзелРаспределеннойИнформационнойБазы(УзелИнформационнойБазы) Экспорт
	
	Возврат УзелИнформационнойБазы.Метаданные().РаспределеннаяИнформационнаяБаза;
	
КонецФункции

// Возвращает признак принадлежности узла к плану обмена стандартного обмена (без правил конвертации)
//
// Параметры:
//  УзелИнформационнойБазы – ПланОбменаСсылка – узел плана обмена, для которого требуется получить значение функции
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – узел принадлежит плану обмена стандартного обмена; Ложь – нет.
//
Функция ЭтоУзелСтандартногоОбменаДанными(УзелИнформационнойБазы) Экспорт
	
	Возврат Не ЭтоУзелРаспределеннойИнформационнойБазы(УзелИнформационнойБазы)
		  И Не ЕстьМакетПланаОбмена(ПолучитьИмяПланаОбмена(УзелИнформационнойБазы), "ПравилаОбмена");
	//
КонецФункции

// Возвращает признак принадлежности узла к плану обмена универсального обмена (по правилам конвертации)
//
// Параметры:
//  УзелИнформационнойБазы – ПланОбменаСсылка – узел плана обмена, для которого требуется получить значение функции
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – узел принадлежит плану обмена универсального обмена; Ложь – нет.
//
Функция ЭтоУзелУниверсальногоОбменаДанными(УзелИнформационнойБазы) Экспорт
	
	Возврат Не ЭтоУзелРаспределеннойИнформационнойБазы(УзелИнформационнойБазы)
		И ЕстьМакетПланаОбмена(ПолучитьИмяПланаОбмена(УзелИнформационнойБазы), "ПравилаОбмена");
	//
КонецФункции

// Возвращает признак принадлежности узла к плану обмена, который использует функционал обмена БСП
//
// Параметры:
//  УзелИнформационнойБазы – ПланОбменаСсылка, ПланОбменаОбъект – узел плана обмена, для которого требуется получить значение функции
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – узел принадлежит плану обмена, использующего функционал БСП; Ложь – нет.
//
Функция ЭтоУзелОбменаДаннымиБСП(УзелИнформационнойБазы) Экспорт
	
	Возврат ПланыОбменаБСП().Найти(ПолучитьИмяПланаОбмена(УзелИнформационнойБазы)) <> Неопределено;
	
КонецФункции

// Возвращает признак принадлежности узла к разделенному плану обмена, который использует функционал обмена БСП
//
// Параметры:
//  УзелИнформационнойБазы – ПланОбменаСсылка – узел плана обмена, для которого требуется получить значение функции
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – узел принадлежит разделенному плану обмена, использующего функционал БСП; Ложь – нет.
//
Функция ЭтоУзелРазделенногоОбменаДаннымиБСП(УзелИнформационнойБазы) Экспорт
	
	Возврат РазделенныеПланыОбменаБСП().Найти(ПолучитьИмяПланаОбмена(УзелИнформационнойБазы)) <> Неопределено;
	
КонецФункции

// Возвращает признак принадлежности плана обмена к плану обмена РИБ
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена, как оно задано в конфигураторе
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – план обмена принадлежит плану обмена РИБ; Ложь – нет.
//
Функция ЭтоПланОбменаРаспределеннойИнформационнойБазы(ИмяПланаОбмена) Экспорт
	
	Возврат Метаданные.ПланыОбмена[ИмяПланаОбмена].РаспределеннаяИнформационнаяБаза;
	
КонецФункции

// Получает имя плана обмена как объекта метаданного для заданного узла
//
// Параметры:
//  УзелПланаОбмена - ПланОбменаСсылка, ПланОбменаОбъект - узел плана обмена
// 
// Возвращаемое значение:
//  Имя - Строка - имя плана обмена как объекта метаданного
//
Функция ПолучитьИмяПланаОбмена(УзелПланаОбмена) Экспорт
	
	Возврат УзелПланаОбмена.Метаданные().Имя;
	
КонецФункции

// Получает массив всех узлов для заданного плана обмена кроме предопределенного узла
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
// 
// Возвращаемое значение:
//  МассивУзлов - Массив - массив всех узлов для заданного плана обмена кроме предопределенного узла
//
Функция ПолучитьМассивУзловПланаОбмена(ИмяПланаОбмена) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена." + ИмяПланаОбмена + " КАК ТаблицаУзлы
	|ГДЕ
	|	НЕ ТаблицаУзлы.ЭтотУзел
	|	И НЕ ТаблицаУзлы.ПометкаУдаления"
	);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

//	LNK 20.07.2022 07:23:00
Функция ПолучитьОсновныеМагазиныУзлов()	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Фильтр.НомерМагазина КАК НомерМагазина,
	|	Фильтр.Ссылка КАК Магазин
	|ИЗ
	|	ПланОбмена.ПоМагазину КАК ТаблицаУзлов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Магазины КАК Фильтр
	|		ПО ТаблицаУзлов.Магазин = Фильтр.Ссылка
	|ГДЕ
	|	НЕ(ТаблицаУзлов.ЭтотУзел
	|				ИЛИ ТаблицаУзлов.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерМагазина"
	);
	
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Магазин");

КонецФункции

//	LNK 26.02.2018 15:45:55
Функция ПолучитьСоответствиеУзловМагазинуПоМагазину(ДобавитьПоУстройствам = Ложь)	Экспорт

	МагазиныПолучатели = Новый Соответствие;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка КАК Узел,
	|	ТаблицаСправочник.Ссылка КАК Магазин
	|ИЗ
	|	Справочник.Магазины КАК ТаблицаСправочник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.ПоМагазину.Магазины КАК ТаблицаУзлы
	|		ПО ТаблицаСправочник.Ссылка = ТаблицаУзлы.Магазин
	|			И (НЕ(ТаблицаУзлы.Ссылка.ЭтотУзел
	|					ИЛИ ТаблицаУзлы.Ссылка.ПометкаУдаления))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка,
	|	ТаблицаСправочник.Ссылка
	|ИЗ
	|	Справочник.Магазины КАК ТаблицаСправочник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.ПоУстройствамАнтошка КАК ТаблицаУзлы
	|		ПО ТаблицаСправочник.Ссылка = ТаблицаУзлы.Магазин
	|			И (НЕ(ТаблицаУзлы.ЭтотУзел
	|					ИЛИ ТаблицаУзлы.ПометкаУдаления))
	|ГДЕ
	|	&ДобавитьПоУстройствам = ИСТИНА
	|ИТОГИ ПО
	|	Магазин"
	);
	Запрос.УстановитьПараметр("ДобавитьПоУстройствам", ДобавитьПоУстройствам);

	ОбщаяВыборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ОбщаяВыборка.Следующий() Цикл

		СписокУзлов = Новый Массив;
		УзлыВыборка = ОбщаяВыборка.Выбрать();

		Пока УзлыВыборка.Следующий() Цикл

			Если ЗначениеЗаполнено(УзлыВыборка.Узел) Тогда

				СписокУзлов.Добавить(УзлыВыборка.Узел);

			КонецЕсли;

		КонецЦикла;

		Если НЕ ЭтоГлавныйУзел() Тогда

			СписокУзлов.Добавить(ГлавныйУзел());

		КонецЕсли;

		МагазиныПолучатели.Вставить(ОбщаяВыборка.Магазин, СписокУзлов);

	КонецЦикла;

	Возврат МагазиныПолучатели;

КонецФункции


// Получает список макетов типовых правил обмена из конфигурации для заданного плана обмена;
// список заполняется именами и синонимами макетов правил
// 
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
// 
// Возвращаемое значение:
//  СписокПравил - список значений - список макетов типовых правил обмена
//
Функция ПолучитьСписокТиповыхПравилОбмена(ИмяПланаОбмена) Экспорт
	
	Возврат ПолучитьСписокТиповыхПравил(ИмяПланаОбмена, "ПравилаОбмена");
	
КонецФункции

// Получает список макетов типовых правил регистрации из конфигурации для плана обмена;
// список заполняется именами и синонимами макетов правил
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
// 
// Возвращаемое значение:
//  СписокПравил - список значений - список макетов типовых правил регистрации
//
Функция ПолучитьСписокТиповыхПравилРегистрации(ИмяПланаОбмена) Экспорт
	
	Возврат ПолучитьСписокТиповыхПравил(ИмяПланаОбмена, "ПравилаРегистрации");
	
КонецФункции

// Получает список планов обмена конфигурации, которые используют функционал БСП.
// список заполняется именами и синонимами планов обмена
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СписокПлановОбмена - список значений - список планов обмена конфигурации
//
Функция СписокПлановОбменаБСП() Экспорт
	
	// возвращаемое значение функции
	СписокПлановОбмена = Новый СписокЗначений;
	
	ПланыОбменаПодсистемы = Новый Массив;
	
	ОбменДаннымиПереопределяемый.ПолучитьПланыОбмена(ПланыОбменаПодсистемы);
	
	Для Каждого ПланОбмена ИЗ ПланыОбменаПодсистемы Цикл
		
		СписокПлановОбмена.Добавить(ПланОбмена.Имя, ПланОбмена.Синоним);
		
	КонецЦикла;
	
	Возврат СписокПлановОбмена;
КонецФункции

#Область КлассификаторПорядкаВыгрузкиДанныхПоМагазинам

//	LNK 29.10.2016 11:25:49
Функция ПолучитьКлассификаторСоставаПланаОбмена(УзелИнформационнойБазы)	Экспорт

	КлассификаторСостава = Новый Структура(
		"Структура, Классы, Регистры"
		, Новый Структура, Новый Массив, Новый Массив);

//	Элемент "Классы" содержит порядок выборки структур - ПОРЯДОК ДОБАВЛЕНИЯ ВАЖЕН!.
//	Следует поддерживать соответствие имён в классах и структуре.
	КлассификаторСостава.Классы.Добавить("Версия");
	КлассификаторСостава.Классы.Добавить("Конфигурация");
	КлассификаторСостава.Классы.Добавить("ПрименениеКонфигурации");

	КлассификаторСостава.Классы.Добавить("Номенклатура");			//	выгружаем "частями"
	КлассификаторСостава.Классы.Добавить("Контрагенты");			//	выгружаем "частями"
	КлассификаторСостава.Классы.Добавить("ИнформационныеКарты");	//	выгружаем "частями"
	КлассификаторСостава.Классы.Добавить("ФизическиеЛица");			//	выгружаем "частями"

	КлассификаторСостава.Классы.Добавить("Справочники");
	КлассификаторСостава.Классы.Добавить("ПланыВидовХарактеристик");

	КлассификаторСостава.Классы.Добавить("КлючевыеАтрибутыЗаказовПокупателей");	//	перед "Документы.ЗаказПокупателя"

	КлассификаторСостава.Классы.Добавить("Документы");
	КлассификаторСостава.Классы.Добавить("ЗаказПокупателя");	//	чтобы выгружался позже чека (для "РегистрацияОбъектовMagento")
	КлассификаторСостава.Классы.Добавить("УстановкаЦенНоменклатуры");

	КлассификаторСостава.Классы.Добавить("Определители");	//	СоставОпределителей()

//	Нижеуказанные классы будем ограничивать по количеству элементов в пакете.
	КлассификаторСостава.Классы.Добавить("НоменклатураСегмента");					//	выгружаем "частями"
	КлассификаторСостава.Классы.Добавить("НоменклатурноеСостояние");				//	выгружаем "частями"
	КлассификаторСостава.Классы.Добавить("ИнформативныеОстаткиТоваровПоМагазинам");	//	выгружаем "частями"
	КлассификаторСостава.Классы.Добавить("КлючевыеАтрибутыКонтрагентов");			//	выгружаем "частями"
	КлассификаторСостава.Классы.Добавить("ВерификацияКлиентовНазначение");			//	выгружаем "частями"
	КлассификаторСостава.Классы.Добавить("ПродажиПоДисконтнымКартам");				//	выгружаем "частями"
	КлассификаторСостава.Классы.Добавить("СебестоимостьНоменклатуры");				//	выгружаем "частями"
	КлассификаторСостава.Классы.Добавить("СерийныеНомера");							//	выгружаем "частями"
	КлассификаторСостава.Классы.Добавить("Штрихкоды");								//	выгружаем "частями"
	КлассификаторСостава.Классы.Добавить("ВерсииОбъектов");							//	выгружаем "частями"

	КлассификаторСостава.Классы.Добавить("ДействующиеЦеныНоменклатуры");			//	выгружаем "частями"
	КлассификаторСостава.Классы.Добавить("ОпорныеЦеныНоменклатуры");				//	выгружаем "частями"
	КлассификаторСостава.Классы.Добавить("ПредыдущиеЦеныНоменклатуры");				//	выгружаем "частями"
	КлассификаторСостава.Классы.Добавить("ЦеныНоменклатуры");						//	выгружаем "частями"

//	В класс "Прочее" загоняем все остальные объекты метаданных, не вошедшие в предыдущие классы
	КлассификаторСостава.Классы.Добавить("Прочее");

	Для каждого ИмяКласса Из КлассификаторСостава.Классы Цикл

	//	Массив будет содержать перечень объектов метаданных, принимающих участие
	//	в обходе выборки изменений каждого классификатора.
		КлассификаторСостава.Структура.Вставить(ИмяКласса, Новый Массив);

	КонецЦикла;

	Для каждого ЭлементСостава Из УзелИнформационнойБазы.Метаданные().Состав Цикл

		Если КлассификаторСостава.Структура.Свойство(ЭлементСостава.Метаданные.Имя) Тогда

			КлассификаторСостава.Структура[ЭлементСостава.Метаданные.Имя].Добавить(ЭлементСостава.Метаданные);

		ИначеЕсли ЭлементСостава.Метаданные = Метаданные.Константы.МиграцияВерсия Тогда

			КлассификаторСостава.Структура.Версия.Добавить(ЭлементСостава.Метаданные);

		ИначеЕсли ЭлементСостава.Метаданные = Метаданные.Константы.МиграцияДанные Тогда

			КлассификаторСостава.Структура.Конфигурация.Добавить(ЭлементСостава.Метаданные);

		ИначеЕсли СоставОпределителей().Получить(ЭлементСостава.Метаданные) = Истина Тогда

			КлассификаторСостава.Структура.Определители.Добавить(ЭлементСостава.Метаданные);

		ИначеЕсли ОбщегоНазначения.ЭтоСправочник(ЭлементСостава.Метаданные) Тогда

			КлассификаторСостава.Структура.Справочники.Добавить(ЭлементСостава.Метаданные);

		ИначеЕсли ОбщегоНазначения.ЭтоПланВидовХарактеристик(ЭлементСостава.Метаданные) Тогда

			КлассификаторСостава.Структура.ПланыВидовХарактеристик.Добавить(ЭлементСостава.Метаданные);

		ИначеЕсли ОбщегоНазначения.ЭтоДокумент(ЭлементСостава.Метаданные)
			ИЛИ   ОбщегоНазначения.ЭтоБизнесПроцесс(ЭлементСостава.Метаданные)
			ИЛИ   ОбщегоНазначения.ЭтоЗадача(ЭлементСостава.Метаданные)	Тогда

			КлассификаторСостава.Структура.Документы.Добавить(ЭлементСостава.Метаданные);

		Иначе

			КлассификаторСостава.Структура.Прочее.Добавить(ЭлементСостава.Метаданные);

		КонецЕсли;

		Если ОбщегоНазначения.ЭтоРегистр(ЭлементСостава.Метаданные) Тогда

			КлассификаторСостава.Регистры.Добавить(Новый Структура(
				"ПолноеИмя, ПустоеЗначение"
				, ЭлементСостава.Метаданные.ПолноеИмя()
				, ПустоеЗначениеТипа(ЭлементСостава.Метаданные)));

		КонецЕсли;

	КонецЦикла;

	Возврат КлассификаторСостава;

КонецФункции

//	LNK 15.11.2016 16:20:51
Функция СоставОпределителей()

	Определители = Новый Соответствие;

	Определители.Вставить(Метаданные.РегистрыСведений.ОбъектУчтенВNavision, Истина);
	Определители.Вставить(Метаданные.РегистрыСведений.УчетнаяПолитика, Истина);
	Определители.Вставить(Метаданные.РегистрыСведений.УчетнаяПолитикаМагазинов, Истина);

	Возврат Определители;

КонецФункции

//	LNK 30.01.2017 15:17:14
Функция ПустоеЗначениеТипа(ОбъектМетаданных)

	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());

	Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Тогда
		
		ПустоеЗначение = МенеджерОбъекта.ПустаяСсылка();

	Иначе
		
		ПустоеЗначение = МенеджерОбъекта.СоздатьНаборЗаписей();
	
	КонецЕсли;

	Возврат ПустоеЗначение;

КонецФункции // ПустоеЗначениеТипа()

#КонецОбласти

#Область ОпределенияТекущегоКонтекстаВСистемеОбменаДанными

//	LNK 15.10.2016
Функция ГлавныйУзел(ИмяПланаОбмена = "")	Экспорт

	Перем ТекущийУзел, ЗначениеВозврата;

	Если НЕ ПустаяСтрока(ИмяПланаОбмена) Тогда
		
		ТекущийУзел = ПланыОбмена[ИмяПланаОбмена].ЭтотУзел();

	КонецЕсли;

	Если НЕ ЭтоГлавныйУзел(ТекущийУзел) Тогда

		СписокУзлов = Новый Массив;
		СписокУзлов.Добавить(ПланыОбмена.ПоМагазину.ЭтотУзел());
		СписокУзлов.Добавить(ПланыОбмена.ПоМагазинуКонвертация.ЭтотУзел());
		СписокУзлов.Добавить(ПланыОбмена.ПоРабочемуМесту.ЭтотУзел());
		
		Запрос	= Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТаблицаОпределителя.Значение = ЗНАЧЕНИЕ(Перечисление.ЗначенияКонтекстаОбменов.ПоМагазинуКонвертация)
		|				И (ТаблицаУзлов.Ссылка ЕСТЬ NULL
		|					ИЛИ НЕ ТаблицаУзлов.ВидУзла = ЗНАЧЕНИЕ(Перечисление.ВидыУзлов.ЦентральныйОфис))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ЗначенияКонтекстаОбменов.ПоМагазину)
		|		КОГДА ТаблицаОпределителя.Значение = ЗНАЧЕНИЕ(Перечисление.ЗначенияКонтекстаОбменов.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ЗначенияКонтекстаОбменов.ПоМагазину)
		|		ИНАЧЕ ТаблицаОпределителя.Значение
		|	КОНЕЦ КАК ПланОбмена
		|ПОМЕСТИТЬ Контекст
		|ИЗ
		|	Константа.КонтекстОбменовПоМагазину КАК ТаблицаОпределителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.ПоМагазинуКонвертация КАК ТаблицаУзлов
		|		ПО (НЕ ТаблицаУзлов.Ссылка В (&СписокУзлов))
		|			И (НЕ ТаблицаУзлов.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаУзлы.Ссылка КАК Узел
		|ИЗ
		|	ПланОбмена.ПоМагазину КАК ТаблицаУзлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Контекст КАК ТаблицаФильтр
		|		ПО (ВЫБОР
		|				КОГДА &ИмяПланаОбмена = ""ПоМагазину""
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ТаблицаФильтр.ПланОбмена = ЗНАЧЕНИЕ(Перечисление.ЗначенияКонтекстаОбменов.ПоМагазину)
		|						И &ИмяПланаОбмена = """"
		|			КОНЕЦ)
		|ГДЕ
		|	ТаблицаУзлы.ВидУзла = ЗНАЧЕНИЕ(Перечисление.ВидыУзлов.ЦентральныйОфис)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаУзлы.Ссылка
		|ИЗ
		|	ПланОбмена.ПоМагазинуКонвертация КАК ТаблицаУзлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Контекст КАК ТаблицаФильтр
		|		ПО (ВЫБОР
		|				КОГДА &ИмяПланаОбмена = ""ПоМагазинуКонвертация""
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ТаблицаФильтр.ПланОбмена = ЗНАЧЕНИЕ(Перечисление.ЗначенияКонтекстаОбменов.ПоМагазинуКонвертация)
		|						И &ИмяПланаОбмена = """"
		|			КОНЕЦ)
		|ГДЕ
		|	ТаблицаУзлы.ВидУзла = ЗНАЧЕНИЕ(Перечисление.ВидыУзлов.ЦентральныйОфис)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаУзлы.Ссылка
		|ИЗ
		|	ПланОбмена.ПоРабочемуМесту КАК ТаблицаУзлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТаблицаУзлы.Ссылка КАК Узел
		|		ИЗ
		|			ПланОбмена.ПоМагазину КАК ТаблицаУзлы
		|		ГДЕ
		|			НЕ ТаблицаУзлы.ВидУзла = ЗНАЧЕНИЕ(Перечисление.ВидыУзлов.ПустаяСсылка)) КАК Фильтр
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаУзлы.ВидУзла = ЗНАЧЕНИЕ(Перечисление.ВидыУзлов.Магазин)
		|	И Фильтр.Узел ЕСТЬ NULL"
		);
		Запрос.УстановитьПараметр("СписокУзлов", СписокУзлов);
		Запрос.УстановитьПараметр("ИмяПланаОбмена", ИмяПланаОбмена);
		
	//	В узлах "ПоРабочемуМесту" нет таблицы узлов "ПоМагазину" (точнее, только один ЭтотУзел,
	//	но не "прописанный" - то есть не указан вид узла). Поэтому ставим фильтр, определяющий,
	//	что мы в контексте узла "ПоРабочемуМесту".
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда

			ЗначениеВозврата = Выборка.Узел;
		
		КонецЕсли;
		
	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции // ГлавныйУзел()

//	LNK 22.08.2016 11:08:38
Функция ЭтоГлавныйУзел(УзелИнформационнойБазы = Неопределено)	Экспорт

	Если УзелИнформационнойБазы = Неопределено Тогда

		УзелИнформационнойБазы = ПолучитьЭтотУзелПоМагазинуИлиПоРабочемуМесту();

	КонецЕсли;

	ЗначениеВозврата = Ложь;

	Если ЗначениеЗаполнено(УзелИнформационнойБазы) Тогда

		Запрос	= Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаУзлы.Ссылка КАК Узел
		|ИЗ
		|	ПланОбмена.ПоМагазину КАК ТаблицаУзлы
		|ГДЕ
		|	ТаблицаУзлы.Ссылка = &УзелИнформационнойБазы
		|	И ТаблицаУзлы.ВидУзла = ЗНАЧЕНИЕ(Перечисление.ВидыУзлов.ЦентральныйОфис)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаУзлы.Ссылка
		|ИЗ
		|	ПланОбмена.ПоМагазинуКонвертация КАК ТаблицаУзлы
		|ГДЕ
		|	ТаблицаУзлы.Ссылка = &УзелИнформационнойБазы
		|	И ТаблицаУзлы.ВидУзла = ЗНАЧЕНИЕ(Перечисление.ВидыУзлов.ЦентральныйОфис)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаУзлы.Ссылка
		|ИЗ
		|	ПланОбмена.ПоРабочемуМесту КАК ТаблицаУзлы
		|ГДЕ
		|	ТаблицаУзлы.Ссылка = &УзелИнформационнойБазы
		|	И ТаблицаУзлы.ВидУзла = ЗНАЧЕНИЕ(Перечисление.ВидыУзлов.Магазин)"
		);
		Запрос.Параметры.Вставить("УзелИнформационнойБазы", УзелИнформационнойБазы);
		
		ЗначениеВозврата = НЕ Запрос.Выполнить().Пустой();

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции // ГлавныйУзел()

//	LNK 31.08.2016 15:07:00
Функция ПолучитьЭтотУзелПоМагазинуИлиПоРабочемуМесту_Конвертация()	Экспорт

	Перем УзелПланаОбмена;

//	LNK 03.09.2017 11:13:28
//	Планы обмена "ПоМагазину" и "ПоМагазинуКонвертация" являются взаимоисключающими - или тот или другой.
//	Актуально для периферийных баз данных. Поэтому проводим контроль по наличию узлов "не этот узел" для
//	таблицы "ПоМагазинуКонвертация", а так же, если такие узлы есть, то проверяем по реквизиту "ВидУзла".
//	Проверка по виду узла делается, как предохранитель ошибочной установки Константы в ЦБ.
//	Примечание: План обмена "ПоМагазинуКонвертация" является временным, используется на какие переходные периды,
//	например, при обменах между базами, находящимися в разных режимах совместимости.

	Запрос	= Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаОпределителя.Значение = ЗНАЧЕНИЕ(Перечисление.ЗначенияКонтекстаОбменов.ПоМагазинуКонвертация)
	|				И (ТаблицаУзлы.Ссылка ЕСТЬ NULL
	|					ИЛИ НЕ ТаблицаУзлы.ВидУзла = ЗНАЧЕНИЕ(Перечисление.ВидыУзлов.ЦентральныйОфис))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ЗначенияКонтекстаОбменов.ПоМагазину)
	|		КОГДА ТаблицаОпределителя.Значение = ЗНАЧЕНИЕ(Перечисление.ЗначенияКонтекстаОбменов.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ЗначенияКонтекстаОбменов.ПоМагазину)
	|		ИНАЧЕ ТаблицаОпределителя.Значение
	|	КОНЕЦ КАК ПланОбмена
	|ПОМЕСТИТЬ Контекст
	|ИЗ
	|	Константа.КонтекстОбменовПоМагазину КАК ТаблицаОпределителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.ПоМагазинуКонвертация КАК ТаблицаУзлы
	|		ПО (НЕ ТаблицаУзлы.ЭтотУзел)
	|			И (НЕ ТаблицаУзлы.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка КАК Узел
	|ИЗ
	|	ПланОбмена.ПоМагазину КАК ТаблицаУзлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Контекст КАК ТаблицаФильтр
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ТаблицаУзлы.Код = """"
	|	И ТаблицаУзлы.ЭтотУзел
	|	И ТаблицаФильтр.ПланОбмена = ЗНАЧЕНИЕ(Перечисление.ЗначенияКонтекстаОбменов.ПоМагазину)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка
	|ИЗ
	|	ПланОбмена.ПоМагазинуКонвертация КАК ТаблицаУзлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Контекст КАК ТаблицаФильтр
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ТаблицаУзлы.Код = """"
	|	И ТаблицаУзлы.ЭтотУзел
	|	И ТаблицаФильтр.ПланОбмена = ЗНАЧЕНИЕ(Перечисление.ЗначенияКонтекстаОбменов.ПоМагазинуКонвертация)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка
	|ИЗ
	|	ПланОбмена.ПоРабочемуМесту КАК ТаблицаУзлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.ПоМагазину КАК Фильтр
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ТаблицаУзлы.Код = """"
	|	И ТаблицаУзлы.ЭтотУзел
	|	И Фильтр.Ссылка ЕСТЬ NULL
	|	И НЕ ТаблицаУзлы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Контекст"
	);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

		УзелПланаОбмена = Выборка.Узел;

	КонецЕсли;

	Возврат УзелПланаОбмена;

КонецФункции // ПолучитьЭтотУзелПоМагазинуИлиПоРабочемуМесту()

//	LNK 11.06.2018 15:05:34
Функция ПолучитьЭтотУзелПоМагазинуИлиПоРабочемуМесту()	Экспорт

	Перем УзелПланаОбмена;

	Запрос	= Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка КАК Узел
	|ИЗ
	|	ПланОбмена.ПоМагазину КАК ТаблицаУзлы
	|ГДЕ
	|	НЕ ТаблицаУзлы.Код = """"
	|	И ТаблицаУзлы.ЭтотУзел
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка
	|ИЗ
	|	ПланОбмена.ПоРабочемуМесту КАК ТаблицаУзлы
	|ГДЕ
	|	НЕ ТаблицаУзлы.Код = """"
	|	И ТаблицаУзлы.ЭтотУзел
	|	И НЕ ТаблицаУзлы.ПометкаУдаления"
	);	//	И ТаблицаУзлы.ВидУзла = ЗНАЧЕНИЕ(Перечисление.ВидыУзлов.УзелРРО)

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

		УзелПланаОбмена = Выборка.Узел;

	КонецЕсли;

	Возврат УзелПланаОбмена;

КонецФункции // ПолучитьЭтотУзелПоМагазинуИлиПоРабочемуМесту()

//	LNK 19.09.2016 10:03:23
Функция ЭтоТестовыйУзел()	Экспорт

//	Понятие "Тестовый узел" введен тестирования данных, при этом имея односторонный обмен.
//	Этот узел типа "Магазин", он должен получать все данные от центрального узла,
//	но выгрузок в центральный узел не производит.

	СписокУзлов = Новый Массив;
	СписокУзлов.Добавить(ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПоМагазинуИлиПоРабочемуМесту());
	СписокУзлов.Добавить(ПланыОбмена.Полный.ЭтотУзел());

	ЗначениеВозврата = Ложь;

	Для каждого Узел Из СписокУзлов Цикл

		ВидУзла = ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла(Узел), "ВидУзла", Перечисления.ВидыУзлов.ПустаяСсылка());

		Если ВидУзла = Перечисления.ВидыУзлов.ТестовыйУзел Тогда

			ЗначениеВозврата = Истина;
			Прервать;

		КонецЕсли;

	КонецЦикла;

	Возврат ЗначениеВозврата;

КонецФункции

//	LNK 31.10.2019 09:19:42
Функция УзлыИсключить()	Экспорт

	СписокУзлов = Новый Соответствие;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка КАК Узел
	|ИЗ
	|	ПланОбмена.ПоМагазину КАК ТаблицаУзлы
	|ГДЕ
	|	(ТаблицаУзлы.ПометкаУдаления
	|			ИЛИ ВЫБОР
	|				КОГДА &ТекущийУзелТестовый = ИСТИНА
	|					ТОГДА ТаблицаУзлы.ВидУзла = ЗНАЧЕНИЕ(Перечисление.ВидыУзлов.ЦентральныйОфис)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка
	|ИЗ
	|	ПланОбмена.ПоМагазинуКонвертация КАК ТаблицаУзлы
	|ГДЕ
	|	(ТаблицаУзлы.ПометкаУдаления
	|			ИЛИ ВЫБОР
	|				КОГДА &ТекущийУзелТестовый = ИСТИНА
	|					ТОГДА ТаблицаУзлы.ВидУзла = ЗНАЧЕНИЕ(Перечисление.ВидыУзлов.ЦентральныйОфис)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка
	|ИЗ
	|	ПланОбмена.Полный КАК ТаблицаУзлы
	|ГДЕ
	|	(ТаблицаУзлы.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.Розница)
	|			ИЛИ ТаблицаУзлы.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка
	|ИЗ
	|	ПланОбмена.ПоРабочемуМесту КАК ТаблицаУзлы
	|ГДЕ
	|	ТаблицаУзлы.ПометкаУдаления"
	);
	Запрос.УстановитьПараметр("ТекущийУзелТестовый", ОбменДаннымиПовтИсп.ЭтоТестовыйУзел());

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		СписокУзлов.Вставить(Выборка.Узел, Истина);

	КонецЦикла;

	Возврат СписокУзлов;

КонецФункции

//	LNK 11.05.2021 12:25:38 - тип параметра ССЫЛКА (НЕ Объект!)
Функция ЭтоУзелРасчетаСкидок(УзелИнформационнойБазы)	Экспорт

	Возврат ОбменДаннымиСервер.ЭтоУзелРасчетаСкидок(УзелИнформационнойБазы);

КонецФункции

#КонецОбласти

Функция ИсключенияПроверкиПриВыгрузке()	Экспорт

	СоставТипов = Новый Соответствие;

	СоставТипов.Вставить(Тип("СправочникОбъект.Номенклатура"), Истина);
	СоставТипов.Вставить(Тип("СправочникОбъект.УпаковкиНоменклатуры"), Истина);
	СоставТипов.Вставить(Тип("СправочникОбъект.Контрагенты"), Истина);
	СоставТипов.Вставить(Тип("СправочникОбъект.ИнформационныеКарты"), Истина);

	СоставТипов.Вставить(Тип("РегистрСведенийНаборЗаписей.ВерификацияКлиентовНазначение"), Истина);
	СоставТипов.Вставить(Тип("РегистрСведенийНаборЗаписей.ВерификацияКлиентовСобытия"), Истина);
	СоставТипов.Вставить(Тип("РегистрСведенийНаборЗаписей.ИнформативныеОстаткиТоваровПоМагазинам"), Истина);
	СоставТипов.Вставить(Тип("РегистрСведенийНаборЗаписей.НоменклатураСегмента"), Истина);
	СоставТипов.Вставить(Тип("РегистрСведенийНаборЗаписей.НоменклатурноеСостояние"), Истина);

	СоставТипов.Вставить(Тип("РегистрНакопленияНаборЗаписей.ПродажиПоДисконтнымКартам"), Истина);
	//СоставТипов.Вставить(Тип("РегистрСведенийНаборЗаписей.ДействующиеЦеныНоменклатуры"), Истина);
	//СоставТипов.Вставить(Тип("ДокументОбъект.КорректировкаРегистров"), Истина);

	Возврат СоставТипов;

КонецФункции // ИсключенияПроверкиПриВыгрузке()

// Получает массив имен разделенных планов обмена конфигурации, которые используют функционал БСП.
// Если конфигурация не содержит разделителей, то все планы обмена считаются разделенными (прикладными).
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
// Массив – массив элементов имен разделенных планов обмена
//
Функция РазделенныеПланыОбменаБСП() Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого ИмяПланаОбмена Из ПланыОбменаБСП() Цикл
		
		Если ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация() Тогда
			
			Если ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных("ПланОбмена." + ИмяПланаОбмена,
					ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных()) Тогда
				
				Результат.Добавить(ИмяПланаОбмена);
				
			КонецЕсли;
			
		Иначе
			
			Результат.Добавить(ИмяПланаОбмена);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
//
Функция ОбщиеДанныеУзлов(Знач УзелИнформационнойБазы) Экспорт
	
	Если ТипЗнч(УзелИнформационнойБазы) <> Тип("Строка") Тогда
		
		ИмяПланаОбмена = ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
		
	Иначе
		
		ИмяПланаОбмена = УзелИнформационнойБазы;
		
	КонецЕсли;
	
	Результат = "";
	
	Попытка
		Результат = ПланыОбмена[ИмяПланаОбмена].ОбщиеДанныеУзлов();
		Результат = СтрЗаменить(Результат, " ", "");
	Исключение
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

//	LNK 31.08.2016 14:42:15
Функция ПолучитьДанныеУзла(Знач УзелИнформационнойБазы = Неопределено)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если УзелИнформационнойБазы = Неопределено Тогда

		УзелИнформационнойБазы = ПолучитьЭтотУзелПоМагазинуИлиПоРабочемуМесту();

	КонецЕсли;

	Если ТипЗнч(УзелИнформационнойБазы) = Тип("ПланОбменаСсылка.ПоМагазину")
	ИЛИ  ТипЗнч(УзелИнформационнойБазы) = Тип("ПланОбменаСсылка.ПоМагазинуКонвертация")
	ИЛИ  ТипЗнч(УзелИнформационнойБазы) = Тип("ПланОбменаСсылка.ПоРабочемуМесту")
	ИЛИ  ТипЗнч(УзелИнформационнойБазы) = Тип("ПланОбменаСсылка.ПоУстройствамАнтошка")
	ИЛИ  ТипЗнч(УзелИнформационнойБазы) = Тип("ПланОбменаСсылка.Полный") Тогда

		ДанныеУзла = ПланыОбмена[ПолучитьИмяПланаОбмена(УзелИнформационнойБазы)].ПолучитьДанныеУзла(УзелИнформационнойБазы);

	ИначеЕсли НЕ УзелИнформационнойБазы = Неопределено Тогда

		ДанныеУзла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УзелИнформационнойБазы, "Код, Наименование");

	Иначе

		ДанныеУзла = Новый Структура("Код, Наименование", "", "");

	КонецЕсли;

//	Некторые обязательные ключи ...
	ОбязательныеКлючи = Новый Структура;
	ОбязательныеКлючи.Вставить("Магазин", Справочники.Магазины.ПустаяСсылка());
	ОбязательныеКлючи.Вставить("НомерМагазина", 0);
	ОбязательныеКлючи.Вставить("ЭлементСтруктуры", Справочники.СтруктураУзлов.ПустаяСсылка());
	ОбязательныеКлючи.Вставить("ВидУзла", Перечисления.ВидыУзлов.ПустаяСсылка());
	ОбязательныеКлючи.Вставить("Узел", ПланыОбмена.ПоМагазину.ПустаяСсылка());

	Для каждого КлючЗначение Из ОбязательныеКлючи Цикл

		Если НЕ ДанныеУзла.Свойство(КлючЗначение.Ключ) Тогда

			ДанныеУзла.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);

		КонецЕсли;

	КонецЦикла;

	Возврат ДанныеУзла;

КонецФункции

//	LNK 20.04.2017 15:38:29
Функция ПолучитьТекущийЭлементСтруктурыУзлов(Знач УзелИнформационнойБазы = Неопределено)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ЭлементУзел = Справочники.СтруктураУзлов.ПустаяСсылка();
	ДанныеУзла  = ПолучитьДанныеУзла(?(УзелИнформационнойБазы = Неопределено
									, ПолучитьЭтотУзелПоМагазинуИлиПоРабочемуМесту()
									, УзелИнформационнойБазы));

	Если НЕ ПустаяСтрока(ДанныеУзла.Код) Тогда

		ЭлементУзел = ДанныеУзла.ЭлементСтруктуры;

	КонецЕсли;

	Возврат ЭлементУзел;

КонецФункции // ПолучитьТекущийЭлементСтруктурыУзлов()

//	LNK 13.09.2016 16:16:29
Функция ПолучитьСписокУзловДляМагазина(Магазин)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка КАК Узел
	|ИЗ
	|	ПланОбмена.ПоМагазину КАК ТаблицаУзлы
	|ГДЕ
	|	ТаблицаУзлы.Магазин = &Магазин
	|	И НЕ ТаблицаУзлы.ПометкаУдаления
	|	И НЕ ТаблицаУзлы.ЭтотУзел
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка
	|ИЗ
	|	ПланОбмена.ПоМагазину.Магазины КАК ТаблицаУзлы
	|ГДЕ
	|	ТаблицаУзлы.Магазин = &Магазин
	|	И НЕ ТаблицаУзлы.Ссылка.ПометкаУдаления
	|	И НЕ ТаблицаУзлы.Ссылка.ЭтотУзел
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка
	|ИЗ
	|	ПланОбмена.ПоМагазинуКонвертация КАК ТаблицаУзлы
	|ГДЕ
	|	ТаблицаУзлы.Магазин = &Магазин
	|	И НЕ ТаблицаУзлы.ПометкаУдаления
	|	И НЕ ТаблицаУзлы.ЭтотУзел
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка
	|ИЗ
	|	ПланОбмена.ПоМагазинуКонвертация.Магазины КАК ТаблицаУзлы
	|ГДЕ
	|	ТаблицаУзлы.Магазин = &Магазин
	|	И НЕ ТаблицаУзлы.Ссылка.ПометкаУдаления
	|	И НЕ ТаблицаУзлы.Ссылка.ЭтотУзел
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка
	|ИЗ
	|	ПланОбмена.ПоРабочемуМесту КАК ТаблицаУзлы
	|ГДЕ
	|	ТаблицаУзлы.Магазин = &Магазин
	|	И НЕ ТаблицаУзлы.ПометкаУдаления
	|	И НЕ ТаблицаУзлы.ЭтотУзел"
	);
	Запрос.УстановитьПараметр("Магазин", Магазин);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Узел");

КонецФункции // ПолучитьСписокУзловДляМагазина()

//	LNK 29.03.2017 14:06:39
Функция ОпределитьПолучателейПоВидуЦены(ВидЦены)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаМагазины.Ссылка КАК Магазин
	|ПОМЕСТИТЬ Магазины
	|ИЗ
	|	Справочник.Магазины КАК ТаблицаМагазины
	|ГДЕ
	|	ТаблицаМагазины.ПравилоЦенообразования.ВидЦен = &ВидЦены
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаМагазины.Ссылка
	|ИЗ
	|	Справочник.Магазины КАК ТаблицаМагазины
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ТаблицаПравила
	|		ПО ТаблицаМагазины.ПравилоЦенообразования = ТаблицаПравила.Ссылка
	|ГДЕ
	|	ТаблицаПравила.ВидЦен = &ВидЦены
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаМагазины.Ссылка
	|ИЗ
	|	Справочник.Магазины КАК ТаблицаМагазины
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних(&ТекущаяДата, ) КАК УчетнаяПолитика
	|		ПО (УчетнаяПолитика.ВидЦенИнтернет = &ВидЦены)
	|ГДЕ
	|	НЕ ТаблицаМагазины.СкладУправляющейСистемы
	|	И НЕ ТаблицаМагазины.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка КАК Узел,
	|	ТаблицаУзлы.Код КАК КлючПорядка
	|ИЗ
	|	ПланОбмена.ПоМагазину КАК ТаблицаУзлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Магазины КАК ТаблицаМагазины
	|		ПО ТаблицаУзлы.Магазин = ТаблицаМагазины.Магазин
	|ГДЕ
	|	НЕ ТаблицаУзлы.ЭтотУзел
	|	И НЕ ТаблицаУзлы.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка,
	|	ТаблицаУзлы.Ссылка.Код
	|ИЗ
	|	ПланОбмена.ПоМагазину.Магазины КАК ТаблицаУзлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Магазины КАК ТаблицаМагазины
	|		ПО ТаблицаУзлы.Магазин = ТаблицаМагазины.Магазин
	|ГДЕ
	|	НЕ ТаблицаУзлы.Ссылка.ЭтотУзел
	|	И НЕ ТаблицаУзлы.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка,
	|	ТаблицаУзлы.Код
	|ИЗ
	|	ПланОбмена.ПоРабочемуМесту КАК ТаблицаУзлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Магазины КАК ТаблицаМагазины
	|		ПО ТаблицаУзлы.Магазин = ТаблицаМагазины.Магазин
	|ГДЕ
	|	НЕ ТаблицаУзлы.ЭтотУзел
	|	И НЕ ТаблицаУзлы.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка,
	|	ТаблицаУзлы.Код
	|ИЗ
	|	ПланОбмена.ПоМагазину КАК ТаблицаУзлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних КАК УчетнаяПолитика
	|		ПО (УчетнаяПолитика.ВидЦенИнтернет = &ВидЦены)
	|ГДЕ
	|	ТаблицаУзлы.ВидУзла = ЗНАЧЕНИЕ(Перечисление.ВидыУзлов.ПустойУзел)
	|	И НЕ ТаблицаУзлы.ЭтотУзел
	|	И НЕ ТаблицаУзлы.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка"
	);
	Запрос.УстановитьПараметр("ВидЦены"    , ВидЦены);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());

	УзлыВыборка = Запрос.Выполнить().Выбрать();

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Узел");

КонецФункции // ОпределитьПолучателейПоВидуЦены()

//	LNK 17.07.2017 09:52:17
Функция ПолучитьКаталогФайловОбновления()	Экспорт

	ЭлементУзел = ПолучитьТекущийЭлементСтруктурыУзлов();

	Если НЕ ЭлементУзел.Пустая() Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СтруктураУзлов.КаталогФайловОбновления
		|ИЗ
		|	Справочник.СтруктураУзлов КАК СтруктураУзлов
		|ГДЕ
		|	СтруктураУзлов.Ссылка = &ЭлементУзел"
		);
		Запрос.УстановитьПараметр("ЭлементУзел", ЭлементУзел);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		КаталогФайловОбновления = Выборка.КаталогФайловОбновления;

	Иначе

		КаталогФайловОбновления = "";

	КонецЕсли;
	
	Возврат КаталогФайловОбновления;

КонецФункции // ПолучитьКаталогФайловОбновления()

// Для внутреннего использования
//
Функция ТабличныеЧастиПланаОбмена(Знач ИмяПланаОбмена) Экспорт
	
	ТаблицыОбщие             = Новый Массив;
	ТаблицыЭтойБазы          = Новый Массив;
	ТаблицыКорреспондента    = Новый Массив;
	ВсеТаблицыЭтойБазы       = Новый Массив;
	ВсеТаблицыКорреспондента = Новый Массив;
	
	ОбщиеДанныеУзлов = "";
	
	Попытка
		ОбщиеДанныеУзлов = ПланыОбмена[ИмяПланаОбмена].ОбщиеДанныеУзлов();
		ОбщиеДанныеУзлов = СтрЗаменить(ОбщиеДанныеУзлов, " ", "");
	Исключение
		ОбщиеДанныеУзлов = "";
	КонецПопытки;
	
	ТабличныеЧасти = ОбменДаннымиСобытия.ТабличныеЧастиОбъекта(Метаданные.ПланыОбмена[ИмяПланаОбмена]);
	
	Если Не ПустаяСтрока(ОбщиеДанныеУзлов) Тогда
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			
			Если Найти(ОбщиеДанныеУзлов, ТабличнаяЧасть) <> 0 Тогда
				
				ТаблицыОбщие.Добавить(ТабличнаяЧасть);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НастройкиЭтойБазы = ПланыОбмена[ИмяПланаОбмена].НастройкаОтборовНаУзле();
	
	НастройкиЭтойБазы = ОбменДаннымиСобытия.КлючиСтруктурыВСтроку(НастройкиЭтойБазы);
	
	Если ПустаяСтрока(ОбщиеДанныеУзлов) Тогда
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			
			Если Найти(НастройкиЭтойБазы, ТабличнаяЧасть) <> 0 Тогда
				
				ТаблицыЭтойБазы.Добавить(ТабличнаяЧасть);
				
				ВсеТаблицыЭтойБазы.Добавить(ТабличнаяЧасть);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			
			Если Найти(НастройкиЭтойБазы, ТабличнаяЧасть) <> 0 Тогда
				
				ВсеТаблицыЭтойБазы.Добавить(ТабличнаяЧасть);
				
				Если Найти(ОбщиеДанныеУзлов, ТабличнаяЧасть) = 0 Тогда
					
					ТаблицыЭтойБазы.Добавить(ТабличнаяЧасть);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НастройкиКорреспондента = ПланыОбмена[ИмяПланаОбмена].НастройкаОтборовНаУзлеБазыКорреспондента();
	
	Если ПустаяСтрока(ОбщиеДанныеУзлов) Тогда
		
		Для Каждого НастройкаКорреспондента Из НастройкиКорреспондента Цикл
			
			Если ТипЗнч(НастройкаКорреспондента.Значение) = Тип("Структура") Тогда
				
				ТаблицыКорреспондента.Добавить(ТабличнаяЧасть);
				
				ВсеТаблицыКорреспондента.Добавить(ТабличнаяЧасть);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого НастройкаКорреспондента Из НастройкиКорреспондента Цикл
			
			Если ТипЗнч(НастройкаКорреспондента.Значение) = Тип("Структура") Тогда
				
				ВсеТаблицыКорреспондента.Добавить(ТабличнаяЧасть);
				
				Если Найти(ОбщиеДанныеУзлов, НастройкаКорреспондента.Ключ) = 0 Тогда
					
					ТаблицыКорреспондента.Добавить(ТабличнаяЧасть);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицыОбщие",             ТаблицыОбщие);
	Результат.Вставить("ТаблицыЭтойБазы",          ТаблицыЭтойБазы);
	Результат.Вставить("ТаблицыКорреспондента",    ТаблицыКорреспондента);
	Результат.Вставить("ВсеТаблицыЭтойБазы",       ВсеТаблицыЭтойБазы);
	Результат.Вставить("ВсеТаблицыКорреспондента", ВсеТаблицыКорреспондента);
	
	Возврат Результат;
КонецФункции

// Получает менеджер плана обмена по имени плана обмена
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
//
// Возвращаемое значение:
//  ПланОбменаМенеджер - менеджер плана обмена
//
Функция ПолучитьМенеджерПланаОбменаПоИмени(ИмяПланаОбмена) Экспорт
	
	Возврат ПланыОбмена[ИмяПланаОбмена];
	
КонецФункции

// Получает менеджер плана обмена по имени объекта метаданных плана обмена
//
// Параметры:
//  УзелПланаОбмена – ПланОбменаСсылка – узел плана обмена, для которого требуется получить менеджер
// 
Функция ПолучитьМенеджерПланаОбмена(УзелПланаОбмена) Экспорт
	
	Возврат ПолучитьМенеджерПланаОбменаПоИмени(ПолучитьИмяПланаОбмена(УзелПланаОбмена));
	
КонецФункции

// Функция-обертка одноименной функции
//
Функция ПолучитьДеревоМетаданныхКонфигурации(Отбор) Экспорт
	
	Для Каждого ЭлементОтбора Из Отбор Цикл
		
		Отбор[ЭлементОтбора.Ключ] = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭлементОтбора.Значение);
		
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ПолучитьДеревоМетаданныхКонфигурации(Отбор);
	
КонецФункции

//	LNK 27.06.2018 13:37:56
Функция ПолучитьСписокМетаданныхКонфигурации(ВернутьПолноеИмя = Истина)	Экспорт

	СписокМетаданных = Новый Массив;

	ДеревоМетаданных = ОбменДаннымиПовтИсп.ПолучитьДеревоМетаданныхКонфигурации(Новый Структура);

	Для каждого КлассМетаданных Из ДеревоМетаданных.Строки Цикл

		Для каждого ОбъектМетаданных Из КлассМетаданных.Строки Цикл

			Если ВернутьПолноеИмя = Истина Тогда

					СписокМетаданных.Добавить(ОбъектМетаданных.ПолноеИмя);

			Иначе	СписокМетаданных.Добавить(Метаданные.НайтиПоПолномуИмени(ОбъектМетаданных.ПолноеИмя));

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Возврат СписокМетаданных;

КонецФункции // ПолучитьСписокМетаданныхКонфигурации()

// Функция-обертка одноименной функции модуля ОбменДаннымиСервер
//
Функция ОбработкаДляЗагрузкиДанных(Отказ, Знач УзелИнформационнойБазы, Знач ИмяФайлаСообщенияОбмена) Экспорт
	
	Возврат ОбменДаннымиСервер.ОбработкаДляЗагрузкиДанных(Отказ, УзелИнформационнойБазы, ИмяФайлаСообщенияОбмена);
	
КонецФункции

// Определяет наличие макета у плана обмена
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена, как оно задано в конфигураторе
//  ИмяМакета – Строка – имя макета, наличие которого следует определить
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – план обмена содержит заданный макет; Ложь – нет.
//
Функция ЕстьМакетПланаОбмена(Знач ИмяПланаОбмена, Знач ИмяМакета) Экспорт
	
	Возврат Метаданные.ПланыОбмена[ИмяПланаОбмена].Макеты.Найти(ИмяМакета) <> Неопределено;
	
КонецФункции

// Функция-обертка одноименной функции модуля ОбменДаннымиСобытия
//
Функция МассивУзловПоЗначениямСвойств(ЗначенияСвойств, ТекстЗапроса, ИмяПланаОбмена, ИмяРеквизитаФлага) Экспорт
	
	#Если ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		
		Возврат ОбменДаннымиВызовСервера.МассивУзловПоЗначениямСвойств(ЗначенияСвойств, ТекстЗапроса, ИмяПланаОбмена, ИмяРеквизитаФлага);
		
	#Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		Возврат ОбменДаннымиСобытия.МассивУзловПоЗначениямСвойств(ЗначенияСвойств, ТекстЗапроса, ИмяПланаОбмена, ИмяРеквизитаФлага);
		
	#КонецЕсли
	
КонецФункции

// Возвращает коллекцию транспортов сообщений обмена, которые могут быть использованы для заданного узла плана обмена
//
// Параметры:
//  УзелИнформационнойБазы – ПланОбменаСсылка – узел плана обмена, для которого требуется получить значение функции
// 
//  Возвращаемое значение:
//  Тип: Массив. Используемые транспорты сообщений обмена для узла
//
Функция ИспользуемыеТранспортыСообщенийОбмена(УзелИнформационнойБазы) Экспорт
	
	Результат = ПланыОбмена[ПолучитьИмяПланаОбмена(УзелИнформационнойБазы)].ИспользуемыеТранспортыСообщенийОбмена();
	
	// Для базовых версий конфигураций обмен через COM-соединение и Веб-сервис не поддерживаем
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Результат, Перечисления.ВидыТранспортаСообщенийОбмена.COM);
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Результат, Перечисления.ВидыТранспортаСообщенийОбмена.WS);
		
	КонецЕсли;
		
	// Для обмена в РИБ обмен через COM-соединение не поддерживаем
	Если ЭтоУзелРаспределеннойИнформационнойБазы(УзелИнформационнойБазы) Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Результат, Перечисления.ВидыТранспортаСообщенийОбмена.COM);
		
	КонецЕсли;
	
	// Для Стандартного обмена (без использования правил конвертации) обмен через COM-соединение не поддерживаем
	Если ЭтоУзелСтандартногоОбменаДанными(УзелИнформационнойБазы) Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Результат, Перечисления.ВидыТранспортаСообщенийОбмена.COM);
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Устанавливает внешнее соединение с информационной базой и возвращает указатель на это соединение
// 
// Параметры:
//  УзелИнформационнойБазы (обязательный) - ПланОбменаСсылка. Узел плана обмена, для которого необходимо получить внешнее соединение
//  СтрокаСообщенияОбОшибке (необязательный) – Строка – если в процессе установки внешнего соединения возникает ошибка,
// то подробное описание ошибки помещается в этот параметр.
//
// Возвращаемое значение:
//  Тип: COM-объект, Неопределенно.
//  в случае успешной установки внешнего соединения возвращается указатель на COM-объект соединения;
//  в случае ошибки возвращается Неопределенно.
//
Функция ПолучитьВнешнееСоединениеДляУзлаИнформационнойБазы(УзелИнформационнойБазы, СтрокаСообщенияОбОшибке = "") Экспорт
    
    Результат = ВнешнееСоединениеДляУзлаИнформационнойБазы(УзелИнформационнойБазы);
    
    СтрокаСообщенияОбОшибке = Результат.ПодробноеОписаниеОшибки;
	Возврат Результат.Соединение;
	
КонецФункции

// Устанавливает внешнее соединение с информационной базой и возвращает указатель на это соединение
// 
// Параметры:
//  УзелИнформационнойБазы (обязательный) - ПланОбменаСсылка. Узел плана обмена, для которого необходимо получить внешнее соединение
//  СтрокаСообщенияОбОшибке (необязательный) – Строка – если в процессе установки внешнего соединения возникает ошибка,
// то подробное описание ошибки помещается в этот параметр.
//
// Возвращаемое значение:
//  Тип: COM-объект, Неопределенно.
//  в случае успешной установки внешнего соединения возвращается указатель на COM-объект соединения;
//  в случае ошибки возвращается Неопределенно.
//
Функция ВнешнееСоединениеДляУзлаИнформационнойБазы(УзелИнформационнойБазы) Экспорт
	
	Возврат ОбменДаннымиСервер.УстановитьВнешнееСоединениеСБазой(
        РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспорта(
            УзелИнформационнойБазы, Перечисления.ВидыТранспортаСообщенийОбмена.COM
        )
    );
	
КонецФункции

// Определяет возможность передачи файлов между двумя базами через локальную сеть
//
// Параметры:
//  УзелИнформационнойБазы       – ПланОбменаСсылка – узел плана обмена, для которого выполняется получение сообщения обмена
//  Пароль                       - Строка - Пароль для WS соединения
//
Функция ОбменВыполняетсяВОднойЛокальнойСети(Знач УзелИнформационнойБазы, Знач Пароль = "") Экспорт
	
	Возврат ОбменДаннымиСервер.ОбменВыполняетсяВОднойЛокальнойСети(УзелИнформационнойБазы, Пароль);
	
КонецФункции

// Только для внутреннего использования
//
Функция ПолучитьЭлементыИерархическогоСправочникаИерархияГруппИЭлементов(ПолноеИмяТаблицы) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 2000
	|	Ссылка,
	|	Представление,
	|	ЭтоГруппа,
	|	ВЫБОР
	|		КОГДА    ЭтоГруппа И Не ПометкаУдаления ТОГДА 0
	|		КОГДА    ЭтоГруппа И    ПометкаУдаления ТОГДА 1
	|		КОГДА Не ЭтоГруппа И Не ПометкаУдаления ТОГДА 2
	|		КОГДА Не ЭтоГруппа И    ПометкаУдаления ТОГДА 3
	|	КОНЕЦ КАК ИндексКартинки
	|ИЗ
	|	[ПолноеИмяТаблицы]
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоГруппа ИЕРАРХИЯ,
	|	Наименование
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяТаблицы]", ПолноеИмяТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Таблица = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Таблица.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	ЗаполнитьЗначенияПолейДереваОбъектов(Таблица.Строки);
	
	Таблица.Колонки.Удалить("Ссылка");
	Таблица.Колонки.Удалить("ЭтоГруппа");
	
	Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(Таблица);
КонецФункции

// Только для внутреннего использования
//
Функция ПолучитьЭлементыИерархическогоСправочникаИерархияЭлементов(ПолноеИмяТаблицы) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 2000
	|	Ссылка,
	|	Представление,
	|	ЛОЖЬ КАК ЭтоГруппа,
	|	ВЫБОР
	|		КОГДА ПометкаУдаления ТОГДА 3
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ИндексКартинки
	|ИЗ
	|	[ПолноеИмяТаблицы]
	|УПОРЯДОЧИТЬ ПО
	|	Наименование ИЕРАРХИЯ
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяТаблицы]", ПолноеИмяТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Таблица = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Таблица.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	ЗаполнитьЗначенияПолейДереваОбъектов(Таблица.Строки);
	
	Таблица.Колонки.Удалить("Ссылка");
	Таблица.Колонки.Удалить("ЭтоГруппа");
	
	Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(Таблица);
КонецФункции

// Только для внутреннего использования
//
Функция ПолучитьЭлементыНеиерархическогоСправочника(ПолноеИмяТаблицы) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 2000
	|	Ссылка,
	|	Представление,
	|	ЛОЖЬ КАК ЭтоГруппа,
	|	ВЫБОР
	|		КОГДА ПометкаУдаления ТОГДА 3
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ИндексКартинки
	|ИЗ
	|	[ПолноеИмяТаблицы]
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяТаблицы]", ПолноеИмяТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Таблица = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Таблица.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	ЗаполнитьЗначенияПолейДереваОбъектов(Таблица.Строки);
	
	Таблица.Колонки.Удалить("Ссылка");
	Таблица.Колонки.Удалить("ЭтоГруппа");
	
	Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(Таблица);
КонецФункции

// Только для внутреннего использования
//
Процедура ЗаполнитьЗначенияПолейДереваОбъектов(Дерево)
	
	Для Каждого СтрокаДерева Из Дерево Цикл
		
		СтрокаДерева.Идентификатор = ЗначениеВСтрокуВнутр(СтрокаДерева.Ссылка);
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			ЗаполнитьЗначенияПолейДереваОбъектов(СтрокаДерева.Строки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает признак доступности использования плана обмена.
// Признак вычисляется по составу всех функциональных опций конфигурации.
// Если план обмена не входит в состав ни одной функциональной опции, то возвращается Истина.
// Если план обмена входит в состав функциональных опций, то возвращается Истина,если хотя бы одна функциональная опция включена.
// В противном случае функция возвращает Ложь.
//
// Параметры:
//  ИмяПланаОбмена – Строка. Имя плана обмена, для которого необходимо вычислить признак использования.
//
// Возвращаемое значение. Тип: Булево.
//  Истина – доступно использование плана обмена. Ложь – использование не доступно.
//
Функция ДоступноИспользованиеПланаОбмена(Знач ИмяПланаОбмена) Экспорт
	
	ОбъектВходитВСоставФункциональныхОпций = Ложь;
	
	Для Каждого ФункциональнаяОпция Из Метаданные.ФункциональныеОпции Цикл
		
		Если ФункциональнаяОпция.Состав.Содержит(Метаданные.ПланыОбмена[ИмяПланаОбмена]) Тогда
			
			ОбъектВходитВСоставФункциональныхОпций = Истина;
			
			Если ПолучитьФункциональнуюОпцию(ФункциональнаяОпция.Имя) = Истина Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОбъектВходитВСоставФункциональныхОпций Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Возвращает массив номеров версий, поддерживаемых интерфейсом корреспондента для подсистемы ОбменДанными.
// 
// Параметры:
// Корреспондент – Структура, ПланОбменаСсылка. Узел плана обмена, который соответствует информационной базе-корреспонденту.
//
// Возвращаемое значение:
// Массив номеров версий, поддерживаемых интерфейсом корреспондента.
//
Функция ВерсииКорреспондента(Знач Корреспондент) Экспорт
	
	Если ТипЗнч(Корреспондент) = Тип("Структура") Тогда
		СтруктураНастроек = Корреспондент;
	Иначе
		СтруктураНастроек = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспортаWS(Корреспондент);
	КонецЕсли;
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("URL",      СтруктураНастроек.WSURLВебСервиса);
	ПараметрыПодключения.Вставить("UserName", СтруктураНастроек.WSИмяПользователя);
	ПараметрыПодключения.Вставить("Password", СтруктураНастроек.WSПароль);
	
	Возврат ОбщегоНазначения.ПолучитьВерсииИнтерфейса(ПараметрыПодключения, "ОбменДанными");
КонецФункции

// Возвращает массив всех ссылочных типов, определенных в конфигурации
//
Функция ВсеСсылочныеТипыКонфигурации() Экспорт
	
	Результат = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Справочники.ТипВсеСсылки().Типы());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Документы.ТипВсеСсылки().Типы());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, БизнесПроцессы.ТипВсеСсылки().Типы());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ПланыВидовХарактеристик.ТипВсеСсылки().Типы());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ПланыСчетов.ТипВсеСсылки().Типы());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ПланыВидовРасчета.ТипВсеСсылки().Типы());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Задачи.ТипВсеСсылки().Типы());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ПланыОбмена.ТипВсеСсылки().Типы());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Перечисления.ТипВсеСсылки().Типы());
	
	Возврат Результат;
КонецФункции

Функция ПланыОбменаАвтономнойРаботы()
	
	// План обмена для организации автономной работы в модели сервиса должен:
	// - быть разделенным
	// - быть планом обмена распределенной ИБ
	// - использоваться для обмена в модели сервиса (ПланОбменаИспользуетсяВМоделиСервиса = Истина)
	
	Результат = Новый Массив;
	
	Для Каждого ПланОбмена Из Метаданные.ПланыОбмена Цикл
		
		Если ОбменДаннымиСервер.ЭтоРазделенныйПланОбменаБСП(ПланОбмена.Имя)
			И ПланОбмена.РаспределеннаяИнформационнаяБаза
			И ПланОбменаИспользуетсяВМоделиСервиса(ПланОбмена.Имя) Тогда
			
			Результат.Добавить(ПланОбмена.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация структуры настроек обмена данными

// Выполняет инициализацию подсистемы обмена данными для выполнения процесса обмена
//
// Параметры:
// 
// Возвращаемое значение:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
//
Функция ПолучитьСтруктуруНастроекОбменаДляУзлаИнформационнойБазы(
	УзелИнформационнойБазы,
	ДействиеПриОбмене,
	ВидТранспортаСообщенийОбмена,
	ИспользоватьНастройкиТранспорта = Истина
	) Экспорт
	
	Возврат ОбменДаннымиСервер.ПолучитьСтруктуруНастроекОбменаДляУзлаИнформационнойБазы(
		УзелИнформационнойБазы,
		ДействиеПриОбмене,
		ВидТранспортаСообщенийОбмена,
		ИспользоватьНастройкиТранспорта
	);
КонецФункции

// Выполняет инициализацию подсистемы обмена данными для выполнения процесса обмена
//
// Параметры:
// 
// Возвращаемое значение:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
//
Функция ПолучитьСтруктуруНастроекОбмена(НастройкаВыполненияОбмена, НомерСтроки) Экспорт
	
	Возврат ОбменДаннымиСервер.ПолучитьСтруктуруНастроекОбмена(НастройкаВыполненияОбмена, НомерСтроки);
	
КонецФункции

// Получает структуру настроек транспорта для выполнения обмена данными
//
Функция ПолучитьСтруктуруНастроекТранспорта(УзелИнформационнойБазы, ВидТранспортаСообщенийОбмена) Экспорт
	
	Возврат ОбменДаннымиСервер.ПолучитьСтруктуруНастроекТранспорта(УзелИнформационнойБазы, ВидТранспортаСообщенийОбмена);
	
КонецФункции

// Получает список макетов типовых правил для обмена данными из конфигурации для заданного плана обмена;
// список заполняется именами и синонимами макетов правил
// 
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
// 
// Возвращаемое значение:
//  СписокПравил - список значений - список макетов типовых правил для обмена данными
//
Функция ПолучитьСписокТиповыхПравил(ИмяПланаОбмена, ЛитералИмениМакета)
	
	СписокПравил = Новый СписокЗначений;
	
	Если ПустаяСтрока(ИмяПланаОбмена) Тогда
		Возврат СписокПравил;
	КонецЕсли;
	
	Для Каждого Макет ИЗ Метаданные.ПланыОбмена[ИмяПланаОбмена].Макеты Цикл
		
		Если Найти(Макет.Имя, ЛитералИмениМакета) <> 0 Тогда
			
			СписокПравил.Добавить(Макет.Имя, Макет.Синоним);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокПравил;
КонецФункции

//  Возвращает таблицу состава узла (только ссылочный тип)
//
//  Параметры:
//      УзелОбмена:    ссылка на анализируемый узел обмена
//      Периодические: флаг того, что надо включать в результат объекты с датой (документы и т.п.)
//      Справочные:    флаг того, что надо включать в результат  нормативно-справочные объекты
//
//  Колонки результата:
//      ПолноеИмяМетаданных: полное имя метаданных (имя таблицы для запроса)
//      ПредставлениеСписка: представление списка для таблицы
//      Представление:       представление объекта для таблицы
//      ИндексКартинки:      индекс картинки согласно "БиблиотекаКартинок.КоллекцияОбъектыМетаданных"
//      Тип:                 соответствующий тип
//      ВыборПериода:        флаг того, что к объекту можно применить выбор по периода
//
Функция СсылочныеТаблицыСоставаУзла(УзелОбмена, Периодические = Истина, Справочные = Истина) Экспорт

    ТаблицаРезультата = Новый ТаблицаЗначений;

    Для Каждого КлючЗначение Из (Новый Структура("ПолноеИмяМетаданных, Представление, ПредставлениеСписка, ИндексКартинки, Вид, Тип, ВыборПериода")) Цикл

        ТаблицаРезультата.Колонки.Добавить(КлючЗначение.Ключ);

    КонецЦикла;

    Для Каждого КлючЗначение Из (Новый Структура("ПолноеИмяМетаданных, Представление, ПредставлениеСписка, Вид, Тип")) Цикл

        ТаблицаРезультата.Индексы.Добавить(КлючЗначение.Ключ);

    КонецЦикла;

    Если УзелОбмена = Неопределено Тогда

        Возврат ТаблицаРезультата;

    КонецЕсли;
        
//	Всё регистрируемое на узле
    Для Каждого ЭлементСостава Из УзелОбмена.Метаданные().Состав Цикл

        Мета = ЭлементСостава.Метаданные;
        Описание = ОписаниеОбъектаМетаданных(Мета);

        Если Описание.ИндексКартинки >= 0 Тогда

		//	.. наш ссылочный тип
            Если НЕ Периодические И Описание.Периодический Тогда 

                Продолжить;

            ИначеЕсли НЕ Справочные И Описание.Справочный Тогда 

                Продолжить;

            КонецЕсли;

            СтрокаТаблицы = ТаблицаРезультата.Добавить();
            ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Описание);

            СтрокаТаблицы.ВыборПериода        = Описание.Периодический;
            СтрокаТаблицы.ПолноеИмяМетаданных = Мета.ПолноеИмя();
            СтрокаТаблицы.ПредставлениеСписка = ОбменДаннымиСервер.ПредставлениеСпискаОбъектов(Мета);
            СтрокаТаблицы.Представление       = ОбменДаннымиСервер.ПредставлениеОбъекта(Мета);

        КонецЕсли;            

    КонецЦикла;

    ТаблицаРезультата.Сортировать("ПредставлениеСписка");

    Возврат ТаблицаРезультата;

КонецФункции

Функция ОписаниеОбъектаМетаданных(Мета)
    Рез = Новый Структура("ИндексКартинки, Периодический, Справочный, Тип, Вид"
		, -1, Ложь, Ложь,, ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(Мета));
    
    Если Метаданные.Справочники.Содержит(Мета) Тогда
        Рез.ИндексКартинки = 3;
        Рез.Справочный = Истина;
        Рез.Тип = Тип("СправочникСсылка." + Мета.Имя);
        
    ИначеЕсли Метаданные.Документы.Содержит(Мета) Тогда
        Рез.ИндексКартинки = 7;
        Рез.Периодический = Истина;
        Рез.Тип = Тип("ДокументСсылка." + Мета.Имя);
        
    ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(Мета) Тогда
        Рез.ИндексКартинки = 9;
        Рез.Справочный = Истина;
        Рез.Тип = Тип("ПланВидовХарактеристикСсылка." + Мета.Имя);
        
    ИначеЕсли Метаданные.ПланыСчетов.Содержит(Мета) Тогда
        Рез.ИндексКартинки = 11;
        Рез.Справочный = Истина;
        Рез.Тип = Тип("ПланСчетовСсылка." + Мета.Имя);
        
    ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(Мета) Тогда
        Рез.ИндексКартинки = 13;
        Рез.Справочный = Истина;
        Рез.Тип = Тип("ПланВидовРасчетаСсылка." + Мета.Имя);
        
    ИначеЕсли Метаданные.БизнесПроцессы.Содержит(Мета) Тогда
        Рез.ИндексКартинки = 23;
        Рез.Периодический = Истина;
        Рез.Тип = Тип("БизнесПроцессСсылка." + Мета.Имя);
        
    ИначеЕсли Метаданные.Задачи.Содержит(Мета) Тогда
        Рез.ИндексКартинки = 25;
        Рез.Периодический  = Истина;
        Рез.Тип = Тип("ЗадачаСсылка." + Мета.Имя);
        
    КонецЕсли;
    
    Возврат Рез;
КонецФункции    

//	LNK 24.08.2016 09:22:20
Функция ПроверитьСертификатИнформационнойБазы(ОбязательнаяПроверка = Ложь)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	СертификатСоответствует = -1;

	Если ОбязательнаяПроверка = Истина ИЛИ КонтекстПриложения.ЭтоКлиентскоеСоединение() Тогда

		СертификатСоответствует = Константы.СертификатИнформационнойБазы.СоздатьМенеджерЗначения().ПроверитьСертификатИнформационнойБазы(Ложь);

	КонецЕсли;

	Возврат СертификатСоответствует;

КонецФункции // ПроверитьСертификатИнформационнойБазы()

//	LNK 04.01.2017 15:13:48
Функция РазрешенаПередачаУдаленияОбъекта()	Экспорт

	СоставИсключений = Новый Соответствие;

	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		СоставИсключений.Вставить(Метаданные.Справочники.ВариантыОтчетов, Истина);
		СоставИсключений.Вставить(Метаданные.Справочники.ПредопределенныеВариантыОтчетов, Истина);
		СоставИсключений.Вставить(Метаданные.Справочники.ИдентификаторыОбъектовМетаданных, Истина);
		СоставИсключений.Вставить(Метаданные.Справочники.ДополнительныеОтчетыИОбработки, Истина);

	КонецЕсли;

	Возврат СоставИсключений; 

КонецФункции // РазрешенаПередачаУдаленияОбъекта()

//	LNK 03.04.2017 13:01:40
Функция ТипыИсключенийЗапрещенияЗагрузки()	Экспорт

	ТипыИсключений = Новый Соответствие;

	ТипыИсключений.Вставить(Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры"), Истина);
	ТипыИсключений.Вставить(Тип("РегистрСведенийЗапись.ЦеныНоменклатуры"), Истина);
	ТипыИсключений.Вставить(Тип("РегистрНакопленияНаборЗаписей.Посетители"), Истина);
	ТипыИсключений.Вставить(Тип("РегистрНакопленияЗапись.Посетители"), Истина);

	ТипыИсключений.Вставить(Тип("ДокументОбъект.УстановкаЦенНоменклатуры"), Истина);
	ТипыИсключений.Вставить(Тип("ДокументСсылка.УстановкаЦенНоменклатуры"), Истина);
	ТипыИсключений.Вставить(Тип("ДокументОбъект.РегистрацияПодсчетаПосетителей"), Истина);
	ТипыИсключений.Вставить(Тип("ДокументСсылка.РегистрацияПодсчетаПосетителей"), Истина);

	Возврат ТипыИсключений;

КонецФункции // ТипыИсключенийЗапрещенияЗагрузки()

//	LNK 01.09.2017 09:42:51
Функция ИспользоватьПоМагазинуКонвертация()	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаУзлы.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.ПоМагазинуКонвертация КАК ТаблицаУзлы
	|ГДЕ
	|	НЕ ТаблицаУзлы.ЭтотУзел
	|	И НЕ ТаблицаУзлы.ПометкаУдаления"
	);
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции // ИспользоватьПоМагазинуКонвертация()

//	LNK 28.08.2019 13:10:15
Функция ИспользоватьПолный(РегистрацияИлиВвыгрузка = Ложь)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаУзлы.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.Полный КАК ТаблицаУзлы
	|ГДЕ
	|	НЕ ТаблицаУзлы.ЭтотУзел
	|	И НЕ ТаблицаУзлы.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА &РегистрацияИлиВвыгрузка = ИСТИНА
	|				ТОГДА ТаблицаУзлы.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.РозницаТестовая)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ"
	);
	Запрос.УстановитьПараметр("РегистрацияИлиВвыгрузка", РегистрацияИлиВвыгрузка);

	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

//	LNK 15.11.2018 14:20:54
Функция ПолучитьРазмерПакетаВыгрузки(Идентификатор)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаПараметры.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ОбщиеПараметрыСинхронизации КАК ТаблицаПараметры
	|ГДЕ
	|	ТаблицаПараметры.Идентификатор = &Идентификатор
	|	И ТИПЗНАЧЕНИЯ(ТаблицаПараметры.Значение) = ТИП(ЧИСЛО)"
	);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

		Попытка

			ЗначениеВозврата = Макс(Выборка.Значение, 10);

		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ЗначениеВозврата = 1000;

		КонецПопытки;

	Иначе

		Если Идентификатор = "НоменклатураСегмента"
		Тогда	ЗначениеВозврата = 20000;

		ИначеЕсли Идентификатор = "НоменклатурноеСостояние"
		Тогда	ЗначениеВозврата = 50000;

		ИначеЕсли Идентификатор = "ИнформативныеОстаткиТоваровПоМагазинам"
		Тогда	ЗначениеВозврата = 20000;

		ИначеЕсли Идентификатор = "ВерификацияКлиентовНазначение"
		Тогда	ЗначениеВозврата = 20000;

		ИначеЕсли Идентификатор = "ПродажиПоДисконтнымКартам"
		Тогда	ЗначениеВозврата = 10000;

		ИначеЕсли Идентификатор = "СебестоимостьНоменклатуры"
		Тогда	ЗначениеВозврата = 10000;

		ИначеЕсли Идентификатор = "СерийныеНомера"
		Тогда	ЗначениеВозврата = 50000;

		ИначеЕсли Идентификатор = "Номенклатура"
		Тогда	ЗначениеВозврата = 10000;

		ИначеЕсли Идентификатор = "Контрагенты"
		Тогда	ЗначениеВозврата = 10000;

		ИначеЕсли Идентификатор = "ФизическиеЛица"
		Тогда	ЗначениеВозврата = 10000;

		ИначеЕсли Идентификатор = "Штрихкоды"
		Тогда	ЗначениеВозврата = 10000;

		ИначеЕсли Идентификатор = "ИнформационныеКарты"
		Тогда	ЗначениеВозврата = 10000;

		ИначеЕсли Идентификатор = "CRM.Документы"
		Тогда	ЗначениеВозврата = 20;

		ИначеЕсли Идентификатор = "CRM.ДействующиеЦены"
		Тогда	ЗначениеВозврата = 100;

		ИначеЕсли Идентификатор = "CRM.ЦеныНоменклатуры"
		Тогда	ЗначениеВозврата = 100;

		ИначеЕсли Идентификатор = "CRM.ТоварыНаСкладах"
		Тогда	ЗначениеВозврата = 100;

		ИначеЕсли Идентификатор = "CRM.Контрагенты"
		Тогда	ЗначениеВозврата = 100;

		ИначеЕсли Идентификатор = "CRM.Номенклатура"
		Тогда	ЗначениеВозврата = 100;

		ИначеЕсли Идентификатор = "CRM.Магазины"
		Тогда	ЗначениеВозврата = 100;

		ИначеЕсли Идентификатор = "CRM.СправочникиДругие"
		Тогда	ЗначениеВозврата = 100;

		ИначеЕсли Идентификатор = "CRM.ЗапросДоступности"
		Тогда	ЗначениеВозврата = 100;

		ИначеЕсли Идентификатор = "СВЕРКА.КлючевыеАтрибутыДокументов"
		Тогда	ЗначениеВозврата = 1000;

		ИначеЕсли Идентификатор = "ИМ.КомплексОбменаMagento"
		Тогда	ЗначениеВозврата = 100;

		ИначеЕсли Идентификатор = "WEB.OrderSaleControl"
		Тогда	ЗначениеВозврата = 50;

		Иначе	ЗначениеВозврата = 10000;

		КонецЕсли;

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции










