// Формирует список значений возможных получателей скидок
//
// Параметры
// Список = Заполняемый список
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокЗначенийПолучателейСкидок(ЗаполняемыйСписок = Неопределено) Экспорт

	Если ЗаполняемыйСписок = Неопределено Тогда
		ЗаполняемыйСписок = Новый СписокЗначений;
	КонецЕсли;
	
	ЗаполняемыйСписок.Добавить("ВидыДисконтныхКарт"     , "Вид дисконтной карты");
	ЗаполняемыйСписок.Добавить("ИнформационныеКарты"    , "Дисконтная карта");
	ЗаполняемыйСписок.Добавить("ФизическиеЛица"         , "Физическое лицо");
	ЗаполняемыйСписок.Добавить("Контрагенты"            , "Контрагент");
	ЗаполняемыйСписок.Добавить("ГруппыПолучателейСкидки", "Группа получателей скидки");
	// +HVOYA. 29.08.2016 14:04:31, Львова Е.А.
	ЗаполняемыйСписок.Добавить("Номенклатура"         	, "Скидочный купон");
	// -HVOYA. 29.08.2016 14:04:38, Львова Е.А.
	
	Возврат ЗаполняемыйСписок;

КонецФункции // ПолучитьСписокЗначенийПолучателейСкидок()


// Получает значение типа получателя по умолчанию
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьТипЗначенияПолучателяСкидокПоУмолчанию() Экспорт

	Возврат "ВидыДисконтныхКарт";

КонецФункции // ПолучитьТипЗначенияПолучателяСкидокПоУмолчанию()

// Возможность использования получателей скидок
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//  Булево
//
Функция ВозможностьИспользованияПолучателейВСкидках() Экспорт

	Возврат Истина;

КонецФункции // ВозможностьИспользованияПолучателейВСкидках()


// Возможность использования скидок подарков
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//  Булево
//
Функция ВозможностьИспользованияСкидкиПодарки() Экспорт

	Возврат Истина;

КонецФункции // ВозможностьИспользованияСкидкиПодарки()

// Возможность использования сообщений кассиру
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//  Булево
//
Функция ВозможностьИспользованияСообщенияКассиру() Экспорт

	Возврат Истина;

КонецФункции // ВозможностьИспользованияСообщенияКассиру()


// Формирует список значений возможных получателей скидок
//
// Параметры
// Список = Заполняемый список
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокЗначенийСпособовПредоставленияСкидки(ЗаполняемыйСписок = Неопределено) Экспорт

	Если ЗаполняемыйСписок = Неопределено Тогда

		ЗаполняемыйСписок = Новый СписокЗначений;

	КонецЕсли;
	
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Процент);
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыПредыдущейПокупки);
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Сумма);
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦены);
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Подарок);
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение);
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.БесплатнаяДоставка);	//	LNK 12.11.2021 05:37:39

	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗапретРозничнойПродажи") Тогда

		ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.ЗапретРозничнойПродажи);

	КонецЕсли;

	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.ДиапазонПроцентов);	// - HVOYA 13.09.2016 13:54:36, Латышев А.А.
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.КомплекснаяПокупка);	// + HVOYA 07.04.2017 11:22:49, Латышев А.А.

	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.НоминалКупона);				//	LNK 18.09.2018 10:03:46
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.ПакетКупоновКратныйСумме);	//	LNK 27.08.2020 07:53:05

	Возврат ЗаполняемыйСписок;

КонецФункции


// Формирует список значений возможных условий скидок
//
// Параметры
// Список = Заполняемый список
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокЗначенийУсловийПредоставленияСкидки(ЗаполняемыйСписок = Неопределено) Экспорт

	Если ЗаполняемыйСписок = Неопределено Тогда
		ЗаполняемыйСписок = Новый СписокЗначений;
	КонецЕсли;
	
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж);
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж);
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи);
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки);
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ВДеньРождения);
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ПорядковыйНомерПродажиКратен);
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ПоТипуПолучателя);
	
	Возврат ЗаполняемыйСписок;

КонецФункции // ПолучитьСписокЗначенийПолучателейСкидок()

// Формирует список значений возможных получателей скидок
//
// Параметры
// Список = Заполняемый список
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокЗначенийВариантовНакопленияКумулятивнойСкидкиНаценки(ЗаполняемыйСписок = Неопределено) Экспорт

	Если ЗаполняемыйСписок = Неопределено Тогда
		ЗаполняемыйСписок = Новый СписокЗначений;
	КонецЕсли;

	ЗаполняемыйСписок.Добавить(Перечисления.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоПартнеру);
	ЗаполняемыйСписок.Добавить(Перечисления.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоДисконтнойКарте);

	Возврат ЗаполняемыйСписок;

КонецФункции // ПолучитьСписокЗначенийПолучателейСкидок()

//	LNK 23.10.2021 10:56:26
Функция СтруктураДанныхРасчетаСкидок(ВходныеПараметры)	Экспорт

	ДанныеРасчетаСкидок = Новый Массив;	//	LNK 22.01.2021 09:54:51
	ДанныеРасчетаСкидок.Добавить(Новый Структура(
		"Результаты, СпособПрименения, ТипПрограммыЛояльности"
			,
			, Перечисления.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок
			, ?(ВходныеПараметры.ИспользоватьПрограммуЛояльности = Истина
				, Перечисления.ТипыПрограммЛояльности.Сотрудники
				, Перечисления.ТипыПрограммЛояльности.Покупатели
			)));

	Если ВходныеПараметры.ИспользоватьБонуснуюСистему Тогда

		ДанныеРасчетаСкидок.Добавить(Новый Структура(
			"Результаты, СпособПрименения, ТипПрограммыЛояльности"
			,
			, Перечисления.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы
			, ?(ВходныеПараметры.ИспользоватьПрограммуЛояльности = Истина
				, Перечисления.ТипыПрограммЛояльности.Сотрудники
				, Перечисления.ТипыПрограммЛояльности.Покупатели
			)));

	КонецЕсли;

	Возврат ДанныеРасчетаСкидок;

КонецФункции

#Область ПоддержкаФункционала_РАСЧЕТА_СКИДОК

// Процедура выполняет расчет скидок по документу.
// Вызывается из форм документов.
//
Функция Рассчитать(Объект, ВходныеПараметры) Экспорт
	
	УточнитьВходныеПараметрыРасчетаСкидок(Объект, ВходныеПараметры);

//	LNK 22.01.2021 10:06:46
//	"ДанныеРасчетаСкидок" - массив, где первый элемент [0] всегда содержит результаты расчета скидок.
//	Второй элемент [1] может отсутствовать и содержит данные расчета бонусов.

	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ")
			ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя")
			ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВозвратИнтернетЗаказа") Тогда

		ДанныеРасчетаСкидок = РассчитатьПоЧекуККМ(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РеализацияТоваров")
		ИЛИ   ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
		 Тогда

		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РеализацияТоваров") Тогда

			ВходныеПараметры.ИспользоватьБонуснуюСистему = Ложь;	//	LNK 19.11.2021 06:40:09

		КонецЕсли;

		ДанныеРасчетаСкидок = РассчитатьПоРеализацииТоваров(Объект, ВходныеПараметры);
		
	КонецЕсли;

	Если ВходныеПараметры.Свойство("СведенияДокумента") Тогда

		ДанныеРасчетаСкидок[0].Результаты.Вставить("СведенияДокумента", ВходныеПараметры.СведенияДокумента);

	КонецЕсли;

	Возврат ДанныеРасчетаСкидок;

КонецФункции

// Функция выполняет расчет скидок по чеку ККМ.
//
Функция РассчитатьПоЧекуККМ(Объект, ВходныеПараметры) Экспорт
	
	Если НЕ (ВходныеПараметры.ТолькоСообщенияПослеОформления ИЛИ ВходныеПараметры.ТолькоНачислениеБонусныхБаллов) Тогда
		
		ОчиститьТоварыОтПодарков(Объект);
		
	КонецЕсли;
	
	Если НЕ ВходныеПараметры.ТолькоНачислениеБонусныхБаллов Тогда

		СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Товары");
		
		СкидкиНаценкиСервер.ПодготовитьДанныеОВыбранныхУправляемыхСкидках(Объект, ВходныеПараметры);

	КонецЕсли;
	
//	Обработка табличной части "Товары".
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		КолонкиТовары =
		"КлючСвязи,
		|Номенклатура,
		|Характеристика,
		|Упаковка,
		|Количество,
		|КоличествоУпаковок,
		|ПричинаРучнойСкидки,
		|АкционнаяЦена,
		|СуммаВсего,
		|Цена,
		|Отменено,
		|ПродажаПодарка"
		;
	Иначе
		КолонкиТовары =
		"КлючСвязи,
		|Номенклатура,
		|Характеристика,
		|Упаковка,
		|Количество,
		|КоличествоУпаковок,
		|ПричинаРучнойСкидки,
		|АкционнаяЦена,
		|СуммаВсего,
		|Цена,
		|ПродажаПодарка"
		;
	КонецЕсли;
	
	Товары = ПодготовитьТоварыКРасчетуСкидок(Объект.Товары, КолонкиТовары, ВходныеПараметры);

	ПараметрыРасчета = ПараметрыРасчетаСкидок(Объект, ВходныеПараметры, Товары, "ЧекККМ");
	
	Если ПараметрыРасчета.РассчитатьСкидки Тогда

		ДанныеРасчетаСкидок = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);

		Если ВходныеПараметры.ПрименятьКОбъекту И НЕ ВходныеПараметры.ТолькоСообщенияПослеОформления Тогда

			ПервыйПроход = Истина;

			Для каждого ЭлементРасчета Из ДанныеРасчетаСкидок Цикл	//	LNK 30.01.2021 08:39:45

				Если ВходныеПараметры.НеНачислятьБонусныеБаллы = Истина И ЭлементРасчета.СпособПрименения = Перечисления.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы Тогда
				//	LNK 25.10.2022 05:28:31 - Бонусы НЕ начисляем!

					Продолжить;

				КонецЕсли;

				Если ЭлементРасчета.СпособПрименения = Перечисления.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок
				И	 ВходныеПараметры.ТолькоНачислениеБонусныхБаллов	//	LNK 18.01.2022 16:15:03
				Тогда

					ПервыйПроход = Ложь;	//	Важно! Существующие скидки "ПрименитьВМоментРасчетаСкидокНаценок" НЕ будут очищаться
					Продолжить;

				КонецЕсли;

				ПримененныеСкидкиНаценки = ЭлементРасчета.Результаты;

				СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект
					, "Товары"
					, ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки
					, ЭлементРасчета.СпособПрименения
					, ВходныеПараметры
					, ПервыйПроход
				);

				Если ЭлементРасчета.СпособПрименения = Перечисления.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок Тогда

					Если ВходныеПараметры.СписыватьАкционныеБонусныеБаллы Тогда

					//	.. уточним "СуммаВсего", так как при расчете скидок эта сумма не заполняется.
						ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

						БонусныеБаллыВызовСервера.ОчиститьОплатуБонуснымиБаллами(Объект, "Товары", "ОплатаБонуснымиБаллами", БонусныеБаллыПовтИсп.АвтоматическиеТипыБонусов(), Объект.ОплатаБонуснымиБаллами.Количество() = 0);
					//	LNK 11.06.2021 10:34:32
					//	В данном случае ("Акция") пытаемся погасить всю сумму объекта, оставшуюся после применения скидок.
						ПараметрыРаспределения = Новый Структура(
							"СуммаБонусныхБалловДляПогашения"
							, Объект.Товары.Итог("СуммаВсего")
						);
						ДанныеРаспределения = БонусныеБаллыВызовСервера.РаспределитьСуммуБонусныхБаллов(Объект
							, "Товары"
							, ПримененныеСкидкиНаценки.ТаблицаБонусныеБаллы
							, ПараметрыРаспределения
						);
						БонусныеБаллыВызовСервера.ПрименитьРезультатыРаспределенияОплатыБонуснымиБалламиКОбъекту(Объект, "Товары", "ОплатаБонуснымиБаллами", ДанныеРаспределения);

					КонецЕсли;

					ПрименитьРезультатРасчетаСкидокПодарковКОбъекту(Объект, "Подарки", ПримененныеСкидкиНаценки.ТаблицаПодарков, Объект.ЦенаВключаетНДС);

					Если ВходныеПараметры.Свойство("ПеренестиСкидкиПодаркиВТовары") Тогда

						ПеренестиСкидкиПодаркиВТовары(Объект, Объект.ЦенаВключаетНДС, ПримененныеСкидкиНаценки);

					КонецЕсли;

				КонецЕсли;

				ПервыйПроход = Ложь;

			КонецЦикла;

		//	LNK 05.09.2022 06:40:56
			СкидкиНаценкиСервер.ПрименитьПогашениеСкидочныхКупонов(Объект, ПараметрыРасчета.ПогашениеСкидочныхКупонов);

			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

		//	СкидкиНаценкиСервер.ПрименитьКОбъектуДанныеПакетаКупонов(Объект, ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, ПримененныеСкидкиНаценки.ТаблицаПакетаКупонов, ПримененныеСкидкиНаценки.ТаблицаСообщений);
			СкидкиНаценкиСервер.ПрименитьКОбъектуДанныеПакетаКупонов(Объект	//	LNK 29.10.2022 05:39:20
				, ДанныеРасчетаСкидок[0].Результаты.ТаблицаСкидкиНаценки
				, ДанныеРасчетаСкидок[0].Результаты.ТаблицаПакетаКупонов
				, ДанныеРасчетаСкидок[0].Результаты.ТаблицаСообщений
			);

		КонецЕсли;

	Иначе

		ДанныеРасчетаСкидок = СкидкиНаценкиСерверПереопределяемый.СтруктураДанныхРасчетаСкидок(ВходныеПараметры);

		Если ВходныеПараметры.ПрименятьКОбъекту И НЕ ВходныеПараметры.ТолькоСообщенияПослеОформления Тогда

			СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "Товары", "ОплатаБонуснымиБаллами");

		КонецЕсли;

	КонецЕсли;
	
	Возврат ДанныеРасчетаСкидок;
	
КонецФункции

// Функция выполняет расчет скидок по реализации товаров.
//
Функция РассчитатьПоРеализацииТоваров(Объект, ВходныеПараметры) Экспорт
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Товары");
	
	СкидкиНаценкиСервер.ПодготовитьДанныеОВыбранныхУправляемыхСкидках(Объект, ВходныеПараметры);
	
//	Обработка табличной части "Товары".
	
	КолонкиТовары =
	"КлючСвязи,
	|Номенклатура,
	|Характеристика,
	|Упаковка,
	|Количество,
	|КоличествоУпаковок,
	|АкционнаяЦена,
	|СуммаВсего,
	|Цена"
	;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		КолонкиТовары = КолонкиТовары + ",Отменено";
	КонецЕсли;
	
	ПараметрыРасчета = ПараметрыРасчетаСкидок(Объект, ВходныеПараметры, ПодготовитьТоварыКРасчетуСкидок(Объект.Товары, КолонкиТовары, ВходныеПараметры), "РеализацияТоваров");

	Если ПараметрыРасчета.РассчитатьСкидки Тогда

		ДанныеРасчетаСкидок = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
		
		Если ВходныеПараметры.ПрименятьКОбъекту И НЕ ВходныеПараметры.ТолькоСообщенияПослеОформления Тогда

			ПервыйПроход = Истина;

			Для каждого ЭлементРасчета Из ДанныеРасчетаСкидок Цикл

				Если ВходныеПараметры.НеНачислятьБонусныеБаллы = Истина И ЭлементРасчета.СпособПрименения = Перечисления.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы Тогда
				//	LNK 25.10.2022 05:28:31 - Бонусы НЕ начисляем!

					Продолжить;

				КонецЕсли;

				ПримененныеСкидкиНаценки = ЭлементРасчета.Результаты;

				СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Товары"
					, ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки
					, ЭлементРасчета.СпособПрименения
					, ВходныеПараметры
					, ПервыйПроход
				);

				ПервыйПроход = Ложь;

			КонецЦикла;

		//	LNK 05.09.2022 06:40:56
			СкидкиНаценкиСервер.ПрименитьПогашениеСкидочныхКупонов(Объект, ПараметрыРасчета.ПогашениеСкидочныхКупонов);

			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

		КонецЕсли;
	
	Иначе

		ДанныеРасчетаСкидок = СкидкиНаценкиСерверПереопределяемый.СтруктураДанныхРасчетаСкидок(ВходныеПараметры);

		Если ВходныеПараметры.ПрименятьКОбъекту И НЕ ВходныеПараметры.ТолькоСообщенияПослеОформления Тогда

			СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "Товары");

		КонецЕсли;

	КонецЕсли;
	
	Возврат ДанныеРасчетаСкидок;
	
КонецФункции

Процедура УточнитьВходныеПараметрыРасчетаСкидок(Объект, ВходныеПараметры)	//	LNK 07.06.2021 11:39:30

	#Если _ Тогда
	ВходныеПараметры = Новый Структура;
	#КонецЕсли

	Если НЕ ВходныеПараметры.Свойство("ДатаРасчета") ИЛИ НЕ ТипЗнч(ВходныеПараметры.ДатаРасчета) = Тип("Дата") ИЛИ ВходныеПараметры.ДатаРасчета = '00010101' Тогда

		ВходныеПараметры.Вставить("ДатаРасчета", ТекущаяДата());

	КонецЕсли;

	ВходныеПараметры.Вставить("ИспользоватьБонуснуюСистему", БонусныеБаллыПовтИсп.ИспользоватьБонуснуюСистему(ВходныеПараметры.ДатаРасчета));
	ВходныеПараметры.Вставить("ЦенаПродажиМинимальная", ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику(ВходныеПараметры.ДатаРасчета).ЦенаПродажиМинимальная);
//	LNK 11.06.2021 06:53:55 - указание для каждого вида документов.. концепция может измениться
	ВходныеПараметры.Вставить("СписыватьАкционныеБонусныеБаллы"
		, БонусныеБаллыПовтИсп.СписыватьАкционныеБонусныеБаллы(ОбщегоНазначения.ИмяТаблицыПоСсылке(Объект.Ссылка))
		И ВходныеПараметры.ИспользоватьБонуснуюСистему);

	Если НЕ ВходныеПараметры.Свойство("ПродажаПоКредитнойПрограмме") Тогда

		ВходныеПараметры.Вставить("ПродажаПоКредитнойПрограмме", ПродажаПоКредитнойПрограмме(Объект));

	КонецЕсли;

	Если НЕ ВходныеПараметры.Свойство("ТолькоНачислениеБонусныхБаллов") Тогда

		ВходныеПараметры.Вставить("ТолькоНачислениеБонусныхБаллов", Ложь);

	КонецЕсли;

	Если НЕ ВходныеПараметры.Свойство("СкидкиПоЗаказуПокупателя") Тогда

		ВходныеПараметры.Вставить("СкидкиПоЗаказуПокупателя",
			ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ
			ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") И НЕ Объект.ЗаказПокупателя = ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка")
		);

	КонецЕсли;

	ВходныеПараметры.Вставить("НеНачислятьБонусныеБаллы", Ложь);	//	LNK 25.10.2022 05:42:38

КонецПроцедуры

Функция ПараметрыРасчетаСкидок(Объект, ВходныеПараметры, Товары, ИмяТипа)	//	LNK 20.01.2021 11:02:31

	ПараметрыРасчета = Новый Структура;

	Если ВходныеПараметры.ИспользоватьБонуснуюСистему Тогда

		ПараметрыРасчета.Вставить("БазаРасчета", Новый Структура(
			"СуммаДокумента, СкидкиРассчитаны, ЦенаВключаетНДС, Товары, СкидкиНаценки"
			, 0
			, Ложь
			, Объект.ЦенаВключаетНДС
			, ОбщегоНазначения.ВыгрузитьКоллекцию(Объект.Товары)
			, ОбщегоНазначения.ВыгрузитьКоллекцию(Объект.СкидкиНаценки)
		));

		ПараметрыРасчета.БазаРасчета.СкидкиНаценки.Колонки.Добавить("ИсключаетБонусныеБаллы", Новый ОписаниеТипов("Булево"));

	КонецЕсли;

	ПараметрыРасчета.Вставить("ТекущаяДата"  , СкидкиНаценкиСервер.ПолучитьТекущуюДатуОбъекта(Объект));
	ПараметрыРасчета.Вставить("СкидкиНаценки", СкидкиНаценкиСервер.ПолучитьТаблицуСкидокНаценокДляРозничнойТорговли(
												  ПараметрыРасчета.ТекущаяДата
												, Объект.Магазин
												, ВходныеПараметры.ИспользоватьБонуснуюСистему
											)
								);
	ПараметрыРасчета.Вставить("Регистратор"  , Объект.Ссылка);
	ПараметрыРасчета.Вставить("Магазин"      , Объект.Магазин);

	ПараметрыРасчета.Вставить("ИспользоватьБонуснуюСистему"	, ВходныеПараметры.ИспользоватьБонуснуюСистему = Истина);	//	LNK 20.01.2021 10:37:00
	ПараметрыРасчета.Вставить("ПродажаПоКредитнойПрограмме"	, ВходныеПараметры.ПродажаПоКредитнойПрограмме = Истина);	//	LNK 31.07.2021 07:43:07

	МагазинСРеквизитами = РозничныеПродажиСерверПовтИсп.РеквизитыМагазина(Объект.Магазин, ПараметрыРасчета.ТекущаяДата);
	
	ПараметрыРасчета.Вставить("ИспользоватьПрименениеЦен"     , ?(ИмяТипа = "РеализацияТоваров", Ложь, МагазинСРеквизитами.ИспользоватьПрименениеЦен));
	ПараметрыРасчета.Вставить("ФорматМагазина"                , МагазинСРеквизитами.ФорматМагазина);
	ПараметрыРасчета.Вставить("СегментИсключаемойНоменклатуры", МагазинСРеквизитами.СегментИсключаемойНоменклатуры);
	
	ПараметрыРасчета.Вставить("СкладПродажи"            , МагазинСРеквизитами.СкладПродажи);
	ПараметрыРасчета.Вставить("ВидМинимальныхЦенПродажи", МагазинСРеквизитами.ВидМинимальныхЦенПродажи);
	ПараметрыРасчета.Вставить("ПравилоЦенообразования"  , МагазинСРеквизитами.ПравилоЦенообразования);

//	Для скидки "За форму оплаты".
	ПараметрыРасчета.Вставить("ФормаОплаты", Неопределено);
	
//	Для скидки "За время продажи".
	ПараметрыРасчета.Вставить("ДеньНедели",   Перечисления.ДниНедели.Получить(ДеньНедели(ПараметрыРасчета.ТекущаяДата) - 1));
	ПараметрыРасчета.Вставить("ТекущееВремя", СкидкиНаценкиСервер.ПолучитьТекущееВремяОбъекта(Объект));
	
//	Скидка "За соблюдение графика оплаты" не предоставляется.
	ПараметрыРасчета.Вставить("ГрафикОплаты", Неопределено);

//	Скидки по дисконтным картам
	ПараметрыРасчета.Вставить("ДисконтныеКарты"           , МаркетинговыеАкцииСервер.ПолучитьИсториюДисконтнойКарты(ПараметрыРасчета.ТекущаяДата, Объект.ДисконтнаяКарта, Истина));
	ПараметрыРасчета.Вставить("ДисконтнаяКартаПредъявлена", ЗначениеЗаполнено(Объект.ДисконтнаяКарта));
	ПараметрыРасчета.Вставить("ВладелецКарты"             , ?(ИмяТипа = "ЧекККМ", Объект.ВладелецДисконтнойКарты, ?(ИмяТипа = "РеализацияТоваров", Объект.Контрагент, Неопределено)));
	ПараметрыРасчета.Вставить("СотрудникАнтошки"		  , Справочники.Контрагенты.ЯвляетсяСотрудником(ПараметрыРасчета.ВладелецКарты));	//	LNK 25.10.2022 04:36:29

//	LNK 25.10.2022 05:43:38
	ВходныеПараметры.НеНачислятьБонусныеБаллы = (ПараметрыРасчета.СотрудникАнтошки = Истина И ВходныеПараметры.СкидкиПоЗаказуПокупателя = Истина);

	Если ПараметрыРасчета.ДисконтнаяКартаПредъявлена Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСправочник.ВладелецКарты КАК ВладелецКарты
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ТаблицаСправочник
		|ГДЕ
		|	ТаблицаСправочник.Ссылка = &ДисконтнаяКарта"
		);
		Запрос.УстановитьПараметр("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
		
		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда

			Выборка = Результат.Выбрать();
			Выборка.Следующий();

			ПараметрыРасчета.ВладелецКарты = Выборка.ВладелецКарты;

		КонецЕсли;

	КонецЕсли;

//	Скидки на День рождения
	ПараметрыРасчета.Вставить("ДеньРождения", МаркетинговыеАкцииСервер.ПолучитьБлижайшийДеньРождения(ПараметрыРасчета.ТекущаяДата, ПараметрыРасчета.ВладелецКарты));
	ПараметрыРасчета.Вставить("РассчитатьСкидки", Истина);

	Если ЗначениеЗаполнено(ПараметрыРасчета.ВладелецКарты) И ТипЗнч(ПараметрыРасчета.ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") Тогда

		Запрос = Новый Запрос(	//	LNK 23.10.2021 10:37:27
		"ВЫБРАТЬ
		|	ТаблицаСправочник.Ссылка КАК Ссылка,
		|	ТаблицаСправочник.ЮрФизЛицо КАК ЮрФизЛицо
		|ИЗ
		|	Справочник.Контрагенты КАК ТаблицаСправочник
		|ГДЕ
		|	ТаблицаСправочник.Ссылка = &ВладелецКарты
		|	И ТаблицаСправочник.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)"
		);
		Запрос.УстановитьПараметр("ВладелецКарты", ПараметрыРасчета.ВладелецКарты);

		ПараметрыРасчета.РассчитатьСкидки = НЕ Запрос.Выполнить().Пустой();

	КонецЕсли;

	Если ПараметрыРасчета.РассчитатьСкидки Тогда

		ПараметрыРасчета.РассчитатьСкидки = ВерификацияКлиентовСервер.ПрименитьСкидкуДисконтойКарты(ПараметрыРасчета.ВладелецКарты, ПараметрыРасчета.Магазин);

	КонецЕсли;

	Если ПараметрыРасчета.ИспользоватьБонуснуюСистему = Истина Тогда	//	LNK 11.02.2021 05:11:40

		ПараметрыРасчета.ИспользоватьБонуснуюСистему = ЗначениеЗаполнено(ПараметрыРасчета.ВладелецКарты);

	КонецЕсли;
	
	Если ПараметрыРасчета.ДисконтнаяКартаПредъявлена
	И НЕ ПараметрыРасчета.РассчитатьСкидки Тогда	//	LNK 20.10.2017 15:27:11

		ПараметрыРасчета.ДисконтнаяКартаПредъявлена = Ложь;

	КонецЕсли;

//	Скидки на кратность порядкового номера продажи
	ПараметрыРасчета.Вставить("ПорядковыйНомерПродажи", 0);

	Если ВходныеПараметры.Свойство("ПорядковыйНомерПродажи") И ТипЗнч(ВходныеПараметры.ПорядковыйНомерПродажи) = Тип("Число") Тогда

		ПараметрыРасчета.ПорядковыйНомерПродажи = ВходныеПараметры.ПорядковыйНомерПродажи;

	КонецЕсли;
	
	Если ИмяТипа = "ЧекККМ" Тогда
		
	//	Скидки по типу получателя. Используем лояльность только в чеках
		Если НЕ ВходныеПараметры.Свойство("ИспользоватьПрограммуЛояльности") Тогда

			ВходныеПараметры.Вставить("ИспользоватьПрограммуЛояльности", РозничныеПродажиСервер.ПрограммаЛояльностиСотрудников(Объект));

		КонецЕсли;

		ПараметрыРасчета.Вставить("ПолучателиСкидок", ПолучитьМассивПолучателей(Объект.ДисконтнаяКарта, ПараметрыРасчета.ВладелецКарты,, ВходныеПараметры.ИспользоватьПрограммуЛояльности));

	Иначе
	
		ВходныеПараметры.Вставить("ИспользоватьПрограммуЛояльности", Ложь);
		ПараметрыРасчета.Вставить("ПолучателиСкидок", ПолучитьМассивПолучателей(Объект.ДисконтнаяКарта, ПараметрыРасчета.ВладелецКарты, Объект.Контрагент));

	КонецЕсли;
	
//	LNK 05.09.2022 06:32:18 - Ранее погашения по ЗаказуПокупателя не отрабатывались
	Если ИмяТипа = "ЧекККМ" ИЛИ ИмяТипа = "ЗаказПокупателя" Тогда

		ПараметрыРасчета.Вставить("СкидочныйКупон", ПолучитьСписокСкидочныхКупонов(Объект.ПогашениеСкидочныхКупонов));	//	HVOYA. 29.08.2016 16:24:26, Львова Е.А.
	//	LNK 19.09.2018 13:24:42
		ПараметрыРасчета.Вставить("ПогашениеСкидочныхКупонов", ОбщегоНазначения.ВыгрузитьКоллекцию(Объект.ПогашениеСкидочныхКупонов));
		ПараметрыРасчета.ПогашениеСкидочныхКупонов.Колонки.Добавить("СкидкиНаценки", Новый ОписаниеТипов("Массив"));
		ПараметрыРасчета.ПогашениеСкидочныхКупонов.ЗаполнитьЗначения(Ложь, "Принят");	//	LNK 05.09.2022 06:15:08

	Иначе

		ПараметрыРасчета.Вставить("СкидочныйКупон"			 , Новый Массив);			//	HVOYA. 29.08.2016 16:24:26, Львова Е.А.
		ПараметрыРасчета.Вставить("ПогашениеСкидочныхКупонов", Новый ТаблицаЗначений);	//	LNK 19.09.2018 15:24:39
	//	Бакан 16.12.2022 
//		ПараметрыРасчета.Вставить("СкидочныйКупон", ПолучитьСписокСкидочныхКупонов(Объект.ПогашениеСкидочныхКупонов));	//	HVOYA. 29.08.2016 16:24:26, Львова Е.А.
//		ПараметрыРасчета.Вставить("ПогашениеСкидочныхКупонов", ОбщегоНазначения.ВыгрузитьКоллекцию(Объект.ПогашениеСкидочныхКупонов));
//		ПараметрыРасчета.ПогашениеСкидочныхКупонов.Колонки.Добавить("СкидкиНаценки", Новый ОписаниеТипов("Массив"));		
//		ПараметрыРасчета.ПогашениеСкидочныхКупонов.ЗаполнитьЗначения(Ложь, "Принят");	
	КонецЕсли;

	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("Пользователь",      Неопределено);
	ПараметрыРасчета.Вставить("РасчетПодарков",    ИмяТипа = "ЧекККМ");
	ПараметрыРасчета.Вставить("РасчетСообщений",   ИмяТипа = "ЧекККМ");
	ПараметрыРасчета.Вставить("ТолькоСообщенияПослеОформления", ВходныеПараметры.ТолькоСообщенияПослеОформления);
	
	ВходныеПараметры.Свойство("РабочееМесто", Неопределено);
	ПараметрыРасчета.Вставить("РабочееМесто", Неопределено);

	Возврат ПараметрыРасчета;

КонецФункции

Функция ПродажаПоКредитнойПрограмме(Объект)	//	LNK 31.07.2021 07:45:38

	КредитнаяОплата = ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю");

	Возврат КредитнаяОплата;

КонецФункции

// Возвращает массив получателей скидки 
//
// Параметры
//  ДисконтнаяКарта - Дисконтная карта
//  Получатель  - Контрагент или физическое лицо
//
// Возвращаемое значение:
//   Массив
//
Функция ПолучитьМассивПолучателей(ДисконтнаяКарта, Получатель, Контрагент = Неопределено, ПрограммаЛояльности = Ложь)

	Получатели = Новый Массив;
	Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		Получатели.Добавить(ДисконтнаяКарта);
		ВидДисконтнойКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "ВидДисконтнойКарты");
		Если ЗначениеЗаполнено(ВидДисконтнойКарты) Тогда
			Получатели.Добавить(ВидДисконтнойКарты)
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Получатель) Тогда
		Получатели.Добавить(Получатель);
		
		ЗапросГруппыПолучателей = Новый Запрос;
		ЗапросГруппыПолучателей.Текст = "ВЫБРАТЬ
		|	СоставГруппПолучателейСкидки.ГруппаПолучателейСкидки КАК ГруппаПолучателей
		|ИЗ
		|	РегистрСведений.СоставГруппПолучателейСкидки КАК СоставГруппПолучателейСкидки
		|ГДЕ
		|	СоставГруппПолучателейСкидки.Получатель = &Получатель";
		ЗапросГруппыПолучателей.УстановитьПараметр("Получатель", Получатель);
		ВыборкаГруппыПолучателей = ЗапросГруппыПолучателей.Выполнить().Выбрать();
		Пока ВыборкаГруппыПолучателей.Следующий() Цикл
			Получатели.Добавить(ВыборкаГруппыПолучателей.ГруппаПолучателей);
		КонецЦикла;
	КонецЕсли;
	
    Если ЗначениеЗаполнено(Контрагент) Тогда
        Получатели.Добавить(Контрагент);
		Если Контрагент <> Получатель Тогда
	 		ЗапросГруппыКонтрагентов = Новый Запрос;
			ЗапросГруппыКонтрагентов.Текст = "ВЫБРАТЬ
			|	СоставГруппПолучателейСкидки.ГруппаПолучателейСкидки КАК ГруппаПолучателей
			|ИЗ
			|	РегистрСведений.СоставГруппПолучателейСкидки КАК СоставГруппПолучателейСкидки
			|ГДЕ
			|	СоставГруппПолучателейСкидки.Получатель = &Получатель";
			ЗапросГруппыКонтрагентов.УстановитьПараметр("Получатель", Контрагент);
			ВыборкаГруппыКонтрагентов = ЗапросГруппыКонтрагентов.Выполнить().Выбрать();
			Пока ВыборкаГруппыКонтрагентов.Следующий() Цикл
				Получатели.Добавить(ВыборкаГруппыКонтрагентов.ГруппаПолучателей);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ПрограммаЛояльности Тогда
		Если ЗначениеЗаполнено(Получатель) Тогда
			Если ЗначениеЗаполнено(Получатель.ФизЛицо) Тогда 
		 		ЗапросГруппыЛояльности = Новый Запрос;
				ЗапросГруппыЛояльности.Текст = "ВЫБРАТЬ
				|	СоставГруппПолучателейСкидки.ГруппаПолучателейСкидки КАК ГруппаПолучателей
				|ИЗ
				|	РегистрСведений.СоставГруппПолучателейСкидки КАК СоставГруппПолучателейСкидки
				|ГДЕ
				|	СоставГруппПолучателейСкидки.Получатель = &Получатель";
				ЗапросГруппыЛояльности.УстановитьПараметр("Получатель", Получатель.ФизЛицо);
				ЗапросГруппыЛояльности = ЗапросГруппыЛояльности.Выполнить().Выбрать();
				Пока ЗапросГруппыЛояльности.Следующий() Цикл
					Получатели.Добавить(ЗапросГруппыЛояльности.ГруппаПолучателей);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Получатели;

КонецФункции
	
#КонецОбласти

#Область ПодготовкаТаблицыТоваровДляРасчетаСкидок

Функция ПодготовитьТоварыКРасчетуСкидок(КоллекцияТовары, КолонкиТовары, ВходныеПараметры)

	ТаблицаТовары = ОбщегоНазначения.ВыгрузитьКоллекцию(КоллекцияТовары,, КолонкиТовары);
	#Если _ Тогда
	ТаблицаТовары = Новый ТаблицаЗначений;
	#КонецЕсли

	Если ТаблицаТовары.Колонки.Найти("ПродажаПодарка") = Неопределено Тогда

		ТаблицаТовары.Колонки.Добавить("ПродажаПодарка", Новый ОписаниеТипов("Булево"));

	КонецЕсли;

	Если ТаблицаТовары.Колонки.Найти("Отменено") = Неопределено Тогда

		ТаблицаТовары.Колонки.Добавить("Отменено", Новый ОписаниеТипов("Булево"));

	КонецЕсли;

	ТаблицаТовары.Колонки.Добавить("СерийныйНомер", Новый ОписаниеТипов("СправочникСсылка.СерийныеНомера"));
	ТаблицаТовары.Индексы.Добавить("СерийныйНомер");

	Для каждого СтрокаТаблицы Из ТаблицаТовары Цикл

		Если ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.СерийныеНомера") Тогда

			СтрокаТаблицы.СерийныйНомер = СтрокаТаблицы.Номенклатура;

		КонецЕсли;

	КонецЦикла;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТовары.СерийныйНомер КАК Справочник.СерийныеНомера) КАК СерийныйНомер
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Источник.СерийныйНомер КАК СерийныйНомер,
	|	ТаблицаСправочник.Ссылка КАК Номенклатура
	|ИЗ
	|	Источник КАК Источник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
	|		ПО Источник.СерийныйНомер.Владелец = ТаблицаСправочник.Ссылка
	|ГДЕ
	|	НЕ Источник.СерийныйНомер = ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	);
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл

			СтрокиТаблицы = ТаблицаТовары.НайтиСтроки(Новый Структура("СерийныйНомер", Выборка.СерийныйНомер));

			Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл

				СтрокаТаблицы.Номенклатура = Выборка.Номенклатура;

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

//	Удалим из ТЧ Товары некоторые позиции, чтобы для них зря не считались скидки
	ОчиститьТоварыОтСкидочныхКупонов(ТаблицаТовары);
	ОчиститьТоварыОтДоговоровСтрахования(ТаблицаТовары);
	ОчиститьТоварыОтТоваровСРучнымиСкидками(ТаблицаТовары);	//	!!! РеализацияТоваров!
	ОчиститьТоварыОтПодарковВТаблице(ТаблицаТовары);
	ОчиститьТоварыОтОтмененныхТоваров(ТаблицаТовары);

	Возврат ТаблицаТовары;

КонецФункции

//	LNK 19.09.2018 09:42:16
Процедура ОчиститьТоварыОтСкидочныхКупонов(Товары)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Ссылка В(&СписокНоменклатура)
	|	И ТаблицаСправочник.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.СкидочныйКупон)"
	);
	Запрос.УстановитьПараметр("СписокНоменклатура", Товары.ВыгрузитьКолонку("Номенклатура"));

	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		Выборка = Результат.Выбрать();

		Пока Выборка.Следующий() Цикл

			Для каждого СтрокаТовары Из Товары.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура)) Цикл

				Товары.Удалить(СтрокаТовары);

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ОчиститьТоварыОтТоваровСРучнымиСкидками(ТаблицаТовары)	// +HVOYA. 15.09.2016 17:23:55, Львова Е.А.
	
	Если ТаблицаТовары.Колонки.Найти("ПричинаРучнойСкидки") = Неопределено Тогда

		Возврат;

	КонецЕсли;

	Сч = ТаблицаТовары.Количество() - 1;     
    Пока Сч >= 0 Цикл
        Если ЗначениеЗаполнено(ТаблицаТовары[Сч].ПричинаРучнойСкидки) Тогда
			ТаблицаТовары.Удалить(ТаблицаТовары[Сч]);
		КонецЕсли;
		Сч = Сч - 1;
    КонецЦикла;

КонецПроцедуры

Процедура ОчиститьТоварыОтОтмененныхТоваров(ТаблицаТовары)

	Сч = ТаблицаТовары.Количество() - 1;     
    Пока Сч >= 0 Цикл
        Если ТаблицаТовары[Сч].Отменено Тогда
			ТаблицаТовары.Удалить(ТаблицаТовары[Сч]);
		КонецЕсли;
		Сч = Сч - 1;
    КонецЦикла;

КонецПроцедуры

Процедура ОчиститьТоварыОтДоговоровСтрахования(Товары) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПравилаДляНоменклатуры.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.ПравилаДляНоменклатуры КАК ПравилаДляНоменклатуры
	|ГДЕ
	|	ПравилаДляНоменклатуры.НеУчаствуетВРасчетеСкидок = ИСТИНА
	|	И ПравилаДляНоменклатуры.Номенклатура В(&СписокНоменклатура)"
	);
	Запрос.УстановитьПараметр("СписокНоменклатура", Товары.ВыгрузитьКолонку("Номенклатура"));

	Для каждого СтрокаТовары Из Товары.НайтиСтроки(Новый Структура("Номенклатура", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура"))) Цикл

		Товары.Удалить(СтрокаТовары);

	КонецЦикла;

КонецПроцедуры

Процедура ОчиститьТоварыОтПодарковВТаблице(ТаблицаТовары)

	СтрокиТовары = ТаблицаТовары.НайтиСтроки(Новый Структура("ПродажаПодарка", Истина));
	
	Для каждого СтрокаТовары Из СтрокиТовары Цикл
		
		ТаблицаТовары.Удалить(СтрокаТовары);
	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти
//	=======================================================================================

// Получает сумму накопления по карте при печати чека
Функция СуммаНакопленияПоКартеДляПечатиЧека(РеквизитыДокумента)
	Сумма = 0;
	ДатаНачала = Дата(1, 1, 1, 0, 0, 0);
	Если РеквизитыДокумента.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный Тогда
		ДатаОкончания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДокумента.ОтчетОРозничныхПродажах, "Дата");
	Иначе
		ДатаОкончания = РеквизитыДокумента.Дата;
	КонецЕсли;
	ТаблицаИсторииКарт = МаркетинговыеАкцииСервер.ПолучитьРасширеннуюИсториюДисконтнойКарты(ДатаОкончания, РеквизитыДокумента.ДисконтнаяКарта, Ложь);
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.Сумма КАК Сумма,
	|	Данные.Количество КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(Источник.Сумма) КАК Сумма,
	|		СУММА(Источник.Количество) КАК Количество
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПродажиПоКартам.СуммаОстаток КАК Сумма,
	|			ПродажиПоКартам.КоличествоОстаток КАК Количество
	|		ИЗ
	|			РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(&ДатаОкончания, ДисконтнаяКарта В (&ДисконтныеКарты)) КАК ПродажиПоКартам
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			0,
	|			0
	|		ГДЕ
	|			ИСТИНА) КАК Источник) КАК Данные
	|ГДЕ
	|	(НЕ Данные.Сумма ЕСТЬ NULL
	|			ИЛИ НЕ Данные.Количество ЕСТЬ NULL)"
	);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ДисконтныеКарты", ТаблицаИсторииКарт.ВыгрузитьКолонку("Карта"));
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Сумма = Сумма + Выборка.Сумма;
		КонецЦикла;
	КонецЕсли;
	
	Если (НЕ РеквизитыДокумента.Проведен) И (РеквизитыДокумента.СтатусЧекаККМ <> Перечисления.СтатусыЧековККМ.Архивный) Тогда
		ЗапросТовары = Новый Запрос;
		ЗапросТовары.Текст = "ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА &ЭтоВозврат
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ * ТаблицаТовары.Сумма) КАК Сумма,
		|	СУММА(ВЫБОР
		|			КОГДА &ЭтоВозврат
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ * ТаблицаТовары.Количество) КАК Количество
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка";
		ЗапросТовары.УстановитьПараметр("Ссылка", РеквизитыДокумента.Ссылка);
		ЗапросТовары.УстановитьПараметр("ЭтоВозврат", РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат);
		РезультатТовары = ЗапросТовары.Выполнить();
		Если Не РезультатТовары.Пустой() Тогда
			ВыборкаТовары = РезультатТовары.Выбрать();
			Пока ВыборкаТовары.Следующий() Цикл
				Сумма = Сумма + ВыборкаТовары.Сумма;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат Сумма;
КонецФункции

// Процедура применяет результат расчета скидок (наценок) к объекту.
// Вызывается из форм документов.
//
Процедура ПрименитьРезультатРасчетаСкидокПодарковКОбъекту(Объект, ИмяТЧ, РезультатРасчетаСкидокНаценок, ЦенаВключаетНДС) Экспорт

	ОбщегоНазначения.ЗагрузитьВКоллекцию(РезультатРасчетаСкидокНаценок, Объект[ИмяТЧ], Истина);
	
КонецПроцедуры

// Функция отбирает из таблицы подарков строки,
// которые в соответствии с параметрами скидки и прочими условиями 
// могут быть перенесены в таблицу товаров
Функция ПолучитьСкидкиПодаркиПереносуВТовары(ТаблицаПодарков)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.СкидкаНаценка КАК Справочник.СкидкиНаценки) КАК СкидкаНаценка,
	|	ТаблицаТоваров.Цена КАК Цена,
	|	ТаблицаТоваров.Сумма КАК Сумма,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады) КАК Склад,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	ТаблицаТоваров.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаПодарков КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВедущая.Номенклатура КАК Номенклатура,
	|	ТаблицаВедущая.СкидкаНаценка КАК СкидкаНаценка,
	|	ТаблицаВедущая.Цена КАК Цена,
	|	ТаблицаВедущая.Сумма КАК Сумма,
	|	ТаблицаВедущая.Склад КАК Склад,
	|	ТаблицаОрганизаций.Организация КАК Организация,
	|	ТаблицаВедущая.Количество КАК Количество,
	|	ТаблицаВедущая.НомерСтроки КАК НомерСтроки,
	|	ИСТИНА КАК ПродажаПодарка,
	|	ТаблицаВедущая.Характеристика КАК Характеристика,
	|	ТаблицаВедущая.Упаковка КАК Упаковка,
	|	ТаблицаВедущая.КоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаВедущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииПодразделений.СрезПоследних(&Период, ) КАК ТаблицаОрганизаций
	|		ПО ТаблицаВедущая.Склад.Магазин = ТаблицаОрганизаций.Владелец
	|ГДЕ
	|	НЕ ТаблицаВедущая.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ТаблицаВедущая.СкидкаНаценка.УчитыватьПодарокКакПродажу
	|	И ТаблицаВедущая.Цена > 0
	|	И ТаблицаВедущая.Сумма > 0
	|	И ТаблицаВедущая.Количество > 0
	|	И НЕ ТаблицаВедущая.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ТаблицаПодарков", ТаблицаПодарков);
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Возврат ТаблицаЗапроса;
	
КонецФункции

// Процедура выполняет перенос строк из табличной части объекта "Подарки"
// в табличную часть "Товары"
Процедура ПеренестиСкидкиПодаркиВТовары(Объект, ЦенаВключаетНДС, ПримененныеСкидкиНаценки = Неопределено) Экспорт
	
	ТаблицаСтрокПереносимыхПодарков = ПолучитьСкидкиПодаркиПереносуВТовары(ОбщегоНазначения.ВыгрузитьКоллекцию(Объект.Подарки));
	
	Если ТаблицаСтрокПереносимыхПодарков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СуммаТоваровНеУчаствующихВРаспределении = 0;
	
	Для каждого СтрокаТоваров Из Объект.Товары Цикл
		
		Если СтрокаТоваров.ПродажаПодарка 
			ИЛИ СтрокаТоваров.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
			
			СуммаТоваровНеУчаствующихВРаспределении = СуммаТоваровНеУчаствующихВРаспределении + СтрокаТоваров.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщаяСумма = Объект.Товары.Итог("Сумма") - СуммаТоваровНеУчаствующихВРаспределении;
	
	Если ТаблицаСтрокПереносимыхПодарков.Итог("Сумма") >= ОбщаяСумма Тогда

		Возврат;

	КонецЕсли;

	Для каждого СтрокаПодарка Из ТаблицаСтрокПереносимыхПодарков Цикл

		СуммаСкидкиКРаспределению = СтрокаПодарка.Сумма;
		ОбщаяСумма = Объект.Товары.Итог("Сумма") - СуммаТоваровНеУчаствующихВРаспределении;
		
		Для каждого СтрокаТоваров Из Объект.Товары Цикл
			
			Если СтрокаТоваров.ПродажаПодарка 
				ИЛИ СтрокаТоваров.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если НЕ ОбщаяСумма = 0 Тогда
				СуммаСкидки = СтрокаТоваров.Сумма * (СуммаСкидкиКРаспределению / ОбщаяСумма); 
			Иначе
				СуммаСкидки = 0;
			КонецЕсли;
			
			СтрокаСкидок = Объект.СкидкиНаценки.Добавить();
			СтрокаСкидок.КлючСвязи = СтрокаТоваров.КлючСвязи;
			СтрокаСкидок.СкидкаНаценка = СтрокаПодарка.СкидкаНаценка;
			СтрокаСкидок.Сумма = СуммаСкидки;
			
			Если НЕ ПримененныеСкидкиНаценки = Неопределено Тогда
				
				СтрокаТаблицыСкидок = ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыСкидок, СтрокаСкидок);
				
			КонецЕсли;
			
			СтрокаТоваров.СуммаАвтоматическойСкидки = СтрокаТоваров.СуммаАвтоматическойСкидки + СуммаСкидки;
			
			СуммаБезСкидки = СтрокаТоваров.КоличествоУпаковок * СтрокаТоваров.Цена;
			
			СтрокаТоваров.ПроцентАвтоматическойСкидки = ?(СуммаБезСкидки = 0, 0 , 100 * СтрокаТоваров.СуммаАвтоматическойСкидки / СуммаБезСкидки);
			
			СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению - СтрокаСкидок.Сумма;
			ОбщаяСумма = ОбщаяСумма - СтрокаТоваров.Сумма;
			
			СтрокаТоваров.Сумма = СтрокаТоваров.Сумма - СуммаСкидки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для каждого СтрокаПодарка Из ТаблицаСтрокПереносимыхПодарков Цикл
		
		СтрокаТоваров = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТоваров, СтрокаПодарка);
		
		МассивУдаляемыхСтрок.Добавить(Объект.Подарки[СтрокаПодарка.НомерСтроки - 1]);
		
	КонецЦикла;
	
	Для каждого ЭлементМассива Из МассивУдаляемыхСтрок Цикл
		
		Объект.Подарки.Удалить(ЭлементМассива);
		
	КонецЦикла;
	
	Для каждого СтрокаТоваров Из Объект.Товары Цикл
		
		СтрокаТоваров.СтавкаНДС = Справочники.Номенклатура.ПолучитьРеквизитыНоменклатуры(СтрокаТоваров.Номенклатура).СтавкаНДС;
		
		СтрокаТоваров.СуммаНДС = СкидкиНаценкиСервер.РассчитатьСуммуНДС(СтрокаТоваров.Сумма, СтрокаТоваров.СтавкаНДС, ЦенаВключаетНДС);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет удаление строк из табличной части объекта "Товары",
// в которых значение поля ПродажаПодарка установлено равным Истина
Процедура ОчиститьТоварыОтПодарков(Объект) Экспорт
	
	СтрокиТовары = Объект.Товары.НайтиСтроки(Новый Структура("ПродажаПодарка", Истина));
	
	Для каждого СтрокаТовары Из СтрокиТовары Цикл
		
		Если СтрокаТовары.ИспользоватьСерийныеНомера Тогда

			СтрокиСерийныеНомера = Объект.СерийныеНомера.НайтиСтроки(
				Новый Структура(
					"КлючСвязиСерийныхНомеров"
					, СтрокаТовары.КлючСвязиСерийныхНомеров
				)
			);

			Для каждого СтрокаСерийныйНомер Из СтрокиСерийныеНомера Цикл

				Объект.СерийныеНомера.Удалить(СтрокаСерийныйНомер);

			КонецЦикла;

		КонецЕсли;

		Объект.Товары.Удалить(СтрокаТовары);
	
	КонецЦикла;
	
КонецПроцедуры

// Процедура анализирует все подарки из одноименной табличной части документа "ЧекККМ"
// И если условие для переноса в товары не выполняется, то выдается соответствующее сообщение
// Параметры: 
//		Объект - ДанныеФормыСтруктура - основной реквизит "Объект" формы документа "ЧекККМ"
Процедура СообщитьОбОстающихсяПодарках(Объект, СтрокаДополнительногоОповещения, ЕстьОшибки) Экспорт
	
	КоличествоСтрокСОповещением = 0;
	СписокСтрокСОповещением = "";
	
	Для Каждого СтрокаПодарка Из Объект.Подарки Цикл
		
		ИмяКолонки = "Номенклатура";
		СтрокаСообщения = "";
		УчитыватьПодарокКакПродажу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПодарка.СкидкаНаценка, "УчитыватьПодарокКакПродажу", Ложь);
		ПроверитьЗаполнениеЯчейкиСтрокиПодарка(СтрокаПодарка, "КоличествоУпаковок", "Количество", ЕстьОшибки);
		ПроверитьЗаполнениеЯчейкиСтрокиПодарка(СтрокаПодарка, "Номенклатура", "Номенклатура", ЕстьОшибки);
		Если ЗначениеЗаполнено(СтрокаПодарка.Номенклатура) Тогда
			СтруктураРеквизитов = Новый Структура("ИспользованиеХарактеристик", "ВидНоменклатуры.ИспользованиеХарактеристик");
			СтруктураНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаПодарка.Номенклатура, СтруктураРеквизитов);
			ИспользованиеХарактеристик = СтруктураНоменклатуры.ИспользованиеХарактеристик;
			Если НЕ ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать Тогда
				ПроверитьЗаполнениеЯчейкиСтрокиПодарка(СтрокаПодарка, "Характеристика", "Характеристика", ЕстьОшибки);
			КонецЕсли;
		КонецЕсли;
		ПроверитьЗаполнениеЯчейкиСтрокиПодарка(СтрокаПодарка, "Склад", "Склад", ЕстьОшибки);
		Если УчитыватьПодарокКакПродажу Тогда
			ПроверитьЗаполнениеЯчейкиСтрокиПодарка(СтрокаПодарка, "Цена", "Цена", ЕстьОшибки);
		Иначе
			КоличествоСтрокСОповещением = КоличествоСтрокСОповещением + 1;
			СписокСтрокСОповещением = СписокСтрокСОповещением + ?(КоличествоСтрокСОповещением = 1, "", ", ") + СтрокаПодарка.НомерСтроки;
		КонецЕсли;
		Если КоличествоСтрокСОповещением > 0 Тогда
			Если КоличествоСтрокСОповещением = 1 Тогда
				СтрокаДополнительногоОповещения = НСтр("ru = 'Подарок из строки %1 не перенесен в товары,'");
			Иначе
				СтрокаДополнительногоОповещения = НСтр("ru = 'Подарки из строк %1 не перенесены в товары,'");
			КонецЕсли;
			СтрокаДополнительногоОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаДополнительногоОповещения, СписокСтрокСОповещением);
			СтрокаДополнительногоОповещения = СтрокаДополнительногоОповещения + " " + НСтр("ru = 'так как в параметрах скидки не установлен признак ""Учитывать подарок как продажу""'"); 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеЯчейкиСтрокиПодарка(СтрокаПодарка, ИмяКолонки, ПредставлениеКолонки, ЕстьОшибки)
	Если НЕ ЗначениеЗаполнено(СтрокаПодарка[ИмяКолонки]) Тогда
		СтрокаСообщения = НСтр("ru = 'Невозможно перенести подарок из строки %1 в товары: не заполнена колонка ""%2""'");
		ЕстьОшибки = Истина;
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.НомерСтроки, ПредставлениеКолонки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрокаСообщения,
			,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Подарки", СтрокаПодарка.НомерСтроки, ИмяКолонки),
			"Объект");
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет существование запрета продажи для товаров табличной части в указанном магазине на указанную дату
// Параметры: 
//		Номенклатура - СправочникСсылка.Номенклатура - проверяемый товар
// 		Магазин - СправочникСсылка.Магазины - магазин, запрет продажи для которого проверяется
//		Дата - Дата - дата проверки
//
// Возвращаемое значение: 
//		ЗапрещенаПродажа - Булево - Истина, когда запрет продажи установлен, Ложь, когда запрета нет
Функция ЗапрещенаПродажаТовара(Номенклатура, Магазин, ДатаРасчета) Экспорт
	
	ЗапрещенаПродажа = Ложь;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗапретРозничнойПродажи") Тогда

		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДействиеСкидок.СкидкаНаценка КАК СкидкаНаценка,
		|	ДействиеСкидок.СкидкаНаценка.СегментНоменклатурыПредоставления КАК СегментНоменклатурыПредоставления,
		|	ТЧВремяДействия.ВремяНачала КАК ВремяНачала,
		|	ТЧВремяДействия.ВремяОкончания КАК ВремяОкончания
		|ПОМЕСТИТЬ ДействиеСкидок
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
		|			&ДатаРасчета,
		|			(КОНЕЦПЕРИОДА(ДатаОкончания, ДЕНЬ) >= &ДатаРасчета
		|				ИЛИ ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|				И СкидкаНаценка.СтатусДействия = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
		|				И СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ЗапретРозничнойПродажи)
		|				И (Магазин = &Магазин
		|					ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))) КАК ДействиеСкидок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК ТЧУсловия
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок.ВремяДействия КАК ТЧВремяДействия
		|			ПО (ТЧВремяДействия.Ссылка = ТЧУсловия.УсловиеПредоставления)
		|				И (ВЫБОР
		|					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
		|						ТОГДА 1
		|					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
		|						ТОГДА 2
		|					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
		|						ТОГДА 3
		|					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Четверг)
		|						ТОГДА 4
		|					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
		|						ТОГДА 5
		|					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
		|						ТОГДА 6
		|					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
		|						ТОГДА 7
		|					ИНАЧЕ ДЕНЬНЕДЕЛИ(&ДатаРасчета)
		|				КОНЕЦ = ДЕНЬНЕДЕЛИ(&ДатаРасчета))
		|				И (ЧАС(&ДатаРасчета) > ЧАС(ТЧВремяДействия.ВремяНачала)
		|						И ЧАС(&ДатаРасчета) < ЧАС(ТЧВремяДействия.ВремяОкончания)
		|					ИЛИ ЧАС(&ДатаРасчета) = ЧАС(ТЧВремяДействия.ВремяНачала)
		|						И МИНУТА(&ДатаРасчета) > МИНУТА(ТЧВремяДействия.ВремяНачала)
		|					ИЛИ ЧАС(&ДатаРасчета) = ЧАС(ТЧВремяДействия.ВремяОкончания)
		|						И МИНУТА(&ДатаРасчета) < МИНУТА(ТЧВремяДействия.ВремяОкончания)
		|					ИЛИ ЧАС(&ДатаРасчета) = ЧАС(ТЧВремяДействия.ВремяНачала)
		|						И МИНУТА(&ДатаРасчета) = МИНУТА(ТЧВремяДействия.ВремяНачала)
		|						И СЕКУНДА(&ДатаРасчета) >= СЕКУНДА(ТЧВремяДействия.ВремяНачала)
		|					ИЛИ ЧАС(&ДатаРасчета) = ЧАС(ТЧВремяДействия.ВремяОкончания)
		|						И МИНУТА(&ДатаРасчета) = МИНУТА(ТЧВремяДействия.ВремяОкончания)
		|						И СЕКУНДА(&ДатаРасчета) < СЕКУНДА(ТЧВремяДействия.ВремяОкончания))
		|		ПО (ТЧУсловия.Ссылка = ДействиеСкидок.СкидкаНаценка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДействиеСкидок.СкидкаНаценка КАК СкидкаНаценка,
		|	ДействиеСкидок.СегментНоменклатурыПредоставления КАК Сегмент,
		|	НоменклатураСегмента.Номенклатура КАК Номенклатура,
		|	ДействиеСкидок.ВремяНачала КАК ВремяНачала,
		|	ДействиеСкидок.ВремяОкончания КАК ВремяОкончания
		|ИЗ
		|	ДействиеСкидок КАК ДействиеСкидок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|		ПО ДействиеСкидок.СегментНоменклатурыПредоставления = НоменклатураСегмента.Сегмент
		|ГДЕ
		|	(НоменклатураСегмента.Номенклатура = &Номенклатура
		|			ИЛИ НоменклатураСегмента.Номенклатура ЕСТЬ NULL
		|				И ДействиеСкидок.СегментНоменклатурыПредоставления = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	NULL,
		|	ТаблицаСправочник.Ссылка,
		|	NULL,
		|	NULL
		|ИЗ
		|	Справочник.Номенклатура КАК ТаблицаСправочник
		|ГДЕ
		|	(ТаблицаСправочник.ПометкаУдаления
		|			ИЛИ ТаблицаСправочник.Блокирован)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДействиеСкидок"
		;
		Запрос.УстановитьПараметр("Магазин", Магазин);
		Запрос.УстановитьПараметр("ДатаРасчета", ?(ЗначениеЗаполнено(ДатаРасчета), ДатаРасчета, ТекущаяДатаСеанса()));

	Иначе

		Запрос.Текст =	//	LNK 31.07.2020 08:52:34
		"ВЫБРАТЬ
		|	ТаблицаСправочник.Ссылка КАК Номенклатура,
		|	ТаблицаСправочник.Блокирован КАК Блокирован,
		|	ТаблицаСправочник.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.Номенклатура КАК ТаблицаСправочник
		|ГДЕ
		|	ТаблицаСправочник.Ссылка = &Номенклатура
		|	И (ТаблицаСправочник.Блокирован
		|			ИЛИ ТаблицаСправочник.ПометкаУдаления)"
		;

	КонецЕсли;
	
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		ЗапрещенаПродажа = Истина;

	КонецЕсли;
	
	Возврат ЗапрещенаПродажа;
	
КонецФункции

// Процедура проверяет существование запрета продажи для товаров табличной части на указанную дату 
// запрещенные к продаже товары удаляются из табличной части
// Параметры: 
// 		Магазин - Магазин, запрет продажи для которого проверяется
//		ТаблицаТоваров - ТабличнаяЧасть - табличная часть документа, в который содержатся проверяемые товары
//		Дата - Дата - дата проверки
//
Процедура ПроверитьЗапретРозничнойПродажиТаблицыТоваров(
	Объект,
	ИмяТаблицыТоваров,
	Отказ,
	ИтоговоеСообщение = "",
	ДатаРасчета = Неопределено,
	Сообщать = Истина
	) Экспорт
	
	Если ПолучитьФункциональнуюОпциюИспользованияЗапретаРозничнойПродажи() Тогда

		ТаблицаТоваров = Объект[ИмяТаблицыТоваров];
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Т.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДействиеСкидок.СкидкаНаценка КАК СкидкаНаценка,
		|	ДействиеСкидок.СкидкаНаценка.СегментНоменклатурыПредоставления КАК СегментНоменклатурыПредоставления
		|ПОМЕСТИТЬ ДействиеСкидок
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
		|			&ДатаРасчета,
		|			(КОНЕЦПЕРИОДА(ДатаОкончания, ДЕНЬ) >= &ДатаРасчета
		|				ИЛИ ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|				И СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ЗапретРозничнойПродажи)
		|				И СкидкаНаценка.СтатусДействия = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
		|				И (Магазин = &Магазин
		|					ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))) КАК ДействиеСкидок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДействиеСкидок.СкидкаНаценка КАК СкидкаНаценка,
		|	ДействиеСкидок.СегментНоменклатурыПредоставления КАК Сегмент,
		|	НоменклатураСегмента.Номенклатура КАК Номенклатура,
		|	ИСТИНА КАК ЗапрещеныПродажи
		|ПОМЕСТИТЬ ЗапретыПродаж
		|ИЗ
		|	ДействиеСкидок КАК ДействиеСкидок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|		ПО ДействиеСкидок.СегментНоменклатурыПредоставления = НоменклатураСегмента.Сегмент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК ТЧУсловия
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок.ВремяДействия КАК ТЧВремяДействия
		|			ПО (ТЧВремяДействия.Ссылка = ТЧУсловия.УсловиеПредоставления)
		|				И (ВЫБОР
		|					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
		|						ТОГДА 1
		|					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
		|						ТОГДА 2
		|					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
		|						ТОГДА 3
		|					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Четверг)
		|						ТОГДА 4
		|					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
		|						ТОГДА 5
		|					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
		|						ТОГДА 6
		|					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
		|						ТОГДА 7
		|					ИНАЧЕ ДЕНЬНЕДЕЛИ(&ДатаРасчета)
		|				КОНЕЦ = ДЕНЬНЕДЕЛИ(&ДатаРасчета))
		|				И (ЧАС(&ДатаРасчета) > ЧАС(ТЧВремяДействия.ВремяНачала)
		|						И ЧАС(&ДатаРасчета) < ЧАС(ТЧВремяДействия.ВремяОкончания)
		|					ИЛИ ЧАС(&ДатаРасчета) = ЧАС(ТЧВремяДействия.ВремяНачала)
		|						И МИНУТА(&ДатаРасчета) > МИНУТА(ТЧВремяДействия.ВремяНачала)
		|					ИЛИ ЧАС(&ДатаРасчета) = ЧАС(ТЧВремяДействия.ВремяОкончания)
		|						И МИНУТА(&ДатаРасчета) < МИНУТА(ТЧВремяДействия.ВремяОкончания)
		|					ИЛИ ЧАС(&ДатаРасчета) = ЧАС(ТЧВремяДействия.ВремяНачала)
		|						И МИНУТА(&ДатаРасчета) = МИНУТА(ТЧВремяДействия.ВремяНачала)
		|						И СЕКУНДА(&ДатаРасчета) >= СЕКУНДА(ТЧВремяДействия.ВремяНачала)
		|					ИЛИ ЧАС(&ДатаРасчета) = ЧАС(ТЧВремяДействия.ВремяОкончания)
		|						И МИНУТА(&ДатаРасчета) = МИНУТА(ТЧВремяДействия.ВремяОкончания)
		|						И СЕКУНДА(&ДатаРасчета) < СЕКУНДА(ТЧВремяДействия.ВремяОкончания))
		|		ПО (ТЧУсловия.Ссылка = ДействиеСкидок.СкидкаНаценка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДействиеСкидок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Номенклатура.Наименование КАК Наименование,
		|	ВЫБОР
		|		КОГДА ЗапретыПродаж.ЗапрещеныПродажи ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ НЕ ЗапретыПродаж.ЗапрещеныПродажи
		|	КОНЕЦ КАК РазрешеныПродажи
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗапретыПродаж КАК ЗапретыПродаж
		|		ПО (ЗапретыПродаж.Номенклатура = Товары.Номенклатура
		|				ИЛИ ЗапретыПродаж.Номенклатура ЕСТЬ NULL
		|					И ЗапретыПродаж.Сегмент = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка))
		|ГДЕ
		|	НЕ ВЫБОР
		|				КОГДА ЗапретыПродаж.ЗапрещеныПродажи ЕСТЬ NULL
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ НЕ ЗапретыПродаж.ЗапрещеныПродажи
		|			КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЗапретыПродаж"
		);
		Запрос.УстановитьПараметр("Товары", ТаблицаТоваров.Выгрузить());

		Если ДатаРасчета = Неопределено Тогда
			Запрос.УстановитьПараметр("ДатаРасчета", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
		Иначе
			Запрос.УстановитьПараметр("ДатаРасчета", ДатаРасчета);
		КонецЕсли;
		Запрос.УстановитьПараметр("Магазин", Объект.Магазин);

		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда
			Отказ = Истина;
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				СтрокаТоваров = ТаблицаТоваров[Выборка.НомерСтрокиДокумента-1];
				ТекстСообщения = НСтр("ru='В строке %1 товар ""%2"" запрещен к продаже.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НомерСтрокиДокумента, Выборка.Наименование);
				Если Сообщать Тогда
					ИмяПоля = ИмяТаблицыТоваров + "[" + Формат(Выборка.НомерСтрокиДокумента - 1, "ЧДЦ=0; ЧН=0; ЧГ=0") + "].Номенклатура";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						Объект,
						ИмяПоля
					);
				Иначе
					ИтоговоеСообщение = ИтоговоеСообщение + ТекстСообщения + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
// -HVOYA. 29.08.2016 16:30:55, Львова Е.А.

/////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА СКИДОК (НАЦЕНОК) ПО ДОКУМЕНТАМ

////////////////////////////////////////////////////////////////////////////////
// ОТОБРАЖЕНИЕ СКИДКИ

// Обновляет табличную Части скидки
//
// Параметры:
//  Объект - Чек ККМ или Реализация Товаров
//  ИмяТЧ - Имя табличной части
//  ИмяОсновнойТЧ - Имя табличной части
//
Процедура ОбновитьОтображениеСкидки(Объект, ИмяОсновнойТЧ = "Товары", ИмяТЧ = "СкидкиНаценки") Экспорт

	ОсновнаяТаблица = Объект[ИмяОсновнойТЧ].Выгрузить();
	
	Для каждого СтрокаСкидкиНаценки Из Объект[ИмяТЧ] Цикл
		
		КлючСвязи = СтрокаСкидкиНаценки.КлючСвязи;
		
		СтрокаОсновнойТаблицы = ОсновнаяТаблица.Найти(КлючСвязи, "КлючСвязи");
		
		Если НЕ СтрокаОсновнойТаблицы = Неопределено Тогда
		
			СтрокаСкидкиНаценки.Номенклатура               = СтрокаОсновнойТаблицы.Номенклатура;
			СтрокаСкидкиНаценки.Характеристика             = СтрокаОсновнойТаблицы.Характеристика;
			СтрокаСкидкиНаценки.НомерСтрокиОсновойТаблицы  = СтрокаОсновнойТаблицы.НомерСтроки;
			СтрокаСкидкиНаценки.ХарактеристикиИспользуются = СтрокаОсновнойТаблицы.ХарактеристикиИспользуются

		КонецЕсли;
		
		Если ТипЗнч(СтрокаСкидкиНаценки.СкидкаНаценка) = Тип("СправочникСсылка.СкидкиНаценки") Тогда	//	LNK 28.11.2019 10:52:13

			СтрокаСкидкиНаценки.СкидкаЗапрещенаКПросмору = НЕ ОбщегоНазначенияРТСервер.ПроверитьДоступКРеквизиту(СтрокаСкидкиНаценки, "СкидкаНаценка", "Справочник.СкидкиНаценки");

		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ОбновитьОтображениеСкидки()

// Функция формирует текст запрос для динамического списка номенклатуры в обработке "Подбор товаров"
// если включена функциональная опция использования ассортимента
// и подбор открыт с учетом отбора по ассортименту
// Параметры: 
// 		УсловиеАссортимента - Строка - добавляется к тексту запроса
// Возвращаемое значение: 
// 		ТекстЗапроса - Строка - итоговый текст запроса
Функция ТекстЗапросаДинамическогоСпискаДляПодбора() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СправочникНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	СправочникНоменклатура.Родитель КАК Родитель,
	|	СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
	|	СправочникНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ЭтоГруппа
	|			ТОГДА ВЫБОР
	|					КОГДА СправочникНоменклатура.ПометкаУдаления
	|						ТОГДА 13
	|					ИНАЧЕ 12
	|				КОНЕЦ
	|		ИНАЧЕ -1 + ВЫБОР
	|				КОГДА СправочникНоменклатура.ПометкаУдаления
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ + ВЫБОР
	|				КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать)
	|					ТОГДА 1
	|				ИНАЧЕ 3
	|			КОНЕЦ
	|	КОНЕЦ КАК ИндексКартинки,
	|	ДействиеСкидок.СкидкаНаценка КАК СкидкаНаценка
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	|				&НаДату,
	|				(КОНЕЦПЕРИОДА(ДатаОкончания, ДЕНЬ) >= &НаДату
	|					ИЛИ ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|					И СкидкаНаценка.СтатусДействия = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|					И СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ЗапретРозничнойПродажи)
	|					И (Магазин = &Магазин
	|						ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))) КАК ДействиеСкидок
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|			ПО ДействиеСкидок.СкидкаНаценка.СегментНоменклатурыПредоставления = НоменклатураСегмента.Сегмент
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК ТЧУсловия
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок.ВремяДействия КАК ТЧВремяДействия
	|				ПО (ТЧВремяДействия.Ссылка = ТЧУсловия.УсловиеПредоставления)
	|					И (ВЫБОР
	|						КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
	|							ТОГДА 1
	|						КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
	|							ТОГДА 2
	|						КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
	|							ТОГДА 3
	|						КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Четверг)
	|							ТОГДА 4
	|						КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
	|							ТОГДА 5
	|						КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
	|							ТОГДА 6
	|						КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
	|							ТОГДА 7
	|						ИНАЧЕ ДЕНЬНЕДЕЛИ(&НаДату)
	|					КОНЕЦ = ДЕНЬНЕДЕЛИ(&НаДату))
	|					И (ЧАС(&НаДату) > ЧАС(ТЧВремяДействия.ВремяНачала)
	|							И ЧАС(&НаДату) < ЧАС(ТЧВремяДействия.ВремяОкончания)
	|						ИЛИ ЧАС(&НаДату) = ЧАС(ТЧВремяДействия.ВремяНачала)
	|							И МИНУТА(&НаДату) > МИНУТА(ТЧВремяДействия.ВремяНачала)
	|						ИЛИ ЧАС(&НаДату) = ЧАС(ТЧВремяДействия.ВремяОкончания)
	|							И МИНУТА(&НаДату) < МИНУТА(ТЧВремяДействия.ВремяОкончания)
	|						ИЛИ ЧАС(&НаДату) = ЧАС(ТЧВремяДействия.ВремяНачала)
	|							И МИНУТА(&НаДату) = МИНУТА(ТЧВремяДействия.ВремяНачала)
	|							И СЕКУНДА(&НаДату) >= СЕКУНДА(ТЧВремяДействия.ВремяНачала)
	|						ИЛИ ЧАС(&НаДату) = ЧАС(ТЧВремяДействия.ВремяОкончания)
	|							И МИНУТА(&НаДату) = МИНУТА(ТЧВремяДействия.ВремяОкончания)
	|							И СЕКУНДА(&НаДату) < СЕКУНДА(ТЧВремяДействия.ВремяОкончания))
	|			ПО (ТЧУсловия.Ссылка = ДействиеСкидок.СкидкаНаценка)
	|		ПО (НоменклатураСегмента.Номенклатура = СправочникНоменклатура.Ссылка
	|				ИЛИ НоменклатураСегмента.Номенклатура ЕСТЬ NULL
	|					И ДействиеСкидок.СкидкаНаценка.СегментНоменклатурыПредоставления = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка))
	|ГДЕ
	|	ДействиеСкидок.СкидкаНаценка ЕСТЬ NULL
	|{ГДЕ
	|	(СправочникНоменклатура.Ссылка В
	|			(ВЫБРАТЬ
	|				Сегменты.Номенклатура
	|			ИЗ
	|				РегистрСведений.НоменклатураСегмента КАК Сегменты
	|			ГДЕ
	|				Сегменты.Сегмент = &СегментНоменклатуры)) КАК Поле2}"
	;

	Возврат ТекстЗапроса;
	
КонецФункции

// Обрабатывает структуру шаблона и устанавливает значения некоторых параметров
// которые должны отображаться только при определенных условиях
// а данные должны получаться отдельными запросами
Процедура ОбработатьСтруктуруШаблонаЧекаПриПечати(СтруктураШаблона, ДокументСсылка) Экспорт
	
	Для Каждого СтрокаШаблонаУровень1 Из СтруктураШаблона.Шаблон.Строки Цикл
		Если СтрокаШаблонаУровень1.Элемент = "Подвал" ИЛИ СтрокаШаблонаУровень1.Элемент = "Шапка" Тогда
			МассивУдаляемыхСтрок = Новый Массив;
			Для Каждого СтрокаШаблонаУровень2 Из СтрокаШаблонаУровень1.Строки Цикл
				Если СтрокаШаблонаУровень2.Элемент = "%%Скидки.СуммаНакопления%%" Тогда
					РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Ссылка, Дата, Проведен, ВидОперации, ДисконтнаяКарта, СтатусЧекаККМ, ОтчетОРозничныхПродажах");
					Если ЗначениеЗаполнено(РеквизитыДокумента.ДисконтнаяКарта) Тогда
						ОбработатьПараметрСуммыНакопления(РеквизитыДокумента, СтрокаШаблонаУровень2);
					Иначе
						МассивУдаляемыхСтрок.Добавить(СтрокаШаблонаУровень2);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Для Каждого УдаляемаяСтрока ИЗ МассивУдаляемыхСтрок Цикл
				СтрокаШаблонаУровень1.Строки.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает структуру шаблона и устанавливает значения некоторых параметров
// которые должны отображаться только при определенных условиях
// а данные должны получаться отдельными запросами
Процедура ОбработатьСтруктуруШаблонаЧекаПриПредварительномПросмотре(СтруктураШаблона, ДокументСсылка) Экспорт
	
	РеквизитыДокумента = Неопределено;
	
	Для Каждого СтрокаШаблонаУровень2 Из СтруктураШаблона.Шапка Цикл
		КлючЭлемента = Неопределено;
		Для Каждого СтрокаСоответствия ИЗ СтрокаШаблонаУровень2 Цикл
			КлючЭлемента = СтрокаСоответствия.Ключ;
		КонецЦикла;
		Если КлючЭлемента.Элемент = "%%Скидки.СуммаНакопления%%" Тогда
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Ссылка, Дата, Проведен, ВидОперации, ДисконтнаяКарта, СтатусЧекаККМ, ОтчетОРозничныхПродажах");
			Если ЗначениеЗаполнено(РеквизитыДокумента.ДисконтнаяКарта) Тогда
				ОбработатьПараметрСуммыНакопления(РеквизитыДокумента, КлючЭлемента);
				ЗначениеЭлемента = Новый Массив;
				ЗначениеЭлемента.Добавить(КлючЭлемента.Элемент);
				СтрокаШаблонаУровень2.Очистить(); 
				СтрокаШаблонаУровень2.Вставить(КлючЭлемента, ЗначениеЭлемента);
			Иначе
				СтрокаШаблонаУровень2.Очистить();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаШаблонаУровень2 Из СтруктураШаблона.Подвал Цикл
		КлючЭлемента = Неопределено;
		Для Каждого СтрокаСоответствия ИЗ СтрокаШаблонаУровень2 Цикл
			КлючЭлемента = СтрокаСоответствия.Ключ;
		КонецЦикла;
		Если КлючЭлемента.Элемент = "%%Скидки.СуммаНакопления%%" Тогда
			Если РеквизитыДокумента = Неопределено Тогда
				РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Ссылка, Дата, Проведен, ВидОперации, ДисконтнаяКарта, СтатусЧекаККМ, ОтчетОРозничныхПродажах");
			КонецЕсли;
			Если ЗначениеЗаполнено(РеквизитыДокумента.ДисконтнаяКарта) Тогда
				ОбработатьПараметрСуммыНакопления(РеквизитыДокумента, КлючЭлемента);
				ЗначениеЭлемента = Новый Массив;
				ЗначениеЭлемента.Добавить(КлючЭлемента.Элемент);
				СтрокаШаблонаУровень2.Очистить(); 
				СтрокаШаблонаУровень2.Вставить(КлючЭлемента, ЗначениеЭлемента);
			Иначе
				СтрокаШаблонаУровень2.Очистить();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ОбработатьПараметрСуммыНакопления(РеквизитыДокумента, КлючЭлемента)
	
	СуммаНакопления = СуммаНакопленияПоКартеДляПечатиЧека(РеквизитыДокумента);

	Если ПустаяСтрока(КлючЭлемента.Префикс) Тогда
		Префикс = "Сумма накопления: ";
	Иначе
		Префикс = КлючЭлемента.Префикс;
		КлючЭлемента.Префикс = "";
	КонецЕсли;
	Если ПустаяСтрока(КлючЭлемента.Постфикс) Тогда
		Постфикс = " грн.";
	Иначе
		Постфикс = КлючЭлемента.Постфикс;
		КлючЭлемента.Постфикс = "";
	КонецЕсли;
	Если КлючЭлемента.ТипЭлемента <> "СтрокаТекста" Тогда
		КлючЭлемента.ТипЭлемента = "СтрокаТекста";
	КонецЕсли;
	КлючЭлемента.Элемент = Префикс + СуммаНакопления + Постфикс;
	
КонецПроцедуры

// Функция возвращает значение функциональной опции "ИспользоватьЗапретРозничнойПродажи"
// 
Функция ПолучитьФункциональнуюОпциюИспользованияЗапретаРозничнойПродажи() Экспорт
	
	Результат = ПолучитьФункциональнуюОпцию("ИспользоватьЗапретРозничнойПродажи");
	Если Результат <> Истина Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//	LNK 19.09.2018 13:04:55
Функция ПолучитьСписокСкидочныхКупонов(ТабличнаяЧасть)

	СписокКупонов = Новый Массив;

	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл

		Если СписокКупонов.Найти(СтрокаТабличнойЧасти.СкидочныйКупон) = Неопределено Тогда

			СписокКупонов.Добавить(СтрокаТабличнойЧасти.СкидочныйКупон);

		КонецЕсли;

	КонецЦикла;

	Возврат СписокКупонов;

КонецФункции

