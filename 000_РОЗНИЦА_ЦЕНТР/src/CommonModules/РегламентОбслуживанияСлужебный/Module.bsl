#Область ПоддержкаПроцессаПродаж

//	LNK 26.05.2017 13:37:54
Процедура РегламентПроцессаПродаж() Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ТекущиеСекунды = ТекущаяДата() - НачалоДня(ТекущаяДата());	//	LNK 23.11.2023 05:08:53

	Если ТекущиеСекунды > 23 * 3600 ИЛИ ТекущиеСекунды < 5 * 3600 Тогда
//	.. в интервале от 23:00 вечера до 5:00 утра

		ФоновыеЗадания.Выполнить("РегламентОбслуживанияСлужебный.РегламентПроцессаПродаж_УдалитьВременныеЧеки",, "ОЧИСТКА_ЧЕКОВ");

	КонецЕсли;

	ФоновыеЗадания.Выполнить("РегламентОбслуживанияСлужебный.РегламентПроцессаПродаж_ОчиститьКачествоОбслуживания",, "ОЧИСТКА_КАЧЕСТВА_ОБСЛУЖИВАНИЯ");
	ФоновыеЗадания.Выполнить("РегламентОбслуживанияСлужебный.РегламентПроцессаПродаж_РеализацияЗаказовПокупателей",, "РЕАЛИЗАЦИЯ_ЗАКАЗОВ_ПОКУПАТЕЛЕЙ");

//	РегламентПроцессаПродаж_РегистрацияДляNavision();

КонецПроцедуры

//	LNK 23.07.2017 16:33:53
Процедура РегламентПроцессаПродаж_УдалитьВременныеЧеки()	Экспорт

	УстановитьПривилегированныйРежим(Истина);

//	Данный регламент будет выполняться в каждом узле, включая ЦБ. Причина - удаление объектов
//	(в данном случае - чеков ККМ) по плану обмена не ездит. Поэтому и смысла нет передавать
//	такие события в другие узлы. Ведь цель - физическое удаление отложенных чеков.
//	При каждой записи "снимаем" регистрацию в узлы.

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Фильтр.Магазин КАК Магазин,
	|	ТаблицаКассыККМ.Ссылка КАК КассаККМ,
	|	ТаблицаКассыККМ.НомерВМагазине КАК НомерВМагазине,
	|	Фильтр.ОкончаниеКассовойСмены КАК ОкончаниеКассовойСмены
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокументы.Магазин КАК Магазин,
	|		ТаблицаДокументы.КассаККМ КАК КассаККМ,
	|		МАКСИМУМ(ТаблицаДокументы.ОкончаниеКассовойСмены) КАК ОкончаниеКассовойСмены
	|	ИЗ
	|		Документ.КассоваяСмена КАК ТаблицаДокументы
	|	ГДЕ
	|		ТаблицаДокументы.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Закрыта)
	|		И ТаблицаДокументы.Проведен
	|		И ВЫБОР
	|				КОГДА &ЭтоГлавныйУзел
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТаблицаДокументы.Магазин = &Магазин
	|			КОНЕЦ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаДокументы.Магазин,
	|		ТаблицаДокументы.КассаККМ) КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК ТаблицаКассыККМ
	|		ПО Фильтр.Магазин = ТаблицаКассыККМ.Магазин
	|			И Фильтр.КассаККМ = ТаблицаКассыККМ.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерВМагазине
	|ИТОГИ
	|	КОЛИЧЕСТВО(КассаККМ)
	|ПО
	|	Магазин"
	);
	Запрос.УстановитьПараметр("Магазин", ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);
	Запрос.УстановитьПараметр("ЭтоГлавныйУзел", ОбменДаннымиПовтИсп.ЭтоГлавныйУзел());

	МагазиныВыборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ЗапросПоОтложеннымЧекам = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаВедущая.Дата КАК Дата,
	|	ТаблицаВедущая.Ссылка КАК ОтложенныйЧек,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаВедущая.ОтчетОРозничныхПродажах.КассоваяСмена, ЗНАЧЕНИЕ(Документ.КассоваяСмена.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.КассоваяСмена.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ТаблицаПоддержка.Ссылка, ЗНАЧЕНИЕ(Документ.КассоваяСмена.ПустаяСсылка))
	|		ИНАЧЕ ТаблицаВедущая.ОтчетОРозничныхПродажах.КассоваяСмена
	|	КОНЕЦ КАК КассоваяСмена,
	|	ТаблицаВедущая.СтатусЧекаККМ КАК СтатусЧекаККМ
	|ИЗ
	|	Документ.ЧекККМ КАК ТаблицаВедущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК ТаблицаПоддержка
	|		ПО ТаблицаВедущая.КассаККМ = ТаблицаПоддержка.КассаККМ
	|			И (НЕ ТаблицаПоддержка.ПометкаУдаления)
	|			И (ТаблицаВедущая.Дата МЕЖДУ ТаблицаПоддержка.НачалоКассовойСмены И ТаблицаПоддержка.ОкончаниеКассовойСмены)
	|			И (ТаблицаПоддержка.ОкончаниеКассовойСмены <= &ОкончаниеКассовойСмены)
	|ГДЕ
	|	ТаблицаВедущая.КассаККМ = &КассаККМ
	|	И ТаблицаВедущая.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|	И ТаблицаВедущая.Дата < &ОкончаниеКассовойСмены
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ОтложенныйЧек"
	);
	
	Пока МагазиныВыборка.Следующий() Цикл

		ДеталиВыборка = МагазиныВыборка.Выбрать();

		Пока ДеталиВыборка.Следующий() Цикл

			ЗапросПоОтложеннымЧекам.УстановитьПараметр("КассаККМ", ДеталиВыборка.КассаККМ);
			ЗапросПоОтложеннымЧекам.УстановитьПараметр("ОкончаниеКассовойСмены", ДеталиВыборка.ОкончаниеКассовойСмены);

			ЧекиВыборка = ЗапросПоОтложеннымЧекам.Выполнить().Выбрать();

			Пока ЧекиВыборка.Следующий() Цикл

				ДокументОбъект = ЧекиВыборка.ОтложенныйЧек.ПолучитьОбъект();
				#Если _ Тогда
				ДокументОбъект = Документы.ЧекККМ.СоздатьДокумент();
				#КонецЕсли

				НачатьТранзакцию();

				Попытка

					Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

					//	1.	Аннуляция. Делаем только в периферии.
						Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл

							РегистрыСведений.АннуляцияПродажи.Регистрация(
								  ДокументОбъект.Ссылка
								, ЧекиВыборка.Дата
								, ЧекиВыборка.СтатусЧекаККМ
								, ДокументОбъект.Магазин
								, ДокументОбъект.КассаККМ
								, ЧекиВыборка.КассоваяСмена
								, ДокументОбъект.Автор
								, СтрокаТабличнойЧасти.Номенклатура
								, СтрокаТабличнойЧасти.Упаковка
								, СтрокаТабличнойЧасти.КоличествоУпаковок
								, СтрокаТабличнойЧасти.Цена
								, СтрокаТабличнойЧасти.Сумма
								, ИмяКомпьютера()
							);

						КонецЦикла;

					КонецЕсли;

				//	2.	Движения документа.
					Для каждого НаборЗаписей Из ДокументОбъект.Движения Цикл

						НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);
						НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
						НаборЗаписей.ДополнительныеСвойства.Вставить("СлужебноеУдаление", Истина);

					//	Записываем пустой набор записей - очистка на всякий случай.
						НаборЗаписей.Записать();

					КонецЦикла;

				//	3. Документы.ЧекККМ
					ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);
					ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
					ДокументОбъект.ДополнительныеСвойства.Вставить("СлужебноеУдаление", Истина);

					ДокументОбъект.Удалить();

					ЗафиксироватьТранзакцию();

				Исключение

					ТекстОшибки = ОписаниеОшибки();

					ОтменитьТранзакцию();

					ЗаписьЖурналаРегистрации("РегламентПроцессаПродаж"
						, УровеньЖурналаРегистрации.Ошибка
						, Метаданные.Документы.ЧекККМ, ЧекиВыборка.ОтложенныйЧек
						, ТекстОшибки
						, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
					);

				КонецПопытки;

			КонецЦикла;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

//	LNK 19.02.2019 14:38:04
Процедура РегламентПроцессаПродаж_ОчиститьКачествоОбслуживания()	Экспорт

	УстановитьПривилегированныйРежим(Истина);

//	Работаем только в центре, пусть едет всё по обменам.
	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		РегистрыСведений.КачествоОбслуживанияПродаж.РегламентнаяОчистка();

	Иначе

	//	Регистр никуда не "ездит".. чистим в каждой базе.
		РегистрыСведений.КачествоОбслуживанияПродажТребование.РегламентнаяОчистка();

	КонецЕсли;

КонецПроцедуры

Процедура РегламентПроцессаПродаж_РегистрацияДляNavision()	//	LNK 03.08.2021 05:58:54

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ПолитикаМагазина = РозничныеПродажиСерверПовтИсп.РеквизитыМагазина(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() И ПолитикаМагазина.УчитыватьNavisionРегламентомОрдерПроведенный = Истина Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаОрдеры.Дата КАК Период,
		|	ТаблицаОрдеры.Ссылка КАК Регистратор,
		|	ТаблицаОрдеры.ДокументОснование КАК ДокументОснование,
		|	ТаблицаОрдеры.Магазин КАК Магазин
		|ПОМЕСТИТЬ Ордеры
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК ТаблицаОрдеры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаРегистрация
		|		ПО ТаблицаОрдеры.Ссылка = ТаблицаРегистрация.Объект
		|			И ТаблицаОрдеры.Магазин = ТаблицаРегистрация.Магазин
		|ГДЕ
		|	ТаблицаОрдеры.Проведен
		|	И ТаблицаОрдеры.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ДЕНЬ, -25) И НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|	И ТаблицаРегистрация.Объект ЕСТЬ NULL
		|	И ТаблицаОрдеры.ДокументОснование ССЫЛКА Документ.ПеремещениеТоваров
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОснования.Дата КАК Период,
		|	ТаблицаОснования.Ссылка КАК Регистратор,
		|	ТаблицаОснования.Ссылка КАК ДокументОснование,
		|	1 КАК КлючПорядка
		|ИЗ
		|	Ордеры КАК Ордеры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ТаблицаОснования
		|		ПО Ордеры.ДокументОснование = ТаблицаОснования.Ссылка
		|			И (ТаблицаОснования.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаРегистрация
		|		ПО Ордеры.ДокументОснование = ТаблицаРегистрация.Объект
		|			И Ордеры.Магазин = ТаблицаРегистрация.Магазин
		|ГДЕ
		|	ТаблицаРегистрация.Объект ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Ордеры.Период,
		|	Ордеры.Регистратор,
		|	Ордеры.ДокументОснование,
		|	2
		|ИЗ
		|	Ордеры КАК Ордеры
		|
		|УПОРЯДОЧИТЬ ПО
		|	КлючПорядка,
		|	Период,
		|	Регистратор
		|ИТОГИ
		|	КОЛИЧЕСТВО(Регистратор)
		|ПО
		|	ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Ордеры"
		);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		
		ОснованияВыборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ОснованияВыборка.Следующий() Цикл


		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	LNK 26.07.2022 11:16:49
Процедура РегламентПроцессаПродаж_РеализацияЗаказовПокупателей()	Экспорт

	РегистрыСведений.РеализацияЗаказовРегистрация.ОчиститьРегистрацию();

КонецПроцедуры

#КонецОбласти









