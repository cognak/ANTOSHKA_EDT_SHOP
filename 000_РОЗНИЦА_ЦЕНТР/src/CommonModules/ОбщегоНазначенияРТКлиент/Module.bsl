////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКИ ЗАПОЛНЕНИЯ

// Процедура проверяет заполнение необходимых реквизитов объекта.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Данные формы
//	СтруктураРеквизитов - Структура - Проверяемые реквизиты
//
// Возвращаемое значение:
//	Булево - Истина - ошибок не обнаружено.
//
Функция ПроверитьЗаполнениеРеквизитов(Объект, СтруктураРеквизитов)
	
	РеквизитыЗаполнены = Истина;
	ОчиститьСообщения();
	
	Для Каждого Элемент Из СтруктураРеквизитов Цикл
		
		Если Не ЗначениеЗаполнено(Объект[Элемент.Ключ]) Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Поле ""%1"" не заполнено'"),
				?(ПустаяСтрока(Элемент.Значение), Элемент.Ключ, Элемент.Значение)
			);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, ,Элемент.Ключ, "Объект");
			
			РеквизитыЗаполнены = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РеквизитыЗаполнены;
	
КонецФункции // ПроверитьЗаполнениеРеквизитов()

// Функция проверяет возможность заполнения табличной части документа.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма документа
//	ТабличнаяЧасть - ДанныеФормыКоллекция - Проверяемая табличная часть
//	СтруктураРеквизитов - Структура - Проверяемые реквизиты
//
// Возвращаемое значение:
//	Булево - Признак возможности заполнения табличной части
//
&НаКлиенте
Функция ПроверитьВозможностьЗаполненияТабличнойЧасти(Форма, ТабличнаяЧасть, СтруктураРеквизитов) Экспорт

	ЗаполнятьТабличнуюЧасть = Истина;
	
	Если Форма.Объект.Проведен Тогда
		
		КодОтвета = Вопрос(НСтр("ru = 'Заполнение возможно только в непроведенном документе, отменить проведение?'"), РежимДиалогаВопрос.ДаНет);
		Если КодОтвета = КодВозвратаДиалога.Да Тогда
			Если Не Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения)) Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Не удалось отменить проведение документа'"));
				ЗаполнятьТабличнуюЧасть = Ложь;
			КонецЕсли;
		Иначе
			ЗаполнятьТабличнуюЧасть = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Если ЗаполнятьТабличнуюЧасть Тогда	//	LNK 10.09.2018 11:34:07

		Если ТабличнаяЧасть <> Неопределено
		   И ТабличнаяЧасть.Количество() > 0
		Тогда
		
			КодОтвета = Вопрос(НСтр("ru = 'Табличная часть будет очищена, продолжить?'"), РежимДиалогаВопрос.ДаНет);
			Если КодОтвета = КодВозвратаДиалога.Нет Тогда
				ЗаполнятьТабличнуюЧасть = Ложь;
			КонецЕсли;
		
		КонецЕсли;

		Если ЗаполнятьТабличнуюЧасть И СтруктураРеквизитов <> Неопределено	Тогда

			ЗаполнятьТабличнуюЧасть = ПроверитьЗаполнениеРеквизитов(Форма.Объект, СтруктураРеквизитов);

		КонецЕсли;

	КонецЕсли;

	Возврат ЗаполнятьТабличнуюЧасть;
	
КонецФункции // ПроверитьВозможностьЗаполненияТабличнойЧасти()

// Процедура выполняет проверку заполнения необходимых реквизитов табличной части объекта
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Данные формы
//  СтруктураРеквизитов - Структура - Проверяемые реквизиты.
//  СтруктураТабличнаяЧасть - Структура - Структура содержащая наименование и представление табличной части.
//
Процедура ПроверитьЗаполнениеРеквизитовТабличнойЧасти(Объект, СтруктураТабличнаяЧасть, СтруктураРеквизитов, Отказ) Экспорт
	
	Для Каждого ТабличнаяЧасть Из СтруктураТабличнаяЧасть Цикл
		Для Каждого ПроверяемаяСтрокаТаблицы Из Объект[ТабличнаяЧасть.Ключ] Цикл
			Для Каждого ПроверяемыйРеквизит Из СтруктураРеквизитов Цикл
				Если НЕ ЗначениеЗаполнено(ПроверяемаяСтрокаТаблицы[ПроверяемыйРеквизит.Ключ]) Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""'"),
						ПроверяемыйРеквизит.Значение,
						ПроверяемаяСтрокаТаблицы.НомерСтроки,
						ТабличнаяЧасть.Значение
					);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						Объект,
						"Объект." + ТабличнаяЧасть.Ключ + "["+ (ПроверяемаяСтрокаТаблицы.НомерСтроки - 1) + "]." + ПроверяемыйРеквизит.Ключ,
						,
						Отказ
					);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеРеквизитовТабличнойЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ

Процедура УстановитьЗаголовокПриложенияРТ(ПриЗапуске = Ложь)	Экспорт	//	LNK 30.05.2021 05:55:12

	Если ПриЗапуске Тогда

		ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
		ЗаголовокПриложения    = "%Заголовок / %Пользователь /";

		ЗаголовокПриложения = СтрЗаменить(ЗаголовокПриложения, "%Заголовок"	  , ?(ПустаяСтрока(ПараметрыРаботыКлиента.ЗаголовокПриложения), "РОЗНИЦА", ПараметрыРаботыКлиента.ЗаголовокПриложения));
		ЗаголовокПриложения = СтрЗаменить(ЗаголовокПриложения, "%Пользователь", ПараметрыРаботыКлиента.ПредставлениеПользователя);

	Иначе

		ЗаголовокПриложения    = "%Заголовок (%Версия) / %КодПоЕДРПОУ / %Пользователь /";
		ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();

		Если ЗначениеЗаполнено(ПараметрыРаботыКлиента.ТекущийМагазин) Тогда

			ТекстЗаголовка = Формат(ПараметрыРаботыКлиента.ТекущийМагазинРеквизиты.НомерМагазина, "ЧЦ=3; ЧВН=; ЧГ=")
					+ "." + СокрЛП(ПараметрыРаботыКлиента.ТекущийМагазинРеквизиты.Наименование);

		Иначе

			ТекстЗаголовка = ПараметрыРаботыКлиента.ЗаголовокПриложения;

		КонецЕсли;

		Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() И ПараметрыРаботыКлиента.Свойство("ТекущийУзелРеквизиты") Тогда

		//	LNK 05.03.2024 05:56:36
			КодПоЕДРПОУ = СокрЛП(ПараметрыРаботыКлиента.ТекущийУзелРеквизиты.ОсновнаяОрганизация);

		Иначе

		//	LNK 04.03.2024 07:53:11
			Если ПараметрыРаботыКлиента.Свойство("ТекущаяОрганизацияРеквизиты") Тогда

					КодПоЕДРПОУ = ПараметрыРаботыКлиента.ТекущаяОрганизацияРеквизиты.Наименование;

			Иначе	КодПоЕДРПОУ = "..";

			КонецЕсли;

		КонецЕсли;

		Если НЕ ПустаяСтрока(ПараметрыРаботыКлиента.ТекущийУзелРеквизиты.МаркерУзла) Тогда

			ТекстЗаголовка = ТекстЗаголовка + " «" + ПараметрыРаботыКлиента.ТекущийУзелРеквизиты.МаркерУзла + "»";

		КонецЕсли;

		ЗаголовокПриложения = СтрЗаменить(ЗаголовокПриложения, "%Заголовок"		, СокрЛП(ТекстЗаголовка));
		ЗаголовокПриложения = СтрЗаменить(ЗаголовокПриложения, "%Версия"		, ПараметрыРаботыКлиента.ВерсияКонфигурации);
		ЗаголовокПриложения = СтрЗаменить(ЗаголовокПриложения, "%КодПоЕДРПОУ"	, СокрЛП(КодПоЕДРПОУ));
		ЗаголовокПриложения = СтрЗаменить(ЗаголовокПриложения, "%Пользователь"	, ПараметрыРаботыКлиента.ПредставлениеПользователя);

	КонецЕсли;
	
	Если НЕ ЗаголовокПриложения = ПолучитьЗаголовокКлиентскогоПриложения() Тогда

		УстановитьЗаголовокКлиентскогоПриложения(ЗаголовокПриложения);	

	КонецЕсли;

КонецПроцедуры

// Устанавливает разрешенность редактирования для тех реквизитов, описание которых подготовлено в форме.
//  Используется, когда доступность элементов формы изменяется самостоятельно, без
// использования функции УстановитьДоступностьЭлементовФормы.
//
// Параметры:
//  Форма        - УправляемаяФорма - форма, в которой требуется разрешить
//                 редактирование реквизитов объекта.
//  
//  Реквизиты    - Массив - реквизиты, которые нужно пометить, как разрешенные для изменения.
//  
//  РедактированиеРазрешено - Булево, начальное значение Истина - значение разрешенности редактирования реквизитов,
//                 которое нужно установить. Значение не будет установлено Истина, если нет права редактирования реквизита.
//                 Неопределено - не изменять разрешенность редактирования реквизитов.
//                 Ложь, Истина - установить указанное значение разрешенности редактирования реквизитов.
// 
//  ПравоРедактирования - Булево, начальное значение Неопределено - позволяет переопределить или доопределить
//                 возможность разблокировки реквизитов, которая вычисляется автоматически с помощью метода ПравоДоступа.
//                 Неопределено - не изменять ПравоРедактирования
//                 Ложь, Истина - установить указанное значение ПраваРедактирования для указанных реквизитов.
// 
Процедура УстановитьРазрешенностьРедактированияРеквизитовСПроверкой(Знач Форма, Знач Реквизиты, Знач РедактированиеРазрешено = Истина, Знач ПравоРедактирования = Неопределено) Экспорт
	
	Результат = Истина;
	Если ТипЗнч(Реквизиты) = Тип("Массив") Тогда
		СинонимыРеквизитов = Новый Массив;
		
		Для Каждого Реквизит Из Реквизиты Цикл
			ОписаниеРеквизита = Форма.ПараметрыЗапретаРедактированияРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", Реквизит))[0];
			СинонимыРеквизитов.Добавить(ОписаниеРеквизита.Представление);
		КонецЦикла;
		
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Форма.Объект.Ссылка);
		
		Результат = ЗапретРедактированияРеквизитовОбъектовКлиент.ПроверитьСсылкиНаОбъект(МассивСсылок, СинонимыРеквизитов);
	КонецЕсли;
	
	
	Если Результат Тогда
		Если ТипЗнч(Реквизиты) = Тип("Массив") Тогда
			
			Для Каждого Реквизит Из Реквизиты Цикл
				ОписаниеРеквизита = Форма.ПараметрыЗапретаРедактированияРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", Реквизит))[0];
				Если ТипЗнч(ПравоРедактирования) = Тип("Булево") Тогда
					ОписаниеРеквизита.ПравоРедактирования = ПравоРедактирования;
				КонецЕсли;
				Если ТипЗнч(РедактированиеРазрешено) = Тип("Булево") Тогда
					ОписаниеРеквизита.РедактированиеРазрешено = ОписаниеРеквизита.ПравоРедактирования И РедактированиеРазрешено;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Обновление доступности команды РазрешитьРедактированиеРеквизитовОбъекта
		ВсеРеквизитыРазблокированы = Истина;
		
		Для каждого ОписаниеБлокируемогоРеквизита Из Форма.ПараметрыЗапретаРедактированияРеквизитов Цикл
			Если ОписаниеБлокируемогоРеквизита.ПравоРедактирования
			И НЕ ОписаниеБлокируемогоРеквизита.РедактированиеРазрешено Тогда
				ВсеРеквизитыРазблокированы = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВсеРеквизитыРазблокированы Тогда
			Форма.Элементы.РазрешитьРедактированиеРеквизитовОбъекта.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает доступность элементов формы, связанных с заданными реквизитами,
// для которых установлено разрешение изменения. Если передать массив реквизитов,
// тогда сначала будет дополнен состав реквизитов разрешенных для изменения.
//   Если разблокировка элементов формы, связанных с заданными реквизитами
// снята для всех реквизитов, тогда кнопка разрешения редактирования блокируется.
//
// Параметры:
//  Форма        - УправляемаяФорма - форма, в которой требуется разрешить
//                 редактирование элементов формы, заданных реквизитов.
//  
//  Реквизиты    - Массив       - имена реквизитов, для которых нужно установить разрешенность изменения.
//                                Используется, когда функция РазрешитьРедактированиеРеквизитовОбъекта
//                                не используется.
//                 Неопределено - состав реквизитов доступных для редактирования не изменяется,
//                                а для элементов формы, связанных с реквизитами, изменение которых
//                                разрешено устанавливается доступность.
//
Процедура УстановитьДоступностьЭлементовФормы(Знач Форма, Знач Реквизиты = Неопределено) Экспорт
	
	УстановитьРазрешенностьРедактированияРеквизитовСПроверкой(Форма, Реквизиты);
	
	Для Каждого ОписаниеБлокируемогоРеквизита Из Форма.ПараметрыЗапретаРедактированияРеквизитов Цикл
		Если ОписаниеБлокируемогоРеквизита.РедактированиеРазрешено Тогда
			Для Каждого БлокируемыйЭлементФормы Из ОписаниеБлокируемогоРеквизита.БлокируемыеЭлементы Цикл
				ЭлементФормы = Форма.Элементы.Найти(БлокируемыйЭлементФормы.Значение);
				Если ЭлементФормы <> Неопределено Тогда
					Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
					 ИЛИ ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") Тогда
						ЭлементФормы.ТолькоПросмотр = Ложь;
					Иначе
						ЭлементФормы.Доступность = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// +HVOYA. 26.08.2016 11:14:21, Львова Е.А.
Процедура ОповеститьОНовыхАкциях() Экспорт
	
	МассивНовыхАкций = ОбщегоНазначенияРТСервер.ПолучитьНовыеАкции();
	ТекстСообщения = Строка("Добавлены новые акции:") + Символы.ПС;	
	
	Если НЕ МассивНовыхАкций = Неопределено Тогда
		Для каждого НоваяАкция Из МассивНовыхАкций Цикл
			АдресОбъекта = НоваяАкция.АдресОбъекта;
			ТекстСообщения = ТекстСообщения + Строка(НоваяАкция.НаименованиеАкции) + Символы.ПС;
		КонецЦикла;
		
		Если МассивНовыхАкций.Количество() > 1 Тогда
			ПоказатьОповещениеПользователя(,, ТекстСообщения, БиблиотекаКартинок.Важно);
		ИначеЕсли МассивНовыхАкций.Количество() = 1 Тогда
			ПоказатьОповещениеПользователя(, АдресОбъекта, ТекстСообщения, БиблиотекаКартинок.Важно);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
// -HVOYA. 26.08.2016 11:14:24, Львова Е.А.

// Функция возвращает значение экспортных переменных модуля приложений из параметра сеанса.
// Необходимо для возможности создания объектов на сервере.
Функция ПолучитьЗначениеПеременной(ИмяПараметра, Кэш = Неопределено, КэшИзменен = Ложь) Экспорт
	
	Если Кэш = Неопределено Тогда
		// Кэш не был проинициализирован.
		Кэш = Новый Структура;
	Иначе
		// Ищем значение в структуре
		НайденноеЗначение = Неопределено;
		Если Кэш.Свойство(ИмяПараметра, НайденноеЗначение) Тогда
			Возврат НайденноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Если ВРег(ИмяПараметра) = ВРег("ЗначенияДополнительныхПравПользователя") Тогда
		НайденноеЗначение = Новый Соответствие;
	КонецЕсли;
	
	Кэш.Вставить(ИмяПараметра, НайденноеЗначение);
	КэшИзменен = Истина;
	
	Возврат НайденноеЗначение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// КОМПОНЕНТА СКЛОНЕНИЯ


// Устанавливает компоненту склонения
Процедура УстановитьКомпонентуСклонения() Экспорт

	Если КомпонентаСклонения = Неопределено Тогда
		КодВозврата = ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклонение", "NameDecl", ТипВнешнейКомпоненты.COM);
		
		Если КодВозврата Тогда
			Состояние(НСтр("ru = 'Компонента склонения уже установлена!'"));
		Иначе
			УстановитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклонение");
			КодВозврата = ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклонение", "NameDecl", ТипВнешнейКомпоненты.COM);
			
			Если КодВозврата Тогда
				РаботаСФайламиСлужебныйВызовСервера.ОчиститьНастройкиФормНовогоФайла();
				Оповестить("КомпонентаСклоненияУстановлена");
			КонецЕсли;
		КонецЕсли;

		КомпонентаСклонения = Новый("AddIn.NameDecl.NameDeclension");
	Иначе
		Состояние(НСтр("ru = 'Компонента склонения уже установлена!'"));
	КонецЕсли;
	
КонецПроцедуры

// Проинициализировать компоненту склонения
Функция ПроинициализироватьКомпонентуСклонения() Экспорт
	Если КомпонентаСклонения = Неопределено Тогда
		КодВозврата = ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклонение", "NameDecl", ТипВнешнейКомпоненты.COM);
		
		Если Не КодВозврата Тогда
			Возврат Ложь;
		КонецЕсли;
		
		КомпонентаСклонения = Новый("AddIn.NameDecl.NameDeclension");
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Возвращает склонение в выбранном падеже
Функция ПолучитьСклонениеФИО(ФИО ,Падеж) Экспорт
	
	//функция не обрабатывает пустые строки
	Если ПустаяСтрока(ФИО) Тогда
		Возврат ФИО;
	КонецЕсли;
	
	//функция не обрабатывает ФИО с точками
	Если Найти(ФИО, ".") > 0 Тогда
		Возврат ФИО;
	КонецЕсли;
	
	СклонениеФИО ="";
	
	Если Не КомпонентаСклонения = Неопределено Тогда
		
		СклонениеФИО = КомпонентаСклонения.Просклонять(ФИО, Падеж);
		
		Если СокрЛП(СклонениеФИО) = "" Тогда
			СклонениеФИО = ФИО;
		КонецЕсли;
	Иначе
		СклонениеФИО = ФИО;
	КонецЕсли;
	
	Возврат СклонениеФИО;
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////

#Область РМК

Функция ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации, ОбработчикОповещения = Неопределено, ВладелецФормы = Неопределено, Модально = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокИнформации", ПараметрыИнформации.ЗаголовокИнформации);
	
	Если ПараметрыИнформации.Свойство("ТекстИнформации") Тогда
		ПараметрыФормы.Вставить("ТекстИнформации", ПараметрыИнформации.ТекстИнформации);
	КонецЕсли;
	
	Если ПараметрыИнформации.Свойство("ТипОтвета") И ЗначениеЗаполнено(ПараметрыИнформации.ТипОтвета) Тогда
		ПараметрыФормы.Вставить("ТипОтвета", ПараметрыИнформации.ТипОтвета);
	КонецЕсли;
	
	Если ПараметрыИнформации.Свойство("ОтветПоумолчанию") И ЗначениеЗаполнено(ПараметрыИнформации.ОтветПоумолчанию) Тогда
		ПараметрыФормы.Вставить("ОтветПоумолчанию", ПараметрыИнформации.ОтветПоумолчанию);
	КонецЕсли;
	
//	Ответ = ОткрытьФормуМодально("ОбщаяФорма.ФормаРМКУправляемаяИнформацииОбОшибке", ПараметрыФормы);
//	LNK 02.06.2017 11:44:57
	Если ВладелецФормы = Неопределено И Модально = Ложь Тогда
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("ОбщаяФорма.ФормаРМКУправляемаяИнформацииОбОшибке", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
	Иначе
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	//	ОткрытьФорму("ОбщаяФорма.ФормаРМКУправляемаяИнформацииОбОшибке", ПараметрыФормы, ВладелецФормы,,,, ОбработчикОповещения, Режим); 
		Возврат ОткрытьФормуМодально("ОбщаяФорма.ФормаРМКУправляемаяИнформацииОбОшибке", ПараметрыФормы, ВладелецФормы);	// временно... слишком много переделывать!
	КонецЕсли;
	
КонецФункции

Процедура ВывестиИнформациюДляРМК(ЗаголовокИнформации, ТекстИнформации = Неопределено, ОбработчикОповещения = Неопределено, ВладелецФормы = Неопределено) Экспорт
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	ПараметрыИнформации.ЗаголовокИнформации = ЗаголовокИнформации;
	Если ТекстИнформации = Неопределено Тогда
		ПараметрыИнформации.ТекстИнформации = Символы.Таб;
	Иначе
		ПараметрыИнформации.ТекстИнформации = ТекстИнформации;
	КонецЕсли;

	ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации, ОбработчикОповещения, ВладелецФормы);

КонецПроцедуры

Функция ВывестиВопросДляРМК(ЗаголовокИнформации, ТекстИнформации = Неопределено, ОтветПоумолчанию = "Нет", ОбработчикОповещения = Неопределено, ВладелецФормы = Неопределено) Экспорт

	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	ПараметрыИнформации.ЗаголовокИнформации = ЗаголовокИнформации;
	Если ТекстИнформации = Неопределено Тогда
		ПараметрыИнформации.ТекстИнформации = Символы.Таб;
	Иначе
		ПараметрыИнформации.ТекстИнформации = ТекстИнформации;
	КонецЕсли;
	ПараметрыИнформации.ТипОтвета           = "Вопрос";
	ПараметрыИнформации.ОтветПоумолчанию    = ОтветПоумолчанию;
	
	ОтветПользователя = ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации, ОбработчикОповещения, ВладелецФормы, Истина);
	
	Возврат ОтветПользователя;

КонецФункции
 
// Процедура - подключение открытия РМК события таймера
//
Процедура ОткрытьМеню() Экспорт

	ПодключитьОбработчикОжидания("ОткрытьГлавноеМенюРМКПриЗапуске", 0.1, Истина);

КонецПроцедуры

// Процедура открывает меню РМК.
//
Процедура ОткрытьГлавноеМенюРМК() Экспорт
	
	ФормаРабочегоМестаКассира = ОбщегоНазначенияРТВызовСервера.ЗначениеПараметраСеанса("ФормаРабочегоМестаКассира");
	
	Если НЕ ЗначениеЗаполнено(ФормаРабочегоМестаКассира) Тогда
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуМенюРМК", ЭтотОбъект);

		ИмяФормы = ?(ПустаяСтрока(ОбщегоНазначенияРТ.ИмяВнешнегоРМК())
				, "Обработка.РМК"
				, "ВнешняяОбработка." + ОбщегоНазначенияРТ.ИмяВнешнегоРМК()
			) + ".Форма.ФормаМеню";

		ОткрытьФорму(ИмяФормы,,,,,, ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка результата открытия формы РМК управляемый.
//
Процедура ОповещениеОткрытьФормуМенюРМК(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт

	Если РезультатОткрытияФормы = "ЗавершитьРаботуСистемы" Тогда

		ЗавершитьРаботуСистемы(Ложь);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

//	LNK 23.09.2022 12:14:14
Функция ПолучитьПравилаПротокола(Период = '00010101')	Экспорт

	Возврат ОбщегоНазначенияРТВызовСервера.ПолучитьПравилаПротокола(Период);

КонецФункции

//	Переопределение

//	LNK 17.11.2023 12:31:41
Функция РеквизитыМагазина(Магазин, ДатаСреза = '00010101')	Экспорт

	Возврат ОбщегоНазначенияРТВызовСервера.РеквизитыМагазина(Магазин, ДатаСреза);

КонецФункции

//	LNK 17.11.2023 12:31:41
Функция РеквизитыСклада(Склад, ДатаСреза = '00010101')	Экспорт

	Возврат ОбщегоНазначенияРТВызовСервера.РеквизитыСклада(Склад, ДатаСреза);

КонецФункции






