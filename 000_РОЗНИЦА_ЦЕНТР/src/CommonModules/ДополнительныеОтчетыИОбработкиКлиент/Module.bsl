////////////////////////////////////////////////////////////////////////////////
// Подсистема "Дополнительные отчеты и обработки"
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Открывает форму с доступными командами.
//
// Параметры:
//   ПараметрКоманды            (...) Передается "как есть" из параметров обработчика команды.
//   ПараметрыВыполненияКоманды (...) Передается "как есть" из параметров обработчика команды.
//   Вид                     (Строка) Вид обработки, который можно получить из серии функций:
//                                    ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработки<...>()
//   ИмяРаздела              (Строка) Имя раздела командного интерфейса, из которого вызывается команда.
//
Процедура ОткрытьФормуКомандДополнительныхОтчетовИОбработок(ПараметрКоманды, ПараметрыВыполненияКоманды, Вид, ИмяРаздела = "") Экспорт
	
	ОбъектыНазначения = Новый СписокЗначений;
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда // назначаемая обработка
		ОбъектыНазначения.ЗагрузитьЗначения(ПараметрКоманды);
	КонецЕсли;
	
	Параметры = Новый Структура("ОбъектыНазначения, Вид, ИмяРаздела, РежимОткрытияОкна");
	Параметры.ОбъектыНазначения = ОбъектыНазначения;
	Параметры.Вид = Вид;
	Параметры.ИмяРаздела = ИмяРаздела;
	Параметры.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Если ТипЗнч(ПараметрыВыполненияКоманды.Источник) = Тип("УправляемаяФорма") Тогда // назначаемая обработка
		Параметры.Вставить("ИмяФормы", ПараметрыВыполненияКоманды.Источник.ИмяФормы);
	КонецЕсли;
	
	ОткрытьФорму(
		"ОбщаяФорма.ДополнительныеОтчетыИОбработки", 
		Параметры,
		ПараметрыВыполненияКоманды.Источник
	);
	
КонецПроцедуры

// Открывает форму дополнительного отчета с заданным вариантом.
//
// Параметры:
//   Ссылка (СправочникСсылка.ДополнительныеОтчетыИОбработки)
//   КлючВарианта (Строка)
//
Процедура ОткрытьВариантДополнительногоОтчета(Ссылка, КлючВарианта) Экспорт
	
	Если ТипЗнч(Ссылка) <> Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОтчета = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(Ссылка);
	ПараметрыОткрытия = Новый Структура("КлючВарианта", КлючВарианта);
	Уникальность = "ВнешнийОтчет." + ИмяОтчета + "/КлючВарианта." + КлючВарианта;
	ОткрытьФорму("ВнешнийОтчет." + ИмяОтчета + ".Форма", ПараметрыОткрытия, Неопределено, Уникальность);
	
КонецПроцедуры

// Подключает длительную операцию для выполнения команды из формы внешнего отчета или обработки.
//
// Параметры:
//   ИдентификаторКоманды (Строка) Имя команды как оно задано в функции СведенияОВнешнейОбработке() модуля объекта.
//   ПараметрыКоманды (Структура) Параметры выполнения команды. 
//       Обязательные параметры:
//       |- ДополнительнаяОбработкаСсылка (СправочникСсылка.ДополнительныеОтчетыИОбработки) Передается "Как есть" из параметров формы.
//       Необязательные параметры:
//       |- СопровождающийТекст (Строка) Текст длительной операции.
//       |- Заголовок           (Строка) Заголовок длительной операции.
//       |- ОбъектыНазначения   (Массив) Ссылки объектов, для которых выполняется команда.
//                                       Используется для назначаемых дополнительных обработок.
//       |- РезультатВыполнения (Структура) См. СтандартныеПодсистемыКлиентСервер.НовыйРезультатВыполнения().
//       Зарезервированные параметры:
//       |- ИдентификаторКоманды (Строка)
//       Помимо обязательных параметров может содержать "свои" для использования в обработчике команды.
//         При добавлении собственных параметров желательно использовать префикс,
//         исключающий пересечение со стандартными механизмами, например "Контекст...".
//   Форма (УправляемаяФорма) Форма, в которую необходимо вернуть результат.
//
// Важно:
//   Результат возвращается в обработчике ОбработкаВыбора().
//   Для первичной идентификации следует использовать функцию ИмяФормыДлительнойОперации().
//   Так же следует учитывать, что фоновые задания доступны только в клиент-серверном режиме.
//   Примеры использования можно найти в дополнительной обработке демо базы.
//
// Возвращаемое значение:
//   РезультатВыполнения (Структура) См. СтандартныеПодсистемыКлиентСервер.НовыйРезультатВыполнения().
//
// Пример обработчика команды:
//&НаКлиенте
//Процедура ОбработчикКоманды(Команда)
//	ИдентификаторКоманды = Команда.Имя;
//	ПараметрыКоманды = Новый Структура("ДополнительнаяОбработкаСсылка, СопровождающийТекст");
//	ПараметрыКоманды.ДополнительнаяОбработкаСсылка = ОбъектСсылка;
//	ПараметрыКоманды.СопровождающийТекст = НСтр("ru = 'Выполняется команда...'");
//	Состояние(ПараметрыКоманды.СопровождающийТекст);
//	Если СтандартныеПодсистемыВызовСервера.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
//		РезультатВыполнения = ВыполнитьКомандуНапрямую(ИдентификаторКоманды, ПараметрыКоманды);
//		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(Форма, РезультатВыполнения);
//	Иначе
//		ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьКомандуВФоне(ИдентификаторКоманды, ПараметрыКоманды, Форма);
//	КонецЕсли;
//КонецПроцедуры
//
// Пример кода выполнения команды напрямую:
//&НаСервере
//Функция ВыполнитьКомандуНапрямую(ИдентификаторКоманды, ПараметрыКоманды)
//	Возврат ДополнительныеОтчетыИОбработки.ВыполнитьКомандуИзФормыВнешнегоОбъекта(ИдентификаторКоманды, ПараметрыКоманды, Форма);
//КонецФункции
//
// Пример обработчика выбора:
//&НаКлиенте
//Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
//	Если ИсточникВыбора.ИмяФормы = ДополнительныеОтчетыИОбработкиКлиент.ИмяФормыДлительнойОперации() Тогда
//		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(Форма, ВыбранноеЗначение);
//	КонецЕсли;
//КонецПроцедуры
//
// Пример получения ссылки дополнительной обработки:
//&НаСервере
//Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//	ОбъектСсылка = Параметры.ДополнительнаяОбработкаСсылка;
//КонецПроцедуры
//
Процедура ВыполнитьКомандуВФоне(ИдентификаторКоманды, ПараметрыКоманды, Форма) Экспорт
	
	ДополнительнаяОбработкаСсылка = Неопределено;
	ПараметрыКоманды.Свойство("ДополнительнаяОбработкаСсылка", ДополнительнаяОбработкаСсылка);
	НекорректныйТип = ТипЗнч(ДополнительнаяОбработкаСсылка) <> Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки");
	Если НекорректныйТип ИЛИ ДополнительнаяОбработкаСсылка = ПредопределенноеЗначение("Справочник.ДополнительныеОтчетыИОбработки.ПустаяСсылка") Тогда
		
		ТекстОшибки = НСтр("ru = 'Некорректное значение параметра ""ДополнительнаяОбработкаСсылка"":'") + Символы.ПС;
		Если НекорректныйТип Тогда
			ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Передан тип ""%1"", ожидался ""%2"".'"),
				Строка(ТипЗнч(ДополнительнаяОбработкаСсылка)),
				Строка(Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки"))
			);
		Иначе
			ТекстОшибки = ТекстОшибки + НСтр("ru = 'Передана пустая ссылка. Вероятно, обработка была открыта напрямую.'");
		КонецЕсли;
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ПараметрыКоманды.Вставить("ИдентификаторКоманды", ИдентификаторКоманды);
	
	ПараметрыФормы = Новый Структура("ПараметрыЗапускаФоновогоЗадания", ПараметрыКоманды);
	
	ОткрытьФорму(ИмяФормыДлительнойОперации(), ПараметрыФормы, Форма);
	
КонецПроцедуры

// Возвращает имя формы для идентификации результата выполнения длительной операции.
//
// Возвращаемое значение:
//   (Строка) См. ВыполнитьКомандуВФоне().
//
Функция ИмяФормыДлительнойОперации() Экспорт
	
	Возврат "ОбщаяФорма.ДлительнаяОперацияДополнительныхОтчетовИОбработок";
	
КонецФункции

// Выполняет назначаемую команду на клиенте, используя только неконтекстные серверные вызов.
//   Возвращает Ложь если для выполнения команды требуется серверный вызов.
//
// Параметры:
//   Форма (УправляемаяФорма) Форма, из которой вызвана команда.
//   ИмяЭлемента (Строка) Имя команды формы, которая была нажата.
//
// Возвращаемое значение: 
//   (Булево) Истина - Команда обработки выполнена неконтекстно.
//            Ложь - Для выполнения требуется контекстный вызов сервера.
//
Функция ВыполнитьНазначаемуюКомандуНаКлиенте(Форма, ИмяЭлемента) Экспорт
	ОчиститьСообщения();
	
	Найденные = Форма.КомандыДополнительныхОбработок.НайтиСтроки(Новый Структура("ИмяЭлемента", ИмяЭлемента));
	Если Найденные.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Команда не найдена'");
	КонецЕсли;
	
	ВыполняемаяКоманда = Найденные[0];
	
	Если ВыполняемаяКоманда.ВариантЗапуска = ПредопределенноеЗначение("Перечисление.СпособыВызоваДополнительныхОбработок.ЗаполнениеФормы") Тогда
		Возврат Ложь; // Требуется контекстный вызов сервера
	КонецЕсли;
	
	Объект = Форма.Объект;
	Если Объект.Ссылка.Пустая() ИЛИ Форма.Модифицированность Тогда
		ТекстВопроса = СтрЗаменить(
			НСтр("ru = 'Для выполнения команды ""%1"" необходимо записать данные.'"),
			"%1",
			ВыполняемаяКоманда.Представление
		);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, НСтр("ru = 'Записать и продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		Ответ = Вопрос(ТекстВопроса, Кнопки, 60, 1);
		
		Если Ответ <> 1 Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ Форма.Записать() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("ИдентификаторКоманды", ВыполняемаяКоманда.Идентификатор);
	ПараметрыВызоваСервера.Вставить("ДополнительнаяОбработкаСсылка", ВыполняемаяКоманда.Ссылка);
	ПараметрыВызоваСервера.Вставить("ОбъектыНазначения", Новый Массив);
	ПараметрыВызоваСервера.Вставить("ИмяФормы", Форма.ИмяФормы);
	ПараметрыВызоваСервера.ОбъектыНазначения.Добавить(Объект.Ссылка);
	
	ПоказатьОповещениеПриВыполненииКоманды(ВыполняемаяКоманда);
	
	// Контроль за результатом выполнения поддерживается только для серверных методов.
	// Если открывается форма или вызывается клиентский метод, то вывод результата выполнения выполняется обработкой.
	Если ВыполняемаяКоманда.ВариантЗапуска = ПредопределенноеЗначение("Перечисление.СпособыВызоваДополнительныхОбработок.ОткрытиеФормы") Тогда
		
		ИмяВнешнегоОбъекта = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ВыполняемаяКоманда.Ссылка);
		Если ВыполняемаяКоманда.ЭтоОтчет Тогда
			ОткрытьФорму("ВнешнийОтчет."+ ИмяВнешнегоОбъекта +".Форма", ПараметрыВызоваСервера, Форма);
		Иначе
			ОткрытьФорму("ВнешняяОбработка."+ ИмяВнешнегоОбъекта +".Форма", ПараметрыВызоваСервера, Форма);
		КонецЕсли;
		
	ИначеЕсли ВыполняемаяКоманда.ВариантЗапуска = ПредопределенноеЗначение("Перечисление.СпособыВызоваДополнительныхОбработок.ВызовКлиентскогоМетода") Тогда
		
		ИмяВнешнегоОбъекта = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ВыполняемаяКоманда.Ссылка);
		Если ВыполняемаяКоманда.ЭтоОтчет Тогда
			ФормаВнешнегоОбъекта = ПолучитьФорму("ВнешнийОтчет."+ ИмяВнешнегоОбъекта +".Форма", ПараметрыВызоваСервера, Форма);
		Иначе
			ФормаВнешнегоОбъекта = ПолучитьФорму("ВнешняяОбработка."+ ИмяВнешнегоОбъекта +".Форма", ПараметрыВызоваСервера, Форма);
		КонецЕсли;
		ФормаВнешнегоОбъекта.ВыполнитьКоманду(ПараметрыВызоваСервера.ИдентификаторКоманды, ПараметрыВызоваСервера.ОбъектыНазначения);
		
	ИначеЕсли ВыполняемаяКоманда.ВариантЗапуска = ПредопределенноеЗначение("Перечисление.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода")
		Или ВыполняемаяКоманда.ВариантЗапуска = ПредопределенноеЗначение("Перечисление.СпособыВызоваДополнительныхОбработок.СценарийВБезопасномРежиме") Тогда
		
		ПараметрыВызоваСервера.Вставить("РезультатВыполнения", СтандартныеПодсистемыКлиентСервер.НовыйРезультатВыполнения());
		ДополнительныеОтчетыИОбработкиВызовСервера.ВыполнитьКоманду(ПараметрыВызоваСервера, Неопределено);
		Форма.Прочитать();
		ПоказатьРезультатВыполненияКоманды(Форма, ПараметрыВызоваСервера.РезультатВыполнения);
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Отображает результат выполнения команды.
//
// Параметры:
//   Форма (УправляемаяФорма) Форма, для которой требуется вывод.
//   РезультатВыполнения (Структура) См. СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения()
//
Процедура ПоказатьРезультатВыполненияКоманды(Форма, РезультатВыполнения) Экспорт
	
	СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(Форма, РезультатВыполнения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов

// Открывает форму подбора дополнительных отчетов.
// 
Процедура РассылкаОтчетовПодборДопОтчета(ЭлементФормы) Экспорт
	
	ДополнительныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет");
	Отчет               = ПредопределенноеЗначение("Перечисление.ВидыДополнительныхОтчетовИОбработок.Отчет");
	
	ОтборПоВиду = Новый СписокЗначений;
	ОтборПоВиду.Добавить(ДополнительныйОтчет, ДополнительныйОтчет);
	ОтборПоВиду.Добавить(Отчет, Отчет);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимОткрытияОкна",  РежимОткрытияОкнаФормы.Независимый);
	ПараметрыФормыВыбора.Вставить("РежимВыбора",        Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормыВыбора.Вставить("Отбор",              Новый Структура("Вид", ОтборПоВиду));
	
	ОткрытьФорму("Справочник.ДополнительныеОтчетыИОбработки.ФормаВыбора", ПараметрыФормыВыбора, ЭлементФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Вызывает диалог сохранения редактируемых данных произвольной формы
//   Вызывается из обработчиков "ПередЗакрытием" и "ПриЗакрытии".
// 
// Параметры:
//   Отказ - (...) Флаг отказа от закрытия формы.
//       |- (Булево)    для обработчика "ПередЗакрытием", используется для толстого и тонкого клиентов
//       |- (Неопределено) для обработчика "ПриЗакрытии", используется для веб клиента
//   Модифицированность - (Булево) Флаг модифицированности формы.
//       Если форма не модифицирована, то сохранять нечего и запрос не требуется
// 
// Возвращаемое значение: 
//   (Булево) Необходимость сохранения данных формы.
//
Функция СохранитьДанныеПроизвольнойФормы(Модифицированность, Отказ = Неопределено) Экспорт
	// Изменение сохраняемых данных должно устанавливать модифицированность формы
	Если Модифицированность <> Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Определение клиента
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#Иначе
		ЭтоВебКлиент = Ложь;
	#КонецЕсли
	
	// Предупреждение необходимо вызвать только один раз для одного клиента
	Если ЭтоВебКлиент <> (Отказ = Неопределено) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
	Кнопки = ?(ЭтоВебКлиент, РежимДиалогаВопрос.ДаНет, РежимДиалогаВопрос.ДаНетОтмена);
	Ответ = Вопрос(ТекстВопроса, Кнопки, 60, КодВозвратаДиалога.Нет); 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЭтоВебКлиент И Ответ = КодВозвратаДиалога.Отмена Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Выводит оповещение перед запуском команды.
//
Процедура ПоказатьОповещениеПриВыполненииКоманды(ВыполняемаяКоманда) Экспорт
	Если ВыполняемаяКоманда.ПоказыватьОповещение Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Команда выполняется...'"), , ВыполняемаяКоманда.Представление);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Условные вызовы в друге подсистемы

// Открывает форму размещения нескольких вариантов отчетов по разделам КИ.
// 
// Параметры
//   МассивВариантов (Массив) См. описание вызываемых процедур и функций.
// 
Процедура ПриОткрытииДиалогаРазмещенияВариантовДополнительныхОтчетовВРазделах(МассивВариантов, Модально = Ложь) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ВариантыОтчетовКлиент");
		Модуль.ОткрытьДиалогРазмещенияВариантовВРазделах(МассивВариантов, , Модально);
	КонецЕсли;
	
КонецПроцедуры
