#Область ПрограммныйИнтерфейсМодуля

//	LNK 11.06.2017 08:28:48
Процедура НазначитьДокументДляСверки(СсылкаНаОбъект, Параметры = Неопределено, Примечание = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ТипЗначения = ТипЗнч(СсылкаНаОбъект);

	Если ТипЗначения = Тип("Строка") И НЕ ПустаяСтрока(СсылкаНаОбъект) Тогда

	//	При внешнем запросе на сверку из Navision в нашей базе такого документа может и не оказаться!
	//	В этом случае будет передана строка вида "IDN#ВидДокумента"
		IDN = ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(Параметры, "IDN", ОбщегоНазначенияКлиентСервер.lx_GetTooken(СсылкаНаОбъект, "#", 1));

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);

	Иначе

		МетаданныеСсылки  = ВнешниеИсточникиПовтИсп.ТипыСверкиNavision().Получить(ТипЗначения);

		Если МетаданныеСсылки = Неопределено Тогда

			Возврат;

		КонецЕсли;

	//	Отработаем на всякий случай предохранитель... мало ли, где-то не будет идентификатора!
		Если НЕ (ОбщегоНазначенияПовтИсп.ЕстьОбщийРеквизит("IDN", МетаданныеСсылки.ПолноеИмя()) ИЛИ ОбщегоНазначенияРТ.ЕстьРеквизитОбъекта("IDN", МетаданныеСсылки)) Тогда

			Возврат;

		КонецЕсли;

		Запрос = Новый Запрос(СтрЗаменить(
		"ВЫБРАТЬ
		|	ТаблицаДокументы.IDN
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ТаблицаДокументы
		|ГДЕ
		|	ТаблицаДокументы.Ссылка = &СсылкаНаОбъект
		|	И ТаблицаДокументы.IDN <> """""
		, "Документ.ПеремещениеТоваров", "Документ." + МетаданныеСсылки.Имя)
		);
		Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
		
		Выборка = Запрос.Выполнить().Выбрать();
	
		Если Выборка.Следующий() Тогда

				IDN = Выборка.IDN;
		Иначе	IDN = ""

		КонецЕсли;

	КонецЕсли;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/
	
	Если НЕ ПустаяСтрока(IDN) Тогда

		СписокМагазинов  = ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(Параметры, "Магазины", Неопределено);
		РезультатСверки  = ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(Параметры, "РезультатСверки", Перечисления.РезультатСверкиNavision.НеПроверялся);
		ВидДокумента     = ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(Параметры, "ВидДокумента", "");
		СообщитьNavision = ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(Параметры, "СообщитьNavision", Неопределено);
		ДополнительнаяИнформация = ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(Параметры, "ДополнительнаяИнформация", Неопределено);
	//	---------------------------------------------------------------------------------------
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Магазины.Ссылка КАК Магазин
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|ГДЕ
		|	Магазины.Ссылка В(&СписокМагазинов)
		|	И (&ПринятьЛюбойМагазин = ИСТИНА
		|			ИЛИ НЕ(Магазины.СкладУправляющейСистемы
		|					ИЛИ Магазины.Блокирован))
		|	И НЕ &ПоВсемМагазинам = ИСТИНА
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|ГДЕ
		|	&ПоВсемМагазинам = ИСТИНА"
		;
		Запрос.УстановитьПараметр("СписокМагазинов", ?(ТипЗнч(СписокМагазинов) = Тип("Массив"), СписокМагазинов, ОбщегоНазначенияКлиентСервер.AAD(СписокМагазинов)));
		Запрос.УстановитьПараметр("ПоВсемМагазинам", СписокМагазинов = Неопределено);
		Запрос.УстановитьПараметр("ПринятьЛюбойМагазин", ТипЗначения = Тип("Строка"));	//	Когда в нашей базе нет документа, а есть только внешний IDN

		Выборка = Запрос.Выполнить().Выбрать();
		
		Если НЕ ТранзакцияАктивна() И НЕ Выборка.Количество() = 0 Тогда

				НачатьТранзакцию();
		//		Флаг, определяющий использование "локальной" транзакции (вызов не из общей транзакции, например, из обработчика "ПриЗаписи")
				ТранзакцияИспользуется = Истина;

		Иначе	ТранзакцияИспользуется = Ложь;

		КонецЕсли;

		Попытка

			Пока Выборка.Следующий() Цикл

				МенеджерЗаписи = РегистрыСведений.СоответствиеДокументовNavision.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Объект  = СсылкаНаОбъект;
				МенеджерЗаписи.Магазин = Выборка.Магазин;

				МенеджерЗаписи.Прочитать();

			//	LNK 06.05.2024 12:47:53 -	Проверяем - возможен вызов этой процедуры при учёте/проведении документа
			//								Но "ВидДокумента" НЕ указан и не имеется в существующей записи!
			//								Тогда игнорируем такой вызов.
				РаботаемДальше = (МенеджерЗаписи.Выбран() И НЕ ПустаяСтрока(МенеджерЗаписи.ВидДокумента));	//	есть запись и указан вид документа!
				РаботаемДальше = РаботаемДальше ИЛИ НЕ ПустаяСтрока(ВидДокумента);							//	неважно предыдущее.. уже указан вид документа.
			//	LNK 06.05.2024 13:04:42 -	Пошаговое условие, чтобы не запутаться!
			
				Если РаботаемДальше И МенеджерЗаписи.Выбран() Тогда	//	LNK 08.05.2024 07:21:17

				//	отработанные сверки НЕ фиксируем.
					РаботаемДальше = НЕ (МенеджерЗаписи.РезультатСверки = Перечисления.РезультатСверкиNavision.Соответствует
										ИЛИ МенеджерЗаписи.РезультатСверки = Перечисления.РезультатСверкиNavision.НеСоответствует);

				КонецЕсли;

				Если РаботаемДальше	Тогда

					Если МенеджерЗаписи.Магазин.Пустая() Тогда

					//	Такая запись еще не существует...
						МенеджерЗаписи.Объект  = СсылкаНаОбъект;
						МенеджерЗаписи.Магазин = Выборка.Магазин;

					КонецЕсли;

					МенеджерЗаписи.IDN = IDN;
					МенеджерЗаписи.РезультатСверки = РезультатСверки;
					МенеджерЗаписи.ДатаОбновления  = ТекущаяДатаСеанса();

					Если НЕ ПустаяСтрока(ВидДокумента) Тогда

						МенеджерЗаписи.ВидДокумента = ВидДокумента;

					КонецЕсли;

					Если НЕ СообщитьNavision = Неопределено Тогда

						МенеджерЗаписи.СообщитьNavision = СообщитьNavision;

					КонецЕсли;

					Если НЕ ПустаяСтрока(Примечание) Тогда

						МенеджерЗаписи.Примечание = Примечание;

					КонецЕсли;

					Если МенеджерЗаписи.ДатаРегистрации = '00010101' Тогда

						МенеджерЗаписи.ДатаРегистрации = ТекущаяДатаСеанса();

					КонецЕсли;

					Если НЕ ДополнительнаяИнформация = Неопределено Тогда

						МенеджерЗаписи.ДополнительнаяИнформация = Новый ХранилищеЗначения(ДополнительнаяИнформация, Новый СжатиеДанных(9));

					КонецЕсли;

					МенеджерЗаписи.Записать(Истина);

				КонецЕсли;

			КонецЦикла;

			Если ТранзакцияИспользуется И ТранзакцияАктивна() Тогда

				ЗафиксироватьТранзакцию();

			КонецЕсли;

		Исключение

			ТекстОшибки = ОписаниеОшибки();

			Если ТранзакцияИспользуется И ТранзакцияАктивна() Тогда

				ОтменитьТранзакцию();

			КонецЕсли;

			ВызватьИсключение "При фиксации сверки с данными КСУ возникла ошибка:" + Символы.ПС + ТекстОшибки;

		КонецПопытки;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

//	LNK 20.06.2017 12:25:06
Процедура РегистрацияРезультатаСверкиДляNavision(Объект, Магазин, ВызыватьОшибку = Истина)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДанных.IDN
	|ИЗ
	|	РегистрСведений.СоответствиеДокументовNavision КАК ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеДокументовNavision.Изменения КАК ТаблицаРегистраций
	|		ПО (ТаблицаДанных.Объект = ТаблицаРегистраций.Объект
	|				И ТаблицаРегистраций.Узел ССЫЛКА ПланОбмена.ОбменNavisionРозница)
	|ГДЕ
	|	ТаблицаДанных.Объект = &Объект
	|	И ТаблицаДанных.Магазин = &Магазин
	|	И ТаблицаДанных.СообщитьNavision = ИСТИНА
	|	И ТаблицаРегистраций.Узел ЕСТЬ NULL "
	);
	Запрос.УстановитьПараметр("Объект" , Объект);
	Запрос.УстановитьПараметр("Магазин", Магазин);

	НаборЗаписей = РегистрыСведений.СоответствиеДокументовNavision.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	НаборЗаписей.Отбор.Магазин.Установить(Магазин);
	
	ДанныеВыборка = Запрос.Выполнить().Выбрать();
	
	Если ДанныеВыборка.Следующий() ИЛИ НЕ ВызыватьОшибку = Истина Тогда

	//	LNK 04.05.2024 15:46:47	.. если НЕ вызывать ошибку, то регистрируем вне зависимости от проверки.
	//	Вероятно, вызов процедуры из "при записи" в ручном режиме
		ПланыОбмена.ЗарегистрироватьИзменения(ВнешниеИсточникиПовтИсп.СписокУзловNavision(), НаборЗаписей);

	КонецЕсли;

	Для каждого Узел Из ВнешниеИсточникиПовтИсп.СписокУзловNavision() Цикл

		Если НЕ ПланыОбмена.ИзменениеЗарегистрировано(Узел, НаборЗаписей) Тогда

			Если ВызыватьОшибку = Истина Тогда

				ВызватьИсключение "Регистрация в узел «" + Узел + "» отсутствует!";

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#Область НепосредственноеВыполнениеСверочныхОпераций

//	LNK 07.05.2024 16:36:30
Процедура ПроверитьЗаписиОтсутствующихОбъектов()

	Запрос = Новый Запрос(ТекстЗапросаПоискОтсутствующихОбъектов());
	ОбъектыВыборка = Запрос.Выполнить().Выбрать();

	Пока ОбъектыВыборка.Следующий() Цикл

		НачатьТранзакцию();

		Попытка

		//	Удаляем текущую запись регистра с текстовым значением объекта...

			МенеджерЗаписи = РегистрыСведений.СоответствиеДокументовNavision.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект  = ОбъектыВыборка.ОбъектУдалить;
			МенеджерЗаписи.Магазин = ОбъектыВыборка.МагазинУдалить;

			МенеджерЗаписи.Удалить();

		//	Добавляем новую запись в регистр, уже "полноценную".

			ПараметрыСверки = Новый Структура(
				"Магазины, РезультатСверки, ВидДокумента"
				, ОбъектыВыборка.Магазин
				, ОбъектыВыборка.РезультатСверки
				, ОбъектыВыборка.ВидДокумента);

			НазначитьДокументДляСверки(ОбъектыВыборка.Объект, ПараметрыСверки, "Відновлено запит з Navision (відсутні об'єкти)");

			ЗафиксироватьТранзакцию();

		Исключение

			ОтменитьТранзакцию();

			ТекстОшибки = ОписаниеОшибки();
			ЖурналСобытий.Регистрация("NAV.Сверка.ПоискОтсутствующих", УровеньЖурналаРегистрации.Предупреждение
				, ОбъектыВыборка.Объект.Метаданные()
				, ОбъектыВыборка.Объект
				,
				, ТекстОшибки
				, СокрЛП(ОбъектыВыборка.Объект)
				, Истина
				, Ложь
			);

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

//	LNK 16.06.2017 08:52:50
Процедура ПровестиСверкуНазначенныхДокументов(IDN_Отладка = "", ГлубинаВНеделях = 2)	Экспорт

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Возврат;

	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

//	1.	Для начала проверим документы, запрошенные на сверку из Navision, но, на тот момент,
//		отсутствующие в нашей базе данных.
//	=======================================================================================
	ПроверитьЗаписиОтсутствующихОбъектов();

//	2.	Выполняем сверку документов.
//	=======================================================================================

	Запрос = Новый Запрос(СтрЗаменить(
	"ВЫБРАТЬ
	|	ТаблицаСоответствий.Объект КАК Объект,
	|	ТаблицаСоответствий.Магазин КАК Магазин,
	|	ТаблицаСоответствий.IDN КАК IDN,
	|	ТаблицаСоответствий.ДатаРегистрации КАК ДатаРегистрации,
	|	ЕСТЬNULL(ТаблицаУточнения.ВозвратПоставщику, ЛОЖЬ) КАК ВозвратПоставщику,
	|	ТаблицаСоответствий.РезультатСверки КАК РезультатСверки,
	|	ТаблицаСоответствий.Примечание КАК Примечание
	|ИЗ
	|	РегистрСведений.СоответствиеДокументовNavision КАК ТаблицаСоответствий
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ТаблицаУточнения
	|		ПО ТаблицаСоответствий.Объект = ТаблицаУточнения.Ссылка
	|ГДЕ
	|	НЕ ТИПЗНАЧЕНИЯ(ТаблицаСоответствий.Объект) В (ТИП(СТРОКА), ТИП(Документ.КассовыйДень))
	|	И НЕ ТаблицаСоответствий.ВидДокумента = """"
	|	И ТаблицаСоответствий.РезультатСверки В (ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.НеПроверялся), ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.ОтсутствуетРозница), ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.ОтсутствуетNavision))
	|	И ВЫБОР
	|			КОГДА &IDN = """"
	|				ТОГДА ТаблицаСоответствий.ДатаРегистрации >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), НЕДЕЛЯ, -2)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &IDN = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаСоответствий.IDN = &IDN
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРегистрации УБЫВ"
	, "), НЕДЕЛЯ, -2)", "), НЕДЕЛЯ, -" + Формат(ГлубинаВНеделях, "ЧДЦ=; ЧН=2; ЧГ=") + ")")
	);
//	отладочный параметр процедуры
	Запрос.УстановитьПараметр("IDN"			, ?(ТипЗнч(IDN_Отладка) = Тип("Строка"), IDN_Отладка, ""));
	Запрос.УстановитьПараметр("ТекущаяДата"	, ТекущаяДата());

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		ОбъектыВыборка = РезультатЗапроса.Выбрать();

		ЖурналСобытий.Регистрация("NAV.Сверка.Начало", УровеньЖурналаРегистрации.Примечание
			, Метаданные.РегистрыСведений.СоответствиеДокументовNavision
			, 
			,
			, "Начало выборки из [" + Формат(ОбъектыВыборка.Количество(), "ЧДЦ=; ЧН=0; ЧГ=") + " строк]"
			, 
			, Истина
			, Ложь
		);

		Счётчик		= 0;	//	отладочные переменные
		Обработано	= 0;

		Пока ОбъектыВыборка.Следующий() Цикл

			ВидОперации = ВнешниеИсточникиПовтИсп.ВидыДокументовСверкиNavision().Получить(
				ОбъектыВыборка.Объект.Метаданные().ПолноеИмя() + ?(ОбъектыВыборка.ВозвратПоставщику, ".Возврат", ""));

			Если ВидОперации = Неопределено Тогда

				ЖурналСобытий.Регистрация("NAV.Сверка.ВидОперации", УровеньЖурналаРегистрации.Предупреждение
					, ОбъектыВыборка.Объект.Метаданные()
					, ОбъектыВыборка.Объект
					,
					, "Не удалось определить операцию Navision!"
					, СокрЛП(ОбъектыВыборка.Объект)
					, Истина
					, Ложь
				);
				Продолжить;

			Иначе

				ПроверитьСоответствиеДокументаNavision(ОбъектыВыборка, ВидОперации, Обработано);

			КонецЕсли;

			Счётчик = Счётчик + 1;

		КонецЦикла;

		ЖурналСобытий.Регистрация("NAV.Сверка.Начало", УровеньЖурналаРегистрации.Примечание
			, Метаданные.РегистрыСведений.СоответствиеДокументовNavision
			, 
			,
			, "Конец выборки из [" + Формат(ОбъектыВыборка.Количество(), "ЧДЦ=; ЧН=0; ЧГ=") + " строк] = Обработано [" + Формат(Обработано, "ЧДЦ=; ЧН=0; ЧГ=") + "]"
			, 
			, Истина
			, Ложь
		);

	Иначе

		ЖурналСобытий.Регистрация("NAV.Сверка.Начало", УровеньЖурналаРегистрации.Предупреждение
			, Метаданные.РегистрыСведений.СоответствиеДокументовNavision
			, 
			,
			, "Получена пустая выборка. Вероятно, имеет место ошибка." + Символы.ПС
			+ Запрос.Текст
			, 
			, Истина
			, Ложь
		);

	КонецЕсли;

КонецПроцедуры

//	LNK 16.06.2017 12:13:16
Процедура ПроверитьСоответствиеДокументаNavision(ВедущаяВыборка, ВидОперации, Обработано)

//	Первым делом определим документ для сверки (для перемещений - это ордер) и признак
//	отправки этой ссылки в Navision.

	Запрос = Новый Запрос(ТекстЗапросаПроверкиСоответствия());
	Запрос.УстановитьПараметр("Объект", ВедущаяВыборка.Объект);

	ОбъектыВыборка = Запрос.Выполнить().Выбрать();

	Если ОбъектыВыборка.Следующий() И НЕ ОбъектыВыборка.ОбъектСверки = Неопределено Тогда

		Если ОбъектыВыборка.Учтен Тогда

			ДанныеNavision = ПолучитьДанныеNavisionДляСверки(ОбъектыВыборка.Объект, ОбъектыВыборка.IDN, ВидОперации);

			Если ПустаяСтрока(ДанныеNavision.Ошибка) Тогда

			//	Если НЕ ДанныеNavision.Шапка.Количество() = 0 И ДанныеNavision.Шапка[0].Учтен = 1 Тогда
			//	Результат сверки важен для Navision, так как показывает состояние документа в 1С для его учёта в Navision.
			//	Поэтому не учитываем флаг "Учтен" в Navision... а что дальше? после возможного изменения?
				Если НЕ ДанныеNavision.Шапка.Количество() = 0 Тогда

					Обработано = Обработано + 1;
					ДанныеЛокальные = ПолучитьДанныеЛокальныеДляСверки(ОбъектыВыборка.ОбъектСверки);

					ДополнительнаяИнформация = "";
					РезультатСверки = СравнитьТаблицыТоваров(ДанныеNavision.Товары, ДанныеЛокальные.Товары, ДополнительнаяИнформация);

					Если НЕ ВедущаяВыборка.РезультатСверки = РезультатСверки Тогда

						ПараметрыСверки = Новый Структура(
							"Магазины, РезультатСверки, ВидДокумента, СообщитьNavision, ДополнительнаяИнформация"
							, ВедущаяВыборка.Магазин
							, РезультатСверки
							, ВидОперации
							, Истина	//	LNK 04.05.2024 15:58:41
							, ДополнительнаяИнформация);

						НачатьТранзакцию();

						Попытка	//	LNK 29.12.2021 10:41:28

							НазначитьДокументДляСверки(ОбъектыВыборка.Объект, ПараметрыСверки, "Звіряння виконано за [" + ОбъектыВыборка.ОбъектСверки + "] (операція [" + ВидОперации + "])");
							РегистрацияРезультатаСверкиДляNavision(ОбъектыВыборка.Объект, ВедущаяВыборка.Магазин);

							ЗафиксироватьТранзакцию();

						Исключение

							ТекстОшибки = ОписаниеОшибки();
							ОтменитьТранзакцию();

						КонецПопытки;

					КонецЕсли;

				Иначе

					Если НЕ ВедущаяВыборка.РезультатСверки = Перечисления.РезультатСверкиNavision.ОтсутствуетNavision Тогда

						ПараметрыСверки = Новый Структура(
							"Магазины, РезультатСверки, ВидДокумента"
							, ВедущаяВыборка.Магазин
							, Перечисления.РезультатСверкиNavision.ОтсутствуетNavision
							, ВидОперации);

						НазначитьДокументДляСверки(ОбъектыВыборка.Объект, ПараметрыСверки, "IDN [" + ОбъектыВыборка.IDN + "] (операція [" + ВидОперации + "]) у Navision не знайдено!");

					КонецЕсли;

				КонецЕсли;

			Иначе

				ЖурналСобытий.Регистрация("NAV.Сверка.error", УровеньЖурналаРегистрации.Ошибка
					, ОбъектыВыборка.Объект.Метаданные()
					, ОбъектыВыборка.Объект
					,
					, ДанныеNavision.Ошибка
					, СокрЛП(ОбъектыВыборка.Объект)
					, Истина
					, Ложь
				);

			КонецЕсли;

		Иначе

			Если НЕ ВедущаяВыборка.РезультатСверки = Перечисления.РезультатСверкиNavision.НеГотовКСверке Тогда

				ПараметрыСверки = Новый Структура(
					"Магазины, РезультатСверки, ВидДокумента"
					, ВедущаяВыборка.Магазин
					, Перечисления.РезультатСверкиNavision.НеГотовКСверке
					, ВидОперации);

				НачатьТранзакцию();

				Попытка	//	LNK 29.12.2021 10:41:28

					НазначитьДокументДляСверки(ОбъектыВыборка.Объект, ПараметрыСверки, "Об'єкт [" + ОбъектыВыборка.ОбъектСверки + "] не проведено або не відправлено до Navision!");
					РегистрацияРезультатаСверкиДляNavision(ОбъектыВыборка.Объект, ВедущаяВыборка.Магазин);

					ЗафиксироватьТранзакцию();

				Исключение

					ТекстОшибки = ОписаниеОшибки();
					ОтменитьТранзакцию();

					ЖурналСобытий.Регистрация("NAV.Сверка.error", УровеньЖурналаРегистрации.Ошибка
						, ОбъектыВыборка.Объект.Метаданные()
						, ОбъектыВыборка.Объект
						,
						, "Не учтено для NAV" + Символы.ПС + ТекстОшибки
						, СокрЛП(ОбъектыВыборка.Объект)
						, Истина
						, Ложь
					);

				КонецПопытки;

			КонецЕсли;

		КонецЕсли;

	ИначеЕсли ОбъектыВыборка.ОбъектСверки = Неопределено Тогда

		РезультатСверки	 = Неопределено;
		СообщитьNavision = Ложь;

		Если НЕ ОбъектыВыборка.ОбъектПроведен = Истина Тогда	//	LNK 08.05.2024 07:11:37

			Примечание		 = "Об'єкт, який в основі звіряння (наприклад, Переміщення Товарів) НЕ проведено! Перевірку не пройдено.";
			РезультатСверки	 = Перечисления.РезультатСверкиNavision.НеСоответствует;
			СообщитьNavision = Истина;

		ИначеЕсли ТипЗнч(ОбъектыВыборка.Объект) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда

			Примечание		 = "Ймовірно, маємо відсутність товарного ордеру - предмет звірки не виявлений! Перевірку не пройдено.";
			РезультатСверки	 = Перечисления.РезультатСверкиNavision.НеГотовКСверке;

		КонецЕсли;

		Если НЕ РезультатСверки = Неопределено Тогда

			ПараметрыСверки = Новый Структура(
				"Магазины, РезультатСверки, ВидДокумента, ДополнительнаяИнформация"
				, ВедущаяВыборка.Магазин
				, РезультатСверки
				, ВидОперации
				, ДополнительнаяИнформация
			);

			Если СообщитьNavision = Истина Тогда	//	LNK 08.05.2024 08:24:49

				ПараметрыСверки.Вставить("СообщитьNavision", Истина);

			КонецЕсли;

			НазначитьДокументДляСверки(ОбъектыВыборка.Объект, ПараметрыСверки, Примечание);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

//	LNK 16.06.2017 10:10:03
Функция ТекстЗапросаПоискОтсутствующихОбъектов()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаСоответствий.Объект КАК Объект,
	|	ТаблицаСоответствий.Магазин КАК Магазин,
	|	ТаблицаСоответствий.IDN КАК IDN,
	|	ТаблицаСоответствий.ВидДокумента КАК ВидДокумента,
	|	ТаблицаСоответствий.ДатаРегистрации КАК КлючСортировки
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	РегистрСведений.СоответствиеДокументовNavision КАК ТаблицаСоответствий
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ТаблицаСоответствий.Объект) = ТИП(СТРОКА)
	|	И НЕ ТаблицаСоответствий.ВидДокумента = """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDN,
	|	ВидДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Фильтр.Объект КАК ОбъектУдалить,
	|	Фильтр.Магазин КАК МагазинУдалить,
	|	ТаблицаДокументы.Ссылка КАК Объект,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументы.МагазинОтправитель.СкладУправляющейСистемы
	|			ТОГДА ТаблицаДокументы.МагазинПолучатель
	|		ИНАЧЕ ТаблицаДокументы.МагазинОтправитель
	|	КОНЕЦ КАК Магазин,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокументы.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.НеГотовКСверке)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.НеПроверялся)
	|	КОНЕЦ КАК РезультатСверки,
	|	Фильтр.IDN КАК IDN,
	|	Фильтр.ВидДокумента КАК ВидДокумента,
	|	Фильтр.КлючСортировки КАК КлючСортировки
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ТаблицаДокументы
	|		ПО Фильтр.IDN = ТаблицаДокументы.IDN
	|			И (Фильтр.ВидДокумента = ""ПЕРЕМЕЩ"")
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Фильтр.Объект,
	|	Фильтр.Магазин,
	|	ТаблицаДокументы.Ссылка,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументы.МагазинОтправитель.СкладУправляющейСистемы
	|			ТОГДА ТаблицаДокументы.МагазинПолучатель
	|		ИНАЧЕ ТаблицаДокументы.МагазинОтправитель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокументы.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.НеГотовКСверке)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.НеПроверялся)
	|	КОНЕЦ,
	|	Фильтр.IDN,
	|	Фильтр.ВидДокумента,
	|	Фильтр.КлючСортировки
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПеремещения КАК ТаблицаДокументы
	|		ПО Фильтр.IDN = ТаблицаДокументы.IDN
	|			И (Фильтр.ВидДокумента = ""ПЕРЕМЕЩ"")
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Фильтр.Объект,
	|	Фильтр.Магазин,
	|	ТаблицаДокументы.Ссылка,
	|	ТаблицаДокументы.Магазин,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокументы.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.НеГотовКСверке)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.НеПроверялся)
	|	КОНЕЦ,
	|	Фильтр.IDN,
	|	Фильтр.ВидДокумента,
	|	Фильтр.КлючСортировки
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ТаблицаДокументы
	|		ПО Фильтр.IDN = ТаблицаДокументы.IDN
	|			И (ТаблицаДокументы.ВозвратПоставщику = ЛОЖЬ)
	|			И (Фильтр.ВидДокумента = ""ПОКУПКА"")
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Фильтр.Объект,
	|	Фильтр.Магазин,
	|	ТаблицаДокументы.Ссылка,
	|	ТаблицаДокументы.Магазин,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокументы.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.НеГотовКСверке)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.НеПроверялся)
	|	КОНЕЦ,
	|	Фильтр.IDN,
	|	Фильтр.ВидДокумента,
	|	Фильтр.КлючСортировки
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ТаблицаДокументы
	|		ПО Фильтр.IDN = ТаблицаДокументы.IDN
	|			И (ТаблицаДокументы.ВозвратПоставщику = ИСТИНА)
	|			И (Фильтр.ВидДокумента = ""ВЗВР.ПОКУП"")
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Фильтр.Объект,
	|	Фильтр.Магазин,
	|	ТаблицаДокументы.Ссылка,
	|	ТаблицаДокументы.Магазин,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокументы.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.НеГотовКСверке)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.НеПроверялся)
	|	КОНЕЦ,
	|	Фильтр.IDN,
	|	Фильтр.ВидДокумента,
	|	Фильтр.КлючСортировки
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров КАК ТаблицаДокументы
	|		ПО Фильтр.IDN = ТаблицаДокументы.IDN
	|			И (Фильтр.ВидДокумента = ""ПРИХОД"")
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Фильтр.Объект,
	|	Фильтр.Магазин,
	|	ТаблицаДокументы.Ссылка,
	|	ТаблицаДокументы.Магазин,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокументы.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.НеГотовКСверке)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.НеПроверялся)
	|	КОНЕЦ,
	|	Фильтр.IDN,
	|	Фильтр.ВидДокумента,
	|	Фильтр.КлючСортировки
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеТоваров КАК ТаблицаДокументы
	|		ПО Фильтр.IDN = ТаблицаДокументы.IDN
	|			И (Фильтр.ВидДокумента = ""СПИСАНИЕ"")
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Фильтр.Объект,
	|	Фильтр.Магазин,
	|	ТаблицаДокументы.Ссылка,
	|	ТаблицаДокументы.Магазин,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокументы.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.НеГотовКСверке)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.НеПроверялся)
	|	КОНЕЦ,
	|	Фильтр.IDN,
	|	Фильтр.ВидДокумента,
	|	Фильтр.КлючСортировки
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПересортицаТоваров КАК ТаблицаДокументы
	|		ПО Фильтр.IDN = ТаблицаДокументы.IDN
	|			И (Фильтр.ВидДокумента = ""ПЕРЕСОРТ"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючСортировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Фильтр"
	;
	Возврат ТекстЗапроса;

КонецФункции

//	LNK 04.05.2024 15:52:10
Функция ТекстЗапросаПроверкиСоответствия()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Данные.Объект КАК Объект,
	|	Данные.Проведен КАК ОбъектПроведен,
	|	ВЫБОР
	|		КОГДА Данные.Объект ССЫЛКА Документ.ПеремещениеТоваров
	|			ТОГДА ВЫБОР
	|					КОГДА ПриходныйОрдер.Ссылка ЕСТЬ НЕ NULL 
	|						ТОГДА ПриходныйОрдер.Ссылка
	|					КОГДА РасходныйОрдер.Ссылка ЕСТЬ НЕ NULL 
	|						ТОГДА РасходныйОрдер.Ссылка
	|					ИНАЧЕ НЕОПРЕДЕЛЕНО
	|				КОНЕЦ
	|		ИНАЧЕ Данные.Объект
	|	КОНЕЦ КАК ОбъектСверки,
	|	Данные.Магазин КАК Магазин,
	|	Данные.IDN КАК IDN,
	|	Данные.УзелСоздания КАК УзелСоздания
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокументы.Ссылка КАК Объект,
	|		ТаблицаДокументы.Проведен КАК Проведен,
	|		ТаблицаДокументы.IDN КАК IDN,
	|		ВЫБОР
	|			КОГДА ТаблицаДокументы.МагазинОтправитель.СкладУправляющейСистемы
	|				ТОГДА ТаблицаДокументы.МагазинПолучатель
	|			ИНАЧЕ ТаблицаДокументы.МагазинОтправитель
	|		КОНЕЦ КАК Магазин,
	|		ТаблицаДокументы.УзелСоздания КАК УзелСоздания
	|	ИЗ
	|		Документ.ПеремещениеТоваров КАК ТаблицаДокументы
	|	ГДЕ
	|		ТИПЗНАЧЕНИЯ(&Объект) = ТИП(Документ.ПеремещениеТоваров)
	|		И ТаблицаДокументы.Ссылка = &Объект
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаДокументы.Ссылка,
	|		ТаблицаДокументы.Проведен,
	|		ТаблицаДокументы.IDN,
	|		ВЫБОР
	|			КОГДА ТаблицаДокументы.МагазинОтправитель.СкладУправляющейСистемы
	|				ТОГДА ТаблицаДокументы.МагазинПолучатель
	|			ИНАЧЕ ТаблицаДокументы.МагазинОтправитель
	|		КОНЕЦ,
	|		ТаблицаДокументы.УзелСоздания
	|	ИЗ
	|		Документ.КорректировкаПеремещения КАК ТаблицаДокументы
	|	ГДЕ
	|		ТИПЗНАЧЕНИЯ(&Объект) = ТИП(Документ.КорректировкаПеремещения)
	|		И ТаблицаДокументы.Ссылка = &Объект
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаДокументы.Ссылка,
	|		ТаблицаДокументы.Проведен,
	|		ТаблицаДокументы.IDN,
	|		ТаблицаДокументы.Магазин,
	|		ТаблицаДокументы.УзелСоздания
	|	ИЗ
	|		Документ.ЗаказПоставщику КАК ТаблицаДокументы
	|	ГДЕ
	|		ТИПЗНАЧЕНИЯ(&Объект) = ТИП(Документ.ЗаказПоставщику)
	|		И ТаблицаДокументы.Ссылка = &Объект
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаДокументы.Ссылка,
	|		ТаблицаДокументы.Проведен,
	|		ТаблицаДокументы.IDN,
	|		ТаблицаДокументы.Магазин,
	|		ТаблицаДокументы.УзелСоздания
	|	ИЗ
	|		Документ.ОприходованиеТоваров КАК ТаблицаДокументы
	|	ГДЕ
	|		ТИПЗНАЧЕНИЯ(&Объект) = ТИП(Документ.ОприходованиеТоваров)
	|		И ТаблицаДокументы.Ссылка = &Объект
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаДокументы.Ссылка,
	|		ТаблицаДокументы.Проведен,
	|		ТаблицаДокументы.IDN,
	|		ТаблицаДокументы.Магазин,
	|		ТаблицаДокументы.УзелСоздания
	|	ИЗ
	|		Документ.СписаниеТоваров КАК ТаблицаДокументы
	|	ГДЕ
	|		ТИПЗНАЧЕНИЯ(&Объект) = ТИП(Документ.СписаниеТоваров)
	|		И ТаблицаДокументы.Ссылка = &Объект
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаДокументы.Ссылка,
	|		ТаблицаДокументы.Проведен,
	|		ТаблицаДокументы.IDN,
	|		ТаблицаДокументы.Магазин,
	|		ТаблицаДокументы.УзелСоздания
	|	ИЗ
	|		Документ.ПересортицаТоваров КАК ТаблицаДокументы
	|	ГДЕ
	|		ТИПЗНАЧЕНИЯ(&Объект) = ТИП(Документ.ПересортицаТоваров)
	|		И ТаблицаДокументы.Ссылка = &Объект) КАК Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдер
	|		ПО Данные.Объект = ПриходныйОрдер.ДокументОснование
	|			И (ПриходныйОрдер.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК РасходныйОрдер
	|		ПО Данные.Объект = РасходныйОрдер.ДокументОснование
	|			И (РасходныйОрдер.Проведен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.Объект КАК Объект,
	|	Источник.ОбъектПроведен КАК ОбъектПроведен,
	|	Источник.ОбъектСверки КАК ОбъектСверки,
	|	Источник.IDN КАК IDN,
	|	ВЫБОР
	|		КОГДА ТаблицаУчтенВNavision.УчтеноNavision ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Учтен,
	|	Источник.УзелСоздания КАК УзелСоздания
	|ИЗ
	|	Источник КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаУчтенВNavision
	|		ПО Источник.ОбъектСверки = ТаблицаУчтенВNavision.Объект
	|			И Источник.Магазин = ТаблицаУчтенВNavision.Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	;

	Возврат ТекстЗапроса;

КонецФункции

//	LNK 16.06.2017 11:22:29
Функция ПолучитьДанныеNavisionДляСверки(Объект, IDN, ВидОперации)
	
	ДанныеNavision = Новый Структура(
		"Шапка, Товары, Ошибка"
		, Новый ТаблицаЗначений, Новый ТаблицаЗначений, "");

	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда

			ТекстЗапросаШапка  = "EXEC PURDOC_HEAD '#TYPE#', '#NUM#'";
			ТекстЗапросаТовары = "EXEC PURDOC_LINE '#TYPE#', '#NUM#'";

	Иначе	ТекстЗапросаШапка  = "EXEC WHDOC_HEAD_1C '#TYPE#', '#NUM#'";
			ТекстЗапросаТовары = "EXEC WHDOC_LINE_1C '#TYPE#', '#NUM#'";

	КонецЕсли;

	ТекстЗапросаШапка  = СтрЗаменить(ТекстЗапросаШапка , "#NUM#" , IDN);
	ТекстЗапросаШапка  = СтрЗаменить(ТекстЗапросаШапка , "#TYPE#", ВидОперации);
	ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары, "#NUM#" , IDN);
	ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары, "#TYPE#", ВидОперации);

	Попытка

		ДанныеNavision.Шапка  = ВнешниеИсточники.ПолучитьДанныеОтNavision(ТекстЗапросаШапка,,, Истина);
		ДанныеNavision.Товары = ВнешниеИсточники.ПолучитьДанныеОтNavision(ТекстЗапросаТовары,,, Истина);

		ДанныеNavision.Товары.Колонки.Удалить("IDN");
		ДанныеNavision.Товары.Колонки.ТоварНо_.Имя   = "IDN";
		ДанныеNavision.Товары.Колонки.Кол_воБаз_.Имя = "Количество";

	Исключение

		ДанныеNavision.Ошибка = ОписаниеОшибки();

	КонецПопытки;

	Возврат ДанныеNavision;

КонецФункции

//	LNK 18.06.2017 09:23:48
Функция ПолучитьДанныеЛокальныеДляСверки(Объект)

	ДанныеЛокальные = Новый Структура(
		"Шапка, Товары"
		, Новый Структура, Новый ТаблицаЗначений);
	ДанныеЛокальные.Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДанныеЛокальные.Товары.Колонки.Добавить("IDN"         , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
	ДанныеЛокальные.Товары.Колонки.Добавить("Количество"  , Новый ОписаниеТипов("Число"));

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Дата КАК Период,
	|	ТаблицаДокументы.Ссылка КАК Регистратор,
	|	ТаблицаДокументы.Проведен КАК Проведен,
	|	ТаблицаТовары.Номенклатура.IDN КАК IDN,
	|	ТаблицаТовары.Номенклатура,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаТовары
	|		ПО ТаблицаДокументы.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Объект) = ТИП(Документ.ПриходныйОрдерНаТовары)
	|	И ТаблицаДокументы.Ссылка = &Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументы.Дата,
	|	ТаблицаДокументы.Ссылка,
	|	ТаблицаДокументы.Проведен,
	|	ТаблицаТовары.Номенклатура.IDN,
	|	ТаблицаТовары.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументы.Дата,
	|	ТаблицаДокументы.Ссылка,
	|	ТаблицаДокументы.Проведен,
	|	ТаблицаТовары.Номенклатура.IDN,
	|	ТаблицаТовары.Номенклатура,
	|	СУММА(ТаблицаТовары.Количество)
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК ТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.Товары КАК ТаблицаТовары
	|		ПО ТаблицаДокументы.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Объект) = ТИП(Документ.РасходныйОрдерНаТовары)
	|	И ТаблицаДокументы.Ссылка = &Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументы.Дата,
	|	ТаблицаДокументы.Ссылка,
	|	ТаблицаДокументы.Проведен,
	|	ТаблицаТовары.Номенклатура.IDN,
	|	ТаблицаТовары.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументы.Дата,
	|	ТаблицаДокументы.Ссылка,
	|	ТаблицаДокументы.Проведен,
	|	ТаблицаТовары.Номенклатура.IDN,
	|	ТаблицаТовары.Номенклатура,
	|	СУММА(ТаблицаТовары.Количество)
	|ИЗ
	|	Документ.КорректировкаПеремещения КАК ТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаПеремещения.Товары КАК ТаблицаТовары
	|		ПО ТаблицаДокументы.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Объект) = ТИП(Документ.КорректировкаПеремещения)
	|	И ТаблицаДокументы.Ссылка = &Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументы.Дата,
	|	ТаблицаДокументы.Ссылка,
	|	ТаблицаДокументы.Проведен,
	|	ТаблицаТовары.Номенклатура.IDN,
	|	ТаблицаТовары.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументы.Дата,
	|	ТаблицаДокументы.Ссылка,
	|	ТаблицаДокументы.Проведен,
	|	ТаблицаТовары.Номенклатура.IDN,
	|	ТаблицаТовары.Номенклатура,
	|	СУММА(ТаблицаТовары.Количество)
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|		ПО ТаблицаДокументы.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Объект) = ТИП(Документ.ЗаказПоставщику)
	|	И ТаблицаДокументы.Ссылка = &Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументы.Дата,
	|	ТаблицаДокументы.Ссылка,
	|	ТаблицаДокументы.Проведен,
	|	ТаблицаТовары.Номенклатура.IDN,
	|	ТаблицаТовары.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументы.Дата,
	|	ТаблицаДокументы.Ссылка,
	|	ТаблицаДокументы.Проведен,
	|	ТаблицаТовары.Номенклатура.IDN,
	|	ТаблицаТовары.Номенклатура,
	|	СУММА(ТаблицаТовары.Количество)
	|ИЗ
	|	Документ.ОприходованиеТоваров КАК ТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров.Товары КАК ТаблицаТовары
	|		ПО ТаблицаДокументы.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Объект) = ТИП(Документ.ОприходованиеТоваров)
	|	И ТаблицаДокументы.Ссылка = &Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументы.Дата,
	|	ТаблицаДокументы.Ссылка,
	|	ТаблицаДокументы.Проведен,
	|	ТаблицаТовары.Номенклатура.IDN,
	|	ТаблицаТовары.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументы.Дата,
	|	ТаблицаДокументы.Ссылка,
	|	ТаблицаДокументы.Проведен,
	|	ТаблицаТовары.Номенклатура.IDN,
	|	ТаблицаТовары.Номенклатура,
	|	СУММА(ТаблицаТовары.Количество)
	|ИЗ
	|	Документ.СписаниеТоваров КАК ТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеТоваров.Товары КАК ТаблицаТовары
	|		ПО ТаблицаДокументы.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Объект) = ТИП(Документ.СписаниеТоваров)
	|	И ТаблицаДокументы.Ссылка = &Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументы.Дата,
	|	ТаблицаДокументы.Ссылка,
	|	ТаблицаДокументы.Проведен,
	|	ТаблицаТовары.Номенклатура.IDN,
	|	ТаблицаТовары.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументы.Дата,
	|	ТаблицаДокументы.Ссылка,
	|	ТаблицаДокументы.Проведен,
	|	ТаблицаТовары.IDN,
	|	ТаблицаТовары.Номенклатура,
	|	СУММА(ТаблицаТовары.Количество)
	|ИЗ
	|	Документ.ПересортицаТоваров КАК ТаблицаДокументы,
	|	(ВЫБРАТЬ
	|		ТаблицаСписать.Номенклатура.IDN КАК IDN,
	|		ТаблицаСписать.Номенклатура КАК Номенклатура,
	|		-СУММА(ТаблицаСписать.Количество) КАК Количество
	|	ИЗ
	|		Документ.ПересортицаТоваров.Товары КАК ТаблицаСписать
	|	ГДЕ
	|		ТИПЗНАЧЕНИЯ(&Объект) = ТИП(Документ.ПересортицаТоваров)
	|		И ТаблицаСписать.Ссылка = &Объект
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаСписать.Номенклатура.IDN,
	|		ТаблицаСписать.Номенклатура
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаОприходовать.НоменклатураОприходование.IDN,
	|		ТаблицаОприходовать.НоменклатураОприходование,
	|		СУММА(ТаблицаОприходовать.Количество)
	|	ИЗ
	|		Документ.ПересортицаТоваров.Товары КАК ТаблицаОприходовать
	|	ГДЕ
	|		ТИПЗНАЧЕНИЯ(&Объект) = ТИП(Документ.ПересортицаТоваров)
	|		И ТаблицаОприходовать.Ссылка = &Объект
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаОприходовать.НоменклатураОприходование.IDN,
	|		ТаблицаОприходовать.НоменклатураОприходование) КАК ТаблицаТовары
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Объект) = ТИП(Документ.ПересортицаТоваров)
	|	И ТаблицаДокументы.Ссылка = &Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументы.Дата,
	|	ТаблицаДокументы.Ссылка,
	|	ТаблицаДокументы.Проведен,
	|	ТаблицаТовары.IDN,
	|	ТаблицаТовары.Номенклатура
	|ИТОГИ
	|	МАКСИМУМ(Период),
	|	МАКСИМУМ(Проведен),
	|	СУММА(Количество)
	|ПО
	|	Регистратор"
	);
	Запрос.УстановитьПараметр("Объект", Объект);
	
	СверкаРезультат = Запрос.Выполнить();
	
	Если НЕ СверкаРезультат.Пустой() Тогда

		ОбъектыВыборка = СверкаРезультат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ОбъектыВыборка.Следующий() Цикл

			ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВСтруктуру(СверкаРезультат, ОбъектыВыборка, ДанныеЛокальные.Шапка
				, ОбщегоНазначенияРТ.ПолучитьСоответствиеПоСтроке("Период, Регистратор, Проведен"));

			ТоварыВыборка = ОбъектыВыборка.Выбрать();

			Пока ТоварыВыборка.Следующий() Цикл

				СтрокаТовары = ДанныеЛокальные.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовары, ТоварыВыборка);

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

	Возврат ДанныеЛокальные;

КонецФункции

//	LNK 18.06.2017 14:25:40
Функция СравнитьТаблицыТоваров(ТоварыNavision, ТоварыЛокальные, ДополнительнаяИнформация)

	РезультатСверки = Перечисления.РезультатСверкиNavision.Соответствует;
	ОтличныКоличества = Новый Соответствие;

//	Свернём на всякий случай...
	ТоварыNavision.Свернуть("IDN", "Количество");
	ТоварыЛокальные.Свернуть("IDN", "Количество");

//	1. Идем по таблице "ТоварыNavision" и проверяем, чего нет в таблице "ТоварыЛокальные"

	Для каждого СтрокаТаблицы Из ТоварыNavision Цикл

		Если СтрокаТаблицы.Количество = 0 Тогда

		//	Количество не указано - всё равно, что нет строки! Пропускаем.
			Продолжить;

		КонецЕсли;

		ТекстПроблемы  = "";
		СтрокаОтветная = ТоварыЛокальные.Найти(СтрокаТаблицы.IDN, "IDN");

		Если СтрокаОтветная = Неопределено Тогда

			ТекстПроблемы = "В 1С:Розница нет товара [" + СтрокаТаблицы.IDN + "]";

		Иначе

			Если НЕ СтрокаТаблицы.Количество = СтрокаОтветная.Количество Тогда

				ОтличныКоличества.Вставить(СтрокаТаблицы.IDN, Истина);
				ТекстПроблемы = "Разное количество [" + СтрокаТаблицы.IDN
				+ "]> 1С:Розница=" + Формат(СтрокаОтветная.Количество, "ЧН=0,000; ЧГ=")
				+ ", а в Navision=" + Формат(СтрокаТаблицы.Количество, "ЧН=0,000; ЧГ=");

			КонецЕсли;

		КонецЕсли;

		Если НЕ ПустаяСтрока(ТекстПроблемы) Тогда

			РезультатСверки = Перечисления.РезультатСверкиNavision.НеСоответствует;
			ДополнительнаяИнформация = ДополнительнаяИнформация + ?(ПустаяСтрока(ДополнительнаяИнформация), "", Символы.ПС) + ТекстПроблемы;

		КонецЕсли;

	КонецЦикла;

//	2. Идем по таблице "ТоварыЛокальные" и проверяем, чего нет в таблице "ТоварыNavision"

	Для каждого СтрокаТаблицы Из ТоварыЛокальные Цикл

		Если СтрокаТаблицы.Количество = 0 Тогда

		//	Количество не указано - всё равно, что нет строки! Пропускаем.
			Продолжить;

		КонецЕсли;

		ТекстПроблемы  = "";
		СтрокаОтветная = ТоварыNavision.Найти(СтрокаТаблицы.IDN, "IDN");

		Если СтрокаОтветная = Неопределено Тогда

			ТекстПроблемы = "В Navision нет товара [" + СтрокаТаблицы.IDN + "]";

		Иначе

			Если НЕ СтрокаТаблицы.Количество = СтрокаОтветная.Количество Тогда

				ОтличныКоличества.Вставить(СтрокаТаблицы.IDN, Истина);
				ТекстПроблемы = "Разное количество [" + СтрокаТаблицы.IDN
				+ "]> Navision=" + Формат(СтрокаОтветная.Количество, "ЧН=0,000; ЧГ=")
				+ ", а в 1С:Розница=" + Формат(СтрокаТаблицы.Количество, "ЧН=0,000; ЧГ=");

			КонецЕсли;

		КонецЕсли;

		Если НЕ ПустаяСтрока(ТекстПроблемы) Тогда

			РезультатСверки = Перечисления.РезультатСверкиNavision.НеСоответствует;
			ДополнительнаяИнформация = ДополнительнаяИнформация + ?(ПустаяСтрока(ДополнительнаяИнформация), "", Символы.ПС) + ТекстПроблемы;

		КонецЕсли;

	КонецЦикла;

	Возврат РезультатСверки;

КонецФункции // СравнитьТаблицыТоваров()

//	LNK 22.07.2017 10:02:39
Функция НаличиеДокументаNavision(IDN, ВидОперации, ТипОбъекта = Неопределено)	Экспорт

	Если ТипОбъекта = Тип("ДокументСсылка.ЗаказПоставщику") Тогда

			ТекстЗапроса = "EXEC PURDOC_HEAD '#TYPE#', '#NUM#'";

	Иначе	ТекстЗапроса = "EXEC WHDOC_HEAD_1C '#TYPE#', '#NUM#'";

	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса , "#NUM#" , IDN);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса , "#TYPE#", ВидОперации);

	ТаблицаШапки = ВнешниеИсточники.ПолучитьДанныеОтNavision(ТекстЗапроса,,, Истина);

	Возврат НЕ ТаблицаШапки.Количество() = 0;

КонецФункции // НаличиеДокументаNavision()

#КонецОбласти

#Область НоваяСхемаСверкиДокументов

Процедура РегистрацияДокументаПриЗаписи(Объект, Отказ)	Экспорт

	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		СписокУзлов = ВнешниеИсточникиПовтИсп.СписокУзловNavision(Истина);

		Если НЕ СписокУзлов.Количество() = 0 Тогда

			ПланыОбмена.ЗарегистрироватьИзменения(СписокУзлов, Объект.Ссылка);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры
	
#КонецОбласти




















