#Область ПрограммныйИнтерфейс

Функция ПолучитьПрограммыЛояльностиПоСкидкам(СписокСкидок)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.ПрограммаЛояльности КАК ПрограммаЛояльности
	|ИЗ
	|	Справочник.СкидкиНаценки КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Ссылка В(&СписокСкидок)
	|	И НЕ ТаблицаСправочник.ПрограммаЛояльности = ЗНАЧЕНИЕ(Справочник.ПрограммыЛояльности.ПустаяСсылка)"
	);
	Запрос.УстановитьПараметр("СписокСкидок", СписокСкидок);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПрограммаЛояльности");

КонецФункции

Функция ОчиститьОплатуБонуснымиБаллами(Объект, ИмяТовары, ИмяОплата, ТипыБонусовПараметр = Неопределено, УстановитьКлючСвязи = Ложь)	Экспорт

	ТаблицаОплатаИзменена = Ложь;

	Если НЕ ТипЗнч(ТипыБонусовПараметр) = Тип("Массив") Тогда

		ТипыБонусов = Новый Массив;

		Если ТипыБонусовПараметр = Неопределено Тогда

			Для каждого ЭлементТипов Из Перечисления.ТипыБонусов Цикл

				ТипыБонусов.Добавить(ЭлементТипов);

			КонецЦикла;

		Иначе

			ТипыБонусов.Добавить(ТипыБонусовПараметр);

		КонецЕсли;

	Иначе

		ТипыБонусов = ТипыБонусовПараметр;

	КонецЕсли;

	Если ТипыБонусов.Найти(Перечисления.ТипыБонусов.ПустаяСсылка()) = Неопределено Тогда

		ТипыБонусов.Добавить(Перечисления.ТипыБонусов.ПустаяСсылка());	//	такой себе предохранитель.. мало ли!

	КонецЕсли;

	Для каждого ТипБонусов Из ТипыБонусов Цикл

		СтрокиТабличнойЧасти = Объект[ИмяОплата].НайтиСтроки(Новый Структура("ТипБонусов", ТипБонусов));

		Для каждого СтрокаТабличнойЧасти Из СтрокиТабличнойЧасти Цикл

			Объект[ИмяОплата].Удалить(СтрокаТабличнойЧасти);
			ТаблицаОплатаИзменена = Истина;

		КонецЦикла;

	КонецЦикла;

	Если УстановитьКлючСвязи = Истина Тогда

	//	.. и, значит, необходимо перенумеровать колонку "КлючСвязиБонусныхБаллов"
		БонусныеБаллыСервер.ЗаполнитьКлючСвязиБонусныхБаллов(Объект[ИмяТовары]);

	КонецЕсли;

	ЗаполнитьСкидкиТаблицыТоваров(Объект, ИмяТовары, ИмяОплата);

	Возврат ТаблицаОплатаИзменена;

КонецФункции

//	LNK 19.01.2022 15:35:06
Процедура ОчиститьСкидкиНачислениеБонусныхБаллов(Объект, ИмяТовары, ИмяСкидки)	Экспорт

//	Вызывается "РМК.Форма.ПрименитьКОбъектуОплатуБонуснымиБаллами"
	#Если _ Тогда
	Объект = Документы.ЧекККМ.СоздатьДокумент(ИмяСкидки);
	#КонецЕсли

	СтрокиСкидки = Объект[ИмяСкидки].НайтиСтроки(Новый Структура("СпособПримененияСкидки", Перечисления.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы));

	Для каждого СтрокаСкидки Из СтрокиСкидки Цикл

		СтрокиТовары = Объект[ИмяТовары].НайтиСтроки(Новый Структура("КлючСвязи", СтрокаСкидки.КлючСвязи));

		Если НЕ СтрокиТовары = Неопределено Тогда

			Для каждого СтрокаТовары Из СтрокиТовары Цикл

				СтрокаТовары.СуммаБонусныхБалловНачислено = 0;

			КонецЦикла;

		КонецЕсли;

		Объект[ИмяСкидки].Удалить(СтрокаСкидки);

	КонецЦикла;

КонецПроцедуры

//	LNK 21.06.2021 07:26:03
Процедура ЗаполнитьСкидкиТаблицыТоваров(Объект, ИмяТовары, ИмяОплата)	Экспорт

	#Если _ Тогда
	Объект = Документы.ЧекККМ.СоздатьДокумент();
	#КонецЕсли

	Для каждого СтрокаТаблицыТовары Из Объект[ИмяТовары] Цикл

		СтрокаТаблицыТовары.СуммаБонусныхБалловСписано = 0;

		СтрокиТаблицыОплата = Объект[ИмяОплата].НайтиСтроки(Новый Структура("КлючСвязиБонусныхБаллов", СтрокаТаблицыТовары.КлючСвязиБонусныхБаллов));

		Для каждого СтрокаТаблицыОплата Из СтрокиТаблицыОплата Цикл

			СтрокаТаблицыТовары.СуммаБонусныхБалловСписано = СтрокаТаблицыТовары.СуммаБонусныхБалловСписано + СтрокаТаблицыОплата.СуммаБонусныхБаллов;

		КонецЦикла;

		ОбработкаТабличнойЧастиТоварыКлиентСервер.РассчитатьРезультатСкидкиВСтрокеТЧ(СтрокаТаблицыТовары, Объект.ЦенаВключаетНДС, Истина);

	КонецЦикла;
		
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТовары], Объект.ЦенаВключаетНДС);

КонецПроцедуры

#КонецОбласти

#Область РаспределениеБонусныхБалловПоТаблицеТоваров

Функция РаспределитьСуммуБонусныхБаллов(Объект, ИмяТовары, ТаблицаБонусныеБаллы, ПараметрыРаспределения)	Экспорт

	Перем СуммаБонусныхБалловДляПогашения;

	УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();

//	Табличные части "ИмяТовары" и "ИмяОплата" связываются реквизитом "КлючСвязиБонусныхБаллов"
	ТоварыДляОплаты = ПолучитьТаблицуТоварыДляОплаты(Объект[ИмяТовары], ПараметрыРаспределения, УчетнаяПолитика);
	СуммаДокумента  = ТоварыДляОплаты.Итог("СуммаСНДС");

//	Проверим переданную сумму на погашение.. если таковой нет, то назначим сумму документа.
//	Но ниже нужно будет уточнить эту сумму с учётом ограничения оплаты бонусами.
	ПараметрыРаспределения.Свойство("СуммаБонусныхБалловДляПогашения", СуммаБонусныхБалловДляПогашения);

	//2024-08-16 sa неясно почему тут проверка на меньше или равно нулю, но сделаем чтобы если сумма
	//Если НЕ ТипЗнч(СуммаБонусныхБалловДляПогашения) = Тип("Число") ИЛИ СуммаБонусныхБалловДляПогашения <= 0 Тогда
	Если НЕ ТипЗнч(СуммаБонусныхБалловДляПогашения) = Тип("Число") ИЛИ СуммаБонусныхБалловДляПогашения <= 0 Тогда

			УточнитьСумму = Истина;

	Иначе	УточнитьСумму = Ложь;

	КонецЕсли;

	ТаблицаОплатаБонуснымиБаллами = ПолучитьТаблицуОплатаБонуснымиБалламиПустую();
	ДанныеНакоплений			  = ПолучитьТаблицуДляСписания(ТаблицаБонусныеБаллы, ТоварыДляОплаты, ПараметрыРаспределения, УчетнаяПолитика); 

	Если УточнитьСумму Тогда

		Если ДанныеНакоплений.Программы.Итог("Сумма") >= СуммаДокумента Тогда

		//		по каждой строке отнимаем сумму мин.ограничения, установленную в учётной политике.
				СуммаБонусныхБалловДляПогашения = Макс(
					0, СуммаДокумента - ТоварыДляОплаты.Количество() * УчетнаяПолитика.ЦенаПродажиМинимальная
				);

		Иначе	СуммаБонусныхБалловДляПогашения = ДанныеНакоплений.Программы.Итог("Сумма");

		КонецЕсли;

	КонецЕсли;
	
	//2024-08-16 sa введем безусловную проверку, чтобы  
	//1. СуммаБонусныхБалловДляПогашения не превышала сумму по документу.
	//2. СуммаБонусныхБалловДляПогашения не превышала накопленную сумму бонусных баллов.
	Если СуммаДокумента > 0 Тогда
		СуммаБонусныхБалловДляПогашения	= Мин(СуммаБонусныхБалловДляПогашения, СуммаДокумента);
		СуммаБонусныхБалловДляПогашения	= Мин(СуммаБонусныхБалловДляПогашения, ДанныеНакоплений.Программы.Итог("Сумма"));
	КонецЕсли;
	

	ПараметрыРаспределения.Вставить("СуммаБонусныхБалловДляПогашения", СуммаБонусныхБалловДляПогашения);	//	контрольный момент

	СуммаБонусныхБалловДляПогашения = РаспределитьСуммуПогашенияПоПрограммамИТоварам(ДанныеНакоплений, ПараметрыРаспределения, УточнитьСумму);

	Для каждого СтрокаТоварыДляОплаты Из ТоварыДляОплаты Цикл

		СтрокиТоварыСписание = ДанныеНакоплений.Товары.НайтиСтроки(
				Новый Структура(
					"Номенклатура, Упаковка, КлючСвязиБонусныхБаллов"
					, СтрокаТоварыДляОплаты.Номенклатура
					, СтрокаТоварыДляОплаты.Упаковка
					, СтрокаТоварыДляОплаты.КлючСвязиБонусныхБаллов
				)
		);

		Для каждого СтрокаТоварыСписание Из СтрокиТоварыСписание Цикл

			Если СтрокаТоварыСписание.СуммаСписания > 0 Тогда

				СтрокаТоварыДляОплаты.СуммаБонусныхБалловСписано = СтрокаТоварыДляОплаты.СуммаБонусныхБалловСписано + СтрокаТоварыСписание.СуммаСписания;

				СтрокаОплата = ТаблицаОплатаБонуснымиБаллами.Добавить();
				СтрокаОплата.КлючСвязиБонусныхБаллов = СтрокаТоварыДляОплаты.КлючСвязиБонусныхБаллов;
				СтрокаОплата.ПрограммаЛояльности	 = СтрокаТоварыСписание.ПрограммаЛояльности;
				СтрокаОплата.СуммаБонусныхБаллов	 = СтрокаТоварыСписание.СуммаСписания;
				СтрокаОплата.ТипБонусов				 = СтрокаТоварыСписание.ТипБонусов;
				СтрокаОплата.ПриоритетТипа			 = СтрокаТоварыСписание.ПриоритетТипа;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	ТоварыДляОплаты.Сортировать("КлючСвязиБонусныхБаллов");
	ТаблицаОплатаБонуснымиБаллами.Сортировать("КлючСвязиБонусныхБаллов, ПриоритетТипа Убыв");

	Возврат Новый Структура("ТоварыДляОплаты, ОплатаБонуснымиБаллами", ТоварыДляОплаты, ТаблицаОплатаБонуснымиБаллами);

КонецФункции

Функция ПолучитьТаблицуТоварыДляОплаты(ТаблицаТовары, ПараметрыРаспределения, УчетнаяПолитика, ИмяСуммы = "СуммаВсего")	Экспорт

	РеквизитыТоваров = Справочники.Номенклатура.РеквизитыСписка(ОбщегоНазначения.ВыгрузитьКоллекцию(ТаблицаТовары,, "Номенклатура"));

	Если ПараметрыРаспределения.Свойство("ТоварыДляОплаты") Тогда
		
		ТоварыДляОплаты = БонусныеБаллыСервер.ПроверитьСтруктуруТаблицыТоварыДляОплаты(ПараметрыРаспределения.ТоварыДляОплаты, РеквизитыТоваров);

	Иначе

		ТоварыДляОплаты = БонусныеБаллыСервер.ПроверитьСтруктуруТаблицыТоварыДляОплаты();

		Для каждого СтрокаТабличнойЧасти Из ТаблицаТовары Цикл

			СтрокаДляОплаты = ТоварыДляОплаты.Добавить();

			СтрокаДляОплаты.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
			СтрокаДляОплаты.Упаковка	 = СтрокаТабличнойЧасти.Упаковка;
			СтрокаДляОплаты.Количество	 = СтрокаТабличнойЧасти.КоличествоУпаковок;
			СтрокаДляОплаты.СуммаСНДС	 = СтрокаТабличнойЧасти[ИмяСуммы];
			СтрокаДляОплаты.КлючСвязи	 = СтрокаТабличнойЧасти.КлючСвязи;
			СтрокаДляОплаты.КлючСвязиБонусныхБаллов = СтрокаТабличнойЧасти.КлючСвязиБонусныхБаллов;

			Реквизиты = РеквизитыТоваров.Найти(СтрокаДляОплаты.Номенклатура, "Номенклатура");

			Если НЕ Реквизиты = Неопределено Тогда

				СтрокаДляОплаты.ТипНоменклатуры = Реквизиты.ТипНоменклатуры;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	ПроверитьРазрешенныеПозиции(ТоварыДляОплаты, УчетнаяПолитика);
	ТоварыДляОплаты.Сортировать("СуммаСНДС");

	Возврат ТоварыДляОплаты;

КонецФункции

Процедура ПроверитьРазрешенныеПозиции(ТоварыДляОплаты, УчетнаяПолитика)

	Если НЕ УчетнаяПолитика.РазрешитьОплатуБонуснымиБалламиПодарочныхСертификатов = Истина Тогда

		СтрокиУдалить = Новый Массив;

		Для каждого СтрокаДляОплаты Из ТоварыДляОплаты Цикл

			Если СтрокаДляОплаты.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда

				СтрокиУдалить.Добавить(СтрокаДляОплаты);

			КонецЕсли;

		КонецЦикла;

		Для каждого СтрокаДляОплаты Из СтрокиУдалить Цикл

			ТоварыДляОплаты.Удалить(СтрокаДляОплаты);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТаблицуДляСписания(ТаблицаБонусныеБаллы, ТоварыДляОплаты, ПараметрыРаспределения, УчетнаяПолитика)

	ДанныеНакоплений = Новый Структура("Программы, Товары", ТаблицаИтоговПрограммЛояльностиПустая());
//	ДанныеНакоплений.Программы	- контроль остатков по каждой программе. При списании значение суммы уменьшается на списанную сумму.
//	ДанныеНакоплений.Товары		- собственно, "плоская" таблица для списания

	Если ПараметрыРаспределения.Свойство("ТаблицаДляСписанияГотова") И ПараметрыРаспределения.ТаблицаДляСписанияГотова = Истина Тогда

	//	Такой режим вызывается из "Обработка.РМК.Форма.ФормаИспользованиеБонусов".
		ДанныеНакоплений.Товары = ОбщегоНазначения.ВыгрузитьКоллекцию(ТаблицаБонусныеБаллы);

		Для каждого СтрокаНакопления Из ДанныеНакоплений.Товары Цикл

			Если ДанныеНакоплений.Программы.Найти(СтрокаНакопления.ПрограммаЛояльности, "ПрограммаЛояльности") = Неопределено Тогда

				СтрокаПрограммы = ДанныеНакоплений.Программы.Добавить();
				СтрокаПрограммы.ПрограммаЛояльности = СтрокаНакопления.ПрограммаЛояльности;
				СтрокаПрограммы.ТипБонусов			= СтрокаНакопления.ТипБонусов;
				СтрокаПрограммы.ПриоритетТипа		= СтрокаНакопления.ПриоритетТипа;
				СтрокаПрограммы.МаксимальныйПроцентОплатыБонусами = СтрокаНакопления.МаксимальныйПроцентОплатыБонусами;
				СтрокаПрограммы.Сумма = СтрокаНакопления.СуммаПрограммы;

			КонецЕсли;

		КонецЦикла;

	Иначе

		ДанныеНакоплений.Товары = БонусныеБаллыСервер.ТаблицаНакопленийРазвернутаяПустая();

		Для каждого СтрокаБонусныеБаллы Из ТаблицаБонусныеБаллы Цикл

			СтрокаПрограммы = ДанныеНакоплений.Программы.Добавить();
			СтрокаПрограммы.ПрограммаЛояльности = СтрокаБонусныеБаллы.ПрограммаЛояльности;
			СтрокаПрограммы.ТипБонусов			= СтрокаБонусныеБаллы.ТипБонусов;
			СтрокаПрограммы.МаксимальныйПроцентОплатыБонусами = СтрокаБонусныеБаллы.МаксимальныйПроцентОплатыБонусами;
			СтрокаПрограммы.Сумма = СтрокаБонусныеБаллы.Сумма;

			Для каждого СтрокаДляОплаты Из ТоварыДляОплаты Цикл

				Если СтрокаБонусныеБаллы.ТоварыПрограмм.Количество() = 0 Тогда

						ДоступноСписание = Истина;

				Иначе	ДоступноСписание = НЕ (СтрокаБонусныеБаллы.ТоварыПрограмм.Найти(СтрокаДляОплаты.Номенклатура, "Номенклатура") = Неопределено);

				КонецЕсли;

				Если ДоступноСписание Тогда

					СтрокаНакопления = ДанныеНакоплений.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНакопления, СтрокаБонусныеБаллы);

					СтрокаНакопления.Номенклатура   = СтрокаДляОплаты.Номенклатура;
					СтрокаНакопления.КлючСвязиБонусныхБаллов = СтрокаДляОплаты.КлючСвязиБонусныхБаллов;
					СтрокаНакопления.Упаковка		= СтрокаДляОплаты.Упаковка;
					СтрокаНакопления.СуммаСНДС      = СтрокаДляОплаты.СуммаСНДС;	//	сумма продажи
					СтрокаНакопления.ПриоритетТипа  = БонусныеБаллыПовтИсп.ПриоритетТипаБонусов(СтрокаНакопления.ТипБонусов);
					СтрокаНакопления.СуммаПрограммы = СтрокаБонусныеБаллы.Сумма;
					СтрокаНакопления.СуммаДоступная = Мин(
						СтрокаНакопления.СуммаСНДС * СтрокаБонусныеБаллы.МаксимальныйПроцентОплатыБонусами / 100,
						СтрокаНакопления.СуммаПрограммы);
					СтрокаНакопления.СуммаДоступная = ?(СтрокаНакопления.СуммаДоступная = СтрокаНакопления.СуммаСНДС
						, СтрокаНакопления.СуммаДоступная - Макс(0.10, УчетнаяПолитика.ЦенаПродажиМинимальная)
						, СтрокаНакопления.СуммаДоступная
					);

				КонецЕсли;

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

	ДанныеНакоплений.Товары.Сортировать("Номенклатура, Приоритет Убыв, ПриоритетТипа Убыв");

//	Подготовим колонки в таблицах для последующего распределения суммы погашения.
	Для каждого КлючЗначение Из ДанныеНакоплений Цикл

		Если КлючЗначение.Значение.Колонки.Найти("СуммаСписания") = Неопределено Тогда

				КлючЗначение.Значение.Колонки.Добавить("СуммаСписания", Новый ОписаниеТипов("Число"));

		Иначе	КлючЗначение.Значение.ЗаполнитьЗначения(0, "СуммаСписания");

		КонецЕсли;

	КонецЦикла;

	Возврат ДанныеНакоплений;

КонецФункции

//	LNK 26.10.2021 05:55:01
Функция РаспределитьСуммуПогашенияПоПрограммамИТоварам(ДанныеНакоплений, ПараметрыРаспределения, УточнитьСумму)

//	1.	Делим сумму к погашению между программами в соответствии с приоритетами.
//		Пропорционально размазываем только внутри одного приоритета.
//		На распределение к нижнему приоритету переходит только остаток.
//	---------------------------------------------------------------------------------------

	ТаблицаПриоритетов = ДанныеНакоплений.Программы.Скопировать(, "ПриоритетТипа, Сумма");
	ТаблицаПриоритетов.Свернуть("ПриоритетТипа", "Сумма");
	ТаблицаПриоритетов.Сортировать("ПриоритетТипа Убыв");

	СуммаДляПогашения = ПараметрыРаспределения.СуммаБонусныхБалловДляПогашения;

	Для каждого СтрокаПриоритета Из ТаблицаПриоритетов Цикл

		Если СуммаДляПогашения = 0 Тогда

			Прервать;

		КонецЕсли;

		СтрокиПрограммы		= ДанныеНакоплений.Программы.НайтиСтроки(Новый Структура("ПриоритетТипа", СтрокаПриоритета.ПриоритетТипа));
		СуммаРаспределения	= СуммаДляПогашения;	//	фиксируем остаток суммы для распределения

		Для каждого СтрокаПрограммы Из СтрокиПрограммы Цикл

			Если СтрокаПриоритета.Сумма > 0 Тогда

				Коэффициент = СтрокаПрограммы.Сумма / СтрокаПриоритета.Сумма;
				СтрокаПрограммы.СуммаСписания = Мин(СтрокаПрограммы.Сумма, Окр(СуммаРаспределения * Коэффициент, 2));

				СуммаДляПогашения = Макс(0, СуммаДляПогашения - СтрокаПрограммы.СуммаСписания);

				Если СуммаДляПогашения = 0 Тогда

					Прервать;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

//	2.	Распределяем "разделённую" выше сумму погашения по товарным позициям.
//	---------------------------------------------------------------------------------------
	Для каждого СтрокаПрограммы Из ДанныеНакоплений.Программы Цикл

		СтрокиТовары = ДанныеНакоплений.Товары.НайтиСтроки(Новый Структура("ПрограммаЛояльности", СтрокаПрограммы.ПрограммаЛояльности));

	//	2.1.	Определим базу для вычисления коэффициента пропорциональности по СуммаСНДС
		СуммаИтогСНДС = 0;

		Для каждого СтрокаТовары Из СтрокиТовары Цикл

			Если СтрокаТовары.СуммаДоступная > 0 Тогда

				СуммаИтогСНДС = СуммаИтогСНДС + СтрокаТовары.СуммаСНДС;

			КонецЕсли;

		КонецЦикла;

		СуммаСписанияПрограммы = 0;	//	очередное уточнение
	//	2.2.	Выполним пропорциональное распределение суммы погашения по товарам, имеющим право
	//			на эту программу лояльности.
		Для каждого СтрокаТовары Из СтрокиТовары Цикл

			Если СуммаИтогСНДС > 0 И СтрокаТовары.СуммаДоступная > 0 Тогда	//	предохранитель

				СтрокаТовары.СуммаСписания	= Окр(СтрокаПрограммы.СуммаСписания * СтрокаТовары.СуммаСНДС / СуммаИтогСНДС, 2);
			//	Ограничим по значению процента списания с программы.
				СтрокаТовары.СуммаСписания	= Мин(СтрокаТовары.СуммаДоступная, СтрокаТовары.СуммаСписания);

				СуммаСписанияПрограммы = СуммаСписанияПрограммы + СтрокаТовары.СуммаСписания;

			Иначе

				СтрокаТовары.СуммаСписания = 0;

			КонецЕсли;

		КонецЦикла;

		СтрокаПрограммы.СуммаСписания = СуммаСписанияПрограммы;

	КонецЦикла;

//	---------------------------------------------------------------------------------------

	Если НЕ УточнитьСумму Тогда

	//	Сумма к погашению была указана пользователем - превышать её не будем.
	//	Если получилось чуть меньше (тут речь идёт о копейках, результат округления), тоже компенсируем
	//	а если больше - распределим по строкам.
		СуммаРазницы = ДанныеНакоплений.Товары.Итог("СуммаСписания") - ПараметрыРаспределения.СуммаБонусныхБалловДляПогашения;

		Если НЕ СуммаРазницы = 0 Тогда	//	LNK 04.12.2023 10:45:27

		//	Используем тупо строку с максимальной суммой для компенсации разницы.
			СтрокаТоварыМаксимум = Неопределено;

			Для каждого СтрокаТовары Из ДанныеНакоплений.Товары Цикл

				Если СтрокаТоварыМаксимум = Неопределено
				ИЛИ  СтрокаТоварыМаксимум.СуммаСписания < СтрокаТовары.СуммаСписания	Тогда

					СтрокаТоварыМаксимум = СтрокаТовары;

				КонецЕсли;

			КонецЦикла;

			Если НЕ СтрокаТоварыМаксимум = Неопределено Тогда

			//	LNK 04.12.2023 10:49:21
			//	В принципе, на текущий момент программный код для минуса
			//	и плюса почти одинаковый - всё компенсируется знаком "СуммаРазницы".
			//	Но всё равно разнесём в разные ветки и знак приведём к плюсу.
			//	Мало ли, что нам понадобится позже.

				Если СуммаРазницы > 0 Тогда	//	В "Товары" больше, чем нужно

					Если СтрокаТоварыМаксимум.СуммаСписания > СуммаРазницы Тогда

						СтрокаТоварыМаксимум.СуммаСписания = СтрокаТоварыМаксимум.СуммаСписания - СуммаРазницы;

						СтрокаПрограммы = ДанныеНакоплений.Программы.Найти(СтрокаТоварыМаксимум.ПрограммаЛояльности, "ПрограммаЛояльности");
						СтрокаПрограммы.СуммаСписания = СтрокаПрограммы.СуммаСписания - СуммаРазницы;

					КонецЕсли;

				Иначе						//	В "Товары" меньше, чем нужно

					СуммаРазницы = -СуммаРазницы;	//	приводим к плюсу

					Если СтрокаТоварыМаксимум.СуммаСНДС > (СтрокаТоварыМаксимум.СуммаСписания + СуммаРазницы) Тогда

						СтрокаТоварыМаксимум.СуммаСписания = СтрокаТоварыМаксимум.СуммаСписания + СуммаРазницы;

						СтрокаПрограммы = ДанныеНакоплений.Программы.Найти(СтрокаТоварыМаксимум.ПрограммаЛояльности, "ПрограммаЛояльности");
						СтрокаПрограммы.СуммаСписания = СтрокаПрограммы.СуммаСписания + СуммаРазницы;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	Иначе

	//	Ранее сумма была назначена "от фонаря" - по сумме документа.
	//	Здесь уточняем по доступным суммам списания.
		ПараметрыРаспределения.СуммаБонусныхБалловДляПогашения = ДанныеНакоплений.Программы.Итог("СуммаСписания");

	КонецЕсли;

	Возврат ПараметрыРаспределения.СуммаБонусныхБалловДляПогашения;

КонецФункции

Функция ПолучитьТаблицуОплатаБонуснымиБалламиПустую()

	ТаблицаЗначений = Новый ТаблицаЗначений;

	ТаблицаЗначений.Колонки.Добавить("КлючСвязиБонусныхБаллов"	, Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("ПрограммаЛояльности"		, Новый ОписаниеТипов("СправочникСсылка.ПрограммыЛояльности"));
	ТаблицаЗначений.Колонки.Добавить("СуммаБонусныхБаллов"		, Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("ТипБонусов"				, Новый ОписаниеТипов("ПеречислениеСсылка.ТипыБонусов"));
	ТаблицаЗначений.Колонки.Добавить("ПриоритетТипа"			, Новый ОписаниеТипов("Число"));

	Возврат ТаблицаЗначений;

КонецФункции

Функция ТаблицаИтоговПрограммЛояльностиПустая()

	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("ПрограммаЛояльности"	, Новый ОписаниеТипов("СправочникСсылка.ПрограммыЛояльности"));
	ТаблицаЗначений.Колонки.Добавить("ТипБонусов"			, Новый ОписаниеТипов("ПеречислениеСсылка.ТипыБонусов"));
	ТаблицаЗначений.Колонки.Добавить("ПриоритетТипа"		, Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("МаксимальныйПроцентОплатыБонусами", Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));

	ТаблицаЗначений.Индексы.Добавить("ПрограммаЛояльности");

	Возврат ТаблицаЗначений;

КонецФункции

#КонецОбласти

#Область ФункционалПримененияОплатыБонуснымиБалламиКОбъекту

Процедура ПрименитьРезультатыРаспределенияОплатыБонуснымиБалламиКОбъекту(Объект, ИмяТовары, ИмяОплата, ДанныеРаспределения)	Экспорт

	ТабличнаяЧастьТовары = Объект[ИмяТовары];
	ТабличнаяЧастьОплата = Объект[ИмяОплата];
	#Если _ Тогда
	ТабличнаяЧастьТовары = Документы.ЧекККМ.СоздатьДокумент().Товары;
	ТабличнаяЧастьОплата = Документы.ЧекККМ.СоздатьДокумент().ОплатаБонуснымиБаллами;
	#КонецЕсли

	Для каждого СтрокаТаблицы Из ДанныеРаспределения.ТоварыДляОплаты Цикл

		СтрокиТоварыПоКлючу = ТабличнаяЧастьТовары.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТаблицы.КлючСвязи));

		Если НЕ СтрокиТоварыПоКлючу.Количество() = 0 Тогда

			СтрокаТаблицыТовары = СтрокиТоварыПоКлючу[0];

			СтрокаТаблицыТовары.КлючСвязиБонусныхБаллов		= СтрокаТаблицы.КлючСвязиБонусныхБаллов;
			СтрокаТаблицыТовары.СуммаБонусныхБалловСписано	= СтрокаТаблицыТовары.СуммаБонусныхБалловСписано + СтрокаТаблицы.СуммаБонусныхБалловСписано;

			ОбработкаТабличнойЧастиТоварыКлиентСервер.РассчитатьРезультатСкидкиВСтрокеТЧ(СтрокаТаблицыТовары, Объект.ЦенаВключаетНДС, Истина);

		КонецЕсли;

	КонецЦикла;

	Для каждого СтрокаТаблицы Из ДанныеРаспределения.ОплатаБонуснымиБаллами Цикл

		СтрокаТаблицыОплата = ТабличнаяЧастьОплата.Добавить();
		СтрокаТаблицыОплата.КлючСвязиБонусныхБаллов	= СтрокаТаблицы.КлючСвязиБонусныхБаллов;
		СтрокаТаблицыОплата.ПрограммаЛояльности		= СтрокаТаблицы.ПрограммаЛояльности;
		СтрокаТаблицыОплата.СуммаБонусныхБаллов		= СтрокаТаблицы.СуммаБонусныхБаллов;
		СтрокаТаблицыОплата.ТипБонусов				= СтрокаТаблицы.ТипБонусов;

	КонецЦикла;

КонецПроцедуры

//	LNK 19.01.2022 14:20:02
Процедура ПересчитатьНачислениеБонусныхБаллов(Объект)	Экспорт

//	Вызывается только из модуля "InfoNode.GetDistributedBonus" и обработки "РМК.Форма.ПрименитьКОбъектуОплатуБонуснымиБаллами"

	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту"					, Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет"		, Ложь);
	СтруктураПараметры.Вставить("ТолькоНачислениеБонусныхБаллов"	, Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки"	, Ложь);
	СтруктураПараметры.Вставить("УправляемыеСкидки");
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления"	, Ложь);
	СтруктураПараметры.Вставить("ПорядковыйНомерПродажи"			, 0);
//	СтруктураПараметры.Вставить("ПеренестиСкидкиПодаркиВТовары");
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров"		, Ложь);
	СтруктураПараметры.Вставить("РабочееМесто"						, "");
	СтруктураПараметры.Вставить("ДатаРасчета"						, Объект.Дата);

	ДанныеРасчетаСкидок = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);

КонецПроцедуры

#КонецОбласти

#Область ПрочийФункционал

Функция ПродажаПоКредитнойПрограмме(УслугаБанкаДанные)	Экспорт

	ЗначениеВозврата = Ложь;

	Если ТипЗнч(УслугаБанкаДанные) = Тип("Структура") Тогда

		ЗначениеВозврата =	УслугаБанкаДанные.ТипУслуги = ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.Кредит")
						ИЛИ УслугаБанкаДанные.ТипУслуги = ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.ОплатаЧастями")
		;

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции

Функция ПолучитьПрограммыОграниченныеПоКредитнойОплате(СписокПрограммЛояльности)	Экспорт

	СписокПрограмм = Новый Массив;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаПрограмм.Ссылка КАК ПрограммаЛояльности,
	|	ТаблицаСкидок.Ссылка КАК СкидкаНаценка
	|ИЗ
	|	Справочник.ПрограммыЛояльности КАК ТаблицаПрограмм
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки КАК ТаблицаСкидок
	|		ПО ТаблицаПрограмм.Ссылка = ТаблицаСкидок.ПрограммаЛояльности
	|ГДЕ
	|	ТаблицаПрограмм.Ссылка В(&СписокПрограммЛояльности)
	|	И ТаблицаПрограмм.СпособПримененияСкидки = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы)
	|	И НЕ ТаблицаПрограмм.НачислятьБаллыПоКредитнойПрограмме
	|ИТОГИ
	|	КОЛИЧЕСТВО(СкидкаНаценка)
	|ПО
	|	ПрограммаЛояльности"
	);
	Запрос.УстановитьПараметр("СписокПрограммЛояльности", СписокПрограммЛояльности);
	
	ПрограммыВыборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ПрограммыВыборка.Следующий() Цикл

		ДанныеПрограммы = Новый Структура(
			"ПрограммаЛояльности, СкидкиНаценки"
			, ПрограммыВыборка.ПрограммаЛояльности
			, Новый Массив
		);

		СкидкиВыборка = ПрограммыВыборка.Выбрать();

		Пока СкидкиВыборка.Следующий() Цикл

			ДанныеПрограммы.СкидкиНаценки.Добавить(СкидкиВыборка.СкидкаНаценка);

		КонецЦикла;

		СписокПрограмм.Добавить(ДанныеПрограммы);

	КонецЦикла;

	Возврат СписокПрограмм;

КонецФункции

Функция СкидкиНаценкиПоПрограммеЛояльности(ПрограммаЛояльности)	Экспорт	//	LNK 31.07.2021 10:28:35

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСкидки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПрограммыЛояльности КАК ТаблицаПрограммы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки КАК ТаблицаСкидки
	|		ПО ТаблицаПрограммы.Ссылка = ТаблицаСкидки.ПрограммаЛояльности
	|ГДЕ
	|	ТаблицаПрограммы.Ссылка = &ПрограммаЛояльности"
	);
	Запрос.УстановитьПараметр("ПрограммаЛояльности", ПрограммаЛояльности);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

Функция ДокументФормируетДвижения(Имя, УчетнаяПолитика, ВидОперацииЧекККМ, СтатусЧекаККМ, ЗаказПокупателя, Режим)	Экспорт

	ФормируетДвижения = Истина;

	Если Имя = "ЧекККМ" Тогда

		ФормируетДвижения = ?(УчетнаяПолитика.ИспользоватьЧекиКакРегистраторыНачисленияБонусныхБаллов
								, СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый ИЛИ СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный
								, СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый
							);
		ФормируетДвижения = ФормируетДвижения
		//	И ?(ЗначениеЗаполнено(ЗаказПокупателя) И Режим = "Начисление"	//	LNK 16.06.2022 09:50:07	И НЕ ВидОперацииЧекККМ = Перечисления.ВидыОперацийЧекККМ.Возврат
			И ?(ЗначениеЗаполнено(ЗаказПокупателя) И Режим = "Начисление" И НЕ ВидОперацииЧекККМ = Перечисления.ВидыОперацийЧекККМ.Возврат	//	LNK 15.03.2024 05:46:02
				, Ложь
				, Истина
			);

	КонецЕсли;

	Если УчетнаяПолитика.ДвиженияБонусныхБалловТолькоВЦентре И НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		ФормируетДвижения = Ложь;

	КонецЕсли;

	Возврат ФормируетДвижения;

КонецФункции

#КонецОбласти

#Область ПоддержкаКлиентскогоИзмененияКоличестваВДокументахВозврата

Функция ПолучитьДанныеДокументаПродажи(ДокументПродажи)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ДанныеПродажи = Новый Структура(
		"КлючСкидка, КлючБаллы, ПрограммыСкидок, СкидкиПрограмм"
		, Новый Соответствие
		, Новый Соответствие
		, Новый Соответствие
		, Новый Соответствие
	);

	Запрос = Новый Запрос(СтрЗаменить(
	"ВЫБРАТЬ
	|	ТаблицаВедущая.КлючСвязи КАК КлючСвязи,
	|	ТаблицаВедущая.Номенклатура КАК Номенклатура,
	|	ТаблицаВедущая.Количество КАК Количество,
	|	ТаблицаВедущая.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаСкидки.СпособПримененияСкидки КАК СпособПримененияСкидки,
	|	ТаблицаСкидки.СкидкаНаценка КАК СкидкаНаценка,
	|	ТаблицаСкидки.Сумма КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТаблицаВедущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.СкидкиНаценки КАК ТаблицаСкидки
	|		ПО ТаблицаВедущая.Ссылка = ТаблицаСкидки.Ссылка
	|			И ТаблицаВедущая.КлючСвязи = ТаблицаСкидки.КлючСвязи
	|ГДЕ
	|	ТаблицаВедущая.Ссылка = &ДокументПродажи
	|ИТОГИ
	|	МАКСИМУМ(Номенклатура),
	|	МАКСИМУМ(Количество),
	|	МАКСИМУМ(КоличествоУпаковок)
	|ПО
	|	КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСписание.КлючСвязиБонусныхБаллов КАК КлючСвязиБонусныхБаллов,
	|	ТаблицаСписание.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТаблицаСписание.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов
	|ИЗ
	|	Документ.ЧекККМ.ОплатаБонуснымиБаллами КАК ТаблицаСписание
	|ГДЕ
	|	ТаблицаСписание.Ссылка = &ДокументПродажи
	|ИТОГИ ПО
	|	КлючСвязиБонусныхБаллов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСкидки.СкидкаНаценка.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТаблицаСкидки.СкидкаНаценка КАК СкидкаНаценка
	|ИЗ
	|	Документ.ЧекККМ.СкидкиНаценки КАК ТаблицаСкидки
	|ГДЕ
	|	ТаблицаСкидки.Ссылка = &ДокументПродажи
	|ИТОГИ ПО
	|	ПрограммаЛояльности"
	, "Документ.ЧекККМ.", "Документ." + ДокументПродажи.Метаданные().Имя + ".")
	);
	Запрос.УстановитьПараметр("ДокументПродажи", ДокументПродажи);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();

	Выборка = РезультатыЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл

		ТаблицаСкидки = Новый Массив;
		ВыборкаДетали = Выборка.Выбрать();

		Пока ВыборкаДетали.Следующий() Цикл

			ТаблицаСкидки.Добавить(Новый Структура(
					"СпособПримененияСкидки, СкидкаНаценка, Сумма"
					, ВыборкаДетали.СпособПримененияСкидки, ВыборкаДетали.СкидкаНаценка, ВыборкаДетали.Сумма
				)
			);

		КонецЦикла;
		
		ДанныеПродажи.КлючСкидка.Вставить(Выборка.КлючСвязи
			, Новый Структура(
				"КлючСвязи, Таблица, Номенклатура, Количество, КоличествоУпаковок"
				, Выборка.КлючСвязи
				, ТаблицаСкидки
				, Выборка.Номенклатура
				, Выборка.Количество
				, Выборка.КоличествоУпаковок
			)
		);

	КонецЦикла;

	Выборка = РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока Выборка.Следующий() Цикл

		ТаблицаБонусы = Новый Массив;
		ВыборкаДетали = Выборка.Выбрать();

		Пока ВыборкаДетали.Следующий() Цикл

			ТаблицаБонусы.Добавить(Новый Структура(
					"ПрограммаЛояльности, СуммаБонусныхБаллов"
					, ВыборкаДетали.ПрограммаЛояльности, ВыборкаДетали.СуммаБонусныхБаллов
				)
			);

		КонецЦикла;
		
		ДанныеПродажи.КлючБаллы.Вставить(Выборка.КлючСвязиБонусныхБаллов
			, Новый Структура(
				"КлючСвязиБонусныхБаллов, Таблица"
				, Выборка.КлючСвязиБонусныхБаллов
				, ТаблицаБонусы
			)
		);

	КонецЦикла;

	Выборка = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока Выборка.Следующий() Цикл

		СписокСкидок = Новый Массив;

		ВыборкаДетали = Выборка.Выбрать();

		Пока ВыборкаДетали.Следующий() Цикл

			СписокСкидок.Добавить(ВыборкаДетали.СкидкаНаценка);
			ДанныеПродажи.ПрограммыСкидок.Вставить(ВыборкаДетали.СкидкаНаценка, ВыборкаДетали.ПрограммаЛояльности);	//	на текущий момент не востребованно

		КонецЦикла;

		ДанныеПродажи.СкидкиПрограмм.Вставить(Выборка.ПрограммаЛояльности, СписокСкидок);

	КонецЦикла;

	Возврат ДанныеПродажи

КонецФункции

#КонецОбласти












