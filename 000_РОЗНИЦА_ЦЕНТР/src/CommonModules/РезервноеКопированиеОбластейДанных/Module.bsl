
////////////////////////////////////////////////////////////////////////////////
// РезервноеКопированиеОбластейДанных.
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Обмен сообщениями

// Возвращает состояние использования резервного копирования областей данных.
//
// Возвращаемое значение: Булево.
//
Функция РезервноеКопированиеИспользуется() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ПоддержкаРезервногоКопирования.Получить();
	
КонецФункции

// Сообщить об успешной архивации текущей области.
//
Функция ОтправитьСообщениеРезервнаяКопияОбластиСоздана(Знач ПараметрыСообщения) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
			СообщенияКонтрольРезервногоКопированияИнтерфейс.СообщениеРезервнаяКопияОбластиСоздана());
		
		Сообщение.Body.Zone = ПараметрыСообщения.ОбластьДанных;
		Сообщение.Body.BackupId = ПараметрыСообщения.ИДКопии;
		Сообщение.Body.FileId = ПараметрыСообщения.ИДФайла;
		Сообщение.Body.Date = ТекущаяУниверсальнаяДата();
		
		СообщенияВМоделиСервиса.ОтправитьСообщение(
			Сообщение,
			РаботаВМоделиСервисаПовтИсп.КонечнаяТочкаМенеджераСервиса());
			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
			
КонецФункции

// Планировать архивацию области в прикладной базе.
//
Функция ОтправитьСообщениеОшибкаАрхивацииОбласти(Знач ПараметрыСообщения) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
			СообщенияКонтрольРезервногоКопированияИнтерфейс.СообщениеОшибкаАрхивацииОбласти());
		
		Сообщение.Body.Zone = ПараметрыСообщения.ОбластьДанных;
		Сообщение.Body.BackupId = ПараметрыСообщения.ИДКопии;
		
		СообщенияВМоделиСервиса.ОтправитьСообщение(
			Сообщение,
			РаботаВМоделиСервисаПовтИсп.КонечнаяТочкаМенеджераСервиса());
			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
			
КонецФункции

// Планировать архивацию области в прикладной базе.
//
Функция ОтправитьСообщениеАрхивацияОбластиПропущена(Знач ПараметрыСообщения) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
			СообщенияКонтрольРезервногоКопированияИнтерфейс.СообщениеАрхивацияОбластиПропущена());
		
		Сообщение.Body.Zone = ПараметрыСообщения.ОбластьДанных;
		Сообщение.Body.BackupId = ПараметрыСообщения.ИДКопии;
		
		СообщенияВМоделиСервиса.ОтправитьСообщение(
			Сообщение,
			РаботаВМоделиСервисаПовтИсп.КонечнаяТочкаМенеджераСервиса());
			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
			
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики[
		"СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
			"РезервноеКопированиеОбластейДанных");
	
	СерверныеОбработчики[
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов"].Добавить(
			"РезервноеКопированиеОбластейДанных");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий подсистем БСП

// Заполняет соответствие имен методов их псевдонимам для вызова из очереди заданий
//
// Параметры:
//  СоответствиеИменПсевдонимам - Соответствие
//   Ключ - Псевдоним метода, например ОчиститьОбластьДанных
//   Значение - Имя метода для вызова, например РаботаВМоделиСервиса.ОчиститьОбластьДанных
//    В качестве значения можно указать Неопределено, в этом случае считается что имя 
//    совпадает с псевдонимом
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить("РезервноеКопированиеОбластейДанных.ВыгрузитьОбластьВХранилищеМС");
	
КонецПроцедуры

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию подсистем,
// используя в качестве ключей названия подсистем.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура: 
//	- Ключи = Названия подсистем. 
//	- Значения = Массивы названий поддерживаемых версий.
//
// Пример реализации:
//
//	// СервисПередачиФайлов
//	МассивВерсий = Новый Массив;
//	МассивВерсий.Добавить("1.0.1.1");	
//	МассивВерсий.Добавить("1.0.2.1"); 
//	СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//	// Конец СервисПередачиФайлов
//
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(Знач СтруктураПоддерживаемыхВерсий) Экспорт
	
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("1.0.1.1");
	МассивВерсий.Добавить("1.0.1.2");
	СтруктураПоддерживаемыхВерсий.Вставить("РезервноеКопированиеОбластейДанных", МассивВерсий);
	
КонецПроцедуры

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.1.3.9";
	//Обработчик.Процедура = "РезервноеКопированиеОбластейДанных.ПеренестиСостояниеПланированияРезервногоКопированияВоВспомогательныеДанные";
	//Обработчик.ОбщиеДанные = Истина;
	
КонецПроцедуры

// Обработчик, вызываемый при определении объектов метаданных, не переносящихся между моделями при выгрузке / загрузке данных.
//
// Параметры
//  Объекты - Массив(ОбъектМетаданных).
//
Процедура ПриОпределенииОбъектовМетаданныхИсключаемыхИзВыгрузкиЗагрузки(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Константы.ВыполнитьРезервноеКопированиеОбластиДанных);
	
КонецПроцедуры

// Формирует список параметров ИБ.
//
// Параметры:
// ТаблицаПараметров - ТаблицаЗначений - таблица описания параметров.
// Описание состав колонок - см. РаботаВМоделиСервиса.ПолучитьТаблицуПараметровИБ()
//
Процедура ПриЗаполненииТаблицыПараметровИБ(ТаблицаПараметров) Экспорт
	
	
КонецПроцедуры

// Активность пользователей в области данных

// Устанавливает признак активности пользователя в текущей области.
// Признаком является значение совместно разделенной константы ВыполнитьРезервноеКопированиеОбластиДанных.
//
Процедура УстановитьФлагАктивностиПользователяВОбласти() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных()
		И ТекущийРежимЗапуска() <> Неопределено
		И ПолучитьФункциональнуюОпцию("ПоддержкаРезервногоКопирования") Тогда
		
		УстановитьФлагАктивностиВОбласти();
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает либо снимает признак активности пользователя в текущей области.
// Признаком является значение совместно разделенной константы ВыполнитьРезервноеКопированиеОбластиДанных.
// Снятие признака - удаление записи.
//
// Параметры:
// ОбластьДанных - Число; Неопределено - Значение разделителя. Неопределено означает значение разделителя текущей области данных.
// Состояние - Булево - Истина, если признак надо установить; Ложь, если снять.
//
Процедура УстановитьФлагАктивностиВОбласти(Знач ОбластьДанных = Неопределено, Знач Состояние = Истина)
	
	Если ОбластьДанных = Неопределено Тогда
		Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			ОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
		Иначе
			ВызватьИсключение НСтр("ru = 'При вызове процедуры УстановитьФлагАктивностиВОбласти из неразделенного сеанса параметр ОбластьДанных является обязательным!'");
		КонецЕсли;
	Иначе
		Если НЕ ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()
				И ОбластьДанных <> ОбщегоНазначения.ЗначениеРазделителяСеанса() Тогда
			
			ВызватьИсключение(НСтр("ru = 'Запрещено работать с данными области кроме текущей'"));
			
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФлагАктивности = Константы.ВыполнитьРезервноеКопированиеОбластиДанных.СоздатьМенеджерЗначения();
	ФлагАктивности.ОбластьДанныхВспомогательныеДанные = ОбластьДанных;
	ФлагАктивности.Значение = Состояние;
	ОбщегоНазначения.ЗаписатьВспомогательныеДанные(ФлагАктивности);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Выгрузка областей данных.

// Планирует создание резервной копии области данных.
// 
// Параметры:
//  ПараметрыВыгрузки - Структура, состав ключей см. СоздатьПустыеПараметрыВыгрузки()
//   
Процедура ЗапланироватьАрхивациюВОчереди(Знач ПараметрыВыгрузки) Экспорт
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		ВызватьИсключение(НСтр("ru = 'Не достаточно прав для выполнения операции'"));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(ПараметрыВыгрузки);
	ПараметрыМетода.Добавить(Неопределено);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяМетода", РезервноеКопированиеОбластейДанныхПовтИсп.ИмяМетодаФоновогоРезервногоКопирования());
	ПараметрыЗадания.Вставить("Ключ", "" + ПараметрыВыгрузки.ИДКопии);
	ПараметрыЗадания.Вставить("ОбластьДанных", ПараметрыВыгрузки.ОбластьДанных);
	
	// Поиск активных заданий с тем же ключом.
	АктивныеЗадания = ОчередьЗаданий.ПолучитьЗадания(ПараметрыЗадания);
	
	Если АктивныеЗадания.Количество() = 0 Тогда
		
		// Планируем выполнение нового
		
		ПараметрыЗадания.Вставить("Параметры", ПараметрыМетода);
		ПараметрыЗадания.Вставить("ЗапланированныйМоментЗапуска", ПараметрыВыгрузки.МоментЗапуска);
		
		ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		Если АктивныеЗадания[0].СостояниеЗадания <> Перечисления.СостоянияЗаданий.Запланировано Тогда
			// Задание уже выполнилось или выполняется
			Возврат;
		КонецЕсли;
		
		ПараметрыЗадания.Удалить("ОбластьДанных");
		
		ПараметрыЗадания.Вставить("Использование", Истина);
		ПараметрыЗадания.Вставить("Параметры", ПараметрыМетода);
		ПараметрыЗадания.Вставить("ЗапланированныйМоментЗапуска", ПараметрыВыгрузки.МоментЗапуска);
		
		ОчередьЗаданий.ИзменитьЗадание(АктивныеЗадания[0].Идентификатор, ПараметрыЗадания);
	КонецЕсли;
	
КонецПроцедуры

// Создает файл выгрузки заданной области и помещает его в хранилище Менеджера сервиса.
//
// Параметры:
// ПараметрыВыгрузки - Структура:
// 	- ОбластьДанных - Число.
//	- ИДКопии - УникальныйИдентификатор; Неопределено.
//  - МоментЗапуска - Дата - момент запуска архивирования области.
//	- Принудительно - Булево - Флаг из МС: необходимость создавать копию вне зависимости от активности пользователей.
//	- ПоТребованию - Булево - флаг интерактивного запуска архивирования. Если из МС - всегда Ложь.
//	- ИДФайла - УникальныйИдентификатор - ИД файла выгрузки в хранилище МС.
//	- НомерПопытки - Число - Счетчик попыток. Начальное значение: 1.
//
Процедура ВыгрузитьОбластьВХранилищеМС(Знач ПараметрыВыгрузки, АдресХранилища = Неопределено) Экспорт
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		ВызватьИсключение(НСтр("ru = 'Нарушение прав доступа'"));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ТребуетсяВыгрузка(ПараметрыВыгрузки) Тогда
		ОтправитьСообщениеАрхивацияОбластиПропущена(ПараметрыВыгрузки);
		Возврат;
	КонецЕсли;
	
	ИмяАрхива = Неопределено;
	
	НачатьТранзакцию();
	Попытка
		РаботаВМоделиСервиса.ЗаблокироватьТекущуюОбластьДанных(, Истина);
		ИмяАрхива = ВыгрузкаЗагрузкаДанных.ВыгрузитьТекущуюОбластьВАрхив();
		ИДФайла = РаботаВМоделиСервиса.ПоместитьФайлВХранилищеМенеджераСервиса(Новый Файл(ИмяАрхива));
		Попытка
			УдалитьФайлы(ИмяАрхива);
		Исключение
			// При невозможности удаления файла выполнение не должно прерываться
		КонецПопытки;
		ПараметрыВыгрузки.Вставить("ИДФайла", ИДФайла);
		ОтправитьСообщениеРезервнаяКопияОбластиСоздана(ПараметрыВыгрузки);
		Если ЗначениеЗаполнено(АдресХранилища) Тогда
			ПоместитьВоВременноеХранилище(ИДФайла, АдресХранилища);
		КонецЕсли;
		УстановитьФлагАктивностиВОбласти(ПараметрыВыгрузки.ОбластьДанных, Ложь);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание резервной копии области данных'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Попытка
			Если ИмяАрхива <> Неопределено Тогда
				УдалитьФайлы(ИмяАрхива);
			КонецЕсли;
		Исключение
			// При невозможности удаления файла выполнение не должно прерываться
		КонецПопытки;
		Если ПараметрыВыгрузки.ПоТребованию Тогда
			ВызватьИсключение;
		Иначе	
			Если ПараметрыВыгрузки.НомерПопытки > 3 Тогда
				ОтправитьСообщениеОшибкаАрхивацииОбласти(ПараметрыВыгрузки);
			Иначе	
				// Перепланировать: текущее время области + 10 минут.
				ПараметрыВыгрузки.НомерПопытки = ПараметрыВыгрузки.НомерПопытки + 1;
				МоментПовторногоЗапуска = ТекущаяДатаОбласти(ПараметрыВыгрузки.ОбластьДанных); // Сейчас в области.
				МоментПовторногоЗапуска = МоментПовторногоЗапуска + 10 * 60; // На 10 минут позже.
				ПараметрыВыгрузки.Вставить("МоментЗапуска", МоментПовторногоЗапуска);
				ЗапланироватьАрхивациюВОчереди(ПараметрыВыгрузки);
			КонецЕсли;
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Функция ТекущаяДатаОбласти(Знач ОбластьДанных)
	
	ЧасовойПояс = РаботаВМоделиСервиса.ПолучитьЧасовойПоясОбластиДанных(ОбластьДанных);
	Возврат МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	
КонецФункции

Функция ТребуетсяВыгрузка(Знач ПараметрыВыгрузки)
	
	Если НЕ ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()
		И ПараметрыВыгрузки.ОбластьДанных <> ОбщегоНазначения.ЗначениеРазделителяСеанса() Тогда
		
		ВызватьИсключение(НСтр("ru = 'Запрещено работать с данными области кроме текущей'"));
	КонецЕсли;
	
	Результат = ПараметрыВыгрузки.Принудительно;
	
	Если Не Результат Тогда
		
		Менеджер = Константы.ВыполнитьРезервноеКопированиеОбластиДанных.СоздатьМенеджерЗначения();
		Менеджер.ОбластьДанныхВспомогательныеДанные = ПараметрыВыгрузки.ОбластьДанных;
		Менеджер.Прочитать();
		Результат = Менеджер.Значение;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создает незаполненную структуру нужного формата.
//
// Возвращаемое значение:
// Структура:
// 	- ОбластьДанных - Число.
//	- ИДКопии - УникальныйИдентификатор; Неопределено.
//  - МоментЗапуска - Дата - момент запуска архивирования области.
//	- Принудительно - Булево - Флаг из МС: необходимость создавать копию вне зависимости от активности пользователей.
//	- ПоТребованию - Булево - флаг интерактивного запуска архивирования. Если из МС - всегда Ложь.
//	- ИДФайла - УникальныйИдентификатор - ИД файла выгрузки в хранилище МС.
//	- НомерПопытки - Число - Счетчик попыток. Начальное значение: 1.
//
Функция СоздатьПустыеПараметрыВыгрузки() Экспорт
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ОбластьДанных");
	ПараметрыВыгрузки.Вставить("ИДКопии");
	ПараметрыВыгрузки.Вставить("МоментЗапуска");
	ПараметрыВыгрузки.Вставить("Принудительно");
	ПараметрыВыгрузки.Вставить("ПоТребованию");
	ПараметрыВыгрузки.Вставить("ИДФайла");
	ПараметрыВыгрузки.Вставить("НомерПопытки", 1);
	Возврат ПараметрыВыгрузки;
	
КонецФункции

// Отменяет запланированное ранее создание резервной копии.
//
// ПараметрыОтмены - Структура
//  ОбластьДанных - Число - область данных создание резервной копии в которой требуется отменить
//  ИДКопии - УникальныйИдентификатор - идентификатор копии, создание которой требуется отменить
//
Процедура ОтменитьСозданиеРезервнойКопииОбласти(Знач ПараметрыОтмены) Экспорт
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		ВызватьИсключение(НСтр("ru = 'Не достаточно прав для выполнения операции'"));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяМетода = РезервноеКопированиеОбластейДанныхПовтИсп.ИмяМетодаФоновогоРезервногоКопирования();
	
	Отбор = Новый Структура("ИмяМетода, Ключ, ОбластьДанных", 
		ИмяМетода, "" + ПараметрыОтмены.ИДКопии, ПараметрыОтмены.ОбластьДанных);
	Задания = ОчередьЗаданий.ПолучитьЗадания(Отбор);
	
	Для Каждого Задание Из Задания Цикл
		ОчередьЗаданий.УдалитьЗадание(Задание.Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с настройками резервного копирования

// Возвращает структуру настроек резервного копирования области данных.
//
// Параметры:
// ОбластьДанных - Число; Неопределено - Если Неопределено, возвращаются системные настройки.
//
// Возвращаемое значение:
// Структура - структура настроек. 
//	См. РезервноеКопированиеОбластейДанныхПовтИсп.СоответствиеРусскихИменПолейНастроекАнглийским().
//
Функция ПолучитьНастройкиРезервногоКопированияОбласти(Знач ОбластьДанных = Неопределено) Экспорт
	
	Если НЕ ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()
		И ОбластьДанных <> ОбщегоНазначения.ЗначениеРазделителяСеанса() Тогда
		
		ВызватьИсключение(НСтр("ru = 'Запрещено работать с данными области кроме текущей'"));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Прокси = РезервноеКопированиеОбластейДанныхПовтИсп.ПроксиКонтроляРезервногоКопирования();
	
	НастройкиXDTO = Неопределено;
	СообщениеОбОшибке = Неопределено;
	Если ОбластьДанных = Неопределено Тогда
		ОперацияВыполнена = Прокси.GetDefaultSettings(НастройкиXDTO, СообщениеОбОшибке);
	Иначе
		ОперацияВыполнена = Прокси.GetSettings(ОбластьДанных, НастройкиXDTO, СообщениеОбОшибке);
	КонецЕсли;
	
	Если НЕ ОперацияВыполнена Тогда
		ШаблонСообщения = НСтр("ru = 'Ошибка при получении настроек резервного копирования:
			|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СообщениеОбОшибке);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	Возврат НастройкиXDTOВСтруктуру(НастройкиXDTO);
	
КонецФункции	

// Записывает настройки резервного копирования области данных в хранилище менеджера сервиса.
//
// Параметры:
// ОбластьДанных - Число.
// НастройкиРезервногоКопирования - Структура.
//
// Возвращаемое значение:
// Булево - успешность записи. 
//
Процедура УстановитьНастройкиРезервногоКопированияОбласти(Знач ОбластьДанных, Знач НастройкиРезервногоКопирования) Экспорт
	
	Если НЕ ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()
		И ОбластьДанных <> ОбщегоНазначения.ЗначениеРазделителяСеанса() Тогда
		
		ВызватьИсключение(НСтр("ru = 'Запрещено работать с данными области кроме текущей'"));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Прокси = РезервноеКопированиеОбластейДанныхПовтИсп.ПроксиКонтроляРезервногоКопирования();
	
	Тип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/SaaS/1.0/XMLSchema/ZoneBackupControl", "Settings");
	НастройкиXDTO = Прокси.ФабрикаXDTO.Создать(Тип);
	
	СоответствиеИмен = РезервноеКопированиеОбластейДанныхПовтИсп.СоответствиеРусскихИменПолейНастроекАнглийским();
	Для Каждого ПараИменНастроек Из СоответствиеИмен Цикл
		НастройкиXDTO[ПараИменНастроек.Ключ] = НастройкиРезервногоКопирования[ПараИменНастроек.Значение];
	КонецЦикла;
	
	СообщениеОбОшибке = Неопределено;
	Если НЕ Прокси.SetSettings(ОбластьДанных, НастройкиXDTO, СообщениеОбОшибке) Тогда
		ШаблонСообщения = НСтр("ru = 'Ошибка при сохранении настроек резервного копирования:
                                |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СообщениеОбОшибке);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Преобразования типов

Функция НастройкиXDTOВСтруктуру(Знач НастройкиXDTO)
	
	Если НастройкиXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Результат = Новый Структура;
	СоответствиеИмен = РезервноеКопированиеОбластейДанныхПовтИсп.СоответствиеРусскихИменПолейНастроекАнглийским();
	Для Каждого ПараИменНастроек Из СоответствиеИмен Цикл
		Если НастройкиXDTO.Установлено(ПараИменНастроек.Ключ) Тогда
			Результат.Вставить(ПараИменНастроек.Значение, НастройкиXDTO[ПараИменНастроек.Ключ]);
		КонецЕсли;
	КонецЦикла;
	Возврат  Результат; 
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ







