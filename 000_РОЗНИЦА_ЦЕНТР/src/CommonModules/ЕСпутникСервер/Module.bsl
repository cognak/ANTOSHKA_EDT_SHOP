
#Область Вспомогательные_функции

Функция ОтправитьЗаказы(СтруктураВыгрузки)
	HTTP = Новый HTTPСоединение("esputnik.com",,,,,60, Новый ЗащищенноеСоединениеOpenSSL);
	
	Заголовки = Новый Соответствие;
	ТокенЕСпутник = СокрЛП(СтруктураВыгрузки.УзелОбмена.ТокенЕСпутник);
	Заголовки.Вставить("Authorization", "Basic " + ТокенЕСпутник);
	
	Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос = Новый HTTPЗапрос("/api/v1/orders", Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтруктураВыгрузки.ТекстЗапроса, КодировкаТекста.UTF8);
	HTTPОтвет = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
	
	Если СтруктураВыгрузки.УзелОбмена.ОтправлятьОтчетНаПочту Тогда
		
		ОтправитьСообщениеНаПочту("Ответ сервера на заказ", СтруктураВыгрузки.ТекстЗапроса, HTTPОтвет.ПолучитьТелоКакСтроку());
		
	КонецЕсли;
	
	Возврат (HTTPОтвет.КодСостояния = 200 Или HTTPОтвет.КодСостояния = 201);
КонецФункции

Функция ОтправитьСобытие(СтруктураВыгрузки)
	HTTP = Новый HTTPСоединение("esputnik.com",,,,,60, Новый ЗащищенноеСоединениеOpenSSL);
	
	Заголовки = Новый Соответствие;
	ТокенЕСпутник = СокрЛП(СтруктураВыгрузки.УзелОбмена.ТокенЕСпутник);
	Заголовки.Вставить("Authorization", "Basic " + ТокенЕСпутник);
	
	Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос = Новый HTTPЗапрос("/api/v1/event", Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтруктураВыгрузки.ТекстЗапроса, КодировкаТекста.UTF8);
	HTTPОтвет = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
	
	Если СтруктураВыгрузки.УзелОбмена.ОтправлятьОтчетНаПочту Тогда
		
		ОтправитьСообщениеНаПочту("Ответ сервера на заказ", СтруктураВыгрузки.ТекстЗапроса, HTTPОтвет.ПолучитьТелоКакСтроку());
		
	КонецЕсли;
	
	Возврат (HTTPОтвет.КодСостояния = 200 Или HTTPОтвет.КодСостояния = 201);
КонецФункции

Функция ОтправитьКонтакты(СтруктураВыгрузки)
	HTTP = Новый HTTPСоединение("esputnik.com",,,,,60, Новый ЗащищенноеСоединениеOpenSSL);
	
	Заголовки = Новый Соответствие;
	ТокенЕСпутник = СокрЛП(СтруктураВыгрузки.УзелОбмена.ТокенЕСпутник);
	Заголовки.Вставить("Authorization", "Basic " + ТокенЕСпутник);
	
	Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос = Новый HTTPЗапрос("/api/v1/contacts", Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтруктураВыгрузки.ТекстЗапроса, КодировкаТекста.UTF8);
	HTTPОтвет = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
	
	Если СтруктураВыгрузки.УзелОбмена.ОтправлятьОтчетНаПочту Тогда
		
		ОтправитьСообщениеНаПочту("Ответ сервера на клиента", СтруктураВыгрузки.ТекстЗапроса, HTTPОтвет.ПолучитьТелоКакСтроку());
		
	КонецЕсли;
	
	Возврат (HTTPОтвет.КодСостояния = 200 Или HTTPОтвет.КодСостояния = 201);
КонецФункции

Процедура ОтправитьСообщениеНаПочту (Тема, ТекстЗапроса, ТекстОтвета)
	
	ДанныеДляПочты = "/////Запрос/////";
	ДанныеДляПочты = ДанныеДляПочты + Символы.ПС + ТекстЗапроса;
	ДанныеДляПочты = ДанныеДляПочты + Символы.ПС + "/////Ответ/////";
	ДанныеДляПочты = ДанныеДляПочты + Символы.ПС + ТекстОтвета;
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Тема", Тема);
	ПараметрыПисьма.Вставить("Тело", ДанныеДляПочты);
	КомуОтправлятьМассив = Новый Массив;
	КомуОтправлятьМассив.Добавить(Новый Структура("Адрес, Представление","yurii.sichkarenko@antoshka.ua",""));
	
	ПараметрыПисьма.Вставить("Кому", КомуОтправлятьМассив);
	
	РаботаСПочтовымиСообщениями.ОтправитьСообщение(РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
	
КонецПроцедуры
				
Функция ДобавитьКонтакт(СтруктураВыгрузки)
	ДанныеОКонтакте = СтруктураВыгрузки.ТекстЗапроса;
	СтруктураДетей = Новый Массив;
	Структурадетей.Добавить(Новый Структура("День, Пол, Имя",35559, 35560, 65720));
	Структурадетей.Добавить(Новый Структура("День, Пол, Имя",35838, 35847, 65721));
	Структурадетей.Добавить(Новый Структура("День, Пол, Имя",35839, 35848, 65722));
	Структурадетей.Добавить(Новый Структура("День, Пол, Имя",35840, 35849, 65723));
	Структурадетей.Добавить(Новый Структура("День, Пол, Имя",35841, 35850, 65724));
	Структурадетей.Добавить(Новый Структура("День, Пол, Имя",35842, 35851, 65730));
	Структурадетей.Добавить(Новый Структура("День, Пол, Имя",35843, 35852, 65726));
	Структурадетей.Добавить(Новый Структура("День, Пол, Имя",35844, 35853, 65731));
	Структурадетей.Добавить(Новый Структура("День, Пол, Имя",35845, 35854, 65732));
	Структурадетей.Добавить(Новый Структура("День, Пол, Имя",35846, 35855, 65729));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыДети.Ссылка КАК Ссылка,
		|	КонтрагентыДети.НомерСтроки КАК НомерСтроки,
		|	КонтрагентыДети.Имя КАК Имя,
		|	КонтрагентыДети.Отчество КАК Отчество,
		|	КонтрагентыДети.Фамилия КАК Фамилия,
		|	КонтрагентыДети.ДатаРождения КАК ДатаРождения,
		|	КонтрагентыДети.Комментарий КАК Комментарий,
		|	КонтрагентыДети.Пол КАК Пол,
		|	КонтрагентыДети.УникальныйИдентификатор КАК УникальныйИдентификатор
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.Дети КАК КонтрагентыДети
		|		ПО ИнформационныеКарты.ВладелецКарты = КонтрагентыДети.Ссылка
		|ГДЕ
		|	ИнформационныеКарты.Ссылка = &ДисконтнаяКарта
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаРождения";
	
	Запрос.УстановитьПараметр("ДисконтнаяКарта", ДанныеОКонтакте.ДисконтнаяКарта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	КоличествоДетей = Выборка.Количество();
	
	
	
	ЗаписьJSONКонтакта = Новый ЗаписьJSON;
	ЗаписьJSONКонтакта.УстановитьСтроку();
	ЗаписьJSONКонтакта.ЗаписатьНачалоОбъекта();
	JSON.ЗаписатьСвойство("dedupeOn"			, "sms", ЗаписьJSONКонтакта);
	JSON.ЗаписатьСвойство("restoreDeleted"		, true, ЗаписьJSONКонтакта);
	
	ЗаписьJSONКонтакта.ЗаписатьИмяСвойства("contactFields");
	ЗаписьJSONКонтакта.ЗаписатьНачалоМассива();
	ЗаписьJSONКонтакта.ЗаписатьЗначение("firstName");
	ЗаписьJSONКонтакта.ЗаписатьЗначение("lastName");
	ЗаписьJSONКонтакта.ЗаписатьЗначение("sms");
	ЗаписьJSONКонтакта.ЗаписатьКонецМассива();		                           
	
	ЗаписьJSONКонтакта.ЗаписатьИмяСвойства("customFieldsIDs");
	ЗаписьJSONКонтакта.ЗаписатьНачалоМассива();
	ЗаписьJSONКонтакта.ЗаписатьЗначение(26369);  //Дата рождения
	ЗаписьJSONКонтакта.ЗаписатьЗначение(26370);  //Пол
	Если Не КоличествоДетей = 0 Тогда
		ЗаписьJSONКонтакта.ЗаписатьЗначение(35558);  //Количество детей
	КонецЕсли;
	
	ЗаписьJSONКонтакта.ЗаписатьЗначение(46892);  //Наличие дисконтной карты
	//ЗаписьJSONКонтакта.ЗаписатьЗначение(52471);  //Язык
	//Добавляем записи о детях
	Для НомерРебенка = 1 По КоличествоДетей Цикл
		ЗаписьJSONКонтакта.ЗаписатьЗначение(СтруктураДетей[НомерРебенка-1].День);  //День рождения ребенка
		ЗаписьJSONКонтакта.ЗаписатьЗначение(СтруктураДетей[НомерРебенка-1].Пол);  //Пол ребенка
		ЗаписьJSONКонтакта.ЗаписатьЗначение(СтруктураДетей[НомерРебенка-1].Имя);  //Имя ребенка
	КонецЦикла;
	
	ЗаписьJSONКонтакта.ЗаписатьКонецМассива();
	ЗаписьJSONКонтакта.ЗаписатьИмяСвойства("contacts");
	ЗаписьJSONКонтакта.ЗаписатьНачалоМассива();
	
	ЗаписьJSONКонтакта.ЗаписатьНачалоОбъекта();

	JSON.ЗаписатьСвойство("firstName"			, СокрЛП(ДанныеОКонтакте.Имя), ЗаписьJSONКонтакта);
	JSON.ЗаписатьСвойство("lastName"			, СокрЛП(ДанныеОКонтакте.Фамилия), ЗаписьJSONКонтакта);

	ЗаписьJSONКонтакта.ЗаписатьИмяСвойства("channels");
	ЗаписьJSONКонтакта.ЗаписатьНачалоМассива();
	ЗаписьJSONКонтакта.ЗаписатьНачалоОбъекта();
	JSON.ЗаписатьСвойство("type"				, "sms", ЗаписьJSONКонтакта);
	JSON.ЗаписатьСвойство("value"				, Строка(ДанныеОКонтакте.НомерТелефона), ЗаписьJSONКонтакта);
	ЗаписьJSONКонтакта.ЗаписатьКонецОбъекта();
	ЗаписьJSONКонтакта.ЗаписатьКонецМассива();		

	ЗаписьJSONКонтакта.ЗаписатьИмяСвойства("fields");
	ЗаписьJSONКонтакта.ЗаписатьНачалоМассива();
	
	ЗаписьJSONКонтакта.ЗаписатьНачалоОбъекта();
	JSON.ЗаписатьСвойство("id"					, "26369", ЗаписьJSONКонтакта);
	JSON.ЗаписатьСвойство("value"				, Формат(ДанныеОКонтакте.ДатаРождения, "ДФ=гггг-ММ-дд"), ЗаписьJSONКонтакта);
	ЗаписьJSONКонтакта.ЗаписатьКонецОбъекта();
	ЗаписьJSONКонтакта.ЗаписатьНачалоОбъекта();
	JSON.ЗаписатьСвойство("id"					, "26370", ЗаписьJSONКонтакта);
	JSON.ЗаписатьСвойство("value"				, ?(ДанныеОКонтакте.Пол = Перечисления.ПолФизическогоЛица.Женский,"ж","м"), ЗаписьJSONКонтакта);
	ЗаписьJSONКонтакта.ЗаписатьКонецОбъекта();
	Если Не КоличествоДетей = 0 Тогда 
		ЗаписьJSONКонтакта.ЗаписатьНачалоОбъекта();
		JSON.ЗаписатьСвойство("id"					, "35558", ЗаписьJSONКонтакта);
		JSON.ЗаписатьСвойство("value"				, КоличествоДетей, ЗаписьJSONКонтакта);
		ЗаписьJSONКонтакта.ЗаписатьКонецОбъекта();
	КонецЕсли;
	ЗаписьJSONКонтакта.ЗаписатьНачалоОбъекта();
	JSON.ЗаписатьСвойство("id"					, "46892", ЗаписьJSONКонтакта);
	JSON.ЗаписатьСвойство("value"				, "да", ЗаписьJSONКонтакта);
	ЗаписьJSONКонтакта.ЗаписатьКонецОбъекта();
	//ЗаписьJSONКонтакта.ЗаписатьНачалоОбъекта();
	//JSON.ЗаписатьСвойство("id"					, "52471", ЗаписьJSONКонтакта);
	//JSON.ЗаписатьСвойство("value"				, ?(ДанныеОКонтакте.Пол = Перечисления.ПолФизическогоЛица.Женский,"ж","м"), ЗаписьJSONКонтакта);
	//ЗаписьJSONКонтакта.ЗаписатьКонецОбъекта();
	
	ТекущийРебенок = 0;
	
	Пока Выборка.Следующий() Цикл
		ЗаписьJSONКонтакта.ЗаписатьНачалоОбъекта();
		JSON.ЗаписатьСвойство("id"					, Строка(Формат(СтруктураДетей[ТекущийРебенок].День, "ЧГ=")), ЗаписьJSONКонтакта);
		JSON.ЗаписатьСвойство("value"				, Формат(Выборка.ДатаРождения, "ДФ=гггг-ММ-дд"), ЗаписьJSONКонтакта);
		ЗаписьJSONКонтакта.ЗаписатьКонецОбъекта();
		ЗаписьJSONКонтакта.ЗаписатьНачалоОбъекта();
		JSON.ЗаписатьСвойство("id"					, Строка(Формат(СтруктураДетей[ТекущийРебенок].Пол, "ЧГ=")), ЗаписьJSONКонтакта);
		JSON.ЗаписатьСвойство("value"				, ?(Выборка.Пол = Перечисления.ПолФизическогоЛица.Женский,"ж","м"), ЗаписьJSONКонтакта);
		ЗаписьJSONКонтакта.ЗаписатьКонецОбъекта();
		ЗаписьJSONКонтакта.ЗаписатьНачалоОбъекта();
		JSON.ЗаписатьСвойство("id"					, Строка(Формат(СтруктураДетей[ТекущийРебенок].Имя, "ЧГ=")), ЗаписьJSONКонтакта);
		JSON.ЗаписатьСвойство("value"				, СокрЛП(Выборка.Имя), ЗаписьJSONКонтакта);
		ЗаписьJSONКонтакта.ЗаписатьКонецОбъекта();
		ТекущийРебенок = ТекущийРебенок + 1;
	КонецЦикла;
	
	ЗаписьJSONКонтакта.ЗаписатьКонецМассива();		

	ЗаписьJSONКонтакта.ЗаписатьКонецОбъекта();
	
	ЗаписьJSONКонтакта.ЗаписатьКонецМассива();
	ЗаписьJSONКонтакта.ЗаписатьКонецОбъекта();
	
	ТекстЗапроса = ЗаписьJSONКонтакта.Закрыть();
	
	HTTP = Новый HTTPСоединение("esputnik.com",,,,,60, Новый ЗащищенноеСоединениеOpenSSL);
	
	Заголовки = Новый Соответствие;
	ТокенЕСпутник = СокрЛП(СтруктураВыгрузки.УзелОбмена.ТокенЕСпутник);
	Заголовки.Вставить("Authorization", "Basic " + ТокенЕСпутник);
	
	Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос = Новый HTTPЗапрос("/api/v1/contacts", Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстЗапроса, КодировкаТекста.UTF8);
	HTTPОтвет = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
	
	Если СтруктураВыгрузки.УзелОбмена.ОтправлятьОтчетНаПочту Тогда 
		
		ОтправитьСообщениеНаПочту("Добавление клиента", ТекстЗапроса, HTTPОтвет.ПолучитьТелоКакСтроку());
		
	КонецЕсли;
	
	Возврат (HTTPОтвет.КодСостояния = 200 Или HTTPОтвет.КодСостояния = 201);
	
КонецФункции

Функция ПроверитьКонтакт(СтруктураВыгрузки)
	
	HTTP = Новый HTTPСоединение("esputnik.com",,,,,60, Новый ЗащищенноеСоединениеOpenSSL);
	
	Заголовки = Новый Соответствие;
	ТокенЕСпутник = СокрЛП(СтруктураВыгрузки.УзелОбмена.ТокенЕСпутник);
	Заголовки.Вставить("Authorization", "Basic " + ТокенЕСпутник);
	
	СтрокаЗапроса = "?sms=" + СокрЛП(Строка(СтруктураВыгрузки.ТекстЗапроса));

	HTTPЗапрос = Новый HTTPЗапрос("/api/v1/contacts/" + СтрокаЗапроса, Заголовки);
	HTTPОтвет = HTTP.Получить(HTTPЗапрос);
	
	Возврат HTTPОтвет;
	
КонецФункции

Функция ЗапросДляЧека()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Чек.Ссылка КАК Ссылка,
		|	Чек.Дата КАК Дата,
		|	Чек.ВидОперации КАК ВидОперации,
		|	Чек.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ЕСТЬNULL(КонтрагентыТелефон.НомерТелефона, ФизическиеЛицаТелефон.НомерТелефона) КАК НомерТелефона,
		|	ЕСТЬNULL(КонтрагентыТелефон.Ссылка, ФизическиеЛицаТелефон.Ссылка) КАК Контрагент,
		|	ЕСТЬNULL(ФИОКонтрагента.Фамилия, ФИОФизЛица.Фамилия) КАК Фамилия,
		|	ЕСТЬNULL(ФИОКонтрагента.Имя, ФИОФизЛица.Имя) КАК Имя,
		|	Чек.СуммаДокумента КАК СуммаДокумента,
		|	Чек.Магазин КАК Магазин,
		|	ЕСТЬNULL(Контрагенты.ДатаРождения, ФизическиеЛица.ДатаРождения) КАК ДатаРождения,
		|	ЕСТЬNULL(Контрагенты.Пол, ФизическиеЛица.Пол) КАК Пол,
		|	ЕСТЬNULL(ТаблицаНакоплений.СуммаОстаток, 0) КАК СуммаНакоплений,
		|	ЕСТЬNULL(МАКСИМУМ(ТаблицаСкидки.ЗначениеСкидкиНаценки), 0) КАК ПроцентСкидки
		|ПОМЕСТИТЬ ВыбранныеСтроки
		|ИЗ
		|	Документ.ЧекККМ КАК Чек
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыТелефон
		|			ПО Контрагенты.Ссылка = КонтрагентыТелефон.Ссылка
		|				И (КонтрагентыТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		|				И (НЕ КонтрагентыТелефон.НомерТелефона = """")
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОКонтрагента
		|			ПО Контрагенты.Ссылка = ФИОКонтрагента.ФизЛицо
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(, ) КАК ТаблицаНакоплений
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки КАК ТаблицаСкидки
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК ТабличнаяЧасть
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК ТаблицаУсловия
		|						ПО ТабличнаяЧасть.УсловиеПредоставления = ТаблицаУсловия.Ссылка
		|					ПО ТаблицаСкидки.Ссылка = ТабличнаяЧасть.Ссылка
		|				ПО (НЕ ТаблицаСкидки.ПометкаУдаления)
		|					И (ТаблицаСкидки.ДисконтныйКлуб = ИСТИНА)
		|					И (ТаблицаСкидки.Родитель = ЗНАЧЕНИЕ(Справочник.СкидкиНаценки.ДисконтныеКарты))
		|					И (ТаблицаУсловия.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж))
		|					И (ТаблицаУсловия.ЗначениеУсловияОграничения <= ЕСТЬNULL(ТаблицаНакоплений.СуммаОстаток, 0))
		|			ПО Контрагенты.Ссылка = ТаблицаНакоплений.ВладелецДисконтнойКарты
		|		ПО Чек.ВладелецДисконтнойКарты = Контрагенты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаТелефон
		|			ПО ФизическиеЛица.Ссылка = ФизическиеЛицаТелефон.Ссылка
		|				И (ФизическиеЛицаТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		|				И (НЕ ФизическиеЛицаТелефон.НомерТелефона = """")
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛица
		|			ПО ФизическиеЛица.Ссылка = ФИОФизЛица.ФизЛицо
		|		ПО Чек.ВладелецДисконтнойКарты = ФизическиеЛица.Ссылка
		|ГДЕ
		|	Чек.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
		|	И (НЕ Чек.ВладелецДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ИЛИ НЕ Чек.ВладелецДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
		|	И ((ВЫРАЗИТЬ(Чек.ЗаказПокупателя КАК Документ.ЗаказПокупателя)) = ЗНАЧЕНИЕ(документ.ЗаказПокупателя.ПустаяСсылка)
		|			ИЛИ НЕ (ВЫРАЗИТЬ(Чек.ЗаказПокупателя КАК Документ.СчетНаОплатуПокупателю)) = ЗНАЧЕНИЕ(документ.СчетНаОплатуПокупателю.ПустаяСсылка))
		|	И Чек.Ссылка = &Ссылка
		|	И Чек.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	Чек.Ссылка,
		|	Чек.Дата,
		|	Чек.ВидОперации,
		|	Чек.ДисконтнаяКарта,
		|	Чек.СуммаДокумента,
		|	Чек.Магазин,
		|	ЕСТЬNULL(КонтрагентыТелефон.НомерТелефона, ФизическиеЛицаТелефон.НомерТелефона),
		|	ЕСТЬNULL(КонтрагентыТелефон.Ссылка, ФизическиеЛицаТелефон.Ссылка),
		|	ЕСТЬNULL(ФИОКонтрагента.Фамилия, ФИОФизЛица.Фамилия),
		|	ЕСТЬNULL(ФИОКонтрагента.Имя, ФИОФизЛица.Имя),
		|	ЕСТЬNULL(Контрагенты.ДатаРождения, ФизическиеЛица.ДатаРождения),
		|	ЕСТЬNULL(Контрагенты.Пол, ФизическиеЛица.Пол),
		|	ЕСТЬNULL(ТаблицаНакоплений.СуммаОстаток, 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбранныеСтроки.Ссылка КАК Ссылка,
		|	ВыбранныеСтроки.Дата КАК Дата,
		|	ВыбранныеСтроки.ВидОперации КАК ВидОперации,
		|	ВыбранныеСтроки.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ВыбранныеСтроки.НомерТелефона КАК НомерТелефона,
		|	ВыбранныеСтроки.Контрагент КАК Контрагент,
		|	ВыбранныеСтроки.Фамилия КАК Фамилия,
		|	ВыбранныеСтроки.Имя КАК Имя,
		|	ВыбранныеСтроки.СуммаДокумента КАК СуммаДокумента,
		|	ВыбранныеСтроки.Магазин КАК Магазин,
		|	ВыбранныеСтроки.Магазин.Наименование КАК МагазинНаименование,
		|	ВыбранныеСтроки.ДатаРождения КАК ДатаРождения,
		|	ВыбранныеСтроки.Пол КАК Пол,
		|	ВыбранныеСтроки.СуммаНакоплений КАК СуммаНакоплений,
		|	ВыбранныеСтроки.ПроцентСкидки КАК ПроцентСкидки
		|ИЗ
		|	ВыбранныеСтроки КАК ВыбранныеСтроки
		|ГДЕ
		|	НЕ ВыбранныеСтроки.НомерТелефона ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МАКСИМУМ(ВыбранныеСтроки.Дата) КАК Дата,
		|	ВыбранныеСтроки.НомерТелефона КАК НомерТелефона
		|ПОМЕСТИТЬ ПоследняПокупка
		|ИЗ
		|	ВыбранныеСтроки КАК ВыбранныеСтроки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыбранныеСтроки.НомерТелефона
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВыбранныеСтроки.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ВыбранныеСтроки.Фамилия КАК Фамилия,
		|	ВыбранныеСтроки.Имя КАК Имя,
		|	ВыбранныеСтроки.НомерТелефона КАК НомерТелефона,
		|	ВыбранныеСтроки.Магазин.Наименование КАК МагазинНаименование,
		|	ВыбранныеСтроки.ДатаРождения КАК ДатаРождения,
		|	ВыбранныеСтроки.Пол КАК Пол,
		|	ВыбранныеСтроки.Контрагент КАК Контрагент,
		|	ВыбранныеСтроки.ПроцентСкидки КАК ПроцентСкидки
		|ИЗ
		|	ВыбранныеСтроки КАК ВыбранныеСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследняПокупка КАК ПоследняПокупка
		|		ПО ВыбранныеСтроки.Дата = ПоследняПокупка.Дата
		|			И ВыбранныеСтроки.НомерТелефона = ПоследняПокупка.НомерТелефона
		|ГДЕ
		|	НЕ ВыбранныеСтроки.НомерТелефона ЕСТЬ NULL";

	Возврат Запрос;
КонецФункции

Функция ЗапросДляЗаказа()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка,
		|	ЗаказПокупателя.Дата КАК Дата,
		|	ЗаказПокупателя.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ЕСТЬNULL(КонтрагентыТелефон.НомерТелефона, ФизическиеЛицаТелефон.НомерТелефона) КАК НомерТелефона,
		|	ЕСТЬNULL(КонтрагентыТелефон.Ссылка, ФизическиеЛицаТелефон.Ссылка) КАК Контрагент,
		|	ЕСТЬNULL(ФИОКонтрагента.Фамилия, ФИОФизЛица.Фамилия) КАК Фамилия,
		|	ЕСТЬNULL(ФИОКонтрагента.Имя, ФИОФизЛица.Имя) КАК Имя,
		|	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
		|	ЗаказПокупателя.Магазин КАК Магазин,
		|	ЕСТЬNULL(Контрагенты.ДатаРождения, ФизическиеЛица.ДатаРождения) КАК ДатаРождения,
		|	ЕСТЬNULL(Контрагенты.Пол, ФизическиеЛица.Пол) КАК Пол,
		|	ЕСТЬNULL(ТаблицаНакоплений.СуммаОстаток, 0) КАК СуммаНакоплений,
		|	ЕСТЬNULL(МАКСИМУМ(ТаблицаСкидки.ЗначениеСкидкиНаценки), 0) КАК ПроцентСкидки,
		|	ЗаказПокупателя.Номер КАК Номер
		|ПОМЕСТИТЬ ВыбранныеСтроки
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыТелефон
		|			ПО Контрагенты.Ссылка = КонтрагентыТелефон.Ссылка
		|				И (КонтрагентыТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		|				И (НЕ КонтрагентыТелефон.НомерТелефона = """")
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОКонтрагента
		|			ПО Контрагенты.Ссылка = ФИОКонтрагента.ФизЛицо
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(, ) КАК ТаблицаНакоплений
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки КАК ТаблицаСкидки
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК ТабличнаяЧасть
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК ТаблицаУсловия
		|						ПО ТабличнаяЧасть.УсловиеПредоставления = ТаблицаУсловия.Ссылка
		|					ПО ТаблицаСкидки.Ссылка = ТабличнаяЧасть.Ссылка
		|				ПО (НЕ ТаблицаСкидки.ПометкаУдаления)
		|					И (ТаблицаСкидки.ДисконтныйКлуб = ИСТИНА)
		|					И (ТаблицаСкидки.Родитель = ЗНАЧЕНИЕ(Справочник.СкидкиНаценки.ДисконтныеКарты))
		|					И (ТаблицаУсловия.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж))
		|					И (ТаблицаУсловия.ЗначениеУсловияОграничения <= ЕСТЬNULL(ТаблицаНакоплений.СуммаОстаток, 0))
		|			ПО Контрагенты.Ссылка = ТаблицаНакоплений.ВладелецДисконтнойКарты
		|		ПО ЗаказПокупателя.ВладелецДисконтнойКарты = Контрагенты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаТелефон
		|			ПО ФизическиеЛица.Ссылка = ФизическиеЛицаТелефон.Ссылка
		|				И (ФизическиеЛицаТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		|				И (НЕ ФизическиеЛицаТелефон.НомерТелефона = """")
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛица
		|			ПО ФизическиеЛица.Ссылка = ФИОФизЛица.ФизЛицо
		|		ПО ЗаказПокупателя.ВладелецДисконтнойКарты = ФизическиеЛица.Ссылка
		|ГДЕ
		|	(НЕ ЗаказПокупателя.ВладелецДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ИЛИ НЕ ЗаказПокупателя.ВладелецДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
		|	И ЗаказПокупателя.Ссылка = &Ссылка
		|	И ЗаказПокупателя.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателя.Ссылка,
		|	ЗаказПокупателя.Дата,
		|	ЗаказПокупателя.ДисконтнаяКарта,
		|	ЗаказПокупателя.СуммаДокумента,
		|	ЗаказПокупателя.Магазин,
		|	ЕСТЬNULL(КонтрагентыТелефон.НомерТелефона, ФизическиеЛицаТелефон.НомерТелефона),
		|	ЕСТЬNULL(КонтрагентыТелефон.Ссылка, ФизическиеЛицаТелефон.Ссылка),
		|	ЕСТЬNULL(ФИОКонтрагента.Фамилия, ФИОФизЛица.Фамилия),
		|	ЕСТЬNULL(ФИОКонтрагента.Имя, ФИОФизЛица.Имя),
		|	ЕСТЬNULL(Контрагенты.ДатаРождения, ФизическиеЛица.ДатаРождения),
		|	ЕСТЬNULL(Контрагенты.Пол, ФизическиеЛица.Пол),
		|	ЕСТЬNULL(ТаблицаНакоплений.СуммаОстаток, 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбранныеСтроки.Ссылка КАК Ссылка,
		|	ВыбранныеСтроки.Дата КАК Дата,
		|	ВыбранныеСтроки.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ВыбранныеСтроки.НомерТелефона КАК НомерТелефона,
		|	ВыбранныеСтроки.Контрагент КАК Контрагент,
		|	ВыбранныеСтроки.Фамилия КАК Фамилия,
		|	ВыбранныеСтроки.Имя КАК Имя,
		|	ВыбранныеСтроки.СуммаДокумента КАК СуммаДокумента,
		|	ВыбранныеСтроки.Магазин КАК Магазин,
		|	ВыбранныеСтроки.Магазин.Наименование КАК МагазинНаименование,
		|	ВыбранныеСтроки.ДатаРождения КАК ДатаРождения,
		|	ВыбранныеСтроки.Пол КАК Пол,
		|	ВыбранныеСтроки.СуммаНакоплений КАК СуммаНакоплений,
		|	ВыбранныеСтроки.ПроцентСкидки КАК ПроцентСкидки,
		|	ВыбранныеСтроки.Номер КАК Номер
		|ИЗ
		|	ВыбранныеСтроки КАК ВыбранныеСтроки
		|ГДЕ
		|	НЕ ВыбранныеСтроки.НомерТелефона ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МАКСИМУМ(ВыбранныеСтроки.Дата) КАК Дата,
		|	ВыбранныеСтроки.НомерТелефона КАК НомерТелефона
		|ПОМЕСТИТЬ ПоследняПокупка
		|ИЗ
		|	ВыбранныеСтроки КАК ВыбранныеСтроки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыбранныеСтроки.НомерТелефона
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВыбранныеСтроки.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ВыбранныеСтроки.Фамилия КАК Фамилия,
		|	ВыбранныеСтроки.Имя КАК Имя,
		|	ВыбранныеСтроки.НомерТелефона КАК НомерТелефона,
		|	ВыбранныеСтроки.Магазин.Наименование КАК МагазинНаименование,
		|	ВыбранныеСтроки.ДатаРождения КАК ДатаРождения,
		|	ВыбранныеСтроки.Пол КАК Пол,
		|	ВыбранныеСтроки.Контрагент КАК Контрагент,
		|	ВыбранныеСтроки.ПроцентСкидки КАК ПроцентСкидки
		|ИЗ
		|	ВыбранныеСтроки КАК ВыбранныеСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследняПокупка КАК ПоследняПокупка
		|		ПО ВыбранныеСтроки.Дата = ПоследняПокупка.Дата
		|			И ВыбранныеСтроки.НомерТелефона = ПоследняПокупка.НомерТелефона
		|ГДЕ
		|	НЕ ВыбранныеСтроки.НомерТелефона ЕСТЬ NULL";
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросДанныхДляЕСпутника()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Чек.Ссылка КАК Ссылка,
		|	Чек.Дата КАК Дата,
		|	Чек.ВидОперации КАК ВидОперации,
		|	Чек.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ЕСТЬNULL(КонтрагентыТелефон.НомерТелефона, ФизическиеЛицаТелефон.НомерТелефона) КАК НомерТелефона,
		|	ЕСТЬNULL(КонтрагентыТелефон.Ссылка, ФизическиеЛицаТелефон.Ссылка) КАК Контрагент,
		|	ЕСТЬNULL(ФИОКонтрагента.Фамилия, ФИОФизЛица.Фамилия) КАК Фамилия,
		|	ЕСТЬNULL(ФИОКонтрагента.Имя, ФИОФизЛица.Имя) КАК Имя,
		|	Чек.СуммаДокумента КАК СуммаДокумента,
		|	Чек.Магазин КАК Магазин,
		|	ЕСТЬNULL(Контрагенты.ДатаРождения, ФизическиеЛица.ДатаРождения) КАК ДатаРождения,
		|	ЕСТЬNULL(Контрагенты.Пол, ФизическиеЛица.Пол) КАК Пол,
		|	ЕСТЬNULL(ТаблицаНакоплений.СуммаОстаток, 0) КАК СуммаНакоплений,
		|	ЕСТЬNULL(МАКСИМУМ(ТаблицаСкидки.ЗначениеСкидкиНаценки), 0) КАК ПроцентСкидки,
		|	0 КАК СуммаДоставки,
		|	Чек.Номер КАК Номер
		|ПОМЕСТИТЬ ВыбранныеСтроки
		|ИЗ
		|	Документ.ЧекККМ КАК Чек
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыТелефон
		|			ПО Контрагенты.Ссылка = КонтрагентыТелефон.Ссылка
		|				И (КонтрагентыТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		|				И (НЕ КонтрагентыТелефон.НомерТелефона = """")
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОКонтрагента
		|			ПО Контрагенты.Ссылка = ФИОКонтрагента.ФизЛицо
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(, ) КАК ТаблицаНакоплений
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки КАК ТаблицаСкидки
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК ТабличнаяЧасть
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК ТаблицаУсловия
		|						ПО ТабличнаяЧасть.УсловиеПредоставления = ТаблицаУсловия.Ссылка
		|					ПО ТаблицаСкидки.Ссылка = ТабличнаяЧасть.Ссылка
		|				ПО (НЕ ТаблицаСкидки.ПометкаУдаления)
		|					И (ТаблицаСкидки.ДисконтныйКлуб = ИСТИНА)
		|					И (ТаблицаСкидки.Родитель = ЗНАЧЕНИЕ(Справочник.СкидкиНаценки.ДисконтныеКарты))
		|					И (ТаблицаУсловия.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж))
		|					И (ТаблицаУсловия.ЗначениеУсловияОграничения <= ЕСТЬNULL(ТаблицаНакоплений.СуммаОстаток, 0))
		|			ПО Контрагенты.Ссылка = ТаблицаНакоплений.ВладелецДисконтнойКарты
		|		ПО Чек.ВладелецДисконтнойКарты = Контрагенты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаТелефон
		|			ПО ФизическиеЛица.Ссылка = ФизическиеЛицаТелефон.Ссылка
		|				И (ФизическиеЛицаТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		|				И (НЕ ФизическиеЛицаТелефон.НомерТелефона = """")
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛица
		|			ПО ФизическиеЛица.Ссылка = ФИОФизЛица.ФизЛицо
		|		ПО Чек.ВладелецДисконтнойКарты = ФизическиеЛица.Ссылка
		|ГДЕ
		|	Чек.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
		|	И (НЕ Чек.ВладелецДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ИЛИ НЕ Чек.ВладелецДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
		|	И ((ВЫРАЗИТЬ(Чек.ЗаказПокупателя КАК Документ.ЗаказПокупателя)) = ЗНАЧЕНИЕ(документ.ЗаказПокупателя.ПустаяСсылка)
		|			ИЛИ НЕ (ВЫРАЗИТЬ(Чек.ЗаказПокупателя КАК Документ.СчетНаОплатуПокупателю)) = ЗНАЧЕНИЕ(документ.СчетНаОплатуПокупателю.ПустаяСсылка))
		|	И Чек.Ссылка = &Ссылка
		|	И Чек.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	Чек.Ссылка,
		|	Чек.Дата,
		|	Чек.ВидОперации,
		|	Чек.ДисконтнаяКарта,
		|	Чек.СуммаДокумента,
		|	Чек.Магазин,
		|	ЕСТЬNULL(КонтрагентыТелефон.НомерТелефона, ФизическиеЛицаТелефон.НомерТелефона),
		|	ЕСТЬNULL(КонтрагентыТелефон.Ссылка, ФизическиеЛицаТелефон.Ссылка),
		|	ЕСТЬNULL(ФИОКонтрагента.Фамилия, ФИОФизЛица.Фамилия),
		|	ЕСТЬNULL(ФИОКонтрагента.Имя, ФИОФизЛица.Имя),
		|	ЕСТЬNULL(Контрагенты.ДатаРождения, ФизическиеЛица.ДатаРождения),
		|	ЕСТЬNULL(Контрагенты.Пол, ФизическиеЛица.Пол),
		|	ЕСТЬNULL(ТаблицаНакоплений.СуммаОстаток, 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка,
		|	ЗаказПокупателя.Дата,
		|	"""",
		|	ЗаказПокупателя.ДисконтнаяКарта,
		|	ЕСТЬNULL(КонтрагентыТелефон.НомерТелефона, ФизическиеЛицаТелефон.НомерТелефона),
		|	ЕСТЬNULL(КонтрагентыТелефон.Ссылка, ФизическиеЛицаТелефон.Ссылка),
		|	ЕСТЬNULL(ФИОКонтрагента.Фамилия, ФИОФизЛица.Фамилия),
		|	ЕСТЬNULL(ФИОКонтрагента.Имя, ФИОФизЛица.Имя),
		|	ЗаказПокупателя.СуммаДокумента,
		|	ЗаказПокупателя.Магазин,
		|	ЕСТЬNULL(Контрагенты.ДатаРождения, ФизическиеЛица.ДатаРождения),
		|	ЕСТЬNULL(Контрагенты.Пол, ФизическиеЛица.Пол),
		|	ЕСТЬNULL(ТаблицаНакоплений.СуммаОстаток, 0),
		|	ЕСТЬNULL(МАКСИМУМ(ТаблицаСкидки.ЗначениеСкидкиНаценки), 0),
		|	ЗаказПокупателя.СуммаДоставки,
		|	ЗаказПокупателя.Номер
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыТелефон
		|			ПО Контрагенты.Ссылка = КонтрагентыТелефон.Ссылка
		|				И (КонтрагентыТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		|				И (НЕ КонтрагентыТелефон.НомерТелефона = """")
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОКонтрагента
		|			ПО Контрагенты.Ссылка = ФИОКонтрагента.ФизЛицо
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(, ) КАК ТаблицаНакоплений
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки КАК ТаблицаСкидки
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК ТабличнаяЧасть
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК ТаблицаУсловия
		|						ПО ТабличнаяЧасть.УсловиеПредоставления = ТаблицаУсловия.Ссылка
		|					ПО ТаблицаСкидки.Ссылка = ТабличнаяЧасть.Ссылка
		|				ПО (НЕ ТаблицаСкидки.ПометкаУдаления)
		|					И (ТаблицаСкидки.ДисконтныйКлуб = ИСТИНА)
		|					И (ТаблицаСкидки.Родитель = ЗНАЧЕНИЕ(Справочник.СкидкиНаценки.ДисконтныеКарты))
		|					И (ТаблицаУсловия.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж))
		|					И (ТаблицаУсловия.ЗначениеУсловияОграничения <= ЕСТЬNULL(ТаблицаНакоплений.СуммаОстаток, 0))
		|			ПО Контрагенты.Ссылка = ТаблицаНакоплений.ВладелецДисконтнойКарты
		|		ПО ЗаказПокупателя.ВладелецДисконтнойКарты = Контрагенты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаТелефон
		|			ПО ФизическиеЛица.Ссылка = ФизическиеЛицаТелефон.Ссылка
		|				И (ФизическиеЛицаТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		|				И (НЕ ФизическиеЛицаТелефон.НомерТелефона = """")
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛица
		|			ПО ФизическиеЛица.Ссылка = ФИОФизЛица.ФизЛицо
		|		ПО ЗаказПокупателя.ВладелецДисконтнойКарты = ФизическиеЛица.Ссылка
		|ГДЕ
		|	(НЕ ЗаказПокупателя.ВладелецДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ИЛИ НЕ ЗаказПокупателя.ВладелецДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
		|	И ЗаказПокупателя.Ссылка = &Ссылка
		|	И ЗаказПокупателя.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателя.Ссылка,
		|	ЗаказПокупателя.Дата,
		|	ЗаказПокупателя.ДисконтнаяКарта,
		|	ЗаказПокупателя.СуммаДокумента,
		|	ЗаказПокупателя.Магазин,
		|	ЕСТЬNULL(КонтрагентыТелефон.НомерТелефона, ФизическиеЛицаТелефон.НомерТелефона),
		|	ЕСТЬNULL(КонтрагентыТелефон.Ссылка, ФизическиеЛицаТелефон.Ссылка),
		|	ЕСТЬNULL(ФИОКонтрагента.Фамилия, ФИОФизЛица.Фамилия),
		|	ЕСТЬNULL(ФИОКонтрагента.Имя, ФИОФизЛица.Имя),
		|	ЕСТЬNULL(Контрагенты.ДатаРождения, ФизическиеЛица.ДатаРождения),
		|	ЕСТЬNULL(Контрагенты.Пол, ФизическиеЛица.Пол),
		|	ЕСТЬNULL(ТаблицаНакоплений.СуммаОстаток, 0),
		|	ЗаказПокупателя.СуммаДоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбранныеСтроки.Ссылка КАК Ссылка,
		|	ВыбранныеСтроки.Дата КАК Дата,
		|	ВыбранныеСтроки.ВидОперации КАК ВидОперации,
		|	ВыбранныеСтроки.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ВыбранныеСтроки.НомерТелефона КАК НомерТелефона,
		|	ВыбранныеСтроки.Контрагент КАК Контрагент,
		|	ВыбранныеСтроки.Фамилия КАК Фамилия,
		|	ВыбранныеСтроки.Имя КАК Имя,
		|	ВыбранныеСтроки.СуммаДокумента КАК СуммаДокумента,
		|	ВыбранныеСтроки.Магазин КАК Магазин,
		|	ВыбранныеСтроки.Магазин.Наименование КАК МагазинНаименование,
		|	ВыбранныеСтроки.ДатаРождения КАК ДатаРождения,
		|	ВыбранныеСтроки.Пол КАК Пол,
		|	ВыбранныеСтроки.СуммаНакоплений КАК СуммаНакоплений,
		|	ВыбранныеСтроки.ПроцентСкидки КАК ПроцентСкидки,
		|	ВыбранныеСтроки.СуммаДоставки КАК СуммаДоставки,
		|	ВыбранныеСтроки.Номер КАК Номер
		|ИЗ
		|	ВыбранныеСтроки КАК ВыбранныеСтроки
		|ГДЕ
		|	НЕ ВыбранныеСтроки.НомерТелефона ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МАКСИМУМ(ВыбранныеСтроки.Дата) КАК Дата,
		|	ВыбранныеСтроки.НомерТелефона КАК НомерТелефона
		|ПОМЕСТИТЬ ПоследняПокупка
		|ИЗ
		|	ВыбранныеСтроки КАК ВыбранныеСтроки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыбранныеСтроки.НомерТелефона
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВыбранныеСтроки.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ВыбранныеСтроки.Фамилия КАК Фамилия,
		|	ВыбранныеСтроки.Имя КАК Имя,
		|	ВыбранныеСтроки.НомерТелефона КАК НомерТелефона,
		|	ВыбранныеСтроки.Магазин.Наименование КАК МагазинНаименование,
		|	ВыбранныеСтроки.ДатаРождения КАК ДатаРождения,
		|	ВыбранныеСтроки.Пол КАК Пол,
		|	ВыбранныеСтроки.Контрагент КАК Контрагент,
		|	ВыбранныеСтроки.ПроцентСкидки КАК ПроцентСкидки,
		|	ВыбранныеСтроки.СуммаДоставки КАК СуммаДоставки
		|ИЗ
		|	ВыбранныеСтроки КАК ВыбранныеСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследняПокупка КАК ПоследняПокупка
		|		ПО ВыбранныеСтроки.Дата = ПоследняПокупка.Дата
		|			И ВыбранныеСтроки.НомерТелефона = ПоследняПокупка.НомерТелефона
		|ГДЕ
		|	НЕ ВыбранныеСтроки.НомерТелефона ЕСТЬ NULL";
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область Основная_часть

Процедура ВыгрузкаЕСпутник(СтруктураВыгрузки)
	
	Если СтруктураВыгрузки.УзелОбмена.ИспользоватьНовыйЗапрос Тогда 
		Запрос = ЗапросДанныхДляЕСпутника();
	Иначе 
		Если ТипЗнч(СтруктураВыгрузки.ДанныеДляОтправки) = Тип("ДокументОбъект.ЧекККМ") Тогда 
			Запрос = ЗапросДляЧека();
		Иначе 
			Запрос = ЗапросДляЗаказа();
		КонецЕсли;
	КонецЕсли;

	Запрос.УстановитьПараметр("Ссылка", СтруктураВыгрузки.ДанныеДляОтправки.Ссылка);
	
	Пакет = Запрос.ВыполнитьПакет();
	
	ВыборкаСсылка = Пакет[3].Выбрать();
	
	Пока ВыборкаСсылка.Следующий() Цикл
		
		СтруктураВыгрузки.ТекстЗапроса = ВыборкаСсылка.НомерТелефона; 
		ОтветСервера = ПроверитьКонтакт(СтруктураВыгрузки);
		
		Если (ОтветСервера.КодСостояния = 200 Или ОтветСервера.КодСостояния = 201) Тогда 
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ОтветСервера.ПолучитьТелоКакСтроку());
			ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON);
			
			Если ТипЗнч(ДанныеОтвета) = Тип("Массив") И ДанныеОтвета.Количество() = 0 Тогда 
				
				СтруктураВыгрузки.ТекстЗапроса = ВыборкаСсылка;
				Если Не ДобавитьКонтакт(СтруктураВыгрузки) Тогда 
					ЗаписьЖурналаРегистрации("Ошибка добовления нового контакта в ЕСпутник", УровеньЖурналаРегистрации.Ошибка,,, "Ответ от серверане 200");
				КонецЕсли;
			КонецЕсли;
			
		Иначе 
			ЗаписьЖурналаРегистрации("Ошибка отправки данных в ЕСпутник", УровеньЖурналаРегистрации.Ошибка,,, "Ответ от серверане 200"); 
			Прервать; 
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаСсылка = Пакет[1].Выбрать();

	Пока ВыборкаСсылка.Следующий() Цикл
		
		Если ТипЗнч(СтруктураВыгрузки.ДанныеДляОтправки) = Тип("ДокументОбъект.ЧекККМ") Тогда 
			СтатусДокумента = "DELIVERED";
			ИсточникДокумента = "offline";
		Иначе
			ИсточникДокумента = "online";
			Если ВыборкаСсылка.Ссылка.Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт Тогда 
				СтатусДокумента = "DELIVERED";
			ИначеЕсли ВыборкаСсылка.Ссылка.Статус = Перечисления.СтатусыЗаказовПокупателей.Отменён Тогда
				СтатусДокумента = "CANCELLED";
			Иначе 
				СтатусДокумента = "INITIALIZED";
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураВыгрузки.УзелОбмена.ИспользоватьНовыйЗапрос Тогда 
			СуммаДокумента = ВыборкаСсылка.СуммаДокумента + ВыборкаСсылка.СуммаДоставки;
			СуммаДоставки = ВыборкаСсылка.СуммаДоставки;
		Иначе 
			СуммаДокумента = ВыборкаСсылка.СуммаДокумента;
			СуммаДоставки = 0;
		КонецЕсли;
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("orders");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		JSON.ЗаписатьСвойство("externalOrderId"		, Строка(ВыборкаСсылка.Ссылка.УникальныйИдентификатор()), ЗаписьJSON);
		JSON.ЗаписатьСвойство("externalCustomerId"	, Строка(ВыборкаСсылка.НомерТелефона), ЗаписьJSON);
		JSON.ЗаписатьСвойство("totalCost"			, СуммаДокумента, ЗаписьJSON);
		JSON.ЗаписатьСвойство("status"				, СтатусДокумента, ЗаписьJSON);
		JSON.ЗаписатьСвойство("date"				, Формат(ВыборкаСсылка.Дата,"ДФ=yyyy-MM-ddTHH:mm:ss.0000000+02:00"), ЗаписьJSON);
		JSON.ЗаписатьСвойство("phone"				, Строка(ВыборкаСсылка.НомерТелефона), ЗаписьJSON);
		JSON.ЗаписатьСвойство("firstName"			, СокрЛП(ВыборкаСсылка.Имя), ЗаписьJSON);
		JSON.ЗаписатьСвойство("lastName"			, СокрЛП(ВыборкаСсылка.Фамилия), ЗаписьJSON);
		JSON.ЗаписатьСвойство("currency"			, "UAH", ЗаписьJSON);
		JSON.ЗаписатьСвойство("shipping"			, СуммаДоставки, ЗаписьJSON);
		JSON.ЗаписатьСвойство("source"				, ИсточникДокумента, ЗаписьJSON);
		JSON.ЗаписатьСвойство("storeId"				, Строка(СтрЗаменить(ВыборкаСсылка.МагазинНаименование, ",", "")), ЗаписьJSON);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("items");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДокументТовары.Ссылка КАК Ссылка,
			|	ДокументТовары.Номенклатура КАК Номенклатура,
			|	ДокументТовары.Количество КАК Количество,
			|	ДокументТовары.Цена КАК Цена,
			|	ДокументТовары.Сумма КАК Сумма,
			|	Товар.ВидНоменклатуры КАК ВидНоменклатуры,
			|	Товар.Наименование КАК Наименование,
			|	Товар.IDN КАК IDN
			|ИЗ
			|	Документ.ЧекККМ.Товары КАК ДокументТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товар
			|		ПО ДокументТовары.Номенклатура = Товар.Ссылка
			|ГДЕ
			|	ДокументТовары.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ВыборкаСсылка.Ссылка);
		
		Если ТипЗнч(СтруктураВыгрузки.ДанныеДляОтправки) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЧекККМ", "ЗаказПокупателя");
			
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			
			JSON.ЗаписатьСвойство("externalItemId"			, Строка(ВыборкаДетальныеЗаписи.IDN), ЗаписьJSON);
			JSON.ЗаписатьСвойство("name"					, СокрЛП(ВыборкаДетальныеЗаписи.Наименование), ЗаписьJSON);
			JSON.ЗаписатьСвойство("category"				, СокрЛП(ВыборкаДетальныеЗаписи.ВидНоменклатуры), ЗаписьJSON);
			JSON.ЗаписатьСвойство("quantity"				, ВыборкаДетальныеЗаписи.Количество, ЗаписьJSON);
			JSON.ЗаписатьСвойство("cost"					, ВыборкаДетальныеЗаписи.Цена, ЗаписьJSON);

			ЗаписьJSON.ЗаписатьКонецОбъекта();

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		ЗаписьJSON.ЗаписатьКонецМассива();			
		ЗаписьJSON.ЗаписатьКонецОбъекта();			
		
		ТекстЗапроса = ЗаписьJSON.Закрыть();
		
		СтруктураВыгрузки.ТекстЗапроса = ТекстЗапроса; 
		Если Не ОтправитьЗаказы(СтруктураВыгрузки) Тогда 
			ЗаписьЖурналаРегистрации("Ошибка отправки данных в ЕСпутник", УровеньЖурналаРегистрации.Ошибка,,, "Ответ от серверане 200");
			Прервать;
		КонецЕсли;

	КонецЦикла;
	
	ВыборкаСсылка = Пакет[3].Выбрать();

	Пока ВыборкаСсылка.Следующий() Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПродажиПоЧекамОбороты.Магазин КАК Магазин,
			|	ПродажиПоЧекамОбороты.ДокументПродажи КАК ДокументПродажи
			|ПОМЕСТИТЬ МагазинЧек
			|ИЗ
			|	РегистрНакопления.ПродажиПоЧекам.Обороты(, &КонДата, , ВладелецДисконтнойКарты = &Контрагент) КАК ПродажиПоЧекамОбороты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПродажиПоЧекамОбороты.Магазин КАК Магазин,
			|	ПродажиПоЧекамОбороты.ДокументПродажи КАК ДокументПродажи
			|ПОМЕСТИТЬ МагазинЧекГод
			|ИЗ
			|	РегистрНакопления.ПродажиПоЧекам.Обороты(&НачДата, &КонДата, , ВладелецДисконтнойКарты = &Контрагент) КАК ПродажиПоЧекамОбороты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	МагазинЧекГод.Магазин КАК Магазин,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МагазинЧекГод.ДокументПродажи) КАК ДокументПродажи
			|ПОМЕСТИТЬ МагазинКолПродажГод
			|ИЗ
			|	МагазинЧекГод КАК МагазинЧекГод
			|
			|СГРУППИРОВАТЬ ПО
			|	МагазинЧекГод.Магазин
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	МагазинЧек.Магазин.Наименование КАК МагазинНаименование
			|ИЗ
			|	МагазинЧек КАК МагазинЧек
			|ГДЕ
			|	МагазинЧек.Магазин.ВведенВЭксплуатацию
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	МагазинЧекГод.Магазин.Наименование КАК МагазинНаименование
			|ИЗ
			|	МагазинЧекГод КАК МагазинЧекГод
			|ГДЕ
			|	МагазинЧекГод.Магазин.ВведенВЭксплуатацию
			|
			|УПОРЯДОЧИТЬ ПО
			|	МагазинЧекГод.ДокументПродажи УБЫВ";
		
		Запрос.УстановитьПараметр("Контрагент", ВыборкаСсылка.Контрагент);
		Запрос.УстановитьПараметр("НачДата", ТекущаяДатаСеанса() - 365*24*60*60);
		Запрос.УстановитьПараметр("КонДата", ТекущаяДатаСеанса());
		
		ПакетКлиент = Запрос.ВыполнитьПакет();
		
		Выборка = ПакетКлиент[3].Выбрать();
		
		СписокМагазинов = "";
		Пока Выборка.Следующий() Цикл
			СписокМагазинов = СписокМагазинов + СокрЛП(СтрЗаменить(Выборка.МагазинНаименование, ",", "")) + ", ";
		КонецЦикла;
		СписокМагазинов = Лев(СписокМагазинов,СтрДлина(СокрЛП(СписокМагазинов))-1);
		
		Выборка = ПакетКлиент[4].Выбрать();
		
		МакПосящаемыйМагазин = "";
		Если Выборка.Следующий() Тогда 
			МакПосящаемыйМагазин = СокрЛП(СтрЗаменить(Выборка.МагазинНаименование, ",", ""));
		КонецЕсли;
		
		
		
		ЗаписьJSONКонтакта = Новый ЗаписьJSON;
		ЗаписьJSONКонтакта.УстановитьСтроку();
		ЗаписьJSONКонтакта.ЗаписатьНачалоОбъекта();
		JSON.ЗаписатьСвойство("dedupeOn"			, "sms", ЗаписьJSONКонтакта);
		JSON.ЗаписатьСвойство("restoreDeleted"		, true, ЗаписьJSONКонтакта);
		
		ЗаписьJSONКонтакта.ЗаписатьИмяСвойства("contactFields");
		ЗаписьJSONКонтакта.ЗаписатьНачалоМассива();
		ЗаписьJSONКонтакта.ЗаписатьЗначение("firstName");
		ЗаписьJSONКонтакта.ЗаписатьЗначение("lastName");
		ЗаписьJSONКонтакта.ЗаписатьЗначение("sms");
		ЗаписьJSONКонтакта.ЗаписатьКонецМассива();		                           
		
		ЗаписьJSONКонтакта.ЗаписатьИмяСвойства("customFieldsIDs");
		ЗаписьJSONКонтакта.ЗаписатьНачалоМассива();
		ЗаписьJSONКонтакта.ЗаписатьЗначение(196510);  //ShopSales
		ЗаписьJSONКонтакта.ЗаписатьЗначение(196513);  //LastShop
		ЗаписьJSONКонтакта.ЗаписатьЗначение(196514);  //PopularShop
		ЗаписьJSONКонтакта.ЗаписатьЗначение(196515);  //ShopSalesText
		ЗаписьJSONКонтакта.ЗаписатьЗначение(201552);  //Процент скидки
		ЗаписьJSONКонтакта.ЗаписатьКонецМассива();
		ЗаписьJSONКонтакта.ЗаписатьИмяСвойства("contacts");
		ЗаписьJSONКонтакта.ЗаписатьНачалоМассива();
		ЗаписьJSONКонтакта.ЗаписатьНачалоОбъекта();
		
		JSON.ЗаписатьСвойство("firstName"			, СокрЛП(ВыборкаСсылка.Имя), ЗаписьJSONКонтакта);
		JSON.ЗаписатьСвойство("lastName"			, СокрЛП(ВыборкаСсылка.Фамилия), ЗаписьJSONКонтакта);
		
		ЗаписьJSONКонтакта.ЗаписатьИмяСвойства("channels");
		ЗаписьJSONКонтакта.ЗаписатьНачалоМассива();
		ЗаписьJSONКонтакта.ЗаписатьНачалоОбъекта();
		JSON.ЗаписатьСвойство("type"				, "sms", ЗаписьJSONКонтакта);
		JSON.ЗаписатьСвойство("value"				, Строка(ВыборкаСсылка.НомерТелефона), ЗаписьJSONКонтакта);
		ЗаписьJSONКонтакта.ЗаписатьКонецОбъекта();
		ЗаписьJSONКонтакта.ЗаписатьКонецМассива();		
		
		ЗаписьJSONКонтакта.ЗаписатьИмяСвойства("fields");
		ЗаписьJSONКонтакта.ЗаписатьНачалоМассива();
		ЗаписьJSONКонтакта.ЗаписатьНачалоОбъекта();
		JSON.ЗаписатьСвойство("id"					, "196510", ЗаписьJSONКонтакта);
		JSON.ЗаписатьСвойство("value"				, СписокМагазинов, ЗаписьJSONКонтакта);
		ЗаписьJSONКонтакта.ЗаписатьКонецОбъекта();
		ЗаписьJSONКонтакта.ЗаписатьНачалоОбъекта();
		JSON.ЗаписатьСвойство("id"					, "196515", ЗаписьJSONКонтакта);
		JSON.ЗаписатьСвойство("value"				, СписокМагазинов, ЗаписьJSONКонтакта);
		ЗаписьJSONКонтакта.ЗаписатьКонецОбъекта();
		ЗаписьJSONКонтакта.ЗаписатьНачалоОбъекта();
		JSON.ЗаписатьСвойство("id"					, "196513", ЗаписьJSONКонтакта);
		JSON.ЗаписатьСвойство("value"				, СокрЛП(СтрЗаменить(Выборка.МагазинНаименование, ",", "")), ЗаписьJSONКонтакта);
		ЗаписьJSONКонтакта.ЗаписатьКонецОбъекта();
		ЗаписьJSONКонтакта.ЗаписатьНачалоОбъекта();
		JSON.ЗаписатьСвойство("id"					, "196514", ЗаписьJSONКонтакта);
		JSON.ЗаписатьСвойство("value"				, МакПосящаемыйМагазин, ЗаписьJSONКонтакта);
		ЗаписьJSONКонтакта.ЗаписатьКонецОбъекта();
		ЗаписьJSONКонтакта.ЗаписатьНачалоОбъекта();
		JSON.ЗаписатьСвойство("id"					, "201552", ЗаписьJSONКонтакта);
		JSON.ЗаписатьСвойство("value"				, ВыборкаСсылка.ПроцентСкидки, ЗаписьJSONКонтакта);
		ЗаписьJSONКонтакта.ЗаписатьКонецОбъекта();
		ЗаписьJSONКонтакта.ЗаписатьКонецМассива();		
		
		ЗаписьJSONКонтакта.ЗаписатьКонецОбъекта();
		ЗаписьJSONКонтакта.ЗаписатьКонецМассива();			
		ЗаписьJSONКонтакта.ЗаписатьКонецОбъекта();			
		
		ТекстЗапроса = ЗаписьJSONКонтакта.Закрыть();
		СтруктураВыгрузки.ТекстЗапроса = ТекстЗапроса; 
		Если Не ОтправитьКонтакты(СтруктураВыгрузки) Тогда 
			ЗаписьЖурналаРегистрации("Ошибка отправки данных в ЕСпутник", УровеньЖурналаРегистрации.Ошибка,,, "Ответ от серверане 200");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузкаЕСпутникСобытия(СтруктураВыгрузки)
	
	ОбъектСобытия = СтруктураВыгрузки.ДанныеДляОтправки;
	
	СтруктураСобытия = Новый Структура;
	СтруктураСобытия.Вставить("ТипСобытия", "");
	СтруктураСобытия.Вставить("externalOrderId", "");
	СтруктураСобытия.Вставить("ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
	СтруктураСобытия.Вставить("ЗапросДоступностиТоваров", Документы.ЗапросДоступностиТоваров.ПустаяСсылка());
	СтруктураСобытия.Вставить("keyValue", "");
	СтруктураСобытия.Вставить("numTTN", "");
	СтруктураСобытия.Вставить("shopAddress", "");
	СтруктураСобытия.Вставить("skus", "");
	
	Если ТипЗнч(ОбъектСобытия) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
	
		СтруктураСобытия.ЗаказПокупателя = ОбъектСобытия.Ссылка;
		
		Если ОбъектСобытия.Статус = Перечисления.СтатусыЗаказовПокупателей.Новый Тогда 
			
			СтруктураСобытия.ТипСобытия = "order_new";
			СтруктураСобытия.externalOrderId = ОбъектСобытия.Номер;
			СтруктураСобытия.keyValue = ОбъектСобытия.Номер;
			
			РегистрыСведений.КомментарийИнтернетЗаказа.ЗаписьКомментария(ОбъектСобытия.Ссылка,
				,
				"Отправлено событие 'order_new' (новый заказ)");
	
		ИначеЕсли ОбъектСобытия.Статус = Перечисления.СтатусыЗаказовПокупателей.ЗапросДоступности Тогда 
			
			СтруктураСобытия.ТипСобытия = "order_complectation";
			СтруктураСобытия.externalOrderId = ОбъектСобытия.Номер;
			СтруктураСобытия.keyValue = ОбъектСобытия.Номер;
			
			РегистрыСведений.КомментарийИнтернетЗаказа.ЗаписьКомментария(ОбъектСобытия.Ссылка,
				,
				"Отправлено событие 'order_complectation' (комплектация заказа)");
	
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектСобытия) = Тип("ДокументОбъект.ЗапросДоступностиТоваров") Тогда 
	
		СтруктураСобытия.ЗаказПокупателя = ОбъектСобытия.ДокументОснование.Ссылка;
		СтруктураСобытия.ЗапросДоступностиТоваров = ОбъектСобытия.Ссылка;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	МагазиныКонтактнаяИнформация.Представление КАК Представление,
			|	МагазиныКонтактнаяИнформация.Ссылка.Наименование КАК Наименование,
			|	МагазиныКонтактнаяИнформация.Ссылка.НомерМагазина КАК НомерМагазина,
			|	МагазиныКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей
			|ИЗ
			|	Справочник.Магазины.КонтактнаяИнформация КАК МагазиныКонтактнаяИнформация
			|ГДЕ
			|	МагазиныКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
			|	И НЕ МагазиныКонтактнаяИнформация.Ссылка.ПометкаУдаления
			|	И МагазиныКонтактнаяИнформация.Ссылка.ВведенВЭксплуатацию
			|	И МагазиныКонтактнаяИнформация.Ссылка = &Магазин
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерМагазина";
		
		Запрос.УстановитьПараметр("Магазин", ОбъектСобытия.МагазинПолучатель);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();

		Если Выборка.Следующий() Тогда
			
			//СтруктураАдреса = КонтактнаяИнформацияСлужебный.ПредыдущаяСтруктураКонтактнойИнформацииXML(Выборка.ЗначенияПолей);
			
			СтруктураСобытия.shopAddress = СокрЛП(Выборка.Представление);
					
		КонецЕсли;

		Если ОбъектСобытия.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Сборка
				И Не ОбъектСобытия.ТипДоставки = Перечисления.ТипДоставкиЗаказПокупателя.Самовывоз Тогда 

			СтруктураСобытия.ТипСобытия = "order_delievery";
			СтруктураСобытия.externalOrderId = СтруктураСобытия.ЗаказПокупателя.Номер;
			СтруктураСобытия.keyValue = СтруктураСобытия.ЗаказПокупателя.Номер;
			
			РегистрыСведений.КомментарийИнтернетЗаказа.ЗаписьКомментария(СтруктураСобытия.ЗаказПокупателя,
				,
				"Отправлено событие 'order_delievery' (сборка заказа)");
	
		ИначеЕсли ОбъектСобытия.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПродажаБезнал Тогда 

			СтруктураСобытия.ТипСобытия = "order_paidonline";
			СтруктураСобытия.externalOrderId = СтруктураСобытия.ЗаказПокупателя.Номер;
			СтруктураСобытия.keyValue = СтруктураСобытия.ЗапросДоступностиТоваров.Номер;
			
			РегистрыСведений.КомментарийИнтернетЗаказа.ЗаписьКомментария(СтруктураСобытия.ЗаказПокупателя,
				,
				"Отправлено событие 'order_paidonline' (забрать оплаченый заказ)");
	
		ИначеЕсли ОбъектСобытия.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПродажаНаКассе Тогда 

			СтруктураСобытия.ТипСобытия = "order_paycash";
			СтруктураСобытия.externalOrderId = СтруктураСобытия.ЗаказПокупателя.Номер;
			СтруктураСобытия.keyValue = СтруктураСобытия.ЗапросДоступностиТоваров.Номер;
			
			РегистрыСведений.КомментарийИнтернетЗаказа.ЗаписьКомментария(СтруктураСобытия.ЗаказПокупателя,
				,
				"Отправлено событие 'order_paycash' (забрать и оплатить на кассе)");
	
		КонецЕсли;

	ИначеЕсли ТипЗнч(ОбъектСобытия) = Тип("РегистрСведенийНаборЗаписей.СтатусыЭН") Тогда 
	
		СсылкаНаЭН = ОбъектСобытия.Отбор.ДокументРегистратор.Значение;
		Отбор = Новый Структура("ДокументРегистратор", СсылкаНаЭН);
		ТаблицаСтатусов = РегистрыСведений.СтатусыЭН.СрезПоследних(, Отбор);
		ДокументЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТаблицаСтатусов[0].ДокументРегистратор
																	, "ДокументОснование"
																	, Документы.ЗапросДоступностиТоваров.ПустаяСсылка()
																	, Ложь);
		Если Не ТаблицаСтатусов.Количество() = 0 
				И Не ТаблицаСтатусов[0].ДокументРегистратор.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка()
				И Не ДокументЗапроса.ТипДоставки = Перечисления.ТипДоставкиЗаказПокупателя.Самовывоз Тогда
			
			СтруктураСобытия.ЗаказПокупателя = ТаблицаСтатусов[0].ДокументРегистратор.ЗаказПокупателя;
			СтруктураСобытия.externalOrderId = СтруктураСобытия.ЗаказПокупателя.Номер;
			СтруктураСобытия.keyValue = СсылкаНаЭН.Номер;
			СтруктураСобытия.numTTN = СсылкаНаЭН.Номер;
			
			Если ТаблицаСтатусов[0].СтатусЭН.СтатусПосылки = Перечисления.СтатусыПосылокСлужбыДоставки.Доставлена Тогда
				
				СтруктураСобытия.ТипСобытия = "order_readynp6day";
				
				РегистрыСведений.КомментарийИнтернетЗаказа.ЗаписьКомментария(СтруктураСобытия.ЗаказПокупателя,
					,
					"Отправлено событие 'order_readynp6day' (напоминание, что посылка ждёт на почте)");
		
			ИначеЕсли ТаблицаСтатусов[0].СтатусЭН.СтатусПосылки = Перечисления.СтатусыПосылокСлужбыДоставки.Получена Тогда 
				
				СтруктураСобытия.ТипСобытия = "order_delivered";
				
				РегистрыСведений.КомментарийИнтернетЗаказа.ЗаписьКомментария(СтруктураСобытия.ЗаказПокупателя,
					,
					"Отправлено событие 'order_delivered' (получена клиентом или отказ от получения)");
		
			ИначеЕсли ТаблицаСтатусов[0].СтатусЭН.СтатусПосылки = Перечисления.СтатусыПосылокСлужбыДоставки.Новая Тогда 
				
				СтруктураСобытия.ТипСобытия = "order_readynp";
				
				РегистрыСведений.КомментарийИнтернетЗаказа.ЗаписьКомментария(СтруктураСобытия.ЗаказПокупателя,
					,
					"Отправлено событие 'order_readynp' (готово к отправке)");
		
			КонецЕсли;
		
		КонецЕсли;

	КонецЕсли;

	Если Не ПустаяСтрока(СтруктураСобытия.ТипСобытия) Тогда
		
		Если ТипЗнч(ОбъектСобытия) = Тип("ДокументОбъект.ЗаказПокупателя")
			Или ТипЗнч(ОбъектСобытия) = Тип("ДокументОбъект.ЗапросДоступностиТоваров") Тогда
				
			МассивТоваров = Новый Массив;
			
			Для Каждого СтрокаСТоваром Из ОбъектСобытия.Товары Цикл
				
				Если ТипЗнч(ОбъектСобытия) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
					
					ОтменаВЗаказе = СтрокаСТоваром.Отменено;
					
				Иначе
					
					ОтменаВЗаказе = Ложь;
					
				КонецЕсли;

				Если ТипЗнч(ОбъектСобытия) = Тип("ДокументОбъект.ЗапросДоступностиТоваров") Тогда
					
					ОтменаВЗапросе = СтрокаСТоваром.СтатусЗапроса;
					
				Иначе
					
					ОтменаВЗапросе = Перечисления.СтатусыЗапросовДоступностиТоваров.ПустаяСсылка();
					
				КонецЕсли;

				Если Не (ОтменаВЗаказе
						Или ОтменаВЗапросе = Перечисления.СтатусыЗапросовДоступностиТоваров.Отменён
						Или ОтменаВЗапросе = Перечисления.СтатусыЗапросовДоступностиТоваров.Удалён) Тогда

					МассивТоваров.Добавить(СокрЛП(СтрокаСТоваром.Номенклатура.IDN));
				
				КонецЕсли;
				
			КонецЦикла;
		
			СтруктураСобытия.skus = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивТоваров, ", ");
				
		КонецЕсли;
		

		Если СтруктураВыгрузки.УзелОбмена.ИспользоватьНовыйЗапрос Тогда 
			Запрос = ЗапросДанныхДляЕСпутника();
		Иначе
			Запрос = ЗапросДляЗаказа();
		КонецЕсли;
	
		Запрос.УстановитьПараметр("Ссылка", СтруктураСобытия.ЗаказПокупателя);
		
		Пакет = Запрос.ВыполнитьПакет();
		
		ВыборкаСсылка = Пакет[1].Выбрать();
	
		Пока ВыборкаСсылка.Следующий() Цикл
	
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			JSON.ЗаписатьСвойство("externalOrderId"		, СокрЛП(Строка(СтруктураСобытия.externalOrderId)), ЗаписьJSON); 
			JSON.ЗаписатьСвойство("CustomerId"			, СокрЛП(ВыборкаСсылка.Имя) + " " + СокрЛП(ВыборкаСсылка.Фамилия), ЗаписьJSON);
			JSON.ЗаписатьСвойство("numTTN"				, СокрЛП(Строка(СтруктураСобытия.numTTN)), ЗаписьJSON); 
			JSON.ЗаписатьСвойство("shopAddress"			, СокрЛП(Строка(СтруктураСобытия.shopAddress)), ЗаписьJSON); 
			JSON.ЗаписатьСвойство("skus"				, СтруктураСобытия.skus, ЗаписьJSON); 
	
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			
			ТекстЗапросаJSON = ЗаписьJSON.Закрыть();
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			ЗаписьJSON.ЗаписатьИмяСвойства("params");
			ЗаписьJSON.ЗаписатьНачалоМассива();
			
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			JSON.ЗаписатьСвойство("name"				, "json", ЗаписьJSON);
			JSON.ЗаписатьСвойство("value"				, ТекстЗапросаJSON, ЗаписьJSON);
			ЗаписьJSON.ЗаписатьКонецОбъекта(); 
			
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			JSON.ЗаписатьСвойство("name"				, "PhoneNumber", ЗаписьJSON);
			JSON.ЗаписатьСвойство("value"				, СокрЛП(Строка(ВыборкаСсылка.НомерТелефона)), ЗаписьJSON);
			ЗаписьJSON.ЗаписатьКонецОбъекта(); 
			
			ЗаписьJSON.ЗаписатьКонецМассива();
			
			JSON.ЗаписатьСвойство("eventTypeKey"		, СтруктураСобытия.ТипСобытия, ЗаписьJSON);
			JSON.ЗаписатьСвойство("keyValue"			, СокрЛП(Строка(СтруктураСобытия.keyValue)), ЗаписьJSON); 
			
			ЗаписьJSON.ЗаписатьКонецОбъекта();			
			
			ТекстЗапроса = ЗаписьJSON.Закрыть();
			
			СтруктураВыгрузки.ТекстЗапроса = ТекстЗапроса; 
			Если Не ОтправитьСобытие(СтруктураВыгрузки) Тогда 
				ЗаписьЖурналаРегистрации("Ошибка отправки данных в ЕСпутник", УровеньЖурналаРегистрации.Ошибка,,, "Ответ от серверане 200");
				Прервать;
			КонецЕсли;
	
		КонецЦикла; 
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбменСЕСпутником

// Выполняет запуск обмена с сайтом из регламентного задания.
//
// Параметры:
//   КодУзлаОбмена		- строка с кодом узла плана обмена.
Процедура ЗаданиеВыполнитьОбмен(КодУзлаОбмена, ТипОбмена) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	УзелОбмена = ПланыОбмена.ОбменСЕСпутником.НайтиПоКоду(КодУзлаОбмена);
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с ЕСпутником'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			УзелОбмена.Метаданные(),
			УзелОбмена,
			НСтр("ru = 'Не найден узел обмена с кодом'") + " " + КодУзлаОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	Если УзелОбмена.ПометкаУдаления Тогда
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с ЕСпутником'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			УзелОбмена.Метаданные(),
			УзелОбмена,
			НСтр("ru = 'Настройка обмена помечена на удаление. Обмен отменен.'"));
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбмен(УзелОбмена, ,ТипОбмена);
	
КонецПроцедуры

// Запускает процедуру обмена с сайтом.
// Параметры
//	УзелОбмена - Ссылка на план обмена с сайтом.
//	РежимЗапускаОбмена - строка, поясняющая был ли обмен запущен интерактивно
//						или через регл. задание.
//	ВыгружатьТолькоИзменения - Булево, определяет будут выгружаться все данные
// 						или только зарегистрированные.
Процедура ВыполнитьОбмен(УзелОбмена, ИнтерактивныйОбмен = Ложь, ТипОбмена = "") Экспорт
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	
	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		ТекстСообщения = НСтр("ru = 'Отказано! Объем разрешен в центральном узле!'");

		Если ИнтерактивныйОбмен = Истина Тогда

			Сообщить(ТекстСообщения);
			Возврат;

		Иначе

			ВызватьИсключение ТекстСообщения;

		КонецЕсли;

	КонецЕсли;
	
	ТекстСообщения = "";
	
	СтруктураВыгрузки = Новый Структура("УзелОбмена, ДанныеДляОтправки, ТекстЗапроса");
	СтруктураВыгрузки.УзелОбмена = УзелОбмена;

	Выборка = ПланыОбмена.ВыбратьИзменения(УзелОбмена, 1);
	Пока Выборка.Следующий() Цикл
		ДанныеДляОтправки = Выборка.Получить();
		// Выгрузка заказов 
		
		Если ВРег(ТипОбмена) = "ЗАКАЗЫ"
				И (ТипЗнч(ДанныеДляОтправки) = Тип("ДокументОбъект.ЧекККМ")
				Или ТипЗнч(ДанныеДляОтправки) = Тип("ДокументОбъект.ЗаказПокупателя")) Тогда
			СтруктураВыгрузки.ДанныеДляОтправки = ДанныеДляОтправки;
			ВыгрузкаЕСпутник(СтруктураВыгрузки);
		КонецЕсли;
		
		//Выгрузка событий
		Если ВРег(ТипОбмена) = "СОБЫТИЯ" 
				И (ТипЗнч(ДанныеДляОтправки) = Тип("ДокументОбъект.ЗаказПокупателя")
					Или ТипЗнч(ДанныеДляОтправки) = Тип("ДокументОбъект.ЗапросДоступностиТоваров")
					Или ТипЗнч(ДанныеДляОтправки) = Тип("ДокументОбъект.ЭлектроннаяНакладная")
					Или ТипЗнч(ДанныеДляОтправки) = Тип("РегистрСведенийНаборЗаписей.СтатусыЭН")) Тогда
			СтруктураВыгрузки.ДанныеДляОтправки = ДанныеДляОтправки;
			ВыгрузкаЕСпутникСобытия(СтруктураВыгрузки);
		КонецЕсли;
		
		Если ТипЗнч(ДанныеДляОтправки) = Тип("РегистрСведенийНаборЗаписей.СтатусыЭН") Тогда
			
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, ДанныеДляОтправки);
			
		Иначе
			
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, ДанныеДляОтправки.Ссылка);
			
		КонецЕсли;

	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти

#Область Работа_с_сообщениями

Функция ОтправитьСообщениеViber(СтруктураВыгрузки) Экспорт
	ОтветСервера = Новый Структура("КодСостояния, ТелоОтвета, ТелоОтветаСтрока");  
	
	HTTP = Новый HTTPСоединение("esputnik.com",,,,,60, Новый ЗащищенноеСоединениеOpenSSL);
	
	Заголовки = Новый Соответствие;
	ТокенЕСпутник = СокрЛП(СтруктураВыгрузки.УзелОбмена.ТокенЕСпутник);
	Заголовки.Вставить("Authorization", "Basic " + ТокенЕСпутник);
	
	Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос = Новый HTTPЗапрос("/api/v1/message/viber", Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтруктураВыгрузки.ТекстЗапроса, КодировкаТекста.UTF8);
	HTTPОтвет = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
	
	Если СтруктураВыгрузки.УзелОбмена.ОтправлятьОтчетНаПочту Тогда
		
		ОтправитьСообщениеНаПочту("Ответ сервера на заказ", СтруктураВыгрузки.ТекстЗапроса, HTTPОтвет.ПолучитьТелоКакСтроку());
		
	КонецЕсли; 
	
	ОтветСервера.КодСостояния = HTTPОтвет.КодСостояния;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));  		
	ОтветСервера.ТелоОтвета =ПрочитатьJSON(ЧтениеJSON);
	ОтветСервера.ТелоОтветаСтрока = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	Возврат ОтветСервера;
КонецФункции

Функция ОтправитьСообщениеSMS(СтруктураВыгрузки) Экспорт
	ОтветСервера = Новый Структура("КодСостояния, ТелоОтвета, ТелоОтветаСтрока");  
	
	HTTP = Новый HTTPСоединение("esputnik.com",,,,,60, Новый ЗащищенноеСоединениеOpenSSL);
	
	Заголовки = Новый Соответствие;
	ТокенЕСпутник = СокрЛП(СтруктураВыгрузки.УзелОбмена.ТокенЕСпутник);
	Заголовки.Вставить("Authorization", "Basic " + ТокенЕСпутник);
	
	Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос = Новый HTTPЗапрос("/api/v1/message/sms", Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтруктураВыгрузки.ТекстЗапроса, КодировкаТекста.UTF8);
	HTTPОтвет = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
	
	Если СтруктураВыгрузки.УзелОбмена.ОтправлятьОтчетНаПочту Тогда
		
		ОтправитьСообщениеНаПочту("Ответ сервера на заказ", СтруктураВыгрузки.ТекстЗапроса, HTTPОтвет.ПолучитьТелоКакСтроку());
		
	КонецЕсли;
	
	ОтветСервера.КодСостояния = HTTPОтвет.КодСостояния;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));  		
	ОтветСервера.ТелоОтвета =ПрочитатьJSON(ЧтениеJSON);
	ОтветСервера.ТелоОтветаСтрока = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	Возврат ОтветСервера;
КонецФункции

Функция ПолучитьСостояниеСообщения(СтруктураВыгрузки) Экспорт
	ОтветСервера = Новый Структура("КодСостояния, ТелоОтвета, ТелоОтветаСтрока");  
	
	HTTP = Новый HTTPСоединение("esputnik.com",,,,,60, Новый ЗащищенноеСоединениеOpenSSL);
	
	Заголовки = Новый Соответствие;
	ТокенЕСпутник = СокрЛП(СтруктураВыгрузки.УзелОбмена.ТокенЕСпутник);
	Заголовки.Вставить("Authorization", "Basic " + ТокенЕСпутник);
	
	СтрокаЗапроса = "?ids=" + СокрЛП(Строка(СтруктураВыгрузки.ТекстЗапроса));

	HTTPЗапрос = Новый HTTPЗапрос("/api/v1/message/status/" + СтрокаЗапроса, Заголовки);
	HTTPОтвет = HTTP.Получить(HTTPЗапрос); 
	
	ОтветСервера.КодСостояния = HTTPОтвет.КодСостояния;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));  		
	ОтветСервера.ТелоОтвета =ПрочитатьJSON(ЧтениеJSON);
	ОтветСервера.ТелоОтветаСтрока = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	Возврат ОтветСервера;
КонецФункции

#КонецОбласти