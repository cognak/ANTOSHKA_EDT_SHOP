
//	LNK 05.08.2019 11:49:29
Функция ПривестиДату(Текст)	Экспорт

//	"1960/01/04 17:43:15"
//	Строка-параметр должна содержать дату в локальном формате даты или в каноническом виде YYYYMMDDHHMMSS
//	Может быть передана такая строка (как максимум): "2016/09/17 12:00:00 AM"

	Если НЕ ЗначениеЗаполнено(Текст) Тогда

		Текст = "";

	КонецЕсли;

	Параметр = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Текст, "/", ""), " ", ""), ":", ""), "AM", "");

	Возврат ?(ПустаяСтрока(Параметр), '00010101', Дата(Параметр));

КонецФункции

#Область ПоддержкаМеханизмаПолученияСкидокИзВнешнейСистемы

//	Процедуры вызываются из серверных процедур управляемы форм!
#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение Тогда

Функция ПодготовитьДанныеДокумента(Объект, ЗначенияРеквизитов)	Экспорт

	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("ДокументПродажи", ЗначенияРеквизитов.ДокументПродажи);
	ДанныеДокумента.Вставить("Контрагент"     , ЗначенияРеквизитов.Контрагент);
	ДанныеДокумента.Вставить("Магазин"        , ЗначенияРеквизитов.Магазин);
	ДанныеДокумента.Вставить("СкидочныеКупоны", ЗначенияРеквизитов.СкидочныеКупоны);
	ДанныеДокумента.Вставить("СуммаБонусБаза" , ЗначенияРеквизитов.БонусБазаСписать);
	ДанныеДокумента.Вставить("ИспользоватьБонусАкция", ЗначенияРеквизитов.ИспользоватьБонусАкция);
	ДанныеДокумента.Вставить("КупоныПринятые" , ЗначенияРеквизитов.КупоныПринятые);
	ДанныеДокумента.Вставить("КупоныВыданные" , ЗначенияРеквизитов.КупоныВыданные);

	ДанныеДокумента.Вставить("Товары", Новый ТаблицаЗначений);
	ДанныеДокумента.Товары.Колонки.Добавить("НомерСтроки"       , Новый ОписаниеТипов("Число"));
	ДанныеДокумента.Товары.Колонки.Добавить("Номенклатура"      , Новый ОписаниеТипов("СправочникСсылка.Номенклатура, СправочникСсылка.СерийныеНомера"));
	ДанныеДокумента.Товары.Колонки.Добавить("Упаковка"          , Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ДанныеДокумента.Товары.Колонки.Добавить("Количество"        , Новый ОписаниеТипов("Число"));
	ДанныеДокумента.Товары.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число"));
	ДанныеДокумента.Товары.Колонки.Добавить("Цена"              , Новый ОписаниеТипов("Число"));
	ДанныеДокумента.Товары.Колонки.Добавить("СуммаРучнойСкидки" , Новый ОписаниеТипов("Число"));
	ДанныеДокумента.Товары.Колонки.Добавить("АкционнаяЦена"     , Новый ОписаниеТипов("Булево"));

//	Таблицу "Товары" создаём не выгрузкой, а формированием таблицы (не выгрузкой) потому, что вместо номера строки
//	передаем её идентификатор.
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл

		СтрокаТаблицы = ДанныеДокумента.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаТабличнойЧасти);

		СтрокаТаблицы.НомерСтроки = СтрокаТабличнойЧасти.ПолучитьИдентификатор();

	КонецЦикла;
	
	СкидкиНаценкиСервер.ОтменитьАвтоматическиеСкидки(Объект, "Товары", Истина, Истина);
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Товары");
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

	Возврат ДанныеДокумента;

КонецФункции

Процедура ПрименитьДанныеРасчета(Объект, ДанныеРасчетаCRM, ДанныеДокумента)	Экспорт

	Для каждого ДанныеСтроки Из ДанныеРасчетаCRM.saleItems Цикл

		Если ДанныеСтроки.Свойство("relRowNum") И ДанныеСтроки.relRowNum >= 0 Тогда	// НЕ = (-1)

			СтрокаТоварыОригинал = Объект.Товары.НайтиПоИдентификатору(ДанныеСтроки.relRowNum);

			Если НЕ СтрокаТоварыОригинал = Неопределено Тогда

				СтрокаТабличнойЧасти = Объект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТоварыОригинал);
				СтрокаТабличнойЧасти.ИдентификаторКопии = ДанныеСтроки.relRowNum + 1;	//	увеличиваем на единицу, чтобы "пустой" был равен 0.

			Иначе

				СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ДанныеСтроки.rowNum);
				СтрокаТабличнойЧасти.ИдентификаторКопии = 0;

			КонецЕсли;

		Иначе

			СтрокаТоварыОригинал = Неопределено;
			СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ДанныеСтроки.rowNum);
			СтрокаТабличнойЧасти.ИдентификаторКопии = 0;

		КонецЕсли;

		СтрокаТабличнойЧасти.КоличествоУпаковок = ДанныеСтроки.amount;
		СтрокаТабличнойЧасти.Количество         = ДанныеСтроки.amount * ДанныеСтроки.coefficient;

		СтрокаТабличнойЧасти.БонусАкцияНачислен	= ДанныеСтроки.bonusesAccruedPromo;
		СтрокаТабличнойЧасти.БонусАкцияСписан	= ДанныеСтроки.bonusesUsedPromo;
		СтрокаТабличнойЧасти.БонусБазаНачислен	= ДанныеСтроки.bonusesAccruedBase;
		СтрокаТабличнойЧасти.БонусБазаСписан	= ДанныеСтроки.bonusesUsedBase;

		СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = ДанныеСтроки.discountHrn;
		СтрокаТабличнойЧасти.СуммаРучнойСкидки         = ДанныеСтроки.manualDiscHrn;

	//	Применение полученных скидок.
		СуммаБезСкидки            = СтрокаТабличнойЧасти.КоличествоУпаковок * СтрокаТабличнойЧасти.Цена;
		СуммаБонусовСписаннных    = СтрокаТабличнойЧасти.БонусАкцияСписан + СтрокаТабличнойЧасти.БонусБазаСписан;

		Если НЕ СуммаБезСкидки = 0 Тогда

			СтрокаТабличнойЧасти.ПроцентРучнойСкидки = 100 * СтрокаТабличнойЧасти.СуммаРучнойСкидки / СуммаБезСкидки;

		КонецЕсли;
		
		СуммаСкидки = СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки + СтрокаТабличнойЧасти.СуммаРучнойСкидки + СуммаБонусовСписаннных;
		
		СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = ?(СуммаБезСкидки = 0, 0, 100 * СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки / СуммаБезСкидки);
		
		СтрокаТабличнойЧасти.Сумма    = СуммаБезСкидки - ?(СуммаСкидки > СуммаБезСкидки, СуммаБезСкидки, СуммаСкидки);
		СтрокаТабличнойЧасти.СуммаНДС = СкидкиНаценкиСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.СтавкаНДС, Объект.ЦенаВключаетНДС);

		СтрокаТабличнойЧасти.ПродажаПодарка    = ДанныеСтроки.isPresent;
		СтрокаТабличнойЧасти.ПродажаПодаркаCRM = ДанныеСтроки.isPresent;

	КонецЦикла;

	Если НЕ ПустаяСтрока(ДанныеРасчетаCRM.АдресТаблицыСкидкиНаценки) Тогда

		ТаблицаСкидкиНаценки = ПолучитьИзВременногоХранилища(ДанныеРасчетаCRM.АдресТаблицыСкидкиНаценки);

		Для каждого СтрокаТаблицы Из ТаблицаСкидкиНаценки Цикл

			СтрокаТабличнойЧасти = Объект.СкидкиНаценки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы);

			СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(СтрокаТаблицы.Идентификатор);

			Если НЕ СтрокаТовары = Неопределено Тогда

				СтрокаТабличнойЧасти.КлючСвязи = СтрокаТовары.КлючСвязи;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если ДанныеДокумента.КупоныПринятые И НЕ ПустаяСтрока(ДанныеРасчетаCRM.АдресТаблицыПринятыхКупонов) Тогда

	//	.. предварительная инициализация флага
		Для каждого СтрокаТабличнойЧасти Из Объект.ПогашениеСкидочныхКупонов Цикл

			СтрокаТабличнойЧасти.Принят = Ложь;

		КонецЦикла;

		ТаблицаПринятыхКупонов = ПолучитьИзВременногоХранилища(ДанныеРасчетаCRM.АдресТаблицыПринятыхКупонов);

		Если ТипЗнч(ТаблицаПринятыхКупонов) = Тип("ТаблицаЗначений") Тогда

			Для каждого СтрокаТаблицы Из ТаблицаПринятыхКупонов Цикл

				СтрокиПогашения = Объект.ПогашениеСкидочныхКупонов.НайтиСтроки(Новый Структура("СерийныйНомер", СтрокаТаблицы.СерийныйНомер));

				Для каждого СтрокаТабличнойЧасти Из СтрокиПогашения Цикл

					СтрокаТабличнойЧасти.Принят = СтрокаТаблицы.Принят;

				КонецЦикла;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Если ДанныеДокумента.КупоныВыданные Тогда

		Объект.ВыдачаСкидочныхКупонов.Очистить();	//	.. контрольная очистка

		Если НЕ ПустаяСтрока(ДанныеРасчетаCRM.АдресТаблицыВыданныхКупонов) Тогда

			ТаблицаВыданныхКупонов = ПолучитьИзВременногоХранилища(ДанныеРасчетаCRM.АдресТаблицыВыданныхКупонов);

			Если ТипЗнч(ТаблицаВыданныхКупонов) = Тип("ТаблицаЗначений") Тогда

				Для каждого СтрокаТаблицы Из ТаблицаВыданныхКупонов Цикл

					СтрокаТабличнойЧасти = Объект.ВыдачаСкидочныхКупонов.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы);

				КонецЦикла;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Объект.СуммаДокумента  = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект.Товары, Объект.ЦенаВключаетНДС);
	Объект.БонусБазаСписан = Объект.Товары.Итог("БонусБазаСписан");
	Объект.СкидкиРассчитаны    = Истина;
	Объект.СкидкиРассчитаныCRM = Истина;

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

КонецПроцедуры


#КонецЕсли

#КонецОбласти