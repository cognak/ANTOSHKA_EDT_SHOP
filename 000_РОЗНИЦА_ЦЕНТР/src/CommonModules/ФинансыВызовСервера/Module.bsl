//	LNK 20.02.2017 11:25:49
Функция СписокДоступныхКасс(Пользователь = Неопределено, Организация = Неопределено, ВернутьСписокЗначений = Ложь)	Экспорт

	Возврат ФинансыСервер.СписокДоступныхКасс(Пользователь, Организация, ВернутьСписокЗначений);

КонецФункции // СписокДоступныхКасс()

//	LNK 23.03.2017 15:02:48
Функция СписокДоступныхРасчетныхСчетов(Организация, КассаИлиМагазин, ВернутьСписокЗначений = Ложь, ДатаДокумента= Неопределено)	Экспорт
	
	//А++ 20241127 по задаче занес проверку на дату закрытия счёта
	Возврат ФинансыСервер.СписокДоступныхРасчетныхСчетов(Организация, КассаИлиМагазин, ВернутьСписокЗначений, ДатаДокумента);

КонецФункции // СписокДоступныхРасчетныхСчетов()

//	LNK 20.02.2017 12:56:24
Функция ПолучитьКассуПоУмолчанию(Организация, Пользователь = Неопределено)	Экспорт

	СписокДоступныхКасс = ФинансыСервер.СписокДоступныхКасс(, Организация, Ложь);

	Если НЕ СписокДоступныхКасс.Количество() = 0 Тогда

		Касса = СписокДоступныхКасс[0];

	Иначе

		Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Организация,,,, Пользователи.ТекущийПользователь());

	КонецЕсли;

	Возврат Касса;

КонецФункции // ПолучитьКассуПоУмолчанию()

//	LNK 20.02.2017 13:08:19
Функция ПолучитьТекстПринятоОт(ПараметрСсылка)	Экспорт

	ПринятоОт = "";

	УстановитьПривилегированныйРежим(Истина);

	Если ТипЗнч(ПараметрСсылка) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТаблицаСправочник.Банк = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
		|			ТОГДА ТаблицаСправочник.КодБанка
		|		ИНАЧЕ ТаблицаСправочник.Банк.Код
		|	КОНЕЦ КАК МФО,
		|	ВЫБОР
		|		КОГДА ТаблицаСправочник.Банк = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
		|			ТОГДА ТаблицаСправочник.НаименованиеБанка
		|		ИНАЧЕ ТаблицаСправочник.Банк.Наименование
		|	КОНЕЦ КАК Наименование
		|ИЗ
		|	Справочник.БанковскиеСчетаОрганизаций КАК ТаблицаСправочник
		|ГДЕ
		|	ТаблицаСправочник.Ссылка = &ПараметрСсылка"
		);
		Запрос.УстановитьПараметр("ПараметрСсылка", ПараметрСсылка);

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда

			ПринятоОт = ?(НЕ ПустаяСтрока(Выборка.МФО), "(" + СокрЛП(Выборка.МФО) + ") ", "") + СокрЛП(Выборка.Наименование);

		КонецЕсли;

	КонецЕсли;

	Возврат ПринятоОт;

КонецФункции // ПолучитьТекстПринятоОт()

//	LNK 20.02.2017 13:26:17
Функция СписокПоследнихОснованийХозяйственнойОперации(Касса, ВидДокумента, ХозяйственнаяОперация)	Экспорт

	Возврат ФинансыСервер.СписокПоследнихОснованийХозяйственнойОперации(Касса, ВидДокумента, ХозяйственнаяОперация);

КонецФункции // СписокПоследнихОснованийХозяйственнойОперации()

//	LNK 20.02.2017 13:20:07
Функция ПолучитьТекстОснованиеПлатежа(Касса, ВидДокумента, ХозяйственнаяОперация)	Экспорт

	СписокОснований = ФинансыСервер.СписокПоследнихОснованийХозяйственнойОперации(Касса, ВидДокумента, ХозяйственнаяОперация);

	Если НЕ СписокОснований.Количество() = 0 Тогда

		Основание = СокрЛП(СписокОснований[0]);

	Иначе

		Основание = ФинансыПовтИсп.ТекстОснованияХозяйственнойОперации(ХозяйственнаяОперация);

	КонецЕсли;

	Возврат Основание;

КонецФункции // ПолучитьТекстОснованиеПлатежа()

//	LNK 20.02.2017 15:41:44
Функция СписокПоследнихОтветственныхЛиц(Касса, ВидДокумента, ОтветственноеЛицо)	Экспорт

	Возврат ФинансыСервер.СписокПоследнихОтветственныхЛиц(Касса, ВидДокумента, ОтветственноеЛицо);

КонецФункции // СписокПоследнихОтветственныхЛиц()

//	LNK 20.02.2017 16:02:05
Функция ПолучитьПоследнегоОтветственного(Касса, ВидДокумента, ОтветственноеЛицо)	Экспорт

	СписокОтветственных = ФинансыСервер.СписокПоследнихОтветственныхЛиц(Касса, ВидДокумента, ОтветственноеЛицо);

	Если НЕ СписокОтветственных.Количество() = 0 Тогда

		ОтветственноеЛицоОрганизации = СписокОтветственных[0];

	Иначе

		ОтветственноеЛицоОрганизации = Справочники.ФизическиеЛица.ПустаяСсылка();

	КонецЕсли;

	Возврат ОтветственноеЛицоОрганизации;

КонецФункции // ПолучитьПоследнегоОтветственного()

//	LNK 29.06.2017 11:14:54
Функция ПринятоОтОтветственного(Ответственный)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ФизическиеЛица.Наименование,
	|	ФизическиеЛица.НомерПаспорта,
	|	ФизическиеЛица.ДатаВыдачиПаспорта,
	|	ФизическиеЛица.КемВыданПаспорт
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &Ответственный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Пользователи.ФизЛицо.Наименование,
	|	Пользователи.ФизЛицо.НомерПаспорта,
	|	Пользователи.ФизЛицо.ДатаВыдачиПаспорта,
	|	Пользователи.ФизЛицо.КемВыданПаспорт
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Ответственный"
	);
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

		ТекстПринятоОт = СокрЛП(Выборка.Наименование) + ?(ПустаяСтрока(Выборка.НомерПаспорта)
			, ""
			, ". Паспорт серiя/номер: " + СокрЛП(Выборка.НомерПаспорта)
			+ ", виданий: " + Формат(Выборка.ДатаВыдачиПаспорта, "Л=uk_UA; ДЛФ=DD") + " " + СокрЛП(Выборка.КемВыданПаспорт));

	Иначе

		ТекстПринятоОт = "";

	КонецЕсли;

	Возврат ТекстПринятоОт;

КонецФункции // ПринятоОтОтветственного()

#Область ПроцедурыПоддержкиФункционалаБанковскиеУслуги	//	LNK 11.04.2018 08:37:40

//	LNK 10.07.2018 10:21:18
Функция УслугаБанкаСтруктураДанных()	Экспорт

	Возврат Справочники.УслугиБанка.РеквизитыУслуги(Неопределено, Неопределено);

КонецФункции

//	LNK 29.05.2020 09:22:26
Функция ТоварыПринадлежатУслугеБанка(СписокТоваров, УслугаБанка, ТекстСообщения)	Экспорт

	Отказ = (СписокТоваров.Количество() = 0);
	ТекстСообщения = "";

	Если НЕ Отказ Тогда

		УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСправочник.Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Справочник.Номенклатура КАК ТаблицаСправочник
		|ГДЕ
		|	ТаблицаСправочник.Ссылка В(&СписокТоваров)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Предоставление.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ Предоставление
		|ИЗ
		|	Справочник.УслугиБанка.НоменклатураПредоставления КАК Предоставление
		|ГДЕ
		|	Предоставление.Ссылка = &УслугаБанка
		|	И Предоставление.Номенклатура ССЫЛКА Справочник.Номенклатура
		|	И НЕ Предоставление.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаСегменты.Номенклатура
		|ИЗ
		|	Справочник.УслугиБанка.НоменклатураПредоставления КАК Предоставление
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК ТаблицаСегменты
		|		ПО Предоставление.Номенклатура = ТаблицаСегменты.Сегмент
		|ГДЕ
		|	Предоставление.Ссылка = &УслугаБанка
		|	И Предоставление.Номенклатура ССЫЛКА Справочник.СегментыНоменклатуры
		|	И НЕ ТаблицаСегменты.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Предоставление.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ Исключение
		|ИЗ
		|	Справочник.УслугиБанка.НоменклатураИсключения КАК Предоставление
		|ГДЕ
		|	Предоставление.Ссылка = &УслугаБанка
		|	И Предоставление.Номенклатура ССЫЛКА Справочник.Номенклатура
		|	И НЕ Предоставление.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаСегменты.Номенклатура
		|ИЗ
		|	Справочник.УслугиБанка.НоменклатураИсключения КАК Предоставление
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК ТаблицаСегменты
		|		ПО Предоставление.Номенклатура = ТаблицаСегменты.Сегмент
		|ГДЕ
		|	Предоставление.Ссылка = &УслугаБанка
		|	И Предоставление.Номенклатура ССЫЛКА Справочник.СегментыНоменклатуры
		|	И НЕ ТаблицаСегменты.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Ведущая.Номенклатура.Код КАК Код,
		|	Ведущая.Номенклатура КАК Номенклатура,
		|	""Не определён в программе"" КАК ТекстПроблемы
		|ИЗ
		|	Товары КАК Ведущая
		|		ЛЕВОЕ СОЕДИНЕНИЕ Предоставление КАК Предоставление
		|		ПО Ведущая.Номенклатура = Предоставление.Номенклатура
		|ГДЕ
		|	Предоставление.Номенклатура ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Ведущая.Номенклатура.Код,
		|	Ведущая.Номенклатура,
		|	""Запрещён к использованию в программе""
		|ИЗ
		|	Товары КАК Ведущая
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Предоставление КАК Предоставление
		|		ПО Ведущая.Номенклатура = Предоставление.Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Исключение КАК Исключение
		|		ПО Ведущая.Номенклатура = Исключение.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Предоставление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Исключение"
		);
		Запрос.УстановитьПараметр("СписокТоваров", СписокТоваров);
		Запрос.УстановитьПараметр("УслугаБанка"  , УслугаБанка);
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда

			Отказ   = Истина;
			Выборка = Запрос.Выполнить().Выбрать();

			Пока Выборка.Следующий() Цикл

				ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
				+ "[" + СокрЛП(Выборка.Код) + "] - " + Выборка.ТекстПроблемы;

			КонецЦикла;

		КонецЕсли;

	Иначе

		ТекстСообщения = "Нет определения товаров для предоставления кредитной программы";

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

//	LNK 12.10.2020 09:30:25
Функция СписокДоступныхУслугБанка(СписокТоваров, КассаККМ, ТипУслуги, ИнтернетБанкинг = Истина)	Экспорт

	СписокЭлементов = Новый Массив;

	Если НЕ СписокТоваров.Количество() = 0 Тогда

		Результат = РезультатЗапросаДоступныхУслугБанка(СписокТоваров, КассаККМ, ТипУслуги, ИнтернетБанкинг);
		ТаблицаЗначений = Результат.Выгрузить();
		ТаблицаЗначений.Индексы.Добавить("Номенклатура");

		Если НЕ ТаблицаЗначений.Количество() = 0 Тогда

		//	Теперь проверяем таблицу товаров.
		//	Если хоть один товар из "Источника" отсутствует в результате - значит, в таблице товаров присутствует товар,
		//	который не разрешен к запрашиваемому типу банковской услуги.

			ОчиститьРезультат = Ложь;

			Для каждого Номенклатура Из СписокТоваров Цикл

				Если ТаблицаЗначений.Найти(Номенклатура, "Номенклатура") = Неопределено Тогда

					ОчиститьРезультат = Истина;
					Прервать;

				КонецЕсли;

			КонецЦикла;

			Если НЕ ОчиститьРезультат Тогда

				Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

					Если СписокЭлементов.Найти(СтрокаТаблицы.УслугаБанка) = Неопределено Тогда

						СписокЭлементов.Добавить(СтрокаТаблицы.УслугаБанка);

					КонецЕсли;

				КонецЦикла;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат СписокЭлементов;

КонецФункции

//	LNK 11.04.2018 09:19:47
Функция ДоступнаяУслугаБанка(СписокТоваров, КассаККМ, ТипУслуги, ИнтернетБанкинг = Ложь, УсловиеОтказа = Ложь)	Экспорт

	ДанныеУслугаБанка = УслугаБанкаСтруктураДанных();

	Если НЕ СписокТоваров.Количество() = 0 И НЕ УсловиеОтказа = Истина Тогда

		УстановитьПривилегированныйРежим(Истина);
		
		Результат = РезультатЗапросаДоступныхУслугБанка(СписокТоваров, КассаККМ, ТипУслуги, ИнтернетБанкинг);
		ТаблицаЗначений = Результат.Выгрузить();
		ТаблицаЗначений.Индексы.Добавить("Номенклатура");

		Если НЕ ТаблицаЗначений.Количество() = 0 Тогда

		//	Теперь проверяем таблицу товаров.
		//	Если хоть один товар из "Источника" отсутствует в результате - значит, в таблице товаров присутствует товар,
		//	который не разрешен к запрашиваемому типу банковской услуги.
		//	Таблицу очищаем.

			ОчиститьРезультат = Ложь;

			Для каждого Номенклатура Из СписокТоваров Цикл

				СтрокаРезультата = ТаблицаЗначений.Найти(Номенклатура, "Номенклатура");

				Если ТипЗнч(СтрокаРезультата) = Тип("СтрокаТаблицыЗначений") Тогда

					ДанныеУслугаБанка.ТоварыДоступные.Добавить(
						Новый Структура(
							"Номенклатура, УслугаБанка"
							, СтрокаРезультата.Номенклатура
							, СтрокаРезультата.УслугаБанка
						)
					);

				Иначе

					ОчиститьРезультат = Истина;

				КонецЕсли;

			КонецЦикла;

			Если ОчиститьРезультат Тогда

				ТаблицаЗначений.Очистить();

			Иначе

			//	Все товары приняты к использованию.. в сортировке исходим из количества различных в "Источнике".
			//	Всё дело в следующем:
			//	Один товар - глубину кредита ("ПериодПредоставления") выбираем по MAX.
			//	Более одного товара - глубину кредита определяем по MIN.

				Если ТаблицаЗначений[0].КоличествоПозиций = 1 Тогда

						ТаблицаЗначений.Сортировать("ПериодПредоставления Убыв");

				Иначе	ТаблицаЗначений.Сортировать("ПериодПредоставления");

				КонецЕсли;

				ЗаполнитьЗначенияСвойств(ДанныеУслугаБанка, ТаблицаЗначений[0]);
				ДанныеУслугаБанка.СтараяСхемаКредита = Истина;	//	LNK 09.10.2020 05:26:40

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат ДанныеУслугаБанка;

КонецФункции

//	LNK 12.10.2020 09:17:25
Функция РезультатЗапросаДоступныхУслугБанка(СписокТоваров, КассаККМ, ТипУслуги, ИнтернетБанкинг)

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Ссылка В (&СписокТоваров)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуги.Ссылка КАК УслугаБанка,
	|	ТаблицаУслуги.ПериодПредоставления КАК ПериодПредоставления,
	|	ТаблицаПредоставления.Номенклатура КАК ПозицияПредоставления,
	|	ЕСТЬNULL(ТаблицаИсключения.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ПозицияИсключения,
	|	ТаблицаУслуги.ИспользоватьСкидкиНаценки КАК ИспользоватьСкидкиНаценки,
	|	ТаблицаУслуги.Наименование КАК Наименование,
	|	ТаблицаУслуги.ТипУслуги КАК ТипУслуги,
	|	ТаблицаУслуги.Эквайрер КАК Эквайрер,
	|	ТаблицаУслуги.Описание КАК Описание,
	|	ТаблицаУслуги.ВсеТовары КАК ВсеТовары
	|ПОМЕСТИТЬ УслугиБанка
	|ИЗ
	|	Справочник.УслугиБанка КАК ТаблицаУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УслугиБанка.НоменклатураПредоставления КАК ТаблицаПредоставления
	|		ПО ТаблицаУслуги.Ссылка = ТаблицаПредоставления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиБанка.НоменклатураИсключения КАК ТаблицаИсключения
	|		ПО ТаблицаУслуги.Ссылка = ТаблицаИсключения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТаблицаТерминалы.Владелец.Эквайрер КАК Эквайрер
	|		ИЗ
	|			Справочник.ЭквайринговыеТерминалы КАК ТаблицаТерминалы
	|		ГДЕ
	|			ТаблицаТерминалы.Касса = &КассаККМ
	|			И НЕ ТаблицаТерминалы.ПометкаУдаления) КАК ФильтрБанков
	|		ПО ТаблицаУслуги.Эквайрер = ФильтрБанков.Эквайрер
	|ГДЕ
	|	НЕ (ТаблицаУслуги.ПометкаУдаления
	|	ИЛИ ТаблицаУслуги.Блокирован)
	|	И ТаблицаУслуги.ТипУслуги = &ТипУслуги
	|	И ВЫБОР
	|		КОГДА &ИнтернетБанкинг = ИСТИНА
	|			ТОГДА НЕ ЕСТЬNULL(ТаблицаУслуги.Банк.ТипИнтернетБанкинга,
	|				ЗНАЧЕНИЕ(Перечисление.ТипыИнтернетБанкинга.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыИнтернетБанкинга.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаУслуги.Банк.ТипИнтернетБанкинга,
	|			ЗНАЧЕНИЕ(Перечисление.ТипыИнтернетБанкинга.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыИнтернетБанкинга.ПустаяСсылка)
	|	КОНЕЦ
	|	И ВЫБОР
	|		КОГДА &КассаККМ = НЕОПРЕДЕЛЕНО
	|		ИЛИ &КассаККМ = ЗНАЧЕНИЕ(Справочник.КассыККМ.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ФильтрБанков.Эквайрер ЕСТЬ НЕ NULL
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПозицияПредоставления,
	|	ПозицияИсключения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УслугиБанка.УслугаБанка КАК УслугаБанка,
	|	УслугиБанка.ПозицияИсключения КАК Сегмент,
	|	Товары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ Исключить
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УслугиБанка КАК УслугиБанка
	|		ПО УслугиБанка.ПозицияИсключения ССЫЛКА Справочник.СегментыНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК СоставСегментов
	|		ПО УслугиБанка.ПозицияИсключения = СоставСегментов.Сегмент
	|		И Товары.Номенклатура = СоставСегментов.Номенклатура
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УслугиБанка.УслугаБанка,
	|	ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка),
	|	УслугиБанка.ПозицияИсключения
	|ИЗ
	|	УслугиБанка КАК УслугиБанка
	|ГДЕ
	|	УслугиБанка.ПозицияИсключения ССЫЛКА Справочник.Номенклатура
	|	И НЕ УслугиБанка.ПозицияИсключения = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Предоставить.УслугаБанка КАК УслугаБанка,
	|	Предоставить.ПериодПредоставления КАК ПериодПредоставления,
	|	Предоставить.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(Счётчик.КоличествоПозиций, 0) КАК КоличествоПозиций,
	|	Предоставить.Наименование КАК Наименование,
	|	Предоставить.ТипУслуги КАК ТипУслуги,
	|	Предоставить.ИспользоватьСкидкиНаценки КАК ИспользоватьСкидкиНаценки,
	|	Предоставить.Эквайрер КАК Эквайрер,
	|	Предоставить.Описание КАК Описание,
	|	ИСТИНА КАК Проверено,
	|	0 КАК СуммаДокумента,
	|	0 КАК СуммаКредита,
	|	0 КАК СуммаКредитаВозврат
	|ИЗ
	|	(ВЫБРАТЬ
	|		УслугиБанка.УслугаБанка КАК УслугаБанка,
	|		УслугиБанка.ПериодПредоставления КАК ПериодПредоставления,
	|		УслугиБанка.ПозицияПредоставления КАК Сегмент,
	|		Товары.Номенклатура КАК Номенклатура,
	|		УслугиБанка.Наименование КАК Наименование,
	|		УслугиБанка.ТипУслуги КАК ТипУслуги,
	|		УслугиБанка.ИспользоватьСкидкиНаценки КАК ИспользоватьСкидкиНаценки,
	|		УслугиБанка.Эквайрер КАК Эквайрер,
	|		УслугиБанка.Описание КАК Описание
	|	ИЗ
	|		Товары КАК Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ УслугиБанка КАК УслугиБанка
	|			ПО УслугиБанка.ПозицияПредоставления ССЫЛКА Справочник.СегментыНоменклатуры
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК СоставСегментов
	|			ПО УслугиБанка.ПозицияПредоставления = СоставСегментов.Сегмент
	|			И Товары.Номенклатура = СоставСегментов.Номенклатура
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		УслугиБанка.УслугаБанка,
	|		УслугиБанка.ПериодПредоставления,
	|		УслугиБанка.ПозицияПредоставления,
	|		Товары.Номенклатура,
	|		УслугиБанка.Наименование,
	|		УслугиБанка.ТипУслуги,
	|		УслугиБанка.ИспользоватьСкидкиНаценки,
	|		УслугиБанка.Эквайрер,
	|		УслугиБанка.Описание
	|	ИЗ
	|		Товары КАК Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ УслугиБанка КАК УслугиБанка
	|			ПО УслугиБанка.ВсеТовары
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		УслугиБанка.УслугаБанка,
	|		УслугиБанка.ПериодПредоставления,
	|		ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка),
	|		УслугиБанка.ПозицияПредоставления,
	|		УслугиБанка.Наименование,
	|		УслугиБанка.ТипУслуги,
	|		УслугиБанка.ИспользоватьСкидкиНаценки,
	|		УслугиБанка.Эквайрер,
	|		УслугиБанка.Описание
	|	ИЗ
	|		Товары КАК Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ УслугиБанка КАК УслугиБанка
	|			ПО УслугиБанка.ПозицияПредоставления ССЫЛКА Справочник.Номенклатура
	|			И Товары.Номенклатура = УслугиБанка.ПозицияПредоставления) КАК Предоставить
	|		ЛЕВОЕ СОЕДИНЕНИЕ Исключить КАК Исключить
	|		ПО Предоставить.УслугаБанка = Исключить.УслугаБанка
	|		И Предоставить.Номенклатура = Исключить.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Номенклатура) КАК КоличествоПозиций
	|		ИЗ
	|			Товары КАК Товары) КАК Счётчик
	|		ПО ИСТИНА
	|ГДЕ
	|	Исключить.Номенклатура ЕСТЬ NULL"
	);
	Запрос.УстановитьПараметр("СписокТоваров"	, СписокТоваров);
	Запрос.УстановитьПараметр("ТипУслуги"		, ТипУслуги);
	Запрос.УстановитьПараметр("КассаККМ"		, КассаККМ);
	Запрос.УстановитьПараметр("ИнтернетБанкинг"	, ИнтернетБанкинг);

	Возврат Запрос.Выполнить();

КонецФункции

//	LNK 10.07.2018 10:22:55
Функция ПолучитьДанныеУслугаБанка(УслугаБанка, СчетНаОплатуПокупателю = Неопределено)	Экспорт

	ДанныеУслугаБанка = УслугаБанкаСтруктураДанных();

	Если ЗначениеЗаполнено(УслугаБанка) Тогда

		ЗаполнитьЗначенияСвойств(ДанныеУслугаБанка, Справочники.УслугиБанка.РеквизитыУслуги(УслугаБанка, СчетНаОплатуПокупателю));

	КонецЕсли;

	Возврат ДанныеУслугаБанка;

КонецФункции

//	LNK 03.06.2020 10:47:33
Функция ПолучитьУтвержденнуюСуммуКредита(СчетНаОплатуПокупателю, УслугаБанка)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаРегистра.СуммаКредита КАК СуммаКредита
	|ИЗ
	|	РегистрСведений.ДанныеКредитныхПрограмм КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.СчетНаОплатуПокупателю = &СчетНаОплатуПокупателю
	|	И ТаблицаРегистра.УслугаБанка = &УслугаБанка"
	);
	Запрос.УстановитьПараметр("СчетНаОплатуПокупателю", СчетНаОплатуПокупателю);
	Запрос.УстановитьПараметр("УслугаБанка", УслугаБанка);
	
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		Выборка = Результат.Выбрать();
		Выборка.Следующий();

		СуммаКредита = Выборка.СуммаКредита;

	Иначе

		СуммаКредита = 0;

	КонецЕсли;

	Возврат СуммаКредита;

КонецФункции

//	LNK 04.06.2020 08:45:07
Функция ПодтверждениеВыдачиТовараКлиенту(СчетНаОплатуПокупателю, УслугаБанка)	Экспорт

	Возврат ОбменСБанкамиСервер.ПодтверждениеВыдачиТовараКлиенту(СчетНаОплатуПокупателю, УслугаБанка);

КонецФункции

#КонецОбласти




