
////////////////////////////////////////////////////////////////////////////////
// Обмен Управление торговлей для Украины 3.0 - Розница для Украины 2.0 

// Процедура-обработчик события "ПередЗаписью" ссылочных типов данных (кроме документов) для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - источник события, кроме типа ДокументОбъект
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура ОбменДаннымиОбменУправлениеТорговлейРозницаПередЗаписью(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("ОбменУправлениеТорговлейРозница", Источник, Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - ДокументОбъект - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура ОбменДаннымиОбменУправлениеТорговлейРозницаПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента("ОбменУправлениеТорговлейРозница", Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

// Процедура-обработчик события "ПередУдалением" ссылочных типов данных для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура ОбменДаннымиОбменУправлениеТорговлейРозницаПередУдалением(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередУдалением("ОбменУправлениеТорговлейРозница", Источник, Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" регистров для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - НаборЗаписейРегистра - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
//  Замещение      - Булево - признак замещения существующего набора записей
// 
Процедура ОбменДаннымиОбменУправлениеТорговлейРозницаПередЗаписьюРегистра(Источник, Отказ, Замещение) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра("ОбменУправлениеТорговлейРозница", Источник, Отказ, Замещение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обмен Розница для Украины 2.0 - Бухгалтерия для Украины 1.2 

// Процедура-обработчик события "ПередЗаписью" ссылочных типов данных (кроме документов) для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - источник события, кроме типа ДокументОбъект
//  Отказ          - Булево - флаг отказа от выполнения обработчика
//
Процедура ОбменДаннымиОбменРозницаБухгалтерияПередЗаписью(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("ОбменРозницаБухгалтерия", Источник, Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - ДокументОбъект - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура ОбменДаннымиОбменРозницаБухгалтерияПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента("ОбменРозницаБухгалтерия", Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

// Процедура-обработчик события "ПередУдалением" ссылочных типов данных для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура ОбменДаннымиОбменРозницаБухгалтерияПередУдалением(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередУдалением("ОбменРозницаБухгалтерия", Источник, Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" регистров для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - НаборЗаписейРегистра - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
//  Замещение      - Булево - признак замещения существующего набора записей
// 
Процедура ОбменДаннымиОбменРозницаБухгалтерияПередЗаписьюРегистра(Источник, Отказ, Замещение) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра("ОбменРозницаБухгалтерия", Источник, Отказ, Замещение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обмен ПоМагазину (и ПоМагазинуКонвертация) 

// Процедура-обработчик события "ПередЗаписью" ссылочных типов данных (кроме документов) для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - источник события, кроме типа ДокументОбъект
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура ОбменДаннымиПоМагазинуПередЗаписью(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("ПоМагазину", Источник, Отказ);

	Если ОбменДаннымиПовтИсп.ИспользоватьПоМагазинуКонвертация() Тогда

		Если ОбменДаннымиПовтИсп.ПланОбменаСодержитОбъект("ПоМагазинуКонвертация", Источник.Метаданные().ПолноеИмя()) Тогда

			ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("ПоМагазинуКонвертация", Источник, Отказ);

		Иначе

			ЖурналСобытий.Регистрация("Регистрация.ПоМагазинуКонвертация", УровеньЖурналаРегистрации.Предупреждение
				, Источник.Метаданные()
				, Источник.Ссылка
				,
				, "План обмена НЕ содержит объект метаданных"
				, СокрЛП(Источник)
				, Истина
			);

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - ДокументОбъект - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура ОбменДаннымиПоМагазинуПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента("ПоМагазину", Источник, Отказ, РежимЗаписи, РежимПроведения);

	Если ОбменДаннымиПовтИсп.ИспользоватьПоМагазинуКонвертация() Тогда

		Если ОбменДаннымиПовтИсп.ПланОбменаСодержитОбъект("ПоМагазинуКонвертация", Источник.Метаданные().ПолноеИмя()) Тогда

			ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента("ПоМагазинуКонвертация", Источник, Отказ, РежимЗаписи, РежимПроведения);

		Иначе

			ЖурналСобытий.Регистрация("Регистрация.ПоМагазинуКонвертация", УровеньЖурналаРегистрации.Предупреждение
				, Источник.Метаданные()
				, Источник.Ссылка
				,
				, "План обмена НЕ содержит объект метаданных"
				, СокрЛП(Источник)
				, Истина
			);

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" константы для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - КонстантаМенеджерЗначения - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура ОбменДаннымиПоМагазинуПередЗаписьюКонстанты(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюКонстанты("ПоМагазину", Источник, Отказ);

	Если ОбменДаннымиПовтИсп.ИспользоватьПоМагазинуКонвертация() Тогда

		Если ОбменДаннымиПовтИсп.ПланОбменаСодержитОбъект("ПоМагазинуКонвертация", Источник.Метаданные().ПолноеИмя()) Тогда

			ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюКонстанты("ПоМагазинуКонвертация", Источник, Отказ);

		Иначе

			ЖурналСобытий.Регистрация("Регистрация.ПоМагазинуКонвертация", УровеньЖурналаРегистрации.Предупреждение
				, Источник.Метаданные()
				,
				,
				,"План обмена НЕ содержит объект метаданных"
				, СокрЛП(Источник)
				, Истина
			);

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" регистров для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - НаборЗаписейРегистра - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
//  Замещение      - Булево - признак замещения существующего набора записей
// 
Процедура ОбменДаннымиПоМагазинуПередЗаписьюРегистра(Источник, Отказ, Замещение) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра("ПоМагазину", Источник, Отказ, Замещение);

	Если ОбменДаннымиПовтИсп.ИспользоватьПоМагазинуКонвертация() Тогда

		Если ОбменДаннымиПовтИсп.ПланОбменаСодержитОбъект("ПоМагазинуКонвертация", Источник.Метаданные().ПолноеИмя()) Тогда

			ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра("ПоМагазинуКонвертация", Источник, Отказ, Замещение);

		Иначе

			ЖурналСобытий.Регистрация("Регистрация.ПоМагазинуКонвертация", УровеньЖурналаРегистрации.Предупреждение
				, Источник.Метаданные()
				,
				,
				, "План обмена НЕ содержит объект метаданных"
				, СокрЛП(Источник)
				, Истина
			);

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события "ПередУдалением" ссылочных типов данных для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура ОбменДаннымиПоМагазинуПередУдалением(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередУдалением("ПоМагазину", Источник, Отказ);

	Если ОбменДаннымиПовтИсп.ИспользоватьПоМагазинуКонвертация() Тогда

		Если ОбменДаннымиПовтИсп.ПланОбменаСодержитОбъект("ПоМагазинуКонвертация", Источник.Метаданные().ПолноеИмя()) Тогда

			ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередУдалением("ПоМагазинуКонвертация", Источник, Отказ);

		Иначе

			ЖурналСобытий.Регистрация("Регистрация.ПоМагазинуКонвертация", УровеньЖурналаРегистрации.Предупреждение
				, Источник.Метаданные()
				, Источник.Ссылка
				,
				, "План обмена НЕ содержит объект метаданных"
				, СокрЛП(Источник)
				, Истина
			);

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обмен ПоРабочемуМесту 

// Процедура-обработчик события "ПередЗаписью" ссылочных типов данных (кроме документов) для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - источник события, кроме типа ДокументОбъект
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура ОбменДаннымиПоРабочемуМестуПередЗаписью(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("ПоРабочемуМесту", Источник, Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - ДокументОбъект - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура ОбменДаннымиПоРабочемуМестуПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента("ПоРабочемуМесту", Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" константы для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - КонстантаМенеджерЗначения - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура ОбменДаннымиПоРабочемуМестуПередЗаписьюКонстанты(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюКонстанты("ПоРабочемуМесту", Источник, Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" регистров для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - НаборЗаписейРегистра - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
//  Замещение      - Булево - признак замещения существующего набора записей
// 
Процедура ОбменДаннымиПоРабочемуМестуПередЗаписьюРегистра(Источник, Отказ, Замещение) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра("ПоРабочемуМесту", Источник, Отказ, Замещение);
	
КонецПроцедуры

// Процедура-обработчик события "ПередУдалением" ссылочных типов данных для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура ОбменДаннымиПоРабочемуМестуПередУдалением(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередУдалением("ПоРабочемуМесту", Источник, Отказ);
	
КонецПроцедуры

// Процедура производит запись в регистр обновленных параметров обмена между узлами
//
Процедура ПриЗаписиСценарияОбмена(Источник, Отказ) Экспорт
	
	ПланыОбмена.ПоРабочемуМесту.ПриЗаписиСценарияОбмена(Источник, Отказ);
	
КонецПроцедуры	
	
// Процедура производит запись в регистр обновленных параметров обмена между узлами
//
Процедура ПриЗаписиТранспортаОбмена(Источник, Отказ, Замещение) Экспорт
	
	ПланыОбмена.ПоРабочемуМесту.ПриЗаписиТранспортаОбмена(Источник, Отказ);
	
КонецПроцедуры	

#Область ПодпискиНаСобытияПланаОбменаПолный	//	LNK 28.08.2019 14:02:16

Процедура ОбменДаннымиПолныйПередЗаписью(Источник, Отказ) Экспорт

	Если ОбменДаннымиПовтИсп.ИспользоватьПолный(Истина) Тогда

		Если ОбменДаннымиПовтИсп.ПланОбменаСодержитОбъект("Полный", Источник.Метаданные().ПолноеИмя()) Тогда

			ЗначениеКлюча = Новый Структура("Ключ, Значение");
			ПроверитьОтключениеМеханизмаРегистрации(Источник, ЗначениеКлюча);

			ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("Полный", Источник, Отказ);

			ПроверитьОтключениеМеханизмаРегистрации(Источник, ЗначениеКлюча);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ОбменДаннымиПолныйПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	Если ОбменДаннымиПовтИсп.ИспользоватьПолный(Истина) Тогда

		Если ОбменДаннымиПовтИсп.ПланОбменаСодержитОбъект("Полный", Источник.Метаданные().ПолноеИмя()) Тогда

			ЗначениеКлюча = Новый Структура("Ключ, Значение");
			ПроверитьОтключениеМеханизмаРегистрации(Источник, ЗначениеКлюча);

			ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента("Полный", Источник, Отказ, РежимЗаписи, РежимПроведения);

			ПроверитьОтключениеМеханизмаРегистрации(Источник, ЗначениеКлюча);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ОбменДаннымиПолныйПередЗаписьюКонстанты(Источник, Отказ) Экспорт

	Если ОбменДаннымиПовтИсп.ИспользоватьПолный(Истина) Тогда

		Если ОбменДаннымиПовтИсп.ПланОбменаСодержитОбъект("Полный", Источник.Метаданные().ПолноеИмя()) Тогда

			ЗначениеКлюча = Новый Структура("Ключ, Значение");
			ПроверитьОтключениеМеханизмаРегистрации(Источник, ЗначениеКлюча);

			ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюКонстанты("Полный", Источник, Отказ);

			ПроверитьОтключениеМеханизмаРегистрации(Источник, ЗначениеКлюча);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ОбменДаннымиПолныйПередЗаписьюРегистра(Источник, Отказ, Замещение) Экспорт

	Если ОбменДаннымиПовтИсп.ИспользоватьПолный(Истина) Тогда

		Если ОбменДаннымиПовтИсп.ПланОбменаСодержитОбъект("Полный", Источник.Метаданные().ПолноеИмя()) Тогда

			ЗначениеКлюча = Новый Структура("Ключ, Значение");
			ПроверитьОтключениеМеханизмаРегистрации(Источник, ЗначениеКлюча);

			ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра("Полный", Источник, Отказ, Замещение);

			ПроверитьОтключениеМеханизмаРегистрации(Источник, ЗначениеКлюча);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ОбменДаннымиПолныйПередУдалением(Источник, Отказ) Экспорт

	Если ОбменДаннымиПовтИсп.ИспользоватьПолный(Истина) Тогда

		Если ОбменДаннымиПовтИсп.ПланОбменаСодержитОбъект("Полный", Источник.Метаданные().ПолноеИмя()) Тогда

			ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередУдалением("Полный", Источник, Отказ);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 04.09.2019 07:05:50
Процедура ПроверитьОтключениеМеханизмаРегистрации(Источник, ЗначениеКлюча)

	Если ЗначениеКлюча.Ключ = Неопределено Тогда

		КлючСтандартный = "ОтключитьМеханизмРегистрацииОбъектов";

		Если Источник.ДополнительныеСвойства.Свойство(КлючСтандартный) Тогда

			ЗначениеКлюча.Ключ     = КлючСтандартный;
			ЗначениеКлюча.Значение = Источник.ДополнительныеСвойства[КлючСтандартный];
			Источник.ДополнительныеСвойства.Удалить(КлючСтандартный);

		КонецЕсли;

	Иначе

		Источник.ДополнительныеСвойства.Вставить(ЗначениеКлюча.Ключ, ЗначениеКлюча.Значение);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти







