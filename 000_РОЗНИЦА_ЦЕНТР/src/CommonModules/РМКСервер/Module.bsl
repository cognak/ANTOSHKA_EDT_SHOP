#Область ОпределениеКассККМ			//	LNK 03.01.2024 07:50:50

//	LNK 03.01.2024 07:51:29
Функция ПолучитьТаблицуКассПоРабочемуМесту(РабочееМесто, Магазин)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСправочник.Ссылка КАК КассаККМ,
	|	ТаблицаСправочник.Владелец КАК Организация,
	|	ЗНАЧЕНИЕ(Документ.КассоваяСмена.ПустаяСсылка) КАК КассоваяСмена
	|ИЗ
	|	Справочник.КассыККМ КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.РабочееМесто = &РабочееМесто
	|	И ТаблицаСправочник.Владелец = &Организация
	|	И ТаблицаСправочник.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
	|	И НЕ ТаблицаСправочник.ПометкаУдаления
	|	И (ТаблицаСправочник.Магазин = &Магазин
	|			ИЛИ &Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))"
	);
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("Организация"	, ПараметрыСеанса.ТекущаяОрганизация);
	Запрос.УстановитьПараметр("Магазин"		, Магазин);
	
	ТаблицаКассККМ = Запрос.Выполнить().Выгрузить();

	Для каждого СтрокаТаблицы Из ТаблицаКассККМ Цикл

		СтрокаТаблицы.КассоваяСмена = РозничныеПродажиСервер.ПолучитьОткрытуюКассовуюСмену(
			  СтрокаТаблицы.КассаККМ
			,
			, НачалоДня(ТекущаяДата())
			, '00010101'
		);

	КонецЦикла;

	Возврат ТаблицаКассККМ;

КонецФункции

#КонецОбласти

#Область ПоддержкаРаботыСКупонами	//	LNK 06.09.2021 08:03:09

Функция ПолучитьШаблонЧека(Шаблон)	Экспорт

	СтрокиШаблона = Новый Массив;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.QRкод КАК QRкод,
	|	ТабличнаяЧасть.Строка КАК СтрокаТекста
	|ИЗ
	|	Справочник.ШаблоныЧеков.СтрокиПодвала КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Шаблон"
	);
	Запрос.УстановитьПараметр("Шаблон", Шаблон);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() цикл

			СтрокиШаблона.Добавить(Новый Структура(
				"QRкод, СтрокаТекста"
				, Выборка.QRкод, СокрЛП(Выборка.СтрокаТекста))
			);

		КонецЦикла;

	КонецЕсли;

	Возврат СтрокиШаблона;

КонецФункции

#КонецОбласти

//	LNK 08.03.2024 13:38:06
Функция ВходныеПараметрыПолучить(ДокументСсылка, ПараметрыВызова, ПараметрыКассыККМ, ВызовИзРМК)	Экспорт

	ДополнительныеПараметры = Новый Структура(
		"ВладелецКарты, КодКарты, СуммаПокупок, БонусныйСчет, ПараметрыКассыККМ, ВызовИзРМК"
		, ПараметрыВызова.ВладелецКарты
		, ПараметрыВызова.КодКарты
		, ПараметрыВызова.СуммаПокупок
		, ПараметрыВызова.БонусныйСчет
		, ПараметрыКассыККМ
		, ВызовИзРМК
	);

	Возврат Документы.ЧекККМ.ВходныеПараметрыПолучить(ДокументСсылка, ДополнительныеПараметры);
//	LNK 30.03.2023 07:25:19 - Примечание:
//	"ПараметрыКассыККМ" - ВходныеПараметры[2][21]

КонецФункции

Функция ЗаписатьФискальныйНомер(СтруктураККМ, УИД) Экспорт
	Попытка
		ЧекККМ = Документы.ЧекККМ.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
	Исключение
		Возврат Новый Структура("Успешно,ОписаниеОшибки",Ложь,"Не знайшов чека з УИД "+УИД);
	КонецПопытки;
	ФН = "";
	Если СтруктураККМ.Свойство("ФискальныйНомер") И СтруктураККМ.Свойство("ФискальныйРегистратор") Тогда
		ФН = СтруктураККМ.ФискальныйНомер;
		ФР = СтруктураККМ.ФискальныйРегистратор;
	Иначе
		Возврат Новый Структура("Успешно,ОписаниеОшибки",Ложь,"Відповідь фіскального реєстратора не містить фіскального номера чека");
	КонецЕсли;
	
	СтруктураОтвета = Документы.ЧекККМ.ЗаписатьФискальныйНомер(ЧекККМ,ФН,ФР);
	
	Возврат СтруктураОтвета;
КонецФункции

//2025-01-27 Sa Проверяем рабочая ли это база (пока только по идентификатору)
Функция ЭтоРабочаяБаза() Экспорт
	Возврат ВРЕГ(Константы.ИдентификаторУчетнойСистемы) = "ANTOSHKA";
КонецФункции 


Процедура Логирование(СтруктураДанных) Экспорт 
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	Если СтруктураДанных.Свойство("Данные") Тогда
		Данные = СтруктураДанных.Данные;
	Иначе
		Данные = "";
	КонецЕсли;
	Если СтруктураДанных.Свойство("ОбъектМетаданных") Тогда
		ОбъектМетаданных = СтруктураДанных.ОбъектМетаданных;
	Иначе
		ОбъектМетаданных = "";	
	КонецЕсли;
	Если СтруктураДанных.Свойство("ДанныеПредставление") Тогда
		ДанныеПредставление = СтруктураДанных.ДанныеПредставление;
	Иначе
		ДанныеПредставление = "";
	КонецЕсли;
	Если СтруктураДанных.Свойство("Комментарий") Тогда
		Комментарий = СтруктураДанных.Комментарий;
	Иначе
		Комментарий = "";
	КонецЕсли;
	Если СтруктураДанных.Свойство("Событие") Тогда
		Событие = СтруктураДанных.Событие;
	Иначе
		Событие = "UNKNOWN_EVENT";	
	КонецЕсли;
	Если СтруктураДанных.Свойство("Уровень") Тогда
		Уровень = СтруктураДанных.Уровень;
	Иначе
		Уровень = Перечисления.УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	Попытка
		ДанныеСтрокой = ОбменWebRetailСервер.СтруктуруВТекстДЖСОН(СтруктураДанных);
		ДанныеХранилища = Новый ХранилищеЗначения(ДанныеСтрокой, Новый СжатиеДанных(9));
	Исключение
		ДанныеХранилища = Новый ХранилищеЗначения(СтруктураДанных, Новый СжатиеДанных(9));
	КонецПопытки;
	
	ЖурналСобытий.Регистрация(Событие,Уровень,ОбъектМетаданных,Данные,ДанныеХранилища,Комментарий,ДанныеПредставление,Истина,Ложь);
	
КонецПроцедуры
