#Область ОбщийИнтерфейс

Функция ПолучитьДанныеПрограммы(КредитнаяПрограмма)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСТИНА КАК Найден,
	|	ТаблицаУслуги.Ссылка КАК УслугаБанка,
	|	ЕСТЬNULL(КлассификаторБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)) КАК Банк,
	|	ЕСТЬNULL(КлассификаторБанков.ТипИнтернетБанкинга, ЗНАЧЕНИЕ(Перечисление.ТипыИнтернетБанкинга.ПустаяСсылка)) КАК ТипИнтернетБанкинга,
	|	ЕСТЬNULL(ТабличнаяЧасть.Адрес, """") КАК Адрес,
	|	ЕСТЬNULL(ТабличнаяЧасть.Идентификатор, """") КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КлассификаторБанков.Интеграция, ЛОЖЬ)
	|			ТОГДА ЕСТЬNULL(ТабличнаяЧасть.ТипУслуги = ТаблицаУслуги.ТипУслуги, ЛОЖЬ)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Интеграция,
	|	ТаблицаУслуги.ТипУслуги КАК ТипУслуги,
	|	ТаблицаУслуги.ПериодПредоставления КАК ПериодПредоставления,
	|	ТаблицаУслуги.ИспользоватьСкидкиНаценки КАК ИспользоватьСкидкиНаценки,
	|	ЕСТЬNULL(ТабличнаяЧасть.Ключ, """") КАК Ключ
	|ИЗ
	|	Справочник.УслугиБанка КАК ТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков.АдресацияAPI КАК ТабличнаяЧасть
	|			ПО КлассификаторБанков.Ссылка = ТабличнаяЧасть.Ссылка
	|				И (ТабличнаяЧасть.Активен)
	|				И (КлассификаторБанков.Интеграция)
	|		ПО ТаблицаУслуги.Банк = КлассификаторБанков.Ссылка
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &КредитнаяПрограмма"
	);
	Запрос.УстановитьПараметр("КредитнаяПрограмма", КредитнаяПрограмма);
	
	Результат = Запрос.Выполнить();

	ДанныеСоединения = ПодарочныеСертификатыСервер.СтруктураРезультатаЗапроса(Результат, Ложь);

	Если НЕ Результат.Пустой() Тогда

		Выборка = Результат.Выбрать();
		Выборка.Следующий();

		ЗаполнитьЗначенияСвойств(ДанныеСоединения, Выборка);

	КонецЕсли;
	
	Возврат ДанныеСоединения;

КонецФункции

Функция ДанныеЗаказаПокупателя(СчетПокупателюСсылка, КредитнаяПрограмма) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Номер КАК Номер,
	|	ТаблицаДокумента.Дата КАК Дата,
	|	ТаблицаОписатель.Идентификатор КАК Идентификатор,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.НомерТелефона КАК НомерТелефона,
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ТаблицаОписатель.СуммаКредита КАК СуммаКредита,
	|	ТаблицаДокумента.УчитыватьНДС КАК УчитыватьНДС,
	|	ТаблицаДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ТаблицаСклады.IDN КАК IDN,
	|	ЕСТЬNULL(ТаблицаКонтактыОтветственного.НомерТелефона, """") КАК НомерТелефонаПродавца,
	|	ТаблицаОписатель.ИдентификаторВозврата КАК ИдентификаторВозврата,
	|	ТаблицаМагазины.Код КАК Код
	|ПОМЕСТИТЬ Шапка
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаСклады
	|		ПО ТаблицаДокумента.Магазин.СкладПродажи = ТаблицаСклады.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ТаблицаКонтактыОтветственного
	|		ПО ТаблицаДокумента.Ответственный.ФизЛицо = ТаблицаКонтактыОтветственного.Ссылка
	|			И (ТаблицаКонтактыОтветственного.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонФизическогоЛица))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеКредитныхПрограмм КАК ТаблицаОписатель
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаОписатель.СчетНаОплатуПокупателю
	|			И (ТаблицаОписатель.УслугаБанка = &КредитнаяПрограмма)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Магазины КАК ТаблицаМагазины
	|		ПО ТаблицаДокумента.Магазин = ТаблицаМагазины.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ТекущийДокумент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Ссылка КАК Ссылка,
	|	Шапка.Номер КАК Номер,
	|	Шапка.Дата КАК Дата,
	|	Шапка.Идентификатор КАК Идентификатор,
	|	Шапка.Контрагент КАК Контрагент,
	|	Шапка.НомерТелефона КАК НомерТелефона,
	|	Шапка.СуммаДокумента КАК СуммаДокумента,
	|	Шапка.СуммаКредита КАК СуммаКредита,
	|	Шапка.УчитыватьНДС КАК УчитыватьНДС,
	|	Шапка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	Шапка.IDN КАК IDN,
	|	Шапка.НомерТелефонаПродавца КАК НомерТелефонаПродавца,
	|	ЕСТЬNULL(ТаблицаОплата.Сумма, 0) КАК СуммаПредоплаты,
	|	Шапка.ИдентификаторВозврата КАК ИдентификаторВозврата,
	|	Шапка.Код КАК Код
	|ИЗ
	|	Шапка КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаОплаты.Ссылка КАК Ссылка,
	|			СУММА(ТаблицаОплаты.Сумма) КАК Сумма
	|		ИЗ
	|			Шапка КАК Фильтр
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.Оплата КАК ТаблицаОплаты
	|				ПО Фильтр.Ссылка = ТаблицаОплаты.Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаОплаты.Ссылка) КАК ТаблицаОплата
	|		ПО Шапка.Ссылка = ТаблицаОплата.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПрограммы.УслугаБанка.ИдентификаторПрограммы КАК ИдентификаторПрограммы,
	|	ТаблицаПрограммы.УслугаБанкаПериодПредоставления КАК ПериодПредоставления,
	|	ТаблицаПрограммы.КартаКлиентаДляОплатыЧастями КАК КартаКлиентаДляОплатыЧастями
	|ИЗ
	|	Шапка КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.КредитныеПрограммы КАК ТаблицаПрограммы
	|		ПО Фильтр.Ссылка = ТаблицаПрограммы.Ссылка
	|ИТОГИ ПО
	|	ИдентификаторПрограммы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура.Наименование КАК Наименование,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.Сумма + ВЫБОР
	|		КОГДА Фильтр.УчитыватьНДС
	|				И НЕ Фильтр.ЦенаВключаетНДС
	|			ТОГДА ТаблицаТовары.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Шапка КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.Товары КАК ТаблицаТовары
	|		ПО Фильтр.Ссылка = ТаблицаТовары.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Шапка"
	);
	Запрос.УстановитьПараметр("ТекущийДокумент"   , СчетПокупателюСсылка);
	Запрос.УстановитьПараметр("КредитнаяПрограмма", КредитнаяПрограмма);

	Возврат Запрос.ВыполнитьПакет();

КонецФункции

#КонецОбласти

#Область ПоддержкаИнтерфейсаСБанковскимAPI

//	LNK 15.04.2020 10:51:17
Функция Валидация(НомерТелефона, КредитнаяПрограмма, Отказ, ТекстСообщения)	Экспорт

	ДанныеКлиента = Новый Структура("Найден", Ложь);

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;
	
	ДанныеПрограммы = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);

	Если ДанныеПрограммы.Найден Тогда

		Если ДанныеПрограммы.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Монобанк Тогда

			ДанныеКлиента = ОбменСБанкамиМонобанкСервер.Валидация(НомерТелефона, КредитнаяПрограмма, Отказ, ТекстСообщения);

		ИначеЕсли ДанныеПрограммы.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Альфабанк Тогда

			ДанныеКлиента = ОбменСБанкамиАльфаБанкСервер.Валидация(НомерТелефона, КредитнаяПрограмма, Отказ, ТекстСообщения);

		Иначе

			Отказ = Истина;
			ТекстСообщения = "Для программы «" + КредитнаяПрограмма + "» не указан [ТипИнтернетБанкинга] либо таковой не поддерживается.";

		КонецЕсли;

	Иначе

		Отказ = Истина;
		ТекстСообщения = "Для программы «" + КредитнаяПрограмма + "» данные НЕ обнаружены.";

	КонецЕсли;

	Возврат ДанныеКлиента;

КонецФункции

Функция ПодатьЗаявкуНаОформлениеКредита(ДокументСсылка, КредитнаяПрограмма, ТекстСообщения = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Отказ = Ложь;
	
	ДанныеПрограммы = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);

	Если ДанныеПрограммы.Найден Тогда

		Если ДанныеПрограммы.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Монобанк Тогда

			Отказ = НЕ ОбменСБанкамиМонобанкСервер.ПодатьЗаявкуНаОформлениеКредита(ДокументСсылка, КредитнаяПрограмма, ТекстСообщения);

		ИначеЕсли ДанныеПрограммы.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Альфабанк Тогда

			Отказ = НЕ ОбменСБанкамиАльфаБанкСервер.ПодатьЗаявкуНаОформлениеКредита(ДокументСсылка, КредитнаяПрограмма, ТекстСообщения);

		Иначе

			Отказ = Истина;
			ТекстСообщения = "Для программы «" + КредитнаяПрограмма + "» не указан [ТипИнтернетБанкинга] либо таковой не поддерживается.";

		КонецЕсли;

	Иначе

		Отказ = Истина;
		ТекстСообщения = "Для программы «" + КредитнаяПрограмма + "» данные НЕ обнаружены.";

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

Функция ПодатьЗаявкуНаОформлениеВозврата(ДокументСсылка, КредитнаяПрограмма, ТекстСообщения = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Отказ = Ложь;
	
	ДанныеПрограммы = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);

	Если ДанныеПрограммы.Найден Тогда
		
		Если ДанныеПрограммы.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Альфабанк Тогда

			Отказ = НЕ ОбменСБанкамиАльфаБанкСервер.ПодатьЗаявкуНаОформлениеВозврата(ДокументСсылка, КредитнаяПрограмма, ТекстСообщения);

		Иначе

			Отказ = Истина;
			ТекстСообщения = "Для программы «" + КредитнаяПрограмма + "» не указан [ТипИнтернетБанкинга] либо таковой не поддерживается.";

		КонецЕсли;

	Иначе

		Отказ = Истина;
		ТекстСообщения = "Для программы «" + КредитнаяПрограмма + "» данные НЕ обнаружены.";

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

Функция ПроверитьСостояниеЗаявкиНаОформлениеКредита(ДокументСсылка, КредитнаяПрограмма, ТекстСообщения = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;
	
	ДанныеПрограммы = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);

	Если ДанныеПрограммы.Найден Тогда

		Если ДанныеПрограммы.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Монобанк Тогда

			ОбменСБанкамиМонобанкСервер.ПроверитьСостояниеЗаявкиНаОформлениеКредита(ДокументСсылка, КредитнаяПрограмма, ТекстСообщения);

		ИначеЕсли ДанныеПрограммы.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Альфабанк Тогда
			
			ОбменСБанкамиАльфаБанкСервер.ПроверитьСостояниеЗаявкиНаОформлениеКредита(ДокументСсылка, КредитнаяПрограмма, ТекстСообщения);
			
		Иначе

			ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
			+ "Для программы «" + КредитнаяПрограмма + "» не указан [ТипИнтернетБанкинга] либо таковой не поддерживается.";

		КонецЕсли;

	Иначе

		ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
		+ "Для программы «" + КредитнаяПрограмма + "» данные НЕ обнаружены.";

	КонецЕсли;

	Возврат ПустаяСтрока(ТекстСообщения);	//	на всякий случай

КонецФункции

Функция ОтменитьЗаявкуНаОформлениеКредита(ДокументСсылка, КредитнаяПрограмма, ТекстСообщения = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;
	
	
	ДанныеОтвета    = СтруктураОтветаВнешнейСистемы();
	ДанныеПрограммы = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);

	Если ДанныеПрограммы.Найден Тогда

		Если ДанныеПрограммы.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Монобанк Тогда

			ДанныеОтвета = ОбменСБанкамиМонобанкСервер.ОтменитьЗаявкуНаОформлениеКредита(ДокументСсылка, КредитнаяПрограмма, ТекстСообщения);

			ПараметрыКредита = Новый Структура("Отменить", Истина);
			УстановитьДанныеОтветаБанка(ДокументСсылка, КредитнаяПрограмма, ПараметрыКредита);

		ИначеЕсли ДанныеПрограммы.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Альфабанк Тогда

			ДанныеОтвета = ОбменСБанкамиАльфаБанкСервер.ОтменитьЗаявкуНаОформлениеКредита(ДокументСсылка, КредитнаяПрограмма, ТекстСообщения);

			Если Не ДанныеОтвета.Отказ Тогда 
				ПараметрыКредита = Новый Структура("Отменить", Истина);
				УстановитьДанныеОтветаБанка(ДокументСсылка, КредитнаяПрограмма, ПараметрыКредита);
			КонецЕсли;
			

		Иначе

			ДанныеОтвета.ТекстСообщения = "Для программы «" + КредитнаяПрограмма + "» не указан [ТипИнтернетБанкинга] либо таковой не поддерживается.";

		КонецЕсли;

	Иначе

		ДанныеОтвета.ТекстСообщения = "Для программы «" + КредитнаяПрограмма + "» данные НЕ обнаружены.";

	КонецЕсли;

	Возврат ДанныеОтвета;

КонецФункции

Функция ПодтверждениеВыдачиТовараКлиенту(ДокументСсылка, КредитнаяПрограмма)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;
	
	ДанныеОтвета    = СтруктураОтветаВнешнейСистемы();	//	дефолтовое определение структуры.
	ДанныеПрограммы = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);

	Попытка

		Если ДанныеПрограммы.Интеграция Тогда

			Если ДанныеПрограммы.Найден Тогда

				Если ДанныеПрограммы.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Монобанк Тогда

					ДанныеОтвета = ОбменСБанкамиМонобанкСервер.ПодтверждениеВыдачиТовараКлиенту(ДокументСсылка, КредитнаяПрограмма);

					ПроверитьСостояниеЗаявкиНаОформлениеКредита(ДокументСсылка, КредитнаяПрограмма, ДанныеОтвета.ТекстСообщения);

				ИначеЕсли ДанныеПрограммы.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Альфабанк Тогда

					ДанныеОтвета = ОбменСБанкамиАльфаБанкСервер.ПодтверждениеВыдачиТовараКлиенту(ДокументСсылка, КредитнаяПрограмма);

					ПроверитьСостояниеЗаявкиНаОформлениеКредита(ДокументСсылка, КредитнаяПрограмма, ДанныеОтвета.ТекстСообщения);

				Иначе

					ДанныеОтвета.ТекстСообщения = "Для программы «" + КредитнаяПрограмма + "» не указан [ТипИнтернетБанкинга] либо таковой не поддерживается.";

				КонецЕсли;

			Иначе

				ДанныеОтвета.ТекстСообщения = "Для программы «" + КредитнаяПрограмма + "» данные НЕ обнаружены.";

			КонецЕсли;

		КонецЕсли;

	Исключение

		ДанныеОтвета.Отказ = Истина;
		ДанныеОтвета.ТекстСообщения = ОписаниеОшибки();

	КонецПопытки;

	Возврат ДанныеОтвета;

КонецФункции

Процедура ВыполнитьОтгрузкуПоКредитнойПрограмме(ДокументПродажи, СчетНаОплатуПокупателю, УслугаБанка, ТекстСообщения = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаРегистра.ИдентификаторБанка КАК ИдентификаторБанка,
	|	ЕСТЬNULL(ТаблицаРегистра.УслугаБанка.Банк.Интеграция, ЛОЖЬ) КАК Интеграция
	|ИЗ
	|	РегистрСведений.ДанныеКредитныхПрограмм КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.СчетНаОплатуПокупателю = &СчетНаОплатуПокупателю
	|	И ТаблицаРегистра.УслугаБанка = &УслугаБанка
	|	И ТаблицаРегистра.ДокументПродажи = &ДокументПродажи
	|	И НЕ ТаблицаРегистра.Отгружено"
	);
	Запрос.УстановитьПараметр("СчетНаОплатуПокупателю", СчетНаОплатуПокупателю);
	Запрос.УстановитьПараметр("ДокументПродажи", ДокументПродажи);
	Запрос.УстановитьПараметр("УслугаБанка", УслугаБанка);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда

		Выборка = Результат.Выбрать();
		Выборка.Следующий();

		ДанныеОтвета = ПодтверждениеВыдачиТовараКлиенту(СчетНаОплатуПокупателю, УслугаБанка);
		ДанныеОтвета.Вставить("Отгружено", Истина);

		УстановитьДанныеОтветаБанка(СчетНаОплатуПокупателю, УслугаБанка, ДанныеОтвета);

	КонецЕсли;

КонецПроцедуры

Функция ВозвратПоКредитнойПрограмме(ДокументСсылка, КредитнаяПрограмма, ДокументВозврата, СуммаКредитаВозврат)

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;
	
	ДанныеОтвета    = СтруктураОтветаВнешнейСистемы();	//	дефолтовое определение структуры.
	ДанныеПрограммы = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);

	Попытка

		Если ДанныеПрограммы.Найден Тогда

			Если ДанныеПрограммы.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Монобанк Тогда

				ДанныеОтвета = ОбменСБанкамиМонобанкСервер.ВозвратПоКредитнойПрограмме(ДокументСсылка, КредитнаяПрограмма, ДокументВозврата, СуммаКредитаВозврат);

				ПроверитьСостояниеЗаявкиНаОформлениеКредита(ДокументСсылка, КредитнаяПрограмма, ДанныеОтвета.ТекстСообщения);

			ИначеЕсли ДанныеПрограммы.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Альфабанк Тогда

				ДанныеОтвета.Отказ = Ложь;
				//ДанныеОтвета = ОбменСБанкамиАльфабанкСервер.ВозвратПоКредитнойПрограмме(ДокументСсылка, КредитнаяПрограмма, ДокументВозврата, СуммаКредитаВозврат);

				//ПроверитьСостояниеЗаявкиНаОформлениеКредита(ДокументСсылка, КредитнаяПрограмма, ДанныеОтвета.ТекстСообщения);

			Иначе

				ДанныеОтвета.ТекстСообщения = "Для программы «" + КредитнаяПрограмма + "» не указан [ТипИнтернетБанкинга] либо таковой не поддерживается.";

			КонецЕсли;

		Иначе

			ДанныеОтвета.ТекстСообщения = "Для программы «" + КредитнаяПрограмма + "» данные НЕ обнаружены.";

		КонецЕсли;

	Исключение

		ДанныеОтвета.Отказ = Истина;
		ДанныеОтвета.ТекстСообщения = ОписаниеОшибки();

	КонецПопытки;

	Возврат ДанныеОтвета;

КонецФункции

Процедура ВыполнитьВозвратПоКредитнойПрограмме(ДокументПродажи, СчетНаОплатуПокупателю, УслугаБанка, ДокументВозврата, СуммаКредитаВозврат, ТекстСообщения = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаРегистра.ИдентификаторБанка КАК ИдентификаторБанка,
	|	ТаблицаРегистра.СуммаКредитаВозврат КАК СуммаКредитаВозврат,
	|	ТаблицаРегистра.ДанныеВозвратов КАК ДанныеВозвратов
	|ИЗ
	|	РегистрСведений.ДанныеКредитныхПрограмм КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.СчетНаОплатуПокупателю = &СчетНаОплатуПокупателю
	|	И ТаблицаРегистра.УслугаБанка = &УслугаБанка
	|	И ТаблицаРегистра.ДокументПродажи = &ДокументПродажи"
	);
	Запрос.УстановитьПараметр("СчетНаОплатуПокупателю", СчетНаОплатуПокупателю);
	Запрос.УстановитьПараметр("ДокументПродажи", ДокументПродажи);
	Запрос.УстановитьПараметр("УслугаБанка", УслугаБанка);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда

		Реквизиты = Результат.Выбрать();
		Реквизиты.Следующий();

		ДанныеВозвратов = Реквизиты.ДанныеВозвратов.Получить();

		Если НЕ ТипЗнч(ДанныеВозвратов) = Тип("Соответствие") Тогда

			ДанныеВозвратов = Новый Соответствие;

		КонецЕсли;

	//	проверяем, был ли такой чек возврата? Если уже был, то ничего и не делаем.

		Если ДанныеВозвратов.Получить(ДокументВозврата) = Неопределено Тогда

			ДанныеОтвета = ВозвратПоКредитнойПрограмме(СчетНаОплатуПокупателю, УслугаБанка, ДокументВозврата, СуммаКредитаВозврат);

			Если НЕ ДанныеОтвета.Отказ Тогда

				ДанныеВозвратов.Вставить(ДокументВозврата, СуммаКредитаВозврат);

				ДанныеОтвета.Вставить("СуммаКредитаВозврат", СуммаКредитаВозврат + Реквизиты.СуммаКредитаВозврат);
				ДанныеОтвета.Вставить("ДанныеВозвратов", ДанныеВозвратов);

				УстановитьДанныеОтветаБанка(СчетНаОплатуПокупателю, УслугаБанка, ДанныеОтвета);

			Иначе

				ТекстСообщения = ДанныеОтвета.ТекстСообщения;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьОтчетСостоянияЗаявок(ДатаОтчета, КредитнаяПрограмма, ТекстСообщения = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;
	
	ДанныеПрограммы = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);

	Если ДанныеПрограммы.Найден Тогда

		Если ДанныеПрограммы.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Монобанк Тогда

			ДанныеОтчета = ОбменСБанкамиМонобанкСервер.ПолучитьОтчетСостоянияЗаявок(ДатаОтчета, КредитнаяПрограмма, ТекстСообщения);

		Иначе

			ТекстСообщения = "Для программы «" + КредитнаяПрограмма + "» не указан [ТипИнтернетБанкинга] либо таковой не поддерживается.";

		КонецЕсли;

	Иначе

		ТекстСообщения = "Для программы «" + КредитнаяПрограмма + "» данные НЕ обнаружены.";

	КонецЕсли;

	Возврат ДанныеОтчета;

КонецФункции

Функция ОбновитьЗаявкуНаОформлениеКредита(ДокументСсылка, КредитнаяПрограмма, ТекстСообщения = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Отказ = Ложь;
	
	ДанныеПрограммы = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);

	Если ДанныеПрограммы.Найден Тогда

		Если ДанныеПрограммы.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Альфабанк Тогда

			Отказ = НЕ ОбменСБанкамиАльфаБанкСервер.ОбновитьЗаявкуНаОформлениеКредита(ДокументСсылка, КредитнаяПрограмма, ТекстСообщения);

		Иначе

			Отказ = Истина;
			ТекстСообщения = "Для программы «" + КредитнаяПрограмма + "» не указан [ТипИнтернетБанкинга] либо таковой не поддерживается.";

		КонецЕсли;

	Иначе

		Отказ = Истина;
		ТекстСообщения = "Для программы «" + КредитнаяПрограмма + "» данные НЕ обнаружены.";

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

Функция ЗакрытьЗаявкуНаОформлениеКредита(ДокументСсылка, КредитнаяПрограмма, ТекстСообщения = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Отказ = Ложь;
	
	ДанныеПрограммы = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);

	Если ДанныеПрограммы.Найден Тогда

		Если ДанныеПрограммы.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Альфабанк Тогда

			Отказ = НЕ ОбменСБанкамиАльфаБанкСервер.ЗакрытьЗаявкуНаОформлениеКредита(ДокументСсылка, КредитнаяПрограмма, ТекстСообщения);

		Иначе

			Отказ = Истина;
			ТекстСообщения = "Для программы «" + КредитнаяПрограмма + "» не указан [ТипИнтернетБанкинга] либо таковой не поддерживается.";

		КонецЕсли;

	Иначе

		Отказ = Истина;
		ТекстСообщения = "Для программы «" + КредитнаяПрограмма + "» данные НЕ обнаружены.";

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

Функция СформироватьДанныеLiqPay(СтруктураДанных) Экспорт
	
	СтруктураОтвета = Новый Структура("Данные, Сигнатура");
	
	private_key = ОбменСБанкамиПовтИсп.ДанныеLiqPay().private_key;
	
	ДвоичныеДанныеСтроки = ПолучитьДвоичныеДанныеИзСтроки(СтруктураДанных);
    ДатаBase64 = Base64Строка(ДвоичныеДанныеСтроки);
    ДатаBase64 = СтрЗаменить(ДатаBase64, Символы.ВК, ""); // убираем ВК
    ДатаBase64 = СтрЗаменить(ДатаBase64, Символы.ПС, ""); // убираем ПС
    
    ХД = Новый ХешированиеДанных(ХешФункция.SHA1);
    ХД.Добавить(private_key);
    ХД.Добавить(ДатаBase64);
    ХД.Добавить(private_key);

    ТипДвоичныеДанные = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "base64Binary");
    ДвоичныеДанные = ФабрикаXDTO.Создать(ТипДвоичныеДанные,ХД.ХешСумма);
    СигнатураBase64 = ДвоичныеДанные.ЛексическоеЗначение;
	
	СтруктураОтвета.Данные = ДатаBase64; 
	СтруктураОтвета.Сигнатура = СигнатураBase64;
	
	Возврат СтруктураОтвета; 
	
КонецФункции 

Процедура ОбработкаОтветаПоЗаказуLiqPay(СтрокаЗапроса) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаЗапроса);
	ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON);

	Если ДанныеОтвета.Свойство("status")
			И ДанныеОтвета.Свойство("order_id") Тогда 
			
		НомерВхожденияРазделителя = СтрНайти(ДанныеОтвета.order_id, "-");	
		ДлинаСтрока = СтрДлина(ДанныеОтвета.order_id);
		Если НомерВхожденияРазделителя = 0 Тогда 
			СтрокаПоиска = ДанныеОтвета.order_id;
			НомерОплаты = 0;
		Иначе 
			СтрокаПоиска = Лев(ДанныеОтвета.order_id, НомерВхожденияРазделителя - 1);
			НомерОплаты = Число(Прав(ДанныеОтвета.order_id, ДлинаСтрока - НомерВхожденияРазделителя)); 
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаказПокупателя.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
			|ГДЕ
			|	ЗаказПокупателя.Номер = &Номер";
		
		Запрос.УстановитьПараметр("Номер", СтрокаПоиска);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда 

			РегистрыСведений.КомментарийИнтернетЗаказа.ЗаписьКомментария(Выборка.Ссылка, ПараметрыСеанса.ТекущийПользователь, СтрокаЗапроса);
			
			Если ДанныеОтвета.status = "success" Тогда  

				СтрокаКомментария = "Заказ на оплату №" + ДанныеОтвета.order_id + " оплачен";
				РегистрыСведений.КомментарийИнтернетЗаказа.ЗаписьКомментария(Выборка.Ссылка, ПараметрыСеанса.ТекущийПользователь, СтрокаКомментария);
				
				СтруктураЗаписи = РегистрыСведений.ОплатаЗаказаКлиента.ИнициализацияСтруктурыЗаписи();
	
				СтруктураЗаписи.ВидОплаты	 	= Перечисления.ВидыОплатыЗаказаПокупателя.Оплата;
				СтруктураЗаписи.ЗаказКлиента 	= Выборка.Ссылка;
				СтруктураЗаписи.НомерОплаты 	= НомерОплаты;
				СтруктураЗаписи.ТипОплаты 		= Перечисления.ТипОплатыЗаказПокупателя.ОплатаКартойПриват;
				СтруктураЗаписи.Сумма 			= ДанныеОтвета.amount;
				СтруктураЗаписи.СтатусОплаты 	= Перечисления.СтатусОплаты.Оплачен;
				СтруктураЗаписи.Отменён 		= Ложь;
				СтруктураЗаписи.ДатаОплаты 		= ТекущаяДатаСеанса();
				
				РегистрыСведений.ОплатаЗаказаКлиента.ЗаписьСтрокиВРегистр(СтруктураЗаписи);

			КонецЕсли;  
		КонецЕсли;  
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПоддержкаРегистраСведенийДанныеКредитныхПрограмм

Функция ВыполнитьДвиженияПоРегиструДанныеКредитныхПрограмм(ДокументСсылка, УслугаБанка, Отказ, ДанныеПрограммы = Неопределено, Обновление = Ложь)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;
	
	ВозвратПоПрограмме = Не (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ОснованиеЗаявки", Документы.СчетНаОплатуПокупателю.ПустаяСсылка()) = Документы.СчетНаОплатуПокупателю.ПустаяСсылка());

	ДанныеПрограммы = ОбщегоНазначенияПовтИсп.ПолучитьСтруктуруЗаписиРегистра("РегистрСведений.ДанныеКредитныхПрограмм");

	НаборЗаписей = РегистрыСведений.ДанныеКредитныхПрограмм.СоздатьНаборЗаписей();
	
	Если ВозвратПоПрограмме Тогда 
		
		НаборЗаписей.Отбор.СчетНаОплатуПокупателю.Установить(ДокументСсылка.ОснованиеЗаявки);
		
	Иначе 
		
		НаборЗаписей.Отбор.СчетНаОплатуПокупателю.Установить(ДокументСсылка);
		
	КонецЕсли;
	
	НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда

		ЗаписьНабора    = Неопределено;
		ВыполнитьЗапись = Истина;

	Иначе

		ЗаписьНабора = НаборЗаписей[0];
	//	проверяем, зарегистрирован ли этот документв БД банка..
	
		ВыполнитьЗапись = ПустаяСтрока(ЗаписьНабора.ИдентификаторБанка);

	КонецЕсли;

	Если ВыполнитьЗапись ИЛИ ЗаписьНабора = Неопределено Или Обновление Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Магазин КАК Магазин,
		|	ТабличнаяЧасть.УслугаБанкаПериодПредоставления КАК УслугаБанкаПериодПредоставления,
		|	ТабличнаяЧасть.УслугаБанка.Банк.Интеграция КАК Интеграция,
		|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента,
		|	ТаблицаДокумента.Дата КАК ДатаДокумента
		|ПОМЕСТИТЬ Фильтр
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.КредитныеПрограммы КАК ТабличнаяЧасть
		|		ПО ТаблицаДокумента.Ссылка = ТабличнаяЧасть.Ссылка
		|			И (ТабличнаяЧасть.НомерСтроки = 1)
		|			И (ТабличнаяЧасть.УслугаБанка = &УслугаБанка)
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &ДокументСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Ведущая.Магазин КАК Магазин,
		|	Ведущая.УслугаБанкаПериодПредоставления КАК УслугаБанкаПериодПредоставления,
		|	Ведущая.Интеграция КАК Интеграция,
		|	Ведущая.СуммаДокумента КАК СуммаДокумента,
		|	ВЫБОР
		|		КОГДА Ведущая.СуммаДокумента > ЕСТЬNULL(ТаблицаОплата.СуммаПредоплаты, 0)
		|			ТОГДА Ведущая.СуммаДокумента - ЕСТЬNULL(ТаблицаОплата.СуммаПредоплаты, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаКредита,
		|	Ведущая.ДатаДокумента КАК ДатаДокумента
		|ИЗ
		|	Фильтр КАК Ведущая
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Ведущая.Ссылка КАК Ссылка,
		|			СУММА(ТаблицаОплата.Сумма) КАК СуммаПредоплаты
		|		ИЗ
		|			Фильтр КАК Ведущая
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.Оплата КАК ТаблицаОплата
		|				ПО Ведущая.Ссылка = ТаблицаОплата.Ссылка
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Ведущая.Ссылка) КАК ТаблицаОплата
		|		ПО Ведущая.Ссылка = ТаблицаОплата.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Фильтр"
		);
		Запрос.УстановитьПараметр("ДокументСсылка", ?(ВозвратПоПрограмме, ДокументСсылка.ОснованиеЗаявки, ДокументСсылка));
		Запрос.УстановитьПараметр("УслугаБанка"   , УслугаБанка);
		
		РеквизитыВыборка = Запрос.Выполнить().Выбрать();
		
		Если РеквизитыВыборка.Следующий() Тогда

			Если ЗаписьНабора = Неопределено Тогда

				ЗаписьНабора = НаборЗаписей.Добавить();

				ЗаписьНабора.СчетНаОплатуПокупателю = НаборЗаписей.Отбор.СчетНаОплатуПокупателю.Значение;
				ЗаписьНабора.ДокументПродажи = Документы.ЧекККМ.ПолучитьСсылку();
				ЗаписьНабора.Идентификатор   = СтрЗаменить(СокрЛП(ДокументСсылка.УникальныйИдентификатор()), "-", "");

			КонецЕсли;
			
			Если ВозвратПоПрограмме Тогда 
				
				ЗаписьНабора.ИдентификаторВозврата = СтрЗаменить(СокрЛП(ДокументСсылка.УникальныйИдентификатор()), "-", "");
				//ЗаписьНабора.СуммаКредитаВозврат   = РеквизитыВыборка.СуммаКредита;

			КонецЕсли;
			

			ЗаписьНабора.УслугаБанка = УслугаБанка;

			ЗаписьНабора.Магазин    = РеквизитыВыборка.Магазин;
			//ЗаписьНабора.Интеграция = РеквизитыВыборка.Интеграция;
			ЗаписьНабора.ДатаДокумента = РеквизитыВыборка.ДатаДокумента;
			ЗаписьНабора.УслугаБанкаПериодПредоставления = РеквизитыВыборка.УслугаБанкаПериодПредоставления;
			
			ДанныеПрограммы = ПолучитьДанныеПрограммы(УслугаБанка);
			ЗаписьНабора.Интеграция = ДанныеПрограммы.Интеграция;
			
			Если Не ДанныеПрограммы.Интеграция Тогда
				
				ЗаписьНабора.Статус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.ОжидаетсяОтгрузка;

			КонецЕсли;
			
			//Если НЕ ЗаписьНабора.Интеграция Тогда

			//	ЗаписьНабора.Статус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.ОжидаетсяОтгрузка;

			//КонецЕсли;
			//
			Если ЗаписьНабора.СтатусВозврата = Перечисления.СтатусыЗаявкиНаОформлениеКредита.ПустаяСсылка() Тогда 
				
				ЗаписьНабора.СтатусВозврата = Перечисления.СтатусыЗаявкиНаОформлениеКредита.СозданиеВозврата;
				
			КонецЕсли;
			

			ЗаписьНабора.СуммаДокумента = РеквизитыВыборка.СуммаДокумента;
			ЗаписьНабора.СуммаКредита   = РеквизитыВыборка.СуммаКредита;

			НаборЗаписей.Записать();

		КонецЕсли;

	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ДанныеПрограммы, ЗаписьНабора);

	Возврат НЕ Отказ;

КонецФункции

Процедура УстановитьДанныеОтветаБанка(ДокументСсылка, УслугаБанка, ДанныеОтвета)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	НаборЗаписей = РегистрыСведений.ДанныеКредитныхПрограмм.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СчетНаОплатуПокупателю.Установить(ДокументСсылка);

	НаборЗаписей.Прочитать();

	Если НЕ НаборЗаписей.Количество() = 0 Тогда

		ЗаписьНабора = НаборЗаписей[0];

		Если ДанныеОтвета.Свойство("order_id") Тогда

			ЗаписьНабора.ИдентификаторБанка = ДанныеОтвета.order_id;

		КонецЕсли;

		Если ДанныеОтвета.Свойство("Отгружено") Тогда

			ЗаписьНабора.Отгружено = ДанныеОтвета.Отгружено;

		КонецЕсли;

		Если ДанныеОтвета.Свойство("СуммаКредитаВозврат") Тогда

			ЗаписьНабора.СуммаКредитаВозврат = ДанныеОтвета.СуммаКредитаВозврат;

		КонецЕсли;

		Если ДанныеОтвета.Свойство("ДанныеВозвратов") Тогда

			ЗаписьНабора.ДанныеВозвратов = Новый ХранилищеЗначения(ДанныеОтвета.ДанныеВозвратов, Новый СжатиеДанных(9));

		КонецЕсли;

		Если ДанныеОтвета.Свойство("Отменить") Тогда

			ЗаписьНабора.Отменить = ДанныеОтвета.Отменить;

		КонецЕсли;

		Если ДанныеОтвета.Свойство("ГарантийноеПисьмоДанные") Тогда

			ЗаписьНабора.ГарантийноеПисьмоДанные = Новый ХранилищеЗначения(ДанныеОтвета.ГарантийноеПисьмоДанные);

			Если ДанныеОтвета.Свойство("ГарантийноеПисьмоПодтверждено") Тогда

				ЗаписьНабора.ГарантийноеПисьмоПодтверждено = ДанныеОтвета.ГарантийноеПисьмоПодтверждено;

			КонецЕсли;

		КонецЕсли;

		АнализОтветаБанка(ДанныеОтвета, ЗаписьНабора);

		Если НаборЗаписей.Модифицированность() Тогда

			НаборЗаписей.Записать();

		КонецЕсли;

	Иначе

		ВызватьИсключение "Не обнаружено данных счёта по кредитной программе";

	КонецЕсли;

КонецПроцедуры

Процедура АнализОтветаБанка(ДанныеОтвета, ЗаписьНабора)

	Если ДанныеОтвета.Свойство("state") Тогда

		Статус    = ДанныеОтвета.state;
		Подстатус = "";

		ЗаписьНабора.ОтветБанка = ДанныеОтвета.state;

		Если ДанныеОтвета.Свойство("order_sub_state") Тогда

			Подстатус = ДанныеОтвета.order_sub_state;
			ЗаписьНабора.ОтветБанка = ЗаписьНабора.ОтветБанка + Символы.ПС + ДанныеОтвета.order_sub_state;

		КонецЕсли;

		Если Статус = "SUCCESS" Тогда

			Если Подстатус = "SUCCESS" ИЛИ Подстатус = "ACTIVE" ИЛИ Подстатус = "DONE" Тогда

				ЗаписьНабора.Статус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.СогласованоБанком;

			Иначе

				ЗаписьНабора.Статус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.Рассматривается;

			КонецЕсли;

		ИначеЕсли Статус = "FAIL" Тогда
			
			ЗаписьНабора.Статус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.Отклонено;
		
		ИначеЕсли Статус = "IN_PROCESS" Тогда
			
			Если Подстатус = "WAITING_FOR_STORE_CONFIRM" Тогда

				ЗаписьНабора.Статус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.ОжидаетсяОтгрузка;

			ИначеЕсли Подстатус = "WAITING_FOR_CLIENT" Тогда

				ЗаписьНабора.Статус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.ОжидаетсяПодтверждениеПокупателя;

			Иначе

				ЗаписьНабора.Статус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.Рассматривается;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура УстановитьКомментарий(Комментарий, ДокументСсылка, УслугаБанка)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	НаборЗаписей = РегистрыСведений.ДанныеКредитныхПрограмм.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СчетНаОплатуПокупателю.Установить(ДокументСсылка);

	НаборЗаписей.Прочитать();

	Если НЕ НаборЗаписей.Количество() = 0 Тогда

		ЗаписьНабора = НаборЗаписей[0];

		Если НЕ ЗаписьНабора.Комментарий = СокрЛП(Комментарий) Тогда

			ЗаписьНабора.Комментарий = СокрЛП(Комментарий);

		КонецЕсли;

		Если НаборЗаписей.Модифицированность() Тогда

			НаборЗаписей.Записать();

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьСостояниеКредитнойПрограммы(ДокументСсылка, УслугаБанка, ОснованиеЗаявки = Неопределено)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЛОЖЬ КАК Отказ,
	|	"""" КАК Описание,
	|	ТаблицаРегистра.Идентификатор КАК Идентификатор,
	|	ТаблицаРегистра.ИдентификаторБанка КАК ИдентификаторБанка,
	|	ТаблицаРегистра.ДокументПродажи КАК ДокументПродажи,
	|	ТаблицаРегистра.УслугаБанкаПериодПредоставления КАК УслугаБанкаПериодПредоставления,
	|	ТаблицаСправочник.ТипУслуги КАК ТипУслуги,
	|	ЕСТЬNULL(ТаблицаСправочник.Банк.Интеграция, ЛОЖЬ) КАК Интеграция,
	|	ТаблицаРегистра.СуммаДокумента КАК СуммаДокумента,
	|	ТаблицаРегистра.СуммаКредита КАК СуммаКредита,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСправочник.Банк.СуммаМинимальногоКредита, 0) = 0
	|			ТОГДА 100
	|		ИНАЧЕ ТаблицаСправочник.Банк.СуммаМинимальногоКредита
	|	КОНЕЦ КАК СуммаМинимальногоКредита,
	|	ВЫБОР
	|		КОГДА &ОснованиеЗаявки = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаРегистра.Статус
	|		ИНАЧЕ ТаблицаРегистра.СтатусВозврата
	|	КОНЕЦ КАК Статус,
	|	ВЫБОР
	|		КОГДА &ОснованиеЗаявки = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаРегистра.ОтветБанка
	|		ИНАЧЕ ТаблицаРегистра.ОтветБанкаВозврат
	|	КОНЕЦ КАК ОтветБанка,
	|	ТаблицаРегистра.ГарантийноеПисьмоПодтверждено КАК ГарантийноеПисьмоПодтверждено,
	|	ТаблицаРегистра.Отгружено КАК Отгружено,
	|	ТаблицаРегистра.СтатусВозврата КАК СтатусВозврата
	|ИЗ
	|	РегистрСведений.ДанныеКредитныхПрограмм КАК ТаблицаРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УслугиБанка КАК ТаблицаСправочник
	|		ПО ТаблицаРегистра.УслугаБанка = ТаблицаСправочник.Ссылка
	|ГДЕ
	|	ТаблицаРегистра.СчетНаОплатуПокупателю = &СчетНаОплатуПокупателю
	|	И ТаблицаРегистра.УслугаБанка = &УслугаБанка"
	);
	Запрос.УстановитьПараметр("СчетНаОплатуПокупателю", ?(ОснованиеЗаявки = Неопределено,ДокументСсылка,ОснованиеЗаявки));
	Запрос.УстановитьПараметр("УслугаБанка", УслугаБанка);
	Запрос.УстановитьПараметр("ОснованиеЗаявки", ОснованиеЗаявки);
	
	Результат = Запрос.Выполнить();

	ДанныеСостояния = ПодарочныеСертификатыСервер.СтруктураРезультатаЗапроса(Результат, Ложь);

	Если НЕ Результат.Пустой() Тогда

		Выборка = Результат.Выбрать();
		Выборка.Следующий();

		ЗаполнитьЗначенияСвойств(ДанныеСостояния, Выборка);

		ДанныеСостояния.Отказ = НЕ (ДанныеСостояния.Статус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.ОжидаетсяОтгрузка ИЛИ ДанныеСостояния.Статус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.СогласованоБанком);

		Если ДанныеСостояния.Статус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.ОжидаетсяОтгрузка Тогда

			ДанныеСостояния.Описание = "Ожидается отгрузка товара покупателю.";

			Если ДанныеСостояния.ГарантийноеПисьмоПодтверждено = Истина Тогда

				ДанныеСостояния.Описание = ДанныеСостояния.Описание + " Гарантийное письмо получено и подтверждено.";

			КонецЕсли;

		ИначеЕсли ДанныеСостояния.Статус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.СогласованоБанком Тогда

			ДанныеСостояния.Описание = "Ожидается подтверждение покупателя в мобильном приложении.";

		ИначеЕсли ДанныеСостояния.Статус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.СогласованоБанком Тогда

			ДанныеСостояния.Описание = "Заявка согласована банком.";

			Если ДанныеСостояния.ГарантийноеПисьмоПодтверждено = Истина Тогда

				ДанныеСостояния.Описание = ДанныеСостояния.Описание + " Гарантийное письмо получено и подтверждено.";

			КонецЕсли;

		ИначеЕсли ДанныеСостояния.Статус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.ОтменаСогласована Тогда

			ДанныеСостояния.Описание = "Отмена заявки согласована банком.";

		ИначеЕсли ДанныеСостояния.Статус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.Отклонено Тогда

			ДанныеСостояния.Описание = "Заявка отклонена банком.";

		ИначеЕсли ДанныеСостояния.Статус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.Рассматривается Тогда

			ДанныеСостояния.Описание = "Заявка рассматривается банком.";

		ИначеЕсли ДанныеСостояния.Статус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.РассматриваетсяВозврат Тогда

			ДанныеСостояния.Описание = "Заявка на возврат рассматривается банком.";

		ИначеЕсли ДанныеСостояния.Статус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.ВозвратСогласован Тогда

			ДанныеСостояния.Описание = "Заявка на возврат согласована банком.";

		ИначеЕсли ДанныеСостояния.Статус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.ЗаявкаЗавершена Тогда

			ДанныеСостояния.Описание = "Заявка выполнена.";

		ИначеЕсли ДанныеСостояния.Статус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.СозданиеВозврата Тогда

			ДанныеСостояния.Описание = "Создание заявки на возврат.";

		Иначе

			ДанныеСостояния.Описание = "Ответ банка не получен. Возможно, возникла ошибка при передаче данных.";

		КонецЕсли;

		ДанныеСостояния.Описание = ДанныеСостояния.Описание
		+ Символы.ПС + ДанныеСостояния.ОтветБанка;

	Иначе

		ДанныеСостояния.Описание = "Заявка на предоставление кредитной программы НЕ обнаружена.";

	КонецЕсли;

	Возврат ДанныеСостояния;

КонецФункции

Функция ПроверкаСтатусаВозвратаАльфаБанк(Объект, СтатусВозврата) Экспорт
	
	КредитнаяПрограмма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "КредитныеПрограммы",,Ложь);
	КредитнаяПрограммаАльфаБанк = Неопределено;
	Если Не КредитнаяПрограмма = Неопределено Тогда
		ВыборкаКредитнаяПрограмма = КредитнаяПрограмма.Выбрать();
		Если Не ВыборкаКредитнаяПрограмма.Количество() = 0 Тогда
			ВыборкаКредитнаяПрограмма.Следующий();
			
			КредитРеквизиты = ОбменСБанкамиСервер.ПолучитьДанныеПрограммы(ВыборкаКредитнаяПрограмма.УслугаБанка);
			КредитСостояние   = ОбменСБанкамиСервер.ПолучитьСостояниеКредитнойПрограммы(Объект, ВыборкаКредитнаяПрограмма.УслугаБанка);
			Если КредитРеквизиты.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Альфабанк Тогда 
				КредитнаяПрограммаАльфаБанк = Ложь;
				Если КредитРеквизиты.ТипУслуги = Перечисления.ТипыУслугБанка.ОплатаЧастями  
					И КредитСостояние.Статус = Перечисления.СтатусыЗаявкиНаОформлениеКредита.ЗаявкаЗавершена 
					И КредитСостояние.СтатусВозврата = СтатусВозврата Тогда 
					КредитнаяПрограммаАльфаБанк = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КредитнаяПрограммаАльфаБанк;	

КонецФункции

#КонецОбласти

#Область Прочее

Функция СтруктураОтветаВнешнейСистемы()	Экспорт

	ДанныеОтвета = Новый Структура(
		"Отказ, ТекстСообщения, ОтветБанка"
		, Ложь
		, ""
		, ""
	);

	Возврат ДанныеОтвета;

КонецФункции

#КонецОбласти

