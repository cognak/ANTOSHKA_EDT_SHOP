//	LNK 04.03.2020 09:07:51
Функция ПолучитьСигнатуру(ТекстЗапроса, СекретныйКлюч)	Экспорт

//	Формат шифрования, указанный по адресу "https://u2-demo-ext.mono.st4g3.com/docs/index.html#"
//	encodeBase64(
//	   HmacSHA256(
//	       getBytesUTF-8(
//	           request_body
//	       )
//	   )
//	)

    ОбъектUTF8   = Новый COMОбъект("System.Text.UTF8Encoding");
    Криптография = Новый COMОбъект("System.Security.Cryptography.HMACSHA256");

//	устанавливаем ключ хеша
    Криптография.Key = ОбъектUTF8.GetBytes_4(СекретныйКлюч);
//	получаем сам хеш - массив байтов
	ХешБайты = Криптография.ComputeHash_2(ОбъектUTF8.GetBytes_4(ТекстЗапроса)).Выгрузить();

//	загоняем полученный массив байтов в буффер
	БуферДанных = Новый БуферДвоичныхДанных(ХешБайты.Количество());
	Счётчик     = 0;

	Для Каждого Элемент Из ХешБайты Цикл

	    БуферДанных.Установить(Счётчик, Элемент);
	    Счётчик = Счётчик + 1;

	КонецЦикла;

	Возврат Base64Строка(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(БуферДанных));

КонецФункции

Функция ВыполнитьЗапросКСерверу(ИмяПроцедуры, ТекстЗапросаДляБанка, ДанныеСоединения, Метод = "POST", Знач Таймаут = 40)	Экспорт

	Результат = Новый Структура(
		"КодОтвета, Ошибка, ОписаниеОшибки, ДанныеОтвета"
		, 0, Ложь, "", Неопределено);
	//
	ДанныеДляСервераБанка = Новый Структура(
		"ИмяПроцедуры, ТекстЗапроса, АдресAPIБанка, СтрокаАвторизации, Метод"
		,ИмяПроцедуры + "/" + ДанныеСоединения.Идентификатор, ТекстЗапросаДляБанка, ДанныеСоединения.Адрес, ДанныеСоединения.Ключ, Метод);
		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, ДанныеДляСервераБанка, Новый НастройкиСериализацииJSON);	
	
	
	ТекстЗапроса = ЗаписьJSON.Закрыть();
		
		
	Таймаут = Макс(5, Таймаут);

	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда

		Попытка
			
			HTTP = СервисыСервер.ПодключениеHTTP();
			
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Content-Type", "application/octet-stream");
			Заголовки.Вставить("Accept", "application/octet-stream");
			
			HTTPЗапрос = Новый HTTPЗапрос("retail/hs/AlfaBank/APIAB", Заголовки);
			HTTPЗапрос.УстановитьТелоИзСтроки(Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(ТекстЗапроса, КодировкаТекста.UTF8)),КодировкаТекста.UTF8);
			
			HTTPОтвет = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
			
			
			ТекстОтвета = ПолучитьСтрокуИзДвоичныхДанных(Base64Значение(HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8)));

			Результат.КодОтвета = HTTPОтвет.КодСостояния;
			
			Результат.Ошибка = НЕ (Результат.КодОтвета = 200 ИЛИ Результат.КодОтвета = 201);
			
			Попытка

				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
				Результат.ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON);
				
			Исключение

				Результат.Ошибка = Истина;
				Результат.ОписаниеОшибки = "Парсер JSON:" + Символы.ПС + ОписаниеОшибки();

				ЖурналСобытий.Регистрация("JSON.error", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Справочники.КлассификаторБанков
				, ДанныеСоединения.Банк
				,
				, Результат.ОписаниеОшибки + Символы.ПС + ОбщегоНазначенияКлиентСервер.REPEAT("-", 50) + Символы.ПС + ТекстОтвета
				,
				, Ложь);

			КонецПопытки;

		Исключение

			Результат.Ошибка = Истина;
			Результат.ОписаниеОшибки = "ошибка запроса к серверу (" + ИмяПроцедуры + "):" + Символы.ПС + ОписаниеОшибки();

		КонецПопытки;

	Иначе

		Результат.Ошибка = Истина;
		Результат.ОписаниеОшибки = "ошибка запроса к серверу (" + ИмяПроцедуры + "):" + Символы.ПС + "текст запроса НЕ заполнен (пустая строка)";

	КонецЕсли;

	Возврат Результат;

КонецФункции












