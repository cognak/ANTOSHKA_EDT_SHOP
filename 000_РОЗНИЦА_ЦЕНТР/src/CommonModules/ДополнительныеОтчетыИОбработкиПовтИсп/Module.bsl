////////////////////////////////////////////////////////////////////////////////
// Подсистема "Дополнительные отчеты и обработки", процедуры
//  и функции с повторным использованием возвращаемых значений.
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает виды публикации дополнительных обработок, доступные в информационной базе
//
Функция ДоступныеВидыПубликации() Экспорт
	
	Результат = Новый Массив();
	
	Значения = Метаданные.Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.ЗначенияПеречисления;
	ИсключаемыеВидыПубликации = ДополнительныеОтчетыИОбработки.НедоступныеВидыПубликации();
	
	Для Каждого Значение Из Значения Цикл
		Если ИсключаемыеВидыПубликации.Найти(Значение.Имя) = Неопределено Тогда
			Результат.Добавить(Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок[Значение.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(Результат);
	
КонецФункции

// Функция возвращает вид публикации, которые должен использоваться для конфликтующих
//  дополнительных отчетов и обработок.
//
// Возвращаемое значение: ПеречислениеСсылка.ВариантыПубликацииДополнительныхОтчетовИОбработок.
//
Функция ВидПубликацииДляКонфликтующихОбработок() Экспорт
	
	ВидОтключена = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена;
	ВидРежимОтладки = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.РежимОтладки;
	
	ДоступныеВиды = ДоступныеВидыПубликации();
	Если ДоступныеВиды.Найти(ВидРежимОтладки) Тогда
		Возврат ВидРежимОтладки;
	Иначе
		Возврат ВидОтключена;
	КонецЕсли;
	
КонецФункции

// Функция возвращает перечень реквизитов справочников ДополнительныОтчетыИОбработки и
//  ПоставляемыеДополнительныеОтчетыИОбработки, в которых хранятся значения,
//  которые должны использоваться для подключения внешней обработки к информационной базе
//  и выполнения кода дополнительной обработки.
//
// Возвращаемое значение:
//  Строка - имена реквизитов, разделенные запятой.
//
Функция ПараметрыЗапуска() Экспорт
	
	Возврат "БезопасныйРежим, ХранилищеОбработки";
	
КонецФункции

// Формирует настройки формы для назначаемого объекта.
//
Функция ПараметрыФормыНазначаемогоОбъекта(ПолноеИмяФормы) Экспорт
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = Новый Структура("ЭтоФормаОбъекта, ТипФормы, СсылкаРодителя, ВыводитьПодменюЗаполнениеОбъекта");
	
	ЭтаФормаМетаданные = Метаданные.НайтиПоПолномуИмени(ПолноеИмяФормы);

//	LNK 04.11.2016 13:11:48
	Если ЭтаФормаМетаданные = Неопределено Тогда

		Возврат "";

	КонецЕсли;

	РодительМетаданные = ЭтаФормаМетаданные.Родитель();
	Если ТипЗнч(РодительМетаданные) = Тип("ОбъектМетаданныхКонфигурация") Тогда
		Возврат "";
	КонецЕсли;
	
	Результат.ЭтоФормаОбъекта = (РодительМетаданные.ОсновнаяФормаОбъекта = ЭтаФормаМетаданные);
	Если Результат.ЭтоФормаОбъекта Тогда // Форма объекта
		Результат.ТипФормы = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыОбъекта();
		РодительТип = Тип(СтрЗаменить(РодительМетаданные.ПолноеИмя(), ".", "Ссылка."));
		Результат.ВыводитьПодменюЗаполнениеОбъекта = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиЗаполнениеОбъекта.ТипПараметраКоманды.СодержитТип(РодительТип);
	Иначе // Форма списка
		Результат.ТипФормы = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыСписка();
		Результат.ВыводитьПодменюЗаполнениеОбъекта = Ложь;
	КонецЕсли;
	Результат.СсылкаРодителя = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(РодительМетаданные);
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
КонецФункции
