#Область РаспределениеСуммыБонусныхБаловОплата

//	LNK 31.07.2021 10:24:59
Процедура ОчиститьНачислениеБонусныхБалловПоПрограммеЛояльности(Объект, ПрограммаЛояльности, СписокСкидкиНаценки = Неопределено)

	Если СписокСкидкиНаценки = Неопределено Тогда

		СписокСкидкиНаценки = БонусныеБаллыВызовСервера.СкидкиНаценкиПоПрограммеЛояльности(ПрограммаЛояльности);

	КонецЕсли;

	ТаблицыИзменены = Ложь;

	СтрокиНачислениеБонусныхБаллов = Объект.НачислениеБонусныхБаллов.НайтиСтроки(Новый Структура("ПрограммаЛояльности", ПрограммаЛояльности));

	Для каждого СтрокаНачислениеБонусныхБаллов Из СтрокиНачислениеБонусныхБаллов Цикл

		Для каждого СкидкаНаценка Из СписокСкидкиНаценки Цикл

			СтрокиСкидкиНаценки = Объект.СкидкиНаценки.НайтиСтроки(Новый Структура("СкидкаНаценка", СкидкаНаценка));

			Для каждого СтрокаСкидкиНаценки Из СтрокиСкидкиНаценки Цикл

				Объект.СкидкиНаценки.Удалить(СтрокаСкидкиНаценки);
				ТаблицыИзменены = Истина;

			КонецЦикла;

		КонецЦикла;

		Объект.НачислениеБонусныхБаллов.Удалить(СтрокаНачислениеБонусныхБаллов);

	КонецЦикла;

	Если ТаблицыИзменены Тогда	//	нужно пересчитать сумму начисленных бонусных баллов в "Товары".

		Для каждого СтрокаТовары Из Объект.Товары Цикл

			Если НЕ СтрокаТовары.КлючСвязи = 0 Тогда

				СтрокиСкидкиНаценки = Объект.СкидкиНаценки.НайтиСтроки(
					Новый Структура(
						"КлючСвязи, СпособПримененияСкидки"
						, СтрокаТовары.КлючСвязи
						, ПредопределенноеЗначение("Перечисление.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы")
					)
				);

				СтрокаТовары.СуммаБонусныхБалловНачислено = 0;

				Для каждого СтрокаСкидкиНаценки Из СтрокиСкидкиНаценки Цикл

					СтрокаТовары.СуммаБонусныхБалловНачислено = СтрокаТовары.СуммаБонусныхБалловНачислено + СтрокаСкидкиНаценки.Сумма;

				КонецЦикла;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПриИзмененииРеквизитовСтрокиТабличнойЧасти

//	LNK 18.06.2021 13:47:39
Процедура ТоварыПередУдалением(СтрокаТабличнойЧасти, Объект, Отказ = Ложь, ДанныеПродажи = Неопределено)	Экспорт

	Перем ТаблицаТовары, ТаблицаНачисления, ТаблицаСписания, ИмяКритерия;

	Если Отказ = Истина ИЛИ СтрокаТабличнойЧасти = Неопределено Тогда

		Возврат;

	КонецЕсли;

	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда

		ВозвратПриИзмененииКоличества(СтрокаТабличнойЧасти, Объект, ДанныеПродажи, Истина);	//	LNK 12.09.2021 07:02:41

	КонецЕсли;

КонецПроцедуры

//	LNK 04.07.2021 07:45:11
Процедура ТоварыПриОкончанииРедактирования(СтрокаТабличнойЧасти, ДанныеПередИзменением, Объект, Отказ = Ложь, ДанныеПродажи = Неопределено)	Экспорт

	Если Отказ = Истина ИЛИ СтрокаТабличнойЧасти = Неопределено Тогда

		Возврат;

	КонецЕсли;

	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда

		ВозвратПриИзмененииКоличества(СтрокаТабличнойЧасти, Объект, ДанныеПродажи);	//	LNK 12.09.2021 07:02:41

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПоддержкаМеханизмаПересчётаСуммСкидокПриВозврате	//	LNK 14.09.2021 13:06:48

Процедура ВозвратПриИзмененииКоличества(СтрокаТоварыВозврат, Объект, ДанныеПродажи, УдалениеСтроки = Ложь)	//	LNK 12.09.2021 07:01:19

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда

	//	LNK 15.09.2021 20:06:56 - предохранитель
		Если НЕ ТипЗнч(ДанныеПродажи) = Тип("Структура")  Тогда

			ДанныеПродажи = БонусныеБаллыВызовСервера.ПолучитьДанныеДокументаПродажи(Объект.ЧекККМПродажа);

		КонецЕсли;

	//	Примечание:
	//		Если в строках каких-то таблиц возникла пустая сумма, то такие строки здесь НЕ удаляем.
	//		Удаление "пустых" строк должно выполняться при записи (проведении) документа.

		КлючСкидка = ДанныеПродажи.КлючСкидка.Получить(СтрокаТоварыВозврат.КлючСвязи);
		КлючБаллы  = ДанныеПродажи.КлючБаллы.Получить( СтрокаТоварыВозврат.КлючСвязиБонусныхБаллов);

		Если НЕ КлючСкидка = Неопределено Тогда

			Если СтрокаТоварыВозврат.КоличествоУпаковок = 0
			ИЛИ  КлючСкидка.КоличествоУпаковок = 0
			ИЛИ  УдалениеСтроки = Истина
			Тогда

					Коэффициент = 0;

			ИначеЕсли СтрокаТоварыВозврат.КоличествоУпаковок < КлючСкидка.КоличествоУпаковок Тогда

					Коэффициент = СтрокаТоварыВозврат.КоличествоУпаковок / КлючСкидка.КоличествоУпаковок;

			Иначе	Коэффициент = 1;

			КонецЕсли;

			Если Коэффициент <= 1 Тогда

			//	1.	"СкидкиНаценки". Обычные скидки. Приведение реквизита "СуммаАвтоматическойСкидки"
			//	---------------------------------------------------------------------------------------
				СтрокаТоварыВозврат.СуммаАвтоматическойСкидки = 0;

				ОтборыСкидок = Новый Структура("КлючСвязи", СтрокаТоварыВозврат.КлючСвязи);
				ОтборыСкидок.Вставить("СпособПримененияСкидки", ПредопределенноеЗначение("Перечисление.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок"));

				СтрокиСкидкиНаценки = Объект.СкидкиНаценки.НайтиСтроки(ОтборыСкидок);

				Для каждого СтрокаСкидкиНаценки Из СтрокиСкидкиНаценки Цикл

					СтрокаПродажи = ПолучитьДанныеСтрокиПродажи(СтрокаСкидкиНаценки, КлючСкидка.Таблица);

					СтрокаСкидкиНаценки.Сумма = ?(СтрокаПродажи = Неопределено, 0, СтрокаПродажи.Сумма * Коэффициент);
					СтрокаТоварыВозврат.СуммаАвтоматическойСкидки = СтрокаТоварыВозврат.СуммаАвтоматическойСкидки + СтрокаСкидкиНаценки.Сумма;

				КонецЦикла;

			//	2.	Начисление бонусных баллов
			//	---------------------------------------------------------------------------------------
				СтрокаТоварыВозврат.СуммаБонусныхБалловНачислено = 0;	//	итог обнуляем

			//	2.1."СкидкиНаценки". Начисление бонусных баллов. Приведение реквизита "СуммаБонусныхБалловНачислено"
				ОтборыСкидок.Вставить("СпособПримененияСкидки", ПредопределенноеЗначение("Перечисление.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы"));

				СтрокиСкидкиНаценки = Объект.СкидкиНаценки.НайтиСтроки(ОтборыСкидок);

				Для каждого СтрокаСкидкиНаценки Из СтрокиСкидкиНаценки Цикл

					СтрокаПродажи = ПолучитьДанныеСтрокиПродажи(СтрокаСкидкиНаценки, КлючСкидка.Таблица);

					СтрокаСкидкиНаценки.Сумма = ?(СтрокаПродажи = Неопределено, 0, СтрокаПродажи.Сумма * Коэффициент);
					СтрокаТоварыВозврат.СуммаБонусныхБалловНачислено = СтрокаТоварыВозврат.СуммаБонусныхБалловНачислено + СтрокаСкидкиНаценки.Сумма;

				КонецЦикла;

			//	2.2."НачислениеБонусныхБаллов". Суммы по таблице "СкидкиНаценки" (связи ПрограммаЛояльности->СкидкаНаценка)
			//		Таблицу перезаполняем полностью, без учёта ПЛ по изменённым скидкам.
			//		Ведь сумма некоторой ПЛ может содержать в себе суммы скидок, которые не относятся к "СтрокаТоварыВозврат"
				Для каждого СтрокаНачисление Из Объект.НачислениеБонусныхБаллов Цикл

					СтрокаНачисление.СуммаБонусныхБаллов = 0;
					СписокСкидокПрограммы = ДанныеПродажи.СкидкиПрограмм.Получить(СтрокаНачисление.ПрограммаЛояльности);

					Если НЕ СписокСкидокПрограммы = Неопределено Тогда

						Для каждого СкидкаПрограммы Из СписокСкидокПрограммы Цикл

							СтрокиСкидкиНаценки = Объект.СкидкиНаценки.НайтиСтроки(
								Новый Структура(
									"СкидкаНаценка, СпособПримененияСкидки"
									, СкидкаПрограммы
									, ПредопределенноеЗначение("Перечисление.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы")
								)
							);

							Для каждого СтрокаСкидкиНаценки Из СтрокиСкидкиНаценки Цикл

								СтрокаНачисление.СуммаБонусныхБаллов = СтрокаНачисление.СуммаБонусныхБаллов + СтрокаСкидкиНаценки.Сумма;

							КонецЦикла;

						КонецЦикла;

					КонецЕсли;

				КонецЦикла;

			//	3.	Списание бонусных баллов
			//	---------------------------------------------------------------------------------------

				СтрокаТоварыВозврат.СуммаБонусныхБалловСписано = 0;	//	итог обнуляем

				ОтборыСкидок = Новый Структура("КлючСвязиБонусныхБаллов", СтрокаТоварыВозврат.КлючСвязиБонусныхБаллов);

				СтрокиСписаниеБаллов = Объект.ОплатаБонуснымиБаллами.НайтиСтроки(ОтборыСкидок);

				Для каждого СтрокаСписаниеБаллов Из СтрокиСписаниеБаллов Цикл

					СтрокаПродажи = ПолучитьДанныеСтрокиПродажи(СтрокаСписаниеБаллов, КлючБаллы.Таблица, Истина);

					СтрокаСписаниеБаллов.СуммаБонусныхБаллов = ?(СтрокаПродажи = Неопределено, 0, СтрокаПродажи.СуммаБонусныхБаллов * Коэффициент);
					СтрокаТоварыВозврат.СуммаБонусныхБалловСписано = СтрокаТоварыВозврат.СуммаБонусныхБалловСписано + СтрокаСписаниеБаллов.СуммаБонусныхБаллов;

				КонецЦикла;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьДанныеСтрокиПродажи(СтрокаВозврата, ТаблицаПродажи, РежимБаллы = Ложь)	//	LNK 14.09.2021 06:04:20

	СтрокаПродажи = Неопределено;

	Для каждого ЭлементТаблицы Из ТаблицаПродажи Цикл

		Если РежимБаллы = Истина Тогда

			Если ЭлементТаблицы.ПрограммаЛояльности = СтрокаВозврата.ПрограммаЛояльности Тогда

				СтрокаПродажи = ЭлементТаблицы;
				Прервать;

			КонецЕсли;

		Иначе

			Если ЭлементТаблицы.СпособПримененияСкидки = СтрокаВозврата.СпособПримененияСкидки
			И	 ЭлементТаблицы.СкидкаНаценка = СтрокаВозврата.СкидкаНаценка Тогда

				СтрокаПродажи = ЭлементТаблицы;
				Прервать;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат СтрокаПродажи;

КонецФункции

#КонецОбласти

#Область ПоддержкаОграниченияНачисленияПоКредитнымПрограммам

Процедура ПроверитьНачисленияПоКредитнойОплате(Объект, Форма)	Экспорт

	Если ОбщегоНазначенияКлиент.ЕстьРеквизитОбъекта(Форма, "УслугаБанкаДанные") Тогда

		Если БонусныеБаллыВызовСервера.ПродажаПоКредитнойПрограмме(Форма.УслугаБанкаДанные)	Тогда

			СписокОграниченныхПрограмм = БонусныеБаллыВызовСервера.ПолучитьПрограммыОграниченныеПоКредитнойОплате(ПолучитьСписокПрограммЛояльности(Объект.НачислениеБонусныхБаллов));

			Для каждого ДанныеПрограммы Из СписокОграниченныхПрограмм Цикл

				ОчиститьНачислениеБонусныхБалловПоПрограммеЛояльности(Объект, ДанныеПрограммы.ПрограммаЛояльности, ДанныеПрограммы.СкидкиНаценки);

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьСписокПрограммЛояльности(НачислениеБонусныхБаллов)

	СписокПрограмм = Новый Массив;

	Для каждого СтрокаТабличнойЧасти Из НачислениеБонусныхБаллов Цикл

		СписокПрограмм.Добавить(СтрокаТабличнойЧасти.ПрограммаЛояльности);

	КонецЦикла;

	Возврат СписокПрограмм;

КонецФункции

#КонецОбласти

#Область ПрочийФункционалКлиентскойЧасти

Функция ТоварыДляОплатыБонусами(ТоварыКоллекция)	Экспорт

	ДанныеТоваров = Новый Массив;

	Для каждого СтрокаКоллекции Из ТоварыКоллекция Цикл

		ДанныеТоваров.Добавить(Новый Структура(
			"КлючСвязи, КлючСвязиБонусныхБаллов, Номенклатура, Упаковка, СуммаСНДС, СуммаБонусныхБалловСписано, Количество"
				, СтрокаКоллекции.КлючСвязи
				, СтрокаКоллекции.КлючСвязиБонусныхБаллов
				, СтрокаКоллекции.Номенклатура, СтрокаКоллекции.Упаковка
				, СтрокаКоллекции.СуммаВсего
				, СтрокаКоллекции.СуммаБонусныхБалловСписано
				, СтрокаКоллекции.КоличествоУпаковок
			)
		);

	КонецЦикла;

	Возврат ДанныеТоваров;

КонецФункции
	
#КонецОбласти
















