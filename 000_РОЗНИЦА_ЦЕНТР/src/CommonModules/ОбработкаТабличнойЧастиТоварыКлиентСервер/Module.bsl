
// Функция возвращает структуру кэшируемых значений
//
Функция ПолучитьСтруктуруКэшируемыеЗначения() Экспорт
	
	КэшированныеЗначения = Новый Структура;
	КэшированныеЗначения.Вставить("КоэффициентыУпаковок", Новый Соответствие);
	КэшированныеЗначения.Вставить("ОбъемУпаковок",        Новый Соответствие);
	КэшированныеЗначения.Вставить("ВесУпаковок",          Новый Соответствие);
	КэшированныеЗначения.Вставить("ПроцентыСтавокНДС",    Новый Соответствие);
	КэшированныеЗначения.Вставить("Штрихкоды",            Новый Соответствие);
	КэшированныеЗначения.Вставить("ИспользоватьРучныеСкидкиВПродажах",         Неопределено);
	КэшированныеЗначения.Вставить("ИспользоватьАвтоматическиеСкидкиВПродажах", Неопределено);
	КэшированныеЗначения.Вставить("ИспользоватьРучныеСкидкиВЗакупках",         Неопределено);
	
	Возврат КэшированныеЗначения;
	
КонецФункции // ПолучитьСтруктуруКэшируемыеЗначения()

// Рассчитывает сумму НДС от суммы в зависимости от включения НДС в цену
//
// ЦенаВключаетНДС - Булево - Признак включения НДС в цену
// ПроцентНДС      - Число - Ставка НДС числом
// Сумма           - Число - Сумма, от которой необходимо рассчитать сумму НДС
//
Функция РассчитатьСуммуНДС(Сумма, ПроцентНДС, ЦенаВключаетНДС = Истина) Экспорт
	
	Если ЦенаВключаетНДС Тогда
		СуммаНДС = Сумма * ПроцентНДС / (ПроцентНДС + 1);
	Иначе
		СуммаНДС = Сумма * ПроцентНДС;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции // РассчитатьСуммуНДС()

// Рассчитывает сумму НДС от суммы с НДС (Сумма Всего) в зависимости от включения НДС в цену
//
// ЦенаВключаетНДС - Булево - Признак включения НДС в цену
// ПроцентНДС      - Число - Ставка НДС числом
// Сумма           - Число - Сумма с НДС, от которой необходимо рассчитать сумму НДС
//
Функция РассчитатьСуммуНДСПоСуммеСНДС(Сумма, ПроцентНДС, ЦенаВключаетНДС = Истина) Экспорт
	
	Если ЦенаВключаетНДС Тогда
		СуммаНДС = Сумма * ПроцентНДС / (ПроцентНДС + 1);
	Иначе
		СуммаНДС = Сумма * (1 - 1 / (ПроцентНДС + 1));
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции

// Возвращает структуру, которая затем обрабатывается процедурами заполнения ТЧ
//Параметры:
//		Штрихкод - штрихкод, который необходимо обработать
//		Количество - количество товаров с указанным штрихкодом
Функция ПолучитьСтруктуруДанныхШтрихкода(Штрихкод, Количество) Экспорт

	Возврат Новый Структура("Штрихкод, Количество", Штрихкод, Количество);

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПОЛУЧЕНИЯ СТРУКТУР ПАРАМЕТРОВ ДЛЯ ОБРАБОТКИ ТАБЛИЧНОЙ ЧАСТИ "ТОВАРЫ".

// Функция возвращает структуру пересчета суммы НДС в строке
//
Функция ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	СтруктураЗаполненияЦены.Вставить("Дата", Объект.Дата);
 	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Функция возвращает структуру пересчета суммы НДС в табличной части
//
Функция ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	СтруктураЗаполненияЦены.Вставить("НеобходимоОбработатьВсюТЧ");
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Функция возвращает структуру заполнения ставки НДС
//
Функция ПолучитьСтруктуруЗаполненияСтавкиНДС(Объект) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Дата"       , Объект.Дата);
	Результат.Вставить("Организация", Объект.Организация);
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает структуру обработки штрихкода
//
Функция ПолучитьСтруктуруОбработкиШтрихкодов(Объект, Штрихкоды, СтруктураДействийСДобавленнымиСтроками,
	
	СтруктураДействийСИзмененнымиСтроками) Экспорт
	
	Если ТипЗнч(Штрихкоды) = Тип("Массив") Тогда
		МассивШтрихкодов = Штрихкоды;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(Штрихкоды);
	КонецЕсли;
	
	СтруктураОбработкиШтрихкода = Новый Структура;
	СтруктураОбработкиШтрихкода.Вставить("Штрихкоды",                              МассивШтрихкодов);
	СтруктураОбработкиШтрихкода.Вставить("СтруктураДействийСДобавленнымиСтроками", СтруктураДействийСДобавленнымиСтроками);
	СтруктураОбработкиШтрихкода.Вставить("СтруктураДействийСИзмененнымиСтроками",  СтруктураДействийСИзмененнымиСтроками);
	СтруктураОбработкиШтрихкода.Вставить("НеизвестныеШтрихкоды",                   Новый Массив);
	
	Возврат СтруктураОбработкиШтрихкода;
	
КонецФункции

// Функция возвращает структуру проверки серийных номеров по владельцу
//
Функция ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, ТЧСерийныеНомера) Экспорт
	
	СтруктураПроверкиСерийныхНомеровПоВладельцу = Новый Структура;
	СтруктураПроверкиСерийныхНомеровПоВладельцу.Вставить(
		"МассивСерийныхНомеров",
		ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(ТекущаяСтрока.КлючСвязиСерийныхНомеров, ТЧСерийныеНомера)
	);
	
	Возврат СтруктураПроверкиСерийныхНомеровПоВладельцу;
	
КонецФункции

// Функция возвращает массив серийных номеров строки товаров
//
Функция ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(КлючСвязи, ТЧСерийныеНомера, ИмяТаблицы = "Товары") Экспорт

	Результат = Новый Массив;

	Попытка	//	LNK 12.02.2020 11:54:31

		СтрокиСерий = ТЧСерийныеНомера.НайтиСтроки(Новый Структура("КлючСвязиСерийныхНомеров, ИмяТаблицы", КлючСвязи, ИмяТаблицы));

	Исключение

		СтрокиСерий = ТЧСерийныеНомера.НайтиСтроки(Новый Структура("КлючСвязиСерийныхНомеров", КлючСвязи));

	КонецПопытки;

	Если КлючСвязи > 0 Тогда

		Для Каждого ТекСтрока Из СтрокиСерий Цикл

			Результат.Добавить(ТекСтрока.СерийныйНомер);

		КонецЦикла;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция возвращает структуру пересчета цены и скидки при продаже
//
Функция ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ИспользоватьРучныеСкидки");
	СтруктураЗаполненияЦены.Вставить("ИспользоватьАвтоматическиеСкидки");
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Функция возвращает структуру пересчета цены и скидки при закупках
//
Функция ПолучитьСтруктуруПересчетаЦеныСкидкиВЗакупкахВТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ИспользоватьРучныеСкидки");
	СтруктураЗаполненияЦены.Вставить("ИспользоватьАвтоматическиеСкидки");
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Функция возвращает структуру заполнения цены продажи в строке
//
Функция ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, ПриводитьКМинимальнойЦене = Ложь, АкционнаяЦена = Ложь) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	
	СтруктураЗаполненияЦены.Вставить("Дата"                     , Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("ОбъектЦенообразования"    , Объект.Магазин);
	СтруктураЗаполненияЦены.Вставить("ПриводитьКМинимальнойЦене", ПриводитьКМинимальнойЦене);
	
	Если АкционнаяЦена Тогда

		СтруктураЗаполненияЦены.Вставить("ПроверитьАкционнуюЦену", Истина);

	КонецЕсли;

	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Функция возвращает структуру заполнения цены назначенной в строке
//
Функция ПолучитьСтруктуруЗаполненияЦеныНазначеннойВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата"                     , Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("ОбъектЦенообразования"    , Объект.Магазин);
	СтруктураЗаполненияЦены.Вставить("ПриводитьКМинимальнойЦене", Ложь);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Функция возвращает структуру заполнения цены по виду цен
//
Функция ПолучитьСтруктуруЗаполненияЦеныПоВидуЦенВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата"   , Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("ВидЦены", Объект.ВидЦены);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Функция возвращает структуру заполнения цены закупки в строке
//
Функция ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата"       , Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Магазин"    , Объект.Магазин);
	СтруктураЗаполненияЦены.Вставить("Контрагент" , Объект.Контрагент);
	СтруктураЗаполненияЦены.Вставить("Ссылка"     , Объект.Ссылка);
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

#Область РасчетСуммПроцентовСтрокиТабличнойЧасти

Процедура РассчитатьРезультатСкидкиВСтрокеТЧ(СтрокаТабличнойЧасти, ЦенаВключаетНДС, УчитыватьБонусныеБаллы = Ложь)	Экспорт

//	Скидки уже все применены.. нужно только привести их в соответствие с бонусной скидкой.
	СуммаБезСкидки	= СтрокаТабличнойЧасти.КоличествоУпаковок * СтрокаТабличнойЧасти.Цена;
	СуммаВсехСкидок	= СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки
					+ СтрокаТабличнойЧасти.СуммаРучнойСкидки
					+ ?(УчитыватьБонусныеБаллы = Истина, СтрокаТабличнойЧасти.СуммаБонусныхБалловСписано, 0)
	;

	СтрокаТабличнойЧасти.Сумма	  = Макс(0, СуммаБезСкидки - СуммаВсехСкидок);
	СтрокаТабличнойЧасти.СуммаНДС = СкидкиНаценкиСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.СтавкаНДС, ЦенаВключаетНДС);
	СтрокаТабличнойЧасти.СуммаВсего = СтрокаТабличнойЧасти.СуммаВсего + ?(ЦенаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);

КонецПроцедуры
	
#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОТОБРАЖЕНИЯ ИТОГОВ ТЧ НА ФОРМЕ ДОКУМЕНТА

// Заполняет поле СуммаВсего в зависимости от признака включения НДС в цену
//
// Параметры:
// Таблица         - ДанныеФормыКоллекция - Таблица, в которой необходимо заполнить колонку СуммаВсего
// ЦенаВключаетНДС - Булево - признак включения НДС в цену
//
Процедура ЗаполнитьСуммуВсегоВТаблице(Таблица, ЦенаВключаетНДС) Экспорт
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл

		ЗаполнитьСуммуВсегоВСтрокеТаблицы(СтрокаТаблицы, ЦенаВключаетНДС);

	КонецЦикла;
	
КонецПроцедуры

// Заполняет поле СуммаВсего в зависимости от признака включения НДС в цену
//
// Параметры:
// СтрокаТаблицы   - ДанныеФормыЭлементКоллекции - Строка таблицы, в которой необходимо заполнить поле СуммаВсего
// ЦенаВключаетНДС - Булево - признак включения НДС в цену
//
Процедура ЗаполнитьСуммуВсегоВСтрокеТаблицы(СтрокаТаблицы, ЦенаВключаетНДС, УчитыватьАкцизныйНалог = Ложь) Экспорт

	Если ЦенаВключаетНДС Тогда

		Если СтрокаТаблицы.СуммаВсего <> СтрокаТаблицы.Сумма Тогда

			СтрокаТаблицы.СуммаВсего = СтрокаТаблицы.Сумма;

		КонецЕсли;

	Иначе

		Если УчитыватьАкцизныйНалог Тогда

				СуммаВсего = СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС
												 + СтрокаТаблицы.СуммаАкцизногоНалога;

		Иначе	СуммаВсего = СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС;

		КонецЕсли; 

		Если НЕ СтрокаТаблицы.СуммаВсего = СуммаВсего Тогда

			СтрокаТаблицы.СуммаВсего = СуммаВсего;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Получает сумму ручных скидок
//
// Параметры:
// Товары         		  - тч документа для подсчета суммы ручных скидок
// СуммаРучныхСкидок      - переменная, в которую будет помещена итоговая сумма
//
Процедура ПолучитьСуммуРучныхСкидокДокумента(Знач Товары, СуммаРучныхСкидок) Экспорт
	
	СуммаИтог = Товары.Итог("СуммаРучнойСкидки");

	Если СуммаИтог <> СуммаРучныхСкидок Тогда
		СуммаРучныхСкидок = СуммаИтог;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСуммуВсегоВСтрокеТаблицы()

// Рассчитывает сумму документа и помещает рассчитанное значение в реквизит формы СуммаВсего
//
// Параметры:
// Товары          - тч документа для подсчета суммы документа
// ЦенаВключаетНДС - Признак включения НДС в цену документа
// СуммаВсего      - Реквизит формы документа, в который будет помещена сумма
//
Процедура ОбновитьСуммыПодвала(Знач ТабличнаяЧасть, Знач ЦенаВключаетНДС, СуммаВсего, УчитыватьАкцизныйНалог = Ложь) Экспорт

 	СуммаДокумента = ПолучитьСуммуДокумента(ТабличнаяЧасть, ЦенаВключаетНДС, УчитыватьАкцизныйНалог);

	Если НЕ СуммаДокумента = СуммаВсего Тогда

		СуммаВсего = СуммаДокумента;

	КонецЕсли;

КонецПроцедуры

// Возвращает сумму документа с учетом НДС
//
// Параметры:
// Товары          - тч документа для подсчета суммы документа
// ЦенаВключаетНДС - Признак включения НДС в цену документа
//
// Возвращаемое значение:
// Число
// Сумма документа с учетом НДС
//
Функция ПолучитьСуммуДокумента(Знач ТабличнаяЧасть, Знач ЦенаВключаетНДС, УчитыватьАкцизныйНалог = Ложь) Экспорт

	СуммаДокумента = 0;
	
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		
		#Если Сервер Тогда
			Если ТипЗнч(ТабличнаяЧасть) = Тип("ДокументТабличнаяЧасть.ЗаказПокупателя.Товары") 
					И СтрокаТЧ.Отменено Тогда
				Продолжить;
			КонецЕсли;
		
		Если ТипЗнч(ТабличнаяЧасть) = Тип("ТаблицаЗначений") 
				И Не ТабличнаяЧасть.Колонки.Найти("Отменено") = Неопределено Тогда
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		#КонецЕсли
		
		Если ТипЗнч(ТабличнаяЧасть) = Тип("ДанныеФормыКоллекция") 
				И СтрокаТЧ.Свойство("Отменено") Тогда
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СуммаДокумента = СуммаДокумента + СтрокаТЧ.Сумма;

		Если НЕ ЦенаВключаетНДС Тогда
	
			Если УчитыватьАкцизныйНалог Тогда
	
				СуммаДокумента = СуммаДокумента + СтрокаТЧ.СуммаНДС + СтрокаТЧ.СуммаАкцизногоНалога;
	
			Иначе
	
			  	СуммаДокумента = СуммаДокумента + СтрокаТЧ.СуммаНДС;
	
			КонецЕсли; 
	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СуммаДокумента;

КонецФункции

//	LNK 05.06.2020 08:06:12
Процедура ОбновитьСуммуКредита(Знач Товары, Знач Оплата, Знач ЦенаВключаетНДС, СуммаКредита, УчитыватьАкцизныйНалог = Ложь)	Экспорт

 	СуммаДокумента = ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС, УчитыватьАкцизныйНалог);
	СуммаКредита   = Макс(0, СуммаДокумента - Оплата.Итог("Сумма"));

КонецПроцедуры

//	LNK 15.07.2021 10:43:12
Процедура ОбновитьСуммыСкидкиНаценки(Знач ТабличнаяЧасть, СуммаСкидкиНаценки, ЕстьСпособПримененияСкидки = Ложь)	Экспорт

	Если ЕстьСпособПримененияСкидки = Истина Тогда

		СуммаСкидкиНаценки = 0;

		Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл

			Если НЕ СтрокаТабличнойЧасти.СпособПримененияСкидки = ПредопределенноеЗначение("Перечисление.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы") Тогда

				СуммаСкидкиНаценки = СуммаСкидкиНаценки + СтрокаТабличнойЧасти.Сумма;

			КонецЕсли;

		КонецЦикла;

	Иначе

		СуммаСкидкиНаценки = ТабличнаяЧасть.Итог("Сумма");

	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЕРИИ

// Процедура обновляет кеш ключевых реквизитов текущей строки товаров. По ключевым реквизитам осуществляется связь
// между ТЧ серий и ТЧ товаров
// Параметры
//		ТаблицаФормы - таблица формы, отображающая ТЧ товаров
//      КэшированныеЗначения - переменная модуля формы, в которой хранятся кешируемые значения
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соответствующей процедурой модуля менеджера документа
//      Копирование - признак, что кешированная строка скопирована (параметр события ПриНачалеРедактирования)
Процедура ОбновитьКэшированныеЗначенияДляУчетаСерий(ТекущаяСтрока,КэшированныеЗначения,ПараметрыУказанияСерий,Копирование = Ложь) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	ИмяТЧТовары = "";
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧТовары", ИмяТЧТовары) Тогда
		ИмяТЧТовары = "Товары";
	КонецЕсли;
	
	ИмяТЧСерии  = "";
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	ИмяКолонкиКоличество = "";
	Если Не ПараметрыУказанияСерий.Свойство("ИмяКолонкиКоличество", ИмяКолонкиКоличество) Тогда
		ИмяКолонкиКоличество = "Количество";
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.Свойство("ЭтоЗаказ")
		И ПараметрыУказанияСерий.ЭтоЗаказ
		И ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки")) = Неопределено
		И ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки")) = Неопределено Тогда
		ЕстьОтменаСтроки = Истина;
	Иначе
		ЕстьОтменаСтроки = Ложь;
	КонецЕсли;
	
	Если ТекущаяСтрока <> Неопределено
		И (Не Копирование
			Или ИмяТЧТовары = ИмяТЧСерии) Тогда
		
		КэшированныеЗначения.Вставить("Номенклатура"      , ТекущаяСтрока.Номенклатура);
		КэшированныеЗначения.Вставить("Характеристика"    , ТекущаяСтрока.Характеристика);
		КэшированныеЗначения.Вставить(ИмяКолонкиКоличество, ТекущаяСтрока[ИмяКолонкиКоличество]);
		
		Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
			КэшированныеЗначения.Вставить(СтрМас,ТекущаяСтрока[СтрМас]);
		КонецЦикла;
		Если ЕстьОтменаСтроки Тогда
			КэшированныеЗначения.Вставить("Отменено",ТекущаяСтрока.Отменено);
		КонецЕсли;
		
	Иначе
		КэшированныеЗначения.Вставить("Номенклатура"        , Неопределено);
		КэшированныеЗначения.Вставить("Характеристика"      , Неопределено);
		КэшированныеЗначения.Вставить(ИмяКолонкиКоличество, 0);
		
		Если ЕстьОтменаСтроки Тогда
			КэшированныеЗначения.Вставить("Отменено", Неопределено);
		КонецЕсли;
		
		Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
			КэшированныеЗначения.Вставить(СтрМас,Неопределено);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет возможность регистрации новых серий, при указании серий в документе
//Параметры
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соответствующей процедурой модуля менеджера документа
//
//Возвращаемоен значение - тип "Булево" - ИСТИНА - можно регистрировать новые серии, ЛОЖЬ - серии можно подбирать только по остаткам
Функция НеобходимоРегистрироватьСерии(ПараметрыУказанияСерий) Экспорт
	ТоварВШапке = Ложь;
	Если Не ПараметрыУказанияСерий.Свойство("ТоварВШапке", ТоварВШапке) Тогда
		ТоварВШапке = Ложь;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.Свойство("РегистрироватьСерии") Тогда
		РегистрироватьСерии = ПараметрыУказанияСерий.РегистрироватьСерии;
	ИначеЕсли (ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКлиенту")) <> Неопределено 
		Или ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки")) <> Неопределено
		    И Не ТоварВШапке
		Или ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки")) <> Неопределено
		    И ТоварВШапке
		Или ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаПоВозвратуПоставщику")) <> Неопределено 
		Или ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаПоПеремещению")) <> Неопределено) Тогда
		РегистрироватьСерии = Ложь;
	Иначе
		РегистрироватьСерии = Истина;
	КонецЕсли;
	
	Возврат РегистрироватьСерии;
КонецФункции




