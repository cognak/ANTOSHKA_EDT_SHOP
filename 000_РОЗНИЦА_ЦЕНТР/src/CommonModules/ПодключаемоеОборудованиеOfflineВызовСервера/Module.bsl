
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция получает параметры устройства
//
Функция ПолучитьПараметрыУстройства(Устройство) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.ПравилоОбмена КАК ПравилоОбмена,
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.Склад.Магазин.ПравилоЦенообразования.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦены,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.МаксимальныйКодPLU, 0) КАК МаксимальныйКодPLU,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.СвояНумерацияPLUНаОборудовании, Ложь) КАК СвояНумерацияPLUНаОборудовании,
	|	ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство";
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПравилоОбмена",                  Выборка.ПравилоОбмена);
	ВозвращаемоеЗначение.Вставить("УзелИнформационнойБазы",         Выборка.УзелИнформационнойБазы);
	ВозвращаемоеЗначение.Вставить("Склад",                          Выборка.Склад);
	ВозвращаемоеЗначение.Вставить("ВидЦены",                        Выборка.ВидЦены);
	ВозвращаемоеЗначение.Вставить("ТипОборудования",                Выборка.ТипОборудования);
	ВозвращаемоеЗначение.Вставить("МаксимальныйКодPLU",             Выборка.МаксимальныйКодPLU);
	ВозвращаемоеЗначение.Вставить("СвояНумерацияPLUНаОборудовании", Строка(Выборка.СвояНумерацияPLUНаОборудовании));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция удаляет регистрация изменений для устройства.
//
// Параметры:
//  Устройство - <СправочникСсылка.ПодключаемоеОборудование>
//
// Возвращаемое значение:
//  Нет
//
Процедура УдалитьРегистрациюИзменений(Устройство) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.УзелИнформационнойБазы);
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Функция регистрирует изменения для устройства.
//
// Параметры:
//  Устройство - <СправочникСсылка.ПодключаемоеОборудование>
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗарегистрироватьИзменения(Устройство) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	КодыТоваровPLUНаОборудовании.КодТовараPLU КАК КодТовараPLU,
	|	КодыТоваровPLUНаОборудовании.ПравилоОбмена КАК ПравилоОбмена
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
	|		ПО ПодключаемоеОборудование.ПравилоОбмена = КодыТоваровPLUНаОборудовании.ПравилоОбмена
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	
	Набор = РегистрыСведений.КодыТоваровPLUНаОборудовании.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ПравилоОбмена) Тогда
			
			Набор.Отбор.ПравилоОбмена.Значение = Выборка.ПравилоОбмена;
			Набор.Отбор.ПравилоОбмена.Использование = Истина;
		
			Набор.Отбор.КодТовараPLU.Значение = Выборка.КодТовараPLU;
			Набор.Отбор.КодТовараPLU.Использование = Истина;
		
			ПланыОбмена.ЗарегистрироватьИзменения(Выборка.УзелИнформационнойБазы, Набор);
			
		КонецЕсли;
	
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Функция регистрирует изменения для правила обмена
//
Процедура ЗарегистрироватьИзмененияДляПравилаОбмена(ПравилоОбмена) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ПравилоОбмена = &ПравилоОбмена");
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(Выборка.УзелИнформационнойБазы, Метаданные.РегистрыСведений.КодыТоваровPLUНаОборудовании);
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Процедура вызывается при очистке товаров в устройстве.
// Выполняет запись информации в узел плана обмена.
//
// Параметры:
//  Устройство       - <СправочникСсылка.ПодключаемоеОборудование>
//  ВыполненоУспешно - <Булево> Признак успешного выполнения операции
//
// Возвращаемое значение:
//  Нет
//
Процедура ПриОчисткеТоваровВУстройстве(Устройство, ВыполненоУспешно = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		УзелОбъект = Выборка.УзелИнформационнойБазы.ПолучитьОбъект();
		УзелОбъект.ДатаВыгрузки      = ТекущаяДатаСеанса();
		УзелОбъект.ВыгрузкаВыполнена = ВыполненоУспешно;
		УзелОбъект.Записать();
	КонецЦикла;
	
	ПодключаемоеОборудованиеOfflineВызовСервера.ЗарегистрироватьИзменения(Устройство);
	
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура вызывается при выгрузке товаров в устройство.
// Выполняет запись информации в узел плана обмена.
//
// Параметры:
//  Устройство       - <СправочникСсылка.ПодключаемоеОборудование>
//  ВыполненоУспешно - <Булево> Признак успешного выполнения операции
//
// Возвращаемое значение:
//  Нет
//
Процедура ПриВыгрузкеТоваровВУстройство(Устройство, СтруктураДанные, ВыгружатьИзменения, ВыполненоУспешно = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы  КАК УзелИнформационнойБазы,
	|	ПодключаемоеОборудование.ПравилоОбмена           КАК ПравилоОбмена,     
	|	ПодключаемоеОборудование.ТипОборудования         КАК ТипОборудования
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
		
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		
		Если ВыполненоУспешно И СтруктураДанные <> Неопределено Тогда
			
			Если ВыгружатьИзменения Тогда
				
				ВыгрузкаНаВесы = (Выборка.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток);
				Набор = РегистрыСведений.КодыТоваровPLUНаОборудовании.СоздатьНаборЗаписей();
				Для Каждого СтрокаТЧ Из СтруктураДанные.Данные Цикл
					
					Набор.Отбор.ПравилоОбмена.Значение = Выборка.ПравилоОбмена;
					Набор.Отбор.ПравилоОбмена.Использование = Истина;
					
					Если ВыгрузкаНаВесы Тогда  
						Набор.Отбор.КодТовараPLU.Значение = СтрокаТЧ.PLU;
					Иначе
						Набор.Отбор.КодТовараPLU.Значение = СтрокаТЧ.Код;
					КонецЕсли;
					
					Набор.Отбор.КодТовараPLU.Использование = Истина;
					
					ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.УзелИнформационнойБазы, Набор);
					
				КонецЦикла;
				
			Иначе
				
				ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.УзелИнформационнойБазы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		УзелОбъект = Выборка.УзелИнформационнойБазы.ПолучитьОбъект();
		УзелОбъект.ДатаВыгрузки      = ТекущаяДатаСеанса();
		УзелОбъект.ВыгрузкаВыполнена = ВыполненоУспешно;
		УзелОбъект.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура вызывается при загрузке отчета о розничных продажах с устройства.
// Выполняет запись информации в узел плана обмена. Создает отчет о розничных продажах.
//
// Параметры:
//  Устройство       - <СправочникСсылка.ПодключаемоеОборудование>
//  ВыполненоУспешно - <Булево> Признак успешного выполнения операции
//
// Возвращаемое значение:
//  Нет
//
Функция ПриЗагрузкеОтчетаОРозничныхПродажах(Устройство, МассивДанных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СправочникПодключаемоеОборудование.ПравилоОбмена КАК ПравилоОбмена,
	|	СправочникПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена.Склад КАК Склад,
	|	КассыККМ.Владелец КАК Организация
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК СправочникПодключаемоеОборудование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК КассыККМ
	|		ПО (КассыККМ.ПодключаемоеОборудование = СправочникПодключаемоеОборудование.Ссылка)
	|ГДЕ
	|	СправочникПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Код",        Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Цена",       Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Скидка",     Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Сумма",      Новый ОписаниеТипов("Число"));
	
	Для каждого СтрокаТЧ Из МассивДанных Цикл
		НоваяСтрока = ТаблицаТоваров.Добавить();
		НоваяСтрока.Код        = СтрокаТЧ.Код;
		НоваяСтрока.Цена       = СтрокаТЧ.Цена;
		НоваяСтрока.Количество = СтрокаТЧ.Количество;
		НоваяСтрока.Скидка     = СтрокаТЧ.Скидка;
		НоваяСтрока.Сумма      = СтрокаТЧ.Сумма;
	КонецЦикла;
	
	ТаблицаТоваров.Свернуть("Код, Цена, Скидка", "Количество, Сумма");
	
	Запрос = Новый Запрос(
	
	"ВЫБРАТЬ
	|	Товары.Код КАК Код,
	|	Товары.Цена КАК Цена,
	|	Товары.Количество КАК Количество,
	|	Товары.Скидка КАК Скидка,
	|	Товары.Сумма КАК Сумма
	|ПОМЕСТИТЬ Товары         
	|ИЗ &ТаблицаЗначений КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КодыТоваровSKU.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))                 КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровSKU.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровSKU.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка))             КАК Упаковка,
	|	Товары.Количество                                                                                 КАК КоличествоУпаковок,
	|	ЕСТЬNULL(КодыТоваровSKU.Упаковка.Коэффициент, 1) * Товары.Количество КАК Количество,
	|	Товары.Цена                                                                                       КАК Цена,
	|	Товары.Сумма                                                                                      КАК Сумма,
	|	Товары.Скидка                                                                                     КАК ПроцентРучнойСкидки,
	|	КодыТоваровSKU.Номенклатура.СтавкаНДС                                                             КАК СтавкаНДС
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ПО Товары.Код = КодыТоваровSKU.SKU");
	
	Запрос.УстановитьПараметр("ПравилоОбмена",   Выборка.ПравилоОбмена);
	Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаТоваров);
	
	ОтчетОРозничныхПродажахОбъект = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	ОтчетОРозничныхПродажахОбъект.Дата               = ТекущаяДатаСеанса();
	ОтчетОРозничныхПродажахОбъект.Магазин            = Выборка.Склад.Магазин;
	ОтчетОРозничныхПродажахОбъект.КассаККМ           = Выборка.КассаККМ;
	ОтчетОРозничныхПродажахОбъект.Комментарий        = НСтр("ru = 'Загружено из ККМ Offline:'") + " " + Устройство;
	ОтчетОРозничныхПродажахОбъект.Организация        = Выборка.Организация;
	ОтчетОРозничныхПродажахОбъект.Ответственный      = Пользователи.ТекущийПользователь();
	ОтчетОРозничныхПродажахОбъект.ЦенаВключаетНДС    = Истина;
	
	ВыборкаПоТоварам = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоТоварам.Следующий() Цикл
		
		НоваяСтрока = ОтчетОРозничныхПродажахОбъект.Товары.Добавить();
		НоваяСтрока.Склад                = Выборка.Склад;
		НоваяСтрока.Номенклатура         = ВыборкаПоТоварам.Номенклатура;
		НоваяСтрока.Характеристика       = ВыборкаПоТоварам.Характеристика;
		НоваяСтрока.Упаковка             = ВыборкаПоТоварам.Упаковка;
		НоваяСтрока.Количество           = ВыборкаПоТоварам.Количество;
		НоваяСтрока.КоличествоУпаковок   = ВыборкаПоТоварам.КоличествоУпаковок;
		НоваяСтрока.Сумма                = ВыборкаПоТоварам.Сумма;
		НоваяСтрока.Цена                 = ВыборкаПоТоварам.Цена;
		НоваяСтрока.СтавкаНДС            = ВыборкаПоТоварам.СтавкаНДС;
		НоваяСтрока.ПроцентСкидкиНаценки = ВыборкаПоТоварам.ПроцентРучнойСкидки;
	КонецЦикла;
	
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ОтчетОРозничныхПродажах.ПараметрыУказанияСерий(ОтчетОРозничныхПродажахОбъект));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(ОтчетОРозничныхПродажахОбъект,ПараметрыУказанияСерий);
		
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ОтчетОРозничныхПродажахОбъект));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , ОтчетОРозничныхПродажахОбъект.Товары);
	
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	Попытка
		Если ОтчетОРозничныхПродажахОбъект.ПроверитьЗаполнение() Тогда
			ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	Исключение
		ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
	СуммаВыемки = ОтчетОРозничныхПродажахОбъект.Товары.Итог("Сумма");
	Если СуммаВыемки <> 0.00 Тогда
		
		ДокументВыемкаДенежныхСредствСсылка = ДенежныеСредстваСервер.СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(СуммаВыемки, ОтчетОРозничныхПродажахОбъект.КассаККМ, ОтчетОРозничныхПродажахОбъект.Ссылка);
		
		ДокументВыемкаДенежныхСредствОбъект = ДокументВыемкаДенежныхСредствСсылка.ПолучитьОбъект();
		Попытка
			Если ДокументВыемкаДенежныхСредствОбъект.ПроверитьЗаполнение() Тогда
				ДокументВыемкаДенежныхСредствОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	УзелОбъект = Выборка.УзелИнформационнойБазы.ПолучитьОбъект();
	УзелОбъект.ДатаЗагрузки = ТекущаяДатаСеанса();
	УзелОбъект.Записать();
	
	Возврат ОтчетОРозничныхПродажахОбъект.Ссылка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С РЕГИСТРОМ КОДЫ ТОВАРОВ ПОДКЛЮЧАЕМОГО ОБОРУДОВАНИЯ

// Функция возвращает максимальный код товара в регистре КодыТоваровПодключаемогоОборудованияOffline
// для заданного правила обмена.
//
Функция ПолучитьМаксимальныйPLU(ПравилоОбмена) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(КодыТоваровPLUНаОборудовании.КодТовараPLU), 0) КАК КодТовараPLU
	|ИЗ
	|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
	|ГДЕ
	|	КодыТоваровPLUНаОборудовании.ПравилоОбмена = &ПравилоОбмена");
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КодТовараPLU;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Очистить PLU для правила обмена
//
Процедура ОчиститьPLUДляПравилаОбмена(ПравилоОбмена) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КодыТоваровPLUНаОборудовании.КодТовараPLU
	|ИЗ
	|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
	|ГДЕ
	|	КодыТоваровPLUНаОборудовании.ПравилоОбмена = &ПравилоОбмена");
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МенеджерЗаписи = РегистрыСведений.КодыТоваровPLUНаОборудовании.СоздатьМенеджерЗаписи();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи.ПравилоОбмена = ПравилоОбмена;
		МенеджерЗаписи.КодТовараPLU = Выборка.КодТовараPLU; 
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает таблицу свободных кодов товара в регистре КодыТоваровПодключаемогоОборудованияOffline
// для заданного правила обмена. Свободными являются коды, для которых не задана соответствующая номенклатура.
//
// Параметры:
//  ПравилоОбмена - <СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline>
//  Количество - <Число> - Необходимое количество свободных кодов.
//
// Возвращаемое значение:
//  <ТаблицаЗначений> - Таблица свободных кодов товаров.
//
Функция ПолучитьСвободныеКоды(ПравилоОбмена, Количество = 0) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ //ПЕРВЫЕ
	|	КодыТоваровPLUНаОборудовании.КодТовараPLU КАК КодТовараPLU
	|ИЗ
	|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
	|ГДЕ
	|	КодыТоваровPLUНаОборудовании.ПравилоОбмена = &ПравилоОбмена
	|	И КодыТоваровPLUНаОборудовании.КодТовараSKU  = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодыТоваровPLUНаОборудовании.КодТовараPLU Возр");
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПЕРВЫЕ", ?(Количество = 0,"","ПЕРВЫЕ" + " " + Формат(Количество, "ЧГ=0")));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Записать PLU
//
Процедура ЗаписатьPLU(ПравилоОбмена, КодТовараPLU, КодТовараSKU) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.КодыТоваровPLUНаОборудовании.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПравилоОбмена = ПравилоОбмена;
	МенеджерЗаписи.КодТовараPLU = КодТовараPLU;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.ПравилоОбмена = ПравилоОбмена;
		МенеджерЗаписи.КодТовараPLU  = КодТовараPLU;
		МенеджерЗаписи.КодТовараSKU  = КодТовараSKU;
		МенеджерЗаписи.Записать();
	Иначе
		МенеджерЗаписи = РегистрыСведений.КодыТоваровPLUНаОборудовании.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПравилоОбмена = ПравилоОбмена;
		МенеджерЗаписи.КодТовараPLU  = КодТовараPLU;
		МенеджерЗаписи.КодТовараSKU  = КодТовараSKU;
		МенеджерЗаписи.Записать();
	КонецЕсли;

КонецПроцедуры

// Удалить PLU
//
Процедура УдалитьPLU(ПравилоОбмена, КодТовараPLU) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.КодыТоваровPLUНаОборудовании.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПравилоОбмена = ПравилоОбмена;
	МенеджерЗаписи.КодТовараPLU = КодТовараPLU;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

// Формирует текст запроса к тч Товары и помещает тч во временную таблицу
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросВременнаяТаблицаSKU(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.SKU КАК SKU,
	|	Товары.Весовой КАК Весовой,
	|	Товары.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ТаблицаДанныхСОтбором
	|ИЗ
	|	&Товары КАК Товары
	|//Условия ГДЕ ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|ИНДЕКСИРОВАТЬ ПО
	|	SKU
	|;";
	
КонецПроцедуры // СформироватьЗапросВременнаяТаблицаТовары()

// Получить коды товаров для правила обмена
//
Функция ПолучитьКодыТоваров(ПравилоОбмена, ОбновитьSKU, ПересоздатьPLU = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Если ПересоздатьPLU Тогда
		НачатьТранзакцию();   
		ОчиститьPLUДляПравилаОбмена(ПравилоОбмена);
		ЗафиксироватьТранзакцию();
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.НастройкиКомпоновкиДанных КАК НастройкиКомпоновкиДанных,
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.ТипПодключаемогоОборудования КАК ТипПодключаемогоОборудования,     
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.СвояНумерацияPLUНаОборудовании КАК СвояНумерацияPLUНаОборудовании,   
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.МаксимальныйКодPLU КАК МаксимальныйКодPLU
	|ИЗ
	|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline
	|ГДЕ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка = &ПравилоОбмена");
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МаксимальныйКодPLU = Выборка.МаксимальныйКодPLU;
	ВыгрузкаНаВесы = Выборка.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток;
	СвояНумерацияPLUНаОборудовании = Выборка.СвояНумерацияPLUНаОборудовании;
	Если НЕ ВыгрузкаНаВесы Тогда
		СвояНумерацияPLUНаОборудовании = Ложь;
	КонецЕсли;
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюИспользованияАссортимента();
	Если ИспользоватьАссортимент Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеКодовSKUАссортимент");
	Иначе
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеКодовSKU");
	КонецЕсли;
	
	// Подготовка компоновщика макета компоновки данных, загрузка настроек
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	Компоновщик.ЗагрузитьНастройки(Выборка.НастройкиКомпоновкиДанных.Получить());
	Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	// Заполнение структуры отчета и выбранных полей.
	Компоновщик.Настройки.Структура.Очистить();
	
	ГруппировкаДетальныеЗаписи = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДетальныеЗаписи.Использование = Истина;
	
	Компоновщик.Настройки.Выбор.Элементы.Очистить();
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Номенклатура");
	ВыбранноеПоле.Использование = Истина;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Характеристика");
		ВыбранноеПоле.Использование = Истина;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Упаковка");
		ВыбранноеПоле.Использование = Истина;
	КонецЕсли;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("SKU");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Весовой");
	ВыбранноеПоле.Использование = Истина;

	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("ТипНоменклатуры");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("КоличествоОстаток");
	ВыбранноеПоле.Использование = Истина;
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(Компоновщик);
	
	Если ИспользоватьАссортимент Тогда
		ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(Компоновщик.Настройки, "ОбъектПланирования", ПравилоОбмена.Склад.Магазин.ФорматМагазина);
		ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(Компоновщик.Настройки, "НаДату", ТекущаяДатаСеанса());
	КонецЕсли;
	
	// Компоновка макета и исполнение запроса.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("Дата");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ПравилоОбмена");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПравилоОбмена;
	КонецЕсли;
	
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("Склад");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПравилоОбмена.Склад;
	КонецЕсли;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ДанныеОтчета = Новый ТаблицаЗначений();
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		ДанныеОтчета.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		ДанныеОтчета.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	СформироватьЗапросВременнаяТаблицаSKU(Запрос.Текст);
	
	Если ВыгрузкаНаВесы Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//Условия","");
	КонецЕсли;
	 
	Запрос.Текст = Запрос.Текст +
	
	"
	|ВЫБРАТЬ
	|	КодыТоваровPLUНаОборудовании.КодТовараSKU,
	|	КодыТоваровPLUНаОборудовании.КодТовараPLU
	|ПОМЕСТИТЬ ТаблицаКодыТоваров
	|ИЗ
	|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
	|ГДЕ
	|	КодыТоваровPLUНаОборудовании.ПравилоОбмена = &ПравилоОбмена
	|;
	|ВЫБРАТЬ
	|	ТаблицаКодыТоваров.КодТовараSKU,
	|	ТаблицаДанныхСОтбором.Номенклатура,
	|	ТаблицаДанныхСОтбором.Характеристика,
	|	ТаблицаДанныхСОтбором.Упаковка,
	|	ТаблицаДанныхСОтбором.SKU,
	|	ТаблицаКодыТоваров.КодТовараPLU КАК PLU,
	|	ВЫБОР КОГДА ТаблицаДанныхСОтбором.Номенклатура ЕСТЬ NULL ТОГДА ""DEL"" 
	|		  ИНАЧЕ ВЫБОР КОГДА ТаблицаКодыТоваров.КодТовараSKU ЕСТЬ NULL ТОГДА ""ADD"" ИНАЧЕ ""OK""
	|			    КОНЕЦ
	|	КОНЕЦ КАК Действие,
	|	0 КАК Цена,
	|	ТаблицаДанныхСОтбором.Весовой КАК Весовой,
	|	ТаблицаДанныхСОтбором.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	ТаблицаКодыТоваров КАК ТаблицаКодыТоваров
	|	ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаДанныхСОтбором КАК ТаблицаДанныхСОтбором
	|	ПО ТаблицаКодыТоваров.КодТовараSKU = ТаблицаДанныхСОтбором.SKU";

	Запрос.УстановитьПараметр("Товары", ДанныеОтчета); 
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена); 

	Результат = Запрос.Выполнить();
	
	ВыборкаЗаписи = Запрос.Выполнить().Выгрузить();;
	
	НачатьТранзакцию(); 
	
	ВерхняяГраница = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВерхняяГраницаДиапазонаSKUВесовогоТовара");
	НижняяГраница  = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("НижняяГраницаДиапазонаSKUВесовогоТовара");
		
	ВесовойSKU = РегистрыСведений.КодыТоваровSKU.ПолучитьМаксимальныйКодSKU(Истина, НижняяГраница, ВерхняяГраница);
	ШтучныйSKU = РегистрыСведений.КодыТоваровSKU.ПолучитьМаксимальныйКодSKU(Ложь, НижняяГраница, ВерхняяГраница);
	PLU = ПолучитьМаксимальныйPLU(ПравилоОбмена);
	
	Счетчик = 0;
		
	Пока Счетчик < ВыборкаЗаписи.Количество() Цикл
		
		Капсула = ВыборкаЗаписи.Получить(Счетчик);
			
		Если Капсула.Действие = "DEL" Тогда     
			
			Если ЗначениеЗаполнено(Капсула.PLU) Тогда 
				УдалитьPLU(ПравилоОбмена, Капсула.PLU);
			КонецЕсли;
				
			ВыборкаЗаписи.Удалить(Капсула); 
				
		ИначеЕсли Капсула.Действие = "ADD" Тогда
				
				Если ОбновитьSKU И НЕ ЗначениеЗаполнено(Капсула.SKU) Тогда
					Если Капсула.Весовой ИЛИ ВыгрузкаНаВесы Тогда
						Капсула.SKU = ВесовойSKU; 
						ВесовойSKU = ВесовойSKU + 1;
					Иначе
						Капсула.SKU = ШтучныйSKU; 
						ШтучныйSKU = ШтучныйSKU + 1;
					КонецЕсли;
					РегистрыСведений.КодыТоваровSKU.ЗаписатьSKU(Капсула.Номенклатура, Капсула.Характеристика, Капсула.Упаковка, Капсула.SKU);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Капсула.SKU) И НЕ ЗначениеЗаполнено(Капсула.PLU) Тогда
					Если СвояНумерацияPLUНаОборудовании Тогда
						PLU = PLU + 1;
						Капсула.PLU = PLU;
					Иначе
						Капсула.PLU = Капсула.SKU;
					КонецЕсли;
					ЗаписатьPLU(ПравилоОбмена, Капсула.PLU, Капсула.SKU);
				КонецЕсли;
				Счетчик = Счетчик + 1;
				
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
	КонецЦикла;
		
	ЗафиксироватьТранзакцию();

	Возврат ВыборкаЗаписи;
	
КонецФункции

// Процедура выполняет обновление кодов товаров для всех правил обмена.
//
Процедура РегламентноеЗаданиеОбновитьКодыТоваров() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление кодов товаров подключаемого оборудования Offline'"),
	                         УровеньЖурналаРегистрации.Информация, , ,
	                         НСтр("ru = 'Начато регламентное обновление кодов товаров подключаемого оборудования Offline.'"));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка КАК ПравилоОбмена
	|ИЗ
	|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			ПолучитьКодыТоваров(Выборка.ПравилоОбмена, Истина);    
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление кодов товаров подключаемого оборудования Offline'"),
			                         УровеньЖурналаРегистрации.Ошибка, , ,
			                         НСтр("ru = 'Во время регламентного обновления кодов товаров подключаемого оборудования Offline произошла ошибка.'")
			                         + Символы.ПС + ИнформацияОбОшибке().Описание);
		КонецПопытки;
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление кодов товаров подключаемого оборудования Offline'"),
	                         УровеньЖурналаРегистрации.Информация, , ,
	                         НСтр("ru = 'Закончено регламентное обновление кодов товаров подключаемого оборудования Offline.'"));
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ТОВАРОВ

// Обновить цены для списка товаров
//
Процедура ОбновитьЦены(ТаблицаТоваров, Магазин) Экспорт
	
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки" , Новый ОписаниеТипов("Число"));
	
	Для Индекс = 0 По ТаблицаТоваров.Количество() - 1 Цикл
		ТаблицаТоваров[Индекс].НомерСтроки = Индекс;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ЗапасыСервер.СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	ЗапасыСервер.СформироватьЗапросЦеныПоРозничнымЦенам(Запрос.Текст, Магазин);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ФорматМагазина");
	СтруктураРеквизитов.Вставить("ПравилоЦенообразования");
	СтруктураРеквизитов.Вставить("ИспользоватьПрименениеЦен");
	СтруктураРеквизитов.Вставить("ВидМинимальныхЦенПродажи");
	РеквизитыМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Магазин, СтруктураРеквизитов);
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров); 
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ФорматОбъектаЦенообразования", РеквизитыМагазина.ФорматМагазина);
	Запрос.УстановитьПараметр("ПравилоЦенообразования", РеквизитыМагазина.ПравилоЦенообразования);
	Запрос.УстановитьПараметр("ИспользоватьПрименениеЦен", РеквизитыМагазина.ИспользоватьПрименениеЦен);
	Запрос.УстановитьПараметр("ПриводитьКМинимальнойЦене", ЗначениеЗаполнено(РеквизитыМагазина.ВидМинимальныхЦенПродажи));
	Запрос.УстановитьПараметр("ВидМинимальныхЦенПродажи", РеквизитыМагазина.ВидМинимальныхЦенПродажи);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Если ТаблицаЦен.Количество() > 0 Тогда
		Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
			
			ЦенаНайдена = Ложь;
		
			НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки, "НомерСтроки");
			ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
			Если НЕ ЦенаНайдена Тогда
				Продолжить;
			КонецЕсли;
				
			ТекСтрока.Цена = НайденнаяСтрока.Цена;
		
		КонецЦикла;
	КонецЕсли;  

КонецПроцедуры

// Функция возвращает таблицу товаров с данными к выгрузке в устройство
//
// Параметры:
//  Устройство - <СправочникСсылка.ПодключаемоеОборудование> - Устройство для которого необходимо получить данные
//  ТолькоИзмененные - <Булево> - Флаг получения только измененных данных
//  ОбновитьКодыТоваров - <Булево> - Флаг обновления кодов товаров перед получением данных.
//
// Возвращаемое значение:
//  <ТаблицаЗначений> товаров к выгрузке
//
Функция ПолучитьТаблицуТоваровКВыгрузке(Устройство, Параметры, ОбновитьКодыТоваров = Ложь) Экспорт
	
	ВерхняяГраница = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВерхняяГраницаДиапазонаSKUВесовогоТовара");
	НижняяГраница  = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("НижняяГраницаДиапазонаSKUВесовогоТовара");
		
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ Параметры.ЧастичнаяВыгрузка Тогда
		ПолучитьКодыТоваров(Параметры.ПравилоОбмена, Ложь);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КодыТоваровPLUНаОборудовании.КодТовараPLU КАК КодТовараPLU,
	|	КодыТоваровPLUНаОборудовании.КодТовараSKU КАК КодТовараSKU,
	|	КодыТоваровSKU.Номенклатура КАК Номенклатура,
	|	
	|	ЕСТЬNULL(КодыТоваровSKU.Номенклатура.Наименование,"""")       КАК НоменклатураНаименование,
	|	ЕСТЬNULL(КодыТоваровSKU.Номенклатура.НаименованиеПолное,"""") КАК НоменклатураНаименованиеПолное,
	|	
	|	КодыТоваровSKU.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровSKU.Характеристика.Наименование, """")       КАК ХарактеристикаНаименование,
	|	ЕСТЬNULL(КодыТоваровSKU.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	
	|	КодыТоваровSKU.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(КодыТоваровSKU.Упаковка.Наименование, """") КАК УпаковкаНаименование,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Штрихкод,
	|	КодыТоваровSKU.Номенклатура.Весовой КАК Весовой,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток / 
	|	ВЫБОР КОГДА КодыТоваровSKU.Упаковка.Коэффициент = 0 ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(КодыТоваровSKU.Упаковка.Коэффициент, 1)
	|	КОНЕЦ  КАК КоличествоОстаток,
	|	ВЫБОР
	|		КОГДА КодыТоваровPLUНаОборудованииИзменения.Узел = &УзелИнформационнойБазы
	|		ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинкиЕстьИзменения
	|ИЗ
	|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
	|		ПО (КодыТоваровPLUНаОборудовании.КодТовараSKU = КодыТоваровSKU.SKU)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО КодыТоваровSKU.Номенклатура = Штрихкоды.Владелец
	|		И КодыТоваровSKU.Характеристика = Штрихкоды.Характеристика
	|		И КодыТоваровSKU.Упаковка = Штрихкоды.Упаковка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровPLUНаОборудовании.Изменения КАК КодыТоваровPLUНаОборудованииИзменения
	|		ПО КодыТоваровPLUНаОборудовании.КодТовараPLU = КодыТоваровPLUНаОборудованииИзменения.КодТовараPLU
	|		И КодыТоваровPLUНаОборудованииИзменения.ПравилоОбмена = &ПравилоОбмена
	|		И КодыТоваровPLUНаОборудованииИзменения.Узел = &УзелИнформационнойБазы
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
	|		ПО КодыТоваровSKU.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	|		И ТоварыНаСкладахОстатки.Склад = &Склад
	|		И КодыТоваровSKU.Характеристика = ТоварыНаСкладахОстатки.Характеристика
	|ГДЕ
	|	КодыТоваровPLUНаОборудовании.ПравилоОбмена = &ПравилоОбмена
	|	И КодыТоваровSKU.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	//ТолькоИзмененные И КодыТоваровPLUНаОборудованииИзменения.ПравилоОбмена = &ПравилоОбмена
	|	//ТолькоИзмененные И КодыТоваровPLUНаОборудованииИзменения.Узел = &УзелИнформационнойБазы
	|ИТОГИ
	|	МАКСИМУМ(Штрихкод)
	|ПО
	|	КодТовараPLU");
	
	Если Параметры.ЧастичнаяВыгрузка Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ТолькоИзмененные","");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПравилоОбмена",          Параметры.ПравилоОбмена);
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", Параметры.УзелИнформационнойБазы);
	Запрос.УстановитьПараметр("Склад",                  Параметры.ПравилоОбмена.Склад);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("PLU",                Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("SKU",                Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения",   Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Наименование",       Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод",           Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("МассивШтрихкодов",   Новый ОписаниеТипов("Массив"));
	ТаблицаТоваров.Колонки.Добавить("Цена",               Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Весовой",            Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Остаток",            Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("ЕстьОшибки",                  Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ИндексКартинкиЕстьИзменения", Новый ОписаниеТипов("Число"));
	
	ВыборкаПоКодам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоКодам.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Выборка = ВыборкаПоКодам.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Штрихкод = СокрЛП(Выборка.Штрихкод);
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.PLU) Тогда
				
				НоваяСтрока.PLU                         = Выборка.КодТовараPLU;
				НоваяСтрока.SKU                         = Выборка.КодТовараSKU;
				НоваяСтрока.Номенклатура                = Выборка.Номенклатура;
				НоваяСтрока.Характеристика              = Выборка.Характеристика;
				НоваяСтрока.Упаковка                    = Выборка.Упаковка;
				НоваяСтрока.Наименование                = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.НоменклатураНаименование, Выборка.ХарактеристикаНаименование) + ?(ЗначениеЗаполнено(Выборка.УпаковкаНаименование),", " + Выборка.УпаковкаНаименование,"");
				НоваяСтрока.НаименованиеПолное          = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.НоменклатураНаименованиеПолное, Выборка.ХарактеристикаНаименование) + ?(ЗначениеЗаполнено(Выборка.УпаковкаНаименование),", " + Выборка.УпаковкаНаименование,"");
				НоваяСтрока.Весовой                     = Выборка.Весовой;
				НоваяСтрока.Остаток                     = Выборка.КоличествоОстаток;
				НоваяСтрока.ИндексКартинкиЕстьИзменения = Выборка.ИндексКартинкиЕстьИзменения;
				НоваяСтрока.Штрихкод                    = Штрихкод;
				
			Иначе
				НоваяСтрока.Штрихкод = НоваяСтрока.Штрихкод + ", " + Штрихкод;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Штрихкод) Тогда
				НоваяСтрока.МассивШтрихкодов.Добавить(Штрихкод);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Параметры.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
			Если (Параметры.СвояНумерацияPLUНаОборудовании И НоваяСтрока.PLU > Параметры.МаксимальныйКодPLU)
				ИЛИ (НоваяСтрока.SKU > ВерхняяГраница) ИЛИ (НоваяСтрока.SKU < НижняяГраница) Тогда
				НоваяСтрока.ЕстьОшибки = Истина;
			КонецЕсли
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьЦены(ТаблицаТоваров,  Параметры.ПравилоОбмена.Склад.Магазин);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаТоваров;
	
КонецФункции

// Получить коды товаров для правила обмена c розничными ценами
//
Функция ПолучитьПоРозничнымЦенам(ПравилоОбмена, ОбновитьSKU = Истина, ПересоздатьPLU = Ложь) Экспорт
	
	Магазин = ПравилоОбмена.Склад.Магазин;
	
	ТаблицаТоваров = ПолучитьКодыТоваров(ПравилоОбмена, ОбновитьSKU, ПересоздатьPLU);
	
	ОбновитьЦены(ТаблицаТоваров, Магазин);

	Возврат ТаблицаТоваров;
	
КонецФункции

// Функция возвращает структуру с данными в формате, необходимом для выгрузки списка товаров в весы с печатью этикеток
//
// Параметры:
//  Устройство - <СправочникСсылка.ПодключаемоеОборудование> - Устройство для которого необходимо получить данные
//  ТолькоИзмененные - <Булево> - Флаг получения только измененных данных
//
// Возвращаемое значение:
//  <Структура> с массивом структур для выгрузки и количеством не выгруженных строк
//
Функция ПолучитьДанныеДляВесов(Устройство, ТолькоИзмененные = Истина) Экспорт
	
	Параметры = ПолучитьПараметрыУстройства(Устройство);
	Если Параметры = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры.Вставить("ЧастичнаяВыгрузка", ТолькоИзмененные);
	
	ВозвращаемоеЗначение = Новый Структура(
		"Данные, КоличествоНеВыгруженныхСтрокСОшибками, ЧастичнаяВыгрузка, Параметры",
		Новый Массив(),
		0,
		ТолькоИзмененные,
		Параметры
	);
	
	Таблица = ПодключаемоеОборудованиеOfflineВызовСервера.ПолучитьТаблицуТоваровКВыгрузке(Устройство, Параметры, Истина);
	
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ВозвращаемоеЗначение.КоличествоНеВыгруженныхСтрокСОшибками = ВозвращаемоеЗначение.КоличествоНеВыгруженныхСтрокСОшибками + 1;
			Продолжить;
		КонецЕсли;
		
		ЭлементМассива = Новый Структура("PLU, Код, Штрихкод, Наименование, Цена", 0, 0, "", "" , 0);
		ЭлементМассива.PLU = СтрокаТЧ.PLU;
		ЭлементМассива.Код = СтрокаТЧ.SKU;
		ЭлементМассива.Наименование = Строка(СтрокаТЧ.НаименованиеПолное);
		ЭлементМассива.Цена         = СтрокаТЧ.Цена;
		
		ВозвращаемоеЗначение.Данные.Добавить(ЭлементМассива);
		
	КонецЦикла;                  

	Возврат ВозвращаемоеЗначение;

КонецФункции

// Функция возвращает структуру с данными в формате, необходимом для выгрузки списка товаров в ККМ Offline
//
// Параметры:
//  Устройство - <СправочникСсылка.ПодключаемоеОборудование> - Устройство для которого необходимо получить данные
//  ТолькоИзмененные - <Булево> - Флаг получения только измененных данных
//
// Возвращаемое значение:
//  <Структура> с массивом структур для выгрузки и количеством не выгруженных строк
//
Функция ПолучитьДанныеДляКассы(Устройство, ТолькоИзмененные = Истина) Экспорт
	
	Параметры = ПолучитьПараметрыУстройства(Устройство);
	Если Параметры = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры.Вставить("ЧастичнаяВыгрузка", ТолькоИзмененные);
	
	ВозвращаемоеЗначение = Новый Структура(
		"Данные, КоличествоНеВыгруженныхСтрокСОшибками, ЧастичнаяВыгрузка, Параметры",
		Новый Массив(),
		0,
		ТолькоИзмененные,
		Параметры);
	
	Таблица = ПодключаемоеОборудованиеOfflineВызовСервера.ПолучитьТаблицуТоваровКВыгрузке(Устройство, Параметры, Истина);
	
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ВозвращаемоеЗначение.КоличествоНеВыгруженныхСтрокСОшибками = ВозвращаемоеЗначение.КоличествоНеВыгруженныхСтрокСОшибками + 1;
			Продолжить;
		КонецЕсли;
		
		ЭлементМассива = Новый Структура("Код, Штрихкод, Наименование, НаименованиеПолное, ЕдиницаИзмерения, Цена, Остаток, ВесовойТовар", 0, "", "", "", "", 0, 0, Ложь);
		ЭлементМассива.Код = СтрокаТЧ.SKU;
		ЭлементМассива.Штрихкод           = СтрокаТЧ.МассивШтрихкодов;
		ЭлементМассива.Наименование       = СтрокаТЧ.Наименование;
		ЭлементМассива.НаименованиеПолное = СтрокаТЧ.НаименованиеПолное;
		ЭлементМассива.ЕдиницаИзмерения   = СтрокаТЧ.ЕдиницаИзмерения;
		ЭлементМассива.Цена               = СтрокаТЧ.Цена;
		ЭлементМассива.Остаток            = СтрокаТЧ.Остаток;
		ЭлементМассива.ВесовойТовар       = СтрокаТЧ.Весовой;
		
		ВозвращаемоеЗначение.Данные.Добавить(ЭлементМассива);
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ТОВАРЫ ПРАВИЛА ВЫГРУЗКИ

// Функция возвращает таблицу товаров с данными о товарам для правила выгрузки с ценами
//
// Параметры:
//  ПравилоОбмена - <СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline>
//  ВидЦены - <СправочникСсылка.ВидыЦен>
//
// Возвращаемое значение:
//  <ТаблицаЗначений>
//
Функция ПолучитьТаблицуТоваровДляПравила(ПравилоОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВерхняяГраница = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВерхняяГраницаДиапазонаSKUВесовогоТовара");
	НижняяГраница  = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("НижняяГраницаДиапазонаSKUВесовогоТовара");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КодыТоваровPLUНаОборудовании.КодТовараPLU КАК КодТовараPLU,
	|	КодыТоваровPLUНаОборудовании.КодТовараSKU КАК КодТовараSKU,
	|	КодыТоваровSKU.Номенклатура КАК Номенклатура,
	|	
	|	ЕСТЬNULL(КодыТоваровSKU.Номенклатура.Наименование,"""")       КАК НоменклатураНаименование,
	|	ЕСТЬNULL(КодыТоваровSKU.Номенклатура.НаименованиеПолное,"""") КАК НоменклатураНаименованиеПолное,
	|	
	|	КодыТоваровSKU.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровSKU.Характеристика.Наименование, """")       КАК ХарактеристикаНаименование,
	|	ЕСТЬNULL(КодыТоваровSKU.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	
	|	КодыТоваровSKU.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(КодыТоваровSKU.Упаковка.Наименование, """") КАК УпаковкаНаименование,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Штрихкод,
	|	
	|	КодыТоваровSKU.Номенклатура.Весовой КАК Весовой
	|	
	|ИЗ
	|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
	|		ПО (КодыТоваровPLUНаОборудовании.КодТовараSKU = КодыТоваровSKU.SKU)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО КодыТоваровSKU.Номенклатура = Штрихкоды.Владелец
	|		И КодыТоваровSKU.Характеристика = Штрихкоды.Характеристика
	|		И КодыТоваровSKU.Упаковка = Штрихкоды.Упаковка
	|ГДЕ
	|	КодыТоваровPLUНаОборудовании.ПравилоОбмена = &ПравилоОбмена
	|	И КодыТоваровSKU.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|ИТОГИ
	|	МАКСИМУМ(Штрихкод)
	|ПО
	|	КодТовараPLU");
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("PLU",                Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("SKU",                Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Наименование",       Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод",           Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Весовой",            Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ЕстьОшибки",         Новый ОписаниеТипов("Булево"));
	
	ВыборкаПоКодам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоКодам.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Выборка = ВыборкаПоКодам.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Штрихкод = СокрЛП(Выборка.Штрихкод);
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.PLU) Тогда
				НоваяСтрока.PLU                = Выборка.КодТовараPLU;
				НоваяСтрока.SKU                = Выборка.КодТовараSKU;
				НоваяСтрока.Номенклатура       = Выборка.Номенклатура;
				НоваяСтрока.Характеристика     = Выборка.Характеристика;
				НоваяСтрока.Упаковка           = Выборка.Упаковка;
				НоваяСтрока.Наименование       = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.НоменклатураНаименование, Выборка.ХарактеристикаНаименование) + ?(ЗначениеЗаполнено(Выборка.УпаковкаНаименование),", "+Выборка.УпаковкаНаименование, "");
				НоваяСтрока.НаименованиеПолное = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.НоменклатураНаименованиеПолное, Выборка.ХарактеристикаНаименование) + ?(ЗначениеЗаполнено(Выборка.УпаковкаНаименование),", "+Выборка.УпаковкаНаименование, "");
				НоваяСтрока.Весовой            = Выборка.Весовой;
				НоваяСтрока.Штрихкод           = Штрихкод;
			Иначе
				НоваяСтрока.Штрихкод = НоваяСтрока.Штрихкод + ", " + Штрихкод;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПравилоОбмена.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
			Если (ПравилоОбмена.СвояНумерацияPLUНаОборудовании И НоваяСтрока.PLU > ПравилоОбмена.МаксимальныйКодPLU)
		     ИЛИ (НоваяСтрока.SKU > ВерхняяГраница) ИЛИ (НоваяСтрока.SKU < НижняяГраница) Тогда
				НоваяСтрока.ЕстьОшибки = Истина;
			КонецЕсли
		КонецЕсли;

	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаТоваров;
	
КонецФункции
