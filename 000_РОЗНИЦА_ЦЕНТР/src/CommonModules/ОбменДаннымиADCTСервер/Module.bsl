#Область ПроцедурыВыгрузкиДанныхВУзелОбмена

Функция ВыполнитьВыгрузкуДанныхВУзел(УзелПолучатель, ДанныеОбмена, СписокМетаданных)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	УзелОбъект = УзелПолучатель.ПолучитьОбъект();
	УзелОбъект.Заблокировать();

	НомерСообщения     = УзелОбъект.НомерОтправленного + 1;
//	ограничитель повторной выгрузки уже выгруженного ранее объекта в этом пакете.
	ВыгруженныеОбъекты = Новый Соответствие;

	ПланыОбмена.УдалитьРегистрациюИзменений(УзелПолучатель, ДанныеОбмена.НомерПринятого);

	ПодготовитьСтруктуруОбмена(ДанныеОбмена, НомерСообщения);

	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелПолучатель, НомерСообщения);

	Пока ВыборкаИзменений.Следующий() Цикл

		Данные = ВыборкаИзменений.Получить();

		ДобавитьДанныеВТаблицуОбмена(Данные, ДанныеОбмена.ТаблицаДанных, УзелОбъект.Магазин, ВыгруженныеОбъекты, ДанныеОбмена.СписокОшибок);

	КонецЦикла;

	УзелОбъект.ПодготовленныеДанные = Новый ХранилищеЗначения(ДанныеОбмена, Новый СжатиеДанных(9));
	УзелОбъект.ВремяПодготовки = ТекущаяДатаСеанса();
//	обход контроля наличия зарегистрированных изменений - не забываем!
	УзелОбъект.ДополнительныеСвойства.Вставить("ПолучениеСообщенияОбмена", Истина);

	УзелОбъект.НомерОтправленного = НомерСообщения;
	УзелОбъект.Записать();

	ДанныеОбмена.НомерСообщения = НомерСообщения;

	УзелОбъект.Разблокировать();

	Возврат ДанныеОбмена.СписокОшибок.Количество() = 0;

КонецФункции // ВыполнитьВыгрузкуДанныхВУзел()

Функция ДобавитьДанныеВТаблицуОбмена(Данные, ТаблицаДанных, Магазин, ВыгруженныеОбъекты, СписокОшибок, ДополнительныеПараметры = Неопределено)	Экспорт

	Перем Владелец;

	Если НЕ Данные = Неопределено Тогда

		Если ТипЗнч(Данные) = Тип("Структура") Тогда

			Если Данные.Свойство("ОписаниеТипа") Тогда
				
					ОписаниеТипа = Данные.ОписаниеТипа;

			Иначе	ОписаниеТипа = Неопределено;
					СписокОшибок.Добавить("Невозможно получить описание типа в составе структуры");

			КонецЕсли;

		Иначе

			ОписаниеТипа = ОбменДаннымиADCTСерверПовтИсп.СоответствиеТиповСоставаПланаОбмена().МД.Получить(Данные.Метаданные());

		КонецЕсли;

		Если ВыгруженныеОбъекты.Получить(Данные) = Неопределено И НЕ ОписаниеТипа = Неопределено Тогда

			Отказ = Ложь;

			Если НЕ ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда

			//	Используется для передачи уточняющих параметров при "вторичных" выгрузках связанных объектов.
				ДополнительныеПараметры = Новый Структура;

			КонецЕсли;

			Если ТипЗнч(Данные) = Тип("СправочникОбъект.Номенклатура") Тогда

				ВыгруженныеОбъекты.Вставить(Данные.Ссылка, Истина);

				Если НЕ Данные.ЭтоГруппа Тогда

					СтрокаДанных = ТаблицаДанных.Добавить();
					СтрокаДанных.НомерТипа = ОписаниеТипа.НомерТипа;

				//	1. Выгружаем непосредственно номенклатурную позицию
					Запрос = Новый Запрос(
					"ВЫБРАТЬ
					|	ВЫБОР
					|		КОГДА СправочникНоменклатура.IDN = """"
					|			ТОГДА СправочникНоменклатура.Код
					|		ИНАЧЕ СправочникНоменклатура.IDN
					|	КОНЕЦ КАК IDN,
					|	ЕСТЬNULL(СправочникНоменклатура.Родитель.Наименование, """") КАК ВидТовара
					|ИЗ
					|	Справочник.Номенклатура КАК СправочникНоменклатура
					|ГДЕ
					|	СправочникНоменклатура.Ссылка = &Номенклатура"
					);
					Запрос.УстановитьПараметр("Номенклатура", Данные.Ссылка);
					
					ДанныеВыборка = Запрос.Выполнить().Выбрать();	//	Номенклатура
					ДанныеВыборка.Следующий();

					СтрокаДанных.Данные = Новый Структура(
						"УИ, ПометкаУдаления, Код, Наименование, IDN, Артикул, Блокирован, ЕдиницаИзмерения, ВидТовара, ВидНоменклатуры, Производитель, Маржинальность"
						, ПолучитьИдентификатор(Данные.Ссылка), Данные.ПометкаУдаления, СокрЛП(Данные.Код), СокрЛП(Данные.Наименование), СокрЛП(ДанныеВыборка.IDN), СокрЛП(Данные.Артикул), Данные.Блокирован, СокрЛП(Данные.ЕдиницаИзмерения), СокрЛП(ДанныеВыборка.ВидТовара), ПолучитьИдентификатор(Данные.ВидНоменклатуры), СокрЛП(Данные.Производитель), Данные.Маржинальность);

				//	2. Выгружаем ВидНоменклатуры (Проект)
					ДобавитьДанныеВТаблицуОбмена(Данные.ВидНоменклатуры.ПолучитьОбъект(), ТаблицаДанных, Магазин, ВыгруженныеОбъекты, СписокОшибок, ДополнительныеПараметры);

					ДополнительныеПараметры.Вставить("Владелец", Данные.Ссылка);

				//	3. Выгружаем упаковки.
					Запрос.Текст =
					"ВЫБРАТЬ
					|	ТаблицаУпаковки.Ссылка КАК Упаковка
					|ИЗ
					|	Справочник.УпаковкиНоменклатуры КАК ТаблицаУпаковки
					|ГДЕ
					|	НЕ ТаблицаУпаковки.Ссылка = &Упаковка
					|			И ТаблицаУпаковки.Владелец ССЫЛКА Справочник.Номенклатура
					|	И ТаблицаУпаковки.Владелец = &Номенклатура"
					;
					Запрос.УстановитьПараметр("Упаковка", Неопределено);
					ДополнительныеПараметры.Свойство("Упаковка", Запрос.Параметры.Упаковка);

					ДанныеВыборка = Запрос.Выполнить().Выбрать();	//	УпаковкиНоменклатуры

					Пока ДанныеВыборка.Следующий() Цикл

						ДобавитьДанныеВТаблицуОбмена(ДанныеВыборка.Упаковка.ПолучитьОбъект(), ТаблицаДанных, Магазин, ВыгруженныеОбъекты, СписокОшибок, ДополнительныеПараметры);

					КонецЦикла;

				//	4. Выгружаем штрихкоды.
					Запрос.Текст =
					"ВЫБРАТЬ
					|	Штрихкоды.Владелец КАК Владелец,
					|	Штрихкоды.Штрихкод КАК Штрихкод,
					|	Штрихкоды.Характеристика КАК Характеристика,
					|	Штрихкоды.Упаковка КАК Упаковка
					|ИЗ
					|	РегистрСведений.Штрихкоды КАК Штрихкоды
					|ГДЕ
					|	НЕ Штрихкоды.Штрихкод = &Штрихкод
					|	И Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
					|	И Штрихкоды.Владелец = &Номенклатура"
					;
					Запрос.УстановитьПараметр("Штрихкод", Неопределено);
					ДополнительныеПараметры.Свойство("Штрихкод", Запрос.Параметры.Штрихкод);

					ДанныеВыборка = Запрос.Выполнить().Выбрать();	//	Штрихкоды

					Пока ДанныеВыборка.Следующий() Цикл

						НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();

						НаборЗаписей.Отбор.Владелец.Установить(ДанныеВыборка.Владелец);
						НаборЗаписей.Отбор.Штрихкод.Установить(ДанныеВыборка.Штрихкод);
						НаборЗаписей.Отбор.Характеристика.Установить(ДанныеВыборка.Характеристика);
						НаборЗаписей.Отбор.Упаковка.Установить(ДанныеВыборка.Упаковка);

						НаборЗаписей.Прочитать();

						ДобавитьДанныеВТаблицуОбмена(НаборЗаписей, ТаблицаДанных, Магазин, ВыгруженныеОбъекты, СписокОшибок, ДополнительныеПараметры);

					КонецЦикла;

				//	5. Выгружаем действующие цены номенклатуры
					Если НЕ ДополнительныеПараметры.Свойство("ДействующиеЦеныНоменклатуры") Тогда

						СоставДанных = Новый Структура(
							"ДействующиеЦены, Номенклатура, ОписаниеТипа"
							, Истина, Данные.Ссылка, ОбменДаннымиADCTСерверПовтИсп.СоответствиеТиповСоставаПланаОбмена().МД.Получить(Метаданные.РегистрыСведений.ДействующиеЦеныНоменклатуры));
						ДобавитьДанныеВТаблицуОбмена(СоставДанных, ТаблицаДанных, Магазин, ВыгруженныеОбъекты, СписокОшибок, ДополнительныеПараметры);

					КонецЕсли;

				//	6. Выгружаем предыдущие цены номенклатуры
					Если НЕ ДополнительныеПараметры.Свойство("ПредыдущиеЦеныНоменклатуры") Тогда

						Запрос.Текст =
						"ВЫБРАТЬ
						|	ТаблицаРегистра.ОбъектЦенообразования КАК ОбъектЦенообразования,
						|	ТаблицаРегистра.Номенклатура КАК Номенклатура,
						|	ТаблицаРегистра.Характеристика КАК Характеристика
						|ИЗ
						|	РегистрСведений.ПредыдущиеЦеныНоменклатуры КАК ТаблицаРегистра
						|ГДЕ
						|	ТаблицаРегистра.ОбъектЦенообразования = &Магазин
						|	И ТаблицаРегистра.Номенклатура = &Номенклатура"
						;
						Запрос.УстановитьПараметр("Магазин", Магазин);

						ДанныеВыборка = Запрос.Выполнить().Выбрать();	//	ПредыдущиеЦеныНоменклатуры

						Пока ДанныеВыборка.Следующий() Цикл

							НаборЗаписей = РегистрыСведений.ПредыдущиеЦеныНоменклатуры.СоздатьНаборЗаписей();

							НаборЗаписей.Отбор.ОбъектЦенообразования.Установить(ДанныеВыборка.ОбъектЦенообразования);
							НаборЗаписей.Отбор.Номенклатура.Установить(ДанныеВыборка.Номенклатура);
							НаборЗаписей.Отбор.Характеристика.Установить(ДанныеВыборка.Характеристика);

							НаборЗаписей.Прочитать();

							ДобавитьДанныеВТаблицуОбмена(НаборЗаписей, ТаблицаДанных, Магазин, ВыгруженныеОбъекты, СписокОшибок, ДополнительныеПараметры);

						КонецЦикла;

					КонецЕсли;

				КонецЕсли;

			ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ВидыНоменклатуры") Тогда

				ВыгруженныеОбъекты.Вставить(Данные.Ссылка, Истина);

				Если НЕ Данные.ЭтоГруппа Тогда	//	"отдаём" только элементы!

					СтрокаДанных = ТаблицаДанных.Добавить();
					СтрокаДанных.НомерТипа = ОписаниеТипа.НомерТипа;

					СтрокаДанных.Данные = Новый Структура(
						"УИ, ПометкаУдаления, Код, Наименование, IDN"
						, ПолучитьИдентификатор(Данные.Ссылка), Данные.ПометкаУдаления, СокрЛП(Данные.Код), СокрЛП(Данные.Наименование), СокрЛП(Данные.IDN));

				КонецЕсли;

			ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.УпаковкиНоменклатуры") Тогда

				ВыгруженныеОбъекты.Вставить(Данные.Ссылка, Истина);

				Если ВыгруженныеОбъекты.Получить(Данные.Владелец) = Неопределено Тогда

				//	Выгружаем данные владельца.
					ДополнительныеПараметры.Вставить("Упаковка", Данные.Ссылка);
					ДобавитьДанныеВТаблицуОбмена(Данные.Владелец.ПолучитьОбъект(), ТаблицаДанных, Магазин, ВыгруженныеОбъекты, СписокОшибок, ДополнительныеПараметры);

				КонецЕсли;

				СтрокаДанных = ТаблицаДанных.Добавить();
				СтрокаДанных.НомерТипа = ОписаниеТипа.НомерТипа;

				СтрокаДанных.Данные = Новый Структура(
					"УИ, ПометкаУдаления, Владелец, Наименование, Вес, Коэффициент, Объем"
					, ПолучитьИдентификатор(Данные.Ссылка), Данные.ПометкаУдаления, ПолучитьИдентификатор(Данные.Владелец), СокрЛП(Данные.Наименование), Данные.Вес, Данные.Коэффициент, Данные.Объем);

			ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Склады") Тогда

				ВыгруженныеОбъекты.Вставить(Данные.Ссылка, Истина);

				Если НЕ (Данные.ЭтоГруппа ИЛИ ПустаяСтрока(Данные.IDN)) Тогда

					СтрокаДанных = ТаблицаДанных.Добавить();
					СтрокаДанных.НомерТипа = ОписаниеТипа.НомерТипа;

					СтрокаДанных.Данные = Новый Структура(
						"УИ, ПометкаУдаления, Код, Наименование, IDN, Блокирован"
						, ПолучитьИдентификатор(Данные.Ссылка), Данные.ПометкаУдаления, СокрЛП(Данные.Код), СокрЛП(Данные.Наименование), СокрЛП(Данные.IDN), Данные.Блокирован);

				КонецЕсли;

			ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ДействующиеЦеныНоменклатуры")
				ИЛИ ТипЗнч(Данные) = Тип("Структура") И Данные.Свойство("ДействующиеЦены")	Тогда

				ВыгруженныеОбъекты.Вставить(Данные, Истина);

				Если ТипЗнч(Данные) = Тип("Структура") Тогда

				//		В данном случае вызов произведен вызов при выгрузке номенклатурной позиции.
						Запрос = Новый Запрос(
						"ВЫБРАТЬ
						|	&Магазин КАК ОбъектЦенообразования,
						|	ТаблицаНоменклатура.Ссылка КАК Номенклатура,
						|	ЕСТЬNULL(ТаблицаХарактеристики.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика
						|ИЗ
						|	Справочник.Номенклатура КАК ТаблицаНоменклатура
						|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ТаблицаХарактеристики
						|		ПО ТаблицаНоменклатура.Ссылка = ТаблицаХарактеристики.Владелец
						|ГДЕ
						|	ТаблицаНоменклатура.Ссылка = &Номенклатура"
						);
						Запрос.УстановитьПараметр("Магазин"     , Магазин);
						Запрос.УстановитьПараметр("Номенклатура", Данные.Номенклатура);
						
						ТаблицаОтборы = Запрос.Выполнить().Выгрузить();

				Иначе	ТаблицаОтборы = Данные.Выгрузить();

				КонецЕсли;

			//	В регистрацию к выгрузке может попасть любой набор записей... и "старый" в том числе.
			//	Поэтому, в любом случае, в контексте текущего отбора получаем срез последних.
			//	Элемент отбора - регистратор. В общем, от временной таблицы аж никак не уйти.

				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ТаблицаОтборы.ОбъектЦенообразования КАК ОбъектЦенообразования,
				|	ТаблицаОтборы.Номенклатура КАК Номенклатура,
				|	ТаблицаОтборы.Характеристика КАК Характеристика
				|ПОМЕСТИТЬ Фильтр
				|ИЗ
				|	&ТаблицаОтборы КАК ТаблицаОтборы
				|ГДЕ
				|	ТаблицаОтборы.ОбъектЦенообразования = &Магазин
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Ведущая.Номенклатура КАК Номенклатура,
				|	Ведущая.Характеристика КАК Характеристика,
				|	ЕСТЬNULL(ТаблицаРегистра.Цена, 0) КАК Цена,
				|	ЕСТЬNULL(ТаблицаРегистра.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КАК Упаковка,
				|	ЕСТЬNULL(ТаблицаРегистра.Акция, ЛОЖЬ) КАК Акция
				|ИЗ
				|	Фильтр КАК Ведущая
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
				|				,
				|				(ОбъектЦенообразования, Номенклатура, Характеристика) В
				|					(ВЫБРАТЬ
				|						Фильтр.ОбъектЦенообразования,
				|						Фильтр.Номенклатура,
				|						Фильтр.Характеристика
				|					ИЗ
				|						Фильтр)) КАК ТаблицаРегистра
				|		ПО Ведущая.ОбъектЦенообразования = ТаблицаРегистра.ОбъектЦенообразования
				|			И Ведущая.Номенклатура = ТаблицаРегистра.Номенклатура
				|			И Ведущая.Характеристика = ТаблицаРегистра.Характеристика
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ Фильтр"
				);
				Запрос.УстановитьПараметр("Магазин"      , Магазин);	//	"отсекаем", возможно, присутствующие другие магазины.
				Запрос.УстановитьПараметр("ТаблицаОтборы", ТаблицаОтборы);
				
				Результат = Запрос.Выполнить();	//	ДействующиеЦеныНоменклатуры

				Если НЕ Результат.Пустой() Тогда

					ДанныеВыборка = Результат.Выбрать();	//	ДействующиеЦеныНоменклатуры

					СтруктураДанных = Новый ТаблицаЗначений;

					СтруктураДанных.Колонки.Добавить("Номенклатура");
					СтруктураДанных.Колонки.Добавить("Характеристика");
					СтруктураДанных.Колонки.Добавить("Цена");
					СтруктураДанных.Колонки.Добавить("Упаковка");
					СтруктураДанных.Колонки.Добавить("Акция");
					
					ДополнительныеПараметры.Вставить("ДействующиеЦеныНоменклатуры", Истина);

					Счётчик = 0;	//	отладочный флаг

					Пока ДанныеВыборка.Следующий() Цикл

						Если ВыгруженныеОбъекты.Получить(ДанныеВыборка.Номенклатура) = Неопределено Тогда

							ДобавитьДанныеВТаблицуОбмена(ДанныеВыборка.Номенклатура.ПолучитьОбъект(), ТаблицаДанных, Магазин, ВыгруженныеОбъекты, СписокОшибок, ДополнительныеПараметры);

						КонецЕсли;

						Если ЗначениеЗаполнено(ДанныеВыборка.Характеристика) И ВыгруженныеОбъекты.Получить(ДанныеВыборка.Характеристика) = Неопределено Тогда

							ДополнительныеПараметры.Вставить("Характеристика", ДанныеВыборка.Характеристика);
							ДобавитьДанныеВТаблицуОбмена(ДанныеВыборка.Характеристика.ПолучитьОбъект(), ТаблицаДанных, Магазин, ВыгруженныеОбъекты, СписокОшибок, ДополнительныеПараметры);

						КонецЕсли;

						Если ЗначениеЗаполнено(ДанныеВыборка.Упаковка) И ВыгруженныеОбъекты.Получить(ДанныеВыборка.Упаковка) = Неопределено Тогда

							ДополнительныеПараметры.Вставить("Упаковка", ДанныеВыборка.Упаковка);
							ДобавитьДанныеВТаблицуОбмена(ДанныеВыборка.Упаковка.ПолучитьОбъект(), ТаблицаДанных, Магазин, ВыгруженныеОбъекты, СписокОшибок, ДополнительныеПараметры);

						КонецЕсли;

						СтрокаНабора = СтруктураДанных.Добавить();

						СтрокаНабора.Номенклатура   = ПолучитьИдентификатор(ДанныеВыборка.Номенклатура);
						СтрокаНабора.Характеристика = ПолучитьИдентификатор(ДанныеВыборка.Характеристика);
						СтрокаНабора.Цена           = ДанныеВыборка.Цена;
						СтрокаНабора.Упаковка       = ПолучитьИдентификатор(ДанныеВыборка.Упаковка);
						СтрокаНабора.Акция          = ДанныеВыборка.Акция;

						Счётчик = Счётчик + 1;

					КонецЦикла;

					СтрокаДанных = ТаблицаДанных.Добавить();
					СтрокаДанных.НомерТипа = ОписаниеТипа.НомерТипа;
					СтрокаДанных.Данные    = СтруктураДанных;

				КонецЕсли;

			ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ПредыдущиеЦеныНоменклатуры") Тогда

				ВыгруженныеОбъекты.Вставить(Данные, Истина);

				Если Данные.Отбор.ОбъектЦенообразования.Значение = Магазин Тогда
					
					ДополнительныеПараметры.Вставить("ПредыдущиеЦеныНоменклатуры", Истина);

					Если ВыгруженныеОбъекты.Получить(Данные.Отбор.Номенклатура.Значение) = Неопределено Тогда

					//	Выгружаем данные Номенклатура.
						ДобавитьДанныеВТаблицуОбмена(Данные.Отбор.Номенклатура.Значение.ПолучитьОбъект(), ТаблицаДанных, Магазин, ВыгруженныеОбъекты, СписокОшибок, ДополнительныеПараметры);

					КонецЕсли;

					Если ЗначениеЗаполнено(Данные.Отбор.Характеристика.Значение) И ВыгруженныеОбъекты.Получить(Данные.Отбор.Характеристика.Значение) = Неопределено Тогда
						
						ДобавитьДанныеВТаблицуОбмена(Данные.Отбор.Характеристика.Значение.ПолучитьОбъект(), ТаблицаДанных, Магазин, ВыгруженныеОбъекты, СписокОшибок, ДополнительныеПараметры);

					КонецЕсли;

				//	"Отбор" обязательно, так как предыдущая цена может очищаться и сам набор записей будет пуст.
					СтруктураДанных = Новый Структура("Отбор, НаборЗаписей", Новый Структура, Новый ТаблицаЗначений);

					СтруктураДанных.Отбор.Вставить("Номенклатура"  , ПолучитьИдентификатор(Данные.Отбор.Номенклатура.Значение));
					СтруктураДанных.Отбор.Вставить("Характеристика", ПолучитьИдентификатор(Данные.Отбор.Характеристика.Значение));

					СтруктураДанных.НаборЗаписей.Колонки.Добавить("Номенклатура");
					СтруктураДанных.НаборЗаписей.Колонки.Добавить("Характеристика");
					СтруктураДанных.НаборЗаписей.Колонки.Добавить("Цена");
					СтруктураДанных.НаборЗаписей.Колонки.Добавить("Упаковка");
					СтруктураДанных.НаборЗаписей.Колонки.Добавить("Акция");

					Для каждого ЗаписьНабора Из Данные Цикл

						Если ЗначениеЗаполнено(ЗаписьНабора.Упаковка) И ВыгруженныеОбъекты.Получить(ЗаписьНабора.Упаковка) = Неопределено Тогда
							
						//	хотя упаковки и выгружаются все при выгрузке владельца... но перестрахуемся - мало-ли что изменилось в процессе выгрузки.
							ДополнительныеПараметры.Вставить("Упаковка", ЗаписьНабора.Упаковка);
							ДобавитьДанныеВТаблицуОбмена(ЗаписьНабора.Упаковка.ПолучитьОбъект(), ТаблицаДанных, Магазин, ВыгруженныеОбъекты, СписокОшибок, ДополнительныеПараметры);

						КонецЕсли;

						СтрокаНабора = СтруктураДанных.НаборЗаписей.Добавить();

						СтрокаНабора.Номенклатура   = СтруктураДанных.Отбор.Номенклатура;
						СтрокаНабора.Характеристика = СтруктураДанных.Отбор.Характеристика;

						СтрокаНабора.Цена     = ЗаписьНабора.Цена;
						СтрокаНабора.Упаковка = ПолучитьИдентификатор(ЗаписьНабора.Упаковка);
						СтрокаНабора.Акция    = ЗаписьНабора.Акция;

					КонецЦикла;

					СтрокаДанных = ТаблицаДанных.Добавить();
					СтрокаДанных.НомерТипа = ОписаниеТипа.НомерТипа;
					СтрокаДанных.Данные    = СтруктураДанных;

				КонецЕсли;

			ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.Штрихкоды") Тогда

				ВыгруженныеОбъекты.Вставить(Данные, Истина);

				Если ВыгруженныеОбъекты.Получить(Данные.Отбор.Владелец.Значение) = Неопределено Тогда

				//	Выгружаем данные владельца.
					ДополнительныеПараметры.Вставить("Штрихкод", Данные.Отбор.Штрихкод.Значение);
					ДобавитьДанныеВТаблицуОбмена(Данные.Отбор.Владелец.Значение.ПолучитьОбъект(), ТаблицаДанных, Магазин, ВыгруженныеОбъекты, СписокОшибок, ДополнительныеПараметры);

				КонецЕсли;

				Если ЗначениеЗаполнено(Данные.Отбор.Характеристика.Значение) И ВыгруженныеОбъекты.Получить(Данные.Отбор.Характеристика.Значение) = Неопределено Тогда
					
					ДобавитьДанныеВТаблицуОбмена(Данные.Отбор.Характеристика.Значение.ПолучитьОбъект(), ТаблицаДанных, Магазин, ВыгруженныеОбъекты, СписокОшибок, ДополнительныеПараметры);

				КонецЕсли;

				Если ЗначениеЗаполнено(Данные.Отбор.Упаковка.Значение) И ВыгруженныеОбъекты.Получить(Данные.Отбор.Упаковка.Значение) = Неопределено Тогда
					
				//	хотя упаковки и выгружаются все при выгрузке владельца... но перестрахуемся - мало-ли что изменилось в процессе выгрузки.
					ДополнительныеПараметры.Вставить("Упаковка", Данные.Отбор.Упаковка.Значение);
					ДобавитьДанныеВТаблицуОбмена(Данные.Отбор.Упаковка.Значение.ПолучитьОбъект(), ТаблицаДанных, Магазин, ВыгруженныеОбъекты, СписокОшибок, ДополнительныеПараметры);

				КонецЕсли;

			//	"Отбор" обязательно, так как штрихкод может очищаться и сам набор записей будет пуст.
				СтруктураДанных = Новый Структура("Отбор", Новый Структура);

				СтруктураДанных.Отбор.Вставить("Владелец"      , ПолучитьИдентификатор(Данные.Отбор.Владелец.Значение));
				СтруктураДанных.Отбор.Вставить("Штрихкод"      , Данные.Отбор.Штрихкод.Значение);
				СтруктураДанных.Отбор.Вставить("Характеристика", ПолучитьИдентификатор(Данные.Отбор.Характеристика.Значение));
				СтруктураДанных.Отбор.Вставить("Упаковка"      , ПолучитьИдентификатор(Данные.Отбор.Упаковка.Значение));

				СтрокаДанных = ТаблицаДанных.Добавить();
				СтрокаДанных.НомерТипа = ОписаниеТипа.НомерТипа;
				СтрокаДанных.Данные    = СтруктураДанных;

			ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ПечатьЦенниковВТСД") Тогда

				ВыгруженныеОбъекты.Вставить(Данные, Истина);

			//	"Отбор" обязательно, так как набор может очищаться и сам набор записей будет пуст.
				СтруктураДанных = Новый Структура("Отбор, НаборЗаписей", Новый Структура, Новый ТаблицаЗначений);

				СтруктураДанных.Отбор.Вставить("Проект", ПолучитьИдентификатор(Данные.Отбор.Проект.Значение));

				СтруктураДанных.НаборЗаписей.Колонки.Добавить("Проект");
				СтруктураДанных.НаборЗаписей.Колонки.Добавить("Печатать");

				Для каждого ЗаписьНабора Из Данные Цикл

					Если ЗаписьНабора.Магазин = Магазин Тогда

						СтрокаНабора = СтруктураДанных.НаборЗаписей.Добавить();

						СтрокаНабора.Проект   = СтруктураДанных.Отбор.Проект;
						СтрокаНабора.Печатать = ЗаписьНабора.Печатать;

					КонецЕсли;

				КонецЦикла;

			ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ПереоценкаТоваровНаСкладах")
				ИЛИ   ТипЗнч(Данные) = Тип("ДокументОбъект.ПеремещениеТоваров")	Тогда
				//ИЛИ   ТипЗнч(Данные) = Тип("ДокументОбъект.ПриходныйОрдерНаТовары")
				//ИЛИ   ТипЗнч(Данные) = Тип("ДокументОбъект.РасходныйОрдерНаТовары")	Тогда

				ВыгруженныеОбъекты.Вставить(Данные, Истина);

				СтруктураДанных = Новый Структура(
					"УИ, ПометкаУдаления, Проведен, Номер, Дата, Комментарий, Товары"
					, ПолучитьИдентификатор(Данные.Ссылка), Данные.ПометкаУдаления, Данные.Проведен, Данные.Номер, Данные.Дата, Данные.Комментарий, Новый ТаблицаЗначений);

				СтруктураДанных.Товары.Колонки.Добавить("Номенклатура"  , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
				СтруктураДанных.Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
			//	СтруктураДанных.Товары.Колонки.Добавить("Упаковка"      , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
				СтруктураДанных.Товары.Колонки.Добавить("КоличествоФакт", Новый ОписаниеТипов("Число"));
				СтруктураДанных.Товары.Колонки.Добавить("Количество"    , Новый ОписаниеТипов("Число"));
				СтруктураДанных.Товары.Колонки.Добавить("ЦенаНовая"     , Новый ОписаниеТипов("Число"));
				СтруктураДанных.Товары.Колонки.Добавить("Цена"          , Новый ОписаниеТипов("Число"));

				Если ТипЗнч(Данные) = Тип("ДокументОбъект.ПереоценкаТоваровНаСкладах") Тогда

					СтруктураДанных.Вставить("ВидНоменклатуры", ПолучитьИдентификатор(Данные.ВидНоменклатуры));
					СтруктураДанных.Вставить("СтатусТСД"      , ПолучитьИдентификатор(Перечисления.СтатусДокТСД.НОВЫЙ, "Перечисления"));
					СтруктураДанных.Вставить("Акционная"      , Данные.Акционная);
					
				Иначе

					СтруктураДанных.Вставить("СтатусТСД"      , ПолучитьИдентификатор(Перечисления.СтатусДокТСД.НОВЫЙ, "Перечисления"));

				КонецЕсли;

				Если ТипЗнч(Данные) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда

					ОписаниеТипа = ОбменДаннымиADCTСерверПовтИсп.СоответствиеТиповСоставаПланаОбмена().МД.Получить(
						?(Данные.МагазинПолучатель = Магазин, Метаданные.Документы.ПриходныйОрдерНаТовары, Метаданные.Документы.РасходныйОрдерНаТовары));

				КонецЕсли;

				Для каждого СтрокаТабличнойЧасти Из Данные.Товары Цикл

					СтрокаТовары = СтруктураДанных.Товары.Добавить();

					СтрокаТовары.Номенклатура   = ПолучитьИдентификатор(СтрокаТабличнойЧасти.Номенклатура);
					СтрокаТовары.Характеристика = ПолучитьИдентификатор(СтрокаТабличнойЧасти.Характеристика);
				//	СтрокаТовары.Упаковка       = ПолучитьИдентификатор(СтрокаТабличнойЧасти.Упаковка);
					СтрокаТовары.Количество     = СтрокаТабличнойЧасти.Количество;
					СтрокаТовары.Цена           = СтрокаТабличнойЧасти.Цена;

					Если ТипЗнч(Данные) = Тип("ДокументОбъект.ПереоценкаТоваровНаСкладах") Тогда

						СтрокаТовары.КоличествоФакт = СтрокаТабличнойЧасти.КоличествоФакт;
						СтрокаТовары.ЦенаНовая      = СтрокаТабличнойЧасти.ЦенаНовая;

					КонецЕсли;

				КонецЦикла;

				СтрокаДанных = ТаблицаДанных.Добавить();
				СтрокаДанных.НомерТипа = ОписаниеТипа.НомерТипа;
				СтрокаДанных.Данные    = СтруктураДанных;

			КонецЕсли;

		Иначе

			Отказ = Истина;

		КонецЕсли;

	Иначе

		Отказ = Истина;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции // ДобавитьДанныеВТаблицуОбмена()

Функция ПолучитьИдентификатор(ЛюбаяСсылка, Класс = "")

	ИдентификаторСтрока = "";

	Если ЗначениеЗаполнено(ЛюбаяСсылка) Тогда

		Если Класс = "Перечисления" Тогда

			ИдентификаторСтрока = ОбщегоНазначенияКлиентСервер.ИмяЗначенияПеречисления(ЛюбаяСсылка);

		Иначе

			ИдентификаторСтрока = СокрЛП(ЛюбаяСсылка.УникальныйИдентификатор());

		КонецЕсли;

	КонецЕсли;

	Возврат ИдентификаторСтрока;

КонецФункции // ПолучитьИдентификатор()

//	LNK 12.03.2018 08:29:43
Функция ПолучитьСсылку(Идентификатор, МенеджерСсылки)	Экспорт

	Ссылка = МенеджерСсылки.ПустаяСсылка();

	Если НЕ ПустаяСтрока(Идентификатор) Тогда

		Если ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(Метаданные.НайтиПоТипу(ТипЗнч(Ссылка))) = "Перечисления" Тогда

			Ссылка = МенеджерСсылки[Идентификатор];

		Иначе

			Ссылка = МенеджерСсылки.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));

		КонецЕсли;

	КонецЕсли;

	Возврат Ссылка;

КонецФункции // ПолучитьСсылку()

//	LNK 15.03.2018 10:47:19
Процедура ПодготовитьСтруктуруОбмена(ДанныеОбмена, НомерСообщения = 0)	Экспорт

	ДанныеОбмена.Вставить("НомерСообщения", НомерСообщения);
	ДанныеОбмена.Вставить("ТаблицаДанных", Новый ТаблицаЗначений);
	ДанныеОбмена.ТаблицаДанных.Колонки.Добавить("НомерТипа", Новый ОписаниеТипов("Число"));
	ДанныеОбмена.ТаблицаДанных.Колонки.Добавить("Данные"   , Новый ОписаниеТипов("Структура, ТаблицаЗначений"));

	ДанныеОбмена.Вставить("СоставТипов", ОбменДаннымиADCTСерверПовтИсп.СоответствиеТиповСоставаПланаОбмена().Порядок);

КонецПроцедуры

#КонецОбласти

#Область РаботаСРегистрамиСтатусовДокументаВУстройствах

//	LNK 03.05.2018 11:01:30
Процедура УстановитьСтатусДокументаВУстройстве(ДокументСсылка, СтатусДокумента, ДанныеУзла)	Экспорт

	Если НЕ СтатусДокумента.Пустая() Тогда

		НаборЗаписей = РегистрыСведений.СтатусТСД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Магазин.Установить(ДанныеУзла.Магазин);
		НаборЗаписей.Отбор.Объект.Установить(ДокументСсылка);

		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Магазин   = НаборЗаписей.Отбор.Магазин.Значение;
		ЗаписьНабора.Объект    = НаборЗаписей.Отбор.Объект.Значение;
		ЗаписьНабора.СтатусТСД = СтатусДокумента;

		НаборЗаписей.Записать();

		НаборЗаписей = РегистрыСведений.СтатусДокументаADCT.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ДокументСсылка);
		НаборЗаписей.Отбор.УстройствоADCT.Установить(ДанныеУзла.Узел);

		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Объект         = НаборЗаписей.Отбор.Объект.Значение;
		ЗаписьНабора.УстройствоADCT = НаборЗаписей.Отбор.УстройствоADCT.Значение;
		ЗаписьНабора.СтатусТСД      = СтатусДокумента;

		НаборЗаписей.Записать();

	КонецЕсли;

КонецПроцедуры

//	LNK 03.05.2018 14:15:35
Функция ПроверитьСостояниеДокументовВУстройствах(ДанныеОбмена, ДанныеУзла, ДокументСсылка = Неопределено)	Экспорт


КонецФункции // ПроверитьСостояниеДокументовВУстройствах()

#КонецОбласти



