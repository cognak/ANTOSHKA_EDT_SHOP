/////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОИСКА И ОПРЕДЕЛЕНИЯ ТИПОВ ШТРИХКОДОВ

// Обработка полученного штрихкода 
// Штрихкод - Строка
// Форма - Форма, в которой определен обработчик действия "ПолученыШтрихкоды"
// СтруктураДействий, ключи: ПроверкаВесовыхТоваров, 
//                           ПроверкаТоваров,
//                           ПроверкаСерийныхНомеров,
//                           ПроверкаКарт [РегистрацияНовойКарты, Пользователь]          
Функция ПолученШтрихкодИзСШК(Штрихкод, Форма, СтруктураДействий = Неопределено) Экспорт
	
	Перем СтруктураПараметровДействия, Пользователь;
	
	Если СтруктураДействий = Неопределено Тогда
		СтруктураДействий = ВариантыПроверокШтрихкода();
	КонецЕсли;
	
	ТипШтрихкода               = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13; // ОпределитьТипШтрихкода(Штрихкод);
	НеизвестныеДанныеПО        = Истина;
	СтруктураПараметровКлиента = Новый Структура;          
	
//	Товары, серийные номера, информационные карты	
	Если СтруктураДействий.Свойство("ПроверкаТоваров")
		ИЛИ СтруктураДействий.Свойство("ПроверкаСерийныхНомеров")
		ИЛИ СтруктураДействий.Свойство("ПроверкаКлючейСерийныхНомеров")			//	LNK 29.01.2020 13:29:52
		ИЛИ СтруктураДействий.Свойство("ПроверкаПодарочныхСертификатовПродажа")	//	LNK 17.02.2020 11:07:55
		ИЛИ СтруктураДействий.Свойство("ПроверкаКарт") Тогда
		
	//	LNK 17.02.2020 10:31:30
		Если СтруктураДействий.Свойство("ПроверкаПодарочныхСертификатовПродажа") И НЕ СтруктураПараметровКлиента.Свойство("ПрекратитьПоиск") Тогда

			МаскаСертификата = Лев(Штрихкод, ПодарочныеСертификатыПовтИсп.ДлинаМаски());

			Если ПодарочныеСертификатыПовтИсп.МаскиСертификатов().Получить(МаскаСертификата) = Истина Тогда

				НеизвестныеДанныеПО = Ложь;

				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("НеизвестныеДанныеПО", НеизвестныеДанныеПО);
			//	СтруктураПараметров.Вставить("ПрекратитьПоиск", Истина);
				СтруктураПараметров.Вставить("ЗначенияПоиска" , Новый Массив);
				СтруктураПараметров.Вставить("Действие"       , "ПроверкаПодарочныхСертификатовПродажа");
				СтруктураПараметров.ЗначенияПоиска = ПодарочныеСертификатыСервер.ПолучитьСостояниеПодарочногоСертификатаКод(
					Штрихкод, СтруктураДействий.ПроверкаПодарочныхСертификатовПродажа.РесурсWebRetailДоступен);

				СтруктураПараметровКлиента = Форма.ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента);

			КонецЕсли;

		КонецЕсли;

	//	КлючиСерийныхНомеров (ПодарочныеСертификаты номерные - ключ секретный)
		Если СтруктураДействий.Свойство("ПроверкаКлючейСерийныхНомеров")
			И НЕ СтруктураПараметровКлиента.Свойство("ПрекратитьПоиск") Тогда

			СоставОбъекта = ПодарочныеСертификатыСервер.ПолучитьСоставСерийногоНомера(Штрихкод);

			НеизвестныеДанныеПО = НЕ СоставОбъекта.Найден;

			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("НеизвестныеДанныеПО", НеизвестныеДанныеПО);
			СтруктураПараметров.Вставить("ПрекратитьПоиск", Истина);
			СтруктураПараметров.Вставить("ЗначенияПоиска" , Новый Массив);
			СтруктураПараметров.Вставить("Действие"       , "ПроверкаКлючейСерийныхНомеров");
			СтруктураПараметров.ЗначенияПоиска.Добавить(СоставОбъекта);

			СтруктураПараметровКлиента = Форма.ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента);

		КонецЕсли;

		// Товары
		Если СтруктураДействий.Свойство("ПроверкаТоваров") И НЕ СтруктураПараметровКлиента.Свойство("ПрекратитьПоиск") Тогда

			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ЗначенияПоиска", Новый Массив);
			СтруктураПараметров.Вставить("Действие", "ПроверкаТоваров");

			Если СтруктураДействий.Свойство("ИспользоватьКоличество") Тогда
				СтруктураПараметров.Вставить("ИспользоватьКоличество", СтруктураДействий.ИспользоватьКоличество);
				Если СтруктураДействий.Свойство("ОбновитьКоличество") Тогда
					СтруктураПараметров.Вставить("ОбновитьКоличество", СтруктураДействий.ИспользоватьКоличество);
				КонецЕсли;
			КонецЕсли;

			Если СтрДлина(Штрихкод) < 8 Тогда	//	LNK 13.02.2020 13:59:01

				СтруктураШтрихкода = ПодключаемоеОборудованиеРТПовтИсп.ПолучитьНоменклатуруПоКоду(
					  Штрихкод
					, НЕ СтруктураДействий.Свойство("ИспользоватьДополнительныеКолонки")
					, СтруктураДействий.Свойство("ИспользоватьMicrosoftDynamics")
					, СтруктураДействий.Свойство("РаботаетФронт")	//	LNK 13.02.2020 13:50:08
				);
			
			Иначе

				СтруктураШтрихкода = ПодключаемоеОборудованиеРТПовтИсп.ПолучитьНоменклатуруПоШтрихКоду(
					  Штрихкод
					, НЕ СтруктураДействий.Свойство("ИспользоватьДополнительныеКолонки")
					, СтруктураДействий.Свойство("ИспользоватьMicrosoftDynamics")
					, СтруктураДействий.Свойство("РаботаетФронт")	//	LNK 13.02.2020 13:50:08
				);

			КонецЕсли;

			Если НЕ СтруктураШтрихкода = Неопределено Тогда

				НеизвестныеДанныеПО = Ложь;
				СтруктураПараметров.ЗначенияПоиска.Добавить(СтруктураШтрихкода);

			КонецЕсли;
			
			СтруктураПараметров.Вставить("НеизвестныеДанныеПО", НеизвестныеДанныеПО);
			СтруктураПараметровКлиента = Форма.ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента);
			
		КонецЕсли;

		//Серийные номера
		Если СтруктураДействий.Свойство("ПроверкаСерийныхНомеров")
			И НЕ СтруктураПараметровКлиента.Свойство("ПрекратитьПоиск") Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаСправочник.Владелец КАК Номенклатура,
			|	ТаблицаСправочник.Ссылка КАК СерийныйНомер
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерийныеНомера КАК ТаблицаСправочник
			|		ПО Штрихкоды.Владелец = ТаблицаСправочник.Ссылка
			|ГДЕ
			|	Штрихкоды.Штрихкод = &Штрихкод"
			);
			Запрос.УстановитьПараметр("Штрихкод", Штрихкод);

			Выборка = Запрос.Выполнить().Выбрать();

			Если Выборка.Следующий() Тогда

				НеизвестныеДанныеПО = Ложь;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("НеизвестныеДанныеПО", НеизвестныеДанныеПО);
				СтруктураПараметров.Вставить("ЗначенияПоиска", Новый Массив);
				СтруктураПараметров.Вставить("Действие", "ПроверкаСерийныхНомеров");
				СтруктураПараметров.ЗначенияПоиска.Добавить(Выборка.СерийныйНомер);

				СтруктураПараметровКлиента = Форма.ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента);

			КонецЕсли;

		КонецЕсли;

		//Информационные карты
		Если СтруктураДействий.Свойство("ПроверкаКарт", СтруктураПараметровДействия)
			И НЕ СтруктураПараметровКлиента.Свойство("ПрекратитьПоиск") Тогда

			Запрос = Новый Запрос;

			Если СтрДлина(Штрихкод) = 8 тогда

				ТекстЗапроса =
				"ВЫБРАТЬ
				|	СпрКарты.Ссылка КАК ИнформационнаяКарта,
				|	СпрКарты.ВладелецКарты КАК ВладелецКарты,
				|	СпрКарты.ТипКарты КАК ТипКарты,
				|	СпрКарты.ПометкаУдаления ИЛИ СпрКарты.Блокирован КАК ПометкаУдаления
				|ИЗ
				|	Справочник.ИнформационныеКарты КАК СпрКарты
				|ГДЕ
				|	СпрКарты.КодКарты = &Штрихкод
				|	И СпрКарты.Ссылка ССЫЛКА Справочник.ИнформационныеКарты
				|	//УсловиеОграничения
				|УПОРЯДОЧИТЬ ПО
				|	ПометкаУдаления"
				;

			Иначе

				ТекстЗапроса =
				"ВЫБРАТЬ
				|	Штрихкоды.Владелец КАК ИнформационнаяКарта,
				|	Штрихкоды.Владелец.ВладелецКарты КАК ВладелецКарты,
				|	Штрихкоды.Владелец.ТипКарты КАК ТипКарты,
				|	Штрихкоды.Владелец.ПометкаУдаления ИЛИ Штрихкоды.Владелец.Блокирован КАК ПометкаУдаления
				|ИЗ
				|	РегистрСведений.Штрихкоды КАК Штрихкоды
				|ГДЕ
				|	Штрихкоды.Штрихкод = &Штрихкод
				|	И Штрихкоды.Владелец ССЫЛКА Справочник.ИнформационныеКарты
				|	//УсловиеОграничения
				|УПОРЯДОЧИТЬ ПО
				|	ПометкаУдаления"
				;

				ОграничениеПоТипу = Ложь;
				ЗначениеИсключения = Неопределено;

				Если СтруктураПараметровДействия <> Неопределено Тогда
					Если СтруктураПараметровДействия.Свойство("ТолькоДисконтныеКарты") Тогда
						ЗначениеИсключения = Перечисления.ТипыИнформационныхКарт.Регистрационная;
						ОграничениеПоТипу = Истина;
					ИначеЕсли СтруктураПараметровДействия.Свойство("ТолькоРегистрационныеКарты") Тогда
						ЗначениеИсключения = Перечисления.ТипыИнформационныхКарт.Дисконтная;
						ОграничениеПоТипу = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если ОграничениеПоТипу Тогда
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//УсловиеОграничения", "И Штрихкоды.Владелец.ТипКарты <> &ЗначениеИсключения");
					Запрос.УстановитьПараметр("ЗначениеИсключения", ЗначениеИсключения);
				КонецЕсли;

			КонецЕсли;

			Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
			Запрос.Текст = ТекстЗапроса;

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда

				НеизвестныеДанныеПО = Ложь;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("НеизвестныеДанныеПО", НеизвестныеДанныеПО);
				СтруктураПараметров.Вставить("ЗначенияПоиска", Новый Массив);
				СтруктураПараметров.Вставить("Действие", "ПроверкаКарт");

				Если НЕ СтруктураПараметровКлиента.Свойство("ЭтоШтрихкод") Тогда
					СтруктураПараметровКлиента.Вставить("ЭтоШтрихкод");
				КонецЕсли;
				
				Выборка = РезультатЗапроса.Выбрать();

				Пока Выборка.Следующий() Цикл
					
					СтруктураШтрихкода  = Новый Структура;
					ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, Выборка, СтруктураШтрихкода);
					СтруктураПараметров.ЗначенияПоиска.Добавить(СтруктураШтрихкода);
					
				КонецЦикла;

				СтруктураПараметровКлиента = Форма.ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	// Регистрация новой информационной карты
	Если СтруктураДействий.Свойство("ПроверкаКарт", СтруктураПараметровДействия)
		И НЕ СтруктураПараметровКлиента.Свойство("ПрекратитьПоиск") Тогда
		
		Если СтруктураПараметровДействия <> Неопределено
			И СтруктураПараметровДействия.Свойство("РегистрацияНовойКарты") Тогда
			
			Если НЕ СтруктураПараметровДействия.Свойство("Пользователь", Пользователь) Тогда
				Пользователь = Пользователи.ТекущийПользователь();
			КонецЕсли;
			              
			Если УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьРегистрациюДисконтнойКартыПриСчитыванииНовогоКода, Ложь, Пользователь) Тогда
				
				МассивШаблонов = Новый Массив;
				Если РегистрыСведений.ШаблоныРегистрацииНовыхКарт.РезультатПроверкиСоответствияШаблонам(Штрихкод, Перечисления.ВидыИнформационныхКарт.Штриховая, МассивШаблонов) Тогда
					
					НеизвестныеДанныеПО = Ложь;
					СтруктураПараметров = Новый Структура;
					СтруктураПараметров.Вставить("НеизвестныеДанныеПО", НеизвестныеДанныеПО);
					СтруктураПараметров.Вставить("КодКарты", Штрихкод);
					СтруктураПараметров.Вставить("ТипШтрихкода", ТипШтрихкода);
					СтруктураПараметров.Вставить("ЗначенияПоиска", МассивШаблонов);
					СтруктураПараметров.Вставить("Действие", "РегистрацияНовойКарты");

					СтруктураПараметровКлиента = Форма.ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента);
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Регистрация новой номенклатуры
	Если СтруктураДействий.Свойство("ПроверкаТоваров", СтруктураПараметровДействия)
		И НЕ СтруктураПараметровКлиента.Свойство("ПрекратитьПоиск") Тогда
		
		Если СтруктураПараметровДействия <> Неопределено
			И СтруктураПараметровДействия.Свойство("РегистрацияНовойНоменклатуры") Тогда
			
			НеизвестныеДанныеПО = Ложь;
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("НеизвестныеДанныеПО", НеизвестныеДанныеПО);
			СтруктураПараметров.Вставить("Штрихкод", Штрихкод);
			СтруктураПараметров.Вставить("ТипШтрихкода", ТипШтрихкода);
			СтруктураПараметров.Вставить("Действие", "РегистрацияНовойНоменклатуры");
			
			Если СтруктураДействий.Свойство("ИспользоватьКоличество") Тогда
				СтруктураПараметров.Вставить("ИспользоватьКоличество", СтруктураДействий.ИспользоватьКоличество);
				Если СтруктураДействий.Свойство("ОбновитьКоличество") Тогда
					СтруктураПараметров.Вставить("ОбновитьКоличество", СтруктураДействий.ИспользоватьКоличество);
				КонецЕсли;
			КонецЕсли;
			
			СтруктураПараметровКлиента = Форма.ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента);
			
		КонецЕсли;
		
	КонецЕсли;

	Если НеизвестныеДанныеПО 
		ИЛИ НЕ СтруктураПараметровКлиента.Свойство("ПрекратитьПоиск") Тогда

		СтруктураПараметровКлиента.Вставить("НеизвестныеДанныеПО", Истина);
		СтруктураПараметровКлиента.Вставить("ЭтоШтрихкод");

	КонецЕсли;

	Возврат СтруктураПараметровКлиента;

КонецФункции	

// Функция возвращает результат проверки строки на предмет соответствия
// штрихкоду формата EAN8.
//
// Параметры:
//  Штрихкод - Строка - Проверяемый штрихкод.
//
// Возвращаемое значение:
//  Булево - Результат проверки
//
Функция ТипШтрихкодаEAN8(Штрихкод) Экспорт
	
	Результат   = Ложь;
	Сумма       = 0;
	Коэффициент = 3;
	
	Если СтрДлина(Штрихкод) = 8 Тогда
		
		Для Индекс = 1 По 7 Цикл
			КодСимв = КодСимвола(Штрихкод, Индекс);
			Если КодСимв < 48 Или КодСимв > 57 Тогда
				Возврат Результат;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (КодСимв - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма     = (10 - Сумма % 10) % 10;
		Результат = (КодСимвола(Штрихкод, 8) = Сумма + 48);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Функция возвращает результат проверки строки на предмет соответствия
// штрихкоду формата ITF14.
//
// Параметры:
//  Штрихкод - Строка - Проверяемый штрихкод.
//
// Возвращаемое значение:
//  Булево - Результат проверки.
//
Функция ТипШтрихкодаITF14(Штрихкод) Экспорт
	
	Результат   = Ложь;
	Сумма       = 0;
	Коэффициент = 1;
	
	Если СтрДлина(Штрихкод) = 14 Тогда
		
		Для Индекс = 1 По 13 Цикл
			КодСимв = КодСимвола(Штрихкод, Индекс);
			Если КодСимв < 48 Или КодСимв > 57 Тогда
				Возврат Результат;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (КодСимв - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма     = (10 - Сумма % 10) % 10;
		Результат = (КодСимвола(Штрихкод, 14) = Сумма + 48);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Функция возвращает результат проверки строки на предмет соответствия
// штрихкоду формата CODE39.
//
// Параметры:
//  Штрихкод - Строка - Проверяемый штрихкод.
//
// Возвращаемое значение:
//  Булево - Результат проверки.
//
Функция ТипШтрихкодаCODE39(Штрихкод) Экспорт
	
	Результат = Ложь;
	Длина     = СтрДлина(Штрихкод);
	
	Если Длина > 0 Тогда
		Результат = Истина;
		Для Индекс = 1 По Длина Цикл
			КодСимв = КодСимвола(Штрихкод, Индекс);
			Если (КодСимв <> 32)
				И (КодСимв < 36 Или КодСимв > 37)
				И (КодСимв <> 43)
				И (КодСимв < 45 Или КодСимв > 57)
				И (КодСимв < 65 Или КодСимв > 90) Тогда
				
				Результат = Ложь;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Функция возвращает результат проверки строки на предмет соответствия
// штрихкоду формата EAN13.
//
// Параметры:
//  Штрихкод - Строка - Проверяемый штрихкод.
//
// Возвращаемое значение:
//  Булево - Результат проверки.
//
Функция ТипШтрихкодаEAN13(Штрихкод) Экспорт
	
	Результат = (СтрДлина(Штрихкод) = 13
	И КонтрольныйСимволEAN13(Штрихкод) = Прав(Штрихкод, 1));
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает контрольный символ штрихкода EAN13.
//
// Параметры:
//  Штрихкод - Строка
//           - Неполный штрихкод (12 символов), для которого вычисляется
//             контрольный 13-й символ.
//
// Возвращаемое значение:
//  Строка - Контрольный символ EAN13.
//
Функция КонтрольныйСимволEAN13(Штрихкод) Экспорт
	
	Результат   = "";
	Сумма       = 0;
	Коэффициент = 1;
	
	Для Индекс = 1 По 12 Цикл
		КодСимв     = КодСимвола(Штрихкод, Индекс);
		Сумма       = Сумма + Коэффициент * (КодСимв - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма     = (10 - Сумма % 10) % 10;
	Результат = Символ(Сумма + 48);
	
	Возврат Результат;
	
КонецФункции 

// Функция вычисляет контрольный символ кода EAN
//
// Параметры:
//  Штрихкод     - штрихкод (без контрольной цифры)
//  Тип          - тип штрихкода: 13 - EAN13, 8 - EAN8
//
// Возвращаемое значение:
//  Контрольный символ штрихкода
//
Функция КонтрольныйСимволEAN(Штрихкод, Тип) Экспорт

	Четн   = 0;
	Нечетн = 0;

	КоличествоИтераций = ?(Тип = 13, 6, 4);

	Для Индекс = 1 По КоличествоИтераций Цикл
		Если (Тип = 8) и (Индекс = КоличествоИтераций) Тогда
		Иначе
			Четн   = Четн   + Сред(ШтрихКод, 2 * Индекс, 1);
		КонецЕсли;
		Нечетн = Нечетн + Сред(ШтрихКод, 2 * Индекс - 1, 1);
	КонецЦикла;

	Если Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;

	КонтЦифра = 10 - (Четн + Нечетн) % 10;

	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));

КонецФункции 

// Определить тип штрихкода по значению
//
Функция ОпределитьТипШтрихкода(Штрихкод) Экспорт
	
	ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.ПустаяСсылка();
	ТипШтрихкодаВрем = МенеджерОборудованияСервер.ОпределитьТипШтрихкода(Штрихкод);
	
	Если ТипШтрихкодаВрем = "EAN8" Тогда
		ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8;
	ИначеЕсли ТипШтрихкодаВрем = "EAN13" Тогда
		ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
	ИначеЕсли ТипШтрихкодаВрем = "CODE39" Тогда
		ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.CODE39;
	ИначеЕсли ТипШтрихкодаВрем = "CODE128" Тогда
		ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.CODE128;
	ИначеЕсли ТипШтрихкодаВрем = "EAN128" Тогда
		ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128;
	КонецЕсли;
	
	Возврат ТипШтрихкода;
	
КонецФункции	

// Возвращает варианты проверок штрихкода
// 
Функция ВариантыПроверокШтрихкода() Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаВесовыхТоваров");
	СтруктураДействий.Вставить("ПроверкаТоваров");
	СтруктураДействий.Вставить("ПроверкаСерийныхНомеров");
	СтруктураДействий.Вставить("ПроверкаКарт");

	Возврат СтруктураДействий;
	
КонецФункции

/////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ШТРИХКОДОВ В СПРАВОЧНИКАХ И ДОКУМЕНТАХ

// Получить штрихкод для товара
//
Функция ПолучитьШтрихкод(Владелец, Характеристика = Неопределено, Упаковка = Неопределено) Экспорт

	СтруктураШтрихкода = Неопределено;
	Если Упаковка = Неопределено Тогда
		Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если Характеристика = Неопределено Тогда
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
		
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	Штрихкоды.ТипШтрихкода,
	|	Штрихкоды.Штрихкод
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Владелец = &Владелец
	|	И Штрихкоды.Упаковка = &Упаковка
	|	И Штрихкоды.Характеристика = &Характеристика");

	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Упаковка", Упаковка);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураШтрихкода = ОбщегоНазначенияРТ.СоздатьСтруктуруПоСтрокеВыборки(РезультатЗапроса, Выборка);
	КонецЕсли;	
	
	Возврат СтруктураШтрихкода;

КонецФункции 

// Сформировать новый штрихкод
//
Функция СформироватьШтрихкод(Знач ПрефиксВнутреннегоШтрихкодаШтучногоТовара = Неопределено, Знач ПрефиксШтрихкодаУзлаРИБ = Неопределено) Экспорт
	
	Если ПрефиксВнутреннегоШтрихкодаШтучногоТовара = Неопределено Тогда
		ПрефиксВнутреннегоШтрихкодаШтучногоТовара = СокрЛП(Константы.ПрефиксВнутреннегоШтрихкодаШтучногоТовара.Получить());
	КонецЕсли;

	Если ПрефиксШтрихкодаУзлаРИБ = Неопределено Тогда
		ПрефиксШтрихкодаУзлаРИБ = Константы.ПрефиксШтрихкодаУзлаРИБ.Получить();
	КонецЕсли;

	ПрефиксВнутреннегоШтрихкодаШтучногоТовара = ?(ПустаяСтрока(ПрефиксВнутреннегоШтрихкодаШтучногоТовара), "0", ПрефиксВнутреннегоШтрихкодаШтучногоТовара);
	ПрефиксШтрихкодаУзлаРИБ = Формат(ПрефиксШтрихкодаУзлаРИБ, "ЧЦ=2; ЧН=; ЧВН=");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МАКСИМУМ(ПОДСТРОКА(Штрихкоды.Штрихкод, 5, 8)) КАК Код
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.ТипШтрихкода = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыШтрихкодов.EAN13)
	|	И Штрихкоды.Штрихкод ПОДОБНО ""2" + ПрефиксВнутреннегоШтрихкодаШтучногоТовара + ПрефиксШтрихкодаУзлаРИБ + "_________""");

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ТекущийКод = ?(Выборка.Код = NULL, 1, Мин(Число(Выборка.Код) + 1, 99999999));

	Штрихкод = "2" + ПрефиксВнутреннегоШтрихкодаШтучногоТовара + ПрефиксШтрихкодаУзлаРИБ + Формат(ТекущийКод, "ЧЦ=8; ЧВН=; ЧГ=");
	Штрихкод = Штрихкод + КонтрольныйСимволEAN(ШтрихКод, 13);

	Возврат Штрихкод;

КонецФункции // СформироватьШтрихКод()

//+HVOYA YURA G. 03.10.2016 16:19:35
Функция СформироватьШтрихкодИнформационнойКарты(Магазин) Экспорт
    
  //Если КодМагазина = Неопределено Тогда
    
	//Магазин = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Магазин);
//  КодМагазина = Магазин.НомерМагазина;	- Юра! Так писать нельзя!
//	LNK 17.03.2017 16:30:04
    КодМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "НомерМагазина");
    Если СтрДлина(КодМагазина)<> 3 Тогда
    КодМагазина = Формат(КодМагазина, "ЧЦ=3; ЧН=000; ЧВН=");
    КонецЕсли;
  
  //КонецЕсли;


  Запрос = Новый Запрос("ВЫБРАТЬ
  |  МАКСИМУМ(ПОДСТРОКА(Штрихкоды.Штрихкод, 8, 5)) КАК Код
  |ИЗ
  |  РегистрСведений.Штрихкоды КАК Штрихкоды
  |ГДЕ
  |  Штрихкоды.ТипШтрихкода = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыШтрихкодов.EAN13)
  |  И Штрихкоды.Штрихкод ПОДОБНО ""2" + "999" + КодМагазина  + "______""");

  Выборка = Запрос.Выполнить().Выбрать();
  Выборка.Следующий();
  ТекущийКод = ?(Выборка.Код = NULL, 1, Мин(Число(Выборка.Код) + 1, 99999999));

  Штрихкод = "2" + "999" +  КодМагазина + Формат(ТекущийКод, "ЧЦ=5; ЧВН=; ЧГ=");
  Штрихкод = Штрихкод + КонтрольныйСимволEAN(ШтрихКод, 13);

  Возврат Штрихкод;

КонецФункции // СформироватьШтрихКод()
//-HVOYA YURA G. 03.10.2016 16:19:36

// +HVOYA. 05.10.2016 15:53:57, Львова Е.А.
Функция СформироватьШтрихкодСкидочногоКупона(Знач КодМагазина = Неопределено, КассаККМ) Экспорт
    
  Если КодМагазина = Неопределено Тогда
    
    Магазин = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Магазин);
    КодМагазина = Магазин.НомерМагазина;
    Если СтрДлина(КодМагазина)<> 3 Тогда
    КодМагазина = Формат(КодМагазина, "ЧЦ=3; ЧВН=");
    КонецЕсли;
  
  КонецЕсли;

  //Если НомерКассы = Неопределено Тогда
    
    //КассаККМ = ЗначениеНастроекПовтИсп.ПолучитьКассуККМПоУмолчанию(,,Магазин,ПараметрыСеанса.ТекущийПользователь);
    НомерКассы = КассаККМ.НомерВМагазине;
    Если СтрДлина(НомерКассы)<> 2 Тогда
    НомерКассы = Формат(НомерКассы, "ЧЦ=2; ЧВН=");
    КонецЕсли;
	
	Если НомерКассы = Неопределено Тогда
		НомерКассы = Число(00);
	КонецЕсли;
 // КонецЕсли;

  Запрос = Новый Запрос("ВЫБРАТЬ
  |  МАКСИМУМ(ПОДСТРОКА(Штрихкоды.Штрихкод, 8, 5)) КАК Код
  |ИЗ
  |  РегистрСведений.Штрихкоды КАК Штрихкоды
  |ГДЕ
  |  Штрихкоды.ТипШтрихкода = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыШтрихкодов.EAN13)
  |  И Штрихкоды.Штрихкод ПОДОБНО ""28" + КодМагазина + НомерКассы + "______""");

  Выборка = Запрос.Выполнить().Выбрать();
  Выборка.Следующий();
  ТекущийКод = ?(Выборка.Код = NULL, 1, Мин(Число(Выборка.Код) + 1, 99999999));

  Штрихкод = "28" + КодМагазина + НомерКассы + Формат(ТекущийКод, "ЧЦ=5; ЧВН=; ЧГ=");
  Штрихкод = Штрихкод + КонтрольныйСимволEAN(ШтрихКод, 13);

  Возврат Штрихкод;

КонецФункции // СформироватьШтрихКод()
// -HVOYA. 05.10.2016 15:54:05, Львова Е.А.

// Устанавливает новый штрихкод для товара
// 
Функция УстановитьШтрихкод(Штрихкод, Владелец, Характеристика, Упаковка, ОписаниеОшибки) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ТипШтрихкода  = ОпределитьТипШтрихкода(Штрихкод);
		
		НовыйШтрихкод = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		НовыйШтрихкод.Владелец = Владелец; 
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
			НовыйШтрихкод.Характеристика = Характеристика;
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			НовыйШтрихкод.Упаковка       = Упаковка;
		КонецЕсли;
		
		НовыйШтрихкод.ТипШтрихкода = ТипШтрихкода;
		НовыйШтрихкод.Штрихкод = Штрихкод;
		НовыйШтрихкод.Записать();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = НСтр("ru = 'При записи штрихкодов произошла ошибка.
		                      |Запись штрихкодов не выполнена.
		                      |Дополнительное описание:
		                      |%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

/////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОИСКА И ОПРЕДЕЛЕНИЯ ПО МАГНИТНОМУ КОДУ

// Возвращает варианты проверок магнитного кода
// 
Функция ВариантыПроверокМагнитногоКода() Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаСерийныхНомеров");
	СтруктураДействий.Вставить("ПроверкаКарт");

	Возврат СтруктураДействий;
	
КонецФункции

//Параметры: 
//МагнитныйКод - Строка
//Форма - Форма, в которой определен обработчик действия "ПолученыШтрихкоды"
//СтруктураДействий, ключи: ПроверкаВесовыхТоваров, 
//                          ПроверкаТоваров,
//                          ПроверкаСерийныхНомеров,
//                          ПроверкаКарт [РегистрацияНовойКарты, Пользователь]
// Возвращаемое значение                
//  Структура
Функция ПолученМагнитныйКод(МагнитныйКод, Форма, СтруктураДействий = Неопределено) Экспорт
	
	Перем СтруктураПараметровДействия, Пользователь;
	
	Если СтруктураДействий = Неопределено Тогда
		СтруктураДействий = ВариантыПроверокМагнитногоКода();
	КонецЕсли;
	
	НеизвестныеДанныеПО        = Истина;
	СтруктураПараметровКлиента = Новый Структура;
	
	//Серийные номера, информационные карты
	Если СтруктураДействий.Свойство("ПроверкаСерийныхНомеров")
		ИЛИ СтруктураДействий.Свойство("ПроверкаКарт") Тогда
		
		//Серийные номера
		Если СтруктураДействий.Свойство("ПроверкаСерийныхНомеров") Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СерийныеНомера.Ссылка КАК СерийныйНомер,
			|	СерийныеНомера.ПометкаУдаления КАК ПометкаУдаления
			|ИЗ
			|	Справочник.СерийныеНомера КАК СерийныеНомера
			|ГДЕ
			|	СерийныеНомера.КодСерийногоНомера = &МагнитныйКод
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПометкаУдаления");
			
			Запрос.УстановитьПараметр("МагнитныйКод", МагнитныйКод);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				НеизвестныеДанныеПО = Ложь;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("НеизвестныеДанныеПО", НеизвестныеДанныеПО);
				СтруктураПараметров.Вставить("ЗначенияПоиска", Новый Массив);
				СтруктураПараметров.Вставить("Действие", "ПроверкаСерийныхНомеров");
				СтруктураПараметров.ЗначенияПоиска.Добавить(Выборка.СерийныйНомер);
				СтруктураПараметровКлиента = Форма.ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента);
				
			КонецЕсли;
			
		КонецЕсли;
		
		//Информационные карты
		Если СтруктураДействий.Свойство("ПроверкаКарт", СтруктураПараметровДействия)
			И НЕ СтруктураПараметровКлиента.Свойство("ПрекратитьПоиск") Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("МагнитныйКод", МагнитныйКод);
			
			ОграничениеПоТипу = Ложь;
			ЗначениеИсключения = Неопределено;

			Если НЕ СтруктураПараметровДействия = Неопределено Тогда

				Если СтруктураПараметровДействия.Свойство("ТолькоДисконтныеКарты") Тогда

					ЗначениеИсключения = Перечисления.ТипыИнформационныхКарт.Регистрационная;
					ОграничениеПоТипу = Истина;

				ИначеЕсли СтруктураПараметровДействия.Свойство("ТолькоРегистрационныеКарты") Тогда

					ЗначениеИсключения = Перечисления.ТипыИнформационныхКарт.Дисконтная;
					ОграничениеПоТипу = Истина;

				КонецЕсли;

			КонецЕсли;

		//	LNK 30.05.2017 14:46:27	- сначала ищем по регистру "активных" карт, потом, если не нашли, в справочнике.
			Для Итерация = 1 По 2 Цикл

				Если Итерация = 1 Тогда

					ТекстЗапроса =
					"ВЫБРАТЬ
					|	ИнформационныеКарты.ИнформационнаяКарта КАК ИнформационнаяКарта,
					|	ИнформационныеКарты.ВладелецКарты КАК ВладелецКарты,
					|	ИнформационныеКарты.ТипКарты КАК ТипКарты,
					|	ИнформационныеКарты.ИнформационнаяКарта.ПометкаУдаления
					|		ИЛИ ИнформационныеКарты.ИнформационнаяКарта.Блокирован КАК ПометкаУдаления
					|ИЗ
					|	РегистрСведений.ИнформационныеКарты КАК ИнформационныеКарты
					|ГДЕ
					|	ИнформационныеКарты.Идентификатор = &МагнитныйКод
					|	//УсловиеОграничения
					|
					|УПОРЯДОЧИТЬ ПО
					|	ПометкаУдаления"
					;
					УсловиеОграничения = "И ИнформационныеКарты.ТипКарты <> &ЗначениеИсключения";

				Иначе

					ТекстЗапроса =
					"ВЫБРАТЬ
					|	ИнформационныеКарты.Ссылка КАК ИнформационнаяКарта,
					|	ИнформационныеКарты.ВладелецКарты КАК ВладелецКарты,
					|	ИнформационныеКарты.ТипКарты КАК ТипКарты,
					|	ИнформационныеКарты.ПометкаУдаления
					|		ИЛИ ИнформационныеКарты.Блокирован КАК ПометкаУдаления
					|ИЗ
					|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
					|ГДЕ
					|	ИнформационныеКарты.КодКарты = &МагнитныйКод
					|	//УсловиеОграничения
					|
					|УПОРЯДОЧИТЬ ПО
					|	ПометкаУдаления"
					;
					УсловиеОграничения = "И ИнформационныеКарты.ТипКарты <> &ЗначениеИсключения";

				КонецЕсли;

				Если ОграничениеПоТипу Тогда

					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//УсловиеОграничения", УсловиеОграничения);
					Запрос.УстановитьПараметр("ЗначениеИсключения", ЗначениеИсключения);

				КонецЕсли;

				Запрос.Текст = ТекстЗапроса;
				
				РезультатЗапроса = Запрос.Выполнить();

				Если НЕ РезультатЗапроса.Пустой() Тогда

					НеизвестныеДанныеПО = Ложь;
					СтруктураПараметров = Новый Структура;
					СтруктураПараметров.Вставить("НеизвестныеДанныеПО", НеизвестныеДанныеПО);
					СтруктураПараметров.Вставить("ЗначенияПоиска", Новый Массив);
					СтруктураПараметров.Вставить("Действие", "ПроверкаКарт");

					Выборка = РезультатЗапроса.Выбрать();

					Пока Выборка.Следующий() Цикл

						СтруктураШтрихкода  = Новый Структура;
						ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, Выборка, СтруктураШтрихкода);
						СтруктураПараметров.ЗначенияПоиска.Добавить(СтруктураШтрихкода);

					КонецЦикла;

					СтруктураПараметровКлиента = Форма.ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента);
				//	Выходим из итерации ...
					Прервать;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;
	
	//Регистрация новой информационной карты
	Если СтруктураДействий.Свойство("ПроверкаКарт", СтруктураПараметровДействия)
		И НЕ СтруктураПараметровКлиента.Свойство("ПрекратитьПоиск") Тогда
		
		Если СтруктураПараметровДействия <> Неопределено
			И СтруктураПараметровДействия.Свойство("РегистрацияНовойКарты") Тогда
			
			Если НЕ СтруктураПараметровДействия.Свойство("Пользователь", Пользователь) Тогда
				Пользователь = Пользователи.ТекущийПользователь();
			КонецЕсли;
			
			Если УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьРегистрациюДисконтнойКартыПриСчитыванииНовогоКода, Ложь, Пользователь) Тогда
				
				МассивШаблонов = Новый Массив;
				Если РегистрыСведений.ШаблоныРегистрацииНовыхКарт.РезультатПроверкиСоответствияШаблонам(МагнитныйКод, Перечисления.ВидыИнформационныхКарт.Магнитная, МассивШаблонов) Тогда
					
					НеизвестныеДанныеПО = Ложь;
					СтруктураПараметров = Новый Структура;
					СтруктураПараметров.Вставить("НеизвестныеДанныеПО", НеизвестныеДанныеПО);
					СтруктураПараметров.Вставить("КодКарты", МагнитныйКод);
					СтруктураПараметров.Вставить("ТипШтрихкода", "");
					СтруктураПараметров.Вставить("ЗначенияПоиска", МассивШаблонов);
					СтруктураПараметров.Вставить("Действие", "РегистрацияНовойКарты");
					СтруктураПараметровКлиента = Форма.ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента);
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НеизвестныеДанныеПО 
		ИЛИ НЕ СтруктураПараметровКлиента.Свойство("ПрекратитьПоиск") Тогда
		СтруктураПараметровКлиента.Вставить("НеизвестныеДанныеПО", Истина);
		СтруктураПараметровКлиента.Вставить("ЭтоМагнитныйКод");
		
	КонецЕсли;	
	
	Возврат СтруктураПараметровКлиента;
	
КонецФункции	

// Функция возвращает список кодов карты, полученный из данных
// карты с применением форматов записи кодов магнитных карт
Функция ПолучитьСписокКодовКарты(ДанныеКарты) Экспорт
	
	ТаблицаКодовКарты = Новый ТаблицаЗначений;
	ТаблицаКодовКарты.Колонки.Добавить("Значение");
	
	Выборка = РегистрыСведений.ФорматыЗаписиКодовМагнитныхКарт.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СписокКодовКартыПоФормату = ПрименитьФорматДляДанныхКарты(ДанныеКарты, Выборка.НомерДорожки, Выборка.Префикс, Выборка.Суффикс, Выборка.КоличествоЗнаков);
		
		Для Каждого ТекСписокКодовКартыПоФормату Из СписокКодовКартыПоФормату Цикл
			НовСтрока          = ТаблицаКодовКарты.Добавить();
			НовСтрока.Значение = ТекСписокКодовКартыПоФормату.Значение;
		КонецЦикла;
		
	КонецЦикла;

	ТаблицаКодовКарты.Свернуть("Значение");
	
	СписокКодовКарты  = Новый СписокЗначений;
	СписокКодовКарты.ЗагрузитьЗначения(ТаблицаКодовКарты.ВыгрузитьКолонку("Значение"));
	
	Возврат СписокКодовКарты;

КонецФункции

// Функция применяет переданные значения формата записи кода магнитных карт
// к данным магнитной карты
Функция ПрименитьФорматДляДанныхКарты(ДанныеКарты, НомерДорожки, ПрефиксКода, СуффиксКода, КоличествоЗнаков)Экспорт

	СписокКодовКарты = Новый СписокЗначений;

	ДанныеРазбитыНаДорожки = (СтрЧислоСтрок(ДанныеКарты) = 3);

	Если Не ДанныеРазбитыНаДорожки И НомерДорожки = 1 Тогда
		СтрокаКода = ДанныеКарты;
	Иначе
		СтрокаКода = СтрПолучитьСтроку(ДанныеКарты, НомерДорожки);
	КонецЕсли;
	
	Префикс       = СокрЛП(ПрефиксКода);
	Суффикс       = СокрЛП(СуффиксКода);
	ДлинаПрефикса = СтрДлина(Префикс);
	ДлинаСуффикса = СтрДлина(Суффикс);

	Отказ = Ложь;
	Пока Не Отказ Цикл
		
		ПозицияНачалаПрефикса = Найти(СтрокаКода, Префикс);
		
		Если ПозицияНачалаПрефикса = 0 Тогда
			// Входит, когда указан префикс, но не найден в строке.
			Отказ = Истина;
			Продолжить;
		Иначе
			// Входит, когда префикс не указан, или указан и найден в строке
			ПозицияНачалаКода = ПозицияНачалаПрефикса + ДлинаПрефикса;
		КонецЕсли;
		
		ПрефиксСодержитСуффикс = ?(Найти(Префикс, Суффикс) = 0, Ложь, Истина);
		
		Если ДлинаСуффикса = 0 Тогда
			
			ПозицияНачалаСуффикса = СтрДлина(СтрокаКода) + 1;
			
		ИначеЕсли ДлинаСуффикса <> 0 И Не ПрефиксСодержитСуффикс Тогда
			
			ПозицияНачалаСуффикса = Найти(СтрокаКода, Суффикс);
			// Если суффикс найден раньше префикса или это на том же месте,
			// то отрезаем строку до префикса и пытаемся найти префикс еще раз
			Если ПозицияНачалаПрефикса > ПозицияНачалаСуффикса И ПозицияНачалаСуффикса <> 0 Тогда
				СтрокаКода = Сред(СтрокаКода, ПозицияНачалаСуффикса + 1);
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ДлинаСуффикса <> 0 И ПрефиксСодержитСуффикс Тогда
			
			СлужебнаяСтрока  = Сред(СтрокаКода, ПозицияНачалаКода);
			СлужебнаяПозиция = Найти(СлужебнаяСтрока, Суффикс);
			Если СлужебнаяПозиция = 0 Тогда
				Отказ = Истина;
				Продолжить
			КонецЕсли;
			ПозицияНачалаСуффикса = ПозицияНачалаКода + СлужебнаяПозиция - 1;
		КонецЕсли;
		
		Если ПозицияНачалаСуффикса <= 1 Тогда
			Отказ = Истина;
			Продолжить
		КонецЕсли;

		Если КоличествоЗнаков = 0 Тогда
			ДлинаКода = ПозицияНачалаСуффикса - ПозицияНачалаКода;
		Иначе
			ДлинаКода = КоличествоЗнаков;
		КонецЕсли;
		
		СтрокаКодаПоСуффиксу = Ложь;
		Если ДлинаПрефикса = 0 И ДлинаСуффикса <> 0 И КоличествоЗнаков <> 0 Тогда
			ПозицияНачалаКода = ПозицияНачалаСуффикса - КоличествоЗнаков;
			СтрокаКодаПоСуффиксу = Истина;
		КонецЕсли;

		КодКарты = Сред(СтрокаКода, ПозицияНачалаКода, ДлинаКода);
		
		Если ДлинаСуффикса <> 0 Тогда
			ПредполагаемыйСуффикс = Сред(СтрокаКода, ПозицияНачалаКода + ДлинаКода, ДлинаСуффикса);
			Если ПредполагаемыйСуффикс <> Суффикс Тогда
				КодКарты = "";
			КонецЕсли;
		КонецЕсли;
		
		Если Не СтрокаКодаПоСуффиксу
		 И (ПозицияНачалаПрефикса > 1
		 Или ((ПозицияНачалаПрефикса = 1) И (ПозицияНачалаКода > 1))) Тогда
			СтрокаКода = Сред(СтрокаКода, ПозицияНачалаПрефикса + 1);
		Иначе
			СтрокаКода = Сред(СтрокаКода, ПозицияНачалаСуффикса + 1);
		КонецЕсли;

		Если КодКарты <> "" Тогда
			СписокКодовКарты.Добавить(КодКарты);
		КонецЕсли;

	КонецЦикла;

	Возврат СписокКодовКарты;

КонецФункции

 /////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ РАБОТЫ С ПОДКЛЮЧАЕМЫМ ОБОРУДОВАНИЕМ

// Получает доступное подключаемое оборудование
//
Процедура ПолучитьДоступноеПодключаемоеОборудование(ИспользоватьПодключаемоеОборудование, ЕстьТСД, ЕстьВесы) Экспорт
	
	ТипыПодключенногоОборудования = МенеджерОборудованияСерверПовтИсп.ТипыПодключенногоОборудования();
	
	ИспользоватьПодключаемоеОборудование = ОбщегоНазначенияРТ.ИспользоватьПодключаемоеОборудование(ТипыПодключенногоОборудования);
	
	ЕстьТСД = ИспользоватьПодключаемоеОборудование 
		И ТипыПодключенногоОборудования <> Неопределено
		И ТипыПодключенногоОборудования.Найти(Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных) <> Неопределено;
		
	ЕстьВесы = ИспользоватьПодключаемоеОборудование 
		И ТипыПодключенногоОборудования <> Неопределено
		И ТипыПодключенногоОборудования.Найти(Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы) <> Неопределено;
	
КонецПроцедуры

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме
Процедура НастроитьПодключаемоеОборудование(Форма) Экспорт
	
	ЕстьТСД = Ложь;
	ЕстьВесы = Ложь;
	
	ПолучитьДоступноеПодключаемоеОборудование(Форма.ИспользоватьПодключаемоеОборудование, ЕстьТСД, ЕстьВесы);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТоварыЗагрузитьДанныеИзТСД",
		"Видимость",
		ЕстьТСД
	);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТоварыВыгрузитьДанныеВТСД",
		"Видимость",
		ЕстьТСД
	);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТоварыПолучитьВес",
		"Видимость",
		ЕстьВесы
	);

КонецПроцедуры

// Сформировать массив товаров по массиву штрихкодов
// 
Функция СформироватьМассивТоваров(ДанныеШтрихкодов, ОбновитьКоличество) Экспорт
	
	ОпознанныеШтрихкоды  = Новый Массив;
	
	НеопознанныеШтрихкоды = Новый Массив;
	
	КС = Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивТипов, , КС);
	
	КЧ_15_3 = Новый КвалификаторыЧисла(15, 3);
	КЧ_10_0 = Новый КвалификаторыЧисла(10, 0);
	КЧ_1_0 = Новый КвалификаторыЧисла(1, 0);
	МассивТипов.Очистить();
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло_15_3 = Новый ОписаниеТипов(МассивТипов, , , КЧ_15_3);
	ОписаниеТиповЧисло_10_0 = Новый ОписаниеТипов(МассивТипов, , , КЧ_10_0);
	ОписаниеТиповЧисло_1_0 = Новый ОписаниеТипов(МассивТипов, , , КЧ_1_0);

 	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("НомерСтроки", ОписаниеТиповЧисло_10_0);
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихКод", ОписаниеТиповСтрока);
	ТаблицаШтрихкодов.Колонки.Добавить("КодСКУ", ОписаниеТиповЧисло_10_0);
	ТаблицаШтрихкодов.Колонки.Добавить("Количество", ОписаниеТиповЧисло_15_3);
	ТаблицаШтрихкодов.Колонки.Добавить("ТипПрефикса", ОписаниеТиповЧисло_1_0);
	
	ПрефиксВнутреннегоШтрихкодаВесовогоТовара            = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ПрефиксВнутреннегоШтрихкодаВесовогоТовара");
	ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара");
	ДлинаКодаВесовогоТовара  = СтрДлина(Формат(ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВерхняяГраницаДиапазонаSKUВесовогоТовара"),"ЧГ=0"));
	Если ДлинаКодаВесовогоТовара < 5 Тогда
		ДлинаКодаВесовогоТовара = 5;
	КонецЕсли;
	
	СчетчикСтрок = 0;
	Для Каждого СтрокаМассива Из ДанныеШтрихкодов Цикл
		
		СчетчикСтрок = СчетчикСтрок + 1;
		
		Если (ПрефиксВнутреннегоШтрихкодаВесовогоТовара > 0) И (ДлинаКодаВесовогоТовара > 0)
			И (Лев(СтрокаМассива.ШтрихКод, 2) = ("2" + ПрефиксВнутреннегоШтрихкодаВесовогоТовара) 
			ИЛИ Лев(СтрокаМассива.ШтрихКод, 2) = ("2" + ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара)) Тогда
			
			КодТовара        = Сред(СтрокаМассива.ШтрихКод, 3,  ДлинаКодаВесовогоТовара);
			КоличествоТовара = Сред(СтрокаМассива.ШтрихКод, 3 + ДлинаКодаВесовогоТовара, 10 - ДлинаКодаВесовогоТовара);
			 
			Если Лев(СтрокаМассива.ШтрихКод, 2) = ("2" + ПрефиксВнутреннегоШтрихкодаВесовогоТовара) Тогда  
				// Весовой товар, расфасованный на весах
				НоваяСтрока = ТаблицаШтрихкодов.Добавить();
				НоваяСтрока.НомерСтроки = СчетчикСтрок;
				НоваяСтрока.ШтрихКод = СтрокаМассива.ШтрихКод;
				НоваяСтрока.КодСКУ = Число(КодТовара);
				НоваяСтрока.Количество = КоличествоТовара / 1000;
				НоваяСтрока.ТипПрефикса = 1;
			Иначе
				// Штучный товар, расфасованный на весах
				НоваяСтрока = ТаблицаШтрихкодов.Добавить();
				НоваяСтрока.НомерСтроки = СчетчикСтрок;
				НоваяСтрока.ШтрихКод = СтрокаМассива.ШтрихКод;
				НоваяСтрока.КодСКУ = Число(КодТовара);
				НоваяСтрока.Количество = КоличествоТовара;
				НоваяСтрока.ТипПрефикса = 2;
			КонецЕсли;
		Иначе
			НоваяСтрока = ТаблицаШтрихкодов.Добавить();
			НоваяСтрока.НомерСтроки = СчетчикСтрок;
			НоваяСтрока.ШтрихКод = СтрокаМассива.ШтрихКод;
			НоваяСтрока.КодСКУ = 0;
			НоваяСтрока.Количество = СтрокаМассива.Количество;
			НоваяСтрока.ТипПрефикса = 0;
		КонецЕсли;
				
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеШтрихкодов.НомерСтроки КАК НомерСтроки,
	               |	ДанныеШтрихкодов.Штрихкод КАК Штрихкод,
	               |	ДанныеШтрихкодов.КодСКУ КАК КодСКУ,
	               |	ДанныеШтрихкодов.ТипПрефикса КАК ТипПрефикса,
	               |	ДанныеШтрихкодов.Количество КАК Количество
	               |ПОМЕСТИТЬ ДанныеШтрихкодов
	               |ИЗ
	               |	&ТаблицаШтрихкодов КАК ДанныеШтрихкодов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеШтрихкодов.Штрихкод КАК Штрихкод,
	               |	ДанныеШтрихкодов.Количество КАК Количество,
	               |	ВЫБОР
	               |		КОГДА Штрихкоды.Владелец ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ШтрихКодНайден,
	               |	Штрихкоды.Владелец КАК Номенклатура,
	               |	Штрихкоды.Характеристика КАК Характеристика,
	               |	Штрихкоды.Упаковка КАК Упаковка,
	               |	МИНИМУМ(ДанныеШтрихкодов.НомерСтроки) КАК НомерСтроки
	               |ИЗ
	               |	ДанныеШтрихкодов КАК ДанныеШтрихкодов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	               |		ПО ДанныеШтрихкодов.Штрихкод = Штрихкоды.Штрихкод
	               |			И (Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура)
	               |			И (ДанныеШтрихкодов.ТипПрефикса = 0)
	               |ГДЕ
	               |	ДанныеШтрихкодов.ТипПрефикса = 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеШтрихкодов.Штрихкод,
	               |	ДанныеШтрихкодов.Количество,
	               |	ВЫБОР
	               |		КОГДА Штрихкоды.Владелец ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ,
	               |	Штрихкоды.Владелец,
	               |	Штрихкоды.Характеристика,
	               |	Штрихкоды.Упаковка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ДанныеШтрихкодов.Штрихкод,
	               |	ДанныеШтрихкодов.Количество,
	               |	ВЫБОР
	               |		КОГДА КодыТоваровSKU.Номенклатура ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ,
	               |	КодыТоваровSKU.Номенклатура,
	               |	КодыТоваровSKU.Характеристика,
	               |	КодыТоваровSKU.Упаковка,
	               |	МИНИМУМ(ДанныеШтрихкодов.НомерСтроки)
	               |ИЗ
	               |	ДанныеШтрихкодов КАК ДанныеШтрихкодов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	               |		ПО ДанныеШтрихкодов.КодСКУ = КодыТоваровSKU.SKU
	               |			И (ДанныеШтрихкодов.ТипПрефикса <> 0)
	               |
	               |ГДЕ
	               |	ДанныеШтрихкодов.ТипПрефикса <> 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеШтрихкодов.Штрихкод,
	               |	ДанныеШтрихкодов.Количество,
	               |	ВЫБОР
	               |		КОГДА КодыТоваровSKU.Номенклатура ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ,
	               |	КодыТоваровSKU.Номенклатура,
	               |	КодыТоваровSKU.Характеристика,
	               |	КодыТоваровSKU.Упаковка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
	Запрос.УстановитьПараметр("ТаблицаШтрихкодов", ТаблицаШтрихкодов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ШтрихКодНайден Тогда
			СтруктураТовара = Новый Структура;
			СтруктураТовара.Вставить("Количество", Выборка.Количество);
			СтруктураТовара.Вставить("Номенклатура", Выборка.Номенклатура);
			СтруктураТовара.Вставить("Характеристика", Выборка.Характеристика);
			СтруктураТовара.Вставить("Упаковка", Выборка.Упаковка);
			ОпознанныеШтрихкоды.Добавить(СтруктураТовара);
		Иначе
			СтруктураНеТовара = Новый Структура;
			СтруктураНеТовара.Вставить("Штрихкод", Выборка.Штрихкод);
			СтруктураНеТовара.Вставить("Количество", Выборка.Количество);
			НеопознанныеШтрихкоды.Добавить(СтруктураНеТовара);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураМассивов = Новый Структура;
	СтруктураМассивов.Вставить("ОпознанныеШтрихкоды", ОпознанныеШтрихкоды);
	СтруктураМассивов.Вставить("НеопознанныеШтрихкоды", НеопознанныеШтрихкоды);
	Возврат СтруктураМассивов;
	
КонецФункции
