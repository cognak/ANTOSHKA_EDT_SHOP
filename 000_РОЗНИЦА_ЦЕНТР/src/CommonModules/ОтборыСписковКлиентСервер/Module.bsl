Функция НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ЭлементОтбора.Представление = Представление Тогда
			ВозвращаемоеЗначение = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции // НайтиЭлементОтбораПоПредставлению()

Функция СоздатьГруппуЭлементовОтбора(КоллекцияЭлементов, Представление, ТипГруппы) Экспорт
	
	ГруппаЭлементовОтбора = НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление);
	Если ГруппаЭлементовОтбора = Неопределено Тогда
		ГруппаЭлементовОтбора = КоллекцияЭлементов.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Иначе
		ГруппаЭлементовОтбора.Элементы.Очистить();
	КонецЕсли;
	
	ГруппаЭлементовОтбора.Представление    = Представление;
	ГруппаЭлементовОтбора.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаЭлементовОтбора.ТипГруппы        = ТипГруппы;
	ГруппаЭлементовОтбора.Использование    = Истина;
	
	Возврат ГруппаЭлементовОтбора;
	
КонецФункции

Процедура ИзменитьЭлементОтбораГруппыСписка(Группа, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	УдалитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля);
	
	Если Установить Тогда
		УстановитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля, ПравоеЗначение, ВидСравнения);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

Процедура УстановитьЭлементОтбораГруппыСписка(Группа, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	Если Установить Тогда
		УстановитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля, ПравоеЗначение, ВидСравнения);
	Иначе
		УдалитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

Процедура СкопироватьЭлементыОтбораВГруппуСписка(ГруппаЭлементов, КоллекцияЭлементовИсточник, ПроверятьДоступность = Ложь, ОчищатьПриемник = Истина) Экспорт
	
	ГруппаЭлементов.Элементы.Очистить();
	
	Для каждого ЭлементКоллекции Из КоллекцияЭлементовИсточник Цикл
		ЗаполнитьЗначенияСвойств(ГруппаЭлементов.Элементы.Добавить(ТипЗнч(ЭлементКоллекции)), ЭлементКоллекции);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля)
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			КоллекцияЭлементов.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

// Удаляет элемент отбора динамического списка
//
//Параметры:
//Список  - обрабатываемый динамический список,
//ИмяПоля - имя поля компоновки, отбор по которому нужно удалить
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля) Экспорт
	
	УдалитьЭлементОтбораКоллекции(Список.Отбор.Элементы, ИмяПоля);
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

Процедура УстановитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено)
	
	ЭлементОтбора = КоллекцияЭлементов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

// Устанавливает элемент отбор динамического списка
//
//Параметры:
//Список			- обрабатываемый динамический список,
//ИмяПоля			- имя поля компоновки, отбор по которому нужно установить,
//ВидСравнения		- вид сравнения отбора, по умолчанию - Равно,
//ПравоеЗначение 	- значение отбора
//
Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено) Экспорт
	
	УстановитьЭлементОтбораКоллекции(Список.Отбор.Элементы, ИмяПоля, ПравоеЗначение, ВидСравнения);
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()


// Изменяет элемент отбора динамического списка
//
//Параметры:
//Список         - обрабатываемый динамический список,
//ИмяПоля        - имя поля компоновки, отбор по которому нужно установить,
//ВидСравнения   - вид сравнения отбора, по умолчанию - Равно,
//ПравоеЗначение - значение отбора,
//Установить     - признак необходимости установить отбор
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено, ПравоеЗначениеСохранить = Ложь) Экспорт
	
	Если ПравоеЗначениеСохранить = Истина Тогда

		ПравоеЗначение = ПолучитьПравоеЗначение(Список.Отбор.Элементы, ИмяПоля, ВидСравнения, ПравоеЗначение);

	КонецЕсли;

	УдалитьЭлементОтбораСписка(Список, ИмяПоля);
	
	Если Установить Тогда

		УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения);

	КонецЕсли;
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

Процедура УстановитьПараметрДинамическогоСписка(Список, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	Если Использование Тогда
		ЗначениеПараметра = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
		Если ЗначениеПараметра <> Неопределено Тогда
			Список.Параметры.УстановитьЗначениеПараметра(ИмяПараметра, Значение);
		КонецЕсли;
	Иначе
		
		ЗначениеПараметра = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
		Если ЗначениеПараметра <> Неопределено Тогда
			Если ЗначениеПараметра.Значение <> Значение Тогда
				ЗначениеПараметра.Значение = Значение;
			КонецЕсли;
			Если ЗначениеПараметра.Использование <> Использование Тогда
				ЗначениеПараметра.Использование = Использование;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрДинамическогоСписка()

// Поиск элементов и групп отбора динамического списка
// Параметры:
// ОбластьПоиска - контейнер с элементами и группами отбора, например
//					Список.Отбор
//					или группа в отборе
// ИмяПоля - имя поля копмпоновки (не используется для групп)
// Представление - представление поля компоновки
// Примечание: поиск может осуществляться или по ЛевомуЗначению, или по Представлению
//
Функция НайтиЭлементыИГруппыОтбора(знач ОбластьПоиска,
									знач ИмяПоля = Неопределено,
									знач Представление = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Возврат МассивЭлементов;
	
КонецФункции

//	LNK 13.02.2020 10:51:51
Функция НайтиЭлементОтбора(КоллекцияЭлементов, ИмяПоля)	Экспорт

	Перем ЭлементОтбораРезультат;

	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);

	Для Каждого ЭлементОтбора Из КоллекцияЭлементов Цикл

		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда

			ЭлементОтбораРезультат = ЭлементОтбора;

		КонецЕсли;

	КонецЦикла;

	Возврат ЭлементОтбораРезультат;

КонецФункции

// Служебные функции

Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
			
			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//	LNK 13.02.2020 10:49:43
Функция ПолучитьПравоеЗначение(КоллекцияЭлементов, ИмяПоля, ВидСравнения, Знач ПравоеЗначение = Неопределено)

	ЭлементОтбора = НайтиЭлементОтбора(КоллекцияЭлементов, ИмяПоля);

	Если НЕ ЭлементОтбора = Неопределено Тогда

		НуженСписок = ВидыСравненияСписок().Получить(ВидСравнения) = Истина;
		ИмеемСписок = ВидыСравненияСписок().Получить(ЭлементОтбора.ВидСравнения) = Истина;

		Если НуженСписок И НЕ ИмеемСписок Тогда

			ПравоеЗначение = Новый СписокЗначений;
			ПравоеЗначение.Добавить(ЭлементОтбора.ПравоеЗначение);

		ИначеЕсли НЕ НуженСписок И ИмеемСписок Тогда

			Если НЕ ЭлементОтбора.ПравоеЗначение.Количество() = 0 Тогда

				ПравоеЗначение = ЭлементОтбора.ПравоеЗначение[0];

			Иначе	//	остается значение переданного параметра

			КонецЕсли;

		Иначе

			ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;

		КонецЕсли;

	КонецЕсли;

	Возврат ПравоеЗначение;

КонецФункции

// Процедура предназначена для открытия формы выбора справочника ВидыОплатЧекаККМ с установленным отбором на список выбора
//
#Если ТонкийКлиент ИЛИ ВебКлиент ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
Процедура НачалоВыбораВидаОплатыЧекаККМ(СтруктураПараметров, СтандартнаяОбработка) Экспорт
	Перем	ПараметрДоговорЭквайринга,
			ПараметрПравоеЗначение,
			ПараметрВладелец,
			ИмяПоляОтбораЛевоеЗначение;
	
	ПараметрПравоеЗначение = СтруктураПараметров.ПравоеЗначение;
	
	Если ТипЗнч(ПараметрПравоеЗначение) = Тип("СписокЗначений") Тогда
		Если ПараметрПравоеЗначение.Количество() >= 1 Тогда
			СтандартнаяОбработка = Ложь;
		Иначе
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПараметрПравоеЗначение) = Тип("ПеречислениеСсылка.ТипыОплатЧекаККМ") Тогда
		СтандартнаяОбработка = Ложь;
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		возврат;
	Иначе
		ПараметрВладелец  = СтруктураПараметров.Владелец;
		ИмяПоляОтбораЛевоеЗначение = СтруктураПараметров.ИмяПоляОтбораЛевоеЗначение;
		СтруктураПараметров.Свойство("ДоговорЭквайринга", ПараметрДоговорЭквайринга);
		
		СтруктураПараметров = Новый Структура();
		
		СтруктураПараметров.Вставить("СтруктураПараметрыОтбора", Новый Структура("ИмяПоляОтбораЛевоеЗначение, ПравоеЗначение, ДоговорЭквайринга", ИмяПоляОтбораЛевоеЗначение, ПараметрПравоеЗначение, ПараметрДоговорЭквайринга));
		ФормаВыбораСправочника = ПолучитьФорму("Справочник.ВидыОплатЧекаККМ.Форма.ФормаВыбора", СтруктураПараметров, ПараметрВладелец);
		ФормаВыбораСправочника.Открыть();
	КонецЕсли;
	
КонецПроцедуры // НачалоВыбораВидаОплатыЧекаККМ()
#КонецЕсли

Функция ВидыСравненияСписок()	//	LNK 13.02.2020 11:03:20

	ВидыСравнения = Новый Соответствие;

	ВидыСравнения.Вставить(ВидСравненияКомпоновкиДанных.ВСписке, Истина);
	ВидыСравнения.Вставить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, Истина);
	ВидыСравнения.Вставить(ВидСравненияКомпоновкиДанных.НеВСписке, Истина);
	ВидыСравнения.Вставить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии, Истина);

	Возврат ВидыСравнения;

КонецФункции




