////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции для работы с данными в базе

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка    - Ссылка на объект - элемент справочника, документ, ...
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
// 
Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции 

// Возвращает структуру, содержащую значения реквизитов, прочитанные из информационной базы
// для нескольких объектов.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  МассивСсылок - массив ссылок на объекты одного типа
//				ВАЖНО! значения массива должны быть ссылками на 
//				объекты одного типа!
//  ИменаРеквизитов - Строка, имена реквизитов перечисленные через запятую,
//				в формате требований к свойствам структуры.
//				Например, "Код, Наименование, Родитель".
// 
// Возвращаемое значение:
//  Соответствие, где ключ - ссылка на объект, а Значение - структура, которая 
//				содержит список свойств, как список имен в строке
//				ИменаРеквизитов, со значениям реквизитов, прочитанными
//				из информационной базы.
// 
Функция ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов);
	
КонецФункции

// Возвращает значения реквизита, прочитанного из информационной базы для нескольких объектов.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  МассивСсылок - массив ссылок на объекты одного типа
//				ВАЖНО! значения массива должны быть ссылками на 
//				объекты одного типа!
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Соответствие, где ключ - ссылка на объект, Значение - значение прочитанного реквизита
// 
Функция ЗначениеРеквизитаОбъектов(МассивСсылок, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСсылок, ИмяРеквизита);
	
КонецФункции


Процедура ЗаполнитьТабличнуюЧастьДокументаИзТаблицыЗначений(ДокументОбъект, ТаблицаИсточник, ИмяТабличнойЧасти)
	
	ДокументОбъект[ИмяТабличнойЧасти].Очистить();
	
	Для каждого СтрокаТаблицыЗначений Из ТаблицаИсточник Цикл
	
		СтрокаТабличнойЧастиДокумента = ДокументОбъект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиДокумента, СтрокаТаблицыЗначений);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьДокументИзСтруктурыНаСервере(СтруктураДокумента, РежимЗаписиОбъекта = Неопределено, РежимПроведенияОбъекта = Неопределено) Экспорт

	Перем ТаблицаИсточник;
	
	ДокументСсылка = СтруктураДокумента.Ссылка;

	Если ЗначениеЗаполнено(ДокументСсылка) Тогда

			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();

	Иначе	ДокументОбъект = Документы[СтруктураДокумента.ИмяДокумента].СоздатьДокумент();

	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктураДокумента,, "Ссылка, Номер");

	Для каждого ИмяТабличнойЧасти Из СтруктураДокумента.ИменаТабличныхЧастей Цикл

		Если СтруктураДокумента.ТабличныеЧасти.Свойство(ИмяТабличнойЧасти, ТаблицаИсточник) Тогда

			ЗаполнитьТабличнуюЧастьДокументаИзТаблицыЗначений(ДокументОбъект, ТаблицаИсточник, ИмяТабличнойЧасти);

		КонецЕсли;

	КонецЦикла;

	Если РежимЗаписиОбъекта = Неопределено Тогда

		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);

	ИначеЕсли РежимПроведенияОбъекта = Неопределено Тогда

		ДокументОбъект.Записать(РежимЗаписиОбъекта);

	Иначе

		ДокументОбъект.Записать(РежимЗаписиОбъекта, РежимПроведенияОбъекта);

	КонецЕсли;
	
	СтруктураДокумента.Ссылка = ДокументОбъект.Ссылка;

КонецПроцедуры

//	LNK 26.10.2016 13:00:07
Функция ОпределитьТекущийМагазин(УстановкаПараметраСеанса = Ложь)	Экспорт

	Если УстановкаПараметраСеанса = Ложь Тогда

		ТекущийМагазин = ПараметрыСеанса.ТекущийМагазин;

	Иначе

		ТекущийМагазин = Справочники.Магазины.ПустаяСсылка();

	//	... получаем список доступных магазинов
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Магазины.Ссылка КАК Магазин
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|ГДЕ
		|	НЕ Магазины.СкладУправляющейСистемы
		|	И Магазины.ВведенВЭксплуатацию
		|	И НЕ(Магазины.Блокирован
		|				ИЛИ Магазины.ПометкаУдаления)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	УчетнаяПолитика.ИнтернетМагазин
		|ИЗ
		|	РегистрСведений.УчетнаяПолитика.СрезПоследних КАК УчетнаяПолитика
		|ГДЕ
		|	УчетнаяПолитика.ИнтернетМагазин = &МагазинУзла
		|	И НЕ УчетнаяПолитика.ИнтернетМагазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)"
		);
		Запрос.УстановитьПараметр("МагазинУзла", ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);

		ДоступныеМагазины = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Магазин");

	//	... дальше работаем в привилегированном режиме.
		УстановитьПривилегированныйРежим(Истина);

		РабочееМесто = МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента();

		Если ЗначениеЗаполнено(РабочееМесто) Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КассыККМ.Магазин,
			|	1 КАК КлючПорядка
			|ИЗ
			|	Справочник.КассыККМ КАК КассыККМ
			|ГДЕ
			|	КассыККМ.РабочееМесто = &РабочееМесто
			|	И КассыККМ.Магазин В(&ДоступныеМагазины)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	РабочиеМеста.Магазин,
			|	2
			|ИЗ
			|	Справочник.РабочиеМеста КАК РабочиеМеста
			|ГДЕ
			|	РабочиеМеста.Ссылка = &РабочееМесто
			|	И РабочиеМеста.Магазин В(&ДоступныеМагазины)
			|
			|УПОРЯДОЧИТЬ ПО
			|	КлючПорядка"
			);
			Запрос.УстановитьПараметр("РабочееМесто"     , РабочееМесто);
			Запрос.УстановитьПараметр("ДоступныеМагазины", ДоступныеМагазины);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда

				ТекущийМагазин = Выборка.Магазин;

			КонецЕсли;

		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ТекущийМагазин) Тогда

			Если ПользователиСлужебный.ПользовательНеТребуетАвторизации() Тогда

				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ТаблицаУзлы.Магазин КАК Магазин
				|ИЗ
				|	ПланОбмена.ПоМагазину КАК ТаблицаУзлы
				|ГДЕ
				|	ТаблицаУзлы.ЭтотУзел
				|	И НЕ ТаблицаУзлы.ПометкаУдаления
				|	И НЕ ТаблицаУзлы.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ
				|	ТаблицаУзлы.Магазин
				|ИЗ
				|	ПланОбмена.ПоМагазинуКонвертация КАК ТаблицаУзлы
				|ГДЕ
				|	ТаблицаУзлы.ЭтотУзел
				|	И НЕ ТаблицаУзлы.ПометкаУдаления
				|	И НЕ ТаблицаУзлы.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ
				|	ТаблицаУзлы.Магазин
				|ИЗ
				|	ПланОбмена.ПоРабочемуМесту КАК ТаблицаУзлы
				|ГДЕ
				|	ТаблицаУзлы.ЭтотУзел
				|	И НЕ ТаблицаУзлы.ПометкаУдаления
				|	И НЕ ТаблицаУзлы.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)"
				);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда

					ТекущийМагазин = Выборка.Магазин;

				КонецЕсли;

			ИначеЕсли ЗначениеЗаполнено(Пользователи.ТекущийПользователь()) Тогда
				
				Если ПланыОбмена.ПоРабочемуМесту.ЭтоРабочееМесто() Тогда

					ТекущийМагазин = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла(ПланыОбмена.ПоРабочемуМесту.ЭтотУзел()).Магазин;

				Иначе
					
				//	Пользователю должен быть назначен магазин... но, в каком-то случае, этот магазин ему
				//	может быть не назначен. Кроме того, на периферии должен быть актуален только магазин,
				//	указанный для ПоМагазинам.ЭтотУзел(). В общем, исходим из перечня доступных
				//	пользователю магазинов.

					Запрос = Новый Запрос(
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	Данные.Магазин КАК Магазин,
					|	Данные.Приоритет КАК Приоритет
					|ИЗ
					|	(ВЫБРАТЬ
					|		Пользователи.Магазин КАК Магазин,
					|		1 КАК Приоритет
					|	ИЗ
					|		Справочник.Пользователи КАК Пользователи
					|	ГДЕ
					|		Пользователи.Ссылка = &ТекущийПользователь
					|		И Пользователи.Магазин В(&ДоступныеМагазины)
					|	
					|	ОБЪЕДИНИТЬ
					|	
					|	ВЫБРАТЬ
					|		ТаблицаУзлы.Магазин,
					|		2
					|	ИЗ
					|		ПланОбмена.ПоМагазину КАК ТаблицаУзлы
					|	ГДЕ
					|		НЕ &ГлавныйУзел = ИСТИНА
					|		И ТаблицаУзлы.ЭтотУзел
					|		И ТаблицаУзлы.Магазин В(&ДоступныеМагазины)) КАК Данные
					|
					|УПОРЯДОЧИТЬ ПО
					|	Данные.Приоритет УБЫВ"
					);
					Запрос.УстановитьПараметр("ДоступныеМагазины"  , ДоступныеМагазины);
					Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
					Запрос.УстановитьПараметр("ГлавныйУзел"        , ОбменДаннымиПовтИсп.ЭтоГлавныйУзел());

					Выборка = Запрос.Выполнить().Выбрать();

					Если Выборка.Следующий() Тогда

						ТекущийМагазин = Выборка.Магазин;

					КонецЕсли;

				КонецЕсли;

			Иначе

				ТекущийМагазин = Справочники.Магазины.ПолучитьМагазинПоУмолчанию();

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат ТекущийМагазин;

КонецФункции // ОпределитьТекущийМагазин()

// Выполняет установку параметров сеанса. Вызывается из модуля сеанса
//
//
// Параметры:
// ИмяПараметра				- строка с именем параметра сеанса
// УстановленныеПараметры	- массив всех установленных параметров сеанса
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	ПараметрыСеанса.ОткрытРежимМенеджераИзРМК = Ложь;
	УстановленныеПараметры.Добавить("ОткрытРежимМенеджераИзРМК");
	
	ПараметрыСеанса.РежимРегистрацииПродаж = Ложь;
	УстановленныеПараметры.Добавить("РежимРегистрацииПродаж");
	
	ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Новый Структура);
	УстановленныеПараметры.Добавить("ОбщиеЗначения");
	
	ПараметрыСеанса.ТекущийМагазин = ОпределитьТекущийМагазин(Истина);
	УстановленныеПараметры.Добавить("ТекущийМагазин");

//	LNK 21.04.2017 12:26:53
	ПараметрыСеанса.ТекущаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСеанса.ТекущийМагазин, "Организация", Справочники.Организации.ПустаяСсылка(), Ложь);
	УстановленныеПараметры.Добавить("ТекущаяОрганизация");
	
//	LNK 25.09.2017 10:55:34
	ПараметрыСеанса.ФормаРабочегоМестаКассира = "";
	УстановленныеПараметры.Добавить("ФормаРабочегоМестаКассира");
	
КонецПроцедуры

Функция ОткрыватьРМКПриЗапускеПрограммы() Экспорт

	Если ПравоДоступа("Использование", Метаданные.Обработки.РМК) Тогда

		Возврат УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя("ОткрыватьРМКПриЗапускеПрограммы", Ложь);

	Иначе

		Возврат Ложь;

	КонецЕсли;
	
КонецФункции

//	LNK 24.11.2017 15:11:34
Функция РазрешитьРаботуРМКВТекущемУзле(СообщатьОбОтказе = Ложь)	Экспорт

	РазрешитьРаботу = ПравоДоступа("Использование", Метаданные.Обработки.РМК);

	Если РазрешитьРаботу И ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		РазрешитьРаботу = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя("РазрешитьРаботуРМКВЦентральномУзле", Ложь);

		Если НЕ РазрешитьРаботу И СообщатьОбОтказе = Истина Тогда

			Сообщить("Отказано. Работа с РМК в главном узле Вам не разрешена.");

		КонецЕсли;

	КонецЕсли;

	Возврат РазрешитьРаботу;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПОГОТОВКА К ПЕРЕДАЧИ НА СЕРВЕР

Функция ПолучитьСтруктуруПоДокументу(ИмяДокумента, ТаблицыОтдельныйЭлемент = Истина) Экспорт
	
	СтруктураДокумента = Новый Структура(
		"Ссылка, Дата, Номер, Проведен, ПометкаУдаления"
			, Документы[ИмяДокумента].ПустаяСсылка()
			, '00010101'
			, ""
			, Ложь
			, Ложь
	);
	
	СтруктураДокумента.Вставить("ИмяДокумента", ИмяДокумента);
	
	Для каждого Реквизит Из Метаданные.Документы[ИмяДокумента].Реквизиты Цикл

		СтруктураДокумента.Вставить(Реквизит.Имя, Реквизит.Тип.ПривестиЗначение());

	КонецЦикла; 
	
	СтруктураТабличныхЧастей = Новый Структура;
	ИменаТабличныхЧастей	 = Новый Массив;
	
	Для каждого ТабличнаяЧасть Из Метаданные.Документы[ИмяДокумента].ТабличныеЧасти Цикл

		Таблица = Новый ТаблицаЗначений;

		Таблица.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));

		Для каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл

			Таблица.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);

		КонецЦикла;

		Если ТаблицыОтдельныйЭлемент = Истина Тогда

			СтруктураТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, Таблица);
			ИменаТабличныхЧастей.Добавить(ТабличнаяЧасть.Имя);

		Иначе

			СтруктураДокумента.Вставить(ТабличнаяЧасть.Имя, Таблица);

		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицыОтдельныйЭлемент = Истина Тогда

		СтруктураДокумента.Вставить("ТабличныеЧасти", СтруктураТабличныхЧастей);
		СтруктураДокумента.Вставить("ИменаТабличныхЧастей", ИменаТабличныхЧастей);

	КонецЕсли;

	СтруктураДокумента.Вставить(
		"ДополнительныеСвойства"
		, Новый Структура(
			"ИнтернетМагазин"
			, ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику().ИнтернетМагазин
		)
	);
	
	Возврат СтруктураДокумента;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ДОСТУП К ОБЪЕКТАМ

Функция ПроверитьДоступКРеквизиту(Объект, ИмяРеквизита, ИмяТаблицыЗначений) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоступныеЗначенияРеквизита.Ссылка
	|ИЗ
	|	" + ИмяТаблицыЗначений + " КАК ДоступныеЗначенияРеквизита";
	
	Результат = Запрос.Выполнить();
	МассивРазрешенныхЗначенийРеквизита = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	УстановитьПривилегированныйРежим(Истина);
	ЗначениеРеквизита = Объект[ИмяРеквизита];
	
	Возврат МассивРазрешенныхЗначенийРеквизита.Найти(ЗначениеРеквизита) <> Неопределено
	
КонецФункции // ПроверитьДоступКРеквизиту()


Функция ПолучитьЗначениеРеквизитаВПривилегированномРежиме(Объект, ИмяРеквизита) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Неопределено;
	Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, ИмяРеквизита);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции // ПолучитьЗначениеРеквизитаВПривилегированномРежиме()

//	LNK 27.09.2017 15:23:43
Функция РазрешеноИзменениеВУзле(Объект, Отказ, ВызыватьИсключение = Ложь)	Экспорт

	Если НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() = Истина Тогда

		Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() И НЕ ОбменДаннымиПовтИсп.ЭтоТестовыйУзел() Тогда

			ТекстСообщения = "Отказано! Изменение объекта «" + Объект + "» разрешено только в главном узле.";

			Если ВызыватьИсключение Тогда
				
				ВызватьИсключение ТекстСообщения;

			Иначе

				Отказ = Истина;
				Сообщить(ТекстСообщения);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции // РазрешеноИзменениеВУзле()

///////////////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ РАБОТЫ С ОТЧЕТАМИ

// Процедура выводит в верхнем колонтитуле табличного документа текущую дату сеанса
// Параметры
//  <ДокументРезультат>  - <ТабличныйДокумент> - документ, в который добавляется колонтитул
//
Процедура ВывестиДатуФормированияОтчета(ДокументРезультат) Экспорт
	
	ТекстКолонтитула = "Дата формирования отчета: %ДатаФормирования%";
	ТекстКолонтитула = СтрЗаменить(ТекстКолонтитула, "%ДатаФормирования%", ТекущаяДатаСеанса());
	
	ДокументРезультат.ВерхнийКолонтитул.Выводить = Истина;
	ДокументРезультат.ВерхнийКолонтитул.ТекстВЦентре = ТекстКолонтитула;
	
КонецПроцедуры

// Процедура выводит в верхнем колонтитуле табличного документа представление параметра "Основание"
// Параметры
//  <ДокументРезультат>  - <ТабличныйДокумент> - документ, в который добавляется колонтитул
//
//  <Основание> - <Произвольный> - Выводимое значение
//
Процедура ВывестиОснованиеОтчета(ДокументРезультат, Основание) Экспорт
	
	ТекстКолонтитула = "Основание: %Основание%";
	ТекстКолонтитула = СтрЗаменить(ТекстКолонтитула, "%Основание%", Основание);
	
	ДокументРезультат.ВерхнийКолонтитул.Выводить = Истина;
	ДокументРезультат.ВерхнийКолонтитул.ТекстВЦентре = ТекстКолонтитула;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ

// Процедура проверяет дубли строк в табличной части
// Параметры:
//	Объект - проверяемый ДокументОбъект
//	ИмяТЧ - имя проверяемой табличной части
//	КлючевыеРеквизиты - массив имен реквизитов, по которым определяется уникальность строки
//	Отказ - отказ продолжения операции
Процедура ПроверитьНаличиеДублейСтрокТЧ(Объект,ИмяТЧ,КлючевыеРеквизиты,Отказ, ПредставлениеТЧ = "") Экспорт
	
	МетаданныеОбъекта = Объект.Метаданные();
	Если ПустаяСтрока(ПредставлениеТЧ) Тогда
		ПредставлениеТЧ   = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	КонецЕсли;
	
	ТекстПоляВыборки         = "";
	ТекстПоляСоединения      = "";
	ТекстПоляВыгрузки        = "";
	ТекстДляСообщенияОДублях = "";
	ТекстПоляОшибки          = "";
	Для Каждого СтрМас из КлючевыеРеквизиты Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекстПоляОшибки) Тогда
			ТекстПоляОшибки = СтрМас;
		КонецЕсли;
		
		ТекстПоляВыборки = ТекстПоляВыборки + "
	|	ТаблицаПроверки." + СтрМас + ",";
		ТекстПоляСоединения = ТекстПоляСоединения + "
	|	И ТаблицаПроверки." + СтрМас + " = ДублирующиесяСтроки."+ СтрМас;
		ТекстПоляВыгрузки = ТекстПоляВыгрузки + СтрМас + ",";
		
		ПредставлениеРеквизита = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты[СтрМас].Синоним;
		
		ТекстДляСообщенияОДублях = ТекстДляСообщенияОДублях + """"  + ПредставлениеРеквизита  + """, "
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ТекстПоляОшибки) Тогда
		ТекстПоляОшибки = "НомерСтроки";
	КонецЕсли;
	
	ТекстДляСообщенияОДублях = Лев(ТекстДляСообщенияОДублях, СтрДлина(ТекстДляСообщенияОДублях) - 2);
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстПоляВыборки,1);
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстПоляВыгрузки,1);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ТаблицаПроверки.НомерСтроки, " +
		ТекстПоляВыборки + "
	|ПОМЕСТИТЬ ТаблицаПроверки
	|ИЗ
	|	&ТаблицаПроверки КАК ТаблицаПроверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаПроверки.НомерСтроки) КАК НомерСтроки,
	|	СУММА(1) КАК КоличествоДублей,"+
		ТекстПоляВыборки + "
	|ПОМЕСТИТЬ ДублирующиесяСтроки
	|ИЗ
	|	ТаблицаПроверки КАК ТаблицаПроверки
	|
	|СГРУППИРОВАТЬ ПО " +
		ТекстПоляВыборки + "
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПроверки.НомерСтроки,
	|	ДублирующиесяСтроки.НомерСтроки КАК ПерваяСтрока
	|ИЗ
	|	ТаблицаПроверки КАК ТаблицаПроверки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДублирующиесяСтроки КАК ДублирующиесяСтроки
	|		ПО ТаблицаПроверки.НомерСтроки <> ДублирующиесяСтроки.НомерСтроки " +
	     		ТекстПоляСоединения;
	Запрос.УстановитьПараметр("ТаблицаПроверки",Объект[ИмяТЧ].Выгрузить(,"НомерСтроки," + ТекстПоляВыгрузки));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если КлючевыеРеквизиты.Количество() = 1 Тогда
		ШаблонСообщения = НСтр("ru = 'Данные в строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" совпадают с данными в строке %ПерваяСтрока% по значению поля %НазванияПолей%.'");
	Иначе
		ШаблонСообщения = НСтр("ru = 'Данные в строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" совпадают с данными в строке %ПерваяСтрока% по сочетанию значений полей %НазванияПолей%.'");
	КонецЕсли;	
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения =  СтрЗаменить(ШаблонСообщения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%ПерваяСтрока%", Выборка.ПерваяСтрока);
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%НазванияПолей%", ТекстДляСообщенияОДублях);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, ТекстПоляОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
		
	КонецЦикла;
КонецПроцедуры

//Процедура удаляет строки ТЧ "Серии", которым по полям связи нет соотвествующих строк в ТЧ "Товары"
//или в этих строках статус указания серий равен 0 (не указывать)
//Параметры
//		ДокументОбъект - ДокументОбъект, в котором нужно удалить неиспользуемые строки серий
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
Процедура УдалитьНеиспользуемыеСтрокиСерий(ДокументОбъект,ПараметрыУказанияСерий) Экспорт
	
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьТоварВШапке = ПараметрыУказанияСерий.Свойство("Шапка");
	
	Если ЕстьТоварВШапке Тогда
		ПараметрыУказанияСерийПроверка = ПараметрыУказанияСерий.ТЧ;
	Иначе
		ПараметрыУказанияСерийПроверка = ПараметрыУказанияСерий;
	КонецЕсли;
	
	ИмяТЧТовары = "";
	ИмяТЧСерии  = "";
		
	Если Не ПараметрыУказанияСерийПроверка.Свойство("ИмяТЧТовары", ИмяТЧТовары) Тогда
		ИмяТЧТовары = "Товары";
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерийПроверка.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	ТекстПоляСвязиТовары = "";
	ТекстПоляСвязиСерии = "";
	ТекстПоляСвязиСоединениеТоварыСерии = "";
	ТекстПоляСвязиСоединениеТоварыВсеТовары = "";
	ТекстПоляСвязиВыгружаемыеКолонки = "";
	
	Для Каждого СтрМас из ПараметрыУказанияСерийПроверка.ПоляСвязи Цикл
		ТекстПоляСвязиТовары = ТекстПоляСвязиТовары + "
		|	ТаблицаТоваров." + СтрМас + ",";
		ТекстПоляСвязиСерии = ТекстПоляСвязиСерии + "
		|	ТаблицаСерий." + СтрМас + ",";
		ТекстПоляСвязиСоединениеТоварыСерии = ТекстПоляСвязиСоединениеТоварыСерии + "
	|			И ТаблицаТоваров."+СтрМас+" = ТаблицаСерий."+СтрМас;
		ТекстПоляСвязиВыгружаемыеКолонки = ТекстПоляСвязиВыгружаемыеКолонки + ", " + СтрМас  ;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ "
	+ ТекстПоляСвязиТовары + "
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.СтатусУказанияСерий
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ "
	+ ТекстПоляСвязиСерии + "
	|	ТаблицаСерий.НомерСтроки,
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика
	|ПОМЕСТИТЬ ТаблицаСерий
	|ИЗ
	|	&ТаблицаСерий КАК ТаблицаСерий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСерий.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаСерий КАК ТаблицаСерий
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
	|		ПО ТаблицаСерий.Номенклатура = ТаблицаТоваров.Номенклатура
	|			И ТаблицаСерий.Характеристика = ТаблицаТоваров.Характеристика"
				+ ТекстПоляСвязиСоединениеТоварыСерии + "
	|ГДЕ
	|	ЕСТЬNULL(ТаблицаТоваров.СтатусУказанияСерий, 0) = 0
	|	ИЛИ ЕСТЬNULL(ТаблицаТоваров.СтатусУказанияСерий, 0) = 11
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерий.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки УБЫВ";
	
	ТаблицаТовары = ДокументОбъект[ИмяТЧТовары].Выгрузить(,"Номенклатура,Характеристика,СтатусУказанияСерий"+ТекстПоляСвязиВыгружаемыеКолонки);
	
	Если ЕстьТоварВШапке Тогда
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ДокументОбъект);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаТовары",ТаблицаТовары);
	Запрос.УстановитьПараметр("ТаблицаСерий", ДокументОбъект[ИмяТЧСерии].Выгрузить(,"НомерСтроки,Номенклатура,Характеристика"+ТекстПоляСвязиВыгружаемыеКолонки));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект[ИмяТЧСерии].Удалить(ДокументОбъект[ИмяТЧСерии][Выборка.НомерСтроки-1]);
			
	КонецЦикла;
	
КонецПроцедуры

// Получает строковое описание выбранных параметров СКД
//
// Параметры: 
//  СхемаКомпоновкиДанных - схема компоновки данных
//  НастройкиКомпоновкиДанных- настройки компоновки данных
//
// Возвращаемое знанение:
//  Строка
//
Функция ОписаниеПараметровНастройки(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных) Экспорт
	
	ОписаниеПараметров = "";
	Для Каждого ЗначениеПараметраНастроекКомпоновкиДанных Из НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы Цикл
		
		ПараметрСКД = СхемаКомпоновкиДанных.Параметры.Найти(ЗначениеПараметраНастроекКомпоновкиДанных.Параметр);
		Если ПараметрСКД = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрСКД.ОграничениеИспользования Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПараметра = ЗначениеПараметраНастроекКомпоновкиДанных.Значение;
		ИмяПараметра = Строка(ПараметрСКД.Заголовок);
		
		ОписаниеПараметров = ?(ЗначениеЗаполнено(ОписаниеПараметров), ОписаниеПараметров, НСтр("ru = 'Параметры:'") + " ") + ?(Не ЗначениеЗаполнено(ОписаниеПараметров),"",", ") + ИмяПараметра + " = " + ?(ЗначениеЗаполнено(ЗначениеПараметра), Строка(ЗначениеПараметра),"<не заполнен>");
	КонецЦикла;
	
	ОписаниеПараметров = ОписаниеПараметров + ?(ЗначениеЗаполнено(Строка(НастройкиКомпоновкиДанных.Отбор))," " + НСтр("ru = 'Отбор:'") + " " + Строка(НастройкиКомпоновкиДанных.Отбор),"");
	
	Возврат ОписаниеПараметров;
	
КонецФункции

// Добавляет в таблицу значений строки из другой таблицы значений и 
// в них значения колонок с совпадающими наименованиями.
//
// Параметры:
//  ТаблицаИсточник - таблица значений, откуда берутся значения.
//  ТаблицаПриемник - таблица значений, куда добавляются строки.
//  ОчищатьПриемник - Булево
//
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник, ОчищатьПриемник) Экспорт

	Если ОчищатьПриемник Тогда

		ТаблицаПриемник.Очистить();

	КонецЕсли;
	
//	Заполним значения в совпадающих колонках.
	Для Каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);

	КонецЦикла;

КонецПроцедуры // ЗагрузитьВТаблицуЗначений()

// +HVOYA. 26.08.2016 11:15:23, Львова Е.А.
Функция ПолучитьНовыеАкции()Экспорт
	
	МассивАкций = Новый Массив;	

//	LNK 06.09.2016 14:59:36
	Если ПравоДоступа("Чтение", Метаданные.Документы.МаркетинговаяАкция) Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МаркетинговаяАкция.Ссылка,
		|	МаркетинговаяАкция.НаименованиеАкции
		|ИЗ
		|	Документ.МаркетинговаяАкция КАК МаркетинговаяАкция
		|ГДЕ
		|	МаркетинговаяАкция.Дата МЕЖДУ &НачДата И &КонДата");
		
		Запрос.УстановитьПараметр("КонДата", ТекущаяДата());
		Запрос.УстановитьПараметр("НачДата", ТекущаяДата()-86400);
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			АдресОбъекта = ПолучитьНавигационнуюСсылку(ВыборкаДетальныеЗаписи.Ссылка);
			НовыеАкции = Новый Структура("АдресОбъекта, НаименованиеАкции", АдресОбъекта, ВыборкаДетальныеЗаписи.НаименованиеАкции);
			МассивАкций.Добавить(НовыеАкции);
		КонецЦикла;

	КонецЕсли;
		
	//Если РольДоступна("ЧтениеМаркетинговыхАкций") Тогда - добавить нужные ограничения по ролям при надобности	
		Возврат МассивАкций;
	//КонецЕсли;

КонецФункции
// -HVOYA. 26.08.2016 11:15:27, Львова Е.А.

#Область КосвенныеОпределенияМагазиновПоНекторымСпискамИлиТипам

//	LNK 07.09.2016 11:36:54
Функция ПолучитьМагазиныПоСпискуВидовЦен(СписокВидовЦен)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Магазины.Ссылка КАК Магазин
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЦенообразования КАК ПравилаЦенообразования
	|		ПО Магазины.ПравилоЦенообразования = ПравилаЦенообразования.Ссылка
	|ГДЕ
	|	ПравилаЦенообразования.ВидЦен В(&СписокВидовЦен)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Магазины.Ссылка
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ПравилаЦенообразования
	|		ПО Магазины.ПравилоЦенообразования = ПравилаЦенообразования.Ссылка
	|ГДЕ
	|	ПравилаЦенообразования.ВидЦен В(&СписокВидовЦен)"
	);
	Запрос.УстановитьПараметр("СписокВидовЦен", СписокВидовЦен);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Магазин");

КонецФункции // ПолучитьМагазиныПоСпискуВидовЦен()

//	LNK 07.09.2016 13:55:37
Функция ПолучитьМагазиныПоОбъекту(СсылкаНаОбъект)	Экспорт

	Перем СписокМагазинов;

	УстановитьПривилегированныйРежим(Истина);

	Если Типзнч(СсылкаНаОбъект) = Тип("ДокументСсылка.УстановкаЦенНоменклатуры") Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.ВидЦены
		|ИЗ
		|	Документ.УстановкаЦенНоменклатуры.ВидыЦен КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &СсылкаНаОбъект"
		);
		Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
		
		СписокМагазинов = ОбщегоНазначенияРТСервер.ПолучитьМагазиныПоСпискуВидовЦен(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидЦены"));

	Иначе

		ТекстЗапроса = "";

		МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
		ПолучитьМагазиныПоОбъектуЗапросПоКоллекции(МетаданныеОбъекта.Реквизиты, МетаданныеОбъекта.Имя, ТекстЗапроса);

		Для каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл

			ПолучитьМагазиныПоОбъектуЗапросПоКоллекции(ТабличнаяЧасть.Реквизиты, МетаданныеОбъекта.Имя + "." + ТабличнаяЧасть.Имя, ТекстЗапроса);

		КонецЦикла;

		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаДанных.Магазин
			|ИЗ
			|	(" + ТекстЗапроса + ") КАК ТаблицаДанных
			|ГДЕ
			|	НЕ ТаблицаДанных.Магазин = НЕОПРЕДЕЛЕНО
			|	И НЕ ТаблицаДанных.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
			|");
			Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);

			СписокМагазинов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Магазин");

		КонецЕсли;

	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

	Возврат СписокМагазинов;

КонецФункции

//	LNK 07.09.2016 13:55:41
Процедура ПолучитьМагазиныПоОбъектуЗапросПоКоллекции(Коллекция, ИмяТаблицы, ТекстЗапроса)

	ТипМагазины = Тип("СправочникСсылка.Магазины");
	ТипСклады   = Тип("СправочникСсылка.Склады");
	ТипКассы    = Тип("СправочникСсылка.Кассы");
	ТипКассыККМ = Тип("СправочникСсылка.КассыККМ");
	ТипВидыЦен  = Тип("СправочникСсылка.ВидыЦен");
	ТипИнтервал = Тип("СправочникСсылка.ИнтервалыРаботыМагазинов");
	ТипТерминал = Тип("СправочникСсылка.ЭквайринговыеТерминалы");

	Для каждого Реквизит Из Коллекция Цикл

		ТекстПодзапроса = "";

		Если Реквизит.Тип.СодержитТип(ТипМагазины) Тогда

			ТекстПодзапроса =
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ТаблицаДокумента." + Реквизит.Имя + " КАК Справочник.Магазины) КАК Магазин
			|ИЗ
			|	Документ." + ИмяТаблицы + " КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.Ссылка = &СсылкаНаОбъект";

		ИначеЕсли	Реквизит.Тип.СодержитТип(ТипСклады)
				ИЛИ Реквизит.Тип.СодержитТип(ТипКассы)
				ИЛИ Реквизит.Тип.СодержитТип(ТипКассыККМ)
				ИЛИ Реквизит.Тип.СодержитТип(ТипИнтервал) Тогда

			ТекстПодзапроса =
			"ВЫБРАТЬ
			|	ТаблицаДокумента." + Реквизит.Имя + ".Магазин КАК Магазин
			|ИЗ
			|	Документ." + ИмяТаблицы + " КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.Ссылка = &СсылкаНаОбъект";

		ИначеЕсли Реквизит.Тип.СодержитТип(ТипВидыЦен) Тогда

			ТекстПодзапроса =
			"ВЫБРАТЬ
			|	Магазины.Ссылка КАК Магазин
			|ИЗ
			|	Документ." + ИмяТаблицы + " КАК ТаблицаДокумента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЦенообразования КАК ПравилаЦенообразования
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Магазины КАК Магазины
			|			ПО ПравилаЦенообразования.Ссылка = Магазины.ПравилоЦенообразования
			|		ПО ТаблицаДокумента." + Реквизит.Имя + " = ПравилаЦенообразования.ВидЦен
			|ГДЕ
			|	ТаблицаДокумента.Ссылка = &СсылкаНаОбъект
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Магазины.Ссылка КАК Магазин
			|ИЗ
			|	Документ." + ИмяТаблицы + " КАК ТаблицаДокумента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ПравилаЦенообразования
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Магазины КАК Магазины
			|			ПО ПравилаЦенообразования.Ссылка = Магазины.ПравилоЦенообразования
			|		ПО ТаблицаДокумента." + Реквизит.Имя + " = ПравилаЦенообразования.ВидЦен
			|ГДЕ
			|	ТаблицаДокумента.Ссылка = &СсылкаНаОбъект";

		ИначеЕсли Реквизит.Тип.СодержитТип(ТипТерминал) Тогда

			ТекстПодзапроса =
			"ВЫБРАТЬ
			|	ТаблицаДокумента." + Реквизит.Имя + ".Магазин
			|ИЗ
			|	Документ." + ИмяТаблицы + " КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.Ссылка = &СсылкаНаОбъект
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ТаблицаДокумента." + Реквизит.Имя + ".Касса.Магазин
			|ИЗ
			|	Документ." + ИмяТаблицы + " КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.Ссылка = &СсылкаНаОбъект";

		КонецЕсли;

		Если НЕ ПустаяСтрока(ТекстПодзапроса) Тогда

			ТекстЗапроса = ТекстЗапроса
				+ ?(ПустаяСтрока(ТекстЗапроса), "", Символы.ПС + Символы.ПС
				+ "ОБЪЕДИНИТЬ" + Символы.ПС + Символы.ПС)
				+ ТекстПодзапроса;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

//	LNK 04.05.2017 14:55:20
Функция ЭтоТоварУниверсальный(Номенклатура)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Номенклатура.НазначениеТовара = ЗНАЧЕНИЕ(Перечисление.НазначенияТовара.ТоварУниверсальный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Ответ
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура"
	);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

			Ответ = Выборка.Ответ;

	Иначе	Ответ = Ложь;

	КонецЕсли;

	Возврат Ответ;

КонецФункции // ЭтоТоварУниверсальный()

////////////////////////////////////////////////////////////////////////////////
// ИСПРАВЛЕНИЕ ВЫЗОВОВ БСП

Функция НастройкиРаботыСФайлами() Экспорт
	
	Возврат ФайловыеФункцииСлужебныйПовтИсп.НастройкиРаботыСФайлами();
	
КонецФункции

// Проверить необходимость обновления информационной базы при смене версии конфигурации.
//
Функция ЗапретИзмененияДанныхНеИспользуется() Экспорт
	
	Возврат ДатыЗапретаИзмененияСлужебный.ЗапретИзмененияДанныхНеИспользуется();
	
КонецФункции

// Удаляет набор записей в регистре по переданным значениям структуры
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо удалить набор записей
//  ИмяРегистра     - Строка - имя регистра сведений, в котором необходимо удалить набор записей
// 
Процедура УдалитьНаборЗаписейВРегистреСведений(СтруктураЗаписи, ИмяРегистра, Загрузка = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбменДаннымиСервер.УдалитьНаборЗаписейВРегистреСведений(СтруктураЗаписи, ИмяРегистра, Загрузка);
	
КонецПроцедуры

// Проверяет, является ли текущий или указанный пользователь полноправным.
// 
// Полноправным считается пользователь, который
// а) при не пустом списке пользователей информационной базы:
// - в локальном режиме работы (без разделения данных) имеет роль ПолныеПрава и
//   роль для администрирования системы,
// - в модели сервиса (с разделением данных) имеет роль ПолныеПрава;
// б) при пустом списке пользователей информационной базы
//    основная роль конфигурации не задана или ПолныеПрава.
//
// Параметры:
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ;
//                 СправочникСсылка.Пользователи,
//                 СправочникСсылка.ВнешниеПользователи - осуществляется поиск
//                    пользователя ИБ по уникальному идентификатору,
//                    заданному в реквизите ИдентификаторПользователяИБ.
//                    Прим.: если пользователь ИБ не найден, возвращается Ложь.
//                 ПользовательИнформационнойБазы - проверяется указанный
//                    пользователь ИБ.
//
//  ПроверятьПраваАдминистрированияСистемы - Булево - если задано Истина, тогда
//                 проверяется наличие роли для администрирования системы.
//                 Начальное значение: Ложь.
//
//  УчитыватьПривилегированныйРежим - Булево - если задано Истина, тогда
//                 функция возвращает Истина, когда установлен привилегированный режим.
//                 Начальное значение: Истина.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоПолноправныйПользователь(Пользователь = Неопределено,
                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
                                    УчитыватьПривилегированныйРежим = Истина) Экспорт
	
	Возврат Пользователи.ЭтоПолноправныйПользователь(Пользователь,
													 ПроверятьПраваАдминистрированияСистемы,
													 УчитыватьПривилегированныйРежим)
	
КонецФункции
