Функция ПолучитьПараметрыПодключения()
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("Сервер","api.alerts.in.ua");
	ПараметрыПодключения.Вставить("Порт",443);
	ПараметрыПодключения.Вставить("Токен","36619877bb75f990fb6545b89bb6c15752fbd73aab2203"); 
	ПараметрыПодключения.Вставить("Ресурс","/v1/alerts/active.json"); 
	
	Возврат ПараметрыПодключения;
КонецФункции

Функция ПолучитьАктивныеТревоги() Экспорт
	ПараметрыПодключения = ПолучитьПараметрыПодключения();
	ХТТПСоединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер,ПараметрыПодключения.Порт,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	ХТТПЗапрос = Новый HTTPЗапрос(ПараметрыПодключения.Ресурс);
	ХТТПЗапрос.Заголовки.Вставить("Authorization", "Bearer "+ПараметрыПодключения.Токен);
	ХТТПОтвет = ХТТПСоединение.Получить(ХТТПЗапрос);
	Если ХТТПОтвет.КодСостояния <> 200 Тогда
		Возврат Новый Структура("Успешно,КодСостояния,ОписаниеОшибки",Ложь,ХТТПОтвет.КодСостояния,ХТТПОтвет.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	СтруктураОтвета = ОбменWebRetailСервер.ТекстДЖСОНвСтруктуру(ХТТПОтвет.ПолучитьТелоКакСтроку()); 
	
	Возврат СтруктураОтвета;
КонецФункции

Функция ПолучитьИсториюТревогПоТерритории(КодТерритории)
	ПараметрыПодключения = ПолучитьПараметрыПодключения();
	ХТТПСоединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер,ПараметрыПодключения.Порт,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	ХТТПЗапрос = Новый HTTPЗапрос("/v1/regions/"+СтрЗаменить(КодТерритории,Символы.НПП,"")+"/alerts/month_ago.json");
	ХТТПЗапрос.Заголовки.Вставить("Authorization", "Bearer "+ПараметрыПодключения.Токен);
	ХТТПОтвет = ХТТПСоединение.Получить(ХТТПЗапрос);
	Если ХТТПОтвет.КодСостояния <> 200 Тогда
		Возврат Новый Структура("Успешно,КодСостояния,ОписаниеОшибки",Ложь,ХТТПОтвет.КодСостояния,ХТТПОтвет.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	СтруктураОтвета = ОбменWebRetailСервер.ТекстДЖСОНвСтруктуру(ХТТПОтвет.ПолучитьТелоКакСтроку()); 
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПолучитьИсториюТревогЗаМесяц() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Магазины.Город КАК Город,
	               |	Магазины.Город.КодТерритории КАК КодТерритории
	               |ИЗ
	               |	Справочник.Магазины КАК Магазины
	               |ГДЕ
	               |	Магазины.Блокирован = ЛОЖЬ
	               |	И Магазины.ВведенВЭксплуатацию = ИСТИНА
	               |	И Магазины.Город.КодТерритории > 0"; 
	Рез_ = Запрос.Выполнить().Выбрать();
	Пока Рез_.Следующий() Цикл
		СтруктураОтвета = ПолучитьИсториюТревогПоТерритории(Рез_.КодТерритории);
		ЗаписатьКартуТревог(СтруктураОтвета);	
	КонецЦикла;
	
	
КонецФункции


Процедура ЗаписатьКартуТревог(СтруктураОтвета) Экспорт 
	Если ТипЗнч(СтруктураОтвета)<> Тип("Структура") 
		ИЛИ Не СтруктураОтвета.Свойство("alerts")
		ИЛИ ТипЗнч(СтруктураОтвета.alerts)<>Тип("Массив")
			Тогда    
			ЗаписьЖурналаРегистрации("КартаТревог",УровеньЖурналаРегистрации.Ошибка,,,"Возвращен неизвестный формат ответа");
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаОтвета Из СтруктураОтвета.alerts Цикл
		//НайденныеСтроки = КартаТревог.НайтиСтроки(Новый Структура("ДатаНачала,КодТерритории",ПреобразоватьВДату(СтрокаОтвета.started_at),ПолучитьЧисло(СтрокаОтвета.location_uid)));
		//Если НайденныеСтроки.Количество() > 0 Тогда
		//	СтрокаКартыТревог = НайденныеСтроки[0];
		//Иначе
		//	СтрокаКартыТревог = КартаТревог.Добавить(); 
		//КонецЕсли;

		Рег_ = РегистрыСведений.КартаТревог.СоздатьНаборЗаписей();
		Рег_.Отбор.Период.Установить(ПреобразоватьВДату(СтрокаОтвета.started_at));
		Рег_.Отбор.КодТерритории.Установить(ПолучитьЧисло(СтрокаОтвета.location_uid));
		Рег_.Прочитать();
		Если Рег_.Количество() > 0 Тогда
			СтрокаКартыТревог = Рег_[0];
		Иначе
			СтрокаКартыТревог = Рег_.Добавить(); 
		КонецЕсли;
		
		СтрокаКартыТревог.КодТерритории = СтрокаОтвета.location_uid;
		СтрокаКартыТревог.НазваниеТерритории = СтрокаОтвета.location_title;
		СтрокаКартыТревог.Период = ПреобразоватьВДату(СтрокаОтвета.started_at);
		Если Не ЗначениеЗаполнено(СтрокаОтвета.finished_at) Тогда
			СтрокаКартыТревог.ДатаОкончания = ТекущаяДата();
		Иначе
			СтрокаКартыТревог.ДатаОкончания = ПреобразоватьВДату(СтрокаОтвета.finished_at); 
		КонецЕсли;
		СтрокаКартыТревог.ТипТерритории = СтрокаОтвета.location_type;
		СтрокаКартыТревог.ТипТревоги = СтрокаОтвета.alert_type;
		СтрокаКартыТревог.Примечание = СтрокаОтвета.notes;
		Рег_.Записать(Истина);
	КонецЦикла;
	
	
КонецПроцедуры   

Процедура ОбновитьКартуТревог() Экспорт 
	СтруктураОтвета = ПолучитьАктивныеТревоги();
	ЗаписатьКартуТревог(СтруктураОтвета);
КонецПроцедуры

Функция ПолучитьЧисло(СтрЧисло)
	Если ТипЗнч(СтрЧисло) = Тип("Число") Тогда
		Возврат СтрЧисло;
	Иначе
		СтрЧисло = СтрЗаменить(СтрЧисло," ","");
		Попытка 
			Число_ = Число(СтрЧисло);
		Исключение
			Сообщить("Не удалось преобразовать в число: "+СтрЧисло);
			Число_ = 0;	
		КонецПопытки;

		Возврат Число_;
		
	КонецЕсли;
КонецФункции

Функция ПреобразоватьВДату(СтрДата)
	//Ожидаем дату в формате 2023-10-29T18:22:37.357Z
	СтрДата = СтрЗаменить(СтрДата,"-","");
	СтрДата = СтрЗаменить(СтрДата,"T","");
	СтрДата = СтрЗаменить(СтрДата,":","");
	СтрДата = Лев(СтрДата,14);
	Попытка
		Дата_ = Дата(СтрДата);
	Исключение
		Сообщить("Не удалось преобразовать в дату: "+СтрДата);
		Дата_ = Дата("00010101");
	КонецПопытки;
	
	Возврат Дата_;

КонецФункции   

