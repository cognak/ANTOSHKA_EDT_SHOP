//////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ СВОДНОГО ОТЧЕТА 

Функция ПолучитьОтчетыОРозничныхПродажахДляСводногоОтчета(СтруктураПараметров) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтчетККМ.Ссылка КАК ОтчетОРозничныхПродажах,
	|	ОтчетККМ.КассаККМ.Владелец КАК Организация
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетККМ
	|ГДЕ
	|	ОтчетККМ.Проведен
	|	И ОтчетККМ.Магазин = &Магазин
	|	И &ОтчетККМУсловиеОрганизация
	|	И ОтчетККМ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И (НЕ ОтчетККМ.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах
	|				ИЗ
	|					Документ.СводныйОтчетПоКассовойСмене.ОтчетыОРозничныхПродажах КАК СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах
	|				ГДЕ
	|					СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.Ссылка.Проведен
	|					И СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.Ссылка <> &ЭтотСводныйОтчетПоКассовойСмене
	|					И СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Магазин = &Магазин
	|					И СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|					И &СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажахУсловиеОрганизация))
	|ИТОГИ ПО
	|	Организация,
	|	ОтчетОРозничныхПродажах";
	
	Запрос.УстановитьПараметр("Магазин", СтруктураПараметров.Магазин);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(СтруктураПараметров.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(СтруктураПараметров.Дата));
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтчетККМУсловиеОрганизация", "ОтчетККМ.Организация = &Организация");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажахУсловиеОрганизация", "СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Организация = &Организация");
		
		Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтчетККМУсловиеОрганизация", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажахУсловиеОрганизация", "ИСТИНА");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЭтотСводныйОтчетПоКассовойСмене", СтруктураПараметров.ДокументСсылка);
	
	ДеревоОтчетов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ДеревоОтчетов;

КонецФункции // ПолучитьОтчетыОРозничныхПродажахДляСводногоОтчета()

Процедура ПроверитьСводныйОтчет(
	ДокументОбъект, 
	ИмяТабличнойЧасти, 
	Отказ
	) Экспорт
	
	ЗапросПоТабличнойЧасти = Новый Запрос;
	ЗапросПоТабличнойЧасти.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах КАК Документ.ОтчетОРозничныхПродажах) КАК ОтчетОРозничныхПродажах
	|ПОМЕСТИТЬ ТаблицаОтчетовРозничныхПродаж
	|ИЗ
	|	&ОтчетыОРозничныхПродажах КАК СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.НомерСтроки) КАК НомерСтроки,
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах
	|ПОМЕСТИТЬ ТаблицаОтчетовРозничныхПродажСвернутоПоОтчетам
	|ИЗ
	|	ТаблицаОтчетовРозничныхПродаж КАК СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах
	|
	|СГРУППИРОВАТЬ ПО
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
	|	КОЛИЧЕСТВО(СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах) КАК КоличествоДокументов
	|ПОМЕСТИТЬ ТаблицаКоличестваОтчетов
	|ИЗ
	|	ТаблицаОтчетовРозничныхПродаж КАК СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах
	|
	|СГРУППИРОВАТЬ ПО
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКоличестваОтчетов.ОтчетОРозничныхПродажах,
	|	ТаблицаКоличестваОтчетов.ОтчетОРозничныхПродажах.Представление КАК ПредставлениеДокумента,
	|	ТаблицаКоличестваОтчетов.КоличествоДокументов,
	|	ТаблицаОтчетовРозничныхПродажСвернутоПоОтчетам.НомерСтроки
	|ИЗ
	|	ТаблицаКоличестваОтчетов КАК ТаблицаКоличестваОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтчетовРозничныхПродажСвернутоПоОтчетам КАК ТаблицаОтчетовРозничныхПродажСвернутоПоОтчетам
	|		ПО ТаблицаКоличестваОтчетов.ОтчетОРозничныхПродажах = ТаблицаОтчетовРозничныхПродажСвернутоПоОтчетам.ОтчетОРозничныхПродажах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Представление КАК ПредставлениеДокумента,
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Проведен КАК Проведен,
	|	ВложенныйЗапрос.Ссылка.Представление КАК ПредставлениеПроведенногоСводногоОтчета,
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаОтчетовРозничныхПродаж КАК СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах2.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
	|			СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах2.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.СводныйОтчетПоКассовойСмене.ОтчетыОРозничныхПродажах КАК СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах2
	|		ГДЕ
	|			СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах2.Ссылка <> &ДокументСсылка
	|			И СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах2.Ссылка.Проведен) КАК ВложенныйЗапрос
	|		ПО СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах = ВложенныйЗапрос.ОтчетОРозничныхПродажах
	|ИТОГИ ПО
	|	ОтчетОРозничныхПродажах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Представление КАК ПредставлениеДокумента,
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Проведен КАК Проведен,
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаОтчетовРозничныхПродаж КАК СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах
	|ГДЕ
	|	(НЕ СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Проведен)";
	
	ЗапросПоТабличнойЧасти.УстановитьПараметр("ДокументСсылка"          , ДокументОбъект.Ссылка);
	ЗапросПоТабличнойЧасти.УстановитьПараметр("ОтчетыОРозничныхПродажах", ДокументОбъект[ИмяТабличнойЧасти].Выгрузить());
	
	РезультатПакетногоВыполненияЗапроса = ЗапросПоТабличнойЧасти.ВыполнитьПакет();
	
	ВыборкаПоКоличествуДокументов = РезультатПакетногоВыполненияЗапроса[3].Выбрать();
	Пока ВыборкаПоКоличествуДокументов.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 встречается в табличной части %2 раз(а)! Повторения документов быть не должно!'"),
			ВыборкаПоКоличествуДокументов.ПредставлениеДокумента,
			Строка(ВыборкаПоКоличествуДокументов.КоличествоДокументов)
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			ИмяТабличнойЧасти+"[" + (ВыборкаПоКоличествуДокументов.НомерСтроки - 1) + "].ОтчетОРозничныхПродажах" ,
			,
			Отказ
		);
		
	КонецЦикла;
	
	ВыборкаПоТабличнойЧасти = РезультатПакетногоВыполненияЗапроса[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоТабличнойЧасти.Следующий() Цикл
		
		ВыборкаПоСводнымОтчетам = ВыборкаПоТабличнойЧасти.Выбрать();
		
		Пока ВыборкаПоСводнымОтчетам.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаПоСводнымОтчетам.ПредставлениеПроведенногоСводногоОтчета) Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 уже включен в %2.'"),
					ВыборкаПоСводнымОтчетам.ПредставлениеДокумента,
					ВыборкаПоСводнымОтчетам.ПредставлениеПроведенногоСводногоОтчета
				);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					ИмяТабличнойЧасти+"[" + (ВыборкаПоСводнымОтчетам.НомерСтроки - 1) + "].ОтчетОРозничныхПродажах" ,
					,
					Отказ
				);
				
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ВыборкаПоТабличнойЧасти = РезультатПакетногоВыполненияЗапроса[5].Выбрать();
	
	Пока ВыборкаПоТабличнойЧасти.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 не проведен! В табличной части не должно быть непроведенных документов!'"),
			ВыборкаПоТабличнойЧасти.ПредставлениеДокумента
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			ИмяТабличнойЧасти+"[" + (ВыборкаПоТабличнойЧасти.НомерСтроки - 1) + "].ОтчетОРозничныхПродажах" ,
			,
			Отказ
		);
		
	КонецЦикла;
	
	
КонецПроцедуры

//	LNK 18.09.2016 09:44:28
//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/
//	ФУНКЦИИ ПРОВЕРКИ СОСТОЯНИЯ КАССОВОГО ДНЯ
//	---------------------------------------------------------------------------------------

#Область РаботаСДокументамиКассовыйДень

//	LNK 18.09.2016 10:00:52
Функция ПолучитьСтруктуруОписанияКассовогоДня()

	СостояниеКассовойСмены = Новый Структура;
	СостояниеКассовойСмены.Вставить("ДатаИзмененияСтатуса"	, '00010101');
	СостояниеКассовойСмены.Вставить("СтатусКассовогоДня"	, Перечисления.СтатусыКассовойСмены.ПустаяСсылка());
	СостояниеКассовойСмены.Вставить("КассовыйДень"			, Документы.КассовыйДень.ПустаяСсылка());
	СостояниеКассовойСмены.Вставить("НаличностьВКассах"		, 0);
	СостояниеКассовойСмены.Вставить("НомерКассовогоДня"		, 0);
	СостояниеКассовойСмены.Вставить("НачалоКассовогоДня"	, '00010101');
	СостояниеКассовойСмены.Вставить("ОкончаниеКассовогоДня"	, '00010101');
	СостояниеКассовойСмены.Вставить("КассовыйДеньОткрыт"	, Ложь);
	СостояниеКассовойСмены.Вставить("Сообщение"				, "");
	СостояниеКассовойСмены.Вставить("Ошибка"				, Ложь);
	СостояниеКассовойСмены.Вставить("Выполнено"				, Ложь);
	
//	Описание реквизитов кассового дня
	СостояниеКассовойСмены.Вставить("Магазин");
	
	Возврат СостояниеКассовойСмены;

КонецФункции

//	LNK 18.09.2016 10:00:56
Функция ПолучитьСостояниеКассовогоДня(Магазин, ТолькоОткрытый = Ложь)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КассыККМ.Ссылка КАК КассаККМ
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Магазин = &Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ТаблицаДокументы.Дата КАК Дата,
	|	ТаблицаДокументы.Ссылка КАК КассовыйДень,
	|	ТаблицаДокументы.Магазин КАК Магазин,
	|	ТаблицаДокументы.Номер КАК НомерКассовогоДня,
	|	ТаблицаДокументы.СтатусКассовогоДня КАК СтатусКассовогоДня,
	|	ТаблицаДокументы.НачалоКассовогоДня КАК НачалоКассовогоДня,
	|	ТаблицаДокументы.ОкончаниеКассовогоДня КАК ОкончаниеКассовогоДня,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументы.СтатусКассовогоДня = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КассовыйДеньОткрыт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументы.СтатусКассовогоДня = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА ТаблицаДокументы.НачалоКассовогоДня
	|		ИНАЧЕ ТаблицаДокументы.ОкончаниеКассовогоДня
	|	КОНЕЦ КАК ДатаИзмененияСтатуса,
	|	СУММА(ЕСТЬNULL(ТаблицаСредствККМ.СуммаОстаток, 0)) КАК НаличностьВКассах
	|ИЗ
	|	Документ.КассовыйДень КАК ТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваККМ.Остатки(
	|					,
	|					КассаККМ В
	|						(ВЫБРАТЬ
	|							Фильтр.КассаККМ
	|						ИЗ
	|							Фильтр)) КАК ТаблицаСредствККМ
	|			ПО Фильтр.КассаККМ = ТаблицаСредствККМ.КассаККМ
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаДокументы.Проведен
	|	И ТаблицаДокументы.Магазин = &Магазин
	|	И ВЫБОР
	|			КОГДА &ТолькоОткрытый = ИСТИНА
	|				ТОГДА ТаблицаДокументы.СтатусКассовогоДня = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументы.Дата,
	|	ТаблицаДокументы.Ссылка,
	|	ТаблицаДокументы.СтатусКассовогоДня,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументы.СтатусКассовогоДня = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА ТаблицаДокументы.НачалоКассовогоДня
	|		ИНАЧЕ ТаблицаДокументы.ОкончаниеКассовогоДня
	|	КОНЕЦ,
	|	ТаблицаДокументы.Номер,
	|	ТаблицаДокументы.Магазин,
	|	ТаблицаДокументы.НачалоКассовогоДня,
	|	ТаблицаДокументы.ОкончаниеКассовогоДня
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	КассовыйДень УБЫВ"
	);
	Запрос.УстановитьПараметр("Магазин"       , Магазин);
	Запрос.УстановитьПараметр("ТолькоОткрытый", ТолькоОткрытый);

	Выборка = Запрос.Выполнить().Выбрать();

	ОписаниеКассовогоДня = ПолучитьСтруктуруОписанияКассовогоДня();

	Если Выборка.Следующий() Тогда

		ЗаполнитьЗначенияСвойств(ОписаниеКассовогоДня, Выборка);

	Иначе

		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КассыККМ.Ссылка КАК КассаККМ
		|ПОМЕСТИТЬ Фильтр
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|ГДЕ
		|	КассыККМ.Магазин = &Магазин
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ЕСТЬNULL(ТаблицаСредствККМ.СуммаОстаток, 0)) КАК НаличностьВКассах
		|ИЗ
		|	Фильтр КАК Ведущая
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваККМ.Остатки(
		|				,
		|				КассаККМ В
		|					(ВЫБРАТЬ
		|						Фильтр.КассаККМ
		|					ИЗ
		|						Фильтр)) КАК ТаблицаСредствККМ
		|		ПО Ведущая.КассаККМ = ТаблицаСредствККМ.КассаККМ"
		);
		Запрос.УстановитьПараметр("Магазин", Магазин);

		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ОписаниеКассовогоДня.НаличностьВКассах = ?(Выборка.НаличностьВКассах = NULL, 0, Выборка.НаличностьВКассах);
		
	КонецЕсли;
	
	Возврат ОписаниеКассовогоДня;

КонецФункции

//	LNK 18.09.2016 10:56:41
Функция ПолучитьКонфликтыКассовогоДня(Магазин, КассовыйДень = Неопределено, НачалоКассовогоДня, ОкончаниеКассовогоДня)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ТаблицаДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КассовыйДень КАК ТаблицаДокументы
	|ГДЕ
	|	ТаблицаДокументы.НачалоКассовогоДня <= &НачалоКассовогоДня
	|	И ВЫБОР
	|			КОГДА ТаблицаДокументы.ОкончаниеКассовогоДня = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаДокументы.ОкончаниеКассовогоДня >= &НачалоКассовогоДня
	|		КОНЕЦ
	|	И ТаблицаДокументы.Магазин = &Магазин
	|	И ТаблицаДокументы.Ссылка <> &КассовыйДень
	|	И ТаблицаДокументы.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаДокументы.Ссылка
	|ИЗ
	|	Документ.КассовыйДень КАК ТаблицаДокументы
	|ГДЕ
	|	&ОкончаниеКассовогоДня <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ТаблицаДокументы.НачалоКассовогоДня <= &ОкончаниеКассовогоДня
	|	И ВЫБОР
	|			КОГДА ТаблицаДокументы.ОкончаниеКассовогоДня = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаДокументы.ОкончаниеКассовогоДня >= &ОкончаниеКассовогоДня
	|		КОНЕЦ
	|	И ТаблицаДокументы.Магазин = &Магазин
	|	И ТаблицаДокументы.Ссылка <> &КассовыйДень
	|	И ТаблицаДокументы.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаДокументы.Ссылка
	|ИЗ
	|	Документ.КассовыйДень КАК ТаблицаДокументы
	|ГДЕ
	|	&ОкончаниеКассовогоДня = ДАТАВРЕМЯ(1, 1, 1)
	|	И ТаблицаДокументы.НачалоКассовогоДня >= &НачалоКассовогоДня
	|	И ТаблицаДокументы.Магазин = &Магазин
	|	И ТаблицаДокументы.Ссылка <> &КассовыйДень
	|	И ТаблицаДокументы.Проведен"
	);
	Запрос.УстановитьПараметр("Магазин",               Магазин);
	Запрос.УстановитьПараметр("НачалоКассовогоДня",    НачалоКассовогоДня);
	Запрос.УстановитьПараметр("ОкончаниеКассовогоДня", ОкончаниеКассовогоДня);
	Запрос.УстановитьПараметр("КассовыйДень",          КассовыйДень);

	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокументСсылка = Неопределено;

	Если Выборка.Следующий() Тогда

		ДокументСсылка = Выборка.Ссылка;

	КонецЕсли;
	
	Возврат ДокументСсылка;

КонецФункции

//	LNK 18.09.2016 12:10:13
Функция ПолучитьСостояниеКассовыхСменКассовогоДня(КассовыйДень)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСмены.Дата КАК Дата,
	|	ТаблицаСмены.Ссылка КАК КассоваяСмена,
	|	ТаблицаСмены.СтатусКассовойСмены КАК СтатусКассовойСмены,
	|	СУММА(ЕСТЬNULL(ТаблицаСредствККМ.СуммаОстаток, 0)) КАК НаличностьВКассе,
	|	ТаблицаСмены.Представление КАК КассоваяСменаПредставление
	|ИЗ
	|	Документ.КассоваяСмена КАК ТаблицаСмены
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваККМ.Остатки(, КассаККМ.Магазин = ВЫРАЗИТЬ(&КассовыйДень КАК Документ.КассовыйДень).Магазин) КАК ТаблицаСредствККМ
	|		ПО ТаблицаСмены.КассаККМ = ТаблицаСредствККМ.КассаККМ
	|ГДЕ
	|	ТаблицаСмены.Проведен
	|	И ТаблицаСмены.КассовыйДень = &КассовыйДень
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСмены.Ссылка,
	|	ТаблицаСмены.СтатусКассовойСмены,
	|	ТаблицаСмены.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	КассоваяСмена"
	);
	Запрос.УстановитьПараметр("КассовыйДень", КассовыйДень);

	СостояниеКассовыхСмен = Запрос.Выполнить().Выгрузить();

	УстановитьПривилегированныйРежим(Ложь);

	Возврат СостояниеКассовыхСмен;

КонецФункции // ПолучитьСостояниеКассовыхСменКассовогоДня()

//	LNK 18.09.2016 10:24:21
Функция ОткрытьКассовыйДень(Магазин)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ДанныеКассовогоДня = РозничныеПродажиСервер.ПолучитьСостояниеКассовогоДня(Магазин);
	ДатаОткрытияКассовогоДня = ТекущаяДата();

	Если ДанныеКассовогоДня.СтатусКассовогоДня = Перечисления.СтатусыКассовойСмены.Открыта Тогда

		ДанныеКассовогоДня.Ошибка = Истина;
	//	Если кассовый день открыт, то с момента открытия должно пройти не больше чем 24 часа.
		Если ДатаОткрытияКассовогоДня - ДанныеКассовогоДня.ДатаИзмененияСтатуса < 86400 Тогда
			
			ДанныеКассовогоДня.Сообщение = "Касового дня вже було відкрито!";
			
		ИначеЕсли НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда	//	оставим лазейку для администратора
			
		//	Вероятно, что кассовый день не был закрыт... проблема?
			ДанныеКассовогоДня.Сообщение = "З моменту відкриття касового дня минуло понад 24 години"
							+ Символы.ПС + "«" + ДанныеКассовогоДня.КассовыйДень + "»";
			
		КонецЕсли;

	Иначе

	//	Кассовый день закрыт. Открываем новый кассовый день!

		Попытка

			Блокиратор = ОбщегоНазначенияРТ.ПолучитьБлокиратор("Документы.КассовыйДень", Магазин);

			Если НЕ ДанныеКассовогоДня.Ошибка = Истина Тогда

				КассовыйДеньОбъект = Документы.КассовыйДень.СоздатьДокумент();
				КассовыйДеньОбъект.Заполнить(Новый Структура("Магазин", Магазин));
				
				КассовыйДеньОбъект.Дата                  = ДатаОткрытияКассовогоДня;
				КассовыйДеньОбъект.СтатусКассовогоДня    = Перечисления.СтатусыКассовойСмены.Открыта;
				КассовыйДеньОбъект.НачалоКассовогоДня    = ДатаОткрытияКассовогоДня;
				КассовыйДеньОбъект.ОкончаниеКассовогоДня = '00010101';

				Если КассовыйДеньОбъект.ПроверитьЗаполнение() Тогда

					Попытка

						КассовыйДеньОбъект.Записать(РежимЗаписиДокумента.Проведение);

						ДанныеКассовогоДня.Выполнено		  = Истина;
						ДанныеКассовогоДня.КассовыйДень		  = КассовыйДеньОбъект.Ссылка;
						ДанныеКассовогоДня.СтатусКассовогоДня = КассовыйДеньОбъект.СтатусКассовогоДня;

					Исключение

						ДанныеКассовогоДня.Ошибка	 = Истина;
						ДанныеКассовогоДня.Сообщение = "Спроба відкриття (проведення) касового дня викликала помилку:
						|%ДополнительноеОписание%";
						ПолучитьОшибкиОбъектаКассовыйДень(КассовыйДеньОбъект, ДанныеКассовогоДня, ОписаниеОшибки());

					КонецПопытки;

				Иначе

					ДанныеКассовогоДня.Ошибка	 = Истина;
					ДанныеКассовогоДня.Сообщение = "Спробу відкриття касового дня завершено невдало. Перевірте стан обліку по магазину «" + Магазин + "».";

				КонецЕсли;

				Блокиратор.Разблокировать();

			КонецЕсли;

		Исключение

			ДанныеКассовогоДня.Ошибка	 = Истина;
			ДанныеКассовогоДня.Сообщение = "Спроба стати власником процесу відкриття касового дня викликала помилку:"
					+ Символы.ПС + ОписаниеОшибки();

		КонецПопытки;

	КонецЕсли;

	Возврат ДанныеКассовогоДня;

КонецФункции

//	LNK 18.09.2016 13:42:20
Функция ЗакрытьКассовыйДень(Магазин)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ДанныеКассовогоДня = РозничныеПродажиСервер.ПолучитьСостояниеКассовогоДня(Магазин, Истина);	//	LNK 19.11.2022 06:21:14 - ТолькоОткрытый = Истина

	Если ДанныеКассовогоДня.СтатусКассовогоДня = Перечисления.СтатусыКассовойСмены.Открыта Тогда

		Попытка

			Блокиратор = ОбщегоНазначенияРТ.ПолучитьБлокиратор("Документы.КассовыйДень", Магазин);

			Если ПроверитьОтчетыОПродажахЗаКассовыйДень(Магазин, ДанныеКассовогоДня.КассовыйДень, ДанныеКассовогоДня.Сообщение) Тогда

				КассовыйДеньОбъект = ДанныеКассовогоДня.КассовыйДень.ПолучитьОбъект();
				КассовыйДеньОбъект.Дата                  = ТекущаяДата();
				КассовыйДеньОбъект.СтатусКассовогоДня    = Перечисления.СтатусыКассовойСмены.Закрыта;
				КассовыйДеньОбъект.ОкончаниеКассовогоДня = КассовыйДеньОбъект.Дата;
				
				Попытка

					КассовыйДеньОбъект.Записать(РежимЗаписиДокумента.Проведение);
					ДанныеКассовогоДня.Выполнено = Истина;

				Исключение

					ДанныеКассовогоДня.Сообщение = "Під час закриття касового дня сталася помилка:
													|%ДополнительноеОписание%";
					ПолучитьОшибкиОбъектаКассовыйДень(КассовыйДеньОбъект, ДанныеКассовогоДня, ОписаниеОшибки());

				КонецПопытки;

				ДанныеКассовогоДня.СтатусКассовогоДня = КассовыйДеньОбъект.СтатусКассовогоДня;
				Блокиратор.Разблокировать();

			КонецЕсли;

		Исключение

			ДанныеКассовогоДня.Ошибка	 = Истина;
			ДанныеКассовогоДня.Сообщение = "Спроба стати власником процесу закриття касового дня викликала помилку:"
											+ Символы.ПС + ОписаниеОшибки();

		КонецПопытки;

	Иначе

	//	Кассовый день не открыт... чего же боле?
		ДанныеКассовогоДня.Ошибка	 = Истина;
		ДанныеКассовогоДня.Сообщение = "НЕ виявлено вікритого касового дня!"
						+ Символы.ПС + "У процедурі закриття немає необхідності!";

	КонецЕсли;

	Возврат ДанныеКассовогоДня;

КонецФункции

//	LNK 21.12.2016 10:38:35
Функция ПроверитьОтчетыОПродажахЗаКассовыйДень(Магазин, КассовыйДень, ОписаниеОшибки)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Дата КАК Дата,
	|	ТаблицаДокументы.Ссылка КАК Ссылка,
	|	ТаблицаДокументы.Представление КАК Представление
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ТаблицаДокументы
	|ГДЕ
	|	ТаблицаДокументы.КассоваяСмена.КассовыйДень = &КассовыйДень
	|	И НЕ ТаблицаДокументы.Проведен
	|	И НЕ ТаблицаДокументы.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументы.Дата,
	|	ТаблицаДокументы.Ссылка,
	|	ТаблицаДокументы.Представление
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ТаблицаДокументы
	|ГДЕ
	|	ТаблицаДокументы.Магазин = &Магазин
	|	И ТаблицаДокументы.КассоваяСмена.КассовыйДень ЕСТЬ NULL
	|	И ТаблицаДокументы.Дата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ДЕНЬ, -2)
	|	И НЕ ТаблицаДокументы.Проведен
	|	И НЕ ТаблицаДокументы.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка"
	);
	Запрос.УстановитьПараметр("Магазин"     , Магазин);
	Запрос.УстановитьПараметр("КассовыйДень", КассовыйДень);
	Запрос.УстановитьПараметр("ТекущаяДата" , ТекущаяДата());

	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
		+ "Існують НЕ проведені звіти з продажу:" + Символы.ПС;

		Выборка = Результат.Выбрать();

		Пока Выборка.Следующий() Цикл

			ОписаниеОшибки = ОписаниеОшибки + "- " + Выборка.Представление + Символы.ПС;

		КонецЦикла;

	КонецЕсли;

	Возврат Результат.Пустой();

КонецФункции

//	LNK 10.01.2017 16:03:42
Функция КонтрольнаяСуммаКассовогоДня(КассовыйДень, УчитыватьПогашениеСертификатов = Истина)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(ВнешниеИсточникиСобытия.ТекстЗапросаОбщиеПродажи());
	Запрос.УстановитьПараметр("КассовыйДень", КассовыйДень);
	Запрос.УстановитьПараметр("УчитыватьПогашениеСертификатов", УчитыватьПогашениеСертификатов);

	СуммаДокумента = Запрос.Выполнить().Выгрузить().Итог("Сумма");

	Возврат СуммаДокумента;

КонецФункции

//	LNK 22.03.2017 14:56:27
Функция КонтрольнаяСуммаКассовогоДняКасса(КассовыйДень)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(ВнешниеИсточникиСобытия.ТекстЗапросаОбщиеПродажиКасса());
	Запрос.УстановитьПараметр("КассовыйДень", КассовыйДень);

	Результаты = Запрос.ВыполнитьПакет();
	СуммаДокумента = Результаты[3].Выгрузить().Итог("Сумма");

	Возврат СуммаДокумента;

КонецФункции // КонтрольнаяСуммаКассовогоДняКасса()

//	LNK 11.01.2018 13:06:55
Функция ПроверитьВозможностьОткрытияКассовогоДня(СтруктураДня, Отказ, ОписаниеОшибки)	Экспорт

//	Проверка проводится только для нового документа - ссылка ещё не существует!

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК КассовыйДень,
	|	ТаблицаДокумента.НачалоКассовогоДня КАК НачалоКассовогоДня,
	|	""Открыт «#CASHDAY#» (начало дня '#STARTDAY#')"" КАК ТекстПроблемы
	|ИЗ
	|	Документ.КассовыйДень КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Магазин = &Магазин
	|	И ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.СтатусКассовогоДня = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|	И ТаблицаДокумента.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&НачалоКассовогоДня, ДЕНЬ), МЕСЯЦ, -1) И КОНЕЦПЕРИОДА(&НачалоКассовогоДня, ДЕНЬ)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.НачалоКассовогоДня,
	|	""уже есть «#CASHDAY#», определяющий день '#CURDAY#' (начало дня '#STARTDAY#')""
	|ИЗ
	|	Документ.КассовыйДень КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Магазин = &Магазин
	|	И ТаблицаДокумента.Проведен
	|			И ТаблицаДокумента.СтатусКассовогоДня = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Закрыта)
	|	И НАЧАЛОПЕРИОДА(ТаблицаДокумента.НачалоКассовогоДня, ДЕНЬ) = НАЧАЛОПЕРИОДА(&НачалоКассовогоДня, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоКассовогоДня УБЫВ"
	);
	Запрос.УстановитьПараметр("Магазин", СтруктураДня.Магазин);
	Запрос.УстановитьПараметр("НачалоКассовогоДня", СтруктураДня.НачалоКассовогоДня);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		Отказ = Истина;
		ТекстПроблемы  = СтрЗаменить(Выборка.ТекстПроблемы, "#CASHDAY#" , Выборка.КассовыйДень);
		ТекстПроблемы  = СтрЗаменить(ТекстПроблемы        , "#CURDAY#"  , Формат(СтруктураДня.НачалоКассовогоДня, "ДФ=dd.MM.yyyy"));
		ТекстПроблемы  = СтрЗаменить(ТекстПроблемы        , "#STARTDAY#", Выборка.НачалоКассовогоДня);

		ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС) + ТекстПроблемы;

	КонецЦикла;

	Возврат НЕ Отказ;

КонецФункции

Процедура ПолучитьОшибкиОбъектаКассовыйДень(КассовыйДеньОбъект, ДанныеКассовогоДня, ТекстСистемнойОшибки)

	Если КассовыйДеньОбъект.ДополнительныеСвойства.Свойство("СписокОшибок") И ТипЗнч(КассовыйДеньОбъект.ДополнительныеСвойства.СписокОшибок) = Тип("Массив") Тогда

		ЛокальноеСообщение = "";

		Для каждого СообщениеОбъекта Из КассовыйДеньОбъект.ДополнительныеСвойства.СписокОшибок Цикл

			ЛокальноеСообщение = ЛокальноеСообщение + СообщениеОбъекта + Символы.ПС;

		КонецЦикла;

		ЛокальноеСообщение = ЛокальноеСообщение + ?(ПустаяСтрока(ЛокальноеСообщение), "", Символы.ПС)
		+ СокрЛП(ТекстСистемнойОшибки);

	Иначе

		ЛокальноеСообщение = ТекстСистемнойОшибки;

	КонецЕсли;

	ДанныеКассовогоДня.Ошибка	 = Истина;
	ДанныеКассовогоДня.Сообщение = СтрЗаменить(ДанныеКассовогоДня.Сообщение, "%ДополнительноеОписание%", ЛокальноеСообщение);

КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПРОВЕРКИ СОСТОЯНИЯ КАССОВОЙ СМЕНЫ

#Область РаботаСДокументамиКассоваяСмена

// Функция получает открытую кассовую смену по Кассе ККМ в заданный период.
// Используется для контроля пересечения кассовых смен.
// За один период может одновременно существовать только одна кассовая смена.
//
Функция ПолучитьОткрытуюКассовуюСмену(КассаККМ, КассоваяСмена = Неопределено, НачалоКассовойСмены, ОкончаниеКассовойСмены) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.НачалоКассовойСмены <= &НачалоКассовойСмены
	|	И ВЫБОР
	|			КОГДА КассоваяСмена.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены >= &НачалоКассовойСмены
	|		КОНЕЦ
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|	И КассоваяСмена.Ссылка <> &КассоваяСмена
	|	И КассоваяСмена.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	&ОкончаниеКассовойСмены <> ДАТАВРЕМЯ(1, 1, 1)
	|	И КассоваяСмена.НачалоКассовойСмены <= &ОкончаниеКассовойСмены
	|	И ВЫБОР
	|			КОГДА КассоваяСмена.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены >= &ОкончаниеКассовойСмены
	|		КОНЕЦ
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|	И КассоваяСмена.Ссылка <> &КассоваяСмена
	|	И КассоваяСмена.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	&ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|	И КассоваяСмена.НачалоКассовойСмены >= &НачалоКассовойСмены
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|	И КассоваяСмена.Ссылка <> &КассоваяСмена
	|	И КассоваяСмена.Проведен"
	);
	
	Запрос.УстановитьПараметр("КассаККМ",               КассаККМ);
	Запрос.УстановитьПараметр("НачалоКассовойСмены",    НачалоКассовойСмены);
	Запрос.УстановитьПараметр("ОкончаниеКассовойСмены", ОкончаниеКассовойСмены);
	Запрос.УстановитьПараметр("КассоваяСмена",          КассоваяСмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьОткрытуюКассовуюСмену()

// Функция возвращает пустую структуру состояния кассовой смены.
//
Функция ПолучитьСтруктуруОписанияКассовойСмены()
	
	СостояниеКассовойСмены = Новый Структура;
	СостояниеКассовойСмены.Вставить("ДатаИзмененияСтатуса");
	СостояниеКассовойСмены.Вставить("СтатусКассовойСмены");
	СостояниеКассовойСмены.Вставить("КассоваяСмена");
	СостояниеКассовойСмены.Вставить("НаличностьВКассе");
	СостояниеКассовойСмены.Вставить("НомерКассовойСмены");
	СостояниеКассовойСмены.Вставить("СменаОткрыта", Ложь);
	
	// Описание реквизитов кассовой смены
	СостояниеКассовойСмены.Вставить("КассаККМ");
	СостояниеКассовойСмены.Вставить("Организация");
	СостояниеКассовойСмены.Вставить("Кассир");
	СостояниеКассовойСмены.Вставить("Магазин");
	
	Возврат СостояниеКассовойСмены;
	
КонецФункции // ПолучитьСтруктуруОписанияКассовойСмены()

// Функция возвращает структуру, характеризующую состояние последней кассовой смены по кассе ККМ.
//
Функция ПолучитьСостояниеКассовойСмены(КассаККМ) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КассоваяСмена.Номер               КАК НомерКассовойСмены,
	|	КассоваяСмена.Ссылка              КАК КассоваяСмена,
	|	КассоваяСмена.СтатусКассовойСмены КАК СтатусКассовойСмены,
	|	
	|	КассоваяСмена.КассаККМ             КАК КассаККМ,
	|	КассоваяСмена.Организация          КАК Организация,
	|	КассоваяСмена.Магазин              КАК Магазин,
	|	КассоваяСмена.Кассир               КАК Кассир,
	|	
	|	ВЫБОР
	|		КОГДА КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СменаОткрыта,
	|	
	|	ВЫБОР
	|		КОГДА КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА КассоваяСмена.НачалоКассовойСмены
	|		ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|	КОНЕЦ КАК ДатаИзмененияСтатуса,
	|	
	|	ЕСТЬNULL(ДенежныеСредстваККМОстатки.СуммаОстаток, 0) КАК НаличностьВКассе
	|	
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваККМ.Остатки(, КассаККМ = &КассаККМ) КАК ДенежныеСредстваККМОстатки
	|		ПО КассоваяСмена.КассаККМ = ДенежныеСредстваККМОстатки.КассаККМ
	|	
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассоваяСмена.Дата УБЫВ,
	|	КассоваяСмена УБЫВ"
	);
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);

	Выборка = Запрос.Выполнить().Выбрать();

	ОписаниеКассовойСмены = ПолучитьСтруктуруОписанияКассовойСмены();

	Если Выборка.Следующий() Тогда

		ЗаполнитьЗначенияСвойств(ОписаниеКассовойСмены, Выборка);

	Иначе

		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ДенежныеСредстваККМОстатки.СуммаОстаток, 0) КАК НаличностьВКассе
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваККМ.Остатки(, КассаККМ = &КассаККМ) КАК ДенежныеСредстваККМОстатки
		|		ПО (ДенежныеСредстваККМОстатки.КассаККМ = КассыККМ.Ссылка)
		|ГДЕ
		|	КассыККМ.Ссылка = &КассаККМ"
		);
		Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();

		ОписаниеКассовойСмены.НаличностьВКассе = Выборка.НаличностьВКассе;
		
	КонецЕсли;
	
	Возврат ОписаниеКассовойСмены;
	
КонецФункции

// Функция выполняет открытие кассовой смены.
//
Функция ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки = "") Экспорт

	Перем СписокОшибокЗаполнения;	//	LNK 18.09.2018 09:16:22
	
	Результат = Истина;
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	ДатаОткрытияКассовойСмены = ТекущаяДата();
	
	Если СтруктураСостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		
	//	Если смена открыта, то с момента открытия должно пройти не больше чем 24 часа.
		Если ДатаОткрытияКассовойСмены - СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса < 86400 Тогда
			
		//	Все в порядке
			
		ИначеЕсли НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда	//	оставим лазейку для администратора
			
			Результат = Ложь;
			// Вероятно, что смена была не закрыта.
			ОписаниеОшибки = "З моменту відкриття касової зміни вже минуло понад 24 години.";
			
		КонецЕсли;
		
	Иначе

		// Смена закрыта. Откроем новую кассовую смену.

		НоваяКассоваяСмена = Документы.КассоваяСмена.СоздатьДокумент();
		НоваяКассоваяСмена.Заполнить(Новый Структура("КассаККМ", КассаККМ));
		
		НоваяКассоваяСмена.Дата                   = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.СтатусКассовойСмены    = Перечисления.СтатусыКассовойСмены.Открыта;
		НоваяКассоваяСмена.НачалоКассовойСмены    = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.ОкончаниеКассовойСмены = '00010101';
		НоваяКассоваяСмена.Кассир                 = Пользователи.ТекущийПользователь();

	//	LNK 18.09.2016 12:30:54 - реквизит "КассовыйДень" является обязательным для документа "КассоваяСмена"!
		НоваяКассоваяСмена.КассовыйДень = РозничныеПродажиСервер.ПолучитьСостояниеКассовогоДня(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КассаККМ, "Магазин"), Истина).КассовыйДень;

		Если НоваяКассоваяСмена.КассовыйДень.Пустая() Тогда

			Результат = Ложь;
			ОписаниеОшибки = "Ймовірно, не відкрито касового дня. Необхідно звернутися до адміністратора магазину для вирішення цієї проблеми.";

		Иначе

			Если НоваяКассоваяСмена.ПроверитьЗаполнение() Тогда

				НоваяКассоваяСмена.Записать(РежимЗаписиДокумента.Проведение);

			Иначе

				Результат = Ложь;

				Если НоваяКассоваяСмена.ДополнительныеСвойства.Свойство("СписокОшибокЗаполнения", СписокОшибокЗаполнения) И ТипЗнч(СписокОшибокЗаполнения) = Тип("Массив") Тогда

					ОписаниеОшибки = "";

					Для каждого ТекстОшибки Из СписокОшибокЗаполнения Цикл

						ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС) + ТекстОшибки;

					КонецЦикла;
				
				Иначе

					ОписаниеОшибки = "Перевірте налаштування каси ККМ.";

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОткрытьКассовуюСмену()

// Процедура выполняет закрытие кассовой смены.
//
Функция ЗакрытьКассовуюСмену(КассаККМ, ОписаниеОшибки = "", СсылкаНаОтчет = Неопределено) Экспорт
	
	Результат = Истина;
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	Если СтруктураСостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		
		КассоваяСменаОбъект = СтруктураСостояниеКассовойСмены.КассоваяСмена.ПолучитьОбъект();
		КассоваяСменаОбъект.Дата                   = ТекущаяДата();
		КассоваяСменаОбъект.СтатусКассовойСмены    = Перечисления.СтатусыКассовойСмены.Закрыта;
		КассоваяСменаОбъект.ОкончаниеКассовойСмены = КассоваяСменаОбъект.Дата;

		Попытка

			КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Проведение);

			Если НЕ СсылкаНаОтчет = Неопределено Тогда

				ОбъектОтчет = СсылкаНаОтчет.ПолучитьОбъект();
				ОбъектОтчет.КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
				ОбъектОтчет.Записать(РежимЗаписиДокумента.Запись);

			КонецЕсли;

		Исключение

			Результат = Ложь;

			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки =
			"При закритті касової зміни сталася помилка.
            |Додатковий опис:
            |" + ИнформацияОбОшибке.Описание + ":> " + ИнформацияОбОшибке.Причина.Описание;
		КонецПопытки;

	Иначе

		// Смена не открыта.

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция проверяет состояние кассовой смены на дату. Если смена не открыта - возвращается описание ошибки.
//
Функция СменаОткрыта(КассоваяСмена, Дата, ОписаниеОшибки = "") Экспорт
	
	СменаОткрыта = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КассоваяСмена.СтатусКассовойСмены    КАК СтатусКассовойСмены,
	|	КассоваяСмена.НачалоКассовойСмены    КАК НачалоКассовойСмены,
	|	КассоваяСмена.ОкончаниеКассовойСмены КАК ОкончаниеКассовойСмены
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И КассоваяСмена.Ссылка = &КассоваяСмена";
	
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
			
			// Если смена открыта, то с момента открытия должно пройти не больше чем 24 часа.
			Если (Дата - Выборка.НачалоКассовойСмены < 86400) ИЛИ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() = Истина Тогда
				
				СменаОткрыта = Истина;
				
			Иначе
				
				ОписаниеОшибки = "З моменту відкриття касової зміни вже минуло понад 24 години.";
				СменаОткрыта = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.СтатусКассовойСмены) Тогда
			
			Если Выборка.ОкончаниеКассовойСмены >= Дата И Выборка.НачалоКассовойСмены <= Дата Тогда
				
				СменаОткрыта = Истина;
				
			Иначе
				
				ОписаниеОшибки = "Касову зміну закрито.";
				СменаОткрыта = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ОписаниеОшибки = "Касова зміна не відкрита.";
		СменаОткрыта = Ложь;
		
	КонецЕсли;
	
	Возврат СменаОткрыта;
	
КонецФункции

//	LNK 12.01.2018 10:47:20
Функция ПроверитьВозможностьОткрытияКассовойСмены(КассаККМ, ОписаниеОшибки = "") Экспорт

	Результат = Истина;

	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	ДатаОткрытияКассовойСмены = ТекущаяДата();

	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда

		Результат = Ложь;
		ОписаниеОшибки = "Не обрано поточну касу ККМ. Подальша робота неможлива!";

	ИначеЕсли СтруктураСостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		
	//	Если смена открыта, то с момента открытия должно пройти не больше чем 24 часа.
		Если НЕ (ДатаОткрытияКассовойСмены - СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса < 86400) Тогда

			Результат = НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим();
		//	Вероятно, что смена была не закрыта.
			ОписаниеОшибки = "З моменту відкриття касової зміни вже минуло понад 24 години.";

		КонецЕсли;
		
	Иначе

	//	Смена закрыта - как бы можно открывать... Проверим кассовый день

		СостояниеДня = РозничныеПродажиСервер.ПолучитьСостояниеКассовогоДня(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КассаККМ, "Магазин"), Истина);

		Если НЕ ЗначениеЗаполнено(СостояниеДня.КассовыйДень) Тогда

			Результат = Ложь;
			ОписаниеОшибки = "Ймовірно, не відкрито касового дня. Необхідно звернутися до адміністратора магазину щодо вирішення цієї проблеми.";

		Иначе

			Если НЕ НачалоДня(СостояниеДня.НачалоКассовогоДня) = НачалоДня(ДатаОткрытияКассовойСмены) Тогда

				Результат = Ложь;
				ОписаниеОшибки = "Дата початку відкритого касового дня відрізняється від поточної дати. Необхідно звернутися до адміністратора магазину для вирішення цієї проблеми.";

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

// +HVOYA. 2016-09-07 Юлия_Ж
// Процедура устанавливает в строках табличной части.
Функция УстановитьКлючВСтрокахТабличнойЧасти(Объект, ИмяТабличнойЧасти, РеквизитМаксимальныйКодСтроки = "МаксимальныйКодСтроки") Экспорт

	СтрокиБезКлюча = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("КодСтроки", 0));

	Если СтрокиБезКлюча.Количество() > 0 Тогда
		
		ТекущийКод = Объект[РеквизитМаксимальныйКодСтроки];
		
		Для Каждого СтрокаТовары Из СтрокиБезКлюча Цикл
			
			ТекущийКод = ТекущийКод + 1;
			СтрокаТовары.КодСтроки = ТекущийКод;
			
		КонецЦикла;
		
		Объект[РеквизитМаксимальныйКодСтроки] = ТекущийКод;
		
	КонецЕсли;

КонецФункции
// -HVOYA. 2016-09-07 Юлия_Ж

//	LNK 26.04.2017 15:21:20
Функция РеквизитыМагазина(Магазин, ДатаСреза = '00010101')	Экспорт

	Возврат Справочники.Магазины.РеквизитыМагазина(Магазин, ДатаСреза);

КонецФункции // РеквизитыМагазина()

//	LNK 20.09.2023 09:19:58
Функция РеквизитыФонда(Фонд, ДатаСреза = '00010101')	Экспорт

	Возврат Справочники.Фонды.РеквизитыФонда(Фонд, ДатаСреза);

КонецФункции

//	LNK 26.04.2017 10:55:08
Функция РазрешитьПродажуУслуг(Магазин, ДатаСреза = '00010101')	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПолитикаМагазина.РазрешитьПродажуУслуг, Ведущая.РазрешитьПродажуУслуг) КАК РазрешитьПродажуУслуг,
	|	ВЫБОР
	|		КОГДА ПолитикаМагазина.Магазин = &Магазин
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлючПорядка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК РазрешитьПродажуУслуг) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаМагазинов.СрезПоследних(
	|				&ДатаСреза,
	|				Магазин = &Магазин
	|					ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК ПолитикаМагазина
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка УБЫВ"
	);
	Запрос.УстановитьПараметр("Магазин"  , Магазин);
	Запрос.УстановитьПараметр("ДатаСреза", ?(ДатаСреза = '00010101', ТекущаяДатаСеанса(), ДатаСреза));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка.РазрешитьПродажуУслуг;

КонецФункции // РазрешитьПродажуУслуг()

//	LNK 29.05.2019 13:24:47
Функция ИспользоватьВнешнююОбработкуРМК(Магазин)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПолитикаМагазина.ИспользоватьВнешнююОбработкуРМК, Ведущая.ИспользоватьВнешнююОбработкуРМК) КАК ИспользоватьВнешнююОбработкуРМК,
	|	ВЫБОР
	|		КОГДА ПолитикаМагазина.Магазин = &Магазин
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлючПорядка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЛОЖЬ КАК ИспользоватьВнешнююОбработкуРМК) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаМагазинов.СрезПоследних(
	|				,
	|				Магазин = &Магазин
	|					ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК ПолитикаМагазина
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка УБЫВ"
	);
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка.ИспользоватьВнешнююОбработкуРМК;

КонецФункции // ИспользоватьВнешнююОбработкуРМК()

//	LNK 05.01.2018 08:36:31
Функция РазрешитьВерификациюПокупателей(Магазин, ДатаСреза = '00010101')	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПолитикаМагазина.РазрешитьВерификациюПокупателей, Ведущая.РазрешитьВерификациюПокупателей) КАК РазрешитьВерификациюПокупателей,
	|	ВЫБОР
	|		КОГДА ПолитикаМагазина.Магазин = &Магазин
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлючПорядка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЛОЖЬ КАК РазрешитьВерификациюПокупателей) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаМагазинов.СрезПоследних(
	|				&ДатаСреза,
	|				Магазин = &Магазин
	|					ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК ПолитикаМагазина
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка УБЫВ"
	);
	Запрос.УстановитьПараметр("Магазин"  , Магазин);
	Запрос.УстановитьПараметр("ДатаСреза", ?(ДатаСреза = '00010101', ТекущаяДатаСеанса(), ДатаСреза));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка.РазрешитьВерификациюПокупателей;

КонецФункции

//	LNK 07.02.2022 06:57:41
Функция РазрешитьОтказВерификацииКонтрагента(Магазин, ДатаСреза = '00010101')	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПолитикаМагазина.РазрешитьОтказВерификацииКонтрагента, Ведущая.РазрешитьОтказВерификацииКонтрагента) КАК РазрешитьОтказВерификацииКонтрагента,
	|	ВЫБОР
	|		КОГДА ПолитикаМагазина.Магазин = &Магазин
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлючПорядка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК РазрешитьОтказВерификацииКонтрагента) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаМагазинов.СрезПоследних(
	|				&ДатаСреза,
	|				Магазин = &Магазин
	|					ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК ПолитикаМагазина
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка УБЫВ"
	);
	Запрос.УстановитьПараметр("Магазин"  , Магазин);
	Запрос.УстановитьПараметр("ДатаСреза", ?(ДатаСреза = '00010101', ТекущаяДатаСеанса(), ДатаСреза));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка.РазрешитьОтказВерификацииКонтрагента;

КонецФункции

//	LNK 21.09.2023 05:42:27
Функция ЗапретитьОбновлениеБонусныхБалловРМК(Магазин, ДатаСреза = '00010101')	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПолитикаМагазина.ЗапретитьОбновлениеБонусныхБалловРМК, Ведущая.ЗапретитьОбновлениеБонусныхБалловРМК) КАК ЗапретитьОбновлениеБонусныхБалловРМК,
	|	ВЫБОР
	|		КОГДА ПолитикаМагазина.Магазин = &Магазин
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлючПорядка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЛОЖЬ КАК ЗапретитьОбновлениеБонусныхБалловРМК) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаМагазинов.СрезПоследних(
	|				&ДатаСреза,
	|				Магазин = &Магазин
	|					ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК ПолитикаМагазина
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка УБЫВ"
	);
	Запрос.УстановитьПараметр("Магазин"  , Магазин);
	Запрос.УстановитьПараметр("ДатаСреза", ?(ДатаСреза = '00010101', ТекущаяДатаСеанса(), ДатаСреза));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка.ЗапретитьОбновлениеБонусныхБалловРМК;

КонецФункции

//	LNK 28.02.2024 07:33:38
Функция КонтрольОрганизацииПодарочногоСертификата(Магазин, ДатаСреза = '00010101')	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПолитикаМагазина.КонтрольОрганизацииПодарочногоСертификата, Ведущая.КонтрольОрганизацииПодарочногоСертификата) КАК КонтрольОрганизацииПодарочногоСертификата,
	|	ВЫБОР
	|		КОГДА ПолитикаМагазина.Магазин = &Магазин
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлючПорядка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЛОЖЬ КАК КонтрольОрганизацииПодарочногоСертификата) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаМагазинов.СрезПоследних(
	|				&ДатаСреза,
	|				Магазин = &Магазин
	|					ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК ПолитикаМагазина
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка УБЫВ"
	);
	Запрос.УстановитьПараметр("Магазин"  , Магазин);
	Запрос.УстановитьПараметр("ДатаСреза", ?(ДатаСреза = '00010101', ТекущаяДатаСеанса(), ДатаСреза));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка.КонтрольОрганизацииПодарочногоСертификата;

КонецФункции

//	LNK 07.11.2017 11:45:10
Функция БлокироватьИзменениеСуммыОплаты(Магазин, ДатаСреза = '00010101')	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПолитикаМагазина.БлокироватьИзменениеСуммыОплаты, Ведущая.БлокироватьИзменениеСуммыОплаты) КАК БлокироватьИзменениеСуммыОплаты,
	|	ВЫБОР
	|		КОГДА ПолитикаМагазина.Магазин = &Магазин
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлючПорядка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК БлокироватьИзменениеСуммыОплаты) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаМагазинов.СрезПоследних(
	|				&ДатаСреза,
	|				Магазин = &Магазин
	|					ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК ПолитикаМагазина
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка УБЫВ"
	);
	Запрос.УстановитьПараметр("Магазин"  , Магазин);
	Запрос.УстановитьПараметр("ДатаСреза", ?(ДатаСреза = '00010101', ТекущаяДатаСеанса(), ДатаСреза));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка.БлокироватьИзменениеСуммыОплаты;

КонецФункции // БлокироватьИзменениеСуммыОплаты()

//	LNK 13.09.2019 14:23:58
Функция РазрешитьОкруглениеВЧекеККМ(Магазин, ДатаСреза = '00010101')	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПолитикаМагазина.РазрешитьОкруглениеВЧекеККМ, Ведущая.РазрешитьОкруглениеВЧекеККМ) КАК РазрешитьОкруглениеВЧекеККМ,
	|	ВЫБОР
	|		КОГДА ПолитикаМагазина.Магазин = &Магазин
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлючПорядка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЛОЖЬ КАК РазрешитьОкруглениеВЧекеККМ) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаМагазинов.СрезПоследних(
	|				&ДатаСреза,
	|				Магазин = &Магазин
	|					ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК ПолитикаМагазина
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка УБЫВ"
	);
	Запрос.УстановитьПараметр("Магазин"  , Магазин);
	Запрос.УстановитьПараметр("ДатаСреза", ?(ДатаСреза = '00010101', ТекущаяДатаСеанса(), ДатаСреза));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка.РазрешитьОкруглениеВЧекеККМ;

КонецФункции

//	LNK 22.07.2022 06:04:43
Функция ОграничитьОтгрузкуРеализованногоЗаказаПокупателя(Магазин, ДатаСреза = '00010101')	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПолитикаМагазина.ОграничитьОтгрузкуРеализованногоЗаказаПокупателя, Ведущая.ОграничитьОтгрузкуРеализованногоЗаказаПокупателя) КАК ОграничитьОтгрузкуРеализованногоЗаказаПокупателя,
	|	ВЫБОР
	|		КОГДА ПолитикаМагазина.Магазин = &Магазин
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлючПорядка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЛОЖЬ КАК ОграничитьОтгрузкуРеализованногоЗаказаПокупателя) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаМагазинов.СрезПоследних(
	|				&ДатаСреза,
	|				Магазин = &Магазин
	|					ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК ПолитикаМагазина
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка УБЫВ"
	);
	Запрос.УстановитьПараметр("Магазин"  , Магазин);
	Запрос.УстановитьПараметр("ДатаСреза", ?(ДатаСреза = '00010101', ТекущаяДатаСеанса(), ДатаСреза));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка.ОграничитьОтгрузкуРеализованногоЗаказаПокупателя;

КонецФункции

//	LNK 11.08.2022 05:45:48
Функция ОтключитьОграниченияПериодаПоКассовомуДню(Магазин, ДатаСреза = '00010101')	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПолитикаМагазина.ОтключитьОграниченияПериодаПоКассовомуДню, Ведущая.ОтключитьОграниченияПериодаПоКассовомуДню) КАК ОтключитьОграниченияПериодаПоКассовомуДню,
	|	ВЫБОР
	|		КОГДА ПолитикаМагазина.Магазин = &Магазин
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлючПорядка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЛОЖЬ КАК ОтключитьОграниченияПериодаПоКассовомуДню) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаМагазинов.СрезПоследних(
	|				&ДатаСреза,
	|				Магазин = &Магазин
	|					ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК ПолитикаМагазина
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка УБЫВ"
	);
	Запрос.УстановитьПараметр("Магазин"  , Магазин);
	Запрос.УстановитьПараметр("ДатаСреза", ?(ДатаСреза = '00010101', ТекущаяДатаСеанса(), ДатаСреза));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка.ОтключитьОграниченияПериодаПоКассовомуДню;

КонецФункции

#Область Специфика_РМК_на_стороне_сервера

//	LNK 01.08.2019 11:44:04
Функция ПолучитьДанныеКарты(ДокументСсылка, ВладелецСсылка, КартаСсылка, Магазин, ТоварыДляОплаты, ЗаказПокупателя, ИспользоватьПрограммуЛояльности = Ложь)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

//	Получаем все данные отдельными запросами - временные таблицы здесь НЕ использовать!

	ДанныеКарты = Новый Структура(
		"ВидДисконтнойКарты, ВладелецКарты, ФизЛицо,
		|ЗаказПокупателя,
		|КодКарты, НомерТелефона,
		|СуммаПокупок, СуммаПокупокОбычная, ПроцентСкидки,
		|СуммаБонусныхБаллов, СуммаБонусныхБалловВРезерве"
		, Справочники.ВидыДисконтныхКарт.ПустаяСсылка()
		, Справочники.Контрагенты.ПустаяСсылка()
		, Справочники.ФизическиеЛица.ПустаяСсылка()
		, Неопределено	//	может быть Счёт или Заказ
		, "", ""
		, 0, 0, 0
		, 0, 0);

	Если ЗначениеЗаполнено(ВладелецСсылка) ИЛИ ЗначениеЗаполнено(КартаСсылка) Тогда

		Если НЕ ОбщегоНазначенияКлиентСервер.СсылкаПустая(КартаСсылка) Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЕСТЬNULL(ТаблицаДисконта.ВидДисконтнойКарты, Ведущая.ВидДисконтнойКарты) КАК ВидДисконтнойКарты,
			|	ЕСТЬNULL(ТаблицаДисконта.ВладелецКарты, Ведущая.ВладелецКарты) КАК ВладелецКарты,
			|	ЕСТЬNULL(ТаблицаДисконта.КодКарты, Ведущая.КодКарты) КАК КодКарты,
			|	ВЫБОР
			|		КОГДА ТаблицаДисконта.ВладелецКарты ЕСТЬ NULL
			|			ТОГДА Ведущая.ФизЛицо
			|		КОГДА ТаблицаДисконта.ВладелецКарты ССЫЛКА Справочник.ФизическиеЛица
			|			ТОГДА ТаблицаДисконта.ВладелецКарты
			|		ИНАЧЕ ТаблицаДисконта.ВладелецКарты.ФизЛицо
			|	КОНЕЦ КАК ФизЛицо,
			|	ЕСТЬNULL(ТаблицаКонтакты.НомерТелефона, """") КАК НомерТелефона
			|ИЗ
			|	(ВЫБРАТЬ
			|		"""" КАК КодКарты,
			|		ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК ВладелецКарты,
			|		ЗНАЧЕНИЕ(Справочник.ВидыДисконтныхКарт.ПустаяСсылка) КАК ВидДисконтнойКарты,
			|		ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизЛицо) КАК Ведущая
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ТаблицаДисконта
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтакты
			|			ПО (ТаблицаДисконта.ВладелецКарты = ТаблицаКонтакты.Ссылка
			|					И ТаблицаКонтакты.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
			|		ПО (ТаблицаДисконта.Ссылка = &КартаСсылка)"
			);
			Запрос.УстановитьПараметр("КартаСсылка", КартаСсылка);

			ДанныеВыборка = Запрос.Выполнить().Выбрать();
			ДанныеВыборка.Следующий();

			ЗаполнитьЗначенияСвойств(ДанныеКарты, ДанныеВыборка);

		КонецЕсли;

		Если ЗначениеЗаполнено(ВладелецСсылка) И НЕ ЗначениеЗаполнено(ДанныеКарты.ВладелецКарты) Тогда	//	LNK 18.07.2019 11:44:24
			
			ДанныеКарты.ВладелецКарты = ВладелецСсылка;

			Если ТипЗнч(ДанныеКарты.ВладелецКарты) = Тип("СправочникСсылка.ФизическиеЛица") Тогда

				ДанныеКарты.ФизЛицо = ДанныеКарты.ВладелецКарты;

			Иначе

				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ТаблицаСправочник.ФизЛицо КАК ФизЛицо
				|ИЗ
				|	Справочник.Контрагенты КАК ТаблицаСправочник
				|ГДЕ
				|	ТаблицаСправочник.Ссылка = &ВладелецКарты
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ТаблицаСправочник.ФизЛицо
				|ИЗ
				|	Справочник.Пользователи КАК ТаблицаСправочник
				|ГДЕ
				|	ТаблицаСправочник.Ссылка = &ВладелецКарты"
				);
				Запрос.УстановитьПараметр("ВладелецКарты", ДанныеКарты.ВладелецКарты);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Если НЕ РезультатЗапроса.Пустой() Тогда

					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					ДанныеКарты.ФизЛицо = Выборка.ФизЛицо;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	//	---------------------------------------------------------------------------------------

	//	Сумму накоплений покупателя получаем в любом случае, так как в CRM такой информации НЕТ..
	//	что удивительно.. но концепция изменилась!
		ДанныеКарты.СуммаПокупок = ПолучитьСуммуНакоплений(?(ЗначениеЗаполнено(ДанныеКарты.ВладелецКарты), ДанныеКарты.ВладелецКарты, ВладелецСсылка), ИспользоватьПрограммуЛояльности);
		ДанныеКарты.СуммаПокупокОбычная = ПолучитьСуммуНакоплений(?(ЗначениеЗаполнено(ДанныеКарты.ВладелецКарты), ДанныеКарты.ВладелецКарты, ВладелецСсылка),Ложь);

	//	---------------------------------------------------------------------------------------
		Если ДанныеКарты.СуммаПокупок > 0 Тогда	//	LNK 10.02.2020 11:26:03

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЕСТЬNULL(МАКСИМУМ(ТаблицаСкидки.ЗначениеСкидкиНаценки), 0) КАК ПроцентСкидки
			|ИЗ
			|	Справочник.СкидкиНаценки КАК ТаблицаСкидки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК ТабличнаяЧасть
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК ТаблицаУсловия
			|			ПО ТабличнаяЧасть.УсловиеПредоставления = ТаблицаУсловия.Ссылка
			|		ПО ТаблицаСкидки.Ссылка = ТабличнаяЧасть.Ссылка
			|ГДЕ
			|	НЕ ТаблицаСкидки.ПометкаУдаления
			|	И ТаблицаСкидки.ДисконтныйКлуб = ИСТИНА
			|	И ТаблицаСкидки.Родитель = ЗНАЧЕНИЕ(Справочник.СкидкиНаценки.ДисконтныеКарты)
			|	И ТаблицаУсловия.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж)
			|	И ТаблицаУсловия.ЗначениеУсловияОграничения <= &СуммаПокупок"
			);
			Запрос.УстановитьПараметр("СуммаПокупок", ДанныеКарты.СуммаПокупок);

			ДанныеВыборка = Запрос.Выполнить().Выбрать();
			ДанныеВыборка.Следующий();

			ДанныеКарты.ПроцентСкидки = ДанныеВыборка.ПроцентСкидки;

		КонецЕсли;

		Если ЗначениеЗаполнено(ДанныеКарты.ВладелецКарты) И БонусныеБаллыПовтИсп.ИспользоватьБонуснуюСистему() Тогда	//	на текущую дату

			ПараметрыЗапроса = Новый Структура(
				"Магазин, ДокументСсылка, ТоварыДляОплаты, ПрограммаЛояльности, ТипыБонусов, ЗаказПокупателя, ТолькоТекущийОстаток"
				, Магазин
				, ДокументСсылка
				, ТоварыДляОплаты
				,
				, ОбщегоНазначенияКлиентСервер.AAD(Перечисления.ТипыБонусов.Привлечение, Перечисления.ТипыБонусов.Органический)
				, ЗаказПокупателя
				, Истина
			);

			БонусныеБаллыСервер.BPS_АвторизацияКонтрагента(ДанныеКарты.ВладелецКарты, ПараметрыЗапроса);

			ИнформацияОСчете = БонусныеБаллыСервер.BPS_ПолучитьОстатокБонусныхБаллов(ДанныеКарты.ВладелецКарты, ПараметрыЗапроса);
			ДанныеКарты.СуммаБонусныхБаллов			= ИнформацияОСчете.СуммаБонусныхБаллов;
			ДанныеКарты.СуммаБонусныхБалловВРезерве	= ИнформацияОСчете.СуммаБонусныхБалловВРезерве;

		КонецЕсли;

	КонецЕсли;

	Возврат ДанныеКарты;

КонецФункции

//	LNK 11.09.2019 10:42:19
Функция ПолучитьСуммуНакоплений(ВладелецКарты, ВидКарты)	Экспорт

	СуммаПокупок = 0;

	Если ЗначениеЗаполнено(ВладелецКарты) Тогда

	//	ВидКарты - истина значит карта сотрудника
		Если ВидКарты = Истина Тогда 
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СУММА(ЕСТЬNULL(ПродажиПоКартам.СуммаСкидкиОборот, Ведущая.СуммаПокупок)) КАК СуммаПокупок
			|ИЗ
			|	(ВЫБРАТЬ
			|		0 КАК СуммаПокупок) КАК Ведущая
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоДисконтнымКартамСкидка.ОстаткиИОбороты(
			|				НАЧАЛОПЕРИОДА(&ТекДата, МЕСЯЦ),
			|				КОНЕЦПЕРИОДА(&ТекДата, МЕСЯЦ),
			|				,
			|				,
			|				ВладелецДисконтнойКарты ССЫЛКА Справочник.Контрагенты
			|					И ВладелецДисконтнойКарты = &ВладелецКарты) КАК ПродажиПоКартам
			|		ПО (ИСТИНА)"
			);
			Запрос.УстановитьПараметр("ВладелецКарты", ВладелецКарты);
			Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());

			ДанныеВыборка = Запрос.Выполнить().Выбрать();
			ДанныеВыборка.Следующий();

			СуммаПокупок = ДанныеВыборка.СуммаПокупок;

		Иначе

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СУММА(ЕСТЬNULL(ПродажиПоКартам.СуммаОстаток, Ведущая.СуммаПокупок)) КАК СуммаПокупок
			|ИЗ
			|	(ВЫБРАТЬ
			|		0 КАК СуммаПокупок) КАК Ведущая
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(
			|				,
			|				ВладелецДисконтнойКарты ССЫЛКА Справочник.Контрагенты
			|					И ВладелецДисконтнойКарты = &ВладелецКарты) КАК ПродажиПоКартам
			|		ПО (ИСТИНА)"
			);
			Запрос.УстановитьПараметр("ВладелецКарты", ВладелецКарты);

			ДанныеВыборка = Запрос.Выполнить().Выбрать();
			ДанныеВыборка.Следующий();

			СуммаПокупок = ДанныеВыборка.СуммаПокупок;

		КонецЕсли;

	КонецЕсли;

	Возврат СуммаПокупок;

КонецФункции

//	LNK 19.01.2018 11:16:00
Функция ПолучитьНазначениеКассыККМ(КассаККМ)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТабличнаяЧасть.Значение, ЗНАЧЕНИЕ(Перечисление.НазначенияКассККМ.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.НазначенияКассККМ.ПустаяСсылка)
	|			ТОГДА Ведущая.Назначение
	|		ИНАЧЕ ТабличнаяЧасть.Значение
	|	КОНЕЦ КАК Назначение
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.НазначенияКассККМ.БезОграничений) КАК Назначение) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КассыККМ.ДополнительныеРеквизиты КАК ТабличнаяЧасть
	|		ПО (ТабличнаяЧасть.Ссылка = &КассаККМ
	|				И ТабличнаяЧасть.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.НазначениеКассыККМ))"
	);
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Назначение;

КонецФункции // ПолучитьНазначениеКассыККМ()

//	LNK 06.08.2018 10:26:15
Функция ПолучитьШтриховойКодТовара(Номенклатура, Упаковка)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
	|	И Штрихкоды.Владелец = &Номенклатура
	|	И Штрихкоды.Упаковка = &Упаковка"
	);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Упаковка"    , Упаковка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

			Возврат СокрЛП(Выборка.Штрихкод);

	Иначе	Возврат "";

	КонецЕсли;

КонецФункции // ПолучитьШтриховойКодТовара()

//	LNK 20.09.2018 15:37:27
Процедура ВыполнитьПогашениеКупонов(ДокументСсылка, СерийныеНомера)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаРегистра.СерийныйНомер КАК СерийныйНомер,
	|	ТаблицаРегистра.ЧекККМПродажи КАК ЧекККМПродажи,
	|	ТаблицаРегистра.ЧекККПИспользования КАК ЧекККПИспользования,
	|	ТаблицаРегистра.СкидкаНаценка КАК СкидкаНаценка,
	|	ТаблицаРегистра.Сумма КАК Сумма
	|ИЗ
	|	РегистрСведений.СерийныеНомераДляАкций КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.СерийныйНомер В(&СерийныеНомера)
	|	И НЕ ТаблицаРегистра.Использован"
	);
	Запрос.УстановитьПараметр("СерийныеНомера", СерийныеНомера);

	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		Выборка = Результат.Выбрать();

		Пока Выборка.Следующий() Цикл

			НаборЗаписей = РегистрыСведений.СерийныеНомераДляАкций.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СерийныйНомер.Установить(Выборка.СерийныйНомер);

			НаборЗаписей.Прочитать();

			Для каждого ЗаписьНабора Из НаборЗаписей Цикл

				ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);

				ЗаписьНабора.Использован = Истина;
				ЗаписьНабора.ЧекККПИспользования = ДокументСсылка;

			КонецЦикла;

			НаборЗаписей.Записать();

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	LNK 27.05.2019 09:36:10
Функция СписокКассККММагазина(Магазин)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСправочник.Ссылка КАК КассаККМ
	|ИЗ
	|	Справочник.КассыККМ КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Магазин = &Магазин"
	);
	Запрос.УстановитьПараметр("Магазин", Магазин);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КассаККМ");

КонецФункции // СписокКассМагазина()

//	LNK 01.11.2019 13:27:30
Функция ЭтоУзелИнтернетМагазина()	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	УчетнаяПолитика.ИнтернетМагазин КАК ИнтернетМагазин
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика.СрезПоследних КАК УчетнаяПолитика
	|ГДЕ
	|	УчетнаяПолитика.ИнтернетМагазин = &ТекущийМагазин"
	);
	Запрос.УстановитьПараметр("ТекущийМагазин", ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);

	Если НЕ Запрос.Выполнить().Пустой() Тогда

			Соответствует = Истина;

	Иначе	Соответствует = Ложь;

	КонецЕсли;

	Возврат Соответствует;

КонецФункции

//	LNK 02.04.2022 06:38:41
Функция ВсеПродажиБезНДС(ДатаСреза = '00010101')	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(УчетнаяПолитика.ВсеПродажиБезНДС, Ведущая.ВсеПродажиБезНДС) КАК ВсеПродажиБезНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЛОЖЬ КАК ВсеПродажиБезНДС) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних(&ДатаСреза, ) КАК УчетнаяПолитика
	|		ПО (ИСТИНА)"
	);
	Запрос.УстановитьПараметр("ДатаСреза", ?(ДатаСреза = '00010101', ТекущаяДата(), ДатаСреза));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка.ВсеПродажиБезНДС;

КонецФункции

//Сичкаренко 15.12.2020
Функция ПрограммаЛояльностиСотрудников(Объект) Экспорт

	ИспользоватьПрограммуЛояльности = Ложь;
	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		Попытка
			ИспользоватьПрограммуЛояльности = Объект.ИспользоватьПрограммуЛояльности;
		Исключение
			Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") И ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ТабличнаяЧасть.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.ЧекККМ.СкидкиНаценки КАК ТабличнаяЧасть
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки КАК ТаблицаСправочник
				|		ПО ТабличнаяЧасть.СкидкаНаценка = ТаблицаСправочник.Ссылка
				|ГДЕ
				|	ТабличнаяЧасть.Ссылка = &Ссылка
				|	И НЕ ТаблицаСправочник.ПрограммаЛояльности = ЗНАЧЕНИЕ(Справочник.ПрограммыЛояльности.ПустаяСсылка)
				|	И ТаблицаСправочник.ПрограммаЛояльности.ТипПрограммыЛояльности = ЗНАЧЕНИЕ(Перечисление.ТипыПрограммЛояльности.Сотрудники)"
				);
				
				Попытка
					Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
				
					Если Не Запрос.Выполнить().Пустой() Тогда
						ИспользоватьПрограммуЛояльности = Истина;
					КонецЕсли;
				Исключение
					ИспользоватьПрограммуЛояльности = Ложь;
				КонецПопытки;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ИспользоватьПрограммуЛояльности;
	
КонецФункции

#КонецОбласти

//	LNK 21.10.2019 10:55:35
Процедура ПроверитьКоличествоПоУпаковкам(Товары)	Экспорт

//	Имеют место некоторые мутные проблемы, когда "Количество" НЕ равно "КоличествоУпаковок" * "Упаковка.Коэффициент".
//	Сильное подозрение на Мишу Курбатова..

	#Если _ Тогда
	Товары = Документы.ЧекККМ.СоздатьДокумент().Товары;
	#КонецЕсли

	ТаблицаТовары = Товары.ВыгрузитьКолонки();

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл

		Если НЕ СтрокаТабличнойЧасти.Упаковка.Пустая() Тогда

			СтрокаТовары = ТаблицаТовары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТабличнойЧасти);

		КонецЕсли;

	КонецЦикла;

	Если НЕ ТаблицаТовары.Количество() = 0 Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Количество КАК Количество,
		|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	Товары.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&ТаблицаТовары КАК Товары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Ведущая.НомерСтроки - 1 КАК Индекс,
		|	Ведущая.КоличествоУпаковок * ТаблицаУпаковки.Коэффициент КАК Количество,
		|	Ведущая.КоличествоУпаковок КАК КоличествоУпаковок,
		|	Ведущая.Упаковка КАК Упаковка
		|ИЗ
		|	Товары КАК Ведущая
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК ТаблицаУпаковки
		|		ПО Ведущая.Упаковка = ТаблицаУпаковки.Ссылка
		|ГДЕ
		|	НЕ Ведущая.Количество = Ведущая.КоличествоУпаковок * ТаблицаУпаковки.Коэффициент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Товары"
		);
		Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
		
		ТоварыВыборка = Запрос.Выполнить().Выбрать();
		
		Пока ТоварыВыборка.Следующий() Цикл

			Если ТоварыВыборка.Индекс >= 0 И ТоварыВыборка.Индекс < Товары.Количество() Тогда

				СтрокаТабличнойЧасти = Товары[ТоварыВыборка.Индекс];
				СтрокаТабличнойЧасти.Количество = ТоварыВыборка.Количество;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьПроектыПогашенныхСертификатов(ДокументСсылка)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПогашений.ПодарочныйСертификат.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ПогашениеПодарочныхСертификатов КАК ТаблицаПогашений
	|ГДЕ
	|	ТаблицаПогашений.Ссылка = &ТекущаяСсылка"
	);
	Запрос.УстановитьПараметр("ТекущаяСсылка", ДокументСсылка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидНоменклатуры");

КонецФункции

#Область РаботаСШаблонамиЧеков

//	LNK 25.06.2018 11:44:54
Функция ПолучитьШаблонПодвала(Магазин, ТипШаблона = Неопределено)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаВедущая.Ссылка КАК Шаблон,
	|	0 КАК Приоритет
	|ПОМЕСТИТЬ Шаблоны
	|ИЗ
	|	Справочник.ШаблоныЧеков КАК ТаблицаВедущая
	|ГДЕ
	|	ТаблицаВедущая.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|	И НЕ ТаблицаВедущая.ПометкаУдаления
	|	И ТаблицаВедущая.ТипШаблона = &ТипШаблона
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаВедущая.Ссылка,
	|	1
	|ИЗ
	|	Справочник.ШаблоныЧеков КАК ТаблицаВедущая
	|ГДЕ
	|	ТаблицаВедущая.Магазин = &Магазин
	|	И НЕ ТаблицаВедущая.ПометкаУдаления
	|	И ТаблицаВедущая.ТипШаблона = &ТипШаблона
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шаблоны.Шаблон КАК Шаблон,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.Строка КАК Строка
	|ИЗ
	|	Шаблоны КАК Шаблоны
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(Шаблоны.Приоритет) КАК Приоритет
	|		ИЗ
	|			Шаблоны КАК Шаблоны) КАК Фильтр
	|		ПО Шаблоны.Приоритет = Фильтр.Приоритет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныЧеков.СтрокиПодвала КАК ТабличнаяЧасть
	|		ПО Шаблоны.Шаблон = ТабличнаяЧасть.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	);
	Запрос.УстановитьПараметр("Магазин"   , Магазин);
	Запрос.УстановитьПараметр("ТипШаблона", ?(ТипШаблона = Неопределено, Перечисления.ТипыШаблоновЧеков.ЧекККМ, ТипШаблона));
	
	ТекстПодвала = "";

	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл

			ТекстПодвала = ТекстПодвала + СокрЛП(Выборка.Строка) + Символы.ПС;

		КонецЦикла;

	КонецЕсли;

	Возврат ВыполнитьЗаменуМнемоническихИмён(ТекстПодвала, Магазин);

КонецФункции // ПолучитьШаблонПодвала()

//	LNK 25.06.2018 11:59:37
Функция ВыполнитьЗаменуМнемоническихИмён(ТекстПодвала, Магазин)

	Возврат ТекстПодвала;

КонецФункции // ВыполнитьЗаменуМнемоническихИмён()

#КонецОбласти

//	LNK 25.05.2022 19:31:08
Функция ТоварПредставление(Номенклатура)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Представление = "<>";

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.НаименованиеПолное КАК Представление
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Ссылка = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСправочник.Наименование
	|ИЗ
	|	Справочник.СерийныеНомера КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Ссылка = &Номенклатура"
	);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();

		Представление = СокрЛП(Выборка.Представление);

	КонецЕсли;

	Возврат Представление;

КонецФункции

//	LNK 23.09.2022 13:24:35
Процедура ПротоколВерсииОС(СИ, Знач ТекстСообщения)	Экспорт

	#Если _ Тогда
	СИ = Новый СистемнаяИнформация;
	#КонецЕсли

	Попытка

		Если ОбщегоНазначенияРТповтИсп.ПолучитьПравилаПротокола().ПротоколВерсииОС = Истина Тогда

			ТекстСообщения = СокрЛП(ТекстСообщения);

			Для каждого КлючЗначение Из СИ Цикл

				ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
				+ КлючЗначение.Ключ + ": " + КлючЗначение.Значение

			КонецЦикла;

			ЖурналСобытий.Регистрация("OS_VERSION", УровеньЖурналаРегистрации.Примечание
				, СИ.ТипПлатформы
				, СИ.ВерсияОС
				,
				, ТекстСообщения
				,
				, Ложь
				, Ложь
			);

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();

	КонецПопытки;

КонецПроцедуры








