//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ ДОПОЛНИТЕЛЬНЫМИ ПРАВАМИ ПОЛЬЗОВАТЕЛЕЙ

// Функция возвращает список значений права, установленных для пользователя.
// Если количество значений меньше количество доступных ролей, то возвращается значение по умолчанию
//
// Параметры:
//  Право               - право, для которого определяются значения
//  ЗначениеПоУмолчанию - значение по умолчанию для передаваемого права (возвращается в случае
//                        отсутствия значений в регистре сведений)
//
// Возвращаемое значение:
//  Список всех значений, установленных наборам прав (ролям), доступных пользователю
//
Функция ПолучитьЗначениеПраваДляТекущегоПользователя(Право, ЗначениеПоУмолчанию = Неопределено) Экспорт

	КэшДополнительныхПрав = глЗначениеПеременной("ЗначенияДополнительныхПравПользователя");
	ЗначениеПрава		  = КэшДополнительныхПрав[Право];

	Если ЗначениеПрава = Неопределено Тогда

		ЗначениеПрава = ПрочитатьЗначениеПраваДляТекущегоПользователя(Право, ЗначениеПоУмолчанию);
		КэшДополнительныхПрав[Право] = ЗначениеПрава;

		#Если Сервер Тогда
		глЗначениеПеременнойУстановить("ЗначенияДополнительныхПравПользователя", КэшДополнительныхПрав, Истина);
		#КонецЕсли

	КонецЕсли;	

	Возврат ЗначениеПрава;

КонецФункции

// Функция читает право текущего пользователя
//
Функция ПрочитатьЗначениеПраваДляТекущегоПользователя(Право, ЗначениеПоУмолчанию)

	ВозвращаемыеЗначения = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РегистрЗначениеПрав.Значение КАК Значение,
	|	ВЫБОР
	|		КОГДА РегистрЗначениеПрав.Пользователь = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	|			ТОГДА 0
	|		КОГДА РегистрЗначениеПрав.Пользователь = &Пользователь
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КлючПорядка
	|ИЗ
	|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК РегистрЗначениеПрав
	|ГДЕ
	|	РегистрЗначениеПрав.Право = &ПравоПользователя
	|	И РегистрЗначениеПрав.Пользователь В
	|			(ВЫБРАТЬ
	|				ПользователиГруппы.Ссылка КАК Ссылка
	|			ИЗ
	|				Справочник.ГруппыПользователей.Состав КАК ПользователиГруппы
	|			ГДЕ
	|				ПользователиГруппы.Пользователь = &Пользователь
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				&Пользователь)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка УБЫВ"
	);
	Запрос.УстановитьПараметр("Пользователь"     , Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ПравоПользователя", ?(ТипЗнч(Право) = Тип("Строка"), ПланыВидовХарактеристик.ПраваПользователей[Право], Право));

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() = 0 Тогда

		ВозвращаемыеЗначения.Добавить(ЗначениеПоУмолчанию);

	Иначе

		Пока Выборка.Следующий() Цикл

			ВозвращаемыеЗначения.Добавить(Выборка.Значение);

		КонецЦикла;

	КонецЕсли;

	Возврат ВозвращаемыеЗначения;

КонецФункции

// Функция возвращает булево значение права текущего пользователя
//
Функция ПолучитьБулевоЗначениеПраваПользователя(Право, ЗначениеПоУмолчанию = Ложь, Пользователь = Неопределено) Экспорт

	Если Пользователь = Неопределено ИЛИ Пользователь = Пользователи.ТекущийПользователь() Тогда

			Список = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(Право, ЗначениеПоУмолчанию);

	Иначе	Список = УправлениеПользователями.ПолучитьЗначениеПраваДляПользователя(Право, ЗначениеПоУмолчанию, Пользователь);

	КонецЕсли;

	Если Список.Количество() = 0 Тогда

		Возврат Ложь;

	ИначеЕсли Список.Количество() > 1 Тогда

		Для каждого ЭлементСписка Из Список Цикл

			Если ЭлементСписка.Значение = Истина Тогда

				Возврат Истина;

			КонецЕсли;

		КонецЦикла;

		Возврат Ложь;

	Иначе

		Возврат Список[0].Значение = Истина;

	КонецЕсли;
	
КонецФункции

// Функция возвращает список значений права, установленных для пользователя.
// Если количество значений меньше количество доступных ролей, то возвращается значение по умолчанию
//
// Параметры:
//  Право               - право, для которого определяются значения
//  ЗначениеПоУмолчанию - значение по умолчанию для передаваемого права (возвращается в случае
//                        отсутствия значений в регистре сведений)
//
// Возвращаемое значение:
//  Список всех значений, установленных наборам прав (ролям), доступных пользователю
//
Функция ПолучитьЗначениеПраваДляПользователя(Право, ЗначениеПоУмолчанию = Неопределено, Пользователь) Экспорт
	
	ВозвращаемыеЗначения = Новый СписокЗначений;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Пользователь"     , Пользователь);
	Запрос.УстановитьПараметр("ПравоПользователя", ?(ТипЗнч(Право) = Тип("Строка"), ПланыВидовХарактеристик.ПраваПользователей[Право], Право));

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РегистрЗначениеПрав.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК РегистрЗначениеПрав
	|ГДЕ
	|	РегистрЗначениеПрав.Право = &ПравоПользователя
	|	И РегистрЗначениеПрав.Пользователь = &Пользователь";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() = 0 Тогда
		ВозвращаемыеЗначения.Добавить(ЗначениеПоУмолчанию);
	Иначе
		Пока Выборка.Следующий() Цикл
			ВозвращаемыеЗначения.Добавить(Выборка.Значение);
		КонецЦикла;
	КонецЕсли;

	Возврат ВозвращаемыеЗначения;

КонецФункции

//	LNK 27.08.2017 12:27:39
Функция ДоступноЗначениеПраваДляТекущегоПользователя(Знач Право, ЗначениеТребуемое, ЗначениеПоУмолчанию = Неопределено)	Экспорт

	Если ТипЗнч(Право) = Тип("Строка") Тогда

		Право = ПланыВидовХарактеристик.ПраваПользователей[Право];

	КонецЕсли;

	СписокЗначений = ПолучитьЗначениеПраваДляТекущегоПользователя(Право, ЗначениеПоУмолчанию);

	Возврат НЕ СписокЗначений.НайтиПоЗначению(ЗначениеТребуемое) = Неопределено;

КонецФункции // ДоступноЗначениеПраваДляТекущегоПользователя()

//////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБНОВЛЯЮЩИЕ РС по учетным записям

Функция ПолучитьМассивМагазиновДоступныхВСеансе(Пользователь) Экспорт
	
	Если ПланыОбмена.ПоРабочемуМесту.ЭтоРабочееМесто() Тогда
		МассивМагазинов = Новый Массив;
		МассивМагазинов.Добавить(ПланыОбмена.ПоРабочемуМесту.ЭтотУзел().Магазин);
	Иначе	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоступныеМагазины.Магазин КАК Магазин
		|ИЗ
		|	(ВЫБРАТЬ
		|		МагазиныУзла.Магазин КАК Магазин
		|	ИЗ
		|		ПланОбмена.ПоМагазину.Магазины КАК МагазиныУзла
		|	ГДЕ
		|		МагазиныУзла.Ссылка = &ЭтотУзел
		|		И (НЕ &ГлавныйУзел)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Магазины.Ссылка
		|	ИЗ
		|		Справочник.Магазины КАК Магазины
		|	ГДЕ
		|		&ГлавныйУзел
		|		И (НЕ Магазины.СкладУправляющейСистемы)) КАК ДоступныеМагазины"
		);

	КонецЕсли;
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ПоМагазину.ЭтотУзел());
	Запрос.УстановитьПараметр("ГлавныйУзел", ОбменДаннымиПовтИсп.ГлавныйУзел() = Неопределено);
	МассивМагазинов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Магазин");
	
	Возврат МассивМагазинов;
	
КонецФункции

// Функция возвращает список пользователей, связанных
// с пользователями текущей информационной базы
Функция ПолучитьСписокПользователейИнформационнойБазы() Экспорт
	
	Результат = Новый СписокЗначений;
	
	МассивПользователейИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для Каждого ПользовательИБ Из МассивПользователейИБ Цикл
		Пользователь = Справочники.Пользователи.НайтиПоКоду(ПользовательИБ.Имя);
		Если ЗначениеЗаполнено(Пользователь) Тогда
			Результат.Добавить(Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция проверяет переданного пользователя, на то что он
// является пользователем информационной базы
Функция ЭтоПользовательИнформационнойБазы(Пользователь) Экспорт
	
	Результат = Ложь;
	
	Пользователь = Справочники.Пользователи.НайтиПоКоду(СокрЛП(Пользователь.Код));
	Если Пользователь <> Неопределено Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДОПОЛНИТЕЛЬНЫХ ПРАВ

// Устанавливает доступность 
//
// Параметры:
//  Доступность - Доступность элемента
//  Право       - право, для которого определяются значения
//
Процедура УстановитьДоступностьДляРеквизитовТабличнойЧасти(Доступность, Право) Экспорт
	
	Доступность = Доступность И УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(Право, Ложь);
	
КонецПроцедуры // УстановитьДоступностьДляРеквизитовТабличнойЧасти()

// Устанавливает доступность 
//
// Параметры:
//  ТолькоПросмотр - ТолькоПросмотр элемента
//  Право       - право, для которого определяются значения
//
Процедура УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(ТолькоПросмотр, Право, РазрешенДоступИсключение = Неопределено) Экспорт
	
	ТолькоПросмотр = ТолькоПросмотр
		ИЛИ ?(РазрешенДоступИсключение = Истина
				, Ложь
				, НЕ УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(Право, Ложь)
	);
	
КонецПроцедуры // УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти()

#Область ОперацииПоГруппамДоступныхСегментов

//	LNK 24.09.2018 12:54:53
Функция СегментНоменклатурыДоступен(СегментНоменклатуры)	Экспорт

	СписокЗначений = ПрочитатьЗначениеПраваДляТекущегоПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.ДоступнаяГруппаСегментовНоменклатуры,
		Справочники.ГруппыСегментовНоменклатуры.ПустаяСсылка());

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ГруппыСегментовНоменклатуры.ДоступныеСегменты КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В(&СписокЗначений)
	|	И ТабличнаяЧасть.СегментНоменклатуры = &СегментНоменклатуры"
	);
	Запрос.УстановитьПараметр("СписокЗначений", СписокЗначений.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("СегментНоменклатуры", СегментНоменклатуры);

	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции // СегментНоменклатурыДоступен()

//	LNK 25.09.2018 09:31:35
Функция ПолучитьСписокДоступныхСегментов()	Экспорт

	СписокЗначений = ПрочитатьЗначениеПраваДляТекущегоПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.ДоступнаяГруппаСегментовНоменклатуры,
		Справочники.ГруппыСегментовНоменклатуры.ПустаяСсылка());

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабличнаяЧасть.СегментНоменклатуры КАК СегментНоменклатуры
	|ИЗ
	|	Справочник.ГруппыСегментовНоменклатуры.ДоступныеСегменты КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В(&СписокЗначений)"
	);
	Запрос.УстановитьПараметр("СписокЗначений", СписокЗначений.ВыгрузитьЗначения());

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СегментНоменклатуры");

КонецФункции // ПолучитьСписокДоступныхСегментов()

//	LNK 25.09.2018 10:56:28
Процедура ДобавитьСегментВГруппуСегментов(СегментНоменклатуры, ГруппаСегментовНоменклатуры = Неопределено)	Экспорт

	Если РольДоступна(Метаданные.Роли.АдминистраторСистемы) ИЛИ НЕ ЗначениеЗаполнено(СегментНоменклатуры) Тогда

		Возврат;	//	администратору все сегменты и так доступны.

	КонецЕсли;

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если ГруппаСегментовНоменклатуры = Неопределено Тогда

		СписокЗначений = ПрочитатьЗначениеПраваДляТекущегоПользователя(
			ПланыВидовХарактеристик.ПраваПользователей.ДоступнаяГруппаСегментовНоменклатуры,
			Справочники.ГруппыСегментовНоменклатуры.ПустаяСсылка());

		Если НЕ СписокЗначений.Количество() = 0 Тогда

			ГруппаСегментовНоменклатуры = СписокЗначений[0].Значение;

		КонецЕсли;

	КонецЕсли;

	Если НЕ ГруппаСегментовНоменклатуры = Неопределено Тогда

		Попытка

			ГруппаОбъект = ГруппаСегментовНоменклатуры.ПолучитьОбъект();

			Если ГруппаОбъект.ДоступныеСегменты.Найти(СегментНоменклатуры, "СегментНоменклатуры") = Неопределено Тогда

				ГруппаОбъект.ДоступныеСегменты.Добавить().СегментНоменклатуры = СегментНоменклатуры;

				Если ЗначениеЗаполнено(ГруппаОбъект.ДоступныеСегменты[ГруппаОбъект.ДоступныеСегменты.Количество() - 1].СегментНоменклатуры) Тогда

				//	Выше проверим, а вдруг какая-то хрень была передана параметром.. при типизации будет пусто. Нам это не нужно.
					ГруппаОбъект.ОбменДанными.Загрузка = Истина;
					ГруппаОбъект.Записать();

				КонецЕсли;

			КонецЕсли;

		Исключение

			ТекстОшибки = ОписаниеОшибки();

		КонецПопытки;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти





