////////////////////////////////////////////////////////////////////////////////
// Подсистема "Управление доступом".
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Содержит сохраненные параметры, используемые подсистемой.
Функция Параметры() Экспорт
	
	СохраненныеПараметры = ОбновлениеИнформационнойБазы.ПараметрыРаботыПрограммы(
		"ПараметрыОграниченияДоступа");
	
	ПредставлениеПараметра = "";
	
	Если НЕ СохраненныеПараметры.Свойство("ВсеПустыеСсылки") Тогда
		ПредставлениеПараметра = НСтр("ru = 'Общие параметры'");
		
	ИначеЕсли НЕ СохраненныеПараметры.Свойство("ВозможныеПраваПоЗначениямДоступа") Тогда
		ПредставлениеПараметра = НСтр("ru = 'Возможные права по значениям доступа'");
		
	ИначеЕсли НЕ СохраненныеПараметры.Свойство("ПоставляемыеПрофилиГруппДоступа") Тогда
		ПредставлениеПараметра = НСтр("ru = 'Поставляемые профили групп доступа'");
		
	ИначеЕсли НЕ СохраненныеПараметры.Свойство("ПредопределенныеПрофилиГруппДоступа") Тогда
		ПредставлениеПараметра = НСтр("ru = 'Предопределенные профили групп доступа'");
		
	ИначеЕсли НЕ СохраненныеПараметры.Свойство("СвойстваВидовДоступа") Тогда
		ПредставлениеПараметра = НСтр("ru = 'Свойства видов доступа'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеПараметра) Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка обновления информационной базы.
			           |Не заполнен параметр ограничения доступа:
			           |""%1"".'"),
			ПредставлениеПараметра);
	КонецЕсли;
	
	Возврат СохраненныеПараметры;
	
КонецФункции

// Возвращает таблицу значений, содержащую вид ограничений доступа по каждому праву
// объектов метаданных.
//  Если записи по праву нет, значит ограничений по праву нет.
//  Таблица содержит только виды доступа, заданные разработчиком,
// исходя из их применения в текстах ограничений.
//  Для получения всех видов доступа, включая используемые в наборах
// значений доступа может быть использовано
// текущее состояние регистра сведений НаборыЗначенийДоступа.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//    Таблица    - Строка - имя таблицы объекта метаданных, например, Справочник.Файлы
//    Право      - Строка: "Чтение", "Добавление", "Изменение", "Удаление"
//    ВидДоступа - ПланВидовХарактеристикСсылка.ВидыДоступа
//    ТаблицаОбъекта - Строка - имя таблицы объекта метаданных, через который ограничивается
//                 доступ, используя наборы значений доступа, например, Справочник.ПапкиФайлов
//                 Непустая строка, если ВидДоступа пустая ссылка, что
//                 в данном случае соответствует виду доступа Объект.
//
Функция ПостоянныеВидыОграниченийПравОбъектовМетаданных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыДоступаПрав = Новый ТаблицаЗначений;
	ВидыДоступаПрав.Колонки.Добавить("Таблица",        Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	ВидыДоступаПрав.Колонки.Добавить("Право",          Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
	ВидыДоступаПрав.Колонки.Добавить("ВидДоступа",     Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыДоступа"));
	ВидыДоступаПрав.Колонки.Добавить("ТаблицаОбъекта", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	
	ПредопределенныеВидыДоступа = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыДоступа.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ВидыДоступа КАК ВидыДоступа
	|ГДЕ
	|	ВидыДоступа.Предопределенный";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредопределенныеВидыДоступа.Вставить(ПланыВидовХарактеристик.ВидыДоступа.ПолучитьИмяПредопределенного(Выборка.Ссылка), Выборка.Ссылка);
	КонецЦикла;
	
	ОграниченияПрав = "";
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.УправлениеДоступом\ПриЗаполненииВидовОграниченийПравОбъектовМетаданных");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(ОграниченияПрав);
	КонецЦикла;
	
	УправлениеДоступомПереопределяемый.ЗаполнитьВидыОграниченийПравОбъектовМетаданных(ОграниченияПрав);
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(ОграниченияПрав) Цикл
		ТекущаяСтрока = СтрПолучитьСтроку(ОграниченияПрав, НомерСтроки);
		Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
			ПояснениеОшибки = "";
			Если СтрЧислоВхождений(ТекущаяСтрока, ".") <> 3 И СтрЧислоВхождений(ТекущаяСтрока, ".") <> 5 Тогда
				ПояснениеОшибки = НСтр("ru = 'Строка должна быть в формате ""<Полное имя таблицы>.<Имя права>.<Имя вида доступа>[.Таблица объекта]"".'");
			Иначе
				ПозицияПрава = Найти(ТекущаяСтрока, ".");
				ПозицияПрава = Найти(Сред(ТекущаяСтрока, ПозицияПрава + 1), ".") + ПозицияПрава;
				Таблица = Лев(ТекущаяСтрока, ПозицияПрава - 1);
				ПозицияВидаДоступа = Найти(Сред(ТекущаяСтрока, ПозицияПрава + 1), ".") + ПозицияПрава;
				Право = Сред(ТекущаяСтрока, ПозицияПрава + 1, ПозицияВидаДоступа - ПозицияПрава - 1);
				Если СтрЧислоВхождений(ТекущаяСтрока, ".") = 3 Тогда
					ВидДоступа = Сред(ТекущаяСтрока, ПозицияВидаДоступа + 1);
					ТаблицаОбъекта = "";
				Иначе
					ПозицияТаблицыОбъекта = Найти(Сред(ТекущаяСтрока, ПозицияВидаДоступа + 1), ".") + ПозицияВидаДоступа;
					ВидДоступа = Сред(ТекущаяСтрока, ПозицияВидаДоступа + 1, ПозицияТаблицыОбъекта - ПозицияВидаДоступа - 1);
					ТаблицаОбъекта = Сред(ТекущаяСтрока, ПозицияТаблицыОбъекта + 1);
				КонецЕсли;
				Если Метаданные.НайтиПоПолномуИмени(Таблица) = Неопределено Тогда
					ПояснениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не найдена таблица ""%1"".'"),
						Таблица);
				ИначеЕсли Право <> "Чтение"
				        И Право <> "Добавление"
				        И Право <> "Изменение"
				        И Право <> "Удаление" Тогда
					ПояснениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не найдено право ""%1"".'"),
						Право);
				ИначеЕсли ВРег(ВидДоступа) = ВРег("Объект") Тогда
					Если Метаданные.НайтиПоПолномуИмени(ТаблицаОбъекта) = Неопределено Тогда
						ПояснениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не найдена таблица объекта ""%1"".'"),
							ТаблицаОбъекта);
					КонецЕсли;
				ИначеЕсли ПредопределенныеВидыДоступа.Получить(ВидДоступа) = Неопределено Тогда
					ПояснениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не найден вид доступа ""%1"".'"),
						ВидДоступа);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПояснениеОшибки) Тогда
				ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка в строке описания вида ограничений права объекта метаданных:
						           |""%1"".
						           |
						           |'"), ТекущаяСтрока) + ПояснениеОшибки);
			Иначе
				НовоеОписание = ВидыДоступаПрав.Добавить();
				НовоеОписание.Таблица        = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Таблица);
				НовоеОписание.Право          = Право;
				НовоеОписание.ВидДоступа     = ПредопределенныеВидыДоступа.Получить(ВидДоступа);
				Если ЗначениеЗаполнено(ТаблицаОбъекта) Тогда
					НовоеОписание.ТаблицаОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТаблицаОбъекта);
				Иначе
					НовоеОписание.ТаблицаОбъекта = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыДоступаПрав;
	
КонецФункции

// Только для внутреннего использования.
Функция ОписаниеКлючаЗаписи(ТипИлиПолноеИмя) Экспорт
	
	ОписаниеКлюча = Новый Структура("МассивПолей, СтрокаПолей", Новый Массив, "");
	
	Если ТипЗнч(ТипИлиПолноеИмя) = Тип("Тип") Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипИлиПолноеИмя);
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ТипИлиПолноеИмя);
	КонецЕсли;
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
	
	Для каждого Колонка Из Менеджер.СоздатьНаборЗаписей().Выгрузить().Колонки Цикл
		
		Если ОбъектМетаданных.Ресурсы.Найти(Колонка.Имя) = Неопределено
		   И ОбъектМетаданных.Реквизиты.Найти(Колонка.Имя) = Неопределено Тогда
			// Если поля нет в ресурсах и реквизитах, значит это поле - измерение
			ОписаниеКлюча.МассивПолей.Добавить(Колонка.Имя);
			ОписаниеКлюча.СтрокаПолей = ОписаниеКлюча.СтрокаПолей + Колонка.Имя + ",";
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеКлюча.СтрокаПолей = Лев(ОписаниеКлюча.СтрокаПолей, СтрДлина(ОписаниеКлюча.СтрокаПолей)-1);
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(ОписаниеКлюча);
	
КонецФункции

// Только для внутреннего использования.
Функция ТипыПоляТаблицы(Таблица, ГруппаПолей, Поле) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Таблица);
	
	ТипыПоля = Новый Соответствие;
	
	Для каждого Тип Из ОбъектМетаданных[ГруппаПолей][Поле].Тип.Типы() Цикл
		ТипыПоля.Вставить(Тип, Истина);
	КонецЦикла;
	
	Возврат ТипыПоля;
	
КонецФункции

// Возвращает типы объектов и ссылок в указанных подписках на события.
// 
// Параметры:
//  ИменаПодписок - Строка - многострочная строка, содержащая
//                  строки начала имени подписки.
//
Функция ТипыОбъектовВПодпискахНаСобытия(ИменаПодписок) Экспорт
	
	ТипыОбъектов = Новый Соответствие;
	
	Для каждого Подписка Из Метаданные.ПодпискиНаСобытия Цикл
		
		Для НомерСтроки = 1 По СтрЧислоСтрок(ИменаПодписок) Цикл
			
			НачалоИмени = СтрПолучитьСтроку(ИменаПодписок, НомерСтроки);
			Если ВРег(Лев(Подписка.Имя, СтрДлина(НачалоИмени))) = ВРег(НачалоИмени) Тогда
				
				Для каждого Тип Из Подписка.Источник.Типы() Цикл
					ТипыОбъектов.Вставить(Тип, Истина);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(ТипыОбъектов);
	
КонецФункции

Функция СекретКлючаШифрования()	Экспорт

	Возврат '19381123175911';

КонецФункции

//	LNK 28.11.2016 14:27:43
//	Возвращает общие параметры обновления.
//
Функция ПолучитьПараметрыОбновления()	Экспорт

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДатаВремяОбновленияУстановлена"	, Ложь);

	СтруктураПараметров.Вставить("ВерсияПрименения"                  , СокрЛП(Константы.МиграцияВерсия.Получить()));
	СтруктураПараметров.Вставить("ТребуетсяОбновлениеКонфигурации"   , НЕ СтруктураПараметров.ВерсияПрименения = СокрЛП(Метаданные.Версия));

//	Имена служебных файлов
	СтруктураПараметров.Вставить("ИмяИсполняемогоФайлаКонфигуратора" , "1cv8.exe");
	СтруктураПараметров.Вставить("ИмяИсполняемогоФайлаКлиента"       , "1cv8.exe");
	СтруктураПараметров.Вставить("КаталогПрограммы"					 , КаталогПрограммы());

	СтруктураПараметров.Вставить("ИмяCOMСоединителя"                 , ОбщегоНазначения.ИмяCOMСоединителя());//"v83.COMConnector");

//	Описание администратора для загрузки и применения конфигурации
	СтруктураПараметров.Вставить("ИмяАдминистратора"                 , ИмяАдминистратораАвтоматов());	//	Справочники.Пользователи.АдминистраторАвтоматов
	СтруктураПараметров.Вставить("ПарольАдминистратора"              , ПарольАдминистратораАвтоматов());

	СтруктураПараметров.Вставить("ИмяАдминистратораКластера"         , "");	//	заготовка на будущее
	СтруктураПараметров.Вставить("ПарольАдминистратораКластера"      , "");	//	заготовка на будущее

	СтруктураПараметров.Вставить("СтрокаПодключения"                 , "Usr=""" + СтруктураПараметров.ИмяАдминистратора + """;Pwd=""" + СтруктураПараметров.ПарольАдминистратора + """");
	СтруктураПараметров.Вставить("ПараметрыАутентификации"           , "/N""" + СтруктураПараметров.ИмяАдминистратора + """ /P""" + СтруктураПараметров.ПарольАдминистратора + """ /WA-");

	СтруктураПараметров.Вставить("СтрокаСоединенияИнформационнойБазы", СоединенияИБКлиентСервер.ПолучитьСтрокуСоединенияИнформационнойБазы(0));
	СтруктураПараметров.Вставить("ИмяСервера"                        , СоединенияИБКлиентСервер.ПолучитьПараметрСтрокиСоединения("Srvr", СтруктураПараметров.СтрокаСоединенияИнформационнойБазы));
	СтруктураПараметров.Вставить("ПортСервера"                       , СоединенияИБКлиентСервер.ПолучитьПараметрСтрокиСоединения("Port", СтруктураПараметров.СтрокаСоединенияИнформационнойБазы));
	СтруктураПараметров.Вставить("ИмяИнформационнойБазы"             , СоединенияИБКлиентСервер.ПолучитьПараметрСтрокиСоединения("Ref" , СтруктураПараметров.СтрокаСоединенияИнформационнойБазы));

	СтруктураПараметров.Вставить("СобытиеЖурналаРегистрации"         , НСтр("ru = 'Обновление и применение конфигурации'"));

//	Определение каталога временных файлов.
	СтруктураПараметров.Вставить("КаталогСервераПриложений"			 , ПолучитьРабочийКаталогСервераПриложений());

//	Назначаем временный каталог для обновления - привязывается только к текущей ИБ.
	СтруктураПараметров.Вставить("КаталогФайловОбновленияОбъект"	 , Новый Файл(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
				КаталогВременныхФайлов() + "1Cv8Update." + СоединенияИБКлиентСервер.ПолучитьИдентификаторИмениСтрокиСоединения(СтруктураПараметров.СтрокаСоединенияИнформационнойБазы),
				ТехническаяПоддержкаВызовСервера.ТипПлатформыСистемы())));
	СтруктураПараметров.Вставить("ФайлОбновленияОбъект");

	СтруктураПараметров.Вставить("КаталогЖурналовОбъект"			, Новый Файл(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
				КаталогВременныхФайлов() + "1C_" + СоединенияИБКлиентСервер.ПолучитьИдентификаторИмениСтрокиСоединения(СтруктураПараметров.СтрокаСоединенияИнформационнойБазы) + ".logs",
				ТехническаяПоддержкаВызовСервера.ТипПлатформыСистемы())));
				
	СистемнаяИнфо = Новый СистемнаяИнформация;
	СтруктураПараметров.Вставить("ВерсияПлатформы"					, СистемнаяИнфо.ВерсияПриложения);
				
	Возврат СтруктураПараметров;

КонецФункции

//	LNK 05.01.2017 15:55:25
Функция ИмяАдминистратораАвтоматов()	Экспорт

	Возврат Справочники.Пользователи.ПолучитьИмяПредопределенного(Справочники.Пользователи.АдминистраторАвтоматов);

КонецФункции // ИмяАдминистратораАвтоматов()

//	LNK 05.01.2017 16:00:13
Функция НаименованиеАдминистратораАвтоматов(ВернутьНаименование = Истина)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.Наименование КАК Наименование,
	|	ТаблицаСправочник.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.Пользователи КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Ссылка = ЗНАЧЕНИЕ(Справочник.Пользователи.АдминистраторАвтоматов)"
	);

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат ?(ВернутьНаименование, Выборка.Наименование, Выборка.ИмяПредопределенныхДанных);

КонецФункции // НаименованиеАдминистратораАвтоматов()

//	LNK 05.01.2017 16:04:16
Функция ИдентификаторАдминистратораАвтоматов()	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Ссылка = ЗНАЧЕНИЕ(Справочник.Пользователи.АдминистраторАвтоматов)"
	);

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка.ИдентификаторПользователяИБ;

КонецФункции // ИдентификаторАдминистратораАвтоматов()

//	LNK 05.01.2017 15:37:52
Функция ПарольАдминистратораАвтоматов()	Экспорт

	Возврат "jnnj38dfkmnth";

КонецФункции // ПарольАдминистратораАвтоматов()

//	LNK 30.10.2017 13:09:38
Функция ИдентификаторWebПосредника()	Экспорт

	Возврат "Больцман Людвиг";

КонецФункции

//	LNK 30.10.2017 13:10:24
Функция ПарольWebПосредника()	Экспорт

	Возврат "ktdbn739fwbz";

КонецФункции

//	СЮП 31.03.2021
Функция ИдентификаторHTTPПосредника()	Экспорт

	Возврат "Поликарпов";

КонецФункции

//	СЮП 31.03.2021
Функция ПарольHTTPПосредника()	Экспорт

	Возврат "gjchtlybr";

КонецФункции

//	LNK 01.07.2020 12:33:29
Функция ПарольВнешнегоСоединения()	Экспорт

	Возврат "journey1812man";

КонецФункции

//	LNK 18.08.2021 10:22:39
Функция ИдентификаторВнешнегоПосредника()	Экспорт

	Возврат "BidenJoe";

КонецФункции

//	LNK 18.08.2021 10:24:52
Функция ПарольВнешнегоПосредника()	Экспорт

	Возврат "Ashraf2021Ghani";

КонецФункции

//	LNK 14.12.2017 13:09:13
Функция ПолучитьСтрокуWebСоединения(Магазин, ЗащищенноеСоединение)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(СтрЗаменить(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаМагазина.Магазин ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаМагазина.Протокол
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаОбщая.Протокол, Ведущая.Протокол)
	|	КОНЕЦ КАК Протокол,
	|	ВЫБОР
	|		КОГДА ТаблицаМагазина.Магазин ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаМагазина.Адрес
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаОбщая.Адрес, Ведущая.Адрес)
	|	КОНЕЦ КАК Адрес,
	|	ВЫБОР
	|		КОГДА ТаблицаМагазина.Магазин ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаМагазина.Порт
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаОбщая.Порт, Ведущая.Порт)
	|	КОНЕЦ КАК Порт,
	|	ВЫБОР
	|		КОГДА ТаблицаМагазина.Магазин ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаМагазина.Публикация
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаОбщая.Публикация, Ведущая.Публикация)
	|	КОНЕЦ КАК Публикация,
	|	ВЫБОР
	|		КОГДА ТаблицаМагазина.Магазин ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаМагазина.ЗащищенноеСоединение
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаОбщая.ЗащищенноеСоединение, Ведущая.ЗащищенноеСоединение)
	|	КОНЕЦ КАК ЗащищенноеСоединение
	|ИЗ
	|	(ВЫБРАТЬ
	|		""http"" КАК Протокол,
	|		""77.88.224.242"" КАК Адрес,
	|		80 КАК Порт,
	|		""АНТОШКА"" КАК Публикация,
	|		ЛОЖЬ КАК ЗащищенноеСоединение) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресаWebДоступа КАК ТаблицаОбщая
	|		ПО (ТаблицаОбщая.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	|			И (ТаблицаОбщая.Протокол = ""http"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресаWebДоступа КАК ТаблицаМагазина
	|		ПО (ТаблицаМагазина.Магазин = &Магазин)
	|			И (ТаблицаМагазина.Протокол = ""http"")"
	, "АНТОШКА", ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("Публикация"))
	);
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	ЗащищенноеСоединение = Выборка.ЗащищенноеСоединение;
	
//	"http://188.40.38.158:6377/LNK/ws/"
	Возврат СокрЛП(Выборка.Протокол) + "://"
		  + СокрЛП(Выборка.Адрес)
		  + ?(Выборка.Порт = 0, "", ":" + Формат(Выборка.Порт, "ЧН=0; ЧГ=")) + "/"
		  + СокрЛП(Выборка.Публикация) + "/";

КонецФункции

//	LNK 03.01.2019 13:16:50
Функция ПолучитьАдресСервераMSDynamics(Магазин)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаМагазина.Магазин ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаМагазина.Протокол
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаОбщая.Протокол, Ведущая.Протокол)
	|	КОНЕЦ КАК Протокол,
	|	ВЫБОР
	|		КОГДА ТаблицаМагазина.Магазин ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаМагазина.Адрес
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаОбщая.Адрес, Ведущая.Адрес)
	|	КОНЕЦ КАК Адрес
	|ИЗ
	|	(ВЫБРАТЬ
	|		""dyn"" КАК Протокол,
	|		"""" КАК Адрес) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресаWebДоступа КАК ТаблицаОбщая
	|		ПО (ТаблицаОбщая.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	|			И (ТаблицаОбщая.Протокол = ""dyn"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресаWebДоступа КАК ТаблицаМагазина
	|		ПО (ТаблицаМагазина.Магазин = &Магазин)
	|			И (ТаблицаМагазина.Протокол = ""dyn"")"
	);
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка.Адрес;

КонецФункции // ПолучитьАдресСервераMSDynamics()

//	LNK 06.02.2018 08:27:11
Функция ПолучитьРабочийКаталогСервераПриложений()	Экспорт

	Перем ЗначениеImagePath;

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	КаталогСервера = "";

//	HKEY_CLASSES_ROOT (2147483648)
//	HKEY_CURRENT_USER (2147483649)
//	HKEY_LOCAL_MACHINE (2147483650)
//	HKEY_USERS (2147483651)
//	HKEY_CURRENT_CONFIG (2147483653)

	Попытка

		RegProvider = ПолучитьCOMОбъект("winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv");
		RegProvider.GetStringValue("2147483650", "SYSTEM\CurrentControlSet\Services\1C:Enterprise 8.3 Server Agent", "ImagePath", ЗначениеImagePath);
	//	Получили, например: "C:\Program Files (x86)\1cv8\8.3.10.2561\bin\ragent.exe" -debug -srvc -agent -regport 1541 -port 1540 -range 1560:1591 -d "C:\Program Files (x86)\1cv8\srvinfo"

		КаталогСервера = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
			СтрЗаменить(
				Сред(ЗначениеImagePath, Найти(ЗначениеImagePath, " -d ") + 4)
			, """", "")
		, ТехническаяПоддержкаВызовСервера.ТипПлатформыСистемы());

	Исключение

		ТекстОшибки = ОписаниеОшибки();

	КонецПопытки;

	Возврат КаталогСервера;

КонецФункции // ПолучитьРабочийКаталогСервераПриложений()

















