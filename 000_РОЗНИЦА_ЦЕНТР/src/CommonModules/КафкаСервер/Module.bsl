
#Область ПрограммныйИнтерфейс

// Объект в строку JSON.
// 
// Параметры:
//  Объект - Произвольный
// 
// Возвращаемое значение:
//  Строка - Объект в строку JSON
Функция ОбъектВСтрокуJSON(Объект) Экспорт
	 
	 ЗаписьJSON=Новый ЗаписьJSON;
	 ЗаписьJSON.УстановитьСтроку();
	 ЗаписатьJSON(ЗаписьJSON, Объект,, "ПреобразоватьJSON", КафкаСервер);
	 
	 Возврат ЗаписьJSON.Закрыть()
	 
 КонецФункции
 
// Объект в строку XML.
// 
// Параметры:
//  Объект - Массив, Ссылка
//  ПравилаОбмена - Строка - Правила обмена
// 
// Возвращаемое значение:
//  Строка - Объект в строку XML
Функция ОбъектВСтрокуXML(Объект, ПравилаОбмена) Экспорт
	 Обработка = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	 Обработка.РежимОбмена = "Выгрузка";
	 Обработка.ВыводВОкноСообщенийИнформационныхСообщений = Истина;
	 
	 ИмяВременногоФайлаПравил = ПолучитьИмяВременногоФайла("xml");

	 Текст = Новый ТекстовыйДокумент;
	 Текст.ДобавитьСтроку(ПравилаОбмена);

	 Текст.Записать(ИмяВременногоФайлаПравил);

	 Обработка.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравил;
	 Обработка.НеВыводитьНикакихИнформационныхСообщенийПользователю = Истина;
	 ИмяВременногоФайлаОбмена = ПолучитьИмяВременногоФайла("xml");
	 Обработка.ИмяФайлаОбмена = ИмяВременногоФайлаОбмена;
	 Обработка.ЗагрузитьПравилаОбмена();
	 
	 ТипЗначения=ТипЗнч(Объект);
	 
	 Если ТипЗначения=Тип("Массив") Тогда
	 	Обработка.Параметры.ЭлементВыгрузки = Объект[0].Ссылка;
	 Иначе
	 	Обработка.Параметры.ЭлементВыгрузки = Объект;
	 КонецЕсли;	 	

	 Обработка.ВыполнитьВыгрузку();

	 Текст = Новый ТекстовыйДокумент;
	 Текст.Прочитать(ИмяВременногоФайлаОбмена);
	 
	Попытка
	   УдалитьФайлы(ИмяВременногоФайлаПравил);
	Исключение
	   ЗаписьЖурналаРегистрации(НСтр("ru = 'Кафка.ОбъектВСтрокуXML'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Попытка
	   УдалитьФайлы(ИмяВременногоФайлаОбмена);
	Исключение
	   ЗаписьЖурналаРегистрации(НСтр("ru = 'Кафка.ОбъектВСтрокуXML'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Текст.ПолучитьТекст(); 		 
 КонецФункции
 
// Отправить по каналу.
// 
// Параметры:
//  ОблачноеСобытие - Структура - Облачное событие
// 
// Возвращаемое значение:
//  Неопределено, Строка - Отправить по каналу
Функция ОтправитьПоКаналу(ОблачноеСобытие) Экспорт
	
	
	//мои люимые грязные хакИ
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
		
	ВотЧтоЖдетКафка = Новый Структура("records", Новый Массив);
	CloudEvent = СтруктураОблачногоСобытия(ОблачноеСобытие);
	ЗаписьСобытия = Новый Структура("value", CloudEvent);
	
	ВотЧтоЖдетКафка["records"].Добавить(ЗаписьСобытия);
	
	ЗаписатьJSON(ЗаписьJSON, ВотЧтоЖдетКафка);
	
	ВотЭтоМЫВПроксиИДолжныНаправить = ЗаписьJSON.Закрыть();
	
		
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/vnd.kafka.json.v2+json");
	
	Попытка
		ВозвращаемоеЗначение = КоннекторHTTP.Post(
	    		"http://" + Константы.АдресБрокера.Получить() + ":8082/topics/" + ОблачноеСобытие.ИмяКаналаОтправки,
	    		ВотЭтоМЫВПроксиИДолжныНаправить, 
	    		Новый Структура("Заголовки", Заголовки)
			);
			
	    		
		Результат = КоннекторHTTP.КакJson(
			ВозвращаемоеЗначение
		);
		
		ЗаписьПолученногоСмещенияВКанале = Новый ЗаписьJSON;
		ЗаписьПолученногоСмещенияВКанале.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьПолученногоСмещенияВКанале, Результат["offsets"]);
		Результат = ЗаписьПолученногоСмещенияВКанале.Закрыть();

	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	
	Возврат Результат;
	
КонецФункции
 
Функция ПолучитьСообщения(КаналПолучения) Экспорт

	ЗаписьУдачна = Истина;

	Попытка
		ЗаголовкиПодписки = Новый Соответствие;
		ЗаголовкиПодписки.Вставить("Content-Type", "application/vnd.kafka.json.v2+json");
		
		ПараметрыПотокаПодписчика = ПараметрыПодписки(СокрЛП(КаналПолучения.ИмяПодписчика));
		
		//региструем подписчика
		ВыданнаяПодписка = КоннекторHTTP.КакJson(
			КоннекторHTTP.Post(
				"http://" + Константы.АдресБрокера.Получить() + ":8082/consumers/" + СокрЛП(КаналПолучения.ИмяПодписчика),
				ПараметрыПотокаПодписчика,
				Новый Структура("Заголовки", ЗаголовкиПодписки)
			)
		);
		
		//Docker DNS самый лучший
		БазовыйURL = СтрЗаменить(ВыданнаяПодписка["base_uri"], "http://rest-proxy:8082", "http://" + Константы.АдресБрокера.Получить() + ":8082");
		
		//получаемподписку
		КоннекторHTTP.Post(
			БазовыйURL + "/subscription",КаналПодписки(СокрЛП(КаналПолучения.КаналПодписки)),Новый Структура("Заголовки", ЗаголовкиПодписки)
		);
		
		
		
		ЗаголовкиСериализацииЗаписей = Новый Соответствие;
		ЗаголовкиСериализацииЗаписей.Вставить("Accept", "application/vnd.kafka.json.v2+json");
		
		ПараметрыПреобразованияJSON = Новый Структура;
		ПараметрыПреобразованияJSON.Вставить("ПрочитатьВСоответствие", Ложь);

		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("timeout", "1000");

		//получаем записи
		ЗаписиПотока = КоннекторHTTP.КакJson(
			КоннекторHTTP.Get(БазовыйURL + "/records",ПараметрыЗапроса,Новый Структура("Заголовки", ЗаголовкиСериализацииЗаписей)),
			ПараметрыПреобразованияJSON);

		Для каждого _ЗаписьВПотоке из ЗаписиПотока Цикл
			Попытка
				ДанныеПотока = _ЗаписьВПотоке["value"];
				
				МенеджерЗаписи = РегистрыСведений.ДанныеПотокаОбмена.СоздатьМенеджерЗаписи();
			
				МенеджерЗаписи.ВремяПолучения = ТекущаяУниверсальнаяДатаВМиллисекундах();
				МенеджерЗаписи.ПолученныеДанные = Новый ХранилищеЗначения(ДанныеПотока);
				МенеджерЗаписи.Записать();  
				
//				ДанныеДляФиксации = ДанныеФиксации(СокрЛП(КаналПолучения.КаналПодписки),
//					_ЗаписьВПотоке["partition"],
//					_ЗаписьВПотоке["offset"]);
//				КоннекторHTTP.Post(
//					БазовыйURL + "/offsets ", ДанныеДляФиксации, Новый Структура("Заголовки", ЗаголовкиПодписки)
//				);
			Исключение
				ЗаписьУдачна = Ложь;
				Прервать;
			КонецПопытки;
			
		КонецЦикла;

		Если ЗаписьУдачна Тогда
			КоннекторHTTP.Post(
				БазовыйURL + "/offsets",, Новый Структура("Заголовки", ЗаголовкиПодписки)
			);
		КонецЕсли;
		//удаляем коннект подписчика - если не удалить - будет обрущение REST PROXY на перебалансировке
		КоннекторHTTP.Delete(
			БазовыйURL,,Новый Структура("Заголовки", ЗаголовкиПодписки)
		);
	Исключение
		ЗаписьУдачна = Ложь;
	КонецПопытки;
	
	Возврат ЗаписьУдачна;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

 Функция ПреобразоватьJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	 
	 ТипЗначения=ТипЗнч(Значение);
	 
	 Если ТипЗначения=Тип("ТаблицаЗначений") Тогда
		 
		 //Для таблицы значений нужно обратное преобразование с рекурсией
		 ЗаписьJSON=Новый ЗаписьJSON;
		 ЗаписьJSON.УстановитьСтроку();
		 МассивСтрок=ОбщегоНазначения.ТаблицаЗначенийВМассив(Значение);
		 ЗаписатьJSON(ЗаписьJSON, МассивСтрок, , "ПреобразоватьJSON", );
		 ТекстJSON=ЗаписьJSON.Закрыть();
		 
		 //Преобразуем его обратно в типы 1С
		 ЧтениеJSON=Новый ЧтениеJSON;
		 ЧтениеJSON.УстановитьСтроку(ТекстJSON);
		 Возврат ПрочитатьJSON(ЧтениеJSON, Ложь);
		 
	 ИначеЕсли ТипЗначения=Тип("УникальныйИдентификатор") Тогда
		 Возврат СокрЛП(Значение);
	 КонецЕсли;
	 
	 МдОбъекта=Метаданные.НайтиПоТипу(ТипЗначения);
	 Если МдОбъекта=Неопределено Тогда
		 //Это объект простого типа, обработка не требуется
		 Возврат Значение;
	 КонецЕсли;
	 
	 Если Метаданные.Справочники.Содержит(МдОбъекта) Тогда
		 
		 СтрОбъекта=Новый Структура("Идентификатор,ИмяТипа", СокрЛП(Значение.УникальныйИдентификатор()),МдОбъекта.ПолноеИмя());
		 Если МдОбъекта.ДлинаКода>0 Тогда
			 СтрОбъекта.Вставить("Код", Значение.Код);
		 КонецЕсли;
		 Если МдОбъекта.ДлинаНаименования>0 Тогда
			 СтрОбъекта.Вставить("Наименование", Значение.Наименование);
		 КонецЕсли;
		 Если МдОбъекта.Иерархический>0 Тогда
			 СтрОбъекта.Вставить("Родитель", СокрЛП(Значение.Родитель.УникальныйИдентификатор()));
		 КонецЕсли;
		 Если МдОбъекта.Владельцы.Количество() и ЗначениеЗаполнено(Значение.Владелец) Тогда
			 СтрОбъекта.Вставить("Владелец", СокрЛП(Значение.Владелец.УникальныйИдентификатор()));
		 КонецЕсли;
		 Возврат СтрОбъекта;
		 
	 ИначеЕсли Метаданные.Документы.Содержит(МдОбъекта) Тогда
		 
		 Возврат Новый Структура("Идентификатор,ИмяТипа,Представление,Дата,Номер", СокрЛП(Значение.УникальныйИдентификатор()), МдОбъекта.ПолноеИмя(), СокрЛП(Значение), Значение.Дата, Значение.Номер);
		 
	 ИначеЕсли Метаданные.Перечисления.Содержит(МдОбъекта) Тогда
		 //Перечисления в виде имён значений
		 Если Значение.Пустая() Тогда
			 Возврат "";
		 Иначе
			 Возврат ОбщегоНазначения.ИмяЗначенияПеречисления(Значение);
		 КонецЕсли;
	 КонецЕсли;
	 
	 //Строковое представление и всё
	 Возврат СокрЛП(Значение);
	 
 КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтруктураОблачногоСобытия(ОблачноеСобытие)
	
	СхемаДанныхСамоеЛучшееЧтоЕсть =  ПолучитьобщийМакет("CloudEventSchemaExample").ПолучитьТекст();
	
	
	ЧтениеJSON = Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(СхемаДанныхСамоеЛучшееЧтоЕсть);
	
	ВотЭтоЕдинаяСпецификация = 
		ПрочитатьJSON(ЧтениеJSON);
	
	Если ОблачноеСобытие.ТипСодержимого = ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ТипСодержимого.application_xml) Тогда
		ВотЭтоЕдинаяСпецификация["data"] = ОблачноеСобытие.Данные;
	Иначе
		ЧтениеДанных = Новый ЧтениеJSON();
		ЧтениеДанных.УстановитьСтроку(ОблачноеСобытие.Данные);
		ВотЭтоЕдинаяСпецификация["data"] = ПрочитатьJSON(ЧтениеДанных);
	КонецЕсли;
	
	ЧтениеДанных = Новый ЧтениеJSON();
	ЧтениеДанных.УстановитьСтроку(ОблачноеСобытие.Данные);
		
	ВотЭтоЕдинаяСпецификация["specversion"] = ОблачноеСобытие.ВерсияСпецификации;	
	ВотЭтоЕдинаяСпецификация["type"] = ОблачноеСобытие.Тип;
	ВотЭтоЕдинаяСпецификация["source"] = ОблачноеСобытие.Источник;
	ВотЭтоЕдинаяСпецификация["id"] = "" + ОблачноеСобытие.Идентификатор;
	ВотЭтоЕдинаяСпецификация["time"] = ОблачноеСобытие.ОтметкаВремени;
	ВотЭтоЕдинаяСпецификация["subject"] = ОблачноеСобытие.ПредметИсточника;
	ВотЭтоЕдинаяСпецификация["dataschema"] = ОблачноеСобытие.СхемаДанных;
	ВотЭтоЕдинаяСпецификация["datacontenttype"] = ОблачноеСобытие.ТипСодержимого;
	 
	
	Возврат ВотЭтоЕдинаяСпецификация;

	
КонецФункции

Функция ПараметрыПодписки(ИмяПодписичика, ФорматОжидаемогоСообщения = "json")
	
	//EnableAutoCommit
	параметрыЗапроса = Новый Структура("name, format, auto_offset_reset, auto_commit_enable",
		ИмяПодписичика + "-id-" + новый УникальныйИдентификатор(), ФорматОжидаемогоСообщения, "earliest", "false");
		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, параметрыЗапроса);
	
	стрПараметров = ЗаписьJSON.Закрыть();
	
	стрПараметров = СтрЗаменить(стрПараметров,"auto_offset_reset","auto.offset.reset");
	стрПараметров = СтрЗаменить(стрПараметров,"auto_commit_enable","auto.commit.enable");
	Возврат стрПараметров;
	
КонецФункции

Функция КаналПодписки(ИмяКанала)
	
	//прикинь можно на несколько каналов подписаться ;-) в один поток.
	МассивКаналов = Новый Массив;
	МассивКаналов.Добавить(ИмяКанала);
	ПараметрыЗапроса = Новый Структура("topics", МассивКаналов);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);
	
	стрПараметров = ЗаписьJSON.Закрыть();
	
	Возврат стрПараметров;
	
КонецФункции

#КонецОбласти
