///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ

// Процедура записи движений в регистр ТоварыНаСкладах
//
Процедура ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыНаСкладах;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ТоварыНаСкладах.Записывать = Истина;
	Движения.ТоварыНаСкладах.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура записи движений в регистр ТоварыОрганизаций
//
Процедура ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыОрганизаций;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ТоварыОрганизаций.Записывать = Истина;
	Движения.ТоварыОрганизаций.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура записи движений в регистр ТоварыКПоступлению
//
Процедура ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыКПоступлению;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ТоварыКПоступлению.Записывать = Истина;
	Движения.ТоварыКПоступлению.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура записи движений в регистр ТоварыКОтгрузке
//
Процедура ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыКОтгрузке;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ТоварыКОтгрузке.Записывать = Истина;
	Движения.ТоварыКОтгрузке.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура записи движений в регистр ТоварыКОформлениюИзлишковНедостач
//
Процедура ОтразитьТоварыКОформлениюИзлишковНедостач(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыКОформлениюИзлишковНедостач;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ТоварыКОформлениюИзлишковНедостач.Записывать = Истина;
	Движения.ТоварыКОформлениюИзлишковНедостач.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура записи движений в регистр ТоварыПересчитанные
//
Процедура ОтразитьТоварыПересчитанные(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыПересчитанные;

	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	Движения.ТоварыПересчитанные.Записывать = Истина;
	Движения.ТоварыПересчитанные.Загрузить(Таблица);

КонецПроцедуры

//	LNK 20.12.2016 08:39:50
Процедура ОтразитьОграниченияДвиженийПоИнвентаризации(ДополнительныеСвойства, Движения, Отказ)	Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОграниченияДвиженийПоИнвентаризации;

	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	Движения.ОграниченияДвиженийПоИнвентаризации.Записывать = Истина;
	Движения.ОграниченияДвиженийПоИнвентаризации.Загрузить(Таблица);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С СЕРИЙНЫМИ НОМЕРАМИ И ПОДАРОЧНЫМИ СЕРТИФИКАТАМИ

// Процедура записи движений в регистр ДвиженияСерийныхНомеров
//
Процедура ОтразитьДвиженияСерийныхНомеров(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСерийныхНомеров;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ДвиженияСерийныхНомеров.Записывать = Истина;
	Движения.ДвиженияСерийныхНомеров.Загрузить(Таблица);
	
КонецПроцедуры


// Процедура записи движений в регистр ДвиженияСерийныхНомеров
//
Процедура ОтразитьДвиженияДанныеДляНН(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДанныеДляНН;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ДанныеДляНН.Записывать = Истина;
	Движения.ДанныеДляНН.Загрузить(Таблица);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С СЕБЕСТОИМОСТЬЮ

// Процедура записи движений в регистр СебестоимостьНоменклатуры
//
Процедура ОтразитьДвиженияСебестоимостьНоменклатуры(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСебестоимостьНоменклатуры;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.СебестоимостьНоменклатуры.Записывать = Истина;
	Движения.СебестоимостьНоменклатуры.Загрузить(Таблица);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С НОМЕНКЛАТУРОЙ ПОСТАВЩИКОВ

// Процедура записи движений в регистр НоменклатураПоставщиков
//
Процедура ОтразитьДвиженияНоменклатураПоставщиков(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНоменклатураПоставщиков;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Таблица Цикл
		Запись = РегистрыСведений.НоменклатураПоставщиков.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТЧ);
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ЗАКАЗАМИ ПОСТАВЩИКАМ И ЗАКАЗАМИ НА ПЕРЕМЕЩЕНИЕ

// Функция формирует таблицу значений с документами для закрытия
//
//Параметры
//  Дата    - Дата                      - дата относительно которой будет рассчитываться просрочка поставки
//  Магазин - СправочникСсылка.Магазины - Магазин по которому необходимо закрыть заказы поставщикам.
//  Контрагент - СправочникСсылка.Контрагенты - Контрагент по которому необходимо закрыть заказы поставщикам.
//Возвращаемое значение - Таблица значений
Функция ПолучитьЗаказыПоставщикамДляЗакрытия(Дата, МассивМагазинов = Неопределено, Контрагент = Неопределено) Экспорт
	
	Перем Результат;
	
	ТекстОграниченияПоМагазинам = "";
	Если МассивМагазинов <> Неопределено Тогда
		Если ТипЗнч(МассивМагазинов) = Тип("Массив") 
			И МассивМагазинов.Количество() > 0 Тогда
			ТекстОграниченияПоМагазинам = "И ЗаказПоставщику.Магазин В(&МассивМагазинов)";
		ИначеЕсли ТипЗнч(МассивМагазинов) = Тип("СправочникСсылка.Магазины")
			И ЗначениеЗаполнено(МассивМагазинов) Тогда
			ТекстОграниченияПоМагазинам = "И ЗаказПоставщику.Магазин  = &МассивМагазинов";
		КонецЕсли;	
	КонецЕсли;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ЗаказПоставщику.Ссылка,
	|	ЗаказПоставщику.Дата КАК ДатаЗаказа,
	|	ЗаказПоставщику.ДатаПоступления,
	|	ЗаказПоставщику.ДнейПросрочкиПоставки
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Проведен
	|" + ТекстОграниченияПоМагазинам + "
	|" + ?(ЗначениеЗаполнено(Контрагент), " И ЗаказПоставщику.Контрагент = &Контрагент", "") + "
	|	И НЕ ЗаказПоставщику.Бессрочный
	|	И ДОБАВИТЬКДАТЕ(ЗаказПоставщику.ДатаПоступления, ДЕНЬ, ЗаказПоставщику.ДнейПросрочкиПоставки) <= &Дата
	|	И НЕ ЗаказПоставщику.Закрыт
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПоставщику.Дата");
	
	Запрос.УстановитьПараметр("МассивМагазинов", МассивМагазинов);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции 

// Функция формирует таблицу значений с документами для закрытия
//
//Параметры
//  Дата    - Дата                      - дата относительно которой будет рассчитываться просрочка поставки
//  Магазин - СправочникСсылка.Магазины - Магазин по которому необходимо закрыть заказы поставщикам.
//  Контрагент - СправочникСсылка.Контрагенты - Контрагент по которому необходимо закрыть заказы поставщикам.
//Возвращаемое значение - Таблица значений
Функция ПолучитьЗаказыНаПеремещениеДляЗакрытия(Дата, МассивМагазинов = Неопределено, Поставщик = Неопределено) Экспорт
	
	Перем Результат;
	
	ТекстОграниченияПоМагазинам = "";
	Если МассивМагазинов <> Неопределено Тогда
		Если ТипЗнч(МассивМагазинов) = Тип("Массив") 
			И МассивМагазинов.Количество() > 0 Тогда
			ТекстОграниченияПоМагазинам = "И ЗаказНаПеремещение.МагазинПолучатель В(&МассивМагазинов)";
		ИначеЕсли ТипЗнч(МассивМагазинов) = Тип("СправочникСсылка.Магазины")
			И ЗначениеЗаполнено(МассивМагазинов) Тогда
			ТекстОграниченияПоМагазинам = "И ЗаказНаПеремещение.МагазинПолучатель = &МассивМагазинов";
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ЗаказНаПеремещение.Ссылка,
	|	ЗаказНаПеремещение.Дата КАК ДатаЗаказа,
	|	ЗаказНаПеремещение.ЖелаемаяДатаПоступления КАК ДатаПоступления
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|ГДЕ
	|	ЗаказНаПеремещение.Проведен
	|" + ТекстОграниченияПоМагазинам + "
	|" + ?(ЗначениеЗаполнено(Поставщик), " И ЗаказНаПеремещение.МагазинОтправитель = &Поставщик", "") + "
	|	И ЗаказНаПеремещение.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт)
	|	И ЗаказНаПеремещение.ЖелаемаяДатаПоступления <= &Дата
	|	И НЕ ЗаказНаПеремещение.МагазинОтправитель.СкладУправляющейСистемы
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказНаПеремещение.Дата");
	
	Запрос.УстановитьПараметр("МассивМагазинов", МассивМагазинов);
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Функция формирует таблицу значений с документами для закрытия
//
//Параметры
//  Дата    - Дата                      - дата относительно которой будет рассчитываться просрочка поставки
//  Магазин - СправочникСсылка.Магазины - Магазин по которому необходимо закрыть заказы поставщикам.
//  Поставщик - СправочникСсылка.Контрагенты или СправочникСсылка.Магазин - Контрагент или магазин по которому необходимо закрыть заказы поставщикам и/или заказы на перемещение.
//Возвращаемое значение - Таблица значений
Функция ПолучитьЗаказыПоставщикамЗаказыНаПеремещениеДляЗакрытия(Дата, МассивМагазинов = Неопределено, Поставщик = Неопределено) Экспорт
	
	Перем Результат;
	
	ТекстОграниченияЗаказПоставщикуПоМагазинам = "";
	ТекстОграниченияЗаказНаПеремещениеПоМагазинам = "";
	Если МассивМагазинов <> Неопределено Тогда
		Если ТипЗнч(МассивМагазинов) = Тип("Массив") 
			И МассивМагазинов.Количество() > 0 Тогда
			ТекстОграниченияЗаказПоставщикуПоМагазинам = "И ЗаказПоставщику.Магазин В(&МассивМагазинов)";
			ТекстОграниченияЗаказНаПеремещениеПоМагазинам = "И ЗаказНаПеремещение.МагазинПолучатель В(&МассивМагазинов)";
		ИначеЕсли ТипЗнч(МассивМагазинов) = Тип("СправочникСсылка.Магазины")
			И ЗначениеЗаполнено(МассивМагазинов) Тогда
			ТекстОграниченияЗаказПоставщикуПоМагазинам = "И ЗаказПоставщику.Магазин = &МассивМагазинов";
			ТекстОграниченияЗаказНаПеремещениеПоМагазинам = "И ЗаказНаПеремещение.МагазинПолучатель = &МассивМагазинов";
		КонецЕсли;
	КонецЕсли;
	
	ТекстОграниченияЗаказПоставщикуПоПоставщику = ?(ЗначениеЗаполнено(Поставщик), " И ЗаказПоставщику.Контрагент = &Поставщик", "");
	ТекстОграниченияЗаказНаПеремещениеПоПоставщику = ?(ЗначениеЗаполнено(Поставщик), " И ЗаказНаПеремещение.МагазинОтправитель = &Поставщик", "");
	
	Запрос = Новый Запрос;
	
	ТекстЗапросаПоЗаказамПоставщику = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ЗаказПоставщику.Ссылка КАК Ссылка,
	|	ЗаказПоставщику.Дата КАК ДатаЗаказа,
	|	ЗаказПоставщику.ДатаПоступления КАК ДатаПоступления,
	|	ЗаказПоставщику.Магазин КАК Магазин,
	|	ЗаказПоставщику.Контрагент КАК Поставщик,
	|	ЗаказПоставщику.ДнейПросрочкиПоставки КАК ДнейПросрочкиПоставки
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Проведен
	|	%ТекстОграниченияЗаказПоставщикуПоМагазинам%
	|	%ТекстОграниченияЗаказПоставщикуПоПоставщику%
	|	И НЕ ЗаказПоставщику.Бессрочный
	|	И ДОБАВИТЬКДАТЕ(ЗаказПоставщику.ДатаПоступления, ДЕНЬ, ЗаказПоставщику.ДнейПросрочкиПоставки) <= &Дата
	|	И НЕ ЗаказПоставщику.Закрыт";
	
	ТекстЗапросаПоЗаказамПоставщику = СтрЗаменить(ТекстЗапросаПоЗаказамПоставщику, "%ТекстОграниченияЗаказПоставщикуПоМагазинам%", ТекстОграниченияЗаказПоставщикуПоМагазинам);
	ТекстЗапросаПоЗаказамПоставщику = СтрЗаменить(ТекстЗапросаПоЗаказамПоставщику, "%ТекстОграниченияЗаказПоставщикуПоПоставщику%", ТекстОграниченияЗаказПоставщикуПоПоставщику);
	
	ТекстЗапросаОбъединитьВсе = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ТекстЗапросаПоЗаказамНаПеремещение = "
	|ВЫБРАТЬ %РАЗРЕШЕННЫЕ%
	|	ЗаказНаПеремещение.Ссылка КАК Ссылка,
	|	ЗаказНаПеремещение.Дата КАК ДатаЗаказа,
	|	ЗаказНаПеремещение.ЖелаемаяДатаПоступления КАК ДатаПоступления,
	|	ЗаказНаПеремещение.МагазинПолучатель КАК Магазин,
	|	ЗаказНаПеремещение.МагазинОтправитель КАК Поставщик,
	|	0 КАК ДнейПросрочкиПоставки
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|ГДЕ
	|	ЗаказНаПеремещение.Проведен
	|	%ТекстОграниченияЗаказНаПеремещениеПоМагазинам%
	|	%ТекстОграниченияЗаказНаПеремещениеПоПоставщику%
	|	И ЗаказНаПеремещение.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт)
	|	И ЗаказНаПеремещение.ЖелаемаяДатаПоступления < &Дата
	|	И НЕ ЗаказНаПеремещение.МагазинОтправитель.СкладУправляющейСистемы";

	ТекстЗапросаПоЗаказамНаПеремещение = СтрЗаменить(ТекстЗапросаПоЗаказамНаПеремещение, "%ТекстОграниченияЗаказНаПеремещениеПоМагазинам%", ТекстОграниченияЗаказНаПеремещениеПоМагазинам);
	ТекстЗапросаПоЗаказамНаПеремещение = СтрЗаменить(ТекстЗапросаПоЗаказамНаПеремещение, "%ТекстОграниченияЗаказНаПеремещениеПоПоставщику%", ТекстОграниченияЗаказНаПеремещениеПоПоставщику);
	
	Если Поставщик = Неопределено Тогда
		ТекстЗапросаПоЗаказамНаПеремещение = СтрЗаменить(ТекстЗапросаПоЗаказамНаПеремещение, "%РАЗРЕШЕННЫЕ%", "");
		ТекстЗапроса = ТекстЗапросаПоЗаказамПоставщику + ТекстЗапросаОбъединитьВсе + ТекстЗапросаПоЗаказамНаПеремещение;
	ИначеЕсли ТипЗнч(Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда 
		ТекстЗапроса = ТекстЗапросаПоЗаказамПоставщику;
	ИначеЕсли ТипЗнч(Поставщик) = Тип("СправочникСсылка.Магазины") Тогда
		ТекстЗапросаПоЗаказамНаПеремещение = СтрЗаменить(ТекстЗапросаПоЗаказамНаПеремещение, "%РАЗРЕШЕННЫЕ%", "РАЗРЕШЕННЫЕ");
		ТекстЗапроса = ТекстЗапросаПоЗаказамНаПеремещение;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивМагазинов", МассивМагазинов);
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	Запрос.УстановитьПараметр("Дата", Дата);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Сортировать("ДатаЗаказа Возр");
	
	Возврат Результат;
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ РЕГЛАМЕНТНЫХ ЗАДАНИЙ

// Процедура обновляет регистр сведений "ИнформативныеОстаткиТоваровПоМагазинам"
//
Процедура ОбновлениеРегистраСведенийИнформативныеОстаткиТоваровДляМагазинов() Экспорт

	Если ПустаяСтрока(ИмяПользователя()) Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанных.Магазин КАК Магазин,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	СУММА(ТаблицаДанных.КоличествоТоваровПоДаннымУчета) КАК Количество,
		|	СУММА(ТаблицаДанных.КоличествоТоваровДляМиграции) КАК КоличествоТоваровДляМиграции
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИнформацияПоМагазинам.Магазин КАК Магазин,
		|		ИнформацияПоМагазинам.Номенклатура КАК Номенклатура,
		|		ИнформацияПоМагазинам.Характеристика КАК Характеристика,
		|		0 КАК КоличествоТоваровПоДаннымУчета,
		|		ИнформацияПоМагазинам.Количество КАК КоличествоТоваровДляМиграции
		|	ИЗ
		|		РегистрСведений.ИнформативныеОстаткиТоваровПоМагазинам КАК ИнформацияПоМагазинам
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварыНаСкладах.Склад.Магазин,
		|		ТоварыНаСкладах.Номенклатура,
		|		ТоварыНаСкладах.Характеристика,
		|		ТоварыНаСкладах.КоличествоОстаток,
		|		0
		|	ИЗ
		|		РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, ) КАК ТоварыНаСкладах) КАК ТаблицаДанных
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДанных.Магазин,
		|	ТаблицаДанных.Номенклатура,
		|	ТаблицаДанных.Характеристика
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаДанных.КоличествоТоваровДляМиграции) <> СУММА(ТаблицаДанных.КоличествоТоваровПоДаннымУчета)"
		);
		Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(ТекущаяДатаСеанса()));

		НаборЗаписей = РегистрыСведений.ИнформативныеОстаткиТоваровПоМагазинам.СоздатьНаборЗаписей();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		ОбменДаннымиСервер.УстановитьВсехПолучателей(НаборЗаписей.ОбменДанными.Получатели, "ПоМагазину");

		Выборка = Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл

			НаборЗаписей.Очистить();

			НаборЗаписей.Отбор.Магазин.Установить(Выборка.Магазин);
			НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика);

			Если НЕ Выборка.Количество = 0 Тогда

				Запись = НаборЗаписей.Добавить();

				Запись.Магазин        = Выборка.Магазин;
				Запись.Номенклатура   = Выборка.Номенклатура;
				Запись.Характеристика = Выборка.Характеристика;
				Запись.Количество     = Выборка.Количество;

				Запись.ДатаИзменения  = ТекущаяДатаСеанса();

			КонецЕсли;

			НаборЗаписей.Записать();

		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура обновляет регистр сведений "ИнформативныеОстаткиТоваровПоСкладам"
//
Процедура ОбновлениеРегистраСведенийИнформативныеОстаткиТоваровДляРабочихМест() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если ПараметрыСеанса.ИспользуемыеПланыОбмена.Найти("ПоРабочемуМесту") <> Неопределено  
		И НЕ ПланыОбмена.ПоРабочемуМесту.ЭтоРабочееМесто() Тогда 
		
		СравнениеОстатков = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ЗапросДанныхДляИзменения.Склад,
		|	ЗапросДанныхДляИзменения.Номенклатура,
		|	ЗапросДанныхДляИзменения.Характеристика,
		|	СУММА(ЗапросДанныхДляИзменения.КоличествоТоваровПоДаннымУчета) КАК Количество,
		|	СУММА(ЗапросДанныхДляИзменения.КоличествоТоваровДляМиграции) КАК КоличествоТоваровДляМиграции
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИнформативныеОстаткиТоваровПоСкладам.Склад КАК Склад,
		|		ИнформативныеОстаткиТоваровПоСкладам.Номенклатура КАК Номенклатура,
		|		ИнформативныеОстаткиТоваровПоСкладам.Характеристика КАК Характеристика,
		|		ИнформативныеОстаткиТоваровПоСкладам.Количество КАК КоличествоТоваровДляМиграции,
		|		0 КАК КоличествоТоваровПоДаннымУчета
		|	ИЗ
		|		РегистрСведений.ИнформативныеОстаткиТоваровПоСкладам КАК ИнформативныеОстаткиТоваровПоСкладам
		|	ГДЕ
		|		ИнформативныеОстаткиТоваровПоСкладам.Склад.Магазин В(&МассивОграниченийПоМагазинам)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварыНаСкладахОстатки.Склад,
		|		ТоварыНаСкладахОстатки.Номенклатура,
		|		ТоварыНаСкладахОстатки.Характеристика,
		|		0,
		|		ТоварыНаСкладахОстатки.КоличествоОстаток
		|	ИЗ
		|		РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, Склад.Магазин В (&МассивОграниченийПоМагазинам)) КАК ТоварыНаСкладахОстатки) КАК ЗапросДанныхДляИзменения
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗапросДанныхДляИзменения.Склад,
		|	ЗапросДанныхДляИзменения.Номенклатура,
		|	ЗапросДанныхДляИзменения.Характеристика
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗапросДанныхДляИзменения.КоличествоТоваровДляМиграции) <> СУММА(ЗапросДанныхДляИзменения.КоличествоТоваровПоДаннымУчета)");
		СравнениеОстатков.УстановитьПараметр("ДатаОстатков", КонецДня(ТекущаяДатаСеанса()));
		
		Если ПараметрыСеанса.ИспользуемыеПланыОбмена.Найти("ПоМагазину") <> Неопределено
			И ОбменДаннымиПовтИсп.ГлавныйУзел() <> Неопределено Тогда
			//в узле -магазине РИБ нас интересуют только склады  магазинов, заданных для этого узла
			МассивОграниченийПоМагазинам = ПланыОбмена.ПоМагазину.ЭтотУзел().Магазины.ВыгрузитьКолонку("Магазин");	
			
		ИначеЕсли ПараметрыСеанса.ИспользуемыеПланыОбмена.Найти("ПоМагазину") <> Неопределено Тогда
			//остатки по другим складам магазинов РИБ для рабочих мест этого магазина не нужны
			МассивОграниченийПоМагазинам = Новый Массив;
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
			|	Магазины.Ссылка
			|ИЗ
			|	Справочник.Магазины КАК Магазины
			|ГДЕ
			|	(НЕ Магазины.Ссылка В
			|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|					ПоМагазинуМагазины.Магазин
			|				ИЗ
			|					ПланОбмена.ПоМагазину.Магазины КАК ПоМагазинуМагазины))");
			ВыборкаМагазинов = Запрос.Выполнить().Выбрать();					  
			
			Пока ВыборкаМагазинов.Следующий() цикл
								
				МассивОграниченийПоМагазинам.Добавить(ВыборкаМагазинов.Ссылка);
							
			КонецЦикла;	
					
		Иначе	
			
			МассивОграниченийПоМагазинам = Новый Массив;
			ВыборкаМагазинов = Справочники.Магазины.Выбрать();
			
			Пока ВыборкаМагазинов.Следующий() цикл
				
				МассивОграниченийПоМагазинам.Добавить(ВыборкаМагазинов.Ссылка);
				
			КонецЦикла;	
			
		КонецЕсли;
		
		СравнениеОстатков.УстановитьПараметр("МассивОграниченийПоМагазинам",МассивОграниченийПоМагазинам);	
		
		Выборка = СравнениеОстатков.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.ИнформативныеОстаткиТоваровПоСкладам.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Склад.Установить(Выборка.Склад);
			НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика);
			
			НаборЗаписей.Прочитать();
			
			НаборЗаписей.Очистить();
			
			Если Выборка.Количество <> 0 Тогда
				
				Запись = НаборЗаписей.Добавить();
				Запись.Склад                      = Выборка.Склад;
				Запись.Номенклатура               = Выборка.Номенклатура;
				Запись.Характеристика             = Выборка.Характеристика;
				Запись.Количество                 = Выборка.Количество;
				
			КонецЕсли;
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура обновляет номенклатуру поставщиков в регистре сведений
// "Номенклатура поставщиков"
Процедура ОбновлениеНоменклатурыПоставщиков() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда	//	LNK 19.10.2018 09:00:15

		ВызватьИсключение "Отказано! Обновление номенклатуры поставщиков допускается только в ЦБ.";

	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(НоменклатураКорректировки.НоменклатураРегистра) КАК НоменклатураРегистра,
	|	МАКСИМУМ(НоменклатураКорректировки.НоменклатураДокумента) КАК НоменклатураДокумента,
	|	НоменклатураКорректировки.Поставщик КАК Поставщик,
	|	НоменклатураКорректировки.Магазин КАК Магазин,
	|	НоменклатураКорректировки.Номенклатура КАК Номенклатура,
	|	НоменклатураКорректировки.Характеристика КАК Характеристика,
	|	НоменклатураКорректировки.Цена КАК Цена,
	|	НоменклатураКорректировки.ДатаПоследнегоПоступления КАК ДатаПоследнегоПоступления
	|ПОМЕСТИТЬ НоменклатураКорректировки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК НоменклатураРегистра,
	|		ЛОЖЬ КАК НоменклатураДокумента,
	|		НоменклатураПоставщиков.Поставщик КАК Поставщик,
	|		НоменклатураПоставщиков.Магазин КАК Магазин,
	|		НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
	|		НоменклатураПоставщиков.Характеристика КАК Характеристика,
	|		НоменклатураПоставщиков.Цена КАК Цена,
	|		НоменклатураПоставщиков.ДатаПоследнегоПоступления КАК ДатаПоследнегоПоступления
	|	ИЗ
	|		РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЛОЖЬ,
	|		ВЫБОР
	|			КОГДА НоменклатураДокументов.Магазин.СкладУправляющейСистемы
	|					И НоменклатураДокументов.Контрагент ССЫЛКА Справочник.Магазины
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ,
	|		НоменклатураДокументов.Контрагент,
	|		НоменклатураДокументов.Магазин,
	|		НоменклатураДокументов.Номенклатура,
	|		НоменклатураДокументов.Характеристика,
	|		НоменклатураДокументов.Цена,
	|		НоменклатураДокументов.ДатаПоследнегоПоступления
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПоступлениеТоваров.Контрагент КАК Контрагент,
	|			ПоступлениеТоваров.Магазин КАК Магазин,
	|			ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|			ПоступлениеТоваровТовары.Характеристика КАК Характеристика,
	|			ПоступлениеТоваров.Дата КАК ДатаПоследнегоПоступления,
	|			ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА ПоступлениеТоваров.ЦенаВключаетНДС
	|							ИЛИ НЕ ПоступлениеТоваров.УчитыватьНДС
	|							ИЛИ ПоступлениеТоваровТовары.Количество = 0
	|						ТОГДА ВЫБОР
	|								КОГДА ПоступлениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|									ТОГДА ПоступлениеТоваровТовары.Цена
	|								ИНАЧЕ ПоступлениеТоваровТовары.Цена / ПоступлениеТоваровТовары.Упаковка.Коэффициент
	|							КОНЕЦ
	|					ИНАЧЕ (ПоступлениеТоваровТовары.Сумма + ПоступлениеТоваровТовары.СуммаНДС) / ПоступлениеТоваровТовары.Количество
	|				КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена
	|		ИЗ
	|			Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|				ПО ПоступлениеТоваров.Ссылка = ПоступлениеТоваровТовары.Ссылка
	|		ГДЕ
	|			ПоступлениеТоваров.Проведен
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗаказПоставщику.Контрагент,
	|			ЗаказПоставщику.Магазин,
	|			ЗаказПоставщикуТовары.Номенклатура,
	|			ЗаказПоставщикуТовары.Характеристика,
	|			ЗаказПоставщику.ДатаПоступления,
	|			ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА ЗаказПоставщику.ЦенаВключаетНДС
	|							ИЛИ НЕ ЗаказПоставщику.УчитыватьНДС
	|							ИЛИ ЗаказПоставщикуТовары.Количество = 0
	|						ТОГДА ВЫБОР
	|								КОГДА ЗаказПоставщикуТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|									ТОГДА ЗаказПоставщикуТовары.Цена
	|								ИНАЧЕ ЗаказПоставщикуТовары.Цена / ЗаказПоставщикуТовары.Упаковка.Коэффициент
	|							КОНЕЦ
	|					ИНАЧЕ (ЗаказПоставщикуТовары.Сумма + ЗаказПоставщикуТовары.СуммаНДС) / ЗаказПоставщикуТовары.Количество
	|				КОНЕЦ КАК ЧИСЛО(15, 2))
	|		ИЗ
	|			Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|				ПО ЗаказПоставщику.Ссылка = ЗаказПоставщикуТовары.Ссылка
	|		ГДЕ
	|			ЗаказПоставщику.Проведен
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗаказНаПеремещение.МагазинОтправитель,
	|			ЗаказНаПеремещение.МагазинПолучатель,
	|			ЗаказНаПеремещениеТовары.Номенклатура,
	|			ЗаказНаПеремещениеТовары.Характеристика,
	|			ЗаказНаПеремещение.ЖелаемаяДатаПоступления,
	|			0
	|		ИЗ
	|			Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ЗаказНаПеремещениеТовары
	|				ПО ЗаказНаПеремещение.Ссылка = ЗаказНаПеремещениеТовары.Ссылка
	|		ГДЕ
	|			ЗаказНаПеремещение.Проведен
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА ПеремещениеТоваров.ДокументОснование ССЫЛКА Документ.ПеремещениеТоваров
	|						И НЕ ПеремещениеТоваров.ДокументОснование = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|					ТОГДА ПеремещениеТоваров.ДокументОснование.МагазинОтправитель
	|				ИНАЧЕ ПеремещениеТоваров.МагазинОтправитель
	|			КОНЕЦ,
	|			ПеремещениеТоваров.МагазинПолучатель,
	|			ПеремещениеТоваровТовары.Номенклатура,
	|			ПеремещениеТоваровТовары.Характеристика,
	|			ПеремещениеТоваров.Дата,
	|			ПеремещениеТоваровТовары.Цена
	|		ИЗ
	|			Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|				ПО ПеремещениеТоваров.Ссылка = ПеремещениеТоваровТовары.Ссылка
	|		ГДЕ
	|			ПеремещениеТоваров.Проведен
	|			И НЕ ПеремещениеТоваров.ДокументОснование ССЫЛКА Документ.ЗаказПоставщику) КАК НоменклатураДокументов) КАК НоменклатураКорректировки
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураКорректировки.Поставщик,
	|	НоменклатураКорректировки.Магазин,
	|	НоменклатураКорректировки.Номенклатура,
	|	НоменклатураКорректировки.Характеристика,
	|	НоменклатураКорректировки.Цена,
	|	НоменклатураКорректировки.ДатаПоследнегоПоступления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатураРегистра,
	|	НоменклатураДокумента,
	|	Поставщик,
	|	Магазин,
	|	Номенклатура,
	|	Характеристика,
	|	ДатаПоследнегоПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураКорректировки.Поставщик КАК Поставщик,
	|	НоменклатураКорректировки.Магазин КАК Магазин,
	|	НоменклатураКорректировки.Номенклатура КАК Номенклатура,
	|	НоменклатураКорректировки.Характеристика КАК Характеристика,
	|	НоменклатураКорректировки.Цена КАК Цена,
	|	НоменклатураКорректировки.ДатаПоследнегоПоступления КАК ДатаПоследнегоПоступления
	|ИЗ
	|	НоменклатураКорректировки КАК НоменклатураКорректировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НоменклатураКорректировки.Поставщик КАК Поставщик,
	|			НоменклатураКорректировки.Магазин КАК Магазин,
	|			НоменклатураКорректировки.Номенклатура КАК Номенклатура,
	|			НоменклатураКорректировки.Характеристика КАК Характеристика,
	|			МАКСИМУМ(НоменклатураКорректировки.ДатаПоследнегоПоступления) КАК ДатаПоследнегоПоступления
	|		ИЗ
	|			НоменклатураКорректировки КАК НоменклатураКорректировки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НоменклатураКорректировки.Поставщик,
	|			НоменклатураКорректировки.Магазин,
	|			НоменклатураКорректировки.Номенклатура,
	|			НоменклатураКорректировки.Характеристика) КАК Фильтр
	|		ПО НоменклатураКорректировки.Поставщик = Фильтр.Поставщик
	|			И НоменклатураКорректировки.Магазин = Фильтр.Магазин
	|			И НоменклатураКорректировки.Номенклатура = Фильтр.Номенклатура
	|			И НоменклатураКорректировки.Характеристика = Фильтр.Характеристика
	|			И НоменклатураКорректировки.ДатаПоследнегоПоступления = Фильтр.ДатаПоследнегоПоступления
	|ГДЕ
	|	НоменклатураКорректировки.НоменклатураРегистра <> НоменклатураКорректировки.НоменклатураДокумента
	|	И НоменклатураКорректировки.НоменклатураРегистра
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПоследнегоПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураКорректировки.Поставщик КАК Поставщик,
	|	НоменклатураКорректировки.Магазин КАК Магазин,
	|	НоменклатураКорректировки.Номенклатура КАК Номенклатура,
	|	НоменклатураКорректировки.Характеристика КАК Характеристика,
	|	НоменклатураКорректировки.Цена КАК Цена,
	|	НоменклатураКорректировки.ДатаПоследнегоПоступления КАК ДатаПоследнегоПоступления
	|ИЗ
	|	НоменклатураКорректировки КАК НоменклатураКорректировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НоменклатураКорректировки.Поставщик КАК Поставщик,
	|			НоменклатураКорректировки.Магазин КАК Магазин,
	|			НоменклатураКорректировки.Номенклатура КАК Номенклатура,
	|			НоменклатураКорректировки.Характеристика КАК Характеристика,
	|			МАКСИМУМ(НоменклатураКорректировки.ДатаПоследнегоПоступления) КАК ДатаПоследнегоПоступления
	|		ИЗ
	|			НоменклатураКорректировки КАК НоменклатураКорректировки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НоменклатураКорректировки.Поставщик,
	|			НоменклатураКорректировки.Магазин,
	|			НоменклатураКорректировки.Номенклатура,
	|			НоменклатураКорректировки.Характеристика) КАК Фильтр
	|		ПО НоменклатураКорректировки.Поставщик = Фильтр.Поставщик
	|			И НоменклатураКорректировки.Магазин = Фильтр.Магазин
	|			И НоменклатураКорректировки.Номенклатура = Фильтр.Номенклатура
	|			И НоменклатураКорректировки.Характеристика = Фильтр.Характеристика
	|			И НоменклатураКорректировки.ДатаПоследнегоПоступления = Фильтр.ДатаПоследнегоПоступления
	|ГДЕ
	|	НоменклатураКорректировки.НоменклатураРегистра <> НоменклатураКорректировки.НоменклатураДокумента
	|	И НоменклатураКорректировки.НоменклатураДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПоследнегоПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НоменклатураКорректировки"
	);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	НаборЗаписей = РегистрыСведений.НоменклатураПоставщиков.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);

	ОбменДаннымиСервер.УстановитьВсехПолучателей(НаборЗаписей.ОбменДанными.Получатели, "ПоМагазину");
	
	Если НЕ Результаты[1].Пустой() Тогда
		
		Счётчик = 0;	//	отладочная переменная
		ВыборкаУдаляемыхЗаписей = Результаты[1].Выбрать();

		Пока ВыборкаУдаляемыхЗаписей.Следующий() Цикл

			НаборЗаписей.Отбор.Поставщик.Установить(ВыборкаУдаляемыхЗаписей.Поставщик);
			НаборЗаписей.Отбор.Магазин.Установить(ВыборкаУдаляемыхЗаписей.Магазин);
			НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаУдаляемыхЗаписей.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(ВыборкаУдаляемыхЗаписей.Характеристика);

			НаборЗаписей.Записать();

			Счётчик = Счётчик + 1;

		КонецЦикла;

	КонецЕсли;

	Если НЕ Результаты[2].Пустой() Тогда
		
		Счётчик = 0;	//	отладочная переменная
		ВыборкаДобавляемыхЗаписей = Результаты[2].Выбрать();

		Пока ВыборкаДобавляемыхЗаписей.Следующий() Цикл

			НаборЗаписей.Очистить();

			НаборЗаписей.Отбор.Поставщик.Установить(ВыборкаДобавляемыхЗаписей.Поставщик);
			НаборЗаписей.Отбор.Магазин.Установить(ВыборкаДобавляемыхЗаписей.Магазин);
			НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаДобавляемыхЗаписей.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(ВыборкаДобавляемыхЗаписей.Характеристика);

			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.Поставщик = ВыборкаДобавляемыхЗаписей.Поставщик;
			ЗаписьНабора.Магазин   = ВыборкаДобавляемыхЗаписей.Магазин;
			ЗаписьНабора.Номенклатура   = ВыборкаДобавляемыхЗаписей.Номенклатура;
			ЗаписьНабора.Характеристика = ВыборкаДобавляемыхЗаписей.Характеристика;

			ЗаписьНабора.Цена = ВыборкаДобавляемыхЗаписей.Цена;
			ЗаписьНабора.ДатаПоследнегоПоступления = ВыборкаДобавляемыхЗаписей.ДатаПоследнегоПоступления;

			НаборЗаписей.Записать();

			Счётчик = Счётчик + 1;

		КонецЦикла;

	КонецЕсли;

//	Обновление цен и даты поступления
//	---------------------------------------------------------------------------------------
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоступлениеТоваров.Дата КАК Дата,
	|	ПоступлениеТоваров.Контрагент КАК Контрагент,
	|	ПоступлениеТоваров.Магазин КАК Магазин,
	|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровТовары.Характеристика КАК Характеристика,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПоступлениеТоваров.ЦенаВключаетНДС
	|					ИЛИ НЕ ПоступлениеТоваров.УчитыватьНДС
	|					ИЛИ ПоступлениеТоваровТовары.Количество = 0
	|				ТОГДА ВЫБОР
	|						КОГДА ПоступлениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|							ТОГДА ПоступлениеТоваровТовары.Цена
	|						ИНАЧЕ ПоступлениеТоваровТовары.Цена / ПоступлениеТоваровТовары.Упаковка.Коэффициент
	|					КОНЕЦ
	|			ИНАЧЕ (ПоступлениеТоваровТовары.Сумма + ПоступлениеТоваровТовары.СуммаНДС) / ПоступлениеТоваровТовары.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ПоступлениеТоваровТовары.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ Поступления
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|		ПО ПоступлениеТоваровТовары.Ссылка = ПоступлениеТоваров.Ссылка
	|ГДЕ
	|	ПоступлениеТоваров.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПоставщику.ДатаПоступления,
	|	ЗаказПоставщику.Контрагент,
	|	ЗаказПоставщику.Магазин,
	|	ЗаказПоставщикуТовары.Номенклатура,
	|	ЗаказПоставщикуТовары.Характеристика,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказПоставщику.ЦенаВключаетНДС
	|					ИЛИ НЕ ЗаказПоставщику.УчитыватьНДС
	|					ИЛИ ЗаказПоставщикуТовары.Количество = 0
	|				ТОГДА ВЫБОР
	|						КОГДА ЗаказПоставщикуТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|							ТОГДА ЗаказПоставщикуТовары.Цена
	|						ИНАЧЕ ЗаказПоставщикуТовары.Цена / ЗаказПоставщикуТовары.Упаковка.Коэффициент
	|					КОНЕЦ
	|			ИНАЧЕ (ЗаказПоставщикуТовары.Сумма + ЗаказПоставщикуТовары.СуммаНДС) / ЗаказПоставщикуТовары.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	ЗаказПоставщикуТовары.Упаковка
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		ПО ЗаказПоставщикуТовары.Ссылка = ЗаказПоставщику.Ссылка
	|ГДЕ
	|	ЗаказПоставщику.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Поступления.Дата КАК ДатаПоследнегоПоступления,
	|	Поступления.Контрагент КАК Контрагент,
	|	Поступления.Магазин КАК Магазин,
	|	Поступления.Номенклатура КАК Номенклатура,
	|	Поступления.Характеристика КАК Характеристика,
	|	Поступления.Цена КАК Цена
	|ПОМЕСТИТЬ ЦеныНоменклатуры
	|ИЗ
	|	Поступления КАК Поступления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(Поступления.Дата) КАК Дата,
	|			Поступления.Контрагент КАК Контрагент,
	|			Поступления.Магазин КАК Магазин,
	|			Поступления.Номенклатура КАК Номенклатура,
	|			Поступления.Характеристика КАК Характеристика
	|		ИЗ
	|			Поступления КАК Поступления
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Поступления.Контрагент,
	|			Поступления.Магазин,
	|			Поступления.Номенклатура,
	|			Поступления.Характеристика) КАК МаксимальнаяДата
	|		ПО Поступления.Дата = МаксимальнаяДата.Дата
	|			И Поступления.Контрагент = МаксимальнаяДата.Контрагент
	|			И Поступления.Магазин = МаксимальнаяДата.Магазин
	|			И Поступления.Номенклатура = МаксимальнаяДата.Номенклатура
	|			И Поступления.Характеристика = МаксимальнаяДата.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Магазин,
	|	Характеристика,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Поступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураПоставщиков.Поставщик КАК Поставщик,
	|	НоменклатураПоставщиков.Магазин КАК Магазин,
	|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
	|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
	|	ЦеныНоменклатуры.ДатаПоследнегоПоступления КАК ДатаПоследнегоПоступления,
	|	ЦеныНоменклатуры.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ПО НоменклатураПоставщиков.Поставщик = ЦеныНоменклатуры.Контрагент
	|			И НоменклатураПоставщиков.Магазин = ЦеныНоменклатуры.Магазин
	|			И НоменклатураПоставщиков.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|			И НоменклатураПоставщиков.Характеристика = ЦеныНоменклатуры.Характеристика
	|			И (НоменклатураПоставщиков.ДатаПоследнегоПоступления <> ЦеныНоменклатуры.ДатаПоследнегоПоступления
	|				ИЛИ НоменклатураПоставщиков.Цена <> ЦеныНоменклатуры.Цена)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПоследнегоПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЦеныНоменклатуры"
	);

	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда
		
		Счётчик = 0;	//	отладочная переменная

		ВыборкаДобавляемыхЗаписей = Результат.Выбрать();

		Пока ВыборкаДобавляемыхЗаписей.Следующий() Цикл

			НаборЗаписей.Очистить();

			НаборЗаписей.Отбор.Поставщик.Установить(ВыборкаДобавляемыхЗаписей.Поставщик);
			НаборЗаписей.Отбор.Магазин.Установить(ВыборкаДобавляемыхЗаписей.Магазин);
			НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаДобавляемыхЗаписей.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(ВыборкаДобавляемыхЗаписей.Характеристика);

			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.Поставщик = ВыборкаДобавляемыхЗаписей.Поставщик;
			ЗаписьНабора.Магазин   = ВыборкаДобавляемыхЗаписей.Магазин;
			ЗаписьНабора.Номенклатура   = ВыборкаДобавляемыхЗаписей.Номенклатура;
			ЗаписьНабора.Характеристика = ВыборкаДобавляемыхЗаписей.Характеристика;

			ЗаписьНабора.Цена = ВыборкаДобавляемыхЗаписей.Цена;
			ЗаписьНабора.ДатаПоследнегоПоступления = ВыборкаДобавляемыхЗаписей.ДатаПоследнегоПоступления;

			НаборЗаписей.Записать();

			Счётчик = Счётчик + 1;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Процедура обновляет номенклатуру поставщиков в регистре сведений
// "Номенклатура поставщиков"
Процедура ОбновлениеНоменклатурыПоставщиков_УДАЛИТЬ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		ВызватьИсключение "Отказано! Обновление номенклатуры поставщиков допускается только в ЦБ.";

	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(НоменклатураКорректировки.НоменклатураРегистра) КАК НоменклатураРегистра,
	|	МАКСИМУМ(НоменклатураКорректировки.НоменклатураДокумента) КАК НоменклатураДокумента,
	|	НоменклатураКорректировки.Поставщик КАК Поставщик,
	|	НоменклатураКорректировки.Магазин КАК Магазин,
	|	НоменклатураКорректировки.Номенклатура КАК Номенклатура,
	|	НоменклатураКорректировки.Характеристика КАК Характеристика,
	|	НоменклатураКорректировки.Цена КАК Цена,
	|	НоменклатураКорректировки.ДатаПоследнегоПоступления КАК ДатаПоследнегоПоступления
	|ПОМЕСТИТЬ НоменклатураКорректировки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК НоменклатураРегистра,
	|		ЛОЖЬ КАК НоменклатураДокумента,
	|		НоменклатураПоставщиков.Поставщик КАК Поставщик,
	|		НоменклатураПоставщиков.Магазин КАК Магазин,
	|		НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
	|		НоменклатураПоставщиков.Характеристика КАК Характеристика,
	|		НоменклатураПоставщиков.Цена КАК Цена,
	|		НоменклатураПоставщиков.ДатаПоследнегоПоступления КАК ДатаПоследнегоПоступления
	|	ИЗ
	|		РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		НоменклатураДокументов.Контрагент,
	|		НоменклатураДокументов.Магазин,
	|		НоменклатураДокументов.Номенклатура,
	|		НоменклатураДокументов.Характеристика,
	|		НоменклатураДокументов.Цена,
	|		НоменклатураДокументов.ДатаПоследнегоПоступления
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПоступлениеТоваров.Контрагент КАК Контрагент,
	|			ПоступлениеТоваров.Магазин КАК Магазин,
	|			ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|			ПоступлениеТоваровТовары.Характеристика КАК Характеристика,
	|			ПоступлениеТоваров.Дата КАК ДатаПоследнегоПоступления,
	|			ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА ПоступлениеТоваров.ЦенаВключаетНДС
	|							ИЛИ НЕ ПоступлениеТоваров.УчитыватьНДС
	|							ИЛИ ПоступлениеТоваровТовары.Количество = 0
	|						ТОГДА ВЫБОР
	|								КОГДА ПоступлениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|									ТОГДА ПоступлениеТоваровТовары.Цена
	|								ИНАЧЕ ПоступлениеТоваровТовары.Цена / ПоступлениеТоваровТовары.Упаковка.Коэффициент
	|							КОНЕЦ
	|					ИНАЧЕ (ПоступлениеТоваровТовары.Сумма + ПоступлениеТоваровТовары.СуммаНДС) / ПоступлениеТоваровТовары.Количество
	|				КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена
	|		ИЗ
	|			Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|				ПО ПоступлениеТоваров.Ссылка = ПоступлениеТоваровТовары.Ссылка
	|		ГДЕ
	|			ПоступлениеТоваров.Проведен
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗаказПоставщику.Контрагент,
	|			ЗаказПоставщику.Магазин,
	|			ЗаказПоставщикуТовары.Номенклатура,
	|			ЗаказПоставщикуТовары.Характеристика,
	|			ЗаказПоставщику.Дата,
	|			ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА ЗаказПоставщику.ЦенаВключаетНДС
	|							ИЛИ НЕ ЗаказПоставщику.УчитыватьНДС
	|							ИЛИ ЗаказПоставщикуТовары.Количество = 0
	|						ТОГДА ВЫБОР
	|								КОГДА ЗаказПоставщикуТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|									ТОГДА ЗаказПоставщикуТовары.Цена
	|								ИНАЧЕ ЗаказПоставщикуТовары.Цена / ЗаказПоставщикуТовары.Упаковка.Коэффициент
	|							КОНЕЦ
	|					ИНАЧЕ (ЗаказПоставщикуТовары.Сумма + ЗаказПоставщикуТовары.СуммаНДС) / ЗаказПоставщикуТовары.Количество
	|				КОНЕЦ КАК ЧИСЛО(15, 2))
	|		ИЗ
	|			Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|				ПО ЗаказПоставщику.Ссылка = ЗаказПоставщикуТовары.Ссылка
	|		ГДЕ
	|			ЗаказПоставщику.Проведен
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗаказНаПеремещение.МагазинОтправитель,
	|			ЗаказНаПеремещение.МагазинПолучатель,
	|			ЗаказНаПеремещениеТовары.Номенклатура,
	|			ЗаказНаПеремещениеТовары.Характеристика,
	|			ЗаказНаПеремещение.Дата,
	|			0
	|		ИЗ
	|			Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ЗаказНаПеремещениеТовары
	|				ПО ЗаказНаПеремещение.Ссылка = ЗаказНаПеремещениеТовары.Ссылка
	|		ГДЕ
	|			ЗаказНаПеремещение.Проведен
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА ПеремещениеТоваров.ДокументОснование ССЫЛКА Документ.ПеремещениеТоваров
	|						И НЕ ПеремещениеТоваров.ДокументОснование = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|					ТОГДА ПеремещениеТоваров.ДокументОснование.МагазинОтправитель
	|				ИНАЧЕ ПеремещениеТоваров.МагазинОтправитель
	|			КОНЕЦ,
	|			ПеремещениеТоваров.МагазинПолучатель,
	|			ПеремещениеТоваровТовары.Номенклатура,
	|			ПеремещениеТоваровТовары.Характеристика,
	|			ПеремещениеТоваров.Дата,
	|			ПеремещениеТоваровТовары.Цена
	|		ИЗ
	|			Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|				ПО ПеремещениеТоваров.Ссылка = ПеремещениеТоваровТовары.Ссылка
	|		ГДЕ
	|			ПеремещениеТоваров.Проведен
	|			И НЕ ПеремещениеТоваров.ДокументОснование ССЫЛКА Документ.ЗаказПоставщику) КАК НоменклатураДокументов) КАК НоменклатураКорректировки
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураКорректировки.Поставщик,
	|	НоменклатураКорректировки.Магазин,
	|	НоменклатураКорректировки.Номенклатура,
	|	НоменклатураКорректировки.Характеристика,
	|	НоменклатураКорректировки.Цена,
	|	НоменклатураКорректировки.ДатаПоследнегоПоступления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатураРегистра,
	|	НоменклатураДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураКорректировки.Поставщик КАК Поставщик,
	|	НоменклатураКорректировки.Магазин КАК Магазин,
	|	НоменклатураКорректировки.Номенклатура КАК Номенклатура,
	|	НоменклатураКорректировки.Характеристика КАК Характеристика
	|ИЗ
	|	НоменклатураКорректировки КАК НоменклатураКорректировки
	|ГДЕ
	|	НоменклатураКорректировки.НоменклатураРегистра <> НоменклатураКорректировки.НоменклатураДокумента
	|	И НоменклатураКорректировки.НоменклатураРегистра
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураКорректировки.Поставщик КАК Поставщик,
	|	НоменклатураКорректировки.Магазин КАК Магазин,
	|	НоменклатураКорректировки.Номенклатура КАК Номенклатура,
	|	НоменклатураКорректировки.Характеристика КАК Характеристика,
	|	НоменклатураКорректировки.Цена КАК Цена,
	|	НоменклатураКорректировки.ДатаПоследнегоПоступления КАК ДатаПоследнегоПоступления
	|ИЗ
	|	НоменклатураКорректировки КАК НоменклатураКорректировки
	|ГДЕ
	|	НоменклатураКорректировки.НоменклатураРегистра <> НоменклатураКорректировки.НоменклатураДокумента
	|	И НоменклатураКорректировки.НоменклатураДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НоменклатураКорректировки"
	);
	
	МассивРезультатов           = Запрос.ВыполнитьПакет();
	РезультатУдаляемыхЗаписей   = МассивРезультатов[1];
	РезультатДобавляемыхЗаписей = МассивРезультатов[2];
	ВыборкаУдаляемыхЗаписей     = РезультатУдаляемыхЗаписей.Выбрать();
	ВыборкаДобавляемыхЗаписей   = РезультатДобавляемыхЗаписей.Выбрать();
	
	НаборЗаписей = РегистрыСведений.НоменклатураПоставщиков.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);

	ОбменДаннымиСервер.УстановитьВсехПолучателей(НаборЗаписей.ОбменДанными.Получатели, "ПоМагазину");

	НачатьТранзакцию();
	
	Если НЕ РезультатУдаляемыхЗаписей.Пустой() Тогда
		
		Пока ВыборкаУдаляемыхЗаписей.Следующий() Цикл

			НаборЗаписей.Отбор.Поставщик.Установить(ВыборкаУдаляемыхЗаписей.Поставщик);
			НаборЗаписей.Отбор.Магазин.Установить(ВыборкаУдаляемыхЗаписей.Магазин);
			НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаУдаляемыхЗаписей.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(ВыборкаУдаляемыхЗаписей.Характеристика);

			НаборЗаписей.Записать();
			//Запись = РегистрыСведений.НоменклатураПоставщиков.СоздатьМенеджерЗаписи();
			//ЗаполнитьЗначенияСвойств(Запись, ВыборкаУдаляемыхЗаписей);
			//Запись.Удалить();

		КонецЦикла;

	КонецЕсли;

	Если НЕ РезультатДобавляемыхЗаписей.Пустой() Тогда

		Пока ВыборкаДобавляемыхЗаписей.Следующий() Цикл

			НаборЗаписей.Очистить();

			НаборЗаписей.Отбор.Поставщик.Установить(ВыборкаДобавляемыхЗаписей.Поставщик);
			НаборЗаписей.Отбор.Магазин.Установить(ВыборкаДобавляемыхЗаписей.Магазин);
			НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаДобавляемыхЗаписей.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(ВыборкаДобавляемыхЗаписей.Характеристика);

			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.Поставщик = ВыборкаДобавляемыхЗаписей.Поставщик;
			ЗаписьНабора.Магазин   = ВыборкаДобавляемыхЗаписей.Магазин;
			ЗаписьНабора.Номенклатура   = ВыборкаДобавляемыхЗаписей.Номенклатура;
			ЗаписьНабора.Характеристика = ВыборкаДобавляемыхЗаписей.Характеристика;

			ЗаписьНабора.Цена = ВыборкаДобавляемыхЗаписей.Цена;
			ЗаписьНабора.ДатаПоследнегоПоступления = ВыборкаДобавляемыхЗаписей.ДатаПоследнегоПоступления;

			НаборЗаписей.Записать();
			//Запись = РегистрыСведений.НоменклатураПоставщиков.СоздатьМенеджерЗаписи();
			//ЗаполнитьЗначенияСвойств(Запись, ВыборкаДобавляемыхЗаписей);
			//Запись.Записать();

		КонецЦикла;

	КонецЕсли;

//	Обновление цен и даты поступления
//	---------------------------------------------------------------------------------------
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоступлениеТоваров.Дата КАК Дата,
	|	ПоступлениеТоваров.Контрагент КАК Контрагент,
	|	ПоступлениеТоваров.Магазин КАК Магазин,
	|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровТовары.Характеристика КАК Характеристика,
	|	ПоступлениеТоваровТовары.Цена КАК Цена,
	|	ПоступлениеТоваровТовары.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ Поступления
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|		ПО ПоступлениеТоваровТовары.Ссылка = ПоступлениеТоваров.Ссылка
	|ГДЕ
	|	ПоступлениеТоваров.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Дата,
	|	ЗаказПоставщику.Контрагент,
	|	ЗаказПоставщику.Магазин,
	|	ЗаказПоставщикуТовары.Номенклатура,
	|	ЗаказПоставщикуТовары.Характеристика,
	|	ЗаказПоставщикуТовары.Цена,
	|	ЗаказПоставщикуТовары.Упаковка
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		ПО ЗаказПоставщикуТовары.Ссылка = ЗаказПоставщику.Ссылка
	|ГДЕ
	|	ЗаказПоставщику.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Поступления.Дата КАК ДатаПоследнегоПоступления,
	|	Поступления.Контрагент КАК Контрагент,
	|	Поступления.Магазин КАК Магазин,
	|	Поступления.Номенклатура КАК Номенклатура,
	|	Поступления.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА Поступления.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Поступления.Цена
	|		ИНАЧЕ Поступления.Цена / Поступления.Упаковка.Коэффициент
	|	КОНЕЦ КАК Цена
	|ПОМЕСТИТЬ ЦеныНоменклатуры
	|ИЗ
	|	Поступления КАК Поступления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(Поступления.Дата) КАК Дата,
	|			Поступления.Контрагент КАК Контрагент,
	|			Поступления.Магазин КАК Магазин,
	|			Поступления.Номенклатура КАК Номенклатура,
	|			Поступления.Характеристика КАК Характеристика
	|		ИЗ
	|			Поступления КАК Поступления
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Поступления.Контрагент,
	|			Поступления.Магазин,
	|			Поступления.Номенклатура,
	|			Поступления.Характеристика) КАК МаксимальнаяДата
	|		ПО Поступления.Дата = МаксимальнаяДата.Дата
	|			И Поступления.Контрагент = МаксимальнаяДата.Контрагент
	|			И Поступления.Магазин = МаксимальнаяДата.Магазин
	|			И Поступления.Номенклатура = МаксимальнаяДата.Номенклатура
	|			И Поступления.Характеристика = МаксимальнаяДата.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Магазин,
	|	Характеристика,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураПоставщиков.Поставщик КАК Поставщик,
	|	НоменклатураПоставщиков.Магазин КАК Магазин,
	|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
	|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
	|	ЦеныНоменклатуры.ДатаПоследнегоПоступления КАК ДатаПоследнегоПоступления,
	|	ЦеныНоменклатуры.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ПО НоменклатураПоставщиков.Поставщик = ЦеныНоменклатуры.Контрагент
	|			И НоменклатураПоставщиков.Магазин = ЦеныНоменклатуры.Магазин
	|			И НоменклатураПоставщиков.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|			И НоменклатураПоставщиков.Характеристика = ЦеныНоменклатуры.Характеристика
	|			И НоменклатураПоставщиков.ДатаПоследнегоПоступления <> ЦеныНоменклатуры.ДатаПоследнегоПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Поступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЦеныНоменклатуры"
	);

	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		ВыборкаДобавляемыхЗаписей = Результат.Выбрать();

		Пока ВыборкаДобавляемыхЗаписей.Следующий() Цикл

			НаборЗаписей.Очистить();

			НаборЗаписей.Отбор.Поставщик.Установить(ВыборкаДобавляемыхЗаписей.Поставщик);
			НаборЗаписей.Отбор.Магазин.Установить(ВыборкаДобавляемыхЗаписей.Магазин);
			НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаДобавляемыхЗаписей.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(ВыборкаДобавляемыхЗаписей.Характеристика);

			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.Поставщик = ВыборкаДобавляемыхЗаписей.Поставщик;
			ЗаписьНабора.Магазин   = ВыборкаДобавляемыхЗаписей.Магазин;
			ЗаписьНабора.Номенклатура   = ВыборкаДобавляемыхЗаписей.Номенклатура;
			ЗаписьНабора.Характеристика = ВыборкаДобавляемыхЗаписей.Характеристика;

			ЗаписьНабора.Цена = ВыборкаДобавляемыхЗаписей.Цена;
			ЗаписьНабора.ДатаПоследнегоПоступления = ВыборкаДобавляемыхЗаписей.ДатаПоследнегоПоступления;

			НаборЗаписей.Записать();
			//Запись = РегистрыСведений.НоменклатураПоставщиков.СоздатьМенеджерЗаписи();
			//ЗаполнитьЗначенияСвойств(Запись, Выборка);
			//Запись.Записать();

		КонецЦикла;

	КонецЕсли;

	ЗафиксироватьТранзакцию();

КонецПроцедуры

// Процедура закрывает документы заказы поставщикам, устанавливая флаг Закрыт в документе
//
Процедура ЗакрытиеЗаказовПоставщикам() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если ПараметрыСеанса.ОбменДаннымиВключен Тогда
		Если ПараметрыСеанса.ИспользуемыеПланыОбмена.Найти("ПоМагазину") <> Неопределено Тогда
			Если ОбменДаннымиПовтИсп.ГлавныйУзел() = Неопределено Тогда
				Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	Магазины.Ссылка КАК Магазин
				|ИЗ
				|	Справочник.Магазины КАК Магазины
				|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.ПоМагазину.Магазины КАК ТЧМагазины
				|		ПО (ТЧМагазины.Магазин = Магазины.Ссылка)
				|ГДЕ
				|	ТЧМагазины.Магазин ЕСТЬ NULL ");
				Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ПоМагазину.ЭтотУзел());
				МассивМагазинов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Магазин");
			Иначе
				Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
				|	ТЧМагазины.Магазин КАК Магазин
				|ИЗ
				|	ПланОбмена.ПоМагазину.Магазины КАК ТЧМагазины
				|ГДЕ
				|	ТЧМагазины.Ссылка = &ЭтотУзел");
				Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ПоМагазину.ЭтотУзел());
				МассивМагазинов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Магазин");
			КонецЕсли;
		Иначе
			МассивМагазинов = Новый Массив;
		КонецЕсли;
	Иначе
		МассивМагазинов = Новый Массив;
	КонецЕсли;
	
	Дата = ТекущаяДатаСеанса();
	ТаблицаЗаказов = ПолучитьЗаказыПоставщикамДляЗакрытия(Дата, МассивМагазинов);
	
	ЗаписьЖурналаРегистрации("Закрытие заказов поставщикам",
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Регламентное закрытие заказов поставщикам'"));
			
	Для каждого ЗаказПоставщику Из ТаблицаЗаказов Цикл
		
		ЗаказПоставщикуОбъект = ЗаказПоставщику.Ссылка.ПолучитьОбъект();
		ЗаказПоставщикуОбъект.Закрыт = Истина;
		
		
		Попытка
			
			ЗаказПоставщикуОбъект.Записать();
			
			ЗаписьЖурналаРегистрации("Закрытие заказов поставщикам",
			УровеньЖурналаРегистрации.Информация, , ,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Регламентное закрытие заказа поставщику %1'"), ЗаказПоставщику.Ссылка));
			
		Исключение
			
			ЗаписьЖурналаРегистрации("Закрытие заказов поставщикам",
			УровеньЖурналаРегистрации.Ошибка, , ,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Во время регламентного закрытия заказа поставщику %1, произошла ошибка:
			|%2'"),ЗаказПоставщику.Ссылка, ОписаниеОшибки()));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура закрывает документы заказы на перемещение, устанавливая статус Закрыт в документе
//
Процедура ЗакрытиеЗаказовНаПеремещение() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если ПараметрыСеанса.ОбменДаннымиВключен Тогда
		Если ПараметрыСеанса.ИспользуемыеПланыОбмена.Найти("ПоМагазину") <> Неопределено Тогда
			Если ОбменДаннымиПовтИсп.ГлавныйУзел() = Неопределено Тогда
				Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	Магазины.Ссылка КАК Магазин
				|ИЗ
				|	Справочник.Магазины КАК Магазины
				|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.ПоМагазину.Магазины КАК ТЧМагазины
				|		ПО (ТЧМагазины.Магазин = Магазины.Ссылка)
				|ГДЕ
				|	ТЧМагазины.Магазин ЕСТЬ NULL ");
				Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ПоМагазину.ЭтотУзел());
				МассивМагазинов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Магазин");
			Иначе
				Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
				|	ТЧМагазины.Магазин КАК Магазин
				|ИЗ
				|	ПланОбмена.ПоМагазину.Магазины КАК ТЧМагазины
				|ГДЕ
				|	ТЧМагазины.Ссылка = &ЭтотУзел");
				Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ПоМагазину.ЭтотУзел());
				МассивМагазинов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Магазин");
			КонецЕсли;
		Иначе
			МассивМагазинов = Новый Массив;
		КонецЕсли;
	Иначе
		МассивМагазинов = Новый Массив;
	КонецЕсли;
	
	Дата = ТекущаяДатаСеанса();
	ТаблицаЗаказов = ПолучитьЗаказыНаПеремещениеДляЗакрытия(Дата, МассивМагазинов);
	
	ЗаписьЖурналаРегистрации("Закрытие заказов на перемещение",
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Регламентное закрытие заказов на перемещение'"));
			
	Для каждого ЗаказНаПеремещение Из ТаблицаЗаказов Цикл
		
		ЗаказНаПеремещениеОбъект = ЗаказНаПеремещение.Ссылка.ПолучитьОбъект();
		ЗаказНаПеремещениеОбъект.Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
		ЗаказНаПеремещениеОбъект.ЗакрытВручную = Истина;
		
		Попытка
			
			ЗаказНаПеремещениеОбъект.Записать();
			
			ЗаписьЖурналаРегистрации("Закрытие заказов на перемещение",
			УровеньЖурналаРегистрации.Информация, , ,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Регламентное закрытие заказа на перемещение %1'"), ЗаказНаПеремещение.Ссылка));
			
		Исключение
			
			ЗаписьЖурналаРегистрации("Закрытие заказов на перемещение",
			УровеньЖурналаРегистрации.Ошибка, , ,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Во время регламентного закрытия заказа на перемещение %1, произошла ошибка:
			|%2'"),ЗаказНаПеремещение.Ссылка, ОписаниеОшибки()));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ЗАПОЛНЕНИЯ ЦЕН ПО ТЧ ДОКУМЕНТОВ ТОВАРОДВИЖЕНИЯ

// Функция заполнения колонки Цена по себестоимости
//
Функция ЗаполнитьЦеныПоСебестоимости(Объект, ИмяТабличнойЧасти) Экспорт
	
	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;

	//заполнение цен
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросПоСебестоимости(Запрос.Текст);
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Для Каждого ТекущаяСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекущаяСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена     = (НайденнаяСтрока <> Неопределено);
		
		Если Не ЦенаНайдена Тогда
						
			Продолжить;
			
		КонецЕсли;
		
		ТекущаяСтрока.Цена  = НайденнаяСтрока.Цена;
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
						
		ЦеныРассчитаны             = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции	

// Функция заполнения колонки Цена по себестоимости в выделенных строках
//
Функция ЗаполнитьЦеныВыделенныхСтрокПоСебестоимости(Объект, ИмяТабличнойЧасти, Знач ВыделенныеСтроки) Экспорт

	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаТаблицы);
		    		
	КонецЦикла;
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
    	
	//заполнение цен
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросПоСебестоимости(Запрос.Текст);
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТабличнойЧасти].Выгрузить(МассивСтрок, "НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Для Каждого ТекущаяСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекущаяСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена     = (НайденнаяСтрока <> Неопределено);
		
		Если Не ЦенаНайдена Тогда
						
			Продолжить;
			
		КонецЕсли;
		
		ТекущаяСтрока.Цена  = НайденнаяСтрока.Цена;
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
						
		ЦеныРассчитаны             = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;

КонецФункции	

// Функция заполнения колонки Цена по себестоимости при пересортице
//
Функция ЗаполнитьЦеныПоСебестоимостиПересортица(Объект, ИмяТабличнойЧасти) Экспорт
	
	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;

	//заполнение цен
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросПоСебестоимости(Запрос.Текст);
	
	// Оприходование товаров
	ТаблицаТоваров = Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,НоменклатураОприходование,ХарактеристикаОприходование");
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), "Упаковка");
	
	ТаблицаТоваров.Колонки.НоменклатураОприходование.Имя   = "Номенклатура";
	ТаблицаТоваров.Колонки.ХарактеристикаОприходование.Имя = "Характеристика";
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Для Каждого ТекущаяСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекущаяСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена     = (НайденнаяСтрока <> Неопределено);
		
		Если Не ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекущаяСтрока.ЦенаОприходование  = НайденнаяСтрока.Цена;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	// Списание товаров
	ТаблицаТоваров = Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,Номенклатура,Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), "Упаковка");
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Для Каждого ТекущаяСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекущаяСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена     = (НайденнаяСтрока <> Неопределено);
		
		Если Не ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекущаяСтрока.Цена  = НайденнаяСтрока.Цена;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Осуществляет заполнение видов цен и цен в тч Товары по виду цен
//
// Параметры:
// Документ                          - ДокументОбъект, для которого необходимо заполнить цены
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены
// ВидЦен                            - СправочникСсылка.ВидыЦен - Вид цен, по которому необходимо заполнить цены
// ВидЦеныВТабличнойЧасти            - Булево - признак наличия колонки "ВидЦены" в ТЧ документа
//
// Возвращаемое значение:
// Булево.
// Истина, если цены заполнены, ложь в противном случае
//
Функция ЗаполнитьЦеныПоВидуЦен(Объект, Знач ИмяТабличнойЧасти, Знач ВидЦен, ЕстьНДС = Истина, ЕстьСуммаСНДС = Ложь, ВидЦеныВТабличнойЧасти = Ложь) Экспорт

	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоВидуЦен(Запрос.Текст);	
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("Дата",   ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Если ТаблицаЦен.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ВидЦеныВТабличнойЧасти Тогда
			
			ТекСтрока.ВидЦены  = ВидЦен;
			
		КонецЕсли;
		
		ТекСтрока.Цена     = НайденнаяСтрока.Цена;
		ТекСтрока.Сумма    = ТекСтрока.Цена * ТекСтрока.КоличествоУпаковок;
		
		Если ЕстьНДС Тогда
			
			ТекСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыСервер.РассчитатьСуммуНДС(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС, Объект.ЦенаВключаетНДС);
			
		КонецЕсли;
		
		Если ЕстьНДС И ЕстьСуммаСНДС Тогда
			
			ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ?(Объект.ЦенаВключаетНДС, 0, ТекСтрока.СуммаНДС);
			
		КонецЕсли;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции // ЗаполнитьЦеныПоВидуЦен()

// Осуществляет заполнение видов цен и цен в тч Товары по виду цен
//
// Параметры:
// Документ                          - ДокументОбъект, для которого необходимо заполнить цены
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены
// ВидЦен                            - СправочникСсылка.ВидыЦен - Вид цен, по которому необходимо заполнить цены
// ВидЦеныВТабличнойЧасти            - Булево - признак наличия колонки "ВидЦены" в ТЧ документа
//
// Возвращаемое значение:
// Булево.
// Истина, если цены заполнены, ложь в противном случае
//
Функция ЗаполнитьЦеныПоВидуЦенПересортица(Объект, Знач ИмяТабличнойЧасти, Знач ВидЦен) Экспорт

	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоВидуЦен(Запрос.Текст);
	
	// Оприходование товаров
	ТаблицаТоваров = Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,НоменклатураОприходование,ХарактеристикаОприходование");
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), "Упаковка");
	
	ТаблицаТоваров.Колонки.НоменклатураОприходование.Имя   = "Номенклатура";
	ТаблицаТоваров.Колонки.ХарактеристикаОприходование.Имя = "Характеристика";
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	Запрос.УстановитьПараметр("Дата"  , ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекСтрока.ЦенаОприходование = НайденнаяСтрока.Цена;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	// Списание товаров
	ТаблицаТоваров = Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,Номенклатура,Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), "Упаковка");
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекСтрока.Цена = НайденнаяСтрока.Цена;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции // ЗаполнитьЦеныПоВидуЦенПересортица()

// Осуществляет заполнение видов цен и цен в тч Товары по виду цен по выделенным строкам
//
// Параметры:
// Объект                            - ДокументОбъект, для которого необходимо заполнить цены
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены
// ВидЦен                            - СправочникСсылка.ВидыЦен - Вид цен, по которому необходимо заполнить цены
// ВыделенныеСтроки                  - Массив строк, в которых необходимо заполнить цены
// ВидЦеныВТабличнойЧасти            - Булево - признак наличия колонки "ВидЦены" в ТЧ документа
//
// Возвращаемое значение:
// Булево
// Истина, если цены заполнены, ложь в противном случае
//
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Объект, Знач ИмяТабличнойЧасти, Знач ВидЦен, Знач ВыделенныеСтроки, ЕстьНДС = Истина, ЕстьСуммаСНДС = Ложь, ВидЦеныВТабличнойЧасти = Ложь) Экспорт

	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоВидуЦен(Запрос.Текст);	
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТабличнойЧасти].Выгрузить(МассивСтрок, "НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("Дата",   ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Если ТаблицаЦен.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ВидЦеныВТабличнойЧасти Тогда
			
			ТекСтрока.ВидЦены  = ВидЦен;
			
		КонецЕсли;
		
		ТекСтрока.Цена     = НайденнаяСтрока.Цена;
		ТекСтрока.Сумма    = ТекСтрока.Цена * ТекСтрока.КоличествоУпаковок;
		
		Если ЕстьНДС Тогда
			
			ТекСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыСервер.РассчитатьСуммуНДС(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС, Объект.ЦенаВключаетНДС);
			
		КонецЕсли;
		
		Если ЕстьНДС И ЕстьСуммаСНДС Тогда
			
			ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ?(Объект.ЦенаВключаетНДС, 0, ТекСтрока.СуммаНДС);
			
		КонецЕсли;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;

	Возврат ЦеныРассчитаны;
	
КонецФункции // ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен()

// Осуществляет заполнение цен в тч Товары по розничным ценам
//
// Параметры:
// Документ                          - ДокументОбъект, для которого необходимо заполнить цены
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены
// Магазин                           - СправочникСсылка.Магазины - Магазин, по которому необходимо заполнить цены
//
// Возвращаемое значение:
// Булево.
// Истина, если цены заполнены, ложь в противном случае
//
Функция ЗаполнитьЦеныПоРозничнымЦенам(Объект, Знач ИмяТабличнойЧасти, Знач Магазин, ЕстьНДС = Истина, ЕстьСуммаСНДС = Ложь,  ПриводитьКМинимальнойЦене = Ложь) Экспорт
	
	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоРозничнымЦенам(Запрос.Текст, Магазин);	
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("Дата",   ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ФорматМагазина");
	СтруктураРеквизитов.Вставить("ПравилоЦенообразования");
	СтруктураРеквизитов.Вставить("ИспользоватьПрименениеЦен");
	СтруктураРеквизитов.Вставить("ВидМинимальныхЦенПродажи");
	РеквизитыМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Магазин, СтруктураРеквизитов);
	
	Запрос.УстановитьПараметр("ФорматОбъектаЦенообразования", РеквизитыМагазина.ФорматМагазина);
	Запрос.УстановитьПараметр("ПравилоЦенообразования", РеквизитыМагазина.ПравилоЦенообразования);
	Запрос.УстановитьПараметр("ИспользоватьПрименениеЦен", РеквизитыМагазина.ИспользоватьПрименениеЦен);
	Запрос.УстановитьПараметр("ПриводитьКМинимальнойЦене", ПриводитьКМинимальнойЦене И ЗначениеЗаполнено(РеквизитыМагазина.ВидМинимальныхЦенПродажи));
	Запрос.УстановитьПараметр("ВидМинимальныхЦенПродажи", РеквизитыМагазина.ВидМинимальныхЦенПродажи);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Если ТаблицаЦен.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
			
		ТекСтрока.Цена     = НайденнаяСтрока.Цена;
		ТекСтрока.Сумма    = ТекСтрока.Цена * ТекСтрока.КоличествоУпаковок;
		
		Если ЕстьНДС Тогда
			
			ТекСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыСервер.РассчитатьСуммуНДС(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС, Объект.ЦенаВключаетНДС);
			
		КонецЕсли;
		
		Если ЕстьНДС И ЕстьСуммаСНДС Тогда
			
			ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ?(Объект.ЦенаВключаетНДС, 0, ТекСтрока.СуммаНДС);
			
		КонецЕсли;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;
		
КонецФункции

// Осуществляет заполнение цен в тч Товары по магазину по выделенным строкам
//
// Параметры:
// Объект                            - ДокументОбъект, для которого необходимо заполнить цены
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены
// Магазин                           - СправочникСсылка.Магазины - магазин, по которому необходимо заполнить цены
// ВыделенныеСтроки                  - Массив строк, в которых необходимо заполнить цены
//
// Возвращаемое значение:
// Булево
// Истина, если цены заполнены, ложь в противном случае
//
Функция ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенам(Объект, Знач ИмяТабличнойЧасти, Знач Магазин, Знач ВыделенныеСтроки, ЕстьНДС = Истина, ЕстьСуммаСНДС = Ложь, ПриводитьКМинимальнойЦене = Ложь) Экспорт
	
	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоРозничнымЦенам(Запрос.Текст, Магазин);
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТабличнойЧасти].Выгрузить(МассивСтрок, "НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("Дата",   ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ФорматМагазина");
	СтруктураРеквизитов.Вставить("ПравилоЦенообразования");
	СтруктураРеквизитов.Вставить("ИспользоватьПрименениеЦен");
	СтруктураРеквизитов.Вставить("ВидМинимальныхЦенПродажи");
	РеквизитыМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Магазин, СтруктураРеквизитов);
	
	Запрос.УстановитьПараметр("ФорматОбъектаЦенообразования", РеквизитыМагазина.ФорматМагазина);
	Запрос.УстановитьПараметр("ПравилоЦенообразования", РеквизитыМагазина.ПравилоЦенообразования);
	Запрос.УстановитьПараметр("ИспользоватьПрименениеЦен", РеквизитыМагазина.ИспользоватьПрименениеЦен);
	Запрос.УстановитьПараметр("ПриводитьКМинимальнойЦене", ПриводитьКМинимальнойЦене И ЗначениеЗаполнено(РеквизитыМагазина.ВидМинимальныхЦенПродажи));
	Запрос.УстановитьПараметр("ВидМинимальныхЦенПродажи", РеквизитыМагазина.ВидМинимальныхЦенПродажи);
		
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Если ТаблицаЦен.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
			
		ТекСтрока.Цена     = НайденнаяСтрока.Цена;
		ТекСтрока.Сумма    = ТекСтрока.Цена * ТекСтрока.КоличествоУпаковок;
		
		Если ЕстьНДС Тогда
			
			ТекСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыСервер.РассчитатьСуммуНДС(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС, Объект.ЦенаВключаетНДС);
			
		КонецЕсли;
		
		Если ЕстьНДС И ЕстьСуммаСНДС Тогда
			
			ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ?(Объект.ЦенаВключаетНДС, 0, ТекСтрока.СуммаНДС);
			
		КонецЕсли;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;

	Возврат ЦеныРассчитаны;
	
КонецФункции	

// Осуществляет заполнение цен в тч Товары по розничным ценам
//
// Параметры:
// Документ                          - ДокументОбъект, для которого необходимо заполнить цены
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены
// Магазин                           - СправочникСсылка.Магазины - Магазин, по которому необходимо заполнить цены
//
// Возвращаемое значение:
// Булево.
// Истина, если цены заполнены, ложь в противном случае
//
Функция ЗаполнитьЦеныПоРозничнымЦенамПересортица(Объект, Знач ИмяТабличнойЧасти, Знач Магазин, ПриводитьКМинимальнойЦене = Ложь) Экспорт
	
	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоРозничнымЦенам(Запрос.Текст, Магазин);
	
	// Оприходование товаров
	ТаблицаТоваров = Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,НоменклатураОприходование,ХарактеристикаОприходование");
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), "Упаковка");
	
	ТаблицаТоваров.Колонки.НоменклатураОприходование.Имя   = "Номенклатура";
	ТаблицаТоваров.Колонки.ХарактеристикаОприходование.Имя = "Характеристика";
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	Запрос.УстановитьПараметр("Дата",   ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ФорматМагазина");
	СтруктураРеквизитов.Вставить("ПравилоЦенообразования");
	СтруктураРеквизитов.Вставить("ИспользоватьПрименениеЦен");
	СтруктураРеквизитов.Вставить("ВидМинимальныхЦенПродажи");
	РеквизитыМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Магазин, СтруктураРеквизитов);
	
	Запрос.УстановитьПараметр("ФорматОбъектаЦенообразования", РеквизитыМагазина.ФорматМагазина);
	Запрос.УстановитьПараметр("ПравилоЦенообразования", РеквизитыМагазина.ПравилоЦенообразования);
	Запрос.УстановитьПараметр("ИспользоватьПрименениеЦен", РеквизитыМагазина.ИспользоватьПрименениеЦен);
	Запрос.УстановитьПараметр("ПриводитьКМинимальнойЦене", ПриводитьКМинимальнойЦене И ЗначениеЗаполнено(РеквизитыМагазина.ВидМинимальныхЦенПродажи));
	Запрос.УстановитьПараметр("ВидМинимальныхЦенПродажи", РеквизитыМагазина.ВидМинимальныхЦенПродажи);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекСтрока.ЦенаОприходование = НайденнаяСтрока.Цена;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	// Списание товаров
	ТаблицаТоваров = Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,Номенклатура,Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), "Упаковка");
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекСтрока.Цена = НайденнаяСтрока.Цена;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;
		
КонецФункции

// Осуществляет заполнение цен в тч Товары по прошлым закупкам
//
// Параметры:
// Документ                          - ДокументОбъект, для которого необходимо заполнить цены
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены
//
// Возвращаемое значение:
// Булево.
// Истина, если цены заполнены, ложь в противном случае
//
Функция ЗаполнитьЦеныПоПрошлымЗакупкам(Объект, Знач ИмяТабличнойЧасти, ЕстьНДС = Истина, ЕстьСуммаСНДС = Ложь) Экспорт
	
	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоПрошлымЗакупкам(Запрос.Текст);
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("Дата",   ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	Запрос.УстановитьПараметр("Поставщик", Объект.Контрагент);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Если ТаблицаЦен.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
			
		ТекСтрока.Цена     = НайденнаяСтрока.Цена;
		ТекСтрока.Сумма    = ТекСтрока.Цена * ТекСтрока.КоличествоУпаковок;
		
		Если ЕстьНДС Тогда
			
			ТекСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыСервер.РассчитатьСуммуНДС(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС, Объект.ЦенаВключаетНДС);
			
		КонецЕсли;
		
		Если ЕстьНДС И ЕстьСуммаСНДС Тогда
			
			ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ?(Объект.ЦенаВключаетНДС, 0, ТекСтрока.СуммаНДС);
			
		КонецЕсли;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;
		
КонецФункции

// Осуществляет заполнение цен в тч Товары по прошлым закупкам по выделенным строкам
//
// Параметры:
// Объект                            - ДокументОбъект, для которого необходимо заполнить цены
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены
// ВыделенныеСтроки                  - Массив строк, в которых необходимо заполнить цены
//
// Возвращаемое значение:
// Булево
// Истина, если цены заполнены, ложь в противном случае
//
Функция ЗаполнитьЦеныВыделенныхСтрокПоПрошлымЗакупкам(Объект, Знач ИмяТабличнойЧасти, Знач ВыделенныеСтроки, ЕстьНДС = Истина, ЕстьСуммаСНДС = Ложь) Экспорт
	
	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоПрошлымЗакупкам(Запрос.Текст);
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТабличнойЧасти].Выгрузить(МассивСтрок, "НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("Дата",   ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	Запрос.УстановитьПараметр("Поставщик", Объект.Контрагент);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Если ТаблицаЦен.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
			
		ТекСтрока.Цена     = НайденнаяСтрока.Цена;
		ТекСтрока.Сумма    = ТекСтрока.Цена * ТекСтрока.КоличествоУпаковок;
		
		Если ЕстьНДС Тогда
			
			ТекСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыСервер.РассчитатьСуммуНДС(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС, Объект.ЦенаВключаетНДС);
			
		КонецЕсли;
		
		Если ЕстьНДС И ЕстьСуммаСНДС Тогда
			
			ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ?(Объект.ЦенаВключаетНДС, 0, ТекСтрока.СуммаНДС);
			
		КонецЕсли;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;

	Возврат ЦеныРассчитаны;
	
КонецФункции	

// Осуществляет заполнение цен в тч Товары по ценам тч "Товары по данным поставщика"
//
// Параметры:
// Документ                          - ДокументОбъект, для которого необходимо заполнить цены
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены
//
// Возвращаемое значение:
// Булево.
// Истина, если цены заполнены, ложь в противном случае
//
Функция ЗаполнитьЦеныПоЦенамДанныхПоставщика(Объект, Знач ИмяТабличнойЧасти, ЕстьНДС = Истина, ЕстьСуммаСНДС = Ложь) Экспорт
	
	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоДаннымПоставщика(Запрос.Текст);
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("ТоварыПоДаннымПоставщика", Объект.ТоварыПоДаннымПоставщика.Выгрузить(, "Номенклатура,Характеристика,Упаковка,Цена"));
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Если ТаблицаЦен.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
			
		ТекСтрока.Цена 	= НайденнаяСтрока.Цена;
		ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.КоличествоУпаковок;
		
		Если ЕстьНДС Тогда
			
			ТекСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыСервер.РассчитатьСуммуНДС(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС, Объект.ЦенаВключаетНДС);
			
		КонецЕсли;
		
		Если ЕстьНДС И ЕстьСуммаСНДС Тогда
			
			ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ?(Объект.ЦенаВключаетНДС, 0, ТекСтрока.СуммаНДС);
			
		КонецЕсли;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Осуществляет заполнение цен в тч Товары по ценам тч "Товары по данным поставщика" в выделенных строках
//
// Параметры:
// Документ                          - ДокументОбъект, для которого необходимо заполнить цены
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены
//
// Возвращаемое значение:
// Булево.
// Истина, если цены заполнены, ложь в противном случае
//
Функция ЗаполнитьЦеныВыделенныхСтрокПоЦенамДанныхПоставщика(Объект, Знач ИмяТабличнойЧасти, Знач ВыделенныеСтроки, ЕстьНДС = Истина, ЕстьСуммаСНДС = Ложь) Экспорт
	
	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;

	
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоДаннымПоставщика(Запрос.Текст);
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТабличнойЧасти].Выгрузить(МассивСтрок, "НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("ТоварыПоДаннымПоставщика", Объект.ТоварыПоДаннымПоставщика.Выгрузить(, "Номенклатура,Характеристика,Упаковка,Цена"));
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Если ТаблицаЦен.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
			
		ТекСтрока.Цена 	= НайденнаяСтрока.Цена;
		ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.КоличествоУпаковок;
		
		Если ЕстьНДС Тогда
			
			ТекСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыСервер.РассчитатьСуммуНДС(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС, Объект.ЦенаВключаетНДС);
			
		КонецЕсли;
		
		Если ЕстьНДС И ЕстьСуммаСНДС Тогда
			
			ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ?(Объект.ЦенаВключаетНДС, 0, ТекСтрока.СуммаНДС);
			
		КонецЕсли;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Осуществляет заполнение цен в тч Товары по произвольной таблице цен
//
// Параметры:
// Документ                          - ДокументОбъект, для которого необходимо заполнить цены
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены
// ТаблицаЦен                        - ТаблицаЗначений - (Номенклатура, Характеристика, Упаковка, Цена) содержащая цены для заполнения
//
// Возвращаемое значение:
// Булево.
// Истина, если цены заполнены, ложь в противном случае
//
Функция ЗаполнитьЦеныПоПроизвольнойТаблицеЦен(Объект, Знач ИмяТабличнойЧасти, ТаблицаЦен, ЕстьНДС = Истина, ЕстьСуммаСНДС = Ложь) Экспорт
	
	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоПроизвольнойТаблицеЦен(Запрос.Текст);
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("ТаблицаЦен", ТаблицаЦен);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Если ТаблицаЦен.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
			
		ТекСтрока.Цена 	= НайденнаяСтрока.Цена;
		ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.КоличествоУпаковок;
		
		Если ЕстьНДС Тогда
			
			ТекСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыСервер.РассчитатьСуммуНДС(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС, Объект.ЦенаВключаетНДС);
			
		КонецЕсли;
		
		Если ЕстьНДС И ЕстьСуммаСНДС Тогда
			
			ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ?(Объект.ЦенаВключаетНДС, 0, ТекСтрока.СуммаНДС);
			
		КонецЕсли;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПОЛУЧЕНИЯ ЦЕН

// Функция получения цены номенклатуры по виду цены
//
Функция ПолучитьЦенуПоВидуЦен(ВидЦены, Дата, Номенклатура, Характеристика, Упаковка) Экспорт

	Цена = 0;
	
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		
		Цена = Номенклатура.Номинал;
		Если ЗначениеЗаполнено(Упаковка) Тогда
			Цена = Цена*Упаковка.Коэффициент; 
		КонецЕсли; 
		
	Иначе		
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА Цены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА Цены.Цена
		|		ИНАЧЕ Цены.Цена / Цены.Упаковка.Коэффициент
		|	КОНЕЦ КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&Дата,
		|			ВидЦены = &ВидЦены
		|				И Номенклатура = &Номенклатура
		|				И Характеристика = &Характеристика) КАК Цены");
		
		Запрос.УстановитьПараметр("ВидЦены"       , ВидЦены);  
		Запрос.УстановитьПараметр("Дата"          , Дата);
		Запрос.УстановитьПараметр("Номенклатура"  , Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
				
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда			
			Если ЗначениеЗаполнено(Выборка.Цена) Тогда				
				Цена = Выборка.Цена;                  				
				Если ЗначениеЗаполнено(Упаковка) Тогда
					Цена = Цена*Упаковка.Коэффициент; 
				КонецЕсли;                            				
			КонецЕсли;			
		КонецЕсли; 
	КонецЕсли;

	Возврат Цена;
	
КонецФункции

// Функция получения цены продажи номенклатуры (регистр ДействующиеЦеныНоменклатуры)
//
Функция ПолучитьЦенуПродажи(Магазин, Дата, Номенклатура, Характеристика, Упаковка, ПриводитьКМинимальнойЦене = Ложь, АкционнаяЦена = Ложь) Экспорт
	
	Цена = 0;
	ДанныеМагазина = ЗапасыПовтИсп.ДанныеМагазинаЦенообразование(Магазин);
	ДанныеТовара   = ЗапасыПовтИсп.ДанныеНоменклатуры(Номенклатура, Упаковка);

	Если ДанныеТовара.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда

		Цена = ДанныеТовара.Номинал * ДанныеТовара.Коэффициент;
		АкционнаяЦена = Истина;	//	LNK 05.08.2021 13:32:56	ПС всегда акционный!

	ИначеЕсли ДанныеМагазина.ИспользоватьПрименениеЦен = Истина И ОбщегоНазначенияРТповтИсп.ИспользоватьПрименениеЦен() Тогда

		Запрос = Новый Запрос;

		Если ПриводитьКМинимальнойЦене И ЗначениеЗаполнено(ДанныеМагазина.ВидМинимальныхЦенПродажи) Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВЫБОР
			|		КОГДА МинимальныеЦены.Цена ЕСТЬ NULL
			|			ТОГДА ВЫБОР
			|					КОГДА ДействующиеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|						ТОГДА ДействующиеЦены.Цена
			|					ИНАЧЕ ДействующиеЦены.Цена / ДействующиеЦены.Упаковка.Коэффициент
			|				КОНЕЦ
			|		КОГДА ВЫБОР
			|				КОГДА МинимальныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|					ТОГДА МинимальныеЦены.Цена
			|				ИНАЧЕ МинимальныеЦены.Цена / МинимальныеЦены.Упаковка.Коэффициент
			|			КОНЕЦ > ВЫБОР
			|				КОГДА ДействующиеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|					ТОГДА ДействующиеЦены.Цена
			|				ИНАЧЕ ДействующиеЦены.Цена / ДействующиеЦены.Упаковка.Коэффициент
			|			КОНЕЦ
			|			ТОГДА ВЫБОР
			|					КОГДА МинимальныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|						ТОГДА МинимальныеЦены.Цена
			|					ИНАЧЕ МинимальныеЦены.Цена / МинимальныеЦены.Упаковка.Коэффициент
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ДействующиеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|					ТОГДА ДействующиеЦены.Цена
			|				ИНАЧЕ ДействующиеЦены.Цена / ДействующиеЦены.Упаковка.Коэффициент
			|			КОНЕЦ
			|	КОНЕЦ КАК Цена,
			|	ДействующиеЦены.Акция КАК Акция
			|ИЗ
			|	РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
			|			&Дата,
			|			ОбъектЦенообразования = &ОбъектЦенообразования
			|				И Номенклатура = &Номенклатура
			|				И Характеристика = &Характеристика) КАК ДействующиеЦены
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|				&Дата,
			|				ВидЦены = &ВидЦены
			|					И Номенклатура = &Номенклатура
			|					И Характеристика = &Характеристика) КАК МинимальныеЦены
			|		ПО ДействующиеЦены.Номенклатура = МинимальныеЦены.Номенклатура
			|			И ДействующиеЦены.Характеристика = МинимальныеЦены.Характеристика"
			;
			Запрос.УстановитьПараметр("ВидЦены", ДанныеМагазина.ВидМинимальныхЦенПродажи); 			
			
		Иначе

			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВЫБОР
			|		КОГДА Цены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА Цены.Цена
			|		ИНАЧЕ Цены.Цена / Цены.Упаковка.Коэффициент
			|	КОНЕЦ КАК Цена,
			|	Цены.Акция КАК Акция
			|ИЗ
			|	РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
			|			&Дата,
			|			ОбъектЦенообразования = &ОбъектЦенообразования
			|				И Номенклатура = &Номенклатура
			|				И Характеристика = &Характеристика) КАК Цены"
			;

		КонецЕсли;

		Запрос.УстановитьПараметр("Дата"                 , Дата);
		Запрос.УстановитьПараметр("Номенклатура"         , Номенклатура);
		Запрос.УстановитьПараметр("Характеристика"       , Характеристика);
		Запрос.УстановитьПараметр("ОбъектЦенообразования", Магазин);
		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда

			Если ЗначениеЗаполнено(Выборка.Цена) Тогда

				Цена = Выборка.Цена * ДанныеТовара.Коэффициент;
				АкционнаяЦена = Выборка.Акция;

			КонецЕсли;

		КонецЕсли;

	Иначе	

		Цена = ПолучитьЦенуПродажиПоЦенамНоменклатуры(Магазин, Дата, Номенклатура, Характеристика, Упаковка, ПриводитьКМинимальнойЦене, АкционнаяЦена);

	КонецЕсли;	
	
	Возврат Цена;

КонецФункции

// Функция получения опорной цены продажи номенклатуры (регистр ДействующиеЦеныНоменклатуры)
//
Функция ПолучитьОпорнуюЦену(Магазин, Дата, Номенклатура, Характеристика, Упаковка, ПриводитьКМинимальнойЦене = Ложь) Экспорт
	
	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ОпорнаяЦена = 0;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаРегистра.Цена КАК Цена,
	|	1 КАК Порядок
	|ИЗ
	|	РегистрСведений.ОпорныеЦеныНоменклатуры.СрезПоследних(
	|			,
	|			Магазин = &ОбъектЦенообразования
	|				И Номенклатура = &Номенклатура
	|				И Упаковка = &Упаковка) КАК ТаблицаРегистра
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаРегистра.Цена * ТаблицаУпаковки.Коэффициент,
	|	2
	|ИЗ
	|	РегистрСведений.ОпорныеЦеныНоменклатуры.СрезПоследних(
	|			,
	|			Магазин = &ОбъектЦенообразования
	|				И Номенклатура = &Номенклатура) КАК ТаблицаРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК ТаблицаУпаковки
	|		ПО (ТаблицаУпаковки.Ссылка = &Упаковка)
	|ГДЕ
	|	ТаблицаРегистра.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|	И НЕ &Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок"
	);
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Упаковка", ?(ЗначениеЗаполнено(Упаковка), Упаковка, Справочники.УпаковкиНоменклатуры.ПустаяСсылка()));
	Запрос.УстановитьПараметр("ОбъектЦенообразования", Магазин);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ОпорнаяЦена = Выборка.Цена;

	КонецЕсли;
	
	Возврат ОпорнаяЦена;
	
КонецФункции

// Функция получения назначенной цены продажи номенклатуры (регистр ЦеныНоменклатуры)
//
Функция ПолучитьЦенуПродажиПоЦенамНоменклатуры(Магазин, Дата, Номенклатура, Характеристика, Упаковка, ПриводитьКМинимальнойЦене = Ложь, АкционнаяЦена = Ложь) Экспорт
	
	Цена = 0;
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Магазин);

	Если ИспользоватьАссортимент Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ассортимент.Номенклатура КАК Номенклатура,
		|	Ассортимент.ВидЦен КАК ВидЦен
		|ПОМЕСТИТЬ втАссортимент
		|ИЗ
		|	РегистрСведений.Ассортимент.СрезПоследних(
		|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
		|			ОбъектПланирования = &ФорматМагазина
		|				И Номенклатура = &Номенклатура) КАК Ассортимент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ассортимент.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
		|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
		|	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)) КАК Цена,
		|	ЦеныНоменклатуры.Акция КАК Акция
		|ПОМЕСТИТЬ РозничныеЦены
		|ИЗ
		|	втАссортимент КАК Ассортимент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Дата,
		|				ВидЦены В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Ц.ВидЦен
		|						ИЗ
		|							втАссортимент КАК Ц)
		|					И Номенклатура = &Номенклатура) КАК ЦеныНоменклатуры
		|		ПО (ЦеныНоменклатуры.Номенклатура = Ассортимент.Номенклатура)
		|			И (ЦеныНоменклатуры.ВидЦены = Ассортимент.ВидЦен)
		|
		|СГРУППИРОВАТЬ ПО
		|	Ассортимент.Номенклатура,
		|	ЦеныНоменклатуры.Характеристика,
		|	ЦеныНоменклатуры.Упаковка,
		|	ЦеныНоменклатуры.Акция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА МинимальныеЦены.Цена ЕСТЬ NULL
		|			ТОГДА РозничныеЦены.Цена
		|		КОГДА ВЫБОР
		|				КОГДА МинимальныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА МинимальныеЦены.Цена
		|				ИНАЧЕ МинимальныеЦены.Цена / МинимальныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ > ВЫБОР
		|				КОГДА РозничныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА РозничныеЦены.Цена
		|				ИНАЧЕ РозничныеЦены.Цена / РозничныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ
		|			ТОГДА МинимальныеЦены.Цена
		|		ИНАЧЕ РозничныеЦены.Цена
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА МинимальныеЦены.Цена ЕСТЬ NULL
		|			ТОГДА РозничныеЦены.Упаковка
		|		КОГДА ВЫБОР
		|				КОГДА МинимальныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА МинимальныеЦены.Цена
		|				ИНАЧЕ МинимальныеЦены.Цена / МинимальныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ > ВЫБОР
		|				КОГДА РозничныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА РозничныеЦены.Цена
		|				ИНАЧЕ РозничныеЦены.Цена / РозничныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ
		|			ТОГДА МинимальныеЦены.Упаковка
		|		ИНАЧЕ РозничныеЦены.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	ВЫБОР
		|		КОГДА МинимальныеЦены.Цена ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(РозничныеЦены.Упаковка.Коэффициент, 1)
		|		КОГДА ВЫБОР
		|				КОГДА МинимальныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА МинимальныеЦены.Цена
		|				ИНАЧЕ МинимальныеЦены.Цена / МинимальныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ > ВЫБОР
		|				КОГДА РозничныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА РозничныеЦены.Цена
		|				ИНАЧЕ РозничныеЦены.Цена / РозничныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ
		|			ТОГДА ЕСТЬNULL(МинимальныеЦены.Упаковка.Коэффициент, 1)
		|		ИНАЧЕ ЕСТЬNULL(РозничныеЦены.Упаковка.Коэффициент, 1)
		|	КОНЕЦ КАК Коэффициент,
		|	ВЫБОР
		|		КОГДА МинимальныеЦены.Акция ЕСТЬ NULL
		|			ТОГДА РозничныеЦены.Акция
		|		ИНАЧЕ МинимальныеЦены.Акция
		|	КОНЕЦ КАК Акция
		|ИЗ
		|	РозничныеЦены КАК РозничныеЦены
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Дата,
		|				&ПриводитьКМинимальнойЦене
		|					И ВидЦены = &ВидМинимальныхЦенПродажи
		|					И Номенклатура = &Номенклатура
		|					И Характеристика = &Характеристика) КАК МинимальныеЦены
		|		ПО РозничныеЦены.Номенклатура = МинимальныеЦены.Номенклатура
		|			И РозничныеЦены.Характеристика = МинимальныеЦены.Характеристика
		|			И (&ПриводитьКМинимальнойЦене)"
		);
		
	Иначе
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеновыеГруппы.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	ЦеновыеГруппы.ВидЦен КАК ВидЦен
		|ПОМЕСТИТЬ ЦеновыеГруппыПравила
		|ИЗ
		|	Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ЦеновыеГруппы
		|ГДЕ
		|	ЦеновыеГруппы.Ссылка = &ПравилоЦенообразования
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидЦен,
		|	ЦеноваяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидЦеныПравила.ВидЦен КАК ВидЦен
		|ПОМЕСТИТЬ ВидЦеныПравила
		|ИЗ
		|	Справочник.ПравилаЦенообразования КАК ВидЦеныПравила
		|ГДЕ
		|	ВидЦеныПравила.Ссылка = &ПравилоЦенообразования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодЗапрос.Номенклатура КАК Номенклатура,
		|	ПодЗапрос.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам) > 0
		|			ТОГДА МАКСИМУМ(ПодЗапрос.УпаковкаПоЦеновымГруппам)
		|		ИНАЧЕ МАКСИМУМ(ПодЗапрос.УпаковкаПоВидуЦен)
		|	КОНЕЦ КАК Упаковка,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам) > 0
		|			ТОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам)
		|		ИНАЧЕ МАКСИМУМ(ПодЗапрос.ЦенаПоВидуЦен)
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам) > 0
		|			ТОГДА МАКСИМУМ(ПодЗапрос.АкцияПоЦеновымГруппам)
		|		ИНАЧЕ МАКСИМУМ(ПодЗапрос.АкцияПоВидуЦен)
		|	КОНЕЦ КАК Акция
		|ПОМЕСТИТЬ РозничныеЦены
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЦеныНоменклатурыПоВидуЦен.Номенклатура КАК Номенклатура,
		|		ЦеныНоменклатурыПоВидуЦен.Характеристика КАК Характеристика,
		|		ЦеныНоменклатурыПоВидуЦен.Упаковка КАК УпаковкаПоВидуЦен,
		|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК УпаковкаПоЦеновымГруппам,
		|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК УпаковкаПоМинимальнымЦенам,
		|		ЦеныНоменклатурыПоВидуЦен.Цена КАК ЦенаПоВидуЦен,
		|		0 КАК ЦенаПоЦеновымГруппам,
		|		0 КАК ЦенаПоМинимальнымЦенам,
		|		ЦеныНоменклатурыПоВидуЦен.Акция КАК АкцияПоВидуЦен,
		|		ЛОЖЬ КАК АкцияПоЦеновымГруппам
		|	ИЗ
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Дата,
		|				ВидЦены В
		|						(ВЫБРАТЬ
		|							ВидЦеныПравила.ВидЦен
		|						ИЗ
		|							ВидЦеныПравила КАК ВидЦеныПравила)
		|					И Номенклатура = &Номенклатура
		|					И Характеристика = &Характеристика) КАК ЦеныНоменклатурыПоВидуЦен
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СправочникНоменклатура.Ссылка,
		|		ЦеныНоменклатурыПоЦеновымГруппам.Характеристика,
		|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка),
		|		ЦеныНоменклатурыПоЦеновымГруппам.Упаковка,
		|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка),
		|		0,
		|		ЕСТЬNULL(ЦеныНоменклатурыПоЦеновымГруппам.Цена, 0),
		|		0,
		|		ЛОЖЬ,
		|		ЕСТЬNULL(ЦеныНоменклатурыПоЦеновымГруппам.Акция, ЛОЖЬ)
		|	ИЗ
		|		ЦеновыеГруппыПравила КАК ЦеновыеГруппыПравила
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|			ПО ЦеновыеГруппыПравила.ЦеноваяГруппа = СправочникНоменклатура.ЦеноваяГруппа
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|					&Дата,
		|					ВидЦены В
		|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|								ЦеновыеГруппыПравила.ВидЦен
		|							ИЗ
		|								ЦеновыеГруппыПравила КАК ЦеновыеГруппыПравила)
		|						И Номенклатура = &Номенклатура
		|						И Характеристика = &Характеристика) КАК ЦеныНоменклатурыПоЦеновымГруппам
		|			ПО (ЦеныНоменклатурыПоЦеновымГруппам.Номенклатура = СправочникНоменклатура.Ссылка)
		|				И (ЦеныНоменклатурыПоЦеновымГруппам.ВидЦены = ЦеновыеГруппыПравила.ВидЦен)) КАК ПодЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ПодЗапрос.Номенклатура,
		|	ПодЗапрос.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА МинимальныеЦены.Цена ЕСТЬ NULL
		|			ТОГДА РозничныеЦены.Цена
		|		КОГДА ВЫБОР
		|				КОГДА МинимальныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА МинимальныеЦены.Цена
		|				ИНАЧЕ МинимальныеЦены.Цена / МинимальныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ > ВЫБОР
		|				КОГДА РозничныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА РозничныеЦены.Цена
		|				ИНАЧЕ РозничныеЦены.Цена / РозничныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ
		|			ТОГДА МинимальныеЦены.Цена
		|		ИНАЧЕ РозничныеЦены.Цена
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА МинимальныеЦены.Цена ЕСТЬ NULL
		|			ТОГДА РозничныеЦены.Упаковка
		|		КОГДА ВЫБОР
		|				КОГДА МинимальныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА МинимальныеЦены.Цена
		|				ИНАЧЕ МинимальныеЦены.Цена / МинимальныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ > ВЫБОР
		|				КОГДА РозничныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА РозничныеЦены.Цена
		|				ИНАЧЕ РозничныеЦены.Цена / РозничныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ
		|			ТОГДА МинимальныеЦены.Упаковка
		|		ИНАЧЕ РозничныеЦены.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	ВЫБОР
		|		КОГДА МинимальныеЦены.Цена ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(РозничныеЦены.Упаковка.Коэффициент, 1)
		|		КОГДА ВЫБОР
		|				КОГДА МинимальныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА МинимальныеЦены.Цена
		|				ИНАЧЕ МинимальныеЦены.Цена / МинимальныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ > ВЫБОР
		|				КОГДА РозничныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА РозничныеЦены.Цена
		|				ИНАЧЕ РозничныеЦены.Цена / РозничныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ
		|			ТОГДА ЕСТЬNULL(МинимальныеЦены.Упаковка.Коэффициент, 1)
		|		ИНАЧЕ ЕСТЬNULL(РозничныеЦены.Упаковка.Коэффициент, 1)
		|	КОНЕЦ КАК Коэффициент,
		|	ВЫБОР
		|		КОГДА МинимальныеЦены.Акция ЕСТЬ NULL
		|			ТОГДА РозничныеЦены.Акция
		|		ИНАЧЕ МинимальныеЦены.Акция
		|	КОНЕЦ КАК Акция
		|ИЗ
		|	РозничныеЦены КАК РозничныеЦены
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Дата,
		|				&ПриводитьКМинимальнойЦене
		|					И ВидЦены = &ВидМинимальныхЦенПродажи
		|					И Номенклатура = &Номенклатура
		|					И Характеристика = &Характеристика) КАК МинимальныеЦены
		|		ПО РозничныеЦены.Номенклатура = МинимальныеЦены.Номенклатура
		|			И РозничныеЦены.Характеристика = МинимальныеЦены.Характеристика
		|			И (&ПриводитьКМинимальнойЦене)");
			
	КонецЕсли;

	ДанныеМагазина = ЗапасыПовтИсп.ДанныеМагазинаЦенообразование(Магазин);
	ДанныеТовара   = ЗапасыПовтИсп.ДанныеНоменклатуры(Номенклатура, Упаковка);

	Запрос.УстановитьПараметр("ФорматМагазина"			  , ДанныеМагазина.ФорматМагазина);
	Запрос.УстановитьПараметр("ПравилоЦенообразования"    , ДанныеМагазина.ПравилоЦенообразования);
	Запрос.УстановитьПараметр("Дата"                      , Дата);
	Запрос.УстановитьПараметр("Номенклатура"              , Номенклатура);
	Запрос.УстановитьПараметр("Характеристика"            , Характеристика);
	Запрос.УстановитьПараметр("ВидМинимальныхЦенПродажи"  , ДанныеМагазина.ВидМинимальныхЦенПродажи);		
	Запрос.УстановитьПараметр("ПриводитьКМинимальнойЦене" , ПриводитьКМинимальнойЦене И ЗначениеЗаполнено(ДанныеМагазина.ВидМинимальныхЦенПродажи));		
		
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		Если ЗначениеЗаполнено(Выборка.Цена) Тогда

			Цена = Выборка.Цена * ДанныеТовара.Коэффициент / Выборка.Коэффициент;
			АкционнаяЦена = Выборка.Акция;

		КонецЕсли;	

	КонецЕсли;

	Возврат Цена;

КонецФункции

// Функция получения последней цены закупки номенклатуры
//
Функция ПолучитьЦенуПоследнейЗакупки(Дата, Магазин, Контрагент, СсылкаНаПоступление, Номенклатура, Характеристика, Упаковка) Экспорт

	Цена = 0;
		
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ТЧТовары.Цена,
	|	ТЧТовары.Упаковка
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ТЧТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров КАК ДокументПоступлениеТоваров
	|		ПО (ДокументПоступлениеТоваров.Ссылка = ТЧТовары.Ссылка)
	|ГДЕ
	|	ТЧТовары.Номенклатура = &Номенклатура
	|	И ТЧТовары.Характеристика = &Характеристика
	|	И (ДокументПоступлениеТоваров.Магазин = &Магазин
	|			ИЛИ &Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	|	И (ДокументПоступлениеТоваров.Контрагент = &Контрагент
	|			ИЛИ &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|	И ДокументПоступлениеТоваров.Дата <= &Дата
	|	И ДокументПоступлениеТоваров.Проведен
	|	И ДокументПоступлениеТоваров.Ссылка <> &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументПоступлениеТоваров.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Дата"          , Дата);
	Запрос.УстановитьПараметр("Ссылка"        , СсылкаНаПоступление);
	Запрос.УстановитьПараметр("Контрагент"    , Контрагент);
	Запрос.УстановитьПараметр("Магазин"       , Магазин);
	Запрос.УстановитьПараметр("Номенклатура"  , Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.Цена) Тогда
			
			КоэффициентУпаковки1 = ?(ЗначениеЗаполнено(Выборка.Упаковка), Выборка.Упаковка.Коэффициент, 1);
			КоэффициентУпаковки2 = ?(ЗначениеЗаполнено(Упаковка), Упаковка.Коэффициент, 1);
			Цена = Выборка.Цена*КоэффициентУпаковки2/КоэффициентУпаковки1;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат Цена;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБСЛУЖИВАНИЯ СХЕМ ИНВЕНТАРИЗАЦИЙ, ЗАПОЛНЯЕМЫХ ПО ДАННЫМ ИБ

// Возвращает имена и типы полей, которые должны обязательно присутствовать
// в СКД, используемой для заполнения цен по данным ИБ
//
// Возвращаемое значение:
// Соответствие
// В ключах содержатся имена полей, в значениях - типы полей
//
Функция ПолучитьОбязательныеПоляСхемыКомпоновкиДанных() Экспорт
	
	Поля = Новый Соответствие();
	
	Поля.Вставить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Поля.Вставить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	
	Поля.Вставить("Количество", Новый ОписаниеТипов("Число"));
	Поля.Вставить("КоличествоУпаковок", Новый ОписаниеТипов("Число"));
	
	Поля.Вставить("КоличествоФакт", Новый ОписаниеТипов("Число"));
	Поля.Вставить("КоличествоУпаковокФакт", Новый ОписаниеТипов("Число"));
	
	Возврат Поля;
	
КонецФункции // ПолучитьОбязательныеПоляСхемыКомпоновкиДанных()

// Проверяет набор данных СКД, что он содержит заданное поле соответствующего типа
//
// Параметры:
// НаборДанных 			- набор данных, который необходимо проверить
// ИмяПоля				- Строка, содержащее имя поля
// ТипЗначения			- ОписаниеТипов, тип который должно иметь поле СКД
// СообщениеОбОшибке	- Строка, содержит вводную часть сообщения об ошибке
//
// Возвращаемое значение:
// Булево
// Истина, если набор данных содержит требуемое поле, в противном случае Ложь
//
Функция ПроверитьПолеНабораДанныхСКД(НаборДанных, ИмяПоля, ТипЗначения, СообщениеОбОшибке = Неопределено)
	
	Поле = НаборДанных.Поля.Найти(ИмяПоля);
	
	Если Поле = Неопределено Тогда
		Результат = Ложь;
	Иначе
		ТипыПоля       = Поле.ТипЗначения.Типы();
		ДопустимыеТипы = ТипЗначения.Типы();
		
		Результат = Истина;
		Если ТипыПоля.Количество() = ДопустимыеТипы.Количество() Тогда
			
			Для Каждого Тип Из ДопустимыеТипы Цикл
				Если ТипыПоля.Найти(Тип) = Неопределено Тогда
					Результат = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(?(ЗначениеЗаполнено(СообщениеОбОшибке), СообщениеОбОшибке + ": ", "") 
			+ СтрЗаменить(СтрЗаменить(НСтр("ru='Схема компоновки данных для заполнения инвентаризации должна содержать поле ""%ИмяПоля%"" с типом значения ""%ТипЗначения%"".'"), "%ИмяПоля%", ИмяПоля), "%ТипЗначения%", ТипЗначения));
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции // ПроверитьПолеНабораДанныхСКД()

// Проверяет схему компоновки данных на соответствие ограничениям, необходимым
// для ее использования при расчете цен
//
// Параметры:
// СхемаКомпоновкиДанных - СхемаКомпоновкиДанных, которую необходимо проверить
// СообщениеОбОшибке     - Строка, содержит вводную часть сообщения об ошибке
//
// Возвращаемое значение:
// Булево
// Истина, если проверка пройдена успешно, в противном случае Ложь
//
Функция ПроверитьСхемуКомпоновкиДанных(СхемаКомпоновкиДанных, СообщениеОбОшибке = Неопределено) Экспорт
	
	Результат = Истина;
	
	Если СхемаКомпоновкиДанных <> Неопределено И СхемаКомпоновкиДанных.НаборыДанных.Количество() = 1 Тогда
		
		РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
		Поля = ПолучитьОбязательныеПоляСхемыКомпоновкиДанных();
		
		Для Каждого Поле Из Поля Цикл
			Если Не ПроверитьПолеНабораДанныхСКД(РабочийНаборДанных, Поле.Ключ, Поле.Значение, СообщениеОбОшибке) Тогда
				Результат = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(?(ЗначениеЗаполнено(СообщениеОбОшибке), СообщениеОбОшибке + ": ", "") 
			+ НСтр("ru='Схема компоновки данных для заполнения инвентаризации должна содержать один набор данных.'"));
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПроверитьСхемуКомпоновкиДанных()

// Проверяет завершение пересчета товаров
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ПриказНаПроведениеИнвентаризации
//  Отказ - Переменная отвечающая за прерывание проведения
//
Процедура ПроверитьВыполнениеПересчетаТоваров(ДокументОбъект, Отказ) Экспорт
	
	Если НЕ ДокументОбъект.Статус = Перечисления.СтатусыПриказовНаПроведениеИнвентаризацийТоваров.Закрыт Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПересчетТоваров.Ссылка,
	|	ПересчетТоваров.ДокументОснование
	|ИЗ
	|	Документ.ПересчетТоваров КАК ПересчетТоваров
	|ГДЕ
	|	НЕ ПересчетТоваров.ПометкаУдаления
	|	И ПересчетТоваров.ДокументОснование = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПересчетТоваров.Ссылка,
	|	ПересчетТоваров.Статус,
	|	ПересчетТоваров.ДокументОснование
	|ИЗ
	|	Документ.ПересчетТоваров КАК ПересчетТоваров
	|ГДЕ
	|	НЕ ПересчетТоваров.ПометкаУдаления
	|	И ПересчетТоваров.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПересчетовТоваров.Выполнено)
	|	И ПересчетТоваров.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОбъект.Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	НаличиеДокументовПересчета = НЕ МассивРезультатов[0].Пустой();
	
	Если НЕ НаличиеДокументовПересчета Тогда
	
		Текст = НСтр("ru = 'Пересчет товаров не начинался'"); 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"Статус" ,
			,
			Отказ
		);
	Иначе
		РезультатСписокНеВыполненныхПересчетов = МассивРезультатов[1];
		
		Если НЕ РезультатСписокНеВыполненныхПересчетов.Пустой() Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По документу %1 не выполнены пересчеты:'"),
				ДокументОбъект.Ссылка
			);
			
			Выборка = РезультатСписокНеВыполненныхПересчетов.Выбрать();
			Пока Выборка.Следующий() Цикл
			
				Текст = Текст  + Символы.ПС +
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = '    %1'"),
									Выборка.Ссылка
								);
			КонецЦикла;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"Статус" ,
				,
				Отказ
			);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует текст запроса к тч Товары и помещает тч во временную таблицу
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросВременнаяТаблицаТовары(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;";
	
КонецПроцедуры // СформироватьЗапросВременнаяТаблицаТовары()

Процедура СформироватьЗапросПоСебестоимости(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
	|	ВременнаяТаблицаТовары.Упаковка.Коэффициент КАК КоэффициентУпаковки,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВременнаяТаблицаТовары.Упаковка.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ * Себестоимость.Цена КАК Цена
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(
	|				&Дата,
	|				Магазин = &Магазин
	|					И (Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							ВременнаяТаблицаТовары.Номенклатура,
	|							ВременнаяТаблицаТовары.Характеристика
	|						ИЗ
	|							ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары)) КАК Себестоимость
	|		ПО ВременнаяТаблицаТовары.Номенклатура = Себестоимость.Номенклатура
	|			И ВременнаяТаблицаТовары.Характеристика = Себестоимость.Характеристика
	|;";

КонецПроцедуры 

// Формирует текст запроса к регистру ЦеныНоменклатуры
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросЦеныПоВидуЦен(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
	|	ВременнаяТаблицаТовары.Упаковка.Коэффициент КАК КоэффициентУпаковки,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ВременнаяТаблицаТовары.Номенклатура.Номинал * ВЫБОР
	|					КОГДА ВременнаяТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|						ТОГДА 1
	|					ИНАЧЕ ВременнаяТаблицаТовары.Упаковка.Коэффициент
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВременнаяТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|					ТОГДА 1
	|				ИНАЧЕ ВременнаяТаблицаТовары.Упаковка.Коэффициент
	|			КОНЕЦ * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент, 1)
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Дата,
	|				ВидЦены = &ВидЦен
	|					И (Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							ВременнаяТаблицаТовары.Номенклатура,
	|							ВременнаяТаблицаТовары.Характеристика
	|						ИЗ
	|							ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ВременнаяТаблицаТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ВременнаяТаблицаТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|;";

КонецПроцедуры // СформироватьЗапросЦеныПрайсЛиста()

// Формирует текст запроса по ценам прошлых закупок
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросЦеныПоПрошлымЗакупкам(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ПрошлыеЗакупки.ДатаПрошлойЗакупки) КАК ДатаПрошлойЗакупки
	|ПОМЕСТИТЬ ТаблицаСтрокЗакупки
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|			ПоступлениеТоваровТовары.Характеристика КАК Характеристика,
	|			ПоступлениеТоваровТовары.Ссылка.Дата КАК ДатаПрошлойЗакупки
	|		ИЗ
	|			Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|		ГДЕ
	|			ПоступлениеТоваровТовары.Ссылка.Дата <= &Дата
	|			И ПоступлениеТоваровТовары.Ссылка <> &Ссылка
	|			И ПоступлениеТоваровТовары.Ссылка.Магазин = &Магазин
	|			И ПоступлениеТоваровТовары.Ссылка.Контрагент = &Поставщик
	|			И ПоступлениеТоваровТовары.Ссылка.Проведен) КАК ПрошлыеЗакупки
	|		ПО ВременнаяТаблицаТовары.Номенклатура = ПрошлыеЗакупки.Номенклатура
	|			И ВременнаяТаблицаТовары.Характеристика = ПрошлыеЗакупки.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
	|	ВременнаяТаблицаТовары.Упаковка.Коэффициент КАК КоэффициентУпаковки,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВременнаяТаблицаТовары.Упаковка.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ * ЦеныПрошлыхЗакупок.Цена / ЕСТЬNULL(ЦеныПрошлыхЗакупок.Упаковка.Коэффициент, 1) КАК Цена
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаСтрокЗакупкиСДатами.Номенклатура КАК Номенклатура,
	|			ТаблицаСтрокЗакупкиСДатами.Характеристика КАК Характеристика,
	|			ТаблицаСтрокЗакупкиСЦенами.Цена КАК Цена,
	|			ТаблицаСтрокЗакупкиСЦенами.Упаковка КАК Упаковка
	|		ИЗ
	|			ТаблицаСтрокЗакупки КАК ТаблицаСтрокЗакупкиСДатами
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|					ПоступлениеТоваровТовары.Характеристика КАК Характеристика,
	|					ПоступлениеТоваровТовары.Ссылка.Дата КАК ДатаПрошлойЗакупки,
	|					ПоступлениеТоваровТовары.Цена КАК Цена,
	|					ПоступлениеТоваровТовары.Упаковка КАК Упаковка
	|				ИЗ
	|					Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|				ГДЕ
	|					ПоступлениеТоваровТовары.Ссылка.Дата < &Дата
	|					И ПоступлениеТоваровТовары.Ссылка <> &Ссылка
	|					И ПоступлениеТоваровТовары.Ссылка.Магазин = &Магазин
	|					И ПоступлениеТоваровТовары.Ссылка.Контрагент = &Поставщик
	|					И ПоступлениеТоваровТовары.Ссылка.Проведен) КАК ТаблицаСтрокЗакупкиСЦенами
	|				ПО ТаблицаСтрокЗакупкиСДатами.Номенклатура = ТаблицаСтрокЗакупкиСЦенами.Номенклатура
	|					И ТаблицаСтрокЗакупкиСДатами.Характеристика = ТаблицаСтрокЗакупкиСЦенами.Характеристика
	|					И ТаблицаСтрокЗакупкиСДатами.ДатаПрошлойЗакупки = ТаблицаСтрокЗакупкиСЦенами.ДатаПрошлойЗакупки) КАК ЦеныПрошлыхЗакупок
	|		ПО ВременнаяТаблицаТовары.Номенклатура = ЦеныПрошлыхЗакупок.Номенклатура
	|			И ВременнаяТаблицаТовары.Характеристика = ЦеныПрошлыхЗакупок.Характеристика";
	
КонецПроцедуры

// Формирует текст запроса по ценам заказа поставщику
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросЦеныПоДаннымПоставщика(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПоДаннымПоставщика.Номенклатура,
	|	ТоварыПоДаннымПоставщика.Характеристика,
	|	ТоварыПоДаннымПоставщика.Упаковка,
	|	ТоварыПоДаннымПоставщика.Цена
	|ПОМЕСТИТЬ ТоварыПоДаннымПоставщика
	|ИЗ
	|	&ТоварыПоДаннымПоставщика КАК ТоварыПоДаннымПоставщика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
	|	ВременнаяТаблицаТовары.Упаковка.Коэффициент КАК КоэффициентУпаковки,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВременнаяТаблицаТовары.Упаковка.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТоварыПоДаннымПоставщика.Цена / ЕСТЬNULL(ТоварыПоДаннымПоставщика.Упаковка.Коэффициент, 1) КАК Цена
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыПоДаннымПоставщика КАК ТоварыПоДаннымПоставщика
	|		ПО ВременнаяТаблицаТовары.Номенклатура = ТоварыПоДаннымПоставщика.Номенклатура
	|			И ВременнаяТаблицаТовары.Характеристика = ТоварыПоДаннымПоставщика.Характеристика";

КонецПроцедуры // СформироватьЗапросЦеныПоДаннымПоставщика()

// Формирует текст запроса по ценам произвольной таблицы цен
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросЦеныПоПроизвольнойТаблицеЦен(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЦен.Номенклатура,
	|	ТаблицаЦен.Характеристика,
	|	ТаблицаЦен.Упаковка,
	|	ТаблицаЦен.Цена
	|ПОМЕСТИТЬ ТаблицаЦен
	|ИЗ
	|	&ТаблицаЦен КАК ТаблицаЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
	|	ВременнаяТаблицаТовары.Упаковка.Коэффициент КАК КоэффициентУпаковки,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВременнаяТаблицаТовары.Упаковка.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаЦен.Цена / ЕСТЬNULL(ТаблицаЦен.Упаковка.Коэффициент, 1) КАК Цена
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦен КАК ТаблицаЦен
	|		ПО ВременнаяТаблицаТовары.Номенклатура = ТаблицаЦен.Номенклатура
	|			И ВременнаяТаблицаТовары.Характеристика = ТаблицаЦен.Характеристика";

КонецПроцедуры // СформироватьЗапросЦеныПоПроизвольнойТаблицеЦен()

// Формирует текст запроса получения розничных цен
//
Процедура СформироватьЗапросЦеныПоРозничнымЦенам(ТекстЗапроса, Магазин) Экспорт
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Магазин);
	Если ИспользоватьАссортимент Тогда
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ассортимент.Номенклатура КАК Номенклатура,
		|	Ассортимент.ВидЦен КАК ВидЦен
		|ПОМЕСТИТЬ втАссортимент
		|ИЗ
		|	РегистрСведений.Ассортимент.СрезПоследних(
		|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
		|			(НЕ &ИспользоватьПрименениеЦен)
		|			И ОбъектПланирования = &ФорматОбъектаЦенообразования
		|			И Номенклатура В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					Т.Номенклатура
		|				ИЗ
		|					ВременнаяТаблицаТовары КАК Т)) КАК Ассортимент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ассортимент.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
		|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
		|	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)) КАК Цена
		|ПОМЕСТИТЬ Цены
		|ИЗ
		|	втАссортимент КАК Ассортимент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Дата,
		|				ВидЦены В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Ц.ВидЦен
		|						ИЗ
		|							втАссортимент КАК Ц)
		|					И Номенклатура В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Т.Номенклатура
		|						ИЗ
		|							втАссортимент КАК Т)) КАК ЦеныНоменклатуры
		|		ПО (ЦеныНоменклатуры.Номенклатура = Ассортимент.Номенклатура)
		|			И (ЦеныНоменклатуры.ВидЦены = Ассортимент.ВидЦен)
		|
		|СГРУППИРОВАТЬ ПО
		|	Ассортимент.Номенклатура,
		|	ЦеныНоменклатуры.Характеристика,
		|	ЦеныНоменклатуры.Упаковка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДействующиеЦены.Номенклатура,
		|	ДействующиеЦены.Характеристика,
		|	ДействующиеЦены.Упаковка,
		|	ДействующиеЦены.Цена
		|ИЗ
		|	РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
		|			&Дата,
		|			ОбъектЦенообразования = &Магазин
		|				И (Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						Т.Номенклатура,
		|						Т.Характеристика
		|					ИЗ
		|						ВременнаяТаблицаТовары КАК Т)) КАК ДействующиеЦены
		|ГДЕ
		|	&ИспользоватьПрименениеЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА МинимальныеЦены.Цена ЕСТЬ NULL 
		|			ТОГДА РозничныеЦены.Цена
		|		КОГДА ВЫБОР
		|				КОГДА МинимальныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА МинимальныеЦены.Цена
		|				ИНАЧЕ МинимальныеЦены.Цена / МинимальныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ > ВЫБОР
		|				КОГДА РозничныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА РозничныеЦены.Цена
		|				ИНАЧЕ РозничныеЦены.Цена / РозничныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ
		|			ТОГДА МинимальныеЦены.Цена
		|		ИНАЧЕ РозничныеЦены.Цена
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА МинимальныеЦены.Цена ЕСТЬ NULL 
		|			ТОГДА РозничныеЦены.Упаковка
		|		КОГДА ВЫБОР
		|				КОГДА МинимальныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА МинимальныеЦены.Цена
		|				ИНАЧЕ МинимальныеЦены.Цена / МинимальныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ > ВЫБОР
		|				КОГДА РозничныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА РозничныеЦены.Цена
		|				ИНАЧЕ РозничныеЦены.Цена / РозничныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ
		|			ТОГДА МинимальныеЦены.Упаковка
		|		ИНАЧЕ РозничныеЦены.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	РозничныеЦены.Номенклатура,
		|	РозничныеЦены.Характеристика
		|ПОМЕСТИТЬ РозничныеЦены
		|ИЗ
		|	Цены КАК РозничныеЦены
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Дата,
		|				&ПриводитьКМинимальнойЦене
		|					И ВидЦены = &ВидМинимальныхЦенПродажи
		|					И (Номенклатура, Характеристика) В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Т.Номенклатура,
		|							Т.Характеристика
		|						ИЗ
		|							ВременнаяТаблицаТовары КАК Т)) КАК МинимальныеЦены
		|		ПО РозничныеЦены.Номенклатура = МинимальныеЦены.Номенклатура
		|			И РозничныеЦены.Характеристика = МинимальныеЦены.Характеристика
		|			И (&ПриводитьКМинимальнойЦене)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
		|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА 1
		|		ИНАЧЕ ВременнаяТаблицаТовары.Упаковка.Коэффициент
		|	КОНЕЦ КАК КоэффициентУпаковки,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|			ТОГДА ВременнаяТаблицаТовары.Номенклатура.Номинал * ВЫБОР
		|					КОГДА ВременнаяТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|						ТОГДА 1
		|					ИНАЧЕ ВременнаяТаблицаТовары.Упаковка.Коэффициент
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВременнаяТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА 1
		|				ИНАЧЕ ВременнаяТаблицаТовары.Упаковка.Коэффициент
		|			КОНЕЦ * ЕСТЬNULL(РозничныеЦены.Цена, 0) / ЕСТЬNULL(РозничныеЦены.Упаковка.Коэффициент, 1)
		|	КОНЕЦ КАК Цена
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РозничныеЦены КАК РозничныеЦены
		|		ПО ВременнаяТаблицаТовары.Номенклатура = РозничныеЦены.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = РозничныеЦены.Характеристика";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеновыеГруппы.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	ЦеновыеГруппы.ВидЦен КАК ВидЦен
		|ПОМЕСТИТЬ ЦеновыеГруппыПравила
		|ИЗ
		|	Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ЦеновыеГруппы
		|ГДЕ
		|	ЦеновыеГруппы.Ссылка = &ПравилоЦенообразования
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидЦен,
		|	ЦеноваяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидЦеныПравила.ВидЦен КАК ВидЦен
		|ПОМЕСТИТЬ ВидЦеныПравила
		|ИЗ
		|	Справочник.ПравилаЦенообразования КАК ВидЦеныПравила
		|ГДЕ
		|	ВидЦеныПравила.Ссылка = &ПравилоЦенообразования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ПодЗапрос.Номенклатура КАК Номенклатура,
		|	ПодЗапрос.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам) > 0
		|			ТОГДА МАКСИМУМ(ПодЗапрос.УпаковкаПоЦеновымГруппам)
		|		ИНАЧЕ МАКСИМУМ(ПодЗапрос.УпаковкаПоВидуЦен)
		|	КОНЕЦ КАК Упаковка,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам) > 0
		|			ТОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам)
		|		ИНАЧЕ МАКСИМУМ(ПодЗапрос.ЦенаПоВидуЦен)
		|	КОНЕЦ КАК Цена
		|ПОМЕСТИТЬ Цены
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЦеныНоменклатурыПоВидуЦен.Номенклатура КАК Номенклатура,
		|		ЦеныНоменклатурыПоВидуЦен.Характеристика КАК Характеристика,
		|		ЦеныНоменклатурыПоВидуЦен.Упаковка КАК УпаковкаПоВидуЦен,
		|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК УпаковкаПоЦеновымГруппам,
		|		ЦеныНоменклатурыПоВидуЦен.Цена КАК ЦенаПоВидуЦен,
		|		0 КАК ЦенаПоЦеновымГруппам
		|	ИЗ
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Дата,
		|				ВидЦены В
		|						(ВЫБРАТЬ
		|							ВидЦеныПравила.ВидЦен
		|						ИЗ
		|							ВидЦеныПравила КАК ВидЦеныПравила)
		|					И (Номенклатура, Характеристика) В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Т.Номенклатура,
		|							Т.Характеристика
		|						ИЗ
		|							ВременнаяТаблицаТовары КАК Т)) КАК ЦеныНоменклатурыПоВидуЦен
		|	ГДЕ
		|		(НЕ &ИспользоватьПрименениеЦен)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СправочникНоменклатура.Ссылка,
		|		ЦеныНоменклатурыПоЦеновымГруппам.Характеристика,
		|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка),
		|		ЦеныНоменклатурыПоЦеновымГруппам.Упаковка,
		|		0,
		|		ЕСТЬNULL(ЦеныНоменклатурыПоЦеновымГруппам.Цена, 0)
		|	ИЗ
		|		ЦеновыеГруппыПравила КАК ЦеновыеГруппыПравила
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|			ПО ЦеновыеГруппыПравила.ЦеноваяГруппа = СправочникНоменклатура.ЦеноваяГруппа
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|					&Дата,
		|					ВидЦены В
		|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|								ЦеновыеГруппыПравила.ВидЦен
		|							ИЗ
		|								ЦеновыеГруппыПравила КАК ЦеновыеГруппыПравила)
		|						И (Номенклатура, Характеристика) В
		|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|								Т.Номенклатура,
		|								Т.Характеристика
		|							ИЗ
		|								ВременнаяТаблицаТовары КАК Т)) КАК ЦеныНоменклатурыПоЦеновымГруппам
		|			ПО (ЦеныНоменклатурыПоЦеновымГруппам.Номенклатура = СправочникНоменклатура.Ссылка)
		|				И (ЦеныНоменклатурыПоЦеновымГруппам.ВидЦены = ЦеновыеГруппыПравила.ВидЦен)
		|	ГДЕ
		|		(НЕ &ИспользоватьПрименениеЦен)) КАК ПодЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ПодЗапрос.Номенклатура,
		|	ПодЗапрос.Характеристика
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДействующиеЦены.Номенклатура,
		|	ДействующиеЦены.Характеристика,
		|	ДействующиеЦены.Упаковка,
		|	ДействующиеЦены.Цена
		|ИЗ
		|	РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
		|			&Дата,
		|			ОбъектЦенообразования = &Магазин
		|				И (Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						Т.Номенклатура,
		|						Т.Характеристика
		|					ИЗ
		|						ВременнаяТаблицаТовары КАК Т)) КАК ДействующиеЦены
		|ГДЕ
		|	&ИспользоватьПрименениеЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА МинимальныеЦены.Цена ЕСТЬ NULL 
		|			ТОГДА РозничныеЦены.Цена
		|		КОГДА ВЫБОР
		|				КОГДА МинимальныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА МинимальныеЦены.Цена
		|				ИНАЧЕ МинимальныеЦены.Цена / МинимальныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ > ВЫБОР
		|				КОГДА РозничныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА РозничныеЦены.Цена
		|				ИНАЧЕ РозничныеЦены.Цена / РозничныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ
		|			ТОГДА МинимальныеЦены.Цена
		|		ИНАЧЕ РозничныеЦены.Цена
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА МинимальныеЦены.Цена ЕСТЬ NULL 
		|			ТОГДА РозничныеЦены.Упаковка
		|		КОГДА ВЫБОР
		|				КОГДА МинимальныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА МинимальныеЦены.Цена
		|				ИНАЧЕ МинимальныеЦены.Цена / МинимальныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ > ВЫБОР
		|				КОГДА РозничныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА РозничныеЦены.Цена
		|				ИНАЧЕ РозничныеЦены.Цена / РозничныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ
		|			ТОГДА МинимальныеЦены.Упаковка
		|		ИНАЧЕ РозничныеЦены.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	РозничныеЦены.Номенклатура,
		|	РозничныеЦены.Характеристика
		|ПОМЕСТИТЬ РозничныеЦены
		|ИЗ
		|	Цены КАК РозничныеЦены
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Дата,
		|				&ПриводитьКМинимальнойЦене
		|					И ВидЦены = &ВидМинимальныхЦенПродажи
		|					И (Номенклатура, Характеристика) В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Т.Номенклатура,
		|							Т.Характеристика
		|						ИЗ
		|							ВременнаяТаблицаТовары КАК Т)) КАК МинимальныеЦены
		|		ПО РозничныеЦены.Номенклатура = МинимальныеЦены.Номенклатура
		|			И РозничныеЦены.Характеристика = МинимальныеЦены.Характеристика
		|			И (&ПриводитьКМинимальнойЦене)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
		|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА 1
		|		ИНАЧЕ ВременнаяТаблицаТовары.Упаковка.Коэффициент
		|	КОНЕЦ КАК КоэффициентУпаковки,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|			ТОГДА ВременнаяТаблицаТовары.Номенклатура.Номинал * ВЫБОР
		|					КОГДА ВременнаяТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|						ТОГДА 1
		|					ИНАЧЕ ВременнаяТаблицаТовары.Упаковка.Коэффициент
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВременнаяТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА 1
		|				ИНАЧЕ ВременнаяТаблицаТовары.Упаковка.Коэффициент
		|			КОНЕЦ * ЕСТЬNULL(РозничныеЦены.Цена, 0) / ЕСТЬNULL(РозничныеЦены.Упаковка.Коэффициент, 1)
		|	КОНЕЦ КАК Цена
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РозничныеЦены КАК РозничныеЦены
		|		ПО ВременнаяТаблицаТовары.Номенклатура = РозничныеЦены.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = РозничныеЦены.Характеристика
		|;";
	КонецЕсли;
	
КонецПроцедуры	

// Удаляет подарочные сертификаты
//
// Параметры
//  ТабличнаяЧасть - табличная часть документа
//
Процедура УдалитьПодарочныеСертификаты(ТабличнаяЧасть) Экспорт

	КолвоЭлементовКоллекции = ТабличнаяЧасть.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ЭлементКоллекции = ТабличнаяЧасть[КолвоЭлементовКоллекции - ОбратныйИндекс];

		Если ЭлементКоллекции.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда			
			ТабличнаяЧасть.Удалить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;
	

КонецПроцедуры // УдалитьПодарочныеСертификаты()

// По табличной части объекта получает массив остатков
// Параметры
//  Объект - объект документа или обработки
//  ИмяТабличнойЧасти = имя табличной части
//  
// Возвращаемое значение
//  Массив
//
Функция ПолучитьОстаткиНоменклатуры(Объект, ИмяТабличнойЧасти) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.Склад
	|ПОМЕСТИТЬ ТаблицаВЗапрос
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Склад,
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Склад) В
	|				(ВЫБРАТЬ
	|					ТаблицаВЗапрос.Номенклатура,
	|					ТаблицаВЗапрос.Характеристика,
	|					ТаблицаВЗапрос.Склад
	|				ИЗ
	|					ТаблицаВЗапрос КАК ТаблицаВЗапрос)) КАК ТоварыНаСкладахОстатки";
	
	ТаблицаНоменклатуры = Объект[ИмяТабличнойЧасти].Выгрузить();
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	
	Результат = Запрос.Выполнить();
	ТаблицаОстатков = Результат.Выгрузить();
	
	СтруктураПоиска = Новый Структура;
	МассивОстатков = Новый Массив;
	
	Для каждого СтрокаТаблицыНоменклатуры Из ТаблицаНоменклатуры Цикл
	
		СтруктураПоиска.Вставить("Номенклатура"  , СтрокаТаблицыНоменклатуры.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаТаблицыНоменклатуры.Характеристика);
		СтруктураПоиска.Вставить("Склад"         , СтрокаТаблицыНоменклатуры.Склад);
		
		МассивСтрок = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество() > 0  Тогда
			
			МассивОстатков.Добавить(МассивСтрок[0].КоличествоОстаток)
			
		Иначе
			
			МассивОстатков.Добавить(0)
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат МассивОстатков;
КонецФункции // ПолучитьОстаткиНоменклатуры()

// По табличной части объекта получает массив остатков
// Параметры
//  Объект - объект документа или обработки
//  ИмяТабличнойЧасти = имя табличной части
//  
//
Процедура ЗаполнитьОстаткиНоменклатуры(Объект, ИмяТабличнойЧасти) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.Склад
	|ПОМЕСТИТЬ ТаблицаВЗапрос
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Склад,
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Склад) В
	|				(ВЫБРАТЬ
	|					ТаблицаВЗапрос.Номенклатура,
	|					ТаблицаВЗапрос.Характеристика,
	|					ТаблицаВЗапрос.Склад
	|				ИЗ
	|					ТаблицаВЗапрос КАК ТаблицаВЗапрос)) КАК ТоварыНаСкладахОстатки";
	
	ТаблицаНоменклатуры = Объект[ИмяТабличнойЧасти].Выгрузить();
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	
	Результат = Запрос.Выполнить();
	ТаблицаОстатков = Результат.Выгрузить();
	
	СтруктураПоиска = Новый Структура;
	МассивОстатков = Новый Массив;
	
	Для каждого СтрокаТаблицыНоменклатуры Из Объект[ИмяТабличнойЧасти] Цикл
	
		СтруктураПоиска.Вставить("Номенклатура"  , СтрокаТаблицыНоменклатуры.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаТаблицыНоменклатуры.Характеристика);
		СтруктураПоиска.Вставить("Склад"         , СтрокаТаблицыНоменклатуры.Склад);
		
		МассивСтрок = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество() > 0  Тогда
			СтрокаТаблицыНоменклатуры.Остаток = МассивСтрок[0].КоличествоОстаток;
		Иначе
			СтрокаТаблицыНоменклатуры.Остаток = 0;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьОстаткиНоменклатуры()

// Функция возвращает список документов продажи, в ТЧ Товары которых
// присутствует передаваемая как параметр Номенклатура
//
// Параметры:
//  СтруктураПараметров - структура
//
// Возвращаемое значение:
//  СписокЗначений - таблица документов и реквизитов.
//
Функция ПолучитьСписокДокументовСодержащихНоменклатуру(СтруктураПараметров) Экспорт
	
	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПродажиОбороты.ДокументПродажи КАК ДокументПродажи
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(
	|			&ДатаС,
	|			&ДатаПо,
	|			,
	|			(НЕ ДокументПродажи ССЫЛКА Документ.ЧекККМ)
	|				И Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И Склад.Магазин = &Магазин) КАК ПродажиОбороты
	|ГДЕ
	|	ПродажиОбороты.КоличествоОборот > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажиОбороты.ДокументПродажи
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументПродажи
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Номенклатура", СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", СтруктураПараметров.Характеристика);
	Запрос.УстановитьПараметр("Магазин", СтруктураПараметров.Магазин);
	Запрос.УстановитьПараметр("ДатаС", СтруктураПараметров.ДатаС);
	Запрос.УстановитьПараметр("ДатаПо", ТекущаяДатаСеанса() + 24*60*60); // Смена иногда переходит на новые сутки
	
	МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументПродажи");
	
	Результат.ЗагрузитьЗначения(МассивДокументов);
	
	Возврат Результат;

КонецФункции

// Процедура формирования движений по регистру "Движения серий товаров".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт
	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДвиженияСерийТоваров;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ДвиженияСерийТоваров.Записывать = Истина;
	Движения.ДвиженияСерийТоваров.Загрузить(Таблица);
КонецПроцедуры

// Получает таблицу пересортиц 
//
// Параметры:
//  ДокументОснование - ПересчетТоваров
//
// Возвращаемое значение:
// Таблица значений
//
Функция ПолучитьТаблицуПересортиц(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПересортицаТоваровТовары.НомерСтроки,
	|	ПересортицаТоваровТовары.Номенклатура,
	|	ПересортицаТоваровТовары.Характеристика,
	|	ПересортицаТоваровТовары.НоменклатураОприходование,
	|	ПересортицаТоваровТовары.ХарактеристикаОприходование,
	|	ПересортицаТоваровТовары.Цена,
	|	ПересортицаТоваровТовары.Количество
	|ИЗ
	|	Документ.ПересортицаТоваров.Товары КАК ПересортицаТоваровТовары
	|ГДЕ
	|	ПересортицаТоваровТовары.Ссылка.ДокументОснование = &ДокументОснование
	|	И ПересортицаТоваровТовары.Ссылка.Проведен";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();
	
КонецФункции

// Получает таблицу не списанных товаров по инвентаризации
//
// Параметры:
//  ДокументОснование - ПересчетТоваров
//
// Возвращаемое значение:
// Таблица значений
//
Функция ПолучитьТаблицуОставшегосяСписанияПоИнвентаризации(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПересчетТоваровТовары.НомерСтроки,
	|	ПересчетТоваровТовары.Номенклатура,
	|	ПересчетТоваровТовары.Характеристика,
	|	ПересчетТоваровТовары.Количество - ПересчетТоваровТовары.КоличествоФакт КАК Количество,
	|	ПересчетТоваровТовары.Цена
	|ПОМЕСТИТЬ ТаблицаИнвентаризации
	|ИЗ
	|	Документ.ПересчетТоваров.Товары КАК ПересчетТоваровТовары
	|ГДЕ
	|	ПересчетТоваровТовары.Количество > ПересчетТоваровТовары.КоличествоФакт
	|	И ПересчетТоваровТовары.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПересортицаТоваровТовары.Номенклатура,
	|	ПересортицаТоваровТовары.Характеристика,
	|	ПересортицаТоваровТовары.Количество
	|ПОМЕСТИТЬ ТаблицаПересортиц
	|ИЗ
	|	Документ.ПересортицаТоваров.Товары КАК ПересортицаТоваровТовары
	|ГДЕ
	|	ПересортицаТоваровТовары.Ссылка.ДокументОснование = &ДокументОснование
	|	И ПересортицаТоваровТовары.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписаниеТоваровТовары.Номенклатура,
	|	СписаниеТоваровТовары.Характеристика,
	|	СписаниеТоваровТовары.Количество
	|ПОМЕСТИТЬ ТаблицаСписания
	|ИЗ
	|	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	|ГДЕ
	|	СписаниеТоваровТовары.Ссылка.ДокументОснование = &ДокументОснование
	|	И СписаниеТоваровТовары.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИнвентаризации.НомерСтроки,
	|	ТаблицаИнвентаризации.Номенклатура,
	|	ТаблицаИнвентаризации.Характеристика,
	|	ТаблицаИнвентаризации.Количество - ЕСТЬNULL(ТаблицаПересортиц.Количество, 0) - ЕСТЬNULL(ТаблицаСписания.Количество, 0) КАК Количество,
	|	ТаблицаИнвентаризации.Цена
	|ПОМЕСТИТЬ ТаблицаОставшихсяСписаний
	|ИЗ
	|	ТаблицаИнвентаризации КАК ТаблицаИнвентаризации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПересортиц КАК ТаблицаПересортиц
	|		ПО ТаблицаИнвентаризации.Номенклатура = ТаблицаПересортиц.Номенклатура
	|			И ТаблицаИнвентаризации.Характеристика = ТаблицаПересортиц.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСписания КАК ТаблицаСписания
	|		ПО ТаблицаИнвентаризации.Номенклатура = ТаблицаСписания.Номенклатура
	|			И ТаблицаИнвентаризации.Характеристика = ТаблицаСписания.Характеристика
	|ГДЕ
	|	ТаблицаИнвентаризации.Количество - ЕСТЬNULL(ТаблицаПересортиц.Количество, 0) - ЕСТЬNULL(ТаблицаСписания.Количество, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОставшихсяСписаний.Номенклатура,
	|	ТаблицаОставшихсяСписаний.Характеристика,
	|	ТаблицаОставшихсяСписаний.Количество,
	|	ТаблицаОставшихсяСписаний.Цена,
	|	ТаблицаОставшихсяСписаний.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОставшихсяСписаний.Количество КАК КоличествоУпаковок,
	|	ТаблицаОставшихсяСписаний.Цена * ТаблицаОставшихсяСписаний.Количество КАК Сумма
	|ИЗ
	|	ТаблицаОставшихсяСписаний КАК ТаблицаОставшихсяСписаний
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();
	
КонецФункции

// Получает таблицу не списанных товаров по инвентаризации
//
// Параметры:
//  ДокументОснование - ПересчетТоваров
//
// Возвращаемое значение:
// Таблица значений
//
Функция ПолучитьТаблицуОставшегосяОприходованияПоИнвентаризации(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПересчетТоваровТовары.НомерСтроки,
	|	ПересчетТоваровТовары.Номенклатура,
	|	ПересчетТоваровТовары.Характеристика,
	|	ПересчетТоваровТовары.КоличествоФакт - ПересчетТоваровТовары.Количество КАК Количество,
	|	ПересчетТоваровТовары.Цена
	|ПОМЕСТИТЬ ТаблицаИнвентаризации
	|ИЗ
	|	Документ.ПересчетТоваров.Товары КАК ПересчетТоваровТовары
	|ГДЕ
	|	ПересчетТоваровТовары.Количество < ПересчетТоваровТовары.КоличествоФакт
	|	И ПересчетТоваровТовары.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПересортицаТоваровТовары.НоменклатураОприходование КАК Номенклатура,
	|	ПересортицаТоваровТовары.ХарактеристикаОприходование КАК Характеристика,
	|	ПересортицаТоваровТовары.Количество
	|ПОМЕСТИТЬ ТаблицаПересортиц
	|ИЗ
	|	Документ.ПересортицаТоваров.Товары КАК ПересортицаТоваровТовары
	|ГДЕ
	|	ПересортицаТоваровТовары.Ссылка.ДокументОснование = &ДокументОснование
	|	И ПересортицаТоваровТовары.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОприходованиеТоваровТовары.Номенклатура,
	|	ОприходованиеТоваровТовары.Характеристика,
	|	ОприходованиеТоваровТовары.Количество
	|ПОМЕСТИТЬ ТаблицаОприходования
	|ИЗ
	|	Документ.ОприходованиеТоваров.Товары КАК ОприходованиеТоваровТовары
	|ГДЕ
	|	ОприходованиеТоваровТовары.Ссылка.ДокументОснование = &ДокументОснование
	|	И ОприходованиеТоваровТовары.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИнвентаризации.НомерСтроки,
	|	ТаблицаИнвентаризации.Номенклатура,
	|	ТаблицаИнвентаризации.Характеристика,
	|	ТаблицаИнвентаризации.Количество - ЕСТЬNULL(ТаблицаПересортиц.Количество, 0) - ЕСТЬNULL(ТаблицаОприходования.Количество, 0) КАК Количество,
	|	ТаблицаИнвентаризации.Цена
	|ПОМЕСТИТЬ ТаблицаОставшихсяСписаний
	|ИЗ
	|	ТаблицаИнвентаризации КАК ТаблицаИнвентаризации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПересортиц КАК ТаблицаПересортиц
	|		ПО ТаблицаИнвентаризации.Номенклатура = ТаблицаПересортиц.Номенклатура
	|			И ТаблицаИнвентаризации.Характеристика = ТаблицаПересортиц.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОприходования КАК ТаблицаОприходования
	|		ПО ТаблицаИнвентаризации.Номенклатура = ТаблицаОприходования.Номенклатура
	|			И ТаблицаИнвентаризации.Характеристика = ТаблицаОприходования.Характеристика
	|ГДЕ
	|	ТаблицаИнвентаризации.Количество - ЕСТЬNULL(ТаблицаПересортиц.Количество, 0) - ЕСТЬNULL(ТаблицаОприходования.Количество, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОставшихсяСписаний.Номенклатура,
	|	ТаблицаОставшихсяСписаний.Характеристика,
	|	ТаблицаОставшихсяСписаний.Количество,
	|	ТаблицаОставшихсяСписаний.Цена,
	|	ТаблицаОставшихсяСписаний.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОставшихсяСписаний.Количество КАК КоличествоУпаковок,
	|	ТаблицаОставшихсяСписаний.Цена * ТаблицаОставшихсяСписаний.Количество КАК Сумма
	|ИЗ
	|	ТаблицаОставшихсяСписаний КАК ТаблицаОставшихсяСписаний
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();
	
КонецФункции

// Функция получения документа-основания на оформление излишков и недостач товаров
//
Функция ПолучитьОснованиеОформленияИзлишковНедостачТоваров(ДокументСсылка) Экспорт 
	
	Основание = Неопределено;
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриказНаПроведениеИнвентаризацииТоваров") Тогда
		
		Основание = ДокументСсылка;
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОрдерНаОтражениеРезультатовПересчетовТоваров") Тогда 
		
		Основание = ДокументСсылка.ДокументОснование;
		
	Иначе
		
		Основание = ДокументСсылка;
		
	КонецЕсли;
	
	Возврат Основание;
	
	
КонецФункции

// +HVOYA. 31.10.2016 12:43:49, Львова Е.А.

// Процедура формирования движений по регистру "Учет уцененных товаров".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьУценкуТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт
	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУцененныхТоваров;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.УчетУцененныхТоваров.Записывать = Истина;
	Движения.УчетУцененныхТоваров.Загрузить(Таблица);
КонецПроцедуры
// -HVOYA. 31.10.2016 12:43:53, Львова Е.А.
