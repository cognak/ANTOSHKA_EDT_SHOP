////////////////////////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация"
// 
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

//  Возвращает аккуратно построеное наименование через запятую по парам "Название" + "Сокращение"
//
Функция ПолноеНаименование(н0="", с0="", н1="", с1="", н2="", с2="", н3="", с3="", н4="", с4="", н5="", с5="", н6="", с6="", н7="", с7="",	н8="", с8="", н9="", с9="") Экспорт
	
	ПолноеНаименование = СокрЛП( ?(ПустаяСтрока(н0), "", СокрЛП(н0) + " " + СокрЛП(с0)) );
	
	Для ИндексПараметра=1 По 9 Цикл
		НомерСтрокой = Формат(ИндексПараметра, "ЧН=; ЧГ=");
		ТекН = СокрЛП(Вычислить("н"+НомерСтрокой));
		ТекС = СокрЛП(Вычислить("с"+НомерСтрокой));
		
		Наименование = СокрЛП( ?(ПустаяСтрока(ТекН), "", ТекН + " " + ТекС) );
		Если ПустаяСтрока(Наименование) Или ПустаяСтрока(ПолноеНаименование) Тогда
			ПолноеНаименование = ПолноеНаименование + Наименование;
		Иначе            
			ПолноеНаименование = ПолноеНаименование + ", " + Наименование;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПолноеНаименование;        
КонецФункции

//  Возвращает структуру с наименованием и сокращением от значения
//
//  Параметры:
//      Текст - строка полного наименования
//
Функция НаименованиеСокращение(Текст) Экспорт
	Результат = Новый Структура("Наименование, Сокращение");
	Части = ЧастиАдреса(Текст, Истина);
	Если Части.Количество()>0 Тогда
		ЗаполнитьЗначенияСвойств(Результат, Части[0]);
	Иначе        
		Результат.Наименование = Текст;
	КонецЕсли;
	Возврат Результат;
КонецФункции    

//  Возвращает отдельно сокращение от значения
//
//  Параметры:
//      Текст - строка полного наименования
//
Функция Сокращение(Текст) Экспорт
	Части = НаименованиеСокращение(Текст);
	Возврат Части.Сокращение;
КонецФункции

//  Разделяет текст на слова по указанным разделителям. По умолчанию разделители - пробельные символы
//  Возвращает массив слов.
//
//  Параметры:
//      Текст       - разделяемая строка
//      Разделители - необязательная строка символов-разделителей
//
Функция СловаТекста(Текст, Разделители=Неопределено) Экспорт
	
	НачалоСлова = 0;
	Состояние   = 0;
	Результат   = Новый Массив;
	
	Для Позиция=1 По СтрДлина(Текст) Цикл
		ТекущийСимвол = Сред(Текст, Позиция, 1);
		ЭтоРазделитель = ?(Разделители=Неопределено, ПустаяСтрока(ТекущийСимвол), Найти(Разделители, ТекущийСимвол)>0);
		
		Если Состояние=0 И (Не ЭтоРазделитель) Тогда
			НачалоСлова = Позиция;
			Состояние   = 1;
		ИначеЕсли Состояние=1 И ЭтоРазделитель Тогда
			Результат.Добавить(Сред(Текст, НачалоСлова, Позиция-НачалоСлова));
			Состояние = 0;
		КонецЕсли;
	КонецЦикла;
	
	Если Состояние=1 Тогда
		Результат.Добавить(Сред(Текст, НачалоСлова, Позиция-НачалоСлова));    
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//  Разделяет текст, разделенный запятыми, на массив структур "Наименование, Сокращение"
//
//  Параметры:
//      Текст              - разделяемый текст
//      ВыделятьСокращения - опциональный параметр режима работы
//
Функция ЧастиАдреса(Текст, ВыделятьСокращения=Истина) Экспорт
	
	Результат = Новый Массив;
	Для Каждого Часть Из СловаТекста(Текст, ",") Цикл
		СтрокаЧасти = СокрЛП(Часть);
		Если ПустаяСтрока(СтрокаЧасти) Тогда
			Продолжить;
		КонецЕсли;
		
		Позиция = ?(ВыделятьСокращения, СтрДлина(СтрокаЧасти), 0);
		Пока Позиция>0 Цикл
			Если Сред(СтрокаЧасти, Позиция, 1)=" " Тогда
				Результат.Добавить(Новый Структура("Наименование, Сокращение",
					СокрЛП(Лев(СтрокаЧасти, Позиция-1)), СокрЛП(Сред(СтрокаЧасти, Позиция))
				));
				Позиция = -1;
				Прервать;
			КонецЕсли;
			Позиция = Позиция - 1;
		КонецЦикла;
		Если Позиция=0 Тогда
			Результат.Добавить(Новый Структура("Наименование, Сокращение", СтрокаЧасти));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции    

//  Возвращает значение перечисления "ВариантыАдресногоКлассификатора" согласно текущей установке.
//
Функция ИспользуемыйАдресныйКлассификатор() Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		ИмяПеречисленияКЛАДР = "Перечисление.ВариантыАдресногоКлассификатора.КЛАДР";
		Возврат ПредопределенноеЗначение(ИмяПеречисленияКЛАДР);
	КонецЕсли;
	
	// Нет подсистемы, возможно нет и перечисления
	Возврат Неопределено;
КонецФункции

//  Возвращает признак того, является текст XML
//
//  Параметры:
//      Текст - проверяемый текст
//
Функция ЭтоСтрокаXML(Текст) Экспорт
	// Упрощенная проверка
	Возврат ТипЗнч(Текст)=Тип("Строка") И Лев(СокрЛ(Текст),1)="<";
КонецФункции

// Возвращает первый элемент из списка или Неопределено, если такого элемента нет
//
//  Параметры:
//      СписокДанных - список значений, массив или поле формы
//
Функция ПервыйИлиПустой(СписокДанных) Экспорт
	
	ТипСписка = ТипЗнч(СписокДанных);
	Если ТипСписка=Тип("СписокЗначений") И СписокДанных.Количество()>0 Тогда
		Возврат СписокДанных[0].Значение;
	ИначеЕсли ТипСписка=Тип("Массив") И СписокДанных.Количество()>0 Тогда
		Возврат СписокДанных[0];
	ИначеЕсли ТипСписка=Тип("ПолеФормы") Тогда
		Возврат ПервыйИлиПустой(СписокДанных.СписокВыбора);
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

//	LNK 13.02.2019 07:03:09
Функция ДанныеАнкетыПрименимы(ДанныеАнкеты)	Экспорт

//	Вызывается из Обработки.РезультатыАнкетирования - форма и модуль обработки.

	ДанныеПрименимы = НЕ (ДанныеАнкеты.ИнформационнаяКарта.Пустая() ИЛИ ДанныеАнкеты.НомерМагазина = 0 ИЛИ ДанныеАнкеты.ДатаВыдачиКарты = '00010101');

	Если ДанныеПрименимы Тогда

		ДанныеПрименимы = НЕ (ДанныеАнкеты.Контрагент.Пустая() И НЕ ДанныеАнкеты.ВидДисконтнойКарты = ПредопределенноеЗначение("Справочник.ВидыДисконтныхКарт.ПредварительныеКартыЛояльности"));

		Если ДанныеПрименимы Тогда

			ДанныеПрименимы = НЕ(ПустаяСтрока(ДанныеАнкеты.Телефон) И ПустаяСтрока(ДанныеАнкеты.Имя));

		КонецЕсли;

		Если ДанныеПрименимы И НЕ ДанныеАнкеты.КонтрагентПоНомеруТелефона.Пустая()
		И НЕ ДанныеАнкеты.Контрагент = ДанныеАнкеты.КонтрагентПоНомеруТелефона	Тогда

			ДанныеПрименимы = Ложь;

		КонецЕсли;

		Если ДанныеПрименимы Тогда

			ДанныеПрименимы = ?(НЕ ПустаяСтрока(ДанныеАнкеты.Имя), НЕ ПустаяСтрока(ДанныеАнкеты.ИмяЭквивалент), ДанныеПрименимы);
			ДанныеПрименимы = ?(НЕ ПустаяСтрока(ДанныеАнкеты.ИмяРебенка_1), НЕ ПустаяСтрока(ДанныеАнкеты.ИмяРебенкаЭквивалент_1) И ДанныеПрименимы, ДанныеПрименимы);
			ДанныеПрименимы = ?(НЕ ПустаяСтрока(ДанныеАнкеты.ИмяРебенка_2), НЕ ПустаяСтрока(ДанныеАнкеты.ИмяРебенкаЭквивалент_2) И ДанныеПрименимы, ДанныеПрименимы);
			ДанныеПрименимы = ?(НЕ ПустаяСтрока(ДанныеАнкеты.ИмяРебенка_3), НЕ ПустаяСтрока(ДанныеАнкеты.ИмяРебенкаЭквивалент_3) И ДанныеПрименимы, ДанныеПрименимы);

		КонецЕсли;

	КонецЕсли;

	Возврат ДанныеПрименимы;

КонецФункции // ДанныеАктуальны()

//	LNK 28.02.2019 06:50:30
Функция ЭтоПустоеНаименование(Наименование)	Экспорт

	Возврат Лев(СокрЛП(Наименование), СтрДлина(КонтактнаяИнформацияКлиентСерверПовтИсп.ПустоеНаименование())) = КонтактнаяИнформацияКлиентСерверПовтИсп.ПустоеНаименование()

КонецФункции // ЭтоПустоеНаименование()

