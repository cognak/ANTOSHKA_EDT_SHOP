
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ

// Процедура записи движений в регистр ЗаказыТоваров
//
Процедура ОтразитьЗаказыТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыТоваров;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ЗаказыТоваров.Записывать = Истина;
	Движения.ЗаказыТоваров.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура записи движений в регистр ЗакупкиТоваров
//
Процедура ОтразитьЗакупкиТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗакупкиТоваров;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ЗакупкиТоваров.Записывать = Истина;
	Движения.ЗакупкиТоваров.Загрузить(Таблица);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБСЛУЖИВАНИЯ ВЗАИМОРАСЧЕТОВ С ПОСТАВЩИКАМИ

// Процедура обновления итоговых показателей взаиморасчетов по документу
//
Функция ОбновитьИтоговыеПоказателиВзаиморасчетовПоДокументу(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	СтруктураРезультат = Новый Структура;
	
	СуммаКОплате = 0;
	СуммаОплачено = 0;
	СуммаВзаимозачет = 0;
	ДоступноКВзаимозачету = 0;
	ВзаимозачетПоДокументу = 0;
	ДоступноКВзаимозачетуПоДокументу = 0;
	
	//возврат поставщику
	СуммаПоступило = 0;
	НашДолг = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСПоставщиками.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Взаимозачет)
	|				ТОГДА РасчетыСПоставщиками.КОплате
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОплаченоВзаимозачет,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСПоставщиками.Взаимозачет
	|				ТОГДА РасчетыСПоставщиками.КОплате
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВзаимозачетПоДокументу
	|ПОМЕСТИТЬ Взаимозачет
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.ДокументРасчета = &ДокументРасчета
	|	И РасчетыСПоставщиками.Поставщик = &Поставщик
	|	И РасчетыСПоставщиками.Магазин = &Магазин
	|	И (РасчетыСПоставщиками.Взаимозачет
	|			ИЛИ РасчетыСПоставщиками.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Взаимозачет))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РасчетыСПоставщиками.СуммаПриход, 0) - ЕСТЬNULL(Взаимозачет.ОплаченоВзаимозачет, 0) КАК Оплачено,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщиками.КОплатеКонечныйОстаток < 0
	|			ТОГДА -РасчетыСПоставщиками.КОплатеКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КОплате,
	|	ЕСТЬNULL(Взаимозачет.ОплаченоВзаимозачет, 0) КАК ОплаченоВзаимозачет,
	|	ЕСТЬNULL(Взаимозачет.ВзаимозачетПоДокументу, 0) КАК ВзаимозачетПоДокументу
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(
	|			,
	|			,
	|			,
	|			,
	|			ДокументРасчета = &ДокументРасчета
	|				И Магазин = &Магазин
	|				И Поставщик = &Поставщик
	|				И НЕ(ДокументРасчета = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|						ИЛИ ДокументРасчета = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка))) КАК РасчетыСПоставщиками
	|		ЛЕВОЕ СОЕДИНЕНИЕ Взаимозачет КАК Взаимозачет
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВложенныйЗапрос.ДолгПоставщика) КАК ДолгПоставщика
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(РасчетыСПоставщикамиОстатки.КОплатеОстаток) КАК ДолгПоставщика
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|				,
	|				Магазин = &Магазин
	|					И Поставщик = &Поставщик
	|					И ЕСТЬNULL(ДокументРасчета.Закрыт, ИСТИНА)) КАК РасчетыСПоставщикамиОстатки
	|	ГДЕ
	|		РасчетыСПоставщикамиОстатки.КОплатеОстаток > 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РасчетыСПоставщикамиОстатки.ДокументРасчета) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(РасчетыСПоставщикамиОстатки.КОплатеОстаток), 0) КАК ДолгПоставщикаПоДокументу
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|			,
	|			Магазин = &Магазин
	|				И Поставщик = &Поставщик
	|				И ЕСТЬNULL(ДокументРасчета.Закрыт, ИСТИНА)
	|				И ДокументРасчета = &ДокументРасчета
	|				И НЕ(ДокументРасчета = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|						ИЛИ ДокументРасчета = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка))) КАК РасчетыСПоставщикамиОстатки
	|ГДЕ
	|	РасчетыСПоставщикамиОстатки.КОплатеОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(РасчетыСПоставщикамиОбороты.КОплатеРасход) КАК Поступило
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			ДокументРасчета = &ДокументРасчета
	|				И НЕ(ДокументРасчета = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|						ИЛИ ДокументРасчета = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка))) КАК РасчетыСПоставщикамиОбороты
	|ГДЕ
	|	РасчетыСПоставщикамиОбороты.Регистратор <> РасчетыСПоставщикамиОбороты.ДокументРасчета
	|	И (РасчетыСПоставщикамиОбороты.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|			ИЛИ РасчетыСПоставщикамиОбороты.Регистратор ССЫЛКА Документ.РегистрацияБезналичнойОплаты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВложенныйЗапрос.СуммаОстаток) КАК НашДолг
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(РасчетыСПоставщикамиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|		РасчетыСПоставщикамиОстатки.ДокументРасчета КАК ДокументРасчета
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|				,
	|				Магазин = &Магазин
	|					И Поставщик = &Поставщик) КАК РасчетыСПоставщикамиОстатки
	|	ГДЕ
	|		РасчетыСПоставщикамиОстатки.СуммаОстаток < 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РасчетыСПоставщикамиОстатки.ДокументРасчета) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("ДокументРасчета", Объект.Ссылка);
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	Запрос.УстановитьПараметр("Поставщик", Объект.Контрагент);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если Не Результат[1].Пустой() Тогда
		
		Выборка = Результат[1].Выбрать();
		Выборка.Следующий();
		
		СуммаКОплате = 				Выборка.КОплате;
		СуммаОплачено = 			Выборка.Оплачено;
		СуммаВзаимозачет = 			Выборка.ОплаченоВзаимозачет;
		ВзаимозачетПоДокументу = 	Выборка.ВзаимозачетПоДокументу;
	
	КонецЕсли;
	
	Если Не Результат[2].Пустой() Тогда
		
		Выборка = Результат[2].Выбрать();
		Выборка.Следующий();
		
		ДоступноКВзаимозачету = Выборка.ДолгПоставщика;
		
	КонецЕсли;
	
	Если Не Результат[3].Пустой() Тогда
		
		Выборка = Результат[3].Выбрать();
		Выборка.Следующий();
		
		ДоступноКВзаимозачетуПоДокументу = Выборка.ДолгПоставщикаПоДокументу;
		
	КонецЕсли;
	
	Если Не Результат[4].Пустой() Тогда
		
		Выборка = Результат[4].Выбрать();
		Выборка.Следующий();
		
		СуммаПоступило = Выборка.Поступило;
		
	КонецЕсли;
	
	Если Не Результат[5].Пустой() Тогда
		
		Выборка = Результат[5].Выбрать();
		Выборка.Следующий();
		
		НашДолг = Выборка.НашДолг;
		
	КонецЕсли;

	СтруктураРезультат.Вставить("СуммаКОплате", 					СуммаКОплате);
	СтруктураРезультат.Вставить("СуммаОплачено", 					СуммаОплачено);
	СтруктураРезультат.Вставить("СуммаПоступило", 					СуммаПоступило);
	СтруктураРезультат.Вставить("СуммаВзаимозачет", 				СуммаВзаимозачет);
	СтруктураРезультат.Вставить("ДоступноКВзаимозачету", 			ДоступноКВзаимозачету);
	СтруктураРезультат.Вставить("ВзаимозачетПоДокументу", 			ВзаимозачетПоДокументу);
	СтруктураРезультат.Вставить("ДоступноКВзаимозачетуПоДокументу", ДоступноКВзаимозачетуПоДокументу);
	СтруктураРезультат.Вставить("НашДолг", 							НашДолг);
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Процедура обработка выбора при подборе документа взаимозачета
//
Процедура ОбработкаВыбораПодборВзаимозачетовНаСервере(Объект, ВыбранноеЗначение, СуммаЗаказа) Экспорт 

	НомераСтрокКУдалению = Новый СписокЗначений;
	
	ТаблицаДокументовВзаимозачета = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресКорзиныВХранилище);
	
	Для каждого СтрокаКорзины Из ТаблицаДокументовВзаимозачета Цикл
		
		Если ЗначениеЗаполнено(СтрокаКорзины.НомерСтрокиДокумента) Тогда
			
			СтрокаЭтапаОплаты = Объект.ЭтапыОплат[СтрокаКорзины.НомерСтрокиДокумента - 1];
			Если НЕ ЗначениеЗаполнено(СтрокаКорзины.Сумма) Тогда
				НомераСтрокКУдалению.Добавить(СтрокаКорзины.НомерСтрокиДокумента);
			КонецЕсли;
			
		Иначе
			СтрокаЭтапаОплаты = Объект.ЭтапыОплат.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаЭтапаОплаты, СтрокаКорзины);
		СтрокаЭтапаОплаты.ФормаОплаты = Перечисления.ФормыОплаты.Взаимозачет;
		СтрокаЭтапаОплаты.ПроцентОплаты = ?(СуммаЗаказа = 0, 0, Окр(100*СтрокаЭтапаОплаты.Сумма/СуммаЗаказа, 2, РежимОкругления.Окр15как20));
		
	КонецЦикла;
	
	НомераСтрокКУдалению.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	Для Каждого НомерСтроки Из НомераСтрокКУдалению Цикл
		Объект.ЭтапыОплат.Удалить(НомерСтроки.Значение -1);
	КонецЦикла;

КонецПроцедуры

// Процедура проверяет ТЧ Этапы оплат на ошибки заполнения
//
Процедура ПроверитьТабличнуюЧастьЭтапыОплат(Объект, Отказ) Экспорт

	Если Объект.ЭтапыОплат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЗаказ = ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЭтапыОплат.НомерСтроки КАК НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ЭтапыОплат.ДатаПлатежа, ДЕНЬ) КАК ДатаПлатежа,
	|	ЭтапыОплат.ФормаОплаты КАК ФормаОплаты,
	|	ЭтапыОплат.ВидПлатежа КАК ВидПлатежа,
	|	ЭтапыОплат.ДокументВзаимозачета КАК ДокументВзаимозачета,
	|	ЕСТЬNULL(ЭтапыОплат.Сумма, 0) КАК Сумма
	|ПОМЕСТИТЬ ЭтапыОплат
	|ИЗ
	|	&ТЧЭтапыОплат КАК ЭтапыОплат
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	ДатаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыОплат.НомерСтроки КАК НомерСтроки,
	|	ЭтапыОплат.ДатаПлатежа КАК ДатаПлатежа,
	|	ЭтапыОплат.ФормаОплаты КАК ФормаОплаты,
	|	ЭтапыОплат.ВидПлатежа КАК ВидПлатежа,
	|	ВЫБОР
	|		КОГДА ЭтапыОплат.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Взаимозачет)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Взаимозачет,
	|	ЭтапыОплат.ДокументВзаимозачета КАК ДокументВзаимозачета,
	|	ЭтапыОплат.Сумма КАК Сумма
	|ИЗ
	|	ЭтапыОплат КАК ЭтапыОплат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИтоговая.ДатаПлатежа КАК ДатаПлатежа,
	|	МИНИМУМ(ТаблицаИтоговая.НомерСтрокиМеньше) КАК НомерСтрокиМеньше,
	|	ТаблицаИтоговая.НомерСтрокиБольше КАК НомерСтрокиБольше
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказНомерСтрокиМеньше.ДатаПлатежа КАК ДатаПлатежа,
	|		ЗаказНомерСтрокиМеньше.НомерСтроки КАК НомерСтрокиМеньше,
	|		МАКСИМУМ(ЗаказНомерСтрокиБольше.НомерСтроки) КАК НомерСтрокиБольше
	|	ИЗ
	|		ЭтапыОплат КАК ЗаказНомерСтрокиБольше
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭтапыОплат КАК ЗаказНомерСтрокиМеньше
	|			ПО ЗаказНомерСтрокиБольше.НомерСтроки <= ЗаказНомерСтрокиМеньше.НомерСтроки
	|				И ЗаказНомерСтрокиБольше.ДатаПлатежа > ЗаказНомерСтрокиМеньше.ДатаПлатежа
	|	ГДЕ
	|		ЗаказНомерСтрокиБольше.НомерСтроки <> ЗаказНомерСтрокиМеньше.НомерСтроки
	|		И ЗаказНомерСтрокиБольше.ФормаОплаты <> ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Взаимозачет)
	|		И ЗаказНомерСтрокиМеньше.ФормаОплаты <> ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Взаимозачет)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказНомерСтрокиМеньше.ДатаПлатежа,
	|		ЗаказНомерСтрокиМеньше.НомерСтроки) КАК ТаблицаИтоговая
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИтоговая.ДатаПлатежа,
	|	ТаблицаИтоговая.НомерСтрокиБольше
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиМеньше
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Сумма КАК Сумма,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.НомерСтроки КАК КоличествоСтрок
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТЧТовары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ПоступлениеТоваров.Ссылка) КАК ПоступлениеТоваров
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|ГДЕ
	|	ПоступлениеТоваров.ЗаказПоставщику = &Ссылка
	|	И ПоступлениеТоваров.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Товары.Сумма), 0) КАК Сумма,
	|	ЕСТЬNULL(СУММА(Товары.СуммаНДС), 0) КАК СуммаНДС,
	|	КОЛИЧЕСТВО(Товары.КоличествоСтрок) КАК КоличествоСтрок
	|ИЗ
	|	Товары КАК Товары");
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТЧЭтапыОплат", Объект.ЭтапыОплат.Выгрузить());
	Запрос.УстановитьПараметр("ТЧТовары", Объект.Товары.Выгрузить());
	
	МассивРезультатовЗапроса             = Запрос.ВыполнитьПакет();
	ТаблицаПоЭтапамОплат                 = МассивРезультатовЗапроса[1].Выгрузить();
	ТаблицаПоследовательностиЭтаповОплат = МассивРезультатовЗапроса[2].Выгрузить();
	ТаблицаТовары                        = МассивРезультатовЗапроса[5].Выгрузить();
	ТаблицаПоступлений                   = МассивРезультатовЗапроса[4]; 
	
	СуммаОплаты    = ТаблицаПоЭтапамОплат.Итог("Сумма");
	СуммаЗаказа    = ТаблицаТовары[0].Сумма;
	СуммаНДСЗаказа = ТаблицаТовары[0].СуммаНДС;
	СуммаЗаказа    = СуммаЗаказа + ?(Объект.ЦенаВключаетНДС, 0, СуммаНДСЗаказа);
	
	Если ТаблицаТовары[0].КоличествоСтрок = 0 И СуммаОплаты > 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'В документе отсутствует заказанный товар'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			"Объект.Товары",
			,
			Отказ);
		
	ИначеЕсли СуммаЗаказа <> СуммаОплаты Тогда
	
		Если Объект.ЭтоНовый()
			ИЛИ ТаблицаПоступлений.Пустой() Тогда
	
		ТекстСообщения = НСтр("ru = 'Сумма заказа %СуммаЗаказа% не соответствует сумме планируемых оплат %СуммаОплаты%'");
		
		Если НЕ ЭтоЗаказ Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"заказа", "поступления"); 
		КонецЕсли;
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%СуммаЗаказа%",СуммаЗаказа);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%СуммаОплаты%",СуммаОплаты);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Объект,
			,
			,
			Отказ);
	
		КонецЕсли;
	
	КонецЕсли;
	
	Если ЭтоЗаказ Тогда
		ДатаПоступления = Объект.ДатаПоступления;
	Иначе
		ДатаПоступления = Объект.Дата;
	КонецЕсли;
	
	Для каждого СтрокаЭтапаОплаты Из ТаблицаПоЭтапамОплат Цикл
		
		Если СтрокаЭтапаОплаты.Взаимозачет Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаЭтапаОплаты.ДокументВзаимозачета) ИЛИ СтрокаЭтапаОплаты.ДокументВзаимозачета = Неопределено Тогда
				
				ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Документ взаимозачета"" в строке %НомерСтроки% списка ""Этапы оплат""'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НомерСтроки%",СтрокаЭтапаОплаты.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				"Объект.ЭтапыОплат[" + (СтрокаЭтапаОплаты.НомерСтроки - 1) + "].ДокументВзаимозачета",
				,
				Отказ);
				
			КонецЕсли;
			
			Если СтрокаЭтапаОплаты.ДокументВзаимозачета = Объект.Ссылка Тогда
				
				ТекстСообщения = НСтр("ru = 'Нельзя использовать текущий документ для взаимозачета.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НомерСтроки%",СтрокаЭтапаОплаты.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				"Объект.ЭтапыОплат[" + (СтрокаЭтапаОплаты.НомерСтроки - 1) + "].ДокументВзаимозачета",
				,
				Отказ);
				
			КонецЕсли;
		Иначе
			
			Если НЕ ЗначениеЗаполнено(СтрокаЭтапаОплаты.ВидПлатежа) Тогда
				
				ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Вид платежа"" в строке %НомерСтроки% списка ""Этапы оплат""'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НомерСтроки%",СтрокаЭтапаОплаты.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				"Объект.ЭтапыОплат[" + (СтрокаЭтапаОплаты.НомерСтроки - 1) + "].ВидПлатежа",
				,
				Отказ);
				
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(СтрокаЭтапаОплаты.ДатаПлатежа) Тогда
			
				ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Дата платежа"" в строке %НомерСтроки% списка ""Этапы оплат""'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НомерСтроки%",СтрокаЭтапаОплаты.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				"Объект.ЭтапыОплат[" + (СтрокаЭтапаОплаты.НомерСтроки - 1) + "].ДатаПлатежа",
				,
				Отказ);
				
			КонецЕсли;

			
		КонецЕсли;
		
		Если СтрокаЭтапаОплаты.ВидПлатежа = Перечисления.ВидПлатежа.Предоплата И НачалоДня(СтрокаЭтапаОплаты.ДатаПлатежа) >= НачалоДня(ДатаПоступления) Тогда
	
			ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% 
			|дата платежа с видом оплаты 
			|""Предоплата"" должна быть меньше 
			|даты планируемого поступления'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НомерСтроки%",СтрокаЭтапаОплаты.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			"Объект.ЭтапыОплат[" + (СтрокаЭтапаОплаты.НомерСтроки - 1) + "].ДатаПлатежа",
			,
			Отказ);
			
		ИначеЕсли СтрокаЭтапаОплаты.ВидПлатежа = Перечисления.ВидПлатежа.ОтсрочкаПлатежа И НачалоДня(СтрокаЭтапаОплаты.ДатаПлатежа) < НачалоДня(ДатаПоступления) Тогда
			
			ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% 
			|дата платежа с видом оплаты 
			|""Отсрочка платежа"" должна быть больше 
			|даты планируемого поступления'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НомерСтроки%",СтрокаЭтапаОплаты.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			"Объект.ЭтапыОплат[" + (СтрокаЭтапаОплаты.НомерСтроки - 1) + "].ДатаПлатежа",
			,
			Отказ);
		
		КонецЕсли;
		
	КонецЦикла;
		
	Для каждого СтрокаЭтапаОплаты Из ТаблицаПоследовательностиЭтаповОплат Цикл
		
		ТекстСообщения = НСтр("ru = 'В строке %НомерСтрокиМеньше% 
		|табличной части ""Этапы оплат""
		|дата платежа должна быть не меньше, 
		|чем в строке %НомерСтрокиБольше% 
		|даты планируемого поступления'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НомерСтрокиМеньше%",СтрокаЭтапаОплаты.НомерСтрокиМеньше);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НомерСтрокиБольше%",СтрокаЭтапаОплаты.НомерСтрокиБольше);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстСообщения,
		,
		"Объект.ЭтапыОплат[" + (СтрокаЭтапаОплаты.НомерСтрокиМеньше - 1) + "].ДатаПлатежа",
		,
		Отказ);
		
	КонецЦикла;

КонецПроцедуры

// Процедура добавления этапа в ТЧ Этапы оплат
//
Процедура ДобавитьЭтапОплаты(Объект, ДатаПоступления) Экспорт

	Если Объект.Товары.Количество() = 0 ИЛИ Объект.ЭтапыОплат.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДатаЭтапаПлатежа = ДатаПоступления;
	
	СтрокаЭтапаОплаты = Объект.ЭтапыОплат.Добавить();
	
	СтрокаЭтапаОплаты.ДатаПлатежа   = ДатаЭтапаПлатежа;
	СтрокаЭтапаОплаты.ПроцентОплаты = 100;
	СтрокаЭтапаОплаты.Сумма = Объект.СуммаДокумента;
	
	ВидПлатежа = Перечисления.ВидПлатежа.ОтсрочкаПлатежа;
	СтрокаЭтапаОплаты.ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
	
	Если ДатаЭтапаПлатежа < ДатаПоступления Тогда
		ВидПлатежа = Перечисления.ВидПлатежа.Предоплата;
	Иначе
		СтрокаЭтапаОплаты.ОтсрочкаПлатежа = (ДатаЭтапаПлатежа - ДатаПоступления) / 86400;
	КонецЕсли;
	
	СтрокаЭтапаОплаты.ВидПлатежа = ВидПлатежа;
	
КонецПроцедуры

// Функция получения суммы неоплаченного этапа
//
Функция ПолучитьСуммуНеОплаченногоЭтапа (ДокументОснование, ФормаОплаты) Экспорт 
	
	СуммаПлатежа = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСПоставщиками.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Взаимозачет)
	|				ТОГДА РасчетыСПоставщиками.КОплате
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОплаченоВзаимозачет,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСПоставщиками.Взаимозачет
	|				ТОГДА РасчетыСПоставщиками.КОплате
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВзаимозачетПоДокументу
	|ПОМЕСТИТЬ Взаимозачет
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.ДокументРасчета = &ДокументРасчета
	|	И (РасчетыСПоставщиками.Взаимозачет
	|			ИЛИ РасчетыСПоставщиками.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Взаимозачет))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РасчетыСПоставщиками.СуммаПриход, 0) - ЕСТЬNULL(Взаимозачет.ОплаченоВзаимозачет, 0) КАК Оплачено,
	|	РасчетыСПоставщиками.ДокументРасчета
	|ПОМЕСТИТЬ РасчетыПоДокументу
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(
	|			,
	|			,
	|			,
	|			,
	|			ДокументРасчета = &ДокументРасчета
	|				И НЕ(ДокументРасчета = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|						ИЛИ ДокументРасчета = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка))) КАК РасчетыСПоставщиками
	|		ЛЕВОЕ СОЕДИНЕНИЕ Взаимозачет КАК Взаимозачет
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЭтапыОплат.Сумма) КАК СуммаКОплатеПоПлану
	|ПОМЕСТИТЬ КОплатеПоПлану
	|ИЗ
	|	Документ.ЗаказПоставщику.ЭтапыОплат КАК ЭтапыОплат
	|ГДЕ
	|	ЭтапыОплат.Ссылка = &ДокументРасчета
	|	И ЭтапыОплат.ФормаОплаты В (&ФормаОплаты)
	|	И ЭтапыОплат.ДатаПлатежа <= &ДатаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоДокументу.ДокументРасчета КАК ДокументРасчета,
	|	ЕСТЬNULL(РасчетыПоДокументу.Оплачено, 0) КАК Оплачено,
	|	ЕСТЬNULL(КОплатеПоПлану.СуммаКОплатеПоПлану, 0) КАК СуммаКОплатеПоПлану
	|ИЗ
	|	КОплатеПоПлану КАК КОплатеПоПлану
	|		ПОЛНОЕ СОЕДИНЕНИЕ РасчетыПоДокументу КАК РасчетыПоДокументу
	|		ПО (ИСТИНА)";
	
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		
		Если ЗначениеЗаполнено(ДокументОснование.ЗаказПоставщику) Тогда
			ДокументРасчета = ДокументОснование.ЗаказПоставщику;
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказПоставщику", "ПоступлениеТоваров");
			ДокументРасчета = ДокументОснование;
		КонецЕсли;
	Иначе 
		ДокументРасчета = ДокументОснование;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДокументРасчета", ДокументРасчета);
	Запрос.УстановитьПараметр("ДатаПлатежа", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ФормаОплаты", ФормаОплаты);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат СуммаПлатежа;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
		
	СуммаПлатежа = Выборка.СуммаКОплатеПоПлану -Выборка.Оплачено;
	СуммаПлатежа = ?(СуммаПлатежа < 0, 0, СуммаПлатежа);
	
	Возврат СуммаПлатежа;
	
КонецФункции

// Процедура расчета статусов этапов оплат
//
Процедура РассчитатьСтатусОплатыПоЭтапамОплаты(Объект) Экспорт
	
	ПоследнийЭтап = Неопределено;
	
	ЭтапыОплат = Объект.ЭтапыОплат;
	
	ИтоговыеПоказатели = ОбновитьИтоговыеПоказателиВзаиморасчетовПоДокументу(Объект);
	СуммаОплачено = ИтоговыеПоказатели.СуммаОплачено;
	
	Для каждого Этап Из ЭтапыОплат Цикл
		
		Если Этап.ФормаОплаты = Перечисления.ФормыОплаты.Взаимозачет Тогда
			Этап.СтатусОплаты = "Взаимозачет";
			Продолжить;
		КонецЕсли;
		
		СуммаЭтапа = Этап.Сумма;
		
		Если СуммаОплачено >= СуммаЭтапа Тогда
			Этап.СтатусОплаты = "Оплачен"
		ИначеЕсли СуммаОплачено > 0 И СуммаОплачено < СуммаЭтапа Тогда
			Этап.СтатусОплаты = "Оплачен частично"
		ИначеЕсли СуммаОплачено = 0 Тогда
			Этап.СтатусОплаты = "Не оплачен"
		КонецЕсли;
		
		СуммаОплачено = СуммаОплачено - МИН(СуммаОплачено, СуммаЭтапа);
		ПоследнийЭтап = Этап;
	КонецЦикла;
	
	Если ПоследнийЭтап <> Неопределено И СуммаОплачено > 0 И ЭтапыОплат.Итог("ПроцентОплаты") = 100 Тогда
		ПоследнийЭтап.СтатусОплаты = "Переплата"
	КонецЕсли;
	
КонецПроцедуры

// Функция получения текста запроса отчета График оплаты поставок
//
Функция ПолучитьТекстЗапросаГрафикаОплатыПоставок(СтруктураОтборов = Неопределено) Экспорт
	
	СтруктураОтборов = ?(СтруктураОтборов = Неопределено, Новый Структура, СтруктураОтборов);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПоставщиками.ДокументРасчета КАК ДокументРасчета,
	|	-РасчетыСПоставщиками.КОплатеОстаток КАК КОплате
	|ПОМЕСТИТЬ РасчетыСПоставщиками
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, %ДокументРасчета% ) КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.КОплатеОстаток < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщикуЭтапыОплат.Ссылка КАК Ссылка,
	|	ЗаказПоставщикуЭтапыОплат.Сумма КАК Сумма,
	|	ЗаказПоставщикуЭтапыОплат.ДатаПлатежа КАК ДатаПлатежа,
	|	ЗаказПоставщикуЭтапыОплат.ВидПлатежа КАК ВидПлатежа,
	|	ЗаказПоставщикуЭтапыОплат.ФормаОплаты КАК ФормаОплаты,
	|	ЗаказПоставщикуЭтапыОплат.ОтсрочкаПлатежа КАК ОтсрочкаПлатежа,
	|	ЗаказПоставщикуЭтапыОплат.Ссылка.Закрыт КАК Закрыт,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщикуЭтапыОплат.Ссылка.Закрыт
	|			ТОГДА ПоступленияТоваров.Дата
	|		ИНАЧЕ ЗаказПоставщикуЭтапыОплат.Ссылка.ДатаПоступления
	|	КОНЕЦ КАК ДатаПоступления,
	|	ЗаказПоставщикуЭтапыОплат.Ссылка.Контрагент,
	|	ЗаказПоставщикуЭтапыОплат.НомерСтроки КАК НомерСтроки,
	|	ЗаказПоставщикуЭтапыОплат.Ссылка.Магазин,
	|	ПоступленияТоваров.Ссылка КАК СвязанныйДокумент
	|ПОМЕСТИТЬ ЭтапыОплат
	|ИЗ
	|	Документ.ЗаказПоставщику.ЭтапыОплат КАК ЗаказПоставщикуЭтапыОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПоступлениеТоваров.Ссылка КАК Ссылка,
	|			ПоступлениеТоваров.Дата КАК Дата,
	|			ПоступлениеТоваров.ЗаказПоставщику КАК ЗаказПоставщику
	|		ИЗ
	|			Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|		ГДЕ
	|			ПоступлениеТоваров.ЗаказПоставщику В
	|					(ВЫБРАТЬ
	|						РасчетыСПоставщиками.ДокументРасчета
	|					ИЗ
	|						РасчетыСПоставщиками КАК РасчетыСПоставщиками)
	|			И ПоступлениеТоваров.Проведен) КАК ПоступленияТоваров
	|		ПО ЗаказПоставщикуЭтапыОплат.Ссылка = ПоступленияТоваров.ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщикуЭтапыОплат.Ссылка.Проведен
	|	И ЗаказПоставщикуЭтапыОплат.Ссылка В
	|			(ВЫБРАТЬ
	|				РасчетыСПоставщиками.ДокументРасчета
	|			ИЗ
	|				РасчетыСПоставщиками КАК РасчетыСПоставщиками)
	|	И (ЗаказПоставщикуЭтапыОплат.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|			ИЛИ ЗаказПоставщикуЭтапыОплат.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровЭтапыОплат.Ссылка,
	|	ПоступлениеТоваровЭтапыОплат.Сумма,
	|	ПоступлениеТоваровЭтапыОплат.ДатаПлатежа,
	|	ПоступлениеТоваровЭтапыОплат.ВидПлатежа,
	|	ПоступлениеТоваровЭтапыОплат.ФормаОплаты,
	|	ПоступлениеТоваровЭтапыОплат.ОтсрочкаПлатежа,
	|	ИСТИНА,
	|	ПоступлениеТоваровЭтапыОплат.Ссылка.Дата,
	|	ПоступлениеТоваровЭтапыОплат.Ссылка.Контрагент,
	|	ПоступлениеТоваровЭтапыОплат.НомерСтроки,
	|	ПоступлениеТоваровЭтапыОплат.Ссылка.Магазин,
	|	ПоступлениеТоваровЭтапыОплат.Ссылка.ЗаказПоставщику
	|ИЗ
	|	Документ.ПоступлениеТоваров.ЭтапыОплат КАК ПоступлениеТоваровЭтапыОплат
	|ГДЕ
	|	ПоступлениеТоваровЭтапыОплат.Ссылка.Проведен
	|	И ПоступлениеТоваровЭтапыОплат.Ссылка В
	|			(ВЫБРАТЬ
	|				РасчетыСПоставщиками.ДокументРасчета
	|			ИЗ
	|				РасчетыСПоставщиками КАК РасчетыСПоставщиками)
	|	И (ПоступлениеТоваровЭтапыОплат.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|			ИЛИ ПоступлениеТоваровЭтапыОплат.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыОплат.Ссылка КАК Документ,
	|	ЭтапыОплат.Контрагент КАК Поставщик,
	|	ЭтапыОплат.ФормаОплаты,
	|	ЭтапыОплат.ВидПлатежа,
	|	ЭтапыОплат.ДатаПлатежа,
	|	ЭтапыОплат.ОтсрочкаПлатежа,
	|	ДЕНЬНЕДЕЛИ(ЭтапыОплат.ДатаПлатежа) КАК НомерДняНедели,
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ЭтапыОплат.ДатаПоступления, ДЕНЬ), ДЕНЬ, ЭтапыОплат.ОтсрочкаПлатежа) КАК РасчетнаяДата,
	|	ЭтапыОплат.Сумма КАК Сумма,
	|	НАЧАЛОПЕРИОДА(ЭтапыОплат.ДатаПоступления, ДЕНЬ) КАК ДатаПоступления,
	|	ЭтапыОплат.Закрыт,
	|	РасчетыСПоставщиками.КОплате КАК КОплате,
	|	ЭтапыОплат.Магазин,
	|	ЭтапыОплат.НомерСтроки,
	|	ЭтапыОплат.СвязанныйДокумент КАК СвязанныйДокумент
	|ИЗ
	|	ЭтапыОплат КАК ЭтапыОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|		ПО ЭтапыОплат.Ссылка = РасчетыСПоставщиками.ДокументРасчета
	|%УсловиеГде%
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыОплат.НомерСтроки УБЫВ
	|ИТОГИ
	|	СУММА(Сумма),
	|	МАКСИМУМ(КОплате),
	|	МАКСИМУМ(СвязанныйДокумент)
	|ПО
	|	Документ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ДокументРасчета%", ?(СтруктураОтборов.Свойство("Документ"), "ДокументРасчета = &Документ", ""));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеГде%", ?(СтруктураОтборов.Свойство("УсловиеГде"), СтруктураОтборов.УсловиеГде,""));
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Обновление состояния просрочки оплаты и поступления в регистре сведений СостояниеОплатыПоступления
//
Процедура ОбновитьСостояниеОплатыПоступления(Документ, Удаление = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПоставщику.Ссылка
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.Ссылка = &Документ
		|	И НЕ ЗаказПоставщику.Закрыт
		|	И НЕ ЗаказПоставщику.Бессрочный
		|	И ДОБАВИТЬКДАТЕ(ЗаказПоставщику.ДатаПоступления, ДЕНЬ, ЗаказПоставщику.ДнейПросрочкиПоставки) < &ТекущаяДатаСеанса;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|"+ ПолучитьТекстЗапросаГрафикаОплатыПоставок(Новый Структура("Документ",))+"
		|";
		
	ТекущаяДатаСеанса = НачалоДня(ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса);
	
	Результат = Запрос.ВыполнитьПакет();
	
	//Просрочена поставка
	РезультатПросроченаПоставка = Результат[0];
	
	ПросроченаПоставка = НЕ РезультатПросроченаПоставка.Пустой();
	
	
	//Просрочена оплата
	ПросроченаОплата = Ложь;
	РезультатПросроченаОплата = Результат[3];
	
	ВыборкаПоДокументам = РезультатПросроченаОплата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СвязанныйДокумент = Неопределено;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.СвязанныйДокумент) И ВыборкаПоДокументам.СвязанныйДокумент <> ВыборкаПоДокументам.Документ Тогда
			СвязанныйДокумент = ВыборкаПоДокументам.СвязанныйДокумент;
		КонецЕсли;
		
		ВсеЭтапыОплачены = ?(ВыборкаПоДокументам.КОплате <= 0, Истина, Ложь);
		
		Если ВсеЭтапыОплачены Тогда
			Продолжить;
		КонецЕсли;
		
		КОплате = ВыборкаПоДокументам.КОплате;
		Выборка = ВыборкаПоДокументам.Выбрать();
		
		Пока Выборка.Следующий() И КОплате > 0 Цикл
			
			Сумма = Мин(КОплате, Выборка.Сумма);
				
			Если Выборка.Закрыт И Выборка.ВидПлатежа = Перечисления.ВидПлатежа.ОтсрочкаПлатежа И Выборка.ДатаПлатежа < ТекущаяДатаСеанса Тогда
				ПросроченаОплата = Истина;
				Прервать;
			ИначеЕсли Выборка.ВидПлатежа = Перечисления.ВидПлатежа.Предоплата И Выборка.ДатаПлатежа < ТекущаяДатаСеанса Тогда
				ПросроченаОплата = Истина;
				Прервать;
			КонецЕсли;
			
			КОплате = КОплате - Сумма;
		
		КонецЦикла;
		
	КонецЦикла;
	
	//документ
	МенеджерЗаписи = РегистрыСведений.СостояниеОплатыПоступления.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПросроченныйДокумент = Документ;
	
	Если НЕ Документ.Проведен ИЛИ Удаление Тогда
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПросроченаПоставка И НЕ ПросроченаОплата Тогда
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
	Иначе
		МенеджерЗаписи.ПросроченаПоставка = ?(ПросроченаПоставка, 0, 1);
		МенеджерЗаписи.ПросроченаОплата   = ?(ПросроченаОплата, 0, 1);
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	//связанный документ
	Если НЕ СвязанныйДокумент = Неопределено Тогда 
		
		МенеджерЗаписиСвязанныйДокумент = РегистрыСведений.СостояниеОплатыПоступления.СоздатьМенеджерЗаписи();
		МенеджерЗаписиСвязанныйДокумент.ПросроченныйДокумент = СвязанныйДокумент;
		
		Если НЕ СвязанныйДокумент.Проведен ИЛИ Удаление Тогда
			МенеджерЗаписиСвязанныйДокумент.Прочитать();
			
			Если МенеджерЗаписиСвязанныйДокумент.Выбран() Тогда
				МенеджерЗаписиСвязанныйДокумент.Удалить();
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ПросроченаПоставка И НЕ ПросроченаОплата Тогда
			МенеджерЗаписиСвязанныйДокумент.Прочитать();
			Если МенеджерЗаписиСвязанныйДокумент.Выбран() Тогда
				МенеджерЗаписиСвязанныйДокумент.Удалить();
			КонецЕсли;
		Иначе
			МенеджерЗаписиСвязанныйДокумент.ПросроченаПоставка = ?(ПросроченаПоставка, 0, 1);
			МенеджерЗаписиСвязанныйДокумент.ПросроченаОплата   = ?(ПросроченаОплата, 0, 1);
			МенеджерЗаписиСвязанныйДокумент.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновление состояния просрочки оплаты и поступления в регистре сведений СостояниеОплатыПоступления
//
Процедура ОбновитьСостояниеОплаты(Объект) Экспорт
	
	Если НЕ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.РасшифровкаПлатежа Цикл
		
		Если ЗначениеЗаполнено(Строка.ДокументРасчетовСКонтрагентом) Тогда
			ОбновитьСостояниеОплатыПоступления(Строка.ДокументРасчетовСКонтрагентом);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ РЕГЛАМЕНТНЫХ ЗАДАНИЙ

//Обработчик регламентного задания ОбновлениеСостояниеОплатыИПоступления
//
Процедура ОбновлениеСостоянияОплатыИПоступления() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СостояниеОплатыПоступления.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка
	|ПОМЕСТИТЬ Результат
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Проведен
	|	И НЕ ЗаказПоставщику.Закрыт
	|	И НЕ ЗаказПоставщику.Бессрочный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиОстатки.ДокументРасчета
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки КАК РасчетыСПоставщикамиОстатки
	|ГДЕ
	|	РасчетыСПоставщикамиОстатки.КОплатеОстаток < 0
	|	И (РасчетыСПоставщикамиОстатки.ДокументРасчета ССЫЛКА Документ.ЗаказПоставщику
	|			ИЛИ РасчетыСПоставщикамиОстатки.ДокументРасчета ССЫЛКА Документ.ПоступлениеТоваров)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Результат.Ссылка
	|ИЗ
	|	Результат КАК Результат";
	
	Запрос.УстановитьПараметр("ДатаПоступления", ТекущаяДатаСеанса());
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		ОбновитьСостояниеОплатыПоступления(Выборка.Ссылка);
	КонецЦикла;
	
	Константы.ДатаОбновленияСостоянияОплатыИПоступления.Установить(ТекущаяДатаСеанса());
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры
