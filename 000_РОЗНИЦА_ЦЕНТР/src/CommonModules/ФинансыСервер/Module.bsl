//	LNK 20.02.2017 11:25:49
Функция СписокДоступныхКасс(Пользователь = Неопределено, Организация = Неопределено, ВернутьСписокЗначений = Ложь)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если ВернутьСписокЗначений = Истина Тогда

			СписокКасс = Новый СписокЗначений;

	Иначе	СписокКасс = Новый Массив;

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Кассы.Ссылка КАК Касса,
	|	Кассы.Наименование КАК КлючПорядка
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	НЕ Кассы.ПометкаУдаления
	|	И НЕ Кассы.КассаУправляющейСистемы
	|	И Кассы.Магазин = ВЫБОР
	|			КОГДА &Магазин = НЕОПРЕДЕЛЕНО
	|				ТОГДА ВЫРАЗИТЬ(&Пользователь КАК Справочник.Пользователи).Магазин
	|			ИНАЧЕ &Магазин
	|		КОНЕЦ
	|	И Кассы.Владелец = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка"
	);
	Запрос.УстановитьПараметр("Магазин", ?(ОбменДаннымиПовтИсп.ЭтоГлавныйУзел(), Неопределено, ПараметрыСеанса.ТекущийМагазин));
	Запрос.УстановитьПараметр("Пользователь", ?(Пользователь = Неопределено, Пользователи.ТекущийПользователь(), Пользователь));
	Запрос.УстановитьПараметр("Организация" , ?(Организация = Неопределено , ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация, Запрос.Параметры.Пользователь), Организация));
	
	Если ВернутьСписокЗначений = Истина Тогда

			СписокКасс.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Касса"));

	Иначе	СписокКасс = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Касса");

	КонецЕсли;

	Возврат СписокКасс;

КонецФункции // СписокДоступныхКасс()

//	LNK 23.03.2017 15:02:48
Функция СписокДоступныхРасчетныхСчетов(Организация, КассаИлиМагазин, ВернутьСписокЗначений = Ложь, ДатаДокумента= Неопределено)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если ВернутьСписокЗначений = Истина Тогда

			СписокСчетов = Новый СписокЗначений;

	Иначе	СписокСчетов = Новый Массив;

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Входящие.Магазин КАК Магазин
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА &КассаИлиМагазин ССЫЛКА Справочник.Кассы
	|				ТОГДА ВЫРАЗИТЬ(&КассаИлиМагазин КАК Справочник.Кассы).Магазин
	|			ИНАЧЕ &КассаИлиМагазин
	|		КОНЕЦ КАК Магазин) КАК Входящие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
	|		ПО (БанковскиеСчета.ОбособленноеПодразделениеОрганизации = Фильтр.Магазин.ОбособленноеПодразделениеОрганизации
	|				ИЛИ БанковскиеСчета.ОбособленноеПодразделениеОрганизации = ЗНАЧЕНИЕ(Справочник.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка))
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация
	|	И НЕ БанковскиеСчета.ПометкаУдаления"
	);
	Запрос.УстановитьПараметр("Организация"    , Организация);
	Запрос.УстановитьПараметр("КассаИлиМагазин", КассаИлиМагазин);
	
	//А++ 20241127 по задаче занес проверку на дату закрытия счёта
	Если НЕ ДатаДокумента= Неопределено 
		и не Пользователи.ЭтоПолноправныйПользователь() 
		Тогда
		Запрос.Текст = Запрос.Текст +" И НАЧАЛОПЕРИОДА(БанковскиеСчета.ДатаЗакрытия, ДЕНЬ) > КОНЕЦПЕРИОДА(&ДатаЗакрытия, ДЕНЬ) ИЛИ НЕ БанковскиеСчета.ДатаЗакрытия = ДАТАВРЕМЯ(1,1,1) ";		
		Запрос.УстановитьПараметр("ДатаЗакрытия"    , ДатаДокумента);
	КонецЕсли;
	//А++ 20241127 по задаче занес проверку на дату закрытия счёта
	
	Если ВернутьСписокЗначений = Истина Тогда

			СписокСчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));

	Иначе	СписокСчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	КонецЕсли;
	
	Возврат СписокСчетов;

КонецФункции // СписокДоступныхРасчетныхСчетов()

//	LNK 20.02.2017 13:26:17
Функция СписокПоследнихОснованийХозяйственнойОперации(Касса, ВидДокумента, ХозяйственнаяОперация, ВернутьСписокЗначений = Ложь)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если ВернутьСписокЗначений = Истина Тогда

			СписокОснований = Новый СписокЗначений;

	Иначе	СписокОснований = Новый Массив;

	КонецЕсли;

	Запрос = Новый Запрос(СтрЗаменить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ТаблицаДокументы.Дата КАК Дата,
	|	ТаблицаДокументы.Основание КАК Основание
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ТаблицаДокументы
	|ГДЕ
	|	ТаблицаДокументы.Касса = &Касса
	|	И ТаблицаДокументы.Проведен
	|	И ТаблицаДокументы.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И НЕ ТаблицаДокументы.Основание = """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ"
	, "Документ.РасходныйКассовыйОрдер КАК", "Документ." + ВидДокумента + " КАК")
	);
	Запрос.УстановитьПараметр("Касса", Касса);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		Если СписокОснований.Количество() = 10 Тогда

			Прервать;

		КонецЕсли;

		Если ВернутьСписокЗначений = Истина Тогда

			Если СписокОснований.НайтиПоЗначению(Выборка.Основание) = Неопределено Тогда

				СписокОснований.Добавить(Выборка.Основание);

			КонецЕсли;

		Иначе

			Если СписокОснований.Найти(Выборка.Основание) = Неопределено Тогда

				СписокОснований.Добавить(Выборка.Основание);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	СписокОснований.Добавить(ФинансыПовтИсп.ТекстОснованияХозяйственнойОперации(ХозяйственнаяОперация));

	Возврат СписокОснований;

КонецФункции // СписокПоследнихОснованийХозяйственнойОперации()

//	LNK 20.02.2017 15:41:44
Функция СписокПоследнихОтветственныхЛиц(Касса, ВидДокумента, ОтветственноеЛицо, ВернутьСписокЗначений = Ложь)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если ВернутьСписокЗначений = Истина Тогда

			СписокОтветственныхЛиц = Новый СписокЗначений;

	Иначе	СписокОтветственныхЛиц = Новый Массив;

	КонецЕсли;

	Запрос = Новый Запрос(СтрЗаменить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ТаблицаДокументы.Дата КАК Дата,
	|	ТаблицаДокументы.Ссылка КАК Ссылка,
	|	ТаблицаДокументы.ГлавныйБухгалтер КАК ГлавныйБухгалтер
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ТаблицаДокументы
	|ГДЕ
	|	ТаблицаДокументы.Касса = &Касса
	|	И ТаблицаДокументы.Проведен
	|	И НЕ ТаблицаДокументы.ГлавныйБухгалтер = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	Ссылка УБЫВ"
	, "Документ.РасходныйКассовыйОрдер КАК", "Документ." + ВидДокумента + " КАК")
	);
	Запрос.УстановитьПараметр("Касса", Касса);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		Если СписокОтветственныхЛиц.Количество() = 10 Тогда

			Прервать;

		КонецЕсли;

		Если ВернутьСписокЗначений = Истина Тогда

			Если СписокОтветственныхЛиц.НайтиПоЗначению(Выборка.ГлавныйБухгалтер) = Неопределено Тогда

				СписокОтветственныхЛиц.Добавить(Выборка.ГлавныйБухгалтер);

			КонецЕсли;

		Иначе

			Если СписокОтветственныхЛиц.Найти(Выборка.ГлавныйБухгалтер) = Неопределено Тогда

				СписокОтветственныхЛиц.Добавить(Выборка.ГлавныйБухгалтер);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат СписокОтветственныхЛиц;

КонецФункции // СписокПоследнихОтветственныхЛиц()





