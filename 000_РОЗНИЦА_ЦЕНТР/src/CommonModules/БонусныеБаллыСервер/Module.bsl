#Область ПрограммныйИнтерфейс

Функция ПолучитьСостояниеБонусногоСчета(Контрагент, Период, ТипыБонусов)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК ПрограммаЛояльности
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	Справочник.ПрограммыЛояльности КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.ТипБонусов В(&ТипыБонусов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПрограммаЛояльности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТаблицаБаллы.СуммаБонусныхБаллов) КАК СуммаБонусныхБаллов,
	|	СУММА(ТаблицаБаллы.СуммаБонусныхБалловВРезерве) КАК СуммаБонусныхБалловВРезерве
	|ПОМЕСТИТЬ Бонусы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаАктивные.СуммаБонусныхБалловОстаток КАК СуммаБонусныхБаллов,
	|		0 КАК СуммаБонусныхБалловВРезерве
	|	ИЗ
	|		РегистрНакопления.БонусныеБаллы.Остатки(
	|				ДОБАВИТЬКДАТЕ(&Период, СЕКУНДА, 1),
	|				Контрагент = &Контрагент
	|					И ПрограммаЛояльности В
	|						(ВЫБРАТЬ
	|							Фильтр.ПрограммаЛояльности
	|						ИЗ
	|							Фильтр)) КАК ТаблицаАктивные
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		ТаблицаВРезерве.СуммаБонусныхБалловОстаток
	|	ИЗ
	|		РегистрНакопления.БонусныеБаллыВРезерве.Остатки(
	|				ДОБАВИТЬКДАТЕ(&Период, СЕКУНДА, 1),
	|				Контрагент = &Контрагент
	|					И ПрограммаЛояльности В
	|						(ВЫБРАТЬ
	|							Фильтр.ПрограммаЛояльности
	|						ИЗ
	|							Фильтр)) КАК ТаблицаВРезерве
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ТаблицаПоЗаказам.СуммаБонусныхБалловОстаток > 0
	|				ТОГДА -ТаблицаПоЗаказам.СуммаБонусныхБалловОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		0
	|	ИЗ
	|		РегистрНакопления.БонусныеБаллыПоЗаказамПокупателей.Остатки(
	|				ДОБАВИТЬКДАТЕ(&Период, СЕКУНДА, 1),
	|				Контрагент = &Контрагент
	|					И ПрограммаЛояльности В
	|						(ВЫБРАТЬ
	|							Фильтр.ПрограммаЛояльности
	|						ИЗ
	|							Фильтр)) КАК ТаблицаПоЗаказам) КАК ТаблицаБаллы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Фильтр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВедущая.Период КАК Период_П,
	|	МАКСИМУМ(ТаблицаВедущая.Регистратор) КАК Регистратор_П,
	|	ТаблицаГраницы.Период КАК Период_ГП,
	|	ТаблицаГраницы.Регистратор КАК Регистратор_ГП
	|ПОМЕСТИТЬ Границы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаРеестр.Контрагент КАК Контрагент,
	|		ТаблицаРеестр.Период КАК Период,
	|		МАКСИМУМ(ТаблицаРеестр.Регистратор) КАК Регистратор
	|	ИЗ
	|		Последовательность.СписаниеБонусныхПрограмм КАК ТаблицаРеестр
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ТаблицаПериоды.Контрагент КАК Контрагент,
	|				МАКСИМУМ(ТаблицаПериоды.Период) КАК Период
	|			ИЗ
	|				Последовательность.СписаниеБонусныхПрограмм КАК ТаблицаПериоды
	|			ГДЕ
	|				ТаблицаПериоды.Контрагент = &Контрагент
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ТаблицаПериоды.Контрагент) КАК ТаблицаПериоды
	|			ПО ТаблицаРеестр.Контрагент = ТаблицаПериоды.Контрагент
	|				И ТаблицаРеестр.Период = ТаблицаПериоды.Период
	|	ГДЕ
	|		ТаблицаРеестр.Контрагент = &Контрагент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаРеестр.Контрагент,
	|		ТаблицаРеестр.Период) КАК ТаблицаВедущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.СписаниеБонусныхПрограмм.Границы КАК ТаблицаГраницы
	|		ПО ТаблицаВедущая.Контрагент = ТаблицаГраницы.Контрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВедущая.Период,
	|	ТаблицаГраницы.Период,
	|	ТаблицаГраницы.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	СУММА(ТаблицаДанных.СуммаБонусныхБаллов) КАК СуммаБонусныхБаллов,
	|	СУММА(ТаблицаДанных.СуммаБонусныхБалловВРезерве) КАК СуммаБонусныхБалловВРезерве,
	|	МАКСИМУМ(ТаблицаДанных.Период_П) КАК Период_П,
	|	МАКСИМУМ(ТаблицаДанных.Регистратор_П) КАК Регистратор_П,
	|	МАКСИМУМ(ТаблицаДанных.Период_ГП) КАК Период_ГП,
	|	МАКСИМУМ(ТаблицаДанных.Регистратор_ГП) КАК Регистратор_ГП
	|ИЗ
	|	(ВЫБРАТЬ
	|		Бонусы.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов,
	|		Бонусы.СуммаБонусныхБалловВРезерве КАК СуммаБонусныхБалловВРезерве,
	|		ДАТАВРЕМЯ(1, 1, 1) КАК Период_П,
	|		НЕОПРЕДЕЛЕНО КАК Регистратор_П,
	|		ДАТАВРЕМЯ(1, 1, 1) КАК Период_ГП,
	|		НЕОПРЕДЕЛЕНО КАК Регистратор_ГП
	|	ИЗ
	|		Бонусы КАК Бонусы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		0,
	|		Границы.Период_П,
	|		Границы.Регистратор_П,
	|		Границы.Период_ГП,
	|		Границы.Регистратор_ГП
	|	ИЗ
	|		Границы КАК Границы) КАК ТаблицаДанных"
	);
	Запрос.УстановитьПараметр("Период"		, Период);
	Запрос.УстановитьПараметр("Контрагент"	, Контрагент);
	Запрос.УстановитьПараметр("ТипыБонусов"	, ТипыБонусов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеОтвета = ОбщегоНазначенияКлиентСервер.СтрокаТаблицыКакСтруктура(РезультатЗапроса.Колонки);

	Если НЕ РезультатЗапроса.Пустой() Тогда
	
		ДанныеВыборка = РезультатЗапроса.Выбрать();
	    ДанныеВыборка.Следующий();

		ЗаполнитьЗначенияСвойств(ДанныеОтвета, ДанныеВыборка);
	
	КонецЕсли;
	
	Возврат ДанныеОтвета;

КонецФункции

//	LNK 16.02.2021 08:05:04 - ИСТОЧНИК ДАННЫХ О СОСТОЯНИИ НАКОПЛЕНИЙ
Функция ОстаткиИДвиженияБонусныхБаллов(ПараметрыЗапроса)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику(ПараметрыЗапроса.Период);

	ТоварыДляОплаты = ПроверитьСтруктуруТаблицыТоварыДляОплаты(ПараметрыЗапроса.ТоварыДляОплаты);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНачала"			, ПараметрыЗапроса.Период);
	Запрос.УстановитьПараметр("ПрограммаЛояльности"	, ?(ПараметрыЗапроса.ПрограммаЛояльности = Неопределено, Справочники.ПрограммыЛояльности.ПустаяСсылка(), ПараметрыЗапроса.ПрограммаЛояльности));
	Запрос.УстановитьПараметр("Контрагент"			, ПараметрыЗапроса.Контрагент);
	Запрос.УстановитьПараметр("Магазин"				, ПараметрыЗапроса.Магазин);
	Запрос.УстановитьПараметр("ТоварыДляОплаты"		, ПараметрыЗапроса.ТоварыДляОплаты);
	Запрос.УстановитьПараметр("ТоварыУказаны"		, НЕ ПараметрыЗапроса.ТоварыДляОплаты.Количество() = 0);
	Запрос.УстановитьПараметр("ТипыБонусов"			, ПараметрыЗапроса.ТипыБонусов);
	Запрос.УстановитьПараметр("ТипыБонусовУказаны"	, НЕ ПараметрыЗапроса.ТипыБонусов.Количество() = 0);
	Запрос.УстановитьПараметр("ТолькоТекущийОстаток", ПараметрыЗапроса.ТолькоТекущийОстаток);
	Запрос.УстановитьПараметр("ЗаказПокупателя"		, ПараметрыЗапроса.ЗаказПокупателя);
	Запрос.УстановитьПараметр("РазрешитьОплатуБонуснымиБалламиПодарочныхСертификатов", УчетнаяПолитика.РазрешитьОплатуБонуснымиБалламиПодарочныхСертификатов);

//	Определимся с допустимым списком программ лояльности.
//	В случае наличия "ТоварыДляОплаты" в фильтр войдут только допустимые для оплаты программы лояльности.
//	Если таблица товаров пустая или не передана - то все программы лояльности.
	ПолучитьФильтрыЗапроса(Запрос);

//	Получаем нужные данные с учётом фильтра программ лояльности.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОстатки.Период КАК Период,
	|	ТаблицаОстатки.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	СУММА(ТаблицаОстатки.СуммаБонусныхБалловНачало) КАК СуммаБонусныхБалловНачало,
	|	СУММА(ТаблицаОстатки.СуммаБонусныхБалловВРезерве) КАК СуммаБонусныхБалловВРезерве
	|ПОМЕСТИТЬ Входящий
	|ИЗ
	|	(ВЫБРАТЬ
	|		&ДатаНачала КАК Период,
	|		ТаблицаРегистра.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|		ТаблицаРегистра.СуммаБонусныхБалловОстаток КАК СуммаБонусныхБалловНачало,
	|		0 КАК СуммаБонусныхБалловВРезерве
	|	ИЗ
	|		РегистрНакопления.БонусныеБаллы.Остатки(
	|				&ДатаНачала,
	|				Контрагент = &Контрагент
	|					И ВЫБОР
	|						КОГДА &ПрограммаЛояльности = ЗНАЧЕНИЕ(Справочник.ПрограммыЛояльности.ПустаяСсылка)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ПрограммаЛояльности = &ПрограммаЛояльности
	|					КОНЕЦ
	|					И ПрограммаЛояльности В
	|						(ВЫБРАТЬ
	|							Фильтр.ПрограммаЛояльности
	|						ИЗ
	|							Фильтр)) КАК ТаблицаРегистра
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&ДатаНачала,
	|		ТаблицаВРезерве.ПрограммаЛояльности,
	|		0,
	|		ТаблицаВРезерве.СуммаБонусныхБалловОстаток
	|	ИЗ
	|		РегистрНакопления.БонусныеБаллыВРезерве.Остатки(
	|				&ДатаНачала,
	|				Контрагент = &Контрагент
	|					И ВЫБОР
	|						КОГДА &ПрограммаЛояльности = ЗНАЧЕНИЕ(Справочник.ПрограммыЛояльности.ПустаяСсылка)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ПрограммаЛояльности = &ПрограммаЛояльности
	|					КОНЕЦ
	|					И ПрограммаЛояльности В
	|						(ВЫБРАТЬ
	|							Фильтр.ПрограммаЛояльности
	|						ИЗ
	|							Фильтр)) КАК ТаблицаВРезерве
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&ДатаНачала,
	|		ТаблицаПоЗаказам.ПрограммаЛояльности,
	|		ВЫБОР
	|			КОГДА СУММА(ТаблицаПоЗаказам.СуммаБонусныхБалловОстаток) > 0
	|				ТОГДА -СУММА(ТаблицаПоЗаказам.СуммаБонусныхБалловОстаток)
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		0
	|	ИЗ
	|		РегистрНакопления.БонусныеБаллыПоЗаказамПокупателей.Остатки(
	|				&ДатаНачала,
	|				Контрагент = &Контрагент
	|					И ВЫБОР
	|						КОГДА &ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ НЕ ЗаказПокупателя = &ЗаказПокупателя
	|					КОНЕЦ
	|					И ВЫБОР
	|						КОГДА &ПрограммаЛояльности = ЗНАЧЕНИЕ(Справочник.ПрограммыЛояльности.ПустаяСсылка)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ПрограммаЛояльности = &ПрограммаЛояльности
	|					КОНЕЦ
	|					И ПрограммаЛояльности В
	|						(ВЫБРАТЬ
	|							Фильтр.ПрограммаЛояльности
	|						ИЗ
	|							Фильтр)) КАК ТаблицаПоЗаказам
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПоЗаказам.ПрограммаЛояльности) КАК ТаблицаОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатки.Период,
	|	ТаблицаОстатки.ПрограммаЛояльности
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаОстатки.ПрограммаЛояльности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРегистра.ПериодДень КАК Период,
	|	ТаблицаРегистра.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТаблицаРегистра.СуммаБонусныхБалловКонечныйОстаток КАК СуммаБонусныхБалловКонец
	|ПОМЕСТИТЬ Конечный
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы.ОстаткиИОбороты(
	|			&ДатаНачала,
	|			,
	|			Авто,
	|			Движения,
	|			Контрагент = &Контрагент
	|				И ВЫБОР
	|					КОГДА &ПрограммаЛояльности = ЗНАЧЕНИЕ(Справочник.ПрограммыЛояльности.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ПрограммаЛояльности = &ПрограммаЛояльности
	|				КОНЕЦ
	|				И ПрограммаЛояльности В
	|					(ВЫБРАТЬ
	|						Фильтр.ПрограммаЛояльности
	|					ИЗ
	|						Фильтр)) КАК ТаблицаРегистра
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПрограммаЛояльности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРегистра.Период КАК Период,
	|	""Сейчас"" КАК ПериодТекст,
	|	ТаблицаРегистра.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТаблицаРегистра.СуммаБонусныхБалловНачало КАК Сумма,
	|	ТаблицаРегистра.СуммаБонусныхБалловВРезерве КАК СуммаВРезерве
	|ПОМЕСТИТЬ НачальныйОстаток
	|ИЗ
	|	Входящий КАК ТаблицаРегистра
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ДатаНачала,
	|	""Сейчас"",
	|	Конечный.ПрограммаЛояльности,
	|	0,
	|	0
	|ИЗ
	|	Конечный КАК Конечный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведущая.Период,
	|	Ведущая.ПериодТекст,
	|	Ведущая.ПрограммаЛояльности,
	|	Ведущая.Сумма,
	|	0
	|ИЗ
	|	(ВЫБРАТЬ
	|		&ДатаНачала КАК Период,
	|		""Сейчас"" КАК ПериодТекст,
	|		ЗНАЧЕНИЕ(Справочник.ПрограммыЛояльности.ПустаяСсылка) КАК ПрограммаЛояльности,
	|		0 КАК Сумма) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Конечный КАК Конечный
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Конечный.Период ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачальныйОстаток.Период КАК Период,
	|	НачальныйОстаток.ПериодТекст КАК ПериодТекст,
	|	НачальныйОстаток.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	СУММА(НачальныйОстаток.Сумма) КАК Сумма,
	|	СУММА(НачальныйОстаток.СуммаВРезерве) КАК СуммаВРезерве,
	|	Фильтр.БезОграничения КАК БезОграничения,
	|	Фильтр.Приоритет КАК Приоритет,
	|	НачальныйОстаток.ПрограммаЛояльности.МаксимальныйПроцентОплатыБонусами КАК МаксимальныйПроцентОплатыБонусами,
	|	НачальныйОстаток.ПрограммаЛояльности.ТипБонусов КАК ТипБонусов
	|ИЗ
	|	НачальныйОстаток КАК НачальныйОстаток
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
	|		ПО НачальныйОстаток.ПрограммаЛояльности = Фильтр.ПрограммаЛояльности
	|
	|СГРУППИРОВАТЬ ПО
	|	НачальныйОстаток.Период,
	|	НачальныйОстаток.ПрограммаЛояльности,
	|	НачальныйОстаток.ПериодТекст,
	|	Фильтр.БезОграничения,
	|	Фильтр.Приоритет,
	|	НачальныйОстаток.ПрограммаЛояльности.МаксимальныйПроцентОплатыБонусами,
	|	НачальныйОстаток.ПрограммаЛояльности.ТипБонусов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПрограммаЛояльности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРегистра.Период КАК Период,
	|	ТаблицаРегистра.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТаблицаРегистра.СуммаБонусныхБалловКонец КАК Сумма,
	|	Фильтр.БезОграничения КАК БезОграничения,
	|	Фильтр.Приоритет КАК Приоритет,
	|	ТаблицаРегистра.ПрограммаЛояльности.МаксимальныйПроцентОплатыБонусами КАК МаксимальныйПроцентОплатыБонусами,
	|	ТаблицаРегистра.ПрограммаЛояльности.ТипБонусов КАК ТипБонусов
	|ИЗ
	|	Конечный КАК ТаблицаРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
	|		ПО ТаблицаРегистра.ПрограммаЛояльности = Фильтр.ПрограммаЛояльности
	|ГДЕ
	|	НЕ &ТолькоТекущийОстаток = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	ПрограммаЛояльности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПрограмм.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТоварыПрограмм.МаксимальныйПроцентОплатыБонусами КАК МаксимальныйПроцентОплатыБонусами,
	|	ТоварыПрограмм.ТипБонусов КАК ТипБонусов,
	|	ТоварыПрограмм.БезОграничения КАК БезОграничения,
	|	ТоварыПрограмм.Приоритет КАК Приоритет,
	|	ТоварыПрограмм.Номенклатура КАК Номенклатура,
	|	ТоварыПрограмм.КлючСвязиБонусныхБаллов КАК КлючСвязиБонусныхБаллов,
	|	ТоварыПрограмм.Упаковка КАК Упаковка,
	|	ТоварыПрограмм.Количество КАК Количество,
	|	ТоварыПрограмм.СуммаСНДС КАК СуммаСНДС
	|ИЗ
	|	ТоварыПрограмм КАК ТоварыПрограмм
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &РазрешитьОплатуБонуснымиБалламиПодарочныхСертификатов = ИСТИНА
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ ТИПЗНАЧЕНИЯ(ТоварыПрограмм.Номенклатура) = ТИП(Справочник.СерийныеНомера)
	|					И НЕ ВЫРАЗИТЬ(ТоварыПрограмм.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Фильтр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Входящий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Конечный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НачальныйОстаток
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыПрограмм"
	;

	РезультатыЗапроса = Запрос.ВыполнитьПакет();

	ТаблицаБонусныеБаллы = ТаблицаБонусныеБаллыПустая();
	
	ТаблицаТоварыПрограмм = РезультатыЗапроса[5].Выгрузить();
	ТаблицаТоварыПрограмм.Индексы.Добавить("ПрограммаЛояльности");
	#Если _ Тогда
	ТаблицаТоварыПрограмм = Новый ТаблицаЗначений;
	#КонецЕсли

	НачальныйОстатокВБаллах = 0;
	ТекущийОстаток			= 0;
	
//	1.	Текущий остаток
	Выборка = РезультатыЗапроса[3].Выбрать();

	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаБонусныеБаллы.Добавить();
		НоваяСтрока.Период		= Выборка.Период;
		НоваяСтрока.ПериодТекст	= Выборка.ПериодТекст;
		НоваяСтрока.ПрограммаЛояльности = Выборка.ПрограммаЛояльности;
		НоваяСтрока.МаксимальныйПроцентОплатыБонусами = Выборка.МаксимальныйПроцентОплатыБонусами;
		НоваяСтрока.ТипБонусов			= Выборка.ТипБонусов;
		НоваяСтрока.Сумма				= Выборка.Сумма;
		НоваяСтрока.СуммаВРезерве		= Выборка.СуммаВРезерве;
		НоваяСтрока.ТекущийОстаток		= Истина;
		НоваяСтрока.БезОграничения		= Выборка.БезОграничения;
		НоваяСтрока.Приоритет			= Выборка.Приоритет;

		НоваяСтрока.ТоварыПрограмм = ТаблицаТоварыПрограмм.Скопировать(Новый Структура("ПрограммаЛояльности", Выборка.ПрограммаЛояльности));
		НоваяСтрока.ТоварыПрограмм.Индексы.Добавить("Номенклатура");	//	LNK 13.06.2021 07:51:27

		НачальныйОстатокВБаллах	= НоваяСтрока.Сумма;
		ТекущийОстаток			= НоваяСтрока.Сумма;
		
	КонецЦикла;
	
	Если НЕ ПараметрыЗапроса.ТолькоТекущийОстаток Тогда

	//	2.	Списания баллов
		Выборка = РезультатыЗапроса[4].Выбрать();

		Пока Выборка.Следующий() Цикл
			
			Изменение = Выборка.Сумма - ТекущийОстаток;
			
			Если Изменение = 0 Тогда

				Продолжить;

			КонецЕсли;
			
			НоваяСтрока = ТаблицаБонусныеБаллы.Добавить();
			НоваяСтрока.Период				= Выборка.Период;
			НоваяСтрока.ПрограммаЛояльности = Выборка.ПрограммаЛояльности;
			НоваяСтрока.МаксимальныйПроцентОплатыБонусами = Выборка.МаксимальныйПроцентОплатыБонусами;
			НоваяСтрока.ТипБонусов			= Выборка.ТипБонусов;
			НоваяСтрока.Сумма				= Выборка.Сумма;
			НоваяСтрока.Изменение			= Изменение;
			НоваяСтрока.БезОграничения		= Выборка.БезОграничения;
			НоваяСтрока.Приоритет			= Выборка.Приоритет;

		//	для будущих периодов перечень возможных к оплате товаров не актуален.
			НоваяСтрока.ТоварыПрограмм = ТаблицаТоварыПрограмм.СкопироватьКолонки();

			Если Изменение > 0 Тогда

				НоваяСтрока.ПериодТекст = НСтр("ru = 'Начисление через'")
				                   + " " + СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(Цел((Выборка.Период - ПараметрыЗапроса.Период)/(24*60*60)), НСтр("ru = 'день, дня, дней'"))
				                   + " " + "("+Формат(Выборка.Период,"ДЛФ=D")+"):"
				                   + " " + СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(Изменение, НСтр("ru = 'балл, балла, баллов'"))
			Иначе

				НоваяСтрока.ПериодТекст = НСтр("ru = 'Аннуляция через'")
				                   + " " + СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(Цел((Выборка.Период - ПараметрыЗапроса.Период)/(24*60*60)), НСтр("ru = 'день, дня, дней'"))
				                   + " " + "("+Формат(Выборка.Период,"ДЛФ=D")+"):"
				                   + " " + СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(-Изменение, НСтр("ru = 'балл, балла, баллов'"))
			КонецЕсли;

			ТекущийОстаток = Выборка.Сумма; 

		КонецЦикла;

	КонецЕсли;

	Возврат ТаблицаБонусныеБаллы;

КонецФункции

Функция BPS_АвторизацияКонтрагента(Контрагент, ПараметрыЗапроса, Таймаут = 5)	Экспорт

	ДанныеЗапроса = ПолучитьПравильныеПараметрыЗапроса(ПараметрыЗапроса, Контрагент);

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() И РозничныеПродажиСлужебный.РесурсWebRetailДоступен() Тогда

		Попытка

			Подключение  = СервисыСервер.Подключение("BPS", Таймаут);
			ДанныеОтвета = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(Подключение.BuyerBlock("Authorization", ОбщегоНазначенияКлиентСервер.СериализоватьJSON(ДанныеЗапроса, Истина)));

		Исключение

			ТекстОшибки = ОписаниеОшибки();
			СервисыСервер.РегистрацияОшибки(ТекстОшибки, Истина);

		КонецПопытки;

	ИначеЕсли ОбменДаннымиПовтИсп.ЭтоГлавныйУзел()
		ИЛИ   ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().ВидУзла = Перечисления.ВидыУзлов.ТестовыйУзел
		ИЛИ   ТехническаяПоддержкаВызовСервера.ОтладочныйРежимРаботы()
	Тогда

		ДанныеОтвета = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(BPS_BuyerBlock("Authorization", ОбщегоНазначенияКлиентСервер.СериализоватьJSON(ДанныеЗапроса, Истина)));

	КонецЕсли;

КонецФункции

//	LNK 16.02.2021 11:10:59
Функция BPS_ПолучитьОстатокБонусныхБаллов(Контрагент, ПараметрыЗапроса, Период = '00010101', Таймаут = 5)	Экспорт

	Перем Команда;

	СуммаБонусныхБаллов = 0;

	ДанныеЗапроса = Новый Структура(
		"Команда, Данные"
		, ?(ПараметрыЗапроса.Свойство("Команда", Команда), Команда, "ПолучитьОстатокБонусов")
		, ПолучитьПравильныеПараметрыЗапроса(ПараметрыЗапроса, Контрагент, Период)
	);
	ДанныеВозврата = Новый Структура("Ошибка, ОписаниеОшибки, СуммаБонусныхБаллов, СуммаБонусныхБалловВРезерве", Ложь, "", 0, 0);

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() И РозничныеПродажиСлужебный.РесурсWebRetailДоступен() Тогда

		Попытка

			Подключение  = СервисыСервер.Подключение("BPS", Таймаут);
			ДанныеОтвета = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(Подключение.GetBonusInfo(ОбщегоНазначенияКлиентСервер.СериализоватьJSON(ДанныеЗапроса, Истина)));

			Если НЕ ДанныеОтвета.Ошибка Тогда

				ДанныеВозврата.СуммаБонусныхБаллов			= ДанныеОтвета.СуммаБонусныхБаллов;
				ДанныеВозврата.СуммаБонусныхБалловВРезерве	= ДанныеОтвета.СуммаБонусныхБалловВРезерве;

				Если ДанныеОтвета.Свойство("ДанныеСчёта") Тогда

					ДанныеВозврата.Вставить("ДанныеСчёта", ДанныеОтвета.ДанныеСчёта);

				КонецЕсли;

			КонецЕсли;

		Исключение

			ДанныеВозврата.Ошибка = Истина;
			ДанныеВозврата.ОписаниеОшибки = ОписаниеОшибки();
			СервисыСервер.РегистрацияОшибки(ДанныеВозврата.ОписаниеОшибки, Истина);

		КонецПопытки;

	ИначеЕсли ОбменДаннымиПовтИсп.ЭтоГлавныйУзел()
		ИЛИ   ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().ВидУзла = Перечисления.ВидыУзлов.ТестовыйУзел
	Тогда

		Попытка

			ДанныеОтвета = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(BPS_GetBonusInfo(ОбщегоНазначенияКлиентСервер.СериализоватьJSON(ДанныеЗапроса, Истина)));

			Если НЕ ДанныеОтвета.Ошибка Тогда

				ДанныеВозврата.СуммаБонусныхБаллов			= ДанныеОтвета.СуммаБонусныхБаллов;
				ДанныеВозврата.СуммаБонусныхБалловВРезерве	= ДанныеОтвета.СуммаБонусныхБалловВРезерве;

				Если ДанныеОтвета.Свойство("ДанныеСчёта") Тогда

					ДанныеВозврата.Вставить("ДанныеСчёта", ДанныеОтвета.ДанныеСчёта);

				КонецЕсли;

			КонецЕсли;

		Исключение

			ДанныеВозврата.Ошибка = Истина;
			ДанныеВозврата.ОписаниеОшибки = ОписаниеОшибки();
			СервисыСервер.РегистрацияОшибки(ДанныеВозврата.ОписаниеОшибки, Истина);

		КонецПопытки;

	КонецЕсли;

	Возврат ДанныеВозврата;

КонецФункции

//	LNK 16.02.2021 12:54:39
Функция BPS_ПолучитьОстаткиИДвиженияБонусныхБаллов(Контрагент, ПараметрыЗапроса, Период = '00010101', Таймаут = 10)	Экспорт

	ТаблицаБонусныеБаллы = Новый ТаблицаЗначений;

	ДанныеЗапроса = Новый Структура(
		"Команда, Данные"
		, "ПолучитьОстаткиИДвиженияБонусныхБаллов"
		, ПолучитьПравильныеПараметрыЗапроса(ПараметрыЗапроса, Контрагент, Период)
	);

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() И РозничныеПродажиСлужебный.РесурсWebRetailДоступен() Тогда

		Попытка

			Подключение  = СервисыСервер.Подключение("BPS", Таймаут);
			ДанныеОтвета = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(Подключение.GetBonusInfo(ОбщегоНазначенияКлиентСервер.СериализоватьJSON(ДанныеЗапроса, Истина)));

			Если НЕ ДанныеОтвета.Ошибка Тогда

				ТаблицаБонусныеБаллы = ДанныеОтвета.ТаблицаБонусныеБаллы;

			КонецЕсли;

		Исключение

			ТекстОшибки = ОписаниеОшибки();
			СервисыСервер.РегистрацияОшибки(ТекстОшибки, Истина);

		КонецПопытки;

	ИначеЕсли ОбменДаннымиПовтИсп.ЭтоГлавныйУзел()
		ИЛИ	  ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().ВидУзла = Перечисления.ВидыУзлов.ТестовыйУзел
	Тогда

		ДанныеОтвета = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(BPS_GetBonusInfo(ОбщегоНазначенияКлиентСервер.СериализоватьJSON(ДанныеЗапроса, Истина)));

		Если НЕ ДанныеОтвета.Ошибка Тогда

			ТаблицаБонусныеБаллы = ДанныеОтвета.ТаблицаБонусныеБаллы;

		КонецЕсли;

	КонецЕсли;

	Возврат ТаблицаБонусныеБаллы;

КонецФункции
	
#КонецОбласти

#Область ПроцедурыОбслуживанияПроцедурWEBСервиса

Функция BPS_BuyerBlock(Command, RequestData)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ДанныеЗапроса = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(RequestData);

	ДанныеОтвета = Новый Структура(
		"Ошибка"
		, Ложь
	);

	Если Command = "Authorization" Тогда

		КлючЗадания = "RESTORE_SEQUENCE_"
		+ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗапроса.Контрагент, "Код", "", Ложь);

		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(ДанныеЗапроса.Контрагент);
		ПараметрыЗадания.Добавить(Истина);
		ПараметрыЗадания.Добавить(Истина);
		ПараметрыЗадания.Добавить(Истина);

		ФоновыеЗадания.Выполнить("БонусныеБаллыПоследовательность.ВыполнитьВосстановлениеПоследовательности", ПараметрыЗадания, КлючЗадания);
	//	БонусныеБаллыПоследовательность.ВыполнитьВосстановлениеПоследовательности(ДанныеЗапроса.Контрагент, Истина, Истина, Истина);

	Иначе

		ДанныеОтвета.Ошибка = Истина;
		ДанныеОтвета.Вставить("ОписаниеОшибки", "Команда «" + Command + "» не обрабатывается.");

	КонецЕсли;

	Возврат ОбщегоНазначенияКлиентСервер.СериализоватьJSON(ДанныеОтвета);

КонецФункции

Функция BPS_GetBonusInfo(RequestData)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ДанныеЗапроса = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(RequestData);

	ДанныеОтвета = Новый Структура(
		"Ошибка"
		, Ложь
	);

	Если ДанныеЗапроса.Команда = "ПолучитьОстатокБонусов" ИЛИ ДанныеЗапроса.Команда = "ПолучитьОстаткиИДвиженияБонусныхБаллов" Тогда

		ТаблицаБонусныеБаллы = БонусныеБаллыСервер.ОстаткиИДвиженияБонусныхБаллов(
			  ДанныеЗапроса.Данные
		);

		Если ДанныеЗапроса.Команда = "ПолучитьОстатокБонусов" Тогда

			ДанныеОтвета.Вставить("СуммаБонусныхБаллов"			, ТаблицаБонусныеБаллы.Итог("Сумма"));
			ДанныеОтвета.Вставить("СуммаБонусныхБалловВРезерве"	, ТаблицаБонусныеБаллы.Итог("СуммаВРезерве"));

		ИначеЕсли ДанныеЗапроса.Команда = "ПолучитьОстаткиИДвиженияБонусныхБаллов" Тогда

			ДанныеОтвета.Вставить("ТаблицаБонусныеБаллы", ТаблицаБонусныеБаллы);

		Иначе
		
			ДанныеОтвета.Ошибка = Истина;
			ДанныеОтвета.Вставить("ОписаниеОшибки", "Команда «" + ДанныеЗапроса.Команда + "» не обрабатывается.");
		
		КонецЕсли;

	ИначеЕсли ДанныеЗапроса.Команда = "ОбщееСостояниеСчёта" Тогда

		ДанныеСчёта = ПолучитьСостояниеБонусногоСчета(ДанныеЗапроса.Данные.Контрагент, ДанныеЗапроса.Данные.Период, ДанныеЗапроса.Данные.ТипыБонусов);

		ДанныеОтвета.Вставить("СуммаБонусныхБаллов"			, ДанныеСчёта.СуммаБонусныхБаллов);			//	для совместимости
		ДанныеОтвета.Вставить("СуммаБонусныхБалловВРезерве"	, ДанныеСчёта.СуммаБонусныхБалловВРезерве);	//	для совместимости
		ДанныеОтвета.Вставить("ДанныеСчёта", ДанныеСчёта);

	Иначе
		
		ДанныеОтвета.Ошибка = Истина;
		ДанныеОтвета.Вставить("ОписаниеОшибки", "Команда «" + ДанныеЗапроса.Команда + "» не обрабатывается.");

	КонецЕсли;

	Возврат ОбщегоНазначенияКлиентСервер.СериализоватьJSON(ДанныеОтвета);

КонецФункции

#КонецОбласти

#Область РаботаСРекизитомКлючСвязиБонусныхБаллов

//	LNK 18.06.2021 11:23:18
Процедура ЗаполнитьКлючСвязиБонусныхБаллов(ТабличнаяЧасть, Перезаполнить = Ложь)	Экспорт

	Если Перезаполнить = Истина Тогда

		КлючСвязиБонусныхБаллов = 0;

		Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл

			КлючСвязиБонусныхБаллов = КлючСвязиБонусныхБаллов + 1;
			СтрокаТабличнойЧасти.КлючСвязиБонусныхБаллов = КлючСвязиБонусныхБаллов;

		КонецЦикла;

	Иначе

		ДанныеКлючей = ПолучитьДанныеКлючейСвязи(ТабличнаяЧасть, "КлючСвязиБонусныхБаллов");

		Если НЕ ДанныеКлючей.ВсёХорошо Тогда

		//	Первым делом уничтожим возможные повторы в исходной таблице.

			Для каждого КлючСвязи Из ДанныеКлючей.Повторы Цикл

				СтрокиТабличнойЧасти = ТабличнаяЧасть.НайтиСтроки(Новый Структура("КлючСвязиБонусныхБаллов", КлючСвязи));

				Индекс = СтрокиТабличнойЧасти.Количество() - 1;

				Пока Индекс > 0 Цикл

					СтрокиТабличнойЧасти[Индекс].КлючСвязиБонусныхБаллов = 0;
					Индекс = Индекс - 1;

				КонецЦикла;

			КонецЦикла;

		//	Теперь устанавливаем нулевые позиции ключей с учётом пропущенных.
			КлючСвязиБонусныхБаллов = ДанныеКлючей.КлючМаксимальный;	//	дальше будем идти с пре-итерацией в 1

			Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл

				Если СтрокаТабличнойЧасти.КлючСвязиБонусныхБаллов <= 0 Тогда

					Если НЕ ДанныеКлючей.Пропуски.Количество() = 0 Тогда

						СтрокаТабличнойЧасти.КлючСвязиБонусныхБаллов = ДанныеКлючей.Пропуски[0];
						ДанныеКлючей.Пропуски.Удалить(0);

					Иначе

						КлючСвязиБонусныхБаллов = КлючСвязиБонусныхБаллов + 1;
						СтрокаТабличнойЧасти.КлючСвязиБонусныхБаллов = КлючСвязиБонусныхБаллов;

					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьДанныеКлючейСвязи(КоллекцияКлючей, ИмяКлюча)

	ДанныеКлючей = Новый Структура(
		"КлючМаксимальный, ВсёХорошо, Повторы, Пропуски"
		, 0
		, Истина
		, Новый Массив
		, Новый Массив
	);

	ТаблицаКлючей = Новый ТаблицаЗначений;
	ТаблицаКлючей.Колонки.Добавить(ИмяКлюча , Новый ОписаниеТипов("Число"));
	ТаблицаКлючей.Колонки.Добавить("Счетчик", Новый ОписаниеТипов("Число"));

	КонтрольПропусков = Новый Соответствие;

	Для каждого СтрокаКоллекции Из КоллекцияКлючей Цикл

		Если СтрокаКоллекции[ИмяКлюча] > 0 Тогда

			СтрокаТаблицы = ТаблицаКлючей.Добавить();
			СтрокаТаблицы[ИмяКлюча] = СтрокаКоллекции[ИмяКлюча];
			СтрокаТаблицы.Счетчик	= 1;

			КонтрольПропусков.Вставить(СтрокаКоллекции[ИмяКлюча], Истина);

		Иначе

			ДанныеКлючей.ВсёХорошо = Ложь;

		КонецЕсли;

	КонецЦикла;

	Если НЕ ТаблицаКлючей.Количество() = 0 Тогда

		ТаблицаКлючей.Свернуть(ИмяКлюча, "Счетчик");
		ТаблицаКлючей.Сортировать(ИмяКлюча);

		ДанныеКлючей.КлючМаксимальный = ТаблицаКлючей[ТаблицаКлючей.Количество() - 1][ИмяКлюча];

		Для каждого СтрокаТаблицы Из ТаблицаКлючей Цикл

			Если НЕ СтрокаТаблицы.Счетчик = 1 Тогда

				ДанныеКлючей.Повторы.Добавить(СтрокаТаблицы[ИмяКлюча]);
				ДанныеКлючей.ВсёХорошо = Ложь;

			КонецЕсли;

		КонецЦикла;

		Для НомерСтроки = 1 По ДанныеКлючей.КлючМаксимальный Цикл

			Если КонтрольПропусков.Получить(НомерСтроки) = Неопределено Тогда

				ДанныеКлючей.Пропуски.Добавить(НомерСтроки);

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат ДанныеКлючей;

КонецФункции

Процедура ПроверитьДокументКлючСвязиБонусныхБаллов(ДокументСсылка)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

//	На текущий момент - это только ЧекККМ. Например, возврат по старому чеку.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	1 КАК Счетчик
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументСсылка
	|	И ТаблицаТовары.КлючСвязиБонусныхБаллов = 0"
	);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда

		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		#Если _ Тогда
		ДокументОбъект = Документы.ЧекККМ.СоздатьДокумент();
		#КонецЕсли

		Если ДокументОбъект.ОплатаБонуснымиБаллами.Количество() = 0 Тогда

			ЗаполнитьКлючСвязиБонусныхБаллов(ДокументОбъект.Товары, Ложь);

			Если ДокументОбъект.Модифицированность() Тогда

				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
				ДокументОбъект.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);

				ДокументОбъект.Записать();

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПолучитьФильтрыЗапроса(Запрос)

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.КлючСвязиБонусныхБаллов КАК КлючСвязиБонусныхБаллов,
	|	Таблица.Упаковка КАК Упаковка,
	|	Таблица.Количество КАК Количество,
	|	Таблица.СуммаСНДС КАК СуммаСНДС
	|ПОМЕСТИТЬ ТоварыДляОплаты
	|ИЗ
	|	&ТоварыДляОплаты КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДляОплаты.Номенклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка) КАК СегментНоменклатуры,
	|	ТоварыДляОплаты.КлючСвязиБонусныхБаллов КАК КлючСвязиБонусныхБаллов,
	|	ТоварыДляОплаты.Упаковка КАК Упаковка,
	|	ТоварыДляОплаты.Количество КАК Количество,
	|	ТоварыДляОплаты.СуммаСНДС КАК СуммаСНДС
	|ПОМЕСТИТЬ ТоварыПоСегментам
	|ИЗ
	|	ТоварыДляОплаты КАК ТоварыДляОплаты
	|ГДЕ
	|	&ТоварыУказаны = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыДляОплаты.Номенклатура,
	|	ТаблицаСегменты.Сегмент,
	|	ТоварыДляОплаты.КлючСвязиБонусныхБаллов,
	|	ТоварыДляОплаты.Упаковка,
	|	ТоварыДляОплаты.Количество,
	|	ТоварыДляОплаты.СуммаСНДС
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК ТаблицаСегменты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыДляОплаты КАК ТоварыДляОплаты
	|		ПО ТаблицаСегменты.Номенклатура = ТоварыДляОплаты.Номенклатура
	|ГДЕ
	|	&ТоварыУказаны = ИСТИНА
	|	И ТИПЗНАЧЕНИЯ(ТоварыДляОплаты.Номенклатура) = ТИП(Справочник.Номенклатура)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СегментНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыДляОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПрограммы.Ссылка КАК ПрограммаЛояльности,
	|	ИСТИНА КАК БезОграничения,
	|	0 КАК Приоритет,
	|	ТоварыПоСегментам.Номенклатура КАК Номенклатура,
	|	ТоварыПоСегментам.КлючСвязиБонусныхБаллов КАК КлючСвязиБонусныхБаллов,
	|	ТоварыПоСегментам.Упаковка КАК Упаковка,
	|	ТаблицаПрограммы.МаксимальныйПроцентОплатыБонусами КАК МаксимальныйПроцентОплатыБонусами,
	|	ТаблицаПрограммы.ТипБонусов КАК ТипБонусов,
	|	ТоварыПоСегментам.Количество КАК Количество,
	|	ТоварыПоСегментам.СуммаСНДС КАК СуммаСНДС
	|ПОМЕСТИТЬ ТоварыПрограмм
	|ИЗ
	|	Справочник.ПрограммыЛояльности КАК ТаблицаПрограммы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрограммыЛояльности.НоменклатураПредоставления КАК ТабличнаяЧасть
	|		ПО ТаблицаПрограммы.Ссылка = ТабличнаяЧасть.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыПоСегментам КАК ТоварыПоСегментам
	|		ПО (ТоварыПоСегментам.СегментНоменклатуры = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка))
	|ГДЕ
	|	(ТабличнаяЧасть.Ссылка ЕСТЬ NULL
	|			ИЛИ НЕ &ТоварыУказаны = ИСТИНА)
	|	И ТаблицаПрограммы.СпособПримененияСкидки = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы)
	|	И ВЫБОР
	|			КОГДА &ТипыБонусовУказаны = ИСТИНА
	|				ТОГДА ТаблицаПрограммы.ТипБонусов В (&ТипыБонусов)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка,
	|	ЛОЖЬ,
	|	1,
	|	ТоварыПоСегментам.Номенклатура,
	|	ТоварыПоСегментам.КлючСвязиБонусныхБаллов,
	|	ТоварыПоСегментам.Упаковка,
	|	ТабличнаяЧасть.Ссылка.МаксимальныйПроцентОплатыБонусами,
	|	ТабличнаяЧасть.Ссылка.ТипБонусов,
	|	ТоварыПоСегментам.Количество,
	|	ТоварыПоСегментам.СуммаСНДС
	|ИЗ
	|	Справочник.ПрограммыЛояльности КАК ТаблицаПрограммы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрограммыЛояльности.НоменклатураПредоставления КАК ТабличнаяЧасть
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыПоСегментам КАК ТоварыПоСегментам
	|			ПО (ТабличнаяЧасть.Номенклатура = ТоварыПоСегментам.Номенклатура
	|					ИЛИ ТабличнаяЧасть.Номенклатура = ТоварыПоСегментам.СегментНоменклатуры)
	|		ПО ТаблицаПрограммы.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.СпособПримененияСкидки = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы)
	|	И ВЫБОР
	|			КОГДА &ТипыБонусовУказаны = ИСТИНА
	|				ТОГДА ТаблицаПрограммы.ТипБонусов В (&ТипыБонусов)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПрограммаЛояльности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыПоСегментам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПрограммы.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТаблицаПрограммы.БезОграничения КАК БезОграничения,
	|	ТаблицаПрограммы.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	ТоварыПрограмм КАК ТаблицаПрограммы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрограммыЛояльности.ОбъектыИспользования КАК ТабличнаяЧасть
	|		ПО ТаблицаПрограммы.ПрограммаЛояльности = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаПрограммы.ПрограммаЛояльности,
	|	ТаблицаПрограммы.БезОграничения,
	|	ТаблицаПрограммы.Приоритет + ВЫБОР
	|		КОГДА ТабличнаяЧасть.Магазин = &Магазин
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаПрограммы.Приоритет = 1
	|						ТОГДА 2
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	ТоварыПрограмм КАК ТаблицаПрограммы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрограммыЛояльности.ОбъектыИспользования КАК ТабличнаяЧасть
	|		ПО ТаблицаПрограммы.ПрограммаЛояльности = ТабличнаяЧасть.Ссылка
	|			И (ТабличнаяЧасть.Магазин = &Магазин
	|				ИЛИ &Магазин = НЕОПРЕДЕЛЕНО
	|				ИЛИ &Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПрограммаЛояльности"
	;
	Запрос.Выполнить();

КонецПроцедуры

//	LNK 30.01.2021 10:36:37
Функция ТаблицаБонусныеБаллы(ТаблицаСкидкиНаценки, Период)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда
	
		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.КлючСвязи КАК КлючСвязи,
	|	ВЫРАЗИТЬ(Таблица.СкидкаНаценка КАК Справочник.СкидкиНаценки) КАК СкидкаНаценка,
	|	Таблица.Сумма КАК Сумма
	|ПОМЕСТИТЬ СкидкиНаценки
	|ИЗ
	|	&ТаблицаСкидкиНаценки КАК Таблица
	|ГДЕ
	|	Таблица.СпособПримененияСкидки = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СкидкаНаценка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.КлючСвязи КАК КлючСвязи,
	|	ТабличнаяЧасть.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТабличнаяЧасть.ПрограммаЛояльности.СовместноеНачислениеСкидокИБонусов КАК СовместноеНачислениеСкидокИБонусов,
	|	ТабличнаяЧасть.ПрограммаЛояльности.НачислятьБаллыПоКредитнойПрограмме КАК НачислятьБаллыПоКредитнойПрограмме,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовДействия > 0
	|			ТОГДА ВЫБОР
	|					КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|						ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, ДЕНЬ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
	|					КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|						ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, НЕДЕЛЯ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
	|					КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|						ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, МЕСЯЦ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
	|					КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|						ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, КВАРТАЛ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
	|					КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|						ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, ГОД, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
	|					КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|						ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, ДЕКАДА, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
	|					КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|						ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, ПОЛУГОДИЕ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
	|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, ЧАС, 1)
	|				КОНЕЦ
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаСписания,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, НЕДЕЛЯ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, КВАРТАЛ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, ГОД, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕКАДА, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, ПОЛУГОДИЕ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(&Период, ЧАС, 1)
	|	КОНЕЦ КАК ДатаНачисления,
	|	ТабличнаяЧасть.Сумма КАК СуммаБонусныхБаллов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.СкидкаНаценка.ПрограммаЛояльности.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, ТабличнаяЧасть.СкидкаНаценка.ПрограммаЛояльности.КоличествоПериодовДействия)
	|			КОГДА ТабличнаяЧасть.СкидкаНаценка.ПрограммаЛояльности.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, НЕДЕЛЯ, ТабличнаяЧасть.СкидкаНаценка.ПрограммаЛояльности.КоличествоПериодовДействия)
	|			КОГДА ТабличнаяЧасть.СкидкаНаценка.ПрограммаЛояльности.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, ТабличнаяЧасть.СкидкаНаценка.ПрограммаЛояльности.КоличествоПериодовДействия)
	|			КОГДА ТабличнаяЧасть.СкидкаНаценка.ПрограммаЛояльности.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, КВАРТАЛ, ТабличнаяЧасть.СкидкаНаценка.ПрограммаЛояльности.КоличествоПериодовДействия)
	|			КОГДА ТабличнаяЧасть.СкидкаНаценка.ПрограммаЛояльности.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, ГОД, ТабличнаяЧасть.СкидкаНаценка.ПрограммаЛояльности.КоличествоПериодовДействия)
	|			КОГДА ТабличнаяЧасть.СкидкаНаценка.ПрограммаЛояльности.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕКАДА, ТабличнаяЧасть.СкидкаНаценка.ПрограммаЛояльности.КоличествоПериодовДействия)
	|			КОГДА ТабличнаяЧасть.СкидкаНаценка.ПрограммаЛояльности.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, ПОЛУГОДИЕ, ТабличнаяЧасть.СкидкаНаценка.ПрограммаЛояльности.КоличествоПериодовДействия)
	|			ИНАЧЕ &Период
	|		КОНЕЦ КАК Период,
	|		ТабличнаяЧасть.КлючСвязи КАК КлючСвязи,
	|		ТабличнаяЧасть.СкидкаНаценка КАК СкидкаНаценка,
	|		ТабличнаяЧасть.СкидкаНаценка.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|		ТабличнаяЧасть.Сумма КАК Сумма
	|	ИЗ
	|		СкидкиНаценки КАК ТабличнаяЧасть) КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СкидкиНаценки"
	);
	Запрос.УстановитьПараметр("ТаблицаСкидкиНаценки", ТаблицаСкидкиНаценки);
	Запрос.УстановитьПараметр("Период"				, Период);

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ТаблицаБонусныеБаллыПустая()	Экспорт

	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Период"				, Новый ОписаниеТипов("Дата"));
	ТаблицаЗначений.Колонки.Добавить("ПериодТекст"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(524)));
	ТаблицаЗначений.Колонки.Добавить("ПрограммаЛояльности"	, Новый ОписаниеТипов("СправочникСсылка.ПрограммыЛояльности"));
	ТаблицаЗначений.Колонки.Добавить("ТипБонусов"			, Новый ОписаниеТипов("ПеречислениеСсылка.ТипыБонусов"));
	ТаблицаЗначений.Колонки.Добавить("МаксимальныйПроцентОплатыБонусами", Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("Сумма"				, Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("СуммаВРезерве"		, Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("Изменение"			, Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("ТекущийОстаток"		, Новый ОписаниеТипов("Булево"));
	ТаблицаЗначений.Колонки.Добавить("БезОграничения"		, Новый ОписаниеТипов("Булево"));
	ТаблицаЗначений.Колонки.Добавить("Приоритет"			, Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("ТоварыПрограмм"		, Новый ОписаниеТипов("ТаблицаЗначений"));

	Возврат ТаблицаЗначений;

КонецФункции

Функция ТаблицаНакопленийРазвернутаяПустая()	Экспорт

	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Номенклатура"				, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗначений.Колонки.Добавить("Упаковка"					, Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаЗначений.Колонки.Добавить("КлючСвязиБонусныхБаллов"	, Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("ПрограммаЛояльности"		, Новый ОписаниеТипов("СправочникСсылка.ПрограммыЛояльности"));
	ТаблицаЗначений.Колонки.Добавить("ТипБонусов"				, Новый ОписаниеТипов("ПеречислениеСсылка.ТипыБонусов"));
	ТаблицаЗначений.Колонки.Добавить("МаксимальныйПроцентОплатыБонусами", Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("СуммаПрограммы"			, Новый ОписаниеТипов("Число"));	//	сумма остатка по программе лояльности
	ТаблицаЗначений.Колонки.Добавить("СуммаСНДС"				, Новый ОписаниеТипов("Число"));	//	сумма продажи
	ТаблицаЗначений.Колонки.Добавить("СуммаДоступная"			, Новый ОписаниеТипов("Число"));	//	сумма с учётом макс.процента погашения
	ТаблицаЗначений.Колонки.Добавить("БезОграничения"			, Новый ОписаниеТипов("Булево"));
	ТаблицаЗначений.Колонки.Добавить("Приоритет"				, Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("ПриоритетТипа"			, Новый ОписаниеТипов("Число"));

	ТаблицаЗначений.Индексы.Добавить("Номенклатура, КлючСвязиБонусныхБаллов, Упаковка");

	Возврат ТаблицаЗначений;

КонецФункции

//	LNK 21.04.2021 11:54:50
Процедура ОбновитьОтображениеОплатаБонуснымиБаллами(Объект, ИмяОсновнойТЧ = "Товары", ИмяТЧ = "ОплатаБонуснымиБаллами")	Экспорт

	ОсновнаяТаблица = Объект[ИмяОсновнойТЧ].Выгрузить();
	
	Для каждого СтрокаОплатаБаллами Из Объект[ИмяТЧ] Цикл
		
		КлючСвязи = СтрокаОплатаБаллами.КлючСвязиБонусныхБаллов;
		
		СтрокаОсновнойТаблицы = ОсновнаяТаблица.Найти(КлючСвязи, "КлючСвязиБонусныхБаллов");
		
		Если НЕ СтрокаОсновнойТаблицы = Неопределено Тогда
		
			СтрокаОплатаБаллами.Номенклатура               = СтрокаОсновнойТаблицы.Номенклатура;
			СтрокаОплатаБаллами.НомерСтрокиОсновойТаблицы  = СтрокаОсновнойТаблицы.НомерСтроки;

		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

//	LNK 10.06.2021 11:27:58
Функция ПолучитьПравильныеПараметрыЗапроса(ПараметрыЗапроса, Контрагент = Неопределено, Период = '00010101')

	Атрибуты = Новый Массив;
	Атрибуты.Добавить(Новый Структура("Имя, Значение", "Контрагент"			 , Справочники.Контрагенты.ПустаяСсылка()));
	Атрибуты.Добавить(Новый Структура("Имя, Значение", "Магазин"			 , Справочники.Магазины.ПустаяСсылка()));
	Атрибуты.Добавить(Новый Структура("Имя, Значение", "ДокументСсылка"		 , Неопределено));
	Атрибуты.Добавить(Новый Структура("Имя, Значение", "ЗаказПокупателя"	 , Неопределено));
	Атрибуты.Добавить(Новый Структура("Имя, Значение", "ТоварыДляОплаты"	 , Новый ТаблицаЗначений));
	Атрибуты.Добавить(Новый Структура("Имя, Значение", "ПрограммаЛояльности" , Справочники.ПрограммыЛояльности.ПустаяСсылка()));
	Атрибуты.Добавить(Новый Структура("Имя, Значение", "ТипыБонусов"		 , Новый Массив));
	Атрибуты.Добавить(Новый Структура("Имя, Значение", "Период"				 , ТекущаяДата()));
	Атрибуты.Добавить(Новый Структура("Имя, Значение", "ТолькоТекущийОстаток", Истина));

	Для каждого Атрибут Из Атрибуты Цикл

		Если НЕ ПараметрыЗапроса.Свойство(Атрибут.Имя) Тогда

			ПараметрыЗапроса.Вставить(Атрибут.Имя, Атрибут.Значение);

		КонецЕсли;

		Если Атрибут.Имя = "ТипыБонусов" И ПараметрыЗапроса.ТипыБонусов.Количество() = 0 Тогда

			ПараметрыЗапроса.ТипыБонусов.Добавить(Перечисления.ТипыБонусов.Акционный);
			ПараметрыЗапроса.ТипыБонусов.Добавить(Перечисления.ТипыБонусов.Привлечение);
			ПараметрыЗапроса.ТипыБонусов.Добавить(Перечисления.ТипыБонусов.Органический);

		КонецЕсли;

		Если Атрибут.Имя = "ТоварыДляОплаты" Тогда

			ПараметрыЗапроса.ТоварыДляОплаты = ПроверитьСтруктуруТаблицыТоварыДляОплаты(ПараметрыЗапроса.ТоварыДляОплаты);

		КонецЕсли;

	КонецЦикла;

	Если НЕ Контрагент = Неопределено Тогда

		ПараметрыЗапроса.Контрагент = Контрагент;

	КонецЕсли;

	Если НЕ Период = '00010101' Тогда

		ПараметрыЗапроса.Период = Период;

	КонецЕсли;

	ПараметрыЗапроса.Период = ?(ПараметрыЗапроса.Период = '00010101', ТекущаяДатаСеанса() + 1, ПараметрыЗапроса.Период);	//	точка отсчёта
	ПараметрыЗапроса.ПрограммаЛояльности = ?(ПараметрыЗапроса.ПрограммаЛояльности = Неопределено
		, Справочники.ПрограммыЛояльности.ПустаяСсылка()
		, ПараметрыЗапроса.ПрограммаЛояльности);

	Возврат ПараметрыЗапроса;

КонецФункции

//	LNK 10.06.2021 11:42:58
Функция ПроверитьСтруктуруТаблицыТоварыДляОплаты(Знач ТаблицаЗначений = Неопределено, РеквизитыТоваров = Неопределено)	Экспорт

	Если ТаблицаЗначений = Неопределено Тогда

		ТаблицаЗначений = Новый ТаблицаЗначений;

	КонецЕсли;

//	1. Проверим корректность названий некоторых колонок.
//	---------------------------------------------------------------------------------------
	ЛевыеИмена = Новый Массив;
	ЛевыеИмена.Добавить("Сумма");
	ЛевыеИмена.Добавить("СуммаВсего");

	Для каждого ЛевоеИмя Из ЛевыеИмена Цикл

		КолонкаСумма = ТаблицаЗначений.Колонки.Найти(ЛевоеИмя);

		Если НЕ КолонкаСумма = Неопределено Тогда

			КолонкаСумма.Имя = "СуммаСНДС";
			Прервать;

		КонецЕсли;

	КонецЦикла;

//	2. Проверим корректность структуры таблицы.
//	---------------------------------------------------------------------------------------
	КолонкиЭталона = Новый Массив;
	КолонкиЭталона.Добавить(Новый Структура("Имя, Тип", "Номенклатура"	 , Новый ОписаниеТипов("СправочникСсылка.Номенклатура, СправочникСсылка.СерийныеНомера")));
	КолонкиЭталона.Добавить(Новый Структура("Имя, Тип", "Упаковка"		 , Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры")));
	КолонкиЭталона.Добавить(Новый Структура("Имя, Тип", "ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры")));
	КолонкиЭталона.Добавить(Новый Структура("Имя, Тип", "Количество"	 , Новый ОписаниеТипов("Число")));
	КолонкиЭталона.Добавить(Новый Структура("Имя, Тип", "СуммаСНДС"		 , Новый ОписаниеТипов("Число")));
	КолонкиЭталона.Добавить(Новый Структура("Имя, Тип", "КлючСвязи"		 , Новый ОписаниеТипов("Число")));	//	связь по строке "Товары"
	КолонкиЭталона.Добавить(Новый Структура("Имя, Тип", "КлючСвязиБонусныхБаллов"	, Новый ОписаниеТипов("Число")));
	КолонкиЭталона.Добавить(Новый Структура("Имя, Тип", "СуммаБонусныхБалловСписано", Новый ОписаниеТипов("Число")));

	Для каждого КолонкаЭталона Из КолонкиЭталона Цикл

		Если ТаблицаЗначений.Колонки.Найти(КолонкаЭталона.Имя) = Неопределено Тогда

			ТаблицаЗначений.Колонки.Вставить(0, КолонкаЭталона.Имя, КолонкаЭталона.Тип);

		КонецЕсли;

	КонецЦикла;

	Если НЕ ТаблицаЗначений.Количество() = 0 И ТипЗнч(РеквизитыТоваров) = Тип("ТаблицаЗначений") Тогда

		Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

			Реквизиты = РеквизитыТоваров.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");

			Если НЕ Реквизиты = Неопределено Тогда

				СтрокаТаблицы.ТипНоменклатуры = Реквизиты.ТипНоменклатуры;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат ТаблицаЗначений;

КонецФункции

Функция ТекстЗапросаРегистраторы()	Экспорт	//	LNK 26.09.2021 07:24:22

	ТекстЗапроса  = "";
	ШаблонЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаРегистратора.Ссылка КАК Регистратор,
	|	ТаблицаРегистратора.Проведен КАК Проведен,
	|	ТаблицаРегистратора.Дата КАК Дата#ПОМЕСТИТЬ#
	|ИЗ
	|	Документ.#ИМЯ# КАК ТаблицаРегистратора
	|ГДЕ
	|	ТаблицаРегистратора.Ссылка = &Регистратор"
	;

	Для каждого МетаданныеОбъекта Из Метаданные.Документы Цикл

		Если МетаданныеОбъекта.Движения.Содержит(Метаданные.РегистрыСведений.СписанныеБонусныеБаллы) Тогда

			НужноПоместить = ПустаяСтрока(ТекстЗапроса);

			ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", Символы.ПС
			+ Символы.ПС +
			"ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС
			) + СтрЗаменить(
					СтрЗаменить(ШаблонЗапроса, "#ПОМЕСТИТЬ#", ?(НужноПоместить, Символы.ПС + "ПОМЕСТИТЬ Фильтр", ""))
				, "#ИМЯ#", МетаданныеОбъекта.Имя)
			;

		КонецЕсли;

	КонецЦикла;

	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////"
	;

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти















