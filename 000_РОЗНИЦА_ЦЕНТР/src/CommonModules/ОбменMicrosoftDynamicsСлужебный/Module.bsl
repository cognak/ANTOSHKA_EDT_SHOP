#Область ПроцедурыВыгрузкиСообщенийВMicrosoftDynamics

//	LNK 11.04.2019 11:01:40	- выгрузка одиночного объекта
Процедура ВыполнитьВыгрузкуОбъектаВУзлыMicrosoftDynamics(ПроизвольныеДанные, РежимОтладки = Ложь, ВестиПротоколВходящий = Ложь, ВестиПротоколИсходящий = Ложь)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если НЕ ОбменMicrosoftDynamicsПовтИсп.ОбменАктивен() Тогда

		ВызватьИсключение "Нет узлов для обмена «CRM:MicrosoftDynamics»";

	КонецЕсли;

	ТипРегистрации = ОбменMicrosoftDynamicsПовтИсп.ОпределитьТипРегистрации(ПроизвольныеДанные.Метаданные().ПолноеИмя());
	ДанныеОбъект   = ПроизвольныеДанные.ПолучитьОбъект();	//	пока только ссылочный тип

	Если НЕ ДанныеОбъект = Неопределено Тогда

		Для каждого УзелПолучатель Из ОбменMicrosoftDynamicsПовтИсп.ПолучитьМассивУзлов(ТипРегистрации, Ложь) Цикл

			ВыполнитьВыгрузкуИзмененийВУзелMicrosoftDynamics(УзелПолучатель.ПолучитьОбъект(), ТипРегистрации, ДанныеОбъект, РежимОтладки, ВестиПротоколВходящий, ВестиПротоколИсходящий);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	LNK 17.01.2019 14:06:00
Процедура ВыполнитьВыгрузкуИзмененийВУзлыMicrosoftDynamics(ТипРегистрации, РежимОтладки = Ложь, ВестиПротоколВходящий = Ложь, ВестиПротоколИсходящий = Ложь)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если НЕ ОбменMicrosoftDynamicsПовтИсп.ОбменАктивен(ТипРегистрации) Тогда

		ВызватьИсключение "Нет узлов для обмена «CRM:MicrosoftDynamics»";

	КонецЕсли;

	Для каждого УзелПолучатель Из ОбменMicrosoftDynamicsПовтИсп.ПолучитьМассивУзлов(ТипРегистрации, Истина) Цикл

		ВыполнитьВыгрузкуИзмененийВУзелMicrosoftDynamics(УзелПолучатель.ПолучитьОбъект(), ТипРегистрации,, РежимОтладки, ВестиПротоколВходящий, ВестиПротоколИсходящий);

	КонецЦикла;

КонецПроцедуры

//	LNK 23.01.2019 10:42:16
Процедура ВыполнитьВыгрузкуИзмененийВУзелMicrosoftDynamics(УзелОбъект, ТипРегистрации, ДанныеОбъект = Неопределено, РежимОтладки = Ложь, ВестиПротоколВходящий = Ложь, ВестиПротоколИсходящий = Ложь)

	#Если _ Тогда
	УзелОбъект = ПланыОбмена.ОбменMicrosoftDynamics.СоздатьУзел();
	#КонецЕсли

	Отказ = Ложь;
//	Определим, имеет ли место выгрузка изменений вплане обена, либо экстренная выгрузка какого-либо одного объекта. 
	ВыгрузкаОдногоОбъекта = НЕ ДанныеОбъект = Неопределено;

	Попытка

		Если НЕ РежимОтладки Тогда

			УзелОбъект.Заблокировать();
		//	сразу увеличим счётчик узла:
			УзелОбъект.НомерОтправленного = УзелОбъект.НомерОтправленного + 1;

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();

		ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала(ТипРегистрации) + ".Блокировка"
		, УровеньЖурналаРегистрации.Предупреждение
		, УзелОбъект.Метаданные(), УзелОбъект.Ссылка
		,
		, "Не удалось заблокировать объект!" + Символы.ПС + ТекстОшибки
		, СокрЛП(УзелОбъект.Ссылка), Истина);

		Отказ = Истина;

	КонецПопытки;

	Если НЕ Отказ Тогда

		АдресСервера = УправлениеДоступомСлужебныйПовтИсп.ПолучитьАдресСервераMSDynamics(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);

		Если НЕ ПустаяСтрока(АдресСервера) Тогда

			Если НЕ (РежимОтладки ИЛИ ВыгрузкаОдногоОбъекта) Тогда

				ПринятьПодтверждениеПолучателя(УзелОбъект, АдресСервера, ТипРегистрации, Отказ);

			КонецЕсли;

			Если НЕ Отказ Тогда

				Если НЕ ВыгрузкаОдногоОбъекта Тогда

					ФильтрВыборки = ОбменДаннымиСерверПакеты.ПолучитьПакетРегистрацияMicrosoftDynamics(УзелОбъект, ОбщегоНазначенияКлиентСервер.РеквизитПеречисления(ТипРегистрации));

				Иначе

					ФильтрВыборки = Новый Массив;
					ФильтрВыборки.Добавить(ДанныеОбъект);

				КонецЕсли;

				Если НЕ ФильтрВыборки.Количество() = 0 Тогда

					Если НЕ ВыгрузкаОдногоОбъекта Тогда

						Попытка

							ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбъект.Ссылка, УзелОбъект.НомерОтправленного, ФильтрВыборки);

						Исключение

							ТекстОшибки = ОписаниеОшибки();

							ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала(ТипРегистрации) + ".Выборка"
							, УровеньЖурналаРегистрации.Предупреждение
							, УзелОбъект.Метаданные(), УзелОбъект.Ссылка
							,
							, "Не удалось выбрать изменения!" + Символы.ПС + ТекстОшибки
							, СокрЛП(УзелОбъект.Ссылка), Истина);

							Отказ = Истина;

						КонецПопытки;

					КонецЕсли;

					Если НЕ Отказ Тогда

						ТаблицаДанных = ПолучитьСтруктуруТаблицыДанных();
					//	текст формируем пакетами, поэтому, во избежание повторной выгрузки
					//	в текст используем эту вторую таблицу.
						ТаблицаВыгружено = ТаблицаДанных.Скопировать();

						ЗаписьJSON = Новый ЗаписьJSON;
						ЗаписьJSON.УстановитьСтроку();

						ЗаписьJSON.ЗаписатьНачалоОбъекта();

						JSON.ЗаписатьСвойство("IDBASE"	   , ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторУчетнойСистемы"), ЗаписьJSON);
						JSON.ЗаписатьСвойство("message1C"  , ?(ВыгрузкаОдногоОбъекта, -1, УзелОбъект.НомерОтправленного), ЗаписьJSON);
						JSON.ЗаписатьСвойство("UUID_noInfo", СокрЛП(Новый УникальныйИдентификатор), ЗаписьJSON);

						Счётчик = 0;
						РазмерМассива = 0;

						ЗаписьJSON.ЗаписатьИмяСвойства(ОбменMicrosoftDynamicsПовтИсп.ПолучитьИмяМассива(ТипРегистрации));

						ЗаписьJSON.ЗаписатьНачалоМассива();

						Пока ?(НЕ ВыгрузкаОдногоОбъекта, ВыборкаИзменений.Следующий(), НЕ ФильтрВыборки.Количество() = 0) Цикл

							Если НЕ ВыгрузкаОдногоОбъекта Тогда

									Данные = ВыборкаИзменений.Получить();

							Иначе	Данные = ФильтрВыборки[0];		//	.. пока только для ссылочных объектов
									ФильтрВыборки = Новый Массив;	//	шоб выйти из цикла.

							КонецЕсли;

							ПроверитьВыгружаемыйОбъект(Данные);

							Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда

								СтрокаТаблицы = ТаблицаДанных.Добавить();
								СтрокаТаблицы.Измерение_1 = Данные.Ссылка;
								СтрокаТаблицы.УдалениеОбъекта = Истина;

							ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.РегистрацияMicrosoftDynamics") Тогда

								Если НЕ Данные.Количество() = 0 Тогда

									Для каждого ЗаписьНабора Из Данные Цикл

										СтрокаТаблицы = ТаблицаДанных.Добавить();
										ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЗаписьНабора);

									КонецЦикла;

								Иначе

									СтрокаТаблицы = ТаблицаДанных.Добавить();

									Для каждого ЭлементОтбора Из Данные.Отбор Цикл

										Если НЕ ЭлементОтбора.Имя = "ТипРегистрации" Тогда

											СтрокаТаблицы[ЭлементОтбора.Имя] = ЭлементОтбора.Значение;

										КонецЕсли;

									КонецЦикла;

								КонецЕсли;

							ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.СостояниеЗапросаДоступностиТоваров") Тогда

								СтрокаТаблицы = ТаблицаДанных.Добавить();
								СтрокаТаблицы.Измерение_1 = Данные.Отбор.ЗапросДоступностиТоваров.Значение;

							ИначеЕсли ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(Данные.Метаданные()) Тогда

								СтрокаТаблицы = ТаблицаДанных.Добавить();
								СтрокаТаблицы.Измерение_1 = Данные.Ссылка;

							Иначе

								ВызватьИсключение "НЕ ОПИСАНО: " + ТипЗнч(Данные);	//	отладочная

							КонецЕсли;

							Если НЕ Счётчик = 0 И Счётчик % 500 = 0 Тогда

								ЗаписатьИзмененияВМассивJSON(ТаблицаДанных, ТипРегистрации, ЗаписьJSON, РазмерМассива, ТаблицаВыгружено);

							КонецЕсли;

							Счётчик = Счётчик + 1;

						КонецЦикла;

						Если НЕ ТаблицаДанных.Количество() = 0 Тогда	//	"подчистим хвосты"..

							ЗаписатьИзмененияВМассивJSON(ТаблицаДанных, ТипРегистрации, ЗаписьJSON, РазмерМассива, ТаблицаВыгружено);

						КонецЕсли;

						ЗаписьJSON.ЗаписатьКонецМассива();

						JSON.ЗаписатьСвойство("count_results", РазмерМассива, ЗаписьJSON);

						ЗаписьJSON.ЗаписатьКонецОбъекта();

						ТекстЗапроса = ЗаписьJSON.Закрыть();

						Если ВестиПротоколИсходящий = Истина Тогда	//	LNK 25.06.2019 11:07:24

							ЗаписатьТекстЗапросаВФайлJSON(ТекстЗапроса, ОбщегоНазначенияКлиентСервер.РеквизитПеречисления(ТипРегистрации), "out");

						КонецЕсли;

						Если НЕ РежимОтладки И НЕ РазмерМассива = 0 Тогда

							ТекстОтвета = "";	//	для протоколирования

							Попытка

								Результат = ОбменMicrosoftDynamicsСервер.ВыполнитьЗапросКСерверу(ОбменMicrosoftDynamicsПовтИсп.ПолучитьИмяПроцедурыWebAPI(ТипРегистрации, УзелОбъект.Процедура), ТекстЗапроса, АдресСервера, "POST",, 120, ТекстОтвета);

								Если ВестиПротоколВходящий = Истина Тогда	//	LNK 10.09.2019 13:53:30

									ЗаписатьТекстЗапросаВФайлJSON(ТекстОтвета, ОбщегоНазначенияКлиентСервер.РеквизитПеречисления(ТипРегистрации), "in");

								КонецЕсли;

								Если ТипЗнч(Результат.ДанныеОтвета) = Тип("Структура") Тогда

									Если НЕ ПустаяСтрока(Результат.ДанныеОтвета.error) Тогда

										ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала(ТипРегистрации)
										, УровеньЖурналаРегистрации.Ошибка
										, УзелОбъект.Метаданные(), УзелОбъект.Ссылка
										,
										, "Ответ при выгрузке пакета: " + Результат.ДанныеОтвета.error + Символы.ПС +
										  "Номер сообщения: " + Формат(УзелОбъект.НомерОтправленного, "ЧДЦ=; ЧН=0; ЧГ=") + " / CRM: " + Формат(Результат.ДанныеОтвета.successMessage1C, "ЧДЦ=; ЧН=0; ЧГ=")
										, СокрЛП(УзелОбъект.Ссылка), Истина);

									КонецЕсли;

									Если НЕ ВыгрузкаОдногоОбъекта Тогда

										УзелОбъект.Записать();

										ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала(ТипРегистрации)
										, УровеньЖурналаРегистрации.Примечание
										, УзелОбъект.Метаданные(), УзелОбъект.Ссылка
										,
										, "Выгружено объектов: " + Формат(РазмерМассива, "ЧДЦ=; ЧН=0; ЧГ=") + Символы.ПС +
										  ?(ВестиПротоколИсходящий, "Текст сообщения сохранён в файле" + Символы.ПС, "") +
										  "Номер сообщения: " + Формат(УзелОбъект.НомерОтправленного, "ЧДЦ=; ЧН=0; ЧГ=")
										, СокрЛП(УзелОбъект.Ссылка), Истина);

									КонецЕсли;

									ОбработатьРезультатОтветаСервера(Результат.ДанныеОтвета, ТаблицаВыгружено, УзелОбъект.Ссылка, ТипРегистрации);

								Иначе

									ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала(ТипРегистрации)
									, УровеньЖурналаРегистрации.Ошибка
									, УзелОбъект.Метаданные(), УзелОбъект.Ссылка
									,
									, "Сервер CRM вернул неожиданные данные!" + Символы.ПС +
									  + "(" + СокрЛП(Результат.ДанныеОтвета) + ")"
									, СокрЛП(УзелОбъект.Ссылка), Истина);

								КонецЕсли;

							Исключение

								ТекстОшибки = "ОШИБКА ПЕРЕДАЧИ (" + Формат(УзелОбъект.НомерОтправленного, "ЧН=0; ЧГ=") + ")"
									+ Символы.ПС + ОписаниеОшибки();

								ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала(ТипРегистрации)
								, УровеньЖурналаРегистрации.Ошибка
								, УзелОбъект.Метаданные(), УзелОбъект.Ссылка
								,
								, ТекстОшибки
								, СокрЛП(УзелОбъект.Ссылка), Истина);

								ВызватьИсключение ТекстОшибки;

							КонецПопытки;

						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		Если УзелОбъект.Заблокирован() Тогда

			УзелОбъект.Разблокировать();

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 23.01.2019 12:53:06
Процедура ЗаписатьИзмененияВМассивJSON(ТаблицаДанных, ТипРегистрации, ЗаписьJSON, РазмерМассива, ТаблицаВыгружено)

	#Если _ Тогда
	ТаблицаДанных = Новый ТаблицаЗначений;
	#КонецЕсли

	ПодготовкаУникальныхСтрокТаблицы(ТаблицаДанных, ТаблицаВыгружено, ТипРегистрации);

	Если ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ДействующиеЦены
	ИЛИ  ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ЦеныНоменклатуры	Тогда

		Если ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ДействующиеЦены Тогда

			ТекстЗапроса = ПолучитьТекстЗапросаДанныеДействующиеЦены();

		Иначе

			ТекстЗапроса = ПолучитьТекстЗапросаДанныеЦеныНоменклатуры();

		КонецЕсли;

		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
		Запрос.УстановитьПараметр("ТекущаяДата"  , ТекущаяДата());

		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда

			ТоварыВыборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ТоварыВыборка.Следующий() Цикл

				УпаковкаВыборка = ТоварыВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

				Пока УпаковкаВыборка.Следующий() Цикл

					ЗаписьJSON.ЗаписатьНачалоОбъекта();

						JSON.ЗаписатьСвойство("SKU", УпаковкаВыборка.IDN, ЗаписьJSON);
						JSON.ЗаписатьСвойство("unitMeasurement", УпаковкаВыборка.Единица, ЗаписьJSON);
						JSON.ЗаписатьСвойство("coefficient", УпаковкаВыборка.Коэффициент, ЗаписьJSON);

						ЗаписьJSON.ЗаписатьИмяСвойства("prices");

						ЗаписьJSON.ЗаписатьНачалоМассива();

						ЦеныВыборка = УпаковкаВыборка.Выбрать();

						Пока ЦеныВыборка.Следующий() Цикл

							ЗаписьJSON.ЗаписатьНачалоОбъекта();

								JSON.ЗаписатьСвойство("IDD_store"  , ЦеныВыборка.GUID, ЗаписьJSON);
								JSON.ЗаписатьСвойство("IDC_store"  , СокрЛП(ЦеныВыборка.Магазин.УникальныйИдентификатор()), ЗаписьJSON);
								JSON.ЗаписатьСвойство("IDN_store"  , ЦеныВыборка.IDNМагазина, ЗаписьJSON);
								JSON.ЗаписатьСвойство("storeNumber", ЦеныВыборка.НомерМагазина, ЗаписьJSON);
								JSON.ЗаписатьСвойство("price"      , ЦеныВыборка.Цена, ЗаписьJSON);
								JSON.ЗаписатьСвойство("PromoPrice" , ЦеныВыборка.АкционнаяЦена, ЗаписьJSON);

							ЗаписьJSON.ЗаписатьКонецОбъекта();

							РазмерМассива = РазмерМассива + 1;

						КонецЦикла;

						ЗаписьJSON.ЗаписатьКонецМассива();

					ЗаписьJSON.ЗаписатьКонецОбъекта();

				КонецЦикла;

			КонецЦикла;

		КонецЕсли;

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ТоварыНаСкладах Тогда

		Запрос = Новый Запрос(ПолучитьТекстЗапросаДанныеТоварыНаСкладах());
		Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);

		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда

			ТоварыВыборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ТоварыВыборка.Следующий() Цикл

				Если ТоварыВыборка.IDN = NULL Тогда

					Продолжить;

				КонецЕсли;

				ЗаписьJSON.ЗаписатьНачалоОбъекта();

					JSON.ЗаписатьСвойство("SKU", ТоварыВыборка.IDN, ЗаписьJSON);
					JSON.ЗаписатьСвойство("coefficient", ТоварыВыборка.Коэффициент, ЗаписьJSON);

					ЗаписьJSON.ЗаписатьИмяСвойства("remains");

					ЗаписьJSON.ЗаписатьНачалоМассива();

					ДеталиВыборка = ТоварыВыборка.Выбрать();

					Пока ДеталиВыборка.Следующий() Цикл

						ЗаписьJSON.ЗаписатьНачалоОбъекта();

							JSON.ЗаписатьСвойство("IDD_store"       , ДеталиВыборка.GUID, ЗаписьJSON);
							JSON.ЗаписатьСвойство("IDC_store"       , СокрЛП(ДеталиВыборка.Магазин.УникальныйИдентификатор()), ЗаписьJSON);
							JSON.ЗаписатьСвойство("IDN_store"       , ДеталиВыборка.IDNМагазина, ЗаписьJSON);
							JSON.ЗаписатьСвойство("storeNumber"     , ДеталиВыборка.НомерМагазина, ЗаписьJSON);
							JSON.ЗаписатьСвойство("availability"    , ДеталиВыборка.Количество, ЗаписьJSON);
							JSON.ЗаписатьСвойство("reserve"         , ДеталиВыборка.КоличествоРезерв, ЗаписьJSON);
							JSON.ЗаписатьСвойство("availableBalance", ДеталиВыборка.Количество - ДеталиВыборка.КоличествоРезерв, ЗаписьJSON);

						ЗаписьJSON.ЗаписатьКонецОбъекта();

						РазмерМассива = РазмерМассива + 1;

					КонецЦикла;

					ЗаписьJSON.ЗаписатьКонецМассива();

				ЗаписьJSON.ЗаписатьКонецОбъекта();

			КонецЦикла;

		КонецЕсли;

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Магазины Тогда

		Запрос = Новый Запрос(ПолучитьТекстЗапросаДанныеМагазины());
		Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);

		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда

			МагазиныВыборка = Результат.Выбрать();

			Пока МагазиныВыборка.Следующий() Цикл

				ЗаписьJSON.ЗаписатьНачалоОбъекта();

					JSON.ЗаписатьСвойство("IDC_store"     , СокрЛП(МагазиныВыборка.Магазин.УникальныйИдентификатор()), ЗаписьJSON);
					JSON.ЗаписатьСвойство("PrimaryDeleted", Ложь, ЗаписьJSON);
					JSON.ЗаписатьСвойство("IDN_store"     , МагазиныВыборка.IDN, ЗаписьJSON);
					JSON.ЗаписатьСвойство("storeName"     , СокрЛП(МагазиныВыборка.Наименование), ЗаписьJSON);
					JSON.ЗаписатьСвойство("storeNumber"   , МагазиныВыборка.НомерМагазина, ЗаписьJSON);

				ЗаписьJSON.ЗаписатьКонецОбъекта();

				РазмерМассива = РазмерМассива + 1;

			КонецЦикла;

		КонецЕсли;

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.СправочникиДругие Тогда

		Запрос = Новый Запрос(ПолучитьТекстЗапросаДанныеСправочникиДругие());
		Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);

		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда

			ЗначенияВыборка = Результат.Выбрать();

			Пока ЗначенияВыборка.Следующий() Цикл

				ЗаписьJSON.ЗаписатьНачалоОбъекта();

					JSON.ЗаписатьСвойство("IDC_Type", ЗначенияВыборка.ТипЗначения, ЗаписьJSON);
					JSON.ЗаписатьСвойство("IDC", СокрЛП(ЗначенияВыборка.Ссылка.УникальныйИдентификатор()), ЗаписьJSON);

					Если ТипЗнч(ЗначенияВыборка.Ссылка) = Тип("СправочникСсылка.ИменаЛюдей") Тогда

						JSON.ЗаписатьСвойство("Name"       , СокрЛП(ЗначенияВыборка.Наименование), ЗаписьJSON);
						JSON.ЗаписатьСвойство("Name_UA"    , СокрЛП(ЗначенияВыборка.НаименованиеУкраинское), ЗаписьJSON);
						JSON.ЗаписатьСвойство("Name_LAT"   , СокрЛП(ЗначенияВыборка.НаименованиеЛатиница), ЗаписьJSON);
						JSON.ЗаписатьСвойство("Name_UA_LAT", СокрЛП(ЗначенияВыборка.НаименованиеУкраинскоеЛатиница), ЗаписьJSON);

						JSON.ЗаписатьСвойство("Gender" , ЗначенияВыборка.Пол, ЗаписьJSON);
						JSON.ЗаписатьСвойство("GenderDeterm", ЗначенияВыборка.ОпределяетПол, ЗаписьJSON);

					Иначе


					КонецЕсли;

				ЗаписьJSON.ЗаписатьКонецОбъекта();

				РазмерМассива = РазмерМассива + 1;

			КонецЦикла;

		КонецЕсли;

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Контрагенты Тогда

		Запрос = Новый Запрос(ПолучитьТекстЗапросаДанныеКонтрагенты());
		Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных.Скопировать(Новый Структура("УдалениеОбъекта", Ложь)));
	//	временно отключим! Не забыть поправить в запросе и "НЕ(ТаблицаКонтрагенты.ПометкаУдаления ИЛИ ТаблицаКонтрагенты.Блокирован)"
		Запрос.УстановитьПараметр("ПустоеНаименование", КонтактнаяИнформацияКлиентСерверПовтИсп.ПустоеНаименование() + "%");

		Результаты = Запрос.ВыполнитьПакет();

		Если НЕ Результаты[3].Пустой() Тогда

			ТаблицаКлиентов     = ПолучитьТаблицуКонтрагентов(Результаты[3].Выгрузить(), ТаблицаДанных.Скопировать(Новый Структура("УдалениеОбъекта", Истина)));
			КартыКлиентаВыборка = Результаты[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ДетиКлиентаВыборка  = Результаты[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Для каждого СтрокаКлиента Из ТаблицаКлиентов Цикл

				ЗаписьJSON.ЗаписатьНачалоОбъекта();

					JSON.ЗаписатьСвойство("IDC_Client", СокрЛП(СтрокаКлиента.Контрагент.УникальныйИдентификатор()), ЗаписьJSON);
					JSON.ЗаписатьСвойство("IDN_client", СтрокаКлиента.IDN, ЗаписьJSON);

					JSON.ЗаписатьСвойство("PrimaryDeleted", СтрокаКлиента.УдалениеОбъекта, ЗаписьJSON);
					JSON.ЗаписатьСвойство("blocked"       , СтрокаКлиента.ПометкаУдаления, ЗаписьJSON);

					JSON.ЗаписатьСвойство("clientname", СокрЛП(СтрокаКлиента.Наименование), ЗаписьJSON);

					JSON.ЗаписатьСвойство("firstname" , СокрЛП(СтрокаКлиента.Имя), ЗаписьJSON);
					JSON.ЗаписатьСвойство("lastname"  , СокрЛП(СтрокаКлиента.Фамилия), ЗаписьJSON);
					JSON.ЗаписатьСвойство("middlename", СокрЛП(СтрокаКлиента.Отчество), ЗаписьJSON);

					JSON.ЗаписатьСвойство("phoneNumber", СокрЛП(СтрокаКлиента.НомерТелефона), ЗаписьJSON);

					JSON.ЗаписатьСвойство("phone" , СокрЛП(СтрокаКлиента.НомерТелефонаСлужебный), ЗаписьJSON);
					JSON.ЗаписатьСвойство("email" , СокрЛП(СтрокаКлиента.Электропочта), ЗаписьJSON);
					JSON.ЗаписатьСвойство("email2", СокрЛП(СтрокаКлиента.ЭлектропочтаСлужебный), ЗаписьJSON);
					JSON.ЗаписатьСвойство("mailingAddress", СокрЛП(СтрокаКлиента.АдресПочтовый), ЗаписьJSON);

					JSON.ЗаписатьСвойство("gender"   , СокрЛП(СтрокаКлиента.Пол), ЗаписьJSON);
					JSON.ЗаписатьСвойство("birthdate", Формат(СтрокаКлиента.ДатаРождения, "ДФ=yyyy/MM/dd"), ЗаписьJSON);

					ЗаписьJSON.ЗаписатьИмяСвойства("childs");	//	ДЕТИ начало

					ЗаписьJSON.ЗаписатьНачалоМассива();

					ДетиКлиентаВыборка.Сбросить();

					Если ДетиКлиентаВыборка.НайтиСледующий(Новый Структура("Контрагент", СтрокаКлиента.Контрагент)) Тогда

						ДетиВыборка = ДетиКлиентаВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

						Пока ДетиВыборка.Следующий() Цикл

							ЗаписьJSON.ЗаписатьНачалоОбъекта();

								JSON.ЗаписатьСвойство("IDC_child", СокрЛП(ДетиВыборка.УникальныйИдентификатор), ЗаписьJSON);
								JSON.ЗаписатьСвойство("name"     , СокрЛП(ДетиВыборка.Имя), ЗаписьJSON);
								JSON.ЗаписатьСвойство("gender"   , СокрЛП(ДетиВыборка.Пол), ЗаписьJSON);
								JSON.ЗаписатьСвойство("birthdate", Формат(ДетиВыборка.ДатаРождения, "ДФ=yyyy/MM/dd"), ЗаписьJSON);

							ЗаписьJSON.ЗаписатьКонецОбъекта();

						КонецЦикла;

					КонецЕсли;

					ЗаписьJSON.ЗаписатьКонецМассива();			// ДЕТИ конц

					ЗаписьJSON.ЗаписатьИмяСвойства("cards");	// КАРТЫ начало

					ЗаписьJSON.ЗаписатьНачалоМассива();

					КартыКлиентаВыборка.Сбросить();

					Если КартыКлиентаВыборка.НайтиСледующий(Новый Структура("Контрагент", СтрокаКлиента.Контрагент)) Тогда

						КартыВыборка = КартыКлиентаВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

						Пока КартыВыборка.Следующий() Цикл

							ЗаписьJSON.ЗаписатьНачалоОбъекта();

								JSON.ЗаписатьСвойство("IDC_loyalCard" , СокрЛП(КартыВыборка.ДисконтнаяКарта.УникальныйИдентификатор()), ЗаписьJSON);
								JSON.ЗаписатьСвойство("IDC_store"     , СокрЛП(КартыВыборка.Магазин.УникальныйИдентификатор()), ЗаписьJSON);

								JSON.ЗаписатьСвойство("blocked"       , КартыВыборка.ПометкаУдаления, ЗаписьJSON);
								JSON.ЗаписатьСвойство("number"        , СокрЛП(КартыВыборка.КодКарты), ЗаписьJSON);
								JSON.ЗаписатьСвойство("activationDate", Формат(КартыВыборка.ДатаОткрытия, "ДФ=yyyy/MM/dd"), ЗаписьJSON);
								JSON.ЗаписатьСвойство("endDate"       , Формат(КартыВыборка.ДатаЗакрытия, "ДФ=yyyy/MM/dd"), ЗаписьJSON);
								JSON.ЗаписатьСвойство("creationDate1C", Формат(КартыВыборка.ДатаСоздания, "ДФ=yyyy/MM/dd"), ЗаписьJSON);

							ЗаписьJSON.ЗаписатьКонецОбъекта();

						КонецЦикла;
						
					КонецЕсли;

					ЗаписьJSON.ЗаписатьКонецМассива();			//	КАРТЫ конец

				ЗаписьJSON.ЗаписатьКонецОбъекта();

				РазмерМассива = РазмерМассива + 1;

			КонецЦикла;

		КонецЕсли;

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ЗапросДоступности Тогда

		Запрос = Новый Запрос(ПолучитьТекстЗапросаДанныеЗапросДоступности());
		Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);

		Результаты = Запрос.ВыполнитьПакет();

		Если НЕ Результаты[1].Пустой() Тогда

			ШапкаВыборка  = Результаты[1].Выбрать();
			ТоварыВыборка = Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			МестаВыборка  = Результаты[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ШапкаВыборка.Следующий() Цикл

				ЗаписьJSON.ЗаписатьНачалоОбъекта();

					JSON.ЗаписатьСвойство("IDD_requestAvailability", IDC_Строкой(ШапкаВыборка.Ссылка), ЗаписьJSON);
					JSON.ЗаписатьСвойство("numberSeats", ШапкаВыборка.КоличествоМест, ЗаписьJSON);
					JSON.ЗаписатьСвойство("status"     , ШапкаВыборка.Статус, ЗаписьJSON);

					ЗаписьJSON.ЗаписатьИмяСвойства("itemAvailability");	//	ТОВАРЫ начало

					ЗаписьJSON.ЗаписатьНачалоМассива();

					ТоварыВыборка.Сбросить();

					Если ТоварыВыборка.НайтиСледующий(Новый Структура("Ссылка", ШапкаВыборка.Ссылка)) Тогда

						ТаблицаВыборка = ТоварыВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

						Пока ТаблицаВыборка.Следующий() Цикл

							ЗаписьJSON.ЗаписатьНачалоОбъекта();

								JSON.ЗаписатьСвойство("IDD_itemAvailability", ТаблицаВыборка.УникальныйИдентификатор, ЗаписьJSON);
								JSON.ЗаписатьСвойство("IDN_SKU"     , ТаблицаВыборка.IDN, ЗаписьJSON);
								JSON.ЗаписатьСвойство("amountActual", ТаблицаВыборка.Количество, ЗаписьJSON);
								JSON.ЗаписатьСвойство("commentStok" , СокрЛП(Лев(ТаблицаВыборка.Примечание, 4000)), ЗаписьJSON);

							ЗаписьJSON.ЗаписатьКонецОбъекта();

						КонецЦикла;

					КонецЕсли;

					ЗаписьJSON.ЗаписатьКонецМассива();			// ТОВАРЫ конец

					ЗаписьJSON.ЗаписатьИмяСвойства("numberSeatsParametrs");	//	МЕСТА начало

					ЗаписьJSON.ЗаписатьНачалоМассива();

					МестаВыборка.Сбросить();

					Если МестаВыборка.НайтиСледующий(Новый Структура("Ссылка", ШапкаВыборка.Ссылка)) Тогда

						ТаблицаВыборка = МестаВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

						Пока ТаблицаВыборка.Следующий() Цикл

							ЗаписьJSON.ЗаписатьНачалоОбъекта();

								JSON.ЗаписатьСвойство("width" , ТаблицаВыборка.Ширина, ЗаписьJSON);
								JSON.ЗаписатьСвойство("height", ТаблицаВыборка.Высота, ЗаписьJSON);
								JSON.ЗаписатьСвойство("length", ТаблицаВыборка.Глубина, ЗаписьJSON);
								JSON.ЗаписатьСвойство("weight", ТаблицаВыборка.Вес, ЗаписьJSON);

							ЗаписьJSON.ЗаписатьКонецОбъекта();

						КонецЦикла;

					КонецЕсли;

					ЗаписьJSON.ЗаписатьКонецМассива();			// МЕСТА конец

				ЗаписьJSON.ЗаписатьКонецОбъекта();

				РазмерМассива = РазмерМассива + 1;

			КонецЦикла;

		КонецЕсли;

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Документы Тогда

		Запрос = Новый Запрос(ПолучитьТекстЗапросаДанныеДокументыПродажи());
		Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);

		Результаты = Запрос.ВыполнитьПакет();

		Если НЕ Результаты[2].Пустой() Тогда

			ШапкаВыборка  = Результаты[2].Выбрать();
			ТоварыВыборка = Результаты[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			КупоныВыборка = Результаты[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			СкидкиВыборка = Результаты[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ОплатаВыборка = Результаты[6].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			СертификатыВыборка = Результаты[7].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ШапкаВыборка.Следующий() Цикл

				КодОрганизации = СокрЛП(ШапкаВыборка.КодПоЕДРПОУ);

				Если ПустаяСтрока(КодОрганизации) Тогда

					ДанныеОрганизации = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(ШапкаВыборка.Дата, Новый Структура("Организация", ШапкаВыборка.Организация));

					Если НЕ ПустаяСтрока(ДанныеОрганизации.ИННПлательщикаНДС) Тогда

						КодОрганизации = СокрЛП(ДанныеОрганизации.ИННПлательщикаНДС);

					КонецЕсли;

				КонецЕсли;

				Если НЕ ШапкаВыборка.Проведен Тогда	//	LNK 10.03.2020 08:59:08

					ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала() + ".ПРОВЕДЕН"
					, УровеньЖурналаРегистрации.Предупреждение
					, ШапкаВыборка.Ссылка.Метаданные(), ШапкаВыборка.Ссылка
					,
					, "НЕПРОВЕДЕННЫЙ ДОКУМЕНТ: ВЫГРУЖЕН"
					, СокрЛП(ШапкаВыборка.Ссылка), Истина);

				КонецЕсли;

				ЗаписьJSON.ЗаписатьНачалоОбъекта();

					JSON.ЗаписатьСвойство("IDC_sale"   , IDC_Строкой(ШапкаВыборка.Ссылка), ЗаписьJSON);
					JSON.ЗаписатьСвойство("date"       , Формат(ШапкаВыборка.Дата, "ДФ='yyyy/MM/dd ЧЧ:мм:сс'"), ЗаписьJSON);
					JSON.ЗаписатьСвойство("number"     , СокрЛП(ШапкаВыборка.Номер), ЗаписьJSON);
					JSON.ЗаписатьСвойство("Posted"     , ШапкаВыборка.Проведен, ЗаписьJSON);
					JSON.ЗаписатьСвойство("typeDoc"    , ШапкаВыборка.ВидДокумента, ЗаписьJSON);
					JSON.ЗаписатьСвойство("operation"  , ШапкаВыборка.ВидОперации, ЗаписьJSON);
					JSON.ЗаписатьСвойство("IDC_Base"   , IDC_Строкой(ШапкаВыборка.ЧекККМПродажа), ЗаписьJSON);
					JSON.ЗаписатьСвойство("IDC_CashDay", IDC_Строкой(ШапкаВыборка.КассовыйДень), ЗаписьJSON);

					JSON.ЗаписатьСвойство("legalEntity", КодОрганизации, ЗаписьJSON);

					JSON.ЗаписатьСвойство("IDD_client", СокрЛП(ШапкаВыборка.IDD_client), ЗаписьJSON);
					JSON.ЗаписатьСвойство("IDС_client", IDC_Строкой(ШапкаВыборка.Клиент), ЗаписьJSON);

					JSON.ЗаписатьСвойство("loyalCard"    , СокрЛП(ШапкаВыборка.КодКарты), ЗаписьJSON);
					JSON.ЗаписатьСвойство("IDC_loyalCard", IDC_Строкой(ШапкаВыборка.ДисконтнаяКарта), ЗаписьJSON);

					JSON.ЗаписатьСвойство("phoneNumberClient", СокрЛП(ШапкаВыборка.НомерТелефона), ЗаписьJSON);

					JSON.ЗаписатьСвойство("numberOrder", СокрЛП(ШапкаВыборка.НомерЗаказа), ЗаписьJSON);
					JSON.ЗаписатьСвойство("IDD_Order"  , IDC_Строкой(ШапкаВыборка.ЗаказПокупателя), ЗаписьJSON);
					JSON.ЗаписатьСвойство("IDC_Order"  , IDC_Строкой(ШапкаВыборка.ЗаказПокупателя), ЗаписьJSON);
					JSON.ЗаписатьСвойство("IDD_store"  , СокрЛП(ШапкаВыборка.IDD_store), ЗаписьJSON);

					JSON.ЗаписатьСвойство("totalSumNoDiscount"  , ШапкаВыборка.СуммаБезСкидки, ЗаписьJSON);
					JSON.ЗаписатьСвойство("totalSumWithDiscount", ШапкаВыборка.СуммаСоСкидкой, ЗаписьJSON);
					JSON.ЗаписатьСвойство("totalSumToPay"       , ШапкаВыборка.СуммаОплаты, ЗаписьJSON);
					JSON.ЗаписатьСвойство("paid"                , ШапкаВыборка.СуммаОплаты, ЗаписьJSON);

					JSON.ЗаписатьСвойство("sumBonusesUsedBase"  , ШапкаВыборка.БонусБазаСписан, ЗаписьJSON);
					JSON.ЗаписатьСвойство("sumBonusesUsedPromo" , ШапкаВыборка.БонусАкцияСписан, ЗаписьJSON);

					JSON.ЗаписатьСвойство("CustPurchaseAmount"  , РозничныеПродажиСервер.ПолучитьСуммуНакоплений(ШапкаВыборка.Клиент), ЗаписьJSON);

					ЗаписьJSON.ЗаписатьИмяСвойства("saleItems");	//	ТОВАРЫ начало

					ЗаписьJSON.ЗаписатьНачалоМассива();

					ТоварыВыборка.Сбросить();

					Если ТоварыВыборка.НайтиСледующий(Новый Структура("Ссылка", ШапкаВыборка.Ссылка)) Тогда

						ТаблицаВыборка = ТоварыВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

						Пока ТаблицаВыборка.Следующий() Цикл

							ЗаписьJSON.ЗаписатьНачалоОбъекта();

								JSON.ЗаписатьСвойство("rowNum", ТаблицаВыборка.НомерСтроки, ЗаписьJSON);

								JSON.ЗаписатьСвойство("SKU"   , СокрЛП(ТаблицаВыборка.IDN), ЗаписьJSON);
								JSON.ЗаписатьСвойство("amount", ТаблицаВыборка.Количество, ЗаписьJSON);

								JSON.ЗаписатьСвойство("amountunit", ТаблицаВыборка.КоличествоУпаковок, ЗаписьJSON);
								JSON.ЗаписатьСвойство("unitMeasurement", СокрЛП(ТаблицаВыборка.Упаковка), ЗаписьJSON);
								JSON.ЗаписатьСвойство("coefficient", ТаблицаВыборка.Коэффициент, ЗаписьJSON);

								JSON.ЗаписатьСвойство("price", ТаблицаВыборка.ЦенаСНДС, ЗаписьJSON);
								JSON.ЗаписатьСвойство("discountHrn"  , ТаблицаВыборка.СуммаАвтоматическойСкидки, ЗаписьJSON);

							//	LNK 06.04.2020 12:06:04 Я просто в шоке от наших золотых партнёров из Киева!
							//	Они НЕ УМЕЮТ РАБОТАТЬ С ОТРИЦАТЕЛЬНЫМИ ЧИСЛАМИ !!!
								СуммаАвтоматическойНаценки = ТаблицаВыборка.СуммаАвтоматическойНаценки;
								СуммаРучнойСкидки = ТаблицаВыборка.СуммаРучнойСкидки;

								Если СуммаРучнойСкидки < 0 Тогда

									СуммаАвтоматическойНаценки = СуммаАвтоматическойНаценки - СуммаРучнойСкидки;	//	минус на минус даёт плюс
									СуммаРучнойСкидки = 0;

								КонецЕсли;

								JSON.ЗаписатьСвойство("natcenkaHrn"  , СуммаАвтоматическойНаценки, ЗаписьJSON);
								JSON.ЗаписатьСвойство("manualDiscHrn", СуммаРучнойСкидки, ЗаписьJSON);

								JSON.ЗаписатьСвойство("roundamount"  , ТаблицаВыборка.СуммаОкругления, ЗаписьJSON);

								JSON.ЗаписатьСвойство("vatGroup"     , СокрЛП(ТаблицаВыборка.СтавкаНДС), ЗаписьJSON);
								JSON.ЗаписатьСвойство("PromoPrice"   , ТаблицаВыборка.АкционнаяЦена, ЗаписьJSON);
								JSON.ЗаписатьСвойство("isPresent"	 , ТаблицаВыборка.ПродажаПодарка, ЗаписьJSON);

								JSON.ЗаписатьСвойство("bonusesUsedPromo"   , ТаблицаВыборка.БонусАкцияСписан, ЗаписьJSON);
								JSON.ЗаписатьСвойство("bonusesUsedBase"    , ТаблицаВыборка.БонусБазаСписан, ЗаписьJSON);
								JSON.ЗаписатьСвойство("bonusesAccruedBase" , ТаблицаВыборка.БонусБазаНачислен, ЗаписьJSON);
								JSON.ЗаписатьСвойство("bonusesAccruedPromo", ТаблицаВыборка.БонусАкцияНачислен, ЗаписьJSON);

								JSON.ЗаписатьСвойство("itemTotalSumWithVat", ТаблицаВыборка.СуммаСНДС, ЗаписьJSON);
								JSON.ЗаписатьСвойство("interactionWithLp"  , Ложь, ЗаписьJSON);

							ЗаписьJSON.ЗаписатьКонецОбъекта();

						КонецЦикла;

					КонецЕсли;

					ЗаписьJSON.ЗаписатьКонецМассива();			// ТОВАРЫ конец

					ЗаписьJSON.ЗаписатьИмяСвойства("coupon");	//	КУПОНЫ начало

					ЗаписьJSON.ЗаписатьНачалоМассива();

					КупоныВыборка.Сбросить();

					Если КупоныВыборка.НайтиСледующий(Новый Структура("Ссылка", ШапкаВыборка.Ссылка)) Тогда

						ТаблицаВыборка = КупоныВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

						Пока ТаблицаВыборка.Следующий() Цикл

							ЗаписьJSON.ЗаписатьНачалоОбъекта();

								JSON.ЗаписатьСвойство("number"   , СокрЛП(ТаблицаВыборка.НомерКупона), ЗаписьJSON);
								JSON.ЗаписатьСвойство("operation", ТаблицаВыборка.Операция, ЗаписьJSON);
								JSON.ЗаписатьСвойство("sum"      , ТаблицаВыборка.Сумма, ЗаписьJSON);

							ЗаписьJSON.ЗаписатьКонецОбъекта();

						КонецЦикла;

					КонецЕсли;

					ЗаписьJSON.ЗаписатьКонецМассива();			// КУПОНЫ конец

					ЗаписьJSON.ЗаписатьИмяСвойства("campaign");	//	СКИДКИ начало

					ЗаписьJSON.ЗаписатьНачалоМассива();

					СкидкиВыборка.Сбросить();

					Если СкидкиВыборка.НайтиСледующий(Новый Структура("Ссылка", ШапкаВыборка.Ссылка)) Тогда

						ТаблицаВыборка = СкидкиВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

						Пока ТаблицаВыборка.Следующий() Цикл

							ЗаписьJSON.ЗаписатьНачалоОбъекта();

								JSON.ЗаписатьСвойство("rowNum"        , ТаблицаВыборка.КлючСвязи, ЗаписьJSON);
								JSON.ЗаписатьСвойство("sequenceNumber", 0, ЗаписьJSON);
								JSON.ЗаписатьСвойство("IDD_campaign"  , СокрЛП(ТаблицаВыборка.УникальныйИдентификатор), ЗаписьJSON);
								JSON.ЗаписатьСвойство("discount"      , ТаблицаВыборка.СуммаСкидки, ЗаписьJSON);
								JSON.ЗаписатьСвойство("bonus"         , 0, ЗаписьJSON);
								JSON.ЗаписатьСвойство("saleItemSumBeforeUsedCampaign", 0, ЗаписьJSON);

							ЗаписьJSON.ЗаписатьКонецОбъекта();

						КонецЦикла;

					КонецЕсли;

					ЗаписьJSON.ЗаписатьКонецМассива();			// СКИДКИ конец

					ЗаписьJSON.ЗаписатьИмяСвойства("payments");	//	ОПЛАТА начало

					ЗаписьJSON.ЗаписатьНачалоМассива();

					ОплатаВыборка.Сбросить();

					Если ОплатаВыборка.НайтиСледующий(Новый Структура("Ссылка", ШапкаВыборка.Ссылка)) Тогда

						ТаблицаВыборка = ОплатаВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

						Пока ТаблицаВыборка.Следующий() Цикл

							ЗаписьJSON.ЗаписатьНачалоОбъекта();

								JSON.ЗаписатьСвойство("IDC_payment", IDC_Строкой(ТаблицаВыборка.ВидОплаты), ЗаписьJSON);
								JSON.ЗаписатьСвойство("type", ОбменMicrosoftDynamicsПовтИсп.ПолучитьКодТипаОплаты(ТаблицаВыборка.ТипОплаты, ТаблицаВыборка.ТипУслугиБанка), ЗаписьJSON);
								JSON.ЗаписатьСвойство("sum" , ТаблицаВыборка.Сумма, ЗаписьJSON);

							ЗаписьJSON.ЗаписатьКонецОбъекта();

						КонецЦикла;

					КонецЕсли;

					ЗаписьJSON.ЗаписатьКонецМассива();			// ОПЛАТА конец

					ЗаписьJSON.ЗаписатьИмяСвойства("certificate");	//	СЕРТИФИКАТЫ начало

					ЗаписьJSON.ЗаписатьНачалоМассива();

					СертификатыВыборка.Сбросить();

					Если СертификатыВыборка.НайтиСледующий(Новый Структура("Ссылка", ШапкаВыборка.Ссылка)) Тогда

						ТаблицаВыборка = СертификатыВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

						Пока ТаблицаВыборка.Следующий() Цикл

							ЗаписьJSON.ЗаписатьНачалоОбъекта();

								JSON.ЗаписатьСвойство("number" , ТаблицаВыборка.НомерСертификата, ЗаписьJSON);
								JSON.ЗаписатьСвойство("nominal", ТаблицаВыборка.Номинал, ЗаписьJSON);

							ЗаписьJSON.ЗаписатьКонецОбъекта();

						КонецЦикла;

					КонецЕсли;

					ЗаписьJSON.ЗаписатьКонецМассива();			// СЕРТИФИКАТЫ конец

				ЗаписьJSON.ЗаписатьКонецОбъекта();

				РазмерМассива = РазмерМассива + 1;

			КонецЦикла;

		КонецЕсли;

	Иначе

		ВызватьИсключение "Текст запроса для типа «" + ТипРегистрации + "» НЕ определен!";

	КонецЕсли;

	ТаблицаДанных.Очистить();

КонецПроцедуры

#КонецОбласти

#Область ОтработкаПодтвержденияПолучателя

//	LNK 17.12.2019 13:36:00
Процедура ДанныеПодтверждения(ВнешниеДанные, УзелОбъект, ТипРегистрации, АдресСервера)

	ВнешниеДанные = Новый Структура("Успешный, Последний");

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	JSON.ЗаписатьСвойство("IDBASE"       , ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторУчетнойСистемы"), ЗаписьJSON);
	JSON.ЗаписатьСвойство("methodName"   , ОбменMicrosoftDynamicsПовтИсп.ИмяПроцедурыWebAPI(ТипРегистрации, УзелОбъект.Процедура), ЗаписьJSON);
	JSON.ЗаписатьСвойство("returnInfoFor", "Success", ЗаписьJSON);
	JSON.ЗаписатьСвойство("UUID_noInfo"  , СокрЛП(Новый УникальныйИдентификатор), ЗаписьJSON);

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	ТекстЗапроса = ЗаписьJSON.Закрыть();
//	Отрабатываем "входящие" данные по последнему успешно полученному сообщению
	Результат = ОбменMicrosoftDynamicsСервер.ВыполнитьЗапросКСерверу("/api/MessageStatus/StatusCheck", ТекстЗапроса, АдресСервера, "POST",, 120);

	ВнешниеДанные.Успешный = ?(ТипЗнч(Результат.ДанныеОтвета) = Тип("Структура"), Результат.ДанныеОтвета, Новый Структура);
	ВнешниеДанные.Успешный.Вставить("ТекстЗапроса", ТекстЗапроса);
	ВнешниеДанные.Успешный.Вставить("Параметр"    , "Success");

//	---------------------------------------------------------------------------------------

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	JSON.ЗаписатьСвойство("IDBASE"       , ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторУчетнойСистемы"), ЗаписьJSON);
	JSON.ЗаписатьСвойство("methodName"   , ОбменMicrosoftDynamicsПовтИсп.ИмяПроцедурыWebAPI(ТипРегистрации, УзелОбъект.Процедура), ЗаписьJSON);
	JSON.ЗаписатьСвойство("returnInfoFor", "Last", ЗаписьJSON);
	JSON.ЗаписатьСвойство("UUID_noInfo"  , СокрЛП(Новый УникальныйИдентификатор), ЗаписьJSON);

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	ТекстЗапроса = ЗаписьJSON.Закрыть();
//	Отрабатываем "входящие" данные по последнему полученному сообщению, которое сейчас, вроде, в работе.
	Результат = ОбменMicrosoftDynamicsСервер.ВыполнитьЗапросКСерверу("/api/MessageStatus/StatusCheck", ТекстЗапроса, АдресСервера, "POST",, 120);

	ВнешниеДанные.Последний = ?(ТипЗнч(Результат.ДанныеОтвета) = Тип("Структура"), Результат.ДанныеОтвета, Новый Структура);
	ВнешниеДанные.Последний.Вставить("ТекстЗапроса", ТекстЗапроса);
	ВнешниеДанные.Последний.Вставить("Параметр"    , "Last");

КонецПроцедуры

//	LNK 17.12.2019 07:53:52
Процедура ПринятьПодтверждениеПолучателя(УзелОбъект, АдресСервера, ТипРегистрации, Отказ)

	Перем ВнешниеДанные;

	#Если _ Тогда
	УзелОбъект = ПланыОбмена.ОбменMicrosoftDynamics.СоздатьУзел();
	#КонецЕсли

//	"НомерОтправленного" выше был увеличен на 1. Так что эта переменная содержит значение по ссылке узла.
	НомерОжидаемый = УзелОбъект.НомерОтправленного - 1;

	ДанныеПодтверждения(ВнешниеДанные, УзелОбъект, ТипРегистрации, АдресСервера);
//	"ВнешниеДанные.Успешный.messageStatus" всегда (по идее) равен "success", а вот
//	"ВнешниеДанные.Последний.messageStatus" может содержать различные состояния загрузки пакета

	Если ВнешниеДанные.Успешный.Свойство("message1C") И ВнешниеДанные.Последний.Свойство("messageStatus") И НЕ ВнешниеДанные.Последний.messageStatus = Неопределено Тогда

	//	В случае соответствия ожидаемого номера успешно обработанному плюём на статус "последнего"..
	//	В этом случае будет приращение номера отправленного и в CRM выгрузится следующий номер.
		Если НРег(ВнешниеДанные.Последний.messageStatus) = "success"
		ИЛИ НомерОжидаемый = ВнешниеДанные.Успешный.message1C
		ИЛИ УзелОбъект.НомерОтправленного = ВнешниеДанные.Успешный.message1C	//	LNK 14.05.2020 08:10:36
		Тогда

		//	Здесь имеем информацию о последнем успешно (Success) полученном сообщении.
		//	Очистим таблицы регистраций вне зависимости от дальнейших действий - ведь такой номер всё равно получен?
			УдалитьРегистрациюИзмененийMicrosoftDynamics(ВнешниеДанные.Успешный.message1C, УзелОбъект.Ссылка, ТипРегистрации);

			Если ПринятьПодтверждениеНомерСоответствует(НомерОжидаемый, ВнешниеДанные.Успешный.message1C, УзелОбъект) Тогда

				ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала(ТипРегистрации)
				, УровеньЖурналаРегистрации.Примечание
				, УзелОбъект.Метаданные(), УзелОбъект.Ссылка
				,
				, "Получено подтверждение «success»" + Символы.ПС +
				  "Номер сообщения: " + Формат(НомерОжидаемый, "ЧДЦ=; ЧН=0; ЧГ=") + " / CRM: " + Формат(ВнешниеДанные.Успешный.message1C, "ЧДЦ=; ЧН=0; ЧГ=") + Символы.ПС + Символы.ПС +
				  ВнешниеДанные.Успешный.ТекстЗапроса
				, СокрЛП(УзелОбъект.Ссылка), Истина);

				Если ТипЗнч(ВнешниеДанные.Успешный.message) = Тип("Строка") И НЕ ПустаяСтрока(ВнешниеДанные.Успешный.message) Тогда

					Попытка

						ЧтениеJSON = Новый ЧтениеJSON;
						ЧтениеJSON.УстановитьСтроку(ВнешниеДанные.Успешный.message);

						ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON);

						УзелОбъект.КоличествоПопыток = 0;	//	сбрасываем счётчик

					Исключение

						ТекстОшибки = ОписаниеОшибки();

						ЖурналСобытий.Регистрация("JSON.error", УровеньЖурналаРегистрации.Ошибка
						, Метаданные.ПланыОбмена.ОбменMicrosoftDynamics, УзелОбъект.Ссылка
						,
						, ТекстОшибки + Символы.ПС + ОбщегоНазначенияКлиентСервер.REPEAT("-", 50) + Символы.ПС + ВнешниеДанные.Успешный.message,, Ложь);

						Отказ = Истина;

						ВызватьИсключение ТекстОшибки;

					КонецПопытки;

					ОбработатьРезультатОтветаСервера(ДанныеОтвета,,, ТипРегистрации);

				Иначе

					УзелОбъект.КоличествоПопыток = 0;	//	сбрасываем счётчик

				КонецЕсли;

			Иначе

			//	Например предыдущий пакет где-то потерялся (!!! - у текомТеча такое быват).
			//	messageStatus = "success"
			//	НомерОжидаемый = 58
			//	ВнешниеДанные.Успешный.message1C = 57

				Если НЕ (НомерОжидаемый - ВнешниеДанные.Успешный.message1C) = 1 Тогда

					УзелОбъект.КоличествоПопыток  = 2;	//	... предотвращаем повторную выгрузку

				КонецЕсли;

				УзелОбъект.НомерОтправленного = НомерОжидаемый;	//	... снимаем ранее добавленный счётчик..
				ПринятьПодтверждениеПолучателяОтмена(Истина, УзелОбъект, ВнешниеДанные.Успешный, ВнешниеДанные.Успешный.ТекстЗапроса, ТипРегистрации, Отказ);

			КонецЕсли;

		Иначе

		//	снимаем ранее добавленный счётчик..
			УзелОбъект.НомерОтправленного = НомерОжидаемый;
			ПринятьПодтверждениеПолучателяОтмена(НРег(ВнешниеДанные.Последний.messageStatus) = "error", УзелОбъект, ВнешниеДанные.Последний, ВнешниеДанные.Последний.ТекстЗапроса, ТипРегистрации, Отказ);

		КонецЕсли;

	Иначе

		ТекстСообщения = "Сервер не смог вернуть корректные данные («Успешный.message1C», «Последний.messageStatus»)" + Символы.ПС +
						 "Номер сообщения: " + Формат(НомерОжидаемый, "ЧДЦ=; ЧН=0; ЧГ=");

		ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала(ТипРегистрации)
		, УровеньЖурналаРегистрации.Ошибка
		, УзелОбъект.Метаданные(), УзелОбъект.Ссылка
		,
		, ТекстСообщения
		, СокрЛП(УзелОбъект.Ссылка), Истина);

		Отказ = Истина;	//	на всякий случай

		ВызватьИсключение ТекстСообщения;

	КонецЕсли;

КонецПроцедуры

//	LNK 18.12.2019 07:14:40
Функция ПринятьПодтверждениеНомерСоответствует(НомерОжидаемый, НомерПодтверждённый, УзелОбъект)

	#Если _ Тогда
	УзелОбъект = ПланыОбмена.ОбменMicrosoftDynamics.СоздатьУзел();
	#КонецЕсли

	Соответствует = (НомерОжидаемый = НомерПодтверждённый);

	Если НЕ Соответствует Тогда

		Если (НомерОжидаемый + 1) = НомерПодтверждённый Тогда

		//	Такое могло случиться по ошибке таймаута.
		//	"НомерОтправленного + 1" был отправлен и получен, но данные узла записаны не были.
		//	Поэтому допускаем "положительную" разницу в 1.
			НомерОжидаемый = НомерОжидаемый + 1;

			Если УзелОбъект.НомерОтправленного = НомерПодтверждённый Тогда

			//	Видимо, в последний раз узел не записывался, так как была отправка "по ошибке".
				УзелОбъект.НомерОтправленного = УзелОбъект.НомерОтправленного + 1;
				НомерОжидаемый = НомерПодтверждённый;	//	LNK 14.05.2020 08:05:29

			КонецЕсли;

			Соответствует = Истина;

		КонецЕсли;

	КонецЕсли;

	Возврат Соответствует;

КонецФункции

//	LNK 17.12.2019 08:26:26
Процедура ПринятьПодтверждениеПолучателяОтмена(ОшибкаПодтверждения, УзелОбъект, ДанныеОтвета, ТекстЗапроса, ТипРегистрации, Отказ)

	Если ОшибкаПодтверждения И УзелОбъект.КоличествоПопыток = 0 Тогда

		ПрерватьВыполнение = Ложь;
	//	В случае ответа "ошибка" пытаемся сделать ещё одну выгрузку с текущим (на предыдущую выгрузку) номера отправленного.
		УзелОбъект.КоличествоПопыток = УзелОбъект.КоличествоПопыток + 1;

	Иначе

		ПрерватьВыполнение = Истина;

	КонецЕсли;

	ТекстСообщения = "Статус ответа: " + ДанныеОтвета.messageStatus + " (" + ДанныеОтвета.Параметр + ")" + Символы.ПС +
					 ?(ПрерватьВыполнение, "Ограничение преждевременной выгрузки.", "Разрешена выгрузка последнего по ошибке.") +
						 "Номер сообщения: " + Формат(УзелОбъект.НомерОтправленного, "ЧДЦ=; ЧН=0; ЧГ=") +
						 " / CRM: " + Формат(ДанныеОтвета.message1C, "ЧДЦ=; ЧН=0; ЧГ=");

	ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала(ТипРегистрации) + ".StatusCheck"
	, ?(ОшибкаПодтверждения И ПрерватьВыполнение, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Предупреждение)
	, УзелОбъект.Метаданные(), УзелОбъект.Ссылка
	,
	, ТекстСообщения
	+ Символы.ПС + "Обращение к ресурсу «/api/MessageStatus/StatusCheck»"
	+ Символы.ПС + "Текст запроса:" + Символы.ПС + ТекстЗапроса
	+ ?(ТипЗнч(ДанныеОтвета.message) = Тип("Строка") И ДанныеОтвета.Параметр = "Last"
		, Символы.ПС + "Ответ CRM: " + СокрЛП(ДанныеОтвета.message)
		, "")
	, СокрЛП(УзелОбъект.Ссылка), Истина);

//	---------------------------------------------------------------------------------------

	Если ПрерватьВыполнение Тогда

		Отказ = Истина;	//	на всякий случай

		Если НЕ УзелОбъект.КоличествоПопыток = 0 Тогда

			УзелОбъект.КоличествоПопыток = 0;
			УзелОбъект.Записать();

		КонецЕсли;

		ВызватьИсключение ТекстСообщения;

	КонецЕсли;

КонецПроцедуры

//	LNK 28.01.2019 13:20:11
Процедура ОбработатьРезультатОтветаСервера(ДанныеОтвета, ТаблицаВыгружено, УзелПолучатель, ТипРегистрации)

	Если ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Магазины Тогда

		Если ДанныеОтвета.Свойство("stores") И ТипЗнч(ДанныеОтвета.stores) = Тип("Массив") Тогда

			НаборЗаписей = РегистрыСведений.СоответствияОбъектовУчетныхСистем.СоздатьНаборЗаписей();
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			НаборЗаписей.Отбор.УчетнаяСистема.Установить(Перечисления.УчетныеСистемыКомпании.MSDynCRM);

			ОбменДаннымиСервер.УстановитьВсехПолучателей(НаборЗаписей.ОбменДанными.Получатели, "ПоМагазину");

			Для каждого Элемент Из ДанныеОтвета.stores Цикл

				Если НЕ ПустаяСтрока(Элемент.IDC_store) Тогда

					НаборЗаписей.Очистить();
					НаборЗаписей.Отбор.Ссылка.Установить(Справочники.Магазины.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.IDC_store)));

					ЗаписьНабора = НаборЗаписей.Добавить();

					ЗаписьНабора.Ссылка = НаборЗаписей.Отбор.Ссылка.Значение;
					ЗаписьНабора.УчетнаяСистема = НаборЗаписей.Отбор.УчетнаяСистема.Значение;
					ЗаписьНабора.УникальныйИдентификаторИсточника = СокрЛП(ЗаписьНабора.Ссылка.УникальныйИдентификатор());
					ЗаписьНабора.УникальныйИдентификаторПриемника = Элемент.IDD_store;

					ЗаписьНабора.ДатаИзменения = ТекущаяДата();

					НаборЗаписей.Записать();

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Контрагенты Тогда

		Если ДанныеОтвета.Свойство("clients") И ТипЗнч(ДанныеОтвета.clients) = Тип("Массив") Тогда

			НаборЗаписей = РегистрыСведений.СоответствияОбъектовУчетныхСистем.СоздатьНаборЗаписей();
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			НаборЗаписей.Отбор.УчетнаяСистема.Установить(Перечисления.УчетныеСистемыКомпании.MSDynCRM);

			ОбменДаннымиСервер.УстановитьВсехПолучателей(НаборЗаписей.ОбменДанными.Получатели, "ПоМагазину");

			НаборКонфликты = РегистрыСведений.КонфликтыMicrosoftDynamics.СоздатьНаборЗаписей();
			НаборКонфликты.ОбменДанными.Загрузка = Истина;
			НаборКонфликты.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;

			Для каждого Элемент Из ДанныеОтвета.clients Цикл

				Если НЕ ПустаяСтрока(Элемент.IDC_Client) Тогда

					НаборЗаписей.Очистить();
					НаборЗаписей.Отбор.Ссылка.Установить(Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.IDC_Client)));

					ЗаписьНабора = НаборЗаписей.Добавить();

					ЗаписьНабора.Ссылка = НаборЗаписей.Отбор.Ссылка.Значение;
					ЗаписьНабора.УчетнаяСистема = НаборЗаписей.Отбор.УчетнаяСистема.Значение;
					ЗаписьНабора.УникальныйИдентификаторИсточника = СокрЛП(ЗаписьНабора.Ссылка.УникальныйИдентификатор());
					ЗаписьНабора.УникальныйИдентификаторПриемника = Элемент.IDD_Client;

					ЗаписьНабора.ДатаИзменения = ТекущаяДата();

					НаборЗаписей.Записать();

					Если НЕ ПустаяСтрока(Элемент.IDC_Client_CRM) Тогда

						Альтернатива = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.IDC_Client_CRM));

						Если НЕ Альтернатива = НаборЗаписей.Отбор.Ссылка.Значение Тогда

							НаборКонфликты.Очистить();
							НаборКонфликты.Отбор.Период.Установить(ТекущаяДата());
							НаборКонфликты.Отбор.Ссылка.Установить(НаборЗаписей.Отбор.Ссылка.Значение);

							ЗаписьНабора = НаборКонфликты.Добавить();

							ЗаписьНабора.Период = НаборКонфликты.Отбор.Период.Значение;
							ЗаписьНабора.Ссылка = НаборКонфликты.Отбор.Ссылка.Значение;
							ЗаписьНабора.Альтернатива = Альтернатива;
							ЗаписьНабора.УникальныйИдентификатор = Элемент.IDC_Client_CRM;

							НаборКонфликты.Записать();

						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ЗапросДоступности Тогда

		Если НЕ ТаблицаВыгружено = Неопределено И ПустаяСтрока(ДанныеОтвета.error) Тогда

			Для каждого СтрокаТаблицы Из ТаблицаВыгружено Цикл

				Если ТипЗнч(СтрокаТаблицы.Измерение_1) = Тип("ДокументСсылка.ЗапросДоступностиТоваров") Тогда

					ЗаказыПокупателейСервер.УстановитьСостояниеЗапросаДоступностиТоваров(СтрокаТаблицы.Измерение_1,, Истина);

					НаборЗаписей = РегистрыСведений.СостояниеЗапросаДоступностиТоваров.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ЗапросДоступностиТоваров.Установить(СтрокаТаблицы.Измерение_1);

					ПланыОбмена.УдалитьРегистрациюИзменений(УзелПолучатель, НаборЗаписей);

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	Иначе


	КонецЕсли;

КонецПроцедуры

//	LNK 26.02.2019 10:55:03
Процедура УдалитьРегистрациюИзмененийMicrosoftDynamics(НомерСообщения, УзелПолучатель, ТипРегистрации)	Экспорт	// экпорт для отладки

	Если ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ДействующиеЦены
	ИЛИ  ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ЦеныНоменклатуры
	ИЛИ  ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ТоварыНаСкладах	Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаИзменения.ТипРегистрации КАК ТипРегистрации,
		|	ТаблицаИзменения.Измерение_1 КАК Измерение_1,
		|	ТаблицаИзменения.Измерение_2 КАК Измерение_2,
		|	ТаблицаИзменения.Измерение_3 КАК Измерение_3,
		|	ТаблицаИзменения.НомерСообщения КАК НомерСообщения
		|ИЗ
		|	РегистрСведений.РегистрацияMicrosoftDynamics.Изменения КАК ТаблицаИзменения
		|ГДЕ
		|	ТаблицаИзменения.Узел = &УзелПолучатель
		|	И ТаблицаИзменения.НомерСообщения <= &НомерСообщения
		|	И ТаблицаИзменения.ТипРегистрации = &ТипРегистрации
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСообщения"
		);
		Запрос.УстановитьПараметр("НомерСообщения", НомерСообщения);
		Запрос.УстановитьПараметр("УзелПолучатель", УзелПолучатель);
		Запрос.УстановитьПараметр("ТипРегистрации", ТипРегистрации);
		
		НаборЗаписей = РегистрыСведений.РегистрацияMicrosoftDynamics.СоздатьНаборЗаписей();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииMicrosoftDynamics", Истина);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;

		ДанныеВыборка = Запрос.Выполнить().Выбрать();
		
		Пока ДанныеВыборка.Следующий() Цикл

			НаборЗаписей.Отбор.ТипРегистрации.Установить(ДанныеВыборка.ТипРегистрации);
			НаборЗаписей.Отбор.Измерение_1.Установить(ДанныеВыборка.Измерение_1);
			НаборЗаписей.Отбор.Измерение_2.Установить(ДанныеВыборка.Измерение_2);
			НаборЗаписей.Отбор.Измерение_3.Установить(ДанныеВыборка.Измерение_3);

			НаборЗаписей.Записать();

			ПланыОбмена.УдалитьРегистрациюИзменений(УзелПолучатель, НаборЗаписей);

		КонецЦикла;

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Документы
		ИЛИ   ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Контрагенты
		ИЛИ   ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Магазины
		ИЛИ   ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Номенклатура
		ИЛИ   ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.СправочникиДругие
		ИЛИ   ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ЗапросДоступности	Тогда

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НомерСообщения", НомерСообщения);
		Запрос.УстановитьПараметр("УзелПолучатель", УзелПолучатель);
		Запрос.УстановитьПараметр("ТипРегистрации", ТипРегистрации);

		Если ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Контрагенты Тогда

			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаИзменения.Ссылка КАК Ссылка,
			|	ТаблицаИзменения.НомерСообщения КАК НомерСообщения
			|ИЗ
			|	Справочник.ИнформационныеКарты.Изменения КАК ТаблицаИзменения
			|ГДЕ
			|	ТаблицаИзменения.Узел = &УзелПолучатель
			|	И ТаблицаИзменения.НомерСообщения <= &НомерСообщения
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаИзменения.Ссылка,
			|	ТаблицаИзменения.НомерСообщения
			|ИЗ
			|	Справочник.Контрагенты.Изменения КАК ТаблицаИзменения
			|ГДЕ
			|	ТаблицаИзменения.Узел = &УзелПолучатель
			|	И ТаблицаИзменения.НомерСообщения <= &НомерСообщения
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаИзменения.Ссылка,
			|	ТаблицаИзменения.НомерСообщения
			|ИЗ
			|	Документ.ВыдачаДисконтныхКарт.Изменения КАК ТаблицаИзменения
			|ГДЕ
			|	ТаблицаИзменения.Узел = &УзелПолучатель
			|	И ТаблицаИзменения.НомерСообщения <= &НомерСообщения
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаИзменения.Ссылка,
			|	ТаблицаИзменения.НомерСообщения
			|ИЗ
			|	Документ.ЗаменаДисконтныхКарт.Изменения КАК ТаблицаИзменения
			|ГДЕ
			|	ТаблицаИзменения.Узел = &УзелПолучатель
			|	И ТаблицаИзменения.НомерСообщения <= &НомерСообщения
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСообщения"
			;
		ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Магазины Тогда

			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаИзменения.Ссылка КАК Ссылка,
			|	ТаблицаИзменения.НомерСообщения КАК НомерСообщения
			|ИЗ
			|	Справочник.Магазины.Изменения КАК ТаблицаИзменения
			|ГДЕ
			|	ТаблицаИзменения.Узел = &УзелПолучатель
			|	И ТаблицаИзменения.НомерСообщения <= &НомерСообщения
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаИзменения.Ссылка,
			|	ТаблицаИзменения.НомерСообщения
			|ИЗ
			|	Справочник.Склады.Изменения КАК ТаблицаИзменения
			|ГДЕ
			|	ТаблицаИзменения.Узел = &УзелПолучатель
			|	И ТаблицаИзменения.НомерСообщения <= &НомерСообщения
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСообщения"
			;
		ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Номенклатура Тогда

			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаИзменения.Ссылка КАК Ссылка,
			|	ТаблицаИзменения.НомерСообщения КАК НомерСообщения
			|ИЗ
			|	Справочник.Номенклатура.Изменения КАК ТаблицаИзменения
			|ГДЕ
			|	ТаблицаИзменения.Узел = &УзелПолучатель
			|	И ТаблицаИзменения.НомерСообщения <= &НомерСообщения
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСообщения"
			;
		ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.СправочникиДругие Тогда

			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаИзменения.Ссылка КАК Ссылка,
			|	ТаблицаИзменения.НомерСообщения КАК НомерСообщения
			|ИЗ
			|	Справочник.ИменаЛюдей.Изменения КАК ТаблицаИзменения
			|ГДЕ
			|	ТаблицаИзменения.Узел = &УзелПолучатель
			|	И ТаблицаИзменения.НомерСообщения <= &НомерСообщения
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСообщения"
			;
		ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ЗапросДоступности Тогда

			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаИзменения.ЗапросДоступностиТоваров КАК Ссылка,
			|	ТаблицаИзменения.НомерСообщения КАК НомерСообщения
			|ИЗ
			|	РегистрСведений.СостояниеЗапросаДоступностиТоваров.Изменения КАК ТаблицаИзменения
			|ГДЕ
			|	ТаблицаИзменения.Узел = &УзелПолучатель
			|	И ТаблицаИзменения.НомерСообщения <= &НомерСообщения
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ТаблицаИзменения.Ссылка,
			|	ТаблицаИзменения.НомерСообщения
			|ИЗ
			|	Документ.ЗапросДоступностиТоваров.Изменения КАК ТаблицаИзменения
			|ГДЕ
			|	ТаблицаИзменения.Узел = &УзелПолучатель
			|	И ТаблицаИзменения.НомерСообщения <= &НомерСообщения
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСообщения"
			;
		Иначе

			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаИзменения.Ссылка КАК Ссылка,
			|	ТаблицаИзменения.НомерСообщения КАК НомерСообщения
			|ИЗ
			|	Документ.РеализацияТоваров.Изменения КАК ТаблицаИзменения
			|ГДЕ
			|	ТаблицаИзменения.Узел = &УзелПолучатель
			|	И ТаблицаИзменения.НомерСообщения <= &НомерСообщения
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаИзменения.Ссылка,
			|	ТаблицаИзменения.НомерСообщения
			|ИЗ
			|	Документ.ЧекККМ.Изменения КАК ТаблицаИзменения
			|ГДЕ
			|	ТаблицаИзменения.Узел = &УзелПолучатель
			|	И ТаблицаИзменения.НомерСообщения <= &НомерСообщения
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСообщения"
			;

		КонецЕсли;

		ДанныеВыборка = Запрос.Выполнить().Выбрать();
		
		Пока ДанныеВыборка.Следующий() Цикл

			Если ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ЗапросДоступности Тогда

				НаборЗаписей = РегистрыСведений.СостояниеЗапросаДоступностиТоваров.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ЗапросДоступностиТоваров.Установить(ДанныеВыборка.Ссылка);

				ПланыОбмена.УдалитьРегистрациюИзменений(УзелПолучатель, НаборЗаписей);

			Иначе

				ПланыОбмена.УдалитьРегистрациюИзменений(УзелПолучатель, ДанныеВыборка.Ссылка);

			КонецЕсли;

		КонецЦикла;

	Иначе

		ВызватьИсключение "Тип регистрации «" + ТипРегистрации + "» НЕ ОПРЕДЕЛЁН!";

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область НекторыеЧастныеПроцедурыПрямогоИнтерфейса

//	LNK 25.07.2019 10:24:18
Функция АутентификацияПокупателя(Идентификаторы, ТекстОшибки = "")	Экспорт

	Перем ДанныеОтвета;

	АдресСервера = УправлениеДоступомСлужебныйПовтИсп.ПолучитьАдресСервераMSDynamics(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);

	Если НЕ ПустаяСтрока(АдресСервера) Тогда

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписьJSON.ЗаписатьНачалоОбъекта();

			JSON.ЗаписатьСвойство("IDBASE", ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторУчетнойСистемы"), ЗаписьJSON);
			JSON.ЗаписатьСвойство("message1C", -1, ЗаписьJSON);

			ЗаписьJSON.ЗаписатьИмяСвойства("client");

				ЗаписьJSON.ЗаписатьНачалоОбъекта();

					JSON.ЗаписатьСвойство("phoneNumber", Идентификаторы.НомерТелефона, ЗаписьJSON);
					JSON.ЗаписатьСвойство("cardNumber" , Идентификаторы.КодКарты, ЗаписьJSON);

				ЗаписьJSON.ЗаписатьКонецОбъекта();

		ЗаписьJSON.ЗаписатьКонецОбъекта();

		ТекстЗапроса = ЗаписьJSON.Закрыть();

		ЖурналСобытий.Регистрация("CRM.Контрагент.Аутентификация", УровеньЖурналаРегистрации.Примечание
			, Метаданные.ПланыОбмена.ОбменMicrosoftDynamics
			,
			,
			, ТекстЗапроса
			,
			,
			Ложь
		);	//	LNK 20.05.2020 12:13:10

		Результат = ОбменMicrosoftDynamicsСервер.ВыполнитьЗапросКСерверу("/api/Orders/CustomerAuthentication", ТекстЗапроса, АдресСервера, "POST"
		,, ОбменMicrosoftDynamicsПовтИсп.УчетнаяПолитика(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин).ТаймаутКонтрагента);

		Если ТипЗнч(Результат.ДанныеОтвета) = Тип("Структура") Тогда

			Если НЕ ПустаяСтрока(Результат.ДанныеОтвета.error) Тогда

				ТекстОшибки = Результат.ДанныеОтвета.error;

			Иначе

				ДанныеОтвета = Результат.ДанныеОтвета.Data;

			КонецЕсли;

		Иначе

			ТекстОшибки = "Сервер CRM вернул неожиданные данные!" + Символы.ПС +
						  + "(" + СокрЛП(Результат.ДанныеОтвета) + ")";

		КонецЕсли;

		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда

			ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала() + ".АутентификацияПокупателя"
			, УровеньЖурналаРегистрации.Ошибка,,
			,
			, "Данные ответа: " + ТекстОшибки
			+ Символы.ПС + Символы.ПС + "(out)JSON:" + Символы.ПС + ТекстЗапроса
			, Идентификаторы.НомерТелефона + Символы.ПС + Идентификаторы.КодКарты, Истина);

		КонецЕсли;

	Иначе

		ТекстОшибки = "CRM: адрес сервера НЕ указан.";

	КонецЕсли;

	Возврат ДанныеОтвета;

КонецФункции // АутентификацияПокупателя()

//	LNK 22.08.2019 10:10:25
Функция УстановитьНовогоПокупателя(ДанныеКонтрагента, ДокументПродажи, ВыполнениеРегламента = Ложь)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если РозничныеПродажиСлужебный.РесурсMicrosoftDynamicsДоступен() Тогда

		СоставДанных = ОбменMicrosoftDynamicsСервер.ИнициализироватьСоставДанных();
		АдресСервера = УправлениеДоступомСлужебныйПовтИсп.ПолучитьАдресСервераMSDynamics(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);

		Если НЕ ПустаяСтрока(АдресСервера) Тогда

			ПредставлениеКлиента = СтроковыеФункцииКлиентСервер.ПривестиНаименование(ДанныеКонтрагента.Фамилия + " " + ДанныеКонтрагента.Имя + " " + ДанныеКонтрагента.Отчество);

			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

				JSON.ЗаписатьСвойство("IDBASE", ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторУчетнойСистемы"), ЗаписьJSON);
				JSON.ЗаписатьСвойство("message1C", -1, ЗаписьJSON);

				JSON.ЗаписатьСвойство("phoneNumber", ДанныеКонтрагента.НомерТелефона, ЗаписьJSON);
				JSON.ЗаписатьСвойство("cardNumber" , "", ЗаписьJSON);
				JSON.ЗаписатьСвойство("firstName"  , ДанныеКонтрагента.Имя, ЗаписьJSON);
				JSON.ЗаписатьСвойство("midleName"  , ДанныеКонтрагента.Отчество, ЗаписьJSON);
				JSON.ЗаписатьСвойство("lastName"   , ДанныеКонтрагента.Фамилия, ЗаписьJSON);
				JSON.ЗаписатьСвойство("gender"     , ОбменMicrosoftDynamicsПовтИсп.ПолДляCRM(ДанныеКонтрагента.Пол, "число"), ЗаписьJSON);
				JSON.ЗаписатьСвойство("email"      , ДанныеКонтрагента.Email, ЗаписьJSON);
				JSON.ЗаписатьСвойство("IDD_store"  , ОбменMicrosoftDynamicsПовтИсп.ИдентификаторМагазина(ДанныеКонтрагента.Магазин, Перечисления.УчетныеСистемыКомпании.MSDynCRM), ЗаписьJSON);
				JSON.ЗаписатьСвойство("manager"    , СокрЛП(ДанныеКонтрагента.ТекущийПользователь.УникальныйИдентификатор()), ЗаписьJSON);

				ЗаписьJSON.ЗаписатьИмяСвойства("children");
				ЗаписьJSON.ЗаписатьНачалоМассива();
				ЗаписьJSON.ЗаписатьКонецМассива();

			ЗаписьJSON.ЗаписатьКонецОбъекта();

			ТекстЗапроса = ЗаписьJSON.Закрыть();

			ЖурналСобытий.Регистрация("CRM.Контрагент.Новый", УровеньЖурналаРегистрации.Примечание
				, Метаданные.ПланыОбмена.ОбменMicrosoftDynamics
				,
				,
				, ТекстЗапроса
				,
				,
				Ложь
			);	//	LNK 18.05.2020 06:19:04

			Результат = ОбменMicrosoftDynamicsСервер.ВыполнитьЗапросКСерверу("/api/Orders/CustomerRegistration", ТекстЗапроса, АдресСервера, "POST"
			,, ОбменMicrosoftDynamicsПовтИсп.УчетнаяПолитика(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин).ТаймаутКонтрагента);

			Если ТипЗнч(Результат.ДанныеОтвета) = Тип("Структура") Тогда

				Если НЕ ПустаяСтрока(Результат.ДанныеОтвета.error) Тогда

					СоставДанных.Ошибка = Истина;
					СоставДанных.ОписаниеОшибки = Результат.ДанныеОтвета.error;

				ИначеЕсли ТипЗнч(Результат.ДанныеОтвета.Data) = Тип("Структура") Тогда

				//	перезаполним "ДанныеКонтрагента" в соответствии с полученной информацией от внешней системы
					ДанныеКонтрагента = ОбменMicrosoftDynamicsСервер.ЗаполнитьСтруктуруПоВнешнимДанным(ДанныеКонтрагента, Результат.ДанныеОтвета.Data);

					Если Справочники.Контрагенты.КлючиПоискаУказаны(ДанныеКонтрагента) Тогда

						ДанныеКонтрагента.ОтключитьМеханизмРегистрацииMicrosoftDynamics = Истина;

						СоставДанных = РозничныеПродажиСлужебный.ВыполнитьКомплексДанныхКонтрагента(
							  ""
							, ДанныеКонтрагента.НомерТелефона
							, ДанныеКонтрагента
							, Перечисления.НазначениеКонтрагентовОтложенных.ПроверкаВРознице
							, ДокументПродажи
							, ВыполнениеРегламента
						);

						Если СоставДанных.Ошибка Тогда

							Если НЕ ПустаяСтрока(СоставДанных.ОписаниеОшибки) Тогда

									СоставДанных.ОписаниеОшибки = СоставДанных.ОписаниеОшибки;

							Иначе	СоставДанных.ОписаниеОшибки = "При поиске/записи контрагента возникла неизвестная ошибка.";

							КонецЕсли;

						Иначе
							
							ДанныеКонтрагента = СоставДанных;	//	переопределим.

						КонецЕсли;

					Иначе

						СоставДанных.Ошибка = Истина;
						СоставДанных.ОписаниеОшибки = "Отказано! Ключи поиска контрагента НЕ указаны (IDC, IDD, IDN или номер телефона).";

					КонецЕсли;

				Иначе

					СоставДанных.Ошибка = Истина;
					СоставДанных.ОписаниеОшибки = "Сервер CRM вернул неожиданные данные!" + Символы.ПС
												+ "(" + СокрЛП(Результат.ДанныеОтвета.Data) + ")";

				КонецЕсли;

			Иначе

				СоставДанных.Ошибка = Истина;
				СоставДанных.ОписаниеОшибки = "Сервер CRM вернул неожиданные данные!" + Символы.ПС
											+ "(" + СокрЛП(Результат.ДанныеОтвета) + ")";

			КонецЕсли;

			Если СоставДанных.Ошибка Тогда

				ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала() + ".УстановитьНовогоПокупателя"
				, УровеньЖурналаРегистрации.Ошибка,,
				,
				, "Данные ответа: " + СоставДанных.ОписаниеОшибки
				+ Символы.ПС + Символы.ПС + "(out)JSON:" + Символы.ПС + ТекстЗапроса
				, ПредставлениеКлиента + " (" + ДанныеКонтрагента.НомерТелефона + ")", Истина);

			КонецЕсли;

		Иначе

			СоставДанных.Ошибка = Истина;
			СоставДанных.ОписаниеОшибки = "CRM: адрес сервера НЕ указан.";

		КонецЕсли;

	Иначе

		СоставДанных = ОбменMicrosoftDynamicsСервер.ИнициализироватьСоставДанных();

		Попытка

			Справочники.Контрагенты.ОтложитьДанныеКонтрагента("", ДанныеКонтрагента.НомерТелефона, ДанныеКонтрагента
				, Перечисления.НазначениеКонтрагентовОтложенных.ПроверкаВCRM
				, ДокументПродажи, ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);

			СоставДанных.Отложено = Истина;
			СоставДанных.ОписаниеОшибки =
				"Введенные данные отложены для обработки после
				|восстановления соединения.";

		Исключение

			СоставДанных.Ошибка = Истина;
			СоставДанных.ОписаниеОшибки = ОписаниеОшибки();

		КонецПопытки;

	КонецЕсли;

	Возврат СоставДанных;

КонецФункции

//	LNK 29.11.2019 11:22:36
Функция ДанныеКассовогоДняCRM(КассовыйДень, ТекстОшибки)	Экспорт

	Перем ДанныеОтвета;

	АдресСервера = УправлениеДоступомСлужебныйПовтИсп.ПолучитьАдресСервераMSDynamics(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);

	Если НЕ ПустаяСтрока(АдресСервера) Тогда

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписьJSON.ЗаписатьНачалоОбъекта();

			JSON.ЗаписатьСвойство("IDBASE", ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторУчетнойСистемы"), ЗаписьJSON);
			JSON.ЗаписатьСвойство("message1C", -1, ЗаписьJSON);
			JSON.ЗаписатьСвойство("IDC_CashDay", IDC_Строкой(КассовыйДень), ЗаписьJSON);

		ЗаписьJSON.ЗаписатьКонецОбъекта();

		ТекстЗапроса = ЗаписьJSON.Закрыть();
		Результат    = ОбменMicrosoftDynamicsСервер.ВыполнитьЗапросКСерверу("/api/Erp_1c/CashDay", ТекстЗапроса, АдресСервера, "POST",, 180);

		Если ТипЗнч(Результат.ДанныеОтвета) = Тип("Структура") Тогда

			Если НЕ Результат.ДанныеОтвета.success Тогда

				ТекстОшибки = Результат.ДанныеОтвета.error;

			Иначе

				ДанныеОтвета = Результат.ДанныеОтвета.Data;

			КонецЕсли;

		Иначе

			ТекстОшибки = "Сервер CRM вернул неожиданные данные!" + Символы.ПС +
						  + "(" + СокрЛП(Результат.ДанныеОтвета) + ")";

		КонецЕсли;

		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда

			ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала() + ".ДанныеКассовогоДняCRM"
			, УровеньЖурналаРегистрации.Ошибка,,
			,
			, "Данные ответа: " + ТекстОшибки
			+ Символы.ПС + Символы.ПС + "(out)JSON:" + Символы.ПС + ТекстЗапроса
			,, Истина);

		КонецЕсли;

	Иначе

		ТекстОшибки = "CRM: адрес сервера НЕ указан.";

	КонецЕсли;

	Возврат ДанныеОтвета;

КонецФункции

#КонецОбласти

#Область ОбработкаПолученныхДанныхПокупателяИзВнешнейCRM

//	LNK 02.08.2019 13:23:59
Функция ИдентифицироватьКлиентаПоДаннымCRM(ДокументПродажи, ДанныеКонтрагента, КодКарты, НомерТелефона, ДанныеВнешние, ПараметрыИдентификации = Неопределено, ДанныеФИО = Неопределено)	Экспорт

	Перем НазначениеДанных;

	УстановитьПривилегированныйРежим(Истина);

	ДанныеВнешниеПолучены = НЕ (ДанныеВнешние = Неопределено);

	Если НЕ ДанныеВнешниеПолучены Тогда
		
		Если ДанныеФИО = Неопределено Тогда
			ДанныеФИО = ОбменMicrosoftDynamicsСервер.ИнициализацияДанныхФИО(ДанныеФИО)
		КонецЕсли;
		
		ИмитацияДанныхОтветаCRM(ДанныеВнешние, КодКарты, НомерТелефона, ДанныеФИО);

	КонецЕсли;

	ДанныеКонтрагента = ОбменMicrosoftDynamicsСервер.ЗаполнитьСтруктуруПоВнешнимДанным(ДанныеКонтрагента, ДанныеВнешние);

	Если ТипЗнч(ПараметрыИдентификации) = Тип("Структура") Тогда	//	LNK 15.07.2020 08:14:54

		Если ПараметрыИдентификации.Свойство("НазначениеДанных") Тогда

			НазначениеДанных = ПараметрыИдентификации.НазначениеДанных;

		КонецЕсли;

		Если ПараметрыИдентификации.Свойство("РазрешеноСозданиеНового") Тогда

			ДанныеКонтрагента.РазрешеноСозданиеНового = ПараметрыИдентификации.РазрешеноСозданиеНового;

		КонецЕсли;

	КонецЕсли;

	Если НЕ ДанныеВнешниеПолучены Тогда

			НазначениеДанных = ?(НазначениеДанных = Неопределено, Перечисления.НазначениеКонтрагентовОтложенных.ПроверкаВCRM, НазначениеДанных);

	Иначе	НазначениеДанных = ?(НазначениеДанных = Неопределено, Перечисления.НазначениеКонтрагентовОтложенных.ПроверкаВРознице, НазначениеДанных);

	КонецЕсли;

	СоставДанных = РозничныеПродажиСлужебный.ВыполнитьКомплексДанныхКонтрагента(
		  КодКарты
		, НомерТелефона
		, ДанныеКонтрагента
		, НазначениеДанных
		, ДокументПродажи
	);

	Возврат СоставДанных;

КонецФункции

//	LNK 12.08.2019 10:36:08
Функция ИмитацияДанныхОтветаCRM(ДанныеВнешние, КодКарты, НомерТелефона, ДанныеФИО)

	ДанныеВнешние = Новый Структура(
		"IDC_Client, IDD_client, IDN_client, bonusAccountBalance, totalSum, verificationStatus, phoneNumber, lastName, firstName, middlename, actions, cards"
		, "", "", "", 0, 0, Ложь, НомерТелефона, ДанныеФИО.Фамилия, ДанныеФИО.Имя, ДанныеФИО.Отчество, Новый Массив, Новый Массив
	);

	Возврат ДанныеВнешние;
	
КонецФункции

#КонецОбласти

#Область ПолучениеСкидокИзCRM

//	LNK 22.08.2019 13:01:49
Функция ПолучитьСкидкиПоДокументуПродажи(ДанныеДокумента, УникальныйИдентификатор, ТекстОшибки)	Экспорт

	Перем ДанныеОтвета;

	АдресСервера = УправлениеДоступомСлужебныйПовтИсп.ПолучитьАдресСервераMSDynamics(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);

	Если НЕ ПустаяСтрока(АдресСервера) Тогда

		ТекстЗапроса = ПолучитьТекстВнешнегоЗапроса(ДанныеДокумента);

		Попытка

			Результат = ОбменMicrosoftDynamicsСервер.ВыполнитьЗапросКСерверу("/api/Erp_1c/PromoCalculate", ТекстЗапроса, АдресСервера, "POST"
			,, ОбменMicrosoftDynamicsПовтИсп.УчетнаяПолитика(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин).ТаймаутРасчетаЧека);

			Если ТипЗнч(Результат.ДанныеОтвета) = Тип("Структура") Тогда

				Если НЕ ПустаяСтрока(Результат.ДанныеОтвета.error) Тогда

					ТекстОшибки = "Сервер CRM вернул ошибку:" + Символы.ПС + "«" + Результат.ДанныеОтвета.error + "»";

				Иначе

					ДанныеОтвета = ПодготовитьДанныеОтвета(Результат.ДанныеОтвета.Data, УникальныйИдентификатор);

				КонецЕсли;

			Иначе

				ТекстОшибки = "Сервер CRM вернул неожиданные данные!" + Символы.ПС +
							  + "(" + СокрЛП(Результат.ДанныеОтвета) + ")";

			КонецЕсли;

		Исключение

			ТекстОшибки = "При обращении к серверу CRM возникла ошибка:" + Символы.ПС + "«" + ОписаниеОшибки() + "»";

		КонецПопытки;

		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда

			ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала(, Истина) + ".РасчетСкидок"
			, УровеньЖурналаРегистрации.Ошибка
			, ДанныеДокумента.ДокументПродажи.Метаданные()
			, ДанныеДокумента.ДокументПродажи
			,
			, "Данные ответа: " + ТекстОшибки
			+ Символы.ПС + Символы.ПС + "(out)JSON:" + Символы.ПС + ТекстЗапроса
			,, Истина);

		КонецЕсли;

	Иначе

		ТекстОшибки = "CRM: адрес сервера НЕ указан.";

	КонецЕсли;

	Возврат ДанныеОтвета;

КонецФункции

//	LNK 22.08.2019 14:49:51
Функция ПолучитьТекстВнешнегоЗапроса(ДанныеДокумента)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Цена КАК Цена,
	|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	Товары.АкционнаяЦена КАК АкционнаяЦена
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидочныеКупоны.НомерСтроки КАК НомерСтроки,
	|	СкидочныеКупоны.СерийныйНомер КАК СерийныйНомер,
	|	СкидочныеКупоны.Принят КАК Принят
	|ПОМЕСТИТЬ Купоны
	|ИЗ
	|	&СкидочныеКупоны КАК СкидочныеКупоны
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДанных.Контрагент) КАК Контрагент,
	|	МАКСИМУМ(ТаблицаДанных.IDD_client) КАК IDD_client,
	|	МАКСИМУМ(ТаблицаДанных.Магазин) КАК Магазин,
	|	МАКСИМУМ(ТаблицаДанных.IDD_store) КАК IDD_store
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕСТЬNULL(ТаблицаСправочник.Ссылка, Ведущая.Контрагент) КАК Контрагент,
	|		ЕСТЬNULL(ТаблицаСоответствий.УникальныйИдентификаторПриемника, """") КАК IDD_client,
	|		NULL КАК Магазин,
	|		NULL КАК IDD_store
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВЫРАЗИТЬ(&Контрагент КАК Справочник.Контрагенты) КАК Контрагент) КАК Ведущая
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаСправочник
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовУчетныхСистем КАК ТаблицаСоответствий
	|				ПО ТаблицаСправочник.Ссылка = ТаблицаСоответствий.Ссылка
	|					И (ТаблицаСоответствий.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.MSDynCRM))
	|			ПО Ведущая.Контрагент = ТаблицаСправочник.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		NULL,
	|		ЕСТЬNULL(ТаблицаСправочник.Ссылка, Ведущая.Магазин),
	|		ЕСТЬNULL(ТаблицаСоответствий.УникальныйИдентификаторПриемника, """")
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВЫРАЗИТЬ(&Магазин КАК Справочник.Магазины) КАК Магазин) КАК Ведущая
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины КАК ТаблицаСправочник
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовУчетныхСистем КАК ТаблицаСоответствий
	|				ПО ТаблицаСправочник.Ссылка = ТаблицаСоответствий.Ссылка
	|					И (ТаблицаСоответствий.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.MSDynCRM))
	|			ПО Ведущая.Магазин = ТаблицаСправочник.Ссылка) КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведущая.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНоменклатура.IDN КАК IDN,
	|	ЕСТЬNULL(Ведущая.Упаковка.Коэффициент, 1) КАК Коэффициент,
	|	Ведущая.Количество КАК Количество,
	|	Ведущая.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Ведущая.Цена КАК Цена,
	|	Ведущая.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	Ведущая.АкционнаяЦена КАК АкционнаяЦена
	|ИЗ
	|	Товары КАК Ведущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаНоменклатура
	|		ПО Ведущая.Номенклатура = ТаблицаНоменклатура.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведущая.НомерСтроки,
	|	ТаблицаНоменклатура.IDN,
	|	ЕСТЬNULL(Ведущая.Упаковка.Коэффициент, 1),
	|	Ведущая.Количество,
	|	Ведущая.КоличествоУпаковок,
	|	Ведущая.Цена,
	|	Ведущая.СуммаРучнойСкидки,
	|	Ведущая.АкционнаяЦена
	|ИЗ
	|	Товары КАК Ведущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерийныеНомера КАК ТаблицаСерийныеНомера
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаНоменклатура
	|			ПО ТаблицаСерийныеНомера.Владелец = ТаблицаНоменклатура.Ссылка
	|		ПО Ведущая.Номенклатура = ТаблицаСерийныеНомера.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Купоны.НомерСтроки КАК НомерСтроки,
	|	Купоны.СерийныйНомер КАК СерийныйНомер,
	|	Купоны.Принят КАК Принят
	|ИЗ
	|	Купоны КАК Купоны
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Купоны.СерийныйНомер) = ТИП(СТРОКА)
	|	И НЕ Купоны.СерийныйНомер = """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Купоны"
	);

	Для каждого КлючЗначение Из ДанныеДокумента Цикл

		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);

	КонецЦикла;
	
	Результаты = Запрос.ВыполнитьПакет();

	СсылкиВыборка = Результаты[2].Выбрать();
	СсылкиВыборка.Следующий();
	ТоварыВыборка = Результаты[3].Выбрать();
	КупоныВыборка = Результаты[4].Выбрать();

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	JSON.ЗаписатьСвойство("IDBASE"     , ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторУчетнойСистемы"), ЗаписьJSON);
	JSON.ЗаписатьСвойство("message1C"  , -1, ЗаписьJSON);
	JSON.ЗаписатьСвойство("UUID_noInfo", СокрЛП(Новый УникальныйИдентификатор), ЗаписьJSON);

	JSON.ЗаписатьСвойство("IDC_sale"  , ОбменMicrosoftDynamicsСлужебный.IDC_Строкой(ДанныеДокумента.ДокументПродажи), ЗаписьJSON);

	JSON.ЗаписатьСвойство("IDC_client", ОбменMicrosoftDynamicsСлужебный.IDC_Строкой(СсылкиВыборка.Контрагент), ЗаписьJSON);
	JSON.ЗаписатьСвойство("IDD_client", СсылкиВыборка.IDD_client, ЗаписьJSON);

	JSON.ЗаписатьСвойство("IDC_store" , ОбменMicrosoftDynamicsСлужебный.IDC_Строкой(СсылкиВыборка.Магазин), ЗаписьJSON);
	JSON.ЗаписатьСвойство("IDD_store" , СсылкиВыборка.IDD_store, ЗаписьJSON);

	JSON.ЗаписатьСвойство("bonusesUsedPromo"  , ДанныеДокумента.ИспользоватьБонусАкция, ЗаписьJSON);	//	LNK 08.11.2019 11:25:01
	JSON.ЗаписатьСвойство("sumBonusesUsedBase", ДанныеДокумента.СуммаБонусБаза, ЗаписьJSON);			//	LNK 08.11.2019 11:25:01

	JSON.ЗаписатьСвойство("CustPurchaseAmount", РозничныеПродажиСервер.ПолучитьСуммуНакоплений(СсылкиВыборка.Контрагент), ЗаписьJSON);

	ЗаписьJSON.ЗаписатьИмяСвойства("saleItems");	//	ТОВАРЫ начало

		ЗаписьJSON.ЗаписатьНачалоМассива();

		Пока ТоварыВыборка.Следующий() Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

			JSON.ЗаписатьСвойство("rowNum"        , ТоварыВыборка.НомерСтроки, ЗаписьJSON);
			JSON.ЗаписатьСвойство("SKU"           , ТоварыВыборка.IDN, ЗаписьJSON);
			JSON.ЗаписатьСвойство("amount"        , ТоварыВыборка.Количество, ЗаписьJSON);
			JSON.ЗаписатьСвойство("amountunit"    , ТоварыВыборка.КоличествоУпаковок, ЗаписьJSON);
			JSON.ЗаписатьСвойство("coefficient"   , ТоварыВыборка.Коэффициент, ЗаписьJSON);
			JSON.ЗаписатьСвойство("price"         , ТоварыВыборка.Цена, ЗаписьJSON);
			JSON.ЗаписатьСвойство("manualdiscount", ТоварыВыборка.СуммаРучнойСкидки, ЗаписьJSON);
			JSON.ЗаписатьСвойство("PromoPrice"    , ТоварыВыборка.АкционнаяЦена, ЗаписьJSON);

			ЗаписьJSON.ЗаписатьКонецОбъекта();

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();

	ЗаписьJSON.ЗаписатьИмяСвойства("promocodes");	//	КУПОНЫ начало

		ЗаписьJSON.ЗаписатьНачалоМассива();

		Пока КупоныВыборка.Следующий() Цикл

			ЗаписьJSON.ЗаписатьЗначение(КупоныВыборка.СерийныйНомер);

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

//	LNK 11.09.2019 11:26:31
Функция ПодготовитьДанныеОтвета(ДанныеОтвета, УникальныйИдентификатор)

//	... инициализируем некоторые свойство "шоб было"
	ДанныеОтвета.Вставить("АдресТаблицПодарки"		   , "");
	ДанныеОтвета.Вставить("АдресТаблицыСкидкиНаценки"  , "");
	ДанныеОтвета.Вставить("АдресТаблицыПринятыхКупонов", "");
	ДанныеОтвета.Вставить("АдресТаблицыВыданныхКупонов", "");
	ДанныеОтвета.Вставить("АдресСообщенияКассиру"	   , "");

	Если ДанныеОтвета.Свойство("saleItems") И ТипЗнч(ДанныеОтвета.saleItems) = Тип("Массив") Тогда


	КонецЕсли;

	Если ДанныеОтвета.Свойство("presents") И ТипЗнч(ДанныеОтвета.presents) = Тип("Массив") Тогда

		ТаблицаЗначений = Новый ТаблицаЗначений;
		ТаблицаЗначений.Колонки.Добавить("НомерСтроки"    , Новый ОписаниеТипов("Число"));
		ТаблицаЗначений.Колонки.Добавить("СкидкаНаценка"  , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(512)));
		ТаблицаЗначений.Колонки.Добавить("КоличествоВсего", Новый ОписаниеТипов("Число"));
		ТаблицаЗначений.Колонки.Добавить("IDN"            , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
		ТаблицаЗначений.Колонки.Добавить("Количество"     , Новый ОписаниеТипов("Число"));
		ТаблицаЗначений.Колонки.Добавить("Цена"           , Новый ОписаниеТипов("Число"));

		НомерСтроки = 0;

		Для каждого Кампания Из ДанныеОтвета.presents Цикл

			Если Кампания.Свойство("products") И ТипЗнч(Кампания.products) = Тип("Массив") Тогда

				Для каждого Подарок Из Кампания.products Цикл

					НомерСтроки   = НомерСтроки + 1;

					СтрокаТаблицы = ТаблицаЗначений.Добавить();

					СтрокаТаблицы.НомерСтроки     = НомерСтроки;
					СтрокаТаблицы.СкидкаНаценка   = Кампания.campaign;
					СтрокаТаблицы.КоличествоВсего = Кампания.max_amount;
					СтрокаТаблицы.IDN             = Подарок.SKU;
					СтрокаТаблицы.Количество      = Подарок.max_amount;
					СтрокаТаблицы.Цена            = Кампания.present_price;

				КонецЦикла;

			КонецЕсли;

		КонецЦикла;

		Если НЕ ТаблицаЗначений.Количество() = 0 Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаЗначений.НомерСтроки КАК НомерСтроки,
			|	ТаблицаЗначений.СкидкаНаценка КАК СкидкаНаценка,
			|	ТаблицаЗначений.КоличествоВсего КАК КоличествоВсего,
			|	ТаблицаЗначений.IDN КАК IDN,
			|	ТаблицаЗначений.Количество КАК Количество,
			|	ТаблицаЗначений.Цена КАК Цена
			|ПОМЕСТИТЬ Внешняя
			|ИЗ
			|	&ТаблицаЗначений КАК ТаблицаЗначений
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	IDN
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Внешняя.НомерСтроки КАК НомерСтроки,
			|	Внешняя.СкидкаНаценка КАК СкидкаНаценка,
			|	Внешняя.КоличествоВсего КАК КоличествоВсего,
			|	Внешняя.IDN КАК IDN,
			|	Внешняя.Цена КАК Цена,
			|	Внешняя.Количество КАК Количество,
			|	ЕСТЬNULL(ТаблицаСправочник.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
			|	ЕСТЬNULL(ТаблицаСправочник.СтавкаНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)) КАК СтавкаНДС
			|ПОМЕСТИТЬ Источник
			|ИЗ
			|	Внешняя КАК Внешняя
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
			|		ПО Внешняя.IDN = ТаблицаСправочник.IDN
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ Внешняя
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаСкидки.СкидкаНаценка КАК СкидкаНаценка,
			|	ТаблицаСкидки.КоличествоВсего КАК КоличествоУпаковок,
			|	ИСТИНА КАК УчитыватьКакПродажу,
			|	ТаблицаСкидки.Цена КАК Цена
			|ИЗ
			|	Источник КАК ТаблицаСкидки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаПодарки.НомерСтроки КАК НомерСтроки,
			|	ТаблицаПодарки.СкидкаНаценка КАК СкидкаНаценка,
			|	ТаблицаПодарки.Номенклатура КАК Номенклатура,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
			|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
			|	ТаблицаПодарки.Количество КАК КоличествоУпаковок,
			|	ТаблицаПодарки.Количество КАК Количество,
			|	1 КАК Коэффициент,
			|	ТаблицаПодарки.Номенклатура.Код КАК Код,
			|	ТаблицаПодарки.Номенклатура.Артикул КАК Артикул,
			|	ТаблицаПодарки.СтавкаНДС КАК СтавкаНДС,
			|	ИСТИНА КАК ПродажаПодарка,
			|	0 КАК ИндексКартинки
			|ИЗ
			|	Источник КАК ТаблицаПодарки
			|
			|УПОРЯДОЧИТЬ ПО
			|	СкидкаНаценка,
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ Источник"
			);
			Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаЗначений);

			Результаты = Запрос.ВыполнитьПакет();

			Если НЕ Результаты[3].Пустой() Тогда

				ТаблицыПолучения = Новый Структура(
					"ТаблицаСкидкиНаценки, ТаблицаПодарки"
					, Результаты[3].Выгрузить()
					, Результаты[4].Выгрузить()
				);

				ДанныеОтвета.АдресТаблицПодарки = ПоместитьВоВременноеХранилище(ТаблицыПолучения, УникальныйИдентификатор);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ДанныеОтвета.Свойство("applied_promotions") И ТипЗнч(ДанныеОтвета.applied_promotions) = Тип("Массив") Тогда

		ТаблицаСкидкиНаценки = Новый ТаблицаЗначений;
		ТаблицаСкидкиНаценки.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число"));
		ТаблицаСкидкиНаценки.Колонки.Добавить("СкидкаНаценка", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(512)));
		ТаблицаСкидкиНаценки.Колонки.Добавить("Сумма"		 , Новый ОписаниеТипов("Число"));
		ТаблицаСкидкиНаценки.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));

		Для каждого Элемент Из ДанныеОтвета.applied_promotions Цикл

			Если НЕ ПустаяСтрока(Элемент.name) Тогда

				СтрокаТаблицы = ТаблицаСкидкиНаценки.Добавить();
				СтрокаТаблицы.Идентификатор = Элемент.rowNum;
				СтрокаТаблицы.СкидкаНаценка = СокрЛП(Элемент.name);
				СтрокаТаблицы.Сумма         = Элемент.sum;
				СтрокаТаблицы.УникальныйИдентификатор = СокрЛП(Элемент.IDD_campaign);

			КонецЕсли;

		КонецЦикла;

		ДанныеОтвета.АдресТаблицыСкидкиНаценки = ПоместитьВоВременноеХранилище(ТаблицаСкидкиНаценки, УникальныйИдентификатор);

	КонецЕсли;

	Если ДанныеОтвета.Свойство("promocodes") И ТипЗнч(ДанныеОтвета.promocodes) = Тип("Массив") Тогда

		ТаблицаПринятыхКупонов = Новый ТаблицаЗначений;
		ТаблицаПринятыхКупонов.Колонки.Добавить("СерийныйНомер", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(256)));
		ТаблицаПринятыхКупонов.Колонки.Добавить("Принят"	   , Новый ОписаниеТипов("Булево"));

		Для каждого Элемент Из ДанныеОтвета.promocodes Цикл

			Если НЕ ПустаяСтрока(Элемент.numberPromocode) Тогда

				СтрокаТаблицы = ТаблицаПринятыхКупонов.Добавить();
				СтрокаТаблицы.СерийныйНомер = СокрЛП(Элемент.numberPromocode);
				СтрокаТаблицы.Принят        = Элемент.status;

			КонецЕсли;

		КонецЦикла;

		ДанныеОтвета.АдресТаблицыПринятыхКупонов = ПоместитьВоВременноеХранилище(ТаблицаПринятыхКупонов, УникальныйИдентификатор);

	КонецЕсли;

	Если ДанныеОтвета.Свойство("promocodesAccrued") И ТипЗнч(ДанныеОтвета.promocodesAccrued) = Тип("Массив") Тогда

		ТаблицаВыданныхКупонов = Новый ТаблицаЗначений;
		ТаблицаВыданныхКупонов.Колонки.Добавить("СкидочныйКупон", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(2048)));
		ТаблицаВыданныхКупонов.Колонки.Добавить("СерийныйНомер" , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(256)));
		ТаблицаВыданныхКупонов.Колонки.Добавить("Количество"    , Новый ОписаниеТипов("Число"));
		ТаблицаВыданныхКупонов.Колонки.Добавить("Штрихкод"      , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(128)));

		Для каждого Элемент Из ДанныеОтвета.promocodesAccrued Цикл

			Если НЕ (ПустаяСтрока(Элемент.description) И ПустаяСтрока(Элемент.numberCupon) И ПустаяСтрока(Элемент.barCode)) Тогда

				СтрокаТаблицы = ТаблицаВыданныхКупонов.Добавить();
				СтрокаТаблицы.СкидочныйКупон = СокрЛП(Элемент.description);
				СтрокаТаблицы.СерийныйНомер  = СокрЛП(Элемент.numberCupon);
				СтрокаТаблицы.Штрихкод       = СокрЛП(Элемент.barCode);
				СтрокаТаблицы.Количество     = 1;

			КонецЕсли;

		КонецЦикла;

		ДанныеОтвета.АдресТаблицыВыданныхКупонов = ПоместитьВоВременноеХранилище(ТаблицаВыданныхКупонов, УникальныйИдентификатор);

	КонецЕсли;

	Если ДанныеОтвета.Свойство("popUpMessages") И ТипЗнч(ДанныеОтвета.popUpMessages) = Тип("Массив") Тогда

		ДанныеОтвета.АдресСообщенияКассиру = ПоместитьВоВременноеХранилище(ДанныеОтвета.popUpMessages, УникальныйИдентификатор);

	КонецЕсли;

	Возврат ДанныеОтвета;

КонецФункции

#КонецОбласти

//	LNK 25.09.2019 10:52:58
Функция ПолучитьДанныеКупона(НомерКупона, ТекстОшибки = "")	Экспорт

	ДанныеОтвета = Новый Структура("success", Ложь);	//	определение дефолтом

	АдресСервера = УправлениеДоступомСлужебныйПовтИсп.ПолучитьАдресСервераMSDynamics(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);

	Если НЕ ПустаяСтрока(АдресСервера) Тогда

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписьJSON.ЗаписатьНачалоОбъекта();

			JSON.ЗаписатьСвойство("IDBASE", ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторУчетнойСистемы"), ЗаписьJSON);
			JSON.ЗаписатьСвойство("message1C", -1, ЗаписьJSON);

			JSON.ЗаписатьСвойство("numberCupon", НомерКупона, ЗаписьJSON);

		ЗаписьJSON.ЗаписатьКонецОбъекта();

		ТекстЗапроса = ЗаписьJSON.Закрыть();

		Попытка

			Результат = ОбменMicrosoftDynamicsСервер.ВыполнитьЗапросКСерверу("/api/Erp_1c/CouponStatus", ТекстЗапроса, АдресСервера, "POST",, 10);

			Если ТипЗнч(Результат.ДанныеОтвета) = Тип("Структура") Тогда

				Если НЕ ПустаяСтрока(Результат.ДанныеОтвета.error) Тогда

					ТекстОшибки = "Сервер CRM вернул ошибку:" + Символы.ПС + "«" + Результат.ДанныеОтвета.error + "»";

				Иначе

					Если НЕ (Результат.ДанныеОтвета.Свойство("Data") И Результат.ДанныеОтвета.Свойство("success")) Тогда

						ТекстОшибки = "Сервер CRM вернул неожиданные данные.";

					Иначе

						ДанныеОтвета = Результат.ДанныеОтвета;

					КонецЕсли;

				КонецЕсли;

			Иначе

				ТекстОшибки = "Сервер CRM вернул неожиданные данные!" + Символы.ПС +
							  + "(" + СокрЛП(Результат.ДанныеОтвета) + ")";

			КонецЕсли;

		Исключение

			ТекстОшибки = "При обращении к серверу CRM возникла ошибка:" + Символы.ПС + "«" + ОписаниеОшибки() + "»";

		КонецПопытки;

		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда

			ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала() + ".АутентификацияПокупателя"
			, УровеньЖурналаРегистрации.Ошибка
			, Метаданные.Справочники.СерийныеНомера
			, НомерКупона
			,
			, "Данные ответа: " + ТекстОшибки
			+ Символы.ПС + Символы.ПС + "(out)JSON:" + Символы.ПС + ТекстЗапроса
			,, Истина);

		КонецЕсли;

	Иначе

		ТекстОшибки = "CRM: адрес сервера НЕ указан.";

	КонецЕсли;

	Возврат ДанныеОтвета;

КонецФункции

#Область ОбработчикиСобытийРегламента

//	LNK 03.12.2019 11:22:46
Процедура СинхронизацияДанныхMicrosoftDynamics(КодУзла, РежимОтладки, ВестиПротоколВходящий, ВестиПротоколИсходящий) Экспорт

	Если ТипЗнч(КодУзла) = Тип("Строка") Тогда

		КлючиПолитики = ОбменMicrosoftDynamicsПовтИсп.УчетнаяПолитика(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);

		Если КлючиПолитики.РазрешитьОбменИсходящий = Истина Тогда

			Если НЕ ПустаяСтрока(КодУзла) Тогда

				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ТаблицаУзлы.Ссылка КАК Узел
				|ИЗ
				|	ПланОбмена.ОбменMicrosoftDynamics КАК ТаблицаУзлы
				|ГДЕ
				|	ТаблицаУзлы.Код = &КодУзла
				|	И НЕ ТаблицаУзлы.ПометкаУдаления
				|	И НЕ ТаблицаУзлы.ЭтотУзел"
				);
				Запрос.УстановитьПараметр("КодУзла", КодУзла);

				ВыборкаУзлов = Запрос.Выполнить().Выбрать();

				Если ВыборкаУзлов.Следующий() Тогда

					УзелОбъект = ВыборкаУзлов.Узел.ПолучитьОбъект();
					ВыполнитьВыгрузкуИзмененийВУзелMicrosoftDynamics(УзелОбъект, УзелОбъект.ТипРегистрации,, РежимОтладки, ВестиПротоколВходящий, ВестиПротоколИсходящий);

				Иначе

					ВызватьИсключение "MSDynCRM - узел по коду «" + КодУзла + "» НЕ НАЙДЕН!";

				КонецЕсли;

			Иначе

				ВызватьИсключение "MSDynCRM - не указан параметр «КодУзла».";

			КонецЕсли;

		Иначе

			ВызватьИсключение "MSDynCRM - исходящий траффик НЕ разрешён.";

		КонецЕсли;

	Иначе

		ВызватьИсключение "Неожиданный тип параметра! Ожидаемый тип - «Строка»";

	КонецЕсли;

КонецПроцедуры
	
#КонецОбласти

#Область ПодготовкаТаблицВыгрузки

//	LNK 22.02.2019 15:03:54
Функция ПолучитьСтруктуруТаблицыДанных()

	ТаблицаДанных = РегистрыСведений.РегистрацияMicrosoftDynamics.СоздатьНаборЗаписей().ВыгрузитьКолонки("Измерение_1, Измерение_2, Измерение_3, Значение, Уточнение");
	ТаблицаДанных.Колонки.Измерение_1.Имя = "Образец";

	ТаблицаДанных.Колонки.Добавить("Измерение_1"
		, Новый ОписаниеТипов(ТаблицаДанных.Колонки.Образец.ТипЗначения
			, "СправочникСсылка.Контрагенты, СправочникСсылка.ИнформационныеКарты, СправочникСсылка.ИменаЛюдей,
			  |ДокументСсылка.ВыдачаДисконтныхКарт, ДокументСсылка.ЗаменаДисконтныхКарт, ДокументСсылка.ЗапросДоступностиТоваров,
			  |ДокументСсылка.ЧекККМ, ДокументСсылка.РеализацияТоваров, ДокументСсылка.ВозвратТоваровОтПокупателя")
	);

	ТаблицаДанных.Колонки.Удалить("Образец");
	ТаблицаДанных.Колонки.Добавить("УдалениеОбъекта", Новый ОписаниеТипов("Булево"));

	ТаблицаДанных.Индексы.Добавить("Измерение_1, Измерение_2, Измерение_3, Уточнение");

	Возврат ТаблицаДанных;

КонецФункции // ПолучитьСтруктуруТаблицыДанных()

//	LNK 07.08.2019 07:42:52
Функция ПолучитьТаблицуКонтрагентов(ТаблицаКлиентов, ТаблицаУбитых)

	ТаблицаКлиентов.Колонки.Добавить("УдалениеОбъекта", Новый ОписаниеТипов("Булево"));

	ИсключитьИмена = Новый Соответствие;
	ИсключитьИмена.Вставить("Контрагент", Истина);
	ИсключитьИмена.Вставить("УдалениеОбъекта", Истина);

	Для каждого СтрокаУбитого Из ТаблицаУбитых Цикл

	//	На текущий момент "пропускаем" только тип "Контрагенты".
		Если ТипЗнч(СтрокаУбитого.Измерение_1) = Тип("СправочникСсылка.Контрагенты") Тогда

			СтрокаКлиента = ТаблицаКлиентов.Добавить();

			СтрокаКлиента.Контрагент = СтрокаУбитого.Измерение_1;
			СтрокаКлиента.УдалениеОбъекта = Истина;

			УстановитьПустойТипПолямСтроки(СтрокаКлиента, ИсключитьИмена, ТаблицаКлиентов.Колонки);

		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаКлиентов;

КонецФункции

//	LNK 07.08.2019 07:50:20
Процедура УстановитьПустойТипПолямСтроки(СтрокаКлиента, ИсключитьИмена, Колонки)

	ТипыПриведения = Новый Массив;	//	простые типы
	ТипыПриведения.Добавить(Тип("Строка"));
	ТипыПриведения.Добавить(Тип("Число"));
	ТипыПриведения.Добавить(Тип("Булево"));
	ТипыПриведения.Добавить(Тип("Дата"));

	Для каждого Колонка Из Колонки Цикл

		Если ИсключитьИмена.Получить(Колонка.Имя) = Неопределено Тогда

			ТипыДобавить = Новый Массив;
			Ограничение  = ?(Колонка.ТипЗначения.СодержитТип(Тип("Null")), 2, 1);

			Если Колонка.ТипЗначения.Типы().Количество() = Ограничение Тогда

				ТипыДобавить.Добавить(Колонка.ТипЗначения.Типы()[0]);

			Иначе

				Для каждого ТипПриведения Из ТипыПриведения Цикл

					Если Колонка.ТипЗначения.СодержитТип(ТипПриведения) Тогда

						ТипыДобавить.Добавить(ТипПриведения);
						Прервать;

					КонецЕсли;

				КонецЦикла;

			КонецЕсли;

			Если НЕ ТипыДобавить.Количество() = 0 Тогда

				ТипПриведения = Новый ОписаниеТипов(Колонка.ТипЗначения, ТипыДобавить, "Null");
				СтрокаКлиента[Колонка.Имя] = ТипПриведения.ПривестиЗначение();

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//	LNK 21.03.2019 13:16:51
Процедура ПодготовкаУникальныхСтрокТаблицы(ТаблицаДанных, ТаблицаВыгружено, ТипРегистрации)

//	1. Удалим из таблицы данных уже выгруженные строки

	Отборы = Новый Структура;

	Для каждого Колонка Из ТаблицаВыгружено.Колонки Цикл

		Если НЕ Колонка.Имя = "Значение" Тогда

			Отборы.Вставить(Колонка.Имя);

		КонецЕсли;

	КонецЦикла;

	Для каждого СтрокаВыгружено Из ТаблицаВыгружено Цикл

		ЗаполнитьЗначенияСвойств(Отборы, СтрокаВыгружено);

		СтрокиУдалить = ТаблицаДанных.НайтиСтроки(Отборы);

		Для каждого СтрокаТаблицы Из СтрокиУдалить Цикл

			ТаблицаДанных.Удалить(СтрокаТаблицы);

		КонецЦикла;

	КонецЦикла;

//	2. Копируем оставшиеся для выгрузки строки в таблицу уже выгруженных.

	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл

		СтрокаВыгружено = ТаблицаВыгружено.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВыгружено, СтрокаТаблицы);

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область КоллекцияТекстовЗапросов

Функция ПолучитьТекстЗапросаДанныеДействующиеЦены()		//	LNK 22.02.2019 13:25:04

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаДанных.Измерение_1 КАК Справочник.Магазины) КАК Магазин,
	|	ВЫРАЗИТЬ(ТаблицаДанных.Измерение_2 КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Магазин,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведущая.Магазин КАК Магазин,
	|	Ведущая.Номенклатура КАК Номенклатура,
	|	Ведущая.Упаковка КАК Упаковка,
	|	Ведущая.Единица КАК Единица,
	|	Ведущая.Коэффициент КАК Коэффициент,
	|	ЕСТЬNULL(ТаблицаЦены.Цена, 0) КАК Цена,
	|	Ведущая.Номенклатура.IDN КАК IDN,
	|	ЕСТЬNULL(ТаблицаСоответствий.УникальныйИдентификаторПриемника, """") КАК GUID,
	|	Ведущая.Магазин.СкладПродажи.IDN КАК IDNМагазина,
	|	Ведущая.Магазин.НомерМагазина КАК НомерМагазина,
	|	ТаблицаЦены.Акция КАК АкционнаяЦена
	|ИЗ
	|	(ВЫБРАТЬ
	|		Источник.Магазин КАК Магазин,
	|		Источник.Номенклатура КАК Номенклатура,
	|		ТаблицаУпаковки.Ссылка КАК Упаковка,
	|		ТаблицаУпаковки.Наименование КАК Единица,
	|		ТаблицаУпаковки.Коэффициент КАК Коэффициент
	|	ИЗ
	|		Источник КАК Источник
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК ТаблицаУпаковки
	|			ПО Источник.Номенклатура = ТаблицаУпаковки.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних КАК УчетнаяПолитика
	|			ПО Источник.Магазин = УчетнаяПолитика.ИнтернетМагазин
	|	ГДЕ
	|		УчетнаяПолитика.ИнтернетМагазин ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		Источник.Магазин,
	|		ТаблицаСправочник.Ссылка,
	|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка),
	|		""шт."",
	|		1
	|	ИЗ
	|		Источник КАК Источник
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
	|			ПО Источник.Номенклатура = ТаблицаСправочник.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних КАК УчетнаяПолитика
	|			ПО Источник.Магазин = УчетнаяПолитика.ИнтернетМагазин
	|	ГДЕ
	|		УчетнаяПолитика.ИнтернетМагазин ЕСТЬ NULL) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
	|				,
	|				(ОбъектЦенообразования, Номенклатура) В
	|					(ВЫБРАТЬ
	|						Источник.Магазин,
	|						Источник.Номенклатура
	|					ИЗ
	|						Источник)) КАК ТаблицаЦены
	|		ПО Ведущая.Магазин = ТаблицаЦены.ОбъектЦенообразования
	|			И Ведущая.Номенклатура = ТаблицаЦены.Номенклатура
	|			И Ведущая.Упаковка = ТаблицаЦены.Упаковка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовУчетныхСистем КАК ТаблицаСоответствий
	|		ПО (ТаблицаСоответствий.Ссылка ССЫЛКА Справочник.Магазины)
	|			И (ТаблицаСоответствий.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.MSDynCRM))
	|			И Ведущая.Магазин = ТаблицаСоответствий.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(Единица),
	|	МАКСИМУМ(Коэффициент),
	|	МАКСИМУМ(IDN)
	|ПО
	|	Номенклатура,
	|	Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	;
	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаДанныеЦеныНоменклатуры()	//	LNK 03.09.2019 08:40:03

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаДанных.Измерение_1 КАК Справочник.Магазины) КАК Магазин,
	|	ВЫРАЗИТЬ(ТаблицаДанных.Измерение_2 КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Магазин,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведущая.Магазин КАК Магазин,
	|	Ведущая.Номенклатура КАК Номенклатура,
	|	Ведущая.Упаковка КАК Упаковка,
	|	Ведущая.Единица КАК Единица,
	|	Ведущая.Коэффициент КАК Коэффициент,
	|	ЕСТЬNULL(ТаблицаЦены.Цена, 0) КАК Цена,
	|	Ведущая.Номенклатура.IDN КАК IDN,
	|	ЕСТЬNULL(ТаблицаСоответствий.УникальныйИдентификаторПриемника, """") КАК GUID,
	|	Ведущая.Магазин.СкладПродажи.IDN КАК IDNМагазина,
	|	Ведущая.Магазин.НомерМагазина КАК НомерМагазина,
	|	ТаблицаЦены.Акция КАК АкционнаяЦена
	|ИЗ
	|	(ВЫБРАТЬ
	|		Источник.Магазин КАК Магазин,
	|		Источник.Номенклатура КАК Номенклатура,
	|		ТаблицаУпаковки.Ссылка КАК Упаковка,
	|		ТаблицаУпаковки.Наименование КАК Единица,
	|		ТаблицаУпаковки.Коэффициент КАК Коэффициент
	|	ИЗ
	|		Источник КАК Источник
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК ТаблицаУпаковки
	|			ПО Источник.Номенклатура = ТаблицаУпаковки.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних КАК УчетнаяПолитика
	|			ПО Источник.Магазин = УчетнаяПолитика.ИнтернетМагазин
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		Источник.Магазин,
	|		Источник.Номенклатура,
	|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка),
	|		""шт."",
	|		1
	|	ИЗ
	|		Источник КАК Источник
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних КАК УчетнаяПолитика
	|			ПО Источник.Магазин = УчетнаяПолитика.ИнтернетМагазин) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
	|				,
	|				(ОбъектЦенообразования, Номенклатура) В
	|					(ВЫБРАТЬ
	|						Источник.Магазин,
	|						Источник.Номенклатура
	|					ИЗ
	|						Источник)) КАК ТаблицаЦены
	|		ПО Ведущая.Магазин = ТаблицаЦены.ОбъектЦенообразования
	|			И Ведущая.Номенклатура = ТаблицаЦены.Номенклатура
	|			И Ведущая.Упаковка = ТаблицаЦены.Упаковка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовУчетныхСистем КАК ТаблицаСоответствий
	|		ПО (ТаблицаСоответствий.Ссылка ССЫЛКА Справочник.Магазины)
	|			И (ТаблицаСоответствий.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.MSDynCRM))
	|			И Ведущая.Магазин = ТаблицаСоответствий.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(Единица),
	|	МАКСИМУМ(Коэффициент),
	|	МАКСИМУМ(IDN)
	|ПО
	|	Номенклатура,
	|	Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	;
	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаДанныеЦеныНоменклатуры_ОТЛОЖЕННЫЙ()	//	LNK 22.02.2019 13:26:52

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Измерение_1 КАК Магазин,
	|	ТаблицаДанных.Измерение_2 КАК Номенклатура,
	|	ТаблицаДанных.Уточнение КАК ВидЦены
	|ПОМЕСТИТЬ Входящая
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Магазин,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Входящая.Магазин КАК Справочник.Магазины) КАК Магазин,
	|	ВЫРАЗИТЬ(Входящая.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА Входящая.ВидЦены В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|				ТОГДА ТаблицаПравила.ВидЦен
	|			ИНАЧЕ Входящая.ВидЦены
	|		КОНЕЦ КАК Справочник.ВидыЦен) КАК ВидЦены
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	Входящая КАК Входящая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины КАК ТаблицаМагазины
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЦенообразования КАК ТаблицаПравила
	|			ПО ТаблицаМагазины.ПравилоЦенообразования = ТаблицаПравила.Ссылка
	|		ПО Входящая.Магазин = ТаблицаМагазины.Ссылка
	|			И (Входящая.ВидЦены В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Магазин,
	|	Номенклатура,
	|	ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Входящая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведущая.Магазин КАК Магазин,
	|	Ведущая.Номенклатура КАК Номенклатура,
	|	Ведущая.Упаковка КАК Упаковка,
	|	Ведущая.Единица КАК Единица,
	|	Ведущая.Коэффициент КАК Коэффициент,
	|	ЕСТЬNULL(ТаблицаЦены.Цена, 0) КАК Цена,
	|	Ведущая.Номенклатура.IDN КАК IDN,
	|	ЕСТЬNULL(ТаблицаСоответствий.УникальныйИдентификаторПриемника, """") КАК GUID,
	|	Ведущая.Магазин.СкладПродажи.IDN КАК IDNМагазина,
	|	Ведущая.Магазин.НомерМагазина КАК НомерМагазина
	|ИЗ
	|	(ВЫБРАТЬ
	|		Источник.Магазин КАК Магазин,
	|		Источник.ВидЦены КАК ВидЦены,
	|		Источник.Номенклатура КАК Номенклатура,
	|		ТаблицаУпаковки.Ссылка КАК Упаковка,
	|		ТаблицаУпаковки.Наименование КАК Единица,
	|		ТаблицаУпаковки.Коэффициент КАК Коэффициент
	|	ИЗ
	|		Источник КАК Источник
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК ТаблицаУпаковки
	|			ПО Источник.Номенклатура = ТаблицаУпаковки.Ссылка
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		Источник.Магазин,
	|		Источник.ВидЦены,
	|		Источник.Номенклатура,
	|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка),
	|		""шт."",
	|		1
	|	ИЗ
	|		Источник КАК Источник) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ),
	|				(ВидЦены, Номенклатура) В
	|					(ВЫБРАТЬ
	|						Источник.ВидЦены,
	|						Источник.Номенклатура
	|					ИЗ
	|						Источник)) КАК ТаблицаЦены
	|		ПО Ведущая.ВидЦены = ТаблицаЦены.ВидЦены
	|			И Ведущая.Номенклатура = ТаблицаЦены.Номенклатура
	|			И Ведущая.Упаковка = ТаблицаЦены.Упаковка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовУчетныхСистем КАК ТаблицаСоответствий
	|		ПО (ТаблицаСоответствий.Ссылка ССЫЛКА Справочник.Магазины)
	|			И (ТаблицаСоответствий.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.MSDynCRM))
	|			И Ведущая.Магазин = ТаблицаСоответствий.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(Единица),
	|	МАКСИМУМ(Коэффициент),
	|	МАКСИМУМ(IDN)
	|ПО
	|	Номенклатура,
	|	Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	;
	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаДанныеТоварыНаСкладах()		//	LNK 22.02.2019 13:28:28

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаДанных.Измерение_1 КАК Справочник.Магазины) КАК Магазин,
	|	ВЫРАЗИТЬ(ТаблицаДанных.Измерение_2 КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Магазин,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаМагазины.Ссылка КАК Магазин,
	|	ЕСТЬNULL(ТаблицаСоответствий.УникальныйИдентификаторПриемника, """") КАК GUID,
	|	ТаблицаТовары.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ Ведущая
	|ИЗ
	|	Источник КАК Источник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаТовары
	|		ПО Источник.Номенклатура = ТаблицаТовары.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Магазины КАК ТаблицаМагазины
	|		ПО Источник.Магазин = ТаблицаМагазины.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовУчетныхСистем КАК ТаблицаСоответствий
	|		ПО (ТаблицаСоответствий.Ссылка ССЫЛКА Справочник.Магазины)
	|			И (ТаблицаСоответствий.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.MSDynCRM))
	|			И Источник.Магазин = ТаблицаСоответствий.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ведущая.Магазин КАК Магазин,
	|	ТаблицаСправочник.Ссылка КАК Склад
	|ПОМЕСТИТЬ Склады
	|ИЗ
	|	Ведущая КАК Ведущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаСправочник
	|		ПО Ведущая.Магазин = ТаблицаСправочник.Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведущая.Магазин КАК Магазин,
	|	Ведущая.Номенклатура КАК Номенклатура,
	|	1 КАК Коэффициент,
	|	ЕСТЬNULL(Ведущая.Номенклатура.IDN, """") КАК IDN,
	|	Ведущая.GUID КАК GUID,
	|	ЕСТЬNULL(Ведущая.Магазин.СкладПродажи.IDN, """") КАК IDNМагазина,
	|	ЕСТЬNULL(Ведущая.Магазин.НомерМагазина, 0) КАК НомерМагазина,
	|	СУММА(ЕСТЬNULL(ТаблицаОстатки.Количество, 0)) КАК Количество,
	|	СУММА(ЕСТЬNULL(ТаблицаОстатки.КоличествоРезерв, 0)) КАК КоличествоРезерв
	|ИЗ
	|	Ведущая КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Склады.Магазин КАК Магазин,
	|			ТаблицаРегистра.Номенклатура КАК Номенклатура,
	|			ТаблицаРегистра.КоличествоОстаток КАК Количество,
	|			0 КАК КоличествоРезерв
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Остатки(
	|					,
	|					Склад В
	|							(ВЫБРАТЬ
	|								Склады.Склад
	|							ИЗ
	|								Склады)
	|						И Номенклатура В
	|							(ВЫБРАТЬ
	|								Ведущая.Номенклатура
	|							ИЗ
	|								Ведущая)) КАК ТаблицаРегистра
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Склады КАК Склады
	|				ПО ТаблицаРегистра.Склад = Склады.Склад
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаРегистра.Магазин,
	|			ТаблицаРегистра.Номенклатура,
	|			0,
	|			ТаблицаРегистра.КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ЗаказыПокупателей.Остатки(
	|					,
	|					(Магазин, Номенклатура) В
	|						(ВЫБРАТЬ
	|							Ведущая.Магазин,
	|							Ведущая.Номенклатура
	|						ИЗ
	|							Ведущая)) КАК ТаблицаРегистра
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаРегистра.Магазин,
	|			ТаблицаРегистра.Номенклатура,
	|			0,
	|			ТаблицаРегистра.КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ЛистыЖеланий.Остатки(
	|					,
	|					(Магазин, Номенклатура) В
	|						(ВЫБРАТЬ
	|							Ведущая.Магазин,
	|							Ведущая.Номенклатура
	|						ИЗ
	|							Ведущая)) КАК ТаблицаРегистра) КАК ТаблицаОстатки
	|		ПО Ведущая.Магазин = ТаблицаОстатки.Магазин
	|			И Ведущая.Номенклатура = ТаблицаОстатки.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	Ведущая.Магазин,
	|	Ведущая.Номенклатура,
	|	Ведущая.GUID,
	|	ЕСТЬNULL(Ведущая.Магазин.СкладПродажи.IDN, """"),
	|	ЕСТЬNULL(Ведущая.Магазин.НомерМагазина, 0),
	|	ЕСТЬNULL(Ведущая.Номенклатура.IDN, """")
	|ИТОГИ
	|	МАКСИМУМ(Коэффициент),
	|	МАКСИМУМ(IDN)
	|ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Склады"
	;
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаДанныеТоварыНаСкладах()

Функция ПолучитьТекстЗапросаДанныеМагазины()			//	LNK 22.02.2019 13:30:32

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Измерение_1 КАК Ссылка
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМагазины.Магазин.СкладПродажи.IDN КАК IDN,
	|	ТаблицаМагазины.Магазин КАК Магазин,
	|	ТаблицаМагазины.Магазин.Наименование КАК Наименование,
	|	ТаблицаМагазины.Магазин.НомерМагазина КАК НомерМагазина
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаСправочник.Ссылка КАК Магазин
	|	ИЗ
	|		Источник КАК Источник
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Магазины КАК ТаблицаСправочник
	|			ПО Источник.Ссылка = ТаблицаСправочник.Ссылка
	|	ГДЕ
	|		Источник.Ссылка ССЫЛКА Справочник.Магазины
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаСправочник.Магазин
	|	ИЗ
	|		Источник КАК Источник
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаСправочник
	|			ПО Источник.Ссылка = ТаблицаСправочник.Ссылка
	|	ГДЕ
	|		Источник.Ссылка ССЫЛКА Справочник.Склады
	|		И НЕ ТаблицаСправочник.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК ТаблицаМагазины
	|ГДЕ
	|	НЕ ЕСТЬNULL(ТаблицаМагазины.Магазин.СкладПродажи.IDN, """") = """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерМагазина
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	;

	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаДанныеМагазины()

Функция ПолучитьТекстЗапросаДанныеСправочникиДругие()	Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Измерение_1 КАК Ссылка
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК Ссылка,
	|	""Справочник.ИменаЛюдей"" КАК ТипЗначения,
	|	ТаблицаСправочник.Наименование КАК Наименование,
	|	ТаблицаСправочник.НаименованиеЛатиница КАК НаименованиеЛатиница,
	|	ТаблицаСправочник.НаименованиеУкраинское КАК НаименованиеУкраинское,
	|	ТаблицаСправочник.НаименованиеУкраинскоеЛатиница КАК НаименованиеУкраинскоеЛатиница,
	|	ТаблицаСправочник.ОпределяетПол КАК ОпределяетПол,
	|	ВЫБОР
	|		КОГДА ТаблицаСправочник.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Пол
	|ИЗ
	|	Источник КАК Источник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИменаЛюдей КАК ТаблицаСправочник
	|		ПО Источник.Ссылка = ТаблицаСправочник.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	;

	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаДанныеКонтрагенты()			//	LNK 22.02.2019 13:33:13

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Измерение_1 КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаПервичная
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКонтрагенты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	ТаблицаПервичная КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаКонтрагенты
	|		ПО Фильтр.Ссылка = ТаблицаКонтрагенты.Ссылка
	|ГДЕ
	|	Фильтр.Ссылка ССЫЛКА Справочник.Контрагенты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаКонтрагенты.Ссылка
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ТаблицаКарты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПервичная КАК Фильтр
	|		ПО ТаблицаКарты.Ссылка = Фильтр.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаКонтрагенты
	|		ПО ТаблицаКарты.ВладелецКарты = ТаблицаКонтрагенты.Ссылка
	|ГДЕ
	|	Фильтр.Ссылка ССЫЛКА Справочник.ИнформационныеКарты
	|	И ТаблицаКарты.ВладелецКарты ССЫЛКА Справочник.Контрагенты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ВладелецКарты
	|ИЗ
	|	Документ.ВыдачаДисконтныхКарт.КартыПокупателей КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПервичная КАК Фильтр
	|		ПО ТабличнаяЧасть.Ссылка = Фильтр.Ссылка
	|ГДЕ
	|	Фильтр.Ссылка ССЫЛКА Документ.ВыдачаДисконтныхКарт
	|	И ТабличнаяЧасть.ВладелецКарты ССЫЛКА Справочник.Контрагенты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаКонтрагенты.Ссылка
	|ИЗ
	|	Документ.ЗаменаДисконтныхКарт.КартыПокупателей КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПервичная КАК Фильтр
	|		ПО ТабличнаяЧасть.Ссылка = Фильтр.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ТаблицаКарты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаКонтрагенты
	|			ПО ТаблицаКарты.ВладелецКарты = ТаблицаКонтрагенты.Ссылка
	|		ПО ТабличнаяЧасть.КартаИсточник = ТаблицаКарты.Ссылка
	|ГДЕ
	|	Фильтр.Ссылка ССЫЛКА Документ.ЗаменаДисконтныхКарт
	|	И ТаблицаКарты.ВладелецКарты ССЫЛКА Справочник.Контрагенты
	|	И НЕ ТаблицаКарты.ВладелецКарты = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаКонтрагенты.Ссылка
	|ИЗ
	|	Документ.ЗаменаДисконтныхКарт.КартыПокупателей КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПервичная КАК Фильтр
	|		ПО ТабличнаяЧасть.Ссылка = Фильтр.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ТаблицаКарты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаКонтрагенты
	|			ПО ТаблицаКарты.ВладелецКарты = ТаблицаКонтрагенты.Ссылка
	|		ПО ТабличнаяЧасть.КартаПриемник = ТаблицаКарты.Ссылка
	|ГДЕ
	|	Фильтр.Ссылка ССЫЛКА Документ.ЗаменаДисконтныхКарт
	|	И ТаблицаКарты.ВладелецКарты ССЫЛКА Справочник.Контрагенты
	|	И НЕ ТаблицаКарты.ВладелецКарты = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПервичная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ведущая.Ссылка.IDN КАК IDN,
	|	Ведущая.Ссылка КАК Контрагент,
	|	Ведущая.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	|	Ведущая.Ссылка.Наименование КАК Наименование,
	|	Ведущая.Ссылка.ДатаРождения КАК ДатаРождения,
	|	ВЫБОР
	|		КОГДА Ведущая.Ссылка.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|			ТОГДА ""female""
	|		КОГДА Ведущая.Ссылка.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|			ТОГДА ""male""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Пол,
	|	ЕСТЬNULL(КонтактыТелефон.НомерТелефона, """") КАК НомерТелефона,
	|	ЕСТЬNULL(КонтактыТелефонСлужебный.НомерТелефона, """") КАК НомерТелефонаСлужебный,
	|	ЕСТЬNULL(КонтактыEmail.Представление, """") КАК Электропочта,
	|	ЕСТЬNULL(КонтактыEmailСлужебный.Представление, """") КАК ЭлектропочтаСлужебный,
	|	ЕСТЬNULL(КонтактыПочта.Представление, """") КАК АдресПочтовый,
	|	ЕСТЬNULL(ФИО.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(ФИО.Имя, """") КАК Имя,
	|	ЕСТЬNULL(ФИО.Отчество, """") КАК Отчество
	|ИЗ
	|	Источник КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактыТелефон
	|		ПО Ведущая.Ссылка = КонтактыТелефон.Ссылка
	|			И (КонтактыТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактыТелефонСлужебный
	|		ПО Ведущая.Ссылка = КонтактыТелефонСлужебный.Ссылка
	|			И (КонтактыТелефонСлужебный.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагентаСлужебный))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактыEmail
	|		ПО Ведущая.Ссылка = КонтактыEmail.Ссылка
	|			И (КонтактыEmail.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагента))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактыEmailСлужебный
	|		ПО Ведущая.Ссылка = КонтактыEmailСлужебный.Ссылка
	|			И (КонтактыEmailСлужебный.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагентаСлужебный))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактыПочта
	|		ПО Ведущая.Ссылка = КонтактыПочта.Ссылка
	|			И (КонтактыПочта.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИО
	|		ПО Ведущая.Ссылка = ФИО.ФизЛицо
	|ГДЕ
	|	НЕ Ведущая.Ссылка.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Фильтр.Ссылка КАК Контрагент,
	|	ТаблицаКарты.Ссылка КАК ДисконтнаяКарта,
	|	ТаблицаКарты.ПометкаУдаления
	|		ИЛИ ТаблицаКарты.Блокирован КАК ПометкаУдаления,
	|	ТаблицаКарты.ДатаСоздания КАК ДатаСоздания,
	|	ТаблицаКарты.ДатаОткрытия КАК ДатаОткрытия,
	|	ТаблицаКарты.ДатаЗакрытия КАК ДатаЗакрытия,
	|	ТаблицаКарты.КодКарты КАК КодКарты,
	|	ТаблицаКарты.Магазин КАК Магазин
	|ИЗ
	|	Источник КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ТаблицаКарты
	|		ПО Фильтр.Ссылка = ТаблицаКарты.ВладелецКарты
	|ГДЕ
	|	НЕ ТаблицаКарты.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодКарты
	|ИТОГИ
	|	КОЛИЧЕСТВО(ДисконтнаяКарта)
	|ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Фильтр.Ссылка КАК Контрагент,
	|	ТаблицаДети.УникальныйИдентификатор КАК УникальныйИдентификатор,
	|	ТаблицаДети.Имя КАК Имя,
	|	ВЫБОР
	|		КОГДА ТаблицаДети.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|			ТОГДА ""female""
	|		КОГДА ТаблицаДети.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|			ТОГДА ""male""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Пол,
	|	ТаблицаДети.ДатаРождения КАК ДатаРождения,
	|	ТаблицаДети.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Источник КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.Дети КАК ТаблицаДети
	|		ПО Фильтр.Ссылка = ТаблицаДети.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	КОЛИЧЕСТВО(НомерСтроки)
	|ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	;
	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаДанныеЗапросДоступности()	//	LNK 10.04.2019 10:59:11

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаДанных.Измерение_1 КАК Документ.ЗапросДоступностиТоваров) КАК Ссылка
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	0 КАК Статус,
	|	ЕСТЬNULL(ТаблицаМеста.КоличествоМест, 0) КАК КоличествоМест
	|ИЗ
	|	Источник КАК Ведущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров КАК ТаблицаДокумента
	|		ПО Ведущая.Ссылка = ТаблицаДокумента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Ведущая.Ссылка КАК Ссылка,
	|			КОЛИЧЕСТВО(ТаблицаМеста.НомерСтроки) КАК КоличествоМест
	|		ИЗ
	|			Источник КАК Ведущая
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров.Упаковки КАК ТаблицаМеста
	|				ПО Ведущая.Ссылка = ТаблицаМеста.Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Ведущая.Ссылка) КАК ТаблицаМеста
	|		ПО Ведущая.Ссылка = ТаблицаМеста.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Номенклатура.IDN КАК IDN,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.УникальныйИдентификатор КАК УникальныйИдентификатор,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Примечание КАК Примечание
	|ИЗ
	|	Источник КАК Ведущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров.Товары КАК ТаблицаТовары
	|		ПО Ведущая.Ссылка = ТаблицаТовары.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУпаковки.Ссылка КАК Ссылка,
	|	ТаблицаУпаковки.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУпаковки.Ширина КАК Ширина,
	|	ТаблицаУпаковки.Высота КАК Высота,
	|	ТаблицаУпаковки.Глубина КАК Глубина,
	|	ТаблицаУпаковки.Вес КАК Вес
	|ИЗ
	|	Источник КАК Ведущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров.Упаковки КАК ТаблицаУпаковки
	|		ПО Ведущая.Ссылка = ТаблицаУпаковки.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	;

	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаДанныеДокументыПродажи()				//	LNK 23.04.2019 15:16:00

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Измерение_1 КАК Ссылка
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|ГДЕ
	|	(ТаблицаДанных.Измерение_1 ССЫЛКА Документ.РеализацияТоваров
	|			ИЛИ ТаблицаДанных.Измерение_1 ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ИЛИ ТаблицаДанных.Измерение_1 ССЫЛКА Документ.ЧекККМ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка КАК Ссылка,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Продавец КАК Продавец,
	|	ТабличнаяЧасть.Количество КАК Количество,
	|	ТабличнаяЧасть.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТабличнаяЧасть.Упаковка КАК Упаковка,
	|	ТабличнаяЧасть.Сумма КАК Сумма,
	|	ТабличнаяЧасть.СуммаНДС КАК СуммаНДС,
	|	ТабличнаяЧасть.Цена * ВЫБОР
	|		КОГДА НЕ ТаблицаШапка.ЦенаВключаетНДС = ИСТИНА
	|			ТОГДА ВЫБОР
	|					КОГДА ТабличнаяЧасть.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|						ТОГДА 1.2
	|					КОГДА ТабличнаяЧасть.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
	|						ТОГДА 1.07
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЦенаСНДС,
	|	ТабличнаяЧасть.Сумма + ВЫБОР
	|		КОГДА НЕ ТаблицаШапка.ЦенаВключаетНДС = ИСТИНА
	|			ТОГДА ТабличнаяЧасть.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДС,
	|	ТабличнаяЧасть.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ТабличнаяЧасть.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ТабличнаяЧасть.СуммаОкругления КАК СуммаОкругления,
	|	ТабличнаяЧасть.СтавкаНДС КАК СтавкаНДС,
	|	ТабличнаяЧасть.БонусАкцияНачислен КАК БонусАкцияНачислен,
	|	ТабличнаяЧасть.БонусБазаНачислен КАК БонусБазаНачислен,
	|	ТабличнаяЧасть.БонусАкцияСписан КАК БонусАкцияСписан,
	|	ТабличнаяЧасть.БонусБазаСписан КАК БонусБазаСписан,
	|	ТабличнаяЧасть.АкционнаяЦена КАК АкционнаяЦена,
	|	ТабличнаяЧасть.ПродажаПодарка КАК ПродажаПодарка
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Источник КАК Источник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ТаблицаШапка
	|		ПО Источник.Ссылка = ТаблицаШапка.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ТабличнаяЧасть
	|		ПО Источник.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	Источник.Ссылка ССЫЛКА Документ.ЧекККМ
	|	И ТаблицаШапка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.НомерСтроки,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Продавец,
	|	ТабличнаяЧасть.Количество,
	|	ТабличнаяЧасть.КоличествоУпаковок,
	|	ТабличнаяЧасть.Упаковка,
	|	ТабличнаяЧасть.Сумма,
	|	ТабличнаяЧасть.СуммаНДС,
	|	ТабличнаяЧасть.Цена * ВЫБОР
	|		КОГДА НЕ ТаблицаШапка.ЦенаВключаетНДС = ИСТИНА
	|			ТОГДА ВЫБОР
	|					КОГДА ТабличнаяЧасть.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|						ТОГДА 1.2
	|					КОГДА ТабличнаяЧасть.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
	|						ТОГДА 1.07
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ТабличнаяЧасть.Сумма + ВЫБОР
	|		КОГДА НЕ ТаблицаШапка.ЦенаВключаетНДС = ИСТИНА
	|			ТОГДА ТабличнаяЧасть.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТабличнаяЧасть.СуммаАвтоматическойСкидки,
	|	ТабличнаяЧасть.СуммаРучнойСкидки,
	|	0,
	|	ТабличнаяЧасть.СтавкаНДС,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ТабличнаяЧасть.АкционнаяЦена,
	|	ЛОЖЬ
	|ИЗ
	|	Источник КАК Источник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваров КАК ТаблицаШапка
	|		ПО Источник.Ссылка = ТаблицаШапка.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваров.Товары КАК ТабличнаяЧасть
	|		ПО Источник.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	Источник.Ссылка ССЫЛКА Документ.РеализацияТоваров
	|	И ТаблицаШапка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.НомерСтроки,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Продавец,
	|	ТабличнаяЧасть.Количество,
	|	ТабличнаяЧасть.КоличествоУпаковок,
	|	ТабличнаяЧасть.Упаковка,
	|	ТабличнаяЧасть.Сумма,
	|	ТабличнаяЧасть.СуммаНДС,
	|	ТабличнаяЧасть.Цена * ВЫБОР
	|		КОГДА НЕ ТаблицаШапка.ЦенаВключаетНДС = ИСТИНА
	|			ТОГДА ВЫБОР
	|					КОГДА ТабличнаяЧасть.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|						ТОГДА 1.2
	|					КОГДА ТабличнаяЧасть.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
	|						ТОГДА 1.07
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ТабличнаяЧасть.Сумма + ВЫБОР
	|		КОГДА НЕ ТаблицаШапка.ЦенаВключаетНДС = ИСТИНА
	|			ТОГДА ТабличнаяЧасть.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	0,
	|	0,
	|	ТабличнаяЧасть.СтавкаНДС,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Источник КАК Источник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ТаблицаШапка
	|		ПО Источник.Ссылка = ТаблицаШапка.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ТабличнаяЧасть
	|		ПО Источник.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	Источник.Ссылка ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|	И ТаблицаШапка.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведущая.Ссылка КАК Ссылка,
	|	Ведущая.Номер КАК Номер,
	|	Ведущая.Дата КАК Дата,
	|	Ведущая.Проведен КАК Проведен,
	|	Ведущая.ВидДокумента КАК ВидДокумента,
	|	Ведущая.ВидОперации КАК ВидОперации,
	|	Ведущая.Организация КАК Организация,
	|	Ведущая.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	|	Ведущая.КассовыйДень КАК КассовыйДень,
	|	Ведущая.Клиент КАК Клиент,
	|	ЕСТЬNULL(ТаблицаСоответствиеКлиента.УникальныйИдентификаторПриемника, """") КАК IDD_client,
	|	Ведущая.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	Ведущая.КодКарты КАК КодКарты,
	|	ЕСТЬNULL(ТаблицаТелефонКлиента.НомерТелефона, """") КАК НомерТелефона,
	|	Ведущая.НомерЗаказа КАК НомерЗаказа,
	|	Ведущая.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЕСТЬNULL(ТаблицаСоответствиеМагазина.УникальныйИдентификаторПриемника, """") КАК IDD_store,
	|	Ведущая.СуммаСоСкидкой КАК СуммаСоСкидкой,
	|	ЕСТЬNULL(ТаблицаСуммы.СуммаБезСкидки, 0) КАК СуммаБезСкидки,
	|	ЕСТЬNULL(ТаблицаОплаты.Сумма, 0) КАК СуммаОплаты,
	|	Ведущая.БонусАкцияСписан КАК БонусАкцияСписан,
	|	Ведущая.БонусБазаСписан КАК БонусБазаСписан,
	|	Ведущая.ЧекККМПродажа КАК ЧекККМПродажа
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокумента.Ссылка КАК Ссылка,
	|		ТаблицаДокумента.Номер КАК Номер,
	|		ТаблицаДокумента.Дата КАК Дата,
	|		ТаблицаДокумента.Проведен КАК Проведен,
	|		""receipt"" КАК ВидДокумента,
	|		ВЫБОР
	|			КОГДА ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА ""sale""
	|			КОГДА ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				ТОГДА ""return""
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК ВидОперации,
	|		ТаблицаДокумента.Магазин КАК Магазин,
	|		ЕСТЬNULL(ТаблицаКассоваяСмена.КассовыйДень, ЗНАЧЕНИЕ(Документ.КассовыйДень.ПустаяСсылка)) КАК КассовыйДень,
	|		ТаблицаДокумента.Организация КАК Организация,
	|		ЕСТЬNULL(ТаблицаОрганизация.КодПоЕДРПОУ, """") КАК КодПоЕДРПОУ,
	|		ТаблицаДокумента.ВладелецДисконтнойКарты КАК Клиент,
	|		ТаблицаДокумента.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|		ЕСТЬNULL(ТаблицаКарты.КодКарты, """") КАК КодКарты,
	|		ЕСТЬNULL(ТаблицаДокумента.ЗаказПокупателя.НомерЗаказаНаСайте, """") КАК НомерЗаказа,
	|		ТаблицаДокумента.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ТаблицаДокумента.СуммаДокумента КАК СуммаСоСкидкой,
	|		ТаблицаДокумента.БонусАкцияСписан КАК БонусАкцияСписан,
	|		ТаблицаДокумента.БонусБазаСписан КАК БонусБазаСписан,
	|		ТаблицаДокумента.ЧекККМПродажа КАК ЧекККМПродажа
	|	ИЗ
	|		Источник КАК Источник
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ТаблицаДокумента
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ТаблицаОрганизация
	|				ПО ТаблицаДокумента.Организация = ТаблицаОрганизация.Ссылка
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ТаблицаКарты
	|				ПО ТаблицаДокумента.ДисконтнаяКарта = ТаблицаКарты.Ссылка
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ТаблицаОтчетОПродажах
	|					ЛЕВОЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК ТаблицаКассоваяСмена
	|					ПО ТаблицаОтчетОПродажах.КассоваяСмена = ТаблицаКассоваяСмена.Ссылка
	|				ПО ТаблицаДокумента.ОтчетОРозничныхПродажах = ТаблицаОтчетОПродажах.Ссылка
	|			ПО Источник.Ссылка = ТаблицаДокумента.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаДокумента.Ссылка,
	|		ТаблицаДокумента.Номер,
	|		ТаблицаДокумента.Дата,
	|		ТаблицаДокумента.Проведен,
	|		""shipment"",
	|		""sale"",
	|		ТаблицаДокумента.Магазин,
	|		ЕСТЬNULL(ТаблицаУчёта.КассовыйДень, ЗНАЧЕНИЕ(Документ.КассовыйДень.ПустаяСсылка)),
	|		ТаблицаДокумента.Организация,
	|		ЕСТЬNULL(ТаблицаОрганизация.КодПоЕДРПОУ, """"),
	|		ТаблицаДокумента.ВладелецДисконтнойКарты,
	|		ТаблицаДокумента.ДисконтнаяКарта,
	|		ЕСТЬNULL(ТаблицаКарты.КодКарты, """"),
	|		"""",
	|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
	|		ТаблицаДокумента.СуммаДокумента,
	|		0,
	|		0,
	|		НЕОПРЕДЕЛЕНО
	|	ИЗ
	|		Источник КАК Источник
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваров КАК ТаблицаДокумента
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ТаблицаОрганизация
	|				ПО ТаблицаДокумента.Организация = ТаблицаОрганизация.Ссылка
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ТаблицаКарты
	|				ПО ТаблицаДокумента.ДисконтнаяКарта = ТаблицаКарты.Ссылка
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаУчёта
	|				ПО ТаблицаДокумента.Ссылка = ТаблицаУчёта.Объект
	|					И ТаблицаДокумента.Магазин = ТаблицаУчёта.Магазин
	|			ПО Источник.Ссылка = ТаблицаДокумента.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаДокумента.Ссылка,
	|		ТаблицаДокумента.Номер,
	|		ТаблицаДокумента.Дата,
	|		ТаблицаДокумента.Проведен,
	|		""shipment"",
	|		""return"",
	|		ТаблицаДокумента.Магазин,
	|		ЕСТЬNULL(ТаблицаУчёта.КассовыйДень, ЗНАЧЕНИЕ(Документ.КассовыйДень.ПустаяСсылка)),
	|		ТаблицаДокумента.Организация,
	|		ЕСТЬNULL(ТаблицаОрганизация.КодПоЕДРПОУ, """"),
	|		ТаблицаДокумента.ВладелецДисконтнойКарты,
	|		ТаблицаДокумента.ДисконтнаяКарта,
	|		ЕСТЬNULL(ТаблицаКарты.КодКарты, """"),
	|		"""",
	|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
	|		ТаблицаДокумента.СуммаДокумента,
	|		0,
	|		0,
	|		ТаблицаДокумента.ДокументОснование
	|	ИЗ
	|		Источник КАК Источник
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ТаблицаДокумента
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ТаблицаОрганизация
	|				ПО ТаблицаДокумента.Организация = ТаблицаОрганизация.Ссылка
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ТаблицаКарты
	|				ПО ТаблицаДокумента.ДисконтнаяКарта = ТаблицаКарты.Ссылка
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаУчёта
	|				ПО ТаблицаДокумента.Ссылка = ТаблицаУчёта.Объект
	|					И ТаблицаДокумента.Магазин = ТаблицаУчёта.Магазин
	|			ПО Источник.Ссылка = ТаблицаДокумента.Ссылка) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Товары.Ссылка КАК Ссылка,
	|			СУММА(Товары.СуммаСНДС) КАК СуммаСоСкидкой,
	|			СУММА(Товары.СуммаСНДС + Товары.СуммаАвтоматическойСкидки + Товары.СуммаРучнойСкидки) КАК СуммаБезСкидки
	|		ИЗ
	|			Товары КАК Товары
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Товары.Ссылка) КАК ТаблицаСуммы
	|		ПО Ведущая.Ссылка = ТаблицаСуммы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Источник.Ссылка КАК Ссылка,
	|			СУММА(ТаблицаОплата.Сумма) КАК Сумма
	|		ИЗ
	|			Источник КАК Источник
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Оплата КАК ТаблицаОплата
	|				ПО Источник.Ссылка = ТаблицаОплата.Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Источник.Ссылка) КАК ТаблицаОплаты
	|		ПО Ведущая.Ссылка = ТаблицаОплаты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовУчетныхСистем КАК ТаблицаСоответствиеКлиента
	|		ПО (ТаблицаСоответствиеКлиента.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.MSDynCRM))
	|			И (ТаблицаСоответствиеКлиента.Ссылка ССЫЛКА Справочник.Контрагенты)
	|			И Ведущая.Клиент = ТаблицаСоответствиеКлиента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаТелефонКлиента
	|		ПО Ведущая.Клиент = ТаблицаТелефонКлиента.Ссылка
	|			И (ТаблицаТелефонКлиента.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовУчетныхСистем КАК ТаблицаСоответствиеМагазина
	|		ПО Ведущая.Магазин = ТаблицаСоответствиеМагазина.Ссылка
	|			И (ТаблицаСоответствиеМагазина.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.MSDynCRM))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Номенклатура.IDN КАК IDN,
	|	Товары.Продавец КАК Продавец,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЕСТЬNULL(Товары.Упаковка.Наименование, ""шт."") КАК Упаковка,
	|	ЕСТЬNULL(Товары.Упаковка.Коэффициент, 1) КАК Коэффициент,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.ЦенаСНДС КАК ЦенаСНДС,
	|	Товары.СуммаСНДС КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА Товары.СуммаАвтоматическойСкидки >= 0
	|			ТОГДА Товары.СуммаАвтоматическойСкидки
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаАвтоматическойСкидки,
	|	ВЫБОР
	|		КОГДА Товары.СуммаАвтоматическойСкидки < 0
	|			ТОГДА Товары.СуммаАвтоматическойСкидки
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаАвтоматическойНаценки,
	|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	Товары.СуммаОкругления КАК СуммаОкругления,
	|	ВЫБОР
	|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|			ТОГДА ""20%""
	|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
	|			ТОГДА ""7%""
	|		ИНАЧЕ ""0%""
	|	КОНЕЦ КАК СтавкаНДС,
	|	Товары.БонусАкцияНачислен КАК БонусАкцияНачислен,
	|	Товары.БонусБазаНачислен КАК БонусБазаНачислен,
	|	Товары.БонусАкцияСписан КАК БонусАкцияСписан,
	|	Товары.БонусБазаСписан КАК БонусБазаСписан,
	|	Товары.АкционнаяЦена КАК АкционнаяЦена,
	|	Товары.ПродажаПодарка КАК ПродажаПодарка
	|ИЗ
	|	Товары КАК Товары
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ТаблицаШтрихкоды.Штрихкод, """") КАК НомерКупона,
	|	1 КАК Операция,
	|	ЕСТЬNULL(ТаблицаКупоныВыданные.Сумма, 0) КАК Сумма
	|ИЗ
	|	Источник КАК Источник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СерийныеНомераДляАкций КАК ТаблицаКупоныВыданные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК ТаблицаШтрихкоды
	|			ПО ТаблицаКупоныВыданные.СерийныйНомер = ТаблицаШтрихкоды.Владелец
	|		ПО Источник.Ссылка = ТаблицаКупоныВыданные.ЧекККМПродажи
	|ГДЕ
	|	ТаблицаКупоныВыданные.СерийныйНомер ССЫЛКА Справочник.СерийныеНомера
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Источник.Ссылка,
	|	ЕСТЬNULL(ТаблицаШтрихкоды.Штрихкод, """"),
	|	0,
	|	ЕСТЬNULL(ТаблицаКупоныВыданные.Сумма, 0)
	|ИЗ
	|	Источник КАК Источник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СерийныеНомераДляАкций КАК ТаблицаКупоныВыданные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК ТаблицаШтрихкоды
	|			ПО ТаблицаКупоныВыданные.СерийныйНомер = ТаблицаШтрихкоды.Владелец
	|		ПО Источник.Ссылка = ТаблицаКупоныВыданные.ЧекККПИспользования
	|ГДЕ
	|	ТаблицаКупоныВыданные.СерийныйНомер ССЫЛКА Справочник.СерийныеНомера
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Источник.Ссылка,
	|	ТаблицаКупоныВыданные.СерийныйНомер,
	|	1,
	|	ТаблицаКупоныВыданные.НоминалКупона
	|ИЗ
	|	Источник КАК Источник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.ВыдачаСкидочныхКупонов КАК ТаблицаКупоныВыданные
	|		ПО Источник.Ссылка = ТаблицаКупоныВыданные.Ссылка
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ТаблицаКупоныВыданные.СкидочныйКупон) = ТИП(СТРОКА)
	|	И ТИПЗНАЧЕНИЯ(ТаблицаКупоныВыданные.СерийныйНомер) = ТИП(СТРОКА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Операция УБЫВ
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.Ссылка КАК Ссылка,
	|	ТаблицаСкидки.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСкидки.КлючСвязи КАК КлючСвязи,
	|	ТаблицаСкидки.СкидкаНаценка.Наименование КАК СкидкаПредставление,
	|	ТаблицаСкидки.Сумма КАК СуммаСкидки,
	|	ТаблицаСкидки.УникальныйИдентификатор КАК УникальныйИдентификатор
	|ИЗ
	|	Источник КАК Источник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.СкидкиНаценки КАК ТаблицаСкидки
	|		ПО Источник.Ссылка = ТаблицаСкидки.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаОплата.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОплата.ВидОплаты КАК ВидОплаты,
	|	ТаблицаОплата.ВидОплаты.ТипОплаты КАК ТипОплаты,
	|	ЕСТЬNULL(ТаблицаДокумента.УслугаБанка.ТипУслуги, ЗНАЧЕНИЕ(Перечисление.ТипыУслугБанка.ПустаяСсылка)) КАК ТипУслугиБанка,
	|	ТаблицаОплата.Сумма КАК Сумма
	|ИЗ
	|	Источник КАК Источник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ТаблицаДокумента
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Оплата КАК ТаблицаОплата
	|			ПО ТаблицаДокумента.Ссылка = ТаблицаОплата.Ссылка
	|		ПО Источник.Ссылка = ТаблицаДокумента.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.Ссылка КАК Ссылка,
	|	ТаблицаСертификатов.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ТаблицаСертификатов.СерийныйНомер.КодСерийногоНомера, """") КАК НомерСертификата,
	|	ЕСТЬNULL(ТаблицаСертификатов.ПодарочныйСертификат.Номинал, 0) КАК Номинал
	|ИЗ
	|	Источник КАК Источник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.ПогашениеПодарочныхСертификатов КАК ТаблицаСертификатов
	|		ПО Источник.Ссылка = ТаблицаСертификатов.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Товары"
	;

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедуры

//	LNK 24.04.2019 10:52:03
Функция IDC_Строкой(Ссылка)	Экспорт

	Если ЗначениеЗаполнено(Ссылка) Тогда

		Идентификатор = СокрЛП(Ссылка.УникальныйИдентификатор());

	Иначе

		Идентификатор = "";

	КонецЕсли;

	Возврат Идентификатор;

КонецФункции // IDC_Строкой()

//	LNK 25.06.2019 11:08:41
Процедура ЗаписатьТекстЗапросаВФайлJSON(ТекстЗапроса, ИмяТипаРегистрации, Префикс)

	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MSDynCRM\" + ИмяТипаРегистрации, Префикс, ТекстЗапроса);

КонецПроцедуры

//	LNK 30.07.2019 08:03:20
Процедура ПроверитьВыгружаемыйОбъект(Данные)

	Если ТипЗнч(Данные) = Тип("СправочникОбъект.Контрагенты") ИЛИ ТипЗнч(Данные) = Тип("СправочникОбъект.ИнформационныеКарты") Тогда

		Если ТипЗнч(Данные) = Тип("СправочникОбъект.ИнформационныеКарты") Тогда

			Если ЗначениеЗаполнено(Данные.ВладелецКарты) Тогда

			//	для "единообразия" придётся читать объект.. пока так, а потом будет видно.
				КонтрагентОбъект = Данные.ВладелецКарты.ПолучитьОбъект();

			Иначе

				Возврат;	//	нет владельца у карты..

			КонецЕсли;

		Иначе	КонтрагентОбъект = Данные;

		КонецЕсли;

		#Если _ Тогда
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		#КонецЕсли

		Для каждого СтрокаТабличнойЧасти Из КонтрагентОбъект.Дети Цикл

			Если ПустаяСтрока(СтрокаТабличнойЧасти.УникальныйИдентификатор) Тогда

				СтрокаТабличнойЧасти.УникальныйИдентификатор = СокрЛП(Новый УникальныйИдентификатор);

			КонецЕсли;

		КонецЦикла;

		Если КонтрагентОбъект.Модифицированность() Тогда

			КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
			КонтрагентОбъект.ДополнительныеСвойства.Свойство("СлужебнаяЗапись", Истина);
			КонтрагентОбъект.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииMicrosoftDynamics", Истина);

			КонтрагентОбъект.Записать();

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти















