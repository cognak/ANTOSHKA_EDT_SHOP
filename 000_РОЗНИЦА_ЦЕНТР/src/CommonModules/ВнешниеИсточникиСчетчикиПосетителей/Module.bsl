#Область СтарыеСчетчики_HTTP_GMS

//	LNK 09.07.2021 12:57:56
Процедура ЗагрузитьВнешниеДанные(ЭлементНастройки, КоличествоДнейЗагрузкиПараметр = Неопределено, Таймаут = 100, Отладка = Ложь) Экспорт

	Перем ТаблицаСчетчиков, ТаблицаФиксаций;

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ДанныеНастройки = ПолучитьДанныеНастройкиОбмена(ЭлементНастройки, КоличествоДнейЗагрузкиПараметр);

	Если ДанныеНастройки.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.HTTP Тогда

		ДанныеОтвета = ПолучитьДанныеHTTP(ДанныеНастройки, Таймаут);

		Если НЕ ДанныеНастройки.Ошибка Тогда

			ПодготовитьТаблицыДанных(ДанныеОтвета, ДанныеНастройки, ТаблицаСчетчиков, ТаблицаФиксаций);

			Если НЕ ДанныеНастройки.Ошибка Тогда

				ВыборкаПериоды = ПолучитьВыборкуСчетчиков(ДанныеНастройки, ТаблицаСчетчиков, ТаблицаФиксаций);

				Пока ВыборкаПериоды.Следующий() Цикл

					ВыборкаСчетчики = ВыборкаПериоды.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

					Пока ВыборкаСчетчики.Следующий() Цикл

						УстановитьДокументРегистрацииПодсчета(ДанныеНастройки, ВыборкаСчетчики, ВыборкаСчетчики.Выбрать(), Отладка);

					КонецЦикла;

				КонецЦикла;

			КонецЕсли;

		КонецЕсли;

	Иначе

		ДанныеНастройки.Ошибка = Истина;
		ДанныеНастройки.ТекстСообщения = "Импорт «" + ДанныеНастройки.ВидТранспортаСообщенийОбменаПоУмолчанию + "» НЕ реализован.";

	КонецЕсли;

	Если ДанныеНастройки.Ошибка Тогда

		ЖурналСобытий.Регистрация("РЕГИСТРАЦИЯ_ПОСЕТИТЕЛЕЙ", УровеньЖурналаРегистрации.Ошибка
			, Метаданные.Документы.РегистрацияПодсчетаПосетителей
			,
			,
			, ДанныеНастройки.ТекстСообщения
			,
			, Истина
			, Истина
		);

		ВызватьИсключение ДанныеНастройки.ТекстСообщения;

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьВыборкуСчетчиков(ДанныеНастройки, ТаблицаСчетчиков, ТаблицаФиксаций)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.ИМЕИ КАК ИМЕИ,
	|	Таблица.ТехническийКод КАК ТехническийКод
	|ПОМЕСТИТЬ ВходСчетчики
	|ИЗ
	|	&ТаблицаСчетчиков КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИМЕИ,
	|	ТехническийКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.КлючСвязи КАК КлючСвязи,
	|	Таблица.ДатаДень КАК ДатаДень,
	|	Таблица.ДатаВремя КАК ДатаВремя,
	|	Таблица.КоличествоВходящих КАК КоличествоВходящих,
	|	Таблица.КоличествоВыходящих КАК КоличествоВыходящих
	|ПОМЕСТИТЬ ВходФиксации
	|ИЗ
	|	&ТаблицаФиксаций КАК Таблица
	|ГДЕ
	|	Таблица.ДатаДень >= &ДатаНижняя
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВходСчетчики.НомерСтроки КАК НомерСтроки,
	|	ВходСчетчики.ИМЕИ КАК ИМЕИ,
	|	ВходСчетчики.ТехническийКод КАК ТехническийКод,
	|	ТаблицаСправочник.Ссылка КАК СчетчикПодсчетаПосетителей,
	|	ТаблицаСправочник.Магазин КАК Магазин
	|ПОМЕСТИТЬ ДанныеСправочников
	|ИЗ
	|	Справочник.СчетчикиПодсчетаПосетителей КАК ТаблицаСправочник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВходСчетчики КАК ВходСчетчики
	|		ПО ТаблицаСправочник.ТехническийКод = ВходСчетчики.ТехническийКод
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	СчетчикПодсчетаПосетителей,
	|	Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВходСчетчики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведущая.НомерСтроки КАК НомерСтроки,
	|	Ведущая.СчетчикПодсчетаПосетителей КАК СчетчикПодсчетаПосетителей,
	|	Ведущая.Магазин КАК Магазин,
	|	ВходФиксации.ДатаДень КАК ДатаДень,
	|	ВходФиксации.ДатаВремя КАК ДатаВремя,
	|	ВходФиксации.КоличествоВходящих КАК КоличествоВходящих,
	|	ВходФиксации.КоличествоВыходящих КАК КоличествоВыходящих
	|ПОМЕСТИТЬ ДанныеПлоские
	|ИЗ
	|	ДанныеСправочников КАК Ведущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВходФиксации КАК ВходФиксации
	|		ПО Ведущая.НомерСтроки = ВходФиксации.КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВходФиксации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеСправочников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФильтрРегистраций.НомерСтроки КАК НомерСтроки,
	|	ФильтрРегистраций.СчетчикПодсчетаПосетителей КАК СчетчикПодсчетаПосетителей,
	|	ФильтрРегистраций.Магазин КАК Магазин,
	|	ФильтрРегистраций.ДатаДень КАК ДатаДень,
	|	ФильтрРегистраций.ДатаДокумента КАК ДатаДокумента,
	|	ТаблицаДокументы.Ссылка КАК РегистрацияПодсчетаПосетителей
	|ПОМЕСТИТЬ ДанныеШапка
	|ИЗ
	|	(ВЫБРАТЬ
	|		Ведущая.НомерСтроки КАК НомерСтроки,
	|		Ведущая.СчетчикПодсчетаПосетителей КАК СчетчикПодсчетаПосетителей,
	|		Ведущая.Магазин КАК Магазин,
	|		Ведущая.ДатаДень КАК ДатаДень,
	|		МИНИМУМ(Фильтр.ДатаВремя) КАК ДатаДокумента
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДанныеПлоские.НомерСтроки КАК НомерСтроки,
	|			ДанныеПлоские.СчетчикПодсчетаПосетителей КАК СчетчикПодсчетаПосетителей,
	|			ДанныеПлоские.Магазин КАК Магазин,
	|			ДанныеПлоские.ДатаДень КАК ДатаДень
	|		ИЗ
	|			ДанныеПлоские КАК ДанныеПлоские) КАК Ведущая
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПлоские КАК Фильтр
	|			ПО Ведущая.НомерСтроки = Фильтр.НомерСтроки
	|				И Ведущая.СчетчикПодсчетаПосетителей = Фильтр.СчетчикПодсчетаПосетителей
	|				И Ведущая.Магазин = Фильтр.Магазин
	|				И Ведущая.ДатаДень = Фильтр.ДатаДень
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Ведущая.НомерСтроки,
	|		Ведущая.СчетчикПодсчетаПосетителей,
	|		Ведущая.Магазин,
	|		Ведущая.ДатаДень) КАК ФильтрРегистраций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияПодсчетаПосетителей КАК ТаблицаДокументы
	|		ПО (ФильтрРегистраций.ДатаДень = НАЧАЛОПЕРИОДА(ТаблицаДокументы.Дата, ДЕНЬ))
	|			И ФильтрРегистраций.СчетчикПодсчетаПосетителей = ТаблицаДокументы.СчетчикПодсчетаПосетителей
	|			И ФильтрРегистраций.Магазин = ТаблицаДокументы.Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведущая.Магазин КАК Магазин,
	|	Ведущая.ДатаДокумента КАК ДатаДокумента,
	|	Ведущая.СчетчикПодсчетаПосетителей КАК СчетчикПодсчетаПосетителей,
	|	Ведущая.РегистрацияПодсчетаПосетителей КАК РегистрацияПодсчетаПосетителей,
	|	ДанныеПлоские.ДатаВремя КАК ДатаВремя,
	|	ДанныеПлоские.КоличествоВходящих КАК КоличествоВходящих,
	|	ДанныеПлоские.КоличествоВыходящих КАК КоличествоВыходящих
	|ИЗ
	|	ДанныеШапка КАК Ведущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПлоские КАК ДанныеПлоские
	|		ПО Ведущая.НомерСтроки = ДанныеПлоские.НомерСтроки
	|			И Ведущая.Магазин = ДанныеПлоские.Магазин
	|			И Ведущая.ДатаДень = ДанныеПлоские.ДатаДень
	|			И Ведущая.СчетчикПодсчетаПосетителей = ДанныеПлоские.СчетчикПодсчетаПосетителей
	|
	|УПОРЯДОЧИТЬ ПО
	|	Магазин,
	|	ДатаВремя
	|ИТОГИ
	|	МИНИМУМ(Магазин),
	|	МИНИМУМ(ДатаДокумента),
	|	МИНИМУМ(РегистрацияПодсчетаПосетителей)
	|ПО
	|	НАЧАЛОПЕРИОДА(Ведущая.ДатаДокумента, ДЕНЬ) КАК Период,
	|	СчетчикПодсчетаПосетителей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеПлоские
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеШапка"
	);
	Запрос.УстановитьПараметр("ТаблицаСчетчиков", ТаблицаСчетчиков);
	Запрос.УстановитьПараметр("ТаблицаФиксаций" , ТаблицаФиксаций);
	Запрос.УстановитьПараметр("ДатаНижняя"		, ДанныеНастройки.ДатаНижняя);
	
	РезультатЗапроса = Запрос.Выполнить();	//	для упрощения отладки

	Возврат РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

КонецФункции

Процедура ПодготовитьТаблицыДанных(ДанныеОтвета, ДанныеНастройки, ТаблицаСчетчиков, ТаблицаФиксаций)

	ТаблицаСчетчиков = Новый ТаблицаЗначений;
	ТаблицаСчетчиков.Колонки.Добавить("НомерСтроки"		, Новый ОписаниеТипов("Число"));
	ТаблицаСчетчиков.Колонки.Добавить("ИМЕИ"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(15)));
	ТаблицаСчетчиков.Колонки.Добавить("ТехническийКод"	, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));

	ТаблицаФиксаций = Новый ТаблицаЗначений;
	ТаблицаФиксаций.Колонки.Добавить("НомерСтроки"	, Новый ОписаниеТипов("Число"));
	ТаблицаФиксаций.Колонки.Добавить("КлючСвязи"	, Новый ОписаниеТипов("Число"));	//	связь по "НомерСтроки" в "ТаблицаСчетчиков"
	ТаблицаФиксаций.Колонки.Добавить("ДатаДень"		, Новый ОписаниеТипов("Дата"));
	ТаблицаФиксаций.Колонки.Добавить("ДатаВремя"	, Новый ОписаниеТипов("Дата"));
	ТаблицаФиксаций.Колонки.Добавить("Смещение"		, Новый ОписаниеТипов("Булево"));	//	для упрощения отладки и контроля
	ТаблицаФиксаций.Колонки.Добавить("СчетчикПодсчетаПосетителей", Новый ОписаниеТипов("СправочникСсылка.СчетчикиПодсчетаПосетителей"));	//	для упрощения отладки и контроля
	ТаблицаФиксаций.Колонки.Добавить("КоличествоВходящих"	, Новый ОписаниеТипов("Число"));
	ТаблицаФиксаций.Колонки.Добавить("КоличествоВыходящих"	, Новый ОписаниеТипов("Число"));
//	для вычисления времени начала работы магазина.
	ТаблицаФиксаций.Колонки.Добавить("ИМЕИ"			 , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(15)));
	ТаблицаФиксаций.Колонки.Добавить("ТехническийКод", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));

	Для каждого СтрокаОтвета Из ДанныеОтвета Цикл

		СтрокаСчетчика = ТаблицаСчетчиков.Добавить();
		СтрокаСчетчика.НомерСтроки		= ТаблицаСчетчиков.Количество();
		СтрокаСчетчика.ТехническийКод	= Формат(СтрокаОтвета.ID, "ЧДЦ=; ЧН=0; ЧГ=");
		СтрокаСчетчика.ИМЕИ				= СтрокаОтвета.KEY;

		Для каждого СтрокаЭлемента Из СтрокаОтвета.Items Цикл

			СтрокаФиксации = ТаблицаФиксаций.Добавить();
			СтрокаФиксации.НомерСтроки	= ТаблицаФиксаций.Количество();
			СтрокаФиксации.КлючСвязи	= СтрокаСчетчика.НомерСтроки;
			СтрокаФиксации.ДатаДень		= НачалоДня(СтрокаЭлемента.DTime);
			СтрокаФиксации.ДатаВремя	= СтрокаЭлемента.DTime;
			СтрокаФиксации.КоличествоВходящих	= СтрокаЭлемента.Income;
			СтрокаФиксации.КоличествоВыходящих	= СтрокаЭлемента.Outcome;

			СтрокаФиксации.ИМЕИ				= СтрокаСчетчика.ИМЕИ;
			СтрокаФиксации.ТехническийКод	= СтрокаСчетчика.ТехническийКод;

		КонецЦикла;

	КонецЦикла;

//	Отработаем разбивку по дням в "ТаблицаФиксаций" в зависимости времени "НачалоКассовогоДня" соответствующего
//	документа "КассовыйДень"

	ТаблицаДней = ТаблицаФиксаций.Скопировать();
	ТаблицаДней.Свернуть("КлючСвязи, ДатаДень, ИМЕИ, ТехническийКод");

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.КлючСвязи КАК КлючСвязи,
	|	Таблица.ДатаДень КАК ДатаДень,
	|	Таблица.ИМЕИ КАК ИМЕИ,
	|	Таблица.ТехническийКод КАК ТехническийКод
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаДней КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИМЕИ,
	|	ТехническийКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДней.КлючСвязи КАК КлючСвязи,
	|	ТаблицаДней.ДатаДень КАК ДатаДень,
	|	ТаблицаДней.СчетчикПодсчетаПосетителей КАК СчетчикПодсчетаПосетителей,
	|	ТаблицаДней.Магазин КАК Магазин,
	|	ЕСТЬNULL(ТаблицаДокументы.НачалоКассовогоДня, ДОБАВИТЬКДАТЕ(ТаблицаДней.ДатаДень, ЧАС, 8)) КАК НачалоКассовогоДня,
	|	ТаблицаДокументы.Ссылка КАК КассовыйДень
	|ИЗ
	|	(ВЫБРАТЬ
	|		Источник.КлючСвязи КАК КлючСвязи,
	|		Источник.ДатаДень КАК ДатаДень,
	|		ТаблицаСчетчики.Ссылка КАК СчетчикПодсчетаПосетителей,
	|		ТаблицаСчетчики.Магазин КАК Магазин
	|	ИЗ
	|		Источник КАК Источник
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СчетчикиПодсчетаПосетителей КАК ТаблицаСчетчики
	|			ПО Источник.ТехническийКод = ТаблицаСчетчики.ТехническийКод) КАК ТаблицаДней
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КассовыйДень КАК ТаблицаДокументы
	|		ПО ТаблицаДней.Магазин = ТаблицаДокументы.Магазин
	|			И (ТаблицаДней.ДатаДень = НАЧАЛОПЕРИОДА(ТаблицаДокументы.НачалоКассовогоДня, ДЕНЬ))
	|			И (ТаблицаДокументы.Проведен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДень,
	|	СчетчикПодсчетаПосетителей,
	|	НачалоКассовогоДня
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(Источник.ДатаДень) КАК ДатаНижняя,
	|	МАКСИМУМ(Источник.ДатаДень) КАК ДатаВерхняя
	|ИЗ
	|	Источник КАК Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	);
	Запрос.УстановитьПараметр("ТаблицаДней", ТаблицаДней);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();

	ВыборкаГраницы = РезультатЗапроса[2].Выбрать();
	ВыборкаГраницы.Следующий();

	ДанныеНастройки.ДатаНижняя  = ВыборкаГраницы.ДатаНижняя;
	ДанныеНастройки.ДатаВерхняя = ВыборкаГраницы.ДатаВерхняя;

	Если НЕ РезультатЗапроса[1].Пустой() Тогда

		ВыборкаДни = РезультатЗапроса[1].Выбрать();

		Пока ВыборкаДни.Следующий() Цикл

		//	При определении начала дня исходим из того, что люди приходят на работу, кофе там, туалет.. потрепаться.
		//	Поэтому от начала дня смело отнимаем.. ну, 57 минут.
		//	Но только в том случае, если начало дня позже 6 утра.. ведь есть круглосуточные магазины,
		//	которые открывают кассовый день через минуту после полуночи.

			НачалоКассовогоДня = ВыборкаДни.НачалоКассовогоДня;

			Если (ВыборкаДни.НачалоКассовогоДня - НачалоДня(ВыборкаДни.НачалоКассовогоДня)) > (3600 * 6)
				И ЗначениеЗаполнено(ВыборкаДни.КассовыйДень)	Тогда

				НачалоКассовогоДня = НачалоКассовогоДня - 60 * 57;	// например, не в 8:15, а в 7:18 !!

			КонецЕсли;

			СтрокиФиксации = ТаблицаФиксаций.НайтиСтроки(
				Новый Структура(
					"КлючСвязи, ДатаДень"
					, ВыборкаДни.КлючСвязи, ВыборкаДни.ДатаДень
				)
			);

			Для каждого СтрокаФиксации Из СтрокиФиксации Цикл

				СтрокаФиксации.СчетчикПодсчетаПосетителей = ВыборкаДни.СчетчикПодсчетаПосетителей;

				Если СтрокаФиксации.ДатаВремя < НачалоКассовогоДня Тогда

				//	тогда относим к предыдущему дню.
					СтрокаФиксации.ДатаДень = СтрокаФиксации.ДатаДень - 86400;
					СтрокаФиксации.Смещение = Истина;	//	для упрощения отладки и контроля

				КонецЕсли;

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьДанныеHTTP(ДанныеНастройки, Таймаут)

	Перем ДанныеОтвета;

	HTTP = Новый HTTPСоединение(СокрЛП(ДанныеНастройки.HTTP_Adress),,,,, Таймаут);

	Попытка

		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");

		ИмяПроцедуры = "/api/data/" + ДанныеНастройки.HTTP_OrgKey + "/" + ДанныеНастройки.КоличествоДнейЗагрузкиСчётчиковПосетителей;

		HTTPЗапрос = Новый HTTPЗапрос(ИмяПроцедуры, Заголовки);

		HTTPОтвет	= HTTP.Получить(HTTPЗапрос);
		ТекстОтвета	= HTTPОтвет.ПолучитьТелоКакСтроку();

		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
		ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON,, "DTime", ФорматДатыJSON.ISO);

		Если НЕ ТипЗнч(ДанныеОтвета) = Тип("Массив") Тогда

			ВызватьИсключение "Получены данные неизвестного типа.";

		КонецЕсли;

	Исключение

		ДанныеНастройки.Ошибка = Истина;
		ДанныеНастройки.ТекстСообщения = ОписаниеОшибки();

	КонецПопытки;

	Возврат ДанныеОтвета;

КонецФункции

Процедура УстановитьДокументРегистрацииПодсчета(ДанныеНастройки, АтрибутыСчетчика, ВыборкаФиксация, Отладка)

	Если НЕ ОбщегоНазначенияКлиентСервер.СсылкаПустая(АтрибутыСчетчика.РегистрацияПодсчетаПосетителей) Тогда

		ДокументОбъект = АтрибутыСчетчика.РегистрацияПодсчетаПосетителей.ПолучитьОбъект();

	Иначе

		ДокументОбъект = Документы.РегистрацияПодсчетаПосетителей.СоздатьДокумент();
		ДокументОбъект.Дата		= АтрибутыСчетчика.ДатаДокумента;
		ДокументОбъект.Магазин	= АтрибутыСчетчика.Магазин;
		ДокументОбъект.СчетчикПодсчетаПосетителей = АтрибутыСчетчика.СчетчикПодсчетаПосетителей;
		ДокументОбъект.Ответственный = Справочники.Пользователи.АдминистраторАвтоматов;

		ДокументОбъект.ДополнительныеСвойства.Вставить("ИспользоватьНомерМагазинаКакПрефикс", Истина);
		ДокументОбъект.УстановитьНовыйНомер();

	КонецЕсли;

	ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	ДокументОбъект.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);
	ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);

	ДокументОбъект.Комментарий = "Заполнено [" + ТекущаяДата() + "]";

	ДокументОбъект.ПометкаУдаления = Ложь;
	ДокументОбъект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	ДокументОбъект.ОбменДанными.Получатели.Очистить();
	ОбменДаннымиСервер.УстановитьПолучателейМагазина(ДокументОбъект.ОбменДанными.Получатели, ДокументОбъект.Магазин);

	РазмерКонтрольный = ДокументОбъект.ДанныеПодсчета.Количество();
	ДокументОбъект.ДанныеПодсчета.Очистить();

	Пока ВыборкаФиксация.Следующий() Цикл

		СтрокаТабличнойЧасти = ДокументОбъект.ДанныеПодсчета.Добавить();
		СтрокаТабличнойЧасти.ВремяРегистрации	 = ВыборкаФиксация.ДатаВремя;
		СтрокаТабличнойЧасти.КоличествоВходящих	 = ВыборкаФиксация.КоличествоВходящих;
		СтрокаТабличнойЧасти.КоличествоВыходящих = ВыборкаФиксация.КоличествоВыходящих;

	КонецЦикла;

	Если НЕ Отладка = Истина Тогда

		Попытка
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);

			СписокУзлов = ОбменДаннымиПовтИсп.ПолучитьСоответствиеУзловМагазинуПоМагазину(Ложь).Получить(ДокументОбъект.Магазин);

			Если ТипЗнч(СписокУзлов) = Тип("Массив") Тогда

				ПланыОбмена.ЗарегистрироватьИзменения(СписокУзлов, ДокументОбъект.Движения.Посетители);

			КонецЕсли;

		Исключение

			ТекстОшибки = "[" + СокрЛП(ДокументОбъект) + "]: " + ОписаниеОшибки();

			ДанныеНастройки.Ошибка = Истина;
			ДанныеНастройки.ТекстСообщения = ДанныеНастройки.ТекстСообщения + ?(ПустаяСтрока(ДанныеНастройки.ТекстСообщения), "", Символы.ПС)
				+ ТекстОшибки;

			ЗаписьЖурналаРегистрации("РЕГИСТРАЦИЯ_ПОСЕТИТЕЛЕЙ", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.РегистрацияПодсчетаПосетителей
				, ДокументОбъект.Ссылка
				, ТекстОшибки
			);

		КонецПопытки;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

#Область ПоддержкаМеханизмаНовыхСчетчиковSQL

//	LNK 06.01.2020 09:40:47
Процедура ПолучитьДанныеСчетчиковПосетителей(Знач ДатаОкончания = Неопределено, КоличествоДней = 10)	Экспорт

	Если ДатаОкончания = Неопределено Тогда

		ДатаОкончания = ТекущаяДата();

	КонецЕсли;

	ДатаОкончания = КонецДня(ДатаОкончания) + 1;	//	начало СЛЕДУЮЩЕГО дня!
	ДатаНачала    = НачалоДня(ДатаОкончания - 1) - 86400 * КоличествоДней;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	ТекстЗапроса = ВнешниеИсточникиПовтИсп.ПолучитьТекстЗапроса("ДанныеСчетчиковПосетителей", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#DSTART#"   , "'" + Формат(ДатаНачала   , "ДФ=yyyy-MM-dd") + "'");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#DSTOP#"    , "'" + Формат(ДатаОкончания, "ДФ=yyyy-MM-dd") + "'");

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаВнешняя.ДатаВремя КАК ДатаВремя,
	|	ТаблицаВнешняя.КоличествоВошло КАК КоличествоВошло,
	|	ТаблицаВнешняя.КоличествоВышло КАК КоличествоВышло,
	|	ТаблицаВнешняя.ТехническийКод КАК ТехническийКод
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаВнешняя КАК ТаблицаВнешняя
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТехническийКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Источник.ДатаВремя, ДЕНЬ) КАК Период,
	|	ТаблицаСчетчики.Магазин КАК Магазин,
	|	Источник.ДатаВремя КАК ДатаДокумента,
	|	ТаблицаСчетчики.Ссылка КАК СчетчикПодсчетаПосетителей,
	|	Источник.ДатаВремя КАК ВремяРегистрации,
	|	Источник.КоличествоВошло КАК КоличествоВходящих,
	|	Источник.КоличествоВышло КАК КоличествоВыходящих,
	|	Источник.ТехническийКод КАК ТехническийКод
	|ИЗ
	|	Источник КАК Источник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СчетчикиПодсчетаПосетителей КАК ТаблицаСчетчики
	|		ПО Источник.ТехническийКод = ТаблицаСчетчики.ТехническийКод
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	СчетчикПодсчетаПосетителей,
	|	ВремяРегистрации
	|ИТОГИ
	|	МАКСИМУМ(Магазин),
	|	МИНИМУМ(ДатаДокумента)
	|ПО
	|	Период,
	|	СчетчикПодсчетаПосетителей"
	);
	Запрос.УстановитьПараметр("ТаблицаВнешняя", ВнешниеИсточники.ПолучитьДанныеCountersMotion(ТекстЗапроса, 1000));

	Результат = Запрос.Выполнить();

	ПериодВыборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ПериодВыборка.Следующий() Цикл

		СчетчикВыборка = ПериодВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока СчетчикВыборка.Следующий() Цикл

			ВыполнитьРегистрациюПолученныхДанных(СчетчикВыборка);

		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

//	LNK 06.01.2020 11:18:55
Процедура ВыполнитьРегистрациюПолученныхДанных(СчетчикВыборка)

	Перем ПроведениеВыполнить;

	АктивнаТранзакция = ТранзакцияАктивна();	//	запоминаем состояние "внешней" транзакции

	Попытка

		ДокументОбъект = ПолучитьОбъектДокументаПодсчета(СчетчикВыборка, ПроведениеВыполнить);
		#Если _ Тогда
		ДокументОбъект = Документы.РегистрацияПодсчетаПосетителей.СоздатьДокумент();
		#КонецЕсли

		ДанныеПодсчетаВыборка = СчетчикВыборка.Выбрать();

		Пока ДанныеПодсчетаВыборка.Следующий() Цикл

			Время = Дата(1, 1, 1
				, Час(ДанныеПодсчетаВыборка.ВремяРегистрации)
				, Минута(ДанныеПодсчетаВыборка.ВремяРегистрации)
				, Секунда(ДанныеПодсчетаВыборка.ВремяРегистрации)
			);
			СтрокаТабличнойЧасти = ДокументОбъект.ДанныеПодсчета.Найти(Время, "ВремяРегистрации");

			Если СтрокаТабличнойЧасти = Неопределено Тогда

				СтрокаТабличнойЧасти = ДокументОбъект.ДанныеПодсчета.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеПодсчетаВыборка);

			Иначе

				Если НЕ(СтрокаТабличнойЧасти.КоличествоВходящих = ДанныеПодсчетаВыборка.КоличествоВходящих
					И	СтрокаТабличнойЧасти.КоличествоВыходящих = ДанныеПодсчетаВыборка.КоличествоВыходящих)  Тогда

					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеПодсчетаВыборка);

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		Если ДокументОбъект.Модифицированность() ИЛИ ПроведениеВыполнить = Истина Тогда

		//	"ТранзакцияАктивна()" говорит о том, что документ нуждается в проведении.. что-то с ним было не в порядке.
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);

			СписокУзлов = ОбменДаннымиПовтИсп.ПолучитьСоответствиеУзловМагазинуПоМагазину(Ложь).Получить(ДокументОбъект.Магазин);

			Если ТипЗнч(СписокУзлов) = Тип("Массив") Тогда

				ПланыОбмена.ЗарегистрироватьИзменения(СписокУзлов, ДокументОбъект.Движения.Посетители);

			КонецЕсли;

		КонецЕсли;

		Если НЕ АктивнаТранзакция И ТранзакцияАктивна() Тогда

		//	не было "внешней" транзации, её активировали в этой процедуре.
			ЗафиксироватьТранзакцию();

		КонецЕсли;

	Исключение

		Если НЕ АктивнаТранзакция И ТранзакцияАктивна() Тогда

		//	не было "внешней" транзации, её активировали в этой процедуре.
			ОтменитьТранзакцию();

		КонецЕсли;

		ТекстОшибки = ОписаниеОшибки();

		ЖурналСобытий.Регистрация("ПодсчетПосетителей_CM.Загрузка"
		, УровеньЖурналаРегистрации.Ошибка
		, Метаданные.Документы.РегистрацияПодсчетаПосетителей
		,
		,
		, ТекстОшибки
		,, Ложь);

	КонецПопытки;

КонецПроцедуры

//	LNK 06.01.2020 10:51:33
Функция ПолучитьОбъектДокументаПодсчета(СчетчикВыборка, ПроведениеВыполнить)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегистрацияПодсчетаПосетителей КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.СчетчикПодсчетаПосетителей = &СчетчикПодсчетаПосетителей
	|	И ТаблицаДокумента.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)"
	);
	Запрос.УстановитьПараметр("Период", СчетчикВыборка.Период);
	Запрос.УстановитьПараметр("СчетчикПодсчетаПосетителей", СчетчикВыборка.СчетчикПодсчетаПосетителей);

	ДокументыВыборка = Запрос.Выполнить().Выбрать();

	Если ДокументыВыборка.Следующий() Тогда

		ДокументОбъект = ДокументыВыборка.Ссылка.ПолучитьОбъект();

	Иначе

		ДокументОбъект = Документы.РегистрацияПодсчетаПосетителей.СоздатьДокумент();

		ДокументОбъект.Дата    = СчетчикВыборка.ДатаДокумента;
		ДокументОбъект.Магазин = СчетчикВыборка.Магазин;
		ДокументОбъект.СчетчикПодсчетаПосетителей = СчетчикВыборка.СчетчикПодсчетаПосетителей;
		ДокументОбъект.Ответственный = Справочники.Пользователи.АдминистраторАвтоматов;
		ДокументОбъект.ДополнительныеСвойства.Вставить("ИспользоватьНомерМагазинаКакПрефикс", Истина);

	КонецЕсли;

	ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	ДокументОбъект.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);
	ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);

	ДокументОбъект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	ДокументОбъект.ОбменДанными.Получатели.Очистить();
	ОбменДаннымиСервер.УстановитьПолучателейМагазина(ДокументОбъект.ОбменДанными.Получатели, СчетчикВыборка.Магазин);

	Если ДокументОбъект.ПометкаУдаления
	ИЛИ НЕ ДокументОбъект.Дата = СчетчикВыборка.ДатаДокумента
	ИЛИ НЕ ДокументОбъект.Магазин = СчетчикВыборка.Магазин Тогда

		Если НЕ ТранзакцияАктивна() Тогда

			НачатьТранзакцию();

		КонецЕсли;

		ДокументОбъект.ПометкаУдаления = Ложь;
		ДокументОбъект.Дата    = СчетчикВыборка.ДатаДокумента;
		ДокументОбъект.Магазин = СчетчикВыборка.Магазин;

		ПроведениеВыполнить = Истина;

		ДокументОбъект.Записать();

	КонецЕсли;

	Возврат ДокументОбъект;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьДанныеНастройкиОбмена(ЭлементНастройки, КоличествоДнейЗагрузкиПараметр)

	ДанныеНастройки = Новый Структура;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаНастроек.Код КАК Код,
	|	ТаблицаНастроек.Наименование КАК Наименование,
	|	ТаблицаНастроек.ВидТранспортаСообщенийОбменаПоУмолчанию КАК ВидТранспортаСообщенийОбменаПоУмолчанию,
	|	ТаблицаНастроек.HTTP_Adress КАК HTTP_Adress,
	|	ТаблицаНастроек.HTTP_OrgKey КАК HTTP_OrgKey,
	|	ТаблицаНастроек.HTTP_URL КАК HTTP_URL,
	|	ВЫБОР
	|		КОГДА ТаблицаНастроек.КоличествоДнейЗагрузкиСчётчиковПосетителей = 0
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаНастроек.КоличествоДнейЗагрузкиСчётчиковПосетителей
	|	КОНЕЦ КАК КоличествоДнейЗагрузкиСчётчиковПосетителей
	|ИЗ
	|	Справочник.НастройкиЗагрузкиДанныхСчетчиковПодсчетаПосетителей КАК ТаблицаНастроек
	|ГДЕ
	|	ТаблицаНастроек.Ссылка = &ЭлементНастройки"
	);
	Запрос.УстановитьПараметр("ЭлементНастройки", ЭлементНастройки);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДанных	 = РезультатЗапроса.Выбрать();
	ВыборкаДанных.Следующий();
	
	ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, ВыборкаДанных, ДанныеНастройки,, Истина);

	Если ТипЗнч(КоличествоДнейЗагрузкиПараметр) = Тип("Число") Тогда

		ДанныеНастройки.КоличествоДнейЗагрузкиСчётчиковПосетителей = Макс(1, КоличествоДнейЗагрузкиПараметр);

	КонецЕсли;

	ДанныеНастройки.Вставить("Ошибка", Ложь);
	ДанныеНастройки.Вставить("ТекстСообщения", "");
//	Дефолтное определение.. далее будет уточнено.
	ДанныеНастройки.Вставить("ДатаНижняя" , НачалоДня(ТекущаяДата()) - 86400 * ДанныеНастройки.КоличествоДнейЗагрузкиСчётчиковПосетителей);
	ДанныеНастройки.Вставить("ДатаВерхняя", '00010101');

	Возврат ДанныеНастройки;

КонецФункции

#КонецОбласти









