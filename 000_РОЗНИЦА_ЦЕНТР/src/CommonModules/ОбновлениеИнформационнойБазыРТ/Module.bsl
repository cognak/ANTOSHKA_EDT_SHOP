////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки СтандартныеПодсистемы (БСП).
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                  Обработчики обновления таких библиотек должны быть вызваны ранее
//                                  обработчиков обновления данной библиотеки.
//                                  При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                  порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                  в процедуре ПриДобавленииПодсистем общего модуля ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "РозницаДляУкраины";
//	LNK 04.09.2016 11:54:24 - какую версию поставили, такая и будет!
//	Описание.Версия = "2.0.4.3";
	Описание.Версия = Метаданные.Версия;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей 
//                                  см. в процедуре ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.0.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//  Обработчик.Опциональный        = Истина;
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();

	//Конец варианты отчетов
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПервыйЗапуск";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.5";
	Обработчик.Процедура = "Пользователи.ПриНаличииГруппПользователейУстановитьИспользование";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновлениеПромежуточныхВерсий";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.3.1";
	Обработчик.Процедура = "МенеджерОборудованияСервер.ОбновитьПараметрыПО";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.4.1";
	Обработчик.Процедура = "Справочники.БазовыеЕдиницыИзмерения.КлассификаторЕдиницИзмеренияОбновитьКодыКСПОВО";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.4.1";
	Обработчик.Процедура = "УправлениеКонтактнойИнформацией.ЗагрузитьСтраныМира";

КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры


// Процедура выполняет обработчики при первом запуске
//
Процедура ПервыйЗапуск_ГлавныйУзел() Экспорт
	
	Справочники.БазовыеЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияПоУмолчанию();
	Справочники.СтатьиДвиженияДенежныхСредств.ЗаполнитьХозяйственнуюОперациюПредопределеннымСтатьямДДС();
	Справочники.ВидыОплатЧекаККМ.ЗаполнитьПредопределенные();
	Справочники.АналитикаХозяйственныхОпераций.ЗаполнитьПредопределенные();
	ЗаполнитьКонстантыПоУмолчанию();
	КонтактнаяИнформацияОбновлениеИБ();
	
КонецПроцедуры // ПервыйЗапуск()

// Процедура выполняет обработчики при первом запуске
//
Процедура ПервыйЗапуск() Экспорт
	
	Если ОбменДаннымиПовтИсп.ГлавныйУзел() = Неопределено Тогда
	
		ПервыйЗапуск_ГлавныйУзел();
	
	КонецЕсли;
	
	ПланыОбмена.ПоРабочемуМесту.ОбновитьСценарииОбмена();

КонецПроцедуры // ПервыйЗапуск()

// Процедура обновления ИБ для справочника видов контактной информации.
//
// Инструкция:
// Для каждого объекта, владельца КИ, для каждого соответствующего ему вида КИ добавить 
// строчку вида: УправлениеКонтактнойИнформацией.ОбновитьВидКИ(.....). При этом,
// важен порядок в котором будут осуществляться эти вызовы, чем раньше вызов для вида КИ,
// тем выше этот вид КИ будет располагаться на форме объекта.
//
// Параметры функции УправлениеКонтактнойИнформацией.ОбновитьВидКИ:
// 1. Вид КИ - Ссылка на предопределенный вид КИ.
// 2. Тип КИ - Ссылка на перечисление
// 3. МожноИзменятьСпособРедактирования  - Определяет, можно ли в режиме Предприятие изменить способ редактирования,
//                                         например, для адресов, которые попадают в регл. отчетность, нужно
//                                         запретить возможность изменения.
// 4. РедактированиеТолькоВДиалоге       - Если установить Истина, то будет значение вида КИ можно будет
//                                         редактировать только в форме ввода (имеет смысл только для
//                                         адресов, телефонов и факсов).
// 5. АдресТолькоУкраинский              - Если установить Истина, то для адресов можно будет ввести 
//                                         только украинский адрес (имеет смысл только для адресов).
// 6. Порядок                            - Определяет порядок элемента, для сортировки относительно других
//
//
Процедура КонтактнаяИнформацияОбновлениеИБ() Экспорт
	
	// Справочник "Пользователи"
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailПользователя,             Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Истина, Ложь, Ложь,1);
	
	// Организации
	
	// Справочник "Организации"
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,             Перечисления.ТипыКонтактнойИнформации.Адрес,                 Истина, Ложь, Истина,1);
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,           Перечисления.ТипыКонтактнойИнформации.Адрес,                 Истина, Ложь, Ложь,2);
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,             Перечисления.ТипыКонтактнойИнформации.Телефон,               Истина, Ложь, Ложь,3);
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации,                Перечисления.ТипыКонтактнойИнформации.Факс,                  Истина, Ложь, Ложь,4);
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailОрганизации,               Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Истина, Ложь, Ложь,5);
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации,       Перечисления.ТипыКонтактнойИнформации.Адрес,                 Истина, Ложь, Ложь,5);
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации,    Перечисления.ТипыКонтактнойИнформации.Другое,                Истина, Ложь, Ложь,7);
	// Конец Организации
	
	// Справочник "Магазины"
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФаксМагазина,                   Перечисления.ТипыКонтактнойИнформации.Факс,                  Истина, Ложь, Ложь,1);
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонМагазина,                Перечисления.ТипыКонтактнойИнформации.Телефон,               Истина, Ложь, Ложь,2);
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонМагазинаДва,             Перечисления.ТипыКонтактнойИнформации.Телефон,               Истина, Ложь, Ложь,2);
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонМагазинаТри,             Перечисления.ТипыКонтактнойИнформации.Телефон,               Истина, Ложь, Ложь,2);
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФактАдресМагазина,              Перечисления.ТипыКонтактнойИнформации.Адрес,                 Истина, Ложь, Ложь,3);
	// Конец Магазины
	
	// Справочник "Физические лица"
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица,           Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Истина, Ложь, Ложь,1);
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонФизическогоЛица,         Перечисления.ТипыКонтактнойИнформации.Телефон,               Истина, Ложь, Ложь,2);
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФактАдресФизическогоЛица,       Перечисления.ТипыКонтактнойИнформации.Адрес,                 Истина, Ложь, Ложь,3);
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресФизическогоЛица,   Перечисления.ТипыКонтактнойИнформации.Адрес,                 Истина, Ложь, Ложь,4);
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияФизическогоЛица,Перечисления.ТипыКонтактнойИнформации.Другое,                Истина, Ложь, Ложь,5);
	// Конец ФизическиеЛица
		
    // Справочник "Контрагенты"
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,             Перечисления.ТипыКонтактнойИнформации.Адрес,                 Истина, Ложь, Ложь,1);
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,           Перечисления.ТипыКонтактнойИнформации.Адрес,                 Истина, Ложь, Ложь,2);
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,             Перечисления.ТипыКонтактнойИнформации.Телефон,               Истина, Ложь, Ложь,3);
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагентаСлужебный,    Перечисления.ТипыКонтактнойИнформации.Телефон,               Истина, Ложь, Ложь,3);
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента,                Перечисления.ТипыКонтактнойИнформации.Факс,                  Истина, Ложь, Ложь,4);
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,               Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Истина, Ложь, Ложь,5);
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailКонтрагентаСлужебный,      Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Истина, Ложь, Ложь,5);
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента,       Перечисления.ТипыКонтактнойИнформации.Адрес,                 Истина, Ложь, Ложь,6);
	УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента,    Перечисления.ТипыКонтактнойИнформации.Другое,                Истина, Ложь, Ложь,7);
	// Конец Контрагенты
	
КонецПроцедуры

Процедура ОбновлениеПромежуточныхВерсий() Экспорт
	
	Возврат;	//	LNK 31.07.2017 16:34:41
	
	ОбновлениеИнформационнойБазыРТ.ОбновитьРегистрТоварыОрганизаций();
	
	ОбновлениеИнформационнойБазыРТ.ЗаполнитьПредопределенныеЭлементыАналитикХозяйственныхОпераций();
	
	ОбновлениеИнформационнойБазыРТ.ПерезаписатьДокументыПоНаборамЗначений();
	
	ОбновлениеИнформационнойБазыРТ.ОбновитьДвиженияПоРегиструЦеныНоменклатуры();
	
	ОбновлениеИнформационнойБазыРТ.ИсправитьДвиженияДокументовПоЗаказамИОрдернойСхеме();
	
	ОбновлениеИнформационнойБазыРТ.ИсправитьДвиженияДокументовПоЗакупкамТоваров();
	
	ОбновлениеИнформационнойБазыРТ.УстановитьНеИспользованиеВнешнихПользователей();
	
	ОбновлениеИнформационнойБазыРТ.ЗаполнитьДоговорЭквайрингаПродажиПоПлатежнымКартам();
	
	ОбновлениеИнформационнойБазыРТ.ЗаполнитьДокументыПоПроектуИнвентаризацияПоОрдернойСхеме();
	
	ОбновлениеИнформационнойБазыРТ.ИсправитьДвиженияДокументовПоРасчетамСПоставщиками();
	
	ОбновлениеИнформационнойБазыРТ.ИсправитьЭтапыОплатДокументовПоступлениеТоваровБезЗаказа();
	
	ОбновлениеИнформационнойБазыРТ.ОбновитьОборудованиеOffline();
	
	ОбновлениеИнформационнойБазыРТ.УдалитьЛишниеДвиженияДокументовЗаменаДисконтныхКарт();
	
	ОбновлениеИнформационнойБазыРТ.ЗаполнитьИменаКомандНастроекРМК();
	
	ОбновлениеИнформационнойБазыРТ.УстановитьДополнительныеКолонкиПриОтображенииНоменклатуры();
	
	ОбновлениеИнформационнойБазыРТ.ЗарегистрироватьИзмененияСправочникаИдентификаторыОбъектовМетаданных();
	
	ОбновлениеИнформационнойБазыРТ.ОбновитьСостояниеОплатыИПоступления();
	
	ОбновлениеИнформационнойБазыРТ.ЗаполнитьСтатусыСерийВОрдереНаПеремещениеТоваров();
	
	Справочники.ИдентификаторыОбъектовМетаданных.ЗарегистрироватьПолноеИзменениеДляПодчиненныхУзловРИБ();
	
	ОбновлениеИнформационнойБазыРТ.ИсправитьДвиженияЗаказовПоставщикамПоТоварыКПоступлению();
	
	ОбновлениеИнформационнойБазыРТ.ИсправитьПризнакБессрочныйЗаказовПоставщикам();
	
	ОбновлениеИнформационнойБазыРТ.ОбновитьПрефиксыШтрихкодов();
	
	ОбновлениеИнформационнойБазыРТ.ЗаполнитьДокументПродажиВРегистреПродаже();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////

// Процедура заполняет константы значением по умочанию.
//
Процедура ЗаполнитьКонстантыПоУмолчанию()
	
	Если НЕ ЗначениеЗаполнено(Константы.ЕдиницаИзмеренияВеса.Получить()) Тогда
		БазоваяЕдиницаИзмеренияВеса = Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду("166");
		Если ЗначениеЗаполнено(БазоваяЕдиницаИзмеренияВеса) Тогда
			Константы.ЕдиницаИзмеренияВеса.Установить(БазоваяЕдиницаИзмеренияВеса);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Константы.ЕдиницаИзмеренияОбъема.Получить()) Тогда
		БазоваяЕдиницаИзмеренияОбъема = Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду("113");
		Если ЗначениеЗаполнено(БазоваяЕдиницаИзмеренияОбъема) Тогда
			Константы.ЕдиницаИзмеренияОбъема.Установить(БазоваяЕдиницаИзмеренияОбъема);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить()) Тогда
		Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Установить(Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить);
	КонецЕсли;
	
	Константы.ИспользоватьУчетСебестоимости.Установить(Истина);
	Если НЕ ЗначениеЗаполнено(Константы.СпособУчетаСебестоимости.Получить()) Тогда
		Константы.СпособУчетаСебестоимости.Установить(Перечисления.СпособыУчетаСебестоимости.АвтономныйУчет);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.НижняяГраницаДиапазонаSKUВесовогоТовара.Получить()) Тогда
		Константы.НижняяГраницаДиапазонаSKUВесовогоТовара.Установить(100);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ВерхняяГраницаДиапазонаSKUВесовогоТовара.Получить()) Тогда
		Константы.ВерхняяГраницаДиапазонаSKUВесовогоТовара.Установить(99999);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ПрефиксВнутреннегоШтрихкодаВесовогоТовара.Получить()) Тогда
		Константы.ПрефиксВнутреннегоШтрихкодаВесовогоТовара.Установить(1);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара.Получить()) Тогда
		Константы.ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара.Установить(3);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ПрефиксВнутреннегоШтрихкодаШтучногоТовара.Получить()) Тогда
		Константы.ПрефиксВнутреннегоШтрихкодаШтучногоТовара.Установить(2);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ПрефиксШтрихкодаУзлаРИБ.Получить()) Тогда
		Константы.ПрефиксШтрихкодаУзлаРИБ.Установить(0);
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Константы.SKUУстанавливаетсяВГлавномУзлеРИБ.Установить(Ложь);
	Иначе
		Константы.SKUУстанавливаетсяВГлавномУзлеРИБ.Установить(Истина);
	КонецЕсли;

	Константы.РежимФормированияПечатныхФорм.Установить(Перечисления.РежимыФормированияПечатныхФорм.НаЯзыкеИнформационнойБазы);

КонецПроцедуры // ЗаполнитьКонстантыПоУмолчанию()

///////////////////////////////////////////////////////////////////////////////
// Общие обработчики

Процедура ПустойОбработчик() Экспорт

	

КонецПроцедуры



///////////////////////////////////////////////////////////////////////////////
// Переход на версию 2.0.3


// Процедура заполняет не заполненные реквизиты аналитик хозяйственных операций
Процедура ЗаполнитьПредопределенныеЭлементыАналитикХозяйственныхОпераций() Экспорт
	
	Если ОбменДаннымиПовтИсп.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.АналитикаХозяйственныхОпераций.ЗаполнитьПредопределенные();
	
КонецПроцедуры

// Процедура заменяет "Получателя" и "Отправитель" в документе Заказ на перемещение
Процедура ИсправитьЗаказыНаПеремещение() Экспорт
	
	Если ОбменДаннымиПовтИсп.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаПеремещение.Ссылка,
	|	ЗаказНаПеремещение.Дата КАК Дата,
	|	ЗаказНаПеремещение.МагазинПолучатель КАК МагазинОтправитель,
	|	ЗаказНаПеремещение.МагазинОтправитель КАК МагазинПолучатель
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|ГДЕ
	|	(НЕ ЗаказНаПеремещение.УдалитьДокументОбработан)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.МагазинПолучатель  = Выборка.МагазинПолучатель;
		ДокументОбъект.МагазинОтправитель = Выборка.МагазинОтправитель;
		
		ДокументОбъект.УдалитьДокументОбработан = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ОбновитьСтатьиДДС() Экспорт
	
	Если ОбменДаннымиПовтИсп.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатьиДвиженияДенежныхСредствЛево.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредствЛево
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредствПраво
	|ПО
	|	СтатьиДвиженияДенежныхСредствЛево.Код = СтатьиДвиженияДенежныхСредствПраво.Код
	|ГДЕ
	|	СтатьиДвиженияДенежныхСредствЛево.Ссылка <> СтатьиДвиженияДенежныхСредствПраво.Ссылка
	|	И СтатьиДвиженияДенежныхСредствЛево.Предопределенный <> ИСТИНА
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	ПрефиксБазы = Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();
	Пока Выборка.Следующий() Цикл
		СтатьяДДСОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СтатьяДДСОбъект.УстановитьНовыйКод(ПрефиксБазы);
		Попытка
			СтатьяДДСОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	СтатьяВыдплатаЗарплаты = Справочники.СтатьиДвиженияДенежныхСредств.ВыплатаЗарплатыСотрудникам.ПолучитьОбъект();
	СтатьяВыдплатаЗарплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям;
	СтатьяВыдплатаЗарплаты.УстановитьНовыйКод(ПрефиксБазы);
	Попытка
		СтатьяВыдплатаЗарплаты.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры // ОбновитьКодСтатьямДДС()

// Перезаписывает документы определенного типа, иницируя подписку "ЗаписатьНаборыЗначенийДоступа" 
//
// Параметры:
//  ТипДокумента - Строка
//
Процедура ПерезаписатьОбъектыОпределенногоТипаПоНаборамЗначений(ТипМетаданных, ТипОбъекта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыОпределенногоТипа.Ссылка КАК Ссылка,
	|	НаборыЗначенийДоступаРегистра.Объект
	|ПОМЕСТИТЬ ТаблицаОбъектов
	|ИЗ
	|	" + ТипМетаданных + "." + ТипОбъекта + " КАК ОбъектыОпределенногоТипа
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаборыЗначенийДоступа КАК НаборыЗначенийДоступаРегистра
	|		ПО ОбъектыОпределенногоТипа.Ссылка = НаборыЗначенийДоступаРегистра.Объект
	|ГДЕ
	|	НаборыЗначенийДоступаРегистра.Объект ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОбъектыОпределенногоТипа.Ссылка,
	|	НаборыЗначенийДоступаОбъекта.Ссылка
	|ИЗ
	|	" + ТипМетаданных + "." + ТипОбъекта + " КАК ОбъектыОпределенногоТипа
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТипМетаданных + "." + ТипОбъекта + ".НаборыЗначенийДоступа КАК НаборыЗначенийДоступаОбъекта
	|		ПО ОбъектыОпределенногоТипа.Ссылка = НаборыЗначенийДоступаОбъекта.Ссылка
	|ГДЕ
	|	НаборыЗначенийДоступаОбъекта.Ссылка ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОбъектов.Ссылка КАК Ссылка
	|ИЗ
	|	ТаблицаОбъектов КАК ТаблицаОбъектов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ПолученныйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПолученныйОбъект.Записать();
	
	КонецЦикла;
	
КонецПроцедуры // ПерезаписатьДокументыОпределенногоТипаПоНаборамЗначений()


// Перезаписывает документы, иницируя подписку "ЗаписатьНаборыЗначенийДоступа" 
//
// Параметры
//  Нет
//
Процедура ПерезаписатьДокументыПоНаборамЗначений() Экспорт
	
//	LNK 31.07.2017 16:30:35 - комментарий установил
	//ПерезаписатьОбъектыОпределенногоТипаПоНаборамЗначений("Документ"  , "МаркетинговаяАкция");
	//ПерезаписатьОбъектыОпределенногоТипаПоНаборамЗначений("Документ"  , "УстановкаЦенНоменклатуры");
	//ПерезаписатьОбъектыОпределенногоТипаПоНаборамЗначений("Документ"  , "ПередачаТоваровМеждуОрганизациями");
	//ПерезаписатьОбъектыОпределенногоТипаПоНаборамЗначений("Справочник", "ПравилаЦенообразования");
	
КонецПроцедуры // ПерезаписатьДокументыПоНаборамЗначений()

// Процедура находит места ошибочных записей документа "ПередачаТоваровМеждуОрганизациями"

Процедура ОбновитьРегистрТоварыОрганизаций() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПередачаТоваровМеждуОрганизациями.Ссылка,
	|	ПередачаТоваровМеждуОрганизациями.ХозяйственнаяОперация,
	|	ПередачаТоваровМеждуОрганизациями.Магазин,
	|	ПередачаТоваровМеждуОрганизациями.ЦенаВключаетНДС,
	|	ПередачаТоваровМеждуОрганизациями.Дата КАК Период,
	|	ПередачаТоваровМеждуОрганизациями.Организация,
	|	ПередачаТоваровМеждуОрганизациями.ОрганизацияПолучатель,
	|	ПередачаТоваровМеждуОрганизациями.Склад
	|ПОМЕСТИТЬ ДокументыНаРассмотрении
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
	|ГДЕ
	|	ПередачаТоваровМеждуОрганизациями.Проведен
	|	И ПередачаТоваровМеждуОрганизациями.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаТоваровПослеРеализации)
	|	И (НЕ ПередачаТоваровМеждуОрганизациями.Магазин.СкладУправляющейСистемы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыОрганизаций.Регистратор,
	|	ТоварыОрганизаций.ВидДвижения
	|ПОМЕСТИТЬ ДокументыИзРегистра
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|ГДЕ
	|	ТоварыОрганизаций.Регистратор В
	|			(ВЫБРАТЬ
	|				ДокументыНаРассмотрении.Ссылка
	|			ИЗ
	|				ДокументыНаРассмотрении КАК ДокументыНаРассмотрении)
	|	И ТоварыОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыНаРассмотрении.Ссылка КАК Ссылка,
	|	ДокументыНаРассмотрении.ЦенаВключаетНДС,
	|	ДокументыНаРассмотрении.Период,
	|	ДокументыНаРассмотрении.Организация,
	|	ДокументыНаРассмотрении.ОрганизацияПолучатель,
	|	ДокументыНаРассмотрении.Склад
	|ИЗ
	|	ДокументыНаРассмотрении КАК ДокументыНаРассмотрении
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыИзРегистра КАК ДокументыИзРегистра
	|		ПО ДокументыНаРассмотрении.Ссылка = ДокументыИзРегистра.Регистратор
	|ГДЕ
	|	ДокументыИзРегистра.Регистратор ЕСТЬ NULL ";
	
	
	Результат = Запрос.Выполнить();
	ВыборкаДокументов = Результат.Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
	
		ДокументСсылка = ВыборкаДокументов.Ссылка;
		
		ЗапросПоДвижениям = Новый Запрос;
		ЗапросПоДвижениям.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Ссылка КАК Ссылка,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС * &ЦенаВключаетНДС КАК СуммаСНДС
		|ПОМЕСТИТЬ ВтТаблицаТовары
		|ИЗ
		|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &ДокументСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	&Период КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&Организация КАК Организация,
		|	&Организация КАК ОрганизацияОтгрузки,
		|	&Склад КАК Склад,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Количество КАК Количество
		|ИЗ
		|	ВтТаблицаТовары КАК ТаблицаТовары
		|ГДЕ
		|	(НЕ ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки,
		|	&Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		|	&ОрганизацияПолучатель,
		|	НЕОПРЕДЕЛЕНО,
		|	&Склад,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Количество
		|ИЗ
		|	ВтТаблицаТовары КАК ТаблицаТовары
		|ГДЕ
		|	(НЕ ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		ЗапросПоДвижениям.УстановитьПараметр("ДокументСсылка"       , ДокументСсылка);
		ЗапросПоДвижениям.УстановитьПараметр("ЦенаВключаетНДС"      , ?(ВыборкаДокументов.ЦенаВключаетНДС, 0, 1));
		ЗапросПоДвижениям.УстановитьПараметр("Период"               , ВыборкаДокументов.Период);
		ЗапросПоДвижениям.УстановитьПараметр("Организация"          , ВыборкаДокументов.Организация);
		ЗапросПоДвижениям.УстановитьПараметр("ОрганизацияПолучатель", ВыборкаДокументов.ОрганизацияПолучатель);
		ЗапросПоДвижениям.УстановитьПараметр("Склад"                , ВыборкаДокументов.Склад);
		
		Результат = ЗапросПоДвижениям.Выполнить();
		ТаблицаДвижений = Результат.Выгрузить();
		
		НаборЗаписей = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		
		НаборЗаписей.Загрузить(ТаблицаДвижений);
		НаборЗаписей.Записать(Истина);
	
	КонецЦикла;
	

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Переход на версию 2.0.4

// Возврат массив документов для исправления движений
// Параметры:
//  ИмяДокумента - строка, имя документа
//  УсловиеДокумента - строка условие документа
//  ИмяРегистра - строка, имя регистра проверки
//  УсловиеДвиженийРегистра - строка, условие для выборки движений
//
// Возвращенное значение:
//  Массив
//
Функция НайтиДокументыДляИсправленияДвижений(ИмяДокумента, УсловиеДокумента, ИмяРегистра, УсловиеДвиженийРегистра)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРассматриваемыхДокументов.Ссылка
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК ТаблицаРассматриваемыхДокументов
	|ГДЕ
	|	ТаблицаРассматриваемыхДокументов.Проведен
	|	" +  УсловиеДокумента + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРегистра.Регистратор
	|ПОМЕСТИТЬ ТаблицаДокументовРегистра
	|ИЗ
	|	РегистрНакопления." + ИмяРегистра + " КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Регистратор В
	|			(ВЫБРАТЬ
	|				ТаблицаДокументов.Ссылка КАК Ссылка
	|			ИЗ
	|				ТаблицаДокументов КАК ТаблицаДокументов)
	|	" +  УсловиеДвиженийРегистра + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокументов.Ссылка КАК Ссылка
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДокументовРегистра КАК ТаблицаДокументовРегистра
	|		ПО ТаблицаДокументов.Ссылка = ТаблицаДокументовРегистра.Регистратор
	|ГДЕ
	|	ТаблицаДокументовРегистра.Регистратор ЕСТЬ NULL ";
	
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Возврат ТаблицаЗапроса.ВыгрузитьКолонку("Ссылка");
	
КонецФункции // НайтиДокументыДляИсправленияДвижений()

Процедура ДвиженияДокументаПоРегистру(ИмяРегистра, ДокументСсылка, ВыборкаДвижений)
	
	НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
	
	Пока ВыборкаДвижений.Следующий() Цикл
		
		ЗаписьРегистра = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ВыборкаДвижений);
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Процедура получает и записывает структуру документов в регистр "ЗаказыТоваров"
// Параметры:
//  МассивДокументов - массив, найдейных документов
//  ИмяДокумента - строка, имя документа
// 
Процедура ЗаписатьДвиженияПоРегиструЗаказыТоваров(МассивДокументов, ИмяДокумента, ВидДвиженияНакопления, РеквизитЗаказ, РеквизитМагазин, РеквизитПоставщик)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ТаблицаДокументов.Дата КАК Период,
	|	ТаблицаДокументов." + РеквизитЗаказ + " КАК Заказ,
	|	ТаблицаДокументов." + РеквизитМагазин + " КАК Магазин,
	|	ТаблицаДокументов." + РеквизитПоставщик + " КАК Поставщик
	|ПОМЕСТИТЬ ТаблицаШапкиДокументов
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления." + ВидДвиженияНакопления + ") КАК ВидДвижения,
	|	ТаблицаШапкиДокументов.Период,
	|	ТаблицаШапкиДокументов.Магазин,
	|	ТаблицаШапкиДокументов.Поставщик,
	|	ТаблицаШапкиДокументов.Заказ КАК Заказ,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Количество
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	Документ." + ИмяДокумента + ".Товары КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаШапкиДокументов КАК ТаблицаШапкиДокументов
	|		ПО ТаблицаТоваров.Ссылка = ТаблицаШапкиДокументов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка КАК Ссылка,
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.ВидДвижения,
	|	ТаблицаТоваров.Период,
	|	ТаблицаТоваров.Магазин,
	|	ТаблицаТоваров.Поставщик,
	|	ТаблицаТоваров.Заказ,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Количество
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаДвижений = Выборка.Выбрать();
		ДвиженияДокументаПоРегистру("ЗаказыТоваров", Выборка.Ссылка, ВыборкаДвижений);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура получает и записывает структуру документов в регистрах "ТоварыКОтгрузке" и "ТоварыКПоступлению"
// Параметры:
//  МассивДокументов - массив, найдейных документов
//  ИмяДокумента - строка, имя документа
// 
Процедура ЗаписатьДвиженияПоРегиструТоварыКПоступленияКОтгрузке(МассивДокументов, ИмяДокумента, ИмяРегистра, ВидДвиженияНакопления, РеквизитДокументОснование, РеквизитСклад, УсловиеКТабличнойЧасти = "")
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ТаблицаДокументов.Дата КАК Период,
	|	ТаблицаДокументов." + РеквизитДокументОснование + " КАК ДокументОснование,
	|	ТаблицаДокументов." + РеквизитСклад + " КАК Склад
	|ПОМЕСТИТЬ ТаблицаШапкиДокументов
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления." + ВидДвиженияНакопления + ") КАК ВидДвижения,
	|	ТаблицаШапкиДокументов.Период,
	|	ТаблицаШапкиДокументов.ДокументОснование,
	|	ТаблицаШапкиДокументов.Склад,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Количество
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	Документ." + ИмяДокумента + ".Товары КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаШапкиДокументов КАК ТаблицаШапкиДокументов
	|		ПО ТаблицаТоваров.Ссылка = ТаблицаШапкиДокументов.Ссылка
	| " + УсловиеКТабличнойЧасти + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка КАК Ссылка,
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.ВидДвижения,
	|	ТаблицаТоваров.Период,
	|	ТаблицаТоваров.ДокументОснование,
	|	ТаблицаТоваров.Склад,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Количество
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаДвижений = Выборка.Выбрать();
		ДвиженияДокументаПоРегистру(ИмяРегистра, Выборка.Ссылка, ВыборкаДвижений);
		
	КонецЦикла;
	
КонецПроцедуры

// Возврат массив документов для исправления движений
// Параметры:
//  ИмяДокумента - строка, имя документа
//  УсловиеДокумента - строка условие документа
//  ИмяРегистра - строка, имя регистра проверки
//  УсловиеДвиженийРегистра - строка, условие для выборки движений
//
// Возвращенное значение:
//  Массив
//
Функция НайтиДокументыДляОчисткиДвижений(ИмяДокумента, УсловиеДокумента, ИмяРегистра, УсловиеДвиженийРегистра)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРассматриваемыхДокументов.Ссылка
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК ТаблицаРассматриваемыхДокументов
	|ГДЕ
	|	ТаблицаРассматриваемыхДокументов.Проведен
	|	" +  УсловиеДокумента + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРегистра.Регистратор
	|ПОМЕСТИТЬ ТаблицаДокументовРегистра
	|ИЗ
	|	РегистрНакопления." + ИмяРегистра + " КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Регистратор В
	|			(ВЫБРАТЬ
	|				ТаблицаДокументов.Ссылка КАК Ссылка
	|			ИЗ
	|				ТаблицаДокументов КАК ТаблицаДокументов)
	|	" +  УсловиеДвиженийРегистра + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокументов.Ссылка КАК Ссылка
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументовРегистра КАК ТаблицаДокументовРегистра
	|		ПО ТаблицаДокументов.Ссылка = ТаблицаДокументовРегистра.Регистратор";
	
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Возврат ТаблицаЗапроса.ВыгрузитьКолонку("Ссылка");
	
КонецФункции // НайтиДокументыДляОчисткиДвижений()

Процедура ОчиститьДвиженияРегистра(МассивДокументов, ИмяРегистра)
	
	Для каждого ДокументСсылка Из МассивДокументов Цикл
	
		НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьДвиженияРегистрПоВидуДвижения(МассивДокументов, ИмяРегистра, ВидДвижения)
	
	Для каждого ДокументСсылка Из МассивДокументов Цикл
	
		НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Прочитать();
		
		ТаблицаНаборЗаписей = НаборЗаписей.Выгрузить();
		
		КолвоЭлементовКоллекции = ТаблицаНаборЗаписей.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = ТаблицаНаборЗаписей[КолвоЭлементовКоллекции - ОбратныйИндекс];

			Если ЭлементКоллекции.ВидДвижения = ВидДвижения Тогда
				ТаблицаНаборЗаписей.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;
		
		
		НаборЗаписей.Загрузить(ТаблицаНаборЗаписей);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправитьДвиженияДокументовПоЗаказамИОрдернойСхеме() Экспорт
	
	// ЗаказНаПеремещение
	МассивДокументов = НайтиДокументыДляИсправленияДвижений("ЗаказНаПеремещение", 
															"И (НЕ МагазинПолучатель.СкладУправляющейСистемы)", 
															"ЗаказыТоваров", 
															"");
	
	
	ЗаписатьДвиженияПоРегиструЗаказыТоваров(МассивДокументов, 
											"ЗаказНаПеремещение",
											"Приход",
											"Ссылка",
											"МагазинПолучатель",
											"МагазинОтправитель");
	
	
	// ЗаказПоставщику
	МассивДокументов = НайтиДокументыДляИсправленияДвижений("ЗаказПоставщику", 
															"И (НЕ Магазин.СкладУправляющейСистемы)", 
															"ЗаказыТоваров", 
															"");
	
	
	ЗаписатьДвиженияПоРегиструЗаказыТоваров(МассивДокументов, 
											"ЗаказПоставщику",
											"Приход",
											"Ссылка",
											"Магазин",
											"Контрагент");
	
	// ПеремещениеТоваров
	МассивДокументов = НайтиДокументыДляИсправленияДвижений("ПеремещениеТоваров", 
															"И (НЕ МагазинПолучатель.СкладУправляющейСистемы)
															| И ДокументОснование ССЫЛКА Документ.ЗаказНаПеремещение
															| И (НЕ ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказНаПеремещение.ПустаяСсылка))", 
															"ЗаказыТоваров", 
															"");
	
	
	ЗаписатьДвиженияПоРегиструЗаказыТоваров(МассивДокументов, 
											"ПеремещениеТоваров",
											"Расход",
											"ДокументОснование",
											"МагазинПолучатель",
											"МагазинОтправитель");
	
	
	МассивДокументов = НайтиДокументыДляИсправленияДвижений("ПеремещениеТоваров", 
															"И МагазинОтправитель.ИспользоватьОрдернуюСхемуПриПеремещении
															| И (НЕ МагазинОтправитель.СкладУправляющейСистемы)", 
															"ТоварыКОтгрузке", 
															"");
	
	
	ЗаписатьДвиженияПоРегиструТоварыКПоступленияКОтгрузке(МассивДокументов, 
														  "ПеремещениеТоваров",
														  "ТоварыКОтгрузке",
														  "Приход",
														  "Ссылка",
														  "СкладОтправитель");
	
	МассивДокументов = НайтиДокументыДляОчисткиДвижений("ПеремещениеТоваров", 
														"", 
														"ТоварыКПоступлению", 
														" И ТаблицаРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)");
	
	ОчиститьДвиженияРегистрПоВидуДвижения(МассивДокументов, "ТоварыКПоступлению", ВидДвиженияНакопления.Расход);
	
	// ПоступлениеТоваров
	МассивДокументов = НайтиДокументыДляИсправленияДвижений("ПоступлениеТоваров", 
															"И (НЕ Магазин.СкладУправляющейСистемы)
															| И (НЕ ЗаказПоставщику = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка))", 
															"ЗаказыТоваров", 
															"");
	
	ЗаписатьДвиженияПоРегиструЗаказыТоваров(МассивДокументов, 
											"ПоступлениеТоваров",
											"Расход",
											"ЗаказПоставщику",
											"Магазин",
											"Контрагент");
	
	// ВозвратТоваровПоставщику
	МассивДокументов = НайтиДокументыДляИсправленияДвижений("ВозвратТоваровПоставщику", 
															"И Магазин.ИспользоватьОрдернуюСхемуПриОтгрузке
															| И (НЕ Магазин.СкладУправляющейСистемы)", 
															"ТоварыКОтгрузке", 
															"");
	
	ЗаписатьДвиженияПоРегиструТоварыКПоступленияКОтгрузке(МассивДокументов, 
														  "ВозвратТоваровПоставщику",
														  "ТоварыКОтгрузке",
														  "Приход",
														  "Ссылка",
														  "Склад");
	
	МассивДокументов = НайтиДокументыДляОчисткиДвижений("ВозвратТоваровПоставщику", 
														"", 
														"ТоварыКПоступлению", 
														"");
	
	ОчиститьДвиженияРегистра(МассивДокументов, "ТоварыКПоступлению");
	
	// РасходныйОрдерНаТовары
	МассивДокументов = НайтиДокументыДляИсправленияДвижений("РасходныйОрдерНаТовары", 
															"И (НЕ Магазин.СкладУправляющейСистемы)", 
															"ТоварыКОтгрузке", 
															"");
	
	ЗаписатьДвиженияПоРегиструТоварыКПоступленияКОтгрузке(МассивДокументов, 
														  "РасходныйОрдерНаТовары",
														  "ТоварыКОтгрузке",
														  "Расход",
														  "ДокументОснование",
														  "Склад");
	
	МассивДокументов = НайтиДокументыДляОчисткиДвижений("РасходныйОрдерНаТовары", 
														"", 
														"ТоварыКПоступлению", 
														"");
	
	ОчиститьДвиженияРегистра(МассивДокументов, "ТоварыКПоступлению");
	
	// РеализацияТоваров
	МассивДокументов = НайтиДокументыДляИсправленияДвижений("РеализацияТоваров", 
															"И Магазин.ИспользоватьОрдернуюСхемуПриОтгрузке
															| И (НЕ Магазин.СкладУправляющейСистемы)", 
															"ТоварыКОтгрузке", 
															"");
	
	ЗаписатьДвиженияПоРегиструТоварыКПоступленияКОтгрузке(МассивДокументов, 
														  "РеализацияТоваров",
														  "ТоварыКОтгрузке",
														  "Приход",
														  "Ссылка",
														  "Склад",
														  "ГДЕ	ТаблицаТоваров.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)");
	
	МассивДокументов = НайтиДокументыДляОчисткиДвижений("РеализацияТоваров", 
														"", 
														"ТоварыКПоступлению", 
														"");
	
	ОчиститьДвиженияРегистра(МассивДокументов, "ТоварыКПоступлению");
	
КонецПроцедуры

Процедура ОбновитьДвиженияПоРегиструСебестоимостьНоменклатурыДокументаПоступлениеТоваров() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваров.Ссылка,
	|	ПоступлениеТоваров.Дата,
	|	ПоступлениеТоваров.Магазин
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СебестоимостьНоменклатуры.Регистратор КАК Ссылка,
	|	ТаблицаДокументов.Магазин КАК Магазин,
	|	ТаблицаДокументов.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.СебестоимостьНоменклатуры КАК СебестоимостьНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО СебестоимостьНоменклатуры.Регистратор = ТаблицаДокументов.Ссылка
	|ГДЕ
	|	СебестоимостьНоменклатуры.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	СебестоимостьНоменклатуры.Регистратор";
	
	Результат = Запрос.Выполнить();
	ВыборкаДокументов = Результат.Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
	
		ДокументСсылка = ВыборкаДокументов.Ссылка;
		
		НаборЗаписей = РегистрыСведений.СебестоимостьНоменклатуры.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Прочитать();
		ТаблицаДвижений = НаборЗаписей.Выгрузить();
		ТаблицаДвижений.ЗаполнитьЗначения(ВыборкаДокументов.Магазин, "Магазин");
		
		НаборЗаписей.Загрузить(ТаблицаДвижений);
		НаборЗаписей.Записать(Истина);
	
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ОбновитьДвиженияПоРегиструЦеныНоменклатуры() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦеныНоменклатуры.Регистратор КАК Ссылка,
	|	ЦеныНоменклатуры.Период КАК Период
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.Цена = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Ссылка";
	
	Результат = Запрос.Выполнить();
	ВыборкаДокументов = Результат.Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
	
		ДокументСсылка = ВыборкаДокументов.Ссылка;
		
		НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Прочитать();
		ТаблицаДвижений = НаборЗаписей.Выгрузить();
		
		КолвоЭлементовКоллекции = ТаблицаДвижений.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = ТаблицаДвижений[КолвоЭлементовКоллекции - ОбратныйИндекс];
			
			Если ЭлементКоллекции.Цена = 0 Тогда
				ТаблицаДвижений.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Загрузить(ТаблицаДвижений);
		НаборЗаписей.Записать(Истина);
	
	КонецЦикла;
	
	
КонецПроцедуры


Процедура ЗаписатьДвиженияПоРегиструЗакупкиТоваров(МассивДокументов, ИмяДокумента, РеквизитПоставщик, ЗнакДвижения, АналитикаХозяйственнойОперации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ТаблицаДокументов.Дата КАК Период,
	|	"+АналитикаХозяйственнойОперации+" КАК АналитикаХозяйственнойОперации,
	|	ВЫБОР КОГДА ТаблицаДокументов.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка) Тогда
	|		ТаблицаДокументов.Склад.Магазин Иначе
	|	ТаблицаДокументов.Магазин КОНЕЦ КАК Магазин,
	|	ТаблицаДокументов." + РеквизитПоставщик + " КАК Поставщик
	|ПОМЕСТИТЬ ТаблицаШапкиДокументов
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаШапкиДокументов.Период,
	|	ТаблицаШапкиДокументов.Магазин,
	|	ТаблицаШапкиДокументов.Поставщик,
	|	ТаблицаШапкиДокументов.АналитикаХозяйственнойОперации КАК АналитикаХозяйственнойОперации,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Количество,
	|	ТаблицаТоваров.Сумма
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	Документ." + ИмяДокумента + ".Товары КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаШапкиДокументов КАК ТаблицаШапкиДокументов
	|		ПО ТаблицаТоваров.Ссылка = ТаблицаШапкиДокументов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка КАК Ссылка,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Период КАК Период,
	|	ТаблицаТоваров.Магазин КАК Магазин,
	|	ТаблицаТоваров.Поставщик КАК Поставщик,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	"+ЗнакДвижения+"ТаблицаТоваров.Количество КАК Количество,
	|	"+ЗнакДвижения+"ТаблицаТоваров.Сумма КАК Сумма,
	|	ТаблицаТоваров.АналитикаХозяйственнойОперации КАК АналитикаХозяйственнойОперации
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаДвижений = Выборка.Выбрать();
		ДвиженияДокументаПоРегистру("ЗакупкиТоваров", Выборка.Ссылка, ВыборкаДвижений);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправитьДвиженияДокументовПоЗакупкамТоваров() Экспорт

	// ПоступлениеТоваров
	МассивДокументов = НайтиДокументыДляИсправленияДвижений("ПоступлениеТоваров",
															"",
															"ЗакупкиТоваров",
															"");
	
	ЗаписатьДвиженияПоРегиструЗакупкиТоваров(МассивДокументов, 
											"ПоступлениеТоваров",
											"Контрагент",
											"",
											"ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.ПоступлениеТоваров)");
											
	
	// ВозвратТоваровПоставщику
	МассивДокументов = НайтиДокументыДляИсправленияДвижений("ВозвратТоваровПоставщику",
															"",
															"ЗаказыТоваров",
															"");
	
	ЗаписатьДвиженияПоРегиструЗакупкиТоваров(МассивДокументов, 
											"ВозвратТоваровПоставщику",
											"Контрагент",
											"-",
											"ТаблицаДокументов.АналитикаХозяйственнойОперации");

КонецПроцедуры


// Устанавливает значение константы "ИспользоватьВнешнихПользователей" = Ложь
Процедура УстановитьНеИспользованиеВнешнихПользователей() Экспорт

	ЗначениеКонстанты = Константы.ИспользоватьВнешнихПользователей.Получить();
	Если ЗначениеКонстанты Тогда
		
		Константы.ИспользоватьВнешнихПользователей.Установить(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДоговорЭквайрингаПродажиПоПлатежнымКартам() Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПродажиПоПлатежнымКартам.Регистратор
	|ПОМЕСТИТЬ Регистраторы
	|ИЗ
	|	РегистрНакопления.ПродажиПоПлатежнымКартам КАК ПродажиПоПлатежнымКартам
	|ГДЕ
	|	ПродажиПоПлатежнымКартам.ДоговорЭквайринга = ЗНАЧЕНИЕ(Справочник.ДоговорыЭквайринга.ПустаяСсылка)
	|	И ПродажиПоПлатежнымКартам.ЭквайринговыйТерминал <> ЗНАЧЕНИЕ(Справочник.ЭквайринговыеТерминалы.ПустаяСсылка)
	|;
	|ВЫБРАТЬ
	|	ПродажиПоПлатежнымКартам.Регистратор           КАК Регистратор,
	|	ЕСТЬNULL(ЭквайринговыеТерминалы.Владелец, ЗНАЧЕНИЕ(Справочник.ДоговорыЭквайринга.ПустаяСсылка)) КАК ДоговорЭквайринга,
	|	ПродажиПоПлатежнымКартам.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ПродажиПоПлатежнымКартам.Магазин               КАК Магазин,
	|	ПродажиПоПлатежнымКартам.ВидОплаты             КАК ВидОплаты,
	|	ПродажиПоПлатежнымКартам.Сумма                 КАК Сумма,
	|	ПродажиПоПлатежнымКартам.СуммаТорговойУступки  КАК СуммаТорговойУступки,
	|	ПродажиПоПлатежнымКартам.Активность            КАК Активность,
	|	ПродажиПоПлатежнымКартам.Период                КАК Период
	|ИЗ
	|	Регистраторы КАК Регистраторы
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ПродажиПоПлатежнымКартам КАК ПродажиПоПлатежнымКартам
	|ПО
	|	ПродажиПоПлатежнымКартам.Регистратор = Регистраторы.Регистратор
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ПО
	|	ЭквайринговыеТерминалы.Ссылка = ПродажиПоПлатежнымКартам.ЭквайринговыйТерминал
	|ИТОГИ ПО
	|	Регистратор
	|";
	ВыборкаДвиженийПустыхДоговоровЭквайринга = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДвиженийПустыхДоговоровЭквайринга.Следующий() Цикл
		ВыборкаДвиженийПоРегимтратору = ВыборкаДвиженийПустыхДоговоровЭквайринга.Выбрать();
		НаборЗаписей = РегистрыНакопления.ПродажиПоПлатежнымКартам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДвиженийПустыхДоговоровЭквайринга.Регистратор);
		Пока ВыборкаДвиженийПоРегимтратору.Следующий() Цикл
			ЗаписьДвиженийРегистра = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьДвиженийРегистра, ВыборкаДвиженийПоРегимтратору);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Переход на версию 2.0.5

// Обработчик обновления - переход с имен команд на идентификаторы объектов метаданных
//
Процедура ОбновитьДополнительныеОтчетыИОбработки() Экспорт
	
	РазделыОтчетов 					= Новый Массив;
	РазделыОбработок 				= Новый Массив;
	СоответствиеИменКомандРазделам 	= Новый Соответствие;
	
	// Имена команд отчетов
	ДополнительныеОтчетыИОбработкиПереопределяемый.ОпределитьРазделыСДополнительнымиОтчетами(РазделыОтчетов);
	Для Каждого Раздел Из РазделыОтчетов Цикл
		СоответствиеИменКомандРазделам.Вставить(
			"ДополнительныеОтчеты" + Раздел.Имя, 
			Раздел);
	КонецЦикла;
	
	// Имена команд обработок
	ДополнительныеОтчетыИОбработкиПереопределяемый.ОпределитьРазделыСДополнительнымиОбработками(РазделыОбработок);
	Для Каждого Раздел Из РазделыОбработок Цикл
		СоответствиеИменКомандРазделам.Вставить(
			"ДополнительныеОбработки" + Раздел.Имя, 
			Раздел);
	КонецЦикла;
	
	// Замена имен команд на идентификаторы разделов
	ДополнительныеОтчетыИОбработки.ЗаменитьИменаРазделовНаИдентификаторы(СоответствиеИменКомандРазделам);	
	
КонецПроцедуры

Процедура ИсправитьДвиженияДокументовПоРасчетамСПоставщиками() Экспорт
	
	// Заказ поставщику
	УсловиеДокумента = "И НЕ ТаблицаРассматриваемыхДокументов.Магазин.СкладУправляющейСистемы";

	МассивДокументов = НайтиДокументыДляИсправленияДвижений("ЗаказПоставщику",
															УсловиеДокумента,
															"РасчетыСПоставщиками",
															"");
	ЗаписатьДвиженияПоРегиструРасчетыСПоставщикамиЗаказПоставщику(МассивДокументов);
	
	// Поступление товаров
	УсловиеДокумента = "И НЕ ТаблицаРассматриваемыхДокументов.Магазин.СкладУправляющейСистемы";
	МассивДокументов = НайтиДокументыДляИсправленияДвижений("ПоступлениеТоваров",
															УсловиеДокумента,
															"РасчетыСПоставщиками",
															"");
	ЗаписатьДвиженияПоРегиструРасчетыСПоставщикамиПоступлениеТоваров(МассивДокументов);
	
	// Возврат товаров поставщику
	УсловиеДокумента = "И НЕ ТаблицаРассматриваемыхДокументов.Магазин.СкладУправляющейСистемы";
	МассивДокументов = НайтиДокументыДляИсправленияДвижений("ВозвратТоваровПоставщику",
															УсловиеДокумента,
															"РасчетыСПоставщиками",
															"");
	ЗаписатьДвиженияПоРегиструРасчетыСПоставщикамиВозвратТоваровПоставщику(МассивДокументов);
	
	// РКО
	УсловиеДокумента = "И ТаблицаРассматриваемыхДокументов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)
						| И НЕ ТаблицаРассматриваемыхДокументов.Касса.КассаУправляющейСистемы";
	МассивДокументов = НайтиДокументыДляИсправленияДвижений("РасходныйКассовыйОрдер",
															УсловиеДокумента,
															"РасчетыСПоставщиками",
															"");
	ЗаписатьДвиженияПоРегиструРасчетыСПоставщикамиРКО(МассивДокументов);
	
	// ПКО
	УсловиеДокумента = "И ТаблицаРассматриваемыхДокументов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика)
						| И НЕ ТаблицаРассматриваемыхДокументов.Касса.КассаУправляющейСистемы";
	МассивДокументов = НайтиДокументыДляИсправленияДвижений("ПриходныйКассовыйОрдер",
															УсловиеДокумента,
															"РасчетыСПоставщиками",
															"");
	
	ЗаписатьДвиженияПоРегиструРасчетыСПоставщикамиПКО(МассивДокументов);
	
КонецПроцедуры

Процедура ЗаписатьДвиженияПоРегиструРасчетыСПоставщикамиЗаказПоставщику(МассивДокументов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПоставщику.Ссылка КАК Ссылка,
		|	ЗаказПоставщику.Дата КАК Период,
		|	ЗаказПоставщику.Магазин КАК Магазин,
		|	ЗаказПоставщику.Контрагент КАК Поставщик,
		|	ЗаказПоставщику.Ссылка КАК ДокументРасчета,
		|	ЗаказПоставщику.СуммаДокумента КАК СуммаДокумента,
		|	ЗаказПоставщику.Закрыт КАК Закрыт,
		|	НЕ ЗаказПоставщику.Магазин.СкладУправляющейСистемы КАК ФормироватьДвижения
		|ПОМЕСТИТЬ ТаблицаШапки
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.Ссылка В(&МассивДокументов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаШапки.Ссылка КАК Ссылка,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	ТаблицаШапки.Период КАК Период,
		|	ТаблицаШапки.Магазин КАК Магазин,
		|	ТаблицаШапки.Поставщик КАК Поставщик,
		|	ТаблицаШапки.Ссылка КАК ДокументРасчета,
		|	0 КАК Сумма,
		|	ТаблицаШапки.СуммаДокумента КАК КОплате,
		|	0 КАК КПоступлению,
		|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка) КАК ФормаОплаты,
		|	ЛОЖЬ КАК Взаимозачет,
		|	ЛОЖЬ КАК СторноЗаказаПоставщику
		|ПОМЕСТИТЬ ТаблицаДвижений
		|ИЗ
		|	ТаблицаШапки КАК ТаблицаШапки
		|ГДЕ
		|	ТаблицаШапки.ФормироватьДвижения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаШапки.Ссылка,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		|	ТаблицаШапки.Период,
		|	ТаблицаШапки.Магазин,
		|	ТаблицаШапки.Поставщик,
		|	ТаблицаШапки.Ссылка,
		|	0,
		|	0,
		|	ТаблицаШапки.СуммаДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка),
		|	ЛОЖЬ,
		|	ЛОЖЬ
		|ИЗ
		|	ТаблицаШапки КАК ТаблицаШапки
		|ГДЕ
		|	ТаблицаШапки.ФормироватьДвижения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаШапки.Ссылка,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		|	ТаблицаШапки.Период,
		|	ТаблицаШапки.Магазин,
		|	ТаблицаШапки.Поставщик,
		|	ТаблицаШапки.Ссылка,
		|	0,
		|	ТаблицаШапки.СуммаДокумента,
		|	0,
		|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка),
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	ТаблицаШапки КАК ТаблицаШапки
		|ГДЕ
		|	ТаблицаШапки.ФормироватьДвижения
		|	И ТаблицаШапки.Закрыт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаШапки.Ссылка,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
		|	ТаблицаШапки.Период,
		|	ТаблицаШапки.Магазин,
		|	ТаблицаШапки.Поставщик,
		|	ТаблицаШапки.Ссылка,
		|	0,
		|	0,
		|	ТаблицаШапки.СуммаДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка),
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	ТаблицаШапки КАК ТаблицаШапки
		|ГДЕ
		|	ТаблицаШапки.ФормироватьДвижения
		|	И ТаблицаШапки.Закрыт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДвижений.Ссылка КАК Ссылка,
		|	ТаблицаДвижений.ВидДвижения,
		|	ТаблицаДвижений.Период,
		|	ТаблицаДвижений.Магазин,
		|	ТаблицаДвижений.Поставщик,
		|	ТаблицаДвижений.ДокументРасчета,
		|	ТаблицаДвижений.Сумма,
		|	ТаблицаДвижений.КОплате,
		|	ТаблицаДвижений.КПоступлению,
		|	ТаблицаДвижений.ФормаОплаты,
		|	ТаблицаДвижений.Взаимозачет,
		|	ТаблицаДвижений.СторноЗаказаПоставщику
		|ИЗ
		|	ТаблицаДвижений КАК ТаблицаДвижений
		|ИТОГИ ПО
		|	Ссылка";

	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаДвижений = Выборка.Выбрать();
		ДвиженияДокументаПоРегистру("РасчетыСПоставщиками", Выборка.Ссылка, ВыборкаДвижений);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьДвиженияПоРегиструРасчетыСПоставщикамиПоступлениеТоваров(МассивДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваров.Ссылка КАК Ссылка,
	|	ПоступлениеТоваров.Дата КАК Период,
	|	ПоступлениеТоваров.Магазин КАК Магазин,
	|	ПоступлениеТоваров.Контрагент КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваров.ЗаказПоставщику = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|			ТОГДА ПоступлениеТоваров.Ссылка
	|		ИНАЧЕ ПоступлениеТоваров.ЗаказПоставщику
	|	КОНЕЦ КАК ДокументРасчета,
	|	ПоступлениеТоваров.СуммаДокумента КАК Сумма,
	|	НЕ ПоступлениеТоваров.Магазин.СкладУправляющейСистемы КАК ФормироватьДвижения
	|ПОМЕСТИТЬ ТаблицаШапки
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|ГДЕ
	|	ПоступлениеТоваров.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаШапки.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаШапки.Период КАК Период,
	|	ТаблицаШапки.Магазин КАК Магазин,
	|	ТаблицаШапки.Поставщик КАК Поставщик,
	|	ТаблицаШапки.ДокументРасчета КАК ДокументРасчета,
	|	ТаблицаШапки.Сумма КАК Сумма,
	|	ТаблицаШапки.Сумма КАК КОплате,
	|	0 КАК КПоступлению,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка) КАК ФормаОплаты,
	|	ЛОЖЬ КАК Взаимозачет
	|ИЗ
	|	ТаблицаШапки КАК ТаблицаШапки
	|ГДЕ
	|	ТаблицаШапки.ФормироватьДвижения
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаДвижений = Выборка.Выбрать();
		ДвиженияДокументаПоРегистру("РасчетыСПоставщиками", Выборка.Ссылка, ВыборкаДвижений);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьДвиженияПоРегиструРасчетыСПоставщикамиВозвратТоваровПоставщику(МассивДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка КАК Ссылка,
	|	ВозвратТоваровПоставщику.Дата КАК Период,
	|	ВозвратТоваровПоставщику.Магазин КАК Магазин,
	|	ВозвратТоваровПоставщику.Контрагент КАК Поставщик,
	|	ВозвратТоваровПоставщику.Ссылка КАК ДокументРасчета,
	|	ВозвратТоваровПоставщику.СуммаДокумента КАК Сумма,
	|	НЕ ВозвратТоваровПоставщику.Магазин.СкладУправляющейСистемы КАК ФормироватьДвижения
	|ПОМЕСТИТЬ ТаблицаШапки
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаШапки.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаШапки.Период КАК Период,
	|	ТаблицаШапки.Магазин КАК Магазин,
	|	ТаблицаШапки.Поставщик КАК Поставщик,
	|	ТаблицаШапки.Ссылка КАК ДокументРасчета,
	|	ТаблицаШапки.Сумма КАК Сумма,
	|	ТаблицаШапки.Сумма КАК КОплате,
	|	0 КАК КПоступлению,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка) КАК ФормаОплаты,
	|	ЛОЖЬ КАК Взаимозачет
	|ИЗ
	|	ТаблицаШапки КАК ТаблицаШапки
	|ГДЕ
	|	ТаблицаШапки.ФормироватьДвижения
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаДвижений = Выборка.Выбрать();
		ДвиженияДокументаПоРегистру("РасчетыСПоставщиками", Выборка.Ссылка, ВыборкаДвижений);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьДвиженияПоРегиструРасчетыСПоставщикамиРКО(МассивДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдер.Дата КАК Период,
	|	РасходныйКассовыйОрдер.Контрагент КАК Поставщик,
	|	РасходныйКассовыйОрдер.Касса КАК Касса,
	|	РасходныйКассовыйОрдер.Ссылка КАК ДокументРасчета,
	|	РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма
	|ПОМЕСТИТЬ ТаблицаШапки
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаШапки.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаШапки.Период КАК Период,
	|	ТаблицаШапки.Поставщик КАК Поставщик,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ПоступлениеТоваров
	|			ТОГДА ВЫБОР
	|					КОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.ЗаказПоставщику = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|						ТОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом
	|					ИНАЧЕ РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.ЗаказПоставщику
	|				КОНЕЦ
	|		ИНАЧЕ РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом
	|	КОНЕЦ КАК ДокументРасчета,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.Магазин ЕСТЬ НЕ NULL 
	|			ТОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.Магазин
	|		ИНАЧЕ ТаблицаШапки.Касса.Магазин
	|	КОНЕЦ КАК Магазин,
	|	РасшифровкаПлатежа.Сумма КАК Сумма,
	|	РасшифровкаПлатежа.Сумма КАК КОплате,
	|	0 КАК КПоступлению,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) КАК ФормаОплаты
	|ИЗ
	|	ТаблицаШапки КАК ТаблицаШапки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ПО ТаблицаШапки.Ссылка = РасшифровкаПлатежа.Ссылка
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаДвижений = Выборка.Выбрать();
		ДвиженияДокументаПоРегистру("РасчетыСПоставщиками", Выборка.Ссылка, ВыборкаДвижений);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьДвиженияПоРегиструРасчетыСПоставщикамиПКО(МассивДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Ссылка КАК Ссылка,
	|	ПриходныйКассовыйОрдер.Дата КАК Период,
	|	ПриходныйКассовыйОрдер.Контрагент КАК Поставщик,
	|	ПриходныйКассовыйОрдер.Касса КАК Касса,
	|	ПриходныйКассовыйОрдер.Ссылка КАК ДокументРасчета,
	|	ПриходныйКассовыйОрдер.СуммаДокумента КАК Сумма
	|ПОМЕСТИТЬ ТаблицаШапки
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаШапки.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаШапки.Период КАК Период,
	|	ТаблицаШапки.Поставщик КАК Поставщик,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.Магазин ЕСТЬ НЕ NULL 
	|			ТОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.Магазин
	|		ИНАЧЕ РасшифровкаПлатежа.Ссылка.Касса.Магазин
	|	КОНЕЦ КАК Магазин,
	|	РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом КАК ДокументРасчета,
	|	РасшифровкаПлатежа.Сумма КАК Сумма,
	|	РасшифровкаПлатежа.Сумма КАК КОплате,
	|	0 КАК КПоступлению,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) КАК ФормаОплаты,
	|	ЛОЖЬ КАК Взаимозачет
	|ИЗ
	|	ТаблицаШапки КАК ТаблицаШапки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ПО ТаблицаШапки.Ссылка = РасшифровкаПлатежа.Ссылка
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаДвижений = Выборка.Выбрать();
		ДвиженияДокументаПоРегистру("РасчетыСПоставщиками", Выборка.Ссылка, ВыборкаДвижений);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДвиженияРегистраТоварыКОформлениюИзлишковНедостачПоДокументам(ДокументИмя, ПроверятьДокументОснование = ИСТИНА)
	Перем Отказ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокументов.Ссылка,
	|	ТаблицаДокументов.Дата,
	|	ТаблицаДокументов.ДокументОснование
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	Документ." + ДокументИмя + " КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыКОформлениюИзлишковНедостач.Регистратор
	|ПОМЕСТИТЬ ТаблицаРегистраторов
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюИзлишковНедостач КАК ТоварыКОформлениюИзлишковНедостач
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ТаблицаДокументов.Дата КАК Дата,
	|	ТаблицаРегистраторов.Регистратор,
	|	ТаблицаДокументов.ДокументОснование
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРегистраторов КАК ТаблицаРегистраторов
	|		ПО ТаблицаДокументов.Ссылка = ТаблицаРегистраторов.Регистратор
	|ГДЕ
	|	ТаблицаРегистраторов.Регистратор ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ ПроверятьДокументОснование 
			ИЛИ ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
			Отказ = Ложь;
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументСсылка = Выборка.Ссылка;
			
			ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДокументОбъект.ДополнительныеСвойства);
			Документы[ДокументИмя].ИнициализироватьДанныеДокумента(ДокументСсылка, ДокументОбъект.ДополнительныеСвойства);
			ЗапасыСервер.ОтразитьТоварыКОформлениюИзлишковНедостач(ДокументОбъект.ДополнительныеСвойства, ДокументОбъект.Движения, Отказ);
			
			ДокументОбъект.Движения.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументыПоПроектуИнвентаризацияПоОрдернойСхеме() Экспорт
	
	// Документы Инвентаризхация Товаров
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПересчетТоваров.Ссылка КАК Ссылка,
	|	ПересчетТоваров.Дата КАК Дата,
	|	ПересчетТоваров.Дата КАК ДатаНачала,
	|	ПересчетТоваров.Дата КАК ДатаОкончания,
	|	ПересчетТоваров.Склад,
	|	ПересчетТоваров.Магазин,
	|	ПересчетТоваров.Организация,
	|	ПересчетТоваров.Комментарий,
	|	ПересчетТоваров.Ответственный
	|ИЗ
	|	Документ.ПересчетТоваров КАК ПересчетТоваров
	|ГДЕ
	|	ПересчетТоваров.ДокументОснование = ЗНАЧЕНИЕ(Документ.ПриказНаПроведениеИнвентаризацииТоваров.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументПриказ = Документы.ПриказНаПроведениеИнвентаризацииТоваров.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ДокументПриказ, Выборка);
		ДокументПриказ.Записать(РежимЗаписиДокумента.Проведение);
		
		ДокументИнвентаризация = Выборка.Ссылка.ПолучитьОбъект();
		ДокументИнвентаризация.ДокументОснование = ДокументПриказ.Ссылка;
		ДокументИнвентаризация.Записать();
		
	КонецЦикла;
	
	// Статусы
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПересчетТоваров.Ссылка КАК Ссылка,
	|	ПересчетТоваров.Дата КАК Дата,
	|	ПересчетТоваров.Статус,
	|	ПересчетТоваров.Проведен
	|ИЗ
	|	Документ.ПересчетТоваров КАК ПересчетТоваров
	|ГДЕ
	|	ПересчетТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПересчетовТоваров.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументБезСтатуса = Выборка.Ссылка.ПолучитьОбъект();
		Если Выборка.Проведен Тогда
			ДокументБезСтатуса.Статус = Перечисления.СтатусыПересчетовТоваров.Выполнено;
		Иначе
			ДокументБезСтатуса.Статус = Перечисления.СтатусыПересчетовТоваров.ВРаботе;
		КонецЕсли;
		ДокументБезСтатуса.Записать();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриказНаПроведениеИнвентаризацииТоваров.Ссылка КАК Ссылка,
	|	ПриказНаПроведениеИнвентаризацииТоваров.Дата КАК Дата,
	|	ПриказНаПроведениеИнвентаризацииТоваров.Статус,
	|	ПриказНаПроведениеИнвентаризацииТоваров.Проведен
	|ИЗ
	|	Документ.ПриказНаПроведениеИнвентаризацииТоваров КАК ПриказНаПроведениеИнвентаризацииТоваров
	|ГДЕ
	|	ПриказНаПроведениеИнвентаризацииТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриказовНаПроведениеИнвентаризацийТоваров.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументБезСтатуса = Выборка.Ссылка.ПолучитьОбъект();
		Если Выборка.Проведен Тогда
			ДокументБезСтатуса.Статус = Перечисления.СтатусыПриказовНаПроведениеИнвентаризацийТоваров.Закрыт;
		Иначе
			ДокументБезСтатуса.Статус = Перечисления.СтатусыПриказовНаПроведениеИнвентаризацийТоваров.ВРаботе;
		КонецЕсли;
		ДокументБезСтатуса.Записать();
	КонецЦикла;
	
	// Движения по регистру "ТоварыКОформлениюИзлишковНедостач"
	СоздатьДвиженияРегистраТоварыКОформлениюИзлишковНедостачПоДокументам("ПересчетТоваров", ЛОЖЬ);
	СоздатьДвиженияРегистраТоварыКОформлениюИзлишковНедостачПоДокументам("СписаниеТоваров");
	СоздатьДвиженияРегистраТоварыКОформлениюИзлишковНедостачПоДокументам("ОприходованиеТоваров");
	СоздатьДвиженияРегистраТоварыКОформлениюИзлишковНедостачПоДокументам("ПересчетТоваров");
	
КонецПроцедуры

Процедура ИсправитьЭтапыОплатДокументовПоступлениеТоваровБезЗаказа() Экспорт
	
	УсловиеДокумента = "И ТаблицаРассматриваемыхДокументов.ЗаказПоставщику = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)";
	МассивДокументов = НайтиДокументыДляИсправленияДвижений("ПоступлениеТоваров", УсловиеДокумента, "РасчетыСПоставщиками", "И ЛОЖЬ");
	
	Для Каждого Документ Из МассивДокументов Цикл
		ДокументОбъект = Документ.ПолучитьОбъект();
		Дата = Документ.Дата;
		ДобавитьЭтапОплаты(ДокументОбъект, Дата);
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЭтапОплаты(Объект, ДатаПоступления)

	Если Объект.Товары.Количество() = 0 ИЛИ Объект.ЭтапыОплат.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДатаЭтапаПлатежа = ДатаПоступления;
	
	СтрокаЭтапаОплаты = Объект.ЭтапыОплат.Добавить();
	
	СтрокаЭтапаОплаты.ДатаПлатежа   = ДатаЭтапаПлатежа;
	СтрокаЭтапаОплаты.ПроцентОплаты = 100;
	СтрокаЭтапаОплаты.Сумма = Объект.СуммаДокумента;
	
	ВидПлатежа = Перечисления.ВидПлатежа.ОтсрочкаПлатежа;
	СтрокаЭтапаОплаты.ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
	
	Если ДатаЭтапаПлатежа < ДатаПоступления Тогда
		ВидПлатежа = Перечисления.ВидПлатежа.Предоплата;
	Иначе
		СтрокаЭтапаОплаты.ОтсрочкаПлатежа = (ДатаЭтапаПлатежа - ДатаПоступления) / 86400;
	КонецЕсли;
	
	СтрокаЭтапаОплаты.ВидПлатежа = ВидПлатежа;
	
КонецПроцедуры

Процедура ОбновитьОборудованиеOffline() Экспорт
	 
	Если НЕ ЗначениеЗаполнено(Константы.НижняяГраницаДиапазонаSKUВесовогоТовара.Получить()) Тогда
		Константы.НижняяГраницаДиапазонаSKUВесовогоТовара.Установить(100);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ВерхняяГраницаДиапазонаSKUВесовогоТовара.Получить()) Тогда
		Константы.ВерхняяГраницаДиапазонаSKUВесовогоТовара.Установить(99999);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ПрефиксВнутреннегоШтрихкодаВесовогоТовара.Получить()) Тогда
		Константы.ПрефиксВнутреннегоШтрихкодаВесовогоТовара.Установить(1);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара.Получить()) Тогда
		Константы.ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара.Установить(3);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ПрефиксВнутреннегоШтрихкодаШтучногоТовара.Получить()) Тогда
		Константы.ПрефиксВнутреннегоШтрихкодаШтучногоТовара.Установить(2);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ПрефиксШтрихкодаУзлаРИБ.Получить()) Тогда
		Константы.ПрефиксШтрихкодаУзлаРИБ.Установить(0);
	КонецЕсли;
		  
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Константы.SKUУстанавливаетсяВГлавномУзлеРИБ.Установить(Ложь);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КассыККМ.Ссылка
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.ТипКассы = Значение(Перечисление.ТипыКассККМ.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЭлементОбъект = Выборка.Ссылка.Получитьобъект();
		ЭлементОбъект.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор;
		Попытка
			ЭлементОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура УдалитьЛишниеДвиженияДокументовЗаменаДисконтныхКарт() Экспорт
	
	Если НЕ ОбменДаннымиПовтИсп.ГлавныйУзел() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрацияЗаменыКартПокупателей.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.РегистрацияЗаменыКартПокупателей КАК РегистрацияЗаменыКартПокупателей
	|ГДЕ
	|	НЕ РегистрацияЗаменыКартПокупателей.Регистратор.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументСсылка = Выборка.Регистратор;
		НаборЗаписей = РегистрыСведений.РегистрацияЗаменыКартПокупателей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Переход на версию 2.0.6

Процедура ЗаполнитьИменаКомандНастроекРМК() Экспорт

	Макет = Справочники.НастройкиРМК.ПолучитьМакет("СтандартныеДействияКнопокНижнейПанели");
	
	ТаблицаДействииКнопокНижнейПанели = Новый ТаблицаЗначений;
	ТаблицаДействииКнопокНижнейПанели.Колонки.Добавить("ИмяКоманды");
	ТаблицаДействииКнопокНижнейПанели.Колонки.Добавить("ИмяКнопки");
	
	КолСтрок = Макет.ВысотаТаблицы;
	
	Для НомерСтрокиМакета = 2 По КолСтрок Цикл
		
		СтрокаТаблицы = ТаблицаДействииКнопокНижнейПанели.Добавить();
		СтрокаТаблицы.ИмяКоманды          = Макет.Область(НомерСтрокиМакета,2,НомерСтрокиМакета,2).Текст;
		СтрокаТаблицы.ИмяКнопки           = Макет.Область(НомерСтрокиМакета,3,НомерСтрокиМакета,3).Текст;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиРМККнопкиНижнейПанели.Ссылка
	|ИЗ
	|	Справочник.НастройкиРМК.КнопкиНижнейПанели КАК НастройкиРМККнопкиНижнейПанели
	|ГДЕ
	|	НастройкиРМККнопкиНижнейПанели.ИмяКоманды = """"";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектНастройкиРМК = Выборка.Ссылка.ПолучитьОбъект();
		
		Для каждого СтрокаКнопкиНижнейПанели Из ОбъектНастройкиРМК.КнопкиНижнейПанели Цикл
			ИмяКнопки = СтрокаКнопкиНижнейПанели.ИмяКнопки;
			СтрокиИзМакета = ТаблицаДействииКнопокНижнейПанели.НайтиСтроки(Новый Структура("ИмяКнопки", ИмяКнопки));
			Если Не СтрокиИзМакета.Количество() = 0  Тогда
				ЗаполнитьЗначенияСвойств(СтрокаКнопкиНижнейПанели, СтрокиИзМакета[0], "ИмяКоманды");
			КонецЕсли;
		КонецЦикла;
		
		ОбъектНастройкиРМК.Записать();
		
	КонецЦикла;
	

КонецПроцедуры // ЗаполнитьТаблицуКнопокИзМакета()

Процедура УстановитьДополнительныеКолонкиПриОтображенииНоменклатуры() Экспорт
	
	ЗначениеКонстанты = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	
	Константы.ДополнительнаяКолонкаПриОтображенииНоменклатуры.Установить(ЗначениеКонстанты);
	
КонецПроцедуры

Процедура ПеренумероватьДокументыАссортимента() Экспорт
	
	МассивВидовДокументов = Новый Массив;
	МассивВидовДокументов.Добавить("ИзменениеАссортимента");
	МассивВидовДокументов.Добавить("УстановкаКвотАссортимента");
	Запрос = Новый Запрос;
	Для Каждого ВидДокумента ИЗ МассивВидовДокументов Цикл
		ТекстЗапроса = "ВЫБРАТЬ
		|	Док.Ссылка КАК Ссылка,
		|	Док.Номер КАК Номер,
		|	Док.Дата КАК Дата
		|ИЗ
		|	Документ." + ВидДокумента + " КАК Док
		|ГДЕ
		|	Док.Номер = (ВЫРАЗИТЬ(Док.Номер КАК СТРОКА(9)))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтарыйНомер = СокрЛП(Выборка.Номер);
			Если СтрДлина(СтарыйНомер) <> 9 Тогда
				Продолжить;
			КонецЕсли;
			НовыйНомер = "";
			
			СимволДефис = Найти(СтарыйНомер, "-");
			Если СимволДефис = 0 Тогда
				НовыйНомер = "00" + СтарыйНомер;
			Иначе
				Префикс = Лев(СтарыйНомер, СимволДефис - 1);
				ОстатокНомера = "00" + Сред(СтарыйНомер,СимволДефис + 1);
				НовыйНомер = Префикс + "-" + ОстатокНомера;
			КонецЕсли;
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Номер = НовыйНомер;
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ТекстОшибки = НСтр("ru = 'При перенумерации объекта ""%1"" возникла исключительная ситуация:'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументОбъект);
				ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Обновление информационной базы'"),
					УровеньЖурналаРегистрации.Предупреждение,
					,
					ДокументОбъект,
					ТекстОшибки);
				//
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияСправочникаИдентификаторыОбъектовМетаданных() Экспорт
	
	Если ОбменДаннымиПовтИсп.ГлавныйУзел() = Неопределено Тогда
		
		СписокПлановОбмена = ОбменДаннымиПовтИсп.СписокПлановОбменаБСП();
		
		Для Каждого Элемент Из СписокПлановОбмена Цикл
			
			ИмяПланаОбмена = Элемент.Значение;
			
			Если НЕ ОбменДаннымиПовтИсп.ЭтоПланОбменаРаспределеннойИнформационнойБазы(ИмяПланаОбмена) Тогда
				Продолжить
			КонецЕсли;
			
			МассивУзлов = ОбменДаннымиПовтИсп.ПолучитьМассивУзловПланаОбмена(ИмяПланаОбмена);
			
			Для Каждого Узел Из МассивУзлов Цикл
				
				ПланыОбмена.ЗарегистрироватьИзменения(Узел, Метаданные.Справочники.ИдентификаторыОбъектовМетаданных);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСостояниеОплатыИПоступления() Экспорт

	ЗакупкиСервер.ОбновлениеСостоянияОплатыИПоступления();

КонецПроцедуры

Процедура ЗаполнитьСтатусыСерийВОрдереНаПеремещениеТоваров() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ТаблицаВидовНоменклатур
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.ИспользоватьСерии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПолитикиУчетаСерий.Ссылка КАК ПолитикаУчетаСерий
	|ПОМЕСТИТЬ ТаблицаПолитик
	|ИЗ
	|	Справочник.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|ГДЕ
	|	ПолитикиУчетаСерий.УказыватьПриОтгрузкеПоПеремещению
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыНоменклатурыПолитикиУчетаСерий.Магазин
	|ПОМЕСТИТЬ ТаблицаМагазинов
	|ИЗ
	|	Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
	|ГДЕ
	|	ВидыНоменклатурыПолитикиУчетаСерий.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаВидовНоменклатур.ВидНоменклатуры КАК ВидНоменклатуры
	|			ИЗ
	|				ТаблицаВидовНоменклатур КАК ТаблицаВидовНоменклатур)
	|	И ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий В
	|			(ВЫБРАТЬ
	|				ТаблицаПолитик.ПолитикаУчетаСерий КАК ПолитикаУчетаСерий
	|			ИЗ
	|				ТаблицаПолитик КАК ТаблицаПолитик)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОрдерНаПеремещениеТоваровТовары.Ссылка,
	|	ОрдерНаПеремещениеТоваровТовары.Номенклатура,
	|	ОрдерНаПеремещениеТоваровТовары.Ссылка.Дата,
	|	ОрдерНаПеремещениеТоваровТовары.Ссылка.Магазин
	|ПОМЕСТИТЬ ТаблицаНомеклатурыИДокументов
	|ИЗ
	|	Документ.ОрдерНаПеремещениеТоваров.Товары КАК ОрдерНаПеремещениеТоваровТовары
	|ГДЕ
	|	(ОрдерНаПеремещениеТоваровТовары.СтатусУказанияСерий = 0
	|			ИЛИ ОрдерНаПеремещениеТоваровТовары.СтатусУказанияСерий = 1)
	|	И ОрдерНаПеремещениеТоваровТовары.Ссылка.Магазин В
	|			(ВЫБРАТЬ
	|				ТаблицаМагазинов.Магазин КАК Магазин
	|			ИЗ
	|				ТаблицаМагазинов КАК ТаблицаМагазинов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНомеклатурыИДокументов.Ссылка,
	|	ТаблицаНомеклатурыИДокументов.Дата
	|ИЗ
	|	ТаблицаНомеклатурыИДокументов КАК ТаблицаНомеклатурыИДокументов
	|ГДЕ
	|	ТаблицаНомеклатурыИДокументов.Номенклатура.ВидНоменклатуры В
	|			(ВЫБРАТЬ
	|				ТаблицаВидовНоменклатур.ВидНоменклатуры КАК ВидНоменклатуры
	|			ИЗ
	|				ТаблицаВидовНоменклатур КАК ТаблицаВидовНоменклатур)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНомеклатурыИДокументов.Дата,
	|	ТаблицаНомеклатурыИДокументов.Ссылка";
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ОрдерНаПеремещениеТоваров.ПараметрыУказанияСерий(Неопределено));
	
	Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
		
		ОрдерНаПеремещение = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(ОрдерНаПеремещение, ПараметрыУказанияСерий);
		
		ОрдерНаПеремещение.Записать();
		
	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Переход на версию 2.0.7

Процедура ОбновитьМагазиныДляКонтроляАссортимента() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Магазины.Ссылка КАК Ссылка,
	|	Магазины.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	(НЕ Магазины.ФорматМагазина.Код ЕСТЬ NULL)
	|	И (НЕ Магазины.СкладУправляющейСистемы)
	|	И (НЕ Магазины.КонтролироватьАссортимент)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МагазинОбъект = Выборка.Ссылка.ПолучитьОбъект();
		МагазинОбъект.КонтролироватьАссортимент = Истина;
		
		Попытка
			МагазинОбъект.Записать();
		Исключение
			ТекстОшибки = НСтр("ru = 'При записи магазина ""%1"" возникла исключительная ситуация:'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, МагазинОбъект);
			ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Обновление информационной базы'"),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				Выборка.Ссылка,
				ТекстОшибки);
			//
			МагазинОбъект.ОбменДанными.Загрузка = Истина;
			МагазинОбъект.Записать();
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура КонвертироватьДокументыАссортимента() Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата
	|ИЗ
	|	Документ.ИзменениеАссортимента КАК Док
	|ГДЕ
	|	Док.Операция = &Операция
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Операция", Перечисления.ОперацииИзмененияАссортимента.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ДокументОбъект.УдалитьОперация = "Ввод в ассортимент" Тогда
			ДокументОбъект.Операция = Перечисления.ОперацииИзмененияАссортимента.ВводВАссортимент;
		ИначеЕсли ДокументОбъект.УдалитьОперация = "Ввод в ассортимент с отсрочкой начала продаж" Тогда
			ДокументОбъект.Операция = Перечисления.ОперацииИзмененияАссортимента.ВводВАссортиментСОтсрочкойНачалаПродаж;
		ИначеЕсли ДокументОбъект.УдалитьОперация = "Изменение состояния ассортимента" Тогда
			ДокументОбъект.Операция = Перечисления.ОперацииИзмененияАссортимента.ИзменениеСостоянияАссортимента;
		ИначеЕсли ДокументОбъект.УдалитьОперация = "Вывод из ассортимента" Тогда
			ДокументОбъект.Операция = Перечисления.ОперацииИзмененияАссортимента.ВыводИзАссортимента;
		ИначеЕсли ДокументОбъект.УдалитьОперация = "Перенос в архив / Отзыв" Тогда
			ДокументОбъект.Операция = Перечисления.ОперацииИзмененияАссортимента.ПереносВАрхивОтзыв;
		Иначе
			ДокументОбъект.Операция = Перечисления.ОперацииИзмененияАссортимента.ВводВАссортимент;
			ДокументОбъект.Стадия = Перечисления.СтадииАссортимента.РазрешеныЗакупкиИПродажи;
		КонецЕсли;
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстОшибки = НСтр("ru = 'При конвертации объекта ""%1"" возникла исключительная ситуация:'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументОбъект);
			ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Обновление информационной базы'"),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				Выборка.Ссылка,
				ТекстОшибки);
			//
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Переход на версию 2.0.8

Процедура ИсправитьДвиженияЗаказовПоставщикамПоТоварыКПоступлению() Экспорт
	
	//Заказ поставщику
	УсловиеДокумента = "И НЕ ТаблицаРассматриваемыхДокументов.Закрыт И ТаблицаРассматриваемыхДокументов.Магазин.ИспользоватьОрдернуюСхемуПриПоступлении";
	
	МассивДокументов = НайтиДокументыДляИсправленияДвижений("ЗаказПоставщику", УсловиеДокумента, "ТоварыКПоступлению", "");
	ЗаписатьДвиженияПоРегиструТоварыКПоступлению(МассивДокументов);
	
КонецПроцедуры

Процедура ЗаписатьДвиженияПоРегиструТоварыКПоступлению(МассивДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ТаблицаДокументов.ДатаПоступления КАК Период,
	|	ТаблицаДокументов.Ссылка КАК ДокументОснование,
	|	ТаблицаДокументов.Склад КАК Склад
	|ПОМЕСТИТЬ ТаблицаШапкиДокументов
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаШапкиДокументов.Период,
	|	ТаблицаШапкиДокументов.ДокументОснование,
	|	ТаблицаШапкиДокументов.Склад,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Количество
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаШапкиДокументов КАК ТаблицаШапкиДокументов
	|		ПО ТаблицаТоваров.Ссылка = ТаблицаШапкиДокументов.Ссылка
	|ГДЕ
	|	НЕ ТаблицаТоваров.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка КАК Ссылка,
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.ВидДвижения,
	|	ТаблицаТоваров.Период,
	|	ТаблицаТоваров.ДокументОснование,
	|	ТаблицаТоваров.Склад,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Количество
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		ВыборкаДвижений = Выборка.Выбрать();
		ДвиженияДокументаПоРегистру("ТоварыКПоступлению", Выборка.Ссылка, ВыборкаДвижений);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправитьПризнакБессрочныйЗаказовПоставщикам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.ДнейПросрочкиПоставки = 0";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаказОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаказОбъект.Бессрочный = Истина;
		ЗаказОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		ЗаказОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры


Процедура ЗаполнитьДокументПродажиВРегистреПродаже() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Продажи.Период,
	|	Продажи.Регистратор КАК Регистратор,
	|	Продажи.НомерСтроки КАК НомерСтроки,
	|	Продажи.Активность,
	|	Продажи.Склад,
	|	Продажи.Номенклатура,
	|	Продажи.Характеристика,
	|	Продажи.ДокументПродажи,
	|	Продажи.Продавец,
	|	Продажи.Количество,
	|	Продажи.Стоимость,
	|	Продажи.СтоимостьБезСкидок,
	|	Продажи.НДС,
	|	Продажи.АналитикаХозяйственнойОперации
	|ПОМЕСТИТЬ ТаблицаСНеправильнымиЗаписями
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.ДокументПродажи = НЕОПРЕДЕЛЕНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСНеправильнымиЗаписями.Период,
	|	ТаблицаСНеправильнымиЗаписями.Регистратор КАК Регистратор,
	|	ТаблицаСНеправильнымиЗаписями.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСНеправильнымиЗаписями.Склад,
	|	ТаблицаСНеправильнымиЗаписями.Номенклатура,
	|	ТаблицаСНеправильнымиЗаписями.Характеристика,
	|	ТаблицаСНеправильнымиЗаписями.Продавец,
	|	ТаблицаСНеправильнымиЗаписями.Количество,
	|	ТаблицаСНеправильнымиЗаписями.Стоимость,
	|	ТаблицаСНеправильнымиЗаписями.СтоимостьБезСкидок,
	|	ТаблицаСНеправильнымиЗаписями.НДС,
	|	ТаблицаСНеправильнымиЗаписями.АналитикаХозяйственнойОперации,
	|	ВозвратТоваровОтПокупателяТовары.ДокументПродажи
	|ПОМЕСТИТЬ ТаблицаДополненнаяДаннымиДокумента
	|ИЗ
	|	ТаблицаСНеправильнымиЗаписями КАК ТаблицаСНеправильнымиЗаписями
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|		ПО ТаблицаСНеправильнымиЗаписями.Регистратор = ВозвратТоваровОтПокупателяТовары.Ссылка
	|			И ТаблицаСНеправильнымиЗаписями.НомерСтроки = ВозвратТоваровОтПокупателяТовары.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДополненнаяДаннымиДокумента.Регистратор
	|ИЗ
	|	ТаблицаДополненнаяДаннымиДокумента КАК ТаблицаДополненнаяДаннымиДокумента
	|ГДЕ
	|	НЕ ТаблицаДополненнаяДаннымиДокумента.ДокументПродажи = НЕОПРЕДЕЛЕНО";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Продажи.Период,
		|	Продажи.Регистратор КАК Регистратор,
		|	Продажи.НомерСтроки КАК НомерСтроки,
		|	Продажи.Активность,
		|	Продажи.Склад,
		|	Продажи.Номенклатура,
		|	Продажи.Характеристика,
		|	Продажи.ДокументПродажи,
		|	Продажи.Продавец,
		|	Продажи.Количество,
		|	Продажи.Стоимость,
		|	Продажи.СтоимостьБезСкидок,
		|	Продажи.НДС,
		|	Продажи.АналитикаХозяйственнойОперации
		|ПОМЕСТИТЬ ТаблицаСНеправильнымиЗаписями
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи
		|ГДЕ
		|	Продажи.Регистратор = &Регистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка КАК Ссылка,
		|	ВозвратТоваровОтПокупателяТовары.НомерСтроки КАК НомерСтроки,
		|	ВозвратТоваровОтПокупателяТовары.ДокументПродажи
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		|ГДЕ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Регистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСНеправильнымиЗаписями.Период,
		|	ТаблицаСНеправильнымиЗаписями.НомерСтроки,
		|	ТаблицаСНеправильнымиЗаписями.Склад,
		|	ТаблицаСНеправильнымиЗаписями.Номенклатура,
		|	ТаблицаСНеправильнымиЗаписями.Характеристика,
		|	ЕСТЬNULL(ТаблицаДокумента.ДокументПродажи, НЕОПРЕДЕЛЕНО) КАК ДокументПродажи,
		|	ТаблицаСНеправильнымиЗаписями.Продавец,
		|	ТаблицаСНеправильнымиЗаписями.Количество,
		|	ТаблицаСНеправильнымиЗаписями.Стоимость,
		|	ТаблицаСНеправильнымиЗаписями.СтоимостьБезСкидок,
		|	ТаблицаСНеправильнымиЗаписями.НДС,
		|	ТаблицаСНеправильнымиЗаписями.АналитикаХозяйственнойОперации
		|ИЗ
		|	ТаблицаСНеправильнымиЗаписями КАК ТаблицаСНеправильнымиЗаписями
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК ТаблицаДокумента
		|		ПО ТаблицаСНеправильнымиЗаписями.Регистратор = ТаблицаДокумента.Ссылка
		|			И ТаблицаСНеправильнымиЗаписями.НомерСтроки = ТаблицаДокумента.НомерСтроки";
		
		Запрос.УстановитьПараметр("Регистратор", Выборка.Регистратор);
		
		Результат = Запрос.Выполнить();
		ТаблицаДвижений = Результат.Выгрузить();
		
		НаборЗаписей = РегистрыНакопления.Продажи.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		НаборЗаписей.Загрузить(ТаблицаДвижений);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ОбновитьПрефиксыШтрихкодов() Экспорт
	 
	Если НЕ ЗначениеЗаполнено(Константы.ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара.Получить()) Тогда
		Константы.ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара.Установить(3);
	КонецЕсли;
	
КонецПроцедуры

