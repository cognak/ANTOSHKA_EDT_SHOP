#Область СлужебныеПроцедурыИФункции

#Область ПроцедураУстановкиПериодаРассчитанныхИтогов

//	Обработчик регламентного задания "УстановкаПериодаРассчитанныхИтогов".
Процедура УстановкаПериодаРассчитанныхИтоговОбработчикЗадания() Экспорт

	УстановитьПривилегированныйРежим(Истина);

	УстановитьПериодРассчитанныхИтогов();

КонецПроцедуры

//	Для внутреннего использования.
Процедура УстановитьПериодРассчитанныхИтогов() Экспорт
	
	ДатаСеанса = ТекущаяДатаСеанса();
	МаксимальныйПериод	= КонецМесяца(ДобавитьМесяц(ДатаСеанса, -1)); // Конец прошлого месяца.
	МинимальныйПериод	= КонецМесяца(ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику().МинимальныйПериодРассчитанныхИтогов);

//	Расчет итогов для регистров накопления.
	ВидОстатки = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки;

	ИмяСобытия	  = "RECALC_TOTALS";	//	LNK 17.12.2022 05:47:16
	ИменаОбъектов = Новый Массив;		//	счётчик пересчитанных регистров
	ЖурналСобытий.Регистрация(ИмяСобытия, УровеньЖурналаРегистрации.Информация
		,
		, МаксимальныйПериод
		,
		, "Начало. Запущена процедура пересчёта итогов на '" + Формат(МаксимальныйПериод, "ДФ=dd.MM.yyyy") + "'"
		, МаксимальныйПериод
		, Истина
		, Ложь
	);

//	---------------------------------------------------------------------------------------

	Для Каждого РегистрМетаданные Из Метаданные.РегистрыНакопления Цикл

		#Если _ Тогда
		РегистрМетаданные = Метаданные.РегистрыНакопления.ПродажиПоДисконтнымКартам;
		#КонецЕсли

		Если НЕ РегистрМетаданные.ВидРегистра = ВидОстатки Тогда

			Продолжить;

		КонецЕсли;

		РегистрНакопленияМенеджер = РегистрыНакопления[РегистрМетаданные.Имя];
		#Если _ Тогда
		РегистрНакопленияМенеджер = РегистрыНакопления.ПродажиПоДисконтнымКартам;
		#КонецЕсли

		Если РегистрНакопленияМенеджер.ПолучитьМаксимальныйПериодРассчитанныхИтогов() < МаксимальныйПериод Тогда

			ЖурналСобытий.Регистрация(ИмяСобытия, УровеньЖурналаРегистрации.Информация
				, РегистрМетаданные
				, МаксимальныйПериод
				,
				, "Пересчёт «" + РегистрМетаданные.ПолноеИмя() + "» на '" + Формат(МаксимальныйПериод, "ДФ=dd.MM.yyyy") + "'"
				, РегистрМетаданные.ПолноеИмя()
				, Истина
				, Ложь
			);

			Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел()
			ИЛИ	 МинимальныйПериод = РегистрНакопленияМенеджер.ПолучитьМинимальныйПериодРассчитанныхИтогов()
			ИЛИ	 ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику().МинимальныйПериодРассчитанныхИтогов = '00010101'
			Тогда

				РегистрНакопленияМенеджер.УстановитьМаксимальныйПериодРассчитанныхИтогов(МаксимальныйПериод);

			Иначе

				РегистрНакопленияМенеджер.УстановитьМинимальныйИМаксимальныйПериодыРассчитанныхИтогов(	///	LNK 17.12.2022 07:43:09
					  МинимальныйПериод
					, МаксимальныйПериод
				);

			КонецЕсли;

			ИменаОбъектов.Добавить(РегистрМетаданные.ПолноеИмя());

			Если НЕ РегистрНакопленияМенеджер.ПолучитьИспользованиеТекущихИтогов() Тогда

				Продолжить;

			КонецЕсли;

			РегистрНакопленияМенеджер.ПересчитатьТекущиеИтоги();

		КонецЕсли;

	КонецЦикла;

//	---------------------------------------------------------------------------------------

	ПредставлениеОбъектов = "";

	Если НЕ ИменаОбъектов.Количество() = 0 Тогда

		Для каждого ИмяОбъекта Из ИменаОбъектов Цикл

			ПредставлениеОбъектов = ПредставлениеОбъектов
				+ ?(ПустаяСтрока(ПредставлениеОбъектов), "", Символы.ПС)
				+ ИмяОбъекта
			;

		КонецЦикла;

	КонецЕсли;

	ЖурналСобытий.Регистрация(ИмяСобытия, УровеньЖурналаРегистрации.Информация
		,
		, МаксимальныйПериод
		,
		, "Завершение. Процедура пересчёта итогов на '" + Формат(МаксимальныйПериод, "ДФ=dd.MM.yyyy") + "'"
		+ Символы.ПС + ПредставлениеОбъектов
		, МаксимальныйПериод
		, Истина
		, Ложь
	);

КонецПроцедуры

#КонецОбласти
	
#КонецОбласти








