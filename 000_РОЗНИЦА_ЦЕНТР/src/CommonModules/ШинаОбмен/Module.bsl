
#Область ПрограммныйИнтерфейс

// Выполняет запуск обмена с сайтом из регламентного задания.
//
// Параметры:
//   КодУзлаОбмена - Строка - строка с кодом узла плана обмена.
Процедура ЗаданиеВыполнитьОбмен(КодУзлаОбмена) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	УзелОбмена = ПланыОбмена.Шина.НайтиПоКоду(КодУзлаОбмена);
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с Шиной'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			УзелОбмена.Метаданные(),
			УзелОбмена,
			НСтр("ru = 'Не найден узел обмена с кодом'") + " " + КодУзлаОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "ПометкаУдаления") Тогда
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с Шиной'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			УзелОбмена.Метаданные(),
			УзелОбмена,
			НСтр("ru = 'Настройка обмена помечена на удаление. Обмен отменен.'"));
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбмен(УзелОбмена);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ШинаДанных(ЗапускИнтеграции, КодУзлаОбмена = "") Экспорт
	
	Если ЗапускИнтеграции Тогда
		
		СервисыИнтеграции.ВыполнитьОбработку();
		
	Иначе
		
		ЗаданиеВыполнитьОбмен(КодУзлаОбмена);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьОбмен(УзелОбмена) 

	СтруктураВыгрузки = Новый Структура("УзелОбмена, ДанныеДляОтправки, ТекстЗапроса");
	СтруктураВыгрузки.УзелОбмена = УзелОбмена;

	Выборка = ПланыОбмена.ВыбратьИзменения(УзелОбмена, 1);

	Пока Выборка.Следующий() Цикл

		ДанныеДляОтправки = Выборка.Получить();
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, ДанныеДляОтправки, НазначениеТипаXML.Явное);
		JSONСтрока = ЗаписьJSON.Закрыть();
		
		Сообщение = СервисыИнтеграции.ПродТест.СоздатьСообщение();
		
		ТипЗначения = ТипЗнч(ДанныеДляОтправки);
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
		Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			ВидОбъекта = "Справочник";
		ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			ВидОбъекта = "Документ";
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
			ВидОбъекта = "РегистрыСведений";
		ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
			ВидОбъекта = "РегистрыНакопления";
		Иначе
			ВидОбъекта = "Прочее";
		КонецЕсли;		

		Сообщение.Параметры.Вставить("ВидОбъекта", ВидОбъекта);
		Тело = Сообщение.ПолучитьТелоКакПоток();
		
		Буфер = ПолучитьБуферДвоичныхДанныхИзСтроки(JSONСтрока);
		Тело.Записать(Буфер, 0, Буфер.Размер);
		Тело.Закрыть();

		СервисыИнтеграции.ПродТест.ANTOSHKA_ProdTest_Основной_ПродТест_ПродИсточник.ОтправитьСообщение(Сообщение);
		
		Попытка 
			
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, ДанныеДляОтправки);
			
		Исключение
			
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, ДанныеДляОтправки.Ссылка);
			
		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти 

