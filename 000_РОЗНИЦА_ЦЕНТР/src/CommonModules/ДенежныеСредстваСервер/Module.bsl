
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО ДЕНЕЖНЫМ СРЕДСТВАМ.

// Процедура формирования движений по регистру "Денежные средства (наличные)".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваНаличные(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваНаличные;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваНаличные;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваНаличные()

// Процедура формирования движений по регистру "Денежные средства к поступлению (наличные)".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваКПоступлениюНаличные(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваКПоступлениюНаличные;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваКПоступлениюНаличные;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваКПоступлениюНаличные()

// Процедура формирования движений по регистру "Выплаченная зарплата".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьВыплаченнаяЗарплата(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаВыплаченнаяЗарплата = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыплаченнаяЗарплата;
	
	Если Отказ ИЛИ ТаблицаВыплаченнаяЗарплата.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ВыплаченнаяЗарплата = Движения.ВыплаченнаяЗарплата;
	ВыплаченнаяЗарплата.Записывать = Истина;
	ВыплаченнаяЗарплата.Загрузить(ТаблицаВыплаченнаяЗарплата);
	
КонецПроцедуры // ОтразитьВыплаченнаяЗарплата()

// Процедура формирования движений по регистру "Денежные средства в кассах ККМ".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваККМ(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваККМ;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваККМ;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваККМ()

// Процедура формирования движений по регистру "Расчеты с поставщиками".
Процедура ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщиками;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.РасчетыСПоставщиками.Записывать = Истина;
	Движения.РасчетыСПоставщиками.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Денежные средства к выплате".
Процедура ОтразитьДенежныеСредстваКВыплате(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваКВыплате;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ДенежныеСредстваКВыплате.Записывать = Истина;
	Движения.ДенежныеСредстваКВыплате.Загрузить(Таблица);
	
КонецПроцедуры



// Процедура устанавливает видимость элементов формы по массиву имен.
//
// Параметры:
//	МассивВсехРеквизитов - Массив - Массив имен реквизитов, для которых устанавливается видимость
//	МассивВидимыхРеквизитов - Массив - Массив имен реквизитов, которые должны быть видны на форме.
//
Процедура УстановитьВидимостьЭлементовПоМассиву(Элементы, Знач МассивВсехРеквизитов, Знач МассивВидимыхРеквизитов) Экспорт
	
	Если ТипЗнч(МассивВидимыхРеквизитов) <> ТипЗнч(Новый Массив) Тогда
		МассивВидимыхРеквизитов = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		Позиция = Найти(ЭлементМассива, ".");
		Если Позиция <> 0 Тогда
			ИмяРеквизита = СтрЗаменить(ЭлементМассива, ".", "");
		Иначе
			ИмяРеквизита = ЭлементМассива;
		КонецЕсли;
		
		// Если реквизита нет в массиве видимых реквизитов, снимаем видимость элемента формы.
		ВидимостьРеквизита = (МассивВидимыхРеквизитов.Найти(ЭлементМассива) <> Неопределено);
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено
		 И Элементы[ИмяРеквизита].Видимость <> ВидимостьРеквизита Тогда
			Элементы[ИмяРеквизита].Видимость = ВидимостьРеквизита;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьЭлементовПоМассиву()

// Процедура устанавливает ограничение типа для поля "Документ расчетов" табличной части.
//
// Параметры:
//	МассивОрграниченийТипов - Массив - Содержит ограничивающие типы, для поля ввода.
//	ЭлементРасшифровкаПлатежаДокументРасчетов - ПолеФормы - Поле для ввода документа расчетов.
//
Процедура УстановитьОграничениеТипаДокументРасчетов(ЭлементРасшифровкаПлатежаДокументРасчетов, МассивОрграниченийТипов) Экспорт

	ЭлементРасшифровкаПлатежаДокументРасчетов.ОграничениеТипа = Новый ОписаниеТипов(МассивОрграниченийТипов);

КонецПроцедуры // УстановитьОграничениеТипаЗаказа()

Процедура ПроверитьКассовыйДокумент() Экспорт
	
КонецПроцедуры // ПроверитьКассовыйДокумент
// Функция определяет реквизиты выбранной кассы.
//
// Параметры:
//  Касса - СправочникСсылка.Кассы - Ссылка на кассу
//
// Возвращаемое значение:
//	Структура - Организация и Валюта выбранной кассы
//
Функция ПолучитьРеквизитыКассы(Касса) Экспорт

	Возврат Справочники.Кассы.РеквизитыКассы(Касса);
КонецФункции // ПолучитьРеквизитыКассы()

// Процедура проверяет кассу получателя, указанную в документе.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьКассуПолучателя(ДокументОбъект, Отказ) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.КассаПолучатель)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	Тогда
		РеквизитыКассы = Справочники.Кассы.РеквизитыКассы(ДокументОбъект.КассаПолучатель);
		Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
		   И ЗначениеЗаполнено(ДокументОбъект.Касса)
		Тогда
			
			Если ДокументОбъект.Касса = ДокументОбъект.КассаПолучатель Тогда
				Текст = НСтр("ru = 'Касса получатель равна кассе документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ
				);
			ИначеЕсли ДокументОбъект.Организация <> РеквизитыКассы.Организация Тогда
				Текст = НСтр("ru = 'Организация кассы получателя не соответствует организации документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ
				);
			КонецЕсли;
		ИначеЕсли ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию Тогда
			Если ДокументОбъект.Организация = РеквизитыКассы.Организация Тогда
				Текст = НСтр("ru = 'Организация кассы получателя соответствует организации документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ
				);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКассуПолучателя()

// Процедура проверяет кассу ККМ, указанную в документе.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьКассуККМ(ДокументОбъект, Отказ) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.КассаККМ)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	Тогда
		
		РеквизитыКассыККМ = Справочники.КассыККМ.РеквизитыКассыККМ(ДокументОбъект.КассаККМ);
		Если ДокументОбъект.Организация <> РеквизитыКассыККМ.Организация Тогда
			Текст = НСтр("ru = 'Организация кассы ККМ не соответствует организации документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаККМ",
				,
				Отказ
			);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКассуККМ()


// Процедура формирования движений по регистру "Расчеты по эквайрингу".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьПродажиПоПлатежнымКартам(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаРасчетыПоЭквайрингу = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыПоЭквайрингу;
	
	Если Отказ ИЛИ ТаблицаРасчетыПоЭквайрингу.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ПродажиПоПлатежнымКартам;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаРасчетыПоЭквайрингу);
	
КонецПроцедуры // ОтразитьПродажиПоПлатежнымКартам()

// Процедура формирования движений по регистру "Денежные средства (наличные)".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваВКассахККМ(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваВКассахККМ;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваККМ;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваВКассахККМ()

// Процедура устанавливает параметры выбора для кассы.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементКасса - ПолеФормы - Поле для ввода кассы.
//	ОрганизацияИзНастроекПользователя - Булево - Значение Истина, если организация в документе установлена из настроек пользователя,
//                                               в этом случае связь параметра выбора для реквизита Касса не нужно устанавливать.
//                                               Пользователь должен иметь возможность выбора кассы от любой организации.
//
Процедура УстановитьПараметрыВыбораКассы(Объект, ЭлементКасса, ОрганизацияИзНастроекПользователя = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И (ОрганизацияИзНастроекПользователя = Ложь ИЛИ ЗначениеЗаполнено(Объект.ДокументОснование))
	Тогда
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		ЭлементКасса.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыВыбораКассы()

// Процедура заполняет кассу, банковский счет или эквайринговый терминал в зависимости от формы оплаты документа.
//
// Параметры:
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Фактическая форма оплаты заявки
//	ДанныеЗаполнения - Структура - Данные для заполнения документа
//
Процедура ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты = Неопределено, ДанныеЗаполнения) Экспорт
//	LNK 27.09.2016 09:30:53
	Перем Магазин;
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда

	//	LNK 27.09.2016 09:29:34
		Если ДанныеЗаполнения.Свойство("Магазин") И ЗначениеЗаполнено(ДанныеЗаполнения.Магазин) Тогда

			Касса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Магазин, "КассаМагазина");

		КонецЕсли;

	//	LNK 27.09.2016 09:32:31
		Если НЕ ЗначениеЗаполнено(Касса) Тогда

			Касса = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущаяКасса",);
			Если Не ЗначениеЗаполнено(Касса) Тогда
				Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(
					ДанныеЗаполнения.Организация,
					ФормаОплаты,
					ДанныеЗаполнения.Касса,
					ДанныеЗаполнения.Магазин,
					Пользователи.ТекущийПользователь()
				);
				Если ЗначениеЗаполнено(Касса) И Касса.Владелец <> ДанныеЗаполнения.Организация Тогда
					Касса = Справочники.Кассы.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		
		Если ЗначениеЗаполнено(Касса) Тогда
			ДанныеЗаполнения.Вставить("Касса", Касса);
		КонецЕсли;
		
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
		БанковскийСчет = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущийБанковскийСчет",);
		
		Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
			БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
				ДанныеЗаполнения.Организация,
				ФормаОплаты,
				ДанныеЗаполнения.БанковскийСчет
			);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			ДанныеЗаполнения.Вставить("БанковскийСчет", БанковскийСчет);
		КонецЕсли;
		
	ИначеЕсли ФормаОплаты = Неопределено Тогда
		ЭквайринговыйТерминал = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущийЭквайринговыйТерминал",);
		Если Не ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ЭквайринговыйТерминалПоУмолчанию(
				Неопределено, // Касса
				ДанныеЗаполнения.Организация,
				ДанныеЗаполнения.Магазин
			);
		КонецЕсли;
		ДанныеЗаполнения.Вставить("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ПустаяСсылка());
		ДанныеЗаполнения.Вставить("ПроцентТорговойУступки", 0.00);
		
		Если ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			Реквизиты = Справочники.ЭквайринговыеТерминалы.РеквизитыЭквайринговогоТерминала(ЭквайринговыйТерминал);
			ДанныеЗаполнения.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
			ДанныеЗаполнения.Вставить("ДоговорЭквайринга", Реквизиты.ДоговорЭквайринга);
			ДанныеЗаполнения.Вставить("Касса", Реквизиты.Касса);
			ДанныеЗаполнения.Вставить("Эквайрер", Реквизиты.Эквайрер);
			
			Если ДанныеЗаполнения.Свойство("ДоговорЭквайринга") И ЗначениеЗаполнено(ДанныеЗаполнения.ДоговорЭквайринга) Тогда
				СтруктураПоУмолчанию = Справочники.ДоговорыЭквайринга.ВидОплатыПоУмолчанию(ДанныеЗаполнения.ДоговорЭквайринга);
				Если ЗначениеЗаполнено(СтруктураПоУмолчанию.ВидОплаты) Тогда
					ДанныеЗаполнения.Вставить("ВидОплаты", СтруктураПоУмолчанию.ВидОплаты);
					ДанныеЗаполнения.Вставить("ПроцентТорговойУступки", ЭквайрингСервер.ПолучитьПроцентТорговойУступкиПлатежнаяКарта(ДанныеЗаполнения.ДоговорЭквайринга, СтруктураПоУмолчанию.ВидОплаты));
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыДокументаПоФормеОплаты()

// Процедура устанавливает параметры выбора для эквайрингового терминала.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементЭквайринговыйТерминал - ПолеФормы - Поле для ввода эквайрингового терминала.
//
Процедура УстановитьПараметрыВыбораЭквайринговогоТерминала(Объект, ЭлементЭквайринговыйТерминал) Экспорт
	Перем УстановитьОграничениеСвязиПараметровВыбора;
	
	УстановитьОграничениеСвязиПараметровВыбора = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Тогда
		УстановитьОграничениеСвязиПараметровВыбора = Истина;
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Магазин", "Объект.Магазин"));
	Если УстановитьОграничениеСвязиПараметровВыбора И ЗначениеЗаполнено(Объект.Организация) Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	КонецЕсли;
	ЭлементЭквайринговыйТерминал.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораЭквайринговогоТерминала()


// Функция формирует текст строки "В том числе НДС" платежа.
//
// Параметры:
// Возвращаемое значение:
//	СуммаДокумента - Число - Общая сумма документа
//	МассивДокументов - Массив - Массив документов для определения суммы НДС
//	ДобавлятьТекстВТомЧисле - Булево - Добавлять строку "В т.ч." в текст платежа
//
// Возвращаемое значение:
//	Строка - Текст суммы НДС платежа
//
Функция ТекстСуммаНДСПлатежа(СуммаДокумента, МассивДокументов, ДобавлятьТекстВТомЧисле) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ИсходнаяТаблица.Документ КАК Документ
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	&ТаблицаДокументов КАК ИсходнаяТаблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(Товары.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.СтавкаНДС КАК СтавкаНДС,
	|		Товары.Сумма + ВЫБОР
	|			КОГДА Товары.Ссылка.ЦенаВключаетНДС
	|				ТОГДА 0
	|			ИНАЧЕ Товары.СуммаНДС
	|		КОНЕЦ КАК Сумма
	|	ИЗ
	|		Документ.ЗаказПоставщику.Товары КАК Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|			ПО Товары.Ссылка = ТаблицаДокументов.Документ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Товары.СтавкаНДС,
	|		Товары.Сумма + ВЫБОР
	|			КОГДА Товары.Ссылка.ЦенаВключаетНДС
	|				ТОГДА 0
	|			ИНАЧЕ Товары.СуммаНДС
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ВозвратТоваровПоставщику.Товары КАК Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|			ПО Товары.Ссылка = ТаблицаДокументов.Документ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Товары.СтавкаНДС,
	|		Товары.Сумма + ВЫБОР
	|			КОГДА Товары.Ссылка.ЦенаВключаетНДС
	|				ТОГДА 0
	|			ИНАЧЕ Товары.СуммаНДС
	|		КОНЕЦ
	|	ИЗ
	|		Документ.РеализацияТоваров.Товары КАК Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|			ПО Товары.Ссылка = ТаблицаДокументов.Документ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Товары.СтавкаНДС,
	|		Товары.Сумма + ВЫБОР
	|			КОГДА Товары.Ссылка.ЦенаВключаетНДС
	|				ТОГДА 0
	|			ИНАЧЕ Товары.СуммаНДС
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ПоступлениеТоваров.Товары КАК Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|			ПО Товары.Ссылка = ТаблицаДокументов.Документ) КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.СтавкаНДС
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтавкаНДС
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	ОБЩИЕ");
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Документ", Документы.ТипВсеСсылки());
	Для Сч = 1 По МассивДокументов.Количество() Цикл
		ТаблицаДокументов.Добавить();
	КонецЦикла;
	ТаблицаДокументов.ЗагрузитьКолонку(МассивДокументов, "Документ");
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	
	ТаблицаНДС = Новый ТаблицаЗначений;
	ТаблицаНДС.Колонки.Добавить("СтавкаНДС");
	ТаблицаНДС.Колонки.Добавить("Сумма");
	ТаблицаНДС.Колонки.Добавить("СуммаНДС");
	
	СуммаВсего = 0;
	СуммаКРаспределению = СуммаДокумента;
	
//	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
			СуммаВсего = Выборка.Сумма;
		Иначе
			СтавкаНДСЧисло = ОбработкаТабличнойЧастиТоварыПовтИсп.ПолучитьСтавкуНДСЧислом(Выборка.СтавкаНДС) * 100;
			
			Если СтавкаНДСЧисло <> 0 Тогда
				НоваяСтрока = ТаблицаНДС.Добавить();
				НоваяСтрока.СтавкаНДС = Выборка.СтавкаНДС;
				НоваяСтрока.Сумма = ?(СуммаВсего <> 0, ОКР(СуммаКРаспределению * Выборка.Сумма / СуммаВсего, 2, 1), 0);
				НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма * СтавкаНДСЧисло / (100 + СтавкаНДСЧисло);
				СуммаКРаспределению = СуммаКРаспределению - НоваяСтрока.Сумма;
			Иначе
				СуммаКРаспределению = СуммаКРаспределению - ?(СуммаВсего <> 0, ОКР(СуммаКРаспределению * Выборка.Сумма / СуммаВсего, 2, 1), 0);
			КонецЕсли;
				
			СуммаВсего = СуммаВсего - Выборка.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаНДС.Количество() > 0 Тогда
		
		ТекстНазначениеПлатежаНДС = "";
	
		Для Каждого СтрокаТаблицы Из ТаблицаНДС Цикл
			ТекстНазначениеПлатежаНДС = ТекстНазначениеПлатежаНДС
				+ ?(ПустаяСтрока(ТекстНазначениеПлатежаНДС), "", ", ")
				+ "ПДВ" + "(" + СтрокаТаблицы.СтавкаНДС + ") "
				+ Формат(СтрокаТаблицы.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧН=0-00; ЧГ=");
		КонецЦикла;
			
		Если ДобавлятьТекстВТомЧисле Тогда
			ТекстНазначениеПлатежаНДС = "В т.ч. " + ТекстНазначениеПлатежаНДС;
		КонецЕсли;
		
	Иначе
		ТекстНазначениеПлатежаНДС = "Без податку (ПДВ)";
	КонецЕсли;
	
	Возврат ТекстНазначениеПлатежаНДС;
	
КонецФункции

// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыСКонтрагентами(ХозяйственнаяОперация = Неопределено) Экспорт
	
	Если ХозяйственнаяОперация = Неопределено Тогда 
		Возврат Ложь;
	Иначе
		Возврат ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика
	КонецЕсли;
	
КонецФункции // ЕстьРасчетыСКонтрагентами()

// Функция создает и возвращает документ Внесение денежных средств в кассу ККМ
// Параметры:
//           СуммаВнесения - Число - Сумма внесения в кассу ККМ
//           РКО - ДокументСсылка.РасходныйКассовыйОрдер - РКО на основании которого будет создан документ Внесение ДС в кассу ККМ
//           КассаККМ - Тип СправочникСсылка.КассыККМ - Касса ККМ в которую вносятся ДС
//
Функция СоздатьДокументВнесениеДенежныхСредствВКассуККМ(СуммаВнесения, РКО, КассаККМ) Экспорт

	Реквизиты = Справочники.КассыККМ.РеквизитыКассыККМ(КассаККМ);
	
	СтруктураДанныеЗаполнения = Новый Структура();
	СтруктураДанныеЗаполнения.Вставить("ДокументОснование", РКО);
	СтруктураДанныеЗаполнения.Вставить("Организация", Реквизиты.Организация);
	СтруктураДанныеЗаполнения.Вставить("КассаККМ", КассаККМ);
	СтруктураДанныеЗаполнения.Вставить("СуммаДокумента", СуммаВнесения);
	СтруктураДанныеЗаполнения.Вставить("Дата", ТекущаяДата());
	СтруктураДанныеЗаполнения.Вставить("Ответственный", Пользователи.ТекущийПользователь());
	
	ДокументВнесениеДенегВКассуККМ = Документы.ВнесениеДенежныхСредствВКассуККМ.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокументВнесениеДенегВКассуККМ, СтруктураДанныеЗаполнения);
	ДокументВнесениеДенегВКассуККМ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);

	Возврат ДокументВнесениеДенегВКассуККМ.Ссылка;

КонецФункции

// Функция создает и возвращает документ Выемка денежных средств из кассы ККМ
// Параметры:
//           ИзымаемаяСумма - Число - Изымаемая сумма из кассы ККМ
//           КассаККМ - СправочникСсылка.КассыККМ - Касса ККМ в которую выполняют внесение ДС
//
Функция СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(ИзымаемаяСумма, КассаККМ, СсылкаНаОтчет) Экспорт
	
	ДокументВыемкаДенежныхСредствИзКассыККМ = Документы.ВыемкаДенежныхСредствИзКассыККМ.СоздатьДокумент();
	
	Реквизиты = Справочники.КассыККМ.РеквизитыКассыККМ(КассаККМ);
	
	ДокументВыемкаДенежныхСредствИзКассыККМ.Дата           = ТекущаяДата();
	ДокументВыемкаДенежныхСредствИзКассыККМ.Организация    = Реквизиты.Организация;
	ДокументВыемкаДенежныхСредствИзКассыККМ.КассаККМ       = КассаККМ;
	ДокументВыемкаДенежныхСредствИзКассыККМ.Магазин        = КассаККМ.Магазин;
	ДокументВыемкаДенежныхСредствИзКассыККМ.СуммаДокумента = ИзымаемаяСумма;
	ДокументВыемкаДенежныхСредствИзКассыККМ.Ответственный  = Пользователи.ТекущийПользователь();
	ДокументВыемкаДенежныхСредствИзКассыККМ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствИзКассыККМ;
	
	ДокументВыемкаДенежныхСредствИзКассыККМ.ОтчетОРозничныхПродажах = СсылкаНаОтчет;
	
	ДокументВыемкаДенежныхСредствИзКассыККМ.Записать(РежимЗаписиДокумента.Проведение);
	Возврат ДокументВыемкаДенежныхСредствИзКассыККМ.Ссылка;
	
КонецФункции // СоздатьДокументВыемкаДенежныхСредствИзКассыККМ()

// Функция получает менеджер временных таблиц с кор. счетами оплаты
//
// Параметры
//  СсылкаДокумента  - <ДокументСсылка> - Пустая ссылка типа документа для печати которого необходимо получить кор. счета
//  МассивОбъектов  - <Массив> - Массив ссылок на документы печати
//
// Возвращаемое значение:
//   МенеджерВременныхТаблиц - Менеджер таблиц с кор. счетами
// 
Функция ПолучитьМенеджерТаблицыКорСчетов(СсылкаДокумента, МассивОбъектов) Экспорт

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Документ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям)
	|		КОГДА Документ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу)
	|		ИНАЧЕ Документ.ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ДокументыКорСчета
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыКорСчета.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ЕСТЬNULL(СтатьиДвиженияДенежныхСредств.КорреспондирующийСчет, СтатьиДвиженияДенежныхСредствПоУмолчанию.КорреспондирующийСчет), """") КАК КорреспондирующийСчет
	|ПОМЕСТИТЬ КорСчета
	|ИЗ
	|	ДокументыКорСчета КАК ДокументыКорСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДокументыРасшифровкаПлатежа
	|		ПО (ДокументыРасшифровкаПлатежа.Ссылка = ДокументыКорСчета.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|		ПО (СтатьиДвиженияДенежныхСредств.Ссылка = ДокументыРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредствПоУмолчанию
	|		ПО (СтатьиДвиженияДенежныхСредствПоУмолчанию.ХозяйственнаяОперация = ДокументыКорСчета.ХозяйственнаяОперация)
	|			И (СтатьиДвиженияДенежныхСредствПоУмолчанию.СтатьяХозяйственнойОперацииПоУмолчанию = ИСТИНА)
	|ГДЕ
	|	(ДокументыРасшифровкаПлатежа.Ссылка В (&МассивОбъектов)
	|			ИЛИ ДокументыКорСчета.Ссылка В (&МассивОбъектов))"
	;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриходныйКассовыйОрдер", "Документ." + СсылкаДокумента.Метаданные().Имя);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Выполнить();
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции // ПолучитьМенеджерТаблицыКорСчетов()

// Функция получает сумму документа
Функция ПолучитьСуммуДокумента(ДокументСсылка) Экспорт

	Возврат ДокументСсылка.СуммаДокумента;

КонецФункции // ПолучитьСуммуДокумента()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ НУМЕРАЦИИ

// Формирует числовой номер
Процедура СформироватьЧисловойНомерДокумента(СтруктураПараметров, СформированныйНомер) 
	
	УстановитьПривилегированныйРежим(Истина);

	ПодготовитьСтруктуруПараметров(СтруктураПараметров);
	
	// автоматическая нумерация
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Нумерация");
		ЭлементБлокировки.УстановитьЗначение("Нумератор", 		СтруктураПараметров.Нумератор);
		ЭлементБлокировки.УстановитьЗначение("ПериодНумерации", СтруктураПараметров.ПериодНумерации);
		ЭлементБлокировки.УстановитьЗначение("Организация", 	СтруктураПараметров.Организация);
		ЭлементБлокировки.УстановитьЗначение("ОбособленноеПодразделение", 	СтруктураПараметров.ОбособленноеПодразделение);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ТекущийНомер = РегистрыСведений.Нумерация.Получить(СтруктураПараметров).ТекущийНомер;
		СформированныйНомер = ТекущийНомер + 1;
		
		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Формирует строковый номер
Процедура СформироватьСтроковыйНомерДокумента(СтруктураПараметров, СформированныйНомер) Экспорт
	
	Если СформированныйНомер = "" Тогда
		ЧисловойНомер = 0;
	Иначе
		ЧисловойНомер = Число(СформированныйНомер);
	КонецЕсли;
	
	СформироватьЧисловойНомерДокумента(СтруктураПараметров, ЧисловойНомер);
	
	СформированныйНомер = Формат(ЧисловойНомер, "ЧГ=0");
	
КонецПроцедуры

// Увеличивает очередной номер (при записи документа)
Процедура ЗаписатьОчереднойНомер(СтруктураПараметров, СформированныйНомер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПодготовитьСтруктуруПараметров(СтруктураПараметров);
	
	ЧисловойНомер = Число(СформированныйНомер);
	
	ТекущийНомер = РегистрыСведений.Нумерация.Получить(СтруктураПараметров).ТекущийНомер;
	
	Если ЧисловойНомер > ТекущийНомер Тогда
		МенеджерЗаписи = РегистрыСведений.Нумерация.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Нумератор 		= СтруктураПараметров.Нумератор;
		МенеджерЗаписи.ПериодНумерации 	= СтруктураПараметров.ПериодНумерации;
		МенеджерЗаписи.Организация	 	= СтруктураПараметров.Организация;
		МенеджерЗаписи.ОбособленноеПодразделение = СтруктураПараметров.ОбособленноеПодразделение;
		МенеджерЗаписи.ТекущийНомер 	= ЧисловойНомер;
		МенеджерЗаписи.Записать();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПодготовитьСтруктуруПараметров(СтруктураПараметров)
	
	Если НЕ СтруктураПараметров.Свойство("ОбособленноеПодразделение") Тогда
		СтруктураПараметров.Вставить("ОбособленноеПодразделение", Справочники.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ПериодНумерации") Тогда
		ПериодНумерации = НачалоПериодаНумерации(СтруктураПараметров.Дата);
		СтруктураПараметров.Вставить("ПериодНумерации", ПериодНумерации);
		СтруктураПараметров.Удалить("Дата");
	КонецЕсли;
	
КонецПроцедуры

// Вычисляет начало периода нумерации
Функция НачалоПериодаНумерации(Дата) Экспорт
	
	ПериодНумерации = НачалоГода(Дата);
		
	Возврат ПериодНумерации;
	
КонецФункции
