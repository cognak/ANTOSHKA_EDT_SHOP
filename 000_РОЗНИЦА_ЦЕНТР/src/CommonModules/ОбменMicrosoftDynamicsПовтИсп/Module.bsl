//	LNK 03.12.2018 12:56:28
Функция ОбменАктивен(ТипРегистрации = Неопределено)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Возврат НЕ ПолучитьМассивУзлов(ТипРегистрации, Истина).Количество() = 0;

КонецФункции // ОбменАктивен()

//	LNK 19.08.2019 10:28:16
Функция ПолучитьМассивУзлов(ТипРегистрации = Неопределено, ВсеАктивные = Ложь)	Экспорт

	Возврат ОбменMicrosoftDynamicsСервер.ПолучитьМассивУзлов(ТипРегистрации, ВсеАктивные);

КонецФункции

//	LNK 03.12.2019 09:49:44
Функция ПолучитьДанныеУзла(УзелИнформационнойБазы)	Экспорт

	Возврат ПланыОбмена.ОбменMicrosoftDynamics.ПолучитьДанныеУзла(УзелИнформационнойБазы);

КонецФункции

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

//	LNK 23.01.2019 14:46:42
Функция ПолучитьИмяМассива(ТипРегистрации)	Экспорт

	Если ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ДействующиеЦены
	Тогда	ИмяМассива = "products";

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ЦеныНоменклатуры
	Тогда	ИмяМассива = "products";

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ТоварыНаСкладах
	Тогда	ИмяМассива = "products";

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Контрагенты
	Тогда	ИмяМассива = "clients";

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Магазины
	Тогда	ИмяМассива = "stores";

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Номенклатура
	Тогда	ИмяМассива = "goods";

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ЗапросДоступности
	Тогда	ИмяМассива = "requestAvailability";

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Документы
	Тогда	ИмяМассива = "sales";

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.СправочникиДругие
	Тогда	ИмяМассива = "elements";

	Иначе
		
		ВызватьИсключение "нет определения типа регистрации «" + ТипРегистрации + "»";

	КонецЕсли;

	Возврат ИмяМассива;

КонецФункции // ПолучитьИмяМассива()

//	LNK 23.01.2019 14:46:46
Функция ПолучитьИмяПроцедурыWebAPI(ТипРегистрации, ИмяУточнённое = "")	Экспорт

	Если ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ДействующиеЦены
	Тогда	ИмяПроцедуры = "/api/Prices/SendPrices";

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ЦеныНоменклатуры
	Тогда	ИмяПроцедуры = "/api/Prices/UpdatePrices";

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ТоварыНаСкладах
	Тогда	ИмяПроцедуры = "/api/Remains/SendRemains";

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Контрагенты
	Тогда	ИмяПроцедуры = "/api/HistoryData/SendClientData";

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Магазины
	Тогда	ИмяПроцедуры = "/api/Stores/SendStores";

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Документы
	Тогда	ИмяПроцедуры = "/api/HistorySales/SendHistorySales";

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ЗапросДоступности
	Тогда	ИмяПроцедуры = "/api/Orders/RequestAvailability";

	ИначеЕсли ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.СправочникиДругие
	Тогда	ИмяПроцедуры = "/api/GetDataFrom1C/DifferentData";

	Иначе
		
		ВызватьИсключение "нет определения типа регистрации «" + ТипРегистрации + "»";

	КонецЕсли;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	Если НЕ ПустаяСтрока(ИмяУточнённое) Тогда

		ИмяПроцедуры = ИмяУточнённое;

	КонецЕсли;

	Возврат ИмяПроцедуры;

КонецФункции

//	LNK 29.07.2019 12:51:02
Функция ИмяПроцедурыWebAPI(ТипРегистрации, ИмяУточнённое = "")	Экспорт

	ПолноеИмяМетода = ОбменMicrosoftDynamicsПовтИсп.ПолучитьИмяПроцедурыWebAPI(ТипРегистрации, ИмяУточнённое);

	Возврат ОбщегоНазначенияКлиентСервер.lx_GetTooken(ПолноеИмяМетода, "/");

КонецФункции

Функция УчетнаяПолитика(Магазин, ГраницаСреза = '00010101')	Экспорт

	Возврат ОбменMicrosoftDynamicsСервер.УчетнаяПолитика(Магазин, ГраницаСреза);

КонецФункции

//	LNK 23.04.2019 13:39:10
Функция МагазинамРазрешенОбменCRM(ГраницаСреза = '00010101')	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Магазины.Ссылка КАК Магазин
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаМагазинов.СрезПоследних(&ГраницаСреза, Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК ПолитикаОбщая
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаМагазинов.СрезПоследних(&ГраницаСреза, НЕ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК ПолитикаМагазина
	|		ПО Магазины.Ссылка = ПолитикаМагазина.Магазин
	|ГДЕ
	|	НЕ(Магазины.ПометкаУдаления
	|				ИЛИ Магазины.Блокирован
	|				ИЛИ Магазины.СкладУправляющейСистемы)
	|	И Магазины.ВведенВЭксплуатацию
	|	И ЕСТЬNULL(ПолитикаМагазина.CRM_РазрешитьОбменВходящий, ПолитикаОбщая.CRM_РазрешитьОбменВходящий) = ИСТИНА"
	);
	Запрос.УстановитьПараметр("ГраницаСреза", ?(ГраницаСреза = '00010101', ТекущаяДатаСеанса(), ГраницаСреза));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Магазин");

КонецФункции // МагазинамРазрешенОбменCRM()

//	LNK 12.04.2019 11:53:30
Функция ОпределитьТипРегистрации(ПолноеИмя)	Экспорт

	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);

	Если ОбъектМетаданных = Метаданные.РегистрыСведений.ДействующиеЦеныНоменклатуры Тогда
		
		ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ДействующиеЦены;

	ИначеЕсли ОбъектМетаданных = Метаданные.Документы.ЧекККМ
		ИЛИ   ОбъектМетаданных = Метаданные.Документы.ВозвратТоваровОтПокупателя
		ИЛИ   ОбъектМетаданных = Метаданные.Документы.РеализацияТоваров
		ИЛИ	  ОбъектМетаданных = Метаданные.РегистрыСведений.ОбъектУчтенВNavision Тогда
		
		ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Документы;

	ИначеЕсли ОбъектМетаданных = Метаданные.Документы.ЗапросДоступностиТоваров ИЛИ ОбъектМетаданных = Метаданные.РегистрыСведений.СостояниеЗапросаДоступностиТоваров Тогда
		
		ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ЗапросДоступности;

	ИначеЕсли ОбъектМетаданных = Метаданные.Справочники.Контрагенты ИЛИ ОбъектМетаданных = Метаданные.Справочники.ИнформационныеКарты
	ИЛИ ОбъектМетаданных = Метаданные.Документы.ВыдачаДисконтныхКарт ИЛИ ОбъектМетаданных = Метаданные.Документы.ЗаменаДисконтныхКарт	Тогда
		
		ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Контрагенты;

	ИначеЕсли ОбъектМетаданных = Метаданные.Справочники.Магазины ИЛИ ОбъектМетаданных = Метаданные.Справочники.Склады Тогда
		
		ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Магазины;

	ИначеЕсли ОбъектМетаданных = Метаданные.Справочники.Номенклатура Тогда
		
		ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.Номенклатура;

	ИначеЕсли ОбъектМетаданных = Метаданные.РегистрыНакопления.ТоварыНаСкладах Тогда
		
		ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ТоварыНаСкладах;

	ИначеЕсли ОбъектМетаданных = Метаданные.РегистрыСведений.ЦеныНоменклатуры Тогда
		
		ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.ЦеныНоменклатуры;

	ИначеЕсли ОбъектМетаданных = Метаданные.Справочники.ИменаЛюдей Тогда
		
		ТипРегистрации = Перечисления.ТипыРегистрацийMicrosoftDynamics.СправочникиДругие;

	Иначе
		
		ВызватьИсключение "Нет описания в ТипыРегистрацийMicrosoftDynamics для имени «" + ПолноеИмя + "»";

	КонецЕсли;

	Возврат ТипРегистрации;

КонецФункции // ОпределитьТипРегистрации()

//	LNK 25.07.2019 10:13:59
Функция ИмяСобытияЖурнала(ТипРегистрации = Неопределено, Получение = Ложь)	Экспорт

	Если ЗначениеЗаполнено(ТипРегистрации) Тогда

			Суффикс = "." + ОбщегоНазначенияКлиентСервер.РеквизитПеречисления(ТипРегистрации);

	Иначе	Суффикс = "";
	
	КонецЕсли;

	Возврат "ОбменДанными." + ?(Получение = Истина, "ПолучениеИз", "ВыгрузкаВ") + "MSCRM" + Суффикс;

КонецФункции // ИмяСобытияЖурнала()

//	LNK 16.08.2019 07:06:01
Функция ИдентификаторМагазина(Магазин, Назначение = Неопределено)	Экспорт

	Идентификатор = "";

	Если ЗначениеЗаполнено(Магазин) Тогда

		Если Назначение = Перечисления.УчетныеСистемыКомпании.MSDynCRM Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаСоответствий.УникальныйИдентификаторПриемника КАК Идентификатор
			|ИЗ
			|	РегистрСведений.СоответствияОбъектовУчетныхСистем КАК ТаблицаСоответствий
			|ГДЕ
			|	ТаблицаСоответствий.Ссылка = &Магазин
			|	И ТаблицаСоответствий.УчетнаяСистема = значение(Перечисление.УчетныеСистемыКомпании.MSDynCRM)"
			);
			Запрос.УстановитьПараметр("Магазин", Магазин);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда

				Идентификатор = Выборка.Идентификатор;

			КонецЕсли;

		Иначе

			Идентификатор = СокрЛП(Магазин.УникальныйИдентификатор());

		КонецЕсли;

	КонецЕсли;

	Возврат Идентификатор;

КонецФункции

#Область НекоторыеФиксированныеПеречисления

Функция КодыТиповДоставки(КлючПоиска)	Экспорт

	ЗначениеВозврата = Новый Соответствие;
	СоставОригинала  = Новый Соответствие;
	СоставОригинала.Вставить(Перечисления.ТипДоставкиЗаказПокупателя.Самовывоз, "100000000");
	СоставОригинала.Вставить(Перечисления.ТипДоставкиЗаказПокупателя.НоваяПочтаДоставкаПоАдресу, "100000001");
	СоставОригинала.Вставить(Перечисления.ТипДоставкиЗаказПокупателя.НоваяПочтаДоставкаВОтделение, "100000002");

	Если НРег(КлючПоиска) = "код" Тогда

		Для каждого КлючЗначение Из СоставОригинала Цикл

			ЗначениеВозврата.Вставить(КлючЗначение.Значение, КлючЗначение.Ключ);

		КонецЦикла;

	Иначе

		ЗначениеВозврата = СоставОригинала;

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции // КодыТиповДоставки()

Функция КодыОператоровДоставки(КлючПоиска)	Экспорт

	ЗначениеВозврата = Новый Соответствие;
	СоставОригинала  = Новый Соответствие;
	СоставОригинала.Вставить(Перечисления.ОператорыДоставки.ВнутренняяЛогистика, "100000001");
	СоставОригинала.Вставить(Перечисления.ОператорыДоставки.НоваяПочта     , "100000000");

	Если НРег(КлючПоиска) = "код" Тогда

		Для каждого КлючЗначение Из СоставОригинала Цикл

			ЗначениеВозврата.Вставить(КлючЗначение.Значение, КлючЗначение.Ключ);

		КонецЦикла;

	Иначе

		ЗначениеВозврата = СоставОригинала;

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции // КодыОператоровДоставки()

Функция КодыСтатусовЗапросов(КлючПоиска)	Экспорт

	ЗначениеВозврата = Новый Соответствие;
	СоставОригинала  = Новый Соответствие;
	СоставОригинала.Вставить(Перечисления.СтатусыЗапросовДоступностиТоваров.Подготовить, "");
	СоставОригинала.Вставить(Перечисления.СтатусыЗапросовДоступностиТоваров.Согласован , "100000001");
	СоставОригинала.Вставить(Перечисления.СтатусыЗапросовДоступностиТоваров.Отменён    , "100000005");

	Если НРег(КлючПоиска) = "код" Тогда

		Для каждого КлючЗначение Из СоставОригинала Цикл

			ЗначениеВозврата.Вставить(КлючЗначение.Значение, КлючЗначение.Ключ);

		КонецЦикла;

	Иначе

		ЗначениеВозврата = СоставОригинала;

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции // КодыОператоровДоставки()

Функция ПолучитьКодТипаОплаты(ТипОплаты, ТипУслугиБанка = Неопределено)	Экспорт

	Если ТипУслугиБанка = Перечисления.ТипыУслугБанка.ОплатаЧастями Тогда

		КодОплаты = "100000005";

	ИначеЕсли ТипУслугиБанка = Перечисления.ТипыУслугБанка.МгновеннаяРассрочка Тогда

		КодОплаты = "100000006";
	
	Иначе

		Если ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда

			КодОплаты = "100000000";

		ИначеЕсли ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные Тогда

			КодОплаты = "100000001";

		ИначеЕсли ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПодарочныйСертификат Тогда

			КодОплаты = "100000002";

		Иначе

			КодОплаты = "";

		КонецЕсли;

	КонецЕсли;

	Возврат КодОплаты;

КонецФункции // КодыТиповОплаты()

Функция ПолучитьСтатусЗаказаПокупателя(КодСтатуса)	Экспорт

	Если КодСтатуса = "1" Тогда
		
		Значение = Перечисления.СтатусыЗаказовПокупателей.Закрыт;

	ИначеЕсли КодСтатуса = "0" Тогда
		
		Значение = Перечисления.СтатусыЗаказовПокупателей.Отменён;

	Иначе
		
		Значение = Перечисления.СтатусыЗаказовПокупателей.Согласован;

	КонецЕсли;

	Возврат Значение;

КонецФункции // ПолучитьСтатусЗаказаПокупателя()

Функция ПолучитьСтавкуНДС(СтавкаСтрокой)	Экспорт

	Если СтавкаСтрокой = "20%" Тогда
		
		СтавкаНДС = Перечисления.СтавкиНДС.НДС20;

	ИначеЕсли СтавкаСтрокой = "7%" Тогда
		
		СтавкаНДС = Перечисления.СтавкиНДС.НДС7;

	Иначе
		
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	
	КонецЕсли;

	Возврат СтавкаНДС;

КонецФункции // ПолучитьСтавкуНДС()

Функция ПолДляCRM(ПолСсылка, ТипВозврата = "строка")	Экспорт

	Если НРег(ТипВозврата = "число") Тогда

		ЗначениеВозврата = ?(ПолСсылка = Перечисления.ПолФизическогоЛица.Женский, 0, 1);

	Иначе	//	иначе строка

		ЗначениеВозврата = ?(ПолСсылка = Перечисления.ПолФизическогоЛица.Женский, "female", "male");

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции

#КонецОбласти








