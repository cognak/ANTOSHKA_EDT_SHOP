
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ТАБЛИЧНОЙ ЧАСТИ ЭТАПЫ ОПЛАТ

//Процедура формирует строку ТЧ ЭтапыОплаты,
//стандартная обработка игнорируется через параметр Отказ
Процедура ДобавитьЭтапОплаты(Объект, Элементы, СуммаЗаказа, ДокументПоступленияСуществует, Отказ, Копирование = Ложь, ЗапрашиватьДатуПлатежа = Истина) Экспорт
	
	СуммаОплаты = Объект.ЭтапыОплат.Итог("Сумма");
	
	ЭтоЗаказПоставщику = ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику");
	
	Если СуммаОплаты > СуммаЗаказа Тогда
		
		Если ДокументПоступленияСуществует Тогда
			
			ТекстОшибки = НСтр("ru = 'Добавление платежа не требуется
			|сумма оплат %СуммаОплаты% превышает сумму 
			|поступления товаров %СуммаЗаказа%'");
			
		Иначе
			
			ТекстОшибки = НСтр("ru = 'Добавление платежа не требуется
			|сумма оплат %СуммаОплаты% превышает 
			|сумму заказа %СуммаЗаказа%'");
						
		КонецЕсли;
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки,"%СуммаОплаты%",СуммаОплаты);
		ТекстОшибки = СтрЗаменить(ТекстОшибки,"%СуммаЗаказа%",СуммаЗаказа);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект.ЭтапыОплат",
			,
			Отказ);
	
	ИначеЕсли СуммаЗаказа <> 0 И СуммаОплаты = СуммаЗаказа Тогда
				
		Если ДокументПоступленияСуществует Тогда
			
			ТекстОшибки = НСтр("ru = 'Добавление платежа не требуется
			|сумма оплат %СуммаОплаты% соответствует сумме 
			|поступления товаров %СуммаЗаказа%'");
			
		Иначе
			
			ТекстОшибки = НСтр("ru = 'Добавление платежа не требуется
			|сумма оплат %СуммаОплаты% соответствует
			|сумме заказа %СуммаЗаказа%'");
			
		КонецЕсли;
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки,"%СуммаОплаты%",СуммаОплаты);
		ТекстОшибки = СтрЗаменить(ТекстОшибки,"%СуммаЗаказа%",СуммаЗаказа);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект.ЭтапыОплат",
			,
			Отказ);
		
	ИначеЕсли СуммаЗаказа = 0 Тогда
									
		ТекстОшибки = НСтр("ru = 'Не заданы суммы в табличной части ""Товары""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект.Товары",
			,
			Отказ);
		
	Иначе
		
		ДатаПоступления = ?(ЭтоЗаказПоставщику, Объект.ДатаПоступления, НачалоДня(Объект.Дата));
		
		СуммаОплаты = СуммаЗаказа - СуммаОплаты;
		
		Если СуммаОплаты <> 0 Тогда
			
			ДатаЭтапаПлатежа = ДатаПоступления;
			
			Если Объект.ЭтапыОплат.Количество() > 0 Тогда
				
				ДатаЭтапаПлатежа = Макс(Объект.ЭтапыОплат[Объект.ЭтапыОплат.Количество()-1].ДатаПлатежа,ДатаПоступления);
				
			КонецЕсли;
			
			Если НЕ ЗапрашиватьДатуПлатежа
				И ЗначениеЗаполнено(ДатаЭтапаПлатежа) Тогда
				
				РезультатВыбора = Истина;
				
			Иначе	
				
				РезультатВыбора = ВвестиДату(ДатаЭтапаПлатежа, "Введите дату платежа", ЧастиДаты.Дата);
				
			КонецЕсли;
			
			Если НЕ РезультатВыбора Тогда
				
				Отказ = Истина;
				
			Иначе
				
				Если ДатаЭтапаПлатежа = Дата('00010101') Тогда
					
					ТекстОшибки = НСтр("ru = 'Не выбрана дата платежа'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					"Объект",
					,
					Отказ);
					
				Иначе
					
					
					СтрокаЭтапаОплаты = Объект.ЭтапыОплат.Добавить();
					СтрокаЭтапаОплаты.ДатаПлатежа   = ДатаЭтапаПлатежа;
					СтрокаЭтапаОплаты.ПроцентОплаты = ?(СуммаЗаказа = 0, 0, Окр(100*СуммаОплаты/СуммаЗаказа, 2, РежимОкругления.Окр15как20));
					
					Для Инд = 0 По Объект.ЭтапыОплат.Количество() - 2 Цикл
						ЗакупкиКлиент.ПересчитатьСуммуПроцентОплаты(Объект, СуммаЗаказа, Объект.ЭтапыОплат[Инд], Объект.ЭтапыОплат[Инд].Сумма, Истина);
					КонецЦикла;
					
					СтрокаЭтапаОплаты.Сумма = СуммаОплаты;
					СтрокаЭтапаОплаты.Сумма = СтрокаЭтапаОплаты.Сумма + (СуммаЗаказа - Объект.ЭтапыОплат.Итог("Сумма"));
					ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидПлатежа.ОтсрочкаПлатежа");
					Если Копирование Тогда
						ТекущаяСтрока = Элементы.ЭтапыОплат.ТекущиеДанные;
						Если ТекущаяСтрока <> Неопределено Тогда
							СтрокаЭтапаОплаты.ФормаОплаты = ТекущаяСтрока.ФормаОплаты;
						КонецЕсли;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(СтрокаЭтапаОплаты.ФормаОплаты) Тогда
						СтрокаЭтапаОплаты.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная");
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДатаПоступления) Тогда
						
						Если ДатаЭтапаПлатежа < ДатаПоступления Тогда
							
							ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидПлатежа.Предоплата");
							
						Иначе
							
							СтрокаЭтапаОплаты.ОтсрочкаПлатежа = (ДатаЭтапаПлатежа - ДатаПоступления) / 86400;
							
						КонецЕсли;
						
					Иначе
						
						ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидПлатежа.Предоплата");
						
					КонецЕсли;
					
					СтрокаЭтапаОплаты.ВидПлатежа = ВидПлатежа;
					
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает процент оплаты и сумму оплаты
//
// Параметры
//  СтрокаПересчета  - Строка табличного поля Этапы оплат
//  ЗначениеПересчета - Число - Значение относительно которого выполняется пересчет
//  ПересчитатьПроцентОплаты - Булево - Признак что пересчитывается процент оплаты или сумма оплаты
Процедура ПересчитатьСуммуПроцентОплаты(Объект, СуммаИтог, СтрокаПересчета, ЗначениеПересчета, ПересчитатьПроцентОплаты) Экспорт 
	
	
	ИмяКолонкиПроцент = "ПроцентОплаты";
	
	Если НЕ СуммаИтог = 0 Тогда
		
		Если ПересчитатьПроцентОплаты Тогда
			
			СтрокаПересчета[ИмяКолонкиПроцент] = Окр(100*ЗначениеПересчета/СуммаИтог, 2, РежимОкругления.Окр15как20);
			
		Иначе
			
			СтрокаПересчета.Сумма = Окр(ЗначениеПересчета / 100 * СуммаИтог, 2, РежимОкругления.Окр15как20);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

