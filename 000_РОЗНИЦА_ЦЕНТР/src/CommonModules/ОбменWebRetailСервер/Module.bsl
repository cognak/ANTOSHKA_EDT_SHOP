//	LNK 12.08.2019 11:30:27
Функция ВнешнийРесурсДоступен(ТекстОшибки)

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	РесурсДоступен = Ложь;

	Попытка

		Подключение    = СервисыСервер.Подключение("RetailPack");
		РесурсДоступен = Подключение.Ping();

		Если НЕ РесурсДоступен Тогда

			ТекстОшибки = "Отключено по команде центрального узла";

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();

	КонецПопытки;

	Возврат РесурсДоступен;

КонецФункции

//	LNK 12.08.2019 11:23:31
Процедура ПроверкаДоступностиWebRetail(УчитыватьСчётчик) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Если НЕ Константы.РесурсWebRetailСчётчик.Получить() = 0 Тогда

			Константы.РесурсWebRetailСчётчик.Установить(0);

		КонецЕсли;

		Если Константы.РесурсWebRetailДоступен.Получить() = Ложь Тогда

			Константы.РесурсWebRetailДоступен.Установить(Истина);

		КонецЕсли;

	Иначе

		Если Константы.РесурсWebRetailРучноеОтключение.Получить() = Истина Тогда

		//	Контроль доступности отключен.
			Возврат;

		КонецЕсли;

		ТекстОшибки = "";

		Если ВнешнийРесурсДоступен(ТекстОшибки) Тогда

			Если НЕ Константы.РесурсWebRetailСчётчик.Получить() = 0 Тогда

				Константы.РесурсWebRetailСчётчик.Установить(0);

			КонецЕсли;

			Если Константы.РесурсWebRetailДоступен.Получить() = Ложь Тогда

				МенеджерКонстанты = Константы.РесурсWebRetailДоступен.СоздатьМенеджерЗначения();
				МенеджерКонстанты.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);
				МенеджерКонстанты.Значение = Истина;
				МенеджерКонстанты.Записать();

				ЖурналСобытий.Регистрация("WEBRT.Доступность", УровеньЖурналаРегистрации.Примечание
					, Метаданные.Константы.РесурсWebRetailДоступен
					, Истина
					,
					, "Работа с ресурсом разрешена"
					,
					, Истина
				);

			КонецЕсли;

		Иначе

			КоличествоПопыток = Константы.РесурсWebRetailСчётчик.Получить();

			Если НЕ УчитыватьСчётчик = Истина ИЛИ КоличествоПопыток >= 2 Тогда	//	это уже ТРЕТЬЯ попытка

				Если Константы.РесурсWebRetailДоступен.Получить() = Истина Тогда

					МенеджерКонстанты = Константы.РесурсWebRetailДоступен.СоздатьМенеджерЗначения();
					МенеджерКонстанты.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);
					МенеджерКонстанты.Значение = Ложь;
					МенеджерКонстанты.Записать();

					Константы.РесурсWebRetailСчётчик.Установить(0);

					ЖурналСобытий.Регистрация("WEBRT.Доступность", УровеньЖурналаРегистрации.Предупреждение
						, Метаданные.Константы.РесурсWebRetailДоступен
						, Ложь
						,
						, "Работа с ресурсом запрещена" + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС + ТекстОшибки)
						,
						, Истина
					);

				КонецЕсли;

			Иначе

				Константы.РесурсWebRetailСчётчик.Установить(КоличествоПопыток + 1);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//Преобразует документ в JSON и отправляет на сервер 1С табелирования офиса
//{
//	"Shop": "Одесса",
//	"Shop_id": "2394234-23489234234-234322-23423425",
//	"Period":"20221001",
//	"TypeDoc": "Аванс",
//	"StartPeriod": "20221001",
//	"EndPeriod": "20221015",
//	"Tabel": [{
//		"Employer_id": "0000211",
//		"Name": "Огризко Тарас Васильевич",
//		"jobTittle": "Директор",
//		"PaymentType": "Оклад",
//		"Day01": "8",
//		"Day02": "8",
//		........
//		"Day30": "8",
//		"Day31": "8",
//		"SumDay": "23",
//		"SumHours": "184",
//		"Vacation": "0"
//	}]
//}
Функция ПреобразоватьТабельВJSON(ДокументТабель) Экспорт
	
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("Shop",СокрЛП(ДокументТабель.Магазин));
	СтруктураДокумента.Вставить("Shop_id",СокрЛП(ДокументТабель.Магазин.УникальныйИдентификатор()));
	//2023-02-05 sa Оказывается можно сопоставлять магазины в рознице и базе табелирования по НомерМагазина. 
	//Только в базе Кривыхручек НомерМагазина - это строка. Преобразовываем.
	СтруктураДокумента.Вставить("Shop_Num",Строка(ДокументТабель.Магазин.НомерМагазина));  
	СтруктураДокумента.Вставить("Period",Формат(НачалоМесяца(ДокументТабель.ПериодРегистрации),"ДФ=yyyyMMdd"));
	Если ДокументТабель.ПериодВводаДанныхОВремени = Перечисления.ПериодыВводаДанныхОВремени.ПерваяПоловинаТекущегоМесяца Тогда
		//СтруктураДокумента.Вставить("Period",Формат(ДокументТабель.ПериодРегистрации,"ДФ=yyyyMM")+"15");  //первая половина месяца жестко 15 число.
		ТипДокумента = "Аванс";
	Иначе
		//СтруктураДокумента.Вставить("Period",Формат(КонецМесяца(ДокументТабель.ПериодРегистрации),"ДФ=yyyyMMdd"));  //вторая половина месяца - последний день месяца.
		ТипДокумента = "Зарплата";
	КонецЕсли;
	СтруктураДокумента.Вставить("TypeDoc",ТипДокумента);
	СтруктураДокумента.Вставить("StartPeriod",Формат(ДокументТабель.ДатаНачалаПериода,"ДФ=yyyyMMdd"));
	СтруктураДокумента.Вставить("EndPeriod",Формат(ДокументТабель.ДатаОкончанияПериода,"ДФ=yyyyMMdd"));
	СтруктураДокумента.Вставить("Department","Департамент розницы");
	СтруктураДокумента.Вставить("Filial_id",ДокументТабель.Магазин.КодФилиала);
	СтруктураДокумента.Вставить("Document",Строка(ДокументТабель.Ссылка));
	
	СтруктураТабличнойЧасти = Новый Массив;
	Для Каждого СтрокаТЧ ИЗ ДокументТабель.ДанныеОВремени Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("Employer_id",СтрокаТЧ.Сотрудник.ИНН);
		СтруктураСтроки.Вставить("Name",Строка(СтрокаТЧ.Сотрудник));
		СтруктураСтроки.Вставить("jobTitle",Строка(СтрокаТЧ.Должность));
		СтруктураСтроки.Вставить("PaymentType","");
		
		ЧасовОтработано = 0;
		ОстатокНакопленныхМинут = 0;
		ПоследнийОтработанныйДень = 0;
		Для н = 1 По 31 Цикл
			ЧасовАвто = СтрокаТЧ["ЧасовФактАвто"+н];
			ЧасовФакт = СтрокаТЧ["ЧасовФакт"+н];
			Если ЧасовФакт = 0 Тогда
				ЧасовФакт = ЧасовАвто;
			КонецЕсли;
			//2023-01-09 sa Из-за того, что в базе табелирования офиса и далее в базе учета персонала нет возможности учитывать отработанные минуты,
			//то делаем округление до часов согласно утвержденному алгоритму. Приложение 1.
			//так же в документе точность 2 знака после запятой, в регистр пишется с одним знаком. Округляю, как в регистре, чтобы можно было потом найти концы
			//2023-07-10 sa Добавили разрядность в регистр, поэтому округление больше не нужно.
			//ЧасовФакт = Окр(ЧасовФакт,1);
			текРазница = ЧасовФакт - Цел(ЧасовФакт);
			Если текРазница + ОстатокНакопленныхМинут >=0.5 Тогда
				ЧасовОтработано = Цел(ЧасовФакт)+1;
				ОстатокНакопленныхМинут = ОстатокНакопленныхМинут - (1-текРазница);
			ИначеЕсли текРазница + ОстатокНакопленныхМинут <0.5 И текРазница + ОстатокНакопленныхМинут >= -0.5 Тогда
				ЧасовОтработано = Цел(ЧасовФакт);
				ОстатокНакопленныхМинут = ОстатокНакопленныхМинут + текРазница;
			Иначе 
				ЧасовОтработано = Цел(ЧасовФакт)-1;
				ОстатокНакопленныхМинут = ОстатокНакопленныхМинут + текРазница;
			КонецЕсли;
			
			Если ЧасовОтработано > 0 Тогда
				ПоследнийОтработанныйДень = н;
			КонецЕсли;
			СтруктураСтроки.Вставить("Day"+Формат(н,"ЧЦ=2; ЧВН="),ЧасовОтработано);
			
			//Если по дате есть особые отметки Болел, Отгул, Отпуск - отмечаем в выгрузке. Тут же типизируем комментарии
			Если ВРЕГ(Лев(СтрокаТЧ["Комментарий"+н],5))="БОЛЕЛ" Тогда
				СтруктураСтроки.Вставить("Comment"+Формат(н,"ЧЦ=2; ЧВН="),"БОЛЕЛ");
			ИначеЕсли ВРЕГ(Лев(СтрокаТЧ["Комментарий"+н],6))="ОТПУСК" Тогда
				СтруктураСтроки.Вставить("Comment"+Формат(н,"ЧЦ=2; ЧВН="),"ОТПУСК");
			ИначеЕсли ВРЕГ(Лев(СтрокаТЧ["Комментарий"+н],5))="ОТГУЛ" Тогда
				СтруктураСтроки.Вставить("Comment"+Формат(н,"ЧЦ=2; ЧВН="),"ОТГУЛ");
			ИначеЕсли ВРЕГ(Лев(СтрокаТЧ["Комментарий"+н],6))="ПРОГУЛ" Тогда
				СтруктураСтроки.Вставить("Comment"+Формат(н,"ЧЦ=2; ЧВН="),"ПРОГУЛ");
			Иначе
				СтруктураСтроки.Вставить("Comment"+Формат(н,"ЧЦ=2; ЧВН="),"");
			КонецЕсли;
		КонецЦикла;
		Если ПоследнийОтработанныйДень > 0 И ОстатокНакопленныхМинут <> 0 Тогда
			Если ОстатокНакопленныхМинут >= 0.5 Тогда
				СтруктураСтроки.Вставить("Day"+Формат(ПоследнийОтработанныйДень,"ЧЦ=2; ЧВН="),(ЧасовОтработано+1));
			ИначеЕсли ОстатокНакопленныхМинут < -0.5 Тогда
				СтруктураСтроки.Вставить("Day"+Формат(ПоследнийОтработанныйДень,"ЧЦ=2; ЧВН="),(ЧасовОтработано-1));
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураТабличнойЧасти.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	СтруктураДокумента.Вставить("Table",СтруктураТабличнойЧасти);
	
	ТекстДЖСОН = СтруктуруВТекстДЖСОН(СтруктураДокумента);
	
	
	Возврат ТекстДЖСОН;
	
КонецФункции

//2023-01-09 sa Преобразует документ в JSON и отправляет на сервер 1С табелирования офиса
Функция ПередатьДанныеНаСервер(ДокументТабель) Экспорт
	ТекстДЖСОН = ПреобразоватьТабельВJSON(ДокументТабель);
	СтруктураПараметров = Новый Структура("Документ,Текст",ДокументТабель,ТекстДЖСОН);
	
	Успешно = ОтправитьНаСерверОфиса(СтруктураПараметров);
	
	Если Успешно.Success = Ложь Тогда
		Сообщить("Обмен неуспешно! "+Успешно.Description);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

//2023-01-05 sa преобразование текста JSON в структуру 
Функция ТекстДЖСОНвСтруктуру(ТекстДЖСОН) Экспорт
	СтруктураОтвета = Новый Структура;
	Если ТекстДЖСОН = "" Тогда
		СтруктураОтвета.Вставить("Success",Ложь);
		СтруктураОтвета.Вставить("Description","Текст не в формате JSON (пустой)!");
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ФайлJSON = Новый ЧтениеJSON;
	ФайлJSON.УстановитьСтроку(ТекстДЖСОН);
	
	Попытка
		СтруктураОтвета = ПрочитатьJSON(ФайлJSON);
		ФайлJSON.Закрыть();
	Исключение
		СтруктураОтвета.Вставить("Success",Ложь);
		СтруктураОтвета.Вставить("Description","Текст не в формате JSON!"+Символы.ПС+ТекстДЖСОН);
	КонецПопытки;
	
	Возврат СтруктураОтвета;
КонецФункции

Функция СтруктуруВТекстДЖСОН(СтруктураПараметров) Экспорт
	
	ЗаписьДЖСОН = Новый ЗаписьJSON;
	ЗаписьДЖСОН.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьДЖСОН,СтруктураПараметров);
	ТекстДЖСОН = ЗаписьДЖСОН.Закрыть();
	
	Возврат ТекстДЖСОН;
КонецФункции

Функция ОтправитьНаСерверОфиса(СтруктураПараметров)

	СтруктураПараметров.Вставить("Success",Ложь);
	СтруктураПараметров.Вставить("Description", "Неизвестная ошибка при отправке!");
	
	Если НЕ ПолучитьПараметрыПодключенияКСерверуТабелирования(СтруктураПараметров) Тогда
		СтруктураПараметров.Вставить("Description","Не удалось получить параметры подключения к серверу табелирования Retail!");
		Возврат Ложь;		
	КонецЕсли;

	Заголовки = Новый Соответствие;	
	ХТТПСоединение = Новый HTTPСоединение(СтруктураПараметров.Сервер, СтруктураПараметров.Порт);
	ХТТПЗапрос = Новый HTTPЗапрос(СтруктураПараметров.АдресРесурса);
	ХТТПЗапрос.УстановитьТелоИзСтроки(СтруктураПараметров.Текст);
	Авторизация = СтруктураПараметров.Логин+":"+СтруктураПараметров.Пароль;
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(СтруктураПараметров.Логин+":"+СтруктураПараметров.Пароль,КодировкаТекста.UTF8,Ложь);
	Авторизация = "Basic "+Base64Строка(ДвоичныеДанные);
	ХТТПЗапрос.Заголовки.Вставить("Authorization",Авторизация);
	Ответ = ХТТПСоединение.ОтправитьДляОбработки(ХТТПЗапрос);
	ТекстОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	СтруктураОтвета = ТекстДЖСОНвСтруктуру(ТекстОтвета);
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,СтруктураОтвета);
	
	Возврат СтруктураОтвета;
	
КонецФункции

//Сюда надо вставить реальную функцию получения данных о подключении (пока неизвестно как организовать хранение этих данных)
Функция ПолучитьПараметрыПодключенияКСерверуТабелирования(СтруктураПараметров)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаРегистра.ServerAddress, Ведущая.ServerAddress) КАК Сервер,
	|	ЕСТЬNULL(ТаблицаРегистра.Port, Ведущая.port) КАК Порт,
	|	ЕСТЬNULL(ТаблицаРегистра.BaseName, Ведущая.BaseName) КАК АдресРесурса,
	|	ЕСТЬNULL(ТаблицаРегистра.Account, Ведущая.Account) КАК Логин,
	|	ЕСТЬNULL(ТаблицаРегистра.Password, Ведущая.Password) КАК Пароль,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистра.Источник ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Успешно
	|ИЗ
	|	(ВЫБРАТЬ
	|		""10.30.10.42"" КАК ServerAddress,
	|		80 КАК port,
	|		""V8Retail/hs/cRKfljbNK8BWbCqAuVZN5zMbMOeLFebj/TabelExchange"" КАК BaseName,
	|		""WebShop"" КАК Account,
	|		""1"" КАК Password) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыСоединения КАК ТаблицаРегистра
	|		ПО (ТаблицаРегистра.Источник = ЗНАЧЕНИЕ(Перечисление.ВнешниеИсточники.Табелирование))
	|			И (ТаблицаРегистра.Активен)"
	);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	ОбщегоНазначенияКлиентСервер.СтрокаТаблицыКакСтруктура(РезультатЗапроса.Колонки, Выборка, Истина, СтруктураПараметров);

	//СтруктураПараметров.Вставить("Сервер","10.30.10.42");
	//СтруктураПараметров.Вставить("Порт", 80);
	//СтруктураПараметров.Вставить("АдресРесурса", "V8Retail/hs/cRKfljbNK8BWbCqAuVZN5zMbMOeLFebj/TabelExchange");
	//СтруктураПараметров.Вставить("Логин","WebShop");
	//СтруктураПараметров.Вставить("Пароль","1");
	
	Возврат Выборка.Успешно;

КонецФункции











