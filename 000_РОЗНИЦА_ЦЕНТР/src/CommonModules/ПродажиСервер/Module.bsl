///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО ПРОДАЖАМ

// Процедура записи движений в регистр Продажи
//
Процедура ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.Продажи.Записывать = Истина;
	Движения.Продажи.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура записи движений в регистр ПродажиПоДисконтнымКартам
//
Процедура ОтразитьПопыткиПродаж(ТаблицаПопыткиПродажПревышающихОстаток, ДатаПродажи) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПопыткиПродажПревышающихОстаток.ДатаПродажи КАК ДатаПродажи,
	|	ПопыткиПродажПревышающихОстаток.Склад,
	|	ПопыткиПродажПревышающихОстаток.Номенклатура,
	|	ПопыткиПродажПревышающихОстаток.Характеристика
	|ПОМЕСТИТЬ ТаблицаЗаписей
	|ИЗ
	|	РегистрСведений.ПопыткиПродажПревышающихОстаток КАК ПопыткиПродажПревышающихОстаток
	|ГДЕ
	|	ПопыткиПродажПревышающихОстаток.ДатаПродажи = &ДатаПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНовыхЗаписей.ДатаПродажи КАК ДатаПродажи,
	|	ТаблицаНовыхЗаписей.Склад,
	|	ТаблицаНовыхЗаписей.Номенклатура,
	|	ТаблицаНовыхЗаписей.Характеристика
	|ПОМЕСТИТЬ ТаблицаНовыхЗаписей
	|ИЗ
	|	&ТаблицаНовыхЗаписей КАК ТаблицаНовыхЗаписей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаписей.ДатаПродажи КАК ДатаПродажи,
	|	ТаблицаЗаписей.Склад,
	|	ТаблицаЗаписей.Номенклатура,
	|	ТаблицаЗаписей.Характеристика
	|ПОМЕСТИТЬ ВсеЗаписи
	|ИЗ
	|	ТаблицаЗаписей КАК ТаблицаЗаписей
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаНовыхЗаписей.ДатаПродажи,
	|	ТаблицаНовыхЗаписей.Склад,
	|	ТаблицаНовыхЗаписей.Номенклатура,
	|	ТаблицаНовыхЗаписей.Характеристика
	|ИЗ
	|	ТаблицаНовыхЗаписей КАК ТаблицаНовыхЗаписей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеЗаписи.ДатаПродажи,
	|	ВсеЗаписи.Склад,
	|	ВсеЗаписи.Номенклатура,
	|	ВсеЗаписи.Характеристика
	|ИЗ
	|	ВсеЗаписи КАК ВсеЗаписи";
	
	Запрос.УстановитьПараметр("ДатаПродажи"        , НачалоДня(ДатаПродажи));
	Запрос.УстановитьПараметр("ТаблицаНовыхЗаписей", ТаблицаПопыткиПродажПревышающихОстаток);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	НаборЗаписей = РегистрыСведений.ПопыткиПродажПревышающихОстаток.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДатаПродажи.Установить(НачалоДня(ДатаПродажи));
	
	НаборЗаписей.Загрузить(ТаблицаЗапроса);
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// +HVOYA. 16.08.2016 16:13:21, Львова Е.А.

// Процедура записи движений в регистр hiПродажиПоЧекам
//
Процедура ОтразитьПродажиПоЧекам(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажПоЧекам;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.ПродажиПоЧекам.Записывать = Истина;
	Движения.ПродажиПоЧекам.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура записи движений в регистр hiСкидкиНаценкиПоЧекам
//
Процедура ОтразитьПродажиПоСкидкамНаценкам(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажПоСкидкамНаценкам;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.СкидкиНаценкиПоЧекам.Записывать = Истина;
	Движения.СкидкиНаценкиПоЧекам.Загрузить(Таблица);
	
КонецПроцедуры

//+HVOYA YURA G. 29.09.2016 17:21:05
Процедура ОтразитьПерсональныеПродажиПродавцов(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПерсональныеПродажиПродавцов;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.ПерсональныеПродажиПродавцов.Записывать = Истина;
	Движения.ПерсональныеПродажиПродавцов.Загрузить(Таблица);
	
КонецПроцедуры
//-HVOYA YURA G. 29.09.2016 17:21:06


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО ПРОДАЖАМ ПО ДИСКОНТНЫМ КАРТАМ

// Процедура записи движений в регистр ПродажиПоДисконтнымКартам
//
Процедура ОтразитьПродажиПоДисконтнымКартам(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажиПоДисконтнымКартам;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.ПродажиПоДисконтнымКартам.Записывать = Истина;
	Движения.ПродажиПоДисконтнымКартам.Загрузить(Таблица);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО ПРОДАЖАМ ПО ДИСКОНТНЫМ КАРТАМ СУММА СКИДКИ

// Процедура записи движений в регистр ПродажиПоДисконтнымКартам
//
Процедура ОтразитьПродажиПоДисконтнымКартамСкидка(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажиПоДисконтнымКартамСкидка;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.ПродажиПоДисконтнымКартамСкидка.Записывать = Истина;
	Движения.ПродажиПоДисконтнымКартамСкидка.Загрузить(Таблица);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО ПРОДАЖАМ ПО ПЛАТЕЖНЫМ КАРТАМ

// Процедура записи движений в регистр ПродажиПоПлатежнымКартам
//
Процедура ОтразитьПродажиПоПлатежнымКартам(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажиПоПлатежнымКартам;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.ПродажиПоПлатежнымКартам.Записывать = Истина;
	Движения.ПродажиПоПлатежнымКартам.Загрузить(Таблица);
	
КонецПроцедуры


// Получение суммы наличной и безналичной оплаты
//
// Параметры
//  ДокументОбъект - Документ
//  СуммаНаличнойОплаты - сумма наличной оплаты
//  СуммаБезналичнойОплаты - сумма безналичной оплаты
//
Процедура ПолучитьСуммыПоВидуОплат(ДокументОбъект, СуммаНаличнойОплаты, СуммаБезналичнойОплаты, СуммаОплатыСертификатами)

	СуммаНаличнойОплаты		 = 0;
	СуммаБезналичнойОплаты	 = 0;
	СуммаОплатыСертификатами = 0;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Оплата.ВидОплаты КАК Справочник.ВидыОплатЧекаККМ) КАК ВидОплаты,
	|	Оплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ ТаблицаОплат
	|ИЗ
	|	&Оплата КАК Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОплат.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ТаблицаОплат.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|						ТОГДА ТаблицаОплат.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК СуммаНаличнойОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОплат.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НЕ ТаблицаОплат.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|						ТОГДА ТаблицаОплат.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК СуммаБезналичнойОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОплат.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ТаблицаОплат.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПодарочныйСертификат)
	|						ТОГДА ТаблицаОплат.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК СуммаОплатыСертификатами
	|ИЗ
	|	ТаблицаОплат КАК ТаблицаОплат"
	);
	Запрос.УстановитьПараметр("Оплата", ДокументОбъект.Оплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда

		Если ЗначениеЗаполнено(Выборка.СуммаНаличнойОплаты) Тогда

			СуммаНаличнойОплаты = Выборка.СуммаНаличнойОплаты;

		КонецЕсли; 

		Если ЗначениеЗаполнено(Выборка.СуммаБезналичнойОплаты) Тогда

			СуммаБезналичнойОплаты = Выборка.СуммаБезналичнойОплаты;

		КонецЕсли; 

		Если ЗначениеЗаполнено(Выборка.СуммаОплатыСертификатами) Тогда

			СуммаОплатыСертификатами = Выборка.СуммаОплатыСертификатами;

		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Оплата".
//
// Параметры:
//  ДокументОбъект - Документ
//  Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплата(ДокументОбъект, Отказ) Экспорт

	Перем  СуммаНаличнойОплаты, СуммаБезналичнойОплаты, СуммаОплатыСертификатами;
	
	ПолучитьСуммыПоВидуОплат(ДокументОбъект, СуммаНаличнойОплаты, СуммаБезналичнойОплаты, СуммаОплатыСертификатами);

	СуммаВсего = ?(ДокументОбъект.ЦенаВключаетНДС
					, ДокументОбъект.Товары.Итог("Сумма")
					, ДокументОбъект.Товары.Итог("Сумма") + ДокументОбъект.Товары.Итог("СуммаНДС")
	);
	ОплаченоВсего = ДокументОбъект.Оплата.Итог("Сумма");

	Если ОплаченоВсего < СуммаВсего Тогда

		Текст = НСтр("ru = 'Сумма всех типов оплат меньше суммы документа!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"Оплата" ,
			,
			Отказ
		);
		
	КонецЕсли;

//	"СуммаБезналичнойОплаты" - это общая сумма Б/Н, включая сертификаты.
//	Остаток по сертифкатам "гасится", так что учитываем ТОЛЬКО конкретный безнал.

	СуммаБезналаБезСертификатов = СуммаБезналичнойОплаты - СуммаОплатыСертификатами;

	Если СуммаБезналаБезСертификатов > СуммаВсего Тогда
		
		Текст = НСтр("ru = 'Сумма безналичной оплаты не может быть больше суммы документа!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"Оплата" ,
			,
			Отказ
		);
		
	КонецЕсли;

КонецПроцедуры

// Проверяет, что в табличной части нет услуг
//
// Параметры
//  ДокументОбъект - объект проводимого документа документа.
//  ИмяТабличнойЧасти - Имя табличной части Товары
//  Отказ - Переменная отвечающая за прерывание проведения
//
Процедура ПроверитьЗаполнениеСклада(
	ДокументОбъект, 
	ИмяТабличнойЧасти, 
	Отказ
	) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.Склад КАК Склад,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТабТоварыВСЕ
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабТовары.Номенклатура.Наименование КАК Наименование,
	|	ТабТовары.Склад КАК Склад,
	|	ТабТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТабТоварыВСЕ КАК ТабТовары
	|ГДЕ
	|	ТабТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И ТабТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Товары", ДокументОбъект[ИмяТабличнойЧасти].Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В строке №%1 табличной части ""%2"" не заполнен склад'"),
			Выборка.НомерСтроки,
			ИмяТабличнойЧасти
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			ИмяТабличнойЧасти+"[" + (Выборка.НомерСтроки - 1) + "].Склад" ,
			,
			Отказ
		);
	КонецЦикла;
	

КонецПроцедуры // ПроверитьЧтоНетПодарочныхСертификатов()

// Получает развернутые строки расхождения по товарам при возврате
//
// Параметры:
//  ДокументОбъект - Документ
//  РазрезАналитики - или склад, или продавец
//
Функция ПолучитьСтрокиРасхожденияПоТоварамСЧекомПродажи(ДокументОбъект , РазрезАналитики = "Склад") Экспорт

//	LNK 04.03.2020 11:27:10
//	Внесение изменений контроля возврата подарочных сертификатов.
//	В связи с этим же выполнена и "разбивка" на несколько текстов запроса.

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ЧекККМПродажа" , ДокументОбъект.ЧекККМПродажа);
	Запрос.УстановитьПараметр("Ссылка"        , ДокументОбъект.Ссылка);

	Запрос.Текст = ЗаменитьПолеЗапроса(
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка) КАК СерийныйНомер,
	|	ТабличнаяЧасть.Продавец КАК Продавец,
	|	ТабличнаяЧасть.Количество КАК Количество,
	|	ТабличнаяЧасть.Номенклатура.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
	|	ТабличнаяЧасть.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТабличнаяЧасть.Ссылка КАК ДокументСсылка,
	|	ТабличнаяЧасть.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &ЧекККМПродажа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.СерийныйНомер КАК СерийныйНомер,
	|	Товары.Продавец КАК Продавец,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаПродажа
	|ИЗ
	|	Источник КАК Товары
	|ГДЕ
	|	НЕ(Товары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|				И Товары.ИспользоватьСерийныеНомера)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Сертификаты.СерийныйНомер,
	|	Товары.Продавец,
	|	1
	|ИЗ
	|	Источник КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.СерийныеНомера КАК Сертификаты
	|		ПО Товары.ДокументСсылка = Сертификаты.Ссылка
	|			И Товары.Номенклатура = Сертификаты.СерийныйНомер.Владелец
	|			И Товары.КлючСвязиСерийныхНомеров = Сертификаты.КлючСвязиСерийныхНомеров
	|ГДЕ
	|	Товары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И Товары.ИспользоватьСерийныеНомера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	, "ТабличнаяЧасть.Продавец", РазрезАналитики)
	;
	Запрос.Выполнить();	//	временная таблица "ТаблицаПродажа"

	Запрос.Текст = ЗаменитьПолеЗапроса(
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка) КАК СерийныйНомер,
	|	ТабличнаяЧасть.Продавец КАК Продавец,
	|	ТабличнаяЧасть.Количество КАК Количество,
	|	ТабличнаяЧасть.Номенклатура.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
	|	ТабличнаяЧасть.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТабличнаяЧасть.Ссылка КАК ДокументСсылка,
	|	ТабличнаяЧасть.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.ЧекККМПродажа = &ЧекККМПродажа
	|	И ТабличнаяЧасть.Ссылка <> &Ссылка
	|	И ТабличнаяЧасть.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.СерийныйНомер КАК СерийныйНомер,
	|	Товары.Продавец КАК Продавец,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаПрошлый
	|ИЗ
	|	Источник КАК Товары
	|ГДЕ
	|	НЕ(Товары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|				И Товары.ИспользоватьСерийныеНомера)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Сертификаты.СерийныйНомер,
	|	Товары.Продавец,
	|	1
	|ИЗ
	|	Источник КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.СерийныеНомера КАК Сертификаты
	|		ПО Товары.ДокументСсылка = Сертификаты.Ссылка
	|			И Товары.Номенклатура = Сертификаты.СерийныйНомер.Владелец
	|			И Товары.КлючСвязиСерийныхНомеров = Сертификаты.КлючСвязиСерийныхНомеров
	|ГДЕ
	|	Товары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И Товары.ИспользоватьСерийныеНомера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	, "ТабличнаяЧасть.Продавец", РазрезАналитики)
	;
	Запрос.Выполнить();	//	временная таблица "ТаблицаПрошлый" (Возврат)

	Запрос.Текст = ЗаменитьПолеЗапроса(
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Количество КАК Количество,
	|	ТабличнаяЧасть.Продавец КАК Продавец,
	|	ТабличнаяЧасть.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&Товары КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Сертификаты.СерийныйНомер КАК Справочник.СерийныеНомера) КАК СерийныйНомер,
	|	Сертификаты.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров
	|ПОМЕСТИТЬ Сертификаты
	|ИЗ
	|	&СерийныеНомера КАК Сертификаты
	|ГДЕ
	|	Сертификаты.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Ссылка КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество КАК Количество,
	|	Товары.Продавец КАК Продавец,
	|	ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка) КАК СерийныйНомер
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Источник КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаНоменклатура
	|		ПО Товары.Номенклатура = ТаблицаНоменклатура.Ссылка
	|ГДЕ
	|	НЕ(ТаблицаНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|				И ТаблицаНоменклатура.ИспользоватьСерийныеНомера)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаВладельца.Ссылка,
	|	Товары.Характеристика,
	|	Товары.Количество,
	|	Товары.Продавец,
	|	ТаблицаСертификаты.СерийныйНомер
	|ИЗ
	|	Источник КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаВладельца
	|		ПО Товары.Номенклатура = ТаблицаВладельца.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Сертификаты КАК ТаблицаСертификаты
	|		ПО Товары.КлючСвязиСерийныхНомеров = ТаблицаСертификаты.КлючСвязиСерийныхНомеров
	|			И Товары.Номенклатура = ТаблицаСертификаты.СерийныйНомер.Владелец
	|ГДЕ
	|	ТаблицаВладельца.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И ТаблицаВладельца.ИспользоватьСерийныеНомера
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Ссылка,
	|	Товары.Характеристика,
	|	Товары.Количество,
	|	Товары.Продавец,
	|	ТаблицаСерийныеНомера.Ссылка
	|ИЗ
	|	Источник КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерийныеНомера КАК ТаблицаСерийныеНомера
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаНоменклатура
	|			ПО ТаблицаСерийныеНомера.Владелец = ТаблицаНоменклатура.Ссылка
	|		ПО Товары.Номенклатура = ТаблицаСерийныеНомера.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Сертификаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанные.Номенклатура КАК Номенклатура,
	|	ТаблицаДанные.СерийныйНомер КАК СерийныйНомер,
	|	ТаблицаДанные.Характеристика КАК Характеристика,
	|	ТаблицаДанные.Продавец КАК Продавец,
	|	СУММА(ТаблицаДанные.КоличествоПродажи) КАК КоличествоПродажи,
	|	СУММА(ТаблицаДанные.КоличествоВозвратаТекущего) КАК КоличествоВозвратаТекущего,
	|	СУММА(ТаблицаДанные.КоличествоВозвратаПрошлого) КАК КоличествоВозвратаПрошлого
	|ПОМЕСТИТЬ ТаблицаДанные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|		ТабличнаяЧасть.Характеристика КАК Характеристика,
	|		ТабличнаяЧасть.СерийныйНомер КАК СерийныйНомер,
	|		ТабличнаяЧасть.Продавец КАК Продавец,
	|		ТабличнаяЧасть.Количество КАК КоличествоВозвратаТекущего,
	|		0 КАК КоличествоВозвратаПрошлого,
	|		0 КАК КоличествоПродажи
	|	ИЗ
	|		Товары КАК ТабличнаяЧасть
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТабличнаяЧасть.Номенклатура,
	|		ТабличнаяЧасть.Характеристика,
	|		ТабличнаяЧасть.СерийныйНомер,
	|		ТабличнаяЧасть.Продавец,
	|		0,
	|		ТабличнаяЧасть.Количество,
	|		0
	|	ИЗ
	|		ТаблицаПрошлый КАК ТабличнаяЧасть
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТабличнаяЧасть.Номенклатура,
	|		ТабличнаяЧасть.Характеристика,
	|		ТабличнаяЧасть.СерийныйНомер,
	|		ТабличнаяЧасть.Продавец,
	|		0,
	|		0,
	|		ТабличнаяЧасть.Количество
	|	ИЗ
	|		ТаблицаПродажа КАК ТабличнаяЧасть) КАК ТаблицаДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДанные.Продавец,
	|	ТаблицаДанные.Номенклатура,
	|	ТаблицаДанные.Характеристика,
	|	ТаблицаДанные.СерийныйНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(Таблица.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(Таблица.СерийныйНомер) КАК СерийныйНомер,
	|	ПРЕДСТАВЛЕНИЕ(Таблица.Характеристика) КАК Характеристика,
	|	ПРЕДСТАВЛЕНИЕ(Таблица.Продавец) КАК Продавец,
	|	ПРЕДСТАВЛЕНИЕ(Таблица.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	Таблица.КоличествоПродажи КАК КоличествоПродажи,
	|	Таблица.КоличествоВозвратаТекущего КАК КоличествоВозвратаТекущего,
	|	Таблица.КоличествоВозвратаПрошлого КАК КоличествоВозвратаПрошлого
	|ИЗ
	|	ТаблицаДанные КАК Таблица
	|ГДЕ
	|	Таблица.КоличествоВозвратаТекущего > 0
	|	И Таблица.КоличествоВозвратаТекущего + Таблица.КоличествоВозвратаПрошлого > Таблица.КоличествоПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПродажа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПрошлый"
	, "ТабличнаяЧасть.Продавец", РазрезАналитики)
	;
	Запрос.УстановитьПараметр("Товары"        , ДокументОбъект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("СерийныеНомера", ДокументОбъект.СерийныеНомера.Выгрузить());

	Результат = Запрос.Выполнить();

	Возврат Результат.Выгрузить();

КонецФункции

Функция ЗаменитьПолеЗапроса(ТекстЗапроса, КлючЗамены, РазрезАналитики)	//	LNK 04.03.2020 11:11:12

	Если РазрезАналитики = "Склад" Тогда

	//	LNK 10.09.2018 13:37:04
	//	Разрез аналитики "Склад" нам не нужен вообще.. неважно, с какого склада шла продажа.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, КлючЗамены, "ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)");

	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

// Получает развернутые строки расхождения по оплате при возврате
//
// Параметры:
//  ДокументОбъект - Документ
//
Функция ПолучитьСтрокиРасхожденияПоОплатеСЧекомПродажи(ДокументОбъект) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ЧекККМОплата.ВидОплаты КАК Справочник.ВидыОплатЧекаККМ) КАК ВидОплаты,
	|	ЧекККМОплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ ТабОплатаВсе
	|ИЗ
	|	&Оплата КАК ЧекККМОплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабОплатаВсе.ВидОплаты КАК ВидОплаты,
	|	ТабОплатаВсе.Сумма КАК СуммаВозврата,
	|	0 КАК СуммаПродажи
	|ПОМЕСТИТЬ ТаблицаОбщая
	|ИЗ
	|	ТабОплатаВсе КАК ТабОплатаВсе
	|ГДЕ
	|	НЕ(ТабОплатаВсе.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|				ИЛИ ТабОплатаВсе.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом)
	|				ИЛИ ТабОплатаВсе.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	|				ИЛИ ТабОплатаВсе.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.БанковскийКредит)
	|				ИЛИ ТабОплатаВсе.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Предоплата)
	|				ИЛИ ТабОплатаВсе.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Послеплата))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМОплата.ВидОплаты,
	|	0,
	|	ЧекККМОплата.Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &ЧекККМПродажа
	|	И НЕ(ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|				ИЛИ ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом)
	|				ИЛИ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	|				ИЛИ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.БанковскийКредит)
	|				ИЛИ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Предоплата)
	|				ИЛИ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Послеплата))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТабОплатаВсе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбщая.ВидОплаты КАК ВидОплаты,
	|	СУММА(ТаблицаОбщая.СуммаВозврата) КАК СуммаВозврата,
	|	СУММА(ТаблицаОбщая.СуммаПродажи) КАК СуммаПродажи
	|ПОМЕСТИТЬ ТаблицаСгруппированная
	|ИЗ
	|	ТаблицаОбщая КАК ТаблицаОбщая
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбщая.ВидОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСгруппированная.ВидОплаты КАК ВидОплаты,
	|	ТаблицаСгруппированная.СуммаВозврата КАК СуммаВозврата,
	|	ТаблицаСгруппированная.СуммаПродажи КАК СуммаПродажи
	|ИЗ
	|	ТаблицаСгруппированная КАК ТаблицаСгруппированная
	|ГДЕ
	|	НЕ ТаблицаСгруппированная.СуммаВозврата = ТаблицаСгруппированная.СуммаПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаСгруппированная"
	);
	Запрос.УстановитьПараметр("ЧекККМПродажа", ДокументОбъект.ЧекККМПродажа);
	Запрос.УстановитьПараметр("Ссылка"       , ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Оплата"       , ДокументОбъект.Оплата.Выгрузить());

	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

Функция ВозможностьРасхожденияТоваровПоПродавцу(ДокументОбъект)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Характеристика,
	|	ЧекККМТовары.Количество,
	|	ЧекККМТовары.Продавец
	|ПОМЕСТИТЬ ТаблицаПродажи
	|ИЗ
	|	&Товары КАК ЧекККМТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика,
	|	ТаблицаПродажи.Количество КАК КоличествоВозврата,
	|	ТаблицаПродажи.Продавец
	|ИЗ
	|	ТаблицаПродажи КАК ТаблицаПродажи
	|ГДЕ
	|	НЕ ТаблицаПродажи.Продавец = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Характеристика,
	|	ЧекККМТовары.Количество,
	|	ЧекККМТовары.Продавец
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Ссылка.ЧекККМПродажа = &ЧекККМПродажа
	|	И НЕ ЧекККМТовары.Продавец = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	И ЧекККМТовары.Ссылка <> &Ссылка
	|	И ЧекККМТовары.Ссылка.Проведен"
	);
	Запрос.УстановитьПараметр("ЧекККМПродажа", ДокументОбъект.ЧекККМПродажа);
	Запрос.УстановитьПараметр("Ссылка"       , ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Товары"       , ДокументОбъект.Товары.Выгрузить());
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции // ВозможностьРасхожденияТоваровПоПродавцу()

Функция ВозможнаяСуммаОплатыНаличнымиЧекаВозврата(ДокументОбъект)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМОплата.ВидОплаты,
	|	ЧекККМОплата.Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &ЧекККМПродажа
	|	И (ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|			ИЛИ ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом))";
	
	Запрос.УстановитьПараметр("ЧекККМПродажа", ДокументОбъект.ЧекККМПродажа);
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Возврат ТаблицаЗапроса.Итог("Сумма");

КонецФункции // ВозможнаяСуммаОплатыНаличнымиЧекаВозврата()

Функция НеобходимаяСуммаВозвратаПриОплатеБанковскойКартой(ДокументОбъект)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМОплата.ВидОплаты,
	|	ЧекККМОплата.Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &ЧекККМПродажа
	|	И ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)";
	
	Запрос.УстановитьПараметр("ЧекККМПродажа", ДокументОбъект.ЧекККМПродажа);
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Возврат ТаблицаЗапроса.Итог("Сумма");

КонецФункции // НеобходимаяСуммаВозвратаПриОплатеБанковскойКартой()


// Проверяет возможность возврата по чеку ККМ.
//
// Параметры:
//  ДокументОбъект - Документ
//  Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьВозможностьВозвратаПоЧекуККМ(
	ДокументОбъект,
	Отказ,
	ТекстОшибки = "",
	ОсобыйВыводСообщения = Ложь,
	ОтдельноПроверитьВозможностьОплатыТолькоНаличными = Ложь,
	ОтдельноПроверитьВозможностьОплатыБанковскойКартой = Ложь
	) Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ЧекККМПродажа) Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);	//	LNK 10.09.2018 13:44:17

	ТаблицаРасхождений = ПолучитьСтрокиРасхожденияПоТоварамСЧекомПродажи(ДокументОбъект, "Склад");
	
	Для Каждого СтрокаРасхождения Из ТаблицаРасхождений Цикл

		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2 %3 попытка вернуть по чеку продажи ""%4"": %5 %6, продано по чеку: %7 %6, возвращено ранее %8 %6'"),
			СтрокаРасхождения.Номенклатура,
			СтрокаРасхождения.Характеристика,
			?(ЗначениеЗаполнено(СтрокаРасхождения.СерийныйНомер), "(" + СтрокаРасхождения.СерийныйНомер + ")", ""),
			ДокументОбъект.ЧекККМПродажа,
			Строка(СтрокаРасхождения.КоличествоВозвратаТекущего),
			СтрокаРасхождения.ЕдиницаИзмерения,
			Строка(СтрокаРасхождения.КоличествоПродажи),
			Строка(СтрокаРасхождения.КоличествоВозвратаПрошлого) //%7
		);
		
		Если НЕ ОсобыйВыводСообщения Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"Товары",
			,
			Отказ
			);
		Иначе

			Отказ = Истина;

		КонецЕсли;

		ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;

	КонецЦикла;

	Если ВозможностьРасхожденияТоваровПоПродавцу(ДокументОбъект) Тогда

		ТаблицаРасхождений = ПолучитьСтрокиРасхожденияПоТоварамСЧекомПродажи(ДокументОбъект, "Продавец");
		
		Для Каждого СтрокаРасхождения Из ТаблицаРасхождений Цикл

			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1%2 попытка оформить возврат на продавца ""%3"": %4 %5, продано по чеку: %6 %5, возвращено ранее %7 %5'"),
				СтрокаРасхождения.Номенклатура,
				СтрокаРасхождения.Характеристика,
				СтрокаРасхождения.Продавец,
				Строка(СтрокаРасхождения.КоличествоВозвратаТекущего),
				СтрокаРасхождения.ЕдиницаИзмерения,
				Строка(СтрокаРасхождения.КоличествоПродажи),
				Строка(СтрокаРасхождения.КоличествоВозвратаПрошлого) //%7
			);
			
			Если Не ОсобыйВыводСообщения Тогда

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"Товары",
				,
				Отказ
				);
			Иначе

				Отказ = Истина;

			КонецЕсли;
			
			ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;

		КонецЦикла;

	КонецЕсли;

	Если НЕ Отказ И ОтдельноПроверитьВозможностьОплатыТолькоНаличными Тогда

		ВозможнаяСуммаОплаты = ВозможнаяСуммаОплатыНаличнымиЧекаВозврата(ДокументОбъект);
		ПолнаяСуммаОплаты    = ДокументОбъект.Товары.Итог("СуммаВсего");

		Если ПолнаяСуммаОплаты > ВозможнаяСуммаОплаты  Тогда

			Если ВозможнаяСуммаОплаты = 0 Тогда
				Текст = НСтр("ru = 'По чеку нет возможности вернуть наличными'");
			Иначе
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По чеку продажи наличными можно вернуть только %1'"),
					ФормированиеПечатныхФормСервер.ФорматСумм(ВозможнаяСуммаОплаты)
				);
			КонецЕсли;

			Текст = Текст + Символы.ПС + НСтр("ru = 'Используйте форму сложной оплаты'"); 

			Если НЕ ОсобыйВыводСообщения Тогда

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"Оплата",
				,
				Отказ
				);
			Иначе

				Отказ = Истина;

			КонецЕсли;
			
			ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ И ОтдельноПроверитьВозможностьОплатыБанковскойКартой Тогда
		
		НеобходимаяСуммаВозврата = НеобходимаяСуммаВозвратаПриОплатеБанковскойКартой(ДокументОбъект);
		ПолнаяСуммаОплаты        = ДокументОбъект.Товары.Итог("СуммаВсего");
		
		Если ПолнаяСуммаОплаты < НеобходимаяСуммаВозврата  Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По чеку сумма возврата не может быть меньше %1 (оплачено банковской картой)'"),
				ФормированиеПечатныхФормСервер.ФорматСумм(НеобходимаяСуммаВозврата)
			);
			
			Если НЕ ОсобыйВыводСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"Оплата",
				,
				Отказ
				);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
			ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Проверяет возможность возврата по чеку ККМ.
//
// Параметры:
//  ДокументОбъект - Документ
//  Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьВозможностьПровестиОплатуПоВозвратуЧекККМ(
	ДокументОбъект,
	Отказ,
	ТекстОшибки = "",
	ОсобыйВыводСообщения = Ложь
	) Экспорт


	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ЧекККМПродажа) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРасхождений = ПолучитьСтрокиРасхожденияПоОплатеСЧекомПродажи(ДокументОбъект);
	
	Для Каждого СтрокаРасхождения Из ТаблицаРасхождений Цикл
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '«%1» попытка вернуть: %2, оплачено по чеку: %3'"),
			СтрокаРасхождения.ВидОплаты,
			ФормированиеПечатныхФормСервер.ФорматСумм(СтрокаРасхождения.СуммаВозврата),
			ФормированиеПечатныхФормСервер.ФорматСумм(СтрокаРасхождения.СуммаПродажи)
		);
		
		Если НЕ ОсобыйВыводСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"Оплата",
			,
			Отказ
			);
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
		ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
	КонецЦикла;
	
КонецПроцедуры //ПроверитьВозможностьПровестиОплатуПоВозвратуЧекККМ()


// Получает развернутые строки расхождения по товарам при возврате
//
// Параметры:
//  ДокументОбъект - Документ
//
Функция ПолучитьСтрокиРасхожденияПоТоварамСЧекамиККМ(ДокументОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Характеристика,
	|	ВозвратТоваровОтПокупателяТовары.Количество,
	|	ВозвратТоваровОтПокупателяТовары.Продавец,
	|	ВозвратТоваровОтПокупателяТовары.ЧекККМ
	|ПОМЕСТИТЬ ТаблицаВозвратаВсе
	|ИЗ
	|	&ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателяТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаВозвратаВсе.Номенклатура,
	|	ТаблицаВозвратаВсе.Характеристика,
	|	ТаблицаВозвратаВсе.Количество,
	|	ТаблицаВозвратаВсе.Продавец,
	|	ТаблицаВозвратаВсе.ЧекККМ
	|ПОМЕСТИТЬ ТаблицаВозвратаПоЧекамККМ
	|ИЗ
	|	ТаблицаВозвратаВсе КАК ТаблицаВозвратаВсе
	|ГДЕ
	|	(НЕ ТаблицаВозвратаВсе.ЧекККМ = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВозвратаПоЧекамККМ.ЧекККМ
	|ПОМЕСТИТЬ ТаблицаЧековККМ
	|ИЗ
	|	ТаблицаВозвратаПоЧекамККМ КАК ТаблицаВозвратаПоЧекамККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМТоварыПродажи.Номенклатура,
	|	ЧекККМТоварыПродажи.Ссылка КАК ЧекККМ,
	|	ЧекККМТоварыПродажи.Характеристика,
	|	ЧекККМТоварыПродажи.Количество КАК КоличествоПродажи,
	|	ЧекККМТоварыПродажи.Продавец,
	|	0 КАК КоличествоВозвратаТекущего,
	|	0 КАК КоличествоВозвратаПрошлого
	|ПОМЕСТИТЬ ТаблицаОбщая
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТоварыПродажи
	|ГДЕ
	|	ЧекККМТоварыПродажи.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаЧековККМ.ЧекККМ
	|			ИЗ
	|				ТаблицаЧековККМ КАК ТаблицаЧековККМ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМТоварыПрошлого.Номенклатура,
	|	ЧекККМТоварыПрошлого.Ссылка,
	|	ЧекККМТоварыПрошлого.Характеристика,
	|	0,
	|	ЧекККМТоварыПрошлого.Продавец,
	|	0,
	|	ЧекККМТоварыПрошлого.Количество
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТоварыПрошлого
	|ГДЕ
	|	ЧекККМТоварыПрошлого.Ссылка.ЧекККМПродажа В
	|			(ВЫБРАТЬ
	|				ТаблицаЧековККМ.ЧекККМ
	|			ИЗ
	|				ТаблицаЧековККМ КАК ТаблицаЧековККМ)
	|	И ЧекККМТоварыПрошлого.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТоварыПрошлого.Номенклатура,
	|	ВозвратТоваровОтПокупателяТоварыПрошлого.ЧекККМ,
	|	ВозвратТоваровОтПокупателяТоварыПрошлого.Характеристика,
	|	0,
	|	ВозвратТоваровОтПокупателяТоварыПрошлого.Продавец,
	|	0,
	|	ВозвратТоваровОтПокупателяТоварыПрошлого.Количество
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТоварыПрошлого
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТоварыПрошлого.Ссылка.Проведен
	|	И ВозвратТоваровОтПокупателяТоварыПрошлого.ЧекККМ В
	|			(ВЫБРАТЬ
	|				ТаблицаЧековККМ.ЧекККМ
	|			ИЗ
	|				ТаблицаЧековККМ КАК ТаблицаЧековККМ)
	|	И ВозвратТоваровОтПокупателяТоварыПрошлого.Ссылка <> &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаВозвратаПоЧекамККМ.Номенклатура,
	|	ТаблицаВозвратаПоЧекамККМ.ЧекККМ,
	|	ТаблицаВозвратаПоЧекамККМ.Характеристика,
	|	0,
	|	ТаблицаВозвратаПоЧекамККМ.Продавец,
	|	ТаблицаВозвратаПоЧекамККМ.Количество,
	|	0
	|ИЗ
	|	ТаблицаВозвратаПоЧекамККМ КАК ТаблицаВозвратаПоЧекамККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОбщая.Номенклатура,
	|	ТаблицаОбщая.ЧекККМ,
	|	ТаблицаОбщая.Характеристика,
	|	СУММА(ТаблицаОбщая.КоличествоПродажи) КАК КоличествоПродажи,
	|	ТаблицаОбщая.Продавец,
	|	СУММА(ТаблицаОбщая.КоличествоВозвратаТекущего) КАК КоличествоВозвратаТекущего,
	|	СУММА(ТаблицаОбщая.КоличествоВозвратаПрошлого) КАК КоличествоВозвратаПрошлого
	|ПОМЕСТИТЬ ТаблицаСгруппированная
	|ИЗ
	|	ТаблицаОбщая КАК ТаблицаОбщая
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбщая.Номенклатура,
	|	ТаблицаОбщая.ЧекККМ,
	|	ТаблицаОбщая.Характеристика,
	|	ТаблицаОбщая.Продавец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.ЧекККМ) КАК ЧекККМ,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Характеристика) КАК Характеристика,
	|	ТаблицаСгруппированная.КоличествоПродажи,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Продавец) КАК Продавец,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ТаблицаСгруппированная.КоличествоВозвратаТекущего,
	|	ТаблицаСгруппированная.КоличествоВозвратаПрошлого
	|ИЗ
	|	ТаблицаСгруппированная КАК ТаблицаСгруппированная
	|ГДЕ
	|	ТаблицаСгруппированная.КоличествоВозвратаТекущего > 0
	|	И ТаблицаСгруппированная.КоличествоВозвратаТекущего + ТаблицаСгруппированная.КоличествоВозвратаПрошлого > ТаблицаСгруппированная.КоличествоПродажи";
	
	Запрос.УстановитьПараметр("ВозвратТоваровОтПокупателя", ДокументОбъект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
	
КонецФункции // ПолучитьСтрокиРасхожденияПоТоварамСЧекамиККМ()

// Получает развернутые строки расхождения по товарам при возврате по документам продажи
//
// Параметры:
//  ДокументОбъект - Документ
//
Функция ПолучитьСтрокиРасхожденияПоТоварамПоДокументамПродажи(ДокументОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Характеристика,
	|	ВозвратТоваровОтПокупателяТовары.Количество,
	|	ВозвратТоваровОтПокупателяТовары.Продавец,
	|	ВозвратТоваровОтПокупателяТовары.ДокументПродажи
	|ПОМЕСТИТЬ ТаблицаВозвратаВсе
	|ИЗ
	|	&ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателяТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Характеристика,
	|	ВозвратТоваровОтПокупателяТовары.Количество,
	|	ВозвратТоваровОтПокупателяТовары.Продавец,
	|	ВозвратТоваровОтПокупателяТовары.ДокументПродажи
	|ПОМЕСТИТЬ ТаблицаВозврата
	|ИЗ
	|	ТаблицаВозвратаВсе КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ
	|	(НЕ ВозвратТоваровОтПокупателяТовары.ДокументПродажи В (&МассивПустыхДокументовПродажи))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВозврата.ДокументПродажи
	|ПОМЕСТИТЬ ТаблицаДокументовПродажи
	|ИЗ
	|	ТаблицаВозврата КАК ТаблицаВозврата
	|ГДЕ
	|	(НЕ ТаблицаВозврата.ДокументПродажи В (&МассивПустыхДокументовПродажи))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровТовары.Ссылка КАК ДокументПродажи,
	|	РеализацияТоваровТовары.Номенклатура,
	|	РеализацияТоваровТовары.Характеристика,
	|	РеализацияТоваровТовары.Продавец КАК Продавец,
	|	РеализацияТоваровТовары.Количество КАК КоличествоПродажи,
	|	0 КАК КоличествоВозвратаТекущего,
	|	0 КАК КоличествоВозвратаПрошлого
	|ПОМЕСТИТЬ ТаблицаОбщая
	|ИЗ
	|	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
	|ГДЕ
	|	РеализацияТоваровТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаДокументовПродажи.ДокументПродажи
	|			ИЗ
	|				ТаблицаДокументовПродажи КАК ТаблицаДокументовПродажи)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахТовары.Ссылка,
	|	ОтчетОРозничныхПродажахТовары.Номенклатура,
	|	ОтчетОРозничныхПродажахТовары.Характеристика,
	|	ОтчетОРозничныхПродажахТовары.Продавец,
	|	ОтчетОРозничныхПродажахТовары.Количество,
	|	0,
	|	0
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
	|ГДЕ
	|	ОтчетОРозничныхПродажахТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаДокументовПродажи.ДокументПродажи
	|			ИЗ
	|				ТаблицаДокументовПродажи КАК ТаблицаДокументовПродажи)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаВозврата.ДокументПродажи,
	|	ТаблицаВозврата.Номенклатура,
	|	ТаблицаВозврата.Характеристика,
	|	ТаблицаВозврата.Продавец,
	|	0,
	|	ТаблицаВозврата.Количество,
	|	0
	|ИЗ
	|	ТаблицаВозврата КАК ТаблицаВозврата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТовары.ДокументПродажи,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Характеристика,
	|	ВозвратТоваровОтПокупателяТовары.Продавец,
	|	0,
	|	0,
	|	ВозвратТоваровОтПокупателяТовары.Количество
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка.Проведен
	|	И ВозвратТоваровОтПокупателяТовары.ДокументПродажи В
	|			(ВЫБРАТЬ
	|				ТаблицаДокументовПродажи.ДокументПродажи
	|			ИЗ
	|				ТаблицаДокументовПродажи КАК ТаблицаДокументовПродажи)
	|	И ВозвратТоваровОтПокупателяТовары.Ссылка <> &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбщая.ДокументПродажи,
	|	ТаблицаОбщая.Номенклатура,
	|	ТаблицаОбщая.Характеристика,
	|	ТаблицаОбщая.Продавец,
	|	СУММА(ТаблицаОбщая.КоличествоПродажи) КАК КоличествоПродажи,
	|	СУММА(ТаблицаОбщая.КоличествоВозвратаТекущего) КАК КоличествоВозвратаТекущего,
	|	СУММА(ТаблицаОбщая.КоличествоВозвратаПрошлого) КАК КоличествоВозвратаПрошлого
	|ПОМЕСТИТЬ ТаблицаСгруппированная
	|ИЗ
	|	ТаблицаОбщая КАК ТаблицаОбщая
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбщая.ДокументПродажи,
	|	ТаблицаОбщая.Продавец,
	|	ТаблицаОбщая.Номенклатура,
	|	ТаблицаОбщая.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.ДокументПродажи) КАК ДокументПродажи,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Характеристика) КАК Характеристика,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Продавец) КАК Продавец,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ТаблицаСгруппированная.КоличествоПродажи,
	|	ТаблицаСгруппированная.КоличествоВозвратаТекущего,
	|	ТаблицаСгруппированная.КоличествоВозвратаПрошлого
	|ИЗ
	|	ТаблицаСгруппированная КАК ТаблицаСгруппированная
	|ГДЕ
	|	ТаблицаСгруппированная.КоличествоВозвратаТекущего > 0
	|	И ТаблицаСгруппированная.КоличествоВозвратаТекущего + ТаблицаСгруппированная.КоличествоВозвратаПрошлого > ТаблицаСгруппированная.КоличествоПродажи";
	
	
	Запрос.УстановитьПараметр("ВозвратТоваровОтПокупателя", ДокументОбъект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	
	МассивПустыхДокументовПродажи = Новый Массив;
	МассивПустыхДокументовПродажи.Добавить(Документы.ОтчетОРозничныхПродажах.ПустаяСсылка());
	МассивПустыхДокументовПродажи.Добавить(Документы.РеализацияТоваров.ПустаяСсылка());
	МассивПустыхДокументовПродажи.Добавить(Неопределено);
	
	Запрос.УстановитьПараметр("МассивПустыхДокументовПродажи", МассивПустыхДокументовПродажи);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции  //ПолучитьСтрокиРасхожденияПоТоварамПоДокументамПродажи

// Проверяет возможность возврата по чеку ККМ.
//
// Параметры:
//  ДокументОбъект - Документ
//  Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьВозможностьВозвратаОтПокупателя( ДокументОбъект, Отказ, ОбработкаОбъект = Неопределено) Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		КлючДанныхВыводаСообщений = ДокументОбъект;
		ПолеВыводаСообщений = "Товары";
	Иначе
		КлючДанныхВыводаСообщений = ОбработкаОбъект;
		ПолеВыводаСообщений = "Объект.Товары";
	КонецЕсли;
	
	ТаблицаРасхождений = ПолучитьСтрокиРасхожденияПоТоварамСЧекамиККМ(ДокументОбъект); 
	
	Для Каждого СтрокаРасхождения Из ТаблицаРасхождений Цикл
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1%2 попытка оформить возврат на продавца ""%3"" по чеку (%4): %6 %5, продано по чеку: %7 %5, возвращено ранее  %8 %5'"),
			СтрокаРасхождения.Номенклатура, //%1
			СтрокаРасхождения.Характеристика, //%2
			СтрокаРасхождения.Продавец, //%3
			СтрокаРасхождения.ЧекККМ,//%4
			СтрокаРасхождения.ЕдиницаИзмерения,//%5
			Строка(СтрокаРасхождения.КоличествоВозвратаТекущего), //%6
			Строка(СтрокаРасхождения.КоличествоПродажи), //%7
			Строка(СтрокаРасхождения.КоличествоВозвратаПрошлого),//%8
		);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		Текст,
		КлючДанныхВыводаСообщений,
		ПолеВыводаСообщений,
		,
		Отказ
		);
		
	КонецЦикла;
	
	ТаблицаРасхождений = ПолучитьСтрокиРасхожденияПоТоварамПоДокументамПродажи(ДокументОбъект); 
	
	Для Каждого СтрокаРасхождения Из ТаблицаРасхождений Цикл
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1%2 попытка оформить возврат на продавца ""%3"" по документу (%4): %6 %5, продано по документу: %7 %5, возвращено ранее  %8 %5'"),
			СтрокаРасхождения.Номенклатура, //%1
			СтрокаРасхождения.Характеристика, //%2
			СтрокаРасхождения.Продавец, //%3
			СтрокаРасхождения.ДокументПродажи,//%4
			СтрокаРасхождения.ЕдиницаИзмерения,//%5
			Строка(СтрокаРасхождения.КоличествоВозвратаТекущего), //%6
			Строка(СтрокаРасхождения.КоличествоПродажи), //%7
			Строка(СтрокаРасхождения.КоличествоВозвратаПрошлого),//%8
		);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		Текст,
		КлючДанныхВыводаСообщений,
		ПолеВыводаСообщений,
		,
		Отказ
		);
		
	КонецЦикла;
	
КонецПроцедуры //ПроверитьВозможностьВозвратаОтПокупателя()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РМК

// Получение текущей настройки РМК по имени компьютера
//
Функция ТекущаяНастройкаРМКСервер(ИмяКомпьютера) Экспорт
	
	Если ЗначениеЗаполнено(ИмяКомпьютера) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РегистрСведенийНастройкаРМК.НастройкаРМК КАК НастройкаРМК
		|ИЗ
		|	РегистрСведений.НастройкаРМК КАК РегистрСведенийНастройкаРМК
		|ГДЕ
		|	РегистрСведенийНастройкаРМК.Компьютер = &Компьютер";
		
		Запрос.УстановитьПараметр("Компьютер", ИмяКомпьютера);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Возврат Выборка.НастройкаРМК;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Справочники.НастройкиРМК.ПустаяСсылка();
	
КонецФункции

// Проверка возможности оплаты по выбранному типу
//
Функция ЕстьВозможностьОплатыПоТипуОплаты(ТипОплаты) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыОплатЧекаККМ.Ссылка КАК ВидОплаты
	|ИЗ
	|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
	|ГДЕ
	|	НЕ ВидыОплатЧекаККМ.ЭтоГруппа
	|	И НЕ ВидыОплатЧекаККМ.ПометкаУдаления
	|	И ВидыОплатЧекаККМ.ТипОплаты = &ТипОплаты";
	
	Запрос.УстановитьПараметр("ТипОплаты", ТипОплаты);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции // ЕстьВозможностьОплатыПоТипуОплаты()

// Параметры:
//  МассивКассККМ - 
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьВозможностьОплатыПлатежнойКартой(МассивКассККМ) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекПовтИсп.ИспользоватьПодключаемоеОборудование();
	
	Если ИспользоватьПодключаемоеОборудование Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭквайринговыеТерминалы.Ссылка КАК ЭквайринговыйТерминал,
		|	ЭквайринговыеТерминалы.Владелец КАК ДоговорЭквайринга
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|ГДЕ
		|	ЭквайринговыеТерминалы.Касса В(&МассивКассККМ)
		|	И НЕ ЭквайринговыеТерминалы.ПометкаУдаления"
		);

		Запрос.УстановитьПараметр("МассивКассККМ", МассивКассККМ);

		Результат = Запрос.Выполнить();
		
		Возврат НЕ Результат.Пустой();
	Иначе
		Возврат ЕстьВозможностьОплатыПоТипуОплаты(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	КонецЕсли;
	
КонецФункции // ЕстьВозможностьОплатыПлатежнойКартой()

// Параметры:
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьВозможностьОплатыБанковскимКредитом() Экспорт
	
	Если РозничныеПродажиСерверПовтИсп.ЭтоУзелИнтернетМагазина()
	ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОплатуБанковскимиКредитами") Тогда

		Возврат Ложь;

	КонецЕсли;
	
	Возврат ЕстьВозможностьОплатыПоТипуОплаты(Перечисления.ТипыОплатЧекаККМ.БанковскийКредит)
	
КонецФункции // ЕстьВозможностьОплатыПлатежнойКартой()

// +HVOYA. 2016-09-05 Юлия_Ж
// Уточняет состояние заказа
//
Процедура ОбновитьСостояниеЗаказа(ЗаказПокупателя, СостояниеЗаказа) Экспорт
	
	СостояниеЗаказа = Перечисления.СостоянияЗаказовПокупателей.ПустаяСсылка();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументЗаказПокупателя.Ссылка,
	|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Состояние
	|ИЗ
	|	РегистрСведений.КлючевыеАтрибутыЗаказовПокупателей.СрезПоследних КАК КлючевыеАтрибутыЗаказовПокупателейСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ДокументЗаказПокупателя
	|		ПО КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ЗаказПокупателя = ДокументЗаказПокупателя.Ссылка
	|ГДЕ
	|	ДокументЗаказПокупателя.Ссылка = &Ссылка"
	);
	Запрос.УстановитьПараметр("Ссылка", ЗаказПокупателя);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

		СостояниеЗаказа = Выборка.Состояние

	КонецЕсли;

КонецПроцедуры
// -HVOYA. 2016-09-05 Юлия_Ж

#Область ЗначенияУчетнойПолитикиОтносящиесяКПродажам

//	LNK 26.06.2021 14:25:48
Функция ПолучитьАвторасчетНДС(Магазин, ДатаСреза = '00010101', ОбъектРРО = Ложь)	Экспорт

	ДанныеМагазина = Справочники.Магазины.РеквизитыМагазина(Магазин);

	Возврат ?(ОбъектРРО = Истина, ДанныеМагазина.АвторасчетНДС_РРО, ДанныеМагазина.АвторасчетНДС_Прочие);

КонецФункции
	
#КонецОбласти















