// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
// 
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция ПолучитьОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти, Неотрицательный = Ложь) Экспорт

	Если Неотрицательный Тогда
		Знак = ДопустимыйЗнак.Неотрицательный;
	Иначе
		Знак = ДопустимыйЗнак.Любой;
	КонецЕсли;

	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, Знак));

КонецФункции // ПолучитьОписаниеТиповЧисла()

// Служебная функция, предназначенная для получения описания типов даты
// 
// Параметры:
//  ЧастиДаты - системное перечисление ЧастиДаты.
// 
Функция ПолучитьОписаниеТиповДаты(ЧастьДаты = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ЧастьДаты) Тогда

		ЧастьДаты = ЧастиДаты.Дата;

	КонецЕсли;

	Возврат Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастьДаты));
	
КонецФункции	// ПолучитьОписаниеТиповДаты() 

//Дополняет одну таблицу значений строками другой таблицы значений
//Параметры:
//	Приемник - таблица значений, в которую добавляются строки
//	Источник - таблица значений, из которой беруться добавляемые строки
Процедура ДобавитьСтрокиВТаблицу(Приемник, Источник) Экспорт

	Для каждого СтрокаИсточника Из Источник Цикл
		ЗаполнитьЗначенияСвойств(Приемник.Добавить(), СтрокаИсточника);
	КонецЦикла;

КонецПроцедуры

//Заполняет колонку таблицы значений последовательными номерами
//Параметры:
//	Таблица - таблица значений, строки которой нужно пронумеровать
//	ИмяКолонкиНомераСтроки - колонка таблицы значений, в которой будут указаны номера строк
Процедура ПронумероватьТаблицуЗначений(Таблица, ИмяКолонкиНомераСтроки) Экспорт

	Таблица.Колонки.Добавить(ИмяКолонкиНомераСтроки, ПолучитьОписаниеТиповЧисла(15, 0));

	КоличествоСтрок = Таблица.Количество() - 1;
	Для НомерСтроки = 0 По КоличествоСтрок Цикл
		Таблица[НомерСтроки][ИмяКолонкиНомераСтроки] = НомерСтроки;
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьНовоеЗначениеРеквизита(Знач Объект, НовоеЗначение, ИмяРеквизита) Экспорт

	Если Объект[ИмяРеквизита] <> НовоеЗначение Тогда

		Объект[ИмяРеквизита] = НовоеЗначение;

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьЗначенияРеквизитовОбъекта(Ссылка, СтруктураПолей) Экспорт

	Результат = Новый Структура;
	Для Каждого КлючИЗначение ИЗ СтруктураПолей Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;

	ТекстЗапроса = "";
	
	ОбъектМетаданных = Ссылка.Метаданные();

	Для Каждого Элемент Из СтруктураПолей Цикл
		
		ИмяПоля = Элемент.Значение;
		
		Если НЕ ЗначениеЗаполнено(ИмяПоля) Тогда
			ИмяПоля = СокрЛП(Элемент.Ключ);
		КонецЕсли;
		
		ТекстЗапроса  = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", ",") + "
		|	" + ИмяПоля + " КАК " + СокрЛП(Элемент.Ключ);
	КонецЦикла;

	Запрос = Новый Запрос();

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ТекстЗапроса + "
	|ИЗ
	|	" + ОбъектМетаданных.ПолноеИмя() + " КАК ТаблицаОбъекта
	|ГДЕ
	|	Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка" , Ссылка);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Для Каждого КлючИЗначение ИЗ СтруктураПолей Цикл
			Результат[КлючИЗначение.Ключ] = Выборка[КлючИЗначение.Ключ];
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеОбъекта) Экспорт

	Если МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции

Функция ЕстьТЧОбъекта(ИмяТЧ, МетаданныеОбъекта) Экспорт

	Если МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяТЧ) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции 

Функция ЕстьРеквизитТЧОбъекта(ИмяРеквизита, МетаданныеОбъекта, ИмяТЧ) Экспорт

	ТЧ = МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяТЧ);
	Если ТЧ = Неопределено Тогда 
		Возврат Ложь;
	Иначе
		Если ТЧ.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

КонецФункции 

// Функция формирует текст в формате, необходимом для выдачи сообщений по табличной части.
//
// Параметры:
//  ИмяТЧ - Строка. Имя табличной части.
//  НомерСтроки - Число. Номер строки табличной части.
//  ИмяРеквизита - Строка. Имя реквизита.
//
// Возвращаемое значение:
//  Строка.
//
Функция ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ(ИмяТЧ, НомерСтроки, ИмяРеквизита) Экспорт

	Возврат ИмяТЧ + "[" + Формат(НомерСтроки - 1, "ЧН=0; ЧГ=0") + "]." + ИмяРеквизита;

КонецФункции // ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ()

// Функция заполняет структуру значениями перечисления
//
// Параметры
//  ИмяПеречисления  - строка - имя перечисления
//  Включать  пустую ссылку  - булево - добавлять ли в структуру значение пустой ссылки
//                 
// Возвращаемое значение:
//   СтруктураВозврата   - Структура содержащая значения перечисления,
//                         в том числе пустое значение.
Функция ПолучитьСтруктуруЗначенияПеречисления(ИмяПеречисления, ВключатьПустуюСсылку = ЛОЖЬ) Экспорт
	
	СтруктураВозврата   = Новый Структура;
	Для каждого ЭлементМетаданных Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		СтруктураВозврата.Вставить(ЭлементМетаданных.Имя,Перечисления[ИмяПеречисления][ЭлементМетаданных.Имя]);
	КонецЦикла;
	
	Если ВключатьПустуюСсылку Тогда
		СтруктураВозврата.Вставить("ПустаяСсылка",Перечисления[ИмяПеречисления].ПустаяСсылка());
	КонецЕсли;		
	
	Возврат СтруктураВозврата;	
	
КонецФункции // ПолучитьСтруктуруЗначенияПеречисления()

// Предназначена для получения имени элемента перечисления по значению.
//
// Параметры:
//  Элемент перечисления.
//
// Возвращаемое значение:
//  Строка - имя элемента перечисления в метаданных.
//
Функция ПолучитьИмяЭлементаПеречисленияПоЗначению(ЗначениеПеречисления) Экспорт
	
	ИмяЭлемента = Строка(ЗначениеПеречисления);
	Для каждого ЭлементПеречисления Из Метаданные.Перечисления[ЗначениеПеречисления.Метаданные().Имя].ЗначенияПеречисления Цикл
		Если ЭлементПеречисления.Синоним = Строка(ЗначениеПеречисления) Тогда
			ИмяЭлемента = ЭлементПеречисления.Имя;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ИмяЭлемента;
	
КонецФункции // ПолучитьПериодичностьДляЗапросаПоЗначениюПеречисления()

//	LNK 14.11.2016 09:20:06
Функция ПолучитьУчетнуюПолитику(Период = '00010101')	Экспорт

//	Кешировать результат нельзя, так как изменение политики должно сразу же вступать в силу.

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаВедущая.ОсновнаяОрганизация КАК ОсновнаяОрганизация,
	|	ТаблицаВедущая.ОсновнаяОрганизация.IDN КАК IDN_ОсновнаяОрганизация,
	|	ТаблицаВедущая.ВидЦенИнтернет КАК ВидЦенИнтернет,
	|	ТаблицаВедущая.КонтрольОстатковПриОтменеПроведения КАК КонтрольОстатковПриОтменеПроведения,
	|	ТаблицаВедущая.РучнаяСкидкаНаПодарочныйСертификат КАК РучнаяСкидкаНаПодарочныйСертификат,
	|	ТаблицаВедущая.МаксимальныйПроцентРучнойСкидки КАК МаксимальныйПроцентРучнойСкидки,
	|	ТаблицаВедущая.НомерТестовогоМагазина КАК НомерТестовогоМагазина,
	|	ТаблицаВедущая.ДатаПереходаНаЛетнееВремя КАК ДатаПереходаНаЛетнееВремя,
	|	ТаблицаВедущая.ДатаПереходаНаЗимнееВремя КАК ДатаПереходаНаЗимнееВремя,
	|	ТаблицаВедущая.КонтрольОписанияПричиныРучнойСкидки КАК КонтрольОписанияПричиныРучнойСкидки,
	|	ТаблицаВедущая.ИнтернетМагазин КАК ИнтернетМагазин,
	|	ЕСТЬNULL(ТаблицаОрганизаций.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК
	|		ОрганизацияИнтернетМагазина,
	|	ТаблицаВедущая.ИнтернетМагазин.СкладПродажи КАК СкладПродажиИнтернетМагазина,
	|	ТаблицаВедущая.СкладЦентральныйИнтернетМагазина КАК СкладЦентральныйИнтернетМагазина,
	|	ТаблицаВедущая.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТаблицаВедущая.ПродажиДляCRMпослеЗакрытияСмены КАК ПродажиДляCRMпослеЗакрытияСмены,
	|	ТаблицаВедущая.СуммаОплатыЧастямиДляЦенника КАК СуммаОплатыЧастямиДляЦенника,
	|	ТаблицаВедущая.НазваниеХарактеристикиДляПересчета КАК НазваниеХарактеристикиДляПересчета,
	|	ТаблицаВедущая.ЗначениеХарактеристикиДляПересчета КАК ЗначениеХарактеристикиДляПересчета,
	|	ВЫБОР
	|		КОГДА ТаблицаВедущая.КоличествоПопытокУдаления = 0
	|			ТОГДА 10
	|		ИНАЧЕ ТаблицаВедущая.КоличествоПопытокУдаления
	|	КОНЕЦ КАК КоличествоПопытокУдаления,
	|	ТаблицаВедущая.БлокироватьОперацииПриОтсутствииСоединенияЦБ КАК БлокироватьОперацииПриОтсутствииСоединенияЦБ,
	|	ТаблицаВедущая.РазрешитьПереносДокументаВДругойПериод КАК РазрешитьПереносДокументаВДругойПериод,
	|	ТаблицаВедущая.УчитыватьNavisionПоступлениеПереброски КАК УчитыватьNavisionПоступлениеПереброски,
	|	ТаблицаВедущая.МаксимальнаяСуммаНакопленияЛояльности КАК МаксимальнаяСуммаНакопленияЛояльности,
	|	ТаблицаВедущая.ПроверятьПеремещенияПоЗаказамВЦентре КАК ПроверятьПеремещенияПоЗаказамВЦентре,
	|	ТаблицаВедущая.РазрешитьТолькоТорговыйЗал КАК РазрешитьТолькоТорговыйЗал,
	|	ТаблицаВедущая.ИспользоватьОбменССайтомНаПериферийныхУзлах КАК ИспользоватьОбменССайтомНаПериферийныхУзлах,
	|	ТаблицаВедущая.ИспользоватьБонуснуюСистему КАК ИспользоватьБонуснуюСистему,
	|	ТаблицаВедущая.НеНачислятьБаллыПриОплатеБонусами КАК НеНачислятьБаллыПриОплатеБонусами,
	|	ТаблицаВедущая.ИспользоватьУкраинскоеНаименование КАК ИспользоватьУкраинскоеНаименование,
	|	ВЫБОР
	|		КОГДА ТаблицаВедущая.РазмерПакетаВиртуальныхКартРезерва = 0
	|			ТОГДА 1000
	|		ИНАЧЕ ТаблицаВедущая.РазмерПакетаВиртуальныхКартРезерва
	|	КОНЕЦ КАК РазмерПакетаВиртуальныхКартРезерва,
	|	ТаблицаВедущая.ВыполнятьСверкуИнформативныхОстатков КАК ВыполнятьСверкуИнформативныхОстатков,
	|	ТаблицаВедущая.ИспользоватьЧекиКакРегистраторыНачисленияБонусныхБаллов КАК
	|		ИспользоватьЧекиКакРегистраторыНачисленияБонусныхБаллов,
	|	ТаблицаВедущая.ДвиженияБонусныхБалловТолькоВЦентре КАК ДвиженияБонусныхБалловТолькоВЦентре,
	|	ВЫБОР
	|		КОГДА ТаблицаВедущая.ЦенаПродажиМинимальная = 0
	|			ТОГДА 0.1
	|		ИНАЧЕ ТаблицаВедущая.ЦенаПродажиМинимальная
	|	КОНЕЦ КАК ЦенаПродажиМинимальная,
	|	ТаблицаВедущая.ПечататьВЧекеДанныеБонусногоСчета КАК ПечататьВЧекеДанныеБонусногоСчета,
	|	ТаблицаВедущая.РазрешитьПрямуюИнтеграциюMagento КАК РазрешитьПрямуюИнтеграциюMagento,
	|	ТаблицаВедущая.РазрешитьОплатуБонусамиПоЗаказуПокупателяНаРМК КАК РазрешитьОплатуБонусамиПоЗаказуПокупателяНаРМК,
	|	ТаблицаВедущая.РазрешитьОплатуБонуснымиБалламиПодарочныхСертификатов КАК
	|		РазрешитьОплатуБонуснымиБалламиПодарочныхСертификатов,
	|	ТаблицаВедущая.TimeoutDDos КАК TimeoutDDos,
	|	ТаблицаВедущая.ВсеПродажиБезНДС КАК ВсеПродажиБезНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаВедущая.ВремяУчетаКассовогоДня = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 17, 10, 50)
	|		ИНАЧЕ ТаблицаВедущая.ВремяУчетаКассовогоДня
	|	КОНЕЦ КАК ВремяУчетаКассовогоДня,
	|	ТаблицаВедущая.ПротоколФормРМК КАК ПротоколФормРМК,
	|	ТаблицаВедущая.ПротоколВерсииОС КАК ПротоколВерсииОС,
	|	ВЫБОР
	|		КОГДА ТаблицаВедущая.ГлубинаОповещенияОбАннуляцииБонусныхБаллов = 0
	|			ТОГДА 30
	|		ИНАЧЕ ТаблицаВедущая.ГлубинаОповещенияОбАннуляцииБонусныхБаллов
	|	КОНЕЦ КАК ГлубинаОповещенияОбАннуляцииБонусныхБаллов,
	|	ТаблицаВедущая.ВыполнятьЗагрузкуОбменаПередОбновлением КАК ВыполнятьЗагрузкуОбменаПередОбновлением,
	|	ВЫБОР
	|		КОГДА ТаблицаВедущая.ИнтервалОграниченияВыгрузкиСообщенияОбмена = 0
	|			ТОГДА 5
	|		ИНАЧЕ ТаблицаВедущая.ИнтервалОграниченияВыгрузкиСообщенияОбмена
	|	КОНЕЦ КАК ИнтервалОграниченияВыгрузкиСообщенияОбмена,
	|	ТаблицаВедущая.МинимальныйПериодРассчитанныхИтогов КАК МинимальныйПериодРассчитанныхИтогов,
	|	ВЫБОР
	|		КОГДА ТаблицаВедущая.СуммаНаличныхОграничение = 0
	|			ТОГДА 50000
	|		ИНАЧЕ ТаблицаВедущая.СуммаНаличныхОграничение
	|	КОНЕЦ КАК СуммаНаличныхОграничение,
	|	ТаблицаВедущая.ДатаИзменения КАК ДатаИзменения,
	|	ТаблицаВедущая.СуммаДоставкиЗаказаПокупателя КАК СуммаДоставкиЗаказаПокупателя,
	|	ТаблицаВедущая.СуммаБесплатнойДоставки КАК СуммаБесплатнойДоставки,
	|	ТаблицаВедущая.СкладЗакупки КАК СкладЗакупки,
	|	ТаблицаВедущая.МинимальнаяСуммаАвтовыполнения КАК МинимальнаяСуммаАвтовыполнения,
	|	ТаблицаВедущая.КонтрагентНовойПочты КАК КонтрагентНовойПочты,
	|	ТаблицаВедущая.КонтактноеЛицоНовойПочты КАК КонтактноеЛицоНовойПочты,
	|	ТаблицаВедущая.ИДКлинтаАвтоЧека КАК ИДКлинтаАвтоЧека,
	|	ТаблицаВедущая.ИспользоватьСкидкуСотрудника КАК ИспользоватьСкидкуСотрудника,
	|	ТаблицаВедущая.НеНачислятьБонусыПриСписанииАкционныхБонусов КАК НеНачислятьБонусыПриСписанииАкционныхБонусов,
	|	ТаблицаВедущая.ИспользоватьСтаруюСистемуОтпракиСМС КАК ИспользоватьСтаруюСистемуОтпракиСМС
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика.СрезПоследних(&Период,) КАК ТаблицаВедущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииПодразделений.СрезПоследних(&Период,) КАК ТаблицаОрганизаций
	|		ПО ТаблицаВедущая.ИнтернетМагазин = ТаблицаОрганизаций.Владелец"
	);
	Запрос.УстановитьПараметр("Период", ?(Период = '00010101', ТекущаяДатаСеанса(), Период));

	СоставПолитики   = Новый Структура;
	РезультатЗапроса = Запрос.Выполнить();
	ПолитикаВыборка	 = РезультатЗапроса.Выбрать();
	ПолитикаВыборка.Следующий();

	ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, ПолитикаВыборка, СоставПолитики,, Истина); 

	Возврат СоставПолитики;

КонецФункции

//	LNK 21.03.2024 12:24:43
Функция ПолучитьОрганизацииУзлов()	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаУзлов.Ссылка КАК Узел,
	|	ТаблицаУзлов.ОсновнаяОрганизация КАК Организация
	|ПОМЕСТИТЬ Узлы
	|ИЗ
	|	ПланОбмена.ПоМагазину КАК ТаблицаУзлов
	|ГДЕ
	|	НЕ ТаблицаУзлов.ПометкаУдаления
	|	И ТаблицаУзлов.ВидУзла = ЗНАЧЕНИЕ(Перечисление.ВидыУзлов.Магазин)
	|	И НЕ ТаблицаУзлов.ОсновнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Узлы.Организация КАК Организация
	|ИЗ
	|	Узлы КАК Узлы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Организация
	|ИЗ
	|	Узлы КАК Ведущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.ПоМагазину.Организации КАК ТабличнаяЧасть
	|		ПО Ведущая.Узел = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	НЕ ТабличнаяЧасть.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)"
	);
	СписокОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");

	Возврат СписокОрганизаций;

КонецФункции

//	LNK 23.09.2022 12:14:14
Функция ПолучитьПравилаПротокола(Период = '00010101')	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаРегистра.ПротоколФормРМК КАК ПротоколФормРМК,
	|	ТаблицаРегистра.ПротоколВерсииОС КАК ПротоколВерсииОС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК Значение) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних(&Период, ) КАК ТаблицаРегистра
	|		ПО (ИСТИНА)"
	);
	Запрос.УстановитьПараметр("Период", ?(Период = '00010101', ТекущаяДатаСеанса(), Период));

	Правила = Новый Структура;
	РезультатЗапроса = Запрос.Выполнить();
	ПравилаВыборка	 = РезультатЗапроса.Выбрать();
	ПравилаВыборка.Следующий();

	ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, ПравилаВыборка, Правила,, Истина); 

	Возврат Правила;

КонецФункции

//	LNK 14.11.2016 11:01:23
Функция НужноЗаполнитьСписокРегистровДляКонтроля(РежимЗаписи, Период)	Экспорт

	Если ПолучитьУчетнуюПолитику(Период).КонтрольОстатковПриОтменеПроведения = Истина Тогда

		НужноЗаполнить = Истина;

	Иначе

		НужноЗаполнить = (РежимЗаписи = РежимЗаписиДокумента.Проведение);

	КонецЕсли;

	Возврат НужноЗаполнить;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ КОРРЕКТНОСТИ ЗАПОЛНЕНИЯ РЕГЛАМЕНТИРОВАННЫХ ДАННЫХ


//Определяет, есть ли в базе контрагент с таким же набором ИНН
Функция ИННУжеИспользуетсяВИнформационнойБазе(ИНН,ИсключаяСсылку = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка,
	|	Контрагенты.Код
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИННПлательщикаНДС = &ИНН
	|	И Контрагенты.Ссылка <> &Ссылка";

	Запрос.УстановитьПараметр("ИНН",ИНН);
	Запрос.УстановитьПараметр("Ссылка",ИсключаяСсылку);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ПриСозданииНаСервере" в модулях форм всех документов.
//
// Параметры:
// Объект                    - объект редактируемого документа,
// КартинкаСостоянияДокумент - реквизит формы объекта, Тип: Число,1
// СостояниеДокумента        - реквизит формы объекта, Тип: Строка,20,
// ЗаполнитьВидОперации      - булево
Процедура ЗаполнитьШапкуДокумента(Объект, КартинкаСостоянияДокумента, СостояниеДокумента, РазрешеноПроведение) Экспорт
		
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	РазрешеноПроведение = МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		СостояниеДокумента = "Новый";
		КартинкаСостоянияДокумента = 0;
		
	Иначе
		
		Если Объект.Проведен Тогда
			
			СостояниеДокумента = "Проведен";
			КартинкаСостоянияДокумента = 1;
			
		ИначеЕсли РазрешеноПроведение И НЕ Объект.ПометкаУдаления Тогда
			
			СостояниеДокумента = "Не проведен";
			КартинкаСостоянияДокумента = 0;
			
		ИначеЕсли РазрешеноПроведение И Объект.ПометкаУдаления Тогда
			
			СостояниеДокумента = "К удалению";
			КартинкаСостоянияДокумента = 2;
			
		ИначеЕсли Объект.ПометкаУдаления Тогда

			СостояниеДокумента = "К удалению";
			КартинкаСостоянияДокумента = 5;

		Иначе

			СостояниеДокумента = "Записан";
			КартинкаСостоянияДокумента = 3;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура проверяет проверку признака Проведен у документа основания
//Параметры: ДокументОснование Тип: ДокументСсылка 
Процедура ПроверитьВозможностьВводаНаОсновании(ДокументОснование) Экспорт
	
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Проведен") = Истина Тогда
			
		ТекстОшибки = НСтр("ru='Документ %1 не проведен. Ввод на основании непроведенного документа невозможен.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументОснование);

		ВызватьИсключение ТекстОшибки;

	КонецЕсли;
    	
КонецПроцедуры	


// Помещает во временное хранилище  табличную часть объекта
//
// Параметры
//  ОбъектТабличнойчасти - ДокументОбъект, СправочникОбъект, ОбработкаОбъект и т.д.
//  ИмяТабличнойЧасти - Имя табличной части объекта
//  УникальныйИдентификатор
//
// Возвращаемое значение:
//  Строка - Адрес внешенного хранилища
//
Функция ПоместитьВоВременноеХранилищеТабличнуюЧастьОбъекта(ОбъектТабличнойчасти, ИмяТабличнойЧасти, УникальныйИдентификатор) Экспорт

	АдресВХранилище = ПоместитьВоВременноеХранилище(ОбъектТабличнойчасти[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);
	
	Возврат АдресВХранилище;

КонецФункции // ПоместитьВоВременноеХранилищеТабличнуюЧастьДокумента()


// Процедура переносит строку из запроса в Структуру
Процедура ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, СтрокаВыборки, СтруктураЭлемента, ВключаемыеПоля = Неопределено, Типизировать = Ложь, Очищать = Истина) Экспорт
	
	Если СтруктураЭлемента = Неопределено 
		ИЛИ РезультатЗапроса = Неопределено 
		ИЛИ СтрокаВыборки = Неопределено Тогда

		Возврат;

	КонецЕсли;

	Если Очищать = Истина Тогда	//	LNK 14.03.2023 08:28:05

		СтруктураЭлемента.Очистить();

	КонецЕсли;

	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл

		Если ВключаемыеПоля = Неопределено ИЛИ ВключаемыеПоля.Получить(Колонка.Имя) = Истина Тогда

			Если Типизировать = Истина Тогда

				ТипЗначения = Новый ОписаниеТипов(Колонка.ТипЗначения,, "NULL");
				СтруктураЭлемента.Вставить(Колонка.Имя, ТипЗначения.ПривестиЗначение(СтрокаВыборки[Колонка.Имя]));

			Иначе

				СтруктураЭлемента.Вставить(Колонка.Имя, СтрокаВыборки[Колонка.Имя]);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// Функция создает структуру по строке выборки
Функция СоздатьСтруктуруПоСтрокеВыборки(РезультатЗапроса, СтрокаВыборки, Типизировать = Ложь, РезультирующаяСтруктура = Неопределено, Очищать = Истина) Экспорт
	
	Если НЕ ТипЗнч(РезультирующаяСтруктура) = Тип("Структура") Тогда	//	LNK 14.03.2023 08:25:10

		РезультирующаяСтруктура = Новый Структура;

	КонецЕсли;

	ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, СтрокаВыборки, РезультирующаяСтруктура,, Типизировать, Очищать);

	Возврат РезультирующаяСтруктура; 
	
КонецФункции

//	LNK 18.06.2017 10:09:48
Функция ПолучитьСоответствиеПоСтроке(Идентификаторы, Значение = Истина)	Экспорт

	ЗначениеВозврата = Новый Соответствие;
	СписокИдентификаторов = ОбщегоНазначенияКлиентСервер.lx_FillValueList(, Идентификаторы,, ",;",,, Новый ОписаниеТипов("Строка"));

	Для каждого Идентификатор Из СписокИдентификаторов Цикл

		ЗначениеВозврата.Вставить(Идентификатор, Значение);

	КонецЦикла;

	Возврат ЗначениеВозврата;

КонецФункции


// Процедура переносит строку из запроса в параметры запроса
Процедура ПеренестиСтрокуВыборкиВПараметрыЗапроса(РезультатЗапроса, СтрокаВыборки, Запрос) Экспорт
	
	Если РезультатЗапроса = Неопределено 
		ИЛИ СтрокаВыборки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, СтрокаВыборки[Колонка.Имя])
	КонецЦикла;
	
КонецПроцедуры


// Отбирает из переданной таблицы строки по заданным критериям.
//
// Параметры:
//  Источник - ТаблицаЗначений, РезультатЗапроса, ОбластьЯчеекТабличногоДокумента. Таблица-источник.
//  СтруктураКритериев - Структура. Названия отборов и значения, по которым нужно отобрать строки.
//  СтруктураСложныхКритериев - Структура. Если свойство передано, то значение содержит вид сравнения.
//
// Возвращаемое значение:
//  РезультатЗапроса - таблица с нужными строками.
//
Функция ОтобратьСтрокиПоКритериям(Источник, СтруктураКритериев, СтруктураСложныхКритериев = Неопределено) Экспорт

	Перем ВидСравненияСложный;

	Если СтруктураСложныхКритериев = Неопределено Тогда
		СтруктураСложныхКритериев = Новый Структура;
	КонецЕсли;

	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Источник);

	Для Каждого Критерий Из СтруктураКритериев Цикл
		НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(Критерий.Ключ);

		СтруктураСложныхКритериев.Свойство(Критерий.Ключ, ВидСравненияСложный);

		Если ВидСравненияСложный = Неопределено Тогда
			НовыйОтбор.Установить(Критерий.Значение);
		Иначе
			НовыйОтбор.Использование = Истина;
			НовыйОтбор.ВидСравнения = ВидСравненияСложный;
			НовыйОтбор.Значение = Критерий.Значение;
		КонецЕсли;
	КонецЦикла;

	Возврат ПостроительЗапроса.Результат;

КонецФункции // ОтобратьСтрокиПоКритериям()

//Возвращает строковое представление номенклатуры с характеристикой для отображения в сообщениях
//Параметры
// 		НоменклатураПредставление - строковое предствление номенклатуры или ссылка на элемент справочника "Номенклатура"
// 		ХарактеристикаПредставление - строковое предствление характеристики или ссылка на элемент справочника "Номенклатура"
Функция ПолучитьПредставлениеНоменклатуры(НоменклатураПредставление, ХарактеристикаПредставление, СерияПредставление = "") Экспорт

	СтрПредставление = СокрЛП(НоменклатураПредставление);

	Если ЗначениеЗаполнено(ХарактеристикаПредставление)Тогда
		СтрПредставление = СтрПредставление + " / " + СокрЛП(ХарактеристикаПредставление);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СерияПредставление)Тогда
		СтрПредставление = СтрПредставление + " / " + СокрЛП(СерияПредставление);
	КонецЕсли;

	Возврат СтрПредставление;

КонецФункции


// Проверяет возможность использования для свойства строки неограниченный длины.
//
Функция ИспользоватьНеограниченнуюСтроку(ТипЗначенияСвойства, МногострочноеПолеВвода) Экспорт
	
	Если ТипЗначенияСвойства.СодержитТип(Тип("Строка"))
	   И ТипЗначенияСвойства.Типы().Количество() = 1
	   И МногострочноеПолеВвода > 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Проверяет, что включена ф.о "Использовать подключаемое оборудование" и настроено оборудование  
//
Функция ИспользоватьПодключаемоеОборудование(ТипыПодключенногоОборудования = Неопределено) Экспорт
	
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекПовтИсп.ИспользоватьПодключаемоеОборудование();
	
	Если ТипыПодключенногоОборудования = Неопределено Тогда
		ТипыПодключенногоОборудования = МенеджерОборудованияСерверПовтИсп.ТипыПодключенногоОборудования();
	КонецЕсли;
	
	Возврат
		ИспользоватьПодключаемоеОборудование
		И ТипыПодключенногоОборудования <> Неопределено
		И ТипыПодключенногоОборудования.Количество() > 0;
		
КонецФункции            

// Функция возвращает разрешение на использование подключаемого оборудования Offline
//
Функция ИспользоватьПодключаемоеОборудованиеOffline() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОбменСПодключаемымОборудованиемOffline");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные функции

// Получает ссылки на объекты с файлами
Функция ПолучитьСсылкиНаОбъектыСФайлами(ПолноеИмяОМ) Экспорт
	
	ТекстЗапроса = 
	"
	|ВЫБРАТЬ
	|	ОбъектСФайлами.Ссылка КАК Ссылка
	|ИЗ
	|	[ПолноеИмяОМ] КАК ОбъектСФайлами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО ОбъектСФайлами.Ссылка = Файлы.ВладелецФайла
	|ГДЕ
	|	Файлы.Ссылка <> ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	ОбъектСФайлами.Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОМ]", ПолноеИмяОМ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьКартинкуКомментария(Комментарий) Экспорт
	
	Если ЗначениеЗаполнено(Комментарий) Тогда
		Картинка = БиблиотекаКартинок.Комментарий;
	Иначе
		Картинка = Новый Картинка;
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

/////////////////////////////////////// ФУНКЦИИ С ОБЩИМИ ПЕРЕМЕННЫМИ

// Функция возвращает значение экспортных переменных модуля приложений из параметра сеанса
// Необходмо для возможности создания объектов на сервере
Функция ПолучитьЗначениеПеременной(ИмяПараметра, Кэш = Неопределено, КэшИзменен = Ложь) Экспорт
	
	Если Кэш = Неопределено Тогда
		// Кэш не был проинициализирован
		Кэш = Новый Структура;
	Иначе
		// Ищем значение в структуре
		НайденноеЗначение = Неопределено;
		Если Кэш.Свойство(ИмяПараметра, НайденноеЗначение) Тогда
			Возврат НайденноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Если ВРег(ИмяПараметра) = ВРег("ЗначенияДополнительныхПравПользователя") Тогда
		НайденноеЗначение = Новый Соответствие;
	КонецЕсли;
	
	Кэш.Вставить(ИмяПараметра, НайденноеЗначение);
	КэшИзменен = Истина;
	
	Возврат НайденноеЗначение;
	
КонецФункции

Процедура УстановитьЗначениеПеременной(ИмяПараметра, Кэш, ЗначениеПараметра, ОбновлятьВоВсехКэшах = Ложь) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Новый Структура;
	КонецЕсли;
	
	Если Кэш.Свойство(ИмяПараметра) Тогда
		Кэш.Вставить(ИмяПараметра, ЗначениеПараметра);
	КонецЕсли;
	
	#Если Клиент ИЛИ ВнешнееСоединение Тогда
		Если ОбновлятьВоВсехКэшах Тогда
			КэшНаСервере = ПараметрыСеанса.ОбщиеЗначения.Получить();
			КэшНаСервере.Вставить(ИмяПараметра, ЗначениеПараметра);
			ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(КэшНаСервере);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

//Определяет доступен ли для пользователя упрощенный ввод контрагентов
//
// Возвращаемое значение:
//   Булево   - Истина, если упрощенный ввод доступен, и ложь в обратном случае
//
Функция УпрощенныйВводДоступен() Экспорт
	
	Возврат РольДоступна("ПолныеПрава");
	
КонецФункции

//Функция возвращает реквизит формы по имени, в случае оттуствия возвращает неопределено
Функция РеквизитФормы(Форма, ИмяРеквизита) Экспорт
	
	Для каждого РеквизитФормы Из Форма.ПолучитьРеквизиты() Цикл
		
		Если РеквизитФормы.Имя = ИмяРеквизита Тогда
			Возврат РеквизитФормы
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

//	LNK 29.05.2019 13:59:36
Функция ИмяВнешнегоРМК()	Экспорт

	Возврат ПараметрыСеанса.ИмяВнешнегоРМК;

КонецФункции // ИмяВнешнегоРМК()

//	LNK 02.12.2019 14:07:15
Функция ПолучитьЗначениеХранилища(ДокументСсылка, Ключ = "")	Экспорт

	Значение = Новый Структура;

	Запрос = Новый Запрос(СтрЗаменить(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Хранилище КАК Хранилище
	|ИЗ
	|	Документ.ЧекККМ КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументСсылка"
	, ".ЧекККМ КАК"
	, "." + ДокументСсылка.Метаданные().Имя + " КАК")
	);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

		Буффер = Выборка.Хранилище.Получить();

		Если ТипЗнч(Буффер) = Тип("Структура") Тогда

			Если ПустаяСтрока(Ключ) Тогда

				Значение = Буффер;

			ИначеЕсли Буффер.Свойство(Ключ) Тогда

			//	Здесь тип "подструктуры" не анализируем.. что там есть, то и возвращаем.
				Значение = Буффер[Ключ];

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
	Возврат Значение;

КонецФункции

//	LNK 03.09.2020 11:11:06
Функция ПолучитьБлокиратор(Ключ, Магазин, Заблокировать = Истина)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК Блокиратор
	|ИЗ
	|	Справочник.БлокираторыПроцессов КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Наименование = &Ключ
	|	И ТаблицаСправочник.Магазин = &Магазин"
	);
	Запрос.УстановитьПараметр("Ключ", Ключ);
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

		Блокиратор = Выборка.Блокиратор.ПолучитьОбъект();

	Иначе

		Блокиратор = Справочники.БлокираторыПроцессов.СоздатьЭлемент();
		Блокиратор.ОбменДанными.Загрузка = Истина;

		Блокиратор.Наименование = Ключ;
		Блокиратор.Магазин		= Магазин;

		Блокиратор.УстановитьНовыйКод();

		Блокиратор.Записать();

	КонецЕсли;

	Если Заблокировать = Истина Тогда

		Блокиратор.Заблокировать();

	КонецЕсли;

	Возврат Блокиратор;

КонецФункции






