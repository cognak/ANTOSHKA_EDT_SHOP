#Область ФункционалПолученияЦенCompeteraОтGraphQL

//	LNK 03.12.2022 06:33:59
Процедура ПолучитьЦеныCompeteraОтGraphQL(Знач ПериодЦен)	Экспорт

	Перем ТаблицаЦен;

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	КоличествоВОтвете = 1000;

	Пока Истина Цикл

		Результат = Новый Структура("ОписаниеОшибки, Ошибка, КодОтвета", "", Ложь, 0);

		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ВыполнитьЗапросДляGraphQL(ПериодЦен, КоличествоВОтвете, Результат));
		ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON, Ложь,,, "ПолучитьДатуОтMagento", ОбменMagentoСервер,, ИменаТипаДата());

		Границы = ДанныеЗапроса.data.offerProducts.paginatorInfo;

		ПолучитьТаблицуЦенCompetera(ДанныеЗапроса, ТаблицаЦен);

		Если НЕ Результат.Ошибка Тогда

			УстановитьЦеныНоменклатуры(ТаблицаЦен);

			Если НЕ Границы.maxDate > Границы.lastDate  Тогда

					Прервать;

			Иначе	ПериодЦен = Границы.lastDate + 1;

			КонецЕсли;

		Иначе

			ВызватьИсключение "Получена ошибка: " + Результат.ОписаниеОшибки;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//	LNK 26.12.2022 07:23:21
Процедура УстановитьЦеныНоменклатуры(ТаблицаЦен)

	УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();

	НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;

	ОбменДаннымиСервер.УстановитьПолучателейМагазина(НаборЗаписей.ОбменДанными.Получатели, УчетнаяПолитика.ИнтернетМагазин);

	Для каждого СтрокаТаблицы Из ТаблицаЦен Цикл

		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда

			Продолжить;

		КонецЕсли;

		Если СтрокаТаблицы.Регистратор.Пустая() Тогда

				Регистратор = Документы.УстановкаЦенНоменклатуры.ПолучитьСсылку();

		Иначе	Регистратор = СтрокаТаблицы.Регистратор;
		
		КонецЕсли;

		НаборЗаписей.Очистить();
		НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);

		ЗаписьНабора = НаборЗаписей.Добавить();

		ЗаписьНабора.Период			= СтрокаТаблицы.Период;
		ЗаписьНабора.Регистратор	= НаборЗаписей.Отбор.Регистратор.Значение;
		ЗаписьНабора.ВидЦены		= Справочники.ВидыЦен.ЦеныCompetera;
		ЗаписьНабора.Номенклатура	= СтрокаТаблицы.Номенклатура;
		ЗаписьНабора.Цена			= СтрокаТаблицы.Цена;

		НаборЗаписей.Записать();

	КонецЦикла;

КонецПроцедуры

//	LNK 03.12.2022 07:00:43
Процедура ПолучитьТаблицуЦенCompetera(ДанныеЗапроса, ТаблицаЦен)

	Если ТаблицаЦен = Неопределено Тогда

		ТаблицаЦен = Новый ТаблицаЗначений;
		ТаблицаЦен.Колонки.Добавить("Код"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
		ТаблицаЦен.Колонки.Добавить("Номенклатура"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаЦен.Колонки.Добавить("Регистратор"	, Новый ОписаниеТипов("ДокументСсылка.УстановкаЦенНоменклатуры"));
		ТаблицаЦен.Колонки.Добавить("Цена"			, Новый ОписаниеТипов("Число"));
		ТаблицаЦен.Колонки.Добавить("Период"		, Новый ОписаниеТипов("Дата"));
		ТаблицаЦен.Колонки.Добавить("Индекс"		, Новый ОписаниеТипов("Число"));

	КонецЕсли;

	Индекс = 0;

	Для каждого СоставТовара Из ДанныеЗапроса.data.offerProducts.data Цикл

		Для каждого СоставЦены Из СоставТовара.offerPrices Цикл

			СтрокаТаблицы = ТаблицаЦен.Добавить();

			СтрокаТаблицы.Код	 = СокрЛП(СоставТовара.sku);
			СтрокаТаблицы.Цена	 = СоставЦены.value;
			СтрокаТаблицы.Период = СоставЦены.changed_at;

			СтрокаТаблицы.Индекс = Индекс;	//	счётчик для сопоставления выборки и таблицы
			Индекс = Индекс + 1;

		КонецЦикла;

	КонецЦикла;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаЦен.Код КАК Код,
	|	ТаблицаЦен.Период КАК Период,
	|	ТаблицаЦен.Индекс КАК Индекс
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаЦен КАК ТаблицаЦен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.Код КАК Код,
	|	Источник.Период КАК Период,
	|	Источник.Индекс КАК Индекс,
	|	ТаблицаСправочник.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Источник КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
	|		ПО Источник.Код = ТаблицаСправочник.IDN
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Код КАК Код,
	|	Товары.Индекс КАК Индекс,
	|	Товары.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Регистратор КАК Регистратор
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ПО (Товары.Период = ЦеныНоменклатуры.Период
	|				И ЦеныНоменклатуры.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ЦеныCompetera))
	|			И Товары.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Товары"
	);
	Запрос.УстановитьПараметр("ТаблицаЦен", ТаблицаЦен);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		СтрокаТаблицы = ТаблицаЦен[Выборка.Индекс];
		СтрокаТаблицы.Номенклатура	= Выборка.Номенклатура;
		СтрокаТаблицы.Регистратор	= Выборка.Регистратор;

	КонецЦикла;

КонецПроцедуры

//	LNK 02.12.2022 09:41:46
Функция ВыполнитьЗапросДляGraphQL(ПериодЦен, КоличествоВОтвете, Результат)

	Перем ТекстJSON;

	Попытка

	//	Выполняем подключение к серверу "https://graphql.awdev.pro/graphql"...
		HTTP = Новый HTTPСоединение("graphql.awdev.pro", 443,,,, 10, Новый ЗащищенноеСоединениеOpenSSL);

		Попытка

		//	формирование заголовка
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Authorization", "Bearer Ku7LWeWNrJrD9UtdNs7Ur269om3Yg4anLl4rA6Ip");
			Заголовки.Вставить("Content-Type" , "application/json");

			HTTPЗапрос = Новый HTTPЗапрос("/graphql", Заголовки);
			HTTPЗапрос.УстановитьТелоИзСтроки(ПолучитьТекстЗапросаGraphQL(ПериодЦен, КоличествоВОтвете));

			HTTPОтвет = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
			ТекстJSON = HTTPОтвет.ПолучитьТелоКакСтроку();

			Результат.КодОтвета = HTTPОтвет.КодСостояния;
			ДанныеRFC2616 = СервисыСерверПовтИсп.КодыRFC2616(HTTPОтвет.КодСостояния);

			Результат.Ошибка = НЕ Результат.КодОтвета = 200;
			Результат.ОписаниеОшибки = Формат(Результат.КодОтвета, "ЧДЦ=; ЧН=000; ЧГ=") + Символы.ПС + ДанныеRFC2616.Описание;

		Исключение

			Результат.Ошибка = Истина;
			Результат.ОписаниеОшибки = "помилка надсилання повідомлення: " + ОписаниеОшибки();

		КонецПопытки;	 

	Исключение

		Результат.Ошибка = Истина;
		Результат.ОписаниеОшибки = "помилка при підключенні до сервера: " + ОписаниеОшибки();

	КонецПопытки;

	Возврат ТекстJSON;

КонецФункции

//	LNK 03.12.2022 05:55:16
Функция ПолучитьТекстЗапросаGraphQL(ПериодЦен, КоличествоВОтвете)

//	МакетЗапросов = ПолучитьМакет("ЗапросыКСтороннимСистемам");
	МакетЗапросов = ПолучитьОбщийМакет("ЗапросыКСтороннимСистемам");

	ОбластьЗапроса = МакетЗапросов.ПолучитьОбласть("Цены_Competera");
	ОбластьЗапроса.УдалитьСтроку(1);
	ОбластьЗапроса.УдалитьСтроку(ОбластьЗапроса.КоличествоСтрок());

	ТекстGraphQL = ОбластьЗапроса.ПолучитьТекст();
	ТекстGraphQL = СтрЗаменить(ТекстGraphQL, "#DATE#" , Формат(ПериодЦен, "ДФ='гг-ММ-дд ЧЧ:мм:сс'"));
	ТекстGraphQL = СтрЗаменить(ТекстGraphQL, "#COUNT#", Формат(КоличествоВОтвете, "ЧДЦ=; ЧН=0; ЧГ="));

	ДанныеЗапроса = Новый Структура("query", ТекстGraphQL);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	НастройкиJSON = Новый НастройкиСериализацииJSON;
	НастройкиJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;

	ЗаписатьJSON(ЗаписьJSON, ДанныеЗапроса, НастройкиJSON);

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

//	LNK 03.12.2022 06:51:36
Функция ИменаТипаДата()

	ИменаДата = Новый Массив;

	ИменаДата.Добавить("changed_at");
	ИменаДата.Добавить("lastDate");
	ИменаДата.Добавить("maxDate");

	Возврат ИменаДата;

КонецФункции

#КонецОбласти
























