#Область ПрограммныйИнтерфейс

//	LNK 30.09.2021 05:10:00 - РегламентныеЗадание.ВосстановлениеПоследовательностиБонуснойСистемы
Процедура ВосстановлениеПоследовательностиБонуснойСистемы(КоличествоЗаданий, РазмерПакета, ВыполнитьОбщуюКорректировку = Ложь) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если ВыполнитьОбщуюКорректировку = Истина Тогда	//	LNK 30.05.2024 09:11:18

		БонусныеБаллыПоследовательность.ВыполнитьКорректировкуПоследовательности();	//	регламентом каждый раз проверяем!

	КонецЕсли;

	КоличествоЗаданий  = ?(ТипЗнч(КоличествоЗаданий) = Тип("Число"), Макс(1, КоличествоЗаданий), 10);
	СписокКонтрагентов = БонусныеБаллыПоследовательность.ПроверитьНеобходимостьВосстановления(Неопределено);

	Если НЕ СписокКонтрагентов.Количество() = 0 Тогда

		РазмерПакета	= Макс(1, Мин(200, РазмерПакета));
		СписокПакета	= Новый Массив;
		СчетчикЗапусков	= 0;
		НомерЗадания	= 0;

		Для Счётчик = 1 По СписокКонтрагентов.Количество() Цикл

			Если СчетчикЗапусков >= КоличествоЗаданий Тогда

				Прервать;

			КонецЕсли;

			СписокПакета.Добавить(СписокКонтрагентов[Счётчик - 1]);

			Если СписокПакета.Количество() = РазмерПакета ИЛИ Счётчик = СписокКонтрагентов.Количество() Тогда

				ПараметрыЗадания = Новый Массив;
				ПараметрыЗадания.Добавить(СписокПакета);
				ПараметрыЗадания.Добавить(Ложь);
				ПараметрыЗадания.Добавить(Ложь);
				ПараметрыЗадания.Добавить(Ложь);

				НомерЗадания = НомерЗадания + 1;
				КлючЗадания	 = "RESEQUENCING_" + Формат(НомерЗадания, "ЧЦ=5; ЧДЦ=; ЧВН=; ЧГ=");

				ФоновыеЗадания.Выполнить("БонусныеБаллыПоследовательность.ВыполнитьВосстановлениеПоследовательности", ПараметрыЗадания, КлючЗадания);

				СписокПакета	= Новый Массив;
				СчетчикЗапусков	= СчетчикЗапусков + 1;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	LNK 28.09.2023 07:11:57
Процедура УчестьNAV_НачислениеИСписаниеБонусныхБаллов_НаФонды()	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		ВызватьИсключение "Процедура призначена для роботи у центральному вузлі.";

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Дата КАК Период,
	|	ТаблицаДокумента.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.НачислениеИСписаниеБонусныхБаллов КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаУчтен
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаУчтен.Объект
	|ГДЕ
	|	ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНачислениеИСписаниеБонусныхБаллов.ПередачаНаБлаготворительныйФонд)
	|	И ТаблицаДокумента.Проведен
	|	И ТаблицаУчтен.Объект ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор"
	);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл

			ВнешниеИсточникиСобытия.УстановитьПереданоNavision(Выборка.Регистратор, ОбщегоНазначенияРТСервер.ПолучитьМагазиныПоОбъекту(Выборка.Регистратор)
				, Перечисления.ВидыПередачиNavision.ПереданВNavision,,,, Истина);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	LNK 11.10.2022 06:01:15
Процедура ВыполнитьОбщуюПроцедуруОповещенияАннуляции(Отладка = Ложь)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ДЕНЬ, &ГлубинаОповещения) КАК ДатаАннуляции"
		);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("ГлубинаОповещения", УчетнаяПолитика.ГлубинаОповещенияОбАннуляцииБонусныхБаллов);

		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();

		РезультатЗапроса = ВыборкаАбонентовОповещения(Выборка.ДатаАннуляции);

		Если НЕ РезультатЗапроса.Пустой() Тогда

			ВыборкаАбоненты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		//	На текущий момент работаем по "верхней" выборке.
		//	Детализация по "ПрограммаЛояльности" на будущее..
		//	вдруг маркетингу взбрендит детализировать сообщение!

			Пока ВыборкаАбоненты.Следующий() Цикл
				
				ВыборкаСтроки = ВыборкаАбоненты.Выбрать();
				
				Пока ВыборкаСтроки.Следующий() Цикл

					Попытка
	
						Если ПроверитьСостояниеПоследовательности(ВыборкаСтроки.Контрагент) Тогда
							
							Если ВыборкаСтроки.ПрограммаЛояльностиТипБонусов = Перечисления.ТипыБонусов.Акционный Тогда

								ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									  "Термін дії Ваших %1 акційних бонусів закінчується %2. Умови використання за посиланням https://old.antoshka.ua/ua/landing/page-20072023"
									, Формат(ВыборкаСтроки.СуммаАннуляции, "ЧДЦ=2; ЧРГ=; ЧН=0,00")
									, Формат(ВыборкаСтроки.Период, "ДФ=dd.MM.yyyy")
								);
								
							Иначе

								ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									  "Термін дії Ваших %1 бонусів закінчується! Використуйте до '%2'"
									, Формат(ВыборкаСтроки.СуммаАннуляции, "ЧДЦ=2; ЧРГ=; ЧН=0,00")
									, Формат(ВыборкаСтроки.Период, "ДФ=dd.MM.yyyy")
								);
								
							КонецЕсли;
								
							Если ОтправитьОповещениеАннуляции(ВыборкаСтроки, ТекстСообщения, Отладка) Тогда
	
								ДанныеОповещения = Новый Структура(
									"НомерТелефона, ТекстСообщения, ДатаАннуляции"
									, ВыборкаСтроки.НомерТелефона
									, ТекстСообщения
									, Выборка.ДатаАннуляции
								);
								РегистрыСведений.ОповещенияКонтрагентов.Регистрация(ВыборкаСтроки.Контрагент
									, ПредопределенноеЗначение("Перечисление.ВидыОповещений.Аннуляция")
									, ДанныеОповещения
									, НачалоДня(ТекущаяДатаСеанса())
									, Отладка
								);
	
							КонецЕсли;
						
						КонецЕсли;
	
					Исключение
	
						ТекстОшибки = ОписаниеОшибки();
	
					КонецПопытки;

				КонецЦикла;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции	//	LNK 11.10.2022 05:59:17

//	LNK 26.06.2024 07:16:04
Функция ПроверитьСостояниеПоследовательности(Контрагент)

	ПараметрыЗапроса = Новый Структура(
		"ТипыБонусов, ТолькоТекущийОстаток, Команда"
		, ОбщегоНазначенияКлиентСервер.AAD(Перечисления.ТипыБонусов.Привлечение, Перечисления.ТипыБонусов.Органический, Перечисления.ТипыБонусов.Акционный)
		, Истина
		, "ОбщееСостояниеСчёта"
	);

	ДанныеОтвета = БонусныеБаллыСервер.BPS_ПолучитьОстатокБонусныхБаллов(Контрагент, ПараметрыЗапроса);

	Если ДанныеОтвета.Ошибка = Истина ИЛИ НЕ ДанныеОтвета.Свойство("ДанныеСчёта") Тогда

			ББ_ПоследовательностьВПорядке = Ложь;

	Иначе	ББ_ПоследовательностьВПорядке = (ДанныеОтвета.ДанныеСчёта.Регистратор_П = ДанныеОтвета.ДанныеСчёта.Регистратор_ГП);

	КонецЕсли;

	Возврат ББ_ПоследовательностьВПорядке;

КонецФункции

Функция ВыборкаАбонентовОповещения(ДатаАннуляции)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.Код КАК Код,
	|	ТаблицаДанных.Контрагент КАК Контрагент,
	|	ТаблицаДанных.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	СУММА(ТаблицаДанных.СуммаАннуляции) КАК СуммаАннуляции,
	|	ТаблицаСправочник.Пол КАК Пол
	|ПОМЕСТИТЬ Аннуляция
	|ИЗ
	|	Справочник.Контрагенты КАК ТаблицаСправочник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаАннуляций.Контрагент КАК Контрагент,
	|			ТаблицаАннуляций.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|			СУММА(ТаблицаАннуляций.СуммаБонусныхБаллов) КАК СуммаАннуляции
	|		ИЗ
	|			РегистрНакопления.БонусныеБаллы КАК ТаблицаАннуляций
	|		ГДЕ
	|			ТаблицаАннуляций.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаАннуляции, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаАннуляции, ДЕНЬ)
	|			И ТаблицаАннуляций.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Аннуляция)
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаАннуляций.Контрагент,
	|			ТаблицаАннуляций.ПрограммаЛояльности
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			ТаблицаПоЗаказам.Контрагент,
	|			ТаблицаПоЗаказам.ПрограммаЛояльности,
	|			-ТаблицаПоЗаказам.СуммаБонусныхБалловОстаток
	|		ИЗ
	|			РегистрНакопления.БонусныеБаллыПоЗаказамПокупателей.Остатки(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&ДатаАннуляции, ДЕНЬ),
	|				СЕКУНДА, 1),) КАК ТаблицаПоЗаказам
	|		ГДЕ
	|			ТаблицаПоЗаказам.СуммаБонусныхБалловОстаток > 0) КАК ТаблицаДанных
	|		ПО ТаблицаСправочник.Ссылка = ТаблицаДанных.Контрагент
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДанных.Контрагент,
	|	ТаблицаДанных.ПрограммаЛояльности,
	|	ТаблицаСправочник.Код,
	|	ТаблицаСправочник.Пол
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаДанных.СуммаАннуляции) >= 10
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	ПрограммаЛояльности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВедущая.Контрагент КАК Контрагент,
	|	МАКСИМУМ(ТаблицаВедущая.Регистратор) КАК Регистратор_П,
	|	ТаблицаГраницы.Регистратор КАК Регистратор_ГП
	|ПОМЕСТИТЬ Границы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаРеестр.Контрагент КАК Контрагент,
	|		ТаблицаРеестр.Период КАК Период,
	|		МАКСИМУМ(ТаблицаРеестр.Регистратор) КАК Регистратор
	|	ИЗ
	|		Последовательность.СписаниеБонусныхПрограмм КАК ТаблицаРеестр
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ТаблицаПериоды.Контрагент КАК Контрагент,
	|				МАКСИМУМ(ТаблицаПериоды.Период) КАК Период
	|			ИЗ
	|				Аннуляция КАК Аннуляция
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Последовательность.СписаниеБонусныхПрограмм КАК ТаблицаПериоды
	|					ПО Аннуляция.Контрагент = ТаблицаПериоды.Контрагент
	|			СГРУППИРОВАТЬ ПО
	|				ТаблицаПериоды.Контрагент) КАК ТаблицаПериоды
	|			ПО ТаблицаРеестр.Контрагент = ТаблицаПериоды.Контрагент
	|			И ТаблицаРеестр.Период = ТаблицаПериоды.Период
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаРеестр.Контрагент,
	|		ТаблицаРеестр.Период) КАК ТаблицаВедущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.СписаниеБонусныхПрограмм.Границы КАК ТаблицаГраницы
	|		ПО ТаблицаВедущая.Контрагент = ТаблицаГраницы.Контрагент
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаГраницы.Регистратор,
	|	ТаблицаВедущая.Контрагент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ДатаАннуляции КАК Период,
	|	Аннуляция.Контрагент КАК Контрагент,
	|	Аннуляция.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	Аннуляция.СуммаАннуляции КАК СуммаАннуляции,
	|	ТаблицаКонтакты.НомерТелефона КАК НомерТелефона,
	|	Аннуляция.Код КАК Код,
	|	Аннуляция.Пол КАК Пол,
	|	Аннуляция.ПрограммаЛояльности.ТипБонусов КАК ПрограммаЛояльностиТипБонусов
	|ИЗ
	|	Аннуляция КАК Аннуляция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Границы КАК Границы
	|		ПО Аннуляция.Контрагент = Границы.Контрагент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтакты
	|		ПО Аннуляция.Контрагент = ТаблицаКонтакты.Ссылка
	|		И ТаблицаКонтакты.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОповещенияКонтрагентов КАК Фильтр
	|		ПО Аннуляция.Контрагент = Фильтр.Контрагент
	|		И Фильтр.ВидОповещения = ЗНАЧЕНИЕ(Перечисление.ВидыОповещений.Аннуляция)
	|		И Фильтр.ДатаАннуляции = &ДатаАннуляции
	|ГДЕ
	|	ВЫБОР
	|		КОГДА Границы.Регистратор_ГП = Границы.Регистратор_П
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|	И Фильтр.Контрагент ЕСТЬ NULL
	|	И НЕ ТаблицаКонтакты.НомерТелефона = """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код
	|ИТОГИ
	|	МАКСИМУМ(Период),
	|	КОЛИЧЕСТВО(ПрограммаЛояльности),
	|	СУММА(СуммаАннуляции),
	|	МАКСИМУМ(НомерТелефона),
	|	МАКСИМУМ(Код),
	|	МАКСИМУМ(Пол)
	|ПО
	|	Контрагент"
	);
	Запрос.УстановитьПараметр("ДатаАннуляции", ДатаАннуляции);
	
	Возврат Запрос.Выполнить();

КонецФункции

//	LNK 11.10.2022 08:08:26
Функция ОтправитьОповещениеАннуляции(ДанныеАбонента, ТекстСообщения, Отладка = Ложь)

	НомерТелефона	= ОтправкаSMS.ПодготовитьНомерТелефона(ДанныеАбонента.НомерТелефона);

	Если НЕ Отладка = Истина Тогда	//	LNK 25.06.2024 06:37:53

		Результат = ОтправкаSMS.ОтправитьSMS(ОбщегоНазначенияКлиентСервер.AAD(НомерТелефона)
					, ТекстСообщения
					,
					, Истина
			);
		ЗначениеВозврата = НЕ Результат.Ошибка;

	Иначе

		ЗначениеВозврата = Истина;

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции

#КонецОбласти
