////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает индекс картинки 
// в зависимости от значения поля "ВариантСовместногоПрименения" 
// анализируемой группы
Функция ПолучитьИндексКартинкиДляГруппы(СтрокаДерева) Экспорт
	
	Индекс = 0;
	Если СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум Тогда
		Индекс = 8
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Минимум Тогда
		Индекс = 16
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Сложение Тогда
		Индекс = 0
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение Тогда
		Индекс = 4
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
		Индекс = 12
	КонецЕсли;
	
	Если СтрокаДерева.ПометкаУдаления Тогда
		Индекс = Индекс + 3;
	КонецЕсли;
	
	Возврат Индекс;
	
КонецФункции

// Функция возвращает индекс картинки 
// в зависимости от значения полей "СпособПредоставления" и "ПометкаУдаления"
// анализируемой скидки
Функция ПолучитьИндексКартинкиДляСкидки(СтрокаДерева) Экспорт
	
	Индекс = 0;
	Если СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Процент Тогда
		Если СтрокаДерева.ЗначениеСкидкиНаценки < 0 Тогда
			Индекс = 32;
		Иначе
			Индекс = 28;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма Тогда
		Если СтрокаДерева.ЗначениеСкидкиНаценки < 0 Тогда
			Индекс = 40;
		Иначе
			Индекс = 44;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦены Тогда
		Индекс = 48;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Подарок Тогда
		Индекс = 36;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение Тогда
		Индекс = 52;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.БесплатнаяДоставка Тогда
		Индекс = 65;
	КонецЕсли;
	
	Если СтрокаДерева.ПометкаУдаления Тогда
		Индекс = Индекс + 3;
	КонецЕсли;
	
	Возврат Индекс;
	
КонецФункции

// Функция создает таблицу значений.
//
// Возвращаемое значение:
//	ТаблицаЗначений
//
Функция ПолучитьПустуюТаблицуСкидокСРасшифровкой(Параметры)

	Если Параметры.ПустаяТаблицаСкидокСРасшифровкой = Неопределено Тогда

		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("КлючСвязи",   Новый ОписаниеТипов("Число"));
		Таблица.Колонки.Добавить("Расшифровка", Новый ОписаниеТипов("ТаблицаЗначений"));
		Таблица.Колонки.Добавить("Сумма",       Новый ОписаниеТипов("Число"));
		Таблица.Колонки.Добавить("Сегмент",		Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры"));
		Таблица.Колонки.Добавить("Действует",   Новый ОписаниеТипов("Булево"));

		Параметры.ПустаяТаблицаСкидокСРасшифровкой = Таблица;

	Иначе

		Возврат Параметры.ПустаяТаблицаСкидокСРасшифровкой.СкопироватьКолонки();

	КонецЕсли;

	Возврат Таблица;
	
КонецФункции

// Функция создает таблицу значений.
//
// Возвращаемое значение:
//	ТаблицаЗначений
//
Функция ПолучитьПустуюТаблицуПодарков()
	
	ПустаяТаблицаПодарков = Новый ТаблицаЗначений;
	ПустаяТаблицаПодарков.Колонки.Добавить("СкидкаНаценка"     , Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
	ПустаяТаблицаПодарков.Колонки.Добавить("Номенклатура"      , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ПустаяТаблицаПодарков.Колонки.Добавить("Характеристика"    , Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ПустаяТаблицаПодарков.Колонки.Добавить("Количество"        , Новый ОписаниеТипов("Число"));
	ПустаяТаблицаПодарков.Колонки.Добавить("Цена"              , Новый ОписаниеТипов("Число"));
	ПустаяТаблицаПодарков.Колонки.Добавить("Сумма"             , Новый ОписаниеТипов("Число"));
	ПустаяТаблицаПодарков.Колонки.Добавить("Склад"             , Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ПустаяТаблицаПодарков.Колонки.Добавить("КлючСвязи"         , Новый ОписаниеТипов("Число"));
	ПустаяТаблицаПодарков.Колонки.Добавить("Упаковка"          , Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ПустаяТаблицаПодарков.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число"));
	ПустаяТаблицаПодарков.Колонки.Добавить("КоличествоУпаковокНеобходимо", Новый ОписаниеТипов("Число"));
	ПустаяТаблицаПодарков.Колонки.Добавить("НоменклатураУсловий", Новый ОписаниеТипов("Соответствие"));
	
	Возврат ПустаяТаблицаПодарков;
	
КонецФункции // ПолучитьПустуюТаблицуПодарков()

// Функция создает таблицу значений.
//
// Возвращаемое значение:
//	ТаблицаЗначений
//
Функция ПолучитьПустуюТаблицуСообщений()
	
	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("СкидкаНаценка" , Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
	ПустаяТаблица.Колонки.Добавить("КлючСвязи"     , Новый ОписаниеТипов("Число"));
	ПустаяТаблица.Колонки.Добавить("ТекстСообщения", Новый ОписаниеТипов("Строка"));

	ПустаяТаблица.Колонки.Добавить("НоменклатураСкидочногоКупона", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));	// +HVOYA. 26.09.2016 10:44:31, Львова Е.А.
	ПустаяТаблица.Колонки.Добавить("ВариантВыдачиКупона", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыВыдачиКупона"));	// +HVOYA. 26.09.2016 10:44:31, Львова Е.А.

	ПустаяТаблица.Колонки.Добавить("СпособПредоставления", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПредоставленияСкидокНаценок"));	//	LNK 27.08.2020 10:42:41
	
	Возврат ПустаяТаблица;
	
КонецФункции

Функция ПолучитьПустуюТаблицуПакетаКупонов()	Экспорт	//	LNK 31.08.2020 12:14:58

//	Группируем данные для расчета купонов
	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("СкидкаНаценка"		, Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
	ПустаяТаблица.Колонки.Добавить("Номенклатура"		, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ПустаяТаблица.Колонки.Добавить("СегментНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры"));
	ПустаяТаблица.Колонки.Добавить("Кратность"			, Новый ОписаниеТипов("Число"));
	ПустаяТаблица.Колонки.Добавить("Сумма"				, Новый ОписаниеТипов("Число"));
	ПустаяТаблица.Колонки.Добавить("СуммаОригинал"		, Новый ОписаниеТипов("Число"));
	
	Возврат ПустаяТаблица;

КонецФункции


// Функция выполняет объединение подчиненных таблиц данных.
//
// Возвращаемое значение:
//	ТаблицаДанных - объединенная таблица данных.
//
Функция ОбъединитьТаблицыДанныхПодчиненныхСтрок(СтрокаДерева)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("КлючСвязи",                 Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Сумма",                     Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Расшифровка",               Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаДанных.Колонки.Добавить("РеквизитДопУпорядочивания", Новый ОписаниеТипов("Число"));
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		Если НЕ ПодчиненнаяСтрока.ЭтоГруппа Тогда // Это скидка а не группа
			
			Если НЕ ПодчиненнаяСтрока.ПараметрыУсловий.УсловияВыполнены Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПодчиненнаяСтрока.Управляемая И НЕ ПодчиненнаяСтрока.НазначенаПользователем Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		РеквизитДопУпорядочивания = ПодчиненнаяСтрока.РеквизитДопУпорядочивания;
		
		Для Каждого СтрокаТаблицы Из ПодчиненнаяСтрока.ТаблицаДанных Цикл
			Если ПодчиненнаяСтрока.ЭтоГруппа Тогда
				НоваяСтрока = ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.РеквизитДопУпорядочивания = РеквизитДопУпорядочивания;
			Иначе
				Если СтрокаТаблицы.Действует Тогда
					НоваяСтрока = ТаблицаДанных.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.РеквизитДопУпорядочивания = РеквизитДопУпорядочивания;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Функция создает таблицу значений с расшифровками скидок и добавляет в нее переданные значения.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Расшифровка скидок.
//
Функция ПолучитьРасшифровкуСкидки(СтрокаДерева, Сумма, Параметры, Расшифровка = Неопределено)
	
	Если Расшифровка = Неопределено Тогда	//	LNK 07.09.2021 11:55:53

		Расшифровка = Параметры.ПустаяТаблицаРасшифровка.СкопироватьКолонки();

	КонецЕсли;
	
	СтрокаРасшифровки = Расшифровка.Добавить();
	СтрокаРасшифровки.СкидкаНаценка = СтрокаДерева.СкидкаНаценка;
	СтрокаРасшифровки.Сумма         = Сумма;
	СтрокаРасшифровки.СпособПредоставления   = СтрокаДерева.СпособПредоставления;
	СтрокаРасшифровки.СпособПримененияСкидки = СтрокаДерева.СпособПримененияСкидки;

	СтрокаРасшифровки.ТаблицаУсловий = СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Скопировать(Новый Структура("Выполнено", Истина), "УсловиеПредоставления, СегментНоменклатурыОграничения");
	
	Возврат Расшифровка;
	
КонецФункции

// Функция возвращает таблицу действующих скидок (наценок)
//
// Возвращаемое значение:
//	ТаблицаЗначений - Расшифровка скидок.
//
Функция ПолучитьТаблицуСкидокНаценокДляРозничнойТорговли(ТекущаяДата, Магазин, ИспользоватьБонуснуюСистему) Экспорт
	
//	Для использования требуется только одно поле - "СкидкаНаценка".
//	Другие поля в результирующую таблицу добавлены для удобства отладки и возможного разбора полетов.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаДействиеСкидок.СкидкаНаценка КАК СкидкаНаценка,
	|	ТаблицаДействиеСкидок.Магазин КАК Магазин,
	|	ТаблицаДействиеСкидок.ИспользоватьИнтернетМагазин КАК ИспользоватьИнтернетМагазин
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	|			&ТекущаяДата,
	|			(КОНЕЦПЕРИОДА(ДатаОкончания, ДЕНЬ) >= &ТекущаяДата
	|				ИЛИ ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|				И НЕ СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ЗапретРозничнойПродажи)
	|				И (Магазин = &Магазин
	|					ИЛИ ВЫБОР
	|						КОГДА Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|							ТОГДА ВЫБОР
	|									КОГДА &Магазин = &ИнтернетМагазин
	|										ТОГДА ИспользоватьИнтернетМагазин = ИСТИНА
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ)
	|				И ВЫБОР
	|					КОГДА &ИспользоватьБонуснуюСистему = ИСТИНА
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ НЕ ЕСТЬNULL(СкидкаНаценка.ПрограммаЛояльности.СпособПримененияСкидки, ЗНАЧЕНИЕ(Перечисление.СпособыПримененияСкидокНаценок.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы)
	|				КОНЕЦ) КАК ТаблицаДействиеСкидок
	|
	|УПОРЯДОЧИТЬ ПО
	|	СкидкаНаценка"
	);	//	сортировка для удобства отладки
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ИспользоватьБонуснуюСистему", ИспользоватьБонуснуюСистему);
	Запрос.УстановитьПараметр("ИнтернетМагазин", ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику().ИнтернетМагазин);	//	LNK 25.02.2021 12:15:06

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Функция заполняет ключи связи в табличной части "Товары" документа.
//
Процедура ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, ИмяТЧ)	Экспорт
//
//	Индекс = 0;
//
//	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
//
//		Индекс = Индекс + 1;
//		СтрокаТЧ.КлючСвязи = Индекс;
//
//	КонецЦикла;
//
	ТабличнаяЧасть = Объект[ИмяТЧ];
	
	ДанныеКлючей = ОбщегоНазначения.ПолучитьДанныеКлючейСвязи(ТабличнаяЧасть, "КлючСвязи");

	Если НЕ ДанныеКлючей.ВсёХорошо Тогда

	//	Первым делом уничтожим возможные повторы в исходной таблице.

		Для каждого КлючСвязи Из ДанныеКлючей.Повторы Цикл

			СтрокиТабличнойЧасти = ТабличнаяЧасть.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));

			Индекс = СтрокиТабличнойЧасти.Количество() - 1;

			Пока Индекс > 0 Цикл

				СтрокиТабличнойЧасти[Индекс].КлючСвязи = 0;
				Индекс = Индекс - 1;

			КонецЦикла;

		КонецЦикла;

	//	Теперь устанавливаем нулевые позиции ключей с учётом пропущенных.
		КлючСвязи = ДанныеКлючей.КлючМаксимальный;	//	дальше будем идти с пре-итерацией в 1

		Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл

			Если СтрокаТабличнойЧасти.КлючСвязи <= 0 Тогда

				Если НЕ ДанныеКлючей.Пропуски.Количество() = 0 Тогда

					СтрокаТабличнойЧасти.КлючСвязи = ДанныеКлючей.Пропуски[0];
					ДанныеКлючей.Пропуски.Удалить(0);

				Иначе

					КлючСвязи = КлючСвязи + 1;
					СтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьКлючиСвязиВТабличнойЧастиТовары()

// Функция получает текущее время объекта
//
// Параметры
//  Объект  - ДокументОбъект - объект для которого нужно получить текущее время
//
// Возвращаемое значение:
//   Дата   - Текущее время объекта
//
Функция ПолучитьТекущееВремяОбъекта(Объект) Экспорт
	
	ТекущаяДата = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДатаСеанса());
	ТекущееВремя = '00010101' + (ТекущаяДата - НачалоДня(ТекущаяДата));
	
	Возврат ТекущееВремя;
	
КонецФункции // ПолучитьТекущееВремяОбъекта()

// Функция получает текущую дату время объекта
//
// Параметры
//  Объект  - ДокументОбъект - объект для которого нужно получить текущее время
//
// Возвращаемое значение:
//   Дата   - Текущее время объекта
//
Функция ПолучитьТекущуюДатуОбъекта(Объект) Экспорт
	
	ТекущаяДата = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДатаСеанса());
	
	Возврат ТекущаяДата;
	
КонецФункции // ПолучитьТекущееВремяОбъекта()

Функция ПолучитьУправляемыеСкидкиИзМассиваСкидок(МассивСкидок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК СкидкаНаценка
	|ИЗ
	|	Справочник.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Управляемая
	|	И СкидкиНаценки.Ссылка В(&МассивСкидок)";
	
	Запрос.УстановитьПараметр("МассивСкидок", МассивСкидок);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СкидкаНаценка");
	
КонецФункции // ПолучитьУправляемыеСкидкиИзМассиваСкидок()

// Процедура дополняет входные параметры данными об управляемых скидках,
// содержащихся в табличной части "СкидкиНаценки"
Процедура ПодготовитьДанныеОВыбранныхУправляемыхСкидках(Объект, ВходныеПараметры) Экспорт
	
	// Если управляемые скидки не переданы, то попытаемся получить их их предыдущего расчета
	Если ВходныеПараметры.ВосстанавливатьУправляемыеСкидки И ВходныеПараметры.УправляемыеСкидки.Количество() = 0 Тогда
		
		ТаблицаСкидок = Объект.СкидкиНаценки.Выгрузить(, "СкидкаНаценка");
		ТаблицаСкидок.Свернуть("СкидкаНаценка");
		
		МассивСкидок = ТаблицаСкидок.ВыгрузитьКолонку("СкидкаНаценка");
		МассивСкидок = ПолучитьУправляемыеСкидкиИзМассиваСкидок(МассивСкидок);
		Для каждого Скидка Из МассивСкидок Цикл
			ВходныеПараметры.УправляемыеСкидки.Добавить(Скидка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ЗАПРОСЫ

// Функция формирует текст запроса для таблицы действующих скидок (наценок).
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаСкидкиНаценки()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиНаценки.СкидкаНаценка КАК Ссылка
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&СкидкиНаценки КАК СкидкиНаценки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиНаценки.Ссылка КАК Ссылка,
	|	СкидкиНаценки.ВариантСовместногоПрименения КАК ВариантСовместногоПрименения,
	|	СкидкиНаценки.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	СкидкиНаценки.ОбластьПредоставления КАК ОбластьПредоставления,
	|	СкидкиНаценки.СпособПредоставления КАК СпособПредоставления,
	|	СкидкиНаценки.ВидЦены КАК ВидЦены,
	|	СкидкиНаценки.СегментНоменклатурыПредоставления КАК СегментНоменклатурыПредоставления,
	|	ВЫБОР
	|		КОГДА СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сумма)
	|			ТОГДА СкидкиНаценки.ЗначениеСкидкиНаценки
	|		ИНАЧЕ СкидкиНаценки.ЗначениеСкидкиНаценки
	|	КОНЕЦ КАК ЗначениеСкидкиНаценки,
	|	СкидкиНаценки.ПодарокИзСписка КАК ПодарокИзСписка,
	|	СкидкиНаценки.ПодарокИзКорзиныПокупателя КАК ПодарокИзКорзиныПокупателя,
	|	СкидкиНаценки.КоличествоПодарковИзКорзиныПокупателя КАК КоличествоПодарковИзКорзиныПокупателя,
	|	СкидкиНаценки.УчитыватьПодарокКакПродажу КАК УчитыватьПодарокКакПродажу,
	|	СкидкиНаценки.ЦенаПодарка КАК ЦенаПодарка,
	|	СкидкиНаценки.ПечататьСерийныйНомер КАК ПечататьСерийныйНомер,
	|	СкидкиНаценки.Родитель КАК Родитель,
	|	СкидкиНаценки.Родитель.Наименование КАК РодительНаименование,
	|	СкидкиНаценки.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	СкидкиНаценки.НачислятьНаАкционныеТовары КАК НачислятьНаАкционныеТовары,
	|	ЕСТЬNULL(СкидкиНаценки.ПрограммаЛояльности.ТипПрограммыЛояльности, ЗНАЧЕНИЕ(Перечисление.ТипыПрограммЛояльности.Покупатели)) КАК ТипПрограммыЛояльности,
	|	ЕСТЬNULL(СкидкиНаценки.ПрограммаЛояльности.НачислятьБаллыПоКредитнойПрограмме, ЛОЖЬ) КАК НачислятьБаллыПоКредитнойПрограмме,
	|	ЕСТЬNULL(СкидкиНаценки.ПрограммаЛояльности.НачислятьБаллыНаАкционныйТовар, ЛОЖЬ) КАК НачислятьБаллыНаАкционныйТовар,
	|	ЕСТЬNULL(СкидкиНаценки.ПрограммаЛояльности.СовместноеНачислениеСкидокИБонусов, ЛОЖЬ) КАК СовместноеНачислениеСкидокИБонусов,
	|	ЕСТЬNULL(СкидкиНаценки.ПрограммаЛояльности.СпособПримененияСкидки, ЗНАЧЕНИЕ(Перечисление.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок)) КАК СпособПримененияСкидки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СкидкиНаценки.ПрограммаЛояльности.СпособПримененияСкидки, ЗНАЧЕНИЕ(Перечисление.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок)) = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок)
	|			ТОГДА СкидкиНаценки.ИсключаетБонусныеБаллы
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИсключаетБонусныеБаллы
	|ПОМЕСТИТЬ ВременнаяТаблицаСкидкиНаценки
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблицаСкидки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки КАК СкидкиНаценки
	|		ПО ВременнаяТаблицаСкидки.Ссылка = СкидкиНаценки.Ссылка
	|ГДЕ
	|	(&РасчетПодарков
	|			ИЛИ НЕ СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Подарок))
	|	И (&РасчетСообщений
	|			ИЛИ НЕ СкидкиНаценки.СпособПредоставления В (ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сообщение), ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ПакетКупоновКратныйСумме)))
	|	И ВЫБОР
	|			КОГДА СкидкиНаценки.СпособПредоставления В (ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сообщение), ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ПакетКупоновКратныйСумме))
	|					И СкидкиНаценки.МоментВыдачиСообщения = ЗНАЧЕНИЕ(Перечисление.ТочкиВыдачиСообщенияКассиру.ПослеОформленияЧека)
	|				ТОГДА &ТолькоСообщенияПослеОформления
	|			ИНАЧЕ НЕ &ТолькоСообщенияПослеОформления = ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ИспользоватьБонуснуюСистему = ИСТИНА
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ ЕСТЬNULL(СкидкиНаценки.ПрограммаЛояльности.СпособПримененияСкидки, ЗНАЧЕНИЕ(Перечисление.СпособыПримененияСкидокНаценок.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы)
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ВидЦены,
	|	СпособПредоставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСкидкиНаценки.Ссылка КАК СкидкаНаценка,
	|	ТаблицаСкидкиНаценки.СпособПредоставления КАК СпособПредоставления,
	|	ТаблицаСкидкиНаценки.ОбластьПредоставления КАК ОбластьПредоставления,
	|	ТаблицаСкидкиНаценки.ВидЦены КАК ВидЦены,
	|	ТаблицаСкидкиНаценки.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки,
	|	ТаблицаСкидкиНаценки.СегментНоменклатурыПредоставления КАК СегментНоменклатурыПредоставления,
	|	ТаблицаСкидкиНаценки.ПодарокИзСписка КАК ПодарокИзСписка,
	|	ТаблицаСкидкиНаценки.ПодарокИзКорзиныПокупателя КАК ПодарокИзКорзиныПокупателя,
	|	ТаблицаСкидкиНаценки.КоличествоПодарковИзКорзиныПокупателя КАК КоличествоПодарковИзКорзиныПокупателя,
	|	ТаблицаСкидкиНаценки.УчитыватьПодарокКакПродажу КАК УчитыватьПодарокКакПродажу,
	|	ТаблицаСкидкиНаценки.ЦенаПодарка КАК ЦенаПодарка,
	|	ТаблицаСкидкиНаценки.ПечататьСерийныйНомер КАК ПечататьСерийныйНомер,
	|	ТаблицаСкидкиНаценки.Родитель КАК Родитель,
	|	ТаблицаСкидкиНаценки.РодительНаименование КАК РодительНаименование,
	|	ТаблицаСкидкиНаценки.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТаблицаСкидкиНаценки.ТипПрограммыЛояльности КАК ТипПрограммыЛояльности,
	|	ТаблицаСкидкиНаценки.НачислятьНаАкционныеТовары КАК НачислятьНаАкционныеТовары,
	|	ТаблицаСкидкиНаценки.НачислятьБаллыПоКредитнойПрограмме КАК НачислятьБаллыПоКредитнойПрограмме,
	|	ТаблицаСкидкиНаценки.НачислятьБаллыНаАкционныйТовар КАК НачислятьБаллыНаАкционныйТовар,
	|	ТаблицаСкидкиНаценки.СовместноеНачислениеСкидокИБонусов КАК СовместноеНачислениеСкидокИБонусов,
	|	ТаблицаСкидкиНаценки.СпособПримененияСкидки КАК СпособПримененияСкидки,
	|	ТаблицаСкидкиНаценки.ИсключаетБонусныеБаллы КАК ИсключаетБонусныеБаллы
	|ИЗ
	|	ВременнаяТаблицаСкидкиНаценки КАК ТаблицаСкидкиНаценки"
	;
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 3, 3, "СкидкиНаценки");
	
КонецФункции

// Функция формирует текст запроса для таблицы действующих скидок (наценок).
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаУсловияПредоставления()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаУсловий.УсловиеПредоставления КАК Ссылка,
	|	ТаблицаУсловий.УсловиеПредоставления.УсловиеПредоставления КАК УсловиеПредоставления,
	|	ТаблицаУсловий.УсловиеПредоставления.ВариантОпределенияПериодаНакопительнойСкидки КАК ВариантОпределенияПериодаНакопительнойСкидки,
	|	ТаблицаУсловий.УсловиеПредоставления.ВариантНакопления КАК ВариантНакопления,
	|	ТаблицаУсловий.УсловиеПредоставления.ТипСравнения КАК ТипСравнения,
	|	ТаблицаУсловий.УсловиеПредоставления.ВалютаОграничения КАК ВалютаОграничения,
	|	ТаблицаУсловий.УсловиеПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж КАК КритерийОграниченияПримененияЗаОбъемПродаж,
	|	ТаблицаУсловий.УсловиеПредоставления.ОбластьОграничения КАК ОбластьОграничения,
	|	ТаблицаУсловий.УсловиеПредоставления.ГрафикОплаты КАК ГрафикОплаты,
	|	ТаблицаУсловий.УсловиеПредоставления.ФормаОплаты КАК ФормаОплаты,
	|	ТаблицаУсловий.УсловиеПредоставления.СегментНоменклатурыОграничения КАК СегментНоменклатурыОграничения,
	|	ТаблицаУсловий.УсловиеПредоставления.ПериодНакопления КАК ПериодНакопления,
	|	ТаблицаУсловий.УсловиеПредоставления.ГруппаПользователей КАК ГруппаПользователей,
	|	ТаблицаУсловий.УсловиеПредоставления.ДнейДоДняРождения КАК ДнейДоДняРождения,
	|	ТаблицаУсловий.УсловиеПредоставления.ДнейПослеДняРождения КАК ДнейПослеДняРождения,
	|	ТаблицаУсловий.УсловиеПредоставления.ПорядковыйНомерПродажиКратен КАК ПорядковыйНомерПродажиКратен,
	|	ВЫБОР
	|		КОГДА (ТаблицаУсловий.УсловиеПредоставления.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж)
	|				ИЛИ ТаблицаУсловий.УсловиеПредоставления.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж))
	|				И ТаблицаУсловий.УсловиеПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|			ТОГДА ТаблицаУсловий.УсловиеПредоставления.ЗначениеУсловияОграничения
	|		ИНАЧЕ ТаблицаУсловий.УсловиеПредоставления.ЗначениеУсловияОграничения
	|	КОНЕЦ КАК ЗначениеУсловияОграничения,
	|	ТаблицаУсловий.УсловиеПредоставления.УникальныйКупон КАК УникальныйКупон,
	|	СкидкиНаценки.Ссылка КАК СкидкаНаценка
	|ПОМЕСТИТЬ УсловияПредоставления
	|ИЗ
	|	ВременнаяТаблица КАК СкидкиНаценки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК ТаблицаУсловий
	|		ПО СкидкиНаценки.Ссылка = ТаблицаУсловий.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	УсловияПредоставления.УсловиеПредоставления КАК УсловиеПредоставления,
	|	УсловияПредоставления.ВариантОпределенияПериодаНакопительнойСкидки КАК ВариантОпределенияПериодаНакопительнойСкидки,
	|	УсловияПредоставления.ВариантНакопления КАК ВариантНакопления,
	|	УсловияПредоставления.ВалютаОграничения КАК ВалютаОграничения,
	|	УсловияПредоставления.ТипСравнения КАК ТипСравнения,
	|	УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж КАК КритерийОграниченияПримененияЗаОбъемПродаж,
	|	УсловияПредоставления.ОбластьОграничения КАК ОбластьОграничения,
	|	УсловияПредоставления.ГрафикОплаты КАК ГрафикОплаты,
	|	УсловияПредоставления.ФормаОплаты КАК ФормаОплаты,
	|	УсловияПредоставления.ЗначениеУсловияОграничения КАК ЗначениеУсловияОграничения,
	|	УсловияПредоставления.СегментНоменклатурыОграничения КАК СегментНоменклатурыОграничения,
	|	УсловияПредоставления.ПериодНакопления КАК ПериодНакопления,
	|	УсловияПредоставления.ГруппаПользователей КАК ГруппаПользователей,
	|	УсловияПредоставления.ДнейДоДняРождения КАК ДнейДоДняРождения,
	|	УсловияПредоставления.ДнейПослеДняРождения КАК ДнейПослеДняРождения,
	|	УсловияПредоставления.ПорядковыйНомерПродажиКратен КАК ПорядковыйНомерПродажиКратен,
	|	УсловияПредоставления.УникальныйКупон КАК УникальныйКупон
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления"
	;
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	;
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 2, 2, "УсловияПредоставления");
	
КонецФункции // ТекстЗапросаТаблицаСкидкиНаценки

// Функция формирует текст запроса для таблицы товаров по сегментам.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаТоварыПоСегментам() 
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.КлючСвязи КАК КлючСвязи,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.АкционнаяЦена КАК АкционнаяЦена,
	|	Товары.Цена КАК ЦенаЗаУпаковку
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.КлючСвязи КАК КлючСвязи,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	НоменклатураСегмента.Сегмент КАК СегментНоменклатуры,
	|	Товары.ЦенаЗаУпаковку КАК ЦенаЗаУпаковку,
	|	Товары.АкционнаяЦена КАК АкционнаяЦена,
	|	Товары.КоличествоУпаковок * Товары.ЦенаЗаУпаковку КАК Сумма
	|ПОМЕСТИТЬ ВременнаяТаблицаТоварыПоСегментам
	|ИЗ
	|	ВременнаяТаблицаТовары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|		ПО Товары.Номенклатура = НоменклатураСегмента.Номенклатура
	|			И Товары.Характеристика = НоменклатураСегмента.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.КлючСвязи,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка),
	|	Товары.ЦенаЗаУпаковку,
	|	Товары.АкционнаяЦена,
	|	Товары.КоличествоУпаковок * Товары.ЦенаЗаУпаковку
	|ИЗ
	|	ВременнаяТаблицаТовары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
	|	ВЫРАЗИТЬ(ЦеныНоменклатуры.Цена / ВЫБОР
	|			КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 1) = 0
	|				ТОГДА 1
	|			ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 1)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК МинимальнаяЦена
	|ПОМЕСТИТЬ ВременнаяТаблицаМинимальныхЦен
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ТекущаяДата,
	|			ВидЦены = &ВидМинимальныхЦенПродажи
	|				И (Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВременнаяТаблицаТовары.Номенклатура,
	|						ВременнаяТаблицаТовары.Характеристика
	|					ИЗ
	|						ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары)) КАК ЦеныНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТоварыПоСегментам.КлючСвязи КАК КлючСвязи,
	|	ТаблицаТоварыПоСегментам.Номенклатура КАК Номенклатура,
	|	ТаблицаТоварыПоСегментам.Характеристика КАК Характеристика,
	|	ТаблицаТоварыПоСегментам.Упаковка КАК Упаковка,
	|	ТаблицаТоварыПоСегментам.Количество КАК Количество,
	|	ТаблицаТоварыПоСегментам.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТоварыПоСегментам.СегментНоменклатуры КАК СегментНоменклатуры,
	|	ТаблицаТоварыПоСегментам.ЦенаЗаУпаковку КАК ЦенаЗаУпаковку,
	|	ТаблицаТоварыПоСегментам.Сумма КАК Сумма
	|ПОМЕСТИТЬ ИсключаемаяНоменклатура
	|ИЗ
	|	ВременнаяТаблицаТоварыПоСегментам КАК ТаблицаТоварыПоСегментам
	|ГДЕ
	|	ТаблицаТоварыПоСегментам.СегментНоменклатуры = &СегментИсключаемойНоменклатуры
	|	И НЕ &СегментИсключаемойНоменклатуры = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаВедущая.КлючСвязи КАК КлючСвязи,
	|	ТаблицаВедущая.Номенклатура КАК Номенклатура,
	|	ТаблицаВедущая.Характеристика КАК Характеристика,
	|	ТаблицаВедущая.Упаковка КАК Упаковка,
	|	ТаблицаВедущая.Количество КАК Количество,
	|	ТаблицаВедущая.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаВедущая.ЦенаЗаУпаковку КАК ЦенаЗаУпаковку,
	|	ТаблицаВедущая.Сумма КАК Сумма,
	|	ТаблицаВедущая.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ТаблицаВедущая.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаВедущая.АкционнаяЦена КАК АкционнаяЦена,
	|	ТаблицаВедущая.СегментНоменклатуры КАК СегментНоменклатуры,
	|	ЕСТЬNULL(ТаблицаМинимальныхЦен.МинимальнаяЦена, 0) * ТаблицаВедущая.Количество КАК МинимальнаяСумма
	|ИЗ
	|	ВременнаяТаблицаТоварыПоСегментам КАК ТаблицаВедущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаМинимальныхЦен КАК ТаблицаМинимальныхЦен
	|		ПО ТаблицаВедущая.Номенклатура = ТаблицаМинимальныхЦен.Номенклатура
	|			И ТаблицаВедущая.Характеристика = ТаблицаМинимальныхЦен.Характеристика
	|ГДЕ
	|	НЕ (ТаблицаВедущая.Номенклатура, ТаблицаВедущая.Характеристика) В
	|				(ВЫБРАТЬ
	|					ИсключаемаяНоменклатура.Номенклатура,
	|					ИсключаемаяНоменклатура.Характеристика
	|				ИЗ
	|					ИсключаемаяНоменклатура КАК ИсключаемаяНоменклатура)
	|	И НЕ ТаблицаВедущая.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЦенаЗаУпаковку"
	;
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 5, 5, "ТоварыПоСегментам");
	
КонецФункции

// Функция формирует текст запроса для таблицы значений скидок (наценок) по ценовым группам.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаСкидкиНаценкиПоЦеновымГруппам()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеновыеГруппы.Ссылка        КАК СкидкаНаценка,
	|	ЦеновыеГруппы.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ВЫБОР
	|		КОГДА СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сумма)
	|			ТОГДА ЦеновыеГруппы.ЗначениеСкидкиНаценки
	|		ИНАЧЕ ЦеновыеГруппы.ЗначениеСкидкиНаценки
	|	КОНЕЦ КАК ЗначениеСкидкиНаценки
	|ИЗ
	|	ВременнаяТаблицаСкидкиНаценки КАК СкидкиНаценки
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.ЦеновыеГруппы КАК ЦеновыеГруппы
	|		ПО СкидкиНаценки.Ссылка = ЦеновыеГруппы.Ссылка";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 1, 1, "СкидкиНаценкиПоЦеновымГруппам");
	
КонецФункции // ТекстЗапросаТаблицаЗначенияСкидокНаценокПоЦеновымГруппам()

// Функция формирует текст запроса для таблицы цены номенклатуры (цена пересчитывается в валюту документа за единицу хранения).
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаЦеныНоменклатуры()

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиНаценки.Ссылка                         КАК СкидкаНаценка,
	|	ЦеныНоменклатуры.ВидЦены        КАК ВидЦены,
	|	ЦеныНоменклатуры.Номенклатура   КАК Номенклатура,
	|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
	|	ЦеныНоменклатуры.Упаковка       КАК Упаковка,
	|	
	|	ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 1) КАК УпаковкаКоэффициент,
	|	
	|	ВЫРАЗИТЬ(ЦеныНоменклатуры.Цена КАК ЧИСЛО(15, 2)) КАК Цена
	|	
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, 
	|	
	|			ВидЦены В (ВЫБРАТЬ РАЗЛИЧНЫЕ ВременнаяТаблицаСкидкиНаценки.ВидЦены ИЗ ВременнаяТаблицаСкидкиНаценки)
	|				И Номенклатура В (ВЫБРАТЬ ВременнаяТаблицаТовары.Номенклатура ИЗ ВременнаяТаблицаТовары)
	|	
	|	) КАК ЦеныНоменклатуры
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСкидкиНаценки КАК СкидкиНаценки
	|		ПО ЦеныНоменклатуры.ВидЦены = СкидкиНаценки.ВидЦены
	|			И (СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ВидЦены))";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 1, 1, "ЦеныНоменклатуры");
	
КонецФункции // ТекстЗапросаТаблицаЦеныНоменклатуры()

// Функция формирует текст запроса для таблицы значений скидок (наценок) по наборам подаркам.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаСкидкиНаценкиНаборыПодарков(ИспользоватьПрименениеЦен)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСкидкиНаценки.Ссылка КАК СкидкаНаценка,
	|	ТаблицаСкидкиНаценки.ПодарокИзСписка КАК ПодарокИзСписка,
	|	ТаблицаПодарки.Номенклатура КАК Номенклатура,
	|	ТаблицаПодарки.Характеристика КАК Характеристика,
	|	ТаблицаПодарки.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(ТаблицаПодарки.КоличествоУпаковок, 0) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(ТаблицаПодарки.КоличествоУпаковокНеобходимо, 0) КАК КоличествоУпаковокНеобходимо,
	|	ЕСТЬNULL(ТаблицаПодарки.Количество, 0) КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаПодарки.Номенклатура ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяССылка)
	|		ИНАЧЕ ТаблицаПодарки.Номенклатура.НоменклатурнаяГруппа
	|	КОНЕЦ КАК НоменклатурнаяГруппа
	|ПОМЕСТИТЬ ТаблицаНабораПодарков
	|ИЗ
	|	ВременнаяТаблицаСкидкиНаценки КАК ТаблицаСкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаВедущая.Ссылка КАК Ссылка,
	|			ТаблицаНаборПодарков.НомерСтроки КАК НомерСтроки,
	|			ТаблицаНаборПодарков.Номенклатура КАК Номенклатура,
	|			ТаблицаНаборПодарков.Характеристика КАК Характеристика,
	|			ТаблицаНаборПодарков.Упаковка КАК Упаковка,
	|			ТаблицаНаборПодарков.КоличествоУпаковок КАК КоличествоУпаковокНеобходимо,
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(ТаблицаТоварыНаСкладах.КоличествоОстаток, 0) >= ТаблицаНаборПодарков.Количество
	|					ТОГДА ТаблицаНаборПодарков.КоличествоУпаковок
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК КоличествоУпаковок,
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(ТаблицаТоварыНаСкладах.КоличествоОстаток, 0) >= ТаблицаНаборПодарков.Количество
	|					ТОГДА ТаблицаНаборПодарков.Количество
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК Количество,
	|			ЕСТЬNULL(ТаблицаТоварыНаСкладах.КоличествоОстаток, 0) КАК КоличествоОстаток
	|		ИЗ
	|			Справочник.СкидкиНаценки КАК ТаблицаВедущая
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.НаборПодарков КАК ТаблицаНаборПодарков
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	|							&ТекущаяДата,
	|							Склад = &СкладПродажи
	|								И Номенклатура В
	|									(ВЫБРАТЬ
	|										Т.Номенклатура
	|									ИЗ
	|										Справочник.СкидкиНаценки.НаборПодарков КАК Т)) КАК ТаблицаТоварыНаСкладах
	|					ПО ТаблицаНаборПодарков.Номенклатура = ТаблицаТоварыНаСкладах.Номенклатура
	|						И ТаблицаНаборПодарков.Характеристика = ТаблицаТоварыНаСкладах.Характеристика
	|				ПО ТаблицаВедущая.Ссылка = ТаблицаНаборПодарков.Ссылка
	|		ГДЕ
	|			НЕ ТаблицаВедущая.ПодарокИзСписка
	|			И ТаблицаВедущая.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Подарок)) КАК ТаблицаПодарки
	|		ПО (ТаблицаСкидкиНаценки.Ссылка = ТаблицаПодарки.Ссылка)
	|ГДЕ
	|	ТаблицаСкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Подарок)"
	;
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если ИспользоватьПрименениеЦен Тогда

		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДействующиеЦены.Цена КАК Цена,
		|	ДействующиеЦены.Номенклатура КАК Номенклатура,
		|	ДействующиеЦены.Характеристика КАК Характеристика,
		|	ДействующиеЦены.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ТаблицаЦенНаборовПодарков
		|ИЗ
		|	РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
		|			&ТекущаяДата,
		|			ОбъектЦенообразования = &Магазин
		|				И Номенклатура В
		|					(ВЫБРАТЬ
		|						ТаблицаНабораПодарков.Номенклатура
		|					ИЗ
		|						ТаблицаНабораПодарков)) КАК ДействующиеЦены
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаспределениеПродаж.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА НЕ РаспределениеПродаж.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА РаспределениеПродаж.РабочееМесто = &РабочееМесто
		|						ТОГДА 1
		|					ИНАЧЕ 2
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РаспределениеПродаж.РабочееМесто = &РабочееМесто
		|					ТОГДА 3
		|				ИНАЧЕ 4
		|			КОНЕЦ
		|	КОНЕЦ КАК ПолеУпорядочивания,
		|	РаспределениеПродаж.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		|ПОМЕСТИТЬ ТаблицаСкладов
		|ИЗ
		|	РегистрСведений.РаспределениеПродаж КАК РаспределениеПродаж
		|ГДЕ
		|	РаспределениеПродаж.Магазин = &Магазин
		|	И (РаспределениеПродаж.НоменклатурнаяГруппа В
		|				(ВЫБРАТЬ
		|					ТаблицаНабораПодарков.НоменклатурнаяГруппа
		|				ИЗ
		|					ТаблицаНабораПодарков)
		|			ИЛИ РаспределениеПродаж.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка))
		|	И (РаспределениеПродаж.РабочееМесто = &РабочееМесто
		|			ИЛИ РаспределениеПродаж.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НоменклатурнаяГруппа,
		|	ПолеУпорядочивания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаПодарков.Номенклатура КАК Номенклатура,
		|	ТаблицаПодарков.Характеристика КАК Характеристика,
		|	ТаблицаПодарков.Упаковка КАК Упаковка,
		|	ТаблицаПодарков.СкидкаНаценка КАК СкидкаНаценка,
		|	ТаблицаПодарков.ПодарокИзСписка КАК ПодарокИзСписка,
		|	ТаблицаПодарков.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаПодарков.КоличествоУпаковокНеобходимо КАК КоличествоУпаковокНеобходимо,
		|	ТаблицаПодарков.Количество КАК Количество,
		|	ТаблицаПодарков.Цена КАК Цена,
		|	ТаблицаПодарков.Сумма КАК Сумма,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаСкладов.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ТОГДА &СкладПродажи
		|		ИНАЧЕ ТаблицаСкладов.Склад
		|	КОНЕЦ КАК Склад
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаНабораПодарков.Номенклатура КАК Номенклатура,
		|		ТаблицаНабораПодарков.Характеристика КАК Характеристика,
		|		ТаблицаНабораПодарков.Упаковка КАК Упаковка,
		|		ТаблицаНабораПодарков.СкидкаНаценка КАК СкидкаНаценка,
		|		ТаблицаНабораПодарков.ПодарокИзСписка КАК ПодарокИзСписка,
		|		ТаблицаНабораПодарков.КоличествоУпаковок КАК КоличествоУпаковок,
		|		ТаблицаНабораПодарков.КоличествоУпаковокНеобходимо КАК КоличествоУпаковокНеобходимо,
		|		ТаблицаНабораПодарков.Количество КАК Количество,
		|		ЕСТЬNULL(ТаблицаЦенНаборовПодарков.Цена, 0) КАК Цена,
		|		ЕСТЬNULL(ТаблицаЦенНаборовПодарков.Цена, 0) * ВЫБОР
		|			КОГДА ТаблицаНабораПодарков.КоличествоУпаковок = 0
		|				ТОГДА ТаблицаНабораПодарков.Количество
		|			ИНАЧЕ ТаблицаНабораПодарков.КоличествоУпаковок
		|		КОНЕЦ КАК Сумма,
		|		МИНИМУМ(ТаблицаСкладов.ПолеУпорядочивания) КАК ПолеУпорядочивания,
		|		ТаблицаСкладов.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		|	ИЗ
		|		ТаблицаНабораПодарков КАК ТаблицаНабораПодарков
		|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦенНаборовПодарков КАК ТаблицаЦенНаборовПодарков
		|			ПО (НЕ ТаблицаНабораПодарков.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|				И ТаблицаНабораПодарков.Номенклатура = ТаблицаЦенНаборовПодарков.Номенклатура
		|				И ТаблицаНабораПодарков.Характеристика = ТаблицаЦенНаборовПодарков.Характеристика
		|				И ТаблицаНабораПодарков.Упаковка = ТаблицаЦенНаборовПодарков.Упаковка
		|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК ТаблицаСкладов
		|			ПО ТаблицаНабораПодарков.Номенклатура = ТаблицаСкладов.НоменклатурнаяГруппа
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаНабораПодарков.Упаковка,
		|		ТаблицаНабораПодарков.Характеристика,
		|		ТаблицаНабораПодарков.Номенклатура,
		|		ТаблицаНабораПодарков.КоличествоУпаковок,
		|		ТаблицаНабораПодарков.КоличествоУпаковокНеобходимо,
		|		ТаблицаНабораПодарков.СкидкаНаценка,
		|		ТаблицаНабораПодарков.ПодарокИзСписка,
		|		ТаблицаСкладов.НоменклатурнаяГруппа,
		|		ТаблицаНабораПодарков.Количество,
		|		ЕСТЬNULL(ТаблицаЦенНаборовПодарков.Цена, 0),
		|		ЕСТЬNULL(ТаблицаЦенНаборовПодарков.Цена, 0) * ВЫБОР
		|			КОГДА ТаблицаНабораПодарков.КоличествоУпаковок = 0
		|				ТОГДА ТаблицаНабораПодарков.Количество
		|			ИНАЧЕ ТаблицаНабораПодарков.КоличествоУпаковок
		|		КОНЕЦ) КАК ТаблицаПодарков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК ТаблицаСкладов
		|		ПО ТаблицаПодарков.НоменклатурнаяГруппа = ТаблицаСкладов.НоменклатурнаяГруппа
		|			И ТаблицаПодарков.ПолеУпорядочивания = ТаблицаСкладов.ПолеУпорядочивания"
		;
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
		Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 4, 4, "СкидкиНаценкиНаборыПодарков");
		
	Иначе

		ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюИспользованияАссортимента();
		Если ИспользоватьАссортимент Тогда
			ТекстЗапроса = ТекстЗапроса + 
			"
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Ассортимент.Номенклатура КАК Номенклатура,
			|	Ассортимент.ВидЦен КАК ВидЦен
			|ПОМЕСТИТЬ ТаблицаАссортимента
			|ИЗ
			|	РегистрСведений.Ассортимент.СрезПоследних(
			|			КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ),
			|				ОбъектПланирования = &ФорматМагазина) КАК Ассортимент
			|
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
			|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
			|	МАКСИМУМ(ЦеныНоменклатуры.Упаковка) КАК Упаковка,
			|	МАКСИМУМ(ЦеныНоменклатуры.Цена) КАК Цена
			|ПОМЕСТИТЬ ТаблицаЦенНаборовПодарков
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата,
			|					ВидЦены В
			|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|							Т.ВидЦен
			|						ИЗ
			|							ТаблицаАссортимента КАК Т)) КАК ЦеныНоменклатуры
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаАссортимента КАК ТаблицаАссортимента
			|		ПО (ТаблицаАссортимента.Номенклатура = ЦеныНоменклатуры.Номенклатура)
			|			И (ТаблицаАссортимента.ВидЦен = ЦеныНоменклатуры.ВидЦены)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЦеныНоменклатуры.Номенклатура,
			|	ЦеныНоменклатуры.Характеристика
			|
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РаспределениеПродаж.Склад,
			|	ВЫБОР
			|		КОГДА (НЕ РаспределениеПродаж.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка))
			|			ТОГДА ВЫБОР
			|					КОГДА РаспределениеПродаж.РабочееМесто = &РабочееМесто
			|						ТОГДА 1
			|					ИНАЧЕ 2
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА РаспределениеПродаж.РабочееМесто = &РабочееМесто
			|					ТОГДА 3
			|				ИНАЧЕ 4
			|			КОНЕЦ
			|	КОНЕЦ КАК ПолеУпорядочивания,
			|	РаспределениеПродаж.НоменклатурнаяГруппа
			|ПОМЕСТИТЬ ТаблицаСкладов
			|ИЗ
			|	РегистрСведений.РаспределениеПродаж КАК РаспределениеПродаж
			|ГДЕ
			|	РаспределениеПродаж.Магазин = &Магазин
			|	И (РаспределениеПродаж.НоменклатурнаяГруппа В
			|				(ВЫБРАТЬ
			|					ТаблицаНабораПодарков.НоменклатурнаяГруппа
			|				ИЗ
			|					ТаблицаНабораПодарков)
			|			ИЛИ РаспределениеПродаж.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка))
			|	И (РаспределениеПродаж.РабочееМесто = &РабочееМесто
			|			ИЛИ РаспределениеПродаж.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
			|	ВложенныйЗапрос.Характеристика КАК Характеристика,
			|	ВложенныйЗапрос.Упаковка КАК Упаковка,
			|	ВложенныйЗапрос.СкидкаНаценка КАК СкидкаНаценка,
			|	ВложенныйЗапрос.ПодарокИзСписка КАК ПодарокИзСписка,
			|	ВложенныйЗапрос.КоличествоУпаковок КАК КоличествоУпаковок,
			|	ВложенныйЗапрос.КоличествоУпаковокНеобходимо КАК КоличествоУпаковокНеобходимо,
			|	ВложенныйЗапрос.Количество КАК Количество,
			|	ВложенныйЗапрос.Цена КАК Цена,
			|	ВложенныйЗапрос.Сумма КАК Сумма,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ТаблицаСкладов.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|			ТОГДА &СкладПродажи
			|		ИНАЧЕ ТаблицаСкладов.Склад
			|	КОНЕЦ КАК Склад
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТаблицаНабораПодарков.Номенклатура КАК Номенклатура,
			|		ТаблицаНабораПодарков.Характеристика КАК Характеристика,
			|		ТаблицаНабораПодарков.Упаковка КАК Упаковка,
			|		ТаблицаНабораПодарков.СкидкаНаценка КАК СкидкаНаценка,
			|		ТаблицаНабораПодарков.ПодарокИзСписка КАК ПодарокИзСписка,
			|		ТаблицаНабораПодарков.КоличествоУпаковок КАК КоличествоУпаковок,
			|		ТаблицаНабораПодарков.КоличествоУпаковокНеобходимо КАК КоличествоУпаковокНеобходимо,
			|		ТаблицаНабораПодарков.Количество КАК Количество,
			|		ЕСТЬNULL(ТаблицаЦенНаборовПодарков.Цена, 0) КАК Цена,
			|		ЕСТЬNULL(ТаблицаЦенНаборовПодарков.Цена, 0) * ВЫБОР
			|			КОГДА ТаблицаНабораПодарков.КоличествоУпаковок = 0
			|				ТОГДА ТаблицаНабораПодарков.Количество
			|			ИНАЧЕ ТаблицаНабораПодарков.КоличествоУпаковок
			|		КОНЕЦ КАК Сумма,
			|		МИНИМУМ(ТаблицаСкладов.ПолеУпорядочивания) КАК ПолеУпорядочивания,
			|		ТаблицаСкладов.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
			|	ИЗ
			|		ТаблицаНабораПодарков КАК ТаблицаНабораПодарков
			|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦенНаборовПодарков КАК ТаблицаЦенНаборовПодарков
			|			ПО ((НЕ ТаблицаНабораПодарков.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)))
			|				И ТаблицаНабораПодарков.Номенклатура = ТаблицаЦенНаборовПодарков.Номенклатура
			|				И ТаблицаНабораПодарков.Характеристика = ТаблицаЦенНаборовПодарков.Характеристика
			|				И ТаблицаНабораПодарков.Упаковка = ТаблицаЦенНаборовПодарков.Упаковка
			|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК ТаблицаСкладов
			|			ПО ТаблицаНабораПодарков.Номенклатура = ТаблицаСкладов.НоменклатурнаяГруппа
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ТаблицаНабораПодарков.Упаковка,
			|		ТаблицаНабораПодарков.Характеристика,
			|		ТаблицаНабораПодарков.Номенклатура,
			|		ТаблицаНабораПодарков.КоличествоУпаковок,
			|		ТаблицаНабораПодарков.КоличествоУпаковокНеобходимо,
			|		ТаблицаНабораПодарков.СкидкаНаценка,
			|		ТаблицаНабораПодарков.ПодарокИзСписка,
			|		ТаблицаСкладов.НоменклатурнаяГруппа,
			|		ТаблицаНабораПодарков.Количество,
			|		ЕСТЬNULL(ТаблицаЦенНаборовПодарков.Цена, 0),
			|		ЕСТЬNULL(ТаблицаЦенНаборовПодарков.Цена, 0) * ВЫБОР
			|			КОГДА ТаблицаНабораПодарков.КоличествоУпаковок = 0
			|				ТОГДА ТаблицаНабораПодарков.Количество
			|			ИНАЧЕ ТаблицаНабораПодарков.КоличествоУпаковок
			|		КОНЕЦ) КАК ВложенныйЗапрос
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК ТаблицаСкладов
			|		ПО ВложенныйЗапрос.НоменклатурнаяГруппа = ТаблицаСкладов.НоменклатурнаяГруппа
			|			И ВложенныйЗапрос.ПолеУпорядочивания = ТаблицаСкладов.ПолеУпорядочивания";
			
			ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
			
			Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 5, 5, "СкидкиНаценкиНаборыПодарков");
		Иначе
			ТекстЗапроса = ТекстЗапроса + 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЦеновыеГруппы.ЦеноваяГруппа КАК ЦеноваяГруппа,
			|	ЦеновыеГруппы.ВидЦен КАК ВидЦен
			|ПОМЕСТИТЬ ЦеновыеГруппыПравила
			|ИЗ
			|	Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ЦеновыеГруппы
			|ГДЕ
			|	ЦеновыеГруппы.Ссылка = &ПравилоЦенообразования
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ВидЦен,
			|	ЦеноваяГруппа
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВидЦеныПравила.ВидЦен КАК ВидЦен
			|ПОМЕСТИТЬ ВидЦеныПравила
			|ИЗ
			|	Справочник.ПравилаЦенообразования КАК ВидЦеныПравила
			|ГДЕ
			|	ВидЦеныПравила.Ссылка = &ПравилоЦенообразования
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПодЗапрос.Номенклатура КАК Номенклатура,
			|	ПодЗапрос.Характеристика КАК Характеристика,
			|	ВЫБОР
			|		КОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам) > 0
			|			ТОГДА МАКСИМУМ(ПодЗапрос.УпаковкаПоЦеновымГруппам)
			|		ИНАЧЕ МАКСИМУМ(ПодЗапрос.УпаковкаПоВидуЦен)
			|	КОНЕЦ КАК Упаковка,
			|	ВЫБОР
			|		КОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам) > 0
			|			ТОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам)
			|		ИНАЧЕ МАКСИМУМ(ПодЗапрос.ЦенаПоВидуЦен)
			|	КОНЕЦ КАК Цена
			|ПОМЕСТИТЬ ТаблицаЦенНаборовПодарков
			|ИЗ
			|	(ВЫБРАТЬ
			|		ЦеныНоменклатурыПоВидуЦен.Номенклатура КАК Номенклатура,
			|		ЦеныНоменклатурыПоВидуЦен.Характеристика КАК Характеристика,
			|		ЦеныНоменклатурыПоВидуЦен.Упаковка КАК УпаковкаПоВидуЦен,
			|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК УпаковкаПоЦеновымГруппам,
			|		ЦеныНоменклатурыПоВидуЦен.Цена КАК ЦенаПоВидуЦен,
			|		0 КАК ЦенаПоЦеновымГруппам
			|	ИЗ
			|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|				&ТекущаяДата,
			|				ВидЦены В
			|						(ВЫБРАТЬ
			|							ВидЦеныПравила.ВидЦен
			|						ИЗ
			|							ВидЦеныПравила КАК ВидЦеныПравила)
			|					И Номенклатура В
			|						(ВЫБРАТЬ
			|							ТаблицаНабораПодарков.Номенклатура
			|						ИЗ
			|							ТаблицаНабораПодарков)
			|					И Характеристика В
			|						(ВЫБРАТЬ
			|							ТаблицаНабораПодарков.Характеристика
			|						ИЗ
			|							ТаблицаНабораПодарков)) КАК ЦеныНоменклатурыПоВидуЦен
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		СправочникНоменклатура.Ссылка,
			|		ЦеныНоменклатурыПоЦеновымГруппам.Характеристика,
			|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка),
			|		ЦеныНоменклатурыПоЦеновымГруппам.Упаковка,
			|		0,
			|		ЕСТЬNULL(ЦеныНоменклатурыПоЦеновымГруппам.Цена, 0)
			|	ИЗ
			|		ЦеновыеГруппыПравила КАК ЦеновыеГруппыПравила
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|			ПО ЦеновыеГруппыПравила.ЦеноваяГруппа = СправочникНоменклатура.ЦеноваяГруппа
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|					&ТекущаяДата,
			|					ВидЦены В
			|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|								ЦеновыеГруппыПравила.ВидЦен
			|							ИЗ
			|								ЦеновыеГруппыПравила КАК ЦеновыеГруппыПравила)
			|						И Номенклатура В
			|							(ВЫБРАТЬ
			|								ТаблицаНабораПодарков.Номенклатура
			|							ИЗ
			|								ТаблицаНабораПодарков)
			|						И Характеристика В
			|							(ВЫБРАТЬ
			|								ТаблицаНабораПодарков.Характеристика
			|							ИЗ
			|								ТаблицаНабораПодарков)) КАК ЦеныНоменклатурыПоЦеновымГруппам
			|			ПО (ЦеныНоменклатурыПоЦеновымГруппам.Номенклатура = СправочникНоменклатура.Ссылка)
			|				И (ЦеныНоменклатурыПоЦеновымГруппам.ВидЦены = ЦеновыеГруппыПравила.ВидЦен)) КАК ПодЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ПодЗапрос.Номенклатура,
			|	ПодЗапрос.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РаспределениеПродаж.Склад,
			|	ВЫБОР
			|		КОГДА (НЕ РаспределениеПродаж.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка))
			|			ТОГДА ВЫБОР
			|					КОГДА РаспределениеПродаж.РабочееМесто = &РабочееМесто
			|						ТОГДА 1
			|					ИНАЧЕ 2
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА РаспределениеПродаж.РабочееМесто = &РабочееМесто
			|					ТОГДА 3
			|				ИНАЧЕ 4
			|			КОНЕЦ
			|	КОНЕЦ КАК ПолеУпорядочивания,
			|	РаспределениеПродаж.НоменклатурнаяГруппа
			|ПОМЕСТИТЬ ТаблицаСкладов
			|ИЗ
			|	РегистрСведений.РаспределениеПродаж КАК РаспределениеПродаж
			|ГДЕ
			|	РаспределениеПродаж.Магазин = &Магазин
			|	И (РаспределениеПродаж.НоменклатурнаяГруппа В
			|				(ВЫБРАТЬ
			|					ТаблицаНабораПодарков.НоменклатурнаяГруппа
			|				ИЗ
			|					ТаблицаНабораПодарков)
			|			ИЛИ РаспределениеПродаж.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка))
			|	И (РаспределениеПродаж.РабочееМесто = &РабочееМесто
			|			ИЛИ РаспределениеПродаж.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
			|	ВложенныйЗапрос.Характеристика КАК Характеристика,
			|	ВложенныйЗапрос.Упаковка КАК Упаковка,
			|	ВложенныйЗапрос.СкидкаНаценка КАК СкидкаНаценка,
			|	ВложенныйЗапрос.ПодарокИзСписка КАК ПодарокИзСписка,
			|	ВложенныйЗапрос.КоличествоУпаковок КАК КоличествоУпаковок,
			|	ВложенныйЗапрос.КоличествоУпаковокНеобходимо КАК КоличествоУпаковокНеобходимо,
			|	ВложенныйЗапрос.Количество КАК Количество,
			|	ВложенныйЗапрос.Цена КАК Цена,
			|	ВложенныйЗапрос.Сумма КАК Сумма,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ТаблицаСкладов.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|			ТОГДА &СкладПродажи
			|		ИНАЧЕ ТаблицаСкладов.Склад
			|	КОНЕЦ КАК Склад
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТаблицаНабораПодарков.Номенклатура КАК Номенклатура,
			|		ТаблицаНабораПодарков.Характеристика КАК Характеристика,
			|		ТаблицаНабораПодарков.Упаковка КАК Упаковка,
			|		ТаблицаНабораПодарков.СкидкаНаценка КАК СкидкаНаценка,
			|		ТаблицаНабораПодарков.ПодарокИзСписка КАК ПодарокИзСписка,
			|		ТаблицаНабораПодарков.КоличествоУпаковок КАК КоличествоУпаковок,
			|		ТаблицаНабораПодарков.КоличествоУпаковокНеобходимо КАК КоличествоУпаковокНеобходимо,
			|		ТаблицаНабораПодарков.Количество КАК Количество,
			|		ЕСТЬNULL(ТаблицаЦенНаборовПодарков.Цена, 0) КАК Цена,
			|		ЕСТЬNULL(ТаблицаЦенНаборовПодарков.Цена, 0) * ВЫБОР
			|			КОГДА ТаблицаНабораПодарков.КоличествоУпаковок = 0
			|				ТОГДА ТаблицаНабораПодарков.Количество
			|			ИНАЧЕ ТаблицаНабораПодарков.КоличествоУпаковок
			|		КОНЕЦ КАК Сумма,
			|		МИНИМУМ(ТаблицаСкладов.ПолеУпорядочивания) КАК ПолеУпорядочивания,
			|		ТаблицаСкладов.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
			|	ИЗ
			|		ТаблицаНабораПодарков КАК ТаблицаНабораПодарков
			|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦенНаборовПодарков КАК ТаблицаЦенНаборовПодарков
			|			ПО ((НЕ ТаблицаНабораПодарков.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)))
			|				И ТаблицаНабораПодарков.Номенклатура = ТаблицаЦенНаборовПодарков.Номенклатура
			|				И ТаблицаНабораПодарков.Характеристика = ТаблицаЦенНаборовПодарков.Характеристика
			|				И ТаблицаНабораПодарков.Упаковка = ТаблицаЦенНаборовПодарков.Упаковка
			|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК ТаблицаСкладов
			|			ПО ТаблицаНабораПодарков.Номенклатура = ТаблицаСкладов.НоменклатурнаяГруппа
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ТаблицаНабораПодарков.Упаковка,
			|		ТаблицаНабораПодарков.Характеристика,
			|		ТаблицаНабораПодарков.Номенклатура,
			|		ТаблицаНабораПодарков.КоличествоУпаковок,
			|		ТаблицаНабораПодарков.КоличествоУпаковокНеобходимо,
			|		ТаблицаНабораПодарков.СкидкаНаценка,
			|		ТаблицаНабораПодарков.ПодарокИзСписка,
			|		ТаблицаСкладов.НоменклатурнаяГруппа,
			|		ТаблицаНабораПодарков.Количество,
			|		ЕСТЬNULL(ТаблицаЦенНаборовПодарков.Цена, 0),
			|		ЕСТЬNULL(ТаблицаЦенНаборовПодарков.Цена, 0) * ВЫБОР
			|			КОГДА ТаблицаНабораПодарков.КоличествоУпаковок = 0
			|				ТОГДА ТаблицаНабораПодарков.Количество
			|			ИНАЧЕ ТаблицаНабораПодарков.КоличествоУпаковок
			|		КОНЕЦ) КАК ВложенныйЗапрос
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК ТаблицаСкладов
			|		ПО ВложенныйЗапрос.НоменклатурнаяГруппа = ТаблицаСкладов.НоменклатурнаяГруппа
			|			И ВложенныйЗапрос.ПолеУпорядочивания = ТаблицаСкладов.ПолеУпорядочивания";
			
			ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
			
			Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 6, 6, "СкидкиНаценкиНаборыПодарков");
		КонецЕсли;
	КонецЕсли;
	
	
	
КонецФункции // ТекстЗапросаТаблицаСкидкиНаценкиНаборыПодарков()

// Функция формирует текст запроса для таблицы значений скидок (наценок) сообщений.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаСкидкиНаценкиСообщений()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиНаценки.Ссылка КАК СкидкаНаценка,
	|	СкидкиНаценки.Ссылка.ТекстСообщения КАК ТекстСообщения,
	|	СкидкиНаценки.Ссылка.НоменклатураСкидочногоКупона КАК НоменклатураСкидочногоКупона,
	|	СкидкиНаценки.СпособПредоставления КАК СпособПредоставления,
	|	СкидкиНаценки.Ссылка.ВариантВыдачиКупона КАК ВариантВыдачиКупона
	|ИЗ
	|	ВременнаяТаблицаСкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	(СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сообщение)
	|			ИЛИ СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ПакетКупоновКратныйСумме))"
	;
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 1, 1, "СкидкиНаценкиСообщения");
	
КонецФункции // ТекстЗапросаТаблицаСкидкиНаценкиСообщений()

Функция ТекстЗапросаТаблицаПакетКупоновШкалаКратностей()	//	LNK 28.08.2020 12:32:40

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиНаценки.Ссылка КАК СкидкаНаценка,
	|	ТаблицаКратностей.Номенклатура КАК СегментНоменклатуры,
	|	МАКСИМУМ(ТаблицаКратностей.Кратность) КАК Кратность
	|ИЗ
	|	ВременнаяТаблицаСкидкиНаценки КАК СкидкиНаценки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.ШкалаКратностей КАК ТаблицаКратностей
	|		ПО СкидкиНаценки.Ссылка = ТаблицаКратностей.Ссылка
	|ГДЕ
	|	СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ПакетКупоновКратныйСумме)
	|
	|СГРУППИРОВАТЬ ПО
	|	СкидкиНаценки.Ссылка,
	|	ТаблицаКратностей.Номенклатура"
	;
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 1, 1, "СкидкиНаценкиШкалаКратностей");

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ЧАСТИ ЗАПРОСА ПО УСЛОВИЯМ ПРЕДОСТАВЛЕНИЯ СКИДОК

// Функция формирует имя параметра по ссылке на условие предоставления.
//
// Возвращаемое значение:
//	Строка - ИмяПараметра
//
Функция ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления)
	
	Возврат СтрЗаменить("П" + СсылкаНаУсловиеПредоставления.УникальныйИдентификатор(), "-", "_");
	
КонецФункции // ПолучитьПараметрЗапросаИзСсылки()

// Функция формирует текст запроса для поиска скидок за разовую продажу по которым выполнено условие применения.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаРазовуюПродажуСУсловиемПоСтроке(ПакетЗапросов, СсылкаНаУсловиеПредоставления)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	Товары.КлючСвязи             КАК КлючСвязи
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТоварыПоСегментам КАК Товары
	|		ПО УсловияПредоставления.Ссылка = &ИмяПараметра
	|	
	|ГДЕ
	|	ВЫБОР
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|			ТОГДА ВЫБОР КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее) ТОГДА Товары.Сумма >= УсловияПредоставления.ЗначениеУсловияОграничения ИНАЧЕ Товары.Сумма <= УсловияПредоставления.ЗначениеУсловияОграничения КОНЕЦ
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество)
	// + HVOYA 12.09.2016 14:37:13, Латышев А.А.
	//|			ТОГДА ВЫБОР КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее) ТОГДА Товары.Количество >= УсловияПредоставления.ЗначениеУсловияОграничения ИНАЧЕ Товары.Количество <= УсловияПредоставления.ЗначениеУсловияОграничения КОНЕЦ
	|			ТОГДА 
	|				ВЫБОР 
	|					КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее) ТОГДА 
	|						Товары.Количество >= УсловияПредоставления.ЗначениеУсловияОграничения 
	|					КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.Кратно) ТОГДА 
	|						Товары.Количество >= УсловияПредоставления.ЗначениеУсловияОграничения 
	|					ИНАЧЕ Товары.Количество <= УсловияПредоставления.ЗначениеУсловияОграничения 
	|			КОНЕЦ
	// - HVOYA 12.09.2016 14:37:13, Латышев А.А. 
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|	И ВЫБОР
	|		КОГДА УсловияПредоставления.СегментНоменклатурыОграничения = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ Товары.СегментНоменклатуры = УсловияПредоставления.СегментНоменклатурыОграничения
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	КлючСвязи";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		1,
		1,
		"СкидкаЗаРазовуюПродажуСУсловиемПоСтроке" + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаСкидкаЗаРазовуюПродажуСУсловиемПоСтроке

// Функция формирует текст запроса для таблицы рассчитанных скидок за разовую продажу.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаРазовуюПродажуСУсловиемПоДокументу(ПакетЗапросов, СсылкаНаУсловиеПредоставления)

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.СегментНоменклатуры КАК СегментНоменклатуры,
	|	СУММА(Товары.Количество)   КАК Количество,
	|	СУММА(Товары.Сумма)        КАК Сумма
	|ПОМЕСТИТЬ ИтогиПоСегментам
	|ИЗ
	|	ВременнаяТаблицаТоварыПоСегментам КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.СегментНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	-1                           КАК КлючСвязи
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИтогиПоСегментам КАК ИтогиПоСегментам
	|		ПО УсловияПредоставления.Ссылка = &ИмяПараметра
	|		И ИтогиПоСегментам.СегментНоменклатуры = УсловияПредоставления.СегментНоменклатурыОграничения
	|	
	|ГДЕ
	|	ВЫБОР
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|			ТОГДА ВЫБОР КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее)ТОГДА ИтогиПоСегментам.Сумма >= УсловияПредоставления.ЗначениеУсловияОграничения ИНАЧЕ ИтогиПоСегментам.Сумма <= УсловияПредоставления.ЗначениеУсловияОграничения КОНЕЦ
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество)
	// + HVOYA 12.09.2016 14:37:13, Латышев А.А.
	//|			ТОГДА ВЫБОР КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее)ТОГДА ИтогиПоСегментам.Количество >= УсловияПредоставления.ЗначениеУсловияОграничения ИНАЧЕ ИтогиПоСегментам.Количество <= УсловияПредоставления.ЗначениеУсловияОграничения КОНЕЦ
	|			ТОГДА 
	|				ВЫБОР 
	|					КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее) ТОГДА 
	|						ИтогиПоСегментам.Количество >= УсловияПредоставления.ЗначениеУсловияОграничения 
	|					КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.Кратно) ТОГДА 
	|						ИтогиПоСегментам.Количество >= УсловияПредоставления.ЗначениеУсловияОграничения 
	|					ИНАЧЕ ИтогиПоСегментам.Количество <= УсловияПредоставления.ЗначениеУсловияОграничения 
	|			КОНЕЦ
	// - HVOYA 12.09.2016 14:37:13, Латышев А.А. 
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
 	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИтогиПоСегментам";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		3,
		2,
		"СкидкаЗаРазовуюПродажуСУсловиемПоДокументу" + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаСкидкаЗаРазовуюПродажуСУсловиемПоДокументу

// Функция формирует текст запроса для таблицы рассчитанных скидок за первую продажу партнеру.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаПервуюПродажуПартнеру(ПакетЗапросов, СсылкаНаУсловиеПредоставления)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗРЕШЕННЫЕ
	|	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот   КАК КоличествоОборот
	|	
	|ПОМЕСТИТЬ ВремТаблица
	|	
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	|			,
	|			&ТекущаяДата,
	|			Авто,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	|				ИЗ
	|					РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|				ГДЕ
	|					АналитикаУчетаПоПартнерам.Партнер = &Партнер)) КАК ВыручкаИСебестоимостьПродажОбороты
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	-ВыручкаИСебестоимостьПродаж.Количество   КАК КоличествоОборот
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
	|ГДЕ
	|	ВыручкаИСебестоимостьПродаж.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Таблица.КоличествоОборот)   КАК КоличествоОборот
	|	
	|ПОМЕСТИТЬ Продажи
	|	
	|ИЗ
	|	ВремТаблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	-1                           КАК КлючСвязи
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Продажи КАК Продажи
	|		ПО Истина
	|	
	|ГДЕ
	|	УсловияПредоставления.Ссылка = &ИмяПараметра
	|	И ЕСТЬNULL(Продажи.КоличествоОборот, 0) <= 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Продажи
	|";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		5,
		4,
		"СкидкаЗаПервуюПродажуПартнеру" + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаПозиционнаяСкидкаЗаПробнуюПродажу

// Функция формирует текст запроса для таблицы рассчитанных скидок за первую продажу некоторой номенклатуры.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаПробнуюПродажу(ПакетЗапросов, СсылкаНаУсловиеПредоставления)

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗРЕШЕННЫЕ
	|	РегистрАналитикаУчетаНоменклатуры.Номенклатура           КАК Номенклатура,
	|	РегистрАналитикаУчетаНоменклатуры.Характеристика         КАК Характеристика,
	|	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот КАК КоличествоОборот
	|	
	|ПОМЕСТИТЬ ВремТаблица
	|	
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	|			,
	|			&ТекущаяДата,
	|			Авто,
	|			АналитикаУчетаНоменклатуры В
	|					(ВЫБРАТЬ
	|						АналитикаУчетаНоменклатуры.КлючАналитики
	|					ИЗ
	|						РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|					ГДЕ
	|						(АналитикаУчетаНоменклатуры.Номенклатура, АналитикаУчетаНоменклатуры.Характеристика) В
	|							(ВЫБРАТЬ
	|								ВременнаяТаблицаТоварыПоСегментам.Номенклатура КАК Номенклатура,
	|								ВременнаяТаблицаТоварыПоСегментам.Характеристика КАК Характеристика
	|							ИЗ
	|								ВременнаяТаблицаТоварыПоСегментам))
	|				И АналитикаУчетаПоПартнерам В
	|					(ВЫБРАТЬ
	|						АналитикаУчетаПоПартнерам.КлючАналитики
	|					ИЗ
	|						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|					ГДЕ
	|						АналитикаУчетаПоПартнерам.Партнер = &Партнер)) КАК ВыручкаИСебестоимостьПродажОбороты
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрАналитикаУчетаНоменклатуры
	|		ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры = РегистрАналитикаУчетаНоменклатуры.КлючАналитики
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	РегистрАналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
	|	РегистрАналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	-ВыручкаИСебестоимостьПродаж.Количество     КАК КоличествоОборот
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрАналитикаУчетаНоменклатуры
	|		ПО ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры = РегистрАналитикаУчетаНоменклатуры.КлючАналитики
	|	
	|ГДЕ
	|	ВыручкаИСебестоимостьПродаж.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Номенклатура              КАК Номенклатура,
	|	Таблица.Характеристика            КАК Характеристика,
	|	СУММА(Таблица.КоличествоОборот)   КАК КоличествоОборот
	|	
	|ПОМЕСТИТЬ Продажи
	|	
	|ИЗ
	|	ВремТаблица КАК Таблица
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	Товары.КлючСвязи             КАК КлючСвязи
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТоварыПоСегментам КАК Товары
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ Продажи КАК Продажи
	|			ПО Товары.Номенклатура = Продажи.Номенклатура
	|				И Товары.Характеристика = Продажи.Характеристика
	|		ПО Истина
	|ГДЕ
	|	УсловияПредоставления.Ссылка = &ИмяПараметра
	|	И ВЫБОР
	|		КОГДА УсловияПредоставления.СегментНоменклатурыОграничения = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ Товары.СегментНоменклатуры = УсловияПредоставления.СегментНоменклатурыОграничения
	|	КОНЕЦ
	|	И ЕСТЬNULL(Продажи.КоличествоОборот, 0) <= 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Продажи
	|";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		5,
		4,
		"СкидкаЗаПробнуюПродажу" + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаПозиционнаяСкидкаЗаПробнуюПродажу

// Функция формирует текст запроса для таблицы рассчитанных скидок за соблюдение графика оплаты.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаГрафикОплаты(ПакетЗапросов, СсылкаНаУсловиеПредоставления)

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	-1                           КАК КлючСвязи
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|ГДЕ
	|	УсловияПредоставления.Ссылка = &ИмяПараметра
	|	И УсловияПредоставления.ГрафикОплаты = &ГрафикОплаты";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		1,
		1,
		"СкидкаЗаГрафикОплаты" + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаПозиционнаяСкидкаЗаГрафикОплаты

// Функция формирует текст запроса для таблицы рассчитанных скидок за соблюдение графика оплаты.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаФормуОплаты(ПакетЗапросов, СсылкаНаУсловиеПредоставления)

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	-1                           КАК КлючСвязи
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|ГДЕ
	|	УсловияПредоставления.Ссылка = &ИмяПараметра
	|	И УсловияПредоставления.ФормаОплаты = &ФормаОплаты";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		1,
		1,
		"СкидкаЗаФормуОплаты" + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаПозиционнаяСкидкаЗаГрафикОплаты

// Функция формирует текст запроса для таблицы рассчитанных скидок с ограничением по группе пользователей.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаОграничениеПоГруппеПользователей(ПакетЗапросов, СсылкаНаУсловиеПредоставления)

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	-1                           КАК КлючСвязи
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|		ПО УсловияПредоставления.ГруппаПользователей = ГруппыПользователейСостав.Ссылка
	|	
	|ГДЕ
	|	УсловияПредоставления.Ссылка = &ИмяПараметра
	|	И ГруппыПользователейСостав.Пользователь = &Пользователь";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		1,
		1,
		"СкидкаОграничениеПоГруппеПользователей" + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаСкидкаОграничениеПоГруппеПользователей

// Функция формирует текст запроса для таблицы рассчитанных скидок за время продажи.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаВремяПродажи(ПакетЗапросов, СсылкаНаУсловиеПредоставления)

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	-1                           КАК КлючСвязи
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок.ВремяДействия КАК ВремяДействия
	|			ПО ВремяДействия.Ссылка = УсловияПредоставления.Ссылка
	|ГДЕ
	|	УсловияПредоставления.Ссылка = &ИмяПараметра
	|	И ВремяДействия.ДеньНедели = &ДеньНедели
	|	И (ВремяДействия.ВремяНачала <= &ТекущееВремя И ВремяДействия.ВремяОкончания >= &ТекущееВремя)";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		1,
		1,
		"СкидкаЗаВремяПродажи" + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаСкидкаЗаВремяПродажи

// Функция формирует текст запроса для таблицы рассчитанных скидок за накопленный объем продаж по партнеру.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаНакопленныйОбъемПродажПоПартнеруЗаПериод_УДАЛИТЬ(ПакетЗапросов, СсылкаНаУсловиеПредоставления, ДатаНачала, ДатаОкончания)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегистрАналитикаУчетаНоменклатуры.Номенклатура             КАК Номенклатура,
	|	РегистрАналитикаУчетаНоменклатуры.Характеристика           КАК Характеристика,
	|	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот   КАК Количество,
	|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот КАК Сумма
	|	
	|ПОМЕСТИТЬ ВремТаблица
	|	
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Авто,
	|			АналитикаУчетаНоменклатуры В
	|					(ВЫБРАТЬ
	|						АналитикаУчетаНоменклатуры.КлючАналитики
	|					ИЗ
	|						РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|					ГДЕ
	|						(АналитикаУчетаНоменклатуры.Номенклатура, АналитикаУчетаНоменклатуры.Характеристика) В
	|							(ВЫБРАТЬ
	|								ВременнаяТаблицаТоварыПоСегментам.Номенклатура КАК Номенклатура,
	|								ВременнаяТаблицаТоварыПоСегментам.Характеристика КАК Характеристика
	|							ИЗ
	|								ВременнаяТаблицаТоварыПоСегментам))
	|				И АналитикаУчетаПоПартнерам В
	|					(ВЫБРАТЬ
	|						АналитикаУчетаПоПартнерам.КлючАналитики
	|					ИЗ
	|						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|					ГДЕ
	|						АналитикаУчетаПоПартнерам.Партнер = &Партнер)) КАК ВыручкаИСебестоимостьПродажОбороты
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрАналитикаУчетаНоменклатуры
	|		ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры = РегистрАналитикаУчетаНоменклатуры.КлючАналитики
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	РегистрАналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
	|	РегистрАналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	-ВыручкаИСебестоимостьПродаж.Количество     КАК Количество,
	|	-ВыручкаИСебестоимостьПродаж.СуммаВыручки   КАК Сумма
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрАналитикаУчетаНоменклатуры
	|		ПО ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры = РегистрАналитикаУчетаНоменклатуры.КлючАналитики
	|	
	|ГДЕ
	|	ВыручкаИСебестоимостьПродаж.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Номенклатура              КАК Номенклатура,
	|	Таблица.Характеристика            КАК Характеристика,
	|	СУММА(Таблица.Количество)         КАК Количество,
	|	СУММА(Таблица.Сумма)              КАК Сумма
	|	
	|ПОМЕСТИТЬ ПродажиЗаНакопленныйОбъемПродажПоПартнеруЗаПериод
	|	
	|ИЗ
	|	ВремТаблица КАК Таблица
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыПоСегментам.КлючСвязи           КАК КлючСвязи,
	|	ТоварыПоСегментам.Номенклатура        КАК Номенклатура,
	|	ТоварыПоСегментам.Характеристика      КАК Характеристика,
	|	ТоварыПоСегментам.СегментНоменклатуры КАК СегментНоменклатуры,
	|	ЕСТЬNULL(Продажи.Количество, 0)       КАК Количество,
	|	ЕСТЬNULL(Продажи.Сумма, 0)            КАК Сумма
	|	
	|ПОМЕСТИТЬ ПродажиТоваровЗаНакопленныйОбъемПродажПоПартнеруЗаПериод
	|	
	|ИЗ
	|	ПродажиЗаНакопленныйОбъемПродажПоПартнеруЗаПериод КАК Продажи
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТоварыПоСегментам КАК ТоварыПоСегментам
	|		ПО (ТоварыПоСегментам.Номенклатура = Продажи.Номенклатура)
	|			И (ТоварыПоСегментам.Характеристика = Продажи.Характеристика)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	Товары.КлючСвязи             КАК КлючСвязи
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПродажиТоваровЗаНакопленныйОбъемПродажПоПартнеруЗаПериод КАК Товары
	|		ПО УсловияПредоставления.Ссылка = &ИмяПараметра
	|	
	|ГДЕ
	|	ВЫБОР
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|			ТОГДА ВЫБОР
	|					КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее)
	|						ТОГДА ЕСТЬNULL(Товары.Сумма, 0) >= УсловияПредоставления.ЗначениеУсловияОграничения
	|					ИНАЧЕ ЕСТЬNULL(Товары.Сумма, 0) <= УсловияПредоставления.ЗначениеУсловияОграничения
	|				КОНЕЦ
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество)
	|			ТОГДА ВЫБОР
	|					КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее)
	|						ТОГДА ЕСТЬNULL(Товары.Количество, 0) >= УсловияПредоставления.ЗначениеУсловияОграничения
	|					ИНАЧЕ ЕСТЬNULL(Товары.Количество, 0) <= УсловияПредоставления.ЗначениеУсловияОграничения
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|	И ВЫБОР
	|		КОГДА УсловияПредоставления.СегментНоменклатурыОграничения = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ Товары.СегментНоменклатуры = УсловияПредоставления.СегментНоменклатурыОграничения
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПродажиЗаНакопленныйОбъемПродажПоПартнеруЗаПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПродажиТоваровЗаНакопленныйОбъемПродажПоПартнеруЗаПериод
	|";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если ДатаНачала <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНачала",    "ДатаВремя("+Формат(Год(ДатаНачала   ),"ЧН=0; ЧГ=0")+","+Месяц(ДатаНачала   )+","+День(ДатаНачала   )+","+Час(ДатаНачала)+","+Минута(ДатаНачала)+","+Секунда(ДатаНачала)+")");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНачала", "");
	КонецЕсли;
	
	Если ДатаОкончания <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаОкончания", "ДатаВремя("+Формат(Год(ДатаОкончания),"ЧН=0; ЧГ=0")+","+Месяц(ДатаОкончания)+","+День(ДатаОкончания)+","+Час(ДатаОкончания)+","+Минута(ДатаОкончания)+","+Секунда(ДатаОкончания)+")");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаОкончания", "");
	КонецЕсли;
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		7,
		5,
		"СкидкаЗаНакопленныйОбъемПродажПоПартнеруЗаПериодСУсловиемПоСтрокеЗа_"+Формат(ДатаНачала,"ДФ=ddMMyyyy")+"_"+Формат(ДатаОкончания,"ДФ=ddMMyyyy") + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаПозиционнаяСкидкаЗаНакопленныйОбъемПродаж

// Функция формирует текст запроса для таблицы рассчитанных скидок за накопленный объем продаж по партнеру.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаНакопленныйОбъемПродажПоПартнеруЗаПериод(ПакетЗапросов, СсылкаНаУсловиеПредоставления, ДатаНачала, ДатаОкончания)

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПродажиПоКартам.Сумма КАК Сумма,
	|	ПродажиПоКартам.Количество КАК Количество
	|ПОМЕСТИТЬ ВремТаблица
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ДанныеРегистра.Сумма) КАК Сумма,
	|		СУММА(ДанныеРегистра.Количество) КАК Количество
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПродажиПоКартам.СуммаОстаток КАК Сумма,
	|			ПродажиПоКартам.КоличествоОстаток КАК Количество
	|		ИЗ
	|			РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(
	|					&ДатаОкончания,
	|					&УсловиеНаСегмент
	|						И ВладелецДисконтнойКарты В
	|							(ВЫБРАТЬ
	|								Таблица.ВладелецКарты
	|							ИЗ
	|								Справочник.ИнформационныеКарты КАК Таблица
	|							ГДЕ
	|								Таблица.Ссылка В (&ДисконтныеКарты))) КАК ПродажиПоКартам
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			0,
	|			0
	|		ГДЕ
	|			&ДисконтнаяКартаПредъявлена) КАК ДанныеРегистра) КАК ПродажиПоКартам
	|ГДЕ
	|	(НЕ ПродажиПоКартам.Сумма ЕСТЬ NULL
	|			ИЛИ НЕ ПродажиПоКартам.Количество ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПоСегментам.КлючСвязи КАК КлючСвязи,
	|	ТоварыПоСегментам.Номенклатура КАК Номенклатура,
	|	ТоварыПоСегментам.Характеристика КАК Характеристика,
	|	ТоварыПоСегментам.СегментНоменклатуры КАК СегментНоменклатуры
	|ПОМЕСТИТЬ ВременнаяТаблицаТоварыПоСегментамВДанномЗапросе
	|ИЗ
	|	ВременнаяТаблицаТоварыПоСегментам КАК ТоварыПоСегментам
	|ГДЕ
	|	ТоварыПоСегментам.СегментНоменклатуры = &ИмяПараметра_СегментНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПоСегментам.КлючСвязи КАК КлючСвязи,
	|	ТоварыПоСегментам.Номенклатура КАК Номенклатура,
	|	ТоварыПоСегментам.Характеристика КАК Характеристика,
	|	ТоварыПоСегментам.СегментНоменклатуры КАК СегментНоменклатуры,
	|	ЕСТЬNULL(Продажи.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(Продажи.Сумма, 0) КАК Сумма
	|ПОМЕСТИТЬ ПродажиТоваровЗаНакопленныйОбъемПродажПоПартнеруЗаПериод
	|ИЗ
	|	ВремТаблица КАК Продажи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТоварыПоСегментамВДанномЗапросе КАК ТоварыПоСегментам
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	Товары.КлючСвязи КАК КлючСвязи
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПродажиТоваровЗаНакопленныйОбъемПродажПоПартнеруЗаПериод КАК Товары
	|		ПО (УсловияПредоставления.Ссылка = &ИмяПараметра)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|				ТОГДА ВЫБОР
	|						КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее)
	|							ТОГДА ЕСТЬNULL(Товары.Сумма, 0) >= УсловияПредоставления.ЗначениеУсловияОграничения
	|						ИНАЧЕ ЕСТЬNULL(Товары.Сумма, 0) <= УсловияПредоставления.ЗначениеУсловияОграничения
	|					КОНЕЦ
	|			КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество)
	|				ТОГДА ВЫБОР
	|						КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее)
	|							ТОГДА ЕСТЬNULL(Товары.Количество, 0) >= УсловияПредоставления.ЗначениеУсловияОграничения
	|						ИНАЧЕ ЕСТЬNULL(Товары.Количество, 0) <= УсловияПредоставления.ЗначениеУсловияОграничения
	|					КОНЕЦ
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА УсловияПредоставления.СегментНоменклатурыОграничения = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Товары.СегментНоменклатуры = УсловияПредоставления.СегментНоменклатурыОграничения
	|		КОНЕЦ
	|	И &ДисконтнаяКартаПредъявлена
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременнаяТаблицаТоварыПоСегментамВДанномЗапросе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПродажиТоваровЗаНакопленныйОбъемПродажПоПартнеруЗаПериод"
	;
	СегментНоменклатурыОграничения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаУсловиеПредоставления, "СегментНоменклатурыОграничения");

	Если ЗначениеЗаполнено(СегментНоменклатурыОграничения) Тогда

		ТекстУсловияПоСегменту = "(Номенклатура,Характеристика) В
		|(ВЫБРАТЬ
		|	НоменклатураСегмента.Номенклатура,
		|	НоменклатураСегмента.Характеристика
		|ИЗ
		|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|ГДЕ
		|	НоменклатураСегмента.Сегмент = &ИмяПараметра_СегментНоменклатуры)"
		;

	Иначе

		ТекстУсловияПоСегменту = "ИСТИНА";

	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеНаСегмент", ТекстУсловияПоСегменту);

	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра+"_СегментНоменклатуры", СегментНоменклатурыОграничения);

	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если ДатаНачала <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНачала",    "ДатаВремя("+Формат(Год(ДатаНачала   ),"ЧН=0; ЧГ=0")+","+Месяц(ДатаНачала   )+","+День(ДатаНачала   )+","+Час(ДатаНачала)+","+Минута(ДатаНачала)+","+Секунда(ДатаНачала)+")");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНачала", "");
	КонецЕсли;
	
	Если ДатаОкончания <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаОкончания", "ДатаВремя("+Формат(Год(ДатаОкончания),"ЧН=0; ЧГ=0")+","+Месяц(ДатаОкончания)+","+День(ДатаОкончания)+","+Час(ДатаОкончания)+","+Минута(ДатаОкончания)+","+Секунда(ДатаОкончания)+")");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаОкончания", "");
	КонецЕсли;
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		7,
		4,
		"СкидкаЗаНакопленныйОбъемПродажПоПартнеруЗаПериодСУсловиемПоСтрокеЗа_" + Формат(ДатаНачала,"ДФ=ddMMyyyy") + "_" + Формат(ДатаОкончания,"ДФ=ddMMyyyy") + ИмяПараметра
	);

КонецФункции

// Функция формирует текст запроса для таблицы рассчитанных скидок за накопленный объем продаж по партнеру.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаНакопленныйОбъемПродажПоДисконтнойКартеЗаПериод(ПакетЗапросов, СсылкаНаУсловиеПредоставления, ДатаНачала, ДатаОкончания)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПродажиПоКартам.Сумма КАК Сумма,
	|	ПродажиПоКартам.Количество КАК Количество
	|ПОМЕСТИТЬ ВремТаблица
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ДанныеРегистра.Сумма) КАК Сумма,
	|		СУММА(ДанныеРегистра.Количество) КАК Количество
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПродажиПоКартам.СуммаОстаток КАК Сумма,
	|			ПродажиПоКартам.КоличествоОстаток КАК Количество
	|		ИЗ
	|			РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(
	|					&ДатаОкончания,
	|					&УсловиеНаСегмент
	|						И ДисконтнаяКарта В (&ДисконтныеКарты)) КАК ПродажиПоКартам
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			0,
	|			0
	|		ГДЕ
	|			&ДисконтнаяКартаПредъявлена) КАК ДанныеРегистра) КАК ПродажиПоКартам
	|ГДЕ
	|	(НЕ ПродажиПоКартам.Сумма ЕСТЬ NULL
	|			ИЛИ НЕ ПродажиПоКартам.Количество ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПоСегментам.КлючСвязи КАК КлючСвязи,
	|	ТоварыПоСегментам.Номенклатура КАК Номенклатура,
	|	ТоварыПоСегментам.Характеристика КАК Характеристика,
	|	ТоварыПоСегментам.СегментНоменклатуры КАК СегментНоменклатуры
	|ПОМЕСТИТЬ ВременнаяТаблицаТоварыПоСегментамВДанномЗапросе
	|ИЗ
	|	ВременнаяТаблицаТоварыПоСегментам КАК ТоварыПоСегментам
	|ГДЕ
	|	ТоварыПоСегментам.СегментНоменклатуры = &ИмяПараметра_СегментНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПоСегментам.КлючСвязи КАК КлючСвязи,
	|	ТоварыПоСегментам.Номенклатура КАК Номенклатура,
	|	ТоварыПоСегментам.Характеристика КАК Характеристика,
	|	ТоварыПоСегментам.СегментНоменклатуры КАК СегментНоменклатуры,
	|	ЕСТЬNULL(Продажи.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(Продажи.Сумма, 0) КАК Сумма
	|ПОМЕСТИТЬ ПродажиТоваровЗаНакопленныйОбъемПродажПоКартеЗаПериод
	|ИЗ
	|	ВремТаблица КАК Продажи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТоварыПоСегментамВДанномЗапросе КАК ТоварыПоСегментам
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	Товары.КлючСвязи КАК КлючСвязи
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПродажиТоваровЗаНакопленныйОбъемПродажПоКартеЗаПериод КАК Товары
	|		ПО (УсловияПредоставления.Ссылка = &ИмяПараметра)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|				ТОГДА ВЫБОР
	|						КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее)
	|							ТОГДА ЕСТЬNULL(Товары.Сумма, 0) >= УсловияПредоставления.ЗначениеУсловияОграничения
	|						ИНАЧЕ ЕСТЬNULL(Товары.Сумма, 0) <= УсловияПредоставления.ЗначениеУсловияОграничения
	|					КОНЕЦ
	|			КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество)
	|				ТОГДА ВЫБОР
	|						КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее)
	|							ТОГДА ЕСТЬNULL(Товары.Количество, 0) >= УсловияПредоставления.ЗначениеУсловияОграничения
	|						ИНАЧЕ ЕСТЬNULL(Товары.Количество, 0) <= УсловияПредоставления.ЗначениеУсловияОграничения
	|					КОНЕЦ
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА УсловияПредоставления.СегментНоменклатурыОграничения = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Товары.СегментНоменклатуры = УсловияПредоставления.СегментНоменклатурыОграничения
	|		КОНЕЦ
	|	И &ДисконтнаяКартаПредъявлена
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременнаяТаблицаТоварыПоСегментамВДанномЗапросе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПродажиТоваровЗаНакопленныйОбъемПродажПоКартеЗаПериод"
	;
	СегментНоменклатурыОграничения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаУсловиеПредоставления, "СегментНоменклатурыОграничения");

	Если ЗначениеЗаполнено(СегментНоменклатурыОграничения) Тогда

		ТекстУсловияПоСегменту = "(Номенклатура,Характеристика) В
		|(ВЫБРАТЬ
		|	НоменклатураСегмента.Номенклатура,
		|	НоменклатураСегмента.Характеристика
		|ИЗ
		|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|ГДЕ
		|	НоменклатураСегмента.Сегмент = &ИмяПараметра_СегментНоменклатуры)"
		;

	Иначе

		ТекстУсловияПоСегменту = "ИСТИНА";

	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеНаСегмент", ТекстУсловияПоСегменту);

	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра+"_СегментНоменклатуры", СегментНоменклатурыОграничения);

	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если ДатаНачала <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНачала",    "ДатаВремя("+Формат(Год(ДатаНачала   ),"ЧН=0; ЧГ=0")+","+Месяц(ДатаНачала   )+","+День(ДатаНачала   )+","+Час(ДатаНачала)+","+Минута(ДатаНачала)+","+Секунда(ДатаНачала)+")");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНачала", "");
	КонецЕсли;
	
	Если ДатаОкончания <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаОкончания", "ДатаВремя("+Формат(Год(ДатаОкончания),"ЧН=0; ЧГ=0")+","+Месяц(ДатаОкончания)+","+День(ДатаОкончания)+","+Час(ДатаОкончания)+","+Минута(ДатаОкончания)+","+Секунда(ДатаОкончания)+")");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаОкончания", "");
	КонецЕсли;
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		7,
		4,
		"СкидкаЗаНакопленныйОбъемПродажПоПартнеруЗаПериодСУсловиемПоСтрокеЗа_" + Формат(ДатаНачала,"ДФ=ddMMyyyy")+"_"+Формат(ДатаОкончания,"ДФ=ddMMyyyy") + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаСкидкаЗаНакопленныйОбъемПродажПоДисконтнойКартеЗаПериод

// Функция формирует текст запроса для таблицы рассчитанных скидок за соблюдение графика оплаты.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаВДеньРождения(ПакетЗапросов, СсылкаНаУсловиеПредоставления)

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	-1 КАК КлючСвязи
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|ГДЕ
	|	УсловияПредоставления.Ссылка = &ИмяПараметра
	|	И &ДеньРождения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, -УсловияПредоставления.ДнейДоДняРождения), ДЕНЬ) <= &ДеньРождения
	|	И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, УсловияПредоставления.ДнейПослеДняРождения), ДЕНЬ) >= &ДеньРождения";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		1,
		1,
		"СкидкаВДеньРождения" + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаСкидкаВДеньРождения

// Функция формирует текст запроса для таблицы рассчитанных скидок за соблюдение графика оплаты.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаКратностьНомераЧека(ПакетЗапросов, СсылкаНаУсловиеПредоставления)

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	-1 КАК КлючСвязи
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|ГДЕ
	|	УсловияПредоставления.Ссылка = &ИмяПараметра
	|	И НЕ &ПорядковыйНомерПродажи = 0
	|	И &ПорядковыйНомерПродажи / УсловияПредоставления.ПорядковыйНомерПродажиКратен = (ВЫРАЗИТЬ(&ПорядковыйНомерПродажи / УсловияПредоставления.ПорядковыйНомерПродажиКратен КАК ЧИСЛО(10, 0)))";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		1,
		1,
		"СкидкаВДеньРождения" + ИмяПараметра
	);
	
КонецФункции


// Функция формирует текст запроса для таблицы рассчитанных скидок за время продажи.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаПоТипуПолучателя(ПакетЗапросов, ВыборкаУсловияПредоставления)

	Если ВыборкаУсловияПредоставления.УникальныйКупон Тогда

		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УсловияПредоставления.Ссылка КАК Ссылка,
		|	Получатели.Получатель КАК Получатель,
		|	СерийныеНомераДляАкций.СерийныйНомер КАК СерийныйНомер,
		|	-1 КАК КлючСвязи
		|ПОМЕСТИТЬ ВТ_СкидкаПоТипу
		|ИЗ
		|	УсловияПредоставления КАК УсловияПредоставления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок.Получатели КАК Получатели
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СерийныеНомераДляАкций КАК СерийныеНомераДляАкций
		|			ПО Получатели.Получатель = СерийныеНомераДляАкций.СерийныйНомер.Владелец
		|				И (СерийныеНомераДляАкций.Использован = ЛОЖЬ)
		|		ПО (Получатели.Ссылка = УсловияПредоставления.Ссылка)
		|ГДЕ
		|	УсловияПредоставления.Ссылка = &ИмяПараметра
		|	И (Получатели.Получатель В (&ПолучателиСкидок)
		|			ИЛИ Получатели.Получатель В (&СкидочныйКупон))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаУсловий.Ссылка КАК Ссылка,
		|	ТаблицаУсловий.КлючСвязи КАК КлючСвязи
		|ИЗ
		|	ВТ_СкидкаПоТипу КАК ТаблицаУсловий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаУсловий.Ссылка КАК УсловиеПредоставления,
		|	ТаблицаУсловий.Получатель КАК Получатель,
		|	ТаблицаУсловий.СерийныйНомер КАК СерийныйНомер,
		|	ИСТИНА КАК УникальныйКупон
		|ИЗ
		|	ВТ_СкидкаПоТипу КАК ТаблицаУсловий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СкидкаПоТипу"
		 ;
	Иначе	

	//	купоны НЕ уникальные.
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УсловияПредоставления.Ссылка КАК Ссылка,
		|	Получатели.Получатель КАК Получатель,
		|	НЕОПРЕДЕЛЕНО КАК СерийныйНомер,
		|	-1 КАК КлючСвязи
		|ПОМЕСТИТЬ ВТ_СкидкаПоТипу
		|ИЗ
		|	УсловияПредоставления КАК УсловияПредоставления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок.Получатели КАК Получатели
		|		ПО (Получатели.Ссылка = УсловияПредоставления.Ссылка)
		|ГДЕ
		|	УсловияПредоставления.Ссылка = &ИмяПараметра
		|	И (Получатели.Получатель В (&ПолучателиСкидок)
		|			ИЛИ Получатели.Получатель В (&СкидочныйКупон))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаУсловий.Ссылка КАК Ссылка,
		|	ТаблицаУсловий.КлючСвязи КАК КлючСвязи
		|ИЗ
		|	ВТ_СкидкаПоТипу КАК ТаблицаУсловий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаУсловий.Ссылка КАК УсловиеПредоставления,
		|	ТаблицаУсловий.Получатель КАК Получатель,
		|	ТаблицаУсловий.СерийныйНомер КАК СерийныйНомер,
		|	ЛОЖЬ КАК УникальныйКупон
		|ИЗ
		|	ВТ_СкидкаПоТипу КАК ТаблицаУсловий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СкидкаПоТипу"
		;
	КонецЕсли;

	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(ВыборкаУсловияПредоставления.Ссылка);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, ВыборкаУсловияПредоставления.Ссылка);

	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		4,
		2,
		"СкидкаПоТипуПолучателя" + ИмяПараметра
	);
	
КонецФункции

// Функция формирует текст запроса для таблицы рассчитанных скидок за разовую продажу.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаКомплектПокупки(ПакетЗапросов, СсылкаНаУсловиеПредоставления)

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыКоличество
	|ИЗ
	|	ВременнаяТаблицаТовары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияПредоставленияСкидокНаценокКомплектПокупки.Номенклатура,
	|	УсловияПредоставленияСкидокНаценокКомплектПокупки.Характеристика,
	|	СУММА(УсловияПредоставленияСкидокНаценокКомплектПокупки.Количество) КАК Количество
	|ПОМЕСТИТЬ КомплектПокупки
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.КомплектПокупки КАК УсловияПредоставленияСкидокНаценокКомплектПокупки
	|ГДЕ
	|	УсловияПредоставленияСкидокНаценокКомплектПокупки.Ссылка = &ИмяПараметра
	|
	|СГРУППИРОВАТЬ ПО
	|	УсловияПредоставленияСкидокНаценокКомплектПокупки.Номенклатура,
	|	УсловияПредоставленияСкидокНаценокКомплектПокупки.Характеристика
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомплектПокупки.Номенклатура,
	|	КомплектПокупки.Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыКоличество.Количество, 0) = 0
	|				ИЛИ ЕСТЬNULL(КомплектПокупки.Количество, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА (ВЫРАЗИТЬ(ТоварыКоличество.Количество / КомплектПокупки.Количество КАК ЧИСЛО(15, 0))) = (ВЫРАЗИТЬ(ТоварыКоличество.Количество / КомплектПокупки.Количество КАК ЧИСЛО(15, 3)))
	|					ТОГДА ВЫРАЗИТЬ(ТоварыКоличество.Количество / КомплектПокупки.Количество КАК ЧИСЛО(15, 0))
	|				ИНАЧЕ ВЫБОР
	|						КОГДА (ВЫРАЗИТЬ(ТоварыКоличество.Количество / КомплектПокупки.Количество КАК ЧИСЛО(15, 0))) * КомплектПокупки.Количество - ТоварыКоличество.Количество >= 0
	|							ТОГДА (ВЫРАЗИТЬ(ТоварыКоличество.Количество / КомплектПокупки.Количество КАК ЧИСЛО(15, 0))) - 1
	|						ИНАЧЕ ВЫРАЗИТЬ(ТоварыКоличество.Количество / КомплектПокупки.Количество КАК ЧИСЛО(15, 0))
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоКомплектов
	|ПОМЕСТИТЬ ТаблицаКомплектов
	|ИЗ
	|	КомплектПокупки КАК КомплектПокупки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыКоличество КАК ТоварыКоличество
	|		ПО КомплектПокупки.Номенклатура = ТоварыКоличество.Номенклатура
	|			И КомплектПокупки.Характеристика = ТоварыКоличество.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаКомплектов.КоличествоКомплектов) КАК КоличествоКомплектов,
	|	-1 КАК КлючСвязи,
	|	&ИмяПараметра КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаМинимальногоКоличестваКомплектов
	|ИЗ
	|	ТаблицаКомплектов КАК ТаблицаКомплектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМинимальногоКоличестваКомплектов.КоличествоКомплектов КАК КоличествоКомплектов,
	|	ТаблицаМинимальногоКоличестваКомплектов.КлючСвязи КАК КлючСвязи,
	|	ТаблицаМинимальногоКоличестваКомплектов.Ссылка КАК Ссылка
	|ИЗ
	|	ТаблицаМинимальногоКоличестваКомплектов КАК ТаблицаМинимальногоКоличестваКомплектов
	|ГДЕ
	|	ТаблицаМинимальногоКоличестваКомплектов.КоличествоКомплектов >= 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыКоличество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КомплектПокупки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаКомплектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаМинимальногоКоличестваКомплектов";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		9,
		5,
		"СкидкаЗаЗаКомплектПокупки" + ИмяПараметра
	);
	
КонецФункции

// Получает сумму предыдущей покупки по карте для расчета соответствующей скидки 
Функция СуммаПредыдущейПокупкиДляРасчетаСкидки(МассивКарт, ДатаРасчета, СегментОтграничения)
	Сумма = 0;
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Дата КАК Дата,
	|	СУММА(ЧекККМТовары.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|		ПО ЧекККМ.Ссылка = ЧекККМТовары.Ссылка
	|		//УсловиеСегмент
	|ГДЕ
	|	ЧекККМ.Проведен
	|	И ЧекККМ.ДисконтнаяКарта В(&МассивКарт)
	|	И ЧекККМ.Дата < &ДатаРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМ.Ссылка,
	|	ЧекККМ.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	Ссылка УБЫВ";
	Запрос.УстановитьПараметр("МассивКарт", МассивКарт);
	Запрос.УстановитьПараметр("ДатаРасчета", ДатаРасчета);
	Если ЗначениеЗаполнено(СегментОтграничения) Тогда
		УсловиеСегмент = "		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегментаИсключения
		|		ПО ЧекККМТовары.Номенклатура = НоменклатураСегментаИсключения.Номенклатура
		|			И ЧекККМТовары.Характеристика = НоменклатураСегментаИсключения.Характеристика
		|			И (НоменклатураСегментаИсключения.Сегмент = &СегментОтграничения)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//УсловиеСегмент", УсловиеСегмент);
		Запрос.УстановитьПараметр("СегментОтграничения", СегментОтграничения);
		
		ПоказательСегмент = "СУММА(ВЫБОР КОГДА НоменклатураСегментаИсключения.Номенклатура ЕСТЬ NULL
		|	ТОГДА 0
		|	ИНАЧЕ ЧекККМТовары.Сумма КОНЕЦ) КАК Сумма";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СУММА(ЧекККМТовары.Сумма) КАК Сумма", ПоказательСегмент);
		
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Сумма = Выборка.Сумма;
	КонецЕсли;
	Возврат Сумма;
КонецФункции

//	LNK 20.09.2018 10:39:09
Функция ТекстЗапросаТаблицаУсловияСкидокПолучатели()

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.Ссылка КАК УсловиеПредоставления,
	|	УсловияПолучатели.Получатель КАК Получатель
	|ИЗ
	|	УсловияПредоставления КАК СкидкиНаценки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок.Получатели КАК УсловияПолучатели
	|		ПО СкидкиНаценки.Ссылка = УсловияПолучатели.Ссылка"
	;
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	;
	Возврат Новый Структура(
		"ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы"
		, ТекстЗапроса
		, 1
		, 1
		, "УсловияСкидокПолучатели"
	);

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПАКЕТА ЗАПРОСОВ

// Функция создает пакет запросов.
//
// Возвращаемое значение:
//	Структура - пакет запросов.
//
Функция ПакетЗапросовСоздать() Экспорт
	
	ПакетЗапросов = Новый Структура;
	ПакетЗапросов.Вставить("ОбщееКоличествоТаблиц", 0);
	ПакетЗапросов.Вставить("СтруктураИмяЗапросаИНомерТаблицыРезультата", Новый Структура);
	ПакетЗапросов.Вставить("Запрос", Новый Запрос);
	ПакетЗапросов.Вставить("РезультатЗапроса", Неопределено);
	ПакетЗапросов.Вставить("МассивИменЗапросов", Новый Массив);
	
	Возврат ПакетЗапросов;
	
КонецФункции

// ОбъединитьТаблицыДанныхПодчиненныхСтрок добавляет запрос в пакет запросов.
//
// Возвращаемое значение:
//	Нет
//
Процедура ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ПакетЗапросов, Добавлять = Ложь) Экспорт

//	Проверка на дубли запросов.
	Если НЕ ПакетЗапросов.МассивИменЗапросов.Найти(ПараметрыЗапроса.ИмяТаблицы) = Неопределено Тогда

		Возврат;

	КонецЕсли;

	ПакетЗапросов.ОбщееКоличествоТаблиц = ПакетЗапросов.ОбщееКоличествоТаблиц + ПараметрыЗапроса.КоличествоТаблиц;
	НомерТаблицы = ПакетЗапросов.ОбщееКоличествоТаблиц - ПараметрыЗапроса.КоличествоТаблиц + ПараметрыЗапроса.НомерТаблицыРезультата;

	ПакетЗапросов.Запрос.Текст = ПакетЗапросов.Запрос.Текст +
	"// Номер таблицы результата: " + НомерТаблицы + "
	|";
	ПакетЗапросов.Запрос.Текст = ПакетЗапросов.Запрос.Текст + ПараметрыЗапроса.ТекстЗапроса;

	Если Добавлять Тогда

		ПакетЗапросов.СтруктураИмяЗапросаИНомерТаблицыРезультата.Вставить(ПараметрыЗапроса.ИмяТаблицы, НомерТаблицы);

	КонецЕсли;

	ПакетЗапросов.МассивИменЗапросов.Добавить(ПараметрыЗапроса.ИмяТаблицы);
	
КонецПроцедуры

// Функция выполняет пакет запросов.
//
// Возвращаемое значение:
//	Булево - Истина, если запрос выполнен успешно.
//
Функция ПакетЗапросовВыполнить(ПакетЗапросов) Экспорт

	Если ЗначениеЗаполнено(ПакетЗапросов.Запрос.Текст) Тогда

			ПакетЗапросов.РезультатЗапроса = ПакетЗапросов.Запрос.ВыполнитьПакет();
			Возврат Истина;

	Иначе	Возврат Ложь;

	КонецЕсли;

КонецФункции

// Функция получает результат запроса из пакета запросов по имени запроса.
//
// Возвращаемое значение:
//	РезультатЗапроса - Результат запроса входящего в пакет.
//
Функция ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы(ИмяЗапроса, ПакетЗапросов)
	
	Возврат ПакетЗапросов.РезультатЗапроса[ПакетЗапросов.СтруктураИмяЗапросаИНомерТаблицыРезультата[ИмяЗапроса] - 1];
	
КонецФункции

// Функция объединяет все результаты запросов пакета в одну таблицу.
//
// Возвращаемое значение:
//	РезультатЗапроса - Результат запроса входящего в пакет.
//
Функция ПакетЗапросовОбъединитьРезультаты(ПакетЗапросов)
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Ссылка"	, Новый ОписаниеТипов("СправочникСсылка.УсловияПредоставленияСкидокНаценок"));
	ТЗ.Колонки.Добавить("КлючСвязи"	, Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("КоличествоКомплектов"	, Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("КупоныПолучатели"		, Новый ОписаниеТипов("ТаблицаЗначений"));

	МеткаПоТипуПолучателя = "СкидкаПоТипуПолучателя";	//	LNK 01.09.2022 06:35:00
	
	Для Каждого КлючИЗначение Из ПакетЗапросов.СтруктураИмяЗапросаИНомерТаблицыРезультата Цикл

		НомерТаблицы = КлючИЗначение.Значение - 1;

		Выборка = ПакетЗапросов.РезультатЗапроса[НомерТаблицы].Выбрать();
		ЭтоРезультатПоТипуПолучателя = Лев(КлючИЗначение.Ключ, СтрДлина(МеткаПоТипуПолучателя)) = МеткаПоТипуПолучателя;

		Пока Выборка.Следующий() Цикл

			СтрокаТаблицы = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);

			Если ЭтоРезультатПоТипуПолучателя Тогда

			//	LNK 01.09.2022 06:51:39 - Пакет запроса "ТекстЗапросаСкидкаПоТипуПолучателя".
			//	Всегда на единицу больше (следующая таблица в запросе)
				СтрокаТаблицы.КупоныПолучатели = ПакетЗапросов.РезультатЗапроса[НомерТаблицы + 1].Выгрузить();
				СтрокаТаблицы.КупоныПолучатели.Индексы.Добавить("УсловиеПредоставления, Получатель");

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Возврат ТЗ;

КонецФункции

#Область ПодготовкаПакетовЗапросовПеровогоВторого

Процедура ПодготовитьПервыйПакетЗапросов(ПервыйПакетЗапросов, ПараметрыРасчета)	//	LNK 25.05.2021 07:36:16

	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаСкидкиНаценки(),                 ПервыйПакетЗапросов, Истина);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаУсловияПредоставления(),         ПервыйПакетЗапросов, Истина);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаСкидкиНаценкиПоЦеновымГруппам(), ПервыйПакетЗапросов, Истина);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаТоварыПоСегментам(),			  ПервыйПакетЗапросов, Истина);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаЦеныНоменклатуры(),              ПервыйПакетЗапросов, Истина);
	
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаСкидкиНаценкиНаборыПодарков(ПараметрыРасчета.ИспользоватьПрименениеЦен), ПервыйПакетЗапросов, Истина);
	
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаСкидкиНаценкиСообщений() , ПервыйПакетЗапросов, Истина);
	
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаУсловияСкидокПолучатели(), ПервыйПакетЗапросов, Истина);	//	LNK 20.09.2018 10:51:47
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаПакетКупоновШкалаКратностей(), ПервыйПакетЗапросов, Истина);	//	LNK 28.08.2020 12:37:19

КонецПроцедуры

Функция ПодготовитьВторойПакетЗапросов(ВторойПакетЗапросов, ПервыйПакетЗапросов, ПараметрыРасчета)	//	LNK 25.05.2021 07:36:16
	
	ТаблицаУсловийСкидокОтПредыдущейПокупки = Новый ТаблицаЗначений;
	ТаблицаУсловийСкидокОтПредыдущейПокупки.Колонки.Добавить("УсловиеПредоставления" , Новый ОписаниеТипов("СправочникСсылка.УсловияПредоставленияСкидокНаценок"));
	ТаблицаУсловийСкидокОтПредыдущейПокупки.Колонки.Добавить("СуммаПредыдущейПокупки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	ВыборкаУсловияПредоставления = ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("УсловияПредоставления", ПервыйПакетЗапросов).Выбрать();

	Пока ВыборкаУсловияПредоставления.Следующий() Цикл

		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж Тогда
			Если ВыборкаУсловияПредоставления.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке Тогда
				ПараметрыЗапроса = ТекстЗапросаСкидкаЗаРазовуюПродажуСУсловиемПоСтроке(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
				ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);
			Иначе
				ПараметрыЗапроса = ТекстЗапросаСкидкаЗаРазовуюПродажуСУсловиемПоДокументу(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
				ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж Тогда
			
			ДатаНачала    = Неопределено;
			ДатаОкончания = ПараметрыРасчета.ТекущаяДата - 1;
			
			Если ВыборкаУсловияПредоставления.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ПрошлыйПериод Тогда
				
				Если ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Год Тогда
					ДатаНачала    = НачалоГода(НачалоГода(ПараметрыРасчета.ТекущаяДата) - 1);
					ДатаОкончания = НачалоГода(ПараметрыРасчета.ТекущаяДата) - 1;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Квартал Тогда
					ДатаНачала    = НачалоКвартала(НачалоКвартала(ПараметрыРасчета.ТекущаяДата) - 1);
					ДатаОкончания = НачалоКвартала(ПараметрыРасчета.ТекущаяДата) - 1;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Месяц Тогда
					ДатаНачала    = НачалоМесяца(НачалоМесяца(ПараметрыРасчета.ТекущаяДата) - 1);
					ДатаОкончания = НачалоМесяца(ПараметрыРасчета.ТекущаяДата) - 1;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Неделя Тогда
					ДатаНачала    = НачалоНедели(НачалоНедели(ПараметрыРасчета.ТекущаяДата) - 1);
					ДатаОкончания = НачалоНедели(ПараметрыРасчета.ТекущаяДата) - 1;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.День Тогда
					ДатаНачала    = НачалоДня(НачалоДня(ПараметрыРасчета.ТекущаяДата) - 1);
					ДатаОкончания = НачалоДня(ПараметрыРасчета.ТекущаяДата) - 1;
				КонецЕсли;
				
			ИначеЕсли ВыборкаУсловияПредоставления.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ПрошлыйСкользящийПериод Тогда
				
				Если ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Год Тогда
					ДатаНачала    = ПараметрыРасчета.ТекущаяДата - 365*24*60*60;
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Полугодие Тогда
					ДатаНачала    = ПараметрыРасчета.ТекущаяДата - 180*24*60*60;
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Квартал Тогда
					ДатаНачала    = ПараметрыРасчета.ТекущаяДата - 90*24*60*60;
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Месяц Тогда
					ДатаНачала    = ПараметрыРасчета.ТекущаяДата - 30*24*60*60;
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Декада Тогда
					ДатаНачала    = ПараметрыРасчета.ТекущаяДата - 10*24*60*60;
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Неделя Тогда
					ДатаНачала    = ПараметрыРасчета.ТекущаяДата - 7*24*60*60;
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.День Тогда
					ДатаНачала    = ПараметрыРасчета.ТекущаяДата - 24*60*60;
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				КонецЕсли;
				
			ИначеЕсли ВыборкаУсловияПредоставления.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.СНачалаТекущегоПериода Тогда
				
				Если ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Год Тогда
					ДатаНачала    = НачалоГода(ПараметрыРасчета.ТекущаяДата);
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Квартал Тогда
					ДатаНачала    = НачалоКвартала(ПараметрыРасчета.ТекущаяДата);
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Месяц Тогда
					ДатаНачала    = НачалоМесяца(ПараметрыРасчета.ТекущаяДата);
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Неделя Тогда
					ДатаНачала    = НачалоНедели(ПараметрыРасчета.ТекущаяДата);
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.День Тогда
					ДатаНачала    = НачалоДня(ПараметрыРасчета.ТекущаяДата);
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				КонецЕсли;
				
			ИначеЕсли ВыборкаУсловияПредоставления.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ВесьПериод Тогда
				ДатаНачала    = Неопределено;
				ДатаОкончания = ПараметрыРасчета.ТекущаяДата - 1;
			ИначеЕсли ВыборкаУсловияПредоставления.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ПредыдущаяПокупка Тогда
				ДатаНачала    = Неопределено;
				ДатаОкончания = ПараметрыРасчета.ТекущаяДата - 1;
			КонецЕсли;

			Если ВыборкаУсловияПредоставления.ВариантНакопления = Перечисления.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоПартнеру Тогда

				ПараметрыЗапроса = ТекстЗапросаСкидкаЗаНакопленныйОбъемПродажПоПартнеруЗаПериод(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка, ДатаНачала, ДатаОкончания);
				ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);

			ИначеЕсли ВыборкаУсловияПредоставления.ВариантНакопления = Перечисления.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоДисконтнойКарте Тогда

				Если ВыборкаУсловияПредоставления.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ПредыдущаяПокупка Тогда

					Если ПараметрыРасчета.ДисконтныеКарты.Количество() > 0 Тогда

						СуммаПредыдущейПокупки = СуммаПредыдущейПокупкиДляРасчетаСкидки(ПараметрыРасчета.ДисконтныеКарты
																						, ПараметрыРасчета.ТекущаяДата
																						, ВыборкаУсловияПредоставления.СегментНоменклатурыОграничения);
						ЕстьУсловиеПредыдущейПокупки = Истина;
						
						УсловиеПредыдущейПокупкиВыполнено = Ложь;

						Если ВыборкаУсловияПредоставления.ТипСравнения = Перечисления.ТипыСравненияЗначенийСкидокНаценок.НеМенее Тогда

							УсловиеПредыдущейПокупкиВыполнено = СуммаПредыдущейПокупки >= ВыборкаУсловияПредоставления.ЗначениеУсловияОграничения;

						ИначеЕсли ВыборкаУсловияПредоставления.ТипСравнения = Перечисления.ТипыСравненияЗначенийСкидокНаценок.НеБолее Тогда

							УсловиеПредыдущейПокупкиВыполнено = СуммаПредыдущейПокупки <= ВыборкаУсловияПредоставления.ЗначениеУсловияОграничения;

						КонецЕсли;

						Если УсловиеПредыдущейПокупкиВыполнено Тогда

							НоваяСтрокаУсловийПредыдущейПокупки = ТаблицаУсловийСкидокОтПредыдущейПокупки.Добавить();
							НоваяСтрокаУсловийПредыдущейПокупки.УсловиеПредоставления = ВыборкаУсловияПредоставления.Ссылка;
							НоваяСтрокаУсловийПредыдущейПокупки.СуммаПредыдущейПокупки = СуммаПредыдущейПокупки;

						КонецЕсли;

					КонецЕсли;

				Иначе

					ПараметрыЗапроса = ТекстЗапросаСкидкаЗаНакопленныйОбъемПродажПоДисконтнойКартеЗаПериод(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка, ДатаНачала, ДатаОкончания);
					ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаПервуюПродажуПартнеру Тогда

			ПараметрыЗапроса = ТекстЗапросаСкидкаЗаПервуюПродажуПартнеру(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
			ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);

		КонецЕсли;

		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаПробнуюПродажу Тогда

			ПараметрыЗапроса = ТекстЗапросаСкидкаЗаПробнуюПродажу(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
			ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);

		КонецЕсли;

		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаГрафикОплаты Тогда

			ПараметрыЗапроса = ТекстЗапросаСкидкаЗаГрафикОплаты(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
			ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);

		КонецЕсли;

		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаФормуОплаты Тогда

			ПараметрыЗапроса = ТекстЗапросаСкидкаЗаФормуОплаты(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
			ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);

		КонецЕсли;

		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ОграничениеПоГруппеПользователей Тогда

			ПараметрыЗапроса = ТекстЗапросаСкидкаОграничениеПоГруппеПользователей(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
			ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);

		КонецЕсли;

		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи Тогда

			ПараметрыЗапроса = ТекстЗапросаСкидкаЗаВремяПродажи(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
			ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);

		КонецЕсли;

		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ВДеньРождения Тогда

			ПараметрыЗапроса = ТекстЗапросаСкидкаВДеньРождения(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
			ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);

		КонецЕсли;

		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ПорядковыйНомерПродажиКратен Тогда

			ПараметрыЗапроса = ТекстЗапросаСкидкаКратностьНомераЧека(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
			ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);

		КонецЕсли;

		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ПоТипуПолучателя Тогда

			ПараметрыЗапроса = ТекстЗапросаСкидкаПоТипуПолучателя(ВторойПакетЗапросов, ВыборкаУсловияПредоставления);
			ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);

		КонецЕсли;

		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки Тогда

			ПараметрыЗапроса = ТекстЗапросаСкидкаЗаКомплектПокупки(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
			ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);

		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаУсловийСкидокОтПредыдущейПокупки;

КонецФункции

#КонецОбласти

#Область ПроцедурыРасчетаСкидокНаценокПоДокументам

//	ВХОД расчета СкидокНаценок
//	Функция выполняет расчет скидок (наценок) по переданным параметрам.
//
Функция РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры) Экспорт

	ПервыйПакетЗапросов = ПакетЗапросовСоздать();
	ВторойПакетЗапросов = ПакетЗапросовСоздать();

	Для Каждого ПараметрПакета Из ПараметрыРасчета Цикл

		ПервыйПакетЗапросов.Запрос.УстановитьПараметр(ПараметрПакета.Ключ, ПараметрПакета.Значение);
		ВторойПакетЗапросов.Запрос.УстановитьПараметр(ПараметрПакета.Ключ, ПараметрПакета.Значение);

	КонецЦикла;

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПервыйПакетЗапросов.Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ВторойПакетЗапросов.Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Если НЕ ПараметрыРасчета.Свойство("ИспользоватьПрименениеЦен") ИЛИ НЕ ТипЗнч(ПараметрыРасчета.ИспользоватьПрименениеЦен) = Тип("Булево") Тогда

		ПараметрыРасчета.Вставить("ИспользоватьПрименениеЦен", Ложь);	//	LNK 25.05.2021 07:53:13

	КонецЕсли;
	
//	Подготовка и выполнение первого пакета.
	ПодготовитьПервыйПакетЗапросов(ПервыйПакетЗапросов, ПараметрыРасчета);	//	LNK 25.05.2021 07:42:31
	ПакетЗапросовВыполнить(ПервыйПакетЗапросов);
	
//	Подготовка и выполнение второго пакета.
	ТаблицаУсловийСкидокОтПредыдущейПокупки = ПодготовитьВторойПакетЗапросов(ВторойПакетЗапросов, ПервыйПакетЗапросов, ПараметрыРасчета);	//	LNK 25.05.2021 07:46:39
	ПакетЗапросовВыполнить(ВторойПакетЗапросов);

	ТаблицаВыполненныеУсловия = ПакетЗапросовОбъединитьРезультаты(ВторойПакетЗапросов);

	Если НЕ ТаблицаУсловийСкидокОтПредыдущейПокупки.Количество() = 0 Тогда

		Для Каждого СтрокаУсловийПредыдущейПокупки Из ТаблицаУсловийСкидокОтПредыдущейПокупки Цикл

			ДопСтрока = ТаблицаВыполненныеУсловия.Добавить();
			ДопСтрока.Ссылка = СтрокаУсловийПредыдущейПокупки.УсловиеПредоставления;
			ДопСтрока.КлючСвязи = -1;

		КонецЦикла;

	КонецЕсли;
	
	ТаблицаВсеСкидкиНаценки = ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("СкидкиНаценки", ПервыйПакетЗапросов).Выгрузить();

	Если ВходныеПараметры.СписыватьАкционныеБонусныеБаллы И НЕ ВходныеПараметры.НеНачислятьБонусныеБаллы = Истина Тогда	//	LNK 25.10.2022 04:56:13	НеНачислятьБонусныеБаллы

		ПараметрыЗапроса = Новый Структура(
			"Магазин, ТоварыДляОплаты, ПрограммаЛояльности, ТипыБонусов, ТолькоТекущийОстаток"
			, ПараметрыРасчета.Магазин
			, ПараметрыРасчета.Товары
			,
			, ОбщегоНазначенияКлиентСервер.AAD(Перечисления.ТипыБонусов.Акционный)
			, Истина
		);

		ТаблицаБонусныеБаллы = БонусныеБаллыСервер.BPS_ПолучитьОстаткиИДвиженияБонусныхБаллов(ПараметрыРасчета.ВладелецКарты, ПараметрыЗапроса);

	Иначе

		ТаблицаБонусныеБаллы = БонусныеБаллыСервер.ТаблицаБонусныеБаллыПустая();

	КонецЕсли;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	ДанныеРасчетаСкидок = СкидкиНаценкиСерверПереопределяемый.СтруктураДанныхРасчетаСкидок(ВходныеПараметры);

	Для каждого ЭлементРасчета Из ДанныеРасчетаСкидок Цикл

		Если ВходныеПараметры.НеНачислятьБонусныеБаллы = Истина И ЭлементРасчета.СпособПрименения = Перечисления.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы Тогда
		//	LNK 25.10.2022 05:28:31 - Бонусы НЕ начисляем!

			Продолжить;

		КонецЕсли;

		ОтборыСкидок = Новый Структура("СпособПримененияСкидки", ЭлементРасчета.СпособПрименения);

		Если НЕ ЭлементРасчета.ТипПрограммыЛояльности = Неопределено Тогда

			ОтборыСкидок.Вставить("ТипПрограммыЛояльности", ЭлементРасчета.ТипПрограммыЛояльности);

		КонецЕсли;

		ТаблицаСкидкиНаценки = ТаблицаВсеСкидкиНаценки.Скопировать(ОтборыСкидок);

		ДеревоСкидок = ПолучитьДеревоСкидок(ТаблицаСкидкиНаценки.ВыгрузитьКолонку("СкидкаНаценка"), ВходныеПараметры.УправляемыеСкидки, ТаблицаУсловийСкидокОтПредыдущейПокупки);
		ДеревоСкидок.Колонки.Добавить("ТаблицаДанных"    , Новый ОписаниеТипов("ТаблицаЗначений"));
		ДеревоСкидок.Колонки.Добавить("ТаблицаПодарков"  , Новый ОписаниеТипов("ТаблицаЗначений"));
		ДеревоСкидок.Колонки.Добавить("ТаблицаТоваров"	 , Новый ОписаниеТипов("ТаблицаЗначений"));
		ДеревоСкидок.Колонки.Добавить("ПараметрыУсловий" , Новый ОписаниеТипов("Структура"));
		
		ПроверитьУсловияРекурсивно(ДеревоСкидок, ТаблицаВыполненныеУсловия);
		ДеревоСкидок.Колонки.Удалить(ДеревоСкидок.Колонки.УсловияПредоставления);

		Если ВходныеПараметры.ТолькоПредварительныйРасчет Тогда
			
			ТЗ = Новый ТаблицаЗначений;
			ТЗ.Колонки.Добавить("КлючСвязи",     Новый ОписаниеТипов("Число"));
			ТЗ.Колонки.Добавить("СкидкаНаценка", Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
			ТЗ.Колонки.Добавить("Сумма",         Новый ОписаниеТипов("Число"));
			
			ВозвращаемыеДанные = Новый Структура;
			ВозвращаемыеДанные.Вставить("ДеревоСкидок", ДеревоСкидок);
			ВозвращаемыеДанные.Вставить("ТаблицаСкидкиНаценки", ТЗ);
			
			ЭлементРасчета.Результаты = ВозвращаемыеДанные;

			Продолжить;
			
		КонецЕсли;

	//	Таблица подарков
		ПустаяТаблицаПодарков = ПолучитьПустуюТаблицуПодарков();
		
	//	Подготовка параметров для расчета скидок.
		Параметры = Новый Структура;
		Параметры.Вставить("ЦеныНоменклатуры"             , ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("ЦеныНоменклатуры"             , ПервыйПакетЗапросов).Выгрузить());
		Параметры.Вставить("ТоварыПоСегментам"            , ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("ТоварыПоСегментам"            , ПервыйПакетЗапросов).Выгрузить());
		Параметры.Вставить("СкидкиНаценкиПоЦеновымГруппам", ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("СкидкиНаценкиПоЦеновымГруппам", ПервыйПакетЗапросов).Выгрузить());
		Параметры.Вставить("СкидкиНаценкиНаборыПодарков"  , ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("СкидкиНаценкиНаборыПодарков"  , ПервыйПакетЗапросов).Выгрузить());
		Параметры.Вставить("СкидкиНаценкиСообщения"       , ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("СкидкиНаценкиСообщения"       , ПервыйПакетЗапросов).Выгрузить());
	//	LNK 28.08.2020 12:42:22
		Параметры.Вставить("СкидкиНаценкиШкалаКратностей" , ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("СкидкиНаценкиШкалаКратностей" , ПервыйПакетЗапросов).Выгрузить());

	//	LNK 20.09.2018 10:54:30
		Параметры.Вставить("СкидкиНаценкиПолучатели"      , ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("УсловияСкидокПолучатели"      , ПервыйПакетЗапросов).Выгрузить());
		Параметры.Вставить("СкидкиНаценки"                , ТаблицаСкидкиНаценки);
		Параметры.Вставить("СпособПримененияСкидки"       , ЭлементРасчета.СпособПрименения);	//	LNK 29.01.2021 05:40:03

		Параметры.Вставить("ПогашениеСкидочныхКупонов"    , ПараметрыРасчета.ПогашениеСкидочныхКупонов);	//	LNK 19.09.2018 13:51:56
		Параметры.Вставить("ЦенаПродажиМинимальная"		  , ВходныеПараметры.ЦенаПродажиМинимальная);		//	LNK 29.10.2021 05:56:00
		
		Расшифровка = Новый ТаблицаЗначений;
		Расшифровка.Колонки.Добавить("СкидкаНаценка"			 , Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
		Расшифровка.Колонки.Добавить("СпособПримененияСкидки"	 , Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПримененияСкидокНаценок"));
		Расшифровка.Колонки.Добавить("СпособПредоставления"		 , Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПредоставленияСкидокНаценок"));
		Расшифровка.Колонки.Добавить("Сумма"					 , Новый ОписаниеТипов("Число"));
		Расшифровка.Колонки.Добавить("ОграниченаМинимальнойЦеной", Новый ОписаниеТипов("Булево"));
		Расшифровка.Колонки.Добавить("ТаблицаУсловий"			 , Новый ОписаниеТипов("ТаблицаЗначений"));
		Расшифровка.Колонки.Добавить("ПодарокПозиция"			 , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));	//	LNK 07.09.2021 12:10:36
		Расшифровка.Колонки.Добавить("ПодарокКоличество"		 , Новый ОписаниеТипов("Число"));	//	LNK 09.09.2021 09:55:19
		
		ТаблицаОтсутствующихПодарков = Новый ТаблицаЗначений;
		ТаблицаОтсутствующихПодарков.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаОтсутствующихПодарков.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаОтсутствующихПодарков.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
		ТаблицаОтсутствующихПодарков.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число"));
		ТаблицаОтсутствующихПодарков.Колонки.Добавить("КоличествоУпаковокНеобходимо", Новый ОписаниеТипов("Число"));
		
	//	Пустые таблицы.
		Параметры.Вставить("ПустаяТаблицаСкидокСРасшифровкой", Неопределено);
		Параметры.Вставить("ПустаяТаблицаРасшифровка"        , Расшифровка);
		Параметры.Вставить("ПустаяТаблицаПодарков"           , ПустаяТаблицаПодарков);
		Параметры.Вставить("ТаблицаОтсутствующихПодарков"    , ТаблицаОтсутствующихПодарков);
		
		//Сичкаренко 10.12.2020
		Если ВходныеПараметры.Свойство("МаксимальнаяСуммаНакопленияЛояльности") Тогда 
			Параметры.Вставить("МаксимальнаяСуммаНакопленияЛояльности", ВходныеПараметры.МаксимальнаяСуммаНакопленияЛояльности);
		Иначе
			Параметры.Вставить("МаксимальнаяСуммаНакопленияЛояльности", 0);
		КонецЕсли;
		
		Если ВходныеПараметры.Свойство("Накопленно") Тогда 
			Параметры.Вставить("Накопленно", ВходныеПараметры.Накопленно);
		Иначе
			Параметры.Вставить("Накопленно", 0);
		КонецЕсли;
		
		Если ВходныеПараметры.Свойство("ИспользоватьПрограммуЛояльности") Тогда 
			Параметры.Вставить("ИспользоватьПрограммуЛояльности", ВходныеПараметры.ИспользоватьПрограммуЛояльности);
		Иначе
			Параметры.Вставить("ИспользоватьПрограммуЛояльности", Ложь);
		КонецЕсли;
		
		Если ВходныеПараметры.Свойство("КонтролироватьОстаткиТоваров") Тогда

				Параметры.Вставить("КонтролироватьОстаткиТоваров", ВходныеПараметры.КонтролироватьОстаткиТоваров);

		Иначе	Параметры.Вставить("КонтролироватьОстаткиТоваров", Ложь);

		КонецЕсли;

		Параметры.Вставить("ПродажаПоКредитнойПрограмме", ПараметрыРасчета.ПродажаПоКредитнойПрограмме);	//	LNK 31.07.2021 08:40:44

	//	Индексирование таблиц
		Параметры.СкидкиНаценки.Индексы.Добавить("СкидкаНаценка");
		Параметры.ТоварыПоСегментам.Индексы.Добавить("Номенклатура, СегментНоменклатуры");
		Параметры.СкидкиНаценкиШкалаКратностей.Индексы.Добавить("СкидкаНаценка");

		Если ЭлементРасчета.СпособПрименения = Перечисления.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы Тогда

		//	.. используем в параметрах структуру, заполненную в предыдущей итерации.
			Параметры.Вставить("БазаРасчета", ПараметрыРасчета.БазаРасчета);
			ПараметрыРасчета.БазаРасчета = Новый Структура;	//	данные уже не нужны.. очистим

		КонецЕсли;

		ЭлементРасчета.Результаты = РассчитатьДеревоСкидок(ДеревоСкидок, Параметры);

		Если ЭлементРасчета.СпособПрименения = Перечисления.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок
		Тогда

			ЭлементРасчета.Результаты.Вставить("ТаблицаБонусныеБаллы", ТаблицаБонусныеБаллы);	//	LNK 11.06.2021 09:31:07

			Если ВходныеПараметры.ИспользоватьБонуснуюСистему Тогда

			//	Для последующего расчета бонусов используем имитацию заполнения таблицы "Товары"
				СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(ПараметрыРасчета.БазаРасчета, "Товары"
					, ЭлементРасчета.Результаты.ТаблицаСкидкиНаценки
					, ЭлементРасчета.СпособПрименения
					, Параметры
					, Истина
				);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат ДанныеРасчетаСкидок;

КонецФункции

#Область ФункцииРасчетаСкидокНаценокПоДеревуСкидок

Процедура ОбработатьДеревоСкидок(ДеревоСкидок, ТаблицаУсловийСкидокОтПредыдущейПокупки)
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			ОбработатьДеревоСкидок(СтрокаДерева, ТаблицаУсловийСкидокОтПредыдущейПокупки);
			
		Иначе
			
			КоличествоСтрок = СтрокаДерева.Строки.Количество();
			Если КоличествоСтрок > 1 Тогда
				ВызватьИсключение НСтр("ru = 'Ошибка генерации дерева скидок'");
			КонецЕсли;
			Если КоличествоСтрок > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаДерева.Строки[0]);
				//
				Для Каждого СтрокаУсловия ИЗ СтрокаДерева.Строки[0].УсловияПредоставления Цикл
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("УсловиеПредоставления", СтрокаУсловия.УсловиеПредоставления);
					СтрокиНовыхУсловий = ТаблицаУсловийСкидокОтПредыдущейПокупки.НайтиСтроки(СтруктураПоиска);
					Если СтрокиНовыхУсловий.Количество() > 0 Тогда
						СуммаПредыдущейПокупки = СтрокиНовыхУсловий[0].СуммаПредыдущейПокупки;
						СтрокаДерева.ЗначениеСкидкиНаценки = СтрокаДерева.ЗначениеСкидкиНаценки * СуммаПредыдущейПокупки / 100;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				//
				СтрокаДерева.Строки.Удалить(СтрокаДерева.Строки[0]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция получает дерево применяемых скидок.
//
// Возвращаемое значение:
//	ДеревоЗначений - дерево применяемых скидок.
//
Функция ПолучитьДеревоСкидок(МассивСкидок, МассивУправляемыхСкидок, ТаблицаУсловийСкидокОтПредыдущейПокупки) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК СкидкаНаценка,
	|	СкидкиНаценки.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	СкидкиНаценки.ВариантСовместногоПрименения КАК ВариантСовместногоПрименения,
	|	СкидкиНаценки.ПометкаУдаления КАК ПометкаУдаления,
	|	СкидкиНаценки.СпособПредоставления КАК СпособПредоставления,
	|	СкидкиНаценки.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки,
	|	СкидкиНаценки.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	СкидкиНаценки.ПрограммаЛояльности.ТипПрограммыЛояльности КАК ТипПрограммыЛояльности,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СкидкиНаценки.ПрограммаЛояльности.СпособПримененияСкидки, ЗНАЧЕНИЕ(Перечисление.СпособыПримененияСкидокНаценок.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияСкидокНаценок.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок)
	|		ИНАЧЕ СкидкиНаценки.ПрограммаЛояльности.СпособПримененияСкидки
	|	КОНЕЦ КАК СпособПримененияСкидки,
	|	СкидкиНаценки.НачислятьНаАкционныеТовары КАК НачислятьНаАкционныеТовары,
	|	ЕСТЬNULL(СкидкиНаценки.ПрограммаЛояльности.НачислятьБаллыПоКредитнойПрограмме, ЛОЖЬ) КАК НачислятьБаллыПоКредитнойПрограмме,
	|	ЕСТЬNULL(СкидкиНаценки.ПрограммаЛояльности.НачислятьБаллыНаАкционныйТовар, ЛОЖЬ) КАК НачислятьБаллыНаАкционныйТовар,
	|	ЕСТЬNULL(СкидкиНаценки.ПрограммаЛояльности.СовместноеНачислениеСкидокИБонусов, ЛОЖЬ) КАК СовместноеНачислениеСкидокИБонусов,
	|	СкидкиНаценки.ЭтоГруппа КАК ЭтоГруппа,
	|	СкидкиНаценки.Управляемая КАК Управляемая,
	|	ВЫБОР
	|		КОГДА СкидкиНаценки.Ссылка В (&МассивУправляемыхСкидок)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НазначенаПользователем,
	|	СкидкиНаценки.УсловияПредоставления.(
	|		УсловиеПредоставления КАК УсловиеПредоставления,
	|		УсловиеПредоставления.ОбластьОграничения КАК ОбластьОграничения,
	|		УсловиеПредоставления.ЗначениеУсловияОграничения КАК ЗначениеУсловияОграничения,
	|		УсловиеПредоставления.СегментНоменклатурыОграничения КАК СегментНоменклатурыОграничения,
	|		УсловиеПредоставления.ТипСравнения КАК ТипСравнения
	|	) КАК УсловияПредоставления
	|ИЗ
	|	Справочник.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка В(&МассивСкидок)
	|	И СкидкиНаценки.СтатусДействия = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СкидкиНаценки.РеквизитДопУпорядочивания
	|ИТОГИ ПО
	|	СкидкаНаценка ИЕРАРХИЯ"
	);
	Запрос.УстановитьПараметр("МассивСкидок", МассивСкидок);
	Запрос.УстановитьПараметр("МассивУправляемыхСкидок", МассивУправляемыхСкидок);

	ДеревоСкидок = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	ОбработатьДеревоСкидок(ДеревоСкидок, ТаблицаУсловийСкидокОтПредыдущейПокупки);

	Возврат ДеревоСкидок;

КонецФункции

// Функция получает цену номенклатуры по виду цен заданному в параметрах скидки.
//
// Возвращаемое значение:
//	Число - цена номенклатуры.
//
Функция ПолучитьЦенуНоменклатурыПоВидуЦен(ТоварСегмента, Параметры, ПараметрыСкидки)
	
	Цена = 0;
	
	Отбор = Новый Структура(
		"Номенклатура,
		|Характеристика,
		|ВидЦены",
		ТоварСегмента.Номенклатура,
		ТоварСегмента.Характеристика,
		ПараметрыСкидки.ВидЦены
		);
	
	МассивСтрокЦены = Параметры.ЦеныНоменклатуры.НайтиСтроки(Отбор);
	Для Каждого СтрокаЦена Из МассивСтрокЦены Цикл
		
		Если СтрокаЦена.Упаковка = ТоварСегмента.Упаковка Тогда
			Цена = СтрокаЦена.Цена;
		Иначе
			
			// Приведем цену к цене за упаковку сегмента.
			// Цена не округляется для повышения точности...
			Если СтрокаЦена.Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка() Тогда
				Цена = СтрокаЦена.Цена * (ТоварСегмента.Количество / ТоварСегмента.КоличествоУпаковок);
			Иначе
				Цена = (СтрокаЦена.Цена / СтрокаЦена.УпаковкаКоэффициент) * (ТоварСегмента.Количество / ТоварСегмента.КоличествоУпаковок);
			КонецЕсли;
			
		КонецЕсли;
		
		Прервать;
		
	КонецЦикла;
	
	Возврат Цена;
	
КонецФункции // ПолучитьЦенуНоменклатурыПоВидуЦен()


// Процедура выполняет расчет скидки по группе совместного применения: максимум.
// Применяется в последнюю очередь.
//
// Возвращаемое значение:
//	ТаблицаЗначений - возвращает таблицу скидок для верхнего уровня дерева.
//
Функция РассчитатьСкидкиПоГруппеСовместногоПримененияМаксимумВерхнийУровень(СтрокаДерева, Параметры)
	
	ТаблицаДанных = ОбъединитьТаблицыДанныхПодчиненныхСтрок(СтрокаДерева);
	ТаблицаДанных.Сортировать("КлючСвязи, Сумма Убыв, РеквизитДопУпорядочивания");
	
	ТЗ = ПолучитьПустуюТаблицуСкидокСРасшифровкой(Параметры);
	
	КлючСвязи = -1;

	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Если СтрокаТаблицы.КлючСвязи <> КлючСвязи Тогда
			
			НоваяСтрока = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Действует = Истина;
			
			КлючСвязи = СтрокаТаблицы.КлючСвязи;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

// Процедура выполняет расчет скидки по группе совместного применения: максимум.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидкиПоГруппеСовместногоПримененияМаксимум(СтрокаДерева, Параметры)
	
	ТаблицаДанных = ОбъединитьТаблицыДанныхПодчиненныхСтрок(СтрокаДерева);
	ТаблицаДанных.Сортировать("КлючСвязи, Сумма Убыв, РеквизитДопУпорядочивания");
	
	ТЗ = ПолучитьПустуюТаблицуСкидокСРасшифровкой(Параметры);
	
	КлючСвязи = -1;
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Если СтрокаТаблицы.КлючСвязи <> КлючСвязи Тогда
			
			НоваяСтрока = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Действует = Истина;
			
			КлючСвязи = СтрокаТаблицы.КлючСвязи;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДерева.ТаблицаДанных = ТЗ;
	
КонецПроцедуры // РассчитатьСкидкиПоГруппеСовместногоПримененияМаксимум()

// Процедура выполняет расчет скидки по группе совместного применения: минимум.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидкиПоГруппеСовместногоПримененияМинимум(СтрокаДерева, Параметры)
	
	ТаблицаДанных = ОбъединитьТаблицыДанныхПодчиненныхСтрок(СтрокаДерева);
	ТаблицаДанных.Сортировать("КлючСвязи, Сумма Возр, РеквизитДопУпорядочивания");
	
	ТЗ = ПолучитьПустуюТаблицуСкидокСРасшифровкой(Параметры);
	
	КлючСвязи = -1;
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Если СтрокаТаблицы.КлючСвязи <> КлючСвязи Тогда
			
			НоваяСтрока = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Действует = Истина;
			
			КлючСвязи = СтрокаТаблицы.КлючСвязи;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДерева.ТаблицаДанных = ТЗ;
	
КонецПроцедуры // РассчитатьСкидкиПоГруппеСовместногоПримененияМинимум()

// Процедура выполняет расчет скидки по группе совместного применения: сложение.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидкиПоГруппеСовместногоПримененияСложение(СтрокаДерева, Параметры)
	
	ТаблицаДанных = ОбъединитьТаблицыДанныхПодчиненныхСтрок(СтрокаДерева);
	ТаблицаДанных.Сортировать("КлючСвязи");
	
	ТЗ = ПолучитьПустуюТаблицуСкидокСРасшифровкой(Параметры);
	
	КлючСвязи = -1;
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Если СтрокаТаблицы.КлючСвязи <> КлючСвязи Тогда
			
			НоваяСтрокаТЗ = ТЗ.Добавить();
			НоваяСтрокаТЗ.КлючСвязи = СтрокаТаблицы.КлючСвязи;
			НоваяСтрокаТЗ.Сумма = СтрокаТаблицы.Сумма;
			НоваяСтрокаТЗ.Действует = Истина;
			
		//	Расшифровка скидки.
			НоваяСтрокаТЗ.Расшифровка = Параметры.ПустаяТаблицаРасшифровка.СкопироватьКолонки();
			Для Каждого СтрокаРасшифровки Из СтрокаТаблицы.Расшифровка Цикл
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ.Расшифровка.Добавить(), СтрокаРасшифровки);
			КонецЦикла;
			
			КлючСвязи = СтрокаТаблицы.КлючСвязи;
			
		Иначе
			
			НоваяСтрокаТЗ.Сумма = НоваяСтрокаТЗ.Сумма + СтрокаТаблицы.Сумма;
			Для Каждого СтрокаРасшифровки Из СтрокаТаблицы.Расшифровка Цикл
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ.Расшифровка.Добавить(), СтрокаРасшифровки);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДерева.ТаблицаДанных = ТЗ;
	
КонецПроцедуры // РассчитатьСкидкиПоГруппеСовместногоПримененияСложение()

// Процедура выполняет расчет скидки по группе совместного применения: вытеснение.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидкиПоГруппеСовместногоПримененияВытеснение(СтрокаДерева, Параметры)
	
	ТаблицаДанных = ОбъединитьТаблицыДанныхПодчиненныхСтрок(СтрокаДерева);
	ТаблицаДанных.Сортировать("РеквизитДопУпорядочивания, КлючСвязи");

	ТЗ = ПолучитьПустуюТаблицуСкидокСРасшифровкой(Параметры);

	КлючиСвязи = Новый Соответствие;

	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл

		Если СтрокаТаблицы.КлючСвязи = 0 Тогда

		//	LNK 31.08.2018 11:36:28
		//	Это отдельный случай - выдача подарков НЕ из корзины покупателя (там тоже есть вопросы).
		//	Все скидки, вроде, всегда привязаны к строке Товары в чеке.
		//	Номер строки и есть этот "КлючСвязи".

			Если ТЗ.Количество() = 0 Тогда

			//	Скидки ещё не приняты.. можем добавить выдачу подарка и,
			//	сразу же прервать цикл - при вытеснении другие скидки нам не нужны.
				НужноДобавить = Истина;

			Иначе

				Продолжить;	// .. просто пропускаем, так как с номерами строк сравнивать бессмысленно.

			КонецЕсли;

		Иначе

			НужноДобавить = КлючиСвязи.Получить(СтрокаТаблицы.КлючСвязи) = Неопределено;

		КонецЕсли;

		Если НужноДобавить Тогда
			
			НоваяСтрока = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Действует = Истина;
			
			КлючиСвязи.Вставить(СтрокаТаблицы.КлючСвязи, Истина);

			Если СтрокаТаблицы.КлючСвязи = 0 Тогда

			//	Это условие выполняется только когда у "КлючСвязи=0" высший приоритет.
				Прервать;

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДерева.ТаблицаДанных = ТЗ;
	
КонецПроцедуры

// Процедура выполняет расчет скидки по группе совместного применения.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидкиПоГруппеСовместногоПрименения(СтрокаДерева, Параметры)
	
	Если СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум Тогда
		
		РассчитатьСкидкиПоГруппеСовместногоПримененияМаксимум(СтрокаДерева, Параметры);
		
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Минимум Тогда
		
		РассчитатьСкидкиПоГруппеСовместногоПримененияМинимум(СтрокаДерева, Параметры);
		
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
		
		РассчитатьСкидкиПоГруппеСовместногоПримененияВытеснение(СтрокаДерева, Параметры);
		
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение Тогда
		
		// Умножение для групп работает аналогично сложению, т.к. суммы скидок уже рассчитаны.
		РассчитатьСкидкиПоГруппеСовместногоПримененияСложение(СтрокаДерева, Параметры);
		
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Сложение Тогда
		
		РассчитатьСкидкиПоГруппеСовместногоПримененияСложение(СтрокаДерева, Параметры);
		
	Иначе
		
		// На верхнем уровне всегда складываем скидки...
		РассчитатьСкидкиПоГруппеСовместногоПримененияСложение(СтрокаДерева, Параметры);
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСкидкиПоГруппеСовместногоПрименения()

// Процедура выполняет расчет скидки дерева скидок.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидку(СтрокаДерева, Параметры)
	
	ПараметрыСкидки = Параметры.СкидкиНаценки.Найти(СтрокаДерева.СкидкаНаценка, "СкидкаНаценка");
	
	ТоварыСегмента = СтрокаДерева.ТаблицаТоваров.НайтиСтроки(Новый Структура("СегментНоменклатуры", ПараметрыСкидки.СегментНоменклатурыПредоставления));
	
	СкидкиНаценкиПоЦеновымГруппам = Параметры.СкидкиНаценкиПоЦеновымГруппам.НайтиСтроки(Новый Структура("СкидкаНаценка", СтрокаДерева.СкидкаНаценка));
	
	СкидкиНаценкиНаборыПодарков = Параметры.СкидкиНаценкиНаборыПодарков.НайтиСтроки(Новый Структура("СкидкаНаценка", СтрокаДерева.СкидкаНаценка));
	
	Если СтрокаДерева.Родитель = Неопределено Тогда

			ЭтоУмножение = Ложь;

	Иначе	ЭтоУмножение = СтрокаДерева.Родитель.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение;

	КонецЕсли;
	
	ЗаполнитьПринятПогашениеСкидочныхКупонов(СтрокаДерева.СкидкаНаценка, СтрокаДерева.ПараметрыУсловий, Параметры.ПогашениеСкидочныхКупонов);

	ТаблицаДанных   = ПолучитьПустуюТаблицуСкидокСРасшифровкой(Параметры);
	ТаблицаПодарков = Параметры.ПустаяТаблицаПодарков.СкопироватьКолонки();

	Если ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Процент Тогда

		// + HVOYA 13.10.2016 16:13:43, Латышев А.А.
		КратнаяАкция  = Ложь;
		СтрокиУсловия = СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("ОбластьОграничения, Выполнено", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе, Истина));

	//	LNK 18.10.2016 11:33:58
		Если СтрокиУсловия.Количество() > 0 И НЕ ТоварыСегмента.Количество() = 0 Тогда

			НакапливаемоеЗначениеСуммы = 0;

			Для каждого СтрокаУсловия Из СтрокиУсловия Цикл

				Если СтрокаУсловия.ТипСравнения = Перечисления.ТипыСравненияЗначенийСкидокНаценок.Кратно Тогда
					// Бакан ТС + 2025.04.01 RETAIL1C-1112
					НачислятьНаАкционныеТовары = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаДерева.СкидкаНаценка,"НачислятьНаАкционныеТовары");
					// Бакан ТС - RETAIL1C-1112
					КратнаяАкция  = Истина;
					ЗначениеСуммы = ПосчитаемСуммуДляСкидкиПоДокументу(ТоварыСегмента, СтрокаУсловия.ЗначениеУсловияОграничения,НачислятьНаАкционныеТовары); //RETAIL1C-1112
					ЗначениеСкидкиНаценки = ПараметрыСкидки.ЗначениеСкидкиНаценки;
					// + HVOYA 24.05.2017 11:34:42, Латышев А.А.
					КоличествоТовара = 0;

					Для каждого ТоварСегмента Из ТоварыСегмента Цикл

						Если СкидкаВСтрокеОграничена(ТоварСегмента, ПараметрыСкидки, Параметры) Тогда

							Продолжить;

						КонецЕсли; 

						КоличествоТовара = КоличествоТовара + 1;

					КонецЦикла;

					// - HVOYA 24.05.2017 11:34:42, Латышев А.А. 
					СуммаСкидки = Окр(((ЗначениеСкидкиНаценки / 100) * ЗначениеСуммы) / ?(КоличествоТовара = 0, 1, КоличествоТовара), 2);

					Для каждого ТоварСегмента Из ТоварыСегмента Цикл

						НоваяСтрока             = ТаблицаДанных.Добавить();
						НоваяСтрока.КлючСвязи   = ТоварСегмента.КлючСвязи;
						НоваяСтрока.Сегмент     = ПараметрыСкидки.СегментНоменклатурыПредоставления;
						НоваяСтрока.Действует   = НЕ СкидкаВСтрокеОграничена(ТоварСегмента, ПараметрыСкидки, Параметры);
						НоваяСтрока.Сумма       = СуммаСкидки;
						НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, СуммаСкидки, Параметры);

					КонецЦикла; 

				КонецЕсли; 

			КонецЦикла;

		КонецЕсли; 
		// - HVOYA 13.10.2016 16:13:43, Латышев А.А. 
		
		Если НЕ КратнаяАкция Тогда
		
			Для Каждого ТоварСегмента Из ТоварыСегмента Цикл
				
				НоваяСтрока           = ТаблицаДанных.Добавить();
				НоваяСтрока.КлючСвязи = ТоварСегмента.КлючСвязи;
				НоваяСтрока.Сегмент   = ПараметрыСкидки.СегментНоменклатурыПредоставления;
				НоваяСтрока.Действует = НЕ СкидкаВСтрокеОграничена(ТоварСегмента, ПараметрыСкидки, Параметры);
				
			//	Если скидка на данную строку не действует - пропускаем.
				Если СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("ОбластьОграничения", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке)).Количество() > 0 Тогда
					Если СтрокаДерева.ПараметрыУсловий.КодыСтрок.Найти(ТоварСегмента.КлючСвязи) = Неопределено Тогда
						НоваяСтрока.Действует = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Сумма = ПолучитьСуммуДляСкидки(ТоварСегмента.Сумма, ТоварСегмента.КлючСвязи, Параметры);
				
				ЗначениеСкидкиНаценки = ПараметрыСкидки.ЗначениеСкидкиНаценки;
				
				// Поиск значения скидки (наценки) для ценовой группы
				Для Каждого СтрокаТЧ Из СкидкиНаценкиПоЦеновымГруппам Цикл
					Если СтрокаТЧ.ЦеноваяГруппа = ТоварСегмента.ЦеноваяГруппа Тогда
						ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
					КонецЕсли;
				КонецЦикла;
				
				// + HVOYA 12.09.2016 16:13:25, Латышев А.А.
				СтрокиУсловия = СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("ОбластьОграничения", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке));
				Если СтрокиУсловия.Количество() > 0 Тогда
					НакапливаемоеЗначениеСуммы = 0;
					Для каждого Эл Из СтрокиУсловия Цикл
						Если Эл.ТипСравнения = Перечисления.ТипыСравненияЗначенийСкидокНаценок.Кратно Тогда
							ЗначениеСуммы = hiПосчитаемСуммуДляСкидки(ТоварСегмента, Эл.ЗначениеУсловияОграничения);
							НакапливаемоеЗначениеСуммы = НакапливаемоеЗначениеСуммы + ЗначениеСуммы;
						КонецЕсли; 
					КонецЦикла;
					Сумма = ?(НакапливаемоеЗначениеСуммы = 0, Сумма, НакапливаемоеЗначениеСуммы);
				КонецЕсли;
				// - HVOYA 12.09.2016 16:13:25, Латышев А.А. 
				
				СуммаСкидки = Окр((ЗначениеСкидкиНаценки / 100) * Сумма, 2);
				
				НоваяСтрока.Сумма = СуммаСкидки;
				
				НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);

			КонецЦикла;

		КонецЕсли;
		
	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.НоминалКупона Тогда

		СтрокиПолучатели = Параметры.СкидкиНаценкиПолучатели.НайтиСтроки(
			Новый Структура(
				"СкидкаНаценка"
				, ПараметрыСкидки.СкидкаНаценка)
		);

		Для каждого СтрокаПолучателя Из СтрокиПолучатели Цикл

			СтрокиПогашаемыхКупонов = Параметры.ПогашениеСкидочныхКупонов.НайтиСтроки(
				Новый Структура(
					"СкидочныйКупон"
					, СтрокаПолучателя.Получатель)
			);

			СуммаНоминаловКупонов = 0;

			Для каждого СтрокаКупона Из СтрокиПогашаемыхКупонов Цикл

				СуммаНоминаловКупонов = СуммаНоминаловКупонов + СтрокаКупона.НоминалКупона;

			КонецЦикла;

			Если СуммаНоминаловКупонов > 0 Тогда

				СуммаНоминаловПогасить = СуммаНоминаловКупонов;
				КолвоТоваровСегмента   = 0;	//	для мин.суммы в 1 коп (равную кол-ву товаров сегмента)
				СуммаТоваровСегмента   = 0;
				СкидкаТоваровСегмента  = 0;

				Для каждого ТоварСегмента Из ТоварыСегмента Цикл

					Если НЕ СкидкаВСтрокеОграничена(ТоварСегмента, ПараметрыСкидки, Параметры) Тогда

						КолвоТоваровСегмента = КолвоТоваровСегмента + 1;
						СуммаТоваровСегмента = СуммаТоваровСегмента + ТоварСегмента.Сумма;

					КонецЕсли; 

				КонецЦикла;

				Если СуммаТоваровСегмента > 0 Тогда

					СкидкаТоваровМаксимальная = ?(ПараметрыСкидки.ЗначениеСкидкиНаценки > 0
						, СуммаТоваровСегмента * ПараметрыСкидки.ЗначениеСкидкиНаценки / 100
						, СуммаТоваровСегмента);
				//	Допустимую к погашению сумму номиналов ограничим максимальной скидкой.
					СуммаНоминаловПогасить = Мин(СуммаНоминаловПогасить, СкидкаТоваровМаксимальная);
					СуммаНоминаловПогашено = 0;

					Для каждого ТоварСегмента Из ТоварыСегмента Цикл

						Если НЕ СкидкаВСтрокеОграничена(ТоварСегмента, ПараметрыСкидки, Параметры) Тогда

						//	в скобках выделим процент пропорционального "размазываения" номинала по строкам
							СкидкаПоСтроке = СуммаНоминаловПогасить * (ТоварСегмента.Сумма / СуммаТоваровСегмента);
							СкидкаПоСтроке = ?((СкидкаТоваровСегмента + СкидкаПоСтроке) > СкидкаТоваровМаксимальная
								, Макс(0, СкидкаТоваровМаксимальная - СкидкаТоваровСегмента)
								, СкидкаПоСтроке);

							Если СкидкаПоСтроке > 0 Тогда

								НоваяСтрока = ТаблицаДанных.Добавить();

								НоваяСтрока.Действует   = Истина;
								НоваяСтрока.КлючСвязи   = ТоварСегмента.КлючСвязи;
								НоваяСтрока.Сегмент     = ПараметрыСкидки.СегментНоменклатурыПредоставления;
								НоваяСтрока.Сумма       = СкидкаПоСтроке;
								НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);

								СуммаНоминаловПогашено  = СуммаНоминаловПогашено + СкидкаПоСтроке;
								СкидкаТоваровСегмента   = СкидкаТоваровСегмента + СкидкаПоСтроке;

							КонецЕсли;

						КонецЕсли; 

					КонецЦикла;

					Если СуммаНоминаловПогашено > 0 Тогда

						Для каждого СтрокаКупона Из СтрокиПогашаемыхКупонов Цикл

							СтрокаКупона.НоминалКупона = СтрокаКупона.НоминалКупона
								- (СуммаНоминаловПогашено * (СтрокаКупона.НоминалКупона / СуммаНоминаловКупонов));

						КонецЦикла;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма 
		ИЛИ ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыПредыдущейПокупки Тогда
		
		Если ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыПредыдущейПокупки Тогда

		//	% от предыдущей покупки - уже посчитанная отдельно сумма,
		//	которая распределяется так же, как и обычная суммовая скидка.
			СуммаСкидкиКРаспределению = СтрокаДерева.ЗначениеСкидкиНаценки;

		Иначе

			СуммаСкидкиКРаспределению = ПараметрыСкидки.ЗначениеСкидкиНаценки;

		КонецЕсли;
		
		Если ПараметрыСкидки.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе Тогда
			
		//	Расчет общей суммы товаров сегмента.
			ОбщаяСуммаТоваровСегмента = 0;

			Для Каждого ТоварСегмента Из ТоварыСегмента Цикл

				Если СкидкаВСтрокеОграничена(ТоварСегмента, ПараметрыСкидки, Параметры) Тогда

					Продолжить;

				КонецЕсли;

				Сумма = ПолучитьСуммуДляСкидки(ТоварСегмента.Сумма, ТоварСегмента.КлючСвязи, Параметры);	//	LNK 25.05.2021 15:24:02
				ОбщаяСуммаТоваровСегмента = ОбщаяСуммаТоваровСегмента + Сумма;

			КонецЦикла;
			
			СтрокаСкидкиДляРаспределении = Неопределено;
			МаксимальнаяСуммаВРаспределении = 0;

		//	Распределение скидки на товары сегмента.
			Для Каждого ТоварСегмента Из ТоварыСегмента Цикл

				Если СкидкаВСтрокеОграничена(ТоварСегмента, ПараметрыСкидки, Параметры) Тогда

					Продолжить;

				КонецЕсли; 

				НоваяСтрока           = ТаблицаДанных.Добавить();
				НоваяСтрока.КлючСвязи = ТоварСегмента.КлючСвязи;
				НоваяСтрока.Сегмент   = ПараметрыСкидки.СегментНоменклатурыПредоставления;
				НоваяСтрока.Действует = Истина;

				Сумма = ПолучитьСуммуДляСкидки(ТоварСегмента.Сумма, ТоварСегмента.КлючСвязи, Параметры);	//	LNK 25.05.2021 15:24:08

				Если Сумма > МаксимальнаяСуммаВРаспределении Тогда

					МаксимальнаяСуммаВРаспределении = Сумма;
					СтрокаСкидкиДляРаспределении = НоваяСтрока;

				КонецЕсли;

				Если НЕ ОбщаяСуммаТоваровСегмента = 0 Тогда

						НоваяСтрока.Сумма = Окр(Сумма * (СуммаСкидкиКРаспределению / ОбщаяСуммаТоваровСегмента), 2);

				Иначе	НоваяСтрока.Сумма = 0;

				КонецЕсли;

				СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению - НоваяСтрока.Сумма;
				ОбщаяСуммаТоваровСегмента = ОбщаяСуммаТоваровСегмента - Сумма;

				НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);
				
			КонецЦикла;

			Если СуммаСкидкиКРаспределению <> 0 И СтрокаСкидкиДляРаспределении <> Неопределено Тогда

				СтрокаСкидкиДляРаспределении.Сумма = СтрокаСкидкиДляРаспределении.Сумма + СуммаСкидкиКРаспределению;

			КонецЕсли;
			
		ИначеЕсли ПараметрыСкидки.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке Тогда
			
			Для Каждого ТоварСегмента Из ТоварыСегмента Цикл
				
				НоваяСтрока = ТаблицаДанных.Добавить();
				
				Если СтрокаДерева.ПараметрыУсловий.КодыСтрок.Найти(ТоварСегмента.КлючСвязи) <> Неопределено Тогда

					НоваяСтрока.Действует = НЕ СкидкаВСтрокеОграничена(ТоварСегмента, ПараметрыСкидки, Параметры);

				КонецЕсли;

				НоваяСтрока.КлючСвязи = ТоварСегмента.КлючСвязи;
				НоваяСтрока.Сегмент   = ПараметрыСкидки.СегментНоменклатурыПредоставления;

				СтрокиУсловия = СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(
					Новый Структура(
						"ОбластьОграничения"
						, Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке
					)
				);	// + HVOYA 12.09.2016 16:13:25, Латышев А.А.

				Если СтрокиУсловия.Количество() > 0 Тогда

					НакапливаемоеЗначениеСуммы = 0;

					Для каждого СтрокаТаблицы Из СтрокиУсловия Цикл

						Если СтрокаТаблицы.ТипСравнения = Перечисления.ТипыСравненияЗначенийСкидокНаценок.Кратно Тогда

							ЗначениеСуммы = ПолучитьСуммуДляСкидки(hiПосчитаемСуммуДляСкидки(ТоварСегмента, СтрокаТаблицы.ЗначениеУсловияОграничения), ТоварСегмента.КлючСвязи, Параметры);
							НакапливаемоеЗначениеСуммы = НакапливаемоеЗначениеСуммы + ЗначениеСуммы;

						КонецЕсли; 

					КонецЦикла;

					СуммаСкидкиКРаспределению = ?(НакапливаемоеЗначениеСуммы = 0, СуммаСкидкиКРаспределению, НакапливаемоеЗначениеСуммы);

				КонецЕсли;	// - HVOYA 12.09.2016 16:13:25, Латышев А.А.

				НоваяСтрока.Сумма       = СуммаСкидкиКРаспределению;
				НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦены Тогда
		
		Для Каждого ТоварСегмента Из ТоварыСегмента Цикл
			
			НоваяСтрока           = ТаблицаДанных.Добавить();
			НоваяСтрока.КлючСвязи = ТоварСегмента.КлючСвязи;
			НоваяСтрока.Сегмент   = ПараметрыСкидки.СегментНоменклатурыПредоставления;
			// + HVOYA 22.09.2016 11:32:24, Латышев А.А.
			//НоваяСтрока.Действует = Истина;
			НоваяСтрока.Действует = НЕ СкидкаВСтрокеОграничена(ТоварСегмента, ПараметрыСкидки, Параметры);
			// - HVOYA 22.09.2016 11:32:24, Латышев А.А. 
			
			// Если скидка на данную строку не действует - пропускаем.
			Если ПараметрыСкидки.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке Тогда

				Если СтрокаДерева.ПараметрыУсловий.КодыСтрок.Найти(ТоварСегмента.КлючСвязи) = Неопределено Тогда

					НоваяСтрока.Действует = Ложь;

				КонецЕсли;

			КонецЕсли;
			
		//	Расчет суммы скидки.
			Сумма = ПолучитьСуммуДляСкидки(ТоварСегмента.Сумма, ТоварСегмента.КлючСвязи, Параметры);

			ЦенаЗаУпаковку = ПолучитьЦенуНоменклатурыПоВидуЦен(ТоварСегмента, Параметры, ПараметрыСкидки);

			Если ЦенаЗаУпаковку <> 0 Тогда

					СуммаСкидки = Сумма - Окр(ТоварСегмента.КоличествоУпаковок * ЦенаЗаУпаковку, 2); // Округление?

			Иначе	СуммаСкидки = 0;

			КонецЕсли;

			НоваяСтрока.Сумма = СуммаСкидки;
			
			НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);
			
		КонецЦикла;
		
	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Подарок Тогда

		Если ПараметрыСкидки.ПодарокИзКорзиныПокупателя Тогда
				
			ЦенаПодарка = Макс(Параметры.ЦенаПродажиМинимальная, ПараметрыСкидки.ЦенаПодарка);
			
			Если ПараметрыСкидки.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе И НЕ ТоварыСегмента.Количество() = 0 Тогда

				КоличествоПодарков = КоличествоПодарковИзКорзиныПокупателя(СтрокаДерева, ПараметрыСкидки, ТоварыСегмента);

				ТаблицаРаспределить = Новый ТаблицаЗначений;	//	LNK 26.08.2021 10:46:04 - новая схема! поле "ПодарокПозиция"
				ТаблицаРаспределить.Колонки.Добавить("Подарок"			 , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
				ТаблицаРаспределить.Колонки.Добавить("СуммаСкидки"		 , Новый ОписаниеТипов("Число"));
				ТаблицаРаспределить.Колонки.Добавить("СуммаКонтроль"	 , Новый ОписаниеТипов("Число"));
				ТаблицаРаспределить.Колонки.Добавить("Количество"		 , Новый ОписаниеТипов("Число"));
				ТаблицаРаспределить.Колонки.Добавить("КоличествоКонтроль", Новый ОписаниеТипов("Число"));
				
			//	Расчет общей суммы товаров сегмента.
				ОбщаяСуммаСегмента = 0;

				Для Каждого ТоварСегмента Из ТоварыСегмента Цикл

					Если НЕ ЦенаАкционная(ТоварСегмента.АкционнаяЦена, ПараметрыСкидки.НачислятьНаАкционныеТовары) Тогда
						
						Если НЕ КоличествоПодарков = 0 Тогда

						//	"ТаблицаРаспределить.Итог("СуммаСкидки")" содержит сумму, которую требуется распределить на суммы
						//	товаров из сегмента предоставления.

							КоличествоПодарковСтроки = Мин(КоличествоПодарков, ТоварСегмента.КоличествоУпаковок);

							Если НЕ КоличествоПодарковСтроки = 0 Тогда

								СтрокаРаспределить = ТаблицаРаспределить.Добавить();
								СтрокаРаспределить.Подарок			  = ТоварСегмента.Номенклатура;
								СтрокаРаспределить.СуммаСкидки		  = Макс(0, КоличествоПодарковСтроки * ТоварСегмента.ЦенаЗаУпаковку - ЦенаПодарка * КоличествоПодарковСтроки);
								СтрокаРаспределить.СуммаКонтроль	  = СтрокаРаспределить.СуммаСкидки;
								СтрокаРаспределить.Количество		  = КоличествоПодарковСтроки;
								СтрокаРаспределить.КоличествоКонтроль = КоличествоПодарковСтроки;

								КоличествоПодарков = КоличествоПодарков - КоличествоПодарковСтроки;

							КонецЕсли;

						КонецЕсли;

						ОбщаяСуммаСегмента = ОбщаяСуммаСегмента + ПолучитьСуммуДляСкидки(ТоварСегмента.Сумма, ТоварСегмента.КлючСвязи, Параметры);

					КонецЕсли;

				КонецЦикла;

				Если НЕ (ОбщаяСуммаСегмента = 0 ИЛИ ТаблицаРаспределить.Итог("СуммаСкидки") = 0) Тогда

				//	РАСПРЕДЕЛЕНИЕ СУММЫ ПОДАРКА НА ТОВАРЫ СЕГМЕНТА!
				//	---------------------------------------------------------------------------------------

					Для Каждого ТоварСегмента Из ТоварыСегмента Цикл

						СтрокаТаблицыДанных = Неопределено;

						Если ТоварСегмента.Сумма > ЦенаПодарка
						И НЕ ЦенаАкционная(ТоварСегмента.АкционнаяЦена, ПараметрыСкидки.НачислятьНаАкционныеТовары) Тогда	//	ограничим сумму не ниже цены подарка.

							Коэффициент = ТоварСегмента.Сумма / ОбщаяСуммаСегмента;	//	для облегчения отладки в отдельную переменную.

							Для каждого СтрокаРаспределить Из ТаблицаРаспределить Цикл

								Если НЕ СтрокаРаспределить.СуммаСкидки > 0 Тогда

									Продолжить;

								КонецЕсли;

								СуммаЧасть		= Мин(Окр(СтрокаРаспределить.СуммаСкидки * Коэффициент + 0.005, 2), СтрокаРаспределить.СуммаКонтроль);
								КоличествоЧасть = Мин(Окр(СтрокаРаспределить.Количество * Коэффициент + 0.0005, 3), СтрокаРаспределить.КоличествоКонтроль);

								Если СуммаЧасть > 0 Тогда

									Если СтрокаТаблицыДанных = Неопределено Тогда

									//	Одна строка для значения "КлючСвязи"!
									//	Все данные распределения - в расшифровке.
										СтрокаТаблицыДанных				= ТаблицаДанных.Добавить();
										СтрокаТаблицыДанных.КлючСвязи	= ТоварСегмента.КлючСвязи;
										СтрокаТаблицыДанных.Сегмент		= ПараметрыСкидки.СегментНоменклатурыПредоставления;
										СтрокаТаблицыДанных.Действует	= Истина;
										СтрокаТаблицыДанных.Сумма		= 0;
										СтрокаТаблицыДанных.Расшифровка	= Параметры.ПустаяТаблицаРасшифровка.СкопироватьКолонки();

									КонецЕсли;

									СтрокаТаблицыДанных.Сумма = СтрокаТаблицыДанных.Сумма + СуммаЧасть;
									ПолучитьРасшифровкуСкидки(СтрокаДерева, СуммаЧасть, Параметры, СтрокаТаблицыДанных.Расшифровка);

									СтрокаРасшифровки = СтрокаТаблицыДанных.Расшифровка[СтрокаТаблицыДанных.Расшифровка.Количество() - 1];
									СтрокаРасшифровки.ПодарокПозиция	= СтрокаРаспределить.Подарок;
									СтрокаРасшифровки.ПодарокКоличество = КоличествоЧасть;

									СтрокаРаспределить.СуммаКонтроль	  = СтрокаРаспределить.СуммаКонтроль - СуммаЧасть;
									СтрокаРаспределить.КоличествоКонтроль = СтрокаРаспределить.КоличествоКонтроль - КоличествоЧасть;

								КонецЕсли;

							КонецЦикла;

						КонецЕсли;

					КонецЦикла;

				КонецЕсли; 

				Буффер = 0;	//	стока для стопа в отладке

			ИначеЕсли ПараметрыСкидки.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке И НЕ ТоварыСегмента.Количество() = 0 Тогда

				Для Каждого ТоварСегмента Из ТоварыСегмента Цикл

					СуммаСкидкиКРаспределению = Мин(ТоварСегмента.КоличествоУпаковок, ПараметрыСкидки.КоличествоПодарковИзКорзиныПокупателя) * ТоварСегмента.ЦенаЗаУпаковку;

					НоваяСтрока = ТаблицаДанных.Добавить();

					Если СтрокаДерева.ПараметрыУсловий.КодыСтрок.Найти(ТоварСегмента.КлючСвязи) <> Неопределено Тогда

						НоваяСтрока.Действует = Истина;

					КонецЕсли;

					НоваяСтрока.КлючСвязи   = ТоварСегмента.КлючСвязи;
					НоваяСтрока.Сегмент   	= ПараметрыСкидки.СегментНоменклатурыПредоставления;
					НоваяСтрока.Сумма       = СуммаСкидкиКРаспределению;
					НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);

				КонецЦикла;
				
			КонецЕсли;

		Иначе

			Для каждого СтрокаСкидкиНаценкиНаборыПодарков Из СкидкиНаценкиНаборыПодарков Цикл

				Если СтрокаСкидкиНаценкиНаборыПодарков.КоличествоУпаковок > 0 Тогда

					СтрокаТаблицыПодарков = ТаблицаПодарков.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПодарков, СтрокаСкидкиНаценкиНаборыПодарков);

				КонецЕсли;

			КонецЦикла;

			НоваяСтрока = ТаблицаДанных.Добавить();
			НоваяСтрока.КлючСвязи   = 0;
			НоваяСтрока.Сегмент     = ПараметрыСкидки.СегментНоменклатурыПредоставления;
			НоваяСтрока.Действует   = Истина;
			НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);

		КонецЕсли;

	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ПакетКупоновКратныйСумме Тогда

	//	LNK 27.08.2020 09:05:54
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.КлючСвязи = 0;
		НоваяСтрока.Сегмент   = ПараметрыСкидки.СегментНоменклатурыПредоставления;
		НоваяСтрока.Сумма     = 0;
		НоваяСтрока.Действует = Истина;
		НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);

	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.БесплатнаяДоставка Тогда

	//	Распределение скидки на товары сегмента.
	//	На текущий момент не вижу разницы между "ВДокументе" и "ВСтроке"
		Для Каждого ТоварСегмента Из ТоварыСегмента Цикл

			Если СкидкаВСтрокеОграничена(ТоварСегмента, ПараметрыСкидки, Параметры) Тогда

				Продолжить;

			КонецЕсли; 

			НоваяСтрока           = ТаблицаДанных.Добавить();
			НоваяСтрока.КлючСвязи = ТоварСегмента.КлючСвязи;
			НоваяСтрока.Сегмент   = ПараметрыСкидки.СегментНоменклатурыПредоставления;
			НоваяСтрока.Действует = Истина;
			НоваяСтрока.Сумма = 0;
			НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);

		КонецЦикла;

	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение Тогда

		НоваяСтрока = ТаблицаДанных.Добавить();
		
		Если ПараметрыСкидки.ПечататьСерийныйНомер = Истина Тогда

				НоваяСтрока.КлючСвязи = 1;

		Иначе	НоваяСтрока.КлючСвязи = 0;

		КонецЕсли;

		НоваяСтрока.Сегмент   = ПараметрыСкидки.СегментНоменклатурыПредоставления;
		НоваяСтрока.Действует = Истина;
		НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);

	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ДиапазонПроцентов Тогда	// + HVOYA 13.09.2016 17:15:51, Латышев А.А.
		
		КоличествоВыполненыхУсловий = СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("Выполнено", Истина)).Количество();

		Если КоличествоВыполненыхУсловий >= 2 Тогда

				СтрокаДерева.ПараметрыУсловий.УсловияВыполнены = Истина;

		Иначе	Возврат;

		КонецЕсли;

		Для Каждого ТоварСегмента Из ТоварыСегмента Цикл

			НоваяСтрока           = ТаблицаДанных.Добавить();
			НоваяСтрока.КлючСвязи = ТоварСегмента.КлючСвязи;
			НоваяСтрока.Сегмент   = ПараметрыСкидки.СегментНоменклатурыПредоставления;
			// + HVOYA 22.09.2016 11:32:24, Латышев А.А.
			//НоваяСтрока.Действует = Истина;
			НоваяСтрока.Действует = НЕ СкидкаВСтрокеОграничена(ТоварСегмента, ПараметрыСкидки, Параметры);
			// - HVOYA 22.09.2016 11:32:24, Латышев А.А. 
			
			Сумма = ТоварСегмента.Сумма;
			
			МассивЗначенийСкидок = СтрокаДерева.СкидкаНаценка.ДиапазонПроцентов.НайтиСтроки(Новый Структура("КоличествоСегментов", КоличествоВыполненыхУсловий));
			
			ЗначениеСкидкиНаценки = МассивЗначенийСкидок[0].Процент;
			
			СуммаСкидки = Окр((ЗначениеСкидкиНаценки / 100) * Сумма, 2);
			
			НоваяСтрока.Сумма = СуммаСкидки;
			
			НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);
			
		КонецЦикла;
	// - HVOYA 13.09.2016 17:15:51, Латышев А.А. 
	// + HVOYA 07.04.2017 17:15:51, Латышев А.А.
	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.КомплекснаяПокупка Тогда

		ТоварыСегмента = hiСортировкаПузырьком(ТоварыСегмента);
		Ном = 0;

		Пока Ном <= ТоварыСегмента.Количество()-1 Цикл

			Если СкидкаВСтрокеОграничена(ТоварыСегмента[Ном], ПараметрыСкидки, Параметры) Тогда

				ТоварыСегмента.Удалить(Ном);
				Продолжить;

			КонецЕсли;

			Ном = Ном+1;

		КонецЦикла; 
		
		Для Сч = 0 По ТоварыСегмента.Количество()-1 Цикл

			НоваяСтрока           = ТаблицаДанных.Добавить();
			НоваяСтрока.КлючСвязи = ТоварыСегмента[Сч].КлючСвязи;
			НоваяСтрока.Сегмент   = ПараметрыСкидки.СегментНоменклатурыПредоставления;
			НоваяСтрока.Действует = Истина;

			Сумма = ТоварыСегмента[Сч].Сумма;

			Попытка

				ЗначениеСкидкиНаценки = СтрокаДерева.СкидкаНаценка.КомплекснаяПокупка[Сч].Процент;

			Исключение

				ЗначениеСкидкиНаценки = СтрокаДерева.СкидкаНаценка.КомплекснаяПокупка[СтрокаДерева.СкидкаНаценка.КомплекснаяПокупка.Количество()-1].Процент;

			КонецПопытки; 

			Если ЗначениеСкидкиНаценки = 0 Тогда

				НоваяСтрока.Действует = Ложь;

			КонецЕсли; 

			СуммаСкидки = Окр((ЗначениеСкидкиНаценки / 100) * Сумма, 2);

			НоваяСтрока.Сумма = СуммаСкидки;

			НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);

		КонецЦикла; 
	// - HVOYA 07.04.2017 17:15:51, Латышев А.А. 

	КонецЕсли;

	//Сичкаренко 10.12.2020
	Если Параметры.ИспользоватьПрограммуЛояльности	Тогда

		ЕстьЛояльностьСотрудников = ЗначениеЗаполнено(СтрокаДерева.ПрограммаЛояльности)
			И СтрокаДерева.ТипПрограммыЛояльности = Перечисления.ТипыПрограммЛояльности.Сотрудники;

		Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
			ЕстьЛояльность = Ложь;
			Если СтрокаТаблицыДанных.Действует Тогда 
				Для Каждого СтрокаРасшифровки Из СтрокаТаблицыДанных.Расшифровка Цикл 
					Если ТипЗнч(СтрокаРасшифровки.СкидкаНаценка) = Тип("СправочникСсылка.СкидкиНаценки") Тогда

						Если ЕстьЛояльностьСотрудников Тогда	//	LNK 29.01.2021 07:46:14
					//	Если ЗначениеЗаполнено(СтрокаРасшифровки.СкидкаНаценка.ПрограммаЛояльности) Тогда
							ЕстьЛояльность = Истина;
							//2025-07-07 sa Если ВДРУГ накоплено больше чем МаксимальнаяСуммаНакопленияЛояльности То получаем беду.
							Если Параметры.МаксимальнаяСуммаНакопленияЛояльности < Параметры.Накопленно Тогда
								МожноСписать = Параметры.МаксимальнаяСуммаНакопленияЛояльности ;	
							Иначе
								МожноСписать = Параметры.МаксимальнаяСуммаНакопленияЛояльности - Параметры.Накопленно;
							КонецЕсли;
							Если СтрокаРасшифровки.Сумма >= МожноСписать Тогда
								СтрокаРасшифровки.Сумма = МожноСписать;
								Параметры.Накопленно = Параметры.МаксимальнаяСуммаНакопленияЛояльности;
							Иначе
								Параметры.Накопленно = Параметры.Накопленно + СтрокаРасшифровки.Сумма;
							КонецЕсли;
							СуммаРасшифровки = СтрокаРасшифровки.Сумма;
							Прервать;
						Иначе 
							СтрокаРасшифровки.Сумма	  = 0;
							СтрокаТаблицыДанных.Сумма = 0;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Если ЕстьЛояльность Тогда
					СтрокаТаблицыДанных.Сумма = СуммаРасшифровки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	СтрокаДерева.ТаблицаДанных   = ТаблицаДанных;
	СтрокаДерева.ТаблицаПодарков = ТаблицаПодарков;
	
КонецПроцедуры

// Процедура рекурсивно обходит дерево и производит расчет
// скидок снизу-вверх: от подчиненного элемента дерева к родителю.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидкиРекурсивно(ДеревоСкидок, Параметры)

	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл

		Если СтрокаДерева.Родитель = Неопределено Тогда

		//	это самый верхний уровень!
			СтрокаДерева.ТаблицаТоваров = Параметры.ТоварыПоСегментам.Скопировать();
			СтрокаДерева.ТаблицаТоваров.Колонки.Добавить("СуммаСкидки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

		Иначе

			СтрокаДерева.ТаблицаТоваров = СтрокаДерева.Родитель.ТаблицаТоваров.Скопировать();

		КонецЕсли;

		Если СтрокаДерева.ЭтоГруппа Тогда

			РассчитатьСкидкиРекурсивно(СтрокаДерева, Параметры);

		//	Скидки по подчиненным элементам рассчитаны.
		//	Рассчитываем скидки по группе совместного применения (родителю).
			РассчитатьСкидкиПоГруппеСовместногоПрименения(СтрокаДерева, Параметры);

			Если СтрокаДерева.Родитель <> Неопределено
				И СтрокаДерева.Родитель.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение Тогда

			//	Нужно уменьшить суммы в таблице товаров в строке родителя на сумму текущей скидки
			//	т.к. последовательное применение групп также предполагает, что все последующие скидки
			//	будут рассчитываться от суммы с учетом уже предоставленных скидок данной группы
				Для Каждого СтрокаТовараРодителя Из СтрокаДерева.Родитель.ТаблицаТоваров Цикл

					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("КлючСвязи", СтрокаТовараРодителя.КлючСвязи);
					СтруктураПоиска.Вставить("Действует", Истина);

					СтрокиРассчитанныхСкидок = СтрокаДерева.ТаблицаДанных.НайтиСтроки(СтруктураПоиска);

					Для Каждого НайденнаяСтрока Из СтрокиРассчитанныхСкидок Цикл

						СтрокаТовараРодителя.Сумма = СтрокаТовараРодителя.Сумма - НайденнаяСтрока.Сумма;
						СтрокаТовараРодителя.СуммаСкидки = СтрокаТовараРодителя.СуммаСкидки + НайденнаяСтрока.Сумма;

					КонецЦикла;

				КонецЦикла;

			КонецЕсли;

		Иначе

			РассчитатьСкидку(СтрокаДерева, Параметры);

			Если СтрокаДерева.Родитель <> Неопределено
				И СтрокаДерева.Родитель.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение Тогда

			//	Нужно уменьшить суммы в таблице товаров в строке родителя на сумму текущей скидки
			//	т.к. последовательное применение предполагает, что все последующие скидки
			//	будут рассчитываться от суммы с учетом уже предоставленных скидок данной группы
				Для Каждого СтрокаТовараРодителя Из СтрокаДерева.Родитель.ТаблицаТоваров Цикл

					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("КлючСвязи", СтрокаТовараРодителя.КлючСвязи);
					СтруктураПоиска.Вставить("Действует", Истина);

					СтрокиРассчитанныхСкидок = СтрокаДерева.ТаблицаДанных.НайтиСтроки(СтруктураПоиска);

					Для Каждого НайденнаяСтрока Из СтрокиРассчитанныхСкидок Цикл

						СтрокаТовараРодителя.Сумма = СтрокаТовараРодителя.Сумма - НайденнаяСтрока.Сумма;
						СтрокаТовараРодителя.СуммаСкидки = СтрокаТовараРодителя.СуммаСкидки + НайденнаяСтрока.Сумма;

					КонецЦикла;

				КонецЦикла;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Функция производит полный расчет скидок в дереве.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица с рассчитанными скидками.
//
Функция РассчитатьДеревоСкидок(ДеревоСкидок, Параметры)
	
	ВозвращаемыеДанные = Новый Структура;
	
	РассчитатьСкидкиРекурсивно(ДеревоСкидок, Параметры);
	
//	На верхнем уровне всегда берем максимум...
	ТаблицаДанных = РассчитатьСкидкиПоГруппеСовместногоПримененияМаксимумВерхнийУровень(ДеревоСкидок, Параметры);

	ПроверитьМинимальныеЦеныПослеРасчетаСкидок(ТаблицаДанных, ДеревоСкидок, Параметры);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("КлючСвязи"					, Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("СкидкаНаценка"				, Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
	ТЗ.Колонки.Добавить("СпособПредоставления"		, Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПредоставленияСкидокНаценок"));
	ТЗ.Колонки.Добавить("СпособПримененияСкидки"	, Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПримененияСкидокНаценок"));
	ТЗ.Колонки.Добавить("Сумма"						, Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("ЗначениеСкидкиНаценки"		, Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("ОграниченаМинимальнойЦеной", Новый ОписаниеТипов("Булево"));
	ТЗ.Колонки.Добавить("ЦенаПодарка"				, Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("ПодарокПозиция"			, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));	//	LNK 07.09.2021 12:10:36
	ТЗ.Колонки.Добавить("ПодарокКоличество"			, Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("ИсключаетБонусныеБаллы"	, Новый ОписаниеТипов("Булево"));	//	LNK 29.10.2021 09:16:01

	ТаблицаПодарков		 = ПолучитьПустуюТаблицуПодарков();
	ТаблицаСообщений	 = ПолучитьПустуюТаблицуСообщений();
	ТаблицаПакетаКупонов = ПолучитьПустуюТаблицуПакетаКупонов();
	ТаблицаТовары		 = Параметры.ТоварыПоСегментам.Скопировать();
	ТаблицаТовары.Свернуть("Номенклатура");

	Для Каждого СтрокаТаблицы ИЗ ТаблицаДанных Цикл

		Если НЕ СтрокаТаблицы.КлючСвязи = 0  Тогда

			Для Каждого СтрокаСкидкиНаценки Из СтрокаТаблицы.Расшифровка Цикл

				НоваяСтрока								= ТЗ.Добавить();
				НоваяСтрока.КлючСвязи					= СтрокаТаблицы.КлючСвязи;
				НоваяСтрока.СкидкаНаценка				= СтрокаСкидкиНаценки.СкидкаНаценка;
				НоваяСтрока.Сумма						= СтрокаСкидкиНаценки.Сумма;
				НоваяСтрока.ОграниченаМинимальнойЦеной	= СтрокаСкидкиНаценки.ОграниченаМинимальнойЦеной;
				НоваяСтрока.ПодарокПозиция				= СтрокаСкидкиНаценки.ПодарокПозиция;
				НоваяСтрока.ПодарокКоличество			= СтрокаСкидкиНаценки.ПодарокКоличество;

				РеквизитыСкидки = Параметры.СкидкиНаценки.Найти(СтрокаСкидкиНаценки.СкидкаНаценка, "СкидкаНаценка");

				Если НЕ РеквизитыСкидки = Неопределено Тогда

					НоваяСтрока.СпособПредоставления   = РеквизитыСкидки.СпособПредоставления;
					НоваяСтрока.СпособПримененияСкидки = РеквизитыСкидки.СпособПримененияСкидки;
					НоваяСтрока.ИсключаетБонусныеБаллы = РеквизитыСкидки.ИсключаетБонусныеБаллы;
					НоваяСтрока.ЦенаПодарка			   = РеквизитыСкидки.ЦенаПодарка;

				КонецЕсли;

			КонецЦикла;

		Иначе

			Для Каждого СтрокаСкидкиНаценки Из СтрокаТаблицы.Расшифровка Цикл

				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("СкидкаНаценка", СтрокаСкидкиНаценки.СкидкаНаценка);
				
				СтрокиСкидкиНаценкиНаборыПодарков = Параметры.СкидкиНаценкиНаборыПодарков.НайтиСтроки(СтруктураПоиска);
				
				Для каждого СтрокаНаборыПодарков Из СтрокиСкидкиНаценкиНаборыПодарков Цикл
					
					Если (НЕ Параметры.КонтролироватьОстаткиТоваров)
						ИЛИ СтрокаНаборыПодарков.ПодарокИзСписка
						ИЛИ СтрокаНаборыПодарков.КоличествоУпаковок > 0 Тогда

						СтрокаТаблицыПодарков = ТаблицаПодарков.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицыПодарков, СтрокаНаборыПодарков);

						Для каждого СтрокаУсловия Из СтрокаСкидкиНаценки.ТаблицаУсловий Цикл

							СтрокиСегмента = Параметры.ТоварыПоСегментам.Скопировать(Новый Структура("СегментНоменклатуры", СтрокаУсловия.СегментНоменклатурыОграничения), "Номенклатура");

							Для каждого СтрокаСегмента Из СтрокиСегмента Цикл

								СтрокаТаблицыПодарков.НоменклатураУсловий.Вставить(СтрокаСегмента.Номенклатура, Истина);

							КонецЦикла;

						КонецЦикла;

					ИначеЕсли СтрокаНаборыПодарков.КоличествоУпаковокНеобходимо > 0 Тогда

						СтрокаТаблицыОтсутствующихПодарков = Параметры.ТаблицаОтсутствующихПодарков.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицыОтсутствующихПодарков, СтрокаНаборыПодарков);

					КонецЕсли;
					
				КонецЦикла;
				
				СтрокиСкидкиНаценкиСообщения = Параметры.СкидкиНаценкиСообщения.НайтиСтроки(СтруктураПоиска);
				
				Для каждого СтрокаСообщение Из СтрокиСкидкиНаценкиСообщения Цикл

					Если СтрокаСообщение.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ПакетКупоновКратныйСумме Тогда

					//		LNK 27.08.2020 11:06:59
							ДобавитьСообщение = ТаблицаСообщений.Найти(СтрокаСообщение.СпособПредоставления, "СпособПредоставления") = Неопределено;

					Иначе	ДобавитьСообщение = Истина;

					КонецЕсли;
					
					Если ДобавитьСообщение Тогда

						СтрокаТаблицыСообщений = ТаблицаСообщений.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицыСообщений, СтрокаСообщение);

						Если СтрокаСообщение.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ПакетКупоновКратныйСумме Тогда

							СтрокиСкидкиНаценки = Параметры.СкидкиНаценки.НайтиСтроки(СтруктураПоиска);

							Если НЕ СтрокиСкидкиНаценки.Количество() = 0 Тогда

								НоваяСтрока								= ТЗ.Добавить();
								НоваяСтрока.КлючСвязи					= СтрокаТаблицы.КлючСвязи;
								НоваяСтрока.СкидкаНаценка				= СтрокаСкидкиНаценки.СкидкаНаценка;
								НоваяСтрока.Сумма						= СтрокаСкидкиНаценки.Сумма;
								НоваяСтрока.ОграниченаМинимальнойЦеной	= СтрокаСкидкиНаценки.ОграниченаМинимальнойЦеной;
								НоваяСтрока.СпособПредоставления		= СтрокаСообщение.СпособПредоставления;
								НоваяСтрока.СпособПримененияСкидки		= СтрокиСкидкиНаценки[0].СпособПримененияСкидки;
								НоваяСтрока.ЗначениеСкидкиНаценки		= СтрокиСкидкиНаценки[0].ЗначениеСкидкиНаценки;
								НоваяСтрока.ИсключаетБонусныеБаллы		= СтрокиСкидкиНаценки[0].ИсключаетБонусныеБаллы;
								НоваяСтрока.ЦенаПодарка					= СтрокиСкидкиНаценки[0].ЦенаПодарка;

								ЗаполнитьТаблицуПакетаКупонов(СтрокаСкидкиНаценки, ТаблицаПакетаКупонов, Параметры, ТаблицаТовары, СтрокиСкидкиНаценки[0].СегментНоменклатурыПредоставления);

							КонецЕсли;

						КонецЕсли;

					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	Для Каждого ДанныеОбОтсутствии ИЗ Параметры.ТаблицаОтсутствующихПодарков Цикл

		СтрокаТаблицыСообщений = ТаблицаСообщений.Добавить();

		ПредставлениеНоменклатуры = ОбщегоНазначенияРТ.ПолучитьПредставлениеНоменклатуры(ДанныеОбОтсутствии.Номенклатура, ДанныеОбОтсутствии.Характеристика);

		Если ЗначениеЗаполнено(ДанныеОбОтсутствии.Упаковка) Тогда

			УпаковкаПодарка = ДанныеОбОтсутствии.Упаковка;

		Иначе

			УпаковкаПодарка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбОтсутствии.Номенклатура, "ЕдиницаИзмерения");

		КонецЕсли;

		СтрокаСообщенияОбОтсутствии = НСтр("ru = 'Невозможно выдать подарок ""%1"" в количестве %2 %3. Превышен остаток на складе.'");
		СтрокаСообщенияОбОтсутствии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			СтрокаСообщенияОбОтсутствии,
			ДанныеОбОтсутствии.Номенклатура,
			ДанныеОбОтсутствии.КоличествоУпаковокНеобходимо,
			УпаковкаПодарка
		);
		СтрокаТаблицыСообщений.ТекстСообщения = СтрокаСообщенияОбОтсутствии;

	КонецЦикла;

	ТЗ.Свернуть(
		  "КлючСвязи, СкидкаНаценка, СпособПредоставления, СпособПримененияСкидки, ЗначениеСкидкиНаценки, ОграниченаМинимальнойЦеной, ПодарокПозиция, ЦенаПодарка, ИсключаетБонусныеБаллы"
		, "Сумма, ПодарокКоличество"
	);

	ВозвращаемыеДанные.Вставить("ДеревоСкидок"        , ДеревоСкидок);
	ВозвращаемыеДанные.Вставить("ТаблицаСкидкиНаценки", ТЗ);
	ВозвращаемыеДанные.Вставить("ТаблицаПодарков"     , ТаблицаПодарков);
	ВозвращаемыеДанные.Вставить("ТаблицаСообщений"    , ТаблицаСообщений);
	ВозвращаемыеДанные.Вставить("ТаблицаПакетаКупонов", ТаблицаПакетаКупонов);
	
	Возврат ВозвращаемыеДанные;
	
КонецФункции

//	LNK 31.08.2020 12:37:42
Процедура ЗаполнитьТаблицуПакетаКупонов(СтрокаСкидкиНаценки, ТаблицаПакетаКупонов, Параметры, ТаблицаТовары, СегментНоменклатурыПредоставления)

	Для каждого СтрокаТовары Из ТаблицаТовары Цикл	//	имеем уникальные строки

		СтрокаПакета = ТаблицаПакетаКупонов.Добавить();
		СтрокаПакета.СкидкаНаценка = СтрокаСкидкиНаценки.СкидкаНаценка;
		СтрокаПакета.Номенклатура  = СтрокаТовары.Номенклатура;

		Если СегментНоменклатурыПредоставления.Пустая() Тогда

			Принять = Истина;	//	безусловно.. 

		Иначе

			КлючиОтбора = Новый Структура(
				"Номенклатура, СегментНоменклатуры"
				, СтрокаПакета.Номенклатура
				, СегментНоменклатурыПредоставления
			);
			Принять = НЕ Параметры.ТоварыПоСегментам.НайтиСтроки(КлючиОтбора).Количество() = 0;

		КонецЕсли;

		Если Принять Тогда

		//	Определим максимальную кратность, если товар входит в разные сегменты.
			СтрокаПакета.Кратность = 1;
			СтрокиШкалыКратностей  = Параметры.СкидкиНаценкиШкалаКратностей.НайтиСтроки(Новый Структура("СкидкаНаценка", СтрокаПакета.СкидкаНаценка));

			Для каждого СтрокаШкалы Из СтрокиШкалыКратностей Цикл

				КлючиОтбора = Новый Структура(
					"Номенклатура, СегментНоменклатуры"
					, СтрокаПакета.Номенклатура
					, СтрокаШкалы.СегментНоменклатуры
				);

				Если НЕ Параметры.ТоварыПоСегментам.НайтиСтроки(КлючиОтбора).Количество() = 0 Тогда

				//	Текущая номенклатура относится к сегменту, указанному в шкале кратностей.

					Если СтрокаШкалы.Кратность > СтрокаПакета.Кратность Тогда

						СтрокаПакета.Кратность = Мин(СтрокаШкалы.Кратность, 10);
						СтрокаПакета.СегментНоменклатуры = СтрокаШкалы.СегментНоменклатуры;

					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьСуммуДляСкидки(СуммаБазовая, КлючСвязи, Параметры)

	Если Параметры.СпособПримененияСкидки = Перечисления.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы Тогда

		СуммаДляСкидки = 0;
		СтрокаТовары   = Параметры.БазаРасчета.Товары.Найти(КлючСвязи, "КлючСвязи");

		Если НЕ СтрокаТовары = Неопределено Тогда

		//	LNK 19.01.2022 12:00:59 - "СуммаБонусныхБалловСписано"
			СуммаДляСкидки = Макс(0, СтрокаТовары.Сумма - СтрокаТовары.СуммаБонусныхБалловСписано);

		КонецЕсли;

	Иначе

		СуммаДляСкидки = СуммаБазовая;

	КонецЕсли;

	Возврат СуммаДляСкидки;

КонецФункции

#КонецОбласти

#Область ПроцедурыПроверкиУсловийСкидокНаценок

// Функция выполняет проверку выполнения условий скидок.
//
Функция ПроверитьУсловия(СтрокаДерева, ВыполненныеУсловия)
	
	СтрокаДерева.ПараметрыУсловий.Вставить("УсловияВыполнены", Истина);
	СтрокаДерева.ПараметрыУсловий.Вставить("КодыСтрок"		 , Новый Массив);
	СтрокаДерева.ПараметрыУсловий.Вставить("УсловияПоСтроке" , Новый Структура);
	СтрокаДерева.ПараметрыУсловий.Вставить("ТаблицаУсловий"	 , Новый ТаблицаЗначений);

//	Служебная таблица для временного хранения результатов проверки условий предоставления
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("УсловиеПредоставления", Новый ОписаниеТипов("СправочникСсылка.УсловияПредоставленияСкидокНаценок"));
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("ОбластьОграничения"   , Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбластейОграниченияСкидокНаценок"));
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("ТипСравнения"         , Новый ОписаниеТипов("ПеречислениеСсылка.ТипыСравненияЗначенийСкидокНаценок"));
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("ЗначениеУсловияОграничения"    , Новый ОписаниеТипов("Число"));
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("СегментНоменклатурыОграничения", Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры"));
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("Выполнено");
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("КупоныПолучатели"			  , Новый ОписаниеТипов("ТаблицаЗначений"));

//	Таблица применяется для проверки выполнения условий по строке.
//	Если у скидки существуют условия по строке то для этих условий в таблице будет создана колонка
	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.Вставить("ТаблицаПроверкиУсловий", Новый ТаблицаЗначений);
	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Колонки.Добавить("КлючСвязи");
	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Индексы.Добавить("КлючСвязи");

	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.Вставить("СоответствиеУсловийКолонкамТаблицыПроверкиУсловий", Новый Соответствие);

//	Служебные параметры
	ИспользуетсяТаблицаПроверкиУсловий      = Ложь;
	ЭтоПервоеУсловиеТаблицыПроверкиУсловий  = Истина;
	КоличествоКолонокТаблицыПроверкиУсловий = 0;

	Для Каждого Условие Из СтрокаДерева.УсловияПредоставления Цикл

		СтрокаТаблицаУсловий = СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Добавить();
		СтрокаТаблицаУсловий.УсловиеПредоставления = Условие.УсловиеПредоставления;
		СтрокаТаблицаУсловий.ОбластьОграничения    = Условие.ОбластьОграничения;
		СтрокаТаблицаУсловий.ТипСравнения		   = Условие.ТипСравнения;
		СтрокаТаблицаУсловий.ЗначениеУсловияОграничения		= Условие.ЗначениеУсловияОграничения;
		СтрокаТаблицаУсловий.СегментНоменклатурыОграничения	= Условие.СегментНоменклатурыОграничения;

		НайденныеСтроки = ВыполненныеУсловия.НайтиСтроки(Новый Структура("Ссылка", Условие.УсловиеПредоставления));

		Если НайденныеСтроки.Количество() = 0 Тогда

		//	Условие не выполнено.
			СтрокаТаблицаУсловий.Выполнено = Ложь;

			СтрокаДерева.ПараметрыУсловий.УсловияВыполнены = Ложь;

		ИначеЕсли НайденныеСтроки.Количество() = 1 И НайденныеСтроки[0].КлючСвязи = -1 Тогда

		//	Условие выполнено. Условие не зависит от конкретных строк.
			СтрокаТаблицаУсловий.Выполнено = Истина;
			СтрокаТаблицаУсловий.КупоныПолучатели = НайденныеСтроки[0].КупоныПолучатели.Скопировать();

		Иначе

		//	Условие выполнено. Найдено несколько строк, прошедших проверку условий.
			СтрокаТаблицаУсловий.Выполнено = Истина;

			КоличествоКолонокТаблицыПроверкиУсловий = КоличествоКолонокТаблицыПроверкиУсловий + 1;
			ЗаголовокКолонки = "Условие" + КоличествоКолонокТаблицыПроверкиУсловий;

			СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.СоответствиеУсловийКолонкамТаблицыПроверкиУсловий.Вставить(Условие.УсловиеПредоставления, ЗаголовокКолонки);
			СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Колонки.Добавить(ЗаголовокКолонки, Новый ОписаниеТипов("Булево"));

			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл

				ИспользуетсяТаблицаПроверкиУсловий = Истина;

				Если СтрокаТаблицаУсловий.КупоныПолучатели.Колонки.Количество() = 0 Тогда

						СтрокаТаблицаУсловий.КупоныПолучатели = НайденнаяСтрока.КупоныПолучатели.Скопировать();

				Иначе	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(НайденнаяСтрока.КупоныПолучатели, СтрокаТаблицаУсловий.КупоныПолучатели, Ложь);

				КонецЕсли;

				НайденныеСтрокиТаблицыПроверкиУсловий = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Найти(НайденнаяСтрока.КлючСвязи, "КлючСвязи");

				Если НЕ НайденныеСтрокиТаблицыПроверкиУсловий = Неопределено Тогда

					НайденныеСтрокиТаблицыПроверкиУсловий[ЗаголовокКолонки] = Истина;

				Иначе

					Если ЭтоПервоеУсловиеТаблицыПроверкиУсловий Тогда

						НоваяСтрока1 = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Добавить();
						НоваяСтрока1.КлючСвязи = НайденнаяСтрока.КлючСвязи;
						НоваяСтрока1[ЗаголовокКолонки] = Истина;

					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

		Если ИспользуетсяТаблицаПроверкиУсловий Тогда

			ЭтоПервоеУсловиеТаблицыПроверкиУсловий = Ложь;

		КонецЕсли;

	КонецЦикла;
	
//	Заполним коды строк...
	Если СтрокаДерева.ПараметрыУсловий.УсловияВыполнены Тогда

		Если СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.СоответствиеУсловийКолонкамТаблицыПроверкиУсловий.Количество() > 0 Тогда

			Отбор = Новый Структура;

			Для Каждого КлючИЗначение Из СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.СоответствиеУсловийКолонкамТаблицыПроверкиУсловий Цикл

				Отбор.Вставить(КлючИЗначение.Значение, Истина);

			КонецЦикла;

			НайденныеСтроки = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.НайтиСтроки(Отбор);

			Для Каждого СтрокаТЗ Из НайденныеСтроки Цикл

				СтрокаДерева.ПараметрыУсловий.КодыСтрок.Добавить(СтрокаТЗ.КлючСвязи);

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецФункции

// Функция выполняет заполнение служебных реквизитов у строк дерева скидок.
//
Процедура ПроверитьУсловияРекурсивно(ДеревоСкидок, ВыполненныеУсловия)
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			ПроверитьУсловияРекурсивно(СтрокаДерева, ВыполненныеУсловия);
			
		Иначе
			
			ПроверитьУсловия(СтрокаДерева, ВыполненныеУсловия);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ЭКСПОРТНЫЕ ПРОЦЕДУРЫ

//	LNK 03.09.2022 05:55:45
Процедура ЗаполнитьПринятПогашениеСкидочныхКупонов(СкидкаНаценка, ПараметрыУсловий, ТаблицаПогашениеКупонов)

	Если НЕ (ПараметрыУсловий.УсловияВыполнены = Истина И ПараметрыУсловий.Свойство("ТаблицаУсловий")) Тогда

		Возврат;

	КонецЕсли;

	Если НЕ ПараметрыУсловий.ТаблицаУсловий.Количество() = 0 Тогда

		Если ТипЗнч(ТаблицаПогашениеКупонов) = Тип("ТаблицаЗначений") И НЕ ТаблицаПогашениеКупонов.Колонки.Количество() = 0  Тогда

			Для каждого СтрокаУсловия Из ПараметрыУсловий.ТаблицаУсловий Цикл

				Если НЕ СтрокаУсловия.КупоныПолучатели.Количество() = 0 Тогда

					Для каждого СтрокаКупона Из СтрокаУсловия.КупоныПолучатели Цикл

						Отборы = Новый Структура(
							"СкидочныйКупон"
							, СтрокаКупона.Получатель
						);

						Если СтрокаКупона.УникальныйКупон Тогда

							Отборы.Вставить("СерийныйНомер", СтрокаКупона.СерийныйНомер);

						КонецЕсли;

						Для каждого СтрокаТабличнойЧасти Из ТаблицаПогашениеКупонов.НайтиСтроки(Отборы) Цикл

							СтрокаТабличнойЧасти.СкидкиНаценки.Добавить(СкидкаНаценка);	//	массив
							СтрокаТабличнойЧасти.Принят			= Истина;

						КонецЦикла;

					КонецЦикла;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 05.09.2022 06:36:51
Процедура ПрименитьПогашениеСкидочныхКупонов(Объект, ТаблицаПогашениеКупонов)	Экспорт

	Если НЕ ТаблицаПогашениеКупонов.Колонки.Количество() = 0 Тогда

		Для каждого СтрокаТаблицы Из ТаблицаПогашениеКупонов Цикл

			Для каждого СкидкаНаценка Из СтрокаТаблицы.СкидкиНаценки Цикл

			//	Один купон может использоваться в нескольких скидках.
			//	Поэтому поле "СкидкиНаценки" содержит все сработавшие по купону скидки.
			//	Перебираем поэлементно - есть такая скидка в "Объект.СкидкиНаценки",
			//	значит купон принят.. прервать перебор массива.

				Отборы = Новый Структура(
					"СкидкаНаценка"
					, СкидкаНаценка
				);	//	LNK 21.09.2022 15:58:38

				Если НЕ Объект.СкидкиНаценки.НайтиСтроки(Отборы).Количество() = 0 Тогда

					Отборы = Новый Структура(
						"СкидочныйКупон, СерийныйНомер"
						, СтрокаТаблицы.СкидочныйКупон
						, СтрокаТаблицы.СерийныйНомер
					);

					Для каждого СтрокаТабличнойЧасти Из Объект.ПогашениеСкидочныхКупонов.НайтиСтроки(Отборы) Цикл

						СтрокаТабличнойЧасти.Принят = СтрокаТаблицы.Принят;

					КонецЦикла;

					Прервать;

				КонецЕсли;

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Функция выполняет проверку применения скидок (наценок) в чеке ККМ
//
// Параметры
//  Склад  - СправочникСсылка.Склады - Склад для которого необходимо выполнить проверку
//  Дата  - Дата - Дата на которую нужно выполнить проверку
//
// Возвращаемое значение:
//   Структура   - Структура результата проверки
//
Функция ПолучитьПараметрыПримененияСкидокНаценокВЧекеККМ(Склад, Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка КАК СкидкаНаценка,
	|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.Управляемая КАК Управляемая
	|ПОМЕСТИТЬ СписокСкидок
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	|			&ТекущаяДата,
	|			ДатаОкончания >= &ТекущаяДата
	|				И СкидкаНаценка.СпособПредоставления <> ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ЗапретРозничнойПродажи)
	|				И Магазин = &Склад) КАК ДействиеСкидокНаценокСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписокСкидок.СкидкаНаценка
	|ИЗ
	|	СписокСкидок КАК СписокСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписокСкидок.СкидкаНаценка
	|ИЗ
	|	СписокСкидок КАК СписокСкидок
	|ГДЕ
	|	СписокСкидок.Управляемая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления КАК УсловиеПредоставления
	|ИЗ
	|	Справочник.СкидкиНаценки.УсловияПредоставления КАК СкидкиНаценкиУсловияПредоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСкидок КАК СписокСкидок
	|		ПО СкидкиНаценкиУсловияПредоставления.Ссылка = СписокСкидок.СкидкаНаценка
	|ГДЕ
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.УсловиеПредоставления = &УсловиеПредоставления";
	
	Запрос.Параметры.Вставить("Склад", Склад);
	Запрос.Параметры.Вставить("ТекущаяДата", Дата);
	Запрос.Параметры.Вставить("УсловиеПредоставления", Перечисления.УсловияПредоставленияСкидокНаценок.ЗаФормуОплаты);
	
	Результат = Запрос.ВыполнитьПакет();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НазначеныСкидки",                 Ложь);
	СтруктураПараметров.Вставить("НазначеныУправляемыеСкидки",      Ложь);
	СтруктураПараметров.Вставить("ФормаОплатыВлияетНаРасчетСкидок", Ложь);
	
	СтруктураПараметров.НазначеныСкидки = НЕ Результат[1].Пустой();
	СтруктураПараметров.ФормаОплатыВлияетНаРасчетСкидок = НЕ Результат[3].Пустой();
	СтруктураПараметров.НазначеныУправляемыеСкидки = НЕ Результат[2].Пустой();;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Функция выполняет расчет суммы НДС.
//
Функция РассчитатьСуммуНДС(Сумма, СтавкаНДС, ЦенаВключаетНДС = Истина) Экспорт
	
	ПроцентНДС = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДСЧислом(СтавкаНДС);
	
	Если ЦенаВключаетНДС Тогда
		СуммаНДС = Сумма * ПроцентНДС / (ПроцентНДС + 1);
	Иначе
		СуммаНДС = Сумма * ПроцентНДС;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции

//	LNK 30.01.2021 08:33:27
Процедура ЗагрузитьОбъектСкидкиНаценки(Объект, РезультатРасчетаСкидокНаценок, СпособПрименения, ПервыйПроход)

//	1.	Выполним очистку строк в коллекции "Объект.СкидкиНаценки".
//		При первом проходе (это начисление скидок) выполняем полную очистку, во втором - дифференцированную.

	Если ПервыйПроход Тогда

		Объект.СкидкиНаценки.Очистить();

	Иначе

		Для каждого СтрокаТаблицы Из Объект.СкидкиНаценки.НайтиСтроки(Новый Структура("СпособПримененияСкидки", СпособПрименения)) Цикл

			Объект.СкидкиНаценки.Удалить(СтрокаТаблицы);

		КонецЦикла;

	КонецЕсли;

//	2.	Выполним заполнение таблицы полученными результатами расчета.

	Для каждого СтрокаРезультата Из РезультатРасчетаСкидокНаценок Цикл

		ЗаполнитьЗначенияСвойств(Объект.СкидкиНаценки.Добавить(), СтрокаРезультата);

	КонецЦикла;

//	3.	Выполним сортировку коллекции по ключу связи.

	Объект.СкидкиНаценки.Сортировать("КлючСвязи, СпособПримененияСкидки Убыв");

//	4. Выполним нумерацию строк коллекции в соответствии с предыдущей сортировкой (если необходимо).

	Если ТипЗнч(Объект.СкидкиНаценки) = Тип("ТаблицаЗначений") Тогда

		Если Объект.СкидкиНаценки.Колонки.Найти("НомерСтроки") = Неопределено Тогда

			Объект.СкидкиНаценки.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));

		КонецЕсли;

		НомерСтроки = 0;

		Для каждого СтрокаТаблицы Из Объект.СкидкиНаценки Цикл

			НомерСтроки = НомерСтроки + 1;
			СтрокаТаблицы.НомерСтроки = НомерСтроки;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Процедура применяет результат расчета скидок (наценок) к объекту.
// Вызывается из форм документов.
//
Процедура ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, ИмяТЧ, РезультатРасчетаСкидокНаценок, СпособПрименения, ВходныеПараметры, ПервыйПроход) Экспорт

	ЗагрузитьОбъектСкидкиНаценки(Объект, РезультатРасчетаСкидокНаценок, СпособПрименения, ПервыйПроход);

	Если СпособПрименения = Перечисления.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы Тогда

		Если ОбщегоНазначения.ЕстьРеквизитОбъекта(Объект, "НачислениеБонусныхБаллов") Тогда

			НачисленныеБонусныеБаллы = БонусныеБаллыСервер.ТаблицаБонусныеБаллы(ОбщегоНазначения.ВыгрузитьКоллекцию(Объект.СкидкиНаценки), Объект.Дата);

			Объект.НачислениеБонусныхБаллов.Очистить();

			НачислениеБонусныхБаллов = Новый ТаблицаЗначений;
			НачислениеБонусныхБаллов.Колонки.Добавить("ПрограммаЛояльности", Новый ОписаниеТипов("СправочникСсылка.ПрограммыЛояльности"));
			НачислениеБонусныхБаллов.Колонки.Добавить("ДатаНачисления"		, ОбщегоНазначенияРТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
			НачислениеБонусныхБаллов.Колонки.Добавить("ДатаСписания"		, ОбщегоНазначенияРТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
			НачислениеБонусныхБаллов.Колонки.Добавить("СуммаБонусныхБаллов", ОбщегоНазначенияРТ.ПолучитьОписаниеТиповЧисла(15,2));

			Для каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл

				СуммаБонусныхБалловНачислено = 0;

				Для каждого СтрокаНачислениеБаллов Из НачисленныеБонусныеБаллы.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТЧ.КлючСвязи)) Цикл

					Если НЕ СтрокаНачислениеБаллов.СуммаБонусныхБаллов = 0 Тогда

						НоваяСтрока = НачислениеБонусныхБаллов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислениеБаллов);
						
						СуммаБонусныхБалловНачислено = СуммаБонусныхБалловНачислено + СтрокаНачислениеБаллов.СуммаБонусныхБаллов;

					КонецЕсли;

				КонецЦикла;

				СтрокаТЧ.СуммаБонусныхБалловНачислено = СуммаБонусныхБалловНачислено;

			КонецЦикла;
		
			НачислениеБонусныхБаллов.Свернуть("ПрограммаЛояльности, ДатаНачисления, ДатаСписания", "СуммаБонусныхБаллов");
			ОбщегоНазначения.ЗагрузитьВКоллекцию(НачислениеБонусныхБаллов, Объект.НачислениеБонусныхБаллов, Истина);

		КонецЕсли;

	Иначе

		СвёрнутыеСкидкиНаценки = РезультатРасчетаСкидокНаценок.Скопировать();
		
	//	Заполнение скидок в табличной части "Товары"
		СвёрнутыеСкидкиНаценки.Свернуть("КлючСвязи", "Сумма");
		СвёрнутыеСкидкиНаценки.Индексы.Добавить("КлючСвязи");
		
		Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл

			СтрокаТаблицы = СвёрнутыеСкидкиНаценки.Найти(СтрокаТЧ.КлючСвязи, "КлючСвязи");

			Если СтрокаТаблицы = Неопределено Тогда

					СтрокаТЧ.СуммаАвтоматическойСкидки = 0;

			Иначе	СтрокаТЧ.СуммаАвтоматическойСкидки = СтрокаТаблицы.Сумма;

			КонецЕсли;
			
		//	Применение автоматической скидки.
			СуммаБезСкидки = СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена;
			
		//	Если получили 100% скидку - нужно оставить минимум 10 копеек.
			Если СтрокаТЧ.СуммаАвтоматическойСкидки = СуммаБезСкидки Тогда

				ЦенаПодарка = ВходныеПараметры.ЦенаПродажиМинимальная;	//	мин 10 копеек, по УчетнаяПолитика

				СтрокиСкидкиНаценки = РезультатРасчетаСкидокНаценок.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТЧ.КлючСвязи));

				Для каждого СтрокаСкидкиНаценки Из СтрокиСкидкиНаценки Цикл

					Если СтрокаСкидкиНаценки.ЦенаПодарка > 0 И НЕ СтрокаСкидкиНаценки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение Тогда

						ЦенаПодарка  = Макс(ЦенаПодарка, СтрокаСкидкиНаценки.ЦенаПодарка);	//	не ниже "ЦенаПродажиМинимальная" копеек
						Прервать;

					КонецЕсли;

				КонецЦикла;

				СтрокаТЧ.СуммаАвтоматическойСкидки = СтрокаТЧ.СуммаАвтоматическойСкидки - ЦенаПодарка * СтрокаТЧ.КоличествоУпаковок;

				Если НЕ СтрокаСкидкиНаценки = Неопределено Тогда

				//	.. в ТЧ СкидкиНаценки тоже уменьшим сумму скидки по строке
					СтрокиСкидкиНаценки = Объект.СкидкиНаценки.НайтиСтроки(Новый Структура("СкидкаНаценка, КлючСвязи", СтрокаСкидкиНаценки.СкидкаНаценка, СтрокаСкидкиНаценки.КлючСвязи));

					Если НЕ СтрокиСкидкиНаценки.Количество() = 0 Тогда

						СтрокаСкидкиНаценки = СтрокиСкидкиНаценки[0];
						СтрокаСкидкиНаценки.Сумма = СтрокаСкидкиНаценки.Сумма - ЦенаПодарка * СтрокаТЧ.КоличествоУпаковок;
						СтрокаСкидкиНаценки.ОграниченаМинимальнойЦеной = Ложь;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;
			
			Если НЕ СуммаБезСкидки = 0 Тогда

				СтрокаТЧ.ПроцентРучнойСкидки = 100 * СтрокаТЧ.СуммаРучнойСкидки / СуммаБезСкидки;

			КонецЕсли;
			
			СуммаСкидки = СтрокаТЧ.СуммаАвтоматическойСкидки + СтрокаТЧ.СуммаРучнойСкидки;
			
			СтрокаТЧ.ПроцентАвтоматическойСкидки = ?(СуммаБезСкидки = 0, 0, 100 * СтрокаТЧ.СуммаАвтоматическойСкидки / СуммаБезСкидки);
			
			СтрокаТЧ.Сумма = СуммаБезСкидки - ?(СуммаСкидки > СуммаБезСкидки, СуммаБезСкидки, СуммаСкидки);

			Если СтрокаТЧ.Сумма = 0 Тогда	// + HVOYA 04.11.2016 14:50:07, Латышев А.А.

				СтрокаТЧ.Сумма = ВходныеПараметры.ЦенаПродажиМинимальная;

			КонецЕсли; 

			СтрокаТЧ.СуммаНДС	= РассчитатьСуммуНДС(СтрокаТЧ.Сумма, СтрокаТЧ.СтавкаНДС, Объект.ЦенаВключаетНДС);

		КонецЦикла;
		
		Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);

	КонецЕсли;

	Объект.СкидкиРассчитаны = Истина;
	
КонецПроцедуры

//	LNK 31.08.2020 13:32:59
Процедура ПрименитьКОбъектуДанныеПакетаКупонов(Объект, ТаблицаСкидкиНаценки, ТаблицаПакетаКупонов, ТаблицаСообщений)	Экспорт

	СтрокиСкидокНаценок = ТаблицаСкидкиНаценки.НайтиСтроки(Новый Структура(
		"СпособПредоставления"
		, Перечисления.СпособыПредоставленияСкидокНаценок.ПакетКупоновКратныйСумме)
	);

	Если НЕ СтрокиСкидокНаценок.Количество() = 0 Тогда

		Удаление = Новый Структура(
			"СкидкиНаценки, Сообщения"
			, Новый Массив
			, Новый Массив
		);

		ТаблицаТовары = Объект.Товары.Выгрузить(Новый Структура("ПродажаПодарка", Ложь), "Номенклатура, Сумма");
		ТаблицаТовары.Свернуть("Номенклатура", "Сумма");
		ТаблицаТовары.Индексы.Добавить("Номенклатура");

		Для каждого СтрокаСкидокНаценок Из СтрокиСкидокНаценок Цикл

			ОчиститьВыдачаСкидочныхКупонов(Объект.ВыдачаСкидочныхКупонов, СтрокаСкидокНаценок.СкидкаНаценка);

			СтрокиСообщений     = ТаблицаСообщений.НайтиСтроки(    Новый Структура("СкидкаНаценка", СтрокаСкидокНаценок.СкидкаНаценка));
			СтрокиПакетаКупонов = ТаблицаПакетаКупонов.НайтиСтроки(Новый Структура("СкидкаНаценка", СтрокаСкидокНаценок.СкидкаНаценка));

			СуммаБазаРасчета  = 0;

			Для каждого СтрокаПакетаКупонов Из СтрокиПакетаКупонов Цикл

				СтрокиТовары = ТаблицаТовары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаПакетаКупонов.Номенклатура));

				Для каждого СтрокаТовары Из СтрокиТовары Цикл

					СтрокаПакетаКупонов.Сумма = СтрокаПакетаКупонов.Сумма + СтрокаТовары.Сумма * СтрокаПакетаКупонов.Кратность;
					СтрокаПакетаКупонов.СуммаОригинал = СтрокаПакетаКупонов.СуммаОригинал + СтрокаТовары.Сумма;

				КонецЦикла;

				СуммаБазаРасчета  = СуммаБазаРасчета + СтрокаПакетаКупонов.Сумма;

			КонецЦикла;

			КоличествоКупонов = ?(НЕ(СтрокаСкидокНаценок.ЗначениеСкидкиНаценки * СуммаБазаРасчета) = 0
				, Цел(СуммаБазаРасчета / СтрокаСкидокНаценок.ЗначениеСкидкиНаценки)
				, 0
			);

			Если КоличествоКупонов = 0 Тогда

				Удаление.СкидкиНаценки.Добавить(СтрокаСкидокНаценок);

				Для каждого СтрокаСообщения Из СтрокиСообщений Цикл

					Удаление.Сообщения.Добавить(СтрокаСообщения);

				КонецЦикла;

			Иначе

				Для каждого СтрокаСообщения Из СтрокиСообщений Цикл

					СтрокаСообщения.ТекстСообщения = СтрЗаменить(СтрокаСообщения.ТекстСообщения, "#КОЛИЧЕСТВО#", Формат(КоличествоКупонов, "ЧДЦ=; ЧН=НЕТ; ЧГ="));
					СтрокаСообщения.ТекстСообщения = СтрЗаменить(СтрокаСообщения.ТекстСообщения, "#СУММА#", Формат(СуммаБазаРасчета, "ЧДЦ=2; ЧН=0,00; ЧГ="));

				КонецЦикла;

				СтрокаКупоныВыданные = Объект.ВыдачаСкидочныхКупонов.Добавить();
				СтрокаКупоныВыданные.СкидочныйКупон = СтрокаСкидокНаценок.СкидкаНаценка;
				СтрокаКупоныВыданные.Количество = КоличествоКупонов;

			КонецЕсли;

		КонецЦикла;

		Для каждого СтрокаУдалить Из Удаление.СкидкиНаценки Цикл	//	LNK 01.09.2020 05:39:07

			ТаблицаСкидкиНаценки.Удалить(СтрокаУдалить);

		КонецЦикла;

		Для каждого СтрокаУдалить Из Удаление.Сообщения Цикл	//	LNK 01.09.2020 05:39:43

			ТаблицаСообщений.Удалить(СтрокаУдалить);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	LNK 14.09.2020 12:15:56
Процедура ОчиститьВыдачаСкидочныхКупонов(ВыдачаСкидочныхКупонов, СкидочныйКупон, СерийныйНомер = Неопределено)

	СтрокиУдалить = ВыдачаСкидочныхКупонов.НайтиСтроки(Новый Структура(
			"СкидочныйКупон, СерийныйНомер"
			, СкидочныйКупон, СерийныйНомер
			)
	);

	Для каждого СтрокаУдалить Из СтрокиУдалить Цикл

		ВыдачаСкидочныхКупонов.Удалить(СтрокаУдалить);

	КонецЦикла;

КонецПроцедуры

// Процедура отменяет рассчитанные по объекту скидки.
// Вызывается из форм документов.
//
Процедура ОтменитьСкидки(Объект, ИмяТЧ, ИмяБонусыОплата = "") Экспорт
	
	Объект.СкидкиНаценки.Очистить();
	Объект.НачислениеБонусныхБаллов.Очистить();

	Если НЕ ПустаяСтрока(ИмяБонусыОплата) Тогда

		Объект[ИмяБонусыОплата].Очистить();

	КонецЕсли;
	
	ОчиститьСкидкиВТЧ(Объект, ИмяТЧ);
	
	Объект.СкидкиРассчитаны = Ложь;
	
КонецПроцедуры

// Процедура очищает суммы ручных и автоматических скидок в строках табличной части документа
// Параметры
//		Объект - Документ, табличная часть которого обрабатывается
//		ИмяТЧ - Строка - имя табличной части с товарами
Процедура ОчиститьСкидкиВТЧ(Объект, ИмяТЧ) Экспорт
	
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		
		СтрокаТЧ.СуммаАвтоматическойСкидки   = 0;
		СтрокаТЧ.ПроцентАвтоматическойСкидки = 0;
		
		Если Не ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СтрокаТЧ.СуммаРучнойСкидки           = 0;
			СтрокаТЧ.ПроцентРучнойСкидки         = 0;
		КонецЕсли;
		
		СтрокаТЧ.СуммаБонусныхБалловНачислено = 0;
		СтрокаТЧ.СуммаБонусныхБалловСписано   = 0;

	//	Применение автоматической скидки.
		СуммаБезСкидки = СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена;
		
		СтрокаТЧ.Сумма    = СуммаБезСкидки;
		СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ.Сумма, СтрокаТЧ.СтавкаНДС, Объект.ЦенаВключаетНДС);
		
	КонецЦикла;
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);
	
КонецПроцедуры // РассчитатьПоОбъекту()

// Процедура распределяет сумму ручной скидки по строкам табличной части документа
// Параметры
//		Объект - Документ, табличная часть которого обрабатывается
//		ИмяТЧ - Строка - имя табличной части с товарами
//		СуммаСкидкиКРаспределению - Число - сумма ручной скидки, которую нужно распределить
//		ИспользуютсяАвтоматическиеСкидки - Булево - признак того, что в документе используются автоматические скидки
Процедура НазначитьРучнуюСкидку(Объект, ИмяТЧ, Знач СуммаСкидкиКРаспределению, ИспользуютсяАвтоматическиеСкидки) Экспорт
	
	МаксимальнаяСуммаСкидки = 0;
	Для каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		
		Если НЕ СтрокаТЧ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
			СуммаАвтоматическойСкидки = ?(ИспользуютсяАвтоматическиеСкидки, СтрокаТЧ.СуммаАвтоматическойСкидки, 0);
			МаксимальнаяСуммаСкидки = МаксимальнаяСуммаСкидки + СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена - СуммаАвтоматическойСкидки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СуммаСкидкиКРаспределению > МаксимальнаяСуммаСкидки Тогда
		СуммаСкидкиКРаспределению = МаксимальнаяСуммаСкидки;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		
		Если СтрокаТЧ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаБезСкидки = СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена;
		СуммаАвтоматическойСкидки = ?(ИспользуютсяАвтоматическиеСкидки, СтрокаТЧ.СуммаАвтоматическойСкидки, 0);
		
		Если МаксимальнаяСуммаСкидки <> 0 Тогда
			СтрокаТЧ.СуммаРучнойСкидки = (СуммаБезСкидки - СуммаАвтоматическойСкидки) * (СуммаСкидкиКРаспределению / МаксимальнаяСуммаСкидки);
		Иначе
			СтрокаТЧ.СуммаРучнойСкидки = 0;
		КонецЕсли;
		СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению - СтрокаТЧ.СуммаРучнойСкидки;
		МаксимальнаяСуммаСкидки = МаксимальнаяСуммаСкидки - (СуммаБезСкидки - СуммаАвтоматическойСкидки);
		
		Если СуммаБезСкидки <> 0 Тогда
			СтрокаТЧ.ПроцентРучнойСкидки = 100 * СтрокаТЧ.СуммаРучнойСкидки / СуммаБезСкидки;
		Иначе
			СтрокаТЧ.ПроцентРучнойСкидки = 0;
		КонецЕсли;
		
		СуммаСкидки = СуммаАвтоматическойСкидки + СтрокаТЧ.СуммаРучнойСкидки;
		
		Если ИспользуютсяАвтоматическиеСкидки Тогда
			Если СуммаБезСкидки <> 0 Тогда
				СтрокаТЧ.ПроцентАвтоматическойСкидки = ?(СуммаБезСкидки = 0, 0 , 100 * СуммаАвтоматическойСкидки / СуммаБезСкидки);
			Иначе
				СтрокаТЧ.ПроцентАвтоматическойСкидки = 0;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТЧ.Сумма    = СуммаБезСкидки - ?(СуммаСкидки > СуммаБезСкидки, СуммаБезСкидки, СуммаСкидки);
		СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ.Сумма, СтрокаТЧ.СтавкаНДС, Объект.ЦенаВключаетНДС);

		Если СтрокаТЧ.Сумма = 0 Тогда

			СтрокаТЧ.Сумма = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику().ЦенаПродажиМинимальная;

		КонецЕсли; 

	КонецЦикла;
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

// Процедура очищает сумму ручной скидки в строках табличной части документа
// Параметры
//		Объект - Документ, табличная часть которого обрабатывается
//		ИмяТЧ - Строка - имя табличной части с товарами
//		ИспользуютсяАвтоматическиеСкидки - Булево - признак того, что в документе используются автоматические скидки
Процедура ОтменитьРучныеСкидки(Объект, ИмяТЧ, ИспользуютсяАвтоматическиеСкидки, ОчиститьПричинуСодержание = Ложь) Экспорт
	
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		
		СтрокаТЧ.СуммаРучнойСкидки   = 0;
		СтрокаТЧ.ПроцентРучнойСкидки = 0;
		
		СуммаБезСкидки = СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена;
		
		СуммаАвтоматическойСкидки = ?(ИспользуютсяАвтоматическиеСкидки, СтрокаТЧ.СуммаАвтоматическойСкидки, 0);
		
		СтрокаТЧ.Сумма    = СуммаБезСкидки - ?(СуммаАвтоматическойСкидки > СуммаБезСкидки, СуммаБезСкидки, СуммаАвтоматическойСкидки);
		СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ.Сумма, СтрокаТЧ.СтавкаНДС, Объект.ЦенаВключаетНДС);

		Если ОчиститьПричинуСодержание = Истина Тогда

			СтрокаТЧ.ПричинаРучнойСкидки = Справочники.ПричиныРучнойСкидки.ПустаяСсылка();
			СтрокаТЧ.Содержание			 = "";

		КонецЕсли;
		
	КонецЦикла;
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

Процедура ОтменитьОплатуБонуснымиБалламиУправляемую(Объект, ИмяТЧ)	Экспорт	//	LNK 23.06.2021 08:05:38

	Если БонусныеБаллыПовтИсп.ЕстьТабличнаяЧастьОплатаБонуснымиБаллами(ОбщегоНазначения.ИмяТаблицыПоСсылке(Объект.Ссылка)) Тогда

		БонусныеБаллыВызовСервера.ОчиститьОплатуБонуснымиБаллами(Объект, ИмяТЧ, "ОплатаБонуснымиБаллами", БонусныеБаллыПовтИсп.УправляемыеТипыБонусов(), Объект.ОплатаБонуснымиБаллами.Количество() = 0);

	КонецЕсли;

КонецПроцедуры

//	LNK 25.09.2017 14:27:02
Процедура ОтменитьАвтоматическиеСкидки(Объект, ИмяТЧ, ИспользуютсяРучныеСкидки, РазделениеДопустимо = Ложь)	Экспорт

	Если РазделениеДопустимо = Истина И ИмяТЧ = "Товары" Тогда

		ОбъединитьРазделённыеСтроки(Объект[ИмяТЧ]);

	КонецЕсли;

	Если БонусныеБаллыПовтИсп.ЕстьТабличнаяЧастьОплатаБонуснымиБаллами(ОбщегоНазначения.ИмяТаблицыПоСсылке(Объект.Ссылка)) Тогда

		БонусныеБаллыВызовСервера.ОчиститьОплатуБонуснымиБаллами(Объект, "Товары", "ОплатаБонуснымиБаллами", БонусныеБаллыПовтИсп.АвтоматическиеТипыБонусов(), Объект.ОплатаБонуснымиБаллами.Количество() = 0);

	КонецЕсли;

	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТЧ] Цикл

		СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки   = 0;
		СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0;

		СуммаБезСкидки = СтрокаТабличнойЧасти.КоличествоУпаковок * СтрокаТабличнойЧасти.Цена;

		СуммаРучнойСкидки = ?(ИспользуютсяРучныеСкидки, СтрокаТабличнойЧасти.СуммаРучнойСкидки, 0);

		СтрокаТабличнойЧасти.Сумма    = СуммаБезСкидки - ?(СуммаРучнойСкидки > СуммаБезСкидки, СуммаБезСкидки, СуммаРучнойСкидки);
		СтрокаТабличнойЧасти.СуммаНДС = РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.СтавкаНДС, Объект.ЦенаВключаетНДС);

	КонецЦикла;

	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);
	Объект.СкидкиНаценки.Очистить();

КонецПроцедуры

//	LNK 02.12.2019 10:30:12
Процедура ОбъединитьРазделённыеСтроки(ТабличнаяЧасть)

	СтрокиДобавленные = Новый Массив;

	Попытка

		Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл

			Если СтрокаТабличнойЧасти.ИдентификаторКопии > 0 Тогда

				СтрокиДобавленные.Добавить(СтрокаТабличнойЧасти);
			//	помним, что присвоенный идентификатор был увеличен на единицу!
				СтрокаРазделённая = ТабличнаяЧасть.НайтиПоИдентификатору(СтрокаТабличнойЧасти.ИдентификаторКопии - 1);

				СтрокаРазделённая.Количество         = СтрокаРазделённая.Количество + СтрокаТабличнойЧасти.Количество;
				СтрокаРазделённая.КоличествоУпаковок = СтрокаРазделённая.КоличествоУпаковок + СтрокаТабличнойЧасти.КоличествоУпаковок;
				СтрокаРазделённая.СуммаРучнойСкидки  = 0;

			КонецЕсли;

		КонецЦикла;

		Для каждого СтрокаТабличнойЧасти Из СтрокиДобавленные Цикл

			ТабличнаяЧасть.Удалить(СтрокаТабличнойЧасти);

		КонецЦикла;

	Исключение

	//	на всякий случай используем обработку исключительной ситуации.
		ТекстОшибки = ОписаниеОшибки();

	КонецПопытки;

КонецПроцедуры

// Процедура округляет чек в пользу покупателя
//
Процедура ОкруглитьЧекВПользуПокупателя(Объект, ИмяТЧ, ИмяТЧСкидки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПорядокОкругленияСуммыЧекаВПользуПокупателя = РозничныеПродажиСерверПовтИсп.РеквизитыМагазина(Объект.Магазин).ПорядокОкругленияСуммыЧекаВПользуПокупателя;
	
	Если НЕ ЗначениеЗаполнено(ПорядокОкругленияСуммыЧекаВПользуПокупателя)
		ИЛИ ПорядокОкругленияСуммыЧекаВПользуПокупателя = Перечисления.ПорядкиОкругления.Окр0_01 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗначениеОкругления = Число(Строка(ПорядокОкругленияСуммыЧекаВПользуПокупателя));
	
	Если ЗначениеЗаполнено(ЗначениеОкругления) Тогда
		СуммаБезОкругления = Объект[ИмяТЧ].Итог("Сумма");
		ОкругленнаяСумма = Цел(СуммаБезОкругления / ЗначениеОкругления) * ЗначениеОкругления;
		Округление = СуммаБезОкругления - ОкругленнаяСумма;
		
		ИндексСтрокиСМаксимальнойСуммой = -1;
		СуммаСтрокиСМаксимальнойСуммой  =  0;
		ИндексСтрокиСкидки              = -1;
		
		
		Если Округление > 0 И ОкругленнаяСумма >0 Тогда
			
			МаксимальнаяСуммаСкидки = 0;
			Для каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
				
				Если НЕ СтрокаТЧ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
					МаксимальнаяСуммаСкидки = МаксимальнаяСуммаСкидки + СтрокаТЧ.Сумма;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Округление > МаксимальнаяСуммаСкидки Тогда
				Возврат;
			КонецЕсли;
			
			СуммаСкидкиКРаспределению = Округление;
			
			Для каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
				
				Если СтрокаТЧ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаТЧ.Сумма = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				
				Если МаксимальнаяСуммаСкидки <> 0 Тогда
					СуммаОкругления = (СтрокаТЧ.Сумма) * (СуммаСкидкиКРаспределению / МаксимальнаяСуммаСкидки);
					СтрокаТЧ.СуммаАвтоматическойСкидки = СтрокаТЧ.СуммаАвтоматическойСкидки + СуммаОкругления;
					СтрокаТЧ.Сумма = СтрокаТЧ.Сумма - СуммаОкругления;
					СтрокаТЧ.ПроцентАвтоматическойСкидки = 100 * СтрокаТЧ.СуммаАвтоматическойСкидки / (СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена);
					СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ.Сумма, СтрокаТЧ.СтавкаНДС, Объект.ЦенаВключаетНДС);
					
					СтрокаСкидокНаценок = Объект[ИмяТЧСкидки].Добавить();
					СтрокаСкидокНаценок.КлючСвязи = СтрокаТЧ.КлючСвязи;
					СтрокаСкидокНаценок.Сумма     = СуммаОкругления;
					
					Если СтрокаТЧ.Сумма > СуммаСтрокиСМаксимальнойСуммой Тогда
						
						ИндексСтрокиСМаксимальнойСуммой = Объект[ИмяТЧ].Индекс(СтрокаТЧ);
						СуммаСтрокиСМаксимальнойСуммой = СтрокаТЧ.Сумма;
						ИндексСтрокиСкидки = Объект[ИмяТЧСкидки].Индекс(СтрокаСкидокНаценок);
						
					КонецЕсли;
				Иначе
					Прервать;
				КонецЕсли;
				
				СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению - СуммаОкругления;
				МаксимальнаяСуммаСкидки = МаксимальнаяСуммаСкидки - (СтрокаТЧ.Сумма + СуммаОкругления);
				
			КонецЦикла;
			
			СуммаПогрешности = ОкругленнаяСумма - Объект[ИмяТЧ].Итог("Сумма");
			
			Если СуммаПогрешности <> 0 
			   И ИндексСтрокиСМаксимальнойСуммой >= 0 
			   И ИндексСтрокиСкидки >= 0 Тогда
				
				СтрокаТЧ = Объект[ИмяТЧ].Получить(ИндексСтрокиСМаксимальнойСуммой);
				СтрокаТЧ.СуммаАвтоматическойСкидки = СтрокаТЧ.СуммаАвтоматическойСкидки - СуммаПогрешности;
				СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + СуммаПогрешности;
				СтрокаТЧ.ПроцентАвтоматическойСкидки = 100 * СтрокаТЧ.СуммаАвтоматическойСкидки / (СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена);
				СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ.Сумма, СтрокаТЧ.СтавкаНДС, Объект.ЦенаВключаетНДС);
				
				СтрокаСкидокНаценок = Объект[ИмяТЧСкидки].Получить(ИндексСтрокиСкидки);
				СтрокаСкидокНаценок.Сумма = СтрокаСкидокНаценок.Сумма - СуммаПогрешности;
			КонецЕсли;

			Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьМинимальныеЦеныПослеРасчетаСкидок(ТаблицаДанных, ДеревоСкидок, Параметры)
	Для Каждого СтрокаТаблицы ИЗ ТаблицаДанных Цикл
		//
		Если НЕ СтрокаТаблицы.КлючСвязи = 0  Тогда
			СтрокаТоваров = Параметры.ТоварыПоСегментам.Найти(СтрокаТаблицы.КлючСвязи, "КлючСвязи");
			Если СтрокаТоваров <> Неопределено Тогда
				МассивУдаляемыхСтрок = Новый Массив;
				СуммаСкидкиПоСтроке = 0;
				МаксимальнаяСкидкаСтроки = СтрокаТоваров.Сумма - СтрокаТоваров.МинимальнаяСумма;
				ПревышенияНет = Истина;
				Для Каждого СтрокаСкидкиНаценки Из СтрокаТаблицы.Расшифровка Цикл
					Если ПревышенияНет Тогда
						СуммаСкидкиПоСтроке = СуммаСкидкиПоСтроке + СтрокаСкидкиНаценки.Сумма;
						РазмерПревышения = СуммаСкидкиПоСтроке - МаксимальнаяСкидкаСтроки;
						Если РазмерПревышения >= 0 Тогда
							ПревышенияНет = Ложь;
							СтрокаСкидкиНаценки.Сумма = СтрокаСкидкиНаценки.Сумма - РазмерПревышения;
							СтрокаСкидкиНаценки.ОграниченаМинимальнойЦеной = Истина;
							Если СтрокаСкидкиНаценки.Сумма = 0 Тогда
								//МассивУдаляемыхСтрок.Добавить(СтрокаСкидкиНаценки);
							КонецЕсли;
						КонецЕсли;
					Иначе
						СтрокаСкидкиНаценки.Сумма = 0;
						СтрокаСкидкиНаценки.ОграниченаМинимальнойЦеной = Истина;
						//МассивУдаляемыхСтрок.Добавить(СтрокаСкидкиНаценки);
					КонецЕсли;
				КонецЦикла;
				//Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
				//	СтрокаТаблицы.Расшифровка.Удалить(УдаляемаяСтрока);
				//КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		//
	КонецЦикла;
КонецПроцедуры

// Функция заполняет значения в структуре параметров
// для открытия формы ручных скидок
Функция ПараметрыДляНазначенияРучнойСкидки(Объект) Экспорт
	
	СуммаАвтоматическойСкидки = Объект.Товары.Итог("СуммаАвтоматическойСкидки");
	СуммаРучнойСкидки = Объект.Товары.Итог("СуммаРучнойСкидки");
	СуммаБезСкидок = ОбработкаТабличнойЧастиТоварыСервер.ПолучитьСуммуДокументаБезПодарочныхСертификатов(Объект);
	СуммаБезСкидок = СуммаБезСкидок + СуммаАвтоматическойСкидки + СуммаРучнойСкидки;
	
	ПараметрыФормы = СтруктураПараметровДляНазначенияРучнойСкидки();
	ПараметрыФормы.СуммаБезСкидок = СуммаБезСкидок;
	ПараметрыФормы.СуммаАвтоматическойСкидкиНаценки = СуммаАвтоматическойСкидки;
	ПараметрыФормы.СуммаРучнойСкидкиНаценки = СуммаРучнойСкидки;
	ПараметрыФормы.Валюта = "UAH";
	ПараметрыФормы.Соглашение = "";

	Возврат ПараметрыФормы;
	
КонецФункции

// Функция подготавливает структуру
// для открытия формы ручных скидок
Функция СтруктураПараметровДляНазначенияРучнойСкидки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СуммаБезСкидок",                   	0);
	СтруктураПараметров.Вставить("СуммаАвтоматическойСкидкиНаценки", 	0);
	СтруктураПараметров.Вставить("СуммаРучнойСкидкиНаценки",         	0);
	СтруктураПараметров.Вставить("МинимальнаяСуммаДокумента",       	0);
	СтруктураПараметров.Вставить("Валюта",         						"");
	СтруктураПараметров.Вставить("Соглашение",         					"");

	Возврат СтруктураПараметров;
	
КонецФункции

// Функция получает минимальную цену в указанном магазине
Функция МинимальнаяЦенаНоменклатуры(СтруктураНоменклатуры, Магазин, Дата) Экспорт
	
	ВидЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "ВидМинимальныхЦенПродажи");
	Цена = ЗапасыСервер.ПолучитьЦенуПоВидуЦен(ВидЦены,
				Дата,
				СтруктураНоменклатуры.Номенклатура,
				СтруктураНоменклатуры.Характеристика,
				СтруктураНоменклатуры.Упаковка);
	
	Возврат Цена;
КонецФункции

#Область ПоддержкаРаспределенияСуммыПодарков	//	LNK 07.09.2021 13:24:08

Функция КоличествоПодарковИзКорзиныПокупателя(СтрокаДерева, ПараметрыСкидки, ТоварыСегмента)

	ТаблицаКратностей = Новый ТаблицаЗначений;
	ТаблицаКратностей.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число"));

//	Работаем сначала "ПоДокументу"

	Отбор = Новый Структура(
			"ОбластьОграничения, ТипСравнения, Выполнено"
			, Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе
			, Перечисления.ТипыСравненияЗначенийСкидокНаценок.Кратно
			, Истина
	);

	Для каждого СтрокаУсловия Из СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Отбор) Цикл

		Если НЕ СтрокаУсловия.ЗначениеУсловияОграничения = 0 Тогда

			ТоварыПоУсловию = СтрокаДерева.ТаблицаТоваров.НайтиСтроки(Новый Структура("СегментНоменклатуры", СтрокаУсловия.СегментНоменклатурыОграничения));
			КоличествоВсего = 0;

			Для каждого ТоварПоУсловию Из ТоварыПоУсловию Цикл

				КоличествоВсего = КоличествоВсего + ТоварПоУсловию.КоличествоУпаковок;

			КонецЦикла;

			Кратность = Цел(КоличествоВсего / (СтрокаУсловия.ЗначениеУсловияОграничения + ПараметрыСкидки.КоличествоПодарковИзКорзиныПокупателя));

			Если Кратность > 0 Тогда

				ТаблицаКратностей.Добавить().Кратность = Кратность;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

//	Теперь работаем с кратностью "ПоСтроке".

	Отбор.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке;

	Для каждого СтрокаУсловия Из СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Отбор) Цикл

		Если НЕ СтрокаУсловия.ЗначениеУсловияОграничения = 0 Тогда

			Для каждого ТоварСегмента Из ТоварыСегмента Цикл

				Кратность = Цел(ТоварСегмента.КоличествоУпаковок / (СтрокаУсловия.ЗначениеУсловияОграничения + ПараметрыСкидки.КоличествоПодарковИзКорзиныПокупателя));

				Если Кратность > 0 Тогда

					ТаблицаКратностей.Добавить().Кратность = Кратность;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	Если ТаблицаКратностей.Количество() = 0 Тогда

		КоличествоПодарков = ПараметрыСкидки.КоличествоПодарковИзКорзиныПокупателя;

	Иначе

		ТаблицаКратностей.Сортировать("Кратность Убыв");

		КоличествоПодарков = ПараметрыСкидки.КоличествоПодарковИзКорзиныПокупателя * ТаблицаКратностей[0].Кратность;

	КонецЕсли;

	Возврат КоличествоПодарков;

КонецФункции
	
#КонецОбласти

#Область ПроцедурыСкидокНаценокОтХвои

Функция hiПосчитаемСуммуДляСкидки(ТоварСегмента, ЗначениеУсловияОграничения)

	КоличествоВхождений = Цел(ТоварСегмента.Количество / ЗначениеУсловияОграничения);
	
	Возврат КоличествоВхождений * ТоварСегмента.ЦенаЗаУпаковку;

КонецФункции

//	LNK 20.09.2018 12:28:08
Функция СкидкаВСтрокеОграничена(ТоварСегмента, ПараметрыСкидки, Параметры)

//	Если будут какие дополнительные "домашние" ограничения на действие скидки,
//	их можно прописать здесь.

	Если ПараметрыСкидки.СпособПримененияСкидки = Перечисления.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы Тогда

		ЕстьОграничение =
			ТоварСегмента.АкционнаяЦена И НЕ ПараметрыСкидки.НачислятьБаллыНаАкционныйТовар = Истина	//	LNK 30.01.2021 08:14:58
		ИЛИ Параметры.ПродажаПоКредитнойПрограмме = Истина И НЕ ПараметрыСкидки.НачислятьБаллыПоКредитнойПрограмме = Истина	//	LNK 31.07.2021 08:48:15
		;

		Если НЕ ЕстьОграничение Тогда	//	разносим условия для упрощения чтения

			Если ПараметрыСкидки.СовместноеНачислениеСкидокИБонусов Тогда

				СкидкиПримененные = Параметры.БазаРасчета.СкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", ТоварСегмента.КлючСвязи));

				Для каждого СкидкаПримененная Из СкидкиПримененные Цикл

					Если СкидкаПримененная.ИсключаетБонусныеБаллы Тогда

						ЕстьОграничение = Истина;
						Прервать;

					КонецЕсли;

				КонецЦикла;

			Иначе	//	НЕ СовместноеНачислениеСкидокИБонусов

				СтрокаТовары = Параметры.БазаРасчета.Товары.Найти(ТоварСегмента.КлючСвязи, "КлючСвязи");

				Если НЕ СтрокаТовары = Неопределено Тогда

				//	Определяем, была ли начислена скидка по текущей строке..
				//	Если было, то бонусы НЕ начисляем.
					ЕстьОграничение = НЕ СтрокаТовары.СуммаАвтоматическойСкидки = 0;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	Иначе

		ЕстьОграничение = ЦенаАкционная(ТоварСегмента.АкционнаяЦена, ПараметрыСкидки.НачислятьНаАкционныеТовары);

	КонецЕсли;

	Возврат ЕстьОграничение;

КонецФункции

Функция ЦенаАкционная(АкционнаяЦена, НачислятьНаАкционныеТовары)	//	LNK 21.12.2021 06:05:01

	Да = ?(НачислятьНаАкционныеТовары = Истина, Ложь, АкционнаяЦена);

	Возврат Да;

КонецФункции

Функция ПосчитаемСуммуДляСкидкиПоДокументу(ТоварыСегмента, ЗначениеУсловияОграничения,НачислятьНаАкционныеТовары = Ложь)
	КоличествоТовара = 0;
	Для каждого Эл Из ТоварыСегмента Цикл
		КоличествоТовара = КоличествоТовара + Эл.Количество;
	КонецЦикла;
	
	КоличествоВхождений = Цел(КоличествоТовара/ЗначениеУсловияОграничения);
	
	// + HVOYA 18.10.2016 10:50:29, Латышев А.А.
	Если КоличествоВхождений = 0 Тогда
		Возврат 0;
	Иначе
		Сумма = 0;
		ОсталосьОбработать = КоличествоВхождений;
		Для каждого Эл Из ТоварыСегмента Цикл
			Если ОсталосьОбработать = 0 Тогда
				Прервать;
			КонецЕсли; 
			Если Эл.АкционнаяЦена И НЕ НачислятьНаАкционныеТовары Тогда
				Продолжить;
			КонецЕсли; 
			Количество = Эл.Количество;
			Если ОсталосьОбработать < Количество Тогда
				Количество = Мин(Количество, ОсталосьОбработать);
			ИначеЕсли Количество > КоличествоВхождений Тогда 
				Количество = Мин(Количество, КоличествоВхождений);
			КонецЕсли; 
			Сумма = Сумма + Эл.ЦенаЗаУпаковку * Количество;
			ОсталосьОбработать = ОсталосьОбработать - Количество;
		КонецЦикла; 
		Возврат Сумма;
	КонецЕсли; 
	// - HVOYA 18.10.2016 10:50:29, Латышев А.А. 
КонецФункции
// - HVOYA 22.09.2016 13:54:49, Латышев А.А. 

// + HVOYA 07.04.2017 11:20:15, Латышев А.А.
Функция hiСортировкаПузырьком(МассивЭлементов) Экспорт
	// Количество просмотров массива - по количеству числа его элементов
	Для просмотр = 0 По МассивЭлементов.Количество()-1 Цикл
		// Собственно, просмотр массива
		Для индекс = 0 По МассивЭлементов.Количество()-1 Цикл
			// Если достигли конца массива то прервём цикл,
			// чтобы не выполнять условие ниже
			Если индекс = МассивЭлементов.Количество()-1 Тогда
				Прервать;
			КонецЕсли;
			// Сравнение элементов и их перестановка (если требуется)
			Если МассивЭлементов[индекс].Сумма < МассивЭлементов[индекс+1].Сумма Тогда
				СтаршийЭлемент = МассивЭлементов[индекс];
				МладшийЭлемент = МассивЭлементов[индекс+1];
				МассивЭлементов[индекс] = МладшийЭлемент;
				МассивЭлементов[индекс+1] = СтаршийЭлемент;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат МассивЭлементов;
КонецФункции
// - HVOYA 07.04.2017 11:20:15, Латышев А.А.

Функция СоздатьСерийныйНомер(КодСерийногоНомера, Владелец) Экспорт

	УстановитьПривилегированныйРежим(Истина);             
	СерийныйНомер = Справочники.СерийныеНомера.СоздатьЭлемент();
   	СерийныйНомер.КодСерийногоНомера = КодСерийногоНомера;
   	СерийныйНомер.Наименование       = КодСерийногоНомера;
   	СерийныйНомер.Владелец           = Владелец;
   	СерийныйНомер.Записать();
	
	ПодключаемоеОборудованиеРТ.УстановитьШтрихкод(КодСерийногоНомера, СерийныйНомер.Ссылка, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), "");
	
	Возврат СерийныйНомер.Ссылка;

КонецФункции

#КонецОбласти










