///////////////////////////////////////////////////////////////////////////////

// Процедура выполняет проведение документов перед формированием печатной формы.
//
// Параметры:
//	МассивДокументоы - Массив - Документы, которые необходимо провести
//
// Возвращаемое значение:
//	Массив - Документы, которые провести не удалось
//
Функция ПровестиДокументы(МассивДокументов) Экспорт
	
	МассивНепроведенныхДокументов = Новый Массив;
	
	Для Каждого ДокументСсылка Из МассивДокументов Цикл
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
		ВыполненоУспешно = Ложь;
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
	
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ВыполненоУспешно = Истина;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		Если Не ВыполненоУспешно Тогда
			МассивНепроведенныхДокументов.Добавить(ДокументСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивНепроведенныхДокументов;
	
КонецФункции // ПровестиДокументы()

// Функция по массиву документов возвращает массив непроведенных документов.
//
// Параметры:
//	МассивДокументов - документы, которые необходимо проверить.
//
// Возвращаемое значение:
//	Массив непроведенных документов.
//
Функция ПолучитьМассивНепроведенныхДокументов(МассивДокументов) Экспорт

	Если МассивДокументов.Количество() > 0 Тогда

		Запрос = Новый Запрос(
		"
		|ВЫБРАТЬ
		|	Документ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ." + МассивДокументов[0].Метаданные().Имя + " КАК Документ
		|ГДЕ
		|	Документ.Ссылка В (&МассивДокументов)
		|	И Не Документ.Проведен
		|");
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Иначе

		Результат = Новый Массив;

	КонецЕсли;

	Возврат Результат;

КонецФункции

//	LNK 27.10.2016 11:34:39
Функция ПолучитьМассивПомеченныхНаУдалениеДокументов(МассивДокументов)	Экспорт

	Если МассивДокументов.Количество() > 0 Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Документ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ." + МассивДокументов[0].Метаданные().Имя + " КАК Документ
		|ГДЕ
		|	Документ.Ссылка В (&МассивДокументов)
		|	И Документ.ПометкаУдаления
		|");
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Иначе

		Результат = Новый Массив;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьМассивПомеченныхНаУдалениеДокументов()

// Функция выполняет проверку возможности печати документов.
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы
//
// Возвращаемое значение:
//	Массив - Массив не проведенных документов
//
Функция ПроверитьПроведенностьДокументов(МассивДокументов) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ." + МассивДокументов[0].Метаданные().Имя + " КАК Документ
	|ГДЕ
	|	Документ.Ссылка В (&МассивДокументов)
	|	И Не Документ.Проведен
	|");
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивНепроведенныхДокументов = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивНепроведенныхДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивНепроведенныхДокументов;

КонецФункции // ПроверитьПроведенностьДокументов()


//  Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//  БанковскийСчет - Банковский счет, если счет не основной.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина, Знач БанковскийСчет = Неопределено) Экспорт

	Сведения = Новый Структура("Представление, ПолноеНаименование, КодПоЕДРПОУ, КодПоДРФО, ИНН, НомерСвидетельства, Телефоны, ЮридическийАдрес, ФактическийАдрес, Банк, МФО, НомерСчета, АдресБанка, ИнформацияОСтатусеПлательщикаНалогов");
	Запрос   = Новый Запрос;
	Данные   = Неопределено;

	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		Возврат Сведения;
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("Строка") Тогда
		Сведения.Вставить("Представление",      ЮрФизЛицо);
		Сведения.Вставить("полноеНаименование", ЮрФизЛицо);
		Возврат Сведения;
	КонецЕсли;

	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника = "Организации";
		Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
			БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.БанковскийСчетОрганизацииПоУмолчанию(ЮрФизЛицо);
		КонецЕсли;
		РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.РеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);

	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
		Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
			БанковскийСчет = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ЮрФизЛицо);
		КонецЕсли;
		РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет);
	Иначе
		Возврат Сведения;
	КонецЕсли;

	Запрос.УстановитьПараметр("ПарЮрФизЛицо", ЮрФизЛицо);
	Запрос.УстановитьПараметр("Период", ДатаПериода);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Представление       КАК Наименование,";
	Если ИмяСправочника = "Организации" Тогда
		
	Запрос.Текст = Запрос.Текст + "
	| Организации.НаименованиеСокращенное КАК ПолноеНаименование,";  
		
	Иначе
		
	Запрос.Текст = Запрос.Текст + "
	| Организации.НаименованиеПолное КАК ПолноеНаименование,";  
		
	КонецЕсли;	
	
	Запрос.Текст = Запрос.Текст + "
	|	Организации.КодПоЕДРПОУ            КАК КодПоЕДРПОУ";
	
	Если ИмяСправочника = "Организации" Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	СистемыНалогообложенияОрганизацийСрезПоследних.ИННПлательщикаНДС  КАК ИНН,
		|	СистемыНалогообложенияОрганизацийСрезПоследних.НомерСвидетельстваПлательщикаНДС КАК НомерСвидетельства,
		|	СистемыНалогообложенияОрганизацийСрезПоследних.ИнформацияОСтатусеПлательщикаНалогов КАК ИнформацияОСтатусеПлательщикаНалогов";
	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	Организации.ИННПлательщикаНДС  КАК ИНН,
		|	Организации.НомерСвидетельстваПлательщикаНДС КАК НомерСвидетельства,
		|	"""" КАК ИнформацияОСтатусеПлательщикаНалогов";
	КонецЕсли;

	Если ИмяСправочника = "Организации" Тогда
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&Период, Организация = &ПарЮрФизЛицо) КАК СистемыНалогообложенияОрганизацийСрезПоследних
		|		ПО Организации.Ссылка = СистемыНалогообложенияОрганизацийСрезПоследних.Организация
		|
		|ГДЕ
		|	Организации.Ссылка = &ПарЮрФизЛицо";
	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК Организации
		|
		|ГДЕ
		|	Организации.Ссылка = &ПарЮрФизЛицо";
	КонецЕсли;
	

	Данные = Запрос.Выполнить().Выбрать();
	Данные.Следующий();

	Если ЮрФизЛицо.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		Сведения.Вставить("КодПоЕДРПОУ", Данные.КодПоЕДРПОУ);
	ИначеЕсли ЮрФизЛицо.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		Сведения.Вставить("КодПоЕДРПОУ", Данные.КодПоЕДРПОУ);
	Иначе
		Сведения.Вставить("КодПоДРФО", Данные.КодПоЕДРПОУ);
	КонецЕсли;

	Если ИмяСправочника = "Организации" Тогда
		
		Сведения.Вставить("НомерСчета", РеквизитыСчета.НомерСчета);
		Сведения.Вставить("Банк", РеквизитыСчета.Банк);
		Сведения.Вставить("МФО", РеквизитыСчета.КодБанка);
		
	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
		
		Сведения.Вставить("НомерСчета", РеквизитыСчета.НомерСчета);
		Сведения.Вставить("Банк", РеквизитыСчета.Банк);
		Сведения.Вставить("МФО", РеквизитыСчета.КодБанка);
		
	КонецЕсли;
	
	Сведения.Вставить("ПолноеНаименование", Данные.ПолноеНаименование);

	Если Данные <> Неопределено Тогда
		Сведения.Вставить("Представление",       Данные.Наименование);
		Сведения.Вставить("ИНН",                 Данные.ИНН);
		Сведения.Вставить("Телефоны",            ПолучитьТелефонИзКонтактнойИнформации(ЮрФизЛицо));
		Сведения.Вставить("ЮридическийАдрес",    ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо,"Юридический"));
		Сведения.Вставить("ФактическийАдрес",    ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо,"Фактический"));
		Сведения.Вставить("ПочтовыйАдрес",       ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо,"Почтовый"));
		Сведения.Вставить("НомерСвидетельства",  Данные.НомерСвидетельства);
		Сведения.Вставить("ИнформацияОСтатусеПлательщикаНалогов",  Данные.ИнформацияОСтатусеПлательщикаНалогов);

		Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
			Сведения.ПолноеНаименование = Сведения.Представление;
		КонецЕсли;
	КонецЕсли;

	Возврат Сведения;

КонецФункции // СведенияОЮрФизЛице()

// Функция находит актуальное значение адреса в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//  ТипАдреса - тип контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного адреса
//
Функция ПолучитьАдресИзКонтактнойИнформации(Объект, ТипАдреса = "")

	Если ЗначениеЗаполнено(Объект) Тогда
		
		Если ТипАдреса = "Фактический" Тогда
			Начало = "Факт";
		ИначеЕсли ТипАдреса = "Регистрации" Или ТипАдреса = "Юридический" Тогда
			Начало = "Юр";
		ИначеЕсли ТипАдреса = "Почтовый" Тогда
			Начало = "Почтовый";
		Иначе
			Начало = "";
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
			Окончание = "Организации";
			ВладелецКонтактнойИнформации = Объект;
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагента";
			ВладелецКонтактнойИнформации = Объект;
		КонецЕсли;
		
		ВидАдреса = Справочники.ВидыКонтактнойИнформации[Начало + "Адрес" + Окончание].Ссылка;

		ТабЗн = ВладелецКонтактнойИнформации.КонтактнаяИнформация.Выгрузить();
		
		НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";

КонецФункции // ПолучитьАдресИзКонтактнойИнформации()

// Функция находит актуальное значение телефона в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного телефона
//
Функция ПолучитьТелефонИзКонтактнойИнформации(Объект)

	Если ЗначениеЗаполнено(Объект) Тогда
	
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
			Окончание = "Организации";
			ВладелецКонтактнойИнформации = Объект;
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагента";
			ВладелецКонтактнойИнформации = Объект;
		КонецЕсли;

		ВидТелефона = Справочники.ВидыКонтактнойИнформации["Телефон" + Окончание].Ссылка;

		ТабЗн           = ВладелецКонтактнойИнформации.КонтактнаяИнформация.Выгрузить();
		НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ВидТелефона));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ПолучитьТелефонИзКонтактнойИнформации()

// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры: 
//  СписокСведений - список значений со значенийми параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организаиии
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина, КодЯзыка = "uk") Экспорт

	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,ЮридическийАдрес,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,ИнформацияОСтатусеПлательщикаНалогов";
	КонецЕсли;
	
	Список = СтрЗаменить(Список, "БанковскиеРеквизиты", "НомерСчета,Банк,МФО");

	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование", " ");
	СоответствиеПараметров.Вставить("КодПоЕДРПОУ",        НСтр("ru='код по ЕГРПОУ ';uk='код за ЄДРПОУ '",КодЯзыка));
	СоответствиеПараметров.Вставить("КодПоДРФО",          НСтр("ru='код по ГРФЛ ';uk='код за ДРФО '",КодЯзыка));
	СоответствиеПараметров.Вставить("ИНН",                НСтр("ru='ИНН ';uk='ІПН '",КодЯзыка));
	СоответствиеПараметров.Вставить("НомерСвидетельства", НСтр("ru='№ свид. ';uk='№ свід.  '",КодЯзыка));
	СоответствиеПараметров.Вставить("ЮридическийАдрес",   НСтр("ru='юр. адрес: ';uk='юр. адреса: '",КодЯзыка));
	СоответствиеПараметров.Вставить("ФактическийАдрес",   НСтр("ru='адрес: ';uk='адреса: '",КодЯзыка));
	СоответствиеПараметров.Вставить("Телефоны",           НСтр("ru='тел.: ';uk='тел.: '",КодЯзыка));
	СоответствиеПараметров.Вставить("НомерСчета",         НСтр("ru='р/с ';uk='р/р '",КодЯзыка));
	СоответствиеПараметров.Вставить("Банк",               НСтр("ru='в банке ';uk='у банку '",КодЯзыка));
	СоответствиеПараметров.Вставить("МФО",                НСтр("ru= 'МФО ';uk='МФО '",КодЯзыка));
	СоответствиеПараметров.Вставить("ИнформацияОСтатусеПлательщикаНалогов",НСтр("ru='';uk=''",КодЯзыка));

	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");

	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список       = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
			Если ИмяПараметра = "/" Тогда
				НоваяСтрока = Истина;
				Продолжить;
			КонецЕсли; 

			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если ПустаяСтрока(Результат)Тогда 
					// это первый параметр, выведем префикс с большой буквы
					Префикс = ВРег(Лев(Префикс,1)) + Сред(Префикс,2);
				ИначеЕсли НоваяСтрока Тогда
					Результат = Результат + "," +Символы.ПС;
				Иначе
					Результат = Результат + ", " 
				КонецЕсли; 
				НоваяСтрока = Ложь;
				
				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СокрЛП(СтрокаДополнения);
			Исключение
				
				ТекстСообщения  = НСтр("ru='Не удалось определить значение параметра организации: %ИмяПараметра%'");
				ТекстСообщения  = СтрЗаменить(ТекстСообщения, "%ИмяПараметра%", ИмяПараметра);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецПопытки;

		КонецЕсли;

	КонецЦикла;

	Возврат СокрЛП(Результат);

КонецФункции // ОписаниеОрганизации()

//Функция возвращает информацию об ответственных лицах организации и их должностях 
Функция ОтветственныеЛицаОрганизаций(Организация, ДатаСреза, Исполнитель = Неопределено, ПолноеФИО = Ложь) Экспорт

	Результат = Новый Структура("Руководитель, РуководительДолжность, ГлавныйБухгалтер, Кассир, Исполнитель, ИсполнительДолжность, ОтветственныйЗаРегистры");

	Если Организация <> Неопределено тогда
		
		ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
		ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
					
		ЗапросПоЛицам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
		|	ЕСТЬNULL(ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование, """") КАК Должность,
		|	ВЫБОР
		|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
		|			ТОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование
		|ИНАЧЕ";
		
		Если Не ПолноеФИО Тогда
			ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст +"
			|ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
			|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
			|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
			|				ИНАЧЕ """"
			|			КОНЕЦ + ВЫБОР
			|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
			|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
			|				ИНАЧЕ """"
			|			КОНЕЦ";
		Иначе
			ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст +"
			|ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество";
		КонецЕсли;
		
		ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст + "
		|	КОНЕЦ КАК ФИОПолное
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ФИОФизЛицСрезПоследних
		|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
		
		Выборка = ЗапросПоЛицам.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
				Результат.Руководитель            = Выборка.ФИОПолное;
				Результат.РуководительДолжность   = Выборка.Должность;
				
			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
				Результат.ГлавныйБухгалтер        = Выборка.ФИОПолное;
				
			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
				Результат.Кассир                  = Выборка.ФИОПолное;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОтветственныеЛицаОрганизаций()

Функция СформироватьЗаголовокДокумента(Шапка, НазваниеДокумента = "", Знач КодЯзыка = "uk") Экспорт
	
	Если НазваниеДокумента = ""
		И Шапка.Свойство("Представление")
		И ЗначениеЗаполнено(Шапка.Представление) Тогда
		
		ПоложениеНомера = Найти(Шапка.Представление,Шапка.Номер);
		
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(Шапка.Представление,ПоложениеНомера-1));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НазваниеДокумента
		+ " № " + ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.Номер, Ложь, Истина)
		+ " від " + Формат(Шапка.Дата, "ДФ='дд ММММ гггг';Л=uk_UA") + " р.";
	
КонецФункции

// Функция возвращает представление номенклатуры для печати.
//
// Параметры:
// 		НаименованиеНоменклатуры - Строка
// 		Характеристика - Строка
// 		Упаковка - Строка
// 		Серия - Строка
// 		Содержание - Строка
//
// Возвращаемое значение:
// 		Строка - Представление номенклатуры для печати
//
Функция ПолучитьПредставлениеНоменклатурыДляПечати(
	НаименованиеНоменклатуры,
	Характеристика = Неопределено,
	Упаковка = Неопределено,
	Серия = Неопределено,
	Содержание = Неопределено) Экспорт
	
	ПредставлениеНоменклатуры = СокрЛП(НаименованиеНоменклатуры);
	
	Если ЗначениеЗаполнено(Содержание) Тогда
		
		ПредставлениеНоменклатуры = Содержание;
		
	ИначеЕсли ЗначениеЗаполнено(Характеристика)
		ИЛИ ЗначениеЗаполнено(Упаковка)
		ИЛИ ЗначениеЗаполнено(Серия) Тогда
		
		ТекстВСкобках = "";
		Если ЗначениеЗаполнено(Характеристика) Тогда
			ТекстВСкобках = ТекстВСкобках + ", " + Характеристика;
		КонецЕсли;
		Если ЗначениеЗаполнено(Упаковка) Тогда
			ТекстВСкобках = ТекстВСкобках + ", " + Упаковка;
		КонецЕсли;
		Если ЗначениеЗаполнено(Серия) Тогда
			ТекстВСкобках = ТекстВСкобках + ", " + Серия;
		КонецЕсли;
		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры + " ("+ Сред(ТекстВСкобках, 3) + ")";
		
	КонецЕсли;
	
	Возврат ПредставлениеНоменклатуры;
	
КонецФункции // ПолучитьПредставлениеНоменклатурыДляПечати()

// Функция формирует фамилию и инициалы либо по наименованию элемента спр-ка ФизическиеЛица
//  либо по переданным строкам.
//  Если передан Объект, то извлеченная из него строка считается совокупностью 
//  Фамилия + Имя + Отчество, разделенными пробелами.
//
// Параметры
//  Объект		- строка или ссылка или объект элемента спр-ка ФизическиеЛица.
//  Фамилия		- фамилия физ. лица.
//  Имя			- имя физ. лица.
//  Отчество	- отчество физ. лица.
//
// Возвращаемое значение 
//  Фамилия и Инициалы одной строкой. Побочные эффекты - переданная целая строка 
//  Побочные эффекты - переданная целая строка разбивается на подстроки, соответствующие
//  отдельным Фамилии,Имени и Отчеству
//
Функция ФамилияИнициалыФизЛица(Объект = "", Фамилия = " ", Имя = " ", Отчество = " ") Экспорт

	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("Строка") Тогда
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект)," ");
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица") Или ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект.Наименование)," ");
	Иначе
		
		// используем возможно переданные отдельные строки
		Возврат ?(Не ПустаяСтрока(Фамилия), 
				Фамилия + ?(Не ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(Не ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"")
	КонецЕсли;
	
	КоличествоПодстрок = ФИО.Количество();
	Фамилия            = ?(КоличествоПодстрок > 0,ФИО[0],"");
	Имя                = ?(КоличествоПодстрок > 1,ФИО[1],"");
	Отчество           = ?(КоличествоПодстрок > 2,ФИО[2],"");
	
	Возврат ?(Не ПустаяСтрока(Фамилия), 
				Фамилия + ?(Не ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(Не ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"");
				
КонецФункции // ФамилияИнициалыФизЛица()

// Функция собирает фамилию, имя и отчество физ. лица на указанную дату
//
// Параметры: 
//  ФизЛицо.    - физ. лицо, для которго необходимо получить данные
//  ДатаПериода - дата получения сведений
//
// Возвращаемое значение:
//  Структура с данными.
//
Функция ФамилияИмяОтчество(ФизЛицо, ДатаПериода) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПарФизЛицо",     ФизЛицо);
	Запрос.УстановитьПараметр("ПарДатаПериода", ДатаПериода);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Фамилия,
	|	Имя,
	|	Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ПарДатаПериода, ФизЛицо = &ПарФизЛицо)
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Результат = Новый Структура("Фамилия, Имя, Отчество");

	Результат.Фамилия  = ?(Не ЗначениеЗаполнено(Шапка.Фамилия),  "", Шапка.Фамилия);
	Результат.Имя      = ?(Не ЗначениеЗаполнено(Шапка.Имя),      "", Шапка.Имя);
	Результат.Отчество = ?(Не ЗначениеЗаполнено(Шапка.Отчество), "", Шапка.Отчество);

	Возврат Результат;

КонецФункции // ФамилияИмяОтчество()

// Функция возвращает, имя дополнительной колонки, выводимой в таблицу товаров
//
Функция ИмяДополнительнойКолонки() Экспорт
	
	ДопКолонка =  ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПечатныхФормДокументов");
	
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		Возврат "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		Возврат "Код";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ИмяДополнительнойКолонки()

// Функция формирует представление суммы прописью в указанной валюте
//
// Параметры:
//  Сумма - Число - Сумма, которую надо представить прописью 
//  Валюта - СправочникСсылка.Валюты - Валюта, в которой нужно представить сумму.
//  ВыводитьСуммуБезКопеек - Булево - Флаг представления суммы без копеек.
//
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция СформироватьСуммуПрописью(Знач Сумма, ВыводитьСуммуБезКопеек = Ложь, КодЯзыка = "ru") Экспорт

	Результат         = ?(Сумма < 0, -Сумма, Сумма);
	ЦелаяЧасть        = Цел(Результат);
	ФорматСтрока      = НСтр("ru='Л=ru_RU; ДП=Ложь';uk='Л=uk_UK; ДП=Ложь'", КодЯзыка);
	ПараметрыПредмета = НСтр("ru='гривна, гривны, гривен, ж, копейка, копейки, копеек, ж, 2';uk='гривня, гривні, гривень, ж, копійка, копійки, копійок, ж, 2'", КодЯзыка);
	
	Если Результат = ЦелаяЧасть Тогда
		
		Если ВыводитьСуммуБезКопеек Тогда
			
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПараметрыПредмета);
			Результат = Лев(Результат, Найти(Результат, "0") - 1);
			
		Иначе
			
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПараметрыПредмета);
			
		КонецЕсли;
		
	Иначе
		
		Результат = ЧислоПрописью(Результат, ФорматСтрока, ПараметрыПредмета);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СформироватьСуммуПрописью()

// Стандартная для данной конфигурации функция форматирования прописи количества
//
// Параметры: 
//  Количество - число, которое мы хотим форматировать
//
// Возвращаемое значение:
//  Отформатированное должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество) Экспорт

	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);

	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, десятая, десятых, десятых, м, 1";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, сотая, сотых, сотых, м, 2";
	Иначе
		ПараметрыПрописи = "целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3";
	КонецЕсли;

	Возврат ЧислоПрописью(Количество, ,ПараметрыПрописи);

КонецФункции // КоличествоПрописью()

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Знач Сумма, Валюта = "грн.", ЧН = "0,00", ЧГ = "3,0") Экспорт
	
	Сумма = ?(Сумма < 0, -Сумма, Сумма);
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
					?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
					?(НЕ ЗначениеЗаполнено(ЧГ),"", ";" + "ЧГ=" + ЧГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	
	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()

///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ЗАПОЛНЕНИЯ ТАБЛИЧНЫХ ДОКУМЕНТОВ ПЕЧАТНЫХ ФОРМ


// Формирует описание характеристик ТМЦ для печати
//
// Параметры
//  Выборка  – <ВыборкаИзРезультатаЗапроса > – Исходные данные
//
// Возвращаемое значение:
//   Строка - Описание характеристик ТМЦ
//
Функция ПредставлениеХарактеристик(Выборка) Экспорт
	
	Результат = "(";
	
	Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
		Результат = Результат + Выборка.Характеристика;
	КонецЕсли;
	
	Результат = Результат + ")";
	
	Возврат ?(Результат = "()", "", " " + Результат)
	
КонецФункции // ПредставлениеХарактеристик()



//ФОРМИРОВАНИЕ 1-ТН(ТТН)

// Процедура заполняет табличный документ ТТН.
//
Процедура ЗаполнитьТабличныйДокументТТН(ТабличныйДокумент, Запрос, ОбъектыПечати) Экспорт
	
	
	ЕдиницаИзмеренияВеса           = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ЕдиницаИзмеренияВеса");
	
	КоэффициентПересчетаВТонны = 0.001;

	ЗаполнитьНастройкиТабДокумента(ТабличныйДокумент);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ДанныеПечати = МассивРезультатов[0].Выбрать();
	ВыборкаПоДокументам = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		Если ДанныеПечати.Дата < Дата("20140114") Тогда
			Макет = УправлениеПечатью.ПолучитьМакет("ОбщийМакет.ПФ_MXL_ТТН");
			НоваяФорма = Ложь;
		Иначе 
	    	Макет = УправлениеПечатью.ПолучитьМакет("ОбщийМакет.ПФ_MXL_ТТН_2014");
			НоваяФорма = Истина;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
			
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если НЕ НоваяФорма Тогда
			ЗаполнитьРеквизитыШапкиТТН(ДанныеПечати, Макет, ТабличныйДокумент);
		КонецЕсли;
				
		НомерСтраницы = 1;
		ИтоговыеСуммы = СтруктураИтоговыеСуммыТТН();
		
		ДанныеСтроки = СтруктураДанныеСтрокиТТН();
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть докмента
		ОбластьЗаголовокТаблицы      = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьМакета                = Макет.ПолучитьОбласть("Строка");
		ОбластьВсего                 = Макет.ПолучитьОбласть("Всего");
		Если НоваяФорма Тогда
			ТабличныйДокументВременный = Новый ТабличныйДокумент;
			
			ОбластьПодписи               = Макет.ПолучитьОбласть("Подписи");
			ОбластьПогрузочныеОперации   = Макет.ПолучитьОбласть("ПогрузочныеОперации");
		Иначе
			ОбластьПодвала               = Макет.ПолучитьОбласть("Подвал");
			ОбластьПогрузочныеОперации   = Макет.ПолучитьОбласть("ПогрузочныеОперации");
			ОбластьПрочихСведений        = Макет.ПолучитьОбласть("ПрочиеСведения");
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		КоличествоСтрок = ВыборкаПоДокументам.Количество();
		
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		Пока СтрокаТовары.Следующий() Цикл
			
			ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
			Если НоваяФорма Тогда
				ЗаполнитьРеквизитыСтрокиТовараТТН_2014(ДанныеПечати, СтрокаТовары, ДанныеСтроки, ОбластьМакета, ЕдиницаИзмеренияВеса, КоэффициентПересчетаВТонны);
				
				ТабличныйДокументВременный.Вывести(ОбластьМакета);
			Иначе
				ЗаполнитьРеквизитыСтрокиТовараТТН(ДанныеПечати, СтрокаТовары, ДанныеСтроки, ОбластьМакета, ЕдиницаИзмеренияВеса, КоэффициентПересчетаВТонны);
				
				Если ДанныеСтроки.Номер = 1 Тогда // первая строка
				
					ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
				КонецЕсли;
			
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
				
			РассчитатьИтоговыеСуммыТТН(ИтоговыеСуммы, ДанныеСтроки);
			
		КонецЦикла;
		
		Если НоваяФорма Тогда
			ДобавитьИтоговыеДанныеПодвалаТТН(ИтоговыеСуммы, ДанныеСтроки.Номер, КоэффициентПересчетаВТонны);
			ЗаполнитьРеквизитыШапкиТТН_2014(ДанныеПечати, Макет, ТабличныйДокумент, ИтоговыеСуммы);
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
			ТабличныйДокумент.Вывести(ТабличныйДокументВременный);
		КонецЕсли;
		
		
		// Выводим итоги по документу в целом
		ОбластьМакета = Макет.ПолучитьОбласть("Всего");
		ОбластьМакета.Параметры.ИтогоКоличество = ИтоговыеСуммы.ИтогоКоличество;
		ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ИтоговыеСуммы.ИтогоСумма;
		Если НоваяФорма Тогда
			ОбластьМакета.Параметры.ИтогоМасса      = ИтоговыеСуммы.ИтогоМасса;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если НоваяФорма Тогда
			ТабличныйДокумент.Вывести(ОбластьПодписи);
			ТабличныйДокумент.Вывести(ОбластьПогрузочныеОперации);
		Иначе
			// Выводим подвал документа
			ДобавитьИтоговыеДанныеПодвалаТТН(ИтоговыеСуммы, ДанныеСтроки.Номер, КоэффициентПересчетаВТонны);
			ЗаполнитьРеквизитыПодвалаТТН(ДанныеПечати, ИтоговыеСуммы, Макет, ТабличныйДокумент);
		
			ТабличныйДокумент.Вывести(ОбластьПогрузочныеОперации);
			ТабличныйДокумент.Вывести(ОбластьПрочихСведений);
		КонецЕсли;
	
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабличныйДокументТТН()

Процедура ЗаполнитьНастройкиТабДокумента(ТабличныйДокумент)
	
	ТабличныйДокумент.ПолеСверху = 0;
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСнизу = 0;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
КонецПроцедуры

// Функция формирования структуры хранения итоговых суммы.
//
// Возвращаемое значение:
//	Структура - Структура хранения итоговых сумм
//
Функция СтруктураИтоговыеСуммыТТН()
	
	Структура = Новый Структура;
	
	// Инициализация итогов по странице.
	
	// Инициализация итогов по документу.
	Структура.Вставить("ИтогоМасса", 0);
	Структура.Вставить("ИтогоМест", 0);
	Структура.Вставить("ИтогоКоличество", 0);
	Структура.Вставить("ИтогоСумма", 0);
	
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", 0);
	Структура.Вставить("СуммаПрописью", "");
	Структура.Вставить("МассаПрописью", "");
	Структура.Вставить("МестПрописью", "");
	Структура.Вставить("ИтогоСуммаНДС", 0);
	Структура.Вставить("ИтогоСуммаНДССВалютой", "");
	
	Возврат Структура;
	
КонецФункции // СтруктураИтоговыеСуммы()

// Функция формирования структуры хранения данных строки.
//
//
// Возвращаемое значение:
//	Структура - Структура данных строки товаров
//
Функция СтруктураДанныеСтрокиТТН()
	
	Структура = Новый Структура;
	Структура.Вставить("Номер", 0);
	Структура.Вставить("Мест", 0);
	Структура.Вставить("Количество", 0);
	Структура.Вставить("Цена", 0);
	Структура.Вставить("Сумма", 0);
	Структура.Вставить("Масса", 0);
	Структура.Вставить("СуммаНДС", 0);
	
	Возврат Структура;
	
КонецФункции

// Процедура рассчитывает итоговые суммы с учетом строки товаров.
//
// Параметры:
//	ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//	ДанныеСтроки - Структура - Структура данных строки товаров
//
Процедура РассчитатьИтоговыеСуммыТТН(ИтоговыеСуммы, ДанныеСтроки)
	
	
	// Увеличим итоги по документу.
	ИтоговыеСуммы.ИтогоМест       = ИтоговыеСуммы.ИтогоМест        + ДанныеСтроки.Мест;
	ИтоговыеСуммы.ИтогоКоличество = ИтоговыеСуммы.ИтогоКоличество  + ДанныеСтроки.Количество;
	ИтоговыеСуммы.ИтогоСумма      = ИтоговыеСуммы.ИтогоСумма       + ДанныеСтроки.Сумма;
	ИтоговыеСуммы.ИтогоМасса	  = ИтоговыеСуммы.ИтогоМасса + ДанныеСтроки.Масса;
	ИтоговыеСуммы.ИтогоСуммаНДС    = ИтоговыеСуммы.ИтогоСуммаНДС    + ДанныеСтроки.СуммаНДС;
	
КонецПроцедуры 

// Процедура формирует итоговые данные для вывода в подвал.
//
Процедура ДобавитьИтоговыеДанныеПодвалаТТН(ИтоговыеСуммы, ВсегоНомеров, КоэффициентПересчетаВТонны)
	
	ИтоговыеСуммы.Вставить("СуммаПрописью", СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоСумма,, "uk"));
	
	КоличествоМест = ?(Цел(ИтоговыеСуммы.ИтогоМест) = ИтоговыеСуммы.ИтогоМест, ИтоговыеСуммы.ИтогоМест, Цел(ИтоговыеСуммы.ИтогоМест) + 1);
	КоличествоМестПрописью = НРег(ЧислоПрописью(КоличествоМест,"Л=uk_UK", ",,,с"));
	ИтоговыеСуммы.Вставить("МестПрописью", Лев(КоличествоМестПрописью,СтрДлина(КоличествоМестПрописью)-3));
	
	ИтоговыеСуммы.ИтогоМасса = Окр(ИтоговыеСуммы.ИтогоМасса*КоэффициентПересчетаВТонны, 2 , РежимОкругления.Окр15как20);
	Масса = ?(Цел(ИтоговыеСуммы.ИтогоМасса) = ИтоговыеСуммы.ИтогоМасса, ИтоговыеСуммы.ИтогоМасса, Цел(ИтоговыеСуммы.ИтогоМасса) + 1);
	МассаПрописью = НРег(ЧислоПрописью(Масса,"Л=uk_UK", ",,,ж"));
	ИтоговыеСуммы.Вставить("МассаПрописью", ?(Масса = 0, "", Лев(МассаПрописью,СтрДлина(МассаПрописью)-3)));
	
	ИтоговыеСуммы.Вставить("ИтогоСуммаНДССВалютой", ФорматСумм(ИтоговыеСуммы.ИтогоСуммаНДС, "грн.", "0"));
	
КонецПроцедуры // ДобавитьИтоговыеДанныеПодвала()

// Процедура заполнения реквизитов строки товара.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//	СтрокаТовары - ВыборкаИзРезультатаЗапроса - Текущая строка товаров
//	ДанныеСтроки - Структура - Данные строки товаров
//	ОбластьМакета - ОбластьЯчеекТабличногоДокумента - Область для вывода строки товаров
//	ТабличныйДокумент - Табличный документа
//
Процедура ЗаполнитьРеквизитыСтрокиТовараТТН(ДанныеПечати, СтрокаТовары, ДанныеСтроки, ОбластьМакета, ЕдиницаИзмеренияВеса = Неопределено, КоэффициентПересчетаВТонны = 0)
	
	ОбластьМакета.Параметры.ТоварНаименование = ПолучитьПредставлениеНоменклатурыДляПечати(
		СтрокаТовары.ТоварНаименование,
		СтрокаТовары.Характеристика
		);
		
	ОбластьМакета.Параметры.КодПродукции = СтрокаТовары.ТоварКод;
	
	Если ЕдиницаИзмеренияВеса <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
			ДанныеСтроки.Масса = 0;
		Иначе
			ДанныеСтроки.Масса = СтрокаТовары.Масса;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСтроки.Сумма   = Окр((СтрокаТовары.Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СтрокаТовары.СуммаНДС)), 2);
	
	ДанныеСтроки.Цена = ?(СтрокаТовары.Количество = 0, СтрокаТовары.Цена, ДанныеСтроки.Сумма / СтрокаТовары.Количество);
	
	ДанныеСтроки.Мест = СтрокаТовары.КоличествоМест;
	ДанныеСтроки.Количество  = СтрокаТовары.Количество;
	
	ОбластьМакета.Параметры.Цена = ДанныеСтроки.Цена;
	ОбластьМакета.Параметры.Сумма = ДанныеСтроки.Сумма;
	ОбластьМакета.Параметры.Количество = ДанныеСтроки.Количество;
	ОбластьМакета.Параметры.КоличествоМест = ДанныеСтроки.Мест;
	ОбластьМакета.Параметры.БазоваяЕдиницаНаименование = СтрокаТовары.БазоваяЕдиницаНаименование;
	ОбластьМакета.Параметры.ВидУпаковки = СтрокаТовары.ВидУпаковки;
	ОбластьМакета.Параметры.Масса = Окр(СтрокаТовары.Масса*КоэффициентПересчетаВТонны, 2 , РежимОкругления.Окр15как20);
		
КонецПроцедуры // ЗаполнитьРеквизитыСтрокиТовара()

// Процедура заполнения реквизитов строки товара.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//	СтрокаТовары - ВыборкаИзРезультатаЗапроса - Текущая строка товаров
//	ДанныеСтроки - Структура - Данные строки товаров
//	ОбластьМакета - ОбластьЯчеекТабличногоДокумента - Область для вывода строки товаров
//	ТабличныйДокумент - Табличный документа
//
Процедура ЗаполнитьРеквизитыСтрокиТовараТТН_2014(ДанныеПечати, СтрокаТовары, ДанныеСтроки, ОбластьМакета, ЕдиницаИзмеренияВеса = Неопределено, КоэффициентПересчетаВТонны = 0)
	
	ОбластьМакета.Параметры.НомерСтроки = СтрокаТовары.НомерСтроки;
	
	ОбластьМакета.Параметры.ТоварНаименование = ПолучитьПредставлениеНоменклатурыДляПечати(
		СтрокаТовары.ТоварНаименование,
		СтрокаТовары.Характеристика
	);
	
	Если ЕдиницаИзмеренияВеса <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
			ДанныеСтроки.Масса = 0;
		Иначе
			ДанныеСтроки.Масса = СтрокаТовары.Масса;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСтроки.Сумма   = Окр((СтрокаТовары.Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СтрокаТовары.СуммаНДС)), 2);
	ДанныеСтроки.СуммаНДС = Окр(СтрокаТовары.СуммаНДС, 2);
	
	Если ДанныеПечати.ЦенаВключаетНДС Тогда
		ДанныеСтроки.Цена = ?(СтрокаТовары.Количество = 0, 0, Окр((СтрокаТовары.Сумма - СтрокаТовары.СуммаНДС) / СтрокаТовары.Количество, 2));
	Иначе
		ДанныеСтроки.Цена = СтрокаТовары.Цена;
	КонецЕсли;
	
	ДанныеСтроки.Мест = СтрокаТовары.КоличествоМест;
	ДанныеСтроки.Количество  = СтрокаТовары.Количество;
	
	ОбластьМакета.Параметры.Цена = ДанныеСтроки.Цена;
	ОбластьМакета.Параметры.Сумма = ДанныеСтроки.Сумма;
	ОбластьМакета.Параметры.Количество = ДанныеСтроки.Количество;
	ОбластьМакета.Параметры.БазоваяЕдиницаНаименование = СтрокаТовары.БазоваяЕдиницаНаименование;
	ОбластьМакета.Параметры.ВидУпаковки = СтрокаТовары.ВидУпаковки;
	ОбластьМакета.Параметры.Масса = Окр(СтрокаТовары.Масса*КоэффициентПересчетаВТонны, 2 , РежимОкругления.Окр15как20);
		
КонецПроцедуры // ЗаполнитьРеквизитыСтрокиТовара()

// Процедура заполнения реквизитов шапки ТТН.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//	Макет - Макет ТТН
//	ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыШапкиТТН(ДанныеПечати, Макет, ТабличныйДокумент)
	
	КодЯзыкаПечать = "uk";

	
	// Выводим общие реквизиты шапки
	СведенияОПокупателе       = СведенияОЮрФизЛице(ДанныеПечати.Контрагент,       ДанныеПечати.Дата);
	СведенияОГрузополучателе  = СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,  ДанныеПечати.Дата);
	СведенияОГрузоотправитель = СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата);
	СведенияОПоставщике       = СведенияОЮрФизЛице(ДанныеПечати.Организация,      ДанныеПечати.Дата);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	ОбластьМакета.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Ложь, Истина);
	ОбластьМакета.Параметры.ДатаДокумента  = ДанныеПечати.Дата;
	
	МаркаИГосНомерАвтомобиля = СокрЛП(ДанныеПечати.МаркаАвтомобиля);
	Если ЗначениеЗаполнено(МаркаИГосНомерАвтомобиля) И ЗначениеЗаполнено(ДанныеПечати.ГосНомерАвтомобиля) Тогда
		МаркаИГосНомерАвтомобиля = МаркаИГосНомерАвтомобиля + ", ";
	КонецЕсли;
	ОбластьМакета.Параметры.МаркаИГосНомерАвтомобиля = МаркаИГосНомерАвтомобиля + СокрЛП(ДанныеПечати.ГосНомерАвтомобиля);
	
	ОбластьМакета.Параметры.ОрганизацияПеревозчик = ДанныеПечати.Перевозчик;
		
	ОбластьМакета.Параметры.ФИОВодителя = ДанныеПечати.Водитель;			
	
	Если ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель Тогда
		ОбластьМакета.Параметры.ГрузоотправительПредставление = ОписаниеОрганизации(СведенияОПоставщике,
			"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО",,КодЯзыкаПечать);
	Иначе
		ОбластьМакета.Параметры.ГрузоотправительПредставление = ОписаниеОрганизации(СведенияОГрузоотправитель, 
			"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО",,КодЯзыкаПечать);
	КонецЕсли;
	
	ОбластьМакета.Параметры.ГрузополучательПредставление = ОписаниеОрганизации(СведенияОГрузополучателе, 
	    "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО",,КодЯзыкаПечать);
 	ОбластьМакета.Параметры.ПлательщикПредставление = ОписаниеОрганизации(СведенияОПокупателе, 
		"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО",,КодЯзыкаПечать);

	// Выводим всевозможные коды
	ОбластьМакета.Параметры.ГрузоотправительЕДРПОУ     = СведенияОГрузоотправитель.КодПоЕДРПОУ;
	ОбластьМакета.Параметры.ГрузополучательЕДРПОУ      = СведенияОГрузополучателе.КодПоЕДРПОУ;
	ОбластьМакета.Параметры.ПлательщикЕДРПОУ           = СведенияОПокупателе.КодПоЕДРПОУ;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры // ЗаполнитьРеквизитыШапкиТТН()

Процедура ЗаполнитьРеквизитыШапкиТТН_2014(ДанныеПечати, Макет, ТабличныйДокумент, ИтоговыеСуммы)
	
	КодЯзыкаПечать = "uk";
	
	// Выводим общие реквизиты шапки
	СведенияОПокупателе       = СведенияОЮрФизЛице(ДанныеПечати.Контрагент,       ДанныеПечати.Дата);
	СведенияОГрузополучателе  = СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,  ДанныеПечати.Дата);
	СведенияОГрузоотправитель = СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата);
	СведенияОПоставщике       = СведенияОЮрФизЛице(ДанныеПечати.Организация,      ДанныеПечати.Дата);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	ОбластьМакета.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Ложь, Истина);
	ОбластьМакета.Параметры.ДатаДокумента  = ДанныеПечати.Дата;
	
	МаркаИГосНомерАвтомобиля = СокрЛП(ДанныеПечати.МаркаАвтомобиля);
	Если ЗначениеЗаполнено(МаркаИГосНомерАвтомобиля) И ЗначениеЗаполнено(ДанныеПечати.ГосНомерАвтомобиля) Тогда
		МаркаИГосНомерАвтомобиля = МаркаИГосНомерАвтомобиля + ", ";
	КонецЕсли;
	ОбластьМакета.Параметры.МаркаИГосНомерАвтомобиля = МаркаИГосНомерАвтомобиля + СокрЛП(ДанныеПечати.ГосНомерАвтомобиля);
	
	ОбластьМакета.Параметры.ОрганизацияПеревозчик = ДанныеПечати.Перевозчик;
		
	ОбластьМакета.Параметры.ФИОВодителя = ДанныеПечати.Водитель;			
	
	Если ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель Тогда
		ОбластьМакета.Параметры.ГрузоотправительПредставление = ОписаниеОрганизации(СведенияОПоставщике,
			"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО",,КодЯзыкаПечать);
	Иначе
		ОбластьМакета.Параметры.ГрузоотправительПредставление = ОписаниеОрганизации(СведенияОГрузоотправитель, 
			"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО",,КодЯзыкаПечать);
	КонецЕсли;
	
	ОбластьМакета.Параметры.ГрузополучательПредставление = ОписаниеОрганизации(СведенияОГрузополучателе, 
	    "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО",,КодЯзыкаПечать);

 	ОбластьМакета.Параметры.ПлательщикПредставление = ОписаниеОрганизации(СведенияОПокупателе, 
		"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО",,КодЯзыкаПечать);
		
	// Руководители
	Руководители = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(ДанныеПечати.Руководители, ДанныеПечати.Дата);
		
	ОбластьМакета.Параметры.ОтпускРазрешилДолжность    = Руководители.РуководительДолжность;
	ОбластьМакета.Параметры.ОтпущеноНаСуммуПрописью    = ИтоговыеСуммы.СуммаПрописью;
	
	//ПараметрыПрописи = Локализация.ПараметрыПрописи(Валюта, КодЯзыка);
	ОбластьМакета.Параметры.СуммаНДС                = ИтоговыеСуммы.ИтогоСуммаНДССВалютой;
	
	ОбластьМакета.Параметры.КоличествоМестПрописью  = ИтоговыеСуммы.МестПрописью;
	ОбластьМакета.Параметры.ИтогоМасса              = ИтоговыеСуммы.МассаПрописью;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры // ЗаполнитьРеквизитыШапкиТТН()

// Процедура заполнения реквизитов подвала ТТН.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//	ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//	Макет - Макет ТТН
//	ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыПодвалаТТН(ДанныеПечати, ИтоговыеСуммы, Макет, ТабличныйДокумент)
	
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
	// Руководители
	Руководители = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(ДанныеПечати.Руководители, ДанныеПечати.Дата);
	
	ОбластьМакета.Параметры.ОтпускРазрешилДолжность = Руководители.РуководительДолжность;
	ОбластьМакета.Параметры.ОтпущеноНаСуммуПрописью = ИтоговыеСуммы.СуммаПрописью;	
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	
КонецПроцедуры // ЗаполнитьРеквизитыПодвалаТТН()



Функция СформироватьЗаголовкиДляСуммовыхПоказателей(ВыборкаШапка, КодЯзыка = "ru", ЭтоКомиссионнаяПродажа = Ложь) Экспорт
	
	Если ЭтоКомиссионнаяПродажа Тогда
		СтруктураПараметров = Новый Структура("ЦенаКомитента, СуммаКомитента, ЦенаПродажи, СуммаПродажи, СуммаВознаграждения");
	Иначе		
		СтруктураПараметров = Новый Структура("Цена, Сумма");
	КонецЕсли;
	
	Суффикс = "";
	Если ВыборкаШапка.УчитыватьНДС Тогда
		Если ВыборкаШапка.ЦенаВключаетНДС Тогда
			Суффикс = Суффикс + НСтр("ru = ' с '; uk = ' з '", КодЯзыка);
		Иначе	
			Суффикс = Суффикс + НСтр("ru = ' без '; uk = ' без '", КодЯзыка);
		КонецЕсли;
		Суффикс = Суффикс + НСтр("ru = 'НДС'; uk = 'ПДВ'", КодЯзыка);
	КонецЕсли;
	
	ПредставлениеЦены  = НСтр("ru = 'Цена'; uk = 'Ціна'", КодЯзыка) + Суффикс;
	ПредставлениеСуммы = НСтр("ru = 'Сумма'; uk = 'Сума'", КодЯзыка) + Суффикс;
	
	Если ЭтоКомиссионнаяПродажа Тогда
		Суффикс = НСтр("ru = ' комитента'; uk = ' комітента'", КодЯзыка);
		СтруктураПараметров.ЦенаКомитента  = ПредставлениеЦены + Суффикс;
		СтруктураПараметров.СуммаКомитента = ПредставлениеСуммы + Суффикс;
		
		Суффикс = НСтр("ru = ' продажи'; uk = ' продажу'", КодЯзыка);
		СтруктураПараметров.ЦенаПродажи  = ПредставлениеЦены + Суффикс;
		СтруктураПараметров.СуммаПродажи = ПредставлениеСуммы + Суффикс;
		
		Суффикс = НСтр("ru = ' вознаграждения'; uk = ' винагороди'", КодЯзыка);
		СтруктураПараметров.СуммаВознаграждения = ПредставлениеСуммы + Суффикс;
	Иначе		
		СтруктураПараметров.Цена  = ПредставлениеЦены;
		СтруктураПараметров.Сумма = ПредставлениеСуммы;	
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции



