///////////////////////////////////////////////////////////////////////////////////
// Процедуры для подготовки и записи движений документа.

// Процедура инициализирует общие структуры, используемые при проведении документов.
// Вызывается из модуля документов при проведении.
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойства, РежимПроведения = Неопределено) Экспорт

	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения".

	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);

	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
//	Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных таблиц.
//	Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение (признак наличия записей во временной таблице).
	ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	ДополнительныеСвойства.ДляПроведения.Вставить("РежимПроведения",           РежимПроведения);
	ДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента",       ДокументСсылка.Метаданные());
	ДополнительныеСвойства.ДляПроведения.Вставить("Ссылка",                    ДокументСсылка);

	ДляКонтроляРезервов = Новый Структура(
		"ВыполнитьПроверкуРезерва, Магазин"
		, Ложь, Справочники.Магазины.ПустаяСсылка());
	ДополнительныеСвойства.ДляПроведения.Вставить("ДляКонтроляРезервов", ДляКонтроляРезервов);

КонецПроцедуры

//Процедура закрывает МВТ, используемый при формировании движений
//
Процедура ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства) Экспорт

	Если ДополнительныеСвойства.Свойство("ДляПроведения")
	И	 ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы")	Тогда

		ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();

	КонецЕсли;

КонецПроцедуры

// Функция формирует массив имен регистров, по которым документ имеет движения.
// Вызывается при подготовке записей к регистрации движений.
//
Функция ПолучитьМассивИспользуемыхРегистров(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);

	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;

	СчетчикТаблиц   = 0;
	СчетчикДвижений = 0;

	ВсегоДвижений = Движения.Количество();
	ТекстЗапроса  = "";
	Для Каждого Движение Из Движения Цикл

		СчетчикДвижений = СчетчикДвижений + 1;

		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
							И МассивИсключаемыхРегистров.Найти(Движение.Имя) <> Неопределено;

		Если Не ПропуститьРегистр Тогда

			Если СчетчикТаблиц > 0 Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";

			КонецЕсли;

			СчетчикТаблиц = СчетчикТаблиц + 1;

			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|""" + Движение.Имя + """ КАК ИмяРегистра
			|
			|ИЗ " + Движение.ПолноеИмя() + "
			|
			|ГДЕ Регистратор = &Регистратор
			|";

		КонецЕсли;

		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или СчетчикДвижений = ВсегоДвижений Тогда

			Запрос.Текст  = ТекстЗапроса;
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;

			Если Результат.Количество() = 0 Тогда

				Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");

			Иначе

				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат.Добавить(Выборка.ИмяРегистра);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Процедура выполняет пордготовку наборов записей документа к записи движений.
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
// 2. Взводит флаг записи у наборов, по которым документ имеет движения
// Вызывается из модуля документов при проведении.
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект) Экспорт

	Для Каждого НаборЗаписей Из Объект.Движения Цикл

	//	LNK 22.12.2016 10:25:35
		НазначитьДополнительныеСвойстваНаборуЗаписейПоРегистратору(НаборЗаписей, Объект.ДополнительныеСвойства);

		Если НаборЗаписей.Количество() > 0 Тогда

			НаборЗаписей.Очистить();

		КонецЕсли;

	КонецЦикла;

	Если НЕ Объект.ДополнительныеСвойства.ЭтоНовый Тогда

	//	Регистры, движения по которым формируются не из модуля менеджера документа.
		ИсключаемыеРегистры = Новый Массив;

		МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(Объект.Ссылка,
				Объект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Движения,
				ИсключаемыеРегистры
		);

		Для Каждого ИмяРегистра Из МассивИменРегистров Цикл

			Объект.Движения[ИмяРегистра].Записывать = Истина;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	LNK 22.12.2016 10:33:46
Процедура НазначитьДополнительныеСвойстваНаборуЗаписейПоРегистратору(НаборЗаписей, ДополнительныеСвойства)

	ИменаИсключений = Новый Соответствие;
	ИменаИсключений.Вставить("ТаблицыДляДвижений", Истина);
	ИменаИсключений.Вставить("ДляПроведения", Истина);

	НаборЗаписей.ДополнительныеСвойства.Вставить("СвойстваРегистратора", Новый Структура);

	Для каждого КлючЗначение Из ДополнительныеСвойства Цикл

		Если ИменаИсключений.Получить(КлючЗначение.Ключ) = Неопределено Тогда

			НаборЗаписей.ДополнительныеСвойства.СвойстваРегистратора.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Процедура записывает движения документа. Дополнительно происходит копирование параметров
// в модули наборов записей для выполнения регистрации изменений в движениях.
// Процедура вызывается из модуля документов при проведении.
//
Процедура ЗаписатьНаборыЗаписей(Знач Объект) Экспорт

	Перем РегистрыДляКонтроля;
	
//	Регистры, для которых будут рассчитаны таблицы изменений движений.
	Если Объект.ДополнительныеСвойства.ДляПроведения.Свойство("РегистрыДляКонтроля", РегистрыДляКонтроля) Тогда

		Для Каждого НаборЗаписей Из РегистрыДляКонтроля Цикл

			Если НаборЗаписей.Записывать Тогда

			//	Установка флага регистрации изменений в наборе записей.
				НаборЗаписей.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", Истина);
				НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоНовый", Объект.ДополнительныеСвойства.ЭтоНовый);

			//	Структура для передачи данных в модули наборов записей.
				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", 
					Новый Структура(
						"СтруктураВременныеТаблицы"
						, Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы
					)
				);

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

//	LNK 30.01.2017 12:26:32
	ПроведениеСервер.УстановитьСвойстваОбъектаДляКоллекцииДвижений(Объект);

	Объект.Движения.Записать();

КонецПроцедуры

//	LNK 30.01.2017 12:26:11
Процедура УстановитьСвойстваОбъектаДляКоллекцииДвижений(Объект)	Экспорт

	ИменаСвойств = Новый Массив;
	ИменаСвойств.Добавить("ПропуститьПроверкуЗапретаИзменения");
	ИменаСвойств.Добавить("ОтключитьМеханизмРегистрацииОбъектов");

	Для каждого ИмяСвойства Из ИменаСвойств Цикл

		Если Объект.ДополнительныеСвойства.Свойство(ИмяСвойства) Тогда

			Для каждого НаборЗаписей Из Объект.Движения Цикл

				Если НЕ НаборЗаписей.ДополнительныеСвойства.Свойство(ИмяСвойства) Тогда

					НаборЗаписей.ДополнительныеСвойства.Вставить(ИмяСвойства, Объект.ДополнительныеСвойства[ИмяСвойства]);

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//	LNK 27.10.2017 12:44:49
Процедура ИнициализироватьПараметрыКонтроляРезерва(Магазин, ВыполнитьПроверкуРезерва = Истина, Период, ДополнительныеСвойства)	Экспорт

	Перем ДляКонтроляРезервов;

	Если ДополнительныеСвойства.Свойство("ДляПроведения") И ДополнительныеСвойства.ДляПроведения.Свойство("ДляКонтроляРезервов", ДляКонтроляРезервов) Тогда

		ДляКонтроляРезервов.Магазин = Магазин;
		ДляКонтроляРезервов.ВыполнитьПроверкуРезерва = ВыполнитьПроверкуРезерва
			И РезервированиеТоваровСерверПовтИсп.ПроверятьРезервТовараПриОтгрузке(Магазин, Период);

	КонецЕсли;

КонецПроцедуры

//	LNK 09.01.2019 13:05:38
Функция ДокументПроведен(ДокументСсылка, Отказ, СообщитьОбОшибке = Ложь)	Экспорт

	Проведен = Ложь;

	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ДокументСсылка)) Тогда

		Запрос = Новый Запрос(СтрЗаменить(
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Проведен КАК Проведен
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &ДокументСсылка"
		, "Документ.ПеремещениеТоваров КАК", "Документ." + ДокументСсылка.Метаданные().Имя + " КАК")
		);
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда

			Проведен = Выборка.Проведен;

		КонецЕсли;

		Если НЕ Проведен Тогда

			Отказ = Истина;

			Если СообщитьОбОшибке = Истина Тогда

				Сообщить("Отказано! НЕ проведен документ «" + ДокументСсылка + "»!");

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
	Возврат Проведен;

КонецФункции

///////////////////////////////////////////////////////////////////////////////////
// Процедуры контроля движений документов по регистрам.

// Функция проверяет наличие изменений в таблице регистра.
//
Функция ЕстьИзмененияВТаблице(СтруктураДанных, Ключ)
	Перем ЕстьИзменения;

	Возврат СтруктураДанных.Свойство(Ключ, ЕстьИзменения) И ЕстьИзменения;

КонецФункции

// Процедура выполняет контроль результатов проведения.
// Процедура вызывается из модуля документов при проведении.
//
Процедура ВыполнитьКонтрольРезультатовПроведения(Объект, Отказ) Экспорт

	Если Объект.ДополнительныеСвойства.ДляПроведения.РегистрыДляКонтроля.Количество() = 0
	ИЛИ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(Объект.ДополнительныеСвойства, "ПропуститьКонтрольРезультатовПроведения", Ложь)	Тогда
		
		Возврат;
		
	КонецЕсли;

	ДанныеТаблиц    = Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	ПакетЗапросов   = Новый Запрос;
	МассивКонтролей = Новый Массив;
	ТекстЗапроса    = "";

//	Контроль отрицательных остатков по товарам на складах
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц, "ДвиженияТоварыНаСкладахИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ТоварыНаСкладах"));
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура.Код КАК Код,
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
		|	ТоварыНаСкладахОстатки.Склад КАК Склад,
		|	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			,
		|			(Номенклатура, Характеристика, Склад) В
		|				(ВЫБРАТЬ
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Склад
		|				ИЗ
		|					ДвиженияТоварыНаСкладахИзменение КАК Таблица)) КАК ТоварыНаСкладахОстатки
		|ГДЕ
		|	ТоварыНаСкладахОстатки.КоличествоОстаток < 0" + "
		|///////////////////////////////////////////////////////////////////
		|;";
		
	КонецЕсли;

//	LNK 03.07.2017 10:50:04
//	Контроль отрицательных остатков по "ДенежныеСредстваКПоступлениюНаличные"
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц, "ДвиженияДенежныеСредстваКПоступлениюНаличныеИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ДенежныеСредстваКПоступлениюНаличные"));
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ДенежныеСредстваКПоступлениюНаличные.Организация КАК Организация,
		|	ДенежныеСредстваКПоступлениюНаличные.Касса КАК Касса,
		|	ДенежныеСредстваКПоступлениюНаличные.Документ КАК Документ,
		|	ДенежныеСредстваКПоступлениюНаличные.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКПоступлениюНаличные.Остатки(
		|			,
		|			(Организация, Касса, Документ) В
		|				(ВЫБРАТЬ
		|					Таблица.Организация,
		|					Таблица.Касса,
		|					Таблица.Документ
		|				ИЗ
		|					ДвиженияДенежныеСредстваКПоступлениюНаличныеИзменение КАК Таблица)) КАК ДенежныеСредстваКПоступлениюНаличные
		|ГДЕ
		|	ДенежныеСредстваКПоступлениюНаличные.СуммаОстаток < 0" + "
		|///////////////////////////////////////////////////////////////////
		|;";
		
	КонецЕсли;

//	LNK 03.07.2017 16:06:37
//	Контроль отрицательных остатков по "ДенежныеСредстваНаличные"
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц, "ДвиженияДенежныеСредстваНаличныеИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ДенежныеСредстваНаличные"));
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ДенежныеСредстваНаличные.Организация КАК Организация,
		|	ДенежныеСредстваНаличные.Касса КАК Касса,
		|	ДенежныеСредстваНаличные.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваНаличные.Остатки(
		|			,
		|			(Организация, Касса) В
		|				(ВЫБРАТЬ
		|					Таблица.Организация,
		|					Таблица.Касса
		|				ИЗ
		|					ДвиженияДенежныеСредстваНаличныеИзменение КАК Таблица)) КАК ДенежныеСредстваНаличные
		|ГДЕ
		|	ДенежныеСредстваНаличные.СуммаОстаток < 0" + "
		|///////////////////////////////////////////////////////////////////
		|;";
		
	КонецЕсли;

//	LNK 01.12.2016 15:41:30
//	Контроль отрицательных остатков по товарам пересчитанным
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц, "ДвиженияТоварыПересчитанныеИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ТоварыПересчитанные"));
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТоварыПересчитанные.Номенклатура.Код КАК Код,
		|	ТоварыПересчитанные.ДокументОснование КАК ДокументОснование,
		|	ТоварыПересчитанные.Ведомость КАК Ведомость,
		|	ТоварыПересчитанные.Номенклатура КАК Номенклатура,
		|	ТоварыПересчитанные.Характеристика КАК Характеристика,
		|	ТоварыПересчитанные.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТоварыПересчитанные.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыПересчитанные.Остатки(
		|			,
		|			(ДокументОснование, Ведомость, Номенклатура, Характеристика) В
		|				(ВЫБРАТЬ
		|					Таблица.ДокументОснование,
		|					Таблица.Ведомость,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика
		|				ИЗ
		|					ДвиженияТоварыПересчитанныеИзменение КАК Таблица)) КАК ТоварыПересчитанные
		|ГДЕ
		|	ТоварыПересчитанные.КоличествоОстаток < 0" + "
		|///////////////////////////////////////////////////////////////////
		|;";
		
	КонецЕсли;

//	Контроль отрицательных остатков по застрахованным товарам
//	LNK 22.08.2017 15:44:46
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц, "ДвиженияТоварыЗастрахованныеИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ТоварыЗастрахованные"));
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТоварыЗастрахованные.Номенклатура.Код КАК Код,
		|	ТоварыЗастрахованные.Номенклатура КАК Номенклатура,
		|	ТоварыЗастрахованные.ДокументПродажи КАК ДокументПродажи,
		|	ТоварыЗастрахованные.КоличествоОстаток КАК Количество,
		|	ТоварыЗастрахованные.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ИЗ
		|	РегистрНакопления.ТоварыЗастрахованные.Остатки(
		|			,
		|			(Номенклатура, ДокументПродажи) В
		|				(ВЫБРАТЬ
		|					Таблица.Номенклатура,
		|					Таблица.ДокументПродажи
		|				ИЗ
		|					ДвиженияТоварыЗастрахованныеИзменение КАК Таблица)) КАК ТоварыЗастрахованные
		|ГДЕ
		|	ТоварыЗастрахованные.КоличествоОстаток < 0" + "
		|///////////////////////////////////////////////////////////////////
		|;";
		
	КонецЕсли;

//	Контроль отрицательных остатков по оплате договоров страхования
//	LNK 25.08.2017 15:35:57
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц, "ДвиженияДоговорыСтрахованияОплаченныеИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ДоговорыСтрахованияОплаченные"));
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ДоговорыСтрахованияОплаченные.Номенклатура.Код КАК Код,
		|	ДоговорыСтрахованияОплаченные.Номенклатура КАК Номенклатура,
		|	ДоговорыСтрахованияОплаченные.ДоговорСтрахования КАК ДоговорСтрахования,
		|	ДоговорыСтрахованияОплаченные.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.ДоговорыСтрахованияОплаченные.Остатки(
		|			,
		|			(Номенклатура, ДоговорСтрахования) В
		|				(ВЫБРАТЬ
		|					Таблица.Номенклатура,
		|					Таблица.ДоговорСтрахования
		|				ИЗ
		|					ДвиженияДоговорыСтрахованияОплаченныеИзменение КАК Таблица)) КАК ДоговорыСтрахованияОплаченные
		|ГДЕ
		|	ДоговорыСтрахованияОплаченные.СуммаОстаток < 0" + "
		|///////////////////////////////////////////////////////////////////
		|;";
		
	КонецЕсли;

//	Контроль отрицательных остатков по "Лимиты ручных скидок по регионам"
//	LNK 27.08.2017 11:11:30
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц, "ДвиженияЛимитыРучныхСкидокРегионыИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ЛимитыРучныхСкидокРегионы"));
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ЛимитыРучныхСкидокРегионы.ПериодЛимита КАК ПериодЛимита,
		|	ЛимитыРучныхСкидокРегионы.ПричинаРучнойСкидки КАК ПричинаРучнойСкидки,
		|	ЛимитыРучныхСкидокРегионы.ОбособленноеПодразделениеОрганизации КАК ОбособленноеПодразделениеОрганизации,
		|	ЛимитыРучныхСкидокРегионы.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.ЛимитыРучныхСкидокРегионы.Остатки(
		|			,
		|			(ПериодЛимита, ПричинаРучнойСкидки, ОбособленноеПодразделениеОрганизации) В
		|				(ВЫБРАТЬ
		|					Таблица.ПериодЛимита,
		|					Таблица.ПричинаРучнойСкидки,
		|					Таблица.ОбособленноеПодразделениеОрганизации
		|				ИЗ
		|					ДвиженияЛимитыРучныхСкидокРегионыИзменение КАК Таблица)) КАК ЛимитыРучныхСкидокРегионы
		|ГДЕ
		|	ЛимитыРучныхСкидокРегионы.СуммаОстаток < 0" + "
		|///////////////////////////////////////////////////////////////////
		|;";
		
	КонецЕсли;

//	Контроль отрицательных остатков по "Лимиты ручных скидок по регионам"
//	LNK 27.08.2017 11:48:44
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц, "ДвиженияЛимитыРучныхСкидокМагазиныИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ЛимитыРучныхСкидокМагазины"));
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ЛимитыРучныхСкидокМагазины.ПериодЛимита КАК ПериодЛимита,
		|	ЛимитыРучныхСкидокМагазины.ПричинаРучнойСкидки КАК ПричинаРучнойСкидки,
		|	ЛимитыРучныхСкидокМагазины.Магазин КАК Магазин,
		|	ЛимитыРучныхСкидокМагазины.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.ЛимитыРучныхСкидокМагазины.Остатки(
		|			,
		|			(ПериодЛимита, ПричинаРучнойСкидки, Магазин) В
		|				(ВЫБРАТЬ
		|					Таблица.ПериодЛимита,
		|					Таблица.ПричинаРучнойСкидки,
		|					Таблица.Магазин
		|				ИЗ
		|					ДвиженияЛимитыРучныхСкидокМагазиныИзменение КАК Таблица)) КАК ЛимитыРучныхСкидокМагазины
		|ГДЕ
		|	ЛимитыРучныхСкидокМагазины.СуммаОстаток < 0" + "
		|///////////////////////////////////////////////////////////////////
		|;";
		
	КонецЕсли;
		
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц, "ДвиженияДвиженияСерийныхНомеровИзменение") Тогда 
		
		МассивКонтролей.Добавить(Врег("ДвиженияСерийныхНомеров"));
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.СерийныйНомер КАК СерийныйНомер,
		|	ТаблицаДанных.Склад КАК Склад,
		|	ТаблицаДанных.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаДанных.Количество КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаРегистра.Номенклатура КАК Номенклатура,
		|		ТаблицаРегистра.СерийныйНомер КАК СерийныйНомер,
		|		ТаблицаРегистра.Склад КАК Склад,
		|		ТаблицаРегистра.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		СУММА(ТаблицаРегистра.Количество) КАК Количество
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ДвиженияСерийныхНомеров.Номенклатура КАК Номенклатура,
		|			ДвиженияСерийныхНомеров.СерийныйНомер КАК СерийныйНомер,
		|			ДвиженияСерийныхНомеров.Получатель КАК Склад,
		|			1 КАК Количество
		|		ИЗ
		|			РегистрСведений.ДвиженияСерийныхНомеров КАК ДвиженияСерийныхНомеров
		|		ГДЕ
		|			(ДвиженияСерийныхНомеров.Номенклатура, ДвиженияСерийныхНомеров.СерийныйНомер, ДвиженияСерийныхНомеров.Получатель) В
		|					(ВЫБРАТЬ
		|						Таблица.Номенклатура,
		|						Таблица.СерийныйНомер,
		|						Таблица.Склад
		|					ИЗ
		|						ДвиженияДвиженияСерийныхНомеровИзменение КАК Таблица)
		|			И НЕ ДвиженияСерийныхНомеров.Получатель = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ДвиженияСерийныхНомеров.Номенклатура,
		|			ДвиженияСерийныхНомеров.СерийныйНомер,
		|			ДвиженияСерийныхНомеров.Отправитель,
		|			-1
		|		ИЗ
		|			РегистрСведений.ДвиженияСерийныхНомеров КАК ДвиженияСерийныхНомеров
		|		ГДЕ
		|			(ДвиженияСерийныхНомеров.Номенклатура, ДвиженияСерийныхНомеров.СерийныйНомер, ДвиженияСерийныхНомеров.Отправитель) В
		|					(ВЫБРАТЬ
		|						Таблица.Номенклатура,
		|						Таблица.СерийныйНомер,
		|						Таблица.Склад
		|					ИЗ
		|						ДвиженияДвиженияСерийныхНомеровИзменение КАК Таблица)
		|			И НЕ ДвиженияСерийныхНомеров.Отправитель = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК ТаблицаРегистра
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаРегистра.Склад,
		|		ТаблицаРегистра.СерийныйНомер,
		|		ТаблицаРегистра.Номенклатура,
		|		ТаблицаРегистра.Номенклатура.ЕдиницаИзмерения) КАК ТаблицаДанных
		|ГДЕ
		|	ТаблицаДанных.Количество < 0" + "
		|///////////////////////////////////////////////////////////////////
		|;";

		
	КонецЕсли;
	
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРасчетыСПоставщикамиИзменение") Тогда
		
		МассивКонтролей.Добавить(Врег("РасчетыСПоставщиками"));
		
		СписокДокументовВзаимозачета = Объект.ЭтапыОплат.ВыгрузитьКолонку("ДокументВзаимозачета");
		
		Индекс = СписокДокументовВзаимозачета.Количество() - 1;
		
		Пока Индекс >= 0 Цикл
			ДокументВзаимозачета = СписокДокументовВзаимозачета[Индекс];
			Если НЕ ЗначениеЗаполнено(ДокументВзаимозачета) Тогда
				СписокДокументовВзаимозачета.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.ДокументРасчета КАК ДокументВзаимозачета,
		|	-РасчетыСПоставщикамиОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, ДокументРасчета В (&СписокДокументовВзаимозачета)) КАК РасчетыСПоставщикамиОстатки
		|ГДЕ
		|	РасчетыСПоставщикамиОстатки.СуммаОстаток < 0" + "
		|///////////////////////////////////////////////////////////////////
		|;";
		
		ПакетЗапросов.УстановитьПараметр("СписокДокументовВзаимозачета", СписокДокументовВзаимозачета);
		
	КонецЕсли;
	
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц, "ДвиженияДенежныеСредстваКВыплатеИзменение") Тогда
		
		МассивКонтролей.Добавить(Врег("ДенежныеСредстваКВыплате"));
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДенежныеСредстваКВыплатеОстатки.РаспоряжениеНаРасходованиеДенежныхСредств КАК РаспоряжениеНаРасходованиеДенежныхСредств,
		|	ДенежныеСредстваКВыплатеОстатки.СтатьяДвиженияДенежныхСредств             КАК СтатьяДвиженияДенежныхСредств,
		|	ДенежныеСредстваКВыплатеОстатки.ДокументРасчета                           КАК ДокументРасчета,
		|	ДенежныеСредстваКВыплатеОстатки.СуммаОстаток                              КАК Сумма
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(
		|			,
		|			(РаспоряжениеНаРасходованиеДенежныхСредств, СтатьяДвиженияДенежныхСредств, ДокументРасчета) В
		|				(ВЫБРАТЬ
		|					Таблица.РаспоряжениеНаРасходованиеДенежныхСредств,
		|					Таблица.СтатьяДвиженияДенежныхСредств,
		|					Таблица.ДокументРасчета
		|				ИЗ
		|					ДвиженияДенежныеСредстваКВыплатеИзменение КАК Таблица)) КАК ДенежныеСредстваКВыплатеОстатки
		|ГДЕ
		|	ДенежныеСредстваКВыплатеОстатки.СуммаОстаток > 0" + "
		|///////////////////////////////////////////////////////////////////
		|;";
		
		
	КонецЕсли;

//	Контроль отрицательных остатков по рекламные материалы к отгрузке
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц, "ДвиженияРекламныеМатериалыКОтгрузкеИзменение") Тогда

		
		МассивКонтролей.Добавить(Врег("РекламныеМатериалыКОтгрузке"));
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	РекламныеМатериалыКОтгрузкеОстатки.КоличествоОстаток КАК Количество,
		|	РекламныеМатериалыКОтгрузкеОстатки.РекламныйМатериал КАК РекламныйМатериал,
		|	РекламныеМатериалыКОтгрузкеОстатки.РекламнаяПлоскость КАК РекламнаяПлоскость,
		|	РекламныеМатериалыКОтгрузкеОстатки.Организация КАК Организация,
		|	РекламныеМатериалыКОтгрузкеОстатки.Магазин КАК Магазин
		|ИЗ
		|	РегистрНакопления.РекламныеМатериалыКОтгрузке.Остатки(,
		|			(РекламныйМатериал, РекламнаяПлоскость, РекламнаяПлоскость,Организация,Магазин) В
		|				(ВЫБРАТЬ
		|					Таблица.РекламныйМатериал,
		|					Таблица.РекламнаяПлоскость,
		|					Таблица.РекламнаяПлоскость,
		|					Таблица.Организация,
		|					Таблица.Магазин
		|				ИЗ
		|					ДвиженияРекламныеМатериалыКОтгрузкеИзменение КАК Таблица)) КАК РекламныеМатериалыКОтгрузкеОстатки
		|ГДЕ
		|	РекламныеМатериалыКОтгрузкеОстатки.КоличествоОстаток < 0" + "
		|///////////////////////////////////////////////////////////////////
		|;";
		
	КонецЕсли;
	

//	Контроль отрицательных остатков по рекламные материалы к приемке
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц, "ДвиженияРекламныеМатериалыКПриемкеИзменение") Тогда

		
		МассивКонтролей.Добавить(Врег("РекламныеМатериалыКПриемке"));
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	РекламныеМатериалыКОтгрузкеОстатки.КоличествоОстаток КАК Количество,
		|	РекламныеМатериалыКОтгрузкеОстатки.РекламныйМатериал КАК РекламныйМатериал,
		|	РекламныеМатериалыКОтгрузкеОстатки.РекламнаяПлоскость КАК РекламнаяПлоскость,
		|	РекламныеМатериалыКОтгрузкеОстатки.Организация КАК Организация,
		|	РекламныеМатериалыКОтгрузкеОстатки.Магазин КАК Магазин
		|ИЗ
		|	РегистрНакопления.РекламныеМатериалыКПриемке.Остатки(,
		|			(РекламныйМатериал, РекламнаяПлоскость, РекламнаяПлоскость,Организация,Магазин) В
		|				(ВЫБРАТЬ
		|					Таблица.РекламныйМатериал,
		|					Таблица.РекламнаяПлоскость,
		|					Таблица.РекламнаяПлоскость,
		|					Таблица.Организация,
		|					Таблица.Магазин
		|				ИЗ
		|					ДвиженияРекламныеМатериалыКПриемкеИзменение КАК Таблица)) КАК РекламныеМатериалыКОтгрузкеОстатки
		|ГДЕ
		|	РекламныеМатериалыКОтгрузкеОстатки.КоличествоОстаток < 0" + "
		|///////////////////////////////////////////////////////////////////
		|;";
		
	КонецЕсли;
	
	Если МассивКонтролей.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	ПакетЗапросов.Текст = ТекстЗапроса;
	ПакетЗапросов.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	МассивРезультатов = ПакетЗапросов.ВыполнитьПакет();
	Итератор = -1;

	Для Каждого Результат Из МассивРезультатов Цикл

		Итератор = Итератор + 1;

		Если Результат.Пустой() Тогда

			Продолжить;

		КонецЕсли;

		ИмяКонтроля = МассивКонтролей[Итератор];

		Если ИмяКонтроля = Врег("ТоварыНаСкладах") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструТоварыНаСкладах(Объект, Отказ, Результат);
			
			ФиксироватьПопыткиПродажПревышающихОстаток(Объект, Объект.Дата, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ДенежныеСредстваКПоступлениюНаличные") Тогда

		//	LNK 03.07.2017 10:54:57
			СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваКПоступлениюНаличные(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ДенежныеСредстваНаличные") Тогда

		//	LNK 03.07.2017 16:09:01
			СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваНаличные(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ТоварыПересчитанные") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструТоварыПересчитанные(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ТоварыЗастрахованные") Тогда

		//	LNK 22.08.2017 15:48:09
			СообщитьОбОшибкахПроведенияПоРегиструТоварыЗастрахованные(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ДоговорыСтрахованияОплаченные") Тогда

		//	LNK 25.08.2017 15:40:34
			СообщитьОбОшибкахПроведенияПоРегиструДоговорыСтрахованияОплаченные(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ЛимитыРучныхСкидокРегионы") Тогда

		//	LNK 27.08.2017 11:19:38
			СообщитьОбОшибкахПроведенияПоРегиструЛимитыРучныхСкидокРегионы(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ЛимитыРучныхСкидокМагазины") Тогда

		//	LNK 27.08.2017 11:51:21
			СообщитьОбОшибкахПроведенияПоРегиструЛимитыРучныхСкидокМагазины(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ДвиженияСерийныхНомеров") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструДвиженияСерийныхНомеров(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("РасчетыСПоставщиками") Тогда
		
			СообщитьОбОшибкахПроведенияПоРегиструРасчетыСПоставщиками(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ДенежныеСредстваКВыплате") Тогда
		
			СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваКВыплате(Объект, Отказ, Результат);
		ИначеЕсли ИмяКонтроля = Врег("РекламныеМатериалыКОтгрузке") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструРекламныеМатериалыКОтгрузке(Объект, Отказ, Результат);
		ИначеЕсли ИмяКонтроля = Врег("РекламныеМатериалыКПриемке") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструРекламныеМатериалыКПриемке(Объект, Отказ, Результат);
			
		Иначе

			ВызватьИсключение НСтр("ru = '" + ИмяКонтроля + ": Ошибка контроля проведения!'");

		КонецЕсли;
		
	КонецЦикла;

	Если Отказ Тогда

		Если Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

				ТекстСообщения = НСтр("ru = 'Проведение не выполнено '");
			
		Иначе	ТекстСообщения = НСтр("ru = 'Отмена проведения не выполнена '");

		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения + Строка(Объект), Объект);

	КонецЕсли;

КонецПроцедуры

// Процедуры выдачи сообщений об ошибках проведения.
//
Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыНаСкладах(Объект, Отказ, РезультатЗапроса)

	БылОтказ = Отказ;
	ШаблонСообщения = НСтр("ru = 'Номенклатура %1 
		|Превышен остаток на складе %2 на %3 %4'");

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.Номенклатура, Выборка.Характеристика,,, "[" + СокрЛП(Выборка.Код) + "] " + СокрЛП(Выборка.Номенклатура)),
			Строка(Выборка.Склад),
			Строка(-Выборка.Количество),
			Строка(Выборка.ЕдиницаИзмерения));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;

	Если ТехническаяПоддержкаПовтИсп.ОтладочныйРежимРаботы() Тогда

	//	Сообщаем, возмущаемся.. но процесс не прерываем.
		Отказ = БылОтказ;

	КонецЕсли;

КонецПроцедуры

//	LNK 03.07.2017 16:09:36
Процедура СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваКПоступлениюНаличные(Объект, Отказ, РезультатЗапроса)

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Сообщить("Раздел учёта «Денежные средства к поступлению (наличные)»");

		ШаблонСообщения = НСтр("ru = 'По документу расчётов [%1] превышена сумма%2 организации «%3» на %4 грн'");

		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				СокрЛП(Выборка.Документ),
				?(ЗначениеЗаполнено(Выборка.Касса), " по кассе [" + СокрЛП(Выборка.Касса) + "]", ""),
				СокрЛП(Выборка.Организация),
				Формат(-Выборка.Сумма, "ЧДЦ=2; ЧГ="));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект,,, Отказ);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	LNK 03.07.2017 16:09:36
Процедура СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваНаличные(Объект, Отказ, РезультатЗапроса)

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Сообщить("Раздел учёта «Денежные средства (наличные)»");

		ШаблонСообщения = НСтр("ru = 'По кассе [%1] (организация «%2») превышена сумма на %3 грн (остаток в кассе)'");

		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				СокрЛП(Выборка.Касса),
				СокрЛП(Выборка.Организация),
				Формат(-Выборка.Сумма, "ЧДЦ=2; ЧГ="));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект,,, Отказ);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	LNK 01.12.2016 15:46:22
Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыПересчитанные(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %1 
		|Превышен остаток по приказу %2 и ведомости %3 на %4 %5'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.Номенклатура, Выборка.Характеристика,,, "[" + СокрЛП(Выборка.Код) + "] " + СокрЛП(Выборка.Номенклатура)),
			Строка(Выборка.ДокументОснование),
			Строка(Выборка.Ведомость),
			Строка(-Выборка.Количество),
			Строка(Выборка.ЕдиницаИзмерения));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;

КонецПроцедуры

//	LNK 22.08.2017 15:48:47
Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыЗастрахованные(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'СТРАХ: Номенклатура %1 
		|Превышено кол-во продажи по %2 на %3 %4'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.Номенклатура,,,, "[" + СокрЛП(Выборка.Код) + "] " + СокрЛП(Выборка.Номенклатура)),
			Строка(Выборка.ДокументПродажи),
			Строка(-Выборка.Количество),
			Строка(Выборка.ЕдиницаИзмерения));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;

КонецПроцедуры

//	LNK 25.08.2017 15:38:00
Процедура СообщитьОбОшибкахПроведенияПоРегиструДоговорыСтрахованияОплаченные(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'ОПЛ.СТРАХ: Номенклатура %1 
		|Превышена сумма взноса по %2 на %3 грн'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.Номенклатура,,,, "[" + СокрЛП(Выборка.Код) + "] " + СокрЛП(Выборка.Номенклатура)),
			Строка(Выборка.ДоговорСтрахования),
			Формат(-Выборка.Сумма, "ЧДЦ=2; ЧГ="));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;

КонецПроцедуры

//	LNK 27.08.2017 11:15:20
Процедура СообщитьОбОшибкахПроведенияПоРегиструЛимитыРучныхСкидокРегионы(Объект, Отказ, РезультатЗапроса)

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Сообщить("Раздел учёта «Лимиты ручных скидок по регионам»");

		ШаблонСообщения = НСтр("ru = 'По скидке [%1] (филиал «%2» на период %3) превышена сумма на %4 грн'");

		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				СокрЛП(Выборка.ПричинаРучнойСкидки),
				СокрЛП(Выборка.ОбособленноеПодразделениеОрганизации),
				Формат(Выборка.ПериодЛимита, "ДФ='ММММ yyyy'"),
				Формат(-Выборка.Сумма, "ЧДЦ=2; ЧГ="));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект,,, Отказ);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	LNK 27.08.2017 11:47:35
Процедура СообщитьОбОшибкахПроведенияПоРегиструЛимитыРучныхСкидокМагазины(Объект, Отказ, РезультатЗапроса)

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Сообщить("Раздел учёта «Лимиты ручных скидок по магазинам»");

		ШаблонСообщения = НСтр("ru = 'По скидке [%1] (магазин «%2» на период %3) превышена сумма на %4 грн'");

		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				СокрЛП(Выборка.ПричинаРучнойСкидки),
				СокрЛП(Выборка.Магазин),
				Формат(Выборка.ПериодЛимита, "ДФ='ММММ yyyy'"),
				Формат(-Выборка.Сумма, "ЧДЦ=2; ЧГ="));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект,,, Отказ);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Процедуры выдачи сообщений об ошибках проведения.
//
Процедура СообщитьОбОшибкахПроведенияПоРегиструДвиженияСерийныхНомеров(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщенияНоменклатуры = НСтр("ru = 'Номенклатура %1 
		|Превышен остаток серийных номеров на складе %2 на %3 %4'");

	ШаблонСообщенияСертификат = НСтр("ru = 'Номер подарочного сертификата %5 (%1)
		|Превышен остаток серийных номеров на складе %2 на %3 %4'");
		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.СерийныйНомер) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщенияСертификат,
				Выборка.Номенклатура,
				Строка(Выборка.Склад),
				Строка(-Выборка.Количество),
				Строка(Выборка.ЕдиницаИзмерения),
				Выборка.СерийныйНомер);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщенияНоменклатуры,
				Выборка.Номенклатура,
				Строка(Выборка.Склад),
				Строка(-Выборка.Количество),
				Строка(Выборка.ЕдиницаИзмерения),
				Выборка.СерийныйНомер);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструРасчетыСПоставщиками(Объект, Отказ, РезультатЗапроса)
	
	ШаблонСообщения = НСтр("ru = 'Превышена на %1 грн. доступная сумма взаимозачета по документу %2 списка ""Этапы оплат""'");
		
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСообщения,
		Выборка.Сумма,
		Строка(Выборка.ДокументВзаимозачета));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваКВыплате(Объект, Отказ, РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы Тогда
		
		ШаблонСообщения = НСтр("ru = 'Превышена на %1 грн. утвержденная сумма оплаты по статье ""%2""'");
		КолонкаВыборки = "СтатьяДвиженияДенежныхСредств";
		
	Иначе
		
		ШаблонСообщения = НСтр("ru = 'Превышена на %1 грн. утвержденная сумма оплаты по документу ""%2""'");
		КолонкаВыборки = "ДокументРасчета";
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСообщения,
		Выборка.Сумма,
		Строка(Выборка[КолонкаВыборки]));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедуры выдачи сообщений об ошибках проведения.
//
Процедура СообщитьОбОшибкахПроведенияПоРегиструРекламныеМатериалыКОтгрузке(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'РекламныйМатериал %1 
		|Превышен остаток в магазине %2 на плоскости %3 %4'");

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСообщения,
		Выборка.РекламныйМатериал,		
		Выборка.РекламнаяПлоскость,
		Выборка.Магазин);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструРекламныеМатериалыКПриемке(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'РекламныйМатериал %1 
		|Превышен остаток в магазине %2 на плоскости %3 %4'");

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСообщения,
		Выборка.РекламныйМатериал,		
		Выборка.РекламнаяПлоскость,
		Выборка.Магазин);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;

КонецПроцедуры

#Область ПроцедурыОбщегоНазначения

// Функция вызывается из модулей наборов записей для проверки необходимости
// контроля изменений движений в регистре.
//
Функция РассчитыватьИзменения(ДополнительныеСвойстваНабораЗаписей) Экспорт
	Перем РассчитыватьИзменения;

	Возврат ДополнительныеСвойстваНабораЗаписей.Свойство("РассчитыватьИзменения", РассчитыватьИзменения)
		И РассчитыватьИзменения;

КонецФункции

// Процедура формирует запрос по временной таблице.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//	ИмяВременнойТаблицы - Строка - Имя временной таблицы
//
Процедура ПоказатьВременнуюТаблицу(МенеджерВременныхТаблиц,ИмяВременнойТаблицы, Комментарий = "") Экспорт

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ИмяВременнойТаблицы
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыбратьСтроку(ИмяВременнойТаблицы + ":" + Комментарий);
	
КонецПроцедуры // ПоказатьВременнуюТаблицу()

Процедура ФиксироватьПопыткиПродажПревышающихОстаток(Объект, ДатаПродажи, Результат) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПопыткиПродажПревышающихОстаток") 
		И Объект.ДополнительныеСвойства.ДляПроведения.Свойство("ПопыткиПродажПревышающихОстаток") Тогда
		
		ТаблицаОтрицательныхОстатков = Результат.Выгрузить();
		ТаблицаОтрицательныхОстатков.Колонки.Добавить("ДатаПродажи", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		
		ТаблицаОтрицательныхОстатков.ЗаполнитьЗначения(НачалоДня(ДатаПродажи),"ДатаПродажи");
		
		Объект.ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПопыткиПродажПревышающихОстаток", ТаблицаОтрицательныхОстатков.Скопировать(,"ДатаПродажи,Склад,Номенклатура,Характеристика"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения) Экспорт

	Если Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

		РежимПроведения = РежимПроведенияДокумента.Неоперативный;

	КонецЕсли;

КонецПроцедуры

//	LNK 08.05.2018 11:06:25
Процедура ОтразитьДвиженияПоРегистру(ИмяТаблицы, ДополнительныеСвойства, Движения, Отказ, КолонкаНомерСтроки = "")	Экспорт

	Перем Таблица;

	ИмяТаблицыЗначений = "Таблица" + ИмяТаблицы;

	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство(ИмяТаблицыЗначений, Таблица) Тогда

		Если Отказ Тогда	//	LNK 20.12.2021 07:19:49

			Возврат;

		КонецЕсли;

		УстановитьНомерСтрокиВТаблице(Таблица, КолонкаНомерСтроки);

		Движения[ИмяТаблицы].Записывать = Истина;
		Движения[ИмяТаблицы].Загрузить(Таблица);

	КонецЕсли;

КонецПроцедуры

Функция УстановитьНомерСтрокиВТаблице(Таблица, КолонкаНомерСтроки)	Экспорт	//	LNK 24.09.2021 05:49:15

	Если НЕ ПустаяСтрока(КолонкаНомерСтроки) И НЕ Таблица.Колонки.Найти(КолонкаНомерСтроки) = Неопределено Тогда

		НомерСтроки = 0;

		Для каждого СтрокаТаблицы Из Таблица Цикл

			НомерСтроки = НомерСтроки + 1;
			СтрокаТаблицы[КолонкаНомерСтроки] = НомерСтроки;

		КонецЦикла;

	КонецЕсли;

	Возврат Таблица;

КонецФункции

#КонецОбласти



