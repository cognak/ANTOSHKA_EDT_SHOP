#Область ПрограммныйИнтерфейс

//	LNK 09.09.2016 11:21:52
Процедура ЗаполнениеДокументовОбщиеРеквизитыПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда

		Возврат;

	КонецЕсли;

	ПроверитьУстановкуОбщихРеквизитов(Источник, Отказ);

//	LNK 12.09.2016 13:52:53
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если НЕ Источник.ЭтоНовый() Тогда

		ВнешниеИсточникиСобытия.УстановитьIDNПоКлючевомуРеквизиту(ТипЗнч(Источник.Ссылка), Источник);

	КонецЕсли;

КонецПроцедуры

//	LNK 10.11.2016 17:01:14
Процедура ЗаполнениеОбъектовОбщиеРеквизиты(Источник, Отказ) Экспорт

	#Если _ Тогда
	Источник = Справочники.ИнформационныеКарты.СоздатьЭлемент();
	#КонецЕсли

	Если НЕ Источник.ЭтоНовый() ИЛИ Источник.ОбменДанными.Загрузка И ЗначениеЗаполнено(Источник.ОбменДанными.Отправитель) Тогда

		Возврат;

	КонецЕсли;

	ПроверитьУстановкуОбщихРеквизитов(Источник, Отказ);

КонецПроцедуры

//	LNK 09.09.2016 11:37:36
Процедура ЗаполнениеНаборовЗаписейОбщиеРеквизитыПередЗаписью(Источник, Отказ, Замещение) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда

		Возврат;

	КонецЕсли;

	УстановитьОбщиеРеквизиты(Источник, Источник.Метаданные().ПолноеИмя(), Истина);

КонецПроцедуры

//	LNK 24.10.2022 12:30:17
Процедура УстановитьОбщиеРеквизиты(Источник, ПолноеИмя, ЭтоРегистр)	Экспорт

	КлючиРеквизитов = Новый Структура(
		"Автор, УзелСоздания"
		, ПараметрыСеанса.ТекущийПользователь
		, ОбменДаннымиПовтИсп.ПолучитьТекущийЭлементСтруктурыУзлов()
	);

	Для каждого КлючЗначение Из КлючиРеквизитов Цикл

		Если ОбщегоНазначенияПовтИсп.ЕстьОбщийРеквизит(КлючЗначение.Ключ, ПолноеИмя) Тогда

			Если ЭтоРегистр = Истина И НЕ Источник.Количество() = 0 Тогда

				Для каждого ЗаписьНабора Из Источник Цикл

					Если ЗаписьНабора[КлючЗначение.Ключ].Пустая() Тогда

						ЗаписьНабора[КлючЗначение.Ключ] = КлючЗначение.Значение;

					КонецЕсли;

				КонецЦикла;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//	LNK 12.09.2016 10:02:58
Процедура ЗаполнениеОбъектПриКопировании(Источник, ОбъектКопирования) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда

		Возврат;

	КонецЕсли;

	Если ОбщегоНазначенияПовтИсп.ЕстьОбщийРеквизит("Автор", Источник.Метаданные().ПолноеИмя()) Тогда

		Источник.Автор = Неопределено;

	КонецЕсли;

	Если ОбщегоНазначенияПовтИсп.ЕстьОбщийРеквизит("УзелСоздания", Источник.Метаданные().ПолноеИмя()) Тогда

		Источник.УзелСоздания = Неопределено;

	КонецЕсли;

	Если ОбщегоНазначенияПовтИсп.ЕстьОбщийРеквизит("IDN", Источник.Метаданные().ПолноеИмя()) Тогда

		Источник.IDN = "";

	КонецЕсли;

КонецПроцедуры

//	LNK 24.10.2016 16:40:49
Процедура ЗаполнениеДокументовТабличныеЧасти(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	Если Источник.ОбменДанными.Загрузка
	ИЛИ  ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(Источник.ДополнительныеСвойства, "СлужебнаяЗапись", Ложь) = Истина	Тогда

		Возврат;

	КонецЕсли;

	ЕстьРазрешение = ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(Источник.ДополнительныеСвойства, "ЗагрузкаИзNavision", Ложь) = Истина
					ИЛИ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим();
	ТекстОписанияПроблемы = "";

	УстановитьПривилегированныйРежим(Истина);

	ТипЗначения = ТипЗнч(Источник);

	Если  ОбщегоНазначенияРТ.ЕстьТЧОбъекта("Товары", Источник.Метаданные())
		И РежимЗаписи = РежимЗаписиДокумента.Проведение
		И НЕ ЗаполнениеОбъектовСобытияПовтИсп.ТипыИнвентаризация().Получить(ТипЗнч(Источник)) = Истина	Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Товары.НомерСтроки,
		|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	0 КАК Количество
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Товары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабличнаяЧасть.Номенклатура.ВидНоменклатуры.Представление КАК Проект
		|ИЗ
		|	Товары КАК ТабличнаяЧасть
		|ГДЕ
		|	НЕ ТабличнаяЧасть.Номенклатура.Код В (""6999998"")
		|	И НЕ ТабличнаяЧасть.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабличнаяЧасть.Номенклатура.СтавкаНДС КАК СтавкаНДС
		|ИЗ
		|	Товары КАК ТабличнаяЧасть
		|ГДЕ
		|	НЕ ТабличнаяЧасть.Номенклатура.Код В (""6999998"")
		|	И НЕ ТабличнаяЧасть.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Номенклатура.Наименование КАК ТоварПредставление,
		|	Товары.Количество КАК Количество
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	НЕ (ВЫРАЗИТЬ(Товары.Количество КАК ЧИСЛО(15, 0))) = Товары.Количество
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		);
		Запрос.УстановитьПараметр("Товары", ПодготовитьТаблицуТоваров(Источник, ТипЗначения));
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

		Если ОбщегоНазначенияРТ.ЕстьРеквизитТЧОбъекта("Количество", Источник.Метаданные(), "Товары") Тогда

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "0 КАК Количество", "Товары.Количество КАК Количество");

		КонецЕсли;
		
		Результаты = Запрос.ВыполнитьПакет();

	//	Исключаем документы, принимающие участие в "оптовых" продажах
		Если ЗаполнениеОбъектовСобытияПовтИсп.ТипыМультиПроектов().Получить(ТипЗначения) = Неопределено  Тогда

			Выборка = Результаты[1].Выбрать();

			Если Выборка.Количество() > 1 Тогда

				ТекстСообщения = "Отказано в проведении «" + Источник + "» - использование нескольких проектов в таблице «Товары» ЗАПРЕЩЕНО!";
				ТекстОписанияПроблемы = ТекстОписанияПроблемы + ?(ПустаяСтрока(ТекстОписанияПроблемы), "", Символы.ПС)
					+ ТекстСообщения;
				Сообщить(ТекстСообщения);

				Если НЕ ЕстьРазрешение Тогда

					Отказ = Истина;

				КонецЕсли;

				Пока Выборка.Следующий() Цикл

					ТекстОписанияПроблемы = ТекстОписанияПроблемы + Символы.ПС + "- " + СокрЛП(Выборка.Проект);
					Сообщить("- " + СокрЛП(Выборка.Проект));

				КонецЦикла;

			КонецЕсли;

			Если НЕ(ТипЗнч(Источник) = Тип("ДокументОбъект.ОприходованиеТоваров")
				ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеТоваров")
				ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ОрдерНаПеремещениеТоваров")
				ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ПересчетТоваровСамостоятельный")
			//	LNK 01.08.2023 15:14:01 - в NAV, оказывается, отменили такой контроль! Мишинский сообщил.
				ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров")
				ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйОрдерНаТовары")
				ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйОрдерНаТовары")
				)
			Тогда

				Выборка = Результаты[2].Выбрать();

				Если Выборка.Количество() > 1 Тогда

					ТекстСообщения = "Отказано в проведении «" + Источник + "» - использование различных ставок НДС в таблице «Товары» ЗАПРЕЩЕНО!";
					ТекстОписанияПроблемы = ТекстОписанияПроблемы + ?(ПустаяСтрока(ТекстОписанияПроблемы), "", Символы.ПС)
						+ ТекстСообщения;
					Сообщить(ТекстСообщения);

					Если НЕ ЕстьРазрешение Тогда

						Отказ = Истина;

					КонецЕсли;

					Пока Выборка.Следующий() Цикл

						ТекстОписанияПроблемы = ТекстОписанияПроблемы + Символы.ПС + "- " + СокрЛП(Выборка.СтавкаНДС);
						Сообщить("- " + СокрЛП(Выборка.СтавкаНДС));

					КонецЦикла;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		Выборка = Результаты[3].Выбрать();

		Если Выборка.Количество() > 1 Тогда

			ТекстСообщения = "Отказано в проведении «" + Источник + "» - использование дробных количеств в таблице «Товары» ЗАПРЕЩЕНО!";
			ТекстОписанияПроблемы = ТекстОписанияПроблемы + ?(ПустаяСтрока(ТекстОписанияПроблемы), "", Символы.ПС)
				+ ТекстСообщения;
			Сообщить(ТекстСообщения);

			Если НЕ ЕстьРазрешение Тогда

				Отказ = Истина;

			КонецЕсли;

			Пока Выборка.Следующий() Цикл

				ТекстСообщения = "- " + Формат(Выборка.НомерСтроки, "ЧГ=") + ". " + СокрЛП(Выборка.ТоварПредставление) + " (кол-во=" + Формат(Выборка.Количество, "ЧДЦ=3; ЧН=0,000; ЧГ=") + ")";
				ТекстОписанияПроблемы = ТекстОписанияПроблемы + Символы.ПС + ТекстСообщения;
				Сообщить(ТекстСообщения);

			КонецЦикла;

		КонецЕсли;

		Если НЕ Отказ Тогда

			Если ТипЗначения = Тип("ДокументОбъект.ПриходныйОрдерНаТовары") ИЛИ ТипЗначения = Тип("ДокументОбъект.РасходныйОрдерНаТовары") Тогда

				МетаданныеОснования = Источник.ДокументОснование.Метаданные();

				Запрос.Текст = СтрЗаменить(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ТоварыОснования.Номенклатура КАК Номенклатура
				|ПОМЕСТИТЬ Основание
				|ИЗ
				|	Документ.ПоступлениеТоваров.Товары КАК ТоварыОснования
				|ГДЕ
				|	ТоварыОснования.Ссылка = &ДокументОснование
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Товары.НомерСтроки,
				|	Товары.Номенклатура.Код КАК Код,
				|	Товары.Номенклатура.Наименование КАК Наименование
				|ИЗ
				|	Товары КАК Товары
				|		ЛЕВОЕ СОЕДИНЕНИЕ Основание КАК Основание
				|		ПО Товары.Номенклатура = Основание.Номенклатура
				|ГДЕ
				|	Основание.Номенклатура ЕСТЬ NULL "
				, "Документ.ПоступлениеТоваров.Товары", "Документ." + МетаданныеОснования.Имя + ".Товары"
				);
				Запрос.УстановитьПараметр("ДокументОснование", Источник.ДокументОснование);

				Результат = Запрос.Выполнить();

				Если НЕ Результат.Пустой() Тогда

					ТекстСообщения = "Отказано в проведении «" + Источник + "» - в его основании нет указанных ниже товаров:";
					ТекстОписанияПроблемы = ТекстОписанияПроблемы + ?(ПустаяСтрока(ТекстОписанияПроблемы), "", Символы.ПС)
						+ ТекстСообщения;
					Сообщить(ТекстСообщения);

					Если НЕ ЕстьРазрешение Тогда

						Отказ = Истина;

					КонецЕсли;

					Выборка = Результат.Выбрать();

					Пока Выборка.Следующий() Цикл

						ТекстСообщения = "- стр." + Формат(Выборка.НомерСтроки, "ЧЦ=3; ЧВН=") + ". (" +  + СокрЛП(Выборка.Код) + ") " + СокрЛП(Выборка.Наименование);
						ТекстОписанияПроблемы = ТекстОписанияПроблемы + Символы.ПС + ТекстСообщения;
						Сообщить(ТекстСообщения);

					КонецЦикла;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если НЕ ПустаяСтрока(ТекстОписанияПроблемы) И НЕ Отказ Тогда
		
		ЖурналСобытий.Регистрация("ТабличнаяЧасть.ПропущеноПоРазрешению", УровеньЖурналаРегистрации.Предупреждение
			, Источник.Метаданные()
			, Источник.Ссылка
			,
			, ТекстОписанияПроблемы
			, СокрЛП(Источник)
			, Истина
		);
		Сообщить("Отказ отклонён, но факт разрешения зарегистрирован.");

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьТаблицуТоваров(Источник, ТипЗначения)

	Если ТипЗначения = Тип("ДокументОбъект.ПересортицаТоваров") Тогда
		
		ТаблицаТовары = Источник.Товары.Выгрузить(, "НомерСтроки, Номенклатура, Количество");

		Для каждого СтрокаТабличнойЧасти Из Источник.Товары Цикл

			СтрокаТаблицы = ТаблицаТовары.Добавить();
			СтрокаТаблицы.НомерСтроки  = СтрокаТабличнойЧасти.НомерСтроки;
			СтрокаТаблицы.Номенклатура = СтрокаТабличнойЧасти.НоменклатураОприходование;
			СтрокаТаблицы.Количество   = СтрокаТабличнойЧасти.Количество;

		КонецЦикла;
	
	Иначе
		
		ТаблицаТовары = Источник.Товары;

	КонецЕсли;

	Возврат ТаблицаТовары;

КонецФункции // ПодготовитьТаблицуТоваров()

//	LNK 08.11.2016 11:21:21
Процедура ПроверитьЗаполнениеТекущегоРабочегоМеста(РабочееМестоКлиента)	Экспорт

//	ВРЕМЕННО! До урегулирования вопроса с рабочими местами
	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() И ЗначениеЗаполнено(РабочееМестоКлиента) Тогда

		УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСправочник.Магазин
		|ИЗ
		|	Справочник.РабочиеМеста КАК ТаблицаСправочник
		|ГДЕ
		|	ТаблицаСправочник.Ссылка = &РабочееМестоКлиента
		|	И ТаблицаСправочник.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)"
		);
		Запрос.УстановитьПараметр("РабочееМестоКлиента", РабочееМестоКлиента);

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда

			ОбъектРабочееМесто = РабочееМестоКлиента.ПолучитьОбъект();
			ОбъектРабочееМесто.Магазин = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин;
			ОбъектРабочееМесто.ОбменДанными.Загрузка = Истина;
			ОбъектРабочееМесто.Записать();

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 17.11.2016 14:03:55
Процедура ЗаполнениеДокументовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	Если Источник.ОбменДанными.Загрузка
	ИЛИ ПараметрыСеанса.ВыполняютсяСлужебныеДействия
	ИЛИ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(Источник.ДополнительныеСвойства, "ЗагрузкаИзNavision", Ложь) = Истина
	ИЛИ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(Источник.ДополнительныеСвойства, "СлужебнаяЗапись", Ложь) = Истина  Тогда

	//	Находимся в процессе загрузки...
		Возврат;

	КонецЕсли;

	БылОтказ = Отказ;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	ЕстьРеквизитДокументОснование = ОбщегоНазначения.ЕстьРеквизитОбъекта(Источник, "ДокументОснование");

//	Пока только для новых документов.
	Если Источник.ЭтоНовый() И ЕстьРеквизитДокументОснование И ЗначениеЗаполнено(Источник.ДокументОснование) И Не ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ЗапросДоступностиТоваров") Тогда

		УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос(СтрЗаменить(
		"ВЫБРАТЬ
		|	ТаблицаДокументы.Дата КАК Дата,
		|	ТаблицаДокументы.Ссылка КАК Ссылка,
		|	ТаблицаДокументы.Проведен,
		|	ТаблицаДокументы.ПометкаУдаления,
		|	ТаблицаДокументы.Представление
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ТаблицаДокументы
		|ГДЕ
		|	ТаблицаДокументы.ДокументОснование = &ДокументОснование
		|	И НЕ ТаблицаДокументы.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка"
		, "Документ.ЗаказПоставщику КАК", "Документ." + Источник.Метаданные().Имя + " КАК")
		);
		Запрос.УстановитьПараметр("ТекущийДокумент"  , Источник.Ссылка);
		Запрос.УстановитьПараметр("ДокументОснование", Источник.ДокументОснование);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отказано в записи «"
			+ ?(Источник.ЭтоНовый(), "новый " + Источник.Метаданные().Синоним, СокрЛП(Источник)) + "»! "
			+ "В подчинении документа «" + Источник.ДокументОснование + "» уже имеются следующие документы:",,,, Отказ);

			Выборка = Запрос.Выполнить().Выбрать();

			Пока Выборка.Следующий() Цикл

				Сообщить("- " + СокрЛП(Выборка.Представление));

			КонецЦикла;

			Сообщить("В учетной системе допускается только один подчинённый документ!");

		КонецЕсли;

		УстановитьПривилегированныйРежим(Ложь);

	КонецЕсли;

	Если НЕ Отказ Тогда

		УстановитьПривилегированныйРежим(Истина);

	//	Нужно проверить, чтобы документ не мог быть записан раньше своего основания.
	//	И не мог быть записан позже документа, введнного на его основании.

	//	1. Проверка - не раньше основания.
	//	---------------------------------------------------------------------------------------

		Если ЕстьРеквизитДокументОснование И ЗначениеЗаполнено(Источник.ДокументОснование) Тогда

			Если Источник.Дата < ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.ДокументОснование, "Дата", '00010101') Тогда

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отказано в записи «"
				+ ?(Источник.ЭтоНовый(), "новый " + Источник.Метаданные().Синоним, СокрЛП(Источник)) + "»! "
				+ "Подчинённый не может иметь дату, меньшую даты документа «" + Источник.ДокументОснование + "», на основании которого он оформлен!",,,, Отказ);

			КонецЕсли;

		КонецЕсли;

	//	Проверяем для не нового наличие проведенных подчинённых документов.
	//	Если имеется проведенный подчинённый - исключаем любую попытку записи!
		Если НЕ Источник.ЭтоНовый() И НЕ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(Источник.ДополнительныеСвойства, "РегистрацияПередачиВNavision", Ложь) = Истина Тогда

			ТекстЗапроса = ЗаполнениеОбъектовСобытияПовтИсп.ТекстЗапросаПроверкаПодчиненных(Источник.Метаданные().ПолноеИмя());

			Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда

				Запрос = Новый Запрос(ТекстЗапроса);
				Запрос.УстановитьПараметр("ПроверяемПроведенные", Истина);
				Запрос.УстановитьПараметр("ТекущаяСсылка", Источник.Ссылка);

				Результат = Запрос.Выполнить();

				Если НЕ Результат.Пустой() Тогда

					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отказано в записи «" + СокрЛП(Источник) + "»! "
					+ "В его подчинении обнаружены следующие проведенные документы:",,,, Отказ);

					Выборка = Результат.Выбрать();

					Пока Выборка.Следующий() Цикл

						Сообщить("- " + Выборка.Представление);

					КонецЦикла;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		УстановитьПривилегированныйРежим(Ложь);

	КонецЕсли;

	Если Отказ И ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда

	//	"Вернёмся" к предущему состоянию отказа... если в отказ ушло
	//	где-то раньше, то отменить его не имеем права.
		Отказ = БылОтказ;

	КонецЕсли;

КонецПроцедуры

//	LNK 24.05.2017 13:33:15
Процедура ЗаполнениеДокументовКлючевыеРеквизиты(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	Если Источник.ОбменДанными.Загрузка
	ИЛИ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(Источник.ДополнительныеСвойства, "ЗагрузкаИзNavision", Ложь) = Истина
	ИЛИ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(Источник.ДополнительныеСвойства, "СлужебнаяЗапись", Ложь) = Истина  Тогда

	//	Находимся в процессе загрузки...
		Возврат;

	КонецЕсли;

	ИмяМагазин = ЗаполнениеОбъектовСобытияПовтИсп.ИмяКлючевогоРеквизитаМагазин(Источник.Метаданные().ПолноеИмя());

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта(Источник, "Организация") И ОбщегоНазначения.ЕстьРеквизитОбъекта(Источник, ИмяМагазин) Тогда


	КонецЕсли;

//	LNK 27.09.2017 15:04:03
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта(Источник, "Ответственный") И НЕ ЗначениеЗаполнено(Источник.Ответственный)	Тогда

	//	Назначаем ответственного только при проведении!
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение
		И НЕ ПользователиКлиентСервер.ТекущийПользователь() = Справочники.Пользователи.АдминистраторАвтоматов Тогда

			Источник.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 20.11.2020 10:00:38
Процедура ПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	#Если _ Тогда
	Источник = Документы.ПеремещениеТоваров.СоздатьДокумент();
	#КонецЕсли

	Если Источник.ОбменДанными.Загрузка И ЗначениеЗаполнено(Источник.ОбменДанными.Отправитель) Тогда

		Возврат;

	КонецЕсли;

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ТипИсточника = ТипЗнч(Источник);

	Если НЕ Источник.ЭтоНовый() Тогда

		Если ТипИсточника = Тип("ДокументОбъект.КорректировкаПеремещения") тогда 
			Если Источник.ПометкаУдаления и Источник.ССылка.ПометкаУдаления = Ложь тогда
				СделатьЗаписьВРСОбъектыПроблемные(Источник.Ссылка);	
			КонецЕсли;
		КонецЕсли;
		
		УчетнаяПолитика = ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику(Источник.Дата);

		Если НЕ УчетнаяПолитика.РазрешитьПереносДокументаВДругойПериод = Истина Тогда	//	LNK 09.12.2020 08:19:11

			Если ТипИсточника = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда

					ИсточникВнешнийДокумент = (Источник.УзелСоздания = Справочники.СтруктураУзлов.КСУ_Navision);

			Иначе	ИсточникВнешнийДокумент = Ложь;

			КонецЕсли;

			Если ОбменДаннымиПовтИсп.ПланОбменаСодержитОбъект("ОбменNavisionРозница", Источник.Метаданные().ПолноеИмя())
			И ВнешниеИсточникиСобытия.ПередачаNavision(Источник.Ссылка) = Истина
			И НЕ ИсточникВнешнийДокумент Тогда

				Запрос = Новый Запрос(СтрЗаменить(
				"ВЫБРАТЬ
				|	ТаблицаДокумента.Дата КАК Дата
				|ИЗ
				|	Документ.ПеремещениеТоваров КАК ТаблицаДокумента
				|ГДЕ
				|	ТаблицаДокумента.Ссылка = &ТекущаяСсылка"
				, "Документ.ПеремещениеТоваров", "Документ." + Источник.Метаданные().Имя)
				);
				Запрос.УстановитьПараметр("ТекущаяСсылка", Источник.Ссылка);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();

				Если НЕ НачалоГода(Выборка.Дата) = НачалоГода(Источник.Дата) Тогда

					ТекстОшибки = "Отказано! Перенос в другой период уникальности номера документа невозможен.";

					Источник.ДополнительныеСвойства.Вставить(
						"ДанныеОшибки"
						, Новый Структура(
							"Заголовок, Сообщение, Выполнено"
							, СокрЛП(Источник.Ссылка)
							, ТекстОшибки
							, 0
						)
					);

					Отказ = Истина;
					ВызватьИсключение ТекстОшибки;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		Если НЕ Источник.ДополнительныеСвойства.Свойство("ПередЗаписью") Тогда

			Источник.ДополнительныеСвойства.Вставить("ПередЗаписью", Новый Структура)

		КонецЕсли;

		Запрос = Новый Запрос(СтрЗаменить(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ТаблицаДокумента.Номер, Ведущая.Номер) КАК Номер,
		|	ЕСТЬNULL(ТаблицаДокумента.IDN, Ведущая.IDN) КАК IDN
		|ИЗ
		|	(ВЫБРАТЬ
		|		"""" КАК Номер,
		|		"""" КАК IDN) КАК Ведущая
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ТаблицаДокумента
		|		ПО (ТаблицаДокумента.Ссылка = &ТекущаяСсылка)"
		, "Документ.ПеремещениеТоваров", "Документ." + Источник.Метаданные().Имя)
		);

		Если НЕ ОбщегоНазначения.ОбщийРеквизитИспользуется(Источник.Метаданные(), "IDN") Тогда

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДокумента.IDN", "NULL");

		КонецЕсли;

		Запрос.УстановитьПараметр("ТекущаяСсылка", Источник.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Источник.ДополнительныеСвойства.ПередЗаписью.Вставить("ЭтоНовый", Источник.ЭтоНовый());
		Источник.ДополнительныеСвойства.ПередЗаписью.Вставить("Номер"	, Выборка.Номер);
		Источник.ДополнительныеСвойства.ПередЗаписью.Вставить("IDN"		, Выборка.IDN);

	КонецЕсли;

КонецПроцедуры

//	LNK 23.01.2017 15:44:21
Процедура ПриЗаписиДокумента(Источник, Отказ) Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если НЕ (Источник.ОбменДанными.Загрузка И ЗначениеЗаполнено(Источник.ОбменДанными.Отправитель))	Тогда

		ЗафиксироватьИзменениеНомераДокумента(Источник, Отказ);

	КонецЕсли;

	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(Источник.ДополнительныеСвойства, "СлужебнаяЗапись", Ложь) = Истина
	ИЛИ  ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(Источник.ДополнительныеСвойства, "СлужебныйРежимЗаписи", Ложь) = Истина Тогда

	//	LNK 10.07.2017 09:25:19
		Возврат;

	КонецЕсли;

	Если НЕ (Отказ ИЛИ Источник.ОбменДанными.Загрузка) Тогда

	//	LNK 09.08.2022 04:45:00
		Если ЗаполнениеОбъектовСобытияПовтИсп.ВремяДокументаОграниченоКассовымДнём(Источник.Метаданные().ПолноеИмя()) Тогда

			ЗаполнениеОбъектов.ДокументНаходитсяВКассовомДне(Источник, Отказ);

		КонецЕсли;

	КонецЕсли;

	Если НЕ (Источник.ПометкаУдаления ИЛИ Отказ)
	И	 ЗаполнениеОбъектовСобытияПовтИсп.ТипыОбъектУчтенВNavision().Получить(ТипЗнч(Источник.Ссылка)) = Истина Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбъектУчтенВNavision.Магазин
		|ИЗ
		|	РегистрСведений.ОбъектУчтенВNavision КАК ОбъектУчтенВNavision
		|ГДЕ
		|	ОбъектУчтенВNavision.Объект = &ТекущаяСсылка"
		);
		Запрос.УстановитьПараметр("ТекущаяСсылка", Источник.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборЗаписей = РегистрыСведений.ОбъектУчтенВNavision.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
		НаборЗаписей.ДополнительныеСвойства.Вставить("УстановкаВерсииОбъекта", Истина);

		Пока Выборка.Следующий() Цикл

			НаборЗаписей.ОбменДанными.Получатели.Очистить();	//	LNK 21.07.2017 08:16:09
			НаборЗаписей.Отбор.Магазин.Установить(Выборка.Магазин);
			НаборЗаписей.Прочитать();

			Для каждого ЗаписьНабора Из НаборЗаписей Цикл

				ЗаписьНабора.ВерсияОбъекта  = Источник.ВерсияДанных;
				ЗаписьНабора.ДатаОбновления = ТекущаяДатаСеанса();

			КонецЦикла;

			НаборЗаписей.Записать();

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	LNK 16.02.2017 14:30:13
Процедура ОбщиеДействияПередЗаписью(Источник, Отказ)	Экспорт

//	Вызывается в обработчике "ПередЗаписью" конкретно в модуле объекта.
//	Обработчик события не подходит, так как отрабатывается после обработчика в модуле объекта.

//	Следует учитывать, что вызов этой процедуры происходит до отсечки по "ОбменДанными.Загрузка"
//	(т.е. самая первая строка в процедуре обработчике события "ПередЗаписью").
//	Так же необходимо выполнить проверку на авторизованного пользователя - многие фоновые задания
//	выполняются без авторизации.

//	Так же нужно иметь ввиду, что вызов этой процедуры в некоторых случаях может происходить из модуля формы.
//	В таком случае параметр "Источник" будет равен "Неопределено".

	УстановитьПривилегированныйРежим(Истина);

	Если НЕ ПустаяСтрока(ИмяПользователя()) И НЕ РольДоступна(Метаданные.Роли.АдминистраторСистемы) Тогда

		ПараметрыСеанса.ИсключительныйРежим = Ложь;

	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//	LNK 10.11.2016 17:02:06
Процедура ПроверитьУстановкуОбщихРеквизитов(Источник, Отказ)	Экспорт

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта(Источник, "Автор") И Источник.Автор.Пустая() Тогда

		Источник.Автор = ПараметрыСеанса.ТекущийПользователь;

	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта(Источник, "УзелСоздания") И Источник.ЭтоНовый() Тогда

		Если Источник.УзелСоздания.Пустая() Тогда

			Источник.УзелСоздания = ОбменДаннымиПовтИсп.ПолучитьТекущийЭлементСтруктурыУзлов();

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 20.11.2020 10:15:36
Процедура ЗафиксироватьИзменениеНомераДокумента(Источник, Отказ)

	Если НЕ Источник.ДополнительныеСвойства.Свойство("ПередЗаписью")
	ИЛИ  НЕ Источник.ДополнительныеСвойства.ПередЗаписью.Свойство("IDN")	Тогда

		Возврат;

	КонецЕсли;

	ЕстьОбщийРеквизит = ОбщегоНазначения.ОбщийРеквизитИспользуется(Источник.Метаданные(), "IDN");

	Если  НЕ ПустаяСтрока(Источник.ДополнительныеСвойства.ПередЗаписью.Номер)
		И НЕ Источник.Номер = Источник.ДополнительныеСвойства.ПередЗаписью.Номер
	ИЛИ ?(ЕстьОбщийРеквизит
		, НЕ ПустаяСтрока(Источник.ДополнительныеСвойства.ПередЗаписью.IDN) И НЕ Источник.IDN = Источник.ДополнительныеСвойства.ПередЗаписью.IDN
		, Ложь)
	Тогда

		НаборЗаписей = РегистрыСведений.КлючевыеАтрибутыДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТекущаяДата());
		НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
		НаборЗаписей.Отбор.Магазин.Установить(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);
		
		ЗаписьНабора = НаборЗаписей.Добавить();

		ЗаписьНабора.Период  = НаборЗаписей.Отбор.Период.Значение;
		ЗаписьНабора.Объект  = НаборЗаписей.Отбор.Объект.Значение;
		ЗаписьНабора.Магазин = НаборЗаписей.Отбор.Магазин.Значение;

		ЗаписьНабора.Автор			= ПараметрыСеанса.ТекущийПользователь;
		ЗаписьНабора.УзелСоздания	= ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().ЭлементСтруктуры;

		ЗаписьНабора.ЭтоНовый		= Источник.ДополнительныеСвойства.ПередЗаписью.ЭтоНовый;
		ЗаписьНабора.ОбменNavision	= ОбменДаннымиПовтИсп.ПланОбменаСодержитОбъект("ОбменNavisionРозница", Источник.Метаданные().ПолноеИмя());

		ЗаписьНабора.Номер = Источник.Номер;
		ЗаписьНабора.НомерПредыдущий = Источник.ДополнительныеСвойства.ПередЗаписью.Номер;

		Если ЕстьОбщийРеквизит Тогда

			ЗаписьНабора.IDN = Источник.IDN;
			ЗаписьНабора.IDNПредыдущий = Источник.ДополнительныеСвойства.ПередЗаписью.IDN;

		КонецЕсли;

		НаборЗаписей.Записать();

	КонецЕсли;

КонецПроцедуры

Процедура СделатьЗаписьВРСОбъектыПроблемные(ДокССылка)
				МенеджерЗаписи = РегистрыСведений.ОбъектыПроблемныеДоВыяснения.СоздатьМенеджерЗаписи();

				МенеджерЗаписи.Период   = ТекущаяДата();
				МенеджерЗаписи.Объект   = ДокССылка;
				МенеджерЗаписи.Магазин  = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин;

				МенеджерЗаписи.Статус   = Перечисления.СтатусыОбъектовДоВыяснения.Обычный;
				МенеджерЗаписи.Источник = "ДокКорректирвка";
				МенеджерЗаписи.МоментСоздания = ОбщегоНазначенияКлиентСервер.УникальныйИдентификаторВремя(ДокССылка.УникальныйИдентификатор());

				МенеджерЗаписи.Комментарий = "Для рассылки";

				МенеджерЗаписи.Записать();

КонецПроцедуры

#КонецОбласти











