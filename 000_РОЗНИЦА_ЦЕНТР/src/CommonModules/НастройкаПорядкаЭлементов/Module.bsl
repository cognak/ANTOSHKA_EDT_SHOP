////////////////////////////////////////////////////////////////////////////////
// Подсистема "Настройка порядка элементов".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Заполняет значение реквизита дополнительного упорядочивания у объекта.
//
// Параметры:
//  Источник - Объект - записываемый объект;
//  Отказ    - Булево - признак отказа от записи объекта.
Процедура ЗаполнитьЗначениеРеквизитаУпорядочивания(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда 
		Возврат; 
	КонецЕсли;
	
	// Если в обработчике был установлен отказ новый порядок не вычисляем
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, есть ли у объекта реквизит доп. упорядочивания
	Информация = НастройкаПорядкаЭлементовСлужебный.ПолучитьИнформациюДляПеремещения(Источник.Ссылка);
	Если Не УОбъектаЕстьРеквизитДопУпорядочивания(Источник, Информация) Тогда
		Возврат;
	КонецЕсли;
	
	// Вычислим новое значение для порядка элемента
	Если Источник.РеквизитДопУпорядочивания = 0 Тогда
		Источник.РеквизитДопУпорядочивания =
			НастройкаПорядкаЭлементовСлужебный.ПолучитьНовоеЗначениеРеквизитаДопУпорядочивания(
					Информация,
					?(Информация.ЕстьРодитель, Источник.Родитель, Неопределено),
					?(Информация.ЕстьВладелец, Источник.Владелец, Неопределено));
	КонецЕсли;
	
КонецПроцедуры

// Обнуляет значение реквизита дополнительного упорядочивания у объекта.
//
// Параметры:
//  Источник          - Объект - объект, создаваемый копированием;
//  ОбъектКопирования - Ссылка - исходный объект, который является источником копирования.
Процедура СброситьЗначениеРеквизитаУпорядочивания(Источник, ОбъектКопирования) Экспорт
	
	Информация = НастройкаПорядкаЭлементовСлужебный.ПолучитьИнформациюДляПеремещения(Источник.Ссылка);
	Если УОбъектаЕстьРеквизитДопУпорядочивания(Источник, Информация) Тогда
		Источник.РеквизитДопУпорядочивания = 0;
	КонецЕсли;
	
КонецПроцедуры

#Область УправлениеПорядкомЭлементов

Процедура ПереместитьЭлемент(СписокРеквизит, СписокЭлемент, Направление)	Экспорт

	Если СписокЭлемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ПроверитьСписокПередОперацией(СписокРеквизит) Тогда
		Возврат;
	КонецЕсли;

	ОтображениеСписком = (СписокЭлемент.Отображение = ОтображениеТаблицы.Список);
	
	ТекстОшибки = НастройкаПорядкаЭлементовСлужебныйВызовСервера.ИзменитьПорядокЭлементов(
		СписокЭлемент.ТекущаяСтрока, СписокРеквизит, ОтображениеСписком, Направление);
		
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		Сообщить( ТекстОшибки);
	КонецЕсли;
	
	СписокЭлемент.Обновить();
	
КонецПроцедуры

Функция ПроверитьСписокПередОперацией(СписокРеквизит)
	
	Если Не СортировкаВСпискеУстановленаПравильно(СписокРеквизит) Тогда
		Сообщить(НСтр("ru = 'Для изменения порядка элементов необходимо настроить сортировку
								  |списка таким образом, чтобы поле ""Порядок"" находилось на первой
								  |позиции, и вид сортировки был установлен ""По возрастанию"".'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если СписокСодержитГруппуОтборов(СписокРеквизит) Тогда
		Сообщить(НСтр("ru = 'Для изменения порядка элементов у списка необходимо отключить группы отборов.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ЭлементГруппировки Из СписокРеквизит.Группировка.Элементы Цикл
		Если ЭлементГруппировки.Использование Тогда
			Сообщить(НСтр("ru = 'Для изменения порядка элементов необходимо отключить все группировки.'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция СортировкаВСпискеУстановленаПравильно(СписокРеквизит)
	
	ЭлементыПорядка = СписокРеквизит.Порядок.Элементы;
	
	// Найдем первый используемый элемент порядка
	Элемент = Неопределено;
	Для Каждого ЭлементПорядка Из ЭлементыПорядка Цикл
		Если ЭлементПорядка.Использование Тогда
			Элемент = ЭлементПорядка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Элемент = Неопределено Тогда
		// Не установлена никакая сортировка
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Элемент) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
		Если Элемент.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда
			ПолеРеквизита = Новый ПолеКомпоновкиДанных("РеквизитДопУпорядочивания");
			Если Элемент.Поле = ПолеРеквизита Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция СписокСодержитГруппуОтборов(Список)
	Для Каждого Отбор Из Список.Отбор.Элементы Цикл
		Если Не Отбор.Использование Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(Отбор) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции
	
#КонецОбласти
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция УОбъектаЕстьРеквизитДопУпорядочивания(Объект, Информация)
	
	Если Не Информация.ЕстьРодитель Тогда
		// Справочник неиерархический, значит реквизит есть
		Возврат Истина;
		
	ИначеЕсли Объект.ЭтоГруппа И Не Информация.ДляГрупп Тогда
		// Это группа, но для группа порядок не назначается
		Возврат Ложь;
		
	ИначеЕсли Не Объект.ЭтоГруппа И Не Информация.ДляЭлементов Тогда
		// Это элемент, но для элементов порядок не назначается
		Возврат Ложь;
		
	Иначе
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции
