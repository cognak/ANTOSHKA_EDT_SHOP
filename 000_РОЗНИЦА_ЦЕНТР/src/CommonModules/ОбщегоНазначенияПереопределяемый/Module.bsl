 ////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает список имен объектов метаданных, данные которых могут содержать ссылки на различные объекты метаданных,
// но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Пример:
// Для документ "Реализация товаров и услуг" настроена подсистема версионирования объектов,
// и подсистема свойств. При этом на экземпляр документа может быть множество ссылок 
// в информационной базе (из других документов, регистров). Часть ссылок имеют значение для бизнес-логики
// (например движения по регистрам). Другая часть ссылок - "техногенные" ссылки на объект из объектов ИБ,
// которые относятся к подсистеме версионирования объектов и подсистеме свойств. Такие "техногенные"
// ссылки должны быть отфильтрованы, например, в обработке удаления помеченных и при поиске ссылок на объект
// в подсистеме запрета редактирования ключевых реквизитов.
// Список таких "техногенных" объектов нужно перечислить в этой функции.
//
// Возвращаемое значение:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Функция ПолучитьИсключенияПоискаСсылок() Экспорт
	
	Массив = Новый Массив;
	
	Возврат Массив;
	
КонецФункции 

// Обработчик события, возникающего при обновлении
// данных справочника ИдентификаторыОбъектовМетаданных
//
// Параметры:
//  ВидСобытия   - Строка - "Добавление", "Изменение", "Удаление"
//  Свойства     - Структура:
//                   Старые     - Структура - основные поля и значения старого элемента справочника
//                   Новые      - Структура - основные поля и значения нового  элемента справочника
//                   СтандартнаяЗаменаСсылок
//                              - Булево - если свойство задано Истина,
//                                тогда  в информационной базе будет произведена замена
//                                "Свойства.Старые.Ссылка" на "Свойства.Новые.Ссылка". Можно
//                                установить значение Ложь, тогда замена произведена не будет.
//                                 Замена происходит, когда вместо обычного элемента был
//                                добавлен предопределенный элемент или при замене одного
//                                объекта метаданных на другой для безошибочной реструктуризации.
//
Процедура ПриИзмененииИдентификатораОбъектаМетаданных(ВидСобытия, Свойства) Экспорт
	
	
	
КонецПроцедуры

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Функция ОбработчикиИнициализацииПараметровСеанса() Экспорт
	
	// Для задания обработчиков параметров сеанса следует использовать шаблон:
	// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик");
	//
	// Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
	//             что один обработчик будет вызван для инициализации всех параметров сеанса
	//             с именем, начинающимся на слово НачалоИмениПараметраСеанса
	//
	
	Обработчики = Новый Соответствие;
	
	//ПодключаемоеОборудование
	Обработчики.Вставить("РабочееМестоКлиента", "МенеджерОборудованияСервер.УстановитьПараметрыСеансаПодключаемогоОборудования");
	//Конец ПодключаемоеОборудование
	
	
	Обработчики.Вставить("ОткрытРежимМенеджераИзРМК", "ОбщегоНазначенияРТСервер.УстановитьПараметрыСеанса");
	Обработчики.Вставить("РежимРегистрацииПродаж"   , "ОбщегоНазначенияРТСервер.УстановитьПараметрыСеанса");
	Обработчики.Вставить("ОбщиеЗначения"            , "ОбщегоНазначенияРТСервер.УстановитьПараметрыСеанса");
	Обработчики.Вставить("ТекущийМагазин"           , "ОбщегоНазначенияРТСервер.УстановитьПараметрыСеанса");
	Обработчики.Вставить("ТекущаяОрганизация"       , "ОбщегоНазначенияРТСервер.УстановитьПараметрыСеанса");
	
	Возврат Обработчики;
	
КонецФункции

// Устанавливает текстовое описание предмета
//
// Параметры
//  СсылкаНаПредмет  – ЛюбаяСсылка – объект ссылочного типа.
//  Представление	 - Строка - сюда необходимо поместить текстовое описание.
Процедура УстановитьПредставлениеПредмета(СсылкаНаПредмет, Представление) Экспорт
	
КонецПроцедуры

// Заполняет переименования тех объектов метаданных, которые невозможно
// автоматически найти по типу, но ссылки на которые требуется сохранять
// в базе данных (например: подсистемы, роли).
//
// Подробнее: см. ОбщегоНазначения.ДобавитьПереименование().
//
Процедура ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог) Экспорт
	
	
	
КонецПроцедуры

// Устанавливает имя формы персональных настроек
//
// Параметры
// ИмяФормы - Строка - пустая
//
Процедура ИмяФормыПерсональныхНастроек(ИмяФормы) Экспорт
	
	
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента при запуске.
//
// Пример реализации:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента.
//
// Пример реализации:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
Процедура ПараметрыРаботыКлиента(Параметры) Экспорт
	
	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Параметры.Вставить("ТекущийМагазин", ОбщегоНазначенияРТСервер.ОпределитьТекущийМагазин());

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаМагазины.Код, Ведущая.Код) КАК Код,
	|	ЕСТЬNULL(ТаблицаМагазины.Наименование, Ведущая.Наименование) КАК Наименование,
	|	ЕСТЬNULL(ТаблицаМагазины.НомерМагазина, Ведущая.НомерМагазина) КАК НомерМагазина
	|ИЗ
	|	(ВЫБРАТЬ
	|		&ТекущийМагазин КАК Ссылка,
	|		"""" КАК Код,
	|		"""" КАК Наименование,
	|		0 КАК НомерМагазина) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины КАК ТаблицаМагазины
	|		ПО Ведущая.Ссылка = ТаблицаМагазины.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка КАК Узел,
	|	ТаблицаУзлы.Код КАК Код,
	|	ТаблицаУзлы.Наименование КАК Наименование,
	|	ТаблицаУзлы.ВидУзла КАК ВидУзла,
	|	ТаблицаУзлы.Магазин КАК Магазин,
	|	ТаблицаУзлы.ОсновнаяОрганизация КАК ОсновнаяОрганизация,
	|	ВЫБОР
	|		КОГДА ТаблицаУзлы.ВидУзла = ЗНАЧЕНИЕ(Перечисление.ВидыУзлов.ЦентральныйОфис)
	|			ТОГДА ""ЦО""
	|		КОГДА ТаблицаУзлы.ВидУзла = ЗНАЧЕНИЕ(Перечисление.ВидыУзлов.ПустойУзел)
	|			ТОГДА ""ПУСТОЙ""
	|		КОГДА ТаблицаУзлы.ВидУзла = ЗНАЧЕНИЕ(Перечисление.ВидыУзлов.ТестовыйУзел)
	|			ТОГДА ""ТЕСТ""
	|		КОГДА ТаблицаУзлы.ВидУзла = ЗНАЧЕНИЕ(Перечисление.ВидыУзлов.УзелРасчёта)
	|			ТОГДА ""РАСЧЁТ""
	|		КОГДА ТаблицаУзлы.ВидУзла = ЗНАЧЕНИЕ(Перечисление.ВидыУзлов.ИнтернетМагазин)
	|			ТОГДА ""ИМ""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК МаркерУзла
	|ИЗ
	|	ПланОбмена.ПоМагазину КАК ТаблицаУзлы
	|ГДЕ
	|	ТаблицаУзлы.ЭтотУзел"
	);
	Запрос.УстановитьПараметр("ТекущийМагазин", Параметры.ТекущийМагазин);

	РезультатыЗапроса = Запрос.ВыполнитьПакет();

	ВыборкаМагазин = РезультатыЗапроса[0].Выбрать();
	ВыборкаМагазин.Следующий();
	ВыборкаУзел    = РезультатыЗапроса[1].Выбрать();
	ВыборкаУзел.Следующий();

	Параметры.Вставить("ТекущийМагазинРеквизиты", ОбщегоНазначенияРТ.СоздатьСтруктуруПоСтрокеВыборки(РезультатыЗапроса[0], ВыборкаМагазин, Истина));
	Параметры.Вставить("ТекущийУзелРеквизиты"	, ОбщегоНазначенияРТ.СоздатьСтруктуруПоСтрокеВыборки(РезультатыЗапроса[1], ВыборкаУзел, Истина));

КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода
// конфигурации при завершении, т.е. в обработчиках:
// - ПередЗавершениемРаботыСистемы,
// - ПриЗавершенииРаботыСистемы
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента при завершении.
//
// Пример реализации:
//   Для установки параметров работы клиента при завершении можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
Процедура ПараметрыРаботыКлиентаПриЗавершении(Параметры) Экспорт
	
КонецПроцедуры

// Вызывается при необходимости переопределить минимально необходимую версию платформы для запуска.
//
// Параметры: 
//   ПараметрыПроверки - ФиксированнаяСтруктура - 
//     МинимальноНеобходимаяВерсияПлатформы   - Строка - номер версии платформы для запуска программы
//     РаботаВПрограммеЗапрещена              - Булево - по умолчанию Ложь
//							
Процедура ПолучитьМинимальноНеобходимуюВерсиюПлатформы(ПараметрыПроверки) Экспорт
	
КонецПроцедуры

// Позволяет настроить общие параметры базовой функциональности.
//
// Параметры:
//  ОбщиеПараметры (Структура) Набор параметров базовой функциональности:
//    Ранее определялись в ОбщегоНазначенияПереопределяемый.ИмяФормыПерсональныхНастроек():
//      |- ИмяФормыПерсональныхНастроек (Строка) Имя формы для редактирования персональных настроек.
//    Ранее определялись в ОбщегоНазначенияПереопределяемый.ПолучитьМинимальноНеобходимуюВерсиюПлатформы():
//      |- МинимальноНеобходимаяВерсияПлатформы (Строка) Номер версии платформы для запуска программы.
//      |- РаботаВПрограммеЗапрещена (Булево) Начальное значение Ложь.
//    Не имеют аналогов в переопределяемых модулях:
//      |- ЗапрашиватьПодтверждениеПриЗавершенииПрограммы (Булево) Определяет значение по умолчанию для флажка
//         "Больше не задавать этот вопрос" диалога "Завершить работу с программой?".
//         Значение по умолчанию Истина.
//         Если установить Ложь, то пользователь не увидит диалог, пока явно не включит его отображение через свои настройки.
//
Процедура ПриОпределенииОбщихПараметровБазовойФункциональности(ОбщиеПараметры) Экспорт
	
	
	
КонецПроцедуры

// Обработчик события "Перед загрузкой идентификаторов объектов метаданных в подчиненном РИБ узле".
// Выполняет заполнение настроек размещения сообщения обмена данными или
// нестандартную загрузку идентификаторов объектов метаданных из главного узла.
//
// Параметры:
//  СтандартнаяОбработка - Булево, начальное значение Истина, если установить Ложь, тогда стандартная загрузка
//                идентификаторов объектов метаданных с помощью подсистемы ОбменДанными будет пропущена (тоже
//                будет и в случае, если подсистемы ОбменДанными нет).
//
Процедура ПередЗагрузкойИдентификаторовОбъектовМетаданныхВПодчиненномРИБУзле(СтандартнаяОбработка) Экспорт

//	LNK 16.10.2016
	СтандартнаяОбработка = Ложь;	

КонецПроцедуры

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию программных интерфейсов,
// используя в качестве ключей имена программных интерфейсов.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура:
//  Ключ - Имя программного интерфейса,
//  Значение - Массив(Строка) - поддерживаемые версии программного интерфейса.
//
// Пример реализации:
//
//  // СервисПередачиФайлов
//  МассивВерсий = Новый Массив;
//  МассивВерсий.Добавить("1.0.1.1");
//  МассивВерсий.Добавить("1.0.2.1"); 
//  СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//  // Конец СервисПередачиФайлов
//
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий) Экспорт
	
	
	
КонецПроцедуры
