////////////////////////////////////////////////////////////////////////////////
// ОбменССайтомПереопределяемый: механизм обмена с сайтом.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет имя формы узла плана обмена "Обмен с сайтом".
//
Процедура ПереопределитьФормуУзла(ВыбраннаяФорма) Экспорт
	
	
КонецПроцедуры

// Формирует текст запроса, который позволит получить таблицу значений,
// описанную в макете "СхемаВыгрузкиОбновлениеПакетаПредложений"
// плана обмена "Обмен с сайтом".
Процедура ПолучитьТекстЗапросаОбновлениеПакетаПредложений(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Склад.Магазин КАК Магазин,
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика,
	|	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыНаСкладахОстатки.РезервОстаток) КАК СвободныйОстаток
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Склад.Магазин,
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Магазины.Ссылка КАК Магазин,
	|	Магазины.ПравилоЦенообразования КАК ПравилоЦенообразования
	|ПОМЕСТИТЬ ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	НЕ(Магазины.КонтролироватьАссортимент
	|				И &ИспользоватьАссортимент)
	|	И НЕ Магазины.ИспользоватьПрименениеЦен
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаЦенообразования.Ссылка КАК ПравилоЦенообразования,
	|	ПравилаЦенообразования.ВидЦен,
	|	ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка) КАК ЦеноваяГруппа
	|ПОМЕСТИТЬ ТаблицаПравилЦенообразованияИВидовЦен
	|ИЗ
	|	Справочник.ПравилаЦенообразования КАК ПравилаЦенообразования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаЦенообразованияЦеновыеГруппы.Ссылка,
	|	ПравилаЦенообразованияЦеновыеГруппы.ВидЦен,
	|	ПравилаЦенообразованияЦеновыеГруппы.ЦеноваяГруппа
	|ИЗ
	|	Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ПравилаЦенообразованияЦеновыеГруппы
	|ГДЕ
	|	ПравилаЦенообразованияЦеновыеГруппы.ЦеноваяГруппа <> ЗНАЧЕНИЕ(Справочник.ПравилаЦенообразования.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования.Магазин,
	|	ТаблицаПравилЦенообразованияИВидовЦен.ЦеноваяГруппа,
	|	ТаблицаПравилЦенообразованияИВидовЦен.ВидЦен
	|ПОМЕСТИТЬ ТаблицаМагазиновЦеныНоменклатуры
	|ИЗ
	|	ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования КАК ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПравилЦенообразованияИВидовЦен КАК ТаблицаПравилЦенообразованияИВидовЦен
	|		ПО ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования.ПравилоЦенообразования = ТаблицаПравилЦенообразованияИВидовЦен.ПравилоЦенообразования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Магазины.ФорматМагазина КАК ФорматМагазина,
	|	Магазины.Ссылка КАК Магазин
	|ПОМЕСТИТЬ ТаблицаМагазиновЦеныПоАссортименту
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.КонтролироватьАссортимент
	|	И &ИспользоватьАссортимент
	|	И НЕ Магазины.ИспользоватьПрименениеЦен
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Магазины.Магазин КАК Магазин,
	|	Ассортимент.ВидЦен КАК ВидЦен
	|ПОМЕСТИТЬ втАссортимент
	|ИЗ
	|	РегистрСведений.Ассортимент.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&ПериодАссортимента, ДЕНЬ),
	|			ОбъектПланирования В
	|				(ВЫБРАТЬ
	|					Т.ФорматМагазина
	|				ИЗ
	|					ТаблицаМагазиновЦеныПоАссортименту КАК Т)) КАК Ассортимент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновЦеныПоАссортименту КАК Магазины
	|		ПО (Магазины.ФорматМагазина = Ассортимент.ОбъектПланирования)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦен,
	|	Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Магазины.Ссылка КАК Магазин
	|ПОМЕСТИТЬ ТаблицаМагазиновДействующиеЦены
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.ИспользоватьПрименениеЦен
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Магазины.Ссылка КАК Магазин,
	|	Магазины.ВидМинимальныхЦенПродажи КАК ВидМинимальныхЦенПродажи
	|ПОМЕСТИТЬ ТаблицаМагазиновСМинимальнымиЦенами
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	НЕ Магазины.ВидМинимальныхЦенПродажи = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМагазиновЦеныНоменклатуры.Магазин,
	|	ТаблицаМагазиновЦеныНоменклатуры.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ТаблицаМагазиновЦеныНоменклатуры.ВидЦен
	|ПОМЕСТИТЬ ТаблицаМагазиновПоВидамЦен
	|ИЗ
	|	ТаблицаМагазиновЦеныНоменклатуры КАК ТаблицаМагазиновЦеныНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втАссортимент.Магазин,
	|	ЗНАЧЕНИЕ(Справочник.ПравилаЦенообразования.ПустаяСсылка),
	|	втАссортимент.ВидЦен
	|ИЗ
	|	втАссортимент КАК втАссортимент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидЦены,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Упаковка
	|ПОМЕСТИТЬ ТаблицаЦенПоВидамЦен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|		ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|		ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|		ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|		ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ВидЦены В
	|					(ВЫБРАТЬ
	|						ТаблицаМагазиновПоВидамЦен.ВидЦен КАК ВидЦены
	|					ИЗ
	|						ТаблицаМагазиновПоВидамЦен КАК ТаблицаМагазиновПоВидамЦен)) КАК ЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Магазин,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.ВидЦены
	|ПОМЕСТИТЬ ЦеныБезПриведенияКУпаковке
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЦенПоВидамЦен.Цена КАК Цена,
	|		ТаблицаМагазиновПоВидамЦен.Магазин КАК Магазин,
	|		ТаблицаЦенПоВидамЦен.Упаковка КАК Упаковка,
	|		ТаблицаЦенПоВидамЦен.Номенклатура КАК Номенклатура,
	|		ТаблицаЦенПоВидамЦен.Характеристика КАК Характеристика,
	|		ТаблицаЦенПоВидамЦен.ВидЦены КАК ВидЦены,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ЕСТЬNULL(ТаблицаМагазиновПоВидамЦен.ЦеноваяГруппа, ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|					ТОГДА 1
	|				ИНАЧЕ 2
	|			КОНЕЦ) КАК ПолеЦеновойГруппы
	|	ИЗ
	|		ТаблицаЦенПоВидамЦен КАК ТаблицаЦенПоВидамЦен
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновПоВидамЦен КАК ТаблицаМагазиновПоВидамЦен
	|			ПО ТаблицаЦенПоВидамЦен.ВидЦены = ТаблицаМагазиновПоВидамЦен.ВидЦен
	|				И (ТаблицаЦенПоВидамЦен.ЦеноваяГруппа = ТаблицаМагазиновПоВидамЦен.ЦеноваяГруппа
	|					ИЛИ ТаблицаМагазиновПоВидамЦен.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаЦенПоВидамЦен.ВидЦены,
	|		ТаблицаЦенПоВидамЦен.Характеристика,
	|		ТаблицаЦенПоВидамЦен.Номенклатура,
	|		ТаблицаМагазиновПоВидамЦен.Магазин,
	|		ТаблицаЦенПоВидамЦен.Упаковка,
	|		ТаблицаЦенПоВидамЦен.Цена) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Магазин,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.ВидЦен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДействующиеЦеныНоменклатурыСрезПоследних.ОбъектЦенообразования КАК Магазин,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.ОбъектЦенообразования.ПравилоЦенообразования.ВидЦен КАК ВидЦен
	|	ИЗ
	|		РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ОбъектЦенообразования В
	|					(ВЫБРАТЬ
	|						ТаблицаМагазинов.Магазин
	|					ИЗ
	|						ТаблицаМагазиновДействующиеЦены КАК ТаблицаМагазинов)) КАК ДействующиеЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныБезПриведенияКУпаковке.Магазин,
	|	ЦеныБезПриведенияКУпаковке.Цена / ВЫБОР
	|		КОГДА ЦеныБезПриведенияКУпаковке.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ЦеныБезПриведенияКУпаковке.Упаковка.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЦеныБезПриведенияКУпаковке.Упаковка.Коэффициент
	|	КОНЕЦ КАК Цена,
	|	ЦеныБезПриведенияКУпаковке.Номенклатура,
	|	ЦеныБезПриведенияКУпаковке.Характеристика,
	|	ЦеныБезПриведенияКУпаковке.ВидЦены
	|ПОМЕСТИТЬ ЦеныБезПриведенияКМинимальнымВидамЦен
	|ИЗ
	|	ЦеныБезПриведенияКУпаковке КАК ЦеныБезПриведенияКУпаковке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Цена / ВЫБОР
	|		КОГДА ВложенныйЗапрос.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ВложенныйЗапрос.Упаковка.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВложенныйЗапрос.Упаковка.Коэффициент
	|	КОНЕЦ КАК Цена,
	|	ТаблицаМагазиновСМинимальнымиЦенами.Магазин,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.ВидЦены
	|ПОМЕСТИТЬ ТаблицаЦенПоМинимальнымВидамЦен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|		ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|		ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка,
	|		ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|		ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ВидЦены В
	|					(ВЫБРАТЬ
	|						ТаблицаМагазиновСМинимальнымиЦенами.ВидМинимальныхЦенПродажи КАК ВидЦены
	|					ИЗ
	|						ТаблицаМагазиновСМинимальнымиЦенами КАК ТаблицаМагазиновСМинимальнымиЦенами)) КАК ЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновСМинимальнымиЦенами КАК ТаблицаМагазиновСМинимальнымиЦенами
	|		ПО ВложенныйЗапрос.ВидЦены = ТаблицаМагазиновСМинимальнымиЦенами.ВидМинимальныхЦенПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.Магазин,
	|	ВЫБОР
	|		КОГДА ТаблицаЦенПоМинимальнымВидамЦен.Цена ЕСТЬ NULL 
	|			ТОГДА ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(ТаблицаЦенПоМинимальнымВидамЦен.Цена, 0) > ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
	|					ТОГДА ЕСТЬNULL(ТаблицаЦенПоМинимальнымВидамЦен.Цена, 0)
	|				ИНАЧЕ ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
	|			КОНЕЦ
	|	КОНЕЦ КАК Цена,
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.Номенклатура,
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.Характеристика,
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.ВидЦены
	|ПОМЕСТИТЬ ТаблицаЦенПоМагазинам
	|ИЗ
	|	ЦеныБезПриведенияКМинимальнымВидамЦен КАК ЦеныБезПриведенияКМинимальнымВидамЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦенПоМинимальнымВидамЦен КАК ТаблицаЦенПоМинимальнымВидамЦен
	|		ПО ЦеныБезПриведенияКМинимальнымВидамЦен.Магазин = ТаблицаЦенПоМинимальнымВидамЦен.Магазин
	|		И ЦеныБезПриведенияКМинимальнымВидамЦен.Номенклатура = ТаблицаЦенПоМинимальнымВидамЦен.Номенклатура
	|		И ЦеныБезПриведенияКМинимальнымВидамЦен.Характеристика = ТаблицаЦенПоМинимальнымВидамЦен.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЦенПоМагазинам.Номенклатура,
	|	ТаблицаЦенПоМагазинам.Характеристика,
	|	ТаблицаЦенПоМагазинам.ВидЦены КАК ТипЦены,
	|	ТаблицаЦенПоМагазинам.Цена КАК ЦенаЗаЕдиницу,
	|	ТаблицаЦенПоМагазинам.Магазин КАК Склад,
	|	0 КАК ОстатокНаСкладе
	|ПОМЕСТИТЬ ТаблицаОстатковИЦен
	|ИЗ
	|	ТаблицаЦенПоМагазинам КАК ТаблицаЦенПоМагазинам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатков.Номенклатура,
	|	ТаблицаОстатков.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка),
	|	0,
	|	ТаблицаОстатков.Магазин,
	|	ТаблицаОстатков.СвободныйОстаток
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатковИЦен.Номенклатура,
	|	ТаблицаОстатковИЦен.Характеристика,
	|	ТаблицаОстатковИЦен.ТипЦены,
	|	ТаблицаОстатковИЦен.ЦенаЗаЕдиницу,
	|	ТаблицаОстатковИЦен.Склад,
	|	ТаблицаОстатковИЦен.ОстатокНаСкладе,
	|	""RUB"" КАК ТипЦеныВалютаНаименование,
	|	""RUB"" КАК ТипЦеныВалютаКод,
	|	ТаблицаОстатковИЦен.Номенклатура.ЕдиницаИзмерения.Наименование КАК ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	1 КАК ТипЦеныЕдиницаЦеныКоэффициент
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	Характеристика.*,
	|	ТипЦены.*,
	|	ЦенаЗаЕдиницу,
	|	Склад.*,
	|	ОстатокНаСкладе,
	|	ТипЦеныВалютаНаименование,
	|	ТипЦеныВалютаКод,
	|	ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ТипЦеныЕдиницаЦеныКоэффициент}
	|ИЗ
	|	ТаблицаОстатковИЦен КАК ТаблицаОстатковИЦен
	|{ГДЕ
	|	ТаблицаОстатковИЦен.Номенклатура.*,
	|	ТаблицаОстатковИЦен.ТипЦены.* КАК ТипЦены,
	|	ТаблицаОстатковИЦен.Склад.*,
	|	ТаблицаОстатковИЦен.ОстатокНаСкладе}";
	
КонецПроцедуры

// Формирует тексты запросов, которые позволяют получить таблицу значений,
// описанные в макете "СхемаВыгрузкиПакетПредложений"
// плана обмена "Обмен с сайтом".
// Параметры:
//		ТекстыЗапросов - структура содержащая тексты запросов.
//			* Цены - поле, в которое нужно поместить текст запроса для заполнения источника данных "Цены"
//					макета "СхемаВыгрузкиПакетПредложений" плана обмена "ОбменССайтом".
//			* Остатки- поле, в которое нужно поместить текст запроса для заполнения источника данных "Остатки"
//					макета "СхемаВыгрузкиПакетПредложений" плана обмена "ОбменССайтом".
//
Процедура ПолучитьТекстыЗапросовПакетаПредложений(ТекстыЗапросов) Экспорт
	
	ТекстыЗапросов.Цены =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	ВЫБОР
	|		КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИспользоватьХарактеристики,
	|	ВЫБОР
	|		КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
	|			ТОГДА Номенклатура.Ссылка
	|		ИНАЧЕ Номенклатура.ВидНоменклатуры
	|	КОНЕЦ КАК ВладелецХарактеристик
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Ссылка КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатураХарактеристикаБезШтрихКодов
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|ГДЕ
	|	НЕ ТаблицаНоменклатуры.ИспользоватьХарактеристики
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	ХарактеристикиНоменклатуры.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаНоменклатуры.Ссылка КАК Ссылка,
	|		ТаблицаНоменклатуры.ВладелецХарактеристик КАК ВладелецХарактеристик
	|	ИЗ
	|		ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|	ГДЕ
	|		ТаблицаНоменклатуры.ИспользоватьХарактеристики) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ВложенныйЗапрос.ВладелецХарактеристик = ХарактеристикиНоменклатуры.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатураХарактеристика.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатураХарактеристика.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатураХарактеристика.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	ТаблицаНоменклатураХарактеристика.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &ЕдиницаПоУмолчанию
	|		ИНАЧЕ ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &КодЕдиницыПоУмолчанию
	|		ИНАЧЕ ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияКод,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &НаименованиеПолноеЕдиницыПоУмолчанию
	|		ИНАЧЕ ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное
	|	КОНЕЦ КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &НаименованиеЕдиницыПоУмолчанию
	|		ИНАЧЕ ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &МеждународноеСокращениеЕдиницыПоУмолчанию
	|		ИНАЧЕ ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение
	|	КОНЕЦ КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	1 КАК ЕдиницаИзмеренияПересчетКоэф,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &КодЕдиницыПоУмолчанию
	|		ИНАЧЕ ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияПересчетЕдиница,
	|	ТаблицаНоменклатураХарактеристика.Номенклатура.ПометкаУдаления КАК НоменклатураПометкаУдаления
	|ПОМЕСТИТЬ ТаблицаКаталога
	|ИЗ
	|	ТаблицаНоменклатураХарактеристикаБезШтрихКодов КАК ТаблицаНоменклатураХарактеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Магазины.Ссылка КАК Магазин,
	|	Магазины.ПравилоЦенообразования КАК ПравилоЦенообразования
	|ПОМЕСТИТЬ ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	НЕ(Магазины.КонтролироватьАссортимент
	|				И &ИспользоватьАссортимент)
	|	И НЕ Магазины.ИспользоватьПрименениеЦен
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаЦенообразования.Ссылка КАК ПравилоЦенообразования,
	|	ПравилаЦенообразования.ВидЦен,
	|	ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка) КАК ЦеноваяГруппа
	|ПОМЕСТИТЬ ТаблицаПравилЦенообразованияИВидовЦен
	|ИЗ
	|	Справочник.ПравилаЦенообразования КАК ПравилаЦенообразования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаЦенообразованияЦеновыеГруппы.Ссылка,
	|	ПравилаЦенообразованияЦеновыеГруппы.ВидЦен,
	|	ПравилаЦенообразованияЦеновыеГруппы.ЦеноваяГруппа
	|ИЗ
	|	Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ПравилаЦенообразованияЦеновыеГруппы
	|ГДЕ
	|	ПравилаЦенообразованияЦеновыеГруппы.ЦеноваяГруппа <> ЗНАЧЕНИЕ(Справочник.ПравилаЦенообразования.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования.Магазин,
	|	ТаблицаПравилЦенообразованияИВидовЦен.ЦеноваяГруппа,
	|	ТаблицаПравилЦенообразованияИВидовЦен.ВидЦен
	|ПОМЕСТИТЬ ТаблицаМагазиновЦеныНоменклатуры
	|ИЗ
	|	ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования КАК ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПравилЦенообразованияИВидовЦен КАК ТаблицаПравилЦенообразованияИВидовЦен
	|		ПО ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования.ПравилоЦенообразования = ТаблицаПравилЦенообразованияИВидовЦен.ПравилоЦенообразования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Магазины.ФорматМагазина КАК ФорматМагазина,
	|	Магазины.Ссылка КАК Магазин
	|ПОМЕСТИТЬ ТаблицаМагазиновЦеныПоАссортименту
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.КонтролироватьАссортимент
	|	И &ИспользоватьАссортимент
	|	И НЕ Магазины.ИспользоватьПрименениеЦен
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Магазины.Магазин КАК Магазин,
	|	Ассортимент.ВидЦен КАК ВидЦен
	|ПОМЕСТИТЬ втАссортимент
	|ИЗ
	|	РегистрСведений.Ассортимент.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&ПериодАссортимента, ДЕНЬ),
	|			ОбъектПланирования В
	|				(ВЫБРАТЬ
	|					Т.ФорматМагазина
	|				ИЗ
	|					ТаблицаМагазиновЦеныПоАссортименту КАК Т)) КАК Ассортимент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновЦеныПоАссортименту КАК Магазины
	|		ПО (Магазины.ФорматМагазина = Ассортимент.ОбъектПланирования)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦен,
	|	Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Магазины.Ссылка КАК Магазин
	|ПОМЕСТИТЬ ТаблицаМагазиновДействующиеЦены
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.ИспользоватьПрименениеЦен
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Магазины.Ссылка КАК Магазин,
	|	Магазины.ВидМинимальныхЦенПродажи КАК ВидМинимальныхЦенПродажи
	|ПОМЕСТИТЬ ТаблицаМагазиновСМинимальнымиЦенами
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	НЕ Магазины.ВидМинимальныхЦенПродажи = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаМагазиновЦеныНоменклатуры.Магазин,
	|	ТаблицаМагазиновЦеныНоменклатуры.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ТаблицаМагазиновЦеныНоменклатуры.ВидЦен
	|ПОМЕСТИТЬ ТаблицаМагазиновПоВидамЦен
	|ИЗ
	|	ТаблицаМагазиновЦеныНоменклатуры КАК ТаблицаМагазиновЦеныНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втАссортимент.Магазин,
	|	ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка),
	|	втАссортимент.ВидЦен
	|ИЗ
	|	втАссортимент КАК втАссортимент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ВидЦены,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Упаковка
	|ПОМЕСТИТЬ ТаблицаЦенПоВидамЦен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|		ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|		ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|		ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|		ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ВидЦены В
	|					(ВЫБРАТЬ
	|						ТаблицаМагазиновПоВидамЦен.ВидЦен КАК ВидЦены
	|					ИЗ
	|						ТаблицаМагазиновПоВидамЦен КАК ТаблицаМагазиновПоВидамЦен) {(Номенклатура = &Номенклатура
	|				    И ВидЦены = &ТипЦены) КАК ТипЦен}) КАК ЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Магазин,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.ВидЦены
	|ПОМЕСТИТЬ ЦеныБезПриведенияКУпаковке
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЦенПоВидамЦен.Цена КАК Цена,
	|		ТаблицаМагазиновПоВидамЦен.Магазин КАК Магазин,
	|		ТаблицаЦенПоВидамЦен.Упаковка КАК Упаковка,
	|		ТаблицаЦенПоВидамЦен.Номенклатура КАК Номенклатура,
	|		ТаблицаЦенПоВидамЦен.Характеристика КАК Характеристика,
	|		ТаблицаЦенПоВидамЦен.ВидЦены КАК ВидЦены,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ЕСТЬNULL(ТаблицаМагазиновПоВидамЦен.ЦеноваяГруппа, ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|					ТОГДА 1
	|				ИНАЧЕ 2
	|			КОНЕЦ) КАК ПолеЦеновойГруппы
	|	ИЗ
	|		ТаблицаЦенПоВидамЦен КАК ТаблицаЦенПоВидамЦен
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновПоВидамЦен КАК ТаблицаМагазиновПоВидамЦен
	|			ПО ТаблицаЦенПоВидамЦен.ВидЦены = ТаблицаМагазиновПоВидамЦен.ВидЦен
	|				И (ТаблицаЦенПоВидамЦен.ЦеноваяГруппа = ТаблицаМагазиновПоВидамЦен.ЦеноваяГруппа
	|					ИЛИ ТаблицаМагазиновПоВидамЦен.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаЦенПоВидамЦен.ВидЦены,
	|		ТаблицаЦенПоВидамЦен.Характеристика,
	|		ТаблицаЦенПоВидамЦен.Номенклатура,
	|		ТаблицаМагазиновПоВидамЦен.Магазин,
	|		ТаблицаЦенПоВидамЦен.Упаковка,
	|		ТаблицаЦенПоВидамЦен.Цена) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Магазин,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.ВидЦен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДействующиеЦеныНоменклатурыСрезПоследних.ОбъектЦенообразования КАК Магазин,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.ОбъектЦенообразования.ПравилоЦенообразования.ВидЦен КАК ВидЦен
	|	ИЗ
	|		РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ОбъектЦенообразования В
	|					(ВЫБРАТЬ
	|						ТаблицаМагазинов.Магазин
	|					ИЗ
	|						ТаблицаМагазиновДействующиеЦены КАК ТаблицаМагазинов) {(Номенклатура = &Номенклатура
	|				    И ОбъектЦенообразования.ПравилоЦенообразования.ВидЦен = &ТипЦены) КАК ТипЦен}) КАК ДействующиеЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныБезПриведенияКУпаковке.Магазин,
	|	ЦеныБезПриведенияКУпаковке.Цена / ВЫБОР
	|		КОГДА ЦеныБезПриведенияКУпаковке.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ЦеныБезПриведенияКУпаковке.Упаковка.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЦеныБезПриведенияКУпаковке.Упаковка.Коэффициент
	|	КОНЕЦ КАК Цена,
	|	ЦеныБезПриведенияКУпаковке.Номенклатура,
	|	ЦеныБезПриведенияКУпаковке.Характеристика,
	|	ЦеныБезПриведенияКУпаковке.ВидЦены
	|ПОМЕСТИТЬ ЦеныБезПриведенияКМинимальнымВидамЦен
	|ИЗ
	|	ЦеныБезПриведенияКУпаковке КАК ЦеныБезПриведенияКУпаковке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Цена / ВЫБОР
	|		КОГДА ВложенныйЗапрос.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ВложенныйЗапрос.Упаковка.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВложенныйЗапрос.Упаковка.Коэффициент
	|	КОНЕЦ КАК Цена,
	|	ТаблицаМагазиновСМинимальнымиЦенами.Магазин,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.ВидЦены
	|ПОМЕСТИТЬ ТаблицаЦенПоМинимальнымВидамЦен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|		ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|		ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка,
	|		ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|		ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ВидЦены В
	|					(ВЫБРАТЬ
	|						ТаблицаМагазиновСМинимальнымиЦенами.ВидМинимальныхЦенПродажи КАК ВидЦены
	|					ИЗ
	|						ТаблицаМагазиновСМинимальнымиЦенами КАК ТаблицаМагазиновСМинимальнымиЦенами) {(Номенклатура).* КАК Номенклатура}) КАК ЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновСМинимальнымиЦенами КАК ТаблицаМагазиновСМинимальнымиЦенами
	|		ПО ВложенныйЗапрос.ВидЦены = ТаблицаМагазиновСМинимальнымиЦенами.ВидМинимальныхЦенПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.Магазин,
	|	ВЫБОР
	|		КОГДА ТаблицаЦенПоМинимальнымВидамЦен.Цена ЕСТЬ NULL 
	|			ТОГДА ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(ТаблицаЦенПоМинимальнымВидамЦен.Цена, 0) > ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
	|					ТОГДА ЕСТЬNULL(ТаблицаЦенПоМинимальнымВидамЦен.Цена, 0)
	|				ИНАЧЕ ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
	|			КОНЕЦ
	|	КОНЕЦ КАК Цена,
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.Номенклатура,
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.Характеристика,
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.ВидЦены
	|ПОМЕСТИТЬ ТаблицаЦенПоМагазинам
	|ИЗ
	|	ЦеныБезПриведенияКМинимальнымВидамЦен КАК ЦеныБезПриведенияКМинимальнымВидамЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦенПоМинимальнымВидамЦен КАК ТаблицаЦенПоМинимальнымВидамЦен
	|		ПО ЦеныБезПриведенияКМинимальнымВидамЦен.Магазин = ТаблицаЦенПоМинимальнымВидамЦен.Магазин
	|			И ЦеныБезПриведенияКМинимальнымВидамЦен.Номенклатура = ТаблицаЦенПоМинимальнымВидамЦен.Номенклатура
	|			И ЦеныБезПриведенияКМинимальнымВидамЦен.Характеристика = ТаблицаЦенПоМинимальнымВидамЦен.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКаталога.Номенклатура,
	|	ТаблицаКаталога.Характеристика,
	|	ТаблицаКаталога.НоменклатураНаименование,
	|	ТаблицаКаталога.НоменклатураАртикул,
	|	ТаблицаКаталога.ЕдиницаИзмерения,
	|	ТаблицаКаталога.ЕдиницаИзмеренияКод,
	|	ТаблицаКаталога.ЕдиницаИзмеренияНаименованиеПолное,
	|	ТаблицаКаталога.ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ТаблицаКаталога.ЕдиницаИзмеренияМеждународноеСокращение,
	|	ТаблицаКаталога.ЕдиницаИзмеренияПересчетКоэф,
	|	ТаблицаКаталога.ЕдиницаИзмеренияПересчетЕдиница,
	|	ТаблицаКаталога.НоменклатураПометкаУдаления,
	|	ЕСТЬNULL(ТаблицаЦенПоМагазинам.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ТипЦены,
	|	""Рубли"" КАК ТипЦеныВалюта,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаЦенПоМагазинам.ВидЦены ЕСТЬ NULL 
	|			ТОГДА ТаблицаЦенПоМагазинам.ВидЦены.ЦенаВключаетНДС
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ТипЦеныЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаЦенПоМагазинам.ВидЦены ЕСТЬ NULL 
	|			ТОГДА ТаблицаЦенПоМагазинам.ВидЦены.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТипЦеныНаименование,
	|	""RUB"" КАК ТипЦеныВалютаКод,
	|	1 КАК ТипЦеныЕдиницаЦеныКоэффициент,
	|	ЕСТЬNULL(ТаблицаЦенПоМагазинам.Цена, 0) КАК ЦенаЗаЕдиницу
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	Характеристика.*,
	|	НоменклатураНаименование,
	|	НоменклатураАртикул,
	|	ЕдиницаИзмерения.*,
	|	ЕдиницаИзмеренияКод,
	|	ЕдиницаИзмеренияНаименованиеПолное,
	|	ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ЕдиницаИзмеренияМеждународноеСокращение,
	|	ЕдиницаИзмеренияПересчетКоэф,
	|	ЕдиницаИзмеренияПересчетЕдиница,
	|	НоменклатураПометкаУдаления,
	|	ТипЦены.*,
	|	ТипЦеныВалюта,
	|	ТипЦеныЦенаВключаетНДС,
	|	ТипЦеныНаименование,
	|	ТипЦеныВалютаКод,
	|	ТипЦеныЕдиницаЦеныКоэффициент,
	|	ЦенаЗаЕдиницу}
	|ИЗ
	|	ТаблицаКаталога КАК ТаблицаКаталога
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЦенПоМагазинам КАК ТаблицаЦенПоМагазинам
	|		ПО ТаблицаКаталога.Номенклатура = ТаблицаЦенПоМагазинам.Номенклатура
	|			И ТаблицаКаталога.Характеристика = ТаблицаЦенПоМагазинам.Характеристика
	|{ГДЕ
	|	ТаблицаКаталога.Номенклатура.*,
	|	ТаблицаЦенПоМагазинам.ВидЦены.* КАК ТипЦены}";
	
	ТекстыЗапросов.Остатки =
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Склад.Магазин КАК Магазин,
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика,
	|	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыНаСкладахОстатки.РезервОстаток) КАК СвободныйОстаток
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, {(Номенклатура).*, (Склад.Магазин) КАК Склад}) КАК ТоварыНаСкладахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Склад.Магазин,
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатков.Характеристика КАК Характеристика,
	|	ТаблицаОстатков.Магазин КАК Склад,
	|	ТаблицаОстатков.СвободныйОстаток КАК ОстатокНаСкладе,
	|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаОстатков.Магазин.Наименование КАК СкладНаименование
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	Характеристика.*,
	|	Склад.*,
	|	ОстатокНаСкладе,
	|	ЕдиницаИзмерения.*,
	|	СкладНаименование}
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|ГДЕ
	|	ТаблицаОстатков.СвободныйОстаток > 0
	|{ГДЕ
	|	ТаблицаОстатков.Номенклатура.*,
	|	ТаблицаОстатков.Магазин.* КАК Склад,
	|	ТаблицаОстатков.СвободныйОстаток КАК ОстатокНаСкладе}";
	
КонецПроцедуры

//Формирует тексты запросов, которые позволят получить таблицы значений,
// описанные в макете "СхемаВыгрузкиКаталог"
// плана обмена "Обмен с сайтом"
// Параметры:
//	ТекстыЗапросов - структура содердащая тексты запросов
//		* Номенклатура - поле, в которое нужно поместить текст запроса для заполнения источника данных "Номенклатура"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом"
//
//      * Свойства      - поле, в которое нужно поместить текст запроса для заполнения источника данных "Свойства"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом"
//
//      * Файлы          - поле, в которое нужно поместить текст запроса для заполнения источника данных "Файлы"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом"
//
//      * Характеристики - поле, необязательное поле, поле в которое нужно поместить текст запроса для заполнения источника данных "Характерстики"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом"
//
Процедура ПолучитьТекстыЗапросовКаталог(ТекстыЗапросов) Экспорт
	
	ТекстыЗапросов.Номенклатура =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ПометкаУдаления КАК НоменклатураПометкаУдаления,
	|	Номенклатура.Родитель КАК НоменклатураРодитель,
	|	Номенклатура.ЭтоГруппа КАК НоменклатураЭтоГруппа,
	|	Номенклатура.Код КАК НоменклатураКод,
	|	Номенклатура.Наименование КАК НоменклатураНаименование,
	|	Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|	Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ВЫБОР
	|		КОГДА Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА Номенклатура.ТипНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	КОНЕЦ КАК НоменклатураТипНоменклатуры,
	|	Номенклатура.ВидНоменклатуры КАК НоменклатураВидНоменклатуры,
	|	Номенклатура.Описание КАК НоменклатураОписание,
	|	Номенклатура.ФайлКартинки КАК НоменклатураОсновноеИзображение,
	|	ВЫБОР
	|		КОГДА Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &ЕдиницаПоУмолчанию
	|		ИНАЧЕ Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &КодЕдиницыПоУмолчанию
	|		ИНАЧЕ Номенклатура.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияКод,
	|	ВЫБОР
	|		КОГДА Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &НаименованиеПолноеЕдиницыПоУмолчанию
	|		ИНАЧЕ Номенклатура.ЕдиницаИзмерения.НаименованиеПолное
	|	КОНЕЦ КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	ВЫБОР
	|		КОГДА Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &МеждународноеСокращениеЕдиницыПоУмолчанию
	|		ИНАЧЕ Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение
	|	КОНЕЦ КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	1 КАК ЕдиницаИзмеренияПересчетКоэф,
	|	ВЫБОР
	|		КОГДА Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &КодЕдиницыПоУмолчанию
	|		ИНАЧЕ Номенклатура.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияПересчетЕдиница,
	|	ЕСТЬNULL(ШтрихКодыНоменклатуры.Штрихкод, """") КАК НоменклатураШтрихкод
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	НоменклатураПометкаУдаления,
	|	НоменклатураРодитель.*,
	|	НоменклатураЭтоГруппа,
	|	НоменклатураКод,
	|	НоменклатураНаименование,
	|	НоменклатураНаименованиеПолное,
	|	НоменклатураАртикул,
	|	НоменклатураТипНоменклатуры.*,
	|	НоменклатураВидНоменклатуры.*,
	|	НоменклатураОписание,
	|	НоменклатураОсновноеИзображение.*,
	|	ЕдиницаИзмерения.*,
	|	ЕдиницаИзмеренияКод,
	|	ЕдиницаИзмеренияНаименованиеПолное,
	|	ЕдиницаИзмеренияМеждународноеСокращение,
	|	ЕдиницаИзмеренияПересчетКоэф,
	|	ЕдиницаИзмеренияПересчетЕдиница,
	|	НоменклатураШтрихкод}
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Штрихкоды.Владелец КАК Владелец,
	|			МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод
	|		ИЗ
	|			РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ГДЕ
	|			Штрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			И Штрихкоды.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Штрихкоды.Владелец) КАК ШтрихКодыНоменклатуры
	|		ПО Номенклатура.Ссылка = ШтрихКодыНоменклатуры.Владелец
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|{ГДЕ
	|	Номенклатура.Ссылка.*}";
	
	Если ТекстыЗапросов.Свойство("Характеристики") Тогда
		
		ТекстыЗапросов.Характеристики = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
		|			ТОГДА Номенклатура.Ссылка
		|		ИНАЧЕ Номенклатура.ВидНоменклатуры
		|	КОНЕЦ КАК ВладелецХарактеристик
		|ПОМЕСТИТЬ ТаблицаВладельцевНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|	ХарактеристикиНоменклатуры.Наименование КАК ХарактеристикаНаименование,
		|	ТаблицаВладельцевНоменклатуры.Номенклатура КАК Номенклатура
		|{ВЫБРАТЬ
		|	Характеристика.*,
		|	ХарактеристикаНаименование,
		|	Номенклатура.*}
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВладельцевНоменклатуры КАК ТаблицаВладельцевНоменклатуры
		|		ПО ХарактеристикиНоменклатуры.Владелец = ТаблицаВладельцевНоменклатуры.ВладелецХарактеристик
		|{ГДЕ
		|	ТаблицаВладельцевНоменклатуры.Номенклатура.*}";
	КонецЕсли;
	
	
	ТекстыЗапросов.Свойства =
	"ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура,
	|	ВЫРАЗИТЬ(НоменклатураДополнительныеРеквизиты.Свойство КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения) КАК СвойствоНоменклатуры,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК ЗначениеСвойства
	|ПОМЕСТИТЬ ТаблицаСвойств
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Объект,
	|	ВЫРАЗИТЬ(ДополнительныеСведения.Свойство КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения),
	|	ДополнительныеСведения.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект ССЫЛКА Справочник.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСвойств.Номенклатура КАК Номенклатура,
	|	ТаблицаСвойств.СвойствоНоменклатуры КАК СвойствоНоменклатуры,
	|	ТаблицаСвойств.ЗначениеСвойства КАК ЗначениеСвойства
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	СвойствоНоменклатуры.*,
	|	ЗначениеСвойства.*}
	|ИЗ
	|	ТаблицаСвойств КАК ТаблицаСвойств
	|{ГДЕ
	|	ТаблицаСвойств.СвойствоНоменклатуры.*,
	|	ТаблицаСвойств.Номенклатура.*}";
	
	ТекстыЗапросов.Файлы =
	"ВЫБРАТЬ
	|	НоменклатураПрисоединенныеФайлы.ВладелецФайла КАК Номенклатура,
	|	НоменклатураПрисоединенныеФайлы.Ссылка КАК НоменклатураФайл,
	|	ЕСТЬNULL(ПрисоединенныеФайлы.ХранимыйФайл, НоменклатураПрисоединенныеФайлы.ФайлХранилище) КАК НоменклатураФайлДанныеФайла,
	|	НоменклатураПрисоединенныеФайлы.Том КАК НоменклатураФайлТом,
	|	НоменклатураПрисоединенныеФайлы.Расширение КАК НоменклатураФайлРасширение,
	|	НоменклатураПрисоединенныеФайлы.ПутьКФайлу КАК НоменклатураФайлПутьКФайлу,
	|	НоменклатураПрисоединенныеФайлы.ТипХраненияФайла КАК НоменклатураФайлТипХраненияФайла,
	|	НоменклатураПрисоединенныеФайлы.Описание КАК НоменклатураФайлОписание
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	НоменклатураФайл.*,
	|	НоменклатураФайлДанныеФайла,
	|	НоменклатураФайлТом.*,
	|	НоменклатураФайлРасширение,
	|	НоменклатураФайлПутьКФайлу,
	|	НоменклатураФайлТипХраненияФайла.*,
	|	НоменклатураФайлОписание}
	|ИЗ
	|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ПО ПрисоединенныеФайлы.ПрисоединенныйФайл = НоменклатураПрисоединенныеФайлы.Ссылка
	|{ГДЕ
	|	НоменклатураПрисоединенныеФайлы.ВладелецФайла.*}";
	
КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре
// ПолучитьТекстЗапросаОбновлениеПакетаПредложений или быть особенностью прикладного решения.
//   Параметры:
// ПрикладныеПараметры - структура, содержащая в себе параметры, добавленные в прикладном решении.
// ПараметрыСхемыКомпоновки - параметры схемы компоновки, тип значения - "ПараметрСхемыКомпоновкиДанных".
Процедура УстановитьПараметрыЗапросаОбновлениеПакетаПредложений(ПрикладныеПараметры, ПараметрыКомпоновки)  Экспорт
	УстановитьПараметрыЗапросаПоЦенообразованию(ПараметрыКомпоновки);
КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре
// ПолучитьТекстЗапросаПакетПредложений или быть особенностью прикладного решения.
//   Параметры:
// ПрикладныеПараметры - структура, содержащая в себе параметры, добавленные в прикладном решении.
// ПараметрыСхемыКомпоновки - параметры схемы компоновки, тип значения - "ПараметрСхемыКомпоновкиДанных".
Процедура УстановитьПараметрыЗапросаПакетПредложений(ПрикладныеПараметры, ПараметрыКомпоновки) Экспорт
	УстановитьПараметрыЗапросаПоЦенообразованию(ПараметрыКомпоновки);
КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре
// ПолучитьТекстЗапросаКаталог или быть особенностью прикладного решения.
//   Параметры:
// ПрикладныеПараметры - структура, содержащая в себе параметры, добавленные в прикладном решении.
// ПараметрыСхемыКомпоновки - параметры схемы компоновки, тип значения - "ПараметрСхемыКомпоновкиДанных".
Процедура УстановитьПараметрыЗапросаКаталог(ПрикладныеПараметры, ПараметрыКомпоновки) Экспорт
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ИспользоватьДополнительныеРеквизитыИСведения", 
								  ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения"));
	
	УстановитьПараметрыЗапросаПоЦенообразованию(ПараметрыКомпоновки);
КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре ПолучитьТекстЗапросаЗаказы
// или быть особенностью прикладного решения
//   Параметры:
// ПрикладныеПараметры - структура, содержащая в себе параметры, добавленные в прикладном решении
// ПараметрыСхемыКомпоновки - параметры схемы компоновки, тип значения - "ПараметрСхемыКомпоновкиДанных"
Процедура УстановитьПараметрыТекстаЗапросаЗаказы(ПрикладныеПараметры, ПараметрыКомпоновки) Экспорт
	
КонецПроцедуры

// Параметры:
// ТаблицаЗаказов. Тип: Таблица значений.
//		Колонки:	Заказ - Ссылка на документ Заказ покупателя.
//					НомерЗаказа - строка, номер заказа на сайте.
//					ДатаЗаказа - Дата, Дата заказа на сайте.
// 
// ПрикладныеПараметры. Тип: структура.
// Структура содержит параметры обмена которые были добавлены в форму узла при встраивании подсистемы в прикладное
// решение.
//
Процедура ЗаписатьДатуНомерЗаказовССайта(ТаблицаЗаказов, ПрикладныеПараметры) Экспорт
	
	Для Каждого ТекСтрока Из ТаблицаЗаказов Цикл
		
		ЗаказОбъект = ТекСтрока.Заказ.ПолучитьОбъект();
		ЗаказОбъект.НомерЗаказаНаСайте = ТекСтрока.НомерЗаказа;
		ЗаказОбъект.ДатаЗаказаНаСайте  = ТекСтрока.ДатаЗаказа;
		ЗаказОбъект.ОбменДанными.Загрузка = Истина;
		ЗаказОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Отменяет проведение у документа.
// Параметры:
// ДокументОбъект - заказ, проведение которого отменяется.
Процедура ОтменитьПроведениеДокумента(ДокументОбъект) Экспорт
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

// Процедура записи докуменрта заказ.
// Параметры:
// ДокументОбъект - заказ, записываемый.
Процедура ЗаписатьДокументЗаказ(ДокументОбъект) Экспорт
	
	Если НЕ ДокументОбъект.Проведен
		ИЛИ ДокументОбъект.Ссылка.Статус = Перечисления.СтатусыЗаказовПокупателей.НеСогласован Тогда
	
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
	
	КонецЕсли;
	
КонецПроцедуры

// В зависимости от значения функциональной опции "Использовать статусы заказов"
// устанавливается видимость табличной части "Соответствия заказов".
Процедура УстановитьВидимостьТабличнойЧастиСоответствиеЗаказовФормыУзлаПланаОбмена(Видимость) Экспорт
	
	Видимость = Истина
	
КонецПроцедуры

//	LNK 17.05.2021 06:26:14
Процедура ЗарегистрироватьИзмененияВУзлахТовары(Объект, МассивУзлов, Замещение = Ложь) Экспорт

	Если МассивУзлов.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ТоварыНаСкладах")
		ИЛИ ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ДействующиеЦеныНоменклатуры")
		ИЛИ ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры")
		Тогда
		
		Если Замещение Тогда
			
			ОбъектМетаданных = Объект.Метаданные();
			
			ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);
			
			Если ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыСведений() Тогда
				
				СтарыйНаборЗаписей = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			ИначеЕсли ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыНакопления() Тогда
				
				СтарыйНаборЗаписей = РегистрыНакопления[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			Иначе
				
				Возврат;
				
			КонецЕсли;
			
			Для Каждого ЗначениеОтбора Из Объект.Отбор Цикл
				
				Если ЗначениеОтбора.Использование = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
				СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
				СтрокаОтбора.Использование = Истина;
				
			КонецЦикла;
			
			СтарыйНаборЗаписей.Прочитать();
			
			Для каждого Запись Из СтарыйНаборЗаписей Цикл
				
				Если ТипЗнч(Запись.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда

					ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Запись.Номенклатура);

				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого Запись Из Объект Цикл
				
			Если ТипЗнч(Запись.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда

				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Запись.Номенклатура);

			КонецЕсли;
			
		КонецЦикла;

	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Номенклатура") Тогда
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект.Ссылка);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.НоменклатураПрисоединенныеФайлы") Тогда
		
		Если НЕ ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект.ВладелецФайла);

	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ХарактеристикиНоменклатуры") Тогда
		
		Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект.Владелец);

		ИначеЕсли ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.ВидНоменклатуры = &ВидНоменклатуры";
			
			Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.Владелец);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл

				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Выборка.Ссылка);

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 17.05.2021 06:26:14
Процедура ЗарегистрироватьИзмененияВУзлахЗаказы(Объект, МассивУзлов, Замещение = Ложь) Экспорт

	Если МассивУзлов.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	ТипОбъекта = ТипЗнч(Объект);
		
	Если ТипОбъекта = Тип("ДокументОбъект.ЗаказПокупателя") Тогда 
		
		Для Каждого УзелОбмена Из МассивУзлов Цикл
			
			СтруктураПараметровССайта = РеквизитыЗаказаНаСайте(Объект.Ссылка, УзелОбмена);
			
			Если НЕ СтруктураПараметровССайта = НеОпределено Тогда
				
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Объект.Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ЗаказыПокупателей") Тогда
		
		Для Каждого ЗначениеОтбора Из Объект.Отбор Цикл
			
			Если ЗначениеОтбора.Использование = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеОтбора.Имя = "Регистратор" Тогда
				
				Если ТипЗнч(ЗначениеОтбора.Значение) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
					ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, ЗначениеОтбора.Значение);
				ИначеЕсли ТипЗнч(ЗначениеОтбора.Значение) = Тип("ДокументСсылка.ЧекККМ") Тогда

					Если ЗначениеЗаполнено(ЗначениеОтбора.Значение.ЗаказПокупателя)
					И	ТипЗнч(ЗначениеОтбора.Значение.ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя")
					Тогда
						ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, ЗначениеОтбора.Значение.ЗаказПокупателя);
					КонецЕсли;

				ИначеЕсли ТипЗнч(ЗначениеОтбора.Значение) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда

					Запрос = Новый Запрос(
					"ВЫБРАТЬ
					|	ТоварыПродажа.ДополнительнаяАналитика КАК ЗаказПокупателя
					|ИЗ
					|	Документ.ОтчетОРозничныхПродажах.Товары КАК ТоварыПродажа
					|ГДЕ
					|	ТоварыПродажа.Ссылка = &Ссылка
					|	И ТоварыПродажа.ДополнительнаяАналитика ССЫЛКА Документ.ЗаказПокупателя
					|	И НЕ ТоварыПродажа.ДополнительнаяАналитика = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
					|
					|ОБЪЕДИНИТЬ
					|
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ТоварыВозврат.ДополнительнаяАналитика
					|ИЗ
					|	Документ.ОтчетОРозничныхПродажах.ВозвращенныеТовары КАК ТоварыВозврат
					|ГДЕ
					|	ТоварыВозврат.Ссылка = &Ссылка
					|	И ТоварыВозврат.ДополнительнаяАналитика ССЫЛКА Документ.ЗаказПокупателя
					|	И НЕ ТоварыВозврат.ДополнительнаяАналитика = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)"
					);
					Запрос.УстановитьПараметр("Ссылка", ЗначениеОтбора.Значение);

					Результат = Запрос.Выполнить();

					Если НЕ Результат.Пустой() Тогда

						Выборка = Результат.Выбрать();

						Пока Выборка.Следующий() Цикл

							ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Выборка.ЗаказПокупателя);

						КонецЦикла;

					КонецЕсли;

				КонецЕсли;

				Прервать;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// В зависимости от типа регистрируемых данных определяет данные, которые необходимо зарегистрировать в плане обмена.
//
// Параметры:
//	Объект. Тип: СправочникОбъект, ДокументОбъект.
//			Регистрируемый объект данных, например, НоменклатураОбъект, ЗаказОбъект.
// 
//	МассивУзловТовары. Тип: массив значений.
//			Массив узлов плана обмена "Обмен с сайтом" в которых необходимо регистрировать объект в том случае если он
//			является Номенклатурой.
//
//	МассивУзловЗаказы. Тип: массив значений.
//			Массив узлов плана обмена "Обмен с сайтом" в которых необходимо регистрировать объект в том случае если он
//			является Заказом.
Процедура ЗарегистрироватьИзмененияВУзлах_УДАЛИТЬ(Объект, МассивУзловТовары, МассивУзловЗаказы, Замещение = Ложь) Экспорт
	
	Попытка

	//	LNK 08.06.2017 13:19:16
		Если Объект.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда

			Возврат;

		КонецЕсли;

	Исключение	КонецПопытки;

	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ТоварыНаСкладах")
		ИЛИ ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ДействующиеЦеныНоменклатуры")
		ИЛИ ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры")
		Тогда
		
		Если Замещение Тогда
			
			ОбъектМетаданных = Объект.Метаданные();
			
			ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);
			
			Если ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыСведений() Тогда
				
				СтарыйНаборЗаписей = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			ИначеЕсли ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыНакопления() Тогда
				
				СтарыйНаборЗаписей = РегистрыНакопления[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			Иначе
				
				Возврат;
				
			КонецЕсли;
			
			Для Каждого ЗначениеОтбора Из Объект.Отбор Цикл
				
				Если ЗначениеОтбора.Использование = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
				СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
				СтрокаОтбора.Использование = Истина;
				
			КонецЦикла;
			
			СтарыйНаборЗаписей.Прочитать();
			
			Для каждого Запись Из СтарыйНаборЗаписей Цикл
				
				Если ТипЗнч(Запись.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда

					ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Запись.Номенклатура);

				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого Запись Из Объект Цикл
				
			Если ТипЗнч(Запись.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда

				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Запись.Номенклатура);

			КонецЕсли;
			
		КонецЦикла;

	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Номенклатура") Тогда
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Ссылка);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.НоменклатураПрисоединенныеФайлы") Тогда
		
		Если НЕ ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.ВладелецФайла);

		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ХарактеристикиНоменклатуры") Тогда
		
		Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Владелец);

		ИначеЕсли ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.ВидНоменклатуры = &ВидНоменклатуры";
			
			Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.Владелец);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Выборка.Ссылка);
			КонецЦикла;
			
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ЗаказПокупателя") Тогда 
		
		Для Каждого УзелОбмена Из МассивУзловЗаказы Цикл
			
			СтруктураПараметровССайта = РеквизитыЗаказаНаСайте(Объект.Ссылка, УзелОбмена);
			
			Если НЕ СтруктураПараметровССайта = НеОпределено Тогда
				
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Объект.Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ЗаказыПокупателей") Тогда
		
		Для Каждого ЗначениеОтбора Из Объект.Отбор Цикл
			
			Если ЗначениеОтбора.Использование = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеОтбора.Имя = "Регистратор" Тогда
				
				Если ТипЗнч(ЗначениеОтбора.Значение) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
					ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловЗаказы, ЗначениеОтбора.Значение);
				ИначеЕсли ТипЗнч(ЗначениеОтбора.Значение) = Тип("ДокументСсылка.ЧекККМ") Тогда
					Если ЗначениеЗаполнено(ЗначениеОтбора.Значение.ЗаказПокупателя) Тогда
						ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловЗаказы, ЗначениеОтбора.Значение.ЗаказПокупателя);
					КонецЕсли;
				ИначеЕсли ТипЗнч(ЗначениеОтбора.Значение) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда

					Запрос = Новый Запрос(
					"ВЫБРАТЬ
					|	ТоварыПродажа.ДополнительнаяАналитика КАК ЗаказПокупателя
					|ИЗ
					|	Документ.ОтчетОРозничныхПродажах.Товары КАК ТоварыПродажа
					|ГДЕ
					|	ТоварыПродажа.Ссылка = &Ссылка
					|	И ТоварыПродажа.ДополнительнаяАналитика ССЫЛКА Документ.ЗаказПокупателя
					|	И НЕ ТоварыПродажа.ДополнительнаяАналитика = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
					|
					|ОБЪЕДИНИТЬ
					|
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ТоварыВозврат.ДополнительнаяАналитика
					|ИЗ
					|	Документ.ОтчетОРозничныхПродажах.ВозвращенныеТовары КАК ТоварыВозврат
					|ГДЕ
					|	ТоварыВозврат.Ссылка = &Ссылка
					|	И ТоварыВозврат.ДополнительнаяАналитика ССЫЛКА Документ.ЗаказПокупателя
					|	И НЕ ТоварыВозврат.ДополнительнаяАналитика = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)"
					);
					Запрос.УстановитьПараметр("Ссылка", ЗначениеОтбора.Значение);

					Результат = Запрос.Выполнить();

					Если НЕ Результат.Пустой() Тогда

						Выборка = Результат.Выбрать();

						Пока Выборка.Следующий() Цикл

							ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловЗаказы, Выборка.ЗаказПокупателя);

						КонецЦикла;

					КонецЕсли;

				КонецЕсли;

				Прервать;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Определяет статус контрагента по значению перечисления.
//
// Параметры:
//			ДанныеКонтрагентаЮрФизЛицо. Тип ПеречислениеСсылка
// Перечисление, которое определяет юридический статус контрагента.
// В зависимости от статуса контрагента при выгрузке на сайт
// будут по разному заполняется данные о контрагенте.
// Если это юр. лицо заполняться будут ИНН, КПП, если это физ лицо то наименование.
Процедура ОпределитьЭтоЮрЛицо(ДанныеКонтрагентаЮрФизЛицо, ЭтоЮрЛицо) Экспорт
	
	ЭтоЮрЛицо = Ложь;
	
КонецПроцедуры

// К ИД номенклатуры добавляет ИД характеристики, если она задана.
// Параметры:
//	Номенклатура. Тип - Ссылка, например, СправочникСсылка.Номенклатура.
//	Характеристика. Тип - Ссылка, например, СправочникСсылка.ХарактеристикиНоменклатуры.
Процедура ДополнитьИдНоменклатурыХарактеристикой(Номенклатура, Характеристика, Ид) Экспорт
	
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")
		И ТипЗнч(Характеристика) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры")
		И (НЕ Номенклатура.ЭтоГруппа)
		И ЗначениеЗаполнено(Характеристика) Тогда
		
		Ид = Ид + "#" + Строка(Характеристика.УникальныйИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

// Получает заказы, загруженные с сайта.
//  Параметры:
// ПрикладныеПараметры - структура, содержащая параметры прикладного решения.
// ТаблицаНомераИДатыЗаказа - Таблица значений, содержащая номера и даты заказов, загруженных с сайта.
//		Колонки: НомерЗаказа, ДатаЗаказа
// 
// Результат - таблица значений, в которую будет помещаться информация о заказах.
// 		Колонки:ЗаказПокупателя - ссылка на документ Заказ.
//				НомерЗаказаНаСайте - Номер заказа.
//				НеОбновлятьЗаказ - Признак того, что Заказ не должен перезаписываться.
// 
Процедура ПолучитьРанееЗагруженныеДокументы(ПрикладныеПараметры, ТаблицаНомераИДатыЗаказов, Результат) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаНомераИДаты.НомерЗаказа КАК НомерЗаказа
	|ПОМЕСТИТЬ ТаблицаНомераИДаты
	|ИЗ
	|	&ТаблицаНомераИДаты КАК ТаблицаНомераИДаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Магазин КАК Магазин,
	|	ЗаказПокупателя.Ссылка КАК ЗаказПокупателя,
	|	ЗаказПокупателя.НомерЗаказаНаСайте КАК НомерЗаказаНаСайте,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.Отменено
	|				ИЛИ ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеОбновлятьЗаказ,
	|	ЗаказПокупателя.УчтеноNavision КАК УчтеноNavision
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.НомерЗаказаНаСайте В
	|			(ВЫБРАТЬ
	|				ТаблицаНомераИДаты.НомерЗаказа КАК НомерЗаказа
	|			ИЗ
	|				ТаблицаНомераИДаты КАК ТаблицаНомераИДаты)"
	);
	Запрос.Параметры.Вставить("ТаблицаНомераИДаты", ТаблицаНомераИДатыЗаказов);
	Результат = Запрос.Выполнить().Выгрузить();

КонецПроцедуры

// Создает новый документ "Заказ покупателя".
// Параметры:
// ДокументОбъект - ДокументОбъект. Выходной параметр, заполняется созданным Объектом документа Заказ.
Процедура СоздатьНовыйДокументЗаказ(ДокументОбъект) Экспорт
	
	ДокументОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
	//ДокументОбъект.УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.Magento;

КонецПроцедуры

// Заполнят документ заказ данными с сайта.
// 
//	Параметры:
//	
//	ДокументОбъект. Тип - ДокументОбъект, объект документа Заказ покупателя.
//	
//	СтруктураРеквизитов. Тип - Структура, структура, содержащая в себе значения реквизитов заказа, загруженных с сайта.
//		Состав полей:
//					Ид					- Идентификатор заказа, очень часто тоже что и номер.
//					Дата				- дата создания заказа на сайте.
//					Номер				- номер заказа на сайте.
//					ДатаОтгрузки		- дата отгрузки товара по заказу.
//					ВалютаДокументаКод	- 3-х значный идентификатор валюты.
//					ВидЦенНаименование	- наименование вида цены.
//					СуммаВключаетНДС	- признак включения НДС.
//					НаименованиеСкидки	- наименование скидки.
//					ПроцентСкидки		- процент скидки.
//					СуммаСкидки			- Сумма скидки по заказу.
//					СкладНаименование 	- наименование склада, точки самовывоза.
//					ПодразделениеНаименование - наименование подразделения.
//					Контрагент			- Ссылка на контрагента, который уже был идентифицирован в базе.
//					ТочкаСамовывоза		- Ссылка на элемент справочника, который в прикладном решении является справочником точек
//					                   самовывоза или Неопределено.
//					Товары				- табличная часть документа.
//					Комментарий			- текстовый комментарий.
//	
//	СвойстваЗаказа. Тип - соответствие, содержит строкое представления свойств и значений заказа.
//	ПрикладныеПараметры. Тип - Структура, содержит параметры прикладного решения, добавленные на форму узла плана обмена.
//	ОписаниеОшибки. Тип - Строка, текстовое представление ошибки.
//	Успешно. Тип - Булево - Признак успешного заполнения документа.
Процедура ЗаполнитьЗаказ(ДокументОбъект, РеквизитыЗаказа, СвойстваЗаказа,
						 ПрикладныеПараметры, ОписаниеОшибки, Успешно) Экспорт
						 
	Перем БуфферЗначение;	//	LNK 12.12.2017 10:16:51

	ДокументОбъект.Дата  = РеквизитыЗаказа.Дата;
	ДокументОбъект.Номер = РеквизитыЗаказа.Номер;
	ДокументОбъект.IDN   = РеквизитыЗаказа.Номер; 
	ДокументОбъект.Организация = ПрикладныеПараметры.Организация;
	ДокументОбъект.Комментарий = "" + РеквизитыЗаказа.Комментарий +
				?(ТипЗнч(РеквизитыЗаказа.ТочкаСамовывоза) = Тип("ОбъектXDTO"), "", РеквизитыЗаказа.ТочкаСамовывоза) +
				 " " + ПрикладныеПараметры.ИсточникЗагрузки;
//	LNK 15.01.2018 10:46:46
	ДокументОбъект.Склад       = РеквизитыЗаказа.Склад;
	ДокументОбъект.Магазин     = РеквизитыЗаказа.Магазин;
	ДокументОбъект.Организация = РеквизитыЗаказа.Организация;
	
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	ДокументОбъект.СкидкиРассчитаны = Истина;
	ДокументОбъект.ТипДоставки   = РеквизитыЗаказа.ТипДоставки;
	ДокументОбъект.ТипОплаты     = РеквизитыЗаказа.ТипОплаты;
	ДокументОбъект.СтатусОплаты  = РеквизитыЗаказа.СтатусОплаты;
	ДокументОбъект.СуммаДоставки = РеквизитыЗаказа.СуммаДоставки;
	ДокументОбъект.СуммаДоставкиОператор = РеквизитыЗаказа.СуммаДоставкиОператор;
	ДокументОбъект.СуммаДоставкиОплачена = РеквизитыЗаказа.СуммаДоставкиОплачена;

	ДокументОбъект.Контрагент   = РеквизитыЗаказа.Контрагент;
	ДокументОбъект.ДисконтнаяКарта = РеквизитыЗаказа.ДисконтнаяКарта;	//Криворучко //добавим карту
	ДокументОбъект.НомерЗаказаНаСайте = ДокументОбъект.Номер;
	ДокументОбъект.ДатаЗаказаНаСайте  = РеквизитыЗаказа.ДатаЗаказаНаСайте;
	ДокументОбъект.УчтеноNavision     = РеквизитыЗаказа.УчтеноNavision;	//	LNK 04.01.2021 14:40:23

//	LNK 12.12.2017 10:14:26
	Если НЕ РеквизитыЗаказа.ДатаОтгрузки = '00010101' Тогда

		ДокументОбъект.ДатаПродажиЖелаемая = РеквизитыЗаказа.ДатаОтгрузки;

	Иначе

		БуфферЗначение = СвойстваЗаказа.Получить("ДатаОтгрузки");

		Если ТипЗнч(БуфферЗначение) = Тип("Дата") И НЕ БуфферЗначение = '00010101' Тогда

				ДокументОбъект.ДатаПродажиЖелаемая = БуфферЗначение;

		Иначе	ДокументОбъект.ДатаПродажиЖелаемая = ДокументОбъект.Дата;

		КонецЕсли;

	КонецЕсли;

//	LNK 11.12.2017 15:11:52
	Если РеквизитыЗаказа.Свойство("ИНН") Тогда

		ДокументОбъект.ПродавецИдентификатор = СокрЛП(РеквизитыЗаказа.ИНН);

		Если НЕ ПустаяСтрока(ДокументОбъект.ПродавецИдентификатор) Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ФизическиеЛица.Ссылка КАК Продавец
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	ФизическиеЛица.ИНН = &ИНН
			|	И НЕ ФизическиеЛица.ПометкаУдаления"
			);
			Запрос.УстановитьПараметр("ИНН", ДокументОбъект.ПродавецИдентификатор);

			Выборка = Запрос.Выполнить().Выбрать();

			Если Выборка.Следующий() Тогда

				ДокументОбъект.Продавец = Выборка.Продавец;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
	ТаблицаНоменклатура = Неопределено;
	
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект, РеквизитыЗаказа.Товары, ПрикладныеПараметры);
	
	СуммаДокумента = 0;
	Для каждого СтрокаТовары Из ДокументОбъект.Товары Цикл
		
		СуммаДокумента = СуммаДокумента + СтрокаТовары.Сумма;
		Если НЕ СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ДокументОбъект.УчитыватьНДС = Истина;
			//Прервать;
		КонецЕсли;

		Если СтрокаТовары.Продавец.Пустая() Тогда

			СтрокаТовары.Продавец = ДокументОбъект.Продавец;

		КонецЕсли;

	КонецЦикла;
	
	ДокументОбъект.ЦенаВключаетНДС = ДокументОбъект.УчитыватьНДС;
	//Криворучко 
	ДокументОбъект.СуммаДокумента = СуммаДокумента;
	Если ДокументОбъект.СтатусОплаты = Перечисления.СтатусОплаты.Оплачен Тогда
		ДокументОбъект.СуммаОплаты = СуммаДокумента;
	КонецЕсли;	
	
	СтатусЗаказа = СвойстваЗаказа.Получить("Статус заказа");
	Если Не СтатусЗаказа = Неопределено Тогда
		
		Если ПрикладныеПараметры.Свойство("СоответствиеСтатусовЗаказов") Тогда
			ТаблицаСтатусов = ПрикладныеПараметры.СоответствиеСтатусовЗаказов;
			ЗначениеСтатуса = ТаблицаСтатусов.Найти(СтатусЗаказа, "СтатусЗаказаНаСайте");
		Иначе
			ЗначениеСтатуса = Неопределено;
		КонецЕсли;
		
		Если Не ЗначениеСтатуса = Неопределено Тогда
			ДокументОбъект.Статус = ЗначениеСтатуса.СтатусЗаказаВБазе;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Статус) Тогда
		
		ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПокупателей.Согласован;
		
	КонецЕсли;
	
	Успешно = Истина;

КонецПроцедуры

// Ищет контрагента согласно настройкам плана обмена.
// Параметры:
//	СтруктураСвойстваЗаказа. Тип - Структура.
//		Содержит реквизиты заказа, загруженные с сайта. В данной структуре необходимо заполнить поле "Контрагент".
//	ДанныеКонтрагента. Тип - Структура.
//		Содержит реквизита контрагента, загруженная с заказа, по данным реквизитам будет происходить поиск существующего
//		контрагента или создание нового.
//		Описание полей:
//			ЮрЛицо - Тип Булево. Признак наличия статуса Юр. лицо у контрагента.
//			ОфициальноеНаименование - Тип строка.Официальное Наименование контрагента Юр лица.
//			ПолноеНаименование - Тип строка. Полное наименование контрагента Юр лица.
//			Наименование - Тип строка. Наименование контрагента.
//			ФИО - ФИО контрагента, если он Физ. лицо.
//			ОКПО - код ОКПО
//			ИНН - код ИНН
//			КПП - код КПП
//	ПрикладныеПараметры - Структура, содержащая параметры прикладного решения.
//	ОписаниеОшибки - текстовое представление ошибки.
//
Процедура ИдентифицироватьКонтрагента(СтруктураСвойстваЗаказа, ДанныеКонтрагента, ПрикладныеПараметры, ОписаниеОшибки) Экспорт
	
	//СтруктураСвойстваЗаказа.Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("КонтактнаяИнформация.АдресЭП", "inna_ishchenko@mail.ru");
	
КонецПроцедуры

// Ищет номенклатуру по ИД, если не находит - ищет по артикулу и наименованию, если не находит - создает новую.
//
// Параметры:
// Номенклатура. Тип - неопределено. Ссылка на найденную или новую номенклатуру.
// ДанныеНоменклатуры. Тип - структура. Структура, содержащая информацию о номенклатуре, загруженной с сайта.
//	По данным этой структуры необходимо провести поиск существующей номенклатуры или создать новую.
//		Описание полей:
//				Ид - внутренний идентификатор номенклатуры.
//				АртикулНоменклатуры - Артикул номенклатуры.
//				НаименованиеНоменклатуры - Наименование номенклатуры.
//				ЕдиницаИзмерения  - ссылка на единицу измерения товара.
//				ЭтоУслуга - признак услуги.
//				СтавкаНДС - ставка НДС номенклатуры.
//
// ПрикладныеПараметры - структура,содержащая параметры прикладного решения, добавленные в узел плана обмена.
// ОписаниеОшибки - текстовое представление ошибки.
Процедура НайтиСоздатьНоменклатуру(Номенклатура, ДанныеНоменклатуры, ПрикладныеПараметры, ОписаниеОшибки) Экспорт
	
	ИдНоменклатуры = ДанныеНоменклатуры.Ид;
	
	Попытка 
		//Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдНоменклатуры));
		Номенклатура = Справочники.Номенклатура.НайтиПоКоду(ИдНоменклатуры);
		Если Не Номенклатура = Справочники.Номенклатура.ПустаяСсылка()
			 И Номенклатура.ПолучитьОбъект() <> Неопределено  Тогда
			Возврат;
		КонецЕсли;
		
	Исключение
		
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки,
		НСтр("ru = 'Номенклатура не найдена по уникальному идентификатору:'")+ " " + ИдНоменклатуры);
		
	КонецПопытки;
	
	АртикулНоменклатуры			= ДанныеНоменклатуры.АртикулНоменклатуры;
	НаименованиеНоменклатуры	= ДанныеНоменклатуры.НаименованиеНоменклатуры;
	Номенклатура = НайтиНоменклатуруПоАртикулуНаименованию(АртикулНоменклатуры, НаименованиеНоменклатуры);
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;

	
	Номенклатура = Справочники.Номенклатура.СоздатьЭлемент();
	
	Номенклатура.Родитель     = ПрикладныеПараметры.ГруппаДляНовойНоменклатуры;
	Номенклатура.Артикул      = ДанныеНоменклатуры.АртикулНоменклатуры;
	Номенклатура.Наименование = ДанныеНоменклатуры.НаименованиеНоменклатуры;
	
	Если НЕ ДанныеНоменклатуры.ЭтоУслуга Тогда
		Номенклатура.ВидНоменклатуры = ПрикладныеПараметры.ВидНоменклатурыТоварДляНовойНоменклатуры
	Иначе
		Номенклатура.ВидНоменклатуры = ПрикладныеПараметры.ВидНоменклатурыУслугаДляНовойНоменклатуры
	КонецЕсли;
	
	Номенклатура.СтавкаНДС = ПолучитьПоСтавкеНДСЗначениеДляЗагрузки(ДанныеНоменклатуры.СтавкаНДС);
	
	//Номенклатура.ЕдиницаИзмерения = НайтиСоздатьЕдиницуИзмерения(ДанныеНоменклатуры.ЕдиницаИзмерения);
	Номенклатура.Описание = "Создан автоматически при загрузке с сайта";
	
	Номенклатура.Записать();
	
	Номенклатура = Номенклатура.Ссылка;
	
КонецПроцедуры

// Вычисляет значение ставки НДС по переданному элементу справочника или перечисления.
//
// Параметры:
// СтавкаНДС. Тип - ПеречислениеСсылка, СправочникСсылка, Ставка НДС, выраженная элементом объекта метаданных
// прикладного решения.
// ЗначениеСтавкиНДС. Тип - Число. Значение ставки НДС выраженное числом.
Процедура ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(СтавкаНДС, ЗначениеСтавкиНДС) Экспорт
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		ЗначениеСтавкиНДС = 18;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		ЗначениеСтавкиНДС = 18;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		ЗначениеСтавкиНДС = 10;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		ЗначениеСтавкиНДС = 10;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		ЗначениеСтавкиНДС = 0;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		ЗначениеСтавкиНДС = 0;
	Иначе
		ЗначениеСтавкиНДС = 18;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет префикс организации.
//
// Параметры:
// Организация. Тип - СправочникСсылка.Организации - ссылка на организацию.
// Префикс. Тип - Строка. Префикс для документов принадлежащих организации.
Процедура ПолучитьПрефиксОрганизации(Организация, Префикс) Экспорт
	
КонецПроцедуры

// Заполняет префикс для заказов с сайта.
// Параметры:
// Префикс. Тип - строка. Префикс для заказов, загруженных с сайта.
Процедура ПолучитьПрефиксДляЗаказаССайта(Префикс) Экспорт
	
	
	
КонецПроцедуры

// Записывает в регистр сведений дополнительные сведения о заказе.
//
// Параметры:
// ОбновленыСвойстваЗаказа.Тип - булево. Признак успешного выполнения процедуры.
// ЗаказПокупателя. Тип - ДокументСсылка. Ссылка на документ ЗаказПокупателя.
// СвойстваЗаказа. Тип - Соответствие. Строковое представление параметров заказа и их значений.
// ОписаниеОшибки. Тип - Строка. Текстовое представление ошибки.
Процедура ОбновитьСоздатьДополнительныеСведенияЗаказа(ОбновленыСвойстваЗаказа,
														ЗаказПокупателя,
														СвойстваЗаказа,
														ОписаниеОшибки) Экспорт
	
	
КонецПроцедуры

// В зависимости от настроек прикладного решения устанавливает флаг использования характеристик.
//
// Пример:ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики")
Процедура УстановитьПризнакИспользоватьХарактеристики(ИспользоватьХарактеристики) Экспорт
	
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры")
	
КонецПроцедуры

// Меняет статус заказа на "Отменен".
//	Параметры:
//		ПрикладныеПараметры - Структура, параметры прикладного решения, добавленные в форму узла плана обмена.
//		ДокументСсылка - Ссылка на документ Заказ, у которого нужно поменять статус.
Процедура ОтменитьЗаказ(ПрикладныеПараметры, ДокументСсылка) Экспорт
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	
	ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовПокупателей.ПустаяСсылка");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПокупателей") Тогда
		ПричинаОтмены = ПрикладныеПараметры.ПричинаОтменыЗаказовПоУмолчанию;
	КонецЕсли;
	
	КоличествоОтмененныхСтрок = РозничныеПродажиСервер.ОтменитьСНепроданнымиТоварами(ДокументОбъект, "Товары", ПричинаОтмены, Истина);
	
	Если КоличествоОтмененныхСтрок > 0 Тогда
		Если ДокументСсылка.Проведен Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение)
		Иначе
			ДокументОбъект.Записать()
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет была ли оплата по заказу.
// Параметры: 
//		ЗаказОплачен. Тип - Булево. Признак того, что заказ был оплачен.
//					 Данные признак влияет на статус оплаты заказа на сайте.
//		СтатусЗаказа. Тип - ПеречислениеСсылка. Статус заказа в прикладном решении.
//		ДанныеДокументаКОплатеОстаток. Тип - Число. Не оплаченный остаток денег по заказу.
Процедура ОпределитьСтатусОплатыЗаказа(ЗаказОплачен, СтатусЗаказа, 
										ДанныеДокументаКОплатеОстаток) Экспорт
	
	ЗаказОплачен = ДанныеДокументаКОплатеОстаток = 0;
	
КонецПроцедуры

// Проверяет состояние заказа
// Проверяет текущее состояние заказа.
//	Параметры:
// ЗаказВРаботе. Тип - Булево. Признак того, что заказ был "обработан" в прикладном решении (т.е. поменял свой статус
// после загрузки с сайта).
//								Данные признак влияет на статус заказа на сайте.
// ДанныеДокументаСостояниеЗаказа. Тип - ПеречислениеСсылка, СправочникСсылка. Статус заказа, который он может
// принимать в прикладном решении.
Процедура ОпределитьСтатусСостоянияЗаказаЗаказВРаботе(ЗаказВРаботе, ДанныеДокументаСостояниеЗаказа) Экспорт
	
	ЗаказВРаботе = НЕ ДанныеДокументаСостояниеЗаказа = Перечисления.СостоянияЗаказовПокупателей.Закрыт;
	
КонецПроцедуры

// Определяет была ли отгрузка товара по заказу.
// Параметры:
//	ЗаказОтгружен. Тип - Булево. Признак того, что товар по заказу был отгружен. Влияет на статус отгрузки заказа на
//	сайте.
//	ДанныеДокументаСтатусЗаказа. Тип - ПеречислениеСсылка, СправочникСсылка. Статус, который может иметь заказ в
//	прикладном решении.
//	ДанныеДокументаКОтгрузкеОстаток. Тип - Число. Неотгруженный остаток по заказу (заказано было 7, а отгрузили 5).
Процедура ОпределитьСтатусОтгрузкиЗаказа(ЗаказОтгружен, ДанныеДокументаСтатусЗаказа,
											ДанныеДокументаКОтгрузкеОстаток) Экспорт
	
	ЗаказОтгружен = ДанныеДокументаКОтгрузкеОстаток = 0;
	
КонецПроцедуры

// Определяем нужно ли считать НДС.
// Параметры:
// СчитатьНДС.Тип- Булево. Признак о необходимости считать НДС по заказу.
// ВыборкаДокументовНалогообложениеНДС. Тип - ПеречислениеСсылка, СправочникСсылка. 
Процедура ОпределитьНеобходимостьНДСВЗаказе(СчитатьНДС, ВыборкаДокументовНалогообложениеНДС) Экспорт
	
	СчитатьНДС = ВыборкаДокументовНалогообложениеНДС = "Облагается";
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеСправочников - Соответствие - список справочников.
//
Процедура ПолучитьСоответствиеДокументов(СоответствиеДокументов) Экспорт
	
	СоответствиеДокументов.Вставить("ЗаказПокупателя","ЗаказПокупателя");
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеСправочников - Соответствие - список справочников.
//
Процедура ПолучитьСоответствиеСправочников(СоответствиеСправочников) Экспорт
	
	СоответствиеСправочников.Вставить("Номенклатура", "Номенклатура");
	
	СоответствиеСправочников.Вставить("ХарактеристикиНоменклатуры",
													"ХарактеристикиНоменклатуры");
	СоответствиеСправочников.Вставить("НаборыДополнительныхРеквизитовИСведений",
										"НаборыДополнительныхРеквизитовИСведений");
										
	СоответствиеСправочников.Вставить("ВидыЦен", "ВидыЦен");
	СоответствиеСправочников.Вставить("НоменклатураПрисоединенныеФайлы",
										"НоменклатураПрисоединенныеФайлы");
	СоответствиеСправочников.Вставить("Склады", "Магазины");
	СоответствиеСправочников.Вставить("ТочкиСамовывоза", "Магазины");
	СоответствиеСправочников.Вставить("Организации", "Организации");
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеСправочников - Соответствие - список справочников.
//
Процедура ПолучитьСоответствиеПВХ(СоответствиеПВХ) Экспорт
	
	СоответствиеПВХ.Вставить("ДополнительныеРеквизитыИСведения", "ДополнительныеРеквизитыИСведения");
	
КонецПроцедуры

// Заполняет соответствие форм библиотеки и прикладного решения.
// Параметры:
// СоответствиеФорм. Тип - соответствие. Используется для переопределения форм, вызываемых библиотекой.
Процедура ПолучитьСоответствиеФорм(СоответствиеФорм) Экспорт
	
	СоответствиеФорм.Вставить("Справочник.ТипыЦен.ФормаВыбора","Справочник.ВидыЦен.ФормаВыбора");
	СоответствиеФорм.Вставить("Справочник.Склады.ФормаВыбора","Справочник.Магазины.ФормаВыбора");
	СоответствиеФорм.Вставить("ФормаВыбораТочекСамовывоза", "Справочник.Магазины.ФормаВыбора");
	
КонецПроцедуры

// Функция формирует прокси по настройкам прокси (передаваемому параметру).
//
// Параметры:
//  НастройкаПроксиСервера - Соответствие:
//  ИспользоватьПрокси - использовать ли прокси-сервер.
//  НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов.
//  ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера.
//  Сервер       - адрес прокси-сервера.
//  Порт         - порт прокси-сервера.
//  Пользователь - имя пользователя для авторизации на прокси-сервере.
//  Пароль       - пароль пользователя.
//
Функция ПолучитьНастройкиПроксиСервера(НастройкаПроксиСервера) Экспорт
	
#Если Клиент Тогда
	НастройкаПроксиСервера = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиПроксиСервера;
#Иначе
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
#КонецЕсли
	
КонецФункции

// Заполняет массив реквизитам формы, значение которых должно быть сохранено.
//
Процедура ЗаполнитьПрикладныеРеквизитыФормыУзлаОбменССайтом(МассивРеквизитов) Экспорт
	
	МассивРеквизитов.Добавить("СписокТочекСамовывоза");
	МассивРеквизитов.Добавить("СпособИдентификацииКонтрагентов");
	МассивРеквизитов.Добавить("ГруппаДляНовойНоменклатуры");
	МассивРеквизитов.Добавить("ГруппаДляНовыхКонтрагентов");
	МассивРеквизитов.Добавить("Организация");
	МассивРеквизитов.Добавить("НомерНаСайте");
	МассивРеквизитов.Добавить("ДатаНаСайте");
	МассивРеквизитов.Добавить("ВидНоменклатурыТоварДляНовойНоменклатуры");
	МассивРеквизитов.Добавить("ВидНоменклатурыУслугаДляНовойНоменклатуры");
	МассивРеквизитов.Добавить("ПричинаОтменыЗаказовПоУмолчанию");
	МассивРеквизитов.Добавить("СоответствиеСтатусовЗаказов");
	
КонецПроцедуры

// Заполняет номер и дату заказа на сайте.
//
// Параметры:
//	ДокСсылка - Ссылка на документ Заказ.
//	ПрикладныеПараметры .Тип - Структура.Параметры прикладного решения, размещенные в форме узла плана обмена.
//
// Возвращаемое значение:
//	РеквизитыЗаказаНаСайте. Тип - структура. Структура, содержащая реквизиты заказа.
//			Описание полей:
//				НомерЗаказаНаСайте. Тип - Строка. Номер заказа на сайте.
//				ДатаЗаказаНаСайте.Тип - Дата. Дата заказа на сайте.
//
Функция РеквизитыЗаказаНаСайте(ДокСсылка, УзелОбмена) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказПокупателя.НомерЗаказаНаСайте КАК НомерЗаказаНаСайте,
	|	ЗаказПокупателя.ДатаЗаказаНаСайте КАК ДатаЗаказаНаСайте
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &Ссылка"
	);
	
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		
		ДанныеССайта = Новый Структура;
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ДанныеССайта.Вставить("НомерЗаказаНаСайте", Выборка.НомерЗаказаНаСайте);
		ДанныеССайта.Вставить("ДатаЗаказаНаСайте", Выборка.ДатаЗаказаНаСайте);
		Возврат ДанныеССайта;
	КонецЕсли;
	
КонецФункции

// Создает новый элемент справочника являющегося в прикладном решении точками самовывоза, например, Склады, Магазины.
// Параметры:
// ДанныеТочкиСамовывоза - Структура.
//		Описание полей:
//			Ид - Строка, идентификатор точки самовывоза.
//			Адрес - Структура с полями "ТипАдреса" и "ЗначениеАдреса".
//			Контакты- Структура с полями "ТипКонтакта" и "ЗначениеКонтакта".
//			Наименование - Строка, наименование точки самовывоза.
//
// ТочкаСамовывоза - ссылка на элемент справочника,который в прикладном решении является точкой самовывоза.
Процедура СоздатьТочкуСамовывоза(ДанныеТочки, ТочкаСамовывоза) Экспорт
	
	ТочкаСамовывоза = Справочники.Магазины.СоздатьЭлемент();
	ТочкаСамовывоза.Наименование = ДанныеТочки.Наименование;
	ТочкаСамовывоза.Записать();
	ТочкаСамовывоза = ТочкаСамовывоза.Ссылка;
	
КонецПроцедуры

// Добавляет в произвольные поля в структуру ПрикладныеПараметры.
// Параметры:
//   ПрикладныеПараметры - структура, содержащая параметры прикладного решения, необходимые для обмена с сайтом.
//	
Процедура ДополнитьПараметрыПрикладногоРешения(ПрикладныеПараметры) Экспорт
	
	ПрикладныеПараметры.Вставить("ВыгружатьХарактеристикиВКаталог", Истина);
	
КонецПроцедуры

// Выполняет логику прикладного решения при обновлении конфигурации
// Параметры:
// ИмяОбработчика - Строка - Представления обработчика обновления, вызвавшего процедуру.
//
Процедура ОбработчикОбновленияПереопределяемый(ИмяОбработчика) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьПараметрыЗапросаПоЦенообразованию(ПараметрыКомпоновки)
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ИспользоватьАссортимент", 
								  ПолучитьФункциональнуюОпцию("УстанавливатьВидыЦенВАссортименте"));
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ПериодАссортимента", 
								  ТекущаяДатаСеанса());
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "Период", 
								  ТекущаяДатаСеанса());
	
	ПустаяЕдиница = Справочники.БазовыеЕдиницыИзмерения.ПустаяСсылка();
	ЕдиницаИзмеренияПоУмолчанию = Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду("796 ");
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияПоУмолчанию) Тогда
		ЕдиницаИзмеренияПоУмолчанию = НайтиСоздатьЕдиницуИзмерения(ПустаяЕдиница)
	КонецЕсли;
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ПустаяЕдиница", 
								  ПустаяЕдиница);
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ЕдиницаПоУмолчанию", 
								  ЕдиницаИзмеренияПоУмолчанию);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БазовыеЕдиницыИзмерения.Ссылка,
	|	БазовыеЕдиницыИзмерения.ВерсияДанных,
	|	БазовыеЕдиницыИзмерения.ПометкаУдаления,
	|	БазовыеЕдиницыИзмерения.Код,
	|	БазовыеЕдиницыИзмерения.Наименование,
	|	БазовыеЕдиницыИзмерения.НаименованиеПолное,
	|	БазовыеЕдиницыИзмерения.МеждународноеСокращение,
	|	БазовыеЕдиницыИзмерения.Предопределенный,
	|	БазовыеЕдиницыИзмерения.ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.БазовыеЕдиницыИзмерения КАК БазовыеЕдиницыИзмерения
	|ГДЕ
	|	БазовыеЕдиницыИзмерения.Ссылка = &ЕдиницаИзмеренияПоУмолчанию";
	
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияПоУмолчанию", ЕдиницаИзмеренияПоУмолчанию);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "КодЕдиницыПоУмолчанию", 
								  Выборка.Код);
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "НаименованиеЕдиницыПоУмолчанию", 
								  Выборка.Наименование);
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "НаименованиеПолноеЕдиницыПоУмолчанию", 
								  Выборка.НаименованиеПолное);
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "МеждународноеСокращениеЕдиницыПоУмолчанию", 
								  Выборка.МеждународноеСокращение);
	
КонецПроцедуры

Процедура УстановитьПараметрКомпоновки(ПараметрыКомпоновки, ИмяПараметра, ЗначениеПараметра)
	
	ЭлементПараметра = ПараметрыКомпоновки.Добавить();
	ЭлементПараметра.Имя = ИмяПараметра;
	ЭлементПараметра.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ЭлементПараметра.Значение = ЗначениеПараметра;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьДокумента(Документ, СтруктураРеквизитовТовары, Параметры)
	
	Документ.Товары.Очистить();

	Для Каждого СтрокаТаблицы Из СтруктураРеквизитовТовары Цикл
		
		СтрокаТовары = Документ.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТаблицы);
		СтрокаТовары.Характеристика = СтрокаТаблицы.Характеристика;
		СтрокаТовары.КоличествоУпаковок = СтрокаТаблицы.Количество;
	//	СтрокаТовары.СтавкаНДС = ПолучитьПоСтавкеНДСЗначениеДляЗагрузки(СтрокаТаблицы.СтавкаНДС);

		Если СтрокаТаблицы.Резерв > 0 Тогда	//	LNK 12.12.2017 09:07:46
			
			СтрокаТовары.Резервировать = Истина;

			Если СтрокаТаблицы.Резерв < СтрокаТаблицы.Количество Тогда

			//	К резерву назначено меньшее количество, чем по строке в целом.
			//	Нужно разбить строку на две - одну к резервированию, вторую - без резервирования.

				КопияТовары = Документ.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(КопияТовары, СтрокаТовары);
			
				КопияТовары.Резервировать = Ложь;

				СтрокаТовары.Количество = СтрокаТаблицы.Резерв; 
				КопияТовары.Количество  = СтрокаТаблицы.Количество - СтрокаТаблицы.Резерв;

				СтрокаТовары.КоличествоУпаковок = СтрокаТовары.Количество;
				КопияТовары.КоличествоУпаковок  = КопияТовары.Количество;

				СтрокаТовары.Сумма = СтрокаТовары.Цена * СтрокаТовары.Количество;
				КопияТовары.Сумма  = КопияТовары.Цена  * КопияТовары.Количество;

			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Документ));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Документ.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
КонецПроцедуры

Функция НайтиНоменклатуруПоАртикулуНаименованию(Артикул, Наименование)
	
	Если ЗначениеЗаполнено(Артикул) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Артикул = &Артикул
		|	И НЕ Номенклатура.ЭтоГруппа");
		
		Запрос.УстановитьПараметр("Артикул", Артикул);
		
	ИначеЕсли ЗначениеЗаполнено(Наименование) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование = &Наименование
		|	И НЕ Номенклатура.ЭтоГруппа");
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат.Выгрузить()[0][0];
	
КонецФункции

// Вычисляет значение ставки НДС по переданному значению.
//
// Параметры:
//  ЗначениеСтавкиНДС - Число
//
// Возвращаемое значение:
//  Перечисление.СтавкиНДС
Функция ПолучитьПоСтавкеНДСЗначениеДляЗагрузки(ЗначениеСтавкиНДС)
	
	Если ЗначениеСтавкиНДС = 20 Тогда
		Возврат Перечисления.СтавкиНДС.НДС20
	ИначеЕсли ЗначениеСтавкиНДС = 10 Тогда
		Возврат Перечисления.СтавкиНДС.НДС10
	ИначеЕсли ЗначениеСтавкиНДС = 0 Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС
	Иначе
		Возврат Перечисления.СтавкиНДС.НДС20
	КонецЕсли;
	
КонецФункции

Функция НайтиСоздатьЕдиницуИзмерения(ДанныеЕдиницыИзмерения)
	
	КодБазовойЕдиницы = ДанныеЕдиницыИзмерения.КодБазовойЕдиницы;
	Если ЗначениеЗаполнено(КодБазовойЕдиницы)Тогда
		ЕдиницаИзмерения = Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду(КодБазовойЕдиницы);
		Возврат ЕдиницаИзмерения;
	КонецЕсли;
	
	НаименованиеБазовойЕдиницы = ДанныеЕдиницыИзмерения.НаименованиеБазовойЕдиницы;
	
	Если ЗначениеЗаполнено(НаименованиеБазовойЕдиницы) Тогда
		ЕдиницаИзмерения = Справочники.БазовыеЕдиницыИзмерения.НайтиПоНаименованию(НаименованиеБазовойЕдиницы);
		Возврат ЕдиницаИзмерения;
	КонецЕсли;
	
	ЕдиницаИзмерения = Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду("796");
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		Возврат ЕдиницаИзмерения;
	КонецЕсли;
	
	ЕдиницаИзмеренияОбъект = Справочники.БазовыеЕдиницыИзмерения.СоздатьЭлемент();
	ЕдиницаИзмеренияОбъект.Код = "796";
	ЕдиницаИзмеренияОбъект.Наименование = "Штука";
	ЕдиницаИзмеренияОбъект.МеждународноеСокращение = "PCE";
	ЕдиницаИзмеренияОбъект.Записать();
	ЕдиницаИзмерения = ЕдиницаИзмеренияОбъект.Ссылка;
	Возврат ЕдиницаИзмерения.Ссылка;
	
КонецФункции

Функция МагазинПоНаименованию(НаименованиеМагазина)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Магазины.Ссылка
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.Наименование = &НаименованиеМагазина";
	
	Запрос.УстановитьПараметр("НаименованиеМагазина", НаименованиеМагазина);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Магазины.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // МагазинПоНаименованию()

#КонецОбласти

#Область НовыеПроцедурыИФункции

// Заполняет соответствие полями, которые должны быть добавлены в отбор настройки каталога 
// Указанные поля будут добавлены к предопределенными полям, заданным в макете "СхемаВыгрузкиКаталог" плана обмена "Обмен с сайтом"
// Поля в соответствии хранятся с привязкой к набору данных, к которому они относятся 
//   Параметры:
//	* ИмяНабораДанных - Имя набора данных из макета "СхемаВыгрузкиПакетПредложений" 
//	* ПоляОтбора - Таблица значений, в которую добавляются поля отбора			
// 		* Наименование - строка - Имя поля
// 		* Синоним - строка - пользовательское представление
// 		* ТипЗначения - ОписаниеТипов - Тип значения поля
//		* Отбор - Массив - Содержит стуктуры  - описание отбора, необходимого при открытии формы выбора поля
//
Процедура ЗаполнитьПоляОтбораКаталога(ПоляОтбора) Экспорт
	
КонецПроцедуры

// Заполняет структуру полями, которые должны быть добавлены в отбор настройки каталога
// Указанные поля будут добавлены к предопределенными полям, заданным в макете "СхемаВыгрузкиОбновлениеПакетаПредложений" плана обмена "Обмен с сайтом"
//   Параметры:
// ПоляОтбора - Структура, в которую добавляются поля отбора
//		* Ключ - Наименование поля отбора
//		* Значение - Описание типа значения добавляемого поля
Процедура ЗаполнитьПоляОтбораОбновленияПакетаПредложений(ПоляОтбора) Экспорт
	
КонецПроцедуры

// Заполняет соотвествие полями, которые должны быть добавлены в отбор настройки каталога
// Указанные поля будут добавлены к предопределенными полям, заданным в макете "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом"
// Поля в соотвествии хранятся с привязкой к набору данных, к которому они относятся 
//   Параметры:
// ПоляОтбора - Соотвествие, в которую добавляются поля отбора
//		* ИмяНабораДанных - Имя набора данных из макета "СхемаВыгрузкиПакетПредложений"
//		* Структура с полями данного набора
//			* Ключ - Наименование поля отбора
//			* Значение - Описание типа значения добавляемого поля
Процедура ЗаполнитьПоляОтбораПакетаПредложений(ПоляОтбора) Экспорт
	
КонецПроцедуры

// Заполняет массив полями, которые должны быть удалены из отбора
// в макете "СхемаВыгрузкиКаталог" плана обмена "Обмен с сайтом"
// Параметры:
//    УдаляемыеПоля - массив,который заполняется наименованием полей, которые должны быть удалены из отбора
Процедура ЗаполнитьУдаляемыеПоляОтбораКаталог(УдаляемыеПоля) Экспорт
	
КонецПроцедуры

// Заполняет массив полями, которые должны быть удалены из отбора
// в макете "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом"
// Параметры:
//    УдаляемыеПоля - массив,который заполняется наименованием полей, которые должны быть удалены из отбора
Процедура ЗаполнитьУдаляемыеПоляОтбораОбновлениеПакетаПредложений(УдаляемыеПоля) Экспорт
	
КонецПроцедуры

// Заполняет массив полями, которые должны быть удалены из отбора
// в макете "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом"
// Параметры:
//    УдаляемыеПоля - массив,который заполняется наименованием полей, которые должны быть удалены из отбора
Процедура ЗаполнитьУдаляемыеПоляОтбораПакетПредложений(УдаляемыеПоля) Экспорт
	
КонецПроцедуры

// В данной процедуре возможно изменить параметры обмена перед началом обмена
//
// Параметры:
//  ПараметрыОбмена  - Структрура - текущие параметры обмена
//  УзелОбмена  - ПланОбмена.ОбменССайтом - план обмена, для которого будет выполнен обмен.
//
Процедура ИзменитьПараметрыОбмена(ПараметрыОбмена, УзелОбмена) Экспорт
	
КонецПроцедуры

// Позволяет внести изменения в компоновщик настроек СКД после загрузки в нее настроек при получении данных для выгрузки
//
// Параметры:
//  КомпоновщикНастроек  - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек, в который можно внести изменения
//  ИмяМакета  - Строка - имя макета выполняемой СКД которая выполняется
//
Процедура КомпоновщикНастроекСхемыФормированияДанныхПослеЗагрузкиНастроек(КомпоновщикНастроек, ИмяМакета) Экспорт
	
КонецПроцедуры

// Ищет единица измерения товара по его коду
Процедура НайтиСоздатьУпаковку(КодУпаковки, Упаковка) Экспорт
	
КонецПроцедуры

// Корректирует проверяемые при записи реквизиты формы узла 
//
// Параметры:
//  Форма                 - УправляемаяФорма - форма плана узла обмена, в которой выполняется запись.
//  ПроверяемыеРеквизиты  - Массив - массив имен проверяемых на заполненность реквизитов формы.
//  ОбменТоварами         - Булево - признак того, что будет выполняться обмен товарами.
//  ОбменЗаказами         - Булево - признак того, что будет выполняться обмен заказами.
//
Процедура СкорректироватьПроверяемыеРеквизитыФормыУзла(Форма, ПроверяемыеРеквизиты, ОбменТоварами, ОбменЗаказами) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если Не ОбменЗаказами Тогда
		МассивНепроверяемыхРеквизитов = РеквизитыОбменаЗаказами();
		МассивНепроверяемыхРеквизитов.Добавить("ПричинаОтменыЗаказовПоУмолчанию");
	ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПокупателей") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПричинаОтменыЗаказовПоУмолчанию");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

// В данной процедуре можно изменить видимость элементов формы узла обмена с сайтом
//
// Параметры:
//  Форма  - УправляемаяФорма - форма узла обмена с сайтом
//
Процедура УстановитьВидимостьЭлементовФормыУзла(Форма) Экспорт
	Форма.Элементы.СтраницаОбменЗаказами.Видимость = Форма.Элементы.СтраницаОбменЗаказами.Видимость; //И Форма.ИспользоватьЗаказыПокупателей;
КонецПроцедуры

// В данной процедуре можно изменить условное оформление формы узла обмена с сайтом
//
// Параметры:
//  Форма  - УправляемаяФорма - форма узла обмена с сайтом
//
Процедура УстановитьУсловноеОформлениеФормаУзлаОбмена(Форма) Экспорт
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ - Булево - признак отказа от выполнения действия.
//  ТекущийОбъект - ПланОбменаОбъект - записываемый объект
//  ПараметыЗаписи - Структура - структура, содержащая параметры записи
//
Процедура ФормаУзлаПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт	
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект - ПланОбменаОбъект - записываемый объект
//  ПараметыЗаписи - Структура - структура, содержащая параметры записи
//
Процедура ФормаУзлаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события
//
Процедура ФормаУзлаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт


КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект - Объект узла плана обмена "ОбменССайтом"
//
Процедура ФормаУзлаПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
КонецПроцедуры

Функция РеквизитыОбменаЗаказами()
	
	МассивРеквизитов = Новый Массив;
	
	МассивРеквизитов.Добавить("СпособИдентификацииКонтрагентов");
	МассивРеквизитов.Добавить("ЕдиницаИзмеренияНовойНоменклатуры");
	МассивРеквизитов.Добавить("ГруппаДляНовойНоменклатуры");
	МассивРеквизитов.Добавить("ГруппаДляНовыхКонтрагентов");
	МассивРеквизитов.Добавить("Организация");
	МассивРеквизитов.Добавить("НомерНаСайте");
	МассивРеквизитов.Добавить("ДатаНаСайте");
	МассивРеквизитов.Добавить("СоответствиеСтатусовЗаказов");
	МассивРеквизитов.Добавить("ВидНоменклатурыТоварДляНовойНоменклатуры");
	МассивРеквизитов.Добавить("ВидНоменклатурыУслугаДляНовойНоменклатуры");
	
	Возврат МассивРеквизитов;
	
КонецФункции

#КонецОбласти

