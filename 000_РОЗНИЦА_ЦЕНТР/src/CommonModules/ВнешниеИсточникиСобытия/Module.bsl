#Область ПрограммныйИнтерфейсМодуля

Процедура ОбработкаСобытийNavision(Назначение, Входящие = Ложь, Исходящие = Ложь, Отладка = Ложь) Экспорт

//	"Назначение" - литеральное определение видов получаемых объектов

//	ПАМЯТКА:
//	КодФилиала = "NN" -> задние для NAV
//	КодФилиала = "RR" -> задние для 1С:Розница

	УстановитьПривилегированныйРежим(Истина);

	Если Входящие = Истина Тогда

		Если Назначение = "ХарактеристикиПроверить" Тогда

			ПроверитьКлассификаторХарактеристикЦенников();

		Иначе

		//	ЭТАП 1. Входящие задания.
		//	Теперь отрабатываем задания от КСУ Navision, которые еще не выполнены (адресация к нам - 'RR').
		//	------------------------------------------------------------------------------------------------
			СобытияВходящиеЗаданияNavision(Назначение, Отладка);

		КонецЕсли;

	КонецЕсли;

	Если Исходящие = Истина Тогда
		
		//Криворучко 05122016 //вставим обработку события "Сверка"
		Если СокрЛП(Назначение) = "СверкаПеремещений" Тогда

			СверкаПеремещенийNavision();

		ИначеЕсли Назначение = "ОчиститьЦеныТребующиеОбновления" Тогда

			ВыполнитьОчисткуРегистраЦеныТребующиеОбновления();

		Иначе

		//	ЭТАП 2. Исходящие задания.
		//	Проверяем по регистрациям в плане обмена "ОбменNavisionРозница" - что требуется отправить в КСУ
		//	или как там обстоят дела с отправленными ранее данными?
		//	------------------------------------------------------------------------------------------------
			СобытияИсходящиеЗаданияNavision(Назначение, Отладка, ?(Назначение = "ВыгрузкаВТаблицыСверкиДокументов", Истина, Ложь));

		КонецЕсли;
		//
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

//	Очистим используемые соединения
//	------------------------------------------------------------------------------------------------
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

Функция ЗаписатьОбъект(ДокументОбъект, РежимЗаписи, ПараметрыЗадания, ИсключительныйРежимЗаписи = Ложь, ВызватьОшибку = Ложь)	Экспорт

	Отказ = Истина;
	УстановитьПривилегированныйРежим(Истина);
	РежимВосстановить = ПараметрыСеанса.ИсключительныйРежим;

	Если ИсключительныйРежимЗаписи = Истина Тогда

		ПараметрыСеанса.ИсключительныйРежим = Истина;

	КонецЕсли;

	Для Итерация = 1 По 5 Цикл

		Попытка

			ДокументОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаИзNavision", Истина);
			ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
			ДокументОбъект.Записать(РежимЗаписи, РежимПроведенияДокумента.Неоперативный);
			Отказ = Ложь;

			Прервать;

		Исключение

			ТекстОшибки = ОписаниеОшибки();

			Если НЕ Найти(ТекстОшибки, "поля ""Номер"" не уникально") = 0 Тогда

				Итерация = 10;

				ПараметрыЗадания.Вставить(
					"ДанныеОшибки"
					, Новый Структура(
						"Заголовок, Сообщение, Выполнено"
						, "GET_NAV.NUMBER_CONFLICT"
						, "Номер [" + ДокументОбъект.Номер + "] от " + ДокументОбъект.Дата + " НЕ УНИКАЛЕН!"
						, 0
					)
				);

				ЗаписьЖурналаРегистрации("GET_NAV.NUMBER_CONFLICT", УровеньЖурналаРегистрации.Ошибка
					, ДокументОбъект.Метаданные()
					,
					, ПараметрыЗадания.ДанныеОшибки.Сообщение
				);

			//	возможно, присутствует какой документ, помеченный к удалению...
				ПараметрыФоновойЗадачи = Новый Массив;
				ПараметрыФоновойЗадачи.Добавить(ДокументОбъект.Метаданные().Имя);
				ПараметрыФоновойЗадачи.Добавить(ДокументОбъект.Номер);
				ПараметрыФоновойЗадачи.Добавить(ДокументОбъект.Дата);

				ФоновыеЗадания.Выполнить("ВнешниеИсточникиСобытия.УстранитьКонфликтНомеров", ПараметрыФоновойЗадачи, "DELETE_NUMBER_CONFLICT");
			//	УстранитьКонфликтНомеров(ДокументОбъект.Метаданные().Имя, ДокументОбъект.Номер, ДокументОбъект.Дата); 

			ИначеЕсли ДокументОбъект.ДополнительныеСвойства.Свойство("ДанныеОшибки") Тогда

			//	Ошибка обработана в записываемом объекте - вряд-ли что-то изменится. Прерываемся. 
				Итерация = 10;

			КонецЕсли;

			Если Итерация < 5 Тогда

				ОбщегоНазначенияКлиентСервер.Пауза(2000);	//	пауза 2 сек

			ИначеЕсли ВызватьОшибку = Истина Тогда

				Если ИсключительныйРежимЗаписи = Истина Тогда

					ПараметрыСеанса.ИсключительныйРежим = РежимВосстановить;

				КонецЕсли;

				ВызватьИсключение ТекстОшибки;

			КонецЕсли;

		КонецПопытки;

	КонецЦикла;

	Если ИсключительныйРежимЗаписи = Истина Тогда

		ПараметрыСеанса.ИсключительныйРежим = РежимВосстановить;

	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

	Возврат НЕ Отказ;

КонецФункции

//	LNK 03.04.2018 08:40:16
Процедура УстранитьКонфликтНомеров(Имя, Номер, Дата)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ." + Имя + " КАК ТаблицаДокументы
	|ГДЕ
	|	ТаблицаДокументы.Номер = &Номер
	|	И ТаблицаДокументы.ПометкаУдаления
	|	И ТаблицаДокументы.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ГОД) И КОНЕЦПЕРИОДА(&Период, ГОД)"
	);
	Запрос.УстановитьПараметр("Номер" , Номер);
	Запрос.УстановитьПараметр("Период", Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		ОбъектКонтрафакт = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектКонтрафакт.ОбменДанными.Загрузка = Истина;
		ОбъектКонтрафакт.ДополнительныеСвойства.Вставить("ЗагрузкаИзNavision", Истина);
		ОбъектКонтрафакт.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		ОбъектКонтрафакт.Номер = "-" + Сред(ОбъектКонтрафакт.Номер, 2);
		ОбъектКонтрафакт.Записать();

	КонецЦикла;

КонецПроцедуры

Процедура УстановитьIDNПоКлючевомуРеквизиту(ТипЗначения, ОбъектДанных, ПараметрыЗадания = Неопределено, Принудительно = Ложь)	Экспорт

	ПолноеИмяМетаданных = ОбъектДанных.Метаданные().ПолноеИмя();
	ЕстьНужныеРеквизиты = (ОбщегоНазначенияПовтИсп.ЕстьОбщийРеквизит("IDN", ПолноеИмяМетаданных) ИЛИ ОбщегоНазначения.ЕстьРеквизитОбъекта(ОбъектДанных, "IDN"))
						И ОбщегоНазначенияПовтИсп.ЕстьОбщийРеквизит("УзелСоздания", ПолноеИмяМетаданных)
						И ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ОбъектДанных.ДополнительныеСвойства, "РегистрацияПередачиВNavision", Ложь) = Истина;

	Если НЕ ОбъектДанных.УзелСоздания = Справочники.СтруктураУзлов.КСУ_Navision И ЕстьНужныеРеквизиты И (ПустаяСтрока(ОбъектДанных.IDN) ИЛИ Принудительно) Тогда

		Если ПараметрыЗадания = Неопределено Тогда

			ПараметрыЗадания = ПолучитьКлючевыеПараметрыЗадания(ТипЗначения, ОбъектДанных,, Ложь);

		КонецЕсли;

		Если ТипЗначения = Тип("ДокументСсылка.ЗаказПокупателя") И НЕ ПустаяСтрока(ОбъектДанных.НомерЗаказаНаСайте) Тогда

			ОбъектДанных.IDN = ПараметрыЗадания.Префикс + СокрЛП(ОбъектДанных.НомерЗаказаНаСайте);

		Иначе

			ИменаКлючей = Новый Массив;
			ИменаКлючей.Добавить("Номер");
			ИменаКлючей.Добавить("Код");

			Для каждого ИмяКлюча Из ИменаКлючей Цикл

				Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ОбъектДанных, ИмяКлюча) Тогда

					Если ПустаяСтрока(ОбъектДанных[ИмяКлюча]) Тогда

					//	Тут возникает некоторая неоднозначность... вдруг документ / справочник не будет записан?
					//	Но делать нечего - устанавливаем номер документа или код справочника.

						Если ИмяКлюча = "Номер" Тогда

								ОбъектДанных.УстановитьНовыйНомер();

						Иначе	ОбъектДанных.УстановитьНовыйКод();
						
						КонецЕсли;

					КонецЕсли;

				//	Получим установленное в параметрах значение, если его нет, - то формируем по умолчанию
					IDN = ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ПараметрыЗадания
						, ИмяКлюча
						, ПараметрыЗадания.Префикс + СокрЛП(ОбъектДанных[ИмяКлюча])
						, Новый ОписаниеТипов("Строка")
					);

					Если НЕ ОбъектДанных.IDN = IDN Тогда

						ОбъектДанных.IDN = IDN;

					КонецЕсли;

					Прервать;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#Область ОбработкаКомандРегистраОбъектыДляОбработки

Процедура ВыполнитьКомандыОбъектыДляОбработки()	Экспорт

	Для Итерация = 1 По 2 Цикл

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаЗаданий.Период,
		|	ТаблицаЗаданий.Магазин,
		|	ТаблицаЗаданий.Индекс,
		|	ТаблицаЗаданий.IDN,
		|	ТаблицаЗаданий.ДействиеКоманда,
		|	ТаблицаЗаданий.Объект
		|ПОМЕСТИТЬ Источник
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаЗаданий.Период КАК Период,
		|		ТаблицаЗаданий.Магазин КАК Магазин,
		|		ТаблицаЗаданий.Индекс КАК Индекс,
		|		ВЫБОР
		|			КОГДА ТаблицаЗаданий.IDN = """"
		|					И ТаблицаЗаданий.Объект ССЫЛКА Справочник.Номенклатура
		|				ТОГДА ТаблицаЗаданий.Объект.IDN
		|			ИНАЧЕ ТаблицаЗаданий.IDN
		|		КОНЕЦ КАК IDN,
		|		ТаблицаЗаданий.ДействиеКоманда КАК ДействиеКоманда,
		|		ТаблицаЗаданий.Объект КАК Объект
		|	ИЗ
		|		РегистрСведений.ОбъектыДляОбработки КАК ТаблицаЗаданий
		|	ГДЕ
		|		ТаблицаЗаданий.ДействиеКоманда В(&СписокКоманд)) КАК ТаблицаЗаданий
		|ГДЕ
		|	НЕ ЕСТЬNULL(ТаблицаЗаданий.IDN, """") = """""
		);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("СписокОтработанныхКодов", Новый Массив);

		Если Итерация = 1 Тогда

			ОбработатьНоменклатурныйЗапрос(Запрос);

		ИначеЕсли Итерация = 2 Тогда

			ОбработатьТоварныйОрдерПроведен(Запрос);

		Иначе

			Прервать;

		КонецЕсли;

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаЗаданий.Период КАК Период,
		|	ТаблицаЗаданий.Магазин КАК Магазин,
		|	ТаблицаЗаданий.Индекс КАК Индекс,
		|	ТаблицаЗаданий.IDN КАК IDN,
		|	ТаблицаЗаданий.ДействиеКоманда КАК ДействиеКоманда
		|ИЗ
		|	Источник КАК ТаблицаЗаданий
		|ГДЕ
		|	ТаблицаЗаданий.IDN В(&СписокОтработанныхКодов)
		|	И ТаблицаЗаданий.ДействиеКоманда В(&СписокКоманд)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Магазин,
		|	Индекс,
		|	IDN
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Источник"
		;
		Выборка = Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл

			МенеджерЗаписи = РегистрыСведений.ОбъектыДляОбработки.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Удалить();

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьНоменклатурныйЗапрос(Запрос)

	СписокКоманд = Новый Массив;

//	СписокКоманд.Добавить("ОБНОВИТЬ_ТОВАР_ЦЕНА");
	СписокКоманд.Добавить("ОБНОВИТЬ_ТОВАР_ЕД_ИЗМ");
	СписокКоманд.Добавить("ОБНОВИТЬ_ТОВАР");

	Запрос.УстановитьПараметр("СписокКоманд", СписокКоманд);

	Запрос.Выполнить();

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	Источник.IDN КАК IDN,
	|	ЕСТЬNULL(ТаблицаСправочник.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	0 КАК НомерСтроки
	|ИЗ
	|	Источник КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
	|		ПО Источник.IDN = ТаблицаСправочник.IDN
	|ГДЕ
	|	НЕ Источник.IDN В (&СписокОтработанныхКодов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	IDN";

	Пока Истина Цикл

		ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
		Запрос.УстановитьПараметр("СписокОтработанныхКодов"
		, ОбщегоНазначенияКлиентСервер.ADD(Запрос.Параметры.СписокОтработанныхКодов, ТаблицаЗначений.ВыгрузитьКолонку("IDN")));

		Если ТаблицаЗначений.Количество() = 0 Тогда

			Прервать;

		Иначе

			НомерСтроки = 0;

			Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

				НомерСтроки = НомерСтроки + 1;
				СтрокаТаблицы.НомерСтроки = НомерСтроки;

			КонецЦикла;

			ТоварыПодготовленные = Новый ПостроительЗапроса;
			ТоварыПодготовленные.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаЗначений);
			ТоварыПодготовленные.Выполнить();

			ПараметрыВыборки = Новый Структура(
				"ВыборкаДанных,
				| СписокКодов"
				, ТоварыПодготовленные.Результат.Выбрать()
				, ВнешниеИсточники.ПолучитьСтрокуIDNТоваров(ТаблицаЗначений.ВыгрузитьКолонку("IDN")));

			ВнешниеИсточники.УстановитьНоменклатуруВТаблицеПодготовки(ТаблицаЗначений, Истина, Новый Массив, ПараметрыВыборки);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьТоварныйОрдерПроведен(Запрос)

	СписокКоманд = Новый Массив;
	СписокКоманд.Добавить("ОРДЕР_ПРОВЕДЕН");

	Запрос.УстановитьПараметр("СписокКоманд", СписокКоманд);

	Запрос.Выполнить();

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Данные.IDN КАК IDN,
	|	Данные.Объект.Дата КАК Дата,
	|	Данные.Объект.Номер КАК Номер,
	|	Данные.Объект.Проведен КАК Проведен,
	|	Данные.Объект.ВерсияДанных КАК ВерсияДанных,
	|	Данные.Объект.ДокументОснование.IDN КАК IDN_Перемещения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Источник.IDN КАК IDN,
	|		ВЫРАЗИТЬ(Источник.Объект КАК Документ.ПриходныйОрдерНаТовары) КАК Объект
	|	ИЗ
	|		Источник КАК Источник
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		Источник.IDN,
	|		ВЫРАЗИТЬ(Источник.Объект КАК Документ.РасходныйОрдерНаТовары)
	|	ИЗ
	|		Источник КАК Источник) КАК Данные
	|ГДЕ
	|	НЕ Данные.Объект В (ЗНАЧЕНИЕ(Документ.ПриходныйОрдерНаТовары.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.РасходныйОрдерНаТовары.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

	//	Выполним предварительную очистку всех возможных заданий по текущим ключам.

		Если ПустаяСтрока(Выборка.IDN_Перемещения)
		ИЛИ НЕ ЕстьВЗаголовках("ПЕРЕМЕЩ", Выборка.IDN_Перемещения, Выборка.ВерсияДанных) Тогда	//	LNK 05.06.2019 13:31:48
	//	ИЛИ НЕ ВнешниеИсточникиСверка.НаличиеДокументаNavision(Выборка.IDN_Перемещения, "ПЕРЕМЕЩ") Тогда	//	LNK 05.06.2019 13:31:48

		//	IDN перемещения-основания не задан (не отправлялся в NAV) или основания ещё (или уже) нет в NAV
			Продолжить;

		КонецЕсли;

	//	"Погасим" все предыдущие однотипные задания, относящиеся к данному объекту
		Для КлючПроведен = 0 По 1 Цикл

			НомерЗадания = ОчередьПолучитьНомер("ОРДЕР_ПРОВЕДЕН", Выборка.IDN, КлючПроведен);

			Если НЕ НомерЗадания = 0 Тогда

				ОчередьОбновитьЗадание(НомерЗадания,, 1, "Получено следующее событие");

			КонецЕсли;

		КонецЦикла;

	//	Создаём новое задание, соответствующее флагу проведения
		НомерЗадания = ОчередьУстановитьЗадание(ТекущаяДатаСеанса(), "ОРДЕР_ПРОВЕДЕН", Выборка.IDN, ?(Выборка.Проведен = Истина, 1, 0));

		Если НЕ НомерЗадания = 0 Тогда

			Запрос.Параметры.СписокОтработанныхКодов.Добавить(Выборка.IDN);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

//	LNK 05.04.2017 10:19:20
Функция УстановитьОбъектДляОбработки(IDN, ДействиеКоманда = "ОБНОВИТЬ_ТОВАР_ЕД_ИЗМ", Объект = Неопределено, Хранилище = Неопределено, БезРегистрации = Ложь)	Экспорт

	Если НЕ ЗначениеЗаполнено(IDN) И НЕ ЗначениеЗаполнено(Объект) И НЕ ТипЗнч(Хранилище) = Тип("ХранилищеЗначения") Тогда

	//	Если все значащие ресурсы НЕ заполнены, то делать тут нечего...
		Отказ = Ложь;

	Иначе

		Отказ = Истина;
		УстановитьПривилегированныйРежим(Истина);

		Попытка
		
			Магазин = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин;

			Если НЕ ЗначениеЗаполнено(Магазин) Тогда

				Магазин = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ЦентрУправляющейСистемы");

			КонецЕсли;

			НаборЗаписей = РегистрыСведений.ОбъектыДляОбработки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(ТекущаяДатаСеанса());
			НаборЗаписей.Отбор.Магазин.Установить(Магазин);
			НаборЗаписей.Отбор.Индекс.Установить(РегистрыСведений.ОбъектыДляОбработки.ПолучитьИндекс(НаборЗаписей.Отбор.Период.Значение, Магазин));

			Если БезРегистрации Тогда

				НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);

			КонецЕсли;

			ЗаписьНабора = НаборЗаписей.Добавить();

			ЗаписьНабора.Период  = НаборЗаписей.Отбор.Период.Значение;
			ЗаписьНабора.Магазин = НаборЗаписей.Отбор.Магазин.Значение;
			ЗаписьНабора.Индекс  = НаборЗаписей.Отбор.Индекс.Значение;
			ЗаписьНабора.IDN     = IDN;
			ЗаписьНабора.ДействиеКоманда = ДействиеКоманда;
			ЗаписьНабора.Объект    = Объект;
			ЗаписьНабора.Хранилище = Хранилище;

			НаборЗаписей.Записать();
			Отказ = Ложь;

		Исключение

			ТекстОшибки = ОписаниеОшибки();

		КонецПопытки;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

//	LNK 03.11.2017 09:30:00
Процедура ОчиститьОбъектДляОбработки(Период = '00010101', IDN = "", ДействиеКоманда = "", Объект = Неопределено)	Экспорт

	Если НЕ ПустаяСтрока(ДействиеКоманда)
	И (НЕ Объект = Неопределено ИЛИ НЕ ПустаяСтрока(IDN))
	Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаЗаданий.Период КАК Период,
		|	ТаблицаЗаданий.Магазин КАК Магазин,
		|	ТаблицаЗаданий.Индекс КАК Индекс
		|ИЗ
		|	РегистрСведений.ОбъектыДляОбработки КАК ТаблицаЗаданий
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &Период = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ТаблицаЗаданий.Период = &Период
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &IDN = """"
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ТаблицаЗаданий.IDN = &IDN
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ДействиеКоманда = """"
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ТаблицаЗаданий.ДействиеКоманда = &ДействиеКоманда
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Объект = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ТаблицаЗаданий.Объект = &Объект
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Индекс"
		);
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.УстановитьПараметр("IDN"   , IDN);
		Запрос.УстановитьПараметр("ДействиеКоманда", ДействиеКоманда);
		Запрос.УстановитьПараметр("Объект", Объект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл

			МенеджерЗаписи = РегистрыСведений.ОбъектыДляОбработки.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период  = Выборка.Период;
			МенеджерЗаписи.Магазин = Выборка.Магазин;
			МенеджерЗаписи.Индекс  = Выборка.Индекс;

			МенеджерЗаписи.Удалить();

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

#Область ЗагрузкаДанных_из_Navision

Процедура СобытияВходящиеЗаданияNavision(Назначение, Отладка)

	ИменаЗаданийNavision = Новый Массив;
	РаботаСДокументами   = Ложь;

	Если Назначение = "Справочники" Тогда

	//	Сначала указываем имена заданий, выполняемых совместно.

		ИменаЗаданийNavision.Добавить("ОБНОВИТЬ_ТОВАР_ЕД_ИЗМ");
		ИменаЗаданийNavision.Добавить("ОБНОВИТЬ_ТОВАР");

		УсловиеОтбора = "= 'RR' AND [Тип Задания] IN ('ОБНОВИТЬ_ТОВАР_ЕД_ИЗМ', 'ОБНОВИТЬ_ТОВАР')";

	ИначеЕсли Назначение = "ЦеныНоменклатуры" Тогда

		ИменаЗаданийNavision.Добавить("ОБНОВИТЬ_ТОВАР_ЦЕНА");

		УсловиеОтбора = "= 'RR' AND [Тип Задания] = 'ОБНОВИТЬ_ТОВАР_ЦЕНА' AND [ID2] IN (" + КодыРозничныхПрайсов("СтрокаВнешнегоУсловия") + ")";

	ИначеЕсли Назначение = "ЦеныНоменклатурыОптовые" Тогда

		ИменаЗаданийNavision.Добавить("ОБНОВИТЬ_ТОВАР_ЦЕНА");

		УсловиеОтбора = "= 'RR' AND [Тип Задания] = 'ОБНОВИТЬ_ТОВАР_ЦЕНА' AND [ID2] = 'ОПТ'";

	ИначеЕсли Назначение = "ЦеныНоменклатурыWEB" Тогда

		ИменаЗаданийNavision.Добавить("ОБНОВИТЬ_ТОВАР_ЦЕНА_WEB");

		УсловиеОтбора = "= 'RR' AND [Тип Задания] = 'ОБНОВИТЬ_ТОВАР_ЦЕНА' AND [ID2] IN (" + ВнешниеИсточникиПовтИсп.КодыПрайсЛистаWEB("СтрокаВнешнегоУсловия", Ложь) + ")";

	ИначеЕсли Назначение = "СверкаДокументов" Тогда

		ИменаЗаданийNavision.Добавить("ДОКУМЕНТ_СВЕРИТЬ");

		УсловиеОтбора = "= 'RR' AND [Тип Задания] = 'ДОКУМЕНТ_СВЕРИТЬ'";

	ИначеЕсли Назначение = "ТоварыОжидаемые" Тогда

		ИменаЗаданийNavision.Добавить("ОБНОВИТЬ_ТОВАРЫ_ОЖИДАЕМЫЕ");

		УсловиеОтбора = "= 'RR' AND [Тип Задания] = 'ОБНОВИТЬ_ТОВАРЫ_ОЖИДАЕМЫЕ'";

	ИначеЕсли Назначение = "Производители" Тогда	//	LNK 21.05.2021 08:32:23

		ИменаЗаданийNavision.Добавить("ОБНОВИТЬ_ПРОИЗВОДИТЕЛЯ");

		УсловиеОтбора = "= 'RR' AND [Тип Задания] = 'ОБНОВИТЬ_ПРОИЗВОДИТЕЛЯ'";

	ИначеЕсли Назначение = "Характеристики" Тогда	//	LNK 17.07.2020 07:16:18

		ИменаЗаданийNavision.Добавить("ОБНОВИТЬ_ДОП_ХАРАКТЕРИСТИКИ");
		ИменаЗаданийNavision.Добавить("ОБНОВИТЬ_ТОВАР_ВАРИАНТ");

		УсловиеОтбора = "= 'RR' AND ([Тип Задания] = 'ОБНОВИТЬ_ДОП_ХАРАКТЕРИСТИКИ' OR [Тип Задания] = 'ОБНОВИТЬ_ТОВАР_ВАРИАНТ') AND NOT [ID2] = 'ФОРМАТ'";

	ИначеЕсли Назначение = "ФорматЦенника" Тогда	//	LNK 04.06.2024 06:33:08

	//	Тип задания- ОБНОВИТЬ_ТОВАР_ВАРИАНТ
	//	Код филиала - RR
	//	ID2 - ФОРМАТ
	//	ID4 - 7 (Ценник)
	//	ID1 - Код товара
	//	ID5 - Формат ценника

		ИменаЗаданийNavision.Добавить("ОБНОВИТЬ_ТОВАР_ВАРИАНТ_ФОРМАТ");

		УсловиеОтбора = "= 'RR' AND [Тип Задания] = 'ОБНОВИТЬ_ТОВАР_ВАРИАНТ' AND [ID2] = 'ФОРМАТ' AND NOT [ID5] = ''";

	ИначеЕсли Назначение = "ПеремещениеНаМагазин" Тогда

		РаботаСДокументами   = Истина;
		ИменаЗаданийNavision.Добавить("ДОК_ПЕРЕМЕЩ_ОТПР_В_МАГ");

	//	Заданий по справочникам может быть очень много... нужно их отбросить
		УсловиеОтбора = "= 'RR' AND [Тип Задания] = 'ДОК_ПЕРЕМЕЩ_ОТПР_В_МАГ' AND NOT [Тип Задания] IN ('ОБНОВИТЬ_ТОВАР_ЦЕНА', 'ОБНОВИТЬ_ТОВАР_ЕД_ИЗМ', 'ОБНОВИТЬ_ТОВАР', 'ДОКУМЕНТ_СВЕРИТЬ', 'ОБНОВИТЬ_ТОВАРЫ_ОЖИДАЕМЫЕ', 'ОБНОВИТЬ_ДОП_ХАРАКТЕРИСТИКИ', 'ОБНОВИТЬ_ТОВАР_ВАРИАНТ')";

	ИначеЕсли Назначение = "Документы" Тогда

		РаботаСДокументами   = Истина;
	//	Все остальные задания, выполняемые в отдельности
		ИменаЗаданийNavision.Добавить("");

	//	Заданий по справочникам может быть очень много... нужно их отбросить
		УсловиеОтбора = "= 'RR' AND NOT [Тип Задания] IN ('ДОК_ПЕРЕМЕЩ_ОТПР_В_МАГ', 'ОБНОВИТЬ_ТОВАР_ЦЕНА', 'ОБНОВИТЬ_ТОВАР_ЕД_ИЗМ', 'ОБНОВИТЬ_ТОВАР', 'ДОКУМЕНТ_СВЕРИТЬ', 'ОБНОВИТЬ_ТОВАРЫ_ОЖИДАЕМЫЕ', 'ОБНОВИТЬ_ДОП_ХАРАКТЕРИСТИКИ', 'ОБНОВИТЬ_ТОВАР_ВАРИАНТ', 'ОБНОВИТЬ_ПРОИЗВОДИТЕЛЯ')";

	Иначе

		ВызватьИсключение "Отказано! Неизвестное назначение «" + Назначение + "» задания.";

	КонецЕсли;

//	=======================================================================================

	СсылкиОбработаны = Новый Массив;

	ОчередьNavision  = Новый ПостроительЗапроса;
	ОчередьNavision.ИсточникДанных = Новый ОписаниеИсточникаДанных(ВнешниеИсточники.ПолучитьДанныеОтNavision("ОчередьЗаданий"
		, "IN ('RR', 'NN')", УсловиеОтбора,,, ?(Назначение = "ЦеныНоменклатуры" ИЛИ Назначение = "ЦеныНоменклатурыWEB", "", "TOP 5000")));
	ОчередьNavision.Отбор.Добавить("ТипЗадания");
	ОчередьNavision.Отбор.Добавить("ВремяСледующегоЗапуска");
	ОчередьNavision.Отбор.ВремяСледующегоЗапуска.Установить(НачалоМинуты(ТекущаяДата()));
	ОчередьNavision.Отбор.ВремяСледующегоЗапуска.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
//	отключимся от внешнего источника...
	ОбновитьПовторноИспользуемыеЗначения();

	Для каждого ИмяЗаданияNavision Из ИменаЗаданийNavision Цикл

		Если РаботаСДокументами = Истина Тогда

		//	В этом случае будем работать с заданиями, не описываемыми указанными ключами.

			Если Назначение = "ПеремещениеНаМагазин" Тогда

			//		Какое-то назначение может быть выделено в отдельный процесс.
					ОчередьNavision.Отбор.ТипЗадания.ВидСравнения  = ВидСравнения.ВСписке;

			Иначе	ОчередьNavision.Отбор.ТипЗадания.ВидСравнения  = ВидСравнения.НеВСписке;

			КонецЕсли;

			ОчередьNavision.Отбор.ТипЗадания.Использование = Истина;
			ОчередьNavision.Отбор.ТипЗадания.Значение.ЗагрузитьЗначения(ИменаЗаданийNavision);

			ОчередьNavision.Выполнить();
			ОчередьNavisionВыборка = ОчередьNavision.Результат.Выбрать();

			Пока ОчередьNavisionВыборка.Следующий() Цикл

				Если НЕ ПроверитьСоединениеССерверомФилиала(ОчередьNavisionВыборка) Тогда

					Продолжить;

				КонецЕсли;

				ПараметрыЗадания = Неопределено;

				НачатьТранзакцию();

				Попытка

					Если ОчередьNavisionВыборка.ТипЗадания = "ДОК_ПЕРЕМЕЩ_ОТПР_В_МАГ"
					ИЛИ  ОчередьNavisionВыборка.ТипЗадания = "ДОК_ПЕРЕМЕЩ_УЧТЕНО"
					Тогда

						Суффикс = ВРег(Прав(СокрЛП(ОчередьNavisionВыборка.ID1), 2));

						Если Суффикс = "-Р" ИЛИ Суффикс = "-П" Тогда

							ОчередьОбновитьЗадание(ОчередьNavisionВыборка.ЗаданиеНо,, 1
								, "Отказано. Корректировка создана для NAV и не может быть получена в узле [RR]");

						ИначеЕсли ПеремещениеПолучитьИзNavision(ОчередьNavisionВыборка.ID1, ОчередьNavisionВыборка.ID9, ОчередьNavisionВыборка.ЗаданиеНо, ОчередьNavisionВыборка.ТипЗадания, ПараметрыЗадания, СсылкиОбработаны)
						Тогда

							УстановитьПереданоNavision(ПараметрыЗадания.Ссылка
								, ОбщегоНазначенияРТСервер.ПолучитьМагазиныПоОбъекту(ПараметрыЗадания.Ссылка)
								, Перечисления.ВидыПередачиNavision.ПолученИзNavision
								, Истина
								, ?(ОчередьNavisionВыборка.ТипЗадания = "ДОК_ПЕРЕМЕЩ_УЧТЕНО", Истина, Неопределено));

							Если ОчередьNavisionВыборка.ТипЗадания = "ДОК_ПЕРЕМЕЩ_УЧТЕНО" Тогда

								Запрос = Новый Запрос(
								"ВЫБРАТЬ
								|	ТаблицаДокумента.Ссылка КАК Объект,
								|	ТаблицаДокумента.Магазин КАК Магазин,
								|	ТаблицаДокумента.Магазин.СкладУправляющейСистемы КАК СкладУправляющейСистемы
								|ИЗ
								|	Документ.ПриходныйОрдерНаТовары КАК ТаблицаДокумента
								|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаРегистра
								|		ПО ТаблицаДокумента.Ссылка = ТаблицаРегистра.Объект
								|ГДЕ
								|	ТаблицаДокумента.ДокументОснование = &ДокументСсылка
								|
								|ОБЪЕДИНИТЬ
								|
								|ВЫБРАТЬ
								|	ТаблицаДокумента.Ссылка,
								|	ТаблицаДокумента.Магазин,
								|	ТаблицаДокумента.Магазин.СкладУправляющейСистемы
								|ИЗ
								|	Документ.РасходныйОрдерНаТовары КАК ТаблицаДокумента
								|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаРегистра
								|		ПО ТаблицаДокумента.Ссылка = ТаблицаРегистра.Объект
								|ГДЕ
								|	ТаблицаДокумента.ДокументОснование = &ДокументСсылка"
								);
								Запрос.УстановитьПараметр("ДокументСсылка", ПараметрыЗадания.Ссылка);
								
								Выборка = Запрос.Выполнить().Выбрать();
								
								Пока Выборка.Следующий() Цикл

									МенеджерЗаписи = РегистрыСведений.ОбъектУчтенВNavision.СоздатьМенеджерЗаписи();
									ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);

								//	При записи происходит регистрация в нужные узлы
									МенеджерЗаписи.Прочитать();
									МенеджерЗаписи.УчтеноNavision = Истина;
									МенеджерЗаписи.Записать(Истина);

									ПланыОбмена.ЗарегистрироватьИзменения(ВнешниеИсточникиПовтИсп.СписокУзловNavision(), МенеджерЗаписи.Объект);

									Если Выборка.СкладУправляющейСистемы = Ложь Тогда

										ПараметрыСверки = Новый Структура(
											"Магазины, РезультатСверки, ВидДокумента, СообщитьNavision, IDN"
											, Выборка.Магазин
											, Перечисления.РезультатСверкиNavision.НеПроверялся
											, "ПЕРЕМЕЩ"
											, Истина
											, ОчередьNavisionВыборка.ID1
										);

										ВнешниеИсточникиСверка.НазначитьДокументДляСверки(ПараметрыЗадания.Ссылка
											, ПараметрыСверки
											, "Сверка после учёта из Navision"
										);

									КонецЕсли;

								КонецЦикла;

							КонецЕсли;

							ОчередьОбновитьЗадание(ОчередьNavisionВыборка.ЗаданиеНо,, 1
								, ?(ОчередьNavisionВыборка.ТипЗадания = "ДОК_ПЕРЕМЕЩ_УЧТЕНО"
									, "Документ приведен в соответствие с учтённым в Navision"
									, "Перемещение создано (или обновлено) и проведено в 1С:Рознице"));

						Иначе

							Если ПараметрыЗадания.Свойство("ДанныеОшибки") Тогда

								ТекстПояснения   = ПараметрыЗадания.ДанныеОшибки.Заголовок + " " + ПараметрыЗадания.ДанныеОшибки.Сообщение;
								ВыполнитьЗадание = ПараметрыЗадания.ДанныеОшибки.Выполнено;

							Иначе

								ТекстПояснения   = "Не удалось получить данные (ошибка не указана)";
								ВыполнитьЗадание = 0;

							КонецЕсли;

							ОчередьОбновитьЗадание(ОчередьNavisionВыборка.ЗаданиеНо,, ВыполнитьЗадание, ТекстПояснения, Отладка);

						КонецЕсли;

					ИначеЕсли ОчередьNavisionВыборка.ТипЗадания = "ДОК_ПЕРЕМЕЩ_ОТМЕНИТЬ" Тогда

						Запрос = Новый Запрос(
						"ВЫБРАТЬ
						|	ТаблицаДокумента.Ссылка КАК Объект,
						|	МАКСИМУМ(ВЫБОР
						|			КОГДА ТаблицаУчтено.Магазин ЕСТЬ NULL 
						|				ТОГДА ЛОЖЬ
						|			ИНАЧЕ ИСТИНА
						|		КОНЕЦ) КАК Отправлен
						|ИЗ
						|	Документ.ПеремещениеТоваров КАК ТаблицаДокумента
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаУчтено
						|		ПО ТаблицаДокумента.Ссылка = ТаблицаУчтено.Объект
						|			И (ТаблицаУчтено.Объект ССЫЛКА Документ.ПеремещениеТоваров)
						|ГДЕ
						|	ТаблицаДокумента.IDN = &IDN
						|	И НЕ ТаблицаДокумента.ПометкаУдаления
						|
						|СГРУППИРОВАТЬ ПО
						|	ТаблицаДокумента.Ссылка"
						);
						Запрос.УстановитьПараметр("IDN", ОчередьNavisionВыборка.ID1);

						Результат = Запрос.Выполнить();

						ЗаданиеВыполнено = Результат.Пустой();
						ОтменаВыполнена  = ЗаданиеВыполнено;

						Если НЕ ЗаданиеВыполнено Тогда

							ОбъектВыборка = Результат.Выбрать();

							Если ОбъектВыборка.Следующий() Тогда

								Если НЕ ОбъектВыборка.Отправлен Тогда

								//	По какой-то причине объект не имеет записей в регистре... нужно добавить,
								//	так как эти записи являются носителями взаимоотношений с Navision.
									УстановитьПереданоNavision(ОбъектВыборка.Объект
										, ОбщегоНазначенияРТСервер.ПолучитьМагазиныПоОбъекту(ОбъектВыборка.Объект)
										, Перечисления.ВидыПередачиNavision.ПереданВNavision);

								КонецЕсли;

								Запрос = Новый Запрос(
								"ВЫБРАТЬ
								|	ТаблицаУчтен.Объект,
								|	ТаблицаУчтен.Магазин,
								|	ТаблицаУчтен.ОтменаТребуется,
								|	ТаблицаУчтен.ОтменаАкцептована
								|ИЗ
								|	РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаУчтен
								|ГДЕ
								|	ТаблицаУчтен.Объект ССЫЛКА Документ.ПеремещениеТоваров
								|			И ТаблицаУчтен.Объект = &Объект"
								);
								Запрос.УстановитьПараметр("Объект", ОбъектВыборка.Объект);

								УчтенВыборка = Запрос.Выполнить().Выбрать();

								Пока УчтенВыборка.Следующий() Цикл

									Если НЕ УчтенВыборка.ОтменаТребуется Тогда

									//	Флаг отмены еще не установлен! Нужно установить его...
									//	да и всё, собственно...
										МенеджерЗаписи = РегистрыСведений.ОбъектУчтенВNavision.СоздатьМенеджерЗаписи();
										ЗаполнитьЗначенияСвойств(МенеджерЗаписи, УчтенВыборка);
										МенеджерЗаписи.Прочитать();
										МенеджерЗаписи.ОтменаТребуется = Истина;
										МенеджерЗаписи.Записать(Истина);

									Иначе


									КонецЕсли;

								КонецЦикла;

							КонецЕсли;

						КонецЕсли;

						Если ЗаданиеВыполнено Тогда

							ОчередьОбновитьЗадание(ОчередьNavisionВыборка.ЗаданиеНо,, 1
								, ?(ОтменаВыполнена = Истина
									, "Документ помечен к удалению по распоряжению из Navision"
									, "Документ в работе и не может быть отменён!"));

						КонецЕсли;

					ИначеЕсли ОчередьNavisionВыборка.ТипЗадания = "ДОК_ПЕРЕМЕЩ_ТОВАР_ОФОРМЛЕН" Тогда

					//	Судя по всему, это какая-то ошибка. По идее, такую команду даёт Розница, когда подтверждает поступление/отправку
						Остановка = 1;

					ИначеЕсли ОчередьNavisionВыборка.ТипЗадания = "ДОК_ПОКУПКА" Тогда

					//	опять же, ошибка. Эта команда при "прямой" закупке на магазин оформляется в Рознице.
						Остановка = 1;

					ИначеЕсли ОчередьNavisionВыборка.ТипЗадания = "WEB_ВОЗВРАТ_СТАТУС" Тогда
						
						ЗаданиеВыполнено = Ложь;
						
						ТипСтатуса = ОчередьNavisionВыборка.ID2;
						Примечание = ОчередьNavisionВыборка.Примечание;
						
						Если ТипСтатуса = "ОШИБКА" Тогда
							
							ТекстСообщения = "ОШИБКА!!! " + Примечание;

							Запрос = Новый Запрос;
							Запрос.Текст =
								"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
								|	ВозвратИнтернетЗаказаТовары.Ссылка
								|ИЗ
								|	Документ.ВозвратИнтернетЗаказа.Товары КАК ВозвратИнтернетЗаказаТовары
								|ГДЕ
								|	ВозвратИнтернетЗаказаТовары.НомерВозвратаNAV = &НомерВозвратаNAV";
							
							Запрос.УстановитьПараметр("НомерВозвратаNAV", ОчередьNavisionВыборка.ID1);
							
							РезультатЗапроса = Запрос.Выполнить();
							
							Выборка = РезультатЗапроса.Выбрать();
							
							Если Выборка.Следующий() Тогда

								СсылкаНаВозврат = Выборка.Ссылка;

								СтруктураКомментария = РегистрыСведений.КомментарийПоСтрокам.СтруктураКомментария();
								СтруктураКомментария.КлючСвязи = 0;
								СтруктураКомментария.Комментарий = ТекстСообщения;
								СтруктураКомментария.Автор = ПараметрыСеанса.ТекущийПользователь;
								СтруктураКомментария.Документ = СсылкаНаВозврат;
								СтруктураКомментария.Дата = ТекущаяДатаСеанса();
								РегистрыСведений.КомментарийПоСтрокам.ЗаписьКомментария(СтруктураКомментария);
								
								ВозвратОбъект = СсылкаНаВозврат.ПолучитьОбъект();
								Для Каждого СтрокаТоваров Из ВозвратОбъект.Товары Цикл
									
									Если СтрокаТоваров.НомерВозвратаNAV = ОчередьNavisionВыборка.ID1 Тогда
										
										СтрокаТоваров.ОшибкаВозврата = Истина;
										СтрокаТоваров.Возвращена = Ложь;
										
									КонецЕсли;
									
								КонецЦикла;
								ВозвратОбъект.Записать();

								ЗаданиеВыполнено = Истина;

							КонецЕсли;

						ИначеЕсли ТипСтатуса = "ОФОРМЛЕН" Тогда

							Запрос = Новый Запрос;
							Запрос.Текст =
								"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
								|	ВозвратИнтернетЗаказаТовары.Ссылка
								|ИЗ
								|	Документ.ВозвратИнтернетЗаказа.Товары КАК ВозвратИнтернетЗаказаТовары
								|ГДЕ
								|	ВозвратИнтернетЗаказаТовары.НомерВозвратаNAV = &НомерВозвратаNAV";
							
							Запрос.УстановитьПараметр("НомерВозвратаNAV", ОчередьNavisionВыборка.ID1);
							
							РезультатЗапроса = Запрос.Выполнить();
							
							Выборка = РезультатЗапроса.Выбрать();
							
							Если Выборка.Следующий() Тогда

								ВозвратОбъект = Выборка.Ссылка.ПолучитьОбъект();
								Для Каждого СтрокаТоваров Из ВозвратОбъект.Товары Цикл
									
									Если СтрокаТоваров.НомерВозвратаNAV = ОчередьNavisionВыборка.ID1 Тогда
										
										СтрокаТоваров.ОшибкаВозврата = Ложь;
										СтрокаТоваров.Возвращена = Истина;
										
									КонецЕсли;
									
								КонецЦикла;
								ВозвратОбъект.Записать();

								ЗаданиеВыполнено = Истина;

							КонецЕсли;

						КонецЕсли;
						
						ОчередьОбновитьЗадание(ОчередьNavisionВыборка.ЗаданиеНо,
								,
								?(ЗаданиеВыполнено, 1, 0),
								?(ЗаданиеВыполнено, Примечание, "Нет такого возврата!!!"));
												
					ИначеЕсли ОчередьNavisionВыборка.ТипЗадания = "WEB_СТАТУС" Тогда

					//	Получение измененного запроса доступности со склада через Navision.
					//	Остановка = 1;
						
						ЗаданиеВыполнено = Ложь;
						
						НомерДокументаЗапросДоступности = СтрЗаменить(ОчередьNavisionВыборка.ID1, "CWZ_", "");
						
						Запрос = Новый Запрос;
						Запрос.Текст =
							"ВЫБРАТЬ
							|	ТаблицаЗД.Ссылка КАК Ссылка,
							|	ТаблицаЗД.СтатусЗапроса КАК СтатусЗапроса,
							|	ЕСТЬNULL(ТаблицаАтрибутов.ОправленоВNavision,
							|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросаДоступностиВNavision.ПустаяСсылка)) КАК ОтправлятьВNavision,
							|	ТаблицаЗД.ДокументОснование КАК СсылкаНаЗаказ
							|ИЗ
							|	Документ.ЗапросДоступностиТоваров КАК ТаблицаЗД
							|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлючевыеАтрибутыЗапросовДоступности.СрезПоследних КАК ТаблицаАтрибутов
							|		ПО ТаблицаАтрибутов.ЗапросДоступности = ТаблицаЗД.Ссылка
							|ГДЕ
							|	ТаблицаЗД.Номер = &Номер
							|
							|УПОРЯДОЧИТЬ ПО
							|	ТаблицаЗД.Дата УБЫВ";
						
						Запрос.УстановитьПараметр("Номер", НомерДокументаЗапросДоступности);
						
						РезультатЗапроса = Запрос.Выполнить();
						
						ВыборкаЗД = РезультатЗапроса.Выбрать();
						
						Если ВыборкаЗД.Следующий() Тогда
							
							ДанныеСостояния = ЗаказыПокупателейСервер.ПолучитьСледующийСтатусЗапросаДоступностиТоваров(ВыборкаЗД.Ссылка);
							
							Если ОчередьNavisionВыборка.ID2 = "ОТМЕНЕН" Тогда
								
								Если ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Отменён Тогда
								
									ЗапросДоступностиОбъект = ВыборкаЗД.Ссылка.ПолучитьОбъект();
									ЗапросДоступностиОбъект.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Отменён;
									ЗапросДоступностиОбъект.Записать();
									ЗаданиеВыполнено = Истина;
									
								ИначеЕсли ВыборкаЗД.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Отменён Тогда
									 
									 ЗаданиеВыполнено = Истина;
									 
								Иначе
									
									ЗаданиеВыполнено = Ложь;
									
								КонецЕсли;

								ОчередьОбновитьЗадание(ОчередьNavisionВыборка.ЗаданиеНо,
									,
									?(ЗаданиеВыполнено, 1, 0),
									?(ЗаданиеВыполнено, "Заказ отменен", "Заказ не переведён для отмены"));
							
							ИначеЕсли ОчередьNavisionВыборка.ID2 = "ОТГРУЖЕН" Тогда
								
								ТекстЗапроса =
									"SELECT	[Документ Но_],
									|		[Тип Документа],
									|		[Код Клиента] AS КодКлиента,
									|		[Телефон Клиента] AS НомерТелефона
									|FROM
									|	[Euro2009].dbo.[Европродукт 2009$Exch RR HEAD]
									|WHERE
									|	([Документ Но_] = '#ID1#') AND ([Тип Документа] = 'WEB_СТАТУС') AND ([Телефон Клиента] <> '')";
								
								ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ID1#", Формат(ОчередьNavisionВыборка.ID1, "ЧДЦ=; ЧН=0; ЧГ="));
								
								ТекстЗапроса = ВнешниеИсточники.УточнитьТекстЗапроса(ТекстЗапроса, Перечисления.ВнешниеИсточники.Navision);

								ТаблицаNavision = ВнешниеИсточники.ПолучитьДанныеОтNavision(ТекстЗапроса,,, Истина);

								Для Каждого СтрокаДокументаNavision Из ТаблицаNavision Цикл
									Запрос = Новый Запрос;
									Запрос.Текст =
										"ВЫБРАТЬ РАЗРЕШЕННЫЕ
										|	ТаблицаКонтакты.Ссылка,
										|	ТаблицаКонтакты.Ссылка.IDN
										|ИЗ
										|	Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтакты
										|ГДЕ
										|	ТаблицаКонтакты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
										|	И ТаблицаКонтакты.НомерТелефона = &НомерТелефона";
									
									Запрос.УстановитьПараметр("НомерТелефона", СтрЗаменить(СтрокаДокументаNavision.НомерТелефона, "+", ""));
									
									РезультатЗапроса = Запрос.Выполнить();
									
									Выборка= РезультатЗапроса.Выбрать();
									
									Если Выборка.Следующий() Тогда
										
										Если Не СокрЛП(Выборка.IDN) = СокрЛП(СтрокаДокументаNavision.КодКлиента) Тогда
											
											КонтрагентОбъект = Выборка.Ссылка.ПолучитьОбъект();
											КонтрагентОбъект.IDN = СокрЛП(СтрокаДокументаNavision.КодКлиента);
											КонтрагентОбъект.Записать();
											
										КонецЕсли;

									КонецЕсли;
									
								КонецЦикла;

								ЗапросДоступностиОбъект = ВыборкаЗД.Ссылка.ПолучитьОбъект();
								
								Если ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе
									И ТипЗнч(ЗапросДоступностиОбъект.МагазинОтправитель) = Тип("СправочникСсылка.Склады") Тогда
									
									ЗапросДоступностиОбъект.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе;
									ЗапросДоступностиОбъект.Записать();
									
								ИначеЕсли ДанныеСостояния = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Согласован
									И ТипЗнч(ЗапросДоступностиОбъект.МагазинОтправитель) = Тип("СправочникСсылка.Склады") Тогда
								
									ТекстЗапроса =
										"SELECT 
										|	[Документ Но_],
										|	[Тип Документа],
										|	[Товар Но_] AS IDN,
										|	[Кол-во баз_]
										|FROM
										|	[Euro2009].dbo.[Европродукт 2009$Exch RR LINE]
										|WHERE
										|	([Документ Но_] = '#ID1#') AND ([Тип Документа] = 'WEB_СТАТУС')";
									ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ID1#", Формат(ОчередьNavisionВыборка.ID1, "ЧДЦ=; ЧН=0; ЧГ="));
									
									ТекстЗапроса = ВнешниеИсточники.УточнитьТекстЗапроса(ТекстЗапроса, Перечисления.ВнешниеИсточники.Navision);

									ТаблицаNavision = ВнешниеИсточники.ПолучитьДанныеОтNavision(ТекстЗапроса,,, Истина);

									ЗаписатьДокумент = Истина;
	
									Для Каждого СтрокаДокументаNavision Из ТаблицаNavision Цикл
										
										ТоварВДокументеNavision = Справочники.Номенклатура.НайтиПоРеквизиту("IDN", СокрЛП(СтрокаДокументаNavision.IDN));
										
										ПараметрыОтбораТовара = Новый Структура;
										ПараметрыОтбораТовара.Вставить("Номенклатура", ТоварВДокументеNavision);
										НайденныеСтроки = ЗапросДоступностиОбъект.Товары.НайтиСтроки(ПараметрыОтбораТовара);
										Если НайденныеСтроки.Количество() = 0 Тогда
											
											ЗаписатьДокумент = Ложь;
											Прервать;
											
										Иначе
											
											НайденныеСтроки[0].Количество = СтрокаДокументаNavision.КОЛ_ВОБАЗ_;
											
										КонецЕсли;

									КонецЦикла;
									
									Если ЗаписатьДокумент Тогда
										
										ЗапросДоступностиОбъект.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Согласован;
										ЗапросДоступностиОбъект.Записать();
										ЗаданиеВыполнено = Истина;

									КонецЕсли;

								ИначеЕсли ВыборкаЗД.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Согласован
									И ТипЗнч(ЗапросДоступностиОбъект.МагазинОтправитель) = Тип("СправочникСсылка.Склады") Тогда
									
									ЗаданиеВыполнено = Истина;
									
								КонецЕсли;

								Если ЗаданиеВыполнено
									Или ВыборкаЗД.ОтправлятьВNavision = Перечисления.СтатусыЗапросаДоступностиВNavision.ГотовКЗакрытиюВNavision
								 	Или ВыборкаЗД.ОтправлятьВNavision = Перечисления.СтатусыЗапросаДоступностиВNavision.ЗакрытВNavision Тогда

									ЗаписьВРегистр = РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ИнициализацияСтрок();
									ЗаписьВРегистр.ДокументДляЗаписи = ЗапросДоступностиОбъект.Ссылка;
									ЗаписьВРегистр.СогласованоВNavision = Истина;
									ЗаписьВРегистр.Товары = ЗапросДоступностиОбъект.Товары;
									РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ЗаписьВРегистр(ЗаписьВРегистр);

									СтруктураАтрибутов = РегистрыСведений.КлючевыеАтрибутыЗапросовДоступности.ИнициализацияСтруктурыЗаписиРегистра(ВыборкаЗД.Ссылка);
									СтруктураАтрибутов.ОправленоВNavision = Перечисления.СтатусыЗапросаДоступностиВNavision.ЗакрытВNavision;
									РегистрыСведений.КлючевыеАтрибутыЗапросовДоступности.ЗаписьКлючевыхАтребутовЗапросаДоступности(СтруктураАтрибутов);
									
									Если ВыборкаЗД.ОтправлятьВNavision = Перечисления.СтатусыЗапросаДоступностиВNavision.ГотовКЗакрытиюВNavision
								 		Или ВыборкаЗД.ОтправлятьВNavision = Перечисления.СтатусыЗапросаДоступностиВNavision.ЗакрытВNavision Тогда
										
										ЗаданиеВыполнено = Истина;
										
									КонецЕсли;

								КонецЕсли;

								ОчередьОбновитьЗадание(ОчередьNavisionВыборка.ЗаданиеНо,
									,
									?(ЗаданиеВыполнено, 1, 0),
									?(ЗаданиеВыполнено, "Заказ согласован", "Заказ не переведён для согласования"));
							
							КонецЕсли;
						
						КонецЕсли;
						
					КонецЕсли;

					Если ТранзакцияАктивна() Тогда

						ЗафиксироватьТранзакцию();

					Иначе

						а = 22;	//	отладочная остановка

					КонецЕсли;

				Исключение

					Если ТранзакцияАктивна() Тогда

						ОтменитьТранзакцию();

					КонецЕсли;

					ТекстОшибки = ОписаниеОшибки();
					Примечание	= ?(СтрНайти(ТекстОшибки, ":") > 0, СокрЛП(Сред(ТекстОшибки, СтрНайти(ТекстОшибки, ":") + 1)), ТекстОшибки);

					Если Найти(ТекстОшибки, "Операция не допускается, если объект закрыт") > 0 Тогда

						ОчередьОбновитьЗадание(ОчередьNavisionВыборка.ЗаданиеНо,, 1
							, "Чтение невозможно: " + Примечание, Отладка);

					Иначе

						ОчередьОбновитьЗадание(ОчередьNavisionВыборка.ЗаданиеНо,, 0
							, Примечание, Отладка);

						ТекстОшибки = "TYPE=" + ОчередьNavisionВыборка.ТипЗадания + "; ID1=" + ОчередьNavisionВыборка.ID1
									+ Символы.ПС + ТекстОшибки;

						ЗаписьЖурналаРегистрации("Navision.Обработка очереди", УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
						Если Не ПараметрыЗадания = Неопределено Тогда
							ПараметрыЗадания.Вставить(
								"ДанныеОшибки"
								, Новый Структура(
									"Заголовок, Сообщение, Выполнено"
									, "WHDOC_MOVE_HEAD [" + ОчередьNavisionВыборка.ID1 + "]"
									, ТекстОшибки
									, 0));

						КонецЕсли;
					КонецЕсли;

				КонецПопытки;

			КонецЦикла;

		Иначе

		//	LNK 05.06.2024 07:51:58
			ЗаданиеВнешнее = СтрЗаменить(ИмяЗаданияNavision	, "_WEB"	, "");
			ЗаданиеВнешнее = СтрЗаменить(ЗаданиеВнешнее		, "_ФОРМАТ"	, "");

			ОчередьNavision.Отбор.ТипЗадания.ВидСравнения = ВидСравнения.Равно;
			ОчередьNavision.Отбор.ТипЗадания.Установить(ЗаданиеВнешнее);

			ОчередьNavision.Выполнить();

			Если ИмяЗаданияNavision = "ОБНОВИТЬ_ТОВАР_ЦЕНА" ИЛИ ИмяЗаданияNavision = "ОБНОВИТЬ_ТОВАР_ЦЕНА_WEB" Тогда

			//	1-й этап получения цен.
				ВыполнитьЗагрузкуЦеныТребующиеОбновления(ОчередьNavision);

				Если ИмяЗаданияNavision = "ОБНОВИТЬ_ТОВАР_ЦЕНА" Тогда

					ВыполнитьУстановкуТребуемыхЦенНоменклатуры(
						?(Назначение = "ЦеныНоменклатурыОптовые", '20160101', НачалоДня(ТекущаяДатаСеанса())),
						?(Назначение = "ЦеныНоменклатурыОптовые", 1, 0)
					);

				ИначеЕсли ИмяЗаданияNavision = "ОБНОВИТЬ_ТОВАР_ЦЕНА_WEB" Тогда

				//	2-й этап. Обновление товаров и установка плановых цен товаров.
					ВыполнитьУстановкуТребуемыхЦенНоменклатуры(НачалоДня(ТекущаяДатаСеанса()), 2);

				КонецЕсли;

			ИначеЕсли ИмяЗаданияNavision = "ДОКУМЕНТ_СВЕРИТЬ" Тогда

				НазначитьДокументыДляСверкиNavision(ОчередьNavision);

			ИначеЕсли ИмяЗаданияNavision = "ОБНОВИТЬ_ТОВАРЫ_ОЖИДАЕМЫЕ" Тогда

				УстановитьТоварыОжидаемые(ОчередьNavision);

			ИначеЕсли НЕ ОчередьNavision.Результат.Пустой() Тогда

				НомераЗаданийНеВыполнено = Новый Соответствие;

				Попытка

					Если ИмяЗаданияNavision = "ОБНОВИТЬ_ТОВАР_ЕД_ИЗМ" ИЛИ ИмяЗаданияNavision = "ОБНОВИТЬ_ТОВАР"	Тогда

						НомерСтроки  = 0;
						ТаблицаКодов = ВнешниеИсточники.ПолучитьПредварительнуюТаблицуТовары(Неопределено);

						ОчередьNavisionВыборка = ОчередьNavision.Результат.Выбрать();

						Пока ОчередьNavisionВыборка.Следующий() Цикл

							СтрокаТаблицы = ТаблицаКодов.Добавить();

							НомерСтроки = НомерСтроки + 1;
							СтрокаТаблицы.НомерСтроки = НомерСтроки;
							СтрокаТаблицы.IDN         = ОчередьNavisionВыборка.ID1;

							Если ОчередьNavisionВыборка.ID2 = "1" Тогда

								СтрокаТаблицы.Force = Истина;

							КонецЕсли;

						КонецЦикла;

					//	Обновим существующие товарные позиции или создадим новые, если так случилось.
						ВнешниеИсточники.УстановитьНоменклатуруВТаблицеПодготовки(ТаблицаКодов, Истина, СсылкиОбработаны);

					ИначеЕсли ИмяЗаданияNavision = "ОБНОВИТЬ_ДОП_ХАРАКТЕРИСТИКИ" ИЛИ ИмяЗаданияNavision = "ОБНОВИТЬ_ТОВАР_ВАРИАНТ" Тогда

						ОбновитьКлассификаторХарактеристикЦенников(ОчередьNavision, НомераЗаданийНеВыполнено);

					ИначеЕсли ИмяЗаданияNavision = "ОБНОВИТЬ_ТОВАР_ВАРИАНТ_ФОРМАТ" Тогда

						УстановитьФорматЦенников(ОчередьNavision, НомераЗаданийНеВыполнено, Отладка);	//	LNK 04.06.2024 06:36:10

					ИначеЕсли ИмяЗаданияNavision = "ОБНОВИТЬ_ПРОИЗВОДИТЕЛЯ" Тогда

						ОбновитьКонтрагентаПроизводителя(ОчередьNavision, НомераЗаданийНеВыполнено);

					Иначе

					//	Какая-то неизвестная задача.. оставим всё так, как есть!
						ВыборкаNavision = ОчередьNavision.Результат.Выбрать();

						Пока ВыборкаNavision.Следующий() Цикл

							НомераЗаданийНеВыполнено.Вставить(ВыборкаNavision.ЗаданиеНо, Истина);

						КонецЦикла;

					КонецЕсли;

					ВыборкаNavision = ОчередьNavision.Результат.Выбрать();

					Пока ВыборкаNavision.Следующий() Цикл

						Если НомераЗаданийНеВыполнено.Получить(ВыборкаNavision.ЗаданиеНо) = Неопределено Тогда

						//	А вот отметку о выполнении нужно всё равно устанавливать пошагово.
							ОчередьОбновитьЗадание(ВыборкаNavision.ЗаданиеНо,, 1,, Отладка);

						КонецЕсли;

					КонецЦикла;
				
				Исключение

					ТекстОшибки = ОписаниеОшибки();

					ЗаписьЖурналаРегистрации("Navision.Обработка очереди", УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

				КонецПопытки;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ВыгрузкиНетрадиционные

//	LNK 27.07.2021 07:09:48
Процедура ВыгрузитьСписокОбъектов(СписокОбъектов, СверкаДокументов = Ложь, ТолькоТаблицаБонусов = Ложь, Отладка = Ложь)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

//	"СписокОбъектов" - массив ссылок

	ПараметрыВыгрузки = ПолучитьПараметрыВыгрузки(ПланыОбмена.ОбменNavisionРозница.ПустаяСсылка(), СверкаДокументов, Истина, Отладка);
	ПараметрыВыгрузки.Вставить("ТолькоТаблицаБонусов", ТолькоТаблицаБонусов);

	Для каждого СсылкаНаОбъект Из СписокОбъектов Цикл

		ОбъектДанных = СсылкаНаОбъект.ПолучитьОбъект();

		Если ОбъектДанных = Неопределено Тогда

			Продолжить;

		КонецЕсли;

		ВыполнитьВыгрузкуДанныхВNavision(ОбъектДанных, Неопределено, ПараметрыВыгрузки);

	КонецЦикла;

КонецПроцедуры

//	LNK 30.11.2021 12:55:39
Процедура ВыгрузитьТаблицуБонусовMagento(ДатаВыгрузки, СверкаДокументов = Ложь, Коррекция = Ложь, Отладка = Ложь)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ОбъектДанных = Новый Структура(
		"Команда, Номер, Дата, ТаблицаЗаказов, УдалятьРегистрацию"
		, "ОБЩ.ПРОД.БОНУС.MAGENTO"
		, "MAGENTO" + ?(Коррекция, "_K", "") + "-" + Формат(ДатаВыгрузки, "ДФ=yyyyMMdd")
		, ДатаВыгрузки
	//	ВНИМАНИЕ: "СверкаДокументов = Истина" выгружает ВСЕ заказы на дату, без учёта "РегистрацияОбъектовMagento.Выгружен"
		, ПолучитьТаблицуЗаказовMagento(ДатаВыгрузки, СверкаДокументов, Коррекция)
		, Ложь
	);
//	теперь дополним "имитацией" под реальный документ..
	ОбъектДанных.Вставить("IDN", ОбъектДанных.Номер);
	ОбъектДанных.Вставить("Проведен"		, Истина);
	ОбъектДанных.Вставить("ПометкаУдаления"	, Ложь);
	ОбъектДанных.Вставить("ВерсияДанных"	, ОбъектДанных.Номер);

	Если НЕ ОбъектДанных.ТаблицаЗаказов.Количество() = 0 Тогда

		ПараметрыВыгрузки = ПолучитьПараметрыВыгрузки(ПланыОбмена.ОбменNavisionРозница.ПустаяСсылка(), СверкаДокументов, Истина, Отладка);

		ВыполнитьВыгрузкуДанныхВNavision(ОбъектДанных, Неопределено, ПараметрыВыгрузки);

		Если НЕ Отладка = Истина
		И	 НЕ СверкаДокументов = Истина
		И		ОбъектДанных.УдалятьРегистрацию = Истина Тогда

			Для каждого СтрокаТаблицы Из ОбъектДанных.ТаблицаЗаказов Цикл

				МенеджерЗаписи = РегистрыСведений.РегистрацияОбъектовMagento.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Объект = СтрокаТаблицы.Объект;
				МенеджерЗаписи.ТипРегистрации = Перечисления.ТипыРегистрацииMagento.БонусныеНакопления;

				МенеджерЗаписи.Прочитать();

				Если МенеджерЗаписи.Выбран() Тогда

					МенеджерЗаписи.Выгружен = Истина;
					МенеджерЗаписи.ДатаВыгружен = ТекущаяДата();

					МенеджерЗаписи.Записать();

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТаблицуЗаказовMagento(ДатаВыгрузки, СверкаДокументов = Ложь, Коррекция = Ложь)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаРегистраций.Объект КАК Объект,
	|	ТаблицаРегистраций.ДатаНачисления КАК ДатаНачисления
	|ИЗ
	|	РегистрСведений.РегистрацияОбъектовMagento КАК ТаблицаРегистраций
	|ГДЕ
	|	ТаблицаРегистраций.ТипРегистрации = ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацииMagento.БонусныеНакопления)
	|	И ВЫБОР
	|			КОГДА &СверкаДокументов = ИСТИНА
	|				ТОГДА НЕ ТаблицаРегистраций.Коррекция = ИСТИНА
	|						И (НАЧАЛОПЕРИОДА(ТаблицаРегистраций.ДатаНачисления, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаВыгрузки, ДЕНЬ)
	|							ИЛИ НАЧАЛОПЕРИОДА(ТаблицаРегистраций.ДатаНачисления, ДЕНЬ) <= НАЧАЛОПЕРИОДА(&ДатаВыгрузки, ДЕНЬ)
	|								И НЕ ТаблицаРегистраций.Выгружен)
	|			КОГДА &Коррекция = ИСТИНА
	|				ТОГДА НЕ ТаблицаРегистраций.Выгружен
	|						И ТаблицаРегистраций.Коррекция = ИСТИНА
	|			ИНАЧЕ НЕ ТаблицаРегистраций.Выгружен
	|					И НЕ ТаблицаРегистраций.Коррекция = ИСТИНА
	|					И (НАЧАЛОПЕРИОДА(ТаблицаРегистраций.ДатаНачисления, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаВыгрузки, ДЕНЬ)
	|						ИЛИ НАЧАЛОПЕРИОДА(ТаблицаРегистраций.ДатаНачисления, ДЕНЬ) <= НАЧАЛОПЕРИОДА(&ДатаВыгрузки, ДЕНЬ))
	|		КОНЕЦ"
	);
	Запрос.УстановитьПараметр("ДатаВыгрузки"	, ДатаВыгрузки);
	Запрос.УстановитьПараметр("СверкаДокументов", СверкаДокументов);
	Запрос.УстановитьПараметр("Коррекция"		, Коррекция);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

#Область ВыгрузкаДанных_в_Navision

Процедура СобытияИсходящиеЗаданияNavision(Назначение, Отладка, СверкаДокументов)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка КАК Узел,
	|	ТаблицаУзлы.НомерОтправленного КАК НомерОтправленного,
	|	ТаблицаУзлы.Код КАК Код
	|ИЗ
	|	ПланОбмена.ОбменNavisionРозница КАК ТаблицаУзлы
	|ГДЕ
	|	НЕ(ТаблицаУзлы.ЭтотУзел
	|				ИЛИ ТаблицаУзлы.ПометкаУдаления)
	|	И ТаблицаУзлы.СверкаДокументов = &СверкаДокументов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код"
	);
	Запрос.УстановитьПараметр("СверкаДокументов", СверкаДокументов);

	УзлыВыборка = Запрос.Выполнить().Выбрать();

	Пока УзлыВыборка.Следующий() Цикл

		КлассификаторСостава = ВнешниеИсточникиПовтИсп.ПолучитьКлассификаторСоставаПланаОбмена(УзлыВыборка.Узел, СверкаДокументов);

		ПараметрыВыгрузки = ПолучитьПараметрыВыгрузки(УзлыВыборка.Узел, СверкаДокументов, Ложь, Отладка);

		УзелОбъект = УзлыВыборка.Узел.ПолучитьОбъект();
		УзелОбъект.Заблокировать();

		КоличествоДанных = 0;

		Для каждого ИмяКласса Из КлассификаторСостава.Классы Цикл

			Если ИмяКласса = "КлючевыеАтрибутыДокументов" Тогда	//	LNK 05.12.2020 10:16:18

				ФильтрВыборки = ОбменДаннымиСерверПакеты.ПолучитьПакетКлючевыеАтрибутыДокументов(УзлыВыборка.Узел, ИмяКласса);

			Иначе

				ФильтрВыборки = КлассификаторСостава.Структура[ИмяКласса];

			КонецЕсли;

			Если ФильтрВыборки.Количество() = 0 Тогда

				Продолжить;

			КонецЕсли;

			ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзлыВыборка.Узел
														, УзлыВыборка.НомерОтправленного + 1
														, ФильтрВыборки);

			Пока ВыборкаИзменений.Следующий() Цикл

				ОбъектДанных = ВыборкаИзменений.Получить();

				Если ОбъектДанных = Неопределено Тогда

				//	Зарегистрированный в обмене объект мог ещё не приехать из периферии ... поэтому ничего и не делаем.
					Продолжить;

				КонецЕсли;

				Если ТипЗнч(ОбъектДанных) = Тип("РегистрСведенийНаборЗаписей.КлючевыеАтрибутыДокументов") Тогда

					Продолжить;	//	отладочная

					Если ОбъектДанных.Количество() = 0
					ИЛИ НЕ ОбменДаннымиПовтИсп.ПланОбменаСодержитОбъект("ОбменNavisionРозница", ОбъектДанных.Отбор.Объект.Значение.Метаданные().ПолноеИмя())	Тогда

						Продолжить;

					КонецЕсли;

				//ИначеЕсли Отладка И СверкаДокументов Тогда

				//	Продолжить;	// НЕ ЗАБЫТЬ УДАЛИТЬ!!!

				КонецЕсли;

				КоличествоДанных = КоличествоДанных + 1;
				
				ПараметрыВыгрузки.ОбновлениеИнтернетЗаказов = Ложь;
				
				Если ТипЗнч(ОбъектДанных) = Тип("ДокументОбъект.ЗапросДоступностиТоваров") Тогда
//					
//					СтатусОтправкиЗапроса = РегистрыСведений.КлючевыеАтрибутыЗапросовДоступности.ПолучитьСтатусЗаписиВNavision(ОбъектДанных.Ссылка);
//					
//					Если (СтатусОтправкиЗапроса = Перечисления.СтатусыЗапросаДоступностиВNavision.ПустаяСсылка()
//							Или СтатусОтправкиЗапроса = Перечисления.СтатусыЗапросаДоступностиВNavision.ПередатьВNavision) Тогда
//
						ПараметрыВыгрузки.ОбновлениеИнтернетЗаказов = Истина;
						
//					КонецЕсли;

				КонецЕсли;

				ВыполнитьВыгрузкуДанныхВNavision(ОбъектДанных, УзлыВыборка.Узел, ПараметрыВыгрузки);

			КонецЦикла;

		КонецЦикла;

		Если НЕ КоличествоДанных = 0 Тогда

			УзелОбъект.НомерОтправленного = УзелОбъект.НомерОтправленного + 1;
			УзелОбъект.Записать();

		КонецЕсли;

		УзелОбъект.Разблокировать();

	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьВыгрузкуДанныхВNavision(ОбъектДанных, УзелСсылка, ПараметрыВыгрузки)

	Если ТипЗнч(ОбъектДанных) = Тип("УдалениеОбъекта") Тогда	//	LNK 19.08.2021 06:35:45

	//	Ничего не делаем, ждём, пока объект появится...
	//	а если не появится - нужно будет очистить ручками.
		Возврат;

	КонецЕсли;

	Если НЕ ТипЗнч(ОбъектДанных) = Тип("Структура") Тогда	//	некая специфическая выгрузка

		УдалятьРегистрацию = Истина;
		
		ИмяМетаданных = ОбъектДанных.Метаданные().ПолноеИмя();

		СтрокаТипа = ПараметрыВыгрузки.ТаблицаСсылочныхТипов.Найти(ИмяМетаданных, "ПолноеИмяМетаданных");

	Иначе

		УдалятьРегистрацию = Ложь;

	КонецЕсли;

	Если ТипЗнч(ОбъектДанных) = Тип("Структура") Тогда

		ПараметрыЗадания = ПолучитьКлючевыеПараметрыЗадания(ТипЗнч(ОбъектДанных), ОбъектДанных,,, ПараметрыВыгрузки);
		ПараметрыЗадания.Вставить("ВремяВыполнения", ТекущаяДата() + 120);

		НомерЗадания = ПередатьДокументNavision(ОбъектДанных, ПараметрыЗадания, ПараметрыВыгрузки);

		Если ПараметрыЗадания.ИспользоватьЗадания И ТипЗнч(НомерЗадания) = Тип("Строка")
		ИЛИ НЕ ПроверитьТранспортныеТаблицы(ОбъектДанных.IDN, ПараметрыЗадания, "NN", ПараметрыВыгрузки.СверкаДокументов, ПараметрыВыгрузки.Отладка) Тогда

			ЖурналСобытий.Регистрация(ИмяСобытия("PUT_NAV", ПараметрыВыгрузки, Истина) + "ErrorConnections", УровеньЖурналаРегистрации.Предупреждение
				, Метаданные.Документы.ЗаказПокупателя
				,
				,
				, "Отложено. Ошибка Navision:" + Символы.ПС + НомерЗадания
				, СокрЛП(ОбъектДанных.IDN)
				, Истина
				, Ложь
			);

		Иначе

			ЖурналСобытий.Регистрация(ИмяСобытия("PUT_NAV", ПараметрыВыгрузки, Истина) + "ЗаказПокупателя", УровеньЖурналаРегистрации.Информация
				, Метаданные.Документы.ЗаказПокупателя
				,
				,
				, "IDN=[" + ОбъектДанных.IDN + "] выгружен в Navision по заданию [" + Формат(НомерЗадания, "ЧН=0; ЧГ=") + "]"
				, СокрЛП(ОбъектДанных.IDN)
				, Истина
				, Ложь
			);

			ОбъектДанных.УдалятьРегистрацию = ПроверитьТранспортныеТаблицы(ОбъектДанных.IDN, ПараметрыЗадания, "NN", ПараметрыВыгрузки.СверкаДокументов, ПараметрыВыгрузки.Отладка);

		КонецЕсли;

	ИначеЕсли ТипЗнч(ОбъектДанных) = Тип("РегистрСведенийНаборЗаписей.СоответствиеДокументовNavision") Тогда

		Для каждого ЗаписьНабора Из ОбъектДанных Цикл

			НомерЗадания = ОчередьУстановитьЗадание(ТекущаяДатаСеанса(), "ДОКУМЕНТ_СВЕРЕН", ЗаписьНабора.IDN, ЗаписьНабора.ВидДокумента
				, ?(ЗаписьНабора.РезультатСверки = Перечисления.РезультатСверкиNavision.Соответствует, 1
				, ?(ЗаписьНабора.РезультатСверки = Перечисления.РезультатСверкиNavision.НеСоответствует, 0, 10))
				,,,,,,
				, СтрЗаменить(ЗаписьНабора.Примечание, "'", "''")
				, Ложь	//	отладка
			);
			Если НЕ НомерЗадания = 0 Тогда

				УдалитьРегистрациюИзменений(УзелСсылка, ОбъектДанных);

			КонецЕсли;

		КонецЦикла;

	ИначеЕсли ТипЗнч(ОбъектДанных) = Тип("РегистрСведенийНаборЗаписей.КлючевыеАтрибутыДокументов") Тогда

		ВыполнитьКлючевыеАтрибутыДокументов(ОбъектДанных, УзелСсылка, ПараметрыВыгрузки, УдалятьРегистрацию);

	ИначеЕсли СтрокаТипа = Неопределено Тогда

		Если ПараметрыВыгрузки.Отладка Тогда	//	LNK 05.12.2020 06:46:11

			УдалятьРегистрацию = Ложь;

		Иначе

		//	Каким-то образом попал тип, не используемый для плана обмена... ??? но все равно удалим его из регистрации.
			УдалитьРегистрациюИзменений(УзелСсылка, ОбъектДанных);

		КонецЕсли;

	Иначе

		Если СтрокаТипа.Вид = "Справочники" Тогда

			ПараметрыЗадания = ПолучитьКлючевыеПараметрыЗадания(СтрокаТипа.Тип, ОбъектДанных,,, ПараметрыВыгрузки);

			Если ПустаяСтрока(ПараметрыЗадания.ТипЗадания) Тогда

			//	Какие-то операции ещё не прописаны. Сделаем запись об этом объекте в ЖР.
				ЗаписьЖурналаРегистрации("Navision.Передача объектов", УровеньЖурналаРегистрации.Предупреждение
					, ОбъектДанных.Метаданные(), ОбъектДанных.Ссылка
					, "Нет описания ключевых параметров исходящих заданий", РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

			ИначеЕсли НЕ ПараметрыЗадания.ИспользоватьЗадания
					ИЛИ  ОчередьПолучитьНомер(ПараметрыЗадания.ТипЗадания, ПараметрыЗадания.Номер,, ПараметрыВыгрузки.Отладка) = 0 Тогда

			//	Передаем объект в КСУ, создаем задание для его обработки в КСУ... и, собственно, забываем про
			//	него в системе 1С. Больше эта информация нам не нужна - все дальнейшее делается в Navision.
				ПередатьСправочникNavision(ОбъектДанных, ПараметрыЗадания, ПараметрыВыгрузки.Отладка);

			КонецЕсли;

		ИначеЕсли НЕ ОбъектДанных.ПометкаУдаления ИЛИ ПараметрыВыгрузки.СверкаДокументов Тогда

			ТаблицаЗаданий = ПодготовитьТаблицуЗаданийДокумента(ОбъектДанных, СтрокаТипа, ПараметрыВыгрузки, УдалятьРегистрацию);

			УдалятьРегистрацию = НЕ ТаблицаЗаданий.Количество() = 0;
			ПерваяИтерация = Истина;

			Для каждого СтрокаТаблицыЗаданий Из ТаблицаЗаданий Цикл

				ПараметрыЗадания = ПолучитьКлючевыеПараметрыЗадания(СтрокаТаблицыЗаданий.Тип, ОбъектДанных, СтрокаТаблицыЗаданий.КлючТипа,, ПараметрыВыгрузки);
				ПараметрыЗадания.Вставить("ВремяВыполнения", ТекущаяДата() + 120);

				Если НЕ СтрокаТаблицыЗаданий.Проверять Тогда

					ПараметрыЗадания.ИспользоватьЗадания = Ложь;

				КонецЕсли;

				Если НЕ ПроверкаВозможностиВыгрузкиВNavision(ОбъектДанных, ПараметрыЗадания, СтрокаТаблицыЗаданий, ПараметрыВыгрузки.УчетнаяПолитика, УдалятьРегистрацию) Тогда

					ПерваяИтерация = Ложь;
					Продолжить;

				КонецЕсли;
				//Если выгружаем измененный запрос доступности, то нужна повторная выгрузка в Навик
				
				//СЮП 17.06.2024 16.57.31 
				Если ПараметрыЗадания.Тип = Тип("ДокументСсылка.ВозвратИнтернетЗаказа") Тогда
					
					НомерIDN = ПараметрыЗадания.Номер;
				
				Иначе
					
					НомерIDN = ОбъектДанных.IDN;
				
				КонецЕсли;
				

				ВыполнитьВыгрузку = ?(ПараметрыВыгрузки.СверкаДокументов = Истина 
										ИЛИ ПараметрыВыгрузки.ОбновитьТаблицы = Истина 
										Или ПараметрыВыгрузки.ОбновлениеИнтернетЗаказов = Истина
					, Истина
					, (ОчередьПолучитьНомер(ПараметрыЗадания.ТипЗадания, НомерIDN,, ПараметрыВыгрузки.Отладка) = 0 ИЛИ НЕ СтрокаТаблицыЗаданий.Проверять)
						И  НЕ ЕстьВЗаголовках(ПараметрыЗадания.ТипДокумента, НомерIDN, ОбъектДанных.ВерсияДанных, ПараметрыЗадания, ПараметрыВыгрузки.Отладка)
				);

				Если ВыполнитьВыгрузку Тогда

				//	Передаем объект в КСУ, создаем задание для его обработки в КСУ... и, собственно, забываем про
				//	него в системе 1С. Больше эта информация нам не нужна - все дальнейшее делается в Navision.
					НомерЗадания = ПередатьДокументNavision(ОбъектДанных, ПараметрыЗадания, ПараметрыВыгрузки);
				//	---------------------------------------------------------------------------------------

					Если ПараметрыЗадания.ИспользоватьЗадания И ТипЗнч(НомерЗадания) = Тип("Строка")
					ИЛИ НЕ ПроверитьТранспортныеТаблицы(НомерIDN, ПараметрыЗадания, "NN", ПараметрыВыгрузки.СверкаДокументов, ПараметрыВыгрузки.Отладка) Тогда

						УдалятьРегистрацию = Ложь;

						ЖурналСобытий.Регистрация(ИмяСобытия("PUT_NAV", ПараметрыВыгрузки, Истина) + "ErrorConnections", УровеньЖурналаРегистрации.Предупреждение
							, ОбъектДанных.Метаданные()
							, ОбъектДанных.Ссылка
							,
							, "Отложено. Ошибка Navision:" + Символы.ПС + НомерЗадания
							, СокрЛП(ОбъектДанных.Ссылка)
							, Истина
							, Ложь
						);

					Иначе

						ЖурналСобытий.Регистрация(ИмяСобытия("PUT_NAV", ПараметрыВыгрузки, Истина) + ОбъектДанных.Метаданные().Имя, УровеньЖурналаРегистрации.Информация
							, ОбъектДанных.Метаданные()
							, ОбъектДанных.Ссылка
							,
							, "IDN=[" + НомерIDN + "] выгружен в Navision по заданию [" + Формат(НомерЗадания, "ЧН=0; ЧГ=") + "]"
							, СокрЛП(ОбъектДанных.Ссылка)
							, Истина
							, Ложь
						);

						УдалятьРегистрацию = ПроверитьТранспортныеТаблицы(НомерIDN, ПараметрыЗадания, "NN", ПараметрыВыгрузки.СверкаДокументов, ПараметрыВыгрузки.Отладка);

						Если НЕ УдалятьРегистрацию Тогда

							УдалитьИзОчередиЗаданийИТранспортныхТаблиц(НомерIDN, ПараметрыЗадания, "NN", ПараметрыВыгрузки.Отладка);

						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

				ПерваяИтерация = Ложь;

			КонецЦикла;

		КонецЕсли;

		Если УдалятьРегистрацию Тогда

		//	Задание в любом случае уже существует - удаляем объект из регистрации.
			УдалитьРегистрациюИзменений(УзелСсылка, ОбъектДанных);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 05.12.2020 08:15:56
Функция ПодготовитьТаблицуЗаданийДокумента(ОбъектДанных, СтрокаТипа, ПараметрыВыгрузки, УдалятьРегистрацию)

	ТаблицаЗаданий = Новый ТаблицаЗначений;
	ТаблицаЗаданий.Колонки.Добавить("Тип");
//	Команда для отработки специфики задания в строке
	ТаблицаЗаданий.Колонки.Добавить("КлючТипа" , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ТаблицаЗаданий.Колонки.Добавить("Проверять", Новый ОписаниеТипов("Булево"));

	СтрокаТаблицыЗаданий = ТаблицаЗаданий.Добавить();
	СтрокаТаблицыЗаданий.Тип       = СтрокаТипа.Тип;
	СтрокаТаблицыЗаданий.КлючТипа  = "";
	СтрокаТаблицыЗаданий.Проверять = Истина;
	
	Если СтрокаТипа.Тип = Тип("ДокументСсылка.КассовыйДень") Тогда

	//	Выгрузка в NAV происходит в центральной ИБ. В момент выгрузки имеется вероятность того,
	//	что не все документы, принимающие участие в кассовом дне, уже "приехали" в центр.
	//	Поэтому выполняем контроль по зафиксированной в момент "передачи в Navision" сумме продаж.
	//	Копейки отбрасываем. Если суммы не равны, то делаем запись в ЖР и переходим к следующему объекту.
	//	LNK 09.10.2019 08:19:59
		КонтрольнаяСуммаОбщие = РозничныеПродажиСервер.КонтрольнаяСуммаКассовогоДня(ОбъектДанных.Ссылка, Истина);
		КонтрольнаяСуммаКасса = РозничныеПродажиСервер.КонтрольнаяСуммаКассовогоДняКасса(ОбъектДанных.Ссылка);
		РазницаПервая = ОбщегоНазначенияКлиентСервер.АБС(ОбъектДанных.СуммаДокумента - КонтрольнаяСуммаОбщие);
		РазницаВторая = ОбщегоНазначенияКлиентСервер.АБС(КонтрольнаяСуммаОбщие - КонтрольнаяСуммаКасса);

	//	LNK 09.10.2019 08:29:59	- разницу допускаем в 1 ГРН.
		Если РазницаПервая > 1 ИЛИ РазницаВторая > 1 Тогда

			ТаблицаЗаданий.Очистить();
			УдалятьРегистрацию = Ложь;

			ЗаписьЖурналаРегистрации("PUT_NAV.КассовыйДень", УровеньЖурналаРегистрации.Предупреждение
			, ОбъектДанных.Метаданные(), ОбъектДанных.Ссылка
			, "Отложено - на день зафиксирована сумма [" + Формат(ОбъектДанных.СуммаДокумента, "ЧДЦ=; ЧН=0; ЧГ=")
			+ "], а имеем в ЦО Общая=[" + Формат(КонтрольнаяСуммаОбщие, "ЧДЦ=; ЧН=0; ЧГ=")
			+ "] Касса=[" + Формат(КонтрольнаяСуммаКасса, "ЧДЦ=; ЧН=0; ЧГ=") + "]. Выгрузка не совершена."
			, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

		ИначеЕсли НЕ ОбъектДанных.СтатусКассовогоДня = Перечисления.СтатусыКассовойСмены.Закрыта Тогда	//	LNK 11.09.2020 07:18:45

			ТаблицаЗаданий.Очистить();
			УдалятьРегистрацию = Ложь;

			ЗаписьЖурналаРегистрации("PUT_NAV.КассовыйДень", УровеньЖурналаРегистрации.Предупреждение
			, ОбъектДанных.Метаданные(), ОбъектДанных.Ссылка
			, "Отложено - ДЕНЬ НЕ ЗАКРЫТ. Выгрузка не совершена."
			, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

		ИначеЕсли ПараметрыВыгрузки.УчетнаяПолитика.ИнтернетМагазин = ОбъектДанных.Магазин Тогда

			ТаблицаЗаданий.Очистить();
			УдалятьРегистрацию = Истина;	//	LNK 01.04.2020 07:54:10

		Иначе

			СтрокаТаблицыЗаданий = ТаблицаЗаданий.Вставить(0);	//	LNK 31.01.2022 17:35:05 - раньше было .Добавить()
			СтрокаТаблицыЗаданий.Тип = СтрокаТипа.Тип;
			СтрокаТаблицыЗаданий.КлючТипа  = "ОБЩ.ПРОД.КАССА";
			СтрокаТаблицыЗаданий.Проверять = Истина;

			Если ПараметрыВыгрузки.Свойство("ТолькоТаблицаБонусов") И ПараметрыВыгрузки.ТолькоТаблицаБонусов = Истина Тогда

			//	Таблица будет пустая и по заданиям будет (ниже) добавлена торлько таблица бонусов.
				ТаблицаЗаданий.Очистить();

			КонецЕсли;

			СтрокаТаблицыЗаданий = ТаблицаЗаданий.Добавить();
			СтрокаТаблицыЗаданий.Тип = СтрокаТипа.Тип;
			СтрокаТаблицыЗаданий.КлючТипа  = "ОБЩ.ПРОД.БОНУС";
			СтрокаТаблицыЗаданий.Проверять = Истина;

		КонецЕсли;

	ИначеЕсли СтрокаТипа.Тип = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") ИЛИ СтрокаТипа.Тип = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда

		Если ОбщегоНазначенияКлиентСервер.СсылкаПустая(ОбъектДанных.ДокументОснование) Тогда

			ТаблицаЗаданий.Очистить();	//	объект основания отсутствует в БД.. хез, но отложим

		Иначе

		//	LNK 17.08.2017 10:24:42
			СтрокаТаблицыЗаданий.КлючТипа = "ПЕРЕМЕЩ_ОР";	//	это первый набор - было только для внутренних оснований, теперь для всех!.
		//	Нужно сделать копию ордера в транспортных таблицах - "ПЕРЕМЕЩ" и "ПЕРЕМЕЩ_ОР"!
		//	Именно копию ордера - Виколу так удобнее, раньше в этих таблицах для ордеров, выписанных на основании
		//	"внешних" (Navision) документов, был только один набор записей - "ПЕРЕМЕЩ_ОР".
			Если НЕ ПараметрыВыгрузки.СверкаДокументов
				И	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДанных.ДокументОснование, "УзелСоздания") = Справочники.СтруктураУзлов.КСУ_Navision Тогда

				СтрокаТаблицыЗаданий = ТаблицаЗаданий.Добавить();
				СтрокаТаблицыЗаданий.Тип = СтрокаТипа.Тип;
			//	Для "внешних" документов имитация записей перемещения-основания - так было раньше, до введения этих изменений
				СтрокаТаблицыЗаданий.КлючТипа  = "ПЕРЕМЕЩ";	//	это второй набор для сохранения "наследия", но только для внешних документов!
				СтрокаТаблицыЗаданий.Проверять = Ложь;	//	Задание одно...

			КонецЕсли;

		КонецЕсли;

	//СЮП 17.06.2024 15.57.50 
	ИначеЕсли СтрокаТипа.Тип = Тип("ДокументСсылка.ВозвратИнтернетЗаказа") Тогда

		ТаблицаЗаданий.Очистить();
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВозвратИнтернетЗаказаТовары.НомерВозвратаNAV КАК НомерВозвратаNAV
			|ИЗ
			|	Документ.ВозвратИнтернетЗаказа.Товары КАК ВозвратИнтернетЗаказаТовары
			|ГДЕ
			|	ВозвратИнтернетЗаказаТовары.Ссылка = &Ссылка
			|	И НЕ ВозвратИнтернетЗаказаТовары.НомерВозвратаNAV = """"";
		
		Запрос.УстановитьПараметр("Ссылка", ОбъектДанных.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТаблицыЗаданий = ТаблицаЗаданий.Добавить();
			СтрокаТаблицыЗаданий.Тип       = СтрокаТипа.Тип;
			СтрокаТаблицыЗаданий.КлючТипа  = Выборка.НомерВозвратаNAV;
			СтрокаТаблицыЗаданий.Проверять = Истина;

		КонецЦикла;

	КонецЕсли;

	Возврат ТаблицаЗаданий;

КонецФункции

//	LNK 25.10.2019 09:53:03
Функция НужноУстановитьIDN(ОбъектДанных, ПараметрыЗадания, ТипЗначения)

	НужноУстановить = ПустаяСтрока(ОбъектДанных.IDN)
		ИЛИ ПараметрыЗадания.СверкаДокументов И ЗапасыПовтИсп.ПолучитьКодыПроектов(Истина).Получить(ОбъектДанных.IDN) = Истина;

	Если НЕ НужноУстановить И ТипЗначения = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

		НужноУстановить = НЕ Лев(ОбъектДанных.IDN, СтрДлина(ПараметрыЗадания.Префикс)) = ПараметрыЗадания.Префикс;

	КонецЕсли;

	Если НужноУстановить Тогда

		ОбъектДанных.IDN = "";

	КонецЕсли;

	Возврат НужноУстановить;

КонецФункции

//	LNK 23.06.2017 12:44:58
Функция ПроверкаВозможностиВыгрузкиВNavision(ОбъектДанных, ПараметрыЗадания, СтрокаТаблицыЗаданий, УчетнаяПолитика, УдалятьРегистрацию)

	Отказ = Ложь;

	Если ПустаяСтрока(ПараметрыЗадания.ТипЗадания) Тогда

	//	Какие-то операции ещё не прописаны. Сделаем запись об этом объекте в ЖР.
		ЗаписьЖурналаРегистрации("Navision.Передача объектов", УровеньЖурналаРегистрации.Предупреждение
			, ОбъектДанных.Метаданные(), ОбъектДанных.Ссылка
			, "Нет описания ключевых параметров исходящих заданий", РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		УдалятьРегистрацию = Ложь;
		Отказ = Истина;

	ИначеЕсли ?(ПараметрыЗадания.СверкаДокументов, Ложь, НЕ ОбъектДанных.Проведен) И Не ТипЗнч(ОбъектДанных) = Тип("ДокументОбъект.ВозвратИнтернетЗаказа") Тогда

		ЗаписьЖурналаРегистрации("Navision.Передача объектов", УровеньЖурналаРегистрации.Предупреждение
			, ОбъектДанных.Метаданные(), ОбъектДанных.Ссылка
			, "Не проведен документ, назначенный к передаче! Ожидание проведения.", РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		УдалятьРегистрацию = Ложь;	//	LNK 16.09.2021 06:45:38
		Отказ = Истина;

	ИначеЕсли НЕ ПараметрыЗадания.Выгружать = Истина Тогда

	//	Например, при выгрузке "ПриходныйОрдерНаТовары" как корректировки перемещения таблица "Товары"
	//	оказалась пустой... нет расхождений, значит и корректировки нет.
	//	Такая же судьба у непроверенных (ещё не отлажены) заданий
		УдалятьРегистрацию = Ложь;
		Отказ = Истина;

	ИначеЕсли НЕ ПараметрыЗадания.Проверено = Истина Тогда

	//	Такая же судьба у непроверенных (ещё не отлажены) заданий
		УдалятьРегистрацию = Ложь;
		Отказ = Истина;

	ИначеЕсли НужноУстановитьIDN(ОбъектДанных, ПараметрыЗадания, СтрокаТаблицыЗаданий.Тип) Тогда

	//	Такого, конечно, быть не должно... но предохранитель нужно вставить.
		ОбъектДанных.ДополнительныеСвойства.Вставить("РегистрацияПередачиВNavision", Истина);
		УстановитьIDNПоКлючевомуРеквизиту(СтрокаТаблицыЗаданий.Тип, ОбъектДанных, ПараметрыЗадания, ТипЗнч(ОбъектДанных) = Тип("ДокументОбъект.ЗаказПокупателя"));

		УдалятьРегистрацию = Ложь;

		Если ПустаяСтрока(ОбъектДанных.IDN) Тогда

		//	Всё-таки IDN не заполнился! Может быть связано с таким "косяком", как не назаначенный к отправке документ-основание!
			Отказ = Истина;

		ИначеЕсли ПараметрыЗадания.СверкаДокументов Тогда

			Если ПустаяСтрока(ПараметрыЗадания.Номер) Тогда

			//	Справедливо для ордеров на основании НЕотправленных в NAV перемещений..
				ПараметрыЗадания.Номер = ОбъектДанных.IDN;

			КонецЕсли;

		ИначеЕсли ОбъектДанных.Модифицированность() Тогда

			ЗаписатьОбъект(ОбъектДанных, РежимЗаписиДокумента.Запись, ПараметрыЗадания, Истина, Истина);	//	если не запишется, будет ошибка.

		КонецЕсли;

	КонецЕсли;

	Если НЕ ПараметрыЗадания.СверкаДокументов Тогда

		Если УчетнаяПолитика.УчитыватьNavisionПоступлениеПереброски	//	LNK 15.12.2020 08:07:51
		И ПараметрыЗадания.Переброска = 1 И ПустаяСтрока(ПараметрыЗадания.НомерСвязанного)	Тогда

			УдалятьРегистрацию = Ложь;
			Отказ = Истина;

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

#КонецОбласти

#Область ФункционалПовторнойПередачиВNavision

//	LNK 21.07.2023 07:30:42
Функция ОбеспечитьПовторнуюПередачуВNavision(СсылкаНаОбъект, ПроверкаДопустимости = Ложь)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Результат = Новый Структура("Ошибка, Описание", Ложь, "");

//	В выборке обычно (на текущий момент) два узла - рабочий и узел сверки.
//	При повторной регистрации отрабатываем оба узла - то есть чистим все таблицы.
//	В режиме проверки отрабатываем только рабочий узел!
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка КАК Узел,
	|	ТаблицаУзлы.Код КАК Код,
	|	ТаблицаУзлы.СверкаДокументов КАК СверкаДокументов
	|ИЗ
	|	ПланОбмена.ОбменNavisionРозница КАК ТаблицаУзлы
	|ГДЕ
	|	НЕ(ТаблицаУзлы.ЭтотУзел
	|				ИЛИ ТаблицаУзлы.ПометкаУдаления)
	|	И ВЫБОР
	|			КОГДА &ПроверкаДопустимости = ЛОЖЬ
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ ТаблицаУзлы.СверкаДокументов
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код"
	);
	Запрос.УстановитьПараметр("ПроверкаДопустимости", ПроверкаДопустимости);
	
	УзлыВыборка = Запрос.Выполнить().Выбрать();

	IDN = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "IDN");

	Пока УзлыВыборка.Следующий() Цикл

		ПараметрыВыгрузки = ПолучитьПараметрыВыгрузки(УзлыВыборка.Узел, УзлыВыборка.СверкаДокументов, Истина, Ложь);
		СтрокаТипа		  = ПараметрыВыгрузки.ТаблицаСсылочныхТипов.Найти(СсылкаНаОбъект.Метаданные().ПолноеИмя(), "ПолноеИмяМетаданных");

		Если НЕ СтрокаТипа = Неопределено Тогда

			ТаблицаЗаданий = ПодготовитьТаблицуЗаданийДокумента(СсылкаНаОбъект, СтрокаТипа, ПараметрыВыгрузки, Ложь);

			Счётчик = 0;	//	для отказа возможности выгрузки эта переменная должна быть равна "ТаблицаЗаданий.Количество()"

			Для каждого СтрокаТаблицыЗаданий Из ТаблицаЗаданий Цикл

				ПараметрыЗадания = ПолучитьКлючевыеПараметрыЗадания(СтрокаТаблицыЗаданий.Тип, СсылкаНаОбъект, СтрокаТаблицыЗаданий.КлючТипа,, ПараметрыВыгрузки);

				Если ПроверкаДопустимости = Ложь Тогда	//	это режим регистрации с удалением!

					УдалитьИзОчередиЗаданийИТранспортныхТаблиц(IDN, ПараметрыЗадания, "NN", ПараметрыВыгрузки.Отладка);

				КонецЕсли;

				Если ПроверитьТранспортныеТаблицы(IDN, ПараметрыЗадания, "NN", ПараметрыВыгрузки.СверкаДокументов, ПараметрыВыгрузки.Отладка) Тогда

					Счётчик = Счётчик + 1;

					Если ПроверкаДопустимости = Ложь Тогда

					//	.. в таблицах что-то осталось!
						Результат.Ошибка	= Истина;
						Результат.Описание	= Результат.Описание + ?(ПустаяСтрока(Результат.Описание), "", Символы.ПС)
						+ "Все таблицы по типу задания [" + ПараметрыЗадания.ТипЗадания + "] и типу документа [" + ПараметрыЗадания.ТипДокумента + "] существуют";

					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

			Если ПроверкаДопустимости = Ложь Тогда	//	это режим регистрации с удалением!

				ПланыОбмена.ЗарегистрироватьИзменения(УзлыВыборка.Узел, СсылкаНаОбъект);

			ИначеЕсли Счётчик = ТаблицаЗаданий.Количество() Тогда

				Результат.Ошибка	= Истина;
				Результат.Описание	= Результат.Описание + ?(ПустаяСтрока(Результат.Описание), "", Символы.ПС)
				+ "Все транспортные таблицы по этому документу существуют";

			КонецЕсли;

		Иначе

			Результат.Ошибка	= Истина;
			Результат.Описание	= Результат.Описание + ?(ПустаяСтрока(Результат.Описание), "", Символы.ПС)
			+ "Тип объекта не предназначен для выгрузки в NAV";
			Прервать;

		КонецЕсли;

	КонецЦикла;

	Если ПроверкаДопустимости = Ложь Тогда	//	это режим регистрации с удалением!

		ЖурналСобытий.Регистрация("ПОВТ_РЕГ_NAV"
			, ?(Результат.Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация)
			, СсылкаНаОбъект.Метаданные()
			, СсылкаНаОбъект
			,
			, ?(Результат.Ошибка, Результат.Описание, "Выполнена повторная регистрация с очисткой транспорта")
			, СокрЛП(СсылкаНаОбъект)
			, Истина
			, Ложь
		);

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ФункционалОтметкиОбъектУчтенВNavision

Процедура УстановитьПереданоNavision(СсылкаНаОбъект, Параметр = Неопределено, ВидПередачи = Неопределено, ОбновитьЗаписи = Ложь, УчтеноNavision = Неопределено, КассовыйДень = Неопределено, ТранзакцияУжеАктивна = Ложь)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Ведущая.Магазин
	|ИЗ
	|	(ВЫБРАТЬ
	|		Магазины.Ссылка КАК Магазин
	|	ИЗ
	|		Справочник.Магазины КАК Магазины
	|	ГДЕ
	|		Магазины.Ссылка В (&СписокМагазинов)
	|		И НЕ &ПоВсемМагазинам = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|	ГДЕ
	|		&ПоВсемМагазинам = ИСТИНА) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаРегистра
	|		ПО (ТаблицаРегистра.Объект = &СсылкаНаОбъект)
	|			И Ведущая.Магазин = ТаблицаРегистра.Магазин
	|ГДЕ
	|	(ТаблицаРегистра.ВидПередачи ЕСТЬ NULL 
	|			ИЛИ &ОбновитьЗаписи = ИСТИНА)"
	);
	Запрос.УстановитьПараметр("СписокМагазинов", ?(ТипЗнч(Параметр) = Тип("Массив"), Параметр, ОбщегоНазначенияКлиентСервер.AAD(Параметр)));
	Запрос.УстановитьПараметр("ПоВсемМагазинам", Параметр = Неопределено);
	Запрос.УстановитьПараметр("СсылкаНаОбъект" , СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ОбновитьЗаписи" , ОбновитьЗаписи);
	
//	"Разведение" записи регистра по магазинам нужно только для обеспечения миграции в соответствующие узлы распределённой
//	сети. Для определения - учтён ли объект в Navision, достаточно лишь одного (с любым значением измерения "Магазин")
//	упоминания объекта в этом регистре.
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ ТранзакцияУжеАктивна И НЕ Выборка.Количество() = 0 Тогда

		НачатьТранзакцию();

	КонецЕсли;

	Попытка

		Пока Выборка.Следующий() Цикл

			МенеджерЗаписи = РегистрыСведений.ОбъектУчтенВNavision.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект  = СсылкаНаОбъект;
			МенеджерЗаписи.Магазин = Выборка.Магазин;

			Если ОбновитьЗаписи = Истина Тогда

				МенеджерЗаписи.Прочитать();

				Если МенеджерЗаписи.Магазин.Пустая() Тогда

				//	Такая запись еще не существует...
					МенеджерЗаписи.Объект  = СсылкаНаОбъект;
					МенеджерЗаписи.Магазин = Выборка.Магазин;

				КонецЕсли;

			КонецЕсли;

		//	Сам факт наличия записи регистра блокирует доступ к изменениям объекта,
		//	а вот флаг "УчтеноNavision" определяет - учтён ли объект в Navision?
		//	Например, приходный ордер для перемещения, которое на основании заказа поставщику.
		//	Такой документ не должен синхронизироваться с КСУ, так как является лишь завершающим
		//	этапом прямого поступления в магазин.
			МенеджерЗаписи.ВидПередачи    = ?(ВидПередачи = Неопределено, Перечисления.ВидыПередачиNavision.ПереданВNavision, ВидПередачи);
			МенеджерЗаписи.ДатаОбновления = ТекущаяДатаСеанса();

			Если МенеджерЗаписи.ДатаРегистрации = '00010101' Тогда

				МенеджерЗаписи.ДатаРегистрации = ТекущаяДатаСеанса();

			КонецЕсли;

			Если НЕ КассовыйДень = Неопределено Тогда

				МенеджерЗаписи.КассовыйДень = КассовыйДень;

			КонецЕсли;

			Если НЕ УчтеноNavision = Неопределено Тогда

				МенеджерЗаписи.УчтеноNavision = УчтеноNavision;

			КонецЕсли;

			МенеджерЗаписи.Записать(Истина);

		КонецЦикла;

		Если НЕ ТранзакцияУжеАктивна И ТранзакцияАктивна() Тогда

			ЗафиксироватьТранзакцию();

		КонецЕсли;

	//	LNK 14.06.2017 08:57:43
	//	Назначим объект для сверки с данными в КСУ Navision. "ВидДокумента" здесь не указан.
	//	То есть, перерегистрация будет проведена только для существующей записи с указанным "ВидДокумента"!
		ВнешниеИсточникиСверка.НазначитьДокументДляСверки(СсылкаНаОбъект
			, Новый Структура(
				"Магазины, РезультатСверки"
				, Параметр
				, Перечисления.РезультатСверкиNavision.НеПроверялся
			)
		);

	Исключение

		ТекстОшибки = ОписаниеОшибки();

		Если НЕ ТранзакцияУжеАктивна И ТранзакцияАктивна() Тогда

			ОтменитьТранзакцию();

		КонецЕсли;

		ВызватьИсключение "При фиксации учёта в КСУ возникла ошибка:" + Символы.ПС + ТекстОшибки;

	КонецПопытки;

КонецПроцедуры

Функция ПередачаNavision(СсылкаНаОбъект, ВернутьБулево = Истина)	Экспорт

	Если ВнешниеИсточникиПовтИсп.ОбъектУчтенNavisionСодержитТип(СсылкаНаОбъект.Метаданные().ПолноеИмя()) Тогда

		УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос(СтрЗаменить(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаРегистра.ВидПередачи КАК ВидПередачи
		|ИЗ
		|	РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаРегистра
		|ГДЕ
		|	ТаблицаРегистра.Объект ССЫЛКА Документ.ЗаказПоставщику
		|	И ТаблицаРегистра.Объект = &СсылкаНаОбъект"
		, "ССЫЛКА Документ.ЗаказПоставщику", "ССЫЛКА " + СсылкаНаОбъект.Метаданные().ПолноеИмя())
		);
		Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);

		Результат = Запрос.Выполнить();

		Если ВернутьБулево Тогда

			ЗначениеВидПередачи = НЕ Результат.Пустой();

		Иначе
			
			Выборка = Результат.Выбрать();

			Если Выборка.Следующий() Тогда

					ЗначениеВидПередачи = Выборка.ВидПередачи;

			Иначе	ЗначениеВидПередачи = Перечисления.ВидыПередачиNavision.ПустаяСсылка();
			
			КонецЕсли;

		КонецЕсли;

	Иначе	ЗначениеВидПередачи = ?(ВернутьБулево, Ложь, Перечисления.ВидыПередачиNavision.ПустаяСсылка());

	КонецЕсли;
	
	Возврат ЗначениеВидПередачи;

КонецФункции

#Область РаботаСКнопкойНаФормеДокумента

Процедура ДобавитьКнопкуУчестьВNavision(Форма, КоманднаяПанель)	Экспорт

	СписокРеквизитов = Новый Массив;	//	LNK 21.07.2023 07:55:16

//	---------------------------------------------------------------------------------------
	ИмяКнопки = "РегистрацияПередачиВNavision";
	СписокРеквизитов.Добавить(Новый РеквизитФормы(ИмяКнопки, Новый ОписаниеТипов("Булево")));

    КомандаФормы = Форма.Команды.Добавить(ИмяКнопки);
    КомандаФормы.Действие  = "РегистрацияПередачиВNavisionНажатие";
	КомандаФормы.Заголовок = "Учесть NAV";
	КомандаФормы.Подсказка = "Признак учёта в КСУ «Navision» сделает текущий документ недоступным для любых изменений!";
	КомандаФормы.Картинка  = БиблиотекаКартинок.КнопкаОтпущенаNavision;

    КнопкаФормы = Форма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), КоманднаяПанель);
	КнопкаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
    КнопкаФормы.ИмяКоманды  = ИмяКнопки;
	КнопкаФормы.Доступность = Ложь;	//	LNK 11.09.2020 08:52:26

//	LNK 16.06.2023 08:06:40
//	---------------------------------------------------------------------------------------
	ИмяКнопки = "РегистрацияПередачиВNavisionПовторная";
	СписокРеквизитов.Добавить(Новый РеквизитФормы(ИмяКнопки, Новый ОписаниеТипов("Булево")));

    КомандаФормы = Форма.Команды.Добавить(ИмяКнопки);
    КомандаФормы.Действие  = "РегистрацияПередачиВNavisionПовторнаяНажатие";
	КомандаФормы.Заголовок = "Учесть повторно NAV";
	КомандаФормы.Подсказка = "Будет выполнена повторная регистрация и выгрузка данных в КСУ «Navision».";
	КомандаФормы.Картинка  = БиблиотекаКартинок.НовостиОченьВажные;

    КнопкаФормы = Форма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), КоманднаяПанель);
	КнопкаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
    КнопкаФормы.ИмяКоманды  = ИмяКнопки;
	КнопкаФормы.Доступность = Ложь;
	КнопкаФормы.ТолькоВоВсехДействиях = Истина;

	Форма.ИзменитьРеквизиты(СписокРеквизитов);

КонецПроцедуры

Процедура ПроверитьКнопкуУчестьВNavision(Форма, УстановкаРеквизитаФормы = Ложь, ОснованиеПередано = Истина)	Экспорт

	ИмяКнопки = "РегистрацияПередачиВNavision";

    КомандаФормы = Форма.Команды.Найти(ИмяКнопки);
    КнопкаФормы  = Форма.Элементы.Найти(ИмяКнопки);

	Если НЕ КомандаФормы = Неопределено И НЕ КнопкаФормы = Неопределено Тогда

		ДокументСсылка = Форма.Объект.Ссылка;

		ДокументУчтенВNavision = ?(ДокументСсылка.Пустая(), Ложь, ПередачаNavision(ДокументСсылка)) ИЛИ УстановкаРеквизитаФормы;
		
		Если НЕ ДокументУчтенВNavision Тогда

			ПроверятьПроведение = (ДокументСсылка.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить);

			КомандаФормы.Заголовок  = "Учесть NAV";
			КомандаФормы.Подсказка  = "Признак учёта в КСУ «Navision» сделает текущий документ недоступным для любых изменений!";
			КомандаФормы.Картинка   = БиблиотекаКартинок.КнопкаОтпущенаNavision;
			КнопкаФормы.Доступность = НЕ ДокументСсылка.Пустая()
									И ?(ПроверятьПроведение, Форма.Объект.Проведен, Истина)
									И ОснованиеПередано;
			Форма[ИмяКнопки]		= УстановкаРеквизитаФормы;

		Иначе

			КомандаФормы.Заголовок  = "УЧТЁН NAV";
			КомандаФормы.Подсказка  = "Документ учтён в КСУ «Navision»! Любые изменения запрещены.";
			КомандаФормы.Картинка   = БиблиотекаКартинок.КнопкаНажатаNavision;
			КнопкаФормы.Доступность = Ложь;
			Форма[ИмяКнопки]		= Истина;

		//	LNK 18.06.2023 06:07:32
		//	---------------------------------------------------------------------------------------
    		КнопкаФормы  = Форма.Элементы.Найти("РегистрацияПередачиВNavisionПовторная");

			Если НЕ КнопкаФормы = Неопределено Тогда

				КнопкаФормы.Доступность = ТехническаяПоддержкаВызовСервера.ИсключительныйРежим()
										И ОбменДаннымиПовтИсп.ЭтоГлавныйУзел();

			КонецЕсли;

			Если УстановкаРеквизитаФормы Тогда

				Форма.Модифицированность = Истина;

			КонецЕсли;

		КонецЕсли;

		Если НЕ УстановкаРеквизитаФормы И ДокументУчтенВNavision И НЕ ДокументСсылка.Пустая() Тогда

		//	Значит, вызов процедуры в обработчиках "ПриСозданииНаСервере" или "ПослеЗаписиНаСервере" ...
			Форма.ТолькоПросмотр = НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим();

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти
	
#КонецОбласти

#Область РаботаСДокументами

Функция ПередатьДокументNavision(ОбъектДанных, ПараметрыЗадания, ПараметрыВыгрузки)

	Перем Шаблон_RR_HEAD, Шаблон_INSERT_RR_LINE, Шаблон_RR_LINE;

	Запрос = Новый Запрос(ТекстЗапросаПередачиДокумента());	//	LNK 28.07.2021 07:02:14 - текст запроса выведен в отдельную функцию
	УстановитьПараметрыЗапроса(Запрос.Параметры, ОбъектДанных, ПараметрыЗадания, ПараметрыВыгрузки);
	
	Результаты = Запрос.ВыполнитьПакет();

	ПолучитьШаблоныВнешнихЗапросов(Шаблон_RR_HEAD, Шаблон_INSERT_RR_LINE, Шаблон_RR_LINE, ПараметрыЗадания, ПараметрыВыгрузки);

	ВыборкаШапка = Результаты[1].Выбрать();
	ВыборкаШапка.Следующий();

	RequestText =
	"DECLARE @TNAME varchar(32) = '" + СтрЗаменить(ВРег(Новый УникальныйИдентификатор), "-", "") + "'
	|DECLARE @jobID bigint = -1 
	|
	|BEGIN TRY
	|BEGIN TRAN @TNAME
	|" + Символы.ПС
	+ УстановитьПараметрыВТекстеВнешнегоЗапроса(Шаблон_RR_HEAD, Результаты[1].Колонки, ВыборкаШапка);

	СтрокаЗначений = "";
	СчётчикСтрок   = 0;
	ВыборкаТовары  = Результаты[2].Выбрать();
	ПараметрыЗадания.ТабличнаяЧасть.Количество = ВыборкаТовары.Количество();	//	LNK 09.04.2021 07:17:58

	Пока ВыборкаТовары.Следующий() Цикл

		Если СчётчикСтрок = 900 Тогда

		//	Ограничение SQL, вроде как, в 1000 строк в одном INSERT. Ограничим строку...
			RequestText = RequestText + Символы.ПС
			+ Шаблон_INSERT_RR_LINE + СтрокаЗначений;

			СтрокаЗначений = "";
			СчётчикСтрок   = 0;

		КонецЕсли;

		СчётчикСтрок   = СчётчикСтрок + 1;
		СтрокаЗначений = СтрокаЗначений
			+ ?(ПустаяСтрока(СтрокаЗначений)
				, ""
				, ", --" + Формат(СчётчикСтрок, "ЧДЦ=; ЧН=0; ЧГ=") + Символы.ПС)
			+ УстановитьПараметрыВТекстеВнешнегоЗапроса(Шаблон_RR_LINE, Результаты[2].Колонки, ВыборкаТовары);

	КонецЦикла;

	Если НЕ ПустаяСтрока(СтрокаЗначений) Тогда

		RequestText = RequestText + Символы.ПС
		+ Шаблон_INSERT_RR_LINE + СтрокаЗначений;

	КонецЕсли;

//	---------------------------------------------------------------------------------------

	//СЮП 17.06.2024 19.06.26 
	Если ТипЗнч(ОбъектДанных) = Тип("ДокументОбъект.ВозвратИнтернетЗаказа") Тогда
		НомерIDN = ПараметрыЗадания.Номер;
	Иначе
		НомерIDN = ОбъектДанных.IDN;
	КонецЕсли;
	RequestText = RequestText + Символы.ПС
	+ ?(ПараметрыЗадания.ИспользоватьЗадания
		, Символы.ПС +
			ОчередьУстановкиЗаданияТекстЗапроса(
				  ПараметрыЗадания.ВремяВыполнения
				, ПараметрыЗадания.ТипЗадания
				, НомерIDN
				, ПараметрыЗадания.ID2
				, ПараметрыЗадания.ID3,,,,,,, Ложь
			)
		, ""
		) + Символы.ПС
	+
	"COMMIT TRAN @TNAME
	|
	|SELECT @jobID AS [JOB_ID]
	|
	|END TRY
	|BEGIN CATCH
	|	ROLLBACK TRAN @TNAME"
	+ ?(ПараметрыЗадания.ИспользоватьЗадания
		, Символы.ПС + Символы.ПС +
	"	SELECT ERROR_MESSAGE() AS [JOB_ID]"
		,
	"") + Символы.ПС
	+
	"END CATCH
	|";

//	ВыборкаШапка.NUMBER
	ОтветОтправки =  ПередатьДанныеNavision(RequestText, НомерIDN, ПараметрыЗадания, Истина, ПараметрыВыгрузки.Отладка);
	
	НомерЗадания = ОтветОтправки.ЗначениеВозврата;
	
	ЖурналСобытий.Регистрация(ИмяСобытия("PUT_NAV", ПараметрыВыгрузки, Истина) + ОбъектДанных.Метаданные().Имя
		, УровеньЖурналаРегистрации.Информация
		, ОбъектДанных.Метаданные()
		, ОбъектДанных.Ссылка
		, 
		, СокрЛП(ОбъектДанных.Ссылка)
		, RequestText
		, Истина
		, Ложь
	);
	
	ЖурналСобытий.Регистрация(ИмяСобытия("PUT_NAV", ПараметрыВыгрузки, Истина) + ОбъектДанных.Метаданные().Имя
		, УровеньЖурналаРегистрации.Информация
		, ОбъектДанных.Метаданные()
		, ОбъектДанных.Ссылка
		, 
		, СокрЛП(ОбъектДанных.Ссылка)
		, ОтветОтправки.ДанныеОтвета
		, Истина
		, Ложь
	);
	
	Возврат НомерЗадания;

КонецФункции

Процедура УстановитьПараметрыЗапроса(Параметры, ОбъектДанных, ПараметрыЗадания, ПараметрыВыгрузки)

	#Если Клиент Тогда
	//ОбъектДанных = Документы.ПеремещениеТоваров.СоздатьДокумент();
	#КонецЕсли

//	LNK 20.11.2023 09:25:17
	УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();

//	Общие реквизиты ...
	Параметры.Вставить("Период"			, ОбъектДанных.Дата);
	Параметры.Вставить("Номер"			, ОбъектДанных.IDN);
	Параметры.Вставить("Проведен"		, ОбъектДанных.Проведен);
	Параметры.Вставить("ПометкаУдаления", ОбъектДанных.ПометкаУдаления);
	Параметры.Вставить("ВерсияДанных"	, ОбъектДанных.ВерсияДанных);
	Параметры.Вставить("ТипДокумента"	, ПараметрыЗадания.ТипДокумента);
	Параметры.Вставить("КодОтдела"		, УчетнаяПолитика.IDN_ОсновнаяОрганизация);
	Параметры.Вставить("ОтклоненийНет"	, 0);	//	LNK 15.01.2021 13:52:16 - пересорт и пересчет
	Параметры.Вставить("ПоставкаКод"	, "");
	Параметры.Вставить("НазваниеПоставщика", "");
   
	Если ПараметрыЗадания.СверкаДокументов = Истина
	И НЕ ПараметрыЗадания.Тип = Тип("Структура")
	И	 ОбщегоНазначения.ЭтоДокумент(ОбъектДанных.Метаданные()) Тогда	//	LNK 15.10.2020 07:00:19

		Параметры.Вставить("ДатаПередачи", ВнешниеИсточники.ДатаПередачиВNavision(ОбъектДанных.Ссылка));

	Иначе

		Параметры.Вставить("ДатаПередачи", '00010101');	//	LNK 31.10.2019 13:53:34

	КонецЕсли;

	Параметры.Вставить("УчитыватьНДС"    , Ложь);
	Параметры.Вставить("ЦенаВключаетНДС" , Ложь);
	Параметры.Вставить("СуммаДокумента"  , 0);
	Параметры.Вставить("СуммаИнкассации" , 0);
	Параметры.Вставить("НуженКодПроекта" , Истина);
	Параметры.Вставить("Контрагент"      , Справочники.Контрагенты.ПустаяСсылка());
	Параметры.Вставить("СкладПолучатель" , Справочники.Склады.ПустаяСсылка());
	Параметры.Вставить("ВходящийДокумент", Истина);	//	LNK 25.10.2019 15:07:08

//	... и некоторые дефолтные реквизиты
	Параметры.Вставить("НомерОснования"         , "");
	Параметры.Вставить("НалоговаяНакладнаяДата" , '00010101');
	Параметры.Вставить("НалоговаяНакладнаяНомер", "");
	Параметры.Вставить("СчетНаОплатуДата"       , '00010101');
	Параметры.Вставить("СчетНаОплатуНомер"      , "");
	Параметры.Вставить("Комментарий"            , "");

//	указание для перемещений на связанные документы
	Параметры.Вставить("НомерСвязанного"        , "");
	Параметры.Вставить("Переброска"             , 0);
	Параметры.Вставить("Закупка"                , 0);
	Параметры.Вставить("ОбщаяБизнесГруппа"      , "");
	Параметры.Вставить("НомерВнешнегоДокумента" , "");

//	LNK 25.10.2019 11:06:57 - специфика Документы.ЗаказПокупателя
	Параметры.Вставить("КодКлиента"      , "");
	Параметры.Вставить("НазваниеКлиента" , "");
	Параметры.Вставить("ПочтаКлиента"    , "");
	Параметры.Вставить("НомерТелефона"   , "");
	Параметры.Вставить("АдресКлиента"    , "");
	Параметры.Вставить("ДатаОтгрузки"    , '00010101');
	Параметры.Вставить("МетодПоставки"   , "");
	Параметры.Вставить("Оператор"        , "");
	Параметры.Вставить("МетодОплаты"     , "");
	Параметры.Вставить("СтатусОплаты"    , "");
	Параметры.Вставить("СуммаЗаДоставкуКлиенту", 0);
	Параметры.Вставить("ЗатратыОператора"      , 0);

	Параметры.Вставить("ПереданаГотоваяТаблица" , Ложь);
	
	Если ТипЗнч(ОбъектДанных) = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		
	//	LNK 21.11.2023 20:06:35
		Параметры.Вставить("КодОтдела", ОбщегоНазначенияРТповтИсп.РеквизитыМагазина(ОбъектДанных.Магазин, ОбъектДанных.Дата).IDN_Организация);

		Параметры.Вставить("Магазин"        , ОбъектДанных.Магазин);
		Параметры.Вставить("Склад"          , ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДанных.hiМагазинУпрСистемы, "СкладПоступления"));
		Параметры.Вставить("СкладПолучатель", Справочники.Склады.ПустаяСсылка());
		Параметры.Вставить("Контрагент"     , ОбъектДанных.Контрагент);

		Параметры.Вставить("НалоговаяНакладнаяДата" , ОбъектДанных.НалоговаяНакладнаяДата);
		Параметры.Вставить("НалоговаяНакладнаяНомер", ВРег(СокрЛП(ОбъектДанных.НалоговаяНакладнаяНомер)));
		Параметры.Вставить("СчетНаОплатуДата"       , ОбъектДанных.СчетНаОплатуДата);
		Параметры.Вставить("СчетНаОплатуНомер"      , ВРег(СокрЛП(ОбъектДанных.СчетНаОплатуНомер)));

		Параметры.Вставить("УчитыватьНДС"   , ОбъектДанных.УчитыватьНДС);
		Параметры.Вставить("ЦенаВключаетНДС", ОбъектДанных.ЦенаВключаетНДС);
		Параметры.Вставить("СуммаДокумента" , ОбъектДанных.СуммаДокумента);

		Параметры.Вставить("Товары", ПараметрЗапросаТовары(ОбъектДанных.Товары, УчетнаяПолитика));

	ИначеЕсли ТипЗнч(ОбъектДанных) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда	//	LNK 25.10.2019 10:12:03
		
		ДанныеЗаказа = ДанныеЗаказаПокупателя(ОбъектДанных);

		Параметры.Вставить("Магазин"         , ОбъектДанных.Магазин);
		Параметры.Вставить("Склад"           , ОбъектДанных.Склад);
		Параметры.Вставить("КодОтдела"       , СокрЛП(ДанныеЗаказа.КодОтдела));
		Параметры.Вставить("Контрагент"      , ОбъектДанных.Контрагент);
		Параметры.Вставить("ВходящийДокумент", Ложь);

		Параметры.Вставить("КодКлиента"      , СокрЛП(?(Лев(ДанныеЗаказа.КодКлиента, 1) = "i", Сред(ДанныеЗаказа.КодКлиента, 2), ДанныеЗаказа.КодКлиента)));
		Параметры.Вставить("НазваниеКлиента" , СокрЛП(ДанныеЗаказа.НазваниеКлиента));
		Параметры.Вставить("ПочтаКлиента"    , СокрЛП(ДанныеЗаказа.ПочтаКлиента));
		Параметры.Вставить("НомерТелефона"   , СокрЛП(ДанныеЗаказа.НомерТелефона));
		Параметры.Вставить("АдресКлиента"    , СокрЛП(ДанныеЗаказа.АдресКлиента));
		Параметры.Вставить("ДатаОтгрузки"    , Макс(ОбъектДанных.ДатаПродажиЖелаемая, ОбъектДанных.Дата));
		Параметры.Вставить("МетодПоставки"   , СокрЛП(ОбъектДанных.ТипДоставки));
		Параметры.Вставить("Оператор"        , ?(ОбъектДанных.ТипДоставки = Перечисления.ТипДоставкиЗаказПокупателя.НоваяПочтаДоставкаВОтделение
					 ИЛИ ОбъектДанных.ТипДоставки = Перечисления.ТипДоставкиЗаказПокупателя.НоваяПочтаДоставкаПоАдресу
						, "Новая Почта"
						, ?(ОбъектДанных.ТипДоставки = Перечисления.ТипДоставкиЗаказПокупателя.Самовывоз
							, "Самовывоз"
							, "")));
		Параметры.Вставить("МетодОплаты"     , СокрЛП(ОбъектДанных.ТипОплаты));
		Параметры.Вставить("СтатусОплаты"    , СокрЛП(ОбъектДанных.СтатусОплаты));
		Параметры.Вставить("СуммаЗаДоставкуКлиенту", ОбъектДанных.СуммаДоставки);
		Параметры.Вставить("ЗатратыОператора"      , ОбъектДанных.СуммаДоставкиОператор);

		Параметры.Вставить("НомерВнешнегоДокумента", СокрЛП(ОбъектДанных.НомерЗаказаНаСайте));

		Параметры.Вставить("УчитыватьНДС"   , ОбъектДанных.УчитыватьНДС);
		Параметры.Вставить("ЦенаВключаетНДС", ОбъектДанных.ЦенаВключаетНДС);
		Параметры.Вставить("СуммаДокумента" , ОбъектДанных.СуммаДокумента);

		Параметры.Вставить("Товары", ПараметрЗапросаТовары(ОбъектДанных.Товары, УчетнаяПолитика));

	ИначеЕсли ТипЗнч(ОбъектДанных) = Тип("ДокументОбъект.ЗапросДоступностиТоваров") Тогда
		
		ДокументЗаказа = ОбъектДанных.ДокументОснование;
		
		ДанныеЗаказа = ДанныеЗаказаПокупателя(ДокументЗаказа);

		Параметры.Вставить("Магазин"         , ПараметрыВыгрузки.УчетнаяПолитика.ИнтернетМагазин);

		Если ОбъектДанных.ОператорДоставки = Перечисления.ОператорыДоставки.ВнутренняяЛогистика Тогда
			
			Если ТипЗнч(ОбъектДанных.МагазинПолучатель) = Тип("СправочникСсылка.Склады") Тогда
				Параметры.Вставить("Склад"           , ОбъектДанных.МагазинПолучатель);
			Иначе 
				Параметры.Вставить("Склад"           , ОбъектДанных.МагазинПолучатель.СкладПродажи);
			КонецЕсли;

		Иначе
			
			Если ТипЗнч(ОбъектДанных.МагазинОтправитель) = Тип("СправочникСсылка.Склады") Тогда
				Параметры.Вставить("Склад"           , ОбъектДанных.МагазинОтправитель);
			Иначе 
				Параметры.Вставить("Склад"           , ОбъектДанных.МагазинОтправитель.СкладПродажи);
			КонецЕсли;

		КонецЕсли;

		Параметры.Вставить("КодОтдела"       , СокрЛП(ДанныеЗаказа.КодОтдела));
		Параметры.Вставить("Контрагент"      , ДокументЗаказа.Контрагент);
		Параметры.Вставить("ВходящийДокумент", Ложь);

		Параметры.Вставить("КодКлиента"      , СокрЛП(?(Лев(ДанныеЗаказа.КодКлиента, 1) = "i", Сред(ДанныеЗаказа.КодКлиента, 2), ДанныеЗаказа.КодКлиента)));
		Параметры.Вставить("НазваниеКлиента" , СокрЛП(ДанныеЗаказа.НазваниеКлиента));
		Параметры.Вставить("ПочтаКлиента"    , СокрЛП(ДанныеЗаказа.ПочтаКлиента));
		Параметры.Вставить("НомерТелефона"   , СокрЛП(ДанныеЗаказа.НомерТелефона)); 
		
		Если Не ДанныеЗаказа.Самовывоз Тогда
			АдресКлиента = "";
			Если Не ПустаяСтрока(ДанныеЗаказа.Область) Тогда  
				
				АдресКлиента = СокрЛП(ДанныеЗаказа.Область) + " обл., "; 
				Параметры.Вставить("НомерОснования"         ,  СокрЛП(ДанныеЗаказа.Область) + " обл.");
				
			КонецЕсли;
			Если ДанныеЗаказа.ДоставкаНаАдрес Тогда 
				АдресКлиента = АдресКлиента + СокрЛП(ДанныеЗаказа.Город) + ", ";   
				АдресКлиента = АдресКлиента + СокрЛП(СокрЛП(ДанныеЗаказа.ТипУлицы) + " " + СокрЛП(ДанныеЗаказа.Улица)) + ", ";   
				АдресКлиента = АдресКлиента + СокрЛП(ДанныеЗаказа.Дом) + ", кв. ";   
				АдресКлиента = АдресКлиента + СокрЛП(ДанныеЗаказа.Квартира); 
				
				Параметры.Вставить("НазваниеПоставщика"	, СокрЛП(ДанныеЗаказа.Город));

			Иначе 
				АдресКлиента = АдресКлиента + ДанныеЗаказа.Отделение;
			КонецЕсли;
			Параметры.Вставить("АдресКлиента"    , Лев(АдресКлиента, 90));  
		КонецЕсли;
		
		Параметры.Вставить("ДатаОтгрузки"    , Макс(ТекущаяДатаСеанса(), ОбъектДанных.Дата));

		Если ОбъектДанных.ТипДоставки = Перечисления.ТипДоставкиЗаказПокупателя.НоваяПочтаДоставкаПоАдресу
				Или ОбъектДанных.ТипДоставки = Перечисления.ТипДоставкиЗаказПокупателя.MeestExpressДоставкаПоАдресу Тогда 
				
			Параметры.Вставить("ПоставкаКод"	 , "НаАдрес");
		
		ИначеЕсли ОбъектДанных.ТипДоставки = Перечисления.ТипДоставкиЗаказПокупателя.НоваяПочтаДоставкаВОтделение
				Или ОбъектДанных.ТипДоставки = Перечисления.ТипДоставкиЗаказПокупателя.MeestExpressДоставкаВОтделение Тогда 
				
			Параметры.Вставить("ПоставкаКод"	 , "НаОтделение");
			 
		Иначе
			
			Параметры.Вставить("ПоставкаКод"	 , "Самовывоз");  
			
		КонецЕсли;

		Параметры.Вставить("МетодПоставки"   , СокрЛП(ОбъектДанных.ТипДоставки));
		Параметры.Вставить("Оператор"        , СокрЛП(ОбъектДанных.ОператорДоставки));
		Параметры.Вставить("МетодОплаты"     , СокрЛП(ДокументЗаказа.ТипОплаты));
		Параметры.Вставить("СтатусОплаты"    , СокрЛП(ДокументЗаказа.СтатусОплаты));
		Параметры.Вставить("СуммаЗаДоставкуКлиенту", ОбъектДанных.СуммаОплатыДоставки);
		Параметры.Вставить("ЗатратыОператора"      , 0);

		Параметры.Вставить("НомерВнешнегоДокумента", СокрЛП(ДокументЗаказа.НомерЗаказаНаСайте));

		Параметры.Вставить("УчитыватьНДС"   , ДокументЗаказа.УчитыватьНДС);
		Параметры.Вставить("ЦенаВключаетНДС", ДокументЗаказа.ЦенаВключаетНДС);
		Параметры.Вставить("СуммаДокумента" , ОбъектДанных.СуммаДокумента); 
		Параметры.Вставить("НуженКодПроекта", Ложь);
		Параметры.Вставить("Комментарий", СокрЛП(ОбъектДанных.Комментарий));
		
		Параметры.Вставить("Товары", ПараметрЗапросаТовары(ТаблицаЗапросаДоступности(ОбъектДанных), УчетнаяПолитика));

	ИначеЕсли ТипЗнч(ОбъектДанных) = Тип("ДокументОбъект.ВозвратИнтернетЗаказа") Тогда
		
		Параметры.Вставить("Магазин"         , ПараметрыВыгрузки.УчетнаяПолитика.ИнтернетМагазин);

		Если ТипЗнч(ОбъектДанных.МагазинВозврата) = Тип("СправочникСсылка.Склады") Тогда
			Параметры.Вставить("СкладПолучатель", ОбменMagentoСервер.ПолучитьСкладMagentoПоIDN("ОДЕССА").СкладВыбора);
			Параметры.Вставить("Склад"          , ОбменMagentoСервер.ПолучитьСкладMagentoПоIDN("ОДЕССА").СкладВыбора);
		Иначе
			Параметры.Вставить("СкладПолучатель", ОбъектДанных.МагазинВозврата.СкладПродажи);
			Параметры.Вставить("Склад"          , ОбъектДанных.МагазинВозврата.СкладПродажи);
		КонецЕсли;

		Параметры.Вставить("КодОтдела", ОбщегоНазначенияРТповтИсп.РеквизитыМагазина(Параметры.Магазин, ОбъектДанных.Дата).IDN_Организация);

		ДокументЗаказа = ОбъектДанных.ДокументОснование;
		
		ДанныеЗаказа = ДанныеЗаказаПокупателя(ДокументЗаказа);

		//Параметры.Вставить("КодОтдела"       , СокрЛП(ДанныеЗаказа.КодОтдела));
		Параметры.Вставить("Контрагент"      , ДокументЗаказа.Контрагент);
		Параметры.Вставить("ВходящийДокумент", Ложь);
		Параметры.Вставить("Номер"			, ПараметрыЗадания.Номер);

		Параметры.Вставить("КодКлиента"      , СокрЛП(?(Лев(ДанныеЗаказа.КодКлиента, 1) = "i", Сред(ДанныеЗаказа.КодКлиента, 2), ДанныеЗаказа.КодКлиента)));
		Параметры.Вставить("НазваниеКлиента" , СокрЛП(ДанныеЗаказа.НазваниеКлиента));
		Параметры.Вставить("ПочтаКлиента"    , СокрЛП(ДанныеЗаказа.ПочтаКлиента));
		Параметры.Вставить("НомерТелефона"   , СокрЛП(ДанныеЗаказа.НомерТелефона)); 

		Параметры.Вставить("МетодОплаты"     , СокрЛП(ОбъектДанных.ТипОплаты));
		Параметры.Вставить("СтатусОплаты"    , СокрЛП(ОбъектДанных.СтатусОплаты));

		Параметры.Вставить("НомерВнешнегоДокумента", Лев(СтрЗаменить(СокрЛП(ПараметрыЗадания.Номер), "RWZ_", "CWZ_"), 17));
		Параметры.Вставить("НомерОснования" ,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДанных.ЭлектроннаяНакладная, "Номер", ""));

		Параметры.Вставить("УчитыватьНДС"   , ДокументЗаказа.УчитыватьНДС);
		Параметры.Вставить("ЦенаВключаетНДС", ДокументЗаказа.ЦенаВключаетНДС);
		Параметры.Вставить("НуженКодПроекта", Ложь);
		Параметры.Вставить("Комментарий", СокрЛП(ОбъектДанных.Комментарий));

		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СУММА(ВозвратИнтернетЗаказаТовары.Сумма) КАК СуммаДокумента,
			|	ВозвратИнтернетЗаказаТовары.ДатаДокумента КАК ДатаДокумента
			|ИЗ
			|	Документ.ВозвратИнтернетЗаказа.Товары КАК ВозвратИнтернетЗаказаТовары
			|ГДЕ
			|	ВозвратИнтернетЗаказаТовары.НомерВозвратаNAV = &НомерВозвратаNAV
			|СГРУППИРОВАТЬ ПО
			|	ВозвратИнтернетЗаказаТовары.ДатаДокумента";
		
		Запрос.УстановитьПараметр("НомерВозвратаNAV", ПараметрыЗадания.Номер);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
		Параметры.Вставить("СуммаДокумента" , Выборка.СуммаДокумента);
		Параметры.Вставить("Период"			, Выборка.ДатаДокумента);
		 
		Параметры.Вставить("Товары", ПараметрЗапросаТовары(ТаблицаСтрокВозврата(ОбъектДанных, СокрЛП(ПараметрыЗадания.Номер)), УчетнаяПолитика));

	ИначеЕсли ТипЗнч(ОбъектДанных) = Тип("ДокументОбъект.ОприходованиеТоваров")
		ИЛИ   ТипЗнч(ОбъектДанных) = Тип("ДокументОбъект.СписаниеТоваров") Тогда
		
	//	LNK 21.11.2023 20:06:35
		Параметры.Вставить("КодОтдела", ОбщегоНазначенияРТповтИсп.РеквизитыМагазина(ОбъектДанных.Магазин, ОбъектДанных.Дата).IDN_Организация);
	
		Параметры.Вставить("Магазин"        , ОбъектДанных.Магазин);
		Параметры.Вставить("Склад"          , ОбъектДанных.Склад);
		Параметры.Вставить("СуммаДокумента" , ОбъектДанных.СуммаДокумента);

		Параметры.Вставить("Комментарий", СокрЛП(ОбъектДанных.Комментарий));

		Параметры.Вставить("Товары", ПараметрЗапросаТовары(ОбъектДанных.Товары, УчетнаяПолитика));

		Если ТипЗнч(ОбъектДанных) = Тип("ДокументОбъект.ОприходованиеТоваров") Тогда

				Параметры.ОбщаяБизнесГруппа = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДанных.АналитикаДоходов, "ОбщаяБизнесГруппа", "", Ложь));

		Иначе	Параметры.ОбщаяБизнесГруппа = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДанных.АналитикаРасходов, "ОбщаяБизнесГруппа", "", Ложь));

		КонецЕсли;

	ИначеЕсли ТипЗнч(ОбъектДанных) = Тип("ДокументОбъект.ПересортицаТоваров") Тогда
		
	//	LNK 21.11.2023 20:06:35
		Параметры.Вставить("КодОтдела", ОбщегоНазначенияРТповтИсп.РеквизитыМагазина(ОбъектДанных.Магазин, ОбъектДанных.Дата).IDN_Организация);
		
		Параметры.Вставить("Магазин", ОбъектДанных.Магазин);
		Параметры.Вставить("Склад"  , ОбъектДанных.Склад);

		Параметры.Вставить("Комментарий", СокрЛП(ОбъектДанных.Комментарий));

		Параметры.Вставить("Товары", ПараметрЗапросаТовары(ТаблицаПересортицаТоваров(ОбъектДанных, Параметры), УчетнаяПолитика));

		Параметры.Вставить("ПереданаГотоваяТаблица", Истина);

	ИначеЕсли ТипЗнч(ОбъектДанных) = Тип("ДокументОбъект.ПересчетТоваровСамостоятельный") Тогда
		
	//	LNK 21.11.2023 20:06:35
		Параметры.Вставить("КодОтдела", ОбщегоНазначенияРТповтИсп.РеквизитыМагазина(ОбъектДанных.Магазин, ОбъектДанных.Дата).IDN_Организация);
		
		Параметры.Вставить("Магазин", ОбъектДанных.Магазин);
		Параметры.Вставить("Склад"  , ОбъектДанных.Склад);
		Параметры.ОбщаяБизнесГруппа = "ИНВЕНТ";	//	LNK 12.03.2018 13:17:59 - по просьбе Образова. Раньше было ИНВ_АНТ

		Параметры.Вставить("Комментарий", СокрЛП(ОбъектДанных.Комментарий));

		Параметры.Вставить("Товары", ПараметрЗапросаТовары(ТаблицаПересчетТоваровСамостоятельный(ОбъектДанных, Параметры), УчетнаяПолитика));

		Параметры.Вставить("ПереданаГотоваяТаблица", Истина);

	ИначеЕсли ТипЗнч(ОбъектДанных) = Тип("Структура") Тогда
		
		Параметры.Вставить("Период" , ОбъектДанных.Дата);
		Параметры.Вставить("Магазин", ПараметрыВыгрузки.УчетнаяПолитика.ИнтернетМагазин);
		Параметры.Вставить("Склад"  , ПараметрыВыгрузки.УчетнаяПолитика.СкладПродажиИнтернетМагазина);
		
	//	LNK 21.11.2023 20:06:35
		Параметры.Вставить("КодОтдела", ОбщегоНазначенияРТповтИсп.РеквизитыМагазина(Параметры.Магазин, ОбъектДанных.Дата).IDN_Организация);

		Параметры.Вставить("Товары" , ПараметрЗапросаТовары(ТаблицаПродажПоМагазину(ОбъектДанных, ОбъектДанных.Команда), УчетнаяПолитика));

		Параметры.Вставить("ПереданаГотоваяТаблица", Истина);
		Параметры.Вставить("СуммаДокумента" , Параметры.Товары.Итог("Сумма"));
		Параметры.Вставить("СуммаИнкассации", 0);
		Параметры.Вставить("НуженКодПроекта", Ложь);

	ИначеЕсли ТипЗнч(ОбъектДанных) = Тип("ДокументОбъект.КассовыйДень") Тогда
		
		Параметры.Вставить("КодОтдела", ОбщегоНазначенияРТповтИсп.РеквизитыМагазина(ОбъектДанных.Магазин, ОбъектДанных.НачалоКассовогоДня).IDN_Организация);

		Параметры.Вставить("Период" , ОбъектДанных.НачалоКассовогоДня);
		Параметры.Вставить("Магазин", ОбъектДанных.Магазин);
		Параметры.Вставить("Склад"  , ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДанных.Магазин, "СкладПоступления"));

		Параметры.Вставить("Комментарий", "Продажи по магазину " + ОбъектДанных.Магазин);

		Параметры.Вставить("Товары" , ПараметрЗапросаТовары(ТаблицаПродажПоМагазину(ОбъектДанных.Ссылка, ПараметрыЗадания.ТипДокумента), УчетнаяПолитика));

		Параметры.Вставить("ПереданаГотоваяТаблица", Истина);
		Параметры.Вставить("СуммаДокумента" , Параметры.Товары.Итог("Сумма"));
		Параметры.Вставить("СуммаИнкассации", ПолучитьСуммуИнкассацииКассовогоДня(ОбъектДанных.Ссылка));
		Параметры.Вставить("НуженКодПроекта", Ложь);

	ИначеЕсли ТипЗнч(ОбъектДанных) = Тип("ДокументОбъект.НачислениеИСписаниеБонусныхБаллов") Тогда
		
	//	LNK 21.11.2023 20:06:35
		Параметры.Вставить("КодОтдела", ОбщегоНазначенияРТповтИсп.РеквизитыМагазина(ОбъектДанных.Магазин, ОбъектДанных.Дата).IDN_Организация);
		
		Параметры.Вставить("Магазин", Справочники.Магазины.ПустаяСсылка());
		Параметры.Вставить("Склад"  , Справочники.Склады.ПустаяСсылка());
		Параметры.Вставить("СуммаДокумента", ОбъектДанных.ПолучитьСуммуДокумента());

		Параметры.Вставить("Товары" , ПараметрЗапросаТовары(ТаблицаПродажПоМагазину(ОбъектДанных.Ссылка, ПараметрыЗадания.ТипДокумента), УчетнаяПолитика));

		Параметры.Вставить("ПереданаГотоваяТаблица", Истина);

	ИначеЕсли ТипЗнч(ОбъектДанных) = Тип("ДокументОбъект.ПеремещениеТоваров")
		ИЛИ   ТипЗнч(ОбъектДанных) = Тип("ДокументОбъект.КорректировкаПеремещения")
		Тогда

		ДанныеОтправитель = ОбщегоНазначенияРТповтИсп.РеквизитыМагазина(ОбъектДанных.МагазинОтправитель, ОбъектДанных.Дата);
		ДанныеПолучатель  = ОбщегоНазначенияРТповтИсп.РеквизитыМагазина(ОбъектДанных.МагазинПолучатель, ОбъектДанных.Дата);

		Если НЕ ДанныеОтправитель.СкладУправляющейСистемы = Истина Тогда

				Параметры.Вставить("КодОтдела", ДанныеОтправитель.IDN_Организация);

		Иначе	Параметры.Вставить("КодОтдела", ДанныеПолучатель.IDN_Организация);

		КонецЕсли;


		Если ТипЗнч(ОбъектДанных.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда

			Параметры.Вставить("Магазин"        , ОбъектДанных.МагазинПолучатель);
			Параметры.Вставить("Склад"          , ДанныеОтправитель.СкладПоступления);
			Параметры.Вставить("СкладПолучатель", ОбъектДанных.СкладПолучатель);

			Параметры.Вставить("НомерОснования" , ПараметрыЗадания.НомерСвязанного);
			Параметры.Вставить("НомерСвязанного", ПараметрыЗадания.НомерСвязанного);

			Параметры.Вставить("Закупка"        , ПараметрыЗадания.Закупка);

		Иначе

			Параметры.Вставить("Склад"          , ОбъектДанных.СкладОтправитель);
			Параметры.Вставить("СкладПолучатель", ОбъектДанных.СкладПолучатель);
			Параметры.Вставить("Магазин"        , Справочники.Магазины.ПустаяСсылка());

			Если ДанныеОтправитель.СкладУправляющейСистемы = Истина Тогда

				Параметры.Магазин = ОбъектДанных.МагазинПолучатель;

			ИначеЕсли ДанныеПолучатель.СкладУправляющейСистемы = Истина Тогда

				Параметры.Магазин = ОбъектДанных.МагазинОтправитель;

			КонецЕсли;

		КонецЕсли;

		Если ТипЗнч(ОбъектДанных) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
			
			СкладWEB_OD = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДанных.СкладПолучатель, "IDN", "", Ложь);

			Если ПараметрыЗадания.Переброска = 1 ИЛИ ОбъектДанных.ВидПеремещения = Перечисления.ВидыПеремещенийТоваров.ПоступлениеПереброски Тогда

				Параметры.Вставить("НомерСвязанного", ПараметрыЗадания.НомерСвязанного);
				Параметры.Вставить("Переброска"     , ПараметрыЗадания.Переброска);

				Если ОбъектДанных.ВидПеремещения = Перечисления.ВидыПеремещенийТоваров.ПоступлениеПереброски Тогда

				//	LNK 22.11.2023 05:57:26 - как я понял из письма от Гальчуна.
					Параметры.Вставить("КодОтдела", ОбщегоНазначенияРТповтИсп.РеквизитыМагазина(ОбъектДанных.МагазинПолучатель, ОбъектДанных.Дата).IDN_Организация);

				КонецЕсли;
				
			ИначеЕсли СкладWEB_OD = "WEB_OD" Тогда
				 
				 НомерСвязаногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДанных.ДокументОснование, "Номер", "", Ложь);
				 
				 Если Не ПустаяСтрока(НомерСвязаногоДокумента) Тогда
					
					Параметры.Вставить("НомерСвязанного", "CWZ_" + СокрЛП(НомерСвязаногоДокумента));

				 КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		Параметры.Вставить("Товары", ПараметрЗапросаТовары(ОбъектДанных.Товары, УчетнаяПолитика));

		Если ТипЗнч(ОбъектДанных) = Тип("ДокументОбъект.КорректировкаПеремещения") Тогда

			Параметры.Вставить("НомерОснования" , ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДанных.ДокументОснование, "IDN"));
			Параметры.Вставить("Номер"          , Параметры.НомерОснования + "-" + ОбъектДанных.КлючТипаNavision);

		Иначе

			Параметры.Вставить("НомерВнешнегоДокумента", ОбъектДанных.НомерВнешнегоДокумента);

			Параметры.Вставить("Комментарий", СокрЛП(ОбъектДанных.Комментарий));

		КонецЕсли;

	ИначеЕсли ТипЗнч(ОбъектДанных) = Тип("ДокументОбъект.ПриходныйОрдерНаТовары")
		ИЛИ   ТипЗнч(ОбъектДанных) = Тип("ДокументОбъект.РасходныйОрдерНаТовары")
		Тогда

		Параметры.Вставить("НомерОснования" , ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДанных.ДокументОснование, "IDN"));

		Если ПараметрыЗадания.СверкаДокументов И ПустаяСтрока(Параметры.НомерОснования) Тогда

			Параметры.НомерОснования = ОбъектДанных.IDN;

		КонецЕсли;
		
	//	LNK 21.11.2023 20:06:35
		Параметры.Вставить("КодОтдела", ОбщегоНазначенияРТповтИсп.РеквизитыМагазина(ОбъектДанных.Магазин, ОбъектДанных.Дата).IDN_Организация);

		Параметры.Вставить("Магазин"        , ОбъектДанных.Магазин);
		Параметры.Вставить("Склад"          , ОбъектДанных.Склад);
		Параметры.Вставить("СуммаДокумента" , 0);
		Параметры.Вставить("ДатаПередачи"   , ВнешниеИсточники.ДатаПередачиВNavision(ОбъектДанных.Ссылка));	//	LNK 31.10.2019 13:56:17

		Параметры.Вставить("Комментарий", СокрЛП(ОбъектДанных.Комментарий));

		Параметры.Вставить("Номер"      , Параметры.НомерОснования);
		Параметры.Вставить("Товары"     , ПараметрЗапросаТовары(ОбъектДанных.Товары, УчетнаяПолитика));

	Иначе

		а = 22;	//	отладочная

	КонецЕсли;

КонецПроцедуры

Функция ПараметрЗапросаТовары(ТабличнаяЧасть, УчетнаяПолитика)

	ОбщиеКолонки = Новый Массив;
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "IDN"            , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "Номенклатура"   , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "Упаковка"       , Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "Количество"     , Новый ОписаниеТипов("Число"), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "Цена"           , Новый ОписаниеТипов("Число"), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "ЦенаБезНДС"     , Новый ОписаниеТипов("Число"), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "Сумма"          , Новый ОписаниеТипов("Число"), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "СуммаБезНДС"    , Новый ОписаниеТипов("Число"), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "СуммаНДС"       , Новый ОписаниеТипов("Число"), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "СуммаОкругления", Новый ОписаниеТипов("Число"), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "СуммаБезСкидки" , Новый ОписаниеТипов("Число"), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "СтавкаНДС"      , Новый ОписаниеТипов("Число, ПеречислениеСсылка.СтавкиНДС"), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "КодОплаты"      , Новый ОписаниеТипов("Число"), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "НомерСтроки"    , Новый ОписаниеТипов("Число"), Истина));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "НомерИнтернетЗаказа", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "УслугаБанкаПериодПредоставления", Новый ОписаниеТипов("Число"), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "КодПокупателя"  , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "КодПоставщика"  , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)), Ложь));

//	LNK 29.07.2021 08:05:14
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "ТипОперации"			, Новый ОписаниеТипов("Число"), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "ОперацияНомер"		, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "ОперацияДата"			, Новый ОписаниеТипов("Дата"), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "ПродажаДата"			, Новый ОписаниеТипов("Дата"), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "ПродажаНомер"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "ДатаНачисления"		, Новый ОписаниеТипов("Дата"), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "ДатаСписания"			, Новый ОписаниеТипов("Дата"), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "ПрограммаЛояльности"	, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)), Ложь));

//	LNK 14.09.2021 11:42:54
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "КодБюджета"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(11)), Ложь));
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "ТипБонусовНомер"		, Новый ОписаниеТипов("Число"), Ложь));
//	LNK 30.11.2021 12:33:28
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "OnLine"				, Новый ОписаниеТипов("Число"), Ложь));	//	интернет-продажа
//	LNK 20.11.2023 07:51:09
	ОбщиеКолонки.Добавить(Новый Структура("Имя, Тип, Номер", "КодОтдела"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(10)), Ложь));

	Если ТипЗнч(ТабличнаяЧасть) = Тип("ТаблицаЗначений") Тогда
		
			ТаблицаТовары = ТабличнаяЧасть;

	Иначе	ТаблицаТовары = ТабличнаяЧасть.Выгрузить();

	КонецЕсли;

	ВыполнитьНумерацию = Ложь;

	Для каждого Элемент Из ОбщиеКолонки Цикл

		Если ТаблицаТовары.Колонки.Найти(Элемент.Имя) = Неопределено Тогда

			ТаблицаТовары.Колонки.Добавить(Элемент.Имя, Элемент.Тип);

			Если Элемент.Номер = Истина Тогда

				ВыполнитьНумерацию = Истина;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	НомерСтроки = 0;

	Для каждого СтрокаТаблицы Из ТаблицаТовары Цикл

		Если ПустаяСтрока(СтрокаТаблицы.КодОтдела) Тогда

			СтрокаТаблицы.КодОтдела = УчетнаяПолитика.IDN_ОсновнаяОрганизация;

		КонецЕсли;

		Если ВыполнитьНумерацию Тогда

			НомерСтроки = НомерСтроки + 1;
			СтрокаТаблицы.НомерСтроки = НомерСтроки;

		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаТовары;

КонецФункции

Функция ТаблицаЗапросаДоступности(ДокЗапросДоступности) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗПТовары.Ссылка КАК Ссылка,
		|	ЗДТТовары.НомерСтроки КАК НомерСтроки,
		|	ЗПТовары.АкционнаяЦена КАК АкционнаяЦена,
		|	ЗПТовары.БонусАкцияНачислен КАК БонусАкцияНачислен,
		|	ЗПТовары.БонусАкцияСписан КАК БонусАкцияСписан,
		|	ЗПТовары.БонусБазаНачислен КАК БонусБазаНачислен,
		|	ЗПТовары.БонусБазаСписан КАК БонусБазаСписан,
		|	ЗПТовары.КлючСвязи КАК КлючСвязи,
		|	ЗПТовары.КлючСвязиБонусныхБаллов КАК КлючСвязиБонусныхБаллов,
		|	ЗПТовары.КодСтроки КАК КодСтроки,
		|	(ВЫБОР
		|		КОГДА ЗПТовары.Отменено
		|		ИЛИ ЗДТТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён)
		|		ИЛИ ЗДТТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён)
		|			ТОГДА 0
		|		ИНАЧЕ ЗПТовары.Количество
		|	КОНЕЦ) КАК Количество,
		|	(ВЫБОР
		|		КОГДА ЗПТовары.Отменено
		|		ИЛИ ЗДТТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён)
		|		ИЛИ ЗДТТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён)
		|			ТОГДА 0
		|		ИНАЧЕ ЗПТовары.КоличествоУпаковок
		|	КОНЕЦ) КАК КоличествоУпаковок,
		|	ЗПТовары.Номенклатура КАК Номенклатура,
		|	ЗПТовары.Отменено КАК Отменено,
		|	ЗПТовары.ПричинаОтмены КАК ПричинаОтмены,
		|	ЗПТовары.Продавец КАК Продавец,
		|	ЗПТовары.ПродажаПодарка КАК ПродажаПодарка,
		|	ЗПТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	ЗПТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	ЗПТовары.Резервировать КАК Резервировать,
		|	ЗПТовары.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ЗПТовары.Отменено
		|		ИЛИ ЗДТТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён)
		|		ИЛИ ЗДТТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён)
		|			ТОГДА 0
		|		ИНАЧЕ ЗПТовары.Сумма
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ЗПТовары.Отменено
		|		ИЛИ ЗДТТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён)
		|		ИЛИ ЗДТТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён)
		|			ТОГДА 0
		|		ИНАЧЕ ЗПТовары.СуммаАвтоматическойСкидки
		|	КОНЕЦ КАК СуммаАвтоматическойСкидки,
		|	ВЫБОР
		|		КОГДА ЗПТовары.Отменено
		|		ИЛИ ЗДТТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён)
		|		ИЛИ ЗДТТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён)
		|			ТОГДА 0
		|		ИНАЧЕ ЗПТовары.СуммаБонусныхБалловНачислено
		|	КОНЕЦ КАК СуммаБонусныхБалловНачислено,
		|	ВЫБОР
		|		КОГДА ЗПТовары.Отменено
		|		ИЛИ ЗДТТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён)
		|		ИЛИ ЗДТТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён)
		|			ТОГДА 0
		|		ИНАЧЕ ЗПТовары.СуммаБонусныхБалловСписано
		|	КОНЕЦ КАК СуммаБонусныхБалловСписано,
		|	ВЫБОР
		|		КОГДА ЗПТовары.Отменено
		|		ИЛИ ЗДТТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён)
		|		ИЛИ ЗДТТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён)
		|			ТОГДА 0
		|		ИНАЧЕ ЗПТовары.СуммаНДС
		|	КОНЕЦ КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА ЗПТовары.Отменено
		|		ИЛИ ЗДТТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён)
		|		ИЛИ ЗДТТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён)
		|			ТОГДА 0
		|		ИНАЧЕ ЗПТовары.СуммаРучнойСкидки
		|	КОНЕЦ КАК СуммаРучнойСкидки,
		|	ЗПТовары.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	ЗПТовары.Упаковка КАК Упаковка,
		|	ЗПТовары.Характеристика КАК Характеристика,
		|	ЗПТовары.Цена КАК Цена,
		|	ЗПТовары.Склад КАК Склад,
		|	ЗПТовары.ТипДоставки КАК ТипДоставки,
		|	ЗПТовары.МагазинПолучатель КАК МагазинПолучатель,
		|	ЗПТовары.Самовывоз КАК Самовывоз,
		|	ЗПТовары.Обеспечение КАК Обеспечение,
		|	ЗПТовары.КлючСвязиЗапросаДоступности КАК КлючСвязиЗапросаДоступности,
		|	ЗПТовары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗПТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров.Товары КАК ЗДТТовары
		|		ПО (ЗПТовары.Ссылка = ЗДТТовары.Ссылка.ДокументОснование
		|		И ЗПТовары.КлючСвязиЗапросаДоступности = ЗДТТовары.КлючСвязи)
		|ГДЕ
		|	ЗДТТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокЗапросДоступности.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ТаблицаСтрокВозврата(ДокВозврата, НомерВозвратаNAV) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗПТовары.Ссылка КАК Ссылка,
		|	ВозвратТовары.НомерСтроки КАК НомерСтроки,
		|	ЗПТовары.АкционнаяЦена КАК АкционнаяЦена,
		|	ЗПТовары.БонусАкцияНачислен КАК БонусАкцияНачислен,
		|	ЗПТовары.БонусАкцияСписан КАК БонусАкцияСписан,
		|	ЗПТовары.БонусБазаНачислен КАК БонусБазаНачислен,
		|	ЗПТовары.БонусБазаСписан КАК БонусБазаСписан,
		|	ЗПТовары.КлючСвязи КАК КлючСвязи,
		|	ЗПТовары.КлючСвязиБонусныхБаллов КАК КлючСвязиБонусныхБаллов,
		|	ЗПТовары.КодСтроки КАК КодСтроки,
		|	(ВозвратТовары.КоличествоУпаковок) КАК Количество,
		|	(ВозвратТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	ЗПТовары.Номенклатура КАК Номенклатура,
		|	ЗПТовары.Отменено КАК Отменено,
		|	ЗПТовары.ПричинаОтмены КАК ПричинаОтмены,
		|	ЗПТовары.Продавец КАК Продавец,
		|	ЗПТовары.ПродажаПодарка КАК ПродажаПодарка,
		|	ЗПТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	ЗПТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	ЗПТовары.Резервировать КАК Резервировать,
		|	ЗПТовары.СтавкаНДС КАК СтавкаНДС,
		|	ВозвратТовары.Сумма КАК Сумма,
		|	ВозвратТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	ВозвратТовары.СуммаБонусныхБалловНачислено КАК СуммаБонусныхБалловНачислено,
		|	ВозвратТовары.СуммаБонусныхБалловСписано КАК СуммаБонусныхБалловСписано,
		|	ВозвратТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|	ЗПТовары.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	ЗПТовары.Упаковка КАК Упаковка,
		|	ЗПТовары.Характеристика КАК Характеристика,
		|	ЗПТовары.Цена КАК Цена,
		|	ЗПТовары.КлючСвязиЗапросаДоступности КАК КлючСвязиЗапросаДоступности,
		|	ЗПТовары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров
		|ИЗ
		|	Документ.ВозвратИнтернетЗаказа.Товары КАК ВозвратТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗПТовары
		|		ПО ЗПТовары.Ссылка = ВозвратТовары.Ссылка.ДокументОснование
		|		И ВозвратТовары.КлючСвязиЗапросаДоступности = ЗПТовары.КлючСвязиЗапросаДоступности
		|ГДЕ
		|	ВозвратТовары.Ссылка = &Ссылка
		|	И ВозвратТовары.НомерВозвратаNAV = &НомерВозвратаNAV";
	
	Запрос.УстановитьПараметр("Ссылка", ДокВозврата.Ссылка);
	Запрос.УстановитьПараметр("НомерВозвратаNAV", НомерВозвратаNAV);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция УстановитьПараметрыВТекстеВнешнегоЗапроса(Знач ТекстЗапроса, Колонки, Выборка)

	Для каждого Колонка Из Колонки Цикл

		Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда

				Значение = Формат(Выборка[Колонка.Имя], "ЧРД=.; ЧН=0; ЧГ=");

		ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Дата")) Тогда

				Значение = "'" + Формат(Выборка[Колонка.Имя], "ДФ=yyyy-MM-ddTЧЧ:мм:сс.000") + "'";

		Иначе	Значение = "'" + УстранитьНедопустимыеСимволы(Выборка[Колонка.Имя]) + "'";

		КонецЕсли;

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#" + ВРег(Колонка.Имя) + "#", Значение);

	КонецЦикла;

	Возврат ТекстЗапроса;

КонецФункции

//	LNK 07.07.2017 07:04:10
Функция УстранитьНедопустимыеСимволы(Знач Значение)

	Значение = СокрЛП(Значение);	//	используем эту функцию ТОЛЬКО для текстовых значений!
	НедопустимыеСимволы = "'";

	Для Позиция = 1 По СтрДлина(НедопустимыеСимволы) Цикл

		СимволУстранить = Сред(НедопустимыеСимволы, Позиция, 1);
		ПозицияВставки  = Найти(Значение, СимволУстранить);

		Если ПозицияВставки > 0 Тогда

			Значение = СтрЗаменить(Значение, СимволУстранить, СимволУстранить + СимволУстранить);

		КонецЕсли;

	КонецЦикла;

	Возврат Значение;

КонецФункции

Функция ТекстЗапросаПередачиДокумента()	//	LNK 28.07.2021 05:42:39

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТовары.НомерСтроки КАК ЧИСЛО(10, 0)) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.IDN КАК СТРОКА(20)) КАК IDN,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.ЦенаБезНДС КАК ЦенаБезНДС,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаБезНДС КАК СуммаБезНДС,
	|	ТаблицаТовары.СуммаБезСкидки КАК СуммаБезСкидки,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.СуммаОкругления КАК СуммаОкругления,
	|	ТаблицаТовары.ТипОперации КАК ТипОперации,
	|	ТаблицаТовары.ОперацияНомер КАК ОперацияНомер,
	|	ТаблицаТовары.ОперацияДата КАК ОперацияДата,
	|	ТаблицаТовары.ДатаНачисления КАК ДатаНачисления,
	|	ТаблицаТовары.ДатаСписания КАК ДатаСписания,
	|	ТаблицаТовары.ПродажаДата КАК ПродажаДата,
	|	ТаблицаТовары.ПродажаНомер КАК ПродажаНомер,
	|	ТаблицаТовары.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТаблицаТовары.КодОплаты КАК КодОплаты,
	|	ТаблицаТовары.УслугаБанкаПериодПредоставления КАК УслугаБанкаПериодПредоставления,
	|	ТаблицаТовары.КодПокупателя КАК КодПокупателя,
	|	ТаблицаТовары.КодПоставщика КАК КодПоставщика,
	|	ВЫРАЗИТЬ(&Склад КАК Справочник.Склады) КАК Склад,
	|	ВЫРАЗИТЬ(&СкладПолучатель КАК Справочник.Склады) КАК СкладПолучатель,
	|	ВЫРАЗИТЬ(&Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
	|	ВЫРАЗИТЬ(&Магазин КАК Справочник.Магазины) КАК Магазин,
	|	ТаблицаТовары.НомерИнтернетЗаказа КАК НомерИнтернетЗаказа,
	|	ТаблицаТовары.КодБюджета КАК КодБюджета,
	|	ТаблицаТовары.ТипБонусовНомер КАК ТипБонусовНомер,
	|	ТаблицаТовары.OnLine КАК OnLine,
	|	ТаблицаТовары.КодОтдела КАК КодОтдела
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведущая.NUMBER КАК NUMBER,
	|	Ведущая.NUMBERBASE КАК NUMBERBASE,
	|	Ведущая.DATE КАК DATE,
	|	Ведущая.TYPEDOC КАК TYPEDOC,
	|	Ведущая.POSTED КАК POSTED,
	|	Ведущая.DELETED КАК DELETED,
	|	Ведущая.VERSION КАК VERSION,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА &НуженКодПроекта
	|				ТОГДА ВЫБОР
	|						КОГДА Товары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|							ТОГДА ""ИГРУШКИ""
	|						ИНАЧЕ ЕСТЬNULL(Товары.Номенклатура.ВидНоменклатуры.IDN, """")
	|					КОНЕЦ
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК PROJECT,
	|	Ведущая.DEPARTMENT КАК DEPARTMENT,
	|	ЕСТЬNULL(Ведущая.Склад.IDN, """") КАК STOCKCODE,
	|	ЕСТЬNULL(Ведущая.СкладПолучатель.IDN, """") КАК STOCKCODENEW,
	|	Ведущая.INVOICENUMBER КАК INVOICENUMBER,
	|	Ведущая.INVOICEDATE КАК INVOICEDATE,
	|	Ведущая.TAXNUMBER КАК TAXNUMBER,
	|	Ведущая.TAXDATE КАК TAXDATE,
	|	ВЫБОР
	|		КОГДА &ВходящийДокумент = ИСТИНА
	|			ТОГДА ЕСТЬNULL(Ведущая.Контрагент.IDN, """")
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК BUYERCODE,
	|	ЕСТЬNULL(Ведущая.Магазин.СкладПоступления.IDN, """") КАК SHOPSTOCKCODE,
	|	СУММА(ЕСТЬNULL(Товары.СуммаНДС, 0)) КАК TAXSUM,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Товары.СтавкаНДС ЕСТЬ NULL
	|				ТОГДА 0
	|			КОГДА ТИПЗНАЧЕНИЯ(Товары.СтавкаНДС) = ТИП(ЧИСЛО)
	|				ТОГДА Товары.СтавкаНДС
	|			КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|				ТОГДА 20
	|			КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
	|				ТОГДА 14
	|			КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
	|				ТОГДА 7
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК TAXRATE,
	|	Ведущая.SUMMA КАК SUMMA,
	|	Ведущая.SUMMAINKASS КАК SUMMAINKASS,
	|	Ведущая.BUYERNAME КАК BUYERNAME,
	|	Ведущая.COMMENT КАК COMMENT,
	|	Ведущая.RELNUMBER КАК RELNUMBER,
	|	Ведущая.PURCHASE КАК PURCHASE,
	|	Ведущая.RELOCATION КАК RELOCATION,
	|	Ведущая.BGROUPPE КАК BGROUPPE,
	|	Ведущая.WEBNUMDER КАК WEBNUMDER,
	|	Ведущая.KLIENTCODE КАК KLIENTCODE,
	|	Ведущая.CLIENTNAME КАК CLIENTNAME,
	|	Ведущая.CLIENTMAIL КАК CLIENTMAIL,
	|	Ведущая.CLIENTPHONE КАК CLIENTPHONE,
	|	Ведущая.CLIENTADRESS КАК CLIENTADRESS,
	|	Ведущая.SALEDATE КАК SALEDATE,
	|	Ведущая.SUPPLYMETOD КАК SUPPLYMETOD,
	|	Ведущая.SUPPLYOPER КАК SUPPLYOPER,
	|	Ведущая.METODID КАК METODID,
	|	Ведущая.PAYMETOD КАК PAYMETOD,
	|	Ведущая.PAYSTATUS КАК PAYSTATUS,
	|	Ведущая.SUMDELIVERY КАК SUMDELIVERY,
	|	Ведущая.SUMSUPPLYOPER КАК SUMSUPPLYOPER,
	|	Ведущая.TRANSFERDATE КАК TRANSFERDATE,
	|	Ведущая.NODEVIAT КАК NODEVIAT
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫРАЗИТЬ(&Номер КАК СТРОКА(20)) КАК NUMBER,
	|		&НомерОснования КАК NUMBERBASE,
	|		&Период КАК DATE,
	|		&ТипДокумента КАК TYPEDOC,
	|		ВЫБОР
	|			КОГДА &Проведен = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК POSTED,
	|		ВЫБОР
	|			КОГДА &ПометкаУдаления = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК DELETED,
	|		&ВерсияДанных КАК VERSION,
	|		&КодОтдела КАК DEPARTMENT,
	|		&СчетНаОплатуНомер КАК INVOICENUMBER,
	|		&СчетНаОплатуДата КАК INVOICEDATE,
	|		&НалоговаяНакладнаяНомер КАК TAXNUMBER,
	|		&НалоговаяНакладнаяДата КАК TAXDATE,
	|		&СуммаДокумента КАК SUMMA,
	|		&СуммаИнкассации КАК SUMMAINKASS,
	|		&НазваниеПоставщика КАК BUYERNAME,
	|		ВЫРАЗИТЬ(&Комментарий КАК СТРОКА(80)) КАК COMMENT,
	|		ВЫРАЗИТЬ(&НомерСвязанного КАК СТРОКА(20)) КАК RELNUMBER,
	|		&Закупка КАК PURCHASE,
	|		&Переброска КАК RELOCATION,
	|		&ОбщаяБизнесГруппа КАК BGROUPPE,
	|		&НомерВнешнегоДокумента КАК WEBNUMDER,
	|		ВЫРАЗИТЬ(&Склад КАК Справочник.Склады) КАК Склад,
	|		ВЫРАЗИТЬ(&СкладПолучатель КАК Справочник.Склады) КАК СкладПолучатель,
	|		ВЫРАЗИТЬ(&Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
	|		ВЫРАЗИТЬ(&Магазин КАК Справочник.Магазины) КАК Магазин,
	|		&КодКлиента КАК KLIENTCODE,
	|		&НазваниеКлиента КАК CLIENTNAME,
	|		&ПочтаКлиента КАК CLIENTMAIL,
	|		&НомерТелефона КАК CLIENTPHONE,
	|		&АдресКлиента КАК CLIENTADRESS,
	|		&ДатаОтгрузки КАК SALEDATE,
	|		&МетодПоставки КАК SUPPLYMETOD,
	|		&ПоставкаКод КАК METODID,
	|		&Оператор КАК SUPPLYOPER,
	|		&МетодОплаты КАК PAYMETOD,
	|		&СтатусОплаты КАК PAYSTATUS,
	|		&СуммаЗаДоставкуКлиенту КАК SUMDELIVERY,
	|		&ЗатратыОператора КАК SUMSUPPLYOPER,
	|		&ДатаПередачи КАК TRANSFERDATE,
	|		&ОтклоненийНет КАК NODEVIAT) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	Ведущая.CLIENTNAME,
	|	Ведущая.KLIENTCODE,
	|	Ведущая.CLIENTMAIL,
	|	Ведущая.CLIENTADRESS,
	|	Ведущая.CLIENTPHONE,
	|	Ведущая.SUMSUPPLYOPER,
	|	Ведущая.PAYMETOD,
	|	Ведущая.SUPPLYOPER,
	|	Ведущая.SUPPLYMETOD,
	|	Ведущая.METODID,
	|	Ведущая.SUMDELIVERY,
	|	Ведущая.SALEDATE,
	|	Ведущая.PAYSTATUS,
	|	Ведущая.NUMBER,
	|	Ведущая.NUMBERBASE,
	|	Ведущая.DATE,
	|	Ведущая.TYPEDOC,
	|	Ведущая.RELOCATION,
	|	Ведущая.BGROUPPE,
	|	Ведущая.SUMMAINKASS,
	|	Ведущая.BUYERNAME,
	|	Ведущая.WEBNUMDER,
	|	Ведущая.COMMENT,
	|	Ведущая.SUMMA,
	|	Ведущая.RELNUMBER,
	|	Ведущая.PURCHASE,
	|	Ведущая.DEPARTMENT,
	|	ЕСТЬNULL(Ведущая.Склад.IDN, """"),
	|	Ведущая.INVOICEDATE,
	|	Ведущая.TAXNUMBER,
	|	ЕСТЬNULL(Ведущая.СкладПолучатель.IDN, """"),
	|	Ведущая.INVOICENUMBER,
	|	Ведущая.TAXDATE,
	|	ЕСТЬNULL(Ведущая.Магазин.СкладПоступления.IDN, """"),
	|	ВЫБОР
	|		КОГДА &ВходящийДокумент = ИСТИНА
	|			ТОГДА ЕСТЬNULL(Ведущая.Контрагент.IDN, """")
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	Ведущая.TRANSFERDATE,
	|	Ведущая.POSTED,
	|	Ведущая.VERSION,
	|	Ведущая.NODEVIAT,
	|	Ведущая.DELETED
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.NUMBER КАК NUMBER,
	|	ТабличнаяЧасть.TYPEDOC КАК TYPEDOC,
	|	ТабличнаяЧасть.ROWNUM КАК ROWNUM,
	|	ТабличнаяЧасть.GOODCODE КАК GOODCODE,
	|	ТабличнаяЧасть.COUNT КАК COUNT,
	|	ТабличнаяЧасть.PRICE КАК PRICE,
	|	ТабличнаяЧасть.PRICENOTAX КАК PRICENOTAX,
	|	ТабличнаяЧасть.TAXRATE КАК TAXRATE,
	|	ТабличнаяЧасть.SUM КАК SUM,
	|	ТабличнаяЧасть.SUMNOTAX КАК SUMNOTAX,
	|	ТабличнаяЧасть.SUMNODISCOUNT КАК SUMNODISCOUNT,
	|	ТабличнаяЧасть.SUMROUNDING КАК SUMROUNDING,
	|	ТабличнаяЧасть.CODEPAY КАК CODEPAY,
	|	ТабличнаяЧасть.WEBNUMBER КАК WEBNUMBER,
	|	ТабличнаяЧасть.QTYMONTH КАК QTYMONTH,
	|	ТабличнаяЧасть.BUYERLINE КАК BUYERLINE,
	|	ТабличнаяЧасть.BUNUSOPERTYPE КАК BUNUSOPERTYPE,
	|	ТабличнаяЧасть.BONUSOPERNUMBER КАК BONUSOPERNUMBER,
	|	ТабличнаяЧасть.BONUSOPERDATE КАК BONUSOPERDATE,
	|	ТабличнаяЧасть.BONUSDATEACCRUED КАК BONUSDATEACCRUED,
	|	ТабличнаяЧасть.BONUSDATEWRITEOFF КАК BONUSDATEWRITEOFF,
	|	ТабличнаяЧасть.BONUSSALEDATE КАК BONUSSALEDATE,
	|	ТабличнаяЧасть.BONUSSALENUMBER КАК BONUSSALENUMBER,
	|	ТабличнаяЧасть.BONUSLOYALKODE КАК BONUSLOYALKODE,
	|	ТабличнаяЧасть.BUDGETCODE КАК BUDGETCODE,
	|	ТабличнаяЧасть.BONUSTYPE КАК BONUSTYPE,
	|	ТабличнаяЧасть.ONLINE КАК ONLINE,
	|	ТабличнаяЧасть.FOUNDBLAGO КАК FOUNDBLAGO,
	|	ТабличнаяЧасть.DEPARTMENT КАК DEPARTMENT
	|ИЗ
	|	(ВЫБРАТЬ
	|		&Номер КАК NUMBER,
	|		&ТипДокумента КАК TYPEDOC,
	|		МИНИМУМ(Товары.НомерСтроки) КАК ROWNUM,
	|		ВЫБОР
	|			КОГДА НЕ Товары.IDN = """"
	|					ИЛИ Товары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ТОГДА Товары.IDN
	|			ИНАЧЕ Товары.Номенклатура.IDN
	|		КОНЕЦ КАК GOODCODE,
	|		СУММА(Товары.Количество) КАК COUNT,
	|		ВЫБОР
	|			КОГДА &УчитыватьНДС = ИСТИНА
	|					И НЕ СУММА(Товары.Количество) = 0
	|				ТОГДА ВЫБОР
	|						КОГДА &ЦенаВключаетНДС = ИСТИНА
	|							ТОГДА СУММА(Товары.Сумма)
	|						ИНАЧЕ СУММА(Товары.Сумма) + СУММА(Товары.СуммаНДС)
	|					КОНЕЦ / СУММА(Товары.Количество)
	|			ИНАЧЕ МАКСИМУМ(Товары.Цена / ВЫБОР
	|						КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиНоменклатуры).Коэффициент, 0) = 0
	|							ТОГДА 1
	|						ИНАЧЕ ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиНоменклатуры).Коэффициент
	|					КОНЕЦ)
	|		КОНЕЦ КАК PRICE,
	|		ВЫБОР
	|			КОГДА &УчитыватьНДС = ИСТИНА
	|					И НЕ СУММА(Товары.Количество) = 0
	|				ТОГДА ВЫБОР
	|						КОГДА &ЦенаВключаетНДС = ИСТИНА
	|							ТОГДА СУММА(Товары.Сумма) - СУММА(Товары.СуммаНДС)
	|						ИНАЧЕ СУММА(Товары.Сумма)
	|					КОНЕЦ / СУММА(Товары.Количество)
	|			ИНАЧЕ МАКСИМУМ(Товары.Цена / ВЫБОР
	|						КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиНоменклатуры).Коэффициент, 0) = 0
	|							ТОГДА 1
	|						ИНАЧЕ ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиНоменклатуры).Коэффициент
	|					КОНЕЦ)
	|		КОНЕЦ КАК PRICENOTAX,
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(Товары.СтавкаНДС) = ТИП(ЧИСЛО)
	|				ТОГДА Товары.СтавкаНДС
	|			КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|				ТОГДА 20
	|			КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
	|				ТОГДА 14
	|			КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
	|				ТОГДА 7
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК TAXRATE,
	|		ВЫБОР
	|			КОГДА &УчитыватьНДС = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА &ЦенаВключаетНДС = ИСТИНА
	|							ТОГДА СУММА(Товары.Сумма)
	|						ИНАЧЕ СУММА(Товары.Сумма) + СУММА(Товары.СуммаНДС)
	|					КОНЕЦ
	|			ИНАЧЕ СУММА(Товары.Сумма)
	|		КОНЕЦ КАК SUM,
	|		ВЫБОР
	|			КОГДА &УчитыватьНДС = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА &ЦенаВключаетНДС = ИСТИНА
	|							ТОГДА СУММА(Товары.Сумма) - СУММА(Товары.СуммаНДС)
	|						ИНАЧЕ СУММА(Товары.Сумма)
	|					КОНЕЦ
	|			ИНАЧЕ СУММА(Товары.Сумма)
	|		КОНЕЦ КАК SUMNOTAX,
	|		0 КАК SUMNODISCOUNT,
	|		СУММА(Товары.СуммаОкругления) КАК SUMROUNDING,
	|		Товары.КодОплаты КАК CODEPAY,
	|		Товары.НомерИнтернетЗаказа КАК WEBNUMBER,
	|		0 КАК QTYMONTH,
	|		"""" КАК BUYERLINE,
	|		Товары.ТипОперации КАК BUNUSOPERTYPE,
	|		Товары.ОперацияНомер КАК BONUSOPERNUMBER,
	|		Товары.ОперацияДата КАК BONUSOPERDATE,
	|		Товары.ДатаНачисления КАК BONUSDATEACCRUED,
	|		Товары.ДатаСписания КАК BONUSDATEWRITEOFF,
	|		Товары.ПродажаДата КАК BONUSSALEDATE,
	|		Товары.ПродажаНомер КАК BONUSSALENUMBER,
	|		Товары.ПрограммаЛояльности КАК BONUSLOYALKODE,
	|		Товары.КодБюджета КАК BUDGETCODE,
	|		Товары.ТипБонусовНомер КАК BONUSTYPE,
	|		Товары.OnLine КАК ONLINE,
	|		Товары.КодПоставщика КАК FOUNDBLAGO,
	|		Товары.КодОтдела КАК DEPARTMENT
	|	ИЗ
	|		Товары КАК Товары
	|	ГДЕ
	|		НЕ &ПереданаГотоваяТаблица = ИСТИНА
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Товары.КодОплаты,
	|		ВЫБОР
	|			КОГДА НЕ Товары.IDN = """"
	|					ИЛИ Товары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ТОГДА Товары.IDN
	|			ИНАЧЕ Товары.Номенклатура.IDN
	|		КОНЕЦ,
	|		Товары.НомерИнтернетЗаказа,
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(Товары.СтавкаНДС) = ТИП(ЧИСЛО)
	|				ТОГДА Товары.СтавкаНДС
	|			КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|				ТОГДА 20
	|			КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
	|				ТОГДА 14
	|			КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
	|				ТОГДА 7
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		Товары.ДатаНачисления,
	|		Товары.ДатаСписания,
	|		Товары.ТипОперации,
	|		Товары.ОперацияНомер,
	|		Товары.ПродажаДата,
	|		Товары.ПродажаНомер,
	|		Товары.ПрограммаЛояльности,
	|		Товары.КодБюджета,
	|		Товары.ТипБонусовНомер,
	|		Товары.ОперацияДата,
	|		Товары.OnLine,
	|		Товары.КодПоставщика,
	|		Товары.КодОтдела
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&Номер,
	|		&ТипДокумента,
	|		Товары.НомерСтроки,
	|		ВЫБОР
	|			КОГДА НЕ Товары.IDN = """"
	|					ИЛИ Товары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ТОГДА Товары.IDN
	|			ИНАЧЕ Товары.Номенклатура.IDN
	|		КОНЕЦ,
	|		Товары.Количество,
	|		Товары.Цена,
	|		Товары.ЦенаБезНДС,
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(Товары.СтавкаНДС) = ТИП(ЧИСЛО)
	|				ТОГДА Товары.СтавкаНДС
	|			КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|				ТОГДА 20
	|			КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
	|				ТОГДА 14
	|			КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
	|				ТОГДА 7
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		Товары.Сумма,
	|		Товары.СуммаБезНДС,
	|		Товары.СуммаБезСкидки,
	|		Товары.СуммаОкругления,
	|		Товары.КодОплаты,
	|		Товары.НомерИнтернетЗаказа,
	|		Товары.УслугаБанкаПериодПредоставления,
	|		Товары.КодПокупателя,
	|		Товары.ТипОперации,
	|		Товары.ОперацияНомер,
	|		Товары.ОперацияДата,
	|		Товары.ДатаНачисления,
	|		Товары.ДатаСписания,
	|		Товары.ПродажаДата,
	|		Товары.ПродажаНомер,
	|		Товары.ПрограммаЛояльности,
	|		Товары.КодБюджета,
	|		Товары.ТипБонусовНомер,
	|		Товары.OnLine,
	|		Товары.КодПоставщика,
	|		Товары.КодОтдела
	|	ИЗ
	|		Товары КАК Товары
	|	ГДЕ
	|		&ПереданаГотоваяТаблица = ИСТИНА) КАК ТабличнаяЧасть
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.ROWNUM
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Товары"
	;

	Возврат ТекстЗапроса;

КонецФункции

Процедура ПолучитьШаблоныВнешнихЗапросов(Шаблон_RR_HEAD, Шаблон_INSERT_RR_LINE, Шаблон_RR_LINE, ПараметрыЗадания, ПараметрыВыгрузки)

	Шаблон_RR_HEAD = СтрЗаменить(СтрЗаменить(
	?(ЭтоОбновление(ПараметрыВыгрузки)
	, "DELETE FROM [Euro2009].[dbo].[Европродукт 2009$#HEAD#]
      |	WHERE [Документ Но_] = #NUMBER# AND [Тип Документа] = #TYPEDOC#
	  |DELETE FROM [Euro2009].[dbo].[Европродукт 2009$#LINE#]
      |	WHERE [Документ Но_] = #NUMBER# AND [Тип Документа] = #TYPEDOC#
	  |" + Символы.ПС
	, ""
	) +
	"INSERT INTO [Euro2009].[dbo].[Европродукт 2009$#HEAD#]
	|	([Документ Но_]#ADDNAME#
	|	,[Основание Но_]
	|	,[Тип Документа]
	|	,[Код Проекта]
	|	,[Код Отдела]
	|	,[Код Склада]
	|	,[Новый Код Склада]
	|	,[Дата Учета]
	|	,[Поставщик Счет Но_]
	|	,[Дата Счета Поставщика]
	|	,[Код Поставщика]
	|	,[Код Склада Магазина]
	|	,[Номер налог_ поставщ_]
	|	,[Дата налог_ поставщ_]
	|	,[Сумма НДС]
	|	,[Ставка НДС]
	|	,[Сумма]
	|	,[Сумма Инкассации]
	|	,[Название Поставщика]
	|	,[Комментарий]
	|	,[Внешний Документ Но_]
	|	,[Закупка]
	|	,[Переброска]
	|	,[Общая бизнес Группа]
	|	,[WEB Заказ Но_]
	|	,[Код Клиента]
	|	,[Название Клиента]
	|	,[E-mail Клиента]
	|	,[Телефон Клиента]
	|	,[Адрес Клиента]
	|	,[Дата Отгрузки]
	|	,[Поставка Код]
	|	,[Метод Поставки]
	|	,[Оператор]
	|	,[Метод Оплаты]
	|	,[Статус Оплаты]
	|	,[Сумма За Доставку Клиенту]
	|	,[Затраты Оператора]
	|	,[Дата Передачи в Nav]
	|	,[Отклонений Нет]
	|	,[deleted])
	|	VALUES
	|		(#NUMBER##ADDFIELD#
	|		,#NUMBERBASE#
	|		,#TYPEDOC#
	|		,#PROJECT#
	|		,#DEPARTMENT#
	|		,#STOCKCODE#
	|		,#STOCKCODENEW#
	|		,#DATE#
	|		,#INVOICENUMBER#
	|		,#INVOICEDATE#
	|		,#BUYERCODE#
	|		,#SHOPSTOCKCODE#
	|		,#TAXNUMBER#
	|		,#TAXDATE#
	|		,#TAXSUM#
	|		,#TAXRATE#
	|		,#SUMMA#
	|		,#SUMMAINKASS#
	|		,#BUYERNAME#
	|		,#COMMENT#
	|		,#RELNUMBER#
	|		,#PURCHASE#
	|		,#RELOCATION#
	|		,#BGROUPPE#
	|		,#WEBNUMDER#
	|		,#KLIENTCODE#
	|		,#CLIENTNAME#
	|		,#CLIENTMAIL#
	|		,#CLIENTPHONE#
	|		,#CLIENTADRESS#
	|		,#SALEDATE#
	|		,#METODID#
	|		,#SUPPLYMETOD#
	|		,#SUPPLYOPER#
	|		,#PAYMETOD#
	|		,#PAYSTATUS#
	|		,#SUMDELIVERY#
	|		,#SUMSUPPLYOPER#
	|		,#TRANSFERDATE#
	|		,#NODEVIAT#
	|		,#DELETED#)
	|", "#HEAD#", ПараметрыЗадания.Имена.HEAD), "#LINE#", ПараметрыЗадания.Имена.LINE
	);

	Шаблон_RR_HEAD = СтрЗаменить(Шаблон_RR_HEAD, "#ADDNAME#"
		, ?(ПараметрыЗадания.СверкаДокументов
			, Символы.ПС + ",[Posted]" + Символы.ПС + ",[Version]"
			, ""));
	Шаблон_RR_HEAD = СтрЗаменить(Шаблон_RR_HEAD, "#ADDFIELD#"
		, ?(ПараметрыЗадания.СверкаДокументов
			, Символы.ПС + ",#POSTED#" + Символы.ПС + ",#VERSION#"
			, ""));
	Шаблон_RR_HEAD = ВнешниеИсточники.УточнитьТекстЗапроса(Шаблон_RR_HEAD, Перечисления.ВнешниеИсточники.Navision);

	Шаблон_INSERT_RR_LINE = ВнешниеИсточники.УточнитьТекстЗапроса(СтрЗаменить(
	"INSERT INTO [Euro2009].[dbo].[Европродукт 2009$#LINE#]
	|	([Документ Но_]
	|	,[Тип Документа]
	|	,[Строка Но_]
	|	,[Товар Но_]
	|	,[Кол-во баз_]
	|	,[Цена]
	|	,[Цена без НДС]
	|	,[Ставка НДС]
	|	,[Сумма]
	|	,[Сумма Без НДС]
	|	,[Сумма Без Скидки]
	|	,[Сумма Округления]
	|	,[Код Оплаты]
	|	,[Номер Интернет Заказа]
	|	,[QtyMonth]
	|	,[Клиент Антошка]
	|	,[ДатаНачисления]
	|	,[ДатаСписания]
	|	,[Номер Чека]
	|	,[Дата Чека]
	|	,[Номер Чека к возврату]
	|	,[Дата Чека к возврату]
	|	,[Тип операции]
	|	,[BonusID]
	|	,[Код Бюджета]
	|	,[Тип Бонуса]
	|	,[OnLine]
	|	,[Код Поставщика]
	|	,[Код Отдела]
	|	)
	|	VALUES
	|", "#LINE#", ПараметрыЗадания.Имена.LINE)
	, Перечисления.ВнешниеИсточники.Navision
	);
	Шаблон_RR_LINE =
	"		(#NUMBER#
	|		,#TYPEDOC#
	|		,#ROWNUM#
	|		,#GOODCODE#
	|		,#COUNT#
	|		,#PRICE#
	|		,#PRICENOTAX#
	|		,#TAXRATE#
	|		,#SUM#
	|		,#SUMNOTAX#
	|		,#SUMNODISCOUNT#
	|		,#SUMROUNDING#
	|		,#CODEPAY#
	|		,#WEBNUMBER#
	|		,#QTYMONTH#
	|		,#BUYERLINE#
	|		,#BONUSDATEACCRUED#
	|		,#BONUSDATEWRITEOFF#
	|		,#BONUSOPERNUMBER#
	|		,#BONUSOPERDATE#
	|		,#BONUSSALENUMBER#
	|		,#BONUSSALEDATE#
	|		,#BUNUSOPERTYPE#
	|		,#BONUSLOYALKODE#
	|		,#BUDGETCODE#
	|		,#BONUSTYPE#
	|		,#ONLINE#
	|		,#FOUNDBLAGO#
	|		,#DEPARTMENT#
	|		)
	|";

КонецПроцедуры

#Область СпецификаДокументаКассовыйДень

Функция ТаблицаПродажПоМагазину(КассовыйДень, ТипДокумента)

	Запрос = Новый Запрос;

	Если НЕ ТипЗнч(КассовыйДень) = Тип("Структура") Тогда

		Запрос.УстановитьПараметр("КассовыйДень", КассовыйДень);
		Запрос.УстановитьПараметр("УчитыватьПогашениеСертификатов", Истина);

	КонецЕсли;

	Если ТипДокумента = "ОБЩ.ПРОД" Тогда

		Запрос.Текст     = ТекстЗапросаОбщиеПродажи();
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();

	ИначеЕсли ТипДокумента = "ОБЩ.ПРОД.КАССА" Тогда

		Запрос.Текст = ТекстЗапросаОбщиеПродажиКасса();
		Результаты   = Запрос.ВыполнитьПакет();

		ТаблицаРезультат = Результаты[5].Выгрузить();

		ВыборкаКонтроль  = Результаты[4].Выбрать();

		Если ВыборкаКонтроль.Следующий() Тогда

			СуммаРасхождений = ВыборкаКонтроль.Сумма - ТаблицаРезультат.Итог("Сумма");

			Пока НЕ СуммаРасхождений = 0 Цикл

				ЗнакСуммы = ?(СуммаРасхождений < 0, -1, 1);

				Для каждого СтрокаТаблицы Из ТаблицаРезультат Цикл

					СуммаДобавить = 0.01 * ЗнакСуммы;
					СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма + СуммаДобавить;
					СуммаРасхождений = СуммаРасхождений - СуммаДобавить;

					Если СуммаРасхождений = 0 Тогда

						Прервать;

					КонецЕсли;

				КонецЦикла;

			КонецЦикла;

		КонецЕсли;

	ИначеЕсли ТипДокумента = "ОБЩ.ПРОД.БОНУС" ИЛИ ТипДокумента = "НАЧ.СПИС.БОНУС" Тогда

		Запрос.Текст     = ТекстЗапросаОбщиеПродажиБонус();
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();

	ИначеЕсли ТипДокумента = "ОБЩ.ПРОД.БОНУС.MAGENTO" Тогда

		Запрос.Текст     = ТекстЗапросаОбщиеПродажиБонусMagento();
		Запрос.УстановитьПараметр("ТаблицаЗаказов", КассовыйДень.ТаблицаЗаказов);
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();

	КонецЕсли;
	
	НомерСтроки = 0;

	Для каждого СтрокаТаблицы Из ТаблицаРезультат Цикл

		НомерСтроки = НомерСтроки + 1;
		СтрокаТаблицы.НомерСтроки = НомерСтроки;

	КонецЦикла;
	
	Возврат ТаблицаРезультат;

КонецФункции

Функция ТекстЗапросаОбщиеПродажи()	Экспорт

//	6 - для товаров "ОплатаЧастями"
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Дата КАК Дата,
	|	ТаблицаДокументы.Ссылка КАК Ссылка,
	|	ТаблицаДокументы.УчитыватьНДС КАК УчитыватьНДС,
	|	ТаблицаДокументы.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	5 КАК КодОплаты,
	|	ИСТИНА КАК РозничныеПродажи,
	|	ТаблицаДокументы.Организация.IDN КАК КодОтдела
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ТаблицаДокументы
	|ГДЕ
	|	ТаблицаДокументы.КассоваяСмена.КассовыйДень = &КассовыйДень
	|	И НЕ ТаблицаДокументы.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	ТаблицаРегистраций.Объект,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистраций.Объект ССЫЛКА Документ.РеализацияТоваров
	|			ТОГДА ТаблицаРегистраций.Объект.УчитыватьНДС
	|		КОГДА ТаблицаРегистраций.Объект ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ТОГДА ТаблицаРегистраций.Объект.УчитыватьНДС
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистраций.Объект ССЫЛКА Документ.РеализацияТоваров
	|			ТОГДА ТаблицаРегистраций.Объект.ЦенаВключаетНДС
	|		КОГДА ТаблицаРегистраций.Объект ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ТОГДА ТаблицаРегистраций.Объект.ЦенаВключаетНДС
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаРегистраций.Объект) = ТИП(Документ.РеализацияТоваров)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаРегистраций.Объект.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	|						ТОГДА 3
	|					КОГДА ТаблицаРегистраций.Объект.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|						ТОГДА 5
	|					ИНАЧЕ 2
	|				КОНЕЦ
	|		ИНАЧЕ 2
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	ЕСТЬNULL(ТаблицаРегистраций.Объект.Организация.IDN, """")
	|ИЗ
	|	РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаРегистраций
	|ГДЕ
	|	ТаблицаРегистраций.КассовыйДень = &КассовыйДень
	|	И (ТаблицаРегистраций.Объект ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ИЛИ ТаблицаРегистраций.Объект ССЫЛКА Документ.КорректировкаРегистров
	|			ИЛИ ТаблицаРегистраций.Объект ССЫЛКА Документ.РеализацияТоваров)
	|	И НЕ ТаблицаРегистраций.Объект.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7) КАК СтавкаНДС,
	|	7 КАК ПроцентСтавки
	|ПОМЕСТИТЬ СтавкиНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14),
	|	14
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20),
	|	20
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРозница.Дата КАК Дата,
	|	ТаблицаРозница.Ссылка КАК Ссылка,
	|	МИНИМУМ(ТаблицаРозница.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаРозница.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаРозница.Номенклатура.IDN, """") = """"
	|				И ТаблицаРозница.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.СкидочныйКупон)
	|			ТОГДА ""6005308""
	|		ИНАЧЕ ТаблицаРозница.Номенклатура.IDN
	|	КОНЕЦ КАК IDN,
	|	СУММА(ТаблицаРозница.Количество) КАК Количество,
	|	ВЫБОР
	|		КОГДА СУММА(ТаблицаРозница.Количество) = 0
	|			ТОГДА СУММА(ТаблицаРозница.СуммаСНДС)
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(ТаблицаРозница.СуммаСНДС) / СУММА(ТаблицаРозница.Количество) КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА СУММА(ТаблицаРозница.Количество) = 0
	|			ТОГДА СУММА(ТаблицаРозница.СуммаБезНДС)
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(ТаблицаРозница.СуммаБезНДС) / СУММА(ТаблицаРозница.Количество) КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК ЦенаБезНДС,
	|	СУММА(ТаблицаРозница.СуммаСНДС) КАК Сумма,
	|	СУММА(ТаблицаРозница.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ТаблицаРозница.СуммаБезСкидки) КАК СуммаБезСкидки,
	|	СУММА(ТаблицаРозница.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ТаблицаРозница.СуммаОкругления) КАК СуммаОкругления,
	|	ТаблицаРозница.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаРозница.КодОплаты КАК КодОплаты,
	|	ТаблицаРозница.КлючГруппировки КАК КлючГруппировки,
	|	ТаблицаРозница.НомерИнтернетЗаказа КАК НомерИнтернетЗаказа,
	|	ТаблицаРозница.УслугаБанкаПериодПредоставления КАК УслугаБанкаПериодПредоставления,
	|	ТаблицаРозница.КодПокупателя КАК КодПокупателя,
	|	ТаблицаРозница.КодОтдела КАК КодОтдела
	|ПОМЕСТИТЬ Продажи
	|ИЗ
	|	(ВЫБРАТЬ
	|		Фильтр.Дата КАК Дата,
	|		Фильтр.Ссылка КАК Ссылка,
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Количество КАК Количество,
	|		ТаблицаТовары.Сумма + ВЫБОР
	|			КОГДА НЕ Фильтр.ЦенаВключаетНДС
	|					И Фильтр.УчитыватьНДС
	|				ТОГДА ТаблицаТовары.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаСНДС,
	|		ТаблицаТовары.Сумма - ВЫБОР
	|			КОГДА Фильтр.ЦенаВключаетНДС
	|					И Фильтр.УчитыватьНДС
	|				ТОГДА ТаблицаТовары.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС,
	|		(ТаблицаТовары.Количество * ТаблицаТовары.Цена + ВЫБОР
	|			КОГДА НЕ Фильтр.ЦенаВключаетНДС
	|					И Фильтр.УчитыватьНДС
	|				ТОГДА ТаблицаТовары.Количество * ТаблицаТовары.Цена * ЕСТЬNULL(СтавкиНДС.ПроцентСтавки, 0) / 100
	|			ИНАЧЕ 0
	|		КОНЕЦ) / ВЫБОР
	|			КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|					ИЛИ ТаблицаТовары.Упаковка.Коэффициент = 0
	|				ТОГДА 1
	|			ИНАЧЕ ТаблицаТовары.Упаковка.Коэффициент
	|		КОНЕЦ КАК СуммаБезСкидки,
	|		ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|		ТаблицаТовары.СуммаОкругления КАК СуммаОкругления,
	|		ЕСТЬNULL(СтавкиНДС.ПроцентСтавки, 0) КАК СтавкаНДС,
	|		ВЫБОР
	|			КОГДА НЕ ТаблицаТовары.УслугаБанка = ЗНАЧЕНИЕ(Справочник.УслугиБанка.ПустаяСсылка)
	|					И НЕ ТаблицаТовары.УслугаБанкаПериодПредоставления = 0
	|				ТОГДА 6
	|			ИНАЧЕ Фильтр.КодОплаты
	|		КОНЕЦ КАК КодОплаты,
	|		50 КАК КлючГруппировки,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.ДополнительнаяАналитика ССЫЛКА Документ.ЗаказПокупателя
	|				ТОГДА ЕСТЬNULL(ТаблицаТовары.ДополнительнаяАналитика.Номер, """")
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК НомерИнтернетЗаказа,
	|		ВЫБОР
	|			КОГДА НЕ ТаблицаТовары.УслугаБанка = ЗНАЧЕНИЕ(Справочник.УслугиБанка.ПустаяСсылка)
	|					И НЕ ТаблицаТовары.УслугаБанкаПериодПредоставления = 0
	|				ТОГДА ТаблицаТовары.УслугаБанкаПериодПредоставления
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК УслугаБанкаПериодПредоставления,
	|		ВЫБОР
	|			КОГДА НЕ(ТаблицаТовары.УслугаБанка = ЗНАЧЕНИЕ(Справочник.УслугиБанка.ПустаяСсылка)
	|						ИЛИ ТаблицаТовары.УслугаБанка.ТипУслуги = ЗНАЧЕНИЕ(Перечисление.ТипыУслугБанка.ПакетМалыша)
	|						ИЛИ ТаблицаТовары.УслугаБанка.ТипУслуги = ЗНАЧЕНИЕ(Перечисление.ТипыУслугБанка.МгновеннаяРассрочка))
	|				ТОГДА ""ODФ16996""
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК КодПокупателя,
	|		ЕСТЬNULL(ТаблицаТовары.Ссылка.Организация.IDN, """") КАК КодОтдела
	|	ИЗ
	|		Фильтр КАК Фильтр
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Товары КАК ТаблицаТовары
	|				ЛЕВОЕ СОЕДИНЕНИЕ СтавкиНДС КАК СтавкиНДС
	|				ПО ТаблицаТовары.СтавкаНДС = СтавкиНДС.СтавкаНДС
	|			ПО Фильтр.Ссылка = ТаблицаТовары.Ссылка
	|	ГДЕ
	|		Фильтр.РозничныеПродажи
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Фильтр.Дата,
	|		Фильтр.Ссылка,
	|		ТаблицаВозвраты.НомерСтроки * 100000,
	|		ТаблицаВозвраты.Номенклатура,
	|		ТаблицаВозвраты.Количество,
	|		ТаблицаВозвраты.Сумма + ВЫБОР
	|			КОГДА НЕ Фильтр.ЦенаВключаетНДС
	|					И Фильтр.УчитыватьНДС
	|				ТОГДА ТаблицаВозвраты.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ТаблицаВозвраты.Сумма - ВЫБОР
	|			КОГДА Фильтр.ЦенаВключаетНДС
	|					И Фильтр.УчитыватьНДС
	|				ТОГДА ТаблицаВозвраты.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		(ТаблицаВозвраты.Количество * ТаблицаВозвраты.Цена + ВЫБОР
	|			КОГДА НЕ Фильтр.ЦенаВключаетНДС
	|					И Фильтр.УчитыватьНДС
	|				ТОГДА ТаблицаВозвраты.Количество * ТаблицаВозвраты.Цена * ЕСТЬNULL(СтавкиНДС.ПроцентСтавки, 0) / 100
	|			ИНАЧЕ 0
	|		КОНЕЦ) / ВЫБОР
	|			КОГДА ТаблицаВозвраты.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|					ИЛИ ТаблицаВозвраты.Упаковка.Коэффициент = 0
	|				ТОГДА 1
	|			ИНАЧЕ ТаблицаВозвраты.Упаковка.Коэффициент
	|		КОНЕЦ,
	|		ТаблицаВозвраты.СуммаНДС,
	|		ТаблицаВозвраты.СуммаОкругления,
	|		ЕСТЬNULL(СтавкиНДС.ПроцентСтавки, 0),
	|		ВЫБОР
	|			КОГДА НЕ ТаблицаВозвраты.УслугаБанка = ЗНАЧЕНИЕ(Справочник.УслугиБанка.ПустаяСсылка)
	|					И НЕ ТаблицаВозвраты.УслугаБанкаПериодПредоставления = 0
	|				ТОГДА 6
	|			ИНАЧЕ Фильтр.КодОплаты
	|		КОНЕЦ,
	|		51,
	|		ВЫБОР
	|			КОГДА ТаблицаВозвраты.ДополнительнаяАналитика ССЫЛКА Документ.ЗаказПокупателя
	|				ТОГДА ЕСТЬNULL(ТаблицаВозвраты.ДополнительнаяАналитика.Номер, """")
	|			ИНАЧЕ """"
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НЕ ТаблицаВозвраты.УслугаБанка = ЗНАЧЕНИЕ(Справочник.УслугиБанка.ПустаяСсылка)
	|					И НЕ ТаблицаВозвраты.УслугаБанкаПериодПредоставления = 0
	|				ТОГДА ТаблицаВозвраты.УслугаБанкаПериодПредоставления
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НЕ(ТаблицаВозвраты.УслугаБанка = ЗНАЧЕНИЕ(Справочник.УслугиБанка.ПустаяСсылка)
	|						ИЛИ ТаблицаВозвраты.УслугаБанка.ТипУслуги = ЗНАЧЕНИЕ(Перечисление.ТипыУслугБанка.ПакетМалыша)
	|						ИЛИ ТаблицаВозвраты.УслугаБанка.ТипУслуги = ЗНАЧЕНИЕ(Перечисление.ТипыУслугБанка.МгновеннаяРассрочка))
	|				ТОГДА ""ODФ16996""
	|			ИНАЧЕ """"
	|		КОНЕЦ,
	|		ЕСТЬNULL(ТаблицаВозвраты.Ссылка.Организация.IDN, """")
	|	ИЗ
	|		Фильтр КАК Фильтр
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.ВозвращенныеТовары КАК ТаблицаВозвраты
	|				ЛЕВОЕ СОЕДИНЕНИЕ СтавкиНДС КАК СтавкиНДС
	|				ПО ТаблицаВозвраты.СтавкаНДС = СтавкиНДС.СтавкаНДС
	|			ПО Фильтр.Ссылка = ТаблицаВозвраты.Ссылка
	|	ГДЕ
	|		Фильтр.РозничныеПродажи
	|		И НЕ ТаблицаВозвраты.ВозвратНеЭтойСмены
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Фильтр.Дата,
	|		Фильтр.Ссылка,
	|		ТаблицаВозвраты.НомерСтроки * 100000,
	|		ТаблицаВозвраты.Номенклатура,
	|		-ТаблицаВозвраты.Количество,
	|		-(ТаблицаВозвраты.Сумма + ВЫБОР
	|			КОГДА НЕ Фильтр.ЦенаВключаетНДС
	|					И Фильтр.УчитыватьНДС
	|				ТОГДА ТаблицаВозвраты.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|		-(ТаблицаВозвраты.Сумма - ВЫБОР
	|			КОГДА Фильтр.ЦенаВключаетНДС
	|					И Фильтр.УчитыватьНДС
	|				ТОГДА ТаблицаВозвраты.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|		-((ТаблицаВозвраты.Количество * ТаблицаВозвраты.Цена + ВЫБОР
	|			КОГДА НЕ Фильтр.ЦенаВключаетНДС
	|					И Фильтр.УчитыватьНДС
	|				ТОГДА ТаблицаВозвраты.Количество * ТаблицаВозвраты.Цена * ЕСТЬNULL(СтавкиНДС.ПроцентСтавки, 0) / 100
	|			ИНАЧЕ 0
	|		КОНЕЦ) / ВЫБОР
	|			КОГДА ТаблицаВозвраты.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|					ИЛИ ТаблицаВозвраты.Упаковка.Коэффициент = 0
	|				ТОГДА 1
	|			ИНАЧЕ ТаблицаВозвраты.Упаковка.Коэффициент
	|		КОНЕЦ),
	|		-ТаблицаВозвраты.СуммаНДС,
	|		-ТаблицаВозвраты.СуммаОкругления,
	|		ЕСТЬNULL(СтавкиНДС.ПроцентСтавки, 0),
	|		ВЫБОР
	|			КОГДА НЕ ТаблицаВозвраты.УслугаБанка = ЗНАЧЕНИЕ(Справочник.УслугиБанка.ПустаяСсылка)
	|					И НЕ ТаблицаВозвраты.УслугаБанкаПериодПредоставления = 0
	|				ТОГДА 6
	|			ИНАЧЕ Фильтр.КодОплаты
	|		КОНЕЦ,
	|		52,
	|		ВЫБОР
	|			КОГДА ТаблицаВозвраты.ДополнительнаяАналитика ССЫЛКА Документ.ЗаказПокупателя
	|				ТОГДА ЕСТЬNULL(ТаблицаВозвраты.ДополнительнаяАналитика.Номер, """")
	|			ИНАЧЕ """"
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НЕ ТаблицаВозвраты.УслугаБанка = ЗНАЧЕНИЕ(Справочник.УслугиБанка.ПустаяСсылка)
	|					И НЕ ТаблицаВозвраты.УслугаБанкаПериодПредоставления = 0
	|				ТОГДА ТаблицаВозвраты.УслугаБанкаПериодПредоставления
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НЕ(ТаблицаВозвраты.УслугаБанка = ЗНАЧЕНИЕ(Справочник.УслугиБанка.ПустаяСсылка)
	|						ИЛИ ТаблицаВозвраты.УслугаБанка.ТипУслуги = ЗНАЧЕНИЕ(Перечисление.ТипыУслугБанка.ПакетМалыша)
	|						ИЛИ ТаблицаВозвраты.УслугаБанка.ТипУслуги = ЗНАЧЕНИЕ(Перечисление.ТипыУслугБанка.МгновеннаяРассрочка))
	|				ТОГДА ""ODФ16996""
	|			ИНАЧЕ """"
	|		КОНЕЦ,
	|		ЕСТЬNULL(ТаблицаВозвраты.Ссылка.Организация.IDN, """")
	|	ИЗ
	|		Фильтр КАК Фильтр
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.ВозвращенныеТовары КАК ТаблицаВозвраты
	|				ЛЕВОЕ СОЕДИНЕНИЕ СтавкиНДС КАК СтавкиНДС
	|				ПО ТаблицаВозвраты.СтавкаНДС = СтавкиНДС.СтавкаНДС
	|			ПО Фильтр.Ссылка = ТаблицаВозвраты.Ссылка
	|	ГДЕ
	|		Фильтр.РозничныеПродажи
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Фильтр.Дата,
	|		Фильтр.Ссылка,
	|		99999999998,
	|		ПогашениеСертификатов.ПодарочныйСертификат,
	|		-ПогашениеСертификатов.Количество,
	|		-(0.01 * ПогашениеСертификатов.Количество),
	|		-(0.01 * ПогашениеСертификатов.Количество),
	|		-(0.01 * ПогашениеСертификатов.Количество),
	|		0,
	|		0,
	|		0,
	|		Фильтр.КодОплаты,
	|		53,
	|		"""",
	|		0,
	|		"""",
	|		ЕСТЬNULL(ПогашениеСертификатов.Ссылка.Организация.IDN, """")
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.ПогашениеПодарочныхСертификатов КАК ПогашениеСертификатов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
	|			ПО ПогашениеСертификатов.Ссылка = Фильтр.Ссылка
	|	ГДЕ
	|		Фильтр.РозничныеПродажи
	|		И &УчитыватьПогашениеСертификатов = ИСТИНА) КАК ТаблицаРозница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРозница.Дата,
	|	ТаблицаРозница.Ссылка,
	|	ТаблицаРозница.Номенклатура,
	|	ТаблицаРозница.СтавкаНДС,
	|	ТаблицаРозница.КодОплаты,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаРозница.Номенклатура.IDN, """") = """"
	|				И ТаблицаРозница.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.СкидочныйКупон)
	|			ТОГДА ""6005308""
	|		ИНАЧЕ ТаблицаРозница.Номенклатура.IDN
	|	КОНЕЦ,
	|	ТаблицаРозница.КлючГруппировки,
	|	ТаблицаРозница.НомерИнтернетЗаказа,
	|	ТаблицаРозница.УслугаБанкаПериодПредоставления,
	|	ТаблицаРозница.КодПокупателя,
	|	ТаблицаРозница.КодОтдела
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаРеализация.Дата,
	|	ТаблицаРеализация.Ссылка,
	|	МИНИМУМ(ТаблицаРеализация.НомерСтроки),
	|	ТаблицаРеализация.Номенклатура,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаРеализация.Номенклатура.IDN, """") = """"
	|				И ТаблицаРеализация.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.СкидочныйКупон)
	|			ТОГДА ""6005308""
	|		ИНАЧЕ ТаблицаРеализация.Номенклатура.IDN
	|	КОНЕЦ,
	|	СУММА(ТаблицаРеализация.Количество),
	|	ТаблицаРеализация.Цена,
	|	ВЫБОР
	|		КОГДА СУММА(ТаблицаРеализация.Количество) = 0
	|			ТОГДА СУММА(ТаблицаРеализация.СуммаБезНДС)
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(ТаблицаРеализация.СуммаБезНДС) / СУММА(ТаблицаРеализация.Количество) КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	СУММА(ТаблицаРеализация.Сумма),
	|	СУММА(ТаблицаРеализация.СуммаБезНДС),
	|	СУММА(ТаблицаРеализация.СуммаБезСкидки),
	|	СУММА(ТаблицаРеализация.СуммаНДС),
	|	0,
	|	ТаблицаРеализация.СтавкаНДС,
	|	ТаблицаРеализация.КодОплаты,
	|	ТаблицаРеализация.КлючГруппировки,
	|	"""",
	|	0,
	|	ТаблицаРеализация.КодПокупателя,
	|	ТаблицаРеализация.КодОтдела
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаРегистра.Период КАК Дата,
	|		Ведущая.Ссылка КАК Ссылка,
	|		99999999997 КАК НомерСтроки,
	|		ТаблицаРегистра.Номенклатура КАК Номенклатура,
	|		ТаблицаРегистра.КоличествоОборот КАК Количество,
	|		ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ТаблицаРегистра.КоличествоОборот = 0
	|					ТОГДА ТаблицаРегистра.СтоимостьОборот
	|				ИНАЧЕ ТаблицаРегистра.СтоимостьОборот / ТаблицаРегистра.КоличествоОборот
	|			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|		ТаблицаРегистра.СтоимостьОборот КАК Сумма,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(Ведущая.УчитыватьНДС, ИСТИНА)
	|					И ЕСТЬNULL(Ведущая.ЦенаВключаетНДС, ИСТИНА)
	|				ТОГДА ТаблицаРегистра.СтоимостьОборот - ТаблицаРегистра.НДСОборот
	|			ИНАЧЕ ТаблицаРегистра.СтоимостьОборот
	|		КОНЕЦ КАК СуммаБезНДС,
	|		ТаблицаРегистра.СтоимостьБезСкидокОборот КАК СуммаБезСкидки,
	|		ТаблицаРегистра.НДСОборот КАК СуммаНДС,
	|		ВЫБОР
	|			КОГДА ТаблицаРегистра.НДСОборот = 0
	|					ИЛИ НЕ ЕСТЬNULL(Ведущая.УчитыватьНДС, ИСТИНА)
	|				ТОГДА 0
	|			ИНАЧЕ (ВЫРАЗИТЬ(1 / (ВЫБОР
	|						КОГДА ЕСТЬNULL(Ведущая.ЦенаВключаетНДС, ИСТИНА)
	|							ТОГДА ТаблицаРегистра.СтоимостьОборот - ТаблицаРегистра.НДСОборот
	|						ИНАЧЕ ТаблицаРегистра.СтоимостьОборот
	|					КОНЕЦ / ТаблицаРегистра.НДСОборот) КАК ЧИСЛО(5, 2))) * 100
	|		КОНЕЦ КАК СтавкаНДС,
	|		Ведущая.КодОплаты КАК КодОплаты,
	|		Ведущая.КодОплаты КАК КлючГруппировки,
	|		ЕСТЬNULL(ТаблицаРеализация.Контрагент.IDN, """") КАК КодПокупателя,
	|		Ведущая.КодОтдела КАК КодОтдела
	|	ИЗ
	|		Фильтр КАК Ведущая
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(, , Регистратор, ) КАК ТаблицаРегистра
	|			ПО Ведущая.Ссылка = ТаблицаРегистра.Регистратор
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваров КАК ТаблицаРеализация
	|			ПО Ведущая.Ссылка = ТаблицаРеализация.Ссылка
	|	ГДЕ
	|		НЕ Ведущая.РозничныеПродажи
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаРегистра.Период,
	|		Ведущая.Ссылка,
	|		99999999998,
	|		ТаблицаРегистра.Номенклатура,
	|		ТаблицаРегистра.КоличествоОборот,
	|		ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ТаблицаРегистра.КоличествоОборот = 0
	|					ТОГДА ТаблицаРегистра.СтоимостьОборот
	|				ИНАЧЕ ТаблицаРегистра.СтоимостьОборот / ТаблицаРегистра.КоличествоОборот
	|			КОНЕЦ КАК ЧИСЛО(15, 2)),
	|		ТаблицаРегистра.СтоимостьОборот,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(Ведущая.УчитыватьНДС, ИСТИНА)
	|					И ЕСТЬNULL(Ведущая.ЦенаВключаетНДС, ИСТИНА)
	|				ТОГДА ТаблицаРегистра.СтоимостьОборот - ТаблицаРегистра.НДСОборот
	|			ИНАЧЕ ТаблицаРегистра.СтоимостьОборот
	|		КОНЕЦ,
	|		ТаблицаРегистра.СтоимостьБезСкидокОборот,
	|		ТаблицаРегистра.НДСОборот,
	|		ВЫБОР
	|			КОГДА ТаблицаРегистра.НДСОборот = 0
	|					ИЛИ НЕ ЕСТЬNULL(Ведущая.УчитыватьНДС, ИСТИНА)
	|				ТОГДА 0
	|			ИНАЧЕ (ВЫРАЗИТЬ(1 / (ВЫБОР
	|						КОГДА ЕСТЬNULL(Ведущая.ЦенаВключаетНДС, ИСТИНА)
	|							ТОГДА ТаблицаРегистра.СтоимостьОборот - ТаблицаРегистра.НДСОборот
	|						ИНАЧЕ ТаблицаРегистра.СтоимостьОборот
	|					КОНЕЦ / ТаблицаРегистра.НДСОборот) КАК ЧИСЛО(5, 2))) * 100
	|		КОНЕЦ,
	|		Ведущая.КодОплаты,
	|		Ведущая.КодОплаты,
	|		ЕСТЬNULL(ТаблицаВозвраты.Контрагент.IDN, """"),
	|		Ведущая.КодОтдела
	|	ИЗ
	|		Фильтр КАК Ведущая
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(, , Регистратор, ) КАК ТаблицаРегистра
	|			ПО Ведущая.Ссылка = ТаблицаРегистра.Регистратор
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ТаблицаВозвраты
	|			ПО Ведущая.Ссылка = ТаблицаВозвраты.Ссылка
	|	ГДЕ
	|		НЕ Ведущая.РозничныеПродажи
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаРегистра.Период,
	|		Ведущая.Ссылка,
	|		99999999999,
	|		ТаблицаРегистра.Номенклатура,
	|		ТаблицаРегистра.КоличествоОборот,
	|		ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ТаблицаРегистра.КоличествоОборот = 0
	|					ТОГДА ТаблицаРегистра.СтоимостьОборот
	|				ИНАЧЕ ТаблицаРегистра.СтоимостьОборот / ТаблицаРегистра.КоличествоОборот
	|			КОНЕЦ КАК ЧИСЛО(15, 2)),
	|		ТаблицаРегистра.СтоимостьОборот,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(Ведущая.УчитыватьНДС, ИСТИНА)
	|					И ЕСТЬNULL(Ведущая.ЦенаВключаетНДС, ИСТИНА)
	|				ТОГДА ТаблицаРегистра.СтоимостьОборот - ТаблицаРегистра.НДСОборот
	|			ИНАЧЕ ТаблицаРегистра.СтоимостьОборот
	|		КОНЕЦ,
	|		ТаблицаРегистра.СтоимостьБезСкидокОборот,
	|		ТаблицаРегистра.НДСОборот,
	|		ВЫБОР
	|			КОГДА ТаблицаРегистра.НДСОборот = 0
	|					ИЛИ НЕ ЕСТЬNULL(Ведущая.УчитыватьНДС, ИСТИНА)
	|				ТОГДА 0
	|			ИНАЧЕ (ВЫРАЗИТЬ(1 / (ВЫБОР
	|						КОГДА ЕСТЬNULL(Ведущая.ЦенаВключаетНДС, ИСТИНА)
	|							ТОГДА ТаблицаРегистра.СтоимостьОборот - ТаблицаРегистра.НДСОборот
	|						ИНАЧЕ ТаблицаРегистра.СтоимостьОборот
	|					КОНЕЦ / ТаблицаРегистра.НДСОборот) КАК ЧИСЛО(5, 2))) * 100
	|		КОНЕЦ,
	|		Ведущая.КодОплаты,
	|		Ведущая.КодОплаты,
	|		"""",
	|		Ведущая.КодОтдела
	|	ИЗ
	|		Фильтр КАК Ведущая
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(, , Регистратор, ) КАК ТаблицаРегистра
	|			ПО Ведущая.Ссылка = ТаблицаРегистра.Регистратор
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРегистров КАК ТаблицаКорректировка
	|			ПО Ведущая.Ссылка = ТаблицаКорректировка.Ссылка
	|	ГДЕ
	|		НЕ Ведущая.РозничныеПродажи) КАК ТаблицаРеализация
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРеализация.Дата,
	|	ТаблицаРеализация.Ссылка,
	|	ТаблицаРеализация.Номенклатура,
	|	ТаблицаРеализация.Цена,
	|	ТаблицаРеализация.СтавкаНДС,
	|	ТаблицаРеализация.КодОплаты,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаРеализация.Номенклатура.IDN, """") = """"
	|				И ТаблицаРеализация.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.СкидочныйКупон)
	|			ТОГДА ""6005308""
	|		ИНАЧЕ ТаблицаРеализация.Номенклатура.IDN
	|	КОНЕЦ,
	|	ТаблицаРеализация.КлючГруппировки,
	|	ТаблицаРеализация.КодПокупателя,
	|	ТаблицаРеализация.КодОтдела
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(Продажи.НомерСтроки) КАК НомерСтроки,
	|	Продажи.Номенклатура КАК Номенклатура,
	|	Продажи.IDN КАК IDN,
	|	СУММА(Продажи.Количество) КАК Количество,
	|	Продажи.Цена КАК Цена,
	|	Продажи.ЦенаБезНДС КАК ЦенаБезНДС,
	|	СУММА(Продажи.Сумма) КАК Сумма,
	|	СУММА(Продажи.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(Продажи.СуммаБезСкидки) КАК СуммаБезСкидки,
	|	СУММА(Продажи.СуммаНДС) КАК СуммаНДС,
	|	СУММА(Продажи.СуммаОкругления) КАК СуммаОкругления,
	|	Продажи.СтавкаНДС КАК СтавкаНДС,
	|	Продажи.КодОплаты КАК КодОплаты,
	|	Продажи.НомерИнтернетЗаказа КАК НомерИнтернетЗаказа,
	|	Продажи.УслугаБанкаПериодПредоставления КАК УслугаБанкаПериодПредоставления,
	|	Продажи.КодПокупателя КАК КодПокупателя,
	|	Продажи.КодОтдела КАК КодОтдела
	|ИЗ
	|	Продажи КАК Продажи
	|
	|СГРУППИРОВАТЬ ПО
	|	Продажи.Номенклатура,
	|	Продажи.IDN,
	|	Продажи.Цена,
	|	Продажи.ЦенаБезНДС,
	|	Продажи.СтавкаНДС,
	|	Продажи.КодОплаты,
	|	Продажи.НомерИнтернетЗаказа,
	|	Продажи.УслугаБанкаПериодПредоставления,
	|	Продажи.КодПокупателя,
	|	Продажи.КодОтдела
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(Продажи.Сумма) = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодОплаты УБЫВ,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Фильтр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СтавкиНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Продажи"
	;
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаОбщиеПродажиКасса()	Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка КАК ДокументПродажи,
	|	ТаблицаДокументы.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ИСТИНА КАК УчитыватьНДС,
	|	ИСТИНА КАК Розница,
	|	ТаблицаДокументы.ВидОперации КАК ВидОперации,
	|	ТаблицаДокументы.СуммаДокумента КАК СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ЕСТЬNULL(ТаблицаДокументы.ЧекККМПродажа.ЗаказПокупателя.Номер, """")
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаДокументы.ЗаказПокупателя.Номер, """")
	|	КОНЕЦ КАК НомерИнтернетЗаказа,
	|	ТаблицаДокументы.Организация.IDN КАК КодОтдела
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	Документ.ЧекККМ КАК ТаблицаДокументы
	|ГДЕ
	|	ТаблицаДокументы.ОтчетОРозничныхПродажах.КассоваяСмена.КассовыйДень = &КассовыйДень
	|	И НЕ ТаблицаДокументы.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаРегистраций.Объект,
	|	ЕСТЬNULL(ТаблицаРегистраций.Объект.ЦенаВключаетНДС, ИСТИНА),
	|	ЕСТЬNULL(ТаблицаРегистраций.Объект.УчитыватьНДС, ИСТИНА),
	|	ЛОЖЬ,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	"""",
	|	ЕСТЬNULL(ТаблицаРегистраций.Объект.Организация.IDN, """")
	|ИЗ
	|	РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаРегистраций
	|ГДЕ
	|	ТаблицаРегистраций.КассовыйДень = &КассовыйДень
	|	И (ТаблицаРегистраций.Объект ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ИЛИ ТаблицаРегистраций.Объект ССЫЛКА Документ.КорректировкаРегистров
	|			ИЛИ ТаблицаРегистраций.Объект ССЫЛКА Документ.РеализацияТоваров)
	|	И НЕ ТаблицаРегистраций.Объект.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПродажи,
	|	НомерИнтернетЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Фильтр.ДокументПродажи КАК ДокументПродажи,
	|	Фильтр.НомерИнтернетЗаказа КАК НомерИнтернетЗаказа,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВидНоменклатуры.IDN, """") = """"
	|			ТОГДА ""ИГРУШКИ""
	|		ИНАЧЕ ТаблицаТовары.Номенклатура.ВидНоменклатуры.IDN
	|	КОНЕЦ КАК Проект,
	|	СУММА(ТаблицаТовары.Сумма + ВЫБОР
	|			КОГДА Фильтр.УчитыватьНДС
	|					И НЕ Фильтр.ЦенаВключаетНДС
	|				ТОГДА ТаблицаТовары.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) * ВЫБОР
	|		КОГДА Фильтр.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Сумма,
	|	Фильтр.КодОтдела КАК КодОтдела
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ТаблицаТовары
	|		ПО Фильтр.ДокументПродажи = ТаблицаТовары.Ссылка
	|ГДЕ
	|	Фильтр.Розница
	|
	|СГРУППИРОВАТЬ ПО
	|	Фильтр.ДокументПродажи,
	|	ТаблицаТовары.Номенклатура.ВидНоменклатуры.IDN,
	|	Фильтр.ВидОперации,
	|	Фильтр.НомерИнтернетЗаказа,
	|	Фильтр.КодОтдела
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Фильтр.ДокументПродажи,
	|	Фильтр.НомерИнтернетЗаказа,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСертификаты.ПодарочныйСертификат.ВидНоменклатуры.IDN, """") = """"
	|			ТОГДА ""ИГРУШКИ""
	|		ИНАЧЕ ТаблицаСертификаты.ПодарочныйСертификат.ВидНоменклатуры.IDN
	|	КОНЕЦ,
	|	-СУММА(0.01),
	|	Фильтр.КодОтдела
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.ПогашениеПодарочныхСертификатов КАК ТаблицаСертификаты
	|		ПО Фильтр.ДокументПродажи = ТаблицаСертификаты.Ссылка
	|ГДЕ
	|	Фильтр.Розница
	|	И Фильтр.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|
	|СГРУППИРОВАТЬ ПО
	|	Фильтр.ДокументПродажи,
	|	ТаблицаСертификаты.ПодарочныйСертификат.ВидНоменклатуры.IDN,
	|	Фильтр.НомерИнтернетЗаказа,
	|	Фильтр.КодОтдела
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Фильтр.ДокументПродажи,
	|	Фильтр.НомерИнтернетЗаказа,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВидНоменклатуры.IDN, """") = """"
	|			ТОГДА ""ИГРУШКИ""
	|		ИНАЧЕ ТаблицаТовары.Номенклатура.ВидНоменклатуры.IDN
	|	КОНЕЦ,
	|	СУММА(ТаблицаТовары.Сумма + ВЫБОР
	|			КОГДА Фильтр.УчитыватьНДС
	|					И НЕ Фильтр.ЦенаВключаетНДС
	|				ТОГДА ТаблицаТовары.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	Фильтр.КодОтдела
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваров.Товары КАК ТаблицаТовары
	|		ПО Фильтр.ДокументПродажи = ТаблицаТовары.Ссылка
	|ГДЕ
	|	НЕ Фильтр.Розница
	|
	|СГРУППИРОВАТЬ ПО
	|	Фильтр.ДокументПродажи,
	|	ТаблицаТовары.Номенклатура.ВидНоменклатуры.IDN,
	|	Фильтр.НомерИнтернетЗаказа,
	|	Фильтр.КодОтдела
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Фильтр.ДокументПродажи,
	|	Фильтр.НомерИнтернетЗаказа,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВидНоменклатуры.IDN, """") = """"
	|			ТОГДА ""ИГРУШКИ""
	|		ИНАЧЕ ТаблицаТовары.Номенклатура.ВидНоменклатуры.IDN
	|	КОНЕЦ,
	|	-СУММА(ТаблицаТовары.Сумма + ВЫБОР
	|			КОГДА Фильтр.УчитыватьНДС
	|					И НЕ Фильтр.ЦенаВключаетНДС
	|				ТОГДА ТаблицаТовары.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	Фильтр.КодОтдела
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаТовары
	|		ПО Фильтр.ДокументПродажи = ТаблицаТовары.Ссылка
	|ГДЕ
	|	НЕ Фильтр.Розница
	|
	|СГРУППИРОВАТЬ ПО
	|	Фильтр.ДокументПродажи,
	|	ТаблицаТовары.Номенклатура.ВидНоменклатуры.IDN,
	|	Фильтр.НомерИнтернетЗаказа,
	|	Фильтр.КодОтдела
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПродажи,
	|	НомерИнтернетЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Фильтр.ДокументПродажи КАК ДокументПродажи,
	|	СУММА(ТаблицаОплата.Сумма) КАК СуммаНеНаличные
	|ПОМЕСТИТЬ Безнал
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Оплата КАК ТаблицаОплата
	|		ПО Фильтр.ДокументПродажи = ТаблицаОплата.Ссылка
	|ГДЕ
	|	Фильтр.Розница
	|	И НЕ ТаблицаОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|
	|СГРУППИРОВАТЬ ПО
	|	Фильтр.ДокументПродажи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Фильтр.ДокументПродажи КАК ДокументПродажи,
	|	Фильтр.НомерИнтернетЗаказа КАК НомерИнтернетЗаказа,
	|	ТаблицаОплата.ВидОплаты.ТипОплаты КАК ТипОплаты,
	|	ВЫБОР
	|		КОГДА СУММА(ТаблицаОплата.Сумма) > Фильтр.СуммаДокумента
	|			ТОГДА Фильтр.СуммаДокумента
	|		ИНАЧЕ СУММА(ТаблицаОплата.Сумма)
	|	КОНЕЦ * ВЫБОР
	|		КОГДА Фильтр.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Сумма,
	|	Фильтр.КодОтдела КАК КодОтдела
	|ПОМЕСТИТЬ Деньги
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Оплата КАК ТаблицаОплата
	|		ПО Фильтр.ДокументПродажи = ТаблицаОплата.Ссылка
	|ГДЕ
	|	Фильтр.Розница
	|	И НЕ ТаблицаОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплата.ВидОплаты.ТипОплаты,
	|	Фильтр.ДокументПродажи,
	|	Фильтр.ВидОперации,
	|	Фильтр.СуммаДокумента,
	|	Фильтр.НомерИнтернетЗаказа,
	|	Фильтр.КодОтдела
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведущая.ДокументПродажи,
	|	Ведущая.НомерИнтернетЗаказа,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные),
	|	ВЫБОР
	|		КОГДА Ведущая.СуммаДокумента - ЕСТЬNULL(ДругиеОплаты.СуммаНеНаличные, 0) > 0
	|			ТОГДА Ведущая.СуммаДокумента - ЕСТЬNULL(ДругиеОплаты.СуммаНеНаличные, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ * ВЫБОР
	|		КОГДА Ведущая.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	Ведущая.КодОтдела
	|ИЗ
	|	Фильтр КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Безнал КАК ДругиеОплаты
	|		ПО Ведущая.ДокументПродажи = ДругиеОплаты.ДокументПродажи
	|ГДЕ
	|	Ведущая.Розница
	|	И Ведущая.СуммаДокумента - ЕСТЬNULL(ДругиеОплаты.СуммаНеНаличные, 0) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Фильтр.ДокументПродажи,
	|	Фильтр.НомерИнтернетЗаказа,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные),
	|	-СУММА(0.01),
	|	Фильтр.КодОтдела
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.ПогашениеПодарочныхСертификатов КАК ТаблицаТовары
	|		ПО Фильтр.ДокументПродажи = ТаблицаТовары.Ссылка
	|ГДЕ
	|	Фильтр.Розница
	|	И Фильтр.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|
	|СГРУППИРОВАТЬ ПО
	|	Фильтр.ДокументПродажи,
	|	Фильтр.НомерИнтернетЗаказа,
	|	Фильтр.КодОтдела
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Фильтр.ДокументПродажи,
	|	Фильтр.НомерИнтернетЗаказа,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Фильтр.ДокументПродажи) = ТИП(Документ.РеализацияТоваров)
	|			ТОГДА Фильтр.ДокументПродажи.ТипОплаты
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПустаяСсылка)
	|	КОНЕЦ,
	|	СУММА(Товары.Сумма),
	|	Фильтр.КодОтдела
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО Фильтр.ДокументПродажи = Товары.ДокументПродажи
	|ГДЕ
	|	НЕ Фильтр.Розница
	|
	|СГРУППИРОВАТЬ ПО
	|	Фильтр.ДокументПродажи,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Фильтр.ДокументПродажи) = ТИП(Документ.РеализацияТоваров)
	|			ТОГДА Фильтр.ДокументПродажи.ТипОплаты
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПустаяСсылка)
	|	КОНЕЦ,
	|	Фильтр.НомерИнтернетЗаказа,
	|	Фильтр.КодОтдела
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПродажи,
	|	НомерИнтернетЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(Товары.Сумма, 0)) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК Ключ) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведущая.КодОтдела КАК КодОтдела,
	|	0 КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Деньги.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	|			ТОГДА 3
	|		КОГДА Деньги.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|			ТОГДА 1
	|		КОГДА Деньги.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПодарочныйСертификат)
	|			ТОГДА 9
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК КодОплаты,
	|	Товары.Проект КАК IDN,
	|	СУММА(ВЫРАЗИТЬ(Товары.Сумма / Ведущая.Сумма * Деньги.Сумма КАК ЧИСЛО(19, 2))) КАК Сумма,
	|	Ведущая.НомерИнтернетЗаказа КАК НомерИнтернетЗаказа
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.ДокументПродажи КАК ДокументПродажи,
	|		Товары.НомерИнтернетЗаказа КАК НомерИнтернетЗаказа,
	|		СУММА(Товары.Сумма) КАК Сумма,
	|		Товары.КодОтдела КАК КодОтдела
	|	ИЗ
	|		Товары КАК Товары
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Товары.ДокументПродажи,
	|		Товары.НомерИнтернетЗаказа,
	|		Товары.КодОтдела
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(Товары.Сумма) <> 0) КАК Ведущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО Ведущая.ДокументПродажи = Товары.ДокументПродажи
	|			И Ведущая.НомерИнтернетЗаказа = Товары.НомерИнтернетЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Деньги КАК Деньги
	|		ПО Ведущая.ДокументПродажи = Деньги.ДокументПродажи
	|			И Ведущая.НомерИнтернетЗаказа = Деньги.НомерИнтернетЗаказа
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Проект,
	|	Ведущая.НомерИнтернетЗаказа,
	|	ВЫБОР
	|		КОГДА Деньги.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	|			ТОГДА 3
	|		КОГДА Деньги.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|			ТОГДА 1
	|		КОГДА Деньги.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПодарочныйСертификат)
	|			ТОГДА 9
	|		ИНАЧЕ 2
	|	КОНЕЦ,
	|	Ведущая.КодОтдела
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Фильтр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Деньги";

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаОбщиеПродажиБонус()	//	LNK 29.07.2021 06:45:51

//	Постановка от Гальчуна. [Тип документа] = "ОБЩ.ПРОД.БОНУС"
//	Поля для заполнения отмечены плюсом.
//                +[Документ Но_] [varchar](20) NOT NULL,					-- Номер документа
//                +[Тип Документа] [varchar](20) NOT NULL,					-- Тип документа
//                +[Строка Но_] [int] NOT NULL,								-- Номер строки в документе
//                +[Товар Но_] [varchar](10) NOT NULL,						-- Код товара
//                +[Кол-во баз_] [int] NOT NULL,							-- Кол-во товара в чеке (прим. НЕ РАЗМАЗЫВАТЬ ПО ПРОГРАММАМ ЛОЯЛЬНОСТИ! - указывать цифру, которая в "Товары")
//                -[Цена] [decimal](38, 20) NOT NULL,
//                -[Цена без НДС] [decimal](38, 20) NOT NULL,
//                -[Ставка НДС] [decimal](38, 20) NOT NULL,
//                +[Сумма] [decimal](38, 20) NOT NULL,						-- Сумма бонусов по товару
//                -[Сумма Без НДС] [decimal](38, 20) NOT NULL,
//                -[Код Оплаты] [int] NOT NULL,
//                +[Клиент Антошка] [varchar](10) NOT NULL,					-- Код клиента
//                -[Сумма Без Скидки] [decimal](38, 20) NOT NULL,
//                -[Номер Интернет Заказа] [varchar](20) NOT NULL,
//                -[Номер Договора Страхования] [varchar](20) NOT NULL,
//                -[QtyMonth] [int] NOT NULL,
//                -[Сумма Округления] [decimal](38, 20) NOT NULL,
//                +[ДатаНачисления] [datetime] NOT NULL,					-- Дата начисления(активации) бонусов
//                +[ДатаСписания] [datetime] NOT NULL,						-- Дата списания(аннуляции) бонусов
//                +[Номер Чека] [varchar](30) NOT NULL,						-- Номер чека
//                +[Номер Чека к возврату] [varchar](30) NOT NULL,			-- Номер чека по которому возврат
//                +[Дата Чека к возврату] [datetime] NOT NULL,				-- Дата чека по которому возврат
//                +[Тип операции] [int] NOT NULL,							-- Тип операции(1-начисление; 2-списание)
//                +[BonusID] [varchar](30) NOT NULL 						-- Код программы лояльности

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Ссылка КАК ОтчетОРозничныхПродажах
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ТаблицаПродажи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК ТаблицаСмены
	|		ПО ТаблицаПродажи.КассоваяСмена = ТаблицаСмены.Ссылка
	|ГДЕ
	|	ТаблицаСмены.КассовыйДень = &КассовыйДень
	|	И ТИПЗНАЧЕНИЯ(&КассовыйДень) = ТИП(Документ.КассовыйДень)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтчетОРозничныхПродажах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВедущаяЧеки.Дата КАК Дата,
	|	""ЧК."" + ВедущаяЧеки.Номер КАК Номер,
	|	ВедущаяЧеки.ВидОперации КАК ВидОперации,
	|	ВедущаяЧеки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЕСТЬNULL(ВедущаяЧеки.ЗаказПокупателя.Номер, """") КАК НомерИнтернетЗаказа,
	|	ВедущаяЧеки.Ссылка КАК ДокументДвижения,
	|	ЕСТЬNULL(ВедущаяЧеки.ВладелецДисконтнойКарты.Код, """") КАК КодПокупателя,
	|	ВЫБОР
	|		КОГДА ВедущаяЧеки.ЧекККМПродажа = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
	|			ТОГДА """"
	|		ИНАЧЕ ""ЧК."" + ВедущаяЧеки.ЧекККМПродажа.Номер
	|	КОНЕЦ КАК ПродажаНомер,
	|	ВЫБОР
	|		КОГДА ВедущаяЧеки.ЧекККМПродажа = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ВедущаяЧеки.ЧекККМПродажа.Дата
	|	КОНЕЦ КАК ПродажаДата,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.IDN КАК IDN,
	|	ВЫБОР
	|		КОГДА ВедущаяЧеки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА -ТаблицаТовары.Количество
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ТаблицаТовары.КлючСвязи КАК КлючСвязи,
	|	ТаблицаТовары.КлючСвязиБонусныхБаллов КАК КлючСвязиБонусныхБаллов
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ЧекККМ КАК ВедущаяЧеки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
	|		ПО ВедущаяЧеки.ОтчетОРозничныхПродажах = Фильтр.ОтчетОРозничныхПродажах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ТаблицаТовары
	|		ПО ВедущаяЧеки.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ
	|	ВедущаяЧеки.Проведен
	|	И ВедущаяЧеки.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФильтрЧеки.Дата,
	|	""ЧК."" + ФильтрЧеки.Номер,
	|	ФильтрЧеки.ВидОперации,
	|	ВедущаяЗаказы.Ссылка,
	|	ВедущаяЗаказы.Номер,
	|	ВедущаяЗаказы.Ссылка,
	|	ЕСТЬNULL(ВедущаяЗаказы.Контрагент.Код, """"),
	|	"""",
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Номенклатура.IDN,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.КлючСвязи,
	|	ТаблицаТовары.КлючСвязиБонусныхБаллов
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ВедущаяЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ФильтрЧеки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
	|			ПО ФильтрЧеки.ОтчетОРозничныхПродажах = Фильтр.ОтчетОРозничныхПродажах
	|		ПО ВедущаяЗаказы.Ссылка = ФильтрЧеки.ЗаказПокупателя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ТаблицаТовары
	|		ПО ВедущаяЗаказы.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ
	|	ФильтрЧеки.Проведен
	|	И ФильтрЧеки.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|	И ФильтрЧеки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедущаяРеализации.Дата,
	|	""РТ."" + ВедущаяРеализации.Номер,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа),
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
	|	"""",
	|	ВедущаяРеализации.Ссылка,
	|	ВедущаяРеализации.Контрагент.Код,
	|	"""",
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Номенклатура.IDN,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.КлючСвязи,
	|	0
	|ИЗ
	|	Документ.РеализацияТоваров КАК ВедущаяРеализации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК Регистрация
	|		ПО ВедущаяРеализации.Ссылка = Регистрация.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваров.Товары КАК ТаблицаТовары
	|		ПО ВедущаяРеализации.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ
	|	Регистрация.КассовыйДень = &КассовыйДень
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедущаяВозвраты.Дата,
	|	""ПВ."" + ВедущаяВозвраты.Номер,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат),
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
	|	"""",
	|	ВедущаяВозвраты.Ссылка,
	|	ВедущаяВозвраты.Контрагент.Код,
	|	""РТ."" + ВедущаяВозвраты.ДокументОснование.Номер,
	|	ВедущаяВозвраты.ДокументОснование.Дата,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Номенклатура.IDN,
	|	-ТаблицаТовары.Количество,
	|	ТаблицаТовары.КлючСвязи,
	|	0
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВедущаяВозвраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК Регистрация
	|		ПО ВедущаяВозвраты.Ссылка = Регистрация.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаТовары
	|		ПО ВедущаяВозвраты.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ
	|	Регистрация.КассовыйДень = &КассовыйДень
	|	И ВедущаяВозвраты.ДокументОснование ССЫЛКА Документ.РеализацияТоваров
	|	И НЕ ВедущаяВозвраты.ДокументОснование = ЗНАЧЕНИЕ(Документ.РеализацияТоваров.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументДвижения,
	|	КлючСвязи,
	|	КлючСвязиБонусныхБаллов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Фильтр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК НомерСтроки,
	|	НачисленияСписания.Дата КАК ОперацияДата,
	|	""НС."" + НачисленияСписания.Номер КАК ОперацияНомер,
	|	НачисленияСписания.ВидОперации КАК ВидОперации,
	|	НачисленияСписания.Ссылка КАК ДокументДвижения,
	|	ЕСТЬNULL(НачисленияСписания.КодБюджета.Код, """") КАК КодБюджета,
	|	НачисленияСписания.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА НачисленияСписания.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|				ТОГДА ДОБАВИТЬКДАТЕ(НачисленияСписания.Дата, ДЕНЬ, НачисленияСписания.КоличествоПериодовОтсрочкиНачалаДействия)
	|			КОГДА НачисленияСписания.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|				ТОГДА ДОБАВИТЬКДАТЕ(НачисленияСписания.Дата, НЕДЕЛЯ, НачисленияСписания.КоличествоПериодовОтсрочкиНачалаДействия)
	|			КОГДА НачисленияСписания.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|				ТОГДА ДОБАВИТЬКДАТЕ(НачисленияСписания.Дата, МЕСЯЦ, НачисленияСписания.КоличествоПериодовОтсрочкиНачалаДействия)
	|			КОГДА НачисленияСписания.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|				ТОГДА ДОБАВИТЬКДАТЕ(НачисленияСписания.Дата, КВАРТАЛ, НачисленияСписания.КоличествоПериодовОтсрочкиНачалаДействия)
	|			КОГДА НачисленияСписания.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|				ТОГДА ДОБАВИТЬКДАТЕ(НачисленияСписания.Дата, ГОД, НачисленияСписания.КоличествоПериодовОтсрочкиНачалаДействия)
	|			КОГДА НачисленияСписания.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|				ТОГДА ДОБАВИТЬКДАТЕ(НачисленияСписания.Дата, ДЕКАДА, НачисленияСписания.КоличествоПериодовОтсрочкиНачалаДействия)
	|			КОГДА НачисленияСписания.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|				ТОГДА ДОБАВИТЬКДАТЕ(НачисленияСписания.Дата, ПОЛУГОДИЕ, НачисленияСписания.КоличествоПериодовОтсрочкиНачалаДействия)
	|			ИНАЧЕ НачисленияСписания.Дата
	|		КОНЕЦ, ДЕНЬ) КАК ДатаНачисления,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА НачисленияСписания.ДатаОкончанияСрокаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ВЫБОР
	|						КОГДА НачисленияСписания.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|							ТОГДА ДОБАВИТЬКДАТЕ(НачисленияСписания.Дата, ДЕНЬ, НачисленияСписания.КоличествоПериодовДействия)
	|						КОГДА НачисленияСписания.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|							ТОГДА ДОБАВИТЬКДАТЕ(НачисленияСписания.Дата, НЕДЕЛЯ, НачисленияСписания.КоличествоПериодовДействия)
	|						КОГДА НачисленияСписания.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|							ТОГДА ДОБАВИТЬКДАТЕ(НачисленияСписания.Дата, МЕСЯЦ, НачисленияСписания.КоличествоПериодовДействия)
	|						КОГДА НачисленияСписания.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|							ТОГДА ДОБАВИТЬКДАТЕ(НачисленияСписания.Дата, КВАРТАЛ, НачисленияСписания.КоличествоПериодовДействия)
	|						КОГДА НачисленияСписания.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|							ТОГДА ДОБАВИТЬКДАТЕ(НачисленияСписания.Дата, ГОД, НачисленияСписания.КоличествоПериодовДействия)
	|						КОГДА НачисленияСписания.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|							ТОГДА ДОБАВИТЬКДАТЕ(НачисленияСписания.Дата, ДЕКАДА, НачисленияСписания.КоличествоПериодовДействия)
	|						КОГДА НачисленияСписания.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|							ТОГДА ДОБАВИТЬКДАТЕ(НачисленияСписания.Дата, ПОЛУГОДИЕ, НачисленияСписания.КоличествоПериодовДействия)
	|						ИНАЧЕ НачисленияСписания.Дата
	|					КОНЕЦ
	|			ИНАЧЕ НачисленияСписания.ДатаОкончанияСрокаДействия
	|		КОНЕЦ, ДЕНЬ) КАК ДатаСписания,
	|	"""" КАК IDN,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	0 КАК Количество,
	|	"""" КАК ПродажаНомер,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ПродажаДата,
	|	0 КАК КлючСвязи
	|ПОМЕСТИТЬ Ручная
	|ИЗ
	|	Документ.НачислениеИСписаниеБонусныхБаллов КАК НачисленияСписания
	|ГДЕ
	|	НачисленияСписания.Ссылка = &КассовыйДень
	|	И НачисленияСписания.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК НомерСтроки,
	|	ВедущаяЧеки.Дата КАК ОперацияДата,
	|	ВедущаяЧеки.Номер КАК ОперацияНомер,
	|	ВедущаяЧеки.НомерИнтернетЗаказа КАК НомерИнтернетЗаказа,
	|	"""" КАК КодБюджета,
	|	ВедущаяЧеки.IDN КАК IDN,
	|	ВедущаяЧеки.Номенклатура КАК Номенклатура,
	|	ВедущаяЧеки.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ВедущаяЧеки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА -ТаблицаСкидки.Сумма
	|		ИНАЧЕ ТаблицаСкидки.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаНачисления.ПрограммаЛояльности.Код КАК ПрограммаЛояльности,
	|	ВЫБОР
	|		КОГДА ТаблицаНачисления.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Органический)
	|			ТОГДА 1
	|		КОГДА ТаблицаНачисления.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Привлечение)
	|			ТОГДА 2
	|		КОГДА ТаблицаНачисления.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Акционный)
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТипБонусовНомер,
	|	ТаблицаНачисления.ДатаНачисления КАК ДатаНачисления,
	|	ТаблицаНачисления.ДатаСписания КАК ДатаСписания,
	|	ВедущаяЧеки.КодПокупателя КАК КодПокупателя,
	|	"""" КАК КодПоставщика,
	|	ВедущаяЧеки.ПродажаНомер КАК ПродажаНомер,
	|	ВедущаяЧеки.ПродажаДата КАК ПродажаДата,
	|	ВедущаяЧеки.КлючСвязи КАК КлючСвязи,
	|	1 КАК ТипОперации
	|ИЗ
	|	Товары КАК ВедущаяЧеки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.СкидкиНаценки КАК ТаблицаСкидки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.НачислениеБонусныхБаллов КАК ТаблицаНачисления
	|			ПО ТаблицаСкидки.Ссылка = ТаблицаНачисления.Ссылка
	|				И ТаблицаСкидки.СкидкаНаценка.ПрограммаЛояльности = ТаблицаНачисления.ПрограммаЛояльности
	|		ПО ВедущаяЧеки.ДокументДвижения = ТаблицаСкидки.Ссылка
	|			И ВедущаяЧеки.КлючСвязи = ТаблицаСкидки.КлючСвязи
	|ГДЕ
	|	ВедущаяЧеки.ДокументДвижения ССЫЛКА Документ.ЧекККМ
	|	И ТаблицаСкидки.СпособПримененияСкидки = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы)
	|	И НЕ ТаблицаСкидки.СкидкаНаценка.ПрограммаЛояльности = ЗНАЧЕНИЕ(Справочник.ПрограммыЛояльности.ПустаяСсылка)
	|	И ВедущаяЧеки.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ВедущаяЧеки.Дата,
	|	ВедущаяЧеки.Номер,
	|	ВедущаяЧеки.НомерИнтернетЗаказа,
	|	"""",
	|	ВедущаяЧеки.IDN,
	|	ВедущаяЧеки.Номенклатура,
	|	ВедущаяЧеки.Количество,
	|	ВЫБОР
	|		КОГДА ВедущаяЧеки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА -ТаблицаСписания.СуммаБонусныхБаллов
	|		ИНАЧЕ ТаблицаСписания.СуммаБонусныхБаллов
	|	КОНЕЦ,
	|	ТаблицаСписания.ПрограммаЛояльности.Код,
	|	ВЫБОР
	|		КОГДА ТаблицаСписания.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Органический)
	|			ТОГДА 1
	|		КОГДА ТаблицаСписания.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Привлечение)
	|			ТОГДА 2
	|		КОГДА ТаблицаСписания.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Акционный)
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ВедущаяЧеки.Дата,
	|	ВедущаяЧеки.КодПокупателя,
	|	"""",
	|	ВедущаяЧеки.ПродажаНомер,
	|	ВедущаяЧеки.ПродажаДата,
	|	ВедущаяЧеки.КлючСвязиБонусныхБаллов,
	|	2
	|ИЗ
	|	Товары КАК ВедущаяЧеки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.ОплатаБонуснымиБаллами КАК ТаблицаСписания
	|		ПО ВедущаяЧеки.ДокументДвижения = ТаблицаСписания.Ссылка
	|			И ВедущаяЧеки.КлючСвязиБонусныхБаллов = ТаблицаСписания.КлючСвязиБонусныхБаллов
	|ГДЕ
	|	ВедущаяЧеки.ДокументДвижения ССЫЛКА Документ.ЧекККМ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ВедущаяРеализация.Дата,
	|	ВедущаяРеализация.Номер,
	|	ВедущаяРеализация.НомерИнтернетЗаказа,
	|	"""",
	|	ВедущаяРеализация.IDN,
	|	ВедущаяРеализация.Номенклатура,
	|	ВедущаяРеализация.Количество,
	|	ТаблицаСкидки.Сумма,
	|	ТаблицаНачисления.ПрограммаЛояльности.Код,
	|	ВЫБОР
	|		КОГДА ТаблицаНачисления.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Органический)
	|			ТОГДА 1
	|		КОГДА ТаблицаНачисления.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Привлечение)
	|			ТОГДА 2
	|		КОГДА ТаблицаНачисления.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Акционный)
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаНачисления.ДатаНачисления,
	|	ТаблицаНачисления.ДатаСписания,
	|	ВедущаяРеализация.КодПокупателя,
	|	"""",
	|	ВедущаяРеализация.ПродажаНомер,
	|	ВедущаяРеализация.ПродажаДата,
	|	ВедущаяРеализация.КлючСвязи,
	|	1
	|ИЗ
	|	Товары КАК ВедущаяРеализация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваров.СкидкиНаценки КАК ТаблицаСкидки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваров.НачислениеБонусныхБаллов КАК ТаблицаНачисления
	|			ПО ТаблицаСкидки.Ссылка = ТаблицаНачисления.Ссылка
	|				И ТаблицаСкидки.СкидкаНаценка.ПрограммаЛояльности = ТаблицаНачисления.ПрограммаЛояльности
	|		ПО ВедущаяРеализация.ДокументДвижения = ТаблицаСкидки.Ссылка
	|			И ВедущаяРеализация.КлючСвязи = ТаблицаСкидки.КлючСвязи
	|ГДЕ
	|	ВедущаяРеализация.ДокументДвижения ССЫЛКА Документ.РеализацияТоваров
	|	И ТаблицаСкидки.СпособПримененияСкидки = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы)
	|	И НЕ ТаблицаСкидки.СкидкаНаценка.ПрограммаЛояльности = ЗНАЧЕНИЕ(Справочник.ПрограммыЛояльности.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ВедущаяВозвраты.Дата,
	|	ВедущаяВозвраты.Номер,
	|	ВедущаяВозвраты.НомерИнтернетЗаказа,
	|	"""",
	|	ВедущаяВозвраты.IDN,
	|	ВедущаяВозвраты.Номенклатура,
	|	ВедущаяВозвраты.Количество,
	|	-ТаблицаНачисления.СуммаБонусныхБаллов,
	|	ТаблицаНачисления.ПрограммаЛояльности.Код,
	|	ВЫБОР
	|		КОГДА ТаблицаНачисления.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Органический)
	|			ТОГДА 1
	|		КОГДА ТаблицаНачисления.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Привлечение)
	|			ТОГДА 2
	|		КОГДА ТаблицаНачисления.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Акционный)
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаНачисления.ДатаНачисления,
	|	ТаблицаНачисления.ДатаСписания,
	|	ВедущаяВозвраты.КодПокупателя,
	|	"""",
	|	ВедущаяВозвраты.ПродажаНомер,
	|	ВедущаяВозвраты.ПродажаДата,
	|	ВедущаяВозвраты.КлючСвязи,
	|	1
	|ИЗ
	|	Товары КАК ВедущаяВозвраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.НачислениеБонусныхБаллов КАК ТаблицаНачисления
	|		ПО ВедущаяВозвраты.ДокументДвижения = ТаблицаНачисления.Ссылка
	|			И ВедущаяВозвраты.КлючСвязи = ТаблицаНачисления.КлючСвязи
	|ГДЕ
	|	ВедущаяВозвраты.ДокументДвижения ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	Ведущая.ОперацияДата,
	|	Ведущая.ОперацияНомер,
	|	"""",
	|	Ведущая.КодБюджета,
	|	"""",
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	0,
	|	ТаблицаНачисления.СуммаБонусныхБаллов,
	|	Ведущая.ПрограммаЛояльности.Код,
	|	ВЫБОР
	|		КОГДА Ведущая.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Органический)
	|			ТОГДА 1
	|		КОГДА Ведущая.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Привлечение)
	|			ТОГДА 2
	|		КОГДА Ведущая.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Акционный)
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	Ведущая.ДатаНачисления,
	|	Ведущая.ДатаСписания,
	|	ТаблицаНачисления.Контрагент.Код,
	|	"""",
	|	"""",
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	0,
	|	1
	|ИЗ
	|	Ручная КАК Ведущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеИСписаниеБонусныхБаллов.Начисление КАК ТаблицаНачисления
	|		ПО Ведущая.ДокументДвижения = ТаблицаНачисления.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	Ведущая.ОперацияДата,
	|	Ведущая.ОперацияНомер,
	|	"""",
	|	Ведущая.КодБюджета,
	|	"""",
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	0,
	|	ТаблицаСписание.СуммаБонусныхБаллов,
	|	Ведущая.ПрограммаЛояльности.Код,
	|	ВЫБОР
	|		КОГДА Ведущая.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Органический)
	|			ТОГДА 1
	|		КОГДА Ведущая.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Привлечение)
	|			ТОГДА 2
	|		КОГДА Ведущая.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Акционный)
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	Ведущая.ДатаНачисления,
	|	Ведущая.ДатаСписания,
	|	ТаблицаСписание.Контрагент.Код,
	|	ВЫБОР
	|		КОГДА Ведущая.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНачислениеИСписаниеБонусныхБаллов.ПередачаНаБлаготворительныйФонд)
	|			ТОГДА ТаблицаСписание.КонтрагентПолучатель.IDN
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	"""",
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	0,
	|	2
	|ИЗ
	|	Ручная КАК Ведущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеИСписаниеБонусныхБаллов.Списание КАК ТаблицаСписание
	|		ПО Ведущая.ДокументДвижения = ТаблицаСписание.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ВедущаяЗаказы.Дата,
	|	ВедущаяЗаказы.Номер,
	|	ВедущаяЗаказы.НомерИнтернетЗаказа,
	|	"""",
	|	ВедущаяЗаказы.IDN,
	|	ВедущаяЗаказы.Номенклатура,
	|	ВедущаяЗаказы.Количество,
	|	ТаблицаСкидки.Сумма,
	|	ТаблицаНачисления.ПрограммаЛояльности.Код,
	|	ВЫБОР
	|		КОГДА ТаблицаНачисления.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Органический)
	|			ТОГДА 1
	|		КОГДА ТаблицаНачисления.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Привлечение)
	|			ТОГДА 2
	|		КОГДА ТаблицаНачисления.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Акционный)
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаНачисления.ДатаНачисления,
	|	ТаблицаНачисления.ДатаСписания,
	|	ВедущаяЗаказы.КодПокупателя,
	|	"""",
	|	ВедущаяЗаказы.ПродажаНомер,
	|	ВедущаяЗаказы.ПродажаДата,
	|	ВедущаяЗаказы.КлючСвязи,
	|	1
	|ИЗ
	|	Товары КАК ВедущаяЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.СкидкиНаценки КАК ТаблицаСкидки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.НачислениеБонусныхБаллов КАК ТаблицаНачисления
	|			ПО ТаблицаСкидки.Ссылка = ТаблицаНачисления.Ссылка
	|				И ТаблицаСкидки.СкидкаНаценка.ПрограммаЛояльности = ТаблицаНачисления.ПрограммаЛояльности
	|		ПО ВедущаяЗаказы.ДокументДвижения = ТаблицаСкидки.Ссылка
	|			И ВедущаяЗаказы.КлючСвязи = ТаблицаСкидки.КлючСвязи
	|ГДЕ
	|	ВедущаяЗаказы.ДокументДвижения ССЫЛКА Документ.ЗаказПокупателя
	|	И ТаблицаСкидки.СпособПримененияСкидки = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы)
	|	И НЕ ТаблицаСкидки.СкидкаНаценка.ПрограммаЛояльности = ЗНАЧЕНИЕ(Справочник.ПрограммыЛояльности.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОперацияДата,
	|	ОперацияНомер,
	|	ТипОперации,
	|	КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Ручная"
	;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаОбщиеПродажиБонусMagento()	//	LNK 30.11.2021 15:58:26

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаЗаказов.Объект КАК Документ.ЗаказПокупателя) КАК Объект,
	|	ТаблицаЗаказов.ДатаНачисления КАК ДатаНачисления
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаЗаказов КАК ТаблицаЗаказов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказы.ДатаНачисления КАК Дата,
	|	""ИЗ."" + ТаблицаЗаказы.Объект.Номер КАК Номер,
	|	ТаблицаЗаказы.Объект.Номер КАК НомерИнтернетЗаказа,
	|	ТаблицаЗаказы.Объект КАК ДокументДвижения,
	|	ТаблицаЗаказы.Объект.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	Источник КАК ТаблицаЗаказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Фильтр.Дата КАК Дата,
	|	Фильтр.Номер КАК Номер,
	|	Фильтр.НомерИнтернетЗаказа КАК НомерИнтернетЗаказа,
	|	Фильтр.ДокументДвижения КАК ДокументДвижения,
	|	ЕСТЬNULL(Фильтр.Контрагент.Код, """") КАК КодПокупателя,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.IDN КАК IDN,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.КлючСвязи КАК КлючСвязи,
	|	ТаблицаТовары.КлючСвязиБонусныхБаллов КАК КлючСвязиБонусныхБаллов,
	|	1 КАК OnLine
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
	|		ПО ТаблицаТовары.Ссылка = Фильтр.ДокументДвижения
	|ГДЕ
	|	НЕ ТаблицаТовары.Отменено
	|	И НЕ (ТаблицаТовары.Самовывоз
	|	И ТаблицаТовары.Ссылка.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипОплатыЗаказПокупателя.Наличные))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Фильтр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК НомерСтроки,
	|	ВедущаяЗаказы.Дата КАК ОперацияДата,
	|	ВедущаяЗаказы.Номер КАК ОперацияНомер,
	|	ВедущаяЗаказы.НомерИнтернетЗаказа КАК НомерИнтернетЗаказа,
	|	ВедущаяЗаказы.IDN КАК IDN,
	|	ВедущаяЗаказы.Номенклатура КАК Номенклатура,
	|	ВедущаяЗаказы.Количество КАК Количество,
	|	ТаблицаСкидки.Сумма КАК Сумма,
	|	ТаблицаНачисления.ПрограммаЛояльности.Код КАК ПрограммаЛояльности,
	|	ВЫБОР
	|		КОГДА ТаблицаНачисления.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Органический)
	|			ТОГДА 1
	|		КОГДА ТаблицаНачисления.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Привлечение)
	|			ТОГДА 2
	|		КОГДА ТаблицаНачисления.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Акционный)
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТипБонусовНомер,
	|	ТаблицаНачисления.ДатаНачисления КАК ДатаНачисления,
	|	ТаблицаНачисления.ДатаСписания КАК ДатаСписания,
	|	ВедущаяЗаказы.КодПокупателя КАК КодПокупателя,
	|	ВедущаяЗаказы.КлючСвязи КАК КлючСвязи,
	|	ВедущаяЗаказы.OnLine КАК OnLine,
	|	1 КАК ТипОперации
	|ИЗ
	|	Товары КАК ВедущаяЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.СкидкиНаценки КАК ТаблицаСкидки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.НачислениеБонусныхБаллов КАК ТаблицаНачисления
	|			ПО ТаблицаСкидки.Ссылка = ТаблицаНачисления.Ссылка
	|			И ТаблицаСкидки.СкидкаНаценка.ПрограммаЛояльности = ТаблицаНачисления.ПрограммаЛояльности
	|		ПО ВедущаяЗаказы.ДокументДвижения = ТаблицаСкидки.Ссылка
	|		И ВедущаяЗаказы.КлючСвязи = ТаблицаСкидки.КлючСвязи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ВедущаяЗаказы.Дата,
	|	ВедущаяЗаказы.Номер,
	|	ВедущаяЗаказы.НомерИнтернетЗаказа,
	|	ВедущаяЗаказы.IDN,
	|	ВедущаяЗаказы.Номенклатура,
	|	ВедущаяЗаказы.Количество,
	|	ТаблицаСписания.СуммаБонусныхБаллов,
	|	ТаблицаСписания.ПрограммаЛояльности.Код,
	|	ВЫБОР
	|		КОГДА ТаблицаСписания.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Органический)
	|			ТОГДА 1
	|		КОГДА ТаблицаСписания.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Привлечение)
	|			ТОГДА 2
	|		КОГДА ТаблицаСписания.ПрограммаЛояльности.ТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Акционный)
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ВедущаяЗаказы.Дата,
	|	ВедущаяЗаказы.КодПокупателя,
	|	ВедущаяЗаказы.КлючСвязиБонусныхБаллов,
	|	ВедущаяЗаказы.OnLine,
	|	2
	|ИЗ
	|	Товары КАК ВедущаяЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.ОплатаБонуснымиБаллами КАК ТаблицаСписания
	|		ПО ВедущаяЗаказы.ДокументДвижения = ТаблицаСписания.Ссылка
	|		И ВедущаяЗаказы.КлючСвязиБонусныхБаллов = ТаблицаСписания.КлючСвязиБонусныхБаллов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОперацияДата,
	|	ОперацияНомер,
	|	ТипОперации,
	|	КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Товары"
	;

	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьСуммуИнкассацииКассовогоДня(КассовыйДень)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ТаблицаРегистра.Объект.СуммаДокумента) КАК СуммаДокумента
	|ИЗ
	|	РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.КассовыйДень = &КассовыйДень
	|	И ТаблицаРегистра.Объект ССЫЛКА Документ.РасходныйКассовыйОрдер
	|	И ТаблицаРегистра.Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк)"
	);
	Запрос.УстановитьПараметр("КассовыйДень", КассовыйДень);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

			СуммаИнкассации = ?(Выборка.СуммаДокумента = NULL, 0 , Выборка.СуммаДокумента);

	Иначе	СуммаИнкассации = 0;

	КонецЕсли;

	Возврат СуммаИнкассации;

КонецФункции

//	LNK 05.08.2024 13:34:48
//		индекс на единицу меньший, чем сейчас в коде прописан!
//		нужно искать обращения к функции и индексы привести
//		в нужное состояние!
Функция ТекстЗапросаОбщиеПродажиКасса_OLD()	Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка КАК ДокументПродажи,
	|	ТаблицаДокументы.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ИСТИНА КАК УчитыватьНДС,
	|	ИСТИНА КАК Розница,
	|	ТаблицаДокументы.ВидОперации КАК ВидОперации,
	|	ТаблицаДокументы.СуммаДокумента КАК СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ЕСТЬNULL(ТаблицаДокументы.ЧекККМПродажа.ЗаказПокупателя.Номер, """")
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаДокументы.ЗаказПокупателя.Номер, """")
	|	КОНЕЦ КАК НомерИнтернетЗаказа,
	|	ТаблицаДокументы.Организация.IDN КАК КодОтдела
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	Документ.ЧекККМ КАК ТаблицаДокументы
	|ГДЕ
	|	ТаблицаДокументы.ОтчетОРозничныхПродажах.КассоваяСмена.КассовыйДень = &КассовыйДень
	|	И НЕ ТаблицаДокументы.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаРегистраций.Объект,
	|	ЕСТЬNULL(ТаблицаРегистраций.Объект.ЦенаВключаетНДС, ИСТИНА),
	|	ЕСТЬNULL(ТаблицаРегистраций.Объект.УчитыватьНДС, ИСТИНА),
	|	ЛОЖЬ,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	"""",
	|	ЕСТЬNULL(ТаблицаРегистраций.Объект.Организация.IDN, """")
	|ИЗ
	|	РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаРегистраций
	|ГДЕ
	|	ТаблицаРегистраций.КассовыйДень = &КассовыйДень
	|	И (ТаблицаРегистраций.Объект ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ИЛИ ТаблицаРегистраций.Объект ССЫЛКА Документ.КорректировкаРегистров
	|			ИЛИ ТаблицаРегистраций.Объект ССЫЛКА Документ.РеализацияТоваров)
	|	И НЕ ТаблицаРегистраций.Объект.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПродажи,
	|	НомерИнтернетЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Фильтр.ДокументПродажи КАК ДокументПродажи,
	|	Фильтр.НомерИнтернетЗаказа КАК НомерИнтернетЗаказа,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВидНоменклатуры.IDN, """") = """"
	|			ТОГДА ""ИГРУШКИ""
	|		ИНАЧЕ ТаблицаТовары.Номенклатура.ВидНоменклатуры.IDN
	|	КОНЕЦ КАК Проект,
	|	СУММА(ТаблицаТовары.Сумма + ВЫБОР
	|			КОГДА Фильтр.УчитыватьНДС
	|					И НЕ Фильтр.ЦенаВключаетНДС
	|				ТОГДА ТаблицаТовары.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) * ВЫБОР
	|		КОГДА Фильтр.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Сумма,
	|	Фильтр.КодОтдела КАК КодОтдела
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ТаблицаТовары
	|		ПО Фильтр.ДокументПродажи = ТаблицаТовары.Ссылка
	|ГДЕ
	|	Фильтр.Розница
	|
	|СГРУППИРОВАТЬ ПО
	|	Фильтр.ДокументПродажи,
	|	ТаблицаТовары.Номенклатура.ВидНоменклатуры.IDN,
	|	Фильтр.ВидОперации,
	|	Фильтр.НомерИнтернетЗаказа,
	|	Фильтр.КодОтдела
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Фильтр.ДокументПродажи,
	|	Фильтр.НомерИнтернетЗаказа,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСертификаты.ПодарочныйСертификат.ВидНоменклатуры.IDN, """") = """"
	|			ТОГДА ""ИГРУШКИ""
	|		ИНАЧЕ ТаблицаСертификаты.ПодарочныйСертификат.ВидНоменклатуры.IDN
	|	КОНЕЦ,
	|	-СУММА(0.01),
	|	Фильтр.КодОтдела
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.ПогашениеПодарочныхСертификатов КАК ТаблицаСертификаты
	|		ПО Фильтр.ДокументПродажи = ТаблицаСертификаты.Ссылка
	|ГДЕ
	|	Фильтр.Розница
	|	И Фильтр.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|
	|СГРУППИРОВАТЬ ПО
	|	Фильтр.ДокументПродажи,
	|	ТаблицаСертификаты.ПодарочныйСертификат.ВидНоменклатуры.IDN,
	|	Фильтр.НомерИнтернетЗаказа,
	|	Фильтр.КодОтдела
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Фильтр.ДокументПродажи,
	|	Фильтр.НомерИнтернетЗаказа,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВидНоменклатуры.IDN, """") = """"
	|			ТОГДА ""ИГРУШКИ""
	|		ИНАЧЕ ТаблицаТовары.Номенклатура.ВидНоменклатуры.IDN
	|	КОНЕЦ,
	|	СУММА(ТаблицаТовары.Сумма + ВЫБОР
	|			КОГДА Фильтр.УчитыватьНДС
	|					И НЕ Фильтр.ЦенаВключаетНДС
	|				ТОГДА ТаблицаТовары.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	Фильтр.КодОтдела
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваров.Товары КАК ТаблицаТовары
	|		ПО Фильтр.ДокументПродажи = ТаблицаТовары.Ссылка
	|ГДЕ
	|	НЕ Фильтр.Розница
	|
	|СГРУППИРОВАТЬ ПО
	|	Фильтр.ДокументПродажи,
	|	ТаблицаТовары.Номенклатура.ВидНоменклатуры.IDN,
	|	Фильтр.НомерИнтернетЗаказа,
	|	Фильтр.КодОтдела
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Фильтр.ДокументПродажи,
	|	Фильтр.НомерИнтернетЗаказа,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВидНоменклатуры.IDN, """") = """"
	|			ТОГДА ""ИГРУШКИ""
	|		ИНАЧЕ ТаблицаТовары.Номенклатура.ВидНоменклатуры.IDN
	|	КОНЕЦ,
	|	-СУММА(ТаблицаТовары.Сумма + ВЫБОР
	|			КОГДА Фильтр.УчитыватьНДС
	|					И НЕ Фильтр.ЦенаВключаетНДС
	|				ТОГДА ТаблицаТовары.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	Фильтр.КодОтдела
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаТовары
	|		ПО Фильтр.ДокументПродажи = ТаблицаТовары.Ссылка
	|ГДЕ
	|	НЕ Фильтр.Розница
	|
	|СГРУППИРОВАТЬ ПО
	|	Фильтр.ДокументПродажи,
	|	ТаблицаТовары.Номенклатура.ВидНоменклатуры.IDN,
	|	Фильтр.НомерИнтернетЗаказа,
	|	Фильтр.КодОтдела
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПродажи,
	|	НомерИнтернетЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Фильтр.ДокументПродажи КАК ДокументПродажи,
	|	Фильтр.НомерИнтернетЗаказа КАК НомерИнтернетЗаказа,
	|	ТаблицаОплата.ВидОплаты.ТипОплаты КАК ТипОплаты,
	|	ВЫБОР
	|		КОГДА СУММА(ТаблицаОплата.Сумма) > Фильтр.СуммаДокумента
	|			ТОГДА Фильтр.СуммаДокумента
	|		ИНАЧЕ СУММА(ТаблицаОплата.Сумма)
	|	КОНЕЦ * ВЫБОР
	|		КОГДА Фильтр.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Сумма,
	|	Фильтр.КодОтдела КАК КодОтдела
	|ПОМЕСТИТЬ Деньги
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Оплата КАК ТаблицаОплата
	|		ПО Фильтр.ДокументПродажи = ТаблицаОплата.Ссылка
	|ГДЕ
	|	Фильтр.Розница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплата.ВидОплаты.ТипОплаты,
	|	Фильтр.ДокументПродажи,
	|	Фильтр.ВидОперации,
	|	Фильтр.СуммаДокумента,
	|	Фильтр.НомерИнтернетЗаказа,
	|	Фильтр.КодОтдела
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Фильтр.ДокументПродажи,
	|	Фильтр.НомерИнтернетЗаказа,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные),
	|	-СУММА(0.01),
	|	Фильтр.КодОтдела
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.ПогашениеПодарочныхСертификатов КАК ТаблицаТовары
	|		ПО Фильтр.ДокументПродажи = ТаблицаТовары.Ссылка
	|ГДЕ
	|	Фильтр.Розница
	|	И Фильтр.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|
	|СГРУППИРОВАТЬ ПО
	|	Фильтр.ДокументПродажи,
	|	Фильтр.НомерИнтернетЗаказа,
	|	Фильтр.КодОтдела
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Фильтр.ДокументПродажи,
	|	Фильтр.НомерИнтернетЗаказа,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Фильтр.ДокументПродажи) = ТИП(Документ.РеализацияТоваров)
	|			ТОГДА Фильтр.ДокументПродажи.ТипОплаты
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПустаяСсылка)
	|	КОНЕЦ,
	|	СУММА(Товары.Сумма),
	|	Фильтр.КодОтдела
	|ИЗ
	|	Фильтр КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО Фильтр.ДокументПродажи = Товары.ДокументПродажи
	|ГДЕ
	|	НЕ Фильтр.Розница
	|
	|СГРУППИРОВАТЬ ПО
	|	Фильтр.ДокументПродажи,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Фильтр.ДокументПродажи) = ТИП(Документ.РеализацияТоваров)
	|			ТОГДА Фильтр.ДокументПродажи.ТипОплаты
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПустаяСсылка)
	|	КОНЕЦ,
	|	Фильтр.НомерИнтернетЗаказа,
	|	Фильтр.КодОтдела
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПродажи,
	|	НомерИнтернетЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(Товары.Сумма, 0)) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК Ключ) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведущая.КодОтдела КАК КодОтдела,
	|	0 КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Деньги.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	|			ТОГДА 3
	|		КОГДА Деньги.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|			ТОГДА 1
	|		КОГДА Деньги.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПодарочныйСертификат)
	|			ТОГДА 9
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК КодОплаты,
	|	Товары.Проект КАК IDN,
	|	СУММА(ВЫРАЗИТЬ(Товары.Сумма / Ведущая.Сумма * Деньги.Сумма КАК ЧИСЛО(19, 2))) КАК Сумма,
	|	Ведущая.НомерИнтернетЗаказа КАК НомерИнтернетЗаказа
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.ДокументПродажи КАК ДокументПродажи,
	|		Товары.НомерИнтернетЗаказа КАК НомерИнтернетЗаказа,
	|		СУММА(Товары.Сумма) КАК Сумма,
	|		Товары.КодОтдела КАК КодОтдела
	|	ИЗ
	|		Товары КАК Товары
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Товары.ДокументПродажи,
	|		Товары.НомерИнтернетЗаказа,
	|		Товары.КодОтдела
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(Товары.Сумма) <> 0) КАК Ведущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО Ведущая.ДокументПродажи = Товары.ДокументПродажи
	|			И Ведущая.НомерИнтернетЗаказа = Товары.НомерИнтернетЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Деньги КАК Деньги
	|		ПО Ведущая.ДокументПродажи = Деньги.ДокументПродажи
	|			И Ведущая.НомерИнтернетЗаказа = Деньги.НомерИнтернетЗаказа
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Проект,
	|	Ведущая.НомерИнтернетЗаказа,
	|	ВЫБОР
	|		КОГДА Деньги.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	|			ТОГДА 3
	|		КОГДА Деньги.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|			ТОГДА 1
	|		КОГДА Деньги.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПодарочныйСертификат)
	|			ТОГДА 9
	|		ИНАЧЕ 2
	|	КОНЕЦ,
	|	Ведущая.КодОтдела
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Фильтр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Деньги";

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область СпецификаДокументаПересортицаТоваров

Функция ТаблицаПересортицаТоваров(ДокументОбъект, Параметры)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&Дата КАК Дата,
	|	&Ссылка КАК Ссылка,
	|	Товары.НомерСтроки,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Товары.НоменклатураОприходование КАК Справочник.Номенклатура) КАК НоменклатураОприходование,
	|	Товары.Цена,
	|	Товары.ЦенаОприходование,
	|	Товары.Количество
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.Дата,
	|	Источник.Ссылка,
	|	Источник.НомерСтроки КАК НомерСтроки,
	|	Источник.Номенклатура.IDN КАК IDN,
	|	Источник.Номенклатура,
	|	Источник.Цена,
	|	-Источник.Количество КАК Количество,
	|	-(Источник.Цена * Источник.Количество) КАК Сумма,
	|	1 КАК КлючПорядка
	|ИЗ
	|	Источник КАК Источник
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Источник.Дата,
	|	Источник.Ссылка,
	|	Источник.НомерСтроки,
	|	Источник.НоменклатураОприходование.IDN,
	|	Источник.НоменклатураОприходование,
	|	Источник.ЦенаОприходование,
	|	Источник.Количество,
	|	Источник.ЦенаОприходование * Источник.Количество,
	|	2
	|ИЗ
	|	Источник КАК Источник
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка,
	|	НомерСтроки"
	);
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата"  , ДокументОбъект.Дата);
	Запрос.УстановитьПараметр("Товары", ДокументОбъект.Товары);

	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	НомерСтроки = 0;

	Для каждого СтрокаТаблицы Из ТаблицаРезультат Цикл

		НомерСтроки = НомерСтроки + 1;
		СтрокаТаблицы.НомерСтроки = НомерСтроки;

	КонецЦикла;
	
	Параметры.ОтклоненийНет = ?(ТаблицаРезультат.Количество() = 0, 1, 0);
	
	Возврат ТаблицаРезультат;

КонецФункции // ТаблицаПересортицаТоваров()

Функция ТаблицаПересчетТоваровСамостоятельный(ДокументОбъект, Параметры)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&Дата КАК Дата,
	|	&Ссылка КАК Ссылка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.Цена КАК Цена,
	|	Товары.КоличествоФакт - Товары.Количество КАК Количество,
	|	Товары.СуммаФакт - Товары.Сумма КАК Сумма
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	НЕ Товары.КоличествоФакт = Товары.Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Дата КАК Дата,
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура.IDN КАК IDN,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	1 КАК КлючПорядка
	|ИЗ
	|	Источник КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Количество < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Дата,
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура.IDN,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Сумма,
	|	2
	|ИЗ
	|	Источник КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Количество > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка,
	|	НомерСтроки"
	);
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата"  , ДокументОбъект.Дата);
	Запрос.УстановитьПараметр("Товары", ДокументОбъект.Товары);

	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	НомерСтроки = 0;

	Для каждого СтрокаТаблицы Из ТаблицаРезультат Цикл

		НомерСтроки = НомерСтроки + 1;
		СтрокаТаблицы.НомерСтроки = НомерСтроки;

	КонецЦикла;
	
	Параметры.ОтклоненийНет = ?(ТаблицаРезультат.Количество() = 0, 1, 0);

	Возврат ТаблицаРезультат;

КонецФункции // ТаблицаПересчетТоваровСамостоятельный()

#КонецОбласти

#Область СпецификаДокументаЗаказПокупателя

Функция ДанныеЗаказаПокупателя(ДокументОбъект)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Организации.IDN, Ведущая.КодОтдела) КАК КодОтдела,
	|	ВЫБОР
	|		КОГДА Контрагенты.IDN ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Контрагенты.IDN = """"
	|					ТОГДА Контрагенты.Код
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ПОДСТРОКА(Контрагенты.IDN, 1, 1) = ""i""
	|							ТОГДА ПОДСТРОКА(Контрагенты.IDN, 2, 100)
	|						ИНАЧЕ Контрагенты.IDN
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КодКлиента,
	|	ЕСТЬNULL(Контрагенты.Наименование, """") КАК НазваниеКлиента,
	|	ВЫБОР
	|		КОГДА ТаблицаКонтактПочта.АдресЭП ЕСТЬ NULL
	|			ТОГДА """"
	|		КОГДА ТаблицаКонтактПочта.АдресЭП = """"
	|			ТОГДА ТаблицаКонтактПочта.Представление
	|		ИНАЧЕ ТаблицаКонтактПочта.АдресЭП
	|	КОНЕЦ КАК ПочтаКлиента,
	|	ВЫБОР
	|		КОГДА ТаблицаКонтактТелефон.НомерТелефона ЕСТЬ NULL
	|			ТОГДА """"
	|		КОГДА ТаблицаКонтактТелефон.НомерТелефона = """"
	|			ТОГДА ТаблицаКонтактТелефон.Представление
	|		ИНАЧЕ ТаблицаКонтактТелефон.НомерТелефона
	|	КОНЕЦ КАК НомерТелефона,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Самовывоз,
	|	ВЫБОР
	|		КОГДА ГородаДоставки.Ссылка ЕСТЬ NULL
	|			ТОГДА ЗаказПокупателя.Город
	|		ИНАЧЕ ГородаДоставки.Наименование
	|	КОНЕЦ КАК Город,
	|	ВЫБОР
	|		КОГДА ГородаДоставки.Ссылка ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ГородаДоставки.Область.Наименование
	|	КОНЕЦ КАК Область,
	|	ВЫБОР
	|		КОГДА Отделения.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Почтоматы.Ссылка ЕСТЬ NULL
	|						ТОГДА ЗаказПокупателя.Отделение
	|					ИНАЧЕ Почтоматы.Наименование
	|				КОНЕЦ
	|		ИНАЧЕ Отделения.Наименование
	|	КОНЕЦ КАК Отделение,
	|	ВЫБОР
	|		КОГДА Улицы.Ссылка ЕСТЬ NULL
	|			ТОГДА ЗаказПокупателя.Улица
	|		ИНАЧЕ Улицы.Наименование
	|	КОНЕЦ КАК Улица,
	|	ВЫБОР
	|		КОГДА Улицы.Ссылка ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ Улицы.ТипУлицы.Наименование
	|	КОНЕЦ КАК ТипУлицы,
	|	ЗаказПокупателя.ДоставкаНаАдрес КАК ДоставкаНаАдрес,
	|	ЗаказПокупателя.Дом КАК Дом,
	|	ЗаказПокупателя.Квартира КАК Квартира,
	|	ЕСТЬNULL(ТаблицаКонтактАдрес.Представление, """") КАК АдресКлиента
	|ИЗ
	|	(ВЫБРАТЬ
	|		""АНТ"" КАК КодОтдела) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО (Организации.Ссылка = &Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтактПочта
	|			ПО Контрагенты.Ссылка = ТаблицаКонтактПочта.Ссылка
	|				И (ТаблицаКонтактПочта.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагента))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтактТелефон
	|			ПО Контрагенты.Ссылка = ТаблицаКонтактТелефон.Ссылка
	|				И (ТаблицаКонтактТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтактАдрес
	|			ПО Контрагенты.Ссылка = ТаблицаКонтактАдрес.Ссылка
	|				И (ТаблицаКонтактАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента))
	|		ПО (Контрагенты.Ссылка = &Контрагент),
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГородаДоставки КАК ГородаДоставки
	|		ПО ЗаказПокупателя.Город = ГородаДоставки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Почтоматы КАК Почтоматы
	|		ПО ЗаказПокупателя.Отделение = Почтоматы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Отделения КАК Отделения
	|		ПО ЗаказПокупателя.Отделение = Отделения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Улицы КАК Улицы
	|		ПО ЗаказПокупателя.Улица = Улицы.Ссылка
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &Ссылка"
	);
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("Контрагент" , ДокументОбъект.Контрагент);
	Запрос.УстановитьПараметр("Ссылка" , ДокументОбъект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область РаботаСоСправочниками

Функция ПередатьСправочникNavision(ОбъектДанных, ПараметрыЗадания, Отладка)

	RequestText = "";

	Если ПараметрыЗадания.ТипЗадания = "КОНТРАГЕНТ_ОБНОВИТЬ" Тогда

		ОбъектДанных.ДополнительныеСвойства.Вставить("РегистрацияПередачиВNavision", Истина);
		УстановитьIDNПоКлючевомуРеквизиту(ПараметрыЗадания.Тип, ОбъектДанных, ПараметрыЗадания);

		Если ОбъектДанных.Модифицированность() Тогда

			ОбъектДанных.Записать();

		КонецЕсли;

		RequestText = ВнешниеИсточники.УточнитьТекстЗапроса(
		"DECLARE @yes varchar(10);
		|
		|SELECT @yes = [Клиент Но_]
		|	FROM [Euro2009].[dbo].[Европродукт 2009$Exch RR Client] with(nolock)
		|	WHERE [Клиент Но_] = '#IDN#'
		|
		|IF @yes IS NULL
		|
		|INSERT INTO [Euro2009].[dbo].[Европродукт 2009$Exch RR Client]
		|	([Клиент Но_]
		|	,[Название]
		|	,[Адрес]
		|	,[Телефон]
		|	,[МФО]
		|	,[ОКПО]
		|	,[ИНН]
		|	,[Номер Свидетельства]
		|	,[Расчетный Счет]
		|	,[Дата Изменения])
		|VALUES
		|	('#IDN#'
		|	,'#NAME#'
		|	,'#ADRESS#'
		|	,'#PHONE#'
		|	,'#MFO#'
		|	,'#OKPO#'
		|	,'#INN#'
		|	,'#REFNUM#'
		|	,'#ACCNUMBER#'
		|	,'#DATE#')
		|
		|ELSE
		|
		|UPDATE [Euro2009].[dbo].[Европродукт 2009$Exch RR Client] with(rowlock)
		|   SET [Название] = '#NAME#'
		|      ,[Адрес] = '#ADRESS#'
		|      ,[Телефон] = '#PHONE#'
		|      ,[МФО] = '#MFO#'
		|      ,[ОКПО] = '#OKPO#'
		|      ,[ИНН] = '#INN#'
		|      ,[Номер Свидетельства] = '#REFNUM#'
		|      ,[Расчетный Счет] = '#ACCNUMBER#'
		|      ,[Дата Изменения] = '#DATE#'
		|	WHERE [Клиент Но_] = '#IDN#'
		|", Перечисления.ВнешниеИсточники.Navision
		);

		RequestText = СтрЗаменить(RequestText, "#IDN#"   , ОбъектДанных.IDN);
		RequestText = СтрЗаменить(RequestText, "#NAME#"  , УстранитьНедопустимыеСимволы(ОбъектДанных.Наименование));
		RequestText = СтрЗаменить(RequestText, "#OKPO#"  , УстранитьНедопустимыеСимволы(ОбъектДанных.КодПоЕДРПОУ));
		RequestText = СтрЗаменить(RequestText, "#INN#"   , УстранитьНедопустимыеСимволы(ОбъектДанных.ИННПлательщикаНДС));
		RequestText = СтрЗаменить(RequestText, "#REFNUM#", УстранитьНедопустимыеСимволы(ОбъектДанных.НомерСвидетельстваПлательщикаНДС));
		RequestText = СтрЗаменить(RequestText, "#DATE#"  , Формат(ТекущаяДата(), "ДФ=yyyy-MM-ddTЧЧ:мм:сс.000"));
		RequestText = ВнешниеИсточники.УточнитьТекстЗапроса(RequestText, Перечисления.ВнешниеИсточники.Navision);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаСправочник.Банк.Код КАК МФО,
		|	ТаблицаСправочник.НомерСчета,
		|	ТаблицаСправочник.ДатаОткрытия КАК ДатаОткрытия,
		|	ТаблицаСправочник.ДатаЗакрытия КАК ДатаЗакрытия
		|ИЗ
		|	Справочник.БанковскиеСчетаКонтрагентов КАК ТаблицаСправочник
		|ГДЕ
		|	ТаблицаСправочник.Владелец = &Контрагент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОткрытия УБЫВ,
		|	ДатаЗакрытия"
		);
		Запрос.УстановитьПараметр("Контрагент", ОбъектДанных.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда

			RequestText = СтрЗаменить(RequestText, "#MFO#"      , УстранитьНедопустимыеСимволы(Выборка.МФО));
			RequestText = СтрЗаменить(RequestText, "#ACCNUMBER#", УстранитьНедопустимыеСимволы(Выборка.НомерСчета));

		Иначе

			RequestText = СтрЗаменить(RequestText, "#MFO#"      , "");
			RequestText = СтрЗаменить(RequestText, "#ACCNUMBER#", "");

		КонецЕсли;

		ЗначениеАдрес   = "";
		ЗначениеТелефон = "";

		Для каждого СтрокаКонтакты Из ОбъектДанных.КонтактнаяИнформация Цикл

			Если СтрокаКонтакты.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда

				ЗначениеАдрес = ЗначениеАдрес + ?(ПустаяСтрока(ЗначениеАдрес), "", " ; ") + СокрЛП(СтрокаКонтакты.Представление);

			ИначеЕсли СтрокаКонтакты.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда

				ЗначениеТелефон = ЗначениеТелефон + ?(ПустаяСтрока(ЗначениеТелефон), "", " ; ") + СокрЛП(СтрокаКонтакты.Представление);

			КонецЕсли;

		КонецЦикла;

		RequestText = СтрЗаменить(RequestText, "#ADRESS#", УстранитьНедопустимыеСимволы(ЗначениеАдрес));
		RequestText = СтрЗаменить(RequestText, "#PHONE#" , УстранитьНедопустимыеСимволы(ЗначениеТелефон));

	Иначе

		Возврат 0;

	КонецЕсли;

	ОтветОтправки = ПередатьДанныеNavision(RequestText, ОбъектДанных.IDN, ПараметрыЗадания, Истина, Отладка);
	
	Возврат ОтветОтправки.ЗначениеВозврата;

КонецФункции

#КонецОбласти

#Область РаботаСОчередьюЗаданийNavision

Функция ИнициализацияПараметровЗадания(ТипЗначения, СверкаДокументов)

	ПараметрыЗадания = Новый Структура(
		"Тип, ТипЗадания, ТипДокумента, Префикс, Номер, Выгружать, Проверено"
		, ТипЗначения, "", "", "", "", Истина, Ложь);

	ПараметрыЗадания.Вставить("ИспользоватьЗадания"   , НЕ СверкаДокументов);
	ПараметрыЗадания.Вставить("ИспользоватьТранзакцию", Истина);
//	указание для перемещений на связанные документы
	ПараметрыЗадания.Вставить("НомерСвязанного"       , "");
	ПараметрыЗадания.Вставить("Переброска"            , 0);
	ПараметрыЗадания.Вставить("Закупка"               , 0);
	ПараметрыЗадания.Вставить("СверкаДокументов"      , СверкаДокументов);
	ПараметрыЗадания.Вставить("ТабличнаяЧасть"        , Новый Структура("Количество", 0));
	
	ПараметрыЗадания.Вставить("ID2"       , "");
	ПараметрыЗадания.Вставить("ID3"       , "");

	ПараметрыЗадания.Вставить("Имена", ВнешниеИсточникиПовтИсп.ИменаТаблицNavision(СверкаДокументов));

	Возврат ПараметрыЗадания;

КонецФункции

Функция ПолучитьКлючевыеПараметрыЗадания(ТипЗначения, ОбъектДанных, КлючТипа = Неопределено, ВыгрузкаДанных = Истина, ПараметрыВыгрузки = Неопределено)	Экспорт

	Если ПараметрыВыгрузки = Неопределено Тогда

		ПараметрыВыгрузки = ПолучитьПараметрыВыгрузки(ПланыОбмена.ОбменNavisionРозница.ПустаяСсылка(), Ложь, Ложь, Ложь);

	КонецЕсли;

	ПараметрыЗадания = ИнициализацияПараметровЗадания(ТипЗначения, ПараметрыВыгрузки.СверкаДокументов);

	Если ТипЗначения = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда

		ПараметрыЗадания.ТипЗадания   = "ДОК_ОПРИХОДОВАНИЕ";
		ПараметрыЗадания.ТипДокумента = "ПРИХОД";
		ПараметрыЗадания.Префикс      = "1СО" + Формат(ОбъектДанных.Дата, "ДФ=yy");
		ПараметрыЗадания.Номер        = ПараметрыЗадания.Префикс + СокрЛП(ОбъектДанных.Номер);
		ПараметрыЗадания.Проверено    = Истина;

	//СЮП 17.06.2024 16.26.46 
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ВозвратИнтернетЗаказа") Тогда

		ПараметрыЗадания.ТипЗадания   = "WEB_ВОЗВРАТ";
		ПараметрыЗадания.ТипДокумента = "WEB_ВОЗВРАТ";
		ПараметрыЗадания.Префикс      = "RWZ_";
		ПараметрыЗадания.Номер        = КлючТипа;
		ПараметрыЗадания.Проверено    = Истина;
		ПараметрыЗадания.ID2          = "CWZ_" + Лев(СтрЗаменить(КлючТипа, "RWZ_", ""), 13);
		ПараметрыЗадания.ID3 =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДанных.ЭлектроннаяНакладная, "Номер", "");
		

	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

		ПараметрыЗадания.ТипЗадания   = "WEB_ЗАКАЗ";
		ПараметрыЗадания.ТипДокумента = "WEB_ЗАКАЗ";
		ПараметрыЗадания.Префикс      = "MWZ_";
		ПараметрыЗадания.Номер        = ПараметрыЗадания.Префикс + СокрЛП(ОбъектДанных.НомерЗаказаНаСайте);
		ПараметрыЗадания.Проверено    = Истина;

	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ЗапросДоступностиТоваров") Тогда

		НужноЗакрытьЗаказ = РегистрыСведений.КлючевыеАтрибутыЗапросовДоступности.ПолучитьСтатусЗаписиВNavision(ОбъектДанных.Ссылка)
			= Перечисления.СтатусыЗапросаДоступностиВNavision.ГотовКЗакрытиюВNavision;
				
		ОтменаЗаказа = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДанных.Ссылка,
				"СтатусЗапроса",
				Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПустаяСсылка(),
				Ложь);
		НужноОтменаЗаказа = ((ОтменаЗаказа = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Отменён)
				Или (ОтменаЗаказа = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтменуОтправитель)
				Или (ОтменаЗаказа = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтменуПолучатель)
				Или (ОтменаЗаказа = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Удалён));
				
		Если НужноЗакрытьЗаказ Тогда
			
			ПараметрыЗадания.ТипЗадания   = "WEB_ЗАКАЗ_ЗАКРЫТЬ";
			ПараметрыЗадания.ТипДокумента = "WEB_ЗАКАЗ_ЗАКРЫТЬ";
			
		ИначеЕсли НужноОтменаЗаказа Тогда
			
			ПараметрыЗадания.ТипЗадания   = "WEB_ЗАКАЗ_ОТМЕНА";
			ПараметрыЗадания.ТипДокумента = "WEB_ЗАКАЗ_ОТМЕНА";
			
		Иначе
			
			ПараметрыЗадания.ТипЗадания   = "WEB_ЗАКАЗ";
			ПараметрыЗадания.ТипДокумента = "WEB_ЗАКАЗ";
			
		КонецЕсли;

		ПараметрыЗадания.Префикс      = "CWZ_";
		ПараметрыЗадания.Номер        = ПараметрыЗадания.Префикс + СокрЛП(ОбъектДанных.Номер);
		ПараметрыЗадания.Проверено    = Истина;

	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.СписаниеТоваров") Тогда

		ПараметрыЗадания.ТипЗадания   = "ДОК_СПИСАНИЕ";
		ПараметрыЗадания.ТипДокумента = "СПИСАНИЕ";
		ПараметрыЗадания.Префикс      = "1СС" + Формат(ОбъектДанных.Дата, "ДФ=yy");
		ПараметрыЗадания.Номер        = ПараметрыЗадания.Префикс + СокрЛП(ОбъектДанных.Номер);
		ПараметрыЗадания.Проверено    = Истина;

	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.НачислениеИСписаниеБонусныхБаллов") Тогда

		ПараметрыЗадания.ТипЗадания   = "ДОК_БОНУСЫ";
		ПараметрыЗадания.ТипДокумента = "НАЧ.СПИС.БОНУС";
		ПараметрыЗадания.Префикс      = "1СB" + Формат(ОбъектДанных.Дата, "ДФ=yy");
		ПараметрыЗадания.Номер        = ПараметрыЗадания.Префикс + СокрЛП(ОбъектДанных.Номер);
		ПараметрыЗадания.Проверено    = Истина;

	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ПересортицаТоваров") Тогда

		ПараметрыЗадания.ТипЗадания   = "ДОК_ПЕРЕСОРТ";
		ПараметрыЗадания.ТипДокумента = "ПЕРЕСОРТ";
		ПараметрыЗадания.Префикс      = "1СР" + Формат(ОбъектДанных.Дата, "ДФ=yy");
		ПараметрыЗадания.Номер        = ПараметрыЗадания.Префикс + СокрЛП(ОбъектДанных.Номер);
		ПараметрыЗадания.Проверено    = Истина;

	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ПересчетТоваровСамостоятельный") Тогда

		ПараметрыЗадания.ТипЗадания   = "ДОК_ПЕРЕСОРТ";
		ПараметрыЗадания.ТипДокумента = "ПЕРЕСОРТ";
		ПараметрыЗадания.Префикс      = "1СА" + Формат(ОбъектДанных.Дата, "ДФ=yy");
		ПараметрыЗадания.Номер        = ПараметрыЗадания.Префикс + СокрЛП(ОбъектДанных.Номер);
		ПараметрыЗадания.Проверено    = Истина;

	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ЗаказПоставщику") Тогда

		Если НЕ ОбъектДанных.ВозвратПоставщику Тогда

			ПараметрыЗадания.ТипЗадания   = "ДОК_ПОКУПКА";
			ПараметрыЗадания.ТипДокумента = "ПОКУПКА";
			ПараметрыЗадания.Префикс      = "1СП" + Формат(ОбъектДанных.Дата, "ДФ=yy");

		Иначе

			ПараметрыЗадания.ТипЗадания   = "ДОК_ПОКУПКА_ВОЗВРАТ";
			ПараметрыЗадания.ТипДокумента = "ВЗВР.ПОКУП";
			ПараметрыЗадания.Префикс      = "1СК" + Формат(ОбъектДанных.Дата, "ДФ=yy");

		КонецЕсли;

		ПараметрыЗадания.Номер     = ПараметрыЗадания.Префикс + СокрЛП(ОбъектДанных.Номер);
		ПараметрыЗадания.Проверено = Истина;

	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда

		ПолучитьКлючиПеремещения(ТипЗначения, ОбъектДанных, ПараметрыЗадания, ПараметрыВыгрузки);

	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
		ИЛИ   ТипЗначения = Тип("ДокументСсылка.РасходныйОрдерНаТовары")	Тогда

		ПараметрыЗадания.ТипДокумента = КлючТипа;
		ПараметрыОснования = ПолучитьКлючиПеремещения(ТипЗнч(ОбъектДанных.ДокументОснование), ОбъектДанных.ДокументОснование.ПолучитьОбъект(), Неопределено, ПараметрыВыгрузки);

		ПараметрыЗадания.Префикс      = ПараметрыОснования.Префикс;
		ПараметрыЗадания.Номер        = ?(ПустаяСтрока(ОбъектДанных.IDN), ПараметрыОснования.Номер, ОбъектДанных.IDN);
		ПараметрыЗадания.ТипЗадания   = "ДОК_ПЕРЕМЕЩ_ТОВАР_ОФОРМЛЕН";
		ПараметрыЗадания.Проверено    = Истина;
		ПараметрыЗадания.ID2 = ПараметрыОснования.ID2;
		
	ИначеЕсли ТипЗначения = Тип("Структура") Тогда

		ПараметрыЗадания.ТипЗадания   = "ОБЩ.ПРОД.БОНУС";
		ПараметрыЗадания.ТипДокумента = "ОБЩ.ПРОД.БОНУС";
		ПараметрыЗадания.Префикс      = "";
		ПараметрыЗадания.Номер        = СокрЛП(ОбъектДанных.Номер);
		ПараметрыЗадания.Проверено    = Истина;

	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.КассовыйДень") Тогда

		ПараметрыЗадания.ТипЗадания   = ?(НЕ ЗначениеЗаполнено(КлючТипа), "ОБЩ.ПРОД", КлючТипа);
		ПараметрыЗадания.ТипДокумента = ?(НЕ ЗначениеЗаполнено(КлючТипа), "ОБЩ.ПРОД", КлючТипа);
		ПараметрыЗадания.Префикс      = "1СS" + Формат(ОбъектДанных.Дата, "ДФ=yy");
		ПараметрыЗадания.Номер        = ПараметрыЗадания.Префикс + СокрЛП(ОбъектДанных.Номер);
		ПараметрыЗадания.Проверено    = Истина;

	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.КорректировкаПеремещения") Тогда

		ПараметрыЗадания.ТипЗадания   = "ДОК_ПЕРЕМЕЩ_ОТПР_ИЗ_МАГ";
		ПараметрыЗадания.ТипДокумента = "ПЕРЕМЕЩ";

		ПараметрыЗадания.Префикс   = "1СR" + Формат(ОбъектДанных.Дата, "ДФ=yy");
		ПараметрыЗадания.Номер     = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДанных.ДокументОснование, "IDN"))
									 + "-" + ОбъектДанных.КлючТипаNavision;	// "-П" или "-Р"
		ПараметрыЗадания.Проверено = Истина;

	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Контрагенты") Тогда

		ПараметрыЗадания.ТипЗадания = "КОНТРАГЕНТ_ОБНОВИТЬ";
		ПараметрыЗадания.Префикс    = "";
		ПараметрыЗадания.Номер      = ОбъектДанных.IDN;
		ПараметрыЗадания.ИспользоватьЗадания    = Ложь;
		ПараметрыЗадания.ИспользоватьТранзакцию = Ложь;

	КонецЕсли;

	Возврат ПараметрыЗадания;

КонецФункции

Функция ПолучитьКлючиПеремещения(ТипЗначения, ОбъектДанных, ПараметрыЗадания, ПараметрыВыгрузки)	//	LNK 13.10.2020 09:15:07

	Если НЕ ТипЗнч(ПараметрыЗадания) = Тип("Структура") Тогда

		ПараметрыЗадания = ИнициализацияПараметровЗадания(ТипЗначения, ПараметрыВыгрузки.СверкаДокументов);

	КонецЕсли;

	Если НЕ ОбъектДанных.УзелСоздания = Справочники.СтруктураУзлов.КСУ_Navision Тогда

		ПараметрыЗадания.Проверено = Истина;

		ПараметрыЗадания.ТипЗадания   = "ДОК_ПЕРЕМЕЩ_ОТПР_ИЗ_МАГ";
		ПараметрыЗадания.ТипДокумента = "ПЕРЕМЕЩ";

		Если ТипЗнч(ОбъектДанных.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЕСТЬNULL(ТаблицаДокументы.IDN, """") КАК IDN,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ТаблицаДокументы.ВозвратПоставщику, ЛОЖЬ) = ИСТИНА
			|			ТОГДА ""1СП""
			|		ИНАЧЕ ""1СЗ""
			|	КОНЕЦ КАК Префикс
			|ИЗ
			|	(ВЫБРАТЬ
			|		ИСТИНА КАК Значение) КАК Ведущая
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ТаблицаДокументы
			|		ПО (ТаблицаДокументы.Ссылка = &ДокументОснование)"
			);
			Запрос.УстановитьПараметр("ДокументОснование", ОбъектДанных.ДокументОснование);
			
			ОбъектВыборка = Запрос.Выполнить().Выбрать();
			ОбъектВыборка.Следующий();

			ПараметрыЗадания.Префикс = ОбъектВыборка.Префикс + Формат(ОбъектДанных.Дата, "ДФ=yy");
		//	указание для перемещений на связанные документы
			ПараметрыЗадания.Закупка         = 1;
			ПараметрыЗадания.НомерСвязанного = ОбъектВыборка.IDN;

		Иначе

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаРеквизитов.Префикс КАК Префикс,
			|	ТаблицаРеквизитов.Переброска КАК Переброска,
			|	ВЫБОР
			|		КОГДА ТаблицаРеквизитов.Переброска = 1
			|					И &УчитыватьNavisionПоступлениеПереброски = ИСТИНА
			|				ИЛИ ТаблицаРеквизитов.ЗавершениеПереброски = ИСТИНА
			|					И &УчитыватьNavisionПоступлениеПереброски = ЛОЖЬ
			|			ТОГДА ТаблицаРеквизитов.IDNНомер
			|		ИНАЧЕ ТаблицаРеквизитов.IDNСклад
			|	КОНЕЦ КАК НомерСвязанного
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВЫБОР
			|			КОГДА ЕСТЬNULL(ТаблицаДокументы.МагазинПолучатель.СкладУправляющейСистемы, ЛОЖЬ) = ИСТИНА
			|				ТОГДА ""1СМ""
			|			КОГДА ЕСТЬNULL(ТаблицаДокументы.МагазинОтправитель.СкладУправляющейСистемы, ЛОЖЬ) = ИСТИНА
			|				ТОГДА ""1СЦ""
			|			ИНАЧЕ """"
			|		КОНЕЦ КАК Префикс,
			|		ВЫБОР
			|			КОГДА ТаблицаДокументы.МагазинПолучатель.СкладУправляющейСистемы
			|					И НЕ ТаблицаДокументы.МагазинПолучательКонечный = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
			|				ТОГДА 1
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК Переброска,
			|		ЕСТЬNULL(ТаблицаПереброска.IDN, """") КАК IDNНомер,
			|		ЕСТЬNULL(ТаблицаДокументы.МагазинПолучательКонечный.СкладПродажи.IDN, """") КАК IDNСклад,
			|		ЛОЖЬ КАК ЗавершениеПереброски
			|	ИЗ
			|		(ВЫБРАТЬ
			|			ИСТИНА КАК Значение) КАК Ведущая
			|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ТаблицаДокументы
			|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ТаблицаПереброска
			|				ПО ТаблицаДокументы.Ссылка = ТаблицаПереброска.ДокументОснование
			|					И ТаблицаДокументы.МагазинПолучатель = ТаблицаПереброска.МагазинОтправитель
			|					И ТаблицаДокументы.МагазинПолучательКонечный = ТаблицаПереброска.МагазинПолучатель
			|			ПО (ТаблицаДокументы.Ссылка = &ОбъектДанных)
			|	ГДЕ
			|		НЕ ТаблицаДокументы.ВидПеремещения = ЗНАЧЕНИЕ(Перечисление.ВидыПеремещенийТоваров.ПоступлениеПереброски)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ВЫБОР
			|			КОГДА ЕСТЬNULL(ТаблицаДокументы.МагазинПолучатель.СкладУправляющейСистемы, ЛОЖЬ) = ИСТИНА
			|				ТОГДА ""1СМ""
			|			КОГДА ЕСТЬNULL(ТаблицаДокументы.МагазинОтправитель.СкладУправляющейСистемы, ЛОЖЬ) = ИСТИНА
			|				ТОГДА ""1СЦ""
			|			ИНАЧЕ """"
			|		КОНЕЦ,
			|		0,
			|		ЕСТЬNULL(ТаблицаДокументы.ДокументОснование.IDN, """"),
			|		"""",
			|		ИСТИНА
			|	ИЗ
			|		(ВЫБРАТЬ
			|			ИСТИНА КАК Значение) КАК Ведущая
			|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ТаблицаДокументы
			|			ПО (ТаблицаДокументы.Ссылка = &ОбъектДанных)
			|	ГДЕ
			|		ТаблицаДокументы.ВидПеремещения = ЗНАЧЕНИЕ(Перечисление.ВидыПеремещенийТоваров.ПоступлениеПереброски)) КАК ТаблицаРеквизитов"
			);
			Запрос.УстановитьПараметр("ОбъектДанных", ОбъектДанных.Ссылка);
			Запрос.УстановитьПараметр("УчитыватьNavisionПоступлениеПереброски", ПараметрыВыгрузки.УчетнаяПолитика.УчитыватьNavisionПоступлениеПереброски);
			
			ОбъектВыборка = Запрос.Выполнить().Выбрать();
			ОбъектВыборка.Следующий();
			
		//	Перемещение товаров из Магазина в ЦО - "1СМ"
		//	Перемещение товаров из ЦО в Магазин  - "1СЦ"
			ПараметрыЗадания.Префикс = ОбъектВыборка.Префикс + Формат(ОбъектДанных.Дата, "ДФ=yy");
		//	указание для перемещений на связанные документы
			ПараметрыЗадания.Переброска      = ОбъектВыборка.Переброска;
			ПараметрыЗадания.НомерСвязанного = ОбъектВыборка.НомерСвязанного;

		КонецЕсли;

		ПараметрыЗадания.Номер = ПараметрыЗадания.Префикс + СокрЛП(ОбъектДанных.Номер);

	Иначе	//	ОбъектДанных.УзелСоздания = Справочники.СтруктураУзлов.КСУ_Navision

		ПараметрыЗадания.Номер	   = ОбъектДанных.IDN;	//	LNK 15.10.2020 07:20:29
		ПараметрыЗадания.Выгружать = ПараметрыВыгрузки.СверкаДокументов;	//	по сверке выгружаем ВСЁ.

		Если ПараметрыВыгрузки.СверкаДокументов = Истина Тогда	//	LNK 08.02.2021 10:10:27

			ПараметрыЗадания.Проверено = Истина;

			ПараметрыЗадания.ТипЗадания   = "ДОК_ПЕРЕМЕЩ_ОТПР_В_МАГ";
			ПараметрыЗадания.ТипДокумента = "ПЕРЕМЕЩ";

		КонецЕсли;

	КонецЕсли;
	
	//Записываем номер заказа в задание перемещения.

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПеремещениеГлавное.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ЗДГлавное.Номер ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|				КОГДА ЗДОснование.Номер ЕСТЬ NULL
		|					ТОГДА """"
		|				ИНАЧЕ ""CWZ_"" + ЗДОснование.Номер
		|			КОНЕЦ
		|		ИНАЧЕ ""CWZ_"" + ЗДГлавное.Номер
		|	КОНЕЦ КАК Номер
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеГлавное
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров КАК ЗДГлавное
		|		ПО (ПеремещениеГлавное.ДокументОснование = ЗДГлавное.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеОснование
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров КАК ЗДОснование
		|			ПО (ПеремещениеОснование.ДокументОснование = ЗДОснование.Ссылка)
		|		ПО (ПеремещениеГлавное.ДокументОснование = ПеремещениеОснование.Ссылка)
		|ГДЕ
		|	ПеремещениеГлавное.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ОбъектДанных.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда

		ПараметрыЗадания.ID2 = СокрЛП(Выборка.Номер);
	
	КонецЕсли;

	Возврат ПараметрыЗадания;

КонецФункции

Функция ОчередьЗаданиеПоНомеру(IDN)	Экспорт

	Перем Задание;

	ТекстЗапроса =
	"EXEC JOB_REC @jobID = #JOB_ID#"
	;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#JOB_ID#", Формат(IDN, "ЧДЦ=; ЧН=0; ЧГ="));

	ТаблицаNavision = ВнешниеИсточники.ПолучитьДанныеОтNavision(ТекстЗапроса,,, Истина);

	Если НЕ ТаблицаNavision.Количество() = 0 Тогда

		Задание = ОбщегоНазначенияКлиентСервер.СтрокаТаблицыКакСтруктура(ТаблицаNavision.Колонки, ТаблицаNavision[0]);

	КонецЕсли;

	Возврат Задание;

КонецФункции // ОчередьЗаданиеПоНомеру()

Функция ОчередьПолучитьНомер(ТипЗадания, ID1, ID2 = Неопределено, Отладка = Ложь)

	ТекстЗапроса =
	"SET NOCOUNT ON
	|declare @jobID bigint 
	|
	|EXEC @jobID = JOB_EXISTS
	|	  @jobType = '#TYPE#'
	|	 ,@filial = 'NN'
	|	 ,@ID1 = '#ID1#'
	|	 ,@ID2 = '#ID2#'
	|
	|EXEC JOB_REC @jobID
	|";

	Если ID2 = Неопределено Тогда

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",@ID2 = '#ID2#'", "");

	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#TYPE#", ТипЗадания);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ID1#" , ID1);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ID2#" , ID2);

	НомерЗадания = 0;

	Если НЕ Отладка = Истина Тогда

		ТаблицаNavision = ВнешниеИсточники.ПолучитьДанныеОтNavision(ТекстЗапроса,,, Истина);

		Если НЕ ТаблицаNavision.Количество() = 0 Тогда

			НомерЗадания = ТаблицаNavision[0].ЗаданиеНо;

		КонецЕсли;

	КонецЕсли;

	Возврат НомерЗадания;

КонецФункции

Функция ОчередьУстановитьЗадание(Период, ТипЗадания, ID1, ID2 = "", ID3 = "", ID4 = "", ID5 = "", ID6 = "", ID7 = "", ID8 = "", ID9 = "", Примечание = "", Отладка = Ложь)

	НомерЗадания = 0;
	ТекстЗапроса = "SET NOCOUNT ON" + Символы.ПС
		+ ОчередьУстановкиЗаданияТекстЗапроса(Период, ТипЗадания, ID1, ID2, ID3, ID4, ID5, ID6, ID7, ID8, ID9, Истина, Примечание);

	Connection = ВнешниеИсточникиПовтИсп.ПолучитьСоединение(Перечисления.ВнешниеИсточники.Navision);

	Если НЕ Connection = Неопределено Тогда

		Command   = Новый COMОбъект("ADODB.Command");
		RecordSet = Новый COMОбъект("ADODB.RecordSet");

		Command.ActiveConnection = Connection;

		Command.CommandText = ТекстЗапроса;
		RecordSet = Command.Execute();

		Если НЕ (RecordSet.BOF() И RecordSet.EOF()) Тогда

			RecordSet.MoveFirst();
			НомерЗадания = RecordSet.Fields("JOB_ID").Value;

		КонецЕсли;

	КонецЕсли;

//	Справка - формат дата-время в ISO8601
//	гггг-мм-ддТчч:мм:сс.ммм (без пробелов) Note: Если значение миллисекунд (ммм) равно 0, оно не отображается.
//	Например, значение «2012-11-07T18:26:20.000» будет отображено как «2012-11-07T18:26:20».

	Возврат НомерЗадания;

КонецФункции

Функция ОчередьУстановкиЗаданияТекстЗапроса(Период, ТипЗадания, ID1, ID2 = "", ID3 = "", ID4 = "", ID5 = "", ID6 = "", ID7 = "", ID8 = "", ID9 = "", ВернутьID = Истина, Примечание = "")

	ТекстЗапроса = "
	|EXEC @jobID = JOB_INSERT 
	|    @jobType = '#TYPE#'
	|   ,@filial = 'NN'
//	|   ,@startTime = '#TIME#'
	|   ,@ID1 = '#ID1#'
	|   ,@ID2 = '#ID2#'
	|   ,@ID3 = '#ID3#'
	|   ,@ID4 = '#ID4#'
	|   ,@ID5 = '#ID5#'
	|   ,@ID6 = '#ID6#'
	|   ,@ID7 = '#ID7#'
	|   ,@ID8 = '#ID8#'
	|   ,@ID9 = '#ID9#'
	|	,@Примечание = '#COMM#'
	|";

	Если ВернутьID = Истина Тогда

		ТекстЗапроса =
		"DECLARE @jobID bigint = -1 
		|"
		+ ТекстЗапроса + "
		|SELECT @jobID AS [JOB_ID]";

	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#TYPE#"	, СокрЛП(ТипЗадания)); 
//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#TIME#"	, Формат(Период, "ДФ=yyyy-MM-ddTЧЧ:мм:сс.000"));	//	ISO8601 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ID1#"	, СокрЛП(ID1)); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ID2#"	, СокрЛП(ID2)); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ID3#"	, СокрЛП(ID3)); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ID4#"	, СокрЛП(ID4)); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ID5#"	, СокрЛП(ID5)); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ID6#"	, СокрЛП(ID6)); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ID7#"	, СокрЛП(ID7)); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ID8#"	, СокрЛП(ID8)); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ID9#"	, СокрЛП(ID9));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#COMM#"	, СокрЛП(Примечание));

	Возврат ТекстЗапроса;

КонецФункции

Процедура ОчередьОбновитьЗадание(НомерЗадания, ВремяЗапуска = NULL, Выполнено = NULL, Примечание = "", Отладка = Ложь)

	ТекстЗапроса = СтрЗаменить(
	"SET NOCOUNT ON
	|declare @result int
	|
	|EXEC @result = JOB_UPDATE  
	|	 @jobId   = #ID#
	|	,@jobPost = #POST#
	|	,@comment = '#COMM#'
	|
	|select @result as [RESULT]
	|", "#ID#", Формат(НомерЗадания, "ЧДЦ=; ЧН=0; ЧГ="));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#POST#", ?(Выполнено = NULL, "0", СокрЛП(Выполнено)));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#COMM#", ?(ПустаяСтрока(Примечание), "", СокрЛП(Примечание)));

	Если НЕ Отладка = Истина Тогда

		Connection = ВнешниеИсточникиПовтИсп.ПолучитьСоединение(Перечисления.ВнешниеИсточники.Navision);

		Если НЕ Connection = Неопределено Тогда

			Command   = Новый COMОбъект("ADODB.Command");
			RecordSet = Новый COMОбъект("ADODB.RecordSet");

			Command.ActiveConnection = Connection;

			Command.CommandText = ТекстЗапроса;
			RecordSet = Command.Execute();

			RecordSet.MoveFirst();

			Если НЕ RecordSet.Fields("RESULT").Value = 1 Тогда

				ВызватьИсключение "Не удалось обновить задание - внешний источник вернул [" + RecordSet.Fields("RESULT").Value + "]";

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроверкаНаличияОбъектаВТранспортныхТаблицах

Функция ЕстьВЗаголовках(ТипЗадания, ID1, ВерсияДанных, ПараметрыЗадания = Неопределено, Отладка = Ложь)

	Если ПараметрыЗадания = Неопределено Тогда

		ПараметрыЗадания = Новый Структура("Имена", ВнешниеИсточникиПовтИсп.ИменаТаблицNavision(Ложь));

	КонецЕсли;

	ТекстЗапроса = ВнешниеИсточники.УточнитьТекстЗапроса(СтрЗаменить(
	"SELECT COUNT([Документ Но_]) AS КОЛ_ВО
	|FROM [Euro2009].[dbo].[Европродукт 2009$#HEAD#] with(nolock)
	|WHERE [Документ Но_] = '#NUMBER#' AND [Тип Документа] = '#TYPEDOC#'
	|", "#HEAD#", ПараметрыЗадания.Имена.HEAD)
	, Перечисления.ВнешниеИсточники.Navision
	);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#TYPEDOC#", ТипЗадания);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#NUMBER#" , ID1);

	ЕстьТакой = Ложь;

	Если НЕ Отладка = Истина Тогда

		ТаблицаNavision = ВнешниеИсточники.ПолучитьДанныеОтNavision(ТекстЗапроса,,, Истина);

		Если НЕ ТаблицаNavision.Количество() = 0 Тогда

			ЕстьТакой = ТаблицаNavision[0].КОЛ_ВО > 0;

		КонецЕсли;

	КонецЕсли;

	Возврат ЕстьТакой;

КонецФункции

//	LNK 08.04.2021 07:14:43
Функция ПроверитьТранспортныеТаблицы(IDN, ПараметрыЗадания, Назначение, СверкаДокументов, Отладка = Ложь)
 
	RequestText = ВнешниеИсточники.УточнитьТекстЗапроса(СтрЗаменить(СтрЗаменить(
	"SELECT
	|	  SUM(КВО_ОЧЗ) AS КВО_ОЧЗ
	|	, SUM(КВО_ДОК) AS КВО_ДОК
	|	, SUM(КВО_СТР) AS КВО_СТР
	|FROM
	|	(SELECT
	|		  COUNT([ID1]) AS КВО_ОЧЗ
	|		, 0 AS КВО_ДОК
	|		, 0 AS КВО_СТР
	|	FROM [Euro2009].[dbo].[Европродукт 2009$Очередь Заданий] with(nolock)
	|	WHERE [Код Филиала] = '#FILIAL#' AND [ID1] = '#NUMBER#' AND [Тип Задания] = '#TYPETASK#'
	|
	|		UNION
	|
	|	SELECT
	|		  0
	|		, COUNT([Документ Но_]) AS КВО_ДОК
	|		, 0 AS КВО_СТР
	|	  FROM [Euro2009].[dbo].[Европродукт 2009$#HEAD#] with(nolock)
	|	WHERE [Документ Но_] = '#NUMBER#' AND [Тип Документа] = '#TYPEDOC#'
	|
	|		UNION
	|
	|	SELECT
	|		  0
	|		, 0
	|		, COUNT([Документ Но_])
	|	  FROM [Euro2009].[dbo].[Европродукт 2009$#LINE#] with(nolock)
	|	WHERE [Документ Но_] = '#NUMBER#' AND [Тип Документа] = '#TYPEDOC#'
	|) AS TS
	|", "#HEAD#", ПараметрыЗадания.Имена.HEAD), "#LINE#", ПараметрыЗадания.Имена.LINE)
	, Перечисления.ВнешниеИсточники.Navision
	);

	RequestText = СтрЗаменить(RequestText, "#NUMBER#"  , IDN);
	RequestText = СтрЗаменить(RequestText, "#FILIAL#"  , Назначение);
	RequestText = СтрЗаменить(RequestText, "#TYPETASK#", ПараметрыЗадания.ТипЗадания);
	RequestText = СтрЗаменить(RequestText, "#TYPEDOC#" , ПараметрыЗадания.ТипДокумента);

	ТаблицыЗаполнены = (Отладка = Истина);

	Если НЕ Отладка = Истина Тогда

		ТаблицаNavision = ВнешниеИсточники.ПолучитьДанныеОтNavision(RequestText,,, Истина);

		Если НЕ ТаблицаNavision.Количество() = 0 Тогда

			ТаблицыЗаполнены = ?(ПараметрыЗадания.ИспользоватьЗадания И НЕ СверкаДокументов = Истина
							,  ТаблицаNavision[0].КВО_ОЧЗ > 0, Истина)
							И  ТаблицаNavision[0].КВО_ДОК > 0
							И  ?(Лев(ПараметрыЗадания.ТипЗадания, 8) = "ОБЩ.ПРОД"
									, ТаблицаNavision[0].КВО_СТР > 0
									, ТаблицаNavision[0].КВО_СТР = ПараметрыЗадания.ТабличнаяЧасть.Количество
								)
			;

		КонецЕсли;

	КонецЕсли;
	
	Возврат ТаблицыЗаполнены;

КонецФункции

//	LNK 08.04.2021 07:18:19
Процедура УдалитьИзОчередиЗаданийИТранспортныхТаблиц(IDN, ПараметрыЗадания, Назначение, Отладка = Ложь)
 
	RequestText = ВнешниеИсточники.УточнитьТекстЗапроса(СтрЗаменить(СтрЗаменить(
	"DELETE FROM [Euro2009].[dbo].[Европродукт 2009$Очередь Заданий]
 	|WHERE [ID1] = '#NUMBER#'
 	| 	AND [Код Филиала] = '#FILIAL#'
 	|	AND [Тип Задания] = '#TYPETASK#'
 	|
 	|DELETE FROM [Euro2009].[dbo].[Европродукт 2009$#HEAD#]
 	|      WHERE [Документ Но_] = '#NUMBER#' AND [Тип Документа] = '#TYPEDOC#'
 	|
 	|DELETE FROM [Euro2009].[dbo].[Европродукт 2009$#LINE#]
	|WHERE [Документ Но_] = '#NUMBER#' AND [Тип Документа] = '#TYPEDOC#'
	|", "#HEAD#", ПараметрыЗадания.Имена.HEAD), "#LINE#", ПараметрыЗадания.Имена.LINE)
	, Перечисления.ВнешниеИсточники.Navision
	);

	RequestText = СтрЗаменить(RequestText, "#NUMBER#"  , IDN);
	RequestText = СтрЗаменить(RequestText, "#FILIAL#"  , Назначение);
	RequestText = СтрЗаменить(RequestText, "#TYPETASK#", ПараметрыЗадания.ТипЗадания);
	RequestText = СтрЗаменить(RequestText, "#TYPEDOC#" , ПараметрыЗадания.ТипДокумента);

	ПередатьДанныеNavision(RequestText, IDN, ПараметрыЗадания, Ложь, Отладка);

КонецПроцедуры

#КонецОбласти

#Область ВнешиеПроцедурыПолученияДанных

//	LNK 03.04.2018 09:36:16
Функция ПериодЗагрузкиДоступен(ДатаОбъекта, НомерОбъекта, ПараметрыЗадания)

	Отказ = Ложь;

	Если НЕ ТехническаяПоддержкаВызовСервера.ОтладочныйРежимРаботы() Тогда

		Если НачалоДня(ДатаОбъекта) < (НачалоДня(ТекущаяДатаСеанса()) - 86400 * 38) Тогда	// минус один максимальный месяц и одна неделя (31 + 7).

			Отказ = Истина;

			ПараметрыЗадания.Вставить(
				"ДанныеОшибки"
				, Новый Структура(
					"Заголовок, Сообщение, Выполнено"
					, "WHDOC_MOVE_HEAD [" + НомерОбъекта + "] от " + Формат(ДатаОбъекта, "ДФ=dd.MM.yyyy")
					, "Дата документа ранее допустимого периода"
					, 1));

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

Функция ПеремещениеПолучитьИзNavision(НомерДокумента, КодФилиала, НомерЗадания, ТипЗадания, ПараметрыЗадания, СсылкиОбработаны)	Экспорт	//	Экспорт для отладки

	Перем Блокиратор;

	ПараметрыЗадания = Новый Структура("IDN, Учтен, Ссылка", "", Ложь, Документы.ПеремещениеТоваров.ПустаяСсылка());

	ТекстЗапроса =
	"EXEC WHDOC_MOVE_HEAD '#NUM#'";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#NUM#", НомерДокумента);

	Если НЕ ПустаяСтрока(КодФилиала) И НЕ КодФилиала = "OD" Тогда

		ТекстЗапроса = ТекстЗапроса + ", '" + КодФилиала + "'"

	КонецЕсли;

	ДанныеЖурнала = Новый Структура(
		"ТаблицыNavision"
		, Новый Структура(
			"MOVE_HEAD, MOVE_LINE")
	);
	ТаблицаNavision = ВнешниеИсточники.ПолучитьДанныеОтNavision(ТекстЗапроса,,, Истина);
	ДанныеЖурнала.ТаблицыNavision.MOVE_HEAD = ТаблицаNavision.Скопировать();

	Если НЕ ТаблицаNavision.Количество() = 0 Тогда

		Если ПериодЗагрузкиДоступен(ТаблицаNavision[0].ДатаУчета, НомерДокумента, ПараметрыЗадания) Тогда

			ПараметрыЗадания.IDN   = ТаблицаNavision[0].ДокументНо;
			ПараметрыЗадания.Учтен = ТаблицаNavision[0].Учтен;
		//	Контроль при получении табличной части документа. Используем размер ТЧ, полученный от Navision.
			КонтрольнаяЦифра = ТаблицаNavision[0].СтрокВДокументе;

			ДокументОбъект = Документы.ПеремещениеТоваров.НайтиПоРеквизиту("IDN", ПараметрыЗадания.IDN);

			Если ДокументОбъект.Пустая() Тогда

				Попытка

					Блокиратор = Справочники.БлокираторыПроцессов.НовыйПеремещениеТоваров.ПолучитьОбъект();
					Блокиратор.Заблокировать();

				Исключение

					ПараметрыЗадания.Вставить(
						"ДанныеОшибки"
						, Новый Структура(
							"Заголовок, Сообщение, Выполнено"
							, "Блокировка [" + ПараметрыЗадания.IDN + "]"
							, "Не удалось получить процесс создания перемещения"
							, 0));

					Возврат Ложь;

				КонецПопытки;

				ДокументОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();

			//	LNK 10.06.2021 06:26:38
				ДокументОбъект.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
				ДокументОбъект.ДополнительныеСвойства.Вставить("ТоварыКоличество", 0);	//	на всякий случай..

				ДокументОбъект.IDN = ПараметрыЗадания.IDN;
				ДокументОбъект.УзелСоздания   = Справочники.СтруктураУзлов.КСУ_Navision;
				ДокументОбъект.Ответственный  = Справочники.Пользователи.АдминистраторАвтоматов;
				ДокументОбъект.ВидПеремещения = Перечисления.ВидыПеремещенийТоваров.ОперационныйДокумент;

				Если СтрДлина(СокрЛП(ПараметрыЗадания.IDN)) <= ДокументОбъект.Метаданные().ДлинаНомера Тогда

					ДокументОбъект.Номер = ОбщегоНазначенияКлиентСервер.PAD(СокрЛП(ПараметрыЗадания.IDN), ДокументОбъект.Метаданные().ДлинаНомера, Истина, "0");

				КонецЕсли;

			Иначе
				
				ДокументОбъект = ДокументОбъект.ПолучитьОбъект();
				#Если Клиент Тогда
				//ДокументОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
				#КонецЕсли
			//	Получаемый из Navision документ не может быть помечен к удалению.
				ДокументОбъект.ПометкаУдаления = Ложь;
				ДокументОбъект.ДополнительныеСвойства.Вставить("ЭтоНовый", Ложь);
				ДокументОбъект.ДополнительныеСвойства.Вставить("ТоварыКоличество", ДокументОбъект.Товары.Количество());

			КонецЕсли;

			ДокументОбъект.Дата = ТаблицаNavision[0].ДатаУчета;

			Если  ДокументОбъект.Дата = НачалоДня(ДокументОбъект.Дата)
				И НачалоДня(ДокументОбъект.Дата) <= НачалоДня(ТекущаяДатаСеанса()) Тогда

			//	НЕ для документов, приезжающих "передним" числом
				ДокументОбъект.Дата = ДокументОбъект.Дата + (ТекущаяДатаСеанса() - НачалоДня(ТекущаяДатаСеанса()));

			КонецЕсли;

			ДокументОбъект.Комментарий = ТаблицаNavision[0].Комментарий;

		//	LNK 20.03.2022 06:52:50
			ДокументОбъект.ДополнительныеСвойства.Вставить(
				"NavisionПакетТСД"
				, Новый Структура(
					"Номер, Количество"
					, ТаблицаNavision[0].ПеремещениеНо_
					, ТаблицаNavision[0].Кол_вокомплектов
				)
			);

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ТаблицаОтгрузка.СкладОтправитель ЕСТЬ NULL
			|			ТОГДА ТаблицаВедущая.СкладОтправитель
			|		КОГДА ТаблицаОтгрузка.СкладОтправитель.Магазин = ТаблицаВедущая.МагазинОтправитель
			|			ТОГДА ТаблицаОтгрузка.СкладОтправитель
			|		ИНАЧЕ ТаблицаВедущая.СкладОтправитель
			|	КОНЕЦ КАК СкладОтправитель,
			|	ТаблицаВедущая.МагазинОтправитель КАК МагазинОтправитель,
			|	ВЫБОР
			|		КОГДА ТаблицаОтгрузка.СкладПолучатель ЕСТЬ NULL
			|			ТОГДА ТаблицаВедущая.СкладПолучатель
			|		КОГДА ТаблицаОтгрузка.СкладПолучатель.Магазин = ТаблицаВедущая.МагазинПолучатель
			|			ТОГДА ТаблицаОтгрузка.СкладПолучатель
			|		ИНАЧЕ ТаблицаВедущая.СкладПолучатель
			|	КОНЕЦ КАК СкладПолучатель,
			|	ТаблицаВедущая.МагазинПолучатель КАК МагазинПолучатель,
			|	ВЫБОР
			|		КОГДА ТаблицаВедущая.МагазинОтправитель.СкладУправляющейСистемы = ЛОЖЬ
			|			ТОГДА ЕСТЬNULL(ТаблицаОрганизацийОтправитель.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
			|		КОГДА ТаблицаВедущая.МагазинПолучатель.СкладУправляющейСистемы = ЛОЖЬ
			|			ТОГДА ЕСТЬNULL(ТаблицаОрганизацийПолучатель.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
			|	КОНЕЦ КАК Организация
			|ИЗ
			|	(ВЫБРАТЬ
			|		МАКСИМУМ(ТаблицаРеквизиты.СкладОтправитель) КАК СкладОтправитель,
			|		МАКСИМУМ(ТаблицаРеквизиты.МагазинОтправитель) КАК МагазинОтправитель,
			|		МАКСИМУМ(ТаблицаРеквизиты.СкладПолучатель) КАК СкладПолучатель,
			|		МАКСИМУМ(ТаблицаРеквизиты.МагазинПолучатель) КАК МагазинПолучатель
			|	ИЗ
			|		(ВЫБРАТЬ
			|			ТаблицаОтправитель.Ссылка КАК СкладОтправитель,
			|			ТаблицаОтправитель.Магазин КАК МагазинОтправитель,
			|			NULL КАК СкладПолучатель,
			|			NULL КАК МагазинПолучатель
			|		ИЗ
			|			Справочник.Склады КАК ТаблицаОтправитель
			|		ГДЕ
			|			ТаблицаОтправитель.IDN = &КодСклада
			|			И ТаблицаОтправитель.НазначениеСклада В (ЗНАЧЕНИЕ(Перечисление.НазначенияСкладов.ТорговыйЗал), ЗНАЧЕНИЕ(Перечисление.НазначенияСкладов.УправляющаяСистема))
			|		
			|		ОБЪЕДИНИТЬ ВСЕ
			|		
			|		ВЫБРАТЬ
			|			NULL,
			|			NULL,
			|			ТаблицаПолучатель.Ссылка,
			|			ТаблицаПолучатель.Магазин
			|		ИЗ
			|			Справочник.Склады КАК ТаблицаПолучатель
			|		ГДЕ
			|			ТаблицаПолучатель.IDN = &НовыйКодСклада
			|			И ТаблицаПолучатель.НазначениеСклада В (ЗНАЧЕНИЕ(Перечисление.НазначенияСкладов.ТорговыйЗал), ЗНАЧЕНИЕ(Перечисление.НазначенияСкладов.УправляющаяСистема))) КАК ТаблицаРеквизиты) КАК ТаблицаВедущая
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			МАКСИМУМ(ТаблицаОрдеры.СкладПолучатель) КАК СкладПолучатель,
			|			МАКСИМУМ(ТаблицаОрдеры.СкладОтправитель) КАК СкладОтправитель
			|		ИЗ
			|			(ВЫБРАТЬ
			|				ПриходныйОрдер.Склад КАК СкладПолучатель,
			|				NULL КАК СкладОтправитель
			|			ИЗ
			|				Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдер
			|			ГДЕ
			|				ПриходныйОрдер.ДокументОснование = &ТекущийДокумент
			|				И НЕ ПриходныйОрдер.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|			
			|			ОБЪЕДИНИТЬ ВСЕ
			|			
			|			ВЫБРАТЬ
			|				NULL,
			|				РасходныеОрдеры.Склад
			|			ИЗ
			|				Документ.РасходныйОрдерНаТовары КАК РасходныеОрдеры
			|			ГДЕ
			|				РасходныеОрдеры.ДокументОснование = &ТекущийДокумент
			|				И НЕ РасходныеОрдеры.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК ТаблицаОрдеры) КАК ТаблицаОтгрузка
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииПодразделений.СрезПоследних(&Период, ) КАК ТаблицаОрганизацийОтправитель
			|		ПО ТаблицаВедущая.МагазинОтправитель = ТаблицаОрганизацийОтправитель.Владелец
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииПодразделений.СрезПоследних(&Период, ) КАК ТаблицаОрганизацийПолучатель
			|		ПО ТаблицаВедущая.МагазинПолучатель = ТаблицаОрганизацийПолучатель.Владелец"
			);	//	если есть ордер, то склад берем из него! Помним, что отгрузка может быть с нескольких складов.
			Запрос.УстановитьПараметр("КодСклада"		, ТаблицаNavision[0].КодСклада);
			Запрос.УстановитьПараметр("НовыйКодСклада"	, ТаблицаNavision[0].НовыйКодСклада);
			Запрос.УстановитьПараметр("ТекущийДокумент"	, ДокументОбъект.Ссылка);	//	связь с ордерами
			Запрос.УстановитьПараметр("Период"			, ДокументОбъект.Дата);	//	LNK 17.11.2023 09:37:14
		//	Запрос.УстановитьПараметр("УчестьДокумент" , ТипЗадания = "ДОК_ПЕРЕМЕЩ_УЧТЕНО");

			Выборка = Запрос.Выполнить().Выбрать();

			Если Выборка.Следующий() Тогда

				ДокументОбъект.СкладОтправитель   = Выборка.СкладОтправитель;
				ДокументОбъект.МагазинОтправитель = Выборка.МагазинОтправитель;
				ДокументОбъект.СкладПолучатель    = Выборка.СкладПолучатель;
				ДокументОбъект.МагазинПолучатель  = Выборка.МагазинПолучатель;

				ДокументОбъект.Организация = Выборка.Организация;

				Если ДокументОбъект.Организация.Пустая() Тогда

					ДокументОбъект.Организация = Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();

				КонецЕсли;

				ДокументОбъект.НомерВнешнегоДокумента = ПривестиНомерЗаказаПокупателя(ТаблицаNavision[0].WEBЗаказНо_);

				Если ПустаяСтрока(ДокументОбъект.НомерВнешнегоДокумента) Тогда

					ДокументОбъект.ЗаказПокупателя = Неопределено;

				Иначе

					ЗаказПокупателяNavision = РезервированиеТоваровСервер.ПолучитьЗаказПокупателяПоНомеруМагазину(
						ДокументОбъект.НомерВнешнегоДокумента,
						Справочники.Магазины.ПолучитьМагазинИзСписка(ОбщегоНазначенияКлиентСервер.AAD(ДокументОбъект.МагазинОтправитель, ДокументОбъект.МагазинПолучатель), Ложь));
					
					Если ЗаказПокупателяNavision.Пустая() Тогда
						
						ЗаказПокупателяNavision = ЗаказыПокупателейСервер.ПолучитьЗаказДляПеремещения(ДокументОбъект.НомерВнешнегоДокумента);
						ДокументОбъект.ЗаказПокупателя = ЗаказПокупателяNavision.ЗаказКлиента;
						ДокументОбъект.ДокументОснование = ЗаказПокупателяNavision.ЗапросДоступности;

					Иначе
						
						ДокументОбъект.ЗаказПокупателя = ЗаказПокупателяNavision;

					КонецЕсли;
					
				КонецЕсли;

				ТекстЗапроса =
				"EXEC WHDOC_MOVE_LINE '#NUM#'
				|";
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#NUM#", НомерДокумента);

				ЗаписьЖурналаРегистрации("WHDOC_MOVE_LINE." + ТипЗадания
					, УровеньЖурналаРегистрации.Информация
					, ДокументОбъект.Метаданные(), ДокументОбъект.Ссылка
					, "Загрузка номера [" + НомерДокумента + "] объект «No." + СокрЛП(ДокументОбъект.Номер) + " от " + ДокументОбъект.Дата + "»", РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ТаблицаNavision.СтрокаНо_ КАК НомерСтроки,
				|	ТаблицаNavision.ТоварНо_ КАК IDN,
				|	ТаблицаNavision.КодЕдиницыИзмерения КАК КодУпаковки,
				|	ТаблицаNavision.Кол_во КАК КоличествоУпаковок,
				|	ТаблицаNavision.Кол_воБаз_ КАК Количество,
				|	ТаблицаNavision.Кол_вовЕдиницеИзмерения КАК Коэффициент,
				|	ТаблицаNavision.ЦенаЗаШтуку * ТаблицаNavision.Кол_вовЕдиницеИзмерения КАК Цена
				|ПОМЕСТИТЬ ДанныеNavision
				|ИЗ
				|	&ТаблицаNavision КАК ТаблицаNavision
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДанныеNavision.IDN КАК IDN
				|ИЗ
				|	ДанныеNavision КАК ДанныеNavision
				|
				|СГРУППИРОВАТЬ ПО
				|	ДанныеNavision.IDN");
				Запрос.УстановитьПараметр("ТаблицаNavision", ВнешниеИсточники.ПолучитьДанныеОтNavision(ТекстЗапроса,,, Истина));
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

				ДанныеЖурнала.ТаблицыNavision.MOVE_LINE = Запрос.Параметры.ТаблицаNavision.Скопировать();

				ВнешниеИсточники.УстановитьНоменклатуруВТаблицеПодготовки(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("IDN"), НЕ ТипЗадания = "ДОК_ПЕРЕМЕЩ_УЧТЕНО", СсылкиОбработаны);

				Запрос.Текст =
				"ВЫБРАТЬ
				|	ДанныеNavision.IDN КАК IDN,
				|	МАКСИМУМ(ЕСТЬNULL(ТаблицаТовары.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))) КАК Номенклатура,
				|	ДанныеNavision.КодУпаковки,
				|	ДанныеNavision.НомерСтроки,
				|	ДанныеNavision.КоличествоУпаковок,
				|	ДанныеNavision.Количество,
				|	ДанныеNavision.Коэффициент,
				|	ДанныеNavision.Цена
				|ПОМЕСТИТЬ Товары
				|ИЗ
				|	ДанныеNavision КАК ДанныеNavision
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаТовары
				|		ПО ДанныеNavision.IDN = ТаблицаТовары.IDN
				|
				|СГРУППИРОВАТЬ ПО
				|	ДанныеNavision.IDN,
				|	ДанныеNavision.КодУпаковки,
				|	ДанныеNavision.НомерСтроки,
				|	ДанныеNavision.КоличествоУпаковок,
				|	ДанныеNavision.Количество,
				|	ДанныеNavision.Коэффициент,
				|	ДанныеNavision.Цена
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ДанныеNavision
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаТовары.IDN,
				|	ТаблицаТовары.Номенклатура КАК Номенклатура,
				|	ЕСТЬNULL(ТаблицаУпаковки.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КАК Упаковка,
				|	ТаблицаТовары.Количество,
				|	ТаблицаТовары.КоличествоУпаковок,
				|	ТаблицаТовары.Цена,
				|	ТаблицаТовары.КоличествоУпаковок * ТаблицаТовары.Цена КАК Сумма,
				|	ТаблицаТовары.НомерСтроки КАК НомерСтроки
				|ИЗ
				|	Товары КАК ТаблицаТовары
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
				|			Товары.Номенклатура КАК Номенклатура,
				|			УпаковкиНоменклатуры.Ссылка КАК Упаковка,
				|			Товары.КодУпаковки КАК КодУпаковки
				|		ИЗ
				|			Товары КАК Товары
				|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
				|				ПО Товары.Номенклатура = УпаковкиНоменклатуры.Владелец
				|					И Товары.КодУпаковки = УпаковкиНоменклатуры.Наименование) КАК ТаблицаУпаковки
				|		ПО ТаблицаТовары.Номенклатура = ТаблицаУпаковки.Номенклатура
				|			И ТаблицаТовары.КодУпаковки = ТаблицаУпаковки.КодУпаковки
				|
				|УПОРЯДОЧИТЬ ПО
				|	НомерСтроки";
				
				ДокументОбъект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());

				ДокументОбъект.УстановитьВидНоменклатуры(Истина);	//	LNK 21.05.2021 11:37:31

				Если НЕ ДокументОбъект.ЭтоНовый() И ДокументОбъект.Товары.Количество() = 0 Тогда	//	LNK 18.03.2021 13:48:07

					ТекстОшибки = "";

					Если Запрос.Параметры.ТаблицаNavision.Количество() = 0 Тогда

						ТекстОшибки = "таблица пустая.";

					Иначе

						Для каждого СтрокаТаблицы Из Запрос.Параметры.ТаблицаNavision Цикл

							ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", " ,")
								+ "IDN:"  + СтрокаТаблицы.ТоварНо_
								+ "|Кво:" + СтрокаТаблицы.Кол_во
								+ "|КвоБаз:" + СтрокаТаблицы.Кол_воБаз_
							;

						КонецЦикла;

						ЖурналСобытий.Регистрация("WHDOC_MOVE_LINE.ПУСТАЯ." + СокрЛП(ПараметрыЗадания.IDN), УровеньЖурналаРегистрации.Предупреждение
							, ДокументОбъект.Метаданные()
							, ДокументОбъект.Ссылка
							,
							, "Товары очищены [" + ПараметрыЗадания.IDN + "][" + ТипЗадания + "]"
							+ Символы.ПС + "Ответ NAV - " + ТекстОшибки
							, "до записи: " + СокрЛП(ДокументОбъект.Ссылка)
							, Истина
							, Ложь
						);

					КонецЕсли;

				КонецЕсли;

				МаркерРегистрации = "IDN[" + ПараметрыЗадания.IDN + "] [" + ТипЗадания + "/" + Формат(НомерЗадания, "ЧН=0; ЧГ=") + "] КЦ [" + Формат(КонтрольнаяЦифра, "ЧН=0; ЧГ=") + "]";

			//	LNK 03.04.2018 07:40:53 - на текущий момент количество строк может отличаться, так как отбрасываются строки с пустыми количествами
				Если КонтрольнаяЦифра = ДокументОбъект.Товары.Количество() Тогда

					Если ЗаписатьОбъект(ДокументОбъект, ?(ДокументОбъект.ПометкаУдаления, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение), ПараметрыЗадания, Истина) Тогда

						ПараметрыЗадания.Ссылка = ДокументОбъект.Ссылка;

						ЖурналСобытий.Регистрация("WHDOC_MOVE_LINE"
							, ?(ДокументОбъект.ДополнительныеСвойства.ЭтоНовый
								, УровеньЖурналаРегистрации.Информация
								, ?(ДокументОбъект.ДополнительныеСвойства.ТоварыКоличество = КонтрольнаяЦифра
									, УровеньЖурналаРегистрации.Информация
									, УровеньЖурналаРегистрации.Предупреждение)
							)
							, Метаданные.Документы.ПеремещениеТоваров
							, ДокументОбъект.Ссылка
							, ДанныеЖурнала
							, МаркерРегистрации
								+ ". Записан " + СокрЛП(ДокументОбъект.Ссылка)
								+ "; Размер «Товары» ДО= " + Формат(ДокументОбъект.ДополнительныеСвойства.ТоварыКоличество, "ЧН=0; ЧГ=") + " строк"
							,
							, Истина
							, Ложь
						);

					ИначеЕсли ДокументОбъект.ДополнительныеСвойства.Свойство("ДанныеОшибки") Тогда

						ПараметрыЗадания.Вставить("ДанныеОшибки", ДокументОбъект.ДополнительныеСвойства.ДанныеОшибки);

					КонецЕсли;

				Иначе

					ТекстОшибки = МаркерРегистрации + "; Получено: [" + Формат(ДокументОбъект.Товары.Количество(), "ЧН=0; ЧГ=") + "]";

					ПараметрыЗадания.Вставить(
						"ДанныеОшибки"
						, Новый Структура(
							"Заголовок, Сообщение, Выполнено"
							, "WHDOC_MOVE_LINE [" + НомерДокумента + "]"
							, ТекстОшибки
							, 0
						)
					);

					ЖурналСобытий.Регистрация("WHDOC_MOVE_LINE", УровеньЖурналаРегистрации.Ошибка
						, Метаданные.Документы.ПеремещениеТоваров
						, ДокументОбъект.Ссылка
						, ДанныеЖурнала
						, ТекстОшибки
						,
						, Истина
						, Ложь
					);

				КонецЕсли;

			КонецЕсли;

			Если НЕ Блокиратор = Неопределено И Блокиратор.Заблокирован() Тогда

				Блокиратор.Разблокировать();

			КонецЕсли;

		КонецЕсли;

	Иначе

		ПараметрыЗадания.Вставить(
			"ДанныеОшибки"
			, Новый Структура(
				"Заголовок, Сообщение, Выполнено"
				, "WHDOC_MOVE_HEAD [" + НомерДокумента + "]"
				, "Метод WHDOC_MOVE_HEAD вернул пустую таблицу"
				, 0));

		Если ТипЗадания = "ДОК_ПЕРЕМЕЩ_УЧТЕНО" Тогда

			Если Документы.ПеремещениеТоваров.НайтиПоРеквизиту("IDN", НомерДокумента).Пустая() Тогда

			//	Нет документа с таким IDN в 1С:Розница! Задание "закрываем" как выполненное
				ПараметрыЗадания.ДанныеОшибки.Выполнено = 1;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ПараметрыЗадания.Свойство("ДанныеОшибки") Тогда	//	LNK 09.06.2021 06:26:09

		ЗначениеВозврата = (ПараметрыЗадания.ДанныеОшибки.Выполнено = 1);

	Иначе

		ЗначениеВозврата = НЕ ОбщегоНазначенияКлиентСервер.СсылкаПустая(ПараметрыЗадания.Ссылка);

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции

Функция ПривестиНомерЗаказаПокупателя(Знач НомерЗаказаПокупателя)	Экспорт

	Позиция = СтрНайти(НомерЗаказаПокупателя, "_");

	Если НЕ Позиция = 0 Тогда

		НомерЗаказаПокупателя = Сред(НомерЗаказаПокупателя, Позиция + 1);

	КонецЕсли;

	Возврат СокрЛП(НомерЗаказаПокупателя);

КонецФункции // ПривестиНомерЗаказаПокупателя()

#КонецОбласти

Функция ПередатьДанныеNavision(RequestText, IDN, ПараметрыЗадания, ПроверитьВыполнение, Отладка)

	РезультатПередачи = Новый Структура;
	РезультатПередачи.Вставить("ЗначениеВозврата", 0);
	РезультатПередачи.Вставить("ДанныеОтвета", "");

	Если ПустаяСтрока(RequestText) Тогда

		Возврат РезультатПередачи;

	КонецЕсли;

	Если НЕ Отладка = Истина Тогда

		Connection = ВнешниеИсточникиПовтИсп.ПолучитьСоединение(Перечисления.ВнешниеИсточники.Navision);

		Если НЕ Connection = Неопределено Тогда

			Command   = Новый COMОбъект("ADODB.Command");
			RecordSet = Новый COMОбъект("ADODB.RecordSet");

			Command.ActiveConnection = Connection;

			Попытка

				Command.CommandText = RequestText;
				RecordSet = Command.Execute();
				
				Если Не RecordSet.Fields.Count = 0 Тогда
				
					Если НЕ (RecordSet.BOF() И RecordSet.EOF()) Тогда
	
						RecordSet.MoveFirst();
	
						Пока RecordSet.EOF() = 0 Цикл
							
							Для Каждого СтрокаОтвета Из RecordSet.Fields Цикл
								
								ИмяПоля = СтрокаОтвета.Name;
								ЗначениеПоля = СтрокаОтвета.Value;
								СтрокаДанных = ИмяПоля + " -> " + ЗначениеПоля;
								
							КонецЦикла;
							
							РезультатПередачи.ДанныеОтвета = РезультатПередачи.ДанныеОтвета + СтрокаДанных + Символы.ПС;
							
							RecordSet.MoveNext();
	
						КонецЦикла;
	
					КонецЕсли;
	
				КонецЕсли;

			Исключение

				ТекстОшибки = ОписаниеОшибки();

				ВызватьИсключение ТекстОшибки
					+ Символы.ПС
					+ ОбщегоНазначенияКлиентСервер.REPEAT("#", 100)
					+ Символы.ПС + RequestText;

			КонецПопытки;

		Иначе

			ВызватьИсключение "Не удалось установить соединение с КСУ Navision!";

		КонецЕсли;

	КонецЕсли;

	Если ПроверитьВыполнение Тогда

		Если ПараметрыЗадания.ИспользоватьЗадания Тогда

			РезультатПередачи.ЗначениеВозврата = ОчередьПолучитьНомер(ПараметрыЗадания.ТипЗадания, IDN,, Отладка);

		Иначе
			
			Если ПустаяСтрока(ПараметрыЗадания.ТипДокумента) Тогда

				РезультатПередачи.ЗначениеВозврата = 1;

			Иначе

			//	"100" - для отличия от "1".. по сути имеет значение отличие от "0".
				РезультатПередачи.ЗначениеВозврата = ?(ЕстьВЗаголовках(ПараметрыЗадания.ТипДокумента, IDN,, ПараметрыЗадания, Отладка), 100, 0);
			
			КонецЕсли;

		КонецЕсли;

	Иначе

		РезультатПередачи.ЗначениеВозврата = 1;

	КонецЕсли;

	Возврат РезультатПередачи;

КонецФункции

//Криворучко 05122016 //Обработка события "Сверка"
Процедура СверкаПеремещенийNavision()
	
	//получим  данные по документам 1С
	ТекстЗапроса = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваровТовары.Ссылка КАК перемещение,
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ ПеремещениеТоваровТовары.Ссылка.МагазинПолучатель.СкладУправляющейСистемы
	|			ТОГДА ПеремещениеТоваровТовары.Ссылка.МагазинПолучатель
	|		КОГДА НЕ ПеремещениеТоваровТовары.Ссылка.МагазинОтправитель.СкладУправляющейСистемы
	|			ТОГДА ПеремещениеТоваровТовары.Ссылка.МагазинОтправитель
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|	КОНЕЦ КАК Магазин,
	|	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество,
	|	СУММА(ПеремещениеТоваровТовары.Сумма) КАК Сумма,
	|	ВЫБОР
	|		КОГДА СУММА(ПеремещениеТоваровТовары.Количество) = 0
	|			ТОГДА СУММА(ПеремещениеТоваровТовары.Сумма)
	|		ИНАЧЕ СУММА(ПеремещениеТоваровТовары.Сумма) / СУММА(ПеремещениеТоваровТовары.Количество)
	|	КОНЕЦ КАК Цена
	|ПОМЕСТИТЬ ВТПеремещения
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка.Проведен = ИСТИНА
	|	И ПеремещениеТоваровТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И ВЫБОР
	|			КОГДА &ОкончаниеПериода = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
	|			ИНАЧЕ &ОкончаниеПериода
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА НЕ ПеремещениеТоваровТовары.Ссылка.МагазинПолучатель.СкладУправляющейСистемы
	|			ТОГДА ПеремещениеТоваровТовары.Ссылка.МагазинПолучатель
	|		КОГДА НЕ ПеремещениеТоваровТовары.Ссылка.МагазинОтправитель.СкладУправляющейСистемы
	|			ТОГДА ПеремещениеТоваровТовары.Ссылка.МагазинОтправитель
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|	КОНЕЦ,
	|	ПеремещениеТоваровТовары.Ссылка,
	|	ПеремещениеТоваровТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОрдеры.ДокументОснование КАК ДокументОснование,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОрдеры.Ордер.Проведен = ИСТИНА
	|					И ОбъектУчтенВNavision.УчтеноNavision = ИСТИНА
	|				ТОГДА ТаблицаОрдеры.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоФакт,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОрдеры.Ордер.Проведен = ЛОЖЬ
	|					ИЛИ ЕСТЬNULL(ОбъектУчтенВNavision.УчтеноNavision, ЛОЖЬ) = ЛОЖЬ
	|				ТОГДА ТаблицаОрдеры.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоВРаботе,
	|	ТаблицаОрдеры.Номенклатура КАК Номенклатура,
	|	СУММА(ТаблицаОрдеры.Количество) КАК Количество,
	|	МАКСИМУМ(ЕСТЬNULL(ОбъектУчтенВNavision.УчтеноNavision, ЛОЖЬ)) КАК УчтеноNavision,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаОрдеры.Ордер) КАК КоличествоОрдеров
	|ПОМЕСТИТЬ ВтОрдера
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаОрдеры.Ссылка.ДокументОснование КАК ДокументОснование,
	|		ТаблицаОрдеры.Ссылка КАК Ордер,
	|		ТаблицаОрдеры.Ссылка.Магазин КАК Магазин,
	|		ТаблицаОрдеры.Номенклатура КАК Номенклатура,
	|		СУММА(ТаблицаОрдеры.Количество) КАК Количество
	|	ИЗ
	|		Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаОрдеры
	|	ГДЕ
	|		ТаблицаОрдеры.Ссылка.ДокументОснование ССЫЛКА Документ.ПеремещениеТоваров
	|		И НЕ ТаблицаОрдеры.Ссылка.ПометкаУдаления
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаОрдеры.Ссылка,
	|		ТаблицаОрдеры.Номенклатура,
	|		ТаблицаОрдеры.Ссылка.ДокументОснование,
	|		ТаблицаОрдеры.Ссылка.Магазин
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаОрдеры.Ссылка.ДокументОснование,
	|		ТаблицаОрдеры.Ссылка,
	|		ТаблицаОрдеры.Ссылка.Магазин,
	|		ТаблицаОрдеры.Номенклатура,
	|		СУММА(ТаблицаОрдеры.Количество)
	|	ИЗ
	|		Документ.РасходныйОрдерНаТовары.Товары КАК ТаблицаОрдеры
	|	ГДЕ
	|		ТаблицаОрдеры.Ссылка.ДокументОснование ССЫЛКА Документ.ПеремещениеТоваров
	|		И НЕ ТаблицаОрдеры.Ссылка.ПометкаУдаления
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаОрдеры.Ссылка,
	|		ТаблицаОрдеры.Номенклатура,
	|		ТаблицаОрдеры.Ссылка.ДокументОснование,
	|		ТаблицаОрдеры.Ссылка.Магазин) КАК ТаблицаОрдеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК ОбъектУчтенВNavision
	|		ПО ТаблицаОрдеры.Ордер = ОбъектУчтенВNavision.Объект
	|			И ТаблицаОрдеры.Магазин = ОбъектУчтенВNavision.Магазин
	|ГДЕ
	|	ТаблицаОрдеры.ДокументОснование В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВТПеремещения.перемещение
	|			ИЗ
	|				ВТПеремещения КАК ВТПеремещения)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОрдеры.Номенклатура,
	|	ТаблицаОрдеры.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваровТовары.Магазин.НомерМагазина КАК Магазин,
	|	ПеремещениеТоваровТовары.перемещение.IDN КАК Перемещение,
	|	НАЧАЛОПЕРИОДА(ПеремещениеТоваровТовары.перемещение.Дата, ДЕНЬ) КАК ПеремещениеДата,
	|	ВЫБОР
	|		КОГДА НЕ ПеремещениеТоваровТовары.перемещение.МагазинПолучатель.СкладУправляющейСистемы
	|			ТОГДА ""Приход""
	|		КОГДА НЕ ПеремещениеТоваровТовары.перемещение.МагазинОтправитель.СкладУправляющейСистемы
	|			ТОГДА ""Расход""
	|		ИНАЧЕ ""Переброска между складами""
	|	КОНЕЦ КАК ВидДвижения,
	|	ЕСТЬNULL(КолОрдеров.КоличествоОрдеров, 0) КАК КоличествоОрдеров,
	|	ПеремещениеТоваровТовары.Номенклатура.ВидНоменклатуры.IDN КАК Проект,
	|	СУММА(ПеремещениеТоваровТовары.Количество) КАК КоличествоПлан,
	|	СУММА(ПеремещениеТоваровТовары.Сумма) КАК СуммаПеремещение,
	|	ПеремещениеУчтенВNavision.УчтеноNavision КАК УчтенВNavisionПеремещение,
	|	СУММА(ВЫБОР
	|			КОГДА ОрдераНаТовары.Количество ЕСТЬ NULL 
	|					И КолОрдеров.КоличествоОрдеров ЕСТЬ NULL 
	|				ТОГДА ПеремещениеТоваровТовары.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоВПути,
	|	СУММА(ЕСТЬNULL(ОрдераНаТовары.КоличествоФакт, 0)) КАК КоличествоФакт,
	|	СУММА(ЕСТЬNULL(ОрдераНаТовары.КоличествоВРаботе, 0)) КАК КоличествоВРаботе,
	|	СУММА(ВЫБОР
	|			КОГДА ПеремещениеТоваровТовары.Количество - ВЫБОР
	|					КОГДА ОрдераНаТовары.Количество ЕСТЬ NULL 
	|							И КолОрдеров.КоличествоОрдеров ЕСТЬ NULL 
	|						ТОГДА ПеремещениеТоваровТовары.Количество
	|					ИНАЧЕ ЕСТЬNULL(ОрдераНаТовары.Количество, 0)
	|				КОНЕЦ < 0
	|				ТОГДА -(ПеремещениеТоваровТовары.Количество - ВЫБОР
	|						КОГДА ОрдераНаТовары.Количество ЕСТЬ NULL 
	|								И КолОрдеров.КоличествоОрдеров ЕСТЬ NULL 
	|							ТОГДА ПеремещениеТоваровТовары.Количество
	|						ИНАЧЕ ЕСТЬNULL(ОрдераНаТовары.Количество, 0)
	|					КОНЕЦ)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РазницаПриход,
	|	СУММА(ВЫБОР
	|			КОГДА ПеремещениеТоваровТовары.Количество - ВЫБОР
	|					КОГДА ОрдераНаТовары.Количество ЕСТЬ NULL 
	|							И КолОрдеров.КоличествоОрдеров ЕСТЬ NULL 
	|						ТОГДА ПеремещениеТоваровТовары.Количество
	|					ИНАЧЕ ЕСТЬNULL(ОрдераНаТовары.Количество, 0)
	|				КОНЕЦ < 0
	|				ТОГДА ПеремещениеТоваровТовары.Цена * -(ПеремещениеТоваровТовары.Количество - ВЫБОР
	|						КОГДА ОрдераНаТовары.Количество ЕСТЬ NULL 
	|								И КолОрдеров.КоличествоОрдеров ЕСТЬ NULL 
	|							ТОГДА ПеремещениеТоваровТовары.Количество
	|						ИНАЧЕ ЕСТЬNULL(ОрдераНаТовары.Количество, 0)
	|					КОНЕЦ)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПриход,
	|	СУММА(ВЫБОР
	|			КОГДА ПеремещениеТоваровТовары.Количество - ВЫБОР
	|					КОГДА ОрдераНаТовары.Количество ЕСТЬ NULL 
	|							И КолОрдеров.КоличествоОрдеров ЕСТЬ NULL 
	|						ТОГДА ПеремещениеТоваровТовары.Количество
	|					ИНАЧЕ ЕСТЬNULL(ОрдераНаТовары.Количество, 0)
	|				КОНЕЦ > 0
	|				ТОГДА ПеремещениеТоваровТовары.Количество - ВЫБОР
	|						КОГДА ОрдераНаТовары.Количество ЕСТЬ NULL 
	|								И КолОрдеров.КоличествоОрдеров ЕСТЬ NULL 
	|							ТОГДА ПеремещениеТоваровТовары.Количество
	|						ИНАЧЕ ЕСТЬNULL(ОрдераНаТовары.Количество, 0)
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РазницаРасход,
	|	СУММА(ВЫБОР
	|			КОГДА ПеремещениеТоваровТовары.Количество - ВЫБОР
	|					КОГДА ОрдераНаТовары.Количество ЕСТЬ NULL 
	|							И КолОрдеров.КоличествоОрдеров ЕСТЬ NULL 
	|						ТОГДА ПеремещениеТоваровТовары.Количество
	|					ИНАЧЕ ЕСТЬNULL(ОрдераНаТовары.Количество, 0)
	|				КОНЕЦ > 0
	|				ТОГДА ПеремещениеТоваровТовары.Цена * (ПеремещениеТоваровТовары.Количество - ВЫБОР
	|						КОГДА ОрдераНаТовары.Количество ЕСТЬ NULL 
	|								И КолОрдеров.КоличествоОрдеров ЕСТЬ NULL 
	|							ТОГДА ПеремещениеТоваровТовары.Количество
	|						ИНАЧЕ ЕСТЬNULL(ОрдераНаТовары.Количество, 0)
	|					КОНЕЦ)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРасход,
	|	СУММА(ПеремещениеТоваровТовары.Цена * ЕСТЬNULL(ОрдераНаТовары.Количество, 0)) КАК суммаОрдер
	|ИЗ
	|	ВТПеремещения КАК ПеремещениеТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК ПеремещениеУчтенВNavision
	|		ПО ПеремещениеТоваровТовары.перемещение = ПеремещениеУчтенВNavision.Объект
	|			И ПеремещениеТоваровТовары.Магазин = ПеремещениеУчтенВNavision.Магазин
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОрдера КАК ОрдераНаТовары
	|		ПО ПеремещениеТоваровТовары.перемещение = ОрдераНаТовары.ДокументОснование
	|			И ПеремещениеТоваровТовары.Номенклатура = ОрдераНаТовары.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВтОрдера.ДокументОснование КАК ДокументОснование,
	|			МАКСИМУМ(ВтОрдера.КоличествоОрдеров) КАК КоличествоОрдеров,
	|			МАКСИМУМ(ВтОрдера.УчтеноNavision) КАК ОрдерУчтен
	|		ИЗ
	|			ВтОрдера КАК ВтОрдера
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВтОрдера.ДокументОснование) КАК КолОрдеров
	|		ПО ПеремещениеТоваровТовары.перемещение = КолОрдеров.ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваровТовары.перемещение.IDN,
	|	НАЧАЛОПЕРИОДА(ПеремещениеТоваровТовары.перемещение.Дата, ДЕНЬ),
	|	ВЫБОР
	|		КОГДА НЕ ПеремещениеТоваровТовары.перемещение.МагазинПолучатель.СкладУправляющейСистемы
	|			ТОГДА ""Приход""
	|		КОГДА НЕ ПеремещениеТоваровТовары.перемещение.МагазинОтправитель.СкладУправляющейСистемы
	|			ТОГДА ""Расход""
	|		ИНАЧЕ ""Переброска между складами""
	|	КОНЕЦ,
	|	КолОрдеров.КоличествоОрдеров,
	|	ПеремещениеТоваровТовары.Номенклатура.ВидНоменклатуры,
	|	ПеремещениеУчтенВNavision.УчтеноNavision,
	|	ПеремещениеТоваровТовары.Магазин.НомерМагазина,
	|	ПеремещениеТоваровТовары.Номенклатура.ВидНоменклатуры.IDN
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проект,
	|	ПеремещениеДата";	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("НачалоПериода", (ДобавитьМесяц(НачалоДня(ТекущаяДата()),-1)-15*60*60*24)); //Установим период 45 дней
	Запрос.Параметры.Вставить("ОкончаниеПериода", КонецДня(ТекущаяДата()));
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	//Загрузим в Navision
	
	ТекстЗапросаШаблон = 	
	"exec dbo.Exch1С_ЗагрузкаДокументаДляСверки
	|  @docType = '#DOC_TYPE#'
	|, @docNo   = '#DOC_NO#'
  	|, @CountOrder = #COUNT_ORDER#
	|, @QuantityPlan = #QUANTITY_PLAN#
	|, @SumPlan  = #SUM_PLAN#
	|, @QuantityDelivery =  #QUANTITY_DELIVERY#
	|, @QuantityWork = #QUANTITY_WORK#
	|, @QuantityFact = #QUANTITY_FACT#
	|, @SumOrder = #SUM_ORDER#
	|, @PlusQuantity = #PLUS_QUANTITY#
	|, @PlusSum = #PLUS_SUM#
	|, @MinusQuantity = #MINUS_QUANTITY#
	|, @MinusSum = #MINUS_SUM#
	|";
	
	Connection = ВнешниеИсточникиПовтИсп.ПолучитьСоединение(Перечисления.ВнешниеИсточники.Navision);

	Если НЕ Connection = Неопределено Тогда
		Command   = Новый COMОбъект("ADODB.Command");

		Command.ActiveConnection = Connection;

		Для Каждого Стр из Данные Цикл
			//Передача в Navigion
			ТекстЗапроса =  ТекстЗапросаШаблон;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#DOC_TYPE#","ПЕРЕМЕЩ");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#DOC_NO#",Стр.Перемещение);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#COUNT_ORDER#",Формат(Стр.КоличествоОрдеров,"ЧЦ=10; ЧДЦ=; ЧРД=.; ЧН=0; ЧГ="));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#QUANTITY_PLAN#",Формат(Стр.КоличествоПлан,"ЧЦ=10; ЧДЦ=; ЧРД=.; ЧН=0; ЧГ="));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#SUM_PLAN#",Формат(Стр.СуммаПеремещение,"ЧЦ=10; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ="));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#QUANTITY_DELIVERY#",Формат(Стр.КоличествоВПути,"ЧЦ=10; ЧДЦ=; ЧРД=.; ЧН=0; ЧГ="));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#QUANTITY_WORK#",Формат(Стр.КоличествоВРаботе,"ЧЦ=10; ЧДЦ=; ЧРД=.; ЧН=0; ЧГ="));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#QUANTITY_FACT#",Формат(Стр.КоличествоФакт,"ЧЦ=10; ЧДЦ=; ЧРД=.; ЧН=0; ЧГ="));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#SUM_ORDER#",Формат(Стр.суммаОрдер,"ЧЦ=10; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ="));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#PLUS_QUANTITY#",Формат(Стр.РазницаПриход,"ЧЦ=10; ЧДЦ=; ЧРД=.; ЧН=0; ЧГ="));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#PLUS_SUM#",Формат(Стр.СуммаПриход,"ЧЦ=10; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ="));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#MINUS_QUANTITY#",Формат(Стр.РазницаРасход,"ЧЦ=10; ЧДЦ=; ЧРД=.; ЧН=0; ЧГ="));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#MINUS_SUM#",Формат(Стр.СуммаРасход,"ЧЦ=10; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ="));
			                                                                                  
			Command.CommandText = ТекстЗапроса;
			Command.Execute();
		КонецЦикла;	
		//Сообщить("Данные выгружены.");
	конецесли;


КонецПроцедуры
//

//	LNK 15.02.2017 10:29:08
#Область ПроцедурыПолученияЦенИзNavision

//	1-й этап. Заполнение таблицы требований из Navision
Процедура ВыполнитьЗагрузкуЦеныТребующиеОбновления(ОчередьNavision)	Экспорт	//	для отладки - экспортируемая

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаNavision.ЗаданиеНо КАК НомерЗадания,
	|	ТаблицаNavision.ID1,
	|	ТаблицаNavision.ID2,
	|	ТаблицаNavision.ID5
	|ПОМЕСТИТЬ Задания
	|ИЗ
	|	&ТаблицаNavision КАК ТаблицаNavision
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задания.НомерЗадания,
	|	Задания.ID1,
	|	Задания.ID2,
	|	Задания.ID5
	|ИЗ
	|	Задания КАК Задания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныТребующиеОбновления КАК ЦеныТребующиеОбновления
	|		ПО Задания.НомерЗадания = ЦеныТребующиеОбновления.НомерЗадания
	|ГДЕ
	|	ЦеныТребующиеОбновления.НомерЗадания ЕСТЬ NULL "
	);
	Запрос.УстановитьПараметр("ТаблицаNavision", ОчередьNavision.Результат.Выгрузить());

	ОчередьNavisionВыборка = Запрос.Выполнить().Выбрать();

	Пока ОчередьNavisionВыборка.Следующий() Цикл

		Попытка

			МенеджерЗаписи = РегистрыСведений.ЦеныТребующиеОбновления.СоздатьМенеджерЗаписи();

			МенеджерЗаписи.IDN           = ОчередьNavisionВыборка.ID1;
			МенеджерЗаписи.КодПрайсЛиста = ОчередьNavisionВыборка.ID2;
			МенеджерЗаписи.НомерЗадания  = ОчередьNavisionВыборка.НомерЗадания;

			МассивДатаИВремя = ОбщегоНазначенияКлиентСервер.lx_FillValueList(, ОчередьNavisionВыборка.ID5,, "T");

			Если МассивДатаИВремя.Количество() = 2 Тогда

				МассивДата  = ОбщегоНазначенияКлиентСервер.lx_FillValueList(, МассивДатаИВремя[0],, "-");
				МассивВремя = ОбщегоНазначенияКлиентСервер.lx_FillValueList(, МассивДатаИВремя[1],, ":");
				МенеджерЗаписи.Период = Дата(МассивДата[0] + МассивДата[1] + МассивДата[2] + МассивВремя[0] + МассивВремя[1] + МассивВремя[2]);

			ИначеЕсли НЕ ПустаяСтрока(МенеджерЗаписи.IDN) Тогда

			//	Иногда вдруг не указана дата назначения цены... примем текущую - всё равно ведь цену нужно установить!
				МенеджерЗаписи.Период = ТекущаяДатаСеанса();
				ТекстОшибки = "Не указана дата цен ID5=" + СокрЛП(ОчередьNavisionВыборка.ID5) + ". Принята текущая дата.";
				ЗаписьЖурналаРегистрации("ЦеныNavision.ЦеныТребующиеОбновления", УровеньЖурналаРегистрации.Информация
				, Метаданные.РегистрыСведений.ЦеныТребующиеОбновления,, ТекстОшибки, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

			КонецЕсли;

			Если МенеджерЗаписи.Период = '00010101' ИЛИ ПустаяСтрока(МенеджерЗаписи.IDN) Тогда
				
				ТекстОшибки = "Не удалось получить дату цен ID5=[" + СокрЛП(ОчередьNavisionВыборка.ID5) + "] либо не заполнен ID1=[" + СокрЛП(ОчередьNavisionВыборка.ID1) + "]! Отклонено.";
				ОчередьОбновитьЗадание(ОчередьNavisionВыборка.ЗаданиеНо,, 1, ТекстОшибки);
				ЗаписьЖурналаРегистрации("ЦеныNavision.ЦеныТребующиеОбновления", УровеньЖурналаРегистрации.Предупреждение
				, Метаданные.РегистрыСведений.ЦеныТребующиеОбновления,, ТекстОшибки, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

			Иначе

				МенеджерЗаписи.ДатаИзменения = ТекущаяДатаСеанса();
				МенеджерЗаписи.Записать(Истина);

			КонецЕсли;

		Исключение

		//	Что-то свалилось... просто пропускаем. Загрузится в следующий раз.
			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ЦеныNavision.ЦеныТребующиеОбновления", УровеньЖурналаРегистрации.Предупреждение
			, Метаданные.РегистрыСведений.ЦеныТребующиеОбновления,, "Ошибка заполнения: " + ТекстОшибки, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

//	2-й этап. Обновление товаров и установка плановых цен товаров.
Процедура ВыполнитьУстановкуТребуемыхЦенНоменклатуры(Период, РежимУстановкиЦен)	Экспорт	//	для отладки - экспортируемая
	
//	Параметр "РежимУстановкиЦен" может приобретать следующие значения:
//	0. Назначение = "ЦеныНоменклатуры"
//	1. Назначение = "ЦеныНоменклатурыОптовые"
//	2. Назначение = "ЦеныНоменклатурыWEB"

	Пока Истина Цикл

	//	Первая временная таблица - для получения первых записей в порядке "Период".
	//	Вторая временная таблица "Фильтр" - из этих периодов выбираем различные IDN.
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100000
		|	ТаблицаРегистра.Период КАК Период
		|ПОМЕСТИТЬ Периоды
		|ИЗ
		|	РегистрСведений.ЦеныТребующиеОбновления КАК ТаблицаРегистра
		|ГДЕ
		|	НЕ ТаблицаРегистра.Выполнено
		|	И ТаблицаРегистра.IDN <> """"
		|	И ТаблицаРегистра.КодПрайсЛиста В(&КодыПрайсов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
		|	ТаблицаРегистра.IDN КАК IDN
		|ПОМЕСТИТЬ Фильтр
		|ИЗ
		|	Периоды КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныТребующиеОбновления КАК ТаблицаРегистра
		|		ПО Периоды.Период = ТаблицаРегистра.Период
		|ГДЕ
		|	НЕ ТаблицаРегистра.Выполнено
		|	И ТаблицаРегистра.IDN <> """"
		|	И ТаблицаРегистра.КодПрайсЛиста В(&КодыПрайсов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	IDN
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	IDN
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Периоды
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРегистра.Период КАК Период,
		|	ТаблицаРегистра.IDN КАК IDN,
		|	ТаблицаРегистра.КодПрайсЛиста КАК КодПрайсЛиста,
		|	ТаблицаРегистра.НомерЗадания КАК НомерЗадания
		|ПОМЕСТИТЬ Источник
		|ИЗ
		|	Фильтр КАК Фильтр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныТребующиеОбновления КАК ТаблицаРегистра
		|		ПО Фильтр.IDN = ТаблицаРегистра.IDN
		|ГДЕ
		|	НЕ ТаблицаРегистра.Выполнено
		|	И ТаблицаРегистра.КодПрайсЛиста В(&КодыПрайсов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	IDN,
		|	КодПрайсЛиста,
		|	НомерЗадания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Фильтр.IDN КАК IDN
		|ИЗ
		|	Фильтр КАК Фильтр
		|
		|УПОРЯДОЧИТЬ ПО
		|	IDN
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Фильтр.IDN КАК IDN
		|ИЗ
		|	Фильтр КАК Фильтр
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
		|		ПО Фильтр.IDN = ТаблицаСправочник.IDN
		|ГДЕ
		|	ТаблицаСправочник.Ссылка ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	IDN
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Фильтр"
		);
	//	Первым запросом получаем ограниченную выборку для формирования временной таблицы "Источник" и получения из
	//	неё строковых списков кодов для создания/обновления номенклатуры и получения таблиц цен из Navision.
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Период", Период);
	//	Вид цены "Интернет" всегда получаем на текущий момент времени.
		Запрос.УстановитьПараметр("ВидЦенWEB"  , ?(РежимУстановкиЦен < 2, Неопределено, ВнешниеИсточникиПовтИсп.ПолучитьВидЦенИнтернет(ТекущаяДатаСеанса())));
		Запрос.УстановитьПараметр("КодыПрайсов", ?(РежимУстановкиЦен = 0, КодыРозничныхПрайсов("Массив"), ?(РежимУстановкиЦен = 1, "ОПТ", ВнешниеИсточникиПовтИсп.КодыПрайсЛистаWEB("Массив", Ложь))));
		Запрос.УстановитьПараметр("ОптовыеЦены", РежимУстановкиЦен = 1);

		Результаты = Запрос.ВыполнитьПакет();

		Если НЕ Результаты[4].Пустой() Тогда

		//	... строка IDN'ов для получения таблиц цен из Navision 
			СтрокаКодовПолученияЦен = ВнешниеИсточники.ПолучитьСтрокуIDNТоваров(Результаты[4].Выгрузить().ВыгрузитьКолонку("IDN"), "");

			Если НЕ Результаты[5].Пустой() Тогда

			//	По строке IDN'ов обновим существующие товарные позиции или создадим новые, если таковых кодов не нашлось.
				ВнешниеИсточники.УстановитьНоменклатуруВТаблицеПодготовки(Результаты[5].Выгрузить().ВыгрузитьКолонку("IDN"), Ложь, Новый Массив);

			КонецЕсли;

		//	Получать товары только после обновления товаров по IDN!
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Ведущая.IDN КАК IDN,
			|	ТаблицаСправочник.Ссылка КАК Номенклатура
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	Источник КАК Ведущая
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
			|		ПО Ведущая.IDN = ТаблицаСправочник.IDN
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Магазины.Ссылка КАК Магазин,
			|	Магазины.СкладПродажи.IDN КАК IDNСклада,
			|	Магазины.ПравилоЦенообразования.ВидЦен КАК ВидЦены,
			|	Магазины.СкладПродажи КАК Склад,
			|	Магазины.НомерМагазина КАК КлючПорядка
			|ПОМЕСТИТЬ ВидыЦен
			|ИЗ
			|	Справочник.Магазины КАК Магазины
			|ГДЕ
			|	&ОптовыеЦены = ЛОЖЬ
			|	И ЕСТЬNULL(Магазины.ПравилоЦенообразования.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	И ВЫБОР
			|			КОГДА &ВидЦенWEB = НЕОПРЕДЕЛЕНО
			|				ТОГДА Магазины.ВведенВЭксплуатацию
			|						И НЕ Магазины.Блокирован
			|						И НЕ Магазины.ПометкаУдаления
			|			ИНАЧЕ Магазины.ПравилоЦенообразования.ВидЦен = &ВидЦенWEB
			|		КОНЕЦ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка),
			|	"""",
			|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ОптовыеЦены),
			|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
			|	0
			|ГДЕ
			|	&ОптовыеЦены = ИСТИНА
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ВидЦены
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТоварыОбработаны.Период КАК Период,
			|	ТоварыОбработаны.IDN КАК IDN,
			|	ТоварыОбработаны.КодПрайсЛиста КАК КодПрайсЛиста,
			|	ТоварыОбработаны.НомерЗадания КАК НомерЗадания
			|ИЗ
			|	Источник КАК ТоварыОбработаны
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Развернутая.IDN КАК IDN,
			|	Развернутая.IDNСклада КАК IDNСклада,
			|	Развернутая.ВидЦены КАК ВидЦены,
			|	Развернутая.Склад КАК Склад,
			|	Развернутая.КодПроекта КАК КодПроекта,
			|	Развернутая.Номенклатура КАК Номенклатура,
			|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК ЦенаНачало,
			|	ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КАК УпаковкаНачало,
			|	ЕСТЬNULL(ЦеныНоменклатуры.Акция, ЛОЖЬ) КАК АкцияНачало,
			|	ЕСТЬNULL(ЦеныНоменклатуры.ТипПереоценки, ВЫБОР
			|			КОГДА &ОптовыеЦены = ЛОЖЬ
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПереоценок.Переоценка)
			|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыПереоценок.ПустаяСсылка)
			|		КОНЕЦ) КАК ТипПереоценки,
			|	Развернутая.КлючПорядка КАК КлючПорядка
			|ИЗ
			|	(ВЫБРАТЬ
			|		Товары.IDN КАК IDN,
			|		ВидыЦен.IDNСклада КАК IDNСклада,
			|		ВидыЦен.ВидЦены КАК ВидЦены,
			|		Товары.Номенклатура КАК Номенклатура,
			|		ВидыЦен.КлючПорядка КАК КлючПорядка,
			|		ВидыЦен.Склад КАК Склад,
			|		Товары.Номенклатура.ВидНоменклатуры.IDN КАК КодПроекта
			|	ИЗ
			|		Товары КАК Товары
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыЦен КАК ВидыЦен
			|			ПО (ИСТИНА)) КАК Развернутая
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|				ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Период, ДЕНЬ), СЕКУНДА, -1),
			|				ВидЦены В
			|						(ВЫБРАТЬ
			|							ВидыЦен.ВидЦены
			|						ИЗ
			|							ВидыЦен)
			|					И Номенклатура В
			|						(ВЫБРАТЬ
			|							Товары.Номенклатура
			|						ИЗ
			|							Товары)) КАК ЦеныНоменклатуры
			|		ПО Развернутая.ВидЦены = ЦеныНоменклатуры.ВидЦены
			|			И Развернутая.Номенклатура = ЦеныНоменклатуры.Номенклатура
			|
			|УПОРЯДОЧИТЬ ПО
			|	IDN,
			|	КлючПорядка
			|ИТОГИ
			|	МАКСИМУМ(IDN),
			|	МАКСИМУМ(КодПроекта)
			|ПО
			|	Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ Источник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ Товары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВидыЦен"
			;

			Если РежимУстановкиЦен = 0 Тогда

				ТекстЗапроса =
				"SELECT * FROM dbo.PL_GetItemPriceRecFuture('" + СтрокаКодовПолученияЦен + "', '" + Формат(Период, "ДФ=yyyyMMdd") + "')
				|ORDER BY [Товар Но_],[Код Склада],[Дата Начала] -- order by обязателен!";

				ТаблицаЦеныNavision = ВнешниеИсточники.ПолучитьДанныеОтNavision(ТекстЗапроса,,, Истина, 1000);

			ИначеЕсли РежимУстановкиЦен = 1 Тогда

				ТекстЗапроса =
				"SELECT * FROM dbo.PL_GetItemOptPriceRecFuture('" + СтрокаКодовПолученияЦен + "', '" + Формат(Период, "ДФ=yyyyMMdd") + "')
				|ORDER BY [Товар Но_],[Код Склада],[Дата Начала] -- order by обязателен!";

				ТаблицаЦеныNavision = ПодготовитьТаблицуОптовыхЦенNavision(ВнешниеИсточники.ПолучитьДанныеОтNavision(ТекстЗапроса,,, Истина, 1000));

			Иначе

				ТаблицаЦеныNavision = ВнешниеИсточники.ПолучитьДанныеОтNavision("SELECT * FROM dbo.PL_GetItemWebPriceRec('" + СтрокаКодовПолученияЦен + "', '" + Формат(Период, "ДФ=yyyyMMdd") + "')",,, Истина, 1000);

			КонецЕсли;

			ТаблицаЦеныNavision.Индексы.Добавить("ТоварНо_");

			РезультатыТовары = Запрос.ВыполнитьПакет();

			ТаблицаВыполнить = РезультатыТовары[2].Выгрузить();
			ТаблицаВыполнить.Индексы.Добавить("IDN");
		//	Выборка по товарам - основная, собственно. Здесь получаем цены на дату и
		//	записываем в "РегистрыСведений.ЦеныНоменклатуры"
			ВыборкаВедущая = РезультатыТовары[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаВедущая.Следующий() Цикл

				ТаблицаПогашения   = ТаблицаВыполнить.Скопировать(Новый Структура("IDN", ВыборкаВедущая.IDN));
				СписокКодовПрайсов = ПолучитьСортированнуюСтрокуПрайсов(ТаблицаПогашения.Скопировать(, "КодПрайсЛиста"));

				ВыборкаТовары = ВыборкаВедущая.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

				Пока ВыборкаТовары.Следующий() Цикл

				//	В случае "РежимУстановкиЦен = 1" у нас один прайс - "ОПТ".
					Если РежимУстановкиЦен = 1 ИЛИ ВнешниеИсточникиПовтИсп.ПрайсыВлияютНаВидЦены(ВыборкаТовары.КодПроекта, ВыборкаТовары.Склад, СписокКодовПрайсов) Тогда

						УстановитьЗаписиВРегистреЦеныНоменклатуры(Период, ВыборкаТовары, ТаблицаЦеныNavision, РежимУстановкиЦен = 1);

					Иначе

						А = 33;

					КонецЕсли;

				КонецЦикла;

			//	Выборка по измерениям "РегистрыСведений.ЦеныТребующиеОбновления" для пометки выполнения.
			//	Удалять записи будем отдельным регламентом во избежание транзакционных проблем.

				НаборЗаписей = РегистрыСведений.ЦеныТребующиеОбновления.СоздатьНаборЗаписей();
				НаборЗаписей.ОбменДанными.Загрузка = Истина;

				Для каждого СтрокаПогасить Из ТаблицаПогашения Цикл

					НаборЗаписей.Отбор.Период.Установить(СтрокаПогасить.Период);
					НаборЗаписей.Отбор.IDN.Установить(СтрокаПогасить.IDN);
					НаборЗаписей.Отбор.КодПрайсЛиста.Установить(СтрокаПогасить.КодПрайсЛиста);
					НаборЗаписей.Отбор.НомерЗадания.Установить(СтрокаПогасить.НомерЗадания);

					НаборЗаписей.Прочитать();

					Для каждого ЗаписьНабора Из НаборЗаписей Цикл

						ЗаписьНабора.Выполнено = Истина;
						ЗаписьНабора.ДатаИзменения = ТекущаяДатаСеанса();

					КонецЦикла;

					НаборЗаписей.Записать(Истина);

				КонецЦикла;

			КонецЦикла;

		Иначе

		//	Завершение цикла обработки.
			Прервать;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//	Итог 2-го этапа - установка цен номенклатуры без создания регистратора!
Процедура УстановитьЗаписиВРегистреЦеныНоменклатуры(Период, ВыборкаТовары, ТаблицаЦеныNavision, ОптовыеЦены)

	СтрокиЦеныNavision = ТаблицаЦеныNavision.Скопировать(
		Новый Структура(
			"ТоварНо_, КодСклада"
			, СокрЛП(ВыборкаТовары.IDN)
			, ?(ОптовыеЦены, "ОПТОВЫЙ", СокрЛП(ВыборкаТовары.IDNСклада))));
	СтрокиЦеныNavision.Сортировать("ДатаНачала");

	ВГраницаNavision     = СтрокиЦеныNavision.Количество() - 1;
	НижняяГраницаПериода = НачалоГода(?(ОптовыеЦены, '20160101', ТекущаяДатаСеанса()));

	ТаблицаЦеныТекущие = ПолучитьТаблицуТекущихЦенТовара(Период, ВыборкаТовары.ВидЦены, ВыборкаТовары.Номенклатура, НижняяГраницаПериода);

//	1.	Проведём сверку данных, полученных из Navision, с данными 1С:Розница. Определим, какие записи каких наборов
//		следует удалить, какие записи изменить (уточнить), а какие и добавить.

	ПерваяЗаписьNavision = Истина;

	Для каждого СтрокаNavision Из СтрокиЦеныNavision Цикл

		ЦенаNavision = ПривестиЦенуПоФлагамНДС(СтрокаNavision.ЦенаЕдиницы, СтрокаNavision);

	//	Дата очень ранняя, но запись не последняя! Мало-ли, вдруг последняя цена была в прошлом году.
		Пропустить = (СтрокаNavision.ДатаНачала < НижняяГраницаПериода И СтрокиЦеныNavision.Индекс(СтрокаNavision) < ВГраницаNavision);

		Если НЕ Пропустить Тогда

			ДанныеУпаковки = ВнешниеИсточникиПовтИсп.ПолучитьУпаковкуПоКоду(ВыборкаТовары.Номенклатура, СтрокаNavision.КодЕдиницыИзмерения, Истина);

			СтрокиЦеныТекущие = ТаблицаЦеныТекущие.НайтиСтроки(Новый Структура("ДатаНачала, Упаковка", СтрокаNavision.ДатаНачала, ДанныеУпаковки.Упаковка));
		//	В Рознице цен за день может быть несколько, а в Navision - только одна в день по упаковке.
		//	Посему обрабатываем только последнюю в день, а остальные оставляем в "Активность = Ложь" (позднее удалим).

			ЦенаНачалоСоответствует = (ПерваяЗаписьNavision
									 И ВыборкаТовары.ЦенаНачало = ЦенаNavision
									 И ВыборкаТовары.АкцияНачало = СтрокаNavision.Акция
									 И ВыборкаТовары.УпаковкаНачало = ДанныеУпаковки.Упаковка)
									 И ТипПереоценкиNavisionСоответствует(СтрокаNavision.ТипПереоценки, ВыборкаТовары.ТипПереоценки);

			Если НЕ СтрокиЦеныТекущие.Количество() = 0 Тогда

				СтрокаЦены = СтрокиЦеныТекущие[СтрокиЦеныТекущие.ВГраница()];	//	принимаем последнюю (!) в найденном диапазоне
				ЦенаТекущаяСоответствует = (СтрокаЦены.Цена = ЦенаNavision
										  И СтрокаЦены.Акция = СтрокаNavision.Акция
										  И СтрокаЦены.Упаковка = ДанныеУпаковки.Упаковка
										  И ТипПереоценкиNavisionСоответствует(СтрокаNavision.ТипПереоценки, СтрокаЦены.ТипПереоценки));

				Если ЦенаТекущаяСоответствует И ЦенаНачалоСоответствует Тогда

				//	Процедура Navision в первой записи возвращает последнюю цену на запрошенный период - аналог нашему срезу последних.
				//	Вход в эту ветку означает, что такая цена уже была установлена ранее, скорее всего, ранее даты "отсечки".
					СтрокаЦены.Удалить = Истина;

				ИначеЕсли ЦенаТекущаяСоответствует Тогда

				//	Все показатели соответствуют! Снимаем флаг очистки цены. Таким образом, этот набор записей не трогаем!
					СтрокаЦены.Удалить = Ложь;

				Иначе

					СтрокаЦены.Обновить = Истина;
					СтрокаЦены.Цена     = ЦенаNavision;
					СтрокаЦены.Акция    = СтрокаNavision.Акция;
					СтрокаЦены.Упаковка = ДанныеУпаковки.Упаковка;
					СтрокаЦены.ТипПереоценки = ПолучитьТипПереоценки(СтрокаNavision.ТипПереоценки);

				КонецЕсли;

			ИначеЕсли НЕ ЦенаНачалоСоответствует Тогда

				СтрокаЦены = ТаблицаЦеныТекущие.Добавить();
				СтрокаЦены.Обновить    = Истина;
				СтрокаЦены.Удалить     = Ложь;
				СтрокаЦены.Период      = СтрокаNavision.ДатаНачала + 180;
				СтрокаЦены.ДатаНачала  = СтрокаNavision.ДатаНачала;
				СтрокаЦены.Регистратор = Документы.УстановкаЦенНоменклатуры.ПолучитьСсылку();
				СтрокаЦены.РегистраторУказан = Ложь;
				СтрокаЦены.ТипРегистратора   = Тип("ДокументСсылка.УстановкаЦенНоменклатуры");
				СтрокаЦены.Цена          = ЦенаNavision;
				СтрокаЦены.Акция         = СтрокаNavision.Акция;
				СтрокаЦены.Упаковка      = ДанныеУпаковки.Упаковка;
				СтрокаЦены.ТипПереоценки = ПолучитьТипПереоценки(СтрокаNavision.ТипПереоценки);

			КонецЕсли;

		КонецЕсли;

		ПерваяЗаписьNavision = Ложь;

	КонецЦикла;

//	2.	Сверку произвели. Все данные содержатся в таблице значений "ТаблицаЦеныТекущие".
//		В транзакции проводить операции "выравнивания" наборов записей нельзя ни в коем случае!
//		Надеемся на то, что если чего и вылетит, то выровняется в следующий раз. Других
//		вариантов не вижу в настоящий момент.

	НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);

	Для каждого СтрокаЦены Из ТаблицаЦеныТекущие Цикл

		Если НЕ (СтрокаЦены.Обновить ИЛИ СтрокаЦены.Удалить) Тогда

			Продолжить;

		КонецЕсли;

		НаборЗаписей.Отбор.Регистратор.Установить(СтрокаЦены.Регистратор);
		НаборЗаписей.Прочитать();

		ТаблицаНабора  = НаборЗаписей.Выгрузить();
		СписокВидовЦен = ОбщегоНазначенияКлиентСервер.ADD(ТаблицаНабора.ВыгрузитьКолонку("ВидЦены"), ВыборкаТовары.ВидЦены);

		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииMicrosoftDynamics", Истина);

		Для каждого ВидЦены Из СписокВидовЦен Цикл

			Если НЕ ВидЦены = Справочники.ВидыЦен.ОптовыеЦены Тогда

				УстановитьПолучателейПоВидуЦены(НаборЗаписей.ОбменДанными.Получатели, ВидЦены);
			
			КонецЕсли;

			Если ВнешниеИсточникиПовтИсп.ПолучитьВидЦенИнтернет() = ВидЦены И НаборЗаписей.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииMicrosoftDynamics") Тогда

				НаборЗаписей.ДополнительныеСвойства.Удалить("ОтключитьМеханизмРегистрацииMicrosoftDynamics");

			КонецЕсли;

		КонецЦикла;

		СтрокиНабора = ТаблицаНабора.НайтиСтроки(Новый Структура(
			"ВидЦены, Номенклатура, Упаковка"
			, ВыборкаТовары.ВидЦены
			, ВыборкаТовары.Номенклатура
			, СтрокаЦены.Упаковка));

		Для каждого СтрокаНабора Из СтрокиНабора Цикл

			ТаблицаНабора.Удалить(СтрокаНабора);

		КонецЦикла;

		Если СтрокаЦены.Обновить Тогда

			СтрокаНабора = ТаблицаНабора.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаЦены);
			СтрокаНабора.ВидЦены      = ВыборкаТовары.ВидЦены;
			СтрокаНабора.Номенклатура = ВыборкаТовары.Номенклатура;
			СтрокаНабора.Активность   = Истина;

		КонецЕсли;

		НаборЗаписей.Загрузить(ТаблицаНабора);
		НаборЗаписей.Записать();

	КонецЦикла;

КонецПроцедуры

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/
//	Вспомогательные процедуры блока загрузки цен из Navision
//	---------------------------------------------------------------------------------------

Функция ПолучитьТаблицуТекущихЦенТовара(Период, ВидЦены, Номенклатура, НижняяГраницаПериода)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатуры.Период >= &НижняяГраницаПериода
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Удалить,
	|	ЛОЖЬ КАК Обновить,
	|	ЦеныНоменклатуры.Период КАК Период,
	|	НАЧАЛОПЕРИОДА(ЦеныНоменклатуры.Период, ДЕНЬ) КАК ДатаНачала,
	|	ЦеныНоменклатуры.Регистратор КАК Регистратор,
	|	ЦеныНоменклатуры.Цена,
	|	ЦеныНоменклатуры.Упаковка,
	|	ЦеныНоменклатуры.Акция,
	|	ЦеныНоменклатуры.ТипПереоценки,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатуры.Регистратор.Номер ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РегистраторУказан,
	|	ТИПЗНАЧЕНИЯ(ЦеныНоменклатуры.Регистратор) КАК ТипРегистратора
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.Период >= НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	|	И ЦеныНоменклатуры.ВидЦены = &ВидЦены
	|	И ЦеныНоменклатуры.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор"
	);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("НижняяГраницаПериода", НижняяГраницаПериода);
	
	ТаблицаЦеныТекущие = Запрос.Выполнить().Выгрузить();
	ТаблицаЦеныТекущие.Индексы.Добавить("ДатаНачала, Упаковка");
	
	Возврат ТаблицаЦеныТекущие;

КонецФункции // ПолучитьТаблицуТекущихЦенТовара()

Функция ПривестиЦенуПоФлагамНДС(Знач ЦенаNavision, КлючиNavision)

	Если КлючиNavision.ЦенаВключаетНДС = Ложь Тогда

		Если КлючиNavision.НДСБизнесГруппаЦены = "НДС20" Тогда

			ЦенаNavision = ЦенаNavision * 1.2;

		ИначеЕсли КлючиNavision.НДСБизнесГруппаЦены = "НДС7" Тогда

			ЦенаNavision = ЦенаNavision * 1.07;

		Иначе

			НечтоОтладочное = 22;

		КонецЕсли;

	КонецЕсли;

	Возврат ЦенаNavision;

КонецФункции // ПривестиЦенуПоФлагамНДС()

//	LNK 07.03.2019 12:12:13
Функция ПодготовитьТаблицуОптовыхЦенNavision(ТаблицаЦеныNavision)

	#Если Клиент Тогда
	//ТаблицаЦеныNavision = Новый ТаблицаЗначений;
	#КонецЕсли

	ИменаСвёртки = "";

	Для каждого Колонка Из ТаблицаЦеныNavision.Колонки Цикл

		ИменаСвёртки = ИменаСвёртки + ?(ПустаяСтрока(ИменаСвёртки), "", ", ") + Колонка.Имя;

	КонецЦикла;

	ТаблицаЦеныNavision.ЗаполнитьЗначения("ОПТОВЫЙ", "КодСклада");

	ТаблицаЦеныNavision.Свернуть(ИменаСвёртки);

	Возврат ТаблицаЦеныNavision;

КонецФункции // ПодготовитьТаблицуОптовыхЦенNavision()

Процедура УстановитьПолучателейПоВидуЦены(Получатели, ВидЦены)

	Для каждого Получатель Из ОбменДаннымиПовтИсп.ОпределитьПолучателейПоВидуЦены(ВидЦены) Цикл

		Если НЕ Получатели.Содержит(Получатель) Тогда

			Получатели.Добавить(Получатель);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//	Возвращает прайсы, действующие на магазинах, введенных в эксплуатацию
Функция КодыРозничныхПрайсов(РежимВозврата = "")

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Магазины.Ссылка КАК Магазин
	|ПОМЕСТИТЬ Магазины
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.ВведенВЭксплуатацию
	|	И НЕ Магазины.Блокирован
	|	И НЕ Магазины.ПометкаУдаления
	|	И НЕ Магазины.СкладУправляющейСистемы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПрайсы.КодПрайсЛиста КАК КодПрайсЛиста
	|ИЗ
	|	Магазины КАК Магазины
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПрайсовСкладамNavision КАК ТаблицаПрайсы
	|		ПО Магазины.Магазин = ТаблицаПрайсы.Склад.Магазин
	|ГДЕ
	|	ТаблицаПрайсы.КодПрайсЛиста <> """""
	);
	СписокКодовПрайсов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КодПрайсЛиста");

	Если РежимВозврата = "Соответствие" Тогда
	
		ЗначениеВозврата = Новый Соответствие;

		Для каждого КодПрайса Из СписокКодовПрайсов Цикл

			ЗначениеВозврата.Вставить(КодПрайса, Истина);

		КонецЦикла;

	ИначеЕсли РежимВозврата = "СтрокаВнешнегоУсловия" Тогда
	
		ЗначениеВозврата = ВнешниеИсточники.ПолучитьСтрокуIDNТоваров(СписокКодовПрайсов, "'");

	Иначе
		
		ЗначениеВозврата = СписокКодовПрайсов;

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции

//	Формирует строку из уникальных значений, сортированную в алфавитном порядке
//	для передачи в модель повторного использования
Функция ПолучитьСортированнуюСтрокуПрайсов(ТаблицаЗначений)

	СтрокаПрайсов = "";
	ТаблицаЗначений.Свернуть("КодПрайсЛиста");
	ТаблицаЗначений.Сортировать("КодПрайсЛиста");

	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СтрокаПрайсов = СтрокаПрайсов + ?(ПустаяСтрока(СтрокаПрайсов), "", ",") + СтрокаТаблицы.КодПрайсЛиста;

	КонецЦикла;

	Возврат СтрокаПрайсов;

КонецФункции // ПолучитьСортированнуюСтрокуПрайсов()

Функция ТипПереоценкиNavisionСоответствует(ТипПереоценкиЧисло, ТипПереоценки)

	ПриведенноеЗначение = ПолучитьТипПереоценки(ТипПереоценкиЧисло);

	Возврат ?(ТипПереоценки = Перечисления.ТипыПереоценок.ПустаяСсылка(), Перечисления.ТипыПереоценок.Переоценка, ТипПереоценки)
			= ПриведенноеЗначение;

КонецФункции // ТипПереоценкиСоответствует()

Функция ПолучитьТипПереоценки(ТипПереоценкиЧисло)

//	0 – переоценка  //обычное изменение цены
//	1 – промо //начало промо периода
//	2 – выход из промо //тут понятно
//	3 - опорная цена (используется вместо "старая цена")	LNK 09.01.2019 13:25:29

	ПриведенноеЗначение = ?(ТипПереоценкиЧисло = 1, Перечисления.ТипыПереоценок.ПромоНачало,
						  ?(ТипПереоценкиЧисло = 2, Перечисления.ТипыПереоценок.ПромоЗавершение,
						  ?(ТипПереоценкиЧисло = 3, Перечисления.ТипыПереоценок.ОпорнаяЦена
						  						  , Перечисления.ТипыПереоценок.Переоценка)));

	Возврат ПриведенноеЗначение;

КонецФункции // ПолучитьТипПереоценки()

#КонецОбласти

#Область КонтрольИУстановкаЦенПлановойСебестоимости

//	LNK 04.03.2019 11:00:32
Процедура ВыполнитьЗаданиеУстановкиПлановыхЦенНоменклатуры(СписокКодовЗапроса)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(СписокКодовЗапроса);
	ПараметрыЗадания.Добавить(Истина);
	
	ФоновыеЗадания.Выполнить("ВнешниеИсточникиСобытия.КонтрольЦенПлановойСебестоимости", ПараметрыЗадания);

КонецПроцедуры

//	LNK 04.03.2019 11:05:40
Процедура КонтрольЦенПлановойСебестоимости(Знач СписокКодовЗапроса, ПереданПараметрNAV)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

//	"СписокКодовЗапроса" может представлять из себя массив или строку.
//	При этом, строка может быть уже подготовлена для передачи во внешний запрос (к NAV), о чем сообщаем параметром "ПереданПараметрNAV"

	Если НЕ ПереданПараметрNAV ИЛИ ТипЗнч(СписокКодовЗапроса) = Тип("Массив") Тогда

		Если ТипЗнч(СписокКодовЗапроса) = Тип("Строка") Тогда

			СписокКодовЗапроса = ОбщегоНазначенияКлиентСервер.lx_FillValueList(, СписокКодовЗапроса);

		КонецЕсли;

		СписокКодовЗапроса = ВнешниеИсточники.ПолучитьСтрокуIDNТоваров(СписокКодовЗапроса)

	КонецЕсли;

	Если ПустаяСтрока(СписокКодовЗапроса) Тогда

		Возврат;

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаNavision.IDN КАК IDN,
	|	ВЫРАЗИТЬ(ТаблицаNavision.ПлановаяСебестоимость КАК ЧИСЛО) КАК ПлановаяСебестоимость
	|ПОМЕСТИТЬ ДанныеNavision
	|ИЗ
	|	&ТаблицаNavision КАК ТаблицаNavision
	|ГДЕ
	|	(ВЫРАЗИТЬ(ТаблицаNavision.IDN КАК СТРОКА(4))) <> ""    ""
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDN
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеNavision.IDN КАК IDN,
	|	ТаблицаСправочник.Ссылка КАК Номенклатура,
	|	ВЫРАЗИТЬ(ДанныеNavision.ПлановаяСебестоимость КАК ЧИСЛО(15, 2)) КАК ПлановаяСебестоимость
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	ДанныеNavision КАК ДанныеNavision
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
	|		ПО ДанныеNavision.IDN = ТаблицаСправочник.IDN
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеNavision
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.IDN КАК IDN,
	|	ТаблицаДанных.Номенклатура КАК Номенклатура,
	|	ТаблицаДанных.ПлановаяСебестоимость КАК Цена,
	|	НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ) КАК Период,
	|	ЕСТЬNULL(ТаблицаСебестоимость.Регистратор, НЕОПРЕДЕЛЕНО) КАК Регистратор
	|ИЗ
	|	Данные КАК ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(
	|				&ТекущаяДата,
	|				Номенклатура В
	|					(ВЫБРАТЬ
	|						ТаблицаДанных.Номенклатура КАК Номенклатура
	|					ИЗ
	|						Данные КАК ТаблицаДанных)) КАК ТаблицаСебестоимость
	|		ПО ТаблицаДанных.Номенклатура = ТаблицаСебестоимость.Номенклатура
	|ГДЕ
	|	(ТаблицаСебестоимость.Регистратор ЕСТЬ NULL
	|			ИЛИ НЕ ТаблицаДанных.ПлановаяСебестоимость = ТаблицаСебестоимость.Цена)
	|
	|УПОРЯДОЧИТЬ ПО
	|	IDN
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Данные"
	);
	Запрос.УстановитьПараметр("ТекущаяДата"    , ТекущаяДата());
	Запрос.УстановитьПараметр("ТаблицаNavision", ВнешниеИсточники.ПолучитьДанныеОтNavision("ПлановаяСебестоимостьNavision",, "IN (" + СписокКодовЗапроса + ")"));

	ТоварыВыборка = Запрос.Выполнить().Выбрать();

	НаборЗаписей = РегистрыСведений.СебестоимостьНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	ОбменДаннымиСервер.УстановитьВсехПолучателей(НаборЗаписей.ОбменДанными.Получатели, "ПоМагазину");
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);

	Пока ТоварыВыборка.Следующий() Цикл

		НаборЗаписей.Очистить();

		Если ТоварыВыборка.Регистратор = Неопределено Тогда

				НаборЗаписей.Отбор.Регистратор.Установить(Документы.УстановкаСебестоимости.ПолучитьСсылку());

		Иначе	НаборЗаписей.Отбор.Регистратор.Установить(ТоварыВыборка.Регистратор);

		КонецЕсли;

		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Период      = ТоварыВыборка.Период;
		ЗаписьНабора.Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;

		ЗаписьНабора.Номенклатура = ТоварыВыборка.Номенклатура;
		ЗаписьНабора.Цена = ТоварыВыборка.Цена;

		НаборЗаписей.Записать();

	КонецЦикла;

КонецПроцедуры
	
#КонецОбласти

//	LNK 23.03.2017 10:56:31
Функция ПропуститьЦенуМагазина(ДанныеМагазина)

	Возврат НЕ ДанныеМагазина.ВведенВЭксплуатацию = Истина И НЕ ДанныеМагазина.ИнтернетМагазин = Истина;

КонецФункции // ПропуститьЦенуМагазина()


//	Отдельный процесс - очистка выполненных и подтверждение заданий Navision
Процедура ВыполнитьОчисткуРегистраЦеныТребующиеОбновления()

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРегистра.Период,
	|	ТаблицаРегистра.IDN,
	|	ТаблицаРегистра.КодПрайсЛиста,
	|	ТаблицаРегистра.НомерЗадания КАК НомерЗадания
	|ИЗ
	|	РегистрСведений.ЦеныТребующиеОбновления КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Выполнено
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗадания
	|ИТОГИ ПО
	|	НомерЗадания"
	);

	ЗаданияВыборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ЗаданияВыборка.Следующий() Цикл

		Попытка
		
			ДеталиВыборка = ЗаданияВыборка.Выбрать();

			Пока ДеталиВыборка.Следующий() Цикл

				МенеджерЗаписи = РегистрыСведений.ЦеныТребующиеОбновления.СоздатьМенеджерЗаписи();

				МенеджерЗаписи.Период        = ДеталиВыборка.Период;
				МенеджерЗаписи.IDN           = ДеталиВыборка.IDN;
				МенеджерЗаписи.КодПрайсЛиста = ДеталиВыборка.КодПрайсЛиста;
				МенеджерЗаписи.НомерЗадания  = ДеталиВыборка.НомерЗадания;

				МенеджерЗаписи.Удалить();

			КонецЦикла;

			Если НЕ ЗаданияВыборка.НомерЗадания = 0 Тогда

				ОчередьОбновитьЗадание(ЗаданияВыборка.НомерЗадания,, 1);

			КонецЕсли;
		
		Исключение

		//	Что-то свалилось... просто пропускаем. Выполнится в следующий раз.
			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ЦеныNavision.ЦеныТребующиеОбновления", УровеньЖурналаРегистрации.Предупреждение
			, Метаданные.РегистрыСведений.ЦеныТребующиеОбновления
			,, "Ошибка подтверждения задания [" + Формат(ЗаданияВыборка.НомерЗадания, "ЧН=0; ЧГ=") + "]: " + ТекстОшибки
			, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

#Область ХарактеристикиЦенниковНоменклатуры

//	LNK 27.07.2020 10:43:43
Процедура ОбновитьКлассификаторХарактеристикЦенников(ОчередьNavision, НомераЗаданийНеВыполнено)	Экспорт	//	.. эскпорт для целей отладки

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	#Если Клиент Тогда
	//НомераЗаданийНеВыполнено = Новый Соответствие;
	#КонецЕсли

	ТаблицаЗначений = СтруктураТаблицыХарактеристикЦенников();

	ВыборкаNavision = ОчередьNavision.Результат.Выбрать();

	Пока ВыборкаNavision.Следующий() Цикл

		Если ВыборкаNavision.ТипЗадания = "ОБНОВИТЬ_ДОП_ХАРАКТЕРИСТИКИ" Тогда

			ТаблицаNavision = ПолучитьОтNavisionКлассификаторХарактеристикиЦенников(ВыборкаNavision.ID1, ВыборкаNavision.ID3, ВыборкаNavision.ID5, ВыборкаNavision.ID4, ВыборкаNavision.Примечание);

		ИначеЕсли ВыборкаNavision.ТипЗадания = "ОБНОВИТЬ_ТОВАР_ВАРИАНТ" Тогда

			ТаблицаNavision = ПолучитьОтNavisionХарактеристикиЦенников(ВыборкаNavision.ID1, ВыборкаNavision.ID2, ВыборкаNavision.ID5);

		КонецЕсли;

		Если ТипЗнч(ТаблицаNavision) = Тип("ТаблицаЗначений") Тогда

			Для каждого СтрокаNavision Из ТаблицаNavision Цикл

				СтрокаТаблицы = ТаблицаЗначений.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаNavision);

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	Если ВыборкаNavision.ТипЗадания = "ОБНОВИТЬ_ДОП_ХАРАКТЕРИСТИКИ" Тогда

		УстановитьКлассификаторХарактеристикЦенников(СтруктураТаблицыХарактеристикЦенников(ТаблицаЗначений));

	Иначе

		УстановитьХарактеристикиЦенниковНоменклатуры(СтруктураТаблицыХарактеристикЦенников(ТаблицаЗначений));

	КонецЕсли;

КонецПроцедуры

//	LNK 03.11.2020 06:33:49
Процедура ПроверитьКлассификаторХарактеристикЦенников(IDNG = Неопределено, ТипВыборки = Неопределено)	Экспорт

//	Параметр "IDNG" используется для целей отладки и контроля ("Экспорт" для тех же целей).
//	В "боевом" режиме этот параметр не передается.

	Если ТипВыборки = 1 Тогда

		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаСправочник.IDNG КАК IDNG
		|ИЗ
		|	Справочник.Номенклатура КАК ТаблицаСправочник
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &IDNG = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ТаблицаСправочник.IDNG = &IDNG
		|		КОНЕЦ
		|	И НЕ(ТаблицаСправочник.ЭтоГруппа
		|				ИЛИ ТаблицаСправочник.IDNG = """")
		|
		|УПОРЯДОЧИТЬ ПО
		|	IDNG"
		;

	Иначе

		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаКлассификатора.Идентификатор КАК IDNG
		|ИЗ
		|	РегистрСведений.КлассификаторХарактеристикЦенников КАК ТаблицаКлассификатора
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &IDNG = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ТаблицаКлассификатора.Идентификатор = &IDNG
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	IDNG"
		;

	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("IDNG", IDNG);
	
	ВыборкаКлассификатора = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаКлассификатора.Следующий() Цикл
		
		ТаблицаNavision = ПолучитьОтNavisionКлассификаторХарактеристикиЦенниковПолный(ВыборкаКлассификатора.IDNG);

		Если НЕ ТаблицаNavision.Количество() = 0 Тогда

			ТаблицаЗначений = СтруктураТаблицыХарактеристикЦенников();

			Для каждого СтрокаNavision Из ТаблицаNavision Цикл

				СтрокаТаблицы = ТаблицаЗначений.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаNavision);

			КонецЦикла;

			УстановитьКлассификаторХарактеристикЦенников(
				ДобавитьУдаляемыеХарактеристикиЦенников(ВыборкаКлассификатора.IDNG, СтруктураТаблицыХарактеристикЦенников(ТаблицаЗначений)));

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ДобавитьУдаляемыеХарактеристикиЦенников(IDNG, ТаблицаЗначений)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаNavision.Идентификатор КАК Идентификатор,
	|	ТаблицаNavision.Основной КАК Основной,
	|	ТаблицаNavision.Имя КАК Имя,
	|	ТаблицаNavision.Значение КАК Значение
	|ПОМЕСТИТЬ ТаблицаNavision
	|ИЗ
	|	&ТаблицаЗначений КАК ТаблицаNavision
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКлассификатора.Идентификатор КАК Идентификатор,
	|	ТаблицаКлассификатора.Основной КАК Основной,
	|	ТаблицаКлассификатора.Имя КАК Имя,
	|	ТаблицаКлассификатора.Значение КАК ЗначениеУдалить
	|ИЗ
	|	РегистрСведений.КлассификаторХарактеристикЦенников КАК ТаблицаКлассификатора
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаNavision КАК Фильтр
	|		ПО ТаблицаКлассификатора.Идентификатор = Фильтр.Идентификатор
	|			И ТаблицаКлассификатора.Основной = Фильтр.Основной
	|			И ТаблицаКлассификатора.Имя = Фильтр.Имя
	|			И ТаблицаКлассификатора.Значение = Фильтр.Значение
	|ГДЕ
	|	ТаблицаКлассификатора.Идентификатор = &IDNG
	|	И Фильтр.Идентификатор ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаNavision"
	);
	Запрос.УстановитьПараметр("IDNG", IDNG);
	Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаЗначений);
	
	Результат = Запрос.Выполнить();
	#Если Клиент Тогда
	//ТаблицаЗначений = Новый ТаблицаЗначений;
	#КонецЕсли

	Если НЕ Результат.Пустой() Тогда

		ВыборкаЛишние = Результат.Выбрать();
		
		Пока ВыборкаЛишние.Следующий() Цикл

			СтрокаТаблицы = ТаблицаЗначений.Вставить(0);
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаЛишние);

		КонецЦикла;

	КонецЕсли;

	Возврат ТаблицаЗначений;

КонецФункции

Функция СтруктураТаблицыХарактеристикЦенников(ТаблицаЗначений = Неопределено)

	Если ТаблицаЗначений = Неопределено Тогда

		ТаблицаЗначений = Новый ТаблицаЗначений;
		ТаблицаЗначений.Колонки.Добавить("IDN"			  , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
		ТаблицаЗначений.Колонки.Добавить("Основная"		  , Новый ОписаниеТипов("Булево"));
		ТаблицаЗначений.Колонки.Добавить("Название"		  , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(128)));
		ТаблицаЗначений.Колонки.Добавить("Значение" 	  , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(128)));
		ТаблицаЗначений.Колонки.Добавить("ЗначениеУдалить", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(128)));
		ТаблицаЗначений.Колонки.Добавить("Группа"		  , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(512)));
		ТаблицаЗначений.Колонки.Добавить("НомерПорядка"	  , Новый ОписаниеТипов("Число"));
		ТаблицаЗначений.Колонки.Добавить("Изображение"	  , Новый ОписаниеТипов("Неопределено"));
		ТаблицаЗначений.Колонки.Добавить("Записать"		  , Новый ОписаниеТипов("Булево"));

	Иначе

	//	Приводим имена колонок к "локальному" виду.
		ТаблицаЗначений.Колонки.Группа.Имя		= "Идентификатор";
		ТаблицаЗначений.Колонки.Основная.Имя	= "Основной";
		ТаблицаЗначений.Колонки.Название.Имя	= "Имя";
		ТаблицаЗначений.Колонки.Изображение.Имя = "SafeArray";

		ТаблицаЗначений.Колонки.Добавить("Изображение", Новый ОписаниеТипов("Картинка"));

	КонецЕсли;

	Возврат ТаблицаЗначений;

КонецФункции

Функция ПолучитьОтNavisionКлассификаторХарактеристикиЦенников(ID1, ID3, ID5, ID4, ЗначениеУдалить)

	ТекстNavision = ВнешниеИсточники.УточнитьТекстЗапроса(
	"SELECT *
	|FROM [Euro2009].[dbo].[GetFeatureForCategory_](#ID1#, #ID3#, #ID5#, #ID4#)"
	, Перечисления.ВнешниеИсточники.Navision
	);
	ТекстNavision = СтрЗаменить(ТекстNavision, "#ID1#", ?(ID1 = Неопределено, "NULL", "'" + ID1 + "'"));
	ТекстNavision = СтрЗаменить(ТекстNavision, "#ID3#", ?(ID3 = Неопределено, "NULL", "'" + ID3 + "'"));
	ТекстNavision = СтрЗаменить(ТекстNavision, "#ID5#", ?(ID5 = Неопределено, "NULL", "'" + ID5 + "'"));
	ТекстNavision = СтрЗаменить(ТекстNavision, "#ID4#", ?(ID4 = Неопределено, "NULL", "'" + ID4 + "'"));

	ТаблицаNavision = ВнешниеИсточники.ПолучитьДанныеОтNavision(ТекстNavision,,, Истина, 1000);
	#Если Клиент Тогда
	//ТаблицаNavision = Новый ТаблицаЗначений;
	#КонецЕсли
	ТаблицаNavision.Колонки.Добавить("ЗначениеУдалить", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(128)));

	ТаблицаNavision.ЗаполнитьЗначения(ЗначениеУдалить, "ЗначениеУдалить");

	Возврат ТаблицаNavision;

КонецФункции

Функция ПолучитьОтNavisionХарактеристикиЦенников(ID1, ID2 = Неопределено, ID5 = Неопределено)

	СтрокаУсловий = "";

	Если ТипЗнч(ID2) = Тип("Строка") Тогда

		СтрокаУсловий = "Номер = '" + ID2 + "'";

	КонецЕсли;

	Если ТипЗнч(ID5) = Тип("Строка") Тогда

		СтрокаУсловий = СтрокаУсловий + ?(ПустаяСтрока(СтрокаУсловий), "", " AND ") + "Основная = '" + ID5 + "'";

	КонецЕсли;

	ТекстNavision = ВнешниеИсточники.УточнитьТекстЗапроса(
	"SELECT *
	|FROM [Euro2009].[dbo].[GetFeatureGoods](#ID1#)"
	+ ?(ПустаяСтрока(СтрокаУсловий)
		, ""
		, " WHERE " + СтрокаУсловий)
	, Перечисления.ВнешниеИсточники.Navision
	);
	ТекстNavision = СтрЗаменить(ТекстNavision, "#ID1#", ?(ID1 = Неопределено, "NULL", "'" + ID1 + "'"));

	ТаблицаNavision = ВнешниеИсточники.ПолучитьДанныеОтNavision(ТекстNavision,,, Истина, 1000);

	ТаблицаNavision.Колонки.Удалить("IDN");
	ТаблицаNavision.Колонки.КодТовара.Имя = "IDN";

	ТаблицаNavision.Колонки.Добавить("НомерПорядка", Новый ОписаниеТипов("Число"));

	Для каждого СтрокаNavision Из ТаблицаNavision Цикл

		СтрокаNavision.НомерПорядка = ТаблицаNavision.Колонки.НомерПорядка.ТипЗначения.ПривестиЗначение(СтрокаNavision.Номер);

	КонецЦикла;

	ТаблицаNavision.Колонки.Удалить("Номер");
	ТаблицаNavision.Колонки.Добавить("ЗначениеУдалить", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(128)));

	Возврат ТаблицаNavision;

КонецФункции

Функция ПолучитьОтNavisionКлассификаторХарактеристикиЦенниковПолный(IDNG)

	ТекстNavision = ВнешниеИсточники.УточнитьТекстЗапроса(
	"SELECT *
	|FROM [Euro2009].[dbo].[GetAllFeatureForCategory](#IDNG#)"
	, Перечисления.ВнешниеИсточники.Navision
	);
	ТекстNavision = СтрЗаменить(ТекстNavision, "#IDNG#", "'" + IDNG + "'");

	ТаблицаNavision = ВнешниеИсточники.ПолучитьДанныеОтNavision(ТекстNavision,,, Истина, 1000);
	#Если Клиент Тогда
	//ТаблицаNavision = Новый ТаблицаЗначений;
	#КонецЕсли
	ТаблицаNavision.Колонки.Добавить("ЗначениеУдалить", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(128)));

	Возврат ТаблицаNavision;

КонецФункции

//	---------------------------------------------------------------------------------------

Процедура УстановитьХарактеристикиЦенниковНоменклатуры(Знач ТаблицаЗначений)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если ТипЗнч(ТаблицаЗначений) = Тип("Строка") Тогда

	//	Значит, это вызов метода при изменении номенклатурной позиции!

		ТаблицаNavision = ПолучитьОтNavisionХарактеристикиЦенников(СокрЛП(СтрЗаменить(ТаблицаЗначений, "'", "")));
		ТаблицаЗначений = СтруктураТаблицыХарактеристикЦенников();

		Для каждого СтрокаNavision Из ТаблицаNavision Цикл

			СтрокаТаблицы = ТаблицаЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаNavision);

		КонецЦикла;

		СтруктураТаблицыХарактеристикЦенников(ТаблицаЗначений);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаNavision.IDN КАК IDN,
	|	ТаблицаNavision.Идентификатор КАК Идентификатор,
	|	ТаблицаNavision.Основной КАК Основной,
	|	ТаблицаNavision.НомерПорядка КАК НомерПорядка,
	|	ТаблицаNavision.Имя КАК Имя,
	|	ТаблицаNavision.Значение КАК Значение
	|ПОМЕСТИТЬ ДанныеNavision
	|ИЗ
	|	&ТаблицаNavision КАК ТаблицаNavision
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDN
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Фильтр.Ссылка КАК Номенклатура,
	|	ДанныеNavision.Идентификатор КАК Идентификатор,
	|	ДанныеNavision.Основной КАК Основной,
	|	ДанныеNavision.НомерПорядка КАК НомерПорядка,
	|	ДанныеNavision.Имя КАК Имя,
	|	ДанныеNavision.Значение КАК Значение
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	ДанныеNavision КАК ДанныеNavision
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Фильтр
	|		ПО ДанныеNavision.IDN = Фильтр.IDN
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Основной,
	|	НомерПорядка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеNavision
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Источник.Основной КАК Основной,
	|	Источник.НомерПорядка КАК НомерПорядка,
	|	Источник.Имя КАК Имя,
	|	Источник.Значение КАК Значение,
	|	Источник.Номенклатура КАК Номенклатура
	|ИЗ
	|	Источник КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ХарактеристикиЦенников КАК ТаблицаРегистра
	|		ПО Источник.Номенклатура = ТаблицаРегистра.Номенклатура
	|			И Источник.Основной = ТаблицаРегистра.Основной
	|			И Источник.НомерПорядка = ТаблицаРегистра.НомерПорядка
	|			И Источник.Имя = ТаблицаРегистра.Имя
	|			И Источник.Значение = ТаблицаРегистра.Значение
	|ГДЕ
	|	ТаблицаРегистра.Номенклатура ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Основной,
	|	НомерПорядка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	);
	Запрос.УстановитьПараметр("ТаблицаNavision", ТаблицаЗначений);

	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда	//	РегистрыСведений.ХарактеристикиЦенников

		НаборЗаписей = НовыйНаборЗаписей("ХарактеристикиЦенников");

		Выборка = Результат.Выбрать();

		Пока Выборка.Следующий() Цикл

			НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			НаборЗаписей.Отбор.Основной.Установить(Выборка.Основной);
			НаборЗаписей.Отбор.НомерПорядка.Установить(Выборка.НомерПорядка);

			НаборЗаписей.Прочитать();

			Если НаборЗаписей.Количество() = 0 Тогда

					ЗаписьНабора = НаборЗаписей.Добавить();
					ЗаписьНабора.Номенклатура = НаборЗаписей.Отбор.Номенклатура.Значение;
					ЗаписьНабора.Основной      = НаборЗаписей.Отбор.Основной.Значение;
					ЗаписьНабора.НомерПорядка  = НаборЗаписей.Отбор.НомерПорядка.Значение;

			Иначе	ЗаписьНабора = НаборЗаписей[0];
			
			КонецЕсли;

			ЗаписьНабора.Имя = Выборка.Имя;
			ЗаписьНабора.Значение = Выборка.Значение;
			ЗаписьНабора.ДатаИзменения = ТекущаяДата();

			НаборЗаписей.Записать();

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура УстановитьКлассификаторХарактеристикЦенников(ТаблицаЗначений)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	НаборЗаписей = НовыйНаборЗаписей("КлассификаторХарактеристикЦенников");
	#Если Клиент Тогда
	//НаборЗаписей = РегистрыСведений.КлассификаторХарактеристикЦенников.СоздатьНаборЗаписей();
	#КонецЕсли

	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		НаборЗаписей.Отбор.Идентификатор.Установить(СтрокаТаблицы.Идентификатор);
		НаборЗаписей.Отбор.Основной.Установить(СтрокаТаблицы.Основной);
		НаборЗаписей.Отбор.Имя.Установить(СтрокаТаблицы.Имя);

		Если ПустаяСтрока(СтрокаТаблицы.Значение) И НЕ ПустаяСтрока(СтрокаТаблицы.ЗначениеУдалить) Тогда

		//	Это очистка записей..
			НаборЗаписей.Очистить();
			НаборЗаписей.Отбор.Значение.Установить(СтрокаТаблицы.ЗначениеУдалить);
			НаборЗаписей.Записать();
			Продолжить;

		Иначе

			НаборЗаписей.Отбор.Значение.Установить(СтрокаТаблицы.Значение);

		КонецЕсли;

		НаборЗаписей.Прочитать();

		Если НЕ НаборЗаписей.Количество() = 0 Тогда

			ЗаписьНабора = НаборЗаписей[0];

		Иначе

			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.Идентификатор = НаборЗаписей.Отбор.Идентификатор.Значение;
			ЗаписьНабора.Основной	   = НаборЗаписей.Отбор.Основной.Значение;
			ЗаписьНабора.Имя		   = НаборЗаписей.Отбор.Имя.Значение;
			ЗаписьНабора.Значение	   = НаборЗаписей.Отбор.Значение.Значение;

			СтрокаТаблицы.Записать = Истина;

		КонецЕсли;

		Если НЕ СтрокаТаблицы.SafeArray = NULL Тогда

			#Если Клиент Тогда
			//КартинкаСтарый = Новый Картинка;
			#КонецЕсли

			КартинкаНовый  = ПолучитьИзображениеИзВнешнихДанных(СтрокаТаблицы.SafeArray);
			КартинкаСтарый = ЗаписьНабора.Изображение.Получить();	//	храним тип Картинка!

			Если КартинкаСтарый = Неопределено ИЛИ КартинкаСтарый.Вид = ВидКартинки.Пустая Тогда

				СтрокаТаблицы.Записать = Истина;

			Иначе

				ХешДанныхНовый  = Новый ХешированиеДанных(ХешФункция.MD5);
				ХешДанныхНовый.Добавить(КартинкаНовый.ПолучитьДвоичныеДанные(Истина));
				ХешДанныхСтарый = Новый ХешированиеДанных(ХешФункция.MD5);
				ХешДанныхСтарый.Добавить(КартинкаСтарый.ПолучитьДвоичныеДанные(Истина));

				СтрокаТаблицы.Записать = НЕ ХешДанныхНовый.ХешСумма = ХешДанныхСтарый.ХешСумма ИЛИ СтрокаТаблицы.Записать = Истина;

			КонецЕсли;

			Если СтрокаТаблицы.Записать Тогда

				СтрокаТаблицы.Изображение = КартинкаНовый;

			КонецЕсли;

		ИначеЕсли ЗаписьНабора.Установлено Тогда

			СтрокаТаблицы.Записать = Истина;

		КонецЕсли;

		Если СтрокаТаблицы.Записать Тогда

			ЗаписьНабора.Изображение   = Новый ХранилищеЗначения(СтрокаТаблицы.Изображение, Новый СжатиеДанных(9));
			ЗаписьНабора.Установлено   = НЕ СтрокаТаблицы.Изображение.Вид = ВидКартинки.Пустая;
			ЗаписьНабора.ДатаИзменения = ТекущаяДата();

			НаборЗаписей.Записать();

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьИзображениеИзВнешнихДанных(COMSafeArray)	//	LNK 29.07.2020 08:43:17

	Если ТипЗнч(COMSafeArray) = Тип("COMSafeArray") Тогда
		
		Если Истина Тогда

			#Если Клиент Тогда
			//COMSafeArray = Новый COMSafeArray;
			#КонецЕсли

			DOM = Новый COMОбъект("MSXML2.DomDocument.3.0");
		    Element = DOM.createElement("a");
		    Element.DataType = "bin.base64";
		    Element.nodeTypedValue = COMSafeArray;

			КартинкаЗначение = Новый Картинка(Base64Значение(Element.text));

		Иначе	//	этот вариант сохраним, как пример


			Счётчик     = 0;
			БуферДанных = Новый БуферДвоичныхДанных(COMSafeArray.GetLength(0));

			Для каждого Значение Из COMSafeArray Цикл

				БуферДанных.Установить(Счётчик, Значение);
				Счётчик = Счётчик + 1;

			КонецЦикла;

			КартинкаЗначение  = Новый Картинка(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(БуферДанных));

		КонецЕсли;

	Иначе

		КартинкаЗначение = Новый Картинка;

	КонецЕсли;

	Возврат КартинкаЗначение;

КонецФункции

Функция НовыйНаборЗаписей(Имя)

	НаборЗаписей = РегистрыСведений[Имя].СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);
	ОбменДаннымиСервер.УстановитьВсехПолучателей(НаборЗаписей.ОбменДанными.Получатели, "ПоМагазину");

	Возврат НаборЗаписей;

КонецФункции

#КонецОбласти

#Область СпецификаРегистраСведений_КлючевыеАтрибутыДокументов	//	LNK 05.12.2020 06:53:58

Процедура ВыполнитьКлючевыеАтрибутыДокументов(НаборЗаписей, УзелСсылка, ПараметрыВыгрузки, УдалятьРегистрацию)

	Перем СтрокаТипа;

	#Если Клиент Тогда
	//НаборЗаписей = РегистрыСведений.КлючевыеАтрибутыДокументов.СоздатьНаборЗаписей();
	#КонецЕсли

	Если ТипЗнч(НаборЗаписей.Отбор.Объект.Значение) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

		УдалятьРегистрацию = Истина;
		Возврат;

	КонецЕсли;

//	---------------------------------------------------------------------------------------

	ОбъектДанных = НаборЗаписей.Отбор.Объект.Значение.ПолучитьОбъект();

	Если ОбъектДанных = Неопределено Тогда

		УдалятьРегистрацию = Истина;
		Возврат;

	КонецЕсли;

	СтрокаТипа = ПараметрыВыгрузки.ТаблицаСсылочныхТипов.Найти(ОбъектДанных.Метаданные().ПолноеИмя(), "ПолноеИмяМетаданных");

	ИменаIDN = Новый Массив;
	ИменаIDN.Добавить(Новый Структура("IDN, Номер", "IDN", "Номер"));
	ИменаIDN.Добавить(Новый Структура("IDN, Номер", "IDNПредыдущий", "НомерПредыдущий"));

	ТаблицаЗаданий = ПодготовитьТаблицуЗаданийДокумента(ОбъектДанных, СтрокаТипа, ПараметрыВыгрузки, УдалятьРегистрацию);

	Для каждого СтрокаТаблицыЗаданий Из ТаблицаЗаданий Цикл

		ПараметрыЗадания = ПолучитьКлючевыеПараметрыЗадания(СтрокаТаблицыЗаданий.Тип, ОбъектДанных, СтрокаТаблицыЗаданий.КлючТипа,, ПараметрыВыгрузки);

		Для каждого ЗаписьНабора Из НаборЗаписей Цикл

			Для каждого КлючЗначение Из ИменаIDN Цикл

				Если ПустаяСтрока(ЗаписьНабора[КлючЗначение.IDN]) И НЕ ПустаяСтрока(ЗаписьНабора[КлючЗначение.Номер]) Тогда

				//	Получим установленное в параметрах значение, если его нет, - то формируем по умолчанию
					ЗаписьНабора[КлючЗначение.IDN] = ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ПараметрыЗадания
						, "Номер"
						, ПараметрыЗадания.Префикс + СокрЛП(ЗаписьНабора[КлючЗначение.Номер])
						, Новый ОписаниеТипов("Строка")
					);

				КонецЕсли;

			КонецЦикла;

			Если НЕ (ПустаяСтрока(ЗаписьНабора.IDNПредыдущий) ИЛИ ЗаписьНабора.IDN = ЗаписьНабора.IDNПредыдущий) Тогда

				а = 22;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеРегистраТоварыОжидаемые

//	LNK 31.10.2018 13:42:12
Процедура УстановитьТоварыОжидаемые(ОчередьNavision)	Экспорт

	ТаблицаОчереди = Новый ТаблицаЗначений;
	ТаблицаОчереди.Колонки.Добавить("НомерЗадания", Новый ОписаниеТипов("Число"));
	ТаблицаОчереди.Колонки.Добавить("IDN"         , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
	ТаблицаОчереди.Колонки.Добавить("IDNсклада"   , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));

	СсылкиОбработаны = Новый Массив;

	ОчередьNavisionВыборка = ОчередьNavision.Результат.Выбрать();

	Пока ОчередьNavisionВыборка.Следующий() Цикл

		СтрокаТаблицы = ТаблицаОчереди.Добавить();
		СтрокаТаблицы.НомерЗадания = ОчередьNavisionВыборка.ЗаданиеНо;
		СтрокаТаблицы.IDN          = ОчередьNavisionВыборка.ID1;
		СтрокаТаблицы.IDNсклада    = ОчередьNavisionВыборка.ID2;

	КонецЦикла;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.НомерЗадания КАК НомерЗадания,
	|	Таблица.IDN КАК IDN,
	|	Таблица.IDNсклада КАК IDNсклада
	|ПОМЕСТИТЬ Очередь
	|ИЗ
	|	&ТаблицаОчереди КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDN,
	|	IDNсклада
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ТаблицаСправочник.Магазин, ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК Магазин,
	|	Очередь.IDNсклада КАК IDNсклада
	|ИЗ
	|	Очередь КАК Очередь
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаСправочник
	|		ПО Очередь.IDNсклада = ТаблицаСправочник.IDN
	|
	|УПОРЯДОЧИТЬ ПО
	|	IDNсклада"
	);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаОчереди"  , ТаблицаОчереди);
	Запрос.УстановитьПараметр("ЗаданияВыполнены", Новый Массив);
	
	СкладыВыборка = Запрос.Выполнить().Выбрать();

//	Выбираем какое-то количество заданий.. кодов товаров может быть меньше, если они в заданиях повторяются!
//	Но нас в данном случае интересуют именно номера зданий - после обработки их нужно отметить, как выполненные.
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	Очередь.НомерЗадания КАК НомерЗадания,
	|	Очередь.IDN КАК IDN,
	|	Очередь.IDNсклада КАК IDNсклада
	|ИЗ
	|	Очередь КАК Очередь
	|ГДЕ
	|	НЕ Очередь.НомерЗадания В (&ЗаданияВыполнены)
	|	И Очередь.IDNсклада = &IDNсклада
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗадания"
	;
	ШаблонЗапроса =
	"SELECT
	|	 Stock AS IDNсклада
	|	,IDN AS IDN
	|	,Count AS Количество
	|FROM dbo.GetExpectedGoods(#GOODS#, #STOCK#)
	|"
	;
	НаборЗаписей = РегистрыСведений.ТоварыОжидаемые.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	
	Пока СкладыВыборка.Следующий() Цикл

		НаборЗаписей.ОбменДанными.Получатели.Очистить();
		ОбменДаннымиСервер.УстановитьПолучателейМагазина(НаборЗаписей.ОбменДанными.Получатели, СкладыВыборка.Магазин);

		Запрос.УстановитьПараметр("IDNсклада", СкладыВыборка.IDNсклада);

		Пока Истина Цикл

			ТоварыРезультат = Запрос.Выполнить();

			Если ТоварыРезультат.Пустой() Тогда

				Прервать;

			КонецЕсли;

			ФильтрДляNAV  = "";
			СписокКодов   = Новый Массив;
			ТоварыВыборка = ТоварыРезультат.Выбрать();
			
			Пока ТоварыВыборка.Следующий() Цикл

				СписокКодов.Добавить(СокрЛП(ТоварыВыборка.IDN));
				ФильтрДляNAV = ФильтрДляNAV + ?(ПустаяСтрока(ФильтрДляNAV), "", ",") + СокрЛП(ТоварыВыборка.IDN);

				Запрос.Параметры.ЗаданияВыполнены.Добавить(ТоварыВыборка.НомерЗадания);

			КонецЦикла;

		//	Обновим существующие товарные позиции или создадим новые, если так случилось.
			ВнешниеИсточники.УстановитьНоменклатуруВТаблицеПодготовки(ОбщегоНазначенияКлиентСервер.ACOPY(СписокКодов), Ложь, СсылкиОбработаны);

			Если НЕ СкладыВыборка.Магазин.Пустая() Тогда

				ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "#GOODS#", "'" + ФильтрДляNAV + "'");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса , "#STOCK#", "'" + СкладыВыборка.IDNсклада + "'");

				ЗапросДанных = Новый Запрос(
				"ВЫБРАТЬ
				|	ТаблицаСправочник.IDN КАК IDN,
				|	ТаблицаСправочник.Ссылка КАК Номенклатура
				|ПОМЕСТИТЬ Товары
				|ИЗ
				|	Справочник.Номенклатура КАК ТаблицаСправочник
				|ГДЕ
				|	ТаблицаСправочник.IDN В(&СписокКодов)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Таблица.IDNсклада КАК IDNсклада,
				|	Таблица.IDN КАК IDN,
				|	Таблица.Количество КАК Количество
				|ПОМЕСТИТЬ ТаблицаNavision
				|ИЗ
				|	&ТаблицаNavision КАК Таблица
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЕСТЬNULL(ТаблицаNavision.IDNсклада, """") КАК IDNсклада,
				|	ЕСТЬNULL(ТаблицаNavision.IDN, Ведущая.IDN) КАК IDN,
				|	Ведущая.Номенклатура КАК Номенклатура,
				|	ЕСТЬNULL(ТаблицаNavision.Количество, 0) КАК Количество
				|ИЗ
				|	Товары КАК Ведущая
				|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаNavision КАК ТаблицаNavision
				|		ПО Ведущая.IDN = ТаблицаNavision.IDN
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ТаблицаNavision"
				);
				ЗапросДанных.УстановитьПараметр("СписокКодов"    , СписокКодов);
				ЗапросДанных.УстановитьПараметр("ТаблицаNavision", ВнешниеИсточники.ПолучитьДанныеОтNavision(ТекстЗапроса,,, Истина));

				ДанныеNavision = ЗапросДанных.Выполнить().Выбрать();

				Пока ДанныеNavision.Следующий() Цикл

					НаборЗаписей.Очистить();
					НаборЗаписей.Отбор.Магазин.Установить(СкладыВыборка.Магазин);
					НаборЗаписей.Отбор.Номенклатура.Установить(ДанныеNavision.Номенклатура);

					ЗаписьНабора = НаборЗаписей.Добавить();
					ЗаписьНабора.Магазин       = НаборЗаписей.Отбор.Магазин.Значение;
					ЗаписьНабора.Номенклатура  = НаборЗаписей.Отбор.Номенклатура.Значение;
					ЗаписьНабора.Количество    = ДанныеNavision.Количество;

					ЗаписьНабора.ДатаИзменения = ТекущаяДата();

					НаборЗаписей.Записать();

				КонецЦикла;

			КонецЕсли;

			ТоварыВыборка.Сбросить();

			Пока ТоварыВыборка.Следующий() Цикл

			//	А вот отметку о выполнении нужно всё равно устанавливать пошагово.
				ОчередьОбновитьЗадание(ТоварыВыборка.НомерЗадания,, 1);

			КонецЦикла;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

Процедура ОбновитьКонтрагентаПроизводителя(ОчередьNavision, НомераЗаданийНеВыполнено)	//	LNK 21.05.2021 09:38:47

	Перем Блокиратор;

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Попытка

		Блокиратор = Справочники.БлокираторыПроцессов.НовыйКонтрагент.ПолучитьОбъект();
		Блокиратор.Заблокировать();

	Исключение

		ЖурналСобытий.Регистрация("GET_NAV.Производители", УровеньЖурналаРегистрации.Предупреждение
			, Метаданные.Справочники.Контрагенты
			,
			,
			, "Отложено. Не удалось получить управление процессом."
			, "Очередь заданий 'ОБНОВИТЬ_ПРОИЗВОДИТЕЛЯ'", Истина, Ложь
		);

		ВыборкаNavision = ОчередьNavision.Результат.Выбрать();

		Пока ВыборкаNavision.Следующий() Цикл

			НомераЗаданийНеВыполнено.Вставить(ВыборкаNavision.ЗаданиеНо, Истина);

		КонецЦикла;

		Возврат;

	КонецПопытки;

//	---------------------------------------------------------------------------------------

	СтрокаIDN		= "";
	ВыборкаNavision = ОчередьNavision.Результат.Выбрать();

	Пока ВыборкаNavision.Следующий() Цикл

		Если НЕ ПустаяСтрока(ВыборкаNavision.ID1) Тогда

			СтрокаIDN = СтрокаIDN + ?(ПустаяСтрока(СтрокаIDN), "", ",")
			+ СокрЛП(ВыборкаNavision.ID1);

		КонецЕсли;

	КонецЦикла;

	Если НЕ ПустаяСтрока(СтрокаIDN) Тогда

		ВнешниеИсточники.ПолучитьПроизводителейNavision(СтрокаIDN,, Ложь);

	КонецЕсли;

//	---------------------------------------------------------------------------------------

	Блокиратор.Разблокировать();

КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьСоединениеССерверомФилиала(ОчередьNavisionВыборка)

	ЕстьСоединение = Истина;
	КодФилиала     = СокрЛП(ОчередьNavisionВыборка.ID9);

	Если ПустаяСтрока(КодФилиала) ИЛИ КодФилиала = "OD" Тогда

		Возврат ЕстьСоединение;

	КонецЕсли;

//	В данном случае будет обращение к прилинкованному серверу филиала... нужно проверить возможность соединения.

	ТекстЗапроса =
	"DECLARE
	|	@ret int
	|
	|	EXEC @ret = CHECK_LINK_SERVER '#ID9#'
	|
	|	SELECT @ret AS КодВозврата
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ID9#", КодФилиала);

	Попытка

		ТаблицаNavision = ВнешниеИсточники.ПолучитьДанныеОтNavision(ТекстЗапроса,,, Истина, 500);

		Если НЕ ТаблицаNavision.Количество() = 0 Тогда

			ЕстьСоединение = НЕ ТаблицаNavision[0].КодВозврата = 0;

		Иначе

			ЕстьСоединение = Ложь;
		
		КонецЕсли;

	Исключение

		ТекстОшибки    = ОписаниеОшибки();
		ЕстьСоединение = Ложь;

	КонецПопытки;

	Возврат ЕстьСоединение;

КонецФункции // ПроверитьСоединениеССерверомФилиала()

Функция ТипизированнаяТаблицаСверкиNavision(ВыборкаNavision)

	ТаблицаNavision = Новый ТаблицаЗначений;
	ТаблицаNavision.Колонки.Добавить("ЗаданиеНо", Новый ОписаниеТипов("Число"));
	ТаблицаNavision.Колонки.Добавить("ID1"      , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
	ТаблицаNavision.Колонки.Добавить("ID2"      , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(25)));

	Пока ВыборкаNavision.Следующий() Цикл

		СтрокаNavision = ТаблицаNavision.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаNavision, ВыборкаNavision);

	КонецЦикла;

	Возврат ТаблицаNavision;

КонецФункции // ТипизированнаяТаблицаСверкиNavision()

Процедура УдалитьРегистрациюИзменений(УзелСсылка, ОбъектДанных)	//	LNK 27.07.2021 07:38:37

	Если НЕ УзелСсылка = Неопределено Тогда	//	в случае выгрузки списка документов.

		ПланыОбмена.УдалитьРегистрациюИзменений(ОбщегоНазначенияКлиентСервер.AAD(УзелСсылка), ОбъектДанных);

	КонецЕсли;

КонецПроцедуры

//	LNK 27.07.2021 13:36:18
Функция ПолучитьПараметрыВыгрузки(УзелСсылка, СверкаДокументов, ОбновитьТаблицы, Отладка, ОбновлениеИнтернетЗаказов = Ложь)

	ПараметрыВыгрузки = Новый Структура(
		"УчетнаяПолитика, ТаблицаСсылочныхТипов, СверкаДокументов, ОбновитьТаблицы, Отладка, ОбновлениеИнтернетЗаказов"
		, ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику()
		, ОбменДаннымиПовтИсп.СсылочныеТаблицыСоставаУзла(УзелСсылка, Истина, Истина)
		, СверкаДокументов
		, ОбновитьТаблицы
		, Отладка
		, ОбновлениеИнтернетЗаказов
	);

	Возврат ПараметрыВыгрузки;

КонецФункции

Функция ЭтоОбновление(ПараметрыЗадания)	//	LNK 27.07.2021 18:50:13

	Возврат ПараметрыЗадания.СверкаДокументов = Истина 
				ИЛИ ПараметрыЗадания.ОбновитьТаблицы = Истина 
				Или ПараметрыЗадания.ОбновлениеИнтернетЗаказов = Истина;

КонецФункции

Функция ИмяСобытия(ИмяПараметр, ПараметрыВыгрузки, ДобавитьТочку = Ложь)	Экспорт	//	LNK 06.08.2021 09:09:34

	ИмяСобытия = СокрЛП(ИмяПараметр);

	Если ПараметрыВыгрузки.СверкаДокументов Тогда

		ИмяСобытия = ИмяСобытия + "(CHECK)";

	КонецЕсли;

	Если ДобавитьТочку = Истина Тогда

		ИмяСобытия = ИмяСобытия + ".";

	КонецЕсли;

	Возврат ИмяСобытия;

КонецФункции

#КонецОбласти

#Область СверкаДокументовСОбъектамиNavision

//	LNK 15.06.2017 09:41:12
Процедура НазначитьДокументыДляСверкиNavision(ОчередьNavision)

//	ID2 (Тип документа Navision) – может принимать значения
//	• ПЕРЕМЕЩ
//	• ПОКУПКА
//	• ВЗВР.ПОКУП	-- первый вариант ПОКУПКА_ВОЗВРАТ
//	• (нет такой связи) ИНВЕНТ – инвентаризация
//	• СПИСАНИЕ – акт списания
//	• ПРИХОД – акт оприходования
//	• ПЕРЕСОРТ – акт пересортицы

	Запрос = Новый Запрос(ТекстЗапросаДокументыДляСверкиNavision());
	Запрос.УстановитьПараметр("ТаблицаNavision", ТипизированнаяТаблицаСверкиNavision(ОчередьNavision.Результат.Выбрать()));

	ОчередьNavisionВыборка = Запрос.Выполнить().Выбрать();

	Пока ОчередьNavisionВыборка.Следующий() Цикл

		ПараметрыСверки = Новый Структура(
			"Магазины, РезультатСверки, ВидДокумента, СообщитьNavision, IDN"
			, ?(ЗначениеЗаполнено(ОчередьNavisionВыборка.Магазин)
				, ОчередьNavisionВыборка.Магазин
				, ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин)
			, ОчередьNavisionВыборка.РезультатСверки
			, ОчередьNavisionВыборка.ВидДокумента
			, Истина
			, ОчередьNavisionВыборка.IDN);

		ВнешниеИсточникиСверка.НазначитьДокументДляСверки(ОчередьNavisionВыборка.Объект, ПараметрыСверки, "Получено из Navision");

		ОчередьОбновитьЗадание(ОчередьNavisionВыборка.НомерЗадания,, 1, "IDN назначен для сверки.");

	КонецЦикла;

КонецПроцедуры

Функция ТекстЗапросаДокументыДляСверкиNavision()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаNavision.ЗаданиеНо КАК НомерЗадания,
	|	ТаблицаNavision.ID1 КАК IDN,
	|	ТаблицаNavision.ID2 КАК ВидДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.НеПроверялся) КАК РезультатСверки
	|ПОМЕСТИТЬ Задания
	|ИЗ
	|	&ТаблицаNavision КАК ТаблицаNavision
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDN,
	|	ВидДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задания.НомерЗадания КАК НомерЗадания,
	|	Задания.IDN,
	|	Задания.ВидДокумента,
	|	ЕСТЬNULL(ТаблицаДокументы.Ссылка, Задания.IDN + ""#"" + Задания.ВидДокумента) КАК Объект,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументы.МагазинОтправитель.СкладУправляющейСистемы
	|			ТОГДА ТаблицаДокументы.МагазинПолучатель
	|		ИНАЧЕ ТаблицаДокументы.МагазинОтправитель
	|	КОНЕЦ КАК Магазин,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументы.Проведен ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.ОтсутствуетРозница)
	|		КОГДА НЕ ТаблицаДокументы.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.НеГотовКСверке)
	|		ИНАЧЕ Задания.РезультатСверки
	|	КОНЕЦ КАК РезультатСверки
	|ИЗ
	|	Задания КАК Задания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ТаблицаДокументы
	|		ПО Задания.IDN = ТаблицаДокументы.IDN
	|ГДЕ
	|	Задания.ВидДокумента = ""ПЕРЕМЕЩ""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Задания.НомерЗадания,
	|	Задания.IDN,
	|	Задания.ВидДокумента,
	|	ЕСТЬNULL(ТаблицаДокументы.Ссылка, НЕОПРЕДЕЛЕНО),
	|	ТаблицаДокументы.Магазин,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументы.Проведен ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.ОтсутствуетРозница)
	|		КОГДА НЕ ТаблицаДокументы.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.НеГотовКСверке)
	|		ИНАЧЕ Задания.РезультатСверки
	|	КОНЕЦ
	|ИЗ
	|	Задания КАК Задания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ТаблицаДокументы
	|		ПО Задания.IDN = ТаблицаДокументы.IDN
	|			И (ТаблицаДокументы.ВозвратПоставщику = ЛОЖЬ)
	|ГДЕ
	|	Задания.ВидДокумента = ""ПОКУПКА""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Задания.НомерЗадания,
	|	Задания.IDN,
	|	Задания.ВидДокумента,
	|	ЕСТЬNULL(ТаблицаДокументы.Ссылка, НЕОПРЕДЕЛЕНО),
	|	ТаблицаДокументы.Магазин,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументы.Проведен ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.ОтсутствуетРозница)
	|		КОГДА НЕ ТаблицаДокументы.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.НеГотовКСверке)
	|		ИНАЧЕ Задания.РезультатСверки
	|	КОНЕЦ
	|ИЗ
	|	Задания КАК Задания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ТаблицаДокументы
	|		ПО Задания.IDN = ТаблицаДокументы.IDN
	|			И (ТаблицаДокументы.ВозвратПоставщику = ИСТИНА)
	|ГДЕ
	|	Задания.ВидДокумента = ""ВЗВР.ПОКУП""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Задания.НомерЗадания,
	|	Задания.IDN,
	|	Задания.ВидДокумента,
	|	ЕСТЬNULL(ТаблицаДокументы.Ссылка, НЕОПРЕДЕЛЕНО),
	|	ТаблицаДокументы.Магазин,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументы.Проведен ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.ОтсутствуетРозница)
	|		КОГДА НЕ ТаблицаДокументы.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.НеГотовКСверке)
	|		ИНАЧЕ Задания.РезультатСверки
	|	КОНЕЦ
	|ИЗ
	|	Задания КАК Задания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров КАК ТаблицаДокументы
	|		ПО Задания.IDN = ТаблицаДокументы.IDN
	|ГДЕ
	|	Задания.ВидДокумента = ""ПРИХОД""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Задания.НомерЗадания,
	|	Задания.IDN,
	|	Задания.ВидДокумента,
	|	ЕСТЬNULL(ТаблицаДокументы.Ссылка, НЕОПРЕДЕЛЕНО),
	|	ТаблицаДокументы.Магазин,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументы.Проведен ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.ОтсутствуетРозница)
	|		КОГДА НЕ ТаблицаДокументы.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.НеГотовКСверке)
	|		ИНАЧЕ Задания.РезультатСверки
	|	КОНЕЦ
	|ИЗ
	|	Задания КАК Задания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеТоваров КАК ТаблицаДокументы
	|		ПО Задания.IDN = ТаблицаДокументы.IDN
	|ГДЕ
	|	Задания.ВидДокумента = ""СПИСАНИЕ""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Задания.НомерЗадания,
	|	Задания.IDN,
	|	Задания.ВидДокумента,
	|	ЕСТЬNULL(ТаблицаДокументы.Ссылка, НЕОПРЕДЕЛЕНО),
	|	ТаблицаДокументы.Магазин,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументы.Проведен ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.ОтсутствуетРозница)
	|		КОГДА НЕ ТаблицаДокументы.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РезультатСверкиNavision.НеГотовКСверке)
	|		ИНАЧЕ Задания.РезультатСверки
	|	КОНЕЦ
	|ИЗ
	|	Задания КАК Задания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПересортицаТоваров КАК ТаблицаДокументы
	|		ПО Задания.IDN = ТаблицаДокументы.IDN
	|ГДЕ
	|	Задания.ВидДокумента = ""ПЕРЕСОРТ""
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗадания"
	;
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область КонструкцияПробеловВТранспорте

Процедура КонтрольПрисутствияВТранспортныхТаблицах(ДатаНачала, ДатаОкончания)	Экспорт	//	LNK 19.08.2021 09:42:52

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка КАК Узел,
	|	ТаблицаУзлы.Код КАК Код,
	|	ТаблицаУзлы.СверкаДокументов КАК СверкаДокументов
	|ИЗ
	|	ПланОбмена.ОбменNavisionРозница КАК ТаблицаУзлы
	|ГДЕ
	|	НЕ(ТаблицаУзлы.ЭтотУзел
	|				ИЛИ ТаблицаУзлы.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код"
	);
	УзлыВыборка = Запрос.Выполнить().Выбрать();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОбъектУчтенВNavision.Объект КАК Объект,
	|	ОбъектУчтенВNavision.ДатаРегистрации КАК ДатаРегистрации
	|ИЗ
	|	РегистрСведений.ОбъектУчтенВNavision КАК ОбъектУчтенВNavision
	|ГДЕ
	|	ОбъектУчтенВNavision.ДатаРегистрации МЕЖДУ &ДатаНачала И КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)
	|	И ОбъектУчтенВNavision.ВидПередачи = ЗНАЧЕНИЕ(Перечисление.ВидыПередачиNavision.ПереданВNavision)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРегистрации"
	);
	Запрос.УстановитьПараметр("ДатаНачала"	 , ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);

	ОбъектыВыборка = Запрос.Выполнить().Выбрать();

	Пока УзлыВыборка.Следующий() Цикл

		ПараметрыВыгрузки = ПолучитьПараметрыВыгрузки(УзлыВыборка.Узел, УзлыВыборка.СверкаДокументов, Ложь, Ложь);
		ОбъектыВыборка.Сбросить();
		
		Счётчик = 0;
		СчётчикПринято = 0;

		Пока ОбъектыВыборка.Следующий() Цикл

			ОбъектДанных = ОбъектыВыборка.Объект.ПолучитьОбъект();

			Счётчик = Счётчик + 1;

			ИмяМетаданных = ОбъектДанных.Метаданные().ПолноеИмя();
			СтрокаТипа = ПараметрыВыгрузки.ТаблицаСсылочныхТипов.Найти(ИмяМетаданных, "ПолноеИмяМетаданных");

			Если НЕ СтрокаТипа = Неопределено
				  И СтрокаТипа.Вид = "Документы"
				  И НЕ ОбъектДанных.ПометкаУдаления	Тогда

				УдалятьРегистрацию = Ложь;
				ТаблицаЗаданий = ПодготовитьТаблицуЗаданийДокумента(ОбъектДанных, СтрокаТипа, ПараметрыВыгрузки, УдалятьРегистрацию);

				Если НЕ УдалятьРегистрацию Тогда

					Для каждого СтрокаТаблицыЗаданий Из ТаблицаЗаданий Цикл

						ПараметрыЗадания = ПолучитьКлючевыеПараметрыЗадания(СтрокаТаблицыЗаданий.Тип, ОбъектДанных, СтрокаТаблицыЗаданий.КлючТипа,, ПараметрыВыгрузки);

						Если НЕ ЕстьВЗаголовках(ПараметрыЗадания.ТипДокумента, ОбъектДанных.IDN, ОбъектДанных.ВерсияДанных, ПараметрыЗадания, Ложь) Тогда

							ПланыОбмена.ЗарегистрироватьИзменения(УзлыВыборка.Узел, ОбъектДанных.Ссылка);
							СчётчикПринято = СчётчикПринято + 1;

						КонецЕсли;

					КонецЦикла;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Формат_Ценников

//	LNK 04.06.2024 06:37:20
Процедура УстановитьФорматЦенников(ОчередьNavision, НомераЗаданийНеВыполнено, Отладка)	Экспорт	//	.. эскпорт для целей отладки

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	#Если Клиент Тогда
	//НомераЗаданийНеВыполнено = Новый Соответствие;
	#КонецЕсли

	Итерация = 0;
	ВыборкаNavision = ОчередьNavision.Результат.Выбрать();

	Пока ВыборкаNavision.Следующий() Цикл

		Итерация	= Итерация + 1;
		ТекстОшибки = "";

		Попытка

			РазмерЦенника = Перечисления.РазмерЦенника[ВыборкаNavision.ID5];

			Если НЕ РазмерЦенника.Пустая() Тогда	//	ещё один предохранитель

				Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("IDN", ВыборкаNavision.ID1);

				Если НЕ Номенклатура.Пустая() Тогда

					УстановитьФорматЦенникаПоНоменклатуре(Номенклатура, РазмерЦенника, ТекстОшибки, Отладка);

				Иначе

					ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
						+ Формат(Итерация, "ЧЦ=4; ЧВН=; ЧГ=") + ". IDN [" + ВыборкаNavision.ID1 + "] ошибочный"

				КонецЕсли;

			Иначе

				ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
					+ Формат(Итерация, "ЧЦ=4; ЧВН=; ЧГ=") + ". Формат [" + ВыборкаNavision.ID5 + "] пустой (Перечисление)"

			КонецЕсли;

		Исключение

			ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
					+ Формат(Итерация, "ЧЦ=4; ЧВН=; ЧГ=") + ". Формат [" + ВыборкаNavision.ID5 + "] не найден (Перечисление)"

		КонецПопытки;

	//	Устанавливаем отметку о выполнении/невыполнении
		ОчередьОбновитьЗадание(ВыборкаNavision.ЗаданиеНо,, ?(ПустаяСтрока(ТекстОшибки), 1, 0), ТекстОшибки, Отладка);

	КонецЦикла;

КонецПроцедуры

//	LNK 14.06.2024 08:30:29
Процедура УстановитьФорматЦенникаПоНоменклатуре(Номенклатура, РазмерЦенника, ТекстОшибки, Отладка)

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Попытка

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаУзлов.Магазин КАК Магазин,
		|	ТаблицаУзлов.Код КАК КлючПорядка
		|ИЗ
		|	ПланОбмена.ПоМагазину КАК ТаблицаУзлов
		|ГДЕ
		|	НЕ(ТаблицаУзлов.ПометкаУдаления
		|				ИЛИ ТаблицаУзлов.ЭтотУзел
		|				ИЛИ ТаблицаУзлов.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.Магазин,
		|	ТаблицаУзлов.Код
		|ИЗ
		|	ПланОбмена.ПоМагазину КАК ТаблицаУзлов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.ПоМагазину.Магазины КАК ТабличнаяЧасть
		|		ПО ТаблицаУзлов.Ссылка = ТабличнаяЧасть.Ссылка
		|ГДЕ
		|	НЕ(ТаблицаУзлов.ПометкаУдаления
		|				ИЛИ ТаблицаУзлов.ЭтотУзел
		|				ИЛИ ТабличнаяЧасть.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	КлючПорядка"
		);
		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда

			НаборЗаписей = РегистрыСведений.РазмерыЦенников.СоздатьНаборЗаписей();
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;

			ВыборкаДанных = РезультатЗапроса.Выбрать();

			Пока ВыборкаДанных.Следующий() Цикл

				НаборЗаписей.Очистить();
				НаборЗаписей.ОбменДанными.Получатели.Очистить();
				ОбменДаннымиСервер.УстановитьПолучателейМагазина(НаборЗаписей.ОбменДанными.Получатели, ВыборкаДанных.Магазин);

				НаборЗаписей.Отбор.Магазин.Установить(ВыборкаДанных.Магазин);
				НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);

				ЗаписьНабора = НаборЗаписей.Добавить();

				ЗаписьНабора.Магазин		= НаборЗаписей.Отбор.Магазин.Значение;
				ЗаписьНабора.Номенклатура	= НаборЗаписей.Отбор.Номенклатура.Значение;

				ЗаписьНабора.РазмерЦенника	= РазмерЦенника;

				ЗаписьНабора.ВремяИзменения	= ТекущаяДата();
				ЗаписьНабора.Автор			= Справочники.Пользователи.АдминистраторАвтоматов;
				ЗаписьНабора.УзелСоздания	= Справочники.СтруктураУзлов.КСУ_Navision;

				НаборЗаписей.Записать();

			КонецЦикла;

		КонецЕсли;

	Исключение

		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
				+ ОписаниеОшибки();

	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
