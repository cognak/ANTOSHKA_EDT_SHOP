#Область ОбщийИнтерфейс

//	LNK 15.04.2020 10:51:17
Функция Валидация(НомерТелефона, КредитнаяПрограмма, Отказ, ТекстСообщения)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ДанныеКлиента = Новый Структура("Найден", Ложь);
	
	ДанныеСоединения = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);

	Если ПроверитьНазначениеСоединения(ДанныеСоединения, КредитнаяПрограмма, ТекстСообщения, Отказ) Тогда

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписьJSON.ЗаписатьНачалоОбъекта();

		JSON.ЗаписатьСвойство("phone", ПодготовитьНомерТелефона(НомерТелефона), ЗаписьJSON);

		ЗаписьJSON.ЗаписатьКонецОбъекта();

		Результат = ОбменСБанкамиМонобанкСлужебный.ВыполнитьЗапросКСерверу("/api/client/validate"
			, ЗаписьJSON.Закрыть()
			, ДанныеСоединения
		);

		Если НЕ Результат.Ошибка Тогда

			ДанныеКлиента.Найден = Результат.ДанныеОтвета.found;

			Если ДанныеКлиента.Найден Тогда

				ДанныеКлиента.Вставить("Фамилия" , Результат.ДанныеОтвета.client.last_name);
				ДанныеКлиента.Вставить("Имя"     , Результат.ДанныеОтвета.client.first_name);
				ДанныеКлиента.Вставить("Отчество", Результат.ДанныеОтвета.client.middle_name);
				ДанныеКлиента.Вставить("ИНН"     , Результат.ДанныеОтвета.client.inn);
				ДанныеКлиента.Вставить("Представление", СокрЛП(СтрЗаменить(ДанныеКлиента.Фамилия + " " + ДанныеКлиента.Имя + " " + ДанныеКлиента.Отчество, "  ", " ")));

			Иначе

				ДанныеКлиента.Вставить("Фамилия" , "");
				ДанныеКлиента.Вставить("Имя"     , "");
				ДанныеКлиента.Вставить("Отчество", "");
				ДанныеКлиента.Вставить("ИНН"     , "");
				ДанныеКлиента.Вставить("Представление", "");

				Отказ = Истина;
				ТекстСообщения = "Банк Не обнаружил клиента по номеру телефона «" + ПодготовитьНомерТелефона(НомерТелефона) + "»";

			КонецЕсли;

		Иначе

			Отказ = Истина;
			ТекстСообщения = Результат.ОписаниеОшибки;

		КонецЕсли;

	КонецЕсли;

	Возврат ДанныеКлиента;

КонецФункции

//	LNK 27.03.2020 11:19:49
Функция ПодатьЗаявкуНаОформлениеКредита(СчетПокупателюСсылка, КредитнаяПрограмма, ТекстСообщения = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Отказ = Ложь;
	
	ДанныеСоединения = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);
	
	Если ПроверитьНазначениеСоединения(ДанныеСоединения, КредитнаяПрограмма, ТекстСообщения, Отказ) Тогда

		Результат = ОбменСБанкамиМонобанкСлужебный.ВыполнитьЗапросКСерверу("/api/order/create"
				, ПолучитьJSONЗаявкиНаОформлениеПокупкиЧастями(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)
				, ДанныеСоединения
		);

		Если НЕ Результат.Ошибка Тогда

			ОбменСБанкамиСервер.УстановитьДанныеОтветаБанка(СчетПокупателюСсылка, КредитнаяПрограмма, Результат.ДанныеОтвета);

		Иначе

			Отказ = Истина;
			ТекстСообщения = Результат.ОписаниеОшибки;

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

//	LNK 01.06.2020 06:48:30
Функция ОтменитьЗаявкуНаОформлениеКредита(СчетПокупателюСсылка, КредитнаяПрограмма, ТекстСообщения = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;
	
	ДанныеОтвета     = ОбменСБанкамиСервер.СтруктураОтветаВнешнейСистемы();
	ДанныеСоединения = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);

	Если ПроверитьНазначениеСоединения(ДанныеСоединения, КредитнаяПрограмма, ДанныеОтвета.ТекстСообщения, ДанныеОтвета.Отказ) Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаРегистра.ИдентификаторБанка КАК ИдентификаторБанка
		|ИЗ
		|	РегистрСведений.ДанныеКредитныхПрограмм КАК ТаблицаРегистра
		|ГДЕ
		|	ТаблицаРегистра.СчетНаОплатуПокупателю = &СчетНаОплатуПокупателю
		|	И ТаблицаРегистра.УслугаБанка = &КредитнаяПрограмма"
		);
		Запрос.УстановитьПараметр("СчетНаОплатуПокупателю", СчетПокупателюСсылка);
		Запрос.УстановитьПараметр("КредитнаяПрограмма", КредитнаяПрограмма);
		
		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда

			Выборка = Результат.Выбрать();
			Выборка.Следующий();

			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

			JSON.ЗаписатьСвойство("order_id", Выборка.ИдентификаторБанка, ЗаписьJSON);

			ЗаписьJSON.ЗаписатьКонецОбъекта();

			Результат = ОбменСБанкамиМонобанкСлужебный.ВыполнитьЗапросКСерверу("/api/order/reject"
				, ЗаписьJSON.Закрыть()
				, ДанныеСоединения
			);

			Если НЕ Результат.Ошибка Тогда

				ДанныеОтвета.Отказ = НЕ (Результат.ДанныеОтвета.state = "SUCCESS" И (Результат.ДанныеОтвета.order_sub_state = "SUCCESS" ИЛИ Результат.ДанныеОтвета.order_sub_state = "ACTIVE"));
				ДанныеОтвета.ОтветБанка = Результат.ДанныеОтвета.state + Символы.ПС + Результат.ДанныеОтвета.order_sub_state;

				Если ДанныеОтвета.Отказ Тогда

					Если Результат.ДанныеОтвета.order_sub_state = "ADDED" Тогда

						ДанныеОтвета.ТекстСообщения = "заявка добавлена на обработку";

					ИначеЕсли Результат.ДанныеОтвета.order_sub_state = "CLIENT_NOT_FOUND" Тогда

						ДанныеОтвета.ТекстСообщения = "клиент не найден";

					ИначеЕсли Результат.ДанныеОтвета.order_sub_state = "EXCEEDED_SUM_LIMIT" Тогда

						ДанныеОтвета.ТекстСообщения = "клиент превысил допустимый лимит на оплату частями";

					ИначеЕсли Результат.ДанныеОтвета.order_sub_state = "PAY_PARTS_ARE_NOT_ACCEPTABLE" Тогда

						ДанныеОтвета.ТекстСообщения = "с данным количеством платежей клиент не может оформить рассрочку";

					ИначеЕсли Результат.ДанныеОтвета.order_sub_state = "CLIENT_CONFIRM_TIME_EXPIRED" Тогда

						ДанныеОтвета.ТекстСообщения = "истекло время подтверждения заявки клиентом";

					ИначеЕсли Результат.ДанныеОтвета.order_sub_state = "WAITING_FOR_CLIENT" Тогда

						ДанныеОтвета.ТекстСообщения = "ожидание подтверждения от клиента";

					ИначеЕсли Результат.ДанныеОтвета.order_sub_state = "REJECTED_BY_CLIENT" Тогда

						ДанныеОтвета.ТекстСообщения = "клиент отказался от совершения покупки";

					ИначеЕсли Результат.ДанныеОтвета.order_sub_state = "REJECTED_BY_STORE" Тогда

						ДанныеОтвета.ТекстСообщения = "магазин отказался от продажи";

					ИначеЕсли Результат.ДанныеОтвета.order_sub_state = "WAITING_FOR_STORE_CONFIRM" Тогда

						ДанныеОтвета.ТекстСообщения = "ожидание от магазина подтверждения заявки (состояние возможно только для магазинов с двухтактным подтверждением заявки)";

					Иначе
						
						ДанныеОтвета.ТекстСообщения = "Отказано по другим причинам (ответ банка непонятен)";

					КонецЕсли;

				КонецЕсли;

			Иначе

				ДанныеОтвета.Отказ = Истина;
				ДанныеОтвета.ТекстСообщения = Результат.ОписаниеОшибки;

			КонецЕсли;

		Иначе

			ДанныеОтвета.Отказ = Истина;
			ДанныеОтвета.ТекстСообщения = "Не обнаружена кредитная программа «" + КредитнаяПрограмма + "» по «" + СчетПокупателюСсылка + "»";

		КонецЕсли;

	КонецЕсли;

	Возврат ДанныеОтвета;

КонецФункции

//	LNK 04.06.2020 08:10:17
Функция ПодтверждениеВыдачиТовараКлиенту(СчетПокупателюСсылка, КредитнаяПрограмма)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;
	
	ДанныеОтвета     = ОбменСБанкамиСервер.СтруктураОтветаВнешнейСистемы();
	ДанныеСоединения = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);

	Если ПроверитьНазначениеСоединения(ДанныеСоединения, КредитнаяПрограмма, ДанныеОтвета.ТекстСообщения, ДанныеОтвета.Отказ) Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаРегистра.ИдентификаторБанка КАК ИдентификаторБанка
		|ИЗ
		|	РегистрСведений.ДанныеКредитныхПрограмм КАК ТаблицаРегистра
		|ГДЕ
		|	ТаблицаРегистра.СчетНаОплатуПокупателю = &СчетНаОплатуПокупателю
		|	И ТаблицаРегистра.УслугаБанка = &КредитнаяПрограмма"
		);
		Запрос.УстановитьПараметр("СчетНаОплатуПокупателю", СчетПокупателюСсылка);
		Запрос.УстановитьПараметр("КредитнаяПрограмма", КредитнаяПрограмма);
		
		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда

			Выборка = Результат.Выбрать();
			Выборка.Следующий();

			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

			JSON.ЗаписатьСвойство("order_id", Выборка.ИдентификаторБанка, ЗаписьJSON);

			ЗаписьJSON.ЗаписатьКонецОбъекта();

			Результат = ОбменСБанкамиМонобанкСлужебный.ВыполнитьЗапросКСерверу("/api/order/confirm"
				, ЗаписьJSON.Закрыть()
				, ДанныеСоединения
			);

			Если НЕ Результат.Ошибка Тогда

				ДанныеОтвета.Отказ = НЕ (Результат.ДанныеОтвета.state = "SUCCESS" И (Результат.ДанныеОтвета.order_sub_state = "SUCCESS" ИЛИ Результат.ДанныеОтвета.order_sub_state = "ACTIVE"));
				ДанныеОтвета.ОтветБанка = Результат.ДанныеОтвета.state + Символы.ПС + Результат.ДанныеОтвета.order_sub_state;

				Если НЕ ДанныеОтвета.Отказ Тогда

					ДанныеОтвета.ТекстСообщения = "заявка успешно обработана";

				Иначе

					Если Результат.ДанныеОтвета.order_sub_state = "ADDED" Тогда

						ДанныеОтвета.ТекстСообщения = "заявка добавлена на обработку";

					ИначеЕсли Результат.ДанныеОтвета.order_sub_state = "CLIENT_NOT_FOUND" Тогда

						ДанныеОтвета.ТекстСообщения = "клиент не найден";

					ИначеЕсли Результат.ДанныеОтвета.order_sub_state = "EXCEEDED_SUM_LIMIT" Тогда

						ДанныеОтвета.ТекстСообщения = "клиент превысил допустимый лимит на оплату частями";

					ИначеЕсли Результат.ДанныеОтвета.order_sub_state = "PAY_PARTS_ARE_NOT_ACCEPTABLE" Тогда

						ДанныеОтвета.ТекстСообщения = "с данным количеством платежей клиент не может оформить рассрочку";

					ИначеЕсли Результат.ДанныеОтвета.order_sub_state = "CLIENT_CONFIRM_TIME_EXPIRED" Тогда

						ДанныеОтвета.ТекстСообщения = "истекло время подтверждения заявки клиентом";

					ИначеЕсли Результат.ДанныеОтвета.order_sub_state = "WAITING_FOR_CLIENT" Тогда

						ДанныеОтвета.ТекстСообщения = "ожидание подтверждения от клиента";

					ИначеЕсли Результат.ДанныеОтвета.order_sub_state = "REJECTED_BY_CLIENT" Тогда

						ДанныеОтвета.ТекстСообщения = "клиент отказался от совершения покупки";

					ИначеЕсли Результат.ДанныеОтвета.order_sub_state = "REJECTED_BY_STORE" Тогда

						ДанныеОтвета.ТекстСообщения = "магазин отказался от продажи";

					ИначеЕсли Результат.ДанныеОтвета.order_sub_state = "WAITING_FOR_STORE_CONFIRM" Тогда

						ДанныеОтвета.ТекстСообщения = "ожидание от магазина подтверждения заявки (состояние возможно только для магазинов с двухтактным подтверждением заявки)";

					Иначе
						
						ДанныеОтвета.ТекстСообщения = "Отказано по другим причинам (ответ банка непонятен)";

					КонецЕсли;

				КонецЕсли;

			Иначе

				ДанныеОтвета.Отказ = Истина;
				ДанныеОтвета.ТекстСообщения = Результат.ОписаниеОшибки;

			КонецЕсли;

		Иначе

			ДанныеОтвета.Отказ = Истина;
			ДанныеОтвета.ТекстСообщения = "Не обнаружена кредитная программа «" + КредитнаяПрограмма + "» по «" + СчетПокупателюСсылка + "»";

		КонецЕсли;

	КонецЕсли;

	Возврат ДанныеОтвета;

КонецФункции

//	LNK 12.08.2020 09:47:17
Функция ВозвратПоКредитнойПрограмме(СчетПокупателюСсылка, КредитнаяПрограмма, ДокументВозврата, СуммаКредитаВозврат)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;
	
	ДанныеОтвета     = ОбменСБанкамиСервер.СтруктураОтветаВнешнейСистемы();
	ДанныеСоединения = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);

	Если ПроверитьНазначениеСоединения(ДанныеСоединения, КредитнаяПрограмма, ДанныеОтвета.ТекстСообщения, ДанныеОтвета.Отказ) Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаРегистра.ИдентификаторБанка КАК ИдентификаторБанка,
		|	ЕСТЬNULL(ТаблицаЧека.СуммаНДС, 0) КАК СуммаНДС
		|ИЗ
		|	РегистрСведений.ДанныеКредитныхПрограмм КАК ТаблицаРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СУММА(ТаблицаТовары.СуммаНДС) КАК СуммаНДС
		|		ИЗ
		|			Документ.ЧекККМ.Товары КАК ТаблицаТовары
		|		ГДЕ
		|			ТаблицаТовары.Ссылка = &ДокументВозврата) КАК ТаблицаЧека
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаРегистра.СчетНаОплатуПокупателю = &СчетНаОплатуПокупателю
		|	И ТаблицаРегистра.УслугаБанка = &КредитнаяПрограмма
		|	И НЕ ТаблицаРегистра.ИдентификаторБанка = """""
		);
		Запрос.УстановитьПараметр("СчетНаОплатуПокупателю", СчетПокупателюСсылка);
		Запрос.УстановитьПараметр("КредитнаяПрограмма", КредитнаяПрограмма);
		Запрос.УстановитьПараметр("ДокументВозврата"  , ДокументВозврата);
		
		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда

			Выборка = Результат.Выбрать();
			Выборка.Следующий();

			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

			JSON.ЗаписатьСвойство("order_id", Выборка.ИдентификаторБанка, ЗаписьJSON);
			JSON.ЗаписатьСвойство("return_money_to_card", Истина, ЗаписьJSON);
			JSON.ЗаписатьСвойство("store_return_id", СтрЗаменить(СокрЛП(ДокументВозврата.УникальныйИдентификатор()), "-", ""), ЗаписьJSON);
			JSON.ЗаписатьСвойство("sum", СуммаКредитаВозврат, ЗаписьJSON);

			ЗаписьJSON.ЗаписатьИмяСвойства("additional_params");

				ЗаписьJSON.ЗаписатьНачалоОбъекта();

				JSON.ЗаписатьСвойство("nds", Выборка.СуммаНДС, ЗаписьJSON, 2);

				ЗаписьJSON.ЗаписатьКонецОбъекта();

			ЗаписьJSON.ЗаписатьКонецОбъекта();

			Результат = ОбменСБанкамиМонобанкСлужебный.ВыполнитьЗапросКСерверу("/api/order/return"
				, ЗаписьJSON.Закрыть()
				, ДанныеСоединения
			);

			Если НЕ Результат.Ошибка Тогда

				ДанныеОтвета.Отказ = НЕ Результат.ДанныеОтвета.status = "OK";
				ДанныеОтвета.ОтветБанка = Результат.ДанныеОтвета.status;

				Если НЕ ДанныеОтвета.Отказ Тогда
					
					ДанныеОтвета.ТекстСообщения = "возврат принят успешно";

				Иначе
					
					ДанныеОтвета.ТекстСообщения = "возврат НЕ принят (" + Результат.ДанныеОтвета.status + ")";

				КонецЕсли;

			Иначе

				ДанныеОтвета.Отказ = Истина;
				ДанныеОтвета.ТекстСообщения = Результат.ОписаниеОшибки;

			КонецЕсли;

		Иначе

			ДанныеОтвета.Отказ = Истина;
			ДанныеОтвета.ТекстСообщения = "Не обнаружена кредитная программа «" + КредитнаяПрограмма + "» по «" + СчетПокупателюСсылка + "»";

		КонецЕсли;

	КонецЕсли;

	Возврат ДанныеОтвета;

КонецФункции

Функция ПроверитьСостояниеЗаявкиНаОформлениеКредита(СчетПокупателюСсылка, КредитнаяПрограмма, ТекстСообщения = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;
	
	Отказ = Ложь;

	ДанныеСоединения = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);

	Если ПроверитьНазначениеСоединения(ДанныеСоединения, КредитнаяПрограмма, ТекстСообщения, Ложь) Тогда

		Результат = ОбменСБанкамиМонобанкСлужебный.ВыполнитьЗапросКСерверу("/api/order/state"
				, ПолучитьJSONПроверкиСостоянияЗаявки(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)
				, ДанныеСоединения
		);

		Если НЕ Результат.Ошибка Тогда

			ОбменСБанкамиСервер.УстановитьДанныеОтветаБанка(СчетПокупателюСсылка, КредитнаяПрограмма, Результат.ДанныеОтвета);

			ПолучитьДанныеГарантийногоПисьма(СчетПокупателюСсылка, КредитнаяПрограмма, ТекстСообщения);

		Иначе

			Отказ = Истина;
			ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
			+ Результат.ОписаниеОшибки;

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

Функция ПолучитьДанныеГарантийногоПисьма(СчетПокупателюСсылка, КредитнаяПрограмма, ТекстСообщения = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;
	
	Отказ = Ложь;

	ДанныеСоединения = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);

	Если ПроверитьНазначениеСоединения(ДанныеСоединения, КредитнаяПрограмма, ТекстСообщения, Ложь) Тогда

		Результат = ОбменСБанкамиМонобанкСлужебный.ВыполнитьЗапросКСерверу("/api/order/data/for/guarantee/letter"
				, ПолучитьJSONПолученияГарантийногоПисьма(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)
				, ДанныеСоединения
		);

		Если НЕ Результат.Ошибка Тогда

		//	Сигнатура = СформироватьПодписьБанка(ДанныеСоединения, Результат.ДанныеОтвета);
			Сигнатура = "";

		//	Не могу сформировать подпись банка.. не совпадает. Отложим пока что.
			Если ИСТИНА ИЛИ Результат.ДанныеОтвета.expansion.sign = Сигнатура Тогда

				ДанныеОтвета = Новый Структура(
					"ГарантийноеПисьмоДанные, ГарантийноеПисьмоПодтверждено"
					, Результат.ДанныеОтвета
					, Истина);

				ОбменСБанкамиСервер.УстановитьДанныеОтветаБанка(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеОтвета);

			Иначе

				Отказ = Истина;
				ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
				+ "Подпись банка не соответствует ожидаемой.";

			КонецЕсли;

		Иначе

			Отказ = Истина;
			ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
			+ Результат.ОписаниеОшибки;

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

//	LNK 09.06.2020 10:48:52
Функция ПолучитьОтчетСостоянияЗаявок(ДатаОтчета, КредитнаяПрограмма, ТекстСообщения = "")	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;
	
	Отказ = Ложь;

	ДанныеСоединения = ОбменСБанкамиПовтИсп.ПолучитьДанныеПрограммы(КредитнаяПрограмма);

	Если ПроверитьНазначениеСоединения(ДанныеСоединения, КредитнаяПрограмма, ТекстСообщения, Отказ) Тогда

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписьJSON.ЗаписатьНачалоОбъекта();

		JSON.ЗаписатьСвойство("date", Формат(ДатаОтчета, "ДФ=yyyy-MM-dd"), ЗаписьJSON);

		ЗаписьJSON.ЗаписатьКонецОбъекта();

		ТекстЗапроса = ЗаписьJSON.Закрыть();

		Результат = ОбменСБанкамиМонобанкСлужебный.ВыполнитьЗапросКСерверу("/api/store/report"
				, ТекстЗапроса
				, ДанныеСоединения
		);

		Если НЕ Результат.Ошибка Тогда

			ТаблицаЗначений = Новый ТаблицаЗначений;
			ТаблицаЗначений.Колонки.Добавить("ИдентификаторБанка", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));

		Иначе

			Отказ = Истина;
			ТекстСообщения = Результат.ОписаниеОшибки;

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

#КонецОбласти

#Область ПолучениеДанныхОбъектовИФормированиеТекстовJSON

Функция ПолучитьJSONЗаявкиНаОформлениеПокупкиЧастями(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)

	Результаты = ОбменСБанкамиСервер.ДанныеЗаказаПокупателя(СчетПокупателюСсылка, КредитнаяПрограмма);
	Шапка = Результаты[1].Выбрать();
	Шапка.Следующий();
	Программы = Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Товары = Результаты[3].Выбрать();

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	JSON.ЗаписатьСвойство("store_order_id", Шапка.Идентификатор, ЗаписьJSON);
	JSON.ЗаписатьСвойство("client_phone"  , ПодготовитьНомерТелефона(Шапка.НомерТелефона), ЗаписьJSON);
//	JSON.ЗаписатьСвойство("total_sum"     , Шапка.СуммаДокумента, ЗаписьJSON, 2);	//	оказывается, это сумма кредита!!!
	JSON.ЗаписатьСвойство("total_sum"     , Шапка.СуммаКредита, ЗаписьJSON, 2);

	ЗаписьJSON.ЗаписатьИмяСвойства("invoice");

		ЗаписьJSON.ЗаписатьНачалоОбъекта();

		JSON.ЗаписатьСвойство("date"    , Формат(Шапка.Дата, "ДФ=yyyy-MM-dd"), ЗаписьJSON);
		JSON.ЗаписатьСвойство("number"  , Шапка.Номер, ЗаписьJSON);
		JSON.ЗаписатьСвойство("point_id", СокрЛП(Шапка.IDN), ЗаписьJSON);
		JSON.ЗаписатьСвойство("source"  , "STORE", ЗаписьJSON);

		ЗаписьJSON.ЗаписатьКонецОбъекта();

	ЗаписьJSON.ЗаписатьИмяСвойства("available_programs");

		ЗаписьJSON.ЗаписатьНачалоМассива();

		Пока Программы.Следующий() Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

			ЗначенияГлубины = Программы.Выбрать();

			ЗаписьJSON.ЗаписатьИмяСвойства("available_parts_count");

				ЗаписьJSON.ЗаписатьНачалоМассива();

				Пока ЗначенияГлубины.Следующий() Цикл

					ЗаписьJSON.ЗаписатьЗначение(ЗначенияГлубины.ПериодПредоставления);

				КонецЦикла;

				ЗаписьJSON.ЗаписатьКонецМассива();

			JSON.ЗаписатьСвойство("type", СокрЛП(Программы.ИдентификаторПрограммы), ЗаписьJSON);

			ЗаписьJSON.ЗаписатьКонецОбъекта();

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();

	ИтогСуммаНДС = 0;

	ЗаписьJSON.ЗаписатьИмяСвойства("products");

		ЗаписьJSON.ЗаписатьНачалоМассива();

		Пока Товары.Следующий() Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

				JSON.ЗаписатьСвойство("name" , СокрЛП(Товары.Наименование), ЗаписьJSON);
				JSON.ЗаписатьСвойство("count", Товары.КоличествоУпаковок, ЗаписьJSON, 0);
				JSON.ЗаписатьСвойство("sum"  , Товары.Сумма, ЗаписьJSON, 2);

				ИтогСуммаНДС = ИтогСуммаНДС + Товары.СуммаНДС;

			ЗаписьJSON.ЗаписатьКонецОбъекта();

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();

	JSON.ЗаписатьСвойство("result_callback", СокрЛП(""), ЗаписьJSON);

	ЗаписьJSON.ЗаписатьИмяСвойства("additional_params");

		ЗаписьJSON.ЗаписатьНачалоОбъекта();

		JSON.ЗаписатьСвойство("nds"            , ИтогСуммаНДС, ЗаписьJSON, 2);
	//	JSON.ЗаписатьСвойство("seller_phone"   , ПодготовитьНомерТелефона(Шапка.НомерТелефонаПродавца), ЗаписьJSON);
		JSON.ЗаписатьСвойство("ext_initial_sum", Шапка.СуммаПредоплаты, ЗаписьJSON, 2);

		ЗаписьJSON.ЗаписатьКонецОбъекта();

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	ТекстЗапроса = ЗаписьJSON.Закрыть();

	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьJSONПроверкиСостоянияЗаявки(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаРегистра.ИдентификаторБанка КАК order_id
	|ИЗ
	|	РегистрСведений.ДанныеКредитныхПрограмм КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.СчетНаОплатуПокупателю = &СчетНаОплатуПокупателю
	|	И ТаблицаРегистра.УслугаБанка = &КредитнаяПрограмма"
	);
	Запрос.УстановитьПараметр("СчетНаОплатуПокупателю", СчетПокупателюСсылка);
	Запрос.УстановитьПараметр("КредитнаяПрограмма"    , КредитнаяПрограмма);
	
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		Выборка = Результат.Выбрать();
		Выборка.Следующий();

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписьJSON.ЗаписатьНачалоОбъекта();

		JSON.ЗаписатьСвойство("order_id", Выборка.order_id, ЗаписьJSON);

		ЗаписьJSON.ЗаписатьКонецОбъекта();

		ТекстЗапроса = ЗаписьJSON.Закрыть();

	Иначе

		ТекстЗапроса = "";

	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьJSONПолученияГарантийногоПисьма(СчетПокупателюСсылка, КредитнаяПрограмма, ДанныеСоединения)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаРегистра.СчетНаОплатуПокупателю.Дата КАК Дата,
	|	ТаблицаРегистра.СчетНаОплатуПокупателю.Номер КАК Номер,
	|	ТаблицаРегистра.ИдентификаторБанка КАК order_id
	|ИЗ
	|	РегистрСведений.ДанныеКредитныхПрограмм КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.СчетНаОплатуПокупателю = &СчетНаОплатуПокупателю
	|	И ТаблицаРегистра.УслугаБанка = &КредитнаяПрограмма"
	);
	Запрос.УстановитьПараметр("СчетНаОплатуПокупателю", СчетПокупателюСсылка);
	Запрос.УстановитьПараметр("КредитнаяПрограмма"    , КредитнаяПрограмма);
	
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		Выборка = Результат.Выбрать();
		Выборка.Следующий();

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписьJSON.ЗаписатьНачалоОбъекта();

		ЗаписьJSON.ЗаписатьИмяСвойства("invoice");

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

			JSON.ЗаписатьСвойство("date"    , Формат(Выборка.Дата, "ДФ=yyyy-MM-dd"), ЗаписьJSON);
			JSON.ЗаписатьСвойство("number"  , Выборка.Номер, ЗаписьJSON);

			ЗаписьJSON.ЗаписатьКонецОбъекта();

		JSON.ЗаписатьСвойство("order_id", Выборка.order_id, ЗаписьJSON);

		ЗаписьJSON.ЗаписатьКонецОбъекта();

		ТекстЗапроса = ЗаписьJSON.Закрыть();

	Иначе

		ТекстЗапроса = "";

	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьНазначениеСоединения(ДанныеСоединения, КредитнаяПрограмма, ТекстСообщения, Отказ)
	
	Если НЕ ДанныеСоединения.Найден Тогда

		Отказ = Истина;
		ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
		+ "Для программы «" + КредитнаяПрограмма + "» данные НЕ обнаружены.";

	ИначеЕсли НЕ ДанныеСоединения.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Монобанк Тогда

		Отказ = Истина;

		Если НЕ ДанныеСоединения.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Монобанк Тогда

			ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
			+ "Кредитная программа «" + КредитнаяПрограмма + "» не назначена для Монобанка!";
		
		Иначе

			ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
			+ "Кредитная программа «" + КредитнаяПрограмма + "» не имеет web-адресации!";

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

Функция ПодготовитьНомерТелефона(Знач НомерТелефона)

	Если ЗначениеЗаполнено(НомерТелефона) Тогда
		
		НомерТелефона = "+" + ОтправкаSMS.ПодготовитьНомерТелефона(НомерТелефона);

	Иначе

		НомерТелефона = "";

	КонецЕсли;

	Возврат НомерТелефона;

КонецФункции

Функция СформироватьПодписьБанка(ДанныеСоединения, ДанныеОтвета)

	ТекстЗапроса =	  ФорматВСтроку(ДанныеОтвета.expansion.customer.last_name)
					+ ФорматВСтроку(ДанныеОтвета.expansion.customer.first_name)
					+ ФорматВСтроку(ДанныеОтвета.expansion.customer.middle_name)
					+ ФорматВСтроку(ДанныеОтвета.expansion.customer.document.passport.series)
					+ ФорматВСтроку(ДанныеОтвета.expansion.customer.document.passport.number)
					+ ФорматВСтроку(ДанныеОтвета.expansion.customer.document.passport.issued)
					+ ФорматВСтроку(ДанныеОтвета.expansion.customer.document.passport.date_of_issue)
					+ ФорматВСтроку(ДанныеОтвета.expansion.customer.inn)
					+ ФорматВСтроку(ДанныеОтвета.expansion.invoice.invoice_number)
					+ ФорматВСтроку(ДанныеОтвета.expansion.invoice.invoice_date)
					+ ФорматВСтроку(ДанныеОтвета.expansion.invoice.invoice_amount)
					+ ФорматВСтроку(ДанныеОтвета.expansion.payment_destination.dest_id)
					+ ФорматВСтроку(ДанныеОтвета.expansion.payment_destination.dest_name)
					+ ФорматВСтроку(ДанныеОтвета.expansion.payment_destination.dest_mfo)
					+ ФорматВСтроку(ДанныеОтвета.expansion.payment_destination.dest_bank_name)
					+ ФорматВСтроку(ДанныеОтвета.expansion.payment_destination.dest_acc_number)
					+ ФорматВСтроку(ДанныеОтвета.header.answer_datetime)
					+ ФорматВСтроку(ДанныеОтвета.expansion.bank.agreement)
					+ ФорматВСтроку(ДанныеОтвета.expansion.bank.agreement_date)
					+ ФорматВСтроку(ДанныеОтвета.expansion.bank.credit_amount)
					+ ФорматВСтроку(ДанныеОтвета.expansion.bank.customer_pay_amount)
					+ ФорматВСтроку(ДанныеОтвета.expansion.bank.bank_id)
					+ ФорматВСтроку(ДанныеОтвета.expansion.bank.bank_name)
					+ ФорматВСтроку(ДанныеОтвета.expansion.bank.bank_executive)
	;

//	Возврат ОбменСБанкамиМонобанкСлужебный.ПолучитьСигнатуру(ТекстЗапроса, ДанныеСоединения.Ключ);
	Возврат Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(ТекстЗапроса, КодировкаТекста.UTF8));

КонецФункции

Функция ФорматВСтроку(Знач Значение)

	Если ТипЗнч(Значение) = Тип("Число") Тогда

		Значение = Формат(Значение, "ЧГ=");

	КонецЕсли;

	Возврат СокрЛП(Значение);

КонецФункции

#КонецОбласти





















