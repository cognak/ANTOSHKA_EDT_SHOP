#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Управляет регламентным заданием узла обмена..
// Расписание задания задается в форме узла обмена.
//
Процедура ВключитьОтключитьРегламентноеЗадание(РасписаниеРегламентногоЗадания) Экспорт
	
	ПараметрыЗадания = СвойстваЗадания(РасписаниеРегламентногоЗадания);
	
	Задание = СуществующееЗадание();
	Если ИспользоватьРегламентноеЗадание Тогда
		
		Если Задание = Неопределено Тогда
			ИдентификаторЗадания = НовоеЗадание(ПараметрыЗадания);
			ИдентификаторРегламентногоЗадания = ИдентификаторЗадания;
		Иначе
			УстановитьПараметрыЗадания(Задание, ПараметрыЗадания);
		КонецЕсли;
		
	Иначе
		
		Если Задание <> Неопределено Тогда
			УдалитьЗадание(Задание);
		КонецЕсли;
		ИдентификаторРегламентногоЗадания = Неопределено;
		
	КонецЕсли;

КонецПроцедуры

// Возвращает структуру, содержащую свойства регламентного задания плана обмена.
// Структура используется для поиска существующего задания, изменения существующего,
// создания нового.
//
Функция СвойстваЗадания(РасписаниеЗадания) Экспорт
	
	Параметры = Новый Массив;
	Параметры.Добавить(Код);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Расписание", РасписаниеЗадания);
	ПараметрыЗадания.Вставить("Параметры", Параметры);
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("Ключ", Строка(Новый УникальныйИдентификатор));
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ПараметрыЗадания.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания.ВыгрузкаЕСпутник.ИмяМетода);
		
	Иначе
		ПараметрыЗадания.Вставить("Наименование", Наименование);
	КонецЕсли;
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Возвращает регламентное задание, соответствующее узлу плана обмена.
// Если задания нет - возвращается "Неопределено"
//
Функция СуществующееЗадание() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторРегламентногоЗадания);
		
	Иначе
		
	КонецЕсли;
	
	Возврат Задание;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	Код = "";
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ПустаяСтрока(Код) Тогда
		УстановитьНовыйКод();
	КонецЕсли;
	
	Если ПустаяСтрока(Наименование) Тогда
		СформироватьНаименование()
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Формирует уникальное наименование объекта
//
// Параметры:
// нет
// 
// Возвращаемое значение:
// нет
//
Процедура СформироватьНаименование()
	
	Префикс = НСтр("ru = 'Обмен ЕСпутник'");
		
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(ОбменССайтом.Наименование) КАК Наименование
	               |ИЗ
	               |	ПланОбмена.ОбменССайтом КАК ОбменССайтом
	               |ГДЕ
	               |	ОбменССайтом.Наименование ПОДОБНО &Шаблон
	               |
	               |ИМЕЮЩИЕ
	               |	НЕ МАКСИМУМ(ОбменССайтом.Наименование) ЕСТЬ NULL ";

	
	Запрос.УстановитьПараметр("Шаблон", Префикс + "%");
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Наименование = Префикс;
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Суффикс = Прав(СокрЛП(Выборка.Наименование), 4);
	
	Попытка
		СуффиксЧислом = Число(Суффикс);
	Исключение
		Наименование = Префикс + " 0001";
		Возврат;
	КонецПопытки;
		
	Наименование = Префикс + " " + Формат(СуффиксЧислом + 1, "ЧЦ=4; ЧВН=; ЧГ=");
	
КонецПроцедуры

// Удаляет регламентное задание, соответствующее объекту
//
// Параметры:
// нет
// 
// Возвращаемое значение:
// нет
//
Процедура УдалитьЗадание(Задание)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Задание) = Тип("РегламентноеЗадание") Тогда
		Задание.Удалить();
		
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

Функция НовоеЗадание(ПараметрыЗадания)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторРегламентногоЗадания = Неопределено;
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.ВыгрузкаЕСпутник);
		Задание.Использование = Истина;
		Задание.Ключ = ПараметрыЗадания.Ключ;
		Задание.Наименование = ПараметрыЗадания.Наименование;
		Задание.Параметры = ПараметрыЗадания.Параметры;
		Задание.Расписание = ПараметрыЗадания.Расписание;
		Задание.Записать();
		
		ИдентификаторРегламентногоЗадания = Задание.УникальныйИдентификатор;
		
	Иначе
		
	КонецЕсли;
	
	Возврат ИдентификаторРегламентногоЗадания;
	
КонецФункции

Процедура УстановитьПараметрыЗадания(Задание, СвойстваЗадания)
	
	Если Задание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Задание) = Тип("РегламентноеЗадание") Тогда
		
		Задание.Использование = Истина;
		Задание.Ключ = СвойстваЗадания.Ключ;
		Задание.Наименование = СвойстваЗадания.Наименование;
		Задание.Параметры = СвойстваЗадания.Параметры;
		Задание.Расписание = СвойстваЗадания.Расписание;
		Задание.Записать();
		
	Иначе
		

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
