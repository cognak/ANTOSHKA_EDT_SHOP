////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает признак использования плана обмена для организации обмена в модели сервиса.
//  Если признак установлен, то в сервисе можно включить обмен данными
//  с использованием этого плана обмена.
//  Если признак не установлен, то план обмена будет использоваться только 
//  для обмена в локальном режиме работы конфигурации.
// 
Функция ПланОбменаИспользуетсяВМоделиСервиса() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак того, что план обмена поддерживает обмен данными с корреспондентом, работающим в модели сервиса.
// Если признак установлен, то становится возможным создать обмен данными когда эта информационная база
// работает в локальном режиме, а корреспондент в модели сервиса.
//
Функция КорреспондентВМоделиСервиса() Экспорт
	
	Возврат Ложь;
	
КонецФункции

Функция ОбщиеДанныеУзлов() Экспорт
	
	Возврат "";
	
КонецФункции

Функция ПояснениеДляНастройкиПараметровУчета() Экспорт
	
	Возврат "";
	
КонецФункции

Функция ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента() Экспорт
	
	Возврат "";
	
КонецФункции

Процедура ОбработчикПроверкиПараметровУчета(Отказ, Получатель, Сообщение) Экспорт
	
	
	
КонецПроцедуры

// Возвращает префикс кода настройки выполнения обмена данными;
// Длина префикса не должна превышать один символ;
// Это значение должно быть одинаковым в плане обмена источника и приемника.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка, 1 - префикс кода настройки выполнения обмена данными
// 
Функция ПрефиксНастройкиОбменаДанными() Экспорт
	
	Возврат "М";
	
КонецФункции

// Возвращает имя файла настроек по умолчанию;
// В этот файл будут выгружены настройки обмена для приемника;
// Это значение должно быть одинаковым в плане обмена источника и приемника.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка, 255 - имя файла по умолчанию для выгрузки настроек обмена данными
//
Функция ИмяФайлаНастроекДляПриемника() Экспорт
	
	Возврат "Настройки обмена для рабочего места";
	
КонецФункции

// Определяет несколько вариантов настройки расписания выполнения обмена данными;
// Рекомендуется указывать не более 3 вариантов;
// Эти варианты должны быть одинаковым в плане обмена источника и приемника.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  ВариантыНастройки - СписокЗначений - список расписаний обмена данными
//
Функция ВариантыНастройкиРасписания() Экспорт
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	// Расписание №1
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	
	Расписание1 = Новый РасписаниеРегламентногоЗадания;
	Расписание1.ДниНедели                = ДниНедели;
	Расписание1.ПериодПовтораВТечениеДня = 900; // 15 минут
	Расписание1.ПериодПовтораДней        = 1; // каждый день
	Расписание1.Месяцы                   = Месяцы;
	
	// Расписание №2
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание2 = Новый РасписаниеРегламентногоЗадания;
	Расписание2.ВремяНачала              = Дата('00010101080000');
	Расписание2.ВремяКонца               = Дата('00010101200000');
	Расписание2.ПериодПовтораВТечениеДня = 3600; // каждый час
	Расписание2.ПериодПовтораДней        = 1; // каждый день
	Расписание2.ДниНедели                = ДниНедели;
	Расписание2.Месяцы                   = Месяцы;
	
	// Расписание №3
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	
	Расписание3 = Новый РасписаниеРегламентногоЗадания;
	Расписание3.ДниНедели         = ДниНедели;
	Расписание3.ВремяНачала       = Дата('00010101020000');
	Расписание3.ПериодПовтораДней = 1; // каждый день
	Расписание3.Месяцы            = Месяцы;
	
	// возвращаемое значение функции
	ВариантыНастройки = Новый СписокЗначений;
	
	ВариантыНастройки.Добавить(Расписание1, "Один раз в 15 минут, кроме субботы и воскресенья");
	ВариантыНастройки.Добавить(Расписание2, "Каждый час с 8:00 до 20:00, ежедневно");
	ВариантыНастройки.Добавить(Расписание3, "Каждую ночь в 2:00, кроме субботы и воскресенья");
	
	Возврат ВариантыНастройки;
КонецФункции

// Определяет версию платформы базы-приемника для создания СОМ-подключения;
// Возможные варианты возвращаемого значения: "V81"; "V82"; "V83"
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка, 3 - версия платформы базы-приемника (V81; V82; V83)
//
Функция ВерсияПлатформыИнформационнойБазы() Экспорт
	
	Возврат "V83";
	
КонецФункции

// Возвращает структуру отборов на узле плана обмена с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена
// 
Функция НастройкаОтборовНаУзле() Экспорт
	
		
	СтруктураНастроек = Новый Структура;
	Если  ОбменДаннымиПовтИсп.ГлавныйУзел() <> Неопределено
		И НЕ Константы.НастройкаПодчиненногоУзлаРИБЗавершена.Получить() Тогда 
		
		Возврат СтруктураНастроек;
			
	КонецЕсли;	
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",      НачалоГода(ТекущаяДата()));
	СтруктураНастроек.Вставить("РабочееМесто");
	СтруктураНастроек.Вставить("Магазин", ПараметрыСеанса.ТекущийМагазин);
	СтруктураНастроек.Вставить("ВыгружатьИнформативныеОстаткиПоСкладам",   Ложь);
	СтруктураНастроек.Вставить("ВыгружатьИнформативныеОстаткиПоМагазинам", Ложь);
	СтруктураНастроек.Вставить("ПередаватьДанныеПослеКаждогоПробитогоЧека", Истина);
	СтруктураНастроек.Вставить("ПрефиксРИБ", ПрефиксНастройкиОбменаДанными());
		
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру значений по умолчению для узла;
// Структура настроек повторяет состав реквизитов шапки плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена
// 
Функция ЗначенияПоУмолчаниюНаУзле() Экспорт
	
	Возврат Новый Структура;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для пользователя;
// Прикладной разработчик на основе установленных отборов на узле должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена,
//                                       полученная при помощи функции НастройкаОтборовНаУзле().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле) Экспорт
	
	Если  ОбменДаннымиПовтИсп.ГлавныйУзел() <> Неопределено
		И НЕ Константы.НастройкаПодчиненногоУзлаРИБЗавершена.Получить() Тогда 
		
		Возврат "";
		
	КонецЕсли;	
						
	ОграничениеДатаНачалаВыгрузкиДокументов = "";
	
	// дата начала выгрузки документов
	Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов) Тогда
				
		НСтрока = НСтр("ru = 'Начиная с %1'");		
		ОграничениеДатаНачалаВыгрузкиДокументов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, Формат(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов, "ДЛФ=DD"));
		
	Иначе
		
		ОграничениеДатаНачалаВыгрузкиДокументов = "За весь период ведения учета в программе";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкаОтборовнаУзле.Магазин) Тогда
				
		ОграничениеОтборПоМагазину = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Только по магазину: %1'"), НастройкаОтборовНаУзле.Магазин);

	Иначе
		
		ОграничениеОтборПоМагазину = НСтр("ru = 'По всем магазинам'");
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(НастройкаОтборовнаУзле.РабочееМесто) Тогда
				
		ОграничениеОтборПоРабочемуМесту = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Только по рабочему месту: %1'"), НастройкаОтборовНаУзле.РабочееМесто);

	Иначе
		
		ОграничениеОтборПоРабочемуМесту = НСтр("ru = 'По всем рабочим местам'");
		
	КонецЕсли;	
              	
	Если НастройкаОтборовНаУзле.ПередаватьДанныеПослеКаждогоПробитогоЧека Тогда
		ОграничениеВыполненияОбменаДанными = НСтр("ru = 'Передавать данные после каждого пробитого чека ККМ'");
	Иначе
		ОграничениеВыполненияОбменаДанными = НСтр("ru = 'Не передавать данные после каждого пробитого чека ККМ'");
	КонецЕсли;	
	
	Если НастройкаОтборовНаУзле.ВыгружатьИнформативныеОстаткиПоСкладам Тогда
			
		Если ЗначениеЗаполнено(НастройкаОтборовнаУзле.Магазин) Тогда
			
			ОграничениеОтборПоСкладамИнформативныхОстатков = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выгружать информативные остатки по складам магазина %1'"),НастройкаОтборовнаУзле.Магазин);
			
		Иначе
			
			ОграничениеОтборПоСкладамИнформативныхОстатков = НСтр("ru = 'Выгружать информативные остатки по складам'");
			
		КонецЕсли;	

	Иначе
		
		ОграничениеОтборПоСкладамИнформативныхОстатков = НСтр("ru = 'Не выгружать информативные остатки по складам'");
		
	КонецЕсли;	
		
	Если НастройкаОтборовНаУзле.ВыгружатьИнформативныеОстаткиПоМагазинам Тогда
		
		ОграничениеОтборПоМагазинамИнформативныхОстатков = НСтр("ru = 'Выгружать информативные остатки по магазинам'");
			
	Иначе
		
		ОграничениеОтборПоМагазинамИнформативныхОстатков = НСтр("ru = 'Не выгружать информативные остатки по магазинам'");
		
	КонецЕсли;	
		
	НастройкаПериферийногоУзла = НСтр("ru = 'Префикс РИБ узла рабочего места: %1'");
	НастройкаПериферийногоУзла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкаПериферийногоУзла, ?(ПустаяСтрока(НастройкаОтборовНаУзле.ПрефиксРИБ), НСтр("ru = 'не задан'"), НастройкаОтборовНаУзле.ПрефиксРИБ));		
	
	НСтрока = НСтр("ru = 'Выгружать документы и справочную информацию:
		|%1,
		|%2,
		|%3.
		|Выгружать информативные остатки:
		|%4,
		|%5.
		|Настройка узла рабочего места:
		|%6,
		|%7.'");
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ОграничениеДатаНачалаВыгрузкиДокументов);
	МассивПараметров.Добавить(ОграничениеОтборПоМагазину);
	МассивПараметров.Добавить(ОграничениеОтборПоРабочемуМесту);
	МассивПараметров.Добавить(ОграничениеОтборПоСкладамИнформативныхОстатков);
	МассивПараметров.Добавить(ОграничениеОтборПоМагазинамИнформативныхОстатков);
	МассивПараметров.Добавить(ОграничениеВыполненияОбменаДанными);	
	МассивПараметров.Добавить(НастройкаПериферийногоУзла);	
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(НСтрока, МассивПараметров);
	
КонецФункции

// Возвращает строку описания значений по умолчанию для пользователя;
// Прикладной разработчик на основе установленных значений по умолчанию на узле должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзле().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле) Экспорт
	
	НСтрока = "";
	МассивПараметров = Новый Массив;
		
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(НСтрока, МассивПараметров);

КонецФункции

//Возвращает признак использования мастера настройки обмена для плана обмена
//
//Возвращаемое значение
//Булево - используется - Истина, не используется - Ложь
Функция ИспользоватьПомощникСозданияОбменаДанными() Экспорт
	
	Возврат Истина;
	
КонецФункции

//Возвращает представление команды создания нового обмена данными.
Функция ЗаголовокКомандыДляСозданияНовогоОбменаДанными() Экспорт
	
	Возврат "Создать новую синхронизацию данных для рабочего места";
	
КонецФункции	

// Возвращает пользовательскую форму для создания начального образа базы.
// Эта форма будет открыта после завершения настройки обмена с помощью помощника.
//
// Возвращаемое значение:
//  Строка, Неогранич - имя формы
Функция ИмяФормыСозданияНачальногоОбраза() Экспорт
	
	Возврат "ПланОбмена.ПоРабочемуМесту.Форма.ФормаСозданияНачальногоОбраза";
	
КонецФункции

// Возвращает массив используемых транспортов сообщений для этого плана обмена
//
// 1. Например, если план обмена поддерживает только два транспорта сообщений FILE и FTP,
// то тело функции следует определить следующим образом:
//
//	Результат = Новый Массив;
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
//	Возврат Результат;
//
// 2. Например, если план обмена поддерживает все транспорты сообщений, определенных в конфигурации,
// то тело функции следует определить следующим образом:
//
//	Возврат ОбменДаннымиСервер.ВсеТранспортыСообщенийОбменаКонфигурации();
//
// Возвращаемое значение:
//  Массив - массив содержит значения перечисления ВидыТранспортаСообщенийОбмена
//
Функция ИспользуемыеТранспортыСообщенийОбмена() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
	
	Возврат Результат;
	
КонецФункции

//Возвращает строку с кратким описанием обмена данными
//
Функция КраткаяИнформацияПоОбмену() Экспорт
	
	ПоясняющийТекст = НСтр("ru = 'Распределенная информационная база представляет собой иерархическую структуру, состоящую из отдельных информационных 
	|баз системы «1С:Предприятие» — узлов распределенной информационной базы, между которыми организована синхронизация 
	|конфигурации и данных. Главной особенностью распределенных информационных баз является передача изменений 
	|конфигурации в подчиненные узлы.
	|РИБ по рабочим местам предоставляет пользователю оптимизированный по объему данных обмен между сервером магазина и кассовой линейкой.
	|Необходимо указать ограничения миграции данных по магазинам.'");
	
	Возврат ПоясняющийТекст;
	
КонецФункции

//Возвращает ссылку на веб-страницу или полный путь к форме внутри конфигурации строкой
//
Функция ПодробнаяИнформацияПоОбмену() Экспорт

	Возврат "http://its.1c.ru/db/metod81#content:4351:1";	

КонецФункции

//	LNK 31.08.2016 14:47:54
Функция ПолучитьДанныеУзла(УзелИнформационнойБазы)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос	= Новый Запрос(
	"ВЫБРАТЬ
	|	""ПоРабочемуМесту"" КАК Имя,
	|	ТаблицаУзлов.Ссылка КАК Узел,
	|	ТаблицаУзлов.Код КАК Код,
	|	ТаблицаУзлов.Наименование КАК Наименование,
	|	ТаблицаУзлов.ПометкаУдаления КАК ПометкаУдаления,
	|	ТаблицаУзлов.НомерПринятого КАК НомерПринятого,
	|	ТаблицаУзлов.НомерОтправленного КАК НомерОтправленного,
	|	ТаблицаУзлов.ВыгружатьИнформативныеОстаткиПоМагазинам КАК ВыгружатьИнформативныеОстаткиПоМагазинам,
	|	ТаблицаУзлов.ВыгружатьИнформативныеОстаткиПоСкладам КАК ВыгружатьИнформативныеОстаткиПоСкладам,
	|	ТаблицаУзлов.ДатаНачалаВыгрузкиДокументов КАК ДатаНачалаВыгрузкиДокументов,
	|	ТаблицаУзлов.Магазин КАК Магазин,
	|	ЕСТЬNULL(ТаблицаУзлов.Магазин.НомерМагазина, 0) КАК НомерМагазина,
	|	ТаблицаУзлов.ПередаватьДанныеПослеКаждогоПробитогоЧека КАК ПередаватьДанныеПослеКаждогоПробитогоЧека,
	|	ТаблицаУзлов.ПрефиксРИБ КАК ПрефиксРИБ,
	|	ТаблицаУзлов.РабочееМесто КАК РабочееМесто,
	|	ТаблицаУзлов.РегистрироватьИзменения КАК РегистрироватьИзменения,
	|	ТаблицаУзлов.ВидУзла КАК ВидУзла,
	|	ЕСТЬNULL(ТаблицаСтруктуры.Ссылка, ЗНАЧЕНИЕ(Справочник.СтруктураУзлов.ПустаяСсылка)) КАК ЭлементСтруктуры
	|ИЗ
	|	ПланОбмена.ПоРабочемуМесту КАК ТаблицаУзлов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураУзлов КАК ТаблицаСтруктуры
	|		ПО ТаблицаУзлов.Код = ТаблицаСтруктуры.Код
	|ГДЕ
	|	ТаблицаУзлов.Ссылка = &ТекущийУзел"
	);
	Запрос.УстановитьПараметр("ТекущийУзел", УзелИнформационнойБазы);

	Результат = Запрос.Выполнить();

	ДанныеУзла = Новый Структура;

	Для каждого Колонка Из Результат.Колонки Цикл

		ДанныеУзла.Вставить(Колонка.Имя, Колонка.ТипЗначения.ПривестиЗначение());

	КонецЦикла;

	Выборка = Результат.Выбрать();

	Если Выборка.Следующий() Тогда

		ЗаполнитьЗначенияСвойств(ДанныеУзла, Выборка);

		Для каждого Колонка Из Результат.Колонки Цикл

			Если Колонка.ТипЗначения.СодержитТип(Тип("ВыборкаИзРезультатаЗапроса")) Тогда

				ДанныеУзла[Колонка.Имя] = Выборка[Колонка.Имя].Выгрузить();

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;
	
	Возврат ДанныеУзла;

КонецФункции // ПолучитьДанныеУзла()


////////////////////////////////////////////////////////////////////////////////
// Обработчики событий для обмена без использования правил обмена

// Обработчик события коллизий изменений объектов.
// Условие возникновения: 
// Событие возникает при загрузке данных,
// в случае коллизии изменений загружаемого объекта.
// Коллизия изменений возникает, когда в информационной базе 
// зарегистрированы изменения для загружаемого объекта.
//
//  Параметры:
// УзелИнформационнойБазы – ПланОбменаСсылка – узел плана обмена для которого выполняется загрузка данных.
// Объект – объект, для которого возникла коллизия изменений.
//
//  Возвращаемое значение:
// Тип: Булево. Истина – загружаемый объект будет записан в информационную базу;
//              Ложь – загружаемый объект записан не будет.
//
Функция ПрименитьОбъектПриКоллизииИзменений(УзелИнформационнойБазы, Объект) Экспорт
	
	Возврат НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел();
	
КонецФункции

// Определяет режим удаления объектов при загрузке данных.
//
// Возвращающее значение:
// Булево. Истина – при получении информации удаления объект будет физически удален из ИБ;
// Ложь – объект будет помечен на удаление.
//
Функция РазрешитьУдалениеОбъектов() Экспорт
	
	Возврат НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел();	//	LNK 26.06.2018 09:33:10
	
КонецФункции

//	LNK 26.06.2018 10:01:40
Функция РазрешитьВыгрузкуУдаленияОбъектов()	Экспорт

	Возврат ОбменДаннымиПовтИсп.ЭтоГлавныйУзел();

КонецФункции // РазрешитьВыгрузкуУдаленияОбъектов()


///////////////////////////////////////////////////////////////////////////////////////
//ФОРМИРОВАНИЕ И СОХРАНЕНИЕ ПАРАМЕТРОВ ОБМЕНА 

// Процедура производит запись в регистр обновленных параметров обмена между узлами
//
Процедура ПриЗаписиТранспортаОбмена(Источник, Отказ) Экспорт
			
	Если Отказ
		ИЛИ ЗначениеЗаполнено(ПланыОбмена.ПоРабочемуМесту.ЭтотУзел().РабочееМесто) Тогда		
		Возврат;                                                                        		
	КонецЕсли;
	
	Если ТипЗнч(Источник.Отбор.Узел.Значение) = Тип("ПланОбменаСсылка.ПоРабочемуМесту") 
		И Источник.Отбор.Узел.Значение <> ПланыОбмена.ПоМагазину.ЭтотУзел() Тогда
		
		Узел = Источник.Отбор.Узел.Значение;
		
		СтруктураПараметров = Новый Структура;
		ПараметрыТранспортаОбмена = ?(Источник.Количество() > 0, Источник[0], Неопределено);
		
		Если ПараметрыТранспортаОбмена <> Неопределено Тогда
			Для каждого Ресурс Из Источник.Метаданные().Ресурсы Цикл
				СтруктураПараметров.Вставить(Ресурс.Имя, ПараметрыТранспортаОбмена[Ресурс.Имя]);
			КонецЦикла;				
			СтруктураПараметров.Вставить("ПрефиксРИБ", Узел.ПрефиксРИБ);			
		КонецЕсли;
		
		ЗаписатьТранспортОбменаПоРабочемуМесту(Узел.Код, СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает структуру настроек по коду узла обмена
//
Функция ПолучитьСтруктуруСценарияОбмена(КодУзлаОбмена) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СценарииОбменаРабочихМест.EMAILМаксимальныйДопустимыйРазмерСообщения,
	|	СценарииОбменаРабочихМест.EMAILСжиматьФайлИсходящегоСообщения,
	|	СценарииОбменаРабочихМест.EMAILУчетнаяЗапись,
	|	СценарииОбменаРабочихМест.FILEКаталогОбменаИнформацией,
	|	СценарииОбменаРабочихМест.FILEСжиматьФайлИсходящегоСообщения,
	|	СценарииОбменаРабочихМест.FTPСжиматьФайлИсходящегоСообщения,
	|	СценарииОбменаРабочихМест.FTPСоединениеМаксимальныйДопустимыйРазмерСообщения,
	|	СценарииОбменаРабочихМест.FTPСоединениеПароль,
	|	СценарииОбменаРабочихМест.FTPСоединениеПассивноеСоединение,
	|	СценарииОбменаРабочихМест.FTPСоединениеПользователь,
	|	СценарииОбменаРабочихМест.FTPСоединениеПорт,
	|	СценарииОбменаРабочихМест.FTPСоединениеПуть,
	|	СценарииОбменаРабочихМест.ВидТранспортаСообщенийОбменаПоУмолчанию,
	|	СценарииОбменаРабочихМест.ВыполнятьОбменВРежимеОтладки,
	|	СценарииОбменаРабочихМест.ИмяФайлаПротоколаОбмена,
	|	СценарииОбменаРабочихМест.ПарольАрхиваСообщенияОбмена,
	|	СценарииОбменаРабочихМест.ПрефиксРИБ	
	|ИЗ
	|	РегистрСведений.СценарииОбменаРабочихМест КАК СценарииОбменаРабочихМест
	|ГДЕ
	|	СценарииОбменаРабочихМест.КодУзлаОбмена = &КодУзлаОбмена");
	Запрос.УстановитьПараметр("КодУзлаОбмена", КодУзлаОбмена);
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	СтруктураНастроек = Новый Структура;
	Если ТаблицаНастроек.Количество() > 0 Тогда
		Для каждого Колонка Из ТаблицаНастроек.Колонки Цикл
			СтруктураНастроек.Вставить(Колонка.Имя, ТаблицаНастроек[0][Колонка.Имя]);
		КонецЦикла;	
	КонецЕсли;
	
	Возврат СтруктураНастроек;
	
КонецФункции

Процедура ЗаписатьТранспортОбменаПоРабочемуМесту(КодУзлаОбмена = "", СтруктураПараметров) Экспорт
	
	НаборЗаписей = РегистрыСведений.СценарииОбменаРабочихМест.СоздатьНаборЗаписей();
	
	Если ЗначениеЗаполнено(КодУзлаОбмена) Тогда
		
		НаборЗаписей.Отбор.КодУзлаОбмена.Установить(КодУзлаОбмена);
		
	КонецЕсли;
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.КодУзлаОбмена = КодУзлаОбмена;
		
	Иначе
		
		ЗаписьНабора = НаборЗаписей[0];
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЗаписьНабора, СтруктураПараметров);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Процедура создает/обоновляет настройки обмена (и настройки выполнения) в узле рабочего места
//
Процедура ОбновитьСценарииОбменаУзла(Узел, КодУзлаОбмена) Экспорт
		
	Если НЕ Узел.Пустая() Тогда
		СтруктураНастроек = ПолучитьСтруктуруСценарияОбмена(КодУзлаОбмена);
		Если СтруктураНастроек.Количество() > 0 
			И СценарийОбменаНеЗадан(КодУзлаОбмена) Тогда
							
			СценарийОбмена = Справочники.СценарииОбменовДанными.СоздатьЭлемент();
			СценарийОбмена.УстановитьНовыйКод();
			СценарийОбмена.Наименование = НСтр("ru = 'Обмен с главным узлом'");
			
			НастройкаОбмена = СценарийОбмена.НастройкиОбмена.Добавить();
			НастройкаОбмена.УзелИнформационнойБазы = Узел;
			НастройкаОбмена.ВидТранспортаОбмена = СтруктураНастроек.ВидТранспортаСообщенийОбменаПоУмолчанию;
			НастройкаОбмена.ВыполняемоеДействие = Перечисления.ДействияПриОбмене.ЗагрузкаДанных;
			
			НастройкаОбмена = СценарийОбмена.НастройкиОбмена.Добавить();
			НастройкаОбмена.УзелИнформационнойБазы = Узел;
			НастройкаОбмена.ВидТранспортаОбмена = СтруктураНастроек.ВидТранспортаСообщенийОбменаПоУмолчанию;
			НастройкаОбмена.ВыполняемоеДействие = Перечисления.ДействияПриОбмене.ВыгрузкаДанных;
			
			СценарийОбмена.Записать();                          		
			
			НаборЗаписей = РегистрыСведений.НастройкиТранспортаОбмена.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Узел.Установить(Узел);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			Запись = НаборЗаписей.Добавить();
			Запись.Узел = Узел;
			ЗаполнитьЗначенияСвойств(Запись, СтруктураНастроек);		
			НаборЗаписей.Записать();
			
			Если ЗначениеЗаполнено(СтруктураНастроек.ПрефиксРИБ) Тогда
				Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Установить(СтруктураНастроек.ПрефиксРИБ);				
			КонецЕсли;				 			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СценарийОбменаНеЗадан(КодУзлаОбмена)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	СценарииОбменовДаннымиНастройкиОбмена.Ссылка
	|ИЗ
	|	Справочник.СценарииОбменовДанными.НастройкиОбмена КАК СценарииОбменовДаннымиНастройкиОбмена
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.ПоРабочемуМесту КАК ПоРабочемуМесту
	|		ПО СценарииОбменовДаннымиНастройкиОбмена.УзелИнформационнойБазы = ПоРабочемуМесту.Ссылка
	|ГДЕ
	|	ПоРабочемуМесту.Код = &КодУзлаОбмена");
	Запрос.УстановитьПараметр("КодУзлаОбмена", КодУзлаОбмена);
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции	

//Процедура выполняется при обновлении информационной базы рабочего места
//
Процедура ОбновитьСценарииОбмена() Экспорт
	
	Если ОбменДаннымиПовтИсп.ГлавныйУзел() <> Неопределено 
		И ТипЗнч(ОбменДаннымиПовтИсп.ГлавныйУзел()) = Тип("ПланОбменаСсылка.ПоРабочемуМесту") Тогда
			
		ВыборкаУзлов = ПланыОбмена.ПоРабочемуМесту.Выбрать();
		Пока ВыборкаУзлов.Следующий() Цикл
			Если ВыборкаУзлов.Ссылка <> ПланыОбмена.ПоРабочемуМесту.ЭтотУзел() Тогда
				ОбновитьСценарииОбменаУзла(ВыборкаУзлов.Ссылка, ПланыОбмена.ПоРабочемуМесту.ЭтотУзел().Код);               				
			КонецЕсли;	
		КонецЦикла;	
		Константы.НастройкаПодчиненногоУзлаРИБЗавершена.Установить(Истина);
		
	КонецЕсли;	
	
КонецПроцедуры	


///////////////////////////////////////////////////////////////////////////////////////
//ОПРЕДЕЛЕНИЕ ПАРАМЕТРОВ ИБ В РИБ 

Функция ЭтоРабочееМесто() Экспорт
	
	ПериферийныйУзел = Ложь;
	
	Если ОбменДаннымиВызовСервера.ОбменДаннымиВключен("ПоРабочемуМесту") 
		И ЗначениеЗаполнено(ПланыОбмена.ПоРабочемуМесту.ЭтотУзел().РабочееМесто) Тогда
		
		ПериферийныйУзел = Истина;
		
	Иначе
		
		ПериферийныйУзел = Ложь;
		
	КонецЕсли;
	
	Возврат ПериферийныйУзел;
	
КонецФункции

Функция ПередаватьДанныеПослеПробитияЧекаККМ() Экспорт
	
	ПередаватьДанные = Ложь;
	Если ПланыОбмена.ПоРабочемуМесту.ЭтоРабочееМесто()
		И ПланыОбмена.ПоРабочемуМесту.ЭтотУзел().ПередаватьДанныеПослеКаждогоПробитогоЧека Тогда
		
		ПередаватьДанные = Истина;
		
	КонецЕсли;	
	
	Возврат ПередаватьДанные;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ РАБОТЫ ОБМЕНА ЧЕРЕЗ ВНЕШНЕЕ СОЕДИНЕНИЕ

// Возвращает структуру отборов на узле плана обмена базы корреспондента с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена базы корреспондента
// 
Функция НастройкаОтборовНаУзлеБазыКорреспондента() Экспорт
	
	Возврат Новый Структура;
	
КонецФункции

// Возвращает структуру значений по умолчению для узла базы корреспондента;
// Структура настроек повторяет состав реквизитов шапки плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента
//
Функция ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента() Экспорт
	
	Возврат Новый Структура;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных отборов на узле базы корреспондента должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена базы корреспондента,
//                                       полученная при помощи функции НастройкаОтборовНаУзлеБазыКорреспондента().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанныхБазыКорреспондента(НастройкаОтборовНаУзле) Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает строку описания значений по умолчанию для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных значений по умолчанию на узле базы корреспондента должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ЗначенияПоУмолчаниюНаУзле) Экспорт
	
	Возврат "";
	
КонецФункции

