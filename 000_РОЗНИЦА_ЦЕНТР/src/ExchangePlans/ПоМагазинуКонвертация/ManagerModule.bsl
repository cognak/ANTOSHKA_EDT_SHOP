////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает признак использования плана обмена для организации обмена в модели сервиса.
//  Если признак установлен, то в сервисе можно включить обмен данными
//  с использованием этого плана обмена.
//  Если признак не установлен, то план обмена будет использоваться только 
//  для обмена в локальном режиме работы конфигурации.
// 
Функция ПланОбменаИспользуетсяВМоделиСервиса() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак того, что план обмена поддерживает обмен данными с корреспондентом, работающим в модели сервиса.
// Если признак установлен, то становится возможным создать обмен данными когда эта информационная база
// работает в локальном режиме, а корреспондент в модели сервиса.
//
Функция КорреспондентВМоделиСервиса() Экспорт
	
	Возврат Ложь;
	
КонецФункции

Функция ОбщиеДанныеУзлов() Экспорт
	
	Возврат "";
	
КонецФункции

Функция ПояснениеДляНастройкиПараметровУчета() Экспорт
	
	Возврат "";
	
КонецФункции

Функция ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента() Экспорт
	
	Возврат "";
	
КонецФункции

Процедура ОбработчикПроверкиПараметровУчета(Отказ, Получатель, Сообщение) Экспорт
	
	
	
КонецПроцедуры

// Возвращает префикс кода настройки выполнения обмена данными;
// Длина префикса не должна превышать один символ;
// Это значение должно быть одинаковым в плане обмена источника и приемника.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка, 1 - префикс кода настройки выполнения обмена данными
// 
Функция ПрефиксНастройкиОбменаДанными() Экспорт
	
	Возврат "М";
	
КонецФункции

// Возвращает имя файла настроек по умолчанию;
// В этот файл будут выгружены настройки обмена для приемника;
// Это значение должно быть одинаковым в плане обмена источника и приемника.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка, 255 - имя файла по умолчанию для выгрузки настроек обмена данными
//
Функция ИмяФайлаНастроекДляПриемника() Экспорт
	
	Возврат "Настройки обмена для магазина";
	
КонецФункции

// Определяет несколько вариантов настройки расписания выполнения обмена данными;
// Рекомендуется указывать не более 3 вариантов;
// Эти варианты должны быть одинаковым в плане обмена источника и приемника.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  ВариантыНастройки - СписокЗначений - список расписаний обмена данными
//
Функция ВариантыНастройкиРасписания() Экспорт
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	// Расписание №1
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	
	Расписание1 = Новый РасписаниеРегламентногоЗадания;
	Расписание1.ДниНедели                = ДниНедели;
	Расписание1.ПериодПовтораВТечениеДня = 900; // 15 минут
	Расписание1.ПериодПовтораДней        = 1; // каждый день
	Расписание1.Месяцы                   = Месяцы;
	
	// Расписание №2
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание2 = Новый РасписаниеРегламентногоЗадания;
	Расписание2.ВремяНачала              = Дата('00010101080000');
	Расписание2.ВремяКонца               = Дата('00010101200000');
	Расписание2.ПериодПовтораВТечениеДня = 3600; // каждый час
	Расписание2.ПериодПовтораДней        = 1; // каждый день
	Расписание2.ДниНедели                = ДниНедели;
	Расписание2.Месяцы                   = Месяцы;
	
	// Расписание №3
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	
	Расписание3 = Новый РасписаниеРегламентногоЗадания;
	Расписание3.ДниНедели         = ДниНедели;
	Расписание3.ВремяНачала       = Дата('00010101020000');
	Расписание3.ПериодПовтораДней = 1; // каждый день
	Расписание3.Месяцы            = Месяцы;
	
	// возвращаемое значение функции
	ВариантыНастройки = Новый СписокЗначений;
	
	ВариантыНастройки.Добавить(Расписание1, "Один раз в 15 минут, кроме субботы и воскресенья");
	ВариантыНастройки.Добавить(Расписание2, "Каждый час с 8:00 до 20:00, ежедневно");
	ВариантыНастройки.Добавить(Расписание3, "Каждую ночь в 2:00, кроме субботы и воскресенья");
	
	Возврат ВариантыНастройки;
КонецФункции

// Определяет версию платформы базы-приемника для создания СОМ-подключения;
// Возможные варианты возвращаемого значения: "V81"; "V82"; "V83"
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка, 3 - версия платформы базы-приемника (V81; V82; V83)
//
Функция ВерсияПлатформыИнформационнойБазы() Экспорт
	
	Возврат "V83";
	
КонецФункции

// Возвращает структуру отборов на узле плана обмена с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена
// 
Функция НастройкаОтборовНаУзле() Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",      НачалоГода(ТекущаяДата()));	
	СтруктураТабличнойЧастиМагазины = Новый Структура;
	СтруктураТабличнойЧастиМагазины.Вставить("Магазин", Новый Массив);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",       НачалоГода(ТекущаяДата()));
	СтруктураНастроек.Вставить("РежимВыгрузкиИнформативныхОстатков", Перечисления.РежимыВыгрузкиИнформативныхОстатков.НеВыгружать);
	СтруктураНастроек.Вставить("Магазины",                           СтруктураТабличнойЧастиМагазины);
	СтруктураНастроек.Вставить("МагазиныИнформативныхОстатков",      СтруктураТабличнойЧастиМагазины);
		
	Возврат СтруктураНастроек;

КонецФункции

// Возвращает структуру значений по умолчению для узла;
// Структура настроек повторяет состав реквизитов шапки плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена
// 
Функция ЗначенияПоУмолчаниюНаУзле() Экспорт
	
	Возврат Новый Структура;

КонецФункции

// Возвращает строку описания ограничений миграции данных для пользователя;
// Прикладной разработчик на основе установленных отборов на узле должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена,
//                                       полученная при помощи функции НастройкаОтборовНаУзле().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле) Экспорт
	
	ОграничениеДатаНачалаВыгрузкиДокументов = "";
	
	// дата начала выгрузки документов
	Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов) Тогда
		
		НСтрока = НСтр("ru = 'Начиная с %1'");
		
		ОграничениеДатаНачалаВыгрузкиДокументов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, Формат(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов, "ДЛФ=DD"));
		
	Иначе
		
		ОграничениеДатаНачалаВыгрузкиДокументов = "За весь период ведения учета в программе";
		
	КонецЕсли;	
	
	// отбор по магазинам
	Если НастройкаОтборовНаУзле.Магазины.Магазин.Количество() > 0 Тогда
		
		СтрокаПредставленияОтбора = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(НастройкаОтборовНаУзле.Магазины.Магазин, "; ");
		НСтрока = НСтр("ru = 'Только по магазинам: %1'");
		ОграничениеОтборПоМагазинам = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, СтрокаПредставленияОтбора);
				
	Иначе
		
		ОграничениеОтборПоМагазинам = НСтр("ru = 'По всем магазинам'");
		
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ИндивидуальнаяНастройка Тогда
		
		СтрокаПредставленияОтбора = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(НастройкаОтборовНаУзле.МагазиныИнформативныхОстатков.Магазин, "; ");
		НСтрока = НСтр("ru = 'Информативные остатки товаров только по магазинам: %1'");
		ОграничениеОтборПоМагазинамИнформативныхОстатков = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, СтрокаПредставленияОтбора);
		
	ИначеЕсли НастройкаОтборовНаУзле.РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.НеВыгружать Тогда	
		
		ОграничениеОтборПоМагазинамИнформативныхОстатков = НСтр("ru = 'Не выгружать информативные остатки товаров'");
		
	ИначеЕсли НастройкаОтборовНаУзле.РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ВыгружатьПоВсемМагазинам Тогда	
		
		
		ОграничениеОтборПоМагазинамИнформативныхОстатков = НСтр("ru = 'Информативные остатки товаров по всем магазинам'");
		
	Иначе
		
		ОграничениеОтборПоМагазинамИнформативныхОстатков = "";
		
	КонецЕсли;	
	
	
	НСтрока = НСтр("ru = 'Выгружать документы и справочную информацию:
		|%1,
		|%2,
		|%3.'");
			
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ОграничениеДатаНачалаВыгрузкиДокументов);
	МассивПараметров.Добавить(ОграничениеОтборПоМагазинам);
	МассивПараметров.Добавить(ОграничениеОтборПоМагазинамИнформативныхОстатков);
		
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(НСтрока, МассивПараметров);

КонецФункции

// Возвращает строку описания значений по умолчанию для пользователя;
// Прикладной разработчик на основе установленных значений по умолчанию на узле должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзле().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле) Экспорт
	
	НСтрока = "";
	МассивПараметров = Новый Массив;
		
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(НСтрока, МассивПараметров);

КонецФункции

//Возвращает признак использования мастера настройки обмена для плана обмена
//
//Возвращаемое значение
//Булево - используется - Истина, не используется - Ложь
Функция ИспользоватьПомощникСозданияОбменаДанными() Экспорт
	
	Возврат Истина;
	
КонецФункции

//Возвращает представление команды создания нового обмена данными.
Функция ЗаголовокКомандыДляСозданияНовогоОбменаДанными() Экспорт
	
	Возврат "Создать новую синхронизацию данных для магазина";
	
КонецФункции	

// Возвращает пользовательскую форму для создания начального образа базы.
// Эта форма будет открыта после завершения настройки обмена с помощью помощника.
//
// Возвращаемое значение:
//  Строка, Неогранич - имя формы
Функция ИмяФормыСозданияНачальногоОбраза() Экспорт
	
	Возврат "ПланОбмена.ПоМагазинуКонвертация.Форма.ФормаСозданияНачальногоОбраза";
	
КонецФункции

// Возвращает массив используемых транспортов сообщений для этого плана обмена
//
// 1. Например, если план обмена поддерживает только два транспорта сообщений FILE и FTP,
// то тело функции следует определить следующим образом:
//
//	Результат = Новый Массив;
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
//	Возврат Результат;
//
// 2. Например, если план обмена поддерживает все транспорты сообщений, определенных в конфигурации,
// то тело функции следует определить следующим образом:
//
//	Возврат ОбменДаннымиСервер.ВсеТранспортыСообщенийОбменаКонфигурации();
//
// Возвращаемое значение:
//  Массив - массив содержит значения перечисления ВидыТранспортаСообщенийОбмена
//
Функция ИспользуемыеТранспортыСообщенийОбмена() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
	
	Возврат Результат;
	
КонецФункции

//Возвращает строку с кратким описанием обмена данными
//
Функция КраткаяИнформацияПоОбмену() Экспорт
	
	ПоясняющийТекст = НСтр("ru = 'Распределенная информационная база представляет собой иерархическую структуру, состоящую из отдельных информационных 
	|баз системы «1С:Предприятие» — узлов распределенной информационной базы, между которыми организована синхронизация 
	|конфигурации и данных. Главной особенностью распределенных информационных баз является передача изменений 
	|конфигурации в подчиненные узлы.
	|РИБ по магазину предназначен для автоматизации распределённой розничной сети магазинов.
	|Необходимо указать ограничения миграции данных по магазинам.'");
	
	Возврат ПоясняющийТекст;
	
КонецФункции

//Возвращает ссылку на веб-страницу или полный путь к форме внутри конфигурации строкой
//
Функция ПодробнаяИнформацияПоОбмену() Экспорт

	Возврат "http://its.1c.ru/db/metod81#content:4352:1";	

КонецФункции

Функция ПолучитьУсловияПоОстаткамВРИБ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметров = Новый Структура;
	Если ПараметрыСеанса.ИспользуемыеПланыОбмена.Найти("ПоМагазину") <> Неопределено
		И ПланыОбмена.ПоМагазину.ЭтотУзел().Магазины.Количество() <> 0 Тогда
		
		МассивМагазинов = ПланыОбмена.ПоМагазину.ЭтотУзел().Магазины.ВыгрузитьКолонку("Магазин");
		СтруктураПараметров.Вставить("ИспользоватьОстаткиПоМагазинам", Истина);
		СтруктураПараметров.Вставить("ИспользоватьОстаткиПоСкладам"  , Ложь);
		СтруктураПараметров.Вставить("ОграничениеРИБПоМагазинам"     , МассивМагазинов);
		СтруктураПараметров.Вставить("ОграничениеРИБПоСкладам"       , Новый Массив);
				
	ИначеЕсли ОбменДаннымиВызовСервера.ГлавныйУзел() = Неопределено Тогда
		
		СтруктураПараметров.Вставить("ИспользоватьОстаткиПоМагазинам", Ложь);
		СтруктураПараметров.Вставить("ИспользоватьОстаткиПоСкладам"  , Ложь);
		СтруктураПараметров.Вставить("ОграничениеРИБПоМагазинам"     , Новый Массив);
		СтруктураПараметров.Вставить("ОграничениеРИБПоСкладам"       , Новый Массив);
				
	ИначеЕсли ПараметрыСеанса.ИспользуемыеПланыОбмена.Найти("ПоРабочемуМесту") <> Неопределено 
		И ПланыОбмена.ПоРабочемуМесту.ЭтоРабочееМесто() Тогда
		
		МассивМагазинов = Новый Массив;
		МассивМагазинов.Добавить(ПланыОбмена.ПоРабочемуМесту.ЭтотУзел().Магазин); 		
				
		СтруктураПараметров.Вставить("ИспользоватьОстаткиПоМагазинам", Истина);
		СтруктураПараметров.Вставить("ИспользоватьОстаткиПоСкладам"  , Истина);
		СтруктураПараметров.Вставить("ОграничениеРИБПоМагазинам"     , Новый Массив);
		СтруктураПараметров.Вставить("ОграничениеРИБПоСкладам"       , МассивМагазинов);
				
	Иначе
		
		СтруктураПараметров.Вставить("ИспользоватьОстаткиПоМагазинам", Ложь);
		СтруктураПараметров.Вставить("ИспользоватьОстаткиПоСкладам"  , Ложь);
		СтруктураПараметров.Вставить("ОграничениеРИБПоМагазинам"     , Новый Массив);
		СтруктураПараметров.Вставить("ОграничениеРИБПоСкладам"       , Новый Массив);
				
	КонецЕсли;  	
	УстановитьПривилегированныйРежим(Ложь);
	Возврат СтруктураПараметров;
	
КонецФункции

//	LNK 31.08.2016 14:47:54
Функция ПолучитьДанныеУзла(УзелИнформационнойБазы)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос	= Новый Запрос(
	"ВЫБРАТЬ
	|	""ПоМагазинуКонвертация"" КАК Имя,
	|	ТаблицаУзлов.Ссылка КАК Узел,
	|	ТаблицаУзлов.Код КАК Код,
	|	ТаблицаУзлов.Наименование КАК Наименование,
	|	ТаблицаУзлов.ПометкаУдаления КАК ПометкаУдаления,
	|	ТаблицаУзлов.НомерОтправленного КАК НомерОтправленного,
	|	ТаблицаУзлов.НомерПринятого КАК НомерПринятого,
	|	ТаблицаУзлов.ДатаНачалаВыгрузкиДокументов КАК ДатаНачалаВыгрузкиДокументов,
	|	ТаблицаУзлов.РежимВыгрузкиИнформативныхОстатков КАК РежимВыгрузкиИнформативныхОстатков,
	|	ТаблицаУзлов.РегистрироватьИзменения КАК РегистрироватьИзменения,
	|	ТаблицаУзлов.Магазин КАК Магазин,
	|	ЕСТЬNULL(ТаблицаУзлов.Магазин.НомерМагазина, 0) КАК НомерМагазина,
	|	ТаблицаУзлов.ВидУзла КАК ВидУзла,
	|	ЕСТЬNULL(ТаблицаСтруктуры.Ссылка, ЗНАЧЕНИЕ(Справочник.СтруктураУзлов.ПустаяСсылка)) КАК ЭлементСтруктуры,
	|	ТаблицаУзлов.Магазины.(
	|		НомерСтроки КАК НомерСтроки,
	|		Магазин КАК Магазин
	|	) КАК Магазины,
	|	ТаблицаУзлов.МагазиныИнформативныхОстатков.(
	|		НомерСтроки КАК НомерСтроки,
	|		Магазин КАК Магазин
	|	) КАК МагазиныИнформативныхОстатков
	|ИЗ
	|	ПланОбмена.ПоМагазинуКонвертация КАК ТаблицаУзлов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураУзлов КАК ТаблицаСтруктуры
	|		ПО ТаблицаУзлов.Код = ТаблицаСтруктуры.Код
	|ГДЕ
	|	ТаблицаУзлов.Ссылка = &ТекущийУзел"
	);
	Запрос.УстановитьПараметр("ТекущийУзел", УзелИнформационнойБазы);

	Результат = Запрос.Выполнить();

	ДанныеУзла = Новый Структура;

	Для каждого Колонка Из Результат.Колонки Цикл

		ДанныеУзла.Вставить(Колонка.Имя, Колонка.ТипЗначения.ПривестиЗначение());

	КонецЦикла;

	Выборка = Результат.Выбрать();

	Если Выборка.Следующий() Тогда

		ЗаполнитьЗначенияСвойств(ДанныеУзла, Выборка);

		Для каждого Колонка Из Результат.Колонки Цикл

			Если Колонка.ТипЗначения.СодержитТип(Тип("РезультатЗапроса")) Тогда

				ДанныеУзла[Колонка.Имя] = Выборка[Колонка.Имя].Выгрузить();

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;
	
	Возврат ДанныеУзла;

КонецФункции // ПолучитьДанныеУзла()


////////////////////////////////////////////////////////////////////////////////
// Обработчики событий для обмена без использования правил обмена

// Обработчик события коллизий изменений объектов.
// Условие возникновения: 
// Событие возникает при загрузке данных,
// в случае коллизии изменений загружаемого объекта.
// Коллизия изменений возникает, когда в информационной базе 
// зарегистрированы изменения для загружаемого объекта.
//
//  Параметры:
// УзелИнформационнойБазы – ПланОбменаСсылка – узел плана обмена для которого выполняется загрузка данных.
// Объект – объект, для которого возникла коллизия изменений.
//
//  Возвращаемое значение:
// Тип: Булево. Истина – загружаемый объект будет записан в информационную базу;
//              Ложь – загружаемый объект записан не будет.
//
Функция ПрименитьОбъектПриКоллизииИзменений(УзелИнформационнойБазы, Объект) Экспорт
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.СтруктураУзлов") Тогда

	//	Реквизиты (различные!) объекта могут одновременно заполняться и в периферии, и в ЦБ.
	//	В обработчике "ПередЗаписью" имеется процедура сохранения целевых значений...
	//	Тут главное - не перепутать, что и когда.
		Разрешение = Истина;

	Иначе

		Разрешение = НЕ ОбменДаннымиВызовСервера.ЭтоГлавныйУзел();

	КонецЕсли;

	Возврат Разрешение;
	
КонецФункции

// Определяет режим удаления объектов при загрузке данных.
//
// Возвращающее значение:
// Булево. Истина – при получении информации удаления объект будет физически удален из ИБ;
// Ложь – объект будет помечен на удаление.
//
Функция РазрешитьУдалениеОбъектов() Экспорт
	
	Возврат НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел();	//	LNK 26.06.2018 09:33:10
	
КонецФункции

//	LNK 26.06.2018 10:01:40
Функция РазрешитьВыгрузкуУдаленияОбъектов()	Экспорт

	Возврат ОбменДаннымиПовтИсп.ЭтоГлавныйУзел();

КонецФункции // РазрешитьВыгрузкуУдаленияОбъектов()

//////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ РАБОТЫ ОБМЕНА ЧЕРЕЗ ВНЕШНЕЕ СОЕДИНЕНИЕ

// Возвращает структуру отборов на узле плана обмена базы корреспондента с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена базы корреспондента
// 
Функция НастройкаОтборовНаУзлеБазыКорреспондента() Экспорт
	
	Возврат Новый Структура;
	
КонецФункции

// Возвращает структуру значений по умолчению для узла базы корреспондента;
// Структура настроек повторяет состав реквизитов шапки плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента
//
Функция ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента() Экспорт
	
	Возврат Новый Структура;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных отборов на узле базы корреспондента должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена базы корреспондента,
//                                       полученная при помощи функции НастройкаОтборовНаУзлеБазыКорреспондента().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанныхБазыКорреспондента(НастройкаОтборовНаУзле) Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает строку описания значений по умолчанию для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных значений по умолчанию на узле базы корреспондента должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ЗначенияПоУмолчаниюНаУзле) Экспорт
	
	Возврат "";
	
КонецФункции

