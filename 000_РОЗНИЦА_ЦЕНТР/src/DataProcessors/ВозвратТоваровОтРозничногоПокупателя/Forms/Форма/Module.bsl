
&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ЗначениеСправочникиВидыОплатЧекаККМОплатаПодарочнымСертификатом;

&НаКлиенте
Перем ЗначениеТипОплатыНаличные;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

&НаСервере
Функция ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента) Экспорт
	
	Если НЕ СтруктураПараметров.НеизвестныеДанныеПО Тогда
		
		Если СтруктураПараметров.Действие = "ПроверкаВесовыхТоваров" Тогда
			
			ДобавитьНайденныеПозицииТоваров(СтруктураПараметров.ЗначенияПоиска[0]);
			СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
			СтруктураПараметровКлиента.Вставить("ДобавленТовар");
			
		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаТоваров" Тогда
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				
				Если СтруктураПараметров.ЗначенияПоиска.Количество() = 1 Тогда
					
					ДобавитьНайденныеПозицииТоваров(СтруктураПараметров.ЗначенияПоиска[0]);
					СтруктураПараметровКлиента.Вставить("ДобавленТовар");
					
				Иначе
					
					ТаблицаТоваров = Новый ТаблицаЗначений;
					ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
					ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
					ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
					
					Для каждого ЗначениеПоиска Из СтруктураПараметров.ЗначенияПоиска Цикл
						ТекущаяСтрока = ТаблицаТоваров.Добавить();
						ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначениеПоиска);
					КонецЦикла;
					
					СтруктураПараметровКлиента.Вставить("ВыборТоваров", ПоместитьВоВременноеХранилище(ТаблицаТоваров));
					
				КонецЕсли;
				
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				
			КонецЕсли;
		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаСерийныхНомеров" Тогда
			
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				
				ОперацияВыполнена = ДобавитьНайденныеСерийныеНомера(СтруктураПараметров.ЗначенияПоиска);
				
				Если НЕ ОперацияВыполнена Тогда
					СтруктураПараметровКлиента.Вставить("ТекстПредупреждения",НСтр("ru = 'По считанному штрихкоду определен номер подарочного сертификата.
						|Он уже присутствует в документе.
						|Повторный ввод данных не требуется.'"));

				КонецЕсли;
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				
			КонецЕсли;
		
		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаКарт" Тогда
			КоличествоКарт = СтруктураПараметров.ЗначенияПоиска.Количество();
			Если КоличествоКарт = 1 Тогда
				ИнформационнаяКарта = СтруктураПараметров.ЗначенияПоиска[0].ИнформационнаяКарта;
				Если ЗначениеЗаполнено(ИнформационнаяКарта) Тогда
					Если ИнформационнаяКарта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная Тогда
						Объект.ДисконтнаяКарта = ИнформационнаяКарта;
						СтруктураПараметровКлиента.Вставить("НайденаДисконтнаяКарта");
						Модифицированность = Истина;
					Иначе
						
						СтруктураПараметровКлиента.Вставить("ТекстПредупреждения",НСтр("ru = 'По считанному штрихкоду определена регистрационная карта. 
						|Ввод данных о регистрационной карте в документе не предусмотрен.'"));
					КонецЕсли;
					СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				КонецЕсли;
			ИначеЕсли КоличествоКарт > 1 Тогда
				МассивТиповВладельцев = Новый Массив;
				МассивТиповВладельцев.Добавить(Тип("СправочникСсылка.Контрагенты"));
				МассивТиповВладельцев.Добавить(Тип("СправочникСсылка.Пользователи"));
				МассивТиповВладельцев.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
				ТаблицаКарт = Новый ТаблицаЗначений;
				ТаблицаКарт.Колонки.Добавить("ИнформационнаяКарта", Новый ОписаниеТипов("СправочникСсылка.ИнформационныеКарты"));
				ТаблицаКарт.Колонки.Добавить("ВладелецКарты", Новый ОписаниеТипов(МассивТиповВладельцев));
				
				Для каждого ЗначениеПоиска Из СтруктураПараметров.ЗначенияПоиска Цикл
					ТекущаяСтрока = ТаблицаКарт.Добавить();
					ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначениеПоиска);
				КонецЦикла;
				
				СтруктураПараметровКлиента.Вставить("ВыборКарт", ПоместитьВоВременноеХранилище(ТаблицаКарт));
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
			КонецЕсли;
		ИначеЕсли СтруктураПараметров.Действие = "РегистрацияНовойКарты" Тогда
			
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				
				Если СтруктураПараметров.ЗначенияПоиска.Количество() > 1 Тогда
					
					ТаблицаШаблонов = Новый ТаблицаЗначений;
					ТаблицаШаблонов.Колонки.Добавить("ТипШтрихкода");
					ТаблицаШаблонов.Колонки.Добавить("КодКарты");
					
					Для каждого КлючИЗначение Из СтруктураПараметров.ЗначенияПоиска[0] Цикл
						ТаблицаШаблонов.Колонки.Добавить(КлючИЗначение.Ключ);
					КонецЦикла;
					
					Для каждого ЗначениеПоиска Из СтруктураПараметров.ЗначенияПоиска Цикл
						ТекущаяСтрока = ТаблицаШаблонов.Добавить();
						ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначениеПоиска);
					КонецЦикла;
					ТаблицаШаблонов.ЗаполнитьЗначения(СтруктураПараметров.ТипШтрихкода, "ТипШтрихкода");
					ТаблицаШаблонов.ЗаполнитьЗначения(СтруктураПараметров.КодКарты, "КодКарты");
					СтруктураПараметровКлиента.Вставить("РегистрацияНовойКартыВыборШаблона", ПоместитьВоВременноеХранилище(ТаблицаШаблонов, Новый УникальныйИдентификатор()));
					
					ТекстВопроса = НСтр("ru = 'Создать новую информационную карту? Карта %КодКарты%.'");
					ТекстВопроса = СтрЗаменить(ТекстВопроса, "%КодКарты%", СтруктураПараметров.КодКарты);
					
					СтруктураПараметровКлиента.Вставить("ТекстВопросаНовойКарты", ТекстВопроса);
				Иначе
					СтруктураПараметровКлиентаРегистрацииНовойКарты = СтруктураПараметров.ЗначенияПоиска[0];
					СтруктураПараметровКлиентаРегистрацииНовойКарты.Вставить("ТипШтрихкода", СтруктураПараметров.ТипШтрихкода);
					СтруктураПараметровКлиентаРегистрацииНовойКарты.Вставить("КодКарты"    , СтруктураПараметров.КодКарты);
					
					СтруктураПараметровКлиента.Вставить("РегистрацияНовойКарты", СтруктураПараметровКлиентаРегистрацииНовойКарты);
					
					ТекстВопроса = НСтр("ru = 'Создать новую информационную карту? Карта %КодКарты%%НаименованиеШаблона%'");
					ТекстВопроса = СтрЗаменить(ТекстВопроса, "%КодКарты%", СтруктураПараметров.КодКарты);
					Если СтруктураПараметровКлиентаРегистрацииНовойКарты.Свойство("НаименованиеШаблона") Тогда
						Если ПустаяСтрока(СтруктураПараметровКлиентаРегистрацииНовойКарты.НаименованиеШаблона) Тогда
							ТекстВопроса = СтрЗаменить(ТекстВопроса, "%НаименованиеШаблона%", ".");
						Иначе
							ТекстВопроса = СтрЗаменить(ТекстВопроса, "%НаименованиеШаблона%", " (" + СтруктураПараметровКлиентаРегистрацииНовойКарты.НаименованиеШаблона+").");
						КонецЕсли;
					КонецЕсли;
					
					СтруктураПараметровКлиента.Вставить("ТекстВопросаНовойКарты", ТекстВопроса);
				КонецЕсли;
				
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураПараметровКлиента;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ПроверитьПраваДоступаНаОбработку(Отказ);
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ИнициализироватьОбработку(Параметры);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	НастроитьФормуПоДополнительнымПравам();
	
	Объект.ВидОплаты = Справочники.ВидыОплатЧекаККМ.Наличные;
	ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные;
	ВидОплатыНаличные = Объект.ВидОплаты;
	ТипОплатыНаличные = ТипОплаты;
	ТипОплатыПлатежнаяКарта = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипыОплатВТЧСервер(Объект);
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекПовтИсп.ИспользоватьПодключаемоеОборудование();
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ВозвратТоваровОтПокупателя.ПараметрыУказанияСерий(Объект));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
	ПриИзмененииМагазина();
	
	УстановитьФидимостьПоФО();
	УстановитьВидимостьВидовОплаты();
	УстановитьКомандыВидовОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗначениеСправочникиВидыОплатЧекаККМОплатаПодарочнымСертификатом = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом");
	
	Если ТипОткрытияФормы = ПредопределенноеЗначение("Перечисление.СпособыОткрытияОбработкиВозвратаОтПокупателя.ТолькоДляПечати") Тогда
		ЗаполнитьПоЧекуККМ();
		ЗаполнитьТоварыПоЧеку(ЧекККМВозврат, Истина)
	КонецЕсли;
	
	УстановитьВидимость();
	УставновитьДоступность();
	УстановитьВидимостьПодсказкиТерминала();
	УстановитьДоступностьКассы();
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "";

		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");

		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:
			                      |""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;
			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекКод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
		ИначеЕсли ИмяСобытия ="TracksData" Тогда
			ТекКод = Параметр[0];
			ПодключаемоеОборудованиеРТКлиент.ВыбратьМагнитныйКод(ТекКод);
			Если ПустаяСтрока(ТекКод) Тогда
				Возврат;
			КонецЕсли;
			СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТекстОшибкиОбщий = "";
	
	Если Объект.Товары.Количество() > 1.00 Тогда
			
		Запрос = Новый Запрос();
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТаблицаВозврата.ДокументПродажи
		|ПОМЕСТИТЬ ТаблицаВозврата
		|ИЗ
		|	&ТаблицаВозврата КАК ТаблицаВозврата
		|;
		|ВЫБРАТЬ
		|	ТаблицаВозврата.ДокументПродажи КАК ДокументПродажи
		|ИЗ
		|	ТаблицаВозврата КАК ТаблицаВозврата
		|ГДЕ
		|	ТаблицаВозврата.ДокументПродажи <> ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
		|	И ТаблицаВозврата.ДокументПродажи <> ЗНАЧЕНИЕ(Документ.РеализацияТоваров.ПустаяСсылка)
		|	И ТаблицаВозврата.ДокументПродажи <> НЕОПРЕДЕЛЕНО
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаВозврата.ДокументПродажи
		|";
		Запрос.УстановитьПараметр("ТаблицаВозврата", Объект.Товары.Выгрузить(,"ДокументПродажи"));
		ВыборкаДокументыРеализации = Запрос.ВыполнитьПакет()[1].Выбрать();
		Если ВыборкаДокументыРеализации.Количество() > 1.00 Тогда
			ТекстОшибки = Символы.ПС;
			Пока ВыборкаДокументыРеализации.Следующий() Цикл
				ТекстОшибки = ТекстОшибки + Строка(ВыборкаДокументыРеализации.ДокументПродажи) + Символы.ПС;
			КонецЦикла;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Возврат товаров должен выполняться по одному документу продажи. Выбраны следующие документы реализации: %1'"),
			ТекстОшибки);
			
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Отказ = Истина;
				ТекстОшибкиОбщий = ТекстОшибкиОбщий + ТекстОшибки;
			#Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект,
				"Объект.Товары",
				,
				Отказ
				);
			#КонецЕсли
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Оплата.Количество() <> 0.00 Тогда
		Сдача = Объект.Оплата.Итог("Сумма") - (Объект.Товары.Итог("Сумма") + ?(Объект.ЦенаВключаетНДС, 0, Объект.Товары.Итог("СуммаНДС")));
		
		Если Сдача < 0 Тогда
			ТекстОшибки = НСтр("ru='Суммы недостаточно для оплаты чека!'");
				
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Отказ = Истина;
				ТекстОшибкиОбщий = ТекстОшибкиОбщий + Символы.ПС + ТекстОшибки;
			#Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					Объект,
					?(Объект.ПереключательОплатаСложная, "Объект.Оплата", "Объект.СуммаОплаты"),
					,
					Отказ);
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаОплаты Из Объект.Оплата Цикл
		Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта И НЕ ЗначениеЗаполнено(СтрокаОплаты.ЭквайринговыйТерминал) Тогда
			Если Объект.ПереключательОплатаСложная Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнена колонка ""Терминал"" в строке %1 списка ""Оплата""'"),
				СтрокаОплаты.НомерСтроки);
				
				#Если ТолстыйКлиентОбычноеПриложение Тогда
					Отказ = Истина;
					ТекстОшибкиОбщий = ТекстОшибкиОбщий + Символы.ПС + ТекстОшибки;
				#Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					Объект,
					"Объект.Оплата[" + (СтрокаОплаты.НомерСтроки - 1) + "].ЭквайринговыйТерминал",
					,
					Отказ
					);
				#КонецЕсли
			Иначе
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Поле ""Терминал"" не заполнено'"),);
				
				#Если ТолстыйКлиентОбычноеПриложение Тогда
					Отказ = Истина;
					ТекстОшибкиОбщий = ТекстОшибкиОбщий + Символы.ПС + ТекстОшибки;
				#Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					Объект,
					"ЭквайринговыйТерминал",
					,
					Отказ
					);
				#КонецЕсли
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если Отказ Тогда
			ФормаИнформацииОбОшибке = ПолучитьОбщуюФорму("ФормаИнформацииОбОшибке");
			ФормаИнформацииОбОшибке.ТекстОшибки = ТекстОшибкиОбщий;
			ФормаИнформацииОбОшибке.ОткрытьМодально();
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораВидаОплаты(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОплатыПриИзменении(Элемент)
	
	ПараметрыВыбора = Новый Структура();
	ПараметрыВыбора.Вставить("ВидОплаты", Объект.ВидОплаты);
	ПараметрыВыбора.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
	
	ПриИзмененииРеквизитаОдиночнойОплатыСервер(ПараметрыВыбора);
	
	Если НЕ ПараметрыВыбора.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта") Тогда
		
		ЭквайринговыйТерминал = ПредопределенноеЗначение("Справочник.ЭквайринговыеТерминалы.ПустаяСсылка");
		
	КонецЕсли;
	ПриИзмененииОдиночнойОплаты(Истина);
	УстановитьВидимостьПодсказкиТерминала();
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		ПриИзмененииМагазина();
		СкладПриИзменении(Неопределено);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, , СтруктураДействий, КэшированныеЗначения);
		
		ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		
	КонецЕсли;
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОплатаСложнаяПриИзменении(Элемент)
	
	Если НЕ Объект.ПереключательОплатаСложная Тогда
		Если Объект.Оплата.Количество() > 1 Тогда
			Ответ = Вопрос("Список оплат будет очищен." + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
		Иначе
			Ответ = КодВозвратаДиалога.Да;
		КонецЕсли;

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Объект.ПереключательОплатаСложная = Истина;
			Возврат;
		Иначе
			Пока  Объект.Оплата.Количество() > 1 Цикл
				 Объект.Оплата.Удалить(Объект.Оплата[1]);
			КонецЦикла;
			
			Если Объект.Оплата.Количество() > 0 Тогда
				Если НЕ ЗначениеЗаполнено(Объект.Оплата[0].ВидОплаты) Тогда
					Объект.Оплата[0].ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные");
					Объект.Оплата[0].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.Наличные");
					Объект.Оплата[0].ЭквайринговыйТерминал  = Неопределено;
					Объект.Оплата[0].ПроцентТорговойУступки = 0;
					Объект.Оплата[0].СуммаТорговойУступки   = 0;
				КонецЕсли;
				Объект.ВидОплаты              = Объект.Оплата[0].ВидОплаты;
				Объект.СуммаОплаты     = Объект.Оплата[0].Сумма;
				ЭквайринговыйТерминал  = Объект.Оплата[0].ЭквайринговыйТерминал;
				ТипОплаты              = Объект.Оплата[0].ТипОплаты;
				ПроцентТорговойУступки = Объект.Оплата[0].ПроцентТорговойУступки;
				СуммаТорговойУступки   = Объект.Оплата[0].СуммаТорговойУступки;
			Иначе
				ПриИзмененииОдиночнойОплаты();
			КонецЕсли;
		КонецЕсли;
	Иначе
		Объект.Оплата.Очистить();
		Объект.ВидОплаты       = Неопределено;
		Объект.СуммаОплаты     = 0;
		ЭквайринговыйТерминал  = Неопределено;
		ТипОплаты              = Неопределено;
		ПроцентТорговойУступки = 0;
		СуммаТорговойУступки   = 0;
	КонецЕсли;
	
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	УстановитьВидимостьВидовОплаты();
	УставновитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ПроцентТорговойУступкиПриИзменении(Элемент)
	
	ПриИзмененииОдиночнойОплаты();
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ОрганизацияПоСкладу = ОрганизацияПоПодчиненномуОбъекту(Объект.Склад);
	
	Если ЗначениеЗаполнено(ОрганизацияПоСкладу) И НЕ Объект.Организация = ОрганизацияПоСкладу Тогда
		Объект.Организация = ОрганизацияПоСкладу;
		Организация = ОрганизацияПоСкладу;
		
	КонецЕсли;
	
	Объект.Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Объект.Организация, , , Объект.Магазин);
	ОрганизацияПриИзменении(Неопределено);
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплатыПриИзменении(Элемент)
	
	ПриИзмененииОдиночнойОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	
	Если НЕ Объект.ФизЛицо = Неопределено Тогда
		Объект.ФИОФизЛица = Объект.ФизЛицо;

		//
		//Если ЗаполнениеФизЛицаСервер() Тогда
		//	
		//	Объект.ФИОФизЛица = ОбщегоНазначенияРТКлиент.ПолучитьСклонениеФИО(Объект.ФИОФизЛицаИП, 3);
		//	
		//Иначе
		//	
		//	Объект.ФИОФизЛицаИП = ОбщегоНазначенияРТКлиент.ПолучитьСклонениеФИО(Объект.ФИОФизЛица, 3);
		//	Объект.ФизЛицо = Объект.ФИОФизЛицаИП; 
		//	
		//КонецЕсли;
		
	Иначе
		Объект.ФИОФизЛицаИП = "";
		
	КонецЕсли;
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура ФИОФизЛицаПриИзменении(Элемент)
	Если ТипЗнч(Объект.ФизЛицо) = Тип("Строка") Тогда
		
		Если Не СокрЛП(Объект.ФизЛицо) = "" Тогда
			Ответ = Вопрос(НСтр("ru = 'Изменить ФИО покупателя?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да;
		Иначе
			Ответ = Истина;
		КонецЕсли;
		
		Если Ответ Тогда
			
			Объект.ФИОФизЛицаИП = ОбщегоНазначенияРТКлиент.ПолучитьСклонениеФИО(Объект.ФИОФизЛица, 3);
			Объект.ФизЛицо      = Объект.ФИОФизЛицаИП;
			
		КонецЕсли;
		
	КонецЕсли;
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыйТерминалНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Если НЕ Объект.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные") Тогда
		ТерминалНачалоВыбораИзСписка(Элементы.ЭквайринговыйТерминал, Объект.ВидОплаты);
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении(Элемент)
	
	ПриИзмененииОдиночнойОплаты(Истина);
	УстановитьВидимостьПодсказкиТерминала();
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	УстановитьДоступностьКассы();
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	УстановитьВидимостьПодсказкиТерминала();
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура АналитикаХозяйственнойОперацииПриИзменении(Элемент)
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура ПоДокументуПриИзменении(Элемент)
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура ПриложениеПриИзменении(Элемент)
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "Товары"

&НаКлиенте
Процедура ТоварыДокументПродажиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	
	// Найдем документы оплаты по диапазону
	ДатаС = ДобавитьМесяц(Объект.Дата, -1);
	Если Не ВвестиЗначение(ДатаС, "Введите дату начала поиска документов:", ОбщегоНазначенияРТ.ПолучитьОписаниеТиповДаты()) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Номенклатура"  , ТекущаяСтрока.Номенклатура);
	СтруктураПараметров.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
	СтруктураПараметров.Вставить("ДатаС"         , ДатаС);
	СтруктураПараметров.Вставить("Магазин"       , Объект.Магазин);
	
	СписокДокументов = ЗапасыСервер.ПолучитьСписокДокументовСодержащихНоменклатуру(СтруктураПараметров);
	
	Если СписокДокументов.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Документы продажи данного товара не найдены!");
	ИначеЕсли СписокДокументов.Количество() = 1 Тогда
		Выбор = СписокДокументов[0];
	Иначе
		Выбор = СписокДокументов.ВыбратьЭлемент("Выбор документа продажи:");
	КонецЕсли;
	
	Если НЕ Выбор = Неопределено Тогда
		
		ВыбранныйДокумент = Выбор.Значение; 
		
		Если ЗначениеЗаполнено(ВыбранныйДокумент)  Тогда
			Если Тип("ДокументСсылка.ОтчетОРозничныхПродажах") = ТипЗнч(ВыбранныйДокумент) Тогда
				МетаданныеНаименование = "ОтчетОРозничныхПродажах";
			Иначе
				МетаданныеНаименование = "РеализацияТоваров";
			КонецЕсли; 
			
			РезультатОтбораСтрок = ОбработкаТабличнойЧастиТоварыСервер.ПолучитьСтрокиДокументаПродажиНаКлиента(ВыбранныйДокумент, МетаданныеНаименование, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика, УникальныйИдентификатор);
			
			Если ЗначениеЗаполнено(РезультатОтбораСтрок)  Тогда
				
				СтруктураПараметров = Новый Структура("АдресТаблицы", РезультатОтбораСтрок);
				
				СвойстваСтроки = ОткрытьФормуМодально("Обработка.ВозвратТоваровОтРозничногоПокупателя.Форма.ФормаВыбораСтрокиДокумента", СтруктураПараметров);
				
				Если НЕ СвойстваСтроки = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СвойстваСтроки, , "Сумма");
					
					Если ОтчетОРозничныхПродажахПоЧекуККМСервер(ТекущаяСтрока.ЧекККМ) = ВыбранныйДокумент Тогда
					
						ТекущаяСтрока.ЧекККМ = ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка");
					
					КонецЕсли;
					
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ());
					СтруктураДействий.Вставить("ПересчитатьСумму");
					
					ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
					
					ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу" , ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураПараметровСтавкиНДС = Новый Структура;
	СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
	СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
	СтруктураПараметровСтавкиНДС.Вставить("Склад"      , Объект.Склад);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", СтруктураПараметровСтавкиНДС);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ());
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ());
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ());
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);


КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ());
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ());
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ());
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЧекККМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Перем ДатаС;
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	
	// Найдем чеки по дате
		ДатаС = Объект.Дата - 14*24*60*60;
		Если Не ВвестиЗначение(ДатаС, "Введите дату чека:", ОбщегоНазначенияРТ.ПолучитьОписаниеТиповДаты()) Тогда
			Возврат;
		КонецЕсли;
		
	СтруктураПараметрыОтбора = Новый Структура;
	СтруктураПараметрыОтбора.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
	СтруктураПараметрыОтбора.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
	СтруктураПараметрыОтбора.Вставить("Дата", ДатаС);
	СтруктураПараметрыОтбора.Вставить("Магазин", Объект.Магазин);
	СтруктураПараметрыОтбора.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа"));
	
	СтруктураПараметры = Новый Структура("СтруктураПараметрыОтбора", СтруктураПараметрыОтбора);
	СтруктураПараметры.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Документ.ЧекККМ.ФормаВыбора", СтруктураПараметры , Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЧекККМПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииТоварыЧекККМСервер(ТекущаяСтрока.ЧекККМ);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьДанныеПоДокументуПродажи", "ЧекККМ");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТолькоПечатьПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ТекущиеДанные = Элементы.ТоварыТолькоПечать.ТекущиеДанные;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "Оплата"

&НаКлиенте
Процедура ОплатаВидОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораВидаОплаты(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОплатаВидОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	
	ТекущаяСтрока.ПроцентТорговойУступки = ЭквайрингСервер.ПолучитьПроцентТорговойУступкиПоТерминалу(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты);
	ПересчитатьСуммуТорговойУступки(ТекущаяСтрока);
	
	ТекущаяСтрока.ТипОплаты = ТипОплатыПоВидуОплаты(ТекущаяСтрока.ВидОплаты);
	
	ОбновитьПолеСдача();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПроцентТорговойУступкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	ПересчитатьСуммуТорговойУступки(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	ПересчитатьСуммуТорговойУступки(ТекущаяСтрока);
	
	ОбновитьПолеСдача();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаЭквайринговыйТерминалНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТерминалНачалоВыбораИзСписка(Элементы.ОплатаЭквайринговыйТерминал, Элементы.Оплата.ТекущиеДанные.ВидОплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаЭквайринговыйТерминалПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	
	ТекущаяСтрока.ПроцентТорговойУступки = ЭквайрингСервер.ПолучитьПроцентТорговойУступкиПоТерминалу(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты);
	ПересчитатьСуммуТорговойУступки(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПриИзменении(Элемент)
	ОбновитьПолеСдача();
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		ДобавитьОплатуНаличными();
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПечатьЗаявленияНаВозврат(Команда)
	
	
	ПараметрыПечати = Новый Структура;
	
	//ПараметрыПечати.Вставить("ОтКого"          , ОбщегоНазначенияРТКлиент.ПолучитьСклонениеФИО(Объект.ФИОФизЛицаИП, 2));
	ПараметрыПечати.Вставить("ОтКого"          , ОбщегоНазначенияРТКлиент.ПолучитьСклонениеФИО(Объект.ФИОФизЛица, 2));
	//ПараметрыПечати.Вставить("ФИОПокупателя"   , ОбщегоНазначенияРТКлиент.ПолучитьСклонениеФИО(Объект.ФИОФизЛицаИП, 5));
	ПараметрыПечати.Вставить("ФИОПокупателя"   , ОбщегоНазначенияРТКлиент.ПолучитьСклонениеФИО(Объект.ФИОФизЛица, 5));
	ПараметрыПечати.Вставить("ДатаРождения"    , Объект.ДатаРождения);
	ПараметрыПечати.Вставить("Дата"       	   , Объект.Дата);
	ПараметрыПечати.Вставить("ЧекНомер"        , Объект.ЧекНомер);
	ПараметрыПечати.Вставить("ЧекДата"         , Объект.ЧекДата);
	ПараметрыПечати.Вставить("ПаспортныеДанные", Объект.ПоДокументу);
	ПараметрыПечати.Вставить("ЧекВозврата"	   , ЧекККМВозврат);
	
	ПараметрыПечати.Вставить("ТаблицаНоментклатуры", Объект.Товары);
	
	СтруктураРезультата = СтруктураДанныхОбОрганизации(Объект.Организация);
	
	Кому = "";
	Руководитель          = СтруктураРезультата.Руководитель;
	РуководительДолжность = СтруктураРезультата.РуководительДолжность;
	Наименование          = СтруктураРезультата.Наименование;
	Организация           = СтруктураРезультата.Организация;
	
	
	Если Не Руководитель = Неопределено Тогда
		Если Не КомпонентаСклонения = Неопределено Тогда 
			Должность       = ОбщегоНазначенияРТКлиент.ПолучитьСклонениеФИО(РуководительДолжность, 3) + " " + Наименование;
			ФИОРуководителя = ОбщегоНазначенияРТКлиент.ПолучитьСклонениеФИО(Руководитель, 3);
			
			Кому = Должность + Символы.ПС+ ФИОРуководителя;
		Иначе
			Кому = РуководительДолжность + " " + Наименование + Символы.ПС+ Руководитель;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПечати.Вставить("Кому", Кому);
	
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.ВозвратТоваровОтРозничногоПокупателя",
    		"ЗаявлениеНаВозврат",
			,
			ЭтотОбъект,
			ПараметрыПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьАктаОВыдачеДенежныхСредств(Команда)
	
	ПараметрыПечати = Новый Структура;
	
	//ПараметрыПечати.Вставить("ОтКого"          , ОбщегоНазначенияРТКлиент.ПолучитьСклонениеФИО(Объект.ФИОФизЛицаИП, 2));
	ПараметрыПечати.Вставить("ОтКого"          , ОбщегоНазначенияРТКлиент.ПолучитьСклонениеФИО(Объект.ФИОФизЛица, 2));
	//ПараметрыПечати.Вставить("ФИОПокупателя"   , ОбщегоНазначенияРТКлиент.ПолучитьСклонениеФИО(Объект.ФИОФизЛицаИП, 5));
	ПараметрыПечати.Вставить("ФИОПокупателя"   , ОбщегоНазначенияРТКлиент.ПолучитьСклонениеФИО(Объект.ФИОФизЛица, 5));
	ПараметрыПечати.Вставить("ФИОПродавца"     , ПользователиКлиентСервер.ТекущийПользователь());
	ПараметрыПечати.Вставить("ДатаРождения"    , Объект.ДатаРождения);
	ПараметрыПечати.Вставить("Дата"        	   , Объект.Дата);
	ПараметрыПечати.Вставить("ЧекНомер"        , Объект.ЧекНомер);
	ПараметрыПечати.Вставить("ЧекДата"         , Объект.ЧекДата);
	ПараметрыПечати.Вставить("ЧекНомерВозврат" , Объект.ЧекНомерВозврат);
	ПараметрыПечати.Вставить("ЧекДатаВозврат"  , Объект.ЧекДатаВозврат);
	ПараметрыПечати.Вставить("ПаспортныеДанные", Объект.ПоДокументу);
	ПараметрыПечати.Вставить("ЧекВозврата"	   , ЧекККМВозврат);
	ПараметрыПечати.Вставить("ТаблицаНоментклатуры", Объект.Товары);
	
	СтруктураРезультата = СтруктураДанныхОбОрганизации(Объект.Организация);
	
	Кому = "";
	Руководитель          = СтруктураРезультата.Руководитель;
	РуководительДолжность = СтруктураРезультата.РуководительДолжность;
	Наименование          = СтруктураРезультата.Наименование;
	Организация           = СтруктураРезультата.Организация;
	
	Если Не Руководитель = Неопределено Тогда
		Если Не КомпонентаСклонения = Неопределено Тогда 
			Должность       = ОбщегоНазначенияРТКлиент.ПолучитьСклонениеФИО(РуководительДолжность, 3) + " " + Наименование;
			ФИОРуководителя = ОбщегоНазначенияРТКлиент.ПолучитьСклонениеФИО(Руководитель, 3);
			
			Кому = Должность + Символы.ПС+ ФИОРуководителя;
		Иначе
			Кому = РуководительДолжность + " " + Наименование + Символы.ПС+ Руководитель;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПечати.Вставить("Кому", Кому);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.ВозвратТоваровОтРозничногоПокупателя",
			"АктОВыдачеДенежныхСредств",
			,
			ЭтотОбъект,
			ПараметрыПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьАктаОбОшибочноПробитомЧеке(Команда)
	
	
	ПараметрыПечати = Новый Структура;
	
	ПараметрыПечати.Вставить("ОтКого"          , "от " + ОбщегоНазначенияРТКлиент.ПолучитьСклонениеФИО(Объект.ФИОФизЛицаИП, 2));
	ПараметрыПечати.Вставить("ФИОПродавца"     , ОбщегоНазначенияРТКлиент.ПолучитьСклонениеФИО(Объект.ФИОФизЛицаИП, 5));
	ПараметрыПечати.Вставить("ФИОКассира"      , Объект.ФИОФизЛицаИП);
	ПараметрыПечати.Вставить("ДатаРождения"    , Объект.ДатаРождения);
	ПараметрыПечати.Вставить("Дата"       	   , Объект.Дата);
	ПараметрыПечати.Вставить("ЧекНомер"        , Объект.ЧекНомер);
	ПараметрыПечати.Вставить("ЧекДата"         , Объект.ЧекДата);
	ПараметрыПечати.Вставить("ПаспортныеДанные", Объект.ПоДокументу);
	ПараметрыПечати.Вставить("СуммаДокумента"  , Объект.Товары.Итог("Сумма"));
	
	СтруктураРезультата = СтруктураДанныхОбОрганизации(Объект.Организация);
	
	Кому = "";
	Руководитель          = СтруктураРезультата.Руководитель;
	РуководительДолжность = СтруктураРезультата.РуководительДолжность;
	Наименование          = СтруктураРезультата.Наименование;
	Организация           = СтруктураРезультата.Организация;
	
	Если Не Руководитель = Неопределено Тогда
		Если Не КомпонентаСклонения = Неопределено Тогда 
			Должность       = ОбщегоНазначенияРТКлиент.ПолучитьСклонениеФИО(РуководительДолжность, 3) + " " + Наименование;
			ФИОРуководителя = ОбщегоНазначенияРТКлиент.ПолучитьСклонениеФИО(Руководитель, 3);
			
			Кому = Должность + Символы.ПС+ ФИОРуководителя;
		Иначе
			Кому = РуководительДолжность + " " + Наименование + Символы.ПС+ Руководитель;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПечати.Вставить("Кому", Кому);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.ВозвратТоваровОтРозничногоПокупателя",
			"АктОбОшибочноПробитомЧеке",
			,
			ЭтотОбъект,
			ПараметрыПечати);
			
КонецПроцедуры

&НаКлиенте
Процедура ОплатаБезСдачи(Команда)
	
	Объект.СуммаОплаты = СуммаВсего;
	
	ПриИзмененииОдиночнойОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПриходнаяНакладная(Команда)
	
	Если НЕ ЗначениеЗаполнено(ВозвратТоваровОтПокупателя) Тогда
		
		ТекстСообщения = НСтр("ru = 'Документы не созданы'"); 
		ВывестиОбщееСообщение(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(ВозвратТоваровОтПокупателя);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ВозвратТоваровОтПокупателя",
			"Накладная",
			МассивДокументов,
			ЭтотОбъект,
			Новый Структура("ВыводитьЦены", Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьРКО(Команда)
	Если НЕ ЗначениеЗаполнено(ВозвратТоваровОтПокупателя) Тогда
		
		ТекстСообщения = НСтр("ru = 'Документы не созданы'"); 
		ВывестиОбщееСообщение(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РасходныйКассовыйОрдер) Тогда
		
		ТекстСообщения = НСтр("ru = 'Возвраты оплаты наличных средств не создавалось'"); 
		ВывестиОбщееСообщение(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(РасходныйКассовыйОрдер);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.РасходныйКассовыйОрдер",
			"РКО",
			МассивДокументов,
			ЭтотОбъект,
			Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	ТекКод = "";
	Если ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ТекКод) Тогда
		
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	
	Отказ = НЕ ПроверитьЗаполнение();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Результат = СоздатьДокументыСервер();
	
	Если Результат Тогда
		МодифицированыСохраняемыеДанные = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтотОбъект,ПараметрыУказанияСерий) Тогда
		ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтотОбъект);
		
		Если ЗначениеВозврата <> Неопределено Тогда
			ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
			ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоЧекуККМ(Команда)
	
	ЕстьОшибки = Ложь;
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ТекстСообщения = НСтр("ru = 'Для поиска по чеку ККМ необходимо заполнить  ""Магазин"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Магазин");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ЧекНомер) Тогда
		ТекстСообщения = НСтр("ru = 'Для поиска по чеку ККМ необходимо заполнить  ""Номер чека"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ЧекНомер");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЕстьОшибки Тогда
		
		СтруктураПараметрыОтбора = Новый Структура;
		Если ЗначениеЗаполнено(Объект.ЧекДата) Тогда
			СтруктураПараметрыОтбора.Вставить("Дата", Объект.ЧекДата);
		КонецЕсли;
		
		СтруктураПараметрыОтбора.Вставить("Магазин", Объект.Магазин);
		СтруктураПараметрыОтбора.Вставить("Номер", Объект.ЧекНомер);
		СтруктураПараметрыОтбора.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа"));
		
		СтруктураПараметры = Новый Структура("СтруктураПараметрыОтбора", СтруктураПараметрыОтбора);
		СтруктураПараметры.Вставить("РежимВыбора", Истина);
		
		ВыбранныйЧек = ОткрытьФормуМодально("Документ.ЧекККМ.ФормаВыбора", СтруктураПараметры);
		
		Если НЕ ВыбранныйЧек = Неопределено Тогда
			
			ОчищатьТовары = Истина;
			
			Если НЕ Объект.Товары.Количество() = 0 Тогда
				ТекстВопроса = НСтр("ru = 'Очистить табличную часть ""Товары"" перед заполнением?'");
				Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
					ОчищатьТовары = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьТоварыПоЧеку(ВыбранныйЧек, ОчищатьТовары);
			МодифицированыСохраняемыеДанные = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	УстановитьДоступностьСоздатьДокументы();
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоЧекуККМВозврат(Команда)
	
	ЕстьОшибки = Ложь;
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ТекстСообщения = НСтр("ru = 'Для поиска по чеку ККМ необходимо заполнить  ""Магазин"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Магазин");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ЧекНомерВозврат) Тогда
		ТекстСообщения = НСтр("ru = 'Для поиска по чеку ККМ необходимо заполнить  ""Номер чека возврата"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ЧекНомерВозврат");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЕстьОшибки Тогда
		
		СтруктураПараметрыОтбора = Новый Структура;
		Если ЗначениеЗаполнено(Объект.ЧекДатаВозврат) Тогда
			СтруктураПараметрыОтбора.Вставить("Дата", Объект.ЧекДатаВозврат);
		КонецЕсли;
		
		СтруктураПараметрыОтбора.Вставить("Магазин", Объект.Магазин);
		СтруктураПараметрыОтбора.Вставить("Номер", Объект.ЧекНомерВозврат);
		СтруктураПараметрыОтбора.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат"));
		
		СтруктураПараметры = Новый Структура("СтруктураПараметрыОтбора", СтруктураПараметрыОтбора);
		СтруктураПараметры.Вставить("РежимВыбора", Истина);
		
		ВыбранныйЧек = ОткрытьФормуМодально("Документ.ЧекККМ.ФормаВыбора", СтруктураПараметры);
		
		Если НЕ ВыбранныйЧек = Неопределено Тогда
			
			ЧекККМВозврат = ВыбранныйЧек;
			
			ОчищатьТовары = Истина;
			
			Если НЕ Объект.Товары.Количество() = 0 Тогда
				ТекстВопроса = НСтр("ru = 'Очистить табличную часть ""Товары"" перед заполнением?'");
				Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
					ОчищатьТовары = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьПоЧекуККМ();
			ЗаполнитьТоварыПоЧеку(ВыбранныйЧек, ОчищатьТовары);
			МодифицированыСохраняемыеДанные = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	УстановитьДоступностьСоздатьДокументы();
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоЧеку(Чек, ОчищатьТовары)

	Запрос = Новый Запрос;
	
	Если (Чек.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат) И (ЗначениеЗаполнено(Чек.ЧекККМПродажа)) Тогда
		ЧекПродажи = Чек.ЧекККМПродажа;
		Запрос.УстановитьПараметр("ЧекПродажи", ЧекПродажи);
		Запрос.УстановитьПараметр("ОтчетОРозничныхПродажах", ЧекПродажи.ОтчетОРозничныхПродажах);
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧекККМТовары.НомерСтроки КАК НомерСтроки,
		|	ЧекККМТовары.Номенклатура КАК Номенклатура,
		|	ЧекККМТовары.Характеристика КАК Характеристика,
		|	ЧекККМТовары.Количество КАК Количество,
		|	ЧекККМТовары.Цена КАК Цена,
		|	ЧекККМТовары.Сумма КАК Сумма,
		|	ЧекККМТовары.СтавкаНДС КАК СтавкаНДС,
		|	ЧекККМТовары.СуммаНДС КАК СуммаНДС,
		|	ЧекККМТовары.Продавец КАК Продавец,
		|	ЧекККМТовары.Упаковка КАК Упаковка,
		|	ЧекККМТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|" + ?(ЗначениеЗаполнено(ЧекПродажи), "
		|  	&ЧекПродажи КАК ЧекККМ,
		|	&ОтчетОРозничныхПродажах КАК ДокументПродажи,", "
		|	ЧекККМТовары.Ссылка КАК ЧекККМ,
		|	ЧекККМТовары.Ссылка.ОтчетОРозничныхПродажах КАК ДокументПродажи,") + "
		|	ЧекККМТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
		|ГДЕ
		|	ЧекККМТовары.Ссылка = &Чек
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	Запрос.УстановитьПараметр("Чек", Чек);
	Результат = Запрос.Выполнить();
	
	Если ОчищатьТовары Тогда
		Объект.Товары.Загрузить(Результат.Выгрузить());
	Иначе
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьСтатусыУказанияСерийСервер();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяКарта(Команда)
	
	ВидОплатыПлатежнаяКарта = ПолучитьВидОплатыПоТипуПлатежнаяКарта();
	
	Если НЕ ВидОплатыПлатежнаяКарта = Неопределено Тогда
		НоваяСтрока = Объект.Оплата.Добавить();
		НоваяСтрока.ВидОплаты = ВидОплатыПлатежнаяКарта;
		Если Объект.Оплата.Количество() > 1 Тогда
			Сумма = Объект.Товары.Итог("Сумма") - Объект.Оплата.Итог("Сумма");
			НоваяСтрока.Сумма = ?(Сумма > 0, Сумма, 0);
		КонецЕсли;
		
		НоваяСтрока.ТипОплаты = ТипОплатыПлатежнаяКарта;
		Элементы.Оплата.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Оплата.ТекущийЭлемент = Элементы.ОплатаСумма;
		Элементы.Оплата.ИзменитьСтроку();
		МодифицированыСохраняемыеДанные = Истина;
		
	Иначе
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("ИмяПоляОтбораЛевоеЗначение", "ТипОплаты");
		Отбор.Вставить("ПравоеЗначение"            , ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта"));
		Отбор.Вставить("Отрицание"                 , Ложь);
		
		ВидОплатыПлатежнаяКарта = ОткрытьФормуМодально("Справочник.ВидыОплатЧекаККМ.ФормаВыбора", Новый Структура("СтруктураПараметрыОтбора", Отбор));
		
		Если НЕ ВидОплатыПлатежнаяКарта = Неопределено Тогда
			НоваяСтрока = Объект.Оплата.Добавить();
			НоваяСтрока.ВидОплаты = ВидОплатыПлатежнаяКарта;
			Если Объект.Оплата.Количество() > 1 Тогда
				Сумма = Объект.Товары.Итог("Сумма") - Объект.Оплата.Итог("Сумма");
				НоваяСтрока.Сумма = ?(Сумма > 0, Сумма, 0);
			КонецЕсли;
			НоваяСтрока.ТипОплаты = ТипОплатыПлатежнаяКарта;
			Элементы.Оплата.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Элементы.Оплата.ТекущийЭлемент = Элементы.ОплатаСумма;
			Элементы.Оплата.ИзменитьСтроку();
			МодифицированыСохраняемыеДанные = Истина;
		КонецЕсли;
		
	КонецЕсли;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ИнициализироватьОбработку(Параметры)
	
	Объект.Дата = ТекущаяДатаСеанса();
	
	Объект.Основание = "Возврат товаров";
	Объект.Приложение = "Заявление от " + Формат(Объект.Дата, "ДЛФ = DD");
	
	//Объект.Контрагент = Константы.КонтрагентРозничныйПокупатель.Получить();
	
	Параметры.Свойство("Склад"  ,Объект.Склад);
	Параметры.Свойство("Магазин",Объект.Магазин);
	Параметры.Свойство("Касса"  ,Объект.Касса);
	Параметры.Свойство("Организация"  ,Объект.Организация);
	Параметры.Свойство("ЧекККМВозврат"    ,ЧекККМВозврат);
	Параметры.Свойство("ТипОткрытияФормы" ,ТипОткрытияФормы);
	Контрагент = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЧекККМВозврат,"ВладелецДисконтнойКарты");
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Объект.Контрагент = Контрагент;
		ФИО = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Контрагент,"НаименованиеПолное");
		Объект.ФизЛицо = ФИО;
		Объект.ФИОФизЛица = ФИО;
	Иначе
		Объект.Контрагент = Константы.КонтрагентРозничныйПокупатель.Получить(); 		
	КонецЕсли;
		
	Ответственный = Пользователи.ТекущийПользователь();
	
	Объект.Магазин     = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Объект.Магазин);
	Объект.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация, Ответственный);
	Объект.Склад       = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Объект.Магазин,,Объект.Склад, Ответственный);
	Объект.Касса       = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Объект.Организация, ,Объект.Касса, Объект.Магазин, Ответственный);
	
	Если ЗначениеЗаполнено(Объект.Касса) Тогда
		Объект.Организация = ОрганизацияПоПодчиненномуОбъекту(Объект.Касса, "Владелец");
	КонецЕсли;
	
	Объект.СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	Объект.АналитикаХозяйственнойОперации = ЗначениеНастроекПовтИсп.ПолучитьАналитикуХозяйственнойОперацииПоУмолчанию(Объект.АналитикаХозяйственнойОперации, Перечисления.ХозяйственныеОперации.ВозвратОтПокупателя);
	ЗначениеСправочникиВидыОплатЧекаККМОплатаПодарочнымСертификатом = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Функция ЗаполнениеФизЛицаСервер()
	
	Результат = Истина;
	
	Если Не ТипЗнч(Объект.ФизЛицо) = Тип("Строка") И ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		
		ФизЛицоФИО = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(, Новый Структура("ФизЛицо", Объект.ФизЛицо)); 
		Объект.ФИОФизЛицаИП = ФизЛицоФИО.Фамилия + " " + ФизЛицоФИО.Имя + " " + ФизЛицоФИО.Отчество;

		Если СокрЛП(Объект.ФИОФизЛицаИП) = "" Тогда
			Объект.ФИОФизЛицаИП = Объект.ФизЛицо.Наименование;
		КонецЕсли;
		
		УдостоверениеЛичности = РегистрыСведений.ДокументыФизическихЛиц.ДокументУдостоверяющийЛичностьФизлица(Объект.Физлицо);
		
		Объект.ПоДокументу = УдостоверениеЛичности;
		
		Объект.ДатаРождения = Объект.ФизЛицо.ДатаРождения;
		
	ИначеЕсли ТипЗнч(Объект.ФизЛицо) = Тип("Строка") И Не СокрЛП(Объект.ФизЛицо) = "" Тогда
		
		Объект.ФИОФизЛицаИП = Объект.ФизЛицо;
		
	ИначеЕсли Не СокрЛП(Объект.ФИОФизЛица) = "" Тогда
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
// Устанавливает отбор на списке выбора вида оплаты
//
// Параметры
//  Элемент - элемент формы
//  ДанныеВыбора 
//  СтандартнаяОбработка
//
Процедура НачалоВыбораВидаОплаты(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	СписокТиповОплаты = Новый СписокЗначений;
	СписокТиповОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПодарочныйСертификат"));
	СписокТиповОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.БанковскийКредит"));
	
	Отбор.Вставить("ИмяПоляОтбораЛевоеЗначение", "ТипОплаты");
	Отбор.Вставить("ПравоеЗначение"            , СписокТиповОплаты);
	Отбор.Вставить("Отрицание"                 , Истина);
	
	ОткрытьФорму("Справочник.ВидыОплатЧекаККМ.Форма.ФормаВыбора",Новый Структура("СтруктураПараметрыОтбора", Отбор), Элемент);
	
КонецПроцедуры

//Процедура заполняет склад при изменении магазина
//
&НаСервере
Процедура ПриИзмененииМагазина()
	
	Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Объект.Магазин,,Объект.Склад, Пользователи.ТекущийПользователь());
	Объект.ЦенаВключаетНДС = ОбщегоНазначенияРТСервер.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(Объект.Магазин.ПравилоЦенообразования, "ЦенаВключаетНДС");
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ВозвратТоваровОтПокупателя.ПараметрыУказанияСерий(Объект));
	УстановитьВидимостьЭлементовСерий();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОдиночнойОплаты(ПолучитьПроцентТорговойУступки = Ложь)

	ПриИзмененииРеквизитаОдиночнойОплаты("ВидОплаты", Объект.ВидОплаты);
	ПриИзмененииРеквизитаОдиночнойОплаты("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
	ПриИзмененииРеквизитаОдиночнойОплаты("Сумма", Объект.СуммаОплаты);
	
	ПараметрыВыбора = Новый Структура();
	ПараметрыВыбора.Вставить("ВидОплаты", Объект.ВидОплаты);
	ПараметрыВыбора.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
	
	ПриИзмененииРеквизитаОдиночнойОплатыСервер(ПараметрыВыбора);
	
	ТипОплаты = ПараметрыВыбора.ТипОплаты;
	ПриИзмененииРеквизитаОдиночнойОплаты("ТипОплаты", ТипОплаты);
	
	Если ПолучитьПроцентТорговойУступки Тогда
		ПроцентТорговойУступки = ПараметрыВыбора.ПроцентТорговойУступки;
	КонецЕсли;
	
	ПриИзмененииРеквизитаОдиночнойОплаты("ПроцентТорговойУступки", ПроцентТорговойУступки);
	
	СуммаТорговойУступки = Объект.СуммаОплаты * ПроцентТорговойУступки / 100;
	
	ПриИзмененииРеквизитаОдиночнойОплаты("СуммаТорговойУступки", СуммаТорговойУступки);
	
	УставновитьДоступность();
	
	ОбновитьПолеСдача();
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
// Срабатывает при изменени одиночной оплаты
//
// Параметры:
//  ИмяРеквизита;
//  ЗначениеРеквизита
//
Процедура ПриИзмененииРеквизитаОдиночнойОплаты(ИмяРеквизита, ЗначениеРеквизита)

	Если Объект.Оплата.Количество() = 0  Тогда
		СтрокаОплаты = Объект.Оплата.Добавить();
	Иначе
		СтрокаОплаты = Объект.Оплата[0];
	КонецЕсли;
	
	СтрокаОплаты[ИмяРеквизита] = ЗначениеРеквизита;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеквизитаОдиночнойОплатыСервер(СтруктураПараметров)

	СтруктураПараметров.Вставить("ТипОплаты", СтруктураПараметров.ВидОплаты.ТипОплаты);
	СтруктураПараметров.Вставить("ПроцентТорговойУступки", ЭквайрингСервер.ПолучитьПроцентТорговойУступкиПоТерминалу(СтруктураПараметров.ЭквайринговыйТерминал, СтруктураПараметров.ВидОплаты));
	

КонецПроцедуры

&НаСервере
// Установка дискотной карты по чеку ККМ
//
// Параметры:
//  Нет
//
Процедура ПриИзмененииТоварыЧекККМСервер(ЧекККМ)

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ДисконтнаяКарта"        , "ДисконтнаяКарта");
	СтруктураРеквизитов.Вставить("ВладелецДисконтнойКарты", "ВладелецДисконтнойКарты");
	СтруктураРеквизитов.Вставить("ЦенаВключаетНДС"        , "ЦенаВключаетНДС");
	ЗначенияРеквизитов = ОбщегоНазначенияРТ.ПолучитьЗначенияРеквизитовОбъекта(ЧекККМ, СтруктураРеквизитов);
	
	Объект.ДисконтнаяКарта         = ЗначенияРеквизитов.ДисконтнаяКарта;
	Объект.ВладелецДисконтнойКарты = ЗначенияРеквизитов.ВладелецДисконтнойКарты;
	

КонецПроцедуры

&НаКлиенте
Процедура ТерминалНачалоВыбораИзСписка(ЭлементСписка, ПараметрВидОплаты)
	
	ЭлементСписка.СписокВыбора.Очистить();
	
	СписокВыбора = ЭквайринговыйТерминалНачалоВыбораИзСпискаСервер(ПараметрВидОплаты);
	
	Для Каждого Терминал Из СписокВыбора Цикл
		ЭлементСписка.СписокВыбора.Добавить(Терминал);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЭквайринговыйТерминалНачалоВыбораИзСпискаСервер(ПараметрВидОплаты)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЭквайринговыеТерминалы.Ссылка
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.ДоговорыЭквайринга.ТарифыЗаРасчетноеОбслуживание КАК ДоговорыЭквайрингаТарифыЗаРасчетноеОбслуживание
	|ПО
	|	ЭквайринговыеТерминалы.Владелец = ДоговорыЭквайрингаТарифыЗаРасчетноеОбслуживание.Ссылка
	|ГДЕ
	|	ДоговорыЭквайрингаТарифыЗаРасчетноеОбслуживание.ВидОплаты = &ВидОплаты
	|	И ЭквайринговыеТерминалы.Касса = &Касса
	|	И ЭквайринговыеТерминалы.Магазин = &Магазин
	|	И ЭквайринговыеТерминалы.Организация = &Организация
	|";
	Запрос.УстановитьПараметр("ВидОплаты", ПараметрВидОплаты);
	Запрос.УстановитьПараметр("Касса",Объект.Касса);
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

// ПодключаемоеОборудование
&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) 
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаВесовыхТоваров");
	СтруктураДействий.Вставить("ПроверкаТоваров");
	
	СтруктураПараметровДействия = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверкаКарт", СтруктураПараметровДействия);
	
	Возврат ПодключаемоеОборудованиеРТ.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) 
	
	СтруктураДействий = Новый Структура;
	
	СтруктураПараметровДействия = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверкаКарт", СтруктураПараметровДействия);
	
	Возврат ПодключаемоеОборудованиеРТ.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

&НаСервере
Процедура ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) 
	
	СтруктураДействий = Новый Структура;
	МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураПараметров);
	Если МассивСтрок.Количество() > 0 Тогда 
		
		ТекущаяСтрока = МассивСтрок[0];
		КоличествоУпаковок = ?(СтруктураПараметров.Свойство("Количество"), СтруктураПараметров.Свойство("Количество"), 1);
		КоэффициентУпаковки1 = ?(ЗначениеЗаполнено(СтруктураПараметров.Упаковка), СтруктураПараметров.Упаковка.Коэффициент, 1);
		КоэффициентУпаковки2 = ?(ЗначениеЗаполнено(ТекущаяСтрока.Упаковка), ТекущаяСтрока.Упаковка.Коэффициент, 1);
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + КоличествоУпаковок * КоэффициентУпаковки2 / КоэффициентУпаковки1;
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
	Иначе
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		Если СтруктураПараметров.Свойство("Количество") Тогда 
			ТекущаяСтрока.КоличествоУпаковок = СтруктураПараметров.Количество;
		Иначе
			ТекущаяСтрока.КоличествоУпаковок = 1;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураПараметров);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Истина);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
	КонецЕсли;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);

КонецПроцедуры

&НаСервере
Функция ДобавитьНайденныеИнформационныеКарты(ВыбранноеЗначение, АдресШаблоновВХранилище);
	
	ТаблицаШаблонов = ПолучитьИзВременногоХранилища(АдресШаблоновВХранилище);
	СтрокиШаблонов = ТаблицаШаблонов.НайтиСтроки(ВыбранноеЗначение);
	Если СтрокиШаблонов.Количество() > 0 Тогда
		СтруктураШаблонов = Новый Структура;
		ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВСтруктуру(ТаблицаШаблонов, СтрокиШаблонов[0], СтруктураШаблонов);
		Возврат ИнформационныеКарты.СоздатьДисконтнуюКарту(СтруктураШаблонов);
	Иначе
		Возврат Справочники.ИнформационныеКарты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(МассивНомеров) 
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура",МассивНомеров[0].Владелец); 
	МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураОтбора);
	СтруктураДействий = Новый Структура;
	
	Если МассивСтрок.Количество() > 0 Тогда 
		
		ТекущаяСтрока = МассивСтрок[0];
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("СерийныйНомер", МассивНомеров[0]);
		Если Объект.СерийныеНомера.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + 1;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		СтрокаСерийныхНомеров = Объект.СерийныеНомера.Добавить();
		СтрокаСерийныхНомеров.СерийныйНомер            = МассивНомеров[0];

	Иначе 
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ТекущаяСтрока.Количество = 1;
		ТекущаяСтрока.КоличествоУпаковок = 1;
		ТекущаяСтрока.Номенклатура = МассивНомеров[0].Владелец;
		СтруктураДействий = Новый Структура;
		
		СтруктураЗаполненияЦены = Новый Структура;
		СтруктураЗаполненияЦены.Вставить("Дата"                     , Объект.Дата);
		СтруктураЗаполненияЦены.Вставить("ОбъектЦенообразования"    , Объект.Магазин);
		СтруктураЗаполненияЦены.Вставить("ПриводитьКМинимальнойЦене", Ложь);
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",   Объект.УчитыватьНДС);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
	КонецЕсли;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

	Возврат Истина;
	
КонецФункции

&НаКлиенте
// Обработка магнитного или штрихового кода на клиенте
//
// Параметры
//  СтруктураПараметровКлиента - структура параметров
//
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод)
	
	Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") 
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
		
		СтрокаСообщения = НСтр("ru = 'Данные по коду не найдены: %1%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекКод);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ТекстПредупреждения") Тогда
		
		ПоказатьПредупреждение(, СтруктураПараметровКлиента.ТекстПредупреждения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойКарты") Тогда
		
		Если ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(СтруктураПараметровКлиента.ТекстВопросаНовойКарты) Тогда
			
			ИнформационнаяКарта = ИнформационныеКарты.СоздатьДисконтнуюКарту(СтруктураПараметровКлиента.РегистрацияНовойКарты);
			ИнформационныеКартыКлиент.ОповеститьОСозданииНовойКарты(ИнформационнаяКарта); 
			
			Если ЗначениеЗаполнено(ИнформационнаяКарта) Тогда
				Объект.ДисконтнаяКарта = ИнформационнаяКарта;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойКартыВыборШаблона") Тогда
		
		Если ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(СтруктураПараметровКлиента.ТекстВопросаНовойКарты) Тогда
			
			ВыбранноеЗначение = ОткрытьФормуМодально("РегистрСведений.ШаблоныРегистрацииНовыхКарт.Форма.ШаблоныНовыхКарт", Новый Структура("АдресШаблоновВХранилище", СтруктураПараметровКлиента.РегистрацияНовойКартыВыборШаблона), ЭтотОбъект);
			Если ВыбранноеЗначение <> Неопределено Тогда
			
				ИнформационнаяКарта = ДобавитьНайденныеИнформационныеКарты(ВыбранноеЗначение, СтруктураПараметровКлиента.РегистрацияНовойКартыВыборШаблона);
				ИнформационныеКартыКлиент.ОповеститьОСозданииНовойКарты(ИнформационнаяКарта); 
				
				Если ЗначениеЗаполнено(ИнформационнаяКарта) Тогда
					Объект.ДисконтнаяКарта = ИнформационнаяКарта;
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ВыборТоваров") Тогда
		
		ВыбранноеЗначение = ОткрытьФормуМодально("ОбщаяФорма.ВыборНоменклатуры", Новый Структура("АдресТоваровВХранилище", СтруктураПараметровКлиента.ВыборТоваров));
		Если ВыбранноеЗначение <> Неопределено Тогда
			
			ДобавитьНайденныеПозицииТоваров(ВыбранноеЗначение);
			Элементы.ДекорацияСуммаИтого.Заголовок = Формат(СуммаВсего, "ЧЦ=15; ЧДЦ=2; ЧН=; ЧГ=3,0");
			ОбновитьПолеСдача();
			
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ДобавленТовар") Тогда
		
		Элементы.ДекорацияСуммаИтого.Заголовок = Формат(СуммаВсего, "ЧЦ=15; ЧДЦ=2; ЧН=; ЧГ=3,0");
		ОбновитьПолеСдача();
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ВыборКарт") Тогда
		
		ВыбранноеЗначение = ОткрытьФормуМодально("ОбщаяФорма.ВыборИнформационнойКарты", Новый Структура("АдресКартВХранилище", СтруктураПараметровКлиента.ВыборКарт));
		Если ВыбранноеЗначение <> Неопределено Тогда
			
			Объект.ДисконтнаяКарта = ВыбранноеЗначение.ИнформационнаяКарта;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Серии

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.ТоварыСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыУказатьСерии.Видимость        = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);
	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУказанияСерий()
	
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	
	ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы ,ПараметрыФормыУказанияСерий,ЭтотОбъект);
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура ВывестиОбщееСообщение(ТекстСообщения)

	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаИнформацииОбОшибке = ПолучитьОбщуюФорму("ФормаИнформацииОбОшибке");
		ФормаИнформацииОбОшибке.ТекстОшибки = ТекстСообщения;
		ФормаИнформацииОбОшибке.ОткрытьМодально();
	#Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстСообщения,
		Объект
		);
	#КонецЕсли
	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЧекуККМ()
	
	Объект.Организация 	= ЧекККМВозврат.Организация;
	Объект.Магазин 		= ЧекККМВозврат.Магазин;
	Объект.Склад   		= ЧекККМВозврат.Магазин.СкладПродажи;
	
	Объект.ЧекНомерВозврат = ЧекККМВозврат.НомерЧекаККМ;
	Объект.ЧекДатаВозврат  = ЧекККМВозврат.Дата;
	
	Если ЗначениеЗаполнено(ЧекККМВозврат.ЧекККМПродажа) Тогда 
		Объект.ЧекНомер = ЧекККМВозврат.ЧекККМПродажа.НомерЧекаККМ;
		Объект.ЧекДата  = ЧекККМВозврат.ЧекККМПродажа.Дата;
	КонецЕсли;
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураЗаполненияЦены);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыЦена.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСумма.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыПродавец.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьПродавца);

	РазрешитьОформлениеВозвратовОтПокупателяБезДокументовПродажи = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОформлениеВозвратовОтПокупателяБезДокументовПродажи, Ложь);
	
	Элементы.ТоварыДокументПродажи.АвтоОтметкаНезаполненного = НЕ РазрешитьОформлениеВозвратовОтПокупателяБезДокументовПродажи;
	
КонецПроцедуры

&НаКлиенте
// Процедура дополняет общую процедура заполнения подвала
//
// Параметры
//
Процедура ОбновитьСуммыПодвала(Знач Товары, Знач ЦенаВключаетНДС, Сумма)

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Товары, ЦенаВключаетНДС, Сумма);
	
	Элементы.ДекорацияСуммаИтого.Заголовок = Формат(Сумма, "ЧЦ=15; ЧДЦ=2; ЧН=; ЧГ=3,0");
	
	ОбновитьПолеСдача();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПолеСдача()

	Перем СуммаНаличнойОплаты,СуммаБезналичнойОплаты;
	
	ПолучитьСуммыПоВидуОплат(СуммаНаличнойОплаты, СуммаБезналичнойОплаты);

	Если СуммаБезналичнойОплаты >= СуммаВсего Тогда
		СуммаСдача = 0;
	Иначе
		СуммаСдача = Макс(СуммаНаличнойОплаты - (СуммаВсего - СуммаБезналичнойОплаты),0);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуТорговойУступки(ТекущаяСтрока)
	
	ТекущаяСтрока.СуммаТорговойУступки = ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентТорговойУступки / 100;
	
КонецПроцедуры

&НаСервере
Функция СтруктураДанныхОбОрганизации(Организация)
	
	СтруктураРезультата = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Руководители = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(Организация, ТекущаяДатаСеанса(),,Истина);
		
		СтруктураРезультата.Вставить("Руководитель"         , Руководители.Руководитель);
		СтруктураРезультата.Вставить("РуководительДолжность", Руководители.РуководительДолжность);
		СтруктураРезультата.Вставить("Наименование"         , ?(СокрЛП(Организация.НаименованиеПолное) = "", Организация.Наименование, Организация.НаименованиеПолное));
		СтруктураРезультата.Вставить("Организация"          , Организация);
		
	Иначе
		
		СтруктураРезультата.Вставить("Руководитель"         , Неопределено);
		СтруктураРезультата.Вставить("РуководительДолжность", Неопределено);
		СтруктураРезультата.Вставить("Наименование"         , Неопределено);
		СтруктураРезультата.Вставить("Организация"          , Неопределено);
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОрганизацияПоПодчиненномуОбъекту(ПодчиненныйОбъект, ИмяРеквизита = "Организация")
	Возврат ПодчиненныйОбъект[ИмяРеквизита];
КонецФункции

&НаСервере
//  Возвращает отчет о розничных продажах по чеку ККМ
//
// Параметры:
//  Чек ККМ
//
Функция ОтчетОРозничныхПродажахПоЧекуККМСервер(ЧекККМ)
	
	Возврат ЧекККМ.ОтчетОРозничныхПродажах
	
КонецФункции

&НаКлиенте
// Структура пересчета суммы НДС в строке
//
// Параметры
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ()

	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	
	Возврат СтруктураЗаполненияЦены;

КонецФункции

&НаСервере
// Получем суммы наличной и безналичной оплаты
//
// Параметры
//  СуммаНаличнойОплаты - сумма наличной о
//
Процедура ПолучитьСуммыПоВидуОплат(СуммаНаличнойОплаты, СуммаБезналичнойОплаты)

	СуммаНаличнойОплаты = 0;
	СуммаБезналичнойОплаты = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Оплата.ВидОплаты,
	|	Оплата.Сумма
	|ПОМЕСТИТЬ ТаблицаОплат
	|ИЗ
	|	&Оплата КАК Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОплат.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ТаблицаОплат.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|						ТОГДА ТаблицаОплат.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК СуммаНаличнойОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОплат.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА (НЕ ТаблицаОплат.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные))
	|						ТОГДА ТаблицаОплат.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК СуммаБезналичнойОплаты
	|ИЗ
	|	ТаблицаОплат КАК ТаблицаОплат";
	
	Запрос.УстановитьПараметр("Оплата", Объект.Оплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Если ЗначениеЗаполнено(Выборка.СуммаНаличнойОплаты) Тогда
			СуммаНаличнойОплаты = Выборка.СуммаНаличнойОплаты;
		КонецЕсли; 
	
		Если ЗначениеЗаполнено(Выборка.СуммаБезналичнойОплаты) Тогда
			СуммаБезналичнойОплаты = Выборка.СуммаБезналичнойОплаты;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТипОплатыПоВидуОплаты(ВидОплаты)

	Возврат ВидОплаты.ТипОплаты;

КонецФункции

&НаСервере
Процедура ПроверитьПраваДоступаНаОбработку(Отказ)

	Если Пользователи.РолиДоступны("ПолныеПрава") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПравоНаРКО = Пользователи.РолиДоступны("ДобавлениеИзменениеКассовыхОрдеров");
	ПравоНаЭквайринг = Пользователи.РолиДоступны("ДобавлениеИзменениеОплатОтПокупателяПлатежнойКартой") ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами");
	
	Если НЕ ПравоНаРКО И НЕ ПравоНаЭквайринг Тогда
		ТекстОшибки = НСтр("ru = 'У пользователя не достаточно прав для кассовых и эквайринговых операций'");
	ИначеЕсли НЕ ПравоНаРКО Тогда
		ТекстОшибки = НСтр("ru = 'У пользователя не достаточно прав для кассовых операций'");
	Иначе
		ТекстОшибки = НСтр("ru = 'У пользователя не достаточно прав для банковских операций'");
	КонецЕсли;
	
	Если НЕ ПравоНаРКО ИЛИ НЕ ПравоНаЭквайринг Тогда
		Отказ = Истина;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СоздатьДокументыСервер()

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	РезультатСтруктура = ОбработкаОбъект.СформироватьДокументы();
	
	Если РезультатСтруктура.Результат Тогда
		МассивСформированныхДокументов = РезультатСтруктура.МассивСформированныхДокументов;
		
		Для Каждого СформированныйДокумент Из МассивСформированныхДокументов Цикл
			
			Если ТипЗнч(СформированныйДокумент) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				РасходныйКассовыйОрдер = СформированныйДокумент;
				ОбработкаОбъект.РасходныйКассовыйОрдер = Неопределено;
			ИначеЕсли ТипЗнч(СформированныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				ВозвратТоваровОтПокупателя = СформированныйДокумент;
				ОбработкаОбъект.ВозвратТоваровОтПокупателя = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		
		ОбработкаОбъект.СуммаОплаты = 0;
		ОбработкаОбъект.Оплата.Очистить();
		ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		
		ОтобразитьСформированныеДокументы(МассивСформированныхДокументов);
		
		
	КонецЕсли;
	
	Возврат РезультатСтруктура.Результат;
КонецФункции

&НаСервере
Процедура ОтобразитьСформированныеДокументы(МассивСформированныхДокументов)
	
	Элементы.Декорация1.Видимость = Ложь;
	
	Если ИндексСформированногоДокумента >0 Тогда
		Для Счетчик = 0 По ИндексСформированногоДокумента-1 Цикл
			Элементы["Добавлен"+Счетчик].Шрифт =  Новый Шрифт(Элементы["Добавлен"+Счетчик].Шрифт,,,Ложь);
		КонецЦикла;
	КонецЕсли;

	ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ВозвратТоваровОтПокупателя, ДокументСсылка.РасходныйКассовыйОрдер,  ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой");
	
	ИндексЭлемента               = ИндексСформированногоДокумента;
	//элемент группа
	ИмяЭлементаГруппа = "ГруппаДобавлен" + ИндексЭлемента;
	Родитель                           = Элементы.ГруппаСформированныеДокументы;
	ЭлементГруппа                      = Элементы.Добавить(ИмяЭлементаГруппа, Тип("ГруппаФормы"), Родитель);
	ЭлементГруппа.Вид                  = ВидГруппыФормы.ОбычнаяГруппа;
	ЭлементГруппа.Отображение          = ОтображениеОбычнойГруппы.СлабоеВыделение;
	ЭлементГруппа.Группировка          = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ЭлементГруппа.ОтображатьЗаголовок  = Истина;
	ЭлементГруппа.Заголовок = НСтр("ru = 'Сформировано:'") + " " + ТекущаяДатаСеанса();
	
	Если ИндексСформированногоДокумента >0 Тогда
		Элементы.Переместить(ЭлементГруппа, Родитель, Элементы["ГруппаДобавлен"+ ИндексСформированногоДокумента]);
	КонецЕсли;
	
	Для каждого Документ Из МассивСформированныхДокументов Цикл
		ДобавляемыеРеквизиты = Новый Массив;
		ИндексЭлемента               = ИндексСформированногоДокумента;
		
		//реквизит
		ИмяЭлемента = "Добавлен" + ИндексЭлемента;
		Реквизит = Новый РеквизитФормы(ИмяЭлемента, ОписаниеТипов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		//элемент формы
		Элемент                      = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ЭлементГруппа);
		Элемент.Вид                  = ВидПоляФормы.ПолеНадписи;
		Элемент.ПутьКДанным          = ИмяЭлемента;
		Элемент.Гиперссылка          = Истина;
		Элемент.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт,,,Истина);
		
		ЭтотОбъект[ИмяЭлемента] = Документ;

		ИндексСформированногоДокумента = ИндексСформированногоДокумента + 1;
		
	КонецЦикла;

	Элементы.СтраницаСформированныеДокументы.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УставновитьДоступность()
	
	ТерминалТолькоПросмотр = НЕ ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта");
	
	Элементы.ЭквайринговыйТерминал.АвтоОтметкаНезаполненного = НЕ ТерминалТолькоПросмотр;
	Если ТерминалТолькоПросмотр Тогда
		Элементы.ЭквайринговыйТерминал.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Элементы.ЭквайринговыйТерминал.ТолькоПросмотр = ТерминалТолькоПросмотр;
	Элементы.ПроцентТорговойУступки.ТолькоПросмотр = ТерминалТолькоПросмотр;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКассы()
	
	Элементы.Касса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВидовОплаты()
	
	Элементы.ВидОплаты.Видимость              = НЕ Объект.ПереключательОплатаСложная;
	Элементы.СуммаОплаты.Видимость            = НЕ Объект.ПереключательОплатаСложная;
	Элементы.ОплатаБезСдачи.Видимость         = НЕ Объект.ПереключательОплатаСложная;
	Элементы.ДекорацияСуммаИтого.Видимость    = НЕ Объект.ПереключательОплатаСложная;
	Элементы.ДекорацияПодсказка1.Видимость    = НЕ Объект.ПереключательОплатаСложная;
	Элементы.ДекорацияПодсказка2.Видимость    = НЕ Объект.ПереключательОплатаСложная;
	
	
	Элементы.ЭквайринговыйТерминал.Видимость  = НЕ Объект.ПереключательОплатаСложная;
	Элементы.ПроцентТорговойУступки.Видимость = НЕ Объект.ПереключательОплатаСложная;
	Элементы.СуммаТорговойУступки.Видимость   = НЕ Объект.ПереключательОплатаСложная;
	
	Элементы.Оплата.Видимость         = Объект.ПереключательОплатаСложная;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСоздатьДокументы();
	
	Если НЕ МодифицированыСохраняемыеДанные ИЛИ Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСформированныеДокументы Тогда
		
		Элементы.СоздатьДокументы.Доступность = Ложь;
		
	Иначе
		
		Элементы.СоздатьДокументы.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФидимостьПоФО()
	
	ИспользоватьОплатуПлатежнымиКартами = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами");
	
	Если НЕ ИспользоватьОплатуПлатежнымиКартами Тогда
		
		Элементы.ВидОплаты.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	Элементы.ПереключательОплатаСложная.Видимость = ИспользоватьОплатуПлатежнымиКартами;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуНаличными()
	
	НоваяСтрока = Объект.Оплата.Добавить();
	НоваяСтрока.ВидОплаты = ВидОплатыНаличные;
	НоваяСтрока.ТипОплаты = ТипОплаты;
	
	Если Объект.Оплата.Количество() > 1 Тогда
		Сумма = Объект.Товары.Итог("Сумма") - Объект.Оплата.Итог("Сумма");
		НоваяСтрока.Сумма = ?(Сумма > 0, Сумма, 0);
	КонецЕсли;
	
	Элементы.Оплата.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.Оплата.ТекущийЭлемент = Элементы.ОплатаСумма;
	
	Элементы.Оплата.ИзменитьСтроку();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидОплатыПоТипуПлатежнаяКарта()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ВидыОплатЧекаККМ.Ссылка
	|ИЗ
	|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
	|ГДЕ
	|	НЕ ВидыОплатЧекаККМ.ПометкаУдаления
	|	И ВидыОплатЧекаККМ.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьКомандыВидовОплаты()

	ПлатежнаяКарта = ЗначениеНастроекПовтИсп.ПолучитьВидОплатыПоТипу(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта);
	
	Если ПлатежнаяКарта = Неопределено Тогда
		Элементы.ОплатаПлатежнаяКарта.Заголовок = Элементы.ОплатаПлатежнаяКарта.Заголовок + "...";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	Если ТипОткрытияФормы = ПредопределенноеЗначение("Перечисление.СпособыОткрытияОбработкиВозвратаОтПокупателя.ТолькоДляПечати") Тогда
		
		Элементы.СтраницаТоварыТолькоПечать.Видимость	   = Истина;
		Элементы.СтраницаТовары.Видимость 			  	   = Ложь;
		Элементы.СтраницаСформированныеДокументы.Видимость = Ложь;
		Элементы.СоздатьДокументы.Видимость				   = Ложь;
		Элементы.ФормаПечатьПриходнаяНакладная.Видимость   = Ложь;
		Элементы.ФормаПечатьРКО.Видимость				   = Ложь;
		Элементы.Касса.Видимость						   = Ложь;
		Элементы.СтраницаОплата.Видимость                  = Ложь;
		Элементы.ТоварыПоискПоШтрихкоду1.Видимость         = Ложь;
		Элементы.ТоварыУказатьСерии1.Видимость          = Ложь;
		
		Элементы.ТоварыТолькоПечать.ТолькоПросмотр 		   = Истина;
		
	ИначеЕсли ТипОткрытияФормы = ПредопределенноеЗначение("Перечисление.СпособыОткрытияОбработкиВозвратаОтПокупателя.ДляПодбораИПечати") Тогда
		
		Элементы.СтраницаТоварыТолькоПечать.Видимость	   = Истина;
		Элементы.СтраницаТовары.Видимость 			  	   = Ложь;
		Элементы.СтраницаСформированныеДокументы.Видимость = Ложь;
		Элементы.СоздатьДокументы.Видимость				   = Ложь;
		Элементы.ФормаПечатьПриходнаяНакладная.Видимость   = Ложь;
		Элементы.ФормаПечатьРКО.Видимость				   = Ложь;
		Элементы.Касса.Видимость						   = Ложь;
		Элементы.СтраницаОплата.Видимость                  = Ложь;
		
	Иначе
		
		Элементы.СтраницаТоварыТолькоПечать.Видимость = Ложь;
		Элементы.СтраницаТовары.Видимость 			  = Истина;
		Элементы.ЧекВозврат.Видимость                 = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПодсказкиТерминала()
	
	Если ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта") Тогда
		
		Если ЗначениеЗаполнено(Объект.Касса) Тогда 
			Элементы.ДекорацияПодсказка2.Заголовок = "";
		Иначе
			Элементы.ДекорацияПодсказка2.Заголовок = "<нужно выбрать кассу>";
		КонецЕсли;
	Иначе
		Элементы.ДекорацияПодсказка2.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

