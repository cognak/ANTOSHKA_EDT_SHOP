&НаКлиенте
Перем ОбновитьИнтерфейс;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Значения реквизитов формы
	РежимРаботы = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	// Настройки видимости при запуске
	
	// Обновление состояния элементов
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбработчикОповещений(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ИспользоватьЦеновыеГруппыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПрименениеЦенПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
	Если НЕ НаборКонстант.ИспользоватьПрименениеЦен Тогда
		
		СписокМагазинов = Новый СписокЗначений;
		ПроверитьИспользованиеПримененияЦенВМагазинах(СписокМагазинов);
		
		Если СписокМагазинов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru = 'При прекращении использования механизма применения цен необходимо очистить признак использования применения цен в магазинах.
									|Выполнить очистку?'");
		
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.ОК Тогда
			ОчиститьПримененияЦенВМагазинах(СписокМагазинов);
		Иначе
			НаборКонстант.ИспользоватьПрименениеЦен = Истина;
			Подключаемый_ПриИзмененииРеквизита(Элемент);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРучныеСкидкиВПродажахПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическиеСкидкиВПродажахПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАссортиментПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗапретРозничнойПродажиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНеуникальныеКодыИнформационныхКартПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура НастройкиУправленияАссортиментом(Команда)
	
	ОткрытьФорму("Обработка.ПомощникНачалаУправленияАссортиментом.Форма");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		#Если НЕ ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		ОбновитьИнтерфейс = Истина;
		#КонецЕсли
	КонецЕсли;
	
	Если Результат.Свойство("ОповещениеФорм") Тогда
		Оповестить(Результат.ОповещениеФорм.ИмяСобытия, Результат.ОповещениеФорм.Параметр, Результат.ОповещениеФорм.Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	#Если НЕ ВебКлиент Тогда
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

// Обработка оповещений от других открытых форм.
//
// Пример:
//   Если ИмяСобытия = "НаборКонстант.ПрефиксУзлаРаспределеннойИнформационнойБазы" Тогда
//     НаборКонстант.ПрефиксУзлаРаспределеннойИнформационнойБазы = Параметр;
//   КонецЕсли;
//
&НаКлиенте
Процедура ОбработчикОповещений(ИмяСобытия, Параметр, Источник)
	
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	Результат = Новый Структура;
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат;
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		ОповещениеФорм = Новый Структура("ИмяСобытия, Параметр, Источник", "Запись_НаборКонстант", Новый Структура, КонстантаИмя);
		Результат.Вставить("ОповещениеФорм", ОповещениеФорм);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьАссортимент" ИЛИ РеквизитПутьКДанным = "" Тогда
		
		Элементы.НастройкиУправленияАссортиментом.Доступность = НаборКонстант.ИспользоватьАссортимент;
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "" Тогда
		
		Если НаборКонстант.ИспользоватьСинхронизациюДанных Тогда
			Если ПараметрыСеанса.ИспользуемыеПланыОбмена.Найти("ПоМагазину") <> Неопределено
				И ОбменДаннымиПовтИсп.ГлавныйУзел() <> Неопределено Тогда
				
				Элементы.ИспользоватьЦеновыеГруппы.ТолькоПросмотр 					= Истина;
				Элементы.ИспользоватьПрименениеЦен.ТолькоПросмотр 					= Истина;
				Элементы.ИспользоватьРучныеСкидкиВПродажах.ТолькоПросмотр 			= Истина;
				Элементы.ИспользоватьАвтоматическиеСкидкиВПродажах.ТолькоПросмотр 	= Истина;
				Элементы.ИспользоватьАссортимент.ТолькоПросмотр 					= Истина;
				Элементы.НастройкиУправленияАссортиментом.Доступность 				= Ложь;
				Элементы.ИспользоватьЗапретРозничнойПродажи.ТолькоПросмотр  		= Истина;
				Элементы.ИспользоватьНеуникальныеКодыИнформационныхКарт.ТолькоПросмотр = Истина;
				
			ИначеЕсли ПараметрыСеанса.ИспользуемыеПланыОбмена.Найти("ПоРабочемуМесту") <> Неопределено
				И ОбменДаннымиПовтИсп.ГлавныйУзел() <> Неопределено Тогда
				
				Элементы.ИспользоватьРучныеСкидкиВПродажах.ТолькоПросмотр 			= Истина;
				Элементы.ИспользоватьАвтоматическиеСкидкиВПродажах.ТолькоПросмотр 	= Истина;
				Элементы.ИспользоватьЦеновыеГруппы.ТолькоПросмотр 					= Истина;
				Элементы.ИспользоватьПрименениеЦен.ТолькоПросмотр 					= Истина;
				Элементы.ИспользоватьАссортимент.ТолькоПросмотр 					= Истина;
				Элементы.НастройкиУправленияАссортиментом.Доступность 				= Ложь;
				Элементы.ИспользоватьЗапретРозничнойПродажи.ТолькоПросмотр  = Истина;
				Элементы.ИспользоватьНеуникальныеКодыИнформационныхКарт.ТолькоПросмотр = Истина;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИспользованиеПримененияЦенВМагазинах(СписокМагазинов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Магазины.Ссылка КАК Магазин
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.ИспользоватьПрименениеЦен
	|	И НЕ Магазины.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СписокМагазинов.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Магазин"));
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПримененияЦенВМагазинах(СписокМагазинов)
	
	НачатьТранзакцию();
	
	Для Каждого Магазин Из СписокМагазинов Цикл
		МагазинОбъект = Магазин.Значение.ПолучитьОбъект();
		МагазинОбъект.ИспользоватьПрименениеЦен = Ложь;
		МагазинОбъект.Записать();
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры



