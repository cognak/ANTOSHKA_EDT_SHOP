&НаКлиенте
Перем ОбновитьИнтерфейс;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Значения реквизитов формы
	РежимРаботы = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	// Обновление состояния элементов
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбработчикОповещений(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ИспользоватьПодключаемоеОборудованиеПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменСПодключаемымОборудованиемOfflineПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОткрытьРабочиеМеста(Команда)
	
	ПараметрыВыполненияКоманды = Новый Структура;
	ПараметрыВыполненияКоманды.Вставить("Источник", ЭтотОбъект);
	ПараметрыВыполненияКоманды.Вставить("Уникальность", УникальныйИдентификатор);
	ПараметрыВыполненияКоманды.Вставить("Окно",);
	
	МенеджерОборудованияКлиент.ОткрытьРабочиеМеста(Неопределено, ПараметрыВыполненияКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРМТекущегоСеанса(Команда)
	
	МенеджерОборудованияКлиент.ВыбратьРМТекущегоСеанса(Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблоныРаботыДисплеяПокупателя(Команда)
	
	ОткрытьФорму("Справочник.ШаблоныРаботыДисплеяПокупателя.ФормаСписка", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПравилаОбменаСПодключаемымОборудованием(Команда)
	
	ОткрытьФорму("Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline.ФормаСписка", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодключаемоеОборудование(Команда)
	
	ПараметрыВыполненияКоманды = Новый Структура;
	ПараметрыВыполненияКоманды.Вставить("Источник", ЭтотОбъект);
	ПараметрыВыполненияКоманды.Вставить("Уникальность", УникальныйИдентификатор);
	ПараметрыВыполненияКоманды.Вставить("Окно",);
	
	МенеджерОборудованияКлиент.ОткрытьПодключаемоеОборудование(Неопределено, ПараметрыВыполненияКоманды);

	
КонецПроцедуры

&НаКлиенте	//	LNK 28.09.2017 15:50:13
Процедура ОткрытьЭквайринговыеТерминалы(Команда)

	ОткрытьФорму("Справочник.ЭквайринговыеТерминалы.ФормаСписка",, ЭтотОбъект, УникальныйИдентификатор);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		#Если НЕ ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		ОбновитьИнтерфейс = Истина;
		#КонецЕсли
	КонецЕсли;
	
	Если Результат.Свойство("ОповещениеФорм") Тогда
		Оповестить(Результат.ОповещениеФорм.ИмяСобытия, Результат.ОповещениеФорм.Параметр, Результат.ОповещениеФорм.Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	#Если НЕ ВебКлиент Тогда
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещений(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		УстановитьДоступность();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	Результат = Новый Структура;
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат;
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		УстановитьЗначенияЗависимыхКонстант(КонстантаИмя, Результат);
		
		ОповещениеФорм = Новый Структура("ИмяСобытия, Параметр, Источник", "Запись_НаборКонстант", Новый Структура, КонстантаИмя);
		Результат.Вставить("ОповещениеФорм", ОповещениеФорм);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	ИспользоватьПодключаемоеОборудование 				= НаборКонстант.ИспользоватьПодключаемоеОборудование;
	ИспользоватьОбменСПодключаемымОборудованиемOffline 	= НаборКонстант.ИспользоватьОбменСПодключаемымОборудованиемOffline;
	
	ИспользоватьСинхронизациюДанных = Константы.ИспользоватьСинхронизациюДанных.Получить();
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПодключаемоеОборудование" ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьОбменСПодключаемымОборудованиемOffline" ИЛИ РеквизитПутьКДанным = "" Тогда
		
		Элементы.ОткрытьПодключаемоеОборудование.Доступность 					= ИспользоватьПодключаемоеОборудование;
		Элементы.ОткрытьРабочиеМеста.Доступность 								= ИспользоватьПодключаемоеОборудование;
		Элементы.ВыбратьРМТекущегоСеанса.Доступность 							= ИспользоватьПодключаемоеОборудование;
		Элементы.ОткрытьШаблоныРаботыДисплеяПокупателя.Доступность 				= ИспользоватьПодключаемоеОборудование;
		Элементы.ОткрытьШаблоныРегистрацииНовыхКарт.Доступность 				= ИспользоватьПодключаемоеОборудование;
		Элементы.ИспользоватьОбменСПодключаемымОборудованиемOffline.Доступность = ИспользоватьПодключаемоеОборудование;
		
		Элементы.ОткрытьПравилаОбменаСПодключаемымОборудованием.Доступность 	  = ИспользоватьОбменСПодключаемымОборудованиемOffline;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "" Тогда
		
		Если ИспользоватьСинхронизациюДанных Тогда
			Если ПараметрыСеанса.ИспользуемыеПланыОбмена.Найти("ПоМагазину") <> Неопределено
				И ОбменДаннымиПовтИсп.ГлавныйУзел() <> Неопределено Тогда
				
			ИначеЕсли ПараметрыСеанса.ИспользуемыеПланыОбмена.Найти("ПоРабочемуМесту") <> Неопределено
				И ОбменДаннымиПовтИсп.ГлавныйУзел() <> Неопределено Тогда
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияЗависимыхКонстант(ИмяРодительскойКонстанты, Результат)
	
	Если ИмяРодительскойКонстанты = "ИспользоватьПодключаемоеОборудование" Тогда
		
		Если Не НаборКонстант.ИспользоватьПодключаемоеОборудование Тогда
			
			НаборКонстант.ИспользоватьОбменСПодключаемымОборудованиемOffline = Ложь;
			СохранитьЗначениеРеквизита("НаборКонстант.ИспользоватьОбменСПодключаемымОборудованиемOffline", Результат);
		КонецЕсли;
		
	ИначеЕсли ИмяРодительскойКонстанты = "ИспользоватьОбменСПодключаемымОборудованиемOffline" Тогда
		
		НаборКонстант.SKUУстанавливаетсяВГлавномУзлеРИБ = Ложь;
		СохранитьЗначениеРеквизита("НаборКонстант.SKUУстанавливаетсяВГлавномУзлеРИБ", Результат);
		
	КонецЕсли;
	
КонецПроцедуры

