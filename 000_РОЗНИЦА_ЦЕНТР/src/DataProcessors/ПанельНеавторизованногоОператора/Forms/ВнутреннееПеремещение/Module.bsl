&НаКлиенте
Перем КэшированныеЗначения;

#Область ПрограммныйИнтерфейсПодключаемогоОборудования

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод, Количество = Неопределено, ОбновитьКоличество = Ложь) Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаТоваров");
	
	Если НЕ (Количество = Неопределено) Тогда

		СтруктураДействий.Вставить("ИспользоватьКоличество", Количество);

		Если ОбновитьКоличество Тогда

			СтруктураДействий.Вставить("ОбновитьКоличество", Количество);

		КонецЕсли;

	КонецЕсли;

	Возврат ПодключаемоеОборудованиеРТ.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции
 
&НаСервере
Функция ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента) Экспорт
	
	Если НЕ СтруктураПараметров.НеизвестныеДанныеПО Тогда
		Если СтруктураПараметров.Действие = "ПроверкаВесовыхТоваров" Тогда
			
			ВходящиеПараметры = СтруктураПараметров.ЗначенияПоиска[0];
			ДобавитьНайденныеПозицииТоваров(ВходящиеПараметры);
			СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
			
		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаТоваров" Тогда
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				Если СтруктураПараметров.ЗначенияПоиска.Количество() = 1 Тогда
					
					ВходящиеПараметры = СтруктураПараметров.ЗначенияПоиска[0];
					Если СтруктураПараметров.Свойство("ИспользоватьКоличество") Тогда
						ВходящиеПараметры.Вставить("Количество", СтруктураПараметров.ИспользоватьКоличество);
					КонецЕсли;
					Если СтруктураПараметров.Свойство("ОбновитьКоличество") Тогда
						ВходящиеПараметры.Вставить("ОбновитьКоличество", СтруктураПараметров.ИспользоватьКоличество);
					КонецЕсли;
					
					ДобавитьНайденныеПозицииТоваров(ВходящиеПараметры);
					
				Иначе
					ТаблицаТоваров = Новый ТаблицаЗначений;
					ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
					ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
					ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
					Для каждого ЗначениеПоиска Из СтруктураПараметров.ЗначенияПоиска Цикл
						ТекущаяСтрока = ТаблицаТоваров.Добавить();
						ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначениеПоиска)
					КонецЦикла;	
					СтруктураПараметровКлиента.Вставить("ВыборТоваров", ПоместитьВоВременноеХранилище(ТаблицаТоваров));
				КонецЕсли;
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураПараметровКлиента;
	
КонецФункции

// Обработка магнитного или штрихового кода на клиенте
//
// Параметры
//  СтруктураПараметровКлиента - структура параметров
//
&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод) Экспорт
	
	Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") 
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
		
		СтрокаСообщения = НСтр("ru = 'Данные по коду не найдены: %1%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекКод);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ТекстПредупреждения") Тогда
		
		ПоказатьПредупреждение(, СтруктураПараметровКлиента.ТекстПредупреждения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ВыборТоваров") Тогда
		
		ВыбранноеЗначение = ОткрытьФормуМодально("ОбщаяФорма.ВыборНоменклатуры", Новый Структура("АдресТоваровВХранилище", СтруктураПараметровКлиента.ВыборТоваров));
		Если ВыбранноеЗначение <> Неопределено Тогда
			
			ДобавитьНайденныеПозицииТоваров(ВыбранноеЗначение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиОсновныхСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Объект.Магазин = ПараметрыСеанса.ТекущийМагазин;
	ИспользоватьПодключаемоеОборудование = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");

	ВнестиВТорговыйЗал = Истина;
	УстановитьГруппыСкладов();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УстановитьОформлениеКнопкиНаправлениеПеремещения();

	МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();

	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочееМесто, "КладовщикВиртуальнойПолки", Ложь) Тогда

		Отказ = Истина;

	Иначе

		// ПодключаемоеОборудование
		Если ИспользоватьПодключаемоеОборудование	Тогда
			ОписаниеОшибки = "";

			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

			Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
				ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:
				                      |""%ОписаниеОшибки%"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		// Конец ПодключаемоеОборудование

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" Тогда

		Если ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[1] = Неопределено Тогда

					ТекКод = Параметр[0];

			Иначе	ТекКод = Параметр[1][1];

			КонецЕсли;

			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекКод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);

		КонецЕсли;

	КонецЕсли;
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)


КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	// ПодключаемоеОборудование
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец ПодключаемоеОборудование

	ЗавершитьРаботуСистемы(Ложь);

КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

&НаСервере
Функция ПровестиИЗакрытьНаСервере(ТекстСообщения)

	ОбработкаОбъект  = РеквизитФормыВЗначение("Объект");
	ДокументПроведен = Ложь;

	ДокументПроведен = ОбработкаОбъект.СформироватьОрдерНаПеремещениеТоваров(ТекстСообщения);

	Возврат ДокументПроведен;

КонецФункции

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)

	Если ПроверитьЗаполнение() Тогда

		ТекстСообщения = "";

		Если ПровестиИЗакрытьНаСервере(ТекстСообщения) Тогда

			Объект.Товары.Очистить();

		Иначе

			ПоказатьОповещениеПользователя("Документ НЕ сформирован!",, ТекстСообщения, БиблиотекаКартинок.Предупреждение32);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НаправлениеПеремещения(Команда)

	ВнестиВТорговыйЗал = НЕ ВнестиВТорговыйЗал;

	УстановитьОформлениеКнопкиНаправлениеПеремещения();

КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СкладОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличногоПоляТовары
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличногоПоляТовары

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
//	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата", ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера());
	СтруктураЗаполненияЦены.Вставить("ОбъектЦенообразования", Объект.Магазин);
	СтруктураЗаполненияЦены.Вставить("ПриводитьКМинимальнойЦене", Ложь);
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" , СтруктураЗаполненияЦены);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПолучитьОстатокСклада", Новый Структура("Склад, Граница"
																		, Объект.СкладОтправитель
																		, ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера()));

	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьГруппыСкладов()

	ГруппыСкладов = Новый Структура("Розница, Хранение", Новый Массив, Новый Массив);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(Данные.Розница) КАК Розница,
	|	МАКСИМУМ(Данные.Хранение) КАК Хранение
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаСправочник.Ссылка КАК Розница,
	|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Хранение
	|	ИЗ
	|		Справочник.Склады КАК ТаблицаСправочник
	|	ГДЕ
	|		ТаблицаСправочник.Магазин = &Магазин
	|		И НЕ(ТаблицаСправочник.Блокирован
	|					ИЛИ ТаблицаСправочник.ПометкаУдаления
	|					ИЛИ ТаблицаСправочник.ЭтоГруппа)
	|		И ТаблицаСправочник.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.ТорговыйЗал)
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
	|		ТаблицаСправочник.Ссылка
	|	ИЗ
	|		Справочник.Склады КАК ТаблицаСправочник
	|	ГДЕ
	|		ТаблицаСправочник.Магазин = &Магазин
	|		И НЕ(ТаблицаСправочник.Блокирован
	|					ИЛИ ТаблицаСправочник.ПометкаУдаления
	|					ИЛИ ТаблицаСправочник.ЭтоГруппа)
	|		И ТаблицаСправочник.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.СкладскоеПомещение)) КАК Данные"
	);
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	ТаблицаСкладов = Запрос.Выполнить().Выгрузить();
	ГруппыСкладов.Розница  = ТаблицаСкладов.ВыгрузитьКолонку("Розница");
	ГруппыСкладов.Хранение = ТаблицаСкладов.ВыгрузитьКолонку("Хранение");

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСклад(Суффикс, Коллекция)

	Если ГруппыСкладов[Коллекция].Количество() = 0 Тогда

			Объект["Склад" + Суффикс] = Неопределено;

	Иначе	Объект["Склад" + Суффикс] = ГруппыСкладов[Коллекция][0];

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеКнопкиНаправлениеПеремещения()

	УстановитьСклад("Отправитель", ?(ВнестиВТорговыйЗал, "Хранение", "Розница"));
	УстановитьСклад("Получатель" , ?(ВнестиВТорговыйЗал, "Розница" , "Хранение"));

	Если ВнестиВТорговыйЗал Тогда

		Элементы.НаправлениеПеремещения.Заголовок = "ВНЕСТИ В Розницу";

	Иначе

		Элементы.НаправлениеПеремещения.Заголовок = "ВЫНЕСТИ ИЗ Розницы";

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) 
	
	УстановитьПривилегированныйРежим(Истина);

	Если СтруктураПараметров.Свойство("Количество") Тогда 
		КоличествоУпаковок = СтруктураПараметров.Количество;
		СтруктураПараметров.Удалить("Количество");
	Иначе
		КоличествоУпаковок = 1;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ОбновитьКоличество") Тогда 
		СтруктураПараметров.Удалить("ОбновитьКоличество");
		ОбновитьКоличество = Истина;
	Иначе
		ОбновитьКоличество = Ложь;
	КонецЕсли;

	
	СтруктураДействий = Новый Структура;
	МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураПараметров);
	
	Если МассивСтрок.Количество() > 0 Тогда 
		
		ТекущаяСтрока = МассивСтрок[0];
		КоэффициентУпаковки1 = ?(ЗначениеЗаполнено(СтруктураПараметров.Упаковка), СтруктураПараметров.Упаковка.Коэффициент, 1);
		КоэффициентУпаковки2 = ?(ЗначениеЗаполнено(ТекущаяСтрока.Упаковка), ТекущаяСтрока.Упаковка.Коэффициент, 1);
		
		Если ОбновитьКоличество Тогда  
			ТекущаяСтрока.КоличествоУпаковок = КоличествоУпаковок*КоэффициентУпаковки2/КоэффициентУпаковки1;
		Иначе
			ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + КоличествоУпаковок*КоэффициентУпаковки2/КоэффициентУпаковки1;
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
	Иначе 
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ТекущаяСтрока.КоличествоУпаковок = КоличествоУпаковок;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураПараметров);
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураЗаполненияЦены = Новый Структура;
		СтруктураЗаполненияЦены.Вставить("Дата", ТекущаяДатаСеанса());
		СтруктураЗаполненияЦены.Вставить("ОбъектЦенообразования", Объект.Магазин);
		СтруктураЗаполненияЦены.Вставить("ПриводитьКМинимальнойЦене", Ложь);
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" , СтруктураЗаполненияЦены);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
	КонецЕсли;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);

	Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти











