#Область ПрограммныйИнтерфейсПодключаемогоОборудования

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод, Количество = Неопределено, ОбновитьКоличество = Ложь) Экспорт
	
	СтруктураДействий = Новый Структура;
//	СтруктураДействий.Вставить("ПроверкаВесовыхТоваров");
	СтруктураДействий.Вставить("ПроверкаТоваров");
//	СтруктураДействий.Вставить("ПроверкаСерийныхНомеров");

	УстановитьПривилегированныйРежим(Истина);

	Возврат ПодключаемоеОборудованиеРТ.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

&НаСервере
Функция ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента) Экспорт

	Если НЕ СтруктураПараметров.НеизвестныеДанныеПО Тогда		

		Если СтруктураПараметров.Действие = "ПроверкаТоваров" Тогда

			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда				

				ВходящиеПараметры = СтруктураПараметров.ЗначенияПоиска[0];

				ОбработатьНайденнуюПозициюТовара(ВходящиеПараметры);
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск", Истина);

			КонецЕсли;				

		КонецЕсли;

	КонецЕсли;
	
	Возврат СтруктураПараметровКлиента;
	
КонецФункции

// Обработка магнитного или штрихового кода на клиенте
//
// Параметры
//  СтруктураПараметровКлиента - структура параметров
//
&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, Штрихкод = "")	Экспорт
	
	Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") 
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда

		СтрокаСообщения = НСтр("ru = 'Данные по коду не найдены: %1%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", Штрихкод);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);

	ИначеЕсли СтруктураПараметровКлиента.Свойство("ТекстПредупреждения") Тогда

		ПоказатьПредупреждение(, СтруктураПараметровКлиента.ТекстПредупреждения);

	КонецЕсли;

	СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Элементы.Номенклатура.СписокВыбора, Объект.Номенклатура,, 15);
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ПанельНеавторизованногоОператора", "СписокВыбораНоменклатуры", Элементы.Номенклатура.СписокВыбора.ВыгрузитьЗначения());

	УстановитьТекущийЭлемент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОсновныхСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ИнициализацияРеквизитов();

	Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПанельНеавторизованногоОператора", "СписокВыбораНоменклатуры", Новый Массив));

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();

	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочееМесто, "КладовщикВиртуальнойПолки", Ложь) Тогда

		Отказ = Истина;

	Иначе

		// ПодключаемоеОборудование
		Если ИспользоватьПодключаемоеОборудование	Тогда
			ОписаниеОшибки = "";

			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

			Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
				ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:
				                      |""%ОписаниеОшибки%"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		// Конец ПодключаемоеОборудование

	КонецЕсли;

	УстановитьТекущийЭлемент();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" Тогда

		Если ИмяСобытия = "ScanData" Тогда

			Если Параметр[1] = Неопределено Тогда

					Штрихкод = Параметр[0];

			Иначе	Штрихкод = Параметр[1][1];

			КонецЕсли;

			ПредставлениеНоменклатуры = "";
			Объект.ТоварыНаСкладах.Очистить();

			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, Штрихкод);

		КонецЕсли;

	КонецЕсли;
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)


КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	// ПодключаемоеОборудование
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец ПодключаемоеОборудование

	ЗавершитьРаботуСистемы(Ложь);

КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиЭлементовФормы

&НаКлиенте
Процедура НоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	УстановитьТекущийЭлемент();

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	НоменклатураПриИзменении(Элемент);

	ПоказатьОповещениеПользователя("Данные обновлены!",, "Информация о текущем товаре обновлена", БиблиотекаКартинок.Информация32);

	УстановитьТекущийЭлемент();

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)

	ПредставлениеНоменклатуры = "";
	Объект.ТоварыНаСкладах.Очистить();

	ОбработатьНайденнуюПозициюТовара(Новый Структура("Номенклатура", Объект.Номенклатура));

	СтруктураПараметровКлиента = Новый Структура("НеизвестныеДанныеПО", Ложь);
	ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализацияРеквизитов()

	УстановитьПривилегированныйРежим(Истина);

	Объект.Магазин = ПараметрыСеанса.ТекущийМагазин;
	ИспользоватьПодключаемоеОборудование = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Магазины.ПравилоЦенообразования.ВидЦен КАК ВидЦен,
	|	Магазины.ОбособленноеПодразделениеОрганизации КАК ОбособленноеПодразделениеОрганизации
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.Ссылка = &ТекущийМагазин"
	);
	Запрос.УстановитьПараметр("ТекущийМагазин", Объект.Магазин);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		ВидЦеныМагазина = Выборка.ВидЦен;
		Объект.ОбособленноеПодразделениеОрганизации = Выборка.ОбособленноеПодразделениеОрганизации;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьНайденнуюПозициюТовара(СтруктураПараметров)

	СтруктураПараметров.Свойство("Номенклатура", Объект.Номенклатура);

	ПолучитьПредставлениеНоменклатуры();

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаполнитьТоварыНаСкладах(Объект.Номенклатура);

	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");

КонецПроцедуры

&НаСервере
Процедура ПолучитьПредставлениеНоменклатуры()

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Ведущая.Ссылка КАК Ссылка,
	|	Ведущая.Код КАК Код,
	|	Ведущая.Наименование КАК Наименование,
	|	Ведущая.НаименованиеПолное КАК НаименованиеПолное,
	|	Ведущая.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Ведущая.СтавкаНДС КАК СтавкаНДС,
	|	ЕСТЬNULL(ДействующиеЦеныТекущие.Цена, 0) КАК ЦенаТекущая,
	|	ЕСТЬNULL(ДействующиеЦеныТекущие.Акция, ЛОЖЬ) КАК АкцияТекущая,
	|	ЕСТЬNULL(ДействующиеЦеныВчерашние.Цена, 0) КАК ЦенаВчера,
	|	ЕСТЬNULL(ДействующиеЦеныВчерашние.Акция, ЛОЖЬ) КАК АкцияВчера,
	|	ЕСТЬNULL(ПлановыеЦены.Цена, 0) КАК ЦенаЗавтра,
	|	ЕСТЬNULL(ПлановыеЦены.Акция, ЛОЖЬ) КАК АкцияЗавтра
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	Справочник.Номенклатура КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
	|				КОНЕЦПЕРИОДА(&Период, ДЕНЬ),
	|				ОбъектЦенообразования = &ТекущийМагазин
	|					И Номенклатура = &Номенклатура) КАК ДействующиеЦеныТекущие
	|		ПО Ведущая.Ссылка = ДействующиеЦеныТекущие.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
	|				ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&Период, ДЕНЬ), ДЕНЬ, -1),
	|				ОбъектЦенообразования = &ТекущийМагазин
	|					И Номенклатура = &Номенклатура) КАК ДействующиеЦеныВчерашние
	|		ПО Ведущая.Ссылка = ДействующиеЦеныВчерашние.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&Период, ДЕНЬ), ДЕНЬ, 1),
	|				ВидЦены = &ВидЦеныМагазина
	|					И Номенклатура = &Номенклатура) КАК ПлановыеЦены
	|		ПО Ведущая.Ссылка = ПлановыеЦены.Номенклатура
	|ГДЕ
	|	Ведущая.Ссылка = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведущая.Код КАК Код,
	|	Ведущая.Наименование КАК Наименование,
	|	Ведущая.НаименованиеПолное КАК НаименованиеПолное,
	|	Ведущая.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Ведущая.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаРеквизиты.Свойство КАК Свойство,
	|	ТаблицаРеквизиты.Значение КАК ЗначениеСвойства,
	|	Ведущая.ЦенаТекущая КАК ЦенаТекущая,
	|	Ведущая.АкцияТекущая КАК АкцияТекущая,
	|	Ведущая.ЦенаВчера КАК ЦенаВчера,
	|	Ведущая.АкцияВчера КАК АкцияВчера,
	|	Ведущая.ЦенаЗавтра КАК ЦенаЗавтра,
	|	Ведущая.АкцияЗавтра КАК АкцияЗавтра
	|ИЗ
	|	Источник КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ТаблицаРеквизиты
	|		ПО Ведущая.Ссылка = ТаблицаРеквизиты.Ссылка"
	);
	Запрос.УстановитьПараметр("Период"         , ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТекущийМагазин" , Объект.Магазин);
	Запрос.УстановитьПараметр("ВидЦеныМагазина", ВидЦеныМагазина);
	Запрос.УстановитьПараметр("Номенклатура"   , Объект.Номенклатура);
	
	Результат = Запрос.Выполнить();

	ПредставлениеНоменклатуры = "";

	Если НЕ Результат.Пустой() Тогда

		ПредставлениеНоменклатуры = СокрЛП(Объект.Номенклатура);

		Первая  = Истина;
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл

			Если Первая Тогда

				ПредставлениеНоменклатуры =
					"Код: " + СокрЛП(Выборка.Код) + Символы.ПС +
					"Представление: " + СокрЛП(Выборка.Наименование) + Символы.ПС +
					"Наименование: " + СокрЛП(Выборка.НаименованиеПолное) + Символы.ПС +
					"Проект: " + СокрЛП(Выборка.ВидНоменклатуры) + Символы.ПС +
					"Ставка НДС: " + СокрЛП(Выборка.СтавкаНДС) + Символы.ПС + Символы.ПС +
					"ЦЕНА текущая: " + Формат(Выборка.ЦенаТекущая, "ЧДЦ=2; ЧН=0,00") + ?(Выборка.АкцияТекущая = Истина, " (Акция)", "") + Символы.ПС +
					"ЦЕНА вчера: " + Формат(Выборка.ЦенаВчера, "ЧДЦ=2; ЧН=0,00") + ?(Выборка.АкцияВчера = Истина, " (Акция)", "") + Символы.ПС +
					"ЦЕНА завтра: " + Формат(Выборка.ЦенаЗавтра, "ЧДЦ=2; ЧН=0,00") + ?(Выборка.АкцияЗавтра = Истина, " (Акция)", "") + Символы.ПС;

			КонецЕсли;

			Первая = Ложь;

			Если ЗначениеЗаполнено(Выборка.Свойство) Тогда

				ПредставлениеНоменклатуры = ПредставлениеНоменклатуры + Символы.ПС +
					СокрЛП(Выборка.Свойство) + ": " + СокрЛП(Выборка.ЗначениеСвойства);

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлемент()

	ПодключитьОбработчикОжидания("УстановитьТекущийЭлементЗавершение", 0.2, Истина);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементЗавершение()

	ТекущийЭлемент = Элементы.Номенклатура;

КонецПроцедуры

#КонецОбласти

