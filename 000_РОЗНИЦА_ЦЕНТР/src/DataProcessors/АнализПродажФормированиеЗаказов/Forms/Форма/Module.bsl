
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	//Видимость элементов при открытии
	//упаковки
	ИспользоватьУпаковки = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	Элементы.ПараметрыОкругления.Видимость = Не ИспользоватьУпаковки;
	Элементы.КЗаказуУпаковкаЕдИзм.Видимость = ИспользоватьУпаковки;
	//команды
	Элементы.ФормаПерейтиФормированиеЗаказов.Видимость 	= Ложь;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ДатаРасчета				= ТекущаяДатаСеанса;
	НачалоПродаж			= ТекущаяДатаСеанса;
	ЖелаемаяДатаПоставки	= ТекущаяДатаСеанса;
	
	ИзменитьВидимостьКолонокАссортимента();
	
	ЗагрузитьНастройкиОтбораПоУмолчанию();
	
	УстановитьБлокировкуФормыСервер(Истина);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьПросроченныеЗаказы(ДатаРасчета, Магазин);
	УстановитьДоступностьКомандСозданияДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Магазин						= Настройки.Получить("Магазин");
	Поставщик					= Настройки.Получить("Поставщик");
	
	ПериодПродаж				= Настройки.Получить("ПериодПродаж");
	ПланируемыйОстаток			= Настройки.Получить("ПланируемыйОстаток");
	ПорядокОкругления			= Настройки.Получить("ПорядокОкругления");
	ФормироватьВозвраты			= Настройки.Получить("ФормироватьВозвраты"); 
	ПериодАнализа				= Настройки.Получить("ПериодАнализа");
	
	Если Не ИспользоватьУпаковки Тогда 
		ОкруглятьВБольшуюСторону	= Настройки.Получить("ОкруглятьВБольшуюСторону");
		ПорядокОкругления			= Настройки.Получить("ПорядокОкругления");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Магазин) Тогда
		Магазин = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Магазин);
	КонецЕсли;
	
	Если Поставщик = Неопределено Тогда
		Ответственный	= Пользователи.ТекущийПользователь();
		Поставщик		= ЗначениеНастроекПовтИсп.ПолучитьПоставщикаПоУмолчанию(Поставщик, Ответственный);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

//ОСНОВНАЯ СТРАНИЦА

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	ПроверитьПросроченныеЗаказы(ДатаРасчета, Магазин);
	УстановитьБлокировкуФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАнализаПриИзменении(Элемент)
	УстановитьБлокировкуФормы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	УстановитьБлокировкуФормы(Истина);
	УстановитьДоступностьКомандСозданияДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПродажПриИзменении(Элемент)
	УстановитьБлокировкуФормы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДнейПродажПриИзменении(Элемент)
	УстановитьБлокировкуФормы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПланируемыйОстатокПриИзменении(Элемент)
	УстановитьБлокировкуФормы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОкруглятьВБольшуюСторонуПриИзменении(Элемент)
	УстановитьБлокировкуФормы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПорядокОкругленияПриИзменении(Элемент)
	УстановитьБлокировкуФормы(Истина);
КонецПроцедуры

//СТРАНИЦА ЗАКРЫТИЕ ЗАКАЗОВ

&НаКлиенте
Процедура ДатаЗакрытияЗаказовПриИзменении(Элемент)
	
	УстановитьБлокировкуФормы(Истина);
	ЗаполнитьЗаказыЗакрытиеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинЗакрытиеЗаказовПриИзменении(Элемент)
	УстановитьБлокировкуФормы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикЗакрытиеЗаказовПриИзменении(Элемент)
	УстановитьБлокировкуФормы(Истина);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "Результат"

&НаКлиенте
Процедура РезультатВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяПоле = Поле.Имя;
	
	Если ИмяПоле = "ОжидаемоеПоступлениеКоличество" Тогда
		Отказ = Ложь;
		ТабличныйДокументРезультат = Новый ТабличныйДокумент;
		
		ТекущаяСтрока = Элементы.Результат.ТекущаяСтрока;
		
		СформироватьРасшифровкуКПоступлению(ТекущаяСтрока, Отказ, ТабличныйДокументРезультат);
		
		Если Не Отказ Тогда
			ТабличныйДокументРезультат.Показать("Товары к поступлению");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяПоле <> "Номенклатура" И ИмяПоле <> "Характеристика"
		И ИмяПоле <> "РезультатПоставщик" И ИмяПоле <> "РезультатМагазин" Тогда 
		
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(Поле.Имя, "Результат", "");
		
	Значение = Элемент.ТекущиеДанные[ИмяРеквизита];
	Если ЗначениеЗаполнено(Значение) Тогда
		ОткрытьЗначение(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПометкаПриИзменении(Элемент)
	
	ПометкаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура КЗаказуУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Результат.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура КЗаказуУпаковкаПриИзменении(Элемент)
	
	ПересчитатьКоличествоУпаковок();
	ПересчитатьСуммуВСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура КЗаказуКоличествоПриИзменении(Элемент)
	
	//Пересчет упаковок
	Если ИспользоватьУпаковки Тогда
		ПересчитатьКоличествоУпаковок();
	КонецЕсли;
	ПересчитатьСуммуВСтроке();
	ОчиститьКЗаказуВозврату("КВозврату");
	
	ТекущиеДанные = Элементы.Результат.ТекущиеДанные;
	Если ТекущиеДанные.Пометка = Ложь Тогда
		ТекущиеДанные.Пометка = Истина;
		ПометкаПриИзменении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КЗаказуКоличествоУпаковокПриИзменении(Элемент)
	
	ОчиститьКЗаказуВозврату("КВозврату");
	
	ТекущиеДанные = Элементы.Результат.ТекущиеДанные;
	ТекущийКоэффициент = ?(ЗначениеЗаполнено(ТекущиеДанные.Коэффициент),ТекущиеДанные.Коэффициент, 1);
	ТекущиеДанные.КЗаказуКоличество = ТекущиеДанные.КЗаказуКоличествоУпаковок*ТекущийКоэффициент;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.КЗаказуКоличествоУпаковок) Тогда
		ТекущиеДанные.КЗаказуУпаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка");
		ТекущиеДанные.Коэффициент = 1;
	КонецЕсли;
	
	ПересчитатьСуммуВСтроке();
	
	Если ТекущиеДанные.Пометка = Ложь Тогда
		ТекущиеДанные.Пометка = Истина;
		ПометкаПриИзменении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КВозвратуКоличествоПриИзменении(Элемент)
	
	ОчиститьКЗаказуВозврату("КЗаказу");
	
	ПересчитатьСуммуВСтроке();
	
	ТекущиеДанные = Элементы.Результат.ТекущиеДанные;
	Если ТекущиеДанные.Пометка = Ложь Тогда
		ТекущиеДанные.Пометка = Истина;
		ПометкаПриИзменении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	
	ПересчитатьСуммуВСтроке();
	
	ТекущиеДанные = Элементы.Результат.ТекущиеДанные;
	Если ТекущиеДанные.Пометка = Ложь Тогда
		ТекущиеДанные.Пометка = Истина;
		ПометкаПриИзменении();
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "ЗаказыЗакрытие"

&НаКлиенте
Процедура ЗаказыЗакрытиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗаказыЗакрытие.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

//ОСНОВАНЯ СТРАНИЦА

&НаКлиенте
Процедура ПоказатьОтбор(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных", АдресСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("АдресКомпоновщикаНастроек", АдресКомпоновщикаНастроек);
	ПараметрыФормы.Вставить("УникальныйИдентификаторФормы", ЭтотОбъект.УникальныйИдентификатор);
	ДанныеВозврата = ОткрытьФормуМодально("Обработка.АнализПродажФормированиеЗаказов.Форма.ФормаОтбора", ПараметрыФормы, Элементы.ПоказатьОтбор);
	
	Если ДанныеВозврата <> Неопределено И ДанныеВозврата.Результат ="ОК" Тогда
		АдресКомпоновщикаНастроек = ДанныеВозврата.АдресКомпоновщикаНастроек;
	КонецЕсли;
	
	УстановитьБлокировкуФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	РассчитатьРезультатСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьСнятьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьСнятьФлажки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиЗакрытиеЗаказов(Команда)
	
	ДатаЗакрытияЗаказов = ДатаРасчета;
	МагазинЗакрытиеЗаказов = Магазин;
	
	Если ЗначениеЗаполнено(Поставщик) И ТипЗнч(Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПоставщикЗакрытиеЗаказовПоставщика = Поставщик;
	Иначе
		ПоставщикЗакрытиеЗаказовПоставщика = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;
	
	СменитьВидимостьСтраницы("СтраницаЗакрытиеЗаказов");
	
	ЗаполнитьЗаказыЗакрытиеСервер();
	УстановитьБлокировкуФормы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыЗаказПоставщику(Команда)
	СоздатьДокументы("ЗаказПоставщику");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыВозвратПоставщику(Команда)
	СоздатьДокументы("ВозвратПоставщику");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыЗаказНаПеремещение(Команда)
	СоздатьДокументы("ЗаказНаПеремещение");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыЗаказНаПеремещениеВозврат(Команда)
	СоздатьДокументы("ЗаказНаПеремещениеВозврат");
КонецПроцедуры

//СТРАНИЦА ЗАКРЫТИЕ ЗАКАЗОВ

&НаКлиенте
Процедура ЗаполнитьЗаказыЗакрытие(Команда)
	
	Если НЕ ЗначениеЗаполнено(ДатаЗакрытияЗаказов) Тогда
		Текст = НСтр("ru = 'Поле ""Дата закрытия заказов"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "ДатаЗакрытияЗаказов",,);
		Возврат;
	КонецЕсли;
	
	Если ЗаказыЗакрытие.Количество() > 0 Тогда
		Ответ = Вопрос("Содержимое таблицы заказов будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗаказыЗакрытиеСервер();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗакрытиеЗаказов(Команда)
	
	ВыполнитьЗакрытиеЗаказовСервер();
	ЗаполнитьЗаказыЗакрытиеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиЗакрытиеЗаказов(Команда)
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ЗаказыЗакрытие.ВыделенныеСтроки Цикл
		СтрокаДанныеТаблица = ЗаказыЗакрытие.НайтиПоИдентификатору(ВыделеннаяСтрока);
		СтрокаДанныеТаблица.Пометка = Истина;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиЗакрытиеЗаказов(Команда)
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ЗаказыЗакрытие.ВыделенныеСтроки Цикл
		СтрокаДанныеТаблица = ЗаказыЗакрытие.НайтиПоИдентификатору(ВыделеннаяСтрока);
		СтрокаДанныеТаблица.Пометка = Ложь;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиФормированиеЗаказов(Команда)
	
	СменитьВидимостьСтраницы("ОсновнаяСтраница");
	ПроверитьПросроченныеЗаказы(ДатаРасчета, Магазин);
	
	УстановитьБлокировкуФормы(Истина);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ПометкаПриИзменении()
	
	ТекущиеДанные = Элементы.Результат.ТекущиеДанные;
	Пометка = ТекущиеДанные.Пометка;
	ТекущаяСтрока = Элементы.Результат.ТекущаяСтрока;
	ТекущийПоставщик = ТекущиеДанные.Поставщик;
	
	Если Пометка Тогда
		СчетчикПометок = СчетчикПометок + 1;
		УстановитьПометку(ТекущаяСтрока);
		УстановитьБлокировкуСтрок(ТекущийПоставщик);
	Иначе
		СчетчикПометок = СчетчикПометок - 1;
		СнятьПометку(ТекущаяСтрока, Истина, Истина);
		СнятьБлокировкуСтрок();
	КонецЕсли;
	
КонецПроцедуры

//Процедура пересчета суммы в строке
//
&НаКлиенте
Процедура ПересчитатьСуммуВСтроке()
	ТекущиеДанные = Элементы.Результат.ТекущиеДанные;
	
	ТекущиеДанные.СуммаЗаказа = ТекущиеДанные.КЗаказуКоличество * ТекущиеДанные.Цена;
	ТекущиеДанные.СуммаВозврата = ТекущиеДанные.КВозвратуКоличество * ТекущиеДанные.Цена;
	
КонецПроцедуры

//Процедура пересчета количества упаковок в строке
//
&НаКлиенте
Процедура ПересчитатьКоличествоУпаковок()
	ТекущиеДанные = Элементы.Результат.ТекущиеДанные;
	
	//Если Не ЗначениеЗаполнено(ТекущиеДанные.КЗаказу) Тогда
	//	Возврат;
	//КонецЕсли;
	
	//Если ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда
	//	ВыбранныйКоэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Упаковка, "Коэффициент");
	//	
	//	Если ЗначениеЗаполнено(ТекущиеДанные.КЗаказу) Тогда
	//		ТекущиеДанные.КЗаказуКоличествоУпаковок = Ценообразование.ОкруглитьЦену(ТекущиеДанные.ПотребностьКоличество/ВыбранныйКоэффициент, 1, Истина);
	//	Иначе
	//		
	//	КонецЕсли;
	//	
	//	Если ЗначениеЗаполнено(ТекущиеДанные.Коэффициент) Тогда
	//		ТекущиеДанные.Цена = ТекущиеДанные.Цена*ВыбранныйКоэффициент/ТекущиеДанные.Коэффициент;
	//	Иначе
	//		ТекущиеДанные.Цена = ТекущиеДанные.Цена*ВыбранныйКоэффициент;
	//	КонецЕсли;
	//	ТекущиеДанные.Коэффициент = ВыбранныйКоэффициент;
	//Иначе
	//	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "Весовой") Тогда
	//		Если ЗначениеЗаполнено(ТекущиеДанные.КЗаказу) Тогда 
	//			ТекущиеДанные.КЗаказуУпак = Ценообразование.ОкруглитьЦену(ТекущиеДанные.КЗаказу, 1, Истина);
	//		КонецЕсли;
	//	КонецЕсли;
	//	ТекущиеДанные.Цена = ТекущиеДанные.БазоваяЦена;
	//	ТекущиеДанные.Коэффициент = 0;
	//КонецЕсли;
	ВыбранныйКоэффициент = ОбщегоНазначенияРТСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.КЗаказуУпаковка, "Коэффициент");
	ВыбранныйКоэффициент = ?(ЗначениеЗаполнено(ВыбранныйКоэффициент),ВыбранныйКоэффициент, 1);
	
	//ТекущиеДанные.КЗаказуКоличествоУпаковок = Окр(ТекущиеДанные.ПотребностьКоличество/ВыбранныйКоэффициент);
	ТекущиеДанные.КЗаказуКоличество = ТекущиеДанные.КЗаказуКоличествоУпаковок*ВыбранныйКоэффициент;
	ТекущиеДанные.Цена = ТекущиеДанные.БазоваяЦена * ВыбранныйКоэффициент;
	ТекущиеДанные.Коэффициент = ВыбранныйКоэффициент;
КонецПроцедуры

//Процедура устаноки пометки в строках дерева значений "Результат"
//
// Параметры
// <ТекущаяСтрока>  - <Число> - индекс текущей строки дерева значений
//
&НаКлиенте
Процедура УстановитьПометку(ТекущаяСтрока)
	
	ЭлементДерева = Результат.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если НЕ ЭлементДерева.Пометка Тогда
		ЭлементДерева.Пометка = Истина;
		СчетчикПометок = СчетчикПометок + 1;
	КонецЕсли;
	
	ДочерниеЭлементы = ЭлементДерева.ПолучитьЭлементы();
	Для Каждого Элемент Из ДочерниеЭлементы Цикл
		УстановитьПометку(Элемент.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

//Процедура установки пометки в строках дерева значений "Результат"
//
// Параметры
// <ТекущаяСтрока>  - <Число> - индекс текущей строки дерева значений
//
// <ИскатьРодителя>  - <Булево> - признак поиска пометок в родительских строках
//
// <ИскатьДочерние>  - <Булево> - признак поиска пометок в дочерних строках
//
&НаКлиенте
Процедура СнятьПометку(ТекущаяСтрока, ИскатьРодителя, ИскатьДочерние)
	
	ЭлементДерева = Результат.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ЭлементДерева.Пометка Тогда
		ЭлементДерева.Пометка	= Ложь;
		СчетчикПометок = СчетчикПометок - 1;
	КонецЕсли;
	
	Если ИскатьРодителя Тогда
		Родитель = ЭлементДерева.ПолучитьРодителя();
		Если Родитель <> Неопределено Тогда 
			СнятьПометку(Родитель.ПолучитьИдентификатор(), Истина, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если ИскатьДочерние Тогда
		ДочерниеЭлементы = ЭлементДерева.ПолучитьЭлементы();
		Для Каждого Элемент Из ДочерниеЭлементы Цикл
			СнятьПометку(Элемент.ПолучитьИдентификатор(), Ложь, Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура снятия/установки пометок для выделенных строк 
//
// Параметры
//  <Пометка>  - <Булево> - признак пометки
//
&НаКлиенте
Процедура УстановитьСнятьФлажки(Пометка)

	Перем ПервыйПоставщик;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Результат.ВыделенныеСтроки Цикл
		СтрокаДанныеДерева = Результат.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если Пометка Тогда
			Если ПервыйПоставщик = Неопределено Тогда
				ПервыйПоставщик = СтрокаДанныеДерева.Поставщик;
			ИначеЕсли ПервыйПоставщик <> СтрокаДанныеДерева.Поставщик Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	
		Если СтрокаДанныеДерева.Пометка <> Пометка Тогда
			Если Пометка Тогда
				УстановитьПометку(ВыделеннаяСтрока);
				УстановитьБлокировкуСтрок(СтрокаДанныеДерева.Поставщик);
			Иначе
				СнятьПометку(ВыделеннаяСтрока, Истина, Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СнятьБлокировкуСтрок();
	
КонецПроцедуры

// Процедура очистки полей "К заказу" или "К возврату" в строке дерева
//
// Параметры
// <ИмяПоля>  - <Строка> - Имя поля которое необходимо очистить
//
&НаКлиенте
Процедура ОчиститьКЗаказуВозврату(ИмяПоля)
	
	ТекущиеДанные = Элементы.Результат.ТекущиеДанные;
	
	Если ИмяПоля = "КЗаказу" Тогда
		ТекущиеДанные.КЗаказуКоличество 		= 0;
		ТекущиеДанные.КЗаказуКоличествоУпаковок = 0;
		ТекущиеДанные.КЗаказуУпаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка");
	Иначе
		ТекущиеДанные.КВозвратуКоличество		= 0;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет загрузку настроек отбора из настроек по умолчанию.
//
&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию()

	УстановитьПривилегированныйРежим(Истина);

	Обработка = РеквизитФормыВЗначение("Объект");
	Если ИспользоватьАссортимент Тогда
		СхемаКомпоновкиДанных = Обработка.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанныхАссортимент");
	Иначе
		СхемаКомпоновкиДанных = Обработка.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	КонецЕсли;

	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);

	АдресКомпоновщикаНастроек = ПоместитьВоВременноеХранилище(КомпоновщикНастроек, ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

//Процедура заполняет дерево формы Результат
//
&НаСервере
Процедура РассчитатьРезультатСервер()
	
	Если ПоверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДатаРасчета", 				ДатаРасчета);
	СтруктураПараметров.Вставить("УчитыватьТоварыКПоступлению", Истина);
	СтруктураПараметров.Вставить("ДатаАнализаНачало",			НачалоДня(ПериодАнализа.ДатаНачала));
	СтруктураПараметров.Вставить("ДатаАнализаКонец",			КонецДня(ПериодАнализа.ДатаОкончания));
	СтруктураПараметров.Вставить("ИспользоватьУпаковки",		ИспользоватьУпаковки);
	СтруктураПараметров.Вставить("ПериодПоставкиПо",			КонецДня(НачалоПродаж + КоличествоДнейПродаж*86400));
	СтруктураПараметров.Вставить("КоличествоДнейПродаж",		КоличествоДнейПродаж + ПланируемыйОстаток);
	СтруктураПараметров.Вставить("НачалоПродаж",				НачалоДня(НачалоПродаж));
	СтруктураПараметров.Вставить("ДнейДоНачалаПродаж",			(НачалоДня(НачалоПродаж) - НачалоДня(ДатаРасчета))/86400);
	СтруктураПараметров.Вставить("ПорядокОкругления",			?(ЗначениеЗаполнено(ПорядокОкругления), ПорядокОкругления, 0.001));
	СтруктураПараметров.Вставить("ОкруглятьВБольшуюСторону",	ОкруглятьВБольшуюСторону);
	СтруктураПараметров.Вставить("Округлять",					(ОкруглятьВБольшуюСторону ИЛИ ЗначениеЗаполнено(ПорядокОкругления)) И НЕ ИспользоватьУпаковки);
	
	Если ИспользоватьАссортимент Тогда
		СтруктураПараметров.Вставить("ЖелаемаяДатаПоставки", ЖелаемаяДатаПоставки);
	КонецЕсли;
	
	Если ПолучитьИзВременногоХранилища(АдресКомпоновщикаНастроек) <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(ПолучитьИзВременногоХранилища(АдресКомпоновщикаНастроек).ПолучитьНастройки());
	КонецЕсли;
	
	Для Каждого Параметр Из СтруктураПараметров Цикл
		ПараметрКомпоновкиДанных = Новый ПараметрКомпоновкиДанных(Параметр.Ключ);
		Если ПараметрКомпоновкиДанных <> Неопределено Тогда
			ПараметрКомпоновкиДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКомпоновкиДанных);
			Если ПараметрКомпоновкиДанных <> Неопределено Тогда
				ПараметрКомпоновкиДанных.Значение = Параметр.Значение;
				ПараметрКомпоновкиДанных.Использование = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Поставщик) Тогда
		ЭлементОтбораПоставщик = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораПоставщик.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Поставщик");
		ЭлементОтбораПоставщик.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораПоставщик.Использование  = Истина;
		ЭлементОтбораПоставщик.ПравоеЗначение = Поставщик;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Магазин) Тогда
		ЭлементОтбораМагазин = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораМагазин.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Магазин");
		ЭлементОтбораМагазин.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораМагазин.Использование  = Истина;
		ЭлементОтбораМагазин.ПравоеЗначение = Магазин;
	КонецЕсли;
	
	ДеревоЗначенийРезультат = Новый ДеревоЗначений();
	Обработка = РеквизитФормыВЗначение("Объект");
	
	СКД = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	//Группировки
	Если Не ЗначениеЗаполнено(Поставщик) И Не ЗначениеЗаполнено(Магазин) Тогда
		ИмяГруппировки = "ПоставщикМагазин";
	ИначеЕсли ЗначениеЗаполнено(Поставщик) И Не ЗначениеЗаполнено(Магазин) Тогда
		ИмяГруппировки = "Магазин";
	ИначеЕсли Не ЗначениеЗаполнено(Поставщик) И ЗначениеЗаполнено(Магазин) Тогда
		ИмяГруппировки = "Поставщик";
	Иначе
		ИмяГруппировки = "ДетальныеЗаписи";
	КонецЕсли;

	Для Каждого ГруппировкаСКД Из КомпоновщикНастроек.Настройки.Структура Цикл
		ГруппировкаСКД.Использование = ?(ГруппировкаСКД.Имя = ИмяГруппировки, Истина, Ложь);
	КонецЦикла;

	УстановитьПривилегированныйРежим(Истина);
	//Вывод
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных();
	Макет = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СКД, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ВыводВКоллекциюЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ВыводВКоллекциюЗначений.УстановитьОбъект(ДеревоЗначенийРезультат);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновкиДанных.Инициализировать(Макет,,, Истина);
	ВыводВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(Поставщик) Тогда
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбораПоставщик);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Магазин) Тогда
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбораМагазин);
	КонецЕсли;
	
	Если ИспользоватьУпаковки Тогда
		ДеревоЗначенийРезультат.Колонки.КЗаказуКоличество.Имя = "КЗаказуНеИспользовать";
		ДеревоЗначенийРезультат.Колонки.КЗаказуКоличествоВУпаковках.Имя = "КЗаказуКоличество";
	КонецЕсли;
	
	ДеревоФормы = РеквизитФормыВЗначение("Результат");
	ДеревоФормы.Строки.Очистить();
	ПолучитьСтрокиДерева(ДеревоФормы, ДеревоЗначенийРезультат);
	ЗначениеВРеквизитФормы(ДеревоФормы, "Результат");
	
	УстановитьБлокировкуФормыСервер(Ложь);
	
	СчетчикПометок = 0;
	БлокировкаСтрокУстановлена = Ложь;
	
КонецПроцедуры

//Процедура заполнения пустого дерева значений из другого дерева (результата СКД)
//
&НаСервере
Процедура ПолучитьСтрокиДерева(ДеревоФормы, ДеревоЗначенийРезультат, СтрокаДереваРезультатВходящая = Неопределено, СтрокаДереваФормыВходящая = Неопределено)

	Если СтрокаДереваРезультатВходящая = Неопределено Тогда
		Для Каждого СтрокаДереваРезультат Из ДеревоЗначенийРезультат.Строки Цикл
			ПолучитьСтрокиДерева(ДеревоФормы, ДеревоЗначенийРезультат, СтрокаДереваРезультат);
		КонецЦикла;
	Иначе
		Если СтрокаДереваРезультатВходящая.Родитель = Неопределено Тогда
			СтрокаДереваФормы = ДеревоФормы.Строки.Добавить();
		Иначе
			СтрокаДереваФормы = СтрокаДереваФормыВходящая.Строки.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаДереваФормы, СтрокаДереваРезультатВходящая);
		Если СтрокаДереваРезультатВходящая.Строки.Количество() > 0.00 Тогда
			Для Каждого СтрокаДереваРезультат Из СтрокаДереваРезультатВходящая.Строки Цикл
				ПолучитьСтрокиДерева(ДеревоФормы, ДеревоЗначенийРезультат, СтрокаДереваРезультат, СтрокаДереваФормы)
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//Функция проверки заполнения реквизитов формы
//
&НаСервере
Функция ПоверитьЗаполнение()
	
	РезультатПроверки = Ложь;
	
	Если Не ЗначениеЗаполнено(ЖелаемаяДатаПоставки) Тогда
		Текст = НСтр("ru = 'Поле ""Желаемая дата поставки"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "ЖелаемаяДатаПоставки",,);
		РезультатПроверки = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЖелаемаяДатаПоставки) И ЗначениеЗаполнено(НачалоПродаж) И ЖелаемаяДатаПоставки > НачалоПродаж Тогда
		Текст = НСтр("ru = 'Желаемая дата поставки не может быть больше даты начала продаж'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "ЖелаемаяДатаПоставки",,);
		РезультатПроверки = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НачалоПродаж) Тогда
		Текст = НСтр("ru = 'Поле ""Начало продаж"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "НачалоПродаж",,);
		РезультатПроверки = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КоличествоДнейПродаж) Тогда
		Текст = НСтр("ru = 'Поле ""Количество дней продаж"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "КоличествоДнейПродаж",,);
		РезультатПроверки = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПериодАнализа) Тогда
		Текст = НСтр("ru = 'Поле ""Период анализа"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "ПериодАнализа",,);
		РезультатПроверки = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодАнализа) И Не ЗначениеЗаполнено(ПериодАнализа.ДатаНачала) Тогда
		Текст = НСтр("ru = 'Поле ""Дата начала периода анализа"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "ПериодАнализа",,);
		РезультатПроверки = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодАнализа) И Не ЗначениеЗаполнено(ПериодАнализа.ДатаОкончания) Тогда
		Текст = НСтр("ru = 'Поле ""Дата окончания периода анализа"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "ПериодАнализа",,);
		РезультатПроверки = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаРасчета) И ЗначениеЗаполнено(НачалоПродаж) И ДатаРасчета > НачалоПродаж Тогда
		Текст = НСтр("ru = 'Дата начала продаж не может быть меньше даты расчета.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "НачалоПродаж",,);
		РезультатПроверки = Истина;
	КонецЕсли;
	
	Если ДатаРасчета > ТекущаяДатаСеанса() Тогда
		Текст = НСтр("ru = 'Дата расчета не может быть больше текущей.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "ДатаРасчета");
		РезультатПроверки = Истина;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Процедура создания данных для формирования документов
//
// Параметры
//  <МассивДанных>  - <Массив> - пустой массив, в который передаются данные для формирования
//                 
//  <Отказ>  - <Булево> - признак возникновения ошибки
//                 
//  <ТекстОшибки>  - <Строка> - строковое описание ошибки
&НаСервере
Процедура СоздатьДокументыСервер(МассивДанных, ТипДокумента, Отказ, ТекстОшибки)
	
	Дерево = РеквизитФормыВЗначение("Результат");
	ТаблицаВыделенныхСтрок = РеквизитФормыВЗначение("ВыделенныеСтроки");
	ТаблицаВыделенныхСтрок.Очистить();
	ПараметрыОтбора = Новый Структура("Пометка", Истина);
	МассивСтрок = Дерево.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаМассива.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаВыделенныхСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаМассива);
		
		Если ЗначениеЗаполнено(СтрокаМассива.КЗаказуКоличествоУпаковок) Тогда
			СтрокаТаблицы.Количество = СтрокаМассива.КЗаказуКоличествоУпаковок;
			СтрокаТаблицы.Упаковка	 = СтрокаМассива.КЗаказуУпаковка;
		ИначеЕсли ЗначениеЗаполнено(СтрокаМассива.КВозвратуКоличество) Тогда
			СтрокаТаблицы.КВозврату = СтрокаМассива.КВозвратуКоличество;
		Иначе
			СтрокаТаблицы.Количество = СтрокаМассива.КЗаказуКоличество;
			СтрокаТаблицы.Упаковка	 = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
	Если ТипДокумента = "ЗаказПоставщику" Тогда
		УсловиеГде = "Таблица.Количество > 0 И 
					|ВЫБОР КОГДА Таблица.Поставщик <> Неопределено ТОГДА
					|	Таблица.Поставщик Ссылка Справочник.Контрагенты
					|ИНАЧЕ ИСТИНА КОНЕЦ"
					
	ИначеЕсли ТипДокумента = "ЗаказНаПеремещение" Тогда
		УсловиеГде = "Таблица.Количество > 0 И 
					|ВЫБОР КОГДА Таблица.Поставщик <> Неопределено ТОГДА
					|	Таблица.Поставщик Ссылка Справочник.Магазины
					|ИНАЧЕ ИСТИНА КОНЕЦ"
					
	ИначеЕсли ТипДокумента = "ВозвратПоставщику" Тогда
		УсловиеГде = "Таблица.КВозврату > 0 И 
					|ВЫБОР КОГДА Таблица.Поставщик <> Неопределено ТОГДА
					|	Таблица.Поставщик Ссылка Справочник.Контрагенты
					|ИНАЧЕ ИСТИНА КОНЕЦ"
					
	ИначеЕсли ТипДокумента = "ЗаказНаПеремещениеВозврат" Тогда
		УсловиеГде = "Таблица.КВозврату > 0 И 
					|ВЫБОР КОГДА Таблица.Поставщик <> Неопределено ТОГДА
					|	Таблица.Поставщик Ссылка Справочник.Магазины
					|ИНАЧЕ ИСТИНА КОНЕЦ"
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Поставщик) Тогда
		ТаблицаВыделенныхСтрок.ЗаполнитьЗначения(Поставщик, "Поставщик");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Магазин) Тогда
		ТаблицаВыделенныхСтрок.ЗаполнитьЗначения(Магазин, "Магазин");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Поставщик,
	|	Таблица.Магазин,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Количество,
	|	Таблица.Упаковка,
	|	Таблица.Цена,
	|	Таблица.КВозврату
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Поставщик КАК Поставщик,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	ВЫБОР КОГДА Таблица.Количество = 0 ТОГДА Таблица.КВозврату ИНАЧЕ Таблица.Количество КОНЕЦ КАК Количество,
	|	Таблица.Упаковка КАК Упаковка,
	|	Таблица.Магазин КАК Магазин,
	|	Таблица.Цена КАК Цена
	|ИЗ
	|	Таблица КАК Таблица
	|ГДЕ
	|	"+ УсловиеГде +"
	|ИТОГИ ПО
	|	Поставщик,
	|	Магазин";
	
	Запрос.УстановитьПараметр("Таблица", ТаблицаВыделенныхСтрок);
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	Запрос.УстановитьПараметр("Магазин", Магазин);

	РезультатПакет = Запрос.ВыполнитьПакет();
	РезультатЗапроса = РезультатПакет[1];
	
	Если РезультатЗапроса.Пустой() Тогда
		Отказ		= Истина;
		ТекстОшибки = НСтр("ru = 'Нет выбранных данных для формирования документов %ТипДокумента%'"); 
		
		Если ТипДокумента = "ЗаказПоставщику" Тогда
			ТипДокументаОписание = "Заказ поставщику"
		ИначеЕсли ТипДокумента = "ВозвратПоставщику" Тогда
			ТипДокументаОписание = "Возврат поставщику"
		ИначеЕсли ТипДокумента = "ЗаказНаПеремещение" Тогда
			ТипДокументаОписание = "Заказ на перемещение"
		ИначеЕсли ТипДокумента = "ЗаказНаПеремещениеВозврат" Тогда
			ТипДокументаОписание = "Заказ на перемещение (возврат)"
		КонецЕсли;
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТипДокумента%", ТипДокументаОписание);
		
		Возврат;
	КонецЕсли;
	
	ВыборкаПоставщики = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаПоставщики.Следующий();
	
	ВыборкаМагазины = ВыборкаПоставщики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	
	Пока ВыборкаМагазины.Следующий() Цикл
		
		Товары = Новый Массив;
		Реквизиты = Новый Структура;
		
		Реквизиты.Вставить("Контрагент",				ВыборкаПоставщики.Поставщик);
		Реквизиты.Вставить("Магазин",					ВыборкаМагазины.Магазин);
		Реквизиты.Вставить("ДатаПоступления",			ЖелаемаяДатаПоставки);
		
		Если ТипДокумента = "ЗаказНаПеремещениеВозврат" Тогда
			Реквизиты.Вставить("МагазинОтправитель",	ВыборкаМагазины.Магазин);
			Реквизиты.Вставить("МагазинПолучатель",		ВыборкаПоставщики.Поставщик);
		Иначе
			Реквизиты.Вставить("МагазинОтправитель",	ВыборкаПоставщики.Поставщик);
			Реквизиты.Вставить("МагазинПолучатель",		ВыборкаМагазины.Магазин);
		КонецЕсли;
		
		Реквизиты.Вставить("ЖелаемаяДатаПоступления",	ЖелаемаяДатаПоставки);
		
		Товары.Очистить();
		ВыборкаНоменклатура = ВыборкаМагазины.Выбрать();
		Пока ВыборкаНоменклатура.Следующий() Цикл
			СтрокаТовары = Новый Структура;
			СтрокаТовары.Вставить("Номенклатура",	ВыборкаНоменклатура.Номенклатура); 
			СтрокаТовары.Вставить("Характеристика",	ВыборкаНоменклатура.Характеристика);
			СтрокаТовары.Вставить("Количество",		ВыборкаНоменклатура.Количество);
			СтрокаТовары.Вставить("Упаковка",		ВыборкаНоменклатура.Упаковка);
			СтрокаТовары.Вставить("Цена",			ВыборкаНоменклатура.Цена);
			
			Товары.Добавить(СтрокаТовары);
		КонецЦикла;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Реквизиты", Реквизиты);
		СтруктураДанных.Вставить("Товары", Товары);
		МассивДанных.Добавить(СтруктураДанных); 
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирования табличного документа, результата расшифровки "Товары к поступлению"
//
// Параметры
//  <ТекущаяСтрока>  - <Число> - индекс текущей строки дерева
//                 
//  <Отказ>  - <Булево> - признак ошибки
//                 
//  <ТабличныйДокументРезультат>  - <Табличный документ> - Табличный документ, в который передается результат расшифровки
//                 
&НаСервере
Процедура СформироватьРасшифровкуКПоступлению(ТекущаяСтрока, Отказ, ТабличныйДокументРезультат)
	
	СтрокаДерева = Результат.НайтиПоИдентификатору(ТекущаяСтрока);

	Если Не ЗначениеЗаполнено(СтрокаДерева.ОжидаемоеПоступлениеКоличество) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура",	СтрокаДерева.Номенклатура);
	СтруктураПараметров.Вставить("Характеристика",	СтрокаДерева.Характеристика);
	СтруктураПараметров.Вставить("Магазин",			?(ЗначениеЗаполнено(Магазин), Магазин, СтрокаДерева.Магазин));
	СтруктураПараметров.Вставить("Период",			КонецДня(НачалоПродаж + КоличествоДнейПродаж*86400));
	
	Обработка = РеквизитФормыВЗначение("Объект");
	СКД = Обработка.ПолучитьМакет("ОжидаемоеПоступление");

	ИсточникДоступныхНастроекКомпоновкиДанных = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД);
	КомпоновщикНастроекРасшифровки = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекРасшифровки.Инициализировать(ИсточникДоступныхНастроекКомпоновкиДанных);
	КомпоновщикНастроекРасшифровки.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
	Для Каждого Параметр Из СтруктураПараметров Цикл
		ПараметрКомпоновкиДанных = Новый ПараметрКомпоновкиДанных(Параметр.Ключ);
		Если ПараметрКомпоновкиДанных <> Неопределено Тогда
			ПараметрКомпоновкиДанных = КомпоновщикНастроекРасшифровки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКомпоновкиДанных);
			Если ПараметрКомпоновкиДанных <> Неопределено Тогда
				ПараметрКомпоновкиДанных.Значение = Параметр.Значение;
				ПараметрКомпоновкиДанных.Использование = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	Макет = КомпоновщикМакета.Выполнить(СКД, КомпоновщикНастроекРасшифровки.ПолучитьНастройки(),,,);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновкиДанных.Инициализировать(Макет);

	ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент();
	ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент.УстановитьДокумент(ТабличныйДокументРезультат);
	ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных, Истина);

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//Процедура заполнения таблицы ЗаказыЗакрытие 
//
&НаСервере
Процедура ЗаполнитьЗаказыЗакрытиеСервер()
	
	ЗаказыЗакрытие.Очистить();
	ТаблицаЗаказов = ЗапасыСервер.ПолучитьЗаказыПоставщикамЗаказыНаПеремещениеДляЗакрытия(ДатаЗакрытияЗаказов, МагазинЗакрытиеЗаказов, ПоставщикЗакрытиеЗаказов);
	
	Для каждого Заказ Из ТаблицаЗаказов Цикл
		СтрокаТаблицы = ЗаказыЗакрытие.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Заказ);
	КонецЦикла;

КонецПроцедуры

//Процедура закрытия заказов поставщику из таблицы ЗаказыЗакрытие
//
&НаСервере
Процедура ВыполнитьЗакрытиеЗаказовСервер()
	
	Для Каждого СтрокаТаблицы Из ЗаказыЗакрытие Цикл
		Если Не СтрокаТаблицы.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
		Если ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
			ДокументОбъект.ЗакрытВручную = Истина;
		ИначеЕсли ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ДокументОбъект.Закрыт = Истина;
		КонецЕсли;
			
		Попытка
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			СтрокаТаблицы.Пометка = Ложь;
			ИсторияРаботыПользователя.Добавить(СтрокаТаблицы.Ссылка);
			
			Текст = НСтр("ru = 'Документ %Заказ% закрыт.'");
			Текст = СтрЗаменить(Текст,"%Заказ%", СтрокаТаблицы.Ссылка);
			
		Исключение
			
			Текст = НСтр("ru = 'Ошибка при записи документа %Заказ%. Заказ не закрыт!'");
			Текст = СтрЗаменить(Текст,"%Заказ%", СтрокаТаблицы.Ссылка);
			
		КонецПопытки;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура установки блокировки (признак Блокировка) в строках дерева значений "Результат"
//
// Параметры
//  <ТекущийПоставщик>  - <СправочникСсылка.Контрагенты, СправочникСсылка.Магазины> - блокировка устанавливается
//                   во все строки,кроме строк со значением поставщика равного параметру ТекущийПоставщик
//
&НаКлиенте
Процедура УстановитьБлокировкуСтрок(ТекущийПоставщик)
	
	Если БлокировкаСтрокУстановлена Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыДерева = Результат.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Если Элемент.Поставщик <> ТекущийПоставщик Тогда
			УстановитьБлокировку(Элемент.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	БлокировкаСтрокУстановлена = Истина;
	
КонецПроцедуры

//Процедура устанавливает признак Блокировка в строке дерева значений "Результат"
//
// Параметры
//  <ТекущаяСтрока>  - <Число> - идентификатор текущей строки
//
&НаКлиенте
Процедура УстановитьБлокировку(ТекущаяСтрока)
	
	ЭлементДерева				= Результат.НайтиПоИдентификатору(ТекущаяСтрока);
	ЭлементДерева.Блокировка 	= Истина;
	
	ДочерниеЭлементы = ЭлементДерева.ПолучитьЭлементы();
	Для Каждого Элемент Из ДочерниеЭлементы Цикл
		УстановитьБлокировку(Элемент.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

//Процедура снятия блокировки (признак Блокировка) в строках дерева значений "Результат"
//
&НаКлиенте
Процедура СнятьБлокировкуСтрок()

	Если НЕ БлокировкаСтрокУстановлена ИЛИ СчетчикПометок <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыДерева = Результат.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл
		//Если Элемент.Поставщик <> Поставщик Тогда
			СнятьБлокировку(Элемент.ПолучитьИдентификатор());
		//КонецЕсли;
	КонецЦикла;
	
	БлокировкаСтрокУстановлена = Ложь;
	
КонецПроцедуры

//Процедура снимает признак Блокировка в строке дерева значений "Результат"
//
// Параметры
//  <ТекущаяСтрока>  - <Число> - идентификатор текущей строки
//
&НаКлиенте
Процедура СнятьБлокировку(ТекущаяСтрока)

	ЭлементДерева				= Результат.НайтиПоИдентификатору(ТекущаяСтрока);
	ЭлементДерева.Блокировка 	= Ложь;
	
	ДочерниеЭлементы = ЭлементДерева.ПолучитьЭлементы();
	Для Каждого Элемент Из ДочерниеЭлементы Цикл
		СнятьБлокировку(Элемент.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

//Процедура проверки просроченных заказов поставщику и заказов на перемещения на указанную дату по магазину
//
// Параметры
//  <ДатаЗакрытия>  - <Дата> - Дата проверки
//
//  <Магазин>  - <СправочникСсылка.Магазины> - магазин фильтр отбора просроченных заказов
//
&НаСервере
Процедура ПроверитьПросроченныеЗаказы(ДатаЗакрытия, Магазин)
	
	ТаблицаЗаказов = ЗапасыСервер.ПолучитьЗаказыПоставщикамЗаказыНаПеремещениеДляЗакрытия(ДатаЗакрытия, ?(ЗначениеЗаполнено(Магазин), Магазин, Неопределено));
		
	Если ТаблицаЗаказов.Количество() > 0 Тогда
		Элементы.ФормаПерейтиЗакрытиеЗаказов.Доступность = Истина;
		
		ТекстСообщения = НСтр("ru = 'Перед работой рекомендуется закрыть просроченные заказы'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		Элементы.ФормаПерейтиЗакрытиеЗаказов.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

//Процедура открытия форм документов
//
// <ТипДокумента> - <Строка> - Представление для определения типа документа: 
//                   "ЗаказПоставщику", "ВозвратПоставщику","ЗаказНаПеремещение" или "ЗаказНаПеремещениеВозврат"
//
&НаКлиенте
Процедура СоздатьДокументы(ТипДокумента)
	
	Отказ = Ложь;
	ТекстОшибки = "";
	
	Если Результат.ПолучитьЭлементы().Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Нет данных для формирования документов.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( ТекстОшибки,, "Результат",, Отказ);
		Возврат;
	КонецЕсли;
	
	МассивДанных = Новый Массив;
	СоздатьДокументыСервер(МассивДанных, ТипДокумента, Отказ, ТекстОшибки);
	
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Результат",, Отказ);
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементДанных Из МассивДанных Цикл
		
		ЭлементДанных.Вставить("ОбработкаФормированиеЗаказов");
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("Основание", ЭлементДанных);
		
		Если ТипДокумента = "ЗаказПоставщику" Тогда
			ОткрытьФормуМодально("Документ.ЗаказПоставщику.ФормаОбъекта", СтруктураПараметры);
			
		ИначеЕсли ТипДокумента = "ВозвратПоставщику"  Тогда
			ОткрытьФормуМодально("Документ.ВозвратТоваровПоставщику.ФормаОбъекта", СтруктураПараметры);
			
		ИначеЕсли ТипДокумента = "ЗаказНаПеремещение" ИЛИ ТипДокумента = "ЗаказНаПеремещениеВозврат" Тогда
			ОткрытьФормуМодально("Документ.ЗаказНаПеремещение.ФормаОбъекта", СтруктураПараметры);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоказатьОповещениеПользователя(НСтр("ru=''"),, НСтр("ru='Запущен процесс пересчета данных.'"),
									БиблиотекаКартинок.Информация32);
	РассчитатьРезультатСервер();
	
КонецПроцедуры

//Процедура смены страницы
//
&НаКлиенте
Процедура СменитьВидимостьСтраницы(ИмяСтраницы)

	Если ИмяСтраницы = "ОсновнаяСтраница" Тогда
		Элементы.ФормаПерейтиЗакрытиеЗаказов.Видимость 		= Истина;
		Элементы.ФормаПерейтиФормированиеЗаказов.Видимость 	= Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.ОсновнаяСтраница;
	ИначеЕсли ИмяСтраницы = "СтраницаЗакрытиеЗаказов" Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗакрытиеЗаказов;
		Элементы.ФормаПерейтиФормированиеЗаказов.Видимость 	= Истина;
		Элементы.ФормаПерейтиЗакрытиеЗаказов.Видимость 		= Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьБлокировкуФормы(Блокировать)
	
	Если Блокировать И БлокировкаФормыУстановлена Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Блокировать;
	
	Элементы.ГруппаСоздатьДокументы.Доступность = НЕ Блокировать;
	Элементы.Результат.ТолькоПросмотр = Блокировать;
	
	БлокировкаФормыУстановлена = Блокировать;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБлокировкуФормыСервер(Блокировать)
	
	Если Блокировать И БлокировкаФормыУстановлена Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Блокировать;
	
	Элементы.ГруппаСоздатьДокументы.Доступность = НЕ Блокировать;
	Элементы.Результат.ТолькоПросмотр = Блокировать;
	
	БлокировкаФормыУстановлена = Блокировать;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандСозданияДокументов()

	Если ЗначениеЗаполнено(Поставщик) Тогда
		
		Если ТипЗнч(Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда
			Элементы.СоздатьДокументыЗаказПоставщику.Доступность 			= Истина;
			Элементы.СоздатьДокументыВозвратПоставщику.Доступность 			= Истина;
			Элементы.СоздатьДокументыЗаказНаПеремещение.Доступность 		= Ложь;
			Элементы.СоздатьДокументыЗаказНаПеремещениеВозврат.Доступность 	= Ложь;
		ИначеЕсли ТипЗнч(Поставщик) = Тип("СправочникСсылка.Магазины") Тогда
			Элементы.СоздатьДокументыЗаказПоставщику.Доступность 			= Ложь;
			Элементы.СоздатьДокументыВозвратПоставщику.Доступность 			= Ложь;
			Элементы.СоздатьДокументыЗаказНаПеремещение.Доступность 		= Истина;
			Элементы.СоздатьДокументыЗаказНаПеремещениеВозврат.Доступность 	= Истина;
		КонецЕсли;
		
	Иначе
		Элементы.СоздатьДокументыЗаказПоставщику.Доступность 			= Истина;
		Элементы.СоздатьДокументыВозвратПоставщику.Доступность 			= Истина;
		Элементы.СоздатьДокументыЗаказНаПеремещение.Доступность 		= Истина;
		Элементы.СоздатьДокументыЗаказНаПеремещениеВозврат.Доступность 	= Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьКолонокАссортимента()
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюИспользованияАссортимента();
	Элементы.АссортиментнаяПолитика.Видимость = ИспользоватьАссортимент;
	
КонецПроцедуры