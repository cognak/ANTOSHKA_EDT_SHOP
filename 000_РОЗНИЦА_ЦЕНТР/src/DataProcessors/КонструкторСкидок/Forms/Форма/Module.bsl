&НаКлиенте
Перем ГруппаКомандыЗгрузкиИзЭксель;
&НаКлиенте
Перем мМагазинПриНачалеРедактирования;
&НаКлиенте
Перем КэшированныеЗначения;
&НаКлиенте
Перем ПредыдущееЗначениеТипаПолучателейСкидок;
&НаКлиенте
Перем ПредыдущаяСраница;
&НаКлиенте
Перем СтекОткрытыхОкон;
&НаКлиенте
Перем НомерТекущейСтраници;
&Наклиенте
Перем АкцияСсылка;
&Наклиенте
Перем СкидкаСсылка;
&Наклиенте
Перем УсловиеСсылка;
&Наклиенте
Перем СегментССылка;

#Область КомандыСозданияСегмента
&НаКлиенте
Процедура КомандаЗагрузитьИзФайла(Команда)
	Если СоздатьСгментИлиИсключить Тогда
		Сегмент = СоздатьСегментНаСервере(ФайлЭксель, НачСтрока+1, СокрЛП(ИмяЛиста), Команда.Имя, КолонкаСДанными);
	Иначе	
		Сегмент = ОбновитьСегментНаСервере(ФайлЭксель, НачСтрока+1, СокрЛП(ИмяЛиста), Команда.Имя, КолонкаСДанными, ?(ЗначениеЗаполнено(СегментСкидкиПоле), СегментСкидкиПоле, СегментУсловияПоле));
	КонецЕсли; 
	Если ЗначениеЗаполнено(Сегмент) или Сегмент = Истина Тогда
		Если ТипЗнч(Сегмент) = Тип("Булево") Тогда
			Если НЕ Сегмент Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Произошла ошибка загрузки сегмента, проверьте файл и попробуйте ещё раз";
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
		Иначе
			Сегмент = ПереименоватьСегмент(Сегмент, ГруппаКомандыЗгрузкиИзЭксель, НазваниеАкции);
		КонецЕсли; 
		Если ГруппаКомандыЗгрузкиИзЭксель = "ЗагрузитьИЗФайлаЭксель" или ГруппаКомандыЗгрузкиИзЭксель = "КопироватьИзФайлаЭксель" или ГруппаКомандыЗгрузкиИзЭксель = "СоздатьСегментРуками" Тогда
			СегментСкидкиПоле = Сегмент;
		ИначеЕсли ГруппаКомандыЗгрузкиИзЭксель = "ЗагрузитьИЗФайлаЭксель1" или ГруппаКомандыЗгрузкиИзЭксель = "КопироватьИзФайлаЭксель1" или ГруппаКомандыЗгрузкиИзЭксель = "СоздатьСегментРуками1" Тогда
			СегментУсловияПоле = Сегмент;
		ИначеЕсли ГруппаКомандыЗгрузкиИзЭксель = "ЗагрузитьИЗФайлаЭксель2" или ГруппаКомандыЗгрузкиИзЭксель = "КопироватьИзФайлаЭксель2" или ГруппаКомандыЗгрузкиИзЭксель = "СоздатьСегментРуками2" Тогда
			СегментИсключениеПоле = Сегмент;
		КонецЕсли; 
		Элементы.ГруппаЗагрузкиИЗЭксель.Видимость = Ложь;
		Элементы.Сегменты1.Видимость = Истина;
		Элементы.Перенести.Видимость = Истина;
		// + HVOYA 10.02.2017 19:52:09, Латышев А.А.
		ЗаполнитьСтекСтраниц(НомерТекущейСтраници, Элементы.СегментСкидки);
		// - HVOYA 10.02.2017 19:52:09, Латышев А.А. 
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Произошла ошибка загрузки сегмента, проверьте файл и попробуйте ещё раз";
		Сообщение.Сообщить(); 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСегмент(Команда)
	Если СоздатьСгментИлиИсключить Тогда
		Сегмент = СоздатьСегментНаСервере(ФайлЭксель,,, Команда.Имя);
	Иначе	
		Сегмент = ОбновитьСегментНаСервере(ФайлЭксель,,, Команда.Имя,, ?(ЗначениеЗаполнено(СегментСкидкиПоле), СегментСкидкиПоле, СегментУсловияПоле));
	КонецЕсли; 
	Если ЗначениеЗаполнено(Сегмент) Тогда
		Если ТипЗнч(Сегмент) = Тип("Булево") Тогда
			Если НЕ Сегмент Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Произошла ошибка загрузки сегмента, проверьте файл и попробуйте ещё раз";
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
		Иначе
			Сегмент = ПереименоватьСегмент(Сегмент, ГруппаКомандыЗгрузкиИзЭксель, НазваниеАкции);
		КонецЕсли; 
		Если ГруппаКомандыЗгрузкиИзЭксель = "ЗагрузитьИЗФайлаЭксель" или ГруппаКомандыЗгрузкиИзЭксель = "КопироватьИзФайлаЭксель" или ГруппаКомандыЗгрузкиИзЭксель = "СоздатьСегментРуками" Тогда
			СегментСкидкиПоле = Сегмент;
		ИначеЕсли ГруппаКомандыЗгрузкиИзЭксель = "ЗагрузитьИЗФайлаЭксель1" или ГруппаКомандыЗгрузкиИзЭксель = "КопироватьИзФайлаЭксель1" или ГруппаКомандыЗгрузкиИзЭксель = "СоздатьСегментРуками1" Тогда
			СегментУсловияПоле = Сегмент;
		ИначеЕсли ГруппаКомандыЗгрузкиИзЭксель = "ЗагрузитьИЗФайлаЭксель2" или ГруппаКомандыЗгрузкиИзЭксель = "КопироватьИзФайлаЭксель2" или ГруппаКомандыЗгрузкиИзЭксель = "СоздатьСегментРуками2" Тогда
			СегментИсключениеПоле = "Сегмент " + ?(ЗначениеЗаполнено(СегментСкидкиПоле), СегментСкидкиПоле, СегментУсловияПоле)+" обновлен";
		КонецЕсли; 
		Элементы.ГруппаКопироватьИЗЭксель.Видимость = Ложь;
		Элементы.Сегменты1.Видимость = Истина;
		Элементы.Перенести.Видимость = Истина;
		// + HVOYA 10.02.2017 19:52:09, Латышев А.А.
		ЗаполнитьСтекСтраниц(НомерТекущейСтраници, Элементы.СегментСкидки);
		// - HVOYA 10.02.2017 19:52:09, Латышев А.А. 
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Произошла ошибка загрузки сегмента, проверьте файл и попробуйте ещё раз";
		Сообщение.Сообщить();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСегментВручную(Команда)
	Сегмент = СоздатьСегментНаСервереРуками(СегментССылка);
	
	Если НЕ ЗначениеЗаполнено(Сегмент) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Произошла ошибка создания сегмента";
		Сообщение.Сообщить();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сегмент создан";
		Сообщение.Сообщить();
	КонецЕсли;
	
	СегментССылка = Сегмент;
	
	Если ЭтотОбъект.ТекущийЭлемент.Имя = "СохранитьИЗакрытьСегмент" Тогда
		Если ГруппаКомандыЗгрузкиИзЭксель = "ЗагрузитьИЗФайлаЭксель" или ГруппаКомандыЗгрузкиИзЭксель = "КопироватьИзФайлаЭксель" или ГруппаКомандыЗгрузкиИзЭксель = "СоздатьСегментРуками" Тогда
			СегментСкидкиПоле = Сегмент;
		ИначеЕсли ГруппаКомандыЗгрузкиИзЭксель = "ЗагрузитьИЗФайлаЭксель1" или ГруппаКомандыЗгрузкиИзЭксель = "КопироватьИзФайлаЭксель1" или ГруппаКомандыЗгрузкиИзЭксель = "СоздатьСегментРуками1" Тогда
			СегментУсловияПоле = Сегмент;
		КонецЕсли; 
		Элементы.ГруппаКопироватьИЗЭксель.Видимость = Ложь;
		Элементы.ГруппаЗагрузкиИЗЭксель.Видимость = Ложь;
		Элементы.ГруппаСозданияСегментаВручную.Видимость = Ложь;
		Элементы.Сегменты1.Видимость = Истина;
		Элементы.Перенести.Видимость = Истина;
		// + HVOYA 10.02.2017 19:52:09, Латышев А.А.
		ЗаполнитьСтекСтраниц(НомерТекущейСтраници, Элементы.СегментСкидки);
		// - HVOYA 10.02.2017 19:52:09, Латышев А.А. 
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция СоздатьСегментНаСервереРуками(СегментССылка)
	Если ЗначениеЗаполнено(СегментССылка) Тогда
		Сегмент = СегментССылка.ПолучитьОбъект();
	Иначе
		Сегмент = Справочники.СегментыНоменклатуры.СоздатьЭлемент();
	КонецЕсли; 
	Сегмент.Наименование = НаименованиеСегмента;
	Сегмент.СпособФормирования = СпособФормирования;
	Сегмент.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Сегмент.ДатаСоздания = ДатаСозданияСегмента;
	Сегмент.ДатаОчистки = ДатаСозданияСегмента;
	Сегмент.Описание = ОписаниеСегмента;
	Сегмент.ИмяШаблонаСКД = ИмяШаблонаСКД;
	Сегмент.СхемаКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(URLСКД));
	Сегмент.Записать();
	Возврат Сегмент.Ссылка;
КонецФункции // СоздатьСегментНаСервереРуками()()

&НаКлиенте
Процедура СформироватьСегмент(Команда)
	//Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	ПоказатьПредупреждение(, НСтр("ru='Сначала необходимо записать сегмент.'"));
	//	Возврат;
	//КонецЕсли;

	//Если Объект.СпособФормирования =
	//		ПредопределенноеЗначение("Перечисление.СпособыФормированияСегментов.ФормироватьДинамически") Тогда
	//	ПоказатьПредупреждение(, НСтр("ru='Формирование доступно только для нединамических сегментов.'"));
	//	Возврат;
	//КонецЕсли;
	//
	//Если Модифицированность Тогда
	//	Если Вопрос(
	//			НСтр("ru='Перед формированием необходимо записать сегмент. Записать?'"),
	//			РежимДиалогаВопрос.ДаНет
	//		) = КодВозвратаДиалога.Нет Тогда
	//		Возврат;
	//	Иначе
	//		Записать();
	//	КонецЕсли;
	//КонецЕсли;

	СегментыСервер.СформироватьНоменклатуруСегмента(СегментСсылка);
	//ПоказатьОповещениеПользователя(
	//	НСтр("ru='Формирование сегмента номенклатуры'"),,
	//	НСтр("ru='Сегмент сформирован.'")
	//);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрытьСегмент(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры
 
#КонецОбласти

#Область КомандыГруппыСегменты

&НаКлиенте
Процедура ЗагрузитьИЗФайлаЭксель(Команда)
	Элементы.ГруппаЗагрузкиИЗЭксель.Видимость = Истина;
	Элементы.Сегменты1.Видимость = Ложь;
	ИмяЛиста = "Коды товаров-скидок";
	НачСтрока = 2;
	КолонкаСДанными = 1;
	ГруппаКомандыЗгрузкиИзЭксель = ЭтотОбъект.ТекущийЭлемент.Имя;
	Если ГруппаКомандыЗгрузкиИзЭксель = "ЗагрузитьИЗФайлаЭксель" или ГруппаКомандыЗгрузкиИзЭксель = "ЗагрузитьИЗФайлаЭксель1" Тогда
		Элементы.СоздатьСгментИлиИсключить.Видимость = Ложь;
		СоздатьСгментИлиИсключить = Истина;
	Иначе
		Элементы.СоздатьСгментИлиИсключить.Видимость = Истина;
		СоздатьСгментИлиИсключить = Ложь;
	КонецЕсли;
	Элементы.Перенести.Видимость = Ложь;
	// + HVOYA 10.02.2017 19:52:09, Латышев А.А.
	ЗаполнитьСтекСтраниц(НомерТекущейСтраници, Элементы.ГруппаЗагрузкиИЗЭксель);
	// - HVOYA 10.02.2017 19:52:09, Латышев А.А. 
КонецПроцедуры

&НаКлиенте
Процедура КопироватьИзФайлаЭксель(Команда)
	// +HVOYA. 17.05.2017 16:35:20, Львова Е.А.
    ОчиститьТабПолеМакета();
    // -HVOYA. 17.05.2017 16:35:23, Львова Е.А.
    Элементы.ГруппаКопироватьИЗЭксель.Видимость = Истина;
	Элементы.Сегменты1.Видимость = Ложь;
	ГруппаКомандыЗгрузкиИзЭксель = ЭтотОбъект.ТекущийЭлемент.Имя;
	Если ГруппаКомандыЗгрузкиИзЭксель = "КопироватьИзФайлаЭксель" или ГруппаКомандыЗгрузкиИзЭксель = "КопироватьИзФайлаЭксель1" Тогда
		Элементы.СоздатьСгментИлиИсключить1.Видимость = Ложь;
		СоздатьСгментИлиИсключить = Истина;
	Иначе
		Элементы.СоздатьСгментИлиИсключить1.Видимость = Истина;
		СоздатьСгментИлиИсключить = Ложь;
	КонецЕсли;
	Элементы.Перенести.Видимость = Ложь;
	// + HVOYA 10.02.2017 19:52:09, Латышев А.А.
	ЗаполнитьСтекСтраниц(НомерТекущейСтраници, Элементы.ГруппаКопироватьИЗЭксель);
	// - HVOYA 10.02.2017 19:52:09, Латышев А.А. 
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСегментРуками(Команда)
	СегментССылка = ПредопределенноеЗначение("Справочник.СегментыНоменклатуры.ПустаяСсылка");	
	Элементы.ГруппаСозданияСегментаВручную.Видимость = Истина;
	Элементы.Сегменты1.Видимость = Ложь;
	ГруппаКомандыЗгрузкиИзЭксель = ЭтотОбъект.ТекущийЭлемент.Имя;
	Элементы.Перенести.Видимость = Ложь;
	ИмяКоманды = ЭтотОбъект.ТекущийЭлемент.Имя;
	ИнициализироватьСКД(ИмяКоманды);
	Если ИмяКоманды = "СоздатьСегментРуками1" и ЗначениеЗаполнено(СегментУсловияПоле) Тогда
		СегментССылка = СегментУсловияПоле;
	ИначеЕсли ИмяКоманды = "СоздатьСегментРуками" и ЗначениеЗаполнено(СегментСкидкиПоле) Тогда
		СегментССылка = СегментСкидкиПоле;
	КонецЕсли;
	Если ЗначениеЗаполнено(СегментССылка) Тогда
		РеквизитыСегмента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СегментССылка, "Наименование, ДатаСоздания, ДатаОчистки, СпособФормирования, Описание, ИмяШаблонаСКД");
		НаименованиеСегмента = РеквизитыСегмента.Наименование;
		ДатаСозданияСегмента = РеквизитыСегмента.ДатаСоздания;
		ДатаОчисткиСегмента = РеквизитыСегмента.ДатаОчистки;
		СпособФормирования = РеквизитыСегмента.СпособФормирования;
		ОписаниеСегмента = РеквизитыСегмента.Описание;
		ИмяШаблонаСКД = РеквизитыСегмента.ИмяШаблонаСКД;
		Элементы.СоздатьСегментВручную.Видимость = Ложь;
	Иначе
		НаименованиеСегмента = "Сегмент для " + НазваниеАкции;;
		ДатаСозданияСегмента = ТекущаяДата();
		ДатаОчисткиСегмента = '00010101';
		ОписаниеСегмента ="";
		ИмяШаблонаСКД = "";
		СпособФормирования = ПредопределенноеЗначение("Перечисление.СпособыФормированияСегментов.ФормироватьВручную");
		Элементы.СоздатьСегментВручную.Видимость = Истина;
	КонецЕсли;
	ЗаполнитьСтекСтраниц(НомерТекущейСтраници, Элементы.ГруппаСозданияСегментаВручную);
КонецПроцедуры

#КонецОбласти

 

#Область МеханизмыСозданияСегмента
&НаСервере
Функция СоздатьСегментНаСервере(ФайлЭксель = Неопределено,НачСтрока = 2, ИмяЛиста = "", ИмяКоманды, КолонкаСДанными = 1)
	Перем КолвоСтрокExcel;
	Если ИмяКоманды = "КомандаЗагрузитьИзФайла" Тогда
		ТаблицаКодов = ЗагрузитьМетодом_MSADODB(ФайлЭксель, ИмяЛиста, ,НачСтрока,,КолвоСтрокExcel);
		Если ТаблицаКодов.Количество()=0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не один из методов подключения к файлу эксель не сработал попробуйте копирование из файла эксель";
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли; 
		МассивНоменклатуры = ТаблицаКодов.ВыгрузитьКолонку("К_" + КолонкаСДанными);
	ИначеЕсли ИмяКоманды = "СоздатьСегмент" Тогда
		ТаблицаКодов = обМакетВТаблицуЗначений(ТабличныйДокументЭксель);
		МассивНоменклатуры = ТаблицаКодов.ВыгрузитьКолонку("КодТовара");
	ИначеЕсли ИмяКоманды = "СоздатьСегментВручную" Тогда
		//ТаблицаКодов = ПолучитьНоменклатуруИзСКД();
		//МассивНоменклатуры = Неопределено;
	КонецЕсли; 
	
	Если НЕ МассивНоменклатуры = Неопределено Тогда
		
		Если МассивНоменклатуры.Количество()=0 Тогда
			Возврат Справочники.СегментыНоменклатуры.ПустаяСсылка();
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ПометкаУдаления
		|	И Номенклатура.Код В(&Коды)";
		
		Запрос.УстановитьПараметр("Коды", МассивНоменклатуры);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат Справочники.СегментыНоменклатуры.ПустаяСсылка();
		КонецЕсли; 
		
		Сегмент = Справочники.СегментыНоменклатуры.СоздатьЭлемент();
		
		Сегмент.Наименование = "ТЕМП_Сегмент";
		Сегмент.СпособФормирования = СпособФормирования;
		Сегмент.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Сегмент.ДатаСоздания = ТекущаяДата();
		Сегмент.Записать();
		
		Выборка = Результат.Выбрать();
		
		НаборЗаписей = РегистрыСведений.НоменклатураСегмента.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сегмент.Установить(Сегмент.Ссылка);
		
		Пока Выборка.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.Сегмент = Сегмент.Ссылка;
			Запись.Номенклатура = Выборка.Ссылка;
		КонецЦикла;
		НаборЗаписей.Записать();
	Иначе
		Если ТаблицаКодов.Количество() = 0 Тогда
			Возврат Справочники.СегментыНоменклатуры.ПустаяСсылка();
		КонецЕсли; 
		
		Сегмент = Справочники.СегментыНоменклатуры.СоздатьЭлемент();
		
		Сегмент.Наименование = "ТЕМП_Сегмент";
		Сегмент.СпособФормирования = СпособФормирования;
		Сегмент.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Сегмент.ДатаСоздания = ТекущаяДата();
		Сегмент.Записать();
		
		НаборЗаписей = РегистрыСведений.НоменклатураСегмента.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сегмент.Установить(Сегмент.Ссылка);
		
		Для каждого Строка Из ТаблицаКодов Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.Сегмент = Сегмент.Ссылка;
			Запись.Номенклатура = Строка.Номенклатура;
		КонецЦикла; 
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Возврат Сегмент.Ссылка;
КонецФункции // ()

Функция ОбновитьСегментНаСервере(ФайлЭксель = Неопределено,НачСтрока = 2, ИмяЛиста = "", ИмяКоманды, КолонкаСДанными = 1, ОбрабатываемыйСегмент)
	Перем КолвоСтрокExcel;
	Если ИмяКоманды = "КомандаЗагрузитьИзФайла" Тогда
		ТаблицаКодов = ЗагрузитьМетодом_MSADODB(ФайлЭксель, ИмяЛиста, ,НачСтрока,,КолвоСтрокExcel);
		Если ТаблицаКодов.Количество()=0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не один из методов подключения к файлу эксель не сработал попробуйте копирование из файла эксель";
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли; 
		МассивНоменклатуры = ТаблицаКодов.ВыгрузитьКолонку("К_" + КолонкаСДанными);
	ИначеЕсли ИмяКоманды = "СоздатьСегмент" Тогда
		ТаблицаКодов = обМакетВТаблицуЗначений(ТабличныйДокументЭксель);
		МассивНоменклатуры = ТаблицаКодов.ВыгрузитьКолонку("КодТовара");
	ИначеЕсли ИмяКоманды = "СоздатьСегментВручную" Тогда
		//ТаблицаКодов = ПолучитьНоменклатуруИзСКД();
		//МассивНоменклатуры = Неопределено;
	КонецЕсли; 
	
	Если НЕ МассивНоменклатуры = Неопределено Тогда
		
		Если МассивНоменклатуры.Количество()=0 Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ПометкаУдаления
		|	И Номенклатура.Код В(&Коды)";
		
		Запрос.УстановитьПараметр("Коды", МассивНоменклатуры);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Для каждого Строка Из Результат Цикл
			НаборЗаписей = РегистрыСведений.НоменклатураСегмента.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сегмент.Установить(ОбрабатываемыйСегмент);
			НаборЗаписей.Отбор.Номенклатура.Установить(Строка.Ссылка);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЦикла;  
	Иначе
		Если ТаблицаКодов.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		Для каждого Строка Из ТаблицаКодов Цикл
			НаборЗаписей = РегистрыСведений.НоменклатураСегмента.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сегмент.Установить(ОбрабатываемыйСегмент);
			НаборЗаписей.Отбор.Номенклатура.Установить(Строка.Номенклатура);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЦикла;  
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // ()

Процедура ОбновитьСегментСучетомИсключения(СегментИсключение, Сегмент)
	
	НаборЗаписейИсключения = РегистрыСведений.НоменклатураСегмента.СоздатьНаборЗаписей();
	НаборЗаписейИсключения.Отбор.Сегмент.Установить(СегментИсключение);
	НаборЗаписейИсключения.Прочитать();
	МассивНоменклатуры = НаборЗаписейИсключения.ВыгрузитьКолонку("Номенклатура");
	
	Для каждого Эл Из МассивНоменклатуры Цикл
		НаборЗаписей = РегистрыСведений.НоменклатураСегмента.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сегмент.Установить(Сегмент);
		НаборЗаписей.Отбор.Номенклатура.Установить(Эл);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла; 
	
КонецПроцедуры


&НаСервере
Функция ЗагрузитьМетодом_MSADODB(Знач ФайлEXCEL, Знач ИмяЛиста, Знач СтрокаЗаголовка = 1, НачСтрока = 0, КонСтрока = 0, КолвоСтрокExcel) Экспорт
	
	Перем СonnectionString, ADODBConnection, ADODBRecordset, ТекстЗапроса;
	Перем КолвоКолонокExcel, Поле, Колонка, ИмяКолонки;
	Перем НоваяСтрока, НомерСтроки;
	Перем ТаблицаРезультат;
	
	// ACE.OLEDB.12.0 - Для использования данного подключения необходимо дополнительное ПО:
	// Microsoft Access Database Engine 2010 Redistributable 32/64 bit.
	MicrosoftACEOLEDB12 = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source= " + СокрЛП(ФайлEXCEL) + ";Extended Properties=""Excel 12.0;HDR=NO;IMEX=1;""";
		
	// Jet.OLEDB.4.0 - Стандартное подключение, как правило, не требующее установки дополнительного ПО. 
	// Рекомендуется установить последний Service Pack Windows.
	MicrosoftJetOLEDB40 = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source= "  + СокрЛП(ФайлEXCEL) + ";Extended Properties=""Excel 8.0;HDR=YES;IMEX=1;""";
	
	//Еще один вариант.
	MicrosoftExcelDriver = "Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};Dbq=" + СокрЛП(ФайлEXCEL) + ";";
	
	ADODBConnection = Новый COMОбъект("ADODB.Connection");
	Попытка
		ADODBConnection.ConnectionString = MicrosoftACEOLEDB12;
		ADODBConnection.Open();
	Исключение
		Попытка
			ADODBConnection.ConnectionString = MicrosoftJetOLEDB40 ;
			ADODBConnection.Open();
		Исключение
			Попытка
				ADODBConnection.ConnectionString = MicrosoftExcelDriver;
				ADODBConnection.Open();
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОписаниеОшибки();
				Сообщение.Сообщить();
				Возврат Новый ТаблицаЗначений; 
			КонецПопытки; 
		КонецПопытки; 
	КонецПопытки; 
	ADODBConnection.CursorLocation = 3;    // По-умолчанию 2.
	
	ТекстЗапроса = "SELECT * FROM [" + ИмяЛиста + "$]";
	
	Попытка
		ADODBRecordset = Новый COMОбъект("ADODB.Recordset");
		ADODBRecordset.Open(ТекстЗапроса, ADODBConnection);
		
		// Проверка заполненности листа.
		Если (ADODBRecordset.EOF ИЛИ ADODBRecordset.BOF) Тогда
			КолвоСтрокExcel = 0;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Строка(ИмяЛиста) + ": не содержит данных.";
			Сообщение.Сообщить();
			
			ADODBRecordset.Close();
			ADODBConnection.Close();
			ADODBRecordset   = Неопределено;
			ADODBConnection = Неопределено;
			
			Возврат Новый ТаблицаЗначений;
		КонецЕсли;
		
		ADODBRecordset.AbsolutePage     = 1;
		ADODBRecordset.AbsolutePosition = 1;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Новый ТаблицаЗначений;
	КонецПопытки;
	
	КолвоСтрокExcel = ADODBRecordset.RecordCount;
	КолвоКолонокExcel = ADODBRecordset.Fields.Count;
	
	// Проверка заполненности листа.
	Если КолвоСтрокExcel <= 2 Тогда
		КолвоСтрокExcel = 0;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Строка(ИмяЛиста) + ": не содержит данных.";
		Сообщение.Сообщить();
		
		ADODBRecordset.Close();
		ADODBConnection.Close();
		ADODBRecordset   = Неопределено;
		ADODBConnection = Неопределено;
		
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	ТаблицаРезультат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "№", 4);
	ТаблицаРезультат.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"), "Сопоставлено", 1);
	Для ит = 1 ПО КолвоКолонокExcel Цикл
		
		Поле = ADODBRecordset.Fields.Item(ит - 1);
		ИмяКолонки = "К_" + ит;
		Колонка = ТаблицаРезультат.Колонки.Добавить(ИмяКолонки, , СокрЛП(СтрЗаменить(Поле.Name, "#", ".")));
		
	КонецЦикла;
	
	НомерСтроки = 1;
	Пока ADODBRecordset.EOF() = 0 Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		Если НомерСтроки < НачСтрока Тогда
			ADODBRecordset.MoveNext();
			Продолжить;
		КонецЕсли;
		
		Если КонСтрока > 0 И НомерСтроки > КонСтрока Тогда
			Прервать;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаРезультат.Добавить();
		НоваяСтрока.НомерСтроки = НомерСтроки;
		
		Для ит = 1 ПО КолвоКолонокExcel Цикл
			
			Поле = ADODBRecordset.Fields.Item(ит - 1);
			
			Если Поле.ActualSize = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеЯчейки = Поле.Value;
			
			Если ТипЗнч(ЗначениеЯчейки) = Тип("Число") Тогда
				ЗначениеЯчейки = Строка(Формат(ЗначениеЯчейки, "ЧГ=0"));
			КонецЕсли; 
			
			ИмяКолонки = "К_" + ит;
			НоваяСтрока[ИмяКолонки] = ЗначениеЯчейки;
			
			ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
			ДлинаСтроки      = СтрДлина(СокрЛП(ЗначениеЯчейки));
			ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
			
		КонецЦикла;
		
		ADODBRecordset.MoveNext(); 
		
	КонецЦикла;
	
	ADODBRecordset.Close();
	ADODBConnection.Close();
	ADODBRecordset   = Неопределено;
	ADODBConnection = Неопределено;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

&НаСервере
Функция обМакетВТаблицуЗначений(Макет)
	Перем ТЗ;
	ТЗ=Новый ТаблицаЗначений();
		//Считываем колонки
		Для Стр=1 По Макет.ВысотаТаблицы Цикл
			Если Стр>1 Тогда
				ТекСтр=ТЗ.Добавить();
			КонецЕсли;
			ПустаяСтрока=истина;
			Для Кол=1 По Макет.ШиринаТаблицы Цикл
				Яч=Макет.Область(Стр, Кол);
				Если Яч.СодержитЗначение Тогда
					Зн=Яч.Значение;
				Иначе
					Зн=Яч.Текст;
				КонецЕсли;
				Если ТипЗнч(Зн)=Тип("Строка") И ПустаяСтрока(Зн) Тогда
					Зн=Неопределено;
				КонецЕсли;
				
				//Добавляем колонку
				Если Стр=1 Тогда
					ТЗ.Колонки.Добавить(СтрЗаменить(Зн," ", ""));
				Иначе
					ТекСтр[Кол-1]=Зн;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Возврат ТЗ;
КонецФункции   

&НаСервереБезКонтекста
Функция ПереименоватьСегмент(Сегмент, ГруппаКомандыЗгрузкиИзЭксель, НазваниеАкции)
	СегментОбъект = Сегмент.ПолучитьОбъект();
	
	Если ГруппаКомандыЗгрузкиИзЭксель = "ЗагрузитьИЗФайлаЭксель" или ГруппаКомандыЗгрузкиИзЭксель = "КопироватьИзФайлаЭксель" или ГруппаКомандыЗгрузкиИзЭксель = "СоздатьСегментРуками" Тогда
		СегментОбъект.Наименование = "Сегмент скидки " + НазваниеАкции;
	ИначеЕсли ГруппаКомандыЗгрузкиИзЭксель = "ЗагрузитьИЗФайлаЭксель1" или ГруппаКомандыЗгрузкиИзЭксель = "КопироватьИзФайлаЭксель1" или ГруппаКомандыЗгрузкиИзЭксель = "СоздатьСегментРуками1" Тогда
		СегментОбъект.Наименование = "Сегмент условия " + НазваниеАкции;
	ИначеЕсли ГруппаКомандыЗгрузкиИзЭксель = "ЗагрузитьИЗФайлаЭксель2" или ГруппаКомандыЗгрузкиИзЭксель = "КопироватьИзФайлаЭксель2" или ГруппаКомандыЗгрузкиИзЭксель = "СоздатьСегментРуками2" Тогда
		СегментОбъект.Наименование = "Сегмент исключение " + НазваниеАкции;
	КонецЕсли; 
	СегментОбъект.Записать();
	Возврат Сегмент;
КонецФункции // ПереименоватьСегмент(ГруппаКомандыЗгрузкиИзЭксель)()

&НаКлиенте
Процедура ФайлЭксельНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр                      = "Excel (*.xlsx; *.xls)|*.xlsx; *.xls";
	ДиалогВыбораФайла.Заголовок                   = "Выбор файла для загрузки";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ФайлЭксель = ДиалогВыбораФайла.ПолноеИмяФайла;
	Иначе
		Сообщить("Не выбран файл для загрузки!");
	КонецЕсли;
КонецПроцедуры
 
&НаКлиенте
Процедура НастройкиСегмента(Команда)
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru = 'Настройки сегмента ""%ИмяСегмента%""'");
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = СтрЗаменить(ЗаголовокФормыНастройкиСхемыКомпоновкиДанных, "%ИмяСегмента%", НаименованиеСегмента);
	
	Результат = ОткрытьФормуМодально("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных",
									 Новый Структура("АдресСхемыКомпоновкиДанных,
													 |ИсточникШаблонов,
													 |Заголовок,
													 |УникальныйИдентификатор,
													 |ИмяШаблонаСКД,
													 |ВозвращатьИмяТекущегоШаблонаСКД",
													 URLСКД,
													 СегментССылка,
													 ЗаголовокФормыНастройкиСхемыКомпоновкиДанных,
													 УникальныйИдентификатор,
													 ИмяШаблонаСКД,
													 Истина));
	Если Результат <> Неопределено Тогда
		ИмяШаблонаСКД = Результат.ИмяТекущегоШаблонаСКД;
	КонецЕсли;
КонецПроцедуры
 
&НаСервере
Процедура ИнициализироватьСКД(ИмяКоманды = "")
	Если ИмяКоманды = "СоздатьСегментРуками1" и ЗначениеЗаполнено(СегментУсловияПоле) Тогда
		СКД = СегментУсловияПоле.СхемаКомпоновкиДанных.Получить();  
	ИначеЕсли ИмяКоманды = "СоздатьСегментРуками" и ЗначениеЗаполнено(СегментСкидкиПоле) Тогда
		СКД = СегментСкидкиПоле.СхемаКомпоновкиДанных.Получить(); 
	Иначе
		СКД = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ОсновнаяСхема");
	КонецЕсли; 
	URLСКД = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);
КонецПроцедуры // ИнициализироватьСКД()()

// +HVOYA. 17.05.2017 16:38:17, Львова Е.А.
Процедура ОчиститьТабПолеМакета()

    Макет = ТабличныйДокументЭксель;
    Для Стр=1 По Макет.ВысотаТаблицы Цикл
        Если Стр>1 Тогда
            Для Кол=1 По Макет.ШиринаТаблицы Цикл
                Яч=Макет.Область(Стр, Кол);
                Если Яч.СодержитЗначение Тогда
                    Зн=Яч.Значение;
                Иначе
                    Зн=Яч.Текст;
                КонецЕсли;
                Если НЕ Яч.СодержитЗначение И НЕ Зн=Неопределено Тогда
                    Яч.Текст=Неопределено;
                ИначеЕсли Яч.СодержитЗначение И НЕ Зн=Неопределено Тогда
                    Яч.Значение=Неопределено;
                КонецЕсли;
            КонецЦикла;
        КонецЕсли;
    КонецЦикла;

КонецПроцедуры
// -HVOYA. 17.05.2017 16:38:20, Львова Е.А.

#КонецОбласти 



&НаКлиенте
Процедура ВыбратьУсловие(Команда)
	СписокУсловийПредоставления = Новый СписокЗначений();
	Для Каждого ТекСтрока Из УсловияАкций Цикл
		СписокУсловийПредоставления.Добавить(ТекСтрока.УсловиеПредоставления);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УсловияПредоставления", СписокУсловийПредоставления);
	
	СписокУсловийПредоставления = ОткрытьФормуМодально("Справочник.УсловияПредоставленияСкидокНаценок.Форма.ФормаПодбора", ПараметрыФормы, ЭтотОбъект);
	
	Если СписокУсловийПредоставления <> Неопределено Тогда
		УсловияАкций.Очистить();
		Для Каждого ТекСтрока Из СписокУсловийПредоставления Цикл
			НоваяСтрока = УсловияАкций.Добавить();
			НоваяСтрока.УсловиеПредоставления = ТекСтрока.Значение;
		КонецЦикла;
		ОбновитьАвтонаименование(Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаУсловий(Команда)
	ОбновитьОтображение(Команда);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСкидки(Команда)
	ОбновитьОтображение(Команда);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСегмента(Команда)
	ОбновитьОтображение(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ВсеСкидки(Команда)
	ОбновитьОтображение(Команда);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСкидку(Команда)
	ОбновитьОтображение(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображение(Команда)
	Если Команда.Имя = "НастройкаСкидки" или Команда.Имя = "ДобавитьСкидку" или Команда.Имя = "РедактироватьСуществующуюСкидку" Тогда
		Элементы.ГруппаНастройкаСкидки.Видимость = Истина;
		Элементы.Настройки.Видимость = Истина;
		Элементы.ВсеСкидки.Видимость = Ложь;
		Элементы.ГруппаНастройкаСегмента.Видимость = Ложь;
		Элементы.ГруппаНастройкаУсловий.Видимость = Ложь;
		Элементы.ГруппаСоздатьСкидку.Видимость = Ложь;
		Элементы.РедктированиеСегмента.Видимость = Ложь;
	ИначеЕсли Команда.Имя = "НастройкаСегмента" Тогда
		Элементы.ГруппаНастройкаСегмента.Видимость = Истина;
		Элементы.Сегменты1.Видимость = Истина;
		Элементы.ГруппаЗагрузкиИЗЭксель.Видимость = Ложь;
		Элементы.ГруппаКопироватьИЗЭксель.Видимость = Ложь;
		Элементы.ГруппаСозданияСегментаВручную.Видимость = Ложь;
		Элементы.Настройки.Видимость = Истина;
		Элементы.ВсеСкидки.Видимость = Ложь;
		Элементы.ГруппаНастройкаУсловий.Видимость = Ложь;
		Элементы.ГруппаНастройкаСкидки.Видимость = Ложь;
		Элементы.ГруппаСоздатьСкидку.Видимость = Ложь;
		Элементы.РедктированиеСегмента.Видимость = Ложь;
	ИначеЕсли Команда.Имя = "НастройкаУсловий" или Команда.Имя = "РедактироватьУсловие" Тогда
		Элементы.ГруппаНастройкаУсловий.Видимость = Истина;
		Элементы.Настройки.Видимость = Истина;
		Элементы.ВсеСкидки.Видимость = Ложь;
		Элементы.ГруппаНастройкаСегмента.Видимость = Ложь;
		Элементы.ГруппаНастройкаСкидки.Видимость = Ложь;
		Элементы.ГруппаСоздатьСкидку.Видимость = Ложь;
		Элементы.РедктированиеСегмента.Видимость = Ложь;
	ИначеЕсли Команда.Имя = "ВсеСкидки" Тогда
		Элементы.ГруппаНастройкаУсловий.Видимость = Ложь;
		Элементы.Настройки.Видимость = Ложь;
		Элементы.ВсеСкидки.Видимость = Истина;
		Элементы.ГруппаНастройкаСегмента.Видимость = Ложь;
		Элементы.ГруппаНастройкаСкидки.Видимость = Ложь;
		Элементы.ГруппаСоздатьСкидку.Видимость = Ложь;
		Элементы.РедктированиеСегмента.Видимость = Ложь;
	ИначеЕсли Команда.Имя = "СоздатьСкидку" или Команда.Имя = "СоздатьНовуюСкидку" или Команда.Имя = "РедактироватьАкцию" Тогда
		Элементы.ГруппаНастройкаУсловий.Видимость = Ложь;
		Элементы.Настройки.Видимость = Истина;
		Элементы.ВсеСкидки.Видимость = Ложь;
		Элементы.ГруппаНастройкаСегмента.Видимость = Ложь;
		Элементы.ГруппаНастройкаСкидки.Видимость = Ложь;
		Элементы.ГруппаСоздатьСкидку.Видимость = Истина;
		Элементы.РедктированиеСегмента.Видимость = Ложь;
		ДляВсехМагазинов = Истина;
		ДляВсехМагазиновОдноРасписаниеСкидок = Истина;
		//Магазины.Очистить();
		УстановитьДоступность();
		ОпределитьПараметрыПроведенияАкции();
	ИначеЕсли Команда.Имя = "РедактироватьСегмент" Тогда
		Элементы.ВсеСкидки.Видимость = Ложь;
		Элементы.Настройки.Видимость = Ложь;
		Элементы.РедктированиеСегмента.Видимость = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьВсеСкидки(Объект.ТЧВсеСкидки);
	ПараметрыПроведенияАкции = "ОдноДляВсех";
	СпособФормирования = Перечисления.СпособыФормированияСегментов.ФормироватьВручную;
	СкидкиНаценкиСерверПереопределяемый.ПолучитьСписокЗначенийСпособовПредоставленияСкидки(Элементы.СпособПредоставления.СписокВыбора);
	СкидкиНаценкиСерверПереопределяемый.ПолучитьСписокЗначенийУсловийПредоставленияСкидки(Элементы.УсловиеПредоставления.СписокВыбора);
	ЗаполнитьСписокВыбораТипаПолучателей();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьВсеСкидки(ВсеСкидки, Активные = Истина)
	
	Запрос = Новый Запрос;
	
	Если Активные Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействиеСкидокНаценок.СкидкаНаценка КАК Наименование,
		|	ДействиеСкидокНаценок.Период КАК ДатаНачала,
		|	ДействиеСкидокНаценок.ДатаОкончания,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция).ДляВсехМагазинов
		|				И ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция).ДляВсехМагазиновОдноРасписаниеСкидок
		|			ТОГДА ""ОдноДляВсех""
		|		КОГДА НЕ ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция).ДляВсехМагазинов
		|				И ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция).ДляВсехМагазиновОдноРасписаниеСкидок
		|			ТОГДА ""ОдноДляВыбранных""
		|		ИНАЧЕ ""ИндивидуальноеРасписание""
		|	КОНЕЦ КАК Расписание,
		|	ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция).НаименованиеАкции КАК НаименованиеАкции,
		|	ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция) КАК Акция
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
		|ГДЕ
		|	(ДействиеСкидокНаценок.ДатаОкончания > &ДатаОкончания
		|			ИЛИ ДействиеСкидокНаценок.ДатаОкончания = &ПустаяДата)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция),
		|	ДействиеСкидокНаценок.ДатаОкончания,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция).ДляВсехМагазинов
		|				И ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция).ДляВсехМагазиновОдноРасписаниеСкидок
		|			ТОГДА ""ОдноДляВсех""
		|		КОГДА НЕ ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция).ДляВсехМагазинов
		|				И ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция).ДляВсехМагазиновОдноРасписаниеСкидок
		|			ТОГДА ""ОдноДляВыбранных""
		|		ИНАЧЕ ""ИндивидуальноеРасписание""
		|	КОНЕЦ,
		|	ДействиеСкидокНаценок.СкидкаНаценка,
		|	ДействиеСкидокНаценок.Период,
		|	ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция).НаименованиеАкции
		|
		|УПОРЯДОЧИТЬ ПО
		|	НаименованиеАкции";
		
		Запрос.УстановитьПараметр("ДатаОкончания", ТекущаяДата());
		Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействиеСкидокНаценок.СкидкаНаценка КАК Наименование,
		|	ДействиеСкидокНаценок.Период КАК ДатаНачала,
		|	ДействиеСкидокНаценок.ДатаОкончания,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция).ДляВсехМагазинов
		|				И ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция).ДляВсехМагазиновОдноРасписаниеСкидок
		|			ТОГДА ""ОдноДляВсех""
		|		КОГДА НЕ ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция).ДляВсехМагазинов
		|				И ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция).ДляВсехМагазиновОдноРасписаниеСкидок
		|			ТОГДА ""ОдноДляВыбранных""
		|		ИНАЧЕ ""ИндивидуальноеРасписание""
		|	КОНЕЦ КАК Расписание,
		|	ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция).НаименованиеАкции КАК НаименованиеАкции,
		|	ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция) КАК Акция
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция).ДляВсехМагазинов
		|				И ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция).ДляВсехМагазиновОдноРасписаниеСкидок
		|			ТОГДА ""ОдноДляВсех""
		|		КОГДА НЕ ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция).ДляВсехМагазинов
		|				И ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция).ДляВсехМагазиновОдноРасписаниеСкидок
		|			ТОГДА ""ОдноДляВыбранных""
		|		ИНАЧЕ ""ИндивидуальноеРасписание""
		|	КОНЕЦ,
		|	ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция),
		|	ДействиеСкидокНаценок.Период,
		|	ВЫРАЗИТЬ(ДействиеСкидокНаценок.Регистратор КАК Документ.МаркетинговаяАкция).НаименованиеАкции,
		|	ДействиеСкидокНаценок.СкидкаНаценка,
		|	ДействиеСкидокНаценок.ДатаОкончания
		|
		|УПОРЯДОЧИТЬ ПО
		|	НаименованиеАкции";
	КонецЕсли; 
	
	Результат = Запрос.Выполнить();
	
	ВсеСкидки.Загрузить(Результат.Выгрузить());
	
КонецПроцедуры // ЗаполнитьВсеСкидки(ВсеСкидки)()

&НаКлиенте
Процедура ТЧВсеСкидкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеСкидки(Команда)
	КопияВсеСкидки = Объект.ТЧВсеСкидки;
	ЗаполнитьВсеСкидки(КопияВсеСкидки, Ложь);
	КопироватьДанныеФормы(КопияВсеСкидки, Объект.ТЧВсеСкидки);
КонецПроцедуры

&НаКлиенте
Процедура ТолькоДействующие(Команда)
	КопияВсеСкидки = Объект.ТЧВсеСкидки;
	ЗаполнитьВсеСкидки(КопияВсеСкидки);
	КопироватьДанныеФормы(КопияВсеСкидки, Объект.ТЧВсеСкидки);
КонецПроцедуры

#Область ГруппаСоздатьСкидку

&НаКлиенте
Процедура ПараметрыПроведенияАкцииПриИзменении(Элемент)
		
	//ПредыдущееСостоняиеРасписания = ДляВсехМагазиновОдноРасписаниеСкидок;
	Если ПараметрыПроведенияАкции = "ИндивидуальноеРасписание" Тогда
		ДляВсехМагазинов = Ложь;
		ДляВсехМагазиновОдноРасписаниеСкидок = Ложь;
	ИначеЕсли ПараметрыПроведенияАкции = "ОдноДляВсех" Тогда
		ДляВсехМагазинов = Истина;
		ДляВсехМагазиновОдноРасписаниеСкидок = Истина;
		Магазины.Очистить();
	ИначеЕсли ПараметрыПроведенияАкции = "ОдноДляВыбранных" Тогда
		ДляВсехМагазинов = Ложь;
		ДляВсехМагазиновОдноРасписаниеСкидок = Истина;
	КонецЕсли;
	УстановитьДоступность();
	ОпределитьПараметрыПроведенияАкции();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыПроведенияАкции()
	
	ТекстЗаголовка = "";
	
	Если ДляВсехМагазинов И ДляВсехМагазиновОдноРасписаниеСкидок Тогда
		
		Если ПустаяСтрока(ПараметрыПроведенияАкции) Тогда
			ПараметрыПроведенияАкции = "ОдноДляВсех";
		КонецЕсли;
		ТекстЗаголовка = НСтр("ru = 'Расписание для всех магазинов'");
		
	ИначеЕсли (НЕ ДляВсехМагазинов) И ДляВсехМагазиновОдноРасписаниеСкидок Тогда
		
		Если ПустаяСтрока(ПараметрыПроведенияАкции) Тогда
			ПараметрыПроведенияАкции = "ОдноДляВыбранных";
		КонецЕсли;
		ТекстЗаголовка = НСтр("ru = 'Расписание для всех выбранных магазинов'");
		
	Иначе
		
		Если ПустаяСтрока(ПараметрыПроведенияАкции) Тогда
			ПараметрыПроведенияАкции = "ИндивидуальноеРасписание";
		КонецЕсли;
		ТекущаяСтрокаМагазины = Элементы.Магазины.ТекущиеДанные;
		ТекущийМагазин = "";
		Если ТекущаяСтрокаМагазины <> Неопределено Тогда
			ТекущийМагазин = ТекущаяСтрокаМагазины.Магазин;
		КонецЕсли;
		
		ТекстЗаголовка = НСтр("ru = 'Расписание для магазина %1'");
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, ТекущийМагазин);
		
	КонецЕсли;
	Элементы.ГруппаПраво.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура МагазиныПриИзменении(Элемент)
	
	Если НЕ ДляВсехМагазиновОдноРасписаниеСкидок Тогда
		ТекущаяСтрокаМагазины = Элементы.Магазины.ТекущиеДанные;
		Если ТекущаяСтрокаМагазины <> Неопределено Тогда
			УстановитьОтборСтрокВСкидкахНаценках(ТекущаяСтрокаМагазины.Магазин);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьТаблицыСкидкиНаценки();
	
КонецПроцедуры

&НаКлиенте
Процедура МагазиныПриАктивизацииСтроки(Элемент)
	ТекущаяСтрокаМагазины = Элементы.Магазины.ТекущиеДанные;
	Если ТекущаяСтрокаМагазины = Неопределено ИЛИ ДляВсехМагазиновОдноРасписаниеСкидок Тогда
		УстановитьОтборСтрокВСкидкахНаценках(ПредопределенноеЗначение("Справочник.Магазины.ПустаяСсылка"));
	Иначе
		УстановитьОтборСтрокВСкидкахНаценках(ТекущаяСтрокаМагазины.Магазин);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МагазиныПередУдалением(Элемент, Отказ)
	ТекущаяСтрокаМагазины = Элементы.Магазины.ТекущиеДанные;
	
	мОтбор = Новый Структура;
	мОтбор.Вставить("Магазин",ТекущаяСтрокаМагазины.Магазин);
	
	СтрокиСкидкиНаценки = СкидкиНаценки.НайтиСтроки(мОтбор);
	Для каждого СтрокаСкидкиНаценки Из СтрокиСкидкиНаценки Цикл
		СкидкиНаценки.Удалить(СтрокаСкидкиНаценки);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура МагазиныПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		мМагазинПриНачалеРедактирования = "";
	Иначе
		мМагазинПриНачалеРедактирования = Элементы.Магазины.ТекущиеДанные.Магазин;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МагазиныПослеУдаления(Элемент)
	ТекущаяСтрокаМагазины = Элементы.Магазины.ТекущиеДанные;
	Если ТекущаяСтрокаМагазины = Неопределено Тогда
		УстановитьОтборСтрокВСкидкахНаценках(ПредопределенноеЗначение("Справочник.Магазины.ПустаяСсылка"));
	Иначе
		УстановитьОтборСтрокВСкидкахНаценках(ТекущаяСтрокаМагазины.Магазин);
	КонецЕсли;
	УстановитьДоступностьТаблицыСкидкиНаценки();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступность()

	УстановитьДоступностьТаблицыСкидкиНаценки();
	Элементы.ГруппаЛево.Видимость = не ДляВсехМагазинов;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьТаблицыСкидкиНаценки()
	ДоступностьРасписания = ДляВсехМагазинов ИЛИ ДляВсехМагазиновОдноРасписаниеСкидок ИЛИ Магазины.Количество()>0;
	Элементы.СкидкиНаценки.Доступность = ДоступностьРасписания;
	Элементы.СкидкиНаценки.ТолькоПросмотр = НЕ Элементы.СкидкиНаценки.Доступность;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокВСкидкахНаценках(МагазинОтбора)
	Элементы.СкидкиНаценки.ОтборСтрок = Новый ФиксированнаяСтруктура("Магазин", МагазинОтбора);
	Если НЕ ДляВсехМагазиновОдноРасписаниеСкидок Тогда
		
		Если НЕ ЗначениеЗаполнено(МагазинОтбора) Тогда
			МагазинОтбораТекст = НСтр("ru = '<выберите магазин>'");
		Иначе
			МагазинОтбораТекст = Строка(МагазинОтбора);
		КонецЕсли;
		
		ТекстЗаголовка = НСтр("ru = 'Расписание для магазина: %1'");
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, МагазинОтбораТекст);
		Элементы.ГруппаПраво.Заголовок = ТекстЗаголовка;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкидкиНаценкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.СкидкиНаценки.ТекущиеДанные;
	Если НЕ Элементы.СкидкиНаценки.ОтборСтрок = Неопределено Тогда
		ТекущиеДанные.Магазин = Элементы.СкидкиНаценки.ОтборСтрок.Магазин;
	КонецЕсли; 
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.ДатаНачала    = ДатаНачалаДействия;
		ТекущиеДанные.ДатаОкончания = ДатаОкончанияДействия;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МагазиныМагазинПриИзменении(Элемент)
	Если НЕ ДляВсехМагазиновОдноРасписаниеСкидок Тогда
		ТекущаяСтрокаМагазины = Элементы.Магазины.ТекущиеДанные;
		
		Если Не ТекущаяСтрокаМагазины.Магазин = мМагазинПриНачалеРедактирования Тогда
			
			мОтбор = Новый Структура;
			мОтбор.Вставить("Магазин",мМагазинПриНачалеРедактирования);
			
			СтрокиСкидкиНаценки = СкидкиНаценки.НайтиСтроки(мОтбор);
			Для каждого СтрокаСкидкиНаценки Из СтрокиСкидкиНаценки Цикл
				СтрокаСкидкиНаценки.Магазин = ТекущаяСтрокаМагазины.Магазин;
			КонецЦикла;
			УстановитьОтборСтрокВСкидкахНаценках(ТекущаяСтрокаМагазины.Магазин);
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти 

#Область ГруппаНастройкаСкидки
&НаКлиенте
Процедура СпособПредоставленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
КонецПроцедуры

&НаКлиенте
Процедура СпособПредоставленияПриИзменении(Элемент)
	ИзменитьВидимостьЭлементов();
	СпособПредоставленияПриИзмененииСервер();
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьЭлементов()
	
	Если СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.ВидЦены") Тогда
		
		Элементы.ДекорацияПроцент.Видимость      = Ложь;
		Элементы.ЗначениеСкидкиНаценки.Видимость = Ложь;
		Элементы.ГруппаЦеновыеГруппы.Видимость   = Ложь; // В виде цен есть собственные ценовые группы.
		
		Элементы.ПодарокИзКорзиныПокупателя.Видимость           = Ложь;
		Элементы.КоличествоПодарковИзКорзиныПокупателя.Видимость = Ложь;
		
		Элементы.ВидЦены.Видимость               = Истина;
		
		Элементы.ПодарокИзКорзиныПокупателя.Видимость            = Ложь;
		Элементы.КоличествоПодарковИзКорзиныПокупателя.Видимость = Ложь;
		Элементы.ГруппаНаборПодарков.Видимость   = Ложь; 
		Элементы.ГруппаОбластьПредоставления.Видимость = Истина;
		Элементы.ГруппаОбластьСегмента.Видимость = Ложь;
		Элементы.УсловияАкций.АвтоОтметкаНезаполненного = Ложь;
		
		Элементы.МоментВыдачиСообщения.Видимость = Ложь;
		Элементы.ГруппаСообщение.Видимость       = Ложь; 
		Элементы.ВыдатьСкидочныйКупон.Видимость = Ложь;
		Элементы.ГруппаДиапазонСкидок.Видимость = Ложь;
		Элементы.ГруппаУсловияПредоставления.Видимость = Истина;
	ИначеЕсли СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.Процент")
		ИЛИ СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыПредыдущейПокупки") Тогда
		
		Элементы.ВидЦены.Видимость               = Ложь;
		
		Элементы.ДекорацияПроцент.Видимость      = Истина;
		Элементы.ЗначениеСкидкиНаценки.Видимость = Истина;
		Элементы.ГруппаЦеновыеГруппы.Видимость   = Истина;
		
		Элементы.ПодарокИзКорзиныПокупателя.Видимость            = Ложь;
		Элементы.КоличествоПодарковИзКорзиныПокупателя.Видимость = Ложь;
		Элементы.ГруппаНаборПодарков.Видимость   = Ложь; 
		
		Элементы.МоментВыдачиСообщения.Видимость = Ложь;
		Элементы.ГруппаСообщение.Видимость       = Ложь; 
		Элементы.ГруппаОбластьСегмента.Видимость = Ложь;
		Элементы.ГруппаОбластьПредоставления.Видимость = Истина;
		Если СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыПредыдущейПокупки") Тогда
			Элементы.УсловияАкций.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Элементы.УсловияАкций.АвтоОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
		Элементы.ВыдатьСкидочныйКупон.Видимость = Ложь;
		Элементы.ГруппаЦеновыеГруппы.Видимость = Истина;
		Элементы.ГруппаДиапазонСкидок.Видимость = Ложь;
		Элементы.ГруппаУсловияПредоставления.Видимость = Истина;
	ИначеЕсли СпособПредоставления =ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.Сумма") Тогда
		
		Элементы.ДекорацияПроцент.Видимость      = Ложь;
		Элементы.ВидЦены.Видимость               = Ложь;
		
		Элементы.ЗначениеСкидкиНаценки.Видимость = Истина;
		
		Если ОбластьПредоставления = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе") Тогда
			
			Элементы.ГруппаЦеновыеГруппы.Видимость = Ложь;
			
		ИначеЕсли ОбластьПредоставления =  ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке") Тогда
			
			Элементы.ГруппаЦеновыеГруппы.Видимость = Истина;
			
		Иначе
			
			Элементы.ГруппаЦеновыеГруппы.Видимость = Ложь;
			
		КонецЕсли;
		
		Элементы.ПодарокИзКорзиныПокупателя.Видимость            = Ложь;
		Элементы.КоличествоПодарковИзКорзиныПокупателя.Видимость = Ложь;
		Элементы.ГруппаНаборПодарков.Видимость   = Ложь; 
		Элементы.ГруппаОбластьПредоставления.Видимость = Истина;
		Элементы.ГруппаОбластьСегмента.Видимость = Ложь;
		Элементы.МоментВыдачиСообщения.Видимость = Ложь;
		Элементы.ГруппаСообщение.Видимость       = Ложь; 
		Элементы.УсловияАкций.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ВыдатьСкидочныйКупон.Видимость = Ложь;
		Элементы.ГруппаДиапазонСкидок.Видимость = Ложь;
		Элементы.ГруппаУсловияПредоставления.Видимость = Истина;

	ИначеЕсли СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.Подарок") Тогда
		
		Элементы.ДекорацияПроцент.Видимость      = Ложь;
		Элементы.ЗначениеСкидкиНаценки.Видимость = Ложь;
		Элементы.ГруппаЦеновыеГруппы.Видимость   = Ложь; 
		Элементы.ВидЦены.Видимость               = Ложь;
		
		Элементы.ПодарокИзКорзиныПокупателя.Видимость            = Истина;
		Элементы.КоличествоПодарковИзКорзиныПокупателя.Видимость = Истина;
		
		Элементы.КоличествоПодарковИзКорзиныПокупателя.Доступность = ПодарокИзКорзиныПокупателя;
		Элементы.ГруппаОбластьСегмента.Видимость = Ложь;
		Элементы.ГруппаОбластьПредоставления.Видимость = ПодарокИзКорзиныПокупателя;
		Элементы.ГруппаНаборПодарков.Видимость   = НЕ ПодарокИзКорзиныПокупателя;; 
		
		Элементы.МоментВыдачиСообщения.Видимость = Ложь;
		Элементы.ГруппаСообщение.Видимость       = Ложь;
		Элементы.УсловияАкций.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ВыдатьСкидочныйКупон.Видимость = Ложь;
		Элементы.ГруппаДиапазонСкидок.Видимость = Ложь;
		Элементы.ГруппаУсловияПредоставления.Видимость = Истина;
	ИначеЕсли СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.Сообщение") Тогда

		Элементы.ДекорацияПроцент.Видимость      = Ложь;
		Элементы.ЗначениеСкидкиНаценки.Видимость = Ложь;
		Элементы.ГруппаЦеновыеГруппы.Видимость   = Ложь; 
		Элементы.ВидЦены.Видимость               = Ложь;
		
		Элементы.ГруппаОбластьПредоставления.Видимость = Ложь;
		Элементы.ГруппаОбластьСегмента.Видимость = Ложь;
		Элементы.ПодарокИзКорзиныПокупателя.Видимость            = Ложь;
		Элементы.КоличествоПодарковИзКорзиныПокупателя.Видимость = Ложь;
		Элементы.ГруппаНаборПодарков.Видимость   = Ложь; 
		Элементы.УсловияАкций.АвтоОтметкаНезаполненного = Ложь;
		Элементы.МоментВыдачиСообщения.Видимость = Истина;
		Элементы.ГруппаСообщение.Видимость       = Истина;
		Элементы.ВыдатьСкидочныйКупон.Видимость = Истина;
		Элементы.ГруппаДиапазонСкидок.Видимость = Ложь;
		Элементы.ГруппаУсловияПредоставления.Видимость = Истина;
	ИначеЕсли СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.ЗапретРозничнойПродажи") Тогда

		Элементы.ДекорацияПроцент.Видимость      = Ложь;
		Элементы.ЗначениеСкидкиНаценки.Видимость = Ложь;
		Элементы.ГруппаЦеновыеГруппы.Видимость   = Ложь; 
		Элементы.ВидЦены.Видимость               = Ложь;
		
		Элементы.ГруппаОбластьПредоставления.Видимость = Ложь;
		Элементы.ГруппаОбластьСегмента.Видимость = Истина;
		
		Элементы.ПодарокИзКорзиныПокупателя.Видимость            = Ложь;
		Элементы.КоличествоПодарковИзКорзиныПокупателя.Видимость = Ложь;
		Элементы.ГруппаНаборПодарков.Видимость   = Ложь; 
		Элементы.УсловияАкций.АвтоОтметкаНезаполненного = Истина;
		Элементы.МоментВыдачиСообщения.Видимость = Ложь;
		Элементы.ГруппаСообщение.Видимость       = Ложь; 
		Элементы.ВыдатьСкидочныйКупон.Видимость = Ложь;
		Элементы.ГруппаДиапазонСкидок.Видимость = Ложь;
		Элементы.ГруппаУсловияПредоставления.Видимость = Истина;
	ИначеЕсли СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.ДиапазонПроцентов") Тогда
		
		Элементы.ВидЦены.Видимость               = Ложь;
		
		Элементы.ГруппаЦеновыеГруппы.Видимость   = Ложь;
		
		Элементы.ПодарокИзКорзиныПокупателя.Видимость            = Ложь;
		Элементы.КоличествоПодарковИзКорзиныПокупателя.Видимость = Ложь;
		Элементы.ГруппаНаборПодарков.Видимость   = Ложь; 
		Элементы.ГруппаОбластьПредоставления.Видимость = Истина;
		Элементы.МоментВыдачиСообщения.Видимость = Ложь;
		Элементы.ГруппаСообщение.Видимость       = Ложь; 
		Элементы.ГруппаОбластьСегмента.Видимость = Ложь;
		Элементы.УсловияАкций.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ГруппаДиапазонСкидок.Видимость = Истина;
		Элементы.ЗначениеСкидкиНаценки.Видимость = Ложь;
		Элементы.ДекорацияПроцент.Видимость = Ложь;
		Элементы.ГруппаУсловияПредоставления.Видимость = Истина;
		
	КонецЕсли; 

	Если ВыдатьСкидочныйКупон Тогда
		Элементы.НоменклатураСкидочногоКупона.Видимость = Истина;
		Элементы.ВариантВыдачиКупона.Видимость = Истина;
	Иначе
		Элементы.НоменклатураСкидочногоКупона.Видимость = Ложь;
		Элементы.ВариантВыдачиКупона.Видимость = Ложь;	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СпособПредоставленияПриИзмененииСервер()
	Если СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.ЗапретРозничнойПродажи") Тогда
		Элементы.Управляемая.Доступность = Ложь;
		Если Управляемая Тогда
			Управляемая = Ложь;
			ТекстСообщения = НСтр("ru = 'Запрет розничной продажи используется только в автоматических скидках'");
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить(); 
		КонецЕсли;
	Иначе
		Элементы.Управляемая.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбластьПредоставленияПриИзменении(Элемент)
	ИзменитьВидимостьЭлементов();
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодарокИзКорзиныПокупателяПриИзменении(Элемент)
	ИзменитьВидимостьЭлементов();
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыдатьСкидочныйКупонПриИзменении(Элемент)
	ИзменитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСегментСкидки(Команда)
	Элементы.ГруппаНастройкаСкидки.Видимость = Ложь;
	Элементы.ГруппаНастройкаСегмента.Видимость = Истина;
	Элементы.СегментУсловия.Видимость = Ложь;
	Элементы.СегментСкидки.Видимость = Истина;
	Элементы.СегментИсключение.Видимость = Истина;
	Элементы.Сегменты.Видимость = Истина;
	Элементы.Сегменты1.Видимость = Истина;
	Элементы.Перенести.Видимость = Истина;
	Элементы.ГруппаЗагрузкиИЗЭксель.Видимость = Ложь;
	Элементы.ГруппаКопироватьИЗЭксель.Видимость = Ложь;
	Элементы.ГруппаСозданияСегментаВручную.Видимость = Ложь;
	ПредыдущаяСраница = ЭтотОбъект.ТекущийЭлемент.Имя;
	// + HVOYA 10.02.2017 19:50:33, Латышев А.А.
	ЗаполнитьСтекСтраниц(НомерТекущейСтраници, Элементы.СегментСкидки);
	// - HVOYA 10.02.2017 19:50:33, Латышев А.А. 
КонецПроцедуры

&НаКлиенте
Процедура СотворитьСкидку(Команда)
	Если Не ЗначениеЗаполнено(НазваниеСкидки) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнено наименование скидки";
		Сообщение.Поле = "НазваниеСкидки";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Родитель) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен родитель скидки";
		Сообщение.Поле = "Родитель";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	Если Родитель = ПредопределенноеЗначение("Справочник.СкидкиНаценки.ПоследовательноеПрименение") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нельзя устанавливать группу ""ПоследовательноеПрименение"" в качестве родителя";
		Сообщение.Поле = "Родитель";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтатусДействия) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен статус действия скидки";
		Сообщение.Поле = "СтатусДействия";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	Если СкидкаСсылка = Неопределено Тогда
		Скидка = СотворитьСкидкуНаСервере();
	Иначе
		Скидка = СотворитьСкидкуНаСервере(СкидкаСсылка);
	КонецЕсли; 
	Если ЗначениеЗаполнено(Скидка) Тогда
		Отбор = Новый Структура("СкидкаНаценка", Скидка); 
		МассивСтрок = СкидкиНаценки.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() = 0 Тогда
			НоваяСтрока = СкидкиНаценки.Добавить();
			НоваяСтрока.СкидкаНаценка = Скидка;
			НоваяСтрока.ДатаНачала = ДатаНачалаДействия;
			НоваяСтрока.ДатаОкончания = ДатаОкончанияДействия;
			Если Не ДляВсехМагазиновОдноРасписаниеСкидок Тогда
				НоваяСтрока.Магазин = Магазины[Элементы.Магазины.ТекущаяСтрока].Магазин;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Щось коiлось!!!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли; 
	Элементы.ГруппаНастройкаСкидки.Видимость = Ложь;
	Элементы.ГруппаСоздатьСкидку.Видимость = Истина;
	// + HVOYA 10.02.2017 19:46:33, Латышев А.А.
	ЗаполнитьСтекСтраниц(НомерТекущейСтраници, Элементы.ГруппаСоздатьСкидку);
	// - HVOYA 10.02.2017 19:46:33, Латышев А.А. 
	
КонецПроцедуры

&НаСервере
Функция СотворитьСкидкуНаСервере(Скидка = Неопределено)
	Если НЕ Скидка = Неопределено Тогда

		Скидка = Скидка.ПолучитьОбъект();

	Иначе

		Скидка = Справочники.СкидкиНаценки.СоздатьЭлемент();
		Скидка.УстановитьНовыйКод();	//	LNK 30.09.2022 05:27:37

	КонецЕсли;

	Скидка.Наименование = НазваниеСкидки;
	Скидка.Родитель = Родитель;
	Скидка.СпособПредоставления = СпособПредоставления;
	Скидка.ПрограммаЛояльности  = ПрограммаЛояльности;
	Скидка.Управляемая = Управляемая;
	Скидка.СтатусДействия = СтатусДействия;
	Скидка.УсловияПредоставления.Очистить();
	Скидка.ЦеновыеГруппы.Очистить();
	Скидка.НаборПодарков.Очистить();
	Если СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.Процент") или СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыПредыдущейПокупки") Тогда
		Скидка.ОбластьПредоставления = ОбластьПредоставления;
		Скидка.ЗначениеСкидкиНаценки = ЗначениеСкидкиНаценки;
		Скидка.СегментНоменклатурыПредоставления = СегментСкидкиПоле;

		Для каждого Строка Из УсловияАкций Цикл
			НоваяСтрока = Скидка.УсловияПредоставления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		Для каждого Строка Из ЦеновыеГруппы Цикл
			НоваяСтрока = Скидка.ЦеновыеГруппы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	ИначеЕсли СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.Сумма") Тогда
		Скидка.ОбластьПредоставления = ОбластьПредоставления;
		Скидка.ЗначениеСкидкиНаценки = ЗначениеСкидкиНаценки;
		Скидка.СегментНоменклатурыПредоставления = СегментСкидкиПоле;

		Для каждого Строка Из УсловияАкций Цикл
			НоваяСтрока = Скидка.УсловияПредоставления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	ИначеЕсли СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.ВидЦены") Тогда
		Скидка.ОбластьПредоставления = ОбластьПредоставления;
		Скидка.ВидЦены = ВидЦены;
		Скидка.СегментНоменклатурыПредоставления = СегментСкидкиПоле;

		Для каждого Строка Из УсловияАкций Цикл
			НоваяСтрока = Скидка.УсловияПредоставления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	ИначеЕсли СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.Подарок") Тогда
		Скидка.КоличествоПодарковИзКорзиныПокупателя = КоличествоПодарковИзКорзиныПокупателя;
		Скидка.ПодарокИзКорзиныПокупателя = ПодарокИзКорзиныПокупателя;
		Скидка.ПодарокИзСписка = ПодарокИзСписка;
		Скидка.УчитыватьПодарокКакПродажу = УчитыватьПодарокКакПродажу;
		Скидка.ОбластьПредоставления = ОбластьПредоставления;
		Скидка.СегментНоменклатурыПредоставления = СегментСкидкиПоле;
		Для каждого Строка Из УсловияАкций Цикл
			НоваяСтрока = Скидка.УсловияПредоставления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		Для каждого Строка Из НаборПодарков Цикл
			НоваяСтрока = Скидка.НаборПодарков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	ИначеЕсли СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.Сообщение") Тогда
		Скидка.МоментВыдачиСообщения = МоментВыдачиСообщения;
		Скидка.ВыдатьСкидочныйКупон = ВыдатьСкидочныйКупон;
		Скидка.НоменклатураСкидочногоКупона = НоменклатураСкидочногоКупона;
		Скидка.ВариантВыдачиКупона = ВариантВыдачиКупона;
		Скидка.ТекстСообщения = ТекстСообщения;
		Для каждого Строка Из УсловияАкций Цикл
			НоваяСтрока = Скидка.УсловияПредоставления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЕсли;	
	Скидка.ОбластьПредоставления = ОбластьПредоставления;
	Скидка.ШаблонЧека = ШаблонЧека;
	Скидка.ТипСкидкиНаценки = ТипСкидкиНаценки;
	Скидка.ВидСкидкиНаценки = ВидСкидкиНаценки;
	
	Скидка.Поставщик = Поставщик;
	Скидка.ДоляКомпенсации = ДоляКомпенсации;
	Скидка.ТипКомпенсации = ТипКомпенсации;
	Скидка.УчаствуетВПереоценке = УчаствуетВПереоценке;
	Скидка.УстановитьНовыйКод();	//	LNK 19.09.2022 06:49:08
	Скидка.Записать();
	Ссылка = Скидка.Ссылка;
	Скидка = Неопределено;
	Возврат Ссылка;
КонецФункции // ()

&НаКлиенте
Процедура ОбновитьАвтонаименование(Обновить = Истина)
	
	Если Не ЗначениеЗаполнено(НазваниеСкидки) ИЛИ (Обновить И Не НаименованиеИзмененоПользователем) Тогда
		НазваниеСкидки = СформироватьАвтоНаименованиеНаКлиенте();
		ИспользуетсяАвтоНаименование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазваниеСкидкиПриИзменении(Элемент)
	
	НаименованиеИзмененоПользователем = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьАвтоНаименованиеНаКлиенте()
	
	//Элементы.НазваниеСкидки.Очистить();
	
	СтрокаНаименования = "";
	
	Если СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.Процент") Тогда
		
		СтрокаНаименования = "" + ЗначениеСкидкиНаценки + НСтр("ru = '%'") + 
		?(ОбластьПредоставления = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе"),
		?(ЗначениеЗаполнено(СегментСкидкиПоле)," " + НСтр("ru = 'на номенклатуру сегмента'")+ " " +СегментСкидкиПоле,""),
		" " +НСтр("ru = 'в строке'")+?(ЗначениеЗаполнено(СегментСкидкиПоле),НСтр("ru = ', если номенклатура входит в сегмент'")+ " " +СегментСкидкиПоле,"")
		);
		
	ИначеЕсли СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.Сумма") Тогда
		
		СтрокаНаименования = "" + ЗначениеСкидкиНаценки + 
		?(ОбластьПредоставления = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе"),
		?(ЗначениеЗаполнено(СегментСкидкиПоле)," " +НСтр("ru = 'на номенклатуру сегмента'")+ " " +СегментСкидкиПоле,""),
		" " +НСтр("ru = 'на строку'")+?(ЗначениеЗаполнено(СегментСкидкиПоле),НСтр("ru = ', если номенклатура входит в сегмент'")+ " " +СегментСкидкиПоле,"")
		);
		
	ИначеЕсли СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.ВидЦены") Тогда
		
		СтрокаНаименования = НСтр("ru = 'Вид цены'") + " " + ВидЦены + 
		?(ОбластьПредоставления = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе"),
		?(ЗначениеЗаполнено(СегментСкидкиПоле)," " +НСтр("ru = 'на номенклатуру сегмента'")+ " " +СегментСкидкиПоле,""),
		" " +НСтр("ru = 'в строке'")+?(ЗначениеЗаполнено(СегментСкидкиПоле),НСтр("ru = ', если номенклатура входит в сегмент'")+ " " +СегментСкидкиПоле,"")
		);
		
	ИначеЕсли СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.Подарок") Тогда
		
		СтрокаНаименования = НСтр("ru = 'Подарок'");
		
	ИначеЕсли СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.Сообщение")  Тогда
		
		СтрокаНаименования = НСтр("ru = 'Сообщение кассиру'");
		
	ИначеЕсли СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыПредыдущейПокупки") Тогда
		
		СтрокаНаименования = "" + ЗначениеСкидкиНаценки + НСтр("ru = '% от суммы предыдущей покупки'");
		Если ОбластьПредоставления = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе") Тогда
			СтрокаНаименования = СтрокаНаименования
				+ ?(ЗначениеЗаполнено(СегментСкидкиПоле)," " + НСтр("ru = 'на номенклатуру сегмента'")+ " " +СегментСкидкиПоле,"");
		Иначе
			СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'в строке'")
				+ ?(ЗначениеЗаполнено(СегментСкидкиПоле), НСтр("ru = ', если номенклатура входит в сегмент'")+ " " + СегментСкидкиПоле, "");
		КонецЕсли;
		
		
	ИначеЕсли СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.ЗапретРозничнойПродажи") Тогда
		
		СтрокаНаименования = НСтр("ru = 'Запрет розничной продажи'");
		
	КонецЕсли;
	
	Если Управляемая Тогда
		СтрокаНаименования = НСтр("ru = 'Назначается вручную:'") + " " + СтрокаНаименования;
	КонецЕсли;
	
	Элементы.НазваниеСкидки.СписокВыбора.Добавить(СтрокаНаименования);
	
	Если УсловияАкций.Количество() = 1 Тогда
		СтрокаНаименования = СтрокаНаименования + " ("+УсловияАкций[0].УсловиеПредоставления+")";
		Элементы.НазваниеСкидки.СписокВыбора.Добавить(СтрокаНаименования);
	ИначеЕсли УсловияАкций.Количество() > 1 Тогда
		
		КоличествоУсловий = УсловияАкций.Количество();
		
		Если КоличествоУсловий >= 2 Тогда
			СтрокаНаименования = СтрокаНаименования + " " +НСтр("ru = '(несколько условий)'");
			Элементы.НазваниеСкидки.СписокВыбора.Добавить(СтрокаНаименования);
		КонецЕсли;
		
	ИначеЕсли УсловияАкций.Количество() = 0 Тогда
		СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'без условий'");
		Элементы.НазваниеСкидки.СписокВыбора.Добавить(СтрокаНаименования);
	КонецЕсли;
	
	Если ЦеновыеГруппы.Количество() > 0 Тогда
		СтрокаНаименования = СтрокаНаименования + " " +НСтр("ru = '(с уточнением по ценовым группам)'");
		Элементы.НазваниеСкидки.СписокВыбора.Добавить(СтрокаНаименования);
	КонецЕсли;
	
	// + HVOYA 13.09.2016 14:21:14, Латышев А.А.
	Если СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.ДиапазонПроцентов") Тогда
		СтрокаНаименования = "";
		КоличествоСегментов = УсловияАкций.Количество();
		Если КоличествоСегментов > 0 Тогда
			Программа = hiПолучитьРодителяНаСервере(УсловияАкций[0].УсловиеПредоставления); 
		Иначе
			Программа = " ";
		КонецЕсли; 
		СтрокаНаименования = "Комплексная покупка по программе " + Программа + ", на " + УсловияАкций.Количество() + " сегментов, ";
		Для каждого Строка Из ДиапазонПроцентов Цикл
			СтрокаНаименования = СтрокаНаименования + Строка.Процент + "% "
		КонецЦикла;
		СтрокаНаименования = СтрокаНаименования + " соответственно."
	КонецЕсли;
	// - HVOYA 13.09.2016 14:21:14, Латышев А.А. 
	
	Возврат СтрокаНаименования;

КонецФункции

&НаСервереБезКонтекста
Функция hiПолучитьРодителяНаСервере(Условие)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Условие,"Родитель");
КонецФункции // hiПолучитьРодителяНаСервере(Объект.УсловияПредоставления[0])()

&НаКлиенте
Процедура УправляемаяПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеСкидкиНаценкиПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СегментСкидкиПоле2ПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СегментСкидкиПоле1ПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура УсловияАкцийПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЦеновыеГруппыПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДиапазонПроцентовПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

#КонецОбласти 

#Область ГруппаНастройкаУсловия
&НаКлиенте
Процедура СоздатьУсловия(Команда)
	ОчиститьРеквизитыФормы("СоздатьУсловие");
	Элементы.ГруппаНастройкаСкидки.Видимость = Ложь;
	Элементы.ГруппаНастройкаУсловий.Видимость = Истина;
	Элементы.ЗаРазовыйОбъемПродаж.Видимость = Ложь;
	Элементы.ЗаНакопленныйОбъемПродаж.Видимость = Ложь;
	Элементы.ЗаГрафикОплаты.Видимость = Ложь;
	Элементы.ЗаВремяДействия.Видимость = Ложь;
	Элементы.ЗаФормуОплаты.Видимость = Ложь;
	Элементы.ОграничениеПоГруппеПользователей.Видимость = Ложь;
	Элементы.ЗаКомплектПокупки.Видимость = Ложь;
	Элементы.ВДеньРождения.Видимость = Ложь;
	Элементы.ПорядковыйНомерПродажиКратен.Видимость = Ложь;
	Элементы.ПоТипуПолучателя.Видимость = Ложь;
	// + HVOYA 10.02.2017 19:46:33, Латышев А.А.
	ЗаполнитьСтекСтраниц(НомерТекущейСтраници, Элементы.ГруппаНастройкаУсловий);
	// - HVOYA 10.02.2017 19:46:33, Латышев А.А. 
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПредоставленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПредоставленияПриИзменении(Элемент)
	Элементы.ЗаРазовыйОбъемПродаж.Видимость             = (УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж"));
	Элементы.ЗаНакопленныйОбъемПродаж.Видимость         = (УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж"));
	Элементы.ЗаВремяДействия.Видимость                  = (УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи"));
	Элементы.ЗаГрафикОплаты.Видимость                   = (УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаГрафикОплаты"));
	//Элементы.ЗаПервуюПродажуПартнеру.Видимость          = (УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаПервуюПродажуПартнеру"));
	//Элементы.ЗаПробнуюПродажу.Видимость                 = (УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаПробнуюПродажу"));
	Элементы.ЗаФормуОплаты.Видимость                    = (УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаФормуОплаты"));
	Элементы.ОграничениеПоГруппеПользователей.Видимость = (УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ОграничениеПоГруппеПользователей"));
	Элементы.ЗаКомплектПокупки.Видимость                = (УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки"));
	Элементы.ВДеньРождения.Видимость                    = (УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ВДеньРождения"));
	Элементы.ПорядковыйНомерПродажиКратен.Видимость     = (УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ПорядковыйНомерПродажиКратен"));
	Элементы.ПоТипуПолучателя.Видимость                 = (УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ПоТипуПолучателя"));
	
	Если    УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаФормуОплаты")
		ИЛИ УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаГрафикОплаты")
		ИЛИ УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаПробнуюПродажу")
		ИЛИ УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи") Тогда
		
		ОбластьОграничения = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе");
		Элементы.ОбластьОграничения.Доступность = Ложь;
	Иначе 
		Элементы.ОбластьОграничения.Доступность = Истина;
	КонецЕсли;
	
	Если УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж") 
		И Элементы.ВариантНакопления.СписокВыбора.Количество() = 1 Тогда
	
		Если НЕ ЗначениеЗаполнено(ВариантНакопления) 
			ИЛИ Элементы.ВариантНакопления.СписокВыбора.НайтиПоЗначению(ВариантНакопления) = Неопределено Тогда
			ВариантНакопления = Элементы.ВариантНакопления.СписокВыбора[0].Значение
		КонецЕсли;
	
	КонецЕсли;
	
	Если УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж") Тогда
		КритерийОграниченияПримененияЗаОбъемПродаж = ПредопределенноеЗначение("Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма");
		ОбластьОграничения = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе");
		ТипСравнения = ПредопределенноеЗначение("Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее");
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж") Тогда
		КритерийОграниченияПримененияЗаОбъемПродаж = ПредопределенноеЗначение("Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма");
		ВариантНакопления = ПредопределенноеЗначение("Перечисление.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоДисконтнойКарте");
		ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантОпределенияПериодаНакопительнойСкидки.ВесьПериод");
		ТипСравнения = ПредопределенноеЗначение("Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее");
	КонецЕсли;
	
	ОбновитьАвтонаименованиеУсл(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КритерийОграниченияПримененияЗаОбъемПродажПриИзменении(Элемент)
	Если КритерийОграниченияПримененияЗаОбъемПродаж = ПредопределенноеЗначение("Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество") Тогда

		Элементы.ВалютаОграниченияЗаНакопленныйОбъемПродаж.Видимость = Ложь;
		Если ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантОпределенияПериодаНакопительнойСкидки.ПредыдущаяПокупка") Тогда
			ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантОпределенияПериодаНакопительнойСкидки.ПустаяСсылка");
			ТекстСообщения = НСтр("ru='Вариант периода ""От предыдущей покупки"" рассчитывается только от суммы'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Объект,
			"Объект.ВариантОпределенияПериодаНакопительнойСкидки",
			,
			Ложь);
		КонецЕсли;
	Иначе
		Элементы.ВалютаОграниченияЗаНакопленныйОбъемПродаж.Видимость = ложь;
	КонецЕсли;
	
	ОбновитьАвтонаименованиеУсл(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВариантОпределенияПериодаНакопительнойСкидкиПриИзменении(Элемент)
	Если ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантОпределенияПериодаНакопительнойСкидки.ВесьПериод")
		ИЛИ ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантОпределенияПериодаНакопительнойСкидки.ПредыдущаяПокупка") Тогда
		Элементы.ПериодНакопления.Видимость = Ложь;
		Элементы.ДекорацияКратный.Видимость = Ложь;
		Если ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантОпределенияПериодаНакопительнойСкидки.ПредыдущаяПокупка") Тогда
			Если КритерийОграниченияПримененияЗаОбъемПродаж = ПредопределенноеЗначение("Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество") Тогда
				КритерийОграниченияПримененияЗаОбъемПродаж = ПредопределенноеЗначение("Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма");
				ТекстСообщения = НСтр("ru='Вариант периода ""От предыдущей покупки"" рассчитывается только от суммы'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Объект,
				"Объект.КритерийОграниченияПримененияЗаОбъемПродаж",
				,
				Ложь);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Элементы.ПериодНакопления.Видимость = Истина;
		Элементы.ДекорацияКратный.Видимость = Истина;
	КонецЕсли;
	ОбновитьАвтонаименованиеУсл(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомплектПокупкиНоменклатураПриИзменении(Элемент)
		
	ТекущаяСтрока = Элементы.КомплектПокупки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(КомплектПокупки, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
КонецПроцедуры

&НаКлиенте
Процедура КомплектПокупкиХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЦенообразованиеКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.КомплектПокупки.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура КомплектПокупкиУпаковкаПриИзменении(Элемент)
	ПриИзмененииУпаковки(Элементы.КомплектПокупки.ТекущиеДанные)
КонецПроцедуры

&НаКлиенте
Процедура КомплектПокупкиУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЦенообразованиеКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.КомплектПокупки.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииУпаковки(ТекДанные)

	Если ЗначениеЗаполнено(ТекДанные.Упаковка)  Тогда
	
		Коэффициент = КоэффициентУпаковки(ТекДанные.Упаковка);
		
	Иначе
		
		Коэффициент = 1;
	
	КонецЕсли;
	
	ТекДанные.Количество = Коэффициент * ТекДанные.КоличествоУпаковок;

КонецПроцедуры

&НаСервере
Функция КоэффициентУпаковки(Упаковка)
	Возврат Упаковка.Коэффициент
КонецФункции

&НаКлиенте
Процедура КомплектПокупкиКоличествоУпаковокПриИзменении(Элемент)
	ПриИзмененииУпаковки(Элементы.КомплектПокупки.ТекущиеДанные)
КонецПроцедуры

&НаКлиенте
Процедура ТипПолучателяСкидкиПриИзменении(Элемент)
	Если НЕ ПредыдущееЗначениеТипаПолучателейСкидок = ТипПолучателяСкидки
		И Получатели.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Изменен тип получателя скидок. Очистить таблицу ""Получателей""?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ТипПолучателяСкидкиПриИзмененииЗавершение", ЭтотОбъект),ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		//Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		//	ТипПолучателяСкидки = ПредыдущееЗначениеТипаПолучателейСкидок;
		//	Возврат;
		//КонецЕсли;
		//Получатели.Очистить();
	КонецЕсли;
//	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТипПолучателяСкидкиПриИзмененииЗавершение(РезультатВопроса, ПараметрыЗаписи) Экспорт
        
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
 		ТипПолучателяСкидки = ПредыдущееЗначениеТипаПолучателейСкидок;
	Иначе
		Получатели.Очистить();
    КонецЕсли;
 	ОбновитьАвтонаименование(Истина);
       
КонецПроцедуры


&НаКлиенте
Процедура ТипПолучателяСкидкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПредыдущееЗначениеТипаПолучателейСкидок = ТипПолучателяСкидки;
КонецПроцедуры

&НаКлиенте
Процедура ТипПолучателяСкидкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ПредыдущееЗначениеТипаПолучателейСкидок = ТипПолучателяСкидки;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораТипаПолучателей()
	СкидкиНаценкиСерверПереопределяемый.ПолучитьСписокЗначенийПолучателейСкидок(Элементы.ТипПолучателяСкидки.СписокВыбора);
	
	Если Получатели.Количество() > 0 Тогда
		Получатель = Получатели[0].Получатель;
		ТипПолучателяСкидки = Получатель.Метаданные().Имя;
	Иначе
		ТипПолучателяСкидки = СкидкиНаценкиСерверПереопределяемый.ПолучитьТипЗначенияПолучателяСкидокПоУмолчанию();
	КонецЕсли;
	
	Для каждого ЭлементСписка Из Элементы.ТипПолучателяСкидки.СписокВыбора Цикл
		ЗначениеЭлемента = ЭлементСписка.Значение;
		ТипыПолучателейСкидок.Добавить(Справочники[ЗначениеЭлемента].ПустаяСсылка(),ЗначениеЭлемента);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока и Не Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		ЭлементСпискаВыбора = Элементы.ТипПолучателяСкидки.СписокВыбора.НайтиПоЗначению(ТипПолучателяСкидки);
		ИдентификаторЭлемента = ЭлементСпискаВыбора.ПолучитьИдентификатор();
		
		ПустоеЗначениеТипа = ТипыПолучателейСкидок.НайтиПоИдентификатору(ИдентификаторЭлемента).Значение;
		
		ТекущиеДанные.Получатель = ПустоеЗначениеТипа;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СоздатьУсловие(Команда)
	Если УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж") Тогда
		Для каждого Элемент Из Элементы.Группа5.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
				Продолжить;
			КонецЕсли; 
			Если Не ЗначениеЗаполнено(ЭтотОбъект[Элемент.Имя]) Тогда
				Если Не Элемент.Видимость Тогда
					Продолжить
				КонецЕсли; 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не заполнено обязательное поле " + Элемент.Имя;
				Сообщение.Поле = Элемент.Имя;
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
		КонецЦикла; 
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж") Тогда
		Для каждого Элемент Из Элементы.ЗаНакопленныйОбъемПродаж.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
				Продолжить;
			КонецЕсли; 
			Если Не ЗначениеЗаполнено(ЭтотОбъект[Элемент.Имя]) Тогда
				Если Не Элемент.Видимость Тогда
					Продолжить
				КонецЕсли; 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не заполнено обязательное поле " + Элемент.Имя;
				Сообщение.Поле = Элемент.Имя;
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
		КонецЦикла; 
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи") Тогда
		Для каждого Элемент Из Элементы.ЗаВремяДействия.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
				Продолжить;
			КонецЕсли; 
			Если Не ЗначениеЗаполнено(ЭтотОбъект[Элемент.Имя]) Тогда
				Если Не Элемент.Видимость Тогда
					Продолжить
				КонецЕсли; 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не заполнено обязательное поле " + Элемент.Имя;
				Сообщение.Поле = Элемент.Имя;
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
		КонецЦикла; 
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаГрафикОплаты") Тогда
		Для каждого Элемент Из Элементы.ЗаГрафикОплаты.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
				Продолжить;
			КонецЕсли; 
			Если Не ЗначениеЗаполнено(ЭтотОбъект[Элемент.Имя]) Тогда
				Если Не Элемент.Видимость Тогда
					Продолжить
				КонецЕсли; 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не заполнено обязательное поле " + Элемент.Имя;
				Сообщение.Поле = Элемент.Имя;
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
		КонецЦикла; 
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаПробнуюПродажу") Тогда
		Для каждого Элемент Из Элементы.ЗаПробнуюПродажу.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
				Продолжить;
			КонецЕсли; 
			Если Не ЗначениеЗаполнено(ЭтотОбъект[Элемент.Имя]) Тогда
				Если Не Элемент.Видимость Тогда
					Продолжить
				КонецЕсли; 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не заполнено обязательное поле " + Элемент.Имя;
				Сообщение.Поле = Элемент.Имя;
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
		КонецЦикла; 
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаФормуОплаты") Тогда
		Для каждого Элемент Из Элементы.ЗаФормуОплаты.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
				Продолжить;
			КонецЕсли; 
			Если Не ЗначениеЗаполнено(ЭтотОбъект[Элемент.Имя]) Тогда
				Если Не Элемент.Видимость Тогда
					Продолжить
				КонецЕсли; 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не заполнено обязательное поле " + Элемент.Имя;
				Сообщение.Поле = Элемент.Имя;
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
		КонецЦикла; 
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ОграничениеПоГруппеПользователей") Тогда
		Для каждого Элемент Из Элементы.ОграничениеПоГруппеПользователей.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
				Продолжить;
			КонецЕсли; 
			Если Не ЗначениеЗаполнено(ЭтотОбъект[Элемент.Имя]) Тогда
				Если Не Элемент.Видимость Тогда
					Продолжить
				КонецЕсли; 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не заполнено обязательное поле " + Элемент.Имя;
				Сообщение.Поле = Элемент.Имя;
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
		КонецЦикла; 
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки") Тогда
		Для каждого Элемент Из Элементы.ЗаКомплектПокупки.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
				Продолжить;
			КонецЕсли; 
			Если Не ЗначениеЗаполнено(ЭтотОбъект[Элемент.Имя]) Тогда
				Если Не Элемент.Видимость Тогда
					Продолжить
				КонецЕсли; 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не заполнено обязательное поле " + Элемент.Имя;
				Сообщение.Поле = Элемент.Имя;
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
		КонецЦикла; 
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ВДеньРождения") Тогда
		Для каждого Элемент Из Элементы.ВДеньРождения.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
				Продолжить;
			КонецЕсли; 
			Если Не ЗначениеЗаполнено(ЭтотОбъект[Элемент.Имя]) Тогда
				Если Не Элемент.Видимость Тогда
					Продолжить
				КонецЕсли; 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не заполнено обязательное поле " + Элемент.Имя;
				Сообщение.Поле = Элемент.Имя;
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
		КонецЦикла; 
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ПорядковыйНомерПродажиКратен") Тогда
		Для каждого Элемент Из Элементы.ПорядковыйНомерПродажиКратен.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
				Продолжить;
			КонецЕсли; 
			Если Не ЗначениеЗаполнено(ЭтотОбъект[Элемент.Имя]) Тогда
				Если Не Элемент.Видимость Тогда
					Продолжить
				КонецЕсли; 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не заполнено обязательное поле " + Элемент.Имя;
				Сообщение.Поле = Элемент.Имя;
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
		КонецЦикла; 
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ПоТипуПолучателя") Тогда
		Для каждого Элемент Из Элементы.ПоТипуПолучателя.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
				Продолжить;
			КонецЕсли; 
			Если Не ЗначениеЗаполнено(ЭтотОбъект[Элемент.Имя]) Тогда
				Если Не Элемент.Видимость Тогда
					Продолжить
				КонецЕсли; 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не заполнено обязательное поле " + Элемент.Имя;
				Сообщение.Поле = Элемент.Имя;
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли; 
	Если УсловиеСсылка = Неопределено Тогда
		Условие = СоздатьУсловиеНаСервере();
	Иначе
		Условие = СоздатьУсловиеНаСервере(УсловиеСсылка);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Условие) Тогда
		Отбор = Новый Структура("УсловиеПредоставления", Условие); 
		МассивСтрок = УсловияАкций.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() = 0 Тогда
			НоваяСтрока = УсловияАкций.Добавить();
			НоваяСтрока.УсловиеПредоставления = Условие;
		КонецЕсли; 
	иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Щось коiлось!!!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли; 
	
	Элементы.ГруппаНастройкаСкидки.Видимость = Истина;
	Элементы.ГруппаНастройкаУсловий.Видимость = Ложь;
	
	// + HVOYA 10.02.2017 19:46:33, Латышев А.А.
	ЗаполнитьСтекСтраниц(НомерТекущейСтраници, Элементы.ГруппаНастройкаСкидки);
	// - HVOYA 10.02.2017 19:46:33, Латышев А.А. 
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаСервере
Функция СоздатьУсловиеНаСервере(Условие = Неопределено)
	Если Условие = Неопределено Тогда
		Условие = Справочники.УсловияПредоставленияСкидокНаценок.СоздатьЭлемент();
	Иначе
		Условие = Условие.ПолучитьОбъект();
	КонецЕсли; 
	Условие.Наименование = НаименованиеУсловия;
	Условие.Родитель = РодительУсловия;
	Условие.УсловиеПредоставления = УсловиеПредоставления;
	Условие.ВремяДействия.Очистить();
	Условие.КомплектПокупки.Очистить();
	Условие.Получатели.Очистить();
	Если УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж") Тогда
		Условие.КритерийОграниченияПримененияЗаОбъемПродаж = КритерийОграниченияПримененияЗаОбъемПродаж;
		Условие.ОбластьОграничения = ОбластьОграничения;
		Условие.ТипСравнения = ТипСравнения;
		Условие.ЗначениеУсловияОграничения = ЗначениеУсловияОграничения;
		Условие.СегментНоменклатурыОграничения = СегментУсловияПоле;
		Условие.Записать();
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж") Тогда
		Условие.КритерийОграниченияПримененияЗаОбъемПродаж = КритерийОграниченияПримененияЗаОбъемПродаж;
		Условие.ВариантНакопления = ВариантНакопления;
		Условие.ВариантОпределенияПериодаНакопительнойСкидки = ВариантОпределенияПериодаНакопительнойСкидки;
		Условие.ПериодНакопления = ПериодНакопления;
		Условие.ТипСравнения = ТипСравнения;
		Условие.ЗначениеУсловияОграничения = ЗначениеУсловияОграничения;
		Условие.СегментНоменклатурыОграничения = СегментУсловияПоле;
		Условие.Записать();
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи") Тогда
		Для каждого Строка Из ВремяДействия Цикл
			НоваяСтрока = Условие.ВремяДействия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		Условие.Записать();
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаГрафикОплаты") Тогда
		Условие.ГрафикОплаты = ГрафикОплаты;
		Условие.Записать();
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаФормуОплаты") Тогда
		Условие.ФормаОплаты = ФормаОплаты;
		Условие.Записать();
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ОграничениеПоГруппеПользователей") Тогда
		Условие.ГруппаПользователей = ГруппаПользователей;
		Условие.Записать();
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки") Тогда
		Для каждого Строка Из КомплектПокупки Цикл
			НоваяСтрока = Условие.КомплектПокупки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		Условие.Записать();
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ВДеньРождения") Тогда
		Условие.ДнейДоДняРождения = ДнейДоДняРождения;
		Условие.ДнейПослеДняРождения = ДнейПослеДняРождения;
		Условие.Записать();
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ПорядковыйНомерПродажиКратен") Тогда
		Условие.ПорядковыйНомерПродажиКратен = ПорядковыйНомерПродажиКратен;
		Условие.Записать();
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ПоТипуПолучателя") Тогда
		Для каждого Строка Из Получатели Цикл
			НоваяСтрока = Условие.Получатели.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		Условие.Записать();
	КонецЕсли;
	Ссылка = Условие.Ссылка;
	Условие = Неопределено;
	Возврат Ссылка;
КонецФункции // СоздатьУсловиеНаСервере()()

&НаКлиенте
Процедура ДобавитьСегментУсловия(Команда)
	Элементы.ГруппаНастройкаУсловий.Видимость = Ложь;
	Элементы.ГруппаНастройкаСегмента.Видимость = Истина;
	Элементы.СегментУсловия.Видимость = Истина;
	Элементы.СегментСкидки.Видимость = Ложь;
	Элементы.СегментИсключение.Видимость = Истина;
	Элементы.Сегменты.Видимость = Истина;
	Элементы.Сегменты1.Видимость = Истина;
	Элементы.Перенести.Видимость = Истина;
	Элементы.ГруппаЗагрузкиИЗЭксель.Видимость = Ложь;
	Элементы.ГруппаКопироватьИЗЭксель.Видимость = Ложь;
	Элементы.ГруппаСозданияСегментаВручную.Видимость = Ложь;
	ПредыдущаяСраница = ЭтотОбъект.ТекущийЭлемент.Имя;
	// + HVOYA 10.02.2017 19:46:33, Латышев А.А.
	ЗаполнитьСтекСтраниц(НомерТекущейСтраници, Элементы.СегментУсловия);
	// - HVOYA 10.02.2017 19:46:33, Латышев А.А. 
КонецПроцедуры
 
&НаКлиенте
Процедура ОбновитьАвтонаименованиеУсл(Обновить = Истина)
	
	Если Не ЗначениеЗаполнено(НаименованиеУсловия) ИЛИ (Обновить И Не НаименованиеУсловияИзмененоПользователем) Тогда
		НаименованиеУсловия = СформироватьАвтоНаименованиеНаКлиентеУсловия();
		ИспользуетсяАвтоНаименованиеУсловия = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьАвтоНаименованиеНаКлиентеУсловия()
	
	Если УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи") Тогда
		СтрокаНаименования = НСтр("ru = 'Время продажи:'");
		ПервыйДень = Истина;
		Для Каждого СтрокаТаблицы Из ВремяДействия Цикл
			СтрокаНаименования = СтрокаНаименования + 
			                     ?(ПервыйДень," ", ", ")+ СтрокаТаблицы.ДеньНедели + 
			                     НСтр("ru = ' (с "+Формат(СтрокаТаблицы.ВремяНачала,"ДФ=ЧЧ:мм; ДП=00:00") + 
			                     " до "+Формат(СтрокаТаблицы.ВремяОкончания,"ДФ=ЧЧ:мм; ДП=00:00")+")'");
			ПервыйДень = Ложь;
		КонецЦикла;
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаФормуОплаты") Тогда
		СтрокаНаименования = НСтр("ru = 'Форма оплаты:'")+ " " + ФормаОплаты;
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаГрафикОплаты") Тогда
		СтрокаНаименования = НСтр("ru = 'График оплаты:'") + " " + ГрафикОплаты;
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаПервуюПродажуПартнеру") Тогда
		СтрокаНаименования = НСтр("ru = 'Первая продажа партнеру'");
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ОграничениеПоГруппеПользователей") Тогда
		СтрокаНаименования = НСтр("ru = 'Группа пользователей:'")+ " " + ГруппаПользователей;
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаПробнуюПродажу") Тогда
		СтрокаНаименования = НСтр("ru = 'Первая продажа номенклатуры сегмента'")+ " " + СегментУсловияПоле;
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж") Тогда
		СтрокаНаименования = ""+КритерийОграниченияПримененияЗаОбъемПродаж + " " + 
		?(ОбластьОграничения = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе"),НСтр("ru = 'в документе'"),НСтр("ru = 'в строке'")) + " "+ТипСравнения + " "+ЗначениеУсловияОграничения + 
		?(КритерийОграниченияПримененияЗаОбъемПродаж = ПредопределенноеЗначение("Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество"), НСтр("ru = ' ед.'"), "грн") + 
		?(ЗначениеЗаполнено(СегментУсловияПоле)," " +НСтр("ru = 'по номенклатуре сегмента'")+ " " + СегментУсловияПоле, "");
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж") Тогда
		
		Если ВариантНакопления = ПредопределенноеЗначение("Перечисление.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоПартнеру") Тогда
			ВариантНакопленияСтрокой = НСтр("ru = 'по партнеру'");
		ИначеЕсли ВариантНакопления = ПредопределенноеЗначение("Перечисление.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоДисконтнойКарте") Тогда
			ВариантНакопленияСтрокой = НСтр("ru = 'по дисконтной карте'");
		Иначе
			ВариантНакопленияСтрокой = НСтр("ru = 'по торговому соглашению'");
		КонецЕсли;
		
		СтрокаНаименования = НСтр("ru = '%1 проданного товара %2'");
		СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаНаименования,
																						КритерийОграниченияПримененияЗаОбъемПродаж,
																						ВариантНакопленияСтрокой);
		
		Если ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантОпределенияПериодаНакопительнойСкидки.ВесьПериод") Тогда
			СтрокаНаименования = СтрокаНаименования + " " +НСтр("ru = 'за весь период'");
		ИначеЕсли ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантОпределенияПериодаНакопительнойСкидки.ПредыдущаяПокупка") Тогда
			СтрокаНаименования = СтрокаНаименования + " " +НСтр("ru = 'в предыдущей покупке'");
		ИначеЕсли ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантОпределенияПериодаНакопительнойСкидки.ПрошлыйПериод") Тогда
			
			Если ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый год'");
			ИначеЕсли ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлую декаду'");
			ИначеЕсли ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый день'");
			ИначеЕсли ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый квартал'");
			ИначеЕсли ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый месяц'");
			ИначеЕсли ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлую неделю'");
			ИначеЕсли ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлое полугодие'");
			КонецЕсли;
			
		ИначеЕсли ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантОпределенияПериодаНакопительнойСкидки.СНачалаТекущегоПериода") Тогда
			Если ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего года'");
			ИначеЕсли ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущей декады'");
			ИначеЕсли ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего дня'");
			ИначеЕсли ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего квартала'");
			ИначеЕсли ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего месяца'");
			ИначеЕсли ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущей недели'");
			ИначеЕсли ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего полугодия'");
			КонецЕсли;
		ИначеЕсли ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантОпределенияПериодаНакопительнойСкидки.ПрошлыйСкользящийПериод") Тогда
			
			Если ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 365 дней'");
			ИначеЕсли ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 180 дней'");
			ИначеЕсли ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 90 дней'");
			ИначеЕсли ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 30 дней'");
			ИначеЕсли ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 10 дней'");
			ИначеЕсли ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 7 дней'");
			ИначеЕсли ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущий день'");
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаНаименования = СтрокаНаименования + " " + ТипСравнения + " " + ЗначениеУсловияОграничения + // не менее (не более) 5 (5 Грн)
		?(КритерийОграниченияПримененияЗаОбъемПродаж = ПредопределенноеЗначение("Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество")," " + НСтр("ru = 'ед.'"), " грн") + 
		?(ЗначениеЗаполнено(СегментУсловияПоле)," " + НСтр("ru = 'по номенклатуре сегмента'") + " " + СегментУсловияПоле, ""); // по номенклатуре сегмента Продукты
		
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки") Тогда
		СтрокаНаименования = НСтр("ru = 'Комплект покупки:'");
		СтрокаНаименования = СтрокаНаименования + " " + ОписаниеТабличнойЧастиКлиент("КомплектПокупки", "Номенклатура");
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ВДеньРождения") Тогда
		СтрокаНаименования = НСтр("ru = 'День рождения'");
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ПорядковыйНомерПродажиКратен") Тогда
		СтрокаНаименования = НСтр("ru = 'Порядковый номер продажи кратен:'") +" "+ ПорядковыйНомерПродажиКратен;
	ИначеЕсли УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ПоТипуПолучателя") Тогда
		
		СтрокаНаименования = НСтр("ru = 'По типу получателя скидки:'");
		
		ЭлементСпискаВыбора = Элементы.ТипПолучателяСкидки.СписокВыбора.НайтиПоЗначению(ТипПолучателяСкидки);
		Если НЕ ЭлементСпискаВыбора = Неопределено Тогда
			
			СтрокаНаименования = ЭлементСпискаВыбора.Представление + ": ";
			
		КонецЕсли;
		
		СтрокаНаименования = СтрокаНаименования + ОписаниеТабличнойЧастиКлиент("Получатели", "Получатель", 2);
		
	КонецЕсли;
	
	//Элементы.НаименованиеУсловия.СписокВыбора.Добавить(СтрокаНаименования);
	
	Возврат СтрокаНаименования;

КонецФункции

&НаКлиенте
Процедура ОбластьОграниченияПриИзменении(Элемент)
	ОбновитьАвтонаименованиеУсл(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТипСравненияПриИзменении(Элемент)
	ОбновитьАвтонаименованиеУсл(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеУсловияОграниченияПриИзменении(Элемент)
	ОбновитьАвтонаименованиеУсл(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СегментУсловияПоле1ПриИзменении(Элемент)
	ОбновитьАвтонаименованиеУсл(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВариантНакопленияПриИзменении(Элемент)
	ОбновитьАвтонаименованиеУсл(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПериодНакопленияПриИзменении(Элемент)
	ОбновитьАвтонаименованиеУсл(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТипСравненияЗаНакопленныйОбъемПродажПриИзменении(Элемент)
	ОбновитьАвтонаименованиеУсл(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеУсловияПредоставленияЗаНакопленныйОбъемПродажПриИзменении(Элемент)
	ОбновитьАвтонаименованиеУсл(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВалютаОграниченияЗаНакопленныйОбъемПродажПриИзменении(Элемент)
	ОбновитьАвтонаименованиеУсл(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СегментУсловияПоле2ПриИзменении(Элемент)
	ОбновитьАвтонаименованиеУсл(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ГрафикОплатыПриИзменении(Элемент)
	ОбновитьАвтонаименованиеУсл(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВремяДействияПриИзменении(Элемент)
	ОбновитьАвтонаименованиеУсл(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	ОбновитьАвтонаименованиеУсл(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПользователейПриИзменении(Элемент)
	ОбновитьАвтонаименованиеУсл(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомплектПокупкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	НаименованиеУсловия = СформироватьАвтоНаименованиеНаКлиентеУсловия();
КонецПроцедуры

&НаКлиенте
Процедура КомплектПокупкиПослеУдаления(Элемент)
	НаименованиеУсловия = СформироватьАвтоНаименованиеНаКлиентеУсловия();
КонецПроцедуры

&НаКлиенте
Процедура КратностьНомераЧека1ПриИзменении(Элемент)
	ОбновитьАвтонаименованиеУсл(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	НаименованиеУсловия = СформироватьАвтоНаименованиеНаКлиентеУсловия();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеУсловияПриИзменении(Элемент)
	НаименованиеУсловияИзмененоПользователем = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПослеУдаления(Элемент)
	НаименованиеУсловия = СформироватьАвтоНаименованиеНаКлиентеУсловия();
КонецПроцедуры

&НаКлиенте
Функция ОписаниеТабличнойЧастиКлиент(ИмяТаблицы, ИмяРеквизита, КоличествоЭлементов = 0)

	ОписаниеТаблицы = "";
	
	НомерЭлемента = 0;
	Для каждого ЭлементТаблицы Из Получатели Цикл
		
		НомерЭлемента = НомерЭлемента + 1;
		Если Не КоличествоЭлементов = 0 И (КоличествоЭлементов + 1) = НомерЭлемента Тогда
			ОписаниеТаблицы = ОписаниеТаблицы + "... ,";
		ИначеЕсли Не КоличествоЭлементов = 0 И (КоличествоЭлементов + 1) < НомерЭлемента Тогда
			Прервать;
		Иначе
			ОписаниеТаблицы = ОписаниеТаблицы + Строка(ЭлементТаблицы[ИмяРеквизита]) + " ,";
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ОписаниеТаблицы = "" Тогда
	
		ОписаниеТаблицы = Лев(ОписаниеТаблицы, СтрДлина(ОписаниеТаблицы) - 2);
	
	КонецЕсли;
	
	Возврат ОписаниеТаблицы;

КонецФункции
 
#КонецОбласти 

&НаКлиенте
Процедура ДобавитьСкидку(Команда)
	ОбновитьОтображение(Команда);
	ОчиститьРеквизитыФормы("СоздатьСкидку");	
	//НазваниеСкидки = НазваниеАкции;
	СтатусДействия = ПредопределенноеЗначение("Перечисление.СтатусыДействияСкидок.Действует");
	ОбластьПредоставления = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе");
	// + HVOYA 10.02.2017 19:46:33, Латышев А.А.
	ЗаполнитьСтекСтраниц(НомерТекущейСтраници, Элементы.ГруппаНастройкаСкидки);
	// - HVOYA 10.02.2017 19:46:33, Латышев А.А. 
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюСкидку(Команда)
	ОбновитьОтображение(Команда);
	ОчиститьРеквизитыФормы("СозданиеАкции");
	СтекОткрытыхОкон = Новый Соответствие;
	НомерТекущейСтраници = 0;
	ЗаполнитьСтекСтраниц(НомерТекущейСтраници, Элементы.ГруппаСоздатьСкидку);
КонецПроцедуры

&НаКлиенте
Процедура СрздатьМаркетинговуюАкцию(Команда)
	Если АкцияСсылка = Неопределено Тогда
		Акция = СоздатьАкциюНаСервере();
	Иначе
		Акция = СоздатьАкциюНаСервере(АкцияСсылка);
	КонецЕсли; 
	Если ЗначениеЗаполнено(Акция) Тогда
		Элементы.Настройки.Видимость = Ложь;
		Элементы.ВсеСкидки.Видимость = Истина;
		ЗаполнитьВсеСкидки2();
	иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Щось коiлось!!!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	АкцияСсылка = Неопределено;
КонецПроцедуры

&НаСервере
Функция СоздатьАкциюНаСервере(Акция = Неопределено)
	Если Акция = Неопределено Тогда
		Акция = Документы.МаркетинговаяАкция.СоздатьДокумент();
	Иначе
		Акция = Акция.ПолучитьОбъект();
		Акция.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	Акция.Дата = ТекущаяДата();
	Акция.ДатаНачалаДействия = ДатаНачалаДействия;
	Акция.ДатаОкончанияДействия = ДатаОкончанияДействия;
	Акция.ДляВсехМагазинов = ДляВсехМагазинов;
	Акция.ДляВсехМагазиновОдноРасписаниеСкидок = ДляВсехМагазиновОдноРасписаниеСкидок;
	Акция.НаименованиеАкции = НазваниеАкции;
	Акция.Описание = Описание;
	Акция.Комментарий = Коментарий;
	Акция.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Акция.Магазины.Очистить();
	Для каждого Строка Из Магазины Цикл
		НоваяСтрока = Акция.Магазины.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	Акция.СкидкиНаценки.Очистить();
	Для каждого Строка Из СкидкиНаценки Цикл
		НоваяСтрока = Акция.СкидкиНаценки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	Попытка
		Акция.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Возврат Документы.МаркетинговаяАкция.ПустаяСсылка(); 
	КонецПопытки; 
	Ссылка = Акция.Ссылка;
	Акция = Неопределено;
	Возврат Ссылка;
КонецФункции // СоздатьАкциюНаСервере()
 

&НаКлиенте
Процедура Перенести(Команда)
	Если ПредыдущаяСраница = "ДобавитьСегментСкидки" Тогда
		Элементы.ГруппаНастройкаСегмента.Видимость = Ложь;
		Элементы.ГруппаНастройкаСкидки.Видимость = Истина;
		// + HVOYA 10.02.2017 19:46:33, Латышев А.А.
		ЗаполнитьСтекСтраниц(НомерТекущейСтраници, Элементы.ГруппаНастройкаСкидки);
		// - HVOYA 10.02.2017 19:46:33, Латышев А.А. 
		ОбновитьАвтонаименование(Истина);
	Иначе
		Элементы.ГруппаНастройкаСегмента.Видимость = Ложь;
		Элементы.ГруппаНастройкаУсловий.Видимость = Истина;
		// + HVOYA 10.02.2017 19:46:33, Латышев А.А.
		ЗаполнитьСтекСтраниц(НомерТекущейСтраници, Элементы.ГруппаНастройкаУсловий);
		// - HVOYA 10.02.2017 19:46:33, Латышев А.А. 
		ОбновитьАвтонаименованиеУсл(Истина);
	КонецЕсли; 
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.СкидкиНаценки.Доступность = Ложь;
	СегментССылка = ПредопределенноеЗначение("Справочник.СегментыНоменклатуры.ПустаяСсылка");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсеСкидки2()

	ЗаполнитьВсеСкидки(Объект.ТЧВсеСкидки);

КонецПроцедуры // ЗаполнитьВсеСкидки2()

&НаСервере
Процедура ЗаполнитьМагазинамиНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Магазины.Ссылка как Магазин
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|ГДЕ
		|	НЕ Магазины.ПометкаУдаления
		|	И НЕ Магазины.СкладУправляющейСистемы";
	
	Результат = Запрос.Выполнить();
	
	Магазины.Загрузить(Результат.Выгрузить());
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьМагазинами(Команда)
	ЗаполнитьМагазинамиНаСервере();
	Элементы.Магазины.ТекущаяСтрока = Магазины[0].ПолучитьИдентификатор();
	УстановитьДоступностьТаблицыСкидкиНаценки();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтекСтраниц(НомерТекущейСтраници, Страница)
	НомерТекущейСтраници = НомерТекущейСтраници + 1;
	СтекОткрытыхОкон.Вставить(НомерТекущейСтраници, Страница);
КонецПроцедуры // ()

&НаКлиенте
Процедура Вперед(Команда)
	ТекГруппа = СтекОткрытыхОкон.Получить(НомерТекущейСтраници);
	СледующаяГруппа = СтекОткрытыхОкон.Получить(НомерТекущейСтраници + 1);
	Если СледующаяГруппа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НомерТекущейСтраници = НомерТекущейСтраници + 1;
	Если СледующаяГруппа.Имя = "ГруппаЗагрузкиИЗЭксель" Тогда
		Элементы.ГруппаЗагрузкиИЗЭксель.Видимость = Истина;
		Элементы.Сегменты1.Видимость = Ложь;
		Если ГруппаКомандыЗгрузкиИзЭксель = "ЗагрузитьИЗФайлаЭксель" или ГруппаКомандыЗгрузкиИзЭксель = "ЗагрузитьИЗФайлаЭксель1" Тогда
			Элементы.СоздатьСгментИлиИсключить.Видимость = Ложь;
			СоздатьСгментИлиИсключить = Истина;
		Иначе
			Элементы.СоздатьСгментИлиИсключить.Видимость = Истина;
			СоздатьСгментИлиИсключить = Ложь;
		КонецЕсли;
		Элементы.Перенести.Видимость = Ложь;
	ИначеЕсли СледующаяГруппа.Имя = "ГруппаКопироватьИЗЭксель" Тогда
		Элементы.ГруппаКопироватьИЗЭксель.Видимость = Истина;
		Элементы.Сегменты1.Видимость = Ложь;
		Если ГруппаКомандыЗгрузкиИзЭксель = "КопироватьИзФайлаЭксель" или ГруппаКомандыЗгрузкиИзЭксель = "КопироватьИзФайлаЭксель1" Тогда
			Элементы.СоздатьСгментИлиИсключить1.Видимость = Ложь;
			СоздатьСгментИлиИсключить = Истина;
		Иначе
			Элементы.СоздатьСгментИлиИсключить1.Видимость = Истина;
			СоздатьСгментИлиИсключить = Ложь;
		КонецЕсли;
		Элементы.Перенести.Видимость = Ложь;
	ИначеЕсли СледующаяГруппа.Имя = "ГруппаСозданияСегментаВручную" Тогда
		Элементы.ГруппаСозданияСегментаВручную.Видимость = Истина;
		Элементы.Сегменты1.Видимость = Ложь;
		Если ГруппаКомандыЗгрузкиИзЭксель = "СоздатьСегментРуками" или ГруппаКомандыЗгрузкиИзЭксель = "СоздатьСегментРуками1" Тогда
			Элементы.СоздатьСгментИлиИсключить2.Видимость = Ложь;
			СоздатьСгментИлиИсключить = Истина;
		Иначе
			Элементы.СоздатьСгментИлиИсключить2.Видимость = Истина;
			СоздатьСгментИлиИсключить = Ложь;
		КонецЕсли;
		Элементы.Перенести.Видимость = Ложь;
	ИначеЕсли СледующаяГруппа.Имя = "ГруппаНастройкаСкидки" Тогда 
		ТекГруппа.Видимость = Ложь;
		СледующаяГруппа.Видимость = Истина;
	ИначеЕсли СледующаяГруппа.Имя = "СегментСкидки" Тогда 
		Элементы.ГруппаНастройкаСегмента.Видимость = Истина;
		Элементы.ГруппаНастройкаСкидки.Видимость = Ложь;
	ИначеЕсли СледующаяГруппа.Имя = "СегментУсловия" Тогда 
		Элементы.ГруппаНастройкаСегмента.Видимость = Истина;
		Элементы.ГруппаНастройкаУсловий.Видимость = Ложь;
	ИначеЕсли СледующаяГруппа.Имя = "ГруппаНастройкаУсловий" Тогда 
		ТекГруппа.Видимость = Ложь;
		СледующаяГруппа.Видимость = Истина;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	ТекГруппа = СтекОткрытыхОкон.Получить(НомерТекущейСтраници);
	ПередидущаяГруппа = СтекОткрытыхОкон.Получить(НомерТекущейСтраници - 1);
	Если ПередидущаяГруппа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НомерТекущейСтраници = НомерТекущейСтраници-1;
	Если ПередидущаяГруппа.Имя = "СегментСкидки" или ПередидущаяГруппа.Имя = "СегментУсловия" Тогда
		Элементы.ГруппаКопироватьИЗЭксель.Видимость = Ложь;
		Элементы.ГруппаЗагрузкиИЗЭксель.Видимость = Ложь;
		Элементы.ГруппаСозданияСегментаВручную.Видимость = Ложь;
		Элементы.Сегменты1.Видимость = Истина;
		Элементы.Перенести.Видимость = Истина;
	ИначеЕсли ПередидущаяГруппа.Имя = "ГруппаСоздатьСкидку" Тогда 
		ТекГруппа.Видимость = Ложь;
		ПередидущаяГруппа.Видимость = Истина;
	ИначеЕсли ПередидущаяГруппа.Имя = "ГруппаНастройкаСкидки" Тогда 
		Если ТекГруппа.Имя = "СегментСкидки" Тогда
			Элементы.ГруппаНастройкаСегмента.Видимость = Ложь;
			Элементы.ГруппаНастройкаСкидки.Видимость = Истина;
		Иначе
			ТекГруппа.Видимость = Ложь;
			ПередидущаяГруппа.Видимость = Истина;
		КонецЕсли; 
	ИначеЕсли ПередидущаяГруппа.Имя = "ГруппаЗагрузкиИЗЭксель" Тогда
		Элементы.ГруппаЗагрузкиИЗЭксель.Видимость = Истина;
		Элементы.Сегменты1.Видимость = Ложь;
		Если ГруппаКомандыЗгрузкиИзЭксель = "ЗагрузитьИЗФайлаЭксель" или ГруппаКомандыЗгрузкиИзЭксель = "ЗагрузитьИЗФайлаЭксель1" Тогда
			Элементы.СоздатьСгментИлиИсключить.Видимость = Ложь;
			СоздатьСгментИлиИсключить = Истина;
		Иначе
			Элементы.СоздатьСгментИлиИсключить.Видимость = Истина;
			СоздатьСгментИлиИсключить = Ложь;
		КонецЕсли;
		Элементы.Перенести.Видимость = Ложь;
	ИначеЕсли ПередидущаяГруппа.Имя = "ГруппаКопироватьИЗЭксель" Тогда
		Элементы.ГруппаКопироватьИЗЭксель.Видимость = Истина;
		Элементы.Сегменты1.Видимость = Ложь;
		Если ГруппаКомандыЗгрузкиИзЭксель = "КопироватьИзФайлаЭксель" или ГруппаКомандыЗгрузкиИзЭксель = "КопироватьИзФайлаЭксель1" Тогда
			Элементы.СоздатьСгментИлиИсключить1.Видимость = Ложь;
			СоздатьСгментИлиИсключить = Истина;
		Иначе
			Элементы.СоздатьСгментИлиИсключить1.Видимость = Истина;
			СоздатьСгментИлиИсключить = Ложь;
		КонецЕсли;
		Элементы.Перенести.Видимость = Ложь;
	ИначеЕсли ПередидущаяГруппа.Имя = "ГруппаСозданияСегментаВручную" Тогда
		Элементы.ГруппаСозданияСегментаВручную.Видимость = Истина;
		Элементы.Сегменты1.Видимость = Ложь;
		Если ГруппаКомандыЗгрузкиИзЭксель = "СоздатьСегментРуками" или ГруппаКомандыЗгрузкиИзЭксель = "СоздатьСегментРуками1" Тогда
			Элементы.СоздатьСгментИлиИсключить2.Видимость = Ложь;
			СоздатьСгментИлиИсключить = Истина;
		Иначе
			Элементы.СоздатьСгментИлиИсключить2.Видимость = Истина;
			СоздатьСгментИлиИсключить = Ложь;
		КонецЕсли;
		Элементы.Перенести.Видимость = Ложь;
	ИначеЕсли ПередидущаяГруппа.Имя = "ГруппаНастройкаУсловий" Тогда 
		Элементы.ГруппаНастройкаСегмента.Видимость = Ложь;
		Элементы.ГруппаНастройкаСкидки.Видимость = Ложь;
		Элементы.ГруппаНастройкаУсловий.Видимость = Истина;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыФормы(Дейсвие)
	
	Если Дейсвие = "СозданиеАкции" Тогда
		ДатаНачалаДействия = '00010101000000';
		ДатаОкончанияДействия = '00010101000000';
		ПараметрыПроведенияАкции = "ОдноДляВсех";
		Магазины.Очистить();
		СкидкиНаценки.Очистить();
		Описание = "";
		Коментарий = "";
		НазваниеАкции = "";
	ИначеЕсли Дейсвие = "СоздатьСкидку" Тогда
		Родитель = ПредопределенноеЗначение("Справочник.СкидкиНаценки.ПустаяСсылка");
		СтатусДействия = ПредопределенноеЗначение("Перечисление.СтатусыДействияСкидок.Действует");
		НазваниеСкидки = "";
		Управляемая = Ложь;
		ВыдатьСкидочныйКупон = Ложь;
		НоменклатураСкидочногоКупона = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		ВариантВыдачиКупона = ПредопределенноеЗначение("Перечисление.ВариантыВыдачиКупона.ПустаяСсылка");
		СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.ПустаяСсылка");
		ЗначениеСкидкиНаценки = 0;
		ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
		ПодарокИзКорзиныПокупателя = Ложь;
		КоличествоПодарковИзКорзиныПокупателя = 0;
		МоментВыдачиСообщения = ПредопределенноеЗначение("Перечисление.ТочкиВыдачиСообщенияКассиру.ПустаяСсылка");
		СегментСкидкиПоле = Ложь;
		ОбластьПредоставления = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ПустаяСсылка");
	ИначеЕсли Дейсвие = "СоздатьУсловие" Тогда
		РодительУсловие = ПредопределенноеЗначение("Справочник.УсловияПредоставленияСкидокНаценок.ПустаяСсылка");
		УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ПустаяСсылка");
		НаименованиеУсловия = "";
		КритерийОграниченияПримененияЗаОбъемПродаж = ПредопределенноеЗначение("Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.ПустаяСсылка");
		ОбластьОграничения = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ПустаяСсылка");
		ТипСравнения = ПредопределенноеЗначение("Перечисление.ТипыСравненияЗначенийСкидокНаценок.ПустаяСсылка");
		ЗначениеУсловияОграничения = 0;
		СегментУсловияПоле = ПредопределенноеЗначение("Справочник.СегментыНоменклатуры.ПустаяСсылка");
		ВариантНакопления = ПредопределенноеЗначение("Перечисление.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПустаяСсылка");
		ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантОпределенияПериодаНакопительнойСкидки.ПустаяСсылка");
		ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.ПустаяСсылка");
		ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПустаяСсылка");
		ГрафикОплаты = "";
		ВремяДействия.Очистить();
		ГруппаПользователей = ПредопределенноеЗначение("Справочник.ГруппыПользователей.ПустаяСсылка");
		КомплектПокупки.Очистить();
		ДнейДоДняРождения = 0;
		ДнейПослеДняРождения = 0;
		ПорядковыйНомерПродажиКратен = 0;
		ТипПолучателяСкидки = "";
		Получатели.Очистить();
	КонецЕсли; 
	
КонецПроцедуры // 


&НаКлиенте
Процедура РедактироватьАкцию(Команда)
	АкцияСсылка = Элементы.ТЧВсеСкидки.ТекущиеДанные.Акция;
	РедактироватьАкциюНаСервере(АкцияСсылка);
	ОбновитьОтображение(Команда);
	ПараметрыПроведенияАкцииПриИзменении("");
	// + HVOYA 10.02.2017 19:30:40, Латышев А.А.
	СтекОткрытыхОкон = Новый Соответствие;
	НомерТекущейСтраници = 0;
	ЗаполнитьСтекСтраниц(НомерТекущейСтраници, Элементы.ГруппаСоздатьСкидку);
	// - HVOYA 10.02.2017 19:30:40, Латышев А.А. 	
КонецПроцедуры
 
&НаСервере
Процедура РедактироватьАкциюНаСервере(Акция)
	НазваниеАкции = Акция.НаименованиеАкции;
	ДатаНачалаДействия = Акция.ДатаНачалаДействия;
	ДатаОкончанияДействия = Акция.ДатаОкончанияДействия;
	Магазины.Загрузить(Акция.Магазины.Выгрузить());
	СкидкиНаценки.Загрузить(Акция.СкидкиНаценки.Выгрузить());
	Описание = Акция.Описание;
	Коментарий = Акция.Комментарий;
	
	Если Акция.ДляВсехМагазинов И Акция.ДляВсехМагазиновОдноРасписаниеСкидок Тогда
		ПараметрыПроведенияАкции = "ОдноДляВсех";
	ИначеЕсли (НЕ Акция.ДляВсехМагазинов) И Акция.ДляВсехМагазиновОдноРасписаниеСкидок Тогда
		ПараметрыПроведенияАкции = "ОдноДляВыбранных";
	Иначе
		ПараметрыПроведенияАкции = "ИндивидуальноеРасписание";
	КонецЕсли;
КонецПроцедуры // РедактироватьАкциюНаСервере()

&НаКлиенте
Процедура ОтчетДействующиеМаркетинговыеАкции(Команда)
	Получитьформу("Отчет.ДействующиеМаркетинговыеАкции.Форма").Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоАкциямНоменклатуры(Команда)
	Получитьформу("Отчет.ОтчетПоАкциямНоменклатуры.Форма.ФормаОтчета").Открыть();
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСегмент(Команда)
	ОбновитьОтображение(Команда);
	Если СтекОткрытыхОкон = Неопределено или СтекОткрытыхОкон.Количество() = 0 Тогда
		Элементы.ВернутьсяКСозданиюАкции.Доступность = Ложь;
	Иначе
		Элементы.ВернутьсяКСозданиюАкции.Доступность = Истина;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗагрузкойИзЭксель(Команда)
	Элементы.Группа10.Видимость = Истина;
	Элементы.Группа11.Видимость = Ложь;
	ИмяЛиста = "Коды товаров-скидок";
	НачСтрока = 2;
	КолонкаСДанными = 1;
	ГруппаКомандыЗгрузкиИзЭксель = ЭтотОбъект.ТекущийЭлемент.Имя;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИЗФайлаЭксельРедактирование(Команда)
	Результат = РедактироватьСегментНаСервере(ФайлЭксель, НачСтрока+1, СокрЛП(ИмяЛиста), Команда.Имя, КолонкаСДанными);
	Если Результат = Ложь Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сегмент не изменён, не найдена соответствующая номенклатура!";
		Сообщение.Сообщить();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сегмент успешно отредактирован!";
		Сообщение.Сообщить();
	КонецЕсли;
	Элементы.Группа10.Видимость = Ложь;
КонецПроцедуры

&НаСервере
Функция РедактироватьСегментНаСервере(ФайлЭксель, НачСтрока, ИмяЛиста, ИмяКоманды, КолонкаСДанными)
	Перем КолвоСтрокExcel;
	Если ИмяКоманды = "ЗагрузитьИЗФайлаЭксельРедактирование" Тогда
		ТаблицаКодов = ЗагрузитьМетодом_MSADODB(ФайлЭксель, ИмяЛиста, ,НачСтрока,,КолвоСтрокExcel);
		Если ТаблицаКодов.Количество()=0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не один из методов подключения к файлу эксель не сработал попробуйте копирование из файла эксель";
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли; 
		МассивНоменклатуры = ТаблицаКодов.ВыгрузитьКолонку("К_" + КолонкаСДанными);
	ИначеЕсли ИмяКоманды = "КопироватьИЗФайлаЭксельРедактирование" Тогда
		ТаблицаКодов = обМакетВТаблицуЗначений(ТабличныйДокументЭксель);
		МассивНоменклатуры = ТаблицаКодов.ВыгрузитьКолонку("КодТовара");
	КонецЕсли; 
	
	Если НЕ МассивНоменклатуры = Неопределено Тогда
		
		Если МассивНоменклатуры.Количество()=0 Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ПометкаУдаления
		|	И Номенклатура.Код В(&Коды)";
		
		Запрос.УстановитьПараметр("Коды", МассивНоменклатуры);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		Выборка = Результат.Выбрать();
		
		НаборЗаписей = РегистрыСведений.НоменклатураСегмента.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сегмент.Установить(РедактируемыйСегмент);
		//НаборЗаписей.Прочитать();
		Пока Выборка.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.Сегмент = РедактируемыйСегмент;
			Запись.Номенклатура = Выборка.Ссылка;
		КонецЦикла;
		Если ДополнитьЗаменить = 0 Тогда
			НаборЗаписей.Записать(Ложь);
		Иначе
			НаборЗаписей.Записать();
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // РедактироватьСегмент(ФайлЭксель, НачСтрока+1, СокрЛП(ИмяЛиста), Команда.Имя, КолонкаСДанными)()

&НаКлиенте
Процедура РедактироватьКопированиемИзФайлаЭксель(Команда)
	// +HVOYA. 17.05.2017 16:35:20, Львова Е.А.
    ОчиститьТабПолеМакета();
    // -HVOYA. 17.05.2017 16:35:23, Львова Е.А.
    Элементы.Группа11.Видимость = Истина;
	Элементы.Группа10.Видимость = Ложь;
	ГруппаКомандыЗгрузкиИзЭксель = ЭтотОбъект.ТекущийЭлемент.Имя;
КонецПроцедуры

&НаКлиенте
Процедура КопироватьИЗФайлаЭксельРедактирование(Команда)
	Результат = РедактироватьСегментНаСервере(ФайлЭксель, НачСтрока+1, СокрЛП(ИмяЛиста), Команда.Имя, КолонкаСДанными);
	Если Результат = Ложь Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сегмент не изменён, не найдена соответствующая номенклатура!";
		Сообщение.Сообщить();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сегмент успешно отредактирован!";
		Сообщение.Сообщить();
	КонецЕсли;
	Элементы.Группа11.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКсозданиюАкции(Команда)
	ПередидущаяГруппа = СтекОткрытыхОкон.Получить(НомерТекущейСтраници);
	Если ПередидущаяГруппа.Имя = "СегментСкидки" или ПередидущаяГруппа.Имя = "СегментУсловия" Тогда
		Элементы.РедктированиеСегмента.Видимость = Ложь;
		Элементы.Сегменты1.Видимость = Истина;
		Элементы.Перенести.Видимость = Истина;
		Элементы.Настройки.Видимость = Истина;
	ИначеЕсли ПередидущаяГруппа.Имя = "ГруппаСоздатьСкидку" Тогда 
		Элементы.РедктированиеСегмента.Видимость = Ложь;
		ПередидущаяГруппа.Видимость = Истина;
		Элементы.Настройки.Видимость = Истина;
	ИначеЕсли ПередидущаяГруппа.Имя = "ГруппаНастройкаСкидки" Тогда 
		Элементы.РедктированиеСегмента.Видимость = Ложь;
		Элементы.ГруппаНастройкаСкидки.Видимость = Истина;
		Элементы.Настройки.Видимость = Истина;
	ИначеЕсли ПередидущаяГруппа.Имя = "ГруппаЗагрузкиИЗЭксель" Тогда
		Элементы.РедктированиеСегмента.Видимость = Ложь;
		Элементы.ГруппаЗагрузкиИЗЭксель.Видимость = Истина;
		Элементы.Сегменты1.Видимость = Ложь;
		Если ГруппаКомандыЗгрузкиИзЭксель = "ЗагрузитьИЗФайлаЭксель" или ГруппаКомандыЗгрузкиИзЭксель = "ЗагрузитьИЗФайлаЭксель1" Тогда
			Элементы.СоздатьСгментИлиИсключить.Видимость = Ложь;
			СоздатьСгментИлиИсключить = Истина;
		Иначе
			Элементы.СоздатьСгментИлиИсключить.Видимость = Истина;
			СоздатьСгментИлиИсключить = Ложь;
		КонецЕсли;
		Элементы.Перенести.Видимость = Ложь;
		Элементы.Настройки.Видимость = Истина;
	ИначеЕсли ПередидущаяГруппа.Имя = "ГруппаКопироватьИЗЭксель" Тогда
		Элементы.ГруппаКопироватьИЗЭксель.Видимость = Истина;
		Элементы.РедктированиеСегмента.Видимость = Ложь;
		Элементы.Сегменты1.Видимость = Ложь;
		Если ГруппаКомандыЗгрузкиИзЭксель = "КопироватьИзФайлаЭксель" или ГруппаКомандыЗгрузкиИзЭксель = "КопироватьИзФайлаЭксель1" Тогда
			Элементы.СоздатьСгментИлиИсключить1.Видимость = Ложь;
			СоздатьСгментИлиИсключить = Истина;
		Иначе
			Элементы.СоздатьСгментИлиИсключить1.Видимость = Истина;
			СоздатьСгментИлиИсключить = Ложь;
		КонецЕсли;
		Элементы.Перенести.Видимость = Ложь;
		Элементы.Настройки.Видимость = Истина;
	ИначеЕсли ПередидущаяГруппа.Имя = "ГруппаСозданияСегментаВручную" Тогда
		Элементы.ГруппаСозданияСегментаВручную.Видимость = Истина;
		Элементы.РедктированиеСегмента.Видимость = Ложь;
		Элементы.Сегменты1.Видимость = Ложь;
		Если ГруппаКомандыЗгрузкиИзЭксель = "СоздатьСегментРуками" или ГруппаКомандыЗгрузкиИзЭксель = "СоздатьСегментРуками1" Тогда
			Элементы.СоздатьСгментИлиИсключить2.Видимость = Ложь;
			СоздатьСгментИлиИсключить = Истина;
		Иначе
			Элементы.СоздатьСгментИлиИсключить2.Видимость = Истина;
			СоздатьСгментИлиИсключить = Ложь;
		КонецЕсли;
		Элементы.Перенести.Видимость = Ложь;
		Элементы.Настройки.Видимость = Истина;
	ИначеЕсли ПередидущаяГруппа.Имя = "ГруппаНастройкаУсловий" Тогда 
		Элементы.ГруппаНастройкаСегмента.Видимость = Ложь;
		Элементы.ГруппаНастройкаУсловий.Видимость = Истина;
		Элементы.Настройки.Видимость = Истина;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСуществующуюСкидку(Команда)
	СкидкаСсылка = Элементы.СкидкиНаценки.ТекущиеДанные.СкидкаНаценка;
	РедактироватьСкидкуНаСервере(СкидкаСсылка);
	ОбновитьОтображение(Команда);
	ИзменитьВидимостьЭлементов();
	СпособПредоставленияПриИзмененииСервер();
	ЗаполнитьСтекСтраниц(НомерТекущейСтраници, Элементы.ГруппаНастройкаСкидки);
КонецПроцедуры

&НаСервере
Процедура РедактироватьСкидкуНаСервере(Акция)
	Родитель = Акция.Родитель;
	СтатусДействия = Акция.СтатусДействия;
	НазваниеСкидки = Акция.Наименование;
	Управляемая = Акция.Управляемая;
	ВыдатьСкидочныйКупон = Акция.ВыдатьСкидочныйКупон;
	НоменклатураСкидочногоКупона = Акция.НоменклатураСкидочногоКупона;
	ВариантВыдачиКупона = Акция.ВариантВыдачиКупона;
	СпособПредоставления = Акция.СпособПредоставления;
	ЗначениеСкидкиНаценки = Акция.ЗначениеСкидкиНаценки;
	ВидЦены = Акция.ВидЦены;
	ПодарокИзКорзиныПокупателя = Акция.ПодарокИзКорзиныПокупателя;
	КоличествоПодарковИзКорзиныПокупателя = Акция.КоличествоПодарковИзКорзиныПокупателя;
	МоментВыдачиСообщения = Акция.МоментВыдачиСообщения;
	СегментСкидкиПоле = Акция.СегментНоменклатурыПредоставления;
	ОбластьПредоставления = Акция.ОбластьПредоставления;
	УсловияАкций.Загрузить(Акция.УсловияПредоставления.Выгрузить());
	ЦеновыеГруппы.Загрузить(Акция.ЦеновыеГруппы.Выгрузить());
	ПодарокИзСписка = Акция.ПодарокИзСписка;
	УчитыватьПодарокКакПродажу = Акция.УчитыватьПодарокКакПродажу;
	НаборПодарков.Загрузить(Акция.НаборПодарков.Выгрузить());
	ТекстСообщения = Акция.ТекстСообщения;
	ДиапазонПроцентов.Загрузить(Акция.ДиапазонПроцентов.Выгрузить());
КонецПроцедуры // РедактироватьАкциюНаСервере()

&НаКлиенте
Процедура РедактироватьУсловие(Команда)
	УсловиеСсылка = Элементы.УсловияАкций.ТекущиеДанные.УсловиеПредоставления;
	РедактироватьУсловиеНаСервере(УсловиеСсылка);
	ОбновитьОтображение(Команда);
	УсловиеПредоставленияПриИзменении("");
	ЗаполнитьСтекСтраниц(НомерТекущейСтраници, Элементы.ГруппаНастройкаУсловий);
КонецПроцедуры

&НаСервере
Процедура РедактироватьУсловиеНаСервере(Условие)
	РодительУсловие = Условие.Родитель;
	НаименованиеУсловия = Условие.Наименование;
	УсловиеПредоставления = Условие.УсловиеПредоставления;
	КритерийОграниченияПримененияЗаОбъемПродаж = Условие.КритерийОграниченияПримененияЗаОбъемПродаж;
	ОбластьОграничения = Условие.ОбластьОграничения;
	ТипСравнения = Условие.ТипСравнения;
	ЗначениеУсловияОграничения = Условие.ЗначениеУсловияОграничения;
	СегментУсловияПоле = Условие.СегментНоменклатурыОграничения;
	ВариантНакопления = Условие.ВариантНакопления;
	ВариантОпределенияПериодаНакопительнойСкидки = Условие.ВариантОпределенияПериодаНакопительнойСкидки;
	ПериодНакопления = Условие.ПериодНакопления;
	ГрафикОплаты = Условие.ГрафикОплаты;
	ФормаОплаты = Условие.ФормаОплаты;
	ВремяДействия.Загрузить(Условие.ВремяДействия.Выгрузить());
	ГруппаПользователей = Условие.ГруппаПользователей;
	КомплектПокупки.Загрузить(Условие.КомплектПокупки.Выгрузить());
	ДнейДоДняРождения = Условие.ДнейДоДняРождения;
	ДнейПослеДняРождения = Условие.ДнейПослеДняРождения;
	ПорядковыйНомерПродажиКратен = Условие.ПорядковыйНомерПродажиКратен;
	Получатели.Загрузить(Условие.Получатели.Выгрузить());
	ЗаполнитьСписокВыбораТипаПолучателей();
КонецПроцедуры // РедактироватьАкциюНаСервере()


&НаКлиенте
Процедура Провести(Команда)
	Документ = Элементы.ТЧВсеСкидки.ТекущиеДанные.Акция;
	ПровестиНаСервере(Документ);
КонецПроцедуры

&НаСервере
Процедура ПровестиНаСервере(Документ)
	ДокументОбъект = Документ.ПолучитьОбъект();
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение)
КонецПроцедуры

&НаКлиенте
Процедура Распровести(Команда)
	Документ = Элементы.ТЧВсеСкидки.ТекущиеДанные.Акция;
	РаспровестиНаСервере(Документ);
КонецПроцедуры

&НаСервере
Процедура РаспровестиНаСервере(Документ)
	ДокументОбъект = Документ.ПолучитьОбъект();
	ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения)
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСкидку(Команда)
	СкидкаНаценка = Элементы.СкидкиНаценки.ТекущиеДанные.СкидкаНаценка;
	КопироватьСкидкуНаСервере(СкидкаНаценка);
КонецПроцедуры

&НаСервере
Процедура КопироватьСкидкуНаСервере(СкидкаСсылка)
	СкидкаОбъект = СкидкаСсылка.ПолучитьОбъект();
	НоваяСкидкаОбъект = СкидкаОбъект.Скопировать();
	НоваяСкидкаОбъект.Записать();
	НоваяСтрока = СкидкиНаценки.Добавить();
	НоваяСтрока.СкидкаНаценка = НоваяСкидкаОбъект.Ссылка;
	НоваяСтрока.ДатаНачала    = ДатаНачалаДействия;
	НоваяСтрока.ДатаОкончания = ДатаОкончанияДействия;

КонецПроцедуры // КопироватьСкидкуНаСервере(СкидкаСсылка)()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте	//	LNK 25.09.2018 09:32:52
Процедура РедактируемыйСегментНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("ТекущийЭлемент", РедактируемыйСегмент);

	Если НЕ ПолноправныйПользователь() Тогда

		ПараметрыФормыВыбора.Вставить("ОтборСсылок", УправлениеПользователями.ПолучитьСписокДоступныхСегментов());

	КонецЕсли;

	ОткрытьФорму("Справочник.СегментыНоменклатуры.ФормаВыбора", ПараметрыФормыВыбора, Элемент, ЭтотОбъект);

КонецПроцедуры

&НаСервере	//	LNK 25.09.2018 09:44:02
Функция ПолноправныйПользователь()

	Возврат РольДоступна(Метаданные.Роли.АдминистраторСистемы);

КонецФункции // ПолноправныйПользователь()




 