
&НаКлиенте
Процедура ОтправкаИзОтделенияПриИзменении(Элемент)
	ДоставкаНаАдресПриИзмененииНаСервере()
КонецПроцедуры

&НаСервере
Процедура ДоставкаНаАдресПриИзмененииНаСервере()
	Если ОтправкаИзОтделения тогда
		Элементы.ГруппаМагазин.Видимость	= ложь;	
		Элементы.ГруппаОтделение.Видимость 		= Истина;			
	Иначе
		Элементы.ГруппаМагазин.Видимость	= Истина;	
		Элементы.ГруппаОтделение.Видимость 		= ложь;			
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура Sender_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	П = Новый Структура;
	
	СписокКолонок = Новый СписокЗначений;
	СписокКолонок.Добавить("Контрагент","Контрагент",Истина);
	СписокКолонок.Добавить("Идентификатор","Идентификатор",ЛОЖЬ);
	
	П.Вставить("ЗаголовокФормы","Выберите контрагента отправителя");
	П.Вставить("СписокКолонок",СписокКолонок);
	П.Вставить("Данные",тзКонтрагентыОтправители);
	
	П.Вставить("ВернутьРеф",Истина);
	
	ПутьКФормеРедактирования = ПолучитьПолноеИмяФормы("ФормаВыбораИзТЗ");
	Оповещение = Новый ОписаниеОповещения("ВыборSender_", ЭтаФорма);
	ОткрытьФорму(ПутьКФормеРедактирования,П ,ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
КонецПроцедуры

&НаКлиенте
Процедура ContactSender_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
		П = Новый Структура;
		
		СписокКолонок = Новый СписокЗначений;
		
		СписокКолонок.Добавить("КонтактноеЛицо","Контактное лицо",	Истина);
		СписокКолонок.Добавить("Телефон",		"Телефон",			Истина);
		СписокКолонок.Добавить("Фамилия",		"Фамилия",			Истина);
		СписокКолонок.Добавить("Имя",			"Имя",				Истина);
		СписокКолонок.Добавить("Отчество",		"Отчество",			Истина);
		СписокКолонок.Добавить("Идентификатор",	"Идентификатор",	ЛОЖЬ);
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Контрагент",Sender);
		
		
		П.Вставить("ЗаголовокФормы",			"Выберите контактное лицо");
		П.Вставить("СписокКолонок",				СписокКолонок);
		П.Вставить("Данные",					тзКонтактныеЛица);
		//П.Вставить("ВидимостьКнопкиСоздания",	Истина);
		П.Вставить("ВернутьРеф",				Истина);
		П.Вставить("Отбор",						СтруктураОтбора);
		
		
		ПутьКФормеРедактирования = ПолучитьПолноеИмяФормы("ФормаВыбораИзТЗ");
		Оповещение = Новый ОписаниеОповещения("ВыборSender_Контакт", ЭтаФорма);
		ОткрытьФорму(ПутьКФормеРедактирования,П,ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
	
	
КонецПроцедуры


&НаКлиенте 
Процедура ВыборSender_Контакт(Результат, ПараметрыОповещения) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	Строки = тзКонтактныеЛица.НайтиСтроки(Новый Структура("Идентификатор",Результат));
	Если Строки.Количество() = 0 и Результат <> "00000000-0000-0000-0000-000000000000" Тогда
		Возврат;
	КонецЕсли;
	
	
	
	
	Если Результат <> "00000000-0000-0000-0000-000000000000" Тогда
		ContactSender 	= Строки[0].Идентификатор;
		ContactSender_ = Строки[0].КонтактноеЛицо;
		SendersPhone 	= Строки[0].Телефон;
	КонецЕсли;	
	
	
КонецПроцедуры


&НаКлиенте
Процедура CitySenderНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		Если ОтправкаИзОтделения Тогда
		
		П = Новый Структура;
		
		СписокКолонок = Новый СписокЗначений;
		СписокКолонок.Добавить("Наименование","Наименование",Истина);
		СписокКолонок.Добавить("НаименованиеRU","Наименование RU",Истина);
		СписокКолонок.Добавить("РегионИмя","Область",Истина);
		
		П.Вставить("ЗаголовокФормы","Выберите город отправителя");
		П.Вставить("СписокКолонок",СписокКолонок);
		П.Вставить("Данные",тзГорода);
		ПутьКФормеРедактирования = ПолучитьПолноеИмяФормы("ФормаВыбораИзТЗ");
		Оповещение = Новый ОписаниеОповещения("ВыборSender_Город", ЭтаФорма);
		ОткрытьФорму(ПутьКФормеРедактирования,П ,ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		
	Иначе	
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Контрагент",Sender);
		Адреса = тзАдресаКонтрагента.НайтиСтроки(СтруктураОтбора);
		тмпСписокГородов = новый СписокЗначений;
		Для Каждого Эл из Адреса Цикл
			Если СокрЛП(Эл.ИДГорода) <> "00000000-0000-0000-0000-000000000000"  Тогда
				Если тмпСписокГородов.НайтиПоЗначению(СокрЛП(Эл.ИДГорода)) = Неопределено Тогда
					тмпСписокГородов.Добавить(СокрЛП(Эл.ИДГорода),СокрЛП(Эл.Город));
				КонецЕсли;
			КонецЕсли;
		Конеццикла;
	
			
			П = Новый Структура;
			
			СписокКолонок = Новый СписокЗначений;
			СписокКолонок.Добавить("Наименование","Наименование",Истина);
			СписокКолонок.Добавить("Идентификатор","Идентификатор",ЛОЖЬ);
			
			П.Вставить("ЗаголовокФормы","Выберите город получателя");
			П.Вставить("СписокКолонок",СписокКолонок);
			П.Вставить("Данные",тмпСписокГородов);
			
		//	П.Вставить("ВидимостьКнопкиСоздания",Истина);
			
			П.Вставить("ВернутьРеф",Истина);
			
			ПутьКФормеРедактирования = ПолучитьПолноеИмяФормы("ФормаВыбораИзТЗ");
			Оповещение = Новый ОписаниеОповещения("ВыборSender_ГородПоАдресу", ЭтаФорма);
			ОткрытьФорму(ПутьКФормеРедактирования,П ,ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура CitySender_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПолноеИмяФормы(ИмяФормы)
	
	СимволТочка = ".";
	ПозицияТочки = СтрДлина(ЭтаФорма.ИмяФормы);
	Пока Сред(ЭтаФорма.ИмяФормы, ПозицияТочки, 1) <> СимволТочка Цикл ПозицияТочки = ПозицияТочки - 1; КонецЦикла; 
	Возврат Лев(ЭтаФорма.ИмяФормы, ПозицияТочки) + ИмяФормы;
	
КонецФункции    


&НаСервере
Функция Обработать_getCities(ЭлементДом,Результат, Владелец, Параметры)
	СтруктураПараметров = Новый структура;
	
	Пока не ЭлементДом = неопределено цикл
		Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла)  тогда
			СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);
		Иначе
			Текст = "Ошибка getCities";
			ВызватьИсключение Текст;
		КонецЕсли;	 
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	Строка	= тзГорода.Добавить();
	Строка.Наименование = СтруктураПараметров.Description;
	Строка.НаименованиеRU = СтруктураПараметров.DescriptionRu;
	Строка.Идентификатор = СтруктураПараметров.Ref;
	Строка.Регион = СтруктураПараметров.Area;	 	
	Строка.CityID = СтруктураПараметров.CityID;
	Строка.Доставка1 = ?(СтруктураПараметров.Delivery1 = "1",Истина,Ложь);
	Строка.Доставка2 = ?(СтруктураПараметров.Delivery2 = "1",Истина,Ложь);
	Строка.Доставка3 = ?(СтруктураПараметров.Delivery3 = "1",Истина,Ложь);
	Строка.Доставка4 = ?(СтруктураПараметров.Delivery4 = "1",Истина,Ложь);
	Строка.Доставка5 = ?(СтруктураПараметров.Delivery5 = "1",Истина,Ложь);
	Строка.Доставка6 = ?(СтруктураПараметров.Delivery6 = "1",Истина,Ложь);
	Строка.Доставка7 = ?(СтруктураПараметров.Delivery7 = "1",Истина,Ложь);
	
КонецФункции


&НаКлиенте 
Процедура ВыборSender_ГородПоАдресу(Результат, ПараметрыОповещения) Экспорт
	Если Результат = Неопределено Тогда
		CitySender = "";
		//CitySender_ = "";
		
		SenderAddress 	= "";
		//SenderAddress_ = "";
		
		//WarhousOut 	= "";
		//WarhousOut_ 	= "";
		
		Возврат;
	КонецЕсли;
	
	
	Строки = тзГорода.НайтиСтроки(Новый Структура("Идентификатор",Результат));
	Если Строки.Количество() = 0 и Результат <> "00000000-0000-0000-0000-000000000000" Тогда
		
		CitySender = "";
		//CitySender_ = "";
		
		SenderAddress 	= "";
		//SenderAddress_ = "";
		
		//WarhousOut 	= "";
		//WarhousOut_ 	= "";
		
		Возврат;
	КонецЕсли;
	
	
	
	
	Если Результат <> "00000000-0000-0000-0000-000000000000" Тогда
		
		CitySender = Строки[0].Идентификатор;
		//CitySender_ = Строки[0].Наименование;
		
		П = Новый Структура;
		
		СписокКолонок = Новый СписокЗначений;
		СписокКолонок.Добавить("Город","Город",Истина);
		СписокКолонок.Добавить("Адрес","Адрес",Истина);
		СписокКолонок.Добавить("Идентификатор","Идентификатор",ЛОЖЬ);
		
		П.Вставить("ЗаголовокФормы","Выберите адрес отправителя");
		П.Вставить("СписокКолонок",СписокКолонок);
		П.Вставить("Данные",тзАдресаКонтрагента);
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ИДГорода",CitySender);
		СтруктураОтбора.Вставить("Контрагент",Sender);
		
		П.Вставить("Отбор",СтруктураОтбора);
	//	П.Вставить("ВидимостьКнопкиСоздания",Истина);
		
		П.Вставить("ВернутьРеф",Истина);
		
		ПутьКФормеРедактирования = ПолучитьПолноеИмяФормы("ФормаВыбораИзТЗ");
		Оповещение = Новый ОписаниеОповещения("ВыборSender_Адрес", ЭтаФорма);
		ОткрытьФорму(ПутьКФормеРедактирования,П ,ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
		
		
		
	Иначе
		
		//Создание адреса, но для отпарвителя нет такой возможности
		
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте 
Процедура ВыборSender_Адрес(Результат, ПараметрыОповещения) Экспорт
	Если Результат = Неопределено Тогда
		
		SenderAddress 	= "";
		SenderAddress_ = "";
		
		Возврат;
	КонецЕсли;
	
	
	Строки = тзАдресаКонтрагента.НайтиСтроки(Новый Структура("Идентификатор",Результат));
	Если Строки.Количество() = 0 и Результат <> "00000000-0000-0000-0000-000000000000" Тогда
		
		SenderAddress 	= "";
		SenderAddress_ = "";
		
		Возврат;
	КонецЕсли;
	
	
	
	
	Если  Результат = "00000000-0000-0000-0000-000000000000" Тогда
		//Создание
		
		
	Иначе
		
		                        
		
		SenderAddress 	= Строки[0].Идентификатор;
		SenderAddress_ = Строки[0].Адрес;
		
		
			
		П = Новый Структура;
		
		СписокКолонок = Новый СписокЗначений;
		
		СписокКолонок.Добавить("КонтактноеЛицо","Контактное лицо",	Истина);
		СписокКолонок.Добавить("Телефон",		"Телефон",			Истина);
		СписокКолонок.Добавить("Фамилия",		"Фамилия",			Истина);
		СписокКолонок.Добавить("Имя",			"Имя",				Истина);
		СписокКолонок.Добавить("Отчество",		"Отчество",			Истина);
		СписокКолонок.Добавить("Идентификатор",	"Идентификатор",	ЛОЖЬ);
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Контрагент",Sender);
		
		
		П.Вставить("ЗаголовокФормы",			"Выберите контактное лицо");
		П.Вставить("СписокКолонок",				СписокКолонок);
		П.Вставить("Данные",					тзКонтактныеЛица);
		//П.Вставить("ВидимостьКнопкиСоздания",	Истина);
		П.Вставить("ВернутьРеф",				Истина);
		П.Вставить("Отбор",						СтруктураОтбора);
		
		
		ПутьКФормеРедактирования = ПолучитьПолноеИмяФормы("ФормаВыбораИзТЗ");
		Оповещение = Новый ОписаниеОповещения("ВыборSender_Контакт", ЭтаФорма);
		ОткрытьФорму(ПутьКФормеРедактирования,П,ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
			
	КонецЕсли;
	
	
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СтруктураДанных = новый Структура;
	СтруктураДанных.Вставить("Контрагент", Истина);
	СтруктураДанных.Вставить("Контакт",Истина);
	СтруктураДанных.Вставить("Адрес",Истина);
	ОбновитьКонтрагентов(СтруктураДанных);
КонецПроцедуры

 &НаКлиенте 
Процедура ВыборSender_(Результат, ПараметрыОповещения) Экспорт
	Если Результат = Неопределено Тогда
		Sender_ = "";
		Sender  = "";
		
		Возврат;
	КонецЕсли;
	
	Строки = тзКонтрагентыОтправители.НайтиСтроки(Новый Структура("Идентификатор",Результат));
	Если Строки.Количество() = 0 Тогда
		Sender_ = "";
		Sender  = "";
		
	КонецЕсли;
	
	Sender = Строки[0].Идентификатор; 
	Sender_ = Строки[0].Контрагент;
	
	

	
	
	Если ОтправкаИзОтделения Тогда
		
		П = Новый Структура;
		
		СписокКолонок = Новый СписокЗначений;
		СписокКолонок.Добавить("Наименование","Наименование",Истина);
		СписокКолонок.Добавить("НаименованиеRU","Наименование RU",Истина);
		СписокКолонок.Добавить("РегионИмя","Область",Истина);
		
		П.Вставить("ЗаголовокФормы","Выберите город отправителя");
		П.Вставить("СписокКолонок",СписокКолонок);
		П.Вставить("Данные",тзГорода);
		ПутьКФормеРедактирования = ПолучитьПолноеИмяФормы("ФормаВыбораИзТЗ");
		Оповещение = Новый ОписаниеОповещения("ВыборSender_Город", ЭтаФорма);
		ОткрытьФорму(ПутьКФормеРедактирования,П ,ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		
	Иначе 
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Контрагент",Sender);
		Адреса = тзАдресаКонтрагента.НайтиСтроки(СтруктураОтбора);
		тмпСписокГородов = новый СписокЗначений;
		Для Каждого Эл из Адреса Цикл
			Если СокрЛП(Эл.ИДГорода) <> "00000000-0000-0000-0000-000000000000"  Тогда
				Если тмпСписокГородов.НайтиПоЗначению(СокрЛП(Эл.ИДГорода)) = Неопределено Тогда
					тмпСписокГородов.Добавить(СокрЛП(Эл.ИДГорода),СокрЛП(Эл.Город));
				КонецЕсли;
			КонецЕсли;
		Конеццикла;
		
			
			П = Новый Структура;
			
			СписокКолонок = Новый СписокЗначений;
			СписокКолонок.Добавить("Наименование","Наименование",Истина);
			СписокКолонок.Добавить("Идентификатор","Идентификатор",ЛОЖЬ);
			
			П.Вставить("ЗаголовокФормы","Выберите город отправителя");
			П.Вставить("СписокКолонок",СписокКолонок);
			П.Вставить("Данные",тмпСписокГородов);
			
			П.Вставить("ВидимостьКнопкиСоздания",ЛОЖЬ);
			
			П.Вставить("ВернутьРеф",Истина);
			
			ПутьКФормеРедактирования = ПолучитьПолноеИмяФормы("ФормаВыбораИзТЗ");
			Оповещение = Новый ОписаниеОповещения("ВыборSender_ГородПоАдресу", ЭтаФорма);
			ОткрытьФорму(ПутьКФормеРедактирования,П ,ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
		
		
		
		
	КонецЕсли;		
	
	
	//Выбор опций
	//СтруктураОпций = ПолучитьСтруктуруОпций();
	//Если СтруктураОпций.Свойство("Плательщик3Лицо") Тогда
	//	Элементы.Person3_.Видимость = Истина;
	//Иначе
	//	Элементы.Person3_.Видимость = Ложь;
	//КонецЕсли;
	
	//УстановитьВидимостьПоПлательщику();	
	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруОпций()
	СтруктураОпций = новый Структура;
	
	СтруктураОтбора = новый Структура;
	СтруктураОтбора.Вставить("Контрагент",Sender);
	МассивСтрок = тзПараметрыКонтрагентов.НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат СтруктураОпций;
	КонецЕсли;
	
	СтруктураОпций = новый Структура;
	Контрагент = МассивСтрок[0];
	СтруктураОпций.Вставить("Плательщик3Лицо",						Контрагент.Плательщик3Лицо);
	СтруктураОпций.Вставить("ОплатаСредствЗаТовар",					Контрагент.ОплатаСредствЗаТовар);
	СтруктураОпций.Вставить("РасчетБезнал",							Контрагент.РасчетБезнал);
	СтруктураОпций.Вставить("Кредит",								Контрагент.Кредит);
	СтруктураОпций.Вставить("СкрытьСуммуДоставки",					Контрагент.СкрытьСуммуДоставки);
	СтруктураОпций.Вставить("ДеньВДень",							Контрагент.ДеньВДень);
	СтруктураОпций.Вставить("Экспедирование",						Контрагент.Экспедирование);
	СтруктураОпций.Вставить("ДоставкаВРуки",						Контрагент.ДоставкаВРуки);
	СтруктураОпций.Вставить("СпускСЭтажа",							Контрагент.СпускСЭтажа);
	СтруктураОпций.Вставить("ОбратнаяДоставкаЦенныхБумаг",			Контрагент.ОбратнаяДоставкаЦенныхБумаг);
	СтруктураОпций.Вставить("ОбратнаяДоставкаПодтиповДокументов",	Контрагент.ОбратнаяДоставкаПодтиповДокументов);
	СтруктураОпций.Вставить("КонтрольОплаты",						Контрагент.КонтрольОплаты);
	СтруктураОпций.Вставить("HaveMoneyWallets",						Контрагент.HaveMoneyWallets);	
	возврат СтруктураОпций;
КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//ТочкаВхода = ОбменНПСлужебный.ПолучитьТочкуВхода(); 	
	//КлючAPI =  ОбменНПСлужебный.ПолучитьТочкуВхода(); 
	ЗагрузитьСправочникНаСервере();

КонецПроцедуры

 &НаСервере
Процедура ЗагрузитьСправочникНаСервере()
	Метод = "";
	Файл = "";
	Таблица = Неопределено;
	ТаблицаМетодов = Новый ТаблицаЗначений;
	ТаблицаМетодов.Колонки.Добавить("Метод");
	ТаблицаМетодов.Колонки.Добавить("Файл");
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCities";
	ЗаполнитьСправочникиНП(ТаблицаМетодов);
	
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьКонтрагентов(СтруктураДанных)
	//Если Модифицированность Тогда
	датан=ТекущаяДата();
	
	ТочкаВхода = ОбменНПСлужебный.ПолучитьТочкуВхода();	
	Ключ = ОбменНПСлужебный.ПолучитьКлючAPI();
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("КлючАПИ",Ключ);
	
	ТаблицаМетодов = Новый ТаблицаЗначений;
	ТаблицаМетодов.Колонки.Добавить("Метод");
	ТаблицаМетодов.Колонки.Добавить("Файл");
	Строка = ТаблицаМетодов.Добавить();
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCounterparties";
	Строка.Файл = "\counter1.dbf";
	//Строка.Метод = "getCounterparties";
	//Строка.Файл = "\counter2.dbf";
	//Строка.Метод = "getCounterparties";
	//Строка.Файл = "\counter3.dbf";
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCounterpartyAddresses";
	Строка.Файл = "\countadr.dbf";
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCounterpartyContactPersons";
	Строка.Файл = "\countcp.dbf";
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCounterpartyOptions";
	Строка.Файл = "\countopt.dbf";
	
	Для каждого Строка Из ТаблицаМетодов Цикл
		//	ОбработкаПрерыванияПользователя();
		ПараметрыМетода.Вставить("ИмяМетода",Строка.Метод);
		//Сообщить(Строка.Метод);
		Если Строка.Метод = "getCounterparties" тогда
			Если Не СтруктураДанных.Свойство("Контрагент") Тогда
				Продолжить;
			КонецЕсли;
			
			тзКонтрагентыОтправители.Очистить();
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить("Recipient");
			МассивТипов.Добавить("Sender");
			МассивТипов.Добавить("ThirdPerson");
			тмпзапрос=
			"<file>
			|<apiKey>"+Ключ+"</apiKey>
			|<modelName>Counterparty</modelName>
			|<calledMethod>"+Строка.Метод+"</calledMethod>
			|<methodProperties>
			|<CounterpartyProperty>{Counter}</CounterpartyProperty>
			|</methodProperties>
			|</file>";
			Для Каждого Элемент из МассивТипов Цикл
				запрос = СтрЗаменить(тмпзапрос,"{Counter}",Элемент);
				НомерПоследней = ПолучитьНомерПоследней(запрос,100);
				Для НомСтр = 1 По НомерПоследней Цикл	
					ПараметрыМетода.Вставить("Тип",Элемент);
					ПараметрыМетода.Вставить("Страница",НомСтр);
					ТекстЗапроса = ПолучитьТекстЗапроса(Строка.Метод,ПараметрыМетода);
					Если не ЗначениеЗаполнено(ТекстЗапроса) тогда
						//Сообщить("Не удалось сформировать запрос по методу: "+Строка.Метод);
						Продолжить;
					КонецЕсли;
					ДокументДом  = ПолучитьОтветДОМ(ТочкаВхода,ТекстЗапроса);
					Если  ДокументДом = Неопределено тогда
						Сообщить("Ошибка при получении ответа, метод: "+ Строка.Метод);
					КонецЕсли;
					Если не  ЭтоУспех(ДокументДом) тогда
						ТекстИсключения = ВернутьЕрор(ДокументДом);
						Сообщить(ТекстИсключения+" "+Строка.Метод);
					КонецЕсли;
					лВыполняемаяобработка = ПолучитьПроцедуруПоМетоду(Строка.Метод);
					Если не ЗначениеЗаполнено(лВыполняемаяобработка) тогда
						Сообщить(ТекстИсключения = "Не назначен обработчик методу: "+ Строка.Метод);
					КонецЕсли;
					Результат = новый Структура();
					РаспарситьОтвет(лВыполняемаяобработка, ДокументДом,Результат, Строка.Метод,ПараметрыМетода);
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли Строка.Метод = "getCounterpartyAddresses" Или Строка.Метод = "getCounterpartyContactPersons" или Строка.Метод = "getCounterpartyOptions" Тогда
			Если Строка.Метод = "getCounterpartyOptions" и Не структураДанных.Свойство("Контрагент") Тогда
				Продолжить;
			ИначеЕсли Строка.Метод = "getCounterpartyOptions" и структураДанных.Свойство("Контрагент") Тогда
				тзПараметрыКонтрагентов.Очистить();
			ИначеЕсли Строка.Метод = "getCounterpartyContactPersons" и Не структураДанных.Свойство("Контакт") Тогда
				Продолжить;
			ИначеЕсли Строка.Метод = "getCounterpartyContactPersons" и структураДанных.Свойство("Контакт") Тогда
				тзКонтактныеЛица.Очистить();
			ИначеЕсли Строка.Метод = "getCounterpartyAddresses" и Не структураДанных.Свойство("Адрес") Тогда
				Продолжить;
			ИначеЕсли Строка.Метод = "getCounterpartyAddresses" и структураДанных.Свойство("Адрес") Тогда
				тзАдресаКонтрагента.Очистить();
			КонецЕсли;
			Если Строка.Метод = "getCounterpartyAddresses" Тогда
				квостр = 500;
			Иначе
				квостр = 100;
			КонецЕсли;
			тмпзапрос=
			"<file>
			|<apiKey>"+Ключ+"</apiKey>
			|<modelName>Counterparty</modelName>
			|<calledMethod>"+Строка.Метод+"</calledMethod>
			|<methodProperties>
			|<Ref>{Ref}</Ref>
			|</methodProperties>
			|</file>";
			Для Каждого Стр Из тзКонтрагентыОтправители Цикл
				ПараметрыМетода.Вставить("Тип","Sender");
				ПараметрыМетода.Вставить("Контрагент",Стр.Идентификатор);
				запрос = СтрЗаменить(тмпзапрос,"{Ref}",стр.Идентификатор);
				НомерПоследней = ПолучитьНомерПоследней(запрос,квостр);
				Для НомСтр = 1 По НомерПоследней Цикл
					ПараметрыМетода.Вставить("Страница",НомСтр);
					ТекстЗапроса = ПолучитьТекстЗапроса(Строка.Метод,ПараметрыМетода);
					Если не ЗначениеЗаполнено(ТекстЗапроса) тогда
						//Сообщить("Не удалось сформировать запрос по методу: "+Строка.Метод);
						Продолжить;
					КонецЕсли;
					ДокументДом  = ПолучитьОтветДОМ(ТочкаВхода,ТекстЗапроса);
					Если  ДокументДом = Неопределено тогда
						Сообщить("Ошибка при получении ответа, метод: "+ Строка.Метод);
					КонецЕсли;
					Если не  ЭтоУспех(ДокументДом) тогда
						ТекстИсключения = ВернутьЕрор(ДокументДом);
						Сообщить(ТекстИсключения+" "+Строка.Метод);
					КонецЕсли;
					лВыполняемаяобработка = ПолучитьПроцедуруПоМетоду(Строка.Метод);
					Если не ЗначениеЗаполнено(лВыполняемаяобработка) тогда
						Сообщить(ТекстИсключения = "Не назначен обработчик методу: "+ Строка.Метод);
					КонецЕсли;
					Результат = новый Структура();
					РаспарситьОтвет(лВыполняемаяобработка, ДокументДом,Результат, Строка.Метод,ПараметрыМетода);
				конеццикла;
			КонецЦикла;
		конецЕсли;
	КонецЦикла;
	тзКонтрагентыОтправители.Сортировать("Контрагент,ГородИмя");
	тзКонтактныеЛица.Сортировать("КонтактноеЛицо");
	тзАдресаКонтрагента.Сортировать("Город");
	
	
	
	ЗаполнитьПредставлениеСсылок(Истина);	
	
	
	////запись
	//Дбф = Новый Xbase;
	//Если СтруктураДанных.Свойство("Контрагент") Тогда
	//	Файл = Новый Файл(Объект.ПутьКБазе+"\counter1.mxl");
	//	ЗначениеВФайл(Файл.ПолноеИмя,тзКонтрагентыОтправители);
	//	Файл = Новый Файл(Объект.ПутьКБазе+"\counter2.mxl");
	//	ЗначениеВФайл(Файл.ПолноеИмя,тзКонтрагентыПолучатели);
	//	Файл = Новый Файл(Объект.ПутьКБазе+"\counter3.mxl");
	//	ЗначениеВФайл(Файл.ПолноеИмя,тзКонтрагентыТретьеЛицо);
	//	Файл = Новый Файл(Объект.ПутьКБазе+"\countopt.mxl");
	//	ЗначениеВФайл(Файл.ПолноеИмя,тзПараметрыКонтрагентов);
	//КонецЕсли;
	//Если СтруктураДанных.Свойство("Контакт") Тогда
	//	Файл = Новый Файл(Объект.ПутьКБазе+"\countcp.mxl");
	//	ЗначениеВФайл(Файл.ПолноеИмя,тзКонтактныеЛица);
	//КонецЕсли;
	//Если СтруктураДанных.Свойство("Адрес") Тогда
	//	Файл = Новый Файл(Объект.ПутьКБазе+"\countadr.mxl");
	//	ЗначениеВФайл(Файл.ПолноеИмя,тзАдресаКонтрагента);
	//КонецЕсли;
	
	ЗаполнитьСписки();
	
	Сообщить("Обновление данных контрагентов завершено!");
	//КонецЕсли;
КонецПроцедуры
 &НаСервереБезКонтекста
Функция ВернутьЕрор(ДокументДом) 
	ТекстОшибки  = "";
	
	Узел =  ДокументДом.ПолучитьЭлементыПоИмени("errors");
	Если Узел.количество() = 0 Тогда
		Возврат "";
	КонецЕсли;	
	
	Узел = Узел[0].первыйДочерний;
	Пока не Узел = Неопределено цикл
		ТекстОшибки = ТекстОшибки + Символы.ПС + Узел.ТекстовоеСодержимое ;
		Узел = Узел.СледующийСоседний;
	КонецЦикла;	 
	
	Возврат ТекстОшибки;	
КонецФункции

   &НаСервере
Процедура РаспарситьОтвет(лВыполняемаяобработка,ДокументДом, Результат, Владелец = неопределено,Параметры = Неопределено)
	Если Не лВыполняемаяобработка = "Обработать_getMessageCodeText" Тогда
		Узел = ДокументДом.ПолучитьЭлементыПоИмени("Item");
	Иначе
		Узел = ДокументДом.ПолучитьЭлементыПоИмени("data");
	конецЕсли;
	КоличествоЭлементов = Узел.Количество();
	Если КоличествоЭлементов > 0 тогда
		Item = Узел.Элемент(0);
		
		Пока не Item = неопределено цикл
			Элемент_Item = Item.ПервыйДочерний;
			
			ВыполнитьОбработчик(Владелец, лВыполняемаяобработка,Элемент_Item, Результат,Параметры);
			Item = Item.СледующийСоседний;
		КонецЦикла;
		
	КонецЕсли;	
	//здесь пишем дбф?	
КонецПроцедуры

&НаСервере
Функция Обработать_getCounterpartyAddresses(ЭлементДом,Результат, Владелец, Параметры)
	СтруктураПараметров = Новый структура;
	
	Пока не ЭлементДом = неопределено цикл
		Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла)  тогда
			СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);
		Иначе
			Текст = "Ошибка getCounterpartyAddresses";
			ВызватьИсключение Текст;
		КонецЕсли;	 
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	СтруктураПараметров.Вставить("Владелец",Владелец);
	Строка = тзАдресаКонтрагента.Добавить();
	Строка.Контрагент 	= Параметры.Контрагент;
	Строка.Адрес 		= СтруктураПараметров.Description;
	Строка.Идентификатор = СтруктураПараметров.Ref;
	Строка.Город 		= СтруктураПараметров.CityDescription;
	Строка.ИДГорода 	= СтруктураПараметров.CityRef;
	Строка.Улица 		= СтруктураПараметров.StreetDescription;
	Строка.ИДУлицы 		= СтруктураПараметров.StreetRef;
	Строка.Дом 			= СтруктураПараметров.BuildingDescription;
	Строка.Примечание = СтруктураПараметров.Note;
	Если Строка.Город = "" Тогда
		Отбор = новый Структура();
		Отбор.Вставить("Идентификатор",Параметры.Контрагент);
		Если Параметры.Тип = "Sender" Тогда
			СтрокиКонтрагента = тзКонтрагентыОтправители.НайтиСтроки(Отбор);
			Если СтрокиКонтрагента.Количество()>0 Тогда
				Строка.Город 	= СтрокиКонтрагента[0].ГородИмя;
				Строка.ИДГорода = СтрокиКонтрагента[0].Город;
			КонецЕсли; 
		КонецЕсли;

	КонецЕсли;
КонецФункции


&НаСервере
Функция Обработать_getCounterpartyContactPersons(ЭлементДом,Результат, Владелец, Параметры)
	СтруктураПараметров = Новый структура;
	
	Пока не ЭлементДом = неопределено цикл
		Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла)  тогда
			СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);
		Иначе
			Текст = "Ошибка getCounterpartyContactPersons";
			ВызватьИсключение Текст;
		КонецЕсли;	 
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	СтруктураПараметров.Вставить("Владелец",Владелец);
	
	Строка = тзКонтактныеЛица.Добавить();
	Строка.Контрагент 		= Параметры.Контрагент;
	Строка.Идентификатор 	= СтруктураПараметров.Ref;
	Строка.КонтактноеЛицо 	= СтруктураПараметров.Description;
	Строка.Телефон 			= СтруктураПараметров.Phones;
	Строка.Email 			= СтруктураПараметров.Email;
	Строка.Фамилия 			= СтруктураПараметров.LastName;
	Строка.Имя 				= СтруктураПараметров.FirstName;
	Строка.Отчество 		= СтруктураПараметров.MiddleName;
	
КонецФункции


&НаСервере
Функция ВыполнитьОбработчик(Владелец, ИмяФункции, П1 = Неопределено, П2 = Неопределено, П3=Неопределено)
	Получилось = Ложь;
	Если не Получилось тогда
		//Попытка
		Выполнить(""+ИмяФункции+"(П1,П2,Владелец,П3)");
		Получилось = истина;
		//Исключение
		//КонецПопытки;
	КонецЕсли;
	Возврат Получилось;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТаблицуМетодов()
	ТаблицаМетодов = Новый ТаблицаЗначений;
	ТаблицаМетодов.Колонки.Добавить("Метод");
	ТаблицаМетодов.Колонки.Добавить("Файл");
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getAreas";
	Строка.Файл = "\Areas.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCities";
	Строка.Файл = "\Cities.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getStreet";
	Строка.Файл = "\Streets.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getWarehouseTypes";
	Строка.Файл = "\whtypes.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getWarehouses";
	Строка.Файл = "\whouse.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCounterparties";
	Строка.Файл = "\counter1.dbf";
	Строка.Метод = "getCounterparties";
	Строка.Файл = "\counter2.dbf";
	Строка.Метод = "getCounterparties";
	Строка.Файл = "\counter3.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getOwnershipFormsList";
	Строка.Файл = "\ownform.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getTypesOfPayers";
	Строка.Файл = "\payertyp.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getTypesOfCounterparties";
	Строка.Файл = "\counttyp.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCargoTypes";
	Строка.Файл = "\cargotyp.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getServiceTypes";
	Строка.Файл = "\servtype.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getBackwardDeliveryCargoTypes";
	Строка.Файл = "\bdelct.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCargoDescriptionList";
	Строка.Файл = "\cargodes.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getTypesOfPayersForRedelivery";
	Строка.Файл = "\redevpt.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCounterpartyAddresses";
	Строка.Файл = "\countadr.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCounterpartyContactPersons";
	Строка.Файл = "\countcp.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getCounterpartyOptions";
	Строка.Файл = "\countopt.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getPaymentForms";
	Строка.Файл = "\payforms.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getPalletsList";
	Строка.Файл = "\pallets.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getTimeIntervals";
	Строка.Файл = "\timeint.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getTraysList";
	Строка.Файл = "\trays.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getTiresWheelsList";
	Строка.Файл = "\tires.dbf";
	
	Строка = ТаблицаМетодов.Добавить();
	Строка.Метод = "getMessageCodeText";
	Строка.Файл = "\Errors.dbf";
	
	Возврат ТаблицаМетодов;
КонецФункции


&НаСервере
Процедура ЗаполнитьСправочникиНП(Знач ТаблицаМетодов, вхМетод = "")
	ТочкаВхода = ОбменНПСлужебный.ПолучитьТочкуВхода();
	датан=ТекущаяДата();
	Ключ = ОбменНПСлужебный.ПолучитьКлючAPI();
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("КлючАПИ",Ключ);
	
	
	
	Если ТаблицаМетодов = Неопределено Тогда
		ТаблицаМетодов = ПолучитьТаблицуМетодов();
	КонецЕсли;
	
	Если вхМетод <> "" Тогда
		ТаблицаМетодов.Очистить();
		
		НоваяСтрока = ТаблицаМетодов.Добавить();
		НоваяСтрока.Метод = вхМетод;

	КонецЕсли;

	
	//Элементыформы.Индикатор1.МаксимальноеЗначение = ТаблицаМетодов.Количество();
	//Элементыформы.Индикатор1.Значение = 0;
	//прогрессбар = 0;
	
	Для каждого Строка Из ТаблицаМетодов Цикл
		//ОбработкаПрерыванияПользователя();
		ПараметрыМетода.Вставить("ИмяМетода",Строка.Метод);
		//прогрессбар = прогрессбар + 1;
		//Элементыформы.Индикатор1.Значение = прогрессбар;
	Если Строка.Метод = "getCounterparties" тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить("Recipient");
			МассивТипов.Добавить("Sender");
			МассивТипов.Добавить("ThirdPerson");
			запрос=
			"<file>
			|<apiKey>"+Объект.КлючAPI+"</apiKey>
			|<modelName>Counterparty</modelName>
			|<calledMethod>"+Строка.Метод+"</calledMethod>
			|<methodProperties>
			|<CounterpartyProperty>{Counter}</CounterpartyProperty>
			|</methodProperties>
			|</file>";
			Для Каждого Элемент из МассивТипов Цикл
				запрос = СтрЗаменить(запрос,"{Counter}",Элемент);
				НомерПоследней = ПолучитьНомерПоследней(запрос,100);
				Для НомСтр = 1 По НомерПоследней Цикл
					ПараметрыМетода.Вставить("Тип",Элемент);
					ПараметрыМетода.Вставить("Страница",НомСтр);
					ТекстЗапроса = ПолучитьТекстЗапроса(Строка.Метод,ПараметрыМетода);
					Если не ЗначениеЗаполнено(ТекстЗапроса) тогда
						//Сообщить("Не удалось сформировать запрос по методу: "+Строка.Метод);
						Продолжить;
					КонецЕсли;
					ДокументДом  = ПолучитьОтветДОМ(ТочкаВхода,ТекстЗапроса);
					Если  ДокументДом = Неопределено тогда
						Сообщить("Ошибка при получении ответа, метод: "+ Строка.Метод);
					КонецЕсли;
					Если не  ЭтоУспех(ДокументДом) тогда
						ТекстИсключения = ВернутьЕрор(ДокументДом);
						Сообщить(ТекстИсключения+" "+Строка.Метод);
						Возврат;
					КонецЕсли;
					лВыполняемаяобработка = ПолучитьПроцедуруПоМетоду(Строка.Метод);
					Если не ЗначениеЗаполнено(лВыполняемаяобработка) тогда
						Сообщить(ТекстИсключения = "Не назначен обработчик методу: "+ Строка.Метод);
					КонецЕсли;
					Результат = новый Структура();
					РаспарситьОтвет(лВыполняемаяобработка, ДокументДом,Результат, Строка.Метод,ПараметрыМетода);
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли Строка.Метод = "getCounterpartyAddresses" Или Строка.Метод = "getCounterpartyContactPersons" или Строка.Метод = "getCounterpartyOptions" Тогда
			тмпзапрос=
			"<file>
			|<apiKey>"+Объект.КлючAPI+"</apiKey>
			|<modelName>Counterparty</modelName>
			|<calledMethod>"+Строка.Метод+"</calledMethod>
			|<methodProperties>
			|<Ref>{Ref}</Ref>
			|</methodProperties>
			|</file>";
			Если Строка.Метод = "getCounterpartyAddresses" Тогда
				квостр = 500;
			Иначе
				квостр = 100;
			КонецЕсли;
			Для Каждого Стр Из тзКонтрагентыОтправители Цикл
				ПараметрыМетода.Вставить("Тип","Sender");
				ПараметрыМетода.Вставить("Контрагент",Стр.Идентификатор);
				запрос = СтрЗаменить(тмпзапрос,"{Ref}",стр.Идентификатор);
				НомерПоследней = ПолучитьНомерПоследней(запрос,квостр);
				Для НомСтр = 1 По НомерПоследней Цикл
					ПараметрыМетода.Вставить("Страница",НомСтр);
					ТекстЗапроса = ПолучитьТекстЗапроса(Строка.Метод,ПараметрыМетода);
					Если не ЗначениеЗаполнено(ТекстЗапроса) тогда
						//Сообщить("Не удалось сформировать запрос по методу: "+Строка.Метод);
						Продолжить;
					КонецЕсли;
					ДокументДом  = ПолучитьОтветДОМ(ТочкаВхода,ТекстЗапроса);
					Если  ДокументДом = Неопределено тогда
						Сообщить("Ошибка при получении ответа, метод: "+ Строка.Метод);
					КонецЕсли;
					Если не  ЭтоУспех(ДокументДом) тогда
						ТекстИсключения = ВернутьЕрор(ДокументДом);
						Сообщить(ТекстИсключения+" "+Строка.Метод);
						Возврат;
					КонецЕсли;
					лВыполняемаяобработка = ПолучитьПроцедуруПоМетоду(Строка.Метод);
					Если не ЗначениеЗаполнено(лВыполняемаяобработка) тогда
						Сообщить(ТекстИсключения = "Не назначен обработчик методу: "+ Строка.Метод);
					КонецЕсли;
					Результат = новый Структура();
					РаспарситьОтвет(лВыполняемаяобработка, ДокументДом,Результат, Строка.Метод,ПараметрыМетода);
				КонецЦикла;
			КонецЦикла;
		Иначе
			//ПараметрыМетода.Вставить("Метод",Строка.Метод);
			ТекстЗапроса = ПолучитьТекстЗапроса(Строка.Метод,ПараметрыМетода);
			Если не ЗначениеЗаполнено(ТекстЗапроса) тогда
				//Сообщить("Не удалось сформировать запрос по методу: "+Строка.Метод);
				Продолжить;
			КонецЕсли;
			ДокументДом  = ПолучитьОтветДОМ(ТочкаВхода,ТекстЗапроса);
			Если  ДокументДом = Неопределено тогда
				Сообщить("Ошибка при получении ответа, метод: "+ Строка.Метод);
			КонецЕсли;
			Если не  ЭтоУспех(ДокументДом) тогда
				ТекстИсключения = ВернутьЕрор(ДокументДом);
				Сообщить(ТекстИсключения+" "+Строка.Метод);
				Возврат;
			КонецЕсли;
			лВыполняемаяобработка = ПолучитьПроцедуруПоМетоду(Строка.Метод);
			Если не ЗначениеЗаполнено(лВыполняемаяобработка) тогда
				Сообщить(ТекстИсключения = "Не назначен обработчик методу: "+ Строка.Метод);
			КонецЕсли;
			Результат = новый Структура();
			РаспарситьОтвет(лВыполняемаяобработка, ДокументДом,Результат, Строка.Метод,ПараметрыМетода);
		КонецЕсли;		
	КонецЦикла;
	ДатаК=ТекущаяДата();
	
	
	
	
	//Сообщить("Загрузка завершена! Время"+ДатаК-ДатаН+" сек.");
КонецПроцедуры

   
&НаСервере
Процедура ЗаполнитьПредставлениеСсылок(ТолькоДанныеКонтрагентов = ЛОЖЬ)	
	
	
	Для Каждого ТекСтрока из тзКонтактныеЛица Цикл
		
		Отбор = Новый Структура("Идентификатор",ТекСтрока.Контрагент);
		
		СтрокиКонтрагенты = тзКонтрагентыОтправители.НайтиСтроки(Отбор);
		
		
		Если СтрокиКонтрагенты.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекСтрока.КонтрагентИмя = СтрокиКонтрагенты[0].Контрагент;
		
	КонецЦикла;
	
	
	
	Для Каждого ТекСтрока из тзПараметрыКонтрагентов Цикл
		
		Отбор = Новый Структура("Идентификатор",ТекСтрока.Контрагент);
		
		
		СтрокиКонтрагенты = тзКонтрагентыОтправители.НайтиСтроки(Отбор);
		
		
		Если СтрокиКонтрагенты.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекСтрока.КонтрагентИмя = СтрокиКонтрагенты[0].Контрагент;
		
	КонецЦикла;
	
	Для Каждого ТекСтрока из тзАдресаКонтрагента Цикл
		
		Отбор = Новый Структура("Идентификатор",ТекСтрока.Контрагент);
		
		
		СтрокиКонтрагенты = тзКонтрагентыОтправители.НайтиСтроки(Отбор);
		
		
		Если СтрокиКонтрагенты.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекСтрока.КонтрагентИмя = СтрокиКонтрагенты[0].Контрагент;
		
	КонецЦикла;
	
	
	Если ТолькоДанныеКонтрагентов = ЛОЖЬ Тогда
		
		
		
		
		
		
		
		
		
	КонецЕсли;
	
	ЗаполнитьСписки();
	
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ЭтоУспех(ДокументДом)
	success =  ДокументДом.ПолучитьЭлементыПоИмени("success");// = "true"
	
	Возврат success[0].ТекстовоеСодержимое = "true";
КонецФункции

&НаСервере
Процедура ЗаполнитьСписки()
	
	
КонецПроцедуры


    Функция ПолучитьНомерПоследней(запрос,квостр)
	НомерПоследней = 1;
	Всего = 1;
	Ответ=GetXMLResponserNewPost(запрос);
	ОтветФорма=Ответ;
	Чтение=новый ЧтениеXML;
	Чтение.УстановитьСтроку(Ответ);	
	Пока Чтение.Прочитать() Цикл
		Если чтение.Имя="totalCount" and чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента тогда
			чтение.Прочитать();
			Всего=Число(чтение.Значение);			
		КонецЕсли;
	КонецЦикла;;
	НомерПоследней = ?(Всего/квостр - Цел(Всего/квостр) = 0,Цел(Всего/квостр),Цел(Всего/квостр)+1);
	Возврат НомерПоследней;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапроса(знач ИмяМетода, ПараметрыМетода = неопределено)
	
	Текст = "";
	ИмяМетодаВрег = ВРег(СокрЛП(ИмяМетода));
	//////////////////
	//Address
	Если ИмяМетодаВрег = "GETCITIES" тогда
		Текст = ПолучитьЗапрос_getCities(ПараметрыМетода);
	ИначеЕсли ИмяМетодаВрег = "GETCOUNTERPARTIES" тогда
		Текст = ПолучитьЗапрос_getCounterparties(ПараметрыМетода);
	ИначеЕсли ИмяМетодаВрег = "GETCOUNTERPARTYADDRESSES" тогда
		Текст = ПолучитьЗапрос_getCounterpartyAddresses(ПараметрыМетода);
	ИначеЕсли ИмяМетодаВрег = "GETCOUNTERPARTYCONTACTPERSONS" тогда
		Текст = ПолучитьЗапрос_getCounterpartyContactPersons(ПараметрыМетода);
		
		
	КонецЕсли;	
	Возврат Текст;
	
КонецФункции
  
&НаСервереБезКонтекста
Функция ПолучитьЗапрос_getCities(ПараметрыМетода)
	
	ТекстЗапроса = 
	//"
	//|
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|<calledMethod>getCities</calledMethod>
	|<methodProperties/>
	|<modelName>Address</modelName>
	|</file>
	|";
	
	Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Функция ПолучитьОтветДОМ(Адрес,ТекстXML, ответ = "")
	Попытка 
		Попытка
			ХМЛХТТП = ПолучитьCOMОбъект("", "MSXML2.ServerXMLHTTP.6.0");
		Исключение
			ХМЛХТТП = ПолучитьCOMОбъект("", "Microsoft.XMLHTTP");
		КонецПопытки;
		
		ХМЛХТТП.Open("POST", Адрес, Ложь);
		ХМЛХТТП.SetRequestHeader("Content-Type", "text/xml");
		ХМЛХТТП.Send(ТекстXML);
		//	Сообщить(ХМЛХТТП.ResponseText);
		XMLДокумент = Новый ЧтениеXML;
		XMLДокумент.УстановитьСтроку(ХМЛХТТП.ResponseText);
		Ответ = ХМЛХТТП.ResponseText;
		ПостроительДом = Новый ПостроительDOM;
		ДокументДом = ПостроительДом.Прочитать(XMLДокумент);
		XMLДокумент.Закрыть();	
		
		//ДеревоXML = ПрочитатьResponseTextXML(ХМЛХТТП.ResponseText);
		Возврат ДокументДом;
	Исключение 
		Сообщить(ОписаниеОшибки());
		Ответтекст = GetXMLResponserNewPost(ТекстXML);
		XMLДокумент = Новый ЧтениеXML;
		XMLДокумент.УстановитьСтроку(Ответтекст);
		ПостроительДом = Новый ПостроительDOM;
		ДокументДом = ПостроительДом.Прочитать(XMLДокумент);
		XMLДокумент.Закрыть();	
		Возврат ДокументДом;
		
		//Возврат Неопределено
	КонецПопытки;
КонецФункции

  Функция GetXMLResponserNewPost(запрос) экспорт
	
	запрос=СтрЗаменить(запрос,"[ВАШ КЛЮЧ]",ОбменНПСлужебный.ПолучитьКлючAPI());
	url= "api.novaposhta.ua/v2.0/xml/";
	//хтппсоед=новый HTTPСоединение(url,,,,,,new ЗащищенноеСоединениеOpenSSL);
	хтппсоед = Новый HTTPСоединение(url,,,,,,);
	
	хтппзапрос = Новый HTTPЗапрос(url);
	хтппзапрос.УстановитьТелоИзСтроки(запрос);
	хтппзапрос.Заголовки.Вставить("Content-Type", "text/xml");
	тело = запрос;
	
	ответ = хтппсоед.ОтправитьДляОбработки(хтппзапрос);
	ОтветСтрока = ответ.ПолучитьТелоКакСтроку();
	//ОтветСерв=сокрлп(ТекущаяДата())+Символы.ПС+ОтветСтрока;
	//Если Объект.Отладка Тогда
	//	сообщить("Запрос:"+Символы.ПС+запрос+Символы.ПС+" ответ: "+ОтветСтрока);
	//	ЗапросЛог = запрос;
	//	ОтветЛог = ОтветСтрока;
	//КонецЕсли;;
	
	Возврат ОтветСтрока;
	
КонецФункции
&НаСервереБезКонтекста
Функция ПолучитьЗапрос_getCounterparties(ПараметрыМетода)
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|	<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|	<calledMethod>getCounterparties</calledMethod>
	|	<methodProperties>
	|	<CounterpartyProperty>"+"Sender"+"</CounterpartyProperty>
	|	<Page>"+ПараметрыМетода.Страница+"</Page>
	|	</methodProperties>
	|	<modelName>Counterparty</modelName>
	|</file>";
	
	Возврат ТекстЗапроса;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗапрос_getCounterpartyAddresses(ПараметрыМетода)
	
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|	<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|	<calledMethod>getCounterpartyAddresses</calledMethod>
	|	<methodProperties>
	|	<CounterpartyProperty>"+ПараметрыМетода.Тип+"</CounterpartyProperty> 
	|	<Ref>"+ПараметрыМетода.Контрагент+"</Ref>
	|	<Page>"+ПараметрыМетода.Страница+"</Page>
	|	</methodProperties>
	|	<modelName>Counterparty</modelName>
	|</file>";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗапрос_getCounterpartyContactPersons(ПараметрыМетода)
	
	ТекстЗапроса = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<file>
	|	<apiKey>"+ПараметрыМетода.КлючАПИ+"</apiKey>
	|	<calledMethod>getCounterpartyContactPersons</calledMethod>
	|	<methodProperties>
	|	<Ref>"+ПараметрыМетода.Контрагент+"</Ref>
	|	<Page>"+ПараметрыМетода.Страница+"</Page>
	|	</methodProperties>
	|	<modelName>Counterparty</modelName>
	|</file>";
	
	Возврат ТекстЗапроса;
	
КонецФункции


&НаСервере
Функция Обработать_getCounterparties(ЭлементДом,Результат, Владелец, Параметры)
	СтруктураПараметров = Новый структура;
	
	Пока не ЭлементДом = неопределено цикл
		Если не СтруктураПараметров.Свойство(ЭлементДом.ИмяУзла)  тогда
			СтруктураПараметров.Вставить(Строка(ЭлементДом.ИмяУзла),ЭлементДом.ТекстовоеСодержимое);
		Иначе
			Текст = "Ошибка getCounterparties";
			ВызватьИсключение Текст;
		КонецЕсли;	 
		ЭлементДом = ЭлементДом.СледующийСоседний; 
	КонецЦикла;
	СтруктураПараметров.Вставить("Владелец",Владелец);
	Если Параметры.Тип = "Sender" Тогда
		Строка = тзКонтрагентыОтправители.Добавить();
		Строка.Идентификатор 		= СтруктураПараметров.Ref;
		Строка.Контрагент 			= СтруктураПараметров.Description;
		Строка.Город 				= СтруктураПараметров.City;
		Строка.ГородИмя 			= СтруктураПараметров.CityDescription;
		Строка.Фамилия				= СтруктураПараметров.LastName;
		Строка.Имя 					= СтруктураПараметров.FirstName;
		Строка.Отчество 			 = СтруктураПараметров.MiddleName;
		Строка.ФормаСобственностиRef = СтруктураПараметров.OwnershipFormRef;
		Строка.ФормаСобственности 	 = СтруктураПараметров.OwnershipFormDescription;
		Строка.ЕДРПОУ 				 = СтруктураПараметров.EDRPOU;
		Строка.ТипКонтрагента		 = СтруктураПараметров.CounterpartyType;	 
	КонецЕсли;

	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПроцедуруПоМетоду(ИмяМетода)
	Текст = "";
	ИмяМетода = ВРег(СокрЛП(ИмяМетода));
	
	Если ИмяМетода = "GETCITIES" тогда
		Текст = "Обработать_getCities";
	ИначеЕсли ИмяМетода = "GETSTREET" тогда
		Текст = "Обработать_getStreet";
	ИначеЕсли ИмяМетода = "GETWAREHOUSES" тогда
		Текст = "Обработать_getWarehouses";		
	ИначеЕсли ИмяМетода = "GETWAREHOUSETYPES" тогда
		Текст = "Обработать_getWarehouseTypes";
	ИначеЕсли ИмяМетода = "GETCOUNTERPARTIES" тогда
		Текст = "Обработать_getCounterparties";
	ИначеЕсли ИмяМетода = "GETCOUNTERPARTYADDRESSES" тогда
		Текст = "Обработать_getCounterpartyAddresses";
	ИначеЕсли ИмяМетода = "GETCOUNTERPARTYCONTACTPERSONS" тогда
		Текст = "Обработать_getCounterpartyContactPersons";
	ИначеЕсли ИмяМетода = "GETTYPESOFPAYERS" тогда
		Текст = "Обработать_Common";		
	ИначеЕсли ИмяМетода = "GETPAYMENTFORMS" тогда
		Текст = "Обработать_Common";		
	ИначеЕсли ИмяМетода = "GETCARGOTYPES" тогда
		Текст = "Обработать_Common";		
	ИначеЕсли ИмяМетода = "GETSERVICETYPES" тогда
		Текст = "Обработать_Common";
	ИначеЕсли ИмяМетода = "GETCARGODESCRIPTIONLIST" тогда
		Текст = "Обработать_Common";//getCargoDescriptionList
	ИначеЕсли ИмяМетода = "GETAREAS" тогда
		Текст = "Обработать_getArea";
	ИначеЕсли ИмяМетода = "GETOWNERSHIPFORMSLIST" тогда
		Текст = "Обработать_Common";//getOwnershipFormsList
	ИначеЕсли ИмяМетода = "GETBACKWARDDELIVERYCARGOTYPES" тогда
		Текст = "Обработать_Common";//getBackwardDeliveryCargoTypes
	ИначеЕсли ИмяМетода = "GETPALLETSLIST" тогда
		Текст = "Обработать_Common";//getPalletsList
	ИначеЕсли ИмяМетода = "GETTYPESOFCOUNTERPARTIES" тогда
		Текст = "Обработать_Common";//getTypesOfCounterparties
	ИначеЕсли ИмяМетода = "GETTYPESOFPAYERSFORREDELIVERY" тогда
		Текст = "Обработать_Common";
	ИначеЕсли ИмяМетода = "GETTIMEINTERVALS" тогда
		Текст = "Обработать_getTimeIntervals";
	ИначеЕсли ИмяМетода = "GETTIRESWHEELSLIST" тогда
		Текст = "Обработать_Common";
	ИначеЕсли ИмяМетода = "GETTRAYSLIST" тогда
		Текст = "Обработать_Common"; //getTraysList
	ИначеЕсли ИмяМетода = "GETDOCUMENTSTATUSES" тогда
		Текст = "Обработать_getDocumentStatuses";
	ИначеЕсли ИмяМетода = "GETCOUNTERPARTYOPTIONS" тогда
		Текст = "Обработать_getCounterpartyOptions";			
	ИначеЕсли ИмяМетода = "SAVECOUNTERPARTY" тогда
		Текст = "Обработать_SaveCounterparty";		
	ИначеЕсли ИмяМетода = "SAVECONTACTPERSON" тогда
		Текст = "Обработать_SaveContactPerson";	
	ИначеЕсли ИмяМетода = "SAVEINTERNETDOCUMENT" тогда
		Текст = "Обработать_SaveInternetDocument";	
	ИначеЕсли ИмяМетода = "INSERTDOCUMENTSSCANSHEET" тогда
		Текст = "Обработать_insertDocumentsScanSheet";
	ИначеЕсли ИмяМетода = "REMOVEDOCUMENTS" тогда
		Текст = "Обработать_removeDocuments";
	ИначеЕсли ИмяМетода = "DELETESCANSHEET" тогда
		Текст = "Обработать_deleteScanSheet";
	ИначеЕсли ИмяМетода = "DELETEDOC" тогда
		Текст = "Обработать_deleteDoc";
	ИначеЕсли ИмяМетода = "GETSTATUSDOCUMENTS" тогда
		Текст = "Обработать_getStatusDocuments";
	ИначеЕсли ИмяМетода = "GETMESSAGECODETEXT" тогда
		Текст = "Обработать_getMessageCodeText";
	КонецЕсли;	
	
	Возврат Текст
КонецФункции	

&НаКлиенте
Процедура Записать(Команда)
	ЗаписатьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
Контрагент = "";
КонтактноеЛицо = "";	
НомерТелефона = "";	
Город = Справочники.ГородаДоставки.ПустаяСсылка();	
Улица = Справочники.Улицы.ПустаяСсылка();	
НомерДома = 0;	
ВыборкаАдрес = "";	
ВыборкаОтделение = "";	
ОтправкаИзМагазина = Истина;	
АдресFTP = "";	
ПортFTP = 0;	
АдресFTP = "";	
ПортFTP = "";	
ЛогинFTP = "";	
ПарольFTP = "";	
АдресДляПечатиPDF = "";	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСлужбДоставки.Адрес КАК Адрес,
		|	НастройкиСлужбДоставки.Отделение КАК Отделение,
		|	НастройкиСлужбДоставки.АдресFTP КАК АдресFTP,
		|	НастройкиСлужбДоставки.ПортFTP КАК ПортFTP,
		|	НастройкиСлужбДоставки.ЛогинFTP КАК ЛогинFTP,
		|	НастройкиСлужбДоставки.ПарольFTP КАК ПарольFTP,
		|	НастройкиСлужбДоставки.АдресДляПечатиPDF КАК АдресДляПечатиPDF,
		|	НастройкиСлужбДоставки.Город КАК Город
		|ИЗ
		|	РегистрСведений.НастройкиСлужбДоставки КАК НастройкиСлужбДоставки
		|ГДЕ
		|	НастройкиСлужбДоставки.Магазин = &Магазин
		|	И НастройкиСлужбДоставки.ОператорДоставки = &ОператорДоставки";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ОператорДоставки", Перечисления.ОператорыДоставки.НоваяПочта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВыборкаАдрес = ВыборкаДетальныеЗаписи.Адрес;
		ВыборкаОтделение = ВыборкаДетальныеЗаписи.Отделение;
		АдресFTP = ВыборкаДетальныеЗаписи.АдресFTP;
		ПортFTP = ВыборкаДетальныеЗаписи.ПортFTP;
		ЛогинFTP = ВыборкаДетальныеЗаписи.ЛогинFTP;
		ПарольFTP = ВыборкаДетальныеЗаписи.ПарольFTP;
		АдресДляПечатиPDF = ВыборкаДетальныеЗаписи.АдресДляПечатиPDF;   
		//Город = ВыборкаДетальныеЗаписи.АдресДляПечатиPDF; 
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	НаборЗаписей = РегистрыСведений.НастройкиСлужбДоставки.СоздатьНаборЗаписей(); 

	НаборЗаписей.Отбор.Магазин.Установить(Магазин);
	НаборЗаписей.Отбор.ОператорДоставки.Установить(Перечисления.ОператорыДоставки.НоваяПочта); 

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Магазин = Магазин;
	НоваяЗапись.ОператорДоставки = Перечисления.ОператорыДоставки.НоваяПочта;
	НоваяЗапись.КонтактноеЛицо = ContactSender;
	НоваяЗапись.НомерТелефона = SendersPhone;
	НоваяЗапись.Контрагент = Sender;
	Если ОтправкаИзОтделения тогда
		НоваяЗапись.Отделение = Отделение.Идентификатор;
		НоваяЗапись.Адрес = ВыборкаАдрес;
	Иначе	
		НоваяЗапись.Отделение = ВыборкаОтделение;
		НоваяЗапись.Адрес = SenderAddress;
	КонецЕсли; 
		НоваяЗапись.Магазин = Магазин;
		НоваяЗапись.ОператорДоставки =  Перечисления.ОператорыДоставки.НоваяПочта;
		НоваяЗапись.АдресFTP = АдресFTP;
		НоваяЗапись.ПортFTP = ПортFTP;   
		НоваяЗапись.ЛогинFTP = ЛогинFTP;   
		НоваяЗапись.ПарольFTP = ПарольFTP;   
		НоваяЗапись.АдресДляПечатиPDF = АдресДляПечатиPDF;  
		НоваяЗапись.Город = CitySender;  
		
	НаборЗаписей.Записать();	
КонецПроцедуры
