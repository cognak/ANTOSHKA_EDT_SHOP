&НаКлиенте
Перем СтрокаЗапроса;
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Период.Вариант = ВариантСтандартногоПериода.Сегодня;
	
	Элементы.ТекущаяДата.Заголовок = Формат(ТекущаяДатаСеанса(), "ДЛФ=DD");
	Элементы.ДеньНедели.Заголовок = "(" + Формат(ТекущаяДатаСеанса(), "ДФ=дддд") + ")";

//	LNK 03.05.2017 08:46:45
	Если Магазин.Пустая() И НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Магазин = ПараметрыСеанса.ТекущийМагазин;

	КонецЕсли;  
	
	ЗаполнитьТЗСтатусовЗапросаДоступности();

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ЗаполненыДанныеИзНастроек = Истина;
	
	ЗаполнитьДеревоРаспоряжений();
	
	Если ЗначениеЗаполнено(Период) Тогда
		ПриказыНаИнвентаризацию.Параметры.УстановитьЗначениеПараметра("ДатаНачала", Период.ДатаНачала);
		ПриказыНаИнвентаризацию.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", Период.ДатаОкончания);
	Иначе
		ПриказыНаИнвентаризацию.Параметры.УстановитьЗначениеПараметра("ДатаНачала", Дата("00010101"));
		ПриказыНаИнвентаризацию.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", Дата("39990101"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// ПодключаемоеОборудование
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "";

		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:
			                      |""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	УстановитьДоступностьСклада();
	
	Если НЕ ЗаполненыДанныеИзНастроек Тогда
		
		ЗаполнитьДеревоРаспоряжений();
		УстановитьПараметрыСпискаПриказов();
		
	КонецЕсли;
	
	УстановитьВсеОтборыДинамическогоСписка(); 
	//РегистрацияАктивностиПользователя(0,,"#Начало работы");//1	
	ПодключитьОбработчикОжидания("ОбновитьДанные", 60);
	
КонецПроцедуры



//	LNK 03.05.2017 10:22:11
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// + Бакан 25.05.2023
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
				ДокСсылка = НайтиДокумент(ТекКод);
				Если ЗначениеЗаполнено(ДокСсылка) тогда 
					ОткрытьЗначение(ДокСсылка);
				Иначе
					Сообщить("Ошибка! Документ в базе не найден!");
				КонецЕсли;				
			Иначе
				ТекКод = Параметр[1][1];
				ДокСсылка = НайтиДокумент(ТекКод);
				Если ЗначениеЗаполнено(ДокСсылка) тогда 
					ОткрытьЗначение(ДокСсылка);
				Иначе
					Сообщить("Ошибка! Документ в базе не найден!");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
    ИНАЧЕ
		Если ИмяСобытия = "ПользовательИзменилТекущуюОрганизацию" Тогда

			Если НЕ Магазин = Параметр.Магазин Тогда

				Магазин = Параметр.Магазин;
				Склад   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "СкладПоступления");
				МагазинПриИзменении(Неопределено);

			КонецЕсли;

		КонецЕсли;
	КонецЕсли;	
	//Если ИмяСобытия = "ПользовательИзменилТекущуюОрганизацию" Тогда

	//	Если НЕ Магазин = Параметр.Магазин Тогда

	//		Магазин = Параметр.Магазин;
	//		Склад   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "СкладПоступления");
	//		МагазинПриИзменении(Неопределено);

	//	КонецЕсли;

	//КонецЕсли;
	// - Бакан 25.05.2023
КонецПроцедуры


&НаСервере
Функция  НайтиДокумент(ТекКод)
	ДокСсылка = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Штрихкоды.Владелец КАК Владелец
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", ТекКод);
	
	РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДокСсылка=ВыборкаДетальныеЗаписи.Владелец;
		КонецЦикла;
Возврат ДокСсылка;	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	УстановитьДоступностьСклада();
	
	ЗаполнитьДеревоРаспоряжений();
	РазвернутьСтрокиДерева();
	
	УстановитьВсеОтборыДинамическогоСписка();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначениеСвойства(Переменная, Свойство)
	Если Переменная<>Неопределено 
		И ТипЗнч(Переменная)<>Тип("Null")
		И ТипЗнч(Переменная)<>Тип("Строка")
		И ТипЗнч(Переменная)<>Тип("Число")
		И ТипЗнч(Переменная)<>Тип("Дата")
		И ТипЗнч(Переменная)<>Тип("Булево")
		И ТипЗнч(Переменная)<>Тип("ДекорацияФормы")
		Тогда
		Стр = Новый Структура(Свойство, Неопределено);
		ЗаполнитьЗначенияСвойств(Стр, Переменная);
		Возврат Стр[Свойство];
	КонецЕсли;
	Возврат Неопределено;
КонецФункции
                  
&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ЗаполнитьДеревоРаспоряжений();
	РазвернутьСтрокиДерева();
	
	УстановитьОтборДинамическогоСписка("Склад");
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "ТОВАРЫ"

&НаКлиенте
Процедура РаспоряженияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Распоряжения.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Если НЕ ТипЗнч(ТекущиеДанные.Распоряжение) = Тип("Строка") Тогда
			//ОткрытьЗначение(ТекущиеДанные.Распоряжение);
			ПоказатьЗначение(,ТекущиеДанные.Распоряжение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьДеревоРаспоряжений();
	
	РазвернутьСтрокиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПриказы(Команда)
	
	Элементы.ПриказыНаИнвентаризацию.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТоварыКПриемке(Команда)
	
	ОткрытьФорму("Отчет.ТоварыКПриемке.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТоварыКОтгрузке(Команда)
	
	ОткрытьФорму("Отчет.ТоварыКОтгрузке.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОформлениеИзлишковНедостач(Команда)
	
	ОткрытьФорму("Отчет.ОформлениеИзлишковНедостачТоваров.Форма");
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура УстановитьДоступностьСклада()

	Элементы.Склад.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Магазин);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРаспоряжений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Ссылка КАК Склад
		|ПОМЕСТИТЬ СкладыМагазина
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Магазин = &Магазин
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТоварыКПоступлениюОбороты.ДокументОснование КАК ДокументРаспоряжение,
		|	ТоварыКПоступлениюОбороты.Период КАК Дата
		|ПОМЕСТИТЬ Распоряжения
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			ВЫБОР
		|					КОГДА &ОтборПоСкладу
		|						ТОГДА Склад = &Склад
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &ОтборПоМагазину
		|						ТОГДА Склад В
		|								(ВЫБРАТЬ
		|									СкладыМагазина.Склад
		|								ИЗ
		|									СкладыМагазина КАК СкладыМагазина)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ) КАК ТоварыКПоступлениюОбороты
		|ГДЕ
		|	НЕ ТоварыКПоступлениюОбороты.Регистратор ССЫЛКА Документ.ПриходныйОрдерНаТовары
		|	И ВЫБОР
		|			КОГДА &ОтборПоМагазину
		|				ТОГДА ЕСТЬNULL(ТоварыКПоступлениюОбороты.ДокументОснование.Магазин, ТоварыКПоступлениюОбороты.ДокументОснование.МагазинПолучатель) = &Магазин
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказПоставщику.Ссылка,
		|	ЗаказПоставщику.ДатаПоступления
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.Проведен
		|	И (ЗаказПоставщику.Бессрочный
		|			ИЛИ НЕ ЗаказПоставщику.ДнейПросрочкиПоставки = 0)
		|	И ВЫБОР
		|			КОГДА НЕ ЗаказПоставщику.Бессрочный
		|				ТОГДА ЗаказПоставщику.ДатаПоступления МЕЖДУ &НачалоПериода И &КонецПериода
		|						ИЛИ ДОБАВИТЬКДАТЕ(ЗаказПоставщику.ДатаПоступления, ДЕНЬ, ЗаказПоставщику.ДнейПросрочкиПоставки) МЕЖДУ &НачалоПериода И &КонецПериода
		|						ИЛИ ЗаказПоставщику.ДатаПоступления <= &НачалоПериода
		|							И ДОБАВИТЬКДАТЕ(ЗаказПоставщику.ДатаПоступления, ДЕНЬ, ЗаказПоставщику.ДнейПросрочкиПоставки) >= &КонецПериода
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ОтборПоСкладу
		|				ТОГДА ЗаказПоставщику.Склад = &Склад
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ОтборПоМагазину
		|				ТОГДА ЗаказПоставщику.Магазин = &Магазин
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументРаспоряжение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Распоряжения.Дата КАК Дата,
		|	ТоварыКПоступлениюОстаткиИОбороты.ДокументОснование КАК Распоряжение,
		|	ЕСТЬNULL(ТоварыКПоступлениюОстаткиИОбороты.ДокументОснование.Контрагент, ТоварыКПоступлениюОстаткиИОбороты.ДокументОснование.МагазинОтправитель) КАК Поставщик,
		|	ТоварыКПоступлениюОстаткиИОбороты.Номенклатура КАК Номенклатура,
		|	ТоварыКПоступлениюОстаткиИОбороты.Характеристика КАК Характеристика,
		|	ТоварыКПоступлениюОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
		|	ТоварыКПоступлениюОстаткиИОбороты.КоличествоПриход КАК КоличествоПриход
		|ПОМЕСТИТЬ Результат
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.ОстаткиИОбороты(
		|			,
		|			,
		|			,
		|			,
		|			ДокументОснование В
		|				(ВЫБРАТЬ
		|					Распоряжения.ДокументРаспоряжение
		|				ИЗ
		|					Распоряжения КАК Распоряжения)) КАК ТоварыКПоступлениюОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Распоряжения КАК Распоряжения
		|		ПО ТоварыКПоступлениюОстаткиИОбороты.ДокументОснование = Распоряжения.ДокументРаспоряжение
		|ГДЕ
		|	ТоварыКПоступлениюОстаткиИОбороты.КоличествоКонечныйОстаток > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	Поставщик,
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТоварыКОтгрузкеОбороты.ДокументОснование КАК ДокументРаспоряжение,
		|	ТоварыКОтгрузкеОбороты.Период КАК Дата
		|ПОМЕСТИТЬ РаспоряженияОтгрузка
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			ВЫБОР
		|					КОГДА &ОтборПоСкладу
		|						ТОГДА Склад = &Склад
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &ОтборПоМагазину
		|						ТОГДА Склад В
		|								(ВЫБРАТЬ
		|									СкладыМагазина.Склад
		|								ИЗ
		|									СкладыМагазина КАК СкладыМагазина)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ) КАК ТоварыКОтгрузкеОбороты
		|ГДЕ
		|	НЕ ТоварыКОтгрузкеОбороты.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
		|	И ВЫБОР
		|			КОГДА &ОтборПоМагазину
		|				ТОГДА ЕСТЬNULL(ТоварыКОтгрузкеОбороты.ДокументОснование.Магазин, ТоварыКОтгрузкеОбороты.ДокументОснование.МагазинОтправитель) = &Магазин
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументРаспоряжение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаспоряженияОтгрузка.Дата КАК Дата,
		|	ТоварыКОтгрузкеОстаткиИОбороты.ДокументОснование КАК Распоряжение,
		|	ЕСТЬNULL(ТоварыКОтгрузкеОстаткиИОбороты.ДокументОснование.Контрагент, ТоварыКОтгрузкеОстаткиИОбороты.ДокументОснование.МагазинПолучатель) КАК Получатель,
		|	ТоварыКОтгрузкеОстаткиИОбороты.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузкеОстаткиИОбороты.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузкеОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
		|	ТоварыКОтгрузкеОстаткиИОбороты.КоличествоПриход КАК КоличествоПриход
		|ПОМЕСТИТЬ Результат1
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(
		|			,
		|			,
		|			,
		|			,
		|			ДокументОснование В
		|				(ВЫБРАТЬ
		|					РаспоряженияОтгрузка.ДокументРаспоряжение
		|				ИЗ
		|					РаспоряженияОтгрузка КАК РаспоряженияОтгрузка)) КАК ТоварыКОтгрузкеОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РаспоряженияОтгрузка КАК РаспоряженияОтгрузка
		|		ПО ТоварыКОтгрузкеОстаткиИОбороты.ДокументОснование = РаспоряженияОтгрузка.ДокументРаспоряжение
		|ГДЕ
		|	ТоварыКОтгрузкеОстаткиИОбороты.КоличествоКонечныйОстаток > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	Получатель,
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Результат.Дата КАК Дата,
		|	Результат.Распоряжение КАК Распоряжение,
		|	Результат.Поставщик КАК Поставщик
		|ИЗ
		|	Результат КАК Результат
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Результат1.Дата КАК Дата,
		|	Результат1.Распоряжение КАК Распоряжение,
		|	Результат1.Получатель КАК Получатель
		|ИЗ
		|	Результат1 КАК Результат1
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	Запрос.УстановитьПараметр("НачалоПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода",  Период.ДатаОкончания);

	Запрос.УстановитьПараметр("ОтборПоМагазину", ЗначениеЗаполнено(Магазин));
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	Запрос.УстановитьПараметр("ОтборПоСкладу", ЗначениеЗаполнено(Склад));
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаПриемка = Результат[5].Выбрать();
	ВыборкаОтгрузка = Результат[6].Выбрать();
	
	Дерево = РеквизитФормыВЗначение("Распоряжения");
	Дерево.Строки.Очистить();
	
	СтрокаПриемка = Дерево.Строки.Добавить();
	СтрокаПриемка.Распоряжение = НСтр("ru = 'Приемка ('") + Строка(ВыборкаПриемка.Количество()) + ")";
	
	Если ВыборкаПриемка.Количество() = 0 Тогда
		Строка = СтрокаПриемка.Строки.Добавить();
		Строка.Распоряжение = НСтр("ru = '<нет распоряжений>'");
	Иначе
		Пока ВыборкаПриемка.Следующий() Цикл
			Строка = СтрокаПриемка.Строки.Добавить();
			Строка.Распоряжение = ВыборкаПриемка.Распоряжение;
		КонецЦикла;
	КонецЕсли;
	
	СтрокаОтгрузка = Дерево.Строки.Добавить();
	СтрокаОтгрузка.Распоряжение = НСтр("ru = 'Отгрузка ('") + Строка(ВыборкаОтгрузка.Количество()) + ")";
	
	Если ВыборкаОтгрузка.Количество() = 0 Тогда
		Строка = СтрокаОтгрузка.Строки.Добавить();
		Строка.Распоряжение = НСтр("ru = '<нет распоряжений>'");;
	Иначе
		Пока ВыборкаОтгрузка.Следующий() Цикл
			Строка = СтрокаОтгрузка.Строки.Добавить();
			Строка.Распоряжение = ВыборкаОтгрузка.Распоряжение;
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево, "Распоряжения");
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиДерева()
	
	Строки = Распоряжения.ПолучитьЭлементы();
	
	Для Каждого Строка Из Строки Цикл
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Элементы.Распоряжения.Развернуть(ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВсеОтборыДинамическогоСписка()
	
	УстановитьОтборДинамическогоСписка("Магазин");
	УстановитьОтборДинамическогоСписка("Склад");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическогоСписка(ИмяРеквизита)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		ПриказыНаИнвентаризацию,
		ИмяРеквизита,
		ЭтотОбъект[ИмяРеквизита],
		ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]));
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыСпискаПриказов()
	
	Если ЗначениеЗаполнено(Период) Тогда
		ПриказыНаИнвентаризацию.Параметры.УстановитьЗначениеПараметра("ДатаНачала", Период.ДатаНачала);
		ПриказыНаИнвентаризацию.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", Период.ДатаОкончания);
	Иначе
		ПриказыНаИнвентаризацию.Параметры.УстановитьЗначениеПараметра("ДатаНачала", Дата("00010101"));
		ПриказыНаИнвентаризацию.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", Дата("39990101"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусыЗапросовДоступностиПриАктивизацииСтроки(Элемент)

	Если Не Элементы.СтатусыЗапросовДоступности.ТекущиеДанные = Неопределено Тогда
		СтатусЗапроса = Элементы.СтатусыЗапросовДоступности.ТекущиеДанные.СтатусЗапросаПеречисление;
	Иначе
		СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПустаяСсылка");
	КонецЕсли;
	
	СтрокаЗапроса = СтатусЗапроса;
	
	ЗапросыДоступности.Параметры.УстановитьЗначениеПараметра("СтатусЗапроса", СтатусЗапроса);
	ЗапросыДоступности.Параметры.УстановитьЗначениеПараметра("НомерЗаказа", "%" + НомерЗаказа + "%");
	ЗапросыДоступности.Параметры.УстановитьЗначениеПараметра("ВсеЗаказы", ПустаяСтрока(НомерЗаказа));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЗСтатусовЗапросаДоступности()  
	
	СтатусыЗапросовДоступности.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗапросДоступностиТоваров.Ссылка,
		|	ЗапросДоступностиТоваров.СтатусЗапроса,
		|	ЗапросДоступностиТоваров.ДокументОснование,
		|	ЗапросДоступностиТоваров.Номер
		|ПОМЕСТИТЬ ЗапросыДоступности
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров КАК ЗапросДоступностиТоваров
		|ГДЕ
		|	ЗапросДоступностиТоваров.МагазинОтправитель = &Магазин
		|	И (ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Новый)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Изменён)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Согласован)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Сборка)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.КОтправке)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Выдан)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отправлен)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Получен)
		|	ИЛИ
		|		ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтмену)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отменён)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Закрыт))
		|	ИЛИ ЗапросДоступностиТоваров.МагазинПолучатель = &Магазин
		|	И (ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отправлен)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Получен)
		|	ИЛИ
		|		ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПродажаБезнал)
		|	ИЛИ
		|		ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПродажаНаКассе)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отменён)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Закрыт))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗапросыДоступности.Ссылка КАК Ссылка,
		|	ЗапросыДоступности.СтатусЗапроса КАК СтатусЗапроса,
		|	ЗапросыДоступности.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ЗаказыСтатус
		|ИЗ
		|	ЗапросыДоступности КАК ЗапросыДоступности
		|ГДЕ
		|	(ЗапросыДоступности.Номер ПОДОБНО &НомерЗаказа
		|	ИЛИ &ВсеЗапросы)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗапросыДоступности.Ссылка,
		|	ЗапросыДоступности.СтатусЗапроса,
		|	ЗапросыДоступности.ДокументОснование
		|ИЗ
		|	ЗапросыДоступности КАК ЗапросыДоступности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяНакладная КАК ЭлектроннаяНакладная
		|		ПО ЗапросыДоступности.Ссылка = ЭлектроннаяНакладная.ДокументОснование
		|		И НЕ ЭлектроннаяНакладная.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Отменена)
		|ГДЕ
		|	(ЭлектроннаяНакладная.Номер ПОДОБНО &НомерЗаказа
		|	ИЛИ &ВсеЗапросы)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗапросыДоступности.Ссылка,
		|	ЗапросыДоступности.СтатусЗапроса,
		|	ЗапросыДоступности.ДокументОснование
		|ИЗ
		|	ЗапросыДоступности КАК ЗапросыДоступности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|			ПО (КонтрагентыКонтактнаяИнформация.Ссылка = ЗаказПокупателя.Контрагент)
		|			И (КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		|		ПО ЗапросыДоступности.ДокументОснование = ЗаказПокупателя.Ссылка
		|ГДЕ
		|	(КонтрагентыКонтактнаяИнформация.НомерТелефона ПОДОБНО &НомерЗаказа
		|	ИЛИ &ВсеЗапросы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.СтатусЗапроса КАК СтатусЗапроса,
		|	СУММА(ВложенныйЗапрос.КоличествоСообщений) КАК КоличествоСообщений
		|ПОМЕСТИТЬ НепрочитанныеСообщения
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ЗаказыСтатус.СтатусЗапроса КАК СтатусЗапроса,
		|		КОЛИЧЕСТВО(ЗаказыСтатус.Ссылка) КАК КоличествоСообщений
		|	ИЗ
		|		ЗаказыСтатус КАК ЗаказыСтатус
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КомментарийПоСтрокам КАК КомментарийПоСтрокам
		|			ПО ЗаказыСтатус.Ссылка = КомментарийПоСтрокам.Документ
		|			И (НЕ КомментарийПоСтрокам.Просмотрен)
		|	СГРУППИРОВАТЬ ПО
		|		ЗаказыСтатус.СтатусЗапроса
		|
		|	ОБЪЕДИНИТЬ
		|
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ЗаказыСтатус.СтатусЗапроса,
		|		КОЛИЧЕСТВО(ЗаказыСтатус.Ссылка)
		|	ИЗ
		|		ЗаказыСтатус КАК ЗаказыСтатус
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КомментарийПоСтрокам КАК КомментарийПоСтрокам
		|			ПО ЗаказыСтатус.ДокументОснование = КомментарийПоСтрокам.Документ
		|			И (НЕ КомментарийПоСтрокам.Просмотрен)
		|	СГРУППИРОВАТЬ ПО
		|		ЗаказыСтатус.СтатусЗапроса) КАК ВложенныйЗапрос
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.СтатусЗапроса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КОЛИЧЕСТВО(ЗаказыСтатус.Ссылка) КАК Количество,
		|	ЗаказыСтатус.СтатусЗапроса КАК СтатусЗапроса,
		|	ЕСТЬNULL(НепрочитанныеСообщения.КоличествоСообщений, 0) КАК КоличествоСообщений
		|ИЗ
		|	ЗаказыСтатус КАК ЗаказыСтатус
		|		ЛЕВОЕ СОЕДИНЕНИЕ НепрочитанныеСообщения КАК НепрочитанныеСообщения
		|		ПО (ЗаказыСтатус.СтатусЗапроса = НепрочитанныеСообщения.СтатусЗапроса)
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыСтатус.СтатусЗапроса,
		|	ЕСТЬNULL(НепрочитанныеСообщения.КоличествоСообщений, 0)";
	
	Запрос.УстановитьПараметр("НомерЗаказа", "%" + СокрЛП(НомерЗаказа) + "%");
	Запрос.УстановитьПараметр("ВсеЗапросы", ПустаяСтрока(НомерЗаказа));
	Запрос.УстановитьПараметр("Магазин", ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);
	
	ТЗСтатусы = Запрос.Выполнить().Выгрузить();
	
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Новый);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Изменён);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе);
	//ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ЧастичноСогласован);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Согласован);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Сборка);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.КОтправке);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Выдан);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ВыданДоставке);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Отправлен);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Получен);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПродажаБезнал);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПродажаНаКассе);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтмену);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Отменён);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Закрыт);

КонецПроцедуры

&НаКлиенте
Процедура НомерЗаказаПриИзменении(Элемент)

	ЗаполнитьТЗСтатусовЗапросаДоступности(); 

КонецПроцедуры
 

&НаСервере
Процедура ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусов, Статус)
	
	СтрокаТЗСтатусов = ТЗСтатусов.Найти(Статус,"СтатусЗапроса");
	
	Если Не СтрокаТЗСтатусов = Неопределено Тогда

		НоваяСтрока = СтатусыЗапросовДоступности.Добавить();
		НоваяСтрока.СтатусЗапроса = Строка(Статус);
		НоваяСтрока.СтатусЗапросаПеречисление = Статус;
		НоваяСтрока.Количество = СтрокаТЗСтатусов.Количество;
		НоваяСтрока.Сообщения = СтрокаТЗСтатусов.КоличествоСообщений;
		
	КонецЕсли;

КонецПроцедуры 


&НаКлиенте
Процедура ОбновитьДанные()
	ЗаполнитьТЗСтатусовЗапросаДоступности(); 
	ПроверитьАктивностьПользовател();
КонецПроцедуры

 // Активность пользователя
&НаКлиенте
Функция РегистрацияАктивностиПользователя(Хеш,Ссылка=Неопределено,Комментарий = "")  
	ТекДата = ТекущаяДата();
	ЗавершитьСеанс = Ложь;

		Простой = 0;
	Если ЗначениеЗаполнено(ВремяАктивностиПользователей) тогда 
		Если НачалоДня(ТекДата)=НачалоДня(ВремяАктивностиПользователей) Тогда
			Простой = ТекДата-ВремяАктивностиПользователей; // в секундах	
		КонецЕсли;
		ВремяЗавершенияРаботыПриБездействии = ПолучитьЗначениеКонстанты("ВремяЗавершенияРаботыПриБездействии");	
		Если ВремяЗавершенияРаботыПриБездействии = 0 тогда 
			ВремяЗавершенияРаботыПриБездействии = 3600;	
		КонецЕсли;
		// Проверяем простой
		Если Простой > ВремяЗавершенияРаботыПриБездействии	Тогда
			ЗавершитьСеанс=Истина;
		КонецЕсли;
		Если Хеш = ХэшАктивностиПользователей Тогда
				// Активности не было...
			Возврат ЗавершитьСеанс;  
		Иначе
			ВремяАктивностиПользователе = ТекДата;
			АктивностьПользователейСервер.СделатьЗаписьВРС(Хеш,ТекДата,Ссылка,Комментарий);
		КонецЕсли; 
	Иначе
		ВремяАктивностиПользователей = ТекущаяДата();
		АктивностьПользователейСервер.СделатьЗаписьВРС(Хеш,ТекДата,Ссылка,Комментарий);
		ХэшАктивностиПользователей = Хеш;	
	КонецЕсли;
	
	Возврат ЗавершитьСеанс;
КонецФункции	

&НаСервере
Функция ПолучитьЗначениеКонстанты(ИмяКонстанты)
	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты(ИмяКонстанты)
КонецФункции


&НаКлиенте
Процедура ПроверитьАктивностьПользовател()  
	Окна = ПолучитьОкна();
	ТекстСообщения = "";
	Ссылка = Неопределено;
	АктивнаяФорма = "";
	Для Каждого ТекОкно Из Окна Цикл
		ТекстСообщения = ТекстСообщения + "["+ТекОкно.Заголовок+"] ";
		Формы = ТекОкно.Содержимое;
		Для Каждого Ф Из Формы Цикл
			Если Ф.ВводДоступен() Тогда
				// Это активная форма
				Ссылка = ПолучитьЗначениеСвойства(ПолучитьЗначениеСвойства(Ф,"Объект"),"Ссылка");//3
				Активность="!";
				АктивнаяФорма = Ф.Заголовок;
			Иначе
				Активность="";
			КонецЕсли;	
			ТекстСообщения = ТекстСообщения 
			+ "("+Ф.Заголовок+": "+ПолучитьЗначениеСвойства(Ф.ТекущийЭлемент,"Имя")+Активность+")";
		КонецЦикла;
	КонецЦикла;
	ЗавершитьСеанс = РегистрацияАктивностиПользователя(ПолучитьХэш(ТекстСообщения),Ссылка,АктивнаяФорма); //4
	Если ЗавершитьСеанс Тогда // 5
		ЗавершитьРаботуСистемы(Истина);
	КонецЕсли;
КонецПроцедуры            

&НаКлиенте
Функция ПолучитьХэш(СтрокаХэш, hash=0, M = 31, TABLE_SIZE = 18446744073709551616)
    //TABLE_SIZE = 18446744073709551615; 64 бита
    //M = 31; Умножитель
    ДлинаСтроки = СтрДлина(СтрокаХэш);
    Для к=1 по ДлинаСтроки цикл
        hash = M * hash + КодСимвола(Сред(СтрокаХэш,к,1));
    конеццикла;
    возврат hash%TABLE_SIZE;
КонецФункции




&НаКлиенте
Процедура ОбновитьЗапросыДоступности()
	ЗаполнитьТЗСтатусовЗапросаДоступности();
	
	СтруктураПоиска = Новый Структура("СтатусЗапросаПеречисление", СтрокаЗапроса);
	
	Строки = СтатусыЗапросовДоступности.НайтиСтроки(СтруктураПоиска);
	Если Строки.Количество() >0 Тогда
		Элементы.СтатусыЗапросовДоступности.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапросыДоступностиПриАктивизацииСтроки(Элемент)
	ЗаказыПокупателейКлиент.ОформитьКнопкуИзменениеСтатусаДокумента(Элементы.ЗапросыДоступности.ТекущаяСтрока, ЭтотОбъект, "ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыЗапросаДоступности(Команда) 
	ОбновитьЗапросыДоступности();
КонецПроцедуры




