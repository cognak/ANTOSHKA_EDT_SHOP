////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.

		Возврат;

	КонецЕсли;

	Если НЕ Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда

		ВызватьИсключение
			"Недостатньо прав доступу.
			|
			|Зміна властивостей регламентного завдання
			|виконується лише адміністраторами!";

	КонецЕсли;

	Действие = Параметры.Действие;

	Если СтрНайти(", Добавить, Скопировать, Изменить,", ", " + Действие + ",") = 0 Тогда
		
		ВызватьИсключение "Хибні параметри відкриття форми «Регламентне завдання».";

	КонецЕсли;
	
	Элементы.ИмяПользователя.Доступность = НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Если Действие = "Добавить" Тогда
		
		Расписание = Новый РасписаниеРегламентногоЗадания;

		Для каждого РегламентноеЗаданиеМетаданные ИЗ Метаданные.РегламентныеЗадания Цикл

			ОписанияМетаданныхРегламентныхЗаданий.Добавить(
				РегламентноеЗаданиеМетаданные.Имя
					+ Символы.ПС
					+ РегламентноеЗаданиеМетаданные.Синоним
					+ Символы.ПС
					+ РегламентноеЗаданиеМетаданные.ИмяМетода,
				?(ПустаяСтрока(РегламентноеЗаданиеМетаданные.Синоним),
				  РегламентноеЗаданиеМетаданные.Имя,
				  РегламентноеЗаданиеМетаданные.Синоним)
			);

		КонецЦикла;

	Иначе

		Задание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(Параметры.Идентификатор);
		ЗаполнитьЗначенияСвойств(
			ЭтотОбъект,
			Задание,
			"Ключ,
			|Предопределенное,
			|Использование,
			|Наименование,
			|ИмяПользователя,
			|ИнтервалПовтораПриАварийномЗавершении,
			|КоличествоПовторовПриАварийномЗавершении");
		
		Идентификатор = Строка(Задание.УникальныйИдентификатор);

		Если Задание.Метаданные = Неопределено Тогда

			ИмяМетаданных        = "<немає метаданих>";
			СинонимМетаданных    = "<немає метаданих>";
			ИмяМетодаМетаданных  = "<немає метаданих>";

		Иначе

			ИмяМетаданных        = Задание.Метаданные.Имя;
			СинонимМетаданных    = Задание.Метаданные.Синоним;
			ИмяМетодаМетаданных  = Задание.Метаданные.ИмяМетода;

		КонецЕсли;

		Расписание = Задание.Расписание;
		ПараметрыЗадания.ЗагрузитьЗначения(Задание.Параметры);

		СообщенияПользователюИОписаниеИнформацииОбОшибке = РегламентныеЗаданияСлужебный
			.СообщенияИОписанияОшибокРегламентногоЗадания(Задание);

	КонецЕсли;
	
	Если НЕ Действие = "Изменить" Тогда

		Идентификатор = "<буде створено під час запису>";
		Использование = Ложь;

		Наименование = ?(
			Действие = "Добавить",
			"",
			РегламентныеЗаданияСлужебный.ПредставлениеРегламентногоЗадания(Задание)
		);

	КонецЕсли;
	
//	Заполнение списка выбора имени пользователя.
	МассивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();

	Для каждого Пользователь Из МассивПользователей Цикл

		Элементы.ИмяПользователя.СписокВыбора.Добавить(Пользователь.Имя);

	КонецЦикла;

КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Действие = "Добавить" Тогда
		
		// Выбор шаблона регламентного задания (метаданные).
		ЭлементСписка = ОписанияМетаданныхРегламентныхЗаданий.ВыбратьЭлемент(
			"Оберіть шаблон регламентного завдання");
		
		Если ЭлементСписка = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		Иначе
			ИмяМетаданных       = СтрПолучитьСтроку(ЭлементСписка.Значение, 1);
			СинонимМетаданных   = СтрПолучитьСтроку(ЭлементСписка.Значение, 2);
			ИмяМетодаМетаданных = СтрПолучитьСтроку(ЭлементСписка.Значение, 3);
			Наименование        = ЭлементСписка.Представление;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьЗаголовокФормы();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ЗапроситьПодтверждениеЗакрытияФормы(Отказ, Модифицированность);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьРегламентноеЗадание();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить()
	
	ЗаписатьРегламентноеЗадание();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеВыполнить()

	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(
		?(Модифицированность ИЛИ Действие = "Добавить", Расписание, ПолучитьРасписание(Идентификатор))
	);

	Диалог.Показать(Новый ОписаниеОповещения("ОткрытьРасписаниеЗавершение"
		, ЭтотОбъект, Новый Структура("Идентификатор", Идентификатор)));

КонецПроцедуры

&НаКлиенте	//	LNK 03.04.2024 08:34:41 - было НаСервере ??
Процедура ОткрытьРасписаниеЗавершение(Значение, ДополнительныеПараметры)	Экспорт

	Если НЕ Значение = Неопределено Тогда

		Расписание = Значение;	//	LNK 03.04.2024 07:19:08
		Модифицированность = Истина;
	//	УстановитьРасписание(ДополнительныеПараметры.Идентификатор, Расписание);
		
		ПоказатьОповещениеПользователя("Увага! Виконайте запис завдання."
			,
			, "Розклад завдання змінено, але не застосовано до бази даних. Необхідно здійснити запис поточного елемента!"
			, БиблиотекаКартинок.Предупреждение_32
			, СтатусОповещенияПользователя.Информация
		);

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
Функция ПолучитьРасписание(Знач ИдентификаторРегламентногоЗадания)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РегламентныеЗаданияСервер.ПолучитьРасписаниеРегламентногоЗадания(
		ИдентификаторРегламентногоЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьРасписание(Знач ИдентификаторРегламентногоЗадания, Знач НовоеРасписание)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(
		ИдентификаторРегламентногоЗадания,
		НовоеРасписание);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРегламентноеЗадание()
	
	ЗаписатьРегламентноеЗаданиеНаСервере();
	ОбновитьЗаголовокФормы();
	Оповестить("Запись_РегламентныеИФоновыеЗадания", Параметры.Идентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРегламентноеЗаданиеНаСервере()

	Если Действие = "Изменить" Тогда

		Задание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(Идентификатор);

	Иначе

		Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(
			Метаданные.РегламентныеЗадания[ИмяМетаданных]);
		
		Идентификатор = Строка(Задание.УникальныйИдентификатор);
		Действие = "Изменить";

	КонецЕсли;

	ЗаполнитьЗначенияСвойств(
		Задание,
		ЭтотОбъект,
		"Ключ, 
		|Наименование,
		|Использование,
		|ИмяПользователя,
		|ИнтервалПовтораПриАварийномЗавершении,
		|КоличествоПовторовПриАварийномЗавершении"
	);

	Задание.Параметры = ПараметрыЗадания.ВыгрузитьЗначения();
	Задание.Расписание = Расписание;
	Задание.Записать();

	Модифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокФормы()
	
	Если НЕ ПустаяСтрока(Наименование) Тогда
		Представление = Наименование;
		
	ИначеЕсли НЕ ПустаяСтрока(СинонимМетаданных) Тогда
		Представление = СинонимМетаданных;
	Иначе
		Представление = ИмяМетаданных;
	КонецЕсли;
	
	Если Действие = "Изменить" Тогда

		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 (Регламентне завдання)", Представление);

	Иначе

		Заголовок = "Регламентне завдання (створення)";

	КонецЕсли;
	
КонецПроцедуры












