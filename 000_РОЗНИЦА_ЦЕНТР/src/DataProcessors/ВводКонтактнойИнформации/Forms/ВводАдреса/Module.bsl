// Форма параметризуется:
//
//      Заголовок     (строка)  - заголовок формы
//      ЗначенияПолей (строка)  - сериализованное значение контактной информации или пустая строка для 
//                                ввода нового
//      Представление (строка)  - представление адреса (используется только при работе со старыми данными)
//      ВидКонтактнойИнформации - ссылка на справочник ВидыКонтактнойИнформации, описывающий то, что мы 
//                                редактируем
//      Комментарий (строка)    - необязательный комментарий, для подстановки в поле "Комментарий"
//
//  Результатом выбора является структура с полями:
//      "КонтактнаяИнформация, Представление, Комментарий"
//
// -------------------------------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Внутренняя инициализация
	ЦветКорректногоПоля = Новый Цвет;   // (243, 255, 243);
	АвтоЦвет            = Новый Цвет;
	СтранаУкраина       = Справочники.СтраныМира.Украина;
	СтранаРоссия		= Справочники.СтраныМира.НайтиПоКоду("643");
	
	СтраныСоответствие = Новый Соответствие;
	СтраныСоответствие.Вставить(Справочники.СтраныМира.Украина, "АдресУкраины");
	Если СтранаРоссия <> Справочники.СтраныМира.ПустаяСсылка() Тогда
		СтраныСоответствие.Вставить(СтранаРоссия, "АдресРФ");
	КонецЕсли;

	СтраныДляПострочногоВвода = Новый ФиксированноеСоответствие(СтраныСоответствие);
	
	ВидКонтактнойИнформации = Параметры.ВидКонтактнойИнформации;
	
	ПроверятьКорректность      = ВидКонтактнойИнформации.ПроверятьКорректность;
	ЗапрещатьВводНекорректного = ВидКонтактнойИнформации.ЗапрещатьВводНекорректного;
	
	МожноЗагружатьКлассификатор = КонтактнаяИнформацияСлужебный.ЕстьВозможностьИзмененияАдресногоКлассификатора();
	
	// Заголовок
	Заголовок = ?(ПустаяСтрока(Параметры.Заголовок), Строка(ВидКонтактнойИнформации), Параметры.Заголовок);
	
	// Режимы
	СкрыватьНеактуальныеАдреса = ВидКонтактнойИнформации.СкрыватьНеактуальныеАдреса;
	
	// Возможные варианты дома, строения, квартиры
	УстановитьСписокВыбораЭлемента(Элементы.ТипДома,      Элементы.Дом,       КонтактнаяИнформацияСлужебный.ВариантыДанныхДом());
	УстановитьСписокВыбораЭлемента(Элементы.ТипСтроения,  Элементы.Строение,  КонтактнаяИнформацияСлужебный.ВариантыДанныхСтроение());
	УстановитьСписокВыбораЭлемента(Элементы.ТипПомещения, Элементы.Помещение, КонтактнаяИнформацияСлужебный.ВариантыДанныхПомещение());
	
	АдресТолькоУкраинский = ВидКонтактнойИнформации.АдресТолькоУкраинский;
	
	// Пытаемся заполнить из параметра
	XDTOКонтактная = КонтактнаяИнформацияСлужебный.ДесериализацияАдреса(Параметры.ЗначенияПолей, Параметры.Представление, ВидКонтактнойИнформации.Тип);
	Если Параметры.Комментарий<>Неопределено Тогда
		// Ставим новый комментарий, иначе он придет из информации
		КонтактнаяИнформацияСлужебный.КомментарийКонтактнойИнформации(XDTOКонтактная, Параметры.Комментарий);
	КонецЕсли;
	
	ЗначениеРеквизитовПоКонтактнойИнформации(ЭтотОбъект, XDTOКонтактная);
	ОтрисоватьДополнительныеЗданияИПомещения();
	
	// По умолчанию все украинские
	Если Не ЗначениеЗаполнено(Страна) Тогда
		Страна = СтранаУкраина;
	КонецЕсли;
	
	// Возможно пустые значения, чтобы не смущали
	Если ПустаяСтрока(Дом) И ПустаяСтрока(ТипДома) Тогда
		ТипДома = КонтактнаяИнформацияКлиентСервер.ПервыйИлиПустой(Элементы.ТипДома);
	КонецЕсли;
	Если ПустаяСтрока(Строение) И ПустаяСтрока(ТипСтроения) Тогда
		ТипСтроения = КонтактнаяИнформацияКлиентСервер.ПервыйИлиПустой(Элементы.ТипСтроения);
	КонецЕсли;
	Если ПустаяСтрока(Помещение) И ПустаяСтрока(ТипПомещения) Тогда
		ТипПомещения = КонтактнаяИнформацияКлиентСервер.ПервыйИлиПустой(Элементы.ТипПомещения);
	КонецЕсли;
	
	// Проверяем на вменяемость
	Если АдресТолькоУкраинский Тогда
		Если Страна<>СтранаУкраина Тогда
			// От нас хотят российский адрес, но выдают странную страну, сваливаемся только на просмотр
			УстановитьТолькоПросмотр();
		Иначе
			Элементы.Страна.Доступность = Ложь;
			Элементы.Страна.ЦветФона = АвтоЦвет;
		КонецЕсли;
	КонецЕсли;
	
	Если Страна=СтранаУкраина Тогда
		ТекущийЭлемент = Элементы.НаселенныйПункт;
	КонецЕсли;
	
	УстановитьКлючИспользованияФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
#Если ВебКлиент Тогда
	МожноЗагружатьКлассификатор = Ложь;
#КонецЕсли
	Элементы.ФормаЗагрузитьКлассификатор.Видимость = МожноЗагружатьКлассификатор;
	
	ОбработкаИзмененияСтраныКлиент();
	ВизуализироватьКорректностьВыбора();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	УстановитьКлючИспользованияФормы();
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ
//

&НаКлиенте
Процедура СтранаПриИзменении(Элемент)
	ОбработкаИзмененияСтраныКлиент();
	
	Контекст = КонтекстФормыКлиент();
	ОчиститьАдресСервер(Контекст);
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
КонецПроцедуры
&НаКлиенте
Процедура СтранаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры
&НаКлиенте
Процедура ИндексПриИзменении(Элемент)
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
КонецПроцедуры
&НаКлиенте
Процедура ТипДомаПриИзменении(Элемент)
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
КонецПроцедуры
&НаКлиенте
Процедура ДомПриИзменении(Элемент)
	Контекст = КонтекстФормыКлиент();
	ОбновитьИндексИПредставление(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
КонецПроцедуры
&НаКлиенте
Процедура ТипСтроенияПриИзменении(Элемент)
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
КонецПроцедуры
&НаКлиенте
Процедура СтроениеПриИзменении(Элемент)
	Контекст = КонтекстФормыКлиент();
	ОбновитьИндексИПредставление(Контекст);
	КонтекстФормыКлиент(Контекст);
КонецПроцедуры
&НаКлиенте
Процедура ТипПомещенияПриИзменении(Элемент)
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
КонецПроцедуры
&НаКлиенте
Процедура ПомещениеПриИзменении(Элемент)
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктПриИзменении(Элемент)
	Контекст = КонтекстФормыКлиент();
	ОбработкаИзмененияНаселенногоПунктаСервер(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
КонецПроцедуры
&НаКлиенте
Процедура НаселенныйПунктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	// Если пришли впрямую после редактирования, то сбрасываем адрес
	Если Элемент.ТекстРедактирования<>НаселенныйПункт Тогда
		КодКлассификатораНаселенногоПункта = 0;
		НаселенныйПункт                    = Элемент.ТекстРедактирования;
		
		НаселенныйПунктНайденТочно = Ложь;
		УлицаНайденаТочно          = Ложь;
		ДомНайденТочно             = Ложь;
		
		Контекст = КонтекстФормыКлиент();
		СформироватьДетальныйНаселенныйПункт(Контекст, НаселенныйПункт);
		КонтекстФормыКлиент(Контекст);
		
		Модифицированность = Истина;
	КонецЕсли;
	
	КлючСтраны = СтраныДляПострочногоВвода.Получить(Страна);
	
	ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма.НаселенныйПунктАдреса",
		Новый Структура("НаселенныйПунктДетально, СкрыватьНеактуальныеАдреса, КлючСтраны",
			НаселенныйПунктДетально, СкрыватьНеактуальныеАдреса, КлючСтраны
		), Элемент
	);
	
КонецПроцедуры
&НаКлиенте
Процедура НаселенныйПунктОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Перем МожноЗагружатьРегион;
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	
	ТипЗначения = ТипЗнч(ВыбранноеЗначение);
	ФормироватьДетально = Истина;
	Если ТипЗначения=Тип("Структура") Тогда
		// Результат автоподбора или выбора кнопкой, берем все оттуда
		КодКлассификатораНаселенногоПункта = ВыбранноеЗначение.Код;
		НаселенныйПункт                    = ВыбранноеЗначение.Представление;
		НаселенныйПунктНайденТочно         = КодКлассификатораНаселенногоПункта>0;
		
		Если ВыбранноеЗначение.Свойство("НаселенныйПунктДетально") Тогда
			// Выбор из формы детального ввода
			НаселенныйПунктДетально = ВыбранноеЗначение.НаселенныйПунктДетально;
			ФормироватьДетально = Ложь;
		КонецЕсли;
		
		РегионНеЗагружен = ВыбранноеЗначение.Свойство("МожноЗагружатьРегион") И ВыбранноеЗначение.МожноЗагружатьРегион;
		Если МожноЗагружатьКлассификатор И РегионНеЗагружен Тогда
			// Предлагаем загрузить классификатор
			КонтактнаяИнформацияКлиент.ПредложениеЗагрузкиКлассификатора(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Данные для ""%1"" не загружены.'"), ВыбранноеЗначение.Представление
				)
			);
		КонецЕсли;
		
	Иначе
		// Иной источник, будет попытка репарсить
		КодКлассификатораНаселенногоПункта = 0;
	 	НаселенныйПункт                    = Строка(ВыбранноеЗначение);
		
		НаселенныйПунктНайденТочно  = Ложь;
		УлицаНайденаТочно           = Ложь;
		ДомНайденТочно              = Ложь;
	КонецЕсли;
	
	// Если город был выбран точно, то по коду будет восстановлен детальный населенный пункт, иначе сохранится введенная детальная инфа
	Контекст = КонтекстФормыКлиент();
	ОбработкаИзмененияНаселенногоПунктаСервер(Контекст, ФормироватьДетально);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
КонецПроцедуры
&НаКлиенте
Процедура НаселенныйПунктАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Элементы.НаселенныйПункт.ЦветФона = АвтоЦвет;
	
	СтандартнаяОбработка = Ложь;
	Если СтрДлина(Текст)<3 Тогда 
		ВизуализироватьКорректностьВыбора();
		Возврат;
	КонецЕсли;
	
#Если ВебКлиент Тогда
	ПредупреждатьОНеактуальных = Ложь;
#Иначе
	ПредупреждатьОНеактуальных = Истина;
#КонецЕсли
	
	АнализКлассификатора = РезультатыАвтоПодбораНаселенногоПункта(Текст, СкрыватьНеактуальныеАдреса, ПредупреждатьОНеактуальных);
	ДанныеВыбора = АнализКлассификатора.ДанныеВыбора;
	
КонецПроцедуры
&НаКлиенте
Процедура НаселенныйПунктОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	// Выход из поля с текстом, измененным руками
	СтандартнаяОбработка = Ложь;
	
	Модифицированность = Истина;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(Текст);
	
	// Населенный пункт становится недостоверным
	КодКлассификатораНаселенногоПункта = 0;
	НаселенныйПунктНайденТочно         = Ложь;
	НаселенныйПункт                    = Текст;
	
	// Улица становится недостоверной
	КодКлассификатораУлицы = 0;
	УлицаНайденаТочно      = Ложь;
	
	// Дом становится недостовернвм
	ДомНайденТочно = Ложь;
	
	Контекст = КонтекстФормыКлиент();
	ОбработкаИзмененияНаселенногоПунктаСервер(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
КонецПроцедуры

&НаКлиенте
Процедура УлицаПриИзменении(Элемент)
	Контекст = КонтекстФормыКлиент();
	ОбработкаИзмененияУлицыСервер(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
КонецПроцедуры
&НаКлиенте
Процедура УлицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	// Если пришли впрямую после редактирования, то сбрасываем
	Если Элемент.ТекстРедактирования<>Улица Тогда
		Улица = Элемент.ТекстРедактирования;
	КонецЕсли;
	
	Если КодКлассификатораНаселенногоПункта>0 Тогда
		ПараметрыФормы = Новый Структура("СкрыватьНеактуальныеАдреса, КодКлассификатораНаселенногоПункта, Улица", 
			СкрыватьНеактуальныеАдреса, КодКлассификатораНаселенногоПункта, Улица
		);
		КонтактнаяИнформацияКлиент.НачалоВыбораУлицы(Элемент, КодКлассификатораНаселенногоПункта, Улица, ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура УлицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	
	ТипВыбора = ТипЗнч(ВыбранноеЗначение);
	Если ТипВыбора=Тип("Структура") Тогда
		// Результат автоподбора или выбора кнопкой, берем все оттуда
		КодКлассификатораУлицы = ВыбранноеЗначение.Код;
		Улица                  = ВыбранноеЗначение.Представление;
		УлицаНайденаТочно      = Истина;
	Иначе
		// Иной источник, будет попытка репарсить
		КодКлассификатораУлицы = 0;
	 	Улица                  = Строка(ВыбранноеЗначение);
		
		УлицаНайденаТочно = Ложь;
		ДомНайденТочно    = Ложь;
	КонецЕсли;
	
	Контекст = КонтекстФормыКлиент();
	ОбработкаИзмененияУлицыСервер(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
КонецПроцедуры
&НаКлиенте
Процедура УлицаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Элементы.Улица.ЦветФона = АвтоЦвет;
	
	СтандартнаяОбработка = Ложь;
	Если СтрДлина(Текст)<3 Или КодКлассификатораНаселенногоПункта<=0 Тогда 
		ВизуализироватьКорректностьВыбора();
		Возврат;
	КонецЕсли;
	
#Если ВебКлиент Тогда
	ПредупреждатьОНеактуальных = Ложь;
#Иначе
	ПредупреждатьОНеактуальных = Истина;
#КонецЕсли
	
	АнализКлассификатора = РезультатыАвтоПодбораУлицы(КодКлассификатораНаселенногоПункта, Текст, СкрыватьНеактуальныеАдреса, ПредупреждатьОНеактуальных);
	ДанныеВыбора = АнализКлассификатора.ДанныеВыбора;
КонецПроцедуры
&НаКлиенте
Процедура УлицаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	// Выход из поля с текстом, измененным руками
	СтандартнаяОбработка = Ложь;
	
	Модифицированность = Истина;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(Текст);
	
	// Улица становится непроверенной
	КодКлассификатораУлицы = 0;
	УлицаНайденаТочно = Ложь;
	
	// Дом становится непроверенным
	ДомНайденТочно = Ложь;
	
	ВизуализироватьКорректностьВыбора();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Комментарий, Модифицированность);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
//

&НаКлиенте
Процедура КомандаОК(Команда)
	// При немодифицированности работает как "отмена"
	
	Если Модифицированность Тогда
		// Изменено значение адреса 
		
		Контекст = КонтекстФормыКлиент();
		Результат = РезультатВыбора(Контекст);
		Если ПроверятьКорректность И Результат.ОшибкиЗаполнения.Количество()>0 Тогда
			СообщитьОбОшибкахЗаполнения(Результат.ОшибкиЗаполнения, Ложь);
			Если ЗапрещатьВводНекорректного Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Результат = Результат.ДанныеВыбора;
#Если ВебКлиент Тогда
		ФлагЗакрытия = ЗакрыватьПриВыборе;
		ЗакрыватьПриВыборе = Ложь;
		ОповеститьОВыборе(Результат);
		ЗакрыватьПриВыборе = ФлагЗакрытия;
#Иначе
		ОповеститьОВыборе(Результат);
#КонецЕсли
		
	ИначеЕсли Комментарий<>КопияКомментария Тогда
		// Изменен только комментарий, пробуем вернуть обновленное
		Результат = РезультатВыбораТолькоКомментария(Параметры.ЗначенияПолей, Параметры.Представление, Комментарий);
		Результат = Результат.ДанныеВыбора;
#Если ВебКлиент Тогда
		ФлагЗакрытия = ЗакрыватьПриВыборе;
		ЗакрыватьПриВыборе = Ложь;
		ОповеститьОВыборе(Результат);
		ЗакрыватьПриВыборе = ФлагЗакрытия;
#Иначе
		ОповеститьОВыборе(Результат);
#КонецЕсли
		
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Если (МодальныйРежим Или ЗакрыватьПриВыборе) И Открыта() Тогда
		Закрыть(Результат);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеАдреса(Команда)
	Контекст = КонтекстФормыКлиент();
	СписокОшибок = СписокОшибокЗаполнения(Контекст);
	СообщитьОбОшибкахЗаполнения(СписокОшибок, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьАдрес(Команда)
	ОчиститьАдресКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификатор(Команда)
	КонтактнаяИнформацияКлиент.ЗагрузитьАдресныйКлассификатор();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОбъект(Команда)
	//Варианты = НеиспользованныеЭлементыДополнительнойТаблицы(ДополнительныеЗдания, Элементы.ТипСтроения, 1);
	//Для Каждого ЭлементОбъект Из НеиспользованныеЭлементыДополнительнойТаблицы(ДополнительныеПомещения, Элементы.ТипПомещения, 2) Цикл
	//	ЗаполнитьЗначенияСвойств(Варианты.Добавить(), ЭлементОбъект);
	//КонецЦикла;
	//
	//КоличествоВариантов = Варианты.Количество();
	//Если КоличествоВариантов>0 Тогда
	//	Выбрано = ВыбратьИзМеню(Варианты);
	//Иначе
	//	Выбрано = Неопределено;
	//КонецЕсли;
	//
	//Если Выбрано<>Неопределено Тогда
	//	Если Выбрано.Значение=1 Тогда
	//		Строка = ДополнительныеЗдания.Добавить();
	//		
	//		Строка.Тип = Выбрано.Представление;
	//		Строка.ПутьXPath = КонтактнаяИнформацияКлиентСерверПовтИсп.XPathНомераДополнительногоОбъектаАдресации(Строка.Тип);
	//		ИмяТекущего = ОтрисоватьДополнительныеЗдания();
	//	Иначе
	//		Строка = ДополнительныеПомещения.Добавить();
	//		
	//		Строка.Тип = Выбрано.Представление;
	//		Строка.ПутьXPath = КонтактнаяИнформацияКлиентСерверПовтИсп.XPathНомераДополнительногоОбъектаАдресации(Строка.Тип);
	//		ИмяТекущего = ОтрисоватьДополнительныеПомещения();
	//	КонецЕсли;
	//	
	//	// Запрещаем добавлять больше чем есть вариантов
	//	Элементы.ДобавитьОбъект.Доступность = КоличествоВариантов>1;
	//	
	//	Если ИмяТекущего<>Неопределено Тогда
	//		ТекущийЭлемент = Элементы[ИмяТекущего];
	//	КонецЕсли;
	//	
	//	Модифицированность = Истина;
	//КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

&НаСервереБезКонтекста
Функция РезультатВыбора(Контекст)
	XDTOИнформация = КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст);
	Результат      = Новый Структура("ДанныеВыбора, ОшибкиЗаполнения");
	
	Результат.ДанныеВыбора = Новый Структура("КонтактнаяИнформация, Представление, Комментарий",
		КонтактнаяИнформацияСлужебный.СериализацияКонтактнойИнформации(XDTOИнформация),
		XDTOИнформация.Представление,
		XDTOИнформация.Комментарий
	);
	
	Результат.ОшибкиЗаполнения = КонтактнаяИнформацияСлужебный.ОшибкиЗаполненияАдреса(
		XDTOИнформация.Состав,
		Контекст.ВидКонтактнойИнформации
	);
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция СписокОшибокЗаполнения(Контекст)
	XDTOИнформация = КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст);
	Возврат КонтактнаяИнформацияСлужебный.ОшибкиЗаполненияАдреса(
		XDTOИнформация.Состав,
		Контекст.ВидКонтактнойИнформации
	);
КонецФункции

&НаСервере
Функция РезультатВыбораТолькоКомментария(КонтактнаяИнфо, Представление, Комментарий)
	
	Если ПустаяСтрока(КонтактнаяИнфо) Тогда
		НоваяКонтакная = КонтактнаяИнформацияСлужебный.ДесериализацияАдреса("");
		КонтактнаяИнформацияСлужебный.КомментарийКонтактнойИнформации(НоваяКонтакная, Комментарий);
		НоваяКонтакная = КонтактнаяИнформацияСлужебный.СериализацияКонтактнойИнформации(НоваяКонтакная);
	ИначеЕсли КонтактнаяИнформацияКлиентСервер.ЭтоСтрокаXML(КонтактнаяИнфо) Тогда
		НоваяКонтакная = КонтактнаяИнфо;
		// Модифицируем строку с КИ
		КонтактнаяИнформацияСлужебный.КомментарийКонтактнойИнформации(НоваяКонтакная, Комментарий);
	Иначе
		НоваяКонтакная = КонтактнаяИнфо;
	КонецЕсли;
	
	Возврат Новый Структура("ДанныеВыбора, ОшибкиЗаполнения",
		Новый Структура("КонтактнаяИнформация, Представление, Комментарий", НоваяКонтакная, Представление, Комментарий),
		Новый СписокЗначений
	);
КонецФункции

&НаСервереБезКонтекста
Процедура ОбработкаИзмененияНаселенногоПунктаСервер(Контекст, ПереформироватьДетально=Истина)
	
	Если Контекст.КодКлассификатораНаселенногоПункта<=0 Тогда
		// Данные вводились вручную, пробуем репарсинг введенной строки
		АнализКлассификатора = НаселенныеПунктыПоПредставлению(
			Контекст.НаселенныйПункт, Контекст.СкрыватьНеактуальныеАдреса
		);
		Контекст.НаселенныйПунктНайденТочно = АнализКлассификатора.ДанныеВыбора.Количество()=1;
		Если Контекст.НаселенныйПунктНайденТочно Тогда
			ВыбранноеЗначение = АнализКлассификатора.ДанныеВыбора[0].Значение.Значение;
			Контекст.КодКлассификатораНаселенногоПункта = ВыбранноеЗначение.Код;
			Контекст.НаселенныйПункт                    = ВыбранноеЗначение.Представление;
		Иначе
			Контекст.УлицаНайденаТочно = Ложь;
			Контекст.ДомНайденТочно    = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Населенный пункт, разбитый по частям
	Если ПереформироватьДетально Тогда
		СформироватьДетальныйНаселенныйПункт(Контекст);
	КонецЕсли;
	
	// Перепроверяем улицу, индекс и представление обновлятся там
	ОбработкаИзмененияУлицыСервер(Контекст);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработкаИзмененияУлицыСервер(Контекст)
	
	Если Контекст.КодКлассификатораУлицы<=0 Тогда
		// Данные вводились вручную, пробуем репарсинг введенной строки
		АнализКлассификатора = УлицыПоПредставлению(
			Контекст.КодКлассификатораНаселенногоПункта, Контекст.Улица, Контекст.СкрыватьНеактуальныеАдреса
		);
		Контекст.УлицаНайденаТочно = АнализКлассификатора.ДанныеВыбора.Количество()=1;
		Если Контекст.УлицаНайденаТочно Тогда
			ВыбранноеЗначение = АнализКлассификатора.ДанныеВыбора[0].Значение.Значение;
			Контекст.КодКлассификатораУлицы = ВыбранноеЗначение.Код;
			Контекст.Улица                  = ВыбранноеЗначение.Представление;
			Контекст.УлицаНайденаТочно      = Истина;
		КонецЕсли;
	Иначе
		// Соответствие улицы населенному пункту
		Контекст.УлицаНайденаТочно = ЯвляетсяПотомком(Контекст.КодКлассификатораУлицы, Контекст.КодКлассификатораНаселенногоПункта);
	КонецЕсли;
	
	// Перепроверяем дом, индекс и представление обновлятся там
	ОбработкаИзмененияДомаСервер(Контекст);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработкаИзмененияДомаСервер(Контекст)
	Контекст.ДомНайденТочно = Истина;
	
	ОбновитьИндексИПредставление(Контекст);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСтраныКлиент()
	ЭтоПострочныйАдрес = (СтраныДляПострочногоВвода.Получить(Страна) <> Неопределено);
	Элементы.Индекс.Видимость = ЭтоПострочныйАдрес;    
	Элементы.ТипАдреса.ТекущаяСтраница = ?(ЭтоПострочныйАдрес, Элементы.ПострочныйАдрес, Элементы.АдресОднойСтрокой);
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораЭлемента(ЭлементВид, ЭлементЗначение, Данные)
	ЭлементЗначение.КнопкаВыпадающегоСписка = Данные.МожноПодбиратьЗначения;
	
	СписокТипов = Данные.ВариантыТипа;
	ЭлементВид.КнопкаВыбора = СписокТипов.Количество()>0;
	Если ЭлементВид.КнопкаВыбора Тогда
		ЭлементВид.СписокВыбора.ЗагрузитьЗначения(СписокТипов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВизуализироватьКорректностьВыбора()
	
	Элементы.НаселенныйПункт.ЦветФона = ?(НаселенныйПунктНайденТочно, ЦветКорректногоПоля, АвтоЦвет);
	Элементы.Улица.ЦветФона           = ?(УлицаНайденаТочно, ЦветКорректногоПоля, АвтоЦвет);
	
	НужныйЦвет = ?(ДомНайденТочно, ЦветКорректногоПоля, АвтоЦвет);
	
	// Основные
	Элементы.ТипДома.ЦветФона = НужныйЦвет;
	Элементы.Дом.ЦветФона     = НужныйЦвет;
	
	Элементы.ТипСтроения.ЦветФона  = НужныйЦвет;
	Элементы.Строение.ЦветФона     = НужныйЦвет;
	
	Элементы.ТипПомещения.ЦветФона = НужныйЦвет;
	Элементы.Помещение.ЦветФона   = НужныйЦвет;
	
	// Дополнительные
	Для НомерСтроки=0 По ДополнительныеЗдания.Количество()-1 Цикл
		Идентификатор = Формат(НомерСтроки, "ЧН=; ЧГ=");
		Элементы["ТипСтроения" + Идентификатор].ЦветФона = НужныйЦвет;
		Элементы["Строение" + Идентификатор].ЦветФона    = НужныйЦвет;
	КонецЦикла;
	
	Для НомерСтроки=0 По ДополнительныеПомещения.Количество()-1 Цикл
		Идентификатор = Формат(НомерСтроки, "ЧН=; ЧГ=");
		Элементы["ТипПомещения" + Идентификатор].ЦветФона = НужныйЦвет;
		Элементы["Помещение" + Идентификатор].ЦветФона    = НужныйЦвет;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьИндексИПредставление(Контекст, XDTOКонтактная=Неопределено)
	Инфо = ?(XDTOКонтактная=Неопределено, КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст), XDTOКонтактная);
	УстановитьЗначениеИндекса(Контекст, Инфо);
	ЗаполнитьПредставлениеАдреса(Контекст, Инфо);
КонецПроцедуры
&НаСервереБезКонтекста
Процедура УстановитьЗначениеИндекса(Контекст, XDTOКонтактная=Неопределено)
	Инфо = ?(XDTOКонтактная=Неопределено, КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст), XDTOКонтактная);
	
	ИндексПоКлассификатору = КонтактнаяИнформацияСлужебный.ОпределитьПочтовыйИндексАдреса(Инфо.Состав);
	Если Не Пустаястрока(ИндексПоКлассификатору) Тогда
		Контекст.Индекс = ИндексПоКлассификатору;
	КонецЕсли;
КонецПроцедуры
&НаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеАдреса(Контекст, XDTOКонтактная=Неопределено)
	Инфо = ?(XDTOКонтактная=Неопределено, КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст), XDTOКонтактная);
	
	Контекст.ПредставлениеАдреса = Инфо.Представление;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗначениеРеквизитовПоКонтактнойИнформации(Контекст, РедактируемаяИнформация)
	
	ДанныеАдреса = РедактируемаяИнформация.Состав;
	
	// Общие реквизиты
	Контекст.ПредставлениеАдреса = РедактируемаяИнформация.Представление;
	Контекст.Комментарий         = РедактируемаяИнформация.Комментарий;
	
	// Копия комментария для анализа измененности
	Контекст.КопияКомментария = Контекст.Комментарий;
	
	// Страна по наименованию
	Если ПустаяСтрока(ДанныеАдреса.Страна) Тогда
		Контекст.Страна = Справочники.СтраныМира.ПустаяСсылка();
	Иначе
		СтранаАдреса = Справочники.СтраныМира.НайтиПоНаименованию(ДанныеАдреса.Страна);
		Если ЗначениеЗаполнено(СтранаАдреса) Тогда
			Контекст.Страна = СтранаАдреса;
		КонецЕсли;
	КонецЕсли;
	
	// Представление иностранного адреса сохраняем
	Если Не КонтактнаяИнформацияСлужебный.ЭтоПострочныйАдрес(ДанныеАдреса) Тогда
		Контекст.ПредставлениеАдресаОднойСтрокой = Строка(ДанныеАдреса.Состав);
	КонецЕсли;
	
	// Индекс просто ставим
	Контекст.Индекс = Формат(КонтактнаяИнформацияСлужебный.ПочтовыйИндексАдреса(ДанныеАдреса), "ЧГ=");
	
	// Геоданные
	АдресПострочно = КонтактнаяИнформацияСлужебный.ПострочныйАдрес(ДанныеАдреса);
	Попытка
		Контекст.Широта	 = АдресПострочно.Широта;
		Контекст.Долгота = АдресПострочно.Долгота;
	Исключение
	КонецПопытки;

//	Синтетический "Населенный пункт" получаем как представление
	Контекст.НаселенныйПункт = КонтактнаяИнформацияСлужебный.ПредставлениеНаселенногоПункта(ДанныеАдреса);
	АнализКлассификатора = КонтактнаяИнформацияСлужебный.НаселенныеПунктыПоПредставлению(Контекст.НаселенныйПункт);
	Если АнализКлассификатора.ДанныеВыбора.Количество()=1 Тогда
		ВыбранноеЗначение = АнализКлассификатора.ДанныеВыбора[0].Значение.Значение;
		Контекст.КодКлассификатораНаселенногоПункта = ВыбранноеЗначение.Код;
		Контекст.НаселенныйПунктНайденТочно         = Истина;
		Контекст.НаселенныйПункт                    = ВыбранноеЗначение.Представление;
	Иначе
		Контекст.КодКлассификатораНаселенногоПункта = 0;
		Контекст.НаселенныйПунктНайденТочно         = Ложь;
		// Наименование населенного пункта не трогаем
	КонецЕсли;
	
	СформироватьДетальныйНаселенныйПункт(Контекст, ДанныеАдреса);
	
	// Синтетическую "Улицу" получаем как представление
	Контекст.Улица = КонтактнаяИнформацияСлужебный.ПредставлениеУлицы(ДанныеАдреса);
	АнализКлассификатора = КонтактнаяИнформацияСлужебный.УлицыПоПредставлению(Контекст.КодКлассификатораНаселенногоПункта, Контекст.Улица);
	Если АнализКлассификатора.ДанныеВыбора.Количество()=1 Тогда
		ВыбранноеЗначение = АнализКлассификатора.ДанныеВыбора[0].Значение.Значение;
		Контекст.КодКлассификатораУлицы = ВыбранноеЗначение.Код;
		Контекст.УлицаНайденаТочно      = Истина;
		Контекст.Улица                  = ВыбранноеЗначение.Представление;
	Иначе
		Контекст.КодКлассификатораУлицы = 0;
		Контекст.УлицаНайденаТочно      = Ложь;
		// Наименование улицы не трогаем
	КонецЕсли;
	
	// Дом, строение, помещение
	ЗданияИПомещения = КонтактнаяИнформацияСлужебный.ЗданияИПомещенияАдреса(ДанныеАдреса);
	
	// Первые два здания выделяем отдельно, остальное в списке
	ТаблицаДанных = ЗданияИПомещения.Здания;
	
	// Вид = 1 - признак дома, владения. Вид = 2, доп строение
	СтрокаДома = ТаблицаДанных.Найти(1, "Вид");
	Если СтрокаДома<>Неопределено Тогда
		Контекст.ТипДома = СтрокаДома.Тип;
		Контекст.Дом     = СтрокаДома.Значение;
		Контекст.ДомНайденТочно = Истина;
		ТаблицаДанных.Удалить(СтрокаДома);
	Иначе
		Контекст.ДомНайденТочно = Ложь;
	КонецЕсли;
	
	СтрокаДома = ТаблицаДанных.Найти(2, "Вид");
	Если СтрокаДома<>Неопределено Тогда
		Контекст.ТипСтроения = СтрокаДома.Тип;
		Контекст.Строение    = СтрокаДома.Значение;
		ТаблицаДанных.Удалить(СтрокаДома);
	КонецЕсли;
	
	Для Каждого СтрокаДома Из ТаблицаДанных Цикл
		ЗаполнитьЗначенияСвойств(Контекст.ДополнительныеЗдания.Вставить(0), СтрокаДома);
	КонецЦикла;
	
	// Первое помещение указываем отдельно, остальные в списке
	ТаблицаДанных = ЗданияИПомещения.Помещения;
	НомерСтроки   = ТаблицаДанных.Количество();
	Если НомерСтроки>0 Тогда
		Контекст.ТипПомещения = ТаблицаДанных[0].Тип;
		Контекст.Помещение    = ТаблицаДанных[0].Значение;
	КонецЕсли;
	Пока НомерСтроки>1 Цикл 
		НомерСтроки = НомерСтроки - 1;
		ЗаполнитьЗначенияСвойств(Контекст.ДополнительныеПомещения.Вставить(0), ТаблицаДанных[НомерСтроки]);
	КонецЦикла;
	
	// Если переданное представление отличается от вычисленного, то адрес изменен
	ВычисленноеПредставление = КонтактнаяИнформацияСлужебный.СформироватьПредставлениеКонтактнойИнформации(
		РедактируемаяИнформация, Контекст.ВидКонтактнойИнформации
	);
	Если Контекст.ПредставлениеАдреса<>ВычисленноеПредставление Тогда
		Контекст.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст)
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	
	Результат = ФабрикаXDTO.Создать( ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация") );
	Результат.Комментарий = Контекст.Комментарий;
	
	Результат.Состав = ФабрикаXDTO.Создать( ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") );
	Адрес = Результат.Состав;
	
	Адрес.Страна = Строка(Контекст.Страна);
	КлючСтраны = Контекст.СтраныДляПострочногоВвода.Получить(Контекст.Страна);
	Если КлючСтраны = Неопределено Тогда
		Адрес.Состав = Контекст.ПредставлениеАдресаОднойСтрокой;
		Результат.Представление = КонтактнаяИнформацияСлужебный.ПредставлениеАдреса(Адрес, Контекст.ВидКонтактнойИнформации);
		Возврат Результат;
	КонецЕсли;
	
	Если КлючСтраны = "АдресРФ" Тогда
		Адрес.Состав = ФабрикаXDTO.Создать( ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") );
		АдресПострочно = Адрес.Состав;
	Иначе
		Адрес.Состав = ФабрикаXDTO.Создать( ФабрикаXDTO.Тип(ПространствоИмен, "АдресУкраины") );
		АдресПострочно = Адрес.Состав;
	КонецЕсли;
	
	// Населенный пункт
	Если Контекст.КодКлассификатораНаселенногоПункта>0 Тогда
		КонтактнаяИнформацияСлужебный.УстановитьНаселенныйПунктАдресаПоКоду(
			АдресПострочно, Контекст.КодКлассификатораНаселенногоПункта
		);
		// Добавляем возможно непустые данные
		Для Каждого КлючЗначение Из Контекст.НаселенныйПунктДетально Цикл
			ЧастьПункта = КлючЗначение.Значение;
			ТекущееЗначение = КонтактнаяИнформацияСлужебный.ЗначениеСвойстваПоXPath(АдресПострочно, ЧастьПункта.ПутьXPath);
			Если ПустаяСтрока(ТекущееЗначение) И (Не ПустаяСтрока(ЧастьПункта.Значение)) Тогда
				КонтактнаяИнформацияСлужебный.УстановитьСвойствоПоXPath(АдресПострочно, ЧастьПункта.ПутьXPath, ЧастьПункта.Значение);
			КонецЕсли;
		КонецЦикла;
	Иначе
		НетДетальныхДанных = Истина;
		Для Каждого КлючЗначение Из Контекст.НаселенныйПунктДетально Цикл
			ЧастьПункта = КлючЗначение.Значение;
			Если Не ПустаяСтрока(ЧастьПункта.Значение) Тогда
				НетДетальныхДанных = Ложь;
			КонецЕсли;
			КонтактнаяИнформацияСлужебный.УстановитьСвойствоПоXPath(АдресПострочно, ЧастьПункта.ПутьXPath, ЧастьПункта.Значение);
		КонецЦикла;
		Если НетДетальныхДанных Тогда
			АдресПострочно.НаселПункт = Контекст.НаселенныйПункт;
		КонецЕсли;
	КонецЕсли;
	
	Если Контекст.КодКлассификатораУлицы>0 Тогда
		КонтактнаяИнформацияСлужебный.УстановитьУлицуАдресаПоКоду(АдресПострочно, Контекст.КодКлассификатораУлицы);
	Иначе
		АдресПострочно.Улица = Контекст.Улица;
	КонецЕсли;
	
	// Здания и помещения
	ТипТаблицаЗначений = Тип("ТаблицаЗначений");
	Если ТипЗнч(Контекст.ДополнительныеЗдания)=ТипТаблицаЗначений Тогда
		ТаблицаЗданий = Контекст.ДополнительныеЗдания.Скопировать();
	Иначе
		ТаблицаЗданий = ДанныеФормыВЗначение(Контекст.ДополнительныеЗдания, ТипТаблицаЗначений);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Контекст.Дом) Тогда
		СтрокаЗдания = ТаблицаЗданий.Вставить(0);
		СтрокаЗдания.Тип      = Контекст.ТипДома;
		СтрокаЗдания.Значение = Контекст.Дом;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Контекст.Строение) Тогда
		СтрокаЗдания = ТаблицаЗданий.Вставить(0);
		СтрокаЗдания.Тип      = Контекст.ТипСтроения;
		СтрокаЗдания.Значение = Контекст.Строение;
	КонецЕсли;
	
	Если ТипЗнч(Контекст.ДополнительныеПомещения)=ТипТаблицаЗначений Тогда
		ТаблицаПомещений = Контекст.ДополнительныеПомещения.Скопировать();
	Иначе
		ТаблицаПомещений = ДанныеФормыВЗначение(Контекст.ДополнительныеПомещения, ТипТаблицаЗначений);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Контекст.Помещение) Тогда
		СтрокаЗдания = ТаблицаЗданий.Вставить(0);
		СтрокаЗдания.Тип      = Контекст.ТипПомещения;
		СтрокаЗдания.Значение = Контекст.Помещение;
	КонецЕсли;
	
	КонтактнаяИнформацияСлужебный.ЗданияИПомещенияАдреса(АдресПострочно, 
		Новый Структура("Здания, Помещения", ТаблицаЗданий, ТаблицаПомещений)
	);
	
	// Индекс
	КонтактнаяИнформацияСлужебный.ПочтовыйИндексАдреса(АдресПострочно, Контекст.Индекс);
	
	//Геоданные
	АдресПострочно.Широта = Контекст.Широта;
	АдресПострочно.Долгота = Контекст.Долгота;
	
	// Представление
	Результат.Представление = КонтактнаяИнформацияСлужебный.ПредставлениеАдреса(Адрес, Контекст.ВидКонтактнойИнформации);
	
	Возврат Результат;
КонецФункции

// Перезаполняет структуру "НаселенныйПунктДетально" по текущим данным адреса или по данным реквизитов формы
&НаСервереБезКонтекста
Процедура СформироватьДетальныйНаселенныйПункт(Контекст, XDTOДанныеАдреса=Неопределено)
	
	КлючСтраны = Контекст.СтраныДляПострочногоВвода.Получить(Контекст.Страна);
	Контекст.НаселенныйПунктДетально = КонтактнаяИнформацияСлужебный.СписокРеквизитовНаселенныйПункт(,?(КлючСтраны = Неопределено, "АдресУкраины", КлючСтраны));
	
	Если XDTOДанныеАдреса=Неопределено Тогда
		// Из реквизитов формы все идет в предопределенный детальный пункт
		Для Каждого КлючЗначение Из Контекст.НаселенныйПунктДетально Цикл
			Значение = КлючЗначение.Значение;
			Если Значение.Предопределенный Тогда
				Значение.Значение = Контекст.НаселенныйПункт;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	// Из переданного XDTO
	АдресПострочно = КонтактнаяИнформацияСлужебный.ПострочныйАдрес(XDTOДанныеАдреса);
	Если АдресПострочно<>Неопределено Тогда
		Для Каждого КлючЗначение Из Контекст.НаселенныйПунктДетально Цикл
			Значение = КлючЗначение.Значение;
			ЗначениеЗначения = КонтактнаяИнформацияСлужебный.ЗначениеСвойстваПоXPath(АдресПострочно, Значение.ПутьXPath);
			
			Части = КонтактнаяИнформацияКлиентСервер.НаименованиеСокращение(ЗначениеЗначения);
			Значение.Наименование = Части.Наименование;
			Значение.Сокращение   = Части.Сокращение;
			Значение.Значение     = ЗначениеЗначения;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьТолькоПросмотр()
	ЭтотОбъект.ТолькоПросмотр = Истина;
КонецПроцедуры
&НаСервере
Процедура УдалитьГруппуЭлементов(Группа)
	Пока Группа.ПодчиненныеЭлементы.Количество()>0 Цикл
		Элемент = Группа.ПодчиненныеЭлементы[0];
		Если ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
			УдалитьГруппуЭлементов(Элемент);
		КонецЕсли;
		Элементы.Удалить(Элемент);
	КонецЦикла;
	Элементы.Удалить(Группа);
КонецПроцедуры

&НаСервере
Функция ОтрисоватьДополнительныеЗданияИПомещения() 
	Возврат Новый Структура("ИмяЗдания, ИмяПомещения",
		ОтрисоватьДополнительныеЗдания(),
		ОтрисоватьДополнительныеПомещения()
	);
КонецФункции

Функция ОтрисоватьДополнительныеЗдания() 
	
	Удалять = Новый Массив;
	Пока Элементы.ГруппаСтроенияДополнительно.ПодчиненныеЭлементы.Количество()>0 Цикл
		Группа = Элементы.ГруппаСтроенияДополнительно.ПодчиненныеЭлементы[0];
		Если ТипЗнч(Группа)=Тип("ГруппаФормы") Тогда
			Идентификатор = Сред(Группа.Имя, 1 + СтрДлина("ГруппаСтроение"));
			Если Не ПустаяСтрока(Идентификатор) Тогда
				Удалять.Добавить("ТипСтроения" + Идентификатор);
				Удалять.Добавить("Строение"    + Идентификатор);
				КомандаУдалить = Команды.Найти("УдалитьСтроение" + Идентификатор);
				Если КомандаУдалить<>Неопределено Тогда
					Команды.Удалить(КомандаУдалить);
				КонецЕсли;
			КонецЕсли;
			УдалитьГруппуЭлементов(Группа);
		Иначе
			Элементы.Удалить(Группа);
		КонецЕсли;
	КонецЦикла;
	ИзменитьРеквизиты(,Удалять);
	
	КоличествоЗданий = ДополнительныеЗдания.Количество()-1;
	КоличествоТипов  = Элементы.ТипСтроения.СписокВыбора.Количество()-2;
	
	Результат = Неопределено;
	Для НомерСтроки=0 По КоличествоЗданий Цикл
		Строка = ДополнительныеЗдания[НомерСтроки];
		Идентификатор = Формат(НомерСтроки, "ЧН=; ЧГ=");
		
		НоваяГруппа = Элементы.Добавить("ГруппаСтроение" + Идентификатор, Тип("ГруппаФормы"), Элементы.ГруппаСтроенияДополнительно);
		ЗаполнитьЗначенияСвойств(НоваяГруппа, Элементы.ГруппаСтроениеНачальное, , "ПутьКДаннымЗаголовка");
		
		НовыйТип = Элементы.Добавить("ТипСтроения" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
		ЗаполнитьЗначенияСвойств(НовыйТип, Элементы.ТипСтроения, , "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
		НовыйТип.СписокВыбора.ЗагрузитьЗначения(Элементы.ТипСтроения.СписокВыбора.ВыгрузитьЗначения());
		НовыйТип.УстановитьДействие("ПриИзменении", "Подключаемый_ТипСтроенияПриИзменении");
		
		НовыйЭлемент = Элементы.Добавить("Строение" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элементы.Строение, , "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
		НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(Элементы.Строение.СписокВыбора.ВыгрузитьЗначения());
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_СтроениеПриИзменении");
		
		Если НомерСтроки=КоличествоЗданий Тогда
			Результат = НовыйЭлемент.Имя;
		КонецЕсли;
		
		Добавлять = Новый Массив;
		Добавлять.Добавить(Новый РеквизитФормы(НовыйТип.Имя, Новый ОписаниеТипов("Строка")));
		Добавлять.Добавить(Новый РеквизитФормы(НовыйЭлемент.Имя, Новый ОписаниеТипов("Строка")));
		
		ИзменитьРеквизиты(Добавлять);
		ЭтотОбъект[НовыйТип.Имя]     = Строка.Тип;
		ЭтотОбъект[НовыйЭлемент.Имя] = Строка.Значение;
		
		НовыйТип.ПутьКДанным     = НовыйТип.Имя;
		НовыйЭлемент.ПутьКДанным = НовыйЭлемент.Имя;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
&НаКлиенте
Процедура Подключаемый_ТипСтроенияПриИзменении(Элемент)
	НомерСтроки = Сред(Элемент.Имя, 1 + СтрДлина("ТипСтроения"));
	СтрокаЗданий = ДополнительныеЗдания.Получить(НомерСтроки);
	СтрокаЗданий.Тип = ЭтотОбъект[Элемент.Имя];
	СтрокаЗданий.ПутьXPath = КонтактнаяИнформацияКлиентСерверПовтИсп.XPathНомераДополнительногоОбъектаАдресации(СтрокаЗданий.Тип);
	
	Контекст = КонтекстФормыКлиент();
	ОбновитьИндексИПредставление(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
	Модифицированность = Истина;
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_СтроениеПриИзменении(Элемент)
	НомерСтроки = Сред(Элемент.Имя, 1 + СтрДлина("Строение"));
	СтрокаЗданий = ДополнительныеЗдания.Получить(НомерСтроки);
	СтрокаЗданий.Значение = ЭтотОбъект[Элемент.Имя];
	
	Контекст = КонтекстФормыКлиент();
	ОбновитьИндексИПредставление(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ОтрисоватьДополнительныеПомещения()
	
	Удалять = Новый Массив;
	Пока Элементы.ГруппаПомещенияДополнительно.ПодчиненныеЭлементы.Количество()>0 Цикл
		Группа = Элементы.ГруппаПомещенияДополнительно.ПодчиненныеЭлементы[0];
		Если ТипЗнч(Группа)=Тип("ГруппаФормы") Тогда
			Идентификатор = Сред(Группа.Имя, 1 + СтрДлина("ГруппаПомещение"));
			Если Не ПустаяСтрока(Идентификатор) Тогда
				Удалять.Добавить("ТипПомещения" + Идентификатор);
				Удалять.Добавить("Помещение"    + Идентификатор);
				КомандаУдалить = Команды.Найти("УдалитьПомещение" + Идентификатор);
				Если КомандаУдалить<>Неопределено Тогда
					Команды.Удалить(КомандаУдалить);
				КонецЕсли;
			КонецЕсли;
			УдалитьГруппуЭлементов(Группа);
		Иначе
			Элементы.Удалить(Группа);
		КонецЕсли;
	КонецЦикла;
	ИзменитьРеквизиты(,Удалять);
	
	КоличествоПомещений = ДополнительныеПомещения.Количество()-1;
	КоличествоТипов     = Элементы.ТипПомещения.СписокВыбора.Количество()-2;
	
	Результат = Неопределено;
	Для НомерСтроки=0 По КоличествоПомещений Цикл
		Строка = ДополнительныеПомещения[НомерСтроки];
		Идентификатор = Формат(НомерСтроки, "ЧН=; ЧГ=");
		
		НоваяГруппа = Элементы.Добавить("ГруппаПомещение" + Идентификатор, Тип("ГруппаФормы"), Элементы.ГруппаПомещенияДополнительно);
		ЗаполнитьЗначенияСвойств(НоваяГруппа, Элементы.ГруппаПомещениеНачальное, , "ПутьКДаннымЗаголовка");
		
		НовыйТип = Элементы.Добавить("ТипПомещения" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
		ЗаполнитьЗначенияСвойств(НовыйТип, Элементы.ТипПомещения, , "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
		НовыйТип.СписокВыбора.ЗагрузитьЗначения(Элементы.ТипПомещения.СписокВыбора.ВыгрузитьЗначения());
		НовыйТип.УстановитьДействие("ПриИзменении", "Подключаемый_ТипПомещенияПриИзменении");
		
		НовыйЭлемент = Элементы.Добавить("Помещение" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элементы.Помещение, , "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
		НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(Элементы.Помещение.СписокВыбора.ВыгрузитьЗначения());
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПомещениеПриИзменении");
		
		Если НомерСтроки=КоличествоПомещений Тогда
			Результат = НовыйЭлемент.Имя;
		КонецЕсли;
		
		Добавлять = Новый Массив;
		Добавлять.Добавить(Новый РеквизитФормы(НовыйТип.Имя, Новый ОписаниеТипов("Строка")));
		Добавлять.Добавить(Новый РеквизитФормы(НовыйЭлемент.Имя, Новый ОписаниеТипов("Строка")));
		
		ИзменитьРеквизиты(Добавлять);
		ЭтотОбъект[НовыйТип.Имя]     = Строка.Тип;
		ЭтотОбъект[НовыйЭлемент.Имя] = Строка.Значение;
		
		НовыйТип.ПутьКДанным     = НовыйТип.Имя;
		НовыйЭлемент.ПутьКДанным = НовыйЭлемент.Имя;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура Подключаемый_ТипПомещенияПриИзменении(Элемент)
	НомерСтроки = Сред(Элемент.Имя, 1 + СтрДлина("ТипПомещения"));
	СтрокаПомещений = ДополнительныеПомещения.Получить(НомерСтроки);
	СтрокаПомещений.Тип = ЭтотОбъект[Элемент.Имя];
	СтрокаПомещений.ПутьXPath = КонтактнаяИнформацияКлиентСерверПовтИсп.XPathНомераДополнительногоОбъектаАдресации(СтрокаПомещений.Тип);
	
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
	Модифицированность = Истина;
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПомещениеПриИзменении(Элемент)
	НомерСтроки = Сред(Элемент.Имя, 1 + СтрДлина("Помещение"));
	СтрокаЗданий = ДополнительныеПомещения.Получить(НомерСтроки);
	СтрокаЗданий.Значение = ЭтотОбъект[Элемент.Имя];
	
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте 
Процедура СообщитьОбОшибкахЗаполнения(СписокОшибок, ПредупреждатьОбОтсутствии)
	
	ОчиститьСообщения();
	
	Если СписокОшибок.Количество()=0 И ПредупреждатьОбОтсутствии Тогда
		ПоказатьПредупреждение(, НСтр("ru='Адрес введен корректно.'"));
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из СписокОшибок Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Элемент.Представление,,,
			ПутьКДаннымФормыПоПутиXPath(Элемент.Значение)
		);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПутьКДаннымФормыПоПутиXPath(ПутьXPath) 
	
	Если ПутьXPath="СубъектРФ" Тогда
		Возврат "НаселенныйПункт";
		
	ИначеЕсли ПутьXPath="Округ" Тогда
		Возврат "НаселенныйПункт";
		
	ИначеЕсли ПутьXPath=КонтактнаяИнформацияКлиентСерверПовтИсп.XPathРайона() Тогда
		Возврат "НаселенныйПункт";
		
	ИначеЕсли ПутьXPath="Город" Тогда
		Возврат "НаселенныйПункт";
		
	ИначеЕсли ПутьXPath="ВнутригРайон" Тогда
		Возврат "НаселенныйПункт";
		
	ИначеЕсли ПутьXPath="НаселПункт" Тогда
		Возврат "НаселенныйПункт";
		
	ИначеЕсли ПутьXPath="Улица" Тогда
		Возврат "Улица";
		
	ИначеЕсли ПутьXPath=КонтактнаяИнформацияКлиентСерверПовтИсп.XPathПочтовогоИндекса() Тогда
		Возврат "Индекс";
		
	ИначеЕсли ПутьXPath=КонтактнаяИнформацияКлиентСерверПовтИсп.XPathНомераДополнительногоОбъектаАдресации(ТипДома) Тогда
		Возврат "Дом";
		
	ИначеЕсли ПутьXPath=КонтактнаяИнформацияКлиентСерверПовтИсп.XPathНомераДополнительногоОбъектаАдресации(ТипСтроения) Тогда
		Возврат "Строение";
		
	ИначеЕсли ПутьXPath=КонтактнаяИнформацияКлиентСерверПовтИсп.XPathНомераДополнительногоОбъектаАдресации(ТипПомещения) Тогда
		Возврат "Помещение";
		
	Иначе
		// Дополнительно добавленные
		Фильтр = Новый Структура("ПутьXPath", ПутьXPath);
		Строки = ДополнительныеЗдания.НайтиСтроки(Фильтр); 
		Если Строки.Количество()>0 Тогда
			Возврат "Строение" + Формат(ДополнительныеЗдания.Индекс(Строки[0]), "ЧН=; ЧГ=");
		КонецЕсли;
		
		Строки = ДополнительныеПомещения.НайтиСтроки(Фильтр); 
		Если Строки.Количество()>0 Тогда
			Возврат "Помещение" + Формат(ДополнительныеПомещения.Индекс(Строки[0]), "ЧН=; ЧГ=");
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
КонецФункции

&НаКлиенте
Процедура ОчиститьАдресКлиент()
	
	Контекст = КонтекстФормыКлиент();
	ОчиститьАдресСервер(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ОчиститьАдресСервер(Контекст)
	
	КлючСтраны = Контекст.СтраныДляПострочногоВвода.Получить(Контекст.Страна);
	Если КлючСтраны = Неопределено Тогда
		Контекст.ПредставлениеАдресаОднойСтрокой = "";
		Возврат;
	КонецЕсли;
	
	Контекст.Комментарий = "";
	
	Контекст.Индекс = Неопределено;
	
	Контекст.КодКлассификатораНаселенногоПункта = 0;
	Контекст.НаселенныйПунктНайденТочно         = Ложь;
	Контекст.НаселенныйПункт                    = "";
	Контекст.НаселенныйПунктДетально = КонтактнаяИнформацияСлужебный.СписокРеквизитовНаселенныйПункт(,?(КлючСтраны = Неопределено, "АдресУкраины", КлючСтраны));
	
	Контекст.КодКлассификатораУлицы = 0;
	Контекст.УлицаНайденаТочно      = Ложь;
	Контекст.Улица = "";
	
	Контекст.ТипДома      = КонтактнаяИнформацияКлиентСервер.ПервыйИлиПустой(Элементы.ТипДома.СписокВыбора);
	Контекст.ТипСтроения  = КонтактнаяИнформацияКлиентСервер.ПервыйИлиПустой(Элементы.ТипСтроения.СписокВыбора);
	Контекст.ТипПомещения = КонтактнаяИнформацияКлиентСервер.ПервыйИлиПустой(Элементы.ТипПомещения.СписокВыбора);
	
	Контекст.Дом       = "";
	Контекст.Строение  = "";
	Контекст.Помещение = "";
	
	Контекст.ДомНайденТочно = Ложь;
	
	Контекст.ДополнительныеЗдания.Очистить();
	Контекст.ДополнительныеПомещения.Очистить();
	
	XDTOКонтактнаяИнфо = КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст);
	СформироватьДетальныйНаселенныйПункт(Контекст, XDTOКонтактнаяИнфо.Состав);
	ЗаполнитьПредставлениеАдреса(Контекст, XDTOКонтактнаяИнфо);
	
	ОтрисоватьДополнительныеЗданияИПомещения();
КонецПроцедуры

&НаКлиенте
Функция НеиспользованныеЭлементыДополнительнойТаблицы(ТаблицаДанных, ЭлементИсточник, ЗначениеМаркера)
	Использованные = Новый Соответствие;
	Использованные.Вставить(ЭтотОбъект[ЭлементИсточник.Имя], Истина);
	Для Каждого Строка Из ТаблицаДанных Цикл
		Использованные.Вставить(Строка.Тип, Истина);
	КонецЦикла;
	
	Результат = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из ЭлементИсточник.СписокВыбора Цикл
		Если Использованные[ЭлементСписка.Значение]=Неопределено Тогда
			Результат.Добавить(ЗначениеМаркера, ЭлементСписка.Значение, ЭлементСписка.Пометка, ЭлементСписка.Картинка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура УстановитьКлючИспользованияФормы()
	
	КлючНазначенияИспользования = Строка(Страна);
	
	Количество = 0;
	Для Каждого Строка Из ДополнительныеЗдания Цикл
		Если Не ПустаяСтрока(Строка.Значение) Тогда
			Количество = Количество + 1;
		КонецЕсли;
	КонецЦикла;
	КлючНазначенияИспользования = КлючНазначенияИспользования + "/" + Формат(Количество, "ЧН=; ЧГ=");
	
	Количество = 0;
	Для Каждого Строка Из ДополнительныеПомещения Цикл
		Если Не ПустаяСтрока(Строка.Значение) Тогда
			Количество = Количество + 1;
		КонецЕсли;
	КонецЦикла;        
	КлючНазначенияИспользования = КлючНазначенияИспользования + "/" + Формат(Количество, "ЧН=; ЧГ=");
	
	Параметры.КлючНазначенияИспользования = КлючНазначенияИспользования;
КонецПроцедуры

// -------------------------------------------------------------------------------------------------
&НаСервереБезКонтекста
Функция РезультатыАвтоПодбораНаселенногоПункта(Текст, СкрыватьНеактуальныеАдреса=Ложь, ПредупреждатьОНеактуальных=Истина)
	Возврат КонтактнаяИнформацияСлужебный.РезультатыАвтоПодбораНаселенногоПункта(
		Текст, СкрыватьНеактуальныеАдреса, ПредупреждатьОНеактуальных
	);
КонецФункции
&НаСервереБезКонтекста
Функция НаселенныеПунктыПоПредставлению(Текст, СкрыватьНеактуальныеАдреса=Ложь, ВыбиратьСтрок=50)
	Возврат КонтактнаяИнформацияСлужебный.НаселенныеПунктыПоПредставлению(
		Текст, СкрыватьНеактуальныеАдреса, ВыбиратьСтрок
	);
КонецФункции
&НаСервереБезКонтекста
Функция РезультатыАвтоПодбораУлицы(КодНаселенногоПункта, Текст, СкрыватьНеактуальныеАдреса=Ложь, ПредупреждатьОНеактуальных=Истина)
	Возврат КонтактнаяИнформацияСлужебный.РезультатыАвтоПодбораУлицы(
		КодНаселенногоПункта, Текст, СкрыватьНеактуальныеАдреса, ПредупреждатьОНеактуальных
	);
КонецФункции
&НаСервереБезКонтекста
Функция УлицыПоПредставлению(КодНаселенногоПункта, Текст, СкрыватьНеактуальныеАдреса=Ложь, ВыбиратьСтрок=50)
	Возврат КонтактнаяИнформацияСлужебный.УлицыПоПредставлению(
		КодНаселенногоПункта, Текст, СкрыватьНеактуальныеАдреса, ВыбиратьСтрок
	);
КонецФункции
&НаСервереБезКонтекста
Функция ЯвляетсяПотомком(КодКлассификатораУлицы, КодКлассификатораНаселенногоПункта)
	Возврат КонтактнаяИнформацияСлужебный.ЯвляетсяПотомком(КодКлассификатораУлицы, КодКлассификатораНаселенногоПункта);
КонецФункции

// Преобразовываем Реквизиты формы <-> Структура
&НаКлиенте
Функция КонтекстФормыКлиент(НовыеДанные=Неопределено)
	СписокРеквизитов = "
		|ВидКонтактнойИнформации,
		|Страна, СтраныДляПострочногоВвода, СкрыватьНеактуальныеАдреса,
		|Индекс, ПредставлениеАдреса, ПредставлениеАдресаОднойСтрокой, Комментарий,
		|НаселенныйПункт, КодКлассификатораНаселенногоПункта, НаселенныйПунктДетально, НаселенныйПунктНайденТочно,
		|Улица, КодКлассификатораУлицы, УлицаНайденаТочно,
		|ТипДома, Дом, ДомНайденТочно, ТипСтроения, Строение, ТипПомещения, Помещение,
		|Широта,Долгота";
		
	СписокКоллекций = "ДополнительныеЗдания, ДополнительныеПомещения";
	
	Если НовыеДанные=Неопределено Тогда
		// Читаем
		Результат = Новый Структура(СписокРеквизитов + "," + СписокКоллекций);
		ЗаполнитьЗначенияСвойств(Результат, ЭтотОбъект, СписокРеквизитов + "," + СписокКоллекций);
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НовыеДанные, СписокРеквизитов, СписокКоллекций);
	ЗаполнитьЗначенияКоллекций(ЭтотОбъект, НовыеДанные, СписокКоллекций);
	
	Возврат НовыеДанные;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗначенияКоллекций(Приемник, Источник, СписокСвойств)
	Для Каждого КлючЗначение Из Новый Структура(СписокСвойств) Цикл
		ИмяСвойства = КлючЗначение.Ключ;
		СвойствоПриемник = Приемник[ИмяСвойства];
		СвойствоПриемник.Очистить();
		Для Каждого Значение Из Источник[ИмяСвойства] Цикл
			ЗаполнитьЗначенияСвойств(СвойствоПриемник.Добавить(), Значение);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры