
///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПустуюСтруктуруРезультата() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("ТаблицаТоваров" , Неопределено);
	Структура.Вставить("СоответствиеПолейСКДКолонкамТаблицыТоваров", Новый Соответствие);
	
	Возврат Структура;
	
КонецФункции

Функция ПолучитьПустуюСтруктуруНастроек() Экспорт
	
	//ИсходныеДанные = Новый ТаблицаЗначений;
	//ИсходныеДанные.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//ИсходныеДанные.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	//ИсходныеДанные.Колонки.Добавить("Упаковка",       Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	//ИсходныеДанные.Колонки.Добавить("Количество",     Новый ОписаниеТипов("Число"));
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИсходныеДанные"     , Неопределено); // Таблица с произвольными данными
	СтруктураНастроек.Вставить("ОбязательныеПоля"   , Новый Массив); //
	СтруктураНастроек.Вставить("СоответствиеШаблоновИСтруктурыШаблонов" , Новый Соответствие); //
	СтруктураНастроек.Вставить("ПараметрыДанных"    , Новый Структура);
	СтруктураНастроек.Вставить("КомпоновщикНастроек", Неопределено); // Отбор
	СтруктураНастроек.Вставить("ИмяМакетаСхемыКомпоновкиДанных" , Неопределено);
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, ИмяРеквизита) Экспорт
	
	Таблица = ТаблицаРеквизитыДокументов.Скопировать();
	Таблица.Свернуть(ИмяРеквизита);
	Возврат Таблица;
	
КонецФункции

// Функция подготавливает структуру данных, необходимую для печати ценников и этикеток.
//
// Возвращаемое значение:
//  Стрруктура - данные, необходимые для печати этикеток и ценников.
//
Функция ПодготовитьСтруктуруДанных(СтруктураНастроек) Экспорт
	
	СтруктураРезультата = ПолучитьПустуюСтруктуруРезультата();
	
	
	// Схема компоновки.
	СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет(СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных);
	
	// Подготовка компоновщика макета компоновки данных.
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
		
	// Отбор компоновщика настроек.
	Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
		//удаление невалидных отборов
		Количество = СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество();
		Для Индекс = 1 По Количество Цикл
			ЭлементОтбора = СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы[Количество - Индекс];
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
			Если СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
				СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
			КонецЕсли;
		КонецЦикла;		
		ОбщегоНазначенияРТКлиентСервер.СкопироватьЭлементы(Компоновщик.Настройки.Отбор, СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор);
		
	КонецЕсли;
	
	// Выбранные поля компоновщика настроек.
	Для Каждого ОбязательноеПоле Из СтруктураНастроек.ОбязательныеПоля Цикл
		ПолеСКД = НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле);
		Если ПолеСКД <> Неопределено Тогда
			ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ПолеСКД.Поле;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение параметров.
	Для Каждого ПараметрДанных Из СтруктураНастроек.ПараметрыДанных Цикл
		Если ПараметрДанных.Ключ = "Склад" Тогда // Если склад не заполнен - не используем параметр
			УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение, Ложь);
		Иначе
			УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение);
		КонецЕсли;
	КонецЦикла;
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущееВремя",        ТекущаяДата());
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	
	Для каждого Поле Из МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Поля Цикл
		СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить(Справочники.ХранилищеШаблонов.ИмяПоляВШаблоне(Поле.ПутьКДанным), Поле.Имя);
	КонецЦикла;
	
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	
	// Подмена запроса для расчета цен...
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда

		ЗаменяемыйТекст = "ЦеныНоменклатурыСрезПоследних.Цена";
		ТекстЗамены = " ВЫРАЗИТЬ(
					  |          ЦеныНоменклатурыСрезПоследних.Цена
					  |          / 
					  |          ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент, 1) 
					  |          * 
					  |          ЕСТЬNULL(ИсходныеДанныеПоследнийЗапрос.Упаковка.Коэффициент, 1) КАК Число(15,2)) ";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, ТекстЗамены);
		
	КонецЕсли;

	Если НЕ Запрос.Параметры.Свойство("УстановитьЦеныИзИсточника") Тогда

		Запрос.Параметры.Вставить("УстановитьЦеныИзИсточника", Ложь);

	КонецЕсли;

	// Подмена запроса при печати этикеток...
	Если СтруктураНастроек.ИсходныеДанные <> Неопределено Тогда

		ТекстВременнойТаблицы =
		//"(ВЫБРАТЬ
		//|ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
		//|ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
		//|ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
		//|0 КАК Количество,
		//|0 КАК Цена,
		//|0 КАК СтараяЦена,
		//|0 КАК ЗначениеСкидкиНаценки,
		//|ЗНАЧЕНИЕ(Перечисление.ТипСкидкиНаценки.ПустаяСсылка) КАК ТипСкидкиНаценки,
		//|ЗНАЧЕНИЕ(Справочник.СкидкиНаценки.ПустаяСсылка) КАК СкидкаНаценка,
		//|ЗНАЧЕНИЕ(Перечисление.ТипыПереоценок.ПустаяСсылка) КАК ТипПереоценки,		
		//|ВЫРАЗИТЬ(NULL КАК СТРОКА(100)) КАК ПричинаУценки,
		//|ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация)";
		"(ВЫБРАТЬ
		|ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
		|ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
		|ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
		|0 КАК Количество,
		|0 КАК Цена,
		|0 КАК СтараяЦена,
		|0 КАК ЗначениеСкидкиНаценки,
		|0 КАК БонусБазаНачислен,
		|0 КАК БонусАкцияСписан,		
		|ЗНАЧЕНИЕ(Перечисление.ТипСкидкиНаценки.ПустаяСсылка) КАК ТипСкидкиНаценки,
		|ЗНАЧЕНИЕ(Справочник.СкидкиНаценки.ПустаяСсылка) КАК СкидкаНаценка,
		|ЗНАЧЕНИЕ(Перечисление.ТипыПереоценок.ПустаяСсылка) КАК ТипПереоценки,
		|ВЫРАЗИТЬ(NULL КАК СТРОКА(100)) КАК ПричинаУценки,
		|ВЫРАЗИТЬ(NULL КАК СТРОКА(10)) КАК ОЧ,
		|ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация)"
		;
		ТекстВременнойТаблицы = СтрЗаменить(ТекстВременнойТаблицы, Символы.Таб, "");

		Запрос.Текст = СтрЗаменить(Запрос.Текст, Символы.Таб, "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицы, "&Таблица");

		Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЦенников""", "ИсходныеДанные.КоличествоЦенников");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЭтикеток""", "ИсходныеДанные.КоличествоЭтикеток");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЦенника"""     , "ИсходныеДанные.ШаблонЦенника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЭтикетки"""    , "ИсходныеДанные.ШаблонЭтикетки");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """Организация"""       , "ИсходныеДанные.Организация");

		Если СтруктураНастроек.ИсходныеДанные.Колонки.Найти("СтараяЦена") = Неопределено Тогда

			СтруктураНастроек.ИсходныеДанные.Колонки.Добавить("СтараяЦена", Новый ОписаниеТипов("Число"));

		КонецЕсли;
		
		Если СтруктураНастроек.ИсходныеДанные.Колонки.Найти("ОЧ") = Неопределено Тогда

			СтруктураНастроек.ИсходныеДанные.Колонки.Добавить("ОЧ", Новый ОписаниеТипов("Строка"));

		КонецЕсли;
		Если СтруктураНастроек.ИсходныеДанные.Колонки.Найти("ПричинаУценки") = Неопределено Тогда

			СтруктураНастроек.ИсходныеДанные.Колонки.Добавить("ПричинаУценки", Новый ОписаниеТипов("Строка"));

		КонецЕсли;
		Если СтруктураНастроек.ИсходныеДанные.Колонки.Найти("БонусАкцияСписан") = Неопределено Тогда

			СтруктураНастроек.ИсходныеДанные.Колонки.Добавить("БонусАкцияСписан", Новый ОписаниеТипов("Число"));

		КонецЕсли;
		Если СтруктураНастроек.ИсходныеДанные.Колонки.Найти("БонусАкцияСписан") = Неопределено Тогда

			СтруктураНастроек.ИсходныеДанные.Колонки.Добавить("БонусАкцияСписан", Новый ОписаниеТипов("Число"));

		КонецЕсли;

	//	LNK 09.08.2018 10:14:11	- после проверки структуры таблицы!
		Запрос.Параметры.Вставить("Таблица", СтруктураНастроек.ИсходныеДанные);

	КонецЕсли;
	
	СтруктураРезультата.ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	//+HVOYA YURA G. 06.10.2016 15:46:08
	Для  к=0 По СтруктураРезультата.ТаблицаТоваров.Количество()-1 Цикл
		Если ТипЗнч(СтруктураРезультата.ТаблицаТоваров[к].Номенклатура) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Если СтруктураРезультата.ТаблицаТоваров[к].Штрихкод  = NULL  Тогда
				Владелец = СтруктураРезультата.ТаблицаТоваров[к].Номенклатура;
				НомерСотрудника = ПолучитьНомер(Владелец);
				СтруктураРезультата.ТаблицаТоваров[к].Штрихкод = ПолучитьШрихкод(Владелец);
				НомерСотрудника = ПолучитьНомер(Владелец);
				НоменклатураНаименование = Строка(Строка(НомерСотрудника )+ " " +"-" +" "+ Строка(СтруктураРезультата.ТаблицаТоваров[к].НоменклатураНаименование));
				//СтруктураРезультата.ТаблицаТоваров[к].НоменклатураНаименование;
				СтруктураРезультата.ТаблицаТоваров[к].НоменклатураНаименование = НоменклатураНаименование;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//-HVOYA YURA G. 06.10.2016 15:46:20
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Функция подготавливает структуру данных, необходимую для печати ценников и этикеток.
//
// Возвращаемое значение:
//  Стрруктура - данные, необходимые для печати этикеток и ценников.
//
Функция ПодготовитьСтруктуруДанныхЦРМ(СтруктураНастроек) Экспорт
	
	СтруктураРезультата = ПолучитьПустуюСтруктуруРезультата();
	
	
	// Схема компоновки.
	СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет(СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных);
	
	// Подготовка компоновщика макета компоновки данных.
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
		
	// Отбор компоновщика настроек.
	Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
		//удаление невалидных отборов
		Количество = СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество();
		Для Индекс = 1 По Количество Цикл
			ЭлементОтбора = СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы[Количество - Индекс];
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
			Если СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
				СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
			КонецЕсли;
		КонецЦикла;		
		ОбщегоНазначенияРТКлиентСервер.СкопироватьЭлементы(Компоновщик.Настройки.Отбор, СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор);
		
	КонецЕсли;
	
	// Выбранные поля компоновщика настроек.
	Для Каждого ОбязательноеПоле Из СтруктураНастроек.ОбязательныеПоля Цикл
		ПолеСКД = НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле);
		Если ПолеСКД <> Неопределено Тогда
			ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ПолеСКД.Поле;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение параметров.
	Для Каждого ПараметрДанных Из СтруктураНастроек.ПараметрыДанных Цикл
		Если ПараметрДанных.Ключ = "Склад" Тогда // Если склад не заполнен - не используем параметр
			УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение, Ложь);
		Иначе
			УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение);
		КонецЕсли;
	КонецЦикла;
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущееВремя",        ТекущаяДата());
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	
	Для каждого Поле Из МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Поля Цикл
		СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить(Справочники.ХранилищеШаблонов.ИмяПоляВШаблоне(Поле.ПутьКДанным), Поле.Имя);
	КонецЦикла;
	
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	
	// Подмена запроса для расчета цен...
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда

		ЗаменяемыйТекст = "ЦеныНоменклатурыСрезПоследних.Цена";
		ТекстЗамены = " ВЫРАЗИТЬ(
					  |          ЦеныНоменклатурыСрезПоследних.Цена
					  |          / 
					  |          ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент, 1) 
					  |          * 
					  |          ЕСТЬNULL(ИсходныеДанныеПоследнийЗапрос.Упаковка.Коэффициент, 1) КАК Число(15,2)) ";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, ТекстЗамены);
		
	КонецЕсли;

	Если НЕ Запрос.Параметры.Свойство("УстановитьЦеныИзИсточника") Тогда

		Запрос.Параметры.Вставить("УстановитьЦеныИзИсточника", Ложь);

	КонецЕсли;

	// Подмена запроса при печати этикеток...
	Если СтруктураНастроек.ИсходныеДанные <> Неопределено Тогда

		ТекстВременнойТаблицы =
		//"(ВЫБРАТЬ
		//|ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
		//|ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
		//|ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
		//|0 КАК Количество,
		//|0 КАК Цена,
		//|0 КАК СтараяЦена,
		//|0 КАК ЗначениеСкидкиНаценки,
		//|ЗНАЧЕНИЕ(Перечисление.ТипСкидкиНаценки.ПустаяСсылка) КАК ТипСкидкиНаценки,
		//|ЗНАЧЕНИЕ(Справочник.СкидкиНаценки.ПустаяСсылка) КАК СкидкаНаценка,
		//|ЗНАЧЕНИЕ(Перечисление.ТипыПереоценок.ПустаяСсылка) КАК ТипПереоценки,		
		//|ВЫРАЗИТЬ(NULL КАК СТРОКА(100)) КАК ПричинаУценки,
		//|ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация)";
		"(ВЫБРАТЬ
		|ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
		|ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
		|ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
		|0 КАК Количество,
		|0 КАК Цена,
		|0 КАК СтараяЦена,
		|0 КАК ЗначениеСкидкиНаценки,
		|0 КАК БонусАкцияСписан,
		|0 КАК БонусБазаНачислен,
		|ЗНАЧЕНИЕ(Перечисление.ТипСкидкиНаценки.ПустаяСсылка) КАК ТипСкидкиНаценки,
		|ЗНАЧЕНИЕ(Справочник.СкидкиНаценки.ПустаяСсылка) КАК СкидкаНаценка,
		|ЗНАЧЕНИЕ(Перечисление.ТипыПереоценок.ПустаяСсылка) КАК ТипПереоценки,
		|ВЫРАЗИТЬ(NULL КАК СТРОКА(100)) КАК ПричинаУценки,
		|ВЫРАЗИТЬ(NULL КАК СТРОКА(10)) КАК ОЧ,
		|ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация)"
		;
		ТекстВременнойТаблицы = СтрЗаменить(ТекстВременнойТаблицы, Символы.Таб, "");

		Запрос.Текст = СтрЗаменить(Запрос.Текст, Символы.Таб, "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицы, "&Таблица");

		Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЦенников""", "ИсходныеДанные.КоличествоЦенников");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЭтикеток""", "ИсходныеДанные.КоличествоЭтикеток");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЦенника"""     , "ИсходныеДанные.ШаблонЦенника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЭтикетки"""    , "ИсходныеДанные.ШаблонЭтикетки");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """Организация"""       , "ИсходныеДанные.Организация");

		Если СтруктураНастроек.ИсходныеДанные.Колонки.Найти("СтараяЦена") = Неопределено Тогда

			СтруктураНастроек.ИсходныеДанные.Колонки.Добавить("СтараяЦена", Новый ОписаниеТипов("Число"));

		КонецЕсли;
		
		Если СтруктураНастроек.ИсходныеДанные.Колонки.Найти("ОЧ") = Неопределено Тогда

			СтруктураНастроек.ИсходныеДанные.Колонки.Добавить("ОЧ", Новый ОписаниеТипов("Строка"));

		КонецЕсли;
		Если СтруктураНастроек.ИсходныеДанные.Колонки.Найти("ПричинаУценки") = Неопределено Тогда

			СтруктураНастроек.ИсходныеДанные.Колонки.Добавить("ПричинаУценки", Новый ОписаниеТипов("Строка"));

		КонецЕсли;
		Если СтруктураНастроек.ИсходныеДанные.Колонки.Найти("ПричинаУценки") = Неопределено Тогда

			СтруктураНастроек.ИсходныеДанные.Колонки.Добавить("ПричинаУценки", Новый ОписаниеТипов("Строка"));

		КонецЕсли;
		Если СтруктураНастроек.ИсходныеДанные.Колонки.Найти("БонусАкцияСписан") = Неопределено Тогда

			СтруктураНастроек.ИсходныеДанные.Колонки.Добавить("БонусАкцияСписан",  Новый ОписаниеТипов("Число"));

		КонецЕсли;
		Если СтруктураНастроек.ИсходныеДанные.Колонки.Найти("БонусБазаНачислен") = Неопределено Тогда

			СтруктураНастроек.ИсходныеДанные.Колонки.Добавить("БонусБазаНачислен",  Новый ОписаниеТипов("Число"));

		КонецЕсли;
		Если СтруктураНастроек.ИсходныеДанные.Колонки.Найти("ДопХарактеристика") = Неопределено Тогда

			СтруктураНастроек.ИсходныеДанные.Колонки.Добавить("ДопХарактеристика",  Новый ОписаниеТипов("Число"));

		КонецЕсли;
		

	//	LNK 09.08.2018 10:14:11	- после проверки структуры таблицы!
		Запрос.Параметры.Вставить("Таблица", СтруктураНастроек.ИсходныеДанные);

	КонецЕсли;
	
	СтруктураРезультата.ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	//+HVOYA YURA G. 06.10.2016 15:46:08
	Для  к=0 По СтруктураРезультата.ТаблицаТоваров.Количество()-1 Цикл
		Если ТипЗнч(СтруктураРезультата.ТаблицаТоваров[к].Номенклатура) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Если СтруктураРезультата.ТаблицаТоваров[к].Штрихкод  = NULL  Тогда
				Владелец = СтруктураРезультата.ТаблицаТоваров[к].Номенклатура;
				НомерСотрудника = ПолучитьНомер(Владелец);
				СтруктураРезультата.ТаблицаТоваров[к].Штрихкод = ПолучитьШрихкод(Владелец);
				НомерСотрудника = ПолучитьНомер(Владелец);
				НоменклатураНаименование = Строка(Строка(НомерСотрудника )+ " " +"-" +" "+ Строка(СтруктураРезультата.ТаблицаТоваров[к].НоменклатураНаименование));
				//СтруктураРезультата.ТаблицаТоваров[к].НоменклатураНаименование;
				СтруктураРезультата.ТаблицаТоваров[к].НоменклатураНаименование = НоменклатураНаименование;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//-HVOYA YURA G. 06.10.2016 15:46:20
	
	Возврат СтруктураРезультата;
	
КонецФункции

//+HVOYA YURA G. 27.10.2016 13:59:02
Функция ПолучитьНомер(Владелец)
	
Возврат Владелец.НомерСотрудника;	

КонецФункции

//-HVOYA YURA G. 27.10.2016 13:59:04

//+HVOYA YURA G. 06.10.2016 16:13:44
//&НаСервере
Функция ПолучитьШрихкод(Владелец)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнформационныеКарты.Ссылка КАК ВладелецКарты
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|ГДЕ
		|	ИнформационныеКарты.ВладелецКарты.Ссылка = &Ссылка
		|	И ИнформационныеКарты.ТипКарты = &ТипКарты";
	
	Запрос.УстановитьПараметр("Ссылка", Владелец.Ссылка);
	Запрос.УстановитьПараметр("ТипКарты", Перечисления.ТипыИнформационныхКарт.Регистрационная);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	ВладелецКарты = ВыборкаДетальныеЗаписи.ВладелецКарты
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Штрихкоды.Штрихкод
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Владелец = &Владелец
		|	И Штрихкоды.ТипШтрихкода = &ТипШтрихкода";
	
	Запрос.УстановитьПараметр("Владелец", ВладелецКарты);
	Запрос.УстановитьПараметр("ТипШтрихкода", ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Штрихкод
	КонецЕсли;
	

КонецФункции
//-HVOYA YURA G. 06.10.2016 16:13:50

// Найти поле СКД по полному имени.
//
Функция НайтиПолеСКДПоПолномуИмени(Элементы, ПолноеИмя) Экспорт

	масЧастейИмен = ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя);
	колЧастей = масЧастейИмен.Количество();
	
	текИмя = масЧастейИмен[0];
	Поле = НайтиПолеСКДПоИмени(Элементы, текИмя);
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Сч = 2 По колЧастей Цикл
		текИмя = текИмя +"." + масЧастейИмен[Сч-1];
		Поле = НайтиПолеСКДПоИмени(Поле.Элементы, текИмя);
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Поле;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьИмяПараметраШтрихкод()
	
	Возврат "Штрихкод";
	
КонецФункции

// Функция определяет существует ли реквизит у формы.
//
Функция ЕстьРеквизитОбъекта(Объект, ИмяРеквизита)
	
	КлючУникальности   = Новый УникальныйИдентификатор;

	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);

	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

Функция УстановитьЗначениеПараметраСКД(КомпоновщикНастроек, ИмяПараметра, ЗначениеПараметра, ИспользоватьНеЗаполненный = Истина)
	
	ПараметрУстановлен = Ложь;
	
	ПараметрВидЦены = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЗначениеПараметраВидЦены = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрВидЦены);
	Если ЗначениеПараметраВидЦены <> Неопределено Тогда
		
		ЗначениеПараметраВидЦены.Значение = ЗначениеПараметра;
		ЗначениеПараметраВидЦены.Использование = ?(ИспользоватьНеЗаполненный, Истина, ЗначениеЗаполнено(ЗначениеПараметраВидЦены.Значение));
		
		ПараметрУстановлен = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрУстановлен;
	
КонецФункции

// Среди элементов полей СКД найти поле по имени.
//
Функция НайтиПолеСКДПоИмени(Элементы, Имя)
	
	Для Каждого Элемент Из Элементы Цикл
		Если ВРЕГ(Строка(Элемент.Поле)) = ВРЕГ(Имя) Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Полное имя поля разделить по частям
//
Функция ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя)

	масЧастей = Новый Массив;
	СтрИмя = ПолноеИмя;
	
	Пока Не ПустаяСтрока(СтрИмя) Цикл
		Если Лев(СтрИмя, 1) = "[" Тогда
			
			Поз = Найти(СтрИмя, "]");
			Если Поз = 0 Тогда
				масЧастей.Добавить(Сред(СтрИмя, 2));
				СтрИмя = "";
			Иначе
				масЧастей.Добавить(Сред(СтрИмя, 1, Поз));
				СтрИмя = Сред(СтрИмя, Поз + 2);
			КонецЕсли;
			
		Иначе
			
			Поз = Найти(СтрИмя, ".");
			Если Поз = 0 Тогда
				масЧастей.Добавить(СтрИмя);
				СтрИмя = "";
			Иначе
				масЧастей.Добавить(Лев(СтрИмя, Поз - 1));
				СтрИмя = Сред(СтрИмя, Поз + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат масЧастей;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Печать

// Функция формирует табличный документ с ценниками и этикетками.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма с ценниками и этикетками.
//
Функция СформироватьПечатныеФормыЭтикетокИЦенников(СтруктураНастроек, ПечататьЭтикетки, ПечататьЦенники)
	СуммаОЧДляВыводаНапечать = ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику().СуммаОплатыЧастямиДляЦенника;;
	ИмяДляПересчетыЦеныНаШТ= ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику().НазваниеХарактеристикиДляПересчета;
	ОбработкаФормированиеШтрихкодов = Обработки.ФормированиеШтрихкодов.Создать();
	КлючиПолитики = ОбменMicrosoftDynamicsПовтИсп.УчетнаяПолитика(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);
	Если КлючиПолитики.УправлениеЦенниками = Истина Тогда
		СтруктураРезультата = ПодготовитьСтруктуруДанныхЦРМ(СтруктураНастроек);
	Иначе
		СтруктураРезультата = ПодготовитьСтруктуруДанных(СтруктураНастроек);
	КонецЕсли;
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	// Подготовка коллекции печатных форм.
	КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("ТабличныйДокумент");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяКолонкиКоличество");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяКолонкиШаблон");
	КоллекцияПечатныхФорм.Колонки.Добавить("Шаблон");
	
	Для Каждого КлючИЗначение Из СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов Цикл
		Если ПечататьЭтикетки Тогда
			ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
			ПечатнаяФорма.ИмяМакета            = "Этикетка: "+КлючИЗначение.Ключ;
			ПечатнаяФорма.ИмяКолонкиКоличество = "КоличествоЭтикетокДляПечати";
			ПечатнаяФорма.ИмяКолонкиШаблон     = "ШаблонЭтикеткиДляПечати";
			ПечатнаяФорма.Шаблон = КлючИЗначение.Ключ;
		КонецЕсли;
		
		Если ПечататьЦенники Тогда
			ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
			ПечатнаяФорма.ИмяМакета            = "Ценник: " + КлючИЗначение.Ключ;
			ПечатнаяФорма.ИмяКолонкиКоличество = "КоличествоЦенниковДляПечати";
			ПечатнаяФорма.ИмяКолонкиШаблон     = "ШаблонЦенникаДляПечати";
			ПечатнаяФорма.Шаблон = КлючИЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;
	МаксНомерХарактеристики = ПолучитьМаксНомерХарактеристики();	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		
		НомерКолонки = 0;
		НомерРяда = 0;
		//+HVOYA YURA G. 27.10.2016 18:07:43
		//СтруктураРезультата.ТаблицаТоваров.Сортировать("НоменклатураВидНоменклатуры");
		//-HVOYA YURA G. 27.10.2016 18:07:46
		
		Для Каждого СтрокаТовары Из СтруктураРезультата.ТаблицаТоваров Цикл
			Цена = 1;
			Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) тогда
				Если ТипЗнч(СтрокаТовары.Номенклатура) = Тип("СправочникСсылка.Номенклатура") тогда
					Если ЗначениеЗаполнено(СтрокаТовары.СкидкаНаценка) И СтрокаТовары.ТипСкидкиНаценки = Перечисления.ТипСкидкиНаценки.НаПервуюПозицию тогда
						Если СтрокаТовары.ЗначениеСкидкиНаценки > 0  тогда
							Цена = СтрокаТовары.ЦенаЦелаяЧасть-СтрокаТовары.ЦенаЦелаяЧасть/100*СтрокаТовары.ЗначениеСкидкиНаценки ;
						КонецЕсли;
					Иначе	
						Цена = 	СтрокаТовары.ЦенаЦелаяЧасть;
					КонецЕсли;
					
					Если Цена > СуммаОЧДляВыводаНапечать тогда	
						ПечататьОЧ = Истина;
					Иначе
						ПечататьОЧ = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество] > 0 И СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон] = ПечатнаяФорма.Шаблон Тогда
				
				СтруктураШаблона = СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Получить(СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон]);
				
				Если ПечатнаяФорма.ТабличныйДокумент = Неопределено Тогда
					ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
				КонецЕсли;
				
				Если СтруктураШаблона <> Неопределено 
					И ТипЗнч(СтруктураШаблона) = Тип("Структура") Тогда
					
					Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
					
					// Применение настроек табличного документа.
					ЗаполнитьЗначенияСвойств(ПечатнаяФорма.ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
					
					Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
						Если ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
							НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(Справочники.ХранилищеШаблонов.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
							Если НаименованиеКолонки <> Неопределено Тогда
								//служебные поля
								Если ВРег(НаименованиеКолонки) = ВРег("ТекущееВремя") Тогда
									Область.Параметры[ПараметрШаблона.Значение] = Формат(СтрокаТовары[НаименованиеКолонки],"ДФ=dd.MM.yyyy");
								ИначеЕсли ВРег(НаименованиеКолонки) = ВРег("Цена") ИЛИ  ВРег(НаименованиеКолонки) = ВРег("ЦенаСоСкидкой") ИЛИ  ВРег(НаименованиеКолонки) = ВРег("СтараяЦена")  тогда
									Область.Параметры[ПараметрШаблона.Значение] = Формат(СтрокаТовары[НаименованиеКолонки],"ЧДЦ=2; ЧГ=3,0");
								ИначеЕсли ВРег(НаименованиеКолонки) = ВРег("ЦенаДробнаяЧасть") ИЛИ  ВРег(НаименованиеКолонки) = ВРег("ЦенасоСкидкойДробнаяЧасть") ИЛИ  ВРег(НаименованиеКолонки) = ВРег("СтараяЦенаДробнаяЧасть") тогда
									Если СтрокаТовары[НаименованиеКолонки] = 0 тогда 
										Область.Параметры[ПараметрШаблона.Значение] = "00"; 									
									Иначе
										Область.Параметры[ПараметрШаблона.Значение] = Прав(Формат(СтрокаТовары[НаименованиеКолонки],"ЧЦ=2; ЧДЦ=2"),2); 									
									КонецЕсли;	
								ИначеЕсли ВРег(НаименованиеКолонки) = ВРег("ЦенаЦелаяЧасть") ИЛИ  ВРег(НаименованиеКолонки) = ВРег("ЦенаСоСкидкойЦелаяЧасть") ИЛИ  ВРег(НаименованиеКолонки) = ВРег("СтараяЦенаЦелаяЧасть") ИЛИ  ВРег(НаименованиеКолонки) = ВРег("КэшБэк") тогда
									Область.Параметры[ПараметрШаблона.Значение] = Формат(СтрокаТовары[НаименованиеКолонки],"ЧДЦ=; ЧГ=3,0");
								//ИначеЕсли ВРег(НаименованиеКолонки) = ВРег("БонусАкцияСписан") тогда
								//	Если НЕ СтрокаТовары[НаименованиеКолонки] = 0 тогда
								//		Область.Параметры[ПараметрШаблона.Значение] =  "Сплачуй до " + Формат(СтрокаТовары[НаименованиеКолонки],"ЧДЦ=; ЧГ=3,0") +"% акц.бонусами." ;
								//	КонецЕсли;
								//ИначеЕсли ВРег(НаименованиеКолонки) = ВРег("БонусБазаНачислен") тогда
								//	Если НЕ СтрокаТовары[НаименованиеКолонки] = 0 тогда
								//		Область.Параметры[ПараметрШаблона.Значение] =  "Повертаємо " + Формат(СтрокаТовары[НаименованиеКолонки],"ЧДЦ=; ЧГ=3,0") +" бонусів." ;
								//	КонецЕсли; 						
								ИначеЕсли (ВРег(НаименованиеКолонки) = ВРег("МесячныйПлатеж") ИЛИ ВРег(НаименованиеКолонки) = ВРег("МесячныйПлатежАкция") или ВРег(НаименованиеКолонки) = ВРег("МесячныйПлатежПромо")) тогда
									Если ЗначениеЗаполнено(СтрокаТовары[НаименованиеКолонки]) тогда
										если  ПечататьОЧ тогда
											Если СтрокаТовары[НаименованиеКолонки] > 0 тогда
												Область.Параметры[ПараметрШаблона.Значение] =  "платежів до " + Формат(СтрокаТовары[НаименованиеКолонки],"ЧДЦ=; ЧГ=3,0") +" грн/міс" ;
											КонецЕсли; 	
										Иначе
											Область.Параметры[ПараметрШаблона.Значение] =  "";
										КонецЕсли;
									КонецЕсли;
								ИначеЕсли ВРег(НаименованиеКолонки) = ВРег("ОЧ")  тогда
									Если ЗначениеЗаполнено(СтрокаТовары[НаименованиеКолонки]) тогда
										если  ПечататьОЧ тогда
											Если СтрокаТовары[НаименованиеКолонки] > 0 тогда
												Область.Параметры[ПараметрШаблона.Значение] =  "ОЧ / кредит від " + Формат(СтрокаТовары[НаименованиеКолонки],"ЧДЦ=; ЧГ=3,0");
											КонецЕсли; 
										Иначе
												Область.Параметры[ПараметрШаблона.Значение] =  "";
										КонецЕсли;
									КонецЕсли;
									
								ИначеЕсли ВРег(НаименованиеКолонки) = ВРег("ДАТАНОВЫХЦЕН") тогда
									Если ЗначениеЗаполнено(СтрокаТовары[НаименованиеКолонки]) тогда
										Область.Параметры[ПараметрШаблона.Значение] =  Формат(СтрокаТовары[НаименованиеКолонки],"ДФ=dd.MM.yy");
									КонецЕсли;
									
								ИначеЕсли НаименованиеКолонки = 	"Осн1Знач" ИЛИ НаименованиеКолонки = 	"Осн2Знач" ИЛИ НаименованиеКолонки = 	"Осн3Знач" ИЛИ НаименованиеКолонки = 	"Осн4Знач" тогда
									Если СтрокаТовары[НаименованиеКолонки] = ИмяДляПересчетыЦеныНаШТ тогда
										Область.Параметры[ПараметрШаблона.Значение] = ПолучитьЦенуЗаШт(СтрокаТовары.Номенклатура,Цена);
									Иначе	
										Область.Параметры[ПараметрШаблона.Значение] = СтрокаТовары[НаименованиеКолонки];
									КонецЕсли;
								ИначеЕсли НаименованиеКолонки = 	"БонусАкцияСписан" ИЛИ НаименованиеКолонки = 	"БонусБазаНачислен"  тогда 
									Если ЗначениеЗаполнено(СтрокаТовары.ШаблонЦенникаДляПечати) тогда 
										ТипСкидкиНаценки = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаТовары.ШаблонЦенникаДляПечати,"ТипСкидкиНаценки");
										Если ТипСкидкиНаценки = Перечисления.ТипСкидкиНаценки.НаПервуюПозицию тогда
											ЦенаДляБонусов = СтрокаТовары.ЦенаСоСкидкойЦелаяЧасть + СтрокаТовары.ЦенаСоСкидкойЦелаяЧастьДробнаяЧасть/100;
										Иначе
											ЦенаДляБонусов = СтрокаТовары.ЦенаЦелаяЧасть + СтрокаТовары.ЦенаДробнаяЧасть/100;
										КонецЕсли;		
										Если СтрокаТовары.БонусБазаНачислен = 0 тогда // выводимсписаниебонусов
											ЦенаДляБонусов =  ЦенаДляБонусов* СтрокаТовары.БонусАкцияСписан/100;
											Если  ЦенаДляБонусов >= 1 тогда
												Область.Параметры[ПараметрШаблона.Значение] = "Сплачуй до " +Формат(ЦенаДляБонусов,"ЧДЦ=; ЧГ=3,0")+ " грн акц. бонусами";  									
											ИначеЕсли  ЦенаДляБонусов <> 0 тогда
												Область.Параметры[ПараметрШаблона.Значение] = "Сплачуй до " +Формат(СтрокаТовары.БонусАкцияСписан,"ЧДЦ=; ЧГ=3,0")+ "% акц. бонусами";  									
											КонецЕсли;
										Иначе
											ЦенаДляБонусов =  ЦенаДляБонусов* СтрокаТовары.БонусБазаНачислен/100;
											Если ЦенаДляБонусов >= 1 тогда
												Область.Параметры[ПараметрШаблона.Значение] = "Повертаємо до " +Формат(ЦенаДляБонусов,"ЧДЦ=; ЧГ=3,0")+ " бонусів"; 									
											ИначеЕсли  ЦенаДляБонусов <> 0 тогда
												Область.Параметры[ПараметрШаблона.Значение] = "Повертаємо до " +Формат(СтрокаТовары.БонусБазаНачислен,"ЧДЦ=; ЧГ=3,0")+ "% бонусами"; 									
											КонецЕсли;	
										КонецЕсли;
									КонецЕсли;
								Иначе
									Область.Параметры[ПараметрШаблона.Значение] = СтрокаТовары[НаименованиеКолонки];
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					НомерПорядка = 1;
					Для каждого Рисунок Из Область.Рисунки Цикл
						Если Лев(Рисунок.Имя,8) = ПолучитьИмяПараметраШтрихкод() Тогда
							
							ЗначениеШтрихкода = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(ПолучитьИмяПараметраШтрихкод())];
							Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
								
								ПараметрыШтрихкода = Новый Структура;
								ПараметрыШтрихкода.Вставить("Ширина",          Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
								ПараметрыШтрихкода.Вставить("Высота",          Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
								ПараметрыШтрихкода.Вставить("Штрихкод",        ЗначениеШтрихкода);
								ПараметрыШтрихкода.Вставить("ТипКода",         СтруктураШаблона.ТипКода);
								ПараметрыШтрихкода.Вставить("ОтображатьТекст", СтруктураШаблона.ОтображатьТекст);
								ПараметрыШтрихкода.Вставить("РазмерШрифта",    СтруктураШаблона.РазмерШрифта);
								Если СтруктураШаблона.Свойство("УголПоворота") Тогда
									ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
								КонецЕсли;
								Если ТипЗнч(СтрокаТовары.Номенклатура) = Тип("СправочникСсылка.ФизическиеЛица") тогда
									Рисунок.Картинка = МенеджерОборудованияСервер.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
								Иначе	
									Если СтрДлина(ЗначениеШтрихкода) = 12 тогда 
										ТипШтрихкода =  "EAN13";
									Иначе
										ТипШтрихкода =  "CODE39";
									КонецЕсли;
									Попытка
										Рисунок.Картинка = ОбработкаФормированиеШтрихкодов.ПолучитьКартинкуЛинейногоШК(ЗначениеШтрихкода,ТипШтрихкода,ФорматКартинки.WMF,Истина,,,Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе),Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе),1);
									Исключение
										Сообщить("Неправильный штрихкод "+ЗначениеШтрихкода);
									КонецПопытки;
									
										
									КонецЕсли;
							КонецЕсли;              	
						ИначеЕсли Лев(Рисунок.Имя,14) = "Характеристика" Тогда
							//Рисунок.Картинка =  Новый Картинка;
	                        Пока НомерПорядка < МаксНомерХарактеристики  цикл
								Картинка = ПолучитьКартинкуХарактеристики(СтрокаТовары.Номенклатура,НомерПорядка);
								НомерПорядка = НомерПорядка+1;
								Если Не Картинка = Неопределено тогда 
							  		Рисунок.Картинка =  Картинка;
									Прервать;
								КонецЕсли; 
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
					
					Для Инд = 1 По СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество] Цикл // Цикл по количеству экземпляров
						
						НомерКолонки = НомерКолонки + 1;
						
						Если НомерКолонки = 1 Тогда
							
							НомерРяда = НомерРяда + 1;
							
							ПечатнаяФорма.ТабличныйДокумент.Вывести(Область);
							
						Иначе
							
							ПечатнаяФорма.ТабличныйДокумент.Присоединить(Область);
							
						КонецЕсли;
						
						Если НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали И НомерРяда = СтруктураШаблона.КоличествоПоВертикали Тогда
							
							НомерРяда    = 0;
							НомерКолонки = 0;
							
							ПечатнаяФорма.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
							
						ИначеЕсли НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали Тогда
							
							НомерКолонки = 0;
							
						КонецЕсли;
						
					КонецЦикла; // Цикл по количеству экземпляров
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по строкам таблицы товаров
		
	КонецЦикла;
	
	МассивСтрокДляУдаления = Новый Массив;
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл

		ПечатнаяФорма.ТабличныйДокумент.Вывод = ИспользованиеВывода.Разрешить;

		Если ПечатнаяФорма.ТабличныйДокумент = Неопределено Тогда
			МассивСтрокДляУдаления.Добавить(ПечатнаяФорма);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ПечатнаяФорма Из МассивСтрокДляУдаления Цикл
		КоллекцияПечатныхФорм.Удалить(ПечатнаяФорма);
	КонецЦикла;
	
	Возврат КоллекцияПечатныхФорм;
	
КонецФункции

Функция ПолучитьКартинкуХарактеристики(Номенклатура,НомерПорядка)
	Картинка = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассификаторХарактеристикЦенников.Изображение КАК Изображение
		|ИЗ
		|	РегистрСведений.ХарактеристикиЦенников КАК ХарактеристикиЦенников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлассификаторХарактеристикЦенников КАК КлассификаторХарактеристикЦенников
		|		ПО ХарактеристикиЦенников.Имя = КлассификаторХарактеристикЦенников.Имя
		|			И ХарактеристикиЦенников.Номенклатура.IDNG = КлассификаторХарактеристикЦенников.Идентификатор
		|			И ХарактеристикиЦенников.Значение = КлассификаторХарактеристикЦенников.Значение
		|ГДЕ
		|	ХарактеристикиЦенников.Номенклатура = &Номенклатура
		|	И ХарактеристикиЦенников.Основной = ЛОЖЬ
		|	И ХарактеристикиЦенников.НомерПорядка = &НомерПорядка
		|	И НЕ КлассификаторХарактеристикЦенников.Изображение ЕСТЬ NULL
		|	И КлассификаторХарактеристикЦенников.Установлено = ИСТИНА";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("НомерПорядка", НомерПорядка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Картинка =   ВыборкаДетальныеЗаписи.Изображение.Получить();
	КонецЦикла;
	Возврат Картинка; 
КонецФункции

Функция ПолучитьЦенуЗаШт(Номенклатура,Цена)
	 ЦенаЗаШТ = "";
	     	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХарактеристикиЦенников.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ХарактеристикиЦенников КАК ХарактеристикиЦенников
		|ГДЕ
		|	ХарактеристикиЦенников.Номенклатура = &Номенклатура
		|	И ХарактеристикиЦенников.Имя =  &Имя";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Имя", ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику().ЗначениеХарактеристикиДляПересчета);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаКолШТ = СокрЛП(ВыборкаДетальныеЗаписи.Значение);
		КолШт = 1;
		Если  СтрДлина(СтрокаКолШТ) = 6 тогда 
			КолШт = Число(Лев(ВыборкаДетальныеЗаписи.Значение,3));
		ИначеЕсли  СтрДлина(СтрокаКолШТ) = 5 тогда
			КолШт = Число(Лев(ВыборкаДетальныеЗаписи.Значение,2));
		ИначеЕсли   СтрДлина(СтрокаКолШТ) = 4 тогда
			КолШт = Число(Лев(ВыборкаДетальныеЗаписи.Значение,1));
		КонецЕсли;
		Если КолШт > 0 тогда
			ЦенаЗаШТ = Формат(Цена/КолШт,"ЧДЦ=2") + " грн.";
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЦенаЗаШТ;	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецФункции

Функция ПолучитьМаксНомерХарактеристики()
	НомерПорядка = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ХарактеристикиЦенников.НомерПорядка) КАК НомерПорядка
		|ИЗ
		|	РегистрСведений.ХарактеристикиЦенников КАК ХарактеристикиЦенников";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НомерПорядка = ВыборкаДетальныеЗаписи.НомерПорядка-1;
	КонецЦикла;
	Возврат НомерПорядка; 
КонецФункции

//// Процедура печати документа.
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
		Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЦенникМебельА5") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЦенникМебельА5",
				"ЦенникМебельА5",
				ПечатьЦенникМебельА5(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,,Истина)
	ИначеЕсли 	УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплексныйА4Кроватки") Тогда
		
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КомплексныйА4Кроватки",
				"КомплексныйА4Кроватки",
				ПечатьЦенникМебельА4Кроватки(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,,Истина)
	ИначеЕсли 	УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплексныйА4Гарнитура") Тогда
		
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КомплексныйА4Гарнитура",
				"КомплексныйА4Гарнитура",
				ПечатьЦенникМебельА4Гарнитура(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,,Истина)
	ИначеЕсли 	УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплексныйА6Коляски") Тогда
		
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КомплексныйА6Коляски",
				"КомплексныйА6Коляски",
				ПечатьЦенникМебельА6Коляски(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,,Истина)
				
	Иначе
	СтруктураНастроек = ПолучитьПустуюСтруктуруНастроек();
	СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоЦенниковДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоЭтикетокДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЦенникаДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЭтикеткиДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
	СтруктураНастроек.ОбязательныеПоля.Добавить("СкидкаНаценка");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ЗначениеСкидкиНаценки");
	СтруктураНастроек.ОбязательныеПоля.Добавить("БонусАкцияСписан");
	СтруктураНастроек.ОбязательныеПоля.Добавить("БонусБазаНачислен");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ТипСкидкиНаценки");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ТипПереоценки");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ОЧ");
	СтруктураНастроек.ОбязательныеПоля.Добавить("КэшБэк");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ДопХарактеристика");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Упаковка");
	КонецЕсли;
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(МассивОбъектов[0].Магазин);
	Если ИспользоватьАссортимент Тогда
		ФорматМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МассивОбъектов[0].Магазин, "ФорматМагазина");
		СтруктураНастроек.ПараметрыДанных.Вставить("ФорматМагазина", ФорматМагазина);
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаАссортимент";
	Иначе
	КлючиПолитики = ОбменMicrosoftDynamicsПовтИсп.УчетнаяПолитика(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);		
	Если КлючиПолитики.УправлениеЦенниками = Истина Тогда
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаЦРМ";
	Иначе
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблона";
	КонецЕсли;
		
		
		
	КонецЕсли;
	
	// Собираем используемые поля из шаблонов.
	ТаблицаШаблонов = МассивОбъектов[0].Товары.Выгрузить(Новый Структура("Выбран", Истина), "ШаблонЭтикетки, ШаблонЦенника");
	СоответствиеШаблонов = Новый Соответствие;
	
	ПечататьЭтикетки = Истина;
	ПечататьЦенники = Истина;
	Если КоллекцияПечатныхФорм.Количество() > 0 Тогда
		ПечататьЦенники = КоллекцияПечатныхФорм[0].ИмяМакета = "Ценники";
		ПечататьЭтикетки = КоллекцияПечатныхФорм[0].ИмяМакета = "Этикетки";
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТаблицаШаблонов Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) И ПечататьЭтикетки Тогда
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЭтикетки);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЦенника) И ПечататьЦенники Тогда
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЦенника);
		КонецЕсли;
	КонецЦикла;
	
	// Заполняем коллекцию обязательных полей и формируем соответствие шаблонов.
	Для Каждого КлючИЗначение ИЗ СоответствиеШаблонов Цикл
		СтруктураШаблона = КлючИЗначение.Ключ.Шаблон.Получить();
		
		// Структура шаблонов.
		СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(КлючИЗначение.Ключ, СтруктураШаблона);
		
		// Добавляем в массив обязательных полей поля, присутствующие в печатной форме ценника.
		Если СтруктураШаблона <> Неопределено
			И ТипЗнч(СтруктураШаблона) = Тип("Структура")
			И СтруктураШаблона.Свойство("ПараметрыШаблона") Тогда
			Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
				СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	// Подготовка исходных данных.
	ИсходныеДанные = МассивОбъектов[0].Товары.Выгрузить(Новый Структура("Выбран", Истина), "Номенклатура, Характеристика, Упаковка, Цена, СтараяЦена, ПричинаУценки, КоличествоЭтикеток, КоличествоЦенников, ШаблонЭтикетки, ШаблонЦенника, Организация, СкидкаНаценка, ТипСкидкиНаценки, ТипПереоценки, ЗначениеСкидкиНаценки, ОЧ, БонусАкцияСписан, БонусБазаНачислен");
	Для Каждого СтрокаТЧ Из ИсходныеДанные Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) Тогда
			СтрокаТЧ.КоличествоЭтикеток = 0;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЦенника) Тогда
			СтрокаТЧ.КоличествоЦенников = 0;
		КонецЕсли;
	КонецЦикла;
	Если ПараметрыПечати.Режим = "ПечатьЭтикеток" Тогда
		ИсходныеДанные.ЗаполнитьЗначения(0,"КоличествоЦенников");
	КонецЕсли;
	Если ПараметрыПечати.Режим = "ПечатьЦенников" Тогда
		ИсходныеДанные.ЗаполнитьЗначения(0,"КоличествоЭтикеток");
	КонецЕсли;
	
	СтруктураНастроек.ПараметрыДанных.Вставить("ВидЦены",     МассивОбъектов[0].ВидЦены);
	СтруктураНастроек.ПараметрыДанных.Вставить("Магазин", МассивОбъектов[0].Магазин);
	СтруктураНастроек.ПараметрыДанных.Вставить("ПравилоЦенообразования", МассивОбъектов[0].ПравилоЦенообразования);
	СтруктураНастроек.ПараметрыДанных.Вставить("МагазинДляЦен", МассивОбъектов[0].Магазин);
	СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныПоВидуЦены", МассивОбъектов[0].ЦеныПоВидуЦены);
	СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныНаДату", МассивОбъектов[0].ЦеныНаДату);
	СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныНазначенныеДействующие", МассивОбъектов[0].ЦеныНазначенныеДействующие);
	
	
	СтруктураНастроек.ИсходныеДанные = ИсходныеДанные;
	
	// Вывод табличных документов в коллекцию.
	КоллекцияПечатныхФормВнутренняя = СформироватьПечатныеФормыЭтикетокИЦенников(СтруктураНастроек, ПечататьЭтикетки, ПечататьЦенники);
	КоллекцияПечатныхФорм.Очистить();
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФормВнутренняя Цикл
		
		НоваяФорма = КоллекцияПечатныхФорм.Добавить();
		НоваяФорма.ИмяМакета         = ПечатнаяФорма.ИмяМакета;
		НоваяФорма.СинонимМакета     = ПечатнаяФорма.ИмяМакета;
		НоваяФорма.ИмяВРЕГ           = ВРег(ПечатнаяФорма.ИмяМакета);
		НоваяФорма.ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
		НоваяФорма.Экземпляров       = 1;
		
	КонецЦикла;
	КонецЕсли;
КонецПроцедуры

	
Функция ПечатьЦенникМебельА5(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
ТабличныйДокумент  = Новый ТабличныйДокумент;
КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	
Макет = УправлениеПечатью.ПолучитьМакет("Обработка.ПечатьЭтикетокИЦенников.ЦенникМебельА5", КодЯзыкаПечать);
Область = Макет.ПолучитьОбласть("ОбластьСтрока1");

Запрос = Новый Запрос;
Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.НаименованиеПолное КАК Номенклатура,
		|	Таб.Цена КАК Цена,
		|	Таб.IDN КАК КодТовара,
		|	Таб.НомерКомплекта КАК НомерКомплекта
		|ПОМЕСТИТЬ ТабКомплект
		|ИЗ
		|	&Таб КАК Таб
		|ГДЕ
		|	НЕ Таб.НомерКомплекта = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабКомплект.Номенклатура КАК Номенклатура,
		|	ТабКомплект.Цена КАК Цена,
		|	ТабКомплект.НомерКомплекта КАК НомерКомплекта,
		|	ТабКомплект.КодТовара КАК КодТовара,
		|	СпрНоменклатура.Производитель.Наименование КАК Производитель,
		|	СпрНоменклатура.Артикул,
		|	СпрНоменклатура.Ссылка
		|ПОМЕСТИТЬ Таб2
		|ИЗ
		|	ТабКомплект КАК ТабКомплект
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО ТабКомплект.КодТовара = СпрНоменклатура.IDN
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НоменклатураДополнительныеРеквизиты.Значение КАК Страна,
		|	Таб2.Номенклатура,
		|	Таб2.Цена КАК Цена,
		|	Таб2.НомерКомплекта КАК НомерКомплекта,
		|	Таб2.КодТовара КАК КодТовара,
		|	Таб2.Производитель КАК Производитель,
		|	Таб2.Артикул КАК Артикул
		|ИЗ
		|	Таб2 КАК Таб2
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|		ПО Таб2.Ссылка = НоменклатураДополнительныеРеквизиты.Ссылка
		|			И (НоменклатураДополнительныеРеквизиты.Свойство = &Свойство)
		|ИТОГИ
		|	СУММА(Цена)
		|ПО
		|	НомерКомплекта";
	
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СтранаПроисхождения);
	Запрос.УстановитьПараметр("Таб", МассивОбъектов.Товары.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
	ВыборкаДетальныеЗаписи = Выборка.Выбрать();
	А = 1;
	СумаКомплекта = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если А = 3 тогда 		
			ТабличныйДокумент.Вывести(Область);
			Область = Макет.ПолучитьОбласть("ОбластьСтрока2");
	
		КонецЕсли;
	Область.Параметры["Цена"+А] = "Цена" + ВыборкаДетальныеЗаписи.Цена;	
	Область.Параметры["Артикул"+А] = "арт." +  ВыборкаДетальныеЗаписи.Артикул;	
	Область.Параметры["Производитель"+А] = ВыборкаДетальныеЗаписи.Производитель;	
	Область.Параметры["Страна"+А] = ВыборкаДетальныеЗаписи.Страна;	
	Область.Параметры["КодТовара"+А] = "к." + ВыборкаДетальныеЗаписи.КодТовара;
	Область.Параметры["Наименование"+А] = ВыборкаДетальныеЗаписи.Номенклатура;
	
	А = а +1;
	КонецЦикла;
	ТабличныйДокумент.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("ОбластьИтого");
	Область.Параметры.СуммаИтого = ""+ Выборка.Цена + " грн.";	
	ТабличныйДокумент.Вывести(Область);
    ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	Область = Макет.ПолучитьОбласть("ОбластьСтрока1");
	
КонецЦикла;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;	
	
	

Возврат   ТабличныйДокумент;
	
КонецФункции



Функция ПечатьЦенникМебельА5_(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
ТабличныйДокумент  = Новый ТабличныйДокумент;
КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	
Макет = УправлениеПечатью.ПолучитьМакет("Обработка.ПечатьЭтикетокИЦенников.ЦенникМебельА5", КодЯзыкаПечать);
Область = Макет.ПолучитьОбласть("ОбластьСтрока1");

Запрос = Новый Запрос;
Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.НаименованиеПолное КАК Номенклатура,
		|	Таб.Цена КАК Цена,
		|	Таб.IDN КАК КодТовара,
		|	Таб.СтараяЦена КАК СтараяЦена,
		|	Таб.НомерКомплекта КАК НомерКомплекта
		|ПОМЕСТИТЬ ТабКомплект
		|ИЗ
		|	&Таб КАК Таб
		|ГДЕ
		|	НЕ Таб.НомерКомплекта = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабКомплект.Номенклатура КАК Номенклатура,
		|	ТабКомплект.Цена КАК Цена,
		|	ТабКомплект.НомерКомплекта КАК НомерКомплекта,
		|	ТабКомплект.КодТовара КАК КодТовара,
		|	СпрНоменклатура.Производитель.Наименование КАК Производитель,
		|	СпрНоменклатура.Артикул КАК Артикул,
		|	СпрНоменклатура.Ссылка КАК Ссылка,
		|	ТабКомплект.СтараяЦена КАК СтараяЦена
		|ПОМЕСТИТЬ Таб2
		|ИЗ
		|	ТабКомплект КАК ТабКомплект
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО ТабКомплект.КодТовара = СпрНоменклатура.IDN
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Страна.Значение КАК Страна,
		|	Таб2.Номенклатура КАК Номенклатура,
		|	Таб2.Цена КАК Цена,
		|	Таб2.НомерКомплекта КАК НомерКомплекта,
		|	Таб2.КодТовара КАК КодТовара,
		|	Таб2.Производитель КАК Производитель,
		|	Таб2.Артикул КАК Артикул,
		|	Страна.Ссылка.Маржинальность КАК Маржинальность,
		|	Таб2.СтараяЦена КАК СтараяЦена
		|ИЗ
		|	Таб2 КАК Таб2
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Страна
		|		ПО Таб2.Ссылка = Страна.Ссылка
		|			И (Страна.Свойство = &Свойство)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Модель
		|		ПО (Таб2.Ссылка = Модель.Ссылка
		|				И Модель.Свойство = &Модель)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ТорговаяМарка
		|		ПО (Таб2.Ссылка = ТорговаяМарка.Ссылка
		|				И ТорговаяМарка.Свойство = &Модель)
		|ИТОГИ
		|	СУММА(Цена)
		|ПО
		|	НомерКомплекта";
	
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СтранаПроисхождения);
	Запрос.УстановитьПараметр("Таб", МассивОбъектов.Товары.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
	ВыборкаДетальныеЗаписи = Выборка.Выбрать();
	А = 1;
	СумаКомплекта = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если А = 1 тогда 
			Б = 1;
			Пока Б < 10 цикл
				//ТабличныйДокумент.Вывести(Область);
				//Область = Макет.ПолучитьОбласть("ОбластьСтрока2");
				Б = Б + 1;
			КонецЦикла;
		
		КонецЕсли;
		Если А = 3 тогда 		
			//ТабличныйДокумент.Вывести(Область);
			//Область = Макет.ПолучитьОбласть("ОбластьСтрока2");
	
		КонецЕсли;
	//Область.Параметры["Цена"+А] = "Цена" + ВыборкаДетальныеЗаписи.Цена;	
	//Область.Параметры["Артикул"+А] = "арт." +  ВыборкаДетальныеЗаписи.Артикул;	
	//Область.Параметры["Производитель"+А] = ВыборкаДетальныеЗаписи.Производитель;	
	//Область.Параметры["Страна"+А] = ВыборкаДетальныеЗаписи.Страна;	
	//Область.Параметры["КодТовара"+А] = "к." + ВыборкаДетальныеЗаписи.КодТовара;
	//Область.Параметры["Наименование"+А] = ВыборкаДетальныеЗаписи.Номенклатура;
	//
	А = а +1;
	КонецЦикла;
	ТабличныйДокумент.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("ОбластьИтого");
	Область.Параметры.СуммаИтого = ""+ Выборка.Цена + " грн.";	
	ТабличныйДокумент.Вывести(Область);
    ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	Область = Макет.ПолучитьОбласть("ОбластьСтрока1");
	
КонецЦикла;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;	
	
	

Возврат   ТабличныйДокумент;
	
КонецФункции

	
Функция ПечатьЦенникМебельА4Кроватки(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
ТабличныйДокумент  = Новый ТабличныйДокумент;
КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	
Макет = УправлениеПечатью.ПолучитьМакет("Обработка.ПечатьЭтикетокИЦенников.КомплексныйА4Кроватки", КодЯзыкаПечать);
Область = Макет.ПолучитьОбласть("ОбластьЦенник");

Запрос = Новый Запрос;
Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.НаименованиеПолное КАК Нааименование,
		|	Таб.Цена КАК Цена,
		|	Таб.IDN КАК КодТовара,
		|	Таб.НомерКомплекта КАК НомерКомплекта,
		|	Таб.НазваниеКомплекта КАК НазваниеКомплекта,
		|	Таб.СтараяЦена КАК СтараяЦена,
		|	Таб.Номенклатура КАК НоменклатураСсылка,
		|	Таб.ОЧ КАК ОЧ
		|ПОМЕСТИТЬ ТабКомплект
		|ИЗ
		|	&Таб КАК Таб
		|ГДЕ
		|	НЕ Таб.НомерКомплекта = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабКомплект.Цена КАК Цена,
		|	ТабКомплект.НомерКомплекта КАК НомерКомплекта,
		|	ТабКомплект.КодТовара КАК КодТовара,
		|	СпрНоменклатура.Производитель.Наименование КАК Производитель,
		|	СпрНоменклатура.Артикул КАК Артикул,
		|	СпрНоменклатура.Ссылка КАК Ссылка,
		|	ТабКомплект.ОЧ КАК ОЧ,
		|	ТабКомплект.НазваниеКомплекта КАК НазваниеКомплекта,		
		|	ТабКомплект.СтараяЦена КАК СтараяЦена,
		|	ТабКомплект.Нааименование КАК Нааименование,
		|	НоменклатураДополнительныеРеквизиты.Значение КАК Страна,
		|	СпрНоменклатура.Маржинальность КАК Маржинальность
		|ИЗ
		|	ТабКомплект КАК ТабКомплект
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО ТабКомплект.НоменклатураСсылка = СпрНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|		ПО ТабКомплект.НоменклатураСсылка = НоменклатураДополнительныеРеквизиты.Ссылка
		|			И (НоменклатураДополнительныеРеквизиты.Свойство = &Свойство)
		|ИТОГИ ПО
		|	НомерКомплекта";
	
	
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СтранаПроисхождения);
	Запрос.УстановитьПараметр("Таб", МассивОбъектов.Товары.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		Наименование = "";
		Цена = 0;
		СтараяЦена = 0;	
		СтараяЦенаДляПечати = 0;		
		
		ВыборкаДетальныеЗаписи = Выборка.Выбрать();
		СумаКомплекта = 0;
		А = 1;
		НомерКартинки = 1;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НомерПорядка = 1;
			Если А = 1 тогда 
				Область.Параметры["Маржинальность"] =  ВыборкаДетальныеЗаписи.Маржинальность;
				Область.Параметры["СтранаПроисхождения"] =  ВыборкаДетальныеЗаписи.Страна;
				ОЧ = ВыборкаДетальныеЗаписи.ОЧ;
				Область.Параметры["НаименованиеКомплекта"] = ВыборкаДетальныеЗаписи.НазваниеКомплекта;
			КонецЕсли;
			Наименование = Наименование + " " +ВыборкаДетальныеЗаписи.Нааименование;
			Цена = Цена + ВыборкаДетальныеЗаписи.Цена;
			СтараяЦена = СтараяЦена + ВыборкаДетальныеЗаписи.СтараяЦена;
			Если ВыборкаДетальныеЗаписи.СтараяЦена = 0 тогда
				//Область.Параметры["ціна"+А] = "ціна";
	//			Область.Параметры["стараціна"+А] = "";
				Область.Параметры["СтараяЦена"+А] = "";
				СтараяЦенаДляПечати = СтараяЦенаДляПечати +ВыборкаДетальныеЗаписи.Цена; 
			Иначе
				//Область.Параметры["ціна"+А] = "нова ціна";
//				Область.Параметры["стараціна"+А] = "стара ціна";
				Область.Параметры["СтараяЦена"+А] = Формат(ВыборкаДетальныеЗаписи.СтараяЦена,"ЧДЦ=") + " грн";
				СтараяЦенаДляПечати = СтараяЦенаДляПечати +ВыборкаДетальныеЗаписи.СтараяЦена; 
			КонецЕсли;
			Область.Параметры["Цена"+А] = Формат(ВыборкаДетальныеЗаписи.Цена,"ЧДЦ=") + " грн";
			Область.Параметры["КодТовара"+А] = ВыборкаДетальныеЗаписи.КодТовара;
			
			Область.Параметры["Наименование"+А] = ВыборкаДетальныеЗаписи.Нааименование;
			Пока  НомерКартинки < 10  цикл 	
				Если НомерПорядка = 10 тогда прервать КонецЕсли;
				Рисунок = ПолучитьКартинкуХарактеристики(ВыборкаДетальныеЗаписи.Ссылка,НомерПорядка);
				Если Рисунок <> Неопределено тогда
					Область.Рисунки["d"+НомерКартинки].Картинка = Рисунок;
					НомерКартинки = НомерКартинки +1;
				КонецЕсли;
				НомерПорядка = НомерПорядка +1;
			
			КонецЦикла;
		    А = А +1 ;		
		КонецЦикла;
		Если СтараяЦена = 0 тогда
			Область.Параметры["СтараяЦена"] = "";
			Область.Параметры["старацінанабору"] = "";	
			Область.Параметры["грн"] = "";	
		Иначе
			Область.Параметры["СтараяЦена"] = Формат(СтараяЦенаДляПечати,"ЧДЦ=");
			Область.Параметры["старацінанабору"] = "стара ціна набору";	
			Область.Параметры["грн"] = "грн";	
		КонецЕсли;
		Если ОЧ = 0 тогда 
			Область.Параметры["ОЧ"] = "";
			Область.Параметры["ПояснениеОЧ"] = "";
		Иначе
			Область.Параметры["ОЧ"] = "ОЧ/кредит до " + ОЧ + " платежів від " + Формат(Цена/ОЧ,"ЧДЦ=") + "грн./міс*" ;
			Область.Параметры["ПояснениеОЧ"] = "*сума платежу від повноі вартості набору";
		КонецЕсли;
		
		Область.Параметры["Цена"] = Формат(Цена,"ЧДЦ=");	
		Область.Параметры["ДатаПечати"] = Формат(МассивОбъектов.ЦеныНаДату,"ДФ=dd.MM.yy");
		ТабличныйДокумент.Вывести(Область);
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;	
		
	КонецЦикла;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	

Возврат   ТабличныйДокумент;
	
КонецФункции
	
Функция ПечатьЦенникМебельА6Коляски(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
ТабличныйДокумент  = Новый ТабличныйДокумент;
КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	
Макет = УправлениеПечатью.ПолучитьМакет("Обработка.ПечатьЭтикетокИЦенников.КомплексныйА6Коляски", КодЯзыкаПечать);
Область = Макет.ПолучитьОбласть("ОбластьЦенник");

Запрос = Новый Запрос;
Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.НаименованиеПолное КАК Нааименование,
		|	Таб.Цена КАК Цена,
		|	Таб.IDN КАК КодТовара,
		|	Таб.НомерКомплекта КАК НомерКомплекта,
		|	Таб.НазваниеКомплекта КАК НазваниеКомплекта,
		|	Таб.СтараяЦена КАК СтараяЦена,
		|	Таб.Номенклатура КАК НоменклатураСсылка,
		|	Таб.ОЧ КАК ОЧ
		|ПОМЕСТИТЬ ТабКомплект
		|ИЗ
		|	&Таб КАК Таб
		|ГДЕ
		|	НЕ Таб.НомерКомплекта = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабКомплект.Цена КАК Цена,
		|	ТабКомплект.НомерКомплекта КАК НомерКомплекта,
		|	ТабКомплект.КодТовара КАК КодТовара,
		|	СпрНоменклатура.Производитель.Наименование КАК Производитель,
		|	СпрНоменклатура.Артикул КАК Артикул,
		|	СпрНоменклатура.Ссылка КАК Ссылка,
		|	ТабКомплект.СтараяЦена КАК СтараяЦена,
		|	ТабВес.Значение КАК Вес,
		|	ТабРазмер.Значение КАК Размер,
		|	ТабКомплект.Нааименование КАК Нааименование,
		|	НоменклатураДополнительныеРеквизиты.Значение КАК Страна,
		|	ТабКомплект.ОЧ КАК ОЧ,
		|	ТабКомплект.НазваниеКомплекта КАК НазваниеКомплекта,
		|	СпрНоменклатура.Маржинальность КАК Маржинальность
		|ИЗ
		|	ТабКомплект КАК ТабКомплект
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО ТабКомплект.НоменклатураСсылка = СпрНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ХарактеристикиЦенников КАК ТабВес
		|		ПО ТабКомплект.НоменклатураСсылка = ТабВес.Номенклатура
		|			И (ТабВес.Имя = ""Вага"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ХарактеристикиЦенников КАК ТабРазмер
		|		ПО ТабКомплект.НоменклатураСсылка = ТабРазмер.Номенклатура
		|			И (ТабРазмер.Имя = ""Габарити"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|		ПО ТабКомплект.НоменклатураСсылка = НоменклатураДополнительныеРеквизиты.Ссылка
		|			И (НоменклатураДополнительныеРеквизиты.Свойство = &Свойство)
		|ИТОГИ ПО
		|	НомерКомплекта";
	
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СтранаПроисхождения);
	Запрос.УстановитьПараметр("Таб", МассивОбъектов.Товары.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	Пока Выборка.Следующий() Цикл
		Наименование = "";
		Цена = 0;
		СтараяЦена = 0;	
		СтараяЦенаДляПечати = 0;		
		
		ВыборкаДетальныеЗаписи = Выборка.Выбрать();
		СумаКомплекта = 0;
		А = 1;
		НомерКартинки = 1;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НомерПорядка = 1;                                                      
			Если А = 1 тогда 
				Область.Параметры["Маржинальность"] =  ВыборкаДетальныеЗаписи.Маржинальность;
				Область.Параметры["СтранаПроисхождения"] =  ВыборкаДетальныеЗаписи.Страна;
				ОЧ = ВыборкаДетальныеЗаписи.ОЧ;
				Область.Параметры["НаименованиеКомплекта"] = ВыборкаДетальныеЗаписи.НазваниеКомплекта;
			КонецЕсли;
			Наименование = Наименование + " " +ВыборкаДетальныеЗаписи.Нааименование;
			Цена = Цена + ВыборкаДетальныеЗаписи.Цена;
			СтараяЦена = СтараяЦена + ВыборкаДетальныеЗаписи.СтараяЦена;
			Если ВыборкаДетальныеЗаписи.СтараяЦена = 0 тогда
				Область.Параметры["СтараяЦена"+А] = "";
				СтараяЦенаДляПечати = СтараяЦенаДляПечати +ВыборкаДетальныеЗаписи.Цена; 
			Иначе
				Область.Параметры["СтараяЦена"+А] = Формат(ВыборкаДетальныеЗаписи.СтараяЦена,"ЧДЦ=") + " грн";
				СтараяЦенаДляПечати = СтараяЦенаДляПечати +ВыборкаДетальныеЗаписи.СтараяЦена; 
			КонецЕсли;
			Область.Параметры["Цена"+А] = Формат(ВыборкаДетальныеЗаписи.Цена,"ЧДЦ=") + " грн";
			Область.Параметры["КодТовара"+А] = ВыборкаДетальныеЗаписи.КодТовара;
			Область.Параметры["Наименование"+А] = ВыборкаДетальныеЗаписи.Нааименование;
			Область.Параметры["Характеристика"+А] = ВыборкаДетальныеЗаписи.Размер;
			Область.Параметры["Вага"+А] = ВыборкаДетальныеЗаписи.Вес;
			
			//Пока  НомерКартинки < 10  цикл 	
			//	Если НомерПорядка = 10 тогда прервать КонецЕсли;
			//	Рисунок = ПолучитьКартинкуХарактеристики(ВыборкаДетальныеЗаписи.Ссылка,НомерПорядка);
			//	Если Рисунок <> Неопределено тогда
			//		Область.Рисунки["d"+НомерКартинки].Картинка = Рисунок;
			//		НомерКартинки = НомерКартинки +1;
			//	КонецЕсли;
			//	НомерПорядка = НомерПорядка +1;
			//
			//КонецЦикла;
		    А = А +1 ;		
		КонецЦикла;
		Если СтараяЦена = 0 тогда
			Область.Параметры["СтараяЦена"] = "";
			Область.Параметры["старацінанабору"] = "";	
			Область.Параметры["грн"] = "";	
		Иначе
			Область.Параметры["СтараяЦена"] = Формат(СтараяЦенаДляПечати,"ЧДЦ=");
			Область.Параметры["старацінанабору"] = "стара ціна набору";	
			Область.Параметры["грн"] = "грн";	
		КонецЕсли;
		Если ОЧ = 0 тогда 
			Область.Параметры["ОЧ"] = "";
			Область.Параметры["ПояснениеОЧ"] = "";
		Иначе
			Область.Параметры["ОЧ"] = "ОЧ/кредит до " + ОЧ + " платежів від " + Формат(Цена/ОЧ,"ЧЦ=") + "грн./міс*" ;
			Область.Параметры["ПояснениеОЧ"] = "*сума платежу від повноі вартості набору";
		КонецЕсли;
		
		Область.Параметры["Цена"] =  Формат(Цена,"ЧДЦ=");	
		Область.Параметры["ДатаПечати"] = Формат(МассивОбъектов.ЦеныНаДату,"ДФ=dd.MM.yy");
		ТабличныйДокумент.Вывести(Область);
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;	
    ТабличныйДокумент.АвтоМасштаб            = Ложь;
    ТабличныйДокумент.МасштабПечати            = 50;
    ТабличныйДокумент.КоличествоЭкземпляров = 1; 
    ТабличныйДокумент.ЭкземпляровНаСтранице = 4;
	
	КонецЦикла;

Возврат   ТабличныйДокумент;
	
КонецФункции

	
Функция ПечатьЦенникМебельА4Гарнитура(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
ТабличныйДокумент  = Новый ТабличныйДокумент;
КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	
Макет = УправлениеПечатью.ПолучитьМакет("Обработка.ПечатьЭтикетокИЦенников.КомплексныйА4Гарнитура", КодЯзыкаПечать);
Область = Макет.ПолучитьОбласть("ОбластьЦенник");

Запрос = Новый Запрос;
Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.НаименованиеПолное КАК Нааименование,
		|	Таб.Цена КАК Цена,
		|	Таб.IDN КАК КодТовара,
		|	Таб.НомерКомплекта КАК НомерКомплекта,
		|	Таб.НазваниеКомплекта КАК НазваниеКомплекта,
		|	Таб.СтараяЦена КАК СтараяЦена,
		|	Таб.Номенклатура КАК НоменклатураСсылка,
		|	Таб.ОЧ КАК ОЧ
		|ПОМЕСТИТЬ ТабКомплект
		|ИЗ
		|	&Таб КАК Таб
		|ГДЕ
		|	НЕ Таб.НомерКомплекта = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабКомплект.Цена КАК Цена,
		|	ТабКомплект.НомерКомплекта КАК НомерКомплекта,
		|	ТабКомплект.КодТовара КАК КодТовара,
		|	СпрНоменклатура.Производитель.Наименование КАК Производитель,
		|	СпрНоменклатура.Артикул КАК Артикул,
		|	СпрНоменклатура.Ссылка КАК Ссылка,
		|	ТабКомплект.СтараяЦена КАК СтараяЦена,
		|	ТабРазмер.Значение КАК Размер,
		|	ТабКомплект.Нааименование КАК Нааименование,
		|	НоменклатураДополнительныеРеквизиты.Значение КАК Страна,
		|	ТабКомплект.ОЧ КАК ОЧ,
		|	ТабКомплект.НазваниеКомплекта КАК НазваниеКомплекта,
		|	СпрНоменклатура.Маржинальность КАК Маржинальность		
		|ИЗ
		|	ТабКомплект КАК ТабКомплект
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО ТабКомплект.НоменклатураСсылка = СпрНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ХарактеристикиЦенников КАК ТабРазмер
		|		ПО ТабКомплект.НоменклатураСсылка = ТабРазмер.Номенклатура
		|			И (ТабРазмер.Имя = ""Габарити"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|		ПО ТабКомплект.НоменклатураСсылка = НоменклатураДополнительныеРеквизиты.Ссылка
		|			И (НоменклатураДополнительныеРеквизиты.Свойство = &Свойство)
		|ИТОГИ ПО
		|	НомерКомплекта";
	
	
	
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СтранаПроисхождения);
	Запрос.УстановитьПараметр("Таб", МассивОбъектов.Товары.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		Наименование = "";
		Цена = 0;
		СтараяЦена = 0;	
		СтараяЦенаДляПечати = 0;		
		
		ВыборкаДетальныеЗаписи = Выборка.Выбрать();
		СумаКомплекта = 0;
		А = 1;
		НомерКартинки = 1;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НомерПорядка = 1;
			Если А = 1 тогда 
				Область.Параметры["Маржинальность"] =  ВыборкаДетальныеЗаписи.Маржинальность;
				Область.Параметры["СтранаПроисхождения"] =  ВыборкаДетальныеЗаписи.Страна;
				ОЧ = ВыборкаДетальныеЗаписи.ОЧ;
				Область.Параметры["НаименованиеКомплекта"] = ВыборкаДетальныеЗаписи.НазваниеКомплекта;
			КонецЕсли;
			Наименование = Наименование + " " +ВыборкаДетальныеЗаписи.Нааименование;
			Цена = Цена + ВыборкаДетальныеЗаписи.Цена;
			СтараяЦена = СтараяЦена + ВыборкаДетальныеЗаписи.СтараяЦена;
			Если ВыборкаДетальныеЗаписи.СтараяЦена = 0 тогда
				Область.Параметры["СтараяЦена"+А] = "";
				СтараяЦенаДляПечати = СтараяЦенаДляПечати +ВыборкаДетальныеЗаписи.Цена; 
			Иначе
				Область.Параметры["СтараяЦена"+А] = Формат(ВыборкаДетальныеЗаписи.СтараяЦена,"ЧДЦ=") + " грн";
				СтараяЦенаДляПечати = СтараяЦенаДляПечати +ВыборкаДетальныеЗаписи.СтараяЦена; 
			КонецЕсли;
			Область.Параметры["Цена"+А] = Формат(ВыборкаДетальныеЗаписи.Цена,"ЧДЦ=") + " грн";
			Область.Параметры["КодТовара"+А] = ВыборкаДетальныеЗаписи.КодТовара;
			Область.Параметры["Наименование"+А] = ВыборкаДетальныеЗаписи.Нааименование;
			Область.Параметры["Характеристика"+А] = ВыборкаДетальныеЗаписи.Размер;
			Пока  НомерКартинки < 10  цикл 	
				Если НомерПорядка = 10 тогда прервать КонецЕсли;
				Рисунок = ПолучитьКартинкуХарактеристики(ВыборкаДетальныеЗаписи.Ссылка,НомерПорядка);
				Если Рисунок <> Неопределено тогда
					Область.Рисунки["d"+НомерКартинки].Картинка = Рисунок;
					НомерКартинки = НомерКартинки +1;
				КонецЕсли;
				НомерПорядка = НомерПорядка +1;
			
			КонецЦикла;
		    А = А +1 ;		
		КонецЦикла;
		Если СтараяЦена = 0 тогда
			Область.Параметры["СтараяЦена"] = "";
			Область.Параметры["старацінанабору"] = "";	
			Область.Параметры["грн"] = "";	
		Иначе
			Область.Параметры["СтараяЦена"] = Формат(СтараяЦенаДляПечати,"ЧДЦ=");
			Область.Параметры["старацінанабору"] = "стара ціна набору";	
			Область.Параметры["грн"] = "грн";	
		КонецЕсли;
		Если ОЧ = 0 тогда 
			Область.Параметры["ОЧ"] = "";
			Область.Параметры["ПояснениеОЧ"] = "";
		Иначе
			Область.Параметры["ОЧ"] = "ОЧ/кредит до " + ОЧ + " платежів від " + Формат(Цена/ОЧ,"ЧЦ=") + "грн./міс*" ;
			Область.Параметры["ПояснениеОЧ"] = "*сума платежу від повноі вартості набору";
		КонецЕсли;
		
		Область.Параметры["Цена"] = Формат(Цена,"ЧДЦ=");	
		Область.Параметры["ДатаПечати"] = Формат(МассивОбъектов.ЦеныНаДату,"ДФ=dd.MM.yy");
		ТабличныйДокумент.Вывести(Область);
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;	
		
	КонецЦикла;
	

Возврат   ТабличныйДокумент;
	
КонецФункции

