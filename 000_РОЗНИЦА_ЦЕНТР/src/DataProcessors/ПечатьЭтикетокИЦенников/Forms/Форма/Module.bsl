
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьПрименениеЦен = ПолучитьФункциональнуюОпцию("ИспользоватьПрименениеЦен");
	
	ИспользоватьОбменСПодключаемымОборудованиемOffline = ПолучитьФункциональнуюОпцию("ИспользоватьОбменСПодключаемымОборудованиемOffline");
	
	ЗагрузитьНастройкиОтбораПоУмолчанию();
	
	СтруктураДанных = Новый Структура;
	
	Если ЗначениеЗаполнено(Параметры.АдресВХранилище) Тогда
		
		СтруктураДанных = ПолучитьИзВременногоХранилища(Параметры.АдресВХранилище);
		
		Объект.ИсходныеДанные.Загрузить(СтруктураДанных.Товары);
		
		Если ЗначениеЗаполнено(СтруктураДанных.СтруктураДействий) Тогда
			
			ПараметрДействия = Неопределено;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("УстановитьРежим", ПараметрДействия) Тогда
				УстановитьРежим(ПараметрДействия);
			Иначе
				ВызватьИсключение НСтр("ru = 'Режим печати не установлен'");
			КонецЕсли;

		//	LNK 02.11.2016 15:15:14
			Если СтруктураДанных.СтруктураДействий.Свойство("УстановитьЦеныИзИсточника", ПараметрДействия) Тогда

				Объект.УстановитьЦеныИзИсточника = ПараметрДействия;

			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьСклад", ПараметрДействия) Тогда
				УстановитьЭлементОтбораСКД(КомпоновщикНастроек, "Склад", ПараметрДействия, Истина);
			КонецЕсли;
			
			СтруктураДанных.СтруктураДействий.Свойство("РежимПечатиИзОбработки", ПараметрДействия);
			Объект.ПечатьИзОбработки = ПараметрДействия;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьМагазин", ПараметрДействия) Тогда
				
				Объект.Магазин = ПараметрДействия;
				
			КонецЕсли;

			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьПравилоЦенообразования", ПараметрДействия) Тогда
				Объект.ПравилоЦенообразования = ПараметрДействия;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьВидЦены", ПараметрДействия) Тогда
				Объект.ВидЦены = ПараметрДействия;
			КонецЕсли;

			Если СтруктураДанных.СтруктураДействий.Свойство("УстановитьСпособПолученияЦен", ПараметрДействия) Тогда
				Объект.ЦеныПоВидуЦены = ПараметрДействия;
				ЦеныПоВидуЦены = Число(Объект.ЦеныПоВидуЦены);
			Иначе
				ЦеныПоВидуЦены = 0;
			КонецЕсли;

			Если СтруктураДанных.СтруктураДействий.Свойство("УстановитьСостояниеЦен", ПараметрДействия) Тогда
				Объект.ЦеныНазначенныеДействующие = ПараметрДействия;
				ЦеныНазначенныеДействующие = Число(Объект.ЦеныНазначенныеДействующие);
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("УстановитьДатуПолученияЦен", ПараметрДействия) Тогда
				
				Объект.ЦеныНаДату = ПараметрДействия;
				
			Иначе
				
				Объект.ЦеныНаДату = ТекущаяДата();
				
			КонецЕсли;

			Если СтруктураДанных.СтруктураДействий.Свойство("ПоказыватьКолонкуКоличествоВДокументе", ПараметрДействия) Тогда
				Элементы.ТоварыКоличествоВДокументе.Видимость = ПараметрДействия;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("УстановитьРежимПечатиИзДокумента", ПараметрДействия) Тогда
				Объект.ПечатьИзДокумента = Истина;
				Элементы.Настройки.Видимость = Ложь;
			КонецЕсли;
			
			ЗаполнитьКоличествоЭтикетокПоДокументу = СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьКоличествоЭтикетокПоДокументу", ПараметрДействия);
			
			Если СтруктураДанных.СтруктураДействий.Свойство("СкрыватьКомандуЗаполненияПоДокументу", ПараметрДействия) Тогда
				Элементы.ЗаполнитьКоличествоЭтикетокПоДокументу.Видимость = Ложь;
				СкрыватьКомандуЗаполненияПоДокументу = Истина;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьТаблицуТоваров", ПараметрДействия) Тогда
				ЗаполнитьТаблицуТоваровНаСервере(Ложь);
			КонецЕсли;
			
		
			Если СтруктураДанных.СтруктураДействий.Свойство("ВидимостьГруппыЦен", ПараметрДействия) Тогда
				ВидимостьГруппыЦен = Истина;
			КонецЕсли;

		КонецЕсли;
		
		Если Объект.ПечатьИзДокумента Тогда
			МассивДокументов = Новый Массив;
			СтруктураДанных.Свойство("МассивДокументов", МассивДокументов);
			СписокДокументов.ЗагрузитьЗначения(МассивДокументов);
			Если ЗначениеЗаполнено(СтруктураДанных.МассивДокументов[0]) тогда
				Если ТипЗнч(СтруктураДанных.МассивДокументов[0]) = Тип("ДокументСсылка.ПеремещениеТоваров") ИЛИ ТипЗнч(СтруктураДанных.МассивДокументов[0]) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") тогда
					ПересчитатьЦеныСервер("","");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		// Вызов обработки из интерфейса
		
		ВосстановитьНастройкиНаСервере();
		ВидимостьГруппыЦен = Истина;
		Объект.Магазин = ОбщегоНазначенияРТСервер.ОпределитьТекущийМагазин();
		МагазинПриИзмененииСервер();
		Объект.ЦеныНаДату = ТекущаяДата();
		ЗаполнитьКоличествоЭтикетокПоДокументу = Ложь;
		Если НЕ ЗначениеЗаполнено(Объект.Режим) Тогда
			УстановитьРежимПечатьЦенниковИЭтикетокНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
	//+HVOYA Mykhailo
	Попытка
	   Объект.СтарыеЦеныНаДату = Объект.ЦеныНаДату;
	Исключение
	КонецПопытки;
	//-HVOYA Mykhailo
	
	УстановитьВидимостьЭлементов();
	ИзменитьДоступностьЭлементовПриИзмененииЦеныПоВидуЦены();
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьКнопкуПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		ПересчитатьЦены(Неопределено);
		УстановитьКнопкуПоУмолчанию();
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если (НЕ Объект.ПечатьИзДокумента)
		И (НЕ Объект.ПечатьИзОбработки) Тогда
		СохранитьНастройкиНаСервере();
	КонецЕсли;
	
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ЦеныПоВидуЦеныПриИзменении(Элемент)
	
	ЦеныПоВидуЦеныПриИзмененииСервер();
	ПересчитатьЦены(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Гиперссылка1Нажатие(Элемент)
	//ОткрытьЗначение(СписокДокументов.Получить(0).Значение);
	ПоказатьЗначение(,СписокДокументов.Получить(0).Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура Гиперссылка2Нажатие(Элемент)
	//ОткрытьЗначение(СписокДокументов.Получить(1).Значение);
	ПоказатьЗначение(,СписокДокументов.Получить(1).Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура Гиперссылка3Нажатие(Элемент)
	//ОткрытьЗначение(СписокДокументов.Получить(2).Значение);
	ПоказатьЗначение(,СписокДокументов.Получить(2).Значение);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеДокументыНажатие(Элемент)
	//ОткрытьЗначение(СписокДокументов);
	ПоказатьЗначение(,СписокДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	МагазинПриИзмененииСервер();
	ПересчитатьЦены(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПриИзменении(Элемент)
	
	ПересчитатьЦены(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныНаДатуПриИзменении(Элемент)
	
	ПересчитатьЦены(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныНазначенныеДействующиеПриИзменении(Элемент)
	
	ПересчитатьЦены(Неопределено);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "Товары"

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоЦенниковПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Выбран = ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Объект.Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоЭтикетокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Выбран = ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Объект.Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонЦенникаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Выбран = ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Объект.Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонЭтикеткиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Выбран = ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Объект.Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока = ТекущиеДанные.НомерСтроки - 1;
	
	Если НЕ ТекущиеДанные.Выбран Тогда
		
	Иначе
		
		ОчиститьСообщения();
		
		ТекущиеДанные.Выбран = Истина;
		
		Если Объект.Режим = "ПечатьЦенниковИЭтикеток" Тогда
			
			Если (       ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					И ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					И ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
					
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество ценников'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЦенников";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И    ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
					
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не выбран шаблон ценника'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].ШаблонЦенника";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
					
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество этикеток'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЭтикеток";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
					
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не выбран шаблон этикетки'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].ШаблонЭтикетки";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (   ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И    ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
					
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество ценников и(или) этикеток'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЦенников";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И    ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И    ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не выбраны шаблоны ценников и(или) этикеток'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].ШаблонЦенника";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество ценников и(или) этикеток'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЦенников";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли Объект.Режим = "ПечатьЭтикеток" Тогда
			
			Если ТекущиеДанные.КоличествоЭтикеток = 0 Тогда
			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество этикеток'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЭтикеток";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не выбран шаблон этикетки'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].ШаблонЭтикетки";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли Объект.Режим = "ПечатьЦенников" Тогда
			
			Если ТекущиеДанные.КоличествоЦенников = 0 Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество ценников'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЦенников";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не выбран шаблон ценника'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].ШаблонЦенника";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоЭтикетокПоДокументуПриИзменении(Элемент)
	
	ЗаполнитьКоличествоЦенниковИЭтикетокПоДокументуНаСервере();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыбратьСтроки()
	
	Количество = 0;
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
		
		Если СтрокаТЧ.Выбран Тогда
			Количество = Количество + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоВсего = Объект.Товары.Количество();
	
	ПоказатьОповещениеПользователюОВозможнойОшибке("", Количество, КоличествоВсего);
	
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку "Исключить платежки".
//
&НаКлиенте
Процедура ИсключитьСтроки()

	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.Выбран = Ложь
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку "Выбрать выделенные платежи".
//
&НаКлиенте
Процедура ВыбратьВыделенныеСтроки(Команда)
	
	Количество = 0;
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
		СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
		
		Если СтрокаТЧ.Выбран Тогда
			Количество = Количество + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоВсего = МассивСтрок.Количество();
	
	ПоказатьОповещениеПользователюОВозможнойОшибке("", Количество, КоличествоВсего);
	
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку "Исключить выделенные платежи".
//
&НаКлиенте
Процедура ИсключитьВыделенныеСтроки(Команда)
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
		СтрокаТЧ.Выбран = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоПоУмолчанию(Команда)
	
	Количество = 0;
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
		
		Если Объект.Режим = "ПечатьЭтикеток" ИЛИ Объект.Режим = "ПечатьЦенниковИЭтикеток" Тогда
			
			Если ЗаполнитьКоличествоЭтикетокПоДокументу Тогда
				СтрокаТЧ.КоличествоЭтикеток = СтрокаТЧ.КоличествоВДокументе;
			Иначе
				СтрокаТЧ.КоличествоЭтикеток = ?(СтрокаТЧ.ОстатокНаСкладе > 0, СтрокаТЧ.ОстатокНаСкладе, 0);
			КонецЕсли;
			
		КонецЕсли;
		
		// Расчет количества Ценников.
		Если Объект.Режим = "ПечатьЦенников" ИЛИ Объект.Режим = "ПечатьЦенниковИЭтикеток" Тогда
			
			СтрокаТЧ.КоличествоЦенников = 1;
			
		КонецЕсли;
		
		СтрокаТЧ.Выбран              = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
		
		Количество = Количество + 1;
		
	КонецЦикла;
	
	КоличествоВсего = МассивСтрок.Количество();
	
	Текст = НСтр("ru = 'Установлено количество по умолчанию для  %Количество% строк.'");
	Текст = СтрЗаменить(Текст, "%Количество%", КоличествоВсего);
	
	ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего);
		
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ОчиститьСообщения();
	Объект.НажатаПечать = Истина;
	
	
	Если Объект.Товары.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество() = 0 Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одного товара'"));
		Возврат;
		
	КонецЕсли;
	
	Если ЭтотОбъект.ПроверитьЗаполнение() Тогда
		
		ПараметрКоманды = Новый Массив;   // Добавим объект обработки печати ценников и этикеток в массив параметров печати.
		ПараметрКоманды.Добавить(Объект); // В дальнейшем будем обращаться к объекту через ПараметрКоманды[0]
		
		РежимПечати = "Ценники,Этикетки";
		Если Объект.Режим = "ПечатьЦенников" Тогда
			РежимПечати = "Ценники";
		ИначеЕсли Объект.Режим = "ПечатьЭтикеток" Тогда
			РежимПечати = "Этикетки";
		КонецЕсли;
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьЭтикетокИЦенников", // Для вызова метода менеджера обработки "Печать".
			РежимПечати,
			ПараметрКоманды,
			ЭтотОбъект, // Форма владелец
			Новый Структура("Режим", Объект.Режим));
		
		КонецЕсли;

		ПередатьРазмерыЦенниковДляЗаписи();
КонецПроцедуры

&НаСервере
Процедура  ПередатьРазмерыЦенниковДляЗаписи()
	ТабДляПечати = Объект.Товары.Выгрузить(,"Номенклатура,ШаблонЦенника,Выбран");
    ТабМ = Новый Массив;
	ТабМ.Добавить(ТабДляПечати);
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ТабМ);
	ФоновыеЗадания.Выполнить("РегламентныеЗаданияСервер.СохранитьРазмерыЦенников",ПараметрыЗадания,Новый УникальныйИдентификатор,"СохранитьРазмерыЦенников"); 
	//СохранитьРазмерыЦенников(ПараметрыЗадания);	
КонецПроцедуры


Процедура СохранитьРазмерыЦенников(Знач МассивТЗ) 
	Если ТипЗнч(МассивТЗ) = Тип("Массив") Тогда
		Для Каждого ТаблицаЗаписией Из МассивТЗ Цикл
			ЗаписатьВРегистр(ТаблицаЗаписией);
		КонецЦикла;
	Иначе
		ЗаписатьВРегистр(ТаблицаЗаписией);	
	КонецЕсли;

	
	
КонецПроцедуры


Процедура ЗаписатьВРегистр(ТаблицаЗаписией) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.Номенклатура КАК Номенклатура,
		|	Выразить(Таб.ШаблонЦенника КАК Справочник.ХранилищеШаблонов) КАК ШаблонЦенника
		|ПОМЕСТИТЬ Таб2
		|ИЗ
		|	&Таб КАК Таб
		|ГДЕ
		|	Таб.Выбран = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таб2.Номенклатура КАК Номенклатура,
		|	Таб2.ШаблонЦенника.РазмерЦенника КАК РазмерЦенника,
		|	РазмерыЦенников.РазмерЦенника КАК РазмерЦенника1
		|ИЗ
		|	Таб2 КАК Таб2
		|		ЛЕвое СОЕДИНЕНИЕ РегистрСведений.РазмерыЦенников КАК РазмерыЦенников
		|		ПО Таб2.Номенклатура = РазмерыЦенников.Номенклатура
		|			И (РазмерыЦенников.Магазин = &Магазин)
		|ГДЕ
		|	Таб2.ШаблонЦенника.РазмерЦенника <> РазмерыЦенников.РазмерЦенника ИЛИ (РазмерыЦенников.РазмерЦенника ЕСТЬ  NULL и  Таб2.ШаблонЦенника.РазмерЦенника <> ЗНАЧЕНИЕ(Перечисление.РазмерЦенника.ПустаяСсылка))
		|
		|СГРУППИРОВАТЬ ПО
		|	Таб2.Номенклатура,
		|	Таб2.ШаблонЦенника.РазмерЦенника,
		|	РазмерыЦенников.РазмерЦенника";
	
	Магазин = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин;
	Запрос.УстановитьПараметр("Магазин", Магазин); 	
	Запрос.УстановитьПараметр("Таб",ТаблицаЗаписией);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	
	
	
	
	Для каждого строка из РезультатЗапроса цикл
		
		НаборЗаписей = РегистрыСведений.РазмерыЦенников.СоздатьНаборЗаписей(); 

		НаборЗаписей.Отбор.Номенклатура.Установить(строка.Номенклатура);
		НаборЗаписей.Отбор.Магазин.Установить(Магазин); 

		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись. Номенклатура = строка.Номенклатура;
		НоваяЗапись.Магазин = Магазин;
		НоваяЗапись.РазмерЦенника = строка.РазмерЦенника; 

		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры





&НаКлиенте
Процедура ПоказатьСкрытьОтбор(Команда)
	
	ВидимостьОтбора = НЕ ВидимостьОтбора;
	Элементы.ГруппаОтбор.Видимость = ВидимостьОтбора;
	Элементы.Отбор.Заголовок = ?(ВидимостьОтбора, НСтр("ru = 'Скрыть отбор'"), НСтр("ru = 'Показать отбор'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоЦенников(Команда)
	
	ВыбранноеЗначение = Неопределено;
	Если ВвестиЧисло(ВыбранноеЗначение, НСтр("ru = 'Введите количество ценников'"), 10, 0) Тогда
		
		Количество = 0;
		
		МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.КоличествоЦенников  = ВыбранноеЗначение;
			СтрокаТЧ.Выбран              = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
			
			Если СтрокаТЧ.Выбран Тогда
				Количество = Количество + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		КоличествоВсего = МассивСтрок.Количество();
		
		Текст = НСтр("ru = 'Установлено количество ценников %Количество%.'");
		Текст = СтрЗаменить(Текст, "%Количество%", ВыбранноеЗначение);
		
		ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоЭтикеток(Команда)
	
	ВыбранноеЗначение = Неопределено;
	Если ВвестиЧисло(ВыбранноеЗначение, НСтр("ru = 'Введите количество'"), 10, 0) Тогда
		
		Количество = 0;
		
		МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.КоличествоЭтикеток  = ВыбранноеЗначение;
			СтрокаТЧ.Выбран              = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
			
			Если СтрокаТЧ.Выбран Тогда
				Количество = Количество + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		КоличествоВсего = МассивСтрок.Количество();
		
		Текст = НСтр("ru = 'Установлено количество этикеток %Количество%.'");
		Текст = СтрЗаменить(Текст, "%Количество%", ВыбранноеЗначение);
		
		ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШаблонЦенников(Команда)
	
	ВыбранноеЗначение = Неопределено;
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ТипШаблона", ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаЦенник")));
	ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.ХранилищеШаблонов.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект);
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Количество = 0;
		
		МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
			Если СтрокаТЧ <> Неопределено тогда 
				Если ТипЗнч(СтрокаТЧ.Номенклатура) = Тип("СправочникСсылка.Номенклатура") тогда 
					Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаТЧ.Номенклатура,"ТолькоОбычныйЦенник") тогда
						СтрокаТЧ.ШаблонЦенника = ПолучитьОбычныйШаблон(ВыбранноеЗначение);
					Иначе
						СтрокаТЧ.ШаблонЦенника  = ВыбранноеЗначение;
					КонецЕсли;
				Иначе
					СтрокаТЧ.ШаблонЦенника  = ВыбранноеЗначение;
				КонецЕсли;
			КонецЕсли;
			СтрокаТЧ.Выбран         = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
			
			Если СтрокаТЧ.Выбран Тогда
				Количество = Количество + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		КоличествоВсего = МассивСтрок.Количество();
		
		Текст = НСтр("ru = 'Установлен шаблон ""%Шаблон%"".'");
		Текст = СтрЗаменить(Текст, "%Шаблон%", ВыбранноеЗначение);
		
		ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШаблонЭтикеток(Команда)
	
	ВыбранноеЗначение = Неопределено;
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ТипШаблона", ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаЦенник")));
	ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.ХранилищеШаблонов.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект);
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Количество = 0;
		
		МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.ШаблонЭтикетки = ВыбранноеЗначение;
			СтрокаТЧ.Выбран         = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
			
			Если СтрокаТЧ.Выбран Тогда
				Количество = Количество + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		КоличествоВсего = МассивСтрок.Количество();
		
		Текст = НСтр("ru = 'Установлен шаблон ""%Шаблон%"".'");
		Текст = СтрЗаменить(Текст, "%Шаблон%", ВыбранноеЗначение);
		
		ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПечатьЦенников(Команда)
	
	УстановитьРежимПечатьЦенниковНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПечатьЦенниковИЭтикеток(Команда)
	
	УстановитьРежимПечатьЦенниковИЭтикетокНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПечатьЭтикеток(Команда)
	
	УстановитьРежимПечатьЭтикетокНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуТоваров(Команда)
	
	ОчиститьСообщения();
	Объект.НажатаПечать = Ложь;
	
	Если Объект.Товары.Количество() = 0 Тогда
		ЗаполнитьТаблицуТоваровНаСервере(Истина, Ложь);
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Сохранить данные о количестве, шаблонах в табличной части при перезаполнении?'");
		Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Да);
		Если Результат = КодВозвратаДиалога.Да Тогда
			ЗаполнитьТаблицуТоваровНаСервере(Истина, Истина);
		ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
			ЗаполнитьТаблицуТоваровНаСервере(Истина, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьКнопкуПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	ОчиститьСообщения();
	Объект.НажатаПечать = Ложь;
	
	Если Объект.Товары.Количество() <> 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Очистить таблицу товаров?'");
		Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Да);
		Если Результат = КодВозвратаДиалога.Да Тогда
			Объект.Товары.Очистить();
		ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПроверитьЗаполнениеФормыНаСервере() Тогда
		ПодобратьТоварыНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦены(Команда)
	ТекстСобытия = "";
	ТекстОповещения = "";
	ПересчитатьЦеныСервер(ТекстСобытия, ТекстОповещения);
	Если НЕ ПустаяСтрока(ТекстСобытия) Тогда
		ПоказатьОповещениеПользователя(ТекстСобытия, , ТекстОповещения);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УдалитьНепроверяемыеОтборыКомпоновщика()

	Количество = КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество();
	Для Индекс = 1 По Количество Цикл
		ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы[Количество - Индекс];

		Попытка

			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
			Если КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
				КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
			КонецЕсли;

		Исключение

		//	LNK 01.02.2017 17:17:30
			ТекстОшибки = ОписаниеОшибки();

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры
 

// Процедура выполняет загрузку настроек отбора из настроек по умолчанию.
//
&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию()
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюИспользованияАссортимента();
	Если ИспользоватьАссортимент Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ПоляШаблонаАссортимент");
	Иначе
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ПоляШаблона");
	КонецЕсли;
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтотОбъект.УникальныйИдентификатор))
	);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	УдалитьНепроверяемыеОтборыКомпоновщика();
	
КонецПроцедуры

&НаСервере
Функция УстановитьЭлементОтбораСКД(КомпоновщикНастроек, ИмяПараметра, ЗначениеПараметра, Использование = Истина)

	НайденныйЭлемент = Неопределено;
	
	Поле = Новый ПолеКомпоновкиДанных(ИмяПараметра);
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	Для каждого ЭлементОтбора Из Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
			НайденныйЭлемент = ЭлементОтбора;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденныйЭлемент = Неопределено Тогда
		НайденныйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
		НайденныйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.ЗагрузитьЗначения(ЗначениеПараметра);
		ПравоеЗначение = СписокЗначений;
	Иначе
		НайденныйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ПравоеЗначение = ЗначениеПараметра;
	КонецЕсли;
	
	НайденныйЭлемент.Использование  = Использование;
	НайденныйЭлемент.ЛевоеЗначение  = Поле;
	НайденныйЭлемент.ПравоеЗначение = ПравоеЗначение;
	
	Возврат НайденныйЭлемент;

КонецФункции

&НаКлиенте
Функция ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего)
	
	Если Количество < КоличествоВсего Тогда
		
		Текст = Текст
		        + ?(Текст <> "", Символы.ПС, "")
		        + НСтр("ru = 'Отметка выбора установлена для %КоличествоВыбранных% строк из %КоличествоВсего%.'");
	
		Текст = Текст
		        + Символы.ПС
		        + НСтр("ru = 'Проверьте: не заполнены либо количество, либо не задан шаблон ценника (этикетки). В этом случае отметка выбора для строк не может быть установлена.'");
	
		Текст = СтрЗаменить(Текст, "%КоличествоВыбранных%", Количество);
		Текст = СтрЗаменить(Текст, "%КоличествоВсего%", КоличествоВсего);
		
		ПоказатьОповещениеПользователя("Операция выполнена", ,Текст);
	
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьПравилоЦенообразования()
	
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		
		СтруктураНеобходимыхРеквизитов = Новый Структура;
		СтруктураНеобходимыхРеквизитов.Вставить("ПравилоЦенообразования", "ПравилоЦенообразования");
		СтруктураНеобходимыхРеквизитов.Вставить("ИспользоватьПрименениеЦен", "ИспользоватьПрименениеЦен");
		
		СтруктураМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Магазин, СтруктураНеобходимыхРеквизитов);
		Объект.ПравилоЦенообразования = СтруктураМагазина.ПравилоЦенообразования;
		
		Если СтруктураМагазина.ИспользоватьПрименениеЦен  И ИспользоватьПрименениеЦен Тогда
			
			Элементы.ЦеныНазначенныеДействующие.Доступность = Истина;
			Элементы.ЦеныНазначенныеДействующие.ТолькоПросмотр = Ложь;
			Элементы.ЦеныНазначенныеДействующие.КнопкаВыпадающегоСписка = Истина;
			
		Иначе
			
			Элементы.ЦеныНазначенныеДействующие.ТолькоПросмотр = Истина;  
			Элементы.ЦеныНазначенныеДействующие.КнопкаВыпадающегоСписка = Ложь;
			Если Объект.ЦеныНазначенныеДействующие Тогда
				Объект.ЦеныНазначенныеДействующие = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Объект.ПравилоЦенообразования = Справочники.ПравилаЦенообразования.ПустаяСсылка();
		Элементы.ЦеныНазначенныеДействующие.ТолькоПросмотр = Истина;
		Элементы.ЦеныНазначенныеДействующие.КнопкаВыпадающегоСписка = Ложь;
		Если Объект.ЦеныНазначенныеДействующие Тогда
			Объект.ЦеныНазначенныеДействующие = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(СтрокаТЧ)
	
	// Расчет количества Этикеток.
	Если Объект.Режим = "ПечатьЭтикеток" ИЛИ Объект.Режим = "ПечатьЦенниковИЭтикеток" Тогда
		
		Если ЗаполнитьКоличествоЭтикетокПоДокументу Тогда
			СтрокаТЧ.КоличествоЭтикеток = СтрокаТЧ.КоличествоВДокументе;
		Иначе
			СтрокаТЧ.КоличествоЭтикеток = ?(СтрокаТЧ.ОстатокНаСкладе > 0, СтрокаТЧ.ОстатокНаСкладе, 0);
		КонецЕсли;
		
	КонецЕсли;
	
	// Расчет количества Ценников.
	Если Объект.Режим = "ПечатьЦенников" ИЛИ Объект.Режим = "ПечатьЦенниковИЭтикеток" Тогда
		
		СтрокаТЧ.КоличествоЦенников = 1;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТоваровНаСервере(ПроверятьЗаполнение = Истина, Сохранять = Истина)
	
	Если ПроверятьЗаполнение И ЭтотОбъект.ПроверитьЗаполнение() = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	// Сохранение выбранных позиций для их последующего восстановления.
	Если Сохранять Тогда
		ТаблицаВыбранныеПозиции = Объект.Товары.Выгрузить();
	КонецЕсли;
	
	
	// Поля необходимые для вывода в таблицу товаров на форме.
	СтруктураНастроек = Обработки.ПечатьЭтикетокИЦенников.ПолучитьПустуюСтруктуруНастроек();
	
	СтруктураНастроек.ОбязательныеПоля.Добавить("Цена");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Штрихкод");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Количество");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Упаковка");
	КонецЕсли;
	Если ИспользоватьОбменСПодключаемымОборудованиемOffline Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("SKU");
	КонецЕсли;
	СтруктураНастроек.ОбязательныеПоля.Добавить("ОстатокНаСкладе");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Организация");
	СтруктураНастроек.ОбязательныеПоля.Добавить("СкидкаНаценка");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ТипСкидкиНаценки");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ЗначениеСкидкиНаценки");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ТипПереоценки");
	// Шаблоны этикеток и ценников.
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура.ВидНоменклатуры.ШаблонЭтикетки");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура.ВидНоменклатуры.ШаблонЦенника");
	СтруктураНастроек.ОбязательныеПоля.Добавить("БонусАкцияСписан");
	СтруктураНастроек.ОбязательныеПоля.Добавить("БонусБазаНачислен");
	
	СтруктураНастроек.ПараметрыДанных.Вставить("Магазин", Объект.Магазин);
	СтруктураНастроек.ПараметрыДанных.Вставить("ВидЦены"    , Объект.ВидЦены);
	СтруктураНастроек.ПараметрыДанных.Вставить("МагазинДляЦен"    , Объект.Магазин);
	СтруктураНастроек.ПараметрыДанных.Вставить("ПравилоЦенообразования" , Объект.ПравилоЦенообразования);
	СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныПоВидуЦены" , Объект.ЦеныПоВидуЦены);	
	СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныНаДату" , Объект.ЦеныНаДату);
	СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныНазначенныеДействующие", Объект.ЦеныНазначенныеДействующие);
	СтруктураНастроек.ПараметрыДанных.Вставить("УстановитьЦеныИзИсточника" , Объект.УстановитьЦеныИзИсточника);
	СтруктураНастроек.КомпоновщикНастроек = КомпоновщикНастроек;
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюИспользованияАссортимента();
	ОкончаниеИмениМакетаСхемыКомпоновкиДанных="";
	//Если ИспользоватьАссортимент Тогда
		СтруктураНастроек.ПараметрыДанных.Вставить("ФорматМагазина", Объект.Магазин.ФорматМагазина);
		ОкончаниеИмениМакетаСхемыКомпоновкиДанных="Ассортимент";
	//КонецЕсли;

	Если Объект.ИсходныеДанные.Количество() > 0 ИЛИ Объект.ПечатьИзДокумента Тогда
		КлючиПолитики = ОбменMicrosoftDynamicsПовтИсп.УчетнаяПолитика(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);
		Если КлючиПолитики.УправлениеЦенниками = Истина Тогда
			ОкончаниеИмениМакетаСхемыКомпоновкиДанных="АссортиментЦРМ";
		КонецЕсли;
		
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблона" + ОкончаниеИмениМакетаСхемыКомпоновкиДанных;
		СтруктураНастроек.ИсходныеДанные = Объект.ИсходныеДанные.Выгрузить();
	Иначе
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаБД" + ОкончаниеИмениМакетаСхемыКомпоновкиДанных;
	КонецЕсли;
	
	Объект.Товары.Очистить();
	
	// Загрузка сформированного списка товаров.
//	СтруктураРезультата = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьСтруктуруДанных(СтруктураНастроек);
	КлючиПолитики = ОбменMicrosoftDynamicsПовтИсп.УчетнаяПолитика(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);
	Если КлючиПолитики.УправлениеЦенниками = Истина Тогда
		СтруктураРезультата = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьСтруктуруДанныхЦРМ(СтруктураНастроек);
	Иначе
		СтруктураРезультата = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьСтруктуруДанных(СтруктураНастроек);
	КонецЕсли;
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", Новый Структура("Магазин, РабочееМесто", 
				Объект.Магазин, МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента()));
	СтруктураДействий.Вставить("ЗаполнитьОрганизациюПродажи", Новый Структура("Магазин", Объект.Магазин));
	
	Для Каждого СтрокаТЧ Из СтруктураРезультата.ТаблицаТоваров Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;
		
		Если ИспользоватьХарактеристикиНоменклатуры Тогда
			НоваяСтрока.Характеристика       = СтрокаТЧ.Характеристика;
		КонецЕсли;
		
		НоваяСтрока.НаименованиеПолное = СтрокаТЧ.Номенклатура.НаименованиеПолное;
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			НоваяСтрока.Упаковка             = СтрокаТЧ.Упаковка;
		КонецЕсли;
		
		НоваяСтрока.Цена                 = СтрокаТЧ.Цена;
		//+HVOYA Mykhailo
		Попытка
			НоваяСтрока.IDN              	 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Номенклатура,"IDN");//СтрокаТЧ.IDN;
			НоваяСтрока.Производитель   	 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Номенклатура,"Производитель");
			НоваяСтрока.СкидкаНаценка        = СтрокаТЧ.СкидкаНаценка;
			НоваяСтрока.ЗначениеСкидкиНаценки= СтрокаТЧ.ЗначениеСкидкиНаценки;
			НоваяСтрока.ТипСкидкиНаценки     = СтрокаТЧ.ТипСкидкиНаценки;
			НоваяСтрока.ТипПереоценки     	 = СтрокаТЧ.ТипПереоценки;
			НоваяСтрока.СтараяЦена       	 = СтрокаТЧ.СтараяЦена;	
			НоваяСтрока.ПричинаУценки    	 = СтрокаТЧ.ПричинаУценки; 
			НоваяСтрока.БонусБазаНачислен    = СтрокаТЧ.БонусБазаНачислен; 
			НоваяСтрока.БонусАкцияСписан     = СтрокаТЧ.БонусАкцияСписан; 
		Исключение
		КонецПопытки;
		//-HVOYA Mykhailo
		НоваяСтрока.Штрихкод             = СтрокаТЧ.Штрихкод;
		//НоваяСтрока.ШаблонЦенника        = СтрокаТЧ[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить("Номенклатура.ВидНоменклатуры.ШаблонЦенника")];
		Попытка
			Если ЗначениеЗаполнено(СтрокаТЧ.ТипПереоценки) тогда 
				Если СтрокаТЧ.ТипПереоценки = Перечисления.ТипыПереоценок.ПромоНачало тогда
					ТипСкидкиНаценки 		= Перечисления.ТипСкидкиНаценки.ПромоНачало;
					НоваяСтрока.СтараяЦена  = ПолучитьПервуюЦену(СтрокаТЧ.Номенклатура);
				Иначе
					ТипСкидкиНаценки = СтрокаТЧ.ТипСкидкиНаценки;
				КонецЕсли;
			Иначе
				ТипСкидкиНаценки = СтрокаТЧ.ТипСкидкиНаценки;
			КонецЕсли;  			
			НоваяСтрока.ШаблонЦенника        = ПолучитьШаблон(СтрокаТЧ.Номенклатура,ТипСкидкиНаценки);
			НоваяСтрока.ОЧ        			 = ПолучитьОЧ(СтрокаТЧ.Номенклатура);
		Исключение
		КонецПопытки;
		НоваяСтрока.ШаблонЭтикетки       = СтрокаТЧ[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить("Номенклатура.ВидНоменклатуры.ШаблонЭтикетки")];
		НоваяСтрока.ОстатокНаСкладе      = СтрокаТЧ.ОстатокНаСкладе;
		НоваяСтрока.КоличествоВДокументе = СтрокаТЧ.Количество;
		
		Если ИспользоватьОбменСПодключаемымОборудованиемOffline Тогда
			НоваяСтрока.SKU              = СтрокаТЧ.SKU;
		КонецЕсли;
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСкладПродажиВСтрокеТЧСервер(НоваяСтрока,СтруктураДействий,Неопределено);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьОрганизациюПродажиВСтрокеТЧСервер(НоваяСтрока,СтруктураДействий,Неопределено);
		
		УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(НоваяСтрока);
		
		// Восстановление позиций, сохраненных перед заполнением ТЧ. 
		Если Сохранять Тогда
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
			Если ИспользоватьХарактеристикиНоменклатуры Тогда
				ПараметрыОтбора.Вставить("Характеристика", НоваяСтрока.Характеристика);
			КонецЕсли;
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				ПараметрыОтбора.Вставить("Упаковка", НоваяСтрока.Упаковка);
			КонецЕсли;
			НайденныеСтроки = ТаблицаВыбранныеПозиции.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСтроки[0],"ШаблонЦенника, ШаблонЭтикетки, КоличествоЦенников, КоличествоЭтикеток");
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока.Выбран = ПроверитьВозможностьВыбораТовара(НоваяСтрока, Объект.Режим);
		
	КонецЦикла;
	
	Элементы.Товары.Обновить();
	
КонецПроцедуры


&НаСервере
Функция ПолучитьШаблон(Номенклатура,ТипСкидкиНаценки)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РазмерыЦенников.РазмерЦенника КАК РазмерЦенника
		|ИЗ
		|	РегистрСведений.РазмерыЦенников КАК РазмерыЦенников
		|ГДЕ
		|	РазмерыЦенников.Магазин = &Магазин
		|	И РазмерыЦенников.Номенклатура = &Номенклатура";
	
	Магазин = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин;	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() тогда
		
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РазмерЦенника =  ВыборкаДетальныеЗаписи.РазмерЦенника;
	КонецЦикла;
	Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(Номенклатура,"ТолькоОбычныйЦенник") тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ХранилищеШаблонов.Ссылка КАК ШаблонЦенника
			|ИЗ
			|	Справочник.ХранилищеШаблонов КАК ХранилищеШаблонов
			|ГДЕ
			|	ХранилищеШаблонов.РазмерЦенника = &РазмерЦенника
			|	И ХранилищеШаблонов.ОбычныйЦенник = ИСТИНА";  		
			Запрос.УстановитьПараметр("РазмерЦенника", РазмерЦенника);
	Иначе
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХранилищеШаблонов.Ссылка КАК ШаблонЦенника
		|ИЗ
		|	Справочник.ХранилищеШаблонов КАК ХранилищеШаблонов
		|ГДЕ
		|	ХранилищеШаблонов.РазмерЦенника = &РазмерЦенника
		|	И ХранилищеШаблонов.ТипСкидкиНаценки = &ТипСкидкиНаценки
		|	И ХранилищеШаблонов.Новинка = &Новинка
		|	И ХранилищеШаблонов.Эксклюзив = &Эксклюзив";
	
	
	Если ЗначениеЗаполнено(ТипСкидкиНаценки) тогда
		ТипСкидки = ТипСкидкиНаценки;
	Иначе
		ТипСкидки = Перечисления.ТипСкидкиНаценки.ПустаяСсылка();
	КонецЕсли;
		
	

	Если ТипСкидки = Перечисления.ТипСкидкиНаценки.Оптовая ИЛИ ТипСкидки =  Перечисления.ТипСкидкиНаценки.ПустаяСсылка() тогда 
		Если Номенклатура.Новинка и (Номенклатура.НовинкаДо > Объект.ЦеныНаДату) тогда
			 Новинка = Истина;
			 Эксклюзив = Ложь;
		Иначе
			 Новинка = Ложь;
			 Эксклюзив =   Номенклатура.Эксклюзив;
		КонецЕсли;
	Иначе
		 Новинка = Ложь;
		 Эксклюзив = Ложь; 
	КонецЕсли;
	Запрос.УстановитьПараметр("Новинка", Новинка);
	Запрос.УстановитьПараметр("РазмерЦенника", РазмерЦенника);
	Запрос.УстановитьПараметр("ТипСкидкиНаценки",ТипСкидки);
	Запрос.УстановитьПараметр("Эксклюзив",Эксклюзив);
	КонецЕсли;	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ШаблонЦенника = ВыборкаДетальныеЗаписи.ШаблонЦенника;
		КонецЦикла;
	Иначе
			ШаблонЦенника = Справочники.ХранилищеШаблонов.ПустаяСсылка();
	КонецЕсли;
	Иначе
			ШаблонЦенника = Справочники.ХранилищеШаблонов.ПустаяСсылка();
	
	КонецЕсли;
	Возврат	 ШаблонЦенника;
КонецФункции



&НаСервере
Функция ПолучитьШаблонПоРазмеру(Номенклатура,ТипСкидкиНаценки)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХранилищеШаблонов.Ссылка КАК ШаблонЦенника
		|ИЗ
		|	Справочник.ХранилищеШаблонов КАК ХранилищеШаблонов
		|ГДЕ
		|	ХранилищеШаблонов.РазмерЦенника = &РазмерЦенника
		|	И ХранилищеШаблонов.ТипСкидкиНаценки = &ТипСкидкиНаценки
		|	И ХранилищеШаблонов.Новинка = &Новинка
		|	И ХранилищеШаблонов.Эксклюзив = &Эксклюзив
		|	И ХранилищеШаблонов.ПометкаУдаления = ЛОЖЬ";
	
	

	Если ЗначениеЗаполнено(ТипСкидкиНаценки) тогда
		ТипСкидки = ТипСкидкиНаценки;
	Иначе
		ТипСкидки = Перечисления.ТипСкидкиНаценки.ПустаяСсылка();
	КонецЕсли;
		
	

	Если ТипСкидки = Перечисления.ТипСкидкиНаценки.Оптовая ИЛИ ТипСкидки =  Перечисления.ТипСкидкиНаценки.ПустаяСсылка() тогда 
		Если Номенклатура.Новинка и (Номенклатура.НовинкаДо > Объект.ЦеныНаДату) тогда
			 Новинка = Истина;
			 Эксклюзив = Ложь;
		Иначе
			 Новинка = Ложь;
			 Эксклюзив =   Номенклатура.Эксклюзив;
		КонецЕсли;
	Иначе
		 Новинка = Ложь;
		 Эксклюзив = Ложь; 
	КонецЕсли;
	Запрос.УстановитьПараметр("Новинка", Новинка);
	Запрос.УстановитьПараметр("РазмерЦенника", Объект.РазмерЦенника);
	Запрос.УстановитьПараметр("ТипСкидкиНаценки",ТипСкидки);
	Запрос.УстановитьПараметр("Эксклюзив",Эксклюзив);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ШаблонЦенника = ВыборкаДетальныеЗаписи.ШаблонЦенника;
		КонецЦикла;
	Иначе
			ШаблонЦенника = Справочники.ХранилищеШаблонов.ПустаяСсылка();
	КонецЕсли;
	Возврат	 ШаблонЦенника;
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Режим)
	
	Если Режим = "ПечатьЦенниковИЭтикеток" Тогда
	
		Если (ТекущиеДанные.КоличествоЦенников = 0)
			И ТекущиеДанные.КоличествоЭтикеток = 0 Тогда
			
			Возврат Ложь;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
			И НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки) Тогда
			
			Возврат Ложь;
			
		ИначеЕсли (ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
			      И НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)) Тогда
		//	      И ТекущиеДанные.КоличествоЭтикеток <> 0
		//	      И ТекущиеДанные.КоличествоЦенников = 0) Тогда

			Возврат Ложь;
			
		ИначеЕсли (НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
			      И ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)) Тогда
		//	      И ТекущиеДанные.КоличествоЭтикеток = 0
		//	      И ТекущиеДанные.КоличествоЦенников <> 0) Тогда
			
			Возврат Ложь;
			
		Иначе
			
			Возврат Истина;
			
		КонецЕсли;
	
	ИначеЕсли Режим = "ПечатьЭтикеток" Тогда
		
		Если ТекущиеДанные.КоличествоЭтикеток = 0 ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки) Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли Режим = "ПечатьЦенников" Тогда
		
		Если ТекущиеДанные.КоличествоЦенников = 0 ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника) Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Процедура устанавливает видимость элементов в зависимости от настройки параметров формы
//
&НаСервере
Процедура ОбновитьВидимостьЭлементов()
	
	ВидимостьЭтикетки = Ложь;
	ВидимостьЦенники  = Ложь;
	ДоступностьРежимЗаполнения = Истина;
	
	Если Объект.Режим = "ПечатьЦенниковИЭтикеток" Тогда
		ВидимостьЭтикетки = Истина;
		ВидимостьЦенники  = Истина;
	ИначеЕсли Объект.Режим = "ПечатьЦенников" Тогда
		ВидимостьЭтикетки = Ложь;
		ВидимостьЦенники  = Истина;
		ДоступностьРежимЗаполнения = Ложь;
	ИначеЕсли Объект.Режим = "ПечатьЭтикеток" Тогда
		ВидимостьЭтикетки = Истина;
		ВидимостьЦенники  = Ложь;
	КонецЕсли;
	
	Элементы.ТоварыКоличествоЭтикеток.Видимость               = ВидимостьЭтикетки;
	Элементы.ТоварыШаблонЭтикетки.Видимость                   = ВидимостьЭтикетки;
	Элементы.ТоварыУстановитьШаблонЭтикеток.Видимость         = ВидимостьЭтикетки;
	Элементы.ТоварыУстановитьКоличествоЭтикеток.Видимость     = ВидимостьЭтикетки;
	Элементы.ЗаполнитьКоличествоЭтикетокПоДокументу.Видимость = ВидимостьЭтикетки И Объект.ПечатьИзДокумента И НЕ СкрыватьКомандуЗаполненияПоДокументу;
	
	Элементы.ТоварыКоличествоЦенников.Видимость               = ВидимостьЦенники;
	Элементы.ТоварыШаблонЦенника.Видимость                    = ВидимостьЦенники;
	Элементы.ТоварыУстановитьШаблонЦенников.Видимость         = ВидимостьЦенники;
	Элементы.ТоварыУстановитьКоличествоЦенников.Видимость     = ВидимостьЦенники;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПечатьЦенниковНаСервере()
	
	АвтоЗаголовок = Ложь;
	ПереключениеРежима = ?(Объект.Режим <> "ПечатьЦенников", Истина, Ложь);
	Объект.Режим = "ПечатьЦенников";
	
	Если Объект.ПечатьИзДокумента Тогда
		Заголовок = НСтр("ru = 'Печать ценников из документа'");
	ИначеЕсли Объект.ПечатьИзОбработки Тогда
		Заголовок = НСтр("ru = 'Печать ценников из обработки ""Применение цен номенклатуры"" '");
	Иначе
		Заголовок = НСтр("ru = 'Печать ценников'");
	КонецЕсли;
	
	ОбновитьВидимостьЭлементов();
	Если ПереключениеРежима Тогда
		ПроверитьВыборСтрокПриПереключенииРежимаПечати();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПечатьЦенниковИЭтикетокНаСервере()
	
	АвтоЗаголовок = Ложь;
	ПереключениеРежима = ?(Объект.Режим <> "ПечатьЦенниковИЭтикеток", Истина, Ложь);
	Объект.Режим = "ПечатьЦенниковИЭтикеток";
	
	Если Объект.ПечатьИзДокумента Тогда
		Заголовок = НСтр("ru = 'Печать ценников и этикеток из документа'");
	ИначеЕсли Объект.ПечатьИзОбработки Тогда
		Заголовок = НСтр("ru = 'Печать ценников и этикеток из обработки ""Применение цен номенклатуры"" '");
	Иначе
		Заголовок = НСтр("ru = 'Печать ценников и этикеток'");
	КонецЕсли;
	
	ОбновитьВидимостьЭлементов();
	Если ПереключениеРежима Тогда
		ПроверитьВыборСтрокПриПереключенииРежимаПечати();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПечатьЭтикетокНаСервере()
	
	АвтоЗаголовок = Ложь;
	ПереключениеРежима = ?(Объект.Режим <> "ПечатьЭтикеток", Истина, Ложь);
	Объект.Режим = "ПечатьЭтикеток";
	
	Если Объект.ПечатьИзДокумента Тогда
		Заголовок = НСтр("ru = 'Печать этикеток из документа'");
	ИначеЕсли Объект.ПечатьИзОбработки Тогда
		Заголовок = НСтр("ru = 'Печать этикеток из обработки ""Применение цен номенклатуры"" '");
	Иначе
		Заголовок = НСтр("ru = 'Печать этикеток'");
	КонецЕсли;
	
	Если ПереключениеРежима Тогда
		ПроверитьВыборСтрокПриПереключенииРежимаПечати();
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет установку выбранного режима печати
//
&НаСервере
Процедура УстановитьРежим(ПараметрРежим)
	
	Если ПараметрРежим = "ПечатьЦенниковИЭтикеток" Тогда
		УстановитьРежимПечатьЦенниковИЭтикетокНаСервере();
	ИначеЕсли ПараметрРежим = "ПечатьЦенников" Тогда
		УстановитьРежимПечатьЦенниковНаСервере();
	ИначеЕсли ПараметрРежим = "ПечатьЭтикеток" Тогда
		УстановитьРежимПечатьЭтикетокНаСервере();
	Иначе
		ВызватьИсключение НСтр("ru = 'Установленный режим печати не поддерживается'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЦеныПоВидуЦеныПриИзмененииСервер()
	
	ИзменитьДоступностьЭлементовПриИзмененииЦеныПоВидуЦены();
	//
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДоступностьЭлементовПриИзмененииЦеныПоВидуЦены()
	
	Элементы.ВидЦены.Доступность = ЦеныПоВидуЦены = 1;
	Элементы.ВидЦены.АвтоОтметкаНезаполненного = ЦеныПоВидуЦены = 1;
	Элементы.ВидЦены.ОтметкаНезаполненного = ЦеныПоВидуЦены = 1;
	Объект.ЦеныПоВидуЦены = ЦеныПоВидуЦены = 1;
	
	Если ЦеныПоВидуЦены = 0  Тогда
		
		УстановитьДоступностьРеквизитаДействующихЦен();
		
	Иначе
		
		Элементы.ЦеныНазначенныеДействующие.Доступность = Ложь;
		//Элементы.ЦеныНазначенныеДействующие.КнопкаСпискаВыбора = Ложь;
		
	КонецЕсли;
	
	Если Объект.ПечатьИзОбработки Тогда
		Элементы.ЦеныПоВидуЦены.Видимость = Ложь;
		Элементы.ВидЦены.Видимость = Ложь;
		Элементы.ДекорацияМагазин.Видимость = Истина;
		Элементы.ЦеныНаДату.ТолькоПросмотр 					= Истина;
		//Элементы.МагазинДляЦен.ТолькоПросмотр 				= Истина;
		Элементы.ЦеныНазначенныеДействующие.ТолькоПросмотр 	= Истина;
		Объект.ЦеныНазначенныеДействующие = Ложь;
		ЦеныПоВидуЦены = 0;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.ГруппаШапка.Видимость = ВидимостьГруппыЦен;
	Элементы.ГруппаПечатьИзДокумента.Видимость = Объект.ПечатьИзДокумента;
		
	Если Не Объект.ПечатьИзДокумента Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы.Гиперссылка1.Видимость = Ложь;
	Элементы.Гиперссылка2.Видимость = Ложь;
	Элементы.Гиперссылка3.Видимость = Ложь;
	
	КоличествоДокументов = СписокДокументов.Количество();
	МаксимальныйИндекс = Мин(2, КоличествоДокументов - 1);
	Индекс = 0;
	
	Пока Индекс <= МаксимальныйИндекс Цикл
		
		Гиперссылка = "Гиперссылка" + Строка(Индекс+1);
		Элементы[Гиперссылка].Заголовок = СписокДокументов.Получить(Индекс);
		Элементы[Гиперссылка].Видимость = Истина;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если КоличествоДокументов > 1 Тогда
		Элементы.ГруппаПечатьИзДокумента.Заголовок =  НСтр("ru = 'Печать из документов'");
	КонецЕсли;
	
	Если КоличествоДокументов > 3 Тогда
		Элементы.ГиперссылкиНиз.Видимость = Истина;
		
		ЗаголовокДекорацияЕщеДокументов = НСтр("ru = '(еще %КолДок% док.)'");
		ЗаголовокДекорацияЕщеДокументов = СтрЗаменить(ЗаголовокДекорацияЕщеДокументов, "%КолДок%", КоличествоДокументов - (МаксимальныйИндекс + 1));
		Элементы.ДекорацияЕщеДокументов.Заголовок = ЗаголовокДекорацияЕщеДокументов;
		
	Иначе
		Элементы.ГиперссылкиНиз.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаОтбор.Видимость = Ложь;
	Элементы.Отбор.Видимость = Ложь;
	Элементы.ТоварыЗаполнить.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКнопкуПоУмолчанию()

	Если Объект.Товары.Количество() = 0 Тогда
		Элементы.Печать.Доступность = Ложь;
	Иначе 
		Элементы.Печать.Доступность = Истина;
		Элементы.Печать.КнопкаПоУмолчанию = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТоварыНаКлиенте()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	ПараметрыФормы.Вставить("Дата", ТекущаяДата());
	ПараметрыФормы.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуЗапрашиватьКоличество", Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуВвестиСерийныеНомера", Истина);
	ПараметрыФормы.Вставить("ЗапрашиватьКоличество", Ложь);
	ПараметрыФормы.Вставить("ПечатьЦенниковИЭтикеток", Истина);
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры
//+HVOYA YURA G. 04.10.2016 14:04:52
&НаКлиенте
Процедура ПодобратьСотрудников()
	
   
	//СписокЗначений = Новый СписокЗначений;
	//СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИнформационныхКарт.Регистрационная"));
	//        
	//ФормаВыбора = ПолучитьФорму("Справочник.ИнформационныеКарты.ФормаВыбора");
	//ФормаВыбора.Список.Отбор.Элементы.Очистить();
	//ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));  
	//ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТипКарты");
	//ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.Использование  = Истина;
	//ЭлементОтбора.ПравоеЗначение = СписокЗначений;
	//Значения = ФормаВыбора.ОткрытьМодально();
	//
	//Для  Индекс = 0 По Значения.Количество() - 1 Цикл
	//Сотрудники = ПолучитьЗначенияИК(Значения[Индекс]);
	//	Стр = Объект.Товары.Добавить();
	//	Стр.Номенклатура = Сотрудники.Владелец;
	//	Стр.Штрихкод  = Сотрудники.Штрихкод;
	//КонецЦикла;

	Магазин = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Магазин);

	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Магазин);
	        
	ФормаВыбора = ПолучитьФорму("Справочник.ФизическиеЛица.ФормаВыбора");
	ФормаВыбора.Элементы.Список.МножественныйВыбор = Истина;
	ФормаВыбора.Список.Отбор.Элементы.Очистить();
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));  
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Магазин");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ПравоеЗначение = СписокЗначений;
	Значения = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(Значения) Тогда
		Для  Индекс = 0 По Значения.Количество() - 1 Цикл
			Сотрудник = Значения[Индекс];
			Штрихкод = ПолучитьШтрихкод(Сотрудник);
			Стр = Объект.Товары.Добавить();
			Стр.Номенклатура = Сотрудник;
			Стр.Штрихкод  = Штрихкод;
		КонецЦикла;
	КонецЕсли;


	УстановитьКнопкуПоУмолчанию();

КонецПроцедуры
&НаСервере
Функция ПолучитьШтрихкод(Сотрудник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнформационныеКарты.Ссылка КАК ВладелецКарты
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|ГДЕ
		|	ИнформационныеКарты.ВладелецКарты.Ссылка = &Ссылка
		|	И ИнформационныеКарты.ТипКарты = &ТипКарты";
	
	Запрос.УстановитьПараметр("Ссылка", Сотрудник.Ссылка);
	Запрос.УстановитьПараметр("ТипКарты", Перечисления.ТипыИнформационныхКарт.Регистрационная);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	ВладелецКарты = ВыборкаДетальныеЗаписи.ВладелецКарты
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Штрихкоды.Штрихкод
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Владелец = &Владелец
		|	И Штрихкоды.ТипШтрихкода = &ТипШтрихкода";
	
	Запрос.УстановитьПараметр("Владелец", ВладелецКарты);
	Запрос.УстановитьПараметр("ТипШтрихкода", ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Штрихкод
	КонецЕсли;
	

КонецФункции

//-HVOYA YURA G. 04.10.2016 14:04:57


&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	ТаблицаТоваров.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"),"Организация");
	ДобавитьТовары(ТаблицаТоваров);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТовары(Таблица)
	
	СтруктураНастроек = Обработки.ПечатьЭтикетокИЦенников.ПолучитьПустуюСтруктуруНастроек();
	
	СтруктураНастроек.ОбязательныеПоля.Добавить("Цена");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Штрихкод");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Количество");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Упаковка");
	КонецЕсли;
	
	СтруктураНастроек.ОбязательныеПоля.Добавить("ОстатокНаСкладе");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Организация");
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюИспользованияАссортимента();
	ОкончаниеИмениМакетаСхемыКомпоновкиДанных="";
	//Если ИспользоватьАссортимент Тогда
		СтруктураНастроек.ПараметрыДанных.Вставить("ФорматМагазина", Объект.Магазин.ФорматМагазина);
		ОкончаниеИмениМакетаСхемыКомпоновкиДанных="Ассортимент";
	//КонецЕсли;
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблона" + ОкончаниеИмениМакетаСхемыКомпоновкиДанных;
	СтруктураНастроек.ИсходныеДанные = Таблица;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", Новый Структура("Магазин, РабочееМесто", 
				Объект.Магазин, МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента()));
	СтруктураДействий.Вставить("ЗаполнитьОрганизациюПродажи", Новый Структура("Магазин", Объект.Магазин));
	
	СтруктураРезультата = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьСтруктуруДанных(СтруктураНастроек);
	Для Каждого СтрокаТЧ Из СтруктураРезультата.ТаблицаТоваров Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;
		Если НЕ СтруктураРезультата.ТаблицаТоваров.Колонки.Найти("Характеристика") = Неопределено Тогда
			НоваяСтрока.Характеристика       = СтрокаТЧ.Характеристика;
		КонецЕсли;
		НоваяСтрока.НаименованиеПолное   = СтрокаТЧ.Номенклатура.НаименованиеПолное;
		Если НЕ СтруктураРезультата.ТаблицаТоваров.Колонки.Найти("Упаковка") = Неопределено Тогда
			НоваяСтрока.Упаковка             = СтрокаТЧ.Упаковка;
		КонецЕсли;
		НоваяСтрока.Цена                 = СтрокаТЧ.Цена;
		НоваяСтрока.Штрихкод             = СтрокаТЧ.Штрихкод;
		НоваяСтрока.ОстатокНаСкладе      = СтрокаТЧ.ОстатокНаСкладе;
		НоваяСтрока.IDN     			 = СтрокаТЧ.IDN;
		НоваяСтрока.Производитель    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Номенклатура,"Производитель");	
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСкладПродажиВСтрокеТЧСервер(НоваяСтрока,СтруктураДействий,Неопределено);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьОрганизациюПродажиВСтрокеТЧСервер(НоваяСтрока,СтруктураДействий,Неопределено);
		
		УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(НоваяСтрока);
		
		СкидкаНаценка = ПолучитьСкидкуНаценку(СтрокаТЧ.Номенклатура);
		Если ЗначениеЗаполнено(СкидкаНаценка) тогда
			НоваяСтрока.СкидкаНаценка = СкидкаНаценка;		
			ТабРеквезиты =  ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СкидкаНаценка,"ТипСкидкиНаценки,ЗначениеСкидкиНаценки");
			ТипСкидкиНаценки = ТабРеквезиты.ТипСкидкиНаценки;
			НоваяСтрока.ЗначениеСкидкиНаценки =  ТабРеквезиты.ЗначениеСкидкиНаценки;
			НоваяСтрока.ТипСкидкиНаценки = ТипСкидкиНаценки;
		Иначе
			ТипСкидкиНаценки = Перечисления.ТипСкидкиНаценки.ПустаяСсылка();
			НоваяСтрока.СкидкаНаценка = Справочники.СкидкиНаценки.ПустаяСсылка();	
			НоваяСтрока.ЗначениеСкидкиНаценки =  0;
			НоваяСтрока.ТипСкидкиНаценки = Перечисления.ТипСкидкиНаценки.ПустаяСсылка();
		КонецЕсли;
		ТипПереоценки = ПолучитьТипПереценки(СтрокаТЧ.Номенклатура);
		Если ЗначениеЗаполнено(ТипПереоценки) тогда
			НоваяСтрока.ТипПереоценки =ТипПереоценки; 	
		КонецЕсли;
		НоваяСтрока.БонусАкцияСписан = ПолучитьБонусАкцияСписан(СтрокаТЧ.Номенклатура);
		НоваяСтрока.БонусБазаНачислен = ПолучитьБонусБазаНачислен(СтрокаТЧ.Номенклатура);

		Попытка
			НоваяСтрока.ШаблонЦенника        = ПолучитьШаблон(СтрокаТЧ.Номенклатура,ТипСкидкиНаценки);
			НоваяСтрока.ОЧ        			 = ПолучитьОЧ(СтрокаТЧ.Номенклатура);
		Исключение   			
		КонецПопытки; 	
	КонецЦикла;
	ПересчитатьЦеныСервер("", "");
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВыборСтрокПриПереключенииРежимаПечати()
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если СтрокаТЧ.Выбран Тогда
			
			СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
			
		КонецЕсли
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоличествоЦенниковИЭтикетокПоДокументуНаСервере()
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(СтрокаТЧ)
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеФормыНаСервере()
	
	Возврат ЭтотОбъект.ПроверитьЗаполнение();
	
КонецФункции

&НаСервере
Процедура МагазинПриИзмененииСервер()
	
	УстановитьПравилоЦенообразования();
	СтруктураМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Магазин, Новый Структура("ПравилоЦенообразованияВидЦен", "ПравилоЦенообразования.ВидЦен"));
	Объект.ВидЦены = СтруктураМагазина.ПравилоЦенообразованияВидЦен;
	УстановитьДоступностьРеквизитаДействующихЦен();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныСервер(ТекстСобытия, ТекстОповещения)
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПересчетаЦен();
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Период", Объект.ЦеныНаДату);
	Запрос.УстановитьПараметр("ВидЦены", Объект.ВидЦены);
	
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ПравилоЦенообразования", "ПравилоЦенообразования");
	СтруктураРеквизитов.Вставить("ФорматМагазина", "ФорматМагазина");
	СтруктураМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Магазин, СтруктураРеквизитов);
	Запрос.УстановитьПараметр("ПравилоЦенообразования", СтруктураМагазина.ПравилоЦенообразования);
	Запрос.УстановитьПараметр("ФорматМагазина", СтруктураМагазина.ФорматМагазина);
	РезултатЗапроса = Запрос.Выполнить();
	Если РезултатЗапроса.Колонки.Найти("ТипПереоценки") = Неопределено тогда 
		ЗаполнятьОпорнуюЦену = Ложь;
	Иначе
		ЗаполнятьОпорнуюЦену = Истина;
	КонецЕсли;
	Выборка = РезултатЗапроса.Выбрать();
	ОбработаноСтрок = 0;
	Пока Выборка.Следующий() Цикл
		ОбработаноСтрок = ОбработаноСтрок + 1;
		СтрокаТовары = Объект.Товары[Выборка.НомерСтроки - 1];
		СтрокаТовары.Цена = Выборка.Цена;
		Если ЗаполнятьОпорнуюЦену тогда 
			Если Выборка.ТипПереоценки = Перечисления.ТипыПереоценок.ПромоНачало тогда 
				СтрокаТовары.СтараяЦена = ПолучитьСтаруюЦену(Выборка.Номенклатура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТекстСобытия = НСтр("ru = 'Пересчитаны цены'");
	ТекстОповещения = НСтр("ru = 'Обработано строк %1'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОповещения, ОбработаноСтрок);
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаПересчетаЦен()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ТипПереоценки КАК ТипПереоценки,
	|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|";
	
	Если ЦеныПоВидуЦены = 0 Тогда
		
		Если Объект.ЦеныНазначенныеДействующие Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.НомерСтроки,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Упаковка,
			|	Товары.ТипПереоценки,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) = ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
			|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
			|			КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0) = 0
			|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0)
			|			ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
			|		КОНЕЦ КАК ЧИСЛО(17, 2)) КАК Цена
			|ИЗ
			|	Товары КАК Товары
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(&Период, ОбъектЦенообразования = &Магазин) КАК ЦеныНоменклатуры
			|		ПО (ЦеныНоменклатуры.Номенклатура = Товары.Номенклатура)
			|			И (ЦеныНоменклатуры.Характеристика = Товары.Характеристика)
			|";
			
		Иначе
			Если АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин) Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Ассортимент.Номенклатура КАК Номенклатура,
				|	Ассортимент.ВидЦен КАК ВидЦен
				|ПОМЕСТИТЬ втАссортимент
				|ИЗ
				|	РегистрСведений.Ассортимент.СрезПоследних(
				|			КОНЕЦПЕРИОДА(&Период, ДЕНЬ),
				|			ОбъектПланирования = &ФорматМагазина
				|				И Номенклатура В
				|					(ВЫБРАТЬ
				|						Т.Номенклатура
				|					ИЗ
				|						Товары КАК Т)) КАК Ассортимент
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура,
				|	ВидЦен
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Товары.НомерСтроки,
				|	Товары.Номенклатура,
				|	Товары.Характеристика,
				|	Товары.Упаковка,
				|	ВЫРАЗИТЬ(ВЫБОР
				|			КОГДА ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) = ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
				|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
				|			КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0) = 0
				|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0)
				|			ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
				|		КОНЕЦ КАК ЧИСЛО(17, 2)) КАК Цена
				|ИЗ
				|	Товары КАК Товары
				|		ЛЕВОЕ СОЕДИНЕНИЕ втАссортимент КАК Ассортимент
				|		ПО Товары.Номенклатура = Ассортимент.Номенклатура
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
				|				&Период,
				|				Номенклатура В
				|						(ВЫБРАТЬ
				|							Т.Номенклатура
				|						ИЗ
				|							втАссортимент КАК Т)
				|					И ВидЦены В
				|						(ВЫБРАТЬ
				|							Т.ВидЦен
				|						ИЗ
				|							втАссортимент КАК Т)) КАК ЦеныНоменклатуры
				|		ПО Товары.Номенклатура = ЦеныНоменклатуры.Номенклатура
				|			И Товары.Характеристика = ЦеныНоменклатуры.Характеристика
				|			И (Ассортимент.ВидЦен = ЦеныНоменклатуры.ВидЦены)
				|";
				
			Иначе
				ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ЦеновыеГруппы.ЦеноваяГруппа КАК ЦеноваяГруппа,
				|	ЦеновыеГруппы.ВидЦен КАК ВидЦен
				|ПОМЕСТИТЬ ЦеновыеГруппыПравила
				|ИЗ
				|	Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ЦеновыеГруппы
				|ГДЕ
				|	ЦеновыеГруппы.Ссылка = &ПравилоЦенообразования
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ВидЦен,
				|	ЦеноваяГруппа
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ВидЦеныПравила.ВидЦен КАК ВидЦен
				|ПОМЕСТИТЬ ВидЦеныПравила
				|ИЗ
				|	Справочник.ПравилаЦенообразования КАК ВидЦеныПравила
				|ГДЕ
				|	ВидЦеныПравила.Ссылка = &ПравилоЦенообразования
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ПодЗапрос.Номенклатура КАК Номенклатура,
				|	ПодЗапрос.Характеристика КАК Характеристика,
				|	ПодЗапрос.Упаковка КАК Упаковка,
				|	ПодЗапрос.Цена КАК Цена
				|ПОМЕСТИТЬ ЦеныНоменклатуры
				|ИЗ
				|	(ВЫБРАТЬ
				|		ПодЗапрос1.Номенклатура КАК Номенклатура,
				|		ПодЗапрос1.Характеристика КАК Характеристика,
				|		ВЫБОР
				|			КОГДА МАКСИМУМ(ПодЗапрос1.ЦенаПоЦеновымГруппам) > 0
				|				ТОГДА МАКСИМУМ(ПодЗапрос1.УпаковкаПоЦеновымГруппам)
				|			ИНАЧЕ МАКСИМУМ(ПодЗапрос1.УпаковкаПоВидуЦен)
				|		КОНЕЦ КАК Упаковка,
				|		ВЫБОР
				|			КОГДА МАКСИМУМ(ПодЗапрос1.ЦенаПоЦеновымГруппам) > 0
				|				ТОГДА МАКСИМУМ(ПодЗапрос1.ЦенаПоЦеновымГруппам)
				|			ИНАЧЕ МАКСИМУМ(ПодЗапрос1.ЦенаПоВидуЦен)
				|		КОНЕЦ КАК Цена
				|	ИЗ
				|		(ВЫБРАТЬ
				|			ЦеныНоменклатурыПоВидуЦен.Номенклатура КАК Номенклатура,
				|			ЦеныНоменклатурыПоВидуЦен.Характеристика КАК Характеристика,
				|			ЦеныНоменклатурыПоВидуЦен.Упаковка КАК УпаковкаПоВидуЦен,
				|			ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК УпаковкаПоЦеновымГруппам,
				|			ЦеныНоменклатурыПоВидуЦен.Цена КАК ЦенаПоВидуЦен,
				|			0 КАК ЦенаПоЦеновымГруппам
				|		ИЗ
				|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
				|					&Период,
				|					ВидЦены В
				|							(ВЫБРАТЬ
				|								ВидЦеныПравила.ВидЦен
				|							ИЗ
				|								ВидЦеныПравила КАК ВидЦеныПравила)
				|						И (Номенклатура, Характеристика) В
				|							(ВЫБРАТЬ
				|								Товары.Номенклатура,
				|								Товары.Характеристика
				|							ИЗ
				|								Товары КАК Товары)) КАК ЦеныНоменклатурыПоВидуЦен
				|		
				|		ОБЪЕДИНИТЬ ВСЕ
				|		
				|		ВЫБРАТЬ
				|			СправочникНоменклатура.Ссылка,
				|			ЦеныНоменклатурыПоЦеновымГруппам.Характеристика,
				|			ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка),
				|			ЦеныНоменклатурыПоЦеновымГруппам.Упаковка,
				|			0,
				|			ЕСТЬNULL(ЦеныНоменклатурыПоЦеновымГруппам.Цена, 0)
				|		ИЗ
				|			ЦеновыеГруппыПравила КАК ЦеновыеГруппыПравила
				|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
				|				ПО ЦеновыеГруппыПравила.ЦеноваяГруппа = СправочникНоменклатура.ЦеноваяГруппа
				|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
				|						&Период,
				|						ВидЦены В
				|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
				|									ЦеновыеГруппыПравила.ВидЦен
				|								ИЗ
				|									ЦеновыеГруппыПравила КАК ЦеновыеГруппыПравила)
				|							И (Номенклатура, Характеристика) В
				|								(ВЫБРАТЬ
				|									Товары.Номенклатура,
				|									Товары.Характеристика
				|								ИЗ
				|									Товары КАК Товары)) КАК ЦеныНоменклатурыПоЦеновымГруппам
				|				ПО (ЦеныНоменклатурыПоЦеновымГруппам.Номенклатура = СправочникНоменклатура.Ссылка)
				|					И (ЦеныНоменклатурыПоЦеновымГруппам.ВидЦены = ЦеновыеГруппыПравила.ВидЦен)) КАК ПодЗапрос1
				|	
				|	СГРУППИРОВАТЬ ПО
				|		ПодЗапрос1.Номенклатура,
				|		ПодЗапрос1.Характеристика) КАК ПодЗапрос
				|;
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Товары.НомерСтроки,
				|	Товары.Номенклатура,
				|	Товары.Характеристика,
				|	Товары.Упаковка,
				|	ВЫРАЗИТЬ(ВЫБОР
				|			КОГДА ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) = ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
				|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
				|			КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0) = 0
				|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0)
				|			ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
				|		КОНЕЦ КАК ЧИСЛО(17, 2)) КАК Цена
				|ИЗ
				|	Товары КАК Товары
				|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
				|		ПО (ЦеныНоменклатуры.Номенклатура = Товары.Номенклатура)
				|			И (ЦеныНоменклатуры.Характеристика = Товары.Характеристика)
				|";
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Упаковка,
		|	Товары.ТипПереоценки,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) = ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
		|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
		|			КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0) = 0
		|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0)
		|			ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
		|		КОНЕЦ КАК ЧИСЛО(17, 2)) КАК Цена
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, ВидЦены = &ВидЦены) КАК ЦеныНоменклатуры
		|		ПО (ЦеныНоменклатуры.Номенклатура = Товары.Номенклатура)
		|			И (ЦеныНоменклатуры.Характеристика = Товары.Характеристика)";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьРеквизитаДействующихЦен()
	
	Если ЦеныПоВидуЦены = 0 Тогда
		ИспользоватьПрименениеЦенВМагазине = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "ИспользоватьПрименениеЦен");
		Если ЗначениеЗаполнено(Объект.Магазин) И ИспользоватьПрименениеЦен
			И ИспользоватьПрименениеЦенВМагазине Тогда
			
			Элементы.ЦеныНазначенныеДействующие.Доступность = Истина;
			Элементы.ЦеныНазначенныеДействующие.ТолькоПросмотр = Ложь;
			Элементы.ЦеныНазначенныеДействующие.КнопкаВыпадающегоСписка = Истина;
			Объект.ЦеныНазначенныеДействующие = Истина;
			
		Иначе
			
			Элементы.ЦеныНазначенныеДействующие.Доступность = Истина;
			Элементы.ЦеныНазначенныеДействующие.ТолькоПросмотр = Истина;
			Элементы.ЦеныНазначенныеДействующие.КнопкаВыпадающегоСписка = Ложь;
			Если Объект.ЦеныНазначенныеДействующие Тогда
				Объект.ЦеныНазначенныеДействующие = Ложь;
			КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СОХРАНЕНИЕ И ВОССТАНОВЛЕНИЕ НАСТРОЕК

&НаСервере
Процедура СохранитьНастройкиНаСервере()
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ВидимостьОтбора", ВидимостьОтбора);
	ПараметрыЗакрытия.Вставить("ВидимостьРежимаЗаполнения", ВидимостьРежимаЗаполнения);
	ПараметрыЗакрытия.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу", ЗаполнитьКоличествоЭтикетокПоДокументу);
	ПараметрыЗакрытия.Вставить("СкрыватьКомандуЗаполненияПоДокументу", СкрыватьКомандуЗаполненияПоДокументу);
	ПараметрыЗакрытия.Вставить("ЦеныПоВидуЦены", ЦеныПоВидуЦены);
	ПараметрыЗакрытия.Вставить("ВидЦены", Объект.ВидЦены);
	ПараметрыЗакрытия.Вставить("ЦеныНазначенныеДействующие", Объект.ЦеныНазначенныеДействующие);
	ПараметрыЗакрытия.Вставить("Режим", Объект.Режим);
	ПараметрыЗакрытия.Вставить("НастройкиОтбора", Новый ХранилищеЗначения(КомпоновщикНастроек.Настройки));
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПечатьЭтикетокИЦенниковНастройкиФормы", , ПараметрыЗакрытия);	
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиНаСервере()
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПечатьЭтикетокИЦенниковНастройкиФормы",);
	Если Настройки <> Неопределено Тогда
		ЗначениеСохраненнойНастройки = Неопределено;
		Если Настройки.Свойство("ВидимостьОтбора", ЗначениеСохраненнойНастройки) Тогда
			ВидимостьОтбора = ЗначениеСохраненнойНастройки;
		КонецЕсли;
		Если Настройки.Свойство("ВидимостьРежимаЗаполнения", ЗначениеСохраненнойНастройки) Тогда
			ВидимостьРежимаЗаполнения = ЗначениеСохраненнойНастройки;
		КонецЕсли;
		Если Настройки.Свойство("ЗаполнитьКоличествоЭтикетокПоДокументу", ЗначениеСохраненнойНастройки) Тогда
			ЗаполнитьКоличествоЭтикетокПоДокументу = ЗначениеСохраненнойНастройки;
		КонецЕсли;
		Если Настройки.Свойство("СкрыватьКомандуЗаполненияПоДокументу", ЗначениеСохраненнойНастройки) Тогда
			СкрыватьКомандуЗаполненияПоДокументу = ЗначениеСохраненнойНастройки;
		КонецЕсли;
		Если Настройки.Свойство("ЦеныПоВидуЦены", ЗначениеСохраненнойНастройки) Тогда
			ЦеныПоВидуЦены = ЗначениеСохраненнойНастройки;
		КонецЕсли;
		Если Настройки.Свойство("ВидЦены", ЗначениеСохраненнойНастройки) Тогда
			Объект.ВидЦены = ЗначениеСохраненнойНастройки;
		КонецЕсли;
		Если Настройки.Свойство("ЦеныНазначенныеДействующие", ЗначениеСохраненнойНастройки) Тогда
			Объект.ЦеныНазначенныеДействующие = ЗначениеСохраненнойНастройки;
		КонецЕсли;
		Если Настройки.Свойство("Режим", ЗначениеСохраненнойНастройки) Тогда
			Объект.Режим = ЗначениеСохраненнойНастройки;
			УстановитьРежим(Объект.Режим);
		КонецЕсли;
		Если Настройки.Свойство("НастройкиОтбора", ЗначениеСохраненнойНастройки) Тогда
			Если ЗначениеСохраненнойНастройки <> Неопределено Тогда
				КомпоновщикНастроек.ЗагрузитьНастройки(ЗначениеСохраненнойНастройки.Получить());
				УдалитьНепроверяемыеОтборыКомпоновщика();
			Иначе
				ЗагрузитьНастройкиОтбораПоУмолчанию();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//+HVOYA YURA G. 04.10.2016 13:58:43
&НаКлиенте
Процедура hiПодобратьСотрудников(Команда)
	ПодобратьСотрудников()
КонецПроцедуры
//-HVOYA YURA G. 04.10.2016 13:58:59

&НаСервере
Процедура СЦ_заполнитьнадатуНаСервере()
	
	ТЧ = Объект.Товары.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДействующиеЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ДействующиеЦеныНоменклатурыСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
	|			&ДатаСтаройЦены,
	|			Номенклатура В (&МассивНоменклатуры)
	|				И ОбъектЦенообразования = &Магазин) КАК ДействующиеЦеныНоменклатурыСрезПоследних";
	Запрос.УстановитьПараметр("МассивНоменклатуры",ТЧ.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Магазин",Объект.Магазин);
	Запрос.УстановитьПараметр("ДатаСтаройЦены",Объект.СтарыеЦеныНаДату);
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр Из Объект.Товары Цикл
	    СтрокиПоиска = ТаблицаЦен.НайтиСтроки(Новый Структура("Номенклатура",Стр.Номенклатура));
		Если СтрокиПоиска.Количество() <> 0 Тогда
			Стр.СтараяЦена = СтрокиПоиска[0].Цена;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СЦ_заполнитьнадату(Команда)
	СЦ_заполнитьнадатуНаСервере();
КонецПроцедуры

&НаСервере
Процедура СЦ_заполнитьпопродажеНаСервере()
	
	ТЧ = Объект.Товары.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДействующиеЦеныНоменклатурыСрезПервых.Номенклатура,
	|	ДействующиеЦеныНоменклатурыСрезПервых.Цена
	|ИЗ
	|	РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПервых(
	|			,
	|			Номенклатура В (&МассивНоменклатуры)
	|				И ОбъектЦенообразования = &Магазин) КАК ДействующиеЦеныНоменклатурыСрезПервых";
	Запрос.УстановитьПараметр("МассивНоменклатуры",ТЧ.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Магазин",Объект.Магазин);
	//Запрос.УстановитьПараметр("ДатаСтаройЦены",Объект.СтарыеЦеныНаДату);
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр Из Объект.Товары Цикл
	    СтрокиПоиска = ТаблицаЦен.НайтиСтроки(Новый Структура("Номенклатура",Стр.Номенклатура));
		Если СтрокиПоиска.Количество() <> 0 Тогда
			Стр.СтараяЦена = СтрокиПоиска[0].Цена;
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура СЦ_заполнитьпопродаже(Команда)
	СЦ_заполнитьпопродажеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЦенникаА5(Команда)
	ТекстОшибки = НеУчтенКомплект();
	Если ТекстОшибки <> "" тогда
		Сообщить(ТекстОшибки); 		
		Возврат;     		
	КонецЕсли; 
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.ПечатьЭтикетокИЦенников",
				"ЦенникМебельА5",
				Объект,
				Неопределено,
				Неопределено);

КонецПроцедуры


&НаСервере
Функция НеУчтенКомплект()
	
//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	НеПрошлоПроверку = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.Номенклатура КАК Номенклатура,
		|	Таб.НомерКомплекта КАК НомерКомплекта
		|ПОМЕСТИТЬ ТабКомплект
		|ИЗ
		|	&Таб КАК Таб
		|ГДЕ
		|	Таб.НомерКомплекта <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ТабКомплект.Номенклатура) КАК Номенклатура,
		|	ТабКомплект.НомерКомплекта
		|ИЗ
		|	ТабКомплект КАК ТабКомплект
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабКомплект.НомерКомплекта
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура";
	
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СтранаПроисхождения);
	Запрос.УстановитьПараметр("Таб", Объект.Товары.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
			НеПрошлоПроверку = "Нет комплектов!";
	Иначе

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Номенклатура > 4 тогда
			НеПрошлоПроверку = "Состав комплекта не может быть больше 4!";
			Прервать;
		КонецЕсли;
	КонецЦикла;
	КонецЕсли;

	Возврат НеПрошлоПроверку;

КонецФункции


// СОХРАНЕНИЕ И ВОССТАНОВЛЕНИЕ НАСТРОЕК ЗАВЕРШЕНИЕ
///////////////////////////////////////////////////////////////////////////////

//	LNK 06.03.2017 11:20:30
&НаКлиенте
Процедура ЗагрузитьТоварыИзТаблицыExcel(Команда)

	Если Объект.Товары.Количество() > 0 Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьТоварыИзТаблицыExcelЗавершение", ЭтотОбъект, Новый Структура);
		ПоказатьВопрос(ОписаниеОповещения
			, "Табличная часть Товары будет очищена.
			  |Подтвердите своё решение:"
			, РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.ОК
			, "Предупреждение(перед загрузкой)", КодВозвратаДиалога.Отмена);

	Иначе

		ЗагрузитьТоварыИзТаблицыExcelЗавершение(КодВозвратаДиалога.ОК, Новый Структура);

	КонецЕсли;

КонецПроцедуры

//	LNK 06.03.2017 11:24:55
&НаКлиенте
Процедура ЗагрузитьТоварыИзТаблицыExcelЗавершение(КодВозврата, ДополнительныеПараметры)	Экспорт

	Если КодВозврата = КодВозвратаДиалога.ОК Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗагрузкуДанныхИзТаблицыExcel", ЭтотОбъект);
		ДиалогВыбораФайла  = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Заголовок = "Выберите файл книги Excel";
		ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Лист Excel'") + " (*.xls)|*.xls|" + НСтр("ru = 'Лист Excel2007'") + " (*.xlsx)|*.xlsx";
		ДиалогВыбораФайла.ПолноеИмяФайла = ПолноеИмяИмпортируемогоФайла;
		ДиалогВыбораФайла.МножественныйВыбор = Ложь;
		ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;

		ДиалогВыбораФайла.Показать(ОписаниеОповещения);

	Иначе

		Сообщить("Отменено пользователем.");

	КонецЕсли;

КонецПроцедуры

//	LNK 06.03.2017 11:48:00
&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхИзТаблицыExcel(СписокФайлов, ДополнительныеПараметры)	Экспорт

	Если ТипЗнч(СписокФайлов) = Тип("Массив") И НЕ СписокФайлов.Количество() = 0 Тогда

		Объект.Товары.Очистить();
		Объект.ИсходныеДанные.Очистить();

		ПолноеИмяИмпортируемогоФайла = СписокФайлов[0];

		ПоказатьОповещениеПользователя("Загрузка данных из файла ...",, "Выполняется загрузка «" + ПолноеИмяИмпортируемогоФайла + "»", БиблиотекаКартинок.Предупреждение32);

		МассивТоваров = ЗаполнениеОбъектов.ЗагрузитьДанныеВМассивИзТаблицыExcel(
			ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяИмпортируемогоФайла), УникальныйИдентификатор),
			ОбщегоНазначенияКлиентСервер.lx_GetTooken(ПолноеИмяИмпортируемогоФайла, ".")
		);

		Для каждого СоставСтроки Из МассивТоваров Цикл

			СтрокаТовары = Объект.Товары.Добавить();
			СтрокаТовары.IDN          = СоставСтроки.Код;
			СтрокаТовары.Номенклатура = СоставСтроки.Номенклатура;
			СтрокаТовары.Цена         = СоставСтроки.Цена;
			СтрокаТовары.СтараяЦена   = СоставСтроки.ЦенаСтарая;

			Если Объект.Режим = "ПечатьЦенников" Тогда

				СтрокаТовары.КоличествоЦенников = 1;
				СтрокаТовары.КоличествоЭтикеток = 0;

			ИначеЕсли Объект.Режим = "ПечатьЭтикеток" Тогда

				СтрокаТовары.КоличествоЦенников = 0;
				СтрокаТовары.КоличествоЭтикеток = ?(СоставСтроки.Количество = 0, 1, СоставСтроки.Количество);

			Иначе

				СтрокаТовары.КоличествоЦенников = 1;
				СтрокаТовары.КоличествоЭтикеток = ?(СоставСтроки.Количество = 0, 1, СоставСтроки.Количество);

			КонецЕсли;

		КонецЦикла;

		УстановитьКнопкуПоУмолчанию();
		ПоказатьОповещениеПользователя("Загрузка данных выполнена!",,, БиблиотекаКартинок.Предупреждение32);
	
	Иначе

		Сообщить("Выбор не был сделан. Операция не выполнена");
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьШаблонЦенниковВверх(Команда)
	ВыбранноеЗначение = Неопределено;
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ТипШаблона", ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаЦенник")));
	ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.ХранилищеШаблонов.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект);
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			Если СтрокаТЧ.Цена < СтрокаТЧ.СтараяЦена тогда
				СтрокаТЧ.ШаблонЦенника  = ВыбранноеЗначение;
				СтрокаТЧ.Выбран         = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);			
			КонецЕсли;
		КонецЦикла;
		
		
		Текст = НСтр("ru = 'Установлен шаблон ""%Шаблон%"".'");
		Текст = СтрЗаменить(Текст, "%Шаблон%", ВыбранноеЗначение);
		
		ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, "" ,"" );
		
	КонецЕсли;
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШаблонЦенниковЦенаВверх(Команда)
	ВыбранноеЗначение = Неопределено;
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ТипШаблона", ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаЦенник")));
	ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.ХранилищеШаблонов.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект);
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			Если СтрокаТЧ.Цена > СтрокаТЧ.СтараяЦена   тогда
				СтрокаТЧ.ШаблонЦенника  = ВыбранноеЗначение;
				СтрокаТЧ.Выбран         = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);			
			КонецЕсли;
		КонецЦикла;
		
		
		Текст = НСтр("ru = 'Установлен шаблон ""%Шаблон%"".'");
		Текст = СтрЗаменить(Текст, "%Шаблон%", ВыбранноеЗначение);
		
		ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, "" ,"" );
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазмерЦенникаПриИзменении(Элемент)
	РазмерЦенникаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура РазмерЦенникаПриИзмененииНаСервере() // Переделать с цикла на запрос
	//	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ВЫРАЗИТЬ(ТЧ.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	//	|	ТЧ.Характеристика КАК Характеристика,
	//	|	ТЧ.Упаковка КАК Упаковка,
	//	|	ТЧ.Цена КАК Цена,
	//	|	ТЧ.Штрихкод КАК Штрихкод,
	//	|	ТЧ.КоличествоЦенников КАК КоличествоЦенников,
	//	|	ТЧ.ШаблонЭтикетки КАК ШаблонЭтикетки,
	//	|	ТЧ.КоличествоЭтикеток КАК КоличествоЭтикеток,
	//	|	ТЧ.ОстатокНаСкладе КАК ОстатокНаСкладе,
	//	|	ТЧ.КоличествоВДокументе КАК КоличествоВДокументе,
	//	|	ТЧ.Выбран КАК Выбран,
	//	|	ТЧ.НаименованиеПолное КАК НаименованиеПолное,
	//	|	ТЧ.Организация КАК Организация,
	//	|	ТЧ.SKU КАК SKU,
	//	|	ТЧ.Склад КАК Склад,
	//	|	ТЧ.СтараяЦена КАК СтараяЦена,
	//	|	ТЧ.ПричинаУценки КАК ПричинаУценки,
	//	|	ТЧ.IDN КАК IDN,
	//	|	ТЧ.НомерКомплекта КАК НомерКомплекта,
	//	|	ТЧ.Производитель КАК Производитель,
	//	|	ТЧ.СкидкаНаценка КАК СкидкаНаценка,
	//	|	ТЧ.ТипСкидкиНаценки КАК ТипСкидкиНаценки,
	//	|	ТЧ.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки
	//	|ПОМЕСТИТЬ ТабЧ
	//	|ИЗ
	//	|	&ТабЧ КАК ТЧ
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ТабЧ.Номенклатура КАК Номенклатура,
	//	|	ТабЧ.Характеристика КАК Характеристика,
	//	|	ТабЧ.Упаковка КАК Упаковка,
	//	|	ТабЧ.Цена КАК Цена,
	//	|	ТабЧ.Штрихкод КАК Штрихкод,
	//	|	ТабЧ.КоличествоЦенников КАК КоличествоЦенников,
	//	|	ТабЧ.ШаблонЭтикетки КАК ШаблонЭтикетки,
	//	|	ТабЧ.КоличествоЭтикеток КАК КоличествоЭтикеток,
	//	|	ТабЧ.ОстатокНаСкладе КАК ОстатокНаСкладе,
	//	|	ТабЧ.КоличествоВДокументе КАК КоличествоВДокументе,
	//	|	ТабЧ.Выбран КАК Выбран,
	//	|	ТабЧ.НаименованиеПолное КАК НаименованиеПолное,
	//	|	ТабЧ.Организация КАК Организация,
	//	|	ТабЧ.SKU КАК SKU,
	//	|	ТабЧ.Склад КАК Склад,
	//	|	ТабЧ.СтараяЦена КАК СтараяЦена,
	//	|	ТабЧ.ПричинаУценки КАК ПричинаУценки,
	//	|	ТабЧ.IDN КАК IDN,
	//	|	ТабЧ.НомерКомплекта КАК НомерКомплекта,
	//	|	ТабЧ.Производитель КАК Производитель,
	//	|	ТабЧ.СкидкаНаценка КАК СкидкаНаценка,
	//	|	ТабЧ.ТипСкидкиНаценки КАК ТипСкидкиНаценки,
	//	|	ТабЧ.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки,
	//	|	ХранилищеШаблонов.Ссылка КАК ШаблонЦенника,
	//	|	ТабЧ.Номенклатура.Эксклюзив КАК НоменклатураЭксклюзив,
	//	|	ВЫБОР
	//	|		КОГДА ТабЧ.ТипСкидкиНаценки = ЗНАЧЕНИЕ(Перечисление.ТипСкидкиНаценки.Оптовая)
	//	|			ТОГДА ВЫБОР
	//	|					КОГДА ТабЧ.Номенклатура.НовинкаДо < &ЦеныНаДату
	//	|						ТОГДА ТабЧ.Номенклатура.Эксклюзив
	//	|					ИНАЧЕ ЛОЖЬ
	//	|				КОНЕЦ
	//	|		КОГДА ТабЧ.ТипСкидкиНаценки = ЗНАЧЕНИЕ(Перечисление.ТипСкидкиНаценки.ПустаяСсылка)
	//	|			ТОГДА ВЫБОР
	//	|					КОГДА ТабЧ.Номенклатура.НовинкаДо < &ЦеныНаДату
	//	|						ТОГДА ТабЧ.Номенклатура.Эксклюзив
	//	|					ИНАЧЕ ЛОЖЬ
	//	|				КОНЕЦ
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ КАК Поле1,
	//	|	ВЫБОР
	//	|		КОГДА ТабЧ.ТипСкидкиНаценки = ЗНАЧЕНИЕ(Перечисление.ТипСкидкиНаценки.Оптовая)
	//	|			ТОГДА ВЫБОР
	//	|					КОГДА ТабЧ.Номенклатура.НовинкаДо > &ЦеныНаДату
	//	|						ТОГДА ТабЧ.Номенклатура.Новинка
	//	|					ИНАЧЕ ЛОЖЬ
	//	|				КОНЕЦ
	//	|		КОГДА ТабЧ.ТипСкидкиНаценки = ЗНАЧЕНИЕ(Перечисление.ТипСкидкиНаценки.ПустаяСсылка)
	//	|			ТОГДА ВЫБОР
	//	|					КОГДА ТабЧ.Номенклатура.НовинкаДо > &ЦеныНаДату
	//	|						ТОГДА ТабЧ.Номенклатура.Новинка
	//	|					ИНАЧЕ ЛОЖЬ
	//	|				КОНЕЦ
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ КАК Поле2
	//	|ИЗ
	//	|	ТабЧ КАК ТабЧ
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХранилищеШаблонов КАК ХранилищеШаблонов
	//	|		ПО ТабЧ.ТипСкидкиНаценки = ХранилищеШаблонов.ТипСкидкиНаценки
	//	|			И (ХранилищеШаблонов.РазмерЦенника = &РазмерЦенника)
	//	|			И (ТабЧ.Номенклатура.Эксклюзив = ВЫБОР
	//	|				КОГДА ТабЧ.ТипСкидкиНаценки = ЗНАЧЕНИЕ(Перечисление.ТипСкидкиНаценки.Оптовая)
	//	|					ТОГДА ВЫБОР
	//	|							КОГДА ТабЧ.Номенклатура.НовинкаДо < &ЦеныНаДату
	//	|								ТОГДА ТабЧ.Номенклатура.Эксклюзив
	//	|							ИНАЧЕ ЛОЖЬ
	//	|						КОНЕЦ
	//	|				КОГДА ТабЧ.ТипСкидкиНаценки = ЗНАЧЕНИЕ(Перечисление.ТипСкидкиНаценки.ПустаяСсылка)
	//	|					ТОГДА ВЫБОР
	//	|							КОГДА ТабЧ.Номенклатура.НовинкаДо < &ЦеныНаДату
	//	|								ТОГДА ТабЧ.Номенклатура.Эксклюзив
	//	|							ИНАЧЕ ЛОЖЬ
	//	|						КОНЕЦ
	//	|				ИНАЧЕ ЛОЖЬ
	//	|			КОНЕЦ)
	//	|			И (ТабЧ.Номенклатура.Новинка = ВЫБОР
	//	|				КОГДА ТабЧ.ТипСкидкиНаценки = ЗНАЧЕНИЕ(Перечисление.ТипСкидкиНаценки.Оптовая)
	//	|					ТОГДА ВЫБОР
	//	|							КОГДА ТабЧ.Номенклатура.НовинкаДо > &ЦеныНаДату
	//	|								ТОГДА ТабЧ.Номенклатура.Новинка
	//	|							ИНАЧЕ ЛОЖЬ
	//	|						КОНЕЦ
	//	|				КОГДА ТабЧ.ТипСкидкиНаценки = ЗНАЧЕНИЕ(Перечисление.ТипСкидкиНаценки.ПустаяСсылка)
	//	|					ТОГДА ВЫБОР
	//	|							КОГДА ТабЧ.Номенклатура.НовинкаДо > &ЦеныНаДату
	//	|								ТОГДА ТабЧ.Номенклатура.Новинка
	//	|							ИНАЧЕ ЛОЖЬ
	//	|						КОНЕЦ
	//	|				ИНАЧЕ ЛОЖЬ
	//	|			КОНЕЦ)";
	//
	//Запрос.УстановитьПараметр("ТабЧ"   , Объект.Товары.Выгрузить());
	//Запрос.УстановитьПараметр("РазмерЦенника"   , Объект.РазмерЦенника);
	//Запрос.УстановитьПараметр("ЦеныНаДату"   , Объект.ЦеныНаДату);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Если Не РезультатЗапроса.Пустой() тогда
	//	Объект.Товары.Загрузить(РезультатЗапроса.Выгрузить());
	//КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РазмерЦенника) тогда
		Для Каждого Строка из Объект.Товары цикл 
			Попытка		
				Если ЗначениеЗаполнено(Строка.ТипПереоценки) тогда 
					Если Строка.ТипПереоценки = Перечисления.ТипыПереоценок.ПромоНачало тогда
						ТипСкидкиНаценки = Перечисления.ТипСкидкиНаценки.ПромоНачало;
					Иначе
						ТипСкидкиНаценки = Строка.ТипСкидкиНаценки;
					КонецЕсли;
				Иначе
					ТипСкидкиНаценки = Строка.ТипСкидкиНаценки;
				КонецЕсли;
				Шаблон = ПолучитьШаблонПоРазмеру(Строка.Номенклатура,ТипСкидкиНаценки);
				Строка.ШаблонЦенника        = Шаблон;
				Если ЗначениеЗаполнено(Шаблон) тогда 
					Строка.Выбран = Истина;
				Иначе
					Строка.Выбран = Ложь;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСкидкуНаценку(Номенклатура)
	СкидкаНАценка = Справочники.СкидкиНаценки.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВЫБОР
		|		КОГДА Акции.СкидкаПервая <> 0
		|			ТОГДА Акции.СкидкаПервая
		|		КОГДА Акции.СкидкаКэшБэк <> 0
		|			ТОГДА Акции.СкидкаКэшБэк
		|		КОГДА Акции.СкидкаОптовая <> 0
		|			ТОГДА Акции.СкидкаОптовая
		|		КОГДА Акции.СкидкаСложная <> 0
		|			ТОГДА Акции.СкидкаСложная
		|	КОНЕЦ КАК СкидкаНаценка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДействиеСкидокНаценок.СкидкаНаценка КАК СкидкаСложная,
		|		0 КАК СкидкаОптовая,
		|		0 КАК СкидкаПервая,
		|		0 КАК СкидкаКэшБэк
		|	ИЗ
		|		РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|			ПО ДействиеСкидокНаценок.СкидкаНаценка.СегментНоменклатурыПредоставления = НоменклатураСегмента.Сегмент
		|	ГДЕ
		|		(ДействиеСкидокНаценок.СкидкаНаценка.ТипСкидкиНаценки = &ТипАкциисложная
		|					И ДействиеСкидокНаценок.Период <= &КонецДня
		|					И ДействиеСкидокНаценок.ДатаОкончания >= &НачалоДня
		|					И НоменклатураСегмента.Номенклатура = &Номенклатура
		|					И ДействиеСкидокНаценок.Магазин = &Магазин
		|				ИЛИ ДействиеСкидокНаценок.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|					И ДействиеСкидокНаценок.СкидкаНаценка.УчаствуетВПереоценке = ИСТИНА)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДействиеСкидокНаценок.СкидкаНаценка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		ДействиеСкидокНаценок.СкидкаНаценка,
		|		0,
		|		0
		|	ИЗ
		|		РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|			ПО ДействиеСкидокНаценок.СкидкаНаценка.СегментНоменклатурыПредоставления = НоменклатураСегмента.Сегмент
		|	ГДЕ
		|		(ДействиеСкидокНаценок.СкидкаНаценка.ТипСкидкиНаценки = &ТипАкцииОптовая
		|					И ДействиеСкидокНаценок.Период <= &КонецДня
		|					И ДействиеСкидокНаценок.ДатаОкончания >= &НачалоДня
		|					И НоменклатураСегмента.Номенклатура = &Номенклатура
		|					И ДействиеСкидокНаценок.Магазин = &Магазин
		|				ИЛИ ДействиеСкидокНаценок.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|					И ДействиеСкидокНаценок.СкидкаНаценка.УчаствуетВПереоценке = ИСТИНА)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДействиеСкидокНаценок.СкидкаНаценка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		0,
		|		ДействиеСкидокНаценок.СкидкаНаценка,
		|		0
		|	ИЗ
		|		РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|			ПО ДействиеСкидокНаценок.СкидкаНаценка.СегментНоменклатурыПредоставления = НоменклатураСегмента.Сегмент
		|	ГДЕ
		|		(ДействиеСкидокНаценок.СкидкаНаценка.ТипСкидкиНаценки = &ТипАкцииНаПервуюПозицию
		|					И ДействиеСкидокНаценок.Период <= &КонецДня
		|					И ДействиеСкидокНаценок.ДатаОкончания >= &НачалоДня
		|					И НоменклатураСегмента.Номенклатура = &Номенклатура
		|					И ДействиеСкидокНаценок.Магазин = &Магазин
		|				ИЛИ ДействиеСкидокНаценок.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|					И ДействиеСкидокНаценок.СкидкаНаценка.УчаствуетВПереоценке = ИСТИНА)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДействиеСкидокНаценок.СкидкаНаценка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		0,
		|		0,
		|		ДействиеСкидокНаценок.СкидкаНаценка
		|	ИЗ
		|		РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|			ПО ДействиеСкидокНаценок.СкидкаНаценка.СегментНоменклатурыПредоставления = НоменклатураСегмента.Сегмент
		|	ГДЕ
		|		(ДействиеСкидокНаценок.СкидкаНаценка.ТипСкидкиНаценки = &ТипАкцииКэшБэк
		|					И ДействиеСкидокНаценок.Период <= &КонецДня
		|					И ДействиеСкидокНаценок.ДатаОкончания >= &НачалоДня
		|					И НоменклатураСегмента.Номенклатура = &Номенклатура
		|					И ДействиеСкидокНаценок.Магазин = &Магазин
		|				ИЛИ ДействиеСкидокНаценок.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|					И ДействиеСкидокНаценок.СкидкаНаценка.УчаствуетВПереоценке = ИСТИНА)) КАК Акции
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА Акции.СкидкаПервая <> 0
		|			ТОГДА Акции.СкидкаПервая
		|		КОГДА Акции.СкидкаКэшБэк <> 0
		|			ТОГДА Акции.СкидкаКэшБэк
		|		КОГДА Акции.СкидкаОптовая <> 0
		|			ТОГДА Акции.СкидкаОптовая
		|		КОГДА Акции.СкидкаСложная <> 0
		|			ТОГДА Акции.СкидкаСложная
		|	КОНЕЦ";
	Запрос.УстановитьПараметр("Номенклатура"        , Номенклатура);
	Запрос.УстановитьПараметр("ТипАкциисложная"        , Перечисления.ТипСкидкиНаценки.СложнаяМеханика);
	Запрос.УстановитьПараметр("ТипАкцииОптовая"        , Перечисления.ТипСкидкиНаценки.Оптовая);
	Запрос.УстановитьПараметр("ТипАкцииНаПервуюПозицию"        , Перечисления.ТипСкидкиНаценки.НаПервуюПозицию);
	Запрос.УстановитьПараметр("ТипАкцииКэшБэк"        , Перечисления.ТипСкидкиНаценки.КэшБэк);	
	Запрос.УстановитьПараметр("КонецДня"        , КонецДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("НачалоДня"        ,  НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Магазин"        ,  Объект.Магазин);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СкидкаНаценка = ВыборкаДетальныеЗаписи.СкидкаНаценка;
	КонецЦикла;
	
Возврат СкидкаНаценка;
КонецФункции

&НаКлиенте
Процедура БелаяПриИзменении(Элемент)
	Если Белая тогда 
		Зеленая = Ложь;
		Желтая  = Ложь;
		ВыбратьСтрокиОбычныйЦенник();
	Иначе	
		ИсключитьСтроки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЖелтаяПриИзменении(Элемент)
	Если Желтая тогда 
		Зеленая = Ложь;
		Белая   = Ложь;
		ВыбратьСтрокиАкции();
	Иначе	
		ИсключитьСтроки();		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗеленаяПриИзменении(Элемент)
	Если Зеленая тогда 
		Желтая = Ложь;
		Белая  = Ложь;
		ВыбратьСтрокиНовинкаЭксклюзив();
	Иначе	
		ИсключитьСтроки();		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСтрокиНовинкаЭксклюзив()
	
	Количество = 0;
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		ТабРеквезитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СтрокаТЧ.Номенклатура,"Эксклюзив,Новинка,НОвинкаДО");
		Если ТабРеквезитов.Эксклюзив или (ТабРеквезитов.Новинка И ТабРеквезитов.НОвинкаДО > ТекущаяДата() ) тогда 	
			СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
			
			Если СтрокаТЧ.Выбран Тогда
				Количество = Количество + 1;
			КонецЕсли;
		Иначе 	
		   СтрокаТЧ.Выбран = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоВсего = Объект.Товары.Количество();
	
	ПоказатьОповещениеПользователюОВозможнойОшибке("", Количество, КоличествоВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСтрокиАкции()
	
	Количество = 0;
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		ТабРеквезитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СтрокаТЧ.Номенклатура,"Эксклюзив,Новинка,НОвинкаДО");
		Если ТабРеквезитов.Эксклюзив или (ТабРеквезитов.НОвинка И ТабРеквезитов.НОвинкаДО > ТекущаяДата() ) тогда 	
		   СтрокаТЧ.Выбран = Ложь;
		Иначе
			Если СтрокаТЧ.СкидкаНаценка = ПредопределенноеЗначение("Перечисление.ТипСкидкиНаценки.НаПервуюПозицию") ИЛИ  СтрокаТЧ.СкидкаНаценка = ПредопределенноеЗначение("Перечисление.ТипСкидкиНаценки.СложнаяМеханика") ИЛИ СтрокаТЧ.ТипПереоценки = ПредопределенноеЗначение("Перечисление.ТипыПереоценок.ПромоНачало") тогда
				СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
				
				Если СтрокаТЧ.Выбран Тогда
					Количество = Количество + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоВсего = Объект.Товары.Количество();
	
	ПоказатьОповещениеПользователюОВозможнойОшибке("", Количество, КоличествоВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСтрокиОбычныйЦенник()
	
	Количество = 0;
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		ТабРеквезитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СтрокаТЧ.Номенклатура,"Эксклюзив,Новинка,НОвинкаДО");
		Если ТабРеквезитов.Эксклюзив или (ТабРеквезитов.Эксклюзив И ТабРеквезитов.НОвинкаДО > ТекущаяДата()) ИЛИ			
			СтрокаТЧ.СкидкаНаценка = ПредопределенноеЗначение("Перечисление.ТипСкидкиНаценки.НаПервуюПозицию") ИЛИ  СтрокаТЧ.СкидкаНаценка = ПредопределенноеЗначение("Перечисление.ТипСкидкиНаценки.СложнаяМеханика") ИЛИ СтрокаТЧ.ТипПереоценки = ПредопределенноеЗначение("Перечисление.ТипыПереоценок.ПромоНачало") тогда
		  	СтрокаТЧ.Выбран = Ложь; 
		Иначе 
		 	СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);			
			Если СтрокаТЧ.Выбран Тогда
				Количество = Количество + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоВсего = Объект.Товары.Количество();
	
	ПоказатьОповещениеПользователюОВозможнойОшибке("", Количество, КоличествоВсего);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСкидкиНаценкиНаСервере()
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл  	
		СкидкаНаценка = ПолучитьСкидкуНаценку(СтрокаТЧ.Номенклатура); 
		Если ЗначениеЗаполнено(СкидкаНаценка) тогда
			СтрокаТЧ.СкидкаНаценка = СкидкаНаценка;		
			ТабРеквезиты =  ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СкидкаНаценка,"ТипСкидкиНаценки,ЗначениеСкидкиНаценки");
			СтрокаТЧ.ЗначениеСкидкиНаценки =  ТабРеквезиты.ЗначениеСкидкиНаценки;
			СтрокаТЧ.ТипСкидкиНаценки = ТабРеквезиты.ТипСкидкиНаценки;
		Иначе
			СтрокаТЧ.СкидкаНаценка = Справочники.СкидкиНаценки.ПустаяСсылка();	
			СтрокаТЧ.ЗначениеСкидкиНаценки =  0;
			СтрокаТЧ.ТипСкидкиНаценки = Перечисления.ТипСкидкиНаценки.ПустаяСсылка();
		КонецЕсли;
		ТипПереоценки = ПолучитьТипПереценки(СтрокаТЧ.Номенклатура);
		Если ЗначениеЗаполнено(ТипПереоценки) тогда
			СтрокаТЧ.ТипПереоценки =ТипПереоценки; 	
		КонецЕсли;
		Попытка
			СтрокаТЧ.ШаблонЦенника = ПолучитьШаблон(СтрокаТЧ.Номенклатура,СтрокаТЧ.ТипСкидкиНаценки);
			//СтрокаТЧ.СтараяЦена = ПолучитьСтаруюЦену(СтрокаТЧ.Номенклатура); 
		Исключение  
		КонецПопытки; 
		СтрокаТЧ.БонусАкцияСписан = ПолучитьБонусАкцияСписан(СтрокаТЧ.Номенклатура);
		СтрокаТЧ.БонусБазаНачислен = ПолучитьБонусБазаНачислен(СтрокаТЧ.Номенклатура);
	КонецЦикла;
	ТекстСобытия = "";
	ТекстОповещения = "";
	ПересчитатьЦеныСервер(ТекстСобытия, ТекстОповещения);
КонецПроцедуры


&НаСервере
Функция ПолучитьБонусАкцияСписан(Номенклатура)
	
	СкидкаНАценка = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ДействиеСкидокНаценок.СкидкаНаценка.ПрограммаЛояльности.МаксимальныйПроцентОплатыБонусами) КАК СкидкаНаценка
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|		ПО ДействиеСкидокНаценок.СкидкаНаценка.СегментНоменклатурыПредоставления = НоменклатураСегмента.Сегмент
		|ГДЕ
		|	ДействиеСкидокНаценок.СкидкаНаценка.ТипСкидкиНаценки = &ТипАкцииСписаниеБонусов
		|	И ДействиеСкидокНаценок.Период <= &КонецДня
		|	И ДействиеСкидокНаценок.ДатаОкончания >= &НачалоДня
		|	И НоменклатураСегмента.Номенклатура = &Номенклатура
		|	И (ДействиеСкидокНаценок.Магазин = &Магазин
		|			ИЛИ ДействиеСкидокНаценок.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
		|	И ДействиеСкидокНаценок.СкидкаНаценка.УчаствуетВПереоценке = ИСТИНА";
	Запрос.УстановитьПараметр("Номенклатура"        , Номенклатура);
	Запрос.УстановитьПараметр("ТипАкцииСписаниеБонусов"        , Перечисления.ТипСкидкиНаценки.СписаниеБонусов);
	Запрос.УстановитьПараметр("КонецДня"        , КонецДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("НачалоДня"        ,  НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Магазин"        ,  Объект.Магазин);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СкидкаНаценка = ВыборкаДетальныеЗаписи.СкидкаНаценка;
	КонецЦикла;
	
Возврат СкидкаНаценка;


КонецФункции


&НаСервере
Функция ПолучитьБонусБазаНачислен(Номенклатура)
	СкидкаНАценка = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ДействиеСкидокНаценок.СкидкаНаценка.ЗначениеСкидкиНаценки) КАК СкидкаНаценка
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|		ПО ДействиеСкидокНаценок.СкидкаНаценка.СегментНоменклатурыПредоставления = НоменклатураСегмента.Сегмент
		|ГДЕ
		|	ДействиеСкидокНаценок.СкидкаНаценка.ТипСкидкиНаценки = &ТипАкцииНачислениеБонусов
		|	И ДействиеСкидокНаценок.Период <= &КонецДня
		|	И ДействиеСкидокНаценок.ДатаОкончания >= &НачалоДня
		|	И НоменклатураСегмента.Номенклатура = &Номенклатура
		|	И (ДействиеСкидокНаценок.Магазин = &Магазин
		|			ИЛИ ДействиеСкидокНаценок.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
		|	И ДействиеСкидокНаценок.СкидкаНаценка.УчаствуетВПереоценке = ИСТИНА";
	Запрос.УстановитьПараметр("Номенклатура"        , Номенклатура);
	Запрос.УстановитьПараметр("ТипАкцииНачислениеБонусов"        , Перечисления.ТипСкидкиНаценки.НачислениеБонусов);
	Запрос.УстановитьПараметр("КонецДня"        , КонецДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("НачалоДня"        ,  НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Магазин"        ,  Объект.Магазин);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СкидкаНаценка = ВыборкаДетальныеЗаписи.СкидкаНаценка;
	КонецЦикла;
	
Возврат СкидкаНаценка;


КонецФункции

&НаСервере
Функция ПолучитьТипПереценки(Номенклатура)
	Если ЗначениеЗаполнено(Объект.ВидЦены) тогда 
		ВидЦены = Объект.ВидЦены;
	Иначе
		Магазин =  ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин;
		ПравилоЦенообразования = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Магазин,"ПравилоЦенообразования");
		ВидЦены =   ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПравилоЦенообразования,"ВидЦен");
	КонецЕсли;
		
	
	ТипПереоценки = Неопределено;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЦеныНоменклатурыСрезПоследних.ТипПереоценки КАК ТипПереоценки
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&ТекДата,
		|			Номенклатура = &Номенклатура
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		|ГДЕ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТипПереоценки = ВыборкаДетальныеЗаписи.ТипПереоценки;
	КонецЦикла;
	Возврат ТипПереоценки;

КонецФункции

&НаСервере
Функция ПолучитьСтаруюЦену(Номенклатура)

	СтараяЦена = 0;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОпорныеЦеныНоменклатуры.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ОпорныеЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура) КАК ОпорныеЦеныНоменклатуры";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

	Запрос.УстановитьПараметр("ОбъектЦенообразования", Объект.Магазин);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтараяЦена = ВыборкаДетальныеЗаписи.Цена;
	КонецЦикла;
	
	Возврат СтараяЦена;

КонецФункции

&НаСервере
Функция ПолучитьПервуюЦену(Номенклатура)

	СтараяЦена = 0;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЕСТЬNULL(ОпорныеЦеныНоменклатурыСрезПоследних.Цена, 0) / ЕСТЬNULL(ОпорныеЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент, 1) КАК Цена
		|ИЗ
		|	РегистрСведений.ОпорныеЦеныНоменклатуры.СрезПоследних(
		|			,
		|			Номенклатура = &Номенклатура
		|				И Магазин = &Магазин) КАК ОпорныеЦеныНоменклатурыСрезПоследних";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Магазин",Объект.Магазин) ;
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтараяЦена = ВыборкаДетальныеЗаписи.Цена;
	КонецЦикла;
	
	Возврат СтараяЦена;

КонецФункции


&НаСервере
Функция ПолучитьОЧ(Номенклатура)

	ОЧ = 0;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(УслугиПредоставления.Ссылка.ПериодПредоставления) КАК ПериодПредоставления,
		|	УслугиПредоставления.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Таб
		|ИЗ
		|	Справочник.УслугиБанка.НоменклатураПредоставления КАК УслугиПредоставления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|		ПО УслугиПредоставления.Номенклатура = НоменклатураСегмента.Сегмент
		|ГДЕ
		|	(УслугиПредоставления.Номенклатура = &Номенклатура
		|			ИЛИ НоменклатураСегмента.Номенклатура = &Номенклатура)
		|	И УслугиПредоставления.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И УслугиПредоставления.Ссылка.Блокирован = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	УслугиПредоставления.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УслугиИсключения.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТабИсключения
		|ИЗ
		|	Справочник.УслугиБанка.НоменклатураИсключения КАК УслугиИсключения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента1
		|		ПО УслугиИсключения.Номенклатура = НоменклатураСегмента1.Сегмент
		|ГДЕ
		|	(УслугиИсключения.Номенклатура = &Номенклатура
		|			ИЛИ НоменклатураСегмента1.Номенклатура = &Номенклатура)
		|	И УслугиИсключения.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И УслугиИсключения.Ссылка.Блокирован = ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таб.ПериодПредоставления КАК ПериодПредоставления
		|ПОМЕСТИТЬ ТабРезультат
		|ИЗ
		|	Таб КАК Таб
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабИсключения КАК ТабИсключения
		|		ПО Таб.Ссылка = ТабИсключения.Ссылка
		|ГДЕ
		|	ТабИсключения.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТабРезультат.ПериодПредоставления) КАК ПериодПредоставления
		|ИЗ
		|	ТабРезультат КАК ТабРезультат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТабИсключения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТабРезультат";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ОбъектЦенообразования", Объект.Магазин);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОЧ = ВыборкаДетальныеЗаписи.ПериодПредоставления;
	КонецЦикла;
	
	Возврат ОЧ;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьСкидкиНаценки(Команда)
	ЗаполнитьСкидкиНаценкиНаСервере();
КонецПроцедуры

&НаСервере
Процедура СортЦенаВозрНаСервере()
	Объект.Товары.Сортировать("Цена Возр");
КонецПроцедуры

&НаКлиенте
Процедура СортЦенаВозр(Команда)
	СортЦенаВозрНаСервере();
КонецПроцедуры

&НаСервере
Процедура СортЦенаУбывНаСервере()
	Объект.Товары.Сортировать("Цена Убыв");
КонецПроцедуры

&НаКлиенте
Процедура СортЦенаУбыв(Команда)
	СортЦенаУбывНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.Товары.ТекущиеДанные;	
	Если ТекДанные <> Неопределено тогда 
		Если ТипЗнч(ТекДанные.Номенклатура) = Тип("СправочникСсылка.Номенклатура") тогда 
			ТолькоОбычныйЦенник = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекДанные.Номенклатура,"ТолькоОбычныйЦенник"); 
			Элементы.ТоварыШаблонЦенника.СписокВыбора.Очистить();
			Если ТолькоОбычныйЦенник тогда 
				Элементы.ТоварыШаблонЦенника.СписокВыбора.ЗагрузитьЗначения(СписокШаблоновТолькоОбычные());
			Иначе
				Элементы.ТоварыШаблонЦенника.СписокВыбора.ЗагрузитьЗначения(СписокШаблонов());
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СписокШаблоновТолькоОбычные()

	СпискоШаблонов = Новый Массив;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХранилищеШаблонов.Ссылка КАК Шаблон
		|ИЗ
		|	Справочник.ХранилищеШаблонов КАК ХранилищеШаблонов
		|ГДЕ
		|	ХранилищеШаблонов.ПометкаУдаления = Ложь
		|	И ХранилищеШаблонов.ОбычныйЦенник = Истина
		|	И ХранилищеШаблонов.ТипШаблона = &ТипШаблона";
	
	Запрос.УстановитьПараметр("ТипШаблона", Перечисления.ТипыШаблонов.ЭтикеткаЦенник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СпискоШаблонов.Добавить(ВыборкаДетальныеЗаписи.Шаблон);
	КонецЦикла;
	
	Возврат СпискоШаблонов;

КонецФункции

&НаСервере
Функция СписокШаблонов()

СпискоШаблонов = Новый Массив;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ХранилищеШаблонов.Ссылка КАК Шаблон
		|ИЗ
		|	Справочник.ХранилищеШаблонов КАК ХранилищеШаблонов
		|ГДЕ
		|	ХранилищеШаблонов.ПометкаУдаления = Ложь
		|	И ХранилищеШаблонов.ТипШаблона = &ТипШаблона";
	Запрос.УстановитьПараметр("ТипШаблона", Перечисления.ТипыШаблонов.ЭтикеткаЦенник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СпискоШаблонов.Добавить(ВыборкаДетальныеЗаписи.Шаблон);
	КонецЦикла;
	
	Возврат СпискоШаблонов;


КонецФункции

&НаСервере
Функция ПолучитьОбычныйШаблон(ШаблонЦенника)

СпискоШаблонов = Неопределено;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХранилищеШаблонов.Ссылка КАК Шаблон
		|ИЗ
		|	Справочник.ХранилищеШаблонов КАК ХранилищеШаблонов
		|ГДЕ
		|	ХранилищеШаблонов.ПометкаУдаления = ЛОЖЬ
		|	И ХранилищеШаблонов.ОбычныйЦенник = Истина
		|	И ХранилищеШаблонов.РазмерЦенника = &РазмерЦенника
		|	И ХранилищеШаблонов.ТипШаблона = &ТипШаблона";
	
	Запрос.УстановитьПараметр("ТипШаблона", Перечисления.ТипыШаблонов.ЭтикеткаЦенник);
	Запрос.УстановитьПараметр("РазмерЦенника",  ОбщегоНазначения.ПолучитьЗначениеРеквизита(ШаблонЦенника,"РазмерЦенника"));
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СпискоШаблонов=ВыборкаДетальныеЗаписи.Шаблон;
	КонецЦикла;
	
	Возврат СпискоШаблонов;


КонецФункции

&НаСервере
Процедура ПечатьКомплексногоЦенникаА6КоляскиНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПечатьКомплексногоЦенникаА6Коляски(Команда)
	ТекстОшибки = НеУчтенКомплектА4Кровать();
	Если ТекстОшибки <> "" тогда
		Сообщить(ТекстОшибки); 		
		Возврат;     		
	КонецЕсли; 
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.ПечатьЭтикетокИЦенников",
				"КомплексныйА6Коляски",
				Объект,
				Неопределено,
				Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьКомплексногоЦенникаА4Кроватки(Команда)
	ТекстОшибки = НеУчтенКомплектА4Кровать();
	Если ТекстОшибки <> "" тогда
		Сообщить(ТекстОшибки); 		
		Возврат;     		
	КонецЕсли; 
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.ПечатьЭтикетокИЦенников",
				"КомплексныйА4Кроватки",
				Объект,
				Неопределено,
				Неопределено);
КонецПроцедуры



&НаСервере
Функция НеУчтенКомплектА4Кровать()
	
	НеПрошлоПроверку = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.Номенклатура КАК Номенклатура,
		|	Таб.НомерКомплекта КАК НомерКомплекта
		|ПОМЕСТИТЬ ТабКомплект
		|ИЗ
		|	&Таб КАК Таб
		|ГДЕ
		|	Таб.НомерКомплекта <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ТабКомплект.Номенклатура) КАК Номенклатура,
		|	ТабКомплект.НомерКомплекта
		|ИЗ
		|	ТабКомплект КАК ТабКомплект
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабКомплект.НомерКомплекта
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура";
	
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СтранаПроисхождения);
	Запрос.УстановитьПараметр("Таб", Объект.Товары.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
			НеПрошлоПроверку = "Нет комплектов!";
	Иначе

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Номенклатура > 6 тогда
			НеПрошлоПроверку = "Состав комплекта не может быть больше 6!";
			Прервать;
		КонецЕсли;
	КонецЦикла;
	КонецЕсли;

	Возврат НеПрошлоПроверку;

КонецФункции


&НаСервере
Функция НеУчтенКомплектА4Гарнитура()
	
	НеПрошлоПроверку = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.Номенклатура КАК Номенклатура,
		|	Таб.НомерКомплекта КАК НомерКомплекта
		|ПОМЕСТИТЬ ТабКомплект
		|ИЗ
		|	&Таб КАК Таб
		|ГДЕ
		|	Таб.НомерКомплекта <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ТабКомплект.Номенклатура) КАК Номенклатура,
		|	ТабКомплект.НомерКомплекта
		|ИЗ
		|	ТабКомплект КАК ТабКомплект
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабКомплект.НомерКомплекта
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура";
	
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СтранаПроисхождения);
	Запрос.УстановитьПараметр("Таб", Объект.Товары.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
			НеПрошлоПроверку = "Нет комплектов!";
	Иначе

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Номенклатура > 10 тогда
			НеПрошлоПроверку = "Состав комплекта не может быть больше 10!";
			Прервать;
		КонецЕсли;
	КонецЦикла;
	КонецЕсли;

	Возврат НеПрошлоПроверку;

КонецФункции

&НаСервере
Процедура ПечатьКомплексногоЦенникаА4ГарнитураНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПечатьКомплексногоЦенникаА4Гарнитура(Команда)
	ТекстОшибки = НеУчтенКомплектА4Гарнитура();
	Если ТекстОшибки <> "" тогда
		Сообщить(ТекстОшибки); 		
		Возврат;     		
	КонецЕсли; 
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.ПечатьЭтикетокИЦенников",
				"КомплексныйА4Гарнитура",
				Объект,
				Неопределено,
				Неопределено);
КонецПроцедуры

&НаСервере
Функция СоздатьПереоценкуНаСервере()
	ОдинПроект = ПроверитьПроекты();
	Если ОдинПроект тогда 
		СсылкаДокПереоценка = СоздатьДокПереоценка();
	Иначе
		СсылкаДокПереоценка = Неопределено;
		Сообщить("В табличной части несколько проектов, создание документа невозможно!");
	КонецЕсли;
Возврат СсылкаДокПереоценка ;
КонецФункции

&НаСервере
Функция  ПроверитьПроекты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ТабПроекты
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТабПроекты.Номенклатура.ВидНоменклатуры) КАК Проект
		|ПОМЕСТИТЬ ТабИтог
		|ИЗ
		|	ТабПроекты КАК ТабПроекты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабИтог.Проект КАК Проект
		|ИЗ
		|	ТабИтог КАК ТабИтог
		|ГДЕ
		|	ТабИтог.Проект = 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТабПроекты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТабИтог";
	Запрос.УстановитьПараметр("Таб",Объект.Товары.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат НЕ РезультатЗапроса.Пустой();	
	
КонецФункции






&НаКлиенте
Процедура СоздатьПереоценку(Команда)
СсылкаДокПереоценка =	СоздатьПереоценкуНаСервере();
Если ЗначениеЗаполнено(СсылкаДокПереоценка) тогда
	ОткрытьЗначение(СсылкаДокПереоценка);
КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СоздатьДокПереоценка()
	Записывать = Ложь;	
	Если Объект.Товары.Количество() = 0 тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ДокПереоценка = Документы.ПереоценкаТоваровНаСкладах.СоздатьДокумент();
	ДокПереоценка.Комментарий 	= "Создано на основании печати этикеток!";
	ДокПереоценка.ВидОперации 	= Перечисления.ВидыОперацийПереоценкаТоваровНаСкладах.ЭтикетировкаТоваров;	
	Магазин	 =  ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин;
	ДокПереоценка.Магазин 		= Магазин;
	
	Для каждого СтрокаТЧ из Объект.Товары цикл
		НоваяСтрока 			  			= ДокПереоценка.Товары.Добавить(); 	
		НоваяСтрока.Номенклатура  			= СтрокаТЧ.Номенклатура;
		НоваяСтрока.ЦенаНовая     			= СтрокаТЧ.Цена;
		НоваяСтрока.Цена 		  			= СтрокаТЧ.СтараяЦена;
		НоваяСтрока.ТипПереоценки 			= СтрокаТЧ.ТипПереоценки;
		НоваяСтрока.Количество 	  			= 1;
		НоваяСтрока.Сумма 		  			= НоваяСтрока.Цена;
		НоваяСтрока.Склад         			= ОбщегоНазначения.ПолучитьЗначениеРеквизита(Магазин,"СкладПродажи");
		НоваяСтрока.ТипПереоценки 			= СтрокаТЧ.ТипПереоценки;
		ВидНоменклатуры 		  			= ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаТЧ.Номенклатура,"ВидНоменклатуры"); 
		НоваяСтрока.ТипСкидкиНаценки  		= СтрокаТЧ.ТипСкидкиНаценки;
		НоваяСтрока.СкидкаНаценка     		= СтрокаТЧ.СкидкаНаценка;
		НоваяСтрока.ЗначениеСкидкиНаценки   = СтрокаТЧ.ЗначениеСкидкиНаценки;
	КонецЦикла;                         
	ДокПереоценка.Дата 			  = ТекущаяДата();	
	ДокПереоценка.ДатаНовыхЦен 	  = ТекущаяДата();	
	ДокПереоценка.ДатаОстатков	  = ТекущаяДата();	
	ДокПереоценка.ВидНоменклатуры = ВидНоменклатуры;
	ДокПереоценка.Записать(РежимЗаписиДокумента.Запись);
	Возврат ДокПереоценка.Ссылка;
КонецФункции
