#Область РаспределениеБонусныхБалловПоТаблицеТоваров

Функция РаспределитьСуммуБонусныхБаллов(Объект, ИмяТовары, ТаблицаБонусныеБаллы, ПараметрыРаспределения)	Экспорт

	Перем СуммаБонусныхБалловДляПогашения;

	УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();

//	Табличные части "ИмяТовары" и "ИмяОплата" связываются реквизитом "КлючСвязиБонусныхБаллов"
	ТоварыДляОплаты = БонусныеБаллыВызовСервера.ПолучитьТаблицуТоварыДляОплаты(Объект[ИмяТовары], ПараметрыРаспределения, УчетнаяПолитика);
	СуммаДокумента  = ТоварыДляОплаты.Итог("СуммаСНДС");

//	Проверим переданную сумму на погашение.. если таковой нет, то назначим сумму документа.
//	Но ниже нужно будет уточнить эту сумму с учётом ограничения оплаты бонусами.
	ПараметрыРаспределения.Свойство("СуммаБонусныхБалловДляПогашения", СуммаБонусныхБалловДляПогашения);

	Если НЕ ТипЗнч(СуммаБонусныхБалловДляПогашения) = Тип("Число") ИЛИ СуммаБонусныхБалловДляПогашения <= 0 Тогда

			УточнитьСумму = Истина;

	Иначе	УточнитьСумму = Ложь;

	КонецЕсли;

	ТаблицаОплатаБонуснымиБаллами = ПолучитьТаблицуОплатаБонуснымиБалламиПустую();
	ДанныеНакоплений			  = ПолучитьТаблицуДляСписания(ТаблицаБонусныеБаллы, ТоварыДляОплаты, ПараметрыРаспределения, УчетнаяПолитика); 

	Если УточнитьСумму Тогда

		Если ДанныеНакоплений.Программы.Итог("Сумма") >= СуммаДокумента Тогда

		//		по каждой строке отнимаем сумму мин.ограничения, установленную в учётной политике.
				СуммаБонусныхБалловДляПогашения = Макс(
					0, СуммаДокумента - ТоварыДляОплаты.Количество() * УчетнаяПолитика.ЦенаПродажиМинимальная
				);

		Иначе	СуммаБонусныхБалловДляПогашения = ДанныеНакоплений.Программы.Итог("Сумма");

		КонецЕсли;

	КонецЕсли;

	ПараметрыРаспределения.Вставить("СуммаБонусныхБалловДляПогашения", СуммаБонусныхБалловДляПогашения);	//	контрольный момент

	СуммаБонусныхБалловДляПогашения = РаспределитьСуммуПогашенияПоПрограммамИТоварам(ДанныеНакоплений, ПараметрыРаспределения, УточнитьСумму);

	Для каждого СтрокаТоварыДляОплаты Из ТоварыДляОплаты Цикл

		СтрокиТоварыСписание = ДанныеНакоплений.Товары.НайтиСтроки(
				Новый Структура(
					"Номенклатура, Упаковка, КлючСвязиБонусныхБаллов"
					, СтрокаТоварыДляОплаты.Номенклатура
					, СтрокаТоварыДляОплаты.Упаковка
					, СтрокаТоварыДляОплаты.КлючСвязиБонусныхБаллов
				)
		);

		Для каждого СтрокаТоварыСписание Из СтрокиТоварыСписание Цикл

			Если СтрокаТоварыСписание.СуммаСписания > 0 Тогда

				СтрокаТоварыДляОплаты.СуммаБонусныхБалловСписано = СтрокаТоварыДляОплаты.СуммаБонусныхБалловСписано + СтрокаТоварыСписание.СуммаСписания;

				СтрокаОплата = ТаблицаОплатаБонуснымиБаллами.Добавить();
				СтрокаОплата.КлючСвязиБонусныхБаллов = СтрокаТоварыДляОплаты.КлючСвязиБонусныхБаллов;
				СтрокаОплата.ПрограммаЛояльности	 = СтрокаТоварыСписание.ПрограммаЛояльности;
				СтрокаОплата.СуммаБонусныхБаллов	 = СтрокаТоварыСписание.СуммаСписания;
				СтрокаОплата.ТипБонусов				 = СтрокаТоварыСписание.ТипБонусов;
				СтрокаОплата.ПриоритетТипа			 = СтрокаТоварыСписание.ПриоритетТипа;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	ТоварыДляОплаты.Сортировать("КлючСвязиБонусныхБаллов");
	ТаблицаОплатаБонуснымиБаллами.Сортировать("КлючСвязиБонусныхБаллов, ПриоритетТипа Убыв");

	Возврат Новый Структура("ТоварыДляОплаты, ОплатаБонуснымиБаллами", ТоварыДляОплаты, ТаблицаОплатаБонуснымиБаллами);

КонецФункции

Функция ПолучитьТаблицуТоварыДляОплаты(ТаблицаТовары, ПараметрыРаспределения, УчетнаяПолитика)	Экспорт

	РеквизитыТоваров = Справочники.Номенклатура.РеквизитыСписка(ОбщегоНазначения.ВыгрузитьКоллекцию(ТаблицаТовары,, "Номенклатура"));

	Если ПараметрыРаспределения.Свойство("ТоварыДляОплаты") Тогда
		
		ТоварыДляОплаты = БонусныеБаллыСервер.ПроверитьСтруктуруТаблицыТоварыДляОплаты(ПараметрыРаспределения.ТоварыДляОплаты, РеквизитыТоваров);

	Иначе

		ТоварыДляОплаты = БонусныеБаллыСервер.ПроверитьСтруктуруТаблицыТоварыДляОплаты();

		Для каждого СтрокаТабличнойЧасти Из ТаблицаТовары Цикл

			СтрокаДляОплаты = ТоварыДляОплаты.Добавить();

			СтрокаДляОплаты.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
			СтрокаДляОплаты.Упаковка	 = СтрокаТабличнойЧасти.Упаковка;
			СтрокаДляОплаты.Количество	 = СтрокаТабличнойЧасти.КоличествоУпаковок;
			СтрокаДляОплаты.СуммаСНДС	 = СтрокаТабличнойЧасти.СуммаВсего;
			СтрокаДляОплаты.КлючСвязи	 = СтрокаТабличнойЧасти.КлючСвязи;
			СтрокаДляОплаты.КлючСвязиБонусныхБаллов = СтрокаТабличнойЧасти.КлючСвязиБонусныхБаллов;

			Реквизиты = РеквизитыТоваров.Найти(СтрокаДляОплаты.Номенклатура, "Номенклатура");

			Если НЕ Реквизиты = Неопределено Тогда

				СтрокаДляОплаты.ТипНоменклатуры = Реквизиты.ТипНоменклатуры;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	ПроверитьРазрешенныеПозиции(ТоварыДляОплаты, УчетнаяПолитика);
	ТоварыДляОплаты.Сортировать("СуммаСНДС");

	Возврат ТоварыДляОплаты;

КонецФункции

Процедура ПроверитьРазрешенныеПозиции(ТоварыДляОплаты, УчетнаяПолитика)

	Если НЕ УчетнаяПолитика.РазрешитьОплатуБонуснымиБалламиПодарочныхСертификатов = Истина Тогда

		СтрокиУдалить = Новый Массив;

		Для каждого СтрокаДляОплаты Из ТоварыДляОплаты Цикл

			Если СтрокаДляОплаты.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда

				СтрокиУдалить.Добавить(СтрокаДляОплаты);

			КонецЕсли;

		КонецЦикла;

		Для каждого СтрокаДляОплаты Из СтрокиУдалить Цикл

			ТоварыДляОплаты.Удалить(СтрокаДляОплаты);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТаблицуДляСписания(ТаблицаБонусныеБаллы, ТоварыДляОплаты, ПараметрыРаспределения, УчетнаяПолитика)

	ДанныеНакоплений = Новый Структура("Программы, Товары", ТаблицаИтоговПрограммЛояльностиПустая());
//	ДанныеНакоплений.Программы	- контроль остатков по каждой программе. При списании значение суммы уменьшается на списанную сумму.
//	ДанныеНакоплений.Товары		- собственно, "плоская" таблица для списания

	Если ПараметрыРаспределения.Свойство("ТаблицаДляСписанияГотова") И ПараметрыРаспределения.ТаблицаДляСписанияГотова = Истина Тогда

	//	Такой режим вызывается из "Обработка.РМК.Форма.ФормаИспользованиеБонусов".
		ДанныеНакоплений.Товары = ОбщегоНазначения.ВыгрузитьКоллекцию(ТаблицаБонусныеБаллы);

		Для каждого СтрокаНакопления Из ДанныеНакоплений.Товары Цикл

			Если ДанныеНакоплений.Программы.Найти(СтрокаНакопления.ПрограммаЛояльности, "ПрограммаЛояльности") = Неопределено Тогда

				СтрокаПрограммы = ДанныеНакоплений.Программы.Добавить();
				СтрокаПрограммы.ПрограммаЛояльности = СтрокаНакопления.ПрограммаЛояльности;
				СтрокаПрограммы.ТипБонусов			= СтрокаНакопления.ТипБонусов;
				СтрокаПрограммы.ПриоритетТипа		= СтрокаНакопления.ПриоритетТипа;
				СтрокаПрограммы.МаксимальныйПроцентОплатыБонусами = СтрокаНакопления.МаксимальныйПроцентОплатыБонусами;
				СтрокаПрограммы.Сумма = СтрокаНакопления.СуммаПрограммы;

			КонецЕсли;

		КонецЦикла;

	Иначе

		ДанныеНакоплений.Товары = БонусныеБаллыСервер.ТаблицаНакопленийРазвернутаяПустая();

		Для каждого СтрокаБонусныеБаллы Из ТаблицаБонусныеБаллы Цикл

			СтрокаПрограммы = ДанныеНакоплений.Программы.Добавить();
			СтрокаПрограммы.ПрограммаЛояльности = СтрокаБонусныеБаллы.ПрограммаЛояльности;
			СтрокаПрограммы.ТипБонусов			= СтрокаБонусныеБаллы.ТипБонусов;
			СтрокаПрограммы.МаксимальныйПроцентОплатыБонусами = СтрокаБонусныеБаллы.МаксимальныйПроцентОплатыБонусами;
			СтрокаПрограммы.Сумма = СтрокаБонусныеБаллы.Сумма;

			Для каждого СтрокаДляОплаты Из ТоварыДляОплаты Цикл

				Если СтрокаБонусныеБаллы.ТоварыПрограмм.Количество() = 0 Тогда

						ДоступноСписание = Истина;

				Иначе	ДоступноСписание = НЕ (СтрокаБонусныеБаллы.ТоварыПрограмм.Найти(СтрокаДляОплаты.Номенклатура, "Номенклатура") = Неопределено);

				КонецЕсли;

				Если ДоступноСписание Тогда

					СтрокаНакопления = ДанныеНакоплений.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНакопления, СтрокаБонусныеБаллы);

					СтрокаНакопления.Номенклатура   = СтрокаДляОплаты.Номенклатура;
					СтрокаНакопления.КлючСвязиБонусныхБаллов = СтрокаДляОплаты.КлючСвязиБонусныхБаллов;
					СтрокаНакопления.Упаковка		= СтрокаДляОплаты.Упаковка;
					СтрокаНакопления.СуммаСНДС      = СтрокаДляОплаты.СуммаСНДС;	//	сумма продажи
					СтрокаНакопления.ПриоритетТипа  = БонусныеБаллыПовтИсп.ПриоритетТипаБонусов(СтрокаНакопления.ТипБонусов);
					СтрокаНакопления.СуммаПрограммы = СтрокаБонусныеБаллы.Сумма;
					СтрокаНакопления.СуммаДоступная = Мин(
						СтрокаНакопления.СуммаСНДС * СтрокаБонусныеБаллы.МаксимальныйПроцентОплатыБонусами / 100,
						СтрокаНакопления.СуммаПрограммы);
					СтрокаНакопления.СуммаДоступная = ?(СтрокаНакопления.СуммаДоступная = СтрокаНакопления.СуммаСНДС
						, СтрокаНакопления.СуммаДоступная - Макс(0.10, УчетнаяПолитика.ЦенаПродажиМинимальная)
						, СтрокаНакопления.СуммаДоступная
					);

				КонецЕсли;

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

	ДанныеНакоплений.Товары.Сортировать("Номенклатура, Приоритет Убыв, ПриоритетТипа Убыв");

//	Подготовим колонки в таблицах для последующего распределения суммы погашения.
	Для каждого КлючЗначение Из ДанныеНакоплений Цикл

		Если КлючЗначение.Значение.Колонки.Найти("СуммаСписания") = Неопределено Тогда

				КлючЗначение.Значение.Колонки.Добавить("СуммаСписания", Новый ОписаниеТипов("Число"));

		Иначе	КлючЗначение.Значение.ЗаполнитьЗначения(0, "СуммаСписания");

		КонецЕсли;

	КонецЦикла;

	Возврат ДанныеНакоплений;

КонецФункции

//	LNK 26.10.2021 05:55:01
Функция РаспределитьСуммуПогашенияПоПрограммамИТоварам(ДанныеНакоплений, ПараметрыРаспределения, УточнитьСумму)

//	1.	Делим сумму к погашению между программами в соответствии с приоритетами.
//		Пропорционально размазываем только внутри одного приоритета.
//		На распределение к нижнему приоритету переходит только остаток.
//	---------------------------------------------------------------------------------------

	ТаблицаПриоритетов = ДанныеНакоплений.Программы.Скопировать(, "ПриоритетТипа, Сумма");
	ТаблицаПриоритетов.Свернуть("ПриоритетТипа", "Сумма");
	ТаблицаПриоритетов.Сортировать("ПриоритетТипа Убыв");

	СуммаДляПогашения = ПараметрыРаспределения.СуммаБонусныхБалловДляПогашения;

	Для каждого СтрокаПриоритета Из ТаблицаПриоритетов Цикл

		Если СуммаДляПогашения = 0 Тогда

			Прервать;

		КонецЕсли;

		СтрокиПрограммы		= ДанныеНакоплений.Программы.НайтиСтроки(Новый Структура("ПриоритетТипа", СтрокаПриоритета.ПриоритетТипа));
		СуммаРаспределения	= СуммаДляПогашения;	//	фиксируем остаток суммы для распределения

		Для каждого СтрокаПрограммы Из СтрокиПрограммы Цикл

			Если СтрокаПриоритета.Сумма > 0 Тогда

				Коэффициент = СтрокаПрограммы.Сумма / СтрокаПриоритета.Сумма;
				СтрокаПрограммы.СуммаСписания = Мин(СтрокаПрограммы.Сумма, Окр(СуммаРаспределения * Коэффициент, 2));

				СуммаДляПогашения = Макс(0, СуммаДляПогашения - СтрокаПрограммы.СуммаСписания);

				Если СуммаДляПогашения = 0 Тогда

					Прервать;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

//	2.	Распределяем "разделённую" выше сумму погашения по товарным позициям.
//	---------------------------------------------------------------------------------------
	Для каждого СтрокаПрограммы Из ДанныеНакоплений.Программы Цикл

		СтрокиТовары = ДанныеНакоплений.Товары.НайтиСтроки(Новый Структура("ПрограммаЛояльности", СтрокаПрограммы.ПрограммаЛояльности));

	//	2.1.	Определим базу для вычисления коэффициента пропорциональности по СуммаСНДС
		СуммаИтогСНДС = 0;

		Для каждого СтрокаТовары Из СтрокиТовары Цикл

			Если СтрокаТовары.СуммаДоступная > 0 Тогда

				СуммаИтогСНДС = СуммаИтогСНДС + СтрокаТовары.СуммаСНДС;

			КонецЕсли;

		КонецЦикла;

		СуммаСписанияПрограммы = 0;	//	очередное уточнение
	//	2.2.	Выполним пропорциональное распределение суммы погашения по товарам, имеющим право
	//			на эту программу лояльности.
		Для каждого СтрокаТовары Из СтрокиТовары Цикл

			Если СуммаИтогСНДС > 0 И СтрокаТовары.СуммаДоступная > 0 Тогда	//	предохранитель

				СтрокаТовары.СуммаСписания	= Окр(СтрокаПрограммы.СуммаСписания * СтрокаТовары.СуммаСНДС / СуммаИтогСНДС, 2);
			//	Ограничим по значению процента списания с программы.
				СтрокаТовары.СуммаСписания	= Мин(СтрокаТовары.СуммаДоступная, СтрокаТовары.СуммаСписания);

				СуммаСписанияПрограммы = СуммаСписанияПрограммы + СтрокаТовары.СуммаСписания;

			Иначе

				СтрокаТовары.СуммаСписания = 0;

			КонецЕсли;

		КонецЦикла;

		СтрокаПрограммы.СуммаСписания = СуммаСписанияПрограммы;

	КонецЦикла;

//	---------------------------------------------------------------------------------------

	Если НЕ УточнитьСумму Тогда

	//	Сумма к погашению была указана пользователем - превышать её не будем.
	//	Если получилось чуть меньше (тут речь идёт о копейках, результат округления), то и ладно..
	//	а если больше - распределим по строкам.
	//	Используем тупо строку с максимальной суммой для списания.
		СуммаРазницы = ДанныеНакоплений.Товары.Итог("СуммаСписания") - ПараметрыРаспределения.СуммаБонусныхБалловДляПогашения;

		Если СуммаРазницы > 0 Тогда

			СтрокаТоварыМаксимум = Неопределено;

			Для каждого СтрокаТовары Из ДанныеНакоплений.Товары Цикл

				Если СтрокаТоварыМаксимум = Неопределено
				ИЛИ  СтрокаТоварыМаксимум.СуммаСписания < СтрокаТовары.СуммаСписания	Тогда

					СтрокаТоварыМаксимум = СтрокаТовары;

				КонецЕсли;

			КонецЦикла;

			Если НЕ СтрокаТоварыМаксимум = Неопределено И СтрокаТоварыМаксимум.СуммаСписания > СуммаРазницы Тогда

				СтрокаТоварыМаксимум.СуммаСписания = СтрокаТоварыМаксимум.СуммаСписания - СуммаРазницы;

				СтрокаПрограммы = ДанныеНакоплений.Программы.Найти(СтрокаТоварыМаксимум.ПрограммаЛояльности, "ПрограммаЛояльности");
				СтрокаПрограммы.СуммаСписания = СтрокаПрограммы.СуммаСписания - СуммаРазницы;

			КонецЕсли;

		КонецЕсли;

	Иначе

	//	Ранее сумма была назначена "от фонаря" - по сумме документа.
	//	Здесь уточняем по доступным суммам списания.
		ПараметрыРаспределения.СуммаБонусныхБалловДляПогашения = ДанныеНакоплений.Программы.Итог("СуммаСписания");

	КонецЕсли;

	Возврат ПараметрыРаспределения.СуммаБонусныхБалловДляПогашения;

КонецФункции

Функция ПолучитьТаблицуОплатаБонуснымиБалламиПустую()

	ТаблицаЗначений = Новый ТаблицаЗначений;

	ТаблицаЗначений.Колонки.Добавить("КлючСвязиБонусныхБаллов"	, Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("ПрограммаЛояльности"		, Новый ОписаниеТипов("СправочникСсылка.ПрограммыЛояльности"));
	ТаблицаЗначений.Колонки.Добавить("СуммаБонусныхБаллов"		, Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("ТипБонусов"				, Новый ОписаниеТипов("ПеречислениеСсылка.ТипыБонусов"));
	ТаблицаЗначений.Колонки.Добавить("ПриоритетТипа"			, Новый ОписаниеТипов("Число"));

	Возврат ТаблицаЗначений;

КонецФункции

Функция ТаблицаИтоговПрограммЛояльностиПустая()

	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("ПрограммаЛояльности"	, Новый ОписаниеТипов("СправочникСсылка.ПрограммыЛояльности"));
	ТаблицаЗначений.Колонки.Добавить("ТипБонусов"			, Новый ОписаниеТипов("ПеречислениеСсылка.ТипыБонусов"));
	ТаблицаЗначений.Колонки.Добавить("ПриоритетТипа"		, Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("МаксимальныйПроцентОплатыБонусами", Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));

	ТаблицаЗначений.Индексы.Добавить("ПрограммаЛояльности");

	Возврат ТаблицаЗначений;

КонецФункции

#КонецОбласти

#Область ПоддержкаОбщегоФункционалаОбработки

Функция СведенияОВнешнейОбработке()	Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Версия = ВерсияОбработки();
	ПараметрыРегистрации.Вид    = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.БезопасныйРежим = Ложь;	//	LNK 28.04.2020 07:39:04
	ПараметрыРегистрации.Вставить(Метаданные().Имя, Истина);

	Возврат ПараметрыРегистрации;

КонецФункции // СведенияОВнешнейОбработке()

//	LNK 30.05.2019 10:42:05
Функция ВерсияОбработки()

	Возврат ОбщегоНазначенияКлиентСервер.lx_GetTooken(Метаданные().Синоним, " ", 2);

КонецФункции // ВерсияОбработки()

//	LNK 02.08.2019 10:52:16
Процедура Журнал(ТекстСообщения, Уровень = "Примечание", НекаяСсылка = Неопределено)	Экспорт

	Если ОбщегоНазначенияРТповтИсп.ПолучитьПравилаПротокола().ПротоколФормРМК = Истина Тогда

		ЖурналСобытий.Регистрация("РМК." + ВерсияОбработки() + "." + Метаданные().ПолноеИмя()
			, Уровень
			, Метаданные()
			, НекаяСсылка
			,
			, ТекстСообщения
		);

	КонецЕсли;

КонецПроцедуры

//	LNK 28.09.2018 09:23:39
Процедура ИнициализироватьСпецификацию()

	Версия = ВерсияОбработки();

	ЗаписьЖурналаРегистрации("РМК.МодульОбъекта", УровеньЖурналаРегистрации.Информация
	,,, Версия + ":Тип(" + ТипЗнч(ЭтотОбъект) + ")");

//	LNK 28.09.2018 09:23:39 - для подключения внешней обработки в процессе отладки.
	Если ТипЗнч(ЭтотОбъект) = Тип("ОбработкаОбъект." + Метаданные().Имя) Тогда

		СпецификацияВнешнейОбработки = "";

	Иначе

		СпецификацияВнешнейОбработки = ЭтотОбъект.ИспользуемоеИмяФайла;

		ЗаписьЖурналаРегистрации("РМК.МодульОбъекта", УровеньЖурналаРегистрации.Информация
		,,, Версия + ":Имяфайла(" + СпецификацияВнешнейОбработки + ")");

		Попытка

			ФайлОбъект = Новый Файл(СпецификацияВнешнейОбработки);
			ИмяВнешнейОбработки = ФайлОбъект.ИмяБезРасширения;

		Исключение

			ТекстОшибки = ОписаниеОшибки();

			Если НЕ ПустаяСтрока(СпецификацияВнешнейОбработки) И НЕ ПустаяСтрока(ОбщегоНазначенияРТ.ИмяВнешнегоРМК()) Тогда

				ИмяВнешнейОбработки = ОбщегоНазначенияРТ.ИмяВнешнегоРМК();

			Иначе

				ИмяВнешнейОбработки = "";

			КонецЕсли;

			СпецификацияВнешнейОбработки = "";

		КонецПопытки;

		ЗаписьЖурналаРегистрации("РМК.МодульОбъекта", УровеньЖурналаРегистрации.Информация
		,,, Версия + ":ИмяОбработки(" + ИмяВнешнейОбработки + ")");

	КонецЕсли;

КонецПроцедуры
	
#КонецОбласти

//	Подвал
ИнициализироватьСпецификацию();










