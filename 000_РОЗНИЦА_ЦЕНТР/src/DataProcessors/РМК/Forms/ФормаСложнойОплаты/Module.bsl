////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

&НаКлиенте
Перем ЦветФонаСдачи;

&НаКлиенте
Перем ЦветФонаУслугаБанка;

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

&НаСервере
Функция ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента) Экспорт
	
	Если НЕ СтруктураПараметров.НеизвестныеДанныеПО Тогда
		
		Если СтруктураПараметров.Действие = "ПроверкаСерийныхНомеров" Тогда
			
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				
				ОперацияВыполнена = ДобавитьНайденныйСерийныйНомер(СтруктураПараметров.ЗначенияПоиска[0]);
				Если НЕ ОперацияВыполнена Тогда
					СтрокаОшибки = "Номер подарункового сертифіката вже вибрано у документі";
					СтруктураПараметровКлиента.Вставить("ТекстПредупреждения", СтрокаОшибки);
				КонецЕсли;
				
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураПараметровКлиента;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда

		Возврат;

	КонецЕсли;

	ЭтотОбъект().Журнал(ИмяФормы + ".ПриСозданииНаСервере");	//	LNK 02.08.2019 10:56:00

	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекПовтИсп.ИспользоватьПодключаемоеОборудование();

	КоличествоСимволовПослеЗапятой = 2;
	ПервыйВвод = Истина;
	
	Параметры.Свойство("Организация"        , Организация);
	Параметры.Свойство("ВидОперации"        , ВидОперации);
	Параметры.Свойство("ЧекККМПродажа"      , ЧекККМПродажа);
	Параметры.Свойство("КассаККМ"           , КассаККМ);
	Параметры.Свойство("ЦенаВключаетНДС"	, ЦенаВключаетНДС);	//	LNK 05.04.2021 09:26:39
	Параметры.Свойство("РазрешитьОкругление", РазрешитьОкругление);
	Параметры.Свойство("СуммаБонусныхБаллов", СуммаБонусныхБаллов);	//	LNK 26.02.2021 11:33:47
	Параметры.Свойство("РесурсWebRetailДоступен"	  , РесурсWebRetailДоступен);		//	LNK 24.02.2020 12:20:53
	Параметры.Свойство("ПродажаПодарочныхСертификатов", ПродажаПодарочныхСертификатов);	//	LNK 27.03.2020 06:17:29
	Параметры.Свойство("ОплатаБалламиНазначенаЗаказомПокупателя", ОплатаБалламиНазначенаЗаказомПокупателя);	//	LNK 07.12.2021 04:52:59

	Если РазрешитьОкругление = Истина И ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда

		РазрешитьОкругление = Ложь;	//	LNK 20.09.2021 14:36:04

	КонецЕсли;

	Параметры.Свойство("ЗапретитьОплатуБонусами", ЗапретитьОплатуБонусами);	//	LNK 23.06.2021 11:13:51

	ИспользоватьБонуснуюСистему = БонусныеБаллыПовтИсп.ИспользоватьБонуснуюСистему() И ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;

	Если Параметры.Свойство("СистемаНалогообложения") И НЕ РозничныеПродажиСерверПовтИсп.ЭтоУзелИнтернетМагазина() Тогда	//	LNK 31.12.2020 06:09:54

			РазрешитьОплатуПодарочнымиСертификатами = Параметры.СистемаНалогообложения.РазрешитьОплатуПодарочнымиСертификатами;

	Иначе	РазрешитьОплатуПодарочнымиСертификатами = Истина;

	КонецЕсли;

	Параметры.Свойство("ДанныеЗаказа"   , ДанныеЗаказа);
	Параметры.Свойство("СуммаПредоплаты", СуммаПредоплаты);	//+HVOYA Mykhailo
	Параметры.Свойство("СуммаПослеплаты", СуммаПослеплаты);	//	LNK 03.11.2022 06:04:54
	Параметры.Свойство("НеПечататьСлипЧекПриОплате", НеПечататьСлипЧекПриОплате);	// - HVOYA 08.06.2017 16:26:45, Латышев А.А.

	Параметры.Свойство("БлокироватьИзменениеСуммыОплаты", БлокироватьИзменениеСуммыОплаты);	//	LNK 23.11.2017 08:32:22

	Параметры.Свойство("УслугаБанка", УслугаБанка);	//	LNK 10.07.2018 11:16:47
	Параметры.Свойство("УслугаБанкаПериодПредоставления", УслугаБанкаПериодПредоставления);	//	LNK 10.07.2018 11:16:47
	Параметры.Свойство("УслугаБанкаДанные", УслугаБанкаДанные);	//	LNK 10.07.2018 11:16:47
	Параметры.Свойство("ИспользоватьБанковскиеУслуги", ИспользоватьБанковскиеУслуги);	//	LNK 10.07.2018 11:16:47
	Параметры.Свойство("ЗаказПокупателя", ЗаказПокупателя);

	Если НЕ ТипЗнч(УслугаБанкаДанные) = Тип("Структура") Тогда

		УслугаБанкаДанные = ФинансыВызовСервера.ПолучитьДанныеУслугаБанка(УслугаБанка);

	КонецЕсли;

//	LNK 19.04.2018 12:08:05 - уточняем возможность использования банковских услуг
	ИспользоватьБанковскиеУслуги = (ИспользоватьБанковскиеУслуги = Истина) И Элементы.КомандаКарта.Доступность;

	Если Параметры.Свойство("АдресТаблицыПогашениеПодарочныхСертификатов") Тогда

		ТаблицаПогашениеПодарочныхСертификатов = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыПогашениеПодарочныхСертификатов);
		ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(ТаблицаПогашениеПодарочныхСертификатов , ПогашениеПодарочныхСертификатов, Ложь);

	КонецЕсли;

	ЗаполнитьИзменяемыеРеквизиты(Параметры);

	Если ИтогПоОрганизации = 0 Тогда

		Отказ = Истина;

	Иначе

		УстановитьВозможнуюПредоплату();

		СуммаОплаты   = ИтогПоОрганизации;
		СуммаСдачи    = 0;
		ВводимоеЧисло = Формат(СуммаОплаты, "ЧЦ=15; ЧДЦ=2; ЧГ=3,0");

		Параметры.Свойство("ОплатаПлатежнойКартой", ОплатаПлатежнойКартой);

	КонецЕсли;

	МассивКассККМ = Новый Массив;
	МассивКассККМ.Добавить(КассаККМ);

	Элементы.КомандаКарта.Доступность = ПродажиСервер.ЕстьВозможностьОплатыПлатежнойКартой(МассивКассККМ);

	Если ТипЗнч(ДанныеЗаказа) = Тип("Структура") И ДанныеЗаказа.ЭтоУзелИнтернетМагазина = Истина Тогда
	
		Если ДанныеЗаказа.СтатусОплаты = ПредопределенноеЗначение("Перечисление.СтатусОплаты.НеОплачен") Тогда

			Элементы.КомандаКарта.Доступность = (НЕ ДанныеЗаказа.СуммаДоставки = 0 И ДанныеЗаказа.СуммаДоставкиОплачена = Истина);

		КонецЕсли;
	
	КонецЕсли;

	Элементы.КомандаУслугиОплатаЧастями.Доступность = Ложь;
	Элементы.КомандаУслугиМгновеннаяРассрочка.Доступность = УслугаБанка.Пустая() И НЕ РозничныеПродажиСерверПовтИсп.ЭтоУзелИнтернетМагазина();

	ДоступнаКомандаСертификат = НЕ РозничныеПродажиСерверПовтИсп.ЭтоУзелИнтернетМагазина()
								И ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа")
								И НЕ ПродажаПодарочныхСертификатов
								И РазрешитьОплатуПодарочнымиСертификатами = Истина;
	ДоступнаКомандаКредит     = Ложь;	//ПродажиСервер.ЕстьВозможностьОплатыБанковскимКредитом();
	ДоступнаКомандаНаличные   = НЕ РозничныеПродажиСерверПовтИсп.ЭтоУзелИнтернетМагазина();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЦветФонаУслугаБанка = Элементы.КомандаУслугиМгновеннаяРассрочка.ЦветФона;

	// ПодключаемоеОборудование
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда

		Если ИспользоватьПодключаемоеОборудование
		   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда

			ОписаниеОшибки = "";
			
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
			ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
			ПоддерживаемыеТипыВО.Добавить("ЭквайринговыйТерминал");

			Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(ЭтотОбъект, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда

				ТекстСообщения = "При підключенні обладнання сталася помилка
								|%ОписаниеОшибки%";
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	// Конец ПодключаемоеОборудование

	БонусныеБаллыКлиент.ПроверитьНачисленияПоКредитнойОплате(ВладелецФормы.Объект, ВладелецФормы);	//	LNK 30.07.2021 13:59:24

	Если ОплатаПлатежнойКартой Тогда

		КомандаКартаКлиент(Истина);

	КонецЕсли;

//	LNK 10.07.2018 14:26:54
	УстановитьОформлениеКнопокУслугиБанков(ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.ОплатаЧастями"), Истина);
	УстановитьОформлениеКнопокУслугиБанков(ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.МгновеннаяРассрочка"), Истина);

	УстановитьОформлениеЭлементов();
	УстановитьЗаголовокФормы();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ СанкционированноеЗакрытие Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта"));
		
		СтрокиВыбранныхОплат = ТекущиеВидыОплат.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиВыбранныхОплат.Количество() > 0 Тогда

			Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда

				ЗаголовокИнформации = "Дані про оплату надіслано до банку.";
				ТекстВопроса =  "Ви бажаєте скасувати операцію (-ії)?"; 

				ОтветПользователя = ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМК(ЗаголовокИнформации, ТекстВопроса, "Да");

				Если ВРЕГ(ОтветПользователя) = "ДА" Тогда

					Для каждого СтрокаВыбранныхОплат Из СтрокиВыбранныхОплат Цикл

						РезультатСторно = СторноОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(СтрокаВыбранныхОплат);

						Если Не РезультатСторно Тогда

							Отказ = Истина;

						КонецЕсли;

					КонецЦикла;

				Иначе

					Отказ = Истина;

				КонецЕсли;

			Иначе

				ЗаголовокИнформации = "Дані про відміну надіслано до банку.";
				ТекстВопроса =  "Ви хочете закрити вікно із втратою даних?"; 
				
				ОтветПользователя = ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМК(ЗаголовокИнформации, ТекстВопроса, "Нет");
				
				Если НЕ ВРЕГ(ОтветПользователя) = "ДА" Тогда
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		// ПодключаемоеОборудование
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(ЭтотОбъект, ПоддерживаемыеТипыВО);
		// Конец ПодключаемоеОборудование
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокФормы()

	Если НЕ ИспользоватьТерминал(УслугаБанкаДанные, УслугаБанка, ИспользоватьПодключаемоеОборудование)  Тогда

		Заголовок = "ЕТ відключено «" + УслугаБанка + "»";

	Иначе

		Заголовок = "Сплата за чеком ККМ";

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		Если Источник = "ПодключаемоеОборудование"
		   И ВводДоступен() Тогда
			Если ИмяСобытия = "ScanData" Тогда
				Если Параметр[1] = Неопределено Тогда
					ТекКод = Параметр[0];
				Иначе
					ТекКод = Параметр[1][1];
				КонецЕсли;
				СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекКод);
				ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
			ИначеЕсли ИмяСобытия ="TracksData" Тогда
				ТекКод = Параметр[0];
				ПодключаемоеОборудованиеРТКлиент.ВыбратьМагнитныйКод(ТекКод);
				Если ПустаяСтрока(ТекКод) Тогда
					Возврат;
				КонецЕсли;
				СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
				ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте	//	LNK 26.02.2021 11:35:49
Процедура УстановитьОформлениеЭлементов()

	Элементы.КомандаИспользованиеБонусов.Видимость =
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа")
		И ИспользоватьБонуснуюСистему
		И НЕ ПустаяСтрока(ВладелецФормы.Объект.НомерТелефона)
		И НЕ СуммаБонусныхБаллов = 0
		И НЕ ОплатаБалламиНазначенаЗаказомПокупателя;

	ДоступностьКоманды = Элементы.КомандаИспользованиеБонусов.Доступность;
	Элементы.КомандаИспользованиеБонусов.Доступность = НЕ ЗапретитьОплатуБонусами;

	Если Элементы.КомандаИспользованиеБонусов.Видимость И НЕ Элементы.КомандаИспользованиеБонусов.Доступность = ДоступностьКоманды Тогда

		ПоказатьОповещениеПользователя("Сплата бонусними балами",, "Сплата бонусними балами заборонена!", БиблиотекаКартинок.Предупреждение32);

	КонецЕсли;

КонецПроцедуры


&НаСервере	//	LNK 16.07.2019 11:09:02
Функция ЭтотОбъект(ТекущийОбъект = Неопределено) 

	Если ТекущийОбъект = Неопределено Тогда

		Возврат РеквизитФормыВЗначение("Объект");

	КонецЕсли;

	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");

	Возврат Неопределено;

КонецФункции

&НаСервере	//	LNK 23.06.2021 10:15:37
Процедура ЗаполнитьИзменяемыеРеквизиты(ПараметрыФормы)

	ПараметрыФормы.Свойство("ИтогПоОрганизации", ИтогПоОрганизации);

	СуммаОплаты   = ИтогПоОрганизации;
	СуммаСдачи    = 0;
	ВводимоеЧисло = Формат(СуммаОплаты, "ЧЦ=15; ЧДЦ=2; ЧГ=3,0");

КонецПроцедуры

&НаКлиенте
Процедура ВидыОплатВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОбработкаВыбораВидыОплаты(ВидыОплат.НайтиПоИдентификатору(ВыбраннаяСтрока));

	ОбновитьФорму();

	ЗапретитьОплатуБонусами = Истина;
	УстановитьОформлениеЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура ТекущиеВидыОплатПриАктивизацииСтроки(Элемент)

	Если ТекущийЭлемент = Элементы.ТекущиеВидыОплат Тогда

		ПервыйВвод = Истина;

		Для каждого СтрокаОплаты Из ТекущиеВидыОплат Цикл

			СуммаОплатыЧисло = ПривестиСтрокуКЧислу(СтрокаОплаты.ПредставлениеСуммы, Истина);
			СтрокаОплаты.Сумма = СуммаОплатыЧисло;

			Если СуммаОплатыЧисло = 0 Тогда

				СтрокаОплаты.ПредставлениеСуммы = "";

			Иначе

				СтрокаОплаты.ПредставлениеСуммы = Формат(СуммаОплатыЧисло, "ЧДЦ=2");

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	ТекущиеДанные = Элементы.ТекущиеВидыОплат.ТекущиеДанные;

	Если НЕ ТекущиеДанные = Неопределено Тогда

		Элементы.КомандаСторноПраваяКлавиатура.Доступность = НЕ ТекущиеДанные.Обязательный;
		Элементы.КомандаСторно.Доступность = НЕ ТекущиеДанные.Обязательный;

	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Команда0(Команда)
	
	ДобавитьЦифру("0")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда1(Команда)
	
	ДобавитьЦифру("1")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда2(Команда)
	
	ДобавитьЦифру("2")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда3(Команда)
	
	ДобавитьЦифру("3")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда4(Команда)
	
	ДобавитьЦифру("4")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда5(Команда)
	
	ДобавитьЦифру("5")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда6(Команда)
	
	ДобавитьЦифру("6")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда7(Команда)
	
	ДобавитьЦифру("7")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда8(Команда)
	
	ДобавитьЦифру("8")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда9(Команда)
	
	ДобавитьЦифру("9")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда0ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("0")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда1ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("1")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда2ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("2")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда3ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("3")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда4ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("4")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда5ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("5")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда6ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("6")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда7ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("7")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда8ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("8")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда9ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("9")
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТочка(Команда)
	
	ТекущаяСтрокаОплаты = Элементы.ТекущиеВидыОплат.ТекущиеДанные;
	
	Если ТекущаяСтрокаОплаты = Неопределено ИЛИ ТекущаяСтрокаОплаты.ЗапретРедактирования Тогда

		Возврат;

	КонецЕсли;
	
	Если ПервыйВвод Тогда
		ТекущаяСтрокаОплаты.ПредставлениеСуммы = "";
		ПервыйВвод = Ложь;
	КонецЕсли;
	
	Если ТекущаяСтрокаОплаты.ПредставлениеСуммы = "" Тогда
		ТекущаяСтрокаОплаты.ПредставлениеСуммы = "0";
	КонецЕсли;
	
	ЧислоВхождений = СтрЧислоВхождений(ТекущаяСтрокаОплаты.ПредставлениеСуммы, ",");
	
	Если Не ЧислоВхождений > 0 Тогда
		ТекущаяСтрокаОплаты.ПредставлениеСуммы = ТекущаяСтрокаОплаты.ПредставлениеСуммы + ",";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаСтереть(Команда)
	
	ТекущаяСтрокаОплаты = Элементы.ТекущиеВидыОплат.ТекущиеДанные;
	
	Если ТекущаяСтрокаОплаты = Неопределено ИЛИ ТекущаяСтрокаОплаты.ЗапретРедактирования Тогда

		Возврат;

	КонецЕсли;
	
	ТекущаяСтрокаОплаты.ПредставлениеСуммы = "";
	ПервыйВвод = Ложь;
	
	ТекущаяСтрокаОплаты.Сумма = 0;
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоОрганизации()

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Организация", Организация);
	
	СтрокиОплаты = Оплата.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаОплаты Из СтрокиОплаты Цикл
		
		Оплата.Удалить(СтрокаОплаты);
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоОрганизацииСервер()

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Организация", Организация);
	
	СтрокиОплаты = Оплата.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаОплаты Из СтрокиОплаты Цикл
		
		Оплата.Удалить(СтрокаОплаты);
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КомандаEnter(Команда)
	
	ПервыйВвод = Истина;
	
	ПодготовитьТаблицыКПередаче();

	Если ПолучитьСуммуСдачи(Оплата.Итог("Сумма"), Ложь) < 0 Тогда

		Возврат;

	КонецЕсли;

	Если Оплата.Итог("Сумма") = 0 Тогда
		
		ЗаголовокИнформации = "Помилка сплати за чеком"; 
		ТекстОшибки = "Чек ККМ має бути сплачений.
					|Необхідно зазначити суму сплати за чеком.";
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокИнформации, ТекстОшибки);
		
		ОчиститьПоОрганизации();
		
		Возврат;
	
	КонецЕсли;
	
	ОплатаБанковскимКредитомПлатежнойКартой = 0;

	Для каждого СтрокаОплата Из Оплата Цикл

		Если НЕ (СтрокаОплата.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные")
			 ИЛИ СтрокаОплата.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом")) Тогда

			ОплатаБанковскимКредитомПлатежнойКартой = ОплатаБанковскимКредитомПлатежнойКартой + СтрокаОплата.Сумма;

		КонецЕсли;

	КонецЦикла;

	Если ОплатаБанковскимКредитомПлатежнойКартой > ИтогПоОрганизации Тогда

		ЗаголовокИнформации = "Помилка сплати за чеком"; 
		ТекстОшибки = "Сума оплати банківською карткою та банківський кредит перевищує суму чека";
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокИнформации, ТекстОшибки);
		
		ОчиститьПоОрганизации();
		Возврат;

	КонецЕсли;

	СанкционированноеЗакрытие = Истина;
	
	СтуктураОтвета = Новый Структура;
	СтуктураОтвета.Вставить("Действие", "Закрыть чек");
	СтуктураОтвета.Вставить("АдресТаблицыОплата", АдресТаблицыОплата());
	СтуктураОтвета.Вставить("АдресТаблицыПогашениеПодарочныхСертификатов", АдресТаблицыПогашениеПодарочныхСертификатов());
	СтуктураОтвета.Вставить("УслугаБанкаПериодПредоставления", УслугаБанкаПериодПредоставления);
	СтуктураОтвета.Вставить("УслугаБанка", УслугаБанка);
	
	ВыполнитьОкругление();	//	LNK 24.09.2019 11:52:35

	Закрыть(СтуктураОтвета);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНаличные(Команда)

	СуммаКОплате = Макс(ИтогПоОрганизации - ТекущиеВидыОплат.Итог("Сумма"), 0);
	
	Если СуммаКОплате = 0 Тогда

		ТекущаяГруппыСтраницы("ГруппаСтраница");
		Возврат 

	КонецЕсли;

	Если НЕ ТекущиеВидыОплат.НайтиСтроки(Новый Структура("ВидОплаты", ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные"))).Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	СтрокаОплаты = ТекущиеВидыОплат.Добавить();
	
	СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные");
	
	СтрокаОплаты.Сумма = СуммаОкругленная(СуммаКОплате);
	
	СтрокаОплаты.ПредставлениеСуммы      = СтрокаОплаты.Сумма;
	СтрокаОплаты.ПредставлениеВидаОплаты = "Наличные";
	СтрокаОплаты.Организация             = Организация;
	
	ТекущаяГруппыСтраницы("ГруппаСтраница");
	ТекущийЭлемент = Элементы.ТекущиеВидыОплат;
	Элементы.ТекущиеВидыОплат.ТекущаяСтрока = СтрокаОплаты.ПолучитьИдентификатор();
	
	ПервыйВвод = Истина;
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКарта(Команда)
	
	КомандаКартаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКредит(Команда)
	
	СуммаКОплате = Макс(ИтогПоОрганизации - ТекущиеВидыОплат.Итог("Сумма"), 0);
	
	Если СуммаКОплате = 0 Тогда
		ТекущаяГруппыСтраницы("ГруппаСтраница");
		Возврат 
	КонецЕсли;
	
	ЗаполнитьТаблицуВидыОплаты(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.БанковскийКредит"));
	
	Если ВидыОплат.Количество() < 2 Тогда
		Возврат;
	ИначеЕсли ВидыОплат.Количество() = 2 Тогда
		
		ОбработкаВыбораВидыОплаты(ВидыОплат[0]);
		
	Иначе
		ТекущаяГруппыСтраницы("ГруппаСтраницаВидыОплат");
		ТекущийЭлемент = Элементы.ВидыОплат;
	КонецЕсли;
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСертификат(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	
	МассивСерийныхНомеров = Новый Массив;
	// +HVOYA. 11.04.2017 16:16:50, Львова Е.А.
    МассивНеуникальныхСертификатов = Новый Массив;
    // -HVOYA. 11.04.2017 16:16:58, Львова Е.А.
    Для каждого СтрокаТЧ Из ТекущиеВидыОплат Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.СерийныйНомер) Тогда
			МассивСерийныхНомеров.Добавить(СтрокаТЧ.СерийныйНомер);
        // +HVOYA. 11.04.2017 16:17:35, Львова Е.А.
        Иначе
            Для Счетчик = 1 По СтрокаТЧ.КоличествоСертификатов Цикл
                МассивНеуникальныхСертификатов.Добавить(СтрокаТЧ.ПодарочныйСертификат);
            КонецЦикла;
        // -HVOYA. 11.04.2017 16:18:04, Львова Е.А.
		КонецЕсли;
	КонецЦикла;
	ПараметрыОткрытия.Вставить("МассивСерийныхНомеров", МассивСерийныхНомеров);
	// +HVOYA. 11.04.2017 16:18:34, Львова Е.А.
    ПараметрыОткрытия.Вставить("МассивНеуникальныхСертификатов", МассивНеуникальныхСертификатов);
    // -HVOYA. 11.04.2017 16:18:39, Львова Е.А.
	МассивИспользованныхСерийныхНомеров = Новый Массив;
	
	Для каждого СтрокаТЧ Из ПогашениеПодарочныхСертификатов Цикл
		Если НЕ СтрокаТЧ.Организация = Организация
			  И ЗначениеЗаполнено(СтрокаТЧ.СерийныйНомер) Тогда
			МассивИспользованныхСерийныхНомеров.Добавить(СтрокаТЧ.СерийныйНомер);
		КонецЕсли;
	КонецЦикла;

	ЗапретитьОплатуБонусами = Истина;
	УстановитьОформлениеЭлементов();

//	LNK 01.09.2020 05:03:33 - обновим флаг доступа принудительно..
	РесурсWebRetailДоступен = РозничныеПродажиСлужебный.РесурсWebRetailДоступен();
	
	ПараметрыОткрытия.Вставить("МассивИспользованныхСерийныхНомеров", МассивИспользованныхСерийныхНомеров);
	ПараметрыОткрытия.Вставить("РесурсWebRetailДоступен", РесурсWebRetailДоступен);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаСертификатЗавершение", ЭтотОбъект);

	ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВводаСерийныхНомеровПогашение", Объект.ИмяВнешнейОбработки)
	, ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте	//	LNK 20.09.2017 15:10:11
Процедура КомандаСертификатЗавершение(Результат, ДополнительныеПараметры)	Экспорт

//	LNK 01.09.2020 05:03:33 - обновим флаг доступа принудительно..
	РесурсWebRetailДоступен = РозничныеПродажиСлужебный.РесурсWebRetailДоступен();

	Если НЕ Результат = Неопределено Тогда

		ДобавитьНайденныеСерийныеНомера(Результат);

	КонецЕсли;

	ОбновитьФорму();

КонецПроцедуры


&НаКлиенте
Процедура КомандаСторно(Команда)
	
	ТекущаяСтрокаОплаты = Элементы.ТекущиеВидыОплат.ТекущиеДанные;
	
	Если ТекущаяСтрокаОплаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТекущаяСтрокаОплаты.ЗапретРедактирования) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОплаты = ТекущаяСтрокаОплаты.ТипОплаты;
	
	Если ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта") Тогда
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			
			ОтветПользователя = ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМК("Інформацію про сплату надіслано до банку."
																			, "Ви бажаєте скасувати операцію?");
			
			Если НЕ ВРЕГ(ОтветПользователя) = "ДА" Тогда
				Возврат;
			КонецЕсли;
			
			// сторнирование 
			РезультатСторно = СторноОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(ТекущаяСтрокаОплаты);
			Если Не РезультатСторно Тогда
				Возврат;
			КонецЕсли;
		Иначе
			
			ОтветПользователя = ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМК("Інформацію про скасування відправлено до банку."
																			, "Ви бажаєте видалити рядок із втратою даних?");
			
			Если НЕ ВРЕГ(ОтветПользователя) = "ДА" Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ПодарочныйСертификат", ТекущаяСтрокаОплаты.ПодарочныйСертификат);
	СтруктураПоиска.Вставить("СерийныйНомер"       , ТекущаяСтрокаОплаты.СерийныйНомер);
	СтруктураПоиска.Вставить("Организация"         , Организация);
	
	СтрокиПогашениеПодарочныхСертификатов = ПогашениеПодарочныхСертификатов.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаПогашениеПодарочныхСертификатов Из СтрокиПогашениеПодарочныхСертификатов Цикл
		
		ПогашениеПодарочныхСертификатов.Удалить(СтрокаПогашениеПодарочныхСертификатов);
		
	КонецЦикла;
	
	ТекущиеВидыОплат.Удалить(ТекущаяСтрокаОплаты);
	
	ОбновитьФорму();

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере	//	LNK 18.04.2018 13:33:02
Процедура ТекущаяГруппыСтраницы(ИмяСтраницы)

	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[ИмяСтраницы];
	ГруппаКнопкиУслугиВидимость(ИмяСтраницы);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьТекущийЭлементвВидОплаты()
	
	ТекущийЭлемент = Элементы.ВидыОплат;
	
	Если НЕ УслугаБанка.Пустая() И НЕ УслугаБанка = ПредопределенноеЗначение("Справочник.УслугиБанка.МгновеннаяРассрочка") Тогда

		СтрокиЭквайрера = ВидыОплат.НайтиСтроки(Новый Структура("Эквайрер", УслугаБанкаДанные.Эквайрер));

		Если НЕ СтрокиЭквайрера.Количество() = 0 Тогда

			Элементы.ВидыОплат.ТекущаяСтрока = СтрокиЭквайрера[0].ПолучитьИдентификатор();

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаКартаКлиент(ПриОткрытии = Ложь)
	
	СуммаКОплате = Макс(ИтогПоОрганизации - ТекущиеВидыОплат.Итог("Сумма"), 0);
	
	Если СуммаКОплате = 0 Тогда

		ТекущаяГруппыСтраницы("ГруппаСтраница");
		Возврат 

	КонецЕсли;
	
	ЗаполнитьТаблицуВидыОплаты(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта"), КонтекстВозвратаПоУслугеБанка());
	
	Если ВидыОплат.Количество() < ?(КонтекстВозвратаПоУслугеБанка(), 1, 2) Тогда

		Возврат;

	ИначеЕсли ВидыОплат.Количество() = 2 И НЕ КонтекстВозвратаПоУслугеБанка() И УслугаБанка.Пустая() Тогда
		
		ОбработкаВыбораПлатежнойКарты(ВидыОплат[0]);
		
		ПервыйВвод = Истина;

	Иначе

		ТекущаяГруппыСтраницы("ГруппаСтраницаВидыОплат");
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьТекущийЭлементвВидОплаты", 0.1, Истина);

	КонецЕсли;
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЦифру(ВведеннаяЦифраСтрокой)
	
	ТекущаяСтрокаОплаты = Элементы.ТекущиеВидыОплат.ТекущиеДанные;
	
	Если ТекущаяСтрокаОплаты = Неопределено ИЛИ ТекущаяСтрокаОплаты.ЗапретРедактирования Тогда

		Возврат;

	КонецЕсли;
	
	Если ПервыйВвод Тогда

		ТекущаяСтрокаОплаты.ПредставлениеСуммы = "";
		ПервыйВвод = Ложь;

	КонецЕсли;
	
	ТочностьСуммы = ?(ТекущаяСтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные") И ОкруглениеДопустимо()
		, 1
		, КоличествоСимволовПослеЗапятой);

	Запятая = Сред(ТекущаяСтрокаОплаты.ПредставлениеСуммы, СтрДлина(ТекущаяСтрокаОплаты.ПредставлениеСуммы) - ТочностьСуммы, 1);

	Если НЕ Запятая = "," тогда

		ТекущаяСтрокаОплаты.ПредставлениеСуммы = ТекущаяСтрокаОплаты.ПредставлениеСуммы + ВведеннаяЦифраСтрокой;

	КонецЕсли;

	СуммаОплаты = ПривестиСтрокуКЧислу(ТекущаяСтрокаОплаты.ПредставлениеСуммы, Истина);

	ТекущаяСтрокаОплаты.Сумма = СуммаОплаты;

	ЗапретитьОплатуБонусами = Истина;
	ОбновитьФорму();
	УстановитьОформлениеЭлементов();

КонецПроцедуры

//функция выполняет приведение строки к числу
// Параметры:
//  ЧислоСтрокой           - Строка - Строка приводимая к числу
//  ВозвращатьНеопределено - Булево - Если Истина и строка содержит некорректное значение, то возвращать Неопределено
//
// Возвращаемое значение:
//  Число
//
&НаКлиенте
Функция ПривестиСтрокуКЧислу(ЧислоСтрокой, ВозвращатьНеопределено = Ложь) Экспорт
	
	ОписаниеТипаЧисла = Новый ОписаниеТипов("Число");
	ЗначениеЧисла = ОписаниеТипаЧисла.ПривестиЗначение(ЧислоСтрокой);
	
	Если ВозвращатьНеопределено И (ЗначениеЧисла = 0) Тогда
		
		Стр = Строка(ЧислоСтрокой);
		Если Стр = "" Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Стр = СтрЗаменить(СокрЛП(Стр), "0", "");
		Если (Стр <> "") И (Стр <> ".") И (Стр <> ",") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеЧисла;
	
КонецФункции

&НаСервере
Функция АдресТаблицыОплата()
	
	АдресТаблицы = ПоместитьВоВременноеХранилище(ТекущиеВидыОплат.Выгрузить(), Новый УникальныйИдентификатор);
	
	Возврат АдресТаблицы;
	
КонецФункции

&НаСервере
Функция АдресТаблицыПогашениеПодарочныхСертификатов()
	
	ТаблицаПогашения = ПогашениеПодарочныхСертификатов.Выгрузить();
	
	КолвоЭлементовКоллекции = ТаблицаПогашения.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ЭлементКоллекции = ТаблицаПогашения[КолвоЭлементовКоллекции - ОбратныйИндекс];

		Если НЕ ЭлементКоллекции.Организация = Организация Тогда
			ТаблицаПогашения.Удалить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаПогашения, Новый УникальныйИдентификатор);
	
	Возврат АдресТаблицы;
	
КонецФункции // АдресТаблицыПогашениеПодарочныхСертификатов()

&НаСервере
Процедура ПодготовитьТаблицыКПередаче()

	ПервыйВвод = Истина;
	
	ТаблицаТекущиеВидыОплат = ТекущиеВидыОплат.Выгрузить().Скопировать();
	КолвоЭлементовКоллекции = ТаблицаТекущиеВидыОплат.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ЭлементКоллекции = ТаблицаТекущиеВидыОплат[КолвоЭлементовКоллекции - ОбратныйИндекс];

		Если ЭлементКоллекции.Сумма = 0 Тогда
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ПодарочныйСертификат", ЭлементКоллекции.ПодарочныйСертификат);
			СтруктураПоиска.Вставить("СерийныйНомер"       , ЭлементКоллекции.СерийныйНомер);
			СтруктураПоиска.Вставить("Организация"         , Организация);
			
			СтрокиПогашениеПодарочныхСертификатов = ПогашениеПодарочныхСертификатов.НайтиСтроки(СтруктураПоиска);
			
			Для каждого СтрокаПогашениеПодарочныхСертификатов Из СтрокиПогашениеПодарочныхСертификатов Цикл
				
				ПогашениеПодарочныхСертификатов.Удалить(СтрокаПогашениеПодарочныхСертификатов);
				
			КонецЦикла;
			
			ТаблицаТекущиеВидыОплат.Удалить(ЭлементКоллекции);
		Иначе
			ЭлементКоллекции.СуммаТорговойУступки = ЭлементКоллекции.Сумма * ЭлементКоллекции.ПроцентТорговойУступки / 100;
		КонецЕсли;
	КонецЦикла;
	
	ОчиститьПоОрганизацииСервер();
	
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(ТаблицаТекущиеВидыОплат, Оплата, Истина);
	
	ТаблицаОплаты = Оплата.Выгрузить().Скопировать();
	ТаблицаОплаты.Свернуть("ВидОплаты, ПроцентТорговойУступки, Организация, ЭквайринговыйТерминал, СсылочныйНомер, НомерЧекаЭТ", "Сумма,СуммаТорговойУступки");
	Оплата.Загрузить(ТаблицаОплаты);
	
	КолвоЭлементовКоллекции = Оплата.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ЭлементКоллекции = Оплата[КолвоЭлементовКоллекции - ОбратныйИндекс];

		Если ЭлементКоллекции.Сумма = 0 Тогда
			Оплата.Удалить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура заполняет таблицу "ВидыОплаты" значениями для выбора
//
&НаСервере
Процедура ЗаполнитьТаблицуВидыОплаты(ТипОплаты, ВозвратПоУслугеБанка = Ложь)

	Перем ТекущийЭквайрер, ТекущийВидОплаты;
	
	Запрос = Новый Запрос;
	
	Если ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта И ИспользоватьПодключаемоеОборудование Тогда

		Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаСправочник.Ссылка КАК ЭквайринговыйТерминал,
			|	ТаблицаСправочник.Владелец КАК ДоговорЭквайринга,
			|	ТаблицаСправочник.Владелец.Эквайрер КАК Эквайрер
			|ПОМЕСТИТЬ ТаблицаЭТ
			|ИЗ
			|	Справочник.ЭквайринговыеТерминалы КАК ТаблицаСправочник
			|ГДЕ
			|	ТаблицаСправочник.Касса = &КассаККМ
			|	И ТаблицаСправочник.Организация = &Организация
			|	И НЕ ТаблицаСправочник.ПометкаУдаления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаДоговорыЭТ.ВидОплаты КАК ВидОплаты,
			|	ТаблицаДоговорыЭТ.ПроцентТорговойУступки КАК ПроцентТорговойУступки,
			|	ТаблицаЭлементыЭТ.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
			|	ТаблицаЭлементыЭТ.ДоговорЭквайринга КАК ДоговорЭквайринга,
			|	ТаблицаЭлементыЭТ.Эквайрер КАК Эквайрер
			|ИЗ
			|	Справочник.ДоговорыЭквайринга.ТарифыЗаРасчетноеОбслуживание КАК ТаблицаДоговорыЭТ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЭТ КАК ТаблицаЭлементыЭТ
			|		ПО ТаблицаДоговорыЭТ.Ссылка = ТаблицаЭлементыЭТ.ДоговорЭквайринга
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТаблицаЭлементыЭТ.ЭквайринговыйТерминал.Код"
			);
			Запрос.УстановитьПараметр("КассаККМ"   , КассаККМ);
			Запрос.УстановитьПараметр("Организация", Организация);

			ТаблицаВидовОплат = Запрос.Выполнить().Выгрузить();

		Иначе // Возврат

			Запрос = Новый Запрос(	//	LNK 17.04.2018 14:32:26
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаОплаты.ВидОплаты КАК ВидОплаты,
			|	ТаблицаОплаты.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
			|	ВЫБОР
			|		КОГДА ТаблицаОплаты.Сумма > &СуммаОплаты
			|			ТОГДА &СуммаОплаты
			|		ИНАЧЕ ТаблицаОплаты.Сумма
			|	КОНЕЦ КАК Сумма,
			|	ТаблицаОплаты.ПроцентТорговойУступки КАК ПроцентТорговойУступки,
			|	ТаблицаОплаты.СуммаТорговойУступки КАК СуммаТорговойУступки,
			|	ТаблицаОплаты.СсылочныйНомер КАК СсылочныйНомер,
			|	ТаблицаОплаты.НомерЧекаЭТ КАК НомерЧекаЭТ,
			|	ТаблицаОплаты.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
			|	ТаблицаОплаты.ЭквайринговыйТерминал.Владелец.Эквайрер КАК Эквайрер
			|ПОМЕСТИТЬ Оплаты
			|ИЗ
			|	Документ.ЧекККМ.Оплата КАК ТаблицаОплаты
			|ГДЕ
			|	ТаблицаОплаты.Ссылка = &Ссылка
			|	И ТаблицаОплаты.ВидОплаты.ТипОплаты = &ТипОплаты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТерминалыЭтойКассы.Ссылка КАК ЭквайринговыйТерминал,
			|	ТерминалыЭтойКассы.Владелец.Эквайрер КАК Эквайрер
			|ПОМЕСТИТЬ Терминалы
			|ИЗ
			|	Оплаты КАК Оплаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы КАК ТерминалыЭтойКассы
			|		ПО Оплаты.Эквайрер = ТерминалыЭтойКассы.Владелец.Эквайрер
			|ГДЕ
			|	ТерминалыЭтойКассы.Касса = &КассаККМ
			|	И ТерминалыЭтойКассы.Организация = &Организация
			|	И НЕ ТерминалыЭтойКассы.ПометкаУдаления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Оплаты.ВидОплаты КАК ВидОплаты,
			|	ЕСТЬNULL(Терминалы.ЭквайринговыйТерминал, ЗНАЧЕНИЕ(Справочник.ЭквайринговыеТерминалы.ПустаяСсылка)) КАК ЭквайринговыйТерминал,
			|	Оплаты.Сумма КАК Сумма,
			|	Оплаты.ПроцентТорговойУступки КАК ПроцентТорговойУступки,
			|	Оплаты.СуммаТорговойУступки КАК СуммаТорговойУступки,
			|	Оплаты.СсылочныйНомер КАК СсылочныйНомер,
			|	Оплаты.НомерЧекаЭТ КАК НомерЧекаЭТ,
			|	Оплаты.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
			|	Оплаты.Эквайрер КАК Эквайрер
			|ИЗ
			|	Оплаты КАК Оплаты
			|		ЛЕВОЕ СОЕДИНЕНИЕ Терминалы КАК Терминалы
			|		ПО Оплаты.Эквайрер = Терминалы.Эквайрер"
			);
			Запрос.УстановитьПараметр("Ссылка"     , ЧекККМПродажа);
			Запрос.УстановитьПараметр("ТипОплаты"  , ТипОплаты);
			Запрос.УстановитьПараметр("КассаККМ"   , КассаККМ);
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("СуммаОплаты", СуммаОплаты);

			ТаблицаВидовОплат = Запрос.Выполнить().Выгрузить();
			СтрокаСтруктурыПоиска = "ВидОплаты, Сумма, ЭквайринговыйТерминал, СсылочныйНомер, НомерЧекаЭТ, НомерПлатежнойКарты";

		КонецЕсли;

	Иначе
		
		Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда

			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВидыОплатЧекаККМ.Ссылка КАК ВидОплаты,
			|	ВидыОплатЧекаККМ.ПроцентБанковскойКомиссии КАК ПроцентТорговойУступки
			|ИЗ
			|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
			|ГДЕ
			|	ВидыОплатЧекаККМ.ЭтоГруппа = ЛОЖЬ
			|	И ВидыОплатЧекаККМ.ПометкаУдаления = ЛОЖЬ
			|	И ВидыОплатЧекаККМ.ТипОплаты = &ТипОплаты"
			;
			Запрос.УстановитьПараметр("ТипОплаты", ТипОплаты);
			ТаблицаВидовОплат = Запрос.Выполнить().Выгрузить();

		Иначе

			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЧекККМОплата.ВидОплаты,
			|	ЧекККМОплата.Сумма,
			|	ЧекККМОплата.ПроцентТорговойУступки,
			|	ЧекККМОплата.СуммаТорговойУступки
			|ИЗ
			|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
			|ГДЕ
			|	ЧекККМОплата.Ссылка = &Ссылка
			|	И ЧекККМОплата.ВидОплаты.ТипОплаты = &ТипОплаты"
			);
			Запрос.УстановитьПараметр("Ссылка"   , ЧекККМПродажа);
			Запрос.УстановитьПараметр("ТипОплаты", ТипОплаты);

			ТаблицаВидовОплат = Запрос.Выполнить().Выгрузить();
			СтрокаСтруктурыПоиска = "ВидОплаты, Сумма";

		КонецЕсли;

	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда

		Для каждого СтрокаВыбранныхОплат Из ТекущиеВидыОплат Цикл

			Если ТипОплаты = СтрокаВыбранныхОплат.ВидОплаты.ТипОплаты Тогда

				СтруктураПоиска = Новый Структура(СтрокаСтруктурыПоиска);
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаВыбранныхОплат);
				
				СтрокиТаблицы = ТаблицаВидовОплат.НайтиСтроки(СтруктураПоиска);

				Если СтрокиТаблицы.Количество() > 0  Тогда

					ТаблицаВидовОплат.Удалить(СтрокиТаблицы[0]);

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	ВидыОплат.Очистить();

	Для Каждого ТекСтрокаТаблицаВидовОплат Из ТаблицаВидовОплат Цикл

		СтрокиТаблицы = ВидыОплат.Добавить();

		ЗаполнитьЗначенияСвойств(СтрокиТаблицы, ТекСтрокаТаблицаВидовОплат);
		СтрокиТаблицы.ТипОплаты = ТипОплаты;

	КонецЦикла;
	
	Если НЕ ВозвратПоУслугеБанка = Истина Тогда

		СтрокаВыхода = ВидыОплат.Добавить();
		СтрокаВыхода.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ПустаяСсылка");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму(ВыполнитьЗакрытие = Ложь)
	
	ОбщаяСуммаОплаты = ТекущиеВидыОплат.Итог("Сумма");
	
	Если ОбщаяСуммаОплаты >= СуммаОкругленная(ИтогПоОрганизации) Тогда

		СуммаСдачи = ПолучитьСуммуСдачи(ОбщаяСуммаОплаты);

		Элементы.КомандаEnterПраваяКлавиатура.Доступность = ДоступностьEnter(ОбщаяСуммаОплаты, Истина);
		Элементы.КомандаEnter.Доступность = ДоступностьEnter(ОбщаяСуммаОплаты, Истина);
		ЦветТекстаСдачи = Новый Цвет();
		ЦветФонаСдачи   = Новый Цвет(226, 240, 226);
		ЗаголовокСдачи  = "Решта (грн)";

		ПодключитьОбработчикОжидания("Подключаемый_УстановитьТекущийЭлементEnter", 0.1, Истина);

	Иначе

		СуммаСдачи = ПолучитьСуммуСдачи(ОбщаяСуммаОплаты);
	//	СуммаСдачи = ИтогПоОрганизации - ОбщаяСуммаОплаты;
		Элементы.КомандаEnterПраваяКлавиатура.Доступность = ДоступностьEnter(ОбщаяСуммаОплаты, Ложь);
		Элементы.КомандаEnter.Доступность = ДоступностьEnter(ОбщаяСуммаОплаты, Ложь);
		ЦветТекстаСдачи = WebЦвета.Красный;
		ЦветФонаСдачи = Новый Цвет();
		ЗаголовокСдачи  = "Залишок (грн)";

	КонецЕсли;
	
	Элементы.СуммаСдачи.ЦветФона   = ЦветФонаСдачи;
	Элементы.СуммаСдачи.ЦветТекста = ЦветТекстаСдачи;
	Элементы.СуммаСдачи.Заголовок  = ЗаголовокСдачи;

	Если ВыполнитьЗакрытие Тогда

		КомандаEnter("");	// - HVOYA 07.10.2016 13:17:30, Латышев А.А. 

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 30.09.2019 11:05:31
Функция ДоступностьEnter(ОбщаяСуммаОплаты, КомандаДоступна)

	Если РазрешитьОкругление И НЕ ОкруглениеДопустимо()  Тогда

	//	Работаем здесь только в случае присутствия "запрещённых" видов оплат!

		СуммаНаличными = 0;

		Для каждого СтрокаОплаты Из ТекущиеВидыОплат Цикл

			Если СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные") Тогда

				СуммаНаличными = СуммаНаличными + СтрокаОплаты.Сумма;

			КонецЕсли;

		КонецЦикла;

	//	1. Проверка по общей сумме.
		СуммаПриведенная = (СуммаНаличными - Цел(СуммаНаличными)) * 10;

		Если (СуммаПриведенная - Цел(СуммаПриведенная)) > 0	Тогда

			КомандаДоступна = Ложь;

		КонецЕсли;

		Если КомандаДоступна Тогда

		//	2. Проверка по сумме сдачи.
			СуммаПриведенная = (СуммаСдачи - Цел(СуммаСдачи)) * 10;

			Если (СуммаПриведенная - Цел(СуммаПриведенная)) > 0	Тогда

				КомандаДоступна = Ложь;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат КомандаДоступна;

КонецФункции

&НаКлиенте
Функция СуммаОплатПлатежнойКартой();
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта"));
	
	СтрокиВидовОплат = ТекущиеВидыОплат.НайтиСтроки(СтруктураПоиска);
	
	СуммаОплатыПлатежнойКартой = 0;
	
	Для каждого СтрокаВидовОплат Из СтрокиВидовОплат Цикл
	
		СуммаОплатыПлатежнойКартой = СуммаОплатыПлатежнойКартой + СтрокаВидовОплат.Сумма;
	
	КонецЦикла;
	
	Возврат СуммаОплатыПлатежнойКартой
	
КонецФункции // СуммаОплатПлатежнойКартой()

&НаКлиенте
Процедура ОплатаПлатежнойКартойЧерезЭквайринговыйТерминал(ВыбраннаяСтрока)
	
	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	ОписаниеОшибки            = "";
	
	СуммаОперации       = 0;
	НомерКарты          = "";
	НомерСсылкиОперации = "";
	НомерЧекаЭТ         = "";
	СтрокаСлипЧека      = "";
	ВидКарты            = "";
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента()Тогда // Проверка на определенность рабочего места ВО
		
		СтруктрураЭквайринговыйТерминал = ПодключаемоеОборудованиеРТКлиент.ДанныеЭквайринговогоТерминала(ВыбраннаяСтрока.ЭквайринговыйТерминал);
		ИдентификаторУстройстваЭТ = СтруктрураЭквайринговыйТерминал.ПодключаемоеОборудование;
			
		Если НЕ ИдентификаторУстройстваЭТ = Неопределено Тогда
			
			ПараметрыКассыККМ = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
			ИдентификаторУстройстваФР              = ПараметрыКассыККМ.ИдентификаторУстройства;
			ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
			
			Если ЗначениеЗаполнено(ИдентификаторУстройстваФР) ИЛИ ИспользоватьБезПодключенияОборудования Тогда
				
				// Подключение устройства ЭТ
				Если НЕ СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования
					И ИспользоватьПодключаемоеОборудование
					И НЕ КонтекстВозвратаПоУслугеБанка() Тогда	//	LNK 12.04.2018 11:40:23 - услуга банка

					Если НЕ СтруктрураЭквайринговыйТерминал.РежимВиртуальный = Истина Тогда

						РезультатЭТ = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(ЭтотОбъект,
																										ИдентификаторУстройстваЭТ,
																										ОписаниеОшибки);
					Иначе

						РезультатЭТ = Истина;

					КонецЕсли;
					
				Иначе
					
					РезультатЭТ = Истина;
					
				КонецЕсли;
					
				Если РезультатЭТ Тогда
					
				//	Подключение устройства ФР
					РезультатФР = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(ЭтотОбъект,
																									ИдентификаторУстройстваФР,
																									ОписаниеОшибки);
				//
					Если РезультатФР ИЛИ ИспользоватьБезПодключенияОборудования Тогда

						ОставшаясяСуммаОплаты = ИтогПоОрганизации - ТекущиеВидыОплат.Итог("Сумма");
						ПределСуммы           = ИтогПоОрганизации - СуммаОплатПлатежнойКартой();
						// Предварительно авторизуем операцию

						ПараметрыОткрытия = Новый Структура;
						ПараметрыОткрытия.Вставить("Заголовок"           , "Сума платежу");
						ПараметрыОткрытия.Вставить("МаксимальноеЗначение", ПределСуммы);
						ПараметрыОткрытия.Вставить("ЧислоВвода"          , ОставшаясяСуммаОплаты);
						ПараметрыОткрытия.Вставить("Отрицательное"       , Ложь);
						ПараметрыОткрытия.Вставить("АвторизацияЭТ"       , Истина);
						ПараметрыОткрытия.Вставить("БлокироватьИзменениеСуммыОплаты", БлокироватьИзменениеСуммыОплаты);

						ДополнительныеПараметры = Новый Структура(
							"СтруктрураЭквайринговыйТерминал, ИдентификаторУстройстваЭТ, ИдентификаторУстройстваФР, ВыбраннаяСтрока, ИспользоватьБезПодключенияОборудования, РезультатФР"
							, СтруктрураЭквайринговыйТерминал, ИдентификаторУстройстваЭТ, ИдентификаторУстройстваФР, ВыбраннаяСтрока, ИспользоватьБезПодключенияОборудования, РезультатФР);

						ОписаниеОповещения = Новый ОписаниеОповещения("ОплатаПлатежнойКартойЧерезЭквайринговыйТерминалАвторизация", ЭтотОбъект, ДополнительныеПараметры);
						ОткрытьФорму("Обработка.РМК.Форма.ФормаВводаЧисла", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

					Иначе

						ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
							"При підключенні фіскального реєстратора сталася помилка:"
							, СтрЗаменить(
								"%ОписаниеОшибки%
								|Операцію по карті не було виконано."
								, "%ОписаниеОшибки%"
								, ОписаниеОшибки
							)
						);
						Возврат;

					КонецЕсли;

				Иначе

					ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
						"При підключенні еквайрингового терміналу сталася помилка:"
						, СтрЗаменить(
							"%ОписаниеОшибки%
							|Операцію по карті не було виконано."
							, "%ОписаниеОшибки%"
							, ОписаниеОшибки
						)
					);

					Возврат;

				КонецЕсли;

			Иначе

				ЗаголовокИнформации = "Не обрано фіскального реєстратора.";
				
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокИнформации);

				Возврат;

			КонецЕсли;

		Иначе

			// Не выбран эквайринговый терминал

		КонецЕсли;

	Иначе

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Попередньо потрібно вибрати робоче місце зовнішнього обладнання поточного сеансу.");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОплатаПлатежнойКартойЧерезЭквайринговыйТерминалАвторизация(Результат, ДополнительныеПараметры)	Экспорт

	СтруктрураЭквайринговыйТерминал = ДополнительныеПараметры.СтруктрураЭквайринговыйТерминал;
	ИдентификаторУстройстваЭТ       = ДополнительныеПараметры.ИдентификаторУстройстваЭТ;
	ИдентификаторУстройстваФР       = ДополнительныеПараметры.ИдентификаторУстройстваФР;
	ВыбраннаяСтрока                 = ДополнительныеПараметры.ВыбраннаяСтрока;
	РезультатФР                     = ДополнительныеПараметры.РезультатФР;
	ИспользоватьБезПодключенияОборудования = ДополнительныеПараметры.ИспользоватьБезПодключенияОборудования;

	Если НЕ Результат = Неопределено Тогда
		ЗначениеВыбораЧисло = Результат.ВведенноеЧисло;
		Если ЗначениеЗаполнено(ЗначениеВыбораЧисло) Тогда
			СуммаОперации = ЗначениеВыбораЧисло;
		Иначе
			СуммаОперации = 0;
		КонецЕсли;
		ДанныеКарты   = Результат.ДанныеКарты;
	Иначе
		ОбновитьФорму(Истина);
		Возврат;
	КонецЕсли;
	
	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;
	СтрокаСлипЧека    = "";	//	инициализация
	
	ВходныеПараметры.Добавить(СуммаОперации);
	ВходныеПараметры.Добавить(ДанныеКарты);
	
	Если НЕ СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования
		И ИспользоватьПодключаемоеОборудование
		И НЕ КонтекстВозвратаПоУслугеБанка() Тогда	//	LNK 12.04.2018 11:40:23 - услуга банка
		
		ПозицияРазделителя = Найти(ДанныеКарты, "=");

		Если ПозицияРазделителя > 16 Тогда

			НомерКарты = "";

			Для Счетчик = 1 По ПозицияРазделителя - 6 Цикл

				НомерКарты = НомерКарты + "*";

			КонецЦикла;

			НомерКарты = НомерКарты
					   + Сред(ДанныеКарты, ПозицияРазделителя - 5, 4);

		КонецЕсли;

		Если НЕ СтруктрураЭквайринговыйТерминал.РежимВиртуальный = Истина Тогда

		//	Выполнение операции на ЭТ
			РезультатЭТ = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваЭТ,
																	  "AuthorizeSales",
																	  ВходныеПараметры,
																	  ВыходныеПараметры);
		Иначе

			РезультатЭТ = Истина;

		КонецЕсли;
		
		Если РезультатЭТ Тогда
			
			Если НЕ СтруктрураЭквайринговыйТерминал.РежимВиртуальный = Истина Тогда

				СтрокаСлипЧека = ВыходныеПараметры[3][1];

				Если НЕ ПустаяСтрока(СтрокаСлипЧека) Тогда

					глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", СтрокаСлипЧека);

				КонецЕсли;

				НомерКарты          = ?(Не ПустаяСтрока(НомерКарты)
									И ПустаяСтрока(СтрЗаменить(СокрЛП(ВыходныеПараметры[0]), "*", "")),
									НомерКарты, ВыходныеПараметры[0]);
				НомерСсылкиОперации = ВыходныеПараметры[1];
				НомерЧекаЭТ         = ВыходныеПараметры[2];

			Иначе

				НомерКарты          = "09283049283042893";
				НомерСсылкиОперации = 100001001;
				НомерЧекаЭТ         = 9000123;

			КонецЕсли;
			
		Иначе
			
			ТекстОписаниеОшибки = ВыходныеПараметры[1];
			
			ЗаголовокИнформации = "Під час виконання операції виникла помилка:"; 
			ТекстСообщения = "%ОписаниеОшибки%
							|Оплата по карте не была произведена.";
			ТекстСообщения = СтрЗаменить(ТекстСообщения,
										 "%ОписаниеОшибки%",
										 ТекстОписаниеОшибки);
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокИнформации, ТекстСообщения);
			
			ОбновитьФорму(Истина);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		ТекстИнформации = "Потрібно виконати операцію оплати на еквайринговому терміналі." + Символы.ПС;
		ТекстИнформации = ТекстИнформации + "Сума операції: " + СуммаОперации + Символы.ПС;
		ТекстИнформации = ТекстИнформации;
		ЗаголовокИнформации = "Операція оплати на еквайринговому терміналі пройшла успішно?";
		
		ОтветПользователя = ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМК(ЗаголовокИнформации, ТекстИнформации);

		Если НЕ ВРЕГ(ОтветПользователя) = "ДА" Тогда

			ОбновитьФорму(Истина);
			Возврат;

		КонецЕсли;

		СтрокаСлипЧека = "Здійснено оплату на суму %1% %2%";
		СтрокаСлипЧека = СтрЗаменить(СтрокаСлипЧека, "%1%", Формат(СуммаОперации, "ЧДЦ=2; ЧГ="));
		СтрокаСлипЧека = СтрЗаменить(СтрокаСлипЧека, "%2%", "грн.");

		НомерКарты = НомерКарты;

		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Заголовок"           , "Введіть код транзакції (RRN)");
		ПараметрыОткрытия.Вставить("МаксимальноеЗначение", "");
		ПараметрыОткрытия.Вставить("ЧислоВвода"          , "");
		ПараметрыОткрытия.Вставить("Отрицательное"       , Ложь);
		ПараметрыОткрытия.Вставить("АвторизацияЭТ"       , Ложь);

		ЗначениеВозврата = ОткрытьФормуМодально("Обработка.РМК.Форма.ФормаВводаЧисла", ПараметрыОткрытия, УникальныйИдентификатор);

		Если ТипЗнч(ЗначениеВозврата) = Тип("Структура") Тогда

			НомерСсылкиОперации = ЗначениеВозврата.ВведенноеЧисло;

		КонецЕсли;

		НомерЧекаЭТ = "";

		Если НЕ УслугаБанка.Пустая() И УслугаБанкаПериодПредоставления > 0	//	LNK 12.04.2018 11:45:51
			И ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа")
			И УслугаБанкаДанные.ТипИнтернетБанкинга = ПредопределенноеЗначение("Перечисление.ТипыИнтернетБанкинга.ПустаяСсылка")
		Тогда

			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("Заголовок"           , НСтр("ru = 'ГЛИБИНА КРЕДИТУ «" + УслугаБанка + "» у платежах'"));
			ПараметрыОткрытия.Вставить("КоличествоСимволовПослеЗапятой", 0);
			ПараметрыОткрытия.Вставить("МаксимальноеЗначение", УслугаБанкаПериодПредоставления);
			ПараметрыОткрытия.Вставить("ЧислоВвода"          , УслугаБанкаПериодПредоставления);
			ПараметрыОткрытия.Вставить("Отрицательное"       , Ложь);
			ПараметрыОткрытия.Вставить("АвторизацияЭТ"       , Ложь);

			ЗначениеВозврата = ОткрытьФормуМодально("Обработка.РМК.Форма.ФормаВводаЧисла", ПараметрыОткрытия, УникальныйИдентификатор);

			Если ТипЗнч(ЗначениеВозврата) = Тип("Структура") И ЗначениеЗаполнено(ЗначениеВозврата.ВведенноеЧисло) Тогда

				УслугаБанкаПериодПредоставления = ЗначениеВозврата.ВведенноеЧисло;

			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаСлипЧека) И НЕ ИспользоватьБезПодключенияОборудования И НЕ НеПечататьСлипЧекПриОплате Тогда  //HVOYA 09.06.2017 14:02:39, Латышев, добавлен параметр НеПечататьСлипЧекПриОплате
		
		ВходныеПараметры  = Новый Массив();
		ВходныеПараметры.Добавить(СтрокаСлипЧека);
		ВыходныеПараметры = Неопределено;
		
		РезультатФР = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР,
																 "PrintText",
																  ВходныеПараметры,
																  ВыходныеПараметры);
	КонецЕсли;
		
	// Сохранить в таблице данные оплаты картой
	
	Если НЕ РезультатФР И НЕ ИспользоватьБезПодключенияОборудования И УслугаБанка.Пустая() И НЕ КонтекстВозвратаПоУслугеБанка() Тогда	//	LNK 12.04.2018 11:40:23 - услуга банка
		
		ОписаниеОшибкиФР = ВыходныеПараметры[1];
		
		ВходныеПараметры  = Новый Массив();
		ВыходныеПараметры = Неопределено;
		
		ВходныеПараметры.Добавить(СуммаОперации);
		ВходныеПараметры.Добавить(НомерСсылкиОперации);
		ВходныеПараметры.Добавить(НомерЧекаЭТ);
		
		// Выполнение операции на ЭТ
		МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваЭТ,
													"EmergencyVoid",
													ВходныеПараметры,
													ВыходныеПараметры);
		
		ЗаголовокИнформации = "Під час друку сліп-чека виникла помилка:";
		ТекстСообщения = "%ОписаниеОшибки%
						|Операцію по карті було скасовано.";
		ТекстСообщения = СтрЗаменить(ТекстСообщения,
									 "%ОписаниеОшибки%",
									 ОписаниеОшибкиФР);
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокИнформации, ТекстСообщения);
		
		ОбновитьФорму(Истина);
		Возврат;
		
	КонецЕсли;

	СтрокаОплаты = ТекущиеВидыОплат.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаОплаты, ВыбраннаяСтрока);
	СтрокаОплаты.Сумма     = СуммаОперации;
	СтрокаОплаты.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта");
	
	СтрокаОплаты.Организация             = Организация;
	СтрокаОплаты.ПредставлениеВидаОплаты = СтрокаОплаты.ВидОплаты;
	СтрокаОплаты.ПредставлениеСуммы      = Формат(СтрокаОплаты.Сумма, "ЧДЦ=2");
	
	СтрокаОплаты.СсылочныйНомер      = НомерСсылкиОперации;
	СтрокаОплаты.НомерЧекаЭТ         = НомерЧекаЭТ;
	СтрокаОплаты.НомерПлатежнойКарты = НомерКарты;
	СтрокаОплаты.СлипЧек			 = УбратьЛишниеПереводыВСтроке(СтрокаСлипЧека);

	Если ТипЗнч(ВыходныеПараметры) = Тип("Массив") Тогда

		СтрокаОплаты.ОтветЭквайрера = МассивВСтроку(ВыходныеПараметры);

	КонецЕсли;
	
	СтрокаОплаты.ЗапретРедактирования = Истина;
	СтрокаОплаты.ДанныеПереданыВБанк  = Истина;
	
	ТекущийЭлемент = Элементы.ТекущиеВидыОплат;
	Элементы.ТекущиеВидыОплат.ТекущаяСтрока = СтрокаОплаты.ПолучитьИдентификатор();
	
	// Отключение устройства ФР
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(ЭтотОбъект, ИдентификаторУстройстваФР);
	
	Если НЕ СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования
		И ИспользоватьПодключаемоеОборудование
		И НЕ КонтекстВозвратаПоУслугеБанка() Тогда	//	LNK 12.04.2018 11:40:23 - услуга банка

		// Отключение устройства ЭТ
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(ЭтотОбъект, ИдентификаторУстройстваЭТ);

	КонецЕсли;
	
	ПересчитатьЗначенияСуммДляПодарочныхСертификтов();
	ОбновитьФорму(Истина);

КонецПроцедуры

&НаКлиенте
Функция СторноОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(ВыбраннаяСтрока)
	
	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	ОписаниеОшибки            = "";
	КонечныйРезультат         = Ложь;
	
//	СуммаОперации       = СуммаОплаты;	// - HVOYA 03.11.2016 16:41:21, Латышев А.А. 
	СуммаОперации       = ВыбраннаяСтрока.Сумма;	//	LNK 04.03.2021 13:43:23
	НомерКарты          = ВыбраннаяСтрока.НомерПлатежнойКарты;
	НомерСсылкиОперации = ВыбраннаяСтрока.СсылочныйНомер;
	НомерЧекаЭТ         = ВыбраннаяСтрока.НомерЧекаЭТ;
	СтрокаСлипЧека      = "";
	
	СтруктрураЭквайринговыйТерминал = ПодключаемоеОборудованиеРТКлиент.ДанныеЭквайринговогоТерминала(ВыбраннаяСтрока.ЭквайринговыйТерминал);
	ИдентификаторУстройстваЭТ       = СтруктрураЭквайринговыйТерминал.ПодключаемоеОборудование;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		
		Если ИдентификаторУстройстваЭТ <> Неопределено Тогда
			
			// Выбор устройства ФР
			ПараметрыКассыККМ = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
			ИдентификаторУстройстваФР              = ПараметрыКассыККМ.ИдентификаторУстройства;
			ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
			
			Если ЗначениеЗаполнено(ИдентификаторУстройстваФР) ИЛИ ИспользоватьБезПодключенияОборудования Тогда
				
				Если НЕ (СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования ИЛИ СтруктрураЭквайринговыйТерминал.РежимВиртуальный = Истина) Тогда
					
					// Подключение устройства ЭТ
					РезультатЭТ = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(ЭтотОбъект,
																									ИдентификаторУстройстваЭТ,
																									ОписаниеОшибки);
				Иначе
					
					РезультатЭТ = Истина;
					
				КонецЕсли;
				
				Если РезультатЭТ Тогда
					
					// Подключение устройства ФР
					РезультатФР = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(ЭтотОбъект,
																									ИдентификаторУстройстваФР,
																									ОписаниеОшибки);
					
					Если РезультатФР ИЛИ ИспользоватьБезПодключенияОборудования Тогда
						
						Если НЕ СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
							
							Если НЕ СтруктрураЭквайринговыйТерминал.РежимВиртуальный = Истина Тогда

								ВходныеПараметры  = Новый Массив();
								ВыходныеПараметры = Неопределено;
								
								ВходныеПараметры.Добавить(СуммаОперации);
								ВходныеПараметры.Добавить(НомерСсылкиОперации);
								ВходныеПараметры.Добавить(НомерЧекаЭТ);

							//	Выполнение операции на ЭТ
								РезультатЭТ = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваЭТ,
																						 "AuthorizeVoid",
																						  ВходныеПараметры,
																						  ВыходныеПараметры);
							Иначе

								РезультатЭТ = Истина;
								ВыходныеПараметры = Новый Массив(1, 2);
								ВыходныеПараметры[0][1] = "";

							КонецЕсли;

							Если РезультатЭТ Тогда
								
								СтрокаСлипЧека = ВыходныеПараметры[0][1];
								Если Не ПустаяСтрока(СтрокаСлипЧека) Тогда
									глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", СтрокаСлипЧека);
								КонецЕсли;
								
								НомерКарты          = "";
								НомерСсылкиОперации = "";
								НомерЧекаЭТ         = "";
								
							Иначе
								
								ТекстОписаниеОшибки = ВыходныеПараметры[1];
								
							КонецЕсли;
							
						Иначе
							
							ТекстИнформации = "Потрібно виконати операцію скасування оплати на еквайринговому терміналі." + Символы.ПС;
							ТекстИнформации = ТекстИнформации + "Сума операції: " + СуммаОперации         + Символы.ПС;
							ТекстИнформации = ТекстИнформации + "Номер картки: " + НомерКарты            + Символы.ПС;
							ТекстИнформации = ТекстИнформации + "Номер посилання: " + НомерСсылкиОперации   + Символы.ПС;
							ТекстИнформации = ТекстИнформации + "Номер чеку: " + НомерЧекаЭТ + Символы.ПС;
							ЗаголовокИнформации = "Операція скасування оплати на еквайринговому терміналі пройшла успішно?";
							
							ОтветПользователя = ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМК(ЗаголовокИнформации, ТекстИнформации);
							
							РезультатЭТ = ВРЕГ(ОтветПользователя) = "ДА";
							
							Если РезультатЭТ Тогда
								СтрокаСлипЧека = "Скасовано оплату на суму %1% %2%";
								СтрокаСлипЧека = СтрЗаменить(СтрокаСлипЧека, "%1%", Формат(СуммаОперации, "ЧДЦ=2"));
								СтрокаСлипЧека = СтрЗаменить(СтрокаСлипЧека, "%2%", "грн.");
							Иначе
								СтрокаСлипЧека = "";
								ТекстОписаниеОшибки = "Операцію скасовано";
							КонецЕсли;
							
						КонецЕсли;
						
						Если Не РезультатЭТ Тогда
							ЗаголовокИнформации = "Під час виконання операції виникла помилка:"; 
							ТекстСообщения = "%ОписаниеОшибки%
											|Скасування по карті не було здійснено.";
							ТекстСообщения = СтрЗаменить(ТекстСообщения,
														 "%ОписаниеОшибки%",
														 ТекстОписаниеОшибки);
							ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокИнформации, ТекстСообщения);
						Иначе
							
							Если Не ПустаяСтрока(СтрокаСлипЧека) И Не ИспользоватьБезПодключенияОборудования Тогда
								ВходныеПараметры  = Новый Массив();
								ВходныеПараметры.Добавить(СтрокаСлипЧека);
								ВыходныеПараметры = Неопределено;
								
								РезультатФР = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР,
																						 "PrintText",
																						  ВходныеПараметры,
																						  ВыходныеПараметры);
							КонецЕсли;
							
						КонецЕсли;
						
						Если РезультатЭТ И (Не РезультатФР И Не ИспользоватьБезПодключенияОборудования) Тогда
							
							ОписаниеОшибкиФР = ВыходныеПараметры[1];
							
							ЗаголовокИнформации = "Під час друку сліп-чека виникла помилка:";
							ТекстСообщения = "%ОписаниеОшибки%
											|Операцію по карті було скасовано.";
							ТекстСообщения = СтрЗаменить(ТекстСообщения,
														 "%ОписаниеОшибки%",
														 ОписаниеОшибкиФР);
							ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокИнформации, ТекстСообщения);
							
						ИначеЕсли РезультатЭТ Тогда
							
							КонечныйРезультат = Истина;
							
						КонецЕсли;
						
						// Отключение устройства ФР
						МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(ЭтотОбъект,
																						 ИдентификаторУстройстваФР);
						
						Если Не СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
							// Отключение устройства ЭТ
							МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(ЭтотОбъект,
																							 ИдентификаторУстройстваЭТ);
						КонецЕсли;
						
					Иначе
						ЗаголовокИнформации = "При підключенні фіскального реєстратора сталася помилка:";
						ТекстСообщения = "%ОписаниеОшибки%
										|Операцію по карті не було виконано.";
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
						ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокИнформации, ТекстСообщения);
					КонецЕсли;
					
				Иначе
					ЗаголовокИнформации = "При підключенні еквайрингового терміналу сталася помилка:";
					ТекстСообщения = "%ОписаниеОшибки%
									|Операцію по карті не було виконано.";
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
					ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокИнформации, ТекстСообщения);
				КонецЕсли;
				
			Иначе
				ТекстСообщения = "Не обрано фіскального реєстратора.";
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ТекстСообщения);
			КонецЕсли;
			
		Иначе
			
			// Не выбран эквайринговый терминал
			
		КонецЕсли;
		
	Иначе
		ТекстСообщения = "Попередньо потрібно вибрати робоче місце зовнішнього обладнання поточного сеансу.";
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ТекстСообщения);
	КонецЕсли;
	
	Возврат КонечныйРезультат;
	
КонецФункции

&НаКлиенте
// Обрабатывается выбор платежной карты
//
// Параметры
//  ПлатежнаяКарта - Справочник "Виды оплат чека ККМ"
//
Процедура ОбработкаВыбораПлатежнойКарты(ВыбраннаяСтрока)

	ТекущаяГруппыСтраницы("ГруппаСтраница");
	
//	Если ИспользоватьПодключаемоеОборудование Тогда
	Если Истина Тогда
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа")
		ИЛИ  КонтекстВозвратаПоУслугеБанка()	Тогда

			ОплатаПлатежнойКартойЧерезЭквайринговыйТерминал(ВыбраннаяСтрока);

		Иначе

			ТекстСообщения = "Буде здійснено повернення за терміналом: " + Строка(ВыбраннаяСтрока.ЭквайринговыйТерминал) + "";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Терминал%", Строка(ВыбраннаяСтрока.ЭквайринговыйТерминал));
			
			ОтветПользователя = ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМК(
				"УВАГА!", ТекстСообщения, "Нет",, ЭтотОбъект);

			Если ВРЕГ(ОтветПользователя) = "ДА" Тогда	//	LNK 19.07.2019 13:12:10

					РезультатСторно = СторноОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(ВыбраннаяСтрока);

			Иначе	РезультатСторно = Ложь;

			КонецЕсли;

			Если НЕ РезультатСторно Тогда

				Возврат;

			КонецЕсли;
			
			СтрокаОплаты = ТекущиеВидыОплат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОплаты, ВыбраннаяСтрока);

		//	LNK 04.03.2021 13:48:48
		//	СтрокаОплаты.Сумма = СуммаОплаты;	// - HVOYA 04.11.2016 19:26:41, Латышев А.А. 
			
			СтрокаОплаты.ЗапретРедактирования = Истина;
			СтрокаОплаты.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта");
			
			СтрокаОплаты.Организация             = Организация;
			СтрокаОплаты.ПредставлениеВидаОплаты = СтрокаОплаты.ВидОплаты;
			СтрокаОплаты.ПредставлениеСуммы      = СтрокаОплаты.Сумма;
			СтрокаОплаты.ДанныеПереданыВБанк     = Истина;
			
			ТекущийЭлемент = Элементы.ВидыОплат;
			
			Элементы.ТекущиеВидыОплат.ТекущаяСтрока = СтрокаОплаты.ПолучитьИдентификатор();
			
			ПервыйВвод = Истина;

		КонецЕсли;
		
	Иначе

		СтрокаОплаты = ТекущиеВидыОплат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОплаты, ВыбраннаяСтрока);
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда

			СтрокаОплаты.Сумма = ИтогПоОрганизации - ТекущиеВидыОплат.Итог("Сумма");

		КонецЕсли;
		
		СтрокаОплаты.ЗапретРедактирования = ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат");
		
		СтрокаОплаты.Организация             = Организация;
		СтрокаОплаты.ПредставлениеВидаОплаты = СтрокаОплаты.ВидОплаты;
		СтрокаОплаты.ПредставлениеСуммы      = СтрокаОплаты.Сумма;
		
		ТекущийЭлемент = Элементы.ТекущиеВидыОплат;
		Элементы.ТекущиеВидыОплат.ТекущаяСтрока = СтрокаОплаты.ПолучитьИдентификатор();
		
		ПервыйВвод = Истина;

	КонецЕсли;
	
	ПересчитатьЗначенияСуммДляПодарочныхСертификтов();

КонецПроцедуры

// Обработка выбора вида оплаты;
//
// Параметры
//  ВыбраннаяСтрока - Выбранная строка;
//
&НаКлиенте
Процедура ОбработкаВыбораВидыОплаты(ВыбраннаяСтрока)

	Если ВыбраннаяСтрока.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ПустаяСсылка") Тогда

		ТекущаяГруппыСтраницы("ГруппаСтраница");

	Иначе

		СуммаКОплате = Макс(ИтогПоОрганизации - ТекущиеВидыОплат.Итог("Сумма"), 0);

		Если СуммаКОплате = 0 Тогда

			ТекущаяГруппыСтраницы("ГруппаСтраница");
			Возврат 

		КонецЕсли;

		ПервыйВвод = Истина;

		Если ВыбраннаяСтрока.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.БанковскийКредит") Тогда

			СтрокаОплаты = ТекущиеВидыОплат.Добавить();

			ЗаполнитьЗначенияСвойств(СтрокаОплаты, ВыбраннаяСтрока);

			Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда

					СтрокаОплаты.Сумма = ИтогПоОрганизации - ТекущиеВидыОплат.Итог("Сумма");

			Иначе	СтрокаОплаты.ЗапретРедактирования = Истина;

			КонецЕсли;
			
			СтрокаОплаты.Организация             = Организация;
			СтрокаОплаты.ПредставлениеСуммы      = СтрокаОплаты.Сумма;
			СтрокаОплаты.ПредставлениеВидаОплаты = СтрокаОплаты.ВидОплаты;

			ТекущаяГруппыСтраницы("ГруппаСтраница");
			ТекущийЭлемент = Элементы.ТекущиеВидыОплат;
			Элементы.ТекущиеВидыОплат.ТекущаяСтрока = СтрокаОплаты.ПолучитьИдентификатор();

			ПересчитатьЗначенияСуммДляПодарочныхСертификтов();

		Иначе // Платежная карта

			ОбработкаВыбораПлатежнойКарты(ВыбраннаяСтрока);

		КонецЕсли;

	КонецЕсли;

	ОбновитьФорму();

КонецПроцедуры

// При изменении любого вида оплата необходимо пересчиатать сумму подарочных сертификатов
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура ПересчитатьЗначенияСуммДляПодарочныхСертификтов()

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВидОплаты", ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные"));
	
	СтрокиТекущейТаблицаОплат = ТекущиеВидыОплат.НайтиСтроки(СтруктураПоиска);
	СуммаОплатыНаличными = 0;
	Для каждого СтрокаТекущейТаблицаОплат Из СтрокиТекущейТаблицаОплат Цикл
		СуммаОплатыНаличными = СуммаОплатыНаличными + СтрокаТекущейТаблицаОплат.Сумма;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВидОплаты", ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом"));
	
	СтрокиТекущейТаблицаОплат = ТекущиеВидыОплат.НайтиСтроки(СтруктураПоиска);
	СуммаОплатыПодарочнымиСертификатами = 0;
	Для каждого СтрокаТекущейТаблицаОплат Из СтрокиТекущейТаблицаОплат Цикл
		СуммаОплатыПодарочнымиСертификатами = СуммаОплатыПодарочнымиСертификатами + СтрокаТекущейТаблицаОплат.Сумма;
	КонецЦикла;
	
	СуммаПрочихОплат = ТекущиеВидыОплат.Итог("Сумма") - СуммаОплатыПодарочнымиСертификатами - СуммаОплатыНаличными;
	
	ОстатокСуммы = Макс(0, ИтогПоОрганизации - СуммаПрочихОплат);
	
	Для каждого СтрокаТекущейТаблицаОплат Из СтрокиТекущейТаблицаОплат Цикл
		
		СуммаПоНоминалу = СтрокаТекущейТаблицаОплат.КоличествоСертификатов * СтрокаТекущейТаблицаОплат.Номинал;
		
		ВозможноПогасить = Мин(СуммаПоНоминалу, ОстатокСуммы);
		
		СтрокаТекущейТаблицаОплат.Сумма = ВозможноПогасить;
		СтрокаТекущейТаблицаОплат.ПредставлениеСуммы = Формат(СтрокаТекущейТаблицаОплат.Сумма, "ЧДЦ=2");
		
		ОстатокСуммы = ОстатокСуммы - ВозможноПогасить;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПересчитатьЗначенияСуммДляПодарочныхСертификтовСервер()

	СтрокиТекущейТаблицаОплат = ТекущиеВидыОплат.НайтиСтроки(Новый Структура("ВидОплаты", Справочники.ВидыОплатЧекаККМ.Наличные));
	СуммаОплатыНаличными = 0;

	Для каждого СтрокаТекущейТаблицаОплат Из СтрокиТекущейТаблицаОплат Цикл
		СуммаОплатыНаличными = СуммаОплатыНаличными + СтрокаТекущейТаблицаОплат.Сумма;
	КонецЦикла;
	
	СтрокиТекущейТаблицаОплат = ТекущиеВидыОплат.НайтиСтроки(Новый Структура("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом));
	СуммаОплатыПодарочнымиСертификатами = 0;

	Для каждого СтрокаТекущейТаблицаОплат Из СтрокиТекущейТаблицаОплат Цикл

		СуммаПоНоминалу = СтрокаТекущейТаблицаОплат.КоличествоСертификатов * СтрокаТекущейТаблицаОплат.Номинал;
		СуммаОплатыПодарочнымиСертификатами = СуммаОплатыПодарочнымиСертификатами + СуммаПоНоминалу;

	КонецЦикла;

	СуммаПрочихОплат = ТекущиеВидыОплат.Итог("Сумма") - СуммаОплатыПодарочнымиСертификатами - СуммаОплатыНаличными;

	ОстатокСуммы = Макс(0, ИтогПоОрганизации - СуммаПрочихОплат);
	
	Для каждого СтрокаТекущейТаблицаОплат Из СтрокиТекущейТаблицаОплат Цикл
		
		СуммаПоНоминалу = СтрокаТекущейТаблицаОплат.КоличествоСертификатов * СтрокаТекущейТаблицаОплат.Номинал;
		
		ВозможноПогасить = Мин(СуммаПоНоминалу, ОстатокСуммы);
		
	//	СтрокаТекущейТаблицаОплат.Сумма = ВозможноПогасить;
		СтрокаТекущейТаблицаОплат.Сумма = СуммаПоНоминалу;	//	LNK 31.08.2020 07:03:31
		СтрокаТекущейТаблицаОплат.ПредставлениеСуммы = Формат(СтрокаТекущейТаблицаОплат.Сумма, "ЧДЦ=2");
		
		ОстатокСуммы = ОстатокСуммы - ВозможноПогасить;

	КонецЦикла;

КонецПроцедуры // ПересчитатьЗначенияСуммДляПодарочныхСертификтов()

&НаСервере
Процедура ОбработкаТабличнойЧастиПогашенияПодарочныхСертификатов()

	ТаблицаПогашенияПодарочныхСертификатов = ПогашениеПодарочныхСертификатов.Выгрузить();
	ТаблицаПогашенияПодарочныхСертификатов.Колонки.Добавить("КоличествоСертификатов");
	ТаблицаПогашенияПодарочныхСертификатов.ЗаполнитьЗначения(1, "КоличествоСертификатов");
	ТаблицаПогашенияПодарочныхСертификатов.Свернуть("ПодарочныйСертификат, СерийныйНомер, Организация, Номинал", "КоличествоСертификатов");
	
	СтрокаОплаты = Неопределено;

	Для каждого СтрокаТаблицыПогашения Из ТаблицаПогашенияПодарочныхСертификатов Цикл

		Если НЕ СтрокаТаблицыПогашения.Организация = Организация Тогда

			Продолжить;

		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ПодарочныйСертификат", СтрокаТаблицыПогашения.ПодарочныйСертификат);
		СтруктураПоиска.Вставить("СерийныйНомер", СтрокаТаблицыПогашения.СерийныйНомер);
		СтруктураПоиска.Вставить("Организация", Организация);

		СтрокиТекущейТаблицаОплат = ТекущиеВидыОплат.НайтиСтроки(СтруктураПоиска);

		Если СтрокиТекущейТаблицаОплат.Количество() = 0 Тогда
			
			СтрокаОплаты = ТекущиеВидыОплат.Добавить();
			СтрокаОплаты.ВидОплаты              = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом;
			СтрокаОплаты.ТипОплаты              = Перечисления.ТипыОплатЧекаККМ.ПодарочныйСертификат;
			СтрокаОплаты.ПодарочныйСертификат   = СтрокаТаблицыПогашения.ПодарочныйСертификат;
			СтрокаОплаты.СерийныйНомер          = СтрокаТаблицыПогашения.СерийныйНомер;
			СтрокаОплаты.КоличествоСертификатов = СтрокаТаблицыПогашения.КоличествоСертификатов;
			СтрокаОплаты.Организация            = Организация;
		//	СтрокаОплаты.Номинал                = СтрокаТаблицыПогашения.ПодарочныйСертификат.Номинал;
			СтрокаОплаты.Номинал                = СтрокаТаблицыПогашения.Номинал;	//	LNK 31.08.2020 06:48:39
			СтрокаОплаты.ЗапретРедактирования   = Истина;
			
			Если ЗначениеЗаполнено(СтрокаОплаты.СерийныйНомер) Тогда
				СтрокаОплаты.ПредставлениеВидаОплаты = "" + СтрокаТаблицыПогашения.ПодарочныйСертификат + " (" + Строка(СтрокаТаблицыПогашения.СерийныйНомер) + ")";
			Иначе
				СтрокаОплаты.ПредставлениеВидаОплаты = "" + СтрокаТаблицыПогашения.ПодарочныйСертификат + " (" + Строка(СтрокаТаблицыПогашения.КоличествоСертификатов) + "шт.)";
			КонецЕсли;
			
			СтрокаОплаты.ПредставлениеСуммы      = "";
		Иначе
			СтрокаОплаты = СтрокиТекущейТаблицаОплат[0];
			
			СтрокаОплаты.КоличествоСертификатов = СтрокаТаблицыПогашения.КоличествоСертификатов;
			
			Если ЗначениеЗаполнено(СтрокаОплаты.СерийныйНомер) Тогда
				СтрокаОплаты.ПредставлениеВидаОплаты = "" + СтрокаТаблицыПогашения.ПодарочныйСертификат + " (" + Строка(СтрокаТаблицыПогашения.СерийныйНомер) + ")";
			Иначе
				СтрокаОплаты.ПредставлениеВидаОплаты = "" + СтрокаТаблицыПогашения.ПодарочныйСертификат + " (" + Строка(СтрокаТаблицыПогашения.КоличествоСертификатов) + "шт.)";
			КонецЕсли;
			
			СтрокаОплаты.ПредставлениеСуммы      = "";
			
			Если СтрокиТекущейТаблицаОплат.Количество() > 1 Тогда
				
				КолвоЭлементовКоллекции = СтрокиТекущейТаблицаОплат.Количество() - 1;
				Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
					ЭлементКоллекции = СтрокиТекущейТаблицаОплат[КолвоЭлементовКоллекции - ОбратныйИндекс + 1];

					ТекущиеВидыОплат.Удалить(ЭлементКоллекции);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПересчитатьЗначенияСуммДляПодарочныхСертификтовСервер();
	
	ТекущаяГруппыСтраницы("ГруппаСтраница");
	ТекущийЭлемент = Элементы.ТекущиеВидыОплат;
	
	Если НЕ СтрокаОплаты = Неопределено Тогда
		Элементы.ТекущиеВидыОплат.ТекущаяСтрока = СтрокаОплаты.ПолучитьИдентификатор();
	КонецЕсли;
	

КонецПроцедуры

&НаСервере
Процедура ДобавитьНайденныеСерийныеНомера(АдресТаблицы)
	
	ТаблицаОплаты = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	КолвоЭлементовКоллекции = ПогашениеПодарочныхСертификатов.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ЭлементКоллекции = ПогашениеПодарочныхСертификатов[КолвоЭлементовКоллекции - ОбратныйИндекс];
		
		Если ЭлементКоллекции.Организация = Организация Тогда
			ПогашениеПодарочныхСертификатов.Удалить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	КолвоЭлементовКоллекции = ТекущиеВидыОплат.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ЭлементКоллекции = ТекущиеВидыОплат[КолвоЭлементовКоллекции - ОбратныйИндекс];
		
		Если ЭлементКоллекции.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом Тогда
			ТекущиеВидыОплат.Удалить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;

	Для каждого СтрокаТЧ Из ТаблицаОплаты Цикл

		Если ЗначениеЗаполнено(СтрокаТЧ.ПодарочныйСертификат) Тогда

			СтрокаПогашения = ПогашениеПодарочныхСертификатов.Добавить();
			СтрокаПогашения.ПодарочныйСертификат = СтрокаТЧ.ПодарочныйСертификат;
			СтрокаПогашения.СерийныйНомер        = СтрокаТЧ.СерийныйНомер;
			СтрокаПогашения.Организация          = Организация;
			СтрокаПогашения.Номинал              = СтрокаТЧ.Номинал;

		КонецЕсли;

	КонецЦикла;
	
	ОбработкаТабличнойЧастиПогашенияПодарочныхСертификатов();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьТекущийЭлементEnter()
	ТекущийЭлемент = Элементы.КомандаEnter;
КонецПроцедуры


// ПодключаемоеОборудование
&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) 
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаСерийныхНомеров");
	
	Возврат ПодключаемоеОборудованиеРТ.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныйСерийныйНомер(СерийныйНомерСчитанный) 
	
	СтрокиССерийнымНомером = ПогашениеПодарочныхСертификатов.НайтиСтроки(Новый Структура("СерийныйНомер", СерийныйНомерСчитанный));
	
	Если СтрокиССерийнымНомером.Количество() > 0  Тогда
		Возврат Ложь
	Иначе
		СтрокаПогашения = ПогашениеПодарочныхСертификатов.Добавить();
		СтрокаПогашения.ПодарочныйСертификат = СерийныйНомерСчитанный.Владелец;
		СтрокаПогашения.СерийныйНомер        = СерийныйНомерСчитанный;
		СтрокаПогашения.Номинал		         = СтрокаПогашения.ПодарочныйСертификат.Номинал;	//	LNK 31.08.2020 06:50:41 - временно - УДАЛИТЬ после анализа
		СтрокаПогашения.Организация          = Организация;
		
		ОбработкаТабличнойЧастиПогашенияПодарочныхСертификатов();
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Обработка магнитного или штрихового кода на клиенте
//
// Параметры
//  СтруктураПараметровКлиента - структура параметров
//
&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод)
	
	Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") 
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
		
		СтрокаСообщения = "Дані щодо коду не знайдені: %1%";
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекКод);
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(СтрокаСообщения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ТекстПредупреждения") Тогда
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(СтруктураПараметровКлиента.ТекстПредупреждения);
		
	КонецЕсли;
КонецПроцедуры // ОбработатьДанныеПоКодуКлиент()

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) 
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаСерийныхНомеров");
	
	Возврат ПодключаемоеОборудованиеРТ.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции
// Конец ПодключаемоеОборудование

&НаСервереБезКонтекста	//	LNK 13.04.2018 09:04:01
Функция ПолучитьЭквайринговыйТерминалПоОрганизации(КассаККМ, Организация, ЭквайринговыйТерминал)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТекущегоТерминала.Ссылка КАК ЭквайринговыйТерминал,
	|	ТаблицаТекущегоТерминала.Владелец КАК ДоговорЭквайринга,
	|	ТаблицаТекущегоТерминала.Касса КАК Касса,
	|	ТаблицаТекущегоТерминала.Организация КАК Организация,
	|	ТаблицаТекущегоТерминала.ПометкаУдаления КАК ПометкаУдаления
	|ПОМЕСТИТЬ Текущая
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ТаблицаТекущегоТерминала
	|ГДЕ
	|	ТаблицаТекущегоТерминала.Ссылка = &ЭквайринговыйТерминал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТерминалы.Ссылка КАК ЭквайринговыйТерминал,
	|	0 КАК Приоритет
	|ИЗ
	|	Текущая КАК Текущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы КАК ТаблицаТерминалы
	|		ПО Текущая.ДоговорЭквайринга.Эквайрер = ТаблицаТерминалы.Владелец.Эквайрер
	|			И (ТаблицаТерминалы.Касса = &КассаККМ)
	|			И (ТаблицаТерминалы.Организация = &Организация)
	|ГДЕ
	|	НЕ ТаблицаТерминалы.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Текущая.ЭквайринговыйТерминал,
	|	1
	|ИЗ
	|	Текущая КАК Текущая
	|ГДЕ
	|	Текущая.Касса = &КассаККМ
	|	И Текущая.Организация = &Организация
	|	И НЕ Текущая.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ"
	);
	Запрос.УстановитьПараметр("КассаККМ"   , КассаККМ);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
	
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

			Выборка = Результат.Выбрать();
			Выборка.Следующий();

			ЗначениеВозврата = Выборка.ЭквайринговыйТерминал;

	Иначе	ЗначениеВозврата = Справочники.ЭквайринговыеТерминалы.ПустаяСсылка();

	КонецЕсли;
	
	Возврат ЗначениеВозврата;

КонецФункции // ПолучитьЭквайринговыйТерминалПоОрганизации()

#Область ОбработчикиФункционалаУслугиБанка

&НаКлиенте	//	LNK 18.04.2018 09:34:28
Процедура КомандаУслугиОплатаЧастями(Команда)

	УстановитьОформлениеКнопокУслугиБанков(ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.ОплатаЧастями"));

КонецПроцедуры

&НаКлиенте	//	LNK 18.04.2018 09:34:28
Процедура КомандаУслугиМгновеннаяРассрочка(Команда)

	УстановитьОформлениеКнопокУслугиБанков(ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.МгновеннаяРассрочка"));
	БонусныеБаллыКлиент.ПроверитьНачисленияПоКредитнойОплате(ВладелецФормы.Объект, ВладелецФормы);	//	LNK 30.07.2021 13:59:24

КонецПроцедуры

&НаСервере	//	LNK 27.04.2018 08:36:49
Функция ГруппаКнопкиУслугиВидимость(ИмяСтраницы)

	ВидимостьГруппы = ИспользоватьБанковскиеУслуги = Истина
		И
		(ИмяСтраницы = "ГруппаСтраница" ИЛИ ИмяСтраницы = "ГруппаСтраницаВидыОплат" ИЛИ ИмяСтраницы = "ГруппаСтраницаПраваяКлавиатура");

	Если ВидимостьГруппы И ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда

		ВидимостьГруппы = ВидимостьГруппы И НЕ УслугаБанка.Пустая();

	КонецЕсли;

	Элементы.ГруппаКнопкиУслуги.Видимость = ВидимостьГруппы;

	Возврат Элементы.ГруппаКнопкиУслуги.Видимость;

КонецФункции

&НаКлиенте	//	LNK 10.07.2018 13:17:24
Процедура УстановитьОформлениеКнопокУслугиБанков(ТипУслуги, ПриОткрытии = Ложь)

	Если НЕ ПриОткрытии И ТипУслуги = ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.МгновеннаяРассрочка") Тогда

		Если УслугаБанка.Пустая() Тогда

			УслугаБанка   = ПредопределенноеЗначение("Справочник.УслугиБанка.МгновеннаяРассрочка");
			ПоднятьКнопку = Истина;

			ВладелецФормы.УслугаБанкаДанные = ФинансыВызовСервера.ПолучитьДанныеУслугаБанка(ВладелецФормы.Объект.УслугаБанка, ВладелецФормы.Объект.ЗаказПокупателя);

		Иначе

			УслугаБанка   = ПредопределенноеЗначение("Справочник.УслугиБанка.ПустаяСсылка");
			ПоднятьКнопку = Ложь;

			ВладелецФормы.УслугаБанкаДанные = ФинансыВызовСервера.УслугаБанкаСтруктураДанных();

		КонецЕсли;

	Иначе

		ПоднятьКнопку = НЕ УслугаБанка.Пустая() И УслугаБанкаДанные.ТипУслуги = ТипУслуги;

		Если УслугаБанкаДанные.ТипУслуги = ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.ПакетМалыша") Тогда

			Элементы.КомандаУслугиОплатаЧастями.Заголовок = "Пакунок" + Символы.ПС + "малюка";

			Если ТипУслуги = ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.ОплатаЧастями") Тогда
				
				ПоднятьКнопку = НЕ УслугаБанка.Пустая();

			КонецЕсли;

		Иначе	Элементы.КомандаУслугиОплатаЧастями.Заголовок = "";

		КонецЕсли;

	КонецЕсли;

	ПоднятьКнопкуГруппыУслуги(?(ТипУслуги = ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.МгновеннаяРассрочка")
		, Элементы.КомандаУслугиМгновеннаяРассрочка
		, Элементы.КомандаУслугиОплатаЧастями)
		, ПоднятьКнопку
	);

	Если НЕ УслугаБанка.Пустая()
		И УслугаБанкаДанные.ТипУслуги = ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.ПакетМалыша")
	Тогда

		Элементы.КомандаНаличные.Доступность   = ДоступнаКомандаНаличные;
		Элементы.КомандаСертификат.Доступность = ДоступнаКомандаСертификат;
		Элементы.КомандаКредит.Доступность     = ДоступнаКомандаКредит;;

	Иначе

		Элементы.КомандаНаличные.Доступность   = ДоступнаКомандаНаличные И (УслугаБанка.Пустая() ИЛИ НЕ УслугаБанкаДанные.ТипИнтернетБанкинга = ПредопределенноеЗначение("Перечисление.ТипыИнтернетБанкинга.ПустаяСсылка"));
		Элементы.КомандаСертификат.Доступность = ДоступнаКомандаСертификат И (УслугаБанка.Пустая() И УслугаБанкаДанные.ТипИнтернетБанкинга = ПредопределенноеЗначение("Перечисление.ТипыИнтернетБанкинга.ПустаяСсылка"));
		Элементы.КомандаКредит.Доступность     = ДоступнаКомандаКредит;;

	КонецЕсли;

	Если НЕ ПриОткрытии Тогда

		ИспользоватьТерминал(УслугаБанкаДанные, УслугаБанка, ИспользоватьПодключаемоеОборудование);

	КонецЕсли;

	УстановитьЗаголовокФормы();

	Если ПоднятьКнопку = Истина Тогда

		ЗапретитьОплатуБонусами = Истина;
		УстановитьОформлениеЭлементов();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 27.04.2018 09:15:25
Процедура ПоднятьКнопкуГруппыУслуги(ЭлементГруппы, ПоднятьКнопку)

	Если ПоднятьКнопку Тогда

			ЭлементГруппы.ЦветФона = WebЦвета.БледноЗеленый;

	Иначе	ЭлементГруппы.ЦветФона = ЦветФонаУслугаБанка;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 27.04.2018 10:04:56
Функция КонтекстВозвратаПоУслугеБанка()

	Возврат ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")
		И ЗначениеЗаполнено(УслугаБанка)
		И УслугаБанкаДанные.ТипИнтернетБанкинга = ПредопределенноеЗначение("Перечисление.ТипыИнтернетБанкинга.ПустаяСсылка")
		И НЕ УслугаБанкаДанные.ТипУслуги = ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.ПакетМалыша");

КонецФункции

&НаКлиентеНаСервереБезКонтекста	//	LNK 24.09.2020 09:45:05
Функция ИспользоватьТерминал(УслугаБанкаДанные, УслугаБанка, ИспользоватьПодключаемоеОборудование)

	Если УслугаБанкаДанные.УслугаБанка.Пустая() Тогда

		ИспользоватьПодключаемоеОборудование = НЕ УслугаБанка = ПредопределенноеЗначение("Справочник.УслугиБанка.МгновеннаяРассрочка");

	Иначе

		ИспользоватьПодключаемоеОборудование = НЕ УслугаБанкаДанные.СтараяСхемаКредита
				ИЛИ УслугаБанкаДанные.ТипУслуги = ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.ПакетМалыша");

	КонецЕсли;

	Возврат ИспользоватьПодключаемоеОборудование;

КонецФункции

#КонецОбласти

&НаКлиенте	//	LNK 26.02.2021 12:36:10
Процедура КомандаИспользованиеБонусов(Команда)

	ВладелецФормы.ОткрытьФормуИспользованияБонусов(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте	//	LNK 18.06.2021 10:07:43
Процедура КомандаИспользованиеБонусовЗавершение(ДанныеПрименения, ДополнительныеПараметры)	Экспорт

	Если ТипЗнч(ДанныеПрименения) = Тип("Структура") Тогда

		КомандаИспользованиеБонусовОбновитьДанныеФормы(
			ВладелецФормы.КомандаИспользованиеБонусовЗавершение(ДанныеПрименения, ДополнительныеПараметры)
		);
		Элементы.КомандаИспользованиеБонусов.Доступность = Ложь;	//	LNK 20.09.2021 14:40:33

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 23.06.2021 08:44:11
Процедура КомандаИспользованиеБонусовОбновитьДанныеФормы(РезультатПогашения)	Экспорт

	ЗаполнитьИзменяемыеРеквизиты(РезультатПогашения);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСуммуСдачи(Знач ОбщаяСуммаОплаты, ПоМодулю = Истина, ОкруглитьБезПроверки = Ложь)
	
	СтрокиНаличные = ТекущиеВидыОплат.НайтиСтроки(
		Новый Структура("ВидОплаты"
					, ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные")
		)
	);
	СуммаОплатыНаличные = 0;

	Для каждого СтрокаНаличные Из СтрокиНаличные Цикл

		СуммаОплатыНаличные = СуммаОплатыНаличные + СтрокаНаличные.Сумма;

	КонецЦикла;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	Если ОкруглитьБезПроверки = Истина ИЛИ ОкруглениеДопустимо() Тогда

		Значение = ?(ОбщаяСуммаОплаты = ИтогПоОрганизации
			, 0
			,Мин(СуммаОкругленная(СуммаОплатыНаличные, ОкруглитьБезПроверки)
				, ОбщаяСуммаОплаты - СуммаОкругленная(ИтогПоОрганизации, ОкруглитьБезПроверки))
		);

	Иначе

		Значение = Мин(СуммаОплатыНаличные, ОбщаяСуммаОплаты - ИтогПоОрганизации);

	КонецЕсли;

	Возврат Значение * ?(ПоМодулю, ?(Значение < 0, -1, 1), 1);

КонецФункции

&НаКлиенте	//	LNK 23.09.2019 12:01:53
Функция СуммаОкругленная(СуммаПараметр, ОкруглитьБезПроверки = Ложь)

	Если ОкруглитьБезПроверки = Истина ИЛИ ОкруглениеДопустимо() Тогда

		Значение = Окр(СуммаПараметр, 1, РежимОкругления.Окр15как20);

	Иначе

		Значение = СуммаПараметр;

	КонецЕсли;

	Возврат Значение;

КонецФункции

&НаКлиенте	//	LNK 24.09.2019 11:09:56
Функция ОкруглениеДопустимо()

	Если РазрешитьОкругление Тогда

		НужноВыполнить = НЕ ТекущиеВидыОплат.Количество() = 0;

		Если НужноВыполнить Тогда

			РазрешенныеВидыОплат = Новый Соответствие;
			РазрешенныеВидыОплат.Вставить(ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные"), Истина);
			РазрешенныеВидыОплат.Вставить(ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом"), Истина);

			Для каждого СтрокаВидаОплаты Из ТекущиеВидыОплат Цикл

				Если РазрешенныеВидыОплат.Получить(СтрокаВидаОплаты.ВидОплаты) = Неопределено Тогда

					НужноВыполнить = Ложь;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	Иначе

		НужноВыполнить = Ложь;

	КонецЕсли;

	Возврат НужноВыполнить;

КонецФункции

&НаКлиенте	//	LNK 24.09.2019 11:53:08
Процедура ВыполнитьОкругление()

	Если ОкруглениеДопустимо() Тогда

		ВладелецФормы.ВыполнитьОкруглениеСуммыОплаты();
	
		ОбновитьФорму();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВозможнуюПредоплату()

	НоваяПочта = НРег("НоваяПочта");	//	LNK 04.10.2022 07:58:52
	
	Если УслугаБанкаДанные.ТипИнтернетБанкинга = ПредопределенноеЗначение("Перечисление.ТипыИнтернетБанкинга.ПустаяСсылка") Тогда

		Если НЕ СуммаПослеплаты = 0
		И	 ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")
		И	 ТипЗнч(ДанныеЗаказа) = Тип("Структура") И ДанныеЗаказа.ЭтоУзелИнтернетМагазина = Истина
		Тогда

			СуммаКОплате = Макс(Мин(СуммаПослеплаты, ИтогПоОрганизации - ТекущиеВидыОплат.Итог("Сумма")), 0);

			Если СуммаКОплате > 0 Тогда

				СтрокаОплаты = ТекущиеВидыОплат.Добавить();
				СтрокаОплаты.Организация = Организация;
				СтрокаОплаты.ВидОплаты	 = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Послеплата");
				
				СтрокаОплаты.Сумма = СуммаПослеплаты;
				СтрокаОплаты.ПредставлениеСуммы      = СтрокаОплаты.Сумма;
				СтрокаОплаты.ПредставлениеВидаОплаты = СокрЛП(СтрокаОплаты.ВидОплаты);

			КонецЕсли;

		КонецЕсли;

		Если НЕ СуммаПредоплаты = 0 Тогда	//+HVOYA Mykhailo

			СуммаКОплате = Макс(Мин(СуммаПредоплаты, ИтогПоОрганизации - ТекущиеВидыОплат.Итог("Сумма")), 0);

			СтрокаОплаты = ТекущиеВидыОплат.Добавить();
			СтрокаОплаты.Организация = Организация;
			СтрокаОплаты.ВидОплаты	 = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаКартойИнтернетЗаказа");
			
			СтрокаОплаты.Сумма = СуммаКОплате;
			СтрокаОплаты.ПредставлениеСуммы      = СтрокаОплаты.Сумма;
			СтрокаОплаты.ПредставлениеВидаОплаты = СокрЛП(СтрокаОплаты.ВидОплаты);

			Если ТипЗнч(ДанныеЗаказа) = Тип("Структура") И ДанныеЗаказа.ЭтоУзелИнтернетМагазина = Истина Тогда

				Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда

					СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Предоплата");
					СтрокаОплаты.ПредставлениеВидаОплаты = СокрЛП(СтрокаОплаты.ВидОплаты);

				Иначе

					Если ДанныеЗаказа.СтатусОплаты = ПредопределенноеЗначение("Перечисление.СтатусОплаты.НеОплачен")
					Тогда

						СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Послеплата");
						СтрокаОплаты.ПредставлениеВидаОплаты = СокрЛП(СтрокаОплаты.ВидОплаты);

						Если НЕ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда

							Если ДанныеЗаказа.СуммаДоставки > 0 Тогда

								Если НЕ ДанныеЗаказа.СуммаДоставкиОплачена Тогда

								//	МИШИНСКИЙ:	5. Заказы не оплаченные на сайте без оплаченной доставки на НП.
								//				Чеки по этим заказам печатает интернет-магазин.
								//				Товар и доставка оплачиваются видом оплаты «Післяплата»

									СтрокаОплаты.Сумма = СтрокаОплаты.Сумма + ДанныеЗаказа.СуммаДоставки;
									СтрокаОплаты.ПредставлениеСуммы = СтрокаОплаты.Сумма;
								
								Иначе

								//	МИШИНСКИЙ:	6. Заказы не оплаченные через сайт, но в какой-то форме доставка может быть оплачена по ссылке.
								//				Для таких заказов чеки печатает интернет-магазин.
								//				Товар должен быть продан с видом оплаты «Піляплата», а доставка видом оплаты «Передплата».

									СуммаКОплате = Макс(ИтогПоОрганизации - ТекущиеВидыОплат.Итог("Сумма"), 0);

									Если СуммаКОплате > 0 Тогда

										СтрокаОплаты = ТекущиеВидыОплат.Добавить();	//	ещё одна строка!
										СтрокаОплаты.Организация = Организация;
										СтрокаОплаты.ВидОплаты	 = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Предоплата");
										СтрокаОплаты.ПредставлениеВидаОплаты = СокрЛП(СтрокаОплаты.ВидОплаты);
										
										СтрокаОплаты.Сумма = СуммаКОплате;
										СтрокаОплаты.ПредставлениеСуммы = СтрокаОплаты.Сумма;

										СтрокаОплаты.Обязательный = Истина;	//	Неудаляемая строка

									КонецЕсли;

								КонецЕсли;

							КонецЕсли;

						КонецЕсли;

						СтрокаОплаты.Обязательный = Истина;	//	Неудаляемая строка

					ИначеЕсли ДанныеЗаказа.СтатусОплаты = ПредопределенноеЗначение("Перечисление.СтатусОплаты.Оплачен")
					Тогда
					
						Если ДанныеЗаказа.ТипДоставки = ПредопределенноеЗначение("Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз") Тогда
						//	МИШИНСКИЙ:	1. Заказы оплаченные на сайте для самовывоза в магазине. Доставки в таком случае нет.
						//				Для таких заказов необходимо напечатать чек с типом оплаты «Передплата».
						//				Так же после того как магазин отдал товар клиенту, сотрудник магазина должен сообщить
						//				об этом менеджеру интернет-магазина. А тот в свою очередь должен в интернет-заказе
						//				изменить статус заказа на «Доставлен».

							СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Предоплата");
							СтрокаОплаты.ПредставлениеВидаОплаты = СокрЛП(СтрокаОплаты.ВидОплаты);

							СтрокаОплаты.Обязательный = Истина;	//	Неудаляемая строка

						ИначеЕсли НРег(Лев(ОбщегоНазначенияКлиентСервер.ИмяЗначенияПеречисления(ДанныеЗаказа.ТипДоставки), СтрДлина(НоваяПочта))) = НоваяПочта
						Тогда

						//	МИШИНСКИЙ:	3. Заказы оплаченные на сайте с оплаченной доставкой на НП.
						//				Чеки по этим заказам печатает интернет-магазин.
						//				Товар и доставка оплачиваются видом оплаты «Передплата»

							СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Предоплата");
							СтрокаОплаты.ПредставлениеВидаОплаты = СокрЛП(СтрокаОплаты.ВидОплаты);

							СтрокаОплаты.Обязательный = Истина;	//	Неудаляемая строка

							Если НЕ ДанныеЗаказа.СуммаДоставкиОплачена Тогда

							//	МИШИНСКИЙ:	4. Заказы оплаченные на сайте без оплаченной доставки на НП.
							//				Чеки по этим заказам печатает интернет-магазин.
							//				Товар оплачивается видом оплаты «Передплата», а доставка видом оплаты «Післяплата».

								СуммаКОплате = Макс(ИтогПоОрганизации - ТекущиеВидыОплат.Итог("Сумма"), 0);

								Если СуммаКОплате > 0 Тогда

									СтрокаОплаты = ТекущиеВидыОплат.Добавить();	//	ещё одна строка!
									СтрокаОплаты.Организация = Организация;
									СтрокаОплаты.ВидОплаты	 = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Послеплата");
									СтрокаОплаты.ПредставлениеВидаОплаты = СокрЛП(СтрокаОплаты.ВидОплаты);
									
									СтрокаОплаты.Сумма = СуммаКОплате;
									СтрокаОплаты.ПредставлениеСуммы = СтрокаОплаты.Сумма;

									СтрокаОплаты.Обязательный = Истина;	//	Неудаляемая строка

								КонецЕсли;

							КонецЕсли;
						
						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли; 

	Иначе

		Если НЕ Параметры.УслугаБанкаСуммаКредита = 0 Тогда	//	LNK 03.06.2020 11:17:33

			СтрокаОплаты = ТекущиеВидыОплат.Добавить();
			СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.БанковскийКредит");

			СтрокаОплаты.ЗапретРедактирования = Истина;
			СтрокаОплаты.Сумма     = Параметры.УслугаБанкаСуммаКредита;
			СтрокаОплаты.ПредставлениеСуммы      = СтрокаОплаты.Сумма;
			СтрокаОплаты.ПредставлениеВидаОплаты = "Кредитная программа";
			СтрокаОплаты.Организация             = Организация;

			СтрокаОплаты.Обязательный = Истина;	//	Неудаляемая строка

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста	//	LNK 29.10.2020 06:02:51
Функция МассивВСтроку(Значение)

	Возврат ЗначениеВСтрокуВнутр(Значение);

КонецФункции

&НаКлиентеНаСервереБезКонтекста	//	LNK 29.10.2020 09:53:27
Функция УбратьЛишниеПереводыВСтроке(Знач ЗначениеТекста)

	СписокЛишних = Новый Массив;
	СписокЛишних.Добавить(Новый Структура("Поиск, Замена", Символ(13) + Символ(10), Символы.ПС));
	СписокЛишних.Добавить(Новый Структура("Поиск, Замена", Символы.ПС + Символы.ПС, Символы.ПС));

	Для каждого Лишний Из СписокЛишних Цикл

		Пока НЕ СтрНайти(ЗначениеТекста, Лишний.Поиск) = 0 Цикл

			ЗначениеТекста = СтрЗаменить(ЗначениеТекста, Лишний.Поиск, Лишний.Замена);

		КонецЦикла;

	КонецЦикла;

	Возврат ЗначениеТекста;

КонецФункции






