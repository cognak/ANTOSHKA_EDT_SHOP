
///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

&НаСервере
Функция ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента) Экспорт
	
	Если НЕ СтруктураПараметров.НеизвестныеДанныеПО Тогда
		
		Если СтруктураПараметров.Действие = "ПроверкаКарт" Тогда
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				ИнформационнаяКарта = СтруктураПараметров.ЗначенияПоиска.ИнформационнаяКарта;
				Если ЗначениеЗаполнено(ИнформационнаяКарта) Тогда
					Если ИнформационнаяКарта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Регистрационная Тогда
						СтруктураПараметровКлиента.Вставить("ТекстПредупреждения", НСтр("ru = 'Данная форма не обрабатывает регистрационные карты'"));
					Иначе
						ОбработатьСчитываниеИнформационнойКарты(ИнформационнаяКарта);
					КонецЕсли;
					СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураПараметровКлиента;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекПовтИсп.ИспользоватьПодключаемоеОборудование();
	
	Параметры.Свойство("Магазин", Магазин);
	Параметры.Свойство("КартаИсточник", КартаИсточник);
	
	Если НЕ ЗначениеЗаполнено(Магазин) Тогда
		Магазин = ПараметрыСеанса.ТекущийМагазин;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "";

		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");

		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ЗаголовокИнформации = НСтр("ru = 'При подключении оборудования произошла ошибка:'");
			ТекстИнформации     = ОписаниеОшибки;
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокИнформации, ТекстИнформации);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;
			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекКод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
		ИначеЕсли ИмяСобытия ="TracksData" Тогда
			ТекКод = Параметр[0];
			ПодключаемоеОборудованиеРТКлиент.ВыбратьМагнитныйКод(ТекКод);
			Если ПустаяСтрока(ТекКод) Тогда
				Возврат;
			КонецЕсли;
			СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
КонецПроцедуры

&НаКлиенте
Процедура КартаИсточникПриИзменении(Элемент)
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура КартаПриемникПриИзменении(Элемент)
	
	ОбновитьФорму();
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаОчиститьКарты(Команда)
	
	КартаИсточник = ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка");
	КартаПриемник = ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка");
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбор(Команда)
	
	Если НЕ ЗначениеЗаполнено(КартаИсточник) ИЛИ НЕ ЗначениеЗаполнено(КартаПриемник) Тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(НСтр("ru = 'Заполните обе дисконтные карты.'"));
		Возврат;
	КонецЕсли;
	
	Если КартаИсточник = КартаПриемник Тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(НСтр("ru = 'Выбрана одинаковая карта!'"));
		Возврат;
	КонецЕсли;
	
	ЗаписатьДокументСервер();
	
	Закрыть(КартаПриемник);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет реквизиты выбранной картой
//
// Параметры
//  Карта, считанная карта
//
&НаСервере
Процедура ОбработатьСчитываниеИнформационнойКарты(Карта)

	Если НЕ ЗначениеЗаполнено(КартаИсточник) Тогда
		КартаИсточник = Карта;
	ИначеЕсли НЕ ЗначениеЗаполнено(КартаПриемник) Тогда
		Если НЕ Карта = КартаИсточник Тогда
			КартаПриемник = Карта;
		КонецЕсли;
	Иначе
		КартаИсточник = Карта;
		КартаПриемник = Справочники.ИнформационныеКарты.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьСчитываниеИнформационнойКарты()

// ПодключаемоеОборудование
&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) 
	
	СтруктураДействий = Новый Структура;
	
	СтруктураПараметровДействия = Новый Структура;
	СтруктураПараметровДействия.Вставить("РегистрацияНовойКарты", Ложь);
	
	СтруктураДействий.Вставить("ПроверкаКарт", СтруктураПараметровДействия);
	
	Возврат ПодключаемоеОборудованиеРТ.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

// Обработка магнитного или штрихового кода на клиенте
//
// Параметры
//  СтруктураПараметровКлиента - структура параметров
//
&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод)
	
	Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") 
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
		
		СтрокаСообщения = НСтр("ru = 'Данные по коду не найдены: %1%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекКод);
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(СтрокаСообщения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ТекстПредупреждения") Тогда
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(СтруктураПараметровКлиента.ТекстПредупреждения);
	КонецЕсли;
	
	ОбновитьФорму();
	
КонецПроцедуры // ОбработатьДанныеПоКодуКлиент()

//Процедура - обработчик команды "ПоискПоШтрихкоду"
//
&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) 
	
	СтруктураДействий = Новый Структура;
	
	СтруктураПараметровДействия = Новый Структура;
	СтруктураПараметровДействия.Вставить("РегистрацияНовойКарты", Ложь);
	
	СтруктураДействий.Вставить("ПроверкаКарт", СтруктураПараметровДействия);
	
	Возврат ПодключаемоеОборудованиеРТ.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьФорму()
	
	ДоступностьКнопкиОК = Ложь;
	
	Если НЕ ЗначениеЗаполнено(КартаИсточник) Тогда
		Элементы.ДекорацияЗаголовок.Заголовок = НСтр("ru = 'Считайте ""старую"" карту'");
		ЭтотОбъект.ТекущийЭлемент = Элементы.КартаИсточник;
	ИначеЕсли НЕ ЗначениеЗаполнено(КартаПриемник) Тогда
		Элементы.ДекорацияЗаголовок.Заголовок = НСтр("ru = 'Считайте ""новую"" карту'");
		ЭтотОбъект.ТекущийЭлемент = Элементы.КартаПриемник;
	Иначе
		Элементы.ДекорацияЗаголовок.Заголовок = НСтр("ru = 'Замена карты'");
		ЭтотОбъект.ТекущийЭлемент = Элементы.КомандаВыбор;
		
		ДоступностьКнопкиОК = Истина;
	КонецЕсли;
	
	Элементы.КомандаВыбор.Доступность = ДоступностьКнопкиОК;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДокументСервер()
	
	ДокументОбъект = Документы.ЗаменаДисконтныхКарт.СоздатьДокумент();
	ДокументОбъект.Магазин       = Магазин;
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	//ДокументОбъект.Дата          = ТекущаяДата();
	ДокументОбъект.Дата          = ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера();

	СтрокаДокумента = ДокументОбъект.КартыПокупателей.Добавить();
	СтрокаДокумента.КартаИсточник = КартаИсточник;
	СтрокаДокумента.КартаПриемник = КартаПриемник;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры





