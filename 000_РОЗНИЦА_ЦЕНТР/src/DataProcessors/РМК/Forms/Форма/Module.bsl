&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем МассивКассККМКлиент;

&НаКлиенте
Перем МассивОрганизацийКлиент;

&НаКлиенте	//	LNK 10.07.2018 08:55:18
Перем ЦветФонаКнопкиОЧ;
&НаКлиенте	//	LNK 10.07.2018 08:55:23
Перем ЦветТекстаКнопкиОЧ;

&НаКлиенте
Перем ДисплейПокупателяПараметры;

&НаКлиенте
Перем ЭтоПогашениеКупона;	// -HVOYA. 07.10.2016 22:14:57, Львова Е.А.

&НаКлиенте
Перем БуфферПоляВвода;

&НаКлиенте	//	LNK 29.05.2019 12:24:11
Перем КоличествоУпаковокДоИзменения;

&НаКлиенте	//	LNK 04.07.2021 06:52:09
Перем ДанныеСтрокиПередИзменением;

&НаКлиенте	//	LNK 27.09.2022 06:33:00
Перем СИ;

#Область ОбработчикиОсновныхСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда

		Возврат;

	КонецЕсли;

//	Внешнюю обработку всегда запускаем в отладочном режиме (то есть используем методы модуля обработки)
	ОтладочныйРежим = ТехническаяПоддержкаВызовСервера.ОтладочныйРежимРаботы() ИЛИ НЕ ПустаяСтрока(Объект.ИмяВнешнейОбработки);
	
	ЭтотОбъект().Журнал(ИмяФормы + ".ПриСозданииНаСервере");	//	LNK 02.08.2019 10:56:00

	ЗаписьЖурналаРегистрации("РМК." + ИмяФормы, УровеньЖурналаРегистрации.Информация
	,,, Объект.Версия + ":ПриСозданииНаСервере");

	Параметры.Свойство("ТестовыйРежимРМК", ТестовыйРежимРМК);

	Если НЕ ТестовыйРежимРМК Тогда

		Если НЕ ОбщегоНазначенияРТСервер.РазрешитьРаботуРМКВТекущемУзле(Истина) Тогда

			Отказ = Истина;
			Возврат;	//	LNK 27.11.2017 10:31:10

		КонецЕсли;

		ПодключаемоеОборудованиеРТ.ПолучитьДоступноеПодключаемоеОборудование(ИспользоватьПодключаемоеОборудование, ПодключаемоеОборудованиеЕстьТСД, ПодключаемоеОборудованиеЕстьВесы);
		
		ЭтоРабочееМестоOffLine = ПланыОбмена.ПоРабочемуМесту.ЭтоРабочееМесто();
		
		Параметры.Свойство("РабочееМесто", Объект.РабочееМесто);
		Параметры.Свойство("Магазин"     , Объект.Магазин);
		
		Если Объект.Магазин.Пустая() Тогда

			Объект.Магазин = ПараметрыСеанса.ТекущийМагазин;

		КонецЕсли;

		ДанныеМагазина = РозничныеПродажиСерверПовтИсп.РеквизитыМагазина(Объект.Магазин);
		ИнициализироватьУслугаБанкаДанные();	//	LNK 10.07.2018 08:13:51
		
		СкладПродажиПоУмолчанию = ДанныеМагазина.СкладПродажи;
		ФорматМагазина = ДанныеМагазина.ФорматМагазина;
		
		Если НЕ ЗначениеЗаполнено(Объект.РабочееМесто) Тогда
			Объект.РабочееМесто = МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента();
		КонецЕсли;
		
		ТестовыйМагазин = (ДанныеМагазина.НомерМагазина = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику().НомерТестовогоМагазина);
		Объект.ЦенаВключаетНДС = ДанныеМагазина.ЦенаВключаетНДС;	//	LNK 26.04.2017 15:46:44

		ПолучитьТаблицуКассПоРабочемуМесту();

		Если ТаблицаКассККМОрганизаций.Количество() = 0 Тогда

			ОтказПриСоздании = Истина;
			ПараметрыИнформацииПриСоздании = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
			ПараметрыИнформацииПриСоздании.ЗаголовокИнформации	= "Помилка визначення робочого місця";
			ПараметрыИнформацииПриСоздании.ТекстИнформации		= "Не вдалося визначити робоче місце.
																|Зверніться до адміністратора системи.";

			Возврат;

		КонецЕсли;

		Если Параметры.Свойство("мИмяКомпьютера") Тогда

			мИмяКомпьютера           = Параметры.мИмяКомпьютера;
			НастройкаРМК             = ПродажиСервер.ТекущаяНастройкаРМКСервер(мИмяКомпьютера);
			ИспользоватьНастройкуРМК = ЗначениеЗаполнено(НастройкаРМК);
			
			ПараметрыИнформацииПриСоздании = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
			ЗаполнитьНаборПравИНастроек();

		Иначе

			ЗаполнитьНаборПравИНастроек();
			УстановитьДоступностьЭлементовФормы();

		КонецЕсли;
		
		Пользователь = ПользовательСУчетомИзмененныхПрав();
		
		ПродавецПоУмолчанию = ЗначениеНастроекПовтИсп.ПолучитьПродавцаПользователяПоУмолчанию(Пользователь);
		Объект.Продавец     = ПродавецПоУмолчанию;
		
		ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
		
		СоздатьНовыйНабор();
		
		Элементы.ИзменитьПодакцизныеТоварыДляКоммерческогоИспользования.Пометка = Объект.ПодакцизныеТоварыДляКоммерческогоИспользования;

		//+HVOYA Mykhailo
		РежимПоискаШтрихкода = Истина;
		Множитель = 1;
		//-HVOYA Mykhailo
		
		
		//+HVOYA Mykhailo
	Иначе  // ЕСЛИ ТЕСТОВЫЙ РЕЖИМ

		Объект.Магазин = ПараметрыСеанса.ТекущийМагазин;
		ДанныеМагазина = РозничныеПродажиСерверПовтИсп.РеквизитыМагазина(Объект.Магазин);
		ИнициализироватьУслугаБанкаДанные();	//	LNK 10.07.2018 08:13:51

		ЗаполнитьНаборПравИНастроек();	//	LNK 25.10.2017 10:06:34

		СоздатьНовыйНабор();
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа");
		Объект.ЦенаВключаетНДС = ДанныеМагазина.ЦенаВключаетНДС;
		РежимПоискаШтрихкода = Истина;
		Множитель = 1;

	КонецЕсли;
	//-HVOYA Mykhailo
	
	ВидИнтернетЦены = ДанныеМагазина.ВидЦенИнтернет;
	УстановитьНазначениеКассыККМ();	//	LNK 19.01.2018 11:27:43
	
	// + HVOYA 30.10.2016 17:17:15, Латышев А.А.
	ЭтоПогашениеКупона = Истина;
	// - HVOYA 30.10.2016 17:17:15, Латышев А.А. 
	
	// + HVOYA 17.04.2017 18:51:29, Латышев А.А.
	СертификатКакСкидка = ДанныеМагазина.ПодарочныйСертификатКакСкидка;	//	LNK 26.04.2017 15:52:35
	// - HVOYA 17.04.2017 18:51:29, Латышев А.А. 

	ДанныеЗаказа = ДанныеЗаказаИнициализировать(НаборПравИНастроек);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	СИ = Новый СистемнаяИнформация;	//	LNK 27.09.2022 06:33:45

	РозничныеПродажиКлиент.ПротоколОС(ИмяФормы + ?(ТестовыйРежимРМК, "(ТЕСТ)", ""));

	ЦветФонаКнопкиОЧ   = Элементы.КомандаОплатаЧастями.ЦветФона;
	ЦветТекстаКнопкиОЧ = Элементы.КомандаОплатаЧастями.ЦветТекста;

	ПодключитьОбработчикОжидания("Подключаемый_ДоступностьMicrosoftDynamics", 10, Ложь);

	Если НЕ ТестовыйРежимРМК Тогда
		
		// Вставить содержимое обработчика.
		Если ОтказПриСоздании Тогда

			Отказ = Истина;
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформацииПриСоздании);
			Возврат;

		КонецЕсли;
		
		СтруктураПараметров = СтруктураМассивовКассККМИОрганизаций();
		
		МассивКассККМКлиент     = СтруктураПараметров.КассыККМ;
		МассивОрганизацийКлиент = СтруктураПараметров.Организации;
		
		УстановитьЗаголовок();
		
		Если НЕ ЗначениеЗаполнено(мИмяКомпьютера) Тогда

			#Если Не ВебКлиент Тогда
			мИмяКомпьютера = ИмяКомпьютера();
			#КонецЕсли

			НастройкаРМК = ПродажиСервер.ТекущаяНастройкаРМКСервер(мИмяКомпьютера);
			ИспользоватьНастройкуРМК = ЗначениеЗаполнено(НастройкаРМК);
			ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();

			Если Отказ Тогда

				ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

			КонецЕсли;

		КонецЕсли;
		
	//	ПодключаемоеОборудование
		Если ИспользоватьПодключаемоеОборудование
			И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда

			ОписаниеОшибки = "";
			
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
			ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
			ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
			
			Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
				
				ЗаголовокИнформации = "При підключенні обладнання сталася помилка:";
				ТекстИнформации     = ОписаниеОшибки;
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокИнформации, ТекстИнформации);
				
			КонецЕсли;

		КонецЕсли;
		
		ДисплейПокупателяПараметры  = Новый Структура(
			"ТоварНаименование, ТоварЦена, ТоварКоличество, ТоварСумма, ТоварСкидка, СуммаВсего, СуммаСкидки, Сдача, Оплата"
		);
		
		ПодключитьДисплейПокупателяФР();
		
	//	Конец ПодключаемоеОборудование
		
		ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");

	Иначе

		Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда

			Объект.Магазин = ОткрытьФормуВыбораСправочника("Магазины"); 

		КонецЕсли; 

		Если ЗначениеЗаполнено(Объект.Магазин) Тогда
			// все хорошо, открываем тестовый рмк
			ДанныеМагазина = РозничныеПродажиСерверПовтИсп.РеквизитыМагазина(Объект.Магазин);	
			ИнициализироватьУслугаБанкаДанные();	//	LNK 10.07.2018 08:13:51
			Объект.ЦенаВключаетНДС = ДанныеМагазина.ЦенаВключаетНДС;  		
			// пытаемся найти рабочее место
			Попытка
				РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
			Исключение
				ЗафиксироватьОшибку(ОписаниеОшибки(), "ПриОткрытии");	//	LNK 04.09.2018 14:16:54
			КонецПопытки;

			УстановитьЗаголовок();
			УстановитьТекущийЭлемент();	//	LNK 13.09.2017 08:17:04

		Иначе

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Магазин не вказано", "Необхідно визначити магазин");
			Возврат;

		КонецЕсли; 

	КонецЕсли;

	// + HVOYA 30.10.2016 17:21:05, Латышев А.А.
	ЭтоПогашениеКупона = Истина;
	// - HVOYA 30.10.2016 17:21:05, Латышев А.А. 

	ОбновитьФорму();	//	LNK 09.07.2018 13:37:55

	УстановитьОформлениеЭлементов();	//	LNK 07.08.2019 14:26:43

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	#Если _ Тогда
	СИ = Новый СистемнаяИнформация;
	#КонецЕсли

	СистемаWindows = ?(СИ = Неопределено	//	LNK 27.09.2022 06:46:28
		, Истина
		, (СИ.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СИ.ТипПлатформы = ТипПлатформы.Windows_x86_64)
	);
	
	РазрешеноЗакрытие = ?(ТестовыйРежимРМК, Истина, СанкционированноеЗакрытие ИЛИ НЕ СистемаWindows);

	Если НЕ РазрешеноЗакрытие Тогда

		Отказ = Истина;
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("У дії відмовлено!", "Скористуйтеся клавішами Alt+F4");

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	Если НЕ ТестовыйРежимРМК Тогда

		ВывестиИнформациюНаДисплейПокупателя("Сервис"); 
		// ПодключаемоеОборудование
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");

		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);

		ОтключитьДисплейПокупателяФР();
		// Конец ПодключаемоеОборудование

	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда

		Если ЗаказПокупателяОплачен(Объект.ЗаказПокупателя) Тогда

			Возврат;

		КонецЕсли; 

		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда	//+HVOYA Mykhailo

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
				"Активний режим «ЧЕК ПОВЕРНЕННЯ»!"
				, "Для виходу з режиму «ЧЕК ПОВЕРНЕННЯ» необхідно натиснути [F6]"
			);
			УстановитьТекущийЭлемент(Истина);	//	LNK 16.09.2020 06:54:54
		    Возврат;

		КонецЕсли; 

		ОтменитьУслугуБанка();	//	LNK 10.07.2018 15:16:19

		Если ИмяСобытия = "ScanData" Тогда

			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;
			//+HVOYA Mykhailo : добавляем информацию по количеству
			// ищем штрихкод на форме

			МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("Штрихкод", ТекКод));

			Если ЛОЖЬ И МассивСтрок.Количество() > 0 Тогда

				ТекущаяСтрока = МассивСтрок[0];
				ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + Множитель;
				ТекущаяСтрока.Количество         = ТекущаяСтрока.Количество + Множитель;
				ТекущаяСтрока.Сумма              = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
				ТекущаяСтрока.СуммаВсего         = ТекущаяСтрока.Сумма;

				Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();

				ОбновитьФорму(Истина);
				Множитель = 1;

			Иначе

				// делаем как раньше
				СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекКод); // сразу передается на сервер
				ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод, Множитель);
				Множитель = 1;

			КонецЕсли; 
			//-HVOYA Mykhailo

		ИначеЕсли ИмяСобытия = "TracksData" Тогда

			ТекКод = Параметр[0];
			ПодключаемоеОборудованиеРТКлиент.ВыбратьМагнитныйКод(ТекКод);

			Если ПустаяСтрока(ТекКод) Тогда
				Возврат;
			КонецЕсли;

			СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);

		КонецЕсли;

	ИначеЕсли ИмяСобытия = "ИзмененоРабочееМестоТекущегоСеанса" Тогда

		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	// + HVOYA 20.07.2017 12:43:07, Латышев А.А.
	ИначеЕсли Источник = "ЛистЖеланий" тогда
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			Для каждого Эл Из Параметр Цикл
				Объект.Продавец = Эл.Продавец;
				ДобавитьНоменклатуруВТабЧасть(Эл.Номенклатура, ,,Эл.Количество,Ложь, ,,Эл.ЛистЖеланий);
			КонецЦикла; 
		КонецЕсли; 
	// - HVOYA 20.07.2017 12:43:07, Латышев А.А. 
	КонецЕсли;

	// Конец ПодключаемоеОборудование
КонецПроцедуры

#КонецОбласти

&НаСервере	//	LNK 16.07.2019 11:09:02
Функция ЭтотОбъект(ТекущийОбъект = Неопределено) 

	Если ТекущийОбъект = Неопределено Тогда

		Возврат РеквизитФормыВЗначение("Объект");

	КонецЕсли;

	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");

	Возврат Неопределено;

КонецФункции

&НаСервере	//	LNK 19.01.2018 11:14:46
Процедура УстановитьНазначениеКассыККМ()

	Если ТаблицаКассККМОрганизаций.Количество() = 0 Тогда

			Объект.НазначениеКассыККМ = Перечисления.НазначенияКассККМ.БезОграничений;

	Иначе	Объект.НазначениеКассыККМ = РозничныеПродажиСервер.ПолучитьНазначениеКассыККМ(ТаблицаКассККМОрганизаций[0].КассаККМ);

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИспользоватьMicrosoftDynamics(НаборПравИНастроек)

	Возврат НаборПравИНастроек.ПродажиАктивированы И НаборПравИНастроек.РесурсMicrosoftDynamicsДоступен;

КонецФункции

#Область ПрограммныйИнтерфейс

// Процедура обрабатывает изменение номенклатуры в ТЧ товары. Для обращений извне.
//
&НаКлиенте
Процедура ТоварыПриИзмененииНоменклатуры(СтрокаТабличнойЧасти, ПерейтиНаКоличество = Ложь, ЗапретПродажПроверен = Ложь, ЦенуНеУстанавливать = Ложь) Экспорт
	
//	LNK 02.06.2017 15:09:43
	Если НЕ ЗапретПродажПроверен Тогда

		ТекстЗапретаПродаж = "";
		Если НельзяПродавать(СтрокаТабличнойЧасти.Номенклатура, ТекстЗапретаПродаж) Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Продаж заборонено", ТекстЗапретаПродаж);
			СтрокаТабличнойЧасти.Номенклатура = ПоследняяРедактируемаяНоменклатура;
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("КодНоменклатуры", "КодНоменклатуры");
	СтруктураРеквизитов.Вставить("ТипНоменклатуры", "ТипНоменклатуры");
	СтруктураДействий.Вставить("ЗаполнитьРеквизитыПоНоменклатуре", СтруктураРеквизитов);

	СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу");
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", СтрокаТабличнойЧасти.Упаковка);
	
	Если СтрокаТабличнойЧасти.КоличествоУпаковок = 0 Тогда
		СтрокаТабличнойЧасти.КоличествоУпаковок = 1;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмерения");
	
	СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", Новый Структура("Магазин, РабочееМесто, ЗаполнитьДляУслуги", Объект.Магазин, Объект.РабочееМесто, Истина));
	СтруктураДействий.Вставить("ЗаполнитьОрганизациюПродажи", Новый Структура("Магазин", Объект.Магазин));
	
	СтруктураПараметровСтавкиНДС = Новый Структура;
	СтруктураПараметровСтавкиНДС.Вставить("Дата", Объект.Дата);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
	Иначе
		СтруктураПараметровСтавкиНДС.Вставить("ОрганизацияПоСкладу");
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
	
	УчетХарактеристик = Ложь;
	
	ВыполнитьУстановкуЦены = (ПерейтиНаКоличество ИЛИ (НЕ УчетХарактеристик)) И НЕ ЦенуНеУстанавливать = Истина;
	
	Если ВыполнитьУстановкуЦены Тогда

		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина, Истина));

		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда

			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано"  , Новый Структура("Очищать", Истина));
		//	LNK 25.06.2018 10:26:51
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));

		Иначе

			СтруктураДействий.Вставить("ПересчитатьСуммуВозвратСУчетомОснования", Новый Структура("Основание", Объект.ЧекККМПродажа));

		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	СтрокаТабличнойЧасти.Продавец = Объект.Продавец;
	
	СброситьФлагСкидкиРассчитаны();
	
	Если ВыполнитьУстановкуЦены Тогда

		ПересчиталиЦену = Ложь;
		
		// +HVOYA. 24.08.2016 0:24:38, Львова Е.А.	
		Если СтрокаТабличнойЧасти.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.СкидочныйКупон") Тогда
			СтрокаТабличнойЧасти.Цена = 0.01;
			ПересчиталиЦену = Истина;
		КонецЕсли;

		Если НЕ ПолучитьРазрешениеИзмененияЦены(СтрокаТабличнойЧасти.Номенклатура) тогда	// -HVOYA. 24.08.2016 1:03:15, Львова Е.А.

			Если СтрокаТабличнойЧасти.Цена = 0 И СтрокаТабличнойЧасти.Номенклатура <> Неопределено Тогда	

				ТекстСообщения = "На товар %1 %2 не призначено ціни!";

				ХарактеристикаПредставление = "";
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Характеристика) Тогда
					
					ХарактеристикаПредставление = "(" + СтрокаТабличнойЧасти.Характеристика + ")";
					
				КонецЕсли;

				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
										СтрокаТабличнойЧасти.Номенклатура,
										ХарактеристикаПредставление);

				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Ціну не встановлено", ТекстСообщения)
				
			КонецЕсли;
		
			Если СтрокаТабличнойЧасти.Цена = 0 Тогда
				
				Объект.Товары.Удалить(СтрокаТабличнойЧасти);
				СтрокаТабличнойЧасти = Неопределено;
				ОбновитьФорму();
				
				Возврат;
			КонецЕсли;
		КонецЕсли;

		Если ПересчиталиЦену Тогда

			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано"  , Новый Структура("Очищать", Истина));

			ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
			
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

		КонецЕсли;
		
		Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
			Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
			
			ТекущаяСтрокаИдентификатор = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
			
			ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
			ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
			
		КонецЕсли;
	КонецЕсли;
	
	Если УчетХарактеристик Тогда
		ТекущийЭлемент = Элементы.Товары;
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыХарактеристика;
	Иначе

		//+HVOYA Mykhailo
		Если ПерейтиНаКоличество Тогда
			ТекущийЭлемент = Элементы.Товары;
			Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок;
		Иначе
			УстановитьТекущийЭлемент();	//	LNK 13.09.2017 08:17:04
		КонецЕсли;
		//-HVOYA Mykhailo
	КонецЕсли;
	
	Элементы.Товары.ТекущийЭлемент = Неопределено;
	
КонецПроцедуры

// Процедура обрабатывает изменение характеристики номенклатуры в ТЧ товары. Для обращений извне.
//
&НаКлиенте
Процедура ТоварыПриИзмененииХарактеристикиНоменклатуры(СтрокаТабличнойЧасти) Экспорт
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда

		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина, Истина));
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);

	КонецЕсли;
	
	ПересчиталиЦену = Ложь;
	
	Если СтрокаТабличнойЧасти.Цена = 0
		И СтрокаТабличнойЧасти.Номенклатура <> Неопределено Тогда
			
			ТекстСообщения = "На товар %1 %2 не визначена ціна!";
			
			ХарактеристикаПредставление = "";
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Характеристика) Тогда
				
				ХарактеристикаПредставление = "(" + СтрокаТабличнойЧасти.Характеристика + ")";
				
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
									СтрокаТабличнойЧасти.Номенклатура,
									ХарактеристикаПредставление);
			
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Ціну не встановлено", ТекстСообщения)

	КонецЕсли;
	
	СброситьФлагСкидкиРассчитаны();
	
	Если СтрокаТабличнойЧасти.Цена = 0 Тогда
		Объект.Товары.Удалить(СтрокаТабличнойЧасти);
		СтрокаТабличнойЧасти = Неопределено;
		ОбновитьФорму();
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	Если СтрокаТабличнойЧасти.КоличествоУпаковок = 0 Тогда
		СтрокаТабличнойЧасти.КоличествоУпаковок = 1;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Продавец = Объект.Продавец;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано"  , Новый Структура("Очищать", Истина));
		
		СброситьФлагСкидкиРассчитаны();
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСуммуВозвратСУчетомОснования", Новый Структура("Основание", Объект.ЧекККМПродажа));
	КонецЕсли;
	
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ЗаполнитьОстаткиСервер();
	
	ОбновитьФорму();
	
	ОбновлениеДисплеяПокупателя("ИзмененияЦены");
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьТекущийЭлемент_ТоварыКоличествоУпаковок", 0.1, Истина);
	
КонецПроцедуры // ТоварыПриИзмененииХарактеристикиНоменклатуры()

// Процедура обрабатывает изменение количество в ТЧ товары. Для обращений извне.
//
&НаКлиенте
Процедура ТоварыПриИзмененииКоличества(СтрокаТабличнойЧасти, БылоКоличествоУпаковок = 0) Экспорт
	
	СтруктураДействий = Новый Структура;

	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда

		СброситьФлагСкидкиРассчитаны();

		Если ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя, "ЗаказПокупателя") Тогда	//	LNK 07.12.2021 04:49:32

			ОтменитьВсеСкидкиДокумента(Истина);

		КонецЕсли;

	Иначе	//	LNK 17.07.2019 13:55:06

		БонусныеБаллыКлиент.ТоварыПриОкончанииРедактирования(СтрокаТабличнойЧасти, ДанныеСтрокиПередИзменением, Объект,, ДанныеПродажи);	//	LNK 04.07.2021 07:48:28

		СтруктураДействий.ПересчитатьСуммуСУчетомАвтоматическойСкидки.Очищать    = Ложь;	//	сохраняем процент автоматической скидки
		СтруктураДействий.ПересчитатьСуммуСУчетомБонусныхБалловНачислено.Очищать = Ложь;	//	LNK 26.03.2021 09:27:14
		СтруктураДействий.ПересчитатьСуммуСУчетомБонусныхБалловСписано.Очищать   = Ложь;	//	LNK 26.03.2021 09:27:14

	КонецЕсли;

	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда

		ТекущаяСтрокаИдентификатор = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	СброситьФлагСкидкиРассчитаны();
	
	ОбновлениеДисплеяПокупателя("ИзмененияКолва")
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента) Экспорт
	
	Если НЕ СтруктураПараметров.НеизвестныеДанныеПО Тогда
		
		Если СтруктураПараметров.Действие = "ПроверкаВесовыхТоваров" Тогда
			
			СтруктураПараметровКлиента.Вставить("ДобавитьТоварнуюПозицию", СтруктураПараметров.ЗначенияПоиска[0]);
			СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
			
		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаТоваров" Тогда
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				
				//+HVOYA Mykhailo
				// проверяем есть ли одна из номенклатур уже в чеке
				// если есть - удаляем
				СтруктураНом = Неопределено;
				Для каждого Стр из СтруктураПараметров.ЗначенияПоиска Цикл
					Если Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура",Стр.Номенклатура)).Количество() > 0 Тогда
						// запоминаем эту номенклатуру
						СтруктураНом = Стр;
					КонецЕсли;
				КонецЦикла;
				Если НЕ СтруктураНом = Неопределено Тогда
					СтруктураПараметров.ЗначенияПоиска.Очистить();
					СтруктураПараметров.ЗначенияПоиска.Добавить(СтруктураНом);
				КонецЕсли;
				//-HVOYA Mykhailo
				
				Если СтруктураПараметров.ЗначенияПоиска.Количество() = 1 Тогда
					
					ВходящиеПараметры = СтруктураПараметров.ЗначенияПоиска[0];
					Если СтруктураПараметров.Свойство("ИспользоватьКоличество") Тогда
						ВходящиеПараметры.Вставить("Количество", СтруктураПараметров.ИспользоватьКоличество);
					КонецЕсли;
					СтруктураПараметровКлиента.Вставить("ДобавитьТоварнуюПозицию", СтруктураПараметров.ЗначенияПоиска[0]);
					
				Иначе
					
					ТаблицаТоваров = Новый ТаблицаЗначений;
					ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
					ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
					ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
					
					Для каждого ЗначениеПоиска Из СтруктураПараметров.ЗначенияПоиска Цикл
						ТекущаяСтрока = ТаблицаТоваров.Добавить();
						ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначениеПоиска);
					КонецЦикла;
					
					СтруктураПараметровКлиента.Вставить("ВыборТоваров", ПоместитьВоВременноеХранилище(ТаблицаТоваров));
					
				КонецЕсли;
				
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				
			КонецЕсли;

		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаПодарочныхСертификатовПродажа" Тогда	//	LNK 17.02.2020 14:07:30

			СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
			СтруктураПараметровКлиента.Вставить("ДобавитьПодарочныйСертификатПродажа", СтруктураПараметров.ЗначенияПоиска);

		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаСерийныхНомеров" Тогда
			
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				
				ДанныеСерийногоНомера = ЗапасыПовтИсп.ДанныеСерийногоНомера(СтруктураПараметров.ЗначенияПоиска[0]);

				СтруктураСерийногоНомера = Новый Структура;
				СтруктураСерийногоНомера.Вставить("Номенклатура"       , ДанныеСерийногоНомера.Номенклатура);
				СтруктураСерийногоНомера.Вставить("ТипНоменклатуры"    , ДанныеСерийногоНомера.ТипНоменклатуры);
				СтруктураСерийногоНомера.Вставить("Характеристика"     , Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				СтруктураСерийногоНомера.Вставить("Упаковка"           , Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
				СтруктураСерийногоНомера.Вставить("Количество"         , 1);
				СтруктураСерийногоНомера.Вставить("ПерейтиНаКоличество", Истина);
				СтруктураСерийногоНомера.Вставить("СерийныйНомер"      , ДанныеСерийногоНомера.СерийныйНомер);
				СтруктураПараметровКлиента.Вставить("ДобавитьСерийныеНомера", СтруктураСерийногоНомера);
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");

				ЭтоПогашениеКупона = Истина;

			КонецЕсли;
		
		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаКарт" Тогда

			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда

				РеквизитыКарты = СтруктураПараметров.ЗначенияПоиска[0];

				// + HVOYA 30.09.2016 15:43:11, Латышев А.А.
				Если РеквизитыКарты.ПометкаУдаления Тогда

					// +HVOYA. 04.01.2017 11:35:51, Львова Е.А.
                    СтруктураПараметровКлиента.Вставить("КартаБлокирована", СтрЗаменить("Картка %КодКарты% недійсна!", "%КодКарты%", РеквизитыКарты.ИнформационнаяКарта));
                    СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
                    // -HVOYA. 04.01.2017 11:35:54, Львова Е.А.

					ОчиститьРеквизитыФормы();
					// +HVOYA. 04.01.2017 11:41:26, Львова Е.А.
                    //Возврат Новый Структура() ;
                    // -HVOYA. 04.01.2017 11:41:32, Львова Е.А.

				КонецЕсли; 
				// - HVOYA 30.09.2016 15:43:11, Латышев А.А. 

				Если РеквизитыКарты.ТипКарты = Перечисления.ТипыИнформационныхКарт.Регистрационная Тогда

					Если ТипЗнч(РеквизитыКарты.ВладелецКарты) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
						//+HVOYA YURA G. 30.09.2016 14:48:09
						//Объект.Продавец = ВладелецКарты;
						Если НЕ ЗначениеЗаполнено(Объект.Продавец) И Объект.Товары.Количество()= 0 Тогда

								Объект.Продавец = РеквизитыКарты.ВладелецКарты;

						Иначе	Объект.ПродавецТекущий = РеквизитыКарты.ВладелецКарты;

						КонецЕсли;
						//-HVOYA YURA G. 30.09.2016 14:48:11

					Иначе	Объект.Продавец = Справочники.ФизическиеЛица.ПустаяСсылка();

					КонецЕсли;

					СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");

                Иначе
                    // +HVOYA. 04.01.2017 12:15:59, Львова Е.А.
					//Если ЗначениеЗаполнено(ИнформационнаяКарта) Тогда
					Если ЗначениеЗаполнено(РеквизитыКарты.ИнформационнаяКарта) И НЕ РеквизитыКарты.ПометкаУдаления	Тогда

                    // +HVOYA. 04.01.2017 12:16:06, Львова Е.А.
						Объект.ДисконтнаяКарта = РеквизитыКарты.ИнформационнаяКарта;
						Объект.НомерТелефона   = "";
						Модифицированность = Истина;
						ПриИзмененииДисконтнаяКартаСервер(РеквизитыКарты);
						СтруктураПараметровКлиента.Вставить("ПровестиОпрос");
						СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		ИначеЕсли СтруктураПараметров.Действие = "РегистрацияНовойКарты" Тогда
			
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				
				Если СтруктураПараметров.ЗначенияПоиска.Количество() > 1 Тогда
					
					ТаблицаШаблонов = Новый ТаблицаЗначений;
					ТаблицаШаблонов.Колонки.Добавить("ТипШтрихкода");
					ТаблицаШаблонов.Колонки.Добавить("КодКарты");
					
					Для каждого КлючИЗначение Из СтруктураПараметров.ЗначенияПоиска[0] Цикл
						ТаблицаШаблонов.Колонки.Добавить(КлючИЗначение.Ключ);
					КонецЦикла;
					
					Для каждого ЗначениеПоиска Из СтруктураПараметров.ЗначенияПоиска Цикл
						ТекущаяСтрока = ТаблицаШаблонов.Добавить();
						ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначениеПоиска);
					КонецЦикла;
					ТаблицаШаблонов.ЗаполнитьЗначения(СтруктураПараметров.ТипШтрихкода, "ТипШтрихкода");
					ТаблицаШаблонов.ЗаполнитьЗначения(СтруктураПараметров.КодКарты, "КодКарты");
					СтруктураПараметровКлиента.Вставить("РегистрацияНовойКартыВыборШаблона", ПоместитьВоВременноеХранилище(ТаблицаШаблонов, Новый УникальныйИдентификатор()));
					
					СтруктураПараметровКлиента.Вставить("ТекстВопросаНовойКарты"
						, СтрЗаменить("Створити нову інформаційну картку? Карта %КодКарты%.", "%КодКарты%", СтруктураПараметров.КодКарты)
					);

				Иначе

					СтруктураПараметровКлиентаРегистрацииНовойКарты = СтруктураПараметров.ЗначенияПоиска[0];
					СтруктураПараметровКлиентаРегистрацииНовойКарты.Вставить("ТипШтрихкода", СтруктураПараметров.ТипШтрихкода);
					СтруктураПараметровКлиентаРегистрацииНовойКарты.Вставить("КодКарты"    , СтруктураПараметров.КодКарты);
					
					СтруктураПараметровКлиента.Вставить("РегистрацияНовойКарты", СтруктураПараметровКлиентаРегистрацииНовойКарты);
					
					ТекстВопроса = СтрЗаменить("Створити нову інформаційну картку? Карта %КодКарты%%НаименованиеШаблона%", "%КодКарты%", СтруктураПараметров.КодКарты);

					Если СтруктураПараметровКлиентаРегистрацииНовойКарты.Свойство("НаименованиеШаблона") Тогда
						Если ПустаяСтрока(СтруктураПараметровКлиентаРегистрацииНовойКарты.НаименованиеШаблона) Тогда
							ТекстВопроса = СтрЗаменить(ТекстВопроса, "%НаименованиеШаблона%", ".");
						Иначе
							ТекстВопроса = СтрЗаменить(ТекстВопроса, "%НаименованиеШаблона%", " (" + СтруктураПараметровКлиентаРегистрацииНовойКарты.НаименованиеШаблона + ").");
						КонецЕсли;
					КонецЕсли;
					
					СтруктураПараметровКлиента.Вставить("ТекстВопросаНовойКарты", ТекстВопроса);

				КонецЕсли;
				
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат СтруктураПараметровКлиента;
	
КонецФункции

// Процедура установки значения экспортных переменных модуля приложения
//
// Параметры
//  Имя - строка, содержит имя переменной целиком
// 	Значение - значение переменной
//
&НаСервере
Процедура глЗначениеПеременнойУстановитьСервер(Имя, Значение, ОбновлятьВоВсехКэшах = Ложь) Экспорт
	
	глЗначениеПеременнойУстановить(Имя, Значение, ОбновлятьВоВсехКэшах = Ложь)
	
КонецПроцедуры
	
#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

// Таблица Товары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ТоварыСтатусУказанияСерий Тогда
		
		ВвестиСерии();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	Если ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя, "ЗаказПокупателя") И ТекущийЭлемент = Элементы.Товары Тогда	//	LNK 06.08.2018 10:22:28

		Если НЕ Элементы.Товары.ТекущиеДанные = Неопределено Тогда

			ПоискШК = РозничныеПродажиКлиентПовтИсп.ПолучитьШтриховойКодТовара(
				Элементы.Товары.ТекущиеДанные.Номенклатура,
				Элементы.Товары.ТекущиеДанные.Упаковка);

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Отказ = Истина;

	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий, Копирование);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	Если НЕ ТекущиеДанные = Неопределено Тогда

		Если НЕ НаборПравИНастроек.РазрешитьРедактироватьНабранныйЧек
			ИЛИ ТипЗнч(ТекущиеДанные.Номенклатура) = Тип("СправочникСсылка.СерийныеНомера")
			ИЛИ ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя, "СчетНаОплатуПокупателю") Тогда

			Отказ = Истина;

		КонецЕсли;

		Если НЕ Отказ Тогда

			КоличествоУпаковокДоИзменения = ТекущиеДанные.КоличествоУпаковок;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ДанныеСтрокиПередИзменением = ОбработкаТабличнойЧастиТоварыКлиент.СкопироватьВСтруктуруЭлементКоллекции(ТекущаяСтрока, Объект.Товары);
	
	Если Копирование Тогда
		
		ТекущаяСтрока.КлючСвязиСерийныхНомеров    = 0;
		ТекущаяСтрока.СуммаАвтоматическойСкидки   = 0;
		ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;

		ТекущаяСтрока.КлючСвязиБонусныхБаллов		= 0;
		ТекущаяСтрока.СуммаБонусныхБалловНачислено	= 0;
		ТекущаяСтрока.СуммаБонусныхБалловСписано	= 0;
		
	КонецЕсли;
	
	Если НоваяСтрока Тогда

			ТекущаяСтрока.Продавец = Объект.Продавец;

	Иначе	ПоследняяРедактируемаяНоменклатура = ТекущаяСтрока.Номенклатура

	КонецЕсли;

	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда	//	LNK 06.06.2023 05:29:34

		Если ЗаказПокупателяОплачен(Объект.ЗаказПокупателя) Тогда
			Отказ = Истина;
		КонецЕсли; 

	КонецЕсли;

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	ТоварыПередУдалениемКлиент(Отказ, СтрокаТабличнойЧасти.КоличествоУпаковок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	БонусныеБаллыКлиент.ТоварыПриОкончанииРедактирования(ТекущиеДанные, ДанныеСтрокиПередИзменением, Объект, ОтменаРедактирования, ДанныеПродажи);	//	LNK 04.07.2021 07:48:28

	СброситьФлагСкидкиРассчитаны();
	КоличествоУпаковокДоИзменения = 0;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбновитьФорму();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	СброситьФлагСкидкиРассчитаны();
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	СброситьФлагСкидкиРассчитаны();
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
	
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			
			ОбработкаТабличнойЧастиТоварыКлиент.ОчиститьСерийныеНомера(ТекущаяСтрока, Объект);
			
			ТоварыПриИзмененииНоменклатуры(ТекущаяСтрока);
			
			ДобавленСерийныйНомер = ДобавитьСерийныйНомер(ТекущаяСтрока);
			
			Если НЕ ТекущаяСтрока = Неопределено Тогда
				ПоследняяРедактируемаяНоменклатура = ТекущаяСтрока.Номенклатура;
			КонецЕсли;
		Иначе
			
			Если НаборПравИНастроек.РазрешитьСторнированиеТовара 
			 ИЛИ ПоследняяРедактируемаяНоменклатура = Неопределено Тогда
				ТоварыНоменклатураОчистка(Неопределено, Истина);
				
				Возврат;
			Иначе
				ТекущаяСтрока.Номенклатура = ПоследняяРедактируемаяНоменклатура;
				
				ОбработкаТабличнойЧастиТоварыКлиент.ОчиститьСерийныеНомера(ТекущаяСтрока, Объект);
				
				ТоварыПриИзмененииНоменклатуры(ТекущаяСтрока);
				
				ДобавленСерийныйНомер = ДобавитьСерийныйНомер(ТекущаяСтрока);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбранноеЗначение = ОткрытьФормуВыбораСправочника("Номенклатура");
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда

		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		СтрокаТабличнойЧасти.Номенклатура = ВыбранноеЗначение;
	
		ТоварыПриИзмененииНоменклатуры(СтрокаТабличнойЧасти);
		
		Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда

			ПоследняяРедактируемаяНоменклатура = СтрокаТабличнойЧасти.Номенклатура;

		КонецЕсли;

	КонецЕсли 

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Отказ = Ложь;
	
	ТоварыПередУдалениемКлиент(Отказ, СтрокаТабличнойЧасти.КоличествоУпаковок);
	
	Если СтрокаТабличнойЧасти = Неопределено ИЛИ Отказ Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Объект.Товары.Удалить(СтрокаТабличнойЧасти);
	
	ОбновитьФорму();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТоварыПриИзмененииХарактеристикиНоменклатуры(ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТоварыПриИзмененииКоличества(ТекущиеДанные, КоличествоУпаковокДоИзменения);

	Если КоличествоУпаковокДоИзменения > 0 И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда

		Если КоличествоУпаковокДоИзменения > ТекущиеДанные.КоличествоУпаковок Тогда

			ЗафиксироватьАннуляцию(ТекущиеДанные.ПолучитьИдентификатор(), КоличествоУпаковокДоИзменения - ТекущиеДанные.КоличествоУпаковок, ИмяКомпьютера());

		КонецЕсли;

	КонецЕсли;

	ОтменитьУслугуБанка();	//	LNK 10.07.2018 15:16:19
	УстановитьОформлениеЭлементов();	//	LNK 27.09.2019 12:37:19

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано"  , Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	СброситьФлагСкидкиРассчитаны();
	
	ОбновитьФорму();
	ОбновлениеДисплеяПокупателя("ИзмененияЦены")

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СброситьФлагСкидкиРассчитаны();
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	ОбновитьФорму();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтатусУказанияСерийНажатие(Элемент, СтандартнаяОбработка)
	
	ВвестиСерии()
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КартинкаБыстрыеТоварыШаблонНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяЭлемента = Элемент.Имя;
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "Программно", "");
	
	ТекущийЭлемент = Элементы.Товары;
	
	ДобавитьБыстрыйТовар(ИмяЭлемента)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО01БыстрыеТовары(Команда)
	
	ОткрытьЗакрытьМенюБыстрыхТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО02ВвестиВнесениеДенег(Команда)
	
	Если НЕ ВозможностьВнесенияДенег() Тогда
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Немає документів щодо внесення коштів");

		ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");

		Возврат;

	КонецЕсли;

	ВывестиИнформациюНаДисплейПокупателя("Сервис");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КассыККМ"   , МассивКассККМКлиент);
	ПараметрыОткрытия.Вставить("Организации", МассивОрганизацийКлиент);
	
	Результат = ОткрытьФормуМодально(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВыбораВнесенияДенег", Объект.ИмяВнешнейОбработки), ПараметрыОткрытия, УникальныйИдентификатор);
	
	Если НЕ Результат = Неопределено И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ТекстСообщения = "";
		ОшибкаТранзакции = Ложь;
		ДенежныеСредстваКлиент.ВнесениеДенег(
			Результат.Сумма,
			Результат.РасходныйКассовыйОрдер,
			Результат.Касса,
			УникальныйИдентификатор,
			ОшибкаТранзакции,
			ТекстСообщения
		);

		Если ОшибкаТранзакции Тогда

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Помилка внесення грошей", ТекстСообщения)

		КонецЕсли;

	КонецЕсли;

	ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");

КонецПроцедуры

&НаКлиенте
Процедура КомандаПО04ОтложитьЧек(Команда)
	
	ЭтоПродажаПоЗаказуПокупателя = ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя)
		И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат");

	Если ТестовыйРежимРМК Тогда

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
			  "РМК працює у тестовому режимі!"
			, "ВІДМОВЛЕНО!" + Символы.ПС
			+ "Чек, сформований для тестування, НЕ може бути відкладений."
		);
	
	ИначеЕсли НЕ ЭтоПродажаПоЗаказуПокупателя Тогда

		Если Объект.Товары.Количество() = 0 Тогда

			СоздатьНовыйНаборКлиент();
			Возврат;

		КонецЕсли;

		ПредставлениеЧека = ЗаписатьИЗакрытьЧекПоСтатусуКлиент(ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Отложенный"), Новый Структура);

	//	LNK 01.11.2017 10:13:10
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
			  "Чек відкладено!"
			, "Інформація для довідки:" + Символы.ПС + ПредставлениеЧека
		);

		ВывестиИнформациюНаДисплейПокупателя("ОтложитьЧек");
		ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяПриПростое", 5, Истина);

		Если НЕ ЗначениеЗаполнено(Объект.ВладелецДисконтнойКарты) Тогда	//	LNK 18.07.2019 13:01:36

			ОчиститьРеквизитыФормы();

		КонецЕсли;

		ОбновитьФорму();

	Иначе

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
			  НазваниеЗаказа()
			, "ВІДМОВЛЕНО!" + Символы.ПС
			+ "Чек, сформований за зовнішнім документом, НЕ може бути відкладений. Допустимо пробиття або ануляція поточного чека."
		);

	КонецЕсли;

	УстановитьОформлениеЭлементов();	//	LNK 27.09.2019 12:31:46
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО05ВвестиАннулирование(Команда)

	Если Объект.Товары.Количество() > 0 Тогда
		
		ОтветПользователя = ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМК("Анулювати чек?");

		Если НЕ ВРег(ОтветПользователя) = "ДА" Тогда

			Возврат;

		КонецЕсли;

		ПараметрыЗаполненияЧекаККМ = Новый Структура;

		Если АнулироватьЧекККМ(ТаблицаКассККМОрганизаций[0].КассаККМ, ПараметрыЗаполненияЧекаККМ) Тогда

			АнулироватьВсеТовары(ИмяКомпьютера());	//	LNK 29.05.2019 12:19:12
			ЗаписатьИЗакрытьЧекПоСтатусуКлиент(ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Аннулированный"), ПараметрыЗаполненияЧекаККМ);

			ВывестиИнформациюНаДисплейПокупателя("Аннулирование");

		КонецЕсли;

	Иначе

		СоздатьНовыйНаборКлиент();

	КонецЕсли;
	
//	Если НЕ ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда	//+HVOYA Mykhailo
	Если НЕ ЗначениеЗаполнено(Объект.ВладелецДисконтнойКарты) Тогда	//	LNK 18.07.2019 13:02:15

		ОчиститьРеквизитыФормы();

	КонецЕсли; 

	ОбновитьФорму();

	ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяПриПростое", 5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО06ВвестиШтрихкод(Команда)

	КодЗначение = 0;
	Если ПолучитьИнтерактивноЧисло("Введіть штрих-код:", КодЗначение, 0, Ложь, Ложь) Тогда
		КодЗначение = Формат(КодЗначение, "ЧЦ=128; ЧДЦ=0; ЧГ=0");
		Если ЗначениеЗаполнено(КодЗначение)  Тогда
			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(КодЗначение);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, КодЗначение);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаПО07ОткрытьДенежныйЯщик(Команда)
	
	Если Не ИспользоватьПодключаемоеОборудование Тогда
	
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
			  "Устаткування не використовується."
			, "Грошова скринька не може бути відкрита."
		);
		Возврат;
	
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ЗначениеВыбораКасса = ВыбраннаяКассаККМ();
		
		Если НЕ ЗначениеЗаполнено(ЗначениеВыбораКасса) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыКассыККМ = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(ЗначениеВыбораКасса);
		ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
		ОписаниеОшибки = "";
		
		Если ИдентификаторУстройстваФР <> Неопределено Тогда
			// Подключение устройства ФР
			РезультатФР = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(ЭтотОбъект,
			                                                                                ИдентификаторУстройстваФР,
			                                                                                ОписаниеОшибки);

			Если РезультатФР Тогда
				
				ВходныеПараметры = Неопределено;
				ВыходныеПараметры = Неопределено;

				РезультатФР = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР,
				                                                          "OpenCashDrawer",
				                                                          ВходныеПараметры,
				                                                          ВыходныеПараметры);
				Если НЕ РезультатФР Тогда
					
					ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
						"При відкритті грошової скриньки виникла помилка:"
						, ВыходныеПараметры[1]
					);
					
				КонецЕсли;
				

				// Отключение устройства ФР
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(ЭтотОбъект,
				                                                                 ИдентификаторУстройстваФР
				);

			Иначе
				
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
					"При підключенні фіскального реєстратора сталася помилка:"
					, ОписаниеОшибки
				);
				
			КонецЕсли;

		КонецЕсли;

	Иначе

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Фіскальний реєстратор не підключено");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаПО08РасчетСкидок(Команда)
	
	НазначитьАвтоматическиеСкидкиКлиент(,, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО09Печать(Команда)
	
	Если Объект.Товары.Количество() = 0 тогда
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Чек не заповнений.");
		Возврат;
		
	КонецЕсли;
	
	ОтветПользователя = ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМК("Друк чека можливий лише після закриття чека.");
	
	Если НЕ ВРЕГ(ОтветПользователя) = "ДА" Тогда
		Возврат;
	КонецЕсли;
	
	ОплатитьТовары("ФормаСложнойОплаты", Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО10НапечататьПоследнийСлипЧек(Команда)
	
	Если Не ИспользоватьПодключаемоеОборудование Тогда
	
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Устаткування не використовується. Сліп-чек не може бути надрукований.");
		Возврат;
	
	КонецЕсли;

	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда

		ИдентификаторУстройстваФР = Неопределено;
		ОписаниеОшибки            = "";

	//	Выбор устройства ФР
		ИдентификаторУстройстваФР = МенеджерОборудованияКлиент.ВыбратьУстройство("ФискальныйРегистратор",
			"Виберіть фіскальний реєстратор", "Фіскальний реєстратор не підключено");

		Если ИдентификаторУстройстваФР <> Неопределено Тогда

		//	Подключение устройства ФР
			РезультатФР = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
			                                                                                ИдентификаторУстройстваФР,
			                                                                                ОписаниеОшибки
			);

			Если РезультатФР Тогда

				Если Не ПустаяСтрока(глПодключаемоеОборудование.ПоследнийСлипЧек) Тогда

					ВходныеПараметры = Новый Массив();
					ВходныеПараметры.Добавить(глПодключаемоеОборудование.ПоследнийСлипЧек);
					ВыходныеПараметры = Неопределено;

					РезультатФР = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР,
					                                                          "PrintText",
					                                                          ВходныеПараметры,
					                                                          ВыходныеПараметры
					);
					Если НЕ РезультатФР Тогда

						ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
							"Під час друку сліп-чека виникла помилка:"
							, СтрЗаменить("%ОписаниеОшибки%"
										, "%ОписаниеОшибки%"
										, ВыходныеПараметры[1]
							)
						);

					КонецЕсли;

				КонецЕсли;

				// Отключение устройства ФР
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				                                                                 ИдентификаторУстройстваФР
				);
			Иначе

				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
					  "При підключенні фіскального реєстратора сталася помилка."
					, СтрЗаменить(
						"«%ОписаниеОшибки%».
						|Сліп-чек не надруковано."
						, "%ОписаниеОшибки%"
						, ОписаниеОшибки
					)
				);

			КонецЕсли;

		КонецЕсли;

	Иначе

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Фіскальний реєстратор не підключено");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаПО11Выход(Команда)

	Если Объект.Товары.Количество() > 0 Тогда

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
			"Завершення роботи"
			, "Перед виходом необхідно пробити, анулювати чи відкласти поточний чек!"
		);
		
		Возврат;
		
	КонецЕсли;

	СанкционированноеЗакрытие = Истина;

	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура КомандаПО12ПолучитьВес(Команда)

	Если НЕ ИспользоватьПодключаемоеОборудование Тогда

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
			"Устаткування не використовується."
			, "Так, як обладнання, що підключається, не використовується, вага не може бути отримана"
		);

		Возврат;

	КонецЕсли;
	
	ОписаниеОшибки = "Невідома помилка.";
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Необхідно вибрати рядок, для якого потрібно отримати вагу.");
		
	ИначеЕсли МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ЭлектронныеВесы", "Виберіть ваги.", "");
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			
			// Подключаем Весы
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(
				ЭтотОбъект,
				ИдентификаторУстройства,
				ОписаниеОшибки
			);
			
			Если Результат Тогда
				
				ВходныеПараметры  = Неопределено;
				ВыходныеПараметры = Неопределено;
				
				// Пытаемся получить вес
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
					ИдентификаторУстройства,
					"ПолучитьВес",
					ВходныеПараметры,
					ВыходныеПараметры);
				
				Если Результат Тогда

					Если ВыходныеПараметры[0] = 0 Тогда

						ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
							"Нульова вага."
							, "Додатковий опис:
							  |Електронні ваги повернули нульову вагу."
						);
						
					Иначе

						БылоКоличествоУпаковок = ТекущиеДанные.КоличествоУпаковок;
						ТекущиеДанные.КоличествоУпаковок = ВыходныеПараметры[0]; // Вес получен
						ТоварыПриИзмененииКоличества(ТекущиеДанные, БылоКоличествоУпаковок);

					КонецЕсли;

				Иначе

					ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
						"При використанні електронних вагів сталася помилка."
						, СтрЗаменить(
							"Додатковий опис:
							|%ДополнительноеОписание%",
							"%ДополнительноеОписание%",
							ВыходныеПараметры[1]
						)
					);

				КонецЕсли;
				
				// Отключаем Весы
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(ЭтотОбъект, ИдентификаторУстройства);

			Иначе

			//	Ошибка подключения весов
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
					"При використанні електронних вагів сталася помилка."
					, СтрЗаменить(
						"Додатковий опис:
						|%ДополнительноеОписание%",
						"%ДополнительноеОписание%",
						ОписаниеОшибки
					)
				);

			КонецЕсли;

		Иначе

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Ваги не підключені.");

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаПО13ВвестиВыемкаДенег(Команда)
	
	ВывестиИнформациюНаДисплейПокупателя("Сервис");
	
	ЗначениеВыбораКасса = ВыбраннаяКассаККМ();
	
	Если НЕ ЗначениеЗаполнено(ЗначениеВыбораКасса) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеВыбораСумма = 0;
	
	Если ПолучитьИнтерактивноЧисло("Введення суми виїмки.", ЗначениеВыбораСумма, 0, Ложь, Ложь) Тогда
		
		Если ЗначениеЗаполнено(ЗначениеВыбораСумма) Тогда

		//	Обработка ввода 
			ТекстСообщения = "";

			ОшибкаТранзакции = Ложь;
			ДенежныеСредстваКлиент.ВыемкаДенег(
				ЗначениеВыбораСумма,
				ЗначениеВыбораКасса,
				УникальныйИдентификатор,
				ОшибкаТранзакции,
				ТекстСообщения
			);

			Если ОшибкаТранзакции Тогда

				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Помилка виїмки грошей", ТекстСообщения);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");

КонецПроцедуры

&НаКлиенте
Процедура КомандаПО14Продавец(Команда)

	ИзменяемыйПродавец = Объект.Продавец;
	ПараметрыОткрытия = Новый Структура;
	Результат = ОткрытьФормуМодально(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаСменыПродавца", Объект.ИмяВнешнейОбработки), ПараметрыОткрытия);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		НовыйПродавец = Результат;
		Объект.Продавец = НовыйПродавец;
		Для Каждого Продавец Из  Объект.Товары Цикл
			Если Продавец.Продавец = ИзменяемыйПродавец Или НЕ ЗначениеЗаполнено(Продавец.Продавец) Тогда
				Продавец.Продавец = НовыйПродавец;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО15ПродолжитьЧек(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
			"Продовження відкладеного чека"
			, "Перед продовженням відкладеного чека необхідно пробити, анулювати чи відкласти поточний чек!"
		);

		Возврат;
		
	КонецЕсли;
	
	МассивСтруктурОтбора = Новый Массив;
	
//	LNK 21.09.2017 14:33:47
	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
	СтруктураОтбора.Поле          = "Дата";
	СтруктураОтбора.Значение      = НачалоДня(ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера());
	СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);
	
	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
	СтруктураОтбора.Поле          = "СтатусЧекаККМ";
	СтруктураОтбора.Значение      = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Отложенный");
	СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);
	
	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
	СтруктураОтбора.Поле          = "ПометкаУдаления";
	СтруктураОтбора.Значение      = Ложь;
	СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("МассивСтруктурОтбора", МассивСтруктурОтбора);
	ПараметрыОткрытия.Вставить("НадписьПустогоСписка", "Список відкладених чеків не заповнено!");
	ПараметрыОткрытия.Вставить("Магазин", Объект.Магазин);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПродолжитьЧекЗавершение", ЭтотОбъект);
	ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВыбораЧека", Объект.ИмяВнешнейОбработки)
		, ПараметрыОткрытия
		, ЭтотОбъект
		, УникальныйИдентификатор
		,
		,
		, ОписаниеОповещения
		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);

КонецПроцедуры

&НаКлиенте	//	LNK 05.02.2019 09:31:31
Процедура ВыборПродолжитьЧекЗавершение(Результат, ДополнительныеПараметры)	Экспорт

	Если НЕ Результат = Неопределено Тогда

		ЧекККМВОбработке = Результат.ЧекККМ;
		
		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
		Отказ = Ложь;

		ЗаполнитьДаннымиПоЧекуККМ(Отказ, ПараметрыИнформации);

		Если Отказ Тогда

			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
			Возврат;

		КонецЕсли;

		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
		СброситьФлагСкидкиРассчитаны();

		ЗаполнитьДисконтПоОтложенномуЧеку();	//-HVOYA Mykhailo

		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда

			ДанныеПродажи = БонусныеБаллыВызовСервера.ПолучитьДанныеДокументаПродажи(Объект.ЧекККМПродажа);	//	LNK 12.09.2021 07:51:18

		КонецЕсли;

		ОбновитьФорму(, Истина);

		ВывестиИнформациюНаДисплейПокупателя("ПродолжитьЧек");

	КонецЕсли;

	ПроверитьВозможностьВыдачиКартыПокупателю();

	УстановитьОформлениеЭлементов();	//	LNK 27.09.2019 12:31:46

КонецПроцедуры

&НаКлиенте
Процедура КомандаПО16ВвестиВозвратТовараОтРозничногоПокупателя(Команда)
	
	ВывестиИнформациюНаДисплейПокупателя("ВозвратТовара");
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("Магазин", Объект.Магазин);
	
	Если НЕ ТаблицаКассККМОрганизаций.Количество() = 0 Тогда
		ПараметрыОбработки.Вставить("Организация", ТаблицаКассККМОрганизаций[0].Организация);
	КонецЕсли;
	
	ПараметрыОбработки.Вставить("ТипОткрытияФормы", ПредопределенноеЗначение("Перечисление.СпособыОткрытияОбработкиВозвратаОтПокупателя.ДляПодбораИПечати"));
	
	ОткрытьФормуМодально("Обработка.ВозвратТоваровОтРозничногоПокупателя.Форма.Форма", ПараметрыОбработки);
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО17ВвестиИнформационнуюКарту(Команда)
	
	КодКарты = "";
	ВыборИнформационнойКартыТолькоПоКоду = Истина;

	Если ВыборИнформационнойКартыТолькоПоКоду Тогда	// - HVOYA 30.09.2016 14:19:19, Латышев А.А. 

		КодЗначение = 0;

		Если Команда = "СчитатьКарту" ИЛИ Команда.Имя = "СчитатьКарту" Тогда

			СписокОборудования = МенеджерОборудованияКлиентПовтИсп.ПолучитьСписокОборудования("СчитывательМагнитныхКарт");

			Если НЕ СписокОборудования.Количество() = 0 тогда   

				ПоказатьОповещениеПользователя("Проводьте карткою по зчитувачу магнітних карток!",,,,,);	

			Иначе	

				Если ПолучитьИнтерактивноЧисло("Прочитати картку", КодЗначение, 0, Ложь, Истина, Истина) Тогда

					Если ЗначениеЗаполнено(КодЗначение)  Тогда

						СтруктураПараметровКлиента = ПолученМагнитныйКод(КодЗначение);
						ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, КодЗначение);

					КонецЕсли; 

				КонецЕсли;

			КонецЕсли;	

		Иначе

			Если ПолучитьИнтерактивноЧисло("Введіть магнітний код", КодЗначение, 0, Ложь, Истина) Тогда

				Если ЗначениеЗаполнено(КодЗначение)  Тогда

					СтруктураПараметровКлиента = ПолученМагнитныйКод(КодЗначение);
					ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, КодЗначение);

				КонецЕсли; 

			КонецЕсли;

		КонецЕсли; 
		
	Иначе
		
		ПараметрыОткрытия = Новый Структура;
		Результат = ОткрытьФормуМодально(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВыбораДисконтнойКарты", Объект.ИмяВнешнейОбработки), ПараметрыОткрытия, УникальныйИдентификатор);

		Если Результат = Неопределено Тогда

			Возврат;

		КонецЕсли;

		Объект.ДисконтнаяКарта = Результат.ДисконтнаяКарта;
		Модифицированность = Истина;
		ПриИзмененииДисконтнаяКартаСервер();
		
		СброситьФлагСкидкиРассчитаны();
		
		ОбновитьФорму();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаПО19УправляемыеСкидки(Команда)
	
	АдресСкидокВХранилище = ВыполнитьПредварительныйРасчетСкидокНаСервере();
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("МассивУправляемыеСкидкиДокумента", УправляемыеСкидки.ВыгрузитьЗначения());
	ПараметрыОткрытия.Вставить("Дата"   , ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера()); //+HVOYA Mykhailo ТекущаяДата()
	ПараметрыОткрытия.Вставить("Магазин", Объект.Магазин);
	ПараметрыОткрытия.Вставить("АдресСкидокВХранилище", АдресСкидокВХранилище);
	                            
	Результат = ОткрытьФормуМодально(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаУправляемыеСкидки", Объект.ИмяВнешнейОбработки), ПараметрыОткрытия, УникальныйИдентификатор);
	
	Если НЕ Результат = Неопределено И ТипЗнч(Результат) = Тип("Структура") Тогда

		УправляемыеСкидки.ЗагрузитьЗначения(Результат.МассивУправляемыхСкидок);

		Объект.УправляемыеСкидки.Очистить();

		Для каждого СкидкаНаценка Из Результат.МассивУправляемыхСкидок Цикл
			
			СтрокаУправляемыеСкидки = Объект.УправляемыеСкидки.Добавить();
			СтрокаУправляемыеСкидки.СкидкаНаценка = СкидкаНаценка;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО21ПробитьЧек(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
			"Пробиття іншого чека"
			, "Перед пробиттям іншого чека необхідно пробити, анулювати чи відкласти поточний чек!"
		);
		Возврат;
		
	КонецЕсли;
	
	МассивСтруктурОтбора = Новый Массив;
	
	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
	СтруктураОтбора.Поле          = "СтатусЧекаККМ";
	СтруктураОтбора.Значение      = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка");
	СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);
	
	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
	СтруктураОтбора.Поле          = "КассаККМ";
	СтруктураОтбора.Значение      = МассивКассККМКлиент;
	СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);
	
	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
	СтруктураОтбора.Поле          = "ПометкаУдаления";
	СтруктураОтбора.Значение      = Ложь;
	СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);
	
	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();	//	LNK 01.02.2019 07:30:18
	СтруктураОтбора.Поле          = "Дата";
	СтруктураОтбора.Значение      = НачалоДня(ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера() - 86400 * 2);
	СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("МассивСтруктурОтбора", МассивСтруктурОтбора);
	ПараметрыОткрытия.Вставить("ПробитиеНепробитого" , Истина);
	ПараметрыОткрытия.Вставить("НадписьПустогоСписка", "Список непробитих чеків не заповнено!");
	ПараметрыОткрытия.Вставить("Магазин", Объект.Магазин);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПробитьНепробитыйЧекЗавершение", ЭтотОбъект);	//	LNK 23.10.2019 12:20:36
	ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВыбораЧека", Объект.ИмяВнешнейОбработки), ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьНепробитыйЧекЗавершение(Результат, ДополнительныеПараметры)	Экспорт

	Если НЕ Результат = Неопределено Тогда

		ЧекККМСсылка	  = Результат.ЧекККМ;
		КассаККМ		  = Результат.КассаККМ;
		ПараметрыКассыККМ = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);

		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();

		Если ПроверитьОплатуИВыполнитьОкруглениеЧекаПоСсылке(ЧекККМСсылка, ПараметрыИнформации) Тогда

			ПараметрыЗаполненияЧекаККМ = Новый Структура;
			
			Отказ = НЕ ПробитьЧекККМ(ЧекККМСсылка, КассаККМ, ПараметрыЗаполненияЧекаККМ, ПараметрыКассыККМ);
			
			Если Отказ Тогда
				Возврат;
			Иначе
				ЧекККМВОбработке = ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка");
			КонецЕсли;
			
			ВывестиДополнительноеСообщение = Ложь;
			
			ПровестиЧекККМ(ЧекККМСсылка, ПараметрыЗаполненияЧекаККМ, Новый Массив, ВывестиДополнительноеСообщение, ПараметрыИнформации);

			ПроверитьАкцииНаПечатьУникальныхКупонов(ЧекККМСсылка, КассаККМ);

			Если ВывестиДополнительноеСообщение Тогда

				ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

			КонецЕсли;

			СоздатьНовыйНаборКлиент();
			
			ОбновитьФорму();

		Иначе

			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьОплатуИВыполнитьОкруглениеЧекаПоСсылке(ЧекККМСсылка, ПараметрыИнформации)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ТаблицаОплаты.Сумма КАК СуммаОплаты,
	|	ЕСТЬNULL(ТаблицаТипыОплат.ТипОплаты, ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПустаяСсылка)) КАК ТипОплаты,
	|	ТаблицаОплаты.ВидОплаты КАК ВидОплаты
	|ПОМЕСТИТЬ Оплата
	|ИЗ
	|	Документ.ЧекККМ КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Оплата КАК ТаблицаОплаты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОплатЧекаККМ КАК ТаблицаТипыОплат
	|			ПО ТаблицаОплаты.ВидОплаты = ТаблицаТипыОплат.Ссылка
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаОплаты.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ТаблицаДокумента.СуммаОплаты КАК СуммаОплаты,
	|	ТаблицаОплаты.ВидОплаты КАК ВидОплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента,
	|		ЕСТЬNULL(СУММА(ТаблицаДокумента.СуммаОплаты), 0) КАК СуммаОплаты
	|	ИЗ
	|		Оплата КАК ТаблицаДокумента
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаДокумента.СуммаДокумента) КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Оплата КАК ТаблицаОплаты
	|		ПО (ТаблицаОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК Номенклатура,
	|	ТаблицаСправочник.ТипНоменклатуры КАК ТипНоменклатуры
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
	|		ПО ТаблицаТовары.Номенклатура = ТаблицаСправочник.Ссылка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Оплата"
	);
	Запрос.УстановитьПараметр("ДокументСсылка", ЧекККМСсылка);

	Результаты = Запрос.ВыполнитьПакет();

	ПроверкаПройдена = Истина;

	Если НЕ Результаты[1].Пустой() Тогда

		Выборка = Результаты[1].Выбрать();
		Выборка.Следующий();

		СуммаДокументаОкругленная = Окр(Выборка.СуммаДокумента, 1, РежимОкругления.Окр15как20);

		Если Выборка.СуммаОплаты < Выборка.СуммаДокумента Тогда

			ПроверкаПройдена = Ложь;

			ПараметрыИнформации.ЗаголовокИнформации = "Операція неможлива!";
			ПараметрыИнформации.ТекстИнформации     = "Сума оплати, вказана в «" + ЧекККМСсылка + "», МЕНШЕ загальної суми документа.";

		ИначеЕсли Выборка.ВидОплаты = NULL И НЕ Выборка.СуммаДокумента = СуммаДокументаОкругленная Тогда

			СоставТиповНоменклатуры = Новый Соответствие;

			Выборка = Результаты[2].Выбрать();

			Пока Выборка.Следующий() Цикл

				СоставТиповНоменклатуры.Вставить(Выборка.Номенклатура, Выборка.ТипНоменклатуры);

			КонецЦикла;

			ОбъектЧекККМ = ЧекККМСсылка.ПолучитьОбъект();
			#Если _ Тогда
			ОбъектЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
			#КонецЕсли

			СкидкиНаценкиКлиентСервер.ОкруглитьТоварыПоСуммеДокумента(ОбъектЧекККМ.СуммаДокумента, ОбъектЧекККМ.Товары, ОбъектЧекККМ.ЦенаВключаетНДС, СоставТиповНоменклатуры);

			ОбъектЧекККМ.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(ОбъектЧекККМ.Товары, ОбъектЧекККМ.ЦенаВключаетНДС);

			ОбъектЧекККМ.ОбменДанными.Загрузка = Истина;
			ОбъектЧекККМ.Записать();

			ЧекККМСсылка = ОбъектЧекККМ.Ссылка;

		КонецЕсли;

	Иначе

		ПроверкаПройдена = Ложь;

		ПараметрыИнформации.ЗаголовокИнформации = "Даних не виявлено!";
		ПараметрыИнформации.ТекстИнформации     = "Отримання даних вибраного чека «" + ЧекККМСсылка + "» НЕ увінчалося успіхом.";

	КонецЕсли;

	Возврат ПроверкаПройдена;

КонецФункции

&НаКлиенте
Процедура КомандаПО22РучныеСкидки(Команда)
	
	// +HVOYA. 17.08.2016 15:21:22, Львова Е.А.
	ПричинаРучнойСкидки = ОткрытьФормуМодально("Справочник.ПричиныРучнойСкидки.ФормаВыбора");
	Попытка
		Элементы.Товары.ТекущиеДанные.ПричинаРучнойСкидки = ПричинаРучнойСкидки;
	Исключение
		ЗафиксироватьОшибку(ОписаниеОшибки(), "КомандаПО22РучныеСкидки");	//	LNK 04.09.2018 14:16:54
	КонецПопытки;
	// -HVOYA. 17.08.2016 15:21:28, Львова Е.А.
	
	ПараметрыОткрытия = Новый Структура;
	Результат = ОткрытьФормуМодально(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаРучныхСкидок", Объект.ИмяВнешнейОбработки), ПараметрыОткрытия, УникальныйИдентификатор);
	
	Если Не Результат = Неопределено Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_КомандаСкидки" + СтрЗаменить(Результат, "Команда", ""), 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО23ВвестиСерии(Команда)
	
	ВвестиСерии()
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО24ПолучитьИзТСД(Команда)
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
			"Устаткування не використовується."
			, "Дані неможливо отримати."
		);
		Возврат;

	КонецЕсли;
	
	ТаблицаЗагрузкиИзТСД = Неопределено;
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(ЭтотОбъект, ТаблицаЗагрузкиИзТСД);
	ОбработатьШтрихкодыИзТСД(ТаблицаЗагрузкиИзТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО25ПечатьПробитогоЧека(Команда)

	Если НЕ Объект.Товары.Количество() = 0 Тогда
		
		ЗаголовокИнформации = "Друк пробитого чеку"; 
		ТекстИнформации = "Перед друком пробитого чека необхідно пробити, анулювати чи відкласти поточний чек!";
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокИнформации, ТекстИнформации);

		Возврат;
		
	КонецЕсли;
	
	МассивСтруктурОтбора = Новый Массив;
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Архивный"));
	
	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
	СтруктураОтбора.Поле          = "СтатусЧекаККМ";
	СтруктураОтбора.Значение      = МассивСтатусов;
	СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);
	
	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
	СтруктураОтбора.Поле          = "КассаККМ";
	СтруктураОтбора.Значение      = МассивКассККМКлиент;
	СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);
	
	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
	СтруктураОтбора.Поле          = "Проведен";
	СтруктураОтбора.Значение      = Истина;
	СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);
	
	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
	СтруктураОтбора.Поле          = "Дата";
	СтруктураОтбора.Значение      = НачалоДня(ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера() - 86400 * 2);
	СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("МассивСтруктурОтбора", МассивСтруктурОтбора);
	ПараметрыОткрытия.Вставить("НадписьПустогоСписка", "Список пробитих чеків порожній!");
	ПараметрыОткрытия.Вставить("Магазин", Объект.Магазин);
	
//	LNK 31.01.2019 10:04:12
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьПробитогоЧекаЗавершение", ЭтотОбъект);
	ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВыбораЧека", Объект.ИмяВнешнейОбработки), ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте	//	LNK 31.01.2019 09:49:16
Процедура ПечатьПробитогоЧекаЗавершение(Результат, ДополнительныеПараметры)	Экспорт

	Если НЕ Результат = Неопределено Тогда

		МассивСсылокЧеков = Новый Массив;
		МассивСсылокЧеков.Добавить(Результат.ЧекККМ);

		НапечататьЧекиККМ(МассивСсылокЧеков);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаПО26ОтчетБезГашения(Команда)
	
	ЗначениеВыбораКасса = ВыбраннаяКассаККМ();
	
	Если НЕ ЗначениеЗаполнено(ЗначениеВыбораКасса) Тогда
		Возврат;
	КонецЕсли;
	
	НапечататьОтчетБезГашения(ЗначениеВыбораКасса)
	
КонецПроцедуры


/////////////////////////////////////////////
&НаКлиенте
Процедура КомандаБыстрыеТоварыТовар(Команда)
	
//	Вставить содержимое обработчика.
	ИмяКоманды = Команда.Имя;
	ИмяКоманды = СтрЗаменить(ИмяКоманды, "ПрограммноКомандаБыстрыеТовары", "");
	
	ДобавитьБыстрыйТовар(ИмяКоманды)
	
КонецПроцедуры

//////////////////// (Ручные скидки)

&НаКлиенте
Процедура КоманднаяПанельСкидкиНажатие(Команда)
	
	ЗаголовокСообщения = "Обмеження застосування ручних знижок.";

	Если ЗаказПокупателяОплачен(Объект.ЗаказПокупателя) Тогда	//	HVOYA Mykhailo

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокСообщения
			, "Інтернет-замовлення СПЛАЧЕНО! Ручні знижки недоступні!");
		Возврат;

	КонецЕсли; 

//	LNK 30.08.2017 10:51:43
	Если НЕ Объект.ДоговорСтрахования.Пустая() Тогда

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокСообщения
			, "Відмовлено. Знижки у режимі оплати договору страхування не передбачені!");
		Возврат;

	КонецЕсли;

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокСообщения
			, "Відмовлено. Ручні знижки у режимі повернення товарів заборонені!");
		Возврат;

	КонецЕсли;

	Если НЕ Объект.УслугаБанка.Пустая() Тогда

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокСообщения
			, "Відмовлено. Знижки у режимі банківської послуги не передбачені!");
		Возврат;

	КонецЕсли;

	ПарольДиректора = ПолучитьПарольДиректора();

	Если ПарольДиректора = Неопределено ИЛИ ПарольДиректораВведенРанее ИЛИ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда

		ВыбратьПричинуРучнойСкидки(Команда.Имя);

	Иначе  		

		ПараметрыОткрытия =  Новый Структура("ПарольДиректораРегистр", ПарольДиректора);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПароляЗавершение", ЭтотОбъект,Команда.Имя);

		ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВводаПароляДиректора", Объект.ИмяВнешнейОбработки), ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВводПароляЗавершение(Значение, ДополнительныеПараметры)	Экспорт

	Если Значение = Истина тогда
		ПарольДиректораВведенРанее = Истина;
		ВыбратьПричинуРучнойСкидки(ДополнительныеПараметры);
	КонецЕсли;	

КонецПроцедуры

//	LNK 30.08.2017 11:24:37
&НаКлиенте
Процедура ВыбратьПричинуРучнойСкидки(ИмяКоманды)

	ДополнительныеПараметры = Новый Структура("ИмяКоманды", ИмяКоманды);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПричинуРучнойСкидкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);	//	LNK 30.08.2017 11:48:25

	// +HVOYA. 11.04.2017 14:01:47, Львова Е.А.
	Если СертификатКакСкидка Тогда
		// -HVOYA. 11.04.2017 14:02:05, Львова Е.А.
		
		// + HVOYA 07.11.2016 13:31:37, Латышев А.А.
		Если ИмяКоманды = "КомандаСкидкаПроцентВЧеке" или ИмяКоманды = "КомандаСкидкаСуммаВСтроке" или ИмяКоманды = "КомандаСкидкаПроцентВСтроке" Тогда

			фиксНастройки = Новый НастройкиКомпоновкиДанных;
			эОтбор = фиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			эОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
			эОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
			эОтбор.ПравоеЗначение = ПредопределенноеЗначение("Справочник.ПричиныРучнойСкидки.ПодарочныйСертификат");
			эОтбор.Использование = Истина;
			
			эОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ФиксированныеНастройки", фиксНастройки);
			
			ОткрытьФорму("Справочник.ПричиныРучнойСкидки.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

		ИначеЕсли ИмяКоманды = "КомандаСкидкаСуммаВЧеке"	Тогда

			ОткрытьФорму("Справочник.ПричиныРучнойСкидки.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

		КонецЕсли;
		
	Иначе // ПС = тип оплаты

		фиксНастройки = Новый НастройкиКомпоновкиДанных;
		эОтбор = фиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		эОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		эОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		эОтбор.ПравоеЗначение = ПредопределенноеЗначение("Справочник.ПричиныРучнойСкидки.ПодарочныйСертификат");
		эОтбор.Использование = Истина;
		эОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ФиксированныеНастройки", фиксНастройки);

		ОткрытьФорму("Справочник.ПричиныРучнойСкидки.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;    

КонецПроцедуры

//	LNK 30.08.2017 11:26:05
&НаКлиенте
Процедура ВыбратьПричинуРучнойСкидкиЗавершение(ПричинаРучнойСкидки, ДополнительныеПараметры)	Экспорт

	ДополнительныеПараметры.Вставить("ПричинаРучнойСкидки", ПричинаРучнойСкидки);

	Если НЕ ПричинаРучнойСкидки  = Неопределено Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("ДействияПослеВводаПричиныРучнойСкидки", ЭтотОбъект, ДополнительныеПараметры);

		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Заголовок"  , "Опишіть факт.причину надання знижки");
		ПараметрыОткрытия.Вставить("Приглашение", "Причина знижки");

		Если НЕ Элементы.Товары.ТекущиеДанные = Неопределено Тогда

			ПараметрыОткрытия.Вставить("ВводимоеЗначение", Элементы.Товары.ТекущиеДанные.Содержание);

		КонецЕсли;
		
		ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВводаСтроки", Объект.ИмяВнешнейОбработки)
			, ПараметрыОткрытия
			, ЭтотОбъект
			, ЭтотОбъект
			,,
			, ОписаниеОповещения
			, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);

	Иначе

	//	LNK 30.08.2017 12:58:55
		ДействияПослеВводаПричиныРучнойСкидки("", ДополнительныеПараметры);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДействияПослеВводаПричиныРучнойСкидки(ОписаниеПричины, ДополнительныеПараметры)	Экспорт

	Если ОписаниеПричины = Неопределено Тогда

	//	Форма ввода текстовой причины была закрыта без выбора!
	//	Определяем, как отмену воздействия.
		Сообщить("Скасування дії користувачем!");
		Возврат;

	ИначеЕсли ТипЗнч(ОписаниеПричины) = Тип("Булево") Тогда

	//	Булево присваивается в случае выбора пользователем пустой строки... недопустимо!
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
			"Контроль опису причини ручної знижки"
			, "Опис причини ручної знижки обов'язковий! Без такого опису ручна знижка призначена бути не може - у призначенні ручної знижки відмовлено"
		);
		Возврат;

	КонецЕсли;

	ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
	ПричинаРучнойСкидки = ДополнительныеПараметры.ПричинаРучнойСкидки;

	Если НЕ ПричинаРучнойСкидки  = Неопределено Тогда
		
		Если ИмяКоманды = "КомандаСкидкаСуммаВСтроке" ИЛИ ИмяКоманды = "КомандаСкидкаПроцентВСтроке"	Тогда

			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

			Если НЕ ТекущиеДанные.ПричинаРучнойСкидки = ПредопределенноеЗначение("Справочник.ПричиныРучнойСкидки.ПодарочныйСертификат")Тогда

				Попытка

					ТекущиеДанные.ПричинаРучнойСкидки = ПричинаРучнойСкидки;
					ТекущиеДанные.Содержание          = ОписаниеПричины;

				Исключение

					ЗафиксироватьОшибку(ОписаниеОшибки(), "ДействияПослеВводаПричиныРучнойСкидки");	//	LNK 04.09.2018 14:16:54

				КонецПопытки;

			Иначе

				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли ИмяКоманды = "КомандаСкидкаПроцентВЧеке" ИЛИ ИмяКоманды = "КомандаСкидкаСуммаВЧеке" Тогда
			
			Для каждого СтрокаТовары Из Объект.Товары Цикл

				СтрокаТовары.ПричинаРучнойСкидки = ПричинаРучнойСкидки;
				СтрокаТовары.Содержание          = ОписаниеПричины;

			КонецЦикла;

		КонецЕсли; 

	//	LNK 21.09.2018 09:41:56 - Ручные скидки не должны давать возможность использования скидочных купонов.. любых!
		ОчиститьПогашениеСкидочныхКупоновНаКлиенте();

		Если СертификатКакСкидка Тогда	//	HVOYA. 11.04.2017 14:02:05, Львова Е.А.
			
			Если ПричинаРучнойСкидки = ПредопределенноеЗначение("Справочник.ПричиныРучнойСкидки.ПодарочныйСертификат")	Тогда	//	HVOYA 03.11.2016 15:36:27, Латышев А.А.

				ПодключитьОбработчикОжидания("hiПодключаемый_КомандаСкидкиПодарочныйСертификат", 0.1, Истина);

			Иначе

				ПодключитьОбработчикОжидания("Подключаемый_КомандаСкидки" + СтрЗаменить(ИмяКоманды, "Команда", ""), 0.1, Истина);

			КонецЕсли; 
			
		Иначе // в Учетной политике прописан сертификат как как оплата - в ручных скидках только стандартные варианты

			ПодключитьОбработчикОжидания("Подключаемый_КомандаСкидки" + СтрЗаменить(ИмяКоманды, "Команда", ""), 0.1, Истина);

		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПогашениеСкидочныхКупоновНаКлиенте()

	Для каждого СтрокаПогашение Из Объект.ПогашениеСкидочныхКупонов Цикл

		СтрокиТовары = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаПогашение.СкидочныйКупон));

		Для каждого СтрокаТовары Из СтрокиТовары Цикл

			Объект.Товары.Удалить(СтрокаТовары);

		КонецЦикла;

	КонецЦикла;

	Если НЕ Объект.ПогашениеСкидочныхКупонов.Количество() = 0 Тогда

		Объект.ПогашениеСкидочныхКупонов.Очистить();

	КонецЕсли;

КонецПроцедуры

//////////////////// (Поиск номенклатуры)

&НаКлиенте
Процедура ПоискАртикул(Команда)
	
	ПоискПоНоменклатуре("Артикул");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискВезде(Команда)
	
	ПоискПоНоменклатуре("Везде");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискКод(Команда)
	
	ПоискПоНоменклатуре("Код");
	
КонецПроцедуры


&НаКлиенте
Процедура ПоискНаименование(Команда)
	
	ПоискПоНоменклатуре("Наименование");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискШтрихкод(Команда)
	
	ПоискПоНоменклатуре("Штрихкод");
	
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьПодакцизныеТоварыДляКоммерческогоИспользования(Команда)
	
	Объект.ПодакцизныеТоварыДляКоммерческогоИспользования = Не Объект.ПодакцизныеТоварыДляКоммерческогоИспользования;
	Элементы.ИзменитьПодакцизныеТоварыДляКоммерческогоИспользования.Пометка = Объект.ПодакцизныеТоварыДляКоммерческогоИспользования;

КонецПроцедуры

////////////////////////////

// +HVOYA. 26.08.2016 18:27:20, Львова Е.А.
&НаКлиенте
Процедура hiОткрытьИнформациюОСкидках(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ПродажаПодарка Тогда
		УстановитьТекущийЭлемент();	//	LNK 13.09.2017 08:17:04
		Возврат;
		
	КонецЕсли;
	
	КонтролироватьОстаткиТоваровПриЗакрытииЧека = ИспользоватьНастройкуРМК 
												И НаборПравИНастроек.КонтролироватьОстаткиТоваровПриЗакрытииЧека 
												И НЕ ЭтоРабочееМестоOffLine;
												
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", 				УправляемыеСкидки);
	СтруктураПараметры.Вставить("ПеренестиСкидкиПодаркиВТовары");
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	КонтролироватьОстаткиТоваровПриЗакрытииЧека);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	СтруктураПараметры.Вставить("ДатаРасчета", ТекущаяДата());	//	LNK 19.05.2021 07:36:49
//	LNK 25.10.2022 06:01:00
	СтруктураПараметры.Вставить("СкидкиПоЗаказуПокупателя", НЕ Объект.ЗаказПокупателя = ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка"));
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
		Результат = Вопрос("Знижки (націнки) не розраховані. Розрахувати?", РежимДиалогаВопрос.ДаНет);
		Если Результат = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		КонецЕсли;
	КонецЕсли;

	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтотОбъект);
	УстановитьТекущийЭлемент();	//	LNK 13.09.2017 08:17:04
	
КонецПроцедуры
// -HVOYA. 01.09.2016 16:06:43, Львова Е.А.

&НаКлиенте	//	LNK 03.08.2023 07:14:19
Процедура КомандаСрокДействияСертификата(Команда)

//	Обновим флаг доступа принудительно..
	РесурсWebRetailДоступен = РозничныеПродажиСлужебный.РесурсWebRetailДоступен();

	Если РесурсWebRetailДоступен = Истина Тогда

		ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаИнформацияСертификата", Объект.ИмяВнешнейОбработки)
			,, ЭтотОбъект, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Иначе

		ПоказатьОповещениеПользователя("Відмовлено"
			,
			, "Центральний сервер зараз поза доступом"
			, БиблиотекаКартинок.Предупреждение32
		);

	КонецЕсли;

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
// Получить таблицу касс ККМ и организаций
//
// Параметры:
//  Нет
//
Процедура ПолучитьТаблицуКассПоРабочемуМесту()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСправочник.Ссылка КАК КассаККМ,
	|	ТаблицаСправочник.Владелец КАК Организация
	|ИЗ
	|	Справочник.КассыККМ КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.РабочееМесто = &РабочееМесто
	|	И ТаблицаСправочник.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
	|	И НЕ ТаблицаСправочник.ПометкаУдаления
	|	И (ТаблицаСправочник.Магазин = &Магазин
	|			ИЛИ &Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))"
	);
	Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
	Запрос.УстановитьПараметр("Магазин"     , Объект.Магазин);
	
	ТаблицаКассККМОрганизаций.Загрузить(Запрос.Выполнить().Выгрузить());

	Для каждого СтрокаТаблицы Из ТаблицаКассККМОрганизаций Цикл

		СтрокаТаблицы.КассоваяСмена = РозничныеПродажиСервер.ПолучитьОткрытуюКассовуюСмену(
			  СтрокаТаблицы.КассаККМ
			,
			, НачалоДня(ТекущаяДата())
			, '00010101'
		);

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СтруктураМассивовКассККМИОрганизаций()
	
	ТаблицаЗначенийКассИОрганизаций = ТаблицаКассККМОрганизаций.Выгрузить();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КассыККМ"   , ТаблицаЗначенийКассИОрганизаций.ВыгрузитьКолонку("КассаККМ"));
	СтруктураПараметров.Вставить("Организации", ТаблицаЗначенийКассИОрганизаций.ВыгрузитьКолонку("Организация"));
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПользовательСУчетомИзмененныхПрав()
	
	Пользователь = глЗначениеПеременной("ПользовательИзмененныхПрав");
	
	Если Пользователь = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Возврат Пользователь

КонецФункции

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)

	УстановитьПривилегированныйРежим(Истина);

	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;

КонецФункции

&НаСервере
Процедура ОткрытьЗакрытьМенюБыстрыхТоваров()
	
	Элементы.ГруппаБыстрыхТоваров.Видимость = НЕ Элементы.ГруппаБыстрыхТоваров.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаборПравИНастроек()

	УстановитьПривилегированныйРежим(Истина);

	Пользователь = ПользовательСУчетомИзмененныхПрав();
	
	НаборПравИНастроек = Новый Структура;
	
	НаборПравИНастроек.Вставить("РазрешитьЧекВозврата", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЧекВозврата, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("ИзменятьЦену", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("ИзменятьПродавца", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.ИзменятьПродавца, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьАннулированиеЧека", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьАннулированиеЧека, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьВнесениеДенег", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьВнесениеДенег, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьИзъятиеДенег", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьИзъятиеДенег, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьПодборИнформационнойКарты", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПодборИнформационнойКарты, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьСторнированиеТовара", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьСторнированиеТовара, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьОтложенныеЧеки", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтложенныеЧеки, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьРедактироватьНабранныйЧек", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьРедактироватьНабранныйЧек, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьЗаменуДисконтныхКарт", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЗаменуДисконтныхКарт, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("ПоказыватьКолонкуОстаток", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.ПоказыватьКолонкуОстаток, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьНазначениеАвтоматическихСкидок", ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах"));
	
	НаборПравИНастроек.Вставить("РазрешитьНазначениеУправляемыхСкидок", ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах") И
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНазначениеУправляемыхСкидок, 
							Ложь, 
							Пользователь)
	);

	Если РозничныеПродажиСерверПовтИсп.ЭтоУзелИнтернетМагазина() Тогда

		НаборПравИНастроек.Вставить("РазрешитьНазначениеРучныхСкидок", Ложь);

	Иначе

		НаборПравИНастроек.Вставить("РазрешитьНазначениеРучныхСкидок", ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах") И
							УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
								ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНазначениеРучныхСкидок, 
								Ложь, 
								Пользователь)
		);

	КонецЕсли;

	НаборПравИНастроек.Вставить("РазрешитьОтчетОСменеБезГашения", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтчетОСменеБезГашения, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("НазначатьЦенуТоварамСНулевойЦеной");
	НаборПравИНастроек.Вставить("ОбъединятьПозицииСОдинаковымТоваром");
	НаборПравИНастроек.Вставить("ВыборИнформационнойКартыТолькоПоКоду");
	НаборПравИНастроек.Вставить("КонтролироватьОстаткиТоваровПриЗакрытииЧека");
	НаборПравИНастроек.Вставить("ПриВозвратеРаспечатыватьПакетДокументов");
	НаборПравИНастроек.Вставить("ШаблонРаботыДисплеяПокупателя");
	НаборПравИНастроек.Вставить("ИнтервалАвтоматическогоСохраненияЧекаККМ");
	
	ЗаполнитьЗначенияСвойств(НаборПравИНастроек, НастройкаРМК);

	НаборПравИНастроек.Вставить("ВыводитьПромИтогНаДисплей");
	НаборПравИНастроек.Вставить("ТекстПриПростое");
	НаборПравИНастроек.Вставить("ТекстВНерабочемСостоянии");
	
	ЗаполнитьЗначенияСвойств(НаборПравИНастроек, НастройкаРМК.ШаблонРаботыДисплеяПокупателя);

//	LNK 09.10.2017 16:04:45
	НаборПравИНастроек.Вставить("ПроводитьОпросВладельцаКарты", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.ПроводитьОпросВладельцевДисконтныхКартПриОформленииДокументов, 
							Ложь, 
							Пользователь)
						И РозничныеПродажиСерверПовтИсп.РазрешитьВерификациюПокупателей(Объект.Магазин));
//	LNK 22.11.2017 16:07:15
	НаборПравИНастроек.Вставить("БлокироватьИзменениеСуммыОплаты", РозничныеПродажиСерверПовтИсп.БлокироватьИзменениеСуммыОплаты(Объект.Магазин));
	
//	LNK 24.07.2019 14:26:21
	КлючиПолитики = ОбменMicrosoftDynamicsПовтИсп.УчетнаяПолитика(?(Объект.Магазин.Пустая(), ПараметрыСеанса.ТекущийМагазин, Объект.Магазин));

	НаборПравИНастроек.Вставить("ПрограммаЛояльности", КлючиПолитики.ПрограммаЛояльности);
	НаборПравИНастроек.Вставить("ПродажиАктивированы", КлючиПолитики.ПродажиАктивированы);

	НаборПравИНастроек.Вставить("РесурсMicrosoftDynamicsДоступен", РозничныеПродажиСлужебный.РесурсMicrosoftDynamicsДоступен());
	НаборПравИНастроек.Вставить("РесурсWebRetailДоступен", РозничныеПродажиСлужебный.РесурсWebRetailДоступен());

	НаборПравИНастроек.Вставить("РазрешитьОкругление", РозничныеПродажиСерверПовтИсп.РазрешитьОкруглениеВЧекеККМ(Объект.Магазин));

//	LNK 01.11.2019 13:32:59
	НаборПравИНастроек.Вставить("ЭтоУзелИнтернетМагазина", РозничныеПродажиСерверПовтИсп.ЭтоУзелИнтернетМагазина());

//	LNK 16.02.2021 08:35:58
	НаборПравИНастроек.Вставить("ИспользоватьБонуснуюСистему", БонусныеБаллыПовтИсп.ИспользоватьБонуснуюСистему());	//	на текущую дату
//	LNK 29.10.2021 07:08:46
	НаборПравИНастроек.Вставить("ЦенаПродажиМинимальная", ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику().ЦенаПродажиМинимальная);
	НаборПравИНастроек.Вставить("РазрешитьОплатуБонусамиПоЗаказуПокупателяНаРМК", ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику().РазрешитьОплатуБонусамиПоЗаказуПокупателяНаРМК);

//	LNK 10.01.2023 06:25:57
	НаборПравИНастроек.Вставить("СуммаНаличныхОграничение", ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику().СуммаНаличныхОграничение);

//	LNK 02.04.2022 05:45:23
	НаборПравИНастроек.Вставить("ВсеПродажиБезНДС", РозничныеПродажиСерверПовтИсп.ВсеПродажиБезНДС(ТекущаяДата()));

	УстановитьСистемуНалогообложения();

КонецПроцедуры

&НаСервере
Процедура УстановитьСистемуНалогообложения()	//	LNK 31.12.2020 05:53:23

//	LNK 31.12.2020 05:40:57
	НаборПравИНастроек.Вставить("СистемаНалогообложения", Справочники.Организации.ПолучитьСистемуНалогообложения(, Объект.Организация));

КонецПроцедуры

// Проверяет наличие элемента формы
//
// Параметры:
//  ИмяЭлемента - Имя элемента формы
//
// Возвращаемое значение:
//  Истина
//
&НаСервере
Функция ПроверитьНаличиеЭлементаФормы(ИмяЭлемента)
	
	Возврат НЕ Элементы.Найти(ИмяЭлемента) = Неопределено;
	
КонецФункции

// Установка доступности с проверкой наличия элементов
//
// Параметры
//  ИмяЭлемента - Имя элемента формы
//  Доступность - Булево
//
&НаСервере
Процедура УстановитьДоступностьЭлементаФормы(ИмяЭлемента, Доступность)
	
	Если ПроверитьНаличиеЭлементаФормы(ИмяЭлемента) Тогда
		Элемент = Элементы.Найти(ИмяЭлемента);
		Элемент.Доступность = Доступность;
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			Для каждого ПодЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
				 УстановитьДоступностьЭлементаФормы(ПодЭлемент.Имя, Доступность)
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает доступность элементов форм документа,
// в зависимости от настроек прав пользователя
&НаСервере
Процедура УстановитьДоступностьЭлементовФормы() Экспорт
	
	ЕстьБыстрыеТовары = Ложь;

	ТаблицаЗначенийКассИОрганизаций = ТаблицаКассККМОрганизаций.Выгрузить();
		
	ЕстьВозможностьОплатыПлатежнойКартой = ПродажиСервер.ЕстьВозможностьОплатыПлатежнойКартой(ТаблицаЗначенийКассИОрганизаций.ВыгрузитьКолонку("КассаККМ"));

	Если ДанныеМагазина.ИспользоватьБанковскиеУслуги = Истина И НЕ ЕстьВозможностьОплатыПлатежнойКартой = Истина Тогда

		ДанныеМагазина.ИспользоватьБанковскиеУслуги = Ложь;

	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы("КомандаЧО06ПлатежнаяКарта"            , ЕстьВозможностьОплатыПлатежнойКартой);
	УстановитьДоступностьЭлементаФормы("КомандаЧО06ПлатежнаяКартаАкселераторы", ЕстьВозможностьОплатыПлатежнойКартой);
	
	УстановитьДоступностьЭлементаФормы("КомандаПО01БыстрыеТовары"                      , ЕстьБыстрыеТовары);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО01БыстрыеТовары"            , ЕстьБыстрыеТовары);
	УстановитьДоступностьЭлементаФормы("КомандаПО01БыстрыеТоварыАкселераторы"          , ЕстьБыстрыеТовары);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО01БыстрыеТоварыАкселераторы", ЕстьБыстрыеТовары);
	
	УстановитьДоступностьЭлементаФормы("КомандаПО02ВвестиВнесениеДенег"          , НаборПравИНастроек.РазрешитьВнесениеДенег);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО02ВвестиВнесениеДенег", НаборПравИНастроек.РазрешитьВнесениеДенег);
	УстановитьДоступностьЭлементаФормы("КомандаПО02ВвестиВнесениеДенегАкселераторы"          , НаборПравИНастроек.РазрешитьВнесениеДенег);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО02ВвестиВнесениеДенегАкселераторы", НаборПравИНастроек.РазрешитьВнесениеДенег);
	
	УстановитьДоступностьЭлементаФормы("КомандаПО04ОтложитьЧек"          , НаборПравИНастроек.РазрешитьОтложенныеЧеки);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО04ОтложитьЧек", НаборПравИНастроек.РазрешитьОтложенныеЧеки);
	УстановитьДоступностьЭлементаФормы("КомандаПО04ОтложитьЧекАкселераторы"          , НаборПравИНастроек.РазрешитьОтложенныеЧеки);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО04ОтложитьЧекАкселераторы", НаборПравИНастроек.РазрешитьОтложенныеЧеки);
	
	УстановитьДоступностьЭлементаФормы("КомандаПО05ВвестиАннулирование"                      , НаборПравИНастроек.РазрешитьАннулированиеЧека);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО05ВвестиАннулирование"            , НаборПравИНастроек.РазрешитьАннулированиеЧека);
	УстановитьДоступностьЭлементаФормы("КомандаПО05ВвестиАннулированиеАкселераторы"          , НаборПравИНастроек.РазрешитьАннулированиеЧека);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО05ВвестиАннулированиеАкселераторы", НаборПравИНастроек.РазрешитьАннулированиеЧека);
	
	УстановитьДоступностьЭлементаФормы("КомандаПО08РасчетСкидок"                      , НаборПравИНастроек.РазрешитьНазначениеАвтоматическихСкидок);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО08РасчетСкидок"            , НаборПравИНастроек.РазрешитьНазначениеАвтоматическихСкидок);
	УстановитьДоступностьЭлементаФормы("КомандаПО08РасчетСкидокАкселераторы"          , НаборПравИНастроек.РазрешитьНазначениеАвтоматическихСкидок);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО08РасчетСкидокАкселераторы", НаборПравИНастроек.РазрешитьНазначениеАвтоматическихСкидок);
	
	УстановитьДоступностьЭлементаФормы("КомандаПО10НапечататьПоследнийСлипЧек"                      , ЕстьВозможностьОплатыПлатежнойКартой);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО10НапечататьПоследнийСлипЧек"            , ЕстьВозможностьОплатыПлатежнойКартой);
	УстановитьДоступностьЭлементаФормы("КомандаПО10НапечататьПоследнийСлипЧекАкселераторы"          , ЕстьВозможностьОплатыПлатежнойКартой);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО10НапечататьПоследнийСлипЧекАкселераторы", ЕстьВозможностьОплатыПлатежнойКартой);
	
	УстановитьДоступностьЭлементаФормы("КомандаПО13ВвестиВыемкаДенег"          , НаборПравИНастроек.РазрешитьИзъятиеДенег);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО13ВвестиВыемкаДенег", НаборПравИНастроек.РазрешитьИзъятиеДенег);
	УстановитьДоступностьЭлементаФормы("КомандаПО13ВвестиВыемкаДенегАкселераторы"          , НаборПравИНастроек.РазрешитьИзъятиеДенег);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО13ВвестиВыемкаДенегАкселераторы", НаборПравИНастроек.РазрешитьИзъятиеДенег);
	
	УстановитьДоступностьЭлементаФормы("КомандаПО14Продавец"          , НаборПравИНастроек.ИзменятьПродавца);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО14Продавец", НаборПравИНастроек.ИзменятьПродавца);
	УстановитьДоступностьЭлементаФормы("КомандаПО14ПродавецАкселераторы"          , НаборПравИНастроек.ИзменятьПродавца);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО14ПродавецАкселераторы", НаборПравИНастроек.ИзменятьПродавца);
	
	УстановитьДоступностьЭлементаФормы("КомандаПО15ПродолжитьЧек"          , НаборПравИНастроек.РазрешитьОтложенныеЧеки);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО15ПродолжитьЧек", НаборПравИНастроек.РазрешитьОтложенныеЧеки);
	УстановитьДоступностьЭлементаФормы("КомандаПО15ПродолжитьЧекАкселераторы"          , НаборПравИНастроек.РазрешитьОтложенныеЧеки);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО15ПродолжитьЧекАкселераторы", НаборПравИНастроек.РазрешитьОтложенныеЧеки);
	
	УстановитьДоступностьЭлементаФормы("КомандаПО16ВвестиВозвратТовараОтРозничногоПокупателя"          , НаборПравИНастроек.РазрешитьЧекВозврата И НЕ ПланыОбмена.ПоРабочемуМесту.ЭтоРабочееМесто());
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО16ВвестиВозвратТовараОтРозничногоПокупателя", НаборПравИНастроек.РазрешитьЧекВозврата И НЕ ПланыОбмена.ПоРабочемуМесту.ЭтоРабочееМесто());
	УстановитьДоступностьЭлементаФормы("КомандаПО16ВвестиВозвратТовараОтРозничногоПокупателяАкселераторы"          , НаборПравИНастроек.РазрешитьЧекВозврата И НЕ ПланыОбмена.ПоРабочемуМесту.ЭтоРабочееМесто());
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО16ВвестиВозвратТовараОтРозничногоПокупателяАкселераторы", НаборПравИНастроек.РазрешитьЧекВозврата И НЕ ПланыОбмена.ПоРабочемуМесту.ЭтоРабочееМесто());
	
	УстановитьДоступностьЭлементаФормы("КомандаПО17ВвестиИнформационнуюКарту"          , НаборПравИНастроек.РазрешитьПодборИнформационнойКарты);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО17ВвестиИнформационнуюКарту", НаборПравИНастроек.РазрешитьПодборИнформационнойКарты);
	УстановитьДоступностьЭлементаФормы("КомандаПО17ВвестиИнформационнуюКартуАкселераторы"          , НаборПравИНастроек.РазрешитьПодборИнформационнойКарты);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО17ВвестиИнформационнуюКартуАкселераторы", НаборПравИНастроек.РазрешитьПодборИнформационнойКарты);
	
	УстановитьДоступностьЭлементаФормы("КомандаПО19УправляемыеСкидки"          , НаборПравИНастроек.РазрешитьНазначениеУправляемыхСкидок);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО19УправляемыеСкидки", НаборПравИНастроек.РазрешитьНазначениеУправляемыхСкидок);
	УстановитьДоступностьЭлементаФормы("КомандаПО19УправляемыеСкидкиАкселераторы"          , НаборПравИНастроек.РазрешитьНазначениеУправляемыхСкидок);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО19УправляемыеСкидкиАкселераторы", НаборПравИНастроек.РазрешитьНазначениеУправляемыхСкидок);
	
	УстановитьДоступностьЭлементаФормы("КомандаПО20ЗаменаКарты"          , НаборПравИНастроек.РазрешитьЗаменуДисконтныхКарт);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО20ЗаменаКарты", НаборПравИНастроек.РазрешитьЗаменуДисконтныхКарт);
	УстановитьДоступностьЭлементаФормы("КомандаПО20ЗаменаКартыАкселераторы"          , НаборПравИНастроек.РазрешитьЗаменуДисконтныхКарт);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО20ЗаменаКартыАкселераторы", НаборПравИНастроек.РазрешитьЗаменуДисконтныхКарт);
	
	УстановитьДоступностьЭлементаФормы("КомандаПО22РучныеСкидки"          , НаборПравИНастроек.РазрешитьНазначениеРучныхСкидок);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО22РучныеСкидки", НаборПравИНастроек.РазрешитьНазначениеРучныхСкидок);
	УстановитьДоступностьЭлементаФормы("КомандаПО22РучныеСкидкиАкселераторы"          , НаборПравИНастроек.РазрешитьНазначениеРучныхСкидок);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО22РучныеСкидкиАкселераторы", НаборПравИНастроек.РазрешитьНазначениеРучныхСкидок);
	УстановитьДоступностьЭлементаФормы("ГруппаПанельРучныхСкидок", НаборПравИНастроек.РазрешитьНазначениеРучныхСкидок);
	
	УстановитьДоступностьЭлементаФормы("КомандаПО23ВвестиСерии"          , ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры"));
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО23ВвестиСерии", ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры"));
	УстановитьДоступностьЭлементаФормы("КомандаПО23ВвестиСерииАкселераторы"          , ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры"));
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО23ВвестиСерииАкселераторы", ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры"));
	
	УстановитьДоступностьЭлементаФормы("КомандаПО24ПолучитьИзТСД"          , ПодключаемоеОборудованиеЕстьТСД);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО24ПолучитьИзТСД", ПодключаемоеОборудованиеЕстьТСД);
	УстановитьДоступностьЭлементаФормы("КомандаПО24ПолучитьИзТСДАкселераторы"          , ПодключаемоеОборудованиеЕстьТСД);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО24ПолучитьИзТСДАкселераторы", ПодключаемоеОборудованиеЕстьТСД);
	
	УстановитьДоступностьЭлементаФормы("КомандаПО26ОтчетБезГашения"          , НаборПравИНастроек.РазрешитьОтчетОСменеБезГашения);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО26ОтчетБезГашения", НаборПравИНастроек.РазрешитьОтчетОСменеБезГашения);
	УстановитьДоступностьЭлементаФормы("КомандаПО26ОтчетБезГашенияАкселераторы"          , НаборПравИНастроек.РазрешитьОтчетОСменеБезГашения);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО26ОтчетБезГашенияАкселераторы", НаборПравИНастроек.РазрешитьОтчетОСменеБезГашения);
	
	УстановитьДоступностьЭлементаФормы("КомандаЧО04Возврат"          , НаборПравИНастроек.РазрешитьЧекВозврата);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаЧО04Возврат", НаборПравИНастроек.РазрешитьЧекВозврата);
	УстановитьДоступностьЭлементаФормы("КомандаЧО04ВозвратАкселераторы"          , НаборПравИНастроек.РазрешитьЧекВозврата);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаЧО04ВозвратАкселераторы", НаборПравИНастроек.РазрешитьЧекВозврата);
	
	УстановитьДоступностьЭлементаФормы("КомандаПО12ПолучитьВес"          , ПодключаемоеОборудованиеЕстьВесы);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО12ПолучитьВес", ПодключаемоеОборудованиеЕстьВесы);
	УстановитьДоступностьЭлементаФормы("КомандаПО12ПолучитьВесАкселераторы"          , ПодключаемоеОборудованиеЕстьВесы);
	УстановитьДоступностьЭлементаФормы("ПрограммноКомандаПО12ПолучитьВесАкселераторы", ПодключаемоеОборудованиеЕстьВесы);
	
	//+HVOYA Mykhailo
	УстановитьДоступностьЭлементаФормы("Программно_F8Меню", Истина);
	УстановитьДоступностьЭлементаФормы("Программно_F3Меню", Истина);
	УстановитьДоступностьЭлементаФормы("_F8Меню", Истина);
	УстановитьДоступностьЭлементаФормы("_F3Меню", Истина);
	//-HVOYA Mykhailo
	
КонецПроцедуры

&НаКлиенте	//	LNK 07.08.2019 14:26:48
Процедура УстановитьОформлениеЭлементов()

	Элементы.ДекорацияПроцентСкидки.Заголовок = "Відсоток знижки:";
	Элементы.РМК_Купоны.Заголовок = Формат(Объект.ПогашениеСкидочныхКупонов.Количество(), "ЧЦ=2; ЧН=00; ЧВН=") + " Купон";

	Элементы.РМК_Купоны.Доступность = Ложь;

	Если НаборПравИНастроек.РесурсWebRetailДоступен Тогда

			Элементы.ИндикаторПодключения.Картинка = БиблиотекаКартинок.ОтметитьОперациюВыполненной;

	Иначе	Элементы.ИндикаторПодключения.Картинка = БиблиотекаКартинок.ОтметитьОперациюНевыполненной;

	КонецЕсли;

	Элементы.ПоискПоНомеру.ЦветФона = ?(ПустаяСтрока(Объект.НомерТелефона), Новый Цвет, WebЦвета.БледноЗеленый);//ЦветаСтиля.ФонКнопки

	Элементы.ИндикаторПодключения.Доступность    = Истина;
	Элементы.ПровестиОпросПокупателя.Доступность = НЕ НаборПравИНастроек.ПродажиАктивированы;

	Элементы.КомандаПО19УправляемыеСкидкиАкселераторы.Доступность = НЕ НаборПравИНастроек.ПродажиАктивированы;	//	LNK 27.05.2020 06:49:37
	Элементы.КомандаПО19УправляемыеСкидкиАкселераторы.Видимость   = НЕ НаборПравИНастроек.ПродажиАктивированы;

	Если НЕ ТестовыйРежимРМК Тогда

		Элементы.КомандаОтменаСкидокВСтроке.Видимость = ДанныеМагазина.ОтменаРучныхСкидок;	//+HVOYA Mykhailo
		Элементы.КомандаОтменаСкидокВЧеке.Видимость   = ДанныеМагазина.ОтменаРучныхСкидок;	//+HVOYA Mykhailo

	КонецЕсли;

	УстановитьДоступностьКомандУслугаБанка();	//	LNK 21.12.2020 09:59:17

	РаботаемПоСчетуПокупателю = ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя, "СчетНаОплатуПокупателю");
	ЭтоДокументВозврата       = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат");

	Элементы.Товары.ТолькоПросмотр = РаботаемПоСчетуПокупателю И НЕ ЭтоДокументВозврата;
	Элементы.ГруппаПоискНоменклатуры.Доступность  = НЕ (РаботаемПоСчетуПокупателю ИЛИ ЭтоДокументВозврата);	//	LNK 24.07.2020 06:44:04
	УстановитьДоступностьЭлементаФормы("ГруппаПанельРучныхСкидок", НЕ (РаботаемПоСчетуПокупателю ИЛИ ЭтоДокументВозврата ИЛИ НаборПравИНастроек.ЭтоУзелИнтернетМагазина));
	Элементы.РМК_Аннуляция.Доступность			  = НЕ Элементы.Товары.ТолькоПросмотр;

	флПоискПоНомеру = ?(флПоискПоНомеру, НЕ РаботаемПоСчетуПокупателю, флПоискПоНомеру);
	Элементы.ПоискПоНомеру.Доступность = НЕ (РаботаемПоСчетуПокупателю ИЛИ ЭтоДокументВозврата);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандУслугаБанка()

	ЭтоВозврат = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат"));

	Элементы.КомандаОплатаЧастями.Доступность = НЕ (ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя) ИЛИ ЭтоВозврат);
	Элементы.КомандаПакетМалыша.Доступность   = НЕ (ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя, "СчетНаОплатуПокупателю") ИЛИ ЭтоВозврат);

КонецПроцедуры

// Проверка документов, подготовленных к внесению денег
//
// Параметры:
//  СтруктураПараметровВнесенияДенег - Формируемая структура для дальнейшего открытия формы выбора
//
// Возвращаемое значение:
// Булево
//
&НаСервере
Функция ВозможностьВнесенияДенег()

	//Нахождение документов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.Документ,
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.СуммаОстаток,
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.Организация,
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.Касса
	|ПОМЕСТИТЬ ТаблицаДокументовСОстатками
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКПоступлениюНаличные.Остатки(
	|			,
	|			Касса В (&КассыККМ)
	|				И Организация В (&Организации)) КАК ДенежныеСредстваКПоступлениюНаличныеОстатки
	|ГДЕ
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.СуммаОстаток > 0
	|	И ДенежныеСредстваКПоступлениюНаличныеОстатки.Документ ССЫЛКА Документ.РасходныйКассовыйОрдер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка КАК РасходныйКассовыйОрдер,
	|	РасходныйКассовыйОрдер.Номер,
	|	РасходныйКассовыйОрдер.Дата,
	|	ТаблицаДокументовСОстатками.СуммаОстаток,
	|	ТаблицаДокументовСОстатками.Организация,
	|	ТаблицаДокументовСОстатками.Касса
	|ИЗ
	|	ТаблицаДокументовСОстатками КАК ТаблицаДокументовСОстатками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ПО ТаблицаДокументовСОстатками.Документ = РасходныйКассовыйОрдер.Ссылка";
	
	ТаблицаЗначенийКассИОрганизаций = ТаблицаКассККМОрганизаций.Выгрузить();
	
	Запрос.УстановитьПараметр("КассыККМ"   , ТаблицаЗначенийКассИОрганизаций.ВыгрузитьКолонку("КассаККМ"));
	Запрос.УстановитьПараметр("Организации", ТаблицаЗначенийКассИОрганизаций.ВыгрузитьКолонку("Организация"));
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка табличной части "Товары"

&НаКлиенте
Процедура ТоварыПередУдалениемКлиент(Отказ, КоличествоУпаковок = -1)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий);
	
	Если НЕ НаборПравИНастроек.РазрешитьСторнированиеТовара Тогда

		Отказ = Истина;

	КонецЕсли;

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ЗафиксироватьАннуляцию(СтрокаТабличнойЧасти.ПолучитьИдентификатор(), КоличествоУпаковок, ИмяКомпьютера());

	БонусныеБаллыКлиент.ТоварыПередУдалением(СтрокаТабличнойЧасти, Объект,, ДанныеПродажи);

	ОбработкаТабличнойЧастиТоварыКлиент.ОчиститьСерийныеНомера(СтрокаТабличнойЧасти, Объект);
	
	ОбновлениеДисплеяПокупателя("УдалениеТовара");
	ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяПриПростое", 5, Истина);

КонецПроцедуры

&НаКлиенте
Функция ОткрытьФормуВыбораСправочника(ИмяСправочника, ПарметрыФормыВыбора = Неопределено)
	
	Если НЕ ТипЗнч(ПарметрыФормыВыбора) = Тип("Структура") Тогда
		ПарметрыФормыВыбора = Новый Структура;
	КонецЕсли;
	ПарметрыФормыВыбора.Вставить("СтрокаОтображение", "Список");
	ПарметрыФормыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	ВыбранноеЗначение = ОткрытьФормуМодально("Справочник." + ИмяСправочника + ".ФормаВыбора", ПарметрыФормыВыбора, УникальныйИдентификатор);
	
	Возврат ВыбранноеЗначение;
	
КонецФункции

// Процедура добавляет в табличную часть "Товары" новую строку, в соответствии
// с переданными данными или, в зависимости от настроек РМК, увеличивает количество
// в строке табличной части "Товары", содержащей указанную номенклатуру
//
&НаКлиенте
Процедура ДобавитьНоменклатуруВТабЧасть(Знач Номенклатура, Знач Характеристика, Знач Упаковка, Знач Количество, Знач ПерейтиНаКоличество = Ложь, Знач СерийныйНомер = Неопределено, Знач ШКод = Неопределено, ЛистЖеланий = Неопределено)

	ТекстЗапретаПродаж = "";

	Если НельзяПродавать(Номенклатура, ТекстЗапретаПродаж) Тогда

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Продаж заборонено!", ТекстЗапретаПродаж);
		Возврат;

	КонецЕсли;

	// Уточняем значение характеристики товара
	Если Характеристика = Неопределено Тогда
		
		Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
		
	КонецЕсли;

//	Проверить необходимость объединять товары
	Если НЕ ЗначениеЗаполнено(Упаковка) Тогда

		Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка");

	КонецЕсли;

	МассивТоваров = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Упаковка", Номенклатура, Характеристика, Упаковка));
	
	ДобавленаСтрока = Ложь;

	Если НЕ МассивТоваров.Количество() = 0 Тогда

		ТекущаяСтрока = МассивТоваров[0];
		ДанныеСтрокиПередИзменением = ОбработкаТабличнойЧастиТоварыКлиент.СкопироватьВСтруктуруЭлементКоллекции(ТекущаяСтрока, Объект.Товары);

		Если ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.СкидочныйКупон")
		И НЕ ТекущаяСтрока.ИспользоватьСерийныеНомера	Тогда

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
				"Купон вже було вказано!",
				"Відмовлено!
				|Купон Б/Н «" + Номенклатура + "» вже було вказано у поточному чеку.");
			Возврат;

		КонецЕсли;

		БылоКоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + Количество;

		Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();

	Иначе
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ДанныеСтрокиПередИзменением = ОбработкаТабличнойЧастиТоварыКлиент.СкопироватьВСтруктуруЭлементКоллекции(ТекущаяСтрока, Объект.Товары);

		БылоКоличествоУпаковок = 0;
		ТекущаяСтрока.Номенклатура       = Номенклатура;
		ТекущаяСтрока.Характеристика     = Характеристика;
		ТекущаяСтрока.Упаковка           = Упаковка;
		ТекущаяСтрока.КоличествоУпаковок = Количество;
		Элементы.Товары.ТекущаяСтрока    = ТекущаяСтрока.ПолучитьИдентификатор();

		ДобавленаСтрока = Истина;

		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий, Ложь
		);

	КонецЕсли;

	Если НЕ ДобавленаСтрока Тогда

			ТоварыПриИзмененииКоличества(ТекущаяСтрока, БылоКоличествоУпаковок);

	Иначе	ТоварыПриИзмененииНоменклатуры(ТекущаяСтрока, ПерейтиНаКоличество, Истина);

	КонецЕсли;

	Если ТекущаяСтрока = Неопределено Тогда

	//	может быть очищена в "ТоварыПриИзмененииНоменклатуры"
		Возврат;	//	LNK 16.07.2020 06:25:58

	КонецЕсли;

	БонусныеБаллыКлиент.ТоварыПриОкончанииРедактирования(ТекущаяСтрока, ДанныеСтрокиПередИзменением, Объект,, ДанныеПродажи);	//	LNK 04.07.2021 07:48:28

	Если  ЭтоПогашениеКупона И НЕ ТекущаяСтрока.ИспользоватьСерийныеНомера
		И ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.СкидочныйКупон") Тогда

	//	LNK 26.06.2020 12:39:48
		ДобавитьПогашениеСкидочныхКупонов(ТекущаяСтрока.Номенклатура);

	КонецЕсли;
	
	Если НЕ ШКод = Неопределено Тогда	//+HVOYA Mykhailo
		ТекущаяСтрока.Штрихкод = ШКод;
	КонецЕсли;
	
	Попытка	//+HVOYA Mykhailo : для режима ИНТЕРНЕТ-ЗАКАЗА заменяем цену на интернет-цену
		Если ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя) Тогда // это интернет-заказ
			Если ЗначениеЗаполнено(ВидИнтернетЦены) Тогда  // вид инетрнет-цены
			   ЗаполнитьИнтернетЦенуВСтроке(ТекущаяСтрока);
			КонецЕсли; 
		КонецЕсли; 
	Исключение
		ЗафиксироватьОшибку(ОписаниеОшибки(), "ДобавитьНоменклатуруВТабЧасть");	//	LNK 04.09.2018 14:16:54
	КонецПопытки;
	
	ТекущийЭлемент = Элементы.Товары;
	ОбновлениеДисплеяПокупателя("ДобавлениеТовара");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнтернетЦенуВСтроке(ТекСтрока)
	
	НоваяЦена = ПолучитьНовуюЦенуИЗ(ТекСтрока.Номенклатура,ВидИнтернетЦены);
	Если НоваяЦена <> 0 Тогда
	   ТекСтрока.Цена = НоваяЦена;
	   СтруктураДействий = Новый Структура;
	   СтруктураДействий.Вставить("ПересчитатьСумму");

	   ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекСтрока, СтруктураДействий, КэшированныеЗначения);
	   ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

	   ОбновитьФорму();

	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНовуюЦенуИЗ(Ном,ВидЦены)
	
	НЦ = 0;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНоменклатурыСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			ВидЦены = &ВидЦены
	|				И Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних";
	Запрос.УстановитьПараметр("Номенклатура",Ном);
	Запрос.УстановитьПараметр("ВидЦены",ВидЦены);
	Запрос.УстановитьПараметр("Период",КонецДня(ТекущаяДатаСеанса()));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НЦ = Выборка.Цена;
	КонецЦикла; 
	
	Возврат НЦ;

КонецФункции

&НаКлиенте	//	LNK 18.02.2020 14:23:24
Функция ПолучитьКлючСвязиСерийныхНомеровКлиент(ТекущаяСтрока)

	Если ТекущаяСтрока.КлючСвязиСерийныхНомеров = 0 Тогда

		КлючСвязиТаблиц = 0;

		Для Каждого СтрокаТЧ Из Объект.СерийныеНомера Цикл

			Если КлючСвязиТаблиц < СтрокаТЧ.КлючСвязиСерийныхНомеров Тогда

				КлючСвязиТаблиц = СтрокаТЧ.КлючСвязиСерийныхНомеров;

			КонецЕсли;

		КонецЦикла;

		ТекущаяСтрока.КлючСвязиСерийныхНомеров = КлючСвязиТаблиц + 1;

	КонецЕсли;

	Возврат ТекущаяСтрока.КлючСвязиСерийныхНомеров;

КонецФункции

&НаСервере	//	LNK 18.02.2020 11:30:17
Функция ПолучитьКлючСвязиСерийныхНомеровСервер(ТекущаяСтрока)

	Если ТекущаяСтрока.КлючСвязиСерийныхНомеров = 0 Тогда

		КлючСвязиТаблиц = 0;

		Для Каждого СтрокаТЧ Из Объект.СерийныеНомера Цикл

			Если КлючСвязиТаблиц < СтрокаТЧ.КлючСвязиСерийныхНомеров Тогда

				КлючСвязиТаблиц = СтрокаТЧ.КлючСвязиСерийныхНомеров;

			КонецЕсли;

		КонецЦикла;

		ТекущаяСтрока.КлючСвязиСерийныхНомеров = КлючСвязиТаблиц + 1;

	КонецЕсли;

	Возврат ТекущаяСтрока.КлючСвязиСерийныхНомеров;

КонецФункции

&НаСервере
Процедура ЗаполнитьОстаткиСервер()
	
	Если Элементы.ТоварыОстаток.Видимость Тогда
	
		ЗапасыСервер.ЗаполнитьОстаткиНоменклатуры(Объект, "Товары");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьТекущийЭлемент_ТоварыКоличествоУпаковок()
	
	ТекущийЭлемент = Элементы.Товары;
	Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок;
	
	Элементы.Товары.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменитьСтроку()
	
	Элементы.Товары.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоНоменклатуре(ВидПоиска = "")
	
	ПарметрыФормыВыбора = Новый Структура;
	
	Если ЗначениеЗаполнено(ВидПоиска) Тогда
		ПарметрыФормыВыбора.Вставить("ВидПоиска", ВидПоиска);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий, Ложь);
	
	ВыбранноеЗначение = ОткрытьФормуВыбораСправочника("Номенклатура", ПарметрыФормыВыбора);
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ДобавитьНоменклатуруВТабЧасть(ВыбранноеЗначение, Неопределено, Неопределено, 1, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
&НаКлиенте
Функция ФорматСуммКлиент(Знач Сумма, Валюта = "грн.", ЧН = "", ЧРГ = "") Экспорт
	
	Сумма = ?(Сумма < 0, -Сумма, Сумма);
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
					?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
					?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	
	Возврат РезультирующаяСтрока;

КонецФункции

&НаКлиенте
Процедура ОбновитьФорму(ЭтоПлюсОдин = Ложь, СообщатьОплатаЧастями = Ложь, ТипУслуги = Неопределено)
	
	УстановитьЗаголовок();
	//+HVOYA Mykhailo
	ОбновитьИнформациюПродаж(ЭтоПлюсОдин);
	ОбновитьИнформациюОбщейСуммы();

	СписокТиповУслугБанка = Новый Массив;
	СписокТиповУслугБанка.Добавить(ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.ОплатаЧастями"));
	СписокТиповУслугБанка.Добавить(ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.ПакетМалыша"));

	Для каждого ТипУслугиСписка Из СписокТиповУслугБанка Цикл

		Если ТипУслуги = Неопределено ИЛИ ТипУслуги = ТипУслугиСписка Тогда

			УстановитьОформлениеКнопкиБанковскойУслуги(ТипУслугиСписка, СообщатьОплатаЧастями);

		КонецЕсли;

	КонецЦикла;

	УстановитьОформлениеЭлементов();	//	LNK 16.02.2021 09:25:33
	УстановитьТекущийЭлемент();	//	LNK 13.09.2017 08:17:04
	//-HVOYA Mykhailo

	УстановитьДоступностьКомандУслугаБанка();	//	LNK 21.12.2020 09:59:17
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСуммуДокументаБезСкидки() Экспорт

	СуммаДокумента = 0;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		ИспользуемоеКоличество = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Упаковка), СтрокаТабличнойЧасти.КоличествоУпаковок, СтрокаТабличнойЧасти.Количество);
		СуммаПоСтроке = Окр(СтрокаТабличнойЧасти.Цена * ИспользуемоеКоличество, 2);
		СуммаДокумента = СуммаДокумента + СуммаПоСтроке + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
		
	КонецЦикла;

	Возврат СуммаДокумента;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)

	ЭтоДокументВозврата = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат");

	Если НЕ ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя, "СчетНаОплатуПокупателю") ИЛИ ЭтоДокументВозврата Тогда
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));

		ДобавитьВСтруктуруДействияПересчетаСкидок(Ложь, Истина, СтруктураДействий);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПересчетаСкидок(ОчищатьРучные, ОчищатьАвтоматические, СтруктураДействий)

	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", ОчищатьРучные));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки"   , Новый Структура("Очищать", ОчищатьАвтоматические));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", ОчищатьАвтоматические));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано"  , Новый Структура("Очищать", ОчищатьАвтоматические));

КонецПроцедуры

// Получение  от пользователя числа 
//
// Параметры:
//  Заголовок - Строка;
//  ЧислоВвода - Число;
//  МаксимальноеЗначение - Число;
//
// Возвращаемое значение:
//   Булево
//
&НаКлиенте
Функция ПолучитьИнтерактивноЧисло(Заголовок, ЧислоВвода, МаксимальноеЗначение, Отрицательное, ВозвращатьЧислоСтрокой, ПрочитатьКарту = Ложь)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок"				, Заголовок);
	ПараметрыОткрытия.Вставить("МаксимальноеЗначение"	, МаксимальноеЗначение);
	ПараметрыОткрытия.Вставить("ЧислоВвода"				, ЧислоВвода);
	ПараметрыОткрытия.Вставить("Отрицательное"			, Отрицательное);
	ПараметрыОткрытия.Вставить("ВозвращатьЧислоСтрокой"	, ВозвращатьЧислоСтрокой);
	ПараметрыОткрытия.Вставить("ПрочитатьКарту"			, ПрочитатьКарту);	//	LNK 30.11.2022 07:26:27
	
	Результат = ОткрытьФормуМодально(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВводаЧисла", Объект.ИмяВнешнейОбработки)
		, ПараметрыОткрытия
		, УникальныйИдентификатор
	);

	Если НЕ Результат = Неопределено Тогда

			ЗначениеВыбораЧисло = Результат.ВведенноеЧисло;

			Если ЗначениеЗаполнено(ЗначениеВыбораЧисло) Тогда

					ЧислоВвода = ЗначениеВыбораЧисло;

			Иначе	ЧислоВвода = 0;

			КонецЕсли;

			Возврат Истина;

	Иначе	Возврат Ложь;

	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура УстановитьЗаголовок()
	
	ДекорацияЗаголовок = "";
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда

		ДекорацияЗаголовок = ?(ТестовыйРежимРМК, "РЕЖИМ ТЕСТ: ", "")
			+ "ПОВЕРНЕННЯ"
			+ ?(ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя), " по " + ПредставлениеДокумента(Объект.ЗаказПокупателя, НазваниеЗаказа())
			, ?(ЗначениеЗаполнено(Объект.ЧекККМПродажа)  , " по " + ПредставлениеДокумента(Объект.ЧекККМПродажа, "ПРОДАЖ"), ""));

	ИначеЕсли ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя) Тогда

		ДекорацияЗаголовок = ?(ТестовыйРежимРМК, "РЕЖИМ ТЕСТ: ", "") + ПредставлениеДокумента(Объект.ЗаказПокупателя, НазваниеЗаказа());

	Иначе

		ДекорацияЗаголовок = ?(ТестовыйРежимРМК, "РЕЖИМ ТЕСТ: ","")
			+ "!!! F5 - СЧИТАТИ ДИСКОНТНУ КАРТКУ !!! "
			+ "ПРОДАЖ";

	КонецЕсли;
	
	Пользователь = глЗначениеПеременной("ПользовательИзмененныхПрав");

	Если ЗначениеЗаполнено(Объект.Продавец) Тогда
		ДекорацияЗаголовок = ДекорацияЗаголовок + " - " + Объект.Продавец
	КонецЕсли;

	Заголовок = Объект.Версия + ":" + ДекорацияЗаголовок; // +HVOYA Mykhailo : напоминаем кассиру про новый функционал F5

КонецПроцедуры

&НаСервере	//	LNK 01.02.2019 14:36:15
Функция ПредставлениеДокумента(ДокументСсылка, Префикс = "")

	Запрос = Новый Запрос(СтрЗаменить(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.Номер КАК Номер,
	|	ТаблицаДокумента.Дата КАК Дата
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка"
	, "Документ.ЗаказПокупателя КАК", "Документ." + ДокументСсылка.Метаданные().Имя + " КАК")
	);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);

	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		Выборка = Результат.Выбрать();
		Выборка.Следующий();

		Представление = ?(ПустаяСтрока(Префикс), "", Префикс + " ")
			+ СокрЛП(Выборка.Номер) + " " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy");

	Иначе

		Представление = "";

	КонецЕсли;

	Возврат Представление;

КонецФункции

&НаКлиенте
Функция НазваниеЗаказа()

	Возврат ?(ТипЗнч(Объект.ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя"), "ІНТЕРНЕТ-ЗАМОВЛЕННЯ",
			?(ТипЗнч(Объект.ЗаказПокупателя) = Тип("ДокументСсылка.СчетНаОплатуПокупателю"), "РАХУНОК НА ОПЛАТУ", ""));

КонецФункции

&НаКлиенте
Процедура ДобавитьБыстрыйТовар(ИдентификаторБыстрогоТовара)
	
	МассивСтрок = ТаблицаБыстрыхТоваров.НайтиСтроки(Новый Структура("ИдентификаторБыстрогоТовара", ИдентификаторБыстрогоТовара));
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		СтрокаБыстрыхТоваров = МассивСтрок[0];
		ДобавитьНоменклатуруВТабЧасть(СтрокаБыстрыхТоваров.Номенклатура, СтрокаБыстрыхТоваров.Характеристика, Неопределено, 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбраннаяКассаККМ()

	Если ТаблицаКассККМОрганизаций.Количество() > 1 Тогда
	
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("КассыККМ"   , МассивКассККМКлиент);
		ПараметрыОткрытия.Вставить("Организации", МассивОрганизацийКлиент);
		
		Результат = ОткрытьФормуМодально(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВыбораКассыККМ", Объект.ИмяВнешнейОбработки), ПараметрыОткрытия, УникальныйИдентификатор);
		
		Если НЕ Результат = Неопределено И ТипЗнч(Результат) = Тип("Структура") Тогда

			ЗначениеВыбораКасса = Результат.Касса;

		Иначе

			//ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
			Возврат ПредопределенноеЗначение("Справочник.КассыККМ.ПустаяСсылка");

		КонецЕсли;
	Иначе
		ЗначениеВыбораКасса = МассивКассККМКлиент[0];
	КонецЕсли;
	
	Возврат ЗначениеВыбораКасса

КонецФункции

&НаСервере
Процедура ДозаполнитьТаблицыОбъекта()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьОрганизациюПродажиВТЧСервер(Объект.Товары, Новый Структура("Магазин", Объект.Магазин));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьОрганизациюВСериях(Объект.Товары, Объект.Серии);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
	ЗаполнитьОстаткиСервер();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Скидки

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидкиКлиент(ТолькоСообщенияПослеОформления = Ложь, НеВыводитьСообщения = Ложь, Отказ)
	
	ДанныеРасчетаCRM = Неопределено;

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")
	ИЛИ ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя)
	ИЛИ НЕ Объект.ДоговорСтрахования.Пустая() Тогда

		Возврат;

	КонецЕсли; 

	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                НЕ ТолькоСообщенияПослеОформления);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
	СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   ТолькоСообщенияПослеОформления);
	СтруктураПараметры.Вставить("ПорядковыйНомерПродажи",           ПорядковыйНомерПродажи);
	СтруктураПараметры.Вставить("НеВыводитьСообщения",   			НеВыводитьСообщения);

	Объект.Дата = ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера();

	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО

			РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();

	Иначе	РабочееМесто = ""

	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	КонтролироватьОстаткиТоваровПриЗакрытииЧека = ИспользоватьНастройкуРМК 
												И НаборПравИНастроек.КонтролироватьОстаткиТоваровПриЗакрытииЧека 
												И НЕ ЭтоРабочееМестоOffLine;
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", КонтролироватьОстаткиТоваровПриЗакрытииЧека);
	
	//Сичкаренко 10.12.2020
	СтруктураПараметры.Вставить("МаксимальнаяСуммаНакопленияЛояльности", ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику(ТекущаяДата()).МаксимальнаяСуммаНакопленияЛояльности);
	СтруктураПараметры.Вставить("ИспользоватьПрограммуЛояльности", Объект.ИспользоватьПрограммуЛояльности);

	Попытка

				СтруктураПараметры.Вставить("Накопленно", ДанныеКарты.СуммаПокупок);

	Исключение	СтруктураПараметры.Вставить("Накопленно", 0);

	КонецПопытки;

	СтруктураПараметры.Вставить("ПродажаПоКредитнойПрограмме", БонусныеБаллыВызовСервера.ПродажаПоКредитнойПрограмме(УслугаБанкаДанные));	//	LNK 15.03.2021 12:15:04
	СтруктураПараметры.Вставить("ДатаРасчета", ТекущаяДата());	//	LNK 19.05.2021 07:36:49

	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);

	Если ВывестиСообщения И НЕ НеВыводитьСообщения Тогда

		СкидкиНаценкиКлиент.ОткрытьФормуВыводаСообщений(АдресПримененныхСкидокВоВременномХранилище);

	КонецЕсли;
	
	УдалитьИзТоваровЧекаПогашаемыеСкидочныеКупоны();	//	LNK 07.09.2021 05:21:28
	
	Если НЕ ТолькоСообщенияПослеОформления Тогда
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		
	КонецЕсли;
	
	ОтобразитьСкидки();
	ОбновитьФорму(); // Пересмотреть при оплате чека внутри обновить форму устанавливает курсор в поле поискШК

	ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");

КонецПроцедуры

&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	Если Объект.КартаСотрудника И Объект.ИспользоватьПрограммуЛояльности Тогда
		
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл 
			Если Не СтрокаТЧ.АкционнаяЦена Тогда
				
				СтрокаТЧ.Цена = СтрокаТЧ.ОпорнаяЦена;
				СтрокаТЧ.Сумма = СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена;
				
			КонецЕсли;
		КонецЦикла;
	Иначе 
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл 
			Если Не СтрокаТЧ.АкционнаяЦена Тогда
				
				СтрокаТЧ.Цена = СтрокаТЧ.ЦенаСтандартная;
				СтрокаТЧ.Сумма = СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	УсловияВыполненные.Очистить();

	СкидкиНаценкиСервер.ОтменитьАвтоматическиеСкидки(Объект, "Товары", Истина, НаборПравИНастроек.ПродажиАктивированы);
//	в строке выше будут очищены автоматически начисленные бонусные баллы
	СкидкиНаценкиСервер.ОтменитьОплатуБонуснымиБалламиУправляемую(Объект, "Товары");

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОтобразитьСкидки();

	НаборПравИНастроек.Вставить("РесурсWebRetailДоступен", РозничныеПродажиСлужебный.РесурсWebRetailДоступен());

	ДанныеРасчетаСкидок = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	ПримененныеСкидки = ДанныеРасчетаСкидок[0].Результаты;
	
	ВывестиСообщения = Ложь;

	Если НЕ ПримененныеСкидки = Неопределено Тогда

	//	LNK 14.05.2021 12:48:36
		УсловияВыполненные.Очистить();

		Для каждого СтрокаПодарков Из ПримененныеСкидки.ТаблицаПодарков Цикл

			Для каждого ЭлементУсловий Из СтрокаПодарков.НоменклатураУсловий Цикл

				СтрокаУсловий = УсловияВыполненные.Добавить();
				СтрокаУсловий.СкидкаНаценка = СтрокаПодарков.СкидкаНаценка;
				СтрокаУсловий.Номенклатура  = ЭлементУсловий.Ключ;

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;
	
//	ПроверитьПринятиеКупоновПогашенных_УДАЛИТЬ(Объект, ПримененныеСкидки);
	ПроверитьПринятиеКупоновПогашенных(Объект, ДанныеРасчетаСкидок);	//	LNK 18.10.2022 04:16:23

	Если НЕ ПримененныеСкидки = Неопределено Тогда

		// +HVOYA. 29.08.2016 11:29:44, Львова Е.А.
		// получим ДР владельца ДК и его детей, чтобы сообщить детали кассиру
		МассивДР = МаркетинговыеАкцииСервер.hiПолучитьДниРожденийВладельцаДК(Объект.ВладелецДисконтнойКарты);
		// проверим, воспользовался ли клиент скидкой на др ребенка за последнюю неделю
		МассивСкидкаДРЗаНеделю = МаркетинговыеАкцииСервер.hiПолучитьСкидкуНаДРРебенкаЗаИнтервал(Объект.ВладелецДисконтнойКарты);

		ТекстДР = "";

		Для каждого Элемент Из МассивДР Цикл

			МесяцРождения = Месяц(Элемент.ДатаРождения);
			ДеньРождения = День(Элемент.ДатаРождения);
			ТекущийГод = Год(ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера());

		//	LNK 17.01.2017 10:52:04
			Попытка

				ДатаТекущегоГода = Дата(ТекущийГод, МесяцРождения, ДеньРождения);

			Исключение

				ЗафиксироватьОшибку(ОписаниеОшибки(), "РассчитатьСкидкиНаценкиНаСервере");	//	LNK 04.09.2018 14:16:54

				Если МесяцРождения = 2 И ДеньРождения = 29 Тогда

				//	вот же повезло человеку! ... 29 февраля. Переносим на 1 марта
					ДатаТекущегоГода = Дата(ТекущийГод, 3, 1);

				КонецЕсли;

			КонецПопытки;

			ДатаПредыдущегоГода = ДобавитьМесяц(ДатаТекущегоГода, -12);
			ДатаСледующегоГода  = ДобавитьМесяц(ДатаТекущегоГода, 12);
			
			Если ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера() < ДатаТекущегоГода Тогда 
				Разность = ДатаТекущегоГода - ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера();
			Иначе
				Разность = ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера() - ДатаТекущегоГода;
			КонецЕсли;
			
			Если Разность > (ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера() - ДатаПредыдущегоГода) Тогда 
				ДатаРождения = ДатаПредыдущегоГода;
			ИначеЕсли Разность > (ДатаСледующегоГода - ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера()) Тогда 
				ДатаРождения = ДатаСледующегоГода;
			Иначе
				ДатаРождения = ДатаТекущегоГода;
			КонецЕсли;
			
		    Если ДатаРождения >= НачалоДня(ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера()-7*24*60*60) И ДатаРождения <= НачалоДня(ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера()+8*24*60*60) И НЕ Элемент.ДатаРождения =  '00010101000000' И Элемент.Ребенок Тогда
	            ТекстДР = ТекстДР + Строка(Элемент.Имя + " именинник " + Формат(Элемент.ДатаРождения,"ДЛФ=DD") + Символы.ПС + Символы.ПС);
	        ИначеЕсли ДатаРождения >= НачалоДня(ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера()) И ДатаРождения <= НачалоДня(ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера()) И НЕ Элемент.ДатаРождения =  '00010101000000' И НЕ Элемент.Ребенок Тогда
	            ТекстДР = ТекстДР + Строка("Владелец дисконтной карты " + Элемент.Имя + " именинник сегодня" + Символы.ПС);
	        КонецЕсли;
	        
			Если Элемент.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
			    ТекстДР = СтрЗаменить(ТекстДР, "именинник", "именинница");			
			КонецЕсли;
				
		КонецЦикла;
		
		Если НЕ МассивСкидкаДРЗаНеделю.Количество() = 0 Тогда
			ТекстДР = ТекстДР + Строка("Внимание!!!" + Символы.ПС + "Скидка на день рождения ребенка уже использована " + МассивСкидкаДРЗаНеделю[0].ДатаПродажи + " в магазине " + МассивСкидкаДРЗаНеделю[0].МагазинПродажи + ".");
		КонецЕсли;
		
		// если уже есть сообщение на тему ДР - добавим в него данные с именами и датами именинников
		Для каждого Строка Из ПримененныеСкидки.ТаблицаСообщений Цикл
			ЭтоСообщениеДР = Найти(Строка.ТекстСообщения, "рождения");
			Если НЕ ЭтоСообщениеДР=0 Тогда
				Строка.ТекстСообщения = Строка.ТекстСообщения + Символы.ПС + Символы.ПС + Строка(ТекстДР);
				МассивСообщенийДР = Новый Массив;
				МассивСообщенийДР.Добавить(Строка.ТекстСообщения);
			КонецЕсли;
			ЭтоСообщениеКупон = Найти(Строка.ТекстСообщения, "купон");
			Если НЕ ЭтоСообщениеКупон=0 Тогда
				Объект.НоменклатураСкидочногоКупона = Строка.НоменклатураСкидочногоКупона;
				Объект.ВариантВыдачиКупона = Строка.ВариантВыдачиКупона;
			КонецЕсли;
		КонецЦикла;
		
		// если таких сообщений нет (ДР у самого клиента) - выведем сообщение, чтобы кассир его поздравил
		Если МассивСообщенийДР = Неопределено И НЕ ТекстДР="" И НЕ СтруктураПараметры.ТолькоСообщенияПослеОформления Тогда
			НовоеСообщение = ПримененныеСкидки.ТаблицаСообщений.Добавить();
			НовоеСообщение.ТекстСообщения = ТекстДР;
		КонецЕсли;
		// -HVOYA. 29.08.2016 11:29:44, Львова Е.А.
		
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ДанныеРасчетаСкидок, УникальныйИдентификатор);

		Если ПримененныеСкидки.ТаблицаСообщений.Количество() > 0 Тогда
			ВывестиСообщения = Истина;
		КонецЕсли;

		Модифицированность = НЕ СтруктураПараметры.ТолькоСообщенияПослеОформления;

	КонецЕсли;
	
	СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(Объект, "Товары", "СкидкиНаценки");
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
	
		Объект.СкидкиРассчитаны = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиСкидкиПодаркиВТоварыСервер()
	
	СкидкиНаценкиСерверПереопределяемый.ПеренестиСкидкиПодаркиВТовары(Объект, Объект.ЦенаВключаетНДС);

	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	ОтобразитьСкидки();

КонецПроцедуры

&НаКлиенте	//	LNK 25.09.2019 10:49:49
Функция ПолученНомерШтрихкодКупонаCRM(НомерКупона)
//{
//    "succes": TRUE, // true - успех , false -ошибка
//    "cuponStatus":1
//    "error":""
//}
//0 - найден, но не актуален - это купон
//1 - найден и может быть принят - это купон
//2 - не найден

	СтруктураПараметровКлиента = Новый Структура(
		"ПрекратитьПоиск", Ложь);

	ДанныеОтвета = ОбменMicrosoftDynamicsСлужебный.ПолучитьДанныеКупона(НомерКупона);

	Если ДанныеОтвета.success = Истина Тогда

		СтруктураПараметровКлиента.Вставить("ДобавитьСерийныеНомераCRM");
		СтруктураПараметровКлиента.Вставить("ТекстСообщения", "");

		Если ДанныеОтвета.data.cuponStatus = 1 Тогда

			СтруктураПараметровКлиента.ДобавитьСерийныеНомераCRM = Новый Структура(
				"Номенклатура, СерийныйНомер"
				, ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"), НомерКупона);
			СтруктураПараметровКлиента.ПрекратитьПоиск = Истина;

		ИначеЕсли ДанныеОтвета.data.cuponStatus = 0 Тогда

			СтруктураПараметровКлиента.ТекстСообщения = "Отказано!" + Символы.ПС + "Номер «" + НомерКупона + "» НЕ актуален.";

		КонецЕсли;

	Иначе

		Если СтрДлина(НомерКупона) > 13 Тогда

			ЖурналСобытий.Регистрация("CRM.Купоны", "Предупреждение"
			,,,, "Купон «" + НомерКупона + "» НЕ отработан (success=False)", "Метаданные.Документы.ЧекККМ", Истина);

		КонецЕсли;

	КонецЕсли;

	Возврат СтруктураПараметровКлиента;

КонецФункции

&НаКлиенте	//	LNK 26.09.2019 12:47:50
Процедура РМК_Купоны(Команда)

	ПараметрыОткрытия = Новый Структура(
		"АдресТаблицыСкидочныхКупонов", АдресТаблицыСкидочныхКупонов());
	ДополнительныеПараметры = Новый Структура;

	ОписаниеОповещения = Новый ОписаниеОповещения("РМК_КупоныЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаПогашенияСкидочныхКупонов", Объект.ИмяВнешнейОбработки)
		, ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте	//	LNK 26.09.2019 12:48:34
Процедура РМК_КупоныЗавершение(Значение, ДополнительныеПараметры)	Экспорт

	Если ТипЗнч(Значение) = Тип("Структура") Тогда

		Если Значение.Свойство("АдресТаблицыСкидочныхКупонов") Тогда

			РМК_КупоныЗавершениеНаСервере(Значение.АдресТаблицыСкидочныхКупонов);

		КонецЕсли;

	КонецЕсли;

	УстановитьОформлениеЭлементов();

КонецПроцедуры

&НаСервере	//	LNK 27.09.2019 11:02:25
Процедура РМК_КупоныЗавершениеНаСервере(АдресТаблицыСкидочныхКупонов)

	Объект.ПогашениеСкидочныхКупонов.Загрузить(ПолучитьИзВременногоХранилища(АдресТаблицыСкидочныхКупонов));

КонецПроцедуры

&НаСервере	//	LNK 27.09.2019 10:59:14
Функция АдресТаблицыСкидочныхКупонов()

	Возврат ПоместитьВоВременноеХранилище(Объект.ПогашениеСкидочныхКупонов.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервереБезКонтекста	//	LNK 18.10.2022 04:18:37
Процедура ПроверитьПринятиеКупоновПогашенных(Объект, ДанныеРасчетаСкидок)

	ТаблицаСообщений = ДанныеРасчетаСкидок[0].Результаты.ТаблицаСообщений;
	СтрокиНаУдаление = Новый Массив;

	Для каждого СтрокаТабличнойЧасти Из Объект.ПогашениеСкидочныхКупонов Цикл

		Если НЕ СтрокаТабличнойЧасти.Принят Тогда

			СтрокаСообщения = ТаблицаСообщений.Добавить();
			СтрокаСообщения.ТекстСообщения = "Скидочный купон "
			+ ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СерийныйНомер)
				, СокрЛП(СтрокаТабличнойЧасти.СерийныйНомер) + " "
				, "")
			+ "«" + СтрокаТабличнойЧасти.СкидочныйКупон + "»" + Символы.ПС + "НЕ ПРИНЯТ." + Символы.ПС + "Верните купон владельцу.";

			СтрокиНаУдаление.Добавить(СтрокаТабличнойЧасти);

		КонецЕсли;

	КонецЦикла;

//	---------------------------------------------------------------------------------------

	Для каждого СтрокаТабличнойЧасти Из СтрокиНаУдаление Цикл

		Объект.ПогашениеСкидочныхКупонов.Удалить(СтрокаТабличнойЧасти);
				
		СтрокиТовары = Объект.Товары.НайтиСтроки(
			Новый Структура("Номенклатура", СтрокаТабличнойЧасти.СкидочныйКупон));

		Для каждого СтрокаТабличнойЧасти Из СтрокиТовары Цикл

			Объект.Товары.Удалить(СтрокаТабличнойЧасти);

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста	//	LNK 18.10.2022 04:07:11
Процедура ПроверитьПринятиеКупоновПогашенных_УДАЛИТЬ(Объект, ПримененныеСкидки)

	Если НЕ ПримененныеСкидки = Неопределено Тогда

	//	HVOYA. 02.09.2016 15:44:13, Львова Е.А.
	//	Проверим, есть ли в сработавших на чек условиях условие по скидочному купону из ТЧ к погашению.
		СписокПодарков = ПримененныеСкидки.ТаблицаПодарков.ВыгрузитьКолонку("СкидкаНаценка");
		СписокСкидок   = ПримененныеСкидки.ТаблицаСкидкиНаценки.ВыгрузитьКолонку("СкидкаНаценка");
		
		Для каждого ЭлементМассива Из СписокПодарков Цикл

			СписокСкидок.Добавить(ЭлементМассива);

		КонецЦикла; 

	Иначе	СписокСкидок = Новый Массив;

	КонецЕсли;
	
	Если НЕ СписокСкидок.Количество() = 0 Тогда

		СписокКупонов = Новый Массив;

		Для каждого СтрокаТабличнойЧасти Из Объект.ПогашениеСкидочныхКупонов Цикл

			СписокКупонов.Добавить(СтрокаТабличнойЧасти.СкидочныйКупон);

		КонецЦикла; 

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УсловияСкидок.Ссылка КАК Ссылка,
		|	ПолучателиСкидок.Получатель КАК Получатель
		|ПОМЕСТИТЬ ВТ_ОтработаныйКупон
		|ИЗ
		|	Справочник.СкидкиНаценки.УсловияПредоставления КАК УсловияСкидок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок.Получатели КАК ПолучателиСкидок
		|		ПО УсловияСкидок.УсловиеПредоставления = ПолучателиСкидок.Ссылка
		|ГДЕ
		|	УсловияСкидок.Ссылка В(&СписокСкидок)
		|	И ПолучателиСкидок.Получатель В(&СписокКупонов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НоменклатураКупона.СкидочныйКупон КАК СкидочныйКупон
		|ПОМЕСТИТЬ ВТ_Купоны
		|ИЗ
		|	&ТаблицаКупонов КАК НоменклатураКупона
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Купоны.СкидочныйКупон КАК СкидочныйКупон
		|ИЗ
		|	ВТ_Купоны КАК ВТ_Купоны
		|ГДЕ
		|	НЕ ВТ_Купоны.СкидочныйКупон В
		|				(ВЫБРАТЬ
		|					ВТ_ОтработаныйКупон.Получатель
		|				ИЗ
		|					ВТ_ОтработаныйКупон КАК ВТ_ОтработаныйКупон)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ОтработаныйКупон
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Купоны"
		);
		Запрос.УстановитьПараметр("СписокСкидок"  , СписокСкидок);
		Запрос.УстановитьПараметр("СписокКупонов" , СписокКупонов);
		Запрос.УстановитьПараметр("ТаблицаКупонов", Объект.ПогашениеСкидочныхКупонов.Выгрузить());
		
		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда

			Выборка = Результат.Выбрать();

			Пока Выборка.Следующий() Цикл

				НовоеСообщение = ПримененныеСкидки.ТаблицаСообщений.Добавить();
				НовоеСообщение.ТекстСообщения = ("Скидочный купон " + Выборка.СкидочныйКупон + " не сработал." + Символы.ПС + "Верните купон владельцу.");	
				
				СтрокиДляУдаления = Объект.ПогашениеСкидочныхКупонов.НайтиСтроки(
					Новый Структура("СкидочныйКупон", Выборка.СкидочныйКупон));

				Для каждого СтрокаУдалить Из СтрокиДляУдаления Цикл

					Объект.ПогашениеСкидочныхКупонов.Удалить(СтрокаУдалить);

				КонецЦикла;
				
				СтрокиДляУдаления = Объект.Товары.НайтиСтроки(
					Новый Структура("Номенклатура", Выборка.СкидочныйКупон));

				Для каждого СтрокаУдалить Из СтрокиДляУдаления Цикл

					Объект.Товары.Удалить(СтрокаУдалить);

				КонецЦикла;

			КонецЦикла; 

		КонецЕсли;

	КонецЕсли; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Серии и подарочные сертификаты

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	
КонецФункции

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(ОБъект.Товары, Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСерии()
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтотОбъект,ПараметрыУказанияСерий) Тогда
		ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы + "РМК",ПараметрыФормыУказанияСерий,ЭтотОбъект);
		
		Если ЗначениеВозврата <> Неопределено Тогда
			ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
			
			ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
			
			ОбновитьФорму();
			WSHShell = Новый COMОбъект("WScript.Shell"); 				WSHShell.SendKeys("{F10}{F10}");

			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
				СброситьФлагСкидкиРассчитаны();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьИспользованиеСерийныхНомеров(Номенклатура)

	Результат          = Истина;
	ЗначениеРеквизитов = ОбщегоНазначенияРТ.ПолучитьЗначенияРеквизитовОбъекта(Номенклатура,
			Новый Структура("ИспользоватьСерийныеНомера, ТипНоменклатуры, Представление"));

	// +HVOYA. 24.08.2016 0:56:02, Львова Е.А.
	//Если НЕ ЗначениеРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
	Если (НЕ ЗначениеРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"))
		И (НЕ ЗначениеРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.СкидочныйКупон")) Тогда
	// -HVOYA. 24.08.2016 0:56:17, Львова Е.А.

		Результат = Ложь;

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
			СтрЗаменить("Номенклатура «%1%» не является подарочным сертификатом!", "%1%", ЗначениеРеквизитов.Представление)
		);
		
	ИначеЕсли Не ЗначениеРеквизитов.ИспользоватьСерийныеНомера Тогда

		Результат = Ложь;

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
			СтрЗаменить("Для номенклатуры «%1%» не используются номера подарочных сертификатов!", "%1%", ЗначениеРеквизитов.Представление)
		);

	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ДобавитьСерийныйНомер(СтрокаТЧ)
	
	Если СтрокаТЧ = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
		Возврат Ложь;
	ИначеЕсли НЕ СтрокаТЧ.ИспользоватьСерийныеНомера Тогда
		// +HVOYA. 05.10.2016 10:45:13, Львова Е.А.
		ЗначениеРеквизитов = ОбщегоНазначенияРТ.ПолучитьЗначенияРеквизитовОбъекта(СтрокаТЧ.Номенклатура,
		Новый Структура("ИспользоватьСерийныеНомера, ТипНоменклатуры, Представление"));
		
		Если ЗначениеРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.СкидочныйКупон") Тогда
			Если ЭтоПогашениеКупона Тогда
				СтрокаПогашенияКупона = Объект.ПогашениеСкидочныхКупонов.Добавить();
				СтрокаПогашенияКупона.СкидочныйКупон = СтрокаТЧ.Номенклатура;
			КонецЕсли;
		КонецЕсли;
		// -HVOYA. 05.10.2016 10:56:51, Львова Е.А.
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПодключаемоеОборудование

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод, ДополнительныйПараметрПоискаКарты = Неопределено, КолВСтроке = 1)

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаВесовыхТоваров");
	СтруктураДействий.Вставить("ПроверкаТоваров");
	СтруктураДействий.Вставить("ИспользоватьДополнительныеКолонки");
	СтруктураДействий.Вставить("РаботаетФронт");
	
	СтруктураПараметровДействия = Новый Структура;
	СтруктураПараметровДействия.Вставить("РегистрацияНовойКарты", Истина);
	
	Если НЕ ДополнительныйПараметрПоискаКарты = Неопределено Тогда

		СтруктураПараметровДействия.Вставить(ДополнительныйПараметрПоискаКарты);

	КонецЕсли;

	СтруктураДействий.Вставить("ПроверкаКарт", СтруктураПараметровДействия);
//	LNK 17.02.2020 10:29:42
	СтруктураДействий.Вставить("ПроверкаПодарочныхСертификатовПродажа"
		, Новый Структура(
			"Магазин, РесурсWebRetailДоступен"
			, Объект.Магазин
			, НаборПравИНастроек.РесурсWebRetailДоступен)
	);

	СтруктураДействий.Вставить("ПроверкаСерийныхНомеров");

	Возврат ПодключаемоеОборудованиеРТ.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзТСД(Штрихкод, Количество) 
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаВесовыхТоваров");
	СтруктураДействий.Вставить("ПроверкаТоваров");
	СтруктураДействий.Вставить("ИспользоватьКоличество", Количество);

	Если НЕ НаборПравИНастроек.ПродажиАктивированы Тогда	//	LNK 25.09.2019 10:34:42

		СтруктураДействий.Вставить("ПроверкаСерийныхНомеров");	

	КонецЕсли;

	Возврат ПодключаемоеОборудованиеРТ.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкодыИзТСД(ДанныеШтрикодов) Экспорт
	
	Для Индекс = 0 По ДанныеШтрикодов.Количество() - 1 Цикл
		ТекКод = ДанныеШтрикодов[Индекс].Штрихкод;
		ТекКоличество = ДанныеШтрикодов[Индекс].Количество;
		СтруктураПараметровКлиента = ПолученШтрихкодИзТСД(ТекКод, ТекКоличество);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНайденныеПозицииТоваров(СтруктураПараметров, КоличествоУпаковок = 1, ШКод = Неопределено) 

	ДобавитьНоменклатуруВТабЧасть(
		  СтруктураПараметров.Номенклатура
		, СтруктураПараметров.Характеристика
		, СтруктураПараметров.Упаковка
		, КоличествоУпаковок
		, Ложь
		,
		, ШКод
	);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВТоварыПодарочныйСертификатПродажа(ДанныеСертификата)

	ТекущаяСтрока = Объект.Товары.Добавить();
	ТекущаяСтрока.Номенклатура       = ДанныеСертификата.СерийныйНомер;
	ТекущаяСтрока.Владелец           = ДанныеСертификата.Владелец;
	ТекущаяСтрока.ТипНоменклатуры    = ДанныеСертификата.ТипНоменклатуры;
	ТекущаяСтрока.Цена               = ДанныеСертификата.Номинал;
	ТекущаяСтрока.Характеристика     = Неопределено;
	ТекущаяСтрока.Упаковка           = Неопределено;
	ТекущаяСтрока.АкционнаяЦена      = Истина;
	ТекущаяСтрока.КоличествоУпаковок = 1;
	ТекущаяСтрока.Штрихкод			 = ДанныеСертификата.КодСерийногоНомера;

	Элементы.Товары.ТекущаяСтрока    = ТекущаяСтрока.ПолучитьИдентификатор();
	
	ТоварыПриИзмененииНоменклатуры(ТекущаяСтрока, Ложь, Истина, Истина);
	
	СтруктураДействий = Новый Структура;

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда

		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано"  , Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));

		СброситьФлагСкидкиРассчитаны();

	Иначе

		СтруктураДействий.Вставить("ПересчитатьСуммуВозвратСУчетомОснования", Новый Структура("Основание", Объект.ЧекККМПродажа));

	КонецЕсли;

	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

	ТекущаяСтрока.Продавец = Объект.Продавец;

	Если НЕ ТекущаяСтрока = Неопределено Тогда

		ОбновлениеДисплеяПокупателя("ДобавлениеТовара");

	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Функция ДобавитьНайденныеИнформационныеКарты(ВыбранноеЗначение, АдресШаблоновВХранилище);
	
	ТаблицаШаблонов = ПолучитьИзВременногоХранилища(АдресШаблоновВХранилище);
	СтрокиШаблонов = ТаблицаШаблонов.НайтиСтроки(ВыбранноеЗначение);
	Если СтрокиШаблонов.Количество() > 0 Тогда
		СтруктураШаблонов = Новый Структура;
		ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВСтруктуру(ТаблицаШаблонов, СтрокиШаблонов[0], СтруктураШаблонов);
		Возврат ИнформационныеКарты.СоздатьДисконтнуюКарту(СтруктураШаблонов);
	Иначе
		Возврат ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ДобавитьНайденныеСерийныеНомера(СтруктураПараметров) 

	Если СтруктураПараметров.Свойство("Количество") Тогда 

			КоличествоУпаковок = СтруктураПараметров.Количество;

	Иначе	КоличествоУпаковок = 1;

	КонецЕсли;
	
	Если НаборПравИНастроек.ПродажиАктивированы Тогда

		ДанныеКупона = Новый Структура(
			"ЯвляетсяКупоном, ТипНоменклатуры, ИспользоватьСерийныеНомера, НоминалКупона"
			, Истина
			, ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.СкидочныйКупон")
			, Истина
			, 0);

	Иначе

		ДанныеКупона = ПолучитьДанныеКупона(СтруктураПараметров.Номенклатура, СтруктураПараметров.СерийныйНомер);

	КонецЕсли;

	Если ДанныеКупона.ЯвляетсяКупоном Тогда

		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
		ПараметрыИнформации.ЗаголовокИнформации = "Ошибки подарочных сертификатов и скидочных купонов";

		Если ДанныеКупона.ИспользоватьСерийныеНомера Тогда

			СписокСтрок = Объект.ПогашениеСкидочныхКупонов.НайтиСтроки(Новый Структура("СерийныйНомер", СтруктураПараметров.СерийныйНомер));

			Если СписокСтрок.Количество() > 0 Тогда

				ПараметрыИнформации.ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"Номер купона «%1» вже міститься в цьому чеку", СтруктураПараметров.СерийныйНомер);
				ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

				Возврат Ложь;

			КонецЕсли;

		КонецЕсли;

		Для каждого СтрокаТовары Из Объект.Товары Цикл

			Если НЕ СтрокаТовары.ПричинаРучнойСкидки.Пустая() Тогда

				ПараметрыИнформации.ТекстИнформации =
					"Відмовлено! У чеку є ручна знижка, використання будь-яких знижок (і купонів) неприпустимо.";
				ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

				Возврат Ложь;

			КонецЕсли;

		КонецЦикла;

		Если ДанныеКупона.НоминалКупона = 0 И НЕ НаборПравИНастроек.ПродажиАктивированы Тогда

			СписокСтрок = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтруктураПараметров.Номенклатура));

			Если СписокСтрок.Количество() > 0 Тогда

				ПараметрыИнформации.ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"Знижковий купон номенклатури «%1» може бути застосований у чеку один раз", СтруктураПараметров.Номенклатура);
				ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

				Возврат Ложь;

			КонецЕсли;

			Если НЕ Объект.ПогашениеСкидочныхКупонов.Итог("НоминалКупона") = 0 Тогда

				ПараметрыИнформации.ТекстИнформации = 
					"Відмовлено! Для чека вже вказані купони з номіналом, несумісні з поточним купоном.";
				ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

				Возврат Ложь;

			КонецЕсли;

		Иначе

			Если НЕ ЗначениеЗаполнено(СтруктураПараметров.СерийныйНомер) Тогда

			//	.. а купона-то, собственно, и нет! Явная ошибка.
				ПараметрыИнформации.ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"Немає ідентифікації купона знижок номенклатури «%1»" + ?(НаборПравИНастроек.ПродажиАктивированы, "'", ", маючого номінал «%2»")
						, СтруктураПараметров.Номенклатура
						, Формат(ДанныеКупона.НоминалКупона, "ЧДЦ=2; ЧН=0,00; ЧГ="));
				ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

				Возврат Ложь;

			Иначе
				
			//	контроль во избежание повторного ввода купона.

				СписокСтрок = Объект.ПогашениеСкидочныхКупонов.НайтиСтроки(Новый Структура("СерийныйНомер", СтруктураПараметров.СерийныйНомер));

				Если СписокСтрок.Количество() > 0 Тогда

					ПараметрыИнформации.ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"Знижковий купон «%1» може бути застосований у чеку один раз", СтруктураПараметров.СерийныйНомер);
					ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

					Возврат Ложь;

				КонецЕсли;

				Если НЕ НаборПравИНастроек.ПродажиАктивированы Тогда	//	LNK 26.09.2019 10:56:09

					Если НЕ Объект.ПогашениеСкидочныхКупонов.Количество() = 0 И Объект.ПогашениеСкидочныхКупонов.Итог("НоминалКупона") = 0 Тогда

						ПараметрыИнформации.ТекстИнформации = 
							"Відмовлено! Для чека вже вказані купони без номіналу, несумісні з поточним купоном.";
						ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

						Возврат Ложь;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;	// - HVOYA 21.11.2016 13:31:11, Латышев А.А. 

	Если НЕ НаборПравИНастроек.ПродажиАктивированы Тогда	//	LNK 26.09.2019 10:46:25

		ДобавитьНоменклатуруВТабЧасть(СтруктураПараметров.Номенклатура, 
			СтруктураПараметров.Характеристика, 
			СтруктураПараметров.Упаковка, 
			КоличествоУпаковок, 
			Истина,
			СтруктураПараметров.СерийныйНомер);

	КонецЕсли;

	Если ЭтоПогашениеКупона И ДанныеКупона.ЯвляетсяКупоном Тогда	// + HVOYA 21.11.2016 11:15:10, Латышев А.А.

		ДобавитьПогашениеСкидочныхКупонов(СтруктураПараметров.Номенклатура, СтруктураПараметров.СерийныйНомер, ДанныеКупона.НоминалКупона);

	КонецЕсли; 

	Возврат Истина;

КонецФункции

&НаСервере	//	LNK 16.06.2020 14:33:20
Процедура ПроверитьВозможностьПогашенияСкидочныхКупонов(Отказ, СтрокаОшибки)

	МаркетинговыеАкцииПривилегированный.ПроверитьСерийныеНомераПогашенияКупонов(
		Объект.Товары.Выгрузить(Новый Структура("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.СкидочныйКупон)),
		Объект.ПогашениеСкидочныхКупонов.Выгрузить(),
		Отказ,
		СтрокаОшибки);

КонецПроцедуры

&НаКлиенте	//	LNK 26.06.2020 12:18:51
Процедура ДобавитьПогашениеСкидочныхКупонов(Номенклатура, СерийныйНомер = Неопределено, НоминалКупона = 0)

	Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда

		СтрокиКупонов = Объект.ПогашениеСкидочныхКупонов.НайтиСтроки(Новый Структура("СкидочныйКупон", Номенклатура));

		Если НЕ СтрокиКупонов.Количество() = 0 Тогда

		//	Уже есть такой безномерной купон..
			Возврат;

		КонецЕсли;

	КонецЕсли;

	СтрокаПогашенияКупона = Объект.ПогашениеСкидочныхКупонов.Добавить();
	СтрокаПогашенияКупона.СкидочныйКупон = Номенклатура;
	СтрокаПогашенияКупона.СерийныйНомер  = СерийныйНомер;
	СтрокаПогашенияКупона.НоминалКупона  = НоминалКупона;

	УстановитьОформлениеЭлементов();	//	LNK 27.09.2019 12:37:19

//	Если НаборПравИНастроек.ПродажиАктивированы Тогда
	Если ЗначениеЗаполнено(СерийныйНомер) Тогда

		ПоказатьОповещениеПользователя("Купон принят"
		,, "Купон «" + СерийныйНомер + "» принят и будет использован в текущем чеке"
		, БиблиотекаКартинок.Информация2_32);

	КонецЕсли;

КонецПроцедуры

// +HVOYA. 30.08.2016 17:13:51, Львова Е.А.
&НаСервере
Процедура ПроверитьПогашениеДобавленногоКупона_УДАЛИТЬ(ЭтоПогашениеКупона, Отказ, ПараметрыИнформации, СтрокаОшибки)
	
	МаркетинговыеАкцииСерверПривилегированный.hiПроверитьДвиженияСерийныхНомеровКупонов(
	Объект,
	Ложь,
	Истина,
	Объект.Товары.Выгрузить(),
	"Товары",
	Объект.СерийныеНомера.Выгрузить(),
	Отказ,
	СтрокаОшибки,
	ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера(), //+HVOYA Mykhailo ТекущаяДата()
	ЭтоПогашениеКупона
	);
	
	
КонецПроцедуры
// -HVOYA. 30.08.2016 17:14:21, Львова Е.А.

// Обработка магнитного или штрихового кода на клиенте
//
// Параметры
//  СтруктураПараметровКлиента - структура параметров
// 
&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод, КолВСтроке = 1,НеВыдавать = Ложь)
	
	Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") 
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО И НЕ НеВыдавать Тогда
		
		СтрокаСообщения = СтрЗаменить("Дані щодо коду не знайдені: %1%", "%1%", ТекКод);
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(СтрокаСообщения);

	ИначеЕсли СтруктураПараметровКлиента.Свойство("КартаБлокирована") И НЕ НеВыдавать Тогда	// +HVOYA. 04.01.2017 11:43:43, Львова Е.А.

        СтрокаСообщения = СтруктураПараметровКлиента.КартаБлокирована;
       	ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(СтрокаСообщения);

	ИначеЕсли СтруктураПараметровКлиента.Свойство("ТекстПредупреждения") Тогда
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(СтруктураПараметровКлиента.ТекстПредупреждения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойКарты") Тогда
		
		Если ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(СтруктураПараметровКлиента.ТекстВопросаНовойКарты) Тогда
			
			ИнформационнаяКарта = ИнформационныеКарты.СоздатьДисконтнуюКарту(СтруктураПараметровКлиента.РегистрацияНовойКарты);
			ИнформационныеКартыКлиент.ОповеститьОСозданииНовойКарты(ИнформационнаяКарта); 
			
			Если ЗначениеЗаполнено(ИнформационнаяКарта) Тогда
				Объект.ДисконтнаяКарта = ИнформационнаяКарта;
				Модифицированность = Истина;
				ДисконтнаяКартаПриИзменении();
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ПровестиОпрос") Тогда
		
		ПровестиОпрос(, ?(ТипЗнч(ДанныеКарты) = Тип("Структура"), ДанныеКарты.ВидДисконтнойКарты = ПредопределенноеЗначение("Справочник.ВидыДисконтныхКарт.ПредварительныеКартыЛояльности"), Ложь));
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойКартыВыборШаблона") Тогда
		
		Если ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(СтруктураПараметровКлиента.ТекстВопросаНовойКарты) Тогда
			
			ВыбранноеЗначение = ОткрытьФормуМодально("РегистрСведений.ШаблоныРегистрацииНовыхКарт.Форма.ШаблоныНовыхКарт", Новый Структура("АдресШаблоновВХранилище", СтруктураПараметровКлиента.РегистрацияНовойКартыВыборШаблона), ЭтотОбъект);
			Если ВыбранноеЗначение <> Неопределено Тогда
			
				ИнформационнаяКарта = ДобавитьНайденныеИнформационныеКарты(ВыбранноеЗначение, СтруктураПараметровКлиента.РегистрацияНовойКартыВыборШаблона);
				
				Если ЗначениеЗаполнено(ИнформационнаяКарта) Тогда
					Объект.ДисконтнаяКарта = ИнформационнаяКарта;
					Модифицированность = Истина;
					ДисконтнаяКартаПриИзменении();
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;

		БуфферПоляВвода = "";
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ВыборТоваров") Тогда
		
		Если ТоварыРазрешитьДобавить() Тогда

			ВыбранноеЗначение = ОткрытьФормуМодально("ОбщаяФорма.ВыборНоменклатуры", Новый Структура("АдресТоваровВХранилище", СтруктураПараметровКлиента.ВыборТоваров));

			Если ВыбранноеЗначение <> Неопределено Тогда
				
				ДобавитьНайденныеПозицииТоваров(ВыбранноеЗначение, КолВСтроке);
				
			КонецЕсли;

		КонецЕсли;

		БуфферПоляВвода = "";

	ИначеЕсли СтруктураПараметровКлиента.Свойство("ДобавитьТоварнуюПозицию") Тогда
		
		Если ТоварыРазрешитьДобавить() Тогда

			ВыбранноеЗначение = СтруктураПараметровКлиента.ДобавитьТоварнуюПозицию;

			Если МагазинуРазрешенаНоменклатурнаяПозиция(ВыбранноеЗначение, ТекКод) Тогда

				ДобавитьНайденныеПозицииТоваров(ВыбранноеЗначение, КолВСтроке, ТекКод);

			КонецЕсли;

		КонецЕсли;

		БуфферПоляВвода = "";
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ДобавитьПодарочныйСертификатПродажа") Тогда
		
		Если ТоварыРазрешитьДобавитьПодарочныйСертификат(СтруктураПараметровКлиента.ДобавитьПодарочныйСертификатПродажа) Тогда

			ДобавитьВТоварыПодарочныйСертификатПродажа(СтруктураПараметровКлиента.ДобавитьПодарочныйСертификатПродажа);

		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ДобавитьСерийныеНомера") Тогда
		
		Если ТоварыРазрешитьДобавить() Тогда

			ВыбранноеЗначение = СтруктураПараметровКлиента.ДобавитьСерийныеНомера;
			ДобавитьНайденныеСерийныеНомера(ВыбранноеЗначение);

		КонецЕсли;

		БуфферПоляВвода = "";

	ИначеЕсли СтруктураПараметровКлиента.Свойство("ДобавитьСерийныеНомераCRM") Тогда	//	LNK 25.09.2019 13:12:09

		Если ТипЗнч(СтруктураПараметровКлиента.ДобавитьСерийныеНомераCRM) = Тип("Структура") Тогда

			ДобавитьНайденныеСерийныеНомера(СтруктураПараметровКлиента.ДобавитьСерийныеНомераCRM);

		ИначеЕсли НЕ ПустаяСтрока(СтруктураПараметровКлиента.ТекстСообщения) Тогда

	       	ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Ответ внешней системы", СтруктураПараметровКлиента.ТекстСообщения);

		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьФорму();

КонецПроцедуры

//	LNK 26.04.2017 16:27:27
&НаКлиенте
Функция МагазинуРазрешенаНоменклатурнаяПозиция(ВыбранноеЗначение, НоменклатураКод)

	ПричинаПроблемы = "";
//	Проверим, разрешено ли магазину продавать выбранную позицию номенклатуры?
//	По умолчанию примем "Разрешено = Истина" во избежание проблем... потом можно изменить.

//	Проверимся на всякий случай - имеется ли такой ключ в структуре? Мало-ли откуда вызов прилетит ...
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда

		Если ВыбранноеЗначение.Свойство("Блокирован") И ВыбранноеЗначение.Блокирован = Истина Тогда

			ПричинаПроблемы = "выбранная позиция БЛОКИРОВАНА для продажи!";

		КонецЕсли;

		Если ПустаяСтрока(ПричинаПроблемы) И ВыбранноеЗначение.Свойство("НазначениеТовара") Тогда

			Если ВыбранноеЗначение.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда

				Если НЕ ДанныеМагазина.РазрешитьПродажуУслуг = Истина Тогда

					ПричинаПроблемы = "продажи услуг для магазина НЕ разрешены!";

				КонецЕсли;

			Иначе

				ПричинаПроблемы = РозничныеПродажиКлиентПовтИсп.РазрешитьПродажуТовара(
									ВыбранноеЗначение.НазначениеТовара
									, ДанныеМагазина.РазрешитьПродажуТоварОбычный
									, ДанныеМагазина.РазрешитьПродажуТоварСпециальный);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если НЕ ПустаяСтрока(ПричинаПроблемы) Тогда

		СтрокаСообщения = "Не дозволено використовувати «[%1%] %2%» для магазину No.%3% («%4%») по причині:" + Символы.ПС + "%5%";
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", СокрЛП(НоменклатураКод));
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ВыбранноеЗначение.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ДанныеМагазина.НомерМагазина);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%4%", ДанныеМагазина.Организация);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%5%", ПричинаПроблемы);
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Позиція не дозволена до продажу!", СтрокаСообщения);

	КонецЕсли;

	Возврат ПустаяСтрока(ПричинаПроблемы);

КонецФункции

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод, ДополнительныйПараметрПоискаКарты = Неопределено)
	
	СтруктураДействий = Новый Структура;

	Если НЕ НаборПравИНастроек.ПродажиАктивированы Тогда	//	LNK 25.09.2019 10:34:42

		СтруктураДействий.Вставить("ПроверкаСерийныхНомеров");

	КонецЕсли;
	
	СтруктураПараметровДействия = Новый Структура;
	СтруктураПараметровДействия.Вставить("РегистрацияНовойКарты", Истина);
	
	Если НЕ ДополнительныйПараметрПоискаКарты = Неопределено Тогда
		СтруктураПараметровДействия.Вставить(ДополнительныйПараметрПоискаКарты);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПроверкаКарт", СтруктураПараметровДействия);
	
	Возврат ПодключаемоеОборудованиеРТ.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

&НаКлиенте	//	LNK 08.10.2019 11:48:26
Функция ПолучитьДанныеПокупателяИзВнешнейСистемыКлиент(КодКарты, НомерТелефона, СообщатьОбОшибке)

	Перем СписокСообщений;

	ТекстСообщения = ПолучитьДанныеПокупателяИзВнешнейСистемы(КодКарты, НомерТелефона, СписокСообщений);

	Если ПустаяСтрока(ТекстСообщения) Тогда

		Если ТипЗнч(СписокСообщений) = Тип("Массив") И НЕ СписокСообщений.Количество() = 0 Тогда

			АдресСообщенияКассиру = ПоместитьВоВременноеХранилище(СписокСообщений, УникальныйИдентификатор);

			СкидкиНаценкиКлиент.ОткрытьФормуВыводаСообщений(АдресСообщенияКассиру);

			УдалитьИзВременногоХранилища(АдресСообщенияКассиру);

		КонецЕсли;

	ИначеЕсли СообщатьОбОшибке = Истина Тогда

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
			"Неудачная попытка поиска покупателя"
			, ТекстСообщения
		);

	КонецЕсли;

	УстановитьОформлениеЭлементов();

	Возврат ТекстСообщения;

КонецФункции

&НаСервере	//	LNK 01.08.2019 15:12:56
Функция ПолучитьДанныеПокупателяИзВнешнейСистемы(КодКарты, НомерТелефона, СписокСообщений = Неопределено)

	ТекстСообщения    = "";
	ДанныеКонтрагента = ОбменMicrosoftDynamicsСервер.ИнициализацияДанныхКонтрагента(, ОтправкаSMS.ПодготовитьНомерТелефона(НомерТелефона));

	Если НЕ НаборПравИНастроек.РесурсMicrosoftDynamicsДоступен = Истина Тогда

			СоставДанных = Справочники.Контрагенты.НайтиКонтрагентаПоДаннымCRM(ДанныеКонтрагента);

	Иначе	СоставДанных = ОбменMicrosoftDynamicsСервер.ИнициализироватьСоставДанных();

	КонецЕсли;

	Если СоставДанных.Контрагент = Неопределено Тогда

		Попытка

			ПоискВыполнен = Истина;
			ДанныеОтвета = ОбменMicrosoftDynamicsСлужебный.АутентификацияПокупателя(
				Новый Структура(
					"НомерТелефона, КодКарты"
					, ДанныеКонтрагента.НомерТелефона, КодКарты)
				, ТекстСообщения
			);

		Исключение

			ПоискВыполнен = Ложь;
			ТекстСообщения = ОписаниеОшибки();

			ЖурналСобытий.Регистрация("CRM.Контрагент.Аутентификация", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.ПланыОбмена.ОбменMicrosoftDynamics
				,
				,
				, "Ошибка передачи:" + Символы.ПС + ТекстСообщения
				,
				,
				Ложь
			);	//	LNK 21.05.2020 06:57:33

		КонецПопытки;

		Если ПустаяСтрока(ТекстСообщения) Тогда

			Если ТипЗнч(ДанныеОтвета) = Тип("Структура") Тогда

				Если НЕ (ПустаяСтрока(ДанныеОтвета.IDD_client) И ПустаяСтрока(ДанныеОтвета.IDC_Client))	Тогда

					СоставДанных = ОбменMicrosoftDynamicsСлужебный.ИдентифицироватьКлиентаПоДаннымCRM(
						  ЧекККМВОбработке
						, ДанныеКонтрагента
						, КодКарты
						, ОтправкаSMS.ПодготовитьНомерТелефона(НомерТелефона)
						, ДанныеОтвета
					);

					Если НЕ СоставДанных.Ошибка Тогда

						Объект.НомерТелефона = ?(ПустаяСтрока(СоставДанных.НомерТелефона), НомерТелефона, СоставДанных.НомерТелефона);	//	используем только для CRM!

					Иначе

						ТекстСообщения = СоставДанных.ОписаниеОшибки;

					КонецЕсли;

					СоставДанных.ПоискВыполнен = ПоискВыполнен;	//	нас интересует результат запроса в CRM

				Иначе

					ТекстСообщения =  "Идентификация покупателя не выполнена!" + Символы.ПС
									+ "Внешняя система не содержит требуемых данных.";
					СоставДанных.ПоискВыполнен = ПоискВыполнен;	//	нас интересует результат запроса в CRM

					Если НЕ ПустаяСтрока(ДанныеКонтрагента.НомерТелефона) Тогда

						ДанныеКонтрагента.ИнтерактивныйВводНового = СоставДанных.ПоискВыполнен;

					КонецЕсли;

				КонецЕсли;

			Иначе

				ТекстСообщения = "Получены неожиданные данные от внешней системы!";

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ПустаяСтрока(ТекстСообщения) Тогда

		Если НЕ ДанныеОтвета.actions.Количество() = 0 Тогда

			СписокСообщений = Новый Массив;

			Для каждого ЭлементМассива Из ДанныеОтвета.actions Цикл

				Если НРег(ЭлементМассива.nameAction) = "сообщить" Тогда

					СписокСообщений.Добавить(ЭлементМассива.value);

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

		Объект.ВладелецДисконтнойКарты = СоставДанных.Контрагент;
		Объект.ДисконтнаяКарта         = СоставДанных.ДисконтнаяКарта;

		ОперативныеДанныеПокупателя(Объект.ДисконтнаяКарта, Объект.ВладелецДисконтнойКарты);
		Модифицированность = Истина;

	КонецЕсли;

	Возврат ТекстСообщения;

КонецФункции

&НаСервере
Функция ПоискПоНомеруТелефона(Знач НомерТелефона)

//	Приведение номера к стандарту поиска.
	НомерТелефона = ОтправкаSMS.ПодготовитьНомерТелефона(НомерТелефона);
	Контрагент    = Неопределено;	//	сбрасываем значение, возможно, ранее установленное

	ПараметрыИдентификации = Новый Структура(
		"НазначениеДанных, РазрешеноСозданиеНового"
		, Перечисления.НазначениеКонтрагентовОтложенных.ПроверкаВРознице
		, Ложь
	);

	СоставДанных = ОбменMicrosoftDynamicsСлужебный.ИдентифицироватьКлиентаПоДаннымCRM(
		  Неопределено
		, ДанныеКонтрагента
		, ""
		, НомерТелефона
		, Неопределено
		, ПараметрыИдентификации
	);

	Если СоставДанных.Контрагент = Неопределено ИЛИ СоставДанных.Ошибка = Истина Тогда

		ТекстСообщения = "Покупатель по номеру телефона «" + НомерТелефона + "» НЕ ОБНАРУЖЕН!"
		+ ?(ПустаяСтрока(СоставДанных.ОписаниеОшибки), "", Символы.ПС + СоставДанных.ОписаниеОшибки);

	Иначе

		ТекстСообщения = "";
		Объект.ВладелецДисконтнойКарты = СоставДанных.Контрагент;
		Объект.ДисконтнаяКарта         = СоставДанных.ДисконтнаяКарта;
		Объект.НомерТелефона		   = НомерТелефона;

		Модифицированность = Истина;

	КонецЕсли;

	Возврат ТекстСообщения;

КонецФункции

&НаКлиенте
Процедура Подключаемый_ДисплеяПокупателяПриПростое();
	
	Если НЕ Открыта() Тогда
		Возврат;
	КонецЕсли;

	Если НЕ Объект.Товары.Количество() > 0 Тогда

		ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДисплеяПокупателяОплата();
	
	Если НЕ Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда

			ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");

	Иначе	ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");

	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет информацию на дисплее покупателя
//
&НаКлиенте
Процедура ОбновлениеДисплеяПокупателя(Команда, ТолькоИтоги = Ложь)

	Если НЕ ИспользоватьПодключаемоеОборудование Тогда

		Возврат;

	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда

		Если Объект.Товары.Количество() > 0 Тогда

			ТекущаяСтрока = Объект.Товары[0];

		КонецЕсли;

	КонецЕсли;

//	Обновление информации по строке
	Если ТекущаяСтрока = Неопределено Тогда

		СуммаТовара = 0;

	Иначе

		СуммаТовара = ТекущаяСтрока.Цена * ТекущаяСтрока.Количество;

		Если НЕ ТолькоИтоги Тогда

			ДисплейПокупателяПараметры.ТоварНаименование = РозничныеПродажиСерверПовтИсп.ТоварПредставление(ТекущаяСтрока.Номенклатура);
			ДисплейПокупателяПараметры.ТоварЦена = Формат(ТекущаяСтрока.Цена, "ЧДЦ=2;ЧГ=;ЧН=0.00");

		КонецЕсли;

	КонецЕсли;

//	Обновление информации по суммам
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ИспользуемоеКоличество = ?(ЗначениеЗаполнено(ТекущаяСтрока.Упаковка),ТекущаяСтрока.КоличествоУпаковок,ТекущаяСтрока.Количество);
		
		Скидка = ТекущаяСтрока.Цена * ИспользуемоеКоличество - ТекущаяСтрока.Сумма;
		
		Если (Скидка > 0.01 ИЛИ Скидка < -0.01) И Не(ТекущаяСтрока.Цена * ТекущаяСтрока.Количество = 0)Тогда

			ПредставлениеСкидки = ?(Скидка > 0," - " + ФорматСуммКлиент(Скидка, "", "0,00")
									," + "+ ФорматСуммКлиент(-Скидка, "", "0,00"));
			ПредставлениеСкидки = ПредставлениеСкидки
				+ " ( " + Формат(Окр(100 * Скидка / (ТекущаяСтрока.Цена * ИспользуемоеКоличество), 2, 1), "ЧГ=") + "% ) ";

		КонецЕсли;

		Если НЕ ТолькоИтоги Тогда

			ДисплейПокупателяПараметры.ТоварКоличество = ИспользуемоеКоличество;
			ДисплейПокупателяПараметры.ТоварСумма = Формат(ТекущаяСтрока.Сумма, "ЧДЦ=2;ЧГ=;ЧН=0.00");
			ДисплейПокупателяПараметры.ТоварСкидка = ПредставлениеСкидки;

		КонецЕсли;

	КонецЕсли;

	ДисплейПокупателяПараметры.СуммаВсего  = Формат(СуммаВсего, "ЧДЦ=2;ЧГ=;ЧН=0.00");
	ДисплейПокупателяПараметры.СуммаСкидки = Формат(СуммаСкидки, "ЧДЦ=2;ЧГ=");

	ВывестиИнформациюНаДисплейПокупателя(Команда);

КонецПроцедуры

&НаКлиенте
// Подготавливает поле, если поле слишком короткое - дополняет пробелами
Функция ПостроитьПоле(Текст, ДлинаПоля)
	
	Если СтрДлина(Текст) < ДлинаПоля Тогда
		ТекстПолный = Текст;
		КолвоПробелов = ДлинаПоля - СтрДлина(ТекстПолный);
		Для й = 1 По КолвоПробелов Цикл
			ТекстПолный = " " + ТекстПолный;
		КонецЦикла;
	Иначе
		ТекстПолный = Лев(Текст, ДлинаПоля);
	КонецЕсли;
	
	Возврат ТекстПолный;
КонецФункции

// Процедура осуществляет вывод информации на дисплей покупателя по команде
//
&НаКлиенте                                     
Процедура ВывестиИнформациюНаДисплейПокупателя(Команда)	Экспорт

	Если НЕ ИспользоватьПодключаемоеОборудование Тогда

		Возврат;

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(НаборПравИНастроек.ШаблонРаботыДисплеяПокупателя) Тогда

			ВыводитьИтоги = Ложь;
			ТекстПриПростое = "ЛАСКАВО ПРОСИМО!";
			ТекстВНерабочемСостоянии = "КАСА НЕ ПРАЦЮЄ";

	Иначе	ВыводитьИтоги = НаборПравИНастроек.ВыводитьПромИтогНаДисплей;
			ТекстПриПростое = НаборПравИНастроек.ТекстПриПростое;
			ТекстВНерабочемСостоянии = НаборПравИНастроек.ТекстВНерабочемСостоянии;

	КонецЕсли;
	
	Строка1 = "";
	Строка2 = "";
	ВыровнятьВПраво = Ложь;
	СуммаДляЦифровогоДисплея = 0;
	
	Если Команда = "НачалоРаботы" Тогда

		Строка1 = ТекстПриПростое;

	ИначеЕсли Команда = "Оплата" Тогда

		Строка1 = "ВНЕСЕНО: " + ДисплейПокупателяПараметры.Оплата;
		Строка2 = "  РЕШТА: " + ДисплейПокупателяПараметры.Сдача;

		СуммаДляЦифровогоДисплея = ДисплейПокупателяПараметры.Сдача;

	ИначеЕсли Команда = "ОжиданиеОплаты" Тогда

		ДисплейПокупателяПараметры.СуммаВсего  = Формат(СуммаВсего, "ЧДЦ=2;ЧГ=;ЧН=0.00");
		ДисплейПокупателяПараметры.СуммаСкидки = Формат(СуммаСкидки, "ЧДЦ=2;ЧГ=");
		
		Если ПустаяСтрока(ДисплейПокупателяПараметры.СуммаСкидки) Тогда

			Строка1 = "ВСЬОГО: " + ДисплейПокупателяПараметры.СуммаВсего;

		Иначе

			Строка1 = "ВСЬОГО: " + ДисплейПокупателяПараметры.СуммаВсего;
			Строка2 = "ЗНИЖКА: " + ДисплейПокупателяПараметры.СуммаСкидки;

		КонецЕсли;

		СуммаДляЦифровогоДисплея = ДисплейПокупателяПараметры.СуммаВсего;

	ИначеЕсли Команда = "ОтменаОплаты" Тогда

		Строка1 = "ВІДМІНА ОПЛАТИ";

	ИначеЕсли Команда = "ДобавлениеТовара" или  Команда = "УдалениеТовара" или
			Команда = "ИзмененияКолва"  или Команда = "ИзмененияЦены" Тогда
		
		ИнформацияНаименование = ДисплейПокупателяПараметры.ТоварНаименование;
		   
		Если ВыводитьИтоги Тогда
			
			Если Команда = "УдалениеТовара" Тогда

					Строка1 = "СТОРНО: "; 

			Иначе	Строка1 = "  ЦІНА: ";

			КонецЕсли;

			Если НЕ ДисплейПокупателяПараметры.ТоварКоличество = 1 ИЛИ  Команда = "ИзмененияКолва" ИЛИ Команда = "УдалениеТовара" Тогда

				Строка1 =  Строка1 + Строка(ДисплейПокупателяПараметры.ТоварКоличество) + "x";

			КонецЕсли;
			
			Строка1 = Строка1 + Строка(ДисплейПокупателяПараметры.ТоварЦена);
			Строка2 = "ВСЬОГО: " + ДисплейПокупателяПараметры.СуммаВсего;
			
			СуммаДляЦифровогоДисплея = ДисплейПокупателяПараметры.СуммаВсего;
			
		Иначе
			
			ВыровнятьВПраво = Истина;
			Строка1 = ДисплейПокупателяПараметры.ТоварНаименование;
				
			Строка2 = Строка(ДисплейПокупателяПараметры.ТоварЦена);
			
			Если НЕ ДисплейПокупателяПараметры.ТоварКоличество = 1 ИЛИ Команда = "ИзмененияКолва" ИЛИ Команда = "УдалениеТовара" Тогда

				Строка2 = Строка(ДисплейПокупателяПараметры.ТоварКоличество) + "x" + Строка2 +  "=" +  Строка(ДисплейПокупателяПараметры.ТоварСумма);

			КонецЕсли;
			
			Если Команда = "УдалениеТовара" Тогда

				Строка2 = "-" + Строка2;

			КонецЕсли;
			
			СуммаДляЦифровогоДисплея = ДисплейПокупателяПараметры.ТоварЦена;
			
		КонецЕсли;

	ИначеЕсли Команда = "Аннулирование" Тогда

		Строка1 = "ЧЕК АНУЛЬОВАНО";     
		
	ИначеЕсли Команда = "ОтложитьЧек" Тогда

		Строка1 = "ЧЕК ВІДКЛАДЕНО";

	ИначеЕсли Команда = "ПродолжитьЧек" Тогда

		Строка1 = "ПРОДОВЖЕННЯ ЧЕКУ";
		СуммаДляЦифровогоДисплея = РМК3_ОбщаяСуммаЧека;
	
	ИначеЕсли Команда = "ВозвратТовара" Тогда

		Строка1 = "ПОВЕРНЕННЯ ТОВАРУ";
		 
	ИначеЕсли Команда = "Сервис" Тогда

		Строка1 = ТекстВНерабочемСостоянии;
	
	КонецЕсли;
	
	Дисплеи = МенеджерОборудованияКлиентПовтИсп.ПолучитьСписокОборудования("ДисплейПокупателя",, МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента());
	
	Для каждого Дисплей Из Дисплеи Цикл

		ВходныеПараметры  = Неопределено;
		ВыходныеПараметры = Новый Массив();

		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
			Дисплей.Ссылка,
			"ПолучитьПараметрыВывода",
			ВходныеПараметры,
			ВыходныеПараметры
		);

		ШиринаДисплея = ВыходныеПараметры[0];
		ВысотаДисплеи = ВыходныеПараметры[1];
	
		// Подготовка данных
		ВходныеПараметры = Новый Массив();
		ВыходныеПараметры = Неопределено;
		
		Если ВыровнятьВПраво Тогда
			Строка2 = ПостроитьПоле(Строка2, ШиринаДисплея)
		КонецЕсли;
			
		ВходныеПараметры.Добавить(Строка1 + Символы.ПС + Строка2);
		ВходныеПараметры.Добавить(0);
		
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
			Дисплей.Ссылка,
			"ВывестиСтрокуНаДисплейПокупателя",
			ВходныеПараметры,
			ВыходныеПараметры
		);
		
		Если НЕ Результат Тогда

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
				"Під час використання дисплея покупця виникла помилка."
				, СтрЗаменить(
					"Додатковий опис:
					|%ДополнительноеОписание%",
					"%ДополнительноеОписание%",
					ВыходныеПараметры[1]
				)
			);

		КонецЕсли;

	КонецЦикла;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
	
		ПараметрыКассыККМ = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(Объект.КассаККМ);
		ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
		
		Если ЗначениеЗаполнено(ИдентификаторУстройстваФР) Тогда
		
			ВходныеПараметры  = Новый Массив;
			ВыходныеПараметры  = Новый Массив;
			ВходныеПараметры.Добавить(Строка1 + Символы.ПС + Строка2);
			ВходныеПараметры.Добавить(СуммаДляЦифровогоДисплея);

		//	Выводим информацию на дисплей
			Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР,
			                                                        "displayText",
			                                                        ВходныеПараметры,
			                                                        ВыходныеПараметры
			);

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьДисплейПокупателяФР()
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		
		ПараметрыКассыККМ = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(ТаблицаКассККМОрганизаций[0].КассаККМ);
		ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
		
		Если ЗначениеЗаполнено(ИдентификаторУстройстваФР) Тогда
			
			// Подключаем ФР
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(
				УникальныйИдентификатор,
				ИдентификаторУстройстваФР);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьДисплейПокупателяФР()
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
	
		ПараметрыКассыККМ = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(ТаблицаКассККМОрганизаций[0].КассаККМ);
		ИдентификаторУстройстваФР              = ПараметрыКассыККМ.ИдентификаторУстройства;
	
		Если ЗначениеЗаполнено(ИдентификаторУстройстваФР) Тогда
			
			//Отключаем ФР
			МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройстваФР);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Конец ПодключаемоеОборудование

////////////////////////////////////////////////////////////////////////////////////////
// Информационные карты

// Процедура осуществляет обработку считывания информационной карты
//
&НаКлиенте
Процедура ДисконтнаяКартаПриИзменении()

	ПроверитьВозможностьВыдачиКартыПокупателю();

	Если НЕ (ТестовыйРежимРМК ИЛИ НЕ НаборПравИНастроек.ПродажиАктивированы) Тогда

		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда

			ПровестиОпрос(Истина, ?(ТипЗнч(ДанныеКарты) = Тип("Структура"), ДанныеКарты.ВидДисконтнойКарты = ПредопределенноеЗначение("Справочник.ВидыДисконтныхКарт.ПредварительныеКартыЛояльности"), Ложь));

		КонецЕсли;

	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДисконтнаяКартаСервер(РеквизитыКарты = Неопределено)

	Объект.НомерТелефона = "";

//	LNK 30.05.2017 15:33:24
	Если РеквизитыКарты = Неопределено Тогда

		РеквизитыКарты = ПолучитьРеквизитыКарты(Объект.ДисконтнаяКарта);

	Иначе

	//	Проверяем переданного владельца карты
		Если ЗначениеЗаполнено(РеквизитыКарты.ВладелецКарты) Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Контрагенты.Ссылка КАК ВладелецКарты
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Ссылка = &ВладелецКарты"
			);
			Запрос.УстановитьПараметр("ВладелецКарты", РеквизитыКарты.ВладелецКарты);

			Если Запрос.Выполнить().Пустой() Тогда
				
			//	С владельцем карты что-то не так.. 
				РеквизитыКарты = ПолучитьРеквизитыКарты(Объект.ДисконтнаяКарта);
			
			КонецЕсли;

		Иначе

			РеквизитыКарты = ПолучитьРеквизитыКарты(Объект.ДисконтнаяКарта);

		КонецЕсли;

	КонецЕсли;

	Если НЕ Объект.ВладелецДисконтнойКарты = РеквизитыКарты.ВладелецКарты Тогда

		Объект.ВладелецДисконтнойКарты = РеквизитыКарты.ВладелецКарты
	
	КонецЕсли;

	ОперативныеДанныеПокупателя(Объект.ДисконтнаяКарта, Объект.ВладелецДисконтнойКарты);

КонецПроцедуры

&НаСервере	//	LNK 28.05.2019 11:48:49
Функция ПолучитьРеквизитыКарты(ДисконтнаяКарта)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК ИнформационнаяКарта,
	|	ТаблицаСправочник.ВладелецКарты КАК ВладелецКарты,
	|	ТаблицаСправочник.ТипКарты КАК ТипКарты,
	|	ТаблицаСправочник.ПометкаУдаления
	|		ИЛИ ТаблицаСправочник.Блокирован КАК ПометкаУдаления
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Ссылка = &ИнформационнаяКарта"
	);
	Запрос.УстановитьПараметр("ИнформационнаяКарта", Объект.ДисконтнаяКарта);
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	Выборка.Следующий();

	РеквизитыКарты = Новый Структура;
	ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВСтруктуру(Результат, Выборка, РеквизитыКарты);

	Возврат РеквизитыКарты;

КонецФункции

&НаКлиенте	//	LNK 09.10.2017 15:57:46
Процедура ПровестиОпрос(ПриИзмененииКарты = Ложь, Принудительно = Ложь)

	Если ТестовыйРежимРМК Тогда

		Возврат;

	КонецЕсли; 

	Если НаборПравИНастроек.ПроводитьОпросВладельцаКарты = Истина ИЛИ Принудительно = Истина   Тогда

		ДополнительныеПараметры = Новый Структура(
			"ПриИзмененииКарты"
			, ПриИзмененииКарты);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПровестиОпросЗавершение", ЭтотОбъект, ДополнительныеПараметры);

		ИнформационныеКартыКлиент.ПровестиОпросВладельца(Объект.ДисконтнаяКарта
			, Объект.Магазин
			, ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера()
			, ЭтотОбъект
			, ОписаниеОповещения
			, НаборПравИНастроек.ПроводитьОпросВладельцаКарты
			, Принудительно
		);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 12.10.2017 11:11:32
Процедура ПровестиОпросЗавершение(Результат, ДополнительныеПараметры)	Экспорт

	Если Результат = "Применить" ИЛИ ДополнительныеПараметры.ПриИзмененииКарты = Истина Тогда

		ПриИзмененииДисконтнаяКартаСервер();

	ИначеЕсли (Результат = "Отложить" ИЛИ Результат = "Отказать")
	И ДанныеКарты.ВидДисконтнойКарты = ПредопределенноеЗначение("Справочник.ВидыДисконтныхКарт.ПредварительныеКартыЛояльности")	Тогда

		Объект.ДисконтнаяКарта = Неопределено;
		ПриИзмененииДисконтнаяКартаСервер();

	КонецЕсли;

	СброситьФлагСкидкиРассчитаны();
	
	ОбновитьФорму();

КонецПроцедуры

&НаКлиенте	//	LNK 01.11.2018 16:19:29
Процедура ПровестиОпросПокупателя(Команда)

	Если НЕ Объект.ДисконтнаяКарта.Пустая() Тогда

		ПровестиОпрос(Ложь, Истина);

	КонецЕсли;

	УстановитьТекущийЭлемент();	//	LNK 31.12.2019 06:42:01

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПравСервер()
	
	Пользователь = ПользовательСУчетомИзмененныхПрав();
	ПродавецПоУмолчанию = ЗначениеНастроекПовтИсп.ПолучитьПродавцаПользователяПоУмолчанию(Пользователь);
	Объект.Продавец = ПродавецПоУмолчанию;
	
	ЗаполнитьНаборПравИНастроек();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте	//	LNK 15.08.2019 10:50:40
Процедура ОбработчикВводаДанныхКонтрагента()

	ПараметрыОткрытия = Новый Структура(
		"ДанныеКонтрагента, ДокументПродажи, НазначениеДанных"
		, ДанныеКонтрагента
		, ЧекККМВОбработке
		, ПредопределенноеЗначение("Перечисление.НазначениеКонтрагентовОтложенных.ПроверкаВРознице")
	);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикВводаДанныхКонтрагентаЗавершение", ЭтотОбъект);

	ОткрытьФорму("Обработка.ДанныеПокупателя.Форма.ВводДанныхКонтрагента", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	ДанныеКонтрагента.ИнтерактивныйВводНового = Ложь;

КонецПроцедуры

&НаКлиенте	//	LNK 15.08.2019 11:08:09
Процедура ОбработчикВводаДанныхКонтрагентаЗавершение(СоставДанных, ДополнительныеПараметры)	Экспорт

	Если ТипЗнч(СоставДанных) = Тип("Структура") Тогда

		Если НЕ (СоставДанных.Ошибка = Истина ИЛИ СоставДанных.Отложено = Истина) Тогда

			Объект.ВладелецДисконтнойКарты = СоставДанных.Контрагент;
			Объект.ДисконтнаяКарта         = СоставДанных.ДисконтнаяКарта;
			Объект.НомерТелефона           = ДанныеКонтрагента.НомерТелефона;

			ОперативныеДанныеПокупателя(Объект.ДисконтнаяКарта, Объект.ВладелецДисконтнойКарты);
			Модифицированность = Истина;

			ПроверитьВозможностьВыдачиКартыПокупателю();	//	LNK 04.03.2020 09:50:03

		Иначе

			ЭтоОшибка   = СоставДанных.Ошибка;
			ТекстОшибки = СоставДанных.ОписаниеОшибки;

		КонецЕсли;

	Иначе

		ЭтоОшибка   = Ложь;
		ТекстОшибки = "Ввод данных нового пользователя прерван без применения.";

	КонецЕсли;

	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда

		ДанныеКонтрагента.НомерТелефона = "";

		ПоказатьОповещениеПользователя("Действие не выполнено",, ТекстОшибки, ?(ЭтоОшибка = Истина, БиблиотекаКартинок.Предупреждение32, БиблиотекаКартинок.Информация32));

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////
// Оплата, проверки, подарки

&НаСервере
Процедура ПроверитьКассовыеСмены(Отказ, ПараметрыИнформации)
	
	ДоступныеКассыККМ = ТаблицаКассККМОрганизаций.Выгрузить().ВыгрузитьКолонку("КассаККМ");
	
	Для каждого ПроверяемаяКасса Из ДоступныеКассыККМ Цикл
	
		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(ПроверяемаяКасса);
		
		КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		
		ТекстОшибки = "Касова зміна не відкрита";
		Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера(), ТекстОшибки) Тогда   //+HVOYA Mykhailo ТекущаяДата()
			
			ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
			
			ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Каса ККМ: %1 - ",
				ПроверяемаяКасса
			);
			
			ПараметрыИнформации.ЗаголовокИнформации = ТекстЗаголовка;
			ПараметрыИнформации.ТекстИнформации     = ТекстОшибки;
			Отказ = Истина;
			
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Предварительная проверка остатков товаров и серийных сертификатов
//
// Параметры
//  Отказ - Булево
//
&НаСервере
Процедура ПроверитьНаличииТоваровИСерийныхСертификатов(Отказ, ПараметрыИнформации)

	КонтролироватьОстаткиТоваровПриЗакрытииЧека = ИспользоватьНастройкуРМК 
												И НаборПравИНастроек.КонтролироватьОстаткиТоваровПриЗакрытииЧека 
												И НЕ ЭтоРабочееМестоOffLine;
	
	Если НЕ КонтролироватьОстаткиТоваровПриЗакрытииЧека Тогда
		Возврат;
	КонецЕсли;
	
	//Проверка остатков товаров
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Склад КАК Справочник.Склады) КАК Склад
	|ПОМЕСТИТЬ ДокТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаПодарки.СкидкаНаценка КАК Справочник.СкидкиНаценки) КАК СкидкаНаценка,
	|	ВЫРАЗИТЬ(ТаблицаПодарки.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаПодарки.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаПодарки.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаПодарки.Склад КАК Справочник.Склады) КАК Склад
	|ПОМЕСТИТЬ ДокПодарки
	|ИЗ
	|	&ТаблицаПодарки КАК ТаблицаПодарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокТовары.Номенклатура,
	|	ДокТовары.Характеристика,
	|	ДокТовары.Количество КАК Количество,
	|	ДокТовары.Склад
	|ПОМЕСТИТЬ ДокТоварыПодарки
	|ИЗ
	|	ДокТовары КАК ДокТовары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокПодарки.Номенклатура,
	|	ДокПодарки.Характеристика,
	|	ДокПодарки.Количество,
	|	ДокПодарки.Склад
	|ИЗ
	|	ДокПодарки КАК ДокПодарки
	|ГДЕ
	|	НЕ ДокПодарки.СкидкаНаценка.ПодарокИзСписка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокТоварыПодарки.Номенклатура,
	|	ДокТоварыПодарки.Характеристика,
	|	СУММА(ДокТоварыПодарки.Количество) КАК Количество,
	|	ДокТоварыПодарки.Склад
	|ПОМЕСТИТЬ ДокТоварыБезЛишнего
	|ИЗ
	|	ДокТоварыПодарки КАК ДокТоварыПодарки
	|ГДЕ
	|	ДокТоварыПодарки.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И НЕ ДокТоварыПодарки.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И НЕ ДокТоварыПодарки.Номенклатура.ИспользоватьСерийныеНомера
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТоварыПодарки.Номенклатура,
	|	ДокТоварыПодарки.Характеристика,
	|	ДокТоварыПодарки.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыНаСкладахОстатки.Склад КАК Склад,
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ТаблицаОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Склад) В
	|				(ВЫБРАТЬ
	|					ДокТоварыБезЛишнего.Номенклатура,
	|					ДокТоварыБезЛишнего.Характеристика,
	|					ДокТоварыБезЛишнего.Склад
	|				ИЗ
	|					ДокТоварыБезЛишнего КАК ДокТоварыБезЛишнего)) КАК ТоварыНаСкладахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокТоварыБезЛишнего.Номенклатура,
	|	ДокТоварыБезЛишнего.Характеристика,
	|	ДокТоварыБезЛишнего.Количество,
	|	ДокТоварыБезЛишнего.Склад,
	|	ЕСТЬNULL(ТаблицаОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ДокТоварыБезЛишнего.Количество - ЕСТЬNULL(ТаблицаОстатки.КоличествоОстаток, 0) КАК НедостающееКоличество,
	|	ДокТоварыБезЛишнего.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	ДокТоварыБезЛишнего КАК ДокТоварыБезЛишнего
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатки КАК ТаблицаОстатки
	|		ПО ДокТоварыБезЛишнего.Номенклатура = ТаблицаОстатки.Номенклатура
	|			И ДокТоварыБезЛишнего.Характеристика = ТаблицаОстатки.Характеристика
	|			И ДокТоварыБезЛишнего.Склад = ТаблицаОстатки.Склад
	|ГДЕ
	|	ДокТоварыБезЛишнего.Количество > ЕСТЬNULL(ТаблицаОстатки.КоличествоОстаток, 0)";

	ТаблицаТоваров  = Объект.Товары.Выгрузить();
	ТаблицаПодарков = Объект.Подарки.Выгрузить();
	
	Запрос.УстановитьПараметр("ТаблицаТовары" , ТаблицаТоваров);
	Запрос.УстановитьПараметр("ТаблицаПодарки", ТаблицаПодарков);
	
	ТаблицаПоОтрицательнымОстаткам = Запрос.Выполнить().Выгрузить();
	
	ТекстСообщения = "";
	
	ПараметрыИнформации.ЗаголовокИнформации = "Від'ємні залишки";
	
	ШаблонСообщения = "%5 %1 
					|Перевищено залишок на складі %2 на %3 %4";
	
	Для каждого СтрокаТаблицы Из ТаблицаПоОтрицательнымОстаткам Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура"  , СтрокаТаблицы.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
		
		Если ТаблицаТоваров.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
			Если ТаблицаПодарков.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
				СтрокаПозици = "Номенклатура та подарунок";
			Иначе
				СтрокаПозици = "Номенклатура";
			КонецЕсли;
		Иначе
			СтрокаПозици = "Подарунок";
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщения + ?(Отказ, Символы.ПС, "") + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика),
			Строка(СтрокаТаблицы.Склад),
			Строка(СтрокаТаблицы.НедостающееКоличество),
			Строка(СтрокаТаблицы.ЕдиницаИзмерения),
			СтрокаПозици);
		
		Отказ = Истина;
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПопыткиПродажПревышающихОстаток") 
		И ТаблицаПоОтрицательнымОстаткам.Количество() > 0 Тогда
		
		ДатаПродажи = ТекущаяДатаСеанса();
		
		ТаблицаПоОтрицательнымОстаткам.Колонки.Добавить("ДатаПродажи", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		ТаблицаПоОтрицательнымОстаткам.ЗаполнитьЗначения(НачалоДня(ДатаПродажи),"ДатаПродажи");
		
		ПродажиСервер.ОтразитьПопыткиПродаж(ТаблицаПоОтрицательнымОстаткам, ДатаПродажи);
		
	КонецЕсли;
	
	// Проверка остатка серийных номеров
	
	МаркетинговыеАкцииСерверПривилегированный.ПроверитьОстаткиСерийныхНомеров(
		Объект.Товары.Выгрузить(), 
		Объект.СерийныеНомера.Выгрузить(),
		Отказ,
		ТекстСообщения);
		
	ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
		
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьПровестиОплатуПоВозвратуЧекККМСервер(Отказ, СтрокаОшибки)
	
	ПродажиСервер.ПроверитьВозможностьПровестиОплатуПоВозвратуЧекККМ(
			Объект,
			Отказ, 
			СтрокаОшибки,
			Истина
	);
	
КонецПроцедуры

&НаКлиенте	//	LNK 14.12.2021 06:43:38
Процедура ПроверитьУстановкуКлючаСвязи(Отказ)

	Если Отказ ИЛИ Объект.Товары.НайтиСтроки(Новый Структура("КлючСвязи", 0)).Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	КлючСвязиМакс = 0;

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл

		КлючСвязиМакс = Макс(КлючСвязиМакс, СтрокаТабличнойЧасти.КлючСвязи);

	КонецЦикла;

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл

		Если СтрокаТабличнойЧасти.КлючСвязи = 0 Тогда

			КлючСвязиМакс = КлючСвязиМакс + 1;
			СтрокаТабличнойЧасти.КлючСвязи = КлючСвязиМакс;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеТабличнойЧасти(Отказ, ПараметрыИнформации)

	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Количество,
	|	Товары.Сумма,
	|	Товары.НомерСтроки,
	|	Товары.Склад
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Количество,
	|	ТабличнаяЧасть.Сумма,
	|	ТабличнаяЧасть.Склад,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаНоменклатуры,
	|	ВЫБОР
	|		КОГДА (ТабличнаяЧасть.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
	|				ИЛИ ТабличнаяЧасть.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры))
	|				И ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаХарактеристики,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Количество = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаКоличество,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Сумма = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаСумма,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаСклада
	|ПОМЕСТИТЬ ТаблицаСОшибками
	|ИЗ
	|	ТабличнаяЧасть КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСОшибками.Номенклатура,
	|	ТаблицаСОшибками.Характеристика,
	|	ТаблицаСОшибками.Количество,
	|	ТаблицаСОшибками.Сумма,
	|	ТаблицаСОшибками.НомерСтроки,
	|	ТаблицаСОшибками.ОшибкаНоменклатуры,
	|	ТаблицаСОшибками.ОшибкаХарактеристики,
	|	ТаблицаСОшибками.ОшибкаКоличество,
	|	ТаблицаСОшибками.ОшибкаСумма,
	|	ТаблицаСОшибками.Склад,
	|	ТаблицаСОшибками.ОшибкаСклада
	|ИЗ
	|	ТаблицаСОшибками КАК ТаблицаСОшибками
	|ГДЕ
	|	(ТаблицаСОшибками.ОшибкаНоменклатуры
	|			ИЛИ ТаблицаСОшибками.ОшибкаХарактеристики
	|			ИЛИ ТаблицаСОшибками.ОшибкаКоличество
	|			ИЛИ ТаблицаСОшибками.ОшибкаСумма
	|			ИЛИ ТаблицаСОшибками.ОшибкаСклада)"
	);
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда

		Отказ = Истина;
		ПараметрыИнформации.ЗаголовокИнформации = "Маємо помилки заповнення табличної частини";
		ПараметрыИнформации.ТекстИнформации     = "";
		Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
			
			Если СтрокаТаблицы.ОшибкаНоменклатуры Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"В рядку №%1 табличної частини не заповнено номенклатуру",
					СтрокаТаблицы.НомерСтроки
				);
				
				ПараметрыИнформации.ТекстИнформации = ПараметрыИнформации.ТекстИнформации + Символы.ПС + Текст;
			ИначеЕсли СтрокаТаблицы.ОшибкаХарактеристики Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"В рядку №%1 табличної частини не заповнено характеристику",
					СтрокаТаблицы.НомерСтроки
				);
				
				ПараметрыИнформации.ТекстИнформации = ПараметрыИнформации.ТекстИнформации + Символы.ПС + Текст;
			ИначеЕсли СтрокаТаблицы.ОшибкаСклада Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"В рядку №%1 табличної частини не заповнено склад",
					СтрокаТаблицы.НомерСтроки
				);
				
				ПараметрыИнформации.ТекстИнформации = ПараметрыИнформации.ТекстИнформации + Символы.ПС + Текст;
			ИначеЕсли СтрокаТаблицы.ОшибкаКоличество Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"В рядку №%1 табличної частини не заповнена кількість",
					СтрокаТаблицы.НомерСтроки
				);
				
				ПараметрыИнформации.ТекстИнформации = ПараметрыИнформации.ТекстИнформации + Символы.ПС + Текст;
			ИначеЕсли СтрокаТаблицы.ОшибкаСумма Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"В рядку №%1 табличної частини не заповнено суму",
					СтрокаТаблицы.НомерСтроки
				);
				
				ПараметрыИнформации.ТекстИнформации = ПараметрыИнформации.ТекстИнформации + Символы.ПС + Текст;

			КонецЕсли;

		КонецЦикла;

	Иначе

		СтрокаОшибки = "";
		
		МаркетинговыеАкцииСервер.ПроверитьЗаполнениеТабличнойЧастиСерийныеНомера(
			Объект,
			"Товары",
			"СерийныеНомера",
			Отказ,
			СтрокаОшибки,
			Истина
		);
		
		Если Отказ Тогда
			ПараметрыИнформации.ЗаголовокИнформации = "Маємо помилки заповнення табличної частини";
			ПараметрыИнформации.ТекстИнформации = СтрокаОшибки;
		КонецЕсли;
		
	КонецЕсли;

	Если Отказ Тогда

		Возврат;

	КонецЕсли;
	
	СтрокаОшибки = "";
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		
		ПродажиСервер.ПроверитьВозможностьВозвратаПоЧекуККМ(
			Объект,
			Отказ, 
			СтрокаОшибки,
			Истина,
			Ложь,
			Ложь
		);

		Если Отказ Тогда
			ПараметрыИнформации.ЗаголовокИнформации = "Помилка повернення товару";
			ПараметрыИнформации.ТекстИнформации = СтрокаОшибки;
			Возврат;
		КонецЕсли;

	Иначе

	//	LNK 17.08.2020 06:33:37
	//	В любом случае сначала проверяем в текущей БД.. есть случаи, что кассиры дважды пробивают один и тот же сертификат, а
	//	информация об этом ещё не успела доехать до ЦБ..

		ПодарочныеСертификатыСервер.ДвижениеСерийныхНомеровРазрешитьРМК(Объект.Товары, "Продажа", Объект.Магазин, Отказ, СтрокаОшибки, Ложь);

		Если НЕ Отказ И НаборПравИНастроек.РесурсWebRetailДоступен = Истина Тогда

		//	А теперь можно и в ЦБ проверить.. если ЦБ доступна..
			ПодарочныеСертификатыСервер.ДвижениеСерийныхНомеровРазрешитьРМК(Объект.Товары, "Продажа", Объект.Магазин, Отказ, СтрокаОшибки, НаборПравИНастроек.РесурсWebRetailДоступен);

		КонецЕсли;

		Если Отказ Тогда

			ПараметрыИнформации.ЗаголовокИнформации = "Помилка продажу подарункового сертифікату";
			ПараметрыИнформации.ТекстИнформации = СтрокаОшибки;

			Возврат;

		КонецЕсли;

		Если НЕ НаборПравИНастроек.ПродажиАктивированы Тогда

		//	ПроверитьПогашениеДобавленногоКупона(Истина, Отказ, Неопределено, СтрокаОшибки);	// +HVOYA. 30.08.2016 17:13:51, Львова Е.А.
			ПроверитьВозможностьПогашенияСкидочныхКупонов(Отказ, СтрокаОшибки);	//	LNK 17.06.2020 06:18:56

		КонецЕсли;

		Если Отказ Тогда	// +HVOYA. 30.08.2016 13:54:58, Львова Е.А.

			ПараметрыИнформации.ЗаголовокИнформации = "Помилка погашення купона знижок";
			ПараметрыИнформации.ТекстИнформации = СтрокаОшибки;
			Возврат;

		КонецЕсли;
		
		Если Отказ Тогда

			// +HVOYA. 30.08.2016 13:54:58, Львова Е.А.
			ПараметрыИнформации.ЗаголовокИнформации = "Помилки подарункових сертифікатів та купонів знижок";
			// -HVOYA. 30.08.2016 13:55:06, Львова Е.А.
			ПараметрыИнформации.ТекстИнформации = СтрокаОшибки;
			Возврат;

		КонецЕсли;

		АссортиментСервер.ПроверитьАссортиментТаблицыТоваровДокументаПродажи(
			Объект,
			"Товары",
			Отказ,
			СтрокаОшибки,
			ТекущаяДатаСеанса(),
			Ложь
		);
		
		СкидкиНаценкиСерверПереопределяемый.ПроверитьЗапретРозничнойПродажиТаблицыТоваров(
			Объект,
			"Товары",
			Отказ,
			СтрокаОшибки,
			ТекущаяДатаСеанса(),
			Ложь
		);
		
		Если Отказ Тогда

			ПараметрыИнформации.ЗаголовокИнформации = "Помилки перевірки заборони продажу";
			ПараметрыИнформации.ТекстИнформации = СтрокаОшибки;
			Возврат;

		КонецЕсли;
		
		//Проверка на остатки по товарам и сертификатам
		ПроверитьНаличииТоваровИСерийныхСертификатов(Отказ, ПараметрыИнформации);
		
	КонецЕсли;

	Если НЕ Отказ Тогда

		СтрокаОшибки = "";
		ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеСерий(
			Объект,
			Документы.ЧекККМ.ПараметрыУказанияСерий(Объект),
			Отказ,
			,
			Ложь,
			СтрокаОшибки);
		
		ПараметрыИнформации.ЗаголовокИнформации = "Помилки серій";
		ПараметрыИнформации.ТекстИнформации = СтрокаОшибки;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьДопустимостьПричинРучныхСкидок(Отказ, ПараметрыИнформации)

	Если ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИспользоватьЛимитыРучныхСкидок") Тогда

		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.НомерСтроки,
		|	ТабличнаяЧасть.ПричинаРучнойСкидки,
		|	ТабличнаяЧасть.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|	ВЫРАЗИТЬ(&Магазин КАК Справочник.Магазины) КАК Магазин
		|ПОМЕСТИТЬ Источник
		|ИЗ
		|	&Товары КАК ТабличнаяЧасть
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(Источник.НомерСтроки) КАК НомерСтроки,
		|	Источник.ПричинаРучнойСкидки КАК ПричинаРучнойСкидки,
		|	СУММА(Источник.СуммаРучнойСкидки) КАК СуммаРучнойСкидки,
		|	Источник.Магазин КАК Магазин,
		|	Источник.Магазин.ОбособленноеПодразделениеОрганизации КАК ОбособленноеПодразделениеОрганизации
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Источник КАК Источник
		|
		|СГРУППИРОВАТЬ ПО
		|	Источник.ПричинаРучнойСкидки,
		|	Источник.Магазин,
		|	Источник.Магазин.ОбособленноеПодразделениеОрганизации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПричинаРучнойСкидки,
		|	ОбособленноеПодразделениеОрганизации,
		|	Магазин
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Источник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Ведущая.НомерСтроки,
		|	Ведущая.ПричинаРучнойСкидки,
		|	Ведущая.СуммаРучнойСкидки,
		|	СУММА(ЕСТЬNULL(ОстатокЛимитов.СуммаОстаток, 0)) - Ведущая.СуммаРучнойСкидки КАК СуммаЛимитаДоступная
		|ИЗ
		|	Товары КАК Ведущая
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛимитыРучныхСкидокУстановлены.СрезПоследних(
		|				,
		|				ПериодЛимита = &ПериодЛимита
		|					И (ПричинаРучнойСкидки, ОбособленноеПодразделениеОрганизации) В
		|						(ВЫБРАТЬ
		|							Товары.ПричинаРучнойСкидки,
		|							Товары.ОбособленноеПодразделениеОрганизации
		|						ИЗ
		|							Товары)) КАК ФильтрЛимитов
		|		ПО Ведущая.ПричинаРучнойСкидки = ФильтрЛимитов.ПричинаРучнойСкидки
		|			И Ведущая.ОбособленноеПодразделениеОрганизации = ФильтрЛимитов.ОбособленноеПодразделениеОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЛимитыРучныхСкидокМагазины.Остатки(
		|				,
		|				ПериодЛимита = &ПериодЛимита
		|					И (ПричинаРучнойСкидки, Магазин) В
		|						(ВЫБРАТЬ
		|							Товары.ПричинаРучнойСкидки,
		|							Товары.Магазин
		|						ИЗ
		|							Товары)) КАК ОстатокЛимитов
		|		ПО Ведущая.ПричинаРучнойСкидки = ОстатокЛимитов.ПричинаРучнойСкидки
		|			И Ведущая.Магазин = ОстатокЛимитов.Магазин
		|
		|СГРУППИРОВАТЬ ПО
		|	Ведущая.НомерСтроки,
		|	Ведущая.ПричинаРучнойСкидки,
		|	Ведущая.СуммаРучнойСкидки
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЕСТЬNULL(ОстатокЛимитов.СуммаОстаток, 0)) - Ведущая.СуммаРучнойСкидки < 0"
		);
		Запрос.УстановитьПараметр("ПериодЛимита", НачалоМесяца(ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("Магазин"     , Объект.Магазин);
		Запрос.УстановитьПараметр("Товары"      , Объект.Товары.Выгрузить(, "НомерСтроки, ПричинаРучнойСкидки, СуммаРучнойСкидки"));
		
		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда

			ПараметрыИнформации.ЗаголовокИнформации = "Контроль обмеження використання ручних знижок";
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл

				Отказ = Истина;
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"У рядку №%1 ручна знижка «%2» виявила недостатність суми дозволу на %3 грн",
					Выборка.НомерСтроки,
					Выборка.ПричинаРучнойСкидки,
					-Выборка.СуммаЛимитаДоступная
				);
				
				ПараметрыИнформации.ТекстИнформации = ПараметрыИнформации.ТекстИнформации + Символы.ПС + Текст;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции // ПроверитьДопустимостьПричинРучныхСкидок()

// Предварительное разбиваем набор товаров на чеки
//
// Параметры;
//  Нет
//
&НаСервере
Процедура ЗаполнитьТаблицуЧеков()
	
	ТабличноеПолеЧеков.Очистить();
	
	Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
		// + HVOYA 24.11.2016 14:31:27, Латышев А.А.
		СуммаКупонов = 0;

		МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.СкидочныйКупон")));
		Для каждого Эл Из МассивСтрок Цикл
			СуммаКупонов = СуммаКупонов + Эл.СуммаВсего;
		КонецЦикла; 
		// - HVOYA 24.11.2016 14:31:27, Латышев А.А. 
		СтрокаТаблицыЧеков = ТабличноеПолеЧеков.Добавить();
		СтрокаТаблицыЧеков.Организация = ТаблицаКассККМОрганизаций[0].Организация;
		// + HVOYA 24.11.2016 14:31:51, Латышев А.А.
		//СтрокаТаблицыЧеков.Сумма       = Объект.Товары.Итог("СуммаВсего");
		СтрокаТаблицыЧеков.Сумма       = Объект.Товары.Итог("СуммаВсего") - СуммаКупонов;
		// - HVOYA 24.11.2016 14:31:51, Латышев А.А. 
		СтрокаТаблицыЧеков.КассаККМ    = ТаблицаКассККМОрганизаций[0].КассаККМ;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда

		СтрокаТаблицыЧеков = ТабличноеПолеЧеков.Добавить();
		СтрокаТаблицыЧеков.Организация = Объект.Организация;
		СтрокаТаблицыЧеков.Сумма       = Объект.Товары.Итог("СуммаВсего");

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Организация", СтрокаТаблицыЧеков.Организация);

		СтрокиКассККМОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(СтруктураПоиска);
		Если СтрокиКассККМОрганизации.Количество() > 0  Тогда
			СтрокаТаблицыЧеков.КассаККМ = СтрокиКассККМОрганизации[0].КассаККМ;
		КонецЕсли;

	Иначе

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаКассККМОрганизаций.КассаККМ,
		|	ТаблицаКассККМОрганизаций.Организация
		|ПОМЕСТИТЬ ТаблицаКассККМОрганизаций
		|ИЗ
		|	&ТаблицаКассККМОрганизаций КАК ТаблицаКассККМОрганизаций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.СуммаВсего,
		|	ВЫРАЗИТЬ(Товары.Организация КАК Справочник.Организации) КАК Организация
		|ПОМЕСТИТЬ ТаблицаВЗапросе
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВЗапросе.Организация КАК Организация,
		|	СУММА(ТаблицаВЗапросе.СуммаВсего) КАК Сумма,
		|	ТаблицаКассККМОрганизаций.КассаККМ
		|ИЗ
		|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКассККМОрганизаций КАК ТаблицаКассККМОрганизаций
		|		ПО ТаблицаВЗапросе.Организация = ТаблицаКассККМОрганизаций.Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаВЗапросе.Организация,
		|	ТаблицаКассККМОрганизаций.КассаККМ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация";
		
		
		Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
		Запрос.УстановитьПараметр("ТаблицаКассККМОрганизаций", ТаблицаКассККМОрганизаций.Выгрузить());
		Результат      = Запрос.Выполнить();
		ТаблицаЗапроса = Результат.Выгрузить();

		ТабличноеПолеЧеков.Загрузить(ТаблицаЗапроса);

	КонецЕсли;
	
	АдресТаблицыЧеков = ПоместитьВоВременноеХранилище(ТабличноеПолеЧеков.Выгрузить(), УникальныйИдентификатор);
	
КонецПроцедуры

// Проверяем возможность печати по всем организациям
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  АдресТаблицыЧеков
//
&НаКлиенте
Процедура ЗаполнитьТаблицуЧековИПроверитьСоотвествиеОрганизаций(Отказ)

	Если ТестовыйРежимРМК Тогда

		Возврат;

	КонецЕсли; 

	ЗаполнитьТаблицуЧеков();

	ЗаголовокОшибки = "Помилки розподілу по організаціям у номенклатурі";
	МассивОшибокПоОрганизациям = Новый Массив;
	Результат = Истина;

	Для каждого СтрокаТПЧеков Из ТабличноеПолеЧеков Цикл

		Если МассивОрганизацийКлиент.Найти(СтрокаТПЧеков.Организация) = Неопределено Тогда

			МассивНоменклатур = Новый Массив;
			СтрокиСОрганизацией = Объект.Товары.НайтиСтроки(Новый Структура("Организация", СтрокаТПЧеков.Организация));
			
			Для каждого СтрокаСОрганизацией Из СтрокиСОрганизацией Цикл

				Если МассивНоменклатур.Найти(СтрокаСОрганизацией.Номенклатура) = Неопределено Тогда
				
					МассивНоменклатур.Добавить(СтрокаСОрганизацией.Номенклатура);
				
				КонецЕсли;

			КонецЦикла;
			
			ОрганизацияОшибки = ?(ЗначениеЗаполнено(СтрокаТПЧеков.Организация), СтрокаТПЧеков.Организация, "<Организация не заполнена>" );
			
			СтруктураОшибки = Новый Структура("Организация, МассивНоменклатур", СтрокаТПЧеков.Организация, МассивНоменклатур);
			МассивОшибокПоОрганизациям.Добавить(СтруктураОшибки);
			
			Результат = Ложь;

		КонецЕсли;

	КонецЦикла;
	
	Если Не Результат Тогда
		
		Для каждого СтруктураОшибки Из МассивОшибокПоОрганизациям Цикл
		
			МассивНоменклатур = СтруктураОшибки.МассивНоменклатур;
			СтрокаОшибки = "" + СтруктураОшибки.Организация + ":";

			Для каждого НоменклатураОшибки Из МассивНоменклатур Цикл
				
				СтрокаОшибки = СтрокаОшибки + Символы.ПС + НоменклатураОшибки;
				
			КонецЦикла;
			
			СтрокаОшибки = СтрокаОшибки + Символы.ПС;
			
		КонецЦикла;
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокОшибки, СтрокаОшибки);
		
		Отказ = Истина

	ИначеЕсли ТабличноеПолеЧеков.Количество() = 0 Тогда
			
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Невірно заповнені склади реалізації");
		
		Отказ = Истина
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПоддержкаМеханизмаВыдачиПодарков

&НаСервере	//	LNK 17.10.2018 12:05:14
Функция ПолучитьДанныеПолученияПодарков()

	ДанныеПолученияПодарков = Новый Структура(
		"Действие, ВыдатьПодарки"
		, "ВыборИзСписка"
		, Ложь
	);

	Если НаборПравИНастроек.ПродажиАктивированы Тогда
		
		Если ТипЗнч(ДанныеРасчетаCRM) = Тип("Структура") И НЕ ПустаяСтрока(ДанныеРасчетаCRM.АдресТаблицПодарки) Тогда

			Попытка

				ТаблицыПолучения = ПолучитьИзВременногоХранилища(ДанныеРасчетаCRM.АдресТаблицПодарки);

				Если ТипЗнч(ТаблицыПолучения) = Тип("Структура") Тогда

					ДанныеПолученияПодарков.ВыдатьПодарки = НЕ ТаблицыПолучения.ТаблицаПодарки.Количество() = 0;

					Если ДанныеПолученияПодарков.ВыдатьПодарки Тогда

						ТаблицыПолучения.ТаблицаПодарки.ЗаполнитьЗначения(СкладПродажиПоУмолчанию, "Склад");

						ДанныеПолученияПодарков.Вставить("АдресТаблицПодарки", ПоместитьВоВременноеХранилище(ТаблицыПолучения, УникальныйИдентификатор));

					КонецЕсли;

				КонецЕсли;

			Исключение

				ТекстОшибки = ОписаниеОшибки();

			КонецПопытки;

		КонецЕсли;

	Иначе
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСкидки.Ссылка КАК СкидкаНаценка,
		|	ТаблицаСкидки.КоличествоПодарковИзКорзиныПокупателя КАК КоличествоУпаковок,
		|	ТаблицаСкидки.УчитыватьПодарокКакПродажу КАК УчитыватьКакПродажу,
		|	ТаблицаСкидки.ЦенаПодарка КАК Цена
		|ИЗ
		|	Справочник.СкидкиНаценки КАК ТаблицаСкидки
		|ГДЕ
		|	ТаблицаСкидки.Ссылка В(&СписокСкидок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПодарки.НомерСтроки КАК НомерСтроки,
		|	ТаблицаПодарки.Ссылка КАК СкидкаНаценка,
		|	ТаблицаСправочник.Ссылка КАК Номенклатура,
		|	ТаблицаПодарки.Характеристика КАК Характеристика,
		|	ТаблицаПодарки.Упаковка КАК Упаковка,
		|	ТаблицаПодарки.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаПодарки.Количество КАК Количество,
		|	ЕСТЬNULL(ТаблицаПодарки.Упаковка.Коэффициент, 1) КАК Коэффициент,
		|	&Склад КАК Склад,
		|	ТаблицаСправочник.Код КАК Код,
		|	ТаблицаСправочник.Артикул КАК Артикул,
		|	ТаблицаСправочник.Номинал КАК Номинал,
		|	ТаблицаСправочник.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаСправочник.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
		|	ТаблицаСправочник.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ИСТИНА КАК ПродажаПодарка,
		|	0 КАК ИндексКартинки
		|ИЗ
		|	Справочник.СкидкиНаценки.НаборПодарков КАК ТаблицаПодарки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
		|		ПО ТаблицаПодарки.Номенклатура = ТаблицаСправочник.Ссылка
		|ГДЕ
		|	ТаблицаПодарки.Ссылка В(&СписокСкидок)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СкидкаНаценка,
		|	НомерСтроки"
		);
		Запрос.УстановитьПараметр("СписокСкидок", Объект.Подарки.Выгрузить(, "СкидкаНаценка").ВыгрузитьКолонку("СкидкаНаценка"));
		Запрос.УстановитьПараметр("Склад", СкладПродажиПоУмолчанию);
		
		Результаты = Запрос.ВыполнитьПакет();

		ДанныеПолученияПодарков.ВыдатьПодарки = НЕ Результаты[1].Пустой();
		
		Если ДанныеПолученияПодарков.ВыдатьПодарки Тогда

			ТаблицыПолучения = Новый Структура(
				"ТаблицаСкидкиНаценки, ТаблицаПодарки"
				, Результаты[0].Выгрузить()
				, Результаты[1].Выгрузить()
			);

			ДанныеПолученияПодарков.Вставить("АдресТаблицПодарки", ПоместитьВоВременноеХранилище(ТаблицыПолучения, УникальныйИдентификатор));

		КонецЕсли;

	КонецЕсли;
	
	Возврат ДанныеПолученияПодарков;

КонецФункции

&НаКлиенте	//	LNK 10.10.2019 10:32:24
Процедура ВыдатьПодарки(Отказ)

	ДанныеПолученияПодарков = ПолучитьДанныеПолученияПодарков();

	Если ДанныеПолученияПодарков.ВыдатьПодарки Тогда

		Если ДанныеПолученияПодарков.Действие = "ВыборИзСписка" Тогда

			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("Магазин", Объект.Магазин);
			ПараметрыОткрытия.Вставить("ТоварыСерийныеНомера", ПолучитьТоварыСерийныеНомера());
			ПараметрыОткрытия.Вставить("АдресТаблицПодарки" , ДанныеПолученияПодарков.АдресТаблицПодарки);

			СтруктураОтвета = ОткрытьФормуМодально(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаРаботыСПодарками", Объект.ИмяВнешнейОбработки), ПараметрыОткрытия, УникальныйИдентификатор);

			Если НЕ СтруктураОтвета = Неопределено Тогда

				ВыдатьПодаркиЗаполнитьТаблицыПослеВыбораИзСписка(СтруктураОтвета);

			Иначе

				Объект.Подарки.Очистить();

			КонецЕсли;

		Иначе

			А = 22;	//	отладочная

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция СтруктураДействийПродажиПодарка()

	СтруктураДействий = Новый Структура;

	СтруктураДействий.Вставить("ПересчитатьСуммуНДС" , ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина, Истина));

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда

			СтруктураДействий.Вставить("ПересчитатьСумму");

	Иначе	СтруктураДействий.Вставить("ПересчитатьСуммуВозвратСУчетомОснования", Новый Структура("Основание", Объект.ЧекККМПродажа));

	КонецЕсли;

	Возврат СтруктураДействий;

КонецФункции

&НаКлиенте	//	LNK 10.10.2019 10:39:47
Процедура ВыдатьПодаркиЗаполнитьТаблицыПослеВыбораИзСписка(СтруктураОтвета)

	Объект.Подарки.Очистить();
	ДанныеПодарков = Новый Структура(
		"ТекстПроблемы, РаспределитьСкидкуСертификатов, Скидки"
		, ""
		, Истина
		, Новый Соответствие
	);

	Для каждого СоставСтроки Из СтруктураОтвета Цикл

		Если СоставСтроки.ПродажаПодарка Тогда

			Если НЕ СоставСтроки.СерийныеНомера.Количество() = 0 Тогда

				Если ДанныеПодарков.Скидки.Получить(СоставСтроки.СкидкаНаценка) = Неопределено Тогда

				//	в данной структуре будем аккумулировать скидку по сертификатам
					ДанныеПодарков.Скидки.Вставить(
						СоставСтроки.СкидкаНаценка
						, Новый Структура(
							"СкидкаНаценка, СуммаСкидки"
							, СоставСтроки.СкидкаНаценка
							, 0
						)
					);

				КонецЕсли;

				Для каждого СерийныйНомер Из СоставСтроки.СерийныеНомера Цикл

					СтруктураДействий = СтруктураДействийПродажиПодарка();
					ДобавитьПодарокВТовары(СоставСтроки, СерийныйНомер, ДанныеПодарков, СтруктураДействий);

				КонецЦикла;

			Иначе

				СтруктураДействий = СтруктураДействийПродажиПодарка();
				ДобавитьПодарокВТовары(СоставСтроки,, ДанныеПодарков, СтруктураДействий);

			КонецЕсли;

		Иначе

			Если НЕ СоставСтроки.СерийныеНомера.Количество() = 0 Тогда

				Для каждого СерийныйНомер Из СоставСтроки.СерийныеНомера Цикл

					СтрокаПодарки = Объект.Подарки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПодарки, СоставСтроки);
					СтрокаПодарки.Владелец      = СоставСтроки.Номенклатура;
					СтрокаПодарки.СерийныйНомер = СерийныйНомер;

					СтруктураДействий = СтруктураДействийПродажиПодарка();
					СтруктураДействий.Удалить("ПересчитатьСуммуНДС");

					ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Подарки, СтрокаПодарки, СтруктураДействий, КэшированныеЗначения);

				КонецЦикла;

			Иначе

				СтрокаПодарки = Объект.Подарки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПодарки, СоставСтроки);

				СтруктураДействий = СтруктураДействийПродажиПодарка();
				СтруктураДействий.Удалить("ПересчитатьСуммуНДС");

				ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Подарки, СтрокаПодарки, СтруктураДействий, КэшированныеЗначения);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Если ДанныеПодарков.РаспределитьСкидкуСертификатов И НЕ ДанныеПодарков.Скидки.Количество() = 0 Тогда

		РаспределитьСкидкуСертификатовНаДругиеТовары(ДанныеПодарков);

	КонецЕсли;

	Если НЕ ПустаяСтрока(ДанныеПодарков.ТекстПроблемы) Тогда

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Отказано в выдаче подарка!", ДанныеПодарков.ТекстПроблемы);

	КонецЕсли;

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

	Элементы.Товары.Обновить();

КонецПроцедуры

&НаКлиенте	//	LNK 13.05.2021 12:03:14
Процедура ДобавитьПодарокВТовары(СоставСтроки, СерийныйНомер = Неопределено, ДанныеПодарков, СтруктураДействий)

	СтрокаТабличнойЧасти = Объект.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СоставСтроки);
	СтрокаТабличнойЧасти.КлючСвязи   = МаксимальныйКлючСвязи() + 1;
	СтрокаТабличнойЧасти.Организация = Объект.Организация;
	СтрокаТабличнойЧасти.КодНоменклатуры = СоставСтроки.Код;

	РаботаемНомернойСертификат = НЕ СерийныйНомер = Неопределено И СоставСтроки.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат");

	Если РаботаемНомернойСертификат Тогда

		СтрокаТабличнойЧасти.Цена		        = 0;	//	распределяем ВСЮ, сумму
		СтрокаТабличнойЧасти.Количество         = 1;
		СтрокаТабличнойЧасти.КоличествоУпаковок = 1;

	КонецЕсли;

//	Запоминаем сумму, исходя из цены продажи подарка (например, 10 копеек)
	СуммаПродажи = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.КоличествоУпаковок;

//	При первом проходе строка ТЧ пересчитывается, исходя из установленной для магназина действующей цены.
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);

	Если СтрокаТабличнойЧасти.Сумма > 0 Тогда

		Если РаботаемНомернойСертификат И ДанныеПодарков.РаспределитьСкидкуСертификатов Тогда

		//	накопленные суммы по каждой скидке будм распределять по другим товарам, НЕ сертификатам.
			ДанныеСкидки = ДанныеПодарков.Скидки.Получить(СоставСтроки.СкидкаНаценка);
			ДанныеСкидки.СуммаСкидки = ДанныеСкидки.СуммаСкидки + (СтрокаТабличнойЧасти.Сумма - СуммаПродажи);

		Иначе

			СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки   = СтрокаТабличнойЧасти.Сумма - СуммаПродажи;
			СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки =  100 * (1 - СуммаПродажи / СтрокаТабличнойЧасти.Сумма);
			СтрокаТабличнойЧасти.Сумма = СуммаПродажи;

			СтруктураДействий.Удалить("ЗаполнитьЦенуПродажи");
			СтруктураДействий.Удалить("ПересчитатьСумму");
			СтруктураДействий.Удалить("ПересчитатьСуммуВозвратСУчетомОснования");

		//	Второй, окончательный проход, после установки суммы скидки.
			ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);

			СтрокаСкидкиНаценки = Объект.СкидкиНаценки.Добавить();
			СтрокаСкидкиНаценки.КлючСвязи	  = СтрокаТабличнойЧасти.КлючСвязи;
			СтрокаСкидкиНаценки.СкидкаНаценка = СоставСтроки.СкидкаНаценка;
			СтрокаСкидкиНаценки.Сумма		  = СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки;
			СтрокаСкидкиНаценки.СпособПримененияСкидки = ПредопределенноеЗначение("Перечисление.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок");

		КонецЕсли;

		Если РаботаемНомернойСертификат Тогда

			СтрокаТабличнойЧасти.АкционнаяЦена = Истина;
			СтрокаТабличнойЧасти.Владелец	   = СтрокаТабличнойЧасти.Номенклатура;
			СтрокаТабличнойЧасти.Номенклатура  = СерийныйНомер;

		КонецЕсли;

	Иначе

		Объект.Товары.Удалить(СтрокаТабличнойЧасти);

		ДанныеПодарков.ТекстПроблемы = ДанныеПодарков.ТекстПроблемы + ?(ПустаяСтрока(ДанныеПодарков.ТекстПроблемы), "", Символы.ПС)
		+ "Подарок «" + СоставСтроки.Номенклатура + "» не может быть продан, так как сумма продажи не может равняться нолю."
		+ Символы.ПС + "Вероятно, на этот подарок не установлена розничная цена.";

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 13.05.2021 10:20:06
Функция ПолучитьТоварыСерийныеНомера()

	СерийныеНомера = Новый СписокЗначений;

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл

		Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.СерийныеНомера") Тогда

			СерийныеНомера.Добавить(СтрокаТабличнойЧасти.Номенклатура);

		КонецЕсли;

	КонецЦикла;

	Возврат СерийныеНомера;

КонецФункции

&НаКлиенте	//	LNK 14.05.2021 06:11:01
Процедура РаспределитьСкидкуСертификатовНаДругиеТовары(ДанныеПодарков)

	СтруктураДействий = СтруктураДействийПродажиПодарка();
	СтруктураДействий.Удалить("ЗаполнитьЦенуПродажи");
	СтруктураДействий.Удалить("ПересчитатьСумму");
	СтруктураДействий.Удалить("ПересчитатьСуммуВозвратСУчетомОснования");

	Для каждого ДанныеСкидки Из ДанныеПодарков.Скидки Цикл

	//	1. Получим сумму товаров, назначенных для распределения
		СуммаТоваров = 0;

		Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл

			Если НЕ УсловиеНеРаспределять(СтрокаТабличнойЧасти, ДанныеСкидки)	Тогда

				СуммаТоваров = СуммаТоваров + СтрокаТабличнойЧасти.Сумма;

			КонецЕсли;

		КонецЦикла;

	//	2. Непосредственно выполним пропорциональное распределение

		Если СуммаТоваров > 0 Тогда

			СуммаКРаспределению = ДанныеСкидки.Значение.СуммаСкидки;	//	фиксируем сумму распределяемой скидки.

			Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл

				Если ДанныеСкидки.Значение.СуммаСкидки = 0 Тогда

					Прервать;

				КонецЕсли;

				Если УсловиеНеРаспределять(СтрокаТабличнойЧасти, ДанныеСкидки)	Тогда

					Продолжить;

				КонецЕсли;

				СуммаБезСкидки  = СтрокаТабличнойЧасти.КоличествоУпаковок * СтрокаТабличнойЧасти.Цена;
				СуммаВсехСкидок = СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки + СтрокаТабличнойЧасти.СуммаРучнойСкидки;

				СуммаСкидкиПлюс = Окр(Мин(СуммаКРаспределению * (СтрокаТабличнойЧасти.Сумма / СуммаТоваров), ДанныеСкидки.Значение.СуммаСкидки), 2);

				Если (СтрокаТабличнойЧасти.Сумма - (СуммаВсехСкидок + СуммаСкидкиПлюс)) < НаборПравИНастроек.ЦенаПродажиМинимальная Тогда

					СуммаСкидкиПлюс = Макс(0, (СтрокаТабличнойЧасти.Сумма - СуммаВсехСкидок) - НаборПравИНастроек.ЦенаПродажиМинимальная);

				КонецЕсли;

				Если СуммаСкидкиПлюс > 0 И СуммаБезСкидки > 0 Тогда

					ДанныеСкидки.Значение.СуммаСкидки = ДанныеСкидки.Значение.СуммаСкидки - СуммаСкидкиПлюс;

					СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки   = СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки + СуммаСкидкиПлюс;
					СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки =  100 * (СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки / СуммаБезСкидки);
					СтрокаТабличнойЧасти.Сумма						 = СуммаБезСкидки - СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки - СтрокаТабличнойЧасти.СуммаРучнойСкидки;

				//	Второй, окончательный проход, после установки суммы скидки.
					ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);

					СтрокаСкидкиНаценки = Объект.СкидкиНаценки.Добавить();
					СтрокаСкидкиНаценки.КлючСвязи	  = СтрокаТабличнойЧасти.КлючСвязи;
					СтрокаСкидкиНаценки.СкидкаНаценка = ДанныеСкидки.Значение.СкидкаНаценка;
					СтрокаСкидкиНаценки.Сумма		  = СуммаСкидкиПлюс;
					СтрокаСкидкиНаценки.СпособПримененияСкидки = ПредопределенноеЗначение("Перечисление.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок");

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция УсловиеНеРаспределять(СтрокаТабличнойЧасти, ДанныеСкидки)

	ПозицияСоответствует = (НЕ 0 = УсловияВыполненные.НайтиСтроки(Новый Структура("СкидкаНаценка, Номенклатура", ДанныеСкидки.Значение.СкидкаНаценка, СтрокаТабличнойЧасти.Номенклатура)).Количество());

	Возврат НЕ ПозицияСоответствует
		ИЛИ СтрокаТабличнойЧасти.ПродажаПодарка
		ИЛИ СтрокаТабличнойЧасти.АкционнаяЦена
		ИЛИ СтрокаТабличнойЧасти.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")
		ИЛИ СтрокаТабличнойЧасти.Сумма <= НаборПравИНастроек.ЦенаПродажиМинимальная
		ИЛИ СтрокаТабличнойЧасти.СуммаРучнойСкидки > 0
		ИЛИ ДанныеСкидки.Значение.СуммаСкидки = 0
	;

КонецФункции

&НаКлиенте
Функция МаксимальныйКлючСвязи()

	КлючСвязи = 0;

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл

		КлючСвязи = Макс(КлючСвязи, СтрокаТабличнойЧасти.КлючСвязи);

	КонецЦикла;

	Возврат КлючСвязи;

КонецФункции

&НаСервере
// Проверяет наличие подарков и убирает не существующие
//
// Параметры:
//  НЕТ
//
Процедура ПроверитьПодаркиВНаличии()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа 
		И Объект.Подарки.Количество() > 0 
		И КонтролироватьОстаткиТоваровПриЗакрытииЧека Тогда
	
		// Подготавливает таблицу для анализа перед закрытием чека
		//
		Запрос       = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаПодарки.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаПодарки.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(ТаблицаПодарки.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ВЫРАЗИТЬ(ТаблицаПодарки.КоличествоУпаковок КАК ЧИСЛО(15, 3)) КАК КоличествоУпаковок,
		|	ВЫРАЗИТЬ(ТаблицаПодарки.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
		|	ВЫРАЗИТЬ(ТаблицаПодарки.Склад КАК Справочник.Склады) КАК Склад,
		|	ВЫРАЗИТЬ(ТаблицаПодарки.НомерСтроки КАК ЧИСЛО(15, 3)) КАК НомерСтроки
		|ПОМЕСТИТЬ ДокПодарки
		|ИЗ
		|	&ТаблицаПодарки КАК ТаблицаПодарки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокПодарки.Номенклатура,
		|	ДокПодарки.Характеристика,
		|	ДокПодарки.Количество,
		|	ДокПодарки.КоличествоУпаковок,
		|	ДокПодарки.Упаковка.Коэффициент КАК Коэффициент,
		|	ДокПодарки.Склад,
		|	ДокПодарки.НомерСтроки
		|ПОМЕСТИТЬ ДокПодаркиБезЛишнего
		|ИЗ
		|	ДокПодарки КАК ДокПодарки
		|ГДЕ
		|	(ДокПодарки.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
		|	И (НЕ ДокПодарки.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаТовары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(ТаблицаТовары.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ВЫРАЗИТЬ(ТаблицаТовары.Склад КАК Справочник.Склады) КАК Склад
		|ПОМЕСТИТЬ ДокТовары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокТовары.Номенклатура,
		|	ДокТовары.Характеристика,
		|	ДокТовары.Количество,
		|	ДокТовары.Склад
		|ПОМЕСТИТЬ ДокТоварыБезЛишнего
		|ИЗ
		|	ДокТовары КАК ДокТовары
		|ГДЕ
		|	(ДокТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
		|	И (НЕ ДокТовары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Склад,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	СУММА(ВложенныйЗапрос.КоличествоОстаток) КАК КоличествоОстаток
		|ПОМЕСТИТЬ ТаблицаОстатков
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварыНаСкладахОстатки.Склад КАК Склад,
		|		ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|		ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
		|		ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
		|	ИЗ
		|		РегистрНакопления.ТоварыНаСкладах.Остатки(
		|				,
		|				(Номенклатура, Характеристика, Склад) В
		|					(ВЫБРАТЬ
		|						ДокПодаркиБезЛишнего.Номенклатура,
		|						ДокПодаркиБезЛишнего.Характеристика,
		|						ДокПодаркиБезЛишнего.Склад
		|					ИЗ
		|						ДокПодаркиБезЛишнего КАК ДокПодаркиБезЛишнего)) КАК ТоварыНаСкладахОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДокТоварыБезЛишнего.Склад,
		|		ДокТоварыБезЛишнего.Номенклатура,
		|		ДокТоварыБезЛишнего.Характеристика,
		|		-ДокТоварыБезЛишнего.Количество
		|	ИЗ
		|		ДокТоварыБезЛишнего КАК ДокТоварыБезЛишнего
		|) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Склад,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокПодаркиБезЛишнего.Номенклатура,
		|	ДокПодаркиБезЛишнего.Характеристика,
		|	ДокПодаркиБезЛишнего.Количество,
		|	ДокПодаркиБезЛишнего.КоличествоУпаковок,
		|	ДокПодаркиБезЛишнего.Коэффициент,
		|	ДокПодаркиБезЛишнего.Склад,
		|	ДокПодаркиБезЛишнего.НомерСтроки,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток
		|ИЗ
		|	ДокПодаркиБезЛишнего КАК ДокПодаркиБезЛишнего
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатков КАК ТоварыНаСкладахОстатки
		|		ПО ДокПодаркиБезЛишнего.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|			И ДокПодаркиБезЛишнего.Характеристика = ТоварыНаСкладахОстатки.Характеристика
		|			И ДокПодаркиБезЛишнего.Склад = ТоварыНаСкладахОстатки.Склад
		|ГДЕ
		|	ДокПодаркиБезЛишнего.Количество > ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)";
		
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаПодарки", Объект.Подарки.Выгрузить());
		Запрос.УстановитьПараметр("ТаблицаТовары" , Объект.Товары.Выгрузить());
		ТаблицаПоПодаркам = Запрос.Выполнить().Выгрузить();
		
		МассивУдаляемыхСтрок = Новый Массив;
		Для каждого СтрокаТаблицыПодарки Из ТаблицаПоПодаркам Цикл
			СтрокаПодарки = Объект.Подарки[СтрокаТаблицыПодарки.НомерСтроки - 1];
			Если СтрокаТаблицыПодарки.КоличествоОстаток <= 0 Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаПодарки);
			Иначе
				СтрокаПодарки.Количество = СтрокаТаблицыПодарки.КоличествоОстаток;
				СтрокаПодарки.КоличествоУпаковок = СтрокаТаблицыПодарки.КоличествоОстаток;
				СтрокаПодарки.Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
				
				Если ЗначениеЗаполнено(СтрокаТаблицыПодарки.Коэффициент)
					И СтрокаТаблицыПодарки.Коэффициент > 0 Тогда
					
					СтрокаПодарки.Цена = СтрокаПодарки.Цена / СтрокаТаблицыПодарки.Коэффициент ;
					СтрокаПодарки.Сумма = СтрокаПодарки.Цена * СтрокаПодарки.Количество;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаПодарки Из МассивУдаляемыхСтрок Цикл
			Объект.Подарки.Удалить(СтрокаПодарки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьТоварыВНаличии()

&НаСервере
Функция СтруктураПолученияПодаркиИзСкидка(СкидкаНаценка, КоличествоНаборов)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СкидкиНаценкиНаборПодарков.Ссылка,
	|	СкидкиНаценкиНаборПодарков.НомерСтроки,
	|	СкидкиНаценкиНаборПодарков.Номенклатура,
	|	СкидкиНаценкиНаборПодарков.Характеристика,
	|	СкидкиНаценкиНаборПодарков.Упаковка,
	|	СкидкиНаценкиНаборПодарков.КоличествоУпаковок * &КоличествоНаборов КАК КоличествоУпаковок,
	|	СкидкиНаценкиНаборПодарков.Количество * &КоличествоНаборов КАК Количество,
	|	СкидкиНаценкиНаборПодарков.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ПОМЕСТИТЬ ТаблицаПодарков
	|ИЗ
	|	Справочник.СкидкиНаценки.НаборПодарков КАК СкидкиНаценкиНаборПодарков
	|ГДЕ
	|	СкидкиНаценкиНаборПодарков.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспределениеПродаж.Склад,
	|	ВЫБОР
	|		КОГДА НЕ РаспределениеПродаж.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА РаспределениеПродаж.РабочееМесто = &РабочееМесто
	|						ТОГДА 1
	|					ИНАЧЕ 2
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РаспределениеПродаж.РабочееМесто = &РабочееМесто
	|					ТОГДА 3
	|				ИНАЧЕ 4
	|			КОНЕЦ
	|	КОНЕЦ КАК ПолеУпорядочивания,
	|	РаспределениеПродаж.НоменклатурнаяГруппа
	|ПОМЕСТИТЬ ТаблицаСкладов
	|ИЗ
	|	РегистрСведений.РаспределениеПродаж КАК РаспределениеПродаж
	|ГДЕ
	|	РаспределениеПродаж.Магазин = &Магазин
	|	И (РаспределениеПродаж.НоменклатурнаяГруппа В
	|				(ВЫБРАТЬ
	|					ТаблицаПодарков.НоменклатурнаяГруппа
	|				ИЗ
	|					ТаблицаПодарков)
	|			ИЛИ РаспределениеПродаж.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка))
	|	И (РаспределениеПродаж.РабочееМесто = &РабочееМесто
	|			ИЛИ РаспределениеПродаж.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.КоличествоУпаковок,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.ПолеУпорядочивания,
	|	ЕСТЬNULL(ТаблицаСкладов.Склад, &ОсновнойСклад) КАК Склад
	|ПОМЕСТИТЬ ТаблицаПодарочковСоСкладами
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.Ссылка КАК Ссылка,
	|		ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|		ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|		ВложенныйЗапрос.Характеристика КАК Характеристика,
	|		ВложенныйЗапрос.Упаковка КАК Упаковка,
	|		ВложенныйЗапрос.КоличествоУпаковок КАК КоличествоУпаковок,
	|		ВложенныйЗапрос.Количество КАК Количество,
	|		ВложенныйЗапрос.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|		МИНИМУМ(ВложенныйЗапрос.ПолеУпорядочивания) КАК ПолеУпорядочивания
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаПодарков.Ссылка КАК Ссылка,
	|			ТаблицаПодарков.НомерСтроки КАК НомерСтроки,
	|			ТаблицаПодарков.Номенклатура КАК Номенклатура,
	|			ТаблицаПодарков.Характеристика КАК Характеристика,
	|			ТаблицаПодарков.Упаковка КАК Упаковка,
	|			ТаблицаПодарков.КоличествоУпаковок КАК КоличествоУпаковок,
	|			ТаблицаПодарков.Количество КАК Количество,
	|			ТаблицаПодарков.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|			ЕСТЬNULL(ТаблицаСкладов.ПолеУпорядочивания, 5) КАК ПолеУпорядочивания
	|		ИЗ
	|			ТаблицаПодарков КАК ТаблицаПодарков
	|				ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК ТаблицаСкладов
	|				ПО (ТаблицаПодарков.НоменклатурнаяГруппа = ТаблицаСкладов.НоменклатурнаяГруппа
	|						ИЛИ ТаблицаСкладов.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка))) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Ссылка,
	|		ВложенныйЗапрос.Номенклатура,
	|		ВложенныйЗапрос.Упаковка,
	|		ВложенныйЗапрос.Характеристика,
	|		ВложенныйЗапрос.НоменклатурнаяГруппа,
	|		ВложенныйЗапрос.НомерСтроки,
	|		ВложенныйЗапрос.КоличествоУпаковок,
	|		ВложенныйЗапрос.Количество) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК ТаблицаСкладов
	|		ПО ВложенныйЗапрос.НоменклатурнаяГруппа = ТаблицаСкладов.НоменклатурнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПодарочковСоСкладами.Ссылка,
	|	ТаблицаПодарочковСоСкладами.НомерСтроки,
	|	ТаблицаПодарочковСоСкладами.Номенклатура,
	|	ТаблицаПодарочковСоСкладами.Характеристика,
	|	ТаблицаПодарочковСоСкладами.Упаковка,
	|	ТаблицаПодарочковСоСкладами.КоличествоУпаковок,
	|	ТаблицаПодарочковСоСкладами.Количество,
	|	ТаблицаПодарочковСоСкладами.НоменклатурнаяГруппа,
	|	ТаблицаПодарочковСоСкладами.ПолеУпорядочивания КАК ПолеУпорядочивания,
	|	ТаблицаПодарочковСоСкладами.Склад
	|ИЗ
	|	ТаблицаПодарочковСоСкладами КАК ТаблицаПодарочковСоСкладами
	|"
	);

	// Получим количество товаров в таблице
	Если КонтролироватьОстаткиТоваровПриЗакрытииЧека Тогда
		Запрос.Текст = Запрос.Текст + "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
		|		ПО ТаблицаПодарочковСоСкладами.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|			И ТаблицаПодарочковСоСкладами.Характеристика = ТоварыНаСкладахОстатки.Характеристика
		|			И ТаблицаПодарочковСоСкладами.Склад = ТоварыНаСкладахОстатки.Склад
		|ГДЕ
		|	ТаблицаПодарочковСоСкладами.Количество <= ТоварыНаСкладахОстатки.КоличествоОстаток";
		
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеУпорядочивания";
	
	Запрос.УстановитьПараметр("Магазин"          , Объект.Магазин);
	Запрос.УстановитьПараметр("РабочееМесто"     , Объект.РабочееМесто);
	Запрос.УстановитьПараметр("ОсновнойСклад"    , СкладПродажиПоУмолчанию);
	Запрос.УстановитьПараметр("Ссылка"           , СкидкаНаценка);
	Запрос.УстановитьПараметр("КоличествоНаборов", КоличествоНаборов);
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	СтруктураОтвета = Новый Структура;
	
	Если ТаблицаЗапроса.Количество() = 1 Тогда
		
		СтруктураОтвета.Вставить("Действие", "ПоследующийВыбор");
		
		СтруктураВыборки = ОбщегоНазначенияРТ.СоздатьСтруктуруПоСтрокеВыборки(ТаблицаЗапроса, ТаблицаЗапроса[0]);
		СтруктураВыборки.Вставить("Получен", Ложь);
		
		СтруктураОтвета.Вставить("СтруктураВыборки", СтруктураВыборки);
		
	ИначеЕсли ТаблицаЗапроса.Количество() = 0 Тогда
		
		СтруктураОтвета.Вставить("Действие", "УдалениеСтроки");
	Иначе
		
		СтруктураОтвета.Вставить("Действие", "ВыборИзСписка");
		
		АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаЗапроса, УникальныйИдентификатор);
		
		СтруктураОтвета.Вставить("АдресТаблицы", АдресТаблицы);
		
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции // СтруктураПолученияПодаркиИзСкидка()

&НаСервере
Функция СтруктураПолученияПодарков()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПодарков.Номенклатура,
	|	ТаблицаПодарков.Характеристика,
	|	ТаблицаПодарков.Количество,
	|	ТаблицаПодарков.КоличествоУпаковок,
	|	ТаблицаПодарков.Склад,
	|	ТаблицаПодарков.Упаковка
	|ПОМЕСТИТЬ ТаблицаЗапроса
	|ИЗ
	|	&ТаблицаПодарков КАК ТаблицаПодарков
	|ГДЕ
	|	НЕ ТаблицаПодарков.Получен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапроса.Номенклатура,
	|	ТаблицаЗапроса.Характеристика,
	|	СУММА(ТаблицаЗапроса.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапроса.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	ТаблицаЗапроса.Склад,
	|	ТаблицаЗапроса.Упаковка
	|ИЗ
	|	ТаблицаЗапроса КАК ТаблицаЗапроса
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапроса.Характеристика,
	|	ТаблицаЗапроса.Номенклатура,
	|	ТаблицаЗапроса.Склад,
	|	ТаблицаЗапроса.Упаковка";
	
	Запрос.УстановитьПараметр("ТаблицаПодарков", Объект.Подарки.Выгрузить());
	
	Результат = Запрос.Выполнить();
	
	СтруктураОтвета = Новый Структура;
	
	Если Результат.Пустой() Тогда
		
		СтруктураОтвета.Вставить("Действие", "ПрекратитьВыдачуПодарков");

	Иначе
		
		ТаблицаЗапроса = Результат.Выгрузить();
		СтруктураОтвета.Вставить("Действие", "ВыдатьПодарки");
		АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаЗапроса, УникальныйИдентификатор);
		СтруктураОтвета.Вставить("АдресТаблицы", АдресТаблицы);
		
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции // СтруктураПолученияПодарков()
	
#КонецОбласти

&НаСервере
Процедура ОбработатьОтменуОплаты()

	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда

		Возврат

	КонецЕсли;

	Если УслугаБанкаДанные.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.ПустаяСсылка() Тогда	//	LNK 03.06.2020 10:42:52

	//	LNK 12.04.2018 14:54:13
		Объект.УслугаБанка = ПредопределенноеЗначение("Справочник.УслугиБанка.ПустаяСсылка");
		Объект.УслугаБанкаПериодПредоставления = 0;
		ИнициализироватьУслугаБанкаДанные();	//	LNK 10.07.2018 08:13:51

	КонецЕсли;

//	Все типы "ЗаказПокупателя" имеют скидки, установленные во "внешних" системах.
//	При отмене оплаты эти скидки не стоит "сбрасывать".
//	По типу "Документы.ЗаказПокупателя" скидки (и оплата бонусами) будут сброшены
//	в случае попытки редактирования "Товары".
//
	Если НЕ ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя, "СчетНаОплатуПокупателю")	Тогда

		ОтменитьВсеСкидкиДокумента(Ложь, Истина);

	КонецЕсли;

КонецПроцедуры

// При обнаружении потери покупателя нужно получить его согласие
//
&НаСервере
Функция ПроверкаСогласияПокупателяНаПотерюСуммыПоПодарочнымСертификатам(ПроверкаВРазрезеОрганизаций, ПараметрыИнформации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Оплата.Сумма,
	|	Оплата.Организация,
	|	ВЫРАЗИТЬ(Оплата.ВидОплаты КАК Справочник.ВидыОплатЧекаККМ) КАК ВидОплаты
	|ПОМЕСТИТЬ Оплата
	|ИЗ
	|	&Оплата КАК Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Оплата.Сумма) КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ПроверкаВРазрезеОрганизаций
	|			ТОГДА Оплата.Организация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ КАК Организация
	|ПОМЕСТИТЬ ОплатаПодарочнымСертификатом
	|ИЗ
	|	Оплата КАК Оплата
	|ГДЕ
	|	Оплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &ПроверкаВРазрезеОрганизаций
	|			ТОГДА Оплата.Организация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ПогашениеПодарочныхСертификатов.ПодарочныйСертификат КАК Справочник.Номенклатура) КАК ПодарочныйСертификат,
	|	ПогашениеПодарочныхСертификатов.Организация
	|ПОМЕСТИТЬ ПогашениеПодарочныхСертификатов
	|ИЗ
	|	&ПогашениеПодарочныхСертификатов КАК ПогашениеПодарочныхСертификатов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ПогашениеПодарочныхСертификатов.ПодарочныйСертификат.Номинал) КАК Номинал,
	|	ВЫБОР
	|		КОГДА &ПроверкаВРазрезеОрганизаций
	|			ТОГДА ПогашениеПодарочныхСертификатов.Организация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ КАК Организация
	|ПОМЕСТИТЬ ПогашениеПоОрганизациям
	|ИЗ
	|	ПогашениеПодарочныхСертификатов КАК ПогашениеПодарочныхСертификатов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &ПроверкаВРазрезеОрганизаций
	|			ТОГДА ПогашениеПодарочныхСертификатов.Организация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаПодарочнымСертификатом.Организация,
	|	ОплатаПодарочнымСертификатом.Сумма,
	|	ПогашениеПоОрганизациям.Номинал,
	|	ПогашениеПоОрганизациям.Номинал - ОплатаПодарочнымСертификатом.Сумма КАК Разница
	|ИЗ
	|	ОплатаПодарочнымСертификатом КАК ОплатаПодарочнымСертификатом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПогашениеПоОрганизациям КАК ПогашениеПоОрганизациям
	|		ПО ОплатаПодарочнымСертификатом.Организация = ПогашениеПоОрганизациям.Организация
	|ГДЕ
	|	ОплатаПодарочнымСертификатом.Сумма < ПогашениеПоОрганизациям.Номинал";
	
	Запрос.УстановитьПараметр("ПроверкаВРазрезеОрганизаций", ПроверкаВРазрезеОрганизаций);
	Запрос.УстановитьПараметр("ПогашениеПодарочныхСертификатов", Объект.ПогашениеПодарочныхСертификатов.Выгрузить());
	Запрос.УстановитьПараметр("Оплата", Объект.Оплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
	
		Возврат Истина
	
	КонецЕсли;
	
	ТаблицаЗапроса = Результат.Выгрузить();
	
	ПотериПокупателя = ТаблицаЗапроса.Итог("Разница");
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Втрати покупця від недобору товару становлять – %1 грн",
		Формат(ПотериПокупателя, "ЧЦ=15; ЧДЦ=2; ЧГ=3,0")
	);
	
	ПараметрыИнформации.ЗаголовокИнформации = Текст;
	ПараметрыИнформации.ТекстИнформации = "Покупець згоден?";
	
	Возврат Ложь
	
КонецФункции

&НаСервере
Процедура ДобавитьТаблицуОплат(АдресТаблицы, Организация = Неопределено)
	
	Если Организация = Неопределено Тогда
		Объект.Оплата.Очистить();
	Иначе
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Организация", Организация);
		
		СтрокиОплаты = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаОплаты Из СтрокиОплаты Цикл
			
			Объект.Оплата.Удалить(СтрокаОплаты);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаОплаты = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(ТаблицаОплаты, Объект.Оплата, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТаблицуПогашениеПодарочныхСертификатов(АдресТаблицы, Организация = Неопределено)
	
	Если Организация = Неопределено Тогда

		Объект.ПогашениеПодарочныхСертификатов.Очистить();

	Иначе
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Организация", Организация);
		
		СтрокиОплаты = Объект.ПогашениеПодарочныхСертификатов.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаОплаты Из СтрокиОплаты Цикл
			
			Объект.ПогашениеПодарочныхСертификатов.Удалить(СтрокаОплаты);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаОплаты = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(ТаблицаОплаты, Объект.ПогашениеПодарочныхСертификатов, Ложь);
	
КонецПроцедуры

&НаСервере
Функция АдресВХранилище(ИмяТаблицы = "")
	
	ВозвращаемыйАдрес = "";
	
	Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
		ВозвращаемыйАдрес = ПоместитьВоВременноеХранилище(Объект[ИмяТаблицы].Выгрузить(), УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат ВозвращаемыйАдрес;

КонецФункции // АдресТаблицыПогашениеПодарочныхСертификатов()

// Оплата чека
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ОплатитьТовары(ИмяФормыОплаты, ОплатаПлатежнойКартой = Неопределено, Печать = Ложь, ВозвратОплаты = Неопределено, ПроверкиУжеВыполнены = Ложь)
	
	Перем Отказ;
	Перем ПараметрыИнформации;
	
	Отказ = Ложь;
	ЭтоВозврат = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат"));

	Если НЕ Объект.УслугаБанка.Пустая() ИЛИ НаборПравИНастроек.ЭтоУзелИнтернетМагазина = Истина Тогда

		ИмяФормыОплаты = "ФормаСложнойОплаты";	//	LNK 10.07.2018 11:11:08
		ОплатаПлатежнойКартой = Истина;

	КонецЕсли;

	ОплатаТолькоНаличными = (ИмяФормыОплаты = "ФормаПростойОплаты");

	Если НЕ ПроверкиУжеВыполнены Тогда

		УстановитьОформлениеЭлементов();

		Если Объект.Товары.Количество() = 0 И Объект.ПогашениеСкидочныхКупонов.Количество() = 0 Тогда

			Возврат;

		КонецЕсли;

		ПроверитьКассовыеСмены(Отказ, ПараметрыИнформации);

		Если Отказ Тогда

			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
			Возврат;

		КонецЕсли;

		Если НЕ ПроверитьПоДоговоруСтрахования(Отказ, ПараметрыИнформации, СтрахованиеКлиентПовтИсп.ПолучитьУслугуСтрахования(Объект.Магазин)) Тогда

			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
			Возврат;

		КонецЕсли;

		Если УслугаБанкаДанные.ТипИнтернетБанкинга = ПредопределенноеЗначение("Перечисление.ТипыИнтернетБанкинга.ПустаяСсылка") Тогда	//	LNK 03.06.2020 09:40:20

			Если Не НаборПравИНастроек.ЭтоУзелИнтернетМагазина Тогда
				
				СкидкиНаценкиКлиентСервер.ОчиститьОкругленияТоваров(Объект.Товары, Ложь);	//	LNK 31.01.2020 10:31:19
				
			КонецЕсли;
			
			НазначитьАвтоматическиеСкидки = НЕ (ЭтоВозврат ИЛИ ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя) ИЛИ НаборПравИНастроек.ЭтоУзелИнтернетМагазина = Истина ИЛИ НЕ Объект.ДоговорСтрахования.Пустая());
			НазначитьАвтоматическиеСкидки = НазначитьАвтоматическиеСкидки И (Объект.УслугаБанка.Пустая() ИЛИ УслугаБанкаДанные.ИспользоватьСкидкиНаценки = Истина);

			Если НазначитьАвтоматическиеСкидки	Тогда

				НазначитьАвтоматическиеСкидкиКлиент(,, Отказ);

				Если Отказ Тогда

					Возврат;

				КонецЕсли;

			Иначе

				УдалитьИзТоваровЧекаПогашаемыеСкидочныеКупоны();	//	LNK 07.09.2021 05:21:28
				ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
				ОтобразитьСкидки();

			КонецЕсли;

		КонецЕсли;

		ПроверитьЗаполнениеТабличнойЧасти(Отказ, ПараметрыИнформации);
		
		Если Отказ Тогда

			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

			ОтменитьВсеСкидкиДокумента(Истина);	//	LNK 10.12.2019 10:00:44

			Возврат;

		КонецЕсли;

		Если НЕ ЭтоВозврат И НЕ ПроверитьДопустимостьПричинРучныхСкидок(Отказ, ПараметрыИнформации) Тогда	//	LNK 31.08.2017 12:38:37

		//	1-я проверка - перед открытием формы принятия оплаты.
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
			Возврат;

		КонецЕсли;

	//	Подарки

		Если НЕ ЭтоВозврат И НЕ ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя) Тогда

			ВыдатьПодарки(Отказ);

		КонецЕсли;

		Если Отказ Тогда

			Возврат;

		КонецЕсли;
		
		Если НЕ ЭтоВозврат И НЕ ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя) Тогда

			ПеренестиСкидкиПодаркиВТоварыСервер();
		
			ОбновитьИнформациюОбщейСуммы();

		КонецЕсли;
		
		ЗаполнитьТаблицуЧековИПроверитьСоотвествиеОрганизаций(Отказ);
		
		Если Отказ Тогда

			Возврат;

		КонецЕсли;

		ПроверитьУстановкуКлючаСвязи(Отказ);	//	LNK 14.12.2021 06:43:14

		ЗаписатьЧекККМПоВсемДанным(Объект.Организация, ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка"), Истина);
		Оповестить("ИзмененыДанныеКассовойСмены");	//	LNK 14.09.2020 10:25:16

		// +HVOYA. 11.04.2017 13:48:10, Львова Е.А.
		Если СертификатКакСкидка Тогда
			// + HVOYA 04.11.2016 14:28:10, Латышев А.А.
			МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("ПричинаРучнойСкидки", ПредопределенноеЗначение("Справочник.ПричиныРучнойСкидки.ПодарочныйСертификат")));
			Если МассивСтрок.Количество() = 0 Тогда
				Объект.ПогашениеПодарочныхСертификатов.Очистить();
			КонецЕсли; 
			// - HVOYA 04.11.2016 14:28:10, Латышев А.А.
		Иначе
			Объект.ПогашениеПодарочныхСертификатов.Очистить();
		КонецЕсли;
		// -HVOYA. 11.04.2017 13:48:14, Львова Е.А.

	КонецЕсли;

	Объект.Оплата.Очистить();

	Если ИспользоватьПодключаемоеОборудование Тогда

		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");

	КонецЕсли;
	
	НесколькоОрганизаций = ТабличноеПолеЧеков.Количество() > 1;

	Если ТестовыйРежимРМК Тогда	//	LNK 05.02.2019 11:33:38

		Возврат;

	КонецЕсли;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	Если НЕ ОплатаТолькоНаличными Тогда

		ВыведеныЧеки = Истина;
		СнятьОтборПоОрганизации();

		Для каждого СтрокаЧека Из ТабличноеПолеЧеков Цикл

			Если НЕ ВыведеныЧеки Тогда

			//	Флаг может быть сброшен в обработчике оповещения при отказе от оплаты одного из чеков.
				Прервать;

			КонецЕсли;

			ДополнительныеПараметры = Новый Структура(	//	может, чего нужно передать в процедуру завершения.
				"Печать, НесколькоОрганизаций"
				, Печать
				, НесколькоОрганизаций);

			ОписаниеОповещения = Новый ОписаниеОповещения("ОплатитьТоварыЗавершение", ЭтотОбъект, ДополнительныеПараметры);

			ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма." + ИмяФормыОплаты, Объект.ИмяВнешнейОбработки)
				, ПолучитьПараметрыОплаты(СтрокаЧека, ОплатаПлатежнойКартой, ВозвратОплаты)
				, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

		КонецЦикла;

		ВыведеныЧеки = Ложь;
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура(	//	может, чего нужно передать в процедуру завершения.
			"Печать, НесколькоОрганизаций"
			, Печать
			, НесколькоОрганизаций);

		ОписаниеОповещения = Новый ОписаниеОповещения("ОплатитьТоварыЗавершение", ЭтотОбъект, ДополнительныеПараметры);

		ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма." + ИмяФормыОплаты, Объект.ИмяВнешнейОбработки)
			, ПолучитьПараметрыОплаты(ТабличноеПолеЧеков[0], ОплатаПлатежнойКартой, ВозвратОплаты)
			, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 21.09.2017 11:49:13
Процедура ОплатитьТоварыЗавершение(Результат, ДополнительныеПараметры)	Экспорт

	ПараметрыИнформации    = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	ВыполнитьОбщийАлгоритм = Истина;
	ЭтоДокументВозврата    = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат"));

	Сдача = 0;

	Если Результат = Неопределено Тогда

		ВыведеныЧеки = Ложь;
	//	Это, собственно, отказ покупателя от оплаты - всё возвращаем взад.
		ОбработатьОтменуОплаты();
		СнятьОтборПоОрганизации();

		ВывестиИнформациюНаДисплейПокупателя("ОтменаОплаты");
		ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяОплата", 5, Истина);

		ВыполнитьОбщийАлгоритм = Ложь;	// Аналог "Возврат;" в модальном варианте

	ИначеЕсли Результат = "ОплатаКартой" Тогда	// + HVOYA 06.10.2016 14:10:40, Латышев А.А.

		ОплатитьТовары("ФормаСложнойОплаты", Истина,,, Истина);

		ВыполнитьОбщийАлгоритм = Ложь;	// Аналог "Возврат;" в модальном варианте

	ИначеЕсли НЕ ТестовыйРежимРМК Тогда  //+HVOYA Mykhailo

		ДобавитьТаблицуОплат(Результат.АдресТаблицыОплата);

		Сдача = Макс(Объект.Оплата.Итог("Сумма") - СуммаВсего,0);	// -HVOYA. 14.02.2017 14:10:49, Львова Е.А.
					
		Если ИспользоватьПодключаемоеОборудование И НЕ Сдача = 0 Тогда
			
			ДисплейПокупателяПараметры.Сдача      = Формат(Сдача     , "ЧДЦ=2;ЧГ=;ЧН=0.00");
			ДисплейПокупателяПараметры.СуммаВсего = Формат(СуммаВсего, "ЧДЦ=2;ЧГ=;ЧН=0.00");
			ДисплейПокупателяПараметры.Оплата     = Формат(Объект.Оплата.Итог("Сумма"), "ЧДЦ=2;ЧГ=;ЧН=0.00");
			
		КонецЕсли;

		Если НЕ ЭтоДокументВозврата Тогда

		//	LNK 19.04.2018 14:11:55
			Результат.Свойство("УслугаБанка", Объект.УслугаБанка);
			Результат.Свойство("УслугаБанкаПериодПредоставления", Объект.УслугаБанкаПериодПредоставления);

		КонецЕсли;

		Если Результат.Свойство("АдресТаблицыПогашениеПодарочныхСертификатов") Тогда

			Если НЕ СертификатКакСкидка Тогда	// +HVOYA. 11.04.2017 13:50:18, Львова Е.А.

				ДобавитьТаблицуПогашениеПодарочныхСертификатов(Результат.АдресТаблицыПогашениеПодарочныхСертификатов)

			КонецЕсли;                

		КонецЕсли;

	КонецЕсли;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	Если ВыполнитьОбщийАлгоритм Тогда

		Отказ = Ложь;

		Если ЭтоДокументВозврата Тогда
			
			СтрокаОшибки = "";
			
			ПроверитьВозможностьПровестиОплатуПоВозвратуЧекККМСервер(Отказ, СтрокаОшибки);
			
			Если Отказ Тогда

				ПараметрыИнформации.ЗаголовокИнформации = "Помилка оплати повернення товару";
				ПараметрыИнформации.ТекстИнформации = СтрокаОшибки;
				ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

			КонецЕсли;

		Иначе

			Если НЕ ПроверкаСогласияПокупателяНаПотерюСуммыПоПодарочнымСертификатам(ДополнительныеПараметры.НесколькоОрганизаций, ПараметрыИнформации) Тогда	// Пересмотреть сертификатов нет а проверка идет

				ОтветПользователя = ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМК(ПараметрыИнформации.ЗаголовокИнформации, ПараметрыИнформации.ТекстИнформации, "Нет");

				Если ВРЕГ(ОтветПользователя) = "НЕТ" Тогда

					Отказ = Истина;

				КонецЕсли;

			КонецЕсли;

			Если НЕ Отказ Тогда

				Если НЕ ПроверитьДопустимостьПричинРучныхСкидок(Отказ, ПараметрыИнформации) Тогда

				//	2-я проверка - после принятия оплаты... неизвестно, сколько кассир чухался с приёмом денег.
				//	За это время другая касса могла погасить остаток лимита оп скидке.
					ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
				//	здесь тоже будет Отказ = Истина

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	//	---------------------------------------------------------------------------------------

		Если Отказ Тогда

			ОбработатьОтменуОплаты();
			СнятьОтборПоОрганизации();

			ВывестиИнформациюНаДисплейПокупателя("ОтменаОплаты");
			ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяОплата", 5, Истина);

		Иначе

			// +HVOYA. 26.09.2016 13:58:49, Львова Е.А.
			Если ЗначениеЗаполнено(Объект.НоменклатураСкидочногоКупона) И НЕ ЭтоДокументВозврата Тогда

				Если hiВыдатьСгенерироватьСкидочныйКупон(ТабличноеПолеЧеков[0].КассаККМ)  Тогда

					ОбработатьОтменуОплаты();
					СнятьОтборПоОрганизации();
					СброситьФлагСкидкиРассчитаны();
					ОбновитьФорму();
					
					ВывестиИнформациюНаДисплейПокупателя("ОтменаОплаты");
					ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяОплата", 5, Истина);

					Отказ = Истина;

				КонецЕсли;

			КонецЕсли;	// -HVOYA. 26.09.2016 13:58:52, Львова Е.А.
			
			Если НЕ Отказ Тогда

				СоздатьЧеки(Отказ, ДополнительныеПараметры.Печать);

				СнятьОтборПоОрганизации();

				Если НЕ Отказ Тогда
					
					Если ИспользоватьПодключаемоеОборудование И НЕ Сдача = 0 Тогда

						ВывестиИнформациюНаДисплейПокупателя("Оплата");
						
					КонецЕсли;
					
					ДисконтнаяКартаДляЗамены = Объект.ДисконтнаяКарта;
					
					СоздатьНовыйНаборКлиент();
					ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяПриПростое", 20, Истина);
					
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	ОбновитьФорму();
	УстановитьТекущийЭлемент();	//	LNK 13.09.2017 08:17:04

КонецПроцедуры

&НаКлиенте	//	LNK 16.09.2019 12:54:48
Функция ПолучитьПараметрыОплаты(СтрокаЧека, ОплатаПлатежнойКартой, ВозвратОплаты)	Экспорт

	Если НЕ ТипЗнч(ВозвратОплаты) = Тип("Структура") Тогда

		ВозвратОплаты = Новый Структура(	//	LNK 03.11.2022 05:56:44
			"СуммаПредоплаты, СуммаПослеплаты"
			, 0, 0
		);

	КонецЕсли;

	ПараметрыОткрытия = Новый Структура(
		"ВидОперации, ЦенаВключаетНДС, Магазин, ЧекККМПродажа, ЗаказПокупателя,
		|ДанныеЗаказа,
		|УслугаБанка, УслугаБанкаПериодПредоставления, УслугаБанкаСуммаКредита,
		|ОплатаПлатежнойКартой,
		|СуммаПредоплаты,
		|СуммаПослеплаты,
		|ИспользоватьБанковскиеУслуги, НеПечататьСлипЧекПриОплате,
		|ПродажаПодарочныхСертификатов,
		|СуммаБонусныхБаллов,
		|СуммаБонусныхБалловСписано,
		|ОплатаБалламиНазначенаЗаказомПокупателя,
		|СуммаНаличныхОграничение"
		, Объект.ВидОперации, Объект.ЦенаВключаетНДС, Объект.Магазин, Объект.ЧекККМПродажа, Объект.ЗаказПокупателя
		, ДанныеЗаказа
		, Объект.УслугаБанка, Объект.УслугаБанкаПериодПредоставления, УслугаБанкаДанные.СуммаКредита
		, ОплатаПлатежнойКартой = Истина ИЛИ (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") И НЕ Объект.УслугаБанка.Пустая())	//	LNK 26.04.2018 16:35:30
		, ВозвратОплаты.СуммаПредоплаты
		, ВозвратОплаты.СуммаПослеплаты
		, ДанныеМагазина.ИспользоватьБанковскиеУслуги, ДанныеМагазина.НеПечататьСлипЧекПриОплате	// + HVOYA 08.06.2017 15:52:27, Латышев А.А.
		, ПродажаПодарочныхСертификатов()
		, ДанныеКарты.СуммаБонусныхБаллов
		, Объект.СуммаБонусныхБалловСписано
		, ОплатаБалламиНазначенаЗаказомПокупателя
		, НаборПравИНастроек.СуммаНаличныхОграничение
	);

	ПараметрыОткрытия.Вставить("ЗапретитьОплатуБонусами", НЕ Объект.УслугаБанка.Пустая()
			ИЛИ
		?(НаборПравИНастроек.РазрешитьОплатуБонусамиПоЗаказуПокупателяНаРМК
			, Ложь
			, ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя)
		)
	);

	Если ЗначениеЗаполнено(Объект.ВладелецДисконтнойКарты)
	И НЕ РозничныеПродажиСлужебный.ПроверитьПереданныеВЦентрЧеки(Объект.ВладелецДисконтнойКарты) Тогда

		ПараметрыОткрытия.ЗапретитьОплатуБонусами = Истина;

		Если НЕ ДанныеКарты.СуммаБонусныхБаллов = 0 Тогда

			ПоказатьОповещениеПользователя("Оплата бонусными баллами"
				,
				, "Не выполнена синхронизация с ЦБ («ПЕРЕДАТЬ_В_ЦЕНТР»)! Возможно, имеют место проблемы со связью или производительностью серверов. Оплата бонусами запрещена"
				, БиблиотекаКартинок.Информация32
			);

		КонецЕсли;

	КонецЕсли;

	ПолучитьПараметрыОплатыСуммы(СтрокаЧека, ПараметрыОткрытия);

	ПараметрыОткрытия.Вставить("Организация", СтрокаЧека.Организация);
	ПараметрыОткрытия.Вставить("СистемаНалогообложения", НаборПравИНастроек.СистемаНалогообложения);	//	LNK 31.12.2020 06:04:28
	ПараметрыОткрытия.Вставить("КассаККМ"	, СтрокаЧека.КассаККМ);

	УстановитьОтборПоОрганизации(СтрокаЧека.Организация);

	ПараметрыОткрытия.Вставить("АдресТаблицыЧеков", АдресТаблицыЧеков);

	ПараметрыОткрытия.Вставить("БлокироватьИзменениеСуммыОплаты", НаборПравИНастроек.БлокироватьИзменениеСуммыОплаты);
	ПараметрыОткрытия.Вставить("РазрешитьОкругление"			, НаборПравИНастроек.РазрешитьОкругление);
	ПараметрыОткрытия.Вставить("РесурсWebRetailДоступен"		, НаборПравИНастроек.РесурсWebRetailДоступен);
//	LNK 03.06.2020 10:31:02
	ПараметрыОткрытия.Вставить("УслугаБанкаДанные", УслугаБанкаДанные);

	Если НЕ Объект.УслугаБанка.Пустая() И НЕ УслугаБанкаДанные.ТипИнтернетБанкинга = ПредопределенноеЗначение("Перечисление.ТипыИнтернетБанкинга.ПустаяСсылка") Тогда

		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда

		//	LNK 11.08.2020 09:25:53 - освежим данные.. мало-ли!
			УслугаБанкаДанные = ФинансыВызовСервера.ПолучитьДанныеУслугаБанка(Объект.УслугаБанка, Объект.ЗаказПокупателя);

			Для каждого ЭлементОплаты Из УслугаБанкаДанные.Оплата Цикл

				Если ЭлементОплаты.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.БанковскийКредит") Тогда

					СуммаКредитаОстаток = Макс(0, ЭлементОплаты.Сумма - УслугаБанкаДанные.СуммаКредитаВозврат);
					ПараметрыОткрытия.УслугаБанкаСуммаКредита = Мин(СуммаКредитаОстаток, ПараметрыОткрытия.ИтогПоОрганизации);
					Прервать;	//	допускаем применение только одной строки!
					
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Если НЕ ПараметрыОткрытия.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")
	И		ТипЗнч(ДанныеЗаказа) = Тип("Структура") И ДанныеЗаказа.ЭтоУзелИнтернетМагазина = Истина
	Тогда

		Если ДанныеЗаказа.ЗаказПокупателя = Объект.ЗаказПокупателя Тогда	//	на всякий случай

			Если ДанныеЗаказа.СтатусОплаты = ПредопределенноеЗначение("Перечисление.СтатусОплаты.НеОплачен") Тогда

				ПараметрыОткрытия.СуммаПредоплаты = ДанныеЗаказа.СуммаДокумента;

				Если НЕ ДанныеЗаказа.СуммаДоставки = 0 И ДанныеЗаказа.СуммаДоставкиОплачена = Истина Тогда

					ПараметрыОткрытия.ОплатаПлатежнойКартой = Ложь;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат ПараметрыОткрытия;

КонецФункции

&НаКлиенте	//	LNK 23.06.2021 08:49:47
Функция ПолучитьПараметрыОплатыСуммы(СтрокаЧека, ПараметрыОткрытия = Неопределено)

	Если ПараметрыОткрытия = Неопределено Тогда

		ПараметрыОткрытия = Новый Структура;

	КонецЕсли;

//	В разных формах оплаты используются разные имена сумм.. оххх! тяжка наша чоловича доля!
	ПараметрыОткрытия.Вставить("ИтогПоОрганизации"	, СтрокаЧека.Сумма);
	ПараметрыОткрытия.Вставить("ИтогПоЧеку"			, Объект.Товары.Итог("СуммаВсего") - ПолучитьСуммуКупонов());
	ПараметрыОткрытия.Вставить("СуммаИтоговая"		, ПараметрыОткрытия.ИтогПоЧеку);
	ПараметрыОткрытия.Вставить("СуммаСкидки"		, РМК3_ОбщаяСуммаСкидки);

	Возврат ПараметрыОткрытия;

КонецФункции

&НаКлиенте	//	LNK 27.03.2020 06:11:49
Функция ПродажаПодарочныхСертификатов()

	ЕстьСертификаты = Ложь;

	Для каждого СтрокаТовары Из Объект.Товары Цикл

		Если ТипЗнч(СтрокаТовары.Номенклатура) = Тип("СправочникСсылка.СерийныеНомера") И НЕ СтрокаТовары.ПродажаПодарка Тогда

			ЕстьСертификаты = Истина;
			Прервать;

		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьСертификаты;

КонецФункции

&НаКлиенте
Процедура УстановитьОтборПоОрганизации(ОрганизацияОтбора)
	
	Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура(
		"Организация", ОрганизацияОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтборПоОрганизации()
	
	Элементы.Товары.ОтборСтрок = Неопределено;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивКлючей(ИмяРеквизитаКлюча, Организация)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТовары.Организация КАК Справочник.Организации) КАК Организация,
	|	ТаблицаТовары." + ИмяРеквизитаКлюча + " КАК РеквизитКлюча
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.РеквизитКлюча
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|ГДЕ
	|	ТаблицаВЗапросе.Организация = &Организация";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Организация"  , Организация);
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Возврат ТаблицаЗапроса.ВыгрузитьКолонку("РеквизитКлюча");

КонецФункции // ПолучитьМассивКлючей()

// Заполнить табличную часть чека
//
// Параметры
//  ОбъектЧекККМ      - Чек ККМ
//  ИмяТабличнойЧасти - Строка
//  ИмяРеквизитаКлюча - Строка -= имя реквизита ключа.
//  МассивКлючей      - массив найденных ключей.
//  ВключаяПустойКлюч - Булево
//
&НаСервере
Процедура ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, ИмяТабличнойЧасти, ИмяРеквизитаКлюча, МассивКлючей, ВключаяПустойКлюч = Ложь, ОчищатьПриемник = Ложь)
	
	Если ОчищатьПриемник Тогда
		ОбъектЧекККМ[ИмяТабличнойЧасти].Очистить();
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		
		Если (НЕ МассивКлючей.Найти(СтрокаТабличнойЧасти[ИмяРеквизитаКлюча]) = Неопределено)
		 ИЛИ (ВключаяПустойКлюч И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяРеквизитаКлюча])) Тогда
			
			СтрокаДокумента = ОбъектЧекККМ[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТабличнойЧасти);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьЧека()

// <Описание процедуры>
//
// Параметры
//  ОбъектЧекККМ      - Чек ККМ
//  ИмяТабличнойЧасти - Строка
//  Организация       - Организация
//
&НаСервере
Процедура ЗаполнитьТабличнуюЧастьПоОрганизации(ОбъектЧекККМ, ИмяТабличнойЧасти, Организация, ОчищатьПриемник = Ложь)
	
	Если ОчищатьПриемник Тогда
		ОбъектЧекККМ[ИмяТабличнойЧасти].Очистить();
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		
		Если СтрокаТабличнойЧасти.Организация = Организация Тогда
			СтрокаДокумента = ОбъектЧекККМ[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТабличнойЧасти);
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОрганизации()

// Определяет была ли оплата картой
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Булево
//
&НаСервере
Функция ЕстьОплатаПлатежнойКартой(ОбъектЧекККМ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Оплата.ВидОплаты КАК Справочник.ВидыОплатЧекаККМ) КАК ВидОплаты,
	|	ВЫРАЗИТЬ(Оплата.Сумма КАК ЧИСЛО) КАК Сумма
	|ПОМЕСТИТЬ ТаблицаОплаты
	|ИЗ
	|	&Оплата КАК Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплаты.ВидОплаты,
	|	ТаблицаОплаты.Сумма
	|ИЗ
	|	ТаблицаОплаты КАК ТаблицаОплаты
	|ГДЕ
	|	ТаблицаОплаты.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	|	И ТаблицаОплаты.Сумма > 0";
	
	Запрос.УстановитьПараметр("Оплата", ОбъектЧекККМ.Оплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой()

КонецФункции // ЕстьОплатаПлатежнойКартой()

&НаСервере
Процедура ВыполнитьОбменДаннымиПоРабочемуМесту()

	Если ОбменДаннымиВызовСервера.ОбменДаннымиВключен("ПоРабочемуМесту") 
		И ЭтоРабочееМестоOffLine Тогда
		
		ВыборкаУзлов = ПланыОбмена.ПоРабочемуМесту.Выбрать();
		ЭтотУзелОбмена = ПланыОбмена.ПоРабочемуМесту.ЭтотУзел();
		Пока ВыборкаУзлов.Следующий() Цикл
			Если ВыборкаУзлов.Ссылка <> ЭтотУзелОбмена
				И ЭтотУзелОбмена.ПередаватьДанныеПослеКаждогоПробитогоЧека
			Тогда
				ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Ложь, ВыборкаУзлов.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДвиженияСерийныхНомеровДляПогашения(
	Отказ,
	ТекстОшибки = "",
	Дата
	) 
	
	МаркетинговыеАкцииСерверПривилегированный.ПроверитьДвиженияСерийныхНомеровДляПогашения(
		Объект,
		Ложь,
		Истина,
		Объект.ПогашениеПодарочныхСертификатов.Выгрузить(),
		Объект.ПогашениеПодарочныхСертификатов.Выгрузить(),
		Отказ,
		ТекстОшибки,
		Дата
		);
КонецПроцедуры

&НаСервере
Процедура ПроверитьЧтоНетОплатыПодарочнымСертификатом(
	ИмяТабличнойЧасти, 
	Отказ,
	ТекстОшибки = "",
	ОсобыйВыводСообщения = Ложь
	) 
	
	МаркетинговыеАкцииСервер.ПроверитьЧтоНетОплатыПодарочнымСертификатом(
		Объект,
		ИмяТабличнойЧасти,
		Отказ, 
		ТекстОшибки,
		ОсобыйВыводСообщения
	);
	
КонецПроцедуры


#Область ЗАПОЛНЕНИЕ_И_ЗАПИСЬ_ЧЕКА

&НаСервере
Функция ЗаписатьЧекККМПоОрганизации(Организация, ПерваяОрганизация)
	
	ОбъектЧекККМ = ЧекККМВОбработке.ПолучитьОбъект();

	Если НЕ ОбъектЧекККМ = Неопределено Тогда

		ОбъектЧекККМ.Дата = ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера();

	Иначе

		ОбъектЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
		ОбъектЧекККМ.УстановитьСсылкуНового(?(ЧекККМВОбработке.Пустая(), Документы.ЧекККМ.ПолучитьСсылку(), ЧекККМВОбработке));
		ОбъектЧекККМ.Дата = НачалоДня(ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера());

		ЧекККМВОбработке = ОбъектЧекККМ.ПолучитьСсылкуНового();

	КонецЕсли;
	
	ОбъектЧекККМ.РежимРМК = Истина;
	
	ЗаполнитьЗначенияСвойств(ОбъектЧекККМ, Объект, , "Ссылка, Дата");
	
	ОбъектЧекККМ.Организация = Организация;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Организация", Организация);
	
	СтрокиКассККМОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(СтруктураПоиска);
	Если СтрокиКассККМОрганизации.Количество() > 0  Тогда
		ОбъектЧекККМ.КассаККМ = СтрокиКассККМОрганизации[0].КассаККМ;
	КонецЕсли;
	
	МассивКлючей = ПолучитьМассивКлючей("КлючСвязи", Организация);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "Товары"       , "КлючСвязи", МассивКлючей, , Истина);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "СкидкиНаценки", "КлючСвязи", МассивКлючей, , Истина);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "Подарки"      , "КлючСвязи", МассивКлючей, ПерваяОрганизация, Истина);
	
	МассивКлючей = ПолучитьМассивКлючей("КлючСвязиСерийныхНомеров", Организация);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "СерийныеНомера", "КлючСвязиСерийныхНомеров", МассивКлючей, , Истина);
	
	ЗаполнитьТабличнуюЧастьПоОрганизации(ОбъектЧекККМ, "Оплата"                         , Организация, Истина);
	ЗаполнитьТабличнуюЧастьПоОрганизации(ОбъектЧекККМ, "ПогашениеПодарочныхСертификатов", Организация, Истина);
	// +HVOYA. 30.08.2016 15:29:27, Львова Е.А.
	ЗаполнитьТабличнуюЧастьПоОрганизации(ОбъектЧекККМ, "ПогашениеСкидочныхКупонов"		, Организация, Истина);
	// -HVOYA. 30.08.2016 15:29:32, Львова Е.А.
	ЗаполнитьТабличнуюЧастьПоОрганизации(ОбъектЧекККМ, "Серии"                          , Организация, Истина);
	
	ОбъектЧекККМ.УправляемыеСкидки.Очистить();
	
	Для каждого СтрокаУправляемыеСкидки Из Объект.УправляемыеСкидки Цикл
		СкидкаНаценка = СтрокаУправляемыеСкидки.СкидкаНаценка;
		Если НЕ ОбъектЧекККМ.СкидкиНаценки.Найти(СкидкаНаценка,"СкидкаНаценка") = Неопределено 
			ИЛИ НЕ ОбъектЧекККМ.Подарки.Найти(СкидкаНаценка,"СкидкаНаценка") = Неопределено Тогда
			СтрокаТаблица = ОбъектЧекККМ.УправляемыеСкидки.Добавить();
			СтрокаТаблица.СкидкаНаценка = СкидкаНаценка;
		ИначеЕсли ПерваяОрганизация 
				И Объект.СкидкиНаценки.Найти(СкидкаНаценка,"СкидкаНаценка") = Неопределено 
				И Объект.Подарки.Найти(СкидкаНаценка,"СкидкаНаценка") = Неопределено Тогда
			СтрокаТаблица = ОбъектЧекККМ.УправляемыеСкидки.Добавить();
			СтрокаТаблица.СкидкаНаценка = СкидкаНаценка;
		КонецЕсли;
	КонецЦикла;
	
	ОбъектЧекККМ.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(ОбъектЧекККМ.Товары, Объект.ЦенаВключаетНДС);
	
	ОбъектЧекККМ.Записать(РежимЗаписиДокумента.Запись);

	ЧекККМВОбработке = ОбъектЧекККМ.Ссылка;

	Возврат ЧекККМВОбработке;
	
КонецФункции

&НаСервере
Функция ЗаписатьЧекККМПоВсемДанным(Организация, СтатусЧекаККМ = Неопределено, ЗагрузкаДанных = Ложь)

	ОбъектЧекККМ = ЧекККМВОбработке.ПолучитьОбъект();

	Если НЕ ОбъектЧекККМ = Неопределено Тогда

		ОбъектЧекККМ.Дата = ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера();

	Иначе

		ОбъектЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
		ОбъектЧекККМ.УстановитьСсылкуНового(?(ЧекККМВОбработке.Пустая(), Документы.ЧекККМ.ПолучитьСсылку(), ЧекККМВОбработке));
		ОбъектЧекККМ.Дата = ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера();

		ЧекККМВОбработке = ОбъектЧекККМ.ПолучитьСсылкуНового();

	КонецЕсли;
	
	ЗаполнитьЧекПоВсемДанным(ОбъектЧекККМ);
	
	ОбъектЧекККМ.РежимРМК      = Истина;
	ОбъектЧекККМ.Ответственный = ПараметрыСеанса.ТекущийПользователь;

	Если НЕ СтатусЧекаККМ = Неопределено Тогда

		ОбъектЧекККМ.СтатусЧекаККМ = СтатусЧекаККМ;

	КонецЕсли;

	ОбъектЧекККМ.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(ОбъектЧекККМ.Товары, Объект.ЦенаВключаетНДС);

	Если ЗагрузкаДанных = Истина Тогда

		ОбъектЧекККМ.ОбменДанными.Загрузка = Истина;

	КонецЕсли;

	ОбъектЧекККМ.Записать(РежимЗаписиДокумента.Запись);

	ЧекККМВОбработке = ОбъектЧекККМ.Ссылка;

	Возврат ЧекККМВОбработке;

КонецФункции

&НаСервере
Функция ЗаписатьИЗакрытьЧекПоСтатусу(СтатусЧекаККМ, ПараметрыЗаполненияЧекаККМ)

	ЧекПроведен = Ложь;

	ОбъектЧекККМ = ЧекККМВОбработке.ПолучитьОбъект();

	Если НЕ ОбъектЧекККМ = Неопределено Тогда

		ОбъектЧекККМ.Дата = ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера();;
		ЧекПроведен = ЧекККМВОбработке.Проведен;

	Иначе

		ОбъектЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
		ОбъектЧекККМ.УстановитьСсылкуНового(?(ЧекККМВОбработке.Пустая(), Документы.ЧекККМ.ПолучитьСсылку(), ЧекККМВОбработке));
		ОбъектЧекККМ.Дата = ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера();

		ЧекККМВОбработке = ОбъектЧекККМ.ПолучитьСсылкуНового();

	КонецЕсли;
	
	ЗаполнитьЧекПоВсемДанным(ОбъектЧекККМ);
	ЗаполнитьЗначенияСвойств(ОбъектЧекККМ, ПараметрыЗаполненияЧекаККМ);
	
	ОбъектЧекККМ.СтатусЧекаККМ   = СтатусЧекаККМ;
	ОбъектЧекККМ.РежимРМК        = Истина;
	ОбъектЧекККМ.Ответственный   = ПараметрыСеанса.ТекущийПользователь;

	ОбъектЧекККМ.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(ОбъектЧекККМ.Товары, Объект.ЦенаВключаетНДС);	//	LNK 15.01.2019 10:30:55

	ОбъектЧекККМ.ДополнительныеСвойства.Вставить("ЗАПИСЬ_РМК", Истина);

	Если ЧекПроведен Тогда

			ОбъектЧекККМ.Записать(РежимЗаписиДокумента.ОтменаПроведения);

	Иначе	ОбъектЧекККМ.Записать();

	КонецЕсли;

	ПредставлениеЧека = СокрЛП(ОбъектЧекККМ.Ссылка);
	
	СоздатьНовыйНабор(Истина);
	
	Возврат ПредставлениеЧека;	//	LNK 01.11.2017 10:10:32

КонецФункции

&НаКлиенте
Функция ЗаписатьИЗакрытьЧекПоСтатусуКлиент(СтатусЧекаККМ, ПараметрыЗаполненияЧекаККМ)
	
	Оповестить("ИзмененыДанныеКассовойСмены");	//	LNK 14.09.2020 10:25:16

	ПредставлениеЧека = ЗаписатьИЗакрытьЧекПоСтатусу(СтатусЧекаККМ, ПараметрыЗаполненияЧекаККМ);
	УстановитьЗаголовок();
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	Возврат ПредставлениеЧека;

КонецФункции

&НаКлиенте
Процедура СоздатьНовыйНаборКлиент()
	
	СоздатьНовыйНабор();
	Модифицированность = Ложь;	//	LNK 18.02.2023 16:24:34
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	УстановитьЗаголовок();
	УстановитьОформлениеЭлементов();	//	LNK 27.09.2019 12:31:46

КонецПроцедуры

// Процедура очищает текущие данные и готовит к следующему набору
//
// Параметры
//  Нет
//
&НаСервере
Процедура СоздатьНовыйНабор(ОчиститьДокументОбработки = Истина)  // При оплате чека сюда заходит 2 раза

	Объект.Дата = ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера();

	Объект.ВидОперации        = Перечисления.ВидыОперацийЧекККМ.Продажа;
	Объект.ДоговорЭквайринга  = Справочники.ДоговорыЭквайринга.ПустаяСсылка();
	Объект.ДоговорСтрахования = Документы.ДоговорСтрахования.ПустаяСсылка();
	Объект.ЗаказПокупателя    = Документы.ЗаказПокупателя.ПустаяСсылка();
	ОплатаБалламиНазначенаЗаказомПокупателя = Ложь;

	ДанныеЗаказа = ДанныеЗаказаИнициализировать(НаборПравИНастроек);

	Объект.НомерТелефона      = "";	//	LNK 11.11.2019 12:22:29

	Если НЕ ТестовыйРежимРМК Тогда
		
		Объект.КассаККМ = ТаблицаКассККМОрганизаций[0].КассаККМ;

	КонецЕсли;

	Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КассаККМ, "Владелец");
	УстановитьСистемуНалогообложения();	//	LNK 31.12.2020 05:57:03

	Объект.УслугаБанка = Справочники.УслугиБанка.ПустаяСсылка();	//	LNK 11.04.2018 14:01:16
	Объект.УслугаБанкаПериодПредоставления = 0;
	ИнициализироватьУслугаБанкаДанные();	//	LNK 10.07.2018 08:13:51
	
	Если НЕ Объект.Продавец = ПродавецПоУмолчанию 
		ИЛИ ПродавецПоУмолчанию = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда

		Объект.Продавец = Справочники.ФизическиеЛица.ПустаяСсылка();

	КонецЕсли; 
	
	Объект.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;

	Объект.ЧекККМПродажа           = Документы.ЧекККМ.ПустаяСсылка();
	Объект.ДисконтнаяКарта         = Справочники.ИнформационныеКарты.ПустаяСсылка();
	Объект.ВладелецДисконтнойКарты = Неопределено;

	ДанныеРасчетаCRM = Неопределено;	//	LNK 11.09.2019 15:14:39
	
	ОчиститьРеквизитыФормы();

	ОчиститьТабличныеЧасти(Объект);
	
	Объект.Ссылка = Документы.ЧекККМ.ПустаяСсылка();
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
	
	Если ОчиститьДокументОбработки Тогда

		ЧекККМВОбработке = Документы.ЧекККМ.ПолучитьСсылку();

	КонецЕсли;

//	LNK 07.08.2019 15:00:06
	ДанныеКонтрагента = ОбменMicrosoftDynamicsСервер.ИнициализацияДанныхКонтрагента();
	ДанныеКарты		  = РозничныеПродажиСервер.ПолучитьДанныеКарты(ЧекККМВОбработке,,,,,);	//	LNK 26.02.2021 12:48:20

	ПарольДиректораВведенРанее = Ложь;

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличныеЧасти(ОбъектОчистки)

	ОбъектОчистки.Оплата.Очистить();
	ОбъектОчистки.ПогашениеПодарочныхСертификатов.Очистить();
	ОбъектОчистки.ПогашениеСкидочныхКупонов.Очистить();	// +HVOYA. 07.10.2016 21:43:42, Львова Е.А.
	ОбъектОчистки.ВыдачаСкидочныхКупонов.Очистить();	//	LNK 03.10.2019 07:28:48
	ОбъектОчистки.Подарки.Очистить();
	ОбъектОчистки.Серии.Очистить();
	ОбъектОчистки.СерийныеНомера.Очистить();
	ОбъектОчистки.СкидкиНаценки.Очистить();
	ОбъектОчистки.Товары.Очистить();
	ОбъектОчистки.УправляемыеСкидки.Очистить();
	ОбъектОчистки.НачислениеБонусныхБаллов.Очистить();
	ОбъектОчистки.ОплатаБонуснымиБаллами.Очистить();

	ОбъектОчистки.ВариантВыдачиКупона          = Неопределено;	// +HVOYA. 07.10.2016 21:43:42, Львова Е.А.
	ОбъектОчистки.НоменклатураСкидочногоКупона = Неопределено;	// +HVOYA. 07.10.2016 21:43:42, Львова Е.А.

	УправляемыеСкидки.Очистить();

КонецПроцедуры

// Заполняем документ объект чек ККМ
//
// Параметры
//  ОбъектЧекККМ - Объект Документ ЧекККМ
//
&НаСервере
Процедура ЗаполнитьЧекПоВсемДанным(ОбъектЧекККМ)

//	LNK 30.08.2017 15:10:25
	Для каждого СтрокаТовары Из Объект.Товары Цикл

		Если СтрокаТовары.ПричинаРучнойСкидки.Пустая() Тогда

			СтрокаТовары.Содержание = "";

		КонецЕсли;

	КонецЦикла;
	
	Объект.СуммаБонусныхБалловСписано = Объект.Товары.Итог("СуммаБонусныхБалловСписано");
	БонусныеБаллыСервер.ЗаполнитьКлючСвязиБонусныхБаллов(Объект.Товары);

	ЗаполнитьЗначенияСвойств(ОбъектЧекККМ, Объект,, "Ссылка, Дата");
	
	ОбработатьТоварыПодарочныеСертификаты("Сохранение");	//	LNK 18.02.2020 11:17:19

	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.Товары                         , ОбъектЧекККМ.Товары, Истина);
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.УправляемыеСкидки              , ОбъектЧекККМ.УправляемыеСкидки, Истина);
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.Подарки                        , ОбъектЧекККМ.Подарки, Истина);
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.СкидкиНаценки                  , ОбъектЧекККМ.СкидкиНаценки, Истина);
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.СерийныеНомера                 , ОбъектЧекККМ.СерийныеНомера, Истина);
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.Серии                          , ОбъектЧекККМ.Серии, Истина);
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.Оплата                         , ОбъектЧекККМ.Оплата, Истина);
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.ПогашениеПодарочныхСертификатов, ОбъектЧекККМ.ПогашениеПодарочныхСертификатов, Истина);
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.ПогашениеСкидочныхКупонов	 	 , ОбъектЧекККМ.ПогашениеСкидочныхКупонов, Истина);
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.ВыдачаСкидочныхКупонов	 	 , ОбъектЧекККМ.ВыдачаСкидочныхКупонов, Истина);	//	LNK 19.11.2019 10:59:09
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.НачислениеБонусныхБаллов	 	 , ОбъектЧекККМ.НачислениеБонусныхБаллов, Истина);				//	LNK 01.02.2021 11:28:08
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.ОплатаБонуснымиБаллами	 	 , ОбъектЧекККМ.ОплатаБонуснымиБаллами, Истина);				//	LNK 01.02.2021 11:28:08

	ОбработатьТоварыПодарочныеСертификаты("Восстановление");	//	LNK 18.02.2020 15:01:40

	ДанныеХранилища = Документы.ЧекККМ.ПолучитьДанныеХранилища(ОбъектЧекККМ.Хранилище, Истина);	//	LNK 29.10.2020 05:18:55

	Для каждого СтрокаОплата Из Объект.Оплата Цикл	//	LNK 29.10.2020 05:47:11

		Если НЕ ПустаяСтрока(СтрокаОплата.ОтветЭквайрера) Тогда

			ДанныеХранилища.ОтветЭквайрера.Вставить(СтрокаОплата.ВидОплаты, ЗначениеИзСтрокиВнутр(СтрокаОплата.ОтветЭквайрера));

		КонецЕсли;

	КонецЦикла;

	ОбъектЧекККМ.Хранилище = Новый ХранилищеЗначения(ДанныеХранилища, Новый СжатиеДанных(9));

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиПоЧекуККМ(Отказ, ПараметрыИнформации)
	
	Попытка
		
		СоздатьНовыйНабор(Ложь);
		ТекстОшибки = "";
		ТекКассаККМ = Объект.КассаККМ;
		
		ОбъектЧекККМ = ЧекККМВОбработке.ПолучитьОбъект();
		#Если _ Тогда
		ОбъектЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
		#КонецЕсли

		Попытка

			ОбъектЧекККМ.Заблокировать();

			ЗаполнитьЗначенияСвойств(Объект, ОбъектЧекККМ
				,
				, "Дата
				|, Товары
				|, НачислениеБонусныхБаллов
				|, ОплатаБонуснымиБаллами
				|, УправляемыеСкидки
				|, Подарки
				|, СкидкиНаценки
				|, СерийныеНомера
				|, Серии
				|, Оплата
				|, ПогашениеПодарочныхСертификатов
				|, ПогашениеСкидочныхКупонов
				|, ВыдачаСкидочныхКупонов"
			);
			
			Объект.Дата		= ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера();
			Объект.КассаККМ	= ТекКассаККМ;
			
		//	LNK 02.11.2022 06:50:29
			ДанныеЗаказа = ДанныеЗаказаПокупателяЗаполнить(, Объект.ЗаказПокупателя, НаборПравИНастроек, ДанныеМагазина.УслугаДоставкиЗаказаПокупателя);

			ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(ОбъектЧекККМ.Товары, Объект.Товары, Истина);
			
			СтруктураДействийЦены = Новый Структура;
			СтруктураДействийЦены.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина, Истина));

			КэшированныеЗначения = "";

			Для Каждого СтрокаТоварыРМК Из Объект.Товары Цикл

				ЗапомнитьЦенуИзЧека = СтрокаТоварыРМК.Цена;
				ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьЦенуПродажиВСтрокеТЧСервер(СтрокаТоварыРМК, СтруктураДействийЦены, КэшированныеЗначения);

				Если ОбъектЧекККМ.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда

					СтрокаТоварыРМК.Цена = ЗапомнитьЦенуИзЧека;

				КонецЕсли;

			КонецЦикла;

			ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(ОбъектЧекККМ.НачислениеБонусныхБаллов		, Объект.НачислениеБонусныхБаллов, Истина);	//	LNK 01.02.2021 10:46:39
			ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(ОбъектЧекККМ.ОплатаБонуснымиБаллами			, Объект.ОплатаБонуснымиБаллами, Истина);	//	LNK 19.04.2021 08:35:53
			ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(ОбъектЧекККМ.УправляемыеСкидки				, Объект.УправляемыеСкидки, Истина);
			ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(ОбъектЧекККМ.Подарки							, Объект.Подарки, Истина);
			ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(ОбъектЧекККМ.СкидкиНаценки					, Объект.СкидкиНаценки, Истина);
			ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(ОбъектЧекККМ.СерийныеНомера					, Объект.СерийныеНомера, Истина);
			ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(ОбъектЧекККМ.Серии							, Объект.Серии, Истина);
			ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(ОбъектЧекККМ.Оплата							, Объект.Оплата, Истина);
			ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(ОбъектЧекККМ.ПогашениеПодарочныхСертификатов	, Объект.ПогашениеПодарочныхСертификатов, Истина);
		//	LNK 03.10.2019 09:20:04
			ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(ОбъектЧекККМ.ВыдачаСкидочныхКупонов			, Объект.ВыдачаСкидочныхКупонов, Истина);
			// +HVOYA. 31.08.2016 12:11:41, Львова Е.А.
			ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(ОбъектЧекККМ.ПогашениеСкидочныхКупонов		, Объект.ПогашениеСкидочныхКупонов, Истина);
			ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(ОбъектЧекККМ.НачислениеБонусныхБаллов		, Объект.НачислениеБонусныхБаллов, Истина);
			ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(ОбъектЧекККМ.ОплатаБонуснымиБаллами			, Объект.ОплатаБонуснымиБаллами, Истина);

			// -HVOYA. 31.08.2016 12:11:44, Львова Е.А.
			УправляемыеСкидки.ЗагрузитьЗначения(Объект.УправляемыеСкидки.Выгрузить().ВыгрузитьКолонку("СкидкаНаценка"));

			ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьКодНоменклатурыВТЧСервер(Объект.Товары, "КодНоменклатуры");	//	LNK 14.02.2020 13:31:01

			ОбработатьТоварыПодарочныеСертификаты("Восстановление");	//	LNK 18.02.2020 11:53:56
			
			ДозаполнитьТаблицыОбъекта();

			Если НЕ Объект.УслугаБанка.Пустая() И НЕ ДанныеМагазина.ИспользоватьБанковскиеУслуги = Истина Тогда

				ВызватьИсключение "Отказано! В чеке указана услуга банка, но для магазина «" + Объект.Магазин + "» не разрешено использование услуг банков.";

			Иначе

			//	LNK 10.07.2018 10:31:40
				УслугаБанкаДанные = ФинансыВызовСервера.ПолучитьДанныеУслугаБанка(Объект.УслугаБанка, Объект.ЗаказПокупателя);

				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ТаблицаРегистра.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
				|ИЗ
				|	РегистрСведений.ДанныеКредитныхПрограмм КАК ТаблицаРегистра
				|ГДЕ
				|	ТаблицаРегистра.ДокументПродажи = &ЧекККМВОбработке"
				);
				Запрос.УстановитьПараметр("ЧекККМВОбработке", ЧекККМВОбработке);
				
				УслугаБанкаДанные.СтараяСхемаКредита = Запрос.Выполнить().Пустой();

			КонецЕсли;

			Если ТипЗнч(Объект.ВладелецДисконтнойКарты) = Тип("СправочникСсылка.Контрагенты") И НЕ Объект.ВладелецДисконтнойКарты.Пустая() Тогда

			//	LNK 28.11.2019 08:08:29

				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ТаблицаКонтакты.НомерТелефона КАК НомерТелефона
				|ИЗ
				|	Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтакты
				|ГДЕ
				|	ТаблицаКонтакты.Ссылка = &Контрагент
				|	И ТаблицаКонтакты.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента)
				|	И НЕ ТаблицаКонтакты.НомерТелефона = """""
				);
				Запрос.УстановитьПараметр("Контрагент", Объект.ВладелецДисконтнойКарты);

				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда

					Объект.НомерТелефона = Выборка.НомерТелефона;

				КонецЕсли;

			КонецЕсли;
			
			УстановитьСистемуНалогообложения();	//	LNK 31.12.2020 05:57:03
			
		//	LNK 28.10.2022 06:02:32
		//	---------------------------------------------------------------------------------------

			ОбъектЧекККМ.КассаККМ		= Объект.КассаККМ;
			ОбъектЧекККМ.СтатусЧекаККМ	= Перечисления.СтатусыЧековККМ.ПустаяСсылка();
			ОбъектЧекККМ.РежимРМК		= Истина;
			ОбъектЧекККМ.Ответственный	= ПараметрыСеанса.ТекущийПользователь;
			ОбъектЧекККМ.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(ОбъектЧекККМ.Товары, Объект.ЦенаВключаетНДС);

			ОбъектЧекККМ.ДополнительныеСвойства.Вставить("ЗАПИСЬ_РМК", Истина);
			ОбъектЧекККМ.Записать();

			ОбъектЧекККМ.Разблокировать();

		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ПараметрыИнформации.ЗаголовокИнформации = "Помилка блокування чека.";
			ПараметрыИнформации.ТекстИнформации     = "Виникла помилка при спробі завантажити відкладений чек:"
														+ Символы.ПС + ТекстОшибки;
			Отказ = Истина;

		КонецПопытки;

	Исключение

		ПараметрыИнформации.ЗаголовокИнформации = "Помилка відновлення чека!";
		ПараметрыИнформации.ТекстИнформации     = "Виникла помилка при спробі завантажити відкладений чек:"
													+ Символы.ПС + ТекстОшибки;
		Отказ = Истина;

	КонецПопытки;

	Если Отказ = Истина Тогда

		ЗафиксироватьОшибку(ТекстОшибки, "ЗаполнитьДаннымиПоЧекуККМ");	//	LNK 04.09.2018 14:16:54
		СоздатьНовыйНабор(Ложь);

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста	//	LNK 02.04.2022 05:54:36
Процедура ПересчитатьТоварыПоСтавкеНДС(Товары, ЦенаВключаетНДС, СтруктураПересчетаНДС)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК Номенклатура,
	|	ТаблицаСправочник.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Ссылка В (&СписокТоваров)"
	);
	Запрос.УстановитьПараметр("СписокТоваров", Товары.Выгрузить(, "Номенклатура"));

	Выборка = Запрос.Выполнить().Выбрать();

	КешСсылок = Новый Соответствие;

	Пока Выборка.Следующий() Цикл

		КешСсылок.Вставить(Выборка.Номенклатура, Выборка.СтавкаНДС);

	КонецЦикла;

	СтруктураДействий = Новый Структура;	//	LNK 01.04.2022 11:22:39
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки"	, Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"			, Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено"	, Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано"	, Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаНДС);

	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл

		СтавкаНДС = КешСсылок.Получить(СтрокаТабличнойЧасти.Номенклатура);

		Если НЕ СтавкаНДС = СтрокаТабличнойЧасти.СтавкаНДС Тогда

			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДС;

			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаОкругления;
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(СтрокаТабличнойЧасти, ЦенаВключаетНДС);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Заполняем на основании возврата
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ЗаполнитьНаОснованииВозврата()

	БонусныеБаллыСервер.ПроверитьДокументКлючСвязиБонусныхБаллов(Объект.ЧекККМПродажа);

	ЗаполнитьЗначенияСвойств(Объект, 
		 Объект.ЧекККМПродажа, 
 		 "ВладелецДисконтнойКарты, ДисконтнаяКарта, ДоговорЭквайринга, ЗаказПокупателя, Продавец, ПодакцизныеТоварыДляКоммерческогоИспользования, УслугаБанка, УслугаБанкаПериодПредоставления", 
		 "ЧекККМПродажа, Дата, Товары, УправляемыеСкидки, Подарки, СкидкиНаценки, НачислениеБонусныхБаллов, ОплатаБонуснымиБаллами, СерийныеНомера, Серии, Оплата, ПогашениеПодарочныхСертификатов");
	
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.ЧекККМПродажа.Товары					, Объект.Товары, Истина);
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.ЧекККМПродажа.УправляемыеСкидки		, Объект.УправляемыеСкидки, Истина);
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.ЧекККМПродажа.Подарки					, Объект.Подарки, Истина);
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.ЧекККМПродажа.СкидкиНаценки			, Объект.СкидкиНаценки, Истина);
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.ЧекККМПродажа.Серии					, Объект.Серии, Истина);
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.ЧекККМПродажа.СерийныеНомера			, Объект.СерийныеНомера, Истина);
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.ЧекККМПродажа.Оплата					, Объект.Оплата, Истина);
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.ЧекККМПродажа.НачислениеБонусныхБаллов, Объект.НачислениеБонусныхБаллов, Истина);
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.ЧекККМПродажа.ОплатаБонуснымиБаллами	, Объект.ОплатаБонуснымиБаллами, Истина);

	Если НаборПравИНастроек.ВсеПродажиБезНДС = Истина Тогда

		ПересчитатьТоварыПоСтавкеНДС(Объект.Товары, Объект.ЦенаВключаетНДС, ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));

	КонецЕсли;

	ДанныеПродажи = БонусныеБаллыВызовСервера.ПолучитьДанныеДокументаПродажи(Объект.ЧекККМПродажа);	//	LNK 12.09.2021 07:51:18

	СкидкиНаценкиКлиентСервер.ОчиститьОкругленияТоваров(Объект.Товары, Ложь);	//	LNK 31.01.2020 10:31:19
	УправляемыеСкидки.ЗагрузитьЗначения(Объект.УправляемыеСкидки.Выгрузить().ВыгрузитьКолонку("СкидкаНаценка"));
	
	Объект.Магазин     = ДанныеМагазина.Магазин;	//	LNK 17.04.2018 13:44:14 - магазин текущий! раньше был по чеку возврата
	Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ТаблицаДокументы
	|ГДЕ
	|	ТаблицаДокументы.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ) И КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|	И ТаблицаДокументы.ЧекККМПродажа = &ЧекККМПродажа
	|	И ТаблицаДокументы.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ПустаяСсылка)
	|	И ТаблицаДокументы.КассаККМ = &КассаККМ"
	);
	Запрос.УстановитьПараметр("ТекущаяДата"	 , ТекущаяДата());
	Запрос.УстановитьПараметр("ЧекККМПродажа", Объект.ЧекККМПродажа);
	Запрос.УстановитьПараметр("КассаККМ"	 , Объект.КассаККМ);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЧекККМВОбработке = Выборка.Ссылка;

	КонецЕсли;

	ОбработатьТоварыПодарочныеСертификаты("Восстановление");	//	LNK 18.02.2020 11:53:56
	
	Объект.ПогашениеПодарочныхСертификатов.Очистить();
	
	КолвоЭлементовКоллекции = Объект.Оплата.Количество();

	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл

		ЭлементКоллекции = Объект.Оплата[КолвоЭлементовКоллекции - ОбратныйИндекс];

		Если ЭлементКоллекции.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом Тогда

			Объект.Оплата.Удалить(ЭлементКоллекции);

		КонецЕсли;

	КонецЦикла;

//	LNK 10.07.2018 10:31:40
	УслугаБанкаДанные = ФинансыВызовСервера.ПолучитьДанныеУслугаБанка(Объект.УслугаБанка, Объект.ЗаказПокупателя);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьКодНоменклатурыВТЧСервер(Объект.Товары, "КодНоменклатуры");	//	LNK 14.02.2020 13:31:01
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	
	Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЧекККМПродажа, "Организация");
	УстановитьСистемуНалогообложения();	//	LNK 31.12.2020 05:57:03

	ЗаполнитьЗначенияВКолонке(Объект.Организация, "Организация", Объект.Товары);
	ЗаполнитьЗначенияВКолонке(Объект.Организация, "Организация", Объект.Серии);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
//	LNK 02.11.2022 06:57:31
	ДанныеЗаказа = ДанныеЗаказаПокупателяЗаполнить(, Объект.ЗаказПокупателя, НаборПравИНастроек, ДанныеМагазина.УслугаДоставкиЗаказаПокупателя);

	ЗаполнитьОстаткиСервер();

	Если ЗначениеЗаполнено(Объект.ВладелецДисконтнойКарты) ИЛИ НЕ Объект.ДисконтнаяКарта.Пустая() Тогда

		ОперативныеДанныеПокупателя(Объект.ДисконтнаяКарта, Объект.ВладелецДисконтнойКарты, НЕ ЗначениеЗаполнено(Объект.ВладелецДисконтнойКарты));
		РМК2_ИдентификацияКлиента = СокрЛП(Объект.ВладелецДисконтнойКарты);

	Иначе
		
		ОчиститьРеквизитыФормы();

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПровестиЧекККМ(ЧекККМСсылка, ПараметрыЗаполненияЧекаККМ, МассивСсылокЧеков, ВывестиДополнительноеСообщение, ПараметрыИнформации)

	ОбъектЧекККМ = ЧекККМСсылка.ПолучитьОбъект();
	#Если _ Тогда
	ОбъектЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
	#КонецЕсли
	
	ОбъектЧекККМ.РежимРМК = Истина;
	
	ЗаполнитьЗначенияСвойств(ОбъектЧекККМ, ПараметрыЗаполненияЧекаККМ);
	
	ОбъектЧекККМ.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(ОбъектЧекККМ.Товары, Объект.ЦенаВключаетНДС);	//	LNK 15.01.2019 10:31:20
	ДанныеХранилища = Документы.ЧекККМ.ПолучитьДанныеХранилища(ОбъектЧекККМ.Хранилище);	//	LNK 29.10.2020 05:18:55

	ОбъектЧекККМ.Хранилище = Новый ХранилищеЗначения(ДанныеХранилища, Новый СжатиеДанных(9));

	РежимПроведения = ?(НачалоДня(ОбъектЧекККМ.Дата) = НачалоДня(ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера())
		, РежимПроведенияДокумента.Оперативный
		, РежимПроведенияДокумента.Неоперативный);

	Если  ОбъектЧекККМ.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа
		И ЗаказПокупателяЗаполнен(ОбъектЧекККМ.ЗаказПокупателя, "СчетНаОплатуПокупателю")
	Тогда	//	LNK 07.08.2020 06:35:23 - предохранитель, так как в этом случае ссылка определена в любом случае!

	//	на всякий случай.. мало ли что администраторы могли натворить.
		ОбъектЧекККМ.ПометкаУдаления = Ложь;
		ОбъектЧекККМ.ОтчетОРозничныхПродажах = Неопределено;

	КонецЕсли;

	ОбъектЧекККМ.ДополнительныеСвойства.Вставить("ЗАПИСЬ_РМК", Истина);	//	LNK 24.12.2021 07:01:06 - ТОЛЬКО ПРИ ПРОБИТИИ!
	ОбъектЧекККМ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведения);

	МассивСсылокЧеков.Добавить(ЧекККМСсылка);
	
	Если НЕ ОбъектЧекККМ.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый Тогда
	
		ВывестиДополнительноеСообщение = Истина;
		
		Если ЕстьОплатаПлатежнойКартой(ОбъектЧекККМ) Тогда

				ПараметрыИнформации.ЗаголовокИнформации = "Чек не пробитий. Була оплата платіжною карткою";

		Иначе	ПараметрыИнформации.ЗаголовокИнформации = "Чек не пробитий.";

		КонецЕсли;

		ПараметрыИнформации.ТекстИнформации = "Чек потрібно пробити пізніше або анулювати перед закриттям зміни";

	КонецЕсли;
	
	Попытка	//+HVOYA Mykhailo : если чек пробит и если режим ИЗ то меняем статус интернет-заказа
	
		Если ОбъектЧекККМ.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый И ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя, "ЗаказПокупателя") Тогда

		//	в ИЗ нет такого понятие, как упаковки. Таким образом, используем Количество, которое в заказе всегда равно КоличествоУпаковок
			ТоварыПродажи = ОбъектЧекККМ.Товары.Выгрузить(, "Номенклатура, Количество");
			ТоварыПродажи.Индексы.Добавить("Номенклатура");
		//	LNK 23.11.2021 05:53:10
			Документы.ЗаказПокупателя.ЗакрытьЗаказПокупателя(Объект.ЗаказПокупателя, Истина, НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел(), ТоварыПродажи);

		КонецЕсли; 
		
	Исключение

		ЗафиксироватьОшибку(ОписаниеОшибки(), "ПровестиЧекККМ");	//	LNK 04.09.2018 14:16:54

	КонецПопытки;

КонецПроцедуры

&НаСервере	//	LNK 18.02.2020 11:17:01
Процедура ОбработатьТоварыПодарочныеСертификаты(Направление)

	Если Направление = "Сохранение" Тогда

		ОчиститьСерийныеНомера(Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);

		СтрокиСертификатов = Объект.Товары.НайтиСтроки(Новый Структура("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.ПодарочныйСертификат));

		Для каждого ТекущаяСтрока Из СтрокиСертификатов Цикл

			Если ТипЗнч(ТекущаяСтрока.Номенклатура) = Тип("СправочникСсылка.СерийныеНомера") Тогда

				ТекущаяСтрока.КлючСвязиСерийныхНомеров = 0;	//	ключи обновим
				ПолучитьКлючСвязиСерийныхНомеровСервер(ТекущаяСтрока);

				СтрокаСерийныхНомеров = Объект.СерийныеНомера.Добавить();

				СтрокаСерийныхНомеров.СерийныйНомер			   = ТекущаяСтрока.Номенклатура;
				СтрокаСерийныхНомеров.КлючСвязиСерийныхНомеров = ТекущаяСтрока.КлючСвязиСерийныхНомеров;
				СтрокаСерийныхНомеров.ТипНоменклатуры		   = ТекущаяСтрока.ТипНоменклатуры;
				СтрокаСерийныхНомеров.Владелец				   = ТекущаяСтрока.Владелец;

				ТекущаяСтрока.Номенклатура = ТекущаяСтрока.Владелец;

			КонецЕсли;

		КонецЦикла;

	ИначеЕсли Направление = "Восстановление" Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СерийныеНомера.СерийныйНомер КАК Справочник.СерийныеНомера) КАК СерийныйНомер,
		|	СерийныеНомера.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
		|	СерийныеНомера.ТипНоменклатуры КАК ТипНоменклатуры,
		|	СерийныеНомера.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ Источник
		|ИЗ
		|	&СерийныеНомера КАК СерийныеНомера
		|ГДЕ
		|	СерийныеНомера.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Владелец,
		|	Источник.СерийныйНомер КАК СерийныйНомер,
		|	Источник.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
		|	Источник.ТипНоменклатуры КАК ТипНоменклатуры,
		|	Источник.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Источник КАК Источник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерийныеНомера КАК СерийныеНомера
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|			ПО СерийныеНомера.Владелец = Номенклатура.Ссылка
		|		ПО Источник.СерийныйНомер = СерийныеНомера.Ссылка
		|ГДЕ
		|	Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|	И Номенклатура.ИспользоватьСерийныеНомера
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Источник"
		);
		Запрос.УстановитьПараметр("СерийныеНомера", Объект.СерийныеНомера.Выгрузить());

		ВыборкаСертификаты = Запрос.Выполнить().Выбрать();

		Пока ВыборкаСертификаты.Следующий() Цикл

			СтрокиВладельца = Объект.Товары.НайтиСтроки(Новый Структура("КлючСвязиСерийныхНомеров", ВыборкаСертификаты.КлючСвязиСерийныхНомеров));

			Для каждого СтрокаВладельца Из СтрокиВладельца Цикл

				СтрокаВладельца.Номенклатура = ВыборкаСертификаты.СерийныйНомер;
				СтрокаВладельца.Владелец     = ВыборкаСертификаты.Владелец;

			КонецЦикла;

		КонецЦикла;

		ОчиститьСерийныеНомера(Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);

	КонецЕсли;

КонецПроцедуры

&НаСервере	//	LNK 18.02.2020 11:43:24
Процедура ОчиститьСерийныеНомера(ТипНоменклатуры)

	СтрокиТипа = Объект.СерийныеНомера.НайтиСтроки(Новый Структура("ТипНоменклатуры", ТипНоменклатуры));

	Для каждого ТекущаяСтрока Из СтрокиТипа Цикл

		Объект.СерийныеНомера.Удалить(ТекущаяСтрока);

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста	//	LNK 21.02.2020 14:09:33
Функция ПроверитьПодарочныеСертификатыНаСервере(ДокументСсылка)

	Возврат Документы.ЧекККМ.ПроверитьПодарочныеСертификаты(ДокументСсылка);

КонецФункции

//	LNK 02.02.2017 11:43:26
//	Перевел на работу с результатми запроса, а не по ссылке (и к номенклатуре в т.ч.).
&НаСервере
Функция ВходныеПараметрыПолучитьНаСервере(ДокументСсылка, ПараметрыКассыККМ)
	
	ДополнительныеПараметры = Новый Структура(
		"ВладелецКарты, КодКарты, СуммаПокупок, БонусныйСчет, ПараметрыКассыККМ"
		, РМК2_ИдентификацияКлиента
		, РМК2_Штрихкод
		, РМК2_СуммаПокупок
		, Новый Структура(
			"СуммаБонусныхБаллов, СуммаБонусныхБалловВРезерве"
			, ДанныеКарты.СуммаБонусныхБаллов
			, ДанныеКарты.СуммаБонусныхБалловВРезерве
		)
		, ПараметрыКассыККМ
	);

	Возврат Документы.ЧекККМ.ВходныеПараметрыПолучить(ДокументСсылка, ДополнительныеПараметры);
	
//	LNK 30.03.2023 07:25:19
//	"ПараметрыКассыККМ" - ВходныеПараметры[2][21]

КонецФункции

&НаСервере
Функция ВходныеПараметрыДляАнулированияЧекаККМ()
	
	// Подготовка таблицы общих параметров
	ТипЧека = ?(Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат,1,0);
	ОбщиеПараметры = Новый Массив();
	ОбщиеПараметры.Добавить(ТипЧека);                //  1 - Тип чека
	ОбщиеПараметры.Добавить(Истина);                 //  2 - Признак фискального чека
	
	Возврат ОбщиеПараметры;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста	//	LNK 19.02.2023 08:58:10
Функция НазначенаСовместнаяПечать(ПараметрыКассыККМ)	Экспорт

	СоместнаяПечать = ПараметрыКассыККМ.ПечатьЧековНаПринтер = Истина
	И НЕ ПараметрыКассыККМ.ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикDeviceManagerФискальныйРегистратор");

	Возврат СоместнаяПечать;

КонецФункции

// Процедура печати чека на фискальном регистраторе.
//
&НаКлиенте
Функция ПробитьЧекККМ(ЧекККМСсылка, КассаККМ, ПараметрыЗаполнения, ПараметрыКассыККМ = Неопределено)
	
	Если ПараметрыКассыККМ = Неопределено Тогда	//	LNK 19.02.2023 06:11:23

		ПараметрыКассыККМ = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);

	КонецЕсли;

	ЧекПробит = Ложь;
	ПараметрыЗаполнения.Вставить("СтатусЧекаККМ", ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка"));
	
	ОписаниеОшибки = "";
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ НазначенаСовместнаяПечать(ПараметрыКассыККМ) Тогда // если сразу печатать на принтер чеков

		ПараметрыЗаполнения.Вставить("СтатусЧекаККМ", ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый"));
		ПараметрыЗаполнения.Вставить("Дата"			, ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера());
		ПараметрыЗаполнения.Вставить("НомерЧекаККМ"	, 1);
		ЧекПробит = Истина;

		Возврат ЧекПробит;

	КонецЕсли;

	ДанныеПроверки = ПроверитьПодарочныеСертификатыНаСервере(ЧекККМСсылка);

	Если ДанныеПроверки.Ошибка Тогда

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Чек не может быть пробит!", ДанныеПроверки.Содержание);

		Возврат ЧекПробит;

	КонецЕсли;

	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО

		ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;

		Если ЗначениеЗаполнено(ИдентификаторУстройстваФР) Тогда

		//	Подключаем ФР
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(
				  ЭтотОбъект
				, ИдентификаторУстройстваФР
				, ОписаниеОшибки
			);

			Если Результат Тогда

			//	Готовим данные
				ВходныеПараметры  = ВходныеПараметрыПолучитьНаСервере(ЧекККМСсылка, ПараметрыКассыККМ);
				ВыходныеПараметры = Неопределено;
			//	LNK 30.03.2023 07:25:19
			//	"ПараметрыКассыККМ" - ВходныеПараметры[2][21]

				НомерСекции = 1;

			//	Печатаем чек.
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР,
				                                                        "PrintReceipt",
				                                                        ВходныеПараметры,
				                                                        ВыходныеПараметры);
				Если Результат Тогда
					
				//	Установить полученное значение номера чека реквизиту документа.
					ПараметрыЗаполнения.Вставить("СтатусЧекаККМ", ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый"));
					ПараметрыЗаполнения.Вставить("Дата"         , ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера()); //+HVOYA Mykhailo ТекущаяДата()
					ПараметрыЗаполнения.Вставить("НомерСменыККМ", ВыходныеПараметры[0]);
					ПараметрыЗаполнения.Вставить("НомерЧекаККМ" , ВыходныеПараметры[1]);
					
					Если НЕ ЗначениеЗаполнено(ПараметрыЗаполнения.НомерЧекаККМ) Тогда

						ПараметрыЗаполнения.НомерЧекаККМ = 1;

					КонецЕсли;

					ЧекПробит = Истина;

				Иначе

					ТекстОшибки = СтрЗаменить(
						"Чек не надруковано на фіскальному реєстраторі.
	                    |Додатковий опис:
	                    |%ДополнительноеОписание%"
						, "%ДополнительноеОписание%"
						, ВыходныеПараметры[1]
					);
					ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
						"Під час друку чека сталася помилка."
						, ТекстОшибки
					);
				//	LNK 10.04.2023 07:00:55
					ЗафиксироватьОшибку(ТекстОшибки, "ПробитьЧекККМ", ЧекККМСсылка, Истина, Истина);

				КонецЕсли;

			//	Отключаем ФР
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(ЭтотОбъект, ИдентификаторУстройстваФР);

			Иначе

				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
					"При підключенні пристрою сталася помилка."
					, СтрЗаменить(
						"Чек не надруковано на фіскальному реєстраторі.
		                |Додатковий опис:
		                |%ДополнительноеОписание%"
						, "%ДополнительноеОписание%"
						, ОписаниеОшибки
					)
				);

			КонецЕсли;

		Иначе

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Не вибраний фіскальний реєстратор для каси «" + СокрЛП(КассаККМ) + "».");

		КонецЕсли;

	Иначе

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Попередньо потрібно вибрати робоче місце зовнішнього обладнання поточного сеансу.");

	КонецЕсли;
	
	Возврат ЧекПробит;
	
КонецФункции

// Процедура анулирования чека на фискальном регистраторе.
//
&НаКлиенте
Функция АнулироватьЧекККМ(КассаККМ, ПараметрыЗаполнения)
	
	ЧекАнулирован = Ложь;
	
	ОписаниеОшибки = "";
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		ПараметрыЗаполнения.Вставить("НомерЧекаККМ", 1);
		ЧекАнулирован = Истина;
		Возврат ЧекАнулирован;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
	
		ПараметрыКассыККМ = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
		ИдентификаторУстройстваФР              = ПараметрыКассыККМ.ИдентификаторУстройства;
		
		Если ИдентификаторУстройстваФР <> Неопределено Тогда
			
			// Подключаем ФР
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(ЭтотОбъект,
			                                                                              ИдентификаторУстройстваФР,
			                                                                              ОписаниеОшибки);
			
			Если Результат Тогда   

			//	Готовим данные
				ВходныеПараметры  = ВходныеПараметрыДляАнулированияЧекаККМ();
				ВыходныеПараметры = Неопределено;

				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
					ИдентификаторУстройстваФР,
					"OpenCheck",
					ВходныеПараметры,
					ВыходныеПараметры
				);
				Если Результат Тогда

					НомерСменыККМ = ВыходныеПараметры[0];
					НомерЧекаККМ  = ВыходныеПараметры[1]; 
					ВыходныеПараметры = Неопределено;

					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
						ИдентификаторУстройстваФР,
						"CancelCheck",
						ВходныеПараметры,
						ВыходныеПараметры);

				КонецЕсли;

				Если Результат Тогда

				//	Установить полученное значение номера чека реквизиту документа.
					ПараметрыЗаполнения.Вставить("НомерСменыККМ", НомерСменыККМ);
					ПараметрыЗаполнения.Вставить("НомерЧекаККМ",  НомерЧекаККМ);

					Если НЕ ЗначениеЗаполнено(ПараметрыЗаполнения.НомерЧекаККМ) Тогда

						ПараметрыЗаполнения.НомерЧекаККМ = 1;

					КонецЕсли;

					ЧекАнулирован = Истина;

				Иначе

					ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
						  "Під час анулювання чеку сталася помилка."
						, СтрЗаменить(
							"Чек не анульовано на фіскальному реєстраторі.
							|Додатковий опис:
							|%ДополнительноеОписание%"
							, "%ДополнительноеОписание%"
							, ВыходныеПараметры[1]
						)
					);

				КонецЕсли;
				
			//	Отключаем ФР
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(ЭтотОбъект, ИдентификаторУстройстваФР);
				
			Иначе

				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
					"При підключенні пристрою сталася помилка."
					, СтрЗаменить(
						"Чек не анульовано на фіскальному реєстраторі.
		                |Додатковий опис:
		                |%ДополнительноеОписание%"
						, "%ДополнительноеОписание%"
						, ОписаниеОшибки
					)
				);

			КонецЕсли;
			
		Иначе

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Не обрано фіскального реєстратора.");

		КонецЕсли;

	Иначе

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Попередньо потрібно вибрати робоче місце зовнішнього обладнання поточного сеансу.");

	КонецЕсли;
	
	Возврат ЧекАнулирован;
	
КонецФункции

// Создаем чеки из набора
//
// Параметры;
//  Отказ - Булево;
//
&НаКлиенте
Процедура СоздатьЧеки(Отказ, Печать = Ложь)

	Перем Ответ;

	ПараметрыКассыККМ = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(Объект.КассаККМ);

	Если ТестовыйРежимРМК Тогда

		Если ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя) Тогда

			ВыйтиИзРежимаИЗ();

		КонецЕсли;

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
			"Тестовий режим РМК"
			, "ВІДМОВЛЕНО!" + Символы.ПС + "Чек, сформований як тестування, НЕ може бути пробитий."
		);

		Возврат;

	КонецЕсли;

	Ответ = "";

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда

		ПроверитьЧтоНетОплатыПодарочнымСертификатом(
			"Оплата",
			Отказ, 
			Ответ,
			Истина
		);
		Если Отказ Тогда

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Помилка повернення товару", Ответ);
			Возврат;

		КонецЕсли;

	Иначе

		ПроверитьДвиженияСерийныхНомеровДляПогашения(
			Отказ,
			Ответ,
			ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера() //+HVOYA Mykhailo ТекущаяДата()
		);
		Если Отказ Тогда

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Помилки погашення подарункових сертифікатів", Ответ);
			Возврат;

		КонецЕсли;
		
	КонецЕсли;

	ПечатьПакетаДокументовВозврат = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")
									И ИспользоватьНастройкуРМК 
									И НаборПравИНастроек.ПриВозвратеРаспечатыватьПакетДокументов
	);

	МассивСсылокЧеков = Новый Массив;
	
	Если ТабличноеПолеЧеков.Количество() > 1 Тогда
		
		ПерваяОрганизация = Истина;
		
		Для каждого СтрокаТабличногоПоляЧеков Из ТабличноеПолеЧеков Цикл
			
		//	LNK 30.09.2019 10:38:31	- ПЕРЕД пробитием.
			ЧекККМСсылка = ЗаписатьЧекККМПоОрганизации(СтрокаТабличногоПоляЧеков.Организация, ПерваяОрганизация);
			ПерваяОрганизация = Ложь;
			Оповестить("ИзмененыДанныеКассовойСмены");	//	LNK 14.09.2020 10:25:16
			
			ПараметрыЗаполненияЧекаККМ = Новый Структура;
			
			Отказ = НЕ ПробитьЧекККМ(ЧекККМСсылка, СтрокаТабличногоПоляЧеков.КассаККМ, ПараметрыЗаполненияЧекаККМ, ПараметрыКассыККМ);

			Если Отказ Тогда

				Прервать;

			Иначе

				КачествоОбслуживанияПродаж.РегистрацияКонтроляКачестваОбслуживания(ЧекККМСсылка);	//	LNK 04.06.2018 13:50:35

				ЧекККМВОбработке = ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка");

			КонецЕсли;
			
			ВывестиДополнительноеСообщение = Ложь;
			ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
			
			ПровестиЧекККМ(ЧекККМСсылка, ПараметрыЗаполненияЧекаККМ, МассивСсылокЧеков, ВывестиДополнительноеСообщение, ПараметрыИнформации);
			
			Если ВывестиДополнительноеСообщение Тогда
				ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
			КонецЕсли;
			
		КонецЦикла;

	Иначе

		СтатусЧекаККМ       = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка");
		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();

	//	LNK 30.09.2019 10:38:31	- ПЕРЕД пробитием.
		ЧекККМСсылка = ЗаписатьЧекККМПоВсемДанным(Объект.Организация, ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка"));
		Оповестить("ИзмененыДанныеКассовойСмены");	//	LNK 14.09.2020 10:25:16
		
		ПараметрыЗаполненияЧекаККМ = Новый Структура;
		
		Отказ = НЕ ПробитьЧекККМ(ЧекККМСсылка, ТабличноеПолеЧеков[0].КассаККМ, ПараметрыЗаполненияЧекаККМ, ПараметрыКассыККМ);

		Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЧекККМСсылка, "ВидОперации") = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") тогда

			ЧекККМПродажа		= ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЧекККМСсылка, "ЧекККМПродажа");
			КодСерийногоНомера	= ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЧекККМПродажа,"Номер") + Год(ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЧекККМПродажа,"Дата"));
			ЗаписатьСкидочныйКупонВРегистрПоКоду(ЧекККМСсылка,КодСерийногоНомера)	

		Иначе

			Попытка

				ПроверитьАкцииНаПечатьУникальныхКупонов(ЧекККМСсылка, Объект.КассаККМ);

			Исключение

				ЗафиксироватьОшибку(ОписаниеОшибки(), "ПечатьКупонаНаФР");	//	LNK 04.09.2018 14:16:54

			КонецПопытки;

		КонецЕсли;

		Если НЕ Объект.ПогашениеСкидочныхКупонов.Количество() = 0 тогда

			РозничныеПродажиСервер.ВыполнитьПогашениеКупонов(ЧекККМСсылка, ПолучитьМассивИзКолонки("ПогашениеСкидочныхКупонов", "СерийныйНомер"));	//	LNK 21.09.2018 08:46:54

		КонецЕсли;

		Если Отказ Тогда

			Возврат;

		Иначе

			КачествоОбслуживанияПродаж.РегистрацияКонтроляКачестваОбслуживания(ЧекККМСсылка);	//	LNK 04.06.2018 13:50:35
			ЧекККМВОбработке = ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка");

		КонецЕсли;

		ВывестиДополнительноеСообщение = Ложь;
		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
		
		ПровестиЧекККМ(ЧекККМСсылка, ПараметрыЗаполненияЧекаККМ, МассивСсылокЧеков, ВывестиДополнительноеСообщение, ПараметрыИнформации);
		
		Если ВывестиДополнительноеСообщение Тогда

			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

		КонецЕсли;

	КонецЕсли;

	Если НЕ Отказ Тогда

		Если Печать Тогда

			Попытка

				НапечататьЧекиККМ(МассивСсылокЧеков)

			Исключение

				ТекстОшибки = ОписаниеОшибки();
				ЗафиксироватьОшибку(ТекстОшибки, "СоздатьЧеки");	//	LNK 04.09.2018 14:16:54
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
					"Не вдалося надрукувати документ"
					, ТекстОшибки
				);

			КонецПопытки;

		КонецЕсли;

	КонецЕсли;

	Если НазначенаСовместнаяПечать(ПараметрыКассыККМ) Тогда	//+HVOYA Mykhailo : печать чеков на принтер

		Если НЕ Отказ Тогда

			ТАБДОК = ПечатьТоварногоЧекаДляПД(МассивСсылокЧеков);
			ТАБДОК.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);

		КонецЕсли; 

	КонецЕсли;	//-HVOYA Mykhailo

	Если НЕ Отказ Тогда
	
		ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		
		ВыполнитьОбменДаннымиПоРабочемуМесту();
		
	КонецЕсли;

	//+HVOYA Mykhailo
	Попытка
		Если МассивСсылокЧеков.Количество() > 0 Тогда
			ПоследнийЧек = МассивСсылокЧеков[МассивСсылокЧеков.Количество()-1];
			ЗаполнитьДанныеЧекаНаСервере(РМК1_НомерЧека, РМК1_ВремяЧека, ПоследнийЧек);
		КонецЕсли;
	Исключение
		ЗафиксироватьОшибку(ОписаниеОшибки(), "СоздатьЧеки");	//	LNK 04.09.2018 14:16:54
	КонецПопытки;

	ВыйтиИзРежимаИЗ();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПечатныхФорм()
	
	СтрокаТаблицы = ТаблицаПечатныхФорм.Добавить();
	СтрокаТаблицы.ИменаМакетов = "ТоварныйЧек";
	СтрокаТаблицы.Представление = "Товарный чек";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		СтрокаТаблицы = ТаблицаПечатныхФорм.Добавить();
		СтрокаТаблицы.ИменаМакетов = "ГарантийныйТалон";
		СтрокаТаблицы.Представление = "Гарантийный талон";
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаПечатныхФорм.Добавить();
	СтрокаТаблицы.ИменаМакетов = "ТоварныйЧекДляПД";
	СтрокаТаблицы.Представление = "Товарного чека для принтера документов";
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		СтрокаТаблицы = ТаблицаПечатныхФорм.Добавить();
		СтрокаТаблицы.ИменаМакетов = "ПечатьТоварныйЧекаДляФР";
		СтрокаТаблицы.Представление = "Товарный чек для фискального регистратора";
	КонецЕсли;

	Запрос = ДополнительныеОтчетыИОбработки.НовыйЗапросПоДоступнымКомандам(
							Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма,
							"Документ.ЧекККМ",
							Истина);
	
	ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить().Скопировать(), ДоступныеКомандыВнешнихФорм, Истина);
	
	Для каждого СтрокаДоступнойКоманды Из ДоступныеКомандыВнешнихФорм Цикл
	
		СтрокаТаблицы = ТаблицаПечатныхФорм.Добавить();
		СтрокаТаблицы.Представление = СтрокаДоступнойКоманды.Представление;
		СтрокаТаблицы.Внешняя = Истина;
		СтрокаТаблицы.ИндексВнешнейТаблицы = ДоступныеКомандыВнешнихФорм.Индекс(СтрокаДоступнойКоманды);
		
	КонецЦикла;
	
	ТаблицаПечатныхФормыЗаполнена = Истина;
	
	АдресТаблицыПечатныхФорм = ПоместитьВоВременноеХранилище(ТаблицаПечатныхФорм.Выгрузить(), УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекиККМ(МассивСсылокЧеков)	Экспорт

	Если НЕ ТаблицаПечатныхФормыЗаполнена Тогда

		ЗаполнитьТаблицуПечатныхФорм()

	КонецЕсли;

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресТаблицыПечатныхФорм", АдресТаблицыПечатныхФорм);

	ДополнительныеПараметры = Новый Структура(
		"МассивСсылокЧеков", МассивСсылокЧеков);
	ОписаниеОповещения = Новый ОписаниеОповещения("НапечататьЧекиККМЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВыбораПечатныхФорм", Объект.ИмяВнешнейОбработки)
		, ПараметрыОткрытия
		, ЭтотОбъект, УникальныйИдентификатор
		,,
		, ОписаниеОповещения
		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте	//	LNK 31.01.2019 10:08:36
Процедура НапечататьЧекиККМЗавершение(Результат, ДополнительныеПараметры)	Экспорт
	
	ПараметрыКассыККМ = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(Объект.КассаККМ);

	Если НЕ Результат = Неопределено Тогда

		СтрокаОбщейТаблицы = ТаблицаПечатныхФорм.НайтиПоИдентификатору(Результат.ИндексТаблицы);

		Если СтрокаОбщейТаблицы.ИменаМакетов = "ПечатьТоварныйЧекаДляФР" Тогда

			НапечататьТоварныйЧекНаФР(ДополнительныеПараметры.МассивСсылокЧеков);

		ИначеЕсли Результат.Внешняя Тогда

			СтрокаВнешнихФорм = ДоступныеКомандыВнешнихФорм.НайтиПоИдентификатору(Результат.ИндексВнешнейТаблицы);

			ПараметрыОткрытия = Новый Структура("ИсточникДанных, ПараметрыИсточника");
			ПараметрыОткрытия.ИсточникДанных     = СтрокаВнешнихФорм.Ссылка;
			ПараметрыОткрытия.ПараметрыИсточника = Новый Структура("ИдентификаторКоманды, ОбъектыНазначения");
			ПараметрыОткрытия.ПараметрыИсточника.ИдентификаторКоманды = СтрокаВнешнихФорм.Идентификатор;
			ПараметрыОткрытия.ПараметрыИсточника.ОбъектыНазначения    = ДополнительныеПараметры.МассивСсылокЧеков;

			ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия);

		Иначе

			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ЧекККМ",
					СтрокаОбщейТаблицы.ИменаМакетов,
					ДополнительныеПараметры.МассивСсылокЧеков,
					УникальныйИдентификатор,
					Неопределено
			);

		КонецЕсли;

		Если НЕ  (СтрокаОбщейТаблицы.ИменаМакетов = "ПечатьТоварныйЧекаДляФР"
				И ПараметрыКассыККМ.ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СФискальныйРегистраторЭмулятор")
		)	Тогда

			ПредставлениеСпискаЧеков = "";

			Для каждого СсылкаНаЧек Из ДополнительныеПараметры.МассивСсылокЧеков Цикл

				ПредставлениеСпискаЧеков = ПредставлениеСпискаЧеков
					+ ?(ПустаяСтрока(ПредставлениеСпискаЧеков), "", Символы.ПС)
					+ СокрЛП(СсылкаНаЧек);

			КонецЦикла;

			ПоказатьОповещениеПользователя("Друковані форми виведено",
				, ПредставлениеСпискаЧеков
				, БиблиотекаКартинок.Информация32
			);
		
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НапечататьОтчетБезГашения(КассаККМ)

	Результат = Ложь;
	
	ПараметрыКассыККМ       = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	ПараметрыИнформации.ЗаголовокИнформации = "Помилка друку звіту без гасіння";
	
	Если ЗначениеЗаполнено(ИдентификаторУстройства)  Тогда
		ОписаниеОшибки = "";

		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			// Подключение устройства

			Если ИдентификаторУстройства <> Неопределено Тогда
				Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(ЭтотОбъект,
				                                                                              ИдентификаторУстройства, ОписаниеОшибки
				);

				Если Результат Тогда

					ВходныеПараметры  = Неопределено;
					ВыходныеПараметры = Неопределено;

					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
					                                                        "PrintXReport",
					                                                        ВходныеПараметры,
					                                                        ВыходныеПараметры
					);

					Если НЕ Результат Тогда

						ПараметрыИнформации.ТекстИнформации = СтрЗаменить(
							"При знятті звіту на фіскальному реєстраторі сталася помилка.
							|%ОписаниеОшибки%
							|Звіт на фіскальному реєстраторі не сформовано."
							, "%ОписаниеОшибки%"
							, ВыходныеПараметры[1]
						);
						ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

					КонецЕсли;

					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(ЭтотОбъект,
					                                                                 ИдентификаторУстройства
					);

				Иначе

					ПараметрыИнформации.ТекстИнформации = "Під час підключення пристрою сталася помилка." + Символы.ПС + ОписаниеОшибки;
					ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

				КонецЕсли;

			КонецЕсли;

		Иначе

			ПараметрыИнформации.ТекстИнформации = "Попередньо необхідно вибрати робоче місце поточного сеансу з обладнанням, що підключається.";
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтруктураПараметровПечати(ЧекККМСсылка)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЧекККМСсылка.КассаККМ, "Ссылка, ПодключаемоеОборудование, ШиринаЛенты")
	
КонецФункции

&НаСервере
Функция СтрокаПечатиНаФР(МассивОбъектов, ШиринаЛенты)
	
	Возврат Документы.ЧекККМ.ТекстПечатиЧекаНаФР(МассивОбъектов, ШиринаЛенты);
	
КонецФункции

&НаКлиенте
Процедура НапечататьТоварныйЧекНаФР(МассивСсылокЧеков)
	
	Для каждого ЧекККМСсылка Из МассивСсылокЧеков Цикл
	
		СтруктураПараметровПечати = СтруктураПараметровПечати(ЧекККМСсылка);
		
		Если НЕ ЗначениеЗаполнено(СтруктураПараметровПечати.ПодключаемоеОборудование) 
		 ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметровПечати.ШиринаЛенты)  Тогда
		 
			ЗаголовокИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Перевірте налаштування каси ККМ «%1»",
				СтруктураПараметровПечати.Ссылка,
			);
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
				ЗаголовокИнформации
				, "Не задана ширина стрічки або обладнання, що підключається"
			);

			Продолжить;

		КонецЕсли;

		МассивПечати = Новый Массив;
		МассивПечати.Добавить(ЧекККМСсылка);

		СтрокаПечати = СтрокаПечатиНаФР(МассивПечати, СтруктураПараметровПечати.ШиринаЛенты);

		Если ПустаяСтрока(СтрокаПечати) Тогда

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Інформація для виведення на друк відсутня.");
			Продолжить;

		КонецЕсли;
		
		ИдентификаторУстройстваФР = СтруктураПараметровПечати.ПодключаемоеОборудование;
		
		Если НЕ ИдентификаторУстройстваФР = Неопределено Тогда
			
		//	Подключаем ФР
			ОписаниеОшибки = "";
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(
				  УникальныйИдентификатор
				, ИдентификаторУстройстваФР
				, ОписаниеОшибки
			);

			Если Результат Тогда

			//	Готовим данные
				ВходныеПараметры  = Новый Массив();
				ВходныеПараметры.Добавить(СтрокаПечати);
				ВыходныеПараметры = Неопределено;

				РезультатФР = МенеджерОборудованияКлиент.ВыполнитьКоманду(
					  ИдентификаторУстройстваФР
					, "PrintText"
					, ВходныеПараметры
					, ВыходныеПараметры
				);

				Если НЕ РезультатФР Тогда

					ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
						"Під час друку товарного чека сталася помилка."
						, СтрЗаменить(
							"Товарного чеку не надруковано на фіскальному реєстраторі.
				            |Додатковий опис:
				            |%ДополнительноеОписание%"
							, "%ДополнительноеОписание%"
							, ВыходныеПараметры[1]
						)
					);

				КонецЕсли;

			//	Отключаем ФР
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройстваФР);

			Иначе

				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
					"При підключенні пристрою сталася помилка."
					, СтрЗаменить(
						"Чек не надруковано на фіскальному реєстраторі.
		                |Додатковий опис:
		                |%ДополнительноеОписание%"
						, "%ДополнительноеОписание%"
						, ОписаниеОшибки
					)
				);

			КонецЕсли;

		Иначе

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Не обрано фіскального реєстратора.");

		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// Ручные скидки

// Проверяет возможность работы с ручными скидками в строке
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Булево
//
&НаКлиенте
Функция ВозможностьРаботыСРучнымиСкидкамиВСтроке()
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
    
    // +HVOYA. 09.12.2016 14:40:29, Львова Е.А.
    // добавлена новая константа, которая регулирует возможность назначать ручные скидки сертификатам
    // +HVOYA. 24.01.2017 13:43:49, Львова Е.А.
    // по просьбе Леонида Кривцова константу заменяем на РС "Учетная политика"
    //Если НЕ МенеджерОборудованияСервер.ПолучитьКонстанту("НазначатьРучнуюСкидкуПодарочномуСертификату") Тогда
    Если НЕ РазрешенаРучнаяСкидкаНаСертификат() Тогда
    // -HVOYA. 24.01.2017 13:43:51, Львова Е.А.
    	   Возврат НЕ СтрокаТабличнойЧасти.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат");
    Иначе Возврат Истина
    КонецЕсли; 
	// -HVOYA. 09.12.2016 14:50:36, Львова Е.А.
	
КонецФункции // ВозможностьРаботыСРучнымиСкидкамиВСтроке()

// Проверяет возможность работы с ручными скидками в строке
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Булево
//
&НаКлиенте
Функция ВозможностьРаботыСРучнымиСкидкамиВЧеке()
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
	
	СтрокиПодарочныхСертификатов = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиПодарочныхСертификатов.Количество() = Объект.Товары.Количество() Тогда
		Возврат Ложь; // только подарочные сертификаты
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ВозможностьРаботыСРучнымиСкидкамиВСтроке()

&НаСервере
Процедура НазначитьРучнуюСкидку(СуммаСкидкиНаценки)
	
	Если СуммаСкидкиНаценки <> 0 Тогда
		// +HVOYA. 08.02.2017 15:10:32, Львова Е.А.
        //СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, Истина);
        СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, Ложь);
        // -HVOYA. 08.02.2017 15:10:40, Львова Е.А.
	Иначе
		// +HVOYA. 08.02.2017 15:10:50, Львова Е.А.
        //СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина);
        СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Ложь);
        // -HVOYA. 08.02.2017 15:10:55, Львова Е.А.
	КонецЕсли;
	
	//+HVOYA Mykhailo
	ОтобразитьСкидки();
	//-HVOYA Mykhailo

	
КонецПроцедуры // НазначитьРучнуюСкидкуНаСервере()

// Очищает ручные скидки в табличной части Товары.
//
&НаСервере
Процедура ОтменитьРучныеСкидки()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
КонецПроцедуры // ОтменитьРучныеСкидки()

&НаСервере	//	LNK 28.12.2021 05:45:40
Процедура ОтменитьПродажуПодарков()

	СтрокДляУдаления = Новый Массив;

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл

		Если СтрокаТабличнойЧасти.ПродажаПодарка Тогда

			СтрокДляУдаления.Добавить(СтрокаТабличнойЧасти);

		КонецЕсли;

	КонецЦикла;

	Для каждого СтрокаТабличнойЧасти Из СтрокДляУдаления Цикл

		Объект.Товары.Удалить(СтрокаТабличнойЧасти);

	КонецЦикла;

КонецПроцедуры

&НаСервере	//	LNK 10.07.2018 15:05:55
Процедура ОтменитьВсеСкидкиДокумента(Принудительно = Ложь, ОтменаОплаты = Ложь)

	ОтменитьОкруглениеДокумента();
	УсловияВыполненные.Очистить();

	Если Принудительно ИЛИ НЕ (Объект.УслугаБанка.Пустая() ИЛИ УслугаБанкаДанные.ИспользоватьСкидкиНаценки = Истина) Тогда

		Объект.Подарки.Очистить();

		Если НЕ ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя)	//	нет вообще основания
		ИЛИ (НЕ ОтменаОплаты = Истина И ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя, "ЗаказПокупателя"))	//	при отмене оплаты НЕ очищать
		ИЛИ  Принудительно
		Тогда

			СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина);
		//	Здесь так же очищаются и начисленные бонусные баллы
			СкидкиНаценкиСервер.ОтменитьАвтоматическиеСкидки(Объект, "Товары", Истина, НаборПравИНастроек.ПродажиАктивированы);

		КонецЕсли;

		Если НЕ ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя)
			ИЛИ ОплатаБалламиНазначенаЗаказомПокупателя = Ложь
			ИЛИ Принудительно
		Тогда

			СкидкиНаценкиСервер.ОтменитьОплатуБонуснымиБалламиУправляемую(Объект, "Товары");

		КонецЕсли;

		ОтменитьПродажуПодарков();
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		ОтобразитьСкидки();	//	LNK 28.12.2021 05:44:47

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтменитьОкруглениеДокумента()

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл

		Если НЕ СтрокаТабличнойЧасти.СуммаОкругления = 0 Тогда

			СтрокаТабличнойЧасти.Сумма      = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаОкругления;
			СтрокаТабличнойЧасти.СуммаВсего = СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.СуммаОкругления = 0;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Запрашивает ввод ручной скидки (наценки) процентом в строке
//
// Параметры
//  ЭтоНаценка - Булево, Если Истина то обрабатывается наценка
//
&НаКлиенте
Процедура ИзменитьПроцентРучнойСкидкиНаценкиВСтроке(ЭтоНаценка = Ложь)

	Если ВозможностьРаботыСРучнымиСкидкамиВСтроке() Тогда
		
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		
		Знак = ?(ЭтоНаценка, -1, 1);
		ЧислоВвода = Знак * СтрокаТабличнойЧасти.ПроцентРучнойСкидки;
		ЧислоВвода = ?(ЧислоВвода > 0, ЧислоВвода, 0);
		
		// +HVOYA. 21.09.2016 14:04:12, Львова Е.А.
        Если НЕ СтрокаТабличнойЧасти.ПричинаРучнойСкидки = ПредопределенноеЗначение("Справочник.ПричиныРучнойСкидки.ПодарочныйСертификат") Тогда
			МаксимальныйПроцентРучнойСкидки = hiПолучитьМаксимальныйПроцентРучнойСкидки();
        КонецЕсли; 
		// -HVOYA. 21.09.2016 14:04:14, Львова Е.А.
		
		Если ПолучитьИнтерактивноЧисло(?(ЭтоНаценка, "Ручна націнка відсотком у рядку", "Ручна знижка відсотком у рядку"), 
										ЧислоВвода,
										// +HVOYA. 21.09.2016 14:26:08, Львова Е.А.
										//100,
										МаксимальныйПроцентРучнойСкидки,
										// -HVOYA. 21.09.2016 14:26:15, Львова Е.А.
										ЭтоНаценка,
										Ложь) Тогда
			
			СтрокаТабличнойЧасти.ПроцентРучнойСкидки = Знак * ЧислоВвода;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано"  , Новый Структура("Очищать", Ложь));
			
			ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
			
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
			
			//+HVOYA Mykhailo
			Попытка
				ОтобразитьСкидки();
			Исключение
				ЗафиксироватьОшибку(ОписаниеОшибки(), "ИзменитьПроцентРучнойСкидкиНаценкиВСтроке");	//	LNK 04.09.2018 14:16:54
			КонецПопытки;
			//-HVOYA Mykhailo

			
			ОбновитьФорму();

			ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Запрашивает ввод ручной скидки (наценки) процентом в строке
//
// Параметры
//  ЭтоНаценка - Булево, Если Истина то обрабатывается наценка
//
&НаКлиенте
Процедура ИзменитьСуммуРучнойСкидкиНаценкиВСтроке(ЭтоНаценка = Ложь)

	Если ВозможностьРаботыСРучнымиСкидкамиВСтроке() Тогда
		
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		
		Знак = ?(ЭтоНаценка, -1, 1);
		ЧислоВвода = Знак * СтрокаТабличнойЧасти.СуммаРучнойСкидки;
		ЧислоВвода = ?(ЧислоВвода > 0, ЧислоВвода, 0);
		МаксиммальноеЗначение = ?(ЭтоНаценка, 0, СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаРучнойСкидки);
		
		// +HVOYA. 21.09.2016 14:04:12, Львова Е.А.
        Если НЕ СтрокаТабличнойЧасти.ПричинаРучнойСкидки = ПредопределенноеЗначение("Справочник.ПричиныРучнойСкидки.ПодарочныйСертификат") Тогда
        	  МаксимальныйПроцентРучнойСкидки = hiПолучитьМаксимальныйПроцентРучнойСкидки();
              МаксиммальноеЗначение = МаксиммальноеЗначение*МаксимальныйПроцентРучнойСкидки/100;
        КонецЕсли;
		// -HVOYA. 21.09.2016 14:04:14, Львова Е.А.
		
		Если ПолучитьИнтерактивноЧисло(?(ЭтоНаценка, "Ручна націнка сумою у рядку", "Ручна знижка сумою у рядку"),
										ЧислоВвода, 
										МаксиммальноеЗначение,
										ЭтоНаценка,
										Ложь) Тогда
			
			СтрокаТабличнойЧасти.СуммаРучнойСкидки = Знак * ЧислоВвода;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано"  , Новый Структура("Очищать", Ложь));
			
			ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
			
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
			
			//+HVOYA Mykhailo
			Попытка
				ОтобразитьСкидки();
			Исключение
				ЗафиксироватьОшибку(ОписаниеОшибки(), "ИзменитьСуммуРучнойСкидкиНаценкиВСтроке");	//	LNK 04.09.2018 14:16:54
			КонецПопытки;
			//-HVOYA Mykhailo

			
			ОбновитьФорму();

			ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Запрашивает ввод ручной скидки (наценки) процентом в строке
//
// Параметры
//  ЭтоНаценка - Булево, Если Истина то обрабатывается наценка
//
&НаКлиенте
Процедура ИзменитьСуммуРучнойСкидкиНаценкиВЧеке(ЭтоНаценка = Ложь)

	Если ВозможностьРаботыСРучнымиСкидкамиВЧеке() Тогда
		
		СуммаБезАвтоматическойСкидки =ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСуммуДокументаБезПодарочныхСертификатов(Объект) + Объект.Товары.Итог("СуммаРучнойСкидки");
		СуммаРучнойСкидкиНаценки     = Объект.Товары.Итог("СуммаРучнойСкидки");
		
		Знак = ?(ЭтоНаценка, -1, 1);
		ЧислоВвода = Знак * СуммаРучнойСкидкиНаценки;
		ЧислоВвода = ?(ЧислоВвода > 0, ЧислоВвода, 0);
						
		МаксимальнаяСуммаСкидки = ?(ЭтоНаценка, 0, СуммаБезАвтоматическойСкидки);
		
		// +HVOYA. 21.09.2016 14:04:12, Львова Е.А.
        СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
        Если НЕ СтрокаТабличнойЧасти.ПричинаРучнойСкидки = ПредопределенноеЗначение("Справочник.ПричиныРучнойСкидки.ПодарочныйСертификат") Тогда
        	 МаксимальныйПроцентРучнойСкидки = hiПолучитьМаксимальныйПроцентРучнойСкидки();
             МаксимальнаяСуммаСкидки = СуммаБезАвтоматическойСкидки*МаксимальныйПроцентРучнойСкидки/100;
        КонецЕсли;
		// -HVOYA. 21.09.2016 14:04:14, Львова Е.А.

		Если ПолучитьИнтерактивноЧисло(?(ЭтоНаценка, "Ручна націнка сумою у чеку", "Ручна знижка сумою у чеку"), 
										ЧислоВвода, 
										МаксимальнаяСуммаСкидки,
										ЭтоНаценка,
										Ложь) Тогда
			
				СуммаРучнойСкидкиНаценки = ЧислоВвода * Знак;
				НазначитьРучнуюСкидку(СуммаРучнойСкидкиНаценки);
				
				ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
				
				ОбновитьФорму();

				ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");

		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Запрашивает ввод ручной скидки (наценки) процентом в строке
//
// Параметры
//  ЭтоНаценка - Булево, Если Истина то обрабатывается наценка
//
&НаКлиенте
Процедура ИзменитьПроцентРучнойСкидкиНаценкиВЧеке(ЭтоНаценка = Ложь)

	Если ВозможностьРаботыСРучнымиСкидкамиВЧеке() Тогда
		
		СуммаРучнойСкидкиНаценки     = Объект.Товары.Итог("СуммаРучнойСкидки");
		СуммаБезАвтоматическойСкидки = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСуммуДокументаБезПодарочныхСертификатов(Объект) + СуммаРучнойСкидкиНаценки;
		СуммаБезСкидок               = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСуммуДокументаБезПодарочныхСертификатов(Объект) 
									 + Объект.Товары.Итог("СуммаАвтоматическойСкидки")
									 + СуммаРучнойСкидкиНаценки;
		
		ПроцентРучнойСкидкиНаценки = 0;
		
		Если СуммаБезСкидок > 0 Тогда
			ПроцентРучнойСкидкиНаценки = СуммаРучнойСкидкиНаценки * 100 / СуммаБезСкидок;
		КонецЕсли;
		
		Знак = ?(ЭтоНаценка, -1, 1);
		ЧислоВвода = Знак * ПроцентРучнойСкидкиНаценки;
		ЧислоВвода = ?(ЧислоВвода > 0, ЧислоВвода, 0);
		
		МаксимальнаяСуммаСкидки = ?(ЭтоНаценка, 0, СуммаБезАвтоматическойСкидки);
		МаксимальныйПроцентСкидки = 0;
		
		// +HVOYA. 21.09.2016 14:04:12, Львова Е.А.
        СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
        Если НЕ СтрокаТабличнойЧасти.ПричинаРучнойСкидки = ПредопределенноеЗначение("Справочник.ПричиныРучнойСкидки.ПодарочныйСертификат") Тогда
        	 МаксимальныйПроцентРучнойСкидки = hiПолучитьМаксимальныйПроцентРучнойСкидки();
             МаксимальнаяСуммаСкидки = МаксимальнаяСуммаСкидки*МаксимальныйПроцентРучнойСкидки/100;
        КонецЕсли;       		
		// -HVOYA. 21.09.2016 14:04:14, Львова Е.А.
		
		Если СуммаБезСкидок > 0 Тогда
			МаксимальныйПроцентСкидки = МаксимальнаяСуммаСкидки * 100 / СуммаБезСкидок;
		КонецЕсли;
		
		
		Если ПолучитьИнтерактивноЧисло(?(ЭтоНаценка, "Ручна націнка відсотком у чеку", "Ручна знижка відсотком у чеку"), 
										ЧислоВвода, 
										МаксимальныйПроцентСкидки,
										ЭтоНаценка,
										Ложь) Тогда
			
				ПроцентРучнойСкидкиНаценки = ЧислоВвода * Знак;
				СуммаРучнойСкидкиНаценки   = СуммаБезСкидок * ПроцентРучнойСкидкиНаценки / 100;
				
				НазначитьРучнуюСкидку(СуммаРучнойСкидкиНаценки);
			
				ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
				
				ОбновитьФорму();

				ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
				
			КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// +HVOYA. 21.09.2016 14:30:17, Львова Е.А.
&НаСервере
Функция hiПолучитьМаксимальныйПроцентРучнойСкидки()

	// +HVOYA. 24.01.2017 13:57:34, Львова Е.А.
    //Возврат Константы.МаксимальнаяРучнаяСкидка.Получить();
    Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаСрезПоследних.МаксимальныйПроцентРучнойСкидки КАК МаксимальныйПроцентРучнойСкидки
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика.СрезПоследних КАК УчетнаяПолитикаСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Рез = Выборка.МаксимальныйПроцентРучнойСкидки;
	КонецЦикла; 
	
	Возврат Рез;
    // -HVOYA. 24.01.2017 13:57:40, Львова Е.А.

КонецФункции // ()
// -HVOYA. 21.09.2016 14:30:21, Львова Е.А.

// +HVOYA. 24.01.2017 13:47:39, Львова Е.А.
&НаСервере
Функция РазрешенаРучнаяСкидкаНаСертификат()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаСрезПоследних.РучнаяСкидкаНаПодарочныйСертификат КАК РучнаяСкидкаНаПодарочныйСертификат
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика.СрезПоследних КАК УчетнаяПолитикаСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Рез = Выборка.РучнаяСкидкаНаПодарочныйСертификат;
	КонецЦикла; 
	
	Возврат Рез;
	
КонецФункции
// -HVOYA. 24.01.2017 13:47:43, Львова Е.А.

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиСкидкаПроцентВЧеке()
	
	ИзменитьПроцентРучнойСкидкиНаценкиВЧеке();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиНаценкаПроцентВЧеке()
	
	ИзменитьПроцентРучнойСкидкиНаценкиВЧеке(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиСкидкаСуммаВЧеке()
	
	ИзменитьСуммуРучнойСкидкиНаценкиВЧеке();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиНаценкаСуммаВЧеке()
	
	ИзменитьСуммуРучнойСкидкиНаценкиВЧеке(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиСкидкаПроцентВСтроке()
	
	ИзменитьПроцентРучнойСкидкиНаценкиВСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиНаценкаПроцентВСтроке()
	
	ИзменитьПроцентРучнойСкидкиНаценкиВСтроке(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиСкидкаСуммаВСтроке()
	
	ИзменитьСуммуРучнойСкидкиНаценкиВСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиНаценкаСуммаВСтроке()
	
	ИзменитьСуммуРучнойСкидкиНаценкиВСтроке(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиОтменаСкидокВЧеке()
	
	Если ВозможностьРаботыСРучнымиСкидкамиВЧеке() Тогда
		
		ОтменитьРучныеСкидки();
		
		ОбновитьФорму();

		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиОтменаСкидокВСтроке()
	
	Если ВозможностьРаботыСРучнымиСкидкамиВСтроке() Тогда
		
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		
		СтрокаТабличнойЧасти.СуммаРучнойСкидки   = 0;
		СтрокаТабличнойЧасти.ПричинаРучнойСкидки = Неопределено;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано"  , Новый Структура("Очищать", Ложь));
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		
		ОбновитьФорму();

		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте	//	LNK 12.08.2019 12:40:27
Процедура Подключаемый_ДоступностьMicrosoftDynamics()

	НаборПравИНастроек.Вставить("РесурсWebRetailДоступен", РозничныеПродажиСлужебный.РесурсWebRetailДоступен());

	УстановитьОформлениеЭлементов();

КонецПроцедуры

&НаСервере
Функция НельзяПродавать(Номенклатура, ТекстСообщения)
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		Если ИспользоватьАссортимент Тогда
			СтруктураСостоянияАссортимента = АссортиментСервер.СтруктураСостоянияАссортиментаТовараВФормате(Номенклатура,
																											ФорматМагазина,
																											ТекущаяДатаСеанса()
			);
			Если НЕ СтруктураСостоянияАссортимента.РазрешеныПродажи
			Тогда

				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"Товар «%1» не включено до асортименту або заборонено до продажу."
					, Номенклатура
				);
				Возврат Истина;

			КонецЕсли;

		КонецЕсли;

		Если СкидкиНаценкиСерверПереопределяемый.ЗапрещенаПродажаТовара(Номенклатура,
																		Объект.Магазин,
																		ТекущаяДатаСеанса())
		Тогда

			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Товар «%1» заборонено до продажу."
				, Номенклатура
			);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	СтруктураПараметры.Вставить("ИспользоватьПрограммуЛояльности", Объект.ИспользоватьПрограммуЛояльности);
	СтруктураПараметры.Вставить("ДатаРасчета", ТекущаяДата());	//	LNK 19.05.2021 07:36:49
//	LNK 25.10.2022 06:01:00
	СтруктураПараметры.Вставить("СкидкиПоЗаказуПокупателя", НЕ Объект.ЗаказПокупателя = ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка"));
	
	СведенияДокумента = Новый Структура;
	СегментИсключаемойНоменклатуры = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Магазин, "СегментИсключаемойНоменклатуры");
	СведенияДокумента.Вставить("СегментИсключаемойНоменклатуры", СегментИсключаемойНоменклатуры);
	СведенияДокумента.Вставить("Товары", Объект.Товары);
	СтруктураПараметры.Вставить("СведенияДокумента", СведенияДокумента);
	
	КонтролироватьОстаткиТоваровПриЗакрытииЧека = ИспользоватьНастройкуРМК 
												И НаборПравИНастроек.КонтролироватьОстаткиТоваровПриЗакрытииЧека 
												И НЕ ЭтоРабочееМестоOffLine;
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", КонтролироватьОстаткиТоваровПриЗакрытииЧека);
	
	Возврат ПоместитьВоВременноеХранилище(СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРабочееМесто()
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСмену(КассаККМ)
	
	ОтветПользователя = ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМК("Закрити поточну касову зміну?");
	
	Если НЕ ВРЕГ(ОтветПользователя) = "ДА" Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("КассаККМ"                  , КассаККМ);
	ПараметрыЗаполнения.Вставить("ВыполнитьЗакрытиеСразу"    , Истина);
	
	ОткрытьФормуМодально("Обработка.ЗакрытиеКассовойСмены.Форма", ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеКассыСУчетомОткрытия(ПроверкаКассСОткрытымиСменами)
	
	//Кассы.Очистить();
	//
	//Для каждого ЭлементМассива Из ДоступныеКассыККМ Цикл
	//	
	//	ПроверяемаяКасса = ЭлементМассива.Значение;
	//	
	//	СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(ПроверяемаяКасса);
	//	
	//	Если СтруктураСостояниеКассовойСмены.СменаОткрыта = ПроверкаКассСОткрытымиСменами Тогда
	//		
	//		СтрокаКассы = Кассы.Добавить();
	//		СтрокаКассы.Касса = ПроверяемаяКасса;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура _ПлюсНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура _Плюс(Команда)
	Сообщить("Плюс");
	_ПлюсНаСервере();
КонецПроцедуры


&НаСервере
Процедура _МинусНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура _Минус(Команда)
	Сообщить("Минус");
	_МинусНаСервере();
КонецПроцедуры

#Область ОбработчикиСобытийОсновногоПоляВвода

&НаКлиенте
Процедура ПОИСК_ВВЕДЕННОГО_КОДА(Элемент)
	
	БуфферПоляВвода = СокрЛП(ПоискШК);	//	LNK 21.09.2017 10:03:47

	Если флПоискПоНомеру Тогда

		ПоискПоНомеруТелефонаКлиент(БуфферПоляВвода);
		БуфферПоляВвода = "";

	Иначе

		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
				"Активен режим «ЧЕК ВОЗВРАТА»!"
				, "Для выхода из режима «ЧЕК ВОЗВРАТА» необходимо нажать [F6]"
			);
			УстановитьТекущийЭлемент(Истина);	//	LNK 13.09.2017 08:17:04

		Иначе

			Если ЗаказПокупателяОплачен(Объект.ЗаказПокупателя) Тогда

			//	.. если интернет-заказ оплачен, ничего нельзя делать
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
					"Активен режим «ИНТЕРНЕТ-ЗАКАЗ»!"
					, "Отказано! Заказ покупателя оплачен в интернет-магазине."
				);
				БуфферПоляВвода = "";
				УстановитьТекущийЭлемент(Истина);	//	LNK 13.09.2017 08:17:04
				Возврат;

			ИначеЕсли ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя, "СчетНаОплатуПокупателю") Тогда	//	LNK 24.07.2020 06:23:55

				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
					"Активен режим «Счёт на оплату покупателю»!"
					, "Отказано! Счёт покупателю полностью сформирован ранее и не требует каких-либо дополнительный действий."
				);
				БуфферПоляВвода = "";
				УстановитьТекущийЭлемент(Истина);	//	LNK 13.09.2017 08:17:04
				Возврат;

			КонецЕсли;

			Если СтрДлина(СокрЛП(ПоискШК)) < 4 Тогда

				УстановитьТекущийЭлемент(Истина);	//	LNK 13.09.2017 08:17:04
				Возврат;

			КонецЕсли;
			
		//	разделяем количество и штрихкод
			КодЗначение = СтрЗаменить(ПоискШК, " ", "");
			ПоискШК = "";

			КоличествоПринято = ?(Множитель > 0, Множитель, 1);
			Множитель = 1;

			ОтменитьУслугуБанка();

			Если ЗначениеЗаполнено(КодЗначение)  Тогда

				СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(КодЗначение,, КоличествоПринято);

			//	а если это номер регистрационной карты ???
				Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда

					СтруктураПараметровКлиента = ПолученМагнитныйКод(КодЗначение);

				КонецЕсли;

				ЭтоПогашениеКупона = Истина;	//	HVOYA. 07.10.2016 22:46:23, Львова Е.А.

				ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, КодЗначение, КоличествоПринято);

			КонецЕсли;

			УстановитьТекущийЭлемент();	//	LNK 13.09.2017 08:17:04

		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 12.09.2019 10:27:20
Процедура ПоискПоНомеруТелефонаКлиент(БуфферПоляВвода)

	флПоискПоНомеру = Ложь;

	Объект.ВладелецДисконтнойКарты = Неопределено;
	Объект.ДисконтнаяКарта         = Неопределено;
	ОчиститьРеквизитыФормы();	//	LNK 16.08.2019 14:09:08	- предварительная очистка

	ТекстСообщения = ПоискПоНомеруТелефона(БуфферПоляВвода);
	ОперативныеДанныеПокупателя(Объект.ДисконтнаяКарта, Объект.ВладелецДисконтнойКарты);

	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда	//	LNK 18.07.2019 10:19:04

		Если НЕ ПустаяСтрока(ДанныеКонтрагента.НомерТелефона) И ДанныеКонтрагента.ИнтерактивныйВводНового = Истина Тогда

            ОтветПользователя = ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМК(
				"Ви можете створити нового клієнта за номером телефону «" + ДанныеКонтрагента.НомерТелефона + "»", "Покупець згоден?", "Нет");

			Если ВРег(ОтветПользователя) = "ДА" Тогда

				ПодключитьОбработчикОжидания("ОбработчикВводаДанныхКонтрагента", 1, Истина);

			Иначе

				ДанныеКонтрагента.НомерТелефона = "";
				ДанныеКонтрагента.ИнтерактивныйВводНового = Ложь;

			КонецЕсли;

		Иначе

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
				"Неудачная попытка поиска покупателя"
				, ТекстСообщения
			);

		КонецЕсли;

	КонецЕсли;

	Элементы.ПоискШК.Заголовок = "ШК";
	Элементы.ПоискШК.Маска = "";	
	Элементы.ПоискШК.ПодсказкаВвода = "введіть штрих-код товару";		
	ПоискШК = "";	

	Элементы.КомандаВыдатьКартуПредварительную.Доступность = Ложь;

	Если ПустаяСтрока(ТекстСообщения) тогда 

		ДисконтнаяКартаПриИзменении();

	КонецЕсли;  

	УстановитьОформлениеЭлементов();
	УстановитьТекущийЭлемент(Истина);	//	LNK 19.02.2020 07:01:09

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	Если ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя) Тогда
		Возврат;
	КонецЕсли;
	Попытка
		Объект.Товары.Удалить(Объект.Товары.Количество()-1);
	Исключение
		ЗафиксироватьОшибку(ОписаниеОшибки(), "УдалитьСтроку");	//	LNK 04.09.2018 14:16:54
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлемент(ОчиститьПолеВвода = Ложь)

	Если ОчиститьПолеВвода = Истина Тогда

		ПоискШК = "";

	КонецЕсли;

	ПодключитьОбработчикОжидания("УстановитьТекущийЭлементЗавершение", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементЗавершение()

	ТекущийЭлемент = Элементы.ПоискШК;

КонецПроцедуры


&НаКлиенте
Процедура _ПозиционироватьСтроку(Команда)
	
	РежимПоискаШтрихкода = НЕ РежимПоискаШтрихкода;
	ОбновитьМенюПоиска();
	WSHShell = Новый COMОбъект("WScript.Shell");
    WSHShell.SendKeys("{F10}{F10}"); 

КонецПроцедуры


&НаКлиенте
Процедура _ВвестиНаличные(Команда)

	Отказ = Ложь;

	Если НЕ ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя) Тогда

		НазначитьАвтоматическиеСкидкиКлиент(,, Отказ);

	КонецЕсли;

	Если НЕ Отказ Тогда

		ОплатитьТовары("ФормаПростойОплаты");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМенюПоиска()
	
	//Если РежимПоискаШтрихкода Тогда
	//	Элементы.ОсновнаяГруппа.ТекущаяСтраница = Элементы.СтрокаМеню;
	//	Элементы._ПоискПоШтрихкоду.Заголовок = "Меню (F11)";
	//	ТекущийЭлемент = Элементы.СтрокаПоиска;
	//Иначе
	//	Элементы.ОсновнаяГруппа.ТекущаяСтраница = Элементы.КнопкиМеню;
	//	Элементы._ПоискПоШтрихкоду.Заголовок = "Штрихкод (F11)";
	//	ТекущийЭлемент = Элементы._ПоискПоШтрихкоду;
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 01.06.2020 07:55:42
Процедура РМК_СчетНаОплатуПокупателю(Команда)

	Если НЕ ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя) Тогда

		Если Объект.Товары.Количество() > 0 Тогда

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
				"Рахунок на оплату покупцю"
				, "Необхідно пробити, анулювати чи відкласти поточний чек!"
			);

			УстановитьТекущийЭлемент();
			Возврат;

		КонецЕсли;

		ПараметрыОткрытия = Новый Структура(
			"Магазин, Организация"
			, Объект.Магазин
			, Объект.Организация
		);
		ОписаниеОповещения = Новый ОписаниеОповещения("СчетНаОплатуПокупателюЗавершение", ЭтотОбъект);

		ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВводаСчетаНаОплатуПокупателю", Объект.ИмяВнешнейОбработки)
		, ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Иначе

		ВыйтиИзРежимаИЗ();
		ОбновитьФорму();

	КонецЕсли;

	УстановитьОформлениеЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуПокупателюЗавершение(Значение, ДополнительныеПараметры)	Экспорт

	Перем СписокДанных;

	Если ТипЗнч(Значение) = Тип("Структура") Тогда

		Объект.ЗаказПокупателя = Значение.СчетНаОплатуПокупателю;
		ЧекККМВОбработке       = Значение.ДокументПродажи;

		ЗаполнитьПоСчетуНаОплатуПокупателюНаСервере(Значение, СписокДанных);

		Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл

			ДанныеТовара = СписокДанных.Получить(СтрокаТабличнойЧасти.Номенклатура);

			Если НЕ МагазинуРазрешенаНоменклатурнаяПозиция(ДанныеТовара, ДанныеТовара.КодНоменклатуры) Тогда

				ОбнулитьНаСервере();
				ОтменаЧека();
				СоздатьНовыйНабор();
				Модифицированность = Ложь;	//	LNK 18.02.2023 16:25:53
				ОчиститьРеквизитыФормы();

				Прервать;

			Иначе

				СтрокаТабличнойЧасти.Продавец = Неопределено;	//	LNK 23.07.2020 18:57:30

				ТоварыПриИзмененииКоличества(СтрокаТабличнойЧасти);
				ОтобразитьСкидки();

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	УстановитьОформлениеЭлементов();

	ОбновитьФорму();

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВРежимЗаказПокупателя(Команда)

	Если НЕ ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя) Тогда

		Если Объект.Товары.Количество() > 0 Тогда	//-HVOYA Mykhailo 2017-01-18

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
				"Інтернет-замовлення"
				, "Необхідно пробити, анулювати чи відкласти поточний чек!"
			);
			УстановитьТекущийЭлемент();	//	LNK 13.09.2017 08:17:04
			Возврат;

		КонецЕсли;

		ПараметрыОткрытия = Новый Структура("Магазин", Объект.Магазин);

		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЗаказаПокупателяЗавершение", ЭтотОбъект);

		Если НаборПравИНастроек.ЭтоУзелИнтернетМагазина Тогда
			
			Отборы = Новый Структура(
				"Проведен"
				, Истина
			);
			ПараметрыОткрытия.Вставить("Отбор", Отборы);

			ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВыбораЗаказаПокупателяИМ", Объект.ИмяВнешнейОбработки)
			, ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

		Иначе

			ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВыбораЗаказаПокупателя", Объект.ИмяВнешнейОбработки)
			, ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

		КонецЕсли;

	Иначе

		ВыйтиИзРежимаИЗ();
		ОбновитьФорму();

	КонецЕсли;

	УстановитьОформлениеЭлементов();	//	LNK 21.12.2020 09:51:15

КонецПроцедуры

&НаКлиенте
Процедура ВыборЗаказаПокупателяЗавершение(ДанныеВыбора, ДополнительныеПараметры)	Экспорт

	Перем СписокДанных;

	Если ТипЗнч(ДанныеВыбора) = Тип("Структура") И НЕ ОбщегоНазначенияКлиентСервер.СсылкаПустая(ДанныеВыбора.Ссылка) Тогда

		Объект.ЗаказПокупателя = ДанныеВыбора.Ссылка;
		ЗаполнитьНаСервереПоЗаказуПокупателя(СписокДанных);

		Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл

			Если СтрокаТабличнойЧасти.Номенклатура = ДанныеМагазина.УслугаДоставкиЗаказаПокупателя И НЕ ДанныеМагазина.УслугаДоставкиЗаказаПокупателя.Пустая() Тогда

				Продолжить;	//	LNK 16.04.2020 12:11:46

			КонецЕсли;

			ДанныеТовара = СписокДанных.Получить(СтрокаТабличнойЧасти.Номенклатура);

			Если НЕ МагазинуРазрешенаНоменклатурнаяПозиция(ДанныеТовара, ДанныеТовара.КодНоменклатуры) Тогда

				ОбнулитьНаСервере();
				ОтменаЧека();
				СоздатьНовыйНабор();
				Модифицированность = Ложь;	//	LNK 18.02.2023 16:26:22
				ОчиститьРеквизитыФормы();
				УстановитьОформлениеЭлементов();

				ПоказатьОповещениеПользователя("Ограничение продаж магазина",
					, "Позиция «" + ДанныеТовара.КодНоменклатуры + "» запрещена для продажи на текущем магазине!"
					, БиблиотекаКартинок.Ошибка32
				);

				Прервать;

			Иначе

				Если НЕ ДанныеВыбора.СкидкиРассчитаны Тогда

					ТоварыПриИзмененииКоличества(СтрокаТабличнойЧасти);

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		Объект.СкидкиРассчитаны = ДанныеВыбора.СкидкиРассчитаны;
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		ОтобразитьСкидки();

	КонецЕсли;

	ОбновитьФорму();
	УстановитьОформлениеЭлементов();	//	LNK 21.12.2020 09:51:15

КонецПроцедуры

&НаКлиенте
Процедура ВыйтиИзРежимаИЗ()
	
	Объект.ЗаказПокупателя = Неопределено;
	Объект.ДисконтнаяКарта = ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка");
	Объект.ВладелецДисконтнойКарты = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Объект.Товары.Очистить();
	Объект.ВыдачаСкидочныхКупонов.Очистить();	//	LNK 03.10.2019 07:30:27
	СоздатьНовыйНабор();
	Модифицированность = Ложь;	//	LNK 18.02.2023 16:26:22
	ОчиститьРеквизитыФормы();
	УстановитьТекущийЭлемент();	//	LNK 13.09.2017 08:17:04
	УстановитьОформлениеЭлементов();	//	LNK 21.12.2020 09:51:15
	
КонецПроцедуры

&НаСервере	//	LNK 01.06.2020 09:33:22
Процедура ЗаполнитьПоСчетуНаОплатуПокупателюНаСервере(ДанныеВыбора, СписокДанных)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаРегистра.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю,
	|	ТаблицаДокумента.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ТаблицаДокумента.ДисконтнаяКарта.ВладелецКарты
	|		ИНАЧЕ ТаблицаДокумента.Контрагент
	|	КОНЕЦ КАК Покупатель,
	|	ТаблицаДокумента.Магазин.СкладПродажи КАК Склад,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.БонусАкцияСписан КАК БонусАкцияСписан,
	|	ТаблицаДокумента.БонусБазаСписан КАК БонусБазаСписан,
	|	ТаблицаДокумента.Ответственный КАК Ответственный,
	|	ТаблицаРеквизиты.ТипУслуги КАК ТипУслуги,
	|	ЕСТЬNULL(ТаблицаРеквизиты.Банк.ТипИнтернетБанкинга, ЗНАЧЕНИЕ(Перечисление.ТипыИнтернетБанкинга.ПустаяСсылка)) КАК ТипИнтернетБанкинга,
	|	ТаблицаРеквизиты.ИспользоватьСкидкиНаценки КАК ИспользоватьСкидкиНаценки,
	|	ТаблицаРегистра.УслугаБанкаПериодПредоставления КАК УслугаБанкаПериодПредоставления,
	|	ТаблицаДокумента.СкидкиРассчитаны КАК СкидкиРассчитаны,
	|	ТаблицаДокумента.СкидкиРассчитаныCRM КАК СкидкиРассчитаныCRM
	|ПОМЕСТИТЬ Шапка
	|ИЗ
	|	РегистрСведений.ДанныеКредитныхПрограмм КАК ТаблицаРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК ТаблицаДокумента
	|		ПО ТаблицаРегистра.СчетНаОплатуПокупателю = ТаблицаДокумента.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УслугиБанка КАК ТаблицаРеквизиты
	|		ПО ТаблицаРегистра.УслугаБанка = ТаблицаРеквизиты.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ТаблицаРегистра.Интеграция = ИСТИНА
	|				ТОГДА ТаблицаРегистра.ГарантийноеПисьмоПодтверждено
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ТаблицаРегистра.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявкиНаОформлениеКредита.ОжидаетсяОтгрузка)
	|	И НЕ(ТаблицаРегистра.Отгружено
	|				ИЛИ ТаблицаРегистра.Отменить)
	|	И ТаблицаРегистра.СчетНаОплатуПокупателю = &СчетНаОплатуПокупателю
	|	И ТаблицаРегистра.УслугаБанка = &УслугаБанка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Склад КАК Склад,
	|	Шапка.Организация КАК Организация,
	|	Шапка.Покупатель КАК Покупатель,
	|	Шапка.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	Шапка.БонусАкцияСписан КАК БонусАкцияСписан,
	|	Шапка.БонусБазаСписан КАК БонусБазаСписан,
	|	Шапка.ТипУслуги КАК ТипУслуги,
	|	Шапка.ТипИнтернетБанкинга КАК ТипИнтернетБанкинга,
	|	Шапка.ИспользоватьСкидкиНаценки КАК ИспользоватьСкидкиНаценки,
	|	Шапка.УслугаБанкаПериодПредоставления КАК УслугаБанкаПериодПредоставления,
	|	Шапка.СкидкиРассчитаны КАК СкидкиРассчитаны,
	|	Шапка.СкидкиРассчитаныCRM КАК СкидкиРассчитаныCRM
	|ИЗ
	|	Шапка КАК Шапка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	Фильтр.Склад КАК Склад,
	|	Фильтр.Организация КАК Организация,
	|	ТаблицаТовары.БонусАкцияНачислен КАК БонусАкцияНачислен,
	|	ТаблицаТовары.БонусАкцияСписан КАК БонусАкцияСписан,
	|	ТаблицаТовары.БонусБазаНачислен КАК БонусБазаНачислен,
	|	ТаблицаТовары.БонусБазаСписан КАК БонусБазаСписан,
	|	ТаблицаТовары.КлючСвязи КАК КлючСвязи,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	Фильтр.Ответственный.ФизЛицо КАК Продавец,
	|	ТаблицаТовары.ПродажаПодарка КАК ПродажаПодарка,
	|	ТаблицаТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТаблицаТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаТовары.Номенклатура.НазначениеТовара КАК НазначениеТовара,
	|	ТаблицаТовары.Номенклатура.Код КАК КодНоменклатуры
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Шапка КАК Фильтр
	|		ПО ТаблицаТовары.Ссылка = Фильтр.СчетНаОплатуПокупателю
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплата.ВидОплаты КАК ВидОплаты,
	|	ТаблицаОплата.Сумма КАК Сумма,
	|	ТаблицаОплата.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Оплата КАК ТаблицаОплата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Шапка КАК Фильтр
	|		ПО ТаблицаОплата.Ссылка = Фильтр.СчетНаОплатуПокупателю
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Шапка"
	);
	Запрос.УстановитьПараметр("СчетНаОплатуПокупателю", ДанныеВыбора.СчетНаОплатуПокупателю);
	Запрос.УстановитьПараметр("УслугаБанка", ДанныеВыбора.УслугаБанка);
	
	Результаты = Запрос.ВыполнитьПакет();

	Шапка = Результаты[1].Выбрать();

	СписокДанных = Новый Соответствие;
	
	Если Шапка.Следующий() Тогда

		Объект.БонусАкцияСписан = Шапка.БонусАкцияСписан;
		Объект.БонусБазаСписан  = Шапка.БонусБазаСписан;
		Объект.ДисконтнаяКарта         = Шапка.ДисконтнаяКарта;
		Объект.ВладелецДисконтнойКарты = Шапка.Покупатель;

		Объект.СкидкиРассчитаны    = Шапка.СкидкиРассчитаны;
		Объект.СкидкиРассчитаныCRM = Шапка.СкидкиРассчитаныCRM;

		ОперативныеДанныеПокупателя(Объект.ДисконтнаяКарта, Объект.ВладелецДисконтнойКарты);

		Объект.Товары.Очистить();
		Объект.ВыдачаСкидочныхКупонов.Очистить();	//	LNK 03.10.2019 07:30:38

		ТоварыВыборка = Результаты[2].Выбрать();

		ДанныеТовара = Новый Структура("ТипНоменклатуры, НазначениеТовара");

		Пока ТоварыВыборка.Следующий() Цикл

			ЗаполнитьЗначенияСвойств(ДанныеТовара, ТоварыВыборка);

			СтрокаТовары = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, ТоварыВыборка);

			СтрокаТовары.Склад = Шапка.Склад;

			СписокДанных.Вставить(СтрокаТовары.Номенклатура
			, Новый Структура("Номенклатура, ТипНоменклатуры, НазначениеТовара, КодНоменклатуры"
				, СтрокаТовары.Номенклатура, ТоварыВыборка.ТипНоменклатуры, ТоварыВыборка.НазначениеТовара, ТоварыВыборка.КодНоменклатуры)
			);

		КонецЦикла;

		Объект.УслугаБанка = ДанныеВыбора.УслугаБанка;
		Объект.УслугаБанкаПериодПредоставления = Шапка.УслугаБанкаПериодПредоставления;

		УслугаБанкаДанные = ФинансыВызовСервера.УслугаБанкаСтруктураДанных();
		УслугаБанкаДанные.УслугаБанка = Объект.УслугаБанка;
		УслугаБанкаДанные.ПериодПредоставления      = Шапка.УслугаБанкаПериодПредоставления;
		УслугаБанкаДанные.ИспользоватьСкидкиНаценки = Шапка.ИспользоватьСкидкиНаценки;
		УслугаБанкаДанные.ТипУслуги           = Шапка.ТипУслуги;
		УслугаБанкаДанные.ТипИнтернетБанкинга = Шапка.ТипИнтернетБанкинга;
		УслугаБанкаДанные.СуммаКредита = ФинансыВызовСервера.ПолучитьУтвержденнуюСуммуКредита(Объект.ЗаказПокупателя, Объект.УслугаБанка);

		УслугаБанкаДанные.Оплата.Очистить();
		ОплатаВыборка = Результаты[3].Выбрать();

		Пока ОплатаВыборка.Следующий() Цикл

			УслугаБанкаДанные.Оплата.Добавить(
				Новый Структура(
					"ВидОплаты, Сумма"
					, ОплатаВыборка.ВидОплаты
					, ОплатаВыборка.Сумма
				)
			); 

		КонецЦикла;

	Иначе

	//	Сообщить об ошибке

	КонецЕсли;

	УстановитьСистемуНалогообложения();	//	LNK 31.12.2020 05:57:03

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервереПоЗаказуПокупателя(СписокДанных)
	
	ОбработкаВ1С = Объект.ЗаказПокупателя.УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.Розница;
	Запрос = Новый Запрос(ТекстЗапросаДанныеЗаказаПокупателя(ОбработкаВ1С));
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	Запрос.УстановитьПараметр("ЗаказПокупателя", Объект.ЗаказПокупателя);
	Запрос.УстановитьПараметр("ЭтоУзелИнтернетМагазина", НаборПравИНастроек.ЭтоУзелИнтернетМагазина);
	Запрос.УстановитьПараметр("УслугаДоставкиЗаказаПокупателя", ДанныеМагазина.УслугаДоставкиЗаказаПокупателя);
	Запрос.УстановитьПараметр("ВсеПродажиБезНДС", НаборПравИНастроек.ВсеПродажиБезНДС);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();

	Шапка = РезультатыЗапроса[1].Выбрать();

	СписокДанных = Новый Соответствие;
	ДанныеЗаказа = ДанныеЗаказаПокупателяЗаполнить(Шапка, Объект.ЗаказПокупателя, НаборПравИНастроек, ДанныеМагазина.УслугаДоставкиЗаказаПокупателя);
	
	Если Шапка.Следующий() Тогда

		Если НаборПравИНастроек.ЭтоУзелИнтернетМагазина = Истина Тогда

			Если НЕ Шапка.СуммаДоставки = Цел(Шапка.СуммаДоставки) Тогда

				ВызватьИсключение "Отказано! Сумма доставки не является целой суммой.";

			КонецЕсли;

		КонецЕсли;

		Объект.ДисконтнаяКарта         = Шапка.ДисконтнаяКарта;
		Объект.ВладелецДисконтнойКарты = Шапка.Покупатель;

		ОперативныеДанныеПокупателя(Объект.ДисконтнаяКарта, Объект.ВладелецДисконтнойКарты);

		Объект.Товары.Очистить();
		Объект.ВыдачаСкидочныхКупонов.Очистить();	//	LNK 03.10.2019 07:30:38

		ТоварыВыборка = РезультатыЗапроса[2].Выбрать();

		ДанныеТовара = Новый Структура("ТипНоменклатуры, НазначениеТовара");
		МожноУстановитьКлючСвязи = РезультатыЗапроса[5].Пустой();	//	LNK 14.12.2021 06:21:57

		СтруктураДействий = Новый Структура;	//	LNK 01.04.2022 11:22:39
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки"	, Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"			, Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено"	, Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано"	, Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));

		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

		Пока ТоварыВыборка.Следующий() Цикл

			ЗаполнитьЗначенияСвойств(ДанныеТовара, ТоварыВыборка);

			СтрокаТовары = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, ТоварыВыборка);

			СтрокаТовары.Склад = Шапка.Склад;
			СтрокаТовары.Организация = Объект.Организация;

			Если МожноУстановитьКлючСвязи И СтрокаТовары.КлючСвязи = 0 Тогда

				СтрокаТовары.КлючСвязи = СтрокаТовары.НомерСтроки;	//	LNK 14.12.2021 06:21:57

			КонецЕсли;

			Если НаборПравИНастроек.ВсеПродажиБезНДС = Истина
			И	 НЕ ТоварыВыборка.СтавкаНДС = ТоварыВыборка.СтавкаНДС_Ссылка	Тогда	//	LNK 01.04.2022 11:16:26

				СтрокаТовары.СтавкаНДС = ТоварыВыборка.СтавкаНДС_Ссылка;

				ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(СтрокаТовары, СтруктураДействий, КэшированныеЗначения);
				ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(СтрокаТовары, Объект.ЦенаВключаетНДС);

			КонецЕсли;

			СписокДанных.Вставить(СтрокаТовары.Номенклатура
			, Новый Структура("Номенклатура, ТипНоменклатуры, НазначениеТовара, КодНоменклатуры"
				, СтрокаТовары.Номенклатура, ТоварыВыборка.ТипНоменклатуры, ТоварыВыборка.НазначениеТовара, ТоварыВыборка.КодНоменклатуры)
			);

		КонецЦикла;

		УстановитьПроцентыСуммСкидокДляТовары(Объект.Товары);	//	LNK 21.11.2021 06:52:28

		Объект.ВыдачаСкидочныхКупонов.Загрузить(РезультатыЗапроса[3].Выгрузить());
		Объект.ПогашениеСкидочныхКупонов.Загрузить(РезультатыЗапроса[4].Выгрузить());
		Объект.СкидкиНаценки.Загрузить(РезультатыЗапроса[5].Выгрузить());
		Объект.НачислениеБонусныхБаллов.Загрузить(РезультатыЗапроса[6].Выгрузить());
		Объект.ОплатаБонуснымиБаллами.Загрузить(РезультатыЗапроса[7].Выгрузить());

		ОплатаБалламиНазначенаЗаказомПокупателя = НЕ Объект.ОплатаБонуснымиБаллами.Количество() = 0;

	Иначе

	//	Сообщить об ошибке

	КонецЕсли;
	
	УстановитьСистемуНалогообложения();	//	LNK 31.12.2020 05:57:03

КонецПроцедуры	

&НаСервереБезКонтекста	//	LNK 21.11.2021 06:52:13
Процедура УстановитьПроцентыСуммСкидокДляТовары(Товары)

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл

		СуммаБезСкидок = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.КоличествоУпаковок;

		Если НЕ СуммаБезСкидок = 0 Тогда

			СтрокаТабличнойЧасти.ПроцентРучнойСкидки		 = 100 * СтрокаТабличнойЧасти.СуммаРучнойСкидки / СуммаБезСкидок;
			СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 100 * СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки / СуммаБезСкидок;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста	//	LNK 21.11.2021 05:40:10
Функция ТекстЗапросаДанныеЗаказаПокупателя(ОбработкаВ1С = Ложь)

	Если ОбработкаВ1С Тогда
		//Запрос по новой схеме
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ВладелецДисконтнойКарты В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
		|			ТОГДА ТаблицаДокумента.ДисконтнаяКарта.ВладелецКарты
		|		ИНАЧЕ ТаблицаДокумента.ВладелецДисконтнойКарты
		|	КОНЕЦ КАК Покупатель,
		|	ТаблицаДокумента.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ТаблицаДокумента.СтатусОплаты КАК СтатусОплаты,
		|	ТаблицаДокумента.ТипДоставки КАК ТипДоставки,
		|	ТаблицаДокумента.ТипОплаты КАК ТипОплаты,
		|	ТаблицаДокумента.СуммаДоставки КАК СуммаДоставки,
		|	ТаблицаДокумента.СуммаДоставкиОплачена КАК СуммаДоставкиОплачена,
		|	ТаблицаДокумента.ОператорДоставки КАК ОператорДоставки,
		|	СУММА(ТаблицаТовары.Сумма) КАК СуммаДокумента
		|ПОМЕСТИТЬ Шапка
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСтрокЗаказаПокупателя КАК СостояниеСтрокЗаказаПокупателя
		|		ПО (СостояниеСтрокЗаказаПокупателя.ЗаказПокупателя = ТаблицаТовары.Ссылка)
		|			И (СостояниеСтрокЗаказаПокупателя.ГотовКПродаже)
		|			И (НЕ СостояниеСтрокЗаказаПокупателя.Продано)
		|			И (СостояниеСтрокЗаказаПокупателя.КлючСвязи = ТаблицаТовары.КлючСвязиЗапросаДоступности)
		|			И (&ЭтоУзелИнтернетМагазина
		|					И НЕ(ТаблицаТовары.Самовывоз
		|							И ТаблицаТовары.Ссылка.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипОплатыЗаказПокупателя.Наличные))
		|				ИЛИ НЕ &ЭтоУзелИнтернетМагазина
		|					И ТаблицаТовары.Самовывоз
		|					И ТаблицаТовары.Ссылка.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипОплатыЗаказПокупателя.Наличные)
		|					И ТаблицаТовары.МагазинПолучатель = &Магазин)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ТаблицаДокумента
		|		ПО (ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка)
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &ЗаказПокупателя
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Склад,
		|	ТаблицаДокумента.ДисконтнаяКарта,
		|	ТаблицаДокумента.СтатусОплаты,
		|	ТаблицаДокумента.ТипДоставки,
		|	ТаблицаДокумента.ТипОплаты,
		|	ТаблицаДокумента.СуммаДоставки,
		|	ТаблицаДокумента.СуммаДоставкиОплачена,
		|	ТаблицаДокумента.ОператорДоставки,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ВладелецДисконтнойКарты В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
		|			ТОГДА ТаблицаДокумента.ДисконтнаяКарта.ВладелецКарты
		|		ИНАЧЕ ТаблицаДокумента.ВладелецДисконтнойКарты
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Склад КАК Склад,
		|	Шапка.Покупатель КАК Покупатель,
		|	Шапка.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	Шапка.СтатусОплаты КАК СтатусОплаты,
		|	Шапка.ТипДоставки КАК ТипДоставки,
		|	Шапка.ТипОплаты КАК ТипОплаты,
		|	Шапка.СуммаДоставки КАК СуммаДоставки,
		|	Шапка.СуммаДоставкиОплачена КАК СуммаДоставкиОплачена,
		|	Шапка.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	Шапка КАК Шапка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.КлючСвязи КАК КлючСвязи,
		|	ТаблицаТовары.КлючСвязиБонусныхБаллов КАК КлючСвязиБонусныхБаллов,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Продавец КАК Продавец,
		|	ТаблицаТовары.ПродажаПодарка КАК ПродажаПодарка,
		|	ТаблицаТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	ТаблицаТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТовары.Номенклатура.СтавкаНДС КАК СтавкаНДС_Ссылка,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|	ТаблицаТовары.СуммаБонусныхБалловНачислено КАК СуммаБонусныхБалловНачислено,
		|	ТаблицаТовары.СуммаБонусныхБалловСписано КАК СуммаБонусныхБалловСписано,
		|	ТаблицаТовары.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	ТаблицаТовары.Упаковка КАК Упаковка,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Цена КАК Цена,
		|	ТаблицаТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаТовары.Номенклатура.НазначениеТовара КАК НазначениеТовара,
		|	ТаблицаТовары.Номенклатура.Код КАК КодНоменклатуры,
		|	ТаблицаТовары.СуммаОкругления КАК СуммаОкругления
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСтрокЗаказаПокупателя КАК СостояниеСтрокЗаказаПокупателя
		|		ПО (СостояниеСтрокЗаказаПокупателя.ЗаказПокупателя = ТаблицаТовары.Ссылка)
		|			И (СостояниеСтрокЗаказаПокупателя.ГотовКПродаже)
		|			И (НЕ СостояниеСтрокЗаказаПокупателя.Продано)
		|			И (СостояниеСтрокЗаказаПокупателя.КлючСвязи = ТаблицаТовары.КлючСвязиЗапросаДоступности)
		|			И (&ЭтоУзелИнтернетМагазина
		|					И НЕ(ТаблицаТовары.Самовывоз
		|							И ТаблицаТовары.Ссылка.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипОплатыЗаказПокупателя.Наличные))
		|				ИЛИ НЕ &ЭтоУзелИнтернетМагазина
		|					И ТаблицаТовары.Самовывоз
		|					И ТаблицаТовары.Ссылка.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипОплатыЗаказПокупателя.Наличные)
		|					И ТаблицаТовары.МагазинПолучатель = &Магазин)
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &ЗаказПокупателя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	10000,
		|	0,
		|	0,
		|	Шапка.СуммаДоставки,
		|	Шапка.СуммаДоставки,
		|	&УслугаДоставкиЗаказаПокупателя,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ,
		|	0,
		|	0,
		|	ВЫБОР
		|		КОГДА &ВсеПродажиБезНДС = ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|		ИНАЧЕ ТаблицаСправочник.СтавкаНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &ВсеПродажиБезНДС = ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|		ИНАЧЕ ТаблицаСправочник.СтавкаНДС
		|	КОНЕЦ,
		|	Шапка.СуммаДоставки,
		|	0,
		|	ВЫБОР
		|		КОГДА &ВсеПродажиБезНДС = ИСТИНА
		|			ТОГДА 0
		|		ИНАЧЕ Шапка.СуммаДоставки / 6
		|	КОНЕЦ,
		|	0,
		|	0,
		|	0,
		|	"""",
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	1,
		|	ТаблицаСправочник.ТипНоменклатуры,
		|	ТаблицаСправочник.НазначениеТовара,
		|	ТаблицаСправочник.Код,
		|	0
		|ИЗ
		|	Шапка КАК Шапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
		|		ПО (ТаблицаСправочник.Ссылка = &УслугаДоставкиЗаказаПокупателя)
		|ГДЕ
		|	&ЭтоУзелИнтернетМагазина
		|	И Шапка.СуммаДоставки > 0
		|	И Шапка.СуммаДоставки = (ВЫРАЗИТЬ(Шапка.СуммаДоставки КАК ЧИСЛО(15, 0)))
		|	И (Шапка.СуммаДоставкиОплачена = ИСТИНА
		|			ИЛИ (Шапка.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.СлужбаДоставки)
		|				ИЛИ Шапка.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.Смешаный))
		|				И Шапка.ОператорДоставки = ЗНАЧЕНИЕ(Перечисление.ОператорыДоставки.НоваяПочта))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВыдачаКупонов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаВыдачаКупонов.СкидочныйКупон КАК СкидочныйКупон,
		|	ТаблицаВыдачаКупонов.СерийныйНомер КАК СерийныйНомер,
		|	ТаблицаВыдачаКупонов.НоминалКупона КАК НоминалКупона,
		|	ТаблицаВыдачаКупонов.Количество КАК Количество
		|ИЗ
		|	Документ.ЗаказПокупателя.ВыдачаСкидочныхКупонов КАК ТаблицаВыдачаКупонов
		|ГДЕ
		|	ТаблицаВыдачаКупонов.Ссылка = &ЗаказПокупателя
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПогашениеКупонов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаПогашениеКупонов.СкидочныйКупон КАК СкидочныйКупон,
		|	ТаблицаПогашениеКупонов.СерийныйНомер КАК СерийныйНомер,
		|	ТаблицаПогашениеКупонов.НоминалКупона КАК НоминалКупона,
		|	ИСТИНА КАК Принят
		|ИЗ
		|	Документ.ЗаказПокупателя.ПогашениеСкидочныхКупонов КАК ТаблицаПогашениеКупонов
		|ГДЕ
		|	ТаблицаПогашениеКупонов.Ссылка = &ЗаказПокупателя
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСкидкиНаценки.НомерСтроки КАК НомерСтроки,
		|	ТаблицаСкидкиНаценки.КлючСвязи КАК КлючСвязи,
		|	ТаблицаСкидкиНаценки.ОграниченаМинимальнойЦеной КАК ОграниченаМинимальнойЦеной,
		|	ТаблицаСкидкиНаценки.ПодарокКоличество КАК ПодарокКоличество,
		|	ТаблицаСкидкиНаценки.ПодарокПозиция КАК ПодарокПозиция,
		|	ТаблицаСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
		|	ТаблицаСкидкиНаценки.СпособПримененияСкидки КАК СпособПримененияСкидки,
		|	ТаблицаСкидкиНаценки.Сумма КАК Сумма
		|ИЗ
		|	Документ.ЗаказПокупателя.СкидкиНаценки КАК ТаблицаСкидкиНаценки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ТаблицаТовары
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСтрокЗаказаПокупателя КАК СостояниеСтрокЗаказаПокупателя
		|			ПО (СостояниеСтрокЗаказаПокупателя.ЗаказПокупателя = ТаблицаТовары.Ссылка)
		|				И (СостояниеСтрокЗаказаПокупателя.ГотовКПродаже)
		|				И (НЕ СостояниеСтрокЗаказаПокупателя.Продано)
		|				И (СостояниеСтрокЗаказаПокупателя.КлючСвязи = ТаблицаТовары.КлючСвязиЗапросаДоступности)
		|				И (&ЭтоУзелИнтернетМагазина
		|						И НЕ(ТаблицаТовары.Самовывоз
		|								И ТаблицаТовары.Ссылка.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипОплатыЗаказПокупателя.Наличные))
		|					ИЛИ НЕ &ЭтоУзелИнтернетМагазина
		|						И ТаблицаТовары.Самовывоз
		|						И ТаблицаТовары.Ссылка.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипОплатыЗаказПокупателя.Наличные)
		|						И ТаблицаТовары.МагазинПолучатель = &Магазин)
		|		ПО ТаблицаСкидкиНаценки.Ссылка = ТаблицаТовары.Ссылка
		|			И ТаблицаСкидкиНаценки.КлючСвязи = ТаблицаТовары.КлючСвязи
		|			И (&ЭтоУзелИнтернетМагазина
		|					И НЕ(ТаблицаТовары.Самовывоз
		|							И ТаблицаТовары.Ссылка.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипОплатыЗаказПокупателя.Наличные))
		|				ИЛИ НЕ &ЭтоУзелИнтернетМагазина
		|					И ТаблицаТовары.Самовывоз
		|					И ТаблицаТовары.Ссылка.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипОплатыЗаказПокупателя.Наличные)
		|					И ТаблицаТовары.МагазинПолучатель = &Магазин)
		|ГДЕ
		|	ТаблицаСкидкиНаценки.Ссылка = &ЗаказПокупателя
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНачислениеБонусныхБаллов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаНачислениеБонусныхБаллов.ПрограммаЛояльности КАК ПрограммаЛояльности,
		|	ТаблицаНачислениеБонусныхБаллов.ДатаНачисления КАК ДатаНачисления,
		|	ТаблицаНачислениеБонусныхБаллов.ДатаСписания КАК ДатаСписания,
		|	СУММА(ТаблицаТовары.СуммаБонусныхБалловНачислено) КАК СуммаБонусныхБаллов
		|ИЗ
		|	Документ.ЗаказПокупателя.НачислениеБонусныхБаллов КАК ТаблицаНачислениеБонусныхБаллов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ТаблицаТовары
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСтрокЗаказаПокупателя КАК СостояниеСтрокЗаказаПокупателя
		|			ПО (СостояниеСтрокЗаказаПокупателя.ЗаказПокупателя = ТаблицаТовары.Ссылка)
		|				И (СостояниеСтрокЗаказаПокупателя.ГотовКПродаже)
		|				И (НЕ СостояниеСтрокЗаказаПокупателя.Продано)
		|				И (СостояниеСтрокЗаказаПокупателя.КлючСвязи = ТаблицаТовары.КлючСвязиЗапросаДоступности)
		|				И (&ЭтоУзелИнтернетМагазина
		|						И НЕ(ТаблицаТовары.Самовывоз
		|								И ТаблицаТовары.Ссылка.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипОплатыЗаказПокупателя.Наличные))
		|					ИЛИ НЕ &ЭтоУзелИнтернетМагазина
		|						И ТаблицаТовары.Самовывоз
		|						И ТаблицаТовары.Ссылка.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипОплатыЗаказПокупателя.Наличные)
		|						И ТаблицаТовары.МагазинПолучатель = &Магазин)
		|		ПО ТаблицаНачислениеБонусныхБаллов.Ссылка = ТаблицаТовары.Ссылка
		|ГДЕ
		|	ТаблицаНачислениеБонусныхБаллов.Ссылка = &ЗаказПокупателя
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНачислениеБонусныхБаллов.НомерСтроки,
		|	ТаблицаНачислениеБонусныхБаллов.ПрограммаЛояльности,
		|	ТаблицаНачислениеБонусныхБаллов.ДатаНачисления,
		|	ТаблицаНачислениеБонусныхБаллов.ДатаСписания
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОплатаБонуснымиБаллами.НомерСтроки КАК НомерСтроки,
		|	ТаблицаОплатаБонуснымиБаллами.КлючСвязиБонусныхБаллов КАК КлючСвязиБонусныхБаллов,
		|	ТаблицаОплатаБонуснымиБаллами.ПрограммаЛояльности КАК ПрограммаЛояльности,
		|	ТаблицаОплатаБонуснымиБаллами.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов,
		|	ТаблицаОплатаБонуснымиБаллами.ТипБонусов КАК ТипБонусов
		|ИЗ
		|	Документ.ЗаказПокупателя.ОплатаБонуснымиБаллами КАК ТаблицаОплатаБонуснымиБаллами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ТаблицаТовары
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСтрокЗаказаПокупателя КАК СостояниеСтрокЗаказаПокупателя
		|			ПО (СостояниеСтрокЗаказаПокупателя.ЗаказПокупателя = ТаблицаТовары.Ссылка)
		|				И (СостояниеСтрокЗаказаПокупателя.ГотовКПродаже)
		|				И (НЕ СостояниеСтрокЗаказаПокупателя.Продано)
		|				И (СостояниеСтрокЗаказаПокупателя.КлючСвязи = ТаблицаТовары.КлючСвязиЗапросаДоступности)
		|				И (&ЭтоУзелИнтернетМагазина
		|						И НЕ(ТаблицаТовары.Самовывоз
		|								И ТаблицаТовары.Ссылка.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипОплатыЗаказПокупателя.Наличные))
		|					ИЛИ НЕ &ЭтоУзелИнтернетМагазина
		|						И ТаблицаТовары.Самовывоз
		|						И ТаблицаТовары.Ссылка.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипОплатыЗаказПокупателя.Наличные)
		|						И ТаблицаТовары.МагазинПолучатель = &Магазин)
		|		ПО ТаблицаОплатаБонуснымиБаллами.Ссылка = ТаблицаТовары.Ссылка
		|			И ТаблицаОплатаБонуснымиБаллами.КлючСвязиБонусныхБаллов = ТаблицаТовары.КлючСвязиБонусныхБаллов
		|ГДЕ
		|	ТаблицаОплатаБонуснымиБаллами.Ссылка = &ЗаказПокупателя
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		;
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ВладелецДисконтнойКарты В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
		|			ТОГДА ТаблицаДокумента.ДисконтнаяКарта.ВладелецКарты
		|		ИНАЧЕ ТаблицаДокумента.ВладелецДисконтнойКарты
		|	КОНЕЦ КАК Покупатель,
		|	ТаблицаДокумента.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ТаблицаДокумента.СтатусОплаты КАК СтатусОплаты,
		|	ТаблицаДокумента.ТипДоставки КАК ТипДоставки,
		|	ТаблицаДокумента.ТипОплаты КАК ТипОплаты,
		|	ТаблицаДокумента.СуммаДоставки КАК СуммаДоставки,
		|	ТаблицаДокумента.СуммаДоставкиОплачена КАК СуммаДоставкиОплачена,
		|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента
		|ПОМЕСТИТЬ Шапка
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &ЗаказПокупателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Склад КАК Склад,
		|	Шапка.Покупатель КАК Покупатель,
		|	Шапка.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	Шапка.СтатусОплаты КАК СтатусОплаты,
		|	Шапка.ТипДоставки КАК ТипДоставки,
		|	Шапка.ТипОплаты КАК ТипОплаты,
		|	Шапка.СуммаДоставки КАК СуммаДоставки,
		|	Шапка.СуммаДоставкиОплачена КАК СуммаДоставкиОплачена,
		|	Шапка.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	Шапка КАК Шапка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.КлючСвязи КАК КлючСвязи,
		|	ТаблицаТовары.КлючСвязиБонусныхБаллов КАК КлючСвязиБонусныхБаллов,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Продавец КАК Продавец,
		|	ТаблицаТовары.ПродажаПодарка КАК ПродажаПодарка,
		|	ТаблицаТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	ТаблицаТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТовары.Номенклатура.СтавкаНДС КАК СтавкаНДС_Ссылка,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|	ТаблицаТовары.СуммаБонусныхБалловНачислено КАК СуммаБонусныхБалловНачислено,
		|	ТаблицаТовары.СуммаБонусныхБалловСписано КАК СуммаБонусныхБалловСписано,
		|	ТаблицаТовары.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	ТаблицаТовары.Упаковка КАК Упаковка,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Цена КАК Цена,
		|	ТаблицаТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаТовары.Номенклатура.НазначениеТовара КАК НазначениеТовара,
		|	ТаблицаТовары.Номенклатура.Код КАК КодНоменклатуры
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &ЗаказПокупателя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	10000,
		|	0,
		|	0,
		|	Шапка.СуммаДоставки,
		|	Шапка.СуммаДоставки,
		|	&УслугаДоставкиЗаказаПокупателя,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ,
		|	0,
		|	0,
		|	ВЫБОР
		|		КОГДА &ВсеПродажиБезНДС = ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|		ИНАЧЕ ТаблицаСправочник.СтавкаНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &ВсеПродажиБезНДС = ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|		ИНАЧЕ ТаблицаСправочник.СтавкаНДС
		|	КОНЕЦ,
		|	Шапка.СуммаДоставки,
		|	0,
		|	ВЫБОР
		|		КОГДА &ВсеПродажиБезНДС = ИСТИНА
		|			ТОГДА 0
		|		ИНАЧЕ Шапка.СуммаДоставки / 6
		|	КОНЕЦ,
		|	0,
		|	0,
		|	0,
		|	"""",
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	1,
		|	ТаблицаСправочник.ТипНоменклатуры,
		|	ТаблицаСправочник.НазначениеТовара,
		|	ТаблицаСправочник.Код
		|ИЗ
		|	Шапка КАК Шапка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
		|		ПО (ТаблицаСправочник.Ссылка = &УслугаДоставкиЗаказаПокупателя)
		|ГДЕ
		|	&ЭтоУзелИнтернетМагазина
		|	И Шапка.СуммаДоставки > 0
		|	И Шапка.СуммаДоставки = (ВЫРАЗИТЬ(Шапка.СуммаДоставки КАК ЧИСЛО(15, 0)))
		|	И (Шапка.СуммаДоставкиОплачена = ИСТИНА
		|			ИЛИ Шапка.ТипДоставки В (ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.НоваяПочтаДоставкаВОтделение), ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.НоваяПочтаДоставкаПоАдресу)))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВыдачаКупонов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаВыдачаКупонов.СкидочныйКупон КАК СкидочныйКупон,
		|	ТаблицаВыдачаКупонов.СерийныйНомер КАК СерийныйНомер,
		|	ТаблицаВыдачаКупонов.НоминалКупона КАК НоминалКупона,
		|	ТаблицаВыдачаКупонов.Количество КАК Количество
		|ИЗ
		|	Документ.ЗаказПокупателя.ВыдачаСкидочныхКупонов КАК ТаблицаВыдачаКупонов
		|ГДЕ
		|	ТаблицаВыдачаКупонов.Ссылка = &ЗаказПокупателя
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПогашениеКупонов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаПогашениеКупонов.СкидочныйКупон КАК СкидочныйКупон,
		|	ТаблицаПогашениеКупонов.СерийныйНомер КАК СерийныйНомер,
		|	ТаблицаПогашениеКупонов.НоминалКупона КАК НоминалКупона,
		|	ИСТИНА КАК Принят
		|ИЗ
		|	Документ.ЗаказПокупателя.ПогашениеСкидочныхКупонов КАК ТаблицаПогашениеКупонов
		|ГДЕ
		|	ТаблицаПогашениеКупонов.Ссылка = &ЗаказПокупателя
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСкидкиНаценки.НомерСтроки КАК НомерСтроки,
		|	ТаблицаСкидкиНаценки.КлючСвязи КАК КлючСвязи,
		|	ТаблицаСкидкиНаценки.ОграниченаМинимальнойЦеной КАК ОграниченаМинимальнойЦеной,
		|	ТаблицаСкидкиНаценки.ПодарокКоличество КАК ПодарокКоличество,
		|	ТаблицаСкидкиНаценки.ПодарокПозиция КАК ПодарокПозиция,
		|	ТаблицаСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
		|	ТаблицаСкидкиНаценки.СпособПримененияСкидки КАК СпособПримененияСкидки,
		|	ТаблицаСкидкиНаценки.Сумма КАК Сумма
		|ИЗ
		|	Документ.ЗаказПокупателя.СкидкиНаценки КАК ТаблицаСкидкиНаценки
		|ГДЕ
		|	ТаблицаСкидкиНаценки.Ссылка = &ЗаказПокупателя
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНачислениеБонусныхБаллов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаНачислениеБонусныхБаллов.ПрограммаЛояльности КАК ПрограммаЛояльности,
		|	ТаблицаНачислениеБонусныхБаллов.ДатаНачисления КАК ДатаНачисления,
		|	ТаблицаНачислениеБонусныхБаллов.ДатаСписания КАК ДатаСписания,
		|	ТаблицаНачислениеБонусныхБаллов.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов
		|ИЗ
		|	Документ.ЗаказПокупателя.НачислениеБонусныхБаллов КАК ТаблицаНачислениеБонусныхБаллов
		|ГДЕ
		|	ТаблицаНачислениеБонусныхБаллов.Ссылка = &ЗаказПокупателя
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОплатаБонуснымиБаллами.НомерСтроки КАК НомерСтроки,
		|	ТаблицаОплатаБонуснымиБаллами.КлючСвязиБонусныхБаллов КАК КлючСвязиБонусныхБаллов,
		|	ТаблицаОплатаБонуснымиБаллами.ПрограммаЛояльности КАК ПрограммаЛояльности,
		|	ТаблицаОплатаБонуснымиБаллами.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов,
		|	ТаблицаОплатаБонуснымиБаллами.ТипБонусов КАК ТипБонусов
		|ИЗ
		|	Документ.ЗаказПокупателя.ОплатаБонуснымиБаллами КАК ТаблицаОплатаБонуснымиБаллами
		|ГДЕ
		|	ТаблицаОплатаБонуснымиБаллами.Ссылка = &ЗаказПокупателя
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Шапка"
		;
	КонецЕсли;	
	Возврат ТекстЗапроса;

КонецФункции

&НаСервереБезКонтекста	//	LNK 02.11.2022 06:18:42
Функция ДанныеЗаказаПокупателяЗаполнить(ШапкаВыборка = Неопределено, ЗаказПокупателя, НаборПравИНастроек, УслугаДоставкиЗаказаПокупателя)

	ДанныеЗаказа = ДанныеЗаказаИнициализировать(НаборПравИНастроек);

	Если ЗаказПокупателяЗаполнен(ЗаказПокупателя, "ЗаказПокупателя") Тогда

		Если ШапкаВыборка = Неопределено Тогда

			ОбработкаВ1С = ЗаказПокупателя.УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.Розница;
			Запрос = Новый Запрос(ТекстЗапросаДанныеЗаказаПокупателя(ОбработкаВ1С));
			Запрос.УстановитьПараметр("Магазин", ЗаказПокупателя.Магазин);
			Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
			Запрос.УстановитьПараметр("ЭтоУзелИнтернетМагазина", НаборПравИНастроек.ЭтоУзелИнтернетМагазина);
			Запрос.УстановитьПараметр("УслугаДоставкиЗаказаПокупателя", УслугаДоставкиЗаказаПокупателя);
			Запрос.УстановитьПараметр("ВсеПродажиБезНДС", НаборПравИНастроек.ВсеПродажиБезНДС);
			
			РезультатыЗапроса = Запрос.ВыполнитьПакет();

			ШапкаВыборка = РезультатыЗапроса[1].Выбрать();

		КонецЕсли;

		Если ШапкаВыборка.Следующий() Тогда

			ДанныеЗаказа.ЗаказПокупателя		= ЗаказПокупателя;
			ДанныеЗаказа.СтатусОплаты			= ШапкаВыборка.СтатусОплаты;	//	ПредопределенноеЗначение("Перечисление.СтатусОплаты.НеОплачен")
			ДанныеЗаказа.ТипДоставки			= ШапкаВыборка.ТипДоставки;		//	LNK 04.10.2022 06:29:49
			ДанныеЗаказа.ТипОплаты				= ШапкаВыборка.ТипОплаты;		//	LNK 04.10.2022 06:29:49
			ДанныеЗаказа.СуммаДоставки			= ШапкаВыборка.СуммаДоставки;
			ДанныеЗаказа.СуммаДоставкиОплачена	= ШапкаВыборка.СуммаДоставкиОплачена;
			ДанныеЗаказа.СуммаДокумента			= ШапкаВыборка.СуммаДокумента;

		КонецЕсли;

		ШапкаВыборка.Сбросить();

	КонецЕсли;

	Возврат ДанныеЗаказа;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеЗаказаИнициализировать(НаборПравИНастроек)

	Возврат Новый Структура(
		"ЗаказПокупателя, ЭтоУзелИнтернетМагазина, СтатусОплаты, ТипДоставки, ТипОплаты, СуммаДоставки, СуммаДоставкиОплачена, СуммаДокумента"
		, ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка")
		, НаборПравИНастроек.ЭтоУзелИнтернетМагазина
		, ПредопределенноеЗначение("Перечисление.СтатусОплаты.ПустаяСсылка")
		, ПредопределенноеЗначение("Перечисление.ТипДоставкиЗаказПокупателя.ПустаяСсылка")
		, ПредопределенноеЗначение("Перечисление.ТипОплатыЗаказПокупателя.ПустаяСсылка")		
		, 0
		, Ложь
		, 0);

КонецФункции

// + HVOYA 21.09.2016 11:04:25, Латышев А.А.
&НаСервереБезКонтекста
Функция hiПроверитьАкционнуюЦену(Номенклатура, ЗначениеМагазин)	//	LNK 05.08.2021 13:58:15 УБИТЬ ЭТУ ХЕРНЮ.. но позже
	Возврат РегистрыСведений.ДействующиеЦеныНоменклатуры.ПолучитьПоследнее(,Новый Структура("Номенклатура, ОбъектЦенообразования", Номенклатура, ЗначениеМагазин)).Акция;
КонецФункции
// - HVOYA 21.09.2016 11:04:25, Латышев А.А. 


//+HVOYA Mykhailo : МЕНЮ РМК

&НаКлиенте
Процедура РМК_ОтменаЧека(Команда)

	АнулироватьВсеТовары(ИмяКомпьютера());
	ОбнулитьНаСервере();
	ОтменаЧека();
	СоздатьНовыйНабор();
	Модифицированность = Ложь;	//	LNK 18.02.2023 16:26:22
	ОчиститьРеквизитыФормы();
	УстановитьОформлениеЭлементов();
	УстановитьТекущийЭлемент();	//	LNK 13.09.2017 08:17:04

КонецПроцедуры


&НаКлиенте
Процедура РМК_Закрыть(Команда)

	ЗакрытьРМК();

КонецПроцедуры

&НаКлиенте
Процедура РМК_Просмотр(Команда)
	// Вставить содержимое обработчика.
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
			"Перегляд чека"
			, "Перед переглядом чека необхідно пробити, анулювати чи відкласти поточний чек!"
		);
		Возврат;
		
	КонецЕсли;
	
	МассивСтруктурОтбора = Новый Массив;
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Архивный"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Аннулированный"));
	
	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
	СтруктураОтбора.Поле          = "СтатусЧекаККМ";
	СтруктураОтбора.Значение      = МассивСтатусов;
	СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);
	
	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
	СтруктураОтбора.Поле          = "КассаККМ";
	СтруктураОтбора.Значение      = МассивКассККМКлиент;
	СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);
	
	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
	СтруктураОтбора.Поле          = "ПометкаУдаления";
	СтруктураОтбора.Значение      = Ложь;
	СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);
	
	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();	//	LNK 01.02.2019 07:22:48
	СтруктураОтбора.Поле          = "Дата";
	СтруктураОтбора.Значение      = НачалоДня(ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера() - 86400 * 2);
	СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("МассивСтруктурОтбора", МассивСтруктурОтбора);
	ПараметрыОткрытия.Вставить("НадписьПустогоСписка", "Список пробитих чеків порожній!");
	ПараметрыОткрытия.Вставить("НеДляВозврата", Истина);
	ПараметрыОткрытия.Вставить("Магазин", Объект.Магазин);

	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЧекаДляПросмотраЗавершение", ЭтотОбъект);
	ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВыбораЧека", Объект.ИмяВнешнейОбработки), ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЧекаДляПросмотраЗавершение(Значение, ДополнительныеПараметры)	Экспорт

	Если НЕ Значение = Неопределено Тогда

		ПараметрыОткрытия = Новый Структура(
			"ЧекДляПросмотра"
			, Значение.ЧекККМ
		);

		ОписаниеОповещения = Новый ОписаниеОповещения("ПросмотрЧекаЗавершение", ЭтотОбъект);
		ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаПросмотраЧека", Объект.ИмяВнешнейОбработки)
			, ПараметрыОткрытия
			, ЭтотОбъект
			, УникальныйИдентификатор
			,,
			, ОписаниеОповещения
			, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПросмотрЧекаЗавершение(Значение, ДополнительныеПараметры)	Экспорт

	УстановитьТекущийЭлемент();	//	LNK 13.09.2017 08:17:04

КонецПроцедуры

&НаКлиенте
Процедура РМК_ПРОБИТЬ_ЧЕК(Команда)
	
	Если ПроверитьНазначениеКассыККМ(Истина) И ПроверитьДанныеПокупателя() Тогда	//	LNK 19.01.2018 11:52:09

		Если Объект.Товары.Количество() = 0 И Объект.ПогашениеСкидочныхКупонов.Количество() = 0 Тогда // печать нулевого чека

			ОтменаЧека();
			ПечатьНулевогоЧека();
			СоздатьНовыйНабор();
			Модифицированность = Ложь;	//	LNK 18.02.2023 16:26:22

		Иначе	// расчет скидок, оплата наличными

			ЭтоВозврат = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат"));

			Если НЕ Объект.ДисконтнаяКарта.Пустая() И НЕ ЗначениеЗаполнено(Объект.ВладелецДисконтнойКарты) Тогда

				ОперативныеДанныеПокупателя(Объект.ДисконтнаяКарта, Объект.ВладелецДисконтнойКарты, Истина);

			КонецЕсли;

			Если ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя) Тогда

				Если ЭтоВозврат ИЛИ ЗаказПокупателяОплачен(Объект.ЗаказПокупателя) Тогда

					ВозвратОплаты = Новый Структура(	//	LNK 03.11.2022 05:56:44
						"СуммаПредоплаты, СуммаПослеплаты"
						, 0, 0
					);

					ВозвратОплаты.СуммаПредоплаты = ВернутьСуммуПредоплатыИнтернетЗаказа(Объект.ЗаказПокупателя, ЭтоВозврат, Объект.ЧекККМПродажа);

					Если ЭтоВозврат Тогда

						ВозвратОплаты.СуммаПослеплаты = ВернутьСуммуПослеплатыИнтернетЗаказа(Объект.ЗаказПокупателя, Объект.ЧекККМПродажа);

					КонецЕсли;

					Если РозничныеПродажиСерверПовтИсп.ЭтоУзелИнтернетМагазина() Тогда

							ИмяФормыОплаты = "ФормаСложнойОплаты";

					Иначе	ИмяФормыОплаты = "ФормаПростойОплаты";

					КонецЕсли;

				   	ОплатитьТовары(ИмяФормыОплаты, РозничныеПродажиСерверПовтИсп.ЭтоУзелИнтернетМагазина(),, ВозвратОплаты);

				Иначе	

			       ОплатитьТовары("ФормаПростойОплаты");

				КонецЕсли; 

			Иначе	

			   ОплатитьТовары("ФормаПростойОплаты");

			КонецЕсли; 

		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Объект.ВладелецДисконтнойКарты) Тогда

			ОчиститьРеквизитыФормы();

		КонецЕсли; 

	КонецЕсли;

	ОбновитьФорму();
	УстановитьТекущийЭлемент();	//	LNK 13.09.2017 08:17:04

КонецПроцедуры

&НаКлиенте	//	LNK 19.01.2018 11:37:48
Функция ПроверитьНазначениеКассыККМ(ВыводитьСообщение)

	Разрешено = Истина;

	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();

	Если Объект.НазначениеКассыККМ = ПредопределенноеЗначение("Перечисление.НазначенияКассККМ.МагазинФизический") Тогда

		Если ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя) Тогда

			Разрешено = Ложь;

			ПараметрыИнформации.ЗаголовокИнформации = "Касса НЕ может работать с интернет-магазином!";
			ПараметрыИнформации.ТекстИнформации = "Вами указан «" + Объект.ЗаказПокупателя + "», который не позволяет оформить чек! Необходимо очистить чек и повторить оформление без указания заказа покупателя.";

		КонецЕсли;

	ИначеЕсли Объект.НазначениеКассыККМ = ПредопределенноеЗначение("Перечисление.НазначенияКассККМ.МагазинИнтернет") Тогда

		Если НЕ ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя) Тогда

			Разрешено = Ложь;

			ПараметрыИнформации.ЗаголовокИнформации = "Касса может работать ТОЛЬКО с интернет-магазином!";
			ПараметрыИнформации.ТекстИнформации = "В чеке обязательно должен быть указан заказ покупателя, на основании которого будет проведена продажа.";

		КонецЕсли;

	КонецЕсли;

	Если НЕ Разрешено Тогда

		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

	КонецЕсли;

	Возврат Разрешено;

КонецФункции // ПроверитьНазначениеКассыККМ()

&НаКлиенте
Функция ПроверитьДанныеПокупателя()

	Разрешено = Истина;

	Если НЕ НаборПравИНастроек.ПродажиАктивированы Тогда	//	не в контексте CRM

		Если НЕ (Объект.ДисконтнаяКарта.Пустая() ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")) Тогда

			ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();

			Если НЕ ТипЗнч(ДанныеКарты) = Тип("Массив") Тогда

		         ОперативныеДанныеПокупателя(Объект.ДисконтнаяКарта, Объект.ВладелецДисконтнойКарты);

			КонецЕсли;

			Если ДанныеКарты.ВидДисконтнойКарты = ПредопределенноеЗначение("Справочник.ВидыДисконтныхКарт.ПредварительныеКартыЛояльности") Тогда

				Разрешено = Ложь;

				ПараметрыИнформации.ЗаголовокИнформации = "Предварительная карта!";
				ПараметрыИнформации.ТекстИнформации = "Вами указана «" + Объект.ДисконтнаяКарта
				+ "», которая является ПРЕДВАРИТЕЛЬНОЙ и не позволяет оформить чек! Необходимо провести верификацию покупателя либо указать другую карту.";

			КонецЕсли;

			Если НЕ Разрешено Тогда

				ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат Разрешено;

КонецФункции // ПроверитьДанныеПокупателя()

#Область ФункционалУслугиБанкаПрямые

&НаКлиенте
Процедура КомандаОплатаЧастями(Команда)

	КомандаУслугаБанкаВыполнить(ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.ОплатаЧастями"));

КонецПроцедуры

&НаКлиенте	//	LNK 13.11.2020 06:06:11
Процедура КомандаПакетМалыша(Команда)

	КомандаУслугаБанкаВыполнить(ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.ПакетМалыша"));

КонецПроцедуры

&НаКлиенте	//	LNK 15.11.2020 11:08:49
Процедура КомандаУслугаБанкаВыполнить(ТипУслуги)

	Если НЕ УслугаБанкаДанные.ТипУслуги = ТипУслуги Тогда

		ИнициализироватьУслугаБанкаДанные();

		Объект.УслугаБанка = ПредопределенноеЗначение("Справочник.УслугиБанка.ПустаяСсылка");
		Объект.УслугаБанкаПериодПредоставления = 0;

		ТипУслугиОчистить = ?(ТипУслуги = ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.ПакетМалыша")
			, ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.ОплатаЧастями")
			, ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.ПакетМалыша")
		);
		УстановитьОформлениеКнопкиБанковскойУслуги(ТипУслугиОчистить, Ложь);

	КонецЕсли;

	ПроверитьВозможностьУслугиБанка(ТипУслуги);

	ОбновитьФорму(, Истина, ТипУслуги);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеКнопкиБанковскойУслуги(ТипУслуги, ВывестиСообщение = Ложь)

	ЭлементФормы = ?(ТипУслуги = ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.ПакетМалыша")
		, Элементы.КомандаПакетМалыша
		, Элементы.КомандаОплатаЧастями
	);

	Если ДанныеМагазина.ИспользоватьБанковскиеУслуги = Истина Тогда

		ЦветФона   = ЦветФонаКнопкиОЧ;
		ЦветТекста = ЦветТекстаКнопкиОЧ;

		ВывестиСообщениеКассиру = Ложь;

		Если УслугаБанкаДанные.Проверено = Истина И УслугаБанкаДанные.ТипУслуги = ТипУслуги Тогда

			Если Объект.УслугаБанка = ПредопределенноеЗначение("Справочник.УслугиБанка.ПустаяСсылка") Тогда

				Если УслугаБанкаДанные.УслугаБанка = ПредопределенноеЗначение("Справочник.УслугиБанка.ПустаяСсылка") Тогда

				//	Оплата частями невозмжна.
					ЦветФона   = WebЦвета.ТусклоРозовый;
					ЦветТекста = WebЦвета.ТемноКрасный;

				Иначе

					ЦветФона   = WebЦвета.БледноЗеленый;
					ЦветТекста = WebЦвета.Зеленый;

				КонецЕсли;

				ЭлементФормы.Шрифт = Новый Шрифт();

			Иначе

				ЦветФона   = WebЦвета.БледноЗеленый;
				ЦветТекста = WebЦвета.ТемноЗеленый;
				ЭлементФормы.Шрифт = Новый Шрифт(,, Истина);

				ВывестиСообщениеКассиру = Истина;

				ОтменитьВсеСкидкиДокумента();

			КонецЕсли;

		Иначе

			ЦветТекста = WebЦвета.СветлоСерый;
			ЭлементФормы.Шрифт = Новый Шрифт(,,, Истина);

		КонецЕсли;

		ЭлементФормы.ЦветФона   = ЦветФона;
		ЭлементФормы.ЦветТекста = ЦветТекста;

		Если ВывестиСообщениеКассиру И ВывестиСообщение Тогда

			Если Объект.УслугаБанка = ПредопределенноеЗначение("Справочник.УслугиБанка.МгновеннаяРассрочка") Тогда

				ТекстЗаголовка  = СокрЛП(Объект.УслугаБанка);
				ТекстИнформации = "Услуга используется без ограничений";

			Иначе

				ТекстЗаголовка  = СокрЛП(УслугаБанкаДанные.Наименование);
				ТекстИнформации = ?(УслугаБанкаДанные.ИспользоватьСкидкиНаценки ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат"), ""
				, Символы.ПС + "СКИДКИ НЕ ИСПОЛЬЗУЮТСЯ! ПОДАРКИ НЕ ВЫДАВАТЬ В ЛЮБОМ ВИДЕ!")
			//	+ Символы.ПС + "ВНИМАНИЕ! Сообщите покупателю, что согласно ст.49 Закону Украины «Про банкiвську дiяльнiсть» при оплате частями клиент оплачивает 0.01% от суммы договора при каждом платеже"
				+ Символы.ПС + ТекстГлубиныПредоставления()
				+ СокрЛП(УслугаБанкаДанные.Описание);

			КонецЕсли;

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
				"ПОСЛУГА БАНКУ «" + ТекстЗаголовка + "»"
				, ТекстИнформации
			);

		КонецЕсли;

	Иначе

		ЭлементФормы.Видимость = Ложь;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьУслугиБанка(ТипУслуги)

	Если УслугаБанкаДанные.Проверено = Истина Тогда

		Если УслугаБанкаДанные.УслугаБанка = ПредопределенноеЗначение("Справочник.УслугиБанка.ПустаяСсылка") Тогда

		//	... нет никакой услуги - и говорить не о чем! переключаемся туда-сюда
			УслугаБанкаДанные.Проверено = Ложь;

			ТоварыДоступныеУстановить(Новый Массив, Объект.Товары, Ложь);

		ИначеЕсли Объект.УслугаБанка = ПредопределенноеЗначение("Справочник.УслугиБанка.ПустаяСсылка") Тогда

			Объект.УслугаБанка = УслугаБанкаДанные.УслугаБанка;
			Объект.УслугаБанкаПериодПредоставления = УслугаБанкаДанные.ПериодПредоставления;

			ТоварыДоступныеУстановить(Новый Массив, Объект.Товары, Ложь);

		Иначе

			УслугаБанкаДанные.Проверено = Ложь;

			Объект.УслугаБанка = ПредопределенноеЗначение("Справочник.УслугиБанка.ПустаяСсылка");
			Объект.УслугаБанкаПериодПредоставления = 0;

		//	.. сбросим атрибуты проверки
			ИнициализироватьУслугаБанкаДанные();

		КонецЕсли;

	Иначе

		УслугаБанкаДанные = ФинансыВызовСервера.ДоступнаяУслугаБанка(
			ПолучитьМассивНоменклатура(),
			Объект.КассаККМ,
			ТипУслуги,
			Ложь,
			ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя
				, ?(ТипУслуги = ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.ПакетМалыша")
					, "СчетНаОплатуПокупателю"
					, "")
				) ИЛИ НаборПравИНастроек.ЭтоУзелИнтернетМагазина
		);
		УслугаБанкаДанные.Проверено = Истина;
		УслугаБанкаДанные.ТипУслуги = ТипУслуги;

		ТоварыДоступныеУстановить(УслугаБанкаДанные.ТоварыДоступные, Объект.Товары, Истина);

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста	//	LNK 26.11.2020 06:15:37
Процедура ТоварыДоступныеУстановить(РезультатЗапроса, ОбъектТовары, Показать)

	Для каждого СтрокаТовары Из ОбъектТовары Цикл

		СтрокаТовары.УслугаБанка = Неопределено;
		СтрокаТовары.УслугаБанкаПоказать = Показать;

	КонецЦикла;

	Для каждого ЭлементРезультата Из РезультатЗапроса Цикл

		СтрокиТовары = ОбъектТовары.НайтиСтроки(Новый Структура("Номенклатура", ЭлементРезультата.Номенклатура));

		Для каждого СтрокаТовары Из СтрокиТовары Цикл

			СтрокаТовары.УслугаБанка = ЭлементРезультата.УслугаБанка;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

&НаСервере	//	LNK 10.07.2018 08:14:03
Процедура ИнициализироватьУслугаБанкаДанные()

	УслугаБанкаДанные = ФинансыВызовСервера.ДоступнаяУслугаБанка(Новый Массив, Неопределено, Неопределено);
	ТоварыДоступныеУстановить(Новый Массив, Объект.Товары, Ложь);

КонецПроцедуры

&НаСервере	//	LNK 19.04.2018 09:36:03
Функция ПолучитьМассивНоменклатура()

	Возврат Объект.Товары.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура");

КонецФункции // ПолучитьМассивНоменклатура()

&НаКлиенте
Процедура ОтменитьУслугуБанка()

	Объект.УслугаБанка = Неопределено;
	Объект.УслугаБанкаПериодПредоставления = 0;

	ИнициализироватьУслугаБанкаДанные();

КонецПроцедуры

&НаКлиенте	//	LNK 15.11.2020 11:37:30
Функция ТекстГлубиныПредоставления()

	ТекстГлубины = "";

	Если НЕ (Объект.УслугаБанкаПериодПредоставления = 0 И УслугаБанкаДанные.ПериодПредоставления = 0) Тогда

		ТекстГлубины = "Глубина услуги до " + Формат(
					?(Объект.УслугаБанкаПериодПредоставления = 0
						, УслугаБанкаДанные.ПериодПредоставления
						, Объект.УслугаБанкаПериодПредоставления
					), "ЧЦ=3; ЧДЦ=; ЧГ=") + " платежей" + Символы.ПС;

	КонецЕсли;

	Возврат ТекстГлубины;

КонецФункции

#КонецОбласти

&НаКлиенте
Процедура РМК_Аннуляция(Команда)

	Если ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя, "СчетНаОплатуПокупателю")
	Тогда

		Запретить = Истина;

	ИначеЕсли ЗаказПокупателяОплачен(Объект.ЗаказПокупателя) Тогда

	//	LNK 08.03.2023 05:56:26
		Запретить = НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат");

	КонецЕсли; 

	Если Запретить = Истина Тогда

		ПоказатьОповещениеПользователя("Отказ аннуляции"
			,
			, "Указан документ-основание, для которого запрещено изменение товарного состава"
			, БиблиотекаКартинок.Предупреждение32
		);

		Возврат;

	КонецЕсли;

	АннулироватьПозициюНаКлиенте();

	Если НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")	Тогда

		ОтменитьУслугуБанка();	//	LNK 10.07.2018 15:16:19

	КонецЕсли;

	ОбновитьФорму();
	УстановитьТекущийЭлемент();	//	LNK 13.09.2017 08:17:04

	УстановитьОформлениеЭлементов();	//	LNK 27.09.2019 12:37:19

КонецПроцедуры

&НаКлиенте
Процедура РМК_Возврат(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
			"Введення чека повернення",
			"Перед введенням чека повернення необхідно пробити, анулювати чи відкласти поточний чек!"
		);
		УстановитьТекущийЭлемент();	//	LNK 13.09.2017 08:17:04

		Возврат;

	Иначе
		
		МассивСтруктурОтбора = Новый Массив;
		
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый"));
		МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Архивный"));

		СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
		СтруктураОтбора.Поле          = "СтатусЧекаККМ";
		СтруктураОтбора.Значение      = МассивСтатусов;
		СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
		СтруктураОтбора.Использование = Истина;
		МассивСтруктурОтбора.Добавить(СтруктураОтбора);
		
		Если ДанныеМагазина.ЭтоГлавныйУзел = Истина Тогда

		//	LNK 06.02.2019 11:26:37
		//	На текущий момент в периферии не ограничиваем по списку касс.. имеют место возвраты "другого магазина"
		//	В ЦБ процесс фронта ещё не прописан.. так что там будет видно

			СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
			СтруктураОтбора.Поле = "КассаККМ";
			СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
			СтруктураОтбора.Значение      = РозничныеПродажиКлиентПовтИсп.СписокКассККММагазина(Объект.Магазин);
			СтруктураОтбора.Использование = Истина;
			МассивСтруктурОтбора.Добавить(СтруктураОтбора);

		КонецЕсли;
		
		СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
		СтруктураОтбора.Поле          = "Проведен";
		СтруктураОтбора.Значение      = Истина;
		СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураОтбора.Использование = Истина;
		МассивСтруктурОтбора.Добавить(СтруктураОтбора);
		
		СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
		СтруктураОтбора.Поле          = "ВидОперации";
		СтруктураОтбора.Значение      = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа");
		СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураОтбора.Использование = Истина;
		МассивСтруктурОтбора.Добавить(СтруктураОтбора);
		
		СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
		СтруктураОтбора.Поле          = "Дата";
		СтруктураОтбора.Значение      = НачалоДня(ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера() - 86400 * 2);
		СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		СтруктураОтбора.Использование = Истина;
		МассивСтруктурОтбора.Добавить(СтруктураОтбора);

		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("МассивСтруктурОтбора", МассивСтруктурОтбора);
		ПараметрыОткрытия.Вставить("Магазин", Объект.Магазин);

		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЧекаДляВозвратаЗавершение", ЭтотОбъект);
		ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВыбораЧека", Объект.ИмяВнешнейОбработки), ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
	ОбновитьФорму(, Истина);
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);

КонецПроцедуры

&НаКлиенте	//	LNK 01.02.2019 12:46:14
Процедура ВыборЧекаДляВозвратаЗавершение(Результат, ДополнительныеПараметры)	Экспорт

	Если НЕ Результат = Неопределено Тогда

		Если ЭтоВозвратныйЧек(Результат.ЧекККМ) Тогда	//+HVOYA Mykhailo : если выбран возвратный чек, выдаем предупреждение

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
				"Введення чека повернення",
				"ВІДМОВЛЕНО! Документ «" + Результат.ЧекККМ + "» є чеком ПОВЕРНЕННЯ. Неприпустимо створення чека повернення виходячи з чека повернення."
			);
			УстановитьТекущийЭлемент();	//	LNK 02.03.2018 09:34:59

		ИначеЕсли НЕ СогласованВозвратСБанком(Результат.ЧекККМ) = Неопределено И Не СогласованВозвратСБанком(Результат.ЧекККМ) Тогда	

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
				"Введення чека повернення",
				"ВІДМОВЛЕНО! Документ «" + Результат.ЧекККМ + "» є чеком ОПЛАТИ ЧАСТИНАМИ АЛЬФА-БАНК. Не погоджено заявку повернення з банком.");
			УстановитьТекущийЭлемент();	//	LNK 02.03.2018 09:34:59

		Иначе

			Если ЗначениеЗаполнено(Результат.ЧекККМ)  Тогда
				
				ПричинаВозврата = ПредопределенноеЗначение("Справочник.АналитикаХозяйственныхОпераций.ВозвратОтПокупателя");
				
				СоздатьНовыйНаборКлиент();
				
				Объект.ЧекККМПродажа                  = Результат.ЧекККМ;
				Объект.АналитикаХозяйственнойОперации = ПричинаВозврата;
				
				ЗаполнитьНаОснованииВозврата();

				Если Объект.Товары.Количество() > 0  Тогда

					ДозаполнитьТаблицыОбъекта();

				КонецЕсли;
				
				ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
				
				Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат");
				СброситьФлагСкидкиРассчитаны();

			Иначе

				Объект.ЧекККМПродажа = ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка");

			КонецЕсли;

		КонецЕсли;
		
		ОбновитьФорму(, Истина);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);

	КонецЕсли;

	УстановитьОформлениеЭлементов();

КонецПроцедуры

&НаСервере
Функция ЭтоВозвратныйЧек(ТекЧек)

	  Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекЧек,"ВидОперации") = Перечисления.ВидыОперацийЧекККМ.Возврат;

КонецФункции // ЭтоВозвратныйЧек()

///////////////////// ФУНКЦИОНАЛ КНОПОК
&НаКлиенте	//	LNK 18.09.2018 14:34:29
Процедура АннулироватьПозициюНаКлиенте()

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда

		СброситьФлагСкидкиРассчитаны();

		Если ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя, "ЗаказПокупателя") Тогда

			ОтменитьВсеСкидкиДокумента(Истина);	//	LNK 07.12.2021 05:41:08

		КонецЕсли;

	КонецЕсли;

	Если НЕ ТипЗнч(Элементы.Товары.ТекущаяСтрока) = Тип("Число") Тогда

		Возврат;

	КонецЕсли;

	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);

	Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда

		ДанныеСтрокиПередИзменением = ОбработкаТабличнойЧастиТоварыКлиент.СкопироватьВСтруктуруЭлементКоллекции(СтрокаТабличнойЧасти, Объект.Товары);

		ЗафиксироватьАннуляцию(СтрокаТабличнойЧасти.ПолучитьИдентификатор(), 1, ИмяКомпьютера());

		ДанныеКупона = ПолучитьДанныеКупона(СтрокаТабличнойЧасти.Номенклатура, Неопределено);

		Если СтрокаТабличнойЧасти.КоличествоУпаковок > 1 И НЕ ДанныеКупона.ЯвляетсяКупоном Тогда

			БылоКоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок;
			СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок - 1;

			БонусныеБаллыКлиент.ТоварыПриОкончанииРедактирования(СтрокаТабличнойЧасти, ДанныеСтрокиПередИзменением, Объект,, ДанныеПродажи);	//	LNK 04.07.2021 07:48:28

			СтруктураДействий = Новый Структура;

			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
			СтруктураДействий.ПересчитатьСуммуСУчетомАвтоматическойСкидки.Очищать    = Ложь;	//	сохраняем процент автоматической скидки
			СтруктураДействий.ПересчитатьСуммуСУчетомБонусныхБалловНачислено.Очищать = Ложь;	//	LNK 26.03.2021 09:27:14
			СтруктураДействий.ПересчитатьСуммуСУчетомБонусныхБалловСписано.Очищать   = Ложь;	//	LNK 26.03.2021 09:27:14

			ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

			Если ДанныеКупона.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда

				Количество = 0;
				УдалитьСерийныеНомераПодарочныхСертификатов(Элементы.Товары.ТекущиеДанные, Количество);

				Если НЕ Количество = Элементы.Товары.ТекущиеДанные.Количество Тогда

					Возврат;

				КонецЕсли; 

			КонецЕсли; 

		Иначе

			УдалитьПозициюИзПогашениеСкидочныхКупонов(СтрокаТабличнойЧасти);	//	LNK 17.06.2020 06:21:10

			Если НЕ СтрокаТабличнойЧасти.КлючСвязиСерийныхНомеров = 0 тогда

				УдалитьПозициюИзСерийныеНомера(СтрокаТабличнойЧасти);

			КонецЕсли;

			БонусныеБаллыКлиент.ТоварыПередУдалением(СтрокаТабличнойЧасти, Объект,, ДанныеПродажи);

			Объект.Товары.Удалить(СтрокаТабличнойЧасти);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьРМК()

	ТекстИнформации = "";

	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстИнформации = "Перед виходом необхідно пробити, анулювати чи відкласти поточний чек!";
		
	КонецЕсли;

	Если НаборПравИНастроек.ПродажиАктивированы И ПустаяСтрока(ТекстИнформации) И Объект.ПогашениеСкидочныхКупонов.Количество() > 0 Тогда
		
		ТекстИнформации = "Перед виходом необхідно повернути покупцеві купони знижок, після чого анулювати поточний чек";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстИнформации) Тогда	//	LNK 27.09.2019 10:23:26

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Вихід", ТекстИнформации);
		УстановитьТекущийЭлемент();	//	LNK 13.09.2017 08:17:04

		Возврат;

	КонецЕсли;

	СанкционированноеЗакрытие = Истина;
	
	Закрыть(Новый Структура("ТекстСообщенияПослеЗакрытия", ""));

КонецПроцедуры

&НаКлиенте
Процедура ОтменаЧека()
	
	Объект.Товары.Очистить();
	Объект.УправляемыеСкидки.Очистить();
	Объект.Подарки.Очистить();
	Объект.СкидкиНаценки.Очистить();
	Объект.СерийныеНомера.Очистить();
	Объект.Оплата.Очистить();
	Объект.ПогашениеПодарочныхСертификатов.Очистить();
	Объект.Серии.Очистить();
	Объект.ПогашениеСкидочныхКупонов.Очистить();
	Объект.ВыдачаСкидочныхКупонов.Очистить();	//	LNK 03.10.2019 07:29:56
	// +HVOYA. 08.10.2016 18:53:22, Львова Е.А.
	Объект.ВариантВыдачиКупона = Неопределено;
	Объект.НоменклатураСкидочногоКупона = Неопределено;
	// -HVOYA. 08.10.2016 18:53:25, Львова Е.А.
	Объект.НачислениеБонусныхБаллов.Очистить();
	Объект.ОплатаБонуснымиБаллами.Очистить();
	ВыйтиИзРежимаИЗ();
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьНулевогоЧека()
	
	Попытка
		НапечататьНулевойЧек(ТаблицаКассККМОрганизаций[0].КассаККМ);
	Исключение
		ЗафиксироватьОшибку(ОписаниеОшибки(), "ПечатьНулевогоЧека");	//	LNK 04.09.2018 14:16:54
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюПродаж(ЭтоПлюсОдин = Ложь)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Если Объект.Товары.Количество() > 0 Тогда
			Элементы.Товары.ТекущаяСтрока = Объект.Товары[Объект.Товары.Количество() - 1].ПолучитьИдентификатор();
			ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда
		РМК1_Цена = "0.00 грн";
		РМК1_Количество = "0 шт";
		РМК1_СуммаВЧеке = "0.00 грн";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоПлюсОдин Тогда
		//+HVOYA YURA G. 28.09.2016 16:10:04
		Если ТекущаяСтрока <> Неопределено Тогда
			//ТекущаяСтрока.Продавец = Объект.Продавец
			//Если НЕ ЗначениеЗаполнено(Объект.ПродавецТекущий) Тогда
			//	ТекущаяСтрока.Продавец = Объект.Продавец
			//ИначеЕсли ЗначениеЗаполнено(Объект.ПродавецТекущий) Тогда
			Если ЗначениеЗаполнено(Объект.ПродавецТекущий) Тогда
				ТекущаяСтрока.Продавец = Объект.ПродавецТекущий;
				//КонецЕсли;
				Объект.ПродавецТекущий = Неопределено 
			КонецЕсли ;
			
		КонецЕсли ;

		//-HVOYA YURA G. 28.09.2016 16:10:06
	КонецЕсли;

	
	РМК1_Цена = Формат(ТекущаяСтрока.Цена, "ЧДЦ=2; ЧРД=.") + " грн";
    РМК1_Количество = Формат(ТекущаяСтрока.Количество, "ЧДЦ=; ЧН=0; ЧГ=") + " шт";
    // +HVOYA. 28.02.2017 17:46:33, Львова Е.А.
    //РМК1_СуммаВЧеке = Формат(ТекущаяСтрока.Сумма,"ЧДЦ=2; ЧРД=.")+" грн";
    Если Объект.ПогашениеПодарочныхСертификатов.Количество()=0 Тогда
        РМК1_СуммаВЧеке = "0.00 грн";
    КонецЕсли; 
    // -HVOYA. 28.02.2017 17:46:40, Львова Е.А.
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюОбщейСуммы()

	СуммаВсего              = Объект.Товары.Итог("СуммаВсего");
	СуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки();
	СуммаСкидкиРассчет      = СуммаДокументаБезСкидок - СуммаВсего;
	СуммаСкидки             = ?(СуммаСкидкиРассчет > 0, СуммаСкидкиРассчет, - СуммаСкидкиРассчет);
	СуммаКОплате            = СуммаВсего;

	РМК3_ОбщаяСуммаСкидки   = СуммаСкидки;
	РМК3_ОбщаяСуммаЧека     = СуммаВсего;

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда

		Если Объект.Оплата.Количество() = 1 Тогда	//	LNK 19.07.2019 11:08:49

			Объект.Оплата[0].Сумма = Мин(Объект.Оплата[0].Сумма, СуммаВсего);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НапечататьНулевойЧек(КассаККМ)

	Результат = Ложь;
	
	ПараметрыКассыККМ       = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	ПараметрыИнформации.ЗаголовокИнформации = "Помилка друку нульового чека";
	
	Если ЗначениеЗаполнено(ИдентификаторУстройства)  Тогда
		ОписаниеОшибки = "";

		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			// Подключение устройства

			Если ИдентификаторУстройства <> Неопределено Тогда
				Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(ЭтотОбъект,
				                                                                              ИдентификаторУстройства, ОписаниеОшибки);

				Если Результат Тогда
					ВходныеПараметры  = Неопределено;
					ВыходныеПараметры = Неопределено;

					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
					                                                        "PrintNullReceipt",
					                                                        ВходныеПараметры,
					                                                        ВыходныеПараметры
					);
					Если НЕ Результат Тогда

						ПараметрыИнформации.ТекстИнформации = СтрЗаменить(
							"Під час друку нульового чека сталася помилка.
							|%ОписаниеОшибки%
							|Чек не надруковано на фіскальному реєстраторі."
							, "%ОписаниеОшибки%"
							, ВыходныеПараметры[1]
						);
						ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

					КонецЕсли;

					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(ЭтотОбъект,
					                                                                 ИдентификаторУстройства
					);

				Иначе

					ПараметрыИнформации.ТекстИнформации = "Під час підключення пристрою сталася помилка." + Символы.ПС + ОписаниеОшибки;
					ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

				КонецЕсли;

			КонецЕсли;

		Иначе

			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК("Попередньо необхідно вибрати робоче місце поточного сеансу з обладнанням, що підключається.");

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеЧекаНаСервере(НадписьНомер, НадписьДата, СсылкаДок)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекККМ.Номер,
	|	ЧекККМ.Дата
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",СсылкаДок);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НадписьНомер = Выборка.Номер + " от " + Выборка.Дата;
		//НадписьДата = Выборка.Дата;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСкидки()

	Для каждого СтрокаТабличнойЧасти из Объект.Товары Цикл

		КоличествоВСтроке	  = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Упаковка), СтрокаТабличнойЧасти.КоличествоУпаковок, СтрокаТабличнойЧасти.Количество);
		СуммаБезСкидкиВСтроке = СтрокаТабличнойЧасти.Цена * КоличествоВСтроке;
		СуммаСкидкиВСтроке	  = СуммаБезСкидкиВСтроке - СтрокаТабличнойЧасти.Сумма;

		Если (СуммаСкидкиВСтроке > 0.01 ИЛИ СуммаСкидкиВСтроке < -0.01) И НЕ СуммаБезСкидкиВСтроке = 0 Тогда

				СтрокаТабличнойЧасти.ПроцентСкидки = Окр(100 * СуммаСкидкиВСтроке / СуммаБезСкидкиВСтроке, 2, 1);

		Иначе	СтрокаТабличнойЧасти.ПроцентСкидки = 0;

		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

#Область ПолучениеДанныхКартыДисконтаИЕёВладельца

&НаСервере	//	LNK 31.05.2017 07:48:48
Процедура ОперативныеДанныеПокупателя(КартаСсылка, ВладелецСсылка, УстановитьИдентификациюКлиента = Ложь)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.ФизЛицо КАК ФизЛицо
	|ИЗ
	|	Справочник.Контрагенты КАК ТаблицаСправочник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО ТаблицаСправочник.ФизЛицо = ФизическиеЛица.Ссылка
	|ГДЕ
	|	НЕ ТаблицаСправочник.ФизЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	И ТаблицаСправочник.Ссылка = &ВладелецДисконтнойКарты
	|	И НЕ ФизическиеЛица.Уволен"
	);
	Запрос.УстановитьПараметр("ВладелецДисконтнойКарты", Объект.ВладелецДисконтнойКарты);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда	//	LNK 11.02.2021 04:51:04

		Если НЕ Объект.КартаСотрудника Тогда

			Объект.КартаСотрудника = Истина; 
			Объект.ИспользоватьПрограммуЛояльности = Истина;

		КонецЕсли;

	Иначе 

		Объект.КартаСотрудника = Ложь;
		Объект.ИспользоватьПрограммуЛояльности = Ложь;

	КонецЕсли;

	Элементы.ПереключениеСкидокЛояльности.Доступность = Объект.КартаСотрудника;

	ДанныеКарты = РозничныеПродажиСервер.ПолучитьДанныеКарты(ЧекККМВОбработке
		, ВладелецСсылка
		, КартаСсылка
		, Объект.Магазин
		, Объект.Товары.Выгрузить(, "Номенклатура, СуммаВсего, Количество")
		, Объект.ЗаказПокупателя
		, Объект.ИспользоватьПрограммуЛояльности
	);
	НаборПравИНастроек.Вставить("РесурсWebRetailДоступен", РозничныеПродажиСлужебный.РесурсWebRetailДоступен());	//	ещё раз проверим.

	Если ПустаяСтрока(Объект.НомерТелефона) И НЕ ПустаяСтрока(ДанныеКарты.НомерТелефона) Тогда	//	LNK 23.07.2021 07:45:48

		Объект.НомерТелефона = ДанныеКарты.НомерТелефона;

	КонецЕсли;

	РМК2_ВидДисконта          = ?(Объект.ИспользоватьПрограммуЛояльности, "Программа лояльности", ДанныеКарты.ВидДисконтнойКарты);
	РМК2_ИдентификацияКлиента = ДанныеКарты.ВладелецКарты;
	РМК2_Штрихкод             = ДанныеКарты.КодКарты;

//	---------------------------------------------------------------------------------------

	Если УстановитьИдентификациюКлиента = Истина Тогда

		Объект.ВладелецДисконтнойКарты = ДанныеКарты.ВладелецКарты;

	КонецЕсли;

	РМК2_СуммаПокупок  = Формат(ДанныеКарты.СуммаПокупок, "ЧДЦ=2; ЧН=0.00; ЧГ=");
	РМК2_ПроцентСкидки = Формат(ДанныеКарты.ПроцентСкидки, "ЧГ=");

КонецПроцедуры

#КонецОбласти

&НаСервере	//	LNK 13.08.2019 09:39:07
Процедура ИндикаторПодключенияНажатиеНаСервере()

	НаборПравИНастроек.Вставить("РесурсWebRetailДоступен", РозничныеПродажиСлужебный.РесурсWebRetailДоступен(Истина));

	Если НаборПравИНастроек.ПродажиАктивированы Тогда

		НаборПравИНастроек.Вставить("РесурсMicrosoftDynamicsДоступен", РозничныеПродажиСлужебный.РесурсMicrosoftDynamicsДоступен(Истина));

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 13.08.2019 09:38:59
Процедура ИндикаторПодключенияНажатие(Элемент)

	ИндикаторПодключенияНажатиеНаСервере();

	УстановитьОформлениеЭлементов();

КонецПроцедуры

//-HVOYA Mykhailo : МЕНЮ РМК
//	LNK 20.09.2017 11:54:32
&НаКлиенте
Процедура _КраснаяЗвезда(Команда)

	ТипПриведения = Новый ОписаниеТипов("Число");
	Множитель = Мин(Макс(1, ТипПриведения.ПривестиЗначение(БуфферПоляВвода)), 90);
	БуфферПоляВвода = "";

	УстановитьТекущийЭлемент(Истина);	//	LNK 20.09.2017 10:40:35

КонецПроцедуры

&НаКлиенте
Процедура РМК_Отчет(Команда)

	ПараметрыОткрытия = Новый Структура(
		"РабочееМесто, мИмяКомпьютера, ТекКассаККМ, РаботаемБезДисплеяПокупателя"
		, РабочееМесто, мИмяКомпьютера, Объект.КассаККМ, Ложь);

	ОписаниеОповещения = Новый ОписаниеОповещения("РМК_Отчет_Завершение", ЭтотОбъект);
	ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаРаботыСКассовымАппаратом", Объект.ИмяВнешнейОбработки)
		, ПараметрыОткрытия
		, ЭтотОбъект
		, УникальныйИдентификатор
		,,
		, ОписаниеОповещения
		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);

КонецПроцедуры

&НаКлиенте
Процедура РМК_Отчет_Завершение(Результат, ДополнительныеПараметры)	Экспорт

	УстановитьТекущийЭлемент();	//	LNK 13.09.2017 08:17:04

КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьАннуляцию(ИдентификаторСтроки, КоличествоУпаковок = -1, Компьютер)

	Если НЕ (ТестовыйРежимРМК ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")) Тогда

		СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);

		Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда

			Если ЧекККМВОбработке.Пустая() Тогда

				ЧекККМВОбработке = Документы.ЧекККМ.ПолучитьСсылку();

			КонецЕсли;

			Количество = ?(КоличествоУпаковок = -1, СтрокаТабличнойЧасти.КоличествоУпаковок, КоличествоУпаковок);

			РегистрыСведений.АннуляцияПродажи.Регистрация(
				  ЧекККМВОбработке
				,
				, Перечисления.СтатусыЧековККМ.Аннулированный
				, Объект.Магазин
				, Объект.КассаККМ
				, ТаблицаКассККМОрганизаций[0].КассоваяСмена
				, ПараметрыСеанса.ТекущийПользователь
				, СтрокаТабличнойЧасти.Номенклатура
				, СтрокаТабличнойЧасти.Упаковка
				, Количество
				, СтрокаТабличнойЧасти.Цена
				, Количество * СтрокаТабличнойЧасти.Цена
				, Компьютер
			);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура АнулироватьВсеТовары(Компьютер)

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл

		ЗафиксироватьАннуляцию(СтрокаТабличнойЧасти.ПолучитьИдентификатор(), СтрокаТабличнойЧасти.КоличествоУпаковок, Компьютер);

	КонецЦикла;

КонецПроцедуры

&НаКлиенте	// +HVOYA. 07.10.2016 18:41:15, Львова Е.А.
Процедура УдалитьИзТоваровЧекаПогашаемыеСкидочныеКупоны()
	
	Если НЕ НаборПравИНастроек.ПродажиАктивированы Тогда	//	LNK 27.09.2019 13:16:45

		Для каждого Купон Из Объект.ПогашениеСкидочныхКупонов Цикл

			МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Купон.СкидочныйКупон));

			Для каждого Элемент Из МассивСтрок Цикл

				Объект.Товары.Удалить(Элемент);

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

#Область БонусныеБаллы

&НаКлиенте	//	LNK 28.02.2021 08:24:18
Функция ПроверитьВозможностьИспользованияБонусов(ПараметрыОткрытия)

	ТекстСообщения = "";
	
	Если ПустаяСтрока(ПараметрыОткрытия.НомерТелефона) Тогда

		ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
		+ "Не указан номер телефона для авторизации.";

	КонецЕсли;

	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Авторизация невозможна.", ТекстСообщения);

	КонецЕсли;

	Возврат ПустаяСтрока(ТекстСообщения);

КонецФункции

&НаКлиенте
Процедура ОткрытьФормуИспользованияБонусов(ФормаОплаты)	Экспорт

	ОтменитьРучнуюОплатуБонуснымиБалламиНаСервере();
//	обновим открывающую форму после очистки управляемых типов бонусной оплаты.
	ФормаОплаты.КомандаИспользованиеБонусовОбновитьДанныеФормы(ПолучитьПараметрыОплатыСуммы(ТабличноеПолеЧеков[0]));

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Контрагент"			, Объект.ВладелецДисконтнойКарты);
	ПараметрыОткрытия.Вставить("Магазин"			, Объект.Магазин);
	ПараметрыОткрытия.Вставить("ТоварыДляОплаты"	, БонусныеБаллыКлиент.ТоварыДляОплатыБонусами(Объект.Товары));
	ПараметрыОткрытия.Вставить("НомерТелефона"		, Объект.НомерТелефона);

	Если ПроверитьВозможностьИспользованияБонусов(ПараметрыОткрытия) Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаИспользованиеБонусовЗавершение", ФормаОплаты);
		ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаИспользованиеБонусов", Объект.ИмяВнешнейОбработки)
			, ПараметрыОткрытия
			, ФормаОплаты
			, УникальныйИдентификатор
			,,, ОписаниеОповещения
			, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);

	КонецЕсли;

КонецПроцедуры

&НаСервере	//	LNK 23.06.2021 09:48:36
Функция ОтменитьРучнуюОплатуБонуснымиБалламиНаСервере()	Экспорт

	ТаблицаОплатаИзменена = БонусныеБаллыВызовСервера.ОчиститьОплатуБонуснымиБаллами(Объект, "Товары", "ОплатаБонуснымиБаллами", БонусныеБаллыПовтИсп.УправляемыеТипыБонусов(), Объект.ОплатаБонуснымиБаллами.Количество() = 0);

	СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(Объект, "Товары", "СкидкиНаценки");
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

	ТабличноеПолеЧеков[0].Сумма = Объект.Товары.Итог("СуммаВсего");	//	LNK 23.06.2021 10:35:23

	Возврат ТаблицаОплатаИзменена;

КонецФункции

&НаКлиенте	//	LNK 26.02.2021 13:10:01
Функция КомандаИспользованиеБонусовЗавершение(ДанныеПрименения, ДополнительныеПараметры)	Экспорт

	Если ТипЗнч(ДанныеПрименения) = Тип("Структура") Тогда

		ПрименитьКОбъектуОплатуБонуснымиБаллами(ДанныеПрименения);
		ЗаписатьЧекККМПоВсемДанным(Объект.Организация, ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка"), Истина);

	КонецЕсли;

	ОтобразитьСкидки();
	ОбновитьИнформациюОбщейСуммы();

	ТабличноеПолеЧеков[0].Сумма = Объект.Товары.Итог("СуммаВсего");	//	LNK 23.06.2021 10:35:23

	Возврат ПолучитьПараметрыОплатыСуммы(ТабличноеПолеЧеков[0]);

КонецФункции

&НаСервере	//	LNK 19.06.2021 08:06:42
Процедура ПрименитьКОбъектуОплатуБонуснымиБаллами(ДанныеПрименения)

	ДанныеРаспределения = ПолучитьИзВременногоХранилища(ДанныеПрименения.АдресДанныеРаспределенияВоВременномХранилище);

	БонусныеБаллыВызовСервера.ПрименитьРезультатыРаспределенияОплатыБонуснымиБалламиКОбъекту(Объект, "Товары", "ОплатаБонуснымиБаллами", ДанныеРаспределения);

	Если НЕ (Объект.ОплатаБонуснымиБаллами.Количество() = 0 ИЛИ ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя, "ЗаказПокупателя")) Тогда

		БонусныеБаллыВызовСервера.ОчиститьСкидкиНачислениеБонусныхБаллов(Объект, "Товары", "СкидкиНаценки");

		БонусныеБаллыВызовСервера.ПересчитатьНачислениеБонусныхБаллов(Объект);

	КонецЕсли;

	СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(Объект, "Товары", "СкидкиНаценки");
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция СформироватьШтрихкодEAN13(КассаККМ)
	
	Возврат ПодключаемоеОборудованиеРТ.СформироватьШтрихкодСкидочногоКупона(, КассаККМ);
	
КонецФункции

&НаКлиенте
Процедура НапечататьПериодическийОтчетПоДатам(КассаККМ)

	Результат = Ложь;
	
	ПараметрыКассыККМ       = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	ПараметрыИнформации.ЗаголовокИнформации = "Помилка друку періодичного звіту щодо дат";
	
	Если ЗначениеЗаполнено(ИдентификаторУстройства)  Тогда

		ОписаниеОшибки = "";

		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда

		//	Подключение устройства
			Если ИдентификаторУстройства <> Неопределено Тогда

				Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(ЭтотОбъект,
				                                                                              ИдентификаторУстройства, ОписаниеОшибки
				);

				Если Результат Тогда

					ВходныеПараметры  = Новый Массив;
					ВыходныеПараметры = Неопределено;

					ВходныеПараметры.Добавить(НачалоМесяца(ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера())); //+HVOYA Mykhailo ТекущаяДата()
					ВходныеПараметры.Добавить(КонецМесяца(ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера())); //+HVOYA Mykhailo ТекущаяДата()
					
					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
					                                                        "PrintPReportDate",
					                                                        ВходныеПараметры,
					                                                        ВыходныеПараметры
					);

					Если НЕ Результат Тогда

						ПараметрыИнформации.ТекстИнформации = СтрЗаменить(
							"При знятті звіту на фіскальному реєстраторі сталася помилка.
							|%ОписаниеОшибки%
							|Звіт на фіскальному реєстраторі не сформовано."
							, "%ОписаниеОшибки%"
							, ВыходныеПараметры[1]
						);
						ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

					КонецЕсли;

					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(ЭтотОбъект,
					                                                                 ИдентификаторУстройства
					);

				Иначе

					ПараметрыИнформации.ТекстИнформации = "Під час підключення пристрою сталася помилка." + Символы.ПС + ОписаниеОшибки;
					ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

				КонецЕсли;

			КонецЕсли;

		Иначе

			ПараметрыИнформации.ТекстИнформации = "Попередньо необхідно вибрати робоче місце поточного сеансу з обладнанням, що підключається.";
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура РМК_Поиск(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("РМК_Поиск_Завершение", ЭтотОбъект);
	ПараметрыОткрытия  = Новый Структура("Магазин", Объект.Магазин);
	ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаПоиска", Объект.ИмяВнешнейОбработки), ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура РМК_Поиск_Завершение(ВыбранноеЗначение, ДополнительныеПараметры)	Экспорт

	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ДобавитьНоменклатуруВТабЧасть(ВыбранноеЗначение, Неопределено, Неопределено, 1, Ложь);
		
	КонецЕсли;

	ОбновитьФорму();
	УстановитьТекущийЭлемент();	//	LNK 13.09.2017 08:17:04

КонецПроцедуры


&НаСервере
Процедура ОбнулитьНаСервере()
	Объект.Продавец = Справочники.ФизическиеЛица.ПустаяСсылка();
КонецПроцедуры

&НаКлиенте
Процедура РМК_Блокировка(Команда)
	ЗаблокироватьРаботуПользователя();
	ОбновитьФорму();
КонецПроцедуры

&НаСервере
Процедура РМК_ВвестиКодКлиентаНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура РМК_ВвестиКодКлиента(Команда)

	КодЗначение = 0;

	Если ПолучитьИнтерактивноЧисло("Введіть магнітний код", КодЗначение, 0, Ложь, Истина) Тогда

		Если ЗначениеЗаполнено(КодЗначение)  Тогда

			СтруктураПараметровКлиента = ПолученМагнитныйКод(КодЗначение);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, КодЗначение);

		КонецЕсли; 

	КонецЕсли;

	РМК_ВвестиКодКлиентаНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДисконтПоОтложенномуЧеку()

	Если НЕ Объект.ДисконтнаяКарта.Пустая() ИЛИ ЗначениеЗаполнено(Объект.ВладелецДисконтнойКарты) Тогда

		ОперативныеДанныеПокупателя(Объект.ДисконтнаяКарта, Объект.ВладелецДисконтнойКарты);

	КонецЕсли; 

КонецПроцедуры

&НаСервере	//	LNK 20.09.2018 15:56:49
Функция ПолучитьМассивИзКолонки(ИмяТаблицы, ИмяКолонки)

	Возврат	Объект[ИмяТаблицы].Выгрузить().ВыгрузитьКолонку(ИмяКолонки);

КонецФункции // ПолучитьМассивИзКолонки()

// +HVOYA. 26.09.2016 14:00:46, Львова Е.А.
&НаКлиенте
Функция hiВыдатьСгенерироватьСкидочныйКупон(КассаККМ)
	
	ЭтоПогашениеКупона = Ложь;
	
	Ответ = Вопрос("Выдать клиенту скидочный купон?",РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если Объект.ВариантВыдачиКупона = ПредопределенноеЗначение("Перечисление.ВариантыВыдачиКупона.Сгенерировать") Тогда
			
			// генерация нового серийного номера в спр. Серийные номера, а затем в регистр Штрихкоды
			НовыйШК = СформироватьШтрихкодEAN13(КассаККМ); // 
			СерийныйНомер = hiЗаписатьШКСкидочномуКупону(Объект.НоменклатураСкидочногоКупона,НовыйШК);
						
			//hiНапечататьСкидочныйКупонКакШК(НовыйШК, КассаККМ); Процедура оставлена до того как нормально отладим её на фискальниках. Латышев
			hiНапечататьСкидочныйКупон(НовыйШК, КассаККМ);
			// + HVOYA 01.11.2016 15:41:10, Латышев А.А.
			СделатьДвиженияПоРеализацииКупона(Объект.НоменклатураСкидочногоКупона, СерийныйНомер);
			// - HVOYA 01.11.2016 15:41:10, Латышев А.А. 
			Возврат Ложь;
		ИначеЕсли Объект.ВариантВыдачиКупона = ПредопределенноеЗначение("Перечисление.ВариантыВыдачиКупона.СканироватьКодШК") Тогда

			ПараметрыОткрытия = Новый Структура("НоменклатураСкидочногоКупона", Объект.НоменклатураСкидочногоКупона); 
			КодЗначение = ОткрытьФормуМодально(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВводаСкидочногоКупона", Объект.ИмяВнешнейОбработки), ПараметрыОткрытия);
			
			Если ЗначениеЗаполнено(КодЗначение)  Тогда
				СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(КодЗначение);
				Если СтруктураПараметровКлиента.Свойство("ДобавитьСерийныеНомера") Тогда
					ТекстСообщения = "";
					Результат = hiПроверимСННаРеализацию(СтруктураПараметровКлиента.ДобавитьСерийныеНомера, ТекстСообщения);
					
					Если Результат Тогда
						// + HVOYA 01.11.2016 15:41:10, Латышев А.А.
						hiНапечататьСкидочныйКупон(КодЗначение, КассаККМ);
						СделатьДвиженияПоРеализацииКупона(Объект.НоменклатураСкидочногоКупона, СтруктураПараметровКлиента.ДобавитьСерийныеНомера.СерийныйНомер);
						// - HVOYA 01.11.2016 15:41:10, Латышев А.А. 
					Иначе
						ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ТекстСообщения);
						Возврат Истина;
					КонецЕсли; 
					Возврат Ложь;
				ИначеЕсли СтруктураПараметровКлиента.Свойство("ДобавитьТоварнуюПозицию") Тогда
					ЭтоКупон = hiПроверимЭтоКупонИлиНет(СтруктураПараметровКлиента.ДобавитьТоварнуюПозицию.Номенклатура);
					Если Не ЭтоКупон Тогда

						СтрокаСообщения = СтрЗаменить("Цей штрихкод %1% не є купоном", "%1%", КодЗначение);
						ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(СтрокаСообщения);
						Возврат Истина;

					КонецЕсли;
					hiНапечататьСкидочныйКупон(КодЗначение, КассаККМ);
					СделатьДвиженияПоРеализацииКупона(Объект.НоменклатураСкидочногоКупона);
					Возврат Ложь;
				Иначе 

					ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
						"Помилка видачі купона знижок"
						, СтрЗаменить(
							"Цей штрих-код %1% не зареєстрований в базі або не є купоном знижок! Відкладіть його та передайте адміністратору!"
							, "%1%"
							, КодЗначение
						)
					);
					Возврат Истина;

				КонецЕсли; 

			КонецЕсли; 

		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;

КонецФункции
 
// + HVOYA 31.10.2016 14:19:41, Латышев А.А.
&НаСервереБезКонтекста
Функция hiПолучитьСтруктуруРеквизитовНоменклатуры(Номенклатура)
	Возврат ОбщегоНазначенияРТ.ПолучитьЗначенияРеквизитовОбъекта(Номенклатура, Новый Структура("ИспользоватьСерийныеНомера, ТипНоменклатуры, Представление"));
КонецФункции // ()
// - HVOYA 24.10.2016 21:55:09, Латышев А.А. 

&НаКлиенте
Процедура hiПодключаемый_КомандаСкидкиПодарочныйСертификат()
	ЭтоНаценка = Ложь;
	Если ВозможностьРаботыСРучнымиСкидкамиВЧеке() Тогда
        
		СуммаБезАвтоматическойСкидки =ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСуммуДокументаБезПодарочныхСертификатов(Объект) + Объект.Товары.Итог("СуммаРучнойСкидки");
		СуммаРучнойСкидкиНаценки     = Объект.Товары.Итог("СуммаРучнойСкидки");
        
        // +HVOYA. 24.02.2017 16:36:43, Львова Е.А.
        // отменим любые суммы ручных скидки, если они есть на момент ввода сертификатов
        Для каждого Стр Из Объект.Товары Цикл              
            hi_ОтменитьРучныеСкидкиВСтроке(Стр);
            Стр.ПричинаРучнойСкидки = ПредопределенноеЗначение("Справочник.ПричиныРучнойСкидки.ПодарочныйСертификат");
            СуммаРучнойСкидкиНаценки = 0;
            //Объект.ПогашениеПодарочныхСертификатов.Очистить();
        КонецЦикла;        
        // -HVOYA. 24.02.2017 16:36:45, Львова Е.А.

       
		Знак = ?(ЭтоНаценка, -1, 1);
		ЧислоВвода = Знак * СуммаРучнойСкидкиНаценки;
		ЧислоВвода = ?(ЧислоВвода > 0, ЧислоВвода, 0);
						
		МаксимальнаяСуммаСкидки = ?(ЭтоНаценка, 0, СуммаБезАвтоматическойСкидки);
		
		// + HVOYA 09.11.2016 11:50:30, Латышев А.А.
		ПараметрыОткрытия = Новый Структура;
		
		МассивСерийныхНомеров = Новый Массив;
		// +HVOYA. 24.02.2017 18:19:08, Львова Е.А.
        МассивНеуникальныхСертификатов = Новый Массив;
        // -HVOYA. 24.02.2017 18:43:52, Львова Е.А.
        
        Для каждого СтрокаТЧ Из Объект.ПогашениеПодарочныхСертификатов Цикл
            Если ЗначениеЗаполнено(СтрокаТЧ.СерийныйНомер) Тогда
                МассивСерийныхНомеров.Добавить(СтрокаТЧ.СерийныйНомер);
            // +HVOYA. 24.02.2017 18:44:02, Львова Е.А.
            Иначе
                МассивНеуникальныхСертификатов.Добавить(СтрокаТЧ.ПодарочныйСертификат);
            // -HVOYA. 24.02.2017 18:44:09, Львова Е.А.
            КонецЕсли;
        КонецЦикла;
		ПараметрыОткрытия.Вставить("МассивСерийныхНомеров", МассивСерийныхНомеров);
		
		МассивИспользованныхСерийныхНомеров = Новый Массив;
	
		ПараметрыОткрытия.Вставить("МассивИспользованныхСерийныхНомеров", МассивИспользованныхСерийныхНомеров);
		ПараметрыОткрытия.Вставить("МассивНеуникальныхСертификатов", МассивНеуникальныхСертификатов);
        // -HVOYA. 24.02.2017 18:19:12, Львова Е.А.

		Результат = ОткрытьФормуМодально(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВводаСерийныхНомеровПогашение", Объект.ИмяВнешнейОбработки), ПараметрыОткрытия, УникальныйИдентификатор);
        
        Если Результат = Неопределено Тогда
            // ни одного сертификата не отсканировали, а просто закрыли форму. Отменяем все ручные скидки в документе и очищаем ТЧ Погашение.
            
            // +HVOYA. 06.02.2017 13:14:51, Львова Е.А.
            Отбор = Новый Структура("ПричинаРучнойСкидки", ПредопределенноеЗначение("Справочник.ПричиныРучнойСкидки.ПодарочныйСертификат"));
            МассивСтрок = Объект.Товары.НайтиСтроки(Отбор);
            Для каждого Стр Из МассивСтрок Цикл              
                hi_ОтменитьРучныеСкидкиВСтроке(Стр);
                СуммаРучнойСкидкиНаценки = 0;
                ЧислоВвода = 0;
                Объект.ПогашениеПодарочныхСертификатов.Очистить();
            КонецЦикла;
            // -HVOYA. 06.02.2017 13:17:05, Львова Е.А.
            Возврат;
            
        Иначе
            // какие-то введенные данные форма ввода серийных номеров нам вернула
            Результат = hiПолучитьИзВременногоХранилища(Результат);
            
            // +HVOYA. 06.02.2017 13:14:51, Львова Е.А.
            // 1. форму ввода сертификатов закрыли без отсканированных сертификатов. отменяем все ручные скидки в документе.
            Если Результат.ПодарочныйСертификат.Количество() = 0 Тогда
                Отбор = Новый Структура("ПричинаРучнойСкидки", ПредопределенноеЗначение("Справочник.ПричиныРучнойСкидки.ПодарочныйСертификат"));
                МассивСтрок = Объект.Товары.НайтиСтроки(Отбор);
                Для каждого Стр Из МассивСтрок Цикл              
                    hi_ОтменитьРучныеСкидкиВСтроке(Стр);
                    СуммаРучнойСкидкиНаценки = 0;
                    ЧислоВвода = 0;
                    Объект.ПогашениеПодарочныхСертификатов.Очистить();
                КонецЦикла;
                Возврат;
            КонецЕсли;
            // -HVOYA. 06.02.2017 13:17:05, Львова Е.А.
            
            // 2. отсканированные сертификаты не прошли проверки погашения
            Если Результат.Отказ Тогда
                ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Помилки погашення подарункових сертифікатів", Результат.ТекстОшибки);
                
                Отбор = Новый Структура("ПричинаРучнойСкидки", ПредопределенноеЗначение("Справочник.ПричиныРучнойСкидки.ПодарочныйСертификат"));
                МассивСтрок = Объект.Товары.НайтиСтроки(Отбор);
                Для каждого Стр Из МассивСтрок Цикл              
                    hi_ОтменитьРучныеСкидкиВСтроке(Стр);
                    СуммаРучнойСкидкиНаценки = 0;
                    ЧислоВвода = 0;
                    Объект.ПогашениеПодарочныхСертификатов.Очистить();
                КонецЦикла;
                Возврат;                             
            КонецЕсли;
            
            // 3. сертификаты были введены и прошли проверки. идем дальше 
            ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
            // определяем окончательную сумму скидки
            Для каждого Эл Из Результат.ПодарочныйСертификат Цикл
                ЧислоВвода = ЧислоВвода + Эл.Номинал;
            КонецЦикла;
            
            // +HVOYA. 08.02.2017 17:54:41, Львова Е.А.
            //Разница = ЧислоВвода - Объект.Товары.Итог("Сумма");
            // на случай, если ранее были рассчитаны автоматические скидки
            Разница = ЧислоВвода - Объект.Товары.Итог("Сумма") - Объект.Товары.Итог("СуммаАвтоматическойСкидки");
            // -HVOYA. 08.02.2017 17:54:49, Львова Е.А.
            
            // 3.1 недобор товара   
            Если Разница > 0  Тогда
                Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                "Втрати покупця від недобору товару становлять – %1 грн.",
                Формат(Разница, "ЧЦ=15; ЧДЦ=2; ЧГ=3,0"));
                
                ОтветПользователя = ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМК(Текст, "Покупець згоден?", "Нет");
                
                Если ВРЕГ(ОтветПользователя) = "НЕТ" Тогда
                    ЧислоВвода = 0;
                    // +HVOYA. 14.02.2017 14:12:52, Львова Е.А.
                    Отбор = Новый Структура("ПричинаРучнойСкидки", ПредопределенноеЗначение("Справочник.ПричиныРучнойСкидки.ПодарочныйСертификат"));
                    МассивСтрок = Объект.Товары.НайтиСтроки(Отбор);
                    Для каждого Стр Из МассивСтрок Цикл              
                        hi_ОтменитьРучныеСкидкиВСтроке(Стр);
                        СуммаРучнойСкидкиНаценки = 0;
                    КонецЦикла;
                    
                    Объект.ПогашениеПодарочныхСертификатов.Очистить();
                    СуммаНоминалов = 0;
                    Для каждого Эл Из Результат.ПодарочныйСертификат Цикл
                        СтрокаТаблицыПогашений = Объект.ПогашениеПодарочныхСертификатов.Добавить();
                        СтрокаТаблицыПогашений.ПодарочныйСертификат = Эл.ПодарочныйСертификат;
                        СтрокаТаблицыПогашений.СерийныйНомер = Эл.СерийныйНомер;
                        СтрокаТаблицыПогашений.Организация = Объект.Организация;
                        СуммаНоминалов = СуммаНоминалов + Эл.Номинал;
                    КонецЦикла;
                    РМК1_СуммаВЧеке = Формат(СуммаНоминалов,"ЧДЦ=2; ЧРД=.")+" грн";
                    Возврат;
                    // -HVOYA. 14.02.2017 14:12:55, Львова Е.А.
                КонецЕсли;
            КонецЕсли;
            
        КонецЕсли;        
        
        // 3.2 всё ок, недобора нет или клиент с ним согласен, сумма скидки равна сумме сертификатов
		СуммаРучнойСкидкиНаценки = ЧислоВвода * Знак;
		Объект.СкидкиНаценки.Очистить();
		НазначитьРучнуюСкидку(СуммаРучнойСкидкиНаценки);
        
        // +HVOYA. 24.02.2017 19:02:31, Львова Е.А.
        Объект.ПогашениеПодарочныхСертификатов.Очистить();
        СуммаНоминалов = 0;         
        // -HVOYA. 24.02.2017 19:02:36, Львова Е.А.  
        Для каждого Эл Из Результат.ПодарочныйСертификат Цикл
            СтрокаТаблицыПогашений = Объект.ПогашениеПодарочныхСертификатов.Добавить();
			СтрокаТаблицыПогашений.ПодарочныйСертификат = Эл.ПодарочныйСертификат;
			СтрокаТаблицыПогашений.СерийныйНомер = Эл.СерийныйНомер;
			СтрокаТаблицыПогашений.Организация = Объект.Организация;
            СуммаНоминалов = СуммаНоминалов + Эл.Номинал;
		КонецЦикла; 
        РМК1_СуммаВЧеке = Формат(СуммаНоминалов,"ЧДЦ=2; ЧРД=.")+" грн";

		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		ОбновитьФорму();
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
		// - HVOYA 09.11.2016 11:50:30, Латышев А.А. 
		
	КонецЕсли;

КонецПроцедуры // ИзменитьПроцентРучнойСкидкиВСтроке()

// +HVOYA. 08.02.2017 16:42:38, Львова Е.А.
&НаКлиенте
Процедура hi_ОтменитьРучныеСкидкиВСтроке(СтрокаТабличнойЧасти)
    
	Если ВозможностьРаботыСРучнымиСкидкамиВСтроке() Тогда
        
        СтрокаТабличнойЧасти.ПричинаРучнойСкидки = ПредопределенноеЗначение("Справочник.ПричиныРучнойСкидки.ПустаяСсылка");
		СтрокаТабличнойЧасти.СуммаРучнойСкидки = 0;
        СтрокаТабличнойЧасти.ПроцентСкидки = 0;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
        
        Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект.Товары, Объект.ЦенаВключаетНДС);
		
		ОтобразитьСкидки();
        ОбновитьИнформациюОбщейСуммы();
    КонецЕсли;

КонецПроцедуры
// -HVOYA. 08.02.2017 16:42:44, Львова Е.А.

//+HVOYA Mykhailo : печать последнего чека
&НаКлиенте
Процедура РМК_ПечатьПоследнегоЧека(Команда)
	МассивЧеков = Новый Массив;
	ПечатьПоследнегоЧекаНаСервере(МассивЧеков);
    Если МассивЧеков.Количество() <> 0 Тогда
		НапечататьТоварныйЧекНаФР(МассивЧеков);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ПечатьПоследнегоЧекаНаСервере(МассивСсылокЧеков)

	// 1. находим последний пробитый чек
	//МассивЧеков = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекККМ.Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Проведен = ИСТИНА
	|	И ЧекККМ.КассаККМ = &КассаККМ
	|	И ЧекККМ.СтатусЧекаККМ = &СтатусЧекаККМ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧекККМ.Дата УБЫВ";
	Запрос.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
	Запрос.УстановитьПараметр("СтатусЧекаККМ",Перечисления.СтатусыЧековККМ.Пробитый);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСсылокЧеков.Добавить(Выборка.Ссылка);
	КонецЦикла; 
	

	
	
КонецПроцедуры

&НаСервере
Функция hiПолучитьИзВременногоХранилища(Результат)

	ТаблицаСертификатов = ПолучитьИзВременногоХранилища(Результат);
	ТаблицаСертификатов.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	НомерСтроки = 1;
	Для каждого Строка Из ТаблицаСертификатов Цикл
		Строка.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла; 
	
	ТекстОшибки = "";
	Отказ = Ложь;
	МаркетинговыеАкцииСерверПривилегированный.ПроверитьДвиженияСерийныхНомеровДляПогашения(Объект,Ложь,Истина,ТаблицаСертификатов,ТаблицаСертификатов,Отказ,ТекстОшибки,ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера());
	
	МассивДанных = Новый Массив;
	Для Каждого СтрЛог из ТаблицаСертификатов Цикл
		стСтрокаТаблицы = Новый Структура;
		Для Каждого ИмяКолонки Из ТаблицаСертификатов.Колонки Цикл
			стСтрокаТаблицы.Вставить(ИмяКолонки.Имя, СтрЛог[ИмяКолонки.Имя]);
		КонецЦикла;
        
        МассивДанных.Добавить(стСтрокаТаблицы);
    КонецЦикла;
        
    Возврат Новый Структура("Отказ, ТекстОшибки, ПодарочныйСертификат",Отказ ,ТекстОшибки, МассивДанных);

КонецФункции

&НаСервереБезКонтекста
Функция hiПроверимЭтоКупонИлиНет(Номенклатура)

	ЗначениеРеквизитов = ОбщегоНазначенияРТ.ПолучитьЗначенияРеквизитовОбъекта(Номенклатура, Новый Структура("ИспользоватьСерийныеНомера, ТипНоменклатуры, Представление"));
	
	Если Не ЗначениеРеквизитов.ИспользоватьСерийныеНомера И ЗначениеРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.СкидочныйКупон") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // hiПроверимЭтоКупонИлиНет(СтруктураПараметровКлиента.ДобавитьТоварнуюПозицию.Номенклатура)()

&НаКлиенте
Процедура РМК_редактированиетаблицы(Команда)
	
	Если ТекущийЭлемент = Элементы.ПоискШК Тогда // переходим на редактирование таблицы товаров
		ТекущийЭлемент = Элементы.Товары;
	Иначе
		УстановитьТекущийЭлемент();	//	LNK 13.09.2017 08:17:04
		ПоискШК = "";
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте	// HVOYA. 24.11.2016 16:57:52, Львова Е.А.
Процедура УдалитьПозициюИзПогашениеСкидочныхКупонов(СтрокаТоваров)
	
	Если НЕ НаборПравИНастроек.ПродажиАктивированы Тогда	//	LNK 27.09.2019 13:44:39

		СписокСтрок = Объект.ПогашениеСкидочныхКупонов.НайтиСтроки(
			Новый Структура(
				"СкидочныйКупон"
				, СтрокаТоваров.Номенклатура));

		Для каждого СтрокаУдалить Из СписокСтрок Цикл

			Объект.ПогашениеСкидочныхКупонов.Удалить(СтрокаУдалить);

		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте	// HVOYA 30.11.2016 14:18:45, Латышев А.А.
Процедура УдалитьПозициюИзСерийныеНомера(СтрокаТоваров)

	СписокСтрок = Объект.СерийныеНомера.НайтиСтроки(
		Новый Структура(
			"КлючСвязиСерийныхНомеров"
			, СтрокаТоваров.КлючСвязиСерийныхНомеров));

	Для каждого СтрокаУдалить Из СписокСтрок Цикл

		Объект.СерийныеНомера.Удалить(СтрокаУдалить);

	КонецЦикла; 

КонецПроцедуры

#Область ПечатьШтрихкодаКупона

&НаКлиенте
Процедура hiНапечататьСкидочныйКупонКакШК(Штрихкод, КассаККМ)

	ОписаниеОшибки = "";
	ПараметрыКассыККМ = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	
	ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(ЭтотОбъект,ИдентификаторУстройстваФР, ОписаниеОшибки);
	
	Если Результат Тогда
		
		ВходныеПараметры  = Новый Массив;
		ВыходныеПараметры = Неопределено;
		ВходныеПараметры.Вставить(0, "EAN13");
		ВходныеПараметры.Вставить(1, Штрихкод);
		НомерСекции = 1;
		
		// Печатаем чек.
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР, "PrintBarCode", ВходныеПараметры, ВыходныеПараметры);
		
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(ЭтотОбъект, ИдентификаторУстройстваФР);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура hiНапечататьСкидочныйКупон(Штрихкод, КассаККМ)
	ОписаниеОшибки = "";
	ПараметрыКассыККМ = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	
	ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(ЭтотОбъект,ИдентификаторУстройстваФР, ОписаниеОшибки);
	
	Если Результат Тогда
		ВходныеПараметры  = Новый Массив();
		ТекстШК = "СКИДОЧНЫЙ КУПОН №" + Символы.ПС + Штрихкод;  
		ВходныеПараметры.Добавить(ТекстШК);
		ВыходныеПараметры = Неопределено;
		РезультатФР = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР,"PrintText", ВходныеПараметры, ВыходныеПараметры);

		Если НЕ РезультатФР Тогда

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
				"Під час друку купона виникла помилка"
				, СтрЗаменить(
					"%ОписаниеОшибки%"
					, "%ОписаниеОшибки%"
					, ВыходныеПараметры[1]
				)
			);

		КонецЕсли;
		
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(ЭтотОбъект, ИдентификаторУстройстваФР);
		
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

&НаКлиенте	// HVOYA 30.11.2016 14:18:45, Латышев А.А. 
Функция УдалитьСерийныеНомераПодарочныхСертификатов(СтрокаТЧ, Количество)
	
	Номенклатура = СтрокаТЧ.Номенклатура;
	Результат    = Ложь;

	Если ПроверитьИспользованиеСерийныхНомеров(Номенклатура) Тогда

		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("МассивСерийныхНомеров"    , ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(СтрокаТЧ.КлючСвязиСерийныхНомеров, Объект.СерийныеНомера));
		ПараметрыОткрытия.Вставить("Номенклатура"             , Номенклатура);
		ПараметрыОткрытия.Вставить("ПредставлениеНоменклатуры", Строка(Номенклатура));
		ПараметрыОткрытия.Вставить("УдалениеСертификата"      , Истина);

		НовыеСерийныеНомера = ОткрытьФормуМодально(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВводаСерийныхНомеров", Объект.ИмяВнешнейОбработки), ПараметрыОткрытия, ЭтотОбъект);

		Если ТипЗнч(НовыеСерийныеНомера) = Тип("Массив") Тогда

			Результат = Истина;
			НовыйКлючСвязи = ОбработкаТабличнойЧастиТоварыКлиент.ДобавитьСерийныеНомераВТабличнуюЧасть(Объект.СерийныеНомера, НовыеСерийныеНомера, СтрокаТЧ.КлючСвязиСерийныхНомеров);
			Количество = НовыеСерийныеНомера.Количество()

		КонецЕсли;

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция hiЗаписатьШКСкидочномуКупону(НоменклатураСкидочногоКупона,НовыйШК)
	
	НовыйСерийныйНомер = Справочники.СерийныеНомера.СоздатьЭлемент();
	НовыйСерийныйНомер.Владелец = НоменклатураСкидочногоКупона;
	НовыйСерийныйНомер.Наименование = НовыйШК;
	НовыйСерийныйНомер.Записать();
	
	МенеджерЗаписи = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Владелец = НовыйСерийныйНомер.Ссылка;
	МенеджерЗаписи.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
	МенеджерЗаписи.Штрихкод = НовыйШК;
	МенеджерЗаписи.Записать();
	
	Возврат НовыйСерийныйНомер.Ссылка;
КонецФункции

&НаСервере
Функция СделатьДвиженияПоРеализацииКупона(НоменклатураСкидочногоКупона, СерийныйНомер = Неопределено)
	
	МенеджерЗаписи = РегистрыСведений.ДвиженияСерийныхНомеровКупонов.СоздатьНаборЗаписей();
	МенеджерЗаписи.Отбор.ЧекККМ.Установить(ЧекККМВОбработке);
	МенеджерЗаписи.Прочитать();
	НоваяЗапись = МенеджерЗаписи.Добавить();
	НоваяЗапись.Купон = НоменклатураСкидочногоКупона;
	НоваяЗапись.АналитикаХозяйственнойОперации = Объект.АналитикаХозяйственнойОперации;
	НоваяЗапись.ЧекККМ = ЧекККМВОбработке;
	НоваяЗапись.Дата = Объект.Дата;
	НоваяЗапись.Количество = 1;
	Если Не СерийныйНомер = Неопределено Тогда
		НоваяЗапись.СерийныйНомер = СерийныйНомер;
	КонецЕсли; 
	НоваяЗапись.Магазин = Объект.Магазин;
	МенеджерЗаписи.Записать();
	
КонецФункции

&НаСервереБезКонтекста	//	LNK 18.09.2018 13:58:31
Функция ПолучитьДанныеКупона(Номенклатура, СерийныйНомер)

	ДанныеКупона = Новый Структура(
		"ЯвляетсяКупоном, ТипНоменклатуры, ИспользоватьСерийныеНомера, НоминалКупона"
		, Ложь
		, Перечисления.ТипыНоменклатуры.ПустаяСсылка()
		, Ложь
		, 0);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА ТаблицаСправочник.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.СкидочныйКупон)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяКупоном,
	|	ТаблицаСправочник.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаСправочник.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
	|	ЕСТЬNULL(ТаблицаРегистра.Сумма, 0) КАК НоминалКупона
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаСправочник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СерийныеНомераДляАкций КАК ТаблицаРегистра
	|		ПО (ТаблицаРегистра.СерийныйНомер = &СерийныйНомер)
	|			И (НЕ ТаблицаРегистра.Использован)
	|			И (НЕ ТаблицаРегистра.Сумма = 0)
	|ГДЕ
	|	ТаблицаСправочник.Ссылка = &Номенклатура
	|	И ТаблицаСправочник.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.СкидочныйКупон)"
	);
	Запрос.УстановитьПараметр("Номенклатура" , Номенклатура);
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();

		ЗаполнитьЗначенияСвойств(ДанныеКупона, Выборка);

	КонецЕсли;

	Возврат ДанныеКупона;

КонецФункции // ПолучитьДанныеКупона()

&НаСервереБезКонтекста
Функция hiПроверимСННаРеализацию(ДобавитьСерийныеНомера, ТекстСообщения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДвиженияСерийныхНомеровКупонов.АналитикаХозяйственнойОперации,
		|	ДвиженияСерийныхНомеровКупонов.Дата КАК Дата,
		|	ДвиженияСерийныхНомеровКупонов.ЧекККМ.Магазин как Магазин
		|ИЗ
		|	РегистрСведений.ДвиженияСерийныхНомеровКупонов КАК ДвиженияСерийныхНомеровКупонов
		|ГДЕ
		|	ДвиженияСерийныхНомеровКупонов.Купон = &Купон
		|	И ДвиженияСерийныхНомеровКупонов.СерийныйНомер = &СерийныйНомер
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Купон", ДобавитьСерийныеНомера.Номенклатура);
	Запрос.УстановитьПараметр("СерийныйНомер", ДобавитьСерийныеНомера.СерийныйНомер);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	Если Выборка.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров Тогда
		ТекстСообщения = "Купон " + ДобавитьСерийныеНомера.Номенклатура + " с номером "+ ДобавитьСерийныеНомера.СерийныйНомер + " уже был реализован "+ 
		Выборка.Дата + " в магазине " + Выборка.Магазин;
		Возврат Ложь;
	ИначеЕсли Выборка.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.ПогашениеПодарочныхСертификатов Тогда
		ТекстСообщения = "Купон " + ДобавитьСерийныеНомера.Номенклатура + " с номером "+ ДобавитьСерийныеНомера.СерийныйНомер + " уже был погашен "+ 
		Выборка.Дата + " в магазине " + Выборка.Магазин;
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции  

#Область ПроверкаРеквизитаЗаказПокупателя	//	LNK 27.05.2020 07:39:31

&НаСервере
Функция ЗаказПокупателяОплачен(ЗаказПокупателя)
	
	ЗаказОплачен = Ложь;

	Если ЗаказПокупателяЗаполнен(ЗаказПокупателя, "ЗаказПокупателя") Тогда

		Попытка
		
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаДокумента.СтатусОплаты КАК СтатусОплаты
			|ИЗ
			|	Документ.ЗаказПокупателя КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.Ссылка = &ЗаказПокупателя
			|	И ТаблицаДокумента.СтатусОплаты = ЗНАЧЕНИЕ(Перечисление.СтатусОплаты.Оплачен)"
			);
			Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
			
			Результат = Запрос.Выполнить();

			ЗаказОплачен = НЕ Результат.Пустой();
		
		Исключение

			ЗафиксироватьОшибку(СокрЛП(ЗаказПокупателя) + Символы.ПС + ОписаниеОшибки(), "ЗаказПокупателяОплачен");	//	LNK 04.09.2018 14:16:54

		КонецПопытки;

	КонецЕсли;

	Возврат ЗаказОплачен;
	
КонецФункции

&НаСервереБезКонтекста	//	LNK 03.11.2022 05:51:29
Функция ВернутьСуммуПослеплатыИнтернетЗаказа(ЗаказПокупателя, ДокументПродажи)

	СуммаПослеплаты = 0;

	Если ЗаказПокупателяЗаполнен(ЗаказПокупателя, "ЗаказПокупателя") Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СУММА(ТаблицаОплата.Сумма) КАК Сумма
		|ИЗ
		|	Документ.ЧекККМ.Оплата КАК ТаблицаОплата
		|ГДЕ
		|	ТаблицаОплата.Ссылка = &ДокументПродажи
		|	И ТаблицаОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Послеплата)"
		);
		Запрос.УстановитьПараметр("ДокументПродажи", ДокументПродажи);

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда

			СуммаПослеплаты = Выборка.Сумма;

		КонецЕсли;

	КонецЕсли;

	Возврат СуммаПослеплаты;

КонецФункции

&НаСервереБезКонтекста	//	LNK 03.04.2020 11:23:05
Функция ВернутьСуммуПредоплатыИнтернетЗаказа(ЗаказПокупателя, ЭтоВозврат, ДокументПродажи)
	
	СуммаПредоплаты = 0;

	Если РозничныеПродажиСерверПовтИсп.ЭтоУзелИнтернетМагазина() И ЭтоВозврат Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СУММА(ТаблицаОплата.Сумма) КАК Сумма
		|ИЗ
		|	Документ.ЧекККМ.Оплата КАК ТаблицаОплата
		|ГДЕ
		|	ТаблицаОплата.Ссылка = &ДокументПродажи
		|	И ТаблицаОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Предоплата)"
		);
		Запрос.УстановитьПараметр("ДокументПродажи", ДокументПродажи);

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда

			СуммаПредоплаты = Выборка.Сумма;

		КонецЕсли;

	Иначе

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаДокумента.СуммаОплаты + ВЫБОР
		|		КОГДА ТаблицаДокумента.СуммаДоставкиОплачена
		|			ТОГДА ТаблицаДокумента.СуммаДоставки
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаОплаты
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &ЗаказПокупателя"
		);
		Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда

			СуммаПредоплаты = Выборка.СуммаОплаты;

		КонецЕсли;

	КонецЕсли;
	
	Возврат СуммаПредоплаты;

КонецФункции

&НаКлиентеНаСервереБезКонтекста	//	LNK 20.08.2020 06:13:57
Функция ЗаказПокупателяЗаполнен(ЗаказПокупателя, ИмяТипа = "")	//	ИмяТипа = "ЗаказПокупателя" или "СчетНаОплатуПокупателю"

	ЗаказЗаполнен = ЗначениеЗаполнено(ЗаказПокупателя);

	Если ЗаказЗаполнен И НЕ ПустаяСтрока(ИмяТипа) Тогда

		ЗаказЗаполнен = ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка." + ИмяТипа);

	КонецЕсли;

	Возврат ЗаказЗаполнен;

КонецФункции

#КонецОбласти

//+HVOYA Mykhailo : функции для печати чека на принтер
&НаСервере
Функция ПечатьТоварногоЧекаДляПД(МассивОбъектов)
		
	КодЯзыкаПечать = "uk";

	ВыводитьУпаковки   = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = "Чек ККМ";
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЧеККМ_ТоварныйЧекДляПД";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Магазин КАК Магазин,
	|	Документ.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	ВЫБОР
	|		КОГДА Документ.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Документ.Организация)
	|		ИНАЧЕ ""ФОП "" + ВЫБОР
	|				КОГДА ЕСТЬNULL(ТаблицаФИО.Фамилия, """") = """"
	|					ТОГДА """"
	|				ИНАЧЕ ТаблицаФИО.Фамилия + "" "" + ВЫБОР
	|						КОГДА ЕСТЬNULL(ТаблицаФИО.Имя, """") = """"
	|							ТОГДА """"
	|						ИНАЧЕ (ВЫРАЗИТЬ(ТаблицаФИО.Имя КАК СТРОКА(1))) + "". ""
	|					КОНЕЦ + ВЫБОР
	|						КОГДА ЕСТЬNULL(ТаблицаФИО.Отчество, """") = """"
	|							ТОГДА """"
	|						ИНАЧЕ (ВЫРАЗИТЬ(ТаблицаФИО.Отчество КАК СТРОКА(1))) + "".""
	|					КОНЕЦ
	|			КОНЕЦ + """"
	|	КОНЕЦ КАК НаименованиеОрганизации,
	|	ВЫБОР
	|		КОГДА Документ.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрганизацияЮридическоеЛицо,
	|	Документ.Организация КАК Организация,
	|	Документ.СуммаДокумента КАК СуммаДокумента,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Магазин) КАК МагазинПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ОрганизацияПредставление,
	|	Документ.Ответственный.ФизЛицо КАК Ответственный,
	|	Документ.КассаККМ КАК КассаККМ,
	|	Документ.КассаККМ.ШиринаЛенты КАК ШиринаЛенты,
	|	Документ.НомерЧекаККМ КАК НомерЧекаККМ,
	|	ЕСТЬNULL(ТаблицаКонтакты.Представление, """") КАК АдресМагазина
	|ИЗ
	|	Документ.ЧекККМ КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(, ) КАК ТаблицаФИО
	|		ПО Документ.Организация = ТаблицаФИО.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины.КонтактнаяИнформация КАК ТаблицаКонтакты
	|		ПО Документ.Магазин = ТаблицаКонтакты.Ссылка
	|			И (ТаблицаКонтакты.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресМагазина))
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|	И Документ.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОплата.ВидОплаты.ТипОплаты КАК ТипОплаты,
	|	ТаблицаОплата.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаОплата.ВидОплаты.ТипОплаты) КАК ПредставлениеТипОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|					И ТаблицаОплата.ВидОплаты.ТипОплаты <> ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|				ТОГДА ТаблицаОплата.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезналичныхОплат,
	|	СУММА(ТаблицаОплата.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ТаблицаОплата
	|ГДЕ
	|	ТаблицаОплата.Ссылка В(&МассивОбъектов)
	|	И ТаблицаОплата.Ссылка.Проведен
	|	И НЕ(ТаблицаОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				И ТаблицаОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплата.Ссылка,
	|	ТаблицаОплата.ВидОплаты.ТипОплаты
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(ТаблицаОплата.Сумма) = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.Представление КАК Товар,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Упаковка.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка"
	);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	Результаты = Запрос.ВыполнитьПакет();

	Макет = УправлениеПечатью.ПолучитьМакет("Обработка.РМК.ТоварныйЧекДляПД",КодЯзыкаПечать);

	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнойЧастиОплата = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоТабличнымЧастям = Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ПервыйДокумент = Истина;

	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ШиринаЛенты = ВыборкаПоДокументам.ШиринаЛенты;
		Если ШиринаЛенты = 0 Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"У каси %1 згідно документу (%2) не задана ширина стрічки",
				ВыборкаПоДокументам.КассаККМ,
				ВыборкаПоДокументам.Ссылка
			);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст);
				
			Продолжить;
		КонецЕсли;
		
		ОбластьШапкаЧека         = Макет.ПолучитьОбласть("ШапкаЧека|_"         + ШиринаЛенты);
		ОбластьТелоЧека          = Макет.ПолучитьОбласть("ТелоЧека|_"          + ШиринаЛенты);
		ОбластьТелоЧекаСкидка    = Макет.ПолучитьОбласть("ТелоЧекаСкидка|_"    + ШиринаЛенты);
		ОбластьТелоЧекаОтступ    = Макет.ПолучитьОбласть("ТелоЧекаОтступ|_"    + ШиринаЛенты);
		ОбластьПодвалЧека        = Макет.ПолучитьОбласть("ПодвалЧека|_"        + ШиринаЛенты);
		ОбластьПодвалЧекаОплата  = Макет.ПолучитьОбласть("ПодвалЧекаОплата|_"  + ШиринаЛенты);
		ОбластьПодвалЧекаОстаток = Макет.ПолучитьОбласть("ПодвалЧекаОстаток|_" + ШиринаЛенты);
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ВыборкаПоДокументам.ЭтоВозврат Тогда
			СинонимДокумента   = "ЧЕК (Повернення)";
		Иначе
			СинонимДокумента   = "ЧЕК";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьШапкаЧека.Параметры.Заголовок = СинонимДокумента + Символы.ПС + " №" + РеквизитыДокумента.Номер + "  від  " + Формат(РеквизитыДокумента.Дата,"ДФ=dd.MM.yyyy");
		//ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента, КодЯзыкаПечать);

		Если ВыборкаПоДокументам.ЭтоВозврат Тогда
			Попытка
				ОбластьШапкаЧека.Параметры.чекпродажидлявозврата =  ВернутьНадписьЧекПродажи(ВыборкаПоДокументам.Ссылка);
			Исключение
				ЗафиксироватьОшибку(ОписаниеОшибки(), "ПечатьТоварногоЧекаДляПД");	//	LNK 04.09.2018 14:16:54
			КонецПопытки;
		КонецЕсли;
		
		Попытка
			ОбластьШапкаЧека.Параметры.Магазин =  ВыборкаПоДокументам.Магазин;
		Исключение
			ЗафиксироватьОшибку(ОписаниеОшибки(), "ПечатьТоварногоЧекаДляПД");	//	LNK 04.09.2018 14:16:54
		КонецПопытки;
		
		Попытка
			ОбластьШапкаЧека.Параметры.Адрес =  ВернутьНадписьМагазин(ВыборкаПоДокументам.Магазин,"Адрес");
		Исключение
			ЗафиксироватьОшибку(ОписаниеОшибки(), "ПечатьТоварногоЧекаДляПД");	//	LNK 04.09.2018 14:16:54
		КонецПопытки;
		
		Попытка
			ОбластьШапкаЧека.Параметры.Телефон =  ВернутьНадписьМагазин(ВыборкаПоДокументам.Магазин,"Телефон");
		Исключение
			ЗафиксироватьОшибку(ОписаниеОшибки(), "ПечатьТоварногоЧекаДляПД");	//	LNK 04.09.2018 14:16:54
		КонецПопытки;
		
		СведенияОбОрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.Дата);
		
		ОбластьШапкаЧека.Параметры.Организация    = ВыборкаПоДокументам.НаименованиеОрганизации;
		ОбластьШапкаЧека.Параметры.ИНН					 = СведенияОбОрганизации.ИНН;
		
		ТабличныйДокумент.Вывести(ОбластьШапкаЧека);
		
		ВсегоНаименований = 0;
		Сумма             = 0;
		ВсегоСкидок       = 0;
		ВсегоБезСкидок    = 0;
		
		//СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;

			ОбластьТелоЧека.Параметры.НаименованиеТовара = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);
														 //+ "(" + ВыборкаПоСтрокамТЧ.ЕдиницаИзмерения + ")";
			ОбластьТелоЧека.Параметры.КоличествоЦена     = Формат( ВыборкаПоСтрокамТЧ.Количество, "ЧЦ=17; ЧДЦ=; ЧН=")
														 + " х "
														 + Формат( ВыборкаПоСтрокамТЧ.Цена, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");

			КонечнаяСкидка =  ВыборкаПоСтрокамТЧ.Количество *  ВыборкаПоСтрокамТЧ.Цена -  ВыборкаПоСтрокамТЧ.Сумма;
			ТабличныйДокумент.Вывести(ОбластьТелоЧека);

			Если КонечнаяСкидка <> 0 Тогда
				ОбластьТелоЧекаСкидка.Параметры.ЗагСкидка = ?(КонечнаяСкидка > 0,"Знижка", "Націнка");
				ОбластьТелоЧекаСкидка.Параметры.Скидка    = Формат(?(КонечнаяСкидка > 0, КонечнаяСкидка, -КонечнаяСкидка), "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				ТабличныйДокумент.Вывести(ОбластьТелоЧекаСкидка);
			КонецЕсли;

			ТабличныйДокумент.Вывести(ОбластьТелоЧекаОтступ);
		КонецЦикла;
		
		// ПОДВАЛ
		ОбластьПодвалЧека.Параметры.Итог = Формат(ВыборкаПоДокументам.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		ТабличныйДокумент.Вывести(ОбластьПодвалЧека);
		
		
		СуммаБезналичныхОплат = 0;
		СуммаОплат = 0;
		
		//Оплата
		Если ВыборкаПоТабличнойЧастиОплата.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			
			ВыборкаПоОплата = ВыборкаПоТабличнойЧастиОплата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоОплата.Следующий() Цикл
				ОбластьПодвалЧекаОплата.Параметры.ТипОплаты = Локализация.ПолучитьЛокализованноеПредставление(ВыборкаПоОплата.ТипОплаты, КодЯзыкаПечать) + ":";
				ОбластьПодвалЧекаОплата.Параметры.Оплата = Формат(ВыборкаПоОплата.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				ТабличныйДокумент.Вывести(ОбластьПодвалЧекаОплата);
				СуммаБезналичныхОплат = СуммаБезналичныхОплат + ВыборкаПоОплата.СуммаБезналичныхОплат;
				СуммаОплат = СуммаОплат + ВыборкаПоОплата.Сумма;
			КонецЦикла;
			
			Если ВыборкаПоДокументам.ЭтоВозврат Тогда
				СуммаНаличных = ВыборкаПоДокументам.СуммаДокумента - СуммаБезналичныхОплат;
				Если СуммаНаличных > 0  Тогда
					ОбластьПодвалЧекаОплата.Параметры.ТипОплаты = "Готівка: ";
					ОбластьПодвалЧекаОплата.Параметры.Оплата = Формат(СуммаНаличных, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
					ТабличныйДокумент.Вывести(ОбластьПодвалЧекаОплата);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		//ПОДПИСИ
		Если ВыборкаПоДокументам.ЭтоВозврат Тогда
			ОбластьПодвалЧекаОстаток.Параметры.Сдача = "0.00";
		Иначе
			ОбластьПодвалЧекаОстаток.Параметры.Сдача = Формат(СуммаОплат - ВыборкаПоДокументам.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		КонецЕсли;
		
		Попытка
		    ОбластьПодвалЧекаОстаток.Параметры.КассаНомер = "КАСА №" + ВернутьНомерКассы(ВыборкаПоДокументам.КассаККМ);
		Исключение
			ЗафиксироватьОшибку(ОписаниеОшибки(), "ПечатьТоварногоЧекаДляПД");	//	LNK 04.09.2018 14:16:54
		КонецПопытки;
		
		ОбластьПодвалЧекаОстаток.Параметры.Сотрудник = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		ТабличныйДокумент.Вывести(ОбластьПодвалЧекаОстаток);
		ОбъектыПечати = Новый СписокЗначений;
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

&НаСервере
Функция ВернутьНадписьЧекПродажи(ДокЧек)

	Запр = Новый Запрос;
	Запр.Текст =
	"ВЫБРАТЬ
	|	ЧекККМ.ЧекККМПродажа.Номер КАК Номер,
	|	ЧекККМ.ЧекККМПродажа.Дата КАК Дата
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка";
	Запр.УстановитьПараметр("Ссылка",ДокЧек);
	ТЗ = Запр.Выполнить().Выгрузить();
	Если ТЗ.Количество()=0 Тогда
		Возврат "";
	Иначе
		Возврат "по чеку №"+ТЗ[0].Номер + " від "  + Формат(ТЗ[0].Дата,"ДФ=dd.MM.yyyy");
	
	КонецЕсли; 
	

КонецФункции // ВернутьНадписьЧекПродажи(ДокЧек)()

&НаСервере
Функция ВернутьНадписьМагазин(ТекМаг,Вид)

	ТипКИ = ?(Вид = "Адрес",Перечисления.ТипыКонтактнойИнформации.Адрес,Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	Запр = Новый Запрос;
	Запр.Текст =
	"ВЫБРАТЬ
	|	МагазиныКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.Магазины.КонтактнаяИнформация КАК МагазиныКонтактнаяИнформация
	|ГДЕ
	|	МагазиныКонтактнаяИнформация.Ссылка = &Ссылка
	|	И МагазиныКонтактнаяИнформация.Тип = &Тип";
	Запр.УстановитьПараметр("Ссылка",ТекМаг);
	Запр.УстановитьПараметр("Тип",ТипКИ);
	ТЗ = Запр.Выполнить().Выгрузить();
	Если ТЗ.Количество()=0 Тогда
		Возврат "";
	Иначе
		Возврат ТЗ[0].Представление;
	КонецЕсли; 
	
КонецФункции 

&НаСервере
Функция ВернутьНомерКассы(КассаККМ)

	Возврат ОбщегоНазначенияРТСервер.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(КассаККМ, "НомерВМагазине");
	
КонецФункции // ВернутьНомерКассы()
//-HVOYA Mykhailo


#Область СпецификаФункционалаДоговорСтрахования

//	LNK 25.08.2017 11:45:12
&НаКлиенте
Процедура ДоговорСтрахования(Команда)

	Если НЕ (Объект.ДоговорСтрахования.Пустая() И Объект.Товары.Количество() = 0) Тогда

		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();

		ПараметрыИнформации.ЗаголовокИнформации = "Оплата за договором страхування не може бути виконана";
		ПараметрыИнформации.ТекстИнформации =
			?(НЕ Объект.Товары.Количество() = 0
				, "Таблиця товарів не може бути заповнена!"
				, "Договір страхування вже вказано!");
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

	Иначе

		ПараметрыОткрытия = Новый Структура("Магазин", Объект.Магазин);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДоговорСтрахованияЗавершение", ЭтотОбъект);
		ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВыбораДоговораСтрахования", Объект.ИмяВнешнейОбработки)
			, ПараметрыОткрытия, ЭтотОбъект, ЭтотОбъект,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;

КонецПроцедуры

//	LNK 25.08.2017 11:45:12
&НаКлиенте
Процедура ДоговорСтрахованияЗавершение(Значение, ДополнительныеПараметры)	Экспорт

	Если НЕ Значение = Неопределено Тогда

		Объект.ДоговорСтрахования = Значение.Ссылка;

		Если Объект.ДисконтнаяКарта.Пустая() Тогда

			Объект.ДисконтнаяКарта         = Значение.ИнформационнаяКарта;
			Объект.ВладелецДисконтнойКарты = Значение.Контрагент;

			ОперативныеДанныеПокупателя(Объект.ДисконтнаяКарта, Объект.ВладелецДисконтнойКарты);

		КонецЕсли;

		Объект.Товары.Очистить();

		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = СтрахованиеКлиентПовтИсп.ПолучитьУслугуСтрахования(Объект.Магазин);
		СтрокаТабличнойЧасти.Количество   = 1;

		ТоварыПриИзмененииНоменклатуры(СтрокаТабличнойЧасти,, Истина, Истина);

		СтрокаТабличнойЧасти.Цена = Значение.СуммаСтраховогоВзноса;

		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		
		Объект.СкидкиРассчитаны = Истина;
		
		ОбновитьФорму();
		ОбновлениеДисплеяПокупателя("ИзмененияЦены")

	КонецЕсли;

КонецПроцедуры

//	LNK 26.08.2017 09:30:06
&НаКлиенте
Функция ТоварыРазрешитьДобавить()

	Если ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя, "СчетНаОплатуПокупателю") Тогда

		Разрешено = Ложь;

	Иначе

		Разрешено = Объект.ДоговорСтрахования.Пустая();

	КонецЕсли;

	Возврат Разрешено;

КонецФункции

&НаКлиенте
Функция ТоварыРазрешитьДобавитьПодарочныйСертификат(ДанныеСертификата)

	ТекстСообщения = "";

	Если НЕ ДанныеСертификата.МагазинНаличия = Объект.Магазин Тогда

		ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
		+ "Сертификат отсутствует в магазине «" + Объект.Магазин + "»";

	ИначеЕсли НЕ ДанныеСертификата.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСерийныхНомеров.ПустаяСсылка") Тогда

		ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
		+ "Сертификат уже был использован (статус = [" + ДанныеСертификата.Состояние + "])";

	КонецЕсли;

	Если НЕ Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", ДанныеСертификата.СерийныйНомер)).Количество() = 0 Тогда

		ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
		+ "Сертификат уже присутствует в текущем документе";

	КонецЕсли;

	Если ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя, "СчетНаОплатуПокупателю") Тогда

		ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
		+ "Запрещено изменение товарного состава, согласованного кредитной программой.";

	КонецЕсли;

	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Отказано в продаже сертификата «" + ДанныеСертификата.КодСерийногоНомера + "»!", ТекстСообщения);

	КонецЕсли;

	Возврат ПустаяСтрока(ТекстСообщения);

КонецФункции

//	LNK 26.08.2017 11:01:33
&НаСервере
Функция ПроверитьПоДоговоруСтрахования(Отказ, ПараметрыИнформации, УслугаСтрахования)

	Если НЕ Объект.ДоговорСтрахования.Пустая() Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Ведущая.ДоговорСтрахования,
		|	ЕСТЬNULL(ТаблицаРегистра.СуммаОстаток, 0) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫРАЗИТЬ(&ДоговорСтрахования КАК Документ.ДоговорСтрахования) КАК ДоговорСтрахования) КАК Ведущая
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДоговорыСтрахованияОплаченные.Остатки(, ДоговорСтрахования = &ДоговорСтрахования) КАК ТаблицаРегистра
		|		ПО Ведущая.ДоговорСтрахования = ТаблицаРегистра.ДоговорСтрахования"
		);
		Запрос.УстановитьПараметр("ДоговорСтрахования", Объект.ДоговорСтрахования);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		СуммаВзноса = Объект.Товары.Итог("Сумма");	//	в этом случае никаких НДС быть не должно!
		
		Если Выборка.Сумма <= 0 Тогда

			Отказ = Истина;
			ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
			
			ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"За договором «%1» страховий внесок вже сплачено!",
				Объект.ДоговорСтрахования
			);
			
			ПараметрыИнформации.ЗаголовокИнформации = "Помилка підсистеми страхування";
			ПараметрыИнформации.ТекстИнформации     = ТекстИнформации;

		ИначеЕсли СуммаВзноса > Выборка.Сумма Тогда

			Отказ = Истина;
			ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();

			ПараметрыИнформации.ЗаголовокИнформации = "Помилка підсистеми страхування";
			ПараметрыИнформации.ТекстИнформации     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"За договором «%1» страховий внесок перевищує залишок за договором на %2 грн!",
					Объект.ДоговорСтрахования,
					Формат(СуммаВзноса - Выборка.Сумма, "ЧДЦ=2; ЧГ=")
			);

		КонецЕсли;

		Если НЕ Отказ Тогда

			Если НЕ Объект.Товары.Количество() = 1 Тогда

				Отказ = Истина;
				ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
				
				ПараметрыИнформации.ЗаголовокИнформации = "Помилка підсистеми страхування";
				ПараметрыИнформации.ТекстИнформации     = "Дозволяється лише один рядок у таблиці «Товари»!";

			ИначеЕсли НЕ Объект.Товары[0].Номенклатура = УслугаСтрахования Тогда

				Отказ = Истина;
				ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
				
				ПараметрыИнформации.ЗаголовокИнформации = "Помилка підсистеми страхування";
				ПараметрыИнформации.ТекстИнформации     = "Допустимо використовувати лише певну послугу страхування!";

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

#КонецОбласти

&НаСервере
Функция ПолучитьПарольДиректора()

    ПарольДиректора = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПаролиДиректоров.Пароль КАК Пароль
		|ИЗ
		|	РегистрСведений.ПаролиДиректоров КАК ПаролиДиректоров
		|ГДЕ
		|	ПаролиДиректоров.Магазин = &Магазин";
	
	Запрос.УстановитьПараметр("Магазин", ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);   	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПарольДиректора = ВыборкаДетальныеЗаписи.Пароль;

	КонецЦикла;
	
	Возврат  ПарольДиректора;

КонецФункции 

&НаСервере
Функция ПолучитьРазрешениеИзмененияЦены(Номенклатура)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПравилаДляНоменклатуры.РазрешитьИзменятьЦену КАК РазрешитьИзменятьЦену
	|ИЗ
	|	РегистрСведений.ПравилаДляНоменклатуры КАК ПравилаДляНоменклатуры
	|ГДЕ
	|	ПравилаДляНоменклатуры.Номенклатура = &Номенклатура
	|	И ПравилаДляНоменклатуры.РазрешитьИзменятьЦену = ИСТИНА"
	);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции

#Область РаботаСКупонамиКлиент

&НаКлиенте	//	LNK 21.09.2017 11:40:09
Функция ПолучитьСуммуКупонов()

	СуммаКупонов = 0;
	
	Если ЭтоПогашениеКупона Тогда    

		СтрокиКупонов = Объект.Товары.НайтиСтроки(Новый Структура("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.СкидочныйКупон")));

		Для каждого СтрокаКупона Из СтрокиКупонов Цикл

			СуммаКупонов = СуммаКупонов + СтрокаКупона.СуммаВсего;

		КонецЦикла; 

	КонецЕсли; 

	Возврат СуммаКупонов;

КонецФункции

&НаКлиенте 
Функция ПроверитьАкцииНаПечатьУникальныхКупонов(ЧекККМСсылка, КассаККМ)		// ДР Антошка Печать и запись купона

//	Бакан. Готовим данные
	МассивВходныеПараметры = ПолучитьТекстУникальногоКупона(ЧекККМСсылка);  // ДР Антошка в этой функции получаем данные купонов
	ОписаниеОшибки = "";

	Если НЕ МассивВходныеПараметры = Неопределено тогда 

		ТекстСообщенияКассиру = "";

		Для каждого ВходныеПараметры из МассивВходныеПараметры	цикл

			Если НЕ ВходныеПараметры = Неопределено тогда 

				Если НЕ ИспользоватьПодключаемоеОборудование  Тогда // если сразу печатать на принтер чеков

					Возврат Ложь;

				КонецЕсли;

				Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
				
					ПараметрыКассыККМ = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
					ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
					
					Если НЕ ИдентификаторУстройстваФР = Неопределено Тогда

					//	Подключаем ФР
						Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(ЭтотОбъект,
						                                                                              ИдентификаторУстройстваФР,
						                                                                              ОписаниеОшибки);

						Если Результат Тогда     // печатаем на чеке и записываем в регистр полсле печати

							ВыходныеПараметры = Неопределено;
						//	Печатаем нефискальный чек.
							Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР, "beginNonFiscal"    , ВходныеПараметры, ВыходныеПараметры);
							Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР, "printNonFiscalText", ВходныеПараметры, ВыходныеПараметры);

							СтрокиШаблона = РМКСервер.ПолучитьШаблонЧека(ВходныеПараметры[7]);	// получает ТЧ шаблона для печати на чеке

							Если НЕ СтрокиШаблона = Неопределено тогда

								Для каждого ДанныеСтроки из СтрокиШаблона цикл

									ВходныеПараметры[2] = СтрЗаменить(ДанныеСтроки.СтрокаТекста	, "#SUM#"		, Формат(ВходныеПараметры[8], "ЧДЦ=2; ЧН=0,00; ЧГ="));
									ВходныеПараметры[2] = СтрЗаменить(ВходныеПараметры[2]		, "#SERIALNUM#"	, СокрЛП(ВходныеПараметры[1]));

									Если ПараметрыКассыККМ.ПечатьКодQR = Истина И ДанныеСтроки.QRкод = Истина Тогда

										ДанныеДляQRКода = Новый Массив;
										ДанныеДляQRКода.Добавить(ВходныеПараметры[2]);

										Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР
											, "PrintQR"
											, ДанныеДляQRКода
											, ВыходныеПараметры
										);

									Иначе

										Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР
											, "printNonFiscalText"
											, ВходныеПараметры
											, ВыходныеПараметры
										);

									КонецЕсли;

								КонецЦикла;		

							КонецЕсли;

							Если НЕ ПустаяСтрока(ВходныеПараметры[1]) Тогда	//	имеется ШК

								ВходныеПараметры[2] = "";
							//	ТипШтрихКода = ВходныеПараметры[0];
							//	ШтрихКод     = ВходныеПараметры[1];
							//	Пытаемся вывести штриховой код.. если не получится, то ничего и не выведет.
								Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР, "printBarCode", ВходныеПараметры, ВыходныеПараметры);

							КонецЕсли;

							ВходныеПараметры[2] = ВходныеПараметры[1];
							Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР, "printNonFiscalText", ВходныеПараметры, ВыходныеПараметры);

							ВходныеПараметры[2] = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ТекстПодвалаДляКупона");

							Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР, "printNonFiscalText", ВходныеПараметры, ВыходныеПараметры);
							Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР, "endNonFiscal"      , ВходныеПараметры, ВыходныеПараметры);

						//	Бакан. Записываем купон в регистр
							СделатьЗаписьВРССерийныеНомераДляАкций(ЧекККМСсылка, ВходныеПараметры[3], ВходныеПараметры[1], ВходныеПараметры[6], ВходныеПараметры[8], ТекстСообщенияКассиру);

							ТекстСообщенияКассиру = ТекстСообщенияКассиру + ?(ПустаяСтрока(ТекстСообщенияКассиру), "", Символы.ПС) + ВходныеПараметры[4];

						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		Если НЕ ПустаяСтрока(ТекстСообщенияКассиру) Тогда

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Купон(ы) распечатан на фискальном регистраторе!", СтрЗаменить(ТекстСообщенияКассиру, "\n", Символы.ПС));

		КонецЕсли;

	КонецЕсли;					

КонецФункции
	
#КонецОбласти

#Область РаботаСКупонамиСерверБакан

&НаСервере
Функция ПолучитьТекстУникальногоКупона(ЧекККМСсылка)

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	МИНИМУМ(СкидкиНаценки.НомерСтроки) КАК НомерСтроки,
	|	СкидкиНаценки.Ссылка КАК Ссылка,
	|	СкидкиНаценки.СкидкаНаценка.ТекстУсловияДляПечатиВЧекеККМ КАК ТекстУсловияДляПечатиВЧекеККМ,
	|	ВЫРАЗИТЬ(СкидкиНаценки.СкидкаНаценка.ТекстСообщения КАК СТРОКА(1000)) КАК ТекстСообщения,
	|	СкидкиНаценки.СкидкаНаценка.ВариантВыдачиКупона КАК ВариантВыдачиКупона,
	|	СкидкиНаценки.СкидкаНаценка.НоменклатураСкидочногоКупона КАК НоменклатураСкидочногоКупона,
	|	СкидкиНаценки.СкидкаНаценка.ШаблонЧека КАК ШаблонЧека,
	|	ТаблицаСегмента.Номенклатура КАК Номенклатура,
	|	СкидкиНаценки.СкидкаНаценка.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки,
	|	СкидкиНаценки.Ссылка.Номер КАК НомерЧека
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.ЧекККМ.СкидкиНаценки КАК СкидкиНаценки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК ТаблицаУсловий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК ТаблицаСегмента
	|			ПО ТаблицаУсловий.УсловиеПредоставления.СегментНоменклатурыОграничения = ТаблицаСегмента.Сегмент
	|				И (ТаблицаСегмента.Номенклатура В
	|					(ВЫБРАТЬ
	|						Фильтр.Номенклатура
	|					ИЗ
	|						Фильтр))
	|		ПО СкидкиНаценки.СкидкаНаценка = ТаблицаУсловий.Ссылка
	|ГДЕ
	|	СкидкиНаценки.Ссылка = &Ссылка
	|	И СкидкиНаценки.СкидкаНаценка.ВариантВыдачиКупона = ЗНАЧЕНИЕ(Перечисление.ВариантыВыдачиКупона.ПечататьНаЧекеСНоминалом)
	|	И СкидкиНаценки.СкидкаНаценка.ПечататьСерийныйНомер = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	СкидкиНаценки.Ссылка,
	|	ВЫРАЗИТЬ(СкидкиНаценки.СкидкаНаценка.ТекстСообщения КАК СТРОКА(1000)),
	|	СкидкиНаценки.СкидкаНаценка.ТекстУсловияДляПечатиВЧекеККМ,
	|	СкидкиНаценки.СкидкаНаценка.ВариантВыдачиКупона,
	|	СкидкиНаценки.СкидкаНаценка.НоменклатураСкидочногоКупона,
	|	СкидкиНаценки.СкидкаНаценка.ШаблонЧека,
	|	СкидкиНаценки.СкидкаНаценка,
	|	ТаблицаСегмента.Номенклатура,
	|	СкидкиНаценки.СкидкаНаценка.ЗначениеСкидкиНаценки,
	|	СкидкиНаценки.Ссылка.Номер
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СкидкиНаценки.СкидкаНаценка,
	|	МИНИМУМ(СкидкиНаценки.НомерСтроки),
	|	СкидкиНаценки.Ссылка,
	|	СкидкиНаценки.СкидкаНаценка.ТекстУсловияДляПечатиВЧекеККМ,
	|	ВЫРАЗИТЬ(СкидкиНаценки.СкидкаНаценка.ТекстСообщения КАК СТРОКА(1000)),
	|	СкидкиНаценки.СкидкаНаценка.ВариантВыдачиКупона,
	|	СкидкиНаценки.СкидкаНаценка.НоменклатураСкидочногоКупона,
	|	СкидкиНаценки.СкидкаНаценка.ШаблонЧека,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	СкидкиНаценки.СкидкаНаценка.ЗначениеСкидкиНаценки,
	|	СкидкиНаценки.Ссылка.Номер
	|ИЗ
	|	Документ.ЧекККМ.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка = &Ссылка
	|	И НЕ СкидкиНаценки.СкидкаНаценка.ВариантВыдачиКупона = ЗНАЧЕНИЕ(Перечисление.ВариантыВыдачиКупона.ПечататьНаЧекеСНоминалом)
	|	И СкидкиНаценки.СкидкаНаценка.ПечататьСерийныйНомер = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	СкидкиНаценки.СкидкаНаценка,
	|	СкидкиНаценки.Ссылка,
	|	СкидкиНаценки.СкидкаНаценка.ТекстУсловияДляПечатиВЧекеККМ,
	|	ВЫРАЗИТЬ(СкидкиНаценки.СкидкаНаценка.ТекстСообщения КАК СТРОКА(1000)),
	|	СкидкиНаценки.СкидкаНаценка.ВариантВыдачиКупона,
	|	СкидкиНаценки.СкидкаНаценка.НоменклатураСкидочногоКупона,
	|	СкидкиНаценки.СкидкаНаценка.ШаблонЧека,
	|	СкидкиНаценки.СкидкаНаценка.ЗначениеСкидкиНаценки,
	|	СкидкиНаценки.Ссылка.Номер
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДанных.СкидкаНаценка КАК СкидкаНаценка,
	|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДанных.ТекстУсловияДляПечатиВЧекеККМ КАК ТекстУсловияДляПечатиВЧекеККМ,
	|	ТаблицаДанных.ТекстСообщения КАК ТекстСообщения,
	|	ТаблицаДанных.ВариантВыдачиКупона КАК ВариантВыдачиКупона,
	|	ТаблицаДанных.НоменклатураСкидочногоКупона КАК НоменклатураСкидочногоКупона,
	|	ТаблицаДанных.ШаблонЧека КАК ШаблонЧека,
	|	ТаблицаДанных.СуммаКупона КАК СуммаКупона,
	|	ТаблицаДанных.НомерЧека КАК НомерЧека
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыСегмента.СкидкаНаценка КАК СкидкаНаценка,
	|		МИНИМУМ(ТоварыСегмента.НомерСтроки) КАК НомерСтроки,
	|		ТоварыСегмента.ТекстУсловияДляПечатиВЧекеККМ КАК ТекстУсловияДляПечатиВЧекеККМ,
	|		ТоварыСегмента.ТекстСообщения КАК ТекстСообщения,
	|		ТоварыСегмента.ВариантВыдачиКупона КАК ВариантВыдачиКупона,
	|		ТоварыСегмента.НоменклатураСкидочногоКупона КАК НоменклатураСкидочногоКупона,
	|		ТоварыСегмента.ШаблонЧека КАК ШаблонЧека,
	|		СУММА(ТабличнаяЧасть.Сумма / 100 * ТоварыСегмента.ЗначениеСкидкиНаценки) КАК СуммаКупона,
	|		ТоварыСегмента.НомерЧека КАК НомерЧека
	|	ИЗ
	|		ВТ_Товары КАК ТоварыСегмента
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ТабличнаяЧасть
	|			ПО ТоварыСегмента.Ссылка = ТабличнаяЧасть.Ссылка
	|				И ТоварыСегмента.Номенклатура = ТабличнаяЧасть.Номенклатура
	|	ГДЕ
	|		ТоварыСегмента.ВариантВыдачиКупона = ЗНАЧЕНИЕ(Перечисление.ВариантыВыдачиКупона.ПечататьНаЧекеСНоминалом)
	|		И ТабличнаяЧасть.Сумма / 100 * ТоварыСегмента.ЗначениеСкидкиНаценки <> 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТоварыСегмента.НоменклатураСкидочногоКупона,
	|		ТоварыСегмента.СкидкаНаценка,
	|		ТоварыСегмента.ТекстУсловияДляПечатиВЧекеККМ,
	|		ТоварыСегмента.ВариантВыдачиКупона,
	|		ТоварыСегмента.ТекстСообщения,
	|		ТоварыСегмента.ШаблонЧека,
	|		ТоварыСегмента.НомерЧека
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыСегмента.СкидкаНаценка,
	|		ТоварыСегмента.НомерСтроки,
	|		ТоварыСегмента.ТекстУсловияДляПечатиВЧекеККМ,
	|		ТоварыСегмента.ТекстСообщения,
	|		ТоварыСегмента.ВариантВыдачиКупона,
	|		ТоварыСегмента.НоменклатураСкидочногоКупона,
	|		ТоварыСегмента.ШаблонЧека,
	|		0,
	|		ТоварыСегмента.НомерЧека
	|	ИЗ
	|		ВТ_Товары КАК ТоварыСегмента
	|	ГДЕ
	|		НЕ ТоварыСегмента.ВариантВыдачиКупона = ЗНАЧЕНИЕ(Перечисление.ВариантыВыдачиКупона.ПечататьНаЧекеСНоминалом)) КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Фильтр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Товары"
	);
	Запрос.УстановитьПараметр("Ссылка", ЧекККМСсылка);
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() тогда 

		ОбщиеПараметрыМассив = Новый Массив;
		Выборка = РезультатЗапроса.Выбрать();
	
		Пока Выборка.Следующий() Цикл

			ОбщиеПараметры = Новый Массив();
			ОбщиеПараметры.Добавить("CODE128");

			Если Выборка.ВариантВыдачиКупона = Перечисления.ВариантыВыдачиКупона.ПечататьНаЧекеИзСписка тогда   // тут два варианта 1 печатаем изи списка загруженных, 2 генерируем скидочныйкупон

				СкидочныйКупон = ПолучитьСерийныйНомерДляПечати(Выборка.НоменклатураСкидочногоКупона);   // Проверяем есть ли запись купона в регистре для печати из чека если в момент пробития он не распекчатался из РМК

				Если НЕ СкидочныйКупон = Неопределено тогда 

					ОбщиеПараметры.Добавить(СкидочныйКупон.КодСерийногоНомера);
					ОбщиеПараметры.Добавить(Выборка.ТекстУсловияДляПечатиВЧекеККМ);
					ОбщиеПараметры.Добавить(Выборка.СкидкаНаценка);
					ОбщиеПараметры.Добавить(Выборка.ТекстСообщения);
					ОбщиеПараметры.Добавить(Выборка.ВариантВыдачиКупона);
					ОбщиеПараметры.Добавить(СкидочныйКупон.СкидочныйКупон);
					ОбщиеПараметры.Добавить(Выборка.ШаблонЧека);
					ОбщиеПараметры.Добавить(0);

				Иначе

					ОбщиеПараметры = Неопределено;

				КонецЕсли;

			Иначе

				Номер     = Выборка.НомерЧека;//ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЧекККМСсылка, "Номер");
				НомерСокр = Прав(Лев(Номер, 4), 3) + Прав(Номер, 6) + Выборка.НомерСтроки;
				ОбщиеПараметры.Добавить(НомерСокр + Формат(Год(ТекущаяДата()), "ЧГ=0"));
				ОбщиеПараметры.Добавить(Выборка.ТекстУсловияДляПечатиВЧекеККМ);
				ОбщиеПараметры.Добавить(Выборка.СкидкаНаценка);
				ОбщиеПараметры.Добавить(Выборка.ТекстСообщения);
				ОбщиеПараметры.Добавить(Выборка.ВариантВыдачиКупона);
				ОбщиеПараметры.Добавить(Неопределено);
				ОбщиеПараметры.Добавить(Выборка.ШаблонЧека);
				ОбщиеПараметры.Добавить(Выборка.СуммаКупона);				

			КонецЕсли;

			ОбщиеПараметрыМассив.Добавить(ОбщиеПараметры);

		КонецЦикла;

	Иначе

		ОбщиеПараметрыМассив = Неопределено;

	КонецЕсли;	

	Возврат ОбщиеПараметрыМассив;

КонецФункции

&НаСервере
Функция ПолучитьСерийныйНомерДляПечати(НоменклатураСкидочногоКупона)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СерийныеНомера.Ссылка КАК СкидочныйКупон,
	|	Штрихкоды.Штрихкод КАК КодСерийногоНомера
	|ИЗ
	|	Справочник.СерийныеНомера КАК СерийныеНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО (Штрихкоды.Владелец = СерийныеНомера.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СерийныеНомераДляАкций КАК СерийныеНомераДляАкций
	|		ПО СерийныеНомера.Ссылка = СерийныеНомераДляАкций.СерийныйНомер
	|ГДЕ
	|	СерийныеНомера.Владелец = &Владелец
	|	И СерийныеНомераДляАкций.СерийныйНомер ЕСТЬ NULL
	|	И СерийныеНомера.ПометкаУдаления = ЛОЖЬ"
	);

	Запрос.УстановитьПараметр("Владелец", НоменклатураСкидочногоКупона);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		СкидочныйКупон = Новый Структура;

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

			СкидочныйКупон.Вставить("СкидочныйКупон"	, ВыборкаДетальныеЗаписи.СкидочныйКупон);
			СкидочныйКупон.Вставить("КодСерийногоНомера", ВыборкаДетальныеЗаписи.КодСерийногоНомера);

		КонецЦикла;

		Возврат СкидочныйКупон;

	Иначе

		Возврат Неопределено;

	КонецЕсли;

КонецФункции
	
&НаСервере
Процедура СделатьЗаписьВРССерийныеНомераДляАкций(ЧекККМСсылка, СкидкаНаценка, КодСерийногоНомера, СерийныйНомер, СуммаКупона, ТекстСообщенияКассиру)

	Если Не ЗначениеЗаполнено(СерийныйНомер) тогда   

		НоменклатураСкидочногоКупона = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СкидкаНаценка, "НоменклатураСкидочногоКупона");

		Если НЕ ЗначениеЗаполнено(НоменклатураСкидочногоКупона) Тогда

			ТекстСообщенияКассиру = ТекстСообщенияКассиру + ?(ПустаяСтрока(ТекстСообщенияКассиру), "", Символы.ПС)
			+ "Номер купона НЕ зафиксирован! Не указан владелец купона в скидке «" + СкидкаНаценка + "»";
			Возврат;

		Иначе

			ТекСерийныйНомер = СкидкиНаценкиСервер.СоздатьСерийныйНомер(КодСерийногоНомера, НоменклатураСкидочногоКупона);

		КонецЕсли;

	Иначе

		ТекСерийныйНомер = СерийныйНомер;

	КонецЕсли;

	Попытка

	   	НаборЗаписей = РегистрыСведений.СерийныеНомераДляАкций.СоздатьНаборЗаписей(); 

		НаборЗаписей.Отбор.СерийныйНомер.Установить(ТекСерийныйНомер);

		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ЧекККМПродажи = ЧекККМСсылка;
		НоваяЗапись.СерийныйНомер = ТекСерийныйНомер;
		НоваяЗапись.ЧекККПИспользования = Документы.ЧекККМ.ПустаяСсылка();
		НоваяЗапись.Использован = Ложь; 
		НоваяЗапись.СкидкаНаценка = СкидкаНаценка;
		НоваяЗапись.Сумма = СуммаКупона;
		НоваяЗапись.ДатаИзменения = ТекущаяДата();

		НаборЗаписей.Записать();

		ТекстСообщенияКассиру = ТекстСообщенияКассиру + ?(ПустаяСтрока(ТекстСообщенияКассиру), "", Символы.ПС)
		+ "Купон: " + СокрЛП(ТекСерийныйНомер);

	Исключение

		ТекстСообщенияКассиру = ТекстСообщенияКассиру + ?(ПустаяСтрока(ТекстСообщенияКассиру), "", Символы.ПС)
		+ "Номер купона НЕ зафиксирован! Ошибка:" + Символы.ПС + ОписаниеОшибки();

	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьСкидочныйКупонВРегистрПоКоду(ЧекККМСсылка, КодСерийногоНомера)  // Аннуляция купона при возврате
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СерийныеНомераДляАкций.СерийныйНомер КАК СерийныйНомер,
	|	СерийныеНомераДляАкций.ЧекККМПродажи КАК ЧекККМПродажи,
	|	СерийныеНомераДляАкций.ЧекККПИспользования КАК ЧекККПИспользования,
	|	СерийныеНомераДляАкций.Использован КАК Использован
	|ИЗ
	|	РегистрСведений.СерийныеНомераДляАкций КАК СерийныеНомераДляАкций
	|ГДЕ
	|	СерийныеНомераДляАкций.СерийныйНомер.КодСерийногоНомера = &КодСерийногоНомера"
	);
	Запрос.УстановитьПараметр("КодСерийногоНомера", КодСерийногоНомера);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

		НаборЗаписей = РегистрыСведений.СерийныеНомераДляАкций.СоздатьНаборЗаписей(); 

		НаборЗаписей.Отбор.СерийныйНомер.Установить(ВыборкаДетальныеЗаписи.СерийныйНомер);

		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.СерийныйНомер = ВыборкаДетальныеЗаписи.СерийныйНомер;
		НоваяЗапись.ЧекККМПродажи = ВыборкаДетальныеЗаписи.ЧекККМПродажи;
		НоваяЗапись.ЧекККПИспользования = ЧекККМСсылка;
		НоваяЗапись.Использован = Истина; 

		НаборЗаписей.Записать(Истина);

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗафиксироватьОшибку(ТекстОшибки, ИмяПроцедуры, ЛюбаяСсылка = Неопределено, ЗаписьЖурналаСобытий = Ложь, Ошибка = Истина)

	Если ЛюбаяСсылка = Неопределено Тогда
		
			МетаданныеСсылки = Неопределено;

	Иначе	МетаданныеСсылки = ЛюбаяСсылка.Метаданные();

	КонецЕсли;

	Если ЗаписьЖурналаСобытий = Ложь Тогда

		ЗаписьЖурналаРегистрации("РМК." + ?(Ошибка = Истина, "Ошибка.", "") + ИмяПроцедуры
			, ?(Ошибка = Истина, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Предупреждение)
			, МетаданныеСсылки
			, ЛюбаяСсылка
			, ТекстОшибки
		);

	Иначе

		ЖурналСобытий.Регистрация("РМК." + ?(Ошибка = Истина, "Ошибка.", "") + ИмяПроцедуры
			, ?(Ошибка = Истина, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Предупреждение)
			, МетаданныеСсылки
			, ЛюбаяСсылка
			, 
			, ТекстОшибки
			,
			, Истина
			, Ложь
		);

	КонецЕсли;

КонецПроцедуры

&НаСервере	//	LNK 06.02.2019 13:36:44
Процедура ОчиститьРеквизитыФормы()

    РМК2_ВидДисконта          = "";
	РМК2_ИдентификацияКлиента = "";
	РМК2_Штрихкод             = "";
	РМК2_СуммаПокупок         = "0.00";

	ДанныеПродажи = Неопределено;	//	LNK 12.09.2021 08:04:30
	ДанныеЗаказа  = ДанныеЗаказаИнициализировать(НаборПравИНастроек);	//	LNK 02.11.2022 06:45:32

	Объект.НомерТелефона = "";

	Если НаборПравИНастроек.ПродажиАктивированы Тогда
		
			РМК2_ПроцентСкидки = "0.00";

	Иначе	РМК2_ПроцентСкидки = "";

	КонецЕсли;

	Элементы.КомандаВыдатьКартуПредварительную.Доступность = Ложь;
	
	Элементы.ПереключениеСкидокЛояльности.Доступность = Ложь;
	
	Объект.КартаСотрудника = Ложь;
	
	Объект.ИспользоватьПрограммуЛояльности = Ложь;

КонецПроцедуры

#Область ВыдачаПредварительнойКартыПокупателю

&НаКлиенте	//	LNK 31.07.2019 13:23:33
Процедура ПроверитьВозможностьВыдачиКартыПокупателю()

	Если ЗначениеЗаполнено(Объект.ВладелецДисконтнойКарты) И Объект.ДисконтнаяКарта.Пустая() Тогда

		Элементы.КомандаВыдатьКартуПредварительную.Доступность = Истина;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 31.07.2019 13:31:12
Процедура КомандаВыдатьКартуПредварительную(Команда)

	ОтветПользователя = ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМК("Видати покупцю картку?");

	Если НЕ ВРег(ОтветПользователя) = "ДА" Тогда

		Возврат;

	КонецЕсли;

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок"             	, "Вкажіть номер попередньої картки");
//	ПараметрыОткрытия.Вставить("МаксимальноеЗначение"  	, МаксимальноеЗначение);
//	ПараметрыОткрытия.Вставить("ЧислоВвода"            	, ЧислоВвода);
	ПараметрыОткрытия.Вставить("Отрицательное"         	, Ложь);
	ПараметрыОткрытия.Вставить("ВозвращатьЧислоСтрокой"	, Истина);
	ПараметрыОткрытия.Вставить("ПрочитатьКарту"			, Ложь);	//	LNK 30.11.2022 15:47:23
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыдатьКартуПредварительнуюЗавершение", ЭтотОбъект);
	ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВводаЧисла", Объект.ИмяВнешнейОбработки)
		, ПараметрыОткрытия
		, ЭтотОбъект
		, УникальныйИдентификатор
		,,
		, ОписаниеОповещения
		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);

КонецПроцедуры

&НаКлиенте	//	LNK 31.07.2019 13:53:14
Процедура ВыдатьКартуПредварительнуюЗавершение(Результат, ДополнительныеПараметры)	Экспорт

	Если НЕ Результат = Неопределено Тогда

		ТекстСообщения = ВыдатьКартуПредварительнуюНаСервере(Результат.ВведенноеЧисло);

		Если ПустаяСтрока(ТекстСообщения) Тогда

			ОбновитьФорму();

		Иначе

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Картка не видана", ТекстСообщения);

		КонецЕсли;

	КонецЕсли;

	ПроверитьВозможностьВыдачиКартыПокупателю();

КонецПроцедуры

&НаСервере	//	LNK 31.07.2019 13:53:21
Функция ВыдатьКартуПредварительнуюНаСервере(КодКарты)

	Если НЕ ПустаяСтрока(КодКарты) Тогда

		ТекстСообщения = "";

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСправочник.Ссылка КАК ДисконтнаяКарта
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ТаблицаСправочник
		|ГДЕ
		|	ТаблицаСправочник.КодКарты = &КодКарты
		|	И ТаблицаСправочник.ВидДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.ВидыДисконтныхКарт.ПредварительныеКартыЛояльности)
		|	И НЕ(ТаблицаСправочник.ПометкаУдаления
		|				ИЛИ ТаблицаСправочник.Блокирован)"
		);
		Запрос.УстановитьПараметр("КодКарты", КодКарты);

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда

			Если Документы.ВыдачаДисконтныхКарт.ВыдатьКартуКонтрагенту(Объект.ВладелецДисконтнойКарты, Выборка.ДисконтнаяКарта, ТекстСообщения) Тогда

				Объект.ДисконтнаяКарта = Выборка.ДисконтнаяКарта;

				ОперативныеДанныеПокупателя(Объект.ДисконтнаяКарта, Объект.ВладелецДисконтнойКарты);

			КонецЕсли;

		Иначе

			ТекстСообщения = "Картка «" + КодКарты + "» НЕ ВИЯВЛЕНО!";

		КонецЕсли;

	Иначе

		ТекстСообщения = "Код картки не вказано!";

	КонецЕсли;

	Возврат ТекстСообщения;

КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ПоискПоНомеру(Команда)
	если флПоискПоНомеру тогда 
		флПоискПоНомеру = Ложь;
		Элементы.ПоискШК.Заголовок = "ШК";
		Элементы.ПоискШК.Маска="";	
		Элементы.ПоискШК.ПодсказкаВвода = "введіть штрих-код товару";		
		
	Иначе
		флПоискПоНомеру = Истина;
		Элементы.ПоискШК.Заголовок = "ТЕЛ";

		Элементы.ПоискШК.Маска=("+380999999999");
		//ПоискШК = "+380";	
	КонецЕсли;
	УстановитьТекущийЭлемент(Ложь);	
КонецПроцедуры

&НаКлиенте	//	LNK 06.09.2019 13:12:00
Процедура СброситьФлагСкидкиРассчитаны()

	Если НЕ ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя, "СчетНаОплатуПокупателю") Тогда

		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
		Объект.СкидкиРассчитаныCRM = Ложь;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 22.10.2019 09:45:34
Функция ВыполнитьОкруглениеСуммыОплаты(ТолькоВозможностьОкругления = Ложь)	Экспорт

	ЕстьНеобходимость = СкидкиНаценкиКлиентСервер.ОкруглитьТоварыПоСуммеДокумента(РМК3_ОбщаяСуммаЧека, Объект.Товары, Объект.ЦенаВключаетНДС,, ТолькоВозможностьОкругления);

	Если НЕ ТолькоВозможностьОкругления Тогда

		ОтобразитьСкидки();
		ОбновитьИнформациюОбщейСуммы();

	КонецЕсли;

	Возврат ЕстьНеобходимость;

КонецФункции

&НаКлиенте	//	LNK 04.03.2020 15:21:20
Процедура ПроцедураУчетаРабочегоВремени(Команда)

	ОткрытьФорму("Обработка.УчетРабочегоВремени.Форма",, ЭтотОбъект, ЭтотОбъект,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ПереключениеСкидокЛояльности(Команда)

	Объект.ИспользоватьПрограммуЛояльности = Не Объект.ИспользоватьПрограммуЛояльности;
	
	ОперативныеДанныеПокупателя(Объект.ДисконтнаяКарта, Объект.ВладелецДисконтнойКарты);

	РМК2_ВидДисконта = ?(Объект.ИспользоватьПрограммуЛояльности, "Програма лояльності", ДанныеКарты.ВидДисконтнойКарты);

	ОбновитьФорму();
	УстановитьТекущийЭлемент(Истина);	//	LNK 19.02.2020 07:01:09

КонецПроцедуры

&НаСервере
Функция СогласованВозвратСБанком(ТекЧек)

	  Возврат ОбменСБанкамиСервер.ПроверкаСтатусаВозвратаАльфаБанк(ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекЧек, "ЗаказПокупателя"), ПредопределенноеЗначение("Перечисление.СтатусыЗаявкиНаОформлениеКредита.ВозвратСогласован"));

КонецФункции

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста	//	LNK 05.08.2021 07:38:05
Процедура ЗаполнитьЗначенияВКолонке(Значение, Колонка, Таблица)

	Для каждого СтрокаТаблицы Из Таблица Цикл

		СтрокаТаблицы[Колонка] = Значение;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти









