// + HVOYA 30.09.2016 14:55:23, Латышев А.А.
&НаКлиенте
Перем POSТерминал Экспорт;
&НаКлиенте
Перем Порт Экспорт;
&НаКлиенте
Перем СтруктураПараметровДляТерминалов Экспорт;
// - HVOYA 30.09.2016 14:55:23, Латышев А.А. 

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда

		Возврат;

	КонецЕсли;

	Параметры.Свойство("ПрочитатьКарту"	, ПрочитатьКарту);	//	LNK 30.11.2022 11:17:02
	Параметры.Свойство("Заголовок"		, Заголовок);

	Если Параметры.Свойство("КоличествоСимволовПослеЗапятой") Тогда
		КоличествоСимволовПослеЗапятой = Параметры.КоличествоСимволовПослеЗапятой;
	Иначе
		КоличествоСимволовПослеЗапятой = 2;
	КонецЕсли;
	ПервыйВвод = Истина;
	
	Если Параметры.Свойство("МаксимальноеЗначение") Тогда
		МаксимальноеЗначение = Параметры.МаксимальноеЗначение;
	КонецЕсли;
	
	Если Параметры.Свойство("ЧислоВвода") Тогда
		ЧислоВвода    = Параметры.ЧислоВвода;
		ВводимоеЧисло = Формат(ЧислоВвода, "ЧЦ=15 ЧДЦ=2");
	КонецЕсли;
	
	Если Параметры.Свойство("Отрицательное") Тогда
		Отрицательное = Параметры.Отрицательное;
	КонецЕсли;
	
	Если Параметры.Свойство("АвторизацияЭТ") Тогда
		АвторизацияЭТ = Параметры.АвторизацияЭТ;
	КонецЕсли;
	
	Если Параметры.Свойство("ВозвращатьЧислоСтрокой") Тогда
		ВозвращатьЧислоСтрокой = Параметры.ВозвращатьЧислоСтрокой;
	КонецЕсли;

	Параметры.Свойство("БлокироватьИзменениеСуммыОплаты", БлокироватьИзменениеСуммыОплаты);	//	LNK 23.11.2017 08:45:27
	
	Если Не АвторизацияЭТ Тогда
		
		Элементы.ДекорацияНомерКарты.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.ДекорацияНомерКарты.Заголовок = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если АвторизацияЭТ Тогда

		// Проверка и подключение считывателей МК
		ПоддерживаемыеТипыПО = Новый Массив();
		ПоддерживаемыеТипыПО.Добавить("СчитывательМагнитныхКарт");
		// + HVOYA 30.09.2016 17:03:24, Латышев А.А.
		ПоддерживаемыеТипыПО.Добавить("ЭквайринговыйТерминал");
		// - HVOYA 30.09.2016 17:03:24, Латышев А.А. 
		
		МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(ЭтотОбъект, ПоддерживаемыеТипыПО);

	КонецЕсли;

	// + HVOYA 30.09.2016 14:31:22, Латышев А.А.
//	Если Заголовок = "СчитатьКарту" Тогда	- !!! писец! пока нашёл..
	Если ПрочитатьКарту Тогда	//	LNK 30.11.2022 07:39:30

		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();

		// + HVOYA 23.01.2017 13:46:59, Латышев А.А.
		СписокОборудования = МенеджерОборудованияКлиентПовтИсп.ПолучитьСписокОборудования("ЭквайринговыйТерминал");
		// - HVOYA 23.01.2017 13:46:59, Латышев А.А. 

		Если НЕ СписокОборудования.Количество() = 0 тогда 

			СтруктураПараметровДляТерминалов = ПолучитьПорт(РабочееМесто, СписокОборудования);

			Если СтруктураПараметровДляТерминалов = Неопределено Тогда

				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
					"Помилка!"
					, "Не задано параметри для еквайрингового терміналу (номер порту, швидкість).
					|	Тільки ручне введення картки!"
				);

			Иначе	//	LNK 05.05.2017 12:06:16

				ТерминалГотов = ПроверитьТерминал(СтруктураПараметровДляТерминалов);
				Элементы.ДекорацияНомерКарты.Видимость = Истина;

				Если ТерминалГотов Тогда

					ПодключитьОбработчикОжидания("СчитатьКарту", 1, Истина);

				КонецЕсли; 

			КонецЕсли; 

		КонецЕсли;

	КонецЕсли; 
	// - HVOYA 30.09.2016 14:31:22, Латышев А.А. 
	
	УстановитьДоступностьЦифровыхКнопок();

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если АвторизацияЭТ Тогда
		// Отключение считывателей МК
		ПоддерживаемыеТипыПО = Новый Массив();
		ПоддерживаемыеТипыПО.Добавить("СчитывательМагнитныхКарт");

		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(ЭтотОбъект, ПоддерживаемыеТипыПО);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "TracksData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ПолученКодКарты(Параметр[0], Параметр[0]);
			Иначе
				ПолученКодКарты(Параметр[0], Параметр[1][1]);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Команда0(Команда)
	
	ДобавитьЦифру("0")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда1(Команда)
	
	ДобавитьЦифру("1")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда2(Команда)
	
	ДобавитьЦифру("2")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда3(Команда)
	
	ДобавитьЦифру("3")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда4(Команда)
	
	ДобавитьЦифру("4")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда5(Команда)
	
	ДобавитьЦифру("5")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда6(Команда)
	
	ДобавитьЦифру("6")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда7(Команда)
	
	ДобавитьЦифру("7")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда8(Команда)
	
	ДобавитьЦифру("8")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда9(Команда)
	
	ДобавитьЦифру("9")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда0ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("0")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда1ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("1")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда2ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("2")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда3ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("3")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда4ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("4")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда5ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("5")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда6ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("6")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда7ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("7")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда8ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("8")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда9ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("9")
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаТочка(Команда)
	
	Если ПервыйВвод Тогда
		ВводимоеЧисло = "";
		ПервыйВвод = Ложь;
	КонецЕсли;
	
	Если ВводимоеЧисло = "" Тогда
		ВводимоеЧисло = "0";
	КонецЕсли;
	
	ЧислоВхождений = СтрЧислоВхождений(ВводимоеЧисло, ",");
	
	Если Не ЧислоВхождений > 0 Тогда
		ВводимоеЧисло = ВводимоеЧисло + ",";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаСтереть(Команда)
	ВводимоеЧисло = "";
	ПервыйВвод = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура КомандаEnter(Команда)
	
	СтруктураОтвета = Новый Структура;

	Если ВозвращатьЧислоСтрокой Тогда
		СтруктураОтвета.Вставить("ВведенноеЧисло", ВводимоеЧисло);
	Иначе
		СтруктураОтвета.Вставить("ВведенноеЧисло", ПривестиСтрокуКЧислу(ВводимоеЧисло, Истина));
	КонецЕсли;
	
	СтруктураОтвета.Вставить("ДанныеКарты", ДанныеКарты);
	
	Закрыть(СтруктураОтвета)
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ДобавитьЦифру(ВведеннаяЦифраСтрокой)
	
	Если ПервыйВвод Тогда
		ВводимоеЧисло = "";
		ПервыйВвод = Ложь;
	КонецЕсли;
	
	Запятая = Сред(ВводимоеЧисло, СтрДлина(ВводимоеЧисло) - КоличествоСимволовПослеЗапятой, 1);
	
	Если НЕ Запятая = "," тогда
		ВводимоеЧисло = ВводимоеЧисло + ВведеннаяЦифраСтрокой;
	КонецЕсли;
	
	ЧислоВвода = ПривестиСтрокуКЧислу(ВводимоеЧисло, Истина);
	
	ТекущийЭлемент = Элементы.КомандаEnter;
	
	Если ЗначениеЗаполнено(МаксимальноеЗначение) И ЧислоВвода > МаксимальноеЗначение Тогда

		ЧислоВвода = МаксимальноеЗначение;
		ВводимоеЧисло = Формат(ЧислоВвода, "ЧЦ=15; ЧДЦ=" + Формат(КоличествоСимволовПослеЗапятой, "ЧДЦ=; ЧН=0"));

	КонецЕсли;
	
	
КонецПроцедуры


//функция выполняет приведение строки к числу
// Параметры:
//  ЧислоСтрокой           - Строка - Строка приводимая к числу
//  ВозвращатьНеопределено - Булево - Если Истина и строка содержит некорректное значение, то возвращать Неопределено
//
// Возвращаемое значение:
//  Число
//
&НаКлиенте
Функция ПривестиСтрокуКЧислу(ЧислоСтрокой, ВозвращатьНеопределено = Ложь) Экспорт
	
	ОписаниеТипаЧисла = Новый ОписаниеТипов("Число");
	ЗначениеЧисла = ОписаниеТипаЧисла.ПривестиЗначение(ЧислоСтрокой);
	
	Если ВозвращатьНеопределено И (ЗначениеЧисла = 0) Тогда
		
		Стр = Строка(ЧислоСтрокой);
		Если Стр = "" Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Стр = СтрЗаменить(СокрЛП(Стр), "0", "");
		Если (Стр <> "") И (Стр <> ".") И (Стр <> ",") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеЧисла;
	
КонецФункции

&НаКлиенте
Функция ПолученКодКарты(КодКарты, ДанныеДорожек)

	Если ТипЗнч(ДанныеДорожек) = Тип("Массив")
	   И ДанныеДорожек.Количество() > 1
	   И ДанныеДорожек[1] <> Неопределено
	   И Не ПустаяСтрока(ДанныеДорожек[1]) Тогда
		ДанныеКарты = ДанныеДорожек[1];

		ПозицияРазделителя = Найти(ДанныеКарты, "=");
		Если ПозицияРазделителя > 16 Тогда
			НомерКарты = Лев(ДанныеКарты, ПозицияРазделителя - 1);
		
		Иначе
			
			ТекстСообщения = "Вказано неправильну карту або сталася помилка при зчитуванні картки.
							|Повторіть зчитування або використуйте іншу картку";
			
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Помилка!", ТекстСообщения);
			
		КонецЕсли;
	Иначе

		ТекстСообщения = "Вказано неправильну карту або сталася помилка при зчитуванні картки.
						|Повторіть зчитування або використуйте іншу картку";

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Помилка!", ТекстСообщения);

	КонецЕсли;

	Возврат Истина;

КонецФункции

// + HVOYA 30.09.2016 14:34:30, Латышев А.А.
&НаКлиенте
Функция ОжиданиеОтветаТерминала(POSТерминал)
	ЧасОжиданияPOS = 10;
	ЧасНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Пока 1 = 1 Цикл
		LastResult = POSТерминал.LastResult();
		Состояние("Состояние: " + POSТерминал.LastStatMsgDescription());
		Если LastResult <> 2 Тогда
			Возврат ?(LastResult = 0, 0, -1);
		КонецЕсли;
		Если (ТекущаяУниверсальнаяДатаВМиллисекундах() - ЧасНачала)/1000 > ЧасОжиданияPOS Тогда
			ТекстСообщения = "Перевищено час очікування відповіді терміналу";
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Помилка!", ТекстСообщения);
			Возврат -1;
		КонецЕсли; 
	КонецЦикла;
КонецФункции

&НаКлиенте
Процедура СчитатьКарту()
	Перем Значение;
	Перем Параметр;
	Если СтруктураПараметровДляТерминалов.ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикРайфайзенБанк") Тогда
		Если POSТерминал = Неопределено Then
			POSТерминал = Новый COMОбъект("CardPay.PosApi");
			LastResult = POSТерминал.pos_open("com" + Порт , "C:\logAval.txt");
			Если LastResult=0 Тогда
				POSТерминал.pos_close();
				POSТерминал = Неопределено;

				ТекстСообщения = "Вказано неправильну карту або сталася помилка при зчитуванні картки.
								|Повторіть зчитування або використуйте іншу картку";
				
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Помилка!", ТекстСообщения);
				КомандаEnter("");
				Возврат;
			КонецЕсли;
			LastResult = POSТерминал.pos_send(POSТерминал.ACTION_READ_CARD);
			Если LastResult = 0 Тогда
				POSТерминал.pos_close();
				POSТерминал = Неопределено;

				ТекстСообщения = "Вказано неправильну карту або сталася помилка при зчитуванні картки.
								|Повторіть зчитування або використуйте іншу картку";
				
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Помилка!", ТекстСообщения);
				КомандаEnter("");
				Возврат;
			КонецЕсли;
			
			Пока Истина Цикл
				Ответ = POSТерминал.pos_receive(180000);
				Если Ответ = POSТерминал.RESP_MESSAGE или Ответ = POSТерминал.RESP_IDENTIFIER Тогда
				ИначеЕсли Ответ = POSТерминал.RESP_TIMEOUT Тогда
					Режим = РежимДиалогаВопрос.ДаНет;
					Ответ = Вопрос("Вийшов час очікування відповіді, бажаєте ще зачекати?", Режим, 0);
					Если Ответ = КодВозвратаДиалога.Нет Тогда
						POSТерминал.pos_close();
						POSТерминал = Неопределено;
						Возврат;
					КонецЕсли
				ИначеЕсли Ответ = POSТерминал.ACTION_BREAK или Ответ = POSТерминал.RESP_DECLINE Тогда
					Прервать;
				ИначеЕсли Ответ > 0 и Ответ <> POSТерминал.RESP_TIMEOUT Тогда
					Если POSТерминал.pos_get_first(Параметр, Значение) Тогда
						Пока POSТерминал.pos_get_next(Параметр, Значение) Цикл
							Если ЗначениеЗаполнено(Значение) Тогда
								НомерКарты = Значение;
							КонецЕсли; 
						КонецЦикла; 
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;	
		POSТерминал.pos_close();
		POSТерминал = Неопределено;
		Если СтрДлина(НомерКарты) = 16 Тогда
			ВводимоеЧисло = Прав(НомерКарты, 8);
			ДанныеКарты = ВводимоеЧисло;
		ИначеЕсли СтрДлина(НомерКарты) = 8 Тогда
			ВводимоеЧисло = НомерКарты;
			ДанныеКарты = ВводимоеЧисло;
		ИначеЕсли СтрДлина(НомерКарты) = 0 Тогда
			
			ТекстСообщения = "Вказано неправильну карту або сталася помилка при зчитуванні картки.
							|Повторіть зчитування або використуйте іншу картку";
			
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Помилка!", ТекстСообщения);
		КонецЕсли;
	ИначеЕсли СтруктураПараметровДляТерминалов.ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикIngenicoECRCommXПриватбанк") Тогда
		Если POSТерминал = Неопределено Then
			//Initialize library
			POSТерминал = Новый COMОбъект("ECRCommX.BPOS1Lib");
			POSТерминал.CommOpen(Порт,115200);
			LastResult = POSТерминал.Lastresult();
			
		//	LNK 05.05.2017 13:07:53
			Если СтруктураПараметровДляТерминалов.МетодЧтенияКарты = ПредопределенноеЗначение("Перечисление.МетодЧтенияКартыТерминалом.ReadCard") Тогда

				POSТерминал.ReadCard();

			Иначе

				POSТерминал.ReadBankCard();

			КонецЕсли;

			ОжиданиеОтветаТерминала(POSТерминал);
			Если СтрДлина(POSТерминал.PAN) = 16 Тогда
				ВводимоеЧисло = Прав(POSТерминал.PAN, 8);
				ДанныеКарты = ВводимоеЧисло;
			ИначеЕсли СтрДлина(POSТерминал.PAN) = 8 Тогда
				ВводимоеЧисло = POSТерминал.PAN;
				ДанныеКарты = ВводимоеЧисло;
			ИначеЕсли СтрДлина(POSТерминал.PAN) = 0 Тогда

				ТекстСообщения = "Вказано неправильну карту або сталася помилка при зчитуванні картки.
								|Повторіть зчитування або використуйте іншу картку";
				
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Помилка!", ТекстСообщения);
			КонецЕсли;
			POSТерминал.CommClose();
			POSТерминал = Неопределено;
		КонецЕсли;	
	КонецЕсли;	
	КомандаEnter("");
КонецПроцедуры // 

&НаКлиенте
Функция ПроверитьТерминал(СтруктураПараметров)
	Порт = СтруктураПараметров.P_PortNumber;
	Если СтруктураПараметров.ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикРайфайзенБанк") Тогда
		POSТерминал = Новый COMОбъект("CardPay.PosApi");
		LastResult = POSТерминал.pos_open("com" + Порт, "C:\logAval.txt");
		АктивированДемоРежим = Ложь;	
		POSТерминал.pos_close();
		POSТерминал = Неопределено;
		Если Не LastResult=0 Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли СтруктураПараметров.ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикIngenicoECRCommXПриватбанк") Тогда
		POSТерминал = Новый COMОбъект("ECRCommX.BPOS1Lib");
		POSТерминал.CommOpen(Порт,115200);
		LastResult = POSТерминал.Lastresult();
		ОжиданиеОтветаТерминала(POSТерминал);
		POSТерминал.CommClose();
		POSТерминал = Неопределено;
		Если LastResult=0 Тогда
			Возврат Истина;
		Иначе	
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьПорт(РабочееМесто, СписокОборудования)
	
	МассивОборудования = Новый Массив;
	Для каждого Эл Из СписокОборудования Цикл
		МассивОборудования.Добавить(Эл.Ссылка);
	КонецЦикла; 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование.Параметры КАК Параметры,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование.ОбработчикДрайвера КАК ОбработчикДрайвера,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЭквайринговыеТерминалы.ПодключаемоеОборудование.МетодЧтенияКарты, ЗНАЧЕНИЕ(Перечисление.МетодЧтенияКартыТерминалом.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.МетодЧтенияКартыТерминалом.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МетодЧтенияКартыТерминалом.ReadBankCard)
	|		ИНАЧЕ ЭквайринговыеТерминалы.ПодключаемоеОборудование.МетодЧтенияКарты
	|	КОНЕЦ КАК МетодЧтенияКарты
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.ДляСчитыванияКард
	|	И НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|	И ЭквайринговыеТерминалы.ПодключаемоеОборудование В(&Оборудование)"
	);
	Запрос.УстановитьПараметр("Оборудование", МассивОборудования);

	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СтруктураПараметров = Выборка.Параметры.Получить();
		
		Если СтруктураПараметров.Количество() = 0 Тогда
			Возврат Неопределено ;
		Иначе
			СтруктураПараметров.Вставить("ОбработчикДрайвера", Выборка.ОбработчикДрайвера);
		//	LNK 05.05.2017 13:05:53
			СтруктураПараметров.Вставить("МетодЧтенияКарты"  , Выборка.МетодЧтенияКарты);
			Возврат СтруктураПараметров;
		КонецЕсли; 

	Иначе

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПодключаемоеОборудование.ОбработчикДрайвера,
		|	ПодключаемоеОборудование.Параметры,
		|	ВЫБОР
		|		КОГДА ПодключаемоеОборудование.МетодЧтенияКарты = ЗНАЧЕНИЕ(Перечисление.МетодЧтенияКартыТерминалом.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МетодЧтенияКартыТерминалом.ReadBankCard)
		|		ИНАЧЕ ПодключаемоеОборудование.МетодЧтенияКарты
		|	КОНЕЦ КАК МетодЧтенияКарты
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|ГДЕ
		|	ПодключаемоеОборудование.ОбработчикДрайвера = &ОбработчикДрайвера
		|	И ПодключаемоеОборудование.УстройствоИспользуется
		|	И ПодключаемоеОборудование.РабочееМесто = &РабочееМесто"
		);
		Запрос.УстановитьПараметр("ОбработчикДрайвера", ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикIngenicoECRCommXПриватбанк"));
		Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);

		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		Выборка = Результат.Выбрать();
		
		Выборка.Следующий();
		
		СтруктураПараметров = Выборка.Параметры.Получить();
		
		Если СтруктураПараметров.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			СтруктураПараметров.Вставить("ОбработчикДрайвера", Выборка.ОбработчикДрайвера);
		//	LNK 05.05.2017 13:05:53
			СтруктураПараметров.Вставить("МетодЧтенияКарты"  , Выборка.МетодЧтенияКарты);
			Возврат СтруктураПараметров;
		КонецЕсли; 
	КонецЕсли; 
	
КонецФункции // ПолучитьПорт()

//	LNK 23.11.2017 08:54:31
&НаКлиенте
Процедура УстановитьДоступностьЦифровыхКнопок()

	Если БлокироватьИзменениеСуммыОплаты Тогда

		НужноБлокировать = Ложь;
		ИменаБлокируемыхКоманд = ОбщегоНазначенияКлиентСервер.AAD("КомандаСтереть", "КомандаТочка");

		Для Счётчик = 0 По 9 Цикл

			ИменаБлокируемыхКоманд.Добавить("Команда" + СокрЛП(Счётчик));

		КонецЦикла;

		Для каждого Элемент Из Элементы Цикл

			Если ТипЗнч(Элемент) = Тип("КнопкаФормы") И НЕ ПустаяСтрока(Элемент.ИмяКоманды) Тогда

				Если НужноБлокироватьЭлемент(Элемент, ИменаБлокируемыхКоманд) Тогда

					Элемент.Доступность = Ложь;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьЦифровыхКнопок()

&НаКлиенте
Функция НужноБлокироватьЭлемент(Элемент, ИменаБлокируемыхКоманд)

	НужноБлокировать = Ложь;

	Для каждого ИмяКоманды Из ИменаБлокируемыхКоманд Цикл

		Если Лев(Элемент.ИмяКоманды, СтрДлина(ИмяКоманды)) = ИмяКоманды Тогда

			НужноБлокировать = Истина;
			Прервать;

		КонецЕсли;

	КонецЦикла;

	Возврат НужноБлокировать;

КонецФункции // НужноБлокироватьЭлемент()



