&НаКлиенте	//	LNK 27.09.2022 06:33:00
Перем СИ;
///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда

		Возврат;

	КонецЕсли;
	
	ЭтотОбъект().Журнал(ИмяФормы + ".ПриСозданииНаСервере");	//	LNK 02.08.2019 10:56:00

	ЗаписьЖурналаРегистрации("РМК." + ИмяФормы, УровеньЖурналаРегистрации.Информация
	,,, Объект.Версия + ":ПриСозданииНаСервере");

	Если ОбщегоНазначенияРТСервер.РазрешитьРаботуРМКВТекущемУзле(Истина) Тогда

		ОбщегоНазначенияРТВызовСервера.УстановитьЗначениеПараметраСеанса("ФормаРабочегоМестаКассира", СокрЛП(УникальныйИдентификатор));

	//	LNK 27.04.2017 11:28:48
		ОбновитьПовторноИспользуемыеЗначения();	//	на сервере...
		
		УстановитьДоступностьЭлементов();
		
	//	LNK 19.04.2017 14:08:58 - приоритет принятия магазина по КассеККМ
		Магазин = ОбщегоНазначенияРТповтИсп.ОпределитьТекущийМагазин();

		Если НЕ ЗначениеЗаполнено(Магазин) Тогда

			ПолучитьДоступныеМагазины();
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыбораМагазина;

		КонецЕсли;
		
		ПриСозданииНаСервереЗавершение(Отказ, СтандартнаяОбработка);

	Иначе

		Отказ = Истина;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	СИ = Новый СистемнаяИнформация;	//	LNK 27.09.2022 06:33:45

	Если НЕ ПустаяСтрока(Объект.СпецификацияВнешнейОбработки) Тогда

	//	Отладка в режиме внешней обработки!
		Попытка

			АдресВременноеХранилище = "";
			ПоместитьФайл(АдресВременноеХранилище, Объект.СпецификацияВнешнейОбработки, , Ложь);
    		ПодключитьВнешнююОбработку(АдресВременноеХранилище);

		Исключение

			Объект.ИмяВнешнейОбработки = "";
			ТекстОшибки = ОписаниеОшибки();

		КонецПопытки;

	КонецЕсли;

	#Если Не ВебКлиент Тогда
	мИмяКомпьютера = ИмяКомпьютера();
	#КонецЕсли  
	
	ПриОткрытииЗавершение(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	#Если _ Тогда
	СИ = Новый СистемнаяИнформация;
	#КонецЕсли

	СистемаWindows = ?(СИ = Неопределено	//	LNK 27.09.2022 06:46:28
		, Истина
		, (СИ.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СИ.ТипПлатформы = ТипПлатформы.Windows_x86_64)
	);

	Если СистемаWindows И НЕ СанкционированноеЗакрытие Тогда

		Отказ = Истина

	Иначе

		ОбщегоНазначенияРТВызовСервера.УстановитьЗначениеПараметраСеанса("ФормаРабочегоМестаКассира", "");

	КонецЕсли;
	
КонецПроцедуры

//	LNK 25.09.2017 10:32:22
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)


КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФормуМенюРМК" Тогда
		
		УстановитьДоступностьЭлементов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере	//	LNK 16.07.2019 11:09:02
Функция ЭтотОбъект(ТекущийОбъект = Неопределено) 

	Если ТекущийОбъект = Неопределено Тогда

		Возврат РеквизитФормыВЗначение("Объект");

	КонецЕсли;

	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");

	Возврат Неопределено;

КонецФункции

#Область ЗавершающиеПроцедурыОбработчиковОсновныхСобытий

&НаСервере	//	LNK 03.10.2018 07:11:26
Процедура ПриСозданииНаСервереЗавершение(Отказ, СтандартнаяОбработка)

	НомерМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "НомерМагазина", 0, Ложь);
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекПовтИсп.ИспользоватьПодключаемоеОборудование();

КонецПроцедуры

&НаКлиенте	//	LNK 03.10.2018 07:11:31
Процедура ПриОткрытииЗавершение(Отказ)

//	LNK 27.04.2017 11:28:48
	ОбновитьПовторноИспользуемыеЗначения();	//	на клиенте...
	
	ПолучитьРабочееМесто();
	
	//+HVOYA Mykhailo : открытие формы на весь экран
	WSHShell = Новый COMОбъект("WScript.Shell");
    WSHShell.SendKeys("%");
    WSHShell.SendKeys("{LEFT}{LEFT}{ENTER}"); 
    WSHShell.SendKeys("{F10}"); 
	//-HVOYA Mykhailo

//	LNK 08.11.2016 12:02:31
	ПроверитьЗаполнениеРабочегоМеста(МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента());
//	LNK 22.06.2017 09:47:10
	ВыполнитьПервичноеОбращениеКДанным();

КонецПроцедуры
	
#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура МагазиныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Магазины.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Магазин = ТекущиеДанные.Магазин;
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаКнопок;
		
		ПриСозданииНаСервереЗавершение(Ложь, СтандартнаяОбработка);
		ПриОткрытииЗавершение(Ложь);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Кассы.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Если РежимВыбораКассы = "ОткрытьСмену" Тогда
			ОткрытьСмену(ТекущиеДанные.Касса);
		ИначеЕсли РежимВыбораКассы = "ЗакрытьСмену" Тогда
			ЗакрытьСмену(ТекущиеДанные.Касса);
		ИначеЕсли РежимВыбораКассы = "НапечататьОтчетБезГашения" Тогда
			НапечататьОтчетБезГашения(ТекущиеДанные.Касса);
		ИначеЕсли РежимВыбораКассы = "НапечататьНулевойЧек" Тогда
			НапечататьНулевойЧек(ТекущиеДанные.Касса);
		ИначеЕсли РежимВыбораКассы = "НапечататьОтчетОПроданныхТоварах" Тогда
			НапечататьОтчетОПроданныхТоварах(ТекущиеДанные.Касса);
		ИначеЕсли РежимВыбораКассы = "НапечататьПериодическийОтчетПоДатам" Тогда
			НапечататьПериодическийОтчетПоДатам(ТекущиеДанные.Касса);
		ИначеЕсли РежимВыбораКассы = "НапечататьПериодическийОтчетПоНомерам" Тогда
			НапечататьПериодическийОтчетПоНомерам(ТекущиеДанные.Касса);
		КонецЕсли;
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаКнопок;
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаРегистрацияПродаж(Команда)
	
	ПолучитьРабочееМесто();
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();

	Если ПроверитьВозможностьРегистрацииПродаж(ПараметрыИнформации) Тогда

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РабочееМесто"  , РабочееМесто);
		ПараметрыФормы.Вставить("Магазин"       , Магазин);
		ПараметрыФормы.Вставить("мИмяКомпьютера", мИмяКомпьютера);

		Если НЕ Кассы.Количество() = 0 Тогда	//	LNK 18.02.2021 04:49:58

			ПараметрыФормы.Вставить("ТекКассаККМ", Кассы[0].Касса);

		КонецЕсли;

		ОписаниеОповещения = Новый ОписаниеОповещения("ФормаРегистрацииПродажЗавершение", ЭтотОбъект);

		ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.Форма", Объект.ИмяВнешнейОбработки)
			, ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор
			,,
			, ОписаниеОповещения
			, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);

	Иначе

		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 11.09.2019 07:05:10
Процедура ФормаРегистрацииПродажЗавершение(Значение, ДополнительныеПараметры)	Экспорт

	Если ТипЗнч(Значение) = Тип("Структура") Тогда

		Если Значение.Свойство("ТекстСообщенияПослеЗакрытия") Тогда


		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытиеСмены(Команда)
	
	ПолучитьРабочееМесто();
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();

	Если ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации) Тогда
		
		Если ДоступныеКассыККМ = Неопределено ИЛИ ДоступныеКассыККМ.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДоступныеКассыСУчетомОткрытия(Ложь);
		
		Если Кассы.Количество() = 0 Тогда
			
			ЗаголовокИнформации = НСтр("ru = 'Ошибка открытия смены'");
			ТекстИнформации = НСтр("ru = 'Нет касс с закрытыми сменами.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокИнформации, ТекстИнформации);
			
			Возврат;
			
		КонецЕсли;
		
		РежимВыбораКассы = "ОткрытьСмену";

		Если Кассы.Количество() > 1  Тогда

			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыбораКассы;
			Возврат;

		КонецЕсли;
		
		ОткрытьСмену(Кассы[0].Касса);

		Для Счётчик = 1 По 2 Цикл	//+HVOYA Mykhailo : печатаем два нулевых чека

			КомандаНулевойЧек(Неопределено);

		КонецЦикла;

	Иначе

		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаОтчетБезГашения(Команда)
	
	ПолучитьРабочееМесто();
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	Если ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации) Тогда
		
		Если ДоступныеКассыККМ = Неопределено ИЛИ ДоступныеКассыККМ.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДоступныеКассыСУчетомОткрытия(Неопределено);	//	LNK 28.03.2017 13:41:04
	//	ЗаполнитьДоступныеКассыСУчетомОткрытия(Истина);
		
		Если Кассы.Количество() = 0 Тогда
			
			ЗаголовокИнформации = НСтр("ru = 'Ошибка печати отчета без гашения'");
			ТекстИнформации = НСтр("ru = 'Нет касс с открытыми сменами.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокИнформации, ТекстИнформации);
			
			Возврат;
			
		КонецЕсли;
		
		Если Кассы.Количество() > 1  Тогда
			
			РежимВыбораКассы = "НапечататьОтчетБезГашения";
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыбораКассы;
			Возврат;
			
		КонецЕсли;
		
		НапечататьОтчетБезГашения(Кассы[0].Касса)
		
	Иначе
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытиеСмены(Команда)
	
	ПолучитьРабочееМесто();
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();

	Если ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации) Тогда

		Если ДоступныеКассыККМ = Неопределено ИЛИ ДоступныеКассыККМ.Количество() = 0 Тогда

			Возврат;

		КонецЕсли;

		ЗаполнитьДоступныеКассыСУчетомОткрытия(Истина);

		Если Кассы.Количество() = 0 Тогда

			ЗаголовокИнформации = НСтр("ru = 'Ошибка закрытия смены'");
			ТекстИнформации = НСтр("ru = 'Нет касс с открытыми сменами.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокИнформации, ТекстИнформации);

			Возврат;

		КонецЕсли;

		Если Кассы.Количество() > 1  Тогда

			РежимВыбораКассы = "ЗакрытьСмену";
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыбораКассы;
			Возврат;

		КонецЕсли;

		ЗакрытьСмену(Кассы[0].Касса)

	Иначе

		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаСводныйОтчет(Команда)
	
	ОткрытьФорму("Документ.СводныйОтчетПоКассовойСмене.ФормаОбъекта",, ЭтотОбъект, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтчеты(Команда)
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаОтчетов;

КонецПроцедуры

&НаКлиенте
Процедура КомандаНулевойЧек(Команда)
	
	ПолучитьРабочееМесто();
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	Если ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации) Тогда
		
		Если ДоступныеКассыККМ = Неопределено ИЛИ ДоступныеКассыККМ.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДоступныеКассыСУчетомОткрытия(Истина);
		
		Если Кассы.Количество() = 0 Тогда
			
			ЗаголовокИнформации = НСтр("ru = 'Ошибка печати нулевого чека'");
			ТекстИнформации = НСтр("ru = 'Нет касс с открытыми сменами.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокИнформации, ТекстИнформации);
			
			Возврат;
			
		КонецЕсли;
		
		Если Кассы.Количество() > 1  Тогда
			
			РежимВыбораКассы = "НапечататьНулевойЧек";
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыбораКассы;
			Возврат;
			
		КонецЕсли;
		
		НапечататьНулевойЧек(Кассы[0].Касса)
		
	Иначе
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура КомандаОтчетОПроданныхТоварах(Команда)
	
	ПолучитьРабочееМесто();
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	Если ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации) Тогда
		
		Если ДоступныеКассыККМ = Неопределено ИЛИ ДоступныеКассыККМ.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДоступныеКассы();
		
		Если Кассы.Количество() = 0 Тогда
			
			ЗаголовокИнформации = НСтр("ru = 'Ошибка печати отчета о проданных товарах'");
			ТекстИнформации = НСтр("ru = 'Нет доступных касс.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокИнформации, ТекстИнформации);
			
			Возврат;
			
		КонецЕсли;
		
		Если Кассы.Количество() > 1  Тогда
			
			РежимВыбораКассы = "НапечататьОтчетОПроданныхТоварах";
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыбораКассы;
			Возврат;
			
		КонецЕсли;
		
		НапечататьОтчетОПроданныхТоварах(Кассы[0].Касса)
		
	Иначе
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПериодическийОтчетПоДатам(Команда)
	
	ПолучитьРабочееМесто();
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	Если ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации) Тогда
		
		Если ДоступныеКассыККМ = Неопределено ИЛИ ДоступныеКассыККМ.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДоступныеКассы();
		
		Если Кассы.Количество() = 0 Тогда
			
			ЗаголовокИнформации = НСтр("ru = 'Ошибка печати периодического отчета'");
			ТекстИнформации = НСтр("ru = 'Нет доступных касс.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокИнформации, ТекстИнформации);
			
			Возврат;
			
		КонецЕсли;
		
		Если Кассы.Количество() > 1  Тогда
			
			РежимВыбораКассы = "НапечататьПериодическийОтчетПоДатам";
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыбораКассы;
			Возврат;
			
		КонецЕсли;
		
		НапечататьПериодическийОтчетПоДатам(Кассы[0].Касса)
		
	Иначе
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПериодическийОтчетПоНомерам(Команда)
	
	ПолучитьРабочееМесто();
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	Если ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации) Тогда
		
		Если ДоступныеКассыККМ = Неопределено ИЛИ ДоступныеКассыККМ.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДоступныеКассы();
		
		Если Кассы.Количество() = 0 Тогда
			
			ЗаголовокИнформации = НСтр("ru = 'Ошибка печати периодического отчета'");
			ТекстИнформации = НСтр("ru = 'Нет доступных касс.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокИнформации, ТекстИнформации);
			
			Возврат;
			
		КонецЕсли;
		
		Если Кассы.Количество() > 1  Тогда
			
			РежимВыбораКассы = "НапечататьПериодическийОтчетПоНомерам";
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыбораКассы;
			Возврат;
			
		КонецЕсли;
		
		НапечататьПериодическийОтчетПоНомерам(Кассы[0].Касса)
		
	Иначе
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыборПериода(Команда)
	ПолучитьИнтерактивноПериод(НСтр("ru = 'Введите начальный номер.'"), ПериодПериодическогоОтчета);
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбораНачальногоНомера(Команда)
	ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите начальный номер.'"), НачальныйНомерПериодическогоОтчета, 0, Ложь, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбораКонечногоНомера(Команда)
	ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите конечного номер.'"), КонечныйНомерПериодическогоОтчета, 0, Ложь, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкаРМК(Команда)

	ОбработчикОповещения = Новый ОписаниеОповещения("КомандаНастройкаРМК_Завершение", ЭтотОбъект);
	ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаНастройкиРМК", Объект.ИмяВнешнейОбработки),, ЭтотОбъект, УникальныйИдентификатор,,, ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкаРМК_Завершение(Значение, ДополнительныеПараметры)	Экспорт

	УстановитьДоступностьЭлементов();

КонецПроцедуры


&НаКлиенте
Процедура КомандаОбменДанными(Команда)
	
	ОбменДаннымиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрыть(Команда)
	
	СанкционированноеЗакрытие = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗавершениеРаботы(Команда)
	
	СанкционированноеЗакрытие = Истина;
	
	Если МодальныйРежим Тогда
		ЗавершитьРаботуЭтогоСеанса(Ложь);
		Закрыть("ЗавершитьРаботуСистемы");
	Иначе
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаНазадКСпискуКнопок(Команда)
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаКнопок;
	
КонецПроцедуры

// +HVOYA. 01.09.2016 14:12:11, Львова Е.А.
&НаКлиенте
Процедура hiКомандаПосмотретьНовыеАкции(Команда)
	
	МассивНовыхАкций = ОбщегоНазначенияРТСервер.ПолучитьНовыеАкции();
	
	АдресВоВременномХранилищеНовыхАкций = ПоместитьВоВременноеХранилище(МассивНовыхАкций, УникальныйИдентификатор);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВоВременномХранилищеНовыхАкций", АдресВоВременномХранилищеНовыхАкций);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыводаСообщений", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
// -HVOYA. 01.09.2016 14:12:18, Львова Е.А.

&НаКлиенте	//	LNK 12.12.2019 11:59:37
Процедура КомандаСоединениеCRM(Команда)

	ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаСоединениеCRM", Объект.ИмяВнешнейОбработки),, ЭтотОбъект, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	Пользователь = глЗначениеПеременной("ПользовательИзмененныхПрав");
	Если Пользователь = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Элементы.КомандаОтчетБезГашения.Доступность = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтчетОСменеБезГашения, Ложь, Пользователь);
	
	Элементы.КомандаЗакрытиеСмены.Доступность = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЗакрытиеСмены, Ложь, Пользователь);
	
	
	Элементы.КомандаНастройкаРМК.Доступность = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНастройкуРМК, Ложь, Пользователь);
	
	Элементы.КомандаОбменДанными.Доступность = ПланыОбмена.ПоРабочемуМесту.ЭтоРабочееМесто();
	
	Элементы.КомандаЗакрыть.Доступность = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьВыходИзРМКВОбычныйРежим, Ложь, Пользователь);

//	LNK 22.03.2017 16:54:08
	Элементы.УстановитьВремяВРегистраторе.Доступность = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьУстановкуВремениФискальногоРегистратора, Ложь, Пользователь);

КонецПроцедуры // УстановитьДоступностьЭлементов()

&НаСервере
// Проверяет и заполняет необходимые параметры для работы
//
// Параметры
//  Отказ - Булево
//
Функция ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации)
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда

		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка определения рабочего места'");
		
		ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'Не смогли определить рабочее место.
													|Обратитесь к администратору системы.'");
		Возврат Ложь;

	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.Магазин,
	|	КассыККМ.Владелец КАК Организация
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	(НЕ КассыККМ.ПометкаУдаления)
	|	И (НЕ КассыККМ.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	|	И (КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор))
	|	И (КассыККМ.РабочееМесто = &РабочееМестоККМ)
	|	И (КассыККМ.Магазин = &Магазин)"
	);
	Запрос.УстановитьПараметр("Магазин"        , Магазин);
	Запрос.УстановитьПараметр("РабочееМестоККМ", РабочееМесто);
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультатаЗапроса = Результат.Выгрузить();

	Если ТаблицаРезультатаЗапроса.Количество() = 0  Тогда

		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
		
		ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'Не смогли определить доступные кассы ККМ.
													|Обратитесь к администратору системы.'");
		Возврат Ложь;

	КонецЕсли;

	ТаблицаТаблицаРезультатаЗапросаСкопированная = ТаблицаРезультатаЗапроса.Скопировать();
	ТаблицаТаблицаРезультатаЗапросаСкопированная.Свернуть("КассаККМ");
	ДоступныеКассыККМ.ЗагрузитьЗначения(ТаблицаТаблицаРезультатаЗапросаСкопированная.ВыгрузитьКолонку("КассаККМ"));
	
	Возврат Истина;
	
КонецФункции // ПроверитьВозможнотьРаботы()

&НаСервере
Функция ПроверитьВозможностьРегистрацииПродаж(ПараметрыИнформации)
	
	Если ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации) Тогда
		
		Дата = Дата('00010101');
		
		Для каждого ПроверяемаяКасса Из ДоступныеКассыККМ Цикл
		
			СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(ПроверяемаяКасса.Значение);
			
			КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;

			ТекстОшибкиЗаголовок = НСтр("ru='Кассовая смена не открыта!'");
			Если НЕ ЗначениеЗаполнено(Дата) Тогда

				Дата = ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера();

			КонецЕсли;
			
			Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Дата, ТекстОшибкиЗаголовок) Тогда
				
				ПараметрыИнформации.ЗаголовокИнформации = ТекстОшибкиЗаголовок;
				
				ПараметрыИнформации.ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Касса ККМ №%1 - '") + ТекстОшибкиЗаголовок,
					ПроверяемаяКасса.Значение
				);
				
				Дата = Дата('00010101');

				Возврат Ложь;

			КонецЕсли;

		КонецЦикла;

		Возврат Истина;

	Иначе

		Возврат Ложь;

	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПолучитьРабочееМесто()

	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО

		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();

	КонецЕсли;

	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокФормы()
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
		Заголовок = "РМК: не указано рабочее место";
	Иначе
		Заголовок = "(" + Формат(НомерМагазина, "ЧЦ=3; ЧВН=; ЧГ=") + ")РМК: " + РабочееМесто;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДоступныеМагазины()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Магазины.НомерМагазина КАК НомерМагазина,
	|	Магазины.Ссылка КАК Магазин
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.ВведенВЭксплуатацию
	|	И НЕ Магазины.ПометкаУдаления
	|	И НЕ Магазины.СкладУправляющейСистемы
	|	И НЕ Магазины.Блокирован
	|	И ВЫБОР
	|			КОГДА &ЭтоГлавныйУзел = ИСТИНА
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Магазины.Организация = &ТекущаяОрганизация
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерМагазина"
	);
	Запрос.УстановитьПараметр("ЭтоГлавныйУзел"    , ОбменДаннымиПовтИсп.ЭтоГлавныйУзел());
	Запрос.УстановитьПараметр("ТекущаяОрганизация", ПараметрыСеанса.ТекущаяОрганизация);

	Магазины.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

// Процедура формирует массив касс с учетом открытия смен
//
// Параметры:
//  ПроверкаКассСОткрытымиСменами - Булево: 
//                                  Истина - формиируется список касс с открытыми сменами
//                                  Ложь   - формиируется список касс с закрытыми сменами
//
&НаСервере
Процедура ЗаполнитьДоступныеКассыСУчетомОткрытия(ПроверкаКассСОткрытымиСменами)
	
	Кассы.Очистить();
	
	Для каждого ЭлементМассива Из ДоступныеКассыККМ Цикл
		
		ПроверяемаяКасса = ЭлементМассива.Значение;
		
		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(ПроверяемаяКасса);
		
		Если ПроверкаКассСОткрытымиСменами = Неопределено ИЛИ СтруктураСостояниеКассовойСмены.СменаОткрыта = ПроверкаКассСОткрытымиСменами Тогда
			
			СтрокаКассы = Кассы.Добавить();
			СтрокаКассы.Касса = ПроверяемаяКасса;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеКассы()
	
	Кассы.Очистить();
	
	Для каждого ЭлементМассива Из ДоступныеКассыККМ Цикл
			
		СтрокаКассы = Кассы.Добавить();
		СтрокаКассы.Касса = ЭлементМассива.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСмену(КассаККМ)

	ОтветПользователя = ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМК(НСтр("ru = 'Закрыть смену?'"));

	Если НЕ ВРЕГ(ОтветПользователя) = "ДА" Тогда

		Возврат;

	КонецЕсли;

	//+HVOYA Mykhailo : узнаем, печатать ли в данной кассе чек на принер или пробивать по фискальнику
	Попытка
		ПечатьНаПринтерЧеков = ОбщегоНазначенияРТСервер.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(КассаККМ, "ПечатьЧековНаПринтер");
	Исключение
		ПечатьНаПринтерЧеков = Ложь;	
	КонецПопытки;
	//-HVOYA Mykhailo
	
	//+HVOYA Mykhailo
	Если ПечатьНаПринтерЧеков Тогда  // передаем отчет на принтер
		Попытка
			ТАБОТЧЕТ = ПечатьОтчетПоКассе(КассаККМ,Истина);
			ТАБОТЧЕТ.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
		Исключение
		КонецПопытки;
	КонецЕсли; 
	//-HVOYA Mykhailo

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("КассаККМ"                  , КассаККМ);
	ПараметрыЗаполнения.Вставить("ВыполнитьЗакрытиеСразу"    , Истина);

	ОткрытьФорму("Обработка.ЗакрытиеКассовойСмены.Форма"
		, ПараметрыЗаполнения
		, ЭтотОбъект
		, УникальныйИдентификатор
		,
		,
		,
		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСмену(КассаККМ)

	Результат      = Ложь;
	ОписаниеОшибки = "";

	ПараметрыКассыККМ       = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка открытия смены'");

	Если НЕ РозничныеПродажиСервер.ПроверитьВозможностьОткрытияКассовойСмены(КассаККМ, ОписаниеОшибки) Тогда

		ТекстСообщения = НСтр("ru = 'Отказано! При проверке возможности открытия смены
		                            |произошла ошибка. Смена НЕ открыта!
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

		Возврат;

	КонецЕсли;

	Если ИспользоватьПодключаемоеОборудование И ЗначениеЗаполнено(ИдентификаторУстройства)  Тогда

	//	Подключение устройства
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда

			Если ИдентификаторУстройства <> Неопределено  Тогда

				ОписаниеОшибки = "";
				Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(ЭтотОбъект,
				                                                                              ИдентификаторУстройства,
				                                                                              ОписаниеОшибки);
				Если Результат Тогда

					ВходныеПараметры  = Неопределено;
					ВыходныеПараметры = Неопределено;
					
					//Открыть смену на фискальном регистраторе
					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
					                                                        "OpenDay",
					                                                        ВходныеПараметры,
					                                                        ВыходныеПараметры);
					
					Если Результат Тогда
						
						Результат = РозничныеПродажиСервер.ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки);
						
						Если НЕ Результат Тогда
							
							ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
							                            |Смена не открыта.
							                            |Дополнительное описание:
							                            |%ДополнительноеОписание%'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
							ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
							ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
							
						КонецЕсли;

					Иначе

						ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
						                      |Смена не открыта на фискальном регистраторе.
						                      |Дополнительное описание:
						                      |%ДополнительноеОписание%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,
						                             "%ДополнительноеОписание%",
						                             ВыходныеПараметры[1]);
						ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
						ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

					КонецЕсли;
					
					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(ЭтотОбъект,
					                                                                 ИдентификаторУстройства);
					
				Иначе
					
					ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
					                            |Смена не открыта на фискальном регистраторе.
					                            |Дополнительное описание:
					                            |%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
					ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
					ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
			
		КонецЕсли;

	Иначе
		
		Результат = РозничныеПродажиСервер.ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки);
		
		Если Не Результат Тогда
			
			ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
			                            |Смена не открыта.
			                            |Дополнительное описание:
			                            |%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
			
		КонецЕсли;
		
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура НапечататьОтчетБезГашения(КассаККМ)

	Результат = Ложь;
	
	ПараметрыКассыККМ       = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка печати отчета без гашения'");

	Если ЗначениеЗаполнено(ИдентификаторУстройства)  Тогда

		ОписаниеОшибки = "";

		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда

		//	Подключение устройства
			Если ИдентификаторУстройства <> Неопределено Тогда

				Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(ЭтотОбъект
					, ИдентификаторУстройства
					, ОписаниеОшибки
				);

				Если Результат Тогда

					ВходныеПараметры  = Неопределено;
					ВыходныеПараметры = Неопределено;

					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
					                                                        "PrintXReport",
					                                                        ВходныеПараметры,
					                                                        ВыходныеПараметры);

					Если Не Результат Тогда

						ТекстСообщения = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.
						|%ОписаниеОшибки%
						|Отчет на фискальном регистраторе не сформирован.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
						ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
						ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

					КонецЕсли;

					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(ЭтотОбъект,
					                                                                 ИдентификаторУстройства);

				Иначе

					ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.'") + Символы.ПС + ОписаниеОшибки;
					ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
					ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

				КонецЕсли;

			КонецЕсли;

		Иначе

			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");

			ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьВремяВРегистраторе(Команда)
	
	ПолучитьРабочееМесто();
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	Если ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации) Тогда
		
		Если ДоступныеКассыККМ = Неопределено ИЛИ ДоступныеКассыККМ.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДоступныеКассыСУчетомОткрытия(Ложь);
		
		Если Кассы.Количество() = 0 Тогда
			
			ЗаголовокИнформации = НСтр("ru = 'Ошибка установки времени в регистраторе'");
			ТекстИнформации = НСтр("ru = 'Нет касс с закрытыми сменами.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(ЗаголовокИнформации, ТекстИнформации);
			
			Возврат;
			
		КонецЕсли;
		
		УстановитьВремяВФискальномРегистраторе(Кассы[0].Касса)
		
	Иначе
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВремяВФискальномРегистраторе(КассаККМ)

	Результат = Ложь;
	
	ПараметрыКассыККМ       = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка установки времени в регистраторе'");

	Если ЗначениеЗаполнено(ИдентификаторУстройства)  Тогда
		ОписаниеОшибки = "";

		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			// Подключение устройства

			Если ИдентификаторУстройства <> Неопределено Тогда
				Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(ЭтотОбъект,
				                                                                              ИдентификаторУстройства, ОписаниеОшибки);

				Если Результат Тогда
					ВходныеПараметры  = Неопределено;
					ВыходныеПараметры = Неопределено;

					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
					                                                        "setTime",
					                                                        ВходныеПараметры,
					                                                        ВыходныеПараметры);

					Если НЕ Результат Тогда

						ТекстСообщения = НСтр("ru = 'При установке времени на фискальном регистраторе произошла ошибка.
						|%ОписаниеОшибки%
						|Время на фискальном регистраторе не установлено.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
						ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
						ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

					Иначе

						ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Изменение времени в регистраторе'");
						ПараметрыИнформации.ТекстИнформации = "Время в фискальном регистраторе установлено.";
						ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

					КонецЕсли;

					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(ЭтотОбъект,
					                                                                 ИдентификаторУстройства);
				Иначе
					ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.'") + Символы.ПС + ОписаниеОшибки;
					ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
					ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");

			ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбменДаннымиСервер()
	
	Если ОбменДаннымиВызовСервера.ОбменДаннымиВключен("ПоРабочемуМесту") 
		И ПланыОбмена.ПоРабочемуМесту.ЭтоРабочееМесто() Тогда
		
		ВыборкаУзлов = ПланыОбмена.ПоРабочемуМесту.Выбрать();
		Пока ВыборкаУзлов.Следующий() Цикл
			Если ВыборкаУзлов.Ссылка <> ПланыОбмена.ПоРабочемуМесту.ЭтотУзел() Тогда
				ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Ложь, ВыборкаУзлов.Ссылка);			
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура НапечататьНулевойЧек(КассаККМ)

	Результат = Ложь;
	
	ПараметрыКассыККМ       = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка печати отчета без гашения'");
	
	Если ЗначениеЗаполнено(ИдентификаторУстройства)  Тогда
		ОписаниеОшибки = "";

		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			// Подключение устройства

			Если ИдентификаторУстройства <> Неопределено Тогда
				Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(ЭтотОбъект,
				                                                                              ИдентификаторУстройства, ОписаниеОшибки);

				Если Результат Тогда
					ВходныеПараметры  = Неопределено;
					ВыходныеПараметры = Неопределено;

					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
					                                                        "PrintNullReceipt",
					                                                        ВходныеПараметры,
					                                                        ВыходныеПараметры);

					Если Не Результат Тогда
						ТекстСообщения = НСтр("ru = 'При печати нулевого чека произошла ошибка.
						|%ОписаниеОшибки%
						|Чек не напечатан на фискальном регистраторе.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
						ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
						ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
					КонецЕсли;

					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(ЭтотОбъект,
					                                                                 ИдентификаторУстройства);
				Иначе
					ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.'") + Символы.ПС + ОписаниеОшибки;
					ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
					ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");

			ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьОтчетОПроданныхТоварах(КассаККМ)

	Результат = Ложь;
	
	ПараметрыКассыККМ       = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка печати отчета без гашения'");
	
	Если ЗначениеЗаполнено(ИдентификаторУстройства)  Тогда
		ОписаниеОшибки = "";

		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			// Подключение устройства

			Если ИдентификаторУстройства <> Неопределено Тогда
				Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(ЭтотОбъект,
				                                                                              ИдентификаторУстройства, ОписаниеОшибки);

				Если Результат Тогда
					ВходныеПараметры  = Неопределено;
					ВыходныеПараметры = Неопределено;

					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
					                                                        "PrintSoldReport",
					                                                        ВходныеПараметры,
					                                                        ВыходныеПараметры);

					Если Не Результат Тогда
						ТекстСообщения = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.
						|%ОписаниеОшибки%
						|Отчет на фискальном регистраторе не сформирован.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
						ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
						ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
					КонецЕсли;

					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(ЭтотОбъект,
					                                                                 ИдентификаторУстройства);
				Иначе
					ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.'") + Символы.ПС + ОписаниеОшибки;
					ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
					ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");

			ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьПериодическийОтчетПоДатам(КассаККМ)

	Результат = Ложь;
	
	ПараметрыКассыККМ       = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка печати отчета без гашения'");
	
	Если ЗначениеЗаполнено(ИдентификаторУстройства)  Тогда
		ОписаниеОшибки = "";

		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			// Подключение устройства

			Если ИдентификаторУстройства <> Неопределено Тогда
				Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(ЭтотОбъект,
				                                                                              ИдентификаторУстройства, ОписаниеОшибки);

				Если Результат Тогда
					ВходныеПараметры  = Новый Массив;
					ВыходныеПараметры = Неопределено;

					ВходныеПараметры.Добавить(ПериодПериодическогоОтчета.ДатаНачала);
					ВходныеПараметры.Добавить(ПериодПериодическогоОтчета.ДатаОкончания);
					
					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
					                                                        "PrintPReportDate",
					                                                        ВходныеПараметры,
					                                                        ВыходныеПараметры);

					Если Не Результат Тогда
						ТекстСообщения = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.
						|%ОписаниеОшибки%
						|Отчет на фискальном регистраторе не сформирован.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
						ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
						ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
					КонецЕсли;

					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(ЭтотОбъект,
					                                                                 ИдентификаторУстройства);
				Иначе
					ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.'") + Символы.ПС + ОписаниеОшибки;
					ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
					ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");

			ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьПериодическийОтчетПоНомерам(КассаККМ)

	Результат = Ложь;
	
	ПараметрыКассыККМ       = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка печати отчета без гашения'");
	
	Если ЗначениеЗаполнено(ИдентификаторУстройства)  Тогда
		ОписаниеОшибки = "";

		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			// Подключение устройства

			Если ИдентификаторУстройства <> Неопределено Тогда
				Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(ЭтотОбъект,
				                                                                              ИдентификаторУстройства, ОписаниеОшибки);

				Если Результат Тогда
					ВходныеПараметры  = Новый Массив;
					ВыходныеПараметры = Неопределено;

					ВходныеПараметры.Добавить(НачальныйНомерПериодическогоОтчета);
					ВходныеПараметры.Добавить(КонечныйНомерПериодическогоОтчета);
					
					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
					                                                        "PrintPReportNumber",
					                                                        ВходныеПараметры,
					                                                        ВыходныеПараметры);

					Если Не Результат Тогда
						ТекстСообщения = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.
						|%ОписаниеОшибки%
						|Отчет на фискальном регистраторе не сформирован.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
						ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
						ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
					КонецЕсли;

					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(ЭтотОбъект,
					                                                                 ИдентификаторУстройства);
				Иначе
					ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.'") + Символы.ПС + ОписаниеОшибки;
					ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
					ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");

			ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получение  от пользователя числа 
//
// Параметры:
//  Заголовок - Строка;
//  ЧислоВвода - Число;
//  МаксимальноеЗначение - Число;
//
// Возвращаемое значение:
//   Булево
//
&НаКлиенте
Функция ПолучитьИнтерактивноЧисло(Заголовок, ЧислоВвода, МаксимальноеЗначение, Отрицательное, ВозвращатьЧислоСтрокой)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок"             , Заголовок);
	ПараметрыОткрытия.Вставить("МаксимальноеЗначение"  , МаксимальноеЗначение);
	ПараметрыОткрытия.Вставить("ЧислоВвода"            , ЧислоВвода);
	ПараметрыОткрытия.Вставить("Отрицательное"         , Отрицательное);
	ПараметрыОткрытия.Вставить("ВозвращатьЧислоСтрокой", ВозвращатьЧислоСтрокой);
	ПараметрыОткрытия.Вставить("КоличествоСимволовПослеЗапятой", 0);
	
	Результат = ОткрытьФормуМодально(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВводаЧисла", Объект.ИмяВнешнейОбработки), ПараметрыОткрытия, УникальныйИдентификатор);
	
	Если НЕ Результат = Неопределено Тогда
		ЗначениеВыбораЧисло = Результат.ВведенноеЧисло;
		Если ЗначениеЗаполнено(ЗначениеВыбораЧисло) Тогда
			ЧислоВвода = ЗначениеВыбораЧисло;
		Иначе
			ЧислоВвода = 0;
		КонецЕсли;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	
КонецФункции // ПолучитьИнтерактивноЧисло()

&НаКлиенте
Функция ПолучитьИнтерактивноПериод(Заголовок, ПериодВвода)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок"             , Заголовок);
	ПараметрыОткрытия.Вставить("ВведенныйПериод"       , ПериодВвода);
	
	Результат = ОткрытьФормуМодально(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВводаПериода", Объект.ИмяВнешнейОбработки), ПараметрыОткрытия, УникальныйИдентификатор);
	
	Если НЕ Результат = Неопределено Тогда
		ЗначениеВыбора = Результат.ВведенныйПериод;
		Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
			ПериодВвода = ЗначениеВыбора;
		Иначе
			ПериодВвода = Новый СтандартныйПериод();
		КонецЕсли;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	
КонецФункции // ПолучитьИнтерактивноЧисло()

&НаСервере
Процедура УдалитьСтрокуНаСервере()
	Попытка
		Объект.Товары.Удалить(Объект.Товары.Количество()-1);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	УдалитьСтрокуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРабочегоМеста(РабочееМестоКлиента)

//	LNK 08.11.2016 11:16:00 - ВРЕМЕННО! Необходимо обеспечить приявязку ВСЕХ рабочих мест к Магазину!
	//ЗаполнениеОбъектовСобытия.ПроверитьЗаполнениеТекущегоРабочегоМеста(РабочееМестоКлиента);

КонецПроцедуры
 

//+HVOYA Mykhailo : функции для печати отчета на принтер
&НаСервере
Функция ПечатьОтчетПоКассе(ТекКасса,ЭтоЗед=Ложь)
		
	КодЯзыкаПечать = "uk";

	ВыводитьУпаковки   = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Отчет';uk='Звіт'", КодЯзыкаПечать);
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КассаККМ_ОтчетДляПД";
	
	ТекКассоваяСмена = Неопределено;
	
	ЗапросКассСмена = Новый Запрос;
	ЗапросКассСмена.Текст = 
	"ВЫБРАТЬ
	|	КассоваяСмена.Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.КассаККМ = &КассаККМ
	|	И КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|
	|СГРУППИРОВАТЬ ПО
	|	КассоваяСмена.Ссылка";
	ЗапросКассСмена.УстановитьПараметр("КассаККМ", ТекКасса);
	Выборка = ЗапросКассСмена.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекКассоваяСмена = Выборка.Ссылка;
	КонецЦикла;
	
	Если НЕ ТекКассоваяСмена = Неопределено Тогда
		
		Макет = УправлениеПечатью.ПолучитьМакет("Обработка.РМК.ОтчетДляПД",КодЯзыкаПечать);

		
		// 1. выводим шапку
		ОбластьШапкаЧека         = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапкаЧека.Параметры.Заголовок = ?(ЭтоЗед,"Z-ЗВІТ","X-ЗВІТ");
		НашМагазин = ОбщегоНазначенияРТСервер.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(ТекКасса,"Магазин");
		Попытка
			ОбластьШапкаЧека.Параметры.Магазин =  НашМагазин;
		Исключение
		КонецПопытки;
		Попытка
			ОбластьШапкаЧека.Параметры.Адрес =  ВернутьНадписьМагазин(НашМагазин,"Адрес");
		Исключение
		КонецПопытки;
		Попытка
			ОбластьШапкаЧека.Параметры.Телефон =  ВернутьНадписьМагазин(НашМагазин,"Телефон");
		Исключение
		КонецПопытки;
		ТабличныйДокумент.Вывести(ОбластьШапкаЧека);

		// 2. выводим тело
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КассоваяСмена.КассаККМ.НомерВМагазине КАК КассаККМ,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЧекККМ.Ссылка) КАК ВсегоЧековККМ,
		|	СУММА(ВЫБОР
		|			КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
		|				ТОГДА ЧекККМ.СуммаДокумента
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаПродаж,
		|	СУММА(ВЫБОР
		|			КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
		|				ТОГДА ЧекККМ.СуммаДокумента
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаВозвратов,
		|	СУММА(ВЫБОР
		|			КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЧековККМПродажа,
		|	СУММА(ВЫБОР
		|			КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЧековККМВозврат,
		|	СУММА(0) КАК Безнал,
		|	КассоваяСмена.Номер КАК НомерСмены,
		|	КассоваяСмена.НачалоКассовойСмены КАК НачалоСмены,
		|	0 КАК ВнесеноВКассу,
		|	0 КАК ВыемкаИзКассы,
		|	0 КАК СуммаВКассе,
		|	&Дата,
		|	СУММА(ВЫБОР
		|			КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
		|				ТОГДА ЧекККМ.СуммаДокумента
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Наличные
		|ИЗ
		|	Документ.ЧекККМ КАК ЧекККМ,
		|	Документ.КассоваяСмена КАК КассоваяСмена
		|ГДЕ
		|	ЧекККМ.КассаККМ = &КассаККМ
		|	И ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробитый)
		|	И КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
		|	И ЧекККМ.Проведен = ИСТИНА
		|	И КассоваяСмена.Ссылка = &КассоваяСмена
		|
		|СГРУППИРОВАТЬ ПО
		|	КассоваяСмена.КассаККМ.НомерВМагазине,
		|	КассоваяСмена.Номер,
		|	КассоваяСмена.НачалоКассовойСмены");
		Запрос.УстановитьПараметр("КассаККМ", ТекКасса);
		Запрос.УстановитьПараметр("КассоваяСмена", ТекКассоваяСмена);
		Запрос.УстановитьПараметр("Дата",ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера());
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбластьТелоЧека         = Макет.ПолучитьОбласть("Тело");
			ОбластьТелоЧека.Параметры.Заполнить(Выборка);
			НачСмены = Выборка.НачалоСмены;
			ОбластьТелоЧека.Параметры.ВнесеноВКассу = ПолучитьВнесение(ТекКасса,НачСмены);
			ОбластьТелоЧека.Параметры.ВыемкаИзКассы = ПолучитьВыемку(ТекКасса,НачСмены);
			ОбластьТелоЧека.Параметры.СуммаВКассе   = ПолучитьОстаток(ТекКасса);
			ТабличныйДокумент.Вывести(ОбластьТелоЧека);
			Прервать;
		КонецЦикла; 

	КонецЕсли; 
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервере
Функция ВернутьНадписьМагазин(ТекМаг,Вид)

	ТипКИ = ?(Вид = "Адрес",Перечисления.ТипыКонтактнойИнформации.Адрес,Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	Запр = Новый Запрос;
	Запр.Текст =
	"ВЫБРАТЬ
	|	МагазиныКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.Магазины.КонтактнаяИнформация КАК МагазиныКонтактнаяИнформация
	|ГДЕ
	|	МагазиныКонтактнаяИнформация.Ссылка = &Ссылка
	|	И МагазиныКонтактнаяИнформация.Тип = &Тип";
	Запр.УстановитьПараметр("Ссылка",ТекМаг);
	Запр.УстановитьПараметр("Тип",ТипКИ);
	ТЗ = Запр.Выполнить().Выгрузить();
	Если ТЗ.Количество()=0 Тогда
		Возврат "";
	Иначе
		Возврат ТЗ[0].Представление;
	КонецЕсли; 
	
КонецФункции 

&НаСервере
Функция ПолучитьВыемку(ТекКассаККМ,ДатаНач)
	
	Выемка = 0;
	
	ЗапросВыемка = Новый Запрос;
	ЗапросВыемка.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВыемкаДенежныхСредствИзКассыККМ.СуммаДокумента), 0) КАК ВыемкаИзКассы
	|ИЗ
	|	Документ.ВыемкаДенежныхСредствИзКассыККМ КАК ВыемкаДенежныхСредствИзКассыККМ
	|ГДЕ
	|	ВыемкаДенежныхСредствИзКассыККМ.Дата >= &Дата
	|	И ВыемкаДенежныхСредствИзКассыККМ.Проведен = ИСТИНА
	|	И ВыемкаДенежныхСредствИзКассыККМ.КассаККМ = &КассаККМ";
	
	ЗапросВыемка.УстановитьПараметр("Дата", ДатаНач);
	ЗапросВыемка.УстановитьПараметр("КассаККМ", ТекКассаККМ);
	
	РЕЗ = ЗапросВыемка.Выполнить().Выбрать();
	
	Пока РЕЗ.Следующий() Цикл
		
		Выемка = РЕЗ.ВыемкаИзКассы;
		Прервать;
		
	КонецЦикла; 
	
	Возврат Выемка;
	
КонецФункции // ПолучитьВыемку(ТекКассаККМ)()

&НаСервере
Функция ПолучитьВнесение(ТекКассаККМ,ДатаНач)
	
	Внесено = 0;
	
	ЗапросВнесено = Новый Запрос;
	ЗапросВнесено.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВнесениеДенежныхСредствВКассуККМ.СуммаДокумента), 0) КАК ВнесеноВКассу
	|ИЗ
	|	Документ.ВнесениеДенежныхСредствВКассуККМ КАК ВнесениеДенежныхСредствВКассуККМ
	|ГДЕ
	|	ВнесениеДенежныхСредствВКассуККМ.Дата >= &Дата
	|	И ВнесениеДенежныхСредствВКассуККМ.Проведен = ИСТИНА
	|	И ВнесениеДенежныхСредствВКассуККМ.КассаККМ = &КассаККМ";
	ЗапросВнесено.УстановитьПараметр("Дата", ДатаНач);
	ЗапросВнесено.УстановитьПараметр("КассаККМ", ТекКассаККМ);
	
	РЕЗ = ЗапросВнесено.Выполнить().Выбрать();
	
	Пока РЕЗ.Следующий() Цикл
		Внесено = РЕЗ.ВнесеноВКассу;
		Прервать;
	КонецЦикла; 
	
	Возврат Внесено;
	
КонецФункции // ПолучитьВнесение(ТекКассаККМ)

&НаСервере
Функция ПолучитьОстаток(ТекКассаККМ)
	
	Остаток = 0;
	
	ЗапросСуммаВКассе = Новый Запрос;
	ЗапросСуммаВКассе.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ДенежныеСредстваККМОстатки.СуммаОстаток) КАК СуммаВКассе
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваККМ.Остатки КАК ДенежныеСредстваККМОстатки
	|ГДЕ
	|	ДенежныеСредстваККМОстатки.КассаККМ = &КассаККМ";
	
	ЗапросСуммаВКассе.УстановитьПараметр("КассаККМ", ТекКассаККМ);
	
	РЕЗ = ЗапросСуммаВКассе.Выполнить().Выбрать();
	Пока РЕЗ.Следующий() Цикл
		Остаток = РЕЗ.СуммаВКассе;
		Прервать;
	КонецЦикла;
	
	Возврат Остаток;
	
КонецФункции // ПолучитьВнесение(ТекКассаККМ)

//	LNK 22.06.2017 09:45:50
&НаСервере
Процедура ВыполнитьПервичноеОбращениеКДанным()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИнформационныеКарты.Ссылка,
	|	ИнформационныеКарты.Код,
	|	ИнформационныеКарты.Наименование,
	|	ИнформационныеКарты.ВидДисконтнойКарты,
	|	ИнформационныеКарты.ВидКарты,
	|	ИнформационныеКарты.ВладелецКарты,
	|	ИнформационныеКарты.КодКарты
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|ГДЕ
	|	ИнформационныеКарты.КодКарты В (""987654321"", ""НЕТТАКОЙКАРТЫ"")"
	);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаРегистра.Штрихкод,
	|	ТаблицаРегистра.Владелец,
	|	ТаблицаРегистра.Характеристика,
	|	ТаблицаРегистра.ТипШтрихкода,
	|	ТаблицаРегистра.Упаковка
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Штрихкод В (""1234567890123"", ""7890123123456"")"
	);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

КонецПроцедуры

&НаСервере	//	LNK 28.09.2018 10:06:58
Процедура ПодключитьВнешнююОбработку(АдресВременноеХранилище)

	ВнешниеОбработки.Подключить(АдресВременноеХранилище, Объект.ИмяВнешнейОбработки, Ложь);

КонецПроцедуры








