#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Перем ТоварыПараметр;

//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда

		Возврат;

	КонецЕсли;

	РежимАдминистратора = РольДоступна(Метаданные.Роли.АдминистраторСистемы)
					ИЛИ   РольДоступна(Метаданные.Роли.ДобавлениеИзменениеПрограммЛояльности)
					ИЛИ   РольДоступна(Метаданные.Роли.ДобавлениеИзменениеСкидки);

	Параметры.Свойство("Контрагент"			, Контрагент);
	Параметры.Свойство("Магазин"			, Магазин);
	Параметры.Свойство("НомерТелефона"		, НомерТелефона);
	Параметры.Свойство("ТоварыДляОплаты"	, ТоварыПараметр);
	Параметры.Свойство("РежимКонтрольногоОткрытия", РежимКонтрольногоОткрытия);

	Если ТипЗнч(ТоварыПараметр) = Тип("Массив") Тогда

		Для каждого ЭлементТовары Из ТоварыПараметр Цикл

			СтрокаТаблицы = ТоварыДляОплаты.Добавить();
			СтрокаТаблицы.КлючСвязи		= ЭлементТовары.КлючСвязи;
			СтрокаТаблицы.КлючСвязиБонусныхБаллов = ЭлементТовары.КлючСвязиБонусныхБаллов;
			СтрокаТаблицы.Номенклатура	= ЭлементТовары.Номенклатура;
			СтрокаТаблицы.Упаковка		= ЭлементТовары.Упаковка;
			СтрокаТаблицы.Количество	= ЭлементТовары.Количество;
			СтрокаТаблицы.СуммаСНДС		= ЭлементТовары.СуммаСНДС;

		КонецЦикла;

	КонецЕсли;

	ТоварыДляОплаты.Сортировать("КлючСвязиБонусныхБаллов");

	ДанныеВозврата = Новый Структура(
		"СуммаБонусныхБалловОплатить, АдресДанныеРаспределенияВоВременномХранилище"
		, 0
		, ""
	);

//	LNK 18.06.2021 10:10:51
	Если ТехническаяПоддержкаВызовСервера.ОтладочныйРежимРаботы() ИЛИ РежимКонтрольногоОткрытия Тогда

	//	для ускорения процесса отладки.. пока все кнопки понажимаешь!
		ПодтверждениеОтправлено = Истина;
		ПодтверждениеПолучено	= Истина;

	КонецЕсли;

	ДействияПриИзмененииКодаПодтверждения(Отказ, Истина);	//	LNK 18.06.2021 10:15:17

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УстановитьДоступностьЭлементовФормы(Истина);
	НапомнитьПользователюОДействияхССуммой();

КонецПроцедуры

&НаСервере	//	LNK 27.02.2021 07:43:08
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	ТекстОшибокЗаполнения = "";

	Для каждого ПроверяемоеИмя Из ПроверяемыеРеквизиты Цикл

		Если ПроверяемоеИмя = "Объект" Тогда

			Продолжить;

		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ЭтотОбъект[ПроверяемоеИмя]) Тогда

			Отказ = Истина;
			ТекстОшибокЗаполнения = ТекстОшибокЗаполнения + ?(ПустаяСтрока(ТекстОшибокЗаполнения), "", Символы.ПС)
			+ ПроверяемоеИмя;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СуммаБонусныхБалловОплатитьПриИзменении(Элемент)

	СуммаИзмененаПользователем = Истина;

	ВыполнитьРаспределениеСуммыБонусныхБаллов(СуммаБонусныхБалловОплатить);

	УстановитьДоступностьЭлементовФормы();

	ТекущийЭлемент = Элементы.СуммаБонусныхБалловОплатить;

КонецПроцедуры

#Область ОтправкаСообщенияSMS

&НаКлиенте
Процедура ОтправитьКодПодтвержденияSMS(Команда)

	Если ПроверитьЗаполнение() Тогда

		ПоказатьВопрос(Новый ОписаниеОповещения("ОтправитьКодПодтвержденияSMSЗавершение", ЭтотОбъект)
			, "Буде надіслано SMS за вказаним номером. Підтвердьте своє рішення:", РежимДиалогаВопрос.ОКОтмена
			, 60, КодВозвратаДиалога.ОК, "ІДЕНТИФІКАЦІЯ", КодВозвратаДиалога.Отмена);

	Иначе

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("В операції відмовлено!", "Необхідно заповнити всі обов'язкові поля:" + ТекстОшибокЗаполнения);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКодПодтвержденияSMSЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда

		Если ТехническаяПоддержкаВызовСервера.ОтладочныйРежимРаботы() ИЛИ ОтправитьКодПодтвержденияSMSНаСервере(НомерТелефона, ИмяКомпьютера(), Контрагент) Тогда

			ПодтверждениеОтправлено = Истина;
			ПоказатьОповещениеПользователя("Код успішно надіслано на телефон" + Символы.ПС + "«" + НомерТелефона + "»");

		КонецЕсли;

		УстановитьДоступностьЭлементовФормы();

		ТекущийЭлемент = Элементы.КодПодтверждения;

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтправитьКодПодтвержденияSMSНаСервере(НомерТелефона, ИмяКлиентскогоКомпьютера, Контрагент)

	ДополнительныеПараметры = Новый Структура(
		"ИмяКомпьютера, Контрагент", ИмяКлиентскогоКомпьютера, Контрагент);

	Возврат ВерификацияКлиентовСервер.ОтправитьКодПодтверждения(ОтправкаSMS.ПодготовитьНомерТелефона(НомерТелефона), ДополнительныеПараметры, Истина);

КонецФункции

#КонецОбласти

#Область ПолучениеКодаПодтверждения

&НаКлиенте
Процедура КодПодтвержденияПриИзменении(Элемент)

	ПоказатьОповещениеПользователя("Перевірка номера телефону"
	,, "Надіслано запит на отримання останнього коду підтвердження ..."
	, БиблиотекаКартинок.Вопрос32, СтатусОповещенияПользователя.Информация);

	ПодтверждениеПолучено = Ложь;	//	сбросим возможное подтверждение

	Отказ = Ложь;	//	LNK 01.11.2022 06:22:14

	Если ТехническаяПоддержкаВызовСервера.ОтладочныйРежимРаботы() Тогда

		ДанныеКлиента = Новый Структура(
			"Указан, КодКлиента"
			, Истина
			, КодПодтверждения
		);

	Иначе

		ДанныеКлиента = КодПодтвержденияПриИзмененииНаСервере(НомерТелефона);

	КонецЕсли;

	Если ДанныеКлиента.Указан Тогда

		Если СокрЛП(ДанныеКлиента.КодКлиента) = СокрЛП(КодПодтверждения) Тогда

			ПодтверждениеПолучено = Истина;

			ПоказатьОповещениеПользователя("Перевірка номера телефону"
			,, "Вітаємо! Код підтвердження відповідає необхідному."
			, БиблиотекаКартинок.Информация32, СтатусОповещенияПользователя.Информация);

			ТекущийЭлемент = Элементы.СуммаБонусныхБалловОплатить;

		Иначе

			ПоказатьОповещениеПользователя("Перевірка номера телефону"
			,, "Код підтвердження не співпадає з надісланим на номер телефону «" + НомерТелефона + "»"
			, БиблиотекаКартинок.Ошибка32, СтатусОповещенияПользователя.Важное);

			ТекущийЭлемент = Элементы.КодПодтверждения;

		КонецЕсли;

	Иначе

		ПоказатьОповещениеПользователя("Перевірка номера телефону"
		,, "Код підтвердження не отримано. Можливо, вказаний номер «" + НомерТелефона + "» не відповідає дійсному!"
		, БиблиотекаКартинок.Ошибка32, СтатусОповещенияПользователя.Важное);

		ТекущийЭлемент = Элементы.КодПодтверждения;
	
	КонецЕсли;

	ДействияПриИзмененииКодаПодтверждения(Отказ);	//	LNK 18.06.2021 10:15:17

	Если Отказ = Истина Тогда

	//	LNK 01.11.2022 06:26:24	- пропала связь или ещё чего!
		ПоказатьОповещениеПользователя("Контроль інформації"
		,, "Інформація для використання бонусів не є актуальною!"
		, БиблиотекаКартинок.Ошибка32, СтатусОповещенияПользователя.Важное);

	КонецЕсли;

	УстановитьДоступностьЭлементовФормы();
	НапомнитьПользователюОДействияхССуммой();

КонецПроцедуры

&НаСервере
Процедура ДействияПриИзмененииКодаПодтверждения(Отказ, ПриОткрытии = Ложь)

	Если ПодтверждениеПолучено = Истина ИЛИ ПриОткрытии = Истина Тогда

		ЗаполнитьДеревоБонусныхНакоплений(Отказ);
		ВыполнитьРаспределениеСуммыБонусныхБаллов(ТоварыДляОплаты.Итог("СуммаСНДС"), ПриОткрытии);

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция КодПодтвержденияПриИзмененииНаСервере(НомерТелефона)

	Возврат ВерификацияКлиентовСервер.ПолучитьКодПодтверждения(ОтправкаSMS.ПодготовитьНомерТелефона(НомерТелефона), Истина);

КонецФункции
	
#КонецОбласти

&НаКлиенте	//	LNK 17.11.2021 05:35:34
Процедура НапомнитьПользователюОДействияхССуммой()

	Если ПодтверждениеПолучено = Истина И НЕ СуммаИзмененаПользователем = Истина Тогда

		ПоказатьОповещениеПользователя("СУМА БОНУСНИХ БАЛІВ"
		,, "Необхідно уточнити (ввести руками) потрібну суму та натиснути [Enter] на клавіатурі."
		, БиблиотекаКартинок.Информация32, СтатусОповещенияПользователя.Информация);

		ТекущийЭлемент = Элементы.СуммаБонусныхБалловОплатить;

		ПодключитьОбработчикОжидания("НапомнитьПользователюОДействияхССуммой", 10, Истина);

	КонецЕсли;

КонецПроцедуры


#Область ПоддержкаОбщегоФункционалаФормы

&НаКлиенте	//	LNK 24.07.2019 09:48:08
Процедура УстановитьДоступностьЭлементовФормы(ПриОткрытии = Ложь)

	Элементы.ДеревоНакопленийПотом.Видимость = РежимАдминистратора;

	Элементы.ОтправитьКодПодтвержденияSMS.Доступность	= НЕ ПодтверждениеОтправлено;
	Элементы.КодПодтверждения.ТолькоПросмотр			= НЕ ПодтверждениеОтправлено ИЛИ ПодтверждениеПолучено;
	Элементы.СуммаБонусныхБалловОплатить.ТолькоПросмотр = НЕ ПодтверждениеПолучено;
	Элементы.СуммаБонусныхБалловОплатить.ЦветФона = ?(СуммаИзмененаПользователем = Истина, Новый Цвет, WebЦвета.ТусклоРозовый);

	Элементы.ПрименитьВведенныеЗначения.Доступность = ПодтверждениеПолучено И СуммаИзмененаПользователем И СуммаБонусныхБалловОплатить > 0;

	Элементы.ДеревоНоменклатура.Видимость = ПодтверждениеПолучено И СуммаИзмененаПользователем И НЕ ПриОткрытии;

	Если ПодтверждениеПолучено Тогда

		Если СуммаИзмененаПользователем = Истина Тогда

				ТекущийЭлемент = Элементы.ПрименитьВведенныеЗначения;

		Иначе	ТекущийЭлемент = Элементы.СуммаБонусныхБалловОплатить;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПрименитьВведенныеЗначения(Команда)

	Если НЕ РозничныеПродажиСлужебный.ПроверитьПереданныеВЦентрЧеки(Контрагент) Тогда

	//	LNK 01.11.2022 06:45:03
		ПоказатьОповещениеПользователя("Контроль інформації"
		,, "Інформація для використання бонусів не є актуальною!"
		, БиблиотекаКартинок.Ошибка32, СтатусОповещенияПользователя.Важное);

	Иначе

		ДанныеВозврата.СуммаБонусныхБалловОплатить = СуммаБонусныхБалловОплатить;
		ДанныеВозврата.АдресДанныеРаспределенияВоВременномХранилище = АдресДанныеРаспределенияВоВременномХранилище;
		Закрыть(ДанныеВозврата);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоБонусныхНакоплений(Отказ)

	ДеревоЗначенийСейчас = РеквизитФормыВЗначение("ДеревоНакопленийСейчас", Тип("ДеревоЗначений"));
	ДеревоЗначенийПотом  = РеквизитФормыВЗначение("ДеревоНакопленийПотом", Тип("ДеревоЗначений"));
	#Если _ Тогда
	ДеревоЗначенийСейчас = Новый ДеревоЗначений;
	ДеревоЗначенийПотом  = Новый ДеревоЗначений;
	#КонецЕсли

//	ДеревоНакоплений.ПолучитьСтроки() - коллекция строк
	ДеревоЗначенийСейчас.Строки.Очистить();
	ДеревоЗначенийПотом.Строки.Очистить();

	УчетнаяПолитика = ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику();

	ПараметрыЗапроса = Новый Структура(
		"Магазин, ТоварыДляОплаты, ПрограммаЛояльности, ТипыБонусов, ТолькоТекущийОстаток"
		, Магазин
		, ТоварыДляОплаты.Выгрузить()
		,
		, ОбщегоНазначенияКлиентСервер.AAD(Перечисления.ТипыБонусов.Привлечение, Перечисления.ТипыБонусов.Органический)
		, Ложь
	);

	ТаблицаНакоплений = БонусныеБаллыСервер.BPS_ПолучитьОстаткиИДвиженияБонусныхБаллов(Контрагент, ПараметрыЗапроса);
	#Если _ Тогда
	ТаблицаНакоплений = Новый ТаблицаЗначений;
	#КонецЕсли

	Если НЕ ТаблицаНакоплений.Колонки.Количество() = 0 Тогда	//	LNK 01.11.2022 06:05:42

	//	Обработка текущего остатка накоплений
		СтрокиТаблицы  = ТаблицаНакоплений.НайтиСтроки(Новый Структура("ТекущийОстаток", Истина));

		УстановитьПоказателиОбщегоСостоянияСчёта();

		РодительСейчас = ДеревоЗначенийСейчас.Строки.Добавить();
		РодительСейчас.Значение = "СЕЙЧАС";

		Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл

			ВеткаТипБонуса = РодительСейчас.Строки.Найти(СтрокаТаблицы.ТипБонусов, "Значение");

			Если ВеткаТипБонуса = Неопределено Тогда

				ВеткаТипБонуса = РодительСейчас.Строки.Добавить();
				ВеткаТипБонуса.Значение = СтрокаТаблицы.ТипБонусов;

			КонецЕсли;

			ВеткаДерева = ДобавитьСтрокуДереваСейчас(ВеткаТипБонуса, СтрокаТаблицы);

			Для каждого СтрокаТовар Из СтрокаТаблицы.ТоварыПрограмм Цикл

				ДобавитьСтрокуДереваНоменклатура(ВеткаДерева, СтрокаТовар, УчетнаяПолитика);

			КонецЦикла;

			ВеткаДерева.СуммаНакопленоРезерв = ВеткаДерева.СуммаНакоплено;

		КонецЦикла;

		РодительСейчас.СуммаНакоплено = РодительСейчас.Строки.Итог("СуммаНакоплено");

		ЗначениеВРеквизитФормы(ДеревоЗначенийСейчас, "ДеревоНакопленийСейчас");

	//	---------------------------------------------------------------------------------------

	//	Обработка последующийх периодов
		СтрокиТаблицы = ТаблицаНакоплений.НайтиСтроки(Новый Структура("ТекущийОстаток", Ложь));
		РодительПотом = ДеревоЗначенийПотом.Строки.Добавить();
		РодительПотом.Значение = "ПОТОМ";

		Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл

			ВеткаДерева = ДобавитьСтрокуДереваПотом("ПериодТекст", РодительПотом, СтрокаТаблицы);

			СтрокиТаблицыПрограммы = ТаблицаНакоплений.НайтиСтроки(Новый Структура("ПериодТекст", СтрокаТаблицы.ПериодТекст));

			Для каждого СтрокаТаблицыПрограмма Из СтрокиТаблицыПрограммы Цикл

				ДобавитьСтрокуДереваПотом("ПрограммаЛояльности", ВеткаДерева, СтрокаТаблицыПрограмма);

			КонецЦикла;

		КонецЦикла;

		ЗначениеВРеквизитФормы(ДеревоЗначенийПотом, "ДеревоНакопленийПотом");

	Иначе

	//	.. очищаем
		ЗначениеВРеквизитФормы(ДеревоЗначенийСейчас, "ДеревоНакопленийСейчас");
		ЗначениеВРеквизитФормы(ДеревоЗначенийПотом, "ДеревоНакопленийПотом");
		Отказ = Истина;	//	LNK 01.11.2022 06:23:30

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДобавитьСтрокуДереваСейчас(Ветка, СтрокаТаблицы)

	ВеткаДерева = Ветка.Строки.Добавить();
	ВеткаДерева.Значение = СтрокаТаблицы.ПрограммаЛояльности;
	ВеткаДерева.Период   = СтрокаТаблицы.Период;
	ВеткаДерева.СуммаНакоплено = СтрокаТаблицы.Сумма;

	Ветка.СуммаНакоплено = Ветка.СуммаНакоплено + ВеткаДерева.СуммаНакоплено;
	Ветка.СуммаНакопленоРезерв = Ветка.СуммаНакоплено;	//	для восстановления

	Возврат ВеткаДерева;

КонецФункции

Функция ДобавитьСтрокуДереваНоменклатура(Ветка, СтрокаТаблицы, УчетнаяПолитика)

	ВеткаДерева = Ветка.Строки.Добавить();
	ВеткаДерева.Значение = СтрокаТаблицы.Номенклатура;
	ВеткаДерева.КлючСвязиБонусныхБаллов = СтрокаТаблицы.КлючСвязиБонусныхБаллов;
	ВеткаДерева.Упаковка = СтрокаТаблицы.Упаковка;
	ВеткаДерева.ПрограммаЛояльности = СтрокаТаблицы.ПрограммаЛояльности;
	ВеткаДерева.БезОграничения = СтрокаТаблицы.БезОграничения;
	ВеткаДерева.Приоритет      = СтрокаТаблицы.Приоритет;
	ВеткаДерева.СуммаСНДС      = СтрокаТаблицы.СуммаСНДС;
	ВеткаДерева.МаксимальныйПроцентОплатыБонусами = СтрокаТаблицы.МаксимальныйПроцентОплатыБонусами;
	ВеткаДерева.ТипБонусов     = СтрокаТаблицы.ТипБонусов;

	ВеткаДерева.СуммаНакоплено = Ветка.СуммаНакоплено;
	ВеткаДерева.СуммаДоступная = Мин(
		ВеткаДерева.СуммаСНДС * СтрокаТаблицы.МаксимальныйПроцентОплатыБонусами / 100,
		Ветка.СуммаНакоплено);
	ВеткаДерева.СуммаДоступная = ?(ВеткаДерева.СуммаДоступная = ВеткаДерева.СуммаСНДС
		, ВеткаДерева.СуммаДоступная - Макс(0.10, УчетнаяПолитика.ЦенаПродажиМинимальная)
		, ВеткаДерева.СуммаДоступная
	);

	Возврат ВеткаДерева;

КонецФункции

&НаСервереБезКонтекста
Функция ДобавитьСтрокуДереваПотом(Имя, Ветка, СтрокаТаблицы)

	ВеткаДерева = Ветка.Строки.Добавить();
	ВеткаДерева.Значение = СтрокаТаблицы[Имя];
	ВеткаДерева.Период   = СтрокаТаблицы.Период;
	ВеткаДерева.СуммаНакоплено = СтрокаТаблицы.Сумма;
	ВеткаДерева.СуммаИзменение = СтрокаТаблицы.Изменение;

	Возврат ВеткаДерева;

КонецФункции

&НаСервере	//	LNK 04.02.2022 07:20:15
Процедура УстановитьПоказателиОбщегоСостоянияСчёта()

	СуммаБонусныхБалловАктивных = 0;
	СуммаБонусныхБалловВРезерве = 0;

	ПараметрыЗапроса = Новый Структура(
		"ТипыБонусов, ТолькоТекущийОстаток, Команда"
		, ОбщегоНазначенияКлиентСервер.AAD(Перечисления.ТипыБонусов.Привлечение, Перечисления.ТипыБонусов.Органический, Перечисления.ТипыБонусов.Акционный)
		, Истина
		, "ОбщееСостояниеСчёта"
	);

	ДанныеОтвета = БонусныеБаллыСервер.BPS_ПолучитьОстатокБонусныхБаллов(Контрагент, ПараметрыЗапроса);

	Если НЕ(ДанныеОтвета.Ошибка = Истина ИЛИ НЕ ДанныеОтвета.Свойство("ДанныеСчёта")) Тогда

		СуммаБонусныхБалловАктивных	= ДанныеОтвета.ДанныеСчёта.СуммаБонусныхБаллов;
		СуммаБонусныхБалловВРезерве	= ДанныеОтвета.ДанныеСчёта.СуммаБонусныхБалловВРезерве;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СписаниеБонусныхНакопленийПоНоменклатуреИПрограммам

&НаСервере
Процедура ВыполнитьРаспределениеСуммыБонусныхБаллов(СуммаБонусныхБалловДляПогашения, ПриОткрытии = Ложь)

	ДеревоПрограмм = РеквизитФормыВЗначение("ДеревоНакопленийСейчас", Тип("ДеревоЗначений"));
	ДеревоТоваров  = РеквизитФормыВЗначение("ДеревоНоменклатура"	 , Тип("ДеревоЗначений"));

	ДеревоТоваров.Строки.Очистить();

	ТаблицаДляСписания = БонусныеБаллыСервер.ТаблицаНакопленийРазвернутаяПустая();
	ЗаполнитьТаблицуДляСписания(ДеревоПрограмм, ТаблицаДляСписания);
	ТаблицаДляСписания.Сортировать("Номенклатура, Приоритет Убыв, ПриоритетТипа Убыв");

	ПараметрыРаспределения = Новый Структура(
		"СуммаБонусныхБалловДляПогашения, ТоварыДляОплаты, ТаблицаДляСписанияГотова"
		, ?(ПриОткрытии, 0, СуммаБонусныхБалловДляПогашения)
		, ТоварыДляОплаты.Выгрузить()
		, Истина
	);

	РаботаемСОбщимМодулем = ПустаяСтрока(Объект.СпецификацияВнешнейОбработки);	//	отладочный механизм

	Если РаботаемСОбщимМодулем Тогда

		ДанныеРаспределения = БонусныеБаллыВызовСервера.РаспределитьСуммуБонусныхБаллов(ЭтотОбъект
			, "ТоварыДляОплаты"
			, ТаблицаДляСписания
			, ПараметрыРаспределения
		);

	Иначе	//	LNK 26.10.2021 06:05:58 ОТЛАДКА ТОЛЬКО ДЛЯ КРИВЦОВА! НЕ ЗАБЫВАЕМ!.

		ДанныеРаспределения = ЭтотОбъект().РаспределитьСуммуБонусныхБаллов(ЭтотОбъект
			, "ТоварыДляОплаты"
			, ТаблицаДляСписания
			, ПараметрыРаспределения
		);

	КонецЕсли;

	Для каждого СтрокаВедущая Из ДанныеРаспределения.ТоварыДляОплаты Цикл

		ВеткаНоменклатура = ДеревоТоваров.Строки.Добавить();
		ВеткаНоменклатура.Значение		= СтрокаВедущая.Номенклатура;
		ВеткаНоменклатура.СуммаСНДС		= СтрокаВедущая.СуммаСНДС;
		ВеткаНоменклатура.СуммаСписания = СтрокаВедущая.СуммаБонусныхБалловСписано;

		СтрокиТаблицыОплат = ДанныеРаспределения.ОплатаБонуснымиБаллами.НайтиСтроки(Новый Структура("КлючСвязиБонусныхБаллов", СтрокаВедущая.КлючСвязиБонусныхБаллов));

		Для каждого СтрокаТаблицыОплат Из СтрокиТаблицыОплат Цикл

			ВеткаПрограмма = ВеткаНоменклатура.Строки.Добавить();
			ВеткаПрограмма.Значение		 = СтрокаТаблицыОплат.ПрограммаЛояльности;
			ВеткаПрограмма.СуммаСписания = СтрокаТаблицыОплат.СуммаБонусныхБаллов;

		КонецЦикла;

	КонецЦикла;

//	---------------------------------------------------------------------------------------

	ЗначениеВРеквизитФормы(ДеревоПрограмм , "ДеревоНакопленийСейчас");
	ЗначениеВРеквизитФормы(ДеревоТоваров  , "ДеревоНоменклатура");

	СуммаБонусныхБалловОплатить = ДанныеРаспределения.ТоварыДляОплаты.Итог("СуммаБонусныхБалловСписано");

	Если ПриОткрытии = Истина Тогда

		Элементы.СуммаБонусныхБалловОплатить.МаксимальноеЗначение = СуммаБонусныхБалловОплатить;
		СуммаБонусныхБалловМаксимум = СуммаБонусныхБалловОплатить;

	Иначе

		АдресДанныеРаспределенияВоВременномХранилище = ПоместитьВоВременноеХранилище(ДанныеРаспределения, УникальныйИдентификатор);

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьТаблицуДляСписания(ДеревоЗначений, ТаблицаДляСписания)

	Для каждого ВеткаДерева Из ДеревоЗначений.Строки Цикл

		Если ВеткаДерева.Строки.Количество() = 0 Тогда
			
			Если ТипЗнч(ВеткаДерева.Значение) = Тип("СправочникСсылка.Номенклатура") Тогда

				СтрокаТаблицы = ТаблицаДляСписания.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВеткаДерева);
				СтрокаТаблицы.Номенклатура	 = ВеткаДерева.Значение;
				СтрокаТаблицы.Упаковка		 = ВеткаДерева.Упаковка;
				СтрокаТаблицы.КлючСвязиБонусныхБаллов = ВеткаДерева.КлючСвязиБонусныхБаллов;
				СтрокаТаблицы.ПриоритетТипа	 = БонусныеБаллыПовтИсп.ПриоритетТипаБонусов(СтрокаТаблицы.ТипБонусов);
				СтрокаТаблицы.СуммаПрограммы = ВеткаДерева.СуммаНакоплено;

			КонецЕсли;

		Иначе

			ЗаполнитьТаблицуДляСписания(ВеткаДерева, ТаблицаДляСписания);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере	//	LNK 16.07.2019 11:09:02
Функция ЭтотОбъект(ТекущийОбъект = Неопределено) 

	Если ТекущийОбъект = Неопределено Тогда

		Возврат РеквизитФормыВЗначение("Объект");

	КонецЕсли;

	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");

	Возврат Неопределено;

КонецФункции
	
#КонецОбласти
















