#Область ОбработчикиОсновныхСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда

		Возврат;

	КонецЕсли;

	Параметры.Свойство("ТекКассаККМ", ТекКассаККМ);
	Параметры.Свойство("РаботаемБезДисплеяПокупателя", РаботаемБезДисплеяПокупателя);

	Заголовок = "Операції «" + ТекКассаККМ + "»";

	ЗаполнитьОтчетНаСервере();	//+HVOYA Mykhailo

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура ЗакрытьФорму(Команда)

	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ОборотнаяВедомость(Команда)

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТекКассаККМ", ТекКассаККМ);

	ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаОборотнойВедомости", Объект.ИмяВнешнейОбработки)
		, ПараметрыОткрытия
		, ЭтотОбъект
		, ЭтотОбъект
		,,
		, //ОписаниеОповещения
		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);

КонецПроцедуры

&НаКлиенте
Процедура СлужебнаяВыдача(Команда)
	
	ВывестиИнформациюНаДисплейПокупателя("Сервис");
	
	ЗначениеВыбораКасса = ВыбраннаяКассаККМ();
	
	Если НЕ ЗначениеЗаполнено(ЗначениеВыбораКасса) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеВыбораСумма = 0;
	
	Если ПолучитьИнтерактивноЧисло("Вкажіть суму виїмки", ЗначениеВыбораСумма, 0, Ложь, Ложь) Тогда
		
		Если ЗначениеЗаполнено(ЗначениеВыбораСумма) Тогда
			//Обработка ввода 
			ТекстСообщения = "";
			ОшибкаТранзакции = Ложь;
			ДенежныеСредстваКлиент.ВыемкаДенег(
				ЗначениеВыбораСумма,
				ЗначениеВыбораКасса,
				УникальныйИдентификатор,
				ОшибкаТранзакции,
				ТекстСообщения
			);
			Если ОшибкаТранзакции Тогда
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Помилка виїмки грошей", ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
    //+HVOYA Mykhailo
	ЗаполнитьОтчетНаСервере();
	//-HVOYA Mykhailo

КонецПроцедуры

&НаКлиенте	//	LNK 13.11.2022 06:35:47
Процедура СлужебныйВзнос(Команда)

	Если НЕ ВозможностьВнесенияДенег() Тогда

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Немає документів щодо внесення коштів");

		ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");

		Возврат;

	КонецЕсли;
	
	ВывестиИнформациюНаДисплейПокупателя("Сервис");

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТекКассаККМ", ТекКассаККМ);
	ПараметрыОткрытия.Вставить("Организации", МассивОрганизацийКлиент);

	ОписаниеОповещения = Новый ОписаниеОповещения("СлужебныйВзносЗавершение", ЭтотОбъект);
		
	ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаВыбораВнесенияДенег", Объект.ИмяВнешнейОбработки)
		, ПараметрыОткрытия
		, ЭтотОбъект
		, ЭтотОбъект
		,,
		, ОписаниеОповещения
		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);

КонецПроцедуры

&НаКлиенте	//	LNK 13.11.2022 06:35:47
Процедура СлужебныйВзносЗавершение(РезультатВыбора, ДополнительныеСвойства)	Экспорт

	Если НЕ РезультатВыбора = Неопределено И ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		
		ТекстСообщения = "";
		ОшибкаТранзакции = Ложь;

		ДенежныеСредстваКлиент.ВнесениеДенег(
			РезультатВыбора.Сумма,
			РезультатВыбора.РасходныйКассовыйОрдер,
			РезультатВыбора.Касса,
			УникальныйИдентификатор,
			ОшибкаТранзакции,
			ТекстСообщения
		);

		Если ОшибкаТранзакции Тогда

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Помилка внесення грошів", ТекстСообщения)

		КонецЕсли;

	КонецЕсли;

	ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");

	ЗаполнитьОтчетНаСервере();	//+HVOYA Mykhailo

КонецПроцедуры

&НаКлиенте
Процедура ОтчетZ(Команда)
	
	Попытка
		ЗакрытьСмену(ТекКассаККМ);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетX(Команда)
	
	ПолучитьРабочееМесто();

	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	Попытка
		НапечататьОтчетБезГашения(ТекКассаККМ);
	Исключение
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПериодическийОтчет(Команда)

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТекКассаККМ", ТекКассаККМ);

	ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаПериодическогоОтчета", Объект.ИмяВнешнейОбработки)
		, ПараметрыОткрытия
		, ЭтотОбъект
		, ЭтотОбъект
		,,
		, //ОписаниеОповещения
		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);

КонецПроцедуры
	
#КонецОбласти

#Область ПоддержкаФункционалаФормы

&НаСервере	//+HVOYA Mykhailo
Процедура ЗаполнитьОтчетНаСервере()
	
	//находим текущую кассовую смену
	КС = Документы.КассоваяСмена.ПустаяСсылка();
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.КассаККМ = &КассаККМ
	|	И КассоваяСмена.СтатусКассовойСмены = &СтатусКассовойСмены
	|	И КассоваяСмена.Проведен = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассоваяСмена.Дата УБЫВ"
	);
	Запрос.УстановитьПараметр("КассаККМ",ТекКассаККМ);
	Запрос.УстановитьПараметр("СтатусКассовойСмены",Перечисления.СтатусыКассовойСмены.Открыта);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КС = Выборка.Ссылка;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(КС) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&ТекДата КАК ТекущаяДата,
	|	ВыемкаСредств.Выемка КАК СуммаВыдачи,
	|	ВнесениеСредств.Внесение КАК СуммаВзноса,
	|	ОстаткиСредств.Остаток КАК СуммаОстатка,
	|	ТекПродажи.СтоимостьПродаж КАК СуммаПродаж,
	|	ТекПродажиКредит.СтоимостьПродажКредит КАК СуммаПродажВКредит,
	|	ПодарочныеСертификаты.СуммаПодарочныхСертификатов КАК СуммаПодарочныхСертификатов
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ДенежныеСредстваККМОбороты.СуммаОборот) КАК Выемка
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваККМ.Обороты(&НачалоДня, &КонецДня, Регистратор, КассаККМ = &КассаККМ) КАК ДенежныеСредстваККМОбороты
	|	ГДЕ
	|		ДенежныеСредстваККМОбороты.Регистратор ССЫЛКА Документ.ВыемкаДенежныхСредствИзКассыККМ) КАК ВыемкаСредств,
	|	(ВЫБРАТЬ
	|		СУММА(ДенежныеСредстваККМОбороты.СуммаОборот) КАК Внесение
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваККМ.Обороты(&НачалоДня, &КонецДня, Регистратор, КассаККМ = &КассаККМ) КАК ДенежныеСредстваККМОбороты
	|	ГДЕ
	|		ДенежныеСредстваККМОбороты.Регистратор ССЫЛКА Документ.ВнесениеДенежныхСредствВКассуККМ) КАК ВнесениеСредств,
	|	(ВЫБРАТЬ
	|		СУММА(ДенежныеСредстваККМОстатки.СуммаОстаток) КАК Остаток
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваККМ.Остатки(&КонецДня, КассаККМ = &КассаККМ) КАК ДенежныеСредстваККМОстатки) КАК ОстаткиСредств,
	|	(ВЫБРАТЬ
	|		СУММА(ПродажиОбороты.СтоимостьОборот) КАК СтоимостьПродаж
	|	ИЗ
	|		РегистрНакопления.Продажи.Обороты(&НачалоДня, &КонецДня, , ДокументПродажи.КассаККМ = &КассаККМ) КАК ПродажиОбороты
	|	ГДЕ
	|		ПродажиОбороты.ДокументПродажи.КассаККМ = &КассаККМ) КАК ТекПродажи,
	|	(ВЫБРАТЬ
	|		СУММА(ПродажиПоПлатежнымКартамОбороты.СуммаОборот) КАК СтоимостьПродажКредит
	|	ИЗ
	|		РегистрНакопления.ПродажиПоПлатежнымКартам.Обороты(&НачалоДня, &КонецДня, Регистратор, ЭквайринговыйТерминал.Касса = &КассаККМ) КАК ПродажиПоПлатежнымКартамОбороты) КАК ТекПродажиКредит,
	|	(ВЫБРАТЬ
	|		СУММА(ТаблицаПогашения.ПодарочныйСертификат.Номинал) КАК СуммаПодарочныхСертификатов
	|	ИЗ
	|		Документ.ЧекККМ КАК Ведущая
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.ПогашениеПодарочныхСертификатов КАК ТаблицаПогашения
	|			ПО Ведущая.Ссылка = ТаблицаПогашения.Ссылка
	|	ГДЕ
	|		Ведущая.Проведен
	|		И Ведущая.КассаККМ = &КассаККМ
	|		И Ведущая.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробитый)
	|		И Ведущая.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ) И КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)) КАК ПодарочныеСертификаты"
	);
	Запрос.УстановитьПараметр("КассаККМ" , КС.КассаККМ);
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(КС.НачалоКассовойСмены));
	Запрос.УстановитьПараметр("КонецДня" , Новый Граница( ?(ЗначениеЗаполнено(КС.ОкончаниеКассовойСмены),КС.ОкончаниеКассовойСмены,КонецДня(ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера() )),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ТекДата"  , КС.Дата);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		ТекущаяДата        = Формат(Выборка.ТекущаяДата,"ДФ=dd.MM.yyyy");
		СуммаВзноса        = Выборка.СуммаВзноса;
		СуммаПродажи       = Выборка.СуммаПродаж;
		СуммаВыдачи        = Выборка.СуммаВыдачи;
		СуммаПродажВКредит = Выборка.СуммаПродажВКредит;
		СуммаОстатка       = Выборка.СуммаОстатка;
		СуммаПодарочныхСертификатов = Выборка.СуммаПодарочныхСертификатов;

	КонецЕсли;
	
КонецПроцедуры
//-HVOYA Mykhailo

&НаСервере
Функция ВозможностьВнесенияДенег()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.Документ,
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.СуммаОстаток,
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.Организация,
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.Касса
	|ПОМЕСТИТЬ ТаблицаДокументовСОстатками
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКПоступлениюНаличные.Остатки(
	|			,
	|			Касса = (&КассыККМ) ) КАК ДенежныеСредстваКПоступлениюНаличныеОстатки
	|ГДЕ
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.СуммаОстаток > 0
	|	И ДенежныеСредстваКПоступлениюНаличныеОстатки.Документ ССЫЛКА Документ.РасходныйКассовыйОрдер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка КАК РасходныйКассовыйОрдер,
	|	РасходныйКассовыйОрдер.Номер,
	|	РасходныйКассовыйОрдер.Дата,
	|	ТаблицаДокументовСОстатками.СуммаОстаток,
	|	ТаблицаДокументовСОстатками.Организация,
	|	ТаблицаДокументовСОстатками.Касса
	|ИЗ
	|	ТаблицаДокументовСОстатками КАК ТаблицаДокументовСОстатками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ПО ТаблицаДокументовСОстатками.Документ = РасходныйКассовыйОрдер.Ссылка"
	);

	Запрос.УстановитьПараметр("КассыККМ", ТекКассаККМ);

	Результат = Запрос.Выполнить();

	Возврат НЕ Результат.Пустой();

КонецФункции

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя(Команда)

	Если НЕ РаботаемБезДисплеяПокупателя Тогда

	//	LNK 28.11.2022 10:12:14 -	В форме "ФормаМеню", например, нет такой процедуры.
	//								Думаю, вполне без проблем обойтись без неё.
		ВладелецФормы.ВывестиИнформациюНаДисплейПокупателя(Команда);

	КонецЕсли;
	
КонецПроцедуры

// Получение  от пользователя числа 
//
// Параметры:
//  Заголовок - Строка;
//  ЧислоВвода - Число;
//  МаксимальноеЗначение - Число;
//
// Возвращаемое значение:
//   Булево
//
&НаКлиенте
Функция ПолучитьИнтерактивноЧисло(Заголовок, ЧислоВвода, МаксимальноеЗначение, Отрицательное, ВозвращатьЧислоСтрокой)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок"             , Заголовок);
	ПараметрыОткрытия.Вставить("МаксимальноеЗначение"  , МаксимальноеЗначение);
	ПараметрыОткрытия.Вставить("ЧислоВвода"            , ЧислоВвода);
	ПараметрыОткрытия.Вставить("Отрицательное"         , Отрицательное);
	ПараметрыОткрытия.Вставить("ВозвращатьЧислоСтрокой", ВозвращатьЧислоСтрокой);
	
	Результат = ОткрытьФормуМодально("Обработка.РМК.Форма.ФормаВводаЧисла", ПараметрыОткрытия, УникальныйИдентификатор);
	
	Если НЕ Результат = Неопределено Тогда
		ЗначениеВыбораЧисло = Результат.ВведенноеЧисло;
		Если ЗначениеЗаполнено(ЗначениеВыбораЧисло) Тогда
			ЧислоВвода = ЗначениеВыбораЧисло;
		Иначе
			ЧислоВвода = 0;
		КонецЕсли;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	
КонецФункции // ПолучитьИнтерактивноЧисло()

&НаКлиенте
Функция ВыбраннаяКассаККМ()

	Возврат ТекКассаККМ;

КонецФункции

&НаКлиенте
// Подготавливает поле, если поле слишком короткое - дополняет пробелами
Функция ПостроитьПоле(Текст, ДлинаПоля)
	
	Если СтрДлина(Текст) < ДлинаПоля Тогда
		ТекстПолный = Текст;
		КолвоПробелов = ДлинаПоля - СтрДлина(ТекстПолный);
		Для й = 1 По КолвоПробелов Цикл
			ТекстПолный = " " + ТекстПолный;
		КонецЦикла;
	Иначе
		ТекстПолный = Лев(Текст, ДлинаПоля);
	КонецЕсли;
	
	Возврат ТекстПолный;
КонецФункции
	
#КонецОбласти

#Область ПоддержкаОбязательныхОтчетовККМ

&НаКлиенте
Процедура ЗакрытьСмену(КассаККМ)
	
	ОтветПользователя = ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМК(
		"Закрити касову зміну?"
		, "Буде виконано закриття касової зміни по касі" + Символы.ПС + "«" + КассаККМ + "»"
	);

	Если НЕ ВРЕГ(ОтветПользователя) = "ДА" Тогда

		Возврат;

	КонецЕсли;

	//+HVOYA Mykhailo : узнаем, печатать ли в данной кассе чек на принер или пробивать по фискальнику
	Попытка
		ПечатьНаПринтерЧеков = ОбщегоНазначенияРТСервер.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(КассаККМ, "ПечатьЧековНаПринтер");
	Исключение
		ПечатьНаПринтерЧеков = Ложь;	
	КонецПопытки;
	//-HVOYA Mykhailo
	
	//+HVOYA Mykhailo
	Если ПечатьНаПринтерЧеков Тогда  // передаем отчет на принтер
		Попытка
			ТАБОТЧЕТ = ПечатьОтчетПоКассе(КассаККМ,Истина);
			ТАБОТЧЕТ.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
		Исключение
		КонецПопытки;
	КонецЕсли; 
	//-HVOYA Mykhailo

	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("КассаККМ"				 , КассаККМ);
	ПараметрыЗаполнения.Вставить("ВыполнитьЗакрытиеСразу", Истина);
	
	ОткрытьФормуМодально("Обработка.ЗакрытиеКассовойСмены.Форма", ПараметрыЗаполнения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьОтчетБезГашения(КассаККМ)

	Результат = Ложь;
	
	ПараметрыКассыККМ       = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	ПараметрыИнформации.ЗаголовокИнформации = "Помилка друку звіту без гасіння";
	
	//+HVOYA Mykhailo : узнаем, печатать ли в данной кассе чек на принер или пробивать по фискальнику
	Попытка
		ПечатьНаПринтерЧеков = ОбщегоНазначенияРТСервер.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(КассаККМ,"ПечатьЧековНаПринтер");
	Исключение
		ПечатьНаПринтерЧеков = Ложь;	
	КонецПопытки;
	//-HVOYA Mykhailo
	
	//+HVOYA Mykhailo
	Если ПечатьНаПринтерЧеков Тогда  // передаем отчет на принтер
		Попытка
			ТАБОТЧЕТ = ПечатьОтчетПоКассе(КассаККМ);
			ТАБОТЧЕТ.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
			Возврат;
		Исключение
		КонецПопытки;
	КонецЕсли; 
	//-HVOYA Mykhailo
	
	Если ЗначениеЗаполнено(ИдентификаторУстройства)  Тогда
		ОписаниеОшибки = "";

		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			// Подключение устройства

			Если ИдентификаторУстройства <> Неопределено Тогда
				Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(ЭтотОбъект,
				                                                                              ИдентификаторУстройства, ОписаниеОшибки);

				Если Результат Тогда
					ВходныеПараметры  = Неопределено;
					ВыходныеПараметры = Неопределено;

					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
					                                                        "PrintXReport",
					                                                        ВходныеПараметры,
					                                                        ВыходныеПараметры
					);

					Если НЕ Результат Тогда

						ПараметрыИнформации.ТекстИнформации = СтрЗаменить(
							"При знятті звіту на фіскальному реєстраторі сталася помилка.
							|%ОписаниеОшибки%
							|Звіт на фіскальному реєстраторі не сформовано."
							, "%ОписаниеОшибки%"
							, ВыходныеПараметры[1]
						);
						ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

					КонецЕсли;

					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(ЭтотОбъект,
					                                                                 ИдентификаторУстройства);
				Иначе

					ПараметрыИнформации.ТекстИнформации = "При підключенні пристрою сталася помилка" + Символы.ПС + ОписаниеОшибки;
					ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

				КонецЕсли;

			КонецЕсли;

		Иначе

			ПараметрыИнформации.ТекстИнформации = "Попередньо необхідно вибрати робоче місце устаткування поточного сеансу, що підключається.";
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМК(ПараметрыИнформации);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//+HVOYA Mykhailo : функции для печати отчета на принтер
&НаСервере
Функция ПечатьОтчетПоКассе(ТекКасса, ЭтоЗед = Ложь)
		
	КодЯзыкаПечать = "uk";

	ВыводитьУпаковки   = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = "Звіт";
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КассаККМ_ОтчетДляПД";
	
	ТекКассоваяСмена = Неопределено;
	
	ЗапросКассСмена = Новый Запрос;
	ЗапросКассСмена.Текст = 
	"ВЫБРАТЬ
	|	КассоваяСмена.Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.КассаККМ = &КассаККМ
	|	И КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|
	|СГРУППИРОВАТЬ ПО
	|	КассоваяСмена.Ссылка";
	ЗапросКассСмена.УстановитьПараметр("КассаККМ", ТекКасса);
	Выборка = ЗапросКассСмена.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекКассоваяСмена = Выборка.Ссылка;
	КонецЦикла;
	
	Если НЕ ТекКассоваяСмена = Неопределено Тогда

		Макет = УправлениеПечатью.ПолучитьМакет("Обработка.РМК.ОтчетДляПД", КодЯзыкаПечать);

		// 1. выводим шапку
		ОбластьШапкаЧека = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапкаЧека.Параметры.Заголовок = ?(ЭтоЗед,"Z-ЗВІТ","X-ЗВІТ");
		НашМагазин = ОбщегоНазначенияРТСервер.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(ТекКасса,"Магазин");
		Попытка
			ОбластьШапкаЧека.Параметры.Магазин =  НашМагазин;
		Исключение
		КонецПопытки;
		Попытка
			ОбластьШапкаЧека.Параметры.Адрес =  ВернутьНадписьМагазин(НашМагазин,"Адрес");
		Исключение
		КонецПопытки;
		Попытка
			ОбластьШапкаЧека.Параметры.Телефон =  ВернутьНадписьМагазин(НашМагазин,"Телефон");
		Исключение
		КонецПопытки;
		ТабличныйДокумент.Вывести(ОбластьШапкаЧека);

		// 2. выводим тело
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КассоваяСмена.КассаККМ.НомерВМагазине КАК КассаККМ,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЧекККМ.Ссылка) КАК ВсегоЧековККМ,
		|	СУММА(ВЫБОР
		|			КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
		|				ТОГДА ЧекККМ.СуммаДокумента
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаПродаж,
		|	СУММА(ВЫБОР
		|			КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
		|				ТОГДА ЧекККМ.СуммаДокумента
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаВозвратов,
		|	СУММА(ВЫБОР
		|			КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЧековККМПродажа,
		|	СУММА(ВЫБОР
		|			КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЧековККМВозврат,
		|	СУММА(0) КАК Безнал,
		|	КассоваяСмена.Номер КАК НомерСмены,
		|	КассоваяСмена.НачалоКассовойСмены КАК НачалоСмены,
		|	0 КАК ВнесеноВКассу,
		|	0 КАК ВыемкаИзКассы,
		|	0 КАК СуммаВКассе,
		|	&Дата,
		|	СУММА(ВЫБОР
		|			КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
		|				ТОГДА ЧекККМ.СуммаДокумента
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Наличные
		|ИЗ
		|	Документ.ЧекККМ КАК ЧекККМ,
		|	Документ.КассоваяСмена КАК КассоваяСмена
		|ГДЕ
		|	ЧекККМ.КассаККМ = &КассаККМ
		|	И ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробитый)
		|	И КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
		|	И ЧекККМ.Проведен = ИСТИНА
		|	И КассоваяСмена.Ссылка = &КассоваяСмена
		|
		|СГРУППИРОВАТЬ ПО
		|	КассоваяСмена.КассаККМ.НомерВМагазине,
		|	КассоваяСмена.Номер,
		|	КассоваяСмена.НачалоКассовойСмены");
		Запрос.УстановитьПараметр("КассаККМ", ТекКасса);
		Запрос.УстановитьПараметр("КассоваяСмена", ТекКассоваяСмена);
		Запрос.УстановитьПараметр("Дата",ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера());
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбластьТелоЧека         = Макет.ПолучитьОбласть("Тело");
			ОбластьТелоЧека.Параметры.Заполнить(Выборка);
			НачСмены = Выборка.НачалоСмены;
			ОбластьТелоЧека.Параметры.ВнесеноВКассу = ПолучитьВнесение(ТекКасса,НачСмены);
			ОбластьТелоЧека.Параметры.ВыемкаИзКассы = ПолучитьВыемку(ТекКасса,НачСмены);
			ОбластьТелоЧека.Параметры.СуммаВКассе   = ПолучитьОстаток(ТекКасса);
			ТабличныйДокумент.Вывести(ОбластьТелоЧека);
			Прервать;
		КонецЦикла; 

	КонецЕсли; 
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПолучитьРабочееМесто()
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВернутьНадписьМагазин(ТекМаг,Вид)

	ТипКИ = ?(Вид = "Адрес",Перечисления.ТипыКонтактнойИнформации.Адрес,Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	Запр = Новый Запрос;
	Запр.Текст =
	"ВЫБРАТЬ
	|	МагазиныКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.Магазины.КонтактнаяИнформация КАК МагазиныКонтактнаяИнформация
	|ГДЕ
	|	МагазиныКонтактнаяИнформация.Ссылка = &Ссылка
	|	И МагазиныКонтактнаяИнформация.Тип = &Тип";
	Запр.УстановитьПараметр("Ссылка",ТекМаг);
	Запр.УстановитьПараметр("Тип",ТипКИ);
	ТЗ = Запр.Выполнить().Выгрузить();
	Если ТЗ.Количество()=0 Тогда
		Возврат "";
	Иначе
		Возврат ТЗ[0].Представление;
	КонецЕсли; 
	
КонецФункции 

&НаСервере
Функция ПолучитьВыемку(ТекКассаККМ,ДатаНач)
	
	Выемка = 0;
	
	ЗапросВыемка = Новый Запрос;
	ЗапросВыемка.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВыемкаДенежныхСредствИзКассыККМ.СуммаДокумента), 0) КАК ВыемкаИзКассы
	|ИЗ
	|	Документ.ВыемкаДенежныхСредствИзКассыККМ КАК ВыемкаДенежныхСредствИзКассыККМ
	|ГДЕ
	|	ВыемкаДенежныхСредствИзКассыККМ.Дата >= &Дата
	|	И ВыемкаДенежныхСредствИзКассыККМ.Проведен = ИСТИНА
	|	И ВыемкаДенежныхСредствИзКассыККМ.КассаККМ = &КассаККМ";
	
	ЗапросВыемка.УстановитьПараметр("Дата", ДатаНач);
	ЗапросВыемка.УстановитьПараметр("КассаККМ", ТекКассаККМ);
	
	РЕЗ = ЗапросВыемка.Выполнить().Выбрать();
	
	Пока РЕЗ.Следующий() Цикл
		
		Выемка = РЕЗ.ВыемкаИзКассы;
		Прервать;
		
	КонецЦикла; 
	
	Возврат Выемка;
	
КонецФункции

&НаСервере
Функция ПолучитьВнесение(ТекКассаККМ,ДатаНач)
	
	Внесено = 0;
	
	ЗапросВнесено = Новый Запрос;
	ЗапросВнесено.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВнесениеДенежныхСредствВКассуККМ.СуммаДокумента), 0) КАК ВнесеноВКассу
	|ИЗ
	|	Документ.ВнесениеДенежныхСредствВКассуККМ КАК ВнесениеДенежныхСредствВКассуККМ
	|ГДЕ
	|	ВнесениеДенежныхСредствВКассуККМ.Дата >= &Дата
	|	И ВнесениеДенежныхСредствВКассуККМ.Проведен = ИСТИНА
	|	И ВнесениеДенежныхСредствВКассуККМ.КассаККМ = &КассаККМ";
	ЗапросВнесено.УстановитьПараметр("Дата", ДатаНач);
	ЗапросВнесено.УстановитьПараметр("КассаККМ", ТекКассаККМ);
	
	РЕЗ = ЗапросВнесено.Выполнить().Выбрать();
	
	Пока РЕЗ.Следующий() Цикл
		Внесено = РЕЗ.ВнесеноВКассу;
		Прервать;
	КонецЦикла; 
	
	Возврат Внесено;
	
КонецФункции

&НаСервере
Функция ПолучитьОстаток(ТекКассаККМ)
	
	Остаток = 0;
	
	ЗапросСуммаВКассе = Новый Запрос;
	ЗапросСуммаВКассе.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ДенежныеСредстваККМОстатки.СуммаОстаток) КАК СуммаВКассе
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваККМ.Остатки КАК ДенежныеСредстваККМОстатки
	|ГДЕ
	|	ДенежныеСредстваККМОстатки.КассаККМ = &КассаККМ";
	
	ЗапросСуммаВКассе.УстановитьПараметр("КассаККМ", ТекКассаККМ);
	
	РЕЗ = ЗапросСуммаВКассе.Выполнить().Выбрать();
	Пока РЕЗ.Следующий() Цикл
		Остаток = РЕЗ.СуммаВКассе;
		Прервать;
	КонецЦикла;
	
	Возврат Остаток;
	
КонецФункции
	
#КонецОбласти










