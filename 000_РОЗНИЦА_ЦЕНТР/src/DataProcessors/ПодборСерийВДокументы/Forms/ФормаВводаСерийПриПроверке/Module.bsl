&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущееКоличество; //кеш количества в текущей строке для расчета количества серий

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПодключаемоеОборудованиеРТ.ПолучитьДоступноеПодключаемоеОборудование(ИспользоватьПодключаемоеОборудование, ЕстьТСД, ЕстьВесы);
	
	Количество                = Параметры.Количество;
	Упаковка                  = Параметры.Упаковка;
	АдресВоВременномХранилище = Параметры.АдресВоВременномХранилище;
	НомераСтрокПредставление  = Параметры.НомераСтрокДокумента;
	
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Номенклатура, 
							Новый Структура("ВидНоменклатуры, ЕдиницаИзмеренияПредставление","ВидНоменклатуры","ЕдиницаИзмерения.Наименование"));
	
	ПараметрыУчетнойПолитикиСерий = Новый ФиксированнаяСтруктура(
		ЗначениеНастроекПовтИсп.ПараметрыПолитикиУчетаСерийПоВидуНоменклатуры(РеквизитыНоменклатуры.ВидНоменклатуры, Параметры.Магазин));
	
	Если Не ПараметрыУчетнойПолитикиСерий.ИспользоватьСерии Тогда
		ТекстИсключения = НСтр("ru = 'Для вида номенклатуры ""%ВидНоменклатуры%"" серии не используются'");
		
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ВидНоменклатуры%",ПараметрыУчетнойПолитикиСерий.ВидНоменклатуры);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Заголовок = НСтр("ru = 'Регистрация серий товаров'");
	ЗаголовокКолонкиКоличество = НСтр("ru = 'Количество, %ЕдиницаИзмерения%'");
	ЗаголовокКолонкиКоличествоКОткрузке = НСтр("ru = 'К отгрузке, %ЕдиницаИзмерения%'");
	ЗаголовокКолонкиРаспределить        = НСтр("ru = 'Распределить по колонке ""Не отгружать"", %ЕдиницаИзмерения%'");
	
	Если ЗначениеЗаполнено(Упаковка) Тогда
		ТоварПредставление = НСтр("ru = '%ПредставлениеТовара% в упаковке %Упаковка%'");
		ТоварПредставление = СтрЗаменить(ТоварПредставление,"%Упаковка%",Параметры.Упаковка);
		ЗаголовокКолонкиКоличество          = СтрЗаменить(ЗаголовокКолонкиКоличество,"%ЕдиницаИзмерения%",Параметры.Упаковка);
		ЗаголовокКолонкиКоличествоКОткрузке = СтрЗаменить(ЗаголовокКолонкиКоличествоКОткрузке,"%ЕдиницаИзмерения%",Параметры.Упаковка);
		ЗаголовокКолонкиРаспределить = СтрЗаменить(ЗаголовокКолонкиРаспределить,"%ЕдиницаИзмерения%",Параметры.Упаковка);
		КоэффициентУпаковки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Упаковка, "Коэффициент");
	Иначе
		ТоварПредставление = НСтр("ru = '%ПредставлениеТовара%'");
		ЗаголовокКолонкиКоличество= СтрЗаменить(ЗаголовокКолонкиКоличество,"%ЕдиницаИзмерения%",Параметры.Номенклатура.ЕдиницаИзмерения);
		ЗаголовокКолонкиКоличествоКОткрузке = СтрЗаменить(ЗаголовокКолонкиКоличествоКОткрузке,"%ЕдиницаИзмерения%",Параметры.Номенклатура.ЕдиницаИзмерения);
		ЗаголовокКолонкиРаспределить = СтрЗаменить(ЗаголовокКолонкиРаспределить,"%ЕдиницаИзмерения%",Параметры.Номенклатура.ЕдиницаИзмерения);
		КоэффициентУпаковки = 1;
	КонецЕсли;
	
	Элементы.СерииКоличествоУпаковокВДокументе.Видимость = ПараметрыУчетнойПолитикиСерий.УказыватьПриОтгрузке;
	Элементы.ПревышениеКРаспределению.Видимость          = ЛОЖЬ;
	
	ТоварПредставление = СтрЗаменить(ТоварПредставление,"%ПредставлениеТовара%",ОбщегоНазначенияРТ.ПолучитьПредставлениеНоменклатуры(Параметры.Номенклатура, Параметры.Характеристика));
	
	Элементы.ГруппаКолонокКоличествоСерий.Заголовок = ЗаголовокКолонкиКоличество;
	
	Элементы.СерииГоденДо.Видимость                       = ПараметрыУчетнойПолитикиСерий.ИспользоватьСрокГодностиСерии;
	
	Элементы.Количество.Заголовок                = ЗаголовокКолонкиКоличество;
	Элементы.КоличествоКОтгрузке.Заголовок       = ЗаголовокКолонкиКоличествоКОткрузке;
	Элементы.ПревышениеКРаспределению.Заголовок  = ЗаголовокКолонкиРаспределить;
	Элементы.СерииНомер.Видимость                = ПараметрыУчетнойПолитикиСерий.ИспользоватьНомерСерии;
	Элементы.ПоискПоШтрихкоду.Видимость          = ПараметрыУчетнойПолитикиСерий.ИспользоватьНомерСерии;
	Элементы.СерииЗагрузитьДанныеИзТСД.Видимость = ЕстьТСД И ПараметрыУчетнойПолитикиСерий.ИспользоватьНомерСерии;
	
	Элементы.СерииКоличествоУпаковок.Видимость            = ПараметрыУчетнойПолитикиСерий.ИспользоватьКоличествоСерии;
	Элементы.СерииКоличествоУпаковокНеОтгружать.Видимость = ПараметрыУчетнойПолитикиСерий.ИспользоватьКоличествоСерии;
	Элементы.СерииНеОтгружать.Видимость                   = Не ПараметрыУчетнойПолитикиСерий.ИспользоватьКоличествоСерии;
	
	Если ПараметрыУчетнойПолитикиСерий.ИспользоватьСрокГодностиСерии Тогда
		Элементы.СерииГоденДо.Формат               = ПараметрыУчетнойПолитикиСерий.ФорматнаяСтрокаСрокаГодности;
		Элементы.СерииГоденДо.ФорматРедактирования = ПараметрыУчетнойПолитикиСерий.ФорматнаяСтрокаСрокаГодности;
		Если ПараметрыУчетнойПолитикиСерий.ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоДней Тогда
			Элементы.СерииГоденДо.Заголовок = НСтр("ru = 'Годен до (дата)'");
		Иначе
			Элементы.СерииГоденДо.Заголовок = НСтр("ru = 'Годен до (дата, час)'");
		КонецЕсли;
	КонецЕсли;
	
	ДанныеОСериях = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ТипЗнч(ДанныеОСериях) = Тип("Структура") Тогда
		ТаблицаСерий = ДанныеОСериях.ТаблицаСерий;
	Иначе
		ТаблицаСерий = ДанныеОСериях;
	КонецЕсли;
	
	ПроверкаОрдера = Истина;
	
	Если ТаблицаСерий.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСерий.Серия,
		|	ТаблицаСерий.Количество,
		|	ТаблицаСерий.КоличествоУпаковок,
		|	ТаблицаСерий.КоличествоВДокументе,
		|	ТаблицаСерий.КоличествоУпаковокВДокументе,
		|	ТаблицаСерий.КоличествоНеОтгружать,
		|	ТаблицаСерий.КоличествоУпаковокНеОтгружать
		|ПОМЕСТИТЬ ТаблицаСерий
		|ИЗ
		|	&ТаблицаСерий КАК ТаблицаСерий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСерий.Серия,
		|	ТаблицаСерий.Количество,
		|	ТаблицаСерий.КоличествоУпаковок,
		|	ТаблицаСерий.КоличествоВДокументе,
		|	ТаблицаСерий.КоличествоУпаковокВДокументе,
		|	ТаблицаСерий.КоличествоНеОтгружать,
		|	ВЫБОР
		|		КОГДА ТаблицаСерий.КоличествоНеОтгружать > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеОтгружать,
		|	ТаблицаСерий.КоличествоУпаковокНеОтгружать,
		|	ВЫРАЗИТЬ(ТаблицаСерий.Серия КАК Справочник.СерииНоменклатуры).Номер КАК Номер,
		|	ВЫРАЗИТЬ(ТаблицаСерий.Серия КАК Справочник.СерииНоменклатуры).ГоденДо КАК ГоденДо
		|ИЗ
		|	ТаблицаСерий КАК ТаблицаСерий
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГоденДо,
		|	Номер";
		Запрос.УстановитьПараметр("ТаблицаСерий",ТаблицаСерий);
		Объект.Серии.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// МеханизмВнешнегоОборудования
	Если ИспользоватьПодключаемоеОборудование
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "";

		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:
			                      |""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	// Конец МеханизмВнешнегоОборудования
	
	РассчитатьИтоговыеСуммы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	ОчиститьСообщения();
	
	Если Модифицированность Тогда
		Ответ = Вопрос(НСтр("ru = 'Список серий был изменен.
				|Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);

		Если Ответ = КодВозвратаДиалога.Да Тогда

			Отказ = Истина;
			СтандартнаяОбработка = Ложь;
			ЗавершитьВводСерий(Неопределено);// Сохранение результатов модификации.
			
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда

			Отказ = Истина;
			СтандартнаяОбработка = Ложь;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	// МеханизмВнешнегоОборудования
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец МеханизмВнешнегоОборудования

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен()
	   И ПараметрыУчетнойПолитикиСерий.ИспользоватьНомерСерии Тогда
		Если ИмяСобытия = "ScanData" Тогда
			//Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1)); // Достаем штрихкод из основных данных
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1)); // Достаем штрихкод из дополнительных данных
			КонецЕсли;

			ЗакрытьФорму = ОбработатьШтрихкодыСервер(Данные,КэшированныеЗначения);
			
			Если ЗакрытьФорму Тогда
				ПодключитьОбработчикОжидания("ЗакрытьФормуПриСканировании",0.1, Истина);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_СерииНоменклатуры" Тогда
		ТекущиеДанные = Элементы.Серии.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.Серия = Источник;
		ЗаполнитьЗначенияСвойств(ТекущиеДанные,Параметр);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ СЕРИИ
&НаКлиенте

Процедура СерииНомерПриИзменении(Элемент)
	ПодобратьСерию(Элемент,"Номер","ГоденДо");	
КонецПроцедуры

&НаКлиенте
Процедура СерииКоличествоУпаковокНеОтгружатьПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Серии.ТекущиеДанные;
	ПересчитатьКоличествоТовараВСтрокеТЧ(ТекущиеДанные,ЭтотОбъект, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура СерииГоденДоПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Серии.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ГоденДо) Тогда
 		ПодобратьСерию(Элемент,"ГоденДо","Номер");
	Иначе
		ТекущиеДанные.Серия   = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СерииГоденДоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Серии.ТекущиеДанные;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФорматДаты",ПараметрыУчетнойПолитикиСерий.ФорматнаяСтрокаСрокаГодности);
	СтруктураПараметров.Вставить("ГоденДо",ТекущиеДанные.ГоденДо);
	
	ГоденДо = ОткрытьФормуМодально("Обработка.ПодборСерийВДокументы.Форма.ФормаУказанияДаты", СтруктураПараметров, Элемент);
	
	Если ЗначениеЗаполнено(ГоденДо)
		И ТипЗнч(ГоденДо) = Тип("Дата") Тогда
		
		ТекущиеДанные.ГоденДо = ГоденДо;
 		ПодобратьСерию(Элемент,"ГоденДо","Номер");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерииНеОтгружатьПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Серии.ТекущиеДанные;
	
	Если ТекущиеДанные.НеОтгружать Тогда
		ТекущиеДанные.КоличествоУпаковокНеОтгружать = 1;
	Иначе
		ТекущиеДанные.КоличествоУпаковокНеОтгружать = 0;
	КонецЕсли;
	
	ПересчитатьКоличествоТовараВСтрокеТЧ(ТекущиеДанные, ЭтотОбъект, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура СерииКоличествоУпаковокПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Серии.ТекущиеДанные;
	
	ПересчитатьКоличествоТовараВСтрокеТЧ(ТекущиеДанные, ЭтотОбъект, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура СерииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Копирование Тогда
		ТекущееКоличество = 0;
	Иначе
		ТекущееКоличество =  ТекущиеДанные.КоличествоУпаковок;
	КонецЕсли;
	
	Если НоваяСтрока
		И Не ПараметрыУчетнойПолитикиСерий.ИспользоватьКоличествоСерии Тогда
		
		
		ТекущиеДанные.КоличествоУпаковок = 1;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		ТекущиеДанные = Элементы.Серии.ТекущиеДанные;
		
		ТекущаяСтрока = Новый Структура;
		ТекущаяСтрока.Вставить("Упаковка",Упаковка);
		ТекущаяСтрока.Вставить("Количество",ТекущиеДанные.Количество);
		ТекущаяСтрока.Вставить("КоличествоУпаковок",ТекущиеДанные.КоличествоУпаковок);
		
		ОбработкаТабличнойЧастиТоварыКлиент.ОбработатьСтрокуТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные,ТекущаяСтрока);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерииПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекущиеДанные = Элементы.Серии.ТекущиеДанные;
	ПересчитатьКоличествоТовараВСтрокеТЧ(ТекущиеДанные,ЭтотОбъект, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура СерииПередУдалением(Элемент, Отказ)
	ОчиститьСообщения();
	
	Для Каждого Строка из Элементы.Серии.ВыделенныеСтроки Цикл
		СтрокаТЧ = Объект.Серии.НайтиПоИдентификатору(Строка);
		Если СтрокаТЧ.КоличествоУпаковокВДокументе > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Строку %НомерСтроки% удалить нельзя, т.к. она присутствует в ордере.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НомерСтроки%", СтрокаТЧ.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "НомерСтроки");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
		КонецЕсли;
	КонецЦикла;
		
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТекущееКоличество =  ТекущиеДанные.КоличествоУпаковок;
КонецПроцедуры

&НаКлиенте
Процедура СерииПослеУдаления(Элемент)
	КоличествоСерий = КоличествоСерий - ТекущееКоличество;
КонецПроцедуры

&НаКлиенте
Процедура СерииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Серии.ТекущиеДанные;
	
	Если Поле = Элементы.СерииСерия Тогда
		ИзменитьСериюКлиент();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Отмена(Команда)
	Модифицированность = Ложь;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводСерий(Команда)
	ОчиститьСообщения();
	КоличествоКРаспределению = КоличествоСерий - Количество - КоличествоСерийНеОтгружать;
	Если КоличествоКРаспределению > 0 Тогда
		ТекстСообщения = НСтр("ru='Товаров к отгрузке больше, чем указано в ордере на %Количество% %ед. измерения%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ед. измерения%", Упаковка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", ПревышениеКРаспределению);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ПревышениеКРаспределению");
		
	Иначе
		Отказ = СохранитьВводСерийСервер();
		Если Не Отказ 
			И Не Модифицированность Тогда
			Закрыть(АдресВоВременномХранилище);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	ОписаниеОшибки = "";
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ТерминалСбораДанных",
		    НСтр("ru='Выберите терминал сбора данных'"), НСтр("ru='Терминал сбора данных не подключен'"));
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства, ОписаниеОшибки);
			
			Если Результат Тогда
				ВходныеПараметры  = Неопределено;
				ВыходныеПараметры = Неопределено;
				
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
				                                                        "DownloadDocument",
				                                                        ВходныеПараметры,
				                                                        ВыходныеПараметры);
				
				Если Результат Тогда
					
					ТаблицаЗагрузкиИзТСД = Новый Массив();
					Для Индекс = 0 По ВыходныеПараметры[0].Количество()/2 - 1 Цикл
						
						Штрихкод   = ВыходныеПараметры[0][Индекс * 2 + 0];
						Количество = ВыходныеПараметры[0][Индекс * 2 + 1];
						
						ТаблицаЗагрузкиИзТСД.Добавить(Новый Структура("Штрихкод, Количество", Штрихкод, ?(Количество <> Неопределено, Количество, 0)));
						
					КонецЦикла;
					
					ЗакрытьФорму = ОбработатьШтрихкодыСервер(ТаблицаЗагрузкиИзТСД, КэшированныеЗначения);
					
					Если ЗакрытьФорму Тогда
						Закрыть(АдресВоВременномХранилище);
					КонецЕсли;
					
				Иначе
					
					ТекстСообщения = НСтр("ru='При загрузке данных из терминала сбора данных произошла ошибка.
					                          |%ОписаниеОшибки%
					                          |Данные из терминала сбора данных не загружены.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства);
				
			Иначе
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
				                          |%ОписаниеОшибки%
				                          |Данные из терминала сбора данных не загружены.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	ОчиститьСообщения();
	ТекШтрихкод = "";
	ЗаголовокФормыВводаСерий = НСтр("ru = 'Введите штрихкод серии'");
	Если ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ТекШтрихкод, ЗаголовокФормыВводаСерий) Тогда
		//ЗакрытьФорму = ОбработатьШтрихкодыСервер(ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1),КэшированныеЗначения);
		//
		//Если ЗакрытьФорму Тогда
		//	Закрыть(АдресВоВременномХранилище);
		//КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСерию(Команда)
	ИзменитьСериюКлиент();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПорядокСканированияСерий(Команда)
	Результат = ОткрытьФормуМодально("Обработка.ПодборСерийВДокументы.Форма.ФормаНастройкиСканированияСерий",
		Новый Структура("ЗакрыватьФормуПослеСканированияСерии",ЗакрыватьФормуПослеСканированияСерии),
		ЭтотОбъект);
		
	Если Результат <> Неопределено Тогда
		ЗакрыватьФормуПослеСканированияСерии = Результат;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаСервере
Функция ОбработатьШтрихкодыСервер(ДанныеШтрикодов, КэшированныеЗначения)
	Если Не ПараметрыУчетнойПолитикиСерий.ИспользоватьНомерСерии Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТаблицаШтрихКодов = Новый ТаблицаЗначений;
	ТаблицаШтрихКодов.Колонки.Добавить("Номер",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТаблицаШтрихКодов.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		Для Каждого СтрМас из ДанныеШтрикодов Цикл
			НоваяСтрока            = ТаблицаШтрихКодов.Добавить();
			НоваяСтрока.Количество = СтрМас.Количество;
			НоваяСтрока.Номер      = СокрЛП(СтрМас.ШтрихКод);
		КонецЦикла;
	Иначе
		НоваяСтрока            = ТаблицаШтрихКодов.Добавить();
		НоваяСтрока.Количество = ДанныеШтрикодов.Количество;
		НоваяСтрока.Номер      = СокрЛП(ДанныеШтрикодов.ШтрихКод);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Штрихкоды.Номер КАК Номер,
	|	Штрихкоды.Количество КАК Количество
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	&Штрихкоды КАК Штрихкоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СерииНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК Серия,
	|	ЕСТЬNULL(СерииНоменклатуры.ГоденДо, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ГоденДо,
	|	Штрихкоды.Номер,
	|	Штрихкоды.Количество
	|ПОМЕСТИТЬ НайденныеНомераДляЗапроса
	|ИЗ
	|	Штрихкоды КАК Штрихкоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО Штрихкоды.Номер = СерииНоменклатуры.Номер
	|ГДЕ
	|	СерииНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(1) КАК КоличествоНайденныхСерий,
	|	НайденныеНомераДляЗапроса.Номер
	|ПОМЕСТИТЬ КоличествоСерийПоНомеру
	|ИЗ
	|	НайденныеНомераДляЗапроса КАК НайденныеНомераДляЗапроса
	|
	|СГРУППИРОВАТЬ ПО
	|	НайденныеНомераДляЗапроса.Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА КоличествоСерийПоНомеру.КоличествоНайденныхСерий > 1
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ НайденныеНомераДляЗапроса.Серия
	|	КОНЕЦ КАК Серия,
	|	ВЫБОР
	|		КОГДА КоличествоСерийПоНомеру.КоличествоНайденныхСерий > 1
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ НайденныеНомераДляЗапроса.ГоденДо
	|	КОНЕЦ КАК ГоденДо,
	|	НайденныеНомераДляЗапроса.Номер,
	|	НайденныеНомераДляЗапроса.Количество
	|ИЗ
	|	НайденныеНомераДляЗапроса КАК НайденныеНомераДляЗапроса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоличествоСерийПоНомеру КАК КоличествоСерийПоНомеру
	|		ПО НайденныеНомераДляЗапроса.Номер = КоличествоСерийПоНомеру.Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Штрихкоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НайденныеНомераДляЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КоличествоСерийПоНомеру";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры",ПараметрыУчетнойПолитикиСерий.ВидНоменклатуры);
	Запрос.УстановитьПараметр("Штрихкоды",ТаблицаШтрихКодов);

	Выборка = Запрос.Выполнить().Выбрать();
	
	СрокГодностиЗаполнен = Истина;
	
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура("Номер,ГоденДо,Серия",Выборка.Номер, Выборка.ГоденДо, Выборка.Серия);
		
		НайденныеСтроки = Объект.Серии.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Серии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			ПересчитатьКоличествоТовараВСтрокеТЧ(НоваяСтрока, ЭтотОбъект, КэшированныеЗначения);
			
			Модифицированность = Истина;
			СрокГодностиЗаполнен = Ложь;
		Иначе
			СтрокаТЧ = НайденныеСтроки[0];
			Если ПараметрыУчетнойПолитикиСерий.ИспользоватьКоличествоСерии Тогда
				СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок + Выборка.Количество;
				
				ТекущаяСтрока = Новый Структура;
				ТекущаяСтрока.Вставить("Упаковка",Упаковка);
				ТекущаяСтрока.Вставить("Количество",СтрокаТЧ.Количество);
				ТекущаяСтрока.Вставить("КоличествоУпаковок",СтрокаТЧ.КоличествоУпаковок);
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
				
				ЗаполнитьЗначенияСвойств(СтрокаТЧ,ТекущаяСтрока);
				
				ПересчитатьКоличествоТовараВСтрокеТЧ(СтрокаТЧ, ЭтотОбъект, КэшированныеЗначения);
				
				Модифицированность = Истина;
			Иначе
				ТекстСообщения = НСтр("ru = 'Серия с номером %НомерСерии% уже присутствует в списке серий'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НомерСерии%",Выборка.Номер);
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Серии",НайденныеСтроки[0].НомерСтроки,"Номер");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект");
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ГоденДо) Тогда
				СрокГодностиЗаполнен = Ложь;
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	
	ЗакрытьФорму = Ложь;
	
	Если ЗакрыватьФормуПослеСканированияСерии
		И (СрокГодностиЗаполнен
		Или Не ПараметрыУчетнойПолитикиСерий.ИспользоватьСрокГодностиСерии) Тогда
		СохранитьВводСерийСервер();
		Если Не Модифицированность Тогда
			ЗакрытьФорму = Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат ЗакрытьФорму;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Функция СохранитьВводСерийСервер()
	
	Если Объект.Серии.Количество() > 0 Тогда
		ПоследняяСтрока = Объект.Серии[Объект.Серии.Количество()-1];
		Если Не ЗначениеЗаполнено(ПоследняяСтрока.Серия)
			И Не ЗначениеЗаполнено(ПоследняяСтрока.Номер)
			И Не ЗначениеЗаполнено(ПоследняяСтрока.ГоденДо)
			И (ПоследняяСтрока.КоличествоУпаковок = 1
			Или ПоследняяСтрока.КоличествоУпаковок = 0) Тогда
			
			Объект.Серии.Удалить(ПоследняяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПроверки = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыУчетнойПолитикиСерий);
	ПараметрыПроверки.Вставить("ПроверкаДокумента");
	
	Объект.ПараметрыПроверки = ПараметрыПроверки;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТаблицаСерий = Объект.Серии.Выгрузить();
	
	ТаблицаСерий.Свернуть("Серия,Номер,ГоденДо,КоличествоВДокументе,КоличествоУпаковокВДокументе", "Количество,КоличествоУпаковок, КоличествоНеОтгружать, КоличествоУпаковокНеОтгружать");
	
	ТаблицаВозврата = ТаблицаСерий.СкопироватьКолонки("Серия,Количество,КоличествоУпаковок,КоличествоНеОтгружать,КоличествоУпаковокНеОтгружать,КоличествоВДокументе,КоличествоУпаковокВДокументе");
	
	Для Каждого СтрТабл Из ТаблицаСерий Цикл
		
		Если СтрТабл.Количество > 0
			Или СтрТабл.КоличествоВДокументе > 0 Тогда
		
			Если Не ЗначениеЗаполнено(СтрТабл.Серия) Тогда
				СправочникОбъект                 = Справочники.СерииНоменклатуры.СоздатьЭлемент();
				СправочникОбъект.ВидНоменклатуры = ПараметрыУчетнойПолитикиСерий.ВидНоменклатуры;
				СправочникОбъект.Номер           = СтрТабл.Номер;
				СправочникОбъект.ГоденДо         = СтрТабл.ГоденДо;
				СправочникОбъект.Записать();
				
				СтрТабл.Серия = СправочникОбъект.Ссылка; 
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ТаблицаВозврата.Добавить(), СтрТабл);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Объект.Серии Цикл
		Если СтрокаТЧ.КоличествоУпаковокВДокументе <> 0
			И (СтрокаТЧ.КоличествоУпаковокВДокументе <> СтрокаТЧ.КоличествоУпаковок
			Или СтрокаТЧ.КоличествоУпаковокНеОтгружать > 0) Тогда
			ЕстьРасхождениеПоСериям = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура("ТаблицаВозврата, ЕстьРасхожденияПоСериям", ТаблицаВозврата, ЕстьРасхождениеПоСериям);
	ПоместитьВоВременноеХранилище(СтруктураВозврата,АдресВоВременномХранилище);
	Модифицированность = Ложь;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПодобратьСерию(Элемент,ВводимыйРеквизит,ПроверяемыйРеквизит)
	ТекущиеДанные = Элементы.Серии.ТекущиеДанные;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить(ВводимыйРеквизит,ТекущиеДанные[ВводимыйРеквизит]);
	ПараметрыПоиска.Вставить(ПроверяемыйРеквизит,Неопределено);
	ПараметрыПоиска.Вставить("ВидНоменклатуры",ПараметрыУчетнойПолитикиСерий.ВидНоменклатуры);
	ПараметрыПоиска.Вставить("Отбор",Новый Структура);
	ПараметрыПоиска.Вставить("СтрокаПоиска ",Неопределено);
	
	СписокВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СерииНоменклатуры"),ПараметрыПоиска);
	
	ВыбранныйЭлемент = Неопределено;
		
	Значение = Новый Структура;
	Значение.Вставить("Серия", Неопределено);
	Значение.Вставить("Номер",ТекущиеДанные.Номер);
	Значение.Вставить("ГоденДо",ТекущиеДанные.ГоденДо);
	
	Наименование = "<Новая>" + ТекущиеДанные.Номер + " " + Формат(ТекущиеДанные.ГоденДо,ПараметрыУчетнойПолитикиСерий.ФорматнаяСтрокаСрокаГодности);
	
	СписокВыбора.Вставить(0,Значение,Наименование);
		
	Если СписокВыбора.Количество() = 1 Тогда
		ВыбранныйЭлемент = СписокВыбора[0];
	ИначеЕсли СписокВыбора.Количество() = 2 Тогда
		Если СокрЛП(СписокВыбора[0].Значение.Номер) <> СокрЛП(СписокВыбора[1].Значение.Номер)
			Или (СписокВыбора[0].Значение.ГоденДо <> СписокВыбора[1].Значение.ГоденДо
			     И ЗначениеЗаполнено(СписокВыбора[0].Значение.ГоденДо))Тогда
			ВыбранныйЭлемент = ВыбратьИзСписка(СписокВыбора,Элемент);
		Иначе
			ВыбранныйЭлемент = СписокВыбора[1];
		КонецЕсли;
	ИначеЕсли СписокВыбора.Количество() > 0 Тогда
		ВыбранныйЭлемент = ВыбратьИзСписка(СписокВыбора,Элемент);
	КонецЕсли;
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ТекущиеДанные.Серия         = ВыбранныйЭлемент.Значение.Серия; 
		ТекущиеДанные.Номер         = ВыбранныйЭлемент.Значение.Номер; 
		ТекущиеДанные.ГоденДо       = ВыбранныйЭлемент.Значение.ГоденДо;
	Иначе 
		ТекущиеДанные.Серия   = Неопределено; 
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеСуммы(Форма)
	Форма.КоличествоСерий            = Форма.Объект.Серии.Итог("КоличествоУпаковок");
	Форма.КоличествоСерийНеОтгружать = Форма.Объект.Серии.Итог("КоличествоУпаковокНеОтгружать");
	Форма.КоличествоКОтгрузке        = Форма.КоличествоСерий - Форма.КоличествоСерийНеОтгружать;
	Форма.ПревышениеКРаспределению   = Форма.КоличествоСерий - Форма.Количество - Форма.КоличествоСерийНеОтгружать;
КонецПроцедуры
   
&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьКоличествоТовараВСтрокеТЧ(ДанныеСтроки,Форма, КэшированныеЗначения)
	
	Если Форма.ПараметрыУчетнойПолитикиСерий.УказыватьПриОтгрузке
		И ДанныеСтроки.КоличествоУпаковок > ДанныеСтроки.КоличествоУпаковокВДокументе + ДанныеСтроки.КоличествоУпаковокНеОтгружать Тогда
		ДанныеСтроки.КоличествоУпаковокНеОтгружать = ДанныеСтроки.КоличествоУпаковок - ДанныеСтроки.КоличествоУпаковокВДокументе;
	ИначеЕсли Форма.ПараметрыУчетнойПолитикиСерий.УказыватьПриОтгрузке
    	И ДанныеСтроки.КоличествоУпаковок > ДанныеСтроки.КоличествоУпаковокВДокументе Тогда
		
		Если ДанныеСтроки.КоличествоУпаковокНеОтгружать > ДанныеСтроки.КоличествоУпаковок Тогда
			ДанныеСтроки.КоличествоУпаковокНеОтгружать = ДанныеСтроки.КоличествоУпаковок;
		КонецЕсли;
	ИначеЕсли ДанныеСтроки.КоличествоУпаковокНеОтгружать > ДанныеСтроки.КоличествоУпаковок Тогда
		ДанныеСтроки.КоличествоУпаковокНеОтгружать = ДанныеСтроки.КоличествоУпаковок;
	КонецЕсли;
	
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("Упаковка",Форма.Упаковка);
	ТекущаяСтрока.Вставить("Количество",ДанныеСтроки.Количество);
	ТекущаяСтрока.Вставить("КоличествоУпаковок",ДанныеСтроки.КоличествоУпаковок);
	ТекущаяСтрока.Вставить("КоличествоНеОтгружать",ДанныеСтроки.КоличествоНеОтгружать);
	ТекущаяСтрока.Вставить("КоличествоУпаковокНеОтгружать",ДанныеСтроки.КоличествоУпаковокНеОтгружать);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", "НеОтгружать");
	
	#Если НаКлиенте Тогда
	ОбработкаТабличнойЧастиТоварыКлиент.ОбработатьСтрокуТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	#Иначе
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	#КонецЕсли

	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущаяСтрока);
	
	РассчитатьИтоговыеСуммы(Форма);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСериюКлиент()
	ТекущиеДанные = Элементы.Серии.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполненияСерии = Новый Структура;
	ЗначенияЗаполненияСерии.Вставить("ВидНоменклатуры", ПараметрыУчетнойПолитикиСерий.ВидНоменклатуры);
	ЗначенияЗаполненияСерии.Вставить("Номер", ТекущиеДанные.Номер);
	ЗначенияЗаполненияСерии.Вставить("ГоденДо", ТекущиеДанные.ГоденДо);
	
	ПараметрыФормыСерии = Новый Структура;
	ПараметрыФормыСерии.Вставить("ЗначенияЗаполнения",ЗначенияЗаполненияСерии);
	ПараметрыФормыСерии.Вставить("Ключ",ТекущиеДанные.Серия);
	
	ОткрытьФормуМодально("Справочник.СерииНоменклатуры.Форма.ФормаЭлемента",ПараметрыФормыСерии, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуПриСканировании()
	Закрыть(АдресВоВременномХранилище);
КонецПроцедуры
