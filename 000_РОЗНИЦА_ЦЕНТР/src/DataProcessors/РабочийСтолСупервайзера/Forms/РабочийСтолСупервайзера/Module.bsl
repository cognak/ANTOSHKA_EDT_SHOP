
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтатусыЗаказовПокупателей = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьСотрудников();
	ПодключитьОбработчикОжидания("ОбновитьСотрудников", 60);

КонецПроцедуры


&НаСервере
Функция ПолучитьСтатусыНаСервере(Сотрудник)
  Статусы = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Новый)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Новый,
		|	СУММА(ВЫБОР
		|			КОГДА ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.ВРАботе)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВРаботе,
		|	СУММА(ВЫБОР
		|			КОГДА ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.ЗапросДоступности)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЗапросДоступности,
		|	СУММА(ВЫБОР
		|			КОГДА ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Продажа)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Продажа
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ответственный = &Ответственный
		|	И ЗаказПокупателя.Дата МЕЖДУ &ДатаС И &ДатаПо
		|	И ЗаказПокупателя.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ДатаПо", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ДатаС", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Ответственный", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Статусы = Новый Структура();
		Статусы.Вставить("Новый",ВыборкаДетальныеЗаписи.Новый);  
		Статусы.Вставить("ВРАботе",ВыборкаДетальныеЗаписи.ВРАботе);
		Статусы.Вставить("ЗапросДоступности",ВыборкаДетальныеЗаписи.ЗапросДоступности);
		Статусы.Вставить("Продажа",ВыборкаДетальныеЗаписи.Продажа);		
	КонецЦикла;
	
 
Возврат Статусы;	

КонецФункции

	




&НаКлиенте
Процедура ОбновитьСотрудников() 
	
	СотрудникНаРаботе = ЗаказыПокупателейСервер.СотрудникРаботает(СотрудникКоллЦентра);	
	ЗапомнитьУказатель = Элементы.СотрудникиКоллЦентра.ТекущаяСтрока;
	ОбновитьСотрудниковКоллЦетраНаСервере();
	Элементы.СотрудникиКоллЦентра.ТекущаяСтрока = ЗапомнитьУказатель;
    УстановитьОтображениеЭлементов();
	
КонецПроцедуры 


&НаКлиенте
Процедура ОбновитьПриАктивации()
	ОбновитьСотрудников();  
	ОтключитьОбработчикОжидания("ОбновитьПриАктивации");
КонецПроцедуры

&НаКлиенте
Процедура НовыйТекстНажатие(Элемент)
	
	СтатусыЗаказовПокупателей = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.Новый");
	УстановитьОтображениеЭлементов(); 

КонецПроцедуры

&НаКлиенте
Процедура ВРаботеТекстНажатие(Элемент)
	
	СтатусыЗаказовПокупателей = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.ВРаботе");
	УстановитьОтображениеЭлементов(); 

КонецПроцедуры

&НаКлиенте
Процедура ЗапросДоступностиТекстНажатие(Элемент)
	
	СтатусыЗаказовПокупателей = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.ЗапросДоступности");
	УстановитьОтображениеЭлементов(); 

КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеТекстНажатие(Элемент)
	
	СтатусыЗаказовПокупателей = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.Перемещение");
	УстановитьОтображениеЭлементов(); 

КонецПроцедуры

&НаКлиенте
Процедура ПродажаТекстНажатие(Элемент)
	
	СтатусыЗаказовПокупателей = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.Продажа");
	УстановитьОтображениеЭлементов(); 

КонецПроцедуры

&НаКлиенте
Процедура ВсеТекстНажатие(Элемент)
	
	СтатусыЗаказовПокупателей = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.ПустаяСсылка");
	УстановитьОтображениеЭлементов(); 

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытыеТекстНажатие(Элемент)
	
	СтатусыЗаказовПокупателей = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.Закрыт");
	УстановитьОтображениеЭлементов(); 

КонецПроцедуры

// Функция возвращает массив динамических списков, для которых требуется установка отбора.
//
&НаСервере
Функция ПолучитьМассивДинамическихСписковНаСервере()

	МассивСписков = Новый Массив;
	МассивСписков.Добавить(ЗаказыКлиентов);
	
	Возврат МассивСписков;

КонецФункции 

// Процедура устанавливает отбор динамических списков формы.
//
&НаСервере
Процедура УстановитьОтображениеЭлементов()
	
	Для Каждого ДинамическийСписок Из ПолучитьМассивДинамическихСписковНаСервере() Цикл
		
		//ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ДинамическийСписок, "Магазин"      , Магазин                  , ЗначениеЗаполнено(Магазин)                  , ВидСравненияКомпоновкиДанных.Равно);
		//ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ДинамическийСписок, "Ответственный", Ответственный            , ЗначениеЗаполнено(Ответственный)            , ВидСравненияКомпоновкиДанных.Равно);
		//ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ДинамическийСписок, "Состояние"    , СостояниеЗаказаПокупателя, ЗначениеЗаполнено(СостояниеЗаказаПокупателя), ВидСравненияКомпоновкиДанных.Равно);
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ДинамическийСписок, "Статус"   	 , СтатусыЗаказовПокупателей, ЗначениеЗаполнено(СтатусыЗаказовПокупателей), ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЦикла;
	
	Если СотрудникКоллЦентра.Пустая() Тогда
		Элементы.НачатьРаботу.Видимость = Ложь;
		Элементы.ЗакончитьРаботу.Видимость = Ложь;
	Иначе 
		Элементы.НачатьРаботу.Видимость = Не СотрудникНаРаботе;
		Элементы.ЗакончитьРаботу.Видимость = СотрудникНаРаботе;
	КонецЕсли;

	
	Элементы.Новый.Заголовок				= "0";
	Элементы.ВРаботе.Заголовок				= "0";
	Элементы.ЗапросДоступности.Заголовок	= "0";
	Элементы.Перемещение.Заголовок 			= "0";
    Элементы.Продажа.Заголовок				= "0";
    Элементы.Доставка.Заголовок				= "0";
	
	Элементы.Новый.Гиперссылка				= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.Новый);
	Элементы.ВРаботе.Гиперссылка			= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.ВРаботе);
	Элементы.ЗапросДоступности.Гиперссылка	= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.ЗапросДоступности);
	Элементы.Перемещение.Гиперссылка		= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.Перемещение);
	Элементы.Продажа.Гиперссылка			= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.Продажа);
	Элементы.Доставка.Гиперссылка			= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.Доставка);

	Элементы.НовыйТекст.Гиперссылка				= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.Новый);
	Элементы.ВРаботеТекст.Гиперссылка			= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.ВРаботе);
	Элементы.ЗапросДоступностиТекст.Гиперссылка	= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.ЗапросДоступности);
	Элементы.ПеремещениеТекст.Гиперссылка		= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.Перемещение);
	Элементы.ПродажаТекст.Гиперссылка			= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.Продажа);
	Элементы.ДоставкаТекст.Гиперссылка			= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.Доставка);
	Элементы.ВсеТекст.Гиперссылка				= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.ПустаяСсылка());
	Элементы.ЗакрытыеТекст.Гиперссылка			= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.Закрыт);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателя.Ссылка) КАК Количество,
		|	ЗаказПокупателя.Статус КАК Статус
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Проведен
		|	И (ЗаказПокупателя.Ответственный = &Ответственный
		|			ИЛИ &ВсеОтветственный)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателя.Статус";
	
	Запрос.УстановитьПараметр("ВсеОтветственный", Не ЗначениеЗаполнено(Ответственный));
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Статус = Перечисления.СтатусыЗаказовПокупателей.Новый Тогда 
			Элементы.Новый.Заголовок				= Выборка.Количество;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыЗаказовПокупателей.ВРаботе Тогда 
			Элементы.ВРаботе.Заголовок				= Выборка.Количество;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыЗаказовПокупателей.ЗапросДоступности Тогда 
			Элементы.ЗапросДоступности.Заголовок	= Выборка.Количество;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыЗаказовПокупателей.Перемещение Тогда 
			Элементы.Перемещение.Заголовок		= Выборка.Количество;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыЗаказовПокупателей.Продажа Тогда 
			Элементы.Продажа.Заголовок 				= Выборка.Количество;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыЗаказовПокупателей.Доставка Тогда 
			Элементы.Доставка.Заголовок 			= Выборка.Количество;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура РаспределитьПоУмолчаниюНаСервере()
	
	Документы.ЗаказПокупателя.РаспределениеЗаказов();

КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоУмолчанию(Команда)
	
	РаспределитьПоУмолчаниюНаСервере();
	УстановитьОтображениеЭлементов(); 
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьВыбранныеЗаказыНаСервере(ПользовательРаспределения, Знач МассивЗаказов) 
	
	Документы.ЗаказПокупателя.РаспределениеЗаказов(ПользовательРаспределения, МассивЗаказов);  

КонецПроцедуры

&НаКлиенте
Процедура РаспределитьВыбранныеЗаказы(Команда)
	РаспределитьВыбранныеЗаказыНаСервере(Элементы.СотрудникиКоллЦентра.ТекущиеДанные.Владелец, Элементы.ЗаказыКлиентов.ВыделенныеСтроки);
	УстановитьОтображениеЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСотрудниковКоллЦетра(Команда)
	ОбновитьСотрудников();
КонецПроцедуры


&НаСервере
Процедура ОбновитьСотрудниковКоллЦетраНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СправочникСотрудникиКоллЦентра.Ссылка КАК Сотрудник,
		|	СправочникСотрудникиКоллЦентра.Наименование КАК Наименование,
		|	СправочникСотрудникиКоллЦентра.РольСотрудника КАК РольСотрудника,
		|	ВЫБОР
		|		КОГДА РаботаСотрудниковКоллЦентраСрезПоследних.Период = &Период
		|			ТОГДА ЕСТЬNULL(РаботаСотрудниковКоллЦентраСрезПоследних.НаРаботе, ЛОЖЬ)
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НаРаботе,
		|	СправочникСотрудникиКоллЦентра.Владелец КАК Владелец,
		|	СУММА(ВЫБОР
		|		КОГДА ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Новый)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК Новый,
		|	СУММА(ВЫБОР
		|		КОГДА ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.ВРАботе)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК ВРаботе,
		|	СУММА(ВЫБОР
		|		КОГДА ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.ЗапросДоступности)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК ЗапросДоступности,
		|	СУММА(ВЫБОР
		|		КОГДА ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Продажа)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК Продажа,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АктивностьПользователей.Хеш) КАК ВремяАктивности,
		|	МИНИМУМ(УчетРабочегоВремениФакт.Период) КАК НачалоРаботы
		|ИЗ
		|	Справочник.СотрудникиКоллЦентра КАК СправочникСотрудникиКоллЦентра
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботаСотрудниковКоллЦентра.СрезПоследних(,) КАК
		|			РаботаСотрудниковКоллЦентраСрезПоследних
		|		ПО (РаботаСотрудниковКоллЦентраСрезПоследних.Сотрудник = СправочникСотрудникиКоллЦентра.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ПО СправочникСотрудникиКоллЦентра.Владелец = ЗаказПокупателя.Ответственный
		|		И ЗаказПокупателя.ПометкаУдаления = ЛОЖЬ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АктивностьПользователей КАК АктивностьПользователей
		|		ПО СправочникСотрудникиКоллЦентра.Владелец = АктивностьПользователей.Пользователь
		|		И АктивностьПользователей.Период МЕЖДУ &ДатаС И &ДатаПо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетРабочегоВремениФакт КАК УчетРабочегоВремениФакт
		|		ПО СправочникСотрудникиКоллЦентра.Владелец.ФизЛицо = УчетРабочегоВремениФакт.Сотрудник
		|		И УчетРабочегоВремениФакт.ТипВремени = &ТипВремени
		|		И УчетРабочегоВремениФакт.Период > &Период
		|ГДЕ
		|	НЕ СправочникСотрудникиКоллЦентра.НеРаботает
		|	И НЕ СправочникСотрудникиКоллЦентра.ПометкаУдаления
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА РаботаСотрудниковКоллЦентраСрезПоследних.Период = &Период
		|			ТОГДА ЕСТЬNULL(РаботаСотрудниковКоллЦентраСрезПоследних.НаРаботе, ЛОЖЬ)
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	СправочникСотрудникиКоллЦентра.Ссылка,
		|	СправочникСотрудникиКоллЦентра.Наименование,
		|	СправочникСотрудникиКоллЦентра.РольСотрудника,
		|	СправочникСотрудникиКоллЦентра.Владелец";
	ДатаС  = НачалоДня(ТекущаяДата());
	ДатаПо = КонецДня(ТекущаяДата());
	Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ДатаС", ДатаС);
	Запрос.УстановитьПараметр("ДатаПо", ДатаПо);
	Запрос.УстановитьПараметр("ТипВремени", Перечисления.ТипВремени.Приход);
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("Сотрудник", Выборка.Сотрудник);
		НайденнаяСтрока = СотрудникиКоллЦентра.НайтиСтроки(Отбор);
		Если НайденнаяСтрока.Количество() = 0 Тогда
			СтрокаСотрудника = СотрудникиКоллЦентра.Добавить();
		Иначе 
			СтрокаСотрудника = НайденнаяСтрока[0];
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Выборка.НачалоРаботы) тогда
			НачалоРаботы="";
		Иначе  
			НачалоРаботы=Формат(Выборка.НачалоРаботы,"ДФ=HH:mm");
		КонецЕсли;
		СтрокаСотрудника.Сотрудник 			= Выборка.Сотрудник;
		СтрокаСотрудника.Наименование 		= Выборка.Наименование;
		СтрокаСотрудника.РольСотрудника 	= Выборка.РольСотрудника;
		//СтрокаСотрудника.НовыеЗаказы 		= Выборка.НовыеЗаказы;
		//СтрокаСотрудника.ОтработанныеЗаказы = Выборка.ОтработанныеЗаказы; 
		СтрокаСотрудника.Владелец 			= Выборка.Владелец; 
		СтрокаСотрудника.НовыеЗаказы		= Выборка.Новый; 
		СтрокаСотрудника.ВРАботе 			= Выборка.ВРАботе; 
		СтрокаСотрудника.ЗапросДоступности 	= Выборка.ЗапросДоступности; 
		СтрокаСотрудника.Продажа 			= Выборка.Продажа; 
		СтрокаСотрудника.ВремяАктивности 	= Выборка.ВремяАктивности; 	  
		СтрокаСотрудника.НаРаботе 			= Выборка.НаРаботе; 	
		СтрокаСотрудника.НачалоРаботы		= НачалоРаботы; 	
	КонецЦикла;

КонецПроцедуры


&НаКлиенте
Процедура СотрудникиКоллЦентраПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СотрудникиКоллЦентра.ТекущиеДанные = Неопределено Тогда
		Ответственный = "";
	Иначе
		Ответственный = Элементы.СотрудникиКоллЦентра.ТекущиеДанные.Владелец; 
	КонецЕсли; 
	
	ЗаказыКлиентов.Параметры.УстановитьЗначениеПараметра("Ответственный", Ответственный);
	СотрудникКоллЦентра = ЗаказыПокупателейСервер.ЯвляетсяСотрудникомКоллЦентра(Ответственный).СотрудникКоллЦентра;
	ПодключитьОбработчикОжидания("ОбновитьПриАктивации", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиКоллЦентраПеретаскиваниеНаСервере(ДокументыПереброски, СотрудникКоллЦентра)  
	
	Для Каждого ДокЗаказа Из ДокументыПереброски Цикл
		Если ДокЗаказа.Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт
				Или ДокЗаказа.Статус = Перечисления.СтатусыЗаказовПокупателей.Отменён Тогда 
			Продолжить;
		КонецЕсли;
		
		ДокументЗаказаОбъект = ДокЗаказа.ПолучитьОбъект();
		ДокументЗаказаОбъект.Ответственный = СотрудникКоллЦентра.Владелец;
		ДокументЗаказаОбъект.Записать(); 
		ЗаказыПокупателейСервер.СотрудникНовыйЗаказ(СотрудникКоллЦентра);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиКоллЦентраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	СотрудникиКоллЦентраПеретаскиваниеНаСервере(ПараметрыПеретаскивания.Значение, СотрудникиКоллЦентра.НайтиПоИдентификатору(Строка).Сотрудник);
	УстановитьОтображениеЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура НачатьРаботу(Команда)
	ЗаказыПокупателейСервер.СотрудникНаРаботе(СотрудникКоллЦентра, Истина);  
	ОбновитьСотрудников();   
	Если ЗначениеЗаполнено(СотрудникКоллЦентра) тогда 
		СделатьЗаписьВрегистрПриход(СотрудникКоллЦентра);  
	КонецЕсли;
	
	//СотрудникНаРаботе = ЗаказыПокупателейСервер.СотрудникРаботает(СотрудникКоллЦентра);
	//ОтображениеКнопокКЦ(); 
КонецПроцедуры

 
&НаСервере
Процедура СделатьЗаписьВрегистрПриход(СотрудникКоллЦентра)
	Пользователь = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СотрудникКоллЦентра,"Владелец");	
	ФизЛицо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Пользователь,"ФизЛицо");
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		//ТипВремени = ПолучитьТипВремени();
			
		текДАта =ТекущаяДата();	
		Магазин = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин;
		Организация = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Магазин,"Организация");
		НаборЗаписей = РегистрыСведений.УчетРабочегоВремениФакт.СоздатьНаборЗаписей(); 

		НаборЗаписей.Отбор.Организация.Установить(Организация);
		НаборЗаписей.Отбор.Магазин.Установить(Магазин);    
		НаборЗаписей.Отбор.Сотрудник.Установить(ФизЛицо); 
		НаборЗаписей.Отбор.период.Установить(текДАта); 
		НаборЗаписей.Отбор.ТипВремени.Установить(Перечисления.ТипВремени.Приход); 
		НовЗапись = НаборЗаписей.Добавить();
		НовЗапись.Организация = Организация;
		НовЗапись.Магазин = Магазин;
		НовЗапись.Сотрудник = ФизЛицо;
		НовЗапись.период = текДАта;
		НовЗапись.ЗаписаноЗаданием = Ложь;
		НовЗапись.ТипВремени = Перечисления.ТипВремени.Приход;
		НаборЗаписей.Записать(Истина);
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
		УстановитьПривилегированныйРежим(Ложь);
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура СделатьЗаписьВрегистрУход(СотрудникКоллЦентра)
	Пользователь = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СотрудникКоллЦентра,"Владелец");
	ФизЛицо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Пользователь,"ФизЛицо");	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		//ТипВремени = ПолучитьТипВремени();
			
		текДАта =ТекущаяДата();	
		Магазин = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин;
		Организация = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Магазин,"Организация");
		НаборЗаписей = РегистрыСведений.УчетРабочегоВремениФакт.СоздатьНаборЗаписей(); 
		
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		НаборЗаписей.Отбор.Магазин.Установить(Магазин); 
		НаборЗаписей.Отбор.Сотрудник.Установить(ФизЛицо); 
		НаборЗаписей.Отбор.период.Установить(текДАта); 
		НаборЗаписей.Отбор.ТипВремени.Установить(Перечисления.ТипВремени.Уход); 
		НовЗапись = НаборЗаписей.Добавить();
		НовЗапись.Организация = Организация;
		НовЗапись.Магазин = Магазин;
		НовЗапись.Сотрудник = ФизЛицо;
		НовЗапись.период = текДАта;
		НовЗапись.ЗаписаноЗаданием = Ложь;
		НовЗапись.ТипВремени = Перечисления.ТипВремени.Уход;
		НаборЗаписей.Записать(Истина);
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
		УстановитьПривилегированныйРежим(Ложь);
	КонецПопытки;
КонецПроцедуры


&НаКлиенте
Процедура ЗакончитьРаботу(Команда)
	ЗаказыПокупателейСервер.СотрудникНаРаботе(СотрудникКоллЦентра, Ложь);
	ОбновитьСотрудников();  
	Если ЗначениеЗаполнено(СотрудникКоллЦентра) тогда 
		СделатьЗаписьВрегистрУход(СотрудникКоллЦентра);  
	КонецЕсли;
	//СотрудникНаРаботе = ЗаказыПокупателейСервер.СотрудникРаботает(СотрудникКоллЦентра);
	//ОтображениеКнопокКЦ();
КонецПроцедуры

&НаКлиенте
Процедура ПередатьДругомуОператору(Команда)

	
	Оповещение = Новый ОписаниеОповещения("ПередатьДругомуОператоруЗавершение", ЭтотОбъект);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	//ПараметрыФормы.Вставить("ТекущаяСтрока", ?(
	//	Ответственный.Пустая(),
	//	Неопределено,
	//	Ответственный));

	
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормы.Вставить("ОтборСотрудниковКЦ", Истина);
	
	
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, ЭтаФорма, , , , Оповещение);


КонецПроцедуры

&НаКлиенте
Процедура ПередатьДругомуОператоруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда 
		ПередатьДругомуОператоруНаСервере(Результат, Элементы.ЗаказыКлиентов.ВыделенныеСтроки);  
		УстановитьОтображениеЭлементов();
	КонецЕсли;
	
КонецПроцедуры     

&НаСервере
Процедура ПередатьДругомуОператоруНаСервере(ПолучательЗаказа, Знач МассивДокументов)
	
	Для Каждого ДокументЗаказаСсылка Из МассивДокументов Цикл 
		
		ДокументЗаказа = ДокументЗаказаСсылка.ПолучитьОбъект();
		ДокументЗаказа.Ответственный = ПолучательЗаказа;
		ДокументЗаказа.Записать();  
		ПолучательЗаказаСотрудник = Справочники.СотрудникиКоллЦентра.Выбрать(, ПолучательЗаказа);  
		ПолучательЗаказаСотрудник.Следующий();
		ЗаказыПокупателейСервер.СотрудникНовыйЗаказ(ПолучательЗаказаСотрудник.Ссылка);   
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ДоставкаТекстНажатие(Элемент)
	
	СтатусыЗаказовПокупателей = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.Доставка");
	УстановитьОтображениеЭлементов(); 

КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКлиентовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	//СтандартнаяОбработка	=	Ложь;
	//Сообщить("");
	//Элементы.ЗаказыКлиентов.ВыделенныеСтроки.Добавить(Строка);  
	СтандартнаяОбработка	=	Ложь;
	Элементы.ЗаказыКлиентов.ВыделенныеСтроки.Добавить(Строка);
	Элементы.ЗаказыКлиентов.Обновить();    
КонецПроцедуры




	
