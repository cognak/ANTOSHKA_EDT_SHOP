////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьПрименениеЦен = ПолучитьФункциональнуюОпцию("ИспользоватьПрименениеЦен");
	
	ЗагрузитьНастройкиОтбораПоУмолчанию();
	
	Элементы.Вариант.СписокВыбора.Добавить("ПоОтбору",      НСтр("ru = 'По отбору'"));
	Элементы.Вариант.СписокВыбора.Добавить("ПоДокументу",   НСтр("ru = 'По товарам документа'"));
	
	Если ЗначениеЗаполнено(Параметры.ВариантЗаполнения) И (Параметры.ВариантЗаполнения = "ПоДокументу") Тогда
		
		Документ = Параметры.Документ;
		ВариантЗаполнения = "ПоДокументу";
		ВыгружатьЦену = Параметры.ВыгружатьЦену;
		ЗаполнитьНаСервере();
		Элементы.ОтборТоваров.Видимость = Ложь;
		Элементы.Сообщение.Видимость    = Истина;
		ЭтотОбъект.Команды.Заполнить.Заголовок = НСтр("ru = 'Обновить'"); 
		
	Иначе
		
		Элементы.ОтборТоваров.Видимость = Истина;
		Элементы.Сообщение.Видимость    = Ложь;
		ВариантЗаполнения = "ПоОтбору";
		Объект.ЦеныНаДату = ТекущаяДатаСеанса();
		
		Объект.Магазин = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию();
		ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
		Объект.ЦеныНазначенныеДействующие = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "ИспользоватьПрименениеЦен");
		
		Если ИспользоватьАссортимент И ЗначениеЗаполнено(Объект.Магазин) Тогда
			Объект.ФорматМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "ФорматМагазина");
		КонецЕсли;
		
		ЦеныПоВидуЦеныПриИзмененииСервер();
		
		ВыгружатьЦену  = Истина;
		
	КонецЕсли;
	
	Элементы.ТоварыЦена.Видимость = ВыгружатьЦену;
	Элементы.ТоварыХарактеристика.Видимость =  ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	Элементы.ТоварыУпаковка.Видимость       =  ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ВариантЗаполнения = Настройки["ВариантЗаполнения"];
	
КонецПроцедуры

&НаСервере
Процедура ЦеныПоВидуЦеныПриИзмененииСервер()
	
	Элементы.ВидЦены.Доступность = ЦеныПоВидуЦены = 1;
	Элементы.ВидЦены.АвтоОтметкаНезаполненного = ЦеныПоВидуЦены = 1;
	Элементы.ВидЦены.ОтметкаНезаполненного = ЦеныПоВидуЦены = 1;
	Объект.ЦеныПоВидуЦены = ЦеныПоВидуЦены = 1;
	
	Если ЦеныПоВидуЦены = 0  Тогда
		
		Если ЗначениеЗаполнено(Объект.Магазин) И ИспользоватьПрименениеЦен
			И Объект.Магазин.ИспользоватьПрименениеЦен Тогда
			
			Элементы.ЦеныНазначенныеДействующие.Доступность = Истина;
			Элементы.ЦеныНазначенныеДействующие.ТолькоПросмотр = Ложь;
			Элементы.ЦеныНазначенныеДействующие.КнопкаСпискаВыбора = Истина;
			
		Иначе
			
			Элементы.ЦеныНазначенныеДействующие.Доступность = Истина;
			Элементы.ЦеныНазначенныеДействующие.ТолькоПросмотр = Истина;
			Элементы.ЦеныНазначенныеДействующие.КнопкаСпискаВыбора = Ложь;
			Если Объект.ЦеныНазначенныеДействующие Тогда
				Объект.ЦеныНазначенныеДействующие = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ЦеныНазначенныеДействующие.Доступность = Ложь;
		Элементы.ЦеныНазначенныеДействующие.КнопкаСпискаВыбора = Ложь;
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыгрузитьВыполнить(Команда)
	
	ОчиститьСообщения();
	
	Элементы.Товары.ОтборСтрок = Неопределено;
	Элементы.Товары.Обновить();
	
	Если МенеджерОборудованияКлиент.ВыгрузитьДанныеВТСД(УникальныйИдентификатор, МассивБазыТоваров()) Тогда
		
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("ОшибкиВыгрузки", Истина);
		
		Если Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Товары успешно выгружены.'"));
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Товары с незаданным штрихкодами не выгружены.'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	Если ВариантЗаполнения = "ПоОтбору" 
		И НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Магазин""'"),
			,
			"Объект.Магазин",
			,
			Отказ
		);
		Возврат;
	КонецЕсли;

	Если ВариантЗаполнения = "ПоОтбору" И ИспользоватьАссортимент 
		И НЕ ЗначениеЗаполнено(Объект.ФорматМагазина) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'У выбранного магазина не заполнено поле ""Формат магазина""'"),
			,
			"Объект.Магазин",
			,
			Отказ
		);
		Возврат;
	КонецЕсли;

	Если ВариантЗаполнения = "ПоДокументу"
		И НЕ ЗначениеЗаполнено(Документ) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Документ""'"),
			,
			"Документ",
			,
			Отказ
		);
		Возврат;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗаполнитьНаСервере();
	КонецЕсли;
	
	Элементы.Товары.ОтборСтрок = Неопределено;
	Элементы.Товары.Обновить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ШАПКИ

&НаКлиенте
Процедура ВариантЗаполненияПриИзменении(Элемент)
	
	//Элементы.Страницы.ТекущаяСтраница = Элементы[ВариантЗаполнения];
	
	Если ВариантЗаполнения = "ПоОтбору" Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы["ПоОтбору"];
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы["ПоДокументу"];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		МагазинПриИзмененииСервер();
	Иначе
		Объект.ФорматМагазина = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЦеныПоВидуЦеныПриИзменении(Элемент)
	
	ЦеныПоВидуЦеныПриИзмененииСервер();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ТекстЗапросаПересчетаЦен()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|";
	
	Если ЦеныПоВидуЦены = 0 Тогда
		
		Если Объект.ЦеныНазначенныеДействующие Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.НомерСтроки,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Упаковка,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) = ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
			|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
			|			КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0) = 0
			|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0)
			|			ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
			|		КОНЕЦ КАК ЧИСЛО(17, 2)) КАК Цена
			|ИЗ
			|	Товары КАК Товары
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(&Период, ОбъектЦенообразования = &Магазин) КАК ЦеныНоменклатуры
			|		ПО (ЦеныНоменклатуры.Номенклатура = Товары.Номенклатура)
			|			И (ЦеныНоменклатуры.Характеристика = Товары.Характеристика)
			|";
			
		Иначе
			Если АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин) Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Ассортимент.Номенклатура КАК Номенклатура,
				|	Ассортимент.ВидЦен КАК ВидЦен
				|ПОМЕСТИТЬ втАссортимент
				|ИЗ
				|	РегистрСведений.Ассортимент.СрезПоследних(
				|			КОНЕЦПЕРИОДА(&Период, ДЕНЬ),
				|			ОбъектПланирования = &ФорматМагазина
				|				И Номенклатура В
				|					(ВЫБРАТЬ
				|						Т.Номенклатура
				|					ИЗ
				|						Товары КАК Т)) КАК Ассортимент
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура,
				|	ВидЦен
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Товары.НомерСтроки,
				|	Товары.Номенклатура,
				|	Товары.Характеристика,
				|	Товары.Упаковка,
				|	ВЫРАЗИТЬ(ВЫБОР
				|			КОГДА ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) = ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
				|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
				|			КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0) = 0
				|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0)
				|			ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
				|		КОНЕЦ КАК ЧИСЛО(17, 2)) КАК Цена
				|ИЗ
				|	Товары КАК Товары
				|		ЛЕВОЕ СОЕДИНЕНИЕ втАссортимент КАК Ассортимент
				|		ПО Товары.Номенклатура = Ассортимент.Номенклатура
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
				|				&Период,
				|				Номенклатура В
				|						(ВЫБРАТЬ
				|							Т.Номенклатура
				|						ИЗ
				|							втАссортимент КАК Т)
				|					И ВидЦены В
				|						(ВЫБРАТЬ
				|							Т.ВидЦен
				|						ИЗ
				|							втАссортимент КАК Т)) КАК ЦеныНоменклатуры
				|		ПО Товары.Номенклатура = ЦеныНоменклатуры.Номенклатура
				|			И Товары.Характеристика = ЦеныНоменклатуры.Характеристика
				|			И (Ассортимент.ВидЦен = ЦеныНоменклатуры.ВидЦены)
				|";
				
			Иначе
				ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ЦеновыеГруппы.ЦеноваяГруппа КАК ЦеноваяГруппа,
				|	ЦеновыеГруппы.ВидЦен КАК ВидЦен
				|ПОМЕСТИТЬ ЦеновыеГруппыПравила
				|ИЗ
				|	Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ЦеновыеГруппы
				|ГДЕ
				|	ЦеновыеГруппы.Ссылка = &ПравилоЦенообразования
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ВидЦен,
				|	ЦеноваяГруппа
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ВидЦеныПравила.ВидЦен КАК ВидЦен
				|ПОМЕСТИТЬ ВидЦеныПравила
				|ИЗ
				|	Справочник.ПравилаЦенообразования КАК ВидЦеныПравила
				|ГДЕ
				|	ВидЦеныПравила.Ссылка = &ПравилоЦенообразования
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ПодЗапрос.Номенклатура КАК Номенклатура,
				|	ПодЗапрос.Характеристика КАК Характеристика,
				|	ПодЗапрос.Упаковка КАК Упаковка,
				|	ПодЗапрос.Цена КАК Цена
				|ПОМЕСТИТЬ ЦеныНоменклатуры
				|ИЗ
				|	(ВЫБРАТЬ
				|		ПодЗапрос1.Номенклатура КАК Номенклатура,
				|		ПодЗапрос1.Характеристика КАК Характеристика,
				|		ВЫБОР
				|			КОГДА МАКСИМУМ(ПодЗапрос1.ЦенаПоЦеновымГруппам) > 0
				|				ТОГДА МАКСИМУМ(ПодЗапрос1.УпаковкаПоЦеновымГруппам)
				|			ИНАЧЕ МАКСИМУМ(ПодЗапрос1.УпаковкаПоВидуЦен)
				|		КОНЕЦ КАК Упаковка,
				|		ВЫБОР
				|			КОГДА МАКСИМУМ(ПодЗапрос1.ЦенаПоЦеновымГруппам) > 0
				|				ТОГДА МАКСИМУМ(ПодЗапрос1.ЦенаПоЦеновымГруппам)
				|			ИНАЧЕ МАКСИМУМ(ПодЗапрос1.ЦенаПоВидуЦен)
				|		КОНЕЦ КАК Цена
				|	ИЗ
				|		(ВЫБРАТЬ
				|			ЦеныНоменклатурыПоВидуЦен.Номенклатура КАК Номенклатура,
				|			ЦеныНоменклатурыПоВидуЦен.Характеристика КАК Характеристика,
				|			ЦеныНоменклатурыПоВидуЦен.Упаковка КАК УпаковкаПоВидуЦен,
				|			ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК УпаковкаПоЦеновымГруппам,
				|			ЦеныНоменклатурыПоВидуЦен.Цена КАК ЦенаПоВидуЦен,
				|			0 КАК ЦенаПоЦеновымГруппам
				|		ИЗ
				|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
				|					&Период,
				|					ВидЦены В
				|							(ВЫБРАТЬ
				|								ВидЦеныПравила.ВидЦен
				|							ИЗ
				|								ВидЦеныПравила КАК ВидЦеныПравила)
				|						И (Номенклатура, Характеристика) В
				|							(ВЫБРАТЬ
				|								Товары.Номенклатура,
				|								Товары.Характеристика
				|							ИЗ
				|								Товары КАК Товары)) КАК ЦеныНоменклатурыПоВидуЦен
				|		
				|		ОБЪЕДИНИТЬ ВСЕ
				|		
				|		ВЫБРАТЬ
				|			СправочникНоменклатура.Ссылка,
				|			ЦеныНоменклатурыПоЦеновымГруппам.Характеристика,
				|			ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка),
				|			ЦеныНоменклатурыПоЦеновымГруппам.Упаковка,
				|			0,
				|			ЕСТЬNULL(ЦеныНоменклатурыПоЦеновымГруппам.Цена, 0)
				|		ИЗ
				|			ЦеновыеГруппыПравила КАК ЦеновыеГруппыПравила
				|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
				|				ПО ЦеновыеГруппыПравила.ЦеноваяГруппа = СправочникНоменклатура.ЦеноваяГруппа
				|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
				|						&Период,
				|						ВидЦены В
				|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
				|									ЦеновыеГруппыПравила.ВидЦен
				|								ИЗ
				|									ЦеновыеГруппыПравила КАК ЦеновыеГруппыПравила)
				|							И (Номенклатура, Характеристика) В
				|								(ВЫБРАТЬ
				|									Товары.Номенклатура,
				|									Товары.Характеристика
				|								ИЗ
				|									Товары КАК Товары)) КАК ЦеныНоменклатурыПоЦеновымГруппам
				|				ПО (ЦеныНоменклатурыПоЦеновымГруппам.Номенклатура = СправочникНоменклатура.Ссылка)
				|					И (ЦеныНоменклатурыПоЦеновымГруппам.ВидЦены = ЦеновыеГруппыПравила.ВидЦен)) КАК ПодЗапрос1
				|	
				|	СГРУППИРОВАТЬ ПО
				|		ПодЗапрос1.Номенклатура,
				|		ПодЗапрос1.Характеристика) КАК ПодЗапрос
				|;
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Товары.НомерСтроки,
				|	Товары.Номенклатура,
				|	Товары.Характеристика,
				|	Товары.Упаковка,
				|	ВЫРАЗИТЬ(ВЫБОР
				|			КОГДА ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) = ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
				|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
				|			КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0) = 0
				|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0)
				|			ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
				|		КОНЕЦ КАК ЧИСЛО(17, 2)) КАК Цена
				|ИЗ
				|	Товары КАК Товары
				|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
				|		ПО (ЦеныНоменклатуры.Номенклатура = Товары.Номенклатура)
				|			И (ЦеныНоменклатуры.Характеристика = Товары.Характеристика)
				|";
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Упаковка,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) = ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
		|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
		|			КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0) = 0
		|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0)
		|			ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
		|		КОНЕЦ КАК ЧИСЛО(17, 2)) КАК Цена
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, ВидЦены = &ВидЦены) КАК ЦеныНоменклатуры
		|		ПО (ЦеныНоменклатуры.Номенклатура = Товары.Номенклатура)
		|			И (ЦеныНоменклатуры.Характеристика = Товары.Характеристика)";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура ПересчитатьЦеныСервер()
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПересчетаЦен();
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Период", Объект.ЦеныНаДату);
	Запрос.УстановитьПараметр("ВидЦены", Объект.ВидЦены);
	
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ПравилоЦенообразования", "ПравилоЦенообразования");
	СтруктураРеквизитов.Вставить("ФорматМагазина", "ФорматМагазина");
	СтруктураМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Магазин, СтруктураРеквизитов);
	Запрос.УстановитьПараметр("ПравилоЦенообразования", СтруктураМагазина.ПравилоЦенообразования);
	Запрос.УстановитьПараметр("ФорматМагазина", СтруктураМагазина.ФорматМагазина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ОбработаноСтрок = 0;
	Пока Выборка.Следующий() Цикл
		ОбработаноСтрок = ОбработаноСтрок + 1;
		СтрокаТовары = Объект.Товары[Выборка.НомерСтроки - 1];
		СтрокаТовары.Цена = Выборка.Цена;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере                                                
Процедура ЗаполнитьПоОтборуНаСервере()
	
	Объект.Товары.Очистить();
	
	// Поля необходимые для вывода в таблицу товаров на форме.
	СтруктураНастроек = Обработки.ВыгрузкаТоваровВТСД.СтруктураНастроек();
	
	СтруктураНастроек.ОбязательныеПоля.Добавить("Цена");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Штрихкод");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Количество");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Упаковка");
	КонецЕсли;
	СтруктураНастроек.ОбязательныеПоля.Добавить("Весовой");
	СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоОстаток");
	
	// Шаблоны этикеток и ценников.
	СтруктураНастроек.КомпоновщикНастроек = КомпоновщикНастроек;
	
	Если ИспользоватьАссортимент Тогда
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаБДТоварыАссортимент";
	Иначе
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаБДТовары";
	КонецЕсли;
	
	Объект.Товары.Очистить();
	
	// Загрузка сформированного списка товаров.
	Таблица = Обработки.ВыгрузкаТоваровВТСД.ПодготовитьСтруктуруДанных(СтруктураНастроек, Объект.Магазин, Объект.ФорматМагазина);
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
			НоваяСтрока.Характеристика = СтрокаТЧ.Характеристика;
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			НоваяСтрока.Упаковка             = СтрокаТЧ.Упаковка;
		КонецЕсли;
		НоваяСтрока.Штрихкод        = СтрокаТЧ.Штрихкод;
		НоваяСтрока.ОшибкиВыгрузки  = ПустаяСтрока(СтрокаТЧ.Штрихкод);
		НоваяСтрока.Количество      = СтрокаТЧ.КоличествоОстаток;
		НоваяСтрока.Цена            = 0;
	КонецЦикла;
	
	Если ИспользоватьАссортимент Тогда
		ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.Настройки, "ФорматМагазина", Объект.ФорматМагазина);
		ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.Настройки, "НаДату", ТекущаяДатаСеанса());
	КонецЕсли;
	
	ПересчитатьЦеныСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоТоварамДокументаНаСервере()
	
	Объект.Товары.Очистить();
	
	ДокументИмяТипа = Документ.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТоваров.Номенклатура,
		|	ТаблицаТоваров.Упаковка,
		|	ТаблицаТоваров.Характеристика,
		|	ТаблицаТоваров.КоличествоУпаковок, 
		|	%Цена%
		|	Штрихкоды.Штрихкод
		|ИЗ
		|	Документ.%ДокументИмяТипа%.Товары КАК ТаблицаТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
		|		ПО ТаблицаТоваров.Номенклатура = Штрихкоды.Владелец
		|			И ТаблицаТоваров.Характеристика = Штрихкоды.Характеристика
		|			И ТаблицаТоваров.Упаковка = Штрихкоды.Упаковка
		|ГДЕ
		|	ТаблицаТоваров.Ссылка = &Документ
		|УПОРЯДОЧИТЬ ПО Штрихкоды.Штрихкод";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ДокументИмяТипа%", ДокументИмяТипа);
	
	Если ВыгружатьЦену Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Цена%", "ТаблицаТоваров.Цена,");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Цена%", "");
	КонецЕсли;

	Запрос.УстановитьПараметр("Документ", Документ); 
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура         = Выборка.Номенклатура;
		НоваяСтрока.Характеристика       = Выборка.Характеристика;
		НоваяСтрока.Упаковка             = Выборка.Упаковка;
		НоваяСтрока.Штрихкод             = Выборка.Штрихкод;
		НоваяСтрока.ОшибкиВыгрузки       = ПустаяСтрока(Выборка.Штрихкод);
		НоваяСтрока.Количество           = Выборка.КоличествоУпаковок;
		Если ВыгружатьЦену Тогда
			НоваяСтрока.Цена             = Выборка.Цена;
		КонецЕсли
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	УстановитьПривилегированныйРежим(Истина); 
	
	Если ВариантЗаполнения = "ПоОтбору" Тогда
		ЗаполнитьПоОтборуНаСервере();
	ИначеЕсли ВариантЗаполнения = "ПоДокументу" Тогда
		ЗаполнитьПоТоварамДокументаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция МассивБазыТоваров()

	МассивВыгрузки = Новый Массив();
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		МассивВыгрузки.Добавить(Новый Структура("Штрихкод, Номенклатура, ЕдиницаИзмерения, ХарактеристикаНоменклатуры, Количество, Цена",
			СтрокаТЧ.Штрихкод, СтрокаТЧ.Номенклатура, СтрокаТЧ.Упаковка, СтрокаТЧ.Характеристика, 0, СтрокаТЧ.Цена));
	КонецЦикла;

	Возврат МассивВыгрузки;

КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию()
	
	Если ИспользоватьАссортимент Тогда
		СхемаКомпоновкиДанных = Обработки.ВыгрузкаТоваровВТСД.ПолучитьМакет("ПоляШаблонаБДТоварыАссортимент");
	Иначе
		СхемаКомпоновкиДанных = Обработки.ВыгрузкаТоваровВТСД.ПолучитьМакет("ПоляШаблонаБДТовары");
	КонецЕсли;
	
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтотОбъект.УникальныйИдентификатор))
	);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Если ИспользоватьАссортимент Тогда
		ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.Настройки, "ФорматМагазина", Объект.ФорматМагазина);
		ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.Настройки, "НаДату", ТекущаяДатаСеанса());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПриИзменении(Элемент)
	
	Объект.Товары.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Товары.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Объект.Товары.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Результат = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если НЕ (Результат = Неопределено) Тогда
		ОткрытьЗначение(Результат.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаПриИзменении(Элемент)
	
	Объект.Товары.Очистить();

КонецПроцедуры

&НаСервере
Процедура МагазинПриИзмененииСервер()
	Объект.ФорматМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "ФорматМагазина");
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	Объект.ЦеныНазначенныеДействующие = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "ИспользоватьПрименениеЦен");
	
	Если ИспользоватьАссортимент И НЕ ЗначениеЗаполнено(Объект.ФорматМагазина) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'У выбранного магазина не заполнено поле ""Формат магазина""'"),
			,
			"Объект.Магазин",
			,
			);
	КонецЕсли;
КонецПроцедуры
