&НаКлиенте
Перем ОбновитьИнтерфейс;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда

		Возврат;

	КонецЕсли;
	
//	Значения реквизитов формы
	РежимРаботы = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	// Настройки видимости при запуске
	Элементы.ГруппаОбработкаРегламентныеИФоновыеЗадания.Видимость               = РежимРаботы.ЭтоАдминистраторСистемы;
	Элементы.ГруппаУправлениеПолнотекстовымПоискомИИзвлечениемТекстов.Видимость = РежимРаботы.ЭтоАдминистраторСистемы;
	Элементы.ГруппаРезервноеКопированиеИВосстановление.Видимость                = Ложь;
	Элементы.ГруппаВосстановлениеРезервнойКопии.Видимость                       = РежимРаботы.Локальный И РежимРаботы.ЭтоАдминистраторСистемы;
	Элементы.ГруппаВосстановлениеРезервнойКопииВМоделиСервиса.Видимость         = РежимРаботы.МодельСервиса И РежимРаботы.ЭтоАдминистраторПрограммы И ПоддержкаРезервногоКопированияВМоделиСервиса;
	Элементы.ГруппаКлассификаторы.Видимость                                     = РежимРаботы.Локальный;

//	LNK 06.04.2018 09:24:23
//	Элементы.КолонкиГруппыОбновленияКонфигурации.Видимость = РежимРаботы.Локальный И РежимРаботы.ЭтоГлавныйУзел И РежимРаботы.ЭтоАдминистраторСистемы;
//	LNK 12.08.2019 11:52:19
	Элементы.ГруппаОбновлениеИОписаниеИзменений.Доступность = РежимРаботы.ЭтоГлавныйУзел И РежимРаботы.ЭтоАдминистраторСистемы;
	Элементы.ГруппаДоступностьВнешнихРесурсов.Доступность   = РежимРаботы.ЭтоАдминистраторСистемы;

	Элементы.ПроверитьСоединениеСЦБ.Доступность = НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел();	//	LNK 18.08.2020 06:11:09
	
	Если Элементы.ГруппаДоступностьВнешнихРесурсов.Доступность Тогда

		Элементы.РесурсWebRetailДоступен.Доступность = НЕ РежимРаботы.ЭтоГлавныйУзел;

	КонецЕсли;

	// Обновление состояния элементов
	УстановитьДоступность();

//	LNK 12.08.2016
	УстановитьОформлениеЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПодключитьОбработчикОжидания("ОбновитьОформлениеЭлементов", 3);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура РезервноеКопированиеПрограммыНажатие(Элемент)
	
	Если РежимРаботы.Локальный Тогда
		ОткрытьФорму("Обработка.РезервноеКопированиеИБ.Форма", , ЭтотОбъект);
	ИначеЕсли РежимРаботы.МодельСервиса Тогда
		ОткрытьФорму("ОбщаяФорма.СозданиеРезервнойКопии", , ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРезервногоКопированияНажатие(Элемент)
	
	Если РежимРаботы.Локальный Тогда
		ОткрытьФорму("Обработка.НастройкаРезервногоКопированияИБ.Форма", , ЭтотОбъект);
	ИначеЕсли РежимРаботы.МодельСервиса Тогда
		ОткрытьФорму("ОбщаяФорма.НастройкиРезервногоКопированияПриложений", , ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановлениеИзРезервнойКопииНажатие(Элемент)
	
	ОткрытьФорму("Обработка.РезервноеКопированиеИБ.Форма.ВосстановлениеДанныхИнформационнойБазыИзРезервнойКопии", , ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗагрузитьКурсыВалют(Команда)
	
	ОткрытьФорму("Обработка.ЗагрузкаКурсовВалют.Форма");
	
КонецПроцедуры

//	LNK 12.08.2016
&НаКлиенте
Процедура ПереключитьИсключительныйРежим(Команда)
	
	ИспользуетсяИсключительныйРежим = ПереключитьИсключительныйРежимНаСервере();

	ПоказатьОповещениеПользователя("ИсключительныйРежим = " + ИспользуетсяИсключительныйРежим,,, БиблиотекаКартинок.Информация32);
	УстановитьОформлениеЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаУправлениеПолнотекстовымПоиском(Команда)
	
	ОткрытьФорму("Обработка.ПанельАдминистрированияБСП.Форма.УправлениеПолнотекстовымПоискомИИзвлечениемТекстов", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте	//	LNK 12.08.2019 12:06:52
Процедура РесурсMicrosoftDynamicsДоступенПриИзменении(Элемент)

	Подключаемый_ПриИзмененииРеквизита(Элемент);

КонецПроцедуры

&НаКлиенте	//	LNK 12.08.2019 12:06:56
Процедура РесурсWebRetailДоступенПриИзменении(Элемент)

	Подключаемый_ПриИзмененииРеквизита(Элемент);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		#Если НЕ ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		ОбновитьИнтерфейс = Истина;
		#КонецЕсли
	КонецЕсли;
	
	Если Результат.Свойство("ОповещениеФорм") Тогда
		Оповестить(Результат.ОповещениеФорм.ИмяСобытия, Результат.ОповещениеФорм.Параметр, Результат.ОповещениеФорм.Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	#Если НЕ ВебКлиент Тогда
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	Результат = Новый Структура;
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
	
КонецФункции

//	LNK 12.08.2016
&НаСервере
Процедура УстановитьОформлениеЭлементов()

	Если ПараметрыСеанса.ИсключительныйРежим Тогда

		Элементы.ПереключитьИсключительныйРежим.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
		Элементы.ПереключитьИсключительныйРежим.Картинка   = БиблиотекаКартинок.Информация;

	Иначе
		
		Элементы.ПереключитьИсключительныйРежим.ЦветТекста = ЦветаСтиля.ЦветТекстаПодсказки;
		Элементы.ПереключитьИсключительныйРежим.Картинка = БиблиотекаКартинок.ИнформацияПоНедоступнымПолям;

	КонецЕсли;
	
	Если ПараметрыСеанса.ДоступныВсеОрганизации Тогда

		Элементы.ИспользоватьВсеОрганизации.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
		Элементы.ИспользоватьВсеОрганизации.Картинка   = БиблиотекаКартинок.ИнтеграцияВключена;

	Иначе
		
		Элементы.ИспользоватьВсеОрганизации.ЦветТекста = ЦветаСтиля.ЦветТекстаПодсказки;
		Элементы.ИспользоватьВсеОрганизации.Картинка = БиблиотекаКартинок.ИнформацияПоНедоступнымПолям;

	КонецЕсли;
	
	Элементы.ИспользоватьВсеОрганизации.Видимость = ПараметрыСеанса.ИсключительныйРежим;
	Элементы.ОбновитьНумерациюОбъектов.Видимость  = ТехническаяПоддержкаПовтИсп.ИсключительныйРежим();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат;
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		ОповещениеФорм = Новый Структура("ИмяСобытия, Параметр, Источник", "Запись_НаборКонстант", Новый Структура, КонстантаИмя);
		Результат.Вставить("ОповещениеФорм", ОповещениеФорм);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РежимРаботы.ЭтоАдминистраторСистемы Тогда
		
		//Если РеквизитПутьКДанным = "НаборКонстант.ВыполнятьЗамерыПроизводительности" ИЛИ РеквизитПутьКДанным = "" Тогда
		//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбработкаОценкаПроизводительности", "Доступность", НаборКонстант.ВыполнятьЗамерыПроизводительности);
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//	LNK 12.08.2016
&НаСервереБезКонтекста
Функция ПереключитьИсключительныйРежимНаСервере()

	ПараметрыСеанса.ИсключительныйРежим = НЕ ПараметрыСеанса.ИсключительныйРежим;
	
	Если Не ПараметрыСеанса.ИсключительныйРежим Тогда 
		ПараметрыСеанса.ДоступныВсеОрганизации = Ложь;
	КонецЕсли;
	

	Возврат ПараметрыСеанса.ИсключительныйРежим;

КонецФункции

&НаКлиенте
Процедура ЗагрузитьОбновитьПараметрыРаботыПрограммы(Команда)

	Отказ = Ложь;
	УстановитьКонстантуЗапускаОбновления(Истина);

	ПараметрыКлиента = Новый Структура(СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске());
	ПараметрыКлиента.НеобходимоОбновлениеПараметровРаботыПрограммы = Истина;
	СтандартныеПодсистемыКлиент.ЗагрузитьОбновитьПараметрыРаботыПрограммы(Отказ, ПараметрыКлиента);

	ЗагрузитьОбновитьПараметрыРаботыПрограммыНаСервере();

	УстановитьКонстантуЗапускаОбновления(Ложь);

	Если Отказ = Истина Тогда

		ПоказатьОповещениеПользователя("Параметры не обновлены!"
			,, "В процессе загрузки и обновления параметров программы возникли ошибки.", БиблиотекаКартинок.Предупреждение32);

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗагрузитьОбновитьПараметрыРаботыПрограммыНаСервере()

	Справочники.ПрофилиГруппДоступа.ОбновитьПоставляемыеПрофили(Истина);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьКонстантуЗапускаОбновления(Значение)

	Константы.ЗапуститьОбновлениеИнформационнойБазы.Установить(Значение);
//	УправлениеДоступомСлужебный.ОчиститьПараметрыОграниченияДоступа();
//	Константы.ПараметрыОграниченияДоступа.Установить(Новый ХранилищеЗначения(Неопределено));

КонецПроцедуры

&НаСервере	//	LNK 24.11.2016 09:01:15
Процедура ОбновитьПовторноИспользуемыеЗначенияНаСервере()

//	Сбрасываем кешированные значения на серверной стороне.
	ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Новый Структура);
	ОбновитьПовторноИспользуемыеЗначения();

//	LNK 27.09.2023 09:18:29
	глЗначениеПеременнойУстановить("ЗначенияДополнительныхПравПользователя", Новый Соответствие, Истина);

КонецПроцедуры

//	LNK 24.11.2016 09:01:10
&НаКлиенте
Процедура ОбновитьПовторноИспользуемыеЗначенияКлиент(Команда)

//	Сбрасываем кешированные значения на клиентской стороне ...
	ОбновитьПовторноИспользуемыеЗначения();
//	... а теперь идём на сервер
	ОбновитьПовторноИспользуемыеЗначенияНаСервере();

	ПоказатьОповещениеПользователя("Кешированные значения сброшены."
		,, "Выполнено обновление значений, используемых повторно в текущем сеансе", БиблиотекаКартинок.Информация32);

КонецПроцедуры

//	LNK 17.07.2017 09:31:04
&НаКлиенте
Процедура ЗагрузитьКонфигурациюДляОтправкиВУзлы(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьКонфигурациюДляОтправкиВУзлыЗавершение", ЭтотОбъект);
	ДиалогВыбораФайла  = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = "Выберите файл обновления конфигурации";
	ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Файл обновления'") + " (*.cfu)|*.cfu|";
	ДиалогВыбораФайла.ПолноеИмяФайла = ФайловыеФункцииСлужебныйКлиент.НормализоватьКаталог(ОбменДаннымиВызовСервера.ПолучитьКаталогФайловОбновления())
									+ ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("МиграцияВерсия") + "\1Cv8.cfu";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;

	ДиалогВыбораФайла.Показать(ОписаниеОповещения);

КонецПроцедуры

//	LNK 17.07.2017 09:42:00
&НаКлиенте
Процедура ЗагрузитьКонфигурациюДляОтправкиВУзлыЗавершение(СписокФайлов, ДополнительныеПараметры)	Экспорт

	Если ТипЗнч(СписокФайлов) = Тип("Массив") И НЕ СписокФайлов.Количество() = 0 Тогда

		ПолноеИмяФайлаОбновления = СписокФайлов[0];
		ИмяФайла    = ОбщегоНазначенияКлиентСервер.lx_GetTooken(ПолноеИмяФайлаОбновления, "\");
		ВерсияФайла = ОбщегоНазначенияКлиентСервер.lx_GetTooken(Лев(ПолноеИмяФайлаОбновления, СтрДлина(ПолноеИмяФайлаОбновления) - СтрДлина(ИмяФайла) - 1), "\");

		ЗагрузитьВКонстантуФайлОбновленияКонфигурации(
			ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяФайлаОбновления), УникальныйИдентификатор)
			, ИмяФайла, ВерсияФайла, НаборКонстант.МиграцияВерсия);

	Иначе

		Сообщить("Выбор не был сделан. Операция не выполнена");
	
	КонецЕсли;

КонецПроцедуры

//	LNK 17.07.2017 11:20:36
&НаСервереБезКонтекста
Процедура ЗагрузитьВКонстантуФайлОбновленияКонфигурации(АдресВХранилище, ИмяФайла, ВерсияФайла, МиграцияВерсия)

	ОбменДаннымиКонфигурация.УстановитьКонстантыМиграцииКонфигурации(АдресВХранилище, ИмяФайла, ВерсияФайла);

	МиграцияВерсия = Константы.МиграцияВерсия.Получить();
	Сообщить("Константа «МиграцияДанные» установлена!");

КонецПроцедуры

//	LNK 06.04.2018 09:25:31
&НаКлиенте
Процедура ПараметрыПримененияКонфигурации(Команда)

	СоставПараметров = Новый Структура(
		"ЗакрыватьПриЗакрытииВладельца", Истина);
	ОткрытьФорму("РегистрСведений.ПрименениеКонфигурации.ФормаСписка", СоставПараметров, ЭтотОбъект, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.Независимый);

КонецПроцедуры

&НаКлиенте
Процедура СписокСостоянийОбменовДанными(Команда)

	СоставПараметров = Новый Структура(
		"ЗакрыватьПриЗакрытииВладельца", Истина);
	ОткрытьФорму("РегистрСведений.СостоянияОбменовДанными.ФормаСписка", СоставПараметров, ЭтотОбъект, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.Независимый);

КонецПроцедуры

&НаКлиенте	//	LNK 08.06.2018 10:23:52
Процедура ДанныеМобильныхУстройств(Команда)

	СоставПараметров = Новый Структура(
		"ЗакрыватьПриЗакрытииВладельца", Истина);
	ОткрытьФорму("РегистрСведений.ДанныеМобильныхУстройств.Форма.УправлениеКонфигурациями", СоставПараметров, ЭтотОбъект, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.Независимый);

КонецПроцедуры

&НаСервере	//	LNK 19.04.2018 08:25:15
Процедура ПроверитьCOMConnectorНаСервере(РезультатПроверки)

	РезультатПроверки = Новый Структура(
		"Ошибка, Заголовок, Сообщение"
		, Ложь, "", "");

	Попытка

		COMСоединитель = Новый COMОбъект(ОбщегоНазначения.ИмяCOMСоединителя());

		Если ТипЗнч(COMСоединитель) = Тип("COMОбъект") Тогда

			РезультатПроверки.Ошибка    = Ложь;
			РезультатПроверки.Заголовок = "Соединение установлено";
			РезультатПроверки.Сообщение = "Созданный объект имеет тип «COMОбъект». Вероятно, настройки ОС выполнены корректно";

		Иначе

			ВызватьИсключение "Созданный объект не имеет тип «COMОбъект» - проблема в настройках ОС";

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();
		РезультатПроверки.Ошибка    = Истина;
		РезультатПроверки.Заголовок = "НЕТ соединения";
		РезультатПроверки.Сообщение = "Возникла ошибка ОС:" + Символы.ПС + ТекстОшибки;

	КонецПопытки;

КонецПроцедуры

&НаКлиенте	//	LNK 19.04.2018 08:25:10
Процедура ПроверитьCOMConnector(Команда)

	Перем РезультатПроверки;

	ПроверитьCOMConnectorНаСервере(РезультатПроверки);

	ПоказатьОповещениеПользователя(
		РезультатПроверки.Заголовок,,
		РезультатПроверки.Сообщение,
		?(РезультатПроверки.Ошибка, БиблиотекаКартинок.Ошибка32, БиблиотекаКартинок.Информация1_32));

КонецПроцедуры

&НаКлиенте	//	LNK 23.04.2019 11:20:14
Процедура ОбновитьОформлениеЭлементов()

	УстановитьОформлениеЭлементов();

КонецПроцедуры

&НаКлиенте	//	LNK 11.12.2019 13:16:58
Процедура ГенераторВременногоПароля(Команда)

	ОткрытьФорму("Обработка.ПанельАдминистрированияБСП.Форма.ГенераторВременногоПароля",, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервереБезКонтекста	//	LNK 18.08.2020 06:14:16
Функция ПроверитьСоединениеСЦБНаСервере()

	НачалоПередачи = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Подключение    = СервисыСервер.Подключение("RetailPack");
	ДанныеПроверки = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(Подключение.PingExtended(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().НомерМагазина));

	ДанныеПроверки.Вставить("НачалоПередачи", НачалоПередачи);
	ДанныеПроверки.Вставить("КонецПередачи" , ТекущаяУниверсальнаяДатаВМиллисекундах());

	Возврат ДанныеПроверки;

КонецФункции

&НаКлиенте	//	LNK 18.08.2020 06:07:25
Процедура ПроверитьСоединениеСЦБ(Команда)

	ДанныеПроверки = ПроверитьСоединениеСЦБНаСервере();

	ТекстРезультата =
		"Начало соединения: " + Формат(ДанныеПроверки.НачалоПередачи / 1000, "ЧДЦ=3; ЧН=0,000; ЧГ=") + Символы.ПС +
		"Конец соединения:  " + Формат(ДанныеПроверки.КонецПередачи / 1000, "ЧДЦ=3; ЧН=0,000; ЧГ=") + Символы.ПС +
		"Полное время соединения (сек): " + Формат((ДанныеПроверки.КонецПередачи - ДанныеПроверки.НачалоПередачи) / 1000, "ЧДЦ=3; ЧН=0,000; ЧГ=") + Символы.ПС +
		"Получено в ЦБ: " + Формат(ДанныеПроверки.Начало / 1000, "ЧДЦ=3; ЧН=0,000; ЧГ=") + Символы.ПС +
		"Запрос в ЦБ выполнен: " + Формат(ДанныеПроверки.КонецЗапроса / 1000, "ЧДЦ=3; ЧН=0,000; ЧГ=") + Символы.ПС +
		"Размер запроса в ЦБ: " + ДанныеПроверки.РазмерЗапроса + Символы.ПС
	;

	ПараметрыФормы = Новый Структура(
		"Заголовок, ТекстСообщения"
		, "Результат проверки соединения"
		, ТекстРезультата
	);

	ОткрытьФорму("ОбщаяФорма.ФормаПростогоТекстовогоСообщения"
		, ПараметрыФормы
		, ЭтотОбъект
		, ЭтотОбъект
		,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);

КонецПроцедуры

&НаСервереБезКонтекста
Функция  ИспользоватьВсеОрганизацииНаСервере()
	ПараметрыСеанса.ДоступныВсеОрганизации = НЕ ПараметрыСеанса.ДоступныВсеОрганизации;

	Возврат ПараметрыСеанса.ДоступныВсеОрганизации;
КонецФункции

&НаКлиенте
Процедура ИспользоватьВсеОрганизации(Команда)
	ИспользуетсяВсеОрганизации = ИспользоватьВсеОрганизацииНаСервере();

	ПоказатьОповещениеПользователя("Используются все организации = " + ИспользуетсяВсеОрганизации,,, БиблиотекаКартинок.Информация32);
	УстановитьОформлениеЭлементов();
КонецПроцедуры

&НаСервереБезКонтекста	//	LNK 30.04.2022 07:23:21
Процедура ОбновитьНумерациюОбъектовСервер()

	ОбновитьНумерациюОбъектов();

КонецПроцедуры

&НаКлиенте	//	LNK 30.04.2022 07:20:33
Процедура КомандаОбновитьНумерациюОбъектов(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаОбновитьНумерациюОбъектовЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения
		, "Будет выполнен сброс нумераторов (коды, номера) всех объектов!
		  |Такая операция может повлечь за собой проблемы в назначении новых номеров документов и кодов справочников.
		  |Выполнить такую операцию?"
		, РежимДиалогаВопрос.ОКОтмена
		, 60
		, КодВозвратаДиалога.ОК
		, "Обновление нумераторов"
		, КодВозвратаДиалога.Отмена
	);

КонецПроцедуры

&НаКлиенте	//	LNK 30.04.2022 11:18:38
Процедура КомандаОбновитьНумерациюОбъектовЗавершение(КодВозврата, ДополнительныеПараметры)	Экспорт

	Если КодВозврата = КодВозвратаДиалога.ОК Тогда

		ОбновитьНумерациюОбъектовСервер();
		ПоказатьОповещениеПользователя("Нумерация объектов",, "Нумераторы всех объектов обновлены!", БиблиотекаКартинок.Информация32);

	КонецЕсли;

КонецПроцедуры





