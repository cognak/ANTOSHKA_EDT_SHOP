&НаКлиенте
Перем ОбновитьИнтерфейс;
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Значения реквизитов формы
	РежимРаботы = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	// Настройки видимости при запуске
	
	
	
	// Обновление состояния элементов
	УстановитьДоступность();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбработчикОповещений(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ИспользоватьОбменДаннымиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксУзлаРаспределеннойИнформационнойБазыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

//	LNK 24.08.2016 09:56:50
&НаКлиенте
Процедура СертификатИнформационнойБазыПриИзменении(Элемент)

	Подключаемый_ПриИзмененииРеквизита(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура КонтекстОбменовПоМагазинуПриИзменении(Элемент)

	Подключаемый_ПриИзмененииРеквизита(Элемент);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОбработчикОповещений(ИмяСобытия, Параметр, Источник)
	
	// Обработка оповещений от других открытых форм.
	//
	// Пример:
	//   Если ИмяСобытия = "НаборКонстант.ПрефиксУзлаРаспределеннойИнформационнойБазы" Тогда
	//     НаборКонстант.ПрефиксУзлаРаспределеннойИнформационнойБазы = Параметр;
	//   КонецЕсли;
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		УстановитьДоступность();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСинхронизацииДанных(Команда)
	ОткрытьФорму("ОбщаяФорма.ОбменыДанными", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РегистрСведенийДатыЗапретаЗагрузкиДанных(Команда)
	ОткрытьФорму(
		"РегистрСведений.ДатыЗапретаИзменения.Форма.ДатыЗапретаИзменения",
		Новый Структура("ДатыЗапретаЗагрузкиДанных", Истина),
		ЭтотОбъект
	);
КонецПроцедуры

&НаКлиенте
Процедура РезультатыСинхронизацииДанных(Команда)
	ОткрытьФорму("РегистрСведений.РезультатыОбменаДанными.Форма.Форма");
КонецПроцедуры

//	LNK 24.08.2016 08:19:21
&НаКлиенте
Процедура УстановитьТекущийСертификат(Команда)

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьТекущийСертификатЗавершение", ЭтотОбъект)
		, "Сертификат будет установлен в соответствии с
		  |настоящей строкой подключения ИБ (на сервере).
		  |Изменение сертификата влияет на возможность
		  |выгрузки сообщений в контексте обмена данными!
		  |Подумайте и подтвердите своё решение:"
		, РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.ОК
		, "Изменение сертификата информационной базы!", КодВозвратаДиалога.Отмена);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийСертификатЗавершение(Ответ, ДополнительныеПараметры)	Экспорт

	Если Ответ = КодВозвратаДиалога.ОК Тогда

		УстановитьТекущийСертификатНаСервере();
		Подключаемый_ПриИзмененииРеквизита(Элементы.СертификатИнформационнойБазы);

	КонецЕсли;

КонецПроцедуры // УстановитьТекущийСертификатЗавершение()

//	LNK 24.08.2016 09:44:37
&НаКлиенте
Процедура ПроверитьСертификат(Команда)

	СоставОповещения = ПроверитьСертификатНаСервере();

	ПоказатьОповещениеПользователя(СоставОповещения.Текст,, СоставОповещения.Пояснение, СоставОповещения.Картинка);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		#Если НЕ ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		ОбновитьИнтерфейс = Истина;
		#КонецЕсли
	КонецЕсли;
	
	Если Результат.Свойство("ОповещениеФорм") Тогда
		Оповестить(Результат.ОповещениеФорм.ИмяСобытия, Результат.ОповещениеФорм.Параметр, Результат.ОповещениеФорм.Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	#Если НЕ ВебКлиент Тогда
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	Результат = Новый Структура;
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат;
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		ОповещениеФорм = Новый Структура("ИмяСобытия, Параметр, Источник", "Запись_НаборКонстант", Новый Структура, КонстантаИмя);
		Результат.Вставить("ОповещениеФорм", ОповещениеФорм);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьСинхронизациюДанных" ИЛИ РеквизитПутьКДанным = "" Тогда

		ИспользоватьСинхронизациюДанных = НаборКонстант.ИспользоватьСинхронизациюДанных;
		
		Элементы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Доступность   = ИспользоватьСинхронизациюДанных;
		Элементы.НастройкиСинхронизацииДанных.Доступность                  = ИспользоватьСинхронизациюДанных;
		Элементы.ДатыЗапретаЗагрузкиДанных.Доступность                     = ИспользоватьСинхронизациюДанных;
		Элементы.СценарииСинхронизацииДанных.Доступность                   = ИспользоватьСинхронизациюДанных;
		Элементы.СоответствиеПодразделенийОрганизацийМагазинам.Доступность = ИспользоватьСинхронизациюДанных И НаборКонстант.ВыплачиватьЗарплатуВМагазинах;
	//	LNK 24.08.2016 08:41:55
		Элементы.ГруппаСертификат.Доступность                              = ИспользоватьСинхронизациюДанных;
		
		ИспользоватьЗаявкиНаРасходованиеДС = Константы.ИспользоватьЗаявкиНаРасходованиеДС.Получить();
		SKUУстанавливаетсяВГлавномУзлеРИБ  = Константы.SKUУстанавливаетсяВГлавномУзлеРИБ.Получить();
		СпособУчетаСебестоимости 		   = Константы.СпособУчетаСебестоимости.Получить();
		
	//	LNK 03.09.2017 10:31:50 - закроем ото всех! Про этот ключ никто не знает и устанавливается он только программно!
		Элементы.КонтекстОбменовПоМагазину.Доступность = ПараметрыСеанса.ВыполняютсяСлужебныеДействия;
		
		Если ИспользоватьСинхронизациюДанных И (
			ИспользоватьЗаявкиНаРасходованиеДС
			ИЛИ SKUУстанавливаетсяВГлавномУзлеРИБ
			ИЛИ СпособУчетаСебестоимости = Перечисления.СпособыУчетаСебестоимости.ПриниматьИзУправляющейСистемы) Тогда
			
			Элементы.ИспользоватьОбменДанными.ТолькоПросмотр = Истина;
			
			КомментарийИспользоватьОбменДанными = НСтр("ru = 'Невозможно отключить ""Синхронизация данных"", потому что:'");
			
			Если ИспользоватьЗаявкиНаРасходованиеДС Тогда
				КомментарийИспользоватьОбменДанными = КомментарийИспользоватьОбменДанными +  НСтр("ru = '
				| - включено использование заявок на расходование ДС в разделе ""Финансы""'");
			КонецЕсли;
			
			Если SKUУстанавливаетсяВГлавномУзлеРИБ Тогда
				КомментарийИспользоватьОбменДанными = КомментарийИспользоватьОбменДанными +  НСтр("ru = '
				| - включено ""Коды товаров SKU назначаются в главном узле РИБ"" в разделе ""Настройки подключаемого оборудования""'");
			КонецЕсли;
			
			
			Если СпособУчетаСебестоимости = Перечисления.СпособыУчетаСебестоимости.ПриниматьИзУправляющейСистемы Тогда
				КомментарийИспользоватьОбменДанными = КомментарийИспользоватьОбменДанными +  НСтр("ru = '
				| - включено ""Способ учета себестоимости: Принимать из управляющей системы"" в разделе ""Запасы и закупки""'");
			КонецЕсли;

			КомментарийИспользоватьОбменДанными = КомментарийИспользоватьОбменДанными + ".";
			
			Элементы.КомментарийИспользоватьОбменДанными.Заголовок = КомментарийИспользоватьОбменДанными;
			Элементы.ГруппаКомментарийИспользоватьОбменДанными.Видимость = Истина;
			
		Иначе
			Элементы.ГруппаКомментарийИспользоватьОбменДанными.Видимость = Ложь;
			Элементы.ИспользоватьОбменДанными.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "" Тогда
		
		Элементы.ГруппаКомментарийСоответствиеПодразделенийОрганизацийМагазинам.Видимость = НЕ НаборКонстант.ВыплачиватьЗарплатуВМагазинах;
		
		Если НаборКонстант.ИспользоватьСинхронизациюДанных Тогда
			Если ПараметрыСеанса.ИспользуемыеПланыОбмена.Найти("ПоМагазину") <> Неопределено
				И ОбменДаннымиПовтИсп.ГлавныйУзел() <> Неопределено Тогда
				
				Элементы.ИспользоватьОбменДанными.ТолькоПросмотр = Истина;
				
			ИначеЕсли ПараметрыСеанса.ИспользуемыеПланыОбмена.Найти("ПоРабочемуМесту") <> Неопределено
				И ОбменДаннымиПовтИсп.ГлавныйУзел() <> Неопределено Тогда
	
				Элементы.ИспользоватьОбменДанными.ТолькоПросмотр = Истина;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СценарииСинхронизацииДанных(Команда)
	ОткрытьФорму("Справочник.СценарииОбменовДанными.Форма.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСоответствиеПодразделенийОрганизацийМагазинам(Команда)
	ОткрытьФорму("РегистрСведений.СоответствиеПодразделенийОрганизацийМагазинам.Форма.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

//	LNK 24.08.2016 08:19:27
&НаСервере
Процедура УстановитьТекущийСертификатНаСервере()

	ЗначениеСертификата = Константы.СертификатИнформационнойБазы.СоздатьМенеджерЗначения().ПолучитьСертификатИнформационнойБазы();

	Если НЕ ПустаяСтрока(ЗначениеСертификата) Тогда

		НаборКонстант.СертификатИнформационнойБазы = ЗначениеСертификата;
		ОбновитьПовторноИспользуемыеЗначения();

	Иначе

		Сообщить("Не удалось получить актуальный сертификат ИБ! Попробуйте позже.");

	КонецЕсли;

КонецПроцедуры

//	LNK 24.08.2016 09:44:44
&НаСервереБезКонтекста
Функция ПроверитьСертификатНаСервере()

	СертификатСоответствует = Константы.СертификатИнформационнойБазы.СоздатьМенеджерЗначения().ПроверитьСертификатИнформационнойБазы();

	Если СертификатСоответствует = 1 Тогда

		СоставОповещения = Новый Структура(
			"Текст, Пояснение, Картинка"
			, "Сертификат действителен."
			, "Сертификат сообщения соответствует реальному. Обмен данными будет выполняться в соответствии с установленными настройками."
			, БиблиотекаКартинок.СинхронизацияДанныхПодсистема);

	ИначеЕсли СертификатСоответствует = 0 Тогда

		СоставОповещения = Новый Структура(
			"Текст, Пояснение, Картинка"
			, "Сертификат не подтверждён."
			, "Сертификат сообщения НЕ соответствует реальному. Обмен данными выполняться не будет. Вероятно, текущая база данных является копией рабочей, для которой и был установлен этот сертификат."
			, БиблиотекаКартинок.СинхронизацияДанныхОтключение);

	Иначе

		СоставОповещения = Новый Структура(
			"Текст, Пояснение, Картинка"
			, "Сертификат не подтверждён."
			, "Не удалось получить данные текущего сертификата... нужно попробовать позже. Возможно, получению мешают блокировки данных."
			, БиблиотекаКартинок.СинхронизацияДанныхКоллизия);

	КонецЕсли;

	Возврат СоставОповещения;

КонецФункции



