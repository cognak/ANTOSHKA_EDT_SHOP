
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("КассаККМ", Объект.КассаККМ) Тогда
		Отказ = Истина;
	Иначе
		
		ОбновитьДанныеСервер();
		
		Если ОсновнаяТаблица.Количество() = 0 Тогда
			
			Элементы.ГруппаИнформацияКратко.Видимость   = Истина;
			Элементы.ГруппаИнформацияПодробно.Видимость = Ложь;
			Элементы.ГруппаТаблицы.Видимость            = Ложь;
			
			Элементы.ДекорацияДанныеСистемыПроданоКратко.Заголовок = Формат(СуммаПродаж, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " грн.";
			Элементы.ДекорацияДанныеСистемыВозвратКратко.Заголовок = Формат(СуммаВозвратов,"ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " грн.";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекПовтИсп.ИспользоватьПодключаемоеОборудование();
	
	Если ИспользоватьПодключаемоеОборудование  Тогда
		ПодключаемоеОборудование = Объект.КассаККМ.ПодключаемоеОборудование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПодключаемоеОборудование)  Тогда
		Элементы.ФормаОтчетБезГашения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьИнформационныеНадписи();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДанныеФРПродажаПриИзменении(Элемент)
	
	ОбновитьИнформационныеНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФРВозвратПриИзменении(Элемент)
	
	ОбновитьИнформационныеНадписи();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "ОсновнаяТаблица"

&НаКлиенте
Процедура ОсновнаяТаблицаПометкаПриИзменении(Элемент)
	
	ОбновитьИнформационныеНадписи();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Аннулировать(Команда)
	
	Для каждого ЭлементОсновнойТаблицы Из ОсновнаяТаблица Цикл
		Если ЭлементОсновнойТаблицы.Пометка Тогда
			ЧекККМ = ЭлементОсновнойТаблицы.ЧекККМ;
			
			АннулироватьЧекККМ(ЧекККМ);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДанныеСервер();
	ОбновитьИнформационныеНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеИнвертироватьФлажки(Команда)
	
	Для каждого ЭлементОсновнойТаблицы Из ОсновнаяТаблица Цикл
		ЭлементОсновнойТаблицы.Пометка = НЕ ЭлементОсновнойТаблицы.Пометка;
	КонецЦикла;
	
	ОбновитьИнформационныеНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСнятьФлажки(Команда)
	
	СменитьФлажки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеУстановитьФлажки(Команда)
	
	СменитьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеСмены(Команда)
	
	Закрыть("Закрытие смены");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	ОбновитьДанныеСервер();
	ОбновитьИнформационныеНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетБезГашения(Команда)
	
	ОписаниеОшибки = "";

	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
		                                                                              ПодключаемоеОборудование, ОписаниеОшибки);

		Если Результат Тогда
			ВходныеПараметры  = Неопределено;
			ВыходныеПараметры = Неопределено;

			Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ПодключаемоеОборудование,
			                                                        "PrintXReport",
			                                                        ВходныеПараметры,
			                                                        ВыходныеПараметры);

			Если Не Результат Тогда
				ТекстСообщения = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.
				|%ОписаниеОшибки%
				|Отчет на фискальном регистраторе не сформирован.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;

			МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
			                                                                 ПодключаемоеОборудование);
		Иначе
			ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.'") + Символы.ПС + ОписаниеОшибки;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Пробить(Команда)
	Для каждого ЭлементОсновнойТаблицы Из ОсновнаяТаблица Цикл
		Если ЭлементОсновнойТаблицы.Пометка Тогда
			ЧекККМ = ЭлементОсновнойТаблицы.ЧекККМ;
			
			Если НЕ ПробитьЧекВыполнить(ЧекККМ) Тогда
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДанныеСервер();
	ОбновитьИнформационныеНадписи();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура АннулироватьЧекККМ(ЧекККМ)

	ЧекККМОбъект = ЧекККМ.ПолучитьОбъект();
	ЧекККМОбъект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Аннулированный;
	Если ЧекККМОбъект.Проведен Тогда
		ЧекККМОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе
		ЧекККМОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСервер()
	
	ТаблицаНеПробитыхЧеков();
	ПолучитьСуммуПродаж();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформационныеНадписи()
	
	Элементы.ДекорацияДанныеФРПродано.Заголовок = Формат(ДанныеФРПродажа, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " грн.";
	Элементы.ДекорацияДанныеФРВозврат.Заголовок = Формат(ДанныеФРВозврат, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " грн.";
	
	Элементы.ДекорацияДанныеСистемыПродано.Заголовок = Формат(СуммаПродаж, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " грн.";
	Элементы.ДекорацияДанныеСистемыВозврат.Заголовок = Формат(СуммаВозвратов,"ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " грн.";
	
	РасхоженияПродано = СуммаПродаж - ДанныеФРПродажа;
	РасхоженияВозврат = СуммаВозвратов - ДанныеФРВозврат;
	
	Элементы.ДекорацияРасхожденияПродано.Заголовок = Формат(РасхоженияПродано, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " грн.";
	Элементы.ДекорацияРасхожденияВозврат.Заголовок = Формат(РасхоженияВозврат, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " грн.";
	
	ПодобраноПродано = 0;
	ПодобраноВозврат = 0;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Пометка", Истина);
	
	МассивСтрок = ОсновнаяТаблица.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		ПодобраноПродано = ПодобраноПродано + СтрокаТаблицы.Сумма;
		ПодобраноВозврат = ПодобраноВозврат + СтрокаТаблицы.Возврат;
	КонецЦикла;
	
	Элементы.ДекорацияПодобраноПродано.Заголовок = Формат(ПодобраноПродано, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " грн.";
	Элементы.ДекорацияПодобраноВозврат.Заголовок = Формат(ПодобраноВозврат, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " грн.";
	
	ОстатокПродано = РасхоженияПродано - ПодобраноПродано;
	ОстатокВозврат = РасхоженияВозврат - ПодобраноВозврат;
	
	Элементы.ДекорацияОстатокПродано.Заголовок = Формат(ОстатокПродано, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " грн.";
	Элементы.ДекорацияОстатокВозврат.Заголовок = Формат(ОстатокВозврат, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " грн.";
	
	Если ОстатокПродано = 0 И ОстатокВозврат = 0 Тогда
		ЦветОстатка = WebЦвета.ТемноЗеленый;
	Иначе 
		ЦветОстатка = WebЦвета.Черный;
	КонецЕсли;
	
	Элементы.ДекорацияОстаток.ЦветТекста        = ЦветОстатка;
	Элементы.ДекорацияОстатокПродано.ЦветТекста = ЦветОстатка;
	Элементы.ДекорацияОстатокВозврат.ЦветТекста = ЦветОстатка;
	
	Элементы.ФормаЗакрытьСмену.Доступность = ОсновнаяТаблица.Количество() = 0;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьВходныеПараметрыДляПробитияЧека(ЧекККМ, ВходныеПараметры)

	НомерСекции = 1;
	
	// Подготовка таблицы товаров
	ТаблицаТоваров = Новый Массив();
	
	Для Каждого СтрокаТЧ Из ЧекККМ.Товары Цикл
		
		СтавкаНДС = ОбработкаТабличнойЧастиТоварыПовтИсп.ПолучитьСтавкуНДСЧислом(СтрокаТЧ.СтавкаНДС);
		
		Сумма = СтрокаТЧ.Сумма;
		
		
		СуммаСкидки   = СтрокаТЧ.СуммаАвтоматическойСкидки   + СтрокаТЧ.СуммаРучнойСкидки;
		
		Если (Сумма + СуммаСкидки) = 0 Тогда
			ПроцентСкидки = 0;
		Иначе
			ПроцентСкидки = Окр(100 * СуммаСкидки / (Сумма + СуммаСкидки),2,1);
		КонецЕсли;
		
		СтавкаНДССтрокой = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДССтрокой(СтрокаТЧ.СтавкаНДС);
        ЭтоПодакцизныйТовар = НЕ ЧекККМ.ПодакцизныеТоварыДляКоммерческогоИспользования
						          И СтрокаТЧ.Номенклатура.ПодакцизныйТовар;

		
		СтрокаТаблицыТоваров = Новый СписокЗначений();
		
		НаименованиеТовара = Строка(СтрокаТЧ.Номенклатура) + 
							 ?(ЗначениеЗаполнено(СтрокаТЧ.Характеристика), " (" + Строка(СтрокаТЧ.Характеристика) + ")", "");
		
		СтрокаТаблицыТоваров.Добавить(НаименованиеТовара);          //  1 - Наименование
		СтрокаТаблицыТоваров.Добавить("");                          //  2 - Штрихкод
		СтрокаТаблицыТоваров.Добавить("");                          //  3 - Артикул
		СтрокаТаблицыТоваров.Добавить(НомерСекции);                 //  4 - Номер отдела
		СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.Цена);               //  5 - Цена за позицию без скидки
		СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.КоличествоУпаковок); //  6 - Количество
		СтрокаТаблицыТоваров.Добавить("");                          //  7 - Наименование скидки/наценки
		СтрокаТаблицыТоваров.Добавить(СуммаСкидки);                 //  8 - Сумма скидки/наценки
		СтрокаТаблицыТоваров.Добавить(ПроцентСкидки);               //  9 - Процент скидки/наценки
		СтрокаТаблицыТоваров.Добавить(Сумма + ?(ЧекККМ.ЦенаВключаетНДС, 0, СтрокаТЧ.СуммаНДС)); // 10 - Сумма позиции со скидкой
		СтрокаТаблицыТоваров.Добавить(0);                           // 11 - Номер налога (1)
		СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.СуммаНДС);           // 12 - Сумма налога (1)
		СтрокаТаблицыТоваров.Добавить(СтавкаНДС * 100);             // 13 - Процент налога (1)
		СтрокаТаблицыТоваров.Добавить(0);                           // 14 - Номер налога (2)
		СтрокаТаблицыТоваров.Добавить(0);                           // 15 - Сумма налога (2)
		СтрокаТаблицыТоваров.Добавить(0);                           // 16 - Процент налога (2)
		СтрокаТаблицыТоваров.Добавить("");                          // 17 - Наименование секции форматирования товарной строки
		СтрокаТаблицыТоваров.Добавить(СтавкаНДССтрокой);            // 18 - Ставка НДС строкой
		СтрокаТаблицыТоваров.Добавить(ЭтоПодакцизныйТовар);         // 19 - Подакцизный товар
		
		ТаблицаТоваров.Добавить(СтрокаТаблицыТоваров);
	КонецЦикла;
	
	// Подготовка таблицы оплат
	ТаблицаОплат = Новый Массив();
	
	// Наличные
	СтрокаОплаты = Новый СписокЗначений();
	СтрокаОплаты.Добавить(0);
	СтрокаОплаты.Добавить(СуммаНаличнойОплаты(ЧекККМ));
	СтрокаОплаты.Добавить("Наличная оплата");
	СтрокаОплаты.Добавить("");
	ТаблицаОплат.Добавить(СтрокаОплаты);
	
	// Безналичные
	СтрокаОплаты = Новый СписокЗначений();
	СтрокаОплаты.Добавить(1);
	СтрокаОплаты.Добавить(СуммаБезналичнойОплаты(ЧекККМ) + СуммаОплатыПодарочнымиСертификатами(ЧекККМ));
	СтрокаОплаты.Добавить("Безналичная оплата");
	СтрокаОплаты.Добавить("");
	ТаблицаОплат.Добавить(СтрокаОплаты);
	
	
	
	// Подготовка таблицы общих параметров
	ТипЧека = ?(ЧекККМ.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат,1,0);
	ОбщиеПараметры = Новый Массив();
	ОбщиеПараметры.Добавить(ТипЧека);                //  1 - Тип чека
	ОбщиеПараметры.Добавить(Истина);                 //  2 - Признак фискального чека
	ОбщиеПараметры.Добавить(Неопределено);           //  3 - Печать на подкладном документе
	ОбщиеПараметры.Добавить(ЧекККМ.СуммаДокумента);  //  4 - Сумма по чеку без скидок/наценок
	ОбщиеПараметры.Добавить(ЧекККМ.СуммаДокумента);  //  5 - Сумма по чеку с учетом всех скидок/наценок
	ОбщиеПараметры.Добавить("");                     //  6 - Номер дисконтной карты
	ОбщиеПараметры.Добавить("");                     //  7 - Текст шапки
	ОбщиеПараметры.Добавить("");                     //  8 - Текст подвала
	ОбщиеПараметры.Добавить(0);                      //  9 - Номер смены (для копии чека)
	ОбщиеПараметры.Добавить(0);                      // 10 - Номер чека (для копии чека)
	ОбщиеПараметры.Добавить(0);                      // 11 - Номер документа (для копии чека)
	ОбщиеПараметры.Добавить(0);                      // 12 - Дата документа (для копии чека)
	ОбщиеПараметры.Добавить("");                     // 13 - Имя кассира (для копии чека)
	ОбщиеПараметры.Добавить("");                     // 14 - Пароль кассира
	ОбщиеПараметры.Добавить(0);                      // 15 - Номер шаблона
	ОбщиеПараметры.Добавить("");                     // 16 - Наименование секции форматирования шапки
	ОбщиеПараметры.Добавить("");                     // 17 - Наименование секции форматирования подвала
	
	МассивШаблона = Новый Массив();
	МассивШаблона.Добавить(ЧекККМ.КассаККМ);
	МассивШаблона.Добавить("ШаблонЧекаККМ");
	МассивШаблона.Добавить(ЧекККМ.Ссылка);
	
	ОбщиеПараметры.Добавить(МассивШаблона);           // 18- Массив параметров шаблона чека
	
	ВходныеПараметры.Добавить(ТаблицаТоваров);
	ВходныеПараметры.Добавить(ТаблицаОплат);
	ВходныеПараметры.Добавить(ОбщиеПараметры);
	
	

КонецПроцедуры

&НаСервере
Функция СуммаБезналичнойОплаты(ОбъектЧекККМ) 

	СуммаБезналичнойОплаты = 0;
	Для Каждого ТекОплата Из ОбъектЧекККМ.Оплата Цикл
		Если ЗначениеЗаполнено(ТекОплата.ВидОплаты) И ТекОплата.ВидОплаты.ТипОплаты <> Перечисления.ТипыОплатЧекаККМ.Наличные 
		И НЕ ТекОплата.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом Тогда
			СуммаБезналичнойОплаты = СуммаБезналичнойОплаты + ТекОплата.Сумма;
		КонецЕсли;
	КонецЦикла;

	Возврат СуммаБезналичнойОплаты;

КонецФункции

&НаСервере
Функция СуммаНаличнойОплаты(ОбъектЧекККМ) 

	СуммаНаличнойОплаты = 0;
	Для Каждого ТекОплата Из ОбъектЧекККМ.Оплата Цикл
		Если ЗначениеЗаполнено(ТекОплата.ВидОплаты) И ТекОплата.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
			СуммаНаличнойОплаты = СуммаНаличнойОплаты + ТекОплата.Сумма;
		КонецЕсли;
	КонецЦикла;

	Возврат СуммаНаличнойОплаты;

КонецФункции

&НаСервере
Функция СуммаОплатыПодарочнымиСертификатами(ОбъектЧекККМ) 

	СуммаОплаты = 0;
	Для Каждого ТекОплата Из ОбъектЧекККМ.Оплата Цикл
		Если ТекОплата.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом Тогда
			СуммаОплаты = СуммаОплаты + ТекОплата.Сумма;
		КонецЕсли;
	КонецЦикла;

	Возврат СуммаОплаты;

КонецФункции

// Получает сумму продаж по кассе и помещает ее в переменные
//
// Параметры
//  Нет
//
//
&НаСервере
Процедура ПолучитьСуммуПродаж()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА ЧекККМ.СуммаДокумента
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				ТОГДА ЧекККМ.СуммаДокумента
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Возврат
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Проведен
	|	И ЧекККМ.КассаККМ = &КассаККМ
	|	И ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробитый)"
	);
	//	LNK 26.09.2018 09:31:06
	//|	И (НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный))
	//|	И (НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный))
	//|	И (НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный))"
	Запрос.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СуммаПродаж    = Выборка.Сумма;
		СуммаВозвратов = Выборка.Возврат;
		
		Если НЕ ЗначениеЗаполнено(СуммаПродаж) Тогда
			СуммаПродаж = 0;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СуммаВозвратов) Тогда
			СуммаВозвратов = 0;
		КонецЕсли;
		
	Иначе
		СуммаПродаж    = 0;
		СуммаВозвратов = 0;
	КонецЕсли;
	
КонецПроцедуры

// Получает таблицу не пробитых чеков
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Таблица значений
//
&НаСервере
Функция ТаблицаНеПробитыхЧеков()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМ.Ссылка КАК ЧекККМ,
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА ЧекККМ.СуммаДокумента
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.Сумма, 0)) КАК ОплатаКартой,
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				ТОГДА ЧекККМ.СуммаДокумента
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Возврат,
	|	ИСТИНА КАК Пометка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЧекККМОплата.Ссылка КАК Ссылка,
	|			СУММА(ВЫБОР
	|					КОГДА ЧекККМОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|						ТОГДА ЧекККМОплата.Сумма
	|					ИНАЧЕ -ЧекККМОплата.Сумма
	|				КОНЕЦ) КАК Сумма
	|		ИЗ
	|			Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|		ГДЕ
	|			ЧекККМОплата.Ссылка.Проведен
	|			И ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ПустаяСсылка)
	|			И ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	|			И ЧекККМОплата.Ссылка.КассаККМ = &КассаККМ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЧекККМОплата.Ссылка) КАК ВложенныйЗапрос
	|		ПО ЧекККМ.Ссылка = ВложенныйЗапрос.Ссылка
	|ГДЕ
	|	ЧекККМ.Проведен
	|	И ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ПустаяСсылка)
	|	И ЧекККМ.КассаККМ = &КассаККМ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМ.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧекККМ.Дата";
	
	Запрос.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	ИтогСуммаПродаж    = ТаблицаЗапроса.Итог("Сумма");
	ИтогСуммаВозвратов = ТаблицаЗапроса.Итог("Возврат");
	ИтогОплатаКартой   = ТаблицаЗапроса.Итог("ОплатаКартой");
	
	ОсновнаяТаблица.Загрузить(ТаблицаЗапроса);
	
	
КонецФункции

// Процедура печати чека на фискальном регистраторе.
//
&НаКлиенте
Функция ПробитьЧекВыполнить(ЧекККМ)
	
	ЧекПробит = Ложь;
	
	ОписаниеОшибки = "";
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
	
		ПараметрыКассыККМ = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(Объект.КассаККМ);
		ИдентификаторУстройстваФР              = ПараметрыКассыККМ.ИдентификаторУстройства;
		
		Если ИдентификаторУстройстваФР <> Неопределено Тогда
			
			// Подключаем ФР
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
			                                                                              ИдентификаторУстройстваФР,
			                                                                              ОписаниеОшибки);
			
			Если Результат Тогда
				
				// Готовим данные
				ВходныеПараметры  = Новый Массив;
				ВыходныеПараметры = Неопределено;
				
				ПодготовитьВходныеПараметрыДляПробитияЧека(ЧекККМ, ВходныеПараметры);
				
				// Печатаем чек.
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР,
				                                                        "PrintReceipt",
				                                                        ВходныеПараметры,
				                                                        ВыходныеПараметры);
				
				Если Результат Тогда
					
					// Установить полученное значение номера чека реквизиту документа.
					РезультатПроведения = ПровестиПробитыйЧек(ЧекККМ, ВыходныеПараметры);
					Если РезультатПроведения = Истина Тогда
						ЧекПробит = Истина;
					КонецЕсли;
					
				Иначе
					ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
					                            |Чек не напечатан на фискальном регистраторе.
					                            |Дополнительное описание:
					                            |%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,
					                             "%ДополнительноеОписание%",
					                             ВыходныеПараметры[1]);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
				// Отключаем ФР
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройстваФР);
				
			Иначе
				ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
				                            |Чек не напечатан на фискальном регистраторе.
				                            |Дополнительное описание:
				                            |%ДополнительноеОписание%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		Иначе
			ТекстСообщения = НСтр("ru = 'Не выбран фискальный регистратор.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ЧекПробит;
	
КонецФункции

&НаСервере
Функция ПровестиПробитыйЧек(ЧекККМ, ВыходныеПараметры)
	
	Попытка
		ЧекККМОбъект = ЧекККМ.ПолучитьОбъект();
		
		ЧекККМОбъект.НомерСменыККМ = ВыходныеПараметры[0];
		ЧекККМОбъект.НомерЧекаККМ  = ВыходныеПараметры[1];

		ЧекККМОбъект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый;
		ЧекККМОбъект.Записать(РежимЗаписиДокумента.Запись);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	

КонецФункции

&НаКлиенте
Процедура СменитьФлажки(ФлагПометки)
	Для каждого ЭлементОсновнойТаблицы Из ОсновнаяТаблица Цикл
		ЭлементОсновнойТаблицы.Пометка = ФлагПометки;
	КонецЦикла;
	
	ОбновитьИнформационныеНадписи();
	
КонецПроцедуры
