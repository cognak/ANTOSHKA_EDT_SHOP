#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ПолноеИмя()	Экспорт

	Возврат Метаданные().ПолноеИмя();

КонецФункции

Функция ВнешняяОбработка()	Экспорт

	Если ТипЗнч(ЭтотОбъект) = Тип("ОбработкаОбъект." + Метаданные().Имя) Тогда

			ЭтоВнешняяОбработка = Ложь;

	Иначе	ЭтоВнешняяОбработка = Истина;

	КонецЕсли;

	Возврат ЭтоВнешняяОбработка;

КонецФункции

Функция РеквизитИмяСсылка(ИмяСсылка)	Экспорт

	ИмяРеквизита = ?(ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику().ИспользоватьУкраинскоеНаименование
		, "НаименованиеУкраинское"
		, "Наименование"
	);

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИмяСсылка, ИмяРеквизита, "", Ложь);

КонецФункции


//	LNK 22.08.2019 10:10:25
Функция УстановитьНовогоПокупателя(ДанныеКонтрагента, ДокументПродажи, ВыполнениеРегламента = Ложь)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если РозничныеПродажиСлужебный.РесурсMicrosoftDynamicsДоступен() Тогда

		СоставДанных = ОбменMicrosoftDynamicsСервер.ИнициализироватьСоставДанных();
		АдресСервера = УправлениеДоступомСлужебныйПовтИсп.ПолучитьАдресСервераMSDynamics(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);

		Если НЕ ПустаяСтрока(АдресСервера) Тогда

			ПредставлениеКлиента = СтроковыеФункцииКлиентСервер.ПривестиНаименование(ДанныеКонтрагента.Фамилия + " " + ДанныеКонтрагента.Имя + " " + ДанныеКонтрагента.Отчество);

			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

				JSON.ЗаписатьСвойство("IDBASE", ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторУчетнойСистемы"), ЗаписьJSON);
				JSON.ЗаписатьСвойство("message1C", -1, ЗаписьJSON);

				JSON.ЗаписатьСвойство("phoneNumber", ДанныеКонтрагента.НомерТелефона, ЗаписьJSON);
				JSON.ЗаписатьСвойство("cardNumber" , "", ЗаписьJSON);
				JSON.ЗаписатьСвойство("firstName"  , ДанныеКонтрагента.Имя, ЗаписьJSON);
				JSON.ЗаписатьСвойство("midleName"  , ДанныеКонтрагента.Отчество, ЗаписьJSON);
				JSON.ЗаписатьСвойство("lastName"   , ДанныеКонтрагента.Фамилия, ЗаписьJSON);
				JSON.ЗаписатьСвойство("gender"     , ОбменMicrosoftDynamicsПовтИсп.ПолДляCRM(ДанныеКонтрагента.Пол, "число"), ЗаписьJSON);
				JSON.ЗаписатьСвойство("email"      , ДанныеКонтрагента.Email, ЗаписьJSON);
				JSON.ЗаписатьСвойство("IDD_store"  , ОбменMicrosoftDynamicsПовтИсп.ИдентификаторМагазина(ДанныеКонтрагента.Магазин, Перечисления.УчетныеСистемыКомпании.MSDynCRM), ЗаписьJSON);
				JSON.ЗаписатьСвойство("manager"    , СокрЛП(ДанныеКонтрагента.ТекущийПользователь.УникальныйИдентификатор()), ЗаписьJSON);

				ЗаписьJSON.ЗаписатьИмяСвойства("children");
				ЗаписьJSON.ЗаписатьНачалоМассива();
				ЗаписьJSON.ЗаписатьКонецМассива();

			ЗаписьJSON.ЗаписатьКонецОбъекта();

			ТекстЗапроса = ЗаписьJSON.Закрыть();

			ЖурналСобытий.Регистрация("CRM.Контрагент.Новый", УровеньЖурналаРегистрации.Примечание
				, Метаданные.ПланыОбмена.ОбменMicrosoftDynamics
				,
				,
				, ТекстЗапроса
				,
				,
				Ложь
			);	//	LNK 18.05.2020 06:19:04

			Результат = ОбменMicrosoftDynamicsСервер.ВыполнитьЗапросКСерверу("/api/Orders/CustomerRegistration", ТекстЗапроса, АдресСервера, "POST",, 10);

			Если ТипЗнч(Результат.ДанныеОтвета) = Тип("Структура") Тогда

				Если НЕ ПустаяСтрока(Результат.ДанныеОтвета.error) Тогда

					СоставДанных.Ошибка = Истина;
					СоставДанных.ОписаниеОшибки = Результат.ДанныеОтвета.error;

				ИначеЕсли ТипЗнч(Результат.ДанныеОтвета.Data) = Тип("Структура") Тогда

				//	перезаполним "ДанныеКонтрагента" в соответствии с полученной информацией от внешней системы
					ДанныеКонтрагента = ОбменMicrosoftDynamicsСервер.ЗаполнитьСтруктуруПоВнешнимДанным(ДанныеКонтрагента, Результат.ДанныеОтвета.Data);

					Если Справочники.Контрагенты.КлючиПоискаУказаны(ДанныеКонтрагента) Тогда

						ДанныеКонтрагента.ОтключитьМеханизмРегистрацииMicrosoftDynamics = Истина;

						СоставДанных = РозничныеПродажиСлужебный.ВыполнитьКомплексДанныхКонтрагента(
							  ""
							, ДанныеКонтрагента.НомерТелефона
							, ДанныеКонтрагента
							, Перечисления.НазначениеКонтрагентовОтложенных.ПроверкаВРознице
							, ДокументПродажи
							, ВыполнениеРегламента
						);

						Если СоставДанных.Ошибка Тогда

							Если НЕ ПустаяСтрока(СоставДанных.ОписаниеОшибки) Тогда

									СоставДанных.ОписаниеОшибки = СоставДанных.ОписаниеОшибки;

							Иначе	СоставДанных.ОписаниеОшибки = "При поиске/записи контрагента возникла неизвестная ошибка.";

							КонецЕсли;

						Иначе
							
							ДанныеКонтрагента = СоставДанных;	//	переопределим.

						КонецЕсли;

					Иначе

						СоставДанных.Ошибка = Истина;
						СоставДанных.ОписаниеОшибки = "Отказано! Ключи поиска контрагента НЕ указаны (IDC, IDD, IDN или номер телефона).";

					КонецЕсли;

				Иначе

					СоставДанных.Ошибка = Истина;
					СоставДанных.ОписаниеОшибки = "Сервер CRM вернул неожиданные данные!" + Символы.ПС
												+ "(" + СокрЛП(Результат.ДанныеОтвета.Data) + ")";

				КонецЕсли;

			Иначе

				СоставДанных.Ошибка = Истина;
				СоставДанных.ОписаниеОшибки = "Сервер CRM вернул неожиданные данные!" + Символы.ПС
											+ "(" + СокрЛП(Результат.ДанныеОтвета) + ")";

			КонецЕсли;

			Если СоставДанных.Ошибка Тогда

				ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала() + ".УстановитьНовогоПокупателя"
				, УровеньЖурналаРегистрации.Ошибка
				,
				,
				,
				, "Данные ответа: " + СоставДанных.ОписаниеОшибки
				+ Символы.ПС + Символы.ПС + "(out)JSON:" + Символы.ПС + ТекстЗапроса
				, ПредставлениеКлиента + " (" + ДанныеКонтрагента.НомерТелефона + ")"
				, Истина);

			КонецЕсли;

		Иначе

			СоставДанных.Ошибка = Истина;
			СоставДанных.ОписаниеОшибки = "CRM: адрес сервера НЕ указан.";

		КонецЕсли;

	Иначе

		СоставДанных = ОбменMicrosoftDynamicsСервер.ИнициализироватьСоставДанных();

		Попытка

			Справочники.Контрагенты.ОтложитьДанныеКонтрагента("", ДанныеКонтрагента.НомерТелефона, ДанныеКонтрагента
				, Перечисления.НазначениеКонтрагентовОтложенных.ПроверкаВCRM
				, ДокументПродажи, ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);

			СоставДанных.Отложено = Истина;
			СоставДанных.ОписаниеОшибки =
				"Введенные данные отложены для обработки после
				|восстановления соединения.";

		Исключение

			СоставДанных.Ошибка = Истина;
			СоставДанных.ОписаниеОшибки = ОписаниеОшибки();

		КонецПопытки;

	КонецЕсли;

	Возврат СоставДанных;

КонецФункции

#КонецЕсли


