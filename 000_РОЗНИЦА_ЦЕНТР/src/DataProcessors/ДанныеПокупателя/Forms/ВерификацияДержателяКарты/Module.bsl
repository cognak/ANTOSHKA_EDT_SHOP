#Область ОбработчикиОсновныхСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда

		Возврат;

	КонецЕсли;

//	Этот реквизит формы используем, как отладочный, снимающий "фатальные" ограничения.
	ОтладочныйРежим = ТехническаяПоддержкаВызовСервера.ОтладочныйРежимРаботы();
	ИнформационнаяКарта = ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(Параметры, "ИнформационнаяКарта", ИнформационнаяКарта);

	Магазин = ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(Параметры, "Магазин", Магазин);

	Если Магазин.Пустая() Тогда	//	LNK 07.02.2019 11:35:04

		Магазин = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин;

	КонецЕсли;

	Если НЕ ИнформационнаяКарта.Пустая() Тогда

		КодКартыИзменен = Истина;

	КонецЕсли;

	НачальноеЗаполнениеРеквизитов();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Подключаемый_ДоступностьWebRetail();

	УстановитьИзменённостьРеквизитов();
	УстановитьДоступностьЭлементовФормы(Истина);

	ПодключитьОбработчикОжидания("Подключаемый_ДоступностьWebRetail", 10, Ложь);

	Если НЕ ИнформационнаяКарта.Пустая() И НЕ ПустаяСтрока(НомерТелефона) Тогда

	//	"Нормализуем" номер телефона в соответствии с маской редактирования
		НомерТелефона = Элементы.НомерТелефона.ТекстРедактирования;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если НЕ (ЗакрытиеСанкционировано ИЛИ ОтладочныйРежим ИЛИ ИнформационнаяКарта.Пустая()) Тогда

		Отказ = Истина;
		ТекстПредупреждения = "Воспользуйтесь кнопками управления верификацией!";

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивНепроверяемыхРеквизитов.Добавить("Объект");	//	осн.реквизит добавляется автоматичеки

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

//	---------------------------------------------------------------------------------------

	ТекстОшибокЗаполнения = "";

	Для каждого ПроверяемоеИмя Из ПроверяемыеРеквизиты Цикл

		Если НЕ ЗначениеЗаполнено(ЭтотОбъект[ПроверяемоеИмя]) Тогда

			Отказ = Истина;
			ТекстОшибокЗаполнения = ТекстОшибокЗаполнения + ?(ПустаяСтрока(ТекстОшибокЗаполнения), "", Символы.ПС)
			+ ПроверяемоеИмя;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КодКартыПриИзменении(Элемент)

	КодКартыИзменен = Истина;
	УстановитьИнформационнуюКарту();
	УстановитьИзменённостьРеквизитов();
	УстановитьДоступностьЭлементовФормы();

//	"Нормализуем" номер телефона в соответствии с маской редактирования
	НомерТелефона = Элементы.НомерТелефона.ТекстРедактирования;

КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаПриИзменении(Элемент)

	Если ПроверитьУникальностьНомераТелефона() Тогда

		ПодтверждениеПолучено   = Ложь;
		ПодтверждениеОтправлено = Ложь;
		НомерТелефонаИзменен    = НЕ ПустаяСтрока(НомерТелефона);

		УстановитьДоступностьЗависимыхОтПодтверждения();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолПриИзменении(Элемент)

	ПолИзменен = НЕ Пол.Пустая();
	УстановитьДоступностьЭлементовФормы(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)

	СтроковыеФункцииКлиентСервер.ПривестиНаименование(Фамилия, Истина, Истина);
	ФамилияИзменен = НЕ ПустаяСтрока(Фамилия);

КонецПроцедуры

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)

	Имя = РеквизитИмяСсылка(ИмяСсылка);
	СтроковыеФункцииКлиентСервер.ПривестиНаименование(Имя, Истина, Истина);
	ИмяИзменен = НЕ ПустаяСтрока(Имя);

КонецПроцедуры

&НаКлиенте	//	LNK 20.07.2021 06:35:58
Процедура ИмяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	Если НЕ ПустаяСтрока(Текст) Тогда

		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораИмени(Текст, Пол, Истина);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИмяИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)

	Если Пол.Пустая() Тогда

		Имя = "";
		СтандартнаяОбработка = Ложь;
		ПоказатьОповещениеПользователя("Укажите пол покупателя!",, "Для определения имени человека обязательно нужно указать пол", БиблиотекаКартинок.Ошибка32);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтчествоПриИзменении(Элемент)

	СтроковыеФункцииКлиентСервер.ПривестиНаименование(Отчество, Истина, Истина);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если НЕ Контрагент.Пустая() Тогда

		ПараметрыФормы = Новый Структура("Ключ", Контрагент);
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияПриИзменении(Элемент)

	ПоказатьОповещениеПользователя("Проверка номера телефона"
	,, "Отправлен запрос на получение последнего кода подтверждения ..."
	, БиблиотекаКартинок.Вопрос32, СтатусОповещенияПользователя.Информация);

	ПодтверждениеПолучено = Ложь;	//	сбросим возможное подтверждение

	Если ОтладочныйРежим Тогда

		ДанныеКлиента = Новый Структура(
			"Указан, КодКлиента"
			, Истина
			, КодПодтверждения
		);

	Иначе

		ДанныеКлиента = КодПодтвержденияПриИзмененииНаСервере(НомерТелефона);

	КонецЕсли;

	Если ДанныеКлиента.Указан Тогда

		Если СокрЛП(ДанныеКлиента.КодКлиента) = СокрЛП(КодПодтверждения) Тогда

			ПодтверждениеПолучено = Истина;

			ПоказатьОповещениеПользователя("Проверка номера телефона"
			,, "Поздравляем! Код подтверждения соответствует"
			, БиблиотекаКартинок.Информация32, СтатусОповещенияПользователя.Информация);

			ТекущийЭлемент = Элементы.ПрименитьИЗакрыть;

		Иначе

			ПоказатьОповещениеПользователя("Проверка номера телефона"
			,, "Код подтверждения не совпадает с отправленным на номер телефона «" + НомерТелефона + "»"
			, БиблиотекаКартинок.Ошибка32, СтатусОповещенияПользователя.Важное);

			ТекущийЭлемент = Элементы.КодПодтверждения;

		КонецЕсли;

	Иначе

		ПоказатьОповещениеПользователя("Проверка номера телефона"
		,, "Код подтверждения не получен. Возможно, не соответствует номер телефона «" + НомерТелефона + "»"
		, БиблиотекаКартинок.Ошибка32, СтатусОповещенияПользователя.Важное);

		ТекущийЭлемент = Элементы.КодПодтверждения;
	
	КонецЕсли;

	УстановитьДоступностьЗависимыхОтПодтверждения();

КонецПроцедуры

&НаСервереБезКонтекста
Функция КодПодтвержденияПриИзмененииНаСервере(НомерТелефона)

	Возврат ВерификацияКлиентовСервер.ПолучитьКодПодтверждения(ОтправкаSMS.ПодготовитьНомерТелефона(НомерТелефона), Истина);

КонецФункции // КодПодтвержденияПриИзмененииНаСервере()
	
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьВерификацию(Команда)

	Подключаемый_ДоступностьWebRetail();

	Авторизация = 1;	//	вводим данные
	УстановитьДоступностьЭлементовФормы(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОтложитьВерификацию(Команда)

	Авторизация = 2;	//	наш работник передумал
	УстановитьДоступностьЭлементовФормы();

	УстановитьСобытиеВерификации(ПредопределенноеЗначение("Перечисление.СобытияВерификацииПокупателей.Отложено"));
	ЗакрытиеСанкционировано = Истина;
	РезультатВерификации = "Отложить";
	Закрыть(РезультатВерификации);

КонецПроцедуры

&НаКлиенте
Процедура ОтказаноВВерификации(Команда)

	Авторизация = -1;	//	покупатель отказался
	УстановитьДоступностьЭлементовФормы();

	УстановитьСобытиеВерификации(ПредопределенноеЗначение("Перечисление.СобытияВерификацииПокупателей.ОтказПокупателя"));
	ЗакрытиеСанкционировано = Истина;
	РезультатВерификации = "Отказать";
	Закрыть(РезультатВерификации);

КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИЗакрыть(Команда)

	Подключаемый_ДоступностьWebRetail();

	Если РесурсWebRetailДоступен Тогда

		ЗаписатьДанныеКонтрагента();

		ЗакрытиеСанкционировано = Истина;
		РезультатВерификации = "Применить";
		Закрыть(РезультатВерификации);

	Иначе

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
			"Неудачная верификация"
			, "НЕТ доступа к серверу ЦБ. Попытайтесь выполнить верификацию позже."
		);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИЗакрыть(Команда)

	ФамилияИзменен = Ложь;
	ИмяИзменен     = Ложь;
	ПолИзменен     = Ложь;
	НомерТелефонаИзменен = Ложь;
	Авторизация    = 0;

	НачальноеЗаполнениеРеквизитов();
	УстановитьДоступностьЭлементовФормы(Истина);

КонецПроцедуры

&НаКлиенте
Процедура РасширенноеРедактирование(Команда)

	РасширенныеДанные = НЕ РасширенныеДанные;
	УстановитьДоступностьЭлементовФормы(Истина);

КонецПроцедуры
	
#КонецОбласти

#Область ОтправкаСообщенияSMS

&НаКлиенте
Процедура ОтправитьКодПодтвержденияSMS(Команда)

	Подключаемый_ДоступностьWebRetail();

	Если НЕ РесурсWebRetailДоступен Тогда

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
			"SMS аутентификация"
			, "НЕТ доступа к серверу ЦБ. Попытайтесь выполнить позже позже."
		);
		Возврат;

	КонецЕсли;

	Если ПроверитьУникальностьНомераТелефона() Тогда

		Если ПроверитьЗаполнение() Тогда

			ПоказатьВопрос(Новый ОписаниеОповещения("ОтправитьКодПодтвержденияSMSЗавершение", ЭтотОбъект)
				, "Будет отправлено SMS по указанному номеру. Подтвердите своё решение:", РежимДиалогаВопрос.ОКОтмена
				, 60, КодВозвратаДиалога.ОК, "ИДЕНТИФИКАЦИЯ", КодВозвратаДиалога.Отмена);

		Иначе

			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("В действии отказано!", "Необходимо заполнить все обязательные поля:" + ТекстОшибокЗаполнения);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКодПодтвержденияSMSЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда

		Если ОтладочныйРежим ИЛИ ОтправитьКодПодтвержденияSMSНаСервере(НомерТелефона, ИмяКомпьютера(), Контрагент) Тогда

			ПодтверждениеОтправлено = Истина;
			ПоказатьОповещениеПользователя("Код успешно отправлен на телефон" + Символы.ПС + "«" + НомерТелефона + "»");

		КонецЕсли;

		УстановитьДоступностьЭлементовФормы(Истина);

		ТекущийЭлемент = Элементы.КодПодтверждения;

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтправитьКодПодтвержденияSMSНаСервере(НомерТелефона, ИмяКлиентскогоКомпьютера, Контрагент)

	ДополнительныеПараметры = Новый Структура(
		"ИмяКомпьютера, Контрагент", ИмяКлиентскогоКомпьютера, Контрагент);

	Возврат ВерификацияКлиентовСервер.ОтправитьКодПодтверждения(ОтправкаSMS.ПодготовитьНомерТелефона(НомерТелефона), ДополнительныеПараметры, Истина);

КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийТабличногоПоляДети

&НаКлиенте
Процедура ТаблицаДетиИмяПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ТаблицаДети.ТекущиеДанные;

	Если НЕ ТекущиеДанные = Неопределено Тогда

		СтроковыеФункцииКлиентСервер.ПривестиНаименование(ТекущиеДанные.Имя, Истина, Истина);

		Если НЕ ПроверитьИмяФизЛица(ТекущиеДанные.Имя, ТекущиеДанные.Пол) Тогда

			Сообщить("Очищено! Имя «" + ТекущиеДанные.Имя + "» НЕ найдено в справочнике имён людей.");
			ТекущиеДанные.Имя = "";

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДетиПолПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ТаблицаДети.ТекущиеДанные;

	Если НЕ ТекущиеДанные = Неопределено Тогда

		ТекущиеДанные.Имя = "";

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 12.06.2019 13:33:17
Процедура ТаблицаДетиИмяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	Если НЕ ПустаяСтрока(Текст) И НЕ Элементы.ТаблицаДети.ТекущиеДанные = Неопределено Тогда

		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораИмени(Текст, Элементы.ТаблицаДети.ТекущиеДанные.Пол, Ложь);

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста	//	LNK 12.06.2019 13:15:50
Функция ПолучитьДанныеВыбораИмени(Текст, Пол, ВернутьСсылки)

	Возврат Справочники.ИменаЛюдей.ПолучитьДанныеВыбораИмени(Текст, Пол, ВернутьСсылки);

КонецФункции // ПолучитьДанныеВыбораИмени()
	
#КонецОбласти

#Область ПоддержкаФункционалаФормы

&НаСервере
Процедура НачальноеЗаполнениеРеквизитов()

	ОчиститьРеквизитыФормы();

	Если ИнформационнаяКарта.Пустая() Тогда

		Возврат;

	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Ведущая.КодКарты КАК КодКарты,
	|	ЕСТЬNULL(ТаблицаВладельца.Ссылка, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
	|	ЕСТЬNULL(ТаблицаВладельца.Наименование, """") КАК Наименование,
	|	ЕСТЬNULL(ТаблицаФИО.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(ТаблицаФИО.Имя, """") КАК Имя,
	|	ЕСТЬNULL(ТаблицаФИО.Отчество, """") КАК Отчество,
	|	ЕСТЬNULL(ТаблицаВладельца.Пол, ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)) КАК Пол,
	|	ЕСТЬNULL(ТаблицаВладельца.ДатаРождения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРождения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаКонтактыТелефон.НомерТелефона, """") = """"
	|			ТОГДА ЕСТЬNULL(ТаблицаКонтактыТелефон.Представление, """")
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаКонтактыТелефон.НомерТелефона, """")
	|	КОНЕЦ КАК НомерТелефона,
	|	ЕСТЬNULL(ТаблицаКонтактыПочта.Представление, """") КАК Электропочта,
	|	ТаблицаВладельца.Дети.(
	|		НомерСтроки КАК НомерСтроки,
	|		Имя КАК Имя,
	|		ДатаРождения КАК ДатаРождения,
	|		Пол КАК Пол
	|	) КАК Дети
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаВладельца
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ТаблицаФИО
	|			ПО ТаблицаВладельца.Ссылка = ТаблицаФИО.ФизЛицо
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтактыТелефон
	|			ПО ТаблицаВладельца.Ссылка = ТаблицаКонтактыТелефон.Ссылка
	|				И (ТаблицаКонтактыТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтактыПочта
	|			ПО ТаблицаВладельца.Ссылка = ТаблицаКонтактыПочта.Ссылка
	|				И (ТаблицаКонтактыТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагента))
	|		ПО Ведущая.ВладелецКарты = ТаблицаВладельца.Ссылка
	|ГДЕ
	|	Ведущая.Ссылка = &ИнформационнаяКарта"
	);
	Запрос.УстановитьПараметр("ИнформационнаяКарта", ИнформационнаяКарта);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		КодКарты   = Выборка.КодКарты;
		Контрагент = Выборка.Контрагент;
		Пол        = Выборка.Пол;
		ДатаРождения  = Выборка.ДатаРождения;
		НомерТелефона = ПривестиНомерТелефона(Выборка.НомерТелефона);
		Электропочта  = Выборка.Электропочта;

		Если НЕ Контрагент.Пустая() Тогда

			Наименование = СокрЛП(Выборка.Наименование);

			Если КонтактнаяИнформацияКлиентСервер.ЭтоПустоеНаименование(Наименование) Тогда

				Фамилия  = "";
				Имя      = "";
				Отчество = "";
				Наименование = "";

			Иначе

				Если ПустаяСтрока(Выборка.Фамилия) И ПустаяСтрока(Выборка.Имя) И ПустаяСтрока(Выборка.Отчество) Тогда

					СоставНаименования = ОбщегоНазначенияКлиентСервер.lx_FillValueList(, Наименование,, " ", 3,, Новый ОписаниеТипов("Строка"));

					Фамилия  = СоставНаименования[0];
					Имя      = СоставНаименования[1];
					Отчество = СоставНаименования[2];

				Иначе

					Фамилия  = СокрЛП(Выборка.Фамилия);
					Имя      = СокрЛП(Выборка.Имя);
					Отчество = СокрЛП(Выборка.Отчество);

				КонецЕсли;

			КонецЕсли;

			УстановитьИмяСсылка();
			Имя = РеквизитИмяСсылка(ИмяСсылка);
			ТаблицаДети.Загрузить(Выборка.Дети.Выгрузить());

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере	//	LNK 05.02.2019 13:18:25
Процедура УстановитьИмяСсылка()

	Если ПустаяСтрока(Имя) Тогда

		ИмяСсылка = Неопределено;

	Иначе

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИменаЛюдей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИменаЛюдей КАК ИменаЛюдей
		|ГДЕ
		|	(ИменаЛюдей.Наименование = &Имя
		|			ИЛИ ИменаЛюдей.НаименованиеУкраинское = &Имя)
		|	И ИменаЛюдей.Пол = &Пол"
		);
		Запрос.УстановитьПараметр("Имя", Имя);
		Запрос.УстановитьПараметр("Пол", Пол);

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда

			ИмяСсылка = Выборка.Ссылка;

		Иначе

			ИмяСсылка = Неопределено;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПривестиНомерТелефона(Знач НомерПредставление)

	НомерПредставление = СтрЗаменить(НомерПредставление,   "(", "");
	НомерПредставление = СтрЗаменить(НомерПредставление,   ")", "");
	НомерПредставление = СтрЗаменить(НомерПредставление,   " ", "");
	НомерПредставление = СтрЗаменить(НомерПредставление,   "+", "");
	НомерПредставление = СтрЗаменить(НомерПредставление, "380", "");

	Возврат НомерПредставление;

КонецФункции // ПривестиНомерТелефона()

&НаСервере
Процедура УстановитьИнформационнуюКарту()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК ИнформационнаяКарта,
	|	ТаблицаСправочник.ВидДисконтнойКарты КАК ВидДисконтнойКарты
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.КодКарты = &КодКарты
	|	И (ТаблицаСправочник.ВладелецКарты ССЫЛКА Справочник.Контрагенты
	|			ИЛИ ТаблицаСправочник.ВладелецКарты В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|				И ТаблицаСправочник.ВидДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.ВидыДисконтныхКарт.ПредварительныеКартыЛояльности))"
	);
	Запрос.УстановитьПараметр("КодКарты", КодКарты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

		ИнформационнаяКарта = Выборка.ИнформационнаяКарта;
		ВидДисконтнойКарты  = Выборка.ВидДисконтнойКарты;
		НачальноеЗаполнениеРеквизитов();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчиститьРеквизитыФормы()

	Для каждого Реквизит Из ПолучитьРеквизиты() Цикл

		Если Реквизит.СохраняемыеДанные Тогда

			ЭтотОбъект[Реквизит.Имя] = Реквизит.ТипЗначения.ПривестиЗначение();

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьИзменённостьРеквизитов()

	КодКартыИзменен = НЕ ПустаяСтрока(КодКарты);
	ПолИзменен      = НЕ Пол.Пустая();
	ФамилияИзменен  = НЕ ПустаяСтрока(Фамилия);
	ИмяИзменен      = НЕ ПустаяСтрока(Имя);
	НомерТелефонаИзменен = НЕ ПустаяСтрока(НомерТелефона);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы(УстановитьТекущийЭлемент = Ложь)

	Элементы.КодКарты.ТолькоПросмотр = НЕ ИнформационнаяКарта.Пустая();

	Элементы.ВыполнитьВерификацию.Доступность = НЕ ИнформационнаяКарта.Пустая();
	Элементы.ОтложитьВерификацию.Доступность  = НЕ ИнформационнаяКарта.Пустая();
	Элементы.ОтказаноВВерификации.Доступность = НЕ ИнформационнаяКарта.Пустая()
												И  РозничныеПродажиКлиентПовтИсп.РазрешитьОтказВерификацииКонтрагента(Магазин, ТекущаяДата());

	ПараметрыВыбораИмя = Новый Массив;	//	LNK 05.02.2019 13:43:48
	ПараметрыВыбораИмя.Добавить(Новый ПараметрВыбора("Отбор.Пол", Пол));
	Элементы.Имя.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораИмя);

	Элементы.Контрагент.Гиперссылка = НЕ Контрагент.Пустая();

	ТолькоПросмотр = НЕ Авторизация = 1;

	Элементы.ГруппаКнопкиАвторизации.Видимость = (Авторизация = 0);

	Элементы.ГруппаКнопкиКоманды.Видимость = (Авторизация = 1);

	Элементы.ГруппаПрочиеДанные.Видимость = РасширенныеДанные;

	Если УстановитьТекущийЭлемент Тогда

		Если РасширенныеДанные Тогда

			ТекущийЭлемент = Элементы.ДатаРождения;

		Иначе

			Если ИнформационнаяКарта.Пустая() Тогда

				ТекущийЭлемент = Элементы.КодКарты;
			
			Иначе

				ТекущийЭлемент = Элементы.Пол;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	УстановитьДоступностьЗависимыхОтПодтверждения();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЗависимыхОтПодтверждения(ПослеОтправкиПодтверждения = Ложь)

	ИзмененияСделаны = ИмяИзменен И ПолИзменен И НомерТелефонаИзменен И (Авторизация = 1);

	Элементы.КодПодтверждения.Видимость   = ПодтверждениеОтправлено И ИзмененияСделаны;
	Элементы.КодПодтверждения.Доступность = ПодтверждениеОтправлено И НЕ ПодтверждениеПолучено И ИзмененияСделаны;
	Элементы.НомерТелефона.ТолькоПросмотр = ПодтверждениеПолучено;
	Элементы.ОтправитьКодПодтвержденияSMS.Доступность = НЕ ПодтверждениеПолучено И НЕ ПодтверждениеОтправлено И ИзмененияСделаны;

	Элементы.ПрименитьИЗакрыть.Доступность = ПодтверждениеПолучено И ИзмененияСделаны;

	Если ПослеОтправкиПодтверждения Тогда

		Если ПодтверждениеОтправлено Тогда

			ТекущийЭлемент = Элементы.КодПодтверждения;

		КонецЕсли;

	КонецЕсли;

	УстановитьКлючиКомандныхКнопок();

КонецПроцедуры

&НаСервере
Процедура УстановитьКлючиКомандныхКнопок()

	Для каждого Элемент Из Элементы Цикл

		Если ТипЗнч(Элемент) = Тип("КнопкаФормы")
		И НЕ ПустаяСтрока(Элемент.ИмяКоманды)
		И    Элемент.СочетаниеКлавиш.Клавиша = Клавиша.Нет	Тогда

			Элемент.СочетаниеКлавиш = Команды[Элемент.ИмяКоманды].СочетаниеКлавиш;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеКонтрагента()

	Для каждого СтрокаТаблицы Из ТаблицаДети.НайтиСтроки(Новый Структура("Пол", Перечисления.ПолФизическогоЛица.ПустаяСсылка())) Цикл

		ТаблицаДети.Удалить(СтрокаТаблицы);

	КонецЦикла;

	ДанныеКонтрагента = Новый Структура;
	ДанныеКонтрагента.Вставить("Контрагент"   , Контрагент);
	ДанныеКонтрагента.Вставить("ИнформационнаяКарта", ИнформационнаяКарта);
	ДанныеКонтрагента.Вставить("ВидДисконтнойКарты" , ВидДисконтнойКарты);
	ДанныеКонтрагента.Вставить("Пол"          , Пол);
	ДанныеКонтрагента.Вставить("Фамилия"      , Фамилия);
	ДанныеКонтрагента.Вставить("Имя"          , Имя);
	ДанныеКонтрагента.Вставить("Отчество"     , Отчество);
	ДанныеКонтрагента.Вставить("НомерТелефона", НомерТелефона);
	ДанныеКонтрагента.Вставить("ДатаРождения" , ДатаРождения);
	ДанныеКонтрагента.Вставить("Электропочта" , Электропочта);
	ДанныеКонтрагента.Вставить("Дети"         , ТаблицаДети.Выгрузить());
	ДанныеКонтрагента.Вставить("Магазин"      , Магазин);

	ДанныеКонтрагента.Вставить("РасширенныеДанные", РасширенныеДанные);

	Результат = ВерификацияКлиентовСервер.ЗаписатьВерифицированныеДанныеКонтрагента(ДанныеКонтрагента);

КонецПроцедуры

&НаСервере
Процедура УстановитьСобытиеВерификации(СобытиеВерификации)

	ВерификацияКлиентовСервер.УстановитьСобытиеВерификации(Контрагент, ИнформационнаяКарта, СобытиеВерификации);

КонецПроцедуры

&НаСервереБезКонтекста	//	LNK 08.02.2019 09:47:25
Функция ПроверитьИмяФизЛица(Имя, Пол)

	Возврат Справочники.ИменаЛюдей.ИмяКорректно(Имя, Пол);

КонецФункции

&НаКлиенте	//	LNK 15.07.2019 09:16:24
Функция ПроверитьУникальностьНомераТелефона()

	ТекстСообщения = ПолучитьИнформациюСуществующихНомеровТелефона(НомерТелефона, Контрагент);

	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК(
			НСтр("ru = 'Номер телефона НЕ УНИКАЛЬНЫЙ!'")
			, "Такой номер телефона указан для следующих контрагентов:" + Символы.ПС + ТекстСообщения)

	КонецЕсли;

	Возврат ПустаяСтрока(ТекстСообщения);

КонецФункции // ПроверитьУникальностьНомераТелефона()

&НаСервереБезКонтекста	//	LNK 15.07.2019 09:16:18
Функция ПолучитьИнформациюСуществующихНомеровТелефона(НомерТелефона, Контрагент)

	ТекстСообщения = "";

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Контрагенты.Код КАК Код,
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.Представление КАК ВладелецТелефона
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтакты
	|		ПО Контрагенты.Ссылка = ТаблицаКонтакты.Ссылка
	|ГДЕ
	|	НЕ ТаблицаКонтакты.Ссылка = &Контрагент
	|	И ТаблицаКонтакты.НомерТелефона = &НомерТелефона
	|	И Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код"
	);
	Запрос.УстановитьПараметр("Контрагент"   , Контрагент);
	Запрос.УстановитьПараметр("НомерТелефона", ОтправкаSMS.ПодготовитьНомерТелефона(НомерТелефона));
	
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		ВладельцыВыборка = Запрос.Выполнить().Выбрать();
		
		Пока ВладельцыВыборка.Следующий() Цикл

			ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
			+ "[" + ВладельцыВыборка.Код + "] " + ВладельцыВыборка.ВладелецТелефона;

		КонецЦикла;

	КонецЕсли;

	Возврат ТекстСообщения;

КонецФункции

&НаКлиенте	//	LNK 20.07.2021 09:39:55
Процедура Подключаемый_ДоступностьWebRetail()

	РесурсWebRetailДоступен = РозничныеПродажиСлужебный.РесурсWebRetailДоступен();

	Если РесурсWebRetailДоступен Тогда

			Элементы.ИндикаторПодключения.Картинка = БиблиотекаКартинок.RFDIОперацииВыполнены;

	Иначе	Элементы.ИндикаторПодключения.Картинка = БиблиотекаКартинок.RFDIЗапись;

	КонецЕсли;

КонецПроцедуры

&НаСервере	//	LNK 23.07.2019 13:21:56
Функция ЭтотОбъект(ТекущийОбъект = Неопределено) 

	Если ТекущийОбъект = Неопределено Тогда

		Возврат РеквизитФормыВЗначение("Объект");

	КонецЕсли;

	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");

	Возврат Неопределено;

КонецФункции

&НаСервере	//	LNK 20.07.2021 18:35:21
Функция РеквизитИмяСсылка(ИмяСсылка)

	Возврат ЭтотОбъект().РеквизитИмяСсылка(ИмяСсылка);

КонецФункции

#КонецОбласти















