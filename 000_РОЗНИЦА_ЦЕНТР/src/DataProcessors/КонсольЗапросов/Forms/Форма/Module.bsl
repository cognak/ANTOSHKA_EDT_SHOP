
// Клиент
&НаКлиенте
Перем мШиринаКолонокПоУмолчанию;

&НаКлиенте
Перем мСтрокаПеретаскивания;

&НаКлиенте
Перем мЗаголовокВопросаИзменеиеСтатуса;

&НаКлиенте
Перем мФормаОсобогоТипа;

&НаКлиенте	//	LNK 10.11.2021 06:27:09
Перем ТекущаяСтрока;

#Область ОбработчикиОсновныхСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПутьКФормам = ПолучитьОбработку().Метаданные().ПолноеИмя() + ".Форма.";
	СтрокаНеопределено = ЗначениеВСтрокуВнутр(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ТонкийКлиент();

	мШиринаКолонокПоУмолчанию = 15;
	мЗаголовокВопросаИзменеиеСтатуса = "Изменение статуса параметра";
	мФормаОсобогоТипа = ПолучитьФорму(ПутьКФормам + "ФормаОсобогоТипа");
	мФормаОсобогоТипа.Инициализировать();
	ИнициализироватьДеревоЗапросов();
	СоставРезультатов = 1;
	УстановитьФильтрыПараметров();

	Если РаботатьСХранилищем Тогда

		Элементы.ПутьКФайлу.Видимость = Ложь;
		ХранилищеДанныхПрочитать();

	Иначе

		Если НЕ ПустаяСтрока(ПутьКФайлу) Тогда

			ФайлНастроек = Новый Файл(ПутьКФайлу);

			Если ФайлНастроек.Существует() Тогда

				ВызовПолучитьДерево(ПередатьНаСервер(ПутьКФайлу), мШиринаКолонокПоУмолчанию); 

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ТипЗнч(ХранимыеАтрибутыДерева) = Тип("Структура") Тогда

		Если ХранимыеАтрибутыДерева.РаботатьСХранилищем = РаботатьСХранилищем Тогда

			Элементы.ДеревоЗапросов.ТекущаяСтрока = ХранимыеАтрибутыДерева.ТекущаяСтрока;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	ХранимыеАтрибутыДерева = Новый Структура(
		"РаботатьСХранилищем, ТекущаяСтрока"
		, РаботатьСХранилищем
		, Элементы.ДеревоЗапросов.ТекущаяСтрока
	);

	СохранитьНаработки();

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	ХранимыеАтрибутыДерева = Настройки["ХранимыеАтрибутыДерева"];

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Команда)

	ЭлементДерева = Элементы.ДеревоЗапросов.ТекущиеДанные;

	Если ЭлементДерева <> Неопределено Тогда

		Если ЗначениеЗаполнено(ЭлементДерева.ТекстЗапроса) Тогда
			КонструкторЗапроса = Новый КонструкторЗапроса(ЭлементДерева.ТекстЗапроса);
		Иначе
			КонструкторЗапроса = Новый КонструкторЗапроса();
		КонецЕсли;

		#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда

		Если КонструкторЗапроса.ОткрытьМодально() Тогда
			ЭлементДерева.ТекстЗапроса = КонструкторЗапроса.Текст;
		Иначе
			Модифицированность = Ложь;
		КонецЕсли;

		#Иначе

		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияКонструктораЗапроса", ЭтотОбъект, ЭлементДерева);
		КонструкторЗапроса.Показать(Оповещение);

		#КонецЕсли

	Иначе

		ПоказатьПредупреждение(, "Запрос не выбран");
		Модифицированность = Ложь;

 	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияКонструктораЗапроса(ТекстКонструктора, ЭлементДерева)	Экспорт

	Если НЕ ТекстКонструктора = Неопределено Тогда

		ЭлементДерева.ТекстЗапроса = ТекстКонструктора;

	Иначе

		Модифицированность = Ложь;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТонкийКлиент()
	#Если ТонкийКлиент ИЛИ ВебКлиент Тогда
	Заголовок = Заголовок + " (тонкий клиент)";
	//Элементы.ОткрытьКонструктор.Доступность = Ложь; 
	//Элементы.ОткрытьКонструкторИзКонтекстногоМеню.Доступность = Ложь;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьДеревоЗапросов(Команда = Неопределено)
	СохранитьНаработки();
//	ПутьКФайлу = "";
	Запросы = ДеревоЗапросов.ПолучитьЭлементы();
	Запросы.Очистить();
	ИнициализироватьЗапрос(Запросы.Добавить(), "Запросы");
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	ЭлементДерева = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ЭлементДерева <> Неопределено Тогда
		ПараметрыЗапроса = ЭлементДерева.ПараметрыЗапроса;
		ВыполнитьТекстЗапроса(ЭлементДерева.ТекстЗапроса, ПараметрыЗапроса, ЭлементДерева.СпособВыгрузки);
	Иначе
		ПоказатьПредупреждение(, "Запрос не выбран");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлЗапросов(Команда)

	СохранитьНаработки();

	Диалог = ПолучитьДиалогВыбораФайла();

	Если Диалог.Выбрать() Тогда

		ПутьКФайлу = Диалог.ПолноеИмяФайла;
		ВызовПолучитьДерево(ПередатьНаСервер(ПутьКФайлу), мШиринаКолонокПоУмолчанию); 

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлЗапросов(Команда = Неопределено)

	Если РаботатьСХранилищем Тогда

		ХранилищеДанныхЗаписать();

	Иначе

		Если НЕ ЗначениеЗаполнено(ПутьКФайлу) Тогда

			Диалог = ПолучитьДиалогВыбораФайла();

			Если Диалог.Выбрать() Тогда

				ПутьКФайлу = Диалог.ПолноеИмяФайла;	
				ПреобразоватьИСохранитьДерево(ПутьКФайлу);
				Модифицированность = Ложь;

			КонецЕсли;

		Иначе

			ПреобразоватьИСохранитьДерево(ПутьКФайлу);
			Модифицированность = Ложь;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗапрос(Команда)
	ГридДереваЗапросов = Элементы.ДеревоЗапросов;
	ТекущийЗапрос = ГридДереваЗапросов.ТекущиеДанные;
	Если ТекущийЗапрос <> Неопределено Тогда
		ГридДереваЗапросов.ДобавитьСтроку();
		НовыйЗапрос = ГридДереваЗапросов.ТекущиеДанные;
		ИнициализироватьЗапрос(НовыйЗапрос, "<без названия>");
		Модифицированность = Истина;
	Иначе
		ПоказатьПредупреждение(, "Запрос-родитель не выбран");
		Модифицированность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьЗапрос(Команда)
	ГридЗапросов = Элементы.ДеревоЗапросов;
	ТекущийЗапрос = ГридЗапросов.ТекущиеДанные;
	Если ТекущийЗапрос <> Неопределено Тогда
		РодительТекущего = ТекущийЗапрос.ПолучитьРодителя();
		Если РодительТекущего <> Неопределено Тогда
			НовыйЗапрос = РодительТекущего.ПолучитьЭлементы().Добавить();
			СкопироватьСтрокуДереваЗапросов(НовыйЗапрос, ТекущийЗапрос);
			ГридЗапросов.ТекущаяСтрока = НовыйЗапрос.ПолучитьИдентификатор();
		Иначе
			ПоказатьПредупреждение(, "Нельзя скопировать корневой элемент");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗапрос(Команда)
	ТекущийЗапрос = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущийЗапрос <> Неопределено Тогда
		Родитель = ТекущийЗапрос.ПолучитьРодителя();
		Если Родитель <> Неопределено Тогда
			Родитель.ПолучитьЭлементы().Удалить(ТекущийЗапрос);
		Иначе
			ПоказатьПредупреждение(, "Нельзя удалить корневой элемент");
			Модифицированность = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапросВверх(Команда)
	СдвинутьЗапрос(-1);
КонецПроцедуры

&НаКлиенте
Процедура ЗапросВниз(Команда)
	СдвинутьЗапрос(1);
КонецПроцедуры

&НаКлиенте	//	LNK 18.06.2018 12:08:53
Процедура ЗапросПорядокПоВозрастанию(Команда)

	ТекущийЗапрос = Элементы.ДеревоЗапросов.ТекущиеДанные;

	Если НЕ ТекущийЗапрос = Неопределено Тогда

		Родитель = ТекущийЗапрос.ПолучитьРодителя();

		Если НЕ Родитель = Неопределено Тогда

			Семейство = Родитель.ПолучитьЭлементы();

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметры(Команда)
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		//Если ТекущиеДанные.ПараметрыЗапроса.Количество() > 0 Тогда
			Если Вопрос("Список параметров будет очищен. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				ЗначениеВозврата = ВызовЗаполнитьПараметры(ТекущиеДанные.ПолучитьИдентификатор());
				Если ТипЗнч(ЗначениеВозврата) = Тип("Структура") Тогда
					ТекущиеДанные.ПараметрыЗапроса.Очистить();
					Для каждого ПараметрЗапроса из ЗначениеВозврата Цикл
						НовыйПараметр = ТекущиеДанные.ПараметрыЗапроса.Добавить();
						НовыйПараметр.ИмяПараметра = ПараметрЗапроса.Ключ;
						НовыйПараметр.ЗначениеПараметра = ПараметрЗапроса.Значение.ПривестиЗначение(НовыйПараметр.ЗначениеПараметра);
					КонецЦикла;
				Иначе
					Сообщить(ЗначениеВозврата);
				КонецЕсли;
			КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРезультат(Команда)
	Если ПолеРезультатаЗапроса.ВысотаТаблицы > 0 Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.Фильтр = "Файл Excel (*.xls)|*.xls|Табличный документ (*.mxl)|*.mxl";
		Если Диалог.Выбрать() Тогда
			Файл = Новый Файл(Диалог.ПолноеИмяФайла);
			Если Файл.Расширение = ".mxl" Тогда
				ТипФайла = ТипФайлаТабличногоДокумента.MXL;
			ИначеЕсли Файл.Расширение = ".xls" Тогда
				ТипФайла = ТипФайлаТабличногоДокумента.XLS;
			КонецЕсли;
			ПолеРезультатаЗапроса.Записать(Диалог.ПолноеИмяФайла, ТипФайла);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	Диалог = ПолучитьДиалогВыбораФайла();
	Если Диалог.Выбрать() Тогда
		Путь = Диалог.ПолноеИмяФайла;	
		Проверка = Новый Файл(Путь);
		Если Проверка.Существует() Тогда
			Если Вопрос("Файл '" + Путь + "' существует. Заменить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				ПреобразоватьИСохранитьДерево(Путь);
				ПутьКФайлу = Путь;
			КонецЕсли;
		Иначе
			ПреобразоватьИСохранитьДерево(Путь);
			ПутьКФайлу = Путь;
		КонецЕсли;
		Модифицированность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыделенныйТекст(Команда)
	ЭлементДерева = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ЭлементДерева <> Неопределено Тогда
		ПараметрыЗапроса = ЭлементДерева.ПараметрыЗапроса;
		ВыполнитьТекстЗапроса(Элементы.ТекстЗапроса.ВыделенныйТекст, ПараметрыЗапроса, 1);
	Иначе
		ПоказатьПредупреждение(, "Запрос должен быть выделен в дереве");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КакПереподчинить(Команда)
	ПоказатьПредупреждение(, "Для изменения подчиненности просто перетащите элемент мышью на нового родителя");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРезультат(Команда)
	ПолеРезультатаЗапроса = Новый ТабличныйДокумент();
	ВремяВыполнения = "";
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекстЗапроса(Команда)
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ТекстЗапроса = "";
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОсобыйТипПараметра(Команда)
	ОткрытьФормуОсобогоПараметра();
КонецПроцедуры

&НаКлиенте
Процедура ПолеРезультатаЗапросаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Если ТипЗнч(Расшифровка) = Тип("ТабличныйДокумент") Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВложеннойТаблицы = ПолучитьФорму(ПутьКФормам + "ФормаВложеннойТаблицы");
		ФормаВложеннойТаблицы.ВладелецФормы                 = ЭтотОбъект;
		ФормаВложеннойТаблицы.ЗакрыватьПриЗакрытииВладельца = Истина;
		ФормаВложеннойТаблицы.ШиринаКолонок                 = мШиринаКолонокПоУмолчанию;
		ФормаВложеннойТаблицы.ВложеннаяТаблица              = Расшифровка;
		ФормаВложеннойТаблицы.ВложеннаяТаблица.Область().ШиринаКолонки = мШиринаКолонокПоУмолчанию;
		ФормаВложеннойТаблицы.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИмяЗапросаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТекстЗапросаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолеШиринаКолонокРегулирование(Элемент)
	УстановитьШиринуКолонок();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпособВыгрузкиПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗначениеПараметраОчистка(Элемент, СтандартнаяОбработка)
	Элементы.СписокПараметров.ТекущиеДанные.ЗначениеПараметра = Неопределено;
	Элемент.ВыбиратьТип  = Истина;
	Элемент.КнопкаВыбора = Истина;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗначениеПараметраПриИзменении(Элемент)
	ТекущееОписание = Элементы.СписокПараметров.ТекущиеДанные;
	Значение = ТекущееОписание.ЗначениеПараметра;
	Если ТипЗнч(Значение) = Тип("ОписаниеТипов") Тогда
		ЗаданныеТипы = Значение.Типы();
		Если ЗаданныеТипы.Количество() > 1 Тогда
			МассивТипов = Новый Массив();
			МассивТипов.Добавить(ЗаданныеТипы[0]);
			ТекущееОписание.ЗначениеПараметра = Новый ОписаниеТипов(МассивТипов);
			ПоказатьПредупреждение(, "Задан составной тип. Будет использован первый из состава типов");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровПередНачаломИзменения(Элемент, Отказ)
	ТекущийЭлементГрида = Элемент.ТекущийЭлемент;
	Если ТекущийЭлементГрида.Имя = "СписокПараметровЗначениеПараметра" Тогда
		Если Элемент.ТекущиеДанные.ЗначениеПараметра = Неопределено Тогда
			ТекущийЭлементГрида.ВыбиратьТип = Истина;
		Иначе
			ТекущийЭлементГрида.ВыбиратьТип = Ложь;
		КонецЕсли;
	ИначеЕсли ТекущийЭлементГрида.Имя = "СписокПараметровОсобыйТип" Тогда
		Отказ = (Вопрос("Параметр будет перемещен в список особых параметров", РежимДиалогаВопрос.ОКОтмена, , ,
			мЗаголовокВопросаИзменеиеСтатуса) = КодВозвратаДиалога.Отмена);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокОсобыхПараметровПередНачаломИзменения(Элемент, Отказ)
	//Если Элемент.ТекущийЭлемент.Имя = "СписокОсобыхПараметровОсобыйТип" Тогда
		Отказ = (Вопрос("Параметр будет перемещен в список общих параметров с неопределенным типом", 
			РежимДиалогаВопрос.ОКОтмена, , ,
			мЗаголовокВопросаИзменеиеСтатуса) = КодВозвратаДиалога.Отмена);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокОсобыхПараметровПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		ДанныеСтроки.ЗначениеПараметра = СтрокаНеопределено;
		ДанныеСтроки.Примечание        = ВРег(Строка(ТипЗнч(Неопределено)));
		ДанныеСтроки.ОсобыйТип         = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровОсобыйТипПриИзменении(Элемент)
	ДанныеСтроки = Элементы.СписокПараметров.ТекущиеДанные;
	ДанныеСтроки.ЗначениеПараметра = СтрокаНеопределено;
	ДанныеСтроки.Примечание = ВРег(Строка(ТипЗнч(Неопределено)));
	УстановитьФильтрыПараметров();
	Элементы.ГруппаОбщиеИОсобые.ТекущаяСтраница = Элементы.СтраницаОсобые;
КонецПроцедуры

&НаКлиенте
Процедура СписокОсобыхПараметровОсобыйТипПриИзменении(Элемент)
	Элементы.СписокОсобыхПараметров.ТекущиеДанные.ЗначениеПараметра = Неопределено;
	УстановитьФильтрыПараметров();
	Элементы.ГруппаОбщиеИОсобые.ТекущаяСтраница = Элементы.СтраницаОбщие;
КонецПроцедуры

&НаКлиенте
Процедура СписокОсобыхПараметровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуОсобогоПараметра();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если НЕ Элемент.ТекущиеДанные = Неопределено И НЕ ПустаяСтрока(Элемент.ТекущиеДанные.ТекстЗапроса) Тогда

		СтандартнаяОбработка = Ложь;
		ВыполнитьЗапрос(Неопределено);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 10.11.2021 06:17:31
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)

	Если ТипЗнч(ТекущаяСтрока) = Тип("Число") Тогда

	//	это предыдущая текущая строка!
		ПредыдущаяВетка = ДеревоЗапросов.НайтиПоИдентификатору(ТекущаяСтрока);

		Если НЕ ПредыдущаяВетка = Неопределено И НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = ПредыдущаяВетка Тогда

			Элемент.Свернуть(ТекущаяСтрока);

		КонецЕсли;

	КонецЕсли;

	Если ТипЗнч(Элемент.ТекущаяСтрока) = Тип("Число") Тогда

		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		ТекущаяСтрока = Элемент.ТекущаяСтрока;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 10.11.2021 06:49:18
Процедура ДеревоЗапросовПередРазворачиванием(Элемент, Строка, Отказ)

	а = 22;

КонецПроцедуры

&НаКлиенте	//	LNK 10.11.2021 06:49:18
Процедура ДеревоЗапросовПередСворачиванием(Элемент, Строка, Отказ)

	а = 22;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	мСтрокаПеретаскивания = Элемент.ТекущиеДанные;
	ПараметрыПеретаскивания.Значение = "";
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если Строка <> Неопределено Тогда
		НовыйРодитель = ДеревоЗапросов.НайтиПоИдентификатору(Строка);
		Потомок = мСтрокаПеретаскивания;
		ПрежнийРодитель = Потомок.ПолучитьРодителя();
		Если НЕ ((ПрежнийРодитель = Неопределено) ИЛИ (Строка = ПрежнийРодитель.ПолучитьИдентификатор())) Тогда
			Если НЕ ВИерархии(НовыйРодитель, Потомок) Тогда
				Если Вопрос("Переподчинить элемент """ + Потомок.Запрос + """ элементу """ + НовыйРодитель.Запрос + """?", 
						РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
					Подчинить(Потомок, НовыйРодитель.ПолучитьЭлементы());
					ПрежняяСемья = ПрежнийРодитель.ПолучитьЭлементы();
					ПрежняяСемья.Удалить(ПрежняяСемья.Индекс(Потомок));
					Модифицированность = Истина;
				КонецЕсли;
			Иначе
				ПоказатьПредупреждение(, "Зацикливание подчиненности - переподчинение невозможно");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОсобогоПараметра()
	СтрокаПараметра = Элементы.СписокОсобыхПараметров.ТекущиеДанные;
	Если СтрокаПараметра <> Неопределено Тогда
		Если СтрокаПараметра.ОсобыйТип Тогда
			мФормаОсобогоТипа.ИмяПараметра = СтрокаПараметра.ИмяПараметра;
			мФормаОсобогоТипа.СтроковоеЗначениеПараметра = СтрокаПараметра.ЗначениеПараметра;
			СтруктураРезультата = мФормаОсобогоТипа.ОткрытьМодально();
			Если ЗначениеЗаполнено(СтруктураРезультата) Тогда
				СтрокаПараметра.ИмяПараметра      = СтруктураРезультата.ИмяПараметра;
				СтрокаПараметра.ЗначениеПараметра = СтруктураРезультата.Результат;
				СтрокаПараметра.Примечание        = ВРег(СтруктураРезультата.СтрокаТипРезультата);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СкопироватьСтрокуДереваЗапросов(НовыйЗапрос, ТекущийЗапрос)
	ЗаполнитьЗначенияСвойств(НовыйЗапрос, ТекущийЗапрос, , "ПараметрыЗапроса");
	ПараметрыТекущего = ТекущийЗапрос.ПараметрыЗапроса;
	ПараметрыНового = НовыйЗапрос.ПараметрыЗапроса;
	Для каждого СтрокаПараметр из ПараметрыТекущего Цикл
		СтрокаПараметрНового = ПараметрыНового.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПараметрНового, СтрокаПараметр);
	КонецЦикла;
	ДочерниеЗапросы = ТекущийЗапрос.ПолучитьЭлементы();
	ДочерниеЗапросыНового = НовыйЗапрос.ПолучитьЭлементы();
	Для каждого ДочернийЗапрос из ДочерниеЗапросы Цикл;
		НовыйДочернийЗапрос = ДочерниеЗапросыНового.Добавить();
		СкопироватьСтрокуДереваЗапросов(НовыйДочернийЗапрос, ДочернийЗапрос);
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьТекстЗапроса(ТекстЗапроса, ПараметрыЗапроса, СпособВыгрузки)

	ВремяВыполнения = "";
	РазмерВыборки	= 0;
	ОбновитьОтображениеДанных();	

	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда

		ПолеРезультатаЗапроса = Новый ТабличныйДокумент();
		Начало		= ТекущаяДата();
		Результат	= ВызовВыполнитьЗапрос(ТекстЗапроса, ПараметрыЗапроса, СпособВыгрузки, РазмерВыборки);
		Окончание	= ТекущаяДата();

		ФорматВремени = "ДЛФ=В";
		ВремяВыполнения = "нач:" + Формат(Начало, ФорматВремени)
						+ " кон:" + Формат(Окончание, ФорматВремени);

		Если ТипЗнч(Результат) = Тип("ТабличныйДокумент") Тогда

			ВремяВыполнения = ВремяВыполнения
							+ " строк:" + РазмерВыборки;

			ПолеРезультатаЗапроса = Результат;
			Элементы.ПолеРезультатаЗапроса.ТекущаяОбласть = Результат.Область(1, 1, 1, 1);
			УстановитьШиринуКолонок();

		Иначе

			Сообщить(Результат);

		КонецЕсли;

	Иначе

		ПоказатьПредупреждение(, "Текст запроса пустой");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьШиринуКолонок()
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ШиринаКолонок = ТекущиеДанные.ШиринаКолонок;
		Если ШиринаКолонок > 0 Тогда
			ПолеРезультатаЗапроса.Область().ШиринаКолонки = ШиринаКолонок;
		Иначе
			ПолеРезультатаЗапроса.Область().ШиринаКолонки = мШиринаКолонокПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДиалогВыбораФайла()
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок  = "Выберите файл со списком запросов";
	Диалог.Фильтр     = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
	Диалог.Расширение = "sel";
	Возврат Диалог;
КонецФункции

&НаКлиенте
Процедура СохранитьНаработки()

	Если Модифицированность Тогда

		Если Вопрос("Сохранить файл запросов?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда

				СохранитьФайлЗапросов();

		Иначе	Модифицированность = Ложь;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьЗапрос(ЭлементДереваЗапросов, ИмяЗапроса = "")
	ЭлементДереваЗапросов.Запрос         = ИмяЗапроса;
	ЭлементДереваЗапросов.ТекстЗапроса   = "";
	ЭлементДереваЗапросов.СпособВыгрузки = 1;
	ЭлементДереваЗапросов.ШиринаКолонок  = мШиринаКолонокПоУмолчанию;
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьЗапрос(Направление)
	ТекущийЗапрос = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущийЗапрос <> Неопределено Тогда
		Родитель = ТекущийЗапрос.ПолучитьРодителя();
		Если Родитель <> Неопределено Тогда
			Семейство = Родитель.ПолучитьЭлементы();
			Индекс = Семейство.Индекс(ТекущийЗапрос);
			Если ((Направление = 1) И (Индекс < Семейство.Количество() - 1)) 
				ИЛИ ((Направление = -1) И (Индекс > 0)) Тогда
					Семейство.Сдвинуть(Индекс, Направление);
					Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьИСохранитьДерево(ПутьКФайлу)

	АдресХранилища = ВызовПреобразоватьДерево();
	ПолучитьФайл(АдресХранилища, ПутьКФайлу, Ложь);
	УдалитьИзВременногоХранилища(АдресХранилища);

КонецПроцедуры

&НаКлиенте
Функция ВИерархии(НовыйРодитель, Потомок)
	ПредокНовогоРодителя = НовыйРодитель.ПолучитьРодителя();
	Проверять = Истина;
	Результат = Ложь;
	Пока Проверять Цикл
		Если ПредокНовогоРодителя <> Неопределено Тогда
			Если ПредокНовогоРодителя = Потомок Тогда
				Проверять = Ложь;
				Результат = Истина;
			Иначе
				ПредокНовогоРодителя = ПредокНовогоРодителя.ПолучитьРодителя();
			КонецЕсли;
		Иначе
			Проверять = Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура Подчинить(Потомок, НоваяСемья)
	НоваяСтрока = НоваяСемья.Добавить();
	НоваяСтрока.Запрос         = Потомок.Запрос;
	НоваяСтрока.ТекстЗапроса   = Потомок.ТекстЗапроса;
	НоваяСтрока.СпособВыгрузки = Потомок.СпособВыгрузки;
	НоваяСтрока.ШиринаКолонок  = Потомок.ШиринаКолонок;
	СкопироватьПараметры(НоваяСтрока.ПараметрыЗапроса, Потомок.ПараметрыЗапроса);
	ПотомкиПотомка = Потомок.ПолучитьЭлементы();
	Для Каждого ПотомокПотомка из ПотомкиПотомка Цикл
		Подчинить(ПотомокПотомка, НоваяСтрока.ПолучитьЭлементы());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПараметры(ТаблицаПриемник, ТаблицаИсточник)
	Для каждого СтрокаИсточник из ТаблицаИсточник Цикл
		НоваяСтрока = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
	КонецЦикла;
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьФильтрыПараметров()
	ИмяКолонки = "ОсобыйТип";
	Элементы.СписокПараметров.ОтборСтрок = Новый ФиксированнаяСтруктура(ИмяКолонки, Ложь);	
	Элементы.СписокОсобыхПараметров.ОтборСтрок = Новый ФиксированнаяСтруктура(ИмяКолонки, Истина);	
КонецПроцедуры

&НаКлиенте
Функция ПередатьНаСервер(ПутьКФайлу)

	Перем АдресХранилища;

	ПоместитьФайл(АдресХранилища, ПутьКФайлу, ПутьКФайлу, Ложь, УникальныйИдентификатор);

	Возврат АдресХранилища;

КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Функция ВызовВыполнитьЗапрос(ТекстЗапроса, ПараметрыЗапроса, СпособВыгрузки, РазмерВыборки)

	Возврат ПолучитьОбработку().ВыполнитьЗапрос(ТекстЗапроса, ПараметрыЗапроса, СпособВыгрузки, СоставРезультатов, ДляСсылокВыводитьГУИД, РазмерВыборки);

КонецФункции

&НаСервере
Процедура ВызовПолучитьДерево(АдресХранилища, ШиринаКолонокПоУмолчанию)

	ПолучитьОбработку().ПолучитьДеревоИзФайла(АдресХранилища, ДеревоЗапросов, ШиринаКолонокПоУмолчанию);

КонецПроцедуры

&НаСервере
Функция ВызовПреобразоватьДерево()
	Возврат ПолучитьОбработку().ПреобразоватьДерево(ДеревоЗапросов);
КонецФункции

&НаСервере
Функция ВызовЗаполнитьПараметры(ИдентификаторТекущихДанных)
	Возврат ПолучитьОбработку().ЗаполнитьПараметрыЗапроса(ДеревоЗапросов, ИдентификаторТекущихДанных);
КонецФункции

&НаСервере
Функция ПолучитьОбработку()
	Возврат РеквизитФормыВЗначение("ОбработкаКонсольЗапросов");
КонецФункции

&НаСервере	//	LNK 22.07.2019 14:23:24
Процедура ХранилищеДанныхЗаписать()

	РегистрыСведений.БезопасноеХранилищеДанных.ДанныеЗаписать(ИдентификаторДанныхЗапроса()
	, Новый ХранилищеЗначения(ПолучитьОбработку().ПолучитьДеревоЗначенийИзПрокси(ДеревоЗапросов), Новый СжатиеДанных(9))
	, Неопределено);

	Модифицированность = Ложь;

КонецПроцедуры

&НаСервере	//	LNK 22.07.2019 14:37:44
Процедура ХранилищеДанныхПрочитать()

	ДеревоЗначений = РегистрыСведений.БезопасноеХранилищеДанных.ДанныеПрочитать(ИдентификаторДанныхЗапроса()).Получить();

	Если ТипЗнч(ДеревоЗначений) = Тип("ДеревоЗначений") Тогда

		ЭлементыДерева = ДеревоЗапросов.ПолучитьЭлементы();
		ЭлементыДерева.Очистить();
		ПолучитьОбработку().ЗаполнитьУровеньПроксиДерева(ЭлементыДерева, ДеревоЗначений.Строки, НЕ ДеревоЗначений.Колонки.Найти("ШиринаКолонок") = Неопределено);

	КонецЕсли;

КонецПроцедуры

&НаСервере	//	LNK 22.07.2019 14:38:39
Функция ИдентификаторДанныхЗапроса()

	Возврат ПолучитьОбработку().Метаданные().Имя + "#" + ИмяПользователя();

КонецФункции // ИдентификаторДанныхЗапроса()

#Область ОбработчикиСортировкиСтрокДереваЗначений

&НаКлиенте
Процедура СортироватьПоВозростанию(Команда)

	Если НЕ Элементы.ДеревоЗапросов.ТекущиеДанные = Неопределено Тогда

		СортироватьВеткуДерева(НаправлениеСортировки.Возр, Элементы.ДеревоЗапросов.ТекущиеДанные.ПолучитьИдентификатор());

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоУбыванию(Команда)

	Если НЕ Элементы.ДеревоЗапросов.ТекущиеДанные = Неопределено Тогда

		СортироватьВеткуДерева(НаправлениеСортировки.Убыв, Элементы.ДеревоЗапросов.ТекущиеДанные.ПолучитьИдентификатор());

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СортироватьВеткуДерева(Направление, Идентификатор)

	ЭлементДерева = ДеревоЗапросов.НайтиПоИдентификатору(Идентификатор);

	ЭлементРодитель = ЭлементДерева.ПолучитьРодителя();

	Если ЭлементРодитель = Неопределено Тогда

	//	это "корневой" элемент - нужно сортировать "подчинённые" ему элементы
		КоллекцияЭлементов = ЭлементДерева.ПолучитьЭлементы();

	Иначе

	//	сортируем весь текущий уровень, то есть подчинённый текущему родителю.
		КоллекцияЭлементов = ЭлементРодитель.ПолучитьЭлементы();

	КонецЕсли;

	СортироватьКоллекцию(КоллекцияЭлементов, Направление);

КонецПроцедуры

&НаКлиенте
Процедура СортироватьКоллекцию(КоллекцияЭлементов, Направление)

	СписокЭлементов = Новый СписокЗначений;

	Для каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл

		СписокЭлементов.Добавить(ЭлементКоллекции, ЭлементКоллекции.Запрос);

		СортироватьКоллекцию(ЭлементКоллекции.ПолучитьЭлементы(), Направление);

	КонецЦикла;

	Если НЕ СписокЭлементов.Количество() = 0 Тогда

		СписокЭлементов.СортироватьПоПредставлению(Направление);

		ИндексНовый = 0;

		Для каждого ЭлементСписка Из СписокЭлементов Цикл

			ИндексТекущий = КоллекцияЭлементов.Индекс(ЭлементСписка.Значение);

			КоллекцияЭлементов.Сдвинуть(ИндексТекущий, ИндексНовый - ИндексТекущий);

			ИндексНовый = ИндексНовый + 1;

			Модифицированность = Истина;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ДополнительныеСервисныеМетоды


&НаСервере
Процедура ПоказатьВремяСозданияСсылкиНаСервере()

	Если ЗначениеЗаполнено(СсылкаЛюбая) Тогда

		ТекстДобавить = СокрЛП(ОбщегоНазначенияКлиентСервер.УникальныйИдентификаторВремя(СсылкаЛюбая.УникальныйИдентификатор()))
		+ " [" + СсылкаЛюбая + "]";

	Иначе

		ТекстДобавить = "Ссылка не указана.";

	КонецЕсли;

	ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС) + ТекстДобавить;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВремяСозданияСсылки(Команда)

	ПоказатьВремяСозданияСсылкиНаСервере();

КонецПроцедуры
	
#КонецОбласти










