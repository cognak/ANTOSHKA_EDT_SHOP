///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Номенклатура.Пустая() Тогда
		
		ВыборВДокумент = Параметры.ВыборВДокумент;
		Номенклатура   = Параметры.Номенклатура;
		ИспользоватьСерийныеНомера = Параметры.Номенклатура.ИспользоватьСерийныеНомера;
		
		ТипСерийногоНомера = Параметры.Номенклатура.ТипСерийногоНомера;
		ЕстьМагнитныеКоды  = (ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Магнитный ИЛИ ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Смешанный);
		ЕстьШтрихкоды      = (ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой ИЛИ ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Смешанный);
		
		Элементы.ГруппаМагнитныеИСимвольные.Доступность       = ЕстьМагнитныеКоды;
		Элементы.ГруппаШтриховые.Доступность                  = ЕстьШтрихкоды;
		Элементы.КоличествоСимволов.ОтметкаНезаполненного     = ЕстьМагнитныеКоды;
		Элементы.КоличествоСимволов.АвтоОтметкаНезаполненного = ЕстьМагнитныеКоды;
		Элементы.ТипШтрихкода.ОтметкаНезаполненного           = ЕстьШтрихкоды;
		Элементы.ТипШтрихкода.АвтоОтметкаНезаполненного       = ЕстьШтрихкоды;
		Элементы.ПервыйШтрихкод.ОтметкаНезаполненного         = ЕстьШтрихкоды;
		Элементы.ПервыйШтрихкод.АвтоОтметкаНезаполненного     = ЕстьШтрихкоды;
		
		Элементы.ТипШтрихкода.СписокВыбора.Добавить(ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13);
		Элементы.ТипШтрихкода.СписокВыбора.Добавить(ПланыВидовХарактеристик.ТипыШтрихкодов.CODE39);
		
		ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
		
		ЕстьОшибкиПоМагнитнымКодам = Ложь;
		ЕстьОшибкиПоШтрихкодам     = Ложь;
		
		Если ВыборВДокумент Тогда
			
			Элементы.ФормаСформировать.Заголовок = НСтр("ru = 'Выбрать диапазон'");
			Элементы.ФормаПроверкаСерийныхНомеров.Видимость = Ложь;
			Элементы.ФормаПроверкаСерийныхНомеров.Доступность = Ложь;
									
		КонецЕсли;
				
	КонецЕсли;
	
	// +HVOYA. 23.08.2016 23:16:20, Львова Е.А.
	ЭтоСкидочныйКупон = Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.СкидочныйКупон;
	Если ЭтоСкидочныйКупон Тогда
		Элементы.КоличествоСертификатов.Заголовок = Строка("Количество скидочных купонов");
		Документ = РеквизитФормыВЗначение("Объект");
		Документ.hiИзменитьНазваниеФормы(ЭтотОбъект);
		ЗначениеВРеквизитФормы(Документ,"Объект");
	КонецЕсли;
	// -HVOYA. 23.08.2016 23:16:32, Львова Е.А.
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.Номенклатура.Пустая() Тогда
		
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Не задана номенклатура для заполнения
									|диапазона серийных номеров'");
		ПоказатьПредупреждение(, ТекстСообщения);
		
	ИначеЕсли НЕ ИспользоватьСерийныеНомера Тогда
		
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'По номенклатуре не ведется учет
									|серийных номеров'");
		ПоказатьПредупреждение(, ТекстСообщения);
			
	КонецЕсли;
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЕстьМагнитныеКоды ИЛИ ВыборВДокумент Тогда
		
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("КоличествоСимволов"));
		
	КонецЕсли;
	
	Если НЕ ЕстьШтрихкоды ИЛИ ВыборВДокумент Тогда
		
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ТипШтрихкода"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ПервыйШтрихкод"));
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ТипШтрихкодаПриИзменении(Элемент)
	
	РассчитатьШтрихкод();
	
КонецПроцедуры

&НаКлиенте
Процедура ПервыйШтрихкодПриИзменении(Элемент)
	
	ПриИзмененииПервыйШтрихкод();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоСертификатовПриИзменении(Элемент)
	
	ПриИзмененииКоличествоСертификатов();
		
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксПостфиксПриИзменении(Элемент)
	
	РассчитатьМагнитныеКоды();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Сформировать(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		Если ВыборВДокумент Тогда
			
			Если ВыбратьДиапазон() Тогда
				
				ОповеститьОВыборе(АдресСерийныхНомеровВХранилище);
				
			Иначе
				
				ПоказатьОповещениеПользователя(НСтр("ru = 'Нет доступных номеров подарочных сертификатов'"));
				
			КонецЕсли;
			
		Иначе
			
			Если Не ПроверитьОбщуюВозможностьСозданияСертификатов() Тогда
				Возврат;
			КонецЕсли;
			
			Если НайтиПересеченияКодов() Тогда
				
				СозданоСертфикатов = СоздатьСертификаты();
				Оповестить("СозданыСертификаты");
				ПоказатьОповещениеПользователя(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создано %1 сертификатов'"), СозданоСертфикатов));
				
			Иначе
				
				ПечатьПроверкиИспользуемыхКодов();
				
				ТекстВопроса = НСтр("ru = 'В заданном диапазоне есть использованные ранее коды.
				|Продолжить создание только уникальных номеров подарочных сертификатов?'");
				
				//ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	 			ПоказатьВопрос(Новый ОписаниеОповещения("РезультатВопросаЗавершение", ЭтотОбъект),ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);			
				//Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
				//	
				//	СозданоСертфикатов = СоздатьСертификаты(Ложь);
				//	Оповестить("СозданыСертификаты");
				//	ПоказатьОповещениеПользователя(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создано %1 сертификатов'"),СозданоСертфикатов));
				//	
				//КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВопросаЗавершение(РезультатВопроса, ПараметрыЗаписи) Экспорт
				Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
					
					СозданоСертфикатов = СоздатьСертификаты(Ложь);
					Оповестить("СозданыСертификаты");
					ПоказатьОповещениеПользователя(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создано %1 сертификатов'"),СозданоСертфикатов));
					
				КонецЕсли;
        
        
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСерийныхНомеров(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		
		Если НайтиПересеченияКодов() Тогда
				
			ПоказатьОповещениеПользователя(НСтр("ru = 'Проверка успешно пройдена'"));
				
		Иначе
			
			ПечатьПроверкиИспользуемыхКодов(); 
			
		КонецЕсли;
		
	КонецЕсли;
	
		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Проверяет длину строки поля КодКарты в таблице и удаляет не соотвествующие строки, а также добавляет в массив
//
// Параметры:
//  ПроверяемаяТаблица - Таблица в которой проверяем длину строки
//  ДлинаСтроки - Число символов
//
&НаСервере
Процедура ПроверитьТаблицу(ПроверяемаяТаблица, ДлинаСтроки)
	
	КолвоЭлементовКоллекции = ПроверяемаяТаблица.Количество();
	
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		
		ЭлементКоллекции = ПроверяемаяТаблица[КолвоЭлементовКоллекции - ОбратныйИндекс];
		
		Если НЕ СтрДлина(ЭлементКоллекции.КодКарты) = ДлинаСтроки Тогда
			
			ПроверяемаяТаблица.Удалить(ЭлементКоллекции);
			
		ИначеЕсли ВыборВДокумент Тогда
			
			СписокСерийныхНомеров.Добавить(ЭлементКоллекции.Карта);
	     			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Ищет существуюшие магнитные коды. 
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//  Число - количество существующих магнитных кодов
//
&НаСервере
Функция НайтиСуществующиеМагнитныеКоды()

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.КодКарты КАК КодКарты,
	|	ВложенныйЗапрос.ВладелецКарты,
	|	ВложенныйЗапрос.ВидКода,
	|	ВложенныйЗапрос.Дополнительно,
	|	ВложенныйЗапрос.Карта
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИнформационныеКарты.КодКарты КАК КодКарты,
	|		ИнформационныеКарты.ВладелецКарты КАК ВладелецКарты,
	|		""Магнитный код"" КАК ВидКода,
	|		ВЫБОР
	|			КОГДА ИнформационныеКарты.ТипКарты = ЗНАЧЕНИЕ(Перечисление.ТипыИнформационныхКарт.Регистрационная)
	|				ТОГДА ""Регистрационная карт""
	|			ИНАЧЕ ""Дисконтная карта""
	|		КОНЕЦ КАК Дополнительно,
	|		ИнформационныеКарты.Ссылка КАК Карта
	|	ИЗ
	|		Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|	ГДЕ
	|		ИнформационныеКарты.КодКарты >= &ПервыйКод
	|		И ИнформационныеКарты.КодКарты <= &ПоследнийКод
	|		И (ВЫРАЗИТЬ(ИнформационныеКарты.КодКарты КАК СТРОКА(200))) = ИнформационныеКарты.КодКарты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СерийныеНомера.КодСерийногоНомера,
	|		СерийныеНомера.Владелец,
	|		""Магнитный код"",
	|		""Номер подарочного сертификата"",
	|		СерийныеНомера.Ссылка
	|	ИЗ
	|		Справочник.СерийныеНомера КАК СерийныеНомера
	|	ГДЕ
	|		СерийныеНомера.КодСерийногоНомера >= &ПервыйКод
	|		И СерийныеНомера.КодСерийногоНомера <= &ПоследнийКод
	|		И (ВЫРАЗИТЬ(СерийныеНомера.КодСерийногоНомера КАК СТРОКА(200))) = СерийныеНомера.КодСерийногоНомера) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодКарты");
	
	Запрос.УстановитьПараметр("ПервыйКод", ПервыйМагнитныйКод);
	Запрос.УстановитьПараметр("ПоследнийКод", ПоследнийМагнитныйКод);
	
	КоличествоСимволовВКоде = СтрДлина(ПервыйМагнитныйКод);
	Запрос.Текст            = СтрЗаменить(Запрос.Текст,"200", Формат(КоличествоСимволовВКоде, "ЧГ=0"));
	ТаблицаЗапроса          = Запрос.Выполнить().Выгрузить();
	
	ПроверитьТаблицу(ТаблицаЗапроса, КоличествоСимволовВКоде);
	
	ТаблицаМагнитныхКодов.Загрузить(ТаблицаЗапроса);
	
	Возврат ТаблицаЗапроса.Количество();

КонецФункции

// Найти существующие штрих коды.
//
// Параметры;
//  Нет
//
// Возвращаемое значение:
//  Число - Количество существующих штрихкодов
//
&НаСервере
Функция НайтиСуществующиеШтрихКоды()

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Штрихкоды.Владелец ССЫЛКА Справочник.СерийныеНомера
	|			ТОГДА Штрихкоды.Владелец.Владелец
	|		ИНАЧЕ Штрихкоды.Владелец
	|	КОНЕЦ КАК ВладелецКарты,
	|	Штрихкоды.Штрихкод КАК КодКарты,
	|	""Штриховой код"" КАК ВидКода,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ""Ед. изм.: "" + Штрихкоды.Упаковка.Наименование + ВЫБОР
	|					КОГДА (НЕ Штрихкоды.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|						ТОГДА ""Характеристика: "" + Штрихкоды.Характеристика.Наименование
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Штрихкоды.Владелец ССЫЛКА Справочник.ИнформационныеКарты
	|					ТОГДА ВЫБОР
	|							КОГДА Штрихкоды.Владелец.ТипКарты = ЗНАЧЕНИЕ(Перечисление.ТипыИнформационныхКарт.Регистрационная)
	|								ТОГДА ""Регистрационная карта""
	|							ИНАЧЕ ""Дисконтная карта""
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА Штрихкоды.Владелец ССЫЛКА Справочник.СерийныеНомера
	|							ТОГДА ""Номер подарочного сертификата""
	|						ИНАЧЕ """"
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Дополнительно
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод >= &ПервыйКод
	|	И Штрихкоды.Штрихкод <= &ПоследнийКод
	|	И (ВЫРАЗИТЬ(Штрихкоды.Штрихкод КАК СТРОКА(200))) = Штрихкоды.Штрихкод");
	
	Запрос.УстановитьПараметр("ПервыйКод", ПервыйШтрихкод);
	Запрос.УстановитьПараметр("ПоследнийКод", ПоследнийШтрихкод);
	
	Если ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13 Тогда
		
		КоличествоСимволовВКоде = 13;
		
	Иначе
		
		КоличествоСимволовВКоде = СтрДлина(ПервыйШтрихкод);
		
	КонецЕсли; 

	Запрос.Текст   = СтрЗаменить(Запрос.Текст,"200", Формат(КоличествоСимволовВКоде, "ЧГ=0"));
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	    	
	ПроверитьТаблицу(ТаблицаЗапроса, КоличествоСимволовВКоде);
	
	ТаблицаШтриховыхКодов.Загрузить(ТаблицаЗапроса);
	
	Возврат ТаблицаЗапроса.Количество();

КонецФункции

// Нулевой диапазон
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//   Строка состоящая из нулей
//
&НаСервере
Функция ПолучитьПредставлениеНулевогоДиапазона()

	Диапазон = "";
	Для Индекс = 1 По КоличествоСимволов Цикл
		
		Диапазон = Диапазон + "0";
		
	КонецЦикла;
	
	Возврат Диапазон;

КонецФункции

// Рассчитывает первый и последний магнитный код
//
// Параметры:
//  Нет
//
&НаСервере
Процедура РассчитатьМагнитныеКоды()
	
	КоличествоСимволовКода     = СтрДлина(Префикс) + КоличествоСимволов + СтрДлина(Постфикс);
	ЕстьОшибкиПоМагнитнымКодам = Истина;
	
	Если КоличествоСимволовКода > 200 Тогда
		
		ПервыйМагнитныйКод    = "Количество символов превышает допустимое значение 200";
		ПоследнийМагнитныйКод = "Количество символов превышает допустимое значение 200";
		
	Иначе
		
		Если НачалоДиапазона > 0  Тогда
			
			ПервыйМагнитныйКод = Префикс + Формат(НачалоДиапазона, "ЧЦ=" + Строка(КоличествоСимволов) + "; ЧВН=; ЧГ=0")+ Постфикс;
			
		Иначе
			
			ПервыйМагнитныйКод = Префикс + ПолучитьПредставлениеНулевогоДиапазона() + Постфикс;
			
		КонецЕсли; 
		
		Если КоличествоСертификатов > 0 Тогда
			
			Если СтрДлина(Формат(КоличествоСертификатов, "ЧГ=0")) > КоличествоСимволов Тогда
				
				ПоследнийМагнитныйКод = "Код не может быть сформирован";
				
			Иначе
				
				ПоследнийМагнитныйКод = Префикс + Формат(НачалоДиапазона + КоличествоСертификатов - 1, "ЧЦ=" + Строка(КоличествоСимволов) + "; ЧВН=; ЧГ=0")+ Постфикс;
				ЕстьОшибкиПоМагнитнымКодам = Ложь;
				
			КонецЕсли;
			
		Иначе
			
			ПоследнийМагнитныйКод = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//Рассчитывает штрихкоды
//
&НаСервере
Процедура РассчитатьШтрихкод()
	
	ЕстьОшибкиПоШтрихКодам = Ложь;
	
	Если (КоличествоСертификатов > 0) И ЗначениеЗаполнено(ПервыйШтрихкод) Тогда
		
		Если ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13 Тогда
			
			Если СтрДлина(ПервыйШтрихкод)>=12 Тогда
				
				Штрихкод = Лев(ПервыйШтрихкод,12);
				
			Иначе
				
				ЕстьОшибкиПоШтрихКодам = Истина;
				
			КонецЕсли;
			
		Иначе
			
			ШтрихКод = ПервыйШтрихкод;
			
		КонецЕсли;
		
		Если НЕ ЕстьОшибкиПоШтрихКодам Тогда
			
			ДлинаЧисловойЧасти = ПолучитьДлинуЧисловойЧасти(ШтрихКод);
			
			Если ДлинаЧисловойЧасти = СтрДлина(Штрихкод) Тогда
				// Полностью числовой штрихкод
				ЧислоПервогоШтрихКода = Число(Штрихкод);
				ЧислоПоследнегоШтрихКода = ЧислоПервогоШтрихКода + КоличествоСертификатов - 1;
				
				Если (ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13 
				   И (СтрДлина(Формат(ЧислоПоследнегоШтрихКода, "ЧГ=0")) > 12))
				   ИЛИ ЧислоПоследнегоШтрихКода = 0 Тогда
					
					ЕстьОшибкиПоШтрихКодам = Истина;
					
				Иначе
					
					Если СтрДлина(Формат(ЧислоПоследнегоШтрихКода, "ЧГ=0")) > ДлинаЧисловойЧасти Тогда
						
						ЕстьОшибкиПоШтрихКодам = Истина;
						
					Иначе
						
						ПоследнийШтрихкод = Формат(ЧислоПоследнегоШтрихКода, "ЧЦ=" + ДлинаЧисловойЧасти + "; ЧВН=; ЧГ=0")
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13 Тогда
				
				ЕстьОшибкиПоШтрихКодам = Истина;
				
			ИначеЕсли ДлинаЧисловойЧасти = 0 Тогда
				
				ЕстьОшибкиПоШтрихКодам = Истина;
				
			Иначе
				
				ЧислоПервогоШтрихКода = Число(Прав(Штрихкод, ДлинаЧисловойЧасти));
				ЧислоПоследнегоШтрихКода = ЧислоПервогоШтрихКода + КоличествоСертификатов -1;
				
				Если СтрДлина(Формат(ЧислоПоследнегоШтрихКода, "ЧГ=0")) > ДлинаЧисловойЧасти Тогда
					
					ЕстьОшибкиПоШтрихКодам = Истина;
					
				Иначе
					
					ПоследнийШтрихкод = Лев(Штрихкод,СтрДлина(Штрихкод) - ДлинаЧисловойЧасти) + Формат(ЧислоПоследнегоШтрихКода, "ЧЦ=" + ДлинаЧисловойЧасти + "; ЧВН=; ЧГ=0");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьОшибкиПоШтрихКодам Тогда
			
			ПоследнийШтрихкод = "Штрихкод не может быть сформирован";
			
		ИначеЕсли  ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13 Тогда
			
			ПоследнийШтрихкод = ПоследнийШтрихкод + ПодключаемоеОборудованиеРТ.КонтрольныйСимволEAN(ПоследнийШтрихкод, 13)
			
		КонецЕсли; 
		
	Иначе
		
		ПоследнийШтрихкод = "";
		ЕстьОшибкиПоШтрихКодам = Истина;
		
	КонецЕсли;
    	
КонецПроцедуры

// Получает длину числовой части Штрих кода
//
// Параметры
//  ШтрихКод - строка в которой находим максмальную длину числовой части
//
// Возвращаемое значение:
//  Число
//
&НаСервере
Функция ПолучитьДлинуЧисловойЧасти(ШтрихКод)
	
	ДлинаШтрихкода = СтрДлина(ШтрихКод);
	
	Если ДлинаШтрихкода > 0  Тогда
		
		ДлинаЧисловойЧасти = 0;
		
		Для Индекс = 1  По ДлинаШтрихкода Цикл
			СимволШтрихКода = Сред(Штрихкод, ДлинаШтрихкода - Индекс + 1, 1);
			
			Если СтрНайти("0123456789",СимволШтрихКода) > 0 Тогда
				
				ДлинаЧисловойЧасти = ДлинаЧисловойЧасти + 1;
				
			Иначе
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат ДлинаЧисловойЧасти;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

//Процедура выполняет проверку на существование 
//пересечения формируемого диапазона и существующих
//серийных номеров
//Возвращаемое значение - Булево - РезультатПроверки
&НаСервере
Функция НайтиПересеченияКодов()
	
	ПроверкаПройдена = Истина;
	
	Если ЕстьМагнитныеКоды 
		И НайтиСуществующиеМагнитныеКоды() > 0 Тогда
			
		ПроверкаПройдена = Ложь;
					
	КонецЕсли;
		
	Если ЕстьШтрихкоды 
		И НайтиСуществующиеШтрихКоды() > 0 Тогда
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;
		
	Возврат ПроверкаПройдена;
		
КонецФункции

// Создает сертификаты
//
// Параметры;
//  ПроверкаПройдена - Булево, 
//  Признак наличия пересечения диапазонов
// Возвращаемое значение - Число - Число созданных сертификатов
//
&НаСервере
Функция СоздатьСертификаты(ПроверкаПройдена = Истина)
    	
	Создано = 0;
	
	Если ЕстьШтрихкоды Тогда
		
		Если ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13 Тогда
			
			Штрихкод = Лев(ПервыйШтрихкод,12);
			ЧислоПервогоШтрихКода = Число(Штрихкод);
			
		Иначе
			
			Штрихкод = Лев(ПервыйШтрихкод,12);
			ДлинаЧисловойЧасти = ПолучитьДлинуЧисловойЧасти(ШтрихКод);
			ЧислоПервогоШтрихКода = Число(Прав(Штрихкод, ДлинаЧисловойЧасти));
			ПрефиксШтрихКода = Лев(Штрихкод,СтрДлина(Штрихкод) - ДлинаЧисловойЧасти);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	ТекстСообщения = "";
		
	Для Счетчик = 1 По КоличествоСертификатов Цикл
		
		Если ЕстьМагнитныеКоды Тогда
			
			Если (НачалоДиапазона + Счетчик -1) > 0  Тогда
				
				ТекушийМагнитныйКод = Префикс + Формат(НачалоДиапазона + Счетчик -1, "ЧЦ=" + Строка(КоличествоСимволов) + "; ЧВН=; ЧГ=0")+ Постфикс;
				
			Иначе
				
				ТекушийМагнитныйКод = Префикс + ПолучитьПредставлениеНулевогоДиапазона() + Постфикс;
				
			КонецЕсли; 
			
			Если Не ПроверкаПройдена Тогда
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("КодКарты",ТекушийМагнитныйКод);
				МассивСтрок = ТаблицаМагнитныхКодов.НайтиСтроки(СтруктураПоиска);
				
				Если МассивСтрок.Количество() > 0 Тогда
					
					ТекстСообщения = ТекстСообщения + 
									 СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не создан номер подарочного сертификата %1'"), ТекушийМагнитныйКод) + 
									 Символы.ПС; 
									 
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущийШтрихкод = "";
		
		Если ЕстьШтрихкоды Тогда
			
			Если ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13 Тогда
				
				ЧислоТекушегоШтрихКода = ЧислоПервогоШтрихКода + Счетчик - 1;
				ТекущийШтрихкод        = Формат(ЧислоТекушегоШтрихКода, "ЧЦ=12; ЧВН=; ЧГ=0");
				ТекущийШтрихкод        = ТекущийШтрихкод + ПодключаемоеОборудованиеРТ.КонтрольныйСимволEAN(ТекущийШтрихкод, 13);
				
			Иначе //CODE39
				
				ЧислоТекушегоШтрихКода = ЧислоПервогоШтрихКода + Счетчик -1;
				ТекущийШтрихкод        = ПрефиксШтрихКода + Формат(ЧислоТекушегоШтрихКода, "ЧЦ=" + ДлинаЧисловойЧасти + "; ЧВН=; ЧГ=0");
				
			КонецЕсли;
			
			Если Не ПроверкаПройдена Тогда
				
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("КодКарты",ТекущийШтрихкод);
				МассивСтрок = ТаблицаШтриховыхКодов.НайтиСтроки(СтруктураПоиска);
				
				Если МассивСтрок.Количество() > 0 Тогда
                									
					ТекстСообщения = ТекстСообщения + 
									 СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не создан номер подарочного сертификата с штрихкодом %1'"), ТекущийШтрихкод) + 
									 Символы.ПС; 
									
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НачатьТранзакцию();
		
		
		Попытка
			
			
			СерийныйНомер          = Справочники.СерийныеНомера.СоздатьЭлемент();
			СерийныйНомер.Владелец = Номенклатура;
			
			Если ЕстьМагнитныеКоды Тогда
				
				СерийныйНомер.КодСерийногоНомера = ТекушийМагнитныйКод;
				СерийныйНомер.Наименование       = ТекушийМагнитныйКод;
				
			Иначе
				
				СерийныйНомер.Наименование       = ТекущийШтрихкод;
				
			КонецЕсли;
			
			СерийныйНомер.Записать();
			
			Если ЕстьШтрихкоды Тогда
				
				ЗаписьШтрихкода              = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
				ЗаписьШтрихкода.Владелец     = СерийныйНомер.Ссылка;
				ЗаписьШтрихкода.ТипШтрихкода = ТипШтрихкода;
				ЗаписьШтрихкода.Штрихкод     = ТекущийШтрихкод;
				
				Отказ = НЕ ЗаписьШтрихкода.ПроверитьЗаполнение();
				Если НЕ Отказ  Тогда
					ЗаписьШтрихкода.Записать(Истина);
				Иначе
					ВызватьИсключение НСтр("ru = 'Даблирование штрихкодов'");
				КонецЕсли;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации("ru = 'Запасы и закупки. Создание сертификатов'", УровеньЖурналаРегистрации.Ошибка,,, ИнформацияОбОшибке());
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецПопытки;
		
		Создано = Создано + 1;
				
	КонецЦикла;
	
	Возврат Создано;

КонецФункции

// Выбрать диапазон номеров в документ
//
// Параметры:
//  Нет
// Возвращаемое значение - Булево - Формируемый диапазон не пустой
&НаСервере
Функция ВыбратьДиапазон()

	Если ЕстьМагнитныеКоды И НЕ ЕстьОшибкиПоМагнитнымКодам Тогда
	
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	СерийныеНомера.КодСерийногоНомера КАК КодКарты,
		|	СерийныеНомера.Ссылка Как Карта
		|ИЗ
		|	Справочник.СерийныеНомера КАК СерийныеНомера
		|ГДЕ
		|	СерийныеНомера.КодСерийногоНомера >= &ПервыйКод
		|	И СерийныеНомера.КодСерийногоНомера <= &ПоследнийКод
		|	И (ВЫРАЗИТЬ(СерийныеНомера.КодСерийногоНомера КАК СТРОКА(200))) = СерийныеНомера.КодСерийногоНомера
		|	И СерийныеНомера.Владелец = &Номенклатура");
		
		Запрос.УстановитьПараметр("ПервыйКод",    ПервыйМагнитныйКод);
		Запрос.УстановитьПараметр("ПоследнийКод", ПоследнийМагнитныйКод);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		КоличествоСимволовВКоде = СтрДлина(ПервыйМагнитныйКод);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"200", Формат(КоличествоСимволовВКоде, "ЧГ=0"));
		Результат = Запрос.Выполнить();
		ТаблицаЗапроса = Результат.Выгрузить();
		ПроверитьТаблицу(ТаблицаЗапроса, КоличествоСимволовВКоде);
				
	КонецЕсли;
	
	Если ЕстьШтрихкоды И НЕ ЕстьОшибкиПоШтрихКодам  Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Штрихкоды.Владелец КАК Карта,
		|	Штрихкоды.Штрихкод КАК КодКарты
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод >= &ПервыйКод
		|	И Штрихкоды.Штрихкод <= &ПоследнийКод
		|	И (ВЫРАЗИТЬ(Штрихкоды.Штрихкод КАК СТРОКА(200))) = Штрихкоды.Штрихкод
		|	И Штрихкоды.Владелец.Владелец = &Номенклатура");
		
		Запрос.УстановитьПараметр("ПервыйКод", ПервыйШтрихкод);
		Запрос.УстановитьПараметр("ПоследнийКод", ПоследнийШтрихкод);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		Если ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13 Тогда
			КоличествоСимволовВКоде = 13;
		Иначе
			КоличествоСимволовВКоде = СтрДлина(ПервыйШтрихкод);
		КонецЕсли; 

		Запрос.Текст = СтрЗаменить(Запрос.Текст,"200", Формат(КоличествоСимволовВКоде, "ЧГ=0"));
		
		Результат = Запрос.Выполнить();
		ТаблицаЗапроса = Результат.Выгрузить();
		
		ПроверитьТаблицу(ТаблицаЗапроса, КоличествоСимволовВКоде);
		
	КонецЕсли;
	
	АдресСерийныхНомеровВХранилище = ПоместитьВоВременноеХранилище(СписокСерийныхНомеров.ВыгрузитьЗначения());
	
	Возврат СписокСерийныхНомеров.Количество() > 0;
	
КонецФункции

//Процедура - обработчик события "ПриИзменении" поля "ПервыйШтрихкод" на сервере
//
&НаСервере
Процедура ПриИзмененииПервыйШтрихкод()
	
	Если ПодключаемоеОборудованиеРТ.ТипШтрихкодаEAN13(ПервыйШтрихкод) Тогда
		
		ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
		
	КонецЕсли;
	
	РассчитатьШтрихкод();
	
КонецПроцедуры

//Процедура - обработчик события "ПриИзменении" поля "КоличествоСертификатов" на сервере
//
&НаСервере
Процедура ПриИзмененииКоличествоСертификатов()
	
	Если ЕстьШтрихкоды Тогда
		
		РассчитатьШтрихкод();
		
	КонецЕсли;
	
	Если ЕстьМагнитныеКоды Тогда
		
		РассчитатьМагнитныеКоды();
		
	КонецЕсли;	
	
КонецПроцедуры

//Процедура печати макета "ПроверкаИспользуемыхКодов"
//Вызывается после завершения проверок при наличии пересечения кодов
&НаКлиенте
Процедура ПечатьПроверкиИспользуемыхКодов()
			
	СтруктураТаблиц = Новый Структура;
	
	Если ТаблицаМагнитныхКодов.Количество() > 0 Тогда
		
		СтруктураТаблиц.Вставить("ТаблицаМагнитныхКодов",ТаблицаМагнитныхКодов);
		
	КонецЕсли;	
	
	Если ТаблицаШтриховыхКодов.Количество() > 0 Тогда
		
		СтруктураТаблиц.Вставить("ТаблицаШтриховыхКодов",ТаблицаШтриховыхКодов);
		
	КонецЕсли;	
	
	ПараметрКоманды = Новый Массив;   
	ПараметрКоманды.Добавить(Объект); 
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Обработка.ЗаполнениеДиапазонаСерийныхНомеров", // Для вызова метода менеджера обработки "Печать".
		"ПроверкаИспользуемыхКодов",
		ПараметрКоманды,
		ЭтотОбъект, 
		Новый Структура("СтруктураТаблиц",СтруктураТаблиц)
		);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьОбщуюВозможностьСозданияСертификатов()
	
	ПроверкаПройдена = Истина;
	Если ЕстьОшибкиПоМагнитнымКодам Тогда
		ПроверкаПройдена = Ложь;
		Сообщить(НСтр("ru = 'Нет возможности создания сертификатов с магнитными (символьными) кодами'"));
	КонецЕсли;
	
	Если ЕстьОшибкиПоШтрихКодам Тогда
		ПроверкаПройдена = Ложь;
		Сообщить(НСтр("ru = 'Нет возможности создания сертификатов с штриховыми кодами'"));
	КонецЕсли;
	
	Возврат ПроверкаПройдена;
	
КонецФункции
