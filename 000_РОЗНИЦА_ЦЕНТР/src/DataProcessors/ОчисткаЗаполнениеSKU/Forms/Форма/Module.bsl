               
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Режим = "ОчисткаSKU";
	УстановитьРежим();
	
	НижняяГраницаДиапазонаSKUВесовогоТовара  = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("НижняяГраницаДиапазонаSKUВесовогоТовара");
	ВерхняяГраницаДиапазонаSKUВесовогоТовара = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВерхняяГраницаДиапазонаSKUВесовогоТовара");
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	Элементы.ТоварыХарактеристика.Видимость =  ИспользоватьХарактеристикиНоменклатуры;
	Элементы.ТоварыУпаковка.Видимость       =  ИспользоватьУпаковкиНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ВидимостьОтбора = Настройки.Получить("ВидимостьОтбора");
	Элементы.ГруппаОтбор.Видимость = ВидимостьОтбора;
	Элементы.Отбор.Заголовок = ?(ВидимостьОтбора, НСтр("ru = 'Скрыть отбор'"), НСтр("ru = 'Показать отбор'"));
	
	РежимНастроек = Настройки.Получить("Режим");
	Если НЕ ПустаяСтрока(РежимНастроек) Тогда
		Режим = РежимНастроек;
	КонецЕсли;
	
	Если ПустаяСтрока(Режим) Тогда
		Режим = "ОчисткаSKU";
		Настройки["Режим"] = Режим;
	КонецЕсли;
	
	УстановитьРежим();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ДоступностьРаботыСКодамиТоваровSKU() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Создание и удаление SKU осуществляется в главном узле РИБ'"));
		Отказ = Истина;
	КонецЕсли;   

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьИсправитьОчиститьSKU(Команда)
	
	ЕстьОшибки = Ложь;
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Таблица ""Товары"" не заполнена'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.Товары",,ЕстьОшибки);
		
	КонецЕсли;
	
	Если ЕстьОшибки Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
			НСтр("ru='Изменение кодов SKU:'"),
			,
			НСтр("ru='Начато изменение кодов SKU.'"),
			БиблиотекаКартинок.Информация32);
			
	SKUИзменены = ИзменитьКодыSKU();
	
	ЗаполнитьТаблицуТоваровСервер();
	
	Если SKUИзменены Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru='Изменение кодов SKU:'"),
			,
			НСтр("ru='Коды SKU успешно изменены.'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОтбор(Команда)
	
	ВидимостьОтбора = НЕ ВидимостьОтбора;
	Элементы.ГруппаОтбор.Видимость = ВидимостьОтбора;
	Элементы.Отбор.Заголовок = ?(ВидимостьОтбора, НСтр("ru = 'Скрыть отбор'"), НСтр("ru = 'Показать отбор'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимОчисткаSKU(Команда)
	
	Режим = "ОчисткаSKU";
	УстановитьРежим();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимЗаполнениеSKU(Команда)
	
	Режим = "ЗаполнениеSKU";
	УстановитьРежим();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Заполняет таблицу "Товары" данными в зависимости 
//от выбранного режима работы обработки
&НаСервере
Процедура ЗаполнитьТаблицуТоваровСервер()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
		
	ОбязательныеПоля = Новый Массив;
	ОбязательныеПоля.Добавить("SKU");
	ОбязательныеПоля.Добавить("Номенклатура");
	ОбязательныеПоля.Добавить("Выбран");
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		ОбязательныеПоля.Добавить("Упаковка");
	КонецЕсли;
	
	ПараметрыДанных = Новый Структура;   
	ПараметрыДанных.Вставить("ВерхняяГраницаДиапазонаSKUВесовогоТовара", ВерхняяГраницаДиапазонаSKUВесовогоТовара);
	ПараметрыДанных.Вставить("НижняяГраницаДиапазонаSKUВесовогоТовара",  НижняяГраницаДиапазонаSKUВесовогоТовара);
				
	Объект.Товары.Очистить();
		
	ТаблицаТоваров = ПодготовитьСтруктуруДанных(ОбязательныеПоля, ПараметрыДанных);
	
	Для Каждого СтрокаТЧ Из ТаблицаТоваров Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
		НоваяСтрока.SKU          = СтрокаТЧ.SKU;
		НоваяСтрока.Весовой      = СтрокаТЧ.Весовой;
		НоваяСтрока.ОшибкаУпаковки       = СтрокаТЧ.ОшибкаУпаковки;
		НоваяСтрока.ОшибкаХарактеристики = СтрокаТЧ.ОшибкаХарактеристики;
		НоваяСтрока.ОшибкаДиапазона      = СтрокаТЧ.ОшибкаДиапазона;

		Если ИспользоватьХарактеристикиНоменклатуры Тогда
			НоваяСтрока.Характеристика = СтрокаТЧ.Характеристика;
		КонецЕсли;
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			НоваяСтрока.Упаковка = СтрокаТЧ.Упаковка;
		КонецЕсли;
		
		Если Режим = "ЗаполнениеSKU" Тогда  
			НоваяСтрока.Выбран = (ПустаяСтрока(НоваяСтрока.SKU) ИЛИ НоваяСтрока.SKU = 0);
		Иначе
			НоваяСтрока.Выбран = НЕ (ПустаяСтрока(НоваяСтрока.SKU) ИЛИ НоваяСтрока.SKU = 0);
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.Товары.Обновить();
	
КонецПроцедуры

// Функция формирует таблицу товаров для дальнейшей обработки
// Параметры: 
// ОбязательныеПоля - Массив - Массив имён обязательных полей
// ПараметрыДанных - Структура - Структура с ключами - именами параметров СКД и значениями параметров в значениях структуры
// Возвращаемое значение: 
// ТаблицаТоваров - ТаблицаЗначений
&НаСервере
Функция ПодготовитьСтруктуруДанных(ОбязательныеПоля, ПараметрыДанных)  
	
	СхемаКомпоновкиДанных = Обработки.ОчисткаЗаполнениеSKU.ПолучитьМакет("СписокКодовSKU");
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
	//удаление невалидных отборов
	Количество = КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество();
	Для Индекс = 1 По Количество Цикл
		ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы[Количество - Индекс];
		ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Если КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Если КомпоновщикНастроек <> Неопределено Тогда
		ОбщегоНазначенияРТКлиентСервер.СкопироватьЭлементы(Компоновщик.Настройки.Отбор, КомпоновщикНастроек.Настройки.Отбор);
	КонецЕсли;
		
	Для Каждого ОбязательноеПоле Из ОбязательныеПоля Цикл
		ПолеСКД = НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле);
		Если ПолеСКД <> Неопределено Тогда
			ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ПолеСКД.Поле;
		КонецЕсли;
	КонецЦикла;
	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Параметр = МакетКомпоновкиДанных.ЗначенияПараметров.Найти("ВерхняяГраницаДиапазонаSKUВесовогоТовара");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ВерхняяГраницаДиапазонаSKUВесовогоТовара;
	КонецЕсли;
	
	Параметр = МакетКомпоновкиДанных.ЗначенияПараметров.Найти("НижняяГраницаДиапазонаSKUВесовогоТовара");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = НижняяГраницаДиапазонаSKUВесовогоТовара;
	КонецЕсли;

	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;       
					
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаТоваров;

КонецФункции

// Процедура устанавливает режим работы обработки
//
&НаСервере
Процедура УстановитьРежим()
	
	Если Режим = "ОчисткаSKU" Тогда                        
		
		Элементы.ЗаполнитьИсправитьОчиститьSKU.Заголовок = НСтр("ru = 'Очистить SKU'");
		
	ИначеЕсли Режим = "ЗаполнениеSKU" Тогда
		
		Элементы.ЗаполнитьИсправитьОчиститьSKU.Заголовок = НСтр("ru = 'Заполнить SKU'");
		
	КонецЕсли;
	
	ЗагрузитьНастройкиОтбора();
	
КонецПроцедуры

// Обрабатывает коды SKU по одному из сценариев:
// -Очистка SKU
// -Заполнение SKU
// Возвращаемое значение:
// SKUИзменены - Булево - признак успешного выполнения сценария
&НаСервере
Функция ИзменитьКодыSKU()

	SKUИзменены     = Истина;
	ЗакончилисьSKU = Ложь;
	НачатьТранзакцию();
	
	Попытка
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Изменение кодов SKU. Начало изменения кодов SKU'"), УровеньЖурналаРегистрации.Информация, , ,НСтр("ru = 'Начато действие'"));
		
		Если Режим = "ЗаполнениеSKU" Тогда 
			
			ВерхняяГраница = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВерхняяГраницаДиапазонаSKUВесовогоТовара");
			НижняяГраница  = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("НижняяГраницаДиапазонаSKUВесовогоТовара");
			
			ВесовойSKU = РегистрыСведений.КодыТоваровSKU.ПолучитьМаксимальныйКодSKU(Истина, НижняяГраница, ВерхняяГраница);
			ШтучныйSKU = РегистрыСведений.КодыТоваровSKU.ПолучитьМаксимальныйКодSKU(Ложь, НижняяГраница, ВерхняяГраница);
			
			Для каждого СтрокаТЧ Из Объект.Товары Цикл
				
				Если НЕ СтрокаТЧ.Выбран Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.SKU) ИЛИ (СтрокаТЧ.SKU = 0) Тогда
					
					Если СтрокаТЧ.Весовой Тогда
						СтрокаТЧ.SKU = ВесовойSKU; 
						ВесовойSKU = ВесовойSKU + 1;
					Иначе
						СтрокаТЧ.SKU = ШтучныйSKU; 
						ШтучныйSKU = ШтучныйSKU + 1;
					КонецЕсли;   
					
					РегистрыСведений.КодыТоваровSKU.ЗаписатьSKU(СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика, СтрокаТЧ.Упаковка, СтрокаТЧ.SKU);
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли Режим = "ОчисткаSKU" Тогда
			Для каждого СтрокаТЧ Из Объект.Товары Цикл
				Если СтрокаТЧ.Выбран Тогда
					РегистрыСведений.КодыТоваровSKU.УдалитьSKU(СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика, СтрокаТЧ.Упаковка, СтрокаТЧ.SKU);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗакончилисьSKU Тогда
			ВызватьИсключение  НСтр("ru = 'Закончились доступные SKU коды товара. 
			|Операция не завершена.'");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
 	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Изменение кодов SKU'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		SKUИзменены = Ложь;
	КонецПопытки;
	
	Объект.Товары.Очистить();
	
	Возврат SKUИзменены;
	
КонецФункции

// Среди элементов полей СКД найти поле по имени.
//
&НаСервере
Функция НайтиПолеСКДПоИмени(Элементы, Имя)
	
	Для Каждого Элемент Из Элементы Цикл
		Если ВРЕГ(Строка(Элемент.Поле)) = ВРЕГ(Имя) Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Найти поле СКД по полному имени.
//
&НаСервере
Функция НайтиПолеСКДПоПолномуИмени(Элементы, ПолноеИмя) Экспорт

	масЧастейИмен = ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя);
	колЧастей = масЧастейИмен.Количество();
	
	текИмя = масЧастейИмен[0];
	Поле = НайтиПолеСКДПоИмени(Элементы, текИмя);
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Сч = 2 По колЧастей Цикл
		текИмя = текИмя +"." + масЧастейИмен[Сч-1];
		Поле = НайтиПолеСКДПоИмени(Поле.Элементы, текИмя);
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Поле;

КонецФункции

// Полное имя поля разделить по частям
//
&НаСервере
Функция ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя)

	масЧастей = Новый Массив;
	СтрИмя = ПолноеИмя;
	
	Пока Не ПустаяСтрока(СтрИмя) Цикл
		Если Лев(СтрИмя, 1) = "[" Тогда
			
			Поз = Найти(СтрИмя, "]");
			Если Поз = 0 Тогда
				масЧастей.Добавить(Сред(СтрИмя, 2));
				СтрИмя = "";
			Иначе
				масЧастей.Добавить(Сред(СтрИмя, 1, Поз));
				СтрИмя = Сред(СтрИмя, Поз + 2);
			КонецЕсли;
			
		Иначе
			
			Поз = Найти(СтрИмя, ".");
			Если Поз = 0 Тогда
				масЧастей.Добавить(СтрИмя);
				СтрИмя = "";
			Иначе
				масЧастей.Добавить(Лев(СтрИмя, Поз - 1));
				СтрИмя = Сред(СтрИмя, Поз + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат масЧастей;

КонецФункции

&НаСервере
Функция ДоступностьРаботыСКодамиТоваровSKU();
	Доступность = НЕ ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("SKUУстанавливаетсяВГлавномУзлеРИБ")
	              ИЛИ (ОбменДаннымиПовтИсп.ГлавныйУзел() = Неопределено);
	Возврат Доступность;  
КонецФункции       

// Процедура выполняет загрузку настроек отбора из настроек по умолчанию.
//
&НаСервере
Процедура ЗагрузитьНастройкиОтбора()
	
	СхемаКомпоновкиДанных = Обработки.ОчисткаЗаполнениеSKU.ПолучитьМакет("СписокКодовSKU");
	
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтотОбъект.УникальныйИдентификатор))
	);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.Выбран = Истина;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.Выбран = Ложь;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуТоваров(Команда)
	
	Состояние(НСтр("ru = 'Выполняется обновление данных...'"));
	
	ЗаполнитьТаблицуТоваровСервер();
	
КонецПроцедуры
