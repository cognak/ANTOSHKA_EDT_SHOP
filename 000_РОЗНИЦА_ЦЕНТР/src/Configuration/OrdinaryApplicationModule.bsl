////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем глОбщиеЗначения Экспорт;

// ПодключаемоеОборудование
Перем глПодключаемоеОборудование	Экспорт; // для кэширования на клиенте
Перем глТипыОборудования			Экспорт; //	LNK 04.01.2018 14:08:03
//Конец ПодключаемоеОборудование

// СтандартныеПодсистемы

// СтандартныеПодсистемы.БазоваяФункциональность

// СписокЗначений для накапливания пакета сообщений в журнал регистрации, 
// формируемых в клиентской бизнес-логике.
Перем СообщенияДляЖурналаРегистрации Экспорт; 
// Признак того, что в данном сеансе не нужно повторно предлагать установку
Перем ПредлагатьУстановкуРасширенияРаботыСФайлами Экспорт;
// Признак того, что в данном сеансе не нужно запрашивать стандартное подтверждение при выходе
Перем ПропуститьПредупреждениеПередЗавершениемРаботыСистемы Экспорт;
// Структура параметров для клиентской логики по завершению работы в программе.
Перем ПараметрыРаботыКлиентаПриЗавершении Экспорт;
// Признак того, что при запуске в сеансе администратора нужно вывести форму описаний изменений.
Перем ВывестиОписаниеИзмененийДляАдминистратора Экспорт;
// Структура, содержащая в себе время начала и окончания обновления программы.
Перем ПараметрыРаботыКлиентаПриОбновлении Экспорт;

// Конец СтандартныеПодсистемы.БазоваяФункциональность

// СтандартныеПодсистемы.ЗавершениеРаботыПользователей
Перем РаботаПользователейЗавершается Экспорт;
// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей

// ОбновлениеКонфигурации

// Информация о доступном обновлении конфигурации, обнаруженном в Интернете
// при запуске программы.
Перем ДоступноеОбновлениеКонфигурации Экспорт;
// Структура с параметрами помощника обновления конфигурации.
Перем НастройкиОбновленияКонфигурации Экспорт; 
// Признак необходимости обновления конфигурации информационной базы при завершении сеанса.
Перем ПредлагатьОбновлениеИнформационнойБазыПриЗавершенииСеанса Экспорт;
// Конец ОбновлениеКонфигурации

// РаботаСФайлами
Перем КомпонентаTwain Экспорт; // Twain компонента для работы со сканером
// Конец РаботаСФайлами

// ФайловыеФункции
Перем ПроверкаДоступаКРабочемуКаталогуВыполнена Экспорт; // Кэшируется, чтобы в данном сеансе повторно не делать проверку доступа к каталогу на диске
// Конец ФайловыеФункции

// РезервноеКопированиеИБ

// Параметры для резервного копирования
Перем ПараметрыРезервногоКопированияИБ Экспорт;

// Признак выполнения резервного копирования при завершении сеанса
Перем ОповещатьОРезервномКопированииПриЗавершенииСеанса Экспорт;
// структура с параметрами доступа к ИБ при отложенном копировании
Перем ПараметрыАдминистратораОбновления Экспорт;
// максимальная дата отложенного резервного копирования
Перем ДатаОтложенногоРезервногоКопирования Экспорт;

// Конец РезервноеКопированиеИБ

// Конец СтандартныеПодсистемы

// МаркетинговыеАкции

Перем ПорядковыйНомерПродажи Экспорт;

// Конец МаркетинговыеАкции

Перем КомпонентаСклонения Экспорт;

//	LNK 23.11.2017 14:07:46
Перем ЗапрашиватьПодтверждениеПриЗавершенииПрограммы	Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


// Процедура проверки необходимости сбросить пароль пользователя
//
Процедура ПроверкаНаСбросПароля()
	
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если ПустаяСтрока(ПользовательИБ.Имя) Тогда //это пользователь по умолчанию
		Возврат;
	КонецЕсли;
	
	ПарольУстановлен = ПользовательИБ.ПарольУстановлен;
	
	//если в хранилище пароль не установлен, а у пользователя установлен
	Если Не ПарольУстановлен Тогда
		
		Если ПользовательИБ.ЗапрещеноИзменятьПароль Тогда
			ПоказатьПредупреждение(, "У текущего пользователя отсутствует пароль, но смена пароля запрещена!
			|Сеанс будет завершен.", 20);
			ЗавершитьРаботуСистемы(Ложь);
			Возврат;
		КонецЕсли;
		
		НовыйПароль = ПолучитьОбщуюФорму("ФормаСменыПароля").ОткрытьМодально();
		
		Если ПустаяСтрока(НовыйПароль) Тогда
			ЗавершитьРаботуСистемы(Ложь);
			Возврат;
		КонецЕсли;
			
		ПользовательИБ.Пароль = НовыйПароль;
		ПользовательИБ.Записать();
		
		ПоказатьПредупреждение(, "Пароль был успешно изменен!", 10);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СИСТЕМЫ

Процедура ПередНачаломРаботыСистемы(Отказ) 
	
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ДействияПередНачаломРаботыСистемы(Отказ);
	
	// Конец СтандартныеПодсистемы
	
КонецПроцедуры

// Процедура выполняется перед нначалом работы системы
//
Процедура ПриНачалеРаботыСистемы()
		
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ДействияПриНачалеРаботыСистемы(Истина);
	// Конец СтандартныеПодсистемы
	
	// МаркетинговыеАкции
	
	ОбщегоНазначенияРТКлиент.ПроинициализироватьКомпонентуСклонения();
	
	ПорядковыйНомерПродажи = 1;
	
	ТекущийПользователь      = ПользователиИнформационнойБазы.ТекущийПользователь();
	РежимАдминистрирования   = ПравоДоступа("Администрирование", Метаданные);
	
	ПроверятьПароль = Константы.ПроверятьУстановкуПароляПользователяПриСтарте.Получить();
	
	Если ПроверятьПароль Тогда
		//если пароль пользователя пустой, установим новый пароль
		ПроверкаНаСбросПароля();
		
	КонецЕсли;
		
	Если НЕ (РежимАдминистрирования ИЛИ ЗначениеЗаполнено(ПараметрыСеанса.ТекущийМагазин)) Тогда
		
		МассивМагазиновДоступныхВСеансе = УправлениеПользователями.ПолучитьМассивМагазиновДоступныхВСеансе(Пользователи.ТекущийПользователь());
		Если МассивМагазиновДоступныхВСеансе.Количество() = 0  Тогда
			//пользователю нельзя здесь работать
			ПоказатьПредупреждение(, "Не найдено магазинов, доступных для работы!
					|Приложение будет закрыто.");
			ЗавершитьРаботуСистемы(Ложь);			
		Иначе
			
			ОткрытьФормуМодально("Обработка.ИзменениеТекущегоМагазина.Форма");
			Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ТекущийМагазин) Тогда
				ЗавершитьРаботуСистемы(Ложь);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
		
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.ПриНачалеРаботыСистемы();
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)

	// Подготовить данные
	ОписаниеСобытия = Новый Структура();
	ОписаниеОшибки  = "";

	ОписаниеСобытия.Вставить("Источник", Источник);
	ОписаниеСобытия.Вставить("Событие",  Событие);
	ОписаниеСобытия.Вставить("Данные",   Данные);

	// Передать на обработку данные
	Результат = МенеджерОборудованияКлиент.ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки);
	Если Не Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='При обработке внешнего события от устройства произошла ошибка.'")
		                                                 + Символы.ПС + ОписаниеОшибки);
	КонецЕсли;
    	
КонецПроцедуры // ОбработкаВнешнегоСобытия()

// Процедура выполняется перед заавершением работы системы
//
Процедура ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения)
	
	ЗапрашиватьПодтверждениеПриЗавершенииПрограммы = Ложь;
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ДействияПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения);
	// Конец СтандартныеПодсистемы
	
	Если НЕ Отказ Тогда
		
		// ПодключаемоеОборудование
		МенеджерОборудованияКлиент.ПередЗавершениемРаботыСистемы();
		// Конец ПодключаемоеОборудование
		
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ КЭШИРОВАНИЯ ПЕРЕМЕННЫХ

// Функция возвращает значение экспортных переменных модуля приложений
//
// Параметры
//  Имя - строка, содержит имя переменной целиком 
//
// Возвращаемое значение:
//   значение соответствующей экспортной переменной
Функция глЗначениеПеременной(Имя) Экспорт

	Возврат ОбщегоНазначения_Версия_81.ПолучитьЗначениеПеременной(Имя, глОбщиеЗначения);
	
КонецФункции

// Процедура установки значения экспортных переменных модуля приложения
//
// Параметры
//  Имя - строка, содержит имя переменной целиком
// 	Значение - значение переменной
//
Процедура глЗначениеПеременнойУстановить(Имя, Значение, ОбновлятьВоВсехКэшах = Ложь) Экспорт
	
	ОбщегоНазначения_Версия_81.УстановитьЗначениеПеременной(Имя, глОбщиеЗначения, Значение, ОбновлятьВоВсехКэшах);
	
КонецПроцедуры



