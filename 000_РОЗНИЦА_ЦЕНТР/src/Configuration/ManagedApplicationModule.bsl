////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ


// НА ПЕРИОД ПЕРЕХОДА
Перем глОбщиеЗначения Экспорт;

// КОНЕЦ НА ПЕРИОД ПЕРЕХОДА

// ПодключаемоеОборудование
Перем глПодключаемоеОборудование	Экспорт; // для кэширования на клиенте
Перем глТипыОборудования			Экспорт; //	LNK 04.01.2018 14:08:03

// СтандартныеПодсистемы

// СтандартныеПодсистемы.БазоваяФункциональность

// СписокЗначений для накапливания пакета сообщений в журнал регистрации, 
// формируемых в клиентской бизнес-логике.
Перем СообщенияДляЖурналаРегистрации Экспорт; 
// Признак того, что в данном сеансе не нужно повторно предлагать установку
Перем ПредлагатьУстановкуРасширенияРаботыСФайлами Экспорт;
// Признак того, что в данном сеансе не нужно запрашивать стандартное подтверждение при выходе
Перем ПропуститьПредупреждениеПередЗавершениемРаботыСистемы Экспорт;
// Структура параметров для клиентской логики по завершению работы в программе.
Перем ПараметрыРаботыКлиентаПриЗавершении Экспорт;
// Признак того, что при запуске в сеансе администратора нужно вывести форму описаний изменений.
Перем ВывестиОписаниеИзмененийДляАдминистратора Экспорт;
// Структура, содержащая в себе время начала и окончания обновления программы.
Перем ПараметрыРаботыКлиентаПриОбновлении Экспорт;

// Конец СтандартныеПодсистемы.БазоваяФункциональность

// СтандартныеПодсистемы.ЗавершениеРаботыПользователей
Перем РаботаПользователейЗавершается Экспорт;
// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей

// ОбновлениеКонфигурации

// Информация о доступном обновлении конфигурации, обнаруженном в Интернете
// при запуске программы.
Перем ДоступноеОбновлениеКонфигурации Экспорт;
// Структура с параметрами помощника обновления конфигурации.
Перем НастройкиОбновленияКонфигурации Экспорт; 
// Признак необходимости обновления конфигурации информационной базы при завершении сеанса.
Перем ПредлагатьОбновлениеИнформационнойБазыПриЗавершенииСеанса Экспорт;
// Конец ОбновлениеКонфигурации

// РаботаСФайлами
Перем КомпонентаTwain Экспорт; // Twain компонента для работы со сканером
// Конец РаботаСФайлами

// ФайловыеФункции
Перем ПроверкаДоступаКРабочемуКаталогуВыполнена Экспорт; // Кэшируется, чтобы в данном сеансе повторно не делать проверку доступа к каталогу на диске
// Конец ФайловыеФункции

// РезервноеКопированиеИБ

// Параметры для резервного копирования
Перем ПараметрыРезервногоКопированияИБ Экспорт;

// Признак выполнения резервного копирования при завершении сеанса
Перем ОповещатьОРезервномКопированииПриЗавершенииСеанса Экспорт;
// структура с параметрами доступа к ИБ при отложенном копировании
Перем ПараметрыАдминистратораОбновления Экспорт;
// максимальная дата отложенного резервного копирования
Перем ДатаОтложенногоРезервногоКопирования Экспорт;

// Конец РезервноеКопированиеИБ

// Конец СтандартныеПодсистемы

// МаркетинговыеАкции

Перем ПорядковыйНомерПродажи Экспорт;

// Конец МаркетинговыеАкции

Перем КомпонентаСклонения Экспорт;

//	LNK 23.11.2017 14:07:46
Перем ЗапрашиватьПодтверждениеПриЗавершенииПрограммы	Экспорт;

//	LNK 13.02.2018 10:03:49
Перем ЗапускПослеОбновленияКонфигурации;

Перем  ХэшАктивностиПользователей Экспорт;
Перем  ВремяАктивностиПользователей Экспорт;

#Область ОбработчикиСобытийПриложения

Процедура ПередНачаломРаботыСистемы(Отказ) 

	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ДействияПередНачаломРаботыСистемы(Отказ);	//	обязательно первой строкой!
	// Конец СтандартныеПодсистемы
	
	Если ПользователиСлужебныйВызовСервера.ПользовательНеТребуетАвторизации() Тогда

		ЗапускПослеОбновленияКонфигурации = Ложь;

	Иначе

		ЗапускПослеОбновленияКонфигурации =
			(ПользователиКлиентСервер.ТекущийПользователь() = ПредопределенноеЗначение("Справочник.Пользователи.АдминистраторАвтоматов"))
		И	(НЕ СтрНайти(ПараметрЗапуска, "/UCПакетноеОбновлениеКонфигурацииИБ") = 0);

	КонецЕсли;

//	LNK 04.12.2017 16:39:45
	Если НЕ ЗапускПослеОбновленияКонфигурации И ПользователиСлужебныйВызовСервера.РаботаетНеавторизованныйПользователь() Тогда

		КлиентскоеПриложение.УстановитьРежимОсновногоОкна(РежимОсновногоОкнаКлиентскогоПриложения.Киоск);

	КонецЕсли;
	
	Если НЕ ЗапускПослеОбновленияКонфигурации Тогда

		// ПодключаемоеОборудование
		МенеджерОборудованияКлиент.ПриНачалеРаботыСистемы();
		// Конец ПодключаемоеОборудование

	КонецЕсли;
	
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы()
	
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ДействияПриНачалеРаботыСистемы(Истина);
	// Конец СтандартныеПодсистемы
	
	ОбщегоНазначенияРТКлиент.УстановитьЗаголовокПриложенияРТ();

	Если НЕ ПользователиСлужебныйВызовСервера.ПользовательНеТребуетАвторизации() Тогда

		Если ПользователиКлиентСервер.ТекущийПользователь() = ПредопределенноеЗначение("Справочник.Пользователи.АдминистраторАвтоматов") Тогда

			ЗавершитьРаботуСистемы(Ложь, Ложь);
		//	ПрекратитьРаботуСистемы(Ложь);

		Иначе
			
			ОбщегоНазначенияРТКлиент.ОповеститьОНовыхАкциях();	// -HVOYA. 26.08.2016 11:07:11, Львова Е.А.
			
			// МаркетинговыеАкции
			ПорядковыйНомерПродажи = 1;
			// Конец МаркетинговыеАкции

			ОбщегоНазначенияРТКлиент.ПроинициализироватьКомпонентуСклонения();

			ОбщегоНазначенияРТКлиент.ОткрытьМеню();

		//	Соединение в внешним источником данных (SQL сервер ТСД)
			ТранспортТерминалов.УстановитьСоединение();
			//Если РольДоступна("ЧтениеРаботаСотрудниковКоллЦентра") тогда 
				//АктивностьПользователейКлиент.ВключитьРегистрациюАктивностиПользователя();				
			//КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения)
	
	// СтандартныеПодсистемы - LNK отработать позже
	СтандартныеПодсистемыКлиент.ДействияПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения);
	// Конец СтандартныеПодсистемы
	
	Если НЕ Отказ И НЕ ЗапускПослеОбновленияКонфигурации Тогда

		// ПодключаемоеОборудование
		МенеджерОборудованияКлиент.ПередЗавершениемРаботыСистемы();
		// Конец ПодключаемоеОборудование		

	КонецЕсли;

КонецПроцедуры
	
#КонецОбласти



Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)

	// ПодключаемоеОборудование
	// Подготовить данные
	ОписаниеСобытия = Новый Структура();
	ОписаниеОшибки  = "";

	ОписаниеСобытия.Вставить("Источник", Источник);
	ОписаниеСобытия.Вставить("Событие",  Событие);
	ОписаниеСобытия.Вставить("Данные",   Данные);

//	Передать на обработку данные
	Результат = МенеджерОборудованияКлиент.ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки);

	Если Не Результат Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='При обработке внешнего события от устройства произошла ошибка.'")
		                                                 + Символы.ПС + ОписаниеОшибки);

	КонецЕсли;
	// Конец ПодключаемоеОборудование

КонецПроцедуры

// НА ПЕРИОД ПЕРЕХОДА

// Функция возвращает значение экспортных переменных модуля приложенийа
//
// Параметры
//  Имя - строка, содержит имя переменной целиком 
//
// Возвращаемое значение:
//   значение соответствующей экспортной переменной
Функция глЗначениеПеременной(Имя) Экспорт

//	Возврат ОбщегоНазначения_Версия_81.ПолучитьЗначениеПеременной(Имя, глОбщиеЗначения);
	Возврат ОбщегоНазначенияРТКлиент.ПолучитьЗначениеПеременной(Имя, глОбщиеЗначения);
	
КонецФункции

// Процедура установки значения экспортных переменных модуля приложения
//
// Параметры
//  Имя - строка, содержит имя переменной целиком
// 	Значение - значение переменной
//
Процедура глЗначениеПеременнойУстановить(Имя, Значение, ОбновлятьВоВсехКэшах = Ложь) Экспорт
	
	ОбщегоНазначения_Версия_81.УстановитьЗначениеПеременной(Имя, глОбщиеЗначения, Значение, ОбновлятьВоВсехКэшах);
	
КонецПроцедуры

// КОНЕЦ НА ПЕРИОД ПЕРЕХОДА

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОЧЕГО МЕСТА КАССИРА

// Процедура открывает меню РМК
//
Процедура ОткрытьГлавноеМенюРМКПриЗапуске() Экспорт
	
	ОткрыватьРМКПриЗапускеПрограммы = ОбщегоНазначенияРТСервер.ОткрыватьРМКПриЗапускеПрограммы();
	
	Если ОткрыватьРМКПриЗапускеПрограммы  Тогда
		
		ОбщегоНазначенияРТКлиент.ОткрытьГлавноеМенюРМК();
		
	КонецЕсли;
	
КонецПроцедуры

