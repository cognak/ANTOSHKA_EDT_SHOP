#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ЗаполнитьЭлементПоДаннымУзла(ЭлементОбъект, ДанныеЭтогоУзла)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

//	---------------------------------------------------------------------------------------

	Если НЕ ЭлементОбъект.Версия = Метаданные.Версия Тогда

		ЭлементОбъект.Версия = Метаданные.Версия;

	КонецЕсли;

	СИ = Новый СистемнаяИнформация;

	Если НЕ ЭлементОбъект.ВерсияПриложения = СИ.ВерсияПриложения Тогда

		ЭлементОбъект.ВерсияПриложения = СИ.ВерсияПриложения;

	КонецЕсли;

	Если НЕ ЭлементОбъект.ВерсияОС = СИ.ВерсияОС Тогда

		ЭлементОбъект.ВерсияОС = СИ.ВерсияОС;

	КонецЕсли;

	СписокИмён = Новый Массив;
	СписокИмён.Добавить("Код");
	СписокИмён.Добавить("Наименование");

	Для каждого Реквизит Из ЭлементОбъект.Метаданные().Реквизиты Цикл

		СписокИмён.Добавить(Реквизит.Имя);

	КонецЦикла;

	Для каждого Имя Из СписокИмён Цикл

		Если ДанныеЭтогоУзла.Свойство(Имя) Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается(Имя, ДанныеЭтогоУзла[Имя], ЭлементОбъект);

		КонецЕсли;

	КонецЦикла;

//	LNK 19.03.2018 11:09:02
	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ТипПрограммы", Перечисления.ПрограммаМобильногоУстройства.УчетнаяСистема, ЭлементОбъект);

//	Заполняем табличную часть "Пользователи" отсутствующими в ней пользователями ИБ.
	Для каждого Пользователь Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл

		СтрокаТабличнойЧасти = ЭлементОбъект.Пользователи.Найти(Пользователь.УникальныйИдентификатор, "УникальныйИдентификатор");

		Если СтрокаТабличнойЧасти = Неопределено Тогда

			ЗаполнитьЗначенияСвойств(ЭлементОбъект.Пользователи.Добавить(), Пользователь);

		КонецЕсли;

	КонецЦикла;

//	Теперь наоборот, удаляем из табличной части "Пользователи" те записи, которые не соответствуют текущему состоянию дел.
	СтрокиДляУдаления = Новый Массив;

	Для каждого СтрокаТабличнойЧасти Из ЭлементОбъект.Пользователи Цикл

		Если ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(СтрокаТабличнойЧасти.УникальныйИдентификатор) = Неопределено Тогда

			СтрокиДляУдаления.Добавить(СтрокаТабличнойЧасти);

		КонецЕсли;

	КонецЦикла;

	Для каждого СтрокаТабличнойЧасти Из СтрокиДляУдаления Цикл

		ЭлементОбъект.Пользователи.Удалить(СтрокаТабличнойЧасти);

	КонецЦикла;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	Если ОбщегоНазначенияРТ.ЕстьТЧОбъекта("СетевыеИнтерфейсы", ЭлементОбъект.Метаданные()) Тогда

		Для каждого Адрес Из ТехническаяПоддержкаВызовСервера.ПолучитьАдресаСетевыхИнтерфейсов() Цикл

			Если ЭлементОбъект.СетевыеИнтерфейсы.Найти(Адрес, "Адрес") = Неопределено Тогда

				СтрокаИнтерфейс = ЭлементОбъект.СетевыеИнтерфейсы.Добавить();
				СтрокаИнтерфейс.Адрес = Адрес;
				СтрокаИнтерфейс.ДатаИзменения = ТекущаяДатаСеанса();

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если НЕ ПустаяСтрока(ЭлементОбъект.КаталогФайловРезервныхКопий) Тогда

		ПроверитьНаличиеРезервныхКопий(ЭлементОбъект);

	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьЭлементПоДаннымУзла(ЭлементСсылка, ДанныеЭтогоУзла)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Попытка

		ЭлементОбъект = ЭлементСсылка.ПолучитьОбъект();
		ЗаполнитьЭлементПоДаннымУзла(ЭлементОбъект, ДанныеЭтогоУзла);

		ЗаписатьЭлементОбъект(ЭлементОбъект);

	Исключение

		ТекстОшибки = ОписаниеОшибки();

	КонецПопытки;

КонецПроцедуры

//	LNK 14.09.2018 11:24:50
Процедура ПроверитьВерсиюУзла()	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ДанныеЭтогоУзла = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла(ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПоМагазинуИлиПоРабочемуМесту());
	
	Если НЕ ДанныеЭтогоУзла.ЭлементСтруктуры.Пустая() Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСправочник.Версия КАК Версия
		|ИЗ
		|	Справочник.СтруктураУзлов КАК ТаблицаСправочник
		|ГДЕ
		|	ТаблицаСправочник.Ссылка = &ЭлементСтруктуры"
		);
		Запрос.УстановитьПараметр("ЭлементСтруктуры", ДанныеЭтогоУзла.ЭлементСтруктуры);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда

			Если НЕ Выборка.Версия = Метаданные.Версия Тогда

				Попытка

					ЭлементОбъект = ДанныеЭтогоУзла.ЭлементСтруктуры.ПолучитьОбъект();
					ЭлементОбъект.Версия = Метаданные.Версия;

					ЗаписатьЭлементОбъект(ЭлементОбъект);

				Исключение

					ТекстОшибки = ОписаниеОшибки();

				КонецПопытки;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 14.09.2018 11:43:23
Процедура ЗаписатьЭлементОбъект(ЭлементОбъект)

	Попытка

		Если ЭлементОбъект.Модифицированность() Тогда

			ЭлементОбъект.Заблокировать();

			ЭлементОбъект.ОбменДанными.Загрузка = Истина;
			ЭлементОбъект.Записать();

			ЭлементОбъект.Разблокировать();

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();

		Если Истина Тогда	//	отключим пока что...

			ЗаписьЖурналаРегистрации("СтруктураУзлов.Обновление"
				, УровеньЖурналаРегистрации.Предупреждение, Метаданные.Справочники.СтруктураУзлов, ЭлементОбъект.Ссылка
				, "Ошибка при попытке блокировки /записи:" + Символы.ПС + ТекстОшибки, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

		КонецЕсли;

	КонецПопытки;

КонецПроцедуры

//	LNK 20.04.2017 15:42:32
Процедура УстановитьМагазины(ЭлементСсылка, СписокМагазинов)	Экспорт

	Если ЗначениеЗаполнено(ЭлементСсылка) Тогда

		ЭлементОбъект = ЭлементСсылка.ПолучитьОбъект();

		ЭлементОбъект.Магазины.Очистить();

		Для каждого Магазин Из СписокМагазинов Цикл

			ЭлементОбъект.Магазины.Добавить().Магазин = Магазин;

		КонецЦикла;

		ЗаписатьЭлементОбъект(ЭлементОбъект);

	КонецЕсли;

КонецПроцедуры

//	LNK 19.03.2018 10:57:23
Процедура ПроверитьПоУстройствамАнтошка(УзелОбъект, ВерсияПрограммы)	Экспорт

	ЭлементОбъект = Справочники.СтруктураУзлов.ПолучитьСсылку(УзелОбъект.Ссылка.УникальныйИдентификатор()).ПолучитьОбъект();

	Если ЭлементОбъект = Неопределено Тогда

		ЭлементОбъект = Справочники.СтруктураУзлов.СоздатьЭлемент();
		ЭлементОбъект.УстановитьСсылкуНового(Справочники.СтруктураУзлов.ПолучитьСсылку(УзелОбъект.Ссылка.УникальныйИдентификатор()));

		ЭлементОбъект.ВидУзла = Перечисления.ВидыУзлов.УстройствоМобильное;

	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Код", ОбщегоНазначенияКлиентСервер.lx_GetTooken(УзелОбъект.Код, "."), ЭлементОбъект);
	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Наименование", УзелОбъект.Наименование, ЭлементОбъект);
	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ТипПрограммы", УзелОбъект.ТипПрограммы, ЭлементОбъект);
	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Магазин" , УзелОбъект.Магазин, ЭлементОбъект);
	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Версия"  , ВерсияПрограммы, ЭлементОбъект);
	ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Родитель", ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().ЭлементСтруктуры, ЭлементОбъект);

	ЗаписатьЭлементОбъект(ЭлементОбъект);

КонецПроцедуры

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/
//	Служебные процедуры менеджера
//	---------------------------------------------------------------------------------------

Процедура ПроверитьНаличиеРезервныхКопий(ЭлементОбъект)

	Возврат;	//	LNK 27.06.2018 10:01:30
	КаталогРезервирования = Новый Файл(ЭлементОбъект.КаталогФайловРезервныхКопий);

	Если НЕ КаталогРезервирования.Существует() Тогда

	//	Сейчас не актуально.
		Возврат;

	КонецЕсли;

	Попытка

		FSO = Новый COMОбъект("Scripting.FileSystemObject");

		ИменаКолонок      = "ИмяФайла,ДатаСоздания,ДатаИзменения";	//	без пробелов! - процедура сравнения не обрезает конечные пробелы в лексемах!
		ТаблицаПодготовки = ЭлементОбъект.РезервныеКопии.ВыгрузитьКолонки(ИменаКолонок);

		СоставКаталога = НайтиФайлы(КаталогРезервирования.ПолноеИмя, "*.*", Ложь);

		Для каждого ФайлКопии Из СоставКаталога Цикл

			Если НЕ ФайлКопии.ЭтоКаталог() Тогда

				File = FSO.GetFile(ФайлКопии.ПолноеИмя);

				СтрокаТаблицы = ТаблицаПодготовки.Добавить();
				СтрокаТаблицы.ИмяФайла      = ФайлКопии.Имя;
			//	СтрокаТаблицы.Расширение    = ФайлКопии.Расширение;
				СтрокаТаблицы.ДатаСоздания  = File.DateCreated;
				СтрокаТаблицы.ДатаИзменения = File.DateLastModified;
			//	СтрокаТаблицы.РазмерВБайтах = File.Size;
			//	СтрокаТаблицы.Атрибуты      = File.Attributes;

			КонецЕсли;

		КонецЦикла;

		ТаблицаПодготовки.Сортировать("ИмяФайла, ДатаСоздания");

		Если НЕ ОбщегоНазначенияВызовСервера.КоллекцииИдентичны(ЭлементОбъект.РезервныеКопии, ТаблицаПодготовки, ИменаКолонок,, Ложь) Тогда

			ЭлементОбъект.РезервныеКопии.Загрузить(ТаблицаПодготовки);

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();
		ЖурналСобытий.Регистрация("КаталогФайловРезервныхКопий.КонтрольКаталога", УровеньЖурналаРегистрации.Ошибка
			, ЭлементОбъект.Метаданные()
			, ЭлементОбъект.Ссылка
			,
			, "Ошибка: " + ТекстОшибки, СокрЛП(ЭлементОбъект.КаталогФайловРезервныхКопий), Истина);

	КонецПопытки;

КонецПроцедуры

#КонецЕсли





