#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

//	LNK 20.12.2017 09:15:04
Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Поля.Добавить("Наименование");
	Поля.Добавить("Магазин");
	Поля.Добавить("Владелец");
	Поля.Добавить("Ссылка");

КонецПроцедуры

//	LNK 06.03.2024 08:20:32
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Магазины.НомерМагазина КАК НомерМагазина
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.Ссылка = &Магазин"
	);
	Запрос.УстановитьПараметр("Магазин"	, Данные.Магазин);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		СтандартнаяОбработка = Ложь;

		Представление = ?(Выборка.НомерМагазина = 0, "", "(" + Формат(Выборка.НомерМагазина, "ЧГ=") + ") ")
						+ СокрЛП(Данные.Наименование)
						+ " (" + СокрЛП(Данные.Владелец) + ")";

	КонецЕсли;

КонецПроцедуры

//	LNK 20.12.2017 09:15:17
Процедура ОбработкаПолученияПредставления_УДАЛИТЬ(Данные, Представление, СтандартнаяОбработка)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Магазины.НомерМагазина КАК НомерМагазина,
	|	ЕСТЬNULL(ТаблицаОрганизаций.Организация, ЗНАЧЕНИЕ(Справочник.магазины.ПустаяСсылка)) КАК Организация
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииПодразделений.СрезПоследних(&Период, ) КАК ТаблицаОрганизаций
	|		ПО Магазины.Ссылка = ТаблицаОрганизаций.Владелец
	|ГДЕ
	|	Магазины.Ссылка = &Магазин"
	);
	Запрос.УстановитьПараметр("Магазин"	, Данные.Магазин);
	Запрос.УстановитьПараметр("Период"	, ТекущаяДата());	//	LNK 15.11.2023 12:52:19
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

		СтандартнаяОбработка = Ложь;

		Представление = ?(Выборка.НомерМагазина = 0, "", "(" + Формат(Выборка.НомерМагазина, "ЧГ=") + ") ")
						+ СокрЛП(Данные.Наименование)
						+ ?(ЗначениеЗаполнено(Выборка.Организация), " (" + Выборка.Организация + ")", "");

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает организацию и магазин к которой принадлежит операционная касса
//
// Параметры:
//  Касса - СправочникСсылка.Кассы - Ссылка на кассу
//
// Возвращаемое значение:
//	Структура - Организация, Магазин к которой принадлежит операционная касса.
//
Функция РеквизитыКассы(Касса) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Кассы.Владелец КАК Организация,
	|	Кассы.Магазин  КАК Магазин
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	Кассы.Ссылка = &Касса
	|");
	
	Запрос.УстановитьПараметр("Касса", Касса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Организация = Выборка.Организация;
		Магазин     = Выборка.Магазин;
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
		Магазин     = Справочники.Магазины.ПустаяСсылка();
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Организация, Магазин", Организация, Магазин);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Возвращает кассу по умолчанию для магазина в разрезе организации.
// Касса по умолчанию - это одна операционная касса магазина по организации.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Ссылка на организацию
//  Магазин - СправочникСсылка.Магазины - Ссылка на магазин
//
// Возвращаемое значение:
//	СправочникСсылка.Кассы- Касса по умолчанию.
//
Функция КассаПоУмолчанию(Организация, Знач Магазин = Неопределено) Экспорт

	КассаПоУмолчанию = Справочники.Кассы.ПустаяСсылка();

	Если НЕ ЗначениеЗаполнено(Магазин) Тогда

		Магазин = ПараметрыСеанса.ТекущийМагазин;

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(&Магазин КАК Справочник.Магазины) КАК Магазин
	|ПОМЕСТИТЬ Подготовка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ТаблицаДанных.Касса,
	|	ТаблицаДанных.КлючПорядка
	|ИЗ
	|	(ВЫБРАТЬ
	|		Подготовка.Магазин.КассаМагазина КАК Касса,
	|		""0."" + Подготовка.Магазин.КассаМагазина.Наименование КАК КлючПорядка
	|	ИЗ
	|		Подготовка КАК Подготовка
	|	ГДЕ
	|		НЕ Подготовка.Магазин = НЕОПРЕДЕЛЕНО
	|		И НЕ Подготовка.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|		И Подготовка.Магазин.КассаМагазина.Владелец = &Организация
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		Кассы.Ссылка,
	|		""1."" + Кассы.Наименование
	|	ИЗ
	|		Справочник.Кассы КАК Кассы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Подготовка КАК Подготовка
	|			ПО Кассы.Ссылка = Подготовка.Магазин.КассаМагазина
	|	ГДЕ
	|		Кассы.Владелец = &Организация
	|		И ВЫБОР
	|				КОГДА &Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|						ИЛИ &Магазин = НЕОПРЕДЕЛЕНО
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ Кассы.Магазин = &Магазин
	|			КОНЕЦ
	|		И НЕ Кассы.ПометкаУдаления
	|		И НЕ Кассы.КассаУправляющейСистемы
	|		И Подготовка.Магазин ЕСТЬ NULL ) КАК ТаблицаДанных
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДанных.КлючПорядка"
	);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Магазин"    , ?(ЗначениеЗаполнено(Магазин), Магазин, Справочники.Магазины.ПустаяСсылка()));

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		КассаПоУмолчанию = Выборка.Касса;

	КонецЕсли;

	Возврат КассаПоУмолчанию;

КонецФункции

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значение:
//	Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	Результат = Новый Массив;
	Результат.Добавить("Владелец");
	Результат.Добавить("Магазин");
	Возврат Результат;
КонецФункции

// Процедура заполняет массивы реквизитов, зависимых от реквизита КассаУправляющейСистемы
// Параметры:
//           Объект - СправочникСсылка.Кассы или ДинамическийСписок- Элемент правочника для которого устанавливаем доступные реквизиты.
//           МассивВсехРеквизитов - Неопределено - Выходной параметр с типом Массив в который будут помещены имена всех реквизитов справочника
//           МассивРеквизитовОперации - Неопределено - Выходной параметр с типом Массив в который будут помещены имена реквизитов справочника
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(Объект, МассивВсехРеквизитов, МассивВидимыхРеквизитов, ДополнительныеСкрываемыеЭлементы = Неопределено) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	Если ДополнительныеСкрываемыеЭлементы = Неопределено Тогда
		ДополнительныеСкрываемыеЭлементы = Новый Структура;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДинамическийСписок") Тогда
		
		ИспользоватьОбособленноеПодразделениеОрганизации = ПолучитьФункциональнуюОпцию("ИспользоватьУчетДенежныхСредствПоОбособленнымПодразделениям");
		Если НЕ ИспользоватьОбособленноеПодразделениеОрганизации Тогда
			ДополнительныеСкрываемыеЭлементы.Вставить("ПоОбособленномуПодразделению");
			ДополнительныеСкрываемыеЭлементы.Вставить("ОбособленноеПодразделениеОрганизации");
		КонецЕсли;
		
	Иначе
		
		ИспользоватьОбособленноеПодразделениеОрганизации = ПолучитьФункциональнуюОпцию("ИспользоватьУчетДенежныхСредствПоОбособленнымПодразделениямОрганизация", Новый Структура("Организация", Объект.Владелец));
		Если НЕ ИспользоватьОбособленноеПодразделениеОрганизации Тогда
			ДополнительныеСкрываемыеЭлементы.Вставить("ПоОбособленномуПодразделению");
			Объект.ПоОбособленномуПодразделению = Ложь;
		КонецЕсли;	
		Если НЕ Объект.ПоОбособленномуПодразделению Тогда
			ДополнительныеСкрываемыеЭлементы.Вставить("ОбособленноеПодразделениеОрганизации");
			Объект.ОбособленноеПодразделениеОрганизации = Справочники.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	МассивВидимыхРеквизитов = Новый Массив;
	Если ТипЗнч(Объект) = Тип("ДинамическийСписок") Тогда
		// процедура вызвана для формы списка
		МассивВсехРеквизитов.Добавить("Магазин");
		МассивВсехРеквизитов.Добавить("Организация");
		МассивВсехРеквизитов.Добавить("ОтборМагазин");
		МассивВсехРеквизитов.Добавить("ПоОбособленномуПодразделению");
		МассивВсехРеквизитов.Добавить("ОбособленноеПодразделениеОрганизации");
		МассивВидимыхРеквизитов.Добавить("Магазин");
		МассивВидимыхРеквизитов.Добавить("Организация");
		МассивВидимыхРеквизитов.Добавить("ОтборМагазин");
		МассивВидимыхРеквизитов.Добавить("ПоОбособленномуПодразделению");
		МассивВидимыхРеквизитов.Добавить("ОбособленноеПодразделениеОрганизации");
		Для Каждого СкрываемоеПоле Из ДополнительныеСкрываемыеЭлементы Цикл
			Если МассивВидимыхРеквизитов.Найти(СкрываемоеПоле.Ключ) <> Неопределено Тогда
				МассивВидимыхРеквизитов.Удалить(МассивВидимыхРеквизитов.Найти(СкрываемоеПоле.Ключ));
			КонецЕсли;
		КонецЦикла;
	Иначе
		// процедура вызвана для формы элемента
		МассивВсехРеквизитов.Добавить("Магазин");
		МассивВсехРеквизитов.Добавить("Организация");
		МассивВсехРеквизитов.Добавить("ПоОбособленномуПодразделению");
		МассивВсехРеквизитов.Добавить("ОбособленноеПодразделениеОрганизации");
		МассивВидимыхРеквизитов.Добавить("Организация");
		МассивВидимыхРеквизитов.Добавить("ПоОбособленномуПодразделению");
		МассивВидимыхРеквизитов.Добавить("ОбособленноеПодразделениеОрганизации");
		Если НЕ Объект.КассаУправляющейСистемы Тогда
			МассивВидимыхРеквизитов.Добавить("Магазин");
		КонецЕсли;
		Для Каждого СкрываемоеПоле Из ДополнительныеСкрываемыеЭлементы Цикл
			Если МассивВидимыхРеквизитов.Найти(СкрываемоеПоле.Ключ) <> Неопределено Тогда
				МассивВидимыхРеквизитов.Удалить(МассивВидимыхРеквизитов.Найти(СкрываемоеПоле.Ключ));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли



















