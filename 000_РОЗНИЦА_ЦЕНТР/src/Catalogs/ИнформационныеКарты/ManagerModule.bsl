#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает список реквизитов, которые не нужно редактировать
// с помощью обработки группового изменения объектов
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт

	НеРедактируемыеРеквизиты = Новый Массив;

	НеРедактируемыеРеквизиты.Добавить("КодКарты");
	НеРедактируемыеРеквизиты.Добавить("ИмяПредопределенныхДанных");
	НеРедактируемыеРеквизиты.Добавить("ВладелецКарты");	//	LNK 08.02.2019 13:01:12

	Возврат НеРедактируемыеРеквизиты;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#КонецЕсли

#Область СпецификаРаботыMSCRM

//	LNK 06.08.2019 09:37:45
Функция ПолучитьКартыПоВнешнимДанным(ВладелецКарты, ВнешниеДанные, ДисконтнаяКарта = Неопределено, Автор)	Экспорт

//	Параметр "ДисконтнаяКарта" передается, когда нужно назначить карту для дальнейшего использования.

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

//	ВнешниеДанные - массив нижеописанных структур:
//	"КодКарты, Блокирован, IDC_Карта, IDC_Магазин, ДатаОткрытия, ДатаСоздания, ДатаЗакрытия"

	ТаблицаКарт = Новый ТаблицаЗначений;

	ТаблицаКарт.Колонки.Добавить("ВладелецКарты"  , Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаКарт.Колонки.Добавить("ДисконтнаяКарта", Новый ОписаниеТипов("СправочникСсылка.ИнформационныеКарты"));
	ТаблицаКарт.Колонки.Добавить("Соответствует"  , Новый ОписаниеТипов("Булево"));
	ТаблицаКарт.Колонки.Добавить("Блокирован"     , Новый ОписаниеТипов("Булево"));

	Для каждого ДанныеКарты Из ВнешниеДанные Цикл

		СтрокаТаблицы = ТаблицаКарт.Добавить();
		ПолучитьСоставКарты(ВладелецКарты, ДанныеКарты, СтрокаТаблицы, Автор);

	КонецЦикла;

	ТаблицаКарт.Сортировать("Соответствует Убыв, Блокирован");

	Если НЕ ТаблицаКарт.Количество() = 0 Тогда

		ДисконтнаяКарта = ТаблицаКарт[0].ДисконтнаяКарта;

	КонецЕсли;

	Возврат ТаблицаКарт;

КонецФункции

//	LNK 06.08.2019 09:52:49
Процедура ПолучитьСоставКарты(ВладелецКарты, ДанныеКарты, СтрокаТаблицы, Автор)

	Если НЕ ПустаяСтрока(ДанныеКарты.IDC_Карта) Тогда

		СтрокаТаблицы.ДисконтнаяКарта = Справочники.ИнформационныеКарты.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеКарты.IDC_Карта));

		Если СтрокаТаблицы.ДисконтнаяКарта.ПолучитьОбъект() = Неопределено Тогда

			СтрокаТаблицы.ДисконтнаяКарта = Справочники.ИнформационныеКарты.ПустаяСсылка();

		КонецЕсли;

	КонецЕсли;

	Если СтрокаТаблицы.ДисконтнаяКарта.Пустая() И НЕ ПустаяСтрока(ДанныеКарты.КодКарты) Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСправочник.Ссылка КАК ДисконтнаяКарта
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ТаблицаСправочник
		|ГДЕ
		|	ТаблицаСправочник.КодКарты = &КодКарты"
		);
		Запрос.УстановитьПараметр("КодКарты", ДанныеКарты.КодКарты);

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда

			СтрокаТаблицы.ДисконтнаяКарта = Выборка.ДисконтнаяКарта;

		КонецЕсли;

	КонецЕсли;

	Если СтрокаТаблицы.ДисконтнаяКарта.Пустая() И НЕ ПустаяСтрока(ДанныеКарты.КодКарты) Тогда

		КартаОбъект = Справочники.ИнформационныеКарты.СоздатьЭлемент();

		Если НЕ ПустаяСтрока(ДанныеКарты.IDC_Карта) Тогда

			КартаОбъект.УстановитьСсылкуНового(Справочники.ИнформационныеКарты.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеКарты.IDC_Карта)));

		КонецЕсли;

		КартаОбъект.ВидКарты = Перечисления.ВидыИнформационныхКарт.Магнитная;
		КартаОбъект.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная;
		КартаОбъект.ВидДисконтнойКарты = Справочники.ВидыДисконтныхКарт.НакопительныеКарты;

		КартаОбъект.Наименование  = ?(ТипЗнч(ДанныеКарты.КодКарты) = Тип("Число"), Формат(ДанныеКарты.КодКарты, "ЧН=0; ЧГ="), ДанныеКарты.КодКарты);
		КартаОбъект.КодКарты      = ?(ТипЗнч(ДанныеКарты.КодКарты) = Тип("Число"), Формат(ДанныеКарты.КодКарты, "ЧН=0; ЧГ="), ДанныеКарты.КодКарты);
		КартаОбъект.ВладелецКарты = ВладелецКарты;
		КартаОбъект.Блокирован    = ДанныеКарты.Блокирован;
		КартаОбъект.ДатаОткрытия  = ДанныеКарты.ДатаОткрытия;
		КартаОбъект.ДатаСоздания  = ДанныеКарты.ДатаСоздания;
		КартаОбъект.ДатаЗакрытия  = ДанныеКарты.ДатаЗакрытия;

		КартаОбъект.Автор = Автор;

		Если НЕ ПустаяСтрока(ДанныеКарты.IDC_Магазин) Тогда

			КартаОбъект.Магазин = Справочники.Магазины.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеКарты.IDC_Магазин));

		КонецЕсли;

		КартаОбъект.УстановитьНовыйКод();

		КартаОбъект.Записать();

		СтрокаТаблицы.ДисконтнаяКарта = КартаОбъект.Ссылка;
		СтрокаТаблицы.ВладелецКарты   = ВладелецКарты;
		СтрокаТаблицы.Соответствует   = Истина;
		СтрокаТаблицы.Блокирован      = КартаОбъект.Блокирован;

	ИначеЕсли НЕ СтрокаТаблицы.ДисконтнаяКарта.Пустая() Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСправочник.Ссылка КАК ДисконтнаяКарта,
		|	ТаблицаСправочник.ВладелецКарты КАК ВладелецКарты,
		|	ТаблицаСправочник.Блокирован
		|		ИЛИ ТаблицаСправочник.ПометкаУдаления КАК Блокирован
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ТаблицаСправочник
		|ГДЕ
		|	ТаблицаСправочник.Ссылка = &ДисконтнаяКарта"
		);
		Запрос.УстановитьПараметр("ДисконтнаяКарта", СтрокаТаблицы.ДисконтнаяКарта);

		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();

		СтрокаТаблицы.ВладелецКарты   = Выборка.ВладелецКарты;
		СтрокаТаблицы.Соответствует   = Выборка.ВладелецКарты = ВладелецКарты;
		СтрокаТаблицы.Блокирован      = Выборка.Блокирован;
 
	КонецЕсли;

КонецПроцедуры
	
#КонецОбласти

#Область ПоддержкаФункционалаВиртуальныхКарт	//	LNK 10.08.2021 17:56:32

Функция СписокПрефиксовПоУмолчанию()	Экспорт

	СписокПрефиксов = Новый Массив;

	ПрефиксТекущий = "ANT";
	СписокПрефиксов.Добавить(ПрефиксТекущий);

	Для Индекс = 0 По 2 Цикл

		Позиция = 3 - Индекс;

		Для КодЛитеры = 65 По 90 Цикл

			Буффер = СтрЗаменить(ПрефиксТекущий, Сред(ПрефиксТекущий, Позиция, 1), Символ(КодЛитеры));

			Если СписокПрефиксов.Найти(Буффер) = Неопределено Тогда

				СписокПрефиксов.Добавить(Буффер);

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Возврат СписокПрефиксов;

КонецФункции

#КонецОбласти












