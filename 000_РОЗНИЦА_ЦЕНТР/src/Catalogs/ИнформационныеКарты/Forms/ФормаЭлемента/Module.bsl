///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Обработка данных подключаемого оборудования
//
// Параметры:
//  СтруктураПараметров - Структура действий на сервере
//  СтруктураПараметровКлиента - структура последующих действий на клиенте
//
&НаСервере
Функция ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента) Экспорт
	
	Если НЕ СтруктураПараметров.НеизвестныеДанныеПО Тогда
		
		Если СтруктураПараметров.Действие = "ПроверкаКарт" Тогда
			КоличествоКарт = СтруктураПараметров.ЗначенияПоиска.Количество();
			Если КоличествоКарт = 1 Тогда
				ИнформационнаяКарта = СтруктураПараметров.ЗначенияПоиска[0].ИнформационнаяКарта;
				Если ЗначениеЗаполнено(ИнформационнаяКарта) Тогда
					СтруктураПараметровКлиента.Вставить("КартаНайдена", ИнформационнаяКарта.Наименование);
					СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
					СтруктураПараметровКлиента.Вставить("ИнформационнаяКарта", ИнформационнаяКарта);
				КонецЕсли;
			ИначеЕсли КоличествоКарт > 1 Тогда
				МассивТиповВладельцев = Новый Массив;
				МассивТиповВладельцев.Добавить(Тип("СправочникСсылка.Контрагенты"));
				МассивТиповВладельцев.Добавить(Тип("СправочникСсылка.Пользователи"));
				МассивТиповВладельцев.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
				ТаблицаКарт = Новый ТаблицаЗначений;
				ТаблицаКарт.Колонки.Добавить("ИнформационнаяКарта", Новый ОписаниеТипов("СправочникСсылка.ИнформационныеКарты"));
				ТаблицаКарт.Колонки.Добавить("ВладелецКарты", Новый ОписаниеТипов(МассивТиповВладельцев));
				
				Для каждого ЗначениеПоиска Из СтруктураПараметров.ЗначенияПоиска Цикл
					ТекущаяСтрока = ТаблицаКарт.Добавить();
					ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначениеПоиска);
				КонецЦикла;
				
				СтруктураПараметровКлиента.Вставить("ВыборКарт", ПоместитьВоВременноеХранилище(ТаблицаКарт));
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
			КонецЕсли;
		ИначеЕсли СтруктураПараметров.Действие = "РегистрацияНовойКарты" Тогда
			
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				
				Если СтруктураПараметров.ЗначенияПоиска.Количество() > 1 Тогда
					
					ТаблицаШаблонов = Новый ТаблицаЗначений;
					ТаблицаШаблонов.Колонки.Добавить("ТипШтрихкода");
					ТаблицаШаблонов.Колонки.Добавить("КодКарты");
					
					Для каждого КлючИЗначение Из СтруктураПараметров.ЗначенияПоиска[0] Цикл
						ТаблицаШаблонов.Колонки.Добавить(КлючИЗначение.Ключ);
					КонецЦикла;
					
					Для каждого ЗначениеПоиска Из СтруктураПараметров.ЗначенияПоиска Цикл
						ТекущаяСтрока = ТаблицаШаблонов.Добавить();
						ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначениеПоиска);
					КонецЦикла;
					ТаблицаШаблонов.ЗаполнитьЗначения(СтруктураПараметров.ТипШтрихкода, "ТипШтрихкода");
					ТаблицаШаблонов.ЗаполнитьЗначения(СтруктураПараметров.КодКарты, "КодКарты");
					СтруктураПараметровКлиента.Вставить("РегистрацияНовойКартыВыборШаблона", ПоместитьВоВременноеХранилище(ТаблицаШаблонов, Новый УникальныйИдентификатор()));
					
					ТекстВопроса = НСтр("ru = 'Создать новую информационную карту? Карта %КодКарты%.'");
					ТекстВопроса = СтрЗаменить(ТекстВопроса, "%КодКарты%", СтруктураПараметров.КодКарты);
					
					СтруктураПараметровКлиента.Вставить("ТекстВопросаНовойКарты", ТекстВопроса);
				Иначе
					СтруктураПараметровКлиентаРегистрацииНовойКарты = СтруктураПараметров.ЗначенияПоиска[0];
					СтруктураПараметровКлиентаРегистрацииНовойКарты.Вставить("ТипШтрихкода", СтруктураПараметров.ТипШтрихкода);
					СтруктураПараметровКлиентаРегистрацииНовойКарты.Вставить("КодКарты"    , СтруктураПараметров.КодКарты);
					
					СтруктураПараметровКлиента.Вставить("РегистрацияНовойКарты", СтруктураПараметровКлиентаРегистрацииНовойКарты);
					
					ТекстВопроса = НСтр("ru = 'Создать новую информационную карту? Карта %КодКарты%%НаименованиеШаблона%'");
					ТекстВопроса = СтрЗаменить(ТекстВопроса, "%КодКарты%", СтруктураПараметров.КодКарты);
					Если СтруктураПараметровКлиентаРегистрацииНовойКарты.Свойство("НаименованиеШаблона") Тогда
						Если ПустаяСтрока(СтруктураПараметровКлиентаРегистрацииНовойКарты.НаименованиеШаблона) Тогда
							ТекстВопроса = СтрЗаменить(ТекстВопроса, "%НаименованиеШаблона%", ".");
						Иначе
							ТекстВопроса = СтрЗаменить(ТекстВопроса, "%НаименованиеШаблона%", " (" + СтруктураПараметровКлиентаРегистрацииНовойКарты.НаименованиеШаблона+").");
						КонецЕсли;
					КонецЕсли;
					
					СтруктураПараметровКлиента.Вставить("ТекстВопросаНовойКарты", ТекстВопроса);
				КонецЕсли;
				
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураПараметровКлиента;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда

		Возврат;

	КонецЕсли;

	Если Объект.Ссылка.Пустая() Тогда

		ВызватьИсключение "Отказано! Интерактивный ввод новой карты запрещён.";

	КонецЕсли;
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ДополнительныеОтчетыИОбработки

	Элементы.ТипКарты.Видимость = Ложь;
	Элементы.ВидДисконтнойКарты.Видимость = Объект.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная;
	Заголовок = ?(Объект.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная, НСтр("ru = 'Дисконтная карта'"), НСтр("ru = 'Регистрационная карта'"));
	//+HVOYA YURA G. 08.10.2016 0:46:19
	Если Объект.ТипКарты = Перечисления.ТипыИнформационныхКарт.Регистрационная Тогда
		Элементы.ФормаНовыйШтрихкод.Видимость = Истина;
	Иначе
		Элементы.ФормаНовыйШтрихкод.Видимость = Ложь;
	КонецЕсли;
	//-HVOYA YURA G. 08.10.2016 0:46:22

	Если НЕ Параметры.Ключ.Пустая() И 
		НЕ Объект.ВидКарты = Перечисления.ВидыИнформационныхКарт.Магнитная Тогда
		ДанныеШтрихКода = ПодключаемоеОборудованиеРТ.ПолучитьШтрихкод(Объект.Ссылка);
		Если Не ДанныеШтрихКода = Неопределено Тогда
		
			ШтрихкодКарты     = ДанныеШтрихКода.Штрихкод;
			ТипШтрихкодаКарты = ДанныеШтрихКода.ТипШтрихкода;
		
		КонецЕсли;
	КонецЕсли;

	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекПовтИсп.ИспользоватьПодключаемоеОборудование();
	ЗаполнитьФлагиПоВидуКартыСервер();
	УстановитьДоступностьСервер();
//	LNK 17.01.2017 16:05:32
	УстановитьСуммуНакопленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВладелецФормы <> Неопределено И ТипЗнч(ВладелецФормы) = Тип("ТаблицаФормы") И ТипЗнч(ВладелецФормы.Родитель) = Тип("УправляемаяФорма") 
		И ВладелецФормы.Родитель.ВладелецФормы <> Неопределено	Тогда
		
		Попытка	//	LNK 08.02.2019 11:19:49 может быть вызов из формы записи, где нет "Объект"

			Если ТипЗнч(ВладелецФормы.Родитель.ВладелецФормы.Объект.Ссылка) = Тип("СправочникСсылка.ФизическиеЛица") 
			ИЛИ  ТипЗнч(ВладелецФормы.Родитель.ВладелецФормы.Объект.Ссылка) = Тип("СправочникСсылка.Контрагенты")
			ИЛИ  ТипЗнч(ВладелецФормы.Родитель.ВладелецФормы.Объект.Ссылка) = Тип("СправочникСсылка.Пользователи")
			Тогда

				Элементы.ВладелецКарты.ТолькоПросмотр = Истина;

			КонецЕсли;

		Исключение

			Элементы.ВладелецКарты.ТолькоПросмотр = Истина;

		КонецПопытки;

	КонецЕсли;

	ПриИзмененииТипаКарты(Ложь);
	ПриИзмененииВладельцаКарты(Ложь);
	Модифицированность = Ложь;
	УстановитьДоступностьКлиент();	//	LNK 08.02.2019 13:16:15

	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "";

		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");

		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:
			                      |""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;
			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекКод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
		ИначеЕсли ИмяСобытия ="TracksData" Тогда
			ТекКод = Параметр[0];
			ПодключаемоеОборудованиеРТКлиент.ВыбратьМагнитныйКод(ТекКод);
			Если ПустаяСтрока(ТекКод) Тогда
				Возврат;
			КонецЕсли;
			СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
	
		Если Объект.ВидКарты = ПредопределенноеЗначение("Перечисление.ВидыИнформационныхКарт.Штриховая") Тогда
			Объект.Наименование = ШтрихкодКарты;
		Иначе
			Объект.Наименование = Объект.КодКарты;
		КонецЕсли;
	
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ШтрихкодКарты"    , ШтрихкодКарты);
	ПараметрыЗаписи.Вставить("ТипШтрихкодаКарты", ТипШтрихкодаКарты);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Вставить содержимое обработчика.
	
	Если ТекущийОбъект.ВидКарты = Перечисления.ВидыИнформационныхКарт.Магнитная Тогда
	
		НаборЗаписейШтриходов = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		НаборЗаписейШтриходов.Отбор.Владелец.Установить(ТекущийОбъект.Ссылка);
		
		Попытка
			НаборЗаписейШтриходов.Записать();
		Исключение
			Отказ = Истина;
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	Иначе
		
		НаборЗаписейШтриходов = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		НаборЗаписейШтриходов.Отбор.Владелец.Установить(ТекущийОбъект.Ссылка);
		
		ЗаписьШтрихкода = НаборЗаписейШтриходов.Добавить();
		ЗаписьШтрихкода.Владелец     = ТекущийОбъект.Ссылка;
		ЗаписьШтрихкода.ТипШтрихкода = ПараметрыЗаписи.ТипШтрихкодаКарты;
		ЗаписьШтрихкода.Штрихкод     = ПараметрыЗаписи.ШтрихкодКарты;

		Если НЕ НаборЗаписейШтриходов.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если Не Отказ Тогда
			Попытка
				НаборЗаписейШтриходов.Записать();
			Исключение
				Отказ = Истина;
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//	LNK 17.01.2017 16:12:03
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	УстановитьСуммуНакопленияКарты();

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.ВидКарты = Перечисления.ВидыИнформационныхКарт.Магнитная Тогда
	
		МассивНепроверяемыхРеквизитов = Новый Массив;
		МассивНепроверяемыхРеквизитов.Добавить("ШтрихкодКарты");
		МассивНепроверяемыхРеквизитов.Добавить("ТипШтрихкодаКарты");
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВладелецКартыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыВызова = Новый Структура;
		
		Если ВыбранноеЗначение = "ФизическиеЛица" И Объект.ТипКарты = ПредопределенноеЗначение("Перечисление.ТипыИнформационныхКарт.Регистрационная") Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("Сотрудник", Истина);
			ПараметрыВызова.Вставить("Отбор", Отбор);
		КонецЕсли;
		
		Если ВыбранноеЗначение = "Пользователи" Тогда
			ПараметрыВызова.Вставить("РежимВыбора", Истина);
		КонецЕсли;
		ОткрытьФорму("Справочник."+ВыбранноеЗначение+".ФормаВыбора",ПараметрыВызова,Элемент, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецКартыПриИзменении(Элемент)
	
	ПриИзмененииВладельцаКарты();
	УстановитьДоступностьКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипКартыПриИзменении(Элемент)
	
	УстановитьДоступностьКлиент();
	
	Если НЕ Объект.ТипКарты = ПредопределенноеЗначение("Перечисление.ТипыИнформационныхКарт.Дисконтная") Тогда
	
		Объект.ВидДисконтнойКарты = "";
	
	КонецЕсли;
	
	ПриИзмененииТипаКарты();
	ПриИзмененииВладельцаКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагКодКартыПриИзменении(Элемент)
	
	ПриИзмененииВидаКарты(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагШтрихКодПриИзменении(Элемент)
	
	ПриИзмененииВидаКарты(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецКартыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ТипКарты = ПредопределенноеЗначение("Перечисление.ТипыИнформационныхКарт.Регистрационная") 
		И ТипЗнч(Объект.ВладелецКарты) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыВызова = Новый Структура;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Сотрудник", Истина);
		ПараметрыВызова.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора",ПараметрыВызова,Элемент, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодКартыПриИзменении(Элемент)
	
	СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ШтрихкодКарты);
	ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ШтрихкодКарты);
	
КонецПроцедуры

&НаКлиенте
Процедура КодКартыПриИзменении(Элемент)
	
	МагнитныйКод = Объект.КодКарты;
	СтруктураПараметровКлиента = ПолученМагнитныйКод(МагнитныйКод);
	ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, МагнитныйКод);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СформироватьСписокАвтоНаименованийКарты();
	ВыбранныйЭлемент = ВыбратьИзСписка(Элементы.Наименование.СписокВыбора, Элемент);
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Объект.Наименование = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ЗаполнитьФлагиПоВидуКартыСервер()

	ФлагКодКарты =      (Объект.ВидКарты = Перечисления.ВидыИнформационныхКарт.Магнитная)
					ИЛИ (Объект.ВидКарты = Перечисления.ВидыИнформационныхКарт.Смешанная);

	ФлагШтрихКод =      (Объект.ВидКарты = Перечисления.ВидыИнформационныхКарт.Штриховая)
					ИЛИ (Объект.ВидКарты = Перечисления.ВидыИнформационныхКарт.Смешанная);
КонецПроцедуры

&НаКлиенте
// Обработка магнитного или штрихового кода на клиенте
//
// Параметры
//  СтруктураПараметровКлиента - структура параметров
//
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод)
	
	Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") 
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
		
		ОбновитьКоды(СтруктураПараметровКлиента, ТекКод);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("КартаНайдена") Тогда
		
		Если СтруктураПараметровКлиента.ИнформационнаяКарта <> Объект.Ссылка Тогда
			СтрокаВопроса = НСтр("ru = 'Информационная карта с таким кодом уже существует: %1%
							|Открыть форму этой карты?'");
			СтрокаВопроса = СтрЗаменить(СтрокаВопроса, "%1%", СтруктураПараметровКлиента.КартаНайдена);
			Ответ = Вопрос(СтрокаВопроса, РежимДиалогаВопрос.ДаНет, 15);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ОткрытьЗначение(СтруктураПараметровКлиента.ИнформационнаяКарта);
			Иначе
				ОбновитьКоды(СтруктураПараметровКлиента, ТекКод);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойКартыВыборШаблона") Тогда
		
		Если ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(СтруктураПараметровКлиента.ТекстВопросаНовойКарты) Тогда
			
			ВыбранноеЗначение = ОткрытьФормуМодально("РегистрСведений.ШаблоныРегистрацииНовыхКарт.Форма.ШаблоныНовыхКарт", Новый Структура("АдресШаблоновВХранилище", СтруктураПараметровКлиента.РегистрацияНовойКартыВыборШаблона), ЭтотОбъект);

		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ВыборКарт") Тогда
		
		СтрокаВопроса = НСтр("ru = 'Существует несколько карт с кодом: %1%
						|Открыть форму?'");
		СтрокаВопроса = СтрЗаменить(СтрокаВопроса, "%1%", ТекКод);
		Ответ = Вопрос(СтрокаВопроса, РежимДиалогаВопрос.ДаНет, 15);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВыбранноеЗначение = ОткрытьФормуМодально("ОбщаяФорма.ВыборИнформационнойКарты", Новый Структура("АдресКартВХранилище", СтруктураПараметровКлиента.ВыборКарт));
			Если ВыбранноеЗначение = Неопределено Тогда
				ОбновитьКоды(СтруктураПараметровКлиента, ТекКод);
			Иначе
				Если ЗначениеЗаполнено(ВыбранноеЗначение.ИнформационнаяКарта) Тогда
					ОткрытьЗначение(ВыбранноеЗначение.ИнформационнаяКарта);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ОбновитьКоды(СтруктураПараметровКлиента, ТекКод);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) 
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаСерийныхНомеров");
	
	СтруктураПараметровДействия = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверкаКарт", СтруктураПараметровДействия);
	
	Возврат ПодключаемоеОборудованиеРТ.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) 
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаСерийныхНомеров");
	
	СтруктураПараметровДействия = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверкаКарт", СтруктураПараметровДействия);
	
	Возврат ПодключаемоеОборудованиеРТ.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииВидаКарты(Элемент)

	Если ФлагКодКарты И ФлагШтрихКод Тогда

		Объект.ВидКарты = ПредопределенноеЗначение("Перечисление.ВидыИнформационныхКарт.Смешанная");

	ИначеЕсли ФлагКодКарты Тогда

		Объект.ВидКарты = ПредопределенноеЗначение("Перечисление.ВидыИнформационныхКарт.Магнитная");

	ИначеЕсли ФлагШтрихКод Тогда

		Объект.ВидКарты = ПредопределенноеЗначение("Перечисление.ВидыИнформационныхКарт.Штриховая");

	Иначе

		Если Элемент.Имя = "ФлагКодКарты" Тогда
			ФлагШтрихКод = Истина;
		Иначе
			ФлагКодКарты = Истина;
		КонецЕсли;

		ПриИзмененииВидаКарты(Элементы.ФлагШтрихКод);

		Возврат;

	КонецЕсли;

	Если Элемент.Имя = "ФлагШтрихКод" Тогда

		Если НЕ ФлагШтрихКод Тогда

			ТипШтрихкодаКарты = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.ПустаяСсылка");

		ИначеЕсли Не ЗначениеЗаполнено(ТипШтрихкодаКарты) Тогда

			ТипШтрихкодаКарты = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.EAN13");

		КонецЕсли;

	КонецЕсли;

	УстановитьДоступностьКлиент();

КонецПроцедуры

// Процедура изменяет внешний вид формы в зависимости от значения, выбранного в поле "ВладельцКарты".
//
&НаКлиенте
Процедура ПриИзмененииВладельцаКарты(ИзменятьРекизиты = Истина)

	ОтображениеКнопкиВыбораВладелецКарты = ЗначениеЗаполнено(Объект.ВладелецКарты);

	Элементы.ВладелецКарты.КнопкаВыбора       = ОтображениеКнопкиВыбораВладелецКарты;
	Элементы.ВладелецКарты.КнопкаОткрытия     = ОтображениеКнопкиВыбораВладелецКарты;
	Элементы.ВладелецКарты.КнопкаОчистки	  = ОтображениеКнопкиВыбораВладелецКарты;
	Элементы.ВладелецКарты.КнопкаВыпадающегоСписка = Не ОтображениеКнопкиВыбораВладелецКарты;
	
	
	Если ИзменятьРекизиты Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ВладелецКарты) Тогда
			Объект.ВладелецКарты = Неопределено;
		КонецЕсли;
		
		Если ТипЗнч(Объект.ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") Тогда
			Объект.ДатаСледующегоОпроса = '00010101';
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет действия при изменении типа карты
//
&НаКлиенте
Процедура ПриИзмененииТипаКарты(ИзменятьРекизиты = Истина)
	
	ЭтоДисконтнаяКарта = Объект.ТипКарты = ПредопределенноеЗначение("Перечисление.ТипыИнформационныхКарт.Дисконтная");
	
	Если ЭтоДисконтнаяКарта Тогда
		
		Элементы.ВладелецКарты.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица, СправочникСсылка.Контрагенты");
		
		Если ТипЗнч(Объект.ВладелецКарты) = Тип("СправочникСсылка.Пользователи")
		 Или Не ЗначениеЗаполнено(Объект.ВладелецКарты) Тогда
			Объект.ВладелецКарты = Неопределено;
		КонецЕсли;
		
		Элементы.ВладелецКарты.СписокВыбора.Очистить();
		Элементы.ВладелецКарты.СписокВыбора.Добавить("ФизическиеЛица", "Физическое лицо");
		Элементы.ВладелецКарты.СписокВыбора.Добавить("Контрагенты",    "Контрагент");
		
	Иначе
		
		Элементы.ВладелецКарты.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица, СправочникСсылка.Пользователи");
		
		Элементы.ВладелецКарты.СписокВыбора.Очистить();
		Элементы.ВладелецКарты.СписокВыбора.Добавить("ФизическиеЛица", "Физическое лицо");
		Элементы.ВладелецКарты.СписокВыбора.Добавить("Пользователи",   "Пользователь");
		
		Если ИзменятьРекизиты Тогда
			Если ТипЗнч(Объект.ВладелецКарты) = Тип("СправочникСсылка.Контрагенты")
				Или Не ЗначениеЗаполнено(Объект.ВладелецКарты) Тогда
				Объект.ВладелецКарты = Неопределено;
			КонецЕсли;
			Объект.ДатаСледующегоОпроса = '00010101';
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКлиент()

	ЭтоДисконтнаяКарта = Объект.ТипКарты = ПредопределенноеЗначение("Перечисление.ТипыИнформационныхКарт.Дисконтная");
	ВладелецКонтрагент = ТипЗнч(Объект.ВладелецКарты) = Тип("СправочникСсылка.Контрагенты");
	
	Элементы.ВидДисконтнойКарты.ТолькоПросмотр = НЕ ЭтоДисконтнаяКарта;
	
	Элементы.КодКарты.Видимость       = ФлагКодКарты;
	Элементы.ГруппаШтрихкод.Видимость = ФлагШтрихКод;
	
	Элементы.ШтрихкодКарты.ТолькоПросмотр  = НЕ ФлагШтрихКод;
	Элементы.ТипШтрихкодаКарты.ТолькоПросмотр = НЕ ФлагШтрихКод;

	Элементы.ДатаПоследнегоОпроса.ТолькоПросмотр = НЕ ЭтоДисконтнаяКарта И ВладелецКонтрагент;
	Элементы.ДатаСледующегоОпроса.ТолькоПросмотр = НЕ ЭтоДисконтнаяКарта И ВладелецКонтрагент;

	Если Объект.ТипКарты = ПредопределенноеЗначение("Перечисление.ТипыИнформационныхКарт.Дисконтная")
		И НЕ Элементы.ВладелецКарты.ТолькоПросмотр	Тогда

		Элементы.ВладелецКарты.ТолькоПросмотр = НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСервер()

	ЭтоДисконтнаяКарта = Объект.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная;
	ВладелецКонтрагент = ТипЗнч(Объект.ВладелецКарты) = Тип("СправочникСсылка.Контрагенты");

	Элементы.ВидДисконтнойКарты.ТолькоПросмотр = НЕ ЭтоДисконтнаяКарта;

	Элементы.КодКарты.Видимость       = ФлагКодКарты;
	Элементы.ГруппаШтрихкод.Видимость = ФлагШтрихКод;
	
	Элементы.ШтрихкодКарты.ТолькоПросмотр     = НЕ ФлагШтрихКод;
	Элементы.ТипШтрихкодаКарты.ТолькоПросмотр = НЕ ФлагШтрихКод;

	Если НЕ ЭтоДисконтнаяКарта Тогда

		Элементы.Опрос.Видимость = Ложь;
		Элементы.ДанныеКарты.ОтображатьЗаголовок = Истина;
		Элементы.ДанныеКарты.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

//	LNK 17.01.2017 16:09:10
&НаКлиенте
Процедура ОбновитьДанные(Команда)

	УстановитьСуммуНакопленияКарты();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбновитьКоды(СтруктураПараметровКлиента, ТекКод)
	
	Если СтруктураПараметровКлиента.Свойство("ЭтоШтрихкод") Тогда
		ФлагШтрихКод = Истина;
		Если ШтрихкодКарты <> ТекКод Тогда
			ШтрихкодКарты = ТекКод;
		КонецЕсли;
		ПриИзмененииВидаКарты(Элементы.ФлагШтрихКод);
		ТипШтрихкодаКарты = ПодключаемоеОборудованиеРТ.ОпределитьТипШтрихкода(ШтрихкодКарты);
	Иначе
		ФлагКодКарты = Истина;
		Объект.КодКарты = ТекКод;
		ПриИзмененииВидаКарты(Элементы.ФлагКодКарты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСписокАвтоНаименованийКарты()
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	СтрокаНаименования = "";
	Если ФлагКодКарты  И ЗначениеЗаполнено(Объект.КодКарты) Тогда
		СтрокаНаименования = Объект.КодКарты;
		Элементы.Наименование.СписокВыбора.Добавить(Объект.КодКарты);
	ИначеЕсли ФлагШтрихКод И ЗначениеЗаполнено(ШтрихкодКарты) Тогда
		СтрокаНаименования = ШтрихкодКарты;
		Элементы.Наименование.СписокВыбора.Добавить(ШтрихкодКарты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВладелецКарты) Тогда
		СтрокаНаименования = СтрокаНаименования + " (" + СокрЛП(Объект.ВладелецКарты) + ")";
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

//+HVOYA YURA G. 26.09.2016 12:48:51
&НаКлиенте
Процедура НовыйШтрихкод(Команда)
	Магазин = ПолучитьМагазин(Объект.ВладелецКарты);
	ШтрихкодКарты = СформироватьШтрихкодИК(Магазин);
	ТипШтрихкодаКарты = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.EAN13");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМагазин(Владелец)
	 
	Возврат Владелец.Магазин
	
КонецФункции


&НаСервереБезКонтекста
Функция СформироватьШтрихкодИК(Магазин)
	 
	Возврат ПодключаемоеОборудованиеРТ.СформироватьШтрихкодИнформационнойКарты(Магазин);
	
КонецФункции

//-HVOYA YURA G. 26.09.2016 12:49:04

//	LNK 17.01.2017 16:05:39
&НаСервере
Процедура УстановитьСуммуНакопленияКарты()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ТаблицаПродажи.СуммаОстаток) КАК СуммаНакоплено
	|ИЗ
	|	РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(, ДисконтнаяКарта = &ТекущаяСсылка) КАК ТаблицаПродажи"
	);
	Запрос.УстановитьПараметр("ТекущаяСсылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

			СуммаНакоплено = Выборка.СуммаНакоплено;

	Иначе	СуммаНакоплено = 0;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 05.08.2020 05:57:11
Процедура ВладелецКартыОткрытие(Элемент, СтандартнаяОбработка)

	Если ТипЗнч(Объект.ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") Тогда

		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура(
			"Ключ, ПросмотрВладельца, ТолькоПросмотр"
			, Объект.ВладелецКарты, Истина, Истина
		);
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;

КонецПроцедуры









