
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюИспользованияАссортимента();
	ИспользоватьСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	Элементы.СтраницыПомощника.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыПодвал.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	ОткрытьПослеСоздания = Истина;
	
	УстановитьПараметрыВыбораВидаМинимальныхЦенПродажи();
	ОбработатьЭлементыРедактированияКонтактнойИнформации();
	
	Элементы.ГруппаАссортимент.Видимость = ИспользоватьАссортимент;
	Элементы.СегментИсключаемойНоменклатуры.Видимость = ИспользоватьСкидки;
	
	ЗаполнитьСписокНеЗанятыхСкладов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеСтраницамиПодвал();
	ВидимостьСтраницПервичнаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если СозданиеВыполнено Тогда
		Возврат;
	КонецЕсли;	
	
	НеобходимостьВопроса = Ложь;
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница <> Элементы.СтраницаПервичнаяИнформация Тогда
		НеобходимостьВопроса = Истина;
	ИначеЕсли ЗначениеЗаполнено(Название) Тогда			
		НеобходимостьВопроса = Истина;		
	КонецЕсли;
	
	Если НеобходимостьВопроса Тогда
		Если Вопрос(НСтр("ru='При закрытии формы введенная в нее информация будет утеряна. Закрыть?'"),РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КоличествоСкладовПриИзменении(Элемент)
	
	ВидимостьСтраницПервичнаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораАдресаИОбработатьРезультат(Элемент,
												ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресМагазина"),
												"ФактическийАдрес",
												"ФактическийАдресЗначенияПолей");
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЦенообразованияПриИзменении(Элемент)
	ПриИзмененииПравилоЦенообразования();
КонецПроцедуры

&НаКлиенте
Процедура ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораТелефонаИОбработатьРезультат(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонМагазина"),
												   "ТелефонМагазина",
												   "ТелефонМагазинаЗначенияПолей");
КонецПроцедуры

&НаКлиенте
Процедура ФаксНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораТелефонаИОбработатьРезультат(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФаксМагазина"),
												   "ФаксМагазина",
												   "ФаксМагазинаЗначенияПолей");
КонецПроцедуры

&НаКлиенте
Процедура ТелефонПриИзменении(Элемент)
	
	ЗаполнитьПоляВЗаписиПоПредставлениюТелефон(ТелефонМагазина, ТелефонМагазинаЗначенияПолей);
	Если НЕ КорректноВведенНомерТелефона(ТелефонМагазинаЗначенияПолей) Тогда
	 	  ОткрытьФормуВыбораТелефонаИОбработатьРезультат(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонМагазина"),
													"ТелефонМагазина",
													"ТелефонМагазинаЗначенияПолей",
													НСтр("ru='Уточните номер телефона.'"));
	Иначе
		ОтключитьОтметкуНезаполненного();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксПриИзменении(Элемент)
	
	ЗаполнитьПоляВЗаписиПоПредставлениюТелефон(ФаксМагазина, ФаксМагазинаЗначенияПолей);
	Если НЕ КорректноВведенНомерТелефона(ФаксМагазинаЗначенияПолей) Тогда
	 	  ОткрытьФормуВыбораТелефонаИОбработатьРезультат(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФаксМагазина"),
													"ФаксМагазина",
													"ФаксМагазинаЗначенияПолей",
													НСтр("ru='Уточните номер факса.'"));
	Иначе
		ОтключитьОтметкуНезаполненного();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматМагазинаПриИзменении(Элемент)
	
	ФорматМагазинаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьАссортиментПриИзменении(Элемент)
	
	Элементы.ФорматМагазина.АвтоОтметкаНезаполненного = КонтролироватьАссортимент;
	Элементы.ПравилоЦенообразования.Доступность = НЕ КонтролироватьАссортимент;
	ФорматМагазинаПриИзмененииСервер();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Далее(Команда)
	
	ВыполнитьПереходПоСтраницам(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ВыполнитьПереходПоСтраницам(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПриИзмененииПравилоЦенообразования()
	
	Если ЗначениеЗаполнено(ВидМинимальныхЦенПродажи)
	  	И ЗначениеЗаполнено(ПравилоЦенообразования) Тогда                 		
		Если ПравилоЦенообразования.ЦенаВключаетНДС <> ВидМинимальныхЦенПродажи.ЦенаВключаетНДС Тогда
			ВидМинимальныхЦенПродажи = Справочники.ВидыЦен.ПустаяСсылка();
		КонецЕсли;	                                                             		
	КонецЕсли;	
	
	УстановитьПараметрыВыбораВидаМинимальныхЦенПродажи();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидаМинимальныхЦенПродажи()
	
	Если ЗначениеЗаполнено(ПравилоЦенообразования) Тогда
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ЦенаВключаетНДС", ПравилоЦенообразования.ЦенаВключаетНДС);
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ПараметрВыбора);
		МассивПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.ВидМинимальныхЦенПродажи.ПараметрыВыбора = МассивПараметровВыбора;
	Иначе
		Элементы.ВидМинимальныхЦенПродажи.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнение страницы с первичной информацией
//
// Возвращаемое значение:
//   Булево   - Истина, если проверка не выполнена, Ложь в обратном случае
//
&НаКлиенте
Функция ПроверитьЗаполнениеПервичнойИнформации()
	
	Отказ = Ложь;
	ОчиститьСообщения();
	
	Если ПустаяСтрока(Название) Тогда
		ВывестиСообщениеПользователю(НСтр("ru = 'Не указано название магазина'"),"Название");
		Отказ = Истина;
	КонецЕсли; 
	
	Если КоличествоСкладов = 0 Тогда
		Если ПустаяСтрока(НаименованиеСклада) Тогда
			ВывестиСообщениеПользователю(НСтр("ru = 'Не указано наименование склада'"),"НаименованиеСклада");
			Отказ = Истина;
		КонецЕсли;	
	Иначе
		Если ПустаяСтрока(НаименованиеСкладаПродажи) Тогда
			ВывестиСообщениеПользователю(НСтр("ru = 'Не указано наименование склада продажи'"),"НаименованиеСкладаПродажи");
			Отказ = Истина;
		КонецЕсли;	
		Если ПустаяСтрока(НаименованиеСкладаПоступления) Тогда
			ВывестиСообщениеПользователю(НСтр("ru = 'Не указано наименование склада поступления'"),"НаименованиеСкладаПоступления");
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияПродаж) Тогда
		ВывестиСообщениеПользователю(НСтр("ru = 'Не указана организация продаж'"),"ОрганизацияПродаж");
		Отказ = Истина;
	КонецЕсли;	
	
	Если (НЕ ЗначениеЗаполнено(ПравилоЦенообразования)) И (ИспользоватьАссортимент И НЕ КонтролироватьАссортимент) Тогда
		ВывестиСообщениеПользователю(НСтр("ru = 'Не указано правило ценообразования'"),"ПравилоЦенообразования");
		Отказ = Истина;
	КонецЕсли;	
	
	Если ИспользоватьАссортимент И КонтролироватьАссортимент Тогда
		Если НЕ ЗначениеЗаполнено(ФорматМагазина) Тогда
			ВывестиСообщениеПользователю(НСтр("ru = 'Не указан формат магазина'"),"ФорматМагазина");
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

// Маршрутизатор при проверке возможности перехода по страницам помощника.
//
// Параметры
//  Команда  - КомандаФормы - команда, которая инициировала переход по страницам
//
// Возвращаемое значение:
//   Булево   - Истина, если проверка не выполнена, Ложь в обратном случае
//
&НаКлиенте
Функция ПроверитьУсловияПереходаПоСтраницам(Команда)
	
	Отказ = Ложь;
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПервичнаяИнформация 
		И Команда.Имя = "Далее" Тогда
		
		Отказ = ПроверитьЗаполнениеПервичнойИнформации();		
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

// Маршрутизатор действий, выполняемых при переходе по страницам помощника
//
// Параметры
//  Команда  - КомандаФормы - команда, которая инициировала переход по страницам
//
&НаКлиенте
Процедура ВыполнитьНеобходимыеДействияПриПереходеПоСтраницам(Команда)
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПервичнаяИнформация Тогда
		Если Команда.Имя = "Далее" Тогда
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведения;
		КонецЕсли;	
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведения Тогда
		Если Команда.Имя = "Далее" Тогда
			ЗаполнитьИтоговуюИнформацию();
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаФинальная;
		ИначеЕсли Команда.Имя = "Назад" Тогда
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПервичнаяИнформация;
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаФинальная Тогда
		Если Команда.Имя = "Далее" Тогда
			СписокСозданных = Новый СписокЗначений;
			СозданныйМагазин = ВыполнитьЗаписьМагазина(СписокСозданных);
			Для каждого ЭлементСписка Из СписокСозданных Цикл
				ПоказатьОповещениеПользователя("Создание",ЭлементСписка.Значение,ЭлементСписка.Представление);
			КонецЦикла;
			Если СписокСозданных.Количество() > 0 Тогда
				Оповестить("СозданНовыйМагазин", СозданныйМагазин);
				Если ОткрытьПослеСоздания Тогда
					Ключ = Новый Структура("Ключ", СозданныйМагазин);
					ОткрытьФормуМодально("Справочник.Магазины.Форма.ФормаЭлемента", Ключ);
				КонецЕсли;
			КонецЕсли;
			ЭтотОбъект.Закрыть();
		ИначеЕсли Команда.Имя = "Назад" Тогда
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведения; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НовыйСкладСПроверкой(НаименованиеСклада, СсылкаНаНовыйМагазин, Организация, ТипСклада)
	
	Если СписокНеЗанятыхСкладов.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Склады.Ссылка,
		|	Склады.Наименование,
		|	ВЫБОР
		|		КОГДА Склады.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Организация_Пуста
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	НЕ Склады.ЭтоГруппа
		|	И Склады.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|	И Склады.Наименование = &Наименование";
		
		Запрос.УстановитьПараметр("Наименование", НаименованиеСклада);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			ОбъектСклад = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектСклад.Магазин = СсылкаНаНовыйМагазин;
			
			Если Выборка.Организация_Пуста 
				И НЕ Организация = Справочники.Организации.ПустаяСсылка() Тогда
				
				ОбъектСклад.Организация = Организация;
				
			КонецЕсли;
			
			ОбъектСклад.Записать();
			
			Возврат Выборка.Ссылка;
			
		КонецЕсли;
	КонецЕсли;
	
	ОбъектСклад              = Справочники.Склады.СоздатьЭлемент();
	ОбъектСклад.Наименование = НаименованиеСклада;
	ОбъектСклад.Магазин      = СсылкаНаНовыйМагазин;
	ОбъектСклад.Организация  = Организация;
	ОбъектСклад.ТипСклада    = ТипСклада;
	ОбъектСклад.Записать();
	
	Возврат ОбъектСклад.Ссылка;
	
КонецФункции


// Выполняет запись Магазина и сопуствующих справочиков
//
// Параметры
//  СписокЗначений  - СписокЗначений - в данный список помещают ссылки на все созданные в
//						результате записи магазина элементы справочника
//
// Возвращаемое значение:
//   СправочникСсылка.Магазины   - ссылка на созданный элемент справочника Магазины
//
&НаСервере
Функция ВыполнитьЗаписьМагазина(СписокСозданных) Экспорт

	НачатьТранзакцию();

	ОбъектМагазин = Справочники.Магазины.СоздатьЭлемент();
	ОбъектМагазин.Наименование							  = Название;
	ОбъектМагазин.ПравилоЦенообразования                  = ПравилоЦенообразования;
	ОбъектМагазин.ИспользоватьПрименениеЦен               = ИспользоватьПрименениеЦен;
	ОбъектМагазин.ВидМинимальныхЦенПродажи                = ВидМинимальныхЦенПродажи;
	ОбъектМагазин.ПорядокОкругленияСуммыЧекаВПользуПокупателя = ПорядокОкругленияСуммыЧекаВПользуПокупателя;
	ОбъектМагазин.СегментИсключаемойНоменклатуры          = СегментИсключаемойНоменклатуры;
	ОбъектМагазин.ИспользоватьОрдернуюСхемуПриПоступлении = ИспользоватьОрдернуюСхемуПриПоступлении;
	ОбъектМагазин.ИспользоватьОрдернуюСхемуПриОтгрузке    = ИспользоватьОрдернуюСхемуПриОтгрузке;
	ОбъектМагазин.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач;
	ОбъектМагазин.ИспользоватьОрдернуюСхемуПриПеремещении = Истина;
	ОбъектМагазин.ИспользоватьПрямуюИнкассацию			  = ИспользоватьПрямуюИнкассацию;
	
	Если ИспользоватьАссортимент Тогда
		ОбъектМагазин.ФорматМагазина = ФорматМагазина;
		ОбъектМагазин.КонтролироватьАссортимент = КонтролироватьАссортимент;
	КонецЕсли;
	
	//контактная информация магазина
	Если НЕ ПустаяСтрока(ФактическийАдрес) Тогда
		НоваяСтрокаКИ = ОбъектМагазин.КонтактнаяИнформация.Добавить();
		НоваяСтрокаКИ.Тип				= Перечисления.ТипыКонтактнойИнформации.Адрес;
		НоваяСтрокаКИ.Вид				= Справочники.ВидыКонтактнойИнформации.ФактАдресМагазина;
		НоваяСтрокаКИ.Представление		= ФактическийАдрес;
		НоваяСтрокаКИ.ЗначенияПолей		= ПреобразоватьСписокПолейВСтроку(ФактическийАдресЗначенияПолей);
		ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(НоваяСтрокаКИ,ФактическийАдресЗначенияПолей);
	КонецЕсли;
	
	Если ТелефонМагазинаЗначенияПолей.Количество() > 0 Тогда
		НоваяСтрокаКИ = ОбъектМагазин.КонтактнаяИнформация.Добавить();
		НоваяСтрокаКИ.Тип 				= Перечисления.ТипыКонтактнойИнформации.Телефон;
		НоваяСтрокаКИ.Вид				= Справочники.ВидыКонтактнойИнформации.ТелефонМагазина;
		НоваяСтрокаКИ.Представление		= ТелефонМагазина;
		НоваяСтрокаКИ.ЗначенияПолей		= ПреобразоватьСписокПолейВСтроку(ТелефонМагазинаЗначенияПолей);
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрокаКИ, ТелефонМагазинаЗначенияПолей);
	КонецЕсли;
	
	Если ФаксМагазинаЗначенияПолей.Количество() > 0 Тогда
		НоваяСтрокаКИ = ОбъектМагазин.КонтактнаяИнформация.Добавить();
		НоваяСтрокаКИ.Тип 				= Перечисления.ТипыКонтактнойИнформации.Телефон;
		НоваяСтрокаКИ.Вид				= Справочники.ВидыКонтактнойИнформации.ФаксМагазина;
		НоваяСтрокаКИ.Представление		= ФаксМагазина;
		НоваяСтрокаКИ.ЗначенияПолей		= ПреобразоватьСписокПолейВСтроку(ФаксМагазинаЗначенияПолей);
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрокаКИ, ФаксМагазинаЗначенияПолей);
	КонецЕсли;
	
	СсылкаНовогоМагазина = Справочники.Магазины.ПолучитьСсылку(Новый УникальныйИдентификатор());
	ОбъектМагазин.УстановитьСсылкуНового(СсылкаНовогоМагазина);
		
	//Склады
	Если КоличествоСкладов = 0 Тогда
		
		ОбъектСклад_Ссылка = НовыйСкладСПроверкой(НаименованиеСклада, 
												  ОбъектМагазин.ПолучитьСсылкуНового(), 
												  ОрганизацияПродаж, 
												  Перечисления.ТипыСкладов.ТорговыйЗал);
		
		СписокСозданных.Добавить(ПолучитьНавигационнуюСсылку(ОбъектСклад_Ссылка), НаименованиеСклада);
		ОбъектМагазин.СкладПоступления = ОбъектСклад_Ссылка;
		ОбъектМагазин.СкладПродажи = ОбъектСклад_Ссылка;
		
	Иначе
		
		ОбъектСклад_Ссылка = НовыйСкладСПроверкой(НаименованиеСкладаПоступления, 
												  ОбъектМагазин.ПолучитьСсылкуНового(), 
												  Справочники.Организации.ПустаяСсылка(), 
												  Перечисления.ТипыСкладов.СкладскоеПомещение);
		
		
		СписокСозданных.Добавить(ПолучитьНавигационнуюСсылку(ОбъектСклад_Ссылка), НаименованиеСкладаПоступления);
		ОбъектМагазин.СкладПоступления = ОбъектСклад_Ссылка;
		
		ОбъектСклад_Ссылка = НовыйСкладСПроверкой(НаименованиеСкладаПродажи, 
												  ОбъектМагазин.ПолучитьСсылкуНового(), 
												  ОрганизацияПродаж, 
												  Перечисления.ТипыСкладов.ТорговыйЗал);
		
		СписокСозданных.Добавить(ПолучитьНавигационнуюСсылку(ОбъектСклад_Ссылка),НаименованиеСкладаПродажи);
		ОбъектМагазин.СкладПродажи = ОбъектСклад_Ссылка;
		
	КонецЕсли;
	
	ОбъектМагазин.Записать();
	СписокСозданных.Добавить(ПолучитьНавигационнуюСсылку(ОбъектМагазин.Ссылка),ОбъектМагазин.Наименование);
 	
	ЗафиксироватьТранзакцию();
	СозданиеВыполнено = Истина;
	
	Возврат ОбъектМагазин.Ссылка;

КонецФункции

// Удаляет из строки ограничивающую подстроку
//
// Параметры
//  ВходящаяСтрока			- Строка - строка для которой выполняются преобразования
//  СтрокаОграничивающая	- Строка - ограничивающая подстрока
//
// Возвращаемое значение:
//   Строка   - получившаяся строка
//
&НаСервере
Функция УдалитьИзСтрокиПодстроку(ВходящаяСтрока,СтрокаОграничивающая)
	
	ИндексПервогоВхождения = Найти(ВходящаяСтрока,СтрокаОграничивающая);
	ДлинаВходящейСтроки = СтрДлина(ИтоговаяИнформация);
	ЛеваяЧасть =  ЛЕВ(ВходящаяСтрока,ИндексПервогоВхождения-1);
	ПраваяЧастьСтрокиКОбработке = Прав(ИтоговаяИнформация,СтрДлина(ИтоговаяИнформация) - ИндексПервогоВхождения-4);
	ИндексВторогоВхождения = Найти(ПраваяЧастьСтрокиКОбработке,СтрокаОграничивающая);
	ПраваяЧасть = ПРАВ(ПраваяЧастьСтрокиКОбработке,СтрДлина(ПраваяЧастьСтрокиКОбработке) - ИндексВторогоВхождения -4);
	
	Возврат ЛеваяЧасть +  ПраваяЧасть;
	
КонецФункции

// Заполняет страницу с итоговой информацией
//
&НаСервере
Процедура ЗаполнитьИтоговуюИнформацию()
	
	Если ИспользоватьАссортимент Тогда
		ИтоговаяИнформация = Справочники.Магазины.ПолучитьМакет("МакетАссортимент").ПолучитьТекст();
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ФорматМагазина#", ФорматМагазина);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#КонтролироватьАссортимент#", КонтролироватьАссортимент);
	Иначе
		ИтоговаяИнформация = Справочники.Магазины.ПолучитьМакет("Макет").ПолучитьТекст();
	КонецЕсли;
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#НаименованиеМагазина#", Название);
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#Телефон#",              ТелефонМагазина);
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#Факс#",                 ФаксМагазина);
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#Адрес#",                ФактическийАдрес);
	
	Если КоличествоСкладов = 0 Тогда		
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#СкладПоступления#", НаименованиеСклада);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#СкладПродажи#", НаименованиеСклада);
	Иначе
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#СкладПоступления#", НаименованиеСкладаПоступления);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#СкладПродажи#", НаименованиеСкладаПродажи);		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПрименениеЦен") Тогда		
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ИспользоватьПрименениеЦен#", Формат(ИспользоватьПрименениеЦен, "БЛ=Нет; БИ=Да"));		
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ИПЦ#","");
	Иначе
		ИтоговаяИнформация = УдалитьИзСтрокиПодстроку(ИтоговаяИнформация,"#ИПЦ#");
	КонецЕсли;
	
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ПравилоЦенообразования#", ПравилоЦенообразования);
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ВидМинимальныхЦенПродажи#", ВидМинимальныхЦенПродажи);
	Если ИспользоватьСкидки Тогда
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#СегментИсключаемойНоменклатуры#", СегментИсключаемойНоменклатуры);
	Иначе
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "Сегмент исключаемой из скидок номенклатуры:", "");
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#СегментИсключаемойНоменклатуры#", "");
	КонецЕсли;
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ПорядокОкругленияСуммыЧекаВПользуПокупателя#", ПорядокОкругленияСуммыЧекаВПользуПокупателя);
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ИспользоватьОрдернуюСхемуПриПоступлении#", Формат(ИспользоватьОрдернуюСхемуПриПоступлении, "БЛ=Нет; БИ=Да"));
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач#", Формат(ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач, "БЛ=Нет; БИ=Да"));
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ИспользоватьОрдернуюСхемуПриОтгрузке#", Формат(ИспользоватьОрдернуюСхемуПриОтгрузке, "БЛ=Нет; БИ=Да"));
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ИспользоватьПрямуюИнкассацию#", Формат(ИспользоватьПрямуюИнкассацию, "БЛ=Нет; БИ=Да"));
	
КонецПроцедуры

// Выполняет переход по страницам формы
//
// Параметры
//  Команда  - КомандаФормы - команда, которая инициировала переход по страницам
//
&НаКлиенте
Процедура ВыполнитьПереходПоСтраницам(Команда)
	
	Отказ = ПроверитьУсловияПереходаПоСтраницам(Команда);
	
	Если Не Отказ Тогда
		ВыполнитьНеобходимыеДействияПриПереходеПоСтраницам(Команда)
	КонецЕсли;
	
	УправлениеСтраницамиПодвал();
	
КонецПроцедуры

// Отвечает за видимость необходимой страницы с кнопками, расположенными внизу
//
&НаКлиенте
Процедура УправлениеСтраницамиПодвал()
	
    Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаФинальная Тогда
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиСоздать;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведения Тогда
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиНазадДалее;
	Иначе	
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиДалее;
	КонецЕсли;
	
КонецПроцедуры

// Отвечает за видимость элементов формы на странице "Первичная информация"
//
&НаКлиенте
Процедура ВидимостьСтраницПервичнаяИнформация()
	
	Если КоличествоСкладов = 0 Тогда		
		Элементы.СтраницыСклады.ТекущаяСтраница = Элементы.СтраницаОдинСклад;		
	Иначе                                                                    		
		Элементы.СтраницыСклады.ТекущаяСтраница = Элементы.СтраницаНесколькоСкладов;		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщение пользователю
//
&НаКлиенте
Процедура ВывестиСообщениеПользователю(ТекстСообщения,Поле="",ОчищатьСообщения = Ложь)
	
	Если ОчищатьСообщения Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокНеЗанятыхСкладов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Склады.Ссылка,
	|	Склады.Наименование
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ЭтоГруппа
	|	И Склады.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		Элементы.НаименованиеСкладаПоступления.КнопкаСпискаВыбора = Истина;
		Элементы.НаименованиеСкладаПродажи.КнопкаСпискаВыбора     = Истина;
		Элементы.НаименованиеСклада.КнопкаСпискаВыбора            = Истина;
	КонецЕсли;
	
	Элементы.НаименованиеСкладаПоступления.СписокВыбора.Очистить();
	Элементы.НаименованиеСкладаПродажи.СписокВыбора.Очистить();
	Элементы.НаименованиеСклада.СписокВыбора.Очистить();
	СписокНеЗанятыхСкладов.Очистить();
	
	Для каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
		
		Элементы.НаименованиеСкладаПоступления.СписокВыбора.Добавить(СтрокаЗапроса.Ссылка, СтрокаЗапроса.Наименование);
		Элементы.НаименованиеСкладаПродажи.СписокВыбора.Добавить(СтрокаЗапроса.Ссылка, СтрокаЗапроса.Наименование);
		Элементы.НаименованиеСклада.СписокВыбора.Добавить(СтрокаЗапроса.Ссылка, СтрокаЗапроса.Наименование);
		СписокНеЗанятыхСкладов.Добавить(СтрокаЗапроса.Ссылка, СтрокаЗапроса.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

//Контактная информация

// По полю Представление заполнить остальные поля в записи для телефона
&НаКлиенте
Процедура ЗаполнитьПоляВЗаписиПоПредставлениюТелефон(Представление, СписокПолей)
	
	текСтр = СокрЛП(Представление);
	СписокПолей.Очистить();
	КодСтраны     = "";
	КодГорода     = "";
	НомерТелефона = "";
	Добавочный    = "";
	Комментарий   = "";
	
	// вырежем добавочный номер с комментарием
	ПозДоб = Найти(ВРЕГ(текСтр), "ДОБ.");
	Если ПозДоб <> 0 Тогда
		ДобавочныйСКомментарием = СокрЛП(Сред(текСтр, ПозДоб+4));
		
		текСтр = СокрЛП(Лев(текСтр, ПозДоб-1));
		
		Если Прав(текСтр, 1) = "," Тогда
			текСтр = Лев(текСтр, СтрДлина(текСтр)-1);
		КонецЕсли;
		
		ПозДоб = Найти(ВРЕГ(ДобавочныйСКомментарием), ", ");
		
		Если ПозДоб <> 0 Тогда
			Добавочный = СокрЛП(Лев(ДобавочныйСКомментарием, ПозДоб-1));
			Комментарий = СокрЛП(Сред(ДобавочныйСКомментарием, ПозДоб+2));
		Иначе
			Добавочный = ДобавочныйСКомментарием;
		КонецЕсли;
		
	КонецЕсли;
	
	// вырежем код города
	Поз = Найти(текСтр, "(");
	Если Поз <> 0 Тогда
		КодСтраны = СокрЛП(Лев(текСтр, Поз-1));
		
		текСтр = СокрЛП(Сред(текСтр, Поз+1));
		Поз = Найти(текСтр, ")");
		
		Если Поз <> 0 Тогда
			КодГорода = СокрЛП(Лев(текСтр, Поз-1));
			текСтр = СокрЛП(Сред(текСтр, Поз+1));
		КонецЕсли;
	КонецЕсли;
	
	Поз = Найти(текСтр, ", ");
	// Если добавочного номера нет - ориентируемся по номеру телефона и комментарию
	Если ПозДоб = 0 И Поз <> 0 Тогда
		// вырежем комментарий
		НомерТелефона = СокрЛП(Лев(текСтр, Поз-1));
		Комментарий = СокрЛП(Сред(текСтр, Поз+2));
	Иначе
		// все оставшееся это номер
		НомерТелефона = текСтр;
	КонецЕсли;
	
	// Поправим представление
	Представление = СформироватьПредставлениеТелефона(КодСтраны, КодГорода, НомерТелефона, Добавочный, Комментарий);
	СписокПолей.Добавить(КодСтраны,     "КодСтраны");
	СписокПолей.Добавить(КодГорода,     "КодГорода");
	СписокПолей.Добавить(НомерТелефона, "НомерТелефона");
	СписокПолей.Добавить(Добавочный,    "Добавочный");
	СписокПолей.Добавить(Комментарий,   "Комментарий");
	
КонецПроцедуры

// Процедура формирует строковое представление телефона
&НаКлиенте
Функция СформироватьПредставлениеТелефона(КодСтраны, КодГорода, НомерТелефона, Добавочный, Комментарий) Экспорт
	
	Представление = СокрЛП(КодСтраны);
	
	Если Не ПустаяСтрока(КодГорода) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + "(" + СокрЛП(КодГорода) + ")";
	КонецЕсли;
	
	Если Не ПустаяСтрока(НомерТелефона) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + СокрЛП(НомерТелефона);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Добавочный) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + "доб. " + СокрЛП(Добавочный);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Комментарий) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + СокрЛП(Комментарий);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Открывает форму ввода данных телефонного номера и обрабатывает результат выбора
//
&НаКлиенте
Процедура ОткрытьФормуВыбораТелефонаИОбработатьРезультат(ВидКонтактнойИнформации,ИмяРеквизитаПредставление,ИмяРеквизитаЗначениеПолей,Заголовок = "");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Вид",ВидКонтактнойИнформации);
	СтруктураПараметров.Вставить("Представление",ЭтотОбъект[ИмяРеквизитаПредставление]);
	СтруктураПараметров.Вставить("ЗначенияПолей",ЭтотОбъект[ИмяРеквизитаЗначениеПолей]);
	Если НЕ ПустаяСтрока(Заголовок) Тогда
		СтруктураПараметров.Вставить("Автозаголовок",Ложь);
		СтруктураПараметров.Вставить("Заголовок",Заголовок);
	КонецЕсли;	
	
	Результат = ОткрытьФормуМодально("ОбщаяФорма.ВводТелефона",СтруктураПараметров);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("Представление") Тогда
			ЭтотОбъект[ИмяРеквизитаПредставление] = Результат.Представление;
		КонецЕсли;
		Если Результат.Свойство("ЗначенияПолей") Тогда
			ЭтотОбъект[ИмяРеквизитаЗначениеПолей] = Результат.ЗначенияПолей;
		КонецЕсли;
	КонецЕсли;
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

// Открывает форму ввода адреса и обрабатывает результат выбора
//
&НаКлиенте
Процедура ОткрытьФормуВыбораАдресаИОбработатьРезультат(Элемент,ВидКонтактнойИнформации,ИмяРеквизитаПредставление,ИмяРеквизитаЗначенияПолей)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗначенияПолей",                ЭтотОбъект[ИмяРеквизитаЗначенияПолей]);
	СтруктураПараметров.Вставить("Вид",                          ВидКонтактнойИнформации);
	СтруктураПараметров.Вставить("Представление",                ЭтотОбъект[ИмяРеквизитаПредставление]);
	СтруктураПараметров.Вставить("РедактированиеТолькоВДиалоге", Не Элемент.РедактированиеТекста);
	СтруктураПараметров.Вставить("АдресТолькоУкраинский",        Истина);
	
	Результат = ОткрытьФормуМодально("ОбщаяФорма.ВводАдреса",СтруктураПараметров);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("Представление") Тогда
			ЭтотОбъект[ИмяРеквизитаПредставление] = Результат.Представление;
		КонецЕсли;
		Если Результат.Свойство("ЗначенияПолей") Тогда
			ЭтотОбъект[ИмяРеквизитаЗначенияПолей] = Результат.ЗначенияПолей;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, корректно ли введен номер телефона
//
// Параметры
//  СписокЗначенияПолей   - СписокЗначенийПолей - список значений, содержащий информацию о номере телефона
//
// Возвращаемое значение:
//   Булево			   - Истина, если номер введен корректно, Ложь, в обратном случае
//
&НаКлиенте
Функция КорректноВведенНомерТелефона(СписокЗначенияПолей)
	
	НомерТелефона = "";
	КодГорода = "";
	КодСтраны = "";
	
	Для каждого ЭлементСписка Из СписокЗначенияПолей Цикл
		Если ЭлементСписка.Представление = "НомерТелефона" Тогда
			НомерТелефона = ЭлементСписка.Значение;
		КонецЕсли;
		Если ЭлементСписка.Представление = "КодГорода" Тогда
			КодГорода = ЭлементСписка.Значение;
		КонецЕсли;
		Если ЭлементСписка.Представление = "КодСтраны" Тогда
			КодСтраны = ЭлементСписка.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(КодСтраны) Тогда
		КодСтраны = СокрЛП(КодСтраны);
		Если ЛЕВ(КодСтраны,1)= "+" Тогда
			КодСтраны = Прав(КодСтраны,СтрДлина(КодСтраны)-1);
		КонецЕсли;
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодСтраны) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(КодГорода) Тогда
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодГорода) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(НомерТелефона) Тогда
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерТелефона) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаТабличнойЧасти, ЗначенияПолей)
	
	КодСтраны = "";
	КодГорода = "";
	НомерТелефона = "";
	
	Для Каждого ЗначениеПоля Из ЗначенияПолей Цикл
		Если ВРег(ЗначениеПоля.Представление) = "КОДСТРАНЫ" Тогда
			КодСтраны = ЗначениеПоля.Значение;
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "КОДГОРОДА" Тогда
			КодГорода = ЗначениеПоля.Значение;
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "НОМЕРТЕЛЕФОНА" Тогда
			НомерТелефона = ЗначениеПоля.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если Лев(КодСтраны, 1) = "+" Тогда
		КодСтраны = Сред(КодСтраны, 2);
	КонецЕсли;
	
	Поз = Найти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	Поз = Найти(НомерТелефона, Символы.ПС);
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.НомерТелефонаБезКодов = УбратьРазделителиВНомерТелефона(НомерТелефона);
	СтрокаТабличнойЧасти.НомерТелефона         = УбратьРазделителиВНомерТелефона(КодСтраны + КодГорода + НомерТелефона);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаТабличнойЧасти, ЗначенияПолей)
	
	Для Каждого ЗначениеПоля Из ЗначенияПолей Цикл
		Если ВРег(ЗначениеПоля.Представление) = "СТРАНА" Тогда
			СтрокаТабличнойЧасти.Страна = ЗначениеПоля.Значение;
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "РЕГИОН" Тогда
			СтрокаТабличнойЧасти.Регион = ЗначениеПоля.Значение;
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "ГОРОД" Тогда
			СтрокаТабличнойЧасти.Город = ЗначениеПоля.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УбратьРазделителиВНомерТелефона(Знач СтрНомер)
	
	Поз = Найти(СтрНомер, ",");
	Если Поз <> 0 Тогда
		СтрНомер = Лев(СтрНомер, Поз-1);
	КонецЕсли;
	
	СтрНомер = СтрЗаменить(СтрНомер, "-", "");
	СтрНомер = СтрЗаменить(СтрНомер, " ", "");
	СтрНомер = СтрЗаменить(СтрНомер, "+", "");
	
	Возврат СтрНомер;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьСписокПолейВСтроку(СоответствиеПолей)
	
	Результат = "";
	Для Каждого Элемент Из СоответствиеПолей Цикл
		
		Значение = Элемент.Значение;
		Если ПустаяСтрока(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Результат + ?(Результат = "", "", Символы.ПС) + 
			Элемент.Представление + "=" + СтрЗаменить(Значение, Символы.ПС, Символы.ПС + Символы.Таб);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбработатьЭлементыРедактированияКонтактнойИнформации()

	МассивВидовКИ = Новый Массив;
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонМагазина);
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ФаксМагазина);
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресМагазина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ВидыКонтактнойИнформации.Ссылка
				   |ИЗ
				   |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
				   |ГДЕ
				   |	ВидыКонтактнойИнформации.Ссылка В(&МассивВидовКонтактнойИнформации)
				   |	И ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге";
	
	Запрос.УстановитьПараметр("МассивВидовКонтактнойИнформации",МассивВидовКИ);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
	Если Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонМагазина Тогда
			Элементы.Телефон.РедактированиеТекста = Ложь;
			Элементы.Телефон.ЦветФона = WebЦвета.Кремовый;
	ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФактАдресМагазина Тогда
			Элементы.ФактическийАдрес.РедактированиеТекста = Ложь;
			Элементы.ФактическийАдрес.ЦветФона = WebЦвета.Кремовый;
	ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФаксМагазина Тогда
			Элементы.Факс.РедактированиеТекста = Ложь;
			Элементы.Факс.ЦветФона = WebЦвета.Кремовый;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФорматМагазинаПриИзмененииСервер()
	
	Если КонтролироватьАссортимент Тогда
		Если ЗначениеЗаполнено(ФорматМагазина) Тогда
			ПравилоФормата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФорматМагазина, "ПравилоЦенообразования");
			Если ЗначениеЗаполнено(ПравилоЦенообразования) Тогда
				Если ПравилоЦенообразования <> ПравилоФормата Тогда
					ТекстСообщения = НСтр("ru='Правило ценообразования установлено в соответствии с правилом формата.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						,
						"Объект.ПравилоЦенообразования");
					ПравилоЦенообразования = ПравилоФормата;
					ПриИзмененииПравилоЦенообразования();
				КонецЕсли;
			Иначе
				ПравилоЦенообразования = ПравилоФормата;
				ПриИзмененииПравилоЦенообразования();
			КонецЕсли;
		Иначе
			ПравилоЦенообразования = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ИспользоватьАссортимент Тогда
		МассивНепроверяемыхРеквизитов = Новый Массив;
		МассивНепроверяемыхРеквизитов.Добавить("ПравилоЦенообразования");
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

