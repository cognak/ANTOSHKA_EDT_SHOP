#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Получает магазин, если магазин один в справочнике
//
// Возвращаемое значение:
// СправочникСсылка.Магазины - Найденный магазин
// Неопределено - если магазинов нет или больше одного
//
Функция ПолучитьМагазинПоУмолчанию() Экспорт
	
	ДанныеУзла = ОбменДаннымиВызовСервера.ПолучитьДанныеУзла();

	Если ДанныеУзла.Свойство("Магазин") Тогда

			Магазин = ДанныеУзла.Магазин;

	Иначе	Магазин = Справочники.Магазины.ПустаяСсылка();

	КонецЕсли;
	
	Возврат Магазин;

КонецФункции

Функция ПолучитьМагазин(IDN, ЗначениеПоУмолчанию = Неопределено)	Экспорт	//	LNK 08.06.2021 15:03:55

	ЗначениеВозврата = Справочники.Магазины.ПустаяСсылка();

	Если ТипЗнч(IDN) = Тип("Строка") И НЕ ПустаяСтрока(IDN) Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаМагазины.Ссылка КАК Магазин
		|ИЗ
		|	Справочник.Магазины КАК ТаблицаМагазины
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаСклады
		|		ПО ТаблицаМагазины.СкладПродажи = ТаблицаСклады.Ссылка
		|ГДЕ
		|	ТаблицаСклады.IDN = &IDN"
		);
		Запрос.УстановитьПараметр("IDN", IDN);

		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда

			Выборка = Результат.Выбрать();
			Выборка.Следующий();

			ЗначениеВозврата = Выборка.Магазин;

		КонецЕсли;

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ЗначениеВозврата) И НЕ ЗначениеПоУмолчанию = Неопределено Тогда

		ЗначениеВозврата = ЗначениеПоУмолчанию;

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции

Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	Результат.Добавить("ИспользоватьОрдернуюСхемуПриОтгрузке");
	Результат.Добавить("ИспользоватьОрдернуюСхемуПриПоступлении");
	Результат.Добавить("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач");
	Результат.Добавить("ИспользоватьПрименениеЦен");
	Результат.Добавить("ИспользоватьПрямуюИнкассацию");
	Результат.Добавить("ПравилоЦенообразования");
	Результат.Добавить("СкладПоступления");
	Результат.Добавить("СкладПродажи");
	Результат.Добавить("ВидМинимальныхЦенПродажи");
	Результат.Добавить("СегментИсключаемойНоменклатуры");
	Результат.Добавить("ПорядокОкругленияСуммыЧекаВПользуПокупателя");
//	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюИспользованияАссортимента();
//	LNK 16.09.2016 10:17:44
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент");
	Если ИспользоватьАссортимент Тогда
		Результат.Добавить("ФорматМагазина");
		Результат.Добавить("КонтролироватьАссортимент");
	КонецЕсли;
	
//	LNK 30.08.2016 13:44:10
	Результат.Добавить("КодФилиала");
	Результат.Добавить("НомерМагазина");
	Результат.Добавить("ВведенВЭксплуатацию");
	Результат.Добавить("ДатаНачалаРаботы");
	Результат.Добавить("КассаМагазина");
	Результат.Добавить("СкладПереброски");
	Результат.Добавить("Город");
	Результат.Добавить("Блокирован");

//	LNK 07.04.2017 12:52:59
	Результат.Добавить("Организация");
//	LNK 14.04.2017 10:22:24
	Результат.Добавить("ВидДеятельности");

//	LNK 21.03.2017 15:31:37
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДенежныхСредствПоОбособленнымПодразделениям") Тогда

		Результат.Добавить("ОбособленноеПодразделениеОрганизации");

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает список реквизитов, которые разрешается редактировать
// с помощью обработки группового изменения объектов.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	
	РедактируемыеРеквизиты.Добавить("ПорядокОкругленияСуммыЧекаВПользуПокупателя");
	РедактируемыеРеквизиты.Добавить("СегментИсключаемойНоменклатуры");
	РедактируемыеРеквизиты.Добавить("ВидМинимальныхЦенПродажи");
	РедактируемыеРеквизиты.Добавить("ПравилоЦенообразования");
	
	РедактируемыеРеквизиты.Добавить("ИспользоватьПрименениеЦен");
	РедактируемыеРеквизиты.Добавить("ИспользоватьОрдернуюСхемуПриОтгрузке");
	РедактируемыеРеквизиты.Добавить("ИспользоватьОрдернуюСхемуПриПоступлении");
	РедактируемыеРеквизиты.Добавить("ИспользоватьОрдернуюСхемуПриПеремещении");
	РедактируемыеРеквизиты.Добавить("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач");
//	LNK 17.11.2016 10:15:30
	РедактируемыеРеквизиты.Добавить("ВведенВЭксплуатацию");
	РедактируемыеРеквизиты.Добавить("КодФилиала");
	РедактируемыеРеквизиты.Добавить("СкладПереброски");
	РедактируемыеРеквизиты.Добавить("СкладПоступления");
	РедактируемыеРеквизиты.Добавить("Город");
	РедактируемыеРеквизиты.Добавить("Блокирован");
	РедактируемыеРеквизиты.Добавить("ФорматМагазина");
	РедактируемыеРеквизиты.Добавить("ОбособленноеПодразделениеОрганизации");
//	LNK 14.04.2017 10:22:48
	РедактируемыеРеквизиты.Добавить("ВидДеятельности");
	
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

//	LNK 18.09.2016 11:11:59
Функция РеквизитыМагазина(Магазин, ДатаСреза = '00010101')	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаНазначений.Магазин КАК Магазин,
	|	МАКСИМУМ(ТаблицаНазначений.СкладХранения) КАК СкладХранения,
	|	МАКСИМУМ(ТаблицаНазначений.СкладБрака) КАК СкладБрака
	|ПОМЕСТИТЬ НазначенныеСклады
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаСклады.Ссылка КАК СкладХранения,
	|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладБрака,
	|		ТаблицаСклады.Магазин КАК Магазин
	|	ИЗ
	|		Справочник.Склады КАК ТаблицаСклады
	|	ГДЕ
	|		ТаблицаСклады.Магазин = &Магазин
	|		И (НЕ ТаблицаСклады.ПометкаУдаления
	|				ИЛИ ТаблицаСклады.Блокирован)
	|		И ТаблицаСклады.НазначениеСклада = ЗНАЧЕНИЕ(Перечисление.НазначенияСкладов.Хранение)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
	|		ТаблицаСклады.Ссылка,
	|		ТаблицаСклады.Магазин
	|	ИЗ
	|		Справочник.Склады КАК ТаблицаСклады
	|	ГДЕ
	|		ТаблицаСклады.Магазин = &Магазин
	|		И (НЕ ТаблицаСклады.ПометкаУдаления
	|				ИЛИ ТаблицаСклады.Блокирован)
	|		И ТаблицаСклады.НазначениеСклада = ЗНАЧЕНИЕ(Перечисление.НазначенияСкладов.Брак)) КАК ТаблицаНазначений
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНазначений.Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Магазины.Код КАК Код,
	|	ЕСТЬNULL(ПодразделенияОрганизаций.Код, """") КАК КодФилиала,
	|	Магазины.Ссылка КАК Магазин,
	|	Магазины.НомерМагазина КАК НомерМагазина,
	|	Магазины.Блокирован КАК Блокирован,
	|	Магазины.ВведенВЭксплуатацию КАК ВведенВЭксплуатацию,
	|	Магазины.ВидДеятельности КАК ВидДеятельности,
	|	Магазины.СкладУправляющейСистемы КАК СкладУправляющейСистемы,
	|	ЕСТЬNULL(ПравилаЦенообразования.Ссылка, ЗНАЧЕНИЕ(Справочник.ПравилаЦенообразования.ПустаяСсылка)) КАК ПравилоЦенообразования,
	|	ЕСТЬNULL(ПравилаЦенообразования.ЦенаВключаетНДС, ИСТИНА) КАК ЦенаВключаетНДС,
	|	ЕСТЬNULL(ПравилаЦенообразования.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦен,
	|	ЕСТЬNULL(УчетнаяПолитика.ВидЦенИнтернет, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦенИнтернет,
	|	ЕСТЬNULL(УчетнаяПолитика.УслугаДоставкиЗаказаПокупателя, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК УслугаДоставкиЗаказаПокупателя,
	|	ЕСТЬNULL(ПодразделенияОрганизаций.Ссылка, ЗНАЧЕНИЕ(Справочник.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка)) КАК ОбособленноеПодразделениеОрганизации,
	|	ЕСТЬNULL(ТаблицаОрганизаций.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	ЕСТЬNULL(ТаблицаОрганизаций.Организация.IDN, """") КАК IDN_Организация,
	|	Магазины.КодБюджета КАК КодБюджета,
	|	Магазины.СкладПродажи КАК СкладПродажи,
	|	Магазины.СкладПоступления КАК СкладПоступления,
	|	Магазины.СкладПереброски КАК СкладПереброски,
	|	Магазины.ОтменаРучныхСкидок КАК ОтменаРучныхСкидок,
	|	Магазины.ФорматМагазина КАК ФорматМагазина,
	|	Магазины.ИспользоватьПрименениеЦен КАК ИспользоватьПрименениеЦен,
	|	Магазины.СегментИсключаемойНоменклатуры КАК СегментИсключаемойНоменклатуры,
	|	Магазины.ВидМинимальныхЦенПродажи КАК ВидМинимальныхЦенПродажи,
	|	ЕСТЬNULL(ПолитикаМагазина.ПодарочныйСертификатКакСкидка, ЕСТЬNULL(ПолитикаПустогоМагазина.ПодарочныйСертификатКакСкидка, ИСТИНА)) КАК ПодарочныйСертификатКакСкидка,
	|	ЕСТЬNULL(ПолитикаМагазина.РазрешитьПродажуТоварОбычный, ЕСТЬNULL(ПолитикаПустогоМагазина.РазрешитьПродажуТоварОбычный, ИСТИНА)) КАК РазрешитьПродажуТоварОбычный,
	|	ЕСТЬNULL(ПолитикаМагазина.РазрешитьПродажуТоварСпециальный, ЕСТЬNULL(ПолитикаПустогоМагазина.РазрешитьПродажуТоварСпециальный, ЛОЖЬ)) КАК РазрешитьПродажуТоварСпециальный,
	|	ЕСТЬNULL(ПолитикаМагазина.РазрешитьПродажуУслуг, ЕСТЬNULL(ПолитикаПустогоМагазина.РазрешитьПродажуУслуг, ИСТИНА)) КАК РазрешитьПродажуУслуг,
	|	ЕСТЬNULL(ПолитикаМагазина.НеПечататьСлипЧекПриОплате, ЕСТЬNULL(ПолитикаПустогоМагазина.НеПечататьСлипЧекПриОплате, ИСТИНА)) КАК НеПечататьСлипЧекПриОплате,
	|	ЕСТЬNULL(ПолитикаМагазина.ИспользоватьБанковскиеУслуги, ПолитикаПустогоМагазина.ИспользоватьБанковскиеУслуги) КАК ИспользоватьБанковскиеУслуги,
	|	ЕСТЬNULL(ПолитикаМагазина.ОтключитьКонтрольПодарочныхСертификатов, ПолитикаПустогоМагазина.ОтключитьКонтрольПодарочныхСертификатов) КАК ОтключитьКонтрольПодарочныхСертификатов,
	|	ЕСТЬNULL(ПолитикаМагазина.АвторасчетНДС_РРО, ЕСТЬNULL(ПолитикаПустогоМагазина.АвторасчетНДС_РРО, ИСТИНА)) КАК АвторасчетНДС_РРО,
	|	ЕСТЬNULL(ПолитикаМагазина.АвторасчетНДС_Прочие, ЕСТЬNULL(ПолитикаПустогоМагазина.АвторасчетНДС_Прочие, ИСТИНА)) КАК АвторасчетНДС_Прочие,
	|	ЕСТЬNULL(ПолитикаМагазина.УчитыватьNavisionРегламентомОрдерПроведенный, ПолитикаПустогоМагазина.УчитыватьNavisionРегламентомОрдерПроведенный) КАК УчитыватьNavisionРегламентомОрдерПроведенный,
	|	ЕСТЬNULL(ПолитикаМагазина.ОплатуБонусамиНеИспользовать, ПолитикаПустогоМагазина.ОплатуБонусамиНеИспользовать) КАК ОплатуБонусамиНеИспользовать,
	|	ЕСТЬNULL(ПолитикаМагазина.РазрешитьОтказВерификацииКонтрагента, ПолитикаПустогоМагазина.РазрешитьОтказВерификацииКонтрагента) КАК РазрешитьОтказВерификацииКонтрагента,
	|	ЕСТЬNULL(ПолитикаМагазина.ОграничитьОтгрузкуРеализованногоЗаказаПокупателя, ПолитикаПустогоМагазина.ОграничитьОтгрузкуРеализованногоЗаказаПокупателя) КАК ОграничитьОтгрузкуРеализованногоЗаказаПокупателя,
	|	ЕСТЬNULL(ПолитикаМагазина.ОтключитьОграниченияПериодаПоКассовомуДню, ПолитикаПустогоМагазина.ОтключитьОграниченияПериодаПоКассовомуДню) КАК ОтключитьОграниченияПериодаПоКассовомуДню,
	|	Магазины.ПорядокОкругленияСуммыЧекаВПользуПокупателя КАК ПорядокОкругленияСуммыЧекаВПользуПокупателя,
	|	ЕСТЬNULL(НазначенныеСклады.СкладХранения, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК СкладХранения,
	|	ЕСТЬNULL(НазначенныеСклады.СкладБрака, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК СкладБрака
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаМагазинов.СрезПоследних(&ДатаСреза, Магазин = &Магазин) КАК ПолитикаМагазина
	|		ПО Магазины.Ссылка = ПолитикаМагазина.Магазин
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаМагазинов.СрезПоследних(&ДатаСреза, Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК ПолитикаПустогоМагазина
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних(&ДатаСреза, ) КАК УчетнаяПолитика
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбособленныеПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ПО Магазины.ОбособленноеПодразделениеОрганизации = ПодразделенияОрганизаций.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаЦенообразования КАК ПравилаЦенообразования
	|		ПО Магазины.ПравилоЦенообразования = ПравилаЦенообразования.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ НазначенныеСклады КАК НазначенныеСклады
	|		ПО Магазины.Ссылка = НазначенныеСклады.Магазин
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииПодразделений.СрезПоследних(&ДатаСреза, ) КАК ТаблицаОрганизаций
	|		ПО Магазины.Ссылка = ТаблицаОрганизаций.Владелец
	|ГДЕ
	|	Магазины.Ссылка = &Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НазначенныеСклады"
	);
	Запрос.УстановитьПараметр("Магазин"  , Магазин);
	Запрос.УстановитьПараметр("ДатаСреза", КонецДня(?(ДатаСреза = '00010101' ИЛИ ДатаСреза = Неопределено, ТекущаяДатаСеанса(), ДатаСреза)));

	РезультатЗапроса = Запрос.Выполнить();
	Выборка			 = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	СоставРеквизитов = ОбщегоНазначенияРТ.СоздатьСтруктуруПоСтрокеВыборки(РезультатЗапроса, Выборка, Истина);

	СоставРеквизитов.Вставить("БлокироватьИзменениеСуммыОплаты", РозничныеПродажиСервер.БлокироватьИзменениеСуммыОплаты(Магазин, ДатаСреза));
	СоставРеквизитов.Вставить("ЭтоГлавныйУзел", ОбменДаннымиПовтИсп.ЭтоГлавныйУзел());	//	LNK 06.02.2019 11:26:12
	
	Возврат СоставРеквизитов;

КонецФункции

//	LNK 06.12.2017 12:42:52
Функция ПолучитьМагазинИзСписка(СписокМагазинов, СкладУправляющейСистемы = Ложь)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Магазин = Справочники.Магазины.ПустаяСсылка();
//	Выбираем первый по номеру магазина из списка (или какой-то, если номер отсутствует), удовлетворяющий условию.
//	Вообще-то функция предполагалась для выбора одного из двух магазинов, как в ПеремещениеТоваров.

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК Магазин,
	|	ВЫБОР
	|		КОГДА ТаблицаСправочник.НомерМагазина = 0
	|			ТОГДА ТаблицаСправочник.Наименование
	|		ИНАЧЕ ТаблицаСправочник.НомерМагазина
	|	КОНЕЦ КАК КлючПорядка
	|ИЗ
	|	Справочник.Магазины КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Ссылка В(&СписокМагазинов)
	|	И ТаблицаСправочник.СкладУправляющейСистемы = &СкладУправляющейСистемы
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка"
	);
	Запрос.УстановитьПараметр("СписокМагазинов", СписокМагазинов);
	Запрос.УстановитьПараметр("СкладУправляющейСистемы", СкладУправляющейСистемы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

		Магазин = Выборка.Магазин;

	КонецЕсли;

	Возврат Магазин;

КонецФункции

//	LNK 19.11.2023 11:09:56
Процедура УстановитьОрганизацию(Магазин, Организация)	Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда

		Возврат;

	КонецЕсли;

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	НачалоВсехОрганизаций = '20100101';	//	ну, такую дату начала всех
										//	организаций приняли волюнтаристически.
//	Первым делом определяем, есть уже организация по этому магазину и в каком периоде?
//	---------------------------------------------------------------------------------------
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаОрганизаций.Период КАК Период,
	|	ТаблицаОрганизаций.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ОрганизацииПодразделений.СрезПоследних(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), СЕКУНДА, 1), Владелец = &Магазин) КАК ТаблицаОрганизаций"
	);
	Запрос.УстановитьПараметр("Магазин"		, Магазин);
	Запрос.УстановитьПараметр("ТекущаяДата"	, ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	ПерваяУстановка	 = РезультатЗапроса.Пустой();
	
	Если ПерваяУстановка Тогда
		
		ПериодЗаписи = НачалоВсехОрганизаций;

	Иначе

		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();

		Если Выборка.Организация = Организация Тогда

		//	Эта Организация уже установлена для магазина!
			ПериодЗаписи = Неопределено;

		Иначе

		//	Предполагаем, что назначение новой организации выполняется из NAV.
		//	Соответственно, "разносим" моменты времени внешней команды..

			Если (КонецДня(ТекущаяДата()) - ТекущаяДата()) < 6 * 3600 Тогда

			//	..	событие происходит ДО 6:00 утра - назначаем в ту же дату.
					ПериодЗаписи = ТекущаяДата();

			//	..	соответственно, всё остальное время суток - переносим на следующее утро
			Иначе	ПериодЗаписи = КонецДня(ТекущаяДата()) + 1;	//	утро следующих суток

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
//	Выяснили.. имеем три варианта, которые определены значение переменной 'ПериодЗаписи'
//	1.	Такой магазин уже установлен, соответственно, ничего не делаем.
//	2.	Организация не назначена вообще - устанавливаем на начальную дату.
//	3.	Назначена какая-то другая организация.. устанавливаем новую на условно "завтрашнюю" дату
//	---------------------------------------------------------------------------------------
	Если ТипЗнч(ПериодЗаписи) = Тип("Дата") Тогда

		НаборЗаписей = РегистрыСведений.ОрганизацииПодразделений.СоздатьНаборЗаписей();

		НаборЗаписей.Отбор.Период.Установить(ПериодЗаписи);
		НаборЗаписей.Отбор.Владелец.Установить(Магазин);

		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Период		= НаборЗаписей.Отбор.Период.Значение;
		ЗаписьНабора.Владелец	= НаборЗаписей.Отбор.Владелец.Значение;

		ЗаписьНабора.Организация = Организация;

		ЗаписьНабора.ДатаИзменения = ТекущаяДата();

		НаборЗаписей.Записать();

	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Печать

// Процедура печати
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ГрафикРаботы") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ГрафикРаботы", 
			"График работы магазина", 
			ПечатьГрафикаРаботыМагазина(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,,Истина);
		
	КонецЕсли;

КонецПроцедуры

Функция ПечатьГрафикаРаботыМагазина(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
		
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;	

	ТабличныйДокумент  = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Магазины_ГрафикРаботы";
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Справочник.Ссылка                КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(Справочник.Ссылка) КАК МагазинПредставление,
	|	&Год                             КАК Год
	|ИЗ
	|	Справочник.Магазины              КАК Справочник
	|ГДЕ
	|	Справочник.Ссылка = &Магазин
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГОД(ГрафикиРаботы.ДатаКалендаря)                  КАК ГодКалендаря,
	|	КВАРТАЛ(ГрафикиРаботы.ДатаКалендаря)              КАК КварталКалендаря,
	|	МЕСЯЦ(ГрафикиРаботы.ДатаКалендаря)                КАК МесяцКалендаря,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ГрафикиРаботы.ДатаКалендаря) КАК КалендарныеДни,
	|	ГрафикиРаботы.ВидДня                              КАК ВидДня,
	|	ГрафикиРаботы.Магазин                             КАК Ссылка
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыМагазинов            КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.Год = &Год
	|	И ГрафикиРаботы.Магазин = &Магазин
	|
	|
	|СГРУППИРОВАТЬ ПО
	|	ГОД(ГрафикиРаботы.ДатаКалендаря),
	|	КВАРТАЛ(ГрафикиРаботы.ДатаКалендаря),
	|	МЕСЯЦ(ГрафикиРаботы.ДатаКалендаря),
	|	ГрафикиРаботы.ВидДня,
	|	ГрафикиРаботы.Магазин
	|УПОРЯДОЧИТЬ ПО 
	|	КВАРТАЛ(ГрафикиРаботы.ДатаКалендаря),
	|	МЕСЯЦ(ГрафикиРаботы.ДатаКалендаря)
	|ИТОГИ ПО
	|	Ссылка,
	|	ГодКалендаря,
	|	КварталКалендаря,
	|	МесяцКалендаря");
	    	
	Запрос.УстановитьПараметр("Магазин", МассивОбъектов[0].Магазин);
	Запрос.УстановитьПараметр("Год", МассивОбъектов[0].Год);
	Результаты = Запрос.ВыполнитьПакет();
	Макет      = УправлениеПечатью.ПолучитьМакет("Справочник.Магазины.ПФ_MXL_ГрафикРаботыМагазина", КодЯзыкаПечать);
	
	ОбластьЗаголовок      = Макет.ПолучитьОбласть("Заголовок");
	ОбластьКвартал        = Макет.ПолучитьОбласть("Квартал");
    ОбластьШапкаКвартала  = Макет.ПолучитьОбласть("ШапкаКвартала");
	ОбластьКолонкаМесяца  = Макет.ПолучитьОбласть("КолонкаМесяца");
	ОбластьСреднемесячный = Макет.ПолучитьОбласть("Среднемесячный");
	ОбластьСреднее        = Макет.ПолучитьОбласть("КолонкаМесяцаСр");
		
	ВыборкаПоМагазинам  = Результаты[0].Выбрать();
	ВыборкаПоКалендарям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
			
	Пока ВыборкаПоМагазинам.Следующий() Цикл
		
		Если НЕ ВыборкаПоКалендарям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоМагазинам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//ЗАГОЛОВОК
		
		ОбластьЗаголовок.Параметры.Год     = Формат(ВыборкаПоМагазинам.Год, "ЧЦ=4; ЧГ=0");
		ОбластьЗаголовок.Параметры.Магазин = ВыборкаПоМагазинам.МагазинПредставление;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		//КАЛЕНДАРЬ
		ВыборкаПоГоду = ВыборкаПоКалендарям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоГоду.Следующий() Цикл
			
			КалендарныеДниГод = 0;
			РабочееВремя40Год = 0;
			РабочееВремя36Год = 0;
			РабочееВремя24Год = 0;
			РабочиеДниГод	  = 0;
			ВыходныеДниГод	  = 0;
			
			ВыборкаПоКварталу = ВыборкаПоГоду.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоКварталу.Следующий() Цикл
				
				ОбластьКвартал.Параметры.НомерКвартала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 квартал';uk = '%1 квартал'", КодЯзыкаПечать), ВыборкаПоКварталу.КварталКалендаря);
				ТабличныйДокумент.Вывести(ОбластьКвартал);
				ТабличныйДокумент.Вывести(ОбластьШапкаКвартала);
				
				КалендарныеДниКв = 0;
				РабочееВремя40Кв = 0;
				РабочееВремя36Кв = 0;
				РабочееВремя24Кв = 0;
				РабочиеДниКв	 = 0;
				ВыходныеДниКв	 = 0;
				
				Если ВыборкаПоКварталу.КварталКалендаря = 1 ИЛИ ВыборкаПоКварталу.КварталКалендаря = 3 Тогда
					
					КалендарныеДниПолугодие1 = 0;
					РабочееВремя40Полугодие1 = 0;
					РабочееВремя36Полугодие1 = 0;
					РабочееВремя24Полугодие1 = 0;
					РабочиеДниПолугодие1	 = 0;
					ВыходныеДниПолугодие1	 = 0;
					
				КонецЕсли;
				
				ВыборкаПоМесяцу = ВыборкаПоКварталу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоМесяцу.Следующий() Цикл
					
					ВыходныеДни 	= 0;
					РабочееВремя40 	= 0;
					РабочееВремя36 	= 0;
					РабочееВремя24 	= 0;
					КалендарныеДни 	= 0;
					РабочиеДни 		= 0;
					ВыборкаПоВидуДня = ВыборкаПоМесяцу.Выбрать(ОбходРезультатаЗапроса.Прямой);
					
					Пока ВыборкаПоВидуДня.Следующий() Цикл
						
						Если ВыборкаПоВидуДня.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота 
							ИЛИ ВыборкаПоВидуДня.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье 
							ИЛИ ВыборкаПоВидуДня.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник Тогда
							
							ВыходныеДни = ВыходныеДни + ВыборкаПоВидуДня.КалендарныеДни;
							
						ИначеЕсли ВыборкаПоВидуДня.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Тогда
							
							РабочееВремя40 = РабочееВремя40 + ВыборкаПоВидуДня.КалендарныеДни * 8;
							РабочееВремя36 = РабочееВремя36 + ВыборкаПоВидуДня.КалендарныеДни*36/5;
							РабочееВремя24 = РабочееВремя24 + ВыборкаПоВидуДня.КалендарныеДни*24/5;
							РабочиеДни 	   = РабочиеДни + ВыборкаПоВидуДня.КалендарныеДни;
							
						ИначеЕсли ВыборкаПоВидуДня.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
							
							РабочееВремя40 = РабочееВремя40 + ВыборкаПоВидуДня.КалендарныеДни * 7;
							РабочееВремя36 = РабочееВремя36 + ВыборкаПоВидуДня.КалендарныеДни*36/5 - 1;
							РабочееВремя24 = РабочееВремя24 + ВыборкаПоВидуДня.КалендарныеДни*24/5 - 1;
							РабочиеДни 	   = РабочиеДни + ВыборкаПоВидуДня.КалендарныеДни;
							
						КонецЕсли;
						
						КалендарныеДни = КалендарныеДни + ВыборкаПоВидуДня.КалендарныеДни;
						
					КонецЦикла; // вид дня
					
					КалендарныеДниКв = КалендарныеДниКв + КалендарныеДни;
					РабочееВремя40Кв = РабочееВремя40Кв + РабочееВремя40;
					РабочееВремя36Кв = РабочееВремя36Кв + РабочееВремя36;
					РабочееВремя24Кв = РабочееВремя24Кв + РабочееВремя24;
					РабочиеДниКв	 = РабочиеДниКв 	+ РабочиеДни;
					ВыходныеДниКв	 = ВыходныеДниКв	+ ВыходныеДни;
					
					КалендарныеДниПолугодие1 = КалендарныеДниПолугодие1 + КалендарныеДни;
					РабочееВремя40Полугодие1 = РабочееВремя40Полугодие1 + РабочееВремя40;
					РабочееВремя36Полугодие1 = РабочееВремя36Полугодие1 + РабочееВремя36;
					РабочееВремя24Полугодие1 = РабочееВремя24Полугодие1 + РабочееВремя24;
					РабочиеДниПолугодие1	 = РабочиеДниПолугодие1 	+ РабочиеДни;
					ВыходныеДниПолугодие1	 = ВыходныеДниПолугодие1	+ ВыходныеДни;
					
					КалендарныеДниГод = КалендарныеДниГод + КалендарныеДни;
					РабочееВремя40Год = РабочееВремя40Год + РабочееВремя40;
					РабочееВремя36Год = РабочееВремя36Год + РабочееВремя36;
					РабочееВремя24Год = РабочееВремя24Год + РабочееВремя24;
					РабочиеДниГод	  = РабочиеДниГод 	+ РабочиеДни;
					ВыходныеДниГод	  = ВыходныеДниГод	+ ВыходныеДни;
					
					ОбластьКолонкаМесяца.Параметры.ВыходныеДни = ВыходныеДни;
					ОбластьКолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40;
					ОбластьКолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36;
					ОбластьКолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24;
					ОбластьКолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДни;
					ОбластьКолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДни;
					ОбластьКолонкаМесяца.Параметры.ИмяМесяца 		= Формат(Дата(ВыборкаПоГоду.ГодКалендаря, ВыборкаПоМесяцу.Месяцкалендаря,1),"ДФ=ММММ;Л=" + КодЯзыкаПечать);
					
				КонецЦикла; // месяц
				
				ОбластьКолонкаМесяца.Параметры.ВыходныеДни   	= ВыходныеДниКв;
				ОбластьКолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40Кв;
				ОбластьКолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36Кв;
				ОбластьКолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24Кв;
				ОбластьКолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДниКв;
				ОбластьКолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДниКв;
				ОбластьКолонкаМесяца.Параметры.ИмяМесяца 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 квартал';uk = '%1 квартал'", КодЯзыкаПечать), ВыборкаПоКварталу.КварталКалендаря);
				ТабличныйДокумент.Присоединить(ОбластьКолонкаМесяца);
				
				Если ВыборкаПоКварталу.КварталКалендаря = 2 
					ИЛИ ВыборкаПоКварталу.КварталКалендаря = 4 Тогда
					
					
					ОбластьКолонкаМесяца.Параметры.ВыходныеДни  	= ВыходныеДниПолугодие1;
					ОбластьКолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40Полугодие1;
					ОбластьКолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36Полугодие1;
					ОбластьКолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24Полугодие1;
					ОбластьКолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДниПолугодие1;
					ОбластьКолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДниПолугодие1;
					ОбластьКолонкаМесяца.Параметры.ИмяМесяца 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 полугодие';uk = '%1 півріччя'", КодЯзыкаПечать), ВыборкаПоКварталу.КварталКалендаря/2);
					ТабличныйДокумент.Присоединить(ОбластьКолонкаМесяца);
					
				КонецЕсли;
				
			КонецЦикла;  // квартал
			
			ОбластьКолонкаМесяца.Параметры.ВыходныеДни 	    = ВыходныеДниГод;
			ОбластьКолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40Год;
			ОбластьКолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36Год;
			ОбластьКолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24Год;
			ОбластьКолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДниГод;
			ОбластьКолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДниГод;
			ОбластьКолонкаМесяца.Параметры.ИмяМесяца 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 год';uk = '%1 рік'", КодЯзыкаПечать), Формат(ВыборкаПоГоду.ГодКалендаря, "ЧЦ=4; ЧГ=0"));
			ТабличныйДокумент.Присоединить(ОбластьКолонкаМесяца);
			
		КонецЦикла; // год
		
		ОбластьСреднемесячный.Параметры.РабочееВремя40 	= РабочееВремя40Год;
		ОбластьСреднемесячный.Параметры.РабочееВремя36 	= РабочееВремя36Год;
		ОбластьСреднемесячный.Параметры.РабочееВремя24 	= РабочееВремя24Год;
		ОбластьСреднемесячный.Параметры.ИмяМесяца 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 год';uk = '%1 рік'", КодЯзыкаПечать), Формат(ВыборкаПоГоду.ГодКалендаря, "ЧЦ=4; ЧГ=0"));
		ТабличныйДокумент.Вывести(ОбластьСреднемесячный);
		
		ОбластьСреднее.Параметры.РабочееВремя40 	= Формат(РабочееВремя40Год / 12, "ЧДЦ=2; ЧГ=0");
		ОбластьСреднее.Параметры.РабочееВремя36 	= Формат(РабочееВремя36Год / 12, "ЧДЦ=2; ЧГ=0");
		ОбластьСреднее.Параметры.РабочееВремя24 	= Формат(РабочееВремя24Год / 12, "ЧДЦ=2; ЧГ=0");
		ОбластьСреднее.Параметры.ИмяМесяца 		= НСтр("ru = 'Среднемесячное количество';uk = 'Середньомісячна кількість'", КодЯзыкаПечать);
		ТабличныйДокумент.Присоединить(ОбластьСреднее);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоМагазинам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
    	
КонецФункции

#КонецЕсли
