#Область ОбработчикиСобытийОбъекта

Процедура ПередЗаписью(Отказ)

//	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ЗагрузкаИзNavision", Ложь) = Истина Тогда
	Если НЕ ЗначениеЗаполнено(ОбменДанными.Отправитель) Тогда

		ПроверитьГеоданныеКонтактнойИнформации(Отказ);

	КонецЕсли;

	Если ОбменДанными.Загрузка Тогда

		Возврат;

	КонецЕсли;

	ДополнительныеСвойства.Вставить("ЭтоНовый"   , ЭтоНовый());
	ДополнительныеСвойства.Вставить("Организация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Организация"));


КонецПроцедуры

//	LNK 20.04.2017 10:22:47
Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда

		Возврат;

	КонецЕсли;	

	Если НЕ ДополнительныеСвойства.ЭтоНовый Тогда

		Если ЛОЖЬ И НЕ СкладУправляющейСистемы И НЕ ДополнительныеСвойства.Организация = Организация Тогда	//	LNK 26.10.2017 10:09:37 - отключил

			ВыполнитьЗаменуОрганизацииПодчиненныхОбъектов(Истина);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если СкладУправляющейСистемы Тогда
		
		УдалитьНепроверяемыеРеквизитыОбъекта(ПроверяемыеРеквизиты);
		
	Иначе

	//	LNK 27.09.2016 07:39:38
		Если Блокирован ИЛИ ПометкаУдаления ИЛИ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда

		//	тоже не будем особенно чего проверять... скорее всего, это "мёртвый" магазин.
			УдалитьНепроверяемыеРеквизитыОбъекта(ПроверяемыеРеквизиты);

		КонецЕсли;

		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, ОбщегоНазначенияКлиентСервер.AAD("СкладПереброски"));

	//	LNK 27.09.2016 07:44:28
		Если НЕ ПометкаУдаления Тогда

			Если ЗначениеЗаполнено(ВидМинимальныхЦенПродажи)
				И ЗначениеЗаполнено(ПравилоЦенообразования) 
				И ВидМинимальныхЦенПродажи.ЦенаВключаетНДС <> ПравилоЦенообразования.ЦенаВключаетНДС Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"У виду мінімальних цін продажу ознака «Ціна включає ПДВ»
					|не збігається з ознакою «Ціна включає ПДВ» правила ціноутворення.
					|Змініть вигляд мінімальних цін продажу",
					ЭтотОбъект,
					"ВидМинимальныхЦенПродажи",
					,
					Отказ
				);
					
			КонецЕсли;
			
			ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюИспользованияАссортимента();
			Если ИспользоватьАссортимент Тогда
				Если НЕ КонтролироватьАссортимент Тогда
					МассивНепроверяемыхРеквизитов = Новый Массив;
					МассивНепроверяемыхРеквизитов.Добавить("ФорматМагазина");
					ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
				КонецЕсли;
			Иначе
				МассивНепроверяемыхРеквизитов = Новый Массив;
				МассивНепроверяемыхРеквизитов.Добавить("ФорматМагазина");
				ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Блокирован = Ложь;
	ВведенВЭксплуатацию = Ложь;
	ДатаНачалаРаботы = '00010101';
	КассаМагазина    = Неопределено;
	НомерМагазина    = 0;
	КодФилиала       = "";
	СкладПоступления = Справочники.Склады.ПустаяСсылка();
	СкладПродажи     = Справочники.Склады.ПустаяСсылка();
		
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//	LNK 27.09.2016 07:41:36
Процедура УдалитьНепроверяемыеРеквизитыОбъекта(ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивНепроверяемыхРеквизитов.Добавить("ПравилоЦенообразования");
//	МассивНепроверяемыхРеквизитов.Добавить("СкладПоступления");	//	LNK 26.09.2016 10:41:35
	МассивНепроверяемыхРеквизитов.Добавить("СкладПродажи");
	МассивНепроверяемыхРеквизитов.Добавить("СкладСвязи");
	МассивНепроверяемыхРеквизитов.Добавить("ФорматМагазина");
	МассивНепроверяемыхРеквизитов.Добавить("КассаМагазина");
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);

КонецПроцедуры

//	LNK 20.04.2017 10:26:33
Процедура ВыполнитьЗаменуОрганизацииПодчиненныхОбъектов(РаботатьПоСкладам = Ложь)	Экспорт

//	Вызывается "снаружи" в процедуре получения данных из Navision
//	"ВнешниеИсточники.ОбновитьКлассификаторыПоДаннымNavision()" - тогда заменять в складах НЕ нужно!

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаКассыККМ.Ссылка,
	|	""Владелец"" КАК ИмяРеквизита
	|ИЗ
	|	Справочник.КассыККМ КАК ТаблицаКассыККМ
	|ГДЕ
	|	ТаблицаКассыККМ.Магазин = &Магазин
	|	И НЕ ТаблицаКассыККМ.Владелец = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаКассы.Ссылка,
	|	""Владелец""
	|ИЗ
	|	Справочник.Кассы КАК ТаблицаКассы
	|ГДЕ
	|	ТаблицаКассы.Магазин = &Магазин
	|	И НЕ ТаблицаКассы.Владелец = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСклады.Ссылка,
	|	""Организация""
	|ИЗ
	|	Справочник.Склады КАК ТаблицаСклады
	|ГДЕ
	|	ТаблицаСклады.Магазин = &Магазин
	|	И НЕ ТаблицаСклады.Организация = &Организация
	|	И &РаботатьПоСкладам = ИСТИНА"
	);
	Запрос.УстановитьПараметр("Магазин"    , Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("РаботатьПоСкладам", РаботатьПоСкладам);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		ЭлементОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЭлементОбъект[Выборка.ИмяРеквизита] = Организация;
		ЭлементОбъект.ДополнительныеСвойства.Вставить("СлужебныйРежимЗаписи", Истина);

		ЭлементОбъект.Записать();

	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьГеоданныеКонтактнойИнформации(Отказ)	//	LNK 05.01.2022 06:01:18

	Если ЭтоНовый() Тогда

		Возврат;

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Представление КАК Представление,
	|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	|	КонтактнаяИнформация.Страна КАК Страна,
	|	КонтактнаяИнформация.Область КАК Область,
	|	КонтактнаяИнформация.Город КАК Город,
	|	КонтактнаяИнформация.АдресЭП КАК АдресЭП,
	|	КонтактнаяИнформация.ДоменноеИмяСервера КАК ДоменноеИмяСервера,
	|	КонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
	|	КонтактнаяИнформация.НомерТелефонаБезКодов КАК НомерТелефонаБезКодов
	|ИЗ
	|	Справочник.Магазины.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресМагазина)"
	);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		ГеоданныеВосстановлены = Ложь;

		ДанныеПоСсылке = РезультатЗапроса.Выбрать();
		ДанныеПоСсылке.Следующий();

		Если НЕ ПустаяСтрока(ДанныеПоСсылке.ЗначенияПолей) И КонтактнаяИнформацияКлиентСервер.ЭтоСтрокаXML(ДанныеПоСсылке.ЗначенияПолей) Тогда

			ОбъектXDTO_Ссылка = КонтактнаяИнформацияСлужебный.ДесериализацияАдреса(ДанныеПоСсылке.ЗначенияПолей);
			Геоданные_Ссылка  = ОбъектXDTO_Ссылка.Состав.Состав;

			Если ВРег(ОбъектXDTO_Ссылка.Состав.Страна) = "УКРАЇНА" Тогда

				СтрокиОбъектаАдрес = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип, Вид", ДанныеПоСсылке.Тип, ДанныеПоСсылке.Вид));

				Если СтрокиОбъектаАдрес.Количество() = 0 Тогда

				//	Восстанавливаем всё!
					СтрокаТабличнойЧасти = КонтактнаяИнформация.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеПоСсылке);

					ГеоданныеВосстановлены = Истина;

				Иначе

					СтрокаТабличнойЧасти = СтрокиОбъектаАдрес[0];

					Если НЕ ПустаяСтрока(СтрокаТабличнойЧасти.ЗначенияПолей) И КонтактнаяИнформацияКлиентСервер.ЭтоСтрокаXML(СтрокаТабличнойЧасти.ЗначенияПолей) Тогда

						ОбъектXDTO_Объект = КонтактнаяИнформацияСлужебный.ДесериализацияАдреса(СтрокаТабличнойЧасти.ЗначенияПолей);

					Иначе

						ОбъектXDTO_Объект = КонтактнаяИнформацияСлужебный.ДесериализацияАдреса("", СтрокаТабличнойЧасти.Представление,, Истина);

					КонецЕсли;

					Если НЕ ЗначениеЗаполнено(ОбъектXDTO_Объект.Состав.Состав.Долгота) Тогда

						ОбъектXDTO_Объект.Состав.Состав.Долгота = Геоданные_Ссылка.Долгота;
						ГеоданныеВосстановлены = Истина;

					КонецЕсли;

					Если НЕ ЗначениеЗаполнено(ОбъектXDTO_Объект.Состав.Состав.Широта) Тогда

						ОбъектXDTO_Объект.Состав.Состав.Широта = Геоданные_Ссылка.Широта;
						ГеоданныеВосстановлены = Истина;

					КонецЕсли;

					Если ГеоданныеВосстановлены Тогда

						СтрокаТабличнойЧасти.ЗначенияПолей = КонтактнаяИнформацияСлужебный.СериализацияКонтактнойИнформации(ОбъектXDTO_Объект);

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		Если ГеоданныеВосстановлены Тогда

			ЗаписьЖурналаРегистрации("ГЕОДАННЫЕ", УровеньЖурналаРегистрации.Информация
				, Метаданные()
				, Ссылка
				, "Выполнено восстановление геоданных по ссылке"
			);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти




