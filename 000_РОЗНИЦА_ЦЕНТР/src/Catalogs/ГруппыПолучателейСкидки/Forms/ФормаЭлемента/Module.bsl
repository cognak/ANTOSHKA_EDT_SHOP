
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(Объект.Ссылка.СхемаКомпоновкиДанных) Тогда
			СКД = Объект.Ссылка.СхемаКомпоновкиДанных.Получить();
		Иначе
			СКД = Справочники.ГруппыПолучателейСкидки.ПолучитьМакет("ФизическиеЛица");
			Объект.ТипПолучателей = Перечисления.ТипыПолучателейСкидок.ФизическиеЛица;
			Объект.ИмяШаблонаСКД = "ФизическиеЛица";
		КонецЕсли;
	Иначе
		СКД = Справочники.ГруппыПолучателейСкидки.ПолучитьМакет("ФизическиеЛица");
		Объект.ТипПолучателей = Перечисления.ТипыПолучателейСкидок.ФизическиеЛица;
		Объект.ИмяШаблонаСКД = "ФизическиеЛица";
	КонецЕсли;
	АдресСКД = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);

	УстановитьДоступностьКомандыСформироватьСервер();
	Элементы.СпособФормирования.СписокВыбора.Добавить(Перечисления.СпособыФормированияСегментов.ПериодическиОбновлять);
	Элементы.СпособФормирования.СписокВыбора.Добавить(Перечисления.СпособыФормированияСегментов.ФормироватьВручную);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УстановитьДоступностьКомандыСформироватьСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.СхемаКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСКД));
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ИмяШаблонаСКД) Тогда
		ТекущийОбъект.ИмяШаблонаСКД = "ФизическиеЛица";
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Сформировать(Команда)
	
	Если ЗаписьВыполнена(Истина) Тогда
		
		СегментыСервер.СформироватьГруппуПолучателейСкидки(Объект.Ссылка);
		ПоказатьОповещениеПользователя(
			НСтр("ru='Формирование группы получателей скидики'"),,
			НСтр("ru='Группа сформирована.'"));
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиСКД(Команда)
	
	Если ЗаписьВыполнена(Ложь) Тогда
		Если ПустаяСтрока(Объект.ИмяШаблонаСКД) Тогда
			
		КонецЕсли;
		ЗаголовокФормыСКД = НСтр("ru = 'Настройки группы получателей скидки ""%1""'");
		ЗаголовокФормыСКД = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокФормыСКД, Объект.Наименование);
		
		Результат = ОткрытьФормуМодально("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных",
										 Новый Структура("АдресСхемыКомпоновкиДанных,
														 |ИсточникШаблонов,
														 |Заголовок,
														 |УникальныйИдентификатор,
														 |ИмяШаблонаСКД,
														 |ВозвращатьИмяТекущегоШаблонаСКД",
														 АдресСКД,
														 Объект.Ссылка,
														 ЗаголовокФормыСКД,
														 УникальныйИдентификатор,
														 Объект.ИмяШаблонаСКД,
														 Истина));
		Если Результат <> Неопределено Тогда
			Объект.ИмяШаблонаСКД = Результат.ИмяТекущегоШаблонаСКД;
			Если Объект.ИмяШаблонаСКД = "ФизическиеЛица" Тогда
				Объект.ТипПолучателей = ПредопределенноеЗначение("Перечисление.ТипыПолучателейСкидок.ФизическиеЛица");
			ИначеЕсли Объект.ИмяШаблонаСКД = "Контрагенты" Тогда
				Объект.ТипПолучателей = ПредопределенноеЗначение("Перечисление.ТипыПолучателейСкидок.Контрагенты");
			Иначе
				Объект.ТипПолучателей = ПредопределенноеЗначение("Перечисление.ТипыПолучателейСкидок.СмешанныйСписок");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияМногострочногоТекста(Элемент.ТекстРедактирования , Объект.Описание, Модифицированность, "Описание группы");
	
КонецПроцедуры

&НаКлиенте
Процедура СпособФормированияПриИзменении(Элемент)
	
	Если Объект.СпособФормирования = ПредопределенноеЗначение("Перечисление.СпособыФормированияСегментов.ФормироватьДинамически") Тогда
		Объект.СпособФормирования = ПредыдущийСпособФормирования;
		ТекстСообщения = НСтр("ru = 'Динамическое формирование групп не поддерживается'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			"СпособФормирования",
			"Объект");
	КонецЕсли;
	УстановитьДоступностьКомандыСформироватьКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособФормированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПредыдущийСпособФормирования = Объект.СпособФормирования;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Функция ЗаписьВыполнена(ПроверятьМодифицированность = Истина)
	
	Результат = Истина;
	
	Если (НЕ ЗначениеЗаполнено(Объект.Ссылка)) ИЛИ (ПроверятьМодифицированность И ЭтотОбъект.Модифицированность) Тогда
		Если Объект.СпособФормирования = ПредопределенноеЗначение("Перечисление.СпособыФормированияСегментов.ФормироватьДинамически") Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Формирование доступно только для нединамических групп.'"));
			Результат = Ложь;
		Иначе
			ТекстВопрроса = НСтр("ru = 'Перед формированием необходимо записать группу. Записать?'");
			Ответ = Вопрос(ТекстВопрроса, РежимДиалогаВопрос.ДаНет);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Результат = Ложь;
			Иначе
				Результат = Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура УстановитьДоступностьКомандыСформироватьСервер()
	
	Элементы.Сформировать.Доступность = НЕ Объект.СпособФормирования = Перечисления.СпособыФормированияСегментов.ФормироватьДинамически;
	Если Элементы.Сформировать.Доступность Тогда
		Элементы.Сформировать.Доступность = НЕ ЭтотОбъект.ТолькоПросмотр;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандыСформироватьКлиент()
	
	Элементы.Сформировать.Доступность = НЕ Объект.СпособФормирования = ПредопределенноеЗначение("Перечисление.СпособыФормированияСегментов.ФормироватьДинамически");
	Если Элементы.Сформировать.Доступность Тогда
		Элементы.Сформировать.Доступность = НЕ ЭтотОбъект.ТолькоПросмотр;
	КонецЕсли;
	
КонецПроцедуры

//А++ 20241225 по задаче https://awdev.atlassian.net/browse/RETAIL1C-1042
&НаСервере
Процедура ЗагрузитьИзExcelНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcel(Команда)
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Истина", Истина); 
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузкаЗавершениеВыбора", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Группа", Объект);
	ПараметрыФормы.Вставить("ТипПолучателейСкидок", Объект.ТипПолучателей);
	
	ОткрытьФорму("Справочник.ГруппыПолучателейСкидки.Форма.ФормаЗагрузки", ПараметрыФормы, ЭтотОбъект,,,, Оповещение); 
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаЗавершениеВыбора(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Загружены Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Состав группы обновлен из файла!'; uk = 'Склад групи оновлено із файлу!'"));
			ОбновитьОтображениеДанных();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//А++ 20241225 по задаче https://awdev.atlassian.net/browse/RETAIL1C-1042
