#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда

		Возврат;

	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());

    Если НЕ ЭтоНовый() тогда 

		ДополнительныеСвойства.Вставить("ЗначениеСкидкиНаценки", Ссылка.ЗначениеСкидкиНаценки); 

	КонецЕсли;

	Если НЕ ОбщегоНазначенияРТСервер.РазрешеноИзменениеВУзле(ЭтотОбъект, Отказ) Тогда

	//	LNK 27.09.2017 15:30:43
		Возврат;

	КонецЕсли;

	Если ПустаяСтрока(Код) Тогда

		УстановитьНовыйКод();	//	LNK 30.09.2022 05:33:34

	КонецЕсли;

	Если СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Подарок И НЕ УчитыватьПодарокКакПродажу Тогда

		ПроверитьВозможностьДаренияПодарковИзСписка(Отказ);

	КонецЕсли;

	ОчиститьНеиспользуемыеРеквизиты();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Попытка 	
		Если НЕ ДополнительныеСвойства.ЭтоНовый Тогда
			Если ЭтотОбъект.ЗначениеСкидкиНаценки <> ДополнительныеСвойства.ЗначениеСкидкиНаценки тогда // Сюда не заходило
				ЗаписатьИзмененияСкидокВРС();
				Если  ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда
					ЗаписатьДляBigQuery();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры

//	LNK 09.01.2021 10:16:13
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)


КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	Если ЭтоГруппа Тогда

		Возврат;

	КонецЕсли;

	Если СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение 
		ИЛИ СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Подарок Тогда
		УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ОбластьПредоставления");
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УсловияПредоставленияСкидокНаценок.Ссылка
		|ИЗ
		|	Справочник.УсловияПредоставленияСкидокНаценок КАК УсловияПредоставленияСкидокНаценок
		|ГДЕ
		|	УсловияПредоставленияСкидокНаценок.Ссылка В (&Массив)
		|	И УсловияПредоставленияСкидокНаценок.ОбластьОграничения = &ОбластьОграниченияВСтроке";
		
		ТаблицаУсловияПредоставления = УсловияПредоставления.Выгрузить();
		
		Запрос.УстановитьПараметр("Массив", ТаблицаУсловияПредоставления.ВыгрузитьКолонку("УсловиеПредоставления"));
		Запрос.УстановитьПараметр("ОбластьОграниченияВСтроке", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке);
		
		Если Запрос.Выполнить().Пустой()
			И ТаблицаУсловияПредоставления.Количество() > 0
			И ОбластьПредоставления <> Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе Тогда
				
				ТекстОшибки = НСтр("ru = 'Область предоставления отличается от ""В документе"": нет условий с областью ограничения ""В Строке""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект,
					"ОбластьПредоставления",
					,
					Отказ
				);
				
		КонецЕсли;
	
	КонецЕсли;
	
	// +HVOYA. 26.09.2016 13:43:33, Львова Е.А.
	Если НЕ ВыдатьСкидочныйКупон Тогда
		
		УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "НоменклатураСкидочногоКупона");
		УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ВариантВыдачиКупона");
		
	КонецЕсли;
	// -HVOYA. 26.09.2016 13:43:36, Львова Е.А.
	
	Если СпособПредоставления <> Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦены Тогда
		УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ВидЦены");
	КонецЕсли;
	
	Если СпособПредоставления <> Перечисления.СпособыПредоставленияСкидокНаценок.Подарок 
		ИЛИ ПодарокИзКорзиныПокупателя Тогда
		УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "НаборПодарков");
		УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "НаборПодарков.Номенклатура");
		УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "НаборПодарков.Количество");
		УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "НаборПодарков.КоличествоУпаковок");
		УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "НаборПодарков.Характеристика");
	Иначе		
		УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "НаборПодарков.Характеристика");
		ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Новый Массив, Отказ, Новый Структура("ИмяТЧ", "НаборПодарков"));	
	КонецЕсли;
	
	Если СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Подарок Тогда

		Если НЕ ПодарокИзКорзиныПокупателя И НЕ ПодарокИзСписка Тогда

			ТекстСообщения = НСтр("ru='Необходимо указать режим предоставления подарков (из корзины или из списка)'");
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект,
			"ПодарокИзКорзиныПокупателя",
			,
			Истина
			);
		КонецЕсли;

	Иначе

		УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "КоличествоПодарковИзКорзиныПокупателя");

	КонецЕсли;
	
	Если СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ПакетКупоновКратныйСумме Тогда
		
		ВставитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ЗначениеСкидкиНаценки");

	ИначеЕсли СпособПредоставления <> Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение Тогда

		УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ТекстСообщения");

	КонецЕсли;
	
	Если СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыПредыдущейПокупки Тогда

		УсловиеНайдено = Ложь;
		Для Каждого СтрокаУсловия ИЗ УсловияПредоставления Цикл
			ДанныеУсловия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаУсловия.УсловиеПредоставления,
																		"ВариантОпределенияПериодаНакопительнойСкидки, УсловиеПредоставления");
			Если ДанныеУсловия.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж
				И ДанныеУсловия.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ПредыдущаяПокупка Тогда
				УсловиеНайдено = Истина;
			КонецЕсли;
		КонецЦикла;

		Если НЕ УсловиеНайдено Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Для использования скидки ""%1"" необходимо выбрать условие ""За накопленный объем продаж за предыдущую покупку"".'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СпособПредоставления);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект,
			"УсловияПредоставления",
			,
			Ложь);
		КонецЕсли;

	ИначеЕсли СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ЗапретРозничнойПродажи Тогда
		
		Если НЕ ЗначениеЗаполнено(СегментНоменклатурыПредоставления) Тогда
			ТекстСообщения = НСтр("ru='Не указан сегмент номенклатуры предоставления'");
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект,
			"СегментНоменклатурыПредоставления",
			,
			Истина);
		КонецЕсли;
		
		ТекстСообщения = "";
		Если УсловияПредоставления.Количество() = 0 Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru='Если не заданы временные условия, то запрет продаж не будет действовать.'");
		Иначе
			ЕстьВременноеУсловие = Ложь;
			Для Каждого СтрокаУсловия Из УсловияПредоставления Цикл
				Если СтрокаУсловия.УсловиеПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи Тогда
					ЕстьВременноеУсловие = Истина;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЕстьВременноеУсловие Тогда
				Отказ = Истина;
				ТекстСообщения = НСтр("ru='Если не заданы временные условия, то запрет продаж не будет действовать.'") + Символы.ПС;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект,
			"УсловияПредоставления",
			,
			Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//	LNK 30.09.2022 05:29:15
Процедура ПриУстановкеНовогоКода(СтандартнаяОбработка, Префикс)

	а = 22;

КонецПроцедуры

//	LNK 26.02.2024 15:09:59
Процедура ПриКопировании(ОбъектКопирования)

	Код = "";

КонецПроцедуры
	
#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, ИмяРеквизита)

	ИндексРеквизита = ПроверяемыеРеквизиты.Найти(ИмяРеквизита);
	Если ИндексРеквизита <> Неопределено Тогда
		ПроверяемыеРеквизиты.Удалить(ИндексРеквизита);
	КонецЕсли;
КонецПроцедуры

Процедура ВставитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, ИмяРеквизита)	//	LNK 31.08.2020 10:31:43

	ИндексРеквизита = ПроверяемыеРеквизиты.Найти(ИмяРеквизита);

	Если ИндексРеквизита = Неопределено Тогда

		ПроверяемыеРеквизиты.Добавить(ИмяРеквизита);

	КонецЕсли;

КонецПроцедуры

Процедура ОчиститьНеиспользуемыеРеквизиты()

	Если ЭтоГруппа Тогда

		Возврат;

	КонецЕсли;
	
	Если СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦены Тогда
		
		ЗначениеСкидкиНаценки = Неопределено;
		
		ЦеновыеГруппы.Очистить();
		
	ИначеЕсли СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Процент Тогда
		
		ВидЦены              = Неопределено;
		
	ИначеЕсли СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма Тогда
		
		ВидЦены = Неопределено;
		
		Если ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе Тогда
			
			ЦеновыеГруппы.Очистить();
			
		ИначеЕсли ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке Тогда
			
			
		Иначе
			
			ЦеновыеГруппы.Очистить();
			
		КонецЕсли;
	
	ИначеЕсли СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.БесплатнаяДоставка Тогда
	
		ЗначениеСкидкиНаценки = Неопределено;
		ВидЦены = Неопределено;
		ЦеновыеГруппы.Очистить();

		НаборПодарков.Очистить();
	
	ИначеЕсли СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Подарок Тогда
	
		ЗначениеСкидкиНаценки = Неопределено;
		ВидЦены               = Неопределено;
		
		ЦеновыеГруппы.Очистить();

		Если ПодарокИзКорзиныПокупателя Тогда

			НаборПодарков.Очистить();

		КонецЕсли;

	Иначе
		
		НаборПодарков.Очистить();

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьВозможностьДаренияПодарковИзСписка(Отказ)	//	LNK 14.05.2021 10:56:05

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(НаборПодарков.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&НаборПодарков КАК НаборПодарков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.Номенклатура КАК Номенклатура
	|ИЗ
	|	Источник КАК Источник
	|ГДЕ
	|	Источник.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	);
	Запрос.УстановитьПараметр("НаборПодарков", НаборПодарков.Выгрузить(, "Номенклатура"));

	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		Отказ = Истина;
		Сообщить("Отказано! В наборе подарков присутствует подарочный сертификат");

	КонецЕсли;

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
Процедура ЗаписатьИзмененияСкидокВРС() 
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействиеСкидокНаценок.Магазин,
		|	ДействиеСкидокНаценок.СкидкаНаценка КАК СкидкаНаценка
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
		|ГДЕ
		|	(ДействиеСкидокНаценок.Период <= &КонецДня
		|			ИЛИ ДействиеСкидокНаценок.ДатаОкончания >= &НачалоДня)
		|	И ДействиеСкидокНаценок.СкидкаНаценка = &СкидкаНаценка
		|
		|СГРУППИРОВАТЬ ПО
		|	ДействиеСкидокНаценок.Магазин,
		|	ДействиеСкидокНаценок.СкидкаНаценка";
	
	Запрос.УстановитьПараметр("КонецДня", КонецДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("СкидкаНаценка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ДатаИзмененияУсловийСкидокНаценок.СоздатьНаборЗаписей(); 

		НаборЗаписей.Отбор.СкидкаНаценка.Установить(ВыборкаДетальныеЗаписи.СкидкаНаценка);
		НаборЗаписей.Отбор.Магазин.Установить(ВыборкаДетальныеЗаписи.Магазин);

		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Магазин = ВыборкаДетальныеЗаписи.Магазин;
		НоваяЗапись.СкидкаНаценка = ВыборкаДетальныеЗаписи.СкидкаНаценка;
		НоваяЗапись.Дата = ТекущаяДатаСеанса(); 

		НаборЗаписей.Записать();	
	КонецЦикла;
	
	
	
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
Процедура ЗаписатьДляBigQuery() 
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МаркетинговаяАкцияСкидкиНаценки.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТабАкции
		|ИЗ
		|	Документ.МаркетинговаяАкция.СкидкиНаценки КАК МаркетинговаяАкцияСкидкиНаценки
		|ГДЕ
		|	МаркетинговаяАкцияСкидкиНаценки.СкидкаНаценка = &СкидкаНаценка
		|	И МаркетинговаяАкцияСкидкиНаценки.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И МаркетинговаяАкцияСкидкиНаценки.Ссылка.ДатаОкончанияДействия > &ДатаОкончанияДействия
		|	И НЕ МаркетинговаяАкцияСкидкиНаценки.СкидкаНаценка.СегментНоменклатурыПредоставления ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	МаркетинговаяАкцияСкидкиНаценки.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабАкции.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(МаркетинговаяАкцияМагазины.Магазин, ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК Магазин,
		|	ТабАкции.Ссылка.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|	ТабАкции.Ссылка.ДатаОкончанияДействия КАК ДатаОкончанияДействия
		|ИЗ
		|	ТабАкции КАК ТабАкции
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаркетинговаяАкция.Магазины КАК МаркетинговаяАкцияМагазины
		|		ПО ТабАкции.Ссылка = МаркетинговаяАкцияМагазины.Ссылка";
	
	Запрос.УстановитьПараметр("ДатаОкончанияДействия", ТекущаяДата());
	Запрос.УстановитьПараметр("СкидкаНаценка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекДата = ТекущаяДата();
			НаборЗаписей = РегистрыСведений.ОбъектыДляОбработкиBigQuery.СоздатьНаборЗаписей(); 

			НаборЗаписей.Отбор.Объект.Установить(ВыборкаДетальныеЗаписи.Ссылка);
			НаборЗаписей.Отбор.Период.Установить(ТекДата); 
			НаборЗаписей.Отбор.Магазин.Установить(ВыборкаДетальныеЗаписи.Магазин); 
			НаборЗаписей.Отбор.ДатаНачалаДействия.Установить(ВыборкаДетальныеЗаписи.ДатаНачалаДействия); 
			НаборЗаписей.Отбор.ДатаОкончанияДействия.Установить(ВыборкаДетальныеЗаписи.ДатаОкончанияДействия); 
			
			НовЗапись = НаборЗаписей.Добавить();
			НовЗапись.Магазин = ВыборкаДетальныеЗаписи.Магазин;
			НовЗапись.Период = ТекДата;
			НовЗапись.Объект = ВыборкаДетальныеЗаписи.Ссылка;
			НовЗапись.action = "update"; 
			НовЗапись.ДатаНачалаДействия = ВыборкаДетальныеЗаписи.ДатаНачалаДействия; 
			НовЗапись.ДатаОкончанияДействия = ВыборкаДетальныеЗаписи.ДатаОкончанияДействия; 
			НаборЗаписей.Записать(Истина);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры
