#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//	LNK 08.11.2022 12:30:27
Функция ПолучитьПоНомеруМагазина(НомерМагазина)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК ВидЦен
	|ИЗ
	|	Справочник.ВидыЦен КАК ТаблицаСправочник
	|ГДЕ
	|	(ТаблицаСправочник.Наименование = &Наименование
	|			ИЛИ ТаблицаСправочник.Идентификатор = &Идентификатор)
	|	И НЕ ТаблицаСправочник.ПометкаУдаления
	|	И ТаблицаСправочник.ИспользоватьПриПродаже
	|	И ТаблицаСправочник.СпособЗаданияЦены = ЗНАЧЕНИЕ(Перечисление.СпособыЗаданияЦен.Вручную)"
	);
	Запрос.УстановитьПараметр("Наименование" , "Розница [" + Формат(НомерМагазина, "ЧЦ=3; ЧДЦ=; ЧН=000; ЧВН=") + "]");
	Запрос.УстановитьПараметр("Идентификатор", "ЦенаВРознице_" + Формат(НомерМагазина, "ЧЦ=3; ЧДЦ=; ЧН=000; ЧВН="));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

			ВидЦен = Выборка.ВидЦен;

	Иначе	ВидЦен = Справочники.ВидыЦен.СоздатьЭлемент();
			ВидЦен.Наименование    = Запрос.Параметры.Наименование;
			ВидЦен.Идентификатор   = Запрос.Параметры.Идентификатор;
			ВидЦен.ИспользоватьПриПродаже    = Истина;
			ВидЦен.РеквизитДопУпорядочивания = НомерМагазина;
			ВидЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную;
			ВидЦен.ЦенаВключаетНДС   = Истина;

			ВидЦен.ОбменДанными.Загрузка = Истина;
			ВидЦен.Записать();
			ВидЦен = ВидЦен.Ссылка;

	КонецЕсли;

	Возврат ВидЦен;

КонецФункции

#Область ПоддержкаБлокировкиРеквизитов	//	LNK 24.10.2019 07:58:56

// Получает реквизиты объекта, которые необходимо блокировать от изменения
//
// Возвращаемое значение:
//	Массив - блокируемые реквизиты объекта
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	Результат.Добавить("ЦенаВключаетНДС");
	Результат.Добавить("ИспользоватьПриПродаже");
	Результат.Добавить("ИспользоватьПриПередачеМеждуОрганизациями");
	Результат.Добавить("СпособЗаданияЦены");
	Результат.Добавить("Идентификатор");
	Результат.Добавить("СхемаКомпоновкиДанных; РедактироватьСхемуКомпоновкиДанных");
	
	Результат.Добавить("ОкруглятьВБольшуюСторону");
	Результат.Добавить("ПорогСрабатывания");
	Результат.Добавить("АлгоритмРасчетаЦены; КоманднаяПанельФормулаКонструкторФормул");
	
	Результат.Добавить("ЦеновыеГруппы; ФормулыКонструкторФормулТекущейСтроки");
	Результат.Добавить("ПорогиСрабатывания");
	Результат.Добавить("ПравилаОкругленияЦены");
	Результат.Добавить("Формулы");

	Результат.Добавить("ТипЦены");

	Возврат Результат;

КонецФункции

// Возвращает список реквизитов, которые не нужно редактировать
// с помощью обработки группового изменения объектов
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	
	НеРедактируемыеРеквизиты.Добавить("Наименование");
	НеРедактируемыеРеквизиты.Добавить("ИмяПредопределенныхДанных");

	НеРедактируемыеРеквизиты.Добавить("АлгоритмРасчетаЦены");
	НеРедактируемыеРеквизиты.Добавить("Идентификатор");
	НеРедактируемыеРеквизиты.Добавить("РеквизитДопУпорядочивания");
	НеРедактируемыеРеквизиты.Добавить("СхемаКомпоновкиДанных");
	НеРедактируемыеРеквизиты.Добавить("ХранилищеНастроекКомпоновкиДанных");
	НеРедактируемыеРеквизиты.Добавить("ХранилищеСхемыКомпоновкиДанных");
	НеРедактируемыеРеквизиты.Добавить("ЦенаВключаетНДС");

	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Возвращает список реквизитов, которые разрешается редактировать
// с помощью обработки группового изменения объектов.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;

	Если РольДоступна(Метаданные.Роли.АдминистраторСистемы) И ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда

		РедактируемыеРеквизиты.Добавить("ТипЦены");
		РедактируемыеРеквизиты.Добавить("СпособЗаданияЦены");

	КонецЕсли;
	
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

#КонецОбласти

// Функция определяет вид цены по умолчанию.
//
// Параметры:
//  ИспользоватьПриПередачеМеждуОрганизациями - Булево - Признак использования вида цены для передачи между организациями
//
// Возвращаемое значение:
//	СправочникСсылка.ВидыЦен - Найденный вид цен
//
Функция ВидЦеныПоУмолчанию(ИспользоватьПриПередачеМеждуОрганизациями) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ВидыЦен.Ссылка КАК ВидЦены
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	Не ВидыЦен.ПометкаУдаления
	|	И (ВидыЦен.ИспользоватьПриПередачеМеждуОрганизациями = &ИспользоватьПриПередачеМеждуОрганизациями
	|		ИЛИ &ИспользоватьПриПередачеМеждуОрганизациями = Неопределено)
	|");
	
	Запрос.УстановитьПараметр("ИспользоватьПриПередачеМеждуОрганизациями", ИспользоватьПриПередачеМеждуОрганизациями);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 
	   И Выборка.Следующий()
	Тогда
		ВидЦены = Выборка.ВидЦены;
	Иначе
		ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВидЦены;

КонецФункции

// Возвращает структуру с синонимом и схемой компоновки
// данных по имени макета
//
// Параметры:
//	Ссылка - СправочникСсылка.ВидыЦены - ссылка на вид цены
//	ИмяМакета - Строка - имя макета, из которого необходимо получить описание и схему
//
// Возвращаемое значение:
//	Структура - описание и схема компоновки данных
//
Функция ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(Ссылка, ИмяМакета = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Описание",                  "");
	ВозвращаемоеЗначение.Вставить("СхемаКомпоновкиДанных",     Неопределено);
	ВозвращаемоеЗначение.Вставить("НастройкиКомпоновкиДанных", Неопределено);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыЦен.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
	|	ВидыЦен.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
		
		ВозвращаемоеЗначение.Описание = ИмяМакета;
		Если Выборка.Следующий() Тогда
			
			СхемаКомпоновкиДанных = Выборка.ХранилищеСхемыКомпоновкиДанных.Получить();
			Если СхемаКомпоновкиДанных = Неопределено Тогда
				ВозвращаемоеЗначение.СхемаКомпоновкиДанных = СформироватьНовуюСхемуКомпоновкиДанных();
				ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Неопределено;
			Иначе
				ВозвращаемоеЗначение.СхемаКомпоновкиДанных = СхемаКомпоновкиДанных;
				ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.Описание = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).Макеты.Найти(ИмяМакета).Синоним;
		ВозвращаемоеЗначение.СхемаКомпоновкиДанных = Справочники.ВидыЦен.ПолучитьМакет(ИмяМакета);
		Если Выборка.Следующий() Тогда
			ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция определяет реквизиты выбранного вида цены.
//
// Параметры:
//  ВидыЦены - СправочникСсылка.ВидыЦены - Ссылка на вид цены
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного вида цены
//
Функция РеквизитыВидаЦены(ВидЦены) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.Ссылка = &ВидЦены"
	);
	
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЦенаВключаетНДС = Выборка.ЦенаВключаетНДС;
	Иначе
		ЦенаВключаетНДС = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура(
		"ЦенаВключаетНДС"
		, ЦенаВключаетНДС
	);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Осуществляет формирование новой СКД
//
// Возвращаемое значение:
//	СхемаКомпоновкиДанных
//
Функция СформироватьНовуюСхемуКомпоновкиДанных() Экспорт
	
	СКД                         = Новый СхемаКомпоновкиДанных;
	Источник                    = СКД.ИсточникиДанных.Добавить();
	Источник.Имя                = "ИсточникДанныхЦеныНоменклатуры";
	Источник.ТипИсточникаДанных = "Local";
	НаборДанных                 = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя             = "ЦеныНоменклатуры";
	НаборДанных.Запрос          =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,";
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		НаборДанных.Запрос = НаборДанных.Запрос + "
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,";
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		НаборДанных.Запрос = НаборДанных.Запрос + "
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
		|	1 КАК Коэффициент,";
	КонецЕсли;
	
	НаборДанных.Запрос = НаборДанных.Запрос + "
		|	0 КАК Цена
		|{ВЫБРАТЬ
		|	Номенклатура.*,";
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		НаборДанных.Запрос = НаборДанных.Запрос + "
			|	Характеристика.*,";
		КонецЕсли;
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		НаборДанных.Запрос = НаборДанных.Запрос + "
		|	Упаковка.*,
		|	Коэффициент,";
	КонецЕсли;
	
	НаборДанных.Запрос = НаборДанных.Запрос + "
		|	Цена}";
		
	НаборДанных.ИсточникДанных = "ИсточникДанныхЦеныНоменклатуры";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Ложь;
	
	ОбязательныеПоля = Ценообразование.ПолучитьОбязательныеПоляСхемыКомпоновкиДанных();
	
	Для Каждого ОбязательноеПоле Из ОбязательныеПоля Цикл
		
		НовоеПоле             = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле        = ОбязательноеПоле.Ключ;
		НовоеПоле.ПутьКДанным = ОбязательноеПоле.Ключ;
		НовоеПоле.ТипЗначения = ОбязательноеПоле.Значение;
		
	КонецЦикла;
	
	Возврат СКД;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Перем ЗначениеПараметра;
	
	Если Параметры.Свойство("ВыводитьПроизвольныйВидЦен", ЗначениеПараметра) И ЗначениеПараметра = Истина Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДанныеВыбора = Новый СписокЗначений;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыЦен.Ссылка КАК ВидЦен
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.ПометкаУдаления = ЛОЖЬ
		|	И ВидыЦен.ЦенаВключаетНДС = &ЦенаВключаетНДС");
		Запрос.УстановитьПараметр("ЦенаВключаетНДС", Параметры.Отбор.ЦенаВключаетНДС);
		
		// Если в параметрах передан отбор по реквизиту "ИспользоватьПриПередачеМеждуОрганизациями"
		Если Параметры.Отбор.Свойство("ИспользоватьПриПередачеМеждуОрганизациями") Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И ВидыЦен.ИспользоватьПриПередачеМеждуОрганизациями = &ИспользоватьПриПередачеМеждуОрганизациями";
			Запрос.УстановитьПараметр("ИспользоватьПриПередачеМеждуОрганизациями", Параметры.Отбор.ИспользоватьПриПередачеМеждуОрганизациями);
		КонецЕсли;
		// Если в параметрах передан отбор по реквизиту "ИспользоватьПриПродаже"
		Если Параметры.Отбор.Свойство("ИспользоватьПриПродаже") Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И ВидыЦен.ИспользоватьПриПродаже = &ИспользоватьПриПродаже";
			Запрос.УстановитьПараметр("ИспользоватьПриПродаже", Параметры.Отбор.ИспользоватьПриПродаже);
		КонецЕсли;
		
		ДанныеВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидЦен"));
		
		ДанныеВыбора.Добавить(Справочники.ВидыЦен.ПустаяСсылка(), НСтр("ru='<произвольная>'"));
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#КонецЕсли
