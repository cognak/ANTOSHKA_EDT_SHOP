
&НаКлиенте
Перем НеПроверятьИзменения;

#Область ОбработчикиСобытийФормы

//Процедура - обработчик события "ПриСозданииНаСервере" формы
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда

		Возврат;

	КонецЕсли;

	Номенклатура = Параметры.Номенклатура;
	Параметры.Свойство("КоличествоНеИзменять"  , КоличествоНеИзменять);
	Параметры.Свойство("КоличествоСертификатов", КоличествоСертификатов);

	Если КоличествоНеИзменять Тогда

	//	специальный режим ...
		ТолькоПросмотр = Ложь;

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	Номенклатура.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
	|	Номенклатура.Номинал КАК Номинал
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура"
	);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда

		РеквизитыВладельца = Результат.Выбрать();
		РеквизитыВладельца.Следующий();

		Если РеквизитыВладельца.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда

			Заголовок = НСтр("ru = 'Номера сертификатов номинала '")
				+ Формат(РеквизитыВладельца.Номинал, "ЧДЦ=2; ЧН=0,00; ЧГ=") + " грн.";
			Элементы.СерийныйНомер.Заголовок = Строка("Номер сертификата");

		Иначе

			Заголовок = НСтр("ru = 'Номера купонов для номенклатуры'");
			Элементы.СерийныйНомер.Заголовок = Строка("Номер купона");

		КонецЕсли;

		Заголовок = Заголовок
		+ " [" + СокрЛП(РеквизитыВладельца.Код) + "] «" + СокрЛП(РеквизитыВладельца.Наименование) + "»";

		ЗаполнитьТаблицуСерийныхНомеров(Параметры.МассивСерийныхНомеров);

		ИспользоватьПодключаемоеОборудование = ЗначениеНастроекПовтИсп.ИспользоватьПодключаемоеОборудование();

		Если ТолькоПросмотр Тогда

			ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
			Элементы.СерийныеНомера.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
			Элементы.ЗавершитьВводСерийныхНомеров.Доступность = Ложь;

		КонецЕсли;

	Иначе

		Отказ = Истина;
		Сообщить("Отказано! Владелец серийных номеров НЕ указан.");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// МеханизмВнешнегоОборудования
	Если ИспользоватьПодключаемоеОборудование
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда

		ОписаниеОшибки = "";

		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:
			                      |""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;

	КонецЕсли;
	// Конец МеханизмВнешнегоОборудования

	КоличествоТекущее = СерийныеНомера.Количество();

КонецПроцедуры

//Процедура - обработчик события "ПередЗакрытием" формы
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если НеПроверятьИзменения = Неопределено И Модифицированность Тогда
		Ответ = Вопрос(НСтр("ru = 'Список номеров подарочных сертификатов был изменен.
		   |Перенести изменения в документ?'"), РежимДиалогаВопрос.ДаНетОтмена);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			НеПроверятьИзменения = Истина;
			СохранитьВводСерийныхНомеров();
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
			НеПроверятьИзменения = Истина;
			ОтменитьВводСерийныхНомеров();
		Иначе
			НеПроверятьИзменения = Неопределено;
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	// МеханизмВнешнегоОборудования
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец МеханизмВнешнегоОборудования

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда

		Если ИмяСобытия = "ScanData" Тогда

			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;

			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекКод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
			
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

КонецПроцедуры

//Процедура - обработчик события "ОбработкаВыбора" формы
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
    Если ИсточникВыбора.ИмяФормы = "Обработка.ЗаполнениеДиапазонаСерийныхНомеров.Форма.Форма" Тогда
			
		ОбработкаВыбораДиапазонаНомеров(ВыбранноеЗначение);
				
		Если Окно <> Неопределено Тогда
			
			Окно.Активизировать();
			
		КонецЕсли;
		
	КонецЕсли;
		    
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура СерийныеНомераПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ПронумероватьСтроки();

КонецПроцедуры

&НаКлиенте
Процедура СерийныйНомерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.СерийныеНомера.ТекущиеДанные;

	Если НЕ ТекущиеДанные = Неопределено Тогда

		ПараметрыВыбора = Новый Структура("Отбор", Новый Структура("ПометкаУдаления", Ложь));
		ПараметрыВыбора.Отбор.Вставить("Владелец", Номенклатура);
		ПараметрыВыбора.Отбор.Вставить("ТекущиеДанные", ТекущиеДанные.СерийныйНомер);

		СписокСсылок = Новый Массив;

		Для каждого СтрокаТаблицы Из СерийныеНомера Цикл

			Если НЕ СтрокаТаблицы.СерийныйНомер = ТекущиеДанные.СерийныйНомер Тогда

				СписокСсылок.Добавить(СтрокаТаблицы.СерийныйНомер);

			КонецЕсли;

		КонецЦикла;

		Если НЕ СписокСсылок.Количество() = 0 Тогда

			ПараметрыВыбора.Отбор.Вставить("Ссылка", СписокСсылок);

		КонецЕсли;

		ОткрытьФорму("Справочник.СерийныеНомера.ФормаВыбора", ПараметрыВыбора, Элемент, ЭтаФорма,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СерийныеНомераПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	КоличествоТекущее = СерийныеНомера.Количество();

КонецПроцедуры

&НаКлиенте
Процедура СерийныеНомераПослеУдаления(Элемент)

	КоличествоТекущее = СерийныеНомера.Количество();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

//Процедура - обработчик команды "ЗавершитьВводСерийныхНомеров"
//
&НаКлиенте
Процедура ЗавершитьВводСерийныхНомеровВыполнить()

	Если НЕ СерийныеНомера.НайтиСтроки(Новый Структура("СерийныйНомер", ПредопределенноеЗначение("Справочник.СерийныеНомера.ПустаяСсылка"))).Количество() = 0 Тогда

		ПоказатьОповещениеПользователя("Отказано!",, "Не все серийные номера в списке заполнены.", БиблиотекаКартинок.Ошибка32);
		Возврат;

	КонецЕсли;

	Если КоличествоНеИзменять Тогда	//	LNK 13.03.2020 10:07:53

		Если НЕ СерийныеНомера.Количество() = КоличествоСертификатов Тогда

			ПоказатьОповещениеПользователя("Отказано!",, "Количество серийных номеров должно быть равно " + Формат(КоличествоСертификатов, "ЧДЦ=3; ЧН=0,000; ЧГ="), БиблиотекаКартинок.Ошибка32);
			Возврат;

		КонецЕсли;

	КонецЕсли;

	Если ПроверитьУникальностьСерийныхНомеров() Тогда

		НеПроверятьИзменения = Истина;

		Если Модифицированность Тогда
			СохранитьВводСерийныхНомеров();
		Иначе
			ОтменитьВводСерийныхНомеров();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//Процедура - обработчик команды "СоздатьДиапазон"
//
&НаКлиенте
Процедура СоздатьДиапазон(Команда)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Номенклатура", Номенклатура);
	
	ОткрытьФорму("Обработка.ЗаполнениеДиапазонаСерийныхНомеров.Форма", ПараметрыЗаполнения ,ЭтотОбъект);

КонецПроцедуры

//Процедура - обработчик команды "ВыбратьДиапазон"
//
&НаКлиенте
Процедура ВыбратьДиапазон(Команда)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Номенклатура", Номенклатура);
	ПараметрыЗаполнения.Вставить("ВыборВДокумент", Истина);
	
	ОткрытьФорму("Обработка.ЗаполнениеДиапазонаСерийныхНомеров.Форма", ПараметрыЗаполнения ,ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

//Закрывает форму и передает в параметр закрытия массив
//Серийных номеров
&НаКлиенте
Процедура СохранитьВводСерийныхНомеров()

	МассивСерийныхНомеров = Новый Массив;

	Для Каждого СтрокаТаблицы Из СерийныеНомера Цикл

		Если ЗначениеЗаполнено(СтрокаТаблицы.СерийныйНомер) Тогда

			МассивСерийныхНомеров.Добавить(СтрокаТаблицы.СерийныйНомер);

		КонецЕсли;

	КонецЦикла;

	Закрыть(МассивСерийныхНомеров);

КонецПроцедуры

//Закрывает форму
//
&НаКлиенте
Процедура ОтменитьВводСерийныхНомеров()

	Закрыть();

КонецПроцедуры

&НаКлиенте
Функция ПроверитьУникальностьСерийныхНомеров()

	Отказ = Ложь;

	Для каждого СтрокаТаблицы Из СерийныеНомера Цикл

		СписокСтрок = СерийныеНомера.НайтиСтроки(Новый Структура("СерийныйНомер", СтрокаТаблицы.СерийныйНомер));

		Если СписокСтрок.Количество() > 1 Тогда

			Отказ = Истина;
			ПоказатьОповещениеПользователя("Отказано!",
				, "Серийный номер «" + СтрокаТаблицы.СерийныйНомер + "» не уникален в текущем списке номеров."
				, БиблиотекаКартинок.Ошибка32
			);
			Прервать;

		КонецЕсли;

	КонецЦикла;

	Возврат НЕ Отказ;

КонецФункции

//Добавляет полученный массив в таблицу серийных номеров
//
&НаСервере
Процедура ОбработкаВыбораДиапазонаНомеров(АдресВХранилище)
	
	МассивСерийныхНомеров = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	СерийныеНомераНаСервере = РеквизитФормыВЗначение("СерийныеНомера");
	        	
	Для каждого СерийныйНомер Из МассивСерийныхНомеров Цикл
		
		Если СерийныеНомераНаСервере.Найти(СерийныйНомер, "СерийныйНомер") = Неопределено Тогда
			
			СтрокаСерийныхНомеров = СерийныеНомераНаСервере.Добавить();
			СтрокаСерийныхНомеров.СерийныйНомер = СерийныйНомер;			
			
		КонецЕсли;	
				
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(СерийныеНомераНаСервере, "СерийныеНомера");
			
КонецПроцедуры	

&НаКлиенте	//	LNK 29.01.2020 15:02:14
Процедура ПронумероватьСтроки()

	НомерСтроки = 0;

	Для каждого СтрокаТаблицы Из СерийныеНомера Цикл

		НомерСтроки = НомерСтроки + 1;
		СтрокаТаблицы.НомерСтроки = НомерСтроки;

	КонецЦикла;

КонецПроцедуры

&НаСервере	//	LNK 02.03.2020 06:50:44
Процедура ЗаполнитьТаблицуСерийныхНомеров(МассивСерийныхНомеров)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СерийныеНомера.Ссылка КАК СерийныйНомер,
	|	СерийныеНомера.ПометкаУдаления КАК ПометкаУдаления,
	|	СерийныеНомера.КодСерийногоНомера КАК КодСерийногоНомера
	|ИЗ
	|	Справочник.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	СерийныеНомера.Ссылка В(&МассивСерийныхНомеров)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодСерийногоНомера"
	);
	Запрос.УстановитьПараметр("МассивСерийныхНомеров", МассивСерийныхНомеров);
	
	Выборка = Запрос.Выполнить().Выбрать();

	НомерСтроки = 0;

	Пока Выборка.Следующий() Цикл

		НомерСтроки = НомерСтроки + 1;

		СтрокаТаблицы = СерийныеНомера.Добавить();
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		СтрокаТаблицы.СерийныйНомер   = Выборка.СерийныйНомер;
		СтрокаТаблицы.ПометкаУдаления = Выборка.ПометкаУдаления;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область МеханизмВнешнегоОборудования

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) 
	
	МаскаСертификата = Лев(Штрихкод, ПодарочныеСертификатыПовтИсп.ДлинаМаски());

	Если ПодарочныеСертификатыПовтИсп.МаскиСертификатов().Получить(МаскаСертификата) = Истина Тогда

		СтруктураДействий = Новый Структура("ПроверкаПодарочныхСертификатовПродажа"
			, Новый Структура(
				"Магазин, РесурсWebRetailДоступен"
				, ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин
				, РозничныеПродажиСлужебный.РесурсWebRetailДоступен()
			)
		);

	Иначе

		СтруктураДействий = Новый Структура("ПроверкаСерийныхНомеров");

	КонецЕсли;
	
	Возврат ПодключаемоеОборудованиеРТ.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции	

&НаСервере
Функция ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента) Экспорт
	
	Если НЕ СтруктураПараметров.НеизвестныеДанныеПО Тогда

		Если СтруктураПараметров.Действие = "ПроверкаСерийныхНомеров" Тогда

			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда

				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				СтруктураПараметровКлиента.Вставить("СерийныеНомера", Новый Массив);

				Для каждого СерийныйНомер Из СтруктураПараметров.ЗначенияПоиска Цикл

					СтруктураПараметровКлиента.СерийныеНомера.Добавить(СерийныйНомер);

					СтрокиТаблицы = СерийныеНомера.НайтиСтроки(Новый Структура("СерийныйНомер", СерийныйНомер));

					Если НЕ ТолькоПросмотр И СтрокиТаблицы.Количество() = 0 Тогда

						СтрокаТаблицы = СерийныеНомера.Добавить();
						СтрокаТаблицы.СерийныйНомер = СерийныйНомер;
						Модифицированность = Истина;

					КонецЕсли;

				КонецЦикла;

			КонецЕсли;				
			
		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаПодарочныхСертификатовПродажа" Тогда

			ДанныеСертификата   = СтруктураПараметров.ЗначенияПоиска;
			ТекстПредупреждения = "";

			Если ДанныеСертификата.Найден = Истина Тогда

				Если Номенклатура = ДанныеСертификата.Владелец Тогда

					СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
					СтруктураПараметровКлиента.Вставить("СерийныеНомера", Новый Массив);
					СтруктураПараметровКлиента.СерийныеНомера.Добавить(ДанныеСертификата.СерийныйНомер);

					СтрокиТаблицы = СерийныеНомера.НайтиСтроки(Новый Структура("СерийныйНомер", ДанныеСертификата.СерийныйНомер));

					Если НЕ ТолькоПросмотр И СтрокиТаблицы.Количество() = 0 Тогда

						СтрокаТаблицы = СерийныеНомера.Добавить();
						СтрокаТаблицы.СерийныйНомер = ДанныеСертификата.СерийныйНомер;
						Модифицированность = Истина;

					КонецЕсли;

				Иначе

					ТекстПредупреждения = "Владелец сертификата НЕ соответствует текущему.";

				КонецЕсли;

			Иначе

				ТекстПредупреждения = "Подарочный сертификат НЕ найден.";

			КонецЕсли;

			Если НЕ ПустаяСтрока(ТекстПредупреждения) Тогда

				СтруктураПараметровКлиента.Вставить("ТекстПредупреждения", ТекстПредупреждения);

			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураПараметровКлиента;
	
КонецФункции

// Обработка магнитного или штрихового кода на клиенте
//
// Параметры
//  СтруктураПараметровКлиента - структура параметров
//
&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод)
						
	Если СтруктураПараметровКлиента.Свойство("ТекстПредупреждения") Тогда
		
		ПоказатьПредупреждение(, СтруктураПараметровКлиента.ТекстПредупреждения);
	
	ИначеЕсли СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") 
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
		
		СтрокаСообщения = НСтр("ru = 'Данные по коду не найдены: %1%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекКод);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
						
	ИначеЕсли СтруктураПараметровКлиента.Свойство("СерийныеНомера") И НЕ СтруктураПараметровКлиента.СерийныеНомера.Количество() = 0 Тогда
		
		СерийныйНомер = СтруктураПараметровКлиента.СерийныеНомера[СтруктураПараметровКлиента.СерийныеНомера.ВГраница()];
		СтрокиТаблицы = СерийныеНомера.НайтиСтроки(Новый Структура("СерийныйНомер", СерийныйНомер));

		Если НЕ СтрокиТаблицы.Количество() = 0 Тогда

			Элементы.СерийныеНомера.ТекущаяСтрока = СтрокиТаблицы[0].ПолучитьИдентификатор();
			ПронумероватьСтроки();

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти







