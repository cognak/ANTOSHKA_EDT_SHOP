////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// Установаливает наименование серийного номера
//
&НаКлиенте
Процедура УстановитьНаименование()
	
	Если ТипСерийногоНомера = ПредопределенноеЗначение("Перечисление.ТипыСерийныхНомеровСертификатов.Штриховой") Тогда
		
		Объект.Наименование = Штрихкод;
		
	Иначе
		
		Объект.Наименование = Объект.КодСерийногоНомера;
		
	КонецЕсли;
	
КонецПроцедуры 

//Управляет доступностью и видимостью элементов формы на сервере
//
&НаСервере
Процедура УправлениеЭлементамиФормыНаСервере()
		
	Элементы.КодСерийногоНомера.Доступность               = НЕ (ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой);
	Элементы.Штрихкод.Доступность                         = НЕ (ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Магнитный);
	Элементы.ТипШтрихкода.Доступность                     = Элементы.Штрихкод.Доступность;
	Элементы.Штрихкод.АвтоОтметкаНезаполненного           = Элементы.Штрихкод.Доступность;
	Элементы.ТипШтрихкода.АвтоОтметкаНезаполненного       = Элементы.Штрихкод.Доступность;
	Элементы.Штрихкод.ОтметкаНезаполненного               = Элементы.Штрихкод.Доступность;
	Элементы.ТипШтрихкода.ОтметкаНезаполненного           = Элементы.Штрихкод.Доступность;
		
КонецПроцедуры

// МеханизмВнешнегоОборудования
&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) 
	
	ТипШтрихкода = ПодключаемоеОборудованиеРТ.ОпределитьТипШтрихкода(Штрихкод); 	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//Процедура - обработчик события "ПриСозданииНаСервере" формы
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
		
	ТипСерийногоНомера = Объект.Владелец.ТипСерийногоНомера;
	
	УправлениеЭлементамиФормыНаСервере();
	
	Если НЕ ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Магнитный Тогда
		
		СтруктураШтрихкода = ПодключаемоеОборудованиеРТ.ПолучитьШтрихкод(Объект.Ссылка);
				
		Если СтруктураШтрихкода <> Неопределено Тогда
			
			Штрихкод          = СтруктураШтрихкода.Штрихкод;
			ТипШтрихкода      = СтруктураШтрихкода.ТипШтрихкода;
			
		КонецЕсли;

		Если ТолькоПросмотр И РольДоступна("АдминистраторСистемы") И ПустаяСтрока(Штрихкод) Тогда

			ТолькоПросмотр = НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим();	//	LNK 07.02.2020 13:22:06

		КонецЕсли;
		
	КонецЕсли;

	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекПовтИсп.ИспользоватьПодключаемоеОборудование();

КонецПроцедуры

//Процедура - обработчик события "ПриОткрытии" формы
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Владелец.Пустая() Тогда
		
		Отказ = Истина;
		ПоказатьПредупреждение(, НСтр("ru = 'Не задан владелец номера подарочного сертификата'"));
	Иначе
		// МеханизмВнешнегоОборудования
		Если ИспользоватьПодключаемоеОборудование
			И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			ОписаниеОшибки = "";
			
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
			
			Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
				ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:
				|""%ОписаниеОшибки%"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		// Конец МеханизмВнешнегоОборудования
		
	КонецЕсли;	

КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
&НаКлиенте
Процедура ПриЗакрытии()

	// МеханизмВнешнегоОборудования
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец МеханизмВнешнегоОборудования
			
КонецПроцедуры // ПриЗакрытии()

//Процедура - обработчик события "ПриЗаписиНаСервере" формы
//
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если (ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой
		ИЛИ ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Смешанный) Тогда
		
		НаборЗаписейШтриходов = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		НаборЗаписейШтриходов.Отбор.Владелец.Установить(ТекущийОбъект.Ссылка);
		НаборЗаписейШтриходов.Записать();
		
		ЗаписьШтрихкода              = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		ЗаписьШтрихкода.Владелец     = ТекущийОбъект.Ссылка;
		ЗаписьШтрихкода.ТипШтрихкода = ТипШтрихкода;
		ЗаписьШтрихкода.Штрихкод     = Штрихкод;
				
		Если ЗаписьШтрихкода.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128 Тогда
			
			ЗаписьШтрихкода.ПредставлениеШтрихкода = ЗаписьШтрихкода.Штрихкод;
			
		КонецЕсли;
		
		Если НЕ ЗаписьШтрихкода.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ	Отказ Тогда
			ЗаписьШтрихкода.Записать(Истина);			
		КонецЕсли;
		
	Иначе // Магнитная карта не должна иметь штрихкода
		
		НаборЗаписейШтриходов = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		НаборЗаписейШтриходов.Отбор.Владелец.Установить(ТекущийОбъект.Ссылка);
		НаборЗаписейШтриходов.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура - обработчик события "ПередЗаписьюНаСервере" формы
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Магнитный
		И НЕ ПустаяСтрока(Штрихкод) Тогда		
		Штрихкод = "";                   		
	КонецЕсли;
	
	Если ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой Тогда		
		ТекущийОбъект.Наименование = Штрихкод;
	Иначе
		ТекущийОбъект.Наименование = ТекущийОбъект.КодСерийногоНомера;
	КонецЕсли;
	
КонецПроцедуры

//Процедура - обработчик события "ОбработкаПроверкиЗаполненияНаСервере" формы
//
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой Тогда
		Если ПроверяемыеРеквизиты.Найти("КодСерийногоНомера") <> Неопределено Тогда       			
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("КодСерийногоНомера"));			
		КонецЕсли;	                                                                       		
	КонецЕсли;	
	
	Если ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Магнитный Тогда
		Если ПроверяемыеРеквизиты.Найти("Штрихкод") <> Неопределено Тогда                 			
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Штрихкод"));         			
		КонецЕсли;			
		Если ПроверяемыеРеквизиты.Найти("ТипШтрихкода") <> Неопределено Тогда             			
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ТипШтрихкода"));     			
		КонецЕсли;	                                                                      				
	КонецЕсли;	

КонецПроцедуры

// Процедура - обработчик команды "ОбработкаОповещения".
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[1] = Неопределено Тогда
				Штрихкод = Параметр[0];
			Иначе
				Штрихкод = Параметр[1][1];
			КонецЕсли;             			
			ПолученШтрихкодИзСШК(Штрихкод);
						
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

КонецПроцедуры // ОбработкаОповещения()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ

//Процедура - обработчик события "ПриОткрытии" поля "КодСерийногоНомера"
//
&НаКлиенте
Процедура КодСерийногоНомераПриИзменении(Элемент)
	
	УстановитьНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодПриИзменении(Элемент)
	ПолученШтрихкодИзСШК(Штрихкод); 
КонецПроцедуры
