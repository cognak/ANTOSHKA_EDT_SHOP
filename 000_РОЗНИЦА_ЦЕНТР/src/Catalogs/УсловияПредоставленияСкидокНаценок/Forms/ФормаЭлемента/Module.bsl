
&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ПредыдущееЗначениеТипаПолучателейСкидок;

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	СкидкиНаценкиСерверПереопределяемый.ПолучитьСписокЗначенийУсловийПредоставленияСкидки(Элементы.УсловиеПредоставления.СписокВыбора);
	СкидкиНаценкиСерверПереопределяемый.ПолучитьСписокЗначенийВариантовНакопленияКумулятивнойСкидкиНаценки(Элементы.ВариантНакопления.СписокВыбора);
	ЗаполнитьСписокВыбораТипаПолучателей();
	
	УсловиеПредоставленияПриИзмененииНаСервере();
	КритерийПримененияЗаОбъемПродажПриИзмененииНаСервере();
	ВариантОпределенияПериодаНакопительнойСкидкиПриИзмененииНаСервере();
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Наименование = СформироватьАвтоНаименованиеНаСервере();
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.КомплектПокупки);
	Иначе
		СформироватьАвтоНаименованиеНаСервере();
	КонецЕсли;
	
	Для каждого ВариантНаименования Из Элементы.Наименование.СписокВыбора Цикл
		Если Объект.Наименование = ВариантНаименования.Значение Тогда
			ИспользуетсяАвтоНаименование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Ложь;

//	LNK 02.08.2018 12:59:25
	ТипПолучателяСкидкиЗагрузка = Новый Структура;
	ТипПолучателяСкидкиЗагрузка.Вставить("ИнформационныеКарты", "КодКарты");
	ТипПолучателяСкидкиЗагрузка.Вставить("ФизическиеЛица"     , "ИНН");
	ТипПолучателяСкидкиЗагрузка.Вставить("Контрагенты"        , "IDN");
	ТипПолучателяСкидкиЗагрузка.Вставить("Номенклатура"       , "IDN");

КонецПроцедуры

&НаКлиенте	//	LNK 02.08.2018 13:04:16
Процедура ПриОткрытии(Отказ)

	УстановитьДоступностьКнопкиЗагрузкиИзExcell();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.КомплектПокупки);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ОбновитьАвтонаименование(Модифицированность);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.КомплектПокупки);
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВалютаОграниченияЗаНакопленныйОбъемПродажПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВариантНакопленияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВариантОпределенияПериодаНакопительнойСкидкиПриИзменении(Элемент)
	
	ВариантОпределенияПериодаНакопительнойСкидкиПриИзмененииНаСервере();
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикОплатыПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПользователейПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеУсловияПредоставленияЗаНакопленныйОбъемПродажПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеУсловияПредоставленияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КратностьНомераЧека1ПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СформироватьАвтоНаименованиеНаКлиенте();
	ВыбранныйЭлемент = ВыбратьИзСписка(Элементы.Наименование.СписокВыбора, Элемент);
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Объект.Наименование = ВыбранныйЭлемент.Значение;
		НаименованиеИзмененоПользователем = Истина;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	НаименованиеИзмененоПользователем = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбластьОграниченияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПериодНакопленияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СегментНоменклатурыЗаНакопленныйОбъемПродажПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СегментНоменклатурыОграниченияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СегментНоменклатурыПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТипПолучателяСкидкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПредыдущееЗначениеТипаПолучателейСкидок = ТипПолучателяСкидки;
КонецПроцедуры

&НаКлиенте
Процедура ТипПолучателяСкидкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ПредыдущееЗначениеТипаПолучателейСкидок = ТипПолучателяСкидки;
КонецПроцедуры

&НаКлиенте
Процедура ТипПолучателяСкидкиПриИзменении(Элемент)
	
	Если НЕ ПредыдущееЗначениеТипаПолучателейСкидок = ТипПолучателяСкидки
		И Объект.Получатели.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Изменен тип получателя скидок. Очистить таблицу ""Получателей""?'");
		
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			
			ТипПолучателяСкидки = ПредыдущееЗначениеТипаПолучателейСкидок;
			Возврат;
			
		КонецЕсли;
		
		Объект.Получатели.Очистить();
		Модифицированность = Истина;

	КонецЕсли;
	
	ОбновитьАвтонаименование(Истина);
	УстановитьДоступностьКнопкиЗагрузкиИзExcell();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипСравненияЗаНакопленныйОбъемПродажПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТипСравненияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПредоставленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПредоставленияПриИзменении(Элемент)
	
	УсловиеПредоставленияПриИзмененииНаСервере();
	Объект.Наименование = "";
	
	ОбновитьАвтонаименование(Истина);
	УстановитьДоступностьКнопкиЗагрузкиИзExcell();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "ВремяДействия"

&НаКлиенте
Процедура ВремяДействияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "Получатели"

&НаКлиенте
Процедура ПолучателиПослеУдаления(Элемент)
	
	Объект.Наименование = СформироватьАвтоНаименованиеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока и Не Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		ЭлементСпискаВыбора = Элементы.ТипПолучателяСкидки.СписокВыбора.НайтиПоЗначению(ТипПолучателяСкидки);
		ИдентификаторЭлемента = ЭлементСпискаВыбора.ПолучитьИдентификатор();
		
		ПустоеЗначениеТипа = ТипыПолучателейСкидок.НайтиПоИдентификатору(ИдентификаторЭлемента).Значение;
		
		ТекущиеДанные.Получатель = ПустоеЗначениеТипа;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Объект.Наименование = СформироватьАвтоНаименованиеНаКлиенте();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "КомплектПокупки"

&НаКлиенте
Процедура КомплектПокупкиКоличествоУпаковокПриИзменении(Элемент)
	
	ПриИзмененииУпаковки(Элементы.КомплектПокупки.ТекущиеДанные)
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектПокупкиНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.КомплектПокупки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.КомплектПокупки, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
КонецПроцедуры

&НаКлиенте
Процедура КомплектПокупкиПослеУдаления(Элемент)
	
	Объект.Наименование = СформироватьАвтоНаименованиеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектПокупкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Объект.Наименование = СформироватьАвтоНаименованиеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектПокупкиУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЦенообразованиеКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.КомплектПокупки.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура КомплектПокупкиУпаковкаПриИзменении(Элемент)
	
	ПриИзмененииУпаковки(Элементы.КомплектПокупки.ТекущиеДанные)
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектПокупкиХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЦенообразованиеКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.КомплектПокупки.ТекущиеДанные);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект) Тогда
		ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ВариантОпределенияПериодаНакопительнойСкидкиПриИзмененииНаСервере()
	
	Если Объект.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ВесьПериод
		ИЛИ Объект.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ПредыдущаяПокупка Тогда
		Элементы.ПериодНакопления.Видимость = Ложь;
		Элементы.ДекорацияКратный.Видимость = Ложь;
		Если Объект.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ПредыдущаяПокупка Тогда
			Если Объект.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество Тогда
				Объект.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма;
				ТекстСообщения = НСтр("ru='Вариант периода ""От предыдущей покупки"" рассчитывается только от суммы'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Объект,
				"Объект.КритерийОграниченияПримененияЗаОбъемПродаж",
				,
				Ложь);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Элементы.ПериодНакопления.Видимость = Истина;
		Элементы.ДекорацияКратный.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораТипаПолучателей()

	СкидкиНаценкиСерверПереопределяемый.ПолучитьСписокЗначенийПолучателейСкидок(Элементы.ТипПолучателяСкидки.СписокВыбора);
	
	Если Объект.Получатели.Количество() > 0 Тогда
		
		Получатель = Объект.Получатели[0].Получатель;
		ТипПолучателяСкидки = Получатель.Метаданные().Имя;
	Иначе
		ТипПолучателяСкидки = СкидкиНаценкиСерверПереопределяемый.ПолучитьТипЗначенияПолучателяСкидокПоУмолчанию();
	КонецЕсли;
	
	Для каждого ЭлементСписка Из Элементы.ТипПолучателяСкидки.СписокВыбора Цикл
		
		ЗначениеЭлемента = ЭлементСписка.Значение;
		
		ТипыПолучателейСкидок.Добавить(Справочники[ЗначениеЭлемента].ПустаяСсылка(),ЗначениеЭлемента);
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КритерийПримененияЗаОбъемПродажПриИзменении(Элемент)
	
	КритерийПримененияЗаОбъемПродажПриИзмененииНаСервере();
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

&НаСервере
Процедура КритерийПримененияЗаОбъемПродажПриИзмененииНаСервере()
	
	Если Объект.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество Тогда
		
		Элементы.ВалютаОграниченияЗаНакопленныйОбъемПродаж.Видимость = Ложь;
		
		Если Объект.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ПредыдущаяПокупка Тогда
			Объект.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ПустаяСсылка();
			ТекстСообщения = НСтр("ru='Вариант периода ""От предыдущей покупки"" рассчитывается только от суммы'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Объект,
			"Объект.ВариантОпределенияПериодаНакопительнойСкидки",
			,
			Ложь);
		КонецЕсли;
		
	Иначе
		
		Элементы.ВалютаОграниченияЗаНакопленныйОбъемПродаж.Видимость = ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАвтонаименование(Обновить = Истина)
	
	Если Не ЗначениеЗаполнено(Объект.Наименование) ИЛИ (Обновить И ИспользуетсяАвтоНаименование И Не НаименованиеИзмененоПользователем) Тогда
		Объект.Наименование = СформироватьАвтоНаименованиеНаКлиенте();
		ИспользуетсяАвтоНаименование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КоэффициентУпаковки(Упаковка)

	Возврат Упаковка.Коэффициент

КонецФункции

&НаКлиенте
Функция ОписаниеТабличнойЧастиКлиент(ИмяТаблицы, ИмяРеквизита, КоличествоЭлементов = 0)

	ОписаниеТаблицы = "";
	
	НомерЭлемента = 0;
	Для каждого ЭлементТаблицы Из Объект[ИмяТаблицы] Цикл
		
		НомерЭлемента = НомерЭлемента + 1;
		Если Не КоличествоЭлементов = 0 И (КоличествоЭлементов + 1) = НомерЭлемента Тогда
			ОписаниеТаблицы = ОписаниеТаблицы + "... ,";
		ИначеЕсли Не КоличествоЭлементов = 0 И (КоличествоЭлементов + 1) < НомерЭлемента Тогда
			Прервать;
		Иначе
			ОписаниеТаблицы = ОписаниеТаблицы + Строка(ЭлементТаблицы[ИмяРеквизита]) + " ,";
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ОписаниеТаблицы = "" Тогда
	
		ОписаниеТаблицы = Лев(ОписаниеТаблицы, СтрДлина(ОписаниеТаблицы) - 2);
	
	КонецЕсли;
	
	Возврат ОписаниеТаблицы;

КонецФункции

&НаСервере
Функция ОписаниеТабличнойЧастиСервер(ИмяТаблицы, ИмяРеквизита, КоличествоЭлементов = 0)

	ОписаниеТаблицы = "";
	
	НомерЭлемента = 0;
	Для каждого ЭлементТаблицы Из Объект[ИмяТаблицы] Цикл
		
		НомерЭлемента = НомерЭлемента + 1;
		Если Не КоличествоЭлементов = 0 И (КоличествоЭлементов + 1) = НомерЭлемента Тогда
			ОписаниеТаблицы = ОписаниеТаблицы + "... ,";
		ИначеЕсли Не КоличествоЭлементов = 0 И (КоличествоЭлементов + 1) < НомерЭлемента Тогда
			Прервать;
		Иначе
			ОписаниеТаблицы = ОписаниеТаблицы + Строка(ЭлементТаблицы[ИмяРеквизита]) + " ,";
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ОписаниеТаблицы = "" Тогда
	
		ОписаниеТаблицы = Лев(ОписаниеТаблицы, СтрДлина(ОписаниеТаблицы) - 2);
	
	КонецЕсли;
	
	Возврат ОписаниеТаблицы;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииУпаковки(ТекДанные)

	Если ЗначениеЗаполнено(ТекДанные.Упаковка)  Тогда
	
		Коэффициент = КоэффициентУпаковки(ТекДанные.Упаковка);
		
	Иначе
		
		Коэффициент = 1;
	
	КонецЕсли;
	
	ТекДанные.Количество = Коэффициент * ТекДанные.КоличествоУпаковок;

КонецПроцедуры

&НаКлиенте
Функция СформироватьАвтоНаименованиеНаКлиенте()
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	Если Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи") Тогда
		СтрокаНаименования = НСтр("ru = 'Время продажи:'");
		ПервыйДень = Истина;
		Для Каждого СтрокаТаблицы Из Объект.ВремяДействия Цикл
			СтрокаНаименования = СтрокаНаименования + 
			                     ?(ПервыйДень," ", ", ")+ СтрокаТаблицы.ДеньНедели + 
			                     НСтр("ru = ' (с "+Формат(СтрокаТаблицы.ВремяНачала,"ДФ=ЧЧ:мм; ДП=00:00") + 
			                     " до "+Формат(СтрокаТаблицы.ВремяОкончания,"ДФ=ЧЧ:мм; ДП=00:00")+")'");
			ПервыйДень = Ложь;
		КонецЦикла;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаФормуОплаты") Тогда
		СтрокаНаименования = НСтр("ru = 'Форма оплаты:'")+ " " + Объект.ФормаОплаты;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаГрафикОплаты") Тогда
		СтрокаНаименования = НСтр("ru = 'График оплаты:'") + " " + Объект.ГрафикОплаты;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаПервуюПродажуПартнеру") Тогда
		СтрокаНаименования = НСтр("ru = 'Первая продажа партнеру'");
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ОграничениеПоГруппеПользователей") Тогда
		СтрокаНаименования = НСтр("ru = 'Группа пользователей:'")+ " " + Объект.ГруппаПользователей;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаПробнуюПродажу") Тогда
		СтрокаНаименования = НСтр("ru = 'Первая продажа номенклатуры сегмента'")+ " " + Объект.СегментНоменклатурыОграничения;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж") Тогда
		СтрокаНаименования = ""+Объект.КритерийОграниченияПримененияЗаОбъемПродаж + " " + 
		?(Объект.ОбластьОграничения = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе"),НСтр("ru = 'в документе'"),НСтр("ru = 'в строке'")) + " "+Объект.ТипСравнения + " "+Объект.ЗначениеУсловияОграничения + 
		?(Объект.КритерийОграниченияПримененияЗаОбъемПродаж = ПредопределенноеЗначение("Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество"), НСтр("ru = ' ед.'"), " грн") + 
		?(ЗначениеЗаполнено(Объект.СегментНоменклатурыОграничения)," " +НСтр("ru = 'по номенклатуре сегмента'")+ " " + Объект.СегментНоменклатурыОграничения, "");
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж") Тогда
		
		Если Объект.ВариантНакопления = ПредопределенноеЗначение("Перечисление.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоПартнеру") Тогда
			ВариантНакопленияСтрокой = НСтр("ru = 'по партнеру'");
		ИначеЕсли Объект.ВариантНакопления = ПредопределенноеЗначение("Перечисление.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоДисконтнойКарте") Тогда
			ВариантНакопленияСтрокой = НСтр("ru = 'по дисконтной карте'");
		Иначе
			ВариантНакопленияСтрокой = НСтр("ru = 'по торговому соглашению'");
		КонецЕсли;
		
		СтрокаНаименования = НСтр("ru = '%1 проданного товара %2'");
		СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаНаименования,
																						Объект.КритерийОграниченияПримененияЗаОбъемПродаж,
																						ВариантНакопленияСтрокой);
		
		Если Объект.ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантОпределенияПериодаНакопительнойСкидки.ВесьПериод") Тогда
			СтрокаНаименования = СтрокаНаименования + " " +НСтр("ru = 'за весь период'");
		ИначеЕсли Объект.ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантОпределенияПериодаНакопительнойСкидки.ПредыдущаяПокупка") Тогда
			СтрокаНаименования = СтрокаНаименования + " " +НСтр("ru = 'в предыдущей покупке'");
		ИначеЕсли Объект.ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантОпределенияПериодаНакопительнойСкидки.ПрошлыйПериод") Тогда
			
			Если Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый год'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлую декаду'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый день'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый квартал'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый месяц'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлую неделю'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлое полугодие'");
			КонецЕсли;
			
		ИначеЕсли Объект.ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантОпределенияПериодаНакопительнойСкидки.СНачалаТекущегоПериода") Тогда
			Если Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего года'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущей декады'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего дня'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего квартала'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего месяца'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущей недели'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего полугодия'");
			КонецЕсли;
		ИначеЕсли Объект.ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантОпределенияПериодаНакопительнойСкидки.ПрошлыйСкользящийПериод") Тогда
			
			Если Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 365 дней'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 180 дней'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 90 дней'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 30 дней'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 10 дней'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 7 дней'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущий день'");
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаНаименования = СтрокаНаименования + " " + Объект.ТипСравнения + " " + Объект.ЗначениеУсловияОграничения + // не менее (не более) 5 (5 Грн)
		?(Объект.КритерийОграниченияПримененияЗаОбъемПродаж = ПредопределенноеЗначение("Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество")," " + НСтр("ru = 'ед.'"), " грн") + 
		?(ЗначениеЗаполнено(Объект.СегментНоменклатурыОграничения)," " + НСтр("ru = 'по номенклатуре сегмента'") + " " + Объект.СегментНоменклатурыОграничения, ""); // по номенклатуре сегмента Продукты
		
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки") Тогда
		СтрокаНаименования = НСтр("ru = 'Комплект покупки:'");
		СтрокаНаименования = СтрокаНаименования + " " + ОписаниеТабличнойЧастиКлиент("КомплектПокупки", "Номенклатура");
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ВДеньРождения") Тогда
		СтрокаНаименования = НСтр("ru = 'День рождения'");
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ПорядковыйНомерПродажиКратен") Тогда
		СтрокаНаименования = НСтр("ru = 'Порядковый номер продажи кратен:'") +" "+ Объект.ПорядковыйНомерПродажиКратен;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ПоТипуПолучателя") Тогда
		
		СтрокаНаименования = НСтр("ru = 'По типу получателя скидки:'");
		
		ЭлементСпискаВыбора = Элементы.ТипПолучателяСкидки.СписокВыбора.НайтиПоЗначению(ТипПолучателяСкидки);
		Если НЕ ЭлементСпискаВыбора = Неопределено Тогда
			
			СтрокаНаименования = ЭлементСпискаВыбора.Представление + ": ";
			
		КонецЕсли;
		
		СтрокаНаименования = СтрокаНаименования + ОписаниеТабличнойЧастиКлиент("Получатели", "Получатель", 2);
		
	КонецЕсли;
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	Возврат СтрокаНаименования;

КонецФункции

&НаСервере
Функция СформироватьАвтоНаименованиеНаСервере()
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	Если Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи Тогда
		СтрокаНаименования = НСтр("ru = 'Время продажи:'");
		ПервыйДень = Истина;
		Для Каждого СтрокаТаблицы Из Объект.ВремяДействия Цикл
			СтрокаНаименования = СтрокаНаименования + 
			                     ?(ПервыйДень," ", ", ")+ СтрокаТаблицы.ДеньНедели + 
			                     НСтр("ru = ' (с "+Формат(СтрокаТаблицы.ВремяНачала,"ДФ=ЧЧ:мм; ДП=00:00") + 
			                     " до "+Формат(СтрокаТаблицы.ВремяОкончания,"ДФ=ЧЧ:мм; ДП=00:00")+")'");
			ПервыйДень = Ложь;
		КонецЦикла;
	ИначеЕсли Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаФормуОплаты Тогда
		СтрокаНаименования = НСтр("ru = 'Форма оплаты:'")+ " " + Объект.ФормаОплаты;
	ИначеЕсли Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаГрафикОплаты Тогда
		СтрокаНаименования = НСтр("ru = 'График оплаты:'") + " " + Объект.ГрафикОплаты;
	ИначеЕсли Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаПервуюПродажуПартнеру Тогда
		СтрокаНаименования = НСтр("ru = 'Первая продажа партнеру'");
	ИначеЕсли Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ОграничениеПоГруппеПользователей Тогда
		СтрокаНаименования = НСтр("ru = 'Группа пользователей:'")+ " " + Объект.ГруппаПользователей;
	ИначеЕсли Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаПробнуюПродажу Тогда
		СтрокаНаименования = НСтр("ru = 'Первая продажа номенклатуры сегмента'")+ " " + Объект.СегментНоменклатурыОграничения;
	ИначеЕсли Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж Тогда
		СтрокаНаименования = ""+Объект.КритерийОграниченияПримененияЗаОбъемПродаж + " " + 
		?(Объект.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе,НСтр("ru = 'в документе'"),НСтр("ru = 'в строке'")) + " "+Объект.ТипСравнения + " "+Объект.ЗначениеУсловияОграничения + 
		?(Объект.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество, НСтр("ru = ' ед.'"), " грн") + 
		?(ЗначениеЗаполнено(Объект.СегментНоменклатурыОграничения)," " +НСтр("ru = 'по номенклатуре сегмента'")+ " " + Объект.СегментНоменклатурыОграничения, "");
	ИначеЕсли Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж Тогда
		
		Если Объект.ВариантНакопления = Перечисления.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоПартнеру Тогда
			ВариантНакопленияСтрокой = НСтр("ru = 'по партнеру'");
		ИначеЕсли Объект.ВариантНакопления = Перечисления.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоДисконтнойКарте Тогда
			ВариантНакопленияСтрокой = НСтр("ru = 'по дисконтной карте'");
		Иначе
			ВариантНакопленияСтрокой = НСтр("ru = 'по торговому соглашению'");
		КонецЕсли;
		
		СтрокаНаименования = НСтр("ru = '%1 проданного товара %2'");
		СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаНаименования,
																						Объект.КритерийОграниченияПримененияЗаОбъемПродаж,
																						ВариантНакопленияСтрокой);
		
		Если Объект.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ВесьПериод Тогда
			СтрокаНаименования = СтрокаНаименования + " " +НСтр("ru = 'за весь период'");
		ИначеЕсли Объект.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ПрошлыйПериод Тогда
			
			Если Объект.ПериодНакопления = Перечисления.Периодичность.Год Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый год'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Декада Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлую декаду'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.День Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый день'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Квартал Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый квартал'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Месяц Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый месяц'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Неделя Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлую неделю'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Полугодие Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлое полугодие'");
			КонецЕсли;
			
		ИначеЕсли Объект.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.СНачалаТекущегоПериода Тогда
			Если Объект.ПериодНакопления = Перечисления.Периодичность.Год Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего года'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Декада Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущей декады'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.День Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего дня'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Квартал Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего квартала'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Месяц Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего месяца'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Неделя Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущей недели'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Полугодие Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего полугодия'");
			КонецЕсли;
		ИначеЕсли Объект.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ПрошлыйСкользящийПериод Тогда
			
			Если Объект.ПериодНакопления = Перечисления.Периодичность.Год Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 365 дней'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Полугодие Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 180 дней'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Квартал Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 90 дней'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Месяц Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 30 дней'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Декада Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 10 дней'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Неделя Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 7 дней'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.День Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущий день'");
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаНаименования = СтрокаНаименования + " " + Объект.ТипСравнения + " " + Объект.ЗначениеУсловияОграничения + // не менее (не более) 5 (5 Грн)
		?(Объект.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество," " + НСтр("ru = 'ед.'"), " грн") + 
		?(ЗначениеЗаполнено(Объект.СегментНоменклатурыОграничения)," " + НСтр("ru = 'по номенклатуре сегмента'") + " " + Объект.СегментНоменклатурыОграничения, ""); // по номенклатуре сегмента Продукты
		
	ИначеЕсли Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки Тогда
		СтрокаНаименования = НСтр("ru = 'Комплект покупки:'");
		СтрокаНаименования = СтрокаНаименования + " " + ОписаниеТабличнойЧастиСервер("КомплектПокупки", "Номенклатура");
		
	ИначеЕсли Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ВДеньРождения Тогда
		СтрокаНаименования = НСтр("ru = 'День рождения'");
	ИначеЕсли Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ПорядковыйНомерПродажиКратен Тогда
		СтрокаНаименования = НСтр("ru = 'Порядковый номер продажи кратен:'") +" "+ Объект.ПорядковыйНомерПродажиКратен;
	ИначеЕсли Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ПоТипуПолучателя Тогда
		
		СтрокаНаименования = НСтр("ru = 'По типу получателя скидки:'");
		
		ЭлементСпискаВыбора = Элементы.ТипПолучателяСкидки.СписокВыбора.НайтиПоЗначению(ТипПолучателяСкидки);
		Если НЕ ЭлементСпискаВыбора = Неопределено Тогда
			
			СтрокаНаименования = ЭлементСпискаВыбора.Представление + ": ";
			
		КонецЕсли;
		
		СтрокаНаименования = СтрокаНаименования + ОписаниеТабличнойЧастиСервер("Получатели", "Получатель", 2);
		
	КонецЕсли;
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	Возврат СтрокаНаименования;

КонецФункции

&НаСервере
Процедура УсловиеПредоставленияПриИзмененииНаСервере()
	
	Элементы.ЗаРазовыйОбъемПродаж.Видимость             = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж);
	Элементы.ЗаНакопленныйОбъемПродаж.Видимость         = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж);
	Элементы.ЗаВремяДействия.Видимость                  = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи);
	Элементы.ЗаГрафикОплаты.Видимость                   = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаГрафикОплаты);
	Элементы.ЗаПервуюПродажуПартнеру.Видимость          = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаПервуюПродажуПартнеру);
	Элементы.ЗаПробнуюПродажу.Видимость                 = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаПробнуюПродажу);
	Элементы.ЗаФормуОплаты.Видимость                    = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаФормуОплаты);
	Элементы.ОграничениеПоГруппеПользователей.Видимость = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ОграничениеПоГруппеПользователей);
	Элементы.ЗаКомплектПокупки.Видимость                = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки);
	Элементы.ВДеньРождения.Видимость                    = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ВДеньРождения);
	Элементы.ПорядковыйНомерПродажиКратен.Видимость     = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ПорядковыйНомерПродажиКратен);
	Элементы.ПоТипуПолучателя.Видимость                 = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ПоТипуПолучателя);
	
	Если    Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаФормуОплаты
		ИЛИ Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаГрафикОплаты
		ИЛИ Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаПробнуюПродажу
		ИЛИ Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи Тогда
		
		Объект.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе;
		Элементы.ОбластьОграничения.Доступность = Ложь;
		
	КонецЕсли;
	
	Если Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж 
		И Элементы.ВариантНакопления.СписокВыбора.Количество() = 1 Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.ВариантНакопления) 
			ИЛИ Элементы.ВариантНакопления.СписокВыбора.НайтиПоЗначению(Объект.ВариантНакопления) = Неопределено Тогда
			Объект.ВариантНакопления = Элементы.ВариантНакопления.СписокВыбора[0].Значение
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#Область ПроцедурыЗагрузкиПолучателейИзТаблицыExcel

&НаКлиенте	//	LNK 02.08.2018 13:03:08
Процедура УстановитьДоступностьКнопкиЗагрузкиИзExcell()

	 Элементы.ПолучателиЗагрузитьПолучателейИзТаблицыExcel.Доступность =
	 	ТипПолучателяСкидкиЗагрузка.Свойство(ТипПолучателяСкидки)
		И Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ПоТипуПолучателя");

КонецПроцедуры

&НаКлиенте	//	LNK 02.08.2018 11:56:00
Процедура ЗагрузитьПолучателейИзТаблицыExcel(Команда)

	Если Объект.Получатели.Количество() > 0 Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьПолучателейИзТаблицыExcelЗавершение", ЭтотОбъект, Новый Структура);
		ПоказатьВопрос(ОписаниеОповещения
			, "Табличная часть «Получатели» будет очищена.
			  |Подтвердите своё решение:"
			, РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.ОК
			, "Предупреждение(перед загрузкой)", КодВозвратаДиалога.Отмена);

	Иначе

		ЗагрузитьПолучателейИзТаблицыExcelЗавершение(КодВозвратаДиалога.ОК, Новый Структура);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 02.08.2018 11:56:00
Процедура ЗагрузитьПолучателейИзТаблицыExcelЗавершение(КодВозврата, ДополнительныеПараметры)	Экспорт

	Если КодВозврата = КодВозвратаДиалога.ОК Тогда

		Если НЕ Объект.Получатели.Количество() = 0 Тогда

			Объект.Получатели.Очистить();
			Модифицированность = Истина;

		КонецЕсли;

		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьПолучателейИзТаблицыExcelОбработкаВыбора", ЭтотОбъект);
		ДиалогВыбораФайла  = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Заголовок = "Выберите файл книги MS Excel";
		ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Лист Excel'") + " (*.xls)|*.xls|" + НСтр("ru = 'Лист Excel2007'") + " (*.xlsx)|*.xlsx";
		ДиалогВыбораФайла.ПолноеИмяФайла = ПолноеИмяИмпортируемогоФайла;
		ДиалогВыбораФайла.МножественныйВыбор = Ложь;
		ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;

		ДиалогВыбораФайла.Показать(ОписаниеОповещения);

	Иначе

		ПоказатьОповещениеПользователя("Операция не выполнена",, "Действие отменено пользователем", БиблиотекаКартинок.Ошибка32);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 02.08.2018 12:09:55
Процедура ЗагрузитьПолучателейИзТаблицыExcelОбработкаВыбора(СписокФайлов, ДополнительныеПараметры)	Экспорт

	Если ТипЗнч(СписокФайлов) = Тип("Массив") И НЕ СписокФайлов.Количество() = 0 Тогда

		ПолноеИмяИмпортируемогоФайла = СписокФайлов[0];
		ТекстСообщения = "";

		Если ВыполнитьЗагрузкуПолучателейИзТаблицыExcel(
				ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяИмпортируемогоФайла), УникальныйИдентификатор),
				ОбщегоНазначенияКлиентСервер.lx_GetTooken(ПолноеИмяИмпортируемогоФайла, "."),
				ТекстСообщения) Тогда

			ТекстСообщения = ?(Объект.Получатели.Количество() = 0
				, "В файле данных для загрузки не обнаружено!"
				, "Данные " + Формат(Объект.Получатели.Количество(), "ЧДЦ=; ЧГ=") + " строк загружены в табличную часть «Получатели»");
			ПоказатьОповещениеПользователя("Операция выполнена",, ТекстСообщения, БиблиотекаКартинок.Информация2_32);

		Иначе

			ПоказатьОповещениеПользователя("Операция не выполнена из-за ошибки",, ТекстСообщения, БиблиотекаКартинок.Ошибка32);

		КонецЕсли;

	Иначе

		ПоказатьОповещениеПользователя("Операция не выполнена",, "Выбор файла не был сделан пользователем", БиблиотекаКартинок.Ошибка32);

	КонецЕсли;

КонецПроцедуры

&НаСервере	//	LNK 03.08.2018 07:23:26
Функция ВыполнитьЗагрузкуПолучателейИзТаблицыExcel(АдресВХранилище, Расширение, ТекстСообщения)

	Перем КлючевоеПоле;

	Если ТипПолучателяСкидкиЗагрузка.Свойство(ТипПолучателяСкидки, КлючевоеПоле) Тогда

		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХранилище);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);

		ТабличныйДокумент = Новый ТабличныйДокумент;
		МассивДанных      = Новый Массив;

		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);

		Для НомерСтроки = 1 По ТабличныйДокумент.ВысотаТаблицы Цикл

			ТекущаяОбласть = ТабличныйДокумент.ПолучитьОбласть(
				"R" + Формат(НомерСтроки, "ЧДЦ=; ЧН=0; ЧГ=") +
				"C" + Формат(1, "ЧДЦ=; ЧН=0; ЧГ=")).ТекущаяОбласть;

			ЗначениеЯчейки = ТекущаяОбласть.Текст;

			Если НЕ ПустаяСтрока(ЗначениеЯчейки) Тогда

				МассивДанных.Добавить(ЗначениеЯчейки);

			КонецЕсли;

		КонецЦикла;

		ТабличныйДокумент = Неопределено;
		ТекстСообщения    = "";

		Запрос = Новый Запрос(СтрЗаменить(СтрЗаменить(
		"ВЫБРАТЬ
		|	ТаблицаДанных.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК ТаблицаДанных
		|ГДЕ
		|	ТаблицаДанных.IDN В(&МассивДанных)"
		, ".IDN В(&", "." + КлючевоеПоле + " В(&")
		, ".Номенклатура КАК", "." + ТипПолучателяСкидки + " КАК")
		);
		Запрос.УстановитьПараметр("МассивДанных", МассивДанных);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл

			СтрокаТабличнойЧасти = Объект.Получатели.Добавить();
			СтрокаТабличнойЧасти.Получатель = Выборка.Ссылка;

			Модифицированность = Истина;

		КонецЦикла;

		Попытка

			УдалитьФайлы(ИмяВременногоФайла);

		Исключение	КонецПопытки;

	Иначе

		ТекстСообщения = "Требуемая таблица не найдена по текущему типу получателя";

	КонецЕсли;

	Возврат ПустаяСтрока(ТекстСообщения);

КонецФункции // ВыполнитьЗагрузкуПолучателейИзТаблицыExcel()

#КонецОбласти





