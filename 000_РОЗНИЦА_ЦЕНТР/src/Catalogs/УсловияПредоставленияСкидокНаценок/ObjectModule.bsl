
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи Тогда
		
		ПроверяемыеРеквизиты.Очистить();
		ПроверяемыеРеквизиты.Добавить("ВремяДействия");
		ПроверяемыеРеквизиты.Добавить("ВремяДействия.ДеньНедели");
		
	ИначеЕсли УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж Тогда
		
		ПроверяемыеРеквизиты.Очистить();
		ПроверяемыеРеквизиты.Добавить("КритерийОграниченияПримененияЗаОбъемПродаж");
		ПроверяемыеРеквизиты.Добавить("ВариантНакопления");
		ПроверяемыеРеквизиты.Добавить("ВариантОпределенияПериодаНакопительнойСкидки");
		ПроверяемыеРеквизиты.Добавить("ТипСравнения");
		Если ВариантОпределенияПериодаНакопительнойСкидки <> Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ВесьПериод
			И ВариантОпределенияПериодаНакопительнойСкидки <> Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ПредыдущаяПокупка Тогда
			ПроверяемыеРеквизиты.Добавить("ПериодНакопления");
		КонецЕсли;
		
	ИначеЕсли УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаПервуюПродажуПартнеру Тогда
		
		ПроверяемыеРеквизиты.Очистить();
		
	ИначеЕсли УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаПробнуюПродажу Тогда
		
		ПроверяемыеРеквизиты.Очистить();
	
	ИначеЕсли УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж Тогда
		
		ПроверяемыеРеквизиты.Очистить();
		ПроверяемыеРеквизиты.Добавить("ОбластьОграничения");
		ПроверяемыеРеквизиты.Добавить("КритерийОграниченияПримененияЗаОбъемПродаж");
		ПроверяемыеРеквизиты.Добавить("ТипСравнения");
		
	ИначеЕсли УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаГрафикОплаты Тогда
		
		ПроверяемыеРеквизиты.Очистить();
		
	ИначеЕсли УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаФормуОплаты Тогда
		
		ПроверяемыеРеквизиты.Очистить();
		
	ИначеЕсли УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ОграничениеПоГруппеПользователей Тогда
		
		ПроверяемыеРеквизиты.Очистить();
	
	ИначеЕсли УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки Тогда
		
		ПроверяемыеРеквизиты.Очистить();
		ПроверяемыеРеквизиты.Добавить("КомплектПокупки");
		ПроверяемыеРеквизиты.Добавить("КомплектПокупки.Номенклатура");
		ПроверяемыеРеквизиты.Добавить("КомплектПокупки.КоличествоУпаковок");
		ПроверяемыеРеквизиты.Добавить("КомплектПокупки.Количество");
		ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Новый Массив, Отказ, Новый Структура("ИмяТЧ","КомплектПокупки"));	
		
	ИначеЕсли УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ВДеньРождения Тогда
		
		ПроверяемыеРеквизиты.Очистить();
		
	ИначеЕсли УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ПорядковыйНомерПродажиКратен Тогда
		
		ПроверяемыеРеквизиты.Очистить();
		ПроверяемыеРеквизиты.Добавить("ПорядковыйНомерПродажиКратен");
		
	ИначеЕсли УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ПоТипуПолучателя Тогда
		
		ПроверяемыеРеквизиты.Очистить();
		ПроверяемыеРеквизиты.Добавить("Получатели");
		ПроверяемыеРеквизиты.Добавить("Получатели.Получатель");
		
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("Наименование");
	ПроверяемыеРеквизиты.Добавить("УсловиеПредоставления");
	
	
	ШаблонОшибка = НСтр("ru = 'Время окончания действия скидки (наценки) меньше времени начала в строке %НомерСтроки%'");
	Для Каждого СтрокаТаб Из ВремяДействия Цикл
		
		Если СтрокаТаб.ВремяОкончания < СтрокаТаб.ВремяНачала Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить(ШаблонОшибка, "%НомерСтроки%", Строка(СтрокаТаб.НомерСтроки)),
				ЭтотОбъект,
				Ценообразование.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ("ВремяДействия", СтрокаТаб.НомерСтроки, "ВремяОкончания"),
				,
				Отказ
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		
		ЗапросПовторыСтрок = Новый Запрос;
		ЗапросПовторыСтрок.Текст = "ВЫБРАТЬ
        |	тчУсловия.НомерСтроки КАК НомерСтроки,
        |	тчУсловия.ДеньНедели КАК ДеньНедели,
        |	тчУсловия.ВремяНачала КАК ВремяНачала,
        |	тчУсловия.ВремяОкончания КАК ВремяОкончания
        |ПОМЕСТИТЬ втУсловия
        |ИЗ
        |	&тчУсловия КАК тчУсловия
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗЛИЧНЫЕ
        |	Условия1.НомерСтроки КАК НомерСтроки,
        |	Условия2.НомерСтроки КАК НомерСтроки2
        |ИЗ
        |	втУсловия КАК Условия1
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втУсловия КАК Условия2
        |		ПО Условия1.НомерСтроки <> Условия2.НомерСтроки
        |			И Условия1.ДеньНедели = Условия2.ДеньНедели
        |			И Условия1.ВремяОкончания >= Условия2.ВремяНачала
        |			И Условия1.ВремяНачала <= Условия2.ВремяОкончания
        |
        |УПОРЯДОЧИТЬ ПО
        |	НомерСтроки,
        |	НомерСтроки2";
		ЗапросПовторыСтрок.УстановитьПараметр("тчУсловия", ВремяДействия.Выгрузить());
		Выборка = ЗапросПовторыСтрок.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'В строке ""%1"" период действия пересекается с периодом в строке ""%2"".'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НомерСтроки, Выборка.НомерСтроки2);
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВремяДействия", Выборка.НомерСтроки, "ВремяНачала");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Ссылка,
				ПутьКТабличнойЧасти,
				"Объект",
				Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)

	Если ОбменДанными.Загрузка Тогда

		Возврат;

	КонецЕсли;

	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
    Если НЕ ЭтоНовый() тогда 
		ДополнительныеСвойства.Вставить("ЗначениеУсловияОграничения",    ЭтотОбъект.Ссылка.ЗначениеУсловияОграничения); 
	КонецЕсли;
	
	
	Если ОбщегоНазначенияРТСервер.РазрешеноИзменениеВУзле(ЭтотОбъект, Отказ) Тогда

	//	LNK 27.09.2017 15:30:43
		Возврат;

	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
			Возврат;
	КонецЕсли;

	Если НЕ ДополнительныеСвойства.ЭтоНовый Тогда
		Если ЭтотОбъект.ЗначениеУсловияОграничения <> ДополнительныеСвойства.ЗначениеУсловияОграничения тогда
			ПолучитьСписокСкидокНаценок();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
Процедура  ПолучитьСписокСкидокНаценок() 
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДействиеСкидокНаценок.Магазин,
		|	ДействиеСкидокНаценок.СкидкаНаценка КАК СкидкаНаценка
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК СкидкиНаценкиУсловияПредоставления
		|		ПО ДействиеСкидокНаценок.СкидкаНаценка = СкидкиНаценкиУсловияПредоставления.Ссылка
		|ГДЕ
		|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления = &УсловиеПредоставления
		|	И СкидкиНаценкиУсловияПредоставления.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И (ДействиеСкидокНаценок.Период <= &КонецДня
		|			ИЛИ ДействиеСкидокНаценок.ДатаОкончания >= &НачалоДня)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДействиеСкидокНаценок.Магазин,
		|	ДействиеСкидокНаценок.СкидкаНаценка";
	
	Запрос.УстановитьПараметр("КонецДня", КонецДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("УсловиеПредоставления", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ДатаИзмененияУсловийСкидокНаценок.СоздатьНаборЗаписей(); 

		НаборЗаписей.Отбор.СкидкаНаценка.Установить(ВыборкаДетальныеЗаписи.СкидкаНаценка);
		НаборЗаписей.Отбор.Магазин.Установить(ВыборкаДетальныеЗаписи.Магазин);

		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Магазин = ВыборкаДетальныеЗаписи.Магазин;
		НоваяЗапись.СкидкаНаценка = ВыборкаДетальныеЗаписи.СкидкаНаценка;
		НоваяЗапись.Дата = ТекущаяДатаСеанса(); 

		НаборЗаписей.Записать();	
	КонецЦикла;
	
	
	
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
