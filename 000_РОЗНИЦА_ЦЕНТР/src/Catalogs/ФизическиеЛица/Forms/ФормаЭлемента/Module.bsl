#Область ОбработчикиОсновныхСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда

		Возврат;

	КонецЕсли;

	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, Объект, "СтраницаДополнительныеРеквизиты");
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик подсистемы "Контактная информация"
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация");
	
	ВнешниеДанные = Новый Структура("Паспорт, ФИО", Новый Структура, Новый ТаблицаЗначений);

//	LNK 01.08.2018 07:12:59
	Если Объект.Ссылка.Пустая() Тогда	//	ЭтоНовый() = Истина

		Если Параметры.Свойство("ЗначенияЗаполненияJSON") Тогда

			ДанныеЗаполнения = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(Параметры.ЗначенияЗаполненияJSON);

			Если ДанныеЗаполнения.Свойство("ФИО") И НЕ ДанныеЗаполнения.ФИО.Количество() = 0 Тогда

				ВнешниеДанные.Вставить("ФИО", ДанныеЗаполнения.ФИО);

				ЧастиИмени = ДанныеЗаполнения.ФИО[ДанныеЗаполнения.ФИО.Количество() - 1];
				Фамилия  = ЧастиИмени.Фамилия;
				Имя      = ЧастиИмени.Имя;
				Отчество = ЧастиИмени.Отчество;

			Иначе

				ЧастиИмени = ОбщегоНазначенияКлиентСервер.lx_FillValueList(, ДанныеЗаполнения.Наименование,, " ", 3,, Новый ОписаниеТипов("Строка"));
				Фамилия  = ЧастиИмени[0];
				Имя      = ЧастиИмени[1];
				Отчество = ЧастиИмени[2];

			КонецЕсли;

			Объект.ИНН = ДанныеЗаполнения.ИНН;
			Объект.Пол = ДанныеЗаполнения.Пол;
			Объект.ДатаРождения    = ДанныеЗаполнения.ДатаРождения;
			Объект.Наименование    = ДанныеЗаполнения.Наименование;
			Объект.ПометкаУдаления = ДанныеЗаполнения.ПометкаУдаления;

			ИдентификаторСсылки = ДанныеЗаполнения.Идентификатор;

			Если ДанныеЗаполнения.Свойство("Паспорт") Тогда

				ВнешниеДанные.Вставить("Паспорт", ДанныеЗаполнения.Паспорт);

				Объект.ДатаВыдачиПаспорта = ДанныеЗаполнения.Паспорт.ДатаВыдачиПаспорта;
				Объект.КемВыданПаспорт    = ДанныеЗаполнения.Паспорт.КемВыданПаспорт;
				Объект.НомерПаспорта      = ДанныеЗаполнения.Паспорт.НомерПаспорта;

			КонецЕсли;

		КонецЕсли;

	Иначе

		ЗаполнитьФИО();

	КонецЕсли;

	АдресХранилищаВнешнихДанных = ПоместитьВоВременноеХранилище(ВнешниеДанные, УникальныйИдентификатор);
	
	ПоказатьСостояниеСотрудника();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСостояниеСотрудника()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РаботникиОрганизаций.ВидЗанятости КАК ВидЗанятости,
	               |	МАКСИМУМ(РаботникиОрганизаций.ПериодНачала) КАК ПериодНачала,
	               |	РаботникиОрганизаций.Организация КАК Организация,
	               |	РаботникиОрганизаций.Сотрудник КАК Сотрудник
	               |ПОМЕСТИТЬ ПериодыРаботы
	               |ИЗ
	               |	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	               |ГДЕ
	               |	РаботникиОрганизаций.Сотрудник = &Сотрудник
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РаботникиОрганизаций.ВидЗанятости,
	               |	РаботникиОрганизаций.Организация,
	               |	РаботникиОрганизаций.Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	МАКСИМУМ(СостояниеРаботниковОрганизаций.Период) КАК Период,
	               |	СостояниеРаботниковОрганизаций.Состояние КАК Состояние,
	               |	СостояниеРаботниковОрганизаций.ПериодЗавершения КАК ПериодЗавершения,
	               |	СостояниеРаботниковОрганизаций.Организация КАК Организация,
	               |	СостояниеРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	               |	СостояниеРаботниковОрганизаций.СостояниеЗавершения КАК СостояниеЗавершения
	               |ПОМЕСТИТЬ ТаблицаСостояниеСотрудника
	               |ИЗ
	               |	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	               |ГДЕ
	               |	СостояниеРаботниковОрганизаций.Период <= &Период
	               |	И СостояниеРаботниковОрганизаций.Сотрудник = &Сотрудник
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СостояниеРаботниковОрганизаций.Состояние,
	               |	СостояниеРаботниковОрганизаций.ПериодЗавершения,
	               |	СостояниеРаботниковОрганизаций.Организация,
	               |	СостояниеРаботниковОрганизаций.Сотрудник,
	               |	СостояниеРаботниковОрганизаций.СостояниеЗавершения
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПериодыРаботы.ВидЗанятости КАК ВидЗанятости,
	               |	ПериодыРаботы.ПериодНачала КАК ПериодНачала,
	               |	РаботникиОрганизаций.СостояниеСотрудника КАК СостояниеСотрудника,
	               |	ПериодыРаботы.Организация КАК Организация,
	               |	ТаблицаСостояниеСотрудника.СостояниеЗавершения КАК СостояниеЗавершения,
	               |	ТаблицаСостояниеСотрудника.ПериодЗавершения КАК ПериодЗавершения,
	               |	ТаблицаСостояниеСотрудника.Состояние КАК Состояние
	               |ИЗ
	               |	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыРаботы КАК ПериодыРаботы
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСостояниеСотрудника КАК ТаблицаСостояниеСотрудника
	               |			ПО (ТаблицаСостояниеСотрудника.Организация = ПериодыРаботы.Организация)
	               |				И (ТаблицаСостояниеСотрудника.Сотрудник = ПериодыРаботы.Сотрудник)
	               |		ПО (ПериодыРаботы.ВидЗанятости = РаботникиОрганизаций.ВидЗанятости)
	               |			И (ПериодыРаботы.ПериодНачала = РаботникиОрганизаций.ПериодНачала)
	               |			И (ПериодыРаботы.Организация = РаботникиОрганизаций.Организация)
	               |			И РаботникиОрганизаций.Сотрудник = ПериодыРаботы.Сотрудник
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПериодНачала";
	Запрос.УстановитьПараметр("Период",	ТекущаяДата());	 //Дата
	Запрос.УстановитьПараметр("Сотрудник",	Объект.Ссылка);	 //Сотрудники организаций
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Элементы.СостояниеСотрудника.Заголовок = "УВОЛЕН";
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.СостояниеСотрудника = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда
			Элементы.СостояниеСотрудника.Заголовок = "РАБОТАЕТ";
			Если (Не Выборка.ПериодЗавершения = Null) И (Выборка.ПериодЗавершения > ТекущаяДата() Или Выборка.ПериодЗавершения = Дата(1, 1, 1)) Тогда
				Элементы.СостояниеСотрудника.Заголовок = ВРЕГ(Строка(Выборка.Состояние));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

	ЗаполнитьТаблицуКонтрагентов();

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обработчик подсистемы "Контактная информация"
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, Отказ);
	
//	LNK 01.08.2018 07:13:09
	Если ТекущийОбъект.Ссылка.Пустая() И ЗначениеЗаполнено(ИдентификаторСсылки) Тогда

		ТекущийОбъект.УстановитьСсылкуНового(Справочники.ФизическиеЛица.ПолучитьСсылку(ИдентификаторСсылки));

	КонецЕсли;

	//+HVOYA YURA G. 03.10.2016 10:32:53
	Если ИнформКартаНеСоздана(ТекущийОбъект) И ТекущийОбъект.Сотрудник  Тогда
		
		СоздатьИнформКартуФизЛица(ТекущийОбъект)
		
	КонецЕсли;
	//-HVOYA YURA G. 03.10.2016 10:32:55
	
//	LNK 29.08.2018 13:58:35	отложенная запись из регистра "ОчередьОтказанныхСообщений"
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ВнешниеДанные", ПолучитьИзВременногоХранилища(АдресХранилищаВнешнихДанных));

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДатаСеансаТекущая = ТекущаяДатаСеанса();
	СтруктураЗаписи = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(ДатаСеансаТекущая, Новый Структура("ФизЛицо", ТекущийОбъект.Ссылка));
	Если СтруктураЗаписи.Фамилия <> Фамилия
		ИЛИ СтруктураЗаписи.Отчество <> Отчество
		ИЛИ СтруктураЗаписи.Имя <> Имя Тогда
		МенеджерЗаписи = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ФизЛицо = ТекущийОбъект.Ссылка;
		МенеджерЗаписи.Период = ДатаСеансаТекущая;
		МенеджерЗаписи.Фамилия = Фамилия;
		МенеджерЗаписи.Имя = Имя;
		МенеджерЗаписи.Отчество = Отчество;
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	
	//+HVOYA YURA G. 03.10.2016 10:32:53
	Если ИнформКартаНеСоздана(ТекущийОбъект) И ТекущийОбъект.Сотрудник Тогда
		СоздатьИнформКартуФизЛица(ТекущийОбъект)
	КонецЕсли;
	//-HVOYA YURA G. 03.10.2016 10:32:55

	ЗаполнитьТаблицуКонтрагентов();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьЭлементовФормы();
	
	АвтоНаименованиеФизЛица();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(ИдентификаторСсылки) Тогда

		Если Объект.Ссылка.УникальныйИдентификатор() = ИдентификаторСсылки Тогда

			Отказ = Истина;
			ИдентификаторСсылки = Неопределено;
			Закрыть(Новый Структура("Выполнено", Истина));

			Оповестить("ОбновитьСписокОтказанныхСообщений", Объект.Ссылка, ЭтотОбъект);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры
	
#КонецОбласти

//+HVOYA YURA G. 03.10.2016 10:35:26
Функция ИнформКартаНеСоздана(ТекущийОбъект)

		  ОбъектОснование  = Справочники.ИнформационныеКарты.НайтиПоРеквизиту("ВладелецКарты",ТекущийОбъект.Ссылка);
		  Если  ЗначениеЗаполнено(ОбъектОснование) Тогда
		  	Возврат Ложь
		  Иначе 
		  	Возврат Истина
		  КонецЕсли
КонецФункции

Функция СоздатьИнформКартуФизЛица(ТекущийОбъект)
	
	СпрИнформКарты = Справочники.ИнформационныеКарты;
	НоваяКарта = СпрИнформКарты.СоздатьЭлемент();
	НоваяКарта.ВладелецКарты = ТекущийОбъект.Ссылка;
	НоваяКарта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Регистрационная;
	
	
	//Сформируем ШК для карты
	Магазин = ТекущийОбъект.Магазин;
	ШтрихкодКарты = ПодключаемоеОборудованиеРТ.СформироватьШтрихкодИнформационнойКарты(Магазин); 
	
	НоваяКарта.Наименование =  ШтрихкодКарты;
	НоваяКарта.Записать();
	
	////Запись в Регистр
	НоваяЗапись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
	НоваяЗапись.Владелец     = НоваяКарта.Ссылка;
	НоваяЗапись.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
	НоваяЗапись.Штрихкод     = ШтрихкодКарты;
	НоваяЗапись.Записать();
	
	
КонецФункции


//-HVOYA YURA G. 03.10.2016 10:35:27

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	УстановитьДоступностьЭлементовФормы();
	
	//+HVOYA YURA G. 07.10.2016 15:36:53
	ВладелецКарты = Объект.Ссылка;
	Если Объект.Сотрудник = Ложь Тогда
		СделатьКартуНедействительной(ВладелецКарты);
	ИначеЕсли Объект.Сотрудник = Истина Тогда
		ПроверитьКарту(ВладелецКарты);
	КонецЕсли;
	//-HVOYA YURA G. 07.10.2016 15:37:01
	
КонецПроцедуры
//+HVOYA YURA G. 07.10.2016 15:42:15
Функция СделатьКартуНедействительной(ВладелецКарты)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнформационныеКарты.Ссылка КАК Карта
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|ГДЕ
		|	ИнформационныеКарты.ВладелецКарты.Ссылка = &Ссылка
		|	И ИнформационныеКарты.ТипКарты = &ТипКарты";
	
	Запрос.УстановитьПараметр("Ссылка", ВладелецКарты.Ссылка);
	Запрос.УстановитьПараметр("ТипКарты", Перечисления.ТипыИнформационныхКарт.Регистрационная);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Карта = ВыборкаДетальныеЗаписи.Карта;
		МеняемКарту = Карта.ПолучитьОбъект();
		МеняемКарту.Блокирован = Истина;
		МеняемКарту.Записать();
	КонецЕсли;
КонецФункции

Функция ПроверитьКарту(ВладелецКарты)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнформационныеКарты.Ссылка КАК Карта
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|ГДЕ
		|	ИнформационныеКарты.ВладелецКарты.Ссылка = &Ссылка
		|	И ИнформационныеКарты.ТипКарты = &ТипКарты";
	
	Запрос.УстановитьПараметр("Ссылка", ВладелецКарты.Ссылка);
	Запрос.УстановитьПараметр("ТипКарты", Перечисления.ТипыИнформационныхКарт.Регистрационная);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Карта = ВыборкаДетальныеЗаписи.Карта;
		МеняемКарту = Карта.ПолучитьОбъект();
		МеняемКарту.Блокирован = Ложь;
		МеняемКарту.Записать();
	КонецЕсли;
КонецФункции

//-HVOYA YURA G. 07.10.2016 15:42:17

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АвтоНаименованиеФизЛица();
	ВыбранныйЭлемент = ВыбратьИзСписка(Элементы.Наименование.СписокВыбора, Элемент);
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Объект.Наименование = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	
	Если Объект.Сотрудник Тогда
		
		Элементы.ГруппаМагазин.ТекущаяСтраница = Элементы.СтраницаМагазин;
		
	Иначе
		
		Элементы.ГруппаМагазин.ТекущаяСтраница = Элементы.СтраницаПустышка;
		
	КонецЕсли;
	
	Элементы.Пол.АвтоОтметкаНезаполненного          = Объект.Сотрудник;
	Элементы.ДатаРождения.АвтоОтметкаНезаполненного = Объект.Сотрудник;
	
	Если Не Объект.Сотрудник Тогда
		Элементы.Пол.ОтметкаНезаполненного          = Объект.Сотрудник;
		Элементы.ДатаРождения.ОтметкаНезаполненного = Объект.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФИО()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаРегистра.Фамилия КАК Фамилия,
	|	ТаблицаРегистра.Имя КАК Имя,
	|	ТаблицаРегистра.Отчество КАК Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.ФизЛицо = &ФизЛицо"
	);
	Запрос.УстановитьПараметр("ФизЛицо", Объект.Ссылка);

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Фамилия  = Выборка.Фамилия;
	Имя      = Выборка.Имя;
	Отчество = Выборка.Отчество;

КонецПроцедуры

&НаКлиенте
Функция АвтоНаименованиеФизЛица()
	
	//Элементы.Наименование.СписокВыбора.Очистить();
	//
	//СтрокаНаименования = "";
	//Если НЕ ПустаяСтрока(Фамилия) Тогда
	//	СтрокаНаименования = Фамилия + " " + Имя + " " + Отчество;
	//	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	//	Если НЕ ПустаяСтрока(Имя) Тогда
	//		СтрокаНаименования = Фамилия + " " + Лев(Имя,1) + ".";
	//		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	//		Если НЕ ПустаяСтрока(Отчество) Тогда
	//			СтрокаНаименования = Фамилия + " " + Лев(Имя,1) + ". " + Лев(Отчество,1) + ".";
	//			Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Возврат СтрокаНаименования;
	
	
	Имя = СокрЛП(Имя);
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	СтрокаНаименования = "";
	Если НЕ ПустаяСтрока(Фамилия) Тогда
		ЕстьИмя = Не ПустаяСтрока(Имя);
		ЕстьОтчество = НЕ ПустаяСтрока(Отчество);
		Разделитель1 = ?(ЕстьИмя, " ", ""); 
		Разделитель2 = ?(ЕстьОтчество, " ", ""); 
		СтрокаНаименования = Фамилия + Разделитель1 + Имя + Разделитель2 + Отчество;
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
		Если ЕстьИмя Тогда
			СтрокаНаименования = Фамилия + " " + Лев(Имя,1) + ".";
			Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
			Если ЕстьОтчество Тогда
				СтрокаНаименования = Фамилия + " " + Лев(Имя,1) + ". " + Лев(Отчество,1) + ".";
				Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаНаименования;
	
	
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Свойства

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "КОНТАКТНАЯ ИНФОРМАЦИЯ"

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеОчистка(ЭтотОбъект, Элемент.Имя);
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПодключаемаяКоманда(ЭтотОбъект, Команда.Имя);
	ОбновитьКонтактнуюИнформацию(Результат);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуВводаАдреса(ЭтотОбъект, Результат);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьКонтактнуюИнформацию(Результат = Неопределено)
	
	Возврат УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура УстановитьДолжность(Команда)
	Парам = Новый Структура; 
    Отбор = Новый Структура; 
    Отбор.Вставить("Сотрудник", Объект.Ссылка); // то, по чему нужно искать
    Парам.Вставить("Отбор", Отбор); 
     
    ОткрытьФорму("РегистрСведений.РаботаВыполняемаяСотрудниками.ФормаСписка", Парам);
КонецПроцедуры

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)

	Фамилия = СокрЛП(Фамилия);
	АвтоНаименованиеФизЛица();

КонецПроцедуры

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)

	Имя = СокрЛП(Имя);
	АвтоНаименованиеФизЛица();

КонецПроцедуры

&НаКлиенте
Процедура ОтчествоПриИзменении(Элемент)

	Отчество = СокрЛП(Отчество);
	АвтоНаименованиеФизЛица();

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
		Если НЕ Элементы.Наименование.СписокВыбора.НайтиПоЗначению(Объект.Наименование) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Наименование = СокрЛП(Объект.Наименование);
	Если НЕ ПустаяСтрока(Объект.Наименование) Тогда
		// Удаление двойных пробелов
		Пока Найти(Объект.Наименование, "  ") > 0 Цикл
			Объект.Наименование = СтрЗаменить(Объект.Наименование, "  ", " ");
		КонецЦикла;
		Наименование = Объект.Наименование;
		ЧислоВхождений = СтрЧислоВхождений(Наименование, " ");
		
		Если ЧислоВхождений = 0 Тогда
			Фамилия = Наименование;
			Имя = "";
			Отчество = "";
		ИначеЕсли ЧислоВхождений = 1 Тогда
			ПозицияСимволаПробела = Найти(Наименование, " ");
			Фамилия = Лев(Наименование, ПозицияСимволаПробела - 1);
			Имя = Сред(Наименование, ПозицияСимволаПробела + 1);
			Отчество = "";
		Иначе
			ЧислоПропусков = ЧислоВхождений - 2;
			НаименованиеВОбработке = Наименование;
			Для Индекс = 1 По ЧислоВхождений Цикл
				ПозицияСимволаПробела = Найти(НаименованиеВОбработке, " ");
				НаименованиеВОбработке = Сред(НаименованиеВОбработке, ПозицияСимволаПробела + 1);
				Если ЧислоПропусков > 0 Тогда
					ЧислоПропусков = ЧислоПропусков - 1;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ДлинаИмениИОтчества = СтрДлина(НаименованиеВОбработке);
			ДлинаНаименования   = СтрДлина(Наименование);
			ПозицияСимволаПробела = ДлинаНаименования - ДлинаИмениИОтчества;
			Фамилия     = Лев(Наименование, ПозицияСимволаПробела - 1);
			
			ПозицияСимволаПробела = Найти(НаименованиеВОбработке, " ");
			Имя      = Лев(НаименованиеВОбработке, ПозицияСимволаПробела - 1);
			Отчество = Сред(НаименованиеВОбработке, ПозицияСимволаПробела + 1)
		КонецЕсли;
		
		АвтоНаименованиеФизЛица();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 25.10.2022 06:53:18
Процедура КомандаКонтрагентыОбновить(Команда)

	ЗаполнитьТаблицуКонтрагентов();

КонецПроцедуры

&НаСервере	//	LNK 25.10.2022 06:54:07
Процедура ЗаполнитьТаблицуКонтрагентов()

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.Код КАК Код,
	|	ТаблицаСправочник.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.ФизЛицо = &ТекущаяСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код"
	);
	Запрос.УстановитьПараметр("ТекущаяСсылка", Объект.Ссылка);

	ТаблицаКонтрагенты.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

&НаКлиенте	//	LNK 26.10.2022 04:49:49
Процедура ТаблицаКонтрагентыКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

























