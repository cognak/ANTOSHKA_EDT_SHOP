#Область ОбработчикиСобытийОбъекта

Процедура ОбработкаЗаполнения(ДанныеЗаполнения)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Организации") Тогда
		
		Наименование           = ДанныеЗаполнения.Наименование;
		ЮрФизЛицо              = ДанныеЗаполнения.ЮрФизЛицо;
		НаименованиеПолное     = ДанныеЗаполнения.НаименованиеПолное;
		ОсновнойБанковскийСчет = ДанныеЗаполнения.ОсновнойБанковскийСчет;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Перем ТекстСообщения;

//	LNK 20.12.2016 07:32:53
	Если ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() = Истина Тогда

		ПроверяемыеРеквизиты.Очистить();
		Возврат;

	КонецЕсли;

	ЭтоЮрЛицо = ЭтоЮрЛицо(ЮрФизЛицо);
	
	Если Не ЭтоНовый() Тогда
		ЗначенияРеквизитовВИнформационнойБазе = ОбщегоНазначенияРТ.ПолучитьЗначенияРеквизитовОбъекта(Ссылка, Новый Структура("ИННПлательщикаНДС,НомерСвидетельстваПлательщикаНДС,КодПоЕДРПОУ"));
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	

	Если НЕ ПустаяСтрока(ИННПлательщикаНДС) Тогда 
		Если (ЭтоНовый() ИЛИ ЗначенияРеквизитовВИнформационнойБазе.ИННПлательщикаНДС <> ИННПлательщикаНДС)
			И НЕ РегламентированныеДанныеКлиентСервер.ИННПлательщикаНДССоответствуетТребованиям(ИННПлательщикаНДС,ЭтоЮрЛицо,ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект,
			"ИННПлательщикаНДС",
			,
			Отказ
			);
		КонецЕсли;
		Если НЕ ПлательщикНДС Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'У неплательщика не должен быть заполнен ИНН'"),
			ЭтотОбъект,
			"ИННПлательщикаНДС",
			,
			Отказ
			);
		КонецЕсли;
	Иначе
		Если ПлательщикНДС Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указан ИНН'"),
			ЭтотОбъект,
			"ИННПлательщикаНДС",
			,
			Отказ
			);
		КонецЕсли;
	Конецесли;
	
	Если НЕ ПустаяСтрока(НомерСвидетельстваПлательщикаНДС) Тогда
		Если НЕ ПлательщикНДС Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'У неплательщика не должен быть заполнен номер свидетельства'"),
			ЭтотОбъект,
			"ИННПлательщикаНДС",
			,
			Отказ
			);
		КонецЕсли;
	Иначе
		Если ПлательщикНДС Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указан номер свидетельства плательщика НДС'"),
			ЭтотОбъект,
			"НомерСвидетельстваПлательщикаНДС",
			,
			Отказ
			);
		КонецЕсли;
	Конецесли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Если НЕ ЭтоГруппа Тогда

		IDN = "";
		ДатаРождения = Неопределено;
		ДокументУдостоверяющийЛичность = "";
		ИННПлательщикаНДС = "";
		КодПоЕДРПОУ = "";
		НомерСвидетельстваПлательщикаНДС = "";
		Покупатель    = Ложь;
		Поставщик     = Ложь;
		Производитель = Ложь;
		РазрешитьПрямуюЗакупку = Ложь;

		КодИзменения = "";

		КонтактнаяИнформация.Очистить();
		ДополнительныеРеквизиты.Очистить();
		Дети.Очистить();

	КонецЕсли;

КонецПроцедуры

//	LNK 19.08.2016
Процедура ПередЗаписью(Отказ)

	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("Наименование", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Наименование", ""));
	ДополнительныеСвойства.Вставить("НеПроверятьРегистрациюВОбменNavision", Истина);	//	LNK 01.11.2018 14:59:04

	ВыполнитьПроверкиКорректностиИнформации();

	Если ЭтоНовый() Тогда

	//	LNK 09.07.2021 05:46:39 - независимо от режима загрузки!
		ДатаСоздания = ТекущаяДата();

	КонецЕсли;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/
//	LNK 09.11.2016 09:40:17
//	Контрольные проверки выполнять ниже данного условия!

	Если ОбменДанными.Загрузка Тогда

		Возврат;

	КонецЕсли;

	Если НЕ ЭтоНовый() И ДатаСоздания = '00010101' Тогда	//	LNK 09.07.2021 05:50:06

		ДатаСоздания = ОбщегоНазначенияКлиентСервер.УникальныйИдентификаторВремя(Ссылка.УникальныйИдентификатор());

	КонецЕсли;

	Если НЕ ЭтоГруппа Тогда

		УстановитьИдентификаторВнешнихИсточников();
		УстановитьДетямУникальныйИдентификатор();
		ПроверитьКонтактнуюИнформацию();	//	LNK 24.07.2023 13:21:40

	КонецЕсли;

	Если ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда

		Возврат;

	КонецЕсли;

//	LNK 13.11.2016 15:10:41

	Если НЕ ЭтоГруппа Тогда

		Если Поставщик И ПустаяСтрока(IDN) Тогда

			Отказ = Истина;
			Сообщить("Отказано. Поставщик не может иметь пустой IDN (идентификатор Navision).");

		КонецЕсли;

		Если НЕ Отказ Тогда

		//	Сделаем невозможной дурную привычку очищать наименование!
			Если ПустаяСтрока(Наименование) И НЕ ЭтоНовый() И НЕ ПустаяСтрока(ДополнительныеСвойства.Наименование) Тогда

				Наименование = ДополнительныеСвойства.Наименование;

			КонецЕсли;

			НормализоватьНаименование(Отказ);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 02.10.2016 13:55:18
Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка ИЛИ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда

		УстановитьДанныеРегистраФИОФизЛиц();
		ПроверитьАрхивДанныхКонтрагентов();
		ПрисвоитьНовомуВиртуальнуюКарту();

		Справочники.Контрагенты.ОчиститьСоответствияОбъектовУчетныхСистем(Ссылка, ПометкаУдаления);	//	LNK 18.11.2023 05:57:49

		РегистрыСведений.ОповещенияПользователя.Установить(Ссылка, "ЗАПИСЬ_ЭЛЕМЕНТА");	//	LNK 03.03.2024 07:57:05

		Возврат;

	КонецЕсли;

	УстановитьДанныеРегистраФИОФизЛиц();
	ПроверитьАрхивДанныхКонтрагентов();
	ПрисвоитьНовомуВиртуальнуюКарту();

	Справочники.Контрагенты.ОчиститьСоответствияОбъектовУчетныхСистем(Ссылка, ПометкаУдаления);	//	LNK 18.11.2023 05:57:49

	РегистрыСведений.ОповещенияПользователя.Установить(Ссылка, "ЗАПИСЬ_ЭЛЕМЕНТА");	//	LNK 03.03.2024 07:57:05

	Если ДополнительныеСвойства.ЭтоНовый Тогда

		ВнешниеИсточникиСобытия.УстановитьIDNПоКлючевомуРеквизиту(ТипЗнч(Ссылка), ЭтотОбъект);

	КонецЕсли;

КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// По переданному значению перечисления ЮрФизЛицо определяет, является ли оно признаком ЮрЛица
//
// Параметры
//  ЮрФизЛицо  -   Перечисления.ЮрФизЛицо 
// Возвращаемое значение:
//   Булево   - Истина, если юридическое лицо, Ложь если нет.
//
Функция ЭтоЮрЛицо(ЮрФизЛицо) 

	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо ИЛИ ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		Возврат Истина;
	ИначеЕсли ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо 
			ИЛИ ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

//	LNK 09.11.2016 09:41:24
Процедура ВыполнитьПроверкиКорректностиИнформации()

	Если Найти(Наименование, "null") Тогда

		Наименование = СтрЗаменить(Наименование, "null", "");

	КонецЕсли;

	Наименование = СокрЛП(СтрЗаменить(Наименование, "  ", " "));

	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "СлужебнаяЗапись", Ложь) = Истина Тогда

		Возврат;

	КонецЕсли;

	Если НайтиНедопустимыеСимволыXML(Наименование) Тогда

		Наименование = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Наименование, "");

	КонецЕсли;

	Если НЕ ЭтоГруппа Тогда

		Если ЭтоНовый()
			И ОбменДаннымиПовтИсп.ЭтоГлавныйУзел()
			И НЕ ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
			И (ЗначениеЗаполнено(ОбменДанными.Отправитель) ИЛИ ПустаяСтрока(IDN)) Тогда

		//	Предполагается, что объект приехал из периферии или записывается НЕ в контексте загрузки из Navision.
		//	В последнем случае ключ IDN должен быть уже заполнен!
			ДополнительныеСвойства.Вставить("РегистрацияПередачиВNavision", Истина);

		КонецЕсли;

		Если НайтиНедопустимыеСимволыXML(НаименованиеПолное) Тогда

			НаименованиеПолное = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(НаименованиеПолное, "");

		КонецЕсли;

		Для каждого СтрокаДети Из Дети Цикл

			Если НайтиНедопустимыеСимволыXML(СтрокаДети.Фамилия) Тогда

				СтрокаДети.Фамилия = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(СтрокаДети.Фамилия, "");

			КонецЕсли;

			Если НайтиНедопустимыеСимволыXML(СтрокаДети.Имя) Тогда

				СтрокаДети.Имя = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(СтрокаДети.Имя, "");

			КонецЕсли;

			Если НайтиНедопустимыеСимволыXML(СтрокаДети.Отчество) Тогда

				СтрокаДети.Отчество = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(СтрокаДети.Отчество, "");

			КонецЕсли;

		КонецЦикла;

		Для каждого СтрокаКонтакты Из КонтактнаяИнформация Цикл

			Для каждого Реквизит Из Метаданные.Справочники.Контрагенты.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты Цикл

				Если ТипЗнч(СтрокаКонтакты[Реквизит.Имя]) = Тип("Строка") И НайтиНедопустимыеСимволыXML(СтрокаКонтакты[Реквизит.Имя]) Тогда

					СтрокаКонтакты[Реквизит.Имя] = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(СтрокаКонтакты[Реквизит.Имя], "");

				КонецЕсли;

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	LNK 02.07.2018 15:30:38
Процедура НормализоватьНаименование(Отказ)	Экспорт

	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И НЕ Лев(Наименование, 1) = "<" Тогда

		Если КонтактнаяИнформацияКлиентСервер.ЭтоПустоеНаименование(Наименование) Тогда

			НаименованиеПолное = "";

		Иначе

		//	Выполним минимальную нормализацию наименования..
			СтроковыеФункцииКлиентСервер.ПривестиНаименование(Наименование, Ложь, Истина);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 28.03.2019 14:55:00
Процедура УстановитьИдентификаторВнешнихИсточников()

	Если ПустаяСтрока(IDN) Тогда

		Если ПустаяСтрока(Код) Тогда

			УстановитьНовыйКод();

		КонецЕсли;

		IDN = СокрЛП(Код);

	КонецЕсли;

КонецПроцедуры

//	LNK 21.02.2019 07:07:44
Процедура УстановитьДетямУникальныйИдентификатор()

	Для каждого СтрокаТабличнойЧасти Из Дети Цикл

		Если ПустаяСтрока(СтрокаТабличнойЧасти.УникальныйИдентификатор) Тогда

			СтрокаТабличнойЧасти.УникальныйИдентификатор = ВРег(СокрЛП(Новый УникальныйИдентификатор));

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ПрисвоитьНовомуВиртуальнуюКарту()	Экспорт

	Если ДополнительныеСвойства.ЭтоНовый И ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Принудительно = Ложь;	//	отладочный функционал

		Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ПрисвоитьВиртуальнуюКарту", Ложь) = Истина
		ИЛИ  Принудительно = Истина	Тогда

			ИнформационныеКартыСлужебный.ПрисвоитьРезервнуюВиртуальнуюКарту(Ссылка
				, ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин
				, Справочники.Контрагенты.ПолучитьНомерТелефона(ЭтотОбъект)
				, ПараметрыСеанса.ТекущийПользователь
				, Ложь
			);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 04.09.2019 11:18:23
Процедура УстановитьДанныеРегистраФИОФизЛиц()

	Перем ФИО;

	Если ЭтоГруппа ИЛИ НЕ ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда

		Возврат;

	КонецЕсли;

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если ПринятьФамилиюИмяОтчество(ФИО) Тогда

		СтруктураЗаписи = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("ФизЛицо", Ссылка));

		Если 	НЕ СтруктураЗаписи.Фамилия = ФИО.Фамилия
			ИЛИ НЕ СтруктураЗаписи.Отчество = ФИО.Отчество
			ИЛИ НЕ СтруктураЗаписи.Имя = ФИО.Имя Тогда

			МенеджерЗаписи = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();

			МенеджерЗаписи.ФизЛицо  = Ссылка;
			МенеджерЗаписи.Период   = ТекущаяДата();
			МенеджерЗаписи.Фамилия  = ФИО.Фамилия;
			МенеджерЗаписи.Имя      = ФИО.Имя;
			МенеджерЗаписи.Отчество = ФИО.Отчество;

			МенеджерЗаписи.Записать(Истина);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 04.09.2019 11:52:22
Функция ПринятьФамилиюИмяОтчество(ФИО)

	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");

	Принять = Ложь;

	Если ДополнительныеСвойства.Свойство("ФИО") Тогда

		Для каждого КлючЗначение Из ФИО Цикл

			Если ДополнительныеСвойства.ФИО.Свойство(КлючЗначение.Ключ) Тогда

				ФИО[КлючЗначение.Ключ] = ДополнительныеСвойства.ФИО[КлючЗначение.Ключ];
				Принять = Истина;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат Принять;

КонецФункции

//	LNK 24.07.2023 13:22:01
Процедура ПроверитьКонтактнуюИнформацию()

	СтрокиДляУдаления = Новый Массив;

	Для каждого СтрокаТабличнойЧасти Из КонтактнаяИнформация Цикл

		Если СтрокаТабличнойЧасти.Тип.Пустая() И СтрокаТабличнойЧасти.Вид.Пустая() Тогда

			СтрокиДляУдаления.Добавить(СтрокаТабличнойЧасти);

		КонецЕсли;

	КонецЦикла;

	Для каждого СтрокаТабличнойЧасти Из СтрокиДляУдаления Цикл

		КонтактнаяИнформация.Удалить(СтрокаТабличнойЧасти);

	КонецЦикла;

КонецПроцедуры

#Область АрхивДанныхКонтрагентов

//	LNK 04.09.2019 10:20:06
Процедура ПроверитьАрхивДанныхКонтрагентов()	Экспорт
//	Метод делаем экпортируемым для служебных потребностей.. например, при первоначальном заполнении

	Если ЭтоГруппа ИЛИ НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Возврат;

	КонецЕсли;

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если НЕ ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
		
		ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());

	КонецЕсли;

	ДанныеОбъекта = ПолучитьДанныеОбъекта();

	Если НЕ ДополнительныеСвойства.ЭтоНовый = Истина ИЛИ ДополнительныеСвойства.Свойство("ИнформацияАрхива") Тогда

		Применить    = Ложь;
		ДанныеАрхива = РегистрыСведений.АрхивДанныхКонтрагентов.ПолучитьПоследнее(, Новый Структура("Контрагент", Ссылка));

		Если ДанныеАрхива.Хранилище.Получить() = Неопределено Тогда

			Применить = Истина;	//	Запись в регистре отсутствует!

		Иначе

			Для каждого КлючЗначение Из ДанныеОбъекта Цикл

				Если НЕ КлючЗначение.Значение = ДанныеАрхива[КлючЗначение.Ключ] Тогда

					Применить = Истина;
					Прервать;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	Иначе	Применить = Истина;

	КонецЕсли;

	Если Применить Тогда

		МенеджерЗаписи = РегистрыСведений.АрхивДанныхКонтрагентов.СоздатьМенеджерЗаписи();

		Для каждого КлючЗначение Из ДанныеОбъекта Цикл

			МенеджерЗаписи[КлючЗначение.Ключ] = КлючЗначение.Значение;

		КонецЦикла;

		МенеджерЗаписи.Период = ТекущаяДата();
		МенеджерЗаписи.Контрагент = Ссылка;	//	в обработчике "ПриЗаписи"

		ЗаписьXML = Новый ЗаписьFastInfoset;
		ЗаписьXML.УстановитьДвоичныеДанные();
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписатьXML(ЗаписьXML, ЭтотОбъект, НазначениеТипаXML.Явное);
		ДвоичныеДанные = ЗаписьXML.Закрыть();

		МенеджерЗаписи.Хранилище  = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));

		Если ДополнительныеСвойства.Свойство("ИнформацияАрхива") Тогда

			МенеджерЗаписи.ВнешниеДанные    = Новый ХранилищеЗначения(ДополнительныеСвойства.ИнформацияАрхива.ВнешниеДанные, Новый СжатиеДанных(9));
			МенеджерЗаписи.ЭлементСтруктуры = ДополнительныеСвойства.ИнформацияАрхива.ЭлементСтруктуры;

		КонецЕсли;

		МенеджерЗаписи.Записать();

	КонецЕсли;

КонецПроцедуры

//	LNK 04.09.2019 10:25:54
Функция ПолучитьДанныеОбъекта()

	Перем ФИО;

	ДанныеОбъекта = Новый Структура(
		"Имя, Отчество, Фамилия, НомерТелефона, НомерТелефонаСлужебный, Электропочта, ЭлектропочтаСлужебный"
		, "", "", "", "", "", "", "");

	ДанныеОбъекта.Вставить("IDN", IDN);
	ДанныеОбъекта.Вставить("Код", Код);
	ДанныеОбъекта.Вставить("ДатаРождения", ДатаРождения);
	ДанныеОбъекта.Вставить("Наименование", Наименование);
	ДанныеОбъекта.Вставить("ПометкаУдаления", ПометкаУдаления);
	ДанныеОбъекта.Вставить("Пол", Пол);

	СписокКонтактов = Новый Структура;
	СписокКонтактов.Вставить("НомерТелефона"		 , Новый Структура("Реквизит, Вид", "НомерТелефона", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента));
	СписокКонтактов.Вставить("НомерТелефонаСлужебный", Новый Структура("Реквизит, Вид", "НомерТелефона", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагентаСлужебный));
	СписокКонтактов.Вставить("Электропочта"			 , Новый Структура("Реквизит, Вид", "АдресЭП"      , Справочники.ВидыКонтактнойИнформации.EmailКонтрагента));
	СписокКонтактов.Вставить("ЭлектропочтаСлужебный" , Новый Структура("Реквизит, Вид", "АдресЭП"      , Справочники.ВидыКонтактнойИнформации.EmailКонтрагентаСлужебный));

	Для каждого КлючЗначение Из СписокКонтактов Цикл

		СтрокаКонтакта = КонтактнаяИнформация.Найти(КлючЗначение.Значение.Вид, "Вид");

		Если НЕ СтрокаКонтакта = Неопределено Тогда

			ДанныеОбъекта.Вставить(КлючЗначение.Ключ, СтрокаКонтакта[КлючЗначение.Значение.Реквизит]);

		КонецЕсли;

	КонецЦикла;

	Если НЕ ДополнительныеСвойства.ЭтоНовый И ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда

		Если НЕ ПринятьФамилиюИмяОтчество(ФИО) Тогда

			ФИО = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(, Новый Структура("ФизЛицо", Ссылка));

		КонецЕсли;

		ДанныеОбъекта.Вставить("Фамилия" , ФИО.Фамилия);
		ДанныеОбъекта.Вставить("Имя"	 , ФИО.Имя);
		ДанныеОбъекта.Вставить("Отчество", ФИО.Отчество);

	КонецЕсли;

	Возврат ДанныеОбъекта;

КонецФункции

#КонецОбласти
	
#КонецОбласти
