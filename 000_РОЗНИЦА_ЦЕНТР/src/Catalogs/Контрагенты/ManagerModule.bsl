#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

//	LNK 15.04.2020 07:58:02
Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)

	СтрокаПоиска = СтрЗаменить(Параметры.СтрокаПоиска, " ", "");

	Если  СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоиска,, Ложь)
		И СтрДлина(СтрокаПоиска) = 12
		И Лев(СтрокаПоиска, 3) = "380"	Тогда

		ДанныеВыбора = ПолучитьСписокПоНомеруТелефона(СтрокаПоиска, Параметры.Отбор);

		Если НЕ ДанныеВыбора.Количество() = 0 Тогда

			СтандартнаяОбработка = Ложь;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

//	LNK 15.04.2020 08:03:35
Функция ПолучитьСписокПоНомеруТелефона(НомерТелефона, Отбор)	Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерТелефона", НомерТелефона);

	Если ТипЗнч(Отбор) = Тип("Структура") Тогда

		СтрокаОтборов = "";

		Для каждого КлючЗначение Из Отбор Цикл

			СтрокаОтборов = СтрокаОтборов + ?(ПустаяСтрока(СтрокаОтборов), "", " И ")
			+ "ТаблицаВедущая." + КлючЗначение.Ключ + " = &" + КлючЗначение.Ключ;

			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);

		КонецЦикла;

	Иначе

		СтрокаОтборов = "ИСТИНА";

	КонецЕсли;

	Запрос.Текст = СтрЗаменить(
	"ВЫБРАТЬ
	|	ТаблицаВедущая.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК ТаблицаВедущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтакты
	|		ПО ТаблицаВедущая.Ссылка = ТаблицаКонтакты.Ссылка
	|ГДЕ
	|	ТаблицаКонтакты.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента)
	|	И ТаблицаКонтакты.НомерТелефона = &НомерТелефона
	|	И &СтрокаОтборов"
	, "&СтрокаОтборов", СтрокаОтборов);

	СписокСсылок = Новый СписокЗначений;
	СписокСсылок.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));

	Возврат СписокСсылок;

КонецФункции

#Область ПрограммныйИнтерфейс

// Функция определяет значения реквизитов выбранного контрагента.
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - Ссылка на контрагента
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного контрагента
//
Функция ПолучитьРеквизитыКонтрагента(Контрагент) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Контрагенты.Наименование КАК Наименование,
	|	ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
	|	Контрагенты.КодПоЕДРПОУ КАК КодПоЕДРПОУ
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент
	|");
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Представление = Выборка.Наименование;
		Наименование = ?(Не ПустаяСтрока(Выборка.НаименованиеПолное), Выборка.НаименованиеПолное, Выборка.Наименование);
		КодПоЕДРПОУ	= Выборка.КодПоЕДРПОУ;
		НомерСвидетельства = Выборка.НомерСвидетельства;
	Иначе
		Представление = "";
		Наименование = "";
		КодПоЕДРПОУ	= "";
		НомерСвидетельства = "";
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Представление, Наименование, КодПоЕДРПОУ, НомерСвидетельства",
		Представление,
		Наименование,
		КодПоЕДРПОУ,
		НомерСвидетельства
	);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Функция определяет наименование контрагента.
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - Ссылка на контрагента
//
// Возвращаемое значение:
//	Строка - Наименование контрагента
//
Функция ПолучитьНаименованиеКонтрагента(Контрагент) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Контрагенты.Наименование КАК Наименование,
		|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Контрагент
		|"
	);
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Наименование = ?(ЗначениеЗаполнено(Выборка.НаименованиеПолное), Выборка.НаименованиеПолное, Выборка.Наименование);
	Иначе
		Наименование = "";
	КонецЕсли;
	
	Возврат Наименование;

КонецФункции

Функция ПолучитьНомерТелефона(Контрагент, НомерТелефонаПараметр = Неопределено)	Экспорт	//	LNK 24.10.2021 14:56:19

	НомерТелефона = "";

	Если ТипЗнч(НомерТелефонаПараметр) = Тип("Строка") И НЕ ПустаяСтрока(НомерТелефонаПараметр) Тогда

		НомерТелефона = СокрЛП(НомерТелефонаПараметр);

	ИначеЕсли ТипЗнч(Контрагент) = Тип("СправочникОбъект.Контрагенты") Тогда

		#Если Клиент Тогда
		//Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		#КонецЕсли

		СтрокаТелефон = Контрагент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, "Вид");

		Если НЕ СтрокаТелефон = Неопределено Тогда

			НомерТелефона = СокрЛП(СтрокаТелефон.НомерТелефона);

		КонецЕсли;

	Иначе

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаКонтакты.НомерТелефона КАК НомерТелефона
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтакты
		|ГДЕ
		|	ТаблицаКонтакты.Ссылка = &Контрагент
		|	И ТаблицаКонтакты.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента)
		|	И НЕ ТаблицаКонтакты.НомерТелефона = """""
		);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда

			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();

			НомерТелефона = СокрЛП(Выборка.НомерТелефона);

		КонецЕсли;

	КонецЕсли;

	Возврат НомерТелефона;

КонецФункции

//	LNK 25.10.2022 04:38:14
Функция ЯвляетсяСотрудником(Контрагент)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	СотрудникАнтошки = Ложь;

	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") И НЕ Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ТаблицаСправочник.ФизЛицо.Сотрудник, ЛОЖЬ)
		|		И НЕ ЕСТЬNULL(ТаблицаСправочник.ФизЛицо.Уволен, ЛОЖЬ) КАК СотрудникАнтошки
		|ИЗ
		|	Справочник.Контрагенты КАК ТаблицаСправочник
		|ГДЕ
		|	ТаблицаСправочник.Ссылка = &Контрагент"
		);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда

			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();

			СотрудникАнтошки = Выборка.СотрудникАнтошки;

		КонецЕсли;

	КонецЕсли;

	Возврат СотрудникАнтошки;

КонецФункции

Функция ЕстьДеньРожденияРебенка(Контрагент) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтрагентыДети.Ссылка
		|ИЗ
		|	Справочник.Контрагенты.Дети КАК КонтрагентыДети
		|ГДЕ
		|	КонтрагентыДети.Ссылка = &Ссылка
		|	И ДЕНЬ(КонтрагентыДети.ДатаРождения) МЕЖДУ &ДеньРождения - 7 И &ДеньРождения + 7
		|	И МЕСЯЦ(КонтрагентыДети.ДатаРождения) = &МесяцРождения";
	
	Запрос.УстановитьПараметр("Ссылка", Контрагент);
	Запрос.УстановитьПараметр("ДеньРождения", День(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("МесяцРождения", Месяц(ТекущаяДатаСеанса()));
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

//	LNK 30.09.2023 14:03:25
Функция IDN_КореллируетДаннымNAV(Контрагент)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Отказ = Истина;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.IDN КАК IDN
	|ИЗ
	|	Справочник.Контрагенты КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Ссылка = &Контрагент"
	);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();

		Отказ = СтрДлина(СокрЛП(Выборка.IDN)) > 10;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

#КонецОбласти

#Область СпецификаРаботыMSCRM

//	LNK 05.08.2019 13:46:46
Функция КлючиПоискаУказаны(ДанныеКонтрагента)	Экспорт

	Возврат НЕ (ПустаяСтрока(ДанныеКонтрагента.УИ.IDC) И ПустаяСтрока(ДанныеКонтрагента.УИ.IDD) И ПустаяСтрока(ДанныеКонтрагента.УИ.IDN) И ПустаяСтрока(ДанныеКонтрагента.НомерТелефона));

КонецФункции

//	LNK 02.08.2019 13:45:23
Функция НайтиКонтрагентаПоДаннымCRM(ДанныеКонтрагента, ВернутьОбъекты = Ложь)	Экспорт

	ТекстОшибки   = "";	//	уточнение проблемы.
	СоставДанных  = ОбменMicrosoftDynamicsСервер.ИнициализироватьСоставДанных();
	ПоискВыполнен = Ложь;

//	1. Идентифицируем контрагента.

	Если НЕ ПустаяСтрока(ДанныеКонтрагента.УИ.IDC) И СтрДлина(ДанныеКонтрагента.УИ.IDC) = 36 Тогда

//	1.1.	пытаемся найти по "нашему" идентификатору, если он не пустой.

		Попытка

			СоставДанных.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеКонтрагента.УИ.IDC));

			КонтрагентОбъект = СоставДанных.Контрагент.ПолучитьОбъект();
			#Если Клиент Тогда
			//КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
			#КонецЕсли

			Если КонтрагентОбъект = Неопределено Тогда

				СоставДанных.Контрагент = Неопределено;

			Иначе

				СтрокаКонтакта = КонтрагентОбъект.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, "Вид");

				Если НЕ (СтрокаКонтакта = Неопределено ИЛИ ПустаяСтрока(СтрокаКонтакта.НомерТелефона)) Тогда

					СоставДанных.НомерТелефона = СтрокаКонтакта.НомерТелефона;

				КонецЕсли;

				ДанныеРесурсов = РегистрыСведений.СоответствияОбъектовУчетныхСистем.Получить(
					Новый Структура("Ссылка, УчетнаяСистема"
									, СоставДанных.Контрагент
									, Перечисления.УчетныеСистемыКомпании.MSDynCRM)
				);

				СоставДанных.IDD = ДанныеРесурсов.УникальныйИдентификаторПриемника;

			КонецЕсли;

			ПоискВыполнен = Истина;

		Исключение

			ТекстОшибки = ОписаниеОшибки();
			СоставДанных.Контрагент = Неопределено;
			ПоискВыполнен = Ложь;

		КонецПопытки;

	КонецЕсли;

	Если СоставДанных.Контрагент = Неопределено И НЕ ПустаяСтрока(ДанныеКонтрагента.УИ.IDD) Тогда

//	1.2.	пытаемся найти по идентификатору CRM, который был записан в РегситрыСведений.СоответствияОбъектовУчетныхСистем
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	ЕСТЬNULL(ТаблицаКонтакты.НомерТелефона, """") КАК НомерТелефона
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовУчетныхСистем КАК ТаблицаСоответствий
		|		ПО Контрагенты.Ссылка = ТаблицаСоответствий.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтакты
		|		ПО Контрагенты.Ссылка = ТаблицаКонтакты.Ссылка
		|			И (ТаблицаКонтакты.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
		|			И (НЕ ТаблицаКонтакты.НомерТелефона = """")
		|ГДЕ
		|	НЕ Контрагенты.ЭтоГруппа
		|	И ТаблицаСоответствий.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.MSDynCRM)
		|	И ТаблицаСоответствий.УникальныйИдентификаторПриемника = &IDD"
		);
		Запрос.УстановитьПараметр("IDD", ДанныеКонтрагента.УИ.IDD);

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда

			СоставДанных.Контрагент    = Выборка.Контрагент;
			СоставДанных.НомерТелефона = Выборка.НомерТелефона;
			СоставДанных.IDD		   = ДанныеКонтрагента.УИ.IDD;

		КонецЕсли;

		ПоискВыполнен = Истина;

	КонецЕсли;

//	1.3.	пытаемся найти клиента по номеру телефона

	Если СоставДанных.Контрагент = Неопределено И НЕ ПустаяСтрока(ДанныеКонтрагента.НомерТелефона) Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ТаблицаРегистра.УникальныйИдентификаторПриемника, """") КАК IDD,
		|	Владельцы.Ссылка КАК Контрагент,
		|	Владельцы.ПометкаУдаления
		|		ИЛИ Владельцы.Блокирован КАК Блокирован
		|ПОМЕСТИТЬ Источник
		|ИЗ
		|	Справочник.Контрагенты КАК Владельцы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК Контакты
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовУчетныхСистем КАК ТаблицаРегистра
		|			ПО Контакты.Ссылка = ТаблицаРегистра.Ссылка
		|				И (ТаблицаРегистра.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.MSDynCRM))
		|		ПО Владельцы.Ссылка = Контакты.Ссылка
		|ГДЕ
		|	Контакты.НомерТелефона = &НомерТелефона
		|	И Контакты.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента)
		|	И Владельцы.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Источник.Контрагент) КАК Счётчик
		|ИЗ
		|	Источник КАК Источник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Источник.IDD КАК IDD,
		|	Источник.Контрагент КАК Контрагент,
		|	Источник.Блокирован КАК Блокирован
		|ИЗ
		|	Источник КАК Источник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Источник"
		);
		Запрос.УстановитьПараметр("НомерТелефона", ДанныеКонтрагента.НомерТелефона);

		Результаты = Запрос.ВыполнитьПакет();

		Выборка = Результаты[1].Выбрать();
		Выборка.Следующий();

		ПоискВыполнен = Истина;

		Если Выборка.Счётчик = 1 Тогда

			Выборка = Результаты[2].Выбрать();
			Выборка.Следующий();

			Если Выборка.Блокирован = Истина Тогда
				
				ТекстОшибки = "Номер телефона «" + ДанныеКонтрагента.НомерТелефона + "» принадлежит БЛОКИРОВАННОМУ покупателю!"
				+ Символы.ПС + "Для решения проблемы необходимо обратиться к администратору!";

				ДанныеКонтрагента.РазрешеноСозданиеНового = Ложь;
				ДанныеКонтрагента.ИнтерактивныйВводНового = Ложь;
				ПоискВыполнен = Ложь;

			Иначе

				СоставДанных.Контрагент    = Выборка.Контрагент;
				СоставДанных.НомерТелефона = ДанныеКонтрагента.НомерТелефона;
				СоставДанных.IDD		   = Выборка.IDD;

			КонецЕсли;

		ИначеЕсли Выборка.Счётчик > 1 Тогда

			ТекстОшибки = "Номер телефона «" + ДанныеКонтрагента.НомерТелефона + "» принадлежит двум (или более) покупателям!"
			+ Символы.ПС + "Для решения проблемы необходимо обратиться к администратору!";

			ДанныеКонтрагента.РазрешеноСозданиеНового = Ложь;
			ДанныеКонтрагента.ИнтерактивныйВводНового = Ложь;
			ПоискВыполнен = Истина;

		ИначеЕсли Выборка.Счётчик = 0 Тогда	//	LNK 11.11.2020 05:58:54

			ДанныеКонтрагента.ИнтерактивныйВводНового = Истина;

		КонецЕсли;

	КонецЕсли;

//	По IDN не ищем, так как не известно, как там обстоят дела с этим реквизитом в CRM... НЕ ТЕСТИРОВАНО!
	Если ЛОЖЬ И СоставДанных.Контрагент = Неопределено И НЕ ПустаяСтрока(ДанныеКонтрагента.УИ.IDN) Тогда

//	1.4.	пытаемся найти клиента по IDN, если он указан в сообщении.
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаСправочник.Ссылка КАК Контрагент,
		|	ЕСТЬNULL(ТаблицаРегистра.УникальныйИдентификаторПриемника, """") КАК IDD
		|ИЗ
		|	Справочник.Контрагенты КАК ТаблицаСправочник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовУчетныхСистем КАК ТаблицаРегистра
		|		ПО ТаблицаСправочник.Ссылка = ТаблицаРегистра.Ссылка
		|			И (ТаблицаРегистра.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.MSDynCRM))
		|ГДЕ
		|	НЕ ТаблицаСправочник.ЭтоГруппа
		|	И ТаблицаСправочник.IDN = &IDN"
		);
		Запрос.УстановитьПараметр("IDN", ДанныеКонтрагента.УИ.IDN);

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда

			СоставДанных.Контрагент = Выборка.Контрагент;
			СоставДанных.IDD		= Выборка.IDD;

		КонецЕсли;

		ПоискВыполнен = Истина;

	КонецЕсли;

	Если СоставДанных.Контрагент = Неопределено Тогда

		СоставДанных.Ошибка = Истина;
		СоставДанных.ОписаниеОшибки = "Контрагент не найден по ключам 'ID'"
		+ ?(НЕ ПустаяСтрока(ДанныеКонтрагента.НомерТелефона)
		, " и номеру телефона «" + ДанныеКонтрагента.НомерТелефона + "»"
		, "")
		+ ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС + СокрЛП(ТекстОшибки))
		+ Символы.ПС;

	Иначе

		ТаблицаКарт = Справочники.ИнформационныеКарты.ПолучитьКартыПоВнешнимДанным(СоставДанных.Контрагент, ДанныеКонтрагента.Карты, СоставДанных.ДисконтнаяКарта, ДанныеКонтрагента.ТекущийПользователь);

		ЗафиксироватьПроблемуВладельцаДисконтнойКарты(СоставДанных.Контрагент, ТаблицаКарт, ДанныеКонтрагента);

		Если НЕ ЗначениеЗаполнено(СоставДанных.ДисконтнаяКарта) Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаСправочник.Ссылка КАК КартаДисконта,
			|	ТаблицаСправочник.Код КАК Код
			|ИЗ
			|	Справочник.ИнформационныеКарты КАК ТаблицаСправочник
			|ГДЕ
			|	ТаблицаСправочник.ВладелецКарты = &Контрагент
			|	И ТаблицаСправочник.ТипКарты = ЗНАЧЕНИЕ(Перечисление.ТипыИнформационныхКарт.Дисконтная)
			|	И НЕ(ТаблицаСправочник.ПометкаУдаления
			|				ИЛИ ТаблицаСправочник.Блокирован)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Код УБЫВ"
			);
			Запрос.УстановитьПараметр("Контрагент", СоставДанных.Контрагент);
			
			КартыВыборка = Запрос.Выполнить().Выбрать();

			Если КартыВыборка.Следующий() Тогда

				СоставДанных.ДисконтнаяКарта = КартыВыборка.КартаДисконта;

			КонецЕсли;

		КонецЕсли;

		Если ВернутьОбъекты Тогда

			СоставДанных.Вставить("Объекты", Новый Структура("Контрагент, ДисконтнаяКарта"));

			СоставДанных.Объекты.Контрагент = СоставДанных.Контрагент.ПолучитьОбъект();

			Если ЗначениеЗаполнено(СоставДанных.ДисконтнаяКарта) Тогда

				СоставДанных.Объекты.ДисконтнаяКарта = СоставДанных.ДисконтнаяКарта.ПолучитьОбъект();

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

//	Ключ предназначен для анализа возможности создания нового контрагента.
	СоставДанных.ПоискВыполнен = ПоискВыполнен;

	Возврат СоставДанных;

КонецФункции

//	LNK 02.08.2019 14:01:59
Функция ПрименитьКонтрагентаПоДаннымCRM(ДанныеКонтрагента, СоставДанных, ВернутьОбъекты = Ложь, ВызовИсключения = Истина)	Экспорт

	Перем КонтрагентОбъект;

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	СоставДанных.Ошибка = Ложь;
	СоставДанных.ОписаниеОшибки = "";

	Если НЕ СоставДанных.Контрагент = Неопределено  Тогда

		Попытка

			КонтрагентОбъект = СоставДанных.Контрагент.ПолучитьОбъект();

			Если КонтрагентОбъект = Неопределено Тогда

				ВызватьИсключение "Попытка получения отсутствующего объекта «" + СоставДанных.Контрагент + "»";

			Иначе

				КонтрагентОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииMicrosoftDynamics", ДанныеКонтрагента.ОтключитьМеханизмРегистрацииMicrosoftDynamics);
				КонтрагентОбъект.Заблокировать();

			КонецЕсли;

		Исключение

			КонтрагентОбъект    = Неопределено;
			СоставДанных.Ошибка = Истина;
			СоставДанных.ОписаниеОшибки = "Ошибка при получении объекта:" + Символы.ПС + ОписаниеОшибки();

			ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала(Перечисления.ТипыРегистрацийMicrosoftDynamics.Контрагенты, Истина) + ".Применение"
			, УровеньЖурналаРегистрации.Ошибка
			, Метаданные.ПланыОбмена.ОбменMicrosoftDynamics
			, Неопределено
			,
			, СоставДанных.ОписаниеОшибки
			, СокрЛП(СоставДанных.Контрагент), Истина);

		КонецПопытки;

	ИначеЕсли ДанныеКонтрагента.РазрешеноСозданиеНового = Истина Тогда

		Если Справочники.Контрагенты.КлючиПоискаУказаны(ДанныеКонтрагента) Тогда

			КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
			КонтрагентОбъект.ОбменДанными.Загрузка = Истина;

			КонтрагентОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииMicrosoftDynamics", ДанныеКонтрагента.ОтключитьМеханизмРегистрацииMicrosoftDynamics);

			КонтрагентОбъект.УстановитьНовыйКод();

			КонтрагентОбъект.Родитель   = Справочники.Контрагенты.Покупатели;
			КонтрагентОбъект.Покупатель = Истина;
			КонтрагентОбъект.ЮрФизЛицо  = Перечисления.ЮрФизЛицо.ФизЛицо;

			КонтрагентОбъект.Автор        = ДанныеКонтрагента.ТекущийПользователь;
			КонтрагентОбъект.УзелСоздания = ДанныеКонтрагента.УзелСоздания;

			КонтрагентОбъект.IDN = ?(ПустаяСтрока(ДанныеКонтрагента.УИ.IDN), КонтрагентОбъект.Код, ДанныеКонтрагента.УИ.IDN);

			КонтрагентОбъект.УстановитьСсылкуНового(Справочники.Контрагенты.ПолучитьСсылку());

		//	вроде как кто-то ещё такую ссылку использует.. бред, но ошибки о возможном говорят.
			КонтрагентОбъект.Заблокировать();
		
		Иначе

			СоставДанных.Ошибка = Истина;
			СоставДанных.ОписаниеОшибки = "Отказано в создании нового! Ключи поиска контрагента НЕ указаны (IDC, IDD, IDN или номер телефона).";

		КонецЕсли;

	Иначе

		СоставДанных.Ошибка = Истина;
		СоставДанных.ОписаниеОшибки = СоставДанных.ОписаниеОшибки + ?(ПустаяСтрока(СоставДанных.ОписаниеОшибки), "", Символы.ПС)
		+ "Отказано в автоматическом создании нового контрагента.";

	КонецЕсли;

	Если НЕ КонтрагентОбъект = Неопределено Тогда

		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Блокирован"	, ДанныеКонтрагента.Блокирован, КонтрагентОбъект, Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Пол"			, ДанныеКонтрагента.Пол, КонтрагентОбъект, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ДатаРождения", ДанныеКонтрагента.ДатаРождения, КонтрагентОбъект, Истина);

		Если НЕ КонтрагентОбъект.Блокирован = КонтрагентОбъект.ПометкаУдаления Тогда

			КонтрагентОбъект.ПометкаУдаления = КонтрагентОбъект.Блокирован;

		КонецЕсли;

		Если ДанныеКонтрагента.Свойство("УдалениеОбъекта") И ДанныеКонтрагента.УдалениеОбъекта = Истина Тогда

			КонтрагентОбъект.ПометкаУдаления = Истина;

		КонецЕсли;

		СтроковыеФункцииКлиентСервер.ПривестиНаименование(ДанныеКонтрагента.Фамилия, Истина);
		СтроковыеФункцииКлиентСервер.ПривестиНаименование(ДанныеКонтрагента.Имя, Истина);
		СтроковыеФункцииКлиентСервер.ПривестиНаименование(ДанныеКонтрагента.Отчество, Истина);

		Если ДанныеКонтрагента.Свойство("Наименование") И НЕ ПустаяСтрока(ДанныеКонтрагента.Наименование) Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Наименование", ДанныеКонтрагента.Наименование, КонтрагентОбъект, Истина);

		Иначе

			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("Наименование"
				, СтроковыеФункцииКлиентСервер.ПривестиНаименование(ДанныеКонтрагента.Фамилия + " " + ДанныеКонтрагента.Имя + " " + ДанныеКонтрагента.Отчество)
				, КонтрагентОбъект, Истина
			);

		КонецЕсли;

		Если ПустаяСтрока(КонтрагентОбъект.Наименование) Тогда	//	устанавливаем "дефолтовое" значение

			КонтрагентОбъект.Наименование = КонтактнаяИнформацияКлиентСерверПовтИсп.ПустоеНаименование() + СокрЛП(КонтрагентОбъект.IDN);
			КонтрагентОбъект.НаименованиеПолное = "";

		Иначе

			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("НаименованиеПолное", КонтрагентОбъект.Наименование, КонтрагентОбъект, Истина);

		КонецЕсли;

		УстановитьКонтактнуюИнформацию(КонтрагентОбъект, ДанныеКонтрагента);
		УстановитьИнформациюОДетях(КонтрагентОбъект, ДанныеКонтрагента);

		Если КонтрагентОбъект.Модифицированность() Тогда

			ТранзакцияНачата = ТранзакцияАктивна();	//	учитываем "внешнюю" транзакцию

			Если НЕ ТранзакцияНачата Тогда

				НачатьТранзакцию();

			КонецЕсли;

			Попытка
				
				КонтрагентОбъект.ДополнительныеСвойства.Вставить(
					"ИнформацияАрхива"
					, Новый Структура(
						"ЭлементСтруктуры, ВнешниеДанные"
						, Справочники.СтруктураУзлов.MSDyn_CRM
						, ДанныеКонтрагента)
				);
				ЭтоНовый = КонтрагентОбъект.ЭтоНовый();

				Если ЭтоНовый Тогда	//	LNK 17.08.2021 13:49:27

					СоставДанных.ДисконтнаяКарта = ИнформационныеКартыСлужебный.ПрисвоитьРезервнуюВиртуальнуюКарту(КонтрагентОбъект.ПолучитьСсылкуНового()
						, ДанныеКонтрагента.Магазин
						, Справочники.Контрагенты.ПолучитьНомерТелефона(КонтрагентОбъект)
						, ДанныеКонтрагента.ТекущийПользователь
						, Ложь
					);

				КонецЕсли;

				КонтрагентОбъект.Записать();
				СоставДанных.Контрагент = КонтрагентОбъект.Ссылка;

				ТаблицаКарт = Справочники.ИнформационныеКарты.ПолучитьКартыПоВнешнимДанным(СоставДанных.Контрагент, ДанныеКонтрагента.Карты, СоставДанных.ДисконтнаяКарта, ДанныеКонтрагента.ТекущийПользователь);

				МенеджерЗаписи = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();

				МенеджерЗаписи.ФизЛицо  = СоставДанных.Контрагент;
				МенеджерЗаписи.Период   = ТекущаяДата();
				МенеджерЗаписи.Фамилия  = ДанныеКонтрагента.Фамилия;
				МенеджерЗаписи.Имя      = ДанныеКонтрагента.Имя;
				МенеджерЗаписи.Отчество = ДанныеКонтрагента.Отчество;

				МенеджерЗаписи.Записать(Истина);

				Если НЕ ПустаяСтрока(ДанныеКонтрагента.УИ.IDD) Тогда

					МенеджерЗаписи = РегистрыСведений.СоответствияОбъектовУчетныхСистем.СоздатьМенеджерЗаписи();

					МенеджерЗаписи.Ссылка = СоставДанных.Контрагент;
					МенеджерЗаписи.УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.MSDynCRM;

					МенеджерЗаписи.УникальныйИдентификаторИсточника = СокрЛП(МенеджерЗаписи.Ссылка.УникальныйИдентификатор());
					МенеджерЗаписи.УникальныйИдентификаторПриемника = ДанныеКонтрагента.УИ.IDD;

					МенеджерЗаписи.ДатаИзменения = ТекущаяДата();

					МенеджерЗаписи.Записать();

				КонецЕсли;

				Если НЕ ТранзакцияНачата Тогда

					ЗафиксироватьТранзакцию();

				КонецЕсли;

			//	.. вне транзакции
				ЗафиксироватьПроблемуВладельцаДисконтнойКарты(СоставДанных.Контрагент, ТаблицаКарт, ДанныеКонтрагента);

				Если ВернутьОбъекты = Истина Тогда

				//	"цепляем" к структуре возврата объекты для создания таковых в периферийной БД.

					СоставДанных.Вставить("Объекты", Новый Структура("Контрагент, ДисконтнаяКарта"));

					СоставДанных.Объекты.Контрагент = КонтрагентОбъект;

					Если ЗначениеЗаполнено(СоставДанных.ДисконтнаяКарта) Тогда

						СоставДанных.Объекты.ДисконтнаяКарта = СоставДанных.ДисконтнаяКарта.ПолучитьОбъект();

						Если  ЛОЖЬ И ЭтоНовый
							И СоставДанных.Объекты.ДисконтнаяКарта.ВидДисконтнойКарты = Справочники.ВидыДисконтныхКарт.ВиртуальныеКарты
							И НЕ ПустаяСтрока(ДанныеКонтрагента.НомерТелефона)
						Тогда

							ОтправкаSMS.ОтправитьSMS(
								ОбщегоНазначенияКлиентСервер.AAD(ОтправкаSMS.ПодготовитьНомерТелефона(ДанныеКонтрагента.НомерТелефона)),
								"Вы стали участником программы лояльности [" + СоставДанных.Объекты.ДисконтнаяКарта.КодКарты + "]"
							);

						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			Исключение

				Если НЕ ТранзакцияНачата Тогда

					ОтменитьТранзакцию();

				КонецЕсли;

				ТекстОшибки = ОписаниеОшибки();

				Если ВызовИсключения Тогда
					
					ВызватьИсключение ТекстОшибки;

				Иначе

					СоставДанных.Ошибка = Истина;
					СоставДанных.ОписаниеОшибки = "Ошибка создания контрагента:" + Символы.ПС + ТекстОшибки;

					ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала(Перечисления.ТипыРегистрацийMicrosoftDynamics.Контрагенты)
						+ ?(ЭтоНовый, ".Создание", ".Изменение") + "Объекта"
					, УровеньЖурналаРегистрации.Ошибка
					, Метаданные.Справочники.Контрагенты
					,
					,
					, ТекстОшибки
					, , Истина);

				КонецЕсли;

			КонецПопытки;

		КонецЕсли;

	КонецЕсли;

	Возврат СоставДанных;

КонецФункции

//	LNK 14.08.2019 13:43:57
Процедура УстановитьКонтактнуюИнформацию(КонтрагентОбъект, ДанныеКонтрагента)

	СоставКонтактов = Новый Массив;
	СоставКонтактов.Добавить(Новый Структура("Реквизит, ИмяВнешнее, ВидКонтакта, Телефон", "НомерТелефона", "НомерТелефона"         , "ТелефонКонтрагента", Истина));
	СоставКонтактов.Добавить(Новый Структура("Реквизит, ИмяВнешнее, ВидКонтакта, Телефон", "НомерТелефона", "НомерТелефонаСлужебный", "ТелефонКонтрагентаСлужебный", Истина));
	СоставКонтактов.Добавить(Новый Структура("Реквизит, ИмяВнешнее, ВидКонтакта, Телефон", "Представление", "Email"                 , "EmailКонтрагента", Ложь));
	СоставКонтактов.Добавить(Новый Структура("Реквизит, ИмяВнешнее, ВидКонтакта, Телефон", "Представление", "EmailСлужебный"        , "EmailКонтрагентаСлужебный", Ложь));
	СоставКонтактов.Добавить(Новый Структура("Реквизит, ИмяВнешнее, ВидКонтакта, Телефон", "Представление", "АдресПочтовый"         , "ПочтовыйАдресКонтрагента", Ложь));

	Для каждого Описатель Из СоставКонтактов Цикл

		СтрокаКонтакта = КонтактнаяИнформацияСлужебный.ПолучитьСтрокуКонтактнойИнформации(
			Справочники.ВидыКонтактнойИнформации[Описатель.ВидКонтакта],
			КонтрагентОбъект.КонтактнаяИнформация,
			НЕ ПустаяСтрока(ДанныеКонтрагента[Описатель.ИмяВнешнее]));

		Если НЕ СтрокаКонтакта = Неопределено Тогда

			Если ПустаяСтрока(ДанныеКонтрагента[Описатель.ИмяВнешнее]) Тогда	//	нет такого контакта у клиента.. удалить.

				КонтрагентОбъект.КонтактнаяИнформация.Удалить(СтрокаКонтакта);

			Иначе

				Если НЕ СтрокаКонтакта[Описатель.Реквизит] = ДанныеКонтрагента[Описатель.ИмяВнешнее] Тогда

					СтрокаКонтакта.Представление = ДанныеКонтрагента[Описатель.ИмяВнешнее];

					Если Описатель.Телефон Тогда

						КонтактнаяИнформацияВызовСервера.ПарсерНомераТелефона(СтрокаКонтакта, КонтрагентОбъект.Метаданные().ТабличныеЧасти.КонтактнаяИнформация.Реквизиты);

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//	LNK 14.08.2019 14:26:18
Процедура УстановитьИнформациюОДетях(КонтрагентОбъект, ДанныеКонтрагента)

	Если НЕ ДанныеКонтрагента.Свойство("Дети") ИЛИ ДанныеКонтрагента.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	КонтрагентОбъект.Дети.Очистить();

	Для каждого ДанныеРебёнка Из ДанныеКонтрагента.Дети Цикл

		СтрокаРебёнка = КонтрагентОбъект.Дети.Добавить();
		СтрокаРебёнка.Имя = ДанныеРебёнка.Имя;
		СтрокаРебёнка.Пол = ДанныеРебёнка.Пол;
		СтрокаРебёнка.ДатаРождения = ДанныеРебёнка.ДатаРождения;

	КонецЦикла;

КонецПроцедуры

//	LNK 05.08.2019 13:51:57
Процедура ОтложитьДанныеКонтрагента(КодКарты, НомерТелефона, ДанныеКонтрагента, Назначение, ДокументПродажи, Магазин, Контрагент = Неопределено)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если ЗначениеЗаполнено(Контрагент) И (НЕ ЗначениеЗаполнено(ДокументПродажи) ИЛИ НЕ ЗначениеЗаполнено(Магазин)) Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаОтложено.ДокументПродажи КАК ДокументПродажи,
		|	ТаблицаОтложено.Магазин КАК Магазин
		|ИЗ
		|	РегистрСведений.ДанныеКонтрагентовОтложенные КАК ТаблицаОтложено
		|ГДЕ
		|	НЕ ТаблицаОтложено.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	И ТаблицаОтложено.Контрагент = &Контрагент
		|	И ВЫБОР
		|			КОГДА &ДокументПродажи = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ТаблицаОтложено.ДокументПродажи = &ДокументПродажи
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Магазин = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ТаблицаОтложено.Магазин = &Магазин
		|		КОНЕЦ"
		);
		Запрос.УстановитьПараметр("Контрагент"     , Контрагент);
		Запрос.УстановитьПараметр("ДокументПродажи", ?(ЗначениеЗаполнено(ДокументПродажи), ДокументПродажи, Неопределено));
		Запрос.УстановитьПараметр("ДокументПродажи", ?(ЗначениеЗаполнено(Магазин), Магазин, Неопределено));
		
		КлючиВыборка = Запрос.Выполнить().Выбрать();
		
		Пока КлючиВыборка.Следующий() Цикл

			ОтложитьДанныеКонтрагентаЗаписать(,,, КлючиВыборка.ДокументПродажи, КлючиВыборка.Магазин, Контрагент);

		КонецЦикла;

	Иначе

		ОтложитьДанныеКонтрагентаЗаписать(КодКарты, НомерТелефона, ДанныеКонтрагента, Назначение, ДокументПродажи, Магазин, Контрагент);

	КонецЕсли;

КонецПроцедуры

//	LNK 05.08.2019 14:17:33
Процедура ОтложитьДанныеКонтрагентаЗаписать(КодКарты, НомерТелефона, ДанныеКонтрагента, Назначение, ДокументПродажи, Магазин, Контрагент = Неопределено)

	НаборЗаписей = РегистрыСведений.ДанныеКонтрагентовОтложенные.СоздатьНаборЗаписей();

	НаборЗаписей.Отбор.ДокументПродажи.Установить(ДокументПродажи);
	НаборЗаписей.Отбор.Магазин.Установить(Магазин);
	НаборЗаписей.Отбор.Назначение.Установить(Назначение);

	НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда

		Если ТипЗнч(ДанныеКонтрагента) = Тип("Структура") Тогда

			ЗаписьНабора = НаборЗаписей.Добавить();

			ЗаписьНабора.ДокументПродажи   = НаборЗаписей.Отбор.ДокументПродажи.Значение;
			ЗаписьНабора.Магазин           = НаборЗаписей.Отбор.Магазин.Значение;
			ЗаписьНабора.Назначение        = НаборЗаписей.Отбор.Назначение.Значение;

			ЗаписьНабора.Выполнен          = ?(ЗначениеЗаполнено(Контрагент), Истина, Ложь);
			ЗаписьНабора.ДанныеКонтрагента = Новый ХранилищеЗначения(ДанныеКонтрагента, Новый СжатиеДанных(9));
			ЗаписьНабора.КодКарты          = КодКарты;
			ЗаписьНабора.Контрагент        = Контрагент;
			ЗаписьНабора.НомерТелефона     = НомерТелефона;

			ЗаписьНабора.ДатаИзменения     = ТекущаяДата();

		КонецЕсли;

	Иначе	ЗаписьНабора = НаборЗаписей[0];

			Если ЗначениеЗаполнено(Контрагент) Тогда

				ЗаписьНабора.Выполнен  = Истина;
				ЗаписьНабора.Контрагент = Контрагент;

			КонецЕсли;

			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("КодКарты"     , КодКарты     , ЗаписьНабора, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("НомерТелефона", НомерТелефона, ЗаписьНабора, Истина);

	КонецЕсли;

	Если НЕ НаборЗаписей.Количество() = 0 И НаборЗаписей.Модифицированность() Тогда

		НаборЗаписей.Записать();

	КонецЕсли;

КонецПроцедуры

//	LNK 07.08.2019 10:00:31
Процедура ЗафиксироватьПроблемуВладельцаДисконтнойКарты(Контрагент, ТаблицаКарт, ДанныеКонтрагента)

	Попытка

		Для каждого СтрокаТаблицы Из ТаблицаКарт Цикл

			Если  НЕ СтрокаТаблицы.ДисконтнаяКарта.Пустая()
				И НЕ СтрокаТаблицы.ВладелецКарты = Контрагент	Тогда

				МенеджерЗаписи = РегистрыСведений.ОбъектыПроблемныеДоВыяснения.СоздатьМенеджерЗаписи();

				МенеджерЗаписи.Период   = ТекущаяДата();
				МенеджерЗаписи.Объект   = СтрокаТаблицы.ДисконтнаяКарта;
				МенеджерЗаписи.Магазин  = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин;

				МенеджерЗаписи.Статус   = Перечисления.СтатусыОбъектовДоВыяснения.CRM;
				МенеджерЗаписи.Источник = "Владелец карты";
				МенеджерЗаписи.МоментСоздания = ОбщегоНазначенияКлиентСервер.УникальныйИдентификаторВремя(СтрокаТаблицы.ДисконтнаяКарта.УникальныйИдентификатор());
				МенеджерЗаписи.Данные         = ДанныеКонтрагента;
				МенеджерЗаписи.Альтернатива   = Контрагент;

				МенеджерЗаписи.Комментарий = "Владелец карты НЕ соответствует полученному из MS Dynamics CRM";
				МенеджерЗаписи.Автор       = ДанныеКонтрагента.ТекущийПользователь;

				МенеджерЗаписи.Записать();

			КонецЕсли;

		КонецЦикла;

	Исключение

		ТекстОшибки = ОписаниеОшибки();

	КонецПопытки;

КонецПроцедуры

//	LNK 18.11.2023 05:46:23
Процедура ОчиститьСоответствияОбъектовУчетныхСистем(Контрагент, Знач ПометкаУдаления = Неопределено)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если ПометкаУдаления = Неопределено Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСправочник.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.Контрагенты КАК ТаблицаСправочник
		|ГДЕ
		|	ТаблицаСправочник.Ссылка = &Контрагент
		|	И ТаблицаСправочник.ПометкаУдаления"
		);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);

		РезультатЗапроса = Запрос.Выполнить();
		ПометкаУдаления	 = НЕ РезультатЗапроса.Пустой();

	КонецЕсли;

	Если ПометкаУдаления = Истина Тогда

		НаборЗаписей = РегистрыСведений.СоответствияОбъектовУчетныхСистем.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(Контрагент);

		НаборЗаписей.Записать();

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

//	LNK 20.05.2024 10:07:15
Функция НайтиПоТелефону(НомерТелефона, ЮрФизЛицо = Неопределено, Покупатель = Неопределено, ВидКонтакта = Неопределено)	Экспорт

	Контрагент = Справочники.Контрагенты.ПустаяСсылка();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтакты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаСправочник
	|		ПО ТаблицаКонтакты.Ссылка = ТаблицаСправочник.Ссылка
	|ГДЕ
	|	ТаблицаКонтакты.НомерТелефона = &НомерТелефона
	|	И ТаблицаКонтакты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И ВЫБОР
	|			КОГДА &ВидКонтакта = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаКонтакты.Вид = &ВидКонтакта
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ЮрФизЛицо = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаСправочник.ЮрФизЛицо = &ЮрФизЛицо
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Покупатель = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаСправочник.Покупатель = &Покупатель
	|		КОНЕЦ
	|	И ТаблицаСправочник.ПлательщикНДС = ЛОЖЬ
	|	И ТаблицаСправочник.Поставщик = ЛОЖЬ
	|	И ТаблицаСправочник.Производитель = ЛОЖЬ"
	);
	Запрос.УстановитьПараметр("НомерТелефона"	, ОтправкаSMS.ПодготовитьНомерТелефона(НомерТелефона));
	Запрос.УстановитьПараметр("ЮрФизЛицо"		, ЮрФизЛицо);
	Запрос.УстановитьПараметр("Покупатель"		, Покупатель);
	Запрос.УстановитьПараметр("ВидКонтакта"		, ВидКонтакта);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		ВыборкаДанных = РезультатЗапроса.Выбрать();
		ВыборкаДанных.Следующий();

		Контрагент = ВыборкаДанных.Контрагент;

	КонецЕсли;

	Возврат Контрагент;

КонецФункции

#Область СпецификаРаботыMagento

Процедура НайтиКонтрагентовПоСпискуMagento(ТаблицаВнешняя)	Экспорт

	#Если Клиент Тогда
	//ТаблицаВнешняя = Новый ТаблицаЗначений;
	#КонецЕсли

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Для каждого СтрокаВнешняя Из ТаблицаВнешняя Цикл

		Если НЕ ПустаяСтрока(СтрокаВнешняя.IDC) Тогда
			
			СтрокаВнешняя.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаВнешняя.IDC));

		КонецЕсли;

		СтрокаВнешняя.Найден = НЕ ОбщегоНазначенияКлиентСервер.СсылкаПустая(СтрокаВнешняя.Контрагент);

		Если СтрокаВнешняя.Найден Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаПочта.АдресЭП КАК EmailТекущий
			|ИЗ
			|	Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаПочта
			|ГДЕ
			|	ТаблицаПочта.Ссылка = &Контрагент
			|	И ТаблицаПочта.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагента)"
			);
			Запрос.УстановитьПараметр("Контрагент", СтрокаВнешняя.Контрагент);
			
			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда

				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();

				СтрокаВнешняя.EmailТекущий = СокрЛП(Выборка.EmailТекущий);

			КонецЕсли;

			Продолжить;

		КонецЕсли;

	КонецЦикла;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.НомерТелефона КАК НомерТелефона
	|ПОМЕСТИТЬ ТаблицаВнешняя
	|ИЗ
	|	&ТаблицаВнешняя КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерТелефона
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВнешняя.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ТаблицаВнешняя.НомерТелефона, """") КАК НомерТелефона,
	|	ТаблицаЗаголовки.Ссылка КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаголовки.Ссылка ЕСТЬ NULL
	|			ТОГДА 2
	|		КОГДА ТаблицаЗаголовки.ПометкаУдаления
	|				ИЛИ ТаблицаЗаголовки.Блокирован
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Блокирован,
	|	ЕСТЬNULL(ТаблицаПочта.АдресЭП, """") КАК EmailКонтрагента
	|ИЗ
	|	ТаблицаВнешняя КАК ТаблицаВнешняя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаТелефон
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаЗаголовки
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаПочта
	|				ПО ТаблицаЗаголовки.Ссылка = ТаблицаПочта.Ссылка
	|					И (ТаблицаПочта.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагента))
	|			ПО ТаблицаТелефон.Ссылка = ТаблицаЗаголовки.Ссылка
	|				И (ТаблицаТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
	|		ПО (НЕ ТаблицаВнешняя.НомерТелефона = """")
	|			И ТаблицаВнешняя.НомерТелефона = ТаблицаТелефон.НомерТелефона
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Блокирован
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаВнешняя"
	);
	Запрос.УстановитьПараметр("ТаблицаВнешняя", ТаблицаВнешняя.Скопировать(Новый Структура("Найден", Ложь), "НомерСтроки, НомерТелефона"));
	
	ДанныеВыборка = Запрос.Выполнить().Выбрать();

	СтрокаВыполнена = Новый Соответствие;

	Пока ДанныеВыборка.Следующий() Цикл

		Если СтрокаВыполнена.Получить(ДанныеВыборка.НомерСтроки) = Истина Тогда

			Продолжить;

		КонецЕсли;

		СтрокаВнешняя = ТаблицаВнешняя.Найти(ДанныеВыборка.НомерСтроки, "НомерСтроки");
		СтрокаВыполнена.Вставить(ДанныеВыборка.НомерСтроки, Истина);

		Если ДанныеВыборка.Контрагент = NULL Тогда

			Если ПустаяСтрока(СтрокаВнешняя.НомерТелефона) Тогда

				СтрокаВнешняя.ОписаниеОшибки = "не вказано номер телефону - синхронізація неможлива";

			ИначеЕсли НЕ СтрДлина(СтрокаВнешняя.НомерТелефона) = 12 Тогда

				СтрокаВнешняя.ОписаниеОшибки = "поганий формат номера телефону - синхронізація неможлива";

			Иначе

				СтрокаВнешняя.ОписаниеОшибки = "номер телефону відсутній в базі даних";

			КонецЕсли;

		Иначе

			СтрокаВнешняя.Контрагент	= ДанныеВыборка.Контрагент;
			СтрокаВнешняя.Найден		= Истина;
			СтрокаВнешняя.IDC			= СокрЛП(СтрокаВнешняя.Контрагент.УникальныйИдентификатор());
			СтрокаВнешняя.EmailТекущий	= СокрЛП(ДанныеВыборка.EmailКонтрагента);

			Если СтрокаВнешняя.ДанныеКонтрагента.Свойство("КОДЫ") Тогда

				СтрокаВнешняя.ДанныеКонтрагента.КОДЫ.IDC = СтрокаВнешняя.IDC;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

//	LNK 08.06.2021 10:48:33 - Отработаем возможно указанные номера дисконтных карт.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Контрагент КАК Контрагент,
	|	Таблица.КодКарты КАК КодКарты
	|ПОМЕСТИТЬ ТаблицаВнешняя
	|ИЗ
	|	&ТаблицаВнешняя КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	КодКарты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВнешняя.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВнешняя.Контрагент КАК Контрагент,
	|	ТаблицаВнешняя.КодКарты КАК КодКарты,
	|	ЕСТЬNULL(ТаблицаКарты.Ссылка, ЗНАЧЕНИЕ(Справочник.ИнформационныеКарты.ПустаяСсылка)) КАК ДисконтнаяКарта
	|ПОМЕСТИТЬ ТаблицаПервичная
	|ИЗ
	|	ТаблицаВнешняя КАК ТаблицаВнешняя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ТаблицаКарты
	|		ПО ТаблицаВнешняя.Контрагент = ТаблицаКарты.ВладелецКарты
	|			И (НЕ ТаблицаВнешняя.КодКарты = """")
	|			И ТаблицаВнешняя.КодКарты = ТаблицаКарты.КодКарты
	|			И (ТаблицаКарты.ТипКарты = ЗНАЧЕНИЕ(Перечисление.ТипыИнформационныхКарт.Дисконтная))
	|			И (НЕ(ТаблицаКарты.ПометкаУдаления
	|					ИЛИ ТаблицаКарты.Блокирован))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаВнешняя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВедущая.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВедущая.Контрагент КАК Контрагент,
	|	ТаблицаВедущая.ДисконтнаяКарта КАК ДисконтнаяКарта
	|ИЗ
	|	ТаблицаПервичная КАК ТаблицаВедущая
	|ГДЕ
	|	НЕ ТаблицаВедущая.ДисконтнаяКарта = ЗНАЧЕНИЕ(Справочник.ИнформационныеКарты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаВедущая.НомерСтроки,
	|	ТаблицаВедущая.Контрагент,
	|	МАКСИМУМ(ТаблицаКарты.Ссылка)
	|ИЗ
	|	ТаблицаПервичная КАК ТаблицаВедущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ТаблицаКарты
	|		ПО ТаблицаВедущая.Контрагент = ТаблицаКарты.ВладелецКарты
	|			И (ТаблицаКарты.ТипКарты = ЗНАЧЕНИЕ(Перечисление.ТипыИнформационныхКарт.Дисконтная))
	|			И (НЕ(ТаблицаКарты.ПометкаУдаления
	|					ИЛИ ТаблицаКарты.Блокирован))
	|ГДЕ
	|	ТаблицаВедущая.ДисконтнаяКарта = ЗНАЧЕНИЕ(Справочник.ИнформационныеКарты.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВедущая.НомерСтроки,
	|	ТаблицаВедущая.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПервичная"
	);
	Запрос.УстановитьПараметр("ТаблицаВнешняя", ТаблицаВнешняя.Скопировать(Новый Структура("Найден", Истина), "НомерСтроки, Контрагент, КодКарты"));

	ДанныеВыборка = Запрос.Выполнить().Выбрать();

	Пока ДанныеВыборка.Следующий() Цикл

		СтрокаВнешняя = ТаблицаВнешняя.Найти(ДанныеВыборка.НомерСтроки, "НомерСтроки");

		Если ЗначениеЗаполнено(ДанныеВыборка.ДисконтнаяКарта) Тогда

			СтрокаВнешняя.ДисконтнаяКарта = ДанныеВыборка.ДисконтнаяКарта;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция НайтиКонтрагентаПоДаннымMagento(ДанныеВнешние)	Экспорт	//	LNK 08.06.2021 11:51:53

	ТаблицаВнешняя = ОбменMagentoСлужебный.ИнициализацияТаблицыКонтрагентовДляВнешнихДанных();
	СтрокаВнешняя = ТаблицаВнешняя.Добавить();
	СтрокаВнешняя.НомерСтроки = 1;
	СтрокаВнешняя.ДанныеКонтрагента = ОбменMagentoСервер.ЗаполнитьСтруктуруПоВнешнимДанным(, ДанныеВнешние);
	СтрокаВнешняя.IDC = СтрокаВнешняя.ДанныеКонтрагента.КОДЫ.IDC;
	СтрокаВнешняя.НомерТелефона	= СтрокаВнешняя.ДанныеКонтрагента.КОНТАКТЫ.НомерТелефона;
	СтрокаВнешняя.Email			= СтрокаВнешняя.ДанныеКонтрагента.КОНТАКТЫ.Email;
	СтрокаВнешняя.КодКарты		= СтрокаВнешняя.ДанныеКонтрагента.КодКарты;

	Справочники.Контрагенты.НайтиКонтрагентовПоСпискуMagento(ТаблицаВнешняя);

	Возврат ОбщегоНазначенияКлиентСервер.СтрокаТаблицыКакСтруктура(ТаблицаВнешняя.Колонки, ТаблицаВнешняя[0]);

КонецФункции

Функция ПрименитьКонтрагентаПоДаннымMagento(СтрокаВнешняя)	Экспорт

	Если ПустаяСтрока(СтрокаВнешняя.НомерТелефона) Тогда

		ВызватьИсключение "Отказано! Номер телефона НЕ указан.";

	КонецЕсли;

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если СтрокаВнешняя.Найден Тогда

		Если НЕ ПустаяСтрока(СтрокаВнешняя.ДанныеКонтрагента.КОНТАКТЫ.email) И ПустаяСтрока(СтрокаВнешняя.EmailТекущий) Тогда

			КонтрагентОбъект = СтрокаВнешняя.Контрагент.ПолучитьОбъект();
			КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
			#Если Клиент Тогда
			//КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
			#КонецЕсли
			
			СтрокаКонтакта = КонтактнаяИнформацияСлужебный.ПолучитьСтрокуКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, КонтрагентОбъект.КонтактнаяИнформация);

			СтрокаКонтакта.Представление = СокрЛП(СтрокаВнешняя.ДанныеКонтрагента.КОНТАКТЫ.email);
			СтрокаКонтакта.АдресЭП       = СокрЛП(СтрокаВнешняя.ДанныеКонтрагента.КОНТАКТЫ.email);

			КонтрагентОбъект.Записать();

		КонецЕсли;

		УстановитьКлючевыеАтрибутыКонтрагентовПоДаннымMagento(СтрокаВнешняя);

	Иначе

		Попытка

			Блокиратор = Справочники.БлокираторыПроцессов.НовыйКонтрагент.ПолучитьОбъект();
			Блокиратор.Заблокировать();

			КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
			КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
			КонтрагентОбъект.ДополнительныеСвойства.Вставить("ПрефиксНеДополнять");
			КонтрагентОбъект.ДополнительныеСвойства.Вставить("Префикс", "ИМ");

			КонтрагентОбъект.УстановитьНовыйКод();
			КонтрагентОбъект.УстановитьСсылкуНового(Справочники.Контрагенты.ПолучитьСсылку());

			КонтрагентОбъект.Родитель   = Справочники.Контрагенты.Покупатели;
			КонтрагентОбъект.Покупатель = Истина;
			КонтрагентОбъект.ЮрФизЛицо  = Перечисления.ЮрФизЛицо.ФизЛицо;	
			КонтрагентОбъект.IDN        = КонтрагентОбъект.Код;

			КонтрагентОбъект.Пол = СтрокаВнешняя.ДанныеКонтрагента.Пол;

			Фамилия  = СтрокаВнешняя.ДанныеКонтрагента.Фамилия;
			Имя		 = СтрокаВнешняя.ДанныеКонтрагента.Имя;
			Отчество = СтрокаВнешняя.ДанныеКонтрагента.Отчество;

			СтроковыеФункцииКлиентСервер.ПривестиНаименование(Фамилия);
			СтроковыеФункцииКлиентСервер.ПривестиНаименование(Имя);
			СтроковыеФункцииКлиентСервер.ПривестиНаименование(Отчество);

		    КонтрагентОбъект.Наименование = СтрЗаменить(СокрЛП(Фамилия + " " + Имя + " " + Отчество), "  ", "");

			Если ПустаяСтрока(КонтрагентОбъект.Наименование) Тогда

				КонтрагентОбъект.Наименование = КонтактнаяИнформацияКлиентСерверПовтИсп.ПустоеНаименование() + СокрЛП(КонтрагентОбъект.IDN);
				КонтрагентОбъект.НаименованиеПолное = "";

			Иначе

				КонтрагентОбъект.НаименованиеПолное = КонтрагентОбъект.Наименование;

			КонецЕсли;

			СтрокаКонтакта = КонтактнаяИнформацияСлужебный.ПолучитьСтрокуКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, КонтрагентОбъект.КонтактнаяИнформация);
			СтрокаКонтакта.Представление = СтрокаВнешняя.НомерТелефона;

			КонтактнаяИнформацияВызовСервера.ПарсерНомераТелефона(СтрокаКонтакта, КонтрагентОбъект.Метаданные().ТабличныеЧасти.КонтактнаяИнформация.Реквизиты);

			Если НЕ ПустаяСтрока(СтрокаВнешняя.ДанныеКонтрагента.КОНТАКТЫ.email) Тогда

				СтрокаКонтакта = КонтактнаяИнформацияСлужебный.ПолучитьСтрокуКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, КонтрагентОбъект.КонтактнаяИнформация);

				СтрокаКонтакта.Представление = СокрЛП(СтрокаВнешняя.ДанныеКонтрагента.КОНТАКТЫ.email);
				СтрокаКонтакта.АдресЭП       = СокрЛП(СтрокаВнешняя.ДанныеКонтрагента.КОНТАКТЫ.email);

			КонецЕсли;

			Для каждого ЭлементДети Из СтрокаВнешняя.ДанныеКонтрагента.Дети Цикл

				СтрокаДети = КонтрагентОбъект.Дети.Добавить();
				СтрокаДети.Имя = ЭлементДети.Имя;
				СтрокаДети.ДатаРождения = ЭлементДети.ДатаРождения;
				СтрокаДети.Пол = ЭлементДети.Пол;

			КонецЦикла;

			УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();	//	LNK 23.08.2021 11:01:38

			ТранзакцияНачата = ТранзакцияАктивна();	//	учитываем "внешнюю" транзакцию

			Если НЕ ТранзакцияНачата Тогда

				НачатьТранзакцию();

			КонецЕсли;

			Попытка

				Если КонтрагентОбъект.ЭтоНовый() Тогда	//	LNK 23.08.2021 10:54:47

					СтрокаВнешняя.ДисконтнаяКарта = ИнформационныеКартыСлужебный.ПрисвоитьРезервнуюВиртуальнуюКарту(КонтрагентОбъект.ПолучитьСсылкуНового()
						, УчетнаяПолитика.ИнтернетМагазин
						, Справочники.Контрагенты.ПолучитьНомерТелефона(КонтрагентОбъект)
						,
						,
						Ложь
					);

				КонецЕсли;

				КонтрагентОбъект.Записать();

				МенеджерЗаписи = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();

				МенеджерЗаписи.ФизЛицо  = КонтрагентОбъект.Ссылка;
				МенеджерЗаписи.Период   = ТекущаяДата();
				МенеджерЗаписи.Фамилия  = Фамилия;
				МенеджерЗаписи.Имя      = Имя;
				МенеджерЗаписи.Отчество = Отчество;

				МенеджерЗаписи.Записать(Истина);

				ТекстЗамечанийПроверки = "";

				Если НЕ СтроковыеФункцииКлиентСервер.ПроверитьФамилиюИмяОтчество(КонтрагентОбъект.Наименование, ТекстЗамечанийПроверки) Тогда

					МенеджерЗаписи = РегистрыСведений.ОбъектыПроблемныеДоВыяснения.СоздатьМенеджерЗаписи();

					МенеджерЗаписи.Период   = ТекущаяДата();
					МенеджерЗаписи.Объект   = КонтрагентОбъект.Ссылка;
					МенеджерЗаписи.Магазин  = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин;

					МенеджерЗаписи.Статус   = Перечисления.СтатусыОбъектовДоВыяснения.Контроль;
					МенеджерЗаписи.Источник = "ИнтернетМагазин";
					МенеджерЗаписи.МоментСоздания = ОбщегоНазначенияКлиентСервер.УникальныйИдентификаторВремя(КонтрагентОбъект.Ссылка.УникальныйИдентификатор());

					МенеджерЗаписи.Комментарий = "Позиции: " + ТекстЗамечанийПроверки;
					МенеджерЗаписи.Автор = Справочники.Пользователи.АдминистраторАвтоматов;

					МенеджерЗаписи.Записать();

				КонецЕсли;
			//	---------------------------------------------------------------------------------------

				СтрокаВнешняя.Контрагент = КонтрагентОбъект.Ссылка;
				СтрокаВнешняя.Найден = Истина;

				УстановитьКлючевыеАтрибутыКонтрагентовПоДаннымMagento(СтрокаВнешняя);

				Если НЕ ТранзакцияНачата Тогда

					ЗафиксироватьТранзакцию();

				КонецЕсли;

				ЖурналСобытий.Регистрация("MAGENTO.Новый", "Информация"
					, Метаданные.Справочники.Контрагенты
					, СтрокаВнешняя.Контрагент
					,
					, "Создан новый контрагент"
					, СокрЛП(СтрокаВнешняя.Контрагент)
					,,
				);

			//	LNK 06.07.2022 04:31:11	Пауза в несколько сек.. появляются дубли, несмотря на блокирование
			//	Немного ждём, после этого снимаем блокировку
				ОбщегоНазначенияКлиентСервер.Пауза(3000);

				Блокиратор.Разблокировать();

			Исключение

				Если НЕ ТранзакцияНачата Тогда

					ОтменитьТранзакцию();

				КонецЕсли;

				ТекстОшибки = ОписаниеОшибки();
				ВызватьИсключение ТекстОшибки;

			КонецПопытки;

		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ВызватьИсключение ТекстОшибки;

		КонецПопытки;

	КонецЕсли;

	Возврат СтрокаВнешняя.Контрагент;

КонецФункции

Процедура УстановитьКлючевыеАтрибутыКонтрагентовПоДаннымMagento(СтрокаВнешняя)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаАтрибуты.ID КАК ID,
	|	ТаблицаАтрибуты.Наименование КАК Наименование,
	|	ТаблицаАтрибуты.Фамилия КАК Фамилия,
	|	ТаблицаАтрибуты.Имя КАК Имя,
	|	ТаблицаАтрибуты.Отчество КАК Отчество,
	|	ТаблицаАтрибуты.ДатаРождения КАК ДатаРождения,
	|	ТаблицаАтрибуты.КодПоЕДРПОУ КАК КодПоЕДРПОУ
	|ИЗ
	|	РегистрСведений.КлючевыеАтрибутыКонтрагентов.СрезПоследних КАК ТаблицаАтрибуты
	|ГДЕ
	|	ТаблицаАтрибуты.Объект = &Контрагент
	|	И ТаблицаАтрибуты.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.Magento)"
	);
	Запрос.УстановитьПараметр("Контрагент", СтрокаВнешняя.Контрагент);

	РезультатЗапроса = Запрос.Выполнить();

	Фамилия  = СтрокаВнешняя.ДанныеКонтрагента.Фамилия;
	Имя		 = СтрокаВнешняя.ДанныеКонтрагента.Имя;
	Отчество = СтрокаВнешняя.ДанныеКонтрагента.Отчество;

	СтроковыеФункцииКлиентСервер.ПривестиНаименование(Фамилия);
	СтроковыеФункцииКлиентСервер.ПривестиНаименование(Имя);
	СтроковыеФункцииКлиентСервер.ПривестиНаименование(Отчество);

    Наименование = СтрЗаменить(СокрЛП(Фамилия + " " + Имя + " " + Отчество), "  ", "");

	Если РезультатЗапроса.Пустой() Тогда

		Установить = Истина;

	Иначе

		АтрибутыВыборка = РезультатЗапроса.Выбрать();
		АтрибутыВыборка.Следующий();

		Установить = НЕ Наименование = АтрибутыВыборка.Наименование;

		Если НЕ Установить = Истина Тогда

			Установить = НЕ СокрЛП(СтрокаВнешняя.ДанныеКонтрагента.КОДЫ.IDMGT) = АтрибутыВыборка.Наименование;

		КонецЕсли;

		Если НЕ Установить = Истина Тогда

			КлючСравнения = Новый Массив;
			КлючСравнения.Добавить("Фамилия");
			КлючСравнения.Добавить("Имя");
			КлючСравнения.Добавить("Отчество");
			КлючСравнения.Добавить("ДатаРождения");

			Для каждого Ключ Из КлючСравнения Цикл

				Если НЕ СтрокаВнешняя.ДанныеКонтрагента[Ключ] = АтрибутыВыборка[Ключ] Тогда

					Установить = Истина;
					Прервать;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Если Установить = Истина Тогда

		НаборЗаписей = РегистрыСведений.КлючевыеАтрибутыКонтрагентов.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		ОбменДаннымиСервер.УстановитьВсехПолучателей(НаборЗаписей.ОбменДанными.Получатели, "ПоМагазину");

		НаборЗаписей.Отбор.Период.Установить(ТекущаяДата());
		НаборЗаписей.Отбор.Объект.Установить(СтрокаВнешняя.Контрагент);
		НаборЗаписей.Отбор.УчетнаяСистема.Установить(Перечисления.УчетныеСистемыКомпании.Magento);

		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Период = НаборЗаписей.Отбор.Период.Значение;
		ЗаписьНабора.Объект = НаборЗаписей.Отбор.Объект.Значение;
		ЗаписьНабора.УчетнаяСистема = НаборЗаписей.Отбор.УчетнаяСистема.Значение;

		ЗаписьНабора.ID			  = СокрЛП(СтрокаВнешняя.ДанныеКонтрагента.КОДЫ.IDMGT);
		ЗаписьНабора.Наименование = Наименование;
		ЗаписьНабора.Фамилия	  = Фамилия;
		ЗаписьНабора.Имя		  = Имя;
		ЗаписьНабора.Отчество	  = Отчество;
		ЗаписьНабора.ДатаРождения = СтрокаВнешняя.ДанныеКонтрагента.ДатаРождения;

		ЗаписьНабора.ДатаСоздания  = ОбщегоНазначенияКлиентСервер.УникальныйИдентификаторВремя(СтрокаВнешняя.Контрагент.УникальныйИдентификатор());
		ЗаписьНабора.ДатаИзменения = ТекущаяДата();

		ЗаполнениеОбъектовСобытия.УстановитьОбщиеРеквизиты(НаборЗаписей, НаборЗаписей.Метаданные().ПолноеИмя(), Истина); 

		НаборЗаписей.Записать();

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецЕсли
