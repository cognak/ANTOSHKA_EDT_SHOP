///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ДополнительныеОтчетыИОбработки
	
	ОбновитьПоказателиВремениНаСервере();
	
	ЗаполнитьСписокДнейНедели();
	
	ОбновитьПоказателиВремениНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьСписокДнейНедели(ТекущийОбъект);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДлинаРабочегоВремениПриИзменении(Элемент)
	
	РассчитатьНерабочееВремя();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоИнтервалаПриИзменении(Элемент)
	
	ОбновитьПоказателиВремени();
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеИнтервалаПриИзменении(Элемент)
	
	ОбновитьПоказателиВремени();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ЗаполнитьСписокДнейНедели()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТаблицаДнейНедели.Значение,
	                      |	МАКСИМУМ(ТаблицаДнейНедели.Пометка) КАК Пометка,
	                      |	ТаблицаДнейНедели.Порядок КАК Порядок
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		ДниНедели.Ссылка КАК Значение,
	                      |		ЛОЖЬ КАК Пометка,
	                      |		ДниНедели.Порядок КАК Порядок
	                      |	ИЗ
	                      |		Перечисление.ДниНедели КАК ДниНедели
	                      |	
	                      |	ОБЪЕДИНИТЬ ВСЕ
	                      |	
	                      |	ВЫБРАТЬ
	                      |		Интервалы.ДеньНедели,
	                      |		ИСТИНА,
	                      |		Интервалы.ДеньНедели.Порядок
	                      |	ИЗ
	                      |		Справочник.ИнтервалыРаботыМагазинов.ДниНедели КАК Интервалы
	                      |	ГДЕ
	                      |		Интервалы.Ссылка = &Ссылка) КАК ТаблицаДнейНедели
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ТаблицаДнейНедели.Значение,
	                      |	ТаблицаДнейНедели.Порядок
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Порядок");
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДниНеделиСписок.Добавить(Выборка.Значение,,Выборка.Пометка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоказателиВремени()
	
	Объект.НачалоИнтервала    = Дата(1,1,1,Час(Объект.НачалоИнтервала),Минута(Объект.НачалоИнтервала),0);
	Объект.ОкончаниеИнтервала = Дата(1,1,1,Час(Объект.ОкончаниеИнтервала),Минута(Объект.ОкончаниеИнтервала),0);
	
	Если Объект.ОкончаниеИнтервала < Объект.НачалоИнтервала Тогда	
		
		ОкончаниеИнтервала = Объект.ОкончаниеИнтервала + 86400;
		
	Иначе
		
		ОкончаниеИнтервала = Объект.ОкончаниеИнтервала;
		
	КонецЕсли;
	
	РазностьВСекундах = ОкончаниеИнтервала - Объект.НачалоИнтервала;
	
	Если РазностьВСекундах > 0 Тогда
		
		Объект.ДлинаРабочегоВремени   = ОбщегоНазначенияРТКлиентСервер.ПреобразоватьСекундыВДату(РазностьВСекундах);
		ДлинаНерабочегоВремени = Дата("00010101000000");
		
	Иначе
		
		Объект.ДлинаРабочегоВремени   = Дата("00010101000000");
		ДлинаНерабочегоВремени = Дата("00010101000000");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоказателиВремениНаСервере()
	
	Если Объект.ОкончаниеИнтервала < Объект.НачалоИнтервала Тогда	
		
		ОкончаниеИнтервала = Объект.ОкончаниеИнтервала + 86400;
		
	Иначе
		
		ОкончаниеИнтервала = Объект.ОкончаниеИнтервала;
		
	КонецЕсли;
	
	РазностьВСекундах = ОкончаниеИнтервала - Объект.НачалоИнтервала;
	
	Если РазностьВСекундах > 0 Тогда
		
		ДлинаНерабочегоВремениВСекундах   = ОбщегоНазначенияРТКлиентСервер.ПреобразоватьСекундыВДату(РазностьВСекундах) - Объект.ДлинаРабочегоВремени;
		
		Если ДлинаНерабочегоВремениВСекундах > 0 Тогда
			
			ДлинаНерабочегоВремени = ОбщегоНазначенияРТКлиентСервер.ПреобразоватьСекундыВДату(ДлинаНерабочегоВремениВСекундах);
			
		Иначе
			
			ДлинаНерабочегоВремени = Дата("00010101000000");
			
		КонецЕсли;
		
	Иначе
		
		ДлинаНерабочегоВремени = Дата("00010101000000");
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура рассчитывает рабочее время
//
&НаКлиенте
Процедура РассчитатьНерабочееВремя() 
	
	
	Объект.НачалоИнтервала    = Дата(1,1,1,Час(Объект.НачалоИнтервала),Минута(Объект.НачалоИнтервала),0);
	Объект.ОкончаниеИнтервала = Дата(1,1,1,Час(Объект.ОкончаниеИнтервала),Минута(Объект.ОкончаниеИнтервала),0);
	
	Если Объект.ОкончаниеИнтервала < Объект.НачалоИнтервала Тогда
		
		ОкончаниеИнтервала = Объект.ОкончаниеИнтервала + 86400;
		
	Иначе
		
		ОкончаниеИнтервала = Объект.ОкончаниеИнтервала;
		
	КонецЕсли;
	
	РазностьВСекундах = ОкончаниеИнтервала - Объект.НачалоИнтервала;
	
	Если РазностьВСекундах > 0 Тогда
		
		ДлинаНерабочегоВремениВСекундах   = ОбщегоНазначенияРТКлиентСервер.ПреобразоватьСекундыВДату(РазностьВСекундах) - Объект.ДлинаРабочегоВремени;
		
		Если ДлинаНерабочегоВремениВСекундах < 0 Тогда
			
			ОбновитьПоказателиВремени();
			
		Иначе
			
			ДлинаНерабочегоВремени = ОбщегоНазначенияРТКлиентСервер.ПреобразоватьСекундыВДату(ДлинаНерабочегоВремениВСекундах);
			
		КонецЕсли;
		
		
	Иначе
		
		Объект.ДлинаРабочегоВремени   = Дата("00010101000000");
		ДлинаНерабочегоВремени = Дата("00010101000000");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСписокДнейНедели(ТекущийОбъект)
	
	ТекущийОбъект.ДниНедели.Очистить();
	
	Для каждого ДеньНедели Из ДниНеделиСписок Цикл
		
		Если ДеньНедели.Пометка Тогда
		
		СтрокаДеньНедели = ТекущийОбъект.ДниНедели.Добавить();
		СтрокаДеньНедели.ДеньНедели = ДеньНедели.Значение;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
