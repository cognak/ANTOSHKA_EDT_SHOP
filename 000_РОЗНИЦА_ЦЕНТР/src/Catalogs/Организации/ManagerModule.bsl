#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
 
// Функция определяет значения реквизитов выбранной организации.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Ссылка на организацию
//
// Возвращаемое значение:
//	Структура - реквизиты выбранной организации
//
Функция ПолучитьРеквизитыОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Организации.Наименование КАК Наименование,
	|	ВЫРАЗИТЬ(Организации.НаименованиеСокращенное КАК СТРОКА(1000)) КАК НаименованиеСокращенное,
	|	ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеПолное,
	|	Организации.ЮрФизЛицо КАК ЮрФизЛицо
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация");
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Представление = Выборка.Наименование;
		Наименование = ?(Не ПустаяСтрока(Выборка.НаименованиеСокращенное), Выборка.НаименованиеСокращенное, Выборка.Наименование);
		НаименованиеПолное = Выборка.НаименованиеПолное;
		ЮрФизЛицо = Выборка.ЮрФизЛицо;
	Иначе
		Представление = "";
		Наименование = "";
		НаименованиеПолное = "";
		ЮрФизЛицо = Перечисления.ЮрФизЛицо.ПустаяСсылка();
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Представление, Наименование, НаименованиеПолное, ЮрФизЛицо",
		Представление,
		Наименование,
		НаименованиеПолное,
		ЮрФизЛицо
	);
	
	Возврат СтруктураРеквизитов;

КонецФункции // ПолучитьРеквизитыОрганизации()

// Функция определяет являеться ли организация плательщиком налога на добавленную стоимость.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой определяется, являеться ли она плательщиком НДС
//	Дата - Дата определения системы налогообложения
//
// Возвращаемое значение:
//	Булево
//
Функция ПлательщикНДСУкр(Организация, Дата) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСТИНА КАК Плательщик
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&Дата, Организация = &Организация) КАК Налогообложение
	|ГДЕ
	|	Налогообложение.СистемаНалогообложения В (ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.НалогНаПрибыльИНДС), ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.ЕдиныйНалогИНДС))"
	);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ПлательщикНДС = Ложь;

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		ПлательщикНДС = Выборка.Плательщик;

	КонецЕсли;

	Возврат ПлательщикНДС;

КонецФункции

// Получает организацию, если организация одна в справочнике.
//
// Возвращаемое значение:
// СправочникСсылка.Организации - Найденная организация
// Неопределено - если организаций нет или организаций больше одной
//
Функция ПолучитьОрганизациюПоУмолчанию() Экспорт
	
	Возврат ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику().ОсновнаяОрганизация;

КонецФункции // ПолучитьОрганизациюПоУмолчанию()

Функция ПолучитьОрганизацию(КодПоЕДРПОУилиИНН, ВернутьОсновнуюЕслиПусто = Ложь)	Экспорт	//	LNK 08.06.2021 11:27:53

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Организация = Справочники.Организации.ПустаяСсылка();

	Если ТипЗнч(КодПоЕДРПОУилиИНН) = Тип("Строка") И НЕ ПустаяСтрока(КодПоЕДРПОУилиИНН) Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСправочник.Ссылка КАК Организация,
		|	ВЫБОР
		|		КОГДА ТаблицаСправочник.ПометкаУдаления
		|				ИЛИ ТаблицаСправочник.Блокирован
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КлючПорядка
		|ИЗ
		|	Справочник.Организации КАК ТаблицаСправочник
		|ГДЕ
		|	ТаблицаСправочник.КодПоЕДРПОУ = &КодПоЕДРПОУилиИНН
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаСправочник.Ссылка,
		|	ВЫБОР
		|		КОГДА ТаблицаСправочник.ПометкаУдаления
		|				ИЛИ ТаблицаСправочник.Блокирован
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ + 1
		|ИЗ
		|	Справочник.Организации КАК ТаблицаСправочник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних КАК ТаблицаНалогообложение
		|		ПО ТаблицаСправочник.Ссылка = ТаблицаНалогообложение.Организация
		|ГДЕ
		|	ТаблицаНалогообложение.ИННПлательщикаНДС = &КодПоЕДРПОУилиИНН
		|
		|УПОРЯДОЧИТЬ ПО
		|	КлючПорядка"
		);	//	"КлючПорядка" на всякий случай.. вдруг ссылок с ЕДРПОУ будет несколько?
		Запрос.УстановитьПараметр("КодПоЕДРПОУилиИНН", СокрЛП(КодПоЕДРПОУилиИНН));

		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда

			Выборка = Результат.Выбрать();
			Выборка.Следующий();

			Организация = Выборка.Организация;

		КонецЕсли;

	ИначеЕсли ВернутьОсновнуюЕслиПусто = Истина Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УчетнаяПолитика.ОсновнаяОрганизация КАК Организация
		|ИЗ
		|	РегистрСведений.УчетнаяПолитика.СрезПоследних КАК УчетнаяПолитика"
		);

		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда

			Выборка = Результат.Выбрать();
			Выборка.Следующий();

			Организация = Выборка.Организация;

		КонецЕсли;

	КонецЕсли;

	Возврат Организация;

КонецФункции

//Возвращает систему налогообложения организации
//Параметры: 
//Дата - Дата
//Организация - СправочникСсылка.Организации
//Возвращаемое значение:
//Структура с ключами:
//Дата - дата применения системы налогообложения
//СистемаНалогообложения - ПеречислениеСсылка.СистемыНалогообложения
Функция ПолучитьСистемуНалогообложения(Дата, Организация) Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаРегистра.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК Дата,
	|	ЕСТЬNULL(ТаблицаРегистра.СистемаНалогообложения, Ведущая.СистемаНалогообложения) КАК СистемаНалогообложения,
	|	ЕСТЬNULL(ТаблицаРегистра.ИННПлательщикаНДС, """") КАК ИННПлательщикаНДС,
	|	ЕСТЬNULL(ТаблицаРегистра.НомерСвидетельстваПлательщикаНДС, """") КАК НомерСвидетельстваПлательщикаНДС,
	|	ЕСТЬNULL(ТаблицаРегистра.ИнформацияОСтатусеПлательщикаНалогов, """") КАК ИнформацияОСтатусеПлательщикаНалогов,
	|	ЕСТЬNULL(ТаблицаРегистра.РазрешитьПродажуПодарочныхСертификатов, ЛОЖЬ) КАК РазрешитьПродажуПодарочныхСертификатов,
	|	ЕСТЬNULL(ТаблицаРегистра.РазрешитьОплатуПодарочнымиСертификатами, ЛОЖЬ) КАК РазрешитьОплатуПодарочнымиСертификатами
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.ПустаяСсылка) КАК СистемаНалогообложения) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&Дата, Организация = &Организация) КАК ТаблицаРегистра
	|		ПО (ИСТИНА)"
	);
	
	Запрос.УстановитьПараметр("Дата", ?(Дата = Неопределено ИЛИ Дата = '00010101', ТекущаяДата(), Дата));
	Запрос.УстановитьПараметр("Организация", Организация);

	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	Выборка.Следующий();

	СоставРеквизитов = ОбщегоНазначенияРТ.СоздатьСтруктуруПоСтрокеВыборки(Результат, Выборка);

	Возврат СоставРеквизитов;

	//Если Выборка.Следующий() Тогда
	//	
	//	Возврат Новый Структура("Дата, СистемаНалогообложения", Выборка.Дата, Выборка.СистемаНалогообложения);
	//	
	//Иначе
	//	
	//	Возврат Новый Структура("Дата, СистемаНалогообложения", "00010101", Перечисления.СистемыНалогообложения.ПустаяСсылка()); 
	//	
	//КонецЕсли;
	
КонецФункции

//	LNK 03.04.2017 14:08:04
Функция ПолучитьКодыВидовОплат(Организация)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	СоответствиеВидовОплат = Новый Соответствие;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.ВидОплаты КАК ВидОплаты,
	|	ТабличнаяЧасть.Код КАК Код
	|ИЗ
	|	Справочник.Организации.КодыВидовОплат КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Организация
	|	И НЕ ТабличнаяЧасть.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыОплатЭККР.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код"
	);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СоответствиеВидовОплат.Вставить(Выборка.ВидОплаты, Выборка.Код);

	КонецЦикла;

//	Теперь проверим, чтобы все элементы были указаны!

	Для каждого Элемент Из Перечисления.ВидыОплатЭККР Цикл

		Если СоответствиеВидовОплат.Получить(Элемент) = Неопределено Тогда

			СоответствиеВидовОплат.Вставить(Элемент, Перечисления.ВидыОплатЭККР.Индекс(Элемент));

		КонецЕсли;

	КонецЦикла;
	
	Возврат СоответствиеВидовОплат;

КонецФункции // ПолучитьКодыВидовОплат()

Функция ПолучитьПараметры(Организация)	Экспорт


КонецФункции

//	LNK 24.10.2017 12:48:11
Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)

	Если НЕ
	(ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(Параметры, "ПоказатьВсеЭлементы", Ложь) ИЛИ ПараметрыСеанса.ДоступныВсеОрганизации)	Тогда
		
		СтандартнаяОбработка = Ложь;

		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Магазины.Организация КАК Организация,
		|	Магазины.Организация.Наименование КАК КлючПорядка
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|ГДЕ
		|	Магазины.ВведенВЭксплуатацию
		|	И НЕ Магазины.Блокирован
		|	И НЕ Магазины.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	КлючПорядка"
		);
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация"));

	КонецЕсли;

КонецПроцедуры

#КонецЕсли









