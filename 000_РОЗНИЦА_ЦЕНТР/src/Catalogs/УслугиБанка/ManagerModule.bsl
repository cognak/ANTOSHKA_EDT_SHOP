#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Реквизиты услуги.
// 
// Параметры:
//  УслугаБанка - СправочникСсылка.УслугиБанка - Услуга банка
//  СчетНаОплатуПокупателю - Неопределено - Счет на оплату покупателю
// 
// Возвращаемое значение:
//  Структура, Неопределено - Реквизиты услуги:
// * Оплата - Массив - 
// * ТоварыДоступные - Массив - 
Функция РеквизитыУслуги(УслугаБанка, СчетНаОплатуПокупателю = Неопределено)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаВедущая.Ссылка КАК УслугаБанка,
	|	ТаблицаВедущая.ПериодПредоставления КАК ПериодПредоставления,
	|	ТаблицаВедущая.Наименование КАК Наименование,
	|	ТаблицаВедущая.ТипУслуги КАК ТипУслуги,
	|	ЕСТЬNULL(ТаблицаВедущая.Банк.ТипИнтернетБанкинга, ЗНАЧЕНИЕ(Перечисление.ТипыИнтернетБанкинга.ПустаяСсылка)) КАК
	|		ТипИнтернетБанкинга,
	|	ЕСТЬNULL(ТаблицаВедущая.Банк.Интеграция, ЛОЖЬ) КАК Интеграция,
	|	ТаблицаВедущая.ИспользоватьСкидкиНаценки КАК ИспользоватьСкидкиНаценки,
	|	ТаблицаВедущая.Эквайрер КАК Эквайрер,
	|	ТаблицаВедущая.Описание КАК Описание,
	|	ИСТИНА КАК Проверено,
	|	ЕСТЬNULL(ТаблицаВедущая.Банк.СуммаМинимальногоКредита, 0) КАК СуммаМинимальногоКредита,
	|	ЕСТЬNULL(ТаблицаПрограмм.СуммаДокумента, 0) КАК СуммаДокумента,
	|	ЕСТЬNULL(ТаблицаПрограмм.СуммаКредита, 0) КАК СуммаКредита,
	|	ЕСТЬNULL(ТаблицаПрограмм.СуммаКредитаВозврат, 0) КАК СуммаКредитаВозврат,
	|	ТаблицаПрограмм.ДокументПродажи КАК ДокументПродажи,
	|	ЛОЖЬ КАК СтараяСхемаКредита,
	|	ТаблицаВедущая.РазрешитьСмешаннуюОплату КАК РазрешитьСмешаннуюОплату,
	|	ТаблицаВедущая.ВсеТовары КАК ВсеТовары
	|ПОМЕСТИТЬ ТаблицаПрограммы
	|ИЗ
	|	Справочник.УслугиБанка КАК ТаблицаВедущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеКредитныхПрограмм КАК ТаблицаПрограмм
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК ТаблицаСчета
	|			ПО ТаблицаПрограмм.СчетНаОплатуПокупателю = ТаблицаСчета.Ссылка
	|		ПО ТаблицаПрограмм.СчетНаОплатуПокупателю = &СчетНаОплатуПокупателю
	|		И ТаблицаВедущая.Ссылка = ТаблицаПрограмм.УслугаБанка
	|ГДЕ
	|	ТаблицаВедущая.Ссылка = &УслугаБанка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПрограммы.УслугаБанка КАК УслугаБанка,
	|	ТаблицаПрограммы.ПериодПредоставления КАК ПериодПредоставления,
	|	ТаблицаПрограммы.Наименование КАК Наименование,
	|	ТаблицаПрограммы.ТипУслуги КАК ТипУслуги,
	|	ТаблицаПрограммы.ТипИнтернетБанкинга КАК ТипИнтернетБанкинга,
	|	ТаблицаПрограммы.ИспользоватьСкидкиНаценки КАК ИспользоватьСкидкиНаценки,
	|	ТаблицаПрограммы.Эквайрер КАК Эквайрер,
	|	ТаблицаПрограммы.Описание КАК Описание,
	|	ТаблицаПрограммы.Проверено КАК Проверено,
	|	ТаблицаПрограммы.СуммаМинимальногоКредита КАК СуммаМинимальногоКредита,
	|	ТаблицаПрограммы.СуммаДокумента КАК СуммаДокумента,
	|	ТаблицаПрограммы.СуммаКредита КАК СуммаКредита,
	|	ТаблицаПрограммы.СуммаКредитаВозврат КАК СуммаКредитаВозврат,
	|	ТаблицаПрограммы.ДокументПродажи КАК ДокументПродажи,
	|	ТаблицаПрограммы.СтараяСхемаКредита КАК СтараяСхемаКредита,
	|	ТаблицаПрограммы.РазрешитьСмешаннуюОплату КАК РазрешитьСмешаннуюОплату,
	|	ТаблицаПрограммы.ВсеТовары КАК ВсеТовары
	|ИЗ
	|	ТаблицаПрограммы КАК ТаблицаПрограммы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплаты.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОплаты.ВидОплаты КАК ВидОплаты,
	|	ТаблицаОплаты.Сумма КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ТаблицаОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПрограммы КАК Фильтр
	|		ПО ТаблицаОплаты.Ссылка = Фильтр.ДокументПродажи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПрограммы"
	);
	Запрос.УстановитьПараметр("УслугаБанка", УслугаБанка);
	Запрос.УстановитьПараметр("СчетНаОплатуПокупателю", СчетНаОплатуПокупателю);

	Результаты = Запрос.ВыполнитьПакет();
	Реквизиты = Результаты[1].Выбрать();
	Реквизиты.Следующий();

	СоставРеквизитов = ОбщегоНазначенияРТ.СоздатьСтруктуруПоСтрокеВыборки(Результаты[1], Реквизиты, Истина);

	СоставРеквизитов.Вставить("Оплата", Новый Массив);
	СоставРеквизитов.Вставить("ТоварыДоступные", Новый Массив);

	Если НЕ Результаты[2].Пустой() Тогда

		ОплатаВыборка = Результаты[2].Выбрать();

		Пока ОплатаВыборка.Следующий() Цикл

			СоставРеквизитов.Оплата.Добавить(
				Новый Структура(
					"ВидОплаты, Сумма"
					, ОплатаВыборка.ВидОплаты
					, ОплатаВыборка.Сумма
				)
			); 

		КонецЦикла;

	КонецЕсли;
	
	Возврат СоставРеквизитов;

КонецФункции

// Кредитная программа.
// 
// Параметры:
//  IDC - УникальныйИдентификатор - Строка IDC
//  ЗначениеГлубины - Число - Значение глубины
// 
// Возвращаемое значение:
//  Структура - Кредитная программа:
// * УслугаБанка - СправочникСсылка.УслугиБанка - 
// * УслугаБанкаПериодПредоставления - Число - 
Функция КредитнаяПрограмма(IDC, ЗначениеГлубины)	Экспорт

	СоставПрограммы = Новый Структура(
		"УслугаБанка, УслугаБанкаПериодПредоставления"
		, ПустаяСсылка()
		, 0
	);

	Если НЕ ПустаяСтрока(IDC) И СтрДлина(IDC) = 36 Тогда

		Попытка

			УникальныйИдентификаторУслуги = Новый УникальныйИдентификатор(IDC);
			СоставПрограммы.УслугаБанка = ПолучитьСсылку(УникальныйИдентификаторУслуги);
			СоставПрограммы.УслугаБанкаПериодПредоставления = ЗначениеГлубины;

		Исключение

			ТекстОшибки = ОписаниеОшибки();

		КонецПопытки;

	КонецЕсли;

	Возврат СоставПрограммы;

КонецФункции
#КонецОбласти

#КонецЕсли













