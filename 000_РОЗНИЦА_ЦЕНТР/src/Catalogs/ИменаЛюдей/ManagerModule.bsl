#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Поля.Добавить("Ссылка");
	Поля.Добавить("Наименование");
	Поля.Добавить("НаименованиеУкраинское");

КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику().ИспользоватьУкраинскоеНаименование Тогда

			Представление = СокрЛП(Данные.НаименованиеУкраинское);

	Иначе	Представление = СокрЛП(Данные.Наименование);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

//	LNK 30.01.2019 14:32:34
Функция ИмяКорректно(Имя, Пол = Неопределено, Ссылка = Неопределено)	Экспорт

	Если ПустаяСтрока(Имя) Тогда

		Корректно = Истина;	//	LNK 08.02.2019 09:26:19 - на нет и суда нет

	Иначе

		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаСправочник.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИменаЛюдей КАК ТаблицаСправочник
		|ГДЕ
		|	(ТаблицаСправочник.Наименование = &Имя
		|			ИЛИ ТаблицаСправочник.НаименованиеУкраинское = &Имя)
		|	И НЕ ТаблицаСправочник.ПометкаУдаления
		|	И ВЫБОР
		|			КОГДА &Пол = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ТаблицаСправочник.Пол = &Пол
		|		КОНЕЦ"
		);
		Запрос.УстановитьПараметр("Имя", ТРег(СокрЛП(Имя)));
		Запрос.УстановитьПараметр("Пол", Пол);

		Результат = Запрос.Выполнить();
		Корректно = НЕ Результат.Пустой();

		Если НЕ Корректно И НЕ Ссылка = Неопределено И ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

			Если НЕ КонтактнаяИнформацияКлиентСервер.ЭтоПустоеНаименование(Имя) Тогда

				Если НЕ ПривилегированныйРежим() Тогда

					УстановитьПривилегированныйРежим(Истина);

				КонецЕсли;

				КлючиЗаписи = Новый Структура(
					"Объект, Магазин, Статус, Источник, Комментарий"
					, Ссылка
					, ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин
					, Перечисления.СтатусыОбъектовДоВыяснения.Обычный
					, "ФИОФизЛиц"
					, "Имя «" + Запрос.Параметры.Имя + "» не найдено в справочнике."
				);

				Если НЕ РегистрыСведений.ОбъектыПроблемныеДоВыяснения.ЗаписьСуществует(КлючиЗаписи) Тогда

					МенеджерЗаписи = РегистрыСведений.ОбъектыПроблемныеДоВыяснения.СоздатьМенеджерЗаписи();

					МенеджерЗаписи.Период   = ТекущаяДата();
					МенеджерЗаписи.Объект   = КлючиЗаписи.Объект;
					МенеджерЗаписи.Магазин  = КлючиЗаписи.Магазин;

					МенеджерЗаписи.Статус   = КлючиЗаписи.Статус;
					МенеджерЗаписи.Источник = КлючиЗаписи.Источник;
					МенеджерЗаписи.МоментСоздания = ОбщегоНазначенияКлиентСервер.УникальныйИдентификаторВремя(Ссылка.УникальныйИдентификатор());

					МенеджерЗаписи.Комментарий = КлючиЗаписи.Комментарий;

					МенеджерЗаписи.Записать();

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат Корректно;

КонецФункции

//	LNK 12.06.2019 13:32:03
Функция ПолучитьДанныеВыбораИмени(Текст, Пол, ВернутьСсылки = Ложь)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 15
	|	ИменаЛюдей.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА &ИспользоватьУкраинскоеНаименование = ИСТИНА
	|				И НЕ ИменаЛюдей.НаименованиеУкраинское = """"
	|			ТОГДА ИменаЛюдей.НаименованиеУкраинское
	|		ИНАЧЕ ИменаЛюдей.Наименование
	|	КОНЕЦ КАК Наименование
	|ИЗ
	|	Справочник.ИменаЛюдей КАК ИменаЛюдей
	|ГДЕ
	|	(ИменаЛюдей.Наименование ПОДОБНО &Текст
	|			ИЛИ ИменаЛюдей.НаименованиеУкраинское ПОДОБНО &Текст)
	|	И ИменаЛюдей.Пол = &Пол
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование"
	);
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("Пол"  , Пол);
	Запрос.УстановитьПараметр("ИспользоватьУкраинскоеНаименование", ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику().ИспользоватьУкраинскоеНаименование);
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(?(ВернутьСсылки = Истина, "Ссылка", "Наименование")));
	
	Возврат СписокЗначений;

КонецФункции

#КонецЕсли






