////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает отбор динамических списков формы.
//
&НаСервере
Процедура УстановитьОтборДинамическихСписков()
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СерийныеНомера, "Владелец", Объект.Ссылка , Истина, ВидСравненияКомпоновкиДанных.Равно);
	
КонецПроцедуры // УстановитьОтборДинамическихСписков()

//Процедура управляет отображением закладок на форме
//
&НаСервере
Процедура ОбновитьОтображениеЗакладок()
	
	НазначеныДополнительныеРеквизиты = Ложь;
	
	Для каждого ДополнительныеРеквизиты Из Элементы.СтраницаДополнительныеРеквизиты.ПодчиненныеЭлементы Цикл
		
		НазначеныДополнительныеРеквизиты = Истина;
		Прервать;
		
	КонецЦикла;
	
	Если НазначеныДополнительныеРеквизиты 
		ИЛИ Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.СтраницаКупоныСертификаты.Видимость = Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат;
		Элементы.СтраницаДополнительныеРеквизиты.Видимость = НазначеныДополнительныеРеквизиты;
		
		// +HVOYA. 24.08.2016 0:14:37, Львова Е.А.
	ИначеЕсли НазначеныДополнительныеРеквизиты  		
		ИЛИ Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.СкидочныйКупон Тогда
		// -HVOYA. 23.08.2016 21:37:33, Львова Е.А.
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.СтраницаКупоныСертификаты.Видимость = Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.СкидочныйКупон;
		Элементы.СтраницаДополнительныеРеквизиты.Видимость = НазначеныДополнительныеРеквизиты;
		
		// -HVOYA. 24.08.2016 0:14:40, Львова Е.А.
	ИначеЕсли НЕ НазначеныДополнительныеРеквизиты 
		И Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда

		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;

	КонецЕсли;
	
КонецПроцедуры // ОбновитьОтображениеЗакладок()

//Процедура фиксирует признаки номенклатуры
//
&НаСервере
Процедура ОбновитьПризнакиНоменклатуры()

	Если Объект.ТипНоменклатуры <> Объект.ВидНоменклатуры.ТипНоменклатуры Тогда
		Объект.ТипНоменклатуры = Объект.ВидНоменклатуры.ТипНоменклатуры;
	КонецЕсли;
				
	Если Объект.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар Тогда
		Объект.НаборУпаковок = Справочники.НаборыУпаковок.ПустаяСсылка();		
	КонецЕсли;	
	
	Если (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
		ИЛИ Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
		// +HVOYA. 23.08.2016 22:22:59, Львова Е.А.
		ИЛИ Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.СкидочныйКупон)
		// -HVOYA. 23.08.2016 22:23:02, Львова Е.А.)
		И Объект.Весовой Тогда			
		Объект.Весовой = Ложь;			
	КонецЕсли; 	
	// +HVOYA. 23.08.2016 22:23:44, Львова Е.А.
	//Если Объект.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
	Если (Объект.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.ПодарочныйСертификат		
		ИЛИ Объект.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.СкидочныйКупон)
		// -HVOYA. 23.08.2016 22:23:47, Львова Е.А.
		И Объект.ИспользоватьСерийныеНомера Тогда		
		Объект.ИспользоватьСерийныеНомера = Ложь;		
	КонецЕсли;
	
	Если Объект.ТоварнаяКатегория.Владелец <> Объект.ВидНоменклатуры Тогда
		Объект.ТоварнаяКатегория = Справочники.ТоварныеКатегории.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

//Процедура отрабатывает изменение поля "Набор упаковок"
//
&НаСервере
Процедура НаборУпаковокПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.НаборУпаковок)
		И  Объект.НаборУпаковок <> ИндивидуальныйНаборУпаковок Тогда
		Объект.ЕдиницаИзмерения = Объект.НаборУпаковок.ЕдиницаИзмерения;
	КонецЕсли;
	
КонецПроцедуры

//Процедура управляет доступностью реквизитов формы на сервере
//
&НаСервере
Процедура УстановитьДоступностьРеквизитовНаСервере()
	
	ЭтоУслуга = Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
	ЭтоТовар  = Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
	ИндивидуальныеУпаковки = (Объект.НаборУпаковок = ИндивидуальныйНаборУпаковок
	                         Или Не ЗначениеЗаполнено(Объект.НаборУпаковок));

	ЭтоПодарочныйСертификат = Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат;
	ЭтоСкидочныйКупон = Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.СкидочныйКупон;	// -HVOYA. 23.08.2016 21:59:10, Львова Е.А.
	
	Элементы.Весовой.Доступность                    = ЭтоТовар;
	Элементы.НаборУпаковок.Доступность              = ЭтоТовар;
	Элементы.Вес.Доступность                        = ЭтоТовар;
	Элементы.ПодакцизныйТовар.Доступность           = ЭтоТовар;
	
	Элементы.ЕдиницаИзмерения.АвтоОтметкаНезаполненного = НЕ ЭтоУслуга;
	Элементы.ЕдиницаИзмерения.ОтметкаНезаполненного     = (НЕ ЭтоУслуга)
	                                                      И Не ЗначениеЗаполнено(Объект.ЕдиницаИзмерения)
	                                                      И ИндивидуальныеУпаковки;

	Если ЭтоПодарочныйСертификат ИЛИ ЭтоСкидочныйКупон Тогда	// -HVOYA. 23.08.2016 22:01:13, Львова Е.А.
	
		Если ЭтоСкидочныйКупон Тогда	// +HVOYA. 23.08.2016 22:01:02, Львова Е.А.

			Элементы.Номинал.АвтоотметкаНезаполненного = Ложь;
			Элементы.СтраницаКупоныСертификаты.Заголовок = Строка("Скидочные купоны");
			Элементы.ИспользоватьСерийныеНомера.Заголовок = Строка("Использовать номера скидочных купонов");
			Элементы.ТипСерийногоНомера.Заголовок = Строка("Тип номера скидочного купона");
			Элементы.СерийныеНомераЗаполнитьСерийныеНомера.Заголовок = Строка("Заполнить номера купонов");
			Элементы.СерийныеНомераНаименование.Заголовок = Строка("Номер скидочного купона");

		КонецЕсли;

		Элементы.ТипСерийногоНомера.Доступность               = Объект.ИспользоватьСерийныеНомера;
		Элементы.ТипСерийногоНомера.АвтоОтметкаНезаполненного = Объект.ИспользоватьСерийныеНомера;
		Элементы.ТипСерийногоНомера.ОтметкаНезаполненного     = Объект.ИспользоватьСерийныеНомера;
		Элементы.СерийныеНомера.Доступность                   = Объект.ИспользоватьСерийныеНомера;
		Элементы.СерийныеНомера.ТолькоПросмотр                = НЕ(Объект.ИспользоватьСерийныеНомера И НЕ ЭтоПодарочныйСертификат);
	//	Элементы.СерийныеНомераКоманднаяПанель.Доступность    = Объект.ИспользоватьСерийныеНомера;
		
		Если Объект.ИспользоватьСерийныеНомера Тогда
			
			ЭлементСпискаКДобавлению = Элементы.ТипСрокаДействия.СписокВыбора.НайтиПоЗначению(Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи);

			Если ЭлементСпискаКДобавлению = Неопределено Тогда

				Элементы.ТипСрокаДействия.СписокВыбора.Добавить(Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи);

			КонецЕсли;

		Иначе

			ЭлементСпискаКУдалению = Элементы.ТипСрокаДействия.СписокВыбора.НайтиПоЗначению(Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи);

			Если ЭлементСпискаКУдалению <> Неопределено Тогда

				Элементы.ТипСрокаДействия.СписокВыбора.Удалить(ЭлементСпискаКУдалению);

			КонецЕсли;
			
		КонецЕсли;
		
		ПриИзмененииТипаСрокаДействия();
		ПриИзмененииТипаСерийногоНомера();
		
	КонецЕсли;
	
	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Элементы.СерийныеНомераЗаполнитьСерийныеНомера.Доступность = Объект.ИспользоватьСерийныеНомера И ЭтоПодарочныйСертификат
			И УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя("АдминистраторПодарочныхСертификатов", Ложь, Пользователи.ТекущийПользователь()); 
		Элементы.СерийныеНомераЗагрузитьСерийныеНомераИзExcel.Доступность = Объект.ИспользоватьСерийныеНомера И НЕ ЭтоПодарочныйСертификат; 

	Иначе

		Элементы.СерийныеНомераЗаполнитьСерийныеНомера.Доступность = Ложь; 
		Элементы.СерийныеНомераЗагрузитьСерийныеНомераИзExcel.Доступность = Ложь; 

	КонецЕсли;

	Если НЕ Элементы.ЕдиницаИзмерения.ТолькоПросмотр Тогда
		
		Элементы.ЕдиницаИзмерения.ТолькоПросмотр = Не ИндивидуальныеУпаковки;
									  
	КонецЕсли;

КонецПроцедуры

//Процедура передает управление на сервер для изменения отображения формы
//
&НаСервере
Процедура ПриИзмененииВидаНоменклатуры()
	
	ОбновитьПризнакиНоменклатуры();
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	УстановитьДоступностьРеквизитовНаСервере();
	
	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		Элементы.ТоварнаяКатегория.ТолькоПросмотр = Ложь;
	Иначе
		Объект.ТоварнаяКатегория = Справочники.ТоварныеКатегории.ПустаяСсылка();
		Элементы.ТоварнаяКатегория.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры	

//Процедура передает управление на сервер для изменения отображения формы
//
&НаСервере
Процедура ПриИзмененииИспользоватьСерийныеНомера()

	Если НЕ Объект.ИспользоватьСерийныеНомера Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СерийныеНомера.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СерийныеНомера КАК СерийныеНомера
		|ГДЕ
		|	НЕ СерийныеНомера.ПометкаУдаления
		|	И СерийныеНомера.Владелец = &Ссылка"
		);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);

		Если НЕ Запрос.Выполнить().Пустой() Тогда

			Объект.ИспользоватьСерийныеНомера = Истина;
			Сообщить("Флаг использования установлен! Объект должен использовать серийные номера.");

		Иначе

			Если Объект.ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой Тогда
				
				Объект.ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой;
				ПриИзмененииТипаСерийногоНомера();
				ПриИзмененииТипаСрокаДействия();
				
			КонецЕсли;
			
			Если Объект.ТипСрокаДействия = Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи Тогда
				
				Объект.ТипСрокаДействия = Перечисления.СрокДействияПодарочныхСертификатов.БезОграниченияСрока;
				ПриИзмененииТипаСрокаДействия();
				
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
	УстановитьДоступностьРеквизитовНаСервере();
    	
КонецПроцедуры	

//Процедура передает управление на сервер для изменения отображения формы
//
&НаСервере
Процедура ПриИзмененииТипаСерийногоНомера()
	
	Элементы.СерийныеНомераШтрихкод.Видимость = Объект.ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Смешанный
											ИЛИ Объект.ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой;

КонецПроцедуры	

//Процедура передает управление на сервер для изменения отображения формы
//
&НаСервере
Процедура ПриИзмененииТипаСрокаДействия()
	
	Если Объект.ТипСрокаДействия = Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи Тогда
		
		Элементы.ПараметрыСрокаДействия.ТекущаяСтраница = Элементы.ОграничениеПоПериоду;
		
	ИначеЕсли Объект.ТипСрокаДействия = Перечисления.СрокДействияПодарочныхСертификатов.СОграничениемНаДату Тогда
		
		Элементы.ПараметрыСрокаДействия.ТекущаяСтраница = Элементы.ОграничениеПоДате;
				
	Иначе
		
		Элементы.ПараметрыСрокаДействия.ТекущаяСтраница = Элементы.БезОграничения;
				
	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьНавигационнуюСсылкуКартинки(ФайлКартинки, ИдентификаторФормы)

	НавигационнаяСсылка = "";
	УстановитьПривилегированныйРежим(Истина);
    ВерсияСсылка = Неопределено;
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайла(ФайлКартинки, ВерсияСсылка);
	Если ВерсияСсылка = Неопределено Тогда
		ВерсияСсылка = ФайлКартинки.ТекущаяВерсия;
	КонецЕсли;	
	Если ЗначениеЗаполнено(ВерсияСсылка) Тогда
		ТипХраненияФайла = ВерсияСсылка.ТипХраненияФайла;
		Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			Если НЕ ВерсияСсылка.Том.Пустая() Тогда
				ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу; 
				Попытка
					ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
					НавигационнаяСсылка = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
				Исключение
					// запись в журнал регистрации
					СообщениеОбОшибке = РаботаСФайламиВызовСервера.СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(ИнформацияОбОшибке(), ВерсияСсылка.Владелец);
					ЗаписьЖурналаРегистрации("Открытие файла", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Файлы, ВерсияСсылка.Владелец, СообщениеОбОшибке);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка открытия файла картинки - файл не найден на сервере. Возможно он удален антивирусной программой. Обратитесь к администратору.
						| Файл: ""%1.%2""'"),
						ВерсияСсылка.ПолноеНаименование,
						ВерсияСсылка.Расширение)
						);
				КонецПопытки;
			КонецЕсли;			
		Иначе
			ДвоичныеДанные = ВерсияСсылка.ФайлХранилище.Получить();
			НавигационнаяСсылка = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);			
		КонецЕсли;
	КонецЕсли;
	
	Возврат НавигационнаяСсылка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//Процедура - обработчик события "ПриСозданииНаСервере" формы
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда

		Возврат;

	КонецЕсли;
		
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, Объект, "СтраницаДополнительныеРеквизиты");
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	ИсключительныйРежим = ТехническаяПоддержкаВызовСервера.ИсключительныйРежим();
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ДополнительныеОтчетыИОбработки
		
	Если НЕ ЗначениеЗаполнено(Объект.НаборУпаковок) Тогда
		Если Элементы.Найти("НаборУпаковок") <> Неопределено  Тогда
			Элементы.НаборУпаковок.ТолькоПросмотр	= Ложь;
		КонецЕсли;
	КонецЕсли;
	Если НЕ Объект.ИспользоватьСерийныеНомера Тогда
		Если Элементы.Найти("ИспользоватьСерийныеНомера") <> Неопределено  Тогда
			Элементы.ИспользоватьСерийныеНомера.ТолькоПросмотр	= Ложь;
		КонецЕсли;
		Если Элементы.Найти("ТипСерийногоНомера") <> Неопределено  Тогда
			Элементы.ТипСерийногоНомера.ТолькоПросмотр	= Ложь;
		КонецЕсли;
	КонецЕсли;
	Если Объект.Номинал = 0 Тогда
		Если Элементы.Найти("Номинал") <> Неопределено  Тогда
			Элементы.Номинал.ТолькоПросмотр	= Ложь;
		КонецЕсли;
	КонецЕсли;
	
	НаименованиеЕдиницыИзмеренияВеса = Строка(ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ЕдиницаИзмеренияВеса"));
	СтрокаЗаголовка = НСтр("ru='Вес (нетто), '") + НаименованиеЕдиницыИзмеренияВеса;
	
	Элементы.Вес.Заголовок = СтрокаЗаголовка;
	
	ИндивидуальныйНаборУпаковок              = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
	
	ОбновитьОтображениеЗакладок();
	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюИспользованияАссортимента();
	Если ИспользоватьАссортимент Тогда
		Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
			ЭтоНовыйОбъект = Объект.Ссылка.Пустая();
			Элементы.ТоварнаяКатегория.ТолькоПросмотр = НЕ ЭтоНовыйОбъект;
		Иначе
			Объект.ТоварнаяКатегория = Справочники.ТоварныеКатегории.ПустаяСсылка();
			Элементы.ТоварнаяКатегория.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	 
	Если НЕ ЗначениеЗаполнено(Объект.НаборУпаковок) Тогда
		НоваяСтрока = ЭтотОбъект.ПараметрыЗапретаРедактированияРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита","НаборУпаковок"))[0];
		
		НоваяСтрока.РедактированиеРазрешено = НоваяСтрока.ПравоРедактирования;
	КонецЕсли;
	Если НЕ Объект.ИспользоватьСерийныеНомера Тогда
		НоваяСтрока = ЭтотОбъект.ПараметрыЗапретаРедактированияРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита","ИспользоватьСерийныеНомера"))[0];
		НоваяСтрока.РедактированиеРазрешено = НоваяСтрока.ПравоРедактирования;
		НоваяСтрока = ЭтотОбъект.ПараметрыЗапретаРедактированияРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита","ТипСерийногоНомера"))[0];
		НоваяСтрока.РедактированиеРазрешено = НоваяСтрока.ПравоРедактирования;
	КонецЕсли;
	Если Объект.Номинал = 0 Тогда
		НоваяСтрока = ЭтотОбъект.ПараметрыЗапретаРедактированияРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита","Номинал"))[0];
		НоваяСтрока.РедактированиеРазрешено = НоваяСтрока.ПравоРедактирования;
	КонецЕсли;
	
	Элементы.ТипСрокаДействия.СписокВыбора.Добавить(Перечисления.СрокДействияПодарочныхСертификатов.БезОграниченияСрока);
	Элементы.ТипСрокаДействия.СписокВыбора.Добавить(Перечисления.СрокДействияПодарочныхСертификатов.СОграничениемНаДату);
	Элементы.ТипСрокаДействия.СписокВыбора.Добавить(Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи);
	
	УстановитьДоступностьРеквизитовНаСервере();
	УстановитьОтборДинамическихСписков();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЕстьПравоРедактирования               = ЗначениеНастроекПовтИсп.ЕстьПравоИзмененияНоменклатуры();
		ЭтотОбъект.ТолькоПросмотр               = Не ЕстьПравоРедактирования;
		Элементы.АдресКартинки.ТолькоПросмотр = Не ЕстьПравоРедактирования;
	Иначе
		ЕстьПравоРедактирования = Истина;
	КонецЕсли;
	
	Элементы.ТоварнаяКатегория.Видимость = ИспользоватьАссортимент;
//	Элементы.Марка.Видимость = ИспользоватьАссортимент;
	Элементы.Марка.Видимость = Истина;
	
КонецПроцедуры

//Процедура - обработчик события "ПриОткрытии" формы
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.НаборУпаковок) Тогда
		Элементы.НаборУпаковок.ТолькоПросмотр = Ложь;
	КонецЕсли;
	Если НЕ Объект.ИспользоватьСерийныеНомера Тогда
		Элементы.ИспользоватьСерийныеНомера.ТолькоПросмотр	= Ложь;
		Элементы.ТипСерийногоНомера.ТолькоПросмотр	= Ложь;
	КонецЕсли;
	
	Если Объект.Номинал = 0 Тогда
		Элементы.Номинал.ТолькоПросмотр = Ложь;
	КонецЕсли;

КонецПроцедуры

//Процедура - обработчик события "ОбработкаОповещения" формы
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		ОбновитьОтображениеЗакладок();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "СозданыСертификаты" Тогда
		
		Элементы.СерийныеНомера.Обновить();

	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ПрисоединенныйФайл" Тогда
		СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
		Если ВыборИзображения Тогда
			Объект.ФайлКартинки = СсылкаНаФайл;
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Процедура - обработчик события "ПриЧтенииНаСервере" формы
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не Объект.ФайлКартинки.Пустая() Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор)
	Иначе
		АдресКартинки = "";
	Конецесли;
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюИспользованияАссортимента();
	
КонецПроцедуры

//	LNK 25.10.2016 08:14:11
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)


КонецПроцедуры

//Процедура - обработчик события "ПередЗаписьюНаСервере" формы
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

//Процедура - обработчик события "ПослеЗаписиНаСервере" формы
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ИсключительныйРежим = ТехническаяПоддержкаВызовСервера.ИсключительныйРежим();

	// подсистема запрета редактирования ключевых реквизитов объектов	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.НаборУпаковок) Тогда
		Элементы.НаборУпаковок.ТолькоПросмотр = Ложь;
	КонецЕсли;
    Если НЕ Объект.ИспользоватьСерийныеНомера Тогда
		Элементы.ИспользоватьСерийныеНомера.ТолькоПросмотр	= Ложь;        			
		Элементы.ТипСерийногоНомера.ТолькоПросмотр	= Ложь;        					
	КонецЕсли;	
	
	УстановитьДоступностьРеквизитовНаСервере();	//	LNK 20.01.2020 13:39:46

	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИК СОБЫТИЙ ПОЛЕЙ ФОРМЫ

//Процедура - обработчик события "ПриИзменении" поля "ВидНоменклатуры"
//
&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	
	ПриИзмененииВидаНоменклатуры();
		
КонецПроцедуры

//Процедура - обработчик события "НачалоВыбораИзСписка" поля "НаименованиеПолное"
//
&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Список = Новый СписокЗначений;
	Список.Добавить(Объект.Наименование);

	РезультатВыбора = ВыбратьИзСписка(Список, Элементы.НаименованиеПолное);
	Если РезультатВыбора <> Неопределено Тогда
		Объект.НаименованиеПолное = РезультатВыбора.Значение;
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

//Процедура - обработчик события "ПриИзменении" поля "Наименование"
//
&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)

	Если ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ФайлКартинки".
//
&НаКлиенте
Процедура ФайлКартинкиПриИзменении(Элемент)
	
	Если Не Объект.ФайлКартинки.Пустая() Тогда
		АдресКартинки = ПолучитьНавигационнуюСсылкуКартинки(Объект.ФайлКартинки, УникальныйИдентификатор)
	Иначе
		АдресКартинки = "";
	Конецесли;
	
КонецПроцедуры // ФайлКартинкиПриИзменении()

//Процедура - обработчик события "ПриИзменении" поля "НаборУпаковок"
//
&НаКлиенте
Процедура НаборУпаковокПриИзменении(Элемент)
	НаборУпаковокПриИзмененииСервер();
	ИндивидуальныеУпаковки = (Объект.НаборУпаковок = ИндивидуальныйНаборУпаковок
	                         Или Не ЗначениеЗаполнено(Объект.НаборУпаковок));
							 
	Элементы.ЕдиницаИзмерения.ТолькоПросмотр = Не ИндивидуальныеУпаковки;
КонецПроцедуры

//Процедура - обработчик события "Открытие" поля "НаборУпаковок"
//
&НаКлиенте
Процедура НаборУпаковокОткрытие(Элемент, СтандартнаяОбработка)
	Если Объект.НаборУпаковок = ИндивидуальныйНаборУпаковок Тогда
		СтандартнаяОбработка = Ложь;
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Если Не ЭтотОбъект.Записать() Тогда
				ТекстСообщения = НСтр("ru='Ошибка записи элемента!'");
				ПоказатьПредупреждение(, ТекстСообщения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", Объект.Ссылка);
		
		ОткрытьФорму("Справочник.УпаковкиНоменклатуры.Форма.ФормаСписка",Новый Структура("Отбор", Отбор), ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

//Процедура - обработчик события "НачалоВыбора" поля "Описание"
//
&НаКлиенте
Процедура ОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияМногострочногоТекста(Элемент.ТекстРедактирования, Объект.Описание, Модифицированность, НСтр("ru = 'Описание'"));
	
КонецПроцедуры

//Процедура - обработчик события "ПриИзменении" поля "ТипСрокаДействия"
//
&НаКлиенте
Процедура ТипСрокаДействияПриИзменении(Элемент)
	
	ПриИзмененииТипаСрокаДействия();
	        	
КонецПроцедуры

//Процедура - обработчик события "ПриИзменении" поля "ТипСерийногоНомера"
//
&НаКлиенте
Процедура ТипСерийногоНомераПриИзменении(Элемент)
	
	ПриИзмененииТипаСерийногоНомера();
	
КонецПроцедуры

//Процедура - обработчик события "ПриИзменении" поля "ИспользоватьСерийныеНомера"
//
&НаКлиенте
Процедура ИспользоватьСерийныеНомераПриИзменении(Элемент)
	
	ПриИзмененииИспользоватьСерийныеНомера();
		          
КонецПроцедуры

//Процедура - обработчик события "ПередНачаломДобавления" поля "СерийныеНомера"
//
&НаКлиенте
Процедура СерийныеНомераПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если  ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если ЭтотОбъект.Модифицированность Тогда
			
			ТекстВопроса = НСтр("ru = 'Элемент был изменен, записать изменения?'");
			ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			
			Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
				
				Если НЕ ЭтотОбъект.Записать() Тогда
					
					Отказ = Истина;
					
				КонецЕсли;	
				
			Иначе 
				
				Отказ = Истина;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	Иначе	
		
		ТекстВопроса = НСтр("ru = 'Элемент был изменен, записать изменения?'");
		ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			
			Если Не ЭтотОбъект.Записать() Тогда
				
				Отказ = Истина;
				
			КонецЕсли;
			
		Иначе 
			
			Отказ = Истина;
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварнаяКатегорияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму ("Справочник.ТоварныеКатегории.ФормаВыбора", Новый Структура("Владелец",Объект.ВидНоменклатуры), Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварнаяКатегорияПриИзменении(Элемент)
	МожноМенять=ВладелецТоварнойКатегорииСоответствуетВидуНоменклатуры();
	Если НЕ МожноМенять Тогда
		СтрокаПредупреждения = НСтр("ru='Данная категория не принадлежит выбранному виду номенклатуры'");
		ПоказатьПредупреждение(, СтрокаПредупреждения);
		Объект.ТоварнаяКатегория = Неопределено;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

// СтандартныеПодсистемы.Свойства

//Процедура - обработчик команды "РедактироватьСоставСвойств"
//
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// Обработчик команды, создаваемой механизмом запрета редактирования ключевых реквизитов.
//
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Результат = ОткрытьФормуМодально("Справочник.Номенклатура.Форма.РазблокированиеРеквизитов");
		Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
			
			Если ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект) Тогда
				ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтотОбъект, Результат);
				Если Результат.Найти("СхемаКомпоновкиДанных") <> Неопределено И НЕ ОбщегоНазначенияРТСервер.ЭтоПолноправныйПользователь() Тогда
					Элементы.РедактироватьСхемуКомпоновкиДанных.Доступность = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ЭтоТовар = Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар");
			ИндивидуальныеУпаковки = (Объект.НаборУпаковок = ИндивидуальныйНаборУпаковок
			                         Или Не ЗначениеЗаполнено(Объект.НаборУпаковок));
			
			Если НЕ Элементы.ЕдиницаИзмерения.ТолькоПросмотр Тогда
				Элементы.ЕдиницаИзмерения.ТолькоПросмотр = Не ИндивидуальныеУпаковки;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.НаборУпаковок) Тогда
				Элементы.НаборУпаковок.ТолькоПросмотр = Ложь;
			КонецЕсли;
			
			Если НЕ Объект.ИспользоватьСерийныеНомера Тогда
				Элементы.ИспользоватьСерийныеНомера.ТолькоПросмотр = Ложь;
				Элементы.ТипСерийногоНомера.ТолькоПросмотр = Ложь;
			КонецЕсли;	
			
			Если Объект.Номинал = 0 Тогда
				Элементы.Номинал.ТолькоПросмотр = Ложь;
			КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Процедура - обработчик команды "ЗаполнитьСерийныеНомера"
//
&НаКлиенте
Процедура ЗаполнитьСерийныеНомера(Команда)
	
	Отказ = Истина;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если НЕ ПроверитьЗаполнение() Тогда
			
			Возврат;
			
		КонецЕсли;	
		
		Если ЭтотОбъект.Модифицированность Тогда
			
			Если Не ЭтотОбъект.Записать() Тогда
				
				Возврат;
				
			КонецЕсли;
						
		КонецЕсли;	
		
	Иначе	
		
		Если Не ЭтотОбъект.Записать() Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
    	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Номенклатура", Объект.Ссылка);
	
	Если Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда

			ИмяГенератора = "Обработка.ЗаполнениеДиапазонаПодарочныхСертификатов.Форма";

	Иначе	ИмяГенератора = "Обработка.ЗаполнениеДиапазонаСерийныхНомеров.Форма";

	КонецЕсли;

	ОткрытьФорму(ИмяГенератора, ПараметрыЗаполнения, ЭтотОбъект, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(Команда)
	СтруктураПараметров = Новый Структура("ВладелецФайла, ЗакрыватьПриВыборе", Объект.Ссылка, Истина);
	ЗначениеВыбора = ОткрытьФормуМодально("ОбщаяФорма.ВыборПрисоединенныхФайлов", СтруктураПараметров);
	Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
		Объект.ФайлКартинки = ЗначениеВыбора;
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе 
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	ВыборИзображения = Истина;
	ИдентификаторФайла = Новый УникальныйИдентификатор;
	ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);
	ВыборИзображения = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	Объект.ФайлКартинки = ПредопределенноеЗначение("Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка");
	АдресКартинки = "";
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	ОчиститьСообщения();
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		ПрисоединенныеФайлыКлиент.ОткрытьФормуПрисоединенногоФайла(Объект.ФайлКартинки);
	Иначе
		ТекстСообщения = НСтр("ru='Отсутстует изображение для редактирования'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе 
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		ПросмотретьПрисоединенныйФайл();
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не ЕстьПравоРедактирования Тогда
			ТекстИсключения = НСтр("ru = 'Нарушение прав доступа!'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		ВыборИзображения = Истина;
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		Фильтр = НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
									+ "|Все файлы(*.*)|*.*"
									+ "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
									+ "|Формат GIF(*.gif*)|*.gif"
									+ "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
									+ "|Формат PNG(*.png*)|*.png"
									+ "|Формат TIFF(*.tif)|*.tif"
									+ "|Формат icon(*.ico)|*.ico"
									+ "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
		ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, Фильтр);
		ВыборИзображения = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	ОчиститьСообщения();
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		ДанныеФайла = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(ЭтотОбъект.Объект.ФайлКартинки, УникальныйИдентификатор);
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла);
	Иначе
		ТекстСообщения = НСтр("ru='Отсутстует изображение для просмотра'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)

	УстановитьПривилегированныйРежим(Истина);

	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;

КонецФункции

&НаСервере
Функция ВладелецТоварнойКатегорииСоответствуетВидуНоменклатуры()
	ВладелецСоответствует=Истина;
	Если ЗначениеЗаполнено(Объект.ТоварнаяКатегория) Тогда
		ВладелецСоответствует=Объект.ТоварнаяКатегория.Владелец=Объект.ВидНоменклатуры;
	КонецЕсли;
	Возврат ВладелецСоответствует;
КонецФункции

// СтандартныеПодсистемы.Свойства

//Процедура заполняет дополнительные реквизиты и их значения
//
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
	ОбновитьОтображениеЗакладок();

КонецПроцедуры

&НаКлиенте	//	LNK 09.02.2018 14:02:44
Процедура ЗагрузитьСерийныеНомераИзExcel(Команда)
	
	Если Модифицированность Тогда

		ПоказатьПредупреждение(, "Отказано! Текущий элемент НЕ записан!",, "Предупреждение опасных действий");
		Возврат;

	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗагрузкуДанныхИзТаблицыExcel", ЭтотОбъект);
	ДиалогВыбораФайла  = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = "Выберите файл книги MS Excel";
	ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Лист Excel'") + " (*.xls)|*.xls|" + НСтр("ru = 'Лист Excel2007'") + " (*.xlsx)|*.xlsx";
	ДиалогВыбораФайла.ПолноеИмяФайла = ПолноеИмяИмпортируемогоФайла;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;

	ДиалогВыбораФайла.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте	//	LNK 09.02.2018 14:02:44
Процедура ВыполнитьЗагрузкуДанныхИзТаблицыExcel(СписокФайлов, ДополнительныеПараметры)	Экспорт

	Если ТипЗнч(СписокФайлов) = Тип("Массив") И НЕ СписокФайлов.Количество() = 0 Тогда

		ПолноеИмяИмпортируемогоФайла = СписокФайлов[0];

		ПоказатьОповещениеПользователя("Загрузка данных из файла ...",, "Выполняется загрузка «" + ПолноеИмяИмпортируемогоФайла + "»", БиблиотекаКартинок.Предупреждение32);

		Если ЗаполнениеОбъектов.ЗагрузитьСерийныеНомераИзТаблицыExcel(Объект.Ссылка
			, Объект.ТипСерийногоНомера
			, ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяИмпортируемогоФайла), УникальныйИдентификатор)
			, ОбщегоНазначенияКлиентСервер.lx_GetTooken(ПолноеИмяИмпортируемогоФайла, "."))
		Тогда

			ПоказатьОповещениеПользователя("Загрузка данных выполнена!",,, БиблиотекаКартинок.Предупреждение32);

		Иначе

			ПоказатьОповещениеПользователя("При загрузке возникла ошибка!",,, БиблиотекаКартинок.Ошибка32);

		КонецЕсли;

		Элементы.СерийныеНомера.Обновить();

	Иначе

		Сообщить("Выбор не был сделан. Операция не выполнена");
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура hiПроверитьУникальностьСерийногоНомера(СерийныйНомер, Отказ)
	
	ТакойНомерУжеЕсть = Справочники.СерийныеНомера.НайтиПоНаименованию(СерийныйНомер);
	ТекстСообщения = "";
	
	Если НЕ ТакойНомерУжеЕсть = Неопределено И НЕ ТакойНомерУжеЕсть = Справочники.СерийныеНомера.ПустаяСсылка() Тогда
		
		ТекстСообщения = ТекстСообщения + 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Серийный номер %1 уже существует, владелец %2.'"),
		ТакойНомерУжеЕсть,
		ТакойНомерУжеЕсть.Владелец) +
		Символы.ПС;
		
		Отказ = Истина;
	КонецЕсли;
	
	Если ТекстСообщения <> "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;

КонецПроцедуры
// -HVOYA. 21.11.2016 17:25:53, Львова Е.А.

// +HVOYA. 02.06.2017 12:09:28, Львова Е.А.
&НаСервере
Процедура hiПриЗаписиСерийногоНомераНаСервере(Отказ, ТекущийОбъект, Штрихкод, ТипШтрихкода)
    
    ТипСерийногоНомера = ТекущийОбъект.Владелец.ТипСерийногоНомера;
    
	Если (ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой
		ИЛИ ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Смешанный) Тогда
		
		НаборЗаписейШтриходов = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		НаборЗаписейШтриходов.Отбор.Владелец.Установить(ТекущийОбъект.Ссылка);
		НаборЗаписейШтриходов.Записать();
		
		ЗаписьШтрихкода              = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		ЗаписьШтрихкода.Владелец     = ТекущийОбъект.Ссылка;
		ЗаписьШтрихкода.ТипШтрихкода = ТипШтрихкода;
		ЗаписьШтрихкода.Штрихкод     = Штрихкод;
				
		Если ЗаписьШтрихкода.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128 Тогда
			ЗаписьШтрихкода.ПредставлениеШтрихкода = ЗаписьШтрихкода.Штрихкод;
		КонецЕсли;
		
		Если НЕ ЗаписьШтрихкода.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ	Отказ Тогда
			ЗаписьШтрихкода.Записать(Истина);			
		КонецЕсли;
		
	Иначе // Магнитная карта не должна иметь штрихкода
		
		НаборЗаписейШтриходов = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		НаборЗаписейШтриходов.Отбор.Владелец.Установить(ТекущийОбъект.Ссылка);
		НаборЗаписейШтриходов.Записать();
		
	КонецЕсли;
	
КонецПроцедуры
// -HVOYA. 02.06.2017 12:09:30, Львова Е.А.

// Конец СтандартныеПодсистемы.Свойства
