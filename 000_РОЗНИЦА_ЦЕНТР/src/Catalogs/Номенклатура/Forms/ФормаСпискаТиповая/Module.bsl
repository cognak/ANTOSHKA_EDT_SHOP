
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//Процедура - обработчик события "ПриСозданииНаСервере" формы
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Список.Параметры.УстановитьЗначениеПараметра("Склад", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСеанса.ТекущийМагазин, "СкладПродажи"));

	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	
	ИспользоватьПолнотекстовыйПоиск = ПолучитьФункциональнуюОпцию("ИспользоватьПолнотекстовыйПоиск");
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	УстановитьДополнительныеКолонкиНоменклатуры();
	
	Если ИспользоватьПолнотекстовыйПоиск Тогда
		
		Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() =	РежимПолнотекстовогоПоиска.Разрешить Тогда
			
			ИндексПолнотекстовогоПоискаАктуален = ПолнотекстовыйПоиск.ИндексАктуален();
			ИсторияПоиска = ХранилищеОбщихНастроек.Загрузить("ИсторияПоискаНоменклатуры");
			Если ИсторияПоиска <> Неопределено Тогда
				
				Элементы.СтрокаПоиска.СписокВыбора.ЗагрузитьЗначения(ИсторияПоиска);
				
			КонецЕсли;
			
		Иначе
			
			Элементы.СтрокаПоиска.Видимость 	= Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекПовтИсп.ИспользоватьПодключаемоеОборудование();
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюИспользованияАссортимента();
	Элементы.ТоварнаяКатегория.Видимость = ИспользоватьАссортимент;
	Элементы.Марка.Видимость = ИспользоватьАссортимент;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// МеханизмВнешнегоОборудования
	Если ИспользоватьПодключаемоеОборудование
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "";

		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:
			                      |""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	// Конец МеханизмВнешнегоОборудования
	
КонецПроцедуры

//Процедура - обработчик события "ПриЗакрытии" формы
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ИсторияПоискаНоменклатуры", , Элементы.СтрокаПоиска.СписокВыбора.ВыгрузитьЗначения());

	// МеханизмВнешнегоОборудования
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец МеханизмВнешнегоОборудования

КонецПроцедуры

// Процедура - обработчик команды "ОбработкаОповещения".
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;             			
			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекКод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
			
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

КонецПроцедуры // ОбработкаОповещения()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

//Процедура - обработчик события "Очистка" поля формы "СтрокаПоиска"
//
&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	ПрименитьПоиск();
	
КонецПроцедуры

//Процедура - обработчик события "ПриИзменении" поля формы "СтрокаПоиска"
//
&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)

	ПрименитьПоиск();

КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОткрытие(Элемент, СтандартнаяОбработка)

	ПрименитьПоиск();

КонецПроцедуры

//Процедура - обработчик события "АвтоПодбор" поля формы "СтрокаПоиска"
//
&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
		
	СпискиВыбораКлиентСервер.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ 

//Процедура - обработчик команды "ИзменитьВыделенные"
//
&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

//Процедура - обработчик команды "ПоискПоШтрихкоду"
//
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	Если ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекШтрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекШтрихкод);
				
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
Функция ПолнотекстовыйПоискНаСервереБезКонтекста(СтрокаПоиска, РезультатПоиска)
	
	ОписаниеОшибки = "";
	РезультатПоиска = Обработки.ПодборТоваров.ПоискТоваров(СтрокаПоиска, ОписаниеОшибки);
	
	Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПоискПоПодстрокеНаКлиенте()
	
	Использование = ЗначениеЗаполнено(СтрокаПоиска); 	
	
	ГруппаОтбора = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.Отбор.Элементы,
		"ПоискПоПодстроке",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли
	);
		
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"Наименование",
		СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит
	);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"Код",
		СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит
	);                             
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"ПолноеНаименование",
		СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит
	);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"Артикул",
		СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит
	);
			
	СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Элементы.СтрокаПоиска.СписокВыбора, СтрокаПоиска);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьИндексПолнотекстовогоПоиска()
	
	УстановитьПривилегированныйРежим(Истина);
	ПолнотекстовыйПоиск.ОбновитьИндекс();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеИндексаПолнотекстовогоПоискаДанных()
	
	Состояние(НСтр("ru = 'Идет обновление индекса полнотекстового поиска ...'"));
	ОбновитьИндексПолнотекстовогоПоиска();
	Состояние(НСтр("ru = 'Обновление индекса полнотекстового поиска завершено...'")); 
	
	ИндексПолнотекстовогоПоискаАктуален = Истина;
	ПолнотекстовыйПоискНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПолнотекстовыйПоискНаКлиенте()
	
	Если Не ИндексПолнотекстовогоПоискаАктуален 
		И ИнформационнаяБазаФайловая Тогда
		
		Результат = Вопрос(НСтр("ru='Индекс полнотекстового поиска неактуален. Обновить индекс?'"), РежимДиалогаВопрос.ДаНет); 
		
		Если Результат = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ОбновлениеИндексаПолнотекстовогоПоискаДанных",0.2,Истина);
		
	Иначе
		
		ПолнотекстовыйПоискНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолнотекстовыйПоискНаКлиенте()
		
	ГруппаОтбора = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.Отбор.Элементы,
		"ПоискПоПодстроке",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ
	);
		
	Если НЕ ЗначениеЗаполнено(СокрЛП(СтрокаПоиска)) Тогда
		
		ПоискНеУдачный = Ложь;
		
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
			ГруппаОтбора,
			"Ссылка",
			Неопределено,
			Ложь, ВидСравненияКомпоновкиДанных.ВСписке
		);
						
	Иначе
		
		РезультатПоиска = Неопределено;
		ПоискНеУдачный = ПолнотекстовыйПоискНаСервереБезКонтекста(СтрокаПоиска, РезультатПоиска);
		
		Если Не ПоискНеУдачный Тогда
			
			Использование = РезультатПоиска.Номенклатура.Количество() > 0;
			
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
				ГруппаОтбора,
				"Ссылка",
				?(Использование, РезультатПоиска.Номенклатура, Неопределено),
				Использование, ВидСравненияКомпоновкиДанных.ВСписке
			);
						
			СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Элементы.СтрокаПоиска.СписокВыбора, СтрокаПоиска);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьПоиск()
	
	Если ИспользоватьПолнотекстовыйПоиск Тогда
		
		ВыполнитьПолнотекстовыйПоискНаКлиенте();
		
	Иначе
		
		ПоискПоПодстрокеНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

// МеханизмВнешнегоОборудования
&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) 
	
	СтруктураДействий = Новый Структура;
	СтруктураПараметровДействия = Новый Структура;
	СтруктураПараметровДействия.Вставить("РегистрацияНовойНоменклатуры");
	СтруктураДействий.Вставить("ПроверкаТоваров", СтруктураПараметровДействия);
	
	Возврат ПодключаемоеОборудованиеРТ.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции	

&НаСервере
Функция ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента) Экспорт
	
	Если НЕ СтруктураПараметров.НеизвестныеДанныеПО Тогда
		
		Если СтруктураПараметров.Действие = "ПроверкаТоваров" Тогда
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
								
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
								
				ГруппаОтбора = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
					Список.Отбор.Элементы,
					"ПоискПоПодстроке",
					ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ
					);
									
				ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
					ГруппаОтбора,
					"Ссылка",
					Неопределено,
					Ложь, 
					ВидСравненияКомпоновкиДанных.ВСписке
					);					

				Элементы.Список.ТекущаяСтрока = СтруктураПараметров.ЗначенияПоиска[0].Номенклатура; 
				СтрокаПоиска = "";
				
			КонецЕсли;				
			
		ИначеЕсли СтруктураПараметров.Действие = "РегистрацияНовойНоменклатуры" Тогда
			
			СтруктураПараметровРегистрацияНовойНоменклатуры = Новый Структура;
			ТекстВопроса = НСтр("ru = 'Создать новую позицию товара с штрихкодом %1?'");
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, СтруктураПараметров.Штрихкод);
			СтруктураПараметровРегистрацияНовойНоменклатуры.Вставить("ТекстВопроса", ТекстВопроса);
			СтруктураПараметровКлиента.Вставить("РегистрацияНовойНоменклатуры", СтруктураПараметровРегистрацияНовойНоменклатуры);
			СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");		
						
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураПараметровКлиента;
	
КонецФункции

// Обработка магнитного или штрихового кода на клиенте
//
// Параметры
//  СтруктураПараметровКлиента - структура параметров
//
&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод)
	
	Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") 
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
		
		СтрокаСообщения = НСтр("ru = 'Данные по коду не найдены: %1%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекКод);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
						
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ТекстПредупреждения") Тогда
		
		ПоказатьПредупреждение(, СтруктураПараметровКлиента.ТекстПредупреждения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойНоменклатуры") Тогда
		
		Ответ = Вопрос(СтруктураПараметровКлиента.РегистрацияНовойНоменклатуры.ТекстВопроса, РежимДиалогаВопрос.ДаНет, 50); 
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Конец МеханизмВнешнегоОборудования

&НаСервере
Процедура УстановитьДополнительныеКолонкиНоменклатуры()

	Элементы.Код.Видимость = ДополнительныеКолонкиНоменклатуры = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код 
							ИЛИ ДополнительныеКолонкиНоменклатуры = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.КодАртикул;
	Элементы.Артикул.Видимость = ДополнительныеКолонкиНоменклатуры = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул
							ИЛИ ДополнительныеКолонкиНоменклатуры = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.КодАртикул;

КонецПроцедуры


