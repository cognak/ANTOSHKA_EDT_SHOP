
///////////////////////////////////////////////////////////////////////////////////////////
// Процедуры обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Перем ПараметрыОтбора;
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	УстановитьДополнительныеКолонкиНоменклатуры();
	
	Если Параметры.Свойство("СтруктураПараметрыОтбора", ПараметрыОтбора)  Тогда
		
		ЗначениеПараметра = Неопределено;
		
		Если ПараметрыОтбора.Свойство("ИспользоватьСерийныеНомера", ЗначениеПараметра) Тогда
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ИспользоватьСерийныеНомера", ЗначениеПараметра , Истина, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		Если ПараметрыОтбора.Свойство("МассивТиповНоменклатуры", ЗначениеПараметра) Тогда
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ТипНоменклатуры", ЗначениеПараметра , Истина, ВидСравненияКомпоновкиДанных.ВСписке);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Элемент Из Параметры.Отбор Цикл
		СписокОбязательныхОтборов.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	СтрокаОтображение = "";
	Если Параметры.Свойство("СтрокаОтображение", СтрокаОтображение) Тогда
		Элементы.Список.Отображение = ОтображениеТаблицы[СтрокаОтображение]
	КонецЕсли;

	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюИспользованияАссортимента();
	Элементы.ТоварнаяКатегория.Видимость = ИспользоватьАссортимент;
	Элементы.Марка.Видимость = ИспользоватьАссортимент;
	
	ВидПоиска = "Наименование";
	
	Если Параметры.Свойство("ВидПоиска") Тогда
		ВидПоиска = Параметры.ВидПоиска;
		ТекущийЭлемент = Элементы.ЗначениеПоиска;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Для Каждого ИмяОтбора Из СписокОбязательныхОтборов Цикл
		Для Каждого Элемент Из ЭтотОбъект.Список.Отбор.Элементы Цикл
			Если Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОтбора) Тогда
				Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ЗначениеПоискаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначениеПоиска = Текст;
	
	ПоискНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьПоследнийПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПоискаПриИзменении(Элемент)
	
	ПоискНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьПоследнийПоиск();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
Процедура ПоискВезде(Команда)
	
	ВидПоиска = "Везде";
	ПоискНоменклатуры();
	
	ТекущийЭлемент = Элементы.ЗначениеПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискНаименование(Команда)
	
	ВидПоиска = "Наименование";
	ПоискНоменклатуры();
	
	ТекущийЭлемент = Элементы.ЗначениеПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискКод(Команда)
	
	ВидПоиска = "Код";
	ПоискНоменклатуры();
	
	ТекущийЭлемент = Элементы.ЗначениеПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискШтрихкод(Команда)
	
	ВидПоиска = "Штрихкод";
	ПоискНоменклатуры();
	
	ТекущийЭлемент = Элементы.ЗначениеПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискАртикул(Команда)
	
	ВидПоиска = "Артикул";
	ПоискНоменклатуры();
	
	ТекущийЭлемент = Элементы.ЗначениеПоиска;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьДополнительныеКолонкиНоменклатуры()
	
	Элементы.Код.Видимость = ДополнительныеКолонкиНоменклатуры = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код
							ИЛИ ДополнительныеКолонкиНоменклатуры = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.КодАртикул;
	Элементы.Артикул.Видимость = ДополнительныеКолонкиНоменклатуры = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул
							ИЛИ ДополнительныеКолонкиНоменклатуры = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.КодАртикул;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПростойРежимПоиска(ВидПоиска, Текст)
	
	ОчиститьПоследнийПоиск();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, ВидПоиска, Текст, ВидСравненияКомпоновкиДанных.Содержит, ,ЗначениеЗаполнено(Текст));
	ПоследнийВидПоиска = ВидПоиска;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПоискПоЧастиШтрихода(Текст)
	
	ОчиститьПоследнийПоиск();
	
	СписокНоменклатуры = ПодборТоваровСервер.СписокНоменклатурыПоЧастиШтрихкода(Текст);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Ссылка", СписокНоменклатуры, ВидСравненияКомпоновкиДанных.ВСписке, ,ЗначениеЗаполнено(Текст));
	
	ПоследнийВидПоиска = "Ссылка";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПоискПоВсемДанным(Текст)
	
	ОчиститьПоследнийПоиск();
	
	СписокНоменклатуры = ПодборТоваровСервер.СписокНоменклатурыПоискВезде(Текст);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Ссылка", СписокНоменклатуры, ВидСравненияКомпоновкиДанных.ВСписке, ,ЗначениеЗаполнено(Текст));
	
	ПоследнийВидПоиска = "Ссылка";
	
КонецПроцедуры


&НаСервере
Процедура ОчиститьПоследнийПоиск()
	
	Если ЗначениеЗаполнено(ПоследнийВидПоиска) Тогда
		
		ПолеПоследнегоПоиска = Новый ПолеКомпоновкиДанных(ПоследнийВидПоиска);
		
		Для каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
			
			Если ЭлементОтбора.ЛевоеЗначение = ПолеПоследнегоПоиска Тогда
				
				Список.Отбор.Элементы.Удалить(ЭлементОтбора);
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПолеПоследнегоПоиска = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискНоменклатуры()
	
	Если ВидПоиска = "Везде" Или ВидПоиска = "" Тогда
		
		УстановитьПоискПоВсемДанным(ЗначениеПоиска);
		
	ИначеЕсли ВидПоиска = "Штрихкод" Тогда
		
		УстановитьПоискПоЧастиШтрихода(ЗначениеПоиска);
		
	Иначе
		
		УстановитьПростойРежимПоиска(ВидПоиска, ЗначениеПоиска);
		
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.Список;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПроизводительПриИзменении(Элемент)
	ОтборПриИзменении("ОтборПроизводитель");
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидНоменклатурыПриИзменении(Элемент)
	ОтборПриИзменении("ОтборВидНоменклатуры");  
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидНоменклатурыИспользованиеПриИзменении(Элемент)
	ОтборПриИзменении("ОтборВидНоменклатуры", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтборПроизводительИспользованиеПриИзменении(Элемент)
	ОтборПриИзменении("ОтборВидНоменклатуры", Истина);
КонецПроцедуры







&НаКлиенте
Процедура ОтборПриИзменении(ИмяОтбора, ПереключательИспользование = Ложь)

	ЗначениеОтбора = ЭтотОбъект[ИмяОтбора];

	Если НЕ ПереключательИспользование Тогда

		ЭтотОбъект[ИмяОтбора + "Использование"] = ЗначениеЗаполнено(ЗначениеОтбора);

	КонецЕсли;

	Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда

		СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Элементы[ИмяОтбора].СписокВыбора, ЗначениеОтбора);

	КонецЕсли;

	ГруппаОтбора = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.Отбор.Элементы,
		"ОтборыДополнительныеРеквизиты",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ
	);

	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"ВидНоменклатуры",
		ОтборВидНоменклатуры,
		ОтборВидНоменклатурыИспользование, ВидСравненияКомпоновкиДанных.Равно
	);
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"Производитель",
		ОтборПроизводитель,
		ОтборПроизводительИспользование, ВидСравненияКомпоновкиДанных.Равно
	);

	Если ОтборВидНоменклатурыИспользование ИЛИ ОтборПроизводительИспользование Тогда

		Элементы.Список.Отображение = ОтображениеТаблицы.Список;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтборПроизводительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ОтборВидНоменклатуры) тогда
		СписокКонтрагентов = ПолучитьСписокКонтрагентовНаСервере(ОтборВидНоменклатуры);
		Если НЕ СписокКонтрагентов = Неопределено тогда
			СтандартнаяОбработка=Ложь;    
			СтруктураПараметров = Новый Структура("СписокКонтрагентов", СписокКонтрагентов);
			ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",СтруктураПараметров,Элемент);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция  ПолучитьСписокКонтрагентовНаСервере(ВидНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Производитель КАК Контрагент
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоГруппа = ЛОЖЬ
		|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
		|	И Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура.Производитель";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		СписокКонтрагентов = Новый СписокЗначений;
		Пока Выборка.Следующий() цикл
			СписокКонтрагентов.Добавить(Выборка.Контрагент);
		КонецЦикла;
		Возврат СписокКонтрагентов;
	КонецЕсли;
	
КонецФункции



