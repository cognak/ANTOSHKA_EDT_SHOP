///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//Процедура - обработчик события "ПриСозданииНаСервере" формы
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПараметрыИсточникаДанных();

	Если ПараметрыСеанса.ТекущийМагазин.Пустая() Тогда

		Элементы.Количество.Видимость   = Ложь;
		Элементы.ЦенаВРознице.Видимость = Ложь;

	Иначе

		НомерМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСеанса.ТекущийМагазин, "НомерМагазина");
		НомерМагазина = ?(ЗначениеЗаполнено(НомерМагазина), СокрЛП(НомерМагазина), "N/A");

		Элементы.Количество.Заголовок   = "К-во (№:" + НомерМагазина + "), шт";
		Элементы.ЦенаВРознице.Заголовок = "Цена (№:" + НомерМагазина + ")";

	КонецЕсли;

	Если НЕ РольДоступна(Метаданные.роли.АдминистраторСистемы) Тогда

		Элементы.IDNG.Видимость = Ложь;

	КонецЕсли;

	Если Параметры.РежимВыбора Тогда

		Элементы.Список.РежимВыбора = Истина;
		Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;

	КонецЕсли;

	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	УстановитьДополнительныеКолонкиНоменклатуры();
	
	ИсторияПоиска = ХранилищеОбщихНастроек.Загрузить("ИсторияПоискаНоменклатуры");

	Если ИсторияПоиска <> Неопределено Тогда
		
		Элементы.ЭлементПоиска.СписокВыбора.ЗагрузитьЗначения(ИсторияПоиска);
		
	КонецЕсли;
	
	ИсторияПоиска = ХранилищеОбщихНастроек.Загрузить("ИсторияОтборТорговаяМарка");

	Если ИсторияПоиска <> Неопределено Тогда
		
		Элементы.ОтборТорговаяМарка.СписокВыбора.ЗагрузитьЗначения(ИсторияПоиска);
		
	КонецЕсли;
	
	ИсторияПоиска = ХранилищеОбщихНастроек.Загрузить("ИсторияОтборВидНоменклатуры");

	Если ИсторияПоиска <> Неопределено Тогда
		
		Элементы.ОтборВидНоменклатуры.СписокВыбора.ЗагрузитьЗначения(ИсторияПоиска);
		
	КонецЕсли;
	
	ИсторияПоиска = ХранилищеОбщихНастроек.Загрузить("ИсторияОтборПроизводитель");

	Если ИсторияПоиска <> Неопределено Тогда
		
		Элементы.ОтборПроизводитель.СписокВыбора.ЗагрузитьЗначения(ИсторияПоиска);
		
	КонецЕсли;
	
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекПовтИсп.ИспользоватьПодключаемоеОборудование();
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюИспользованияАссортимента();
	Элементы.ТоварнаяКатегория.Видимость = ИспользоватьАссортимент;
	Элементы.Марка.Видимость = ИспользоватьАссортимент;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// МеханизмВнешнегоОборудования
	Если ИспользоватьПодключаемоеОборудование
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда

		ОписаниеОшибки = "";

		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:
			                      |""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;

	КонецЕсли;
	// Конец МеханизмВнешнегоОборудования

//	LNK 08.11.2016 12:02:15
	ПроверитьЗаполнениеРабочегоМеста(МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента());
	
	УстановитьОформлениеЭлементов();

КонецПроцедуры

//Процедура - обработчик события "ПриЗакрытии" формы
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	// МеханизмВнешнегоОборудования
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец МеханизмВнешнегоОборудования

КонецПроцедуры

// Процедура - обработчик команды "ОбработкаОповещения".
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;             			
			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекКод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
			
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

КонецПроцедуры // ОбработкаОповещения()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

//	LNK 13.11.2016 11:15:23
&НаКлиенте
Процедура ПоказыватьТолькоСОстатками(Команда)

	УстановитьПараметрыИсточникаДанных(НЕ Список.Параметры.Элементы.Найти("ПоказыватьТолькоСОстатками").Значение);
	УстановитьОформлениеЭлементов();

	Элементы.Список.Обновить();

КонецПроцедуры

//	LNK 07.03.2017 11:58:03
&НаКлиенте
Процедура ПоказыватьБлокированные(Команда)

	УстановитьПараметрыИсточникаДанных(, НЕ Список.Параметры.Элементы.Найти("ПоказыватьБлокированные").Значение);
	УстановитьОформлениеЭлементов();

	Элементы.Список.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)

//	Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;

КонецПроцедуры

#Область ОбработчикиУправленияПоиском

&НаКлиенте
Процедура ЭлементПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ЭлементПоискаОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ЭлементПоискаПриИзменении(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ЭлементПоискаПриИзменении(Элемент)

	ПоискНеУдачный = ЭлементПоиска.Пустая();

	Если ПоискНеУдачный Тогда

	//	Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;

	Иначе

		Элементы.Список.ТекущаяСтрока = ЭлементПоиска;
	//	Элементы.Список.Отображение = ОтображениеТаблицы.Список;

		СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Элементы.ЭлементПоиска.СписокВыбора, ЭлементПоиска);
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ИсторияПоискаНоменклатуры", , Элементы.ЭлементПоиска.СписокВыбора.ВыгрузитьЗначения());

	КонецЕсли;

	Элементы.Список.Обновить();

КонецПроцедуры

#КонецОбласти

//	LNK 06.11.2016 12:11:20
&НаКлиенте
Процедура ОтборТорговаяМаркаИспользованиеПриИзменении(Элемент)

	ОтборПриИзменении("ОтборТорговаяМарка", Истина);

КонецПроцедуры

//	LNK 06.11.2016 11:44:28
&НаКлиенте
Процедура ОтборТорговаяМаркаПриИзменении(Элемент)

	ОтборПриИзменении("ОтборТорговаяМарка");

КонецПроцедуры

//	LNK 06.11.2016 12:11:20
&НаКлиенте
Процедура ОтборВидНоменклатурыИспользованиеПриИзменении(Элемент)

	ОтборПриИзменении("ОтборВидНоменклатуры", Истина);

КонецПроцедуры

//	LNK 06.11.2016 11:44:28
&НаКлиенте
Процедура ОтборВидНоменклатурыПриИзменении(Элемент)

	ОтборПриИзменении("ОтборВидНоменклатуры");

КонецПроцедуры

//	LNK 06.11.2016 12:11:20
&НаКлиенте
Процедура ОтборПроизводительИспользованиеПриИзменении(Элемент)

	ОтборПриИзменении("ОтборПроизводитель", Истина);

КонецПроцедуры

//	LNK 06.11.2016 11:44:28
&НаКлиенте
Процедура ОтборПроизводительПриИзменении(Элемент)

	ОтборПриИзменении("ОтборПроизводитель");

КонецПроцедуры

&НаКлиенте
Процедура ОтборПриИзменении(ИмяОтбора, ПереключательИспользование = Ложь)

	ЗначениеОтбора = ЭтотОбъект[ИмяОтбора];

	Если НЕ ПереключательИспользование Тогда

		ЭтотОбъект[ИмяОтбора + "Использование"] = ЗначениеЗаполнено(ЗначениеОтбора);

	КонецЕсли;

	Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда

		СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Элементы[ИмяОтбора].СписокВыбора, ЗначениеОтбора);

	КонецЕсли;

	ГруппаОтбора = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.Отбор.Элементы,
		"ОтборыДополнительныеРеквизиты",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ
	);

	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"ТорговаяМарка",
		ОтборТорговаяМарка,
		ОтборТорговаяМаркаИспользование, ВидСравненияКомпоновкиДанных.Равно
	);
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"ВидНоменклатуры",
		ОтборВидНоменклатуры,
		ОтборВидНоменклатурыИспользование, ВидСравненияКомпоновкиДанных.Равно
	);
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"Производитель",
		ОтборПроизводитель,
		ОтборПроизводительИспользование, ВидСравненияКомпоновкиДанных.Равно
	);

	Если ОтборТорговаяМаркаИспользование ИЛИ ОтборВидНоменклатурыИспользование ИЛИ ОтборПроизводительИспользование Тогда

		Элементы.Список.Отображение = ОтображениеТаблицы.Список;

		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ИсторияОтборТорговаяМарка", , Элементы.ОтборТорговаяМарка.СписокВыбора.ВыгрузитьЗначения());
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ИсторияОтборВидНоменклатуры"   , , Элементы.ОтборВидНоменклатуры.СписокВыбора.ВыгрузитьЗначения());
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ИсторияОтборПроизводитель"  , , Элементы.ОтборПроизводитель.СписокВыбора.ВыгрузитьЗначения());

	КонецЕсли;

КонецПроцедуры

//	LNK 06.11.2016 10:10:47
&НаКлиенте
Процедура СписокПриАктивизацииЯчейки(Элемент)


КонецПроцедуры

//	LNK 29.09.2017 09:57:09
&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)


КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ 

//Процедура - обработчик команды "ИзменитьВыделенные"
//
&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

//Процедура - обработчик команды "ПоискПоШтрихкоду"
//
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	Если ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекШтрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекШтрихкод);
				
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область МеханизмВнешнегоОборудования

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) 
	
	СтруктураДействий = Новый Структура;
	СтруктураПараметровДействия = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаТоваров", СтруктураПараметровДействия);
	
	Возврат ПодключаемоеОборудованиеРТ.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции	

&НаСервере
Функция ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента) Экспорт
	
	Если НЕ СтруктураПараметров.НеизвестныеДанныеПО Тогда
		
		Если СтруктураПараметров.Действие = "ПроверкаТоваров" Тогда
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
								
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
								
				ГруппаОтбора = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
					Список.Отбор.Элементы,
					"ПоискПоПодстроке",
					ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ
					);
									
				ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
					ГруппаОтбора,
					"Ссылка",
					Неопределено,
					Ложь, 
					ВидСравненияКомпоновкиДанных.ВСписке
					);					

				Элементы.Список.ТекущаяСтрока = СтруктураПараметров.ЗначенияПоиска[0].Номенклатура; 
				
			КонецЕсли;				
			
		ИначеЕсли СтруктураПараметров.Действие = "РегистрацияНовойНоменклатуры" Тогда
			
			СтруктураПараметровРегистрацияНовойНоменклатуры = Новый Структура;
			ТекстВопроса = НСтр("ru = 'Создать новую позицию товара с штрихкодом %1?'");
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, СтруктураПараметров.Штрихкод);
			СтруктураПараметровРегистрацияНовойНоменклатуры.Вставить("ТекстВопроса", ТекстВопроса);
			СтруктураПараметровКлиента.Вставить("РегистрацияНовойНоменклатуры", СтруктураПараметровРегистрацияНовойНоменклатуры);
			СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");		
						
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураПараметровКлиента;
	
КонецФункции

// Обработка магнитного или штрихового кода на клиенте
//
// Параметры
//  СтруктураПараметровКлиента - структура параметров
//
&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод)
	
	Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") 
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
		
		СтрокаСообщения = НСтр("ru = 'Данные по коду не найдены: %1%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекКод);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
						
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ТекстПредупреждения") Тогда
		
		ПоказатьПредупреждение(, СтруктураПараметровКлиента.ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьДополнительныеКолонкиНоменклатуры()

	Элементы.Код.Видимость = ДополнительныеКолонкиНоменклатуры = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код 
							ИЛИ ДополнительныеКолонкиНоменклатуры = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.КодАртикул;
	Элементы.Артикул.Видимость = ДополнительныеКолонкиНоменклатуры = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул
							ИЛИ ДополнительныеКолонкиНоменклатуры = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.КодАртикул;

КонецПроцедуры

//	LNK 13.11.2016 11:32:18
&НаКлиенте
Процедура УстановитьОформлениеЭлементов()

	НужныйЭлемент = Элементы.ФормаПоказыватьТолькоСОстатками;

	Если Список.Параметры.Элементы.Найти("ПоказыватьТолькоСОстатками").Значение Тогда

		НужныйЭлемент.Картинка  = БиблиотекаКартинок.ПоказатьТоварыСОстатками;

	Иначе

		НужныйЭлемент.Картинка  = БиблиотекаКартинок.ПоказатьТоварыВсе;

	КонецЕсли;

//	---------------------------------------------------------------------------------------

	НужныйЭлемент = Элементы.ФормаПоказыватьБлокированные;

	Если Список.Параметры.Элементы.Найти("ПоказыватьБлокированные").Значение Тогда

		НужныйЭлемент.Картинка  = БиблиотекаКартинок.ЗнакСтоп;

	Иначе

		НужныйЭлемент.Картинка  = БиблиотекаКартинок.ЗнакСтопЧБ;

	КонецЕсли;

КонецПроцедуры

//	LNK 07.11.2016 16:11:09
&НаКлиенте
Процедура УстановитьПорядок(Имя)

	Для каждого ЭлементПорядка Из Список.Порядок.Элементы Цикл


	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПорядокПоКоду(Команда)

	УстановитьПорядок("Код");

КонецПроцедуры

&НаКлиенте
Процедура ПорядокПоАртикулу(Команда)

	УстановитьПорядок("Артикул");

КонецПроцедуры

&НаКлиенте
Процедура ПорядокПоНаименованию(Команда)

	УстановитьПорядок("Наименование");

КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРабочегоМеста(РабочееМестоКлиента)

//	LNK 08.11.2016 11:16:00 - ВРЕМЕННО! Необходимо обеспечить приявязку ВСЕХ рабочих мест к Магазину!
	ЗаполнениеОбъектовСобытия.ПроверитьЗаполнениеТекущегоРабочегоМеста(РабочееМестоКлиента);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПроизводительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ОтборВидНоменклатуры) тогда
		СписокКонтрагентов = ПолучитьСписокКонтрагентовНаСервере(ОтборВидНоменклатуры);
		Если НЕ СписокКонтрагентов = Неопределено тогда
			СтандартнаяОбработка=Ложь;    
			СтруктураПараметров = Новый Структура("СписокКонтрагентов", СписокКонтрагентов);
			ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", СтруктураПараметров, Элемент);
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Функция  ПолучитьСписокКонтрагентовНаСервере(ВидНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Производитель КАК Контрагент
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоГруппа = ЛОЖЬ
		|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
		|	И Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура.Производитель";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		СписокКонтрагентов = Новый СписокЗначений;
		Пока Выборка.Следующий() цикл
			СписокКонтрагентов.Добавить(Выборка.Контрагент);
		КонецЦикла;
		Возврат СписокКонтрагентов;
	КонецЕсли;
	
КонецФункции

&НаСервере	//	LNK 29.12.2017 09:42:51
Процедура УстановитьПараметрыИсточникаДанных(ЗначениеТолькоСОстатками = Неопределено, ЗначениеБлокированные = Неопределено)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Магазин = &ТекущийМагазин"
	);
	Запрос.УстановитьПараметр("ТекущийМагазин", ПараметрыСеанса.ТекущийМагазин);

	Список.Параметры.УстановитьЗначениеПараметра("Склады" , Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Список.Параметры.УстановитьЗначениеПараметра("Магазин", ПараметрыСеанса.ТекущийМагазин);

	Список.Параметры.УстановитьЗначениеПараметра("ПоказыватьТолькоСОстатками", ?(ЗначениеТолькоСОстатками = Неопределено, Ложь, ЗначениеТолькоСОстатками));
	Список.Параметры.УстановитьЗначениеПараметра("ПоказыватьБлокированные"   , ?(ЗначениеБлокированные = Неопределено, Ложь, ЗначениеБлокированные));

КонецПроцедуры





