#Область ОбработчикиСобытийОбъекта

Процедура ПередЗаписью(Отказ, Замещение)

	Если ОбменДанными.Загрузка ИЛИ НЕ ПроведениеСервер.РассчитыватьИзменения(ДополнительныеСвойства) Тогда

		Возврат;

	КонецЕсли;

	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	БлокироватьДляИзменения = Истина;

//	Текущее состояние набора помещается во временную таблицу "ДвиженияТоварыЗастрахованныеПередЗаписью",
//	чтобы при записи получить изменение нового набора относительно текущего.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаРегистра.Номенклатура КАК Номенклатура,
	|	ТаблицаРегистра.ДокументПродажи КАК ДокументПродажи,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА ТаблицаРегистра.Количество
	|		ИНАЧЕ -ТаблицаРегистра.Количество
	|	КОНЕЦ КАК КоличествоПередЗаписью
	|ПОМЕСТИТЬ ДвиженияТоварыЗастрахованныеПередЗаписью
	|ИЗ
	|	РегистрНакопления.ТоварыЗастрахованные КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Регистратор = &Регистратор
	|	И НЕ &ЭтоНовый"
	);
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("ЭтоНовый"   , ДополнительныеСвойства.ЭтоНовый);
	Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;

	Запрос.Выполнить();

КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение)

	Если ОбменДанными.Загрузка ИЛИ НЕ ПроведениеСервер.РассчитыватьИзменения(ДополнительныеСвойства) Тогда

		Возврат;

	КонецЕсли;

	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;

//	Рассчитывается изменение нового набора относительно текущего с учетом накопленных изменений
//	и помещается во временную таблицу.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаИзменений.Номенклатура КАК Номенклатура,
	|	ТаблицаИзменений.ДокументПродажи КАК ДокументПродажи,
	|	СУММА(ТаблицаИзменений.КоличествоИзменение) КАК КоличествоИзменение
	|ПОМЕСТИТЬ ДвиженияТоварыЗастрахованныеИзменение
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.Номенклатура КАК Номенклатура,
	|		Таблица.ДокументПродажи КАК ДокументПродажи,
	|		Таблица.КоличествоПередЗаписью КАК КоличествоИзменение
	|	ИЗ
	|		ДвиженияТоварыЗастрахованныеПередЗаписью КАК Таблица
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Номенклатура,
	|		Таблица.ДокументПродажи,
	|		ВЫБОР
	|			КОГДА Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -Таблица.Количество
	|			ИНАЧЕ Таблица.Количество
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ТоварыЗастрахованные КАК Таблица
	|	ГДЕ
	|		Таблица.Регистратор = &Регистратор) КАК ТаблицаИзменений
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИзменений.Номенклатура,
	|	ТаблицаИзменений.ДокументПродажи
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаИзменений.КоличествоИзменение) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДвиженияТоварыЗастрахованныеПередЗаписью"
//	по Количество к не правильному состоянию регистра приведет уменьшение прихода и увеличение расхода
	);
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;

	Выборка = Запрос.ВыполнитьПакет()[0].Выбрать();
	Выборка.Следующий();
	
//	Добавляется информация о ее существовании и наличии в ней записей об изменении.
	СтруктураВременныеТаблицы.Вставить("ДвиженияТоварыЗастрахованныеИзменение", Выборка.Количество > 0);

КонецПроцедуры
	
#КонецОбласти
