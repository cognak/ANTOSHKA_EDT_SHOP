#Область ОбработчикиПроцедурСервиса

//	LNK 18.10.2017 09:08:11
//	Отправить SMS через провайдера, возможно, это код подверждения
Функция SendSMS(Type, PhoneNumber, Знач Message, IsConfirmation, SendersData)

	УстановитьПривилегированныйРежим(Истина);
	
	Возврат СервисыСервер.SendSMS(Type, PhoneNumber, Message, IsConfirmation, SendersData);
	
КонецФункции

//	LNK 19.10.2017 10:33:25
Функция GetConfirmation(PhoneNumber)

	УстановитьПривилегированныйРежим(Истина);
	
	Возврат СервисыСервер.GetConfirmation(PhoneNumber);

КонецФункции

//	LNK 17.02.2020 14:34:35
Функция GetGiftCertificateCode(СерийныйНомер, Период)

	УстановитьПривилегированныйРежим(Истина);

	ДанныеСертификата = ПодарочныеСертификатыСервер.ПолучитьСостояниеПодарочногоСертификатаКод(СерийныйНомер, Ложь, Период);

	Возврат ОбщегоНазначенияКлиентСервер.СериализоватьJSON(ДанныеСертификата);

КонецФункции

//	LNK 24.02.2020 11:22:25
Функция GetGiftCertificateKey(КлючНомера, Период)

	УстановитьПривилегированныйРежим(Истина);

	ДанныеСертификата = ПодарочныеСертификатыСервер.ПолучитьСостояниеПодарочногоСертификатаКлюч(КлючНомера, Ложь, Период);

	Возврат ОбщегоНазначенияКлиентСервер.СериализоватьJSON(ДанныеСертификата);

КонецФункции

#Область ПоддержкаФункционалаРеализацииЗаказовПокупатиелей

//	LNK 14.07.2022 10:54:04
Функция OrderSaleControl(DataString)

	УстановитьПривилегированныйРежим(Истина);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));

	ДанныеЗапроса = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(DataString);
	ДанныеЗапроса.Вставить("Отправитель", ОбменДаннымиПовтИсп.НайтиУзелПланаОбменаПоКоду("ПоМагазину", ДанныеЗапроса.Код));

	ДанныеОтвета  = Новый Структура(
		"Код, Магазин, ТаблицаОбъектов, ТаблицаПринято, Ошибка, ТекстОшибки"
		, ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Код
		, ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин
		, РегистрыСведений.РеализацияЗаказовПокупателей.СтруктураТаблицыОбъектов()
		, РегистрыСведений.РеализацияЗаказовПокупателей.СтруктураТаблицыОбъектов(Истина)
		, Ложь
		, ""
	);

	Если ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().ВидУзла = Перечисления.ВидыУзлов.ЦентральныйОфис Тогда

		ТекстОшибки = "";

		Попытка

			OrderSaleControl_Приём(ДанныеЗапроса, ДанныеОтвета, ЗаписьJSON, ТекстОшибки);
			OrderSaleControl_Передача(ДанныеЗапроса, ДанныеОтвета, ЗаписьJSON, ТекстОшибки);

		Исключение

			ДанныеОтвета.Ошибка		 = Истина;
			ДанныеОтвета.ТекстОшибки = ОписаниеОшибки()
				+ ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
				+ ТекстОшибки
			;

		КонецПопытки;

	Иначе

		ДанныеОтвета.Ошибка		 = Истина;
		ДанныеОтвета.ТекстОшибки = "Тип узла не соответствует ожидаемому!";

	КонецЕсли;

//	---------------------------------------------------------------------------------------

	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, ДанныеОтвета, НазначениеТипаXML.Явное);

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

//	LNK 22.07.2022 12:31:39
Процедура OrderSaleControl_Приём(ДанныеЗапроса, ДанныеОтвета, ЗаписьJSON, ТекстОшибки)

//	исключаем текущий узел и узел-отправитель
	МагазиныИсключить = Новый Соответствие;
	МагазиныИсключить.Вставить(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин, Истина);
	МагазиныИсключить.Вставить(ДанныеЗапроса.Магазин, Истина);

	Для каждого СтрокаТаблицы Из ДанныеЗапроса.ТаблицаОбъектов Цикл

		НаборЗаписей = СтрокаТаблицы.Данные;
		#Если Клиент Тогда
		//НаборЗаписей = РегистрыСведений.РеализацияЗаказовПокупателей.СоздатьНаборЗаписей();
		#КонецЕсли
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		НаборЗаписей.ОбменДанными.Загрузка	  = Истина;
		НаборЗаписей.ОбменДанными.Отправитель = ДанныеЗапроса.Отправитель;

		НачатьТранзакцию();

		Попытка

			НаборЗаписей.Записать();

			РегистрыСведений.РеализацияЗаказовРегистрация.ЗарегистрироватьОформление(
				  НаборЗаписей.Отбор.Регистратор.Значение
				, НаборЗаписей.Количество() = 0
				, МагазиныИсключить
			);

			ЗафиксироватьТранзакцию();

		//	это подтверждение получения, которое в "источнике" запроса будет очищено
			СтрокаПринято = ДанныеОтвета.ТаблицаПринято.Добавить();
			СтрокаПринято.Объект  = СтрокаТаблицы.Объект;
			СтрокаПринято.Магазин = СтрокаТаблицы.Магазин;

		Исключение

		//	В "ДанныеОтвета" эту ошибку не фиксируем - просто такая запись не будет отмечена полученной.
			ТекстОшибки = ТекстОшибки
				+ ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
				+ ОписаниеОшибки()
			;
			ОтменитьТранзакцию();

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

//	LNK 22.07.2022 12:40:31
Процедура OrderSaleControl_Передача(ДанныеЗапроса, ДанныеОтвета, ЗаписьJSON, ТекстОшибки)

//	LNK 25.07.2022 15:02:34
	РегистрыСведений.РеализацияЗаказовРегистрация.ПринятьПодтверждениеПринятыхДанных(ДанныеЗапроса);

//	---------------------------------------------------------------------------------------

	Запрос = Новый Запрос(СтрЗаменить(
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	ТаблицаНазначений.Объект КАК Объект,
	|	ТаблицаНазначений.Магазин КАК Магазин,
	|	ТаблицаНазначений.ДатаИзменения КАК КлючПорядка
	|ИЗ
	|	РегистрСведений.РеализацияЗаказовРегистрация КАК ТаблицаНазначений
	|ГДЕ
	|	НЕ ТаблицаНазначений.Выполнен
	|	И ТаблицаНазначений.ДействиеКоманда = ""ПРОДАЖА_ПО_ЗАКАЗУ""
	|	И ТаблицаНазначений.Магазин = &Магазин
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка,
	|	Объект"
	, "ПЕРВЫЕ 100", "ПЕРВЫЕ " + Формат(ОбменДаннымиПовтИсп.ПолучитьРазмерПакетаВыгрузки("WEB.OrderSaleControl"), "ЧГ="))
	);
	Запрос.УстановитьПараметр("Магазин", ДанныеЗапроса.Магазин);
	
	ВыборкаИзменений = Запрос.Выполнить().Выбрать();

	Пока ВыборкаИзменений.Следующий() Цикл

		Попытка

			НаборЗаписей = РегистрыСведений.РеализацияЗаказовПокупателей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаИзменений.Объект);
			НаборЗаписей.Прочитать();

			СтрокаТаблицы = ДанныеОтвета.ТаблицаОбъектов.Добавить();
			СтрокаТаблицы.Объект  = ВыборкаИзменений.Объект;
			СтрокаТаблицы.Магазин = ВыборкаИзменений.Магазин;
			СтрокаТаблицы.Данные  = НаборЗаписей;

		Исключение

		//	В "ДанныеОтвета" эту ошибку не фиксируем - просто такая запись не будет передана в текущем сеансе.
			ТекстОшибки = ТекстОшибки
				+ ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
				+ ОписаниеОшибки()
			;
			ОтменитьТранзакцию();

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

//	LNK 20.11.2017 16:56:05
Функция SaveDokum(DataString)

	УстановитьПривилегированныйРежим(Истина);

	ТаблицаОбъектов = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(DataString);
	ТаблицаОбъектов.Колонки.Добавить("Выполнено", Новый ОписаниеТипов("Булево"));
	ТаблицаОбъектов.Колонки.Добавить("Сообщение", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(524)));

//	Таблица ответа вызывающему процессу - список обработанных ссылок.
	ТаблицаСсылок = Новый ТаблицаЗначений;
	ТаблицаСсылок.Колонки.Добавить("Объект"   , Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя, ДокументСсылка.ЧекККМ, ДокументСсылка.НачислениеИСписаниеБонусныхБаллов, СправочникСсылка.СерийныеНомера"));
	ТаблицаСсылок.Колонки.Добавить("Результат", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	ТаблицаСсылок.Индексы.Добавить("Объект");
	ТаблицаСсылок.Колонки.Добавить("Сообщение", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(524)));

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаОбъектов.Индекс КАК ЧИСЛО) КАК Индекс,
	|	ТаблицаОбъектов.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(ТаблицаОбъектов.Команда КАК СТРОКА(50)) КАК Команда
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.Индекс КАК Индекс
	|ИЗ
	|	Источник КАК Источник
	|ГДЕ
	|	Источник.Команда = ""записать_обязательно""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Источник.Индекс
	|ИЗ
	|	Источник КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ТаблицаДокумент
	|		ПО Источник.Ссылка = ТаблицаДокумент.Ссылка
	|ГДЕ
	|	Источник.Команда = ""записать_только_новый""
	|	И Источник.Ссылка ССЫЛКА Документ.ЗаказПокупателя
	|	И ТаблицаДокумент.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Источник.Индекс
	|ИЗ
	|	Источник КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ТаблицаДокумент
	|		ПО Источник.Ссылка = ТаблицаДокумент.Ссылка
	|ГДЕ
	|	Источник.Команда = ""записать_только_новый""
	|	И Источник.Ссылка ССЫЛКА Документ.ЧекККМ
	|	И ТаблицаДокумент.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Источник.Индекс
	|ИЗ
	|	Источник КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерийныеНомера КАК ТаблицаСправочник
	|		ПО Источник.Ссылка = ТаблицаСправочник.Ссылка
	|ГДЕ
	|	Источник.Команда = ""записать_только_новый""
	|	И Источник.Ссылка ССЫЛКА Справочник.СерийныеНомера
	|	И ТаблицаСправочник.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Источник.Индекс
	|ИЗ
	|	Источник КАК Источник
	|ГДЕ
	|	Источник.Команда = ""записать_набор_записей""
	|
	|УПОРЯДОЧИТЬ ПО
	|	Индекс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	);
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);
	
	ВыборкаКонтрольная = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаКонтрольная.Следующий() Цикл

		СтрокаТаблицы = ТаблицаОбъектов[ВыборкаКонтрольная.Индекс];

		ДанныеОбъект = СтрокаТаблицы.Объект;
		ДанныеОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов"	, Истина);
		ДанныеОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииMicrosoftDynamics", Истина);
		ДанныеОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"	, Истина);
		ДанныеОбъект.ДополнительныеСвойства.Вставить("ДвиженияРасширеннойАналитикиПродаж"
			, ТипЗнч(ДанныеОбъект) = Тип("ДокументОбъект.ЧекККМ") ИЛИ ТипЗнч(ДанныеОбъект) = Тип("ДокументОбъект.ЗаказПокупателя"));
		ДанныеОбъект.ДополнительныеСвойства.Вставить("Авторство", Новый Структура(
				"Автор, УзелСоздания"
				, СтрокаТаблицы.Автор
				, СтрокаТаблицы.УзелСоздания
			)
		);

		ДанныеОбъект.ОбменДанными.Загрузка = Истина;
		#Если Клиент Тогда
		//ДанныеОбъект = Документы.ЧекККМ.СоздатьДокумент();
		#КонецЕсли

		Попытка

			Если ДанныеОбъект.ДополнительныеСвойства.ДвиженияРасширеннойАналитикиПродаж = Истина Тогда

				ДанныеОбъект.Заблокировать();

			КонецЕсли;

			Если ТипЗнч(ДанныеОбъект) = Тип("ДокументОбъект.НачислениеИСписаниеБонусныхБаллов") Тогда

				ДанныеОбъект.ОбменДанными.Загрузка = Ложь;
				ДанныеОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);

			Иначе
				
			//	В данном контексте используем только запись! Без проведения.
				ДанныеОбъект.Записать();

			КонецЕсли;

			ТаблицаОбъектов[ВыборкаКонтрольная.Индекс].Выполнено = Истина;

		Исключение

			ТаблицаОбъектов[ВыборкаКонтрольная.Индекс].Сообщение = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("SaveDokum", УровеньЖурналаРегистрации.Ошибка
				, ДанныеОбъект.Метаданные()
				, ДанныеОбъект
				, ТаблицаОбъектов[ВыборкаКонтрольная.Индекс].Сообщение
				, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
			);

		КонецПопытки;

	КонецЦикла;

//	Начинаем процесс подготовки таблицы возвращаемых данных.

	Для каждого СтрокаОбъекта Из ТаблицаОбъектов Цикл

		Если ТаблицаСсылок.Найти(СтрокаОбъекта.Ссылка, "Объект") = Неопределено Тогда

			СтрокаСсылки = ТаблицаСсылок.Добавить();
			СтрокаСсылки.Объект    = СтрокаОбъекта.Ссылка;
			СтрокаСсылки.Результат = ?(СтрокаОбъекта.Выполнено, "выполнено", "пропущено");
			СтрокаСсылки.Сообщение = СтрокаОбъекта.Сообщение;

		КонецЕсли;

	КонецЦикла;

	Возврат ОбщегоНазначенияКлиентСервер.СериализоватьJSON(ТаблицаСсылок);

КонецФункции

//	LNK 17.04.2019 12:10:00
Функция GetRequestAvailability(КодУзла)

	ЗначениеВозврата = "";

	Если НЕ ПустаяСтрока(КодУзла) Тогда

		УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаУзлы.Ссылка КАК Узел
		|ИЗ
		|	ПланОбмена.ПоМагазину КАК ТаблицаУзлы
		|ГДЕ
		|	ТаблицаУзлы.Код = &КодУзла"
		);
		Запрос.УстановитьПараметр("КодУзла", КодУзла);
		
		Запрос.УстановитьПараметр("СписокУзлов", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Узел"));

		Если НЕ Запрос.Параметры.СписокУзлов.Количество() = 0 Тогда

			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаИзменений.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ЗапросДоступностиТоваров.Изменения КАК ТаблицаИзменений
			|ГДЕ
			|	ТаблицаИзменений.Узел В(&СписокУзлов)"
			;
			Результат = Запрос.Выполнить();

			Если НЕ Результат.Пустой() Тогда

				ТаблицаОбъектов = Новый ТаблицаЗначений;
				ТаблицаОбъектов.Колонки.Добавить("Индекс"  , Новый ОписаниеТипов("Число"));
				ТаблицаОбъектов.Колонки.Добавить("Объект"  , Новый ОписаниеТипов("ДокументОбъект.ЗапросДоступностиТоваров"));
				ТаблицаОбъектов.Колонки.Добавить("Движения", Новый ОписаниеТипов("Соответствие"));

				Индекс  = 0;
				Выборка = Результат.Выбрать();

				Пока Выборка.Следующий() Цикл

					СтрокаТаблицы = ТаблицаОбъектов.Добавить();
					СтрокаТаблицы.Индекс   = Индекс;
					СтрокаТаблицы.Объект   = Выборка.Ссылка.ПолучитьОбъект();
					СтрокаТаблицы.Движения = Новый Соответствие;

					Для каждого НаборЗаписей Из СтрокаТаблицы.Объект.Движения Цикл

						НаборЗаписей.Прочитать();
						СтрокаТаблицы.Движения.Вставить(НаборЗаписей.Метаданные().ПолноеИмя(), НаборЗаписей.Выгрузить());

					КонецЦикла;

					Индекс = Индекс + 1;

				КонецЦикла;

				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
				СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, Новый Структура("ТаблицаОбъектов", ТаблицаОбъектов), НазначениеТипаXML.Явное);

				ТаблицаОбъектов  = Неопределено;
				ЗначениеВозврата = ЗаписьJSON.Закрыть();

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции

//	LNK 10.03.2020 11:49:02
Функция GetTtransferData(UUID)

//	Передаём текстовое представление УИ запрашивающего перемещения
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаОснование.ДокументОснование КАК ПеремещениеОтправитель,
	|	ТаблицаРасход.Ссылка КАК РасходныйОрдер,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаСертификаты.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ТаблицаОснование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК ТаблицаРасход
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.Товары КАК ТаблицаТовары
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
	|				ПО ТаблицаТовары.Номенклатура = ТаблицаСправочник.Ссылка
	|					И (ТаблицаСправочник.ИспользоватьСерийныеНомера)
	|					И (ТаблицаСправочник.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|			ПО ТаблицаРасход.Ссылка = ТаблицаТовары.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.СерийныеНомера КАК ТаблицаСертификаты
	|			ПО (ТаблицаТовары.Ссылка = ТаблицаСертификаты.Ссылка)
	|		ПО ТаблицаОснование.ДокументОснование = ТаблицаРасход.ДокументОснование
	|ГДЕ
	|	ТаблицаОснование.ДокументОснование = &ПеремещениеПолучатель
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	);
	Запрос.УстановитьПараметр("ПеремещениеПолучатель", Документы.ПеремещениеТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(UUID)));
	
	Результат = Запрос.Выполнить();

	ДанныеОтвета = ПодарочныеСертификатыСервер.СтруктураРезультатаЗапроса(Результат, Истина);

	Если НЕ Результат.Пустой() Тогда

		Выборка = Результат.Выбрать();

		Пока Выборка.Следующий() Цикл

			СтрокаТаблицы = ДанныеОтвета.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);

		КонецЦикла;

	КонецЕсли;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, ДанныеОтвета, НазначениеТипаXML.Явное);

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

//	LNK 06.06.2019 13:39:23
Функция GetCheck(Number, Date)

	УстановитьПривилегированныйРежим(Истина);

	ДанныеОтвета = Новый Структура(
		"Документ, Ошибка, ТекстОшибки"
		, Документы.ЧекККМ.ПустаяСсылка()
		, Ложь
		, "");

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Магазин.НомерМагазина КАК МагазинНомерМагазина
	|ИЗ
	|	Документ.ЧекККМ КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Номер = &Number
	|	И ТаблицаДокумента.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Date, ДЕНЬ) И КОНЕЦПЕРИОДА(&Date, ДЕНЬ)
	|	И ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.СтатусЧекаККМ В (ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробитый), ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный))"
	);
	Запрос.УстановитьПараметр("Number", Number);
	Запрос.УстановитьПараметр("Date"  , Date);

	ДанныеВыборка = Запрос.Выполнить().Выбрать();
	
	Если ДанныеВыборка.Следующий() Тогда
		
		Если  ДанныеВыборка.МагазинНомерМагазина = 104 Тогда
			ДанныеОтвета.Ошибка = Истина;
			//А++ 20241110 по задаче  https://awdev.atlassian.net/browse/RETAIL1C-866
			ДанныеОтвета.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Чек № %1 от %2 относиться к интернет-продажам. 
                                                                                                    |Импорт запрещен!'; uk = 'Чек № %1 від %2 відноситься до інтернет-продажів. 
                                                                                                    |Імпорт заборонено!'"),Number,Формат(Date,"ДФ=dd.MM.yyyy; ДП='Нет даты'"));
		Иначе	
			ДанныеОтвета.Документ = ДанныеВыборка.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
	Иначе

		ДанныеОтвета.Ошибка = Истина;
		ДанныеОтвета.ТекстОшибки = "Документ № " + Number + " от " + Date + " НЕ ОБНАРУЖЕН!";

	КонецЕсли;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, ДанныеОтвета, НазначениеТипаXML.Явное);

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

//	LNK 02.08.2019 16:05:29
Функция GetBuyerFromCRMData(RequestData)

	УстановитьПривилегированныйРежим(Истина);

	СоставДанных = ОбменMicrosoftDynamicsСервер.ИнициализироватьСоставДанных();

	ДанныеКонтрагента = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(RequestData).Получить();

	Если Справочники.Контрагенты.КлючиПоискаУказаны(ДанныеКонтрагента) Тогда

		СоставДанных = Справочники.Контрагенты.НайтиКонтрагентаПоДаннымCRM(ДанныеКонтрагента, Истина);

		Если СоставДанных.Контрагент = Неопределено
		И ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДанныеКонтрагента, "РазрешеноСозданиеНового", Истина) = Истина Тогда

			Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

				СоставДанных = Справочники.Контрагенты.ПрименитьКонтрагентаПоДаннымCRM(ДанныеКонтрагента, СоставДанных, Истина, Ложь);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, СоставДанных, НазначениеТипаXML.Явное);

	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

//	LNK 12.08.2019 11:33:48
Функция Ping()

	Возврат Истина;

КонецФункции

//	LNK 18.08.2020 05:53:20
Функция PingExtended(НомерМагазина)

	УстановитьПривилегированныйРежим(Истина);

	ДанныеПроверки = Новый Структура("Начало", ТекущаяУниверсальнаяДатаВМиллисекундах());

	Запрос = Новый Запрос(СтрЗаменить(
	"ВЫБРАТЬ
	|	Магазины.СкладПродажи КАК Склад
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.НомерМагазина = &НомерМагазина
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 500
	|	ТаблицаРегистра.Номенклатура КАК Номенклатура,
	|	ТаблицаРегистра.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Склад В
	|				(ВЫБРАТЬ
	|					Фильтр.Склад
	|				ИЗ
	|					Фильтр)) КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.КоличествоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Фильтр"
	, " ПЕРВЫЕ 500", " ПЕРВЫЕ " + Формат(ОбщегоНазначенияКлиентСервер.RANDOM(700, 1000), "ЧГ="))
	);
	Запрос.УстановитьПараметр("НомерМагазина", НомерМагазина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеПроверки.Вставить("КонецЗапроса" , ТекущаяУниверсальнаяДатаВМиллисекундах());
	ДанныеПроверки.Вставить("РазмерЗапроса", Выборка.Количество());

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, ДанныеПроверки, НазначениеТипаXML.Явное);

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

#Область БлокМетодовПередачиЗаказовПокупателей

//	LNK 15.12.2017 10:02:50
Функция GetBuyersOrder(КодУзла)

	УстановитьПривилегированныйРежим(Истина);

	КонтекстПриложения.РегистрацияВыполненияWebСервиса("RetailPack", "GetBuyersOrder", КодУзла);

	ЗначениеВозврата = "";

	Если НЕ ПустаяСтрока(КодУзла) Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаУзлы.Ссылка КАК Узел
		|ИЗ
		|	ПланОбмена.ПоМагазину КАК ТаблицаУзлы
		|ГДЕ
		|	ТаблицаУзлы.Код = &КодУзла"
		);
		Запрос.УстановитьПараметр("КодУзла", КодУзла);
		
		Запрос.УстановитьПараметр("СписокУзлов", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Узел"));

		Если НЕ Запрос.Параметры.СписокУзлов.Количество() = 0 Тогда

			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаИзменений.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ЗаказПокупателя.Изменения КАК ТаблицаИзменений
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ТаблицаДокумента
			|		ПО ТаблицаИзменений.Ссылка = ТаблицаДокумента.Ссылка
			|ГДЕ
			|	ТаблицаИзменений.Узел В(&СписокУзлов)
			|	И ТаблицаДокумента.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ) И КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)"
			;
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());

			Результат = Запрос.Выполнить();

			Если НЕ Результат.Пустой() Тогда

				ТаблицаОбъектов = Новый ТаблицаЗначений;
				ТаблицаОбъектов.Колонки.Добавить("Индекс"  , Новый ОписаниеТипов("Число"));
				ТаблицаОбъектов.Колонки.Добавить("Объект"  , Новый ОписаниеТипов("ДокументОбъект.ЗаказПокупателя"));
				ТаблицаОбъектов.Колонки.Добавить("Движения", Новый ОписаниеТипов("Соответствие"));
			//	Некоторые попутные ссылочные объекты, например, Контрагент. Они будут записаны, если отсутствуют в БД-приёнике.
				ТаблицаСвязей = Новый ТаблицаЗначений;
				ТаблицаСвязей.Колонки.Добавить("Объект");
				ТаблицаСвязей.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка"));

				СписокИменСвязи = ОбщегоНазначенияКлиентСервер.lx_FillValueList(, "Контрагент, ВладелецДисконтнойКарты, ДисконтнаяКарта",, ",");

				Индекс  = 0;
				Выборка = Результат.Выбрать();

				Пока Выборка.Следующий() Цикл

					СтрокаТаблицы = ТаблицаОбъектов.Добавить();
					СтрокаТаблицы.Индекс   = Индекс;
					СтрокаТаблицы.Объект   = Выборка.Ссылка.ПолучитьОбъект();
					СтрокаТаблицы.Движения = Новый Соответствие;

					Для каждого НаборЗаписей Из СтрокаТаблицы.Объект.Движения Цикл

						НаборЗаписей.Прочитать();
						СтрокаТаблицы.Движения.Вставить(НаборЗаписей.Метаданные().ПолноеИмя(), НаборЗаписей.Выгрузить());

					КонецЦикла;

					УстановитьСвязанныеОбъекты(СписокИменСвязи, СтрокаТаблицы.Объект, ТаблицаСвязей);

					Индекс = Индекс + 1;

				КонецЦикла;

				ТаблицаСвязей.Свернуть("Объект, ПолноеИмя");

				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
				СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, Новый Структура("ТаблицаОбъектов, ТаблицаСвязей", ТаблицаОбъектов, ТаблицаСвязей), НазначениеТипаXML.Явное);

				ТаблицаОбъектов  = Неопределено;
				ЗначениеВозврата = ЗаписьJSON.Закрыть();

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции

//	LNK 15.12.2017 11:58:25
Процедура УстановитьСвязанныеОбъекты(СписокИмен, Объект, ТаблицаСвязей)

	Для каждого Имя Из СписокИмен Цикл

		Если НЕ (Объект[Имя] = Неопределено ИЛИ Объект[Имя].Пустая()) Тогда

			ОбъектРеквизита = Объект[Имя].ПолучитьОбъект();

			Если НЕ ОбъектРеквизита = Неопределено Тогда

				СтрокаСвязи = ТаблицаСвязей.Добавить();
				СтрокаСвязи.Объект    = ОбъектРеквизита;
				СтрокаСвязи.ПолноеИмя = ОбъектРеквизита.Метаданные().ПолноеИмя();

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

//	LNK 15.12.2017 14:48:21
Функция DeleteChangeRegistrations(КодУзла, СтрокаДанных)

	Если НЕ ПустаяСтрока(КодУзла) Тогда

		УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаУзлы.Ссылка КАК Узел
		|ИЗ
		|	ПланОбмена.ПоМагазину КАК ТаблицаУзлы
		|ГДЕ
		|	ТаблицаУзлы.Код = &КодУзла"
		);
		Запрос.УстановитьПараметр("КодУзла", КодУзла);

		СписокУзлов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Узел");

		Если НЕ СписокУзлов.Количество() = 0 Тогда

			ЧтениеJSON = Новый ЧтениеJSON;	//	пытаемся получить таблицу обработанных ссылок.
			ЧтениеJSON.УстановитьСтроку(СтрокаДанных);

			ТаблицаСсылок = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();

			Для каждого СтрокаСсылки Из ТаблицаСсылок Цикл

				ПланыОбмена.УдалитьРегистрациюИзменений(СписокУзлов, СтрокаСсылки.Ссылка);

				Если СтрокаСсылки.ЕстьДвижения Тогда

					ДокументОбъект = СтрокаСсылки.Ссылка.ПолучитьОбъект();

					Для каждого НаборЗаписей Из ДокументОбъект.Движения Цикл

						ПланыОбмена.УдалитьРегистрациюИзменений(СписокУзлов, НаборЗаписей);

					КонецЦикла;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Возврат Истина;

КонецФункции

//	LNK 20.03.2018 10:27:18
Функция GetExternalData(IDN, TypeName, StoreNumber)

	УстановитьПривилегированныйРежим(Истина);

	Если TypeName = "Контрагент" Тогда

		СтруктураДанных = СервисыСервер.ПолучитьИнформациюОКонтрагенте(IDN, StoreNumber);

	Иначе

		СтруктураДанных = СервисыСервер.ПолучитьИнформациюОНоменклатуре(IDN, StoreNumber, Ложь);

	КонецЕсли;

	Возврат ОбщегоНазначенияКлиентСервер.СериализоватьJSON(СтруктураДанных);

КонецФункции

//	LNK 25.10.2018 10:01:27
Функция PerformAction(Command, RequestData)

	УстановитьПривилегированныйРежим(Истина);

	ДанныеОтвета = Новый Структура("Команда, Атрибуты", Command, Новый Структура);

	Если Command = "GetObjectInfo" Тогда

		СсылкаНаОбъект = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(RequestData);

		Если НЕ ОбщегоНазначенияКлиентСервер.СсылкаПустая(СсылкаНаОбъект) Тогда

			ДанныеОтвета.Вставить("Объект", СсылкаНаОбъект.ПолучитьОбъект());

			Если НЕ ДанныеОтвета.Объект = Неопределено Тогда

				ИменаРеквизиты = Новый Массив;
				ИменаРеквизиты.Добавить("СтандартныеРеквизиты");
				ИменаРеквизиты.Добавить("Реквизиты");

				Для каждого ИмяРеквизиты Из ИменаРеквизиты Цикл

					Для каждого МетаРеквизит Из ДанныеОтвета.Объект.Метаданные()[ИмяРеквизиты] Цикл

						Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ДанныеОтвета.Объект[МетаРеквизит.Имя], Истина) Тогда
							
							Если ЗначениеЗаполнено(ДанныеОтвета.Объект[МетаРеквизит.Имя]) Тогда

								Значение = ДанныеОтвета.Объект[МетаРеквизит.Имя].ПолучитьОбъект();

							Иначе

								Значение = Неопределено;

							КонецЕсли;

						Иначе	Значение = ДанныеОтвета.Объект[МетаРеквизит.Имя];
						
						КонецЕсли;

						ДанныеОтвета.Атрибуты.Вставить(МетаРеквизит.Имя, Значение);

					КонецЦикла;

				КонецЦикла;

				ДанныеОтвета.Атрибуты.Вставить("ТабличныеЧасти", Новый Структура);

				Для каждого МетаТабличнаяЧасть Из ДанныеОтвета.Объект.Метаданные().ТабличныеЧасти Цикл

					ДанныеОтвета.Атрибуты.ТабличныеЧасти.Вставить(МетаТабличнаяЧасть.Имя, Новый ТаблицаЗначений);

					Для каждого МетаРеквизит Из МетаТабличнаяЧасть.Реквизиты Цикл

						ДанныеОтвета.Атрибуты.ТабличныеЧасти[МетаТабличнаяЧасть.Имя].Колонки.Добавить(МетаРеквизит.Имя);

					КонецЦикла;

					Для каждого СтрокаТабличнойЧасти Из ДанныеОтвета.Объект[МетаТабличнаяЧасть.Имя] Цикл

						СтрокаТаблицы = ДанныеОтвета.Атрибуты.ТабличныеЧасти[МетаТабличнаяЧасть.Имя].Добавить();

						Для каждого МетаРеквизит Из МетаТабличнаяЧасть.Реквизиты Цикл

							Если ОбщегоНазначения.ЗначениеСсылочногоТипа(СтрокаТабличнойЧасти[МетаРеквизит.Имя], Истина) Тогда
								
								Если ЗначениеЗаполнено(СтрокаТабличнойЧасти[МетаРеквизит.Имя]) Тогда

									Значение = СтрокаТабличнойЧасти[МетаРеквизит.Имя].ПолучитьОбъект();

								Иначе

									Значение = Неопределено;

								КонецЕсли;

							Иначе	Значение = СтрокаТабличнойЧасти[МетаРеквизит.Имя];
							
							КонецЕсли;

							СтрокаТаблицы[МетаРеквизит.Имя] = Значение;

						КонецЦикла;

					КонецЦикла;

				КонецЦикла;

			КонецЕсли;

		Иначе

			ДанныеОтвета.Вставить("Объект", Неопределено);

		КонецЕсли;

	Иначе

	КонецЕсли;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, ДанныеОтвета, НазначениеТипаXML.Явное);

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

#КонецОбласти






