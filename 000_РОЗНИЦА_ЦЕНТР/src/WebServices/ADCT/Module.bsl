#Область ОбработчикиОперацийWebСервиса

//	LNK 23.02.2018 14:54:05
Функция Ping()

	Возврат Истина;

КонецФункции

//	LNK 07.03.2018 08:02:18
Функция PrepareRegisteredData(IDNode, ReceivedNumber, MetadataList)

	УстановитьПривилегированныйРежим(Истина);

	ДанныеОбмена = Новый Структура("УзелНайден, СписокОшибок", Ложь, Новый Массив);

	Попытка

		УзелПолучатель = ПланыОбмена.ПоУстройствамАнтошка.ПолучитьСсылку(Новый УникальныйИдентификатор(IDNode)).ПолучитьОбъект();

		Если НЕ УзелПолучатель = Неопределено Тогда

			ДанныеОбмена.УзелНайден = Истина;
			ДанныеОбмена.Вставить("НомерПринятого", ReceivedNumber);

			ПараметрыЗадания = Новый Массив;
			ПараметрыЗадания.Добавить(УзелПолучатель.Ссылка);
			ПараметрыЗадания.Добавить(ДанныеОбмена);
			ПараметрыЗадания.Добавить(MetadataList);

			ЗаданиеОбъект = ФоновыеЗадания.Выполнить(
				"ОбменДаннымиADCTСервер.ВыполнитьВыгрузкуДанныхВУзел",
				ПараметрыЗадания,
				"WEB_PrepareData_" + IDNode,
				"WEB. Подготовка данных"
			);

			ДанныеОбмена.Удалить("НомерПринятого");

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();
		ДанныеОбмена.СписокОшибок.Добавить(ТекстОшибки);

		ЗаписьЖурналаРегистрации("WEB.PrepareData", УровеньЖурналаРегистрации.Ошибка
			, Метаданные.ПланыОбмена.ПоУстройствамАнтошка,, ТекстОшибки);


	КонецПопытки;

	Возврат ОбщегоНазначенияКлиентСервер.СериализоватьJSON(ДанныеОбмена);

КонецФункции

//	LNK 07.03.2018 09:31:47
Функция GetRegisteredData(IDNode, ReceivedNumber, DataTime)

	УстановитьПривилегированныйРежим(Истина);

	ДанныеОбмена = Новый Структура("УзелНайден, ДанныеПриняты, СписокОшибок", Ложь, Ложь, Новый Массив);

	Попытка

		УзелПолучатель = ПланыОбмена.ПоУстройствамАнтошка.ПолучитьСсылку(Новый УникальныйИдентификатор(IDNode)).ПолучитьОбъект();

		Если НЕ УзелПолучатель = Неопределено Тогда

			ДанныеОбмена.УзелНайден = Истина;

			Если УзелПолучатель.НомерОтправленного >= ReceivedNumber Тогда	// И УзелПолучатель.ВремяПодготовки >= DataTime Тогда

				ДанныеОбмена.ДанныеПриняты = Истина;
				ДанныеОбмена.Вставить("Хранилище", УзелПолучатель.ПодготовленныеДанные);

			КонецЕсли;

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();
		ДанныеОбмена.СписокОшибок.Добавить(ТекстОшибки);

		ЗаписьЖурналаРегистрации("WEB.GetRegisteredData", УровеньЖурналаРегистрации.Ошибка
			, Метаданные.ПланыОбмена.ПоУстройствамАнтошка,, ТекстОшибки);

	КонецПопытки;

	Возврат ОбщегоНазначенияКлиентСервер.СериализоватьJSON(ДанныеОбмена);

КонецФункции

//	LNK 14.01.2019 11:55:13
Функция GetTableSelectionsGoods(IDNode, RequestData)

	УстановитьПривилегированныйРежим(Истина);

	ДанныеОбмена = Новый Структура("УзелНайден, ДанныеПриняты, СписокОшибок", Ложь, Ложь, Новый Массив);

	Попытка

		УзелПолучатель = ОбменДаннымиADCTСерверПовтИсп.ПолучитьУзелПоУстройствам(IDNode);

		Если НЕ УзелПолучатель = Неопределено Тогда

			ДанныеОбмена.УзелНайден = Истина;
			ДанныеОбмена.Вставить("ТаблицаОтборы", Новый ТаблицаЗначений);

			ДанныеЗапроса = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(RequestData);
			ДанныеУзла    = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла(УзелПолучатель);

			Если НЕ ДанныеЗапроса.Отборы.Количество() = 0 Тогда

				ЗапросСклады = Новый Запрос(
				"ВЫБРАТЬ
				|	ТаблицаСправочник.Ссылка КАК Склад
				|ИЗ
				|	Справочник.Склады КАК ТаблицаСправочник
				|ГДЕ
				|	ТаблицаСправочник.Магазин = &Магазин"
				);
				ЗапросСклады.УстановитьПараметр("Магазин", ДанныеУзла.Магазин);

				ПостроительЗапроса = Новый ПостроительЗапроса(
				"ВЫБРАТЬ
				|	Номенклатура.Родитель КАК Родитель
				|ПОМЕСТИТЬ Фильтр
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|ГДЕ
				|	Номенклатура.Код = &Код
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ 100
				|	ТаблицаВедущая.Код КАК Код,
				|	ТаблицаВедущая.НаименованиеПолное КАК Наименование,
				|	ЕСТЬNULL(ТаблицаВедущая.Родитель.Наименование, """") КАК ВидТовара,
				|	ТаблицаВедущая.Артикул КАК Артикул,
				|	ЕСТЬNULL(ТаблицаРазмер.Значение, """") КАК Размер,
				|	ЕСТЬNULL(ТаблицаСезон.Значение.Наименование, """") КАК Сезонность,
				|	ЕСТЬNULL(ТаблицаЦвет.Значение, """") КАК Цвет,
				|	ЕСТЬNULL(ТаблицаВозраст.Значение.Наименование, """") КАК Возраст,
				|	ЕСТЬNULL(ФильтрГендерность.Наименование, """") КАК Пол,
				|	ВЫБОР
				|		КОГДА ТаблицаВедущая.Марка = ЗНАЧЕНИЕ(Справочник.Марки.ПустаяСсылка)
				|				И ТаблицаМарки.Значение ЕСТЬ НЕ NULL 
				|			ТОГДА ЕСТЬNULL(ТаблицаМарки.Значение.Наименование, """")
				|		ИНАЧЕ ЕСТЬNULL(ТаблицаВедущая.Марка.Наименование, """")
				|	КОНЕЦ КАК ТорговаяМарка,
				|	ТаблицаВедущая.Ссылка КАК Номенклатура
				|ПОМЕСТИТЬ Данные
				|ИЗ
				|	Справочник.Номенклатура КАК ТаблицаВедущая
				|		{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ТаблицаРазмер
				|		ПО ТаблицаВедущая.Ссылка = ТаблицаРазмер.Ссылка
				|			И (ТаблицаРазмер.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.РазмерностьТовара))}
				|		{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ТаблицаСезон
				|		ПО ТаблицаВедущая.Ссылка = ТаблицаСезон.Ссылка
				|			И (ТаблицаСезон.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Сезонность))}
				|		{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ТаблицаМарки
				|		ПО ТаблицаВедущая.Ссылка = ТаблицаМарки.Ссылка
				|			И (ТаблицаМарки.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ТорговыеМарки))}
				|		{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ТаблицаЦвет
				|		ПО ТаблицаВедущая.Ссылка = ТаблицаЦвет.Ссылка
				|			И (ТаблицаЦвет.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Цвет))}
				|		{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ТаблицаВозраст
				|		ПО ТаблицаВедущая.Ссылка = ТаблицаВозраст.Ссылка
				|			И (ТаблицаВозраст.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ВозрастнойИнтервал))}
				|		{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ТаблицаПол
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|				ГендерноеНазначение.Ссылка КАК Ссылка,
				|				""Мужчина"" КАК Наименование
				|			ИЗ
				|				Перечисление.ГендерноеНазначение КАК ГендерноеНазначение
				|			ГДЕ
				|				ГендерноеНазначение.Ссылка = ЗНАЧЕНИЕ(Перечисление.ГендерноеНазначение.Мужчина)
				|			
				|			ОБЪЕДИНИТЬ
				|			
				|			ВЫБРАТЬ
				|				ГендерноеНазначение.Ссылка,
				|				""Женщина""
				|			ИЗ
				|				Перечисление.ГендерноеНазначение КАК ГендерноеНазначение
				|			ГДЕ
				|				ГендерноеНазначение.Ссылка = ЗНАЧЕНИЕ(Перечисление.ГендерноеНазначение.Женщина)
				|			
				|			ОБЪЕДИНИТЬ
				|			
				|			ВЫБРАТЬ
				|				ГендерноеНазначение.Ссылка,
				|				""Мальчик""
				|			ИЗ
				|				Перечисление.ГендерноеНазначение КАК ГендерноеНазначение
				|			ГДЕ
				|				ГендерноеНазначение.Ссылка = ЗНАЧЕНИЕ(Перечисление.ГендерноеНазначение.Мальчик)
				|			
				|			ОБЪЕДИНИТЬ
				|			
				|			ВЫБРАТЬ
				|				ГендерноеНазначение.Ссылка,
				|				""Девочка""
				|			ИЗ
				|				Перечисление.ГендерноеНазначение КАК ГендерноеНазначение
				|			ГДЕ
				|				ГендерноеНазначение.Ссылка = ЗНАЧЕНИЕ(Перечисление.ГендерноеНазначение.Девочка)
				|			
				|			ОБЪЕДИНИТЬ
				|			
				|			ВЫБРАТЬ
				|				ГендерноеНазначение.Ссылка,
				|				""Унисекс""
				|			ИЗ
				|				Перечисление.ГендерноеНазначение КАК ГендерноеНазначение
				|			ГДЕ
				|				ГендерноеНазначение.Ссылка = ЗНАЧЕНИЕ(Перечисление.ГендерноеНазначение.Унисекс)) КАК ФильтрГендерность
				|			ПО ТаблицаПол.Значение = ФильтрГендерность.Ссылка
				|		ПО ТаблицаВедущая.Ссылка = ТаблицаПол.Ссылка
				|			И (ТаблицаПол.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ГендерноеНазначение))}
				|ГДЕ
				|	ВЫБОР
				|			КОГДА &УчитыватьТекущуюПозицию
				|				ТОГДА ТаблицаВедущая.Ссылка В ИЕРАРХИИ
				|						(ВЫБРАТЬ
				|							Фильтр.Родитель
				|						ИЗ
				|							Фильтр)
				|			ИНАЧЕ ИСТИНА
				|		КОНЕЦ
				|{ГДЕ
				|	ТаблицаВедущая.Артикул КАК Артикул,
				|	(ЕСТЬNULL(ТаблицаРазмер.Значение, """")) КАК Размер,
				|	(ЕСТЬNULL(ТаблицаЦвет.Значение, """")) КАК Цвет,
				|	(ЕСТЬNULL(ТаблицаВозраст.Значение.Наименование, """")) КАК Возраст,
				|	(ЕСТЬNULL(ТаблицаСезон.Значение.Наименование, """")) КАК Сезонность,
				|	(ВЫБОР
				|			КОГДА ТаблицаВедущая.Марка = ЗНАЧЕНИЕ(Справочник.Марки.ПустаяСсылка)
				|					И ТаблицаМарки.Значение ЕСТЬ НЕ NULL 
				|				ТОГДА ЕСТЬNULL(ТаблицаМарки.Значение.Наименование, """")
				|			ИНАЧЕ ЕСТЬNULL(ТаблицаВедущая.Марка.Наименование, """")
				|		КОНЕЦ) КАК ТорговаяМарка}
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ Фильтр
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Ведущая.Код КАК Код,
				|	Ведущая.Наименование КАК Наименование,
				|	Ведущая.ВидТовара КАК ВидТовара,
				|	Ведущая.Артикул КАК Артикул,
				|	Ведущая.Размер КАК Размер,
				|	Ведущая.Сезонность КАК Сезонность,
				|	Ведущая.ТорговаяМарка КАК ТорговаяМарка,
				|	Ведущая.Цвет КАК Цвет,
				|	Ведущая.Возраст КАК Возраст,
				|	Ведущая.Пол КАК Пол,
				|	СУММА(ЕСТЬNULL(ТаблицаОстаткиМагазина.КоличествоОстаток, 0)) КАК Количество,
				|	СУММА(ЕСТЬNULL(ТаблицаОстаткиДругие.Количество, 0)) КАК КоличествоМагазины,
				|	СУММА(ЕСТЬNULL(ТаблицаОстаткиСклады.Количество, 0)) КАК КоличествоСклады
				|ИЗ
				|	Данные КАК Ведущая
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
				|				,
				|				Склад В (&Склады)
				|					И Номенклатура В
				|						(ВЫБРАТЬ
				|							Данные.Номенклатура
				|						ИЗ
				|							Данные)) КАК ТаблицаОстаткиМагазина
				|		ПО Ведущая.Номенклатура = ТаблицаОстаткиМагазина.Номенклатура
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнформативныеОстаткиТоваровПоМагазинам КАК ТаблицаОстаткиДругие
				|		ПО (НЕ ТаблицаОстаткиДругие.Магазин = &Магазин)
				|			И Ведущая.Номенклатура = ТаблицаОстаткиДругие.Номенклатура
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнформативныеОстаткиТоваровПоСкладам КАК ТаблицаОстаткиСклады
				|		ПО Ведущая.Номенклатура = ТаблицаОстаткиСклады.Номенклатура
				|ГДЕ
				|	ВЫБОР
				|			КОГДА &УчитыватьТолькоВНаличии = ИСТИНА
				|				ТОГДА ВЫБОР
				|						КОГДА ЕСТЬNULL(ТаблицаОстаткиМагазина.КоличествоОстаток, 0) + ЕСТЬNULL(ТаблицаОстаткиДругие.Количество, 0) + ЕСТЬNULL(ТаблицаОстаткиСклады.Количество, 0) > 0
				|							ТОГДА ИСТИНА
				|						ИНАЧЕ ЛОЖЬ
				|					КОНЕЦ
				|			ИНАЧЕ ИСТИНА
				|		КОНЕЦ
				|
				|СГРУППИРОВАТЬ ПО
				|	Ведущая.Код,
				|	Ведущая.Наименование,
				|	Ведущая.Артикул,
				|	Ведущая.Размер,
				|	Ведущая.Сезонность,
				|	Ведущая.ТорговаяМарка,
				|	Ведущая.Цвет,
				|	Ведущая.Возраст,
				|	Ведущая.Пол,
				|	Ведущая.ВидТовара
				|
				|УПОРЯДОЧИТЬ ПО
				|	Количество УБЫВ,
				|	КоличествоМагазины УБЫВ,
				|	КоличествоСклады УБЫВ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ Данные"
				);
				ПостроительЗапроса.ЗаполнитьНастройки();

				ПостроительЗапроса.Параметры.Вставить("Код", ДанныеЗапроса.Код);
				ПостроительЗапроса.Параметры.Вставить("УчитыватьТекущуюПозицию", ДанныеЗапроса.УчитыватьТекущуюПозицию);
				ПостроительЗапроса.Параметры.Вставить("УчитыватьТолькоВНаличии", ДанныеЗапроса.УчитыватьТолькоВНаличии);
				ПостроительЗапроса.Параметры.Вставить("Магазин", ДанныеУзла.Магазин);
				ПостроительЗапроса.Параметры.Вставить("Склады" , ЗапросСклады.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад"));
				ЗапросСклады = Неопределено;

				Для каждого СоставОтбора Из ДанныеЗапроса.Отборы Цикл

					Если НЕ ПостроительЗапроса.ДоступныеПоля.Найти(СоставОтбора.Ключ) = Неопределено Тогда

						ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить(СоставОтбора.Ключ);
						ЭлементОтбора.Значение      = СоставОтбора.Значение;
						ЭлементОтбора.Использование = Истина;

						Если ЭлементОтбора.ТипЗначения.СодержитТип(Тип("Строка")) И ЭлементОтбора.ТипЗначения.КвалификаторыСтроки.Длина = 0 Тогда

								ЭлементОтбора.ВидСравнения  = ВидСравнения.Содержит;

						Иначе	ЭлементОтбора.ВидСравнения  = ВидСравнения.Равно;

						КонецЕсли;

					КонецЕсли;

				КонецЦикла;

				ПостроительЗапроса.Выполнить();

				Если ПостроительЗапроса.Результат.Пустой() Тогда
					
					ТекстОшибки = "Товары по отбору «" + ПостроительЗапроса.Отбор + "» НЕ найдены!";
					ДанныеОбмена.СписокОшибок.Добавить(ТекстОшибки);

				Иначе

					ДанныеОбмена.ТаблицаОтборы = СтруктураТаблицыТоваров();

					ВыборкаТовары = ПостроительЗапроса.Результат.Выбрать();

					Пока ВыборкаТовары.Следующий() Цикл

						СтрокаТовары = ДанныеОбмена.ТаблицаОтборы.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТовары, ВыборкаТовары);

					КонецЦикла;

				КонецЕсли;

			Иначе

				ТекстОшибки = "Не заданы отборы! Отказано с целью предотвращения получения недопустимых объёмов.";
				ДанныеОбмена.СписокОшибок.Добавить(ТекстОшибки);

			КонецЕсли;

		Иначе

			ТекстОшибки = "Узел по ID «" + IDNode + "» НЕ найден!";
			ДанныеОбмена.СписокОшибок.Добавить(ТекстОшибки);

			ЗаписьЖурналаРегистрации("WEB.GetTableSelectionsGoods", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.ПланыОбмена.ПоУстройствамАнтошка,, ТекстОшибки);

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();
		ДанныеОбмена.СписокОшибок.Добавить(ТекстОшибки);

		ЗаписьЖурналаРегистрации("WEB.GetTableSelectionsGoods", УровеньЖурналаРегистрации.Ошибка
			, Метаданные.ПланыОбмена.ПоУстройствамАнтошка,, ТекстОшибки);

	КонецПопытки;

	Возврат ОбщегоНазначенияКлиентСервер.СериализоватьJSON(Новый ХранилищеЗначения(ДанныеОбмена, Новый СжатиеДанных(9)));

КонецФункции

//	LNK 15.03.2018 10:33:01
Функция GetData(IDNode, RequestData)

	УстановитьПривилегированныйРежим(Истина);

	ДанныеОбмена = Новый Структура("УзелНайден, ДанныеПриняты, СписокОшибок", Ложь, Ложь, Новый Массив);

	Попытка

		УзелПолучатель = ОбменДаннымиADCTСерверПовтИсп.ПолучитьУзелПоУстройствам(IDNode);

		Если НЕ УзелПолучатель = Неопределено Тогда

			ДанныеОбмена.УзелНайден = Истина;

			ДанныеЗапроса = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(RequestData);
			ДанныеУзла    = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла(УзелПолучатель);
			ВыгруженныеОбъекты = Новый Соответствие;

			ОбменДаннымиADCTСервер.ПодготовитьСтруктуруОбмена(ДанныеОбмена);

			Если ДанныеЗапроса.ОписаниеТипа.Класс = "Справочники" Тогда

				Если ДанныеЗапроса.ОписаниеТипа.Имя = "Номенклатура" Тогда

					Запрос = Новый Запрос(
					"ВЫБРАТЬ
					|	ТаблицаСправочник.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.Номенклатура КАК ТаблицаСправочник
					|ГДЕ
					|	(ТаблицаСправочник.IDN В (&СписокКодов)
					|			ИЛИ ТаблицаСправочник.Код В (&СписокКодов))
					|
					|ОБЪЕДИНИТЬ
					|
					|ВЫБРАТЬ
					|	ТаблицаРегистра.Владелец
					|ИЗ
					|	РегистрСведений.Штрихкоды КАК ТаблицаРегистра
					|ГДЕ
					|	ТаблицаРегистра.Владелец ССЫЛКА Справочник.Номенклатура
					|			И ТаблицаРегистра.Штрихкод В (&СписокКодов)
					|	И НЕ ТаблицаРегистра.Штрихкод = """""
					);
					Запрос.УстановитьПараметр("СписокКодов", ОбщегоНазначенияКлиентСервер.lx_FillValueList(, ДанныеЗапроса.Идентификатор,, " ,;",,, Новый ОписаниеТипов("Строка")));
					
					ДанныеВыборка = Запрос.Выполнить().Выбрать();
					
					Пока ДанныеВыборка.Следующий() Цикл

						ОбменДаннымиADCTСервер.ДобавитьДанныеВТаблицуОбмена(ДанныеВыборка.Ссылка.ПолучитьОбъект(), ДанныеОбмена.ТаблицаДанных, ДанныеУзла.Магазин, ВыгруженныеОбъекты, ДанныеОбмена.СписокОшибок);

					КонецЦикла;

				Иначе	//	другие справочники

				КонецЕсли;

			ИначеЕсли ДанныеЗапроса.ОписаниеТипа.Класс = "Документы" Тогда
				
			//	"Снаружи" мы можем получить имена "ПереоценкаТоваровНаСкладах", "ПриходныйОрдерНаТовары" или "РасходныйОрдерНаТовары".
			//	Вместо двух последних передается UUID как раз по документу "ПеремещениеТоваров".
			//	Так что нужно быть внимательным... не перепутать!
				ВидДокумента  = ?(ДанныеЗапроса.ОписаниеТипа.Имя = "ПереоценкаТоваровНаСкладах", ДанныеЗапроса.ОписаниеТипа.Имя, "ПеремещениеТоваров");

				ТекущаяСсылка = Документы[ВидДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеЗапроса.Идентификатор));

				Если НЕ ТекущаяСсылка = Неопределено Тогда

					Запрос = Новый Запрос(
					"ВЫБРАТЬ
					|	ТаблицаДокумента.Ссылка КАК Ссылка,
					|	ТаблицаДокумента.ВидНоменклатуры КАК ВидНоменклатуры
					|ПОМЕСТИТЬ Фильтр
					|ИЗ
					|	Документ.ПереоценкаТоваровНаСкладах КАК ТаблицаДокумента
					|ГДЕ
					|	ТаблицаДокумента.Ссылка = &ТекущаяСсылка
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	ВЫБОР
					|		КОГДА &ЗагружатьОрдер = ИСТИНА
					|			ТОГДА ВЫБОР
					|					КОГДА ТаблицаДокумента.МагазинПолучатель = &Магазин
					|							И НЕ ТаблицаОрдерыПриход.Номер ЕСТЬ NULL
					|						ТОГДА ТаблицаОрдерыПриход.Ссылка
					|					КОГДА ТаблицаДокумента.МагазинОтправитель = &Магазин
					|							И НЕ ТаблицаОрдерыРасход.Номер ЕСТЬ NULL
					|						ТОГДА ТаблицаОрдерыРасход.Ссылка
					|					ИНАЧЕ ТаблицаДокумента.Ссылка
					|				КОНЕЦ
					|		ИНАЧЕ ТаблицаДокумента.Ссылка
					|	КОНЕЦ,
					|	ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
					|ИЗ
					|	Документ.ПеремещениеТоваров КАК ТаблицаДокумента
					|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары КАК ТаблицаОрдерыПриход
					|		ПО (&ЗагружатьОрдер = ИСТИНА)
					|			И ТаблицаДокумента.Ссылка = ТаблицаОрдерыПриход.ДокументОснование
					|			И (ТаблицаОрдерыПриход.Магазин = &Магазин)
					|			И (НЕ ТаблицаОрдерыПриход.ПометкаУдаления)
					|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК ТаблицаОрдерыРасход
					|		ПО (&ЗагружатьОрдер = ИСТИНА)
					|			И ТаблицаДокумента.Ссылка = ТаблицаОрдерыРасход.ДокументОснование
					|			И (ТаблицаОрдерыРасход.Магазин = &Магазин)
					|			И (НЕ ТаблицаОрдерыРасход.ПометкаУдаления)
					|ГДЕ
					|	ТаблицаДокумента.Ссылка = &ТекущаяСсылка
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	Фильтр.Ссылка КАК Ссылка
					|ИЗ
					|	Фильтр КАК Фильтр
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Фильтр.ВидНоменклатуры КАК Ссылка
					|ИЗ
					|	Фильтр КАК Фильтр
					|
					|ОБЪЕДИНИТЬ
					|
					|ВЫБРАТЬ
					|	ТабличнаяЧасть.Номенклатура
					|ИЗ
					|	Фильтр КАК Фильтр
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПереоценкаТоваровНаСкладах.Товары КАК ТабличнаяЧасть
					|		ПО Фильтр.Ссылка = ТабличнаяЧасть.Ссылка
					|
					|ОБЪЕДИНИТЬ
					|
					|ВЫБРАТЬ
					|	ТабличнаяЧасть.Номенклатура
					|ИЗ
					|	Фильтр КАК Фильтр
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ТабличнаяЧасть
					|		ПО Фильтр.Ссылка = ТабличнаяЧасть.Ссылка
					|
					|ОБЪЕДИНИТЬ
					|
					|ВЫБРАТЬ
					|	ТабличнаяЧасть.Номенклатура
					|ИЗ
					|	Фильтр КАК Фильтр
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары.Товары КАК ТабличнаяЧасть
					|		ПО Фильтр.Ссылка = ТабличнаяЧасть.Ссылка
					|ГДЕ
					|	&ЗагружатьОрдер = ИСТИНА
					|
					|ОБЪЕДИНИТЬ
					|
					|ВЫБРАТЬ
					|	ТабличнаяЧасть.Номенклатура
					|ИЗ
					|	Фильтр КАК Фильтр
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.Товары КАК ТабличнаяЧасть
					|		ПО Фильтр.Ссылка = ТабличнаяЧасть.Ссылка
					|ГДЕ
					|	&ЗагружатьОрдер = ИСТИНА
					|
					|ОБЪЕДИНИТЬ
					|
					|ВЫБРАТЬ
					|	Фильтр.Ссылка
					|ИЗ
					|	Фильтр КАК Фильтр"
					);
					Запрос.УстановитьПараметр("ТекущаяСсылка" , ТекущаяСсылка);
					Запрос.УстановитьПараметр("Магазин"       , ДанныеУзла.Магазин);
					Запрос.УстановитьПараметр("ЗагружатьОрдер", ?(ДанныеЗапроса.Дополнительно.Свойство("ЗагружатьОрдер"), ДанныеЗапроса.Дополнительно.ЗагружатьОрдер = Истина, Ложь));

					Результаты = Запрос.ВыполнитьПакет();

					Если ДанныеЗапроса.Зарегистрировать = Истина Тогда

						ДанныеВыборка = Результаты[1].Выбрать();

						Пока ДанныеВыборка.Следующий() Цикл

							ПланыОбмена.ЗарегистрироватьИзменения(ОбщегоНазначенияКлиентСервер.AAD(УзелПолучатель), ДанныеВыборка.Ссылка);

						КонецЦикла;

					КонецЕсли;

					ДанныеВыборка = Результаты[2].Выбрать();

					Пока ДанныеВыборка.Следующий() Цикл

						Если ЗначениеЗаполнено(ДанныеВыборка.Ссылка) Тогда

							ОбменДаннымиADCTСервер.ДобавитьДанныеВТаблицуОбмена(ДанныеВыборка.Ссылка.ПолучитьОбъект(), ДанныеОбмена.ТаблицаДанных, ДанныеУзла.Магазин, ВыгруженныеОбъекты, ДанныеОбмена.СписокОшибок);

						КонецЕсли;

					КонецЦикла;

				Иначе

					ТекстОшибки = "НЕ найден документ вида «" + ДанныеЗапроса.ОписаниеТипа.Имя + "» по ИД='" + ДанныеЗапроса.Идентификатор + "'";
					ДанныеОбмена.СписокОшибок.Добавить(ТекстОшибки);

					ЗаписьЖурналаРегистрации("WEB.GetData", УровеньЖурналаРегистрации.Ошибка
						, Метаданные.ПланыОбмена.ПоУстройствамАнтошка,, ТекстОшибки);

				КонецЕсли;

			Иначе	//	другие классы метаданных

			КонецЕсли;

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();
		ДанныеОбмена.СписокОшибок.Добавить(ТекстОшибки);

		ЗаписьЖурналаРегистрации("WEB.GetData", УровеньЖурналаРегистрации.Ошибка
			, Метаданные.ПланыОбмена.ПоУстройствамАнтошка,, ТекстОшибки);

	КонецПопытки;

	Возврат ОбщегоНазначенияКлиентСервер.СериализоватьJSON(Новый ХранилищеЗначения(ДанныеОбмена, Новый СжатиеДанных(9)));

КонецФункции

//	LNK 03.05.2018 11:38:51
Функция DeleteRegistrationInNode(IDNode, RequestData)

	УстановитьПривилегированныйРежим(Истина);

	ДанныеОбмена = Новый Структура("УзелНайден, ДанныеПриняты, СписокОшибок", Ложь, Ложь, Новый Массив);

	Попытка

		УзелПолучатель = ОбменДаннымиADCTСерверПовтИсп.ПолучитьУзелПоУстройствам(IDNode);

		Если НЕ УзелПолучатель = Неопределено Тогда

			ДанныеОбмена.УзелНайден = Истина;
			ДанныеЗапроса = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(RequestData);

			Если ДанныеЗапроса.ОписаниеТипа.Класс = "Документы" Тогда
				
			//	"Снаружи" мы можем получить имена "ПереоценкаТоваровНаСкладах", "ПриходныйОрдерНаТовары" или "РасходныйОрдерНаТовары".
			//	Вместо двух последних передается UUID как раз по документу "ПеремещениеТоваров".
			//	Так что нужно быть внимательным... не перепутать!
				ВидДокумента  = ?(ДанныеЗапроса.ОписаниеТипа.Имя = "ПереоценкаТоваровНаСкладах", ДанныеЗапроса.ОписаниеТипа.Имя, "ПеремещениеТоваров");

				ТекущаяСсылка = Документы[ВидДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеЗапроса.Идентификатор));

				ПланыОбмена.УдалитьРегистрациюИзменений(ОбщегоНазначенияКлиентСервер.AAD(УзелПолучатель), ТекущаяСсылка);

			Иначе


			КонецЕсли;

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();
		ДанныеОбмена.СписокОшибок.Добавить(ТекстОшибки);

		ЗаписьЖурналаРегистрации("WEB.DeleteRegistrationInNode", УровеньЖурналаРегистрации.Ошибка
			, Метаданные.ПланыОбмена.ПоУстройствамАнтошка,, ТекстОшибки);

	КонецПопытки;

	Возврат ОбщегоНазначенияКлиентСервер.СериализоватьJSON(Новый ХранилищеЗначения(ДанныеОбмена, Новый СжатиеДанных(9)));

КонецФункции

Функция AssociateSettings(IDNode, SystemInfo)

	УстановитьПривилегированныйРежим(Истина);

	ДанныеОтвета = Новый Структура(
		"Код, НомерМагазина, СозданНовыйУзел, СписокОшибок"
		, "", 0, Ложь, Новый Массив);

	Попытка

		ДанныеУстройства = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(SystemInfo);

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МАКСИМУМ(ДанныеУзла.Узел) КАК Узел,
		|	МАКСИМУМ(ДанныеУзла.Код) КАК Код,
		|	МАКСИМУМ(ДанныеУзла.МагазинУзла) КАК МагазинУзла,
		|	МАКСИМУМ(ДанныеУзла.МагазинУстройства) КАК МагазинУстройства,
		|	Ведущая.Магазин КАК МагазинЭтотУзел,
		|	Ведущая.НомерМагазина КАК НомерМагазинаЭтотУзел
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаУзлы.Магазин КАК Магазин,
		|		ТаблицаУзлы.Магазин.НомерМагазина КАК НомерМагазина
		|	ИЗ
		|		ПланОбмена.ПоУстройствамАнтошка КАК ТаблицаУзлы
		|	ГДЕ
		|		ТаблицаУзлы.ЭтотУзел) КАК Ведущая
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТаблицаУзлы.Код КАК Код,
		|			ТаблицаУзлы.Ссылка КАК Узел,
		|			ТаблицаУзлы.Магазин КАК МагазинУзла,
		|			NULL КАК МагазинУстройства
		|		ИЗ
		|			ПланОбмена.ПоУстройствамАнтошка КАК ТаблицаУзлы
		|		ГДЕ
		|			ТаблицаУзлы.Ссылка = &Узел
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			NULL,
		|			NULL,
		|			NULL,
		|			ТаблицаСправочник.Ссылка
		|		ИЗ
		|			Справочник.Магазины КАК ТаблицаСправочник
		|		ГДЕ
		|			ТаблицаСправочник.НомерМагазина = &НомерМагазина
		|			И НЕ &НомерМагазина = 0) КАК ДанныеУзла
		|		ПО (ИСТИНА)
		|
		|СГРУППИРОВАТЬ ПО
		|	Ведущая.Магазин,
		|	Ведущая.НомерМагазина"
		);
		Запрос.УстановитьПараметр("Узел", ОбменДаннымиADCTСерверПовтИсп.ПолучитьУзелПоУстройствам(IDNode));
		Запрос.УстановитьПараметр("НомерМагазина", ДанныеУстройства.НомерМагазина);
		
		ДанныеУзлаВыборка = Запрос.Выполнить().Выбрать();
		ДанныеУзлаВыборка.Следующий();

		Если ДанныеУзлаВыборка.Узел = NULL Тогда

		//	Первая "привязка"... ассоциированного узла ещё нет - создаём!
			ОбновитьНумерациюОбъектов(Метаданные.ПланыОбмена.ПоУстройствамАнтошка);

			УзелПолучатель = ПланыОбмена.ПоУстройствамАнтошка.СоздатьУзел();
			УзелПолучатель.УстановитьСсылкуНового(ПланыОбмена.ПоУстройствамАнтошка.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеУстройства.Идентификатор)));
		//	"Наименование" присваиваем только при создании узла... дальше его можно менять для большей наглядности.
			УзелПолучатель.Наименование = СокрЛП(ДанныеУстройства.Наименование);
			УзелПолучатель.УстановитьНовыйКод(ДанныеУстройства.Префикс + ".");
			УзелПолучатель.РегистрироватьИзменения = ДанныеУстройства.РегистрироватьИзменения;

			ДанныеОтвета.СозданНовыйУзел = Истина;	//*Ответ

		Иначе

		//	Узел уже был "привязан"... получим объект.
			УзелПолучатель = ДанныеУзлаВыборка.Узел.ПолучитьОбъект();

			Если НЕ УзелПолучатель.РегистрироватьИзменения = ДанныеУстройства.РегистрироватьИзменения Тогда

				УзелПолучатель.РегистрироватьИзменения = ДанныеУстройства.РегистрироватьИзменения;

			КонецЕсли;

			ДанныеОтвета.СозданНовыйУзел = Ложь;	//*Ответ

		КонецЕсли;

		ДанныеОтвета.Код = УзелПолучатель.Код;

	//	Реквизит "Магазин".
	//	---------------------------------------------------------------------------------------
		Если ДанныеУстройства.НомерМагазина = 0 Тогда

		//	На "устройстве" (ТСД или планшете) не указан номер магазина.
		//	Принимаем тот магазин, который "работает" в этой информационной базе.
		//	Такой вариант допустимо использовать в периферийных ИБ (не ЦБ).
			УзелПолучатель.Магазин = ДанныеУзлаВыборка.МагазинЭтотУзел;
			ДанныеОтвета.НомерМагазина = ДанныеУзлаВыборка.НомерМагазинаЭтотУзел	//*Ответ

		Иначе

		//	На "устройстве" номер магазина указан.

			Если ДанныеУзлаВыборка.МагазинУстройства = NULL Тогда

			//	Номер магазина на "устройстве" указан, но, вероятно, он ошибочен, т.к. не найден в справочнике...
			//	В случае, если магазин для "привязанного" узла указан, то переназначим номер магазина на "устройстве".
				Если ЗначениеЗаполнено(ДанныеУзлаВыборка.МагазинУзла) Тогда
					
					УзелПолучатель.Магазин = ДанныеУзлаВыборка.МагазинУзла;

				Иначе
					
				//	Имеет смысл только в периферийных ИБ... но других вариантов не остаётся.
					УзелПолучатель.Магазин = ДанныеУзлаВыборка.МагазинЭтотУзел;
				
				КонецЕсли;

			ИначеЕсли НЕ ДанныеУзлаВыборка.МагазинУзла = ДанныеУзлаВыборка.МагазинУстройства ИЛИ УзелПолучатель.Магазин.Пустая() Тогда

			//	Магазин (НомерМагазина) для узла "устройства" переназначен (или вообще для узла не назначен).
				УзелПолучатель.Магазин = ДанныеУзлаВыборка.МагазинУстройства;

			КонецЕсли;

			ДанныеОтвета.НомерМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелПолучатель.Магазин, "НомерМагазина", 0, Ложь)	//*Ответ

		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.УстановитьЗначениеЕслиОтличается("ТипПрограммы", Перечисления.ПрограммаМобильногоУстройства[ДанныеУстройства.ТипПрограммы], УзелПолучатель);

		Если УзелПолучатель.Модифицированность() Тогда

			УзелПолучатель.ДополнительныеСвойства.Вставить("Загрузка", Истина);
			УзелПолучатель.ОбменДанными.Загрузка = Истина;
			УзелПолучатель.Записать();

		КонецЕсли;

	//	Связанный элемент "Справочники.СтруктураУзлов".
	//	Работаем с уже записанным объектом, так как нам требуется уникальный идентификатор ссылки
		Справочники.СтруктураУзлов.ПроверитьПоУстройствамАнтошка(УзелПолучатель, ДанныеУстройства.ВерсияКонфигурации);

	Исключение

		ТекстОшибки = ОписаниеОшибки();
		ДанныеОтвета.СписокОшибок.Добавить(ТекстОшибки);

		ЗаписьЖурналаРегистрации("WEB.AssociateSettings", УровеньЖурналаРегистрации.Ошибка
			, Метаданные.ПланыОбмена.ПоУстройствамАнтошка,, "(" + ДанныеУстройства.НомерМагазина + "): " + ТекстОшибки);

	КонецПопытки;

	Возврат ОбщегоНазначенияКлиентСервер.СериализоватьJSON(ДанныеОтвета);

КонецФункции

//	LNK 20.03.2018 10:15:55
Функция GetExternalData(IDNode, IDN, TypeName, StoreNumber, ReceiveCentralHubData)

	УстановитьПривилегированныйРежим(Истина);

	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() ИЛИ ReceiveCentralHubData = Ложь Тогда

	//	Получаем из текущей ИБ то, что есть... если это ЦБ, то будут и данные ИМ, иначе - только "свои", данные локальной периферии.
		Если TypeName = "Контрагент" Тогда

			СтруктураДанных = СервисыСервер.ПолучитьИнформациюОКонтрагенте(IDN, StoreNumber);

		ИначеЕсли TypeName = "ПроверитьЧек" Тогда

			СтруктураДанных = СервисыСервер.ПолучитьДанныеПроверкиЧека(ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(IDN), StoreNumber);

		ИначеЕсли TypeName = "СоздатьОтложенныйЧек" Тогда

			СтруктураДанных = СервисыСервер.СоздатьОтложенныйЧек(ОбменДаннымиADCTСерверПовтИсп.ПолучитьУзелПоУстройствам(IDNode)
				, ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(IDN), StoreNumber);

		Иначе

			СтруктураДанных = СервисыСервер.ПолучитьИнформациюОНоменклатуре(IDN, StoreNumber, Истина);
			СтруктураДанных.Удалить("ДанныеМагазина");
			СтруктураДанных.Удалить("Номенклатура");

		КонецЕсли;

	Иначе

	//	Получаем данные из ЦБ, которая, в свою очередь, должна получить их от ИнтернетМагазина.

		Подключение = СервисыСервер.Подключение("RetailPack");
		СтруктураДанных = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(Подключение.GetExternalData(IDN, TypeName, StoreNumber));

		Если TypeName = "Номенклатура" Тогда

			СервисыСервер.ПолучитьЦенуОстаткиПоМагазинам(СтруктураДанных, Ложь, Истина);

			СтруктураДанных.Удалить("ДанныеМагазина");
			СтруктураДанных.Удалить("Номенклатура");

		КонецЕсли;

	КонецЕсли;

	Возврат ОбщегоНазначенияКлиентСервер.СериализоватьJSON(СтруктураДанных);

КонецФункции

//	LNK 01.06.2018 14:01:19
Функция ReceiveCashRegisters(IDNode)

	Возврат ПолучитьСоставСправочника(IDNode, "КассыККМ", "КассыККМ", "ReceiveCashRegisters");

КонецФункции

//	LNK 01.06.2018 15:09:20
Функция ReceiveEmployees(IDNode)

	Возврат ПолучитьСоставСправочника(IDNode, "ФизическиеЛица", "Сотрудники", "ReceiveEmployees");

КонецФункции // ReceiveEmployees()

//	LNK 25.04.2018 14:37:22
Функция GetDocumentsList(IDNode, DocType, ReceivingDate)

	УстановитьПривилегированныйРежим(Истина);

	ДанныеОбмена = Новый Структура("УзелНайден, СписокОшибок, Реестр", Ложь, Новый Массив, Новый ТаблицаЗначений);

	Попытка

		УзелПолучатель = ОбменДаннымиADCTСерверПовтИсп.ПолучитьУзелПоУстройствам(IDNode);

		Если НЕ УзелПолучатель = Неопределено Тогда

			ДанныеОбмена.УзелНайден = Истина;

			ДанныеУзла = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла(УзелПолучатель);

			Если НЕ ДанныеУзла.Магазин.Пустая() Тогда

				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ТаблицаДокументы.Номер КАК Номер,
				|	ТаблицаДокументы.Дата КАК Дата,
				|	ТаблицаДокументы.КоличествоСтрок КАК КоличествоСтрок,
				|	ТаблицаДокументы.Проведен КАК Проведен,
				|	ТаблицаДокументы.Ссылка КАК Ссылка,
				|	ТаблицаДокументы.ВидНоменклатуры КАК Проект
				|ИЗ
				|	(ВЫБРАТЬ
				|		ТаблицаДокументы.Номер КАК Номер,
				|		ТаблицаДокументы.Дата КАК Дата,
				|		КОЛИЧЕСТВО(ТабличнаяЧасть.НомерСтроки) КАК КоличествоСтрок,
				|		ВЫБОР
				|			КОГДА ТаблицаДокументы.Проведен
				|				ТОГДА 1
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Проведен,
				|		ТаблицаДокументы.Ссылка КАК Ссылка,
				|		ТаблицаДокументы.ВидНоменклатуры КАК ВидНоменклатуры
				|	ИЗ
				|		Документ.ПереоценкаТоваровНаСкладах КАК ТаблицаДокументы
				|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПереоценкаТоваровНаСкладах.Товары КАК ТабличнаяЧасть
				|			ПО ТаблицаДокументы.Ссылка = ТабличнаяЧасть.Ссылка
				|	ГДЕ
				|		&ТипДокумента = ""ПереоценкаТоваровНаСкладах""
				|		И ТаблицаДокументы.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
				|		И НЕ ТаблицаДокументы.ПометкаУдаления
				|		И ТаблицаДокументы.Магазин = &Магазин
				|	
				|	СГРУППИРОВАТЬ ПО
				|		ТаблицаДокументы.Номер,
				|		ТаблицаДокументы.Дата,
				|		ТаблицаДокументы.Ссылка,
				|		ВЫБОР
				|			КОГДА ТаблицаДокументы.Проведен
				|				ТОГДА 1
				|			ИНАЧЕ 0
				|		КОНЕЦ,
				|		ТаблицаДокументы.ВидНоменклатуры
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ТаблицаДокументы.Номер,
				|		ТаблицаДокументы.Дата,
				|		КОЛИЧЕСТВО(ТабличнаяЧасть.НомерСтроки),
				|		ВЫБОР
				|			КОГДА ТаблицаДокументы.Проведен
				|				ТОГДА 1
				|			ИНАЧЕ 0
				|		КОНЕЦ,
				|		ТаблицаДокументы.Ссылка,
				|		МАКСИМУМ(ТабличнаяЧасть.Номенклатура.ВидНоменклатуры)
				|	ИЗ
				|		Документ.ПеремещениеТоваров КАК ТаблицаДокументы
				|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ТабличнаяЧасть
				|			ПО ТаблицаДокументы.Ссылка = ТабличнаяЧасть.Ссылка
				|	ГДЕ
				|		&ТипДокумента В (""ПриходныйОрдерНаТовары"", ""РасходныйОрдерНаТовары"")
				|		И ТаблицаДокументы.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
				|		И НЕ ТаблицаДокументы.ПометкаУдаления
				|		И ВЫБОР
				|				КОГДА &ТипДокумента = ""ПриходныйОрдерНаТовары""
				|					ТОГДА ТаблицаДокументы.МагазинПолучатель
				|				КОГДА &ТипДокумента = ""РасходныйОрдерНаТовары""
				|					ТОГДА ТаблицаДокументы.МагазинОтправитель
				|			КОНЕЦ = &Магазин
				|	
				|	СГРУППИРОВАТЬ ПО
				|		ТаблицаДокументы.Номер,
				|		ТаблицаДокументы.Дата,
				|		ТаблицаДокументы.Ссылка,
				|		ВЫБОР
				|			КОГДА ТаблицаДокументы.Проведен
				|				ТОГДА 1
				|			ИНАЧЕ 0
				|		КОНЕЦ) КАК ТаблицаДокументы
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусТСД КАК ТаблицаСтатусы
				|		ПО (ТаблицаСтатусы.Магазин = &Магазин)
				|			И ТаблицаДокументы.Ссылка = ТаблицаСтатусы.Объект
				|ГДЕ
				|	(ТаблицаСтатусы.СтатусТСД ЕСТЬ NULL
				|			ИЛИ ТаблицаСтатусы.СтатусТСД = ЗНАЧЕНИЕ(Перечисление.СтатусДокТСД.ВыгрузитьВТСД))
				|
				|УПОРЯДОЧИТЬ ПО
				|	Дата,
				|	Ссылка"
				);
				Запрос.УстановитьПараметр("Период" , ReceivingDate);
				Запрос.УстановитьПараметр("Магазин", ДанныеУзла.Магазин);
				Запрос.УстановитьПараметр("ТипДокумента", DocType);

				ДанныеОбмена.Реестр = Запрос.Выполнить().Выгрузить();
				ДанныеОбмена.Реестр.Колонки.Добавить("Идентификатор"  , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
				ДанныеОбмена.Реестр.Колонки.Добавить("ВидНоменклатуры", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));

				Для каждого СтрокаРеестра Из ДанныеОбмена.Реестр Цикл

					СтрокаРеестра.Идентификатор   = СокрЛП(СтрокаРеестра.Ссылка.УникальныйИдентификатор());
					СтрокаРеестра.ВидНоменклатуры = СокрЛП(СтрокаРеестра.Проект.УникальныйИдентификатор());

				КонецЦикла;

				ДанныеОбмена.Реестр.Колонки.Удалить(ДанныеОбмена.Реестр.Колонки.Ссылка);

			Иначе

				ТекстОшибки = "Ошибка! Нет определения магазина для узла «" + УзелПолучатель + "».";
				ДанныеОбмена.СписокОшибок.Добавить(ТекстОшибки);

			КонецЕсли;

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();
		ДанныеОбмена.СписокОшибок.Добавить(ТекстОшибки);

		ЗаписьЖурналаРегистрации("WEB.GetDocumentsList", УровеньЖурналаРегистрации.Ошибка
			, Метаданные.ПланыОбмена.ПоУстройствамАнтошка,, ТекстОшибки);

	КонецПопытки;

	Возврат ОбщегоНазначенияКлиентСервер.СериализоватьJSON(ДанныеОбмена);

КонецФункции

//	LNK 03.05.2018 09:10:30
Функция SetDocumentStatus(IDNode, RequestData)

	УстановитьПривилегированныйРежим(Истина);

	ДанныеОбмена = Новый Структура("УзелНайден, ДанныеПриняты, СписокОшибок", Ложь, Ложь, Новый Массив);

	Попытка

		УзелПолучатель = ОбменДаннымиADCTСерверПовтИсп.ПолучитьУзелПоУстройствам(IDNode);

		Если НЕ УзелПолучатель = Неопределено Тогда

			ДанныеОбмена.УзелНайден = Истина;

			ДанныеЗапроса = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(RequestData);
			ДанныеУзла    = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла(УзелПолучатель);

			Если НЕ ПустаяСтрока(ДанныеЗапроса.Идентификатор + ДанныеЗапроса.ВидДокумента) Тогда

				ВидДокумента = ?(ДанныеЗапроса.ВидДокумента = "ПриходныйОрдерНаТовары" ИЛИ ДанныеЗапроса.ВидДокумента = "РасходныйОрдерНаТовары", "ПеремещениеТоваров", ДанныеЗапроса.ВидДокумента);

				ДокументСсылка  = Документы[ВидДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеЗапроса.Идентификатор));
				СтатусДокумента = ?(ПустаяСтрока(ДанныеЗапроса.СтатусДокумента), Перечисления.СтатусДокТСД.НОВЫЙ, Перечисления.СтатусДокТСД[ДанныеЗапроса.СтатусДокумента]);

				ОбменДаннымиADCTСервер.УстановитьСтатусДокументаВУстройстве(ДокументСсылка, СтатусДокумента, ДанныеУзла);
				ОбменДаннымиADCTСервер.ПроверитьСостояниеДокументовВУстройствах(ДанныеОбмена, ДанныеУзла, ДокументСсылка);

			Иначе

				ОбменДаннымиADCTСервер.ПроверитьСостояниеДокументовВУстройствах(ДанныеОбмена, ДанныеУзла);

			КонецЕсли;

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();
		ДанныеОбмена.СписокОшибок.Добавить(ТекстОшибки);

		ЗаписьЖурналаРегистрации("WEB.SetDocumentStatus", УровеньЖурналаРегистрации.Ошибка
			, Метаданные.ПланыОбмена.ПоУстройствамАнтошка,, ТекстОшибки);

	КонецПопытки;

	Возврат ОбщегоНазначенияКлиентСервер.СериализоватьJSON(Новый ХранилищеЗначения(ДанныеОбмена, Новый СжатиеДанных(9)));

КонецФункции

//	LNK 07.05.2018 09:28:22
Функция PutCompletedDocument(IDNode, RequestData)

	УстановитьПривилегированныйРежим(Истина);

	ДанныеОбмена = Новый Структура("УзелНайден, ДанныеПриняты, СписокОшибок", Ложь, Ложь, Новый Массив);

	Попытка

		УзелПолучатель = ОбменДаннымиADCTСерверПовтИсп.ПолучитьУзелПоУстройствам(IDNode);

		Если НЕ УзелПолучатель = Неопределено Тогда

			ДанныеОбмена.УзелНайден = Истина;

			ДанныеЗапроса = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(RequestData).Получить();
			ДанныеУзла    = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла(УзелПолучатель);

			ДокументОбработан = Документы[ДанныеЗапроса.ОписаниеТипа.Имя].ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеЗапроса.УИ)).ПолучитьОбъект();

			Если ДокументОбработан = Неопределено Тогда

				ДокументОбработан = Документы[ДанныеЗапроса.ОписаниеТипа.Имя].СоздатьДокумент();

				Если ДанныеЗапроса.ОписаниеТипа.Имя = "ПриходныйОрдерНаТовары" ИЛИ ДанныеЗапроса.ОписаниеТипа.Имя = "РасходныйОрдерНаТовары" Тогда

					ДокументОбработан.ДокументОснование = Документы.ПеремещениеТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеЗапроса.УИ));

					Запрос = Новый Запрос(
					"ВЫБРАТЬ
					|	ТаблицаОснование.Номер КАК Номер,
					|	ВЫБОР
					|		КОГДА &ТипОрдера = ""ПриходныйОрдерНаТовары""
					|			ТОГДА ТаблицаОснование.МагазинПолучатель
					|		ИНАЧЕ ТаблицаОснование.МагазинОтправитель
					|	КОНЕЦ КАК Магазин,
					|	ВЫБОР
					|		КОГДА &ТипОрдера = ""ПриходныйОрдерНаТовары""
					|			ТОГДА ТаблицаОснование.СкладПолучатель
					|		ИНАЧЕ ТаблицаОснование.СкладОтправитель
					|	КОНЕЦ КАК Склад
					|ИЗ
					|	Документ.ПеремещениеТоваров КАК ТаблицаОснование
					|ГДЕ
					|	ТаблицаОснование.Ссылка = &ДокументОснование"
					);
					Запрос.УстановитьПараметр("ТипОрдера", ДанныеЗапроса.ОписаниеТипа.Имя);
					Запрос.УстановитьПараметр("ДокументОснование", ДокументОбработан.ДокументОснование);

					ПеремещениеВыборка = Запрос.Выполнить().Выбрать();
					ПеремещениеВыборка.Следующий();
					ЗаполнитьЗначенияСвойств(ДокументОбработан, ПеремещениеВыборка);

				КонецЕсли;

			КонецЕсли;

			ДокументОбработан.Дата = ДанныеЗапроса.Дата;
			ДокументОбработан.ПометкаУдаления = Ложь;	//	на всякий случай!

			Если ДанныеЗапроса.ОписаниеТипа.Имя = "ПереоценкаТоваровНаСкладах" Тогда

				ТаблицаТовары = ДокументОбработан.Товары.Выгрузить();
				ТаблицаТовары.Индексы.Добавить("Номенклатура, Характеристика");
			//	Очистим реквизит "КоличествоФакт".
				ТаблицаТовары.ЗаполнитьЗначения(0, "КоличествоФакт");

				Для каждого СтрокаТовары Из ДанныеЗапроса.Товары Цикл

					Отборы = Новый Структура(
						"Номенклатура, Характеристика"
						, ОбменДаннымиADCTСервер.ПолучитьСсылку(СтрокаТовары.Номенклатура, Справочники.Номенклатура)
						, ОбменДаннымиADCTСервер.ПолучитьСсылку(СтрокаТовары.Характеристика, Справочники.ХарактеристикиНоменклатуры));

					СтрокиВОтборах = ТаблицаТовары.НайтиСтроки(Отборы);

					Если НЕ СтрокиВОтборах.Количество() = 0 Тогда

						Для каждого СтрокаТабличнойЧасти Из СтрокиВОтборах Цикл

							СтрокаТабличнойЧасти.КоличествоФакт = СтрокаТовары.КоличествоФакт;

						КонецЦикла;

					Иначе

					//	нет такой строки.. хез! Но, если уж посчитали, то терять нельзя.
						СтрокаТабличнойЧасти = ТаблицаТовары.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Отборы);

					//	СтрокаТабличнойЧасти.Количество = СтрокаТовары.КоличествоФакт;
						СтрокаТабличнойЧасти.КоличествоФакт = СтрокаТовары.КоличествоФакт;

					КонецЕсли;

				КонецЦикла;

				ДокументОбработан.Товары.Загрузить(ТаблицаТовары);

			ИначеЕсли ДанныеЗапроса.ОписаниеТипа.Имя = "ПриходныйОрдерНаТовары" ИЛИ ДанныеЗапроса.ОписаниеТипа.Имя = "РасходныйОрдерНаТовары" Тогда

				Для каждого СтрокаТовары Из ДанныеЗапроса.Товары Цикл

					СтрокаТабличнойЧасти = ДокументОбработан.Товары.Добавить();
					СтрокаТабличнойЧасти.Количество = СтрокаТовары.КоличествоФакт;
					СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТовары.КоличествоФакт;
					СтрокаТабличнойЧасти.Номенклатура = ОбменДаннымиADCTСервер.ПолучитьСсылку(СтрокаТовары.Номенклатура, Справочники.Номенклатура);
					СтрокаТабличнойЧасти.Характеристика = ОбменДаннымиADCTСервер.ПолучитьСсылку(СтрокаТовары.Характеристика, Справочники.ХарактеристикиНоменклатуры);
					СтрокаТабличнойЧасти.Цена = СтрокаТовары.Цена;

				КонецЦикла;

			КонецЕсли;

			ДокументОбработан.ОбменДанными.Загрузка = Истина;
			ДокументОбработан.Записать();

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();
		ДанныеОбмена.СписокОшибок.Добавить(ТекстОшибки);

		ЗаписьЖурналаРегистрации("WEB.PutCompletedDocument", УровеньЖурналаРегистрации.Ошибка
			, Метаданные.ПланыОбмена.ПоУстройствамАнтошка,, ТекстОшибки);

	КонецПопытки;

	Возврат ОбщегоНазначенияКлиентСервер.СериализоватьJSON(Новый ХранилищеЗначения(ДанныеОбмена, Новый СжатиеДанных(9)));

КонецФункции

//	LNK 06.06.2018 09:13:31
Функция QualityOfService(IDNode, RequestData)

	Перем УзелПолучатель;

	УстановитьПривилегированныйРежим(Истина);

	ДанныеОбмена = Новый Структура("Выполнено, ДокументПродажи"
		, Ложь
		, Новый Структура(
			"УИ, Номер, Дата, Покупатель, СуммаПродажи", "", "", '00010101', "", 0));

	Если ПодготовитьКонтекст(IDNode, УзелПолучатель, ДанныеОбмена, "QualityOfService") И ДанныеОбмена.УзелНайден Тогда

		ДанныеУзла = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла(УзелПолучатель);

		Если НЕ ДанныеУзла.Магазин.Пустая() Тогда

			ДанныеЗапроса = ОбщегоНазначенияКлиентСервер.ДесериализоватьJSON(RequestData);

			КассаККМ = ОбменДаннымиADCTСервер.ПолучитьСсылку(ДанныеЗапроса.КассаККМ, Справочники.КассыККМ);

			Если ДанныеЗапроса.Команда = "ПроверитьТребованиеОценки" Тогда

				Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ТаблицаТребования.ДокументПродажи.Дата КАК Дата,
				|	ТаблицаТребования.ДокументПродажи.Номер КАК Номер,
				|	ТаблицаТребования.ДокументПродажи КАК ДокументПродажи,
				|	ПРЕДСТАВЛЕНИЕ(ТаблицаТребования.ДокументПродажи.ВладелецДисконтнойКарты) КАК Покупатель,
				|	ТаблицаТребования.ДокументПродажи.СуммаДокумента КАК СуммаПродажи
				|ИЗ
				|	РегистрСведений.КачествоОбслуживанияПродажТребование.СрезПоследних(
				|			КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ),
				|			КассаККМ = &КассаККМ
				|				И Период >= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)) КАК ТаблицаТребования
				|
				|УПОРЯДОЧИТЬ ПО
				|	Дата УБЫВ,
				|	ДокументПродажи УБЫВ"
				);
				Запрос.УстановитьПараметр("КассаККМ"   , КассаККМ);
				Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
				
				Результат = Запрос.Выполнить();

				Если НЕ Результат.Пустой() Тогда

					Выборка = Результат.Выбрать();
					Выборка.Следующий();

					ДанныеОбмена.ДокументПродажи.УИ    = СокрЛП(Выборка.ДокументПродажи.УникальныйИдентификатор());
					ДанныеОбмена.ДокументПродажи.Номер = СокрЛП(Выборка.Номер);
					ДанныеОбмена.ДокументПродажи.Дата  = Выборка.Дата;
					ДанныеОбмена.ДокументПродажи.Покупатель    = Выборка.Покупатель;
					ДанныеОбмена.ДокументПродажи.СуммаПродажи  = Выборка.СуммаПродажи;

				КонецЕсли;

				ДанныеОбмена.Выполнено = Истина;

			ИначеЕсли ДанныеЗапроса.Команда = "ОчиститьТребованиеОценки" Тогда

				НаборЗаписей = РегистрыСведений.КачествоОбслуживанияПродажТребование.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ДокументПродажи.Установить(Документы[ДанныеЗапроса.ДокументПродажи.Вид].ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеЗапроса.ДокументПродажи.УИ)));

				НаборЗаписей.Записать();

				ДанныеОбмена.Выполнено = Истина;

			ИначеЕсли ДанныеЗапроса.Команда = "ВыполнитьОценку" Тогда

				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ТаблицаРегистра.Магазин КАК Магазин,
				|	ТаблицаРегистра.ДокументПродажи КАК ДокументПродажи
				|ИЗ
				|	РегистрСведений.КачествоОбслуживанияПродаж КАК ТаблицаРегистра
				|ГДЕ
				|	ТаблицаРегистра.ДокументПродажи = &ДокументПродажи"
				);
				Запрос.УстановитьПараметр("ДокументПродажи"
				, Документы[ДанныеЗапроса.ДокументПродажи.Вид].ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеЗапроса.ДокументПродажи.УИ)));
				
				Результат = Запрос.Выполнить();

				Если НЕ Результат.Пустой() Тогда

					Выборка = Результат.Выбрать();
					Выборка.Следующий();

					НаборЗаписей = РегистрыСведений.КачествоОбслуживанияПродаж.СоздатьНаборЗаписей();

					НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
					НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"  , Истина);
					НаборЗаписей.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);
					НаборЗаписей.ОбменДанными.Загрузка = Истина;
					ОбменДаннымиСервер.УстановитьПолучателейМагазина(НаборЗаписей.ОбменДанными.Получатели, Выборка.Магазин);

					НаборЗаписей.Отбор.ДокументПродажи.Установить(Выборка.ДокументПродажи);
					НаборЗаписей.Отбор.Магазин.Установить(Выборка.Магазин);

					НаборЗаписей.Прочитать();

					Для каждого ЗаписьНабора Из НаборЗаписей Цикл

						ЗаписьНабора.Оценка     = ДанныеЗапроса.Оценка;
						ЗаписьНабора.ДатаОценки = ТекущаяДата();

					КонецЦикла;

					НаборЗаписей.Записать();

				КонецЕсли;

				ДанныеОбмена.Выполнено = Истина;

			КонецЕсли;

		Иначе

			ТекстОшибки = "Ошибка! Нет определения магазина для узла «" + УзелПолучатель + "».";
			ДанныеОбмена.СписокОшибок.Добавить(ТекстОшибки);

		КонецЕсли;

	КонецЕсли;

	Возврат ОбщегоНазначенияКлиентСервер.СериализоватьJSON(ДанныеОбмена);

КонецФункции

//	LNK 12.06.2018 10:10:38
Функция ReceiveConfiguration(IDNode, CurrentVersion)

	Перем УзелПолучатель, ДанныеОбмена;

	УстановитьПривилегированныйРежим(Истина);

	Если ПодготовитьКонтекст(IDNode, УзелПолучатель, ДанныеОбмена, "GetConfiguration") И ДанныеОбмена.УзелНайден Тогда

		ДанныеУзла = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла(УзелПолучатель);

		ЗначенияРесурсов = РегистрыСведений.ДанныеМобильныхУстройств.Получить(Новый Структура("ТипПрограммы", ДанныеУзла.ТипПрограммы));

		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ЗначенияРесурсов.Версия, CurrentVersion, 3) > 0 Тогда

			ДанныеОбмена.Вставить(
				"Конфигурация"
				, Новый Структура(
					"Версия, Данные"
					, ЗначенияРесурсов.Версия, ЗначенияРесурсов.Данные));

		КонецЕсли;

	КонецЕсли;

	Возврат ОбщегоНазначенияКлиентСервер.СериализоватьJSON(ДанныеОбмена);

КонецФункции
	
#КонецОбласти

#Область ПоддержкаФункционала

//	LNK 06.06.2018 12:36:54
Функция ПодготовитьКонтекст(IDNode, УзелПолучатель, ДанныеОбмена, ИмяОшибки)

	Если НЕ ТипЗнч(ДанныеОбмена) = Тип("Структура") Тогда

		ДанныеОбмена = Новый Структура;

	КонецЕсли;

	ДанныеОбмена.Вставить("УзелНайден"  , Ложь);
	ДанныеОбмена.Вставить("СписокОшибок", Новый Массив);

//	---------------------------------------------------------------------------------------

	Попытка
	
		УзелПолучатель = ОбменДаннымиADCTСерверПовтИсп.ПолучитьУзелПоУстройствам(IDNode);
		
		Если НЕ УзелПолучатель = Неопределено Тогда

			ДанныеОбмена.УзелНайден = Истина;

		Иначе

			ТекстОшибки = "нет определения узла-получателя по ID «" + IDNode + "»";
			ДанныеОбмена.СписокОшибок.Добавить(ТекстОшибки);

			ЗаписьЖурналаРегистрации("WEB." + ИмяОшибки, УровеньЖурналаРегистрации.Ошибка
				, Метаданные.ПланыОбмена.ПоУстройствамАнтошка,, ТекстОшибки);

		КонецЕсли;

	Исключение
		
		УзелПолучатель = Неопределено;	//	.. на всякий случай!

		ТекстОшибки = ОписаниеОшибки();
		ДанныеОбмена.СписокОшибок.Добавить(ТекстОшибки);

		ЗаписьЖурналаРегистрации("WEB." + ИмяОшибки, УровеньЖурналаРегистрации.Ошибка
			, Метаданные.ПланыОбмена.ПоУстройствамАнтошка,, ТекстОшибки);

	КонецПопытки;

	Возврат НЕ УзелПолучатель = Неопределено;

КонецФункции // ПодготовитьКонтекст()

//	LNK 01.06.2018 15:04:03
Функция ПолучитьСоставСправочника(IDNode, Имя, ИмяТаблицы, ИмяОшибки)

	Перем УзелПолучатель, ДанныеОбмена;

	УстановитьПривилегированныйРежим(Истина);

	Если ПодготовитьКонтекст(IDNode, УзелПолучатель, ДанныеОбмена, ИмяОшибки) И ДанныеОбмена.УзелНайден Тогда

		ДанныеУзла = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла(УзелПолучатель);

		Если НЕ ДанныеУзла.Магазин.Пустая() Тогда

			ДанныеОбмена.Вставить(ИмяТаблицы, Новый ТаблицаЗначений);
			ДанныеОбмена[ИмяТаблицы].Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
			ДанныеОбмена[ИмяТаблицы].Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));

			Запрос = Новый Запрос(СтрЗаменить(СтрЗаменить(
			"ВЫБРАТЬ
			|	ТаблицаСправочник.Ссылка КАК Ссылка,
			|	ТаблицаСправочник.Наименование КАК Наименование
			|ИЗ
			|	Справочник.КассыККМ КАК ТаблицаСправочник
			|ГДЕ
			|	НЕ ТаблицаСправочник.ПометкаУдаления
			|	И ИСТИНА
			|	И ТаблицаСправочник.Магазин = &Магазин
			|	И НЕ ТаблицаСправочник.Наименование = """""
			, "Справочник.КассыККМ КАК", "Справочник." + Имя + " КАК")
			, "И ИСТИНА", ?(ИмяТаблицы = "Сотрудники"
				, "И НЕ ТаблицаСправочник.ЭтоГруппа И ТаблицаСправочник.Сотрудник И НЕ ТаблицаСправочник.Уволен"
				, "И ИСТИНА"))
			);
			Запрос.УстановитьПараметр("Магазин", ДанныеУзла.Магазин);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл

				СтрокаТаблицы = ДанныеОбмена[ИмяТаблицы].Добавить();
				СтрокаТаблицы.УникальныйИдентификатор = СокрЛП(Выборка.Ссылка.УникальныйИдентификатор());
				СтрокаТаблицы.Наименование = СокрЛП(Выборка.Наименование);

			КонецЦикла;

		Иначе

			ТекстОшибки = "Ошибка! Нет определения магазина для узла «" + УзелПолучатель + "».";
			ДанныеОбмена.СписокОшибок.Добавить(ТекстОшибки);

		КонецЕсли;

	КонецЕсли;

	Возврат ОбщегоНазначенияКлиентСервер.СериализоватьJSON(ДанныеОбмена);

КонецФункции // ПолучитьСоставСправочника()

//	LNK 20.03.2019 09:54:16
Функция СтруктураТаблицыТоваров()

	ТаблицаТоваров = Новый ТаблицаЗначений;

	ТаблицаТоваров.Колонки.Добавить("Код"          , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));
	ТаблицаТоваров.Колонки.Добавить("Наименование" , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));
	ТаблицаТоваров.Колонки.Добавить("ВидТовара"    , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));
	ТаблицаТоваров.Колонки.Добавить("Артикул"      , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));
	ТаблицаТоваров.Колонки.Добавить("Размер"       , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));
	ТаблицаТоваров.Колонки.Добавить("Сезонность"   , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));
	ТаблицаТоваров.Колонки.Добавить("ТорговаяМарка", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));
	ТаблицаТоваров.Колонки.Добавить("Цвет"         , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));
	ТаблицаТоваров.Колонки.Добавить("Возраст"      , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));
	ТаблицаТоваров.Колонки.Добавить("Пол"          , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));

	ТаблицаТоваров.Колонки.Добавить("Количество"        , Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("КоличествоМагазины", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("КоличествоСклады"  , Новый ОписаниеТипов("Число"));

	Возврат ТаблицаТоваров;

КонецФункции // СтруктураТаблицыТоваров()

#КонецОбласти



