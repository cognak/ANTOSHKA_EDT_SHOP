#Область ПроцедурыЗапросаДоступностиТоваров

//	LNK 02.04.2019 14:24:09
Функция RequestAvailability(RequestData)

	ВызватьИсключение "Отказано! Сервис отключен.";	//	LNK 26.07.2021 05:02:06

	УстановитьПривилегированныйРежим(Истина);

	КонтекстПриложения.РегистрацияВыполненияWebСервиса("MSDynCRM", "RequestAvailability", Лев(RequestData, 512));
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MSDynCRM\RequestAvailability", "in", RequestData);

	КлючиПолитики = ОбменMicrosoftDynamicsПовтИсп.УчетнаяПолитика(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);

	Если КлючиПолитики.РазрешитьОбменВходящий = Истина Тогда

		Попытка

			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(RequestData);
			ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();

			ТекстОшибки = "";	//	используем так же и для передачи "взад" предупреждений типа отсутствия ссылки по идентфикатору.

			Если ТипЗнч(ДанныеЗапроса) = Тип("Структура") И ДанныеЗапроса.Свойство("requestAvailability") Тогда

				Для каждого ДанныеДокумента Из ДанныеЗапроса.requestAvailability Цикл

					ЗапросДоступностиТоваров(ДанныеДокумента, ТекстОшибки);

				КонецЦикла;

			Иначе

				ТекстОшибки = "Получен неожиданный тип данных!" + Символы.ПС + ТекстОшибки;

			КонецЕсли;

		Исключение

			ТекстОшибки = ОписаниеОшибки() + Символы.ПС + ТекстОшибки;

		КонецПопытки;

	Иначе

		ТекстОшибки = ВходящийЗапрещён("MSDynCRM.RequestAvailability") + Символы.ПС + ТекстОшибки;

	КонецЕсли;

	Возврат ОтветНаЗапрос(ТекстОшибки);

КонецФункции

Процедура ЗапросДоступностиТоваров(ДанныеДокумента, ТекстОшибки)

	ДокументСсылка = Документы.ЗапросДоступностиТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеДокумента.IDD_requestAvailability));
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();

	Если ДокументОбъект = Неопределено Тогда

		ДокументОбъект = Документы.ЗапросДоступностиТоваров.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);

	КонецЕсли;

	ДокументОбъект.Дата = ТекущаяДата();
	ДокументОбъект.Организация = ПолучитьСсылкуРеквизита(ДанныеДокумента.legalEntity, Справочники.Организации, ТекстОшибки);
	ДокументОбъект.МагазинОтправитель = ПолучитьСсылкуРеквизита(ДанныеДокумента.storeSender, Справочники.Магазины, ТекстОшибки);
	ДокументОбъект.МагазинПолучатель  = ПолучитьСсылкуРеквизита(ДанныеДокумента.storeRecipient, Справочники.Магазины, ТекстОшибки);
	ДокументОбъект.ДокументОснование  = ПолучитьСсылкуРеквизита(ДанныеДокумента.IDD_sales, Документы.ЗаказПокупателя, ТекстОшибки);
//	ДокументОбъект.Комментарий        = СокрЛП(ДанныеДокумента.);
	ДокументОбъект.ТипДоставки        = ОбменMicrosoftDynamicsПовтИсп.КодыТиповДоставки("Код").Получить(ДанныеДокумента.typeDeliveryCode);
	ДокументОбъект.ОператорДоставки   = ОбменMicrosoftDynamicsПовтИсп.КодыОператоровДоставки("Код").Получить(ДанныеДокумента.operatorDelivery);
	ДокументОбъект.СтатусЗапроса      = ОбменMicrosoftDynamicsПовтИсп.КодыСтатусовЗапросов("Код").Получить(ДанныеДокумента.status);
	ДокументОбъект.ТовароТранспортнаяНакладная = СокрЛП(ДанныеДокумента.URL_NP);

	ДокументОбъект.Оплата.Очистить();
	СтрокаТабличнойЧасти = ДокументОбъект.Оплата.Добавить();
	СтрокаТабличнойЧасти.Сумма = ДанныеДокумента.costDeliveryOperator;

	КлючиПолитики = ОбменMicrosoftDynamicsПовтИсп.УчетнаяПолитика(ДокументОбъект.МагазинОтправитель);

	Если КлючиПолитики.РазрешитьОбменВходящий = Истина Тогда

		АктуальныеИдентификаторы = Новый Соответствие;

		Для каждого ДанныеСтроки Из ДанныеДокумента.itemAvailability Цикл

			СтрокаТабличнойЧасти = ДокументОбъект.Товары.Найти(ДанныеСтроки.IDD_itemAvailability, "УникальныйИдентификатор");

			Если СтрокаТабличнойЧасти = Неопределено Тогда

				СтрокаТабличнойЧасти = ДокументОбъект.Товары.Добавить();
				СтрокаТабличнойЧасти.УникальныйИдентификатор = ДанныеСтроки.IDD_itemAvailability;

			КонецЕсли;

			СтрокаТабличнойЧасти.Номенклатура = ПолучитьСсылкуРеквизита(ДанныеСтроки.IDN_SKU, Справочники.Номенклатура, ТекстОшибки);
			СтрокаТабличнойЧасти.КоличествоТребование = ДанныеСтроки.amount;
			СтрокаТабличнойЧасти.СтатусЗапроса = ОбменMicrosoftDynamicsПовтИсп.КодыСтатусовЗапросов("Код").Получить(ДанныеСтроки.applicationStatus);
			СтрокаТабличнойЧасти.Примечание = ДанныеСтроки.comment;

			Если СтрокаТабличнойЧасти.СтатусЗапроса.Пустая() Тогда	//	от CRM разработчиков невозможно добиться аккуратности работы. Ставим предохранитель.

				СтрокаТабличнойЧасти.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Подготовить;

			КонецЕсли;

			АктуальныеИдентификаторы.Вставить(ДанныеСтроки.IDD_itemAvailability, Истина);

		КонецЦикла;

	//	Очищаем от "неактуальных" идентификаторов.
		СтрокиУдалить = Новый Массив;

		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл

			Если АктуальныеИдентификаторы.Получить(СтрокаТабличнойЧасти.УникальныйИдентификатор) = Неопределено Тогда

				СтрокиУдалить.Добавить(СтрокаТабличнойЧасти);

			КонецЕсли;

		КонецЦикла;

		Для каждого СтрокаТабличнойЧасти Из СтрокиУдалить Цикл

			ДокументОбъект.Товары.Удалить(СтрокаТабличнойЧасти);

		КонецЦикла;

		Если ПустаяСтрока(ДокументОбъект.Номер) Тогда

			ДокументОбъект.УстановитьНовыйНомер();

		КонецЕсли;

		ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		ДокументОбъект.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);

		ТекстОшибкиЗаполнения = "";

		Если ДокументОбъект.ПроверитьЗаполнениеДокумента(ТекстОшибкиЗаполнения) Тогда

			НачатьТранзакцию();

			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);

			ЗаказыПокупателейСервер.УстановитьСостояниеЗапросаДоступностиТоваров(ДокументОбъект.Ссылка, Истина);

			ЗафиксироватьТранзакцию();

		Иначе

			ЗаписьЖурналаРегистрации("MSDynCRM.RequestAvailability", УровеньЖурналаРегистрации.Предупреждение
			, ДокументОбъект.Метаданные(), ДокументСсылка
			, "Ошибка заполнения:" + Символы.ПС + ТекстОшибкиЗаполнения
			, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

			ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
			+ "Запрос «" + ДанныеДокумента.IDD_requestAvailability + "» НЕ отработан по причине:" + Символы.ПС + ТекстОшибкиЗаполнения;

		КонецЕсли;

	Иначе

		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
		+ ВходящийЗапрещён("MSDynCRM.RequestAvailability «" + ДокументОбъект.МагазинОтправитель + "»");

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗаказаПокупателя

//	LNK 23.04.2019 14:08:25
Функция BuyersOrder(RequestData)

	ВызватьИсключение "Отказано! Сервис отключен.";	//	LNK 26.07.2021 05:02:06

	УстановитьПривилегированныйРежим(Истина);

	КонтекстПриложения.РегистрацияВыполненияWebСервиса("MSDynCRM", "BuyersOrder", Лев(RequestData, 512));
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MSDynCRM\BuyersOrder", "in", RequestData);

	КлючиПолитики = ОбменMicrosoftDynamicsПовтИсп.УчетнаяПолитика(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);

	Если КлючиПолитики.РазрешитьОбменВходящий = Истина Тогда

		Попытка

			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(RequestData);
			ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();

			КэшированныеЗначения = Новый Структура;
			ТекстОшибки = "";	//	используем так же и для передачи "взад" предупреждений типа отсутствия ссылки по идентфикатору.

			Если ТипЗнч(ДанныеЗапроса) = Тип("Структура") И ДанныеЗапроса.Свойство("sales") Тогда

				Для каждого ДанныеДокумента Из ДанныеЗапроса.sales Цикл

					ЗаказПокупателя(ДанныеДокумента, ТекстОшибки, КэшированныеЗначения);

				КонецЦикла;

			Иначе

				ТекстОшибки = "Получен неожиданный тип данных!" + Символы.ПС + ТекстОшибки;

			КонецЕсли;

		Исключение

			ТекстОшибки = ОписаниеОшибки() + Символы.ПС + ТекстОшибки;

		КонецПопытки;

	Иначе

		ТекстОшибки = ВходящийЗапрещён("MSDynCRM.SendBuyersOrder") + Символы.ПС + ТекстОшибки;

	КонецЕсли;

	Возврат ОтветНаЗапрос(ТекстОшибки);

КонецФункции

Процедура ЗаказПокупателя(ДанныеДокумента, ТекстОшибки, КэшированныеЗначения)

	ДокументСсылка = Документы.ЗаказПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеДокумента.IDD_sales));
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();

	Если ДокументОбъект = Неопределено Тогда

		ДокументОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);

		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.ДатаПродажиЖелаемая = ДокументОбъект.Дата;

		ДокументОбъект.УчитыватьНДС     = Истина;
		ДокументОбъект.ЦенаВключаетНДС  = Истина;
		ДокументОбъект.СкидкиРассчитаны = Истина;
		ДокументОбъект.УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.MSDynCRM;

	КонецЕсли;

	ДокументОбъект.Магазин     = ПолучитьСсылкуРеквизита(ДанныеДокумента.IDC_store, Справочники.Магазины, ТекстОшибки);

	КлючиПолитики = ОбменMicrosoftDynamicsПовтИсп.УчетнаяПолитика(ДокументОбъект.Магазин);

	Если КлючиПолитики.РазрешитьОбменВходящий Тогда

		ДокументОбъект.Организация = ПолучитьСсылкуРеквизита(ДанныеДокумента.legalEntity, Справочники.Организации, ТекстОшибки);
		ДокументОбъект.Контрагент  = ПолучитьСсылкуРеквизита(ДанныеДокумента.IDD_client, Справочники.Контрагенты, ТекстОшибки);
		ДокументОбъект.Склад       = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Магазин, "СкладПродажи");
		ДокументОбъект.Статус      = ОбменMicrosoftDynamicsПовтИсп.ПолучитьСтатусЗаказаПокупателя(ДанныеДокумента.statusSale);
		ДокументОбъект.НомерЗаказаНаСайте = СокрЛП(ДанныеДокумента.numberOrder);
		ДокументОбъект.ТипДоставки   = ОбменMicrosoftDynamicsПовтИсп.КодыТиповДоставки("Код").Получить(ДанныеДокумента.typeDeliveryCode);
		ДокументОбъект.СтатусОплаты  = ?(ДанныеДокумента.statusPayment = Истина, Перечисления.СтатусОплаты.Оплачен, Перечисления.СтатусОплаты.НеОплачен);
		ДокументОбъект.СуммаДоставки         = ДанныеДокумента.deliveryCost;
		ДокументОбъект.СуммаДоставкиОператор = ДанныеДокумента.deliveryCostOperator;

		ДокументОбъект.БонусБазаСписан  = ДанныеДокумента.sumBonusesUsedBase;
		ДокументОбъект.БонусАкцияСписан = ДанныеДокумента.sumBonusesUsedPromo;

		СтруктураДействийТовары = Новый Структура(
			"ПересчитатьСуммуНДС"
			, ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ДокументОбъект));

		АктуальныеИдентификаторы = Новый Соответствие;

		Для каждого ДанныеСтроки Из ДанныеДокумента.saleItems Цикл

			СтрокаТабличнойЧасти = ДокументОбъект.Товары.Найти(ДанныеСтроки.IDD_saleItems, "УникальныйИдентификатор");

			Если СтрокаТабличнойЧасти = Неопределено Тогда

				СтрокаТабличнойЧасти = ДокументОбъект.Товары.Добавить();
				СтрокаТабличнойЧасти.УникальныйИдентификатор = ДанныеСтроки.IDD_saleItems;

			КонецЕсли;

			//= ДанныеДокумента.IDD_itemAvailability;
			СтрокаТабличнойЧасти.Номенклатура = ПолучитьСсылкуРеквизита(ДанныеСтроки.SKU, Справочники.Номенклатура, ТекстОшибки);
			СтрокаТабличнойЧасти.Количество = ДанныеСтроки.amount;
			СтрокаТабличнойЧасти.КоличествоУпаковок = ДанныеСтроки.amount;
			СтрокаТабличнойЧасти.Цена = ДанныеСтроки.price;
			СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = ДанныеСтроки.discountHrn;
			СтрокаТабличнойЧасти.СуммаРучнойСкидки         = ДанныеСтроки.manualDiscHrn;
			СтрокаТабличнойЧасти.СтавкаНДС = ОбменMicrosoftDynamicsПовтИсп.ПолучитьСтавкуНДС(ДанныеСтроки.vatGroup);

			СтрокаТабличнойЧасти.БонусБазаНачислен  = ДанныеСтроки.bonusesAccruedBase;
			СтрокаТабличнойЧасти.БонусАкцияНачислен = ДанныеСтроки.bonusesAccruedPromo;
			СтрокаТабличнойЧасти.БонусБазаСписан    = ДанныеСтроки.bonusesUsedBase;
			СтрокаТабличнойЧасти.БонусАкцияСписан   = ДанныеСтроки.bonusesUsedPromo;

		//	Подразумеваем, что сумма включает НДС в любом случае.
			СтрокаТабличнойЧасти.Сумма = ДанныеСтроки.itemTotalSumWithVat;

			ОбработкаТабличнойЧастиТоварыСервер.ПересчитатьСуммуНДСВСтрокеТЧСервер(СтрокаТабличнойЧасти, СтруктураДействийТовары, КэшированныеЗначения);

			СтрокаТабличнойЧасти.Резервировать = Истина;

			АктуальныеИдентификаторы.Вставить(ДанныеСтроки.IDD_saleItems, Истина);

		КонецЦикла;

	//	Очищаем от "неактуальных" идентификаторов.
		СтрокиУдалить = Новый Массив;

		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл

			Если АктуальныеИдентификаторы.Получить(СтрокаТабличнойЧасти.УникальныйИдентификатор) = Неопределено Тогда

				СтрокиУдалить.Добавить(СтрокаТабличнойЧасти);

			КонецЕсли;

		КонецЦикла;

		Для каждого СтрокаТабличнойЧасти Из СтрокиУдалить Цикл

			ДокументОбъект.Товары.Удалить(СтрокаТабличнойЧасти);

		КонецЦикла;

		Если ПустаяСтрока(ДокументОбъект.Номер) Тогда

			ДокументОбъект.УстановитьНовыйНомер();

		КонецЕсли;

		ДокументОбъект.СуммаДокумента = ДокументОбъект.Товары.Итог("Сумма");

		Если ДокументОбъект.СтатусОплаты = Перечисления.СтатусОплаты.Оплачен Тогда

			ДокументОбъект.СуммаОплаты = ДокументОбъект.СуммаДокумента;

		КонецЕсли;

		ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		ДокументОбъект.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);

		ДокументОбъект.ПометкаУдаления = Ложь;	//	если получили, то нужно провести!

		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение
		, ?(ДокументОбъект.ЭтоНовый(), РежимПроведенияДокумента.Оперативный, РежимПроведенияДокумента.Неоперативный));

	Иначе

		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
		+ ВходящийЗапрещён("MSDynCRM.BuyersOrder «" + ДокументОбъект.Магазин + "»");

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ИнформацияПоЦенникам

//	LNK 11.07.2019 13:45:54
Функция LabelData(RequestData)

	ВызватьИсключение "Отказано! Сервис отключен.";	//	LNK 26.07.2021 05:02:06

//	Информация о ценниках

	УстановитьПривилегированныйРежим(Истина);

	КонтекстПриложения.РегистрацияВыполненияWebСервиса("MSDynCRM", "LabelData", Лев(RequestData, 512));
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MSDynCRM\LabelData", "in", RequestData);

	КлючиПолитики = ОбменMicrosoftDynamicsПовтИсп.УчетнаяПолитика(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);

	Если ИСТИНА ИЛИ КлючиПолитики.РазрешитьОбменВходящий Тогда

		Попытка

			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(RequestData);
			ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();

			ТекстОшибки = "";	//	используем так же и для передачи "взад" предупреждений типа отсутствия ссылки по идентфикатору.

			Если ТипЗнч(ДанныеЗапроса) = Тип("Структура") И ДанныеЗапроса.Свойство("data") Тогда

				ТаблицаВходящая = Новый ТаблицаЗначений;
				ТаблицаВходящая.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));

				ТаблицаВходящая.Колонки.Добавить("IDD_priceTag", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
				ТаблицаВходящая.Колонки.Добавить("IDC_store"   , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
				ТаблицаВходящая.Колонки.Добавить("SKU"         , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));

				ТаблицаВходящая.Колонки.Добавить("startDate", Новый ОписаниеТипов("Дата"));		//	Период
				ТаблицаВходящая.Колонки.Добавить("validDate", Новый ОписаниеТипов("Дата"));		//	ДатаОкончания

				ТаблицаВходящая.Колонки.Добавить("promoPrice"       , Новый ОписаниеТипов("Число"));	//	Цена
				ТаблицаВходящая.Колонки.Добавить("percentDiscount"  , Новый ОписаниеТипов("Число"));	//	ПроцентАвтоматическойСкидки
				ТаблицаВходящая.Колонки.Добавить("bonusesAcrualBase", Новый ОписаниеТипов("Число"));	//	БонусБазаНачислен
				ТаблицаВходящая.Колонки.Добавить("bonusesUsedAction", Новый ОписаниеТипов("Число"));	//	БонусАкцияСписан

				ТаблицаВходящая.Колонки.Добавить("typePromo"   , Новый ОписаниеТипов("Массив"));			//	ТипСкидкиНаценки

				ТаблицаВходящая.Колонки.Добавить("Магазин"         , Новый ОписаниеТипов("СправочникСсылка.Магазины"));
				ТаблицаВходящая.Колонки.Добавить("Номенклатура"    , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
				ТаблицаВходящая.Колонки.Добавить("ТипСкидкиНаценки", Новый ОписаниеТипов("ПеречислениеСсылка.ТипСкидкиНаценки"));

				НомерСтроки = 0;

				Для каждого ДанныеЗаписи Из ДанныеЗапроса.data Цикл

					СтрокаТаблицы = ТаблицаВходящая.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеЗаписи,, "startDate, validDate, typePromo");

					СтрокаТаблицы.startDate = ОбменMicrosoftDynamicsКлиентСервер.ПривестиДату(ДанныеЗаписи.startDate);
					СтрокаТаблицы.validDate = ОбменMicrosoftDynamicsКлиентСервер.ПривестиДату(ДанныеЗаписи.validDate);

					Для каждого Значение Из ДанныеЗаписи.typePromo Цикл

						СтрокаТаблицы.typePromo.Добавить(Формат(Значение, "ЧН=000000000; ЧГ="));

					КонецЦикла;

					НомерСтроки = НомерСтроки + 1;
					СтрокаТаблицы.НомерСтроки = НомерСтроки;

					Если ТаблицаВходящая.Количество() % 500 = 0 Тогда

						УстановитьИнформациюДляЦенников(ТаблицаВходящая);
						ТаблицаВходящая.Очистить();

					КонецЕсли;

				КонецЦикла;

				Если НЕ ТаблицаВходящая.Количество() = 0 Тогда

					УстановитьИнформациюДляЦенников(ТаблицаВходящая);

				КонецЕсли;

			Иначе

				ТекстОшибки = "Получен неожиданный тип данных!" + Символы.ПС + ТекстОшибки;

			КонецЕсли;

		Исключение

			ТекстОшибки = ОписаниеОшибки() + Символы.ПС + ТекстОшибки;

		КонецПопытки;

	Иначе

		ТекстОшибки = ВходящийЗапрещён("MSDynCRM.LabelData") + Символы.ПС + ТекстОшибки;

	КонецЕсли;

	Возврат ОтветНаЗапрос(ТекстОшибки);

КонецФункции

Процедура УстановитьИнформациюДляЦенников(ТаблицаВходящая)

	ПривестиТаблицуВходящую(ТаблицаВходящая);

	НаборЗаписей = РегистрыСведений.ИнформацияДляЦенников.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);

	Для каждого СтрокаВходящая Из ТаблицаВходящая Цикл

		НаборЗаписей.Очистить();
		НаборЗаписей.ОбменДанными.Получатели.Очистить();

		Если СтрокаВходящая.Магазин.Пустая() Тогда

				ОбменДаннымиСервер.УстановитьВсехПолучателей(НаборЗаписей.ОбменДанными.Получатели, "ПоМагазину");

		Иначе	ОбменДаннымиСервер.УстановитьПолучателейМагазина(НаборЗаписей.ОбменДанными.Получатели, СтрокаВходящая.Магазин);

		КонецЕсли;

		НаборЗаписей.Отбор.Период.Установить(СтрокаВходящая.startDate);
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаВходящая.Номенклатура);
		НаборЗаписей.Отбор.Магазин.Установить(СтрокаВходящая.Магазин);

		ЗаписьНабора = НаборЗаписей.Добавить();

	//	Измерения
		ЗаписьНабора.Период       = НаборЗаписей.Отбор.Период.Значение;
		ЗаписьНабора.Номенклатура = НаборЗаписей.Отбор.Номенклатура.Значение;
		ЗаписьНабора.Магазин      = НаборЗаписей.Отбор.Магазин.Значение;

	//	Ресурсы
		ЗаписьНабора.БонусАкцияСписан  = СтрокаВходящая.bonusesUsedAction;
		ЗаписьНабора.БонусБазаНачислен = СтрокаВходящая.bonusesAcrualBase;
		ЗаписьНабора.ДатаОкончания     = СтрокаВходящая.validDate;
		ЗаписьНабора.ПроцентАвтоматическойСкидки = СтрокаВходящая.percentDiscount;
		ЗаписьНабора.ТипСкидкиНаценки  = ПолучитьТипСкидкиНаценки(СтрокаВходящая.typePromo);
		ЗаписьНабора.Цена              = СтрокаВходящая.promoPrice;

	//	Реквизиты
		ЗаписьНабора.УникальныйИдентификатор = СтрокаВходящая.IDD_priceTag;
		ЗаписьНабора.ДатаИзменения = ТекущаяДата();

		НаборЗаписей.Записать();

	КонецЦикла;

КонецПроцедуры

Процедура ПривестиТаблицуВходящую(ТаблицаВходящая)

	#Если _ Тогда
	ТаблицаВходящая = Новый ТаблицаЗначений;
	#КонецЕсли

	ТаблицаМагазины = ТаблицаВходящая.Скопировать(, "IDC_store, Магазин");
	ТаблицаМагазины.Свернуть("IDC_store, Магазин");
	ТаблицаМагазины.Индексы.Добавить("IDC_store");

	Для каждого СтрокаМагазина Из ТаблицаМагазины Цикл

		Если НЕ ПустаяСтрока(СтрокаМагазина.IDC_store) Тогда

			СтрокаМагазина.Магазин = Справочники.Магазины.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаМагазина.IDC_store));

		КонецЕсли;

	КонецЦикла;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаВходящая.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВходящая.SKU КАК SKU
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаВходящая КАК ТаблицаВходящая
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	SKU
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Фильтр.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСправочник.Ссылка КАК Номенклатура,
	|	Фильтр.SKU КАК SKU
	|ИЗ
	|	Источник КАК Фильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
	|		ПО Фильтр.SKU = ТаблицаСправочник.IDN
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	);
	Запрос.УстановитьПараметр("ТаблицаВходящая", ТаблицаВходящая);
	
	ТоварыВыборка = Запрос.Выполнить().Выбрать();
	
	Пока ТоварыВыборка.Следующий() Цикл

		СтрокаВходящая = ТаблицаВходящая[ТоварыВыборка.НомерСтроки - 1];
		СтрокаВходящая.Номенклатура = ТоварыВыборка.Номенклатура;

		Если НЕ ПустаяСтрока(СтрокаВходящая.IDC_store) Тогда

			СтрокаВходящая.Магазин = ТаблицаМагазины.Найти(СтрокаВходящая.IDC_store, "IDC_store").Магазин;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//	Перечисления.ТипСкидкиНаценки
//	100000000 - НаПервуюПозицию, 
//	100000001 - НачислениеБонусов, 
//	100000002 - СписаниеБонусов, 
//	100000000 + 100000001 – НаПервуюПозициюНачислениеБонусов, 
//	100000000 + 100000002 – НаПервуюПозициюСписаниеБонусов.
//
Функция ПолучитьТипСкидкиНаценки(СписокКодов)	//	LNK 17.07.2019 14:50:59

	ТипСкидкиНаценки = Перечисления.ТипСкидкиНаценки.ПустаяСсылка();

	Если СписокКодов.Количество() = 1 Тогда

		Если СписокКодов[0] = "100000000" Тогда

			ТипСкидкиНаценки = Перечисления.ТипСкидкиНаценки.НаПервуюПозицию;

		ИначеЕсли СписокКодов[0] = "100000001" Тогда

			ТипСкидкиНаценки = Перечисления.ТипСкидкиНаценки.НачислениеБонусов;

		ИначеЕсли СписокКодов[0] = "100000002" Тогда

			ТипСкидкиНаценки = Перечисления.ТипСкидкиНаценки.СписаниеБонусов;

		КонецЕсли;

	ИначеЕсли СписокКодов.Количество() = 2 Тогда

		Если СписокКодов[0] = "100000000" И СписокКодов[1] = "100000001" Тогда

			ТипСкидкиНаценки = Перечисления.ТипСкидкиНаценки.НаПервуюПозициюНачислениеБонусов;

		ИначеЕсли СписокКодов[0] = "100000000" И СписокКодов[1] = "100000002" Тогда

			ТипСкидкиНаценки = Перечисления.ТипСкидкиНаценки.НаПервуюПозициюСписаниеБонусов;

		КонецЕсли;

	КонецЕсли;

	Возврат ТипСкидкиНаценки;

КонецФункции // ПолучитьТипСкидкиНаценки()

#КонецОбласти

//	LNK 13.08.2019 12:31:02
Функция PutCustomer(RequestData)

	ВызватьИсключение "Отказано! Сервис отключен.";	//	LNK 26.07.2021 05:02:06

	УстановитьПривилегированныйРежим(Истина);

	КонтекстПриложения.РегистрацияВыполненияWebСервиса("MSDynCRM", "PutCustomer", Лев(RequestData, 512));

	КлючиПолитики = ОбменMicrosoftDynamicsПовтИсп.УчетнаяПолитика(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);

	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() И КлючиПолитики.РазрешитьОбменВходящий = Истина Тогда

		КонтекстПриложения.ЖурналированиеВходящихЗапросов("MSDynCRM\PutCustomer", "in", RequestData);

		Попытка

			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(RequestData);
			ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();

			ТекстОшибки = "";	//	используем так же и для передачи "взад" предупреждений типа отсутствия ссылки по идентфикатору.

			Если ТипЗнч(ДанныеЗапроса) = Тип("Структура") И ДанныеЗапроса.Свойство("IDC_Client") Тогда

				ДанныеКонтрагента = ОбменMicrosoftDynamicsСервер.ЗаполнитьСтруктуруПоВнешнимДанным(, ДанныеЗапроса);

				Если Справочники.Контрагенты.КлючиПоискаУказаны(ДанныеКонтрагента) Тогда

					СоставДанных = Справочники.Контрагенты.НайтиКонтрагентаПоДаннымCRM(ДанныеКонтрагента);

					Если ДанныеКонтрагента.Блокирован = Истина
					И НЕ СоставДанных.Контрагент = Неопределено
					И НЕ ПустаяСтрока(СоставДанных.IDD)
					И	 ПустаяСтрока(ДанныеКонтрагента.УИ.IDC)
					Тогда
					//	то есть приехала блокировка левого (вероятно от Magento!) пустого контрагента.
					//	А этот клиент в рознице есть, и он имеет IDD, то есть синхронизирован с MS CRM.
					//	ничего не делаем, но фиксируем в журнале событий.

						ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала(, Истина) + ".WS"
						, УровеньЖурналаРегистрации.Предупреждение
						, Метаданные.ПланыОбмена.ОбменMicrosoftDynamics
						, СоставДанных.Контрагент
						,
						, "Отклонены данные по входящему IDD [" + ДанныеКонтрагента.УИ.IDD + "]" + Символы.ПС + RequestData
						, , Ложь);

					Иначе

						СоставДанных = Справочники.Контрагенты.ПрименитьКонтрагентаПоДаннымCRM(ДанныеКонтрагента, СоставДанных,, Ложь);

						Если СоставДанных.Ошибка Тогда

							Если НЕ ПустаяСтрока(СоставДанных.ОписаниеОшибки) Тогда

									ТекстОшибки = СоставДанных.ОписаниеОшибки;

							Иначе	ТекстОшибки = "При поиске/записи контрагента возникла неизвестная ошибка.";

							КонецЕсли;
							
						КонецЕсли;

						ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала(, Истина) + ".WS"
						, ?(СоставДанных.Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Примечание)
						, Метаданные.ПланыОбмена.ОбменMicrosoftDynamics
						, СоставДанных.Контрагент
						,
						, ?(СоставДанных.Ошибка, "Error: " + ТекстОшибки + Символы.ПС, "Применено:") + Символы.ПС + RequestData
						,
						, Ложь);

					КонецЕсли;

				Иначе

					ТекстОшибки = "Отказано! Ключи поиска контрагента НЕ указаны (IDC, IDD, IDN или номер телефона).";

				КонецЕсли;

			Иначе

				ТекстОшибки = "Получен неожиданный тип данных (" + ТипЗнч(ДанныеЗапроса) + ")!";

			КонецЕсли;

		Исключение

			ТекстОшибки = ОписаниеОшибки() + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС + ТекстОшибки);

		КонецПопытки;

		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда

			ЖурналСобытий.Регистрация(ОбменMicrosoftDynamicsПовтИсп.ИмяСобытияЖурнала(Перечисления.ТипыРегистрацийMicrosoftDynamics.Контрагенты, Истина) + ".PutCustomer"
			, УровеньЖурналаРегистрации.Ошибка
			, Метаданные.ПланыОбмена.ОбменMicrosoftDynamics
			,
			,
			, "Ошибка получения:" + Символы.ПС + ТекстОшибки + Символы.ПС
			+ ОбщегоНазначенияКлиентСервер.REPEAT("-", 100) + Символы.ПС + RequestData
			,, Истина);

		КонецЕсли;

	Иначе

		ТекстОшибки = ВходящийЗапрещён("MSDynCRM.PutCustomer") + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС + ТекстОшибки);

	КонецЕсли;

	Возврат ОтветНаЗапрос(ТекстОшибки);

КонецФункции

#Область ПоддержкаРазличнойСлужебнойИнформации

//	LNK 07.11.2019 12:30:46
Функция MiscellaniusInfo(Command = "")

	ВызватьИсключение "Отказано! Сервис отключен.";	//	LNK 26.07.2021 05:02:06

	УстановитьПривилегированныйРежим(Истина);

	КонтекстПриложения.РегистрацияВыполненияWebСервиса("MSDynCRM", "MiscellaniusInfo", Лев(Command, 512));
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MSDynCRM\MiscellaniusInfo", "in", Command);

	КлючиПолитики = ОбменMicrosoftDynamicsПовтИсп.УчетнаяПолитика(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда// И КлючиПолитики.РазрешитьОбменВходящий = Истина Тогда

		Если ПустаяСтрока(Command) ИЛИ НРег(Command) = "exchangeinfo" Тогда

			ПолучитьСостояниеОбменаДанными(ЗаписьJSON);

		Иначе

			JSON.ЗаписатьСвойство("error", "unknown command", ЗаписьJSON);

		КонецЕсли;

	Иначе

		JSON.ЗаписатьСвойство("error", ВходящийЗапрещён("MSDynCRM.MiscellaniusInfo"), ЗаписьJSON);

	КонецЕсли;

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	ТекстОтвета = ЗаписьJSON.Закрыть();

	Возврат ТекстОтвета;

КонецФункции

Процедура ПолучитьСостояниеОбменаДанными(ЗаписьJSON)

	#Если _ Тогда
	ЗаписьJSON = Новый ЗаписьJSON;
	#КонецЕсли

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Ведущая.Код КАК Код,
	|	Ведущая.ТипРегистрации КАК ТипРегистрации,
	|	Ведущая.НомерОтправленного КАК НомерОтправленного,
	|	Ведущая.НомерПринятого КАК НомерПринятого,
	|	СУММА(ЕСТЬNULL(Назначения.Количество, 0)) КАК Количество
	|ИЗ
	|	ПланОбмена.ОбменMicrosoftDynamics КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаРегистраций.ТипРегистрации КАК ТипРегистрации,
	|			КОЛИЧЕСТВО(ТаблицаРегистраций.Измерение_1) КАК Количество
	|		ИЗ
	|			РегистрСведений.РегистрацияMicrosoftDynamics.Изменения КАК ТаблицаРегистраций
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаРегистраций.ТипРегистрации
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацийMicrosoftDynamics.ЗапросДоступности),
	|			КОЛИЧЕСТВО(ТаблицаРегистраций.ЗапросДоступностиТоваров)
	|		ИЗ
	|			РегистрСведений.СостояниеЗапросаДоступностиТоваров.Изменения КАК ТаблицаРегистраций
	|		ГДЕ
	|			ТаблицаРегистраций.Узел ССЫЛКА ПланОбмена.ОбменMicrosoftDynamics
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацийMicrosoftDynamics.СправочникиДругие),
	|			КОЛИЧЕСТВО(ТаблицаРегистраций.Ссылка)
	|		ИЗ
	|			Справочник.ИменаЛюдей.Изменения КАК ТаблицаРегистраций
	|		ГДЕ
	|			ТаблицаРегистраций.Узел ССЫЛКА ПланОбмена.ОбменMicrosoftDynamics
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацийMicrosoftDynamics.Контрагенты),
	|			КОЛИЧЕСТВО(ТаблицаРегистраций.Ссылка)
	|		ИЗ
	|			Справочник.ИнформационныеКарты.Изменения КАК ТаблицаРегистраций
	|		ГДЕ
	|			ТаблицаРегистраций.Узел ССЫЛКА ПланОбмена.ОбменMicrosoftDynamics
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацийMicrosoftDynamics.Контрагенты),
	|			КОЛИЧЕСТВО(ТаблицаРегистраций.Ссылка)
	|		ИЗ
	|			Справочник.Контрагенты.Изменения КАК ТаблицаРегистраций
	|		ГДЕ
	|			ТаблицаРегистраций.Узел ССЫЛКА ПланОбмена.ОбменMicrosoftDynamics
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацийMicrosoftDynamics.Магазины),
	|			КОЛИЧЕСТВО(ТаблицаРегистраций.Ссылка)
	|		ИЗ
	|			Справочник.Магазины.Изменения КАК ТаблицаРегистраций
	|		ГДЕ
	|			ТаблицаРегистраций.Узел ССЫЛКА ПланОбмена.ОбменMicrosoftDynamics
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацийMicrosoftDynamics.Магазины),
	|			КОЛИЧЕСТВО(ТаблицаРегистраций.Ссылка)
	|		ИЗ
	|			Справочник.Склады.Изменения КАК ТаблицаРегистраций
	|		ГДЕ
	|			ТаблицаРегистраций.Узел ССЫЛКА ПланОбмена.ОбменMicrosoftDynamics
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацийMicrosoftDynamics.Номенклатура),
	|			КОЛИЧЕСТВО(ТаблицаРегистраций.Ссылка)
	|		ИЗ
	|			Справочник.Номенклатура.Изменения КАК ТаблицаРегистраций
	|		ГДЕ
	|			ТаблицаРегистраций.Узел ССЫЛКА ПланОбмена.ОбменMicrosoftDynamics
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацийMicrosoftDynamics.Документы),
	|			КОЛИЧЕСТВО(ТаблицаРегистраций.Ссылка)
	|		ИЗ
	|			Документ.ЧекККМ.Изменения КАК ТаблицаРегистраций
	|		ГДЕ
	|			ТаблицаРегистраций.Узел ССЫЛКА ПланОбмена.ОбменMicrosoftDynamics) КАК Назначения
	|		ПО Ведущая.ТипРегистрации = Назначения.ТипРегистрации
	|ГДЕ
	|	НЕ(Ведущая.ЭтотУзел
	|				ИЛИ Ведущая.ПометкаУдаления)
	|
	|СГРУППИРОВАТЬ ПО
	|	Ведущая.Код,
	|	Ведущая.ТипРегистрации,
	|	Ведущая.НомерОтправленного,
	|	Ведущая.НомерПринятого
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код"
	);
	Результаты = Запрос.ВыполнитьПакет();

	ЗаписьJSON.ЗаписатьИмяСвойства("ExchangePlan");

	ЗаписьJSON.ЗаписатьНачалоМассива();

	Выборка = Результаты[0].Выбрать();

	Пока Выборка.Следующий() Цикл

		ЗаписьJSON.ЗаписатьНачалоОбъекта();

			JSON.ЗаписатьСвойство("code", СокрЛП(Выборка.Код), ЗаписьJSON);
			JSON.ЗаписатьСвойство("type", ОбщегоНазначенияКлиентСервер.РеквизитПеречисления(Выборка.ТипРегистрации), ЗаписьJSON);
			JSON.ЗаписатьСвойство("messageNumber", Выборка.НомерОтправленного, ЗаписьJSON);
			JSON.ЗаписатьСвойство("count", Выборка.Количество, ЗаписьJSON);

		ЗаписьJSON.ЗаписатьКонецОбъекта();

	КонецЦикла;

	ЗаписьJSON.ЗаписатьКонецМассива();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСсылкуРеквизита(Идентификатор, МенеджерКласса, ТекстОшибки)

	Перем Значение;

	Если НЕ ПустаяСтрока(Идентификатор) Тогда

		Если МенеджерКласса = Справочники.Организации Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаОрганизации.Ссылка КАК Значение,
			|	1 КАК Приоритет
			|ИЗ
			|	Справочник.Организации КАК ТаблицаОрганизации
			|ГДЕ
			|	ТаблицаОрганизации.КодПоЕДРПОУ = &Идентификатор
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаНалогообложение.Организация,
			|	0
			|ИЗ
			|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних КАК ТаблицаНалогообложение
			|ГДЕ
			|	ТаблицаНалогообложение.ИННПлательщикаНДС = &Идентификатор
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет УБЫВ"
			);
			Запрос.УстановитьПараметр("Идентификатор", Идентификатор);

			Выборка = Запрос.Выполнить().Выбрать();

			Если Выборка.Следующий() Тогда

				Значение = Выборка.Значение;

			Иначе

				ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
				+ "Организация по коду «" + Идентификатор + "» НЕ обнаружена.";

			КонецЕсли;

		ИначеЕсли МенеджерКласса = Справочники.Контрагенты Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаСоответствий.Ссылка КАК Значение
			|ИЗ
			|	РегистрСведений.СоответствияОбъектовУчетныхСистем КАК ТаблицаСоответствий
			|ГДЕ
			|	ТаблицаСоответствий.Ссылка ССЫЛКА Справочник.Контрагенты
			|	И ТаблицаСоответствий.УникальныйИдентификаторПриемника = &IDD
			|	И ТаблицаСоответствий.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.MSDynCRM)"
			);
			Запрос.УстановитьПараметр("IDD", Идентификатор);

			Выборка = Запрос.Выполнить().Выбрать();

			Если Выборка.Следующий() Тогда

				Значение = Выборка.Значение;

			Иначе

				ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
				+ "Контрагент по коду «" + Идентификатор + "» НЕ обнаружена.";

				Значение = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));

				НаборЗаписей = РегистрыСведений.СоответствияОбъектовУчетныхСистем.СоздатьНаборЗаписей();
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				НаборЗаписей.Отбор.Ссылка.Установить(Значение);
				НаборЗаписей.Отбор.УчетнаяСистема.Установить(Перечисления.УчетныеСистемыКомпании.MSDynCRM);

				ОбменДаннымиСервер.УстановитьВсехПолучателей(НаборЗаписей.ОбменДанными.Получатели, "ПоМагазину");

				ЗаписьНабора = НаборЗаписей.Добавить();

				ЗаписьНабора.Ссылка = НаборЗаписей.Отбор.Ссылка.Значение;
				ЗаписьНабора.УчетнаяСистема = НаборЗаписей.Отбор.УчетнаяСистема.Значение;

				ЗаписьНабора.УникальныйИдентификаторИсточника = СокрЛП(ЗаписьНабора.Ссылка.УникальныйИдентификатор());
				ЗаписьНабора.УникальныйИдентификаторПриемника = Идентификатор;

				ЗаписьНабора.ДатаИзменения = ТекущаяДата();

				НаборЗаписей.Записать();

			КонецЕсли;

		ИначеЕсли МенеджерКласса = Справочники.Номенклатура Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаСправочник.Ссылка КАК Значение
			|ИЗ
			|	Справочник.Номенклатура КАК ТаблицаСправочник
			|ГДЕ
			|	ТаблицаСправочник.IDN = &Идентификатор
			|	И НЕ ТаблицаСправочник.ЭтоГруппа"
			);
			Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда

				Значение = Выборка.Значение;

			Иначе

				ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
				+ "Номенклатура по IDN «" + Идентификатор + "» НЕ обнаружена.";

			КонецЕсли;

		Иначе

			Значение = МенеджерКласса.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));

			Если Значение.ПолучитьОбъект() = Неопределено Тогда

				ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
				+ "Идентификатор «" + Идентификатор + "» НЕ обнаружен в данных [" + Значение.Метаданные().ПолноеИмя() + "]"

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат Значение;

КонецФункции // ПолучитьСсылкуРеквизита()

Функция ОтветНаЗапрос(ТекстОшибки)	//	LNK 03.04.2019 12:11:13

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	JSON.ЗаписатьСвойство("error", СокрЛП(ТекстОшибки), ЗаписьJSON);
	ЗаписьJSON.ЗаписатьКонецОбъекта();

	Возврат ЗаписьJSON.Закрыть();

КонецФункции // ОтветНаЗапрос()

//	LNK 08.11.2019 08:38:49
Функция ВходящийЗапрещён(Префикс)

	Возврат Префикс + " - входящий траффик НЕ разрешён.";

КонецФункции

#КонецОбласти










