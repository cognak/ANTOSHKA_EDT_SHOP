#Область ОбработчикиПроцедурСервиса

//	LNK 07.08.2018 11:36:00
Функция AssignAccumulation(RequestData)

	УстановитьПривилегированныйРежим(Истина);

	КонтекстПриложения.РегистрацияВыполненияWebСервиса("InfoNode", "AssignAccumulation", RequestData);

	СоставНакопления = Новый Структура;

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(RequestData);
	
	ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON);  


	Возврат Истина;

КонецФункции

//	LNK 11.05.2018 10:06:41
Функция Coupon(Number, Command)

	УстановитьПривилегированныйРежим(Истина);

	КонтекстПриложения.РегистрацияВыполненияWebСервиса("InfoNode", "Coupon", Number, Command);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Ведущая.Number КАК Number,
	|	ЕСТЬNULL(ТаблицаСправочник.Ссылка, ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)) КАК СерийныйНомер
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	(ВЫБРАТЬ
	|		&Number КАК Number) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерийныеНомера КАК ТаблицаСправочник
	|		ПО Ведущая.Number = ТаблицаСправочник.КодСерийногоНомера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведущая.Number КАК Number,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистра.Использован ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ТаблицаРегистра.Использован = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Used,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаРегистра.СерийныйНомер, ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Exist,
	|	Ведущая.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	Фильтр КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СерийныеНомераДляАкций КАК ТаблицаРегистра
	|		ПО (НЕ ТаблицаРегистра.СерийныйНомер = ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка))
	|			И Ведущая.СерийныйНомер = ТаблицаРегистра.СерийныйНомер"
	);
	Запрос.УстановитьПараметр("Number", Number);

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

		ЗаписьJSON.ЗаписатьИмяСвойства("Number");
		ЗаписьJSON.ЗаписатьЗначение(Number);

		ЗаписьJSON.ЗаписатьИмяСвойства("Command");
		ЗаписьJSON.ЗаписатьЗначение(Command);

		ЗаписьJSON.ЗаписатьИмяСвойства("Exist");
		ЗаписьJSON.ЗаписатьЗначение(Выборка.Exist);

	Если НРег(Command) = "getinfo" Тогда

		ЗаписьJSON.ЗаписатьИмяСвойства("Used");
		ЗаписьJSON.ЗаписатьЗначение(Выборка.Used);

	ИначеЕсли НРег(Command) = "setused" Тогда

		Если Выборка.Exist = 1 И Выборка.Used = 0 Тогда

			НаборЗаписей = РегистрыСведений.СерийныеНомераДляАкций.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СерийныйНомер.Установить(Выборка.СерийныйНомер);
			НаборЗаписей.Прочитать();

			Для каждого ЗаписьНабора Из НаборЗаписей Цикл

				ЗаписьНабора.Использован = Истина;

			КонецЦикла;

			НаборЗаписей.Записать();

			ЗаписьJSON.ЗаписатьИмяСвойства("Used");
			ЗаписьJSON.ЗаписатьЗначение(1);

		Иначе

			ЗаписьJSON.ЗаписатьИмяСвойства("Used");
			ЗаписьJSON.ЗаписатьЗначение(Выборка.Used);

		КонецЕсли;

	КонецЕсли;

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

//	LNK 03.02.2020 14:57:48
Функция CreditProgram(Command, SKU)

	УстановитьПривилегированныйРежим(Истина);

	КонтекстПриложения.РегистрацияВыполненияWebСервиса("InfoNode", "CreditProgram", Command, SKU);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	Если НРег(Command) = "products" Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСправочник.IDN КАК IDN,
		|	ТаблицаСправочник.Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ Фильтр
		|ИЗ
		|	Справочник.Номенклатура КАК ТаблицаСправочник
		|ГДЕ
		|	ТаблицаСправочник.IDN В(&СписокКодов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ведущая.IDN КАК IDN,
		|	Ведущая.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ТаблицаСегменты.Сегмент, ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)) КАК Сегмент
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Фильтр КАК Ведущая
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК ТаблицаСегменты
		|		ПО Ведущая.Номенклатура = ТаблицаСегменты.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Сегмент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Фильтр
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ведущая.IDN КАК IDN,
		|	ЕСТЬNULL(ТабличнаяЧасть.Ссылка, ЗНАЧЕНИЕ(Справочник.УслугиБанка.ПустаяСсылка)) КАК УслугаБанка,
		|	Ведущая.Номенклатура КАК Номенклатура,
		|	Ведущая.Сегмент КАК Сегмент
		|ПОМЕСТИТЬ Назначено
		|ИЗ
		|	Товары КАК Ведущая
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиБанка.НоменклатураПредоставления КАК ТабличнаяЧасть
		|		ПО (ТабличнаяЧасть.Ссылка.ТипУслуги = ЗНАЧЕНИЕ(Перечисление.ТипыУслугБанка.ОплатаЧастями))
		|			И (Ведущая.Номенклатура = ТабличнаяЧасть.Номенклатура
		|				ИЛИ Ведущая.Сегмент = ТабличнаяЧасть.Номенклатура)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ведущая.IDN КАК IDN,
		|	Ведущая.Номенклатура КАК Номенклатура,
		|	Ведущая.УслугаБанка КАК УслугаБанка
		|ИЗ
		|	Назначено КАК Ведущая
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УслугиБанка.НоменклатураИсключения КАК ТаблицаИсключения
		|		ПО Ведущая.УслугаБанка = ТаблицаИсключения.Ссылка
		|			И (Ведущая.Номенклатура = ТаблицаИсключения.Номенклатура
		|				ИЛИ Ведущая.Сегмент = ТаблицаИсключения.Номенклатура)
		|ГДЕ
		|	ТаблицаИсключения.Номенклатура ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	IDN
		|ИТОГИ
		|	МАКСИМУМ(IDN)
		|ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Назначено"
		);
		Запрос.УстановитьПараметр("СписокКодов", ОбщегоНазначенияКлиентСервер.ВМассив("Строка", СтрЗаменить(SKU, " ", ""),, Истина));

		ТоварыВыборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		ЗаписьJSON.ЗаписатьНачалоМассива();

		Пока ТоварыВыборка.Следующий() Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

			JSON.ЗаписатьСвойство("SKU", ТоварыВыборка.IDN, ЗаписьJSON);

			ЗаписьJSON.ЗаписатьИмяСвойства("programs");

				ЗаписьJSON.ЗаписатьНачалоМассива();

				УслугиВыборка = ТоварыВыборка.Выбрать();

				Пока УслугиВыборка.Следующий() Цикл

					Если НЕ ЗначениеЗаполнено(УслугиВыборка.УслугаБанка) Тогда

						Продолжить;

					КонецЕсли;

					ЗаписьJSON.ЗаписатьНачалоОбъекта();

						JSON.ЗаписатьСвойство("ref", ОбменMagentoСлужебный.IDC_Строкой(УслугиВыборка.УслугаБанка), ЗаписьJSON);

					ЗаписьJSON.ЗаписатьКонецОбъекта();

				КонецЦикла;

				ЗаписьJSON.ЗаписатьКонецМассива();

			ЗаписьJSON.ЗаписатьКонецОбъекта();

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();

	Иначе

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСправочник.Ссылка КАК Услуга,
		|	ТаблицаСправочник.Блокирован
		|		ИЛИ ТаблицаСправочник.ПометкаУдаления КАК Блокирован,
		|	ТаблицаСправочник.Наименование КАК Наименование,
		|	ТаблицаСправочник.ТипУслуги КАК ТипУслуги,
		|	ТаблицаСправочник.ПериодПредоставления КАК ПериодПредоставления,
		|	ЕСТЬNULL(ТаблицаСправочник.Банк.Код, """") КАК МФО,
		|	ТаблицаСправочник.Код КАК КлючПорядка
		|ИЗ
		|	Справочник.УслугиБанка КАК ТаблицаСправочник
		|ГДЕ
		|	НЕ ТаблицаСправочник.ЭтоГруппа
		|	И ТаблицаСправочник.ТипУслуги = ЗНАЧЕНИЕ(Перечисление.ТипыУслугБанка.ОплатаЧастями)
		|
		|УПОРЯДОЧИТЬ ПО
		|	КлючПорядка"
		);

		Выборка = Запрос.Выполнить().Выбрать();

		ЗаписьJSON.ЗаписатьНачалоМассива();

		Пока Выборка.Следующий() Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

				JSON.ЗаписатьСвойство("ref"    , ОбменMagentoСлужебный.IDC_Строкой(Выборка.Услуга), ЗаписьJSON);
				JSON.ЗаписатьСвойство("blocked", Выборка.Блокирован, ЗаписьJSON);
				JSON.ЗаписатьСвойство("name"   , Выборка.Наименование, ЗаписьJSON);
				JSON.ЗаписатьСвойство("type"   , ОбщегоНазначенияКлиентСервер.РеквизитПеречисления(Выборка.ТипУслуги), ЗаписьJSON);
				JSON.ЗаписатьСвойство("bank"   , СокрЛП(Выборка.МФО), ЗаписьJSON);
				JSON.ЗаписатьСвойство("depth"  , Выборка.ПериодПредоставления, ЗаписьJSON);

			ЗаписьJSON.ЗаписатьКонецОбъекта();

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();

	КонецЕсли;

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

#Область ПроцедурыКомплексаОбменРозницаMagento_МодульWebСервиса

//	LNK 23.04.2022 06:45:54
Функция GetRegisteredBalances(RequestData)

	Перем ДанныеЗапроса;	//	чтобы всегда существовала

	УстановитьПривилегированныйРежим(Истина);

	КонтекстПриложения.РегистрацияВыполненияWebСервиса("InfoNode", "GetRegisteredBalances");
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\GetRegisteredBalances", "in", RequestData, Истина);

	СоставОшибки = Новый Структура("Ошибка, КодОшибки, ОписаниеОшибки", Ложь, "", "");

	Если ОбменMagentoПовтИсп.ОбменАктивен() Тогда

		Попытка

			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(RequestData);
			ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON, Ложь,,, "ПолучитьДатуОтMagento", ОбменMagentoСервер,, ОбменMagentoСервер.ИменаТипаДата());

			ПодниматьНомер = (ДанныеЗапроса.Command = "get_reg_data");	//	LNK 06.05.2022 07:15:13
			УзелОбъект = ОбменMagentoПовтИсп.ПолучитьАктивныйУзел(Истина);

			Если НЕ УзелОбъект = Неопределено Тогда

				#Если Клиент Тогда
				//УзелОбъект = ПланыОбмена.ОбменРозницаMagento.СоздатьУзел();
				#КонецЕсли

				Попытка

					Если ПодниматьНомер Тогда

						ДанныеПротокола = ОбменMagentoСервер.ВыполнитьПолнуюРегистрацию_ПротоколПолучить();
					//	ДанныеПротокола = ВыполнитьПолнуюРегистрацию_ПротоколПолучить();

						Если НЕ(ПустаяСтрока(ДанныеПротокола.Статус) ИЛИ ДанныеПротокола.Статус = "PROC:End") Тогда

							СоставОшибки.Ошибка			= Истина;
							СоставОшибки.КодОшибки		= "NO_BLOCK_NODE";
							СоставОшибки.ОписаниеОшибки = "Полная регистрация не завершена:" + ДанныеПротокола.Статус;

						ИначеЕсли ДанныеЗапроса.Number_PackMGT < УзелОбъект.НомерОтправленного Тогда

						//	Меньшие номера сообщений НЕ принимаем.
							СоставОшибки.Ошибка			= Истина;
							СоставОшибки.КодОшибки		= "BAD_MESSAGE_NUMBER";
							СоставОшибки.ОписаниеОшибки = "Номер сообщения уже обрабатывался: " + ДанныеЗапроса.Number_PackMGT;

						КонецЕсли;

					КонецЕсли;

					Если НЕ СоставОшибки.Ошибка = Истина Тогда

						Если НЕ (ДанныеЗапроса.Command = "get_sku_list") Тогда

							УзелОбъект.Заблокировать();

						КонецЕсли;

						Если ПодниматьНомер Тогда

						//	сразу увеличим счётчик узла:
							УзелОбъект.НомерОтправленного = УзелОбъект.НомерОтправленного + 1;

						КонецЕсли;

						ЗаписьJSON = ОбменMagentoСервер.СоздатьJSON(?(ПодниматьНомер, УзелОбъект.НомерОтправленного, -1), ДанныеЗапроса);

						Если ДанныеЗапроса.Command = "full_registration" Тогда

							ДанныеЗапроса.Вставить("IDP", СокрЛП(Новый УникальныйИдентификатор));

							Попытка

								СоставОшибки.ОписаниеОшибки = "Процесс регистрации выполняется. Предполагаемое время - в пределах 60 минут.";
							//	Выполнить полную регистрацию всех товарных остатков и резервов по заказам покупателей.

								Если Истина Тогда	//	рабочий вариант

									ПараметрыЗадания = Новый Массив;
									ПараметрыЗадания.Добавить(УзелОбъект.Ссылка);
									ПараметрыЗадания.Добавить(ДанныеЗапроса);
									ПараметрыЗадания.Добавить(СоставОшибки);
									ФоновыеЗадания.Выполнить("ОбменMagentoСервер.ВыполнитьПолнуюРегистрациюТоварногоСостояния"
										, ПараметрыЗадания
										, "MAGENTO_FULL_REGISTRATION"
										, "MAGENTO_FULL_REGISTRATION"
									);

								Иначе

									УзелОбъект.Разблокировать();	//	отладочный момент, так как в процедуре ниже опять будет блокировка
									ОбменMagentoСервер.ВыполнитьПолнуюРегистрациюТоварногоСостояния(УзелОбъект.Ссылка, ДанныеЗапроса, СоставОшибки);
								//	ВыполнитьПолнуюРегистрациюТоварногоСостояния(УзелОбъект.Ссылка, ДанныеЗапроса, СоставОшибки);

								КонецЕсли;

								JSON.ЗаписатьСвойство("IDP", ДанныеЗапроса.IDP, ЗаписьJSON);

							Исключение

								СоставОшибки.Ошибка			= Истина;
								СоставОшибки.КодОшибки		= "NO_REGISTRATION";
								СоставОшибки.ОписаниеОшибки = "Регистрация не выполнена:" + Символы.ПС + ОписаниеОшибки();

							КонецПопытки;

						Иначе

							ОбменMagentoСервер.ВыполнитьВыгрузкуИзмененийВУзелMagento(УзелОбъект, ДанныеЗапроса, ЗаписьJSON, СоставОшибки);
						//	ВыполнитьВыгрузкуИзмененийВУзелMagento(УзелОбъект, ДанныеЗапроса, ЗаписьJSON, СоставОшибки);

						КонецЕсли;

						Если ПодниматьНомер Тогда

							УзелОбъект.Записать();

						КонецЕсли;

						Если УзелОбъект.Заблокирован() Тогда

							УзелОбъект.Разблокировать();

						КонецЕсли;

					КонецЕсли;

				Исключение

					СоставОшибки.Ошибка			= Истина;
					СоставОшибки.КодОшибки		= "BLOCK_NODE_ERROR";
					СоставОшибки.ОписаниеОшибки = "Не удалось заблокировать объект [" + УзелОбъект.Код + "]!";

				КонецПопытки;

			Иначе

				СоставОшибки.Ошибка			= Истина;
				СоставОшибки.КодОшибки		= "";
				СоставОшибки.ОписаниеОшибки = "Не назначен активный узел обмена с внешней системой!";

			КонецЕсли;

			Если ЗаписьJSON = Неопределено Тогда

				ЗаписьJSON = ОбменMagentoСервер.СоздатьJSON(, ДанныеЗапроса);

			КонецЕсли;

		//	Оставляем возможность сообщения об ошибке не только системной, но и ошибке в данных..
		//	Например, номер сообщения какой "левый"
			JSON.ЗаписатьСвойство("Error", JSON.БулевоКакЧисло(СоставОшибки.Ошибка), ЗаписьJSON);
			JSON.ЗаписатьСвойство("ErrorCode", СоставОшибки.КодОшибки, ЗаписьJSON);
			JSON.ЗаписатьСвойство("ErrorMessage", СоставОшибки.ОписаниеОшибки, ЗаписьJSON);

		Исключение

			СоставОшибки.Ошибка			= Истина;
			СоставОшибки.КодОшибки		= "SYSTEM_ERROR";
			СоставОшибки.ОписаниеОшибки = ОписаниеОшибки();

			ЗаписьJSON = ОбменMagentoСервер.СоздатьJSON(, ДанныеЗапроса, СоставОшибки);

		КонецПопытки;

	Иначе

		СоставОшибки.Ошибка			= Истина;
		СоставОшибки.КодОшибки		= "NO_ACTIVE_NODE";
		СоставОшибки.ОписаниеОшибки = "Обмен с Magento НЕ активен (отсутствует узел назначения)";

		ЗаписьJSON = ОбменMagentoСервер.СоздатьJSON(, ДанныеЗапроса, СоставОшибки);

	КонецЕсли;

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	ТекстJSON = ЗаписьJSON.Закрыть();
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\GetRegisteredBalances", "out", ТекстJSON, Истина);
	
	Возврат ТекстJSON;

КонецФункции


#КонецОбласти

#Область ПолучениеОстатков

//	LNK 30.10.2017 12:38:11
Функция FetchRest(SKU)

	Перем Запрос;

	УстановитьПривилегированныйРежим(Истина);
	ТекстОшибки = "";

	Попытка

		КонтекстПриложения.РегистрацияВыполненияWebСервиса("InfoNode", "FetchRest", SKU);
	//	---------------------------------------------------------------------------------------

		ЗаписьJSON = FetchRest_СоздатьJSON(SKU, "");

		ЖурналСобытий.Регистрация("MAGENTO.FetchRest.Начало", УровеньЖурналаРегистрации.Примечание
			, Метаданные.Справочники.Номенклатура
			,
			,
			, SKU
			, SKU
			, Ложь
			, Ложь
		);

		ПодготовитьПараметрыЗапроса(SKU, Запрос, FetchRest_ТекстЗапроса());

		Результаты = Запрос.ВыполнитьПакет();

		ОбщаяВыборка  = Результаты[1].Выбрать();
		ДеталиВыборка = Результаты[2].Выбрать();

		ЗаписьJSON.ЗаписатьИмяСвойства("stock");

		ЗаписьJSON.ЗаписатьНачалоМассива();

		Пока ОбщаяВыборка.Следующий() Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

				JSON.ЗаписатьСвойство("wh_code"	, ОбщаяВыборка.КодСклада, ЗаписьJSON);
				JSON.ЗаписатьСвойство("sku"		, ОбщаяВыборка.КодТовара, ЗаписьJSON);
				JSON.ЗаписатьСвойство("qty"		, Формат(Макс(0, ОбщаяВыборка.КоличествоСклад)  , "ЧН=0; ЧГ="), ЗаписьJSON);
				JSON.ЗаписатьСвойство("qty_r1"	, Формат(Макс(0, ОбщаяВыборка.КоличествоЗаказы) , "ЧН=0; ЧГ="), ЗаписьJSON);

				СтруктураОтбора = Новый Структура(
					"КодСклада, КодТовара"
					, ОбщаяВыборка.КодСклада, ОбщаяВыборка.КодТовара);

				БылаДетализация = Ложь;

				Пока ДеталиВыборка.НайтиСледующий(СтруктураОтбора) Цикл

					Если НЕ БылаДетализация Тогда

						ЗаписьJSON.ЗаписатьИмяСвойства("detailing");
						ЗаписьJSON.ЗаписатьНачалоМассива();

					КонецЕсли;

					БылаДетализация = Истина;

					ЗаписьJSON.ЗаписатьНачалоОбъекта();

						JSON.ЗаписатьСвойство("number", СокрЛП(ДеталиВыборка.НомерЗаказа), ЗаписьJSON);
						JSON.ЗаписатьСвойство("qty_r1", Формат(ДеталиВыборка.КоличествоЗаказы, "ЧН=0; ЧГ="), ЗаписьJSON);

					ЗаписьJSON.ЗаписатьКонецОбъекта();

				КонецЦикла;

				Если БылаДетализация Тогда

					ЗаписьJSON.ЗаписатьКонецМассива();

				КонецЕсли;

			ЗаписьJSON.ЗаписатьКонецОбъекта();

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();

		JSON.ЗаписатьСвойство("count_results", Формат(ОбщаяВыборка.Количество(), "ЧН=0; ЧГ="), ЗаписьJSON);

	Исключение

		ЗаписьJSON = FetchRest_СоздатьJSON(SKU, ОписаниеОшибки());

	КонецПопытки;

	ЖурналСобытий.Регистрация("MAGENTO.FetchRest.Конец"
		, ?(ПустаяСтрока(ТекстОшибки), УровеньЖурналаРегистрации.Примечание, УровеньЖурналаРегистрации.Ошибка)
		, Метаданные.Справочники.Номенклатура
		,
		,
		, SKU + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС + ТекстОшибки)
		, SKU
		, Ложь
		, Ложь
	);

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

//	LNK 10.01.2018 11:26:58
Функция FetchRestTotal(SKU)

	Перем Запрос;

	УстановитьПривилегированныйРежим(Истина);
	ТекстОшибки = "";

	Попытка

		КонтекстПриложения.РегистрацияВыполненияWebСервиса("InfoNode", "FetchRestTotal", SKU);
	//	---------------------------------------------------------------------------------------

		ЗаписьJSON = FetchRest_СоздатьJSON(SKU, "");

		ЖурналСобытий.Регистрация("MAGENTO.FetchRestTotal.Начало", УровеньЖурналаРегистрации.Примечание
			, Метаданные.Справочники.Номенклатура
			,
			,
			, SKU
			, SKU
			, Ложь
			, Ложь
		);

		ПодготовитьПараметрыЗапроса(SKU, Запрос, FetchRestTotal_ТекстЗапроса());

		Выборка = Запрос.Выполнить().Выбрать();

		ЗаписьJSON.ЗаписатьИмяСвойства("stock");

		ЗаписьJSON.ЗаписатьНачалоМассива();

		Пока Выборка.Следующий() Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

				JSON.ЗаписатьСвойство("sku", Выборка.КодТовара, ЗаписьJSON);
				JSON.ЗаписатьСвойство("qty", Формат(Выборка.КоличествоДоступно, "ЧН=0; ЧГ="), ЗаписьJSON);

			ЗаписьJSON.ЗаписатьКонецОбъекта();

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();

		JSON.ЗаписатьСвойство("count_results", Формат(Выборка.Количество(), "ЧН=0; ЧГ="), ЗаписьJSON);

	Исключение

		ЗаписьJSON = FetchRest_СоздатьJSON(SKU, ОписаниеОшибки());

	КонецПопытки;

	ЖурналСобытий.Регистрация("MAGENTO.FetchRestTotal.Конец"
		, ?(ПустаяСтрока(ТекстОшибки), УровеньЖурналаРегистрации.Примечание, УровеньЖурналаРегистрации.Ошибка)
		, Метаданные.Справочники.Номенклатура
		,
		,
		, SKU + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС + ТекстОшибки)
		, SKU
		, Ложь
		, Ложь
	);

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

Функция FetchRest_СоздатьJSON(SKU, ТекстОшибки)

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	JSON.ЗаписатьСвойство("query", SKU, ЗаписьJSON);
	JSON.ЗаписатьСвойство("ErrorMessage", ТекстОшибки, ЗаписьJSON);
	JSON.ЗаписатьСвойство("DIFF", СокрЛП(Новый УникальныйИдентификатор), ЗаписьJSON);

	Возврат ЗаписьJSON;

КонецФункции

Функция FetchRest_ТекстЗапроса()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказыПокупателей.Магазин.СкладПоступления.IDN КАК КодСклада,
	|	ЗаказыПокупателей.Номенклатура.IDN КАК КодТовара,
	|	ЗаказыПокупателей.Заказ.НомерЗаказаНаСайте КАК НомерЗаказа,
	|	СУММА(ЗаказыПокупателей.КоличествоОстаток) КАК КоличествоЗаказы
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	|			,
	|			Номенклатура В (&СписокНоменклатура)
	|				И НЕ Магазин = &ИнтернетМагазин) КАК ЗаказыПокупателей
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПокупателей.Магазин.СкладПоступления.IDN,
	|	ЗаказыПокупателей.Номенклатура.IDN,
	|	ЗаказыПокупателей.Заказ.НомерЗаказаНаСайте
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.КодСклада КАК КодСклада,
	|	Данные.КодТовара КАК КодТовара,
	|	СУММА(Данные.КоличествоСклад) КАК КоличествоСклад,
	|	СУММА(Данные.КоличествоЗаказы) КАК КоличествоЗаказы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыНаСкладах.Склад.Магазин.СкладПоступления.IDN КАК КодСклада,
	|		ТоварыНаСкладах.Номенклатура.IDN КАК КодТовара,
	|		ТоварыНаСкладах.КоличествоОстаток КАК КоличествоСклад,
	|		0 КАК КоличествоЗаказы
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				Номенклатура В (&СписокНоменклатура)
	|					И НЕ Склад.НазначениеСклада = ЗНАЧЕНИЕ(Перечисление.НазначенияСкладов.Брак)
	|					И НЕ Склад.Магазин = &ИнтернетМагазин) КАК ТоварыНаСкладах
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаРегистра.Склад.IDN,
	|		ТаблицаРегистра.Номенклатура.IDN,
	|		ТаблицаРегистра.Количество,
	|		0
	|	ИЗ
	|		РегистрСведений.ИнформативныеОстаткиТоваровПоСкладам КАК ТаблицаРегистра
	|	ГДЕ
	|		ТаблицаРегистра.Склад В(&СписокСкладов)
	|		И ТаблицаРегистра.Номенклатура В(&СписокНоменклатура)
	|		И НЕ ТаблицаРегистра.Склад.НазначениеСклада = ЗНАЧЕНИЕ(Перечисление.НазначенияСкладов.Брак)
	|		И НЕ ТаблицаРегистра.Склад = &СкладЦентральныйИнтернетМагазина
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыПокупателей.КодСклада,
	|		ЗаказыПокупателей.КодТовара,
	|		0,
	|		СУММА(ЗаказыПокупателей.КоличествоЗаказы)
	|	ИЗ
	|		ВТ_Заказы КАК ЗаказыПокупателей
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыПокупателей.КодСклада,
	|		ЗаказыПокупателей.КодТовара) КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.КодСклада,
	|	Данные.КодТовара
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодСклада,
	|	КодТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Заказы.КодСклада КАК КодСклада,
	|	ВТ_Заказы.КодТовара КАК КодТовара,
	|	ВТ_Заказы.НомерЗаказа КАК НомерЗаказа,
	|	ВТ_Заказы.КоличествоЗаказы КАК КоличествоЗаказы
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Заказы"
	;

	Возврат ТекстЗапроса;

КонецФункции

Функция FetchRestTotal_ТекстЗапроса()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Данные.КодТовара КАК КодТовара,
	|	ВЫБОР
	|		КОГДА СУММА(Данные.КоличествоСклад - Данные.КоличествоЗаказы - Данные.КоличествоЖелания) < 0
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(Данные.КоличествоСклад - Данные.КоличествоЗаказы - Данные.КоличествоЖелания)
	|	КОНЕЦ КАК КоличествоДоступно
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыНаСкладах.Номенклатура.IDN КАК КодТовара,
	|		ТоварыНаСкладах.КоличествоОстаток КАК КоличествоСклад,
	|		0 КАК КоличествоЗаказы,
	|		0 КАК КоличествоЖелания
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				Склад В (&СписокСкладов)
	|					И Номенклатура В (&СписокНоменклатура)
	|					И НЕ Склад.НазначениеСклада = ЗНАЧЕНИЕ(Перечисление.НазначенияСкладов.Брак)
	|					И НЕ Склад.Магазин = &ИнтернетМагазин) КАК ТоварыНаСкладах
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаРегистра.Номенклатура.IDN,
	|		ТаблицаРегистра.Количество,
	|		0,
	|		0
	|	ИЗ
	|		РегистрСведений.ИнформативныеОстаткиТоваровПоСкладам КАК ТаблицаРегистра
	|	ГДЕ
	|		ТаблицаРегистра.Склад В(&СписокСкладов)
	|		И ТаблицаРегистра.Номенклатура В(&СписокНоменклатура)
	|		И НЕ ТаблицаРегистра.Склад.НазначениеСклада = ЗНАЧЕНИЕ(Перечисление.НазначенияСкладов.Брак)
	|		И НЕ ТаблицаРегистра.Склад = &СкладЦентральныйИнтернетМагазина
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыПокупателей.Номенклатура.IDN,
	|		0,
	|		ЗаказыПокупателей.КоличествоОстаток,
	|		0
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(
	|				,
	|				Магазин.СкладПродажи В (&СписокСкладов)
	|					И Номенклатура В (&СписокНоменклатура)
	|					И НЕ Магазин = &ИнтернетМагазин) КАК ЗаказыПокупателей
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЛистыЖеланий.Номенклатура.IDN,
	|		0,
	|		0,
	|		ЛистыЖеланий.КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЛистыЖеланий.Остатки(
	|				,
	|				Магазин.СкладПродажи В (&СписокСкладов)
	|					И Номенклатура В (&СписокНоменклатура)
	|					И НЕ Магазин = &ИнтернетМагазин) КАК ЛистыЖеланий) КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.КодТовара
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодТовара"
	;

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

//	LNK 14.12.2017 14:07:41
Функция GetBuyerAccumSum(CardNumber)

	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;	//	LNK 18.09.2022 05:33:57

	КонтекстПриложения.РегистрацияВыполненияWebСервиса("InfoNode", "GetBuyerAccumSum", CardNumber);

//	Инициализируем пользователя административной учетной записью.
	ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.АдминистраторАвтоматов;

	СуммаНакопления = 0;

	Если НЕ ПустаяСтрока(CardNumber) Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИнформационныеКарты.ВладелецКарты КАК Контрагент
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|ГДЕ
		|	ИнформационныеКарты.КодКарты = &CardNumber"
		);
		Запрос.УстановитьПараметр("CardNumber", СокрЛП(CardNumber));

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда

			Запрос.УстановитьПараметр("Контрагент", Выборка.Контрагент);

			Запрос.Текст =
			"ВЫБРАТЬ
			|	СУММА(ТаблицаРегистра.СуммаОстаток) КАК СуммаНакопления
			|ИЗ
			|	РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(
			|			,
			|			ВладелецДисконтнойКарты = &Контрагент
			|				И ДисконтнаяКарта.Блокирован = ЛОЖЬ) КАК ТаблицаРегистра"
			;
			Выборка = Запрос.Выполнить().Выбрать();

			Если Выборка.Следующий() Тогда

				СуммаНакопления = Выборка.СуммаНакопления;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;	//	LNK 18.09.2022 05:34:31

	Возврат СуммаНакопления;

КонецФункции

Функция GetBuyerInfo(RequestData)	//	LNK 03.10.2018 11:10:54

	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;	//	LNK 18.09.2022 05:33:57

	КонтекстПриложения.РегистрацияВыполненияWebСервиса("InfoNode", "GetBuyerInfo", RequestData);

//	Инициализируем пользователя административной учетной записью.
	ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.АдминистраторАвтоматов;

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(RequestData);
	
	Параметры = ПараметрыИзОбъектаXDTO(ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON), "identifier:строка, idtype:строка, mode:строка");

	ДанныеВозврата = Новый Структура(
		"Код, Наименование, Блокирован, ДатаРождения, СуммаНакоплений, НомерТелефона, КартыДисконта"
		, ""
		, ""
		, Ложь
		, '00010101'
		, 0
		, ""
		, Новый ТаблицаЗначений		
	);
	ДанныеВозврата.КартыДисконта.Колонки.Добавить("НомерКарты");
	ДанныеВозврата.КартыДисконта.Колонки.Добавить("Город");
	ДанныеВозврата.КартыДисконта.Колонки.Добавить("СуммаНакоплений");

	Если Параметры.idtype = "phone" Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаКонтакты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтакты
		|ГДЕ
		|	ТаблицаКонтакты.НомерТелефона В(&СписокНомеров)
		|	И ТаблицаКонтакты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)"
		);
		Запрос.УстановитьПараметр("СписокНомеров", КонтактнаяИнформацияСлужебный.ПолучитьВариантыНомераТелефона(СокрЛП(Параметры.identifier)));
		
		СписокКонтрагенты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");

	ИначеЕсли Параметры.idtype = "cardnumber" Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСправочник.ВладелецКарты КАК Контрагент
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ТаблицаСправочник
		|ГДЕ
		|	ТаблицаСправочник.ВладелецКарты ССЫЛКА Справочник.Контрагенты
		|			И ТаблицаСправочник.КодКарты = &КодКарты
		|	И НЕ(ТаблицаСправочник.Блокирован
		|				ИЛИ ТаблицаСправочник.ПометкаУдаления)"
		);
		Запрос.УстановитьПараметр("НомерКарты", СокрЛП(Параметры.identifier));
		
		СписокКонтрагенты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");

	Иначе

		СписокКонтрагенты = Новый Массив;

	КонецЕсли;

	Если НЕ СписокКонтрагенты.Количество() = 0 Тогда

		Если СписокКонтрагенты.Количество() > 1 Тогда

			Если Параметры.mode = "lastpurchase" Тогда

				Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ТаблицаПродажи.Период КАК Период,
				|	ТаблицаПродажи.Регистратор КАК Регистратор,
				|	ТаблицаПродажи.ВладелецДисконтнойКарты КАК Контрагент
				|ИЗ
				|	РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(
				|			,
				|			,
				|			Регистратор,
				|			ВладелецДисконтнойКарты ССЫЛКА Справочник.Контрагенты
				|				И ВладелецДисконтнойКарты В (&СписокКонтрагенты)) КАК ТаблицаПродажи
				|
				|УПОРЯДОЧИТЬ ПО
				|	Период УБЫВ,
				|	Регистратор УБЫВ"
				);
				Запрос.УстановитьПараметр("СписокКонтрагенты", СписокКонтрагенты);
				
				Результат = Запрос.Выполнить();

			//	Но тут контрагента(ов) может и не оказаться.. мало-ли, не было продаж (или продажа и возврат - в эту таблицу не попадет)!
			//	Поэтому второй вариант <Параметры.mode = "maximum"> отрабатывается ниже
			//	в любом виде вариантов, но, когда клиентов больше одного.

				Если НЕ Результат.Пустой() Тогда

					Выборка = Результат.Выбрать();
					Выборка.Следующий();

					СписокКонтрагенты = Новый Массив;
					СписокКонтрагенты.Добавить(Выборка.Контрагент);

				КонецЕсли;

			КонецЕсли;

			Если СписокКонтрагенты.Количество() > 1 Тогда

				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ТаблицаНакоплений.Контрагент КАК Контрагент,
				|	ТаблицаНакоплений.СуммаНакоплений КАК СуммаНакоплений
				|ИЗ
				|	(ВЫБРАТЬ
				|		ТаблицаНакоплений.ВладелецДисконтнойКарты КАК Контрагент,
				|		СУММА(ТаблицаНакоплений.СуммаОстаток) КАК СуммаНакоплений
				|	ИЗ
				|		РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(
				|				,
				|				ВладелецДисконтнойКарты ССЫЛКА Справочник.Контрагенты
				|					И ВладелецДисконтнойКарты В (&СписокКонтрагенты)) КАК ТаблицаНакоплений
				|	
				|	СГРУППИРОВАТЬ ПО
				|		ТаблицаНакоплений.ВладелецДисконтнойКарты) КАК ТаблицаНакоплений
				|
				|УПОРЯДОЧИТЬ ПО
				|	СуммаНакоплений УБЫВ"
				);
				Запрос.УстановитьПараметр("СписокКонтрагенты", СписокКонтрагенты);

				Результат = Запрос.Выполнить();

				Если НЕ Результат.Пустой() Тогда

					Выборка = Результат.Выбрать();
					Выборка.Следующий();

					СписокКонтрагенты = Новый Массив;
					СписокКонтрагенты.Добавить(Выборка.Контрагент);

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	//	Итоговый запрос, возвращающий все данные по выбранному контрагенту.

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаКонтрагенты.Код КАК Код,
		|	ТаблицаКонтрагенты.Наименование КАК Наименование,
		|	ТаблицаКонтрагенты.Блокирован КАК Блокирован,
		|	ТаблицаКонтрагенты.ДатаРождения КАК ДатаРождения,
		|	ТаблицаКарты.КодКарты КАК НомерКарты,
		|	ЕСТЬNULL(ТаблицаНакоплений.СуммаОстаток, 0) КАК СуммаНакоплений,
		|	ЕСТЬNULL(ТаблицаКарты.Магазин.Город.Наименование, """") КАК Город
		|ИЗ
		|	Справочник.Контрагенты КАК ТаблицаКонтрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ТаблицаКарты
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(
		|					,
		|					ВладелецДисконтнойКарты ССЫЛКА Справочник.Контрагенты
		|						И ВладелецДисконтнойКарты = &Контрагент) КАК ТаблицаНакоплений
		|			ПО ТаблицаКарты.Ссылка = ТаблицаНакоплений.ДисконтнаяКарта
		|		ПО (ТаблицаКарты.ВладелецКарты ССЫЛКА Справочник.Контрагенты)
		|			И ТаблицаКонтрагенты.Ссылка = ТаблицаКарты.ВладелецКарты
		|			И (НЕ(ТаблицаКарты.ПометкаУдаления
		|					ИЛИ ТаблицаКарты.Блокирован))
		|ГДЕ
		|	ТаблицаКонтрагенты.Ссылка = &Контрагент
		|ИТОГИ
		|	МАКСИМУМ(Код),
		|	МАКСИМУМ(Наименование),
		|	МАКСИМУМ(Блокирован),
		|	МАКСИМУМ(ДатаРождения),
		|	СУММА(СуммаНакоплений)
		|ПО
		|	НомерКарты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаКонтакты.НомерТелефона КАК НомерТелефона
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтакты
		|ГДЕ
		|	ТаблицаКонтакты.Ссылка = &Контрагент
		|	И ТаблицаКонтакты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)"
		);
		Запрос.УстановитьПараметр("Контрагент", СписокКонтрагенты[0]);
		
		Результаты = Запрос.ВыполнитьПакет();
		Запрос     = Неопределено;

		ОбщаяВыборка = Результаты[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ОбщаяВыборка.Следующий();

		ДанныеВозврата.Код = СокрЛП(ОбщаяВыборка.Код);
		ДанныеВозврата.Наименование = СокрЛП(ОбщаяВыборка.Наименование);
		ДанныеВозврата.Блокирован   = ОбщаяВыборка.Блокирован;
		ДанныеВозврата.ДатаРождения = ОбщаяВыборка.ДатаРождения;

		КартыВыборка = ОбщаяВыборка.Выбрать();

		Пока КартыВыборка.Следующий() Цикл

			Если НЕ ЗначениеЗаполнено(КартыВыборка.СуммаНакоплений) Тогда

				Продолжить;

			КонецЕсли;

			СтрокаТаблицы = ДанныеВозврата.КартыДисконта.Добавить();
			СтрокаТаблицы.НомерКарты = СокрЛП(КартыВыборка.НомерКарты);
			СтрокаТаблицы.Город      = КартыВыборка.Город;
			СтрокаТаблицы.СуммаНакоплений = КартыВыборка.СуммаНакоплений;

			ДанныеВозврата.СуммаНакоплений = ДанныеВозврата.СуммаНакоплений + КартыВыборка.СуммаНакоплений;

		КонецЦикла;

		Если НЕ Результаты[1].Пустой() Тогда

			ОбщаяВыборка = Результаты[1].Выбрать();
			ОбщаяВыборка.Следующий();

			ДанныеВозврата.НомерТелефона = СокрЛП(ОбщаяВыборка.НомерТелефона);

		КонецЕсли;

	КонецЕсли;

//	Формируем структуру возвращаемой информации
//	---------------------------------------------------------------------------------------
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	ЗаписьJSON.ЗаписатьИмяСвойства("code");
	ЗаписьJSON.ЗаписатьЗначение(ДанныеВозврата.Код);

	ЗаписьJSON.ЗаписатьИмяСвойства("fullname");
	ЗаписьJSON.ЗаписатьЗначение(ДанныеВозврата.Наименование);

	ЗаписьJSON.ЗаписатьИмяСвойства("blocked");
	ЗаписьJSON.ЗаписатьЗначение(?(ДанныеВозврата.Блокирован, 1, 0));

	ЗаписьJSON.ЗаписатьИмяСвойства("dateofbirth");
	ЗаписьJSON.ЗаписатьЗначение(Формат(ДанныеВозврата.ДатаРождения, "ДФ=dd.MM.yyyy"));

	ЗаписьJSON.ЗаписатьИмяСвойства("phonenumber");
	ЗаписьJSON.ЗаписатьЗначение(ДанныеВозврата.НомерТелефона);

	ЗаписьJSON.ЗаписатьИмяСвойства("summa");
	ЗаписьJSON.ЗаписатьЗначение(ДанныеВозврата.СуммаНакоплений);

	ЗаписьJSON.ЗаписатьИмяСвойства("cardinfo");

		ЗаписьJSON.ЗаписатьНачалоМассива();

		Для каждого СтрокаТаблицы Из ДанныеВозврата.КартыДисконта Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();
				ЗаписьJSON.ЗаписатьИмяСвойства("cardnumber");	ЗаписьJSON.ЗаписатьЗначение(СтрокаТаблицы.НомерКарты);
				ЗаписьJSON.ЗаписатьИмяСвойства("summa");		ЗаписьJSON.ЗаписатьЗначение(СтрокаТаблицы.СуммаНакоплений);
				ЗаписьJSON.ЗаписатьИмяСвойства("city");			ЗаписьJSON.ЗаписатьЗначение(СтрокаТаблицы.Город);
			ЗаписьJSON.ЗаписатьКонецОбъекта();

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;	//	LNK 18.09.2022 05:34:31

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

#Область СпецификаСистемыБонусныхНакоплений

//	LNK 11.10.2021 05:48:25
Функция GetBuyerBonusInfo(Command, RequestData)

	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;	//	LNK 18.09.2022 05:33:57

	КонтекстПриложения.РегистрацияВыполненияWebСервиса("InfoNode", "GetBuyerBonusInfo", Command);
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\GetBuyerBonusInfo\" + Command, "in", RequestData, Истина);

	СоставОшибки = Новый Структура("Ошибка, ОписаниеОшибки", Ложь, "");

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(RequestData);
	ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON, Ложь,,, "ПолучитьДатуОтMagento", ОбменMagentoСервер,, ОбменMagentoСервер.ИменаТипаДата());

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	JSON.ЗаписатьСвойство("IDBASE", Константы.ИдентификаторУчетнойСистемы.Получить(), ЗаписьJSON);
	JSON.ЗаписатьСвойство("Number_PackMGT", -1, ЗаписьJSON);
	JSON.ЗаписатьСвойство("DIFF", СокрЛП(Новый УникальныйИдентификатор), ЗаписьJSON);

	ЗаписьJSON.ЗаписатьИмяСвойства("Clients");

	ЗаписьJSON.ЗаписатьНачалоМассива();

	Попытка

	//	Инициализируем пользователя административной учетной записью.
		ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.АдминистраторАвтоматов;

		Если Command = "rest" Тогда

			ТаблицаВнешняя = ОбменMagentoСлужебный.ИнициализацияТаблицыКонтрагентовДляВнешнихДанных();

			НомерСтроки = 0;

			Для каждого ДанныеВнешние Из ДанныеЗапроса.Clients Цикл

				НомерСтроки = НомерСтроки + 1;
				
				СтрокаВнешняя = ТаблицаВнешняя.Добавить();
				СтрокаВнешняя.НомерСтроки = НомерСтроки;
				СтрокаВнешняя.НомерТелефона	= ДанныеВнешние.phoneNumber;

			КонецЦикла;

			Справочники.Контрагенты.НайтиКонтрагентовПоСпискуMagento(ТаблицаВнешняя);

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Таблица.НомерСтроки КАК НомерСтроки,
			|	ВЫРАЗИТЬ(Таблица.Контрагент КАК Справочник.Контрагенты) КАК Контрагент
			|ПОМЕСТИТЬ ТаблицаВнешняя
			|ИЗ
			|	&ТаблицаВнешняя КАК Таблица
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаБонусныеБаллы.Контрагент КАК Контрагент,
			|	ВЫБОР
			|		КОГДА ТаблицаБонусныеБаллы.ПрограммаЛояльностиТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Акционный)
			|			ТОГДА 0
			|		ИНАЧЕ ТаблицаБонусныеБаллы.СуммаБонусныхБаллов
			|	КОНЕЦ КАК СуммаБонусныхБаллов,
			|	ВЫБОР
			|		КОГДА ТаблицаБонусныеБаллы.ПрограммаЛояльностиТипБонусов = ЗНАЧЕНИЕ(Перечисление.ТипыБонусов.Акционный)
			|			ТОГДА ТаблицаБонусныеБаллы.СуммаБонусныхБаллов
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СуммаАкционныхБонусов
			|ПОМЕСТИТЬ ТаблицаБонусов
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТаблицаАктивные.Контрагент КАК Контрагент,
			|		ТаблицаАктивные.СуммаБонусныхБалловОстаток КАК СуммаБонусныхБаллов,
			|		ТаблицаАктивные.ПрограммаЛояльности.ТипБонусов КАК ПрограммаЛояльностиТипБонусов
			|	ИЗ
			|		РегистрНакопления.БонусныеБаллы.Остатки(&ТекущаяДата, Контрагент В
			|			(ВЫБРАТЬ
			|				ТаблицаВнешняя.Контрагент КАК Контрагент
			|			ИЗ
			|				ТаблицаВнешняя КАК ТаблицаВнешняя)) КАК ТаблицаАктивные
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		ТаблицаБлокировано.Контрагент,
			|		ВЫБОР
			|			КОГДА ТаблицаБлокировано.СуммаБонусныхБалловОстаток > 0
			|				ТОГДА -ТаблицаБлокировано.СуммаБонусныхБалловОстаток
			|			ИНАЧЕ 0
			|		КОНЕЦ,
			|		ТаблицаБлокировано.ПрограммаЛояльности.ТипБонусов
			|	ИЗ
			|		РегистрНакопления.БонусныеБаллыПоЗаказамПокупателей.Остатки(&ТекущаяДата, Контрагент В
			|			(ВЫБРАТЬ
			|				ТаблицаВнешняя.Контрагент КАК Контрагент
			|			ИЗ
			|				ТаблицаВнешняя КАК ТаблицаВнешняя)) КАК ТаблицаБлокировано) КАК ТаблицаБонусныеБаллы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаБонусов.Контрагент КАК Контрагент,
			|	СУММА(ТаблицаБонусов.СуммаБонусныхБаллов) КАК СуммаБонусныхБаллов,
			|	СУММА(ТаблицаБонусов.СуммаАкционныхБонусов) КАК СуммаАкционныхБонусов
			|ПОМЕСТИТЬ ДанныеБонусов
			|ИЗ
			|	ТаблицаБонусов КАК ТаблицаБонусов
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаБонусов.Контрагент
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаВнешняя.НомерСтроки КАК НомерСтроки,
			|	ТаблицаВнешняя.Контрагент КАК Контрагент,
			|	ЕСТЬNULL(ТаблицаДоступно.СуммаБонусныхБаллов, 0) КАК СуммаБонусныхБалловАктивно,
			|	ЕСТЬNULL(ТаблицаДоступно.СуммаАкционныхБонусов, 0) КАК СуммаАкционныхБонусовАктивно,
			|	ЕСТЬNULL(ТаблицаРезервы.СуммаБонусныхБалловОстаток, 0) КАК СуммаБонусныхБалловРезерв,
			|	ЕСТЬNULL(ТаблицаПродажи.СуммаОстаток, 0) КАК СуммаПокупок
			|ИЗ
			|	ТаблицаВнешняя КАК ТаблицаВнешняя
			|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеБонусов КАК ТаблицаДоступно
			|		ПО ТаблицаВнешняя.Контрагент = ТаблицаДоступно.Контрагент
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БонусныеБаллыВРезерве.Остатки(&ТекущаяДата, Контрагент В
			|			(ВЫБРАТЬ
			|				ТаблицаВнешняя.Контрагент КАК Контрагент
			|			ИЗ
			|				ТаблицаВнешняя КАК ТаблицаВнешняя)) КАК ТаблицаРезервы
			|		ПО ТаблицаВнешняя.Контрагент = ТаблицаРезервы.Контрагент
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(&ТекущаяДата, ВладелецДисконтнойКарты В
			|			(ВЫБРАТЬ
			|				ТаблицаВнешняя.Контрагент КАК Контрагент
			|			ИЗ
			|				ТаблицаВнешняя КАК ТаблицаВнешняя)) КАК ТаблицаПродажи
			|		ПО ТаблицаВнешняя.Контрагент = ТаблицаПродажи.ВладелецДисконтнойКарты"
			);
			Запрос.УстановитьПараметр("ТекущаяДата"		, ТекущаяДатаСеанса());
			Запрос.УстановитьПараметр("ТаблицаВнешняя"	, ТаблицаВнешняя);
			
			ДанныеВыборка = Запрос.Выполнить().Выбрать();
			
			Пока ДанныеВыборка.Следующий() Цикл

				ЗаписьJSON.ЗаписатьНачалоОбъекта();

				СтрокаВнешняя = ТаблицаВнешняя.Найти(ДанныеВыборка.НомерСтроки, "НомерСтроки");

				JSON.ЗаписатьСвойство("IDC"				, ОбменMagentoСлужебный.IDC_Строкой(ДанныеВыборка.Контрагент), ЗаписьJSON);
				JSON.ЗаписатьСвойство("phoneNumber"		, СтрокаВнешняя.НомерТелефона, ЗаписьJSON);
				JSON.ЗаписатьСвойство("BonusesActive"	, ДанныеВыборка.СуммаБонусныхБалловАктивно, ЗаписьJSON);
				JSON.ЗаписатьСвойство("BonusesReserved"	, ДанныеВыборка.СуммаБонусныхБалловРезерв, ЗаписьJSON);
				JSON.ЗаписатьСвойство("BonusesPromo"	, ДанныеВыборка.СуммаАкционныхБонусовАктивно, ЗаписьJSON);
				JSON.ЗаписатьСвойство("AmountPurchases"	, ДанныеВыборка.СуммаПокупок, ЗаписьJSON);

				Если НЕ ПустаяСтрока(СтрокаВнешняя.ОписаниеОшибки) Тогда

					JSON.ЗаписатьСвойство("ErrorMessage", СтрокаВнешняя.ОписаниеОшибки, ЗаписьJSON);

				КонецЕсли;

				ЗаписьJSON.ЗаписатьКонецОбъекта();

			КонецЦикла;

		Иначе

			ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
				, "невідома команда [" + Command + "] для сервісу (наразі можуть бути оброблені команди: 'rest')"
				, СоставОшибки.Ошибка
			);

		КонецЕсли;

	Исключение

		СоставОшибки.СтатусОшибки = "SYS_ERROR";
		ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
			, "[SYS]: " + ОписаниеОшибки()
			, СоставОшибки.Ошибка
		);

	КонецПопытки;

	ЗаписьJSON.ЗаписатьКонецМассива();

	JSON.ЗаписатьСвойство("Error", JSON.БулевоКакЧисло(СоставОшибки.Ошибка), ЗаписьJSON);
	JSON.ЗаписатьСвойство("ErrorMessage", СоставОшибки.ОписаниеОшибки, ЗаписьJSON);

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	ТекстJSON = ЗаписьJSON.Закрыть();
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\GetBuyerBonusInfo\" + Command, "out", ТекстJSON, Истина);

	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;	//	LNK 18.09.2022 05:34:31
	
	Возврат ТекстJSON;

КонецФункции

Функция GetDistributedBonus(RequestData)	//	LNK 06.11.2021 05:35:13

	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;	//	LNK 18.09.2022 05:33:57

	КонтекстПриложения.РегистрацияВыполненияWebСервиса("InfoNode", "GetDistributedBonus", RequestData);
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\GetDistributedBonus", "in", RequestData, Истина);

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(RequestData);
	ДанныеЗапроса = УточнитьДанныеВнешнегоЗапроса(
		ПрочитатьJSON(ЧтениеJSON, Ложь,,, "ПолучитьДатуОтMagento", ОбменMagentoСервер,, ОбменMagentoСервер.ИменаТипаДата())
	);

	СоставОшибки	= Новый Структура("Отказ, СтатусОшибки, ОписаниеОшибки, УжеОформлен", Ложь, "", "", Ложь);
	УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	JSON.ЗаписатьСвойство("IDBASE", Константы.ИдентификаторУчетнойСистемы.Получить(), ЗаписьJSON);
	JSON.ЗаписатьСвойство("Number_PackMGT", 1, ЗаписьJSON);
	JSON.ЗаписатьСвойство("DIFF", СокрЛП(Новый УникальныйИдентификатор), ЗаписьJSON);

	Попытка

	//	Инициализируем пользователя административной учетной записью.
		ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.АдминистраторАвтоматов;

	//	ДокументОбъект = ПолучитьДокументMagento(ДанныеЗапроса.OrderData, "ЧекККМ", Истина, УчетнаяПолитика, СоставОшибки);
		ДокументОбъект = ОбменMagentoСервер.ПолучитьДокументMagento(ДанныеЗапроса.OrderData, "ЧекККМ", Истина, УчетнаяПолитика, СоставОшибки);
		#Если Клиент Тогда
		//ДокументОбъект = Документы.ЧекККМ.СоздатьДокумент();
		#КонецЕсли

		ПараметрыРаспределения = Новый Структура(
			"СуммаБонусныхБалловДляПогашения, ТоварыДляОплаты"
			, Мин(ДанныеЗапроса.OrderData.SummaBonusPay, ДокументОбъект.Товары.Итог("СуммаВсего"))
			, БонусныеБаллыВызовСервера.ПолучитьТаблицуТоварыДляОплаты(ДокументОбъект.Товары, Новый Структура, УчетнаяПолитика)
			, Истина
		);
		
		ПараметрыЗапроса = Новый Структура(
			"Магазин, ТоварыДляОплаты, ПрограммаЛояльности, ТипыБонусов, ТолькоТекущийОстаток"
			, ДокументОбъект.Магазин
			, ПараметрыРаспределения.ТоварыДляОплаты
			,
			, ОбщегоНазначенияКлиентСервер.AAD(Перечисления.ТипыБонусов.Привлечение, Перечисления.ТипыБонусов.Органический)
			, Истина
		);

		ДанныеРаспределения = БонусныеБаллыВызовСервера.РаспределитьСуммуБонусныхБаллов(ДокументОбъект
			, "Товары"
			, БонусныеБаллыСервер.BPS_ПолучитьОстаткиИДвиженияБонусныхБаллов(ДокументОбъект.ВладелецДисконтнойКарты, ПараметрыЗапроса)
			, ПараметрыРаспределения
		);
		БонусныеБаллыВызовСервера.ПрименитьРезультатыРаспределенияОплатыБонуснымиБалламиКОбъекту(ДокументОбъект, "Товары", "ОплатаБонуснымиБаллами", ДанныеРаспределения);

		//2024-11-05 sa Надо всегда пересчитывать начисление бонусных баллов, так как заодно применятся купоны (если есть)
		//сделаем пересчет если в чеке фигурируют купоны или сертификаты
		Если НЕ ДокументОбъект.ОплатаБонуснымиБаллами.Количество() = 0 
			ИЛИ ДокументОбъект.ПогашениеСкидочныхКупонов.Количество()>0
			ИЛИ ДокументОбъект.ПогашениеПодарочныхСертификатов.Количество()>0 Тогда

			БонусныеБаллыВызовСервера.ПересчитатьНачислениеБонусныхБаллов(ДокументОбъект);

		КонецЕсли;

		ЗаписатьРасчётСкидкиВJSON(ДокументОбъект, ЗаписьJSON);

	Исключение

		СоставОшибки.СтатусОшибки = "SYS_ERROR";
		ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
			, "[SYS]: " + ОписаниеОшибки()
			, СоставОшибки.Отказ
		);

	КонецПопытки;

	JSON.ЗаписатьСвойство("Error"		, JSON.БулевоКакЧисло(СоставОшибки.Отказ), ЗаписьJSON);
	JSON.ЗаписатьСвойство("ErrorMessage", СоставОшибки.ОписаниеОшибки, ЗаписьJSON);
	JSON.ЗаписатьСвойство("ErrorType"	, СоставОшибки.СтатусОшибки, ЗаписьJSON);

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	ТекстJSON = ЗаписьJSON.Закрыть();
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\GetDistributedBonus", "out", ТекстJSON, Истина);

	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;	//	LNK 18.09.2022 05:34:31

	Возврат ТекстJSON;

КонецФункции

#КонецОбласти

#Область СпецификаОбменаКонтрагентамиMagento

//	Параметры:
//	RequestData	- текст JSON, содержащий массив ключевых данных клиентов.
//		Образец текста:
//		{"Clients":[{"phoneNumber":"380662028207","email":"juliafrsv@gmail.com","IDC":"","IDMGT":"","EDRPOU":null,"Last_Name":null,"First_Name":"\u042e\u043b\u0456\u044f","Middle_Name":null,"Date_Born":"","Gender":"","Blocked":1,"childs":[]}]}
//
Функция GetBuyerExtendedInfo(RequestData)	//	LNK 27.09.2022 08:12:07

	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;	//	LNK 18.09.2022 05:33:57

	КонтекстПриложения.РегистрацияВыполненияWebСервиса("InfoNode", "GetBuyerExtendedInfo", RequestData);
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\GetBuyerExtendedInfo", "in", RequestData, Истина);

	СоставОшибки = Новый Структура("Отказ, СтатусОшибки, ОписаниеОшибки, УжеОформлен", Ложь, "", "", Ложь);
	ДанныеОтвета = Новый Структура(
		"IDBASE, Number_PackMGT, DIFF, Clients, Error, ErrorMessage, ErrorType"
		, Константы.ИдентификаторУчетнойСистемы.Получить()
		, 1
		, СокрЛП(Новый УникальныйИдентификатор)
		, Новый Массив
		, Ложь
		, ""
		, ""
	);

	Попытка

		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(RequestData);
		ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON, Ложь,,, "ПолучитьДатуОтMagento", ОбменMagentoСервер,, ОбменMagentoСервер.ИменаТипаДата());

		Попытка

		//	Инициализируем пользователя административной учетной записью.
			ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.АдминистраторАвтоматов;

			ТаблицаВнешняя = ОбменMagentoСлужебный.ИнициализацияТаблицыКонтрагентовДляВнешнихДанных();

			НомерСтроки = 0;

			Для каждого ДанныеВнешние Из ДанныеЗапроса.Clients Цикл

				НомерСтроки = НомерСтроки + 1;
				
				СтрокаВнешняя = ТаблицаВнешняя.Добавить();
				СтрокаВнешняя.НомерСтроки = НомерСтроки;
				СтрокаВнешняя.ДанныеКонтрагента = ОбменMagentoСервер.ЗаполнитьСтруктуруПоВнешнимДанным(, ДанныеВнешние);
				СтрокаВнешняя.IDC = СтрокаВнешняя.ДанныеКонтрагента.КОДЫ.IDC;
				СтрокаВнешняя.НомерТелефона	= СтрокаВнешняя.ДанныеКонтрагента.КОНТАКТЫ.НомерТелефона;
				СтрокаВнешняя.Email			= СтрокаВнешняя.ДанныеКонтрагента.КОНТАКТЫ.Email;

			КонецЦикла;

			Справочники.Контрагенты.НайтиКонтрагентовПоСпискуMagento(ТаблицаВнешняя);

			Для каждого СтрокаВнешняя Из ТаблицаВнешняя Цикл

				Если НЕ ПустаяСтрока(СтрокаВнешняя.НомерТелефона) И СтрДлина(СтрокаВнешняя.НомерТелефона) = 12 Тогда

					Попытка

					//	фиксация полученных данных или создание нового элемента справочника.
						Справочники.Контрагенты.ПрименитьКонтрагентаПоДаннымMagento(СтрокаВнешняя);

					Исключение

						ОбменMagentoСлужебный.ОшибкаMagento(СтрокаВнешняя.ОписаниеОшибки
							, ОписаниеОшибки()
						);

					КонецПопытки;

				КонецЕсли;

			КонецЦикла;

			GetBuyerExtendedInfo_Clients(ТаблицаВнешняя, ДанныеОтвета.Clients, СоставОшибки);

		Исключение

			СоставОшибки.СтатусОшибки = "SYS_ERROR";
			ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
				, "[SYS]: " + ОписаниеОшибки()
				, СоставОшибки.Отказ
			);

		КонецПопытки;

	Исключение

		СоставОшибки.Отказ			= Истина;
		СоставОшибки.СтатусОшибки	= "JSON_WRONG_FORMAT";
		СоставОшибки.ОписаниеОшибки	= ОписаниеОшибки();

	КонецПопытки;

	ДанныеОтвета.Error			= JSON.БулевоКакЧисло(СоставОшибки.Отказ);
	ДанныеОтвета.ErrorMessage	= СоставОшибки.ОписаниеОшибки;
	ДанныеОтвета.ErrorType		= СоставОшибки.СтатусОшибки;

//	---------------------------------------------------------------------------------------

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	НастройкиJSON = Новый НастройкиСериализацииJSON;
	НастройкиJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;

	ЗаписатьJSON(ЗаписьJSON, ДанныеОтвета, НастройкиJSON, "ПередатьДатуДляMagento", ОбменMagentoСервер);

	ТекстJSON = ЗаписьJSON.Закрыть();

	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\GetBuyerExtendedInfo", "out", ТекстJSON, Истина);

	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;	//	LNK 18.09.2022 05:34:31

	Возврат ТекстJSON;

КонецФункции

//	LNK 28.09.2022 06:27:06
Процедура GetBuyerExtendedInfo_Clients(ТаблицаВнешняя, Clients, СоставОшибки)

	#Если Клиент Тогда
	//ТаблицаВнешняя = Новый ТаблицаЗначений;
	//Clients = Новый Массив;
	#КонецЕсли

	Запрос = Новый Запрос(ТекстЗапросаКонтрагенты());
	Запрос.УстановитьПараметр("ТаблицаВнешняя", ТаблицаВнешняя);
	ДанныеВыборка = Запрос.Выполнить().Выбрать();

	ЕстьБезОшибки = Ложь;
	ТекстОшибки	  = "";

	Пока ДанныеВыборка.Следующий() Цикл

		СтрокаВнешняя = ТаблицаВнешняя.Найти(ДанныеВыборка.НомерСтроки, "НомерСтроки");

		ДанныеКлиента = Новый Структура;
	//	---------------------------------------------------------------------------------------
		ДанныеКлиента.Вставить("phoneNumber", ДанныеВыборка.НомерТелефона);
		ДанныеКлиента.Вставить("email"		, ДанныеВыборка.Email);

		ДанныеКлиента.Вставить("IDC"	, ?(ДанныеВыборка.Контрагент.Пустая(), "", СокрЛП(ДанныеВыборка.Контрагент.УникальныйИдентификатор())));
		ДанныеКлиента.Вставить("IDMGT"	, СтрокаВнешняя.ДанныеКонтрагента.КОДЫ.IDMGT);
		ДанныеКлиента.Вставить("EDRPOU"	, СокрЛП(ДанныеВыборка.КодПоЕДРПОУ));

		ДанныеКлиента.Вставить("Found"			 , ?(СтрокаВнешняя.Найден, 1, 0));
		ДанныеКлиента.Вставить("ErrorDescription", ?(СтрокаВнешняя.Найден, "", СокрЛП(СтрокаВнешняя.ОписаниеОшибки)));

		ДанныеКлиента.Вставить("Blocked"	, ДанныеВыборка.Блокирован);
		ДанныеКлиента.Вставить("Employee"	, ДанныеВыборка.Сотрудник);
		ДанныеКлиента.Вставить("Gender"		, ДанныеВыборка.Пол);
		ДанныеКлиента.Вставить("Date_Born"	, ОбменMagentoСервер.ХитраяДата(ДанныеВыборка.ДатаРождения));

		ДанныеКлиента.Вставить("First_Name"	, СокрЛП(ДанныеВыборка.Имя));
		ДанныеКлиента.Вставить("Middle_Name", СокрЛП(ДанныеВыборка.Отчество));
		ДанныеКлиента.Вставить("Last_Name"	, СокрЛП(ДанныеВыборка.Фамилия));

		ДетиВыборка = ДанныеВыборка.Дети.Выбрать();

		ДанныеКлиента.Вставить("childs", Новый Массив);

		Пока ДетиВыборка.Следующий() Цикл

			ДанныеДети = Новый Структура;

			ДанныеДети.Вставить("Child_Name"		, СокрЛП(ДетиВыборка.Имя));
			ДанныеДети.Вставить("Date_Child_Born"	, ОбменMagentoСервер.ХитраяДата(ДетиВыборка.ДатаРождения));
			ДанныеДети.Вставить("Child_Gender"		, ДетиВыборка.Пол);

			ДанныеКлиента.childs.Добавить(ДанныеДети);

		КонецЦикла;

	//	---------------------------------------------------------------------------------------
		Clients.Добавить(ДанныеКлиента);

		Если ПустаяСтрока(ДанныеКлиента.ErrorDescription) Тогда

			ЕстьБезОшибки = Истина;

		Иначе

			ОбменMagentoСлужебный.ОшибкаMagento(ТекстОшибки
				, ДанныеКлиента.ErrorDescription
			);

		КонецЕсли;

	КонецЦикла;

	Если ЕстьБезОшибки Тогда

		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда

			СоставОшибки.СтатусОшибки = "WARNING_CLIENTS";

		КонецЕсли;

	Иначе	СоставОшибки.СтатусОшибки = "ERROR_CLIENTS";

	КонецЕсли;

	ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
		, ТекстОшибки
		, ?(ЕстьБезОшибки, Неопределено, СоставОшибки.Отказ)
	);

КонецПроцедуры

Функция ТекстЗапросаКонтрагенты()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Таблица.Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
	|	Таблица.НомерТелефона КАК НомерТелефона
	|ПОМЕСТИТЬ ТаблицаВнешняя
	|ИЗ
	|	&ТаблицаВнешняя КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВнешняя.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ТаблицаЗаголовки.Ссылка, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаголовки.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаЗаголовки.Блокирован
	|						ИЛИ ТаблицаЗаголовки.ПометкаУдаления
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК Блокирован,
	|	ЕСТЬNULL(ТаблицаКонтактыТелефон.НомерТелефона, ТаблицаВнешняя.НомерТелефона) КАК НомерТелефона,
	|	ЕСТЬNULL(ТаблицаКонтактыПочта.АдресЭП, """") КАК Email,
	|	ЕСТЬNULL(ТаблицаФИО.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(ТаблицаФИО.Имя, """") КАК Имя,
	|	ЕСТЬNULL(ТаблицаФИО.Отчество, """") КАК Отчество,
	|	ЕСТЬNULL(ТаблицаЗаголовки.КодПоЕДРПОУ, """") КАК КодПоЕДРПОУ,
	|	ЕСТЬNULL(ТаблицаЗаголовки.ДатаРождения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРождения,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаголовки.Ссылка ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаЗаголовки.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|					ТОГДА ""female""
	|				ИНАЧЕ ""male""
	|			КОНЕЦ
	|	КОНЕЦ КАК Пол,
	|	ВЫБОР
	|		КОГДА ТаблицаФизЛица.Ссылка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаФизЛица.Сотрудник = ИСТИНА
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК Сотрудник,
	|	ТаблицаЗаголовки.Дети.(
	|		Имя КАК Имя,
	|		ДатаРождения КАК ДатаРождения,
	|		ВЫБОР
	|			КОГДА ТаблицаЗаголовки.Дети.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|				ТОГДА ""female""
	|			ИНАЧЕ ""male""
	|		КОНЕЦ КАК Пол
	|	) КАК Дети
	|ИЗ
	|	ТаблицаВнешняя КАК ТаблицаВнешняя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаЗаголовки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ТаблицаФизЛица
	|			ПО ТаблицаЗаголовки.ФизЛицо = ТаблицаФизЛица.Ссылка
	|		ПО ТаблицаВнешняя.Контрагент = ТаблицаЗаголовки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтактыТелефон
	|		ПО ТаблицаВнешняя.Контрагент = ТаблицаКонтактыТелефон.Ссылка
	|			И (ТаблицаКонтактыТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтактыПочта
	|		ПО ТаблицаВнешняя.Контрагент = ТаблицаКонтактыПочта.Ссылка
	|			И (ТаблицаКонтактыПочта.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагента))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ТаблицаФИО
	|		ПО ТаблицаВнешняя.Контрагент = ТаблицаФИО.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаВнешняя"
	;

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область ПоддержкаРасчетаСкидок

//	"RequestData" - текст JSON, содержащий данные ОДНОГО чека для расчёта скидок.
//
Функция GetDiscountCalc(RequestData)	//	LNK 08.06.2021 07:07:47

	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;	//	LNK 18.09.2022 05:33:57

	КонтекстПриложения.РегистрацияВыполненияWebСервиса("InfoNode", "GetDiscountCalc", RequestData);
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\GetDiscountCalc", "in", RequestData, Истина);

	СоставОшибки	= Новый Структура("Отказ, СтатусОшибки, ОписаниеОшибки, УжеОформлен", Ложь, "", "", Ложь);
	УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	JSON.ЗаписатьСвойство("IDBASE", Константы.ИдентификаторУчетнойСистемы.Получить(), ЗаписьJSON);
	JSON.ЗаписатьСвойство("Number_PackMGT", 1, ЗаписьJSON);
	JSON.ЗаписатьСвойство("DIFF", СокрЛП(Новый УникальныйИдентификатор), ЗаписьJSON);

	Попытка

		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(RequestData);
		ДанныеЗапроса = УточнитьДанныеВнешнегоЗапроса(
			ПрочитатьJSON(ЧтениеJSON, Ложь,,, "ПолучитьДатуОтMagento", ОбменMagentoСервер,, ОбменMagentoСервер.ИменаТипаДата())
		);

		Попытка

			Если ДанныеЗапроса.OrderData.BuyerSpecified Тогда	//	LNK 04.11.2022 05:52:50

					РезультатЗащиты = РегистрыСведений.ПротоколСервисов.Разрешено(
						  ДанныеЗапроса.OrderData.Buyer.phoneNumber
						, "GetDiscountCalc"
						, ?(ПустаяСтрока(ДанныеЗапроса.OrderData.Number)
							, "Card."  + ?(ПустаяСтрока(ДанныеЗапроса.OrderData.Buyer.cardNumber), "NO_CARD", ДанныеЗапроса.OrderData.Buyer.cardNumber)
							, "Order." + ДанныеЗапроса.OrderData.Number
						)
					);

			Иначе	РезультатЗащиты = РегистрыСведений.ПротоколСервисов.СоставРезультата();
				//	Разрешаем без клиента, если указаны купоны в ТЧ "ПогашениеСкидочныхКупонов"
					РезультатЗащиты.Принять = ДанныеЗапроса.OrderData.Свойство("CouponsRedeemed") И ДанныеЗапроса.OrderData.CouponsRedeemed.Количество() > 0;

			КонецЕсли;

			Если РезультатЗащиты.Принять Тогда

			//	Инициализируем пользователя административной учетной записью.
				ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.АдминистраторАвтоматов;

			//	ДокументОбъект = ПолучитьДокументMagento(ДанныеЗапроса.OrderData, "ЧекККМ", Истина, УчетнаяПолитика, СоставОшибки);
				ДокументОбъект = ОбменMagentoСервер.ПолучитьДокументMagento(ДанныеЗапроса.OrderData, "ЧекККМ", Истина, УчетнаяПолитика, СоставОшибки);

				Если НЕ СоставОшибки.Отказ = Истина Тогда

				//	и вот переходим к расчёту скидок!
					СтруктураПараметры = Новый Структура;
					СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
					СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
					СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
					СтруктураПараметры.Вставить("УправляемыеСкидки");
					СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
					СтруктураПараметры.Вставить("ПорядковыйНомерПродажи",           0);
					СтруктураПараметры.Вставить("ПеренестиСкидкиПодаркиВТовары");
					СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	Ложь);
					СтруктураПараметры.Вставить("РабочееМесто", "");
					СтруктураПараметры.Вставить("ДатаРасчета" , ДокументОбъект.Дата);	//	LNK 19.05.2021 07:36:49
					СтруктураПараметры.Вставить("СкидкиПоЗаказуПокупателя", Истина);	//	LNK 25.10.2022 05:40:50

					Попытка

						ДанныеРасчетаСкидок = СкидкиНаценкиСерверПереопределяемый.Рассчитать(ДокументОбъект, СтруктураПараметры);

						ЗаписьJSON.ЗаписатьИмяСвойства("OrderData");

						ЗаписьJSON.ЗаписатьНачалоОбъекта();

							ЗаписатьРасчётСкидкиВJSON(ДокументОбъект, ЗаписьJSON, Ложь);

						ЗаписьJSON.ЗаписатьКонецОбъекта();

					Исключение

						СоставОшибки.СтатусОшибки = "SYS_ERROR";
						ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
							, "[SYS]: " + ОписаниеОшибки()
							, СоставОшибки.Отказ
						);

					КонецПопытки;

				КонецЕсли;

			Иначе

				СоставОшибки.Отказ = Истина;

				Если ДанныеЗапроса.OrderData.BuyerSpecified Тогда

					СоставОшибки.ОписаниеОшибки = "Відмовлено. Запит повторюється надто часто (" + Формат(РезультатЗащиты.Секунды, "ЧН=0; ЧГ=") + " сек.).";
					СоставОшибки.СтатусОшибки	= "DDoS_DEFENSE";

					ЗаписьJSON.ЗаписатьИмяСвойства("Buyer");

					ЗаписьJSON.ЗаписатьНачалоОбъекта();
					
						JSON.ЗаписатьСвойство("cardNumber"	, ДанныеЗапроса.OrderData.Buyer.cardNumber, ЗаписьJSON);
						JSON.ЗаписатьСвойство("phoneNumber"	, ДанныеЗапроса.OrderData.Buyer.phoneNumber, ЗаписьJSON);
						JSON.ЗаписатьСвойство("email"		, ДанныеЗапроса.OrderData.Buyer.email, ЗаписьJSON);

						JSON.ЗаписатьСвойство("IDC"   , ДанныеЗапроса.OrderData.Buyer.IDC, ЗаписьJSON);
						JSON.ЗаписатьСвойство("IDMGT" , ДанныеЗапроса.OrderData.Buyer.IDMGT, ЗаписьJSON);
						JSON.ЗаписатьСвойство("EDRPOU", ДанныеЗапроса.OrderData.Buyer.EDRPOU, ЗаписьJSON);

					ЗаписьJSON.ЗаписатьКонецОбъекта();

				Иначе

					СоставОшибки.ОписаниеОшибки = "Відмовлено. Не вказана інформація про покупця.";
					СоставОшибки.СтатусОшибки	= "BUYER:UNDEF";

				КонецЕсли;

			КонецЕсли;

		Исключение

			СоставОшибки.СтатусОшибки = "SYS_ERROR";
			ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
				, "[SYS]: " + ОписаниеОшибки()
				, СоставОшибки.Отказ
			);

		КонецПопытки;

	Исключение

		СоставОшибки.Отказ			= Истина;
		СоставОшибки.СтатусОшибки	= "JSON_WRONG_FORMAT";
		СоставОшибки.ОписаниеОшибки	= ОписаниеОшибки();

	КонецПопытки;

	JSON.ЗаписатьСвойство("Error"		, JSON.БулевоКакЧисло(СоставОшибки.Отказ), ЗаписьJSON);
	JSON.ЗаписатьСвойство("ErrorMessage", СоставОшибки.ОписаниеОшибки, ЗаписьJSON);
	JSON.ЗаписатьСвойство("ErrorType"	, СоставОшибки.СтатусОшибки, ЗаписьJSON);

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	ТекстJSON = ЗаписьJSON.Закрыть();
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\GetDiscountCalc", "out", ТекстJSON, Истина);

	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;	//	LNK 18.09.2022 05:34:31

	Возврат ТекстJSON;

КонецФункции

Процедура ЗаписатьРасчётСкидкиВJSON(ДокументОбъект, ЗаписьJSON, СокращенныйВариант = Ложь)

	#Если Клиент Тогда
	//ЗаписьJSON = Новый ЗаписьJSON;
	//ДокументОбъект = Документы.ЧекККМ.СоздатьДокумент();
	#КонецЕсли

//	Здесь документ может быть как "образом" (т.е. структурой) при расчете скидок,
//	так и обычным объектом.. например, при выгрузке. Учитываем такой факт.

	РеквизитыШапки = РеквизитыШапкиПолучить(ДокументОбъект);

	JSON.ЗаписатьСвойство("Number" , ДокументОбъект.Номер, ЗаписьJSON);
	JSON.ЗаписатьСвойство("Date"   , Формат(ДокументОбъект.Дата, "ДФ='yyyy/MM/dd ЧЧ:мм:сс'"), ЗаписьJSON);

	Если НЕ СокращенныйВариант = Истина Тогда

		JSON.ЗаписатьСвойство("Сompany", СокрЛП(РеквизитыШапки.КодПоЕДРПОУ), ЗаписьJSON);
		JSON.ЗаписатьСвойство("Depot"  , СокрЛП(РеквизитыШапки.IDNМагазина), ЗаписьJSON);
		JSON.ЗаписатьСвойство("TaxInclud" 	 , JSON.БулевоКакЧисло(ДокументОбъект.ЦенаВключаетНДС), ЗаписьJSON);
		JSON.ЗаписатьСвойство("CreditProgram", ОбменMagentoСлужебный.IDC_Строкой(ДокументОбъект.УслугаБанка), ЗаписьJSON);
		JSON.ЗаписатьСвойство("CreditDepth"  , ?(ДокументОбъект.УслугаБанка.Пустая(), 0, ДокументОбъект.УслугаБанкаПериодПредоставления), ЗаписьJSON);

	КонецЕсли;

	//	---------------------------------------------------------------------------------------

		ЗаписьJSON.ЗаписатьИмяСвойства("Buyer");

		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
			JSON.ЗаписатьСвойство("cardNumber"	, СокрЛП(РеквизитыШапки.КодКарты), ЗаписьJSON);
			JSON.ЗаписатьСвойство("phoneNumber"	, СокрЛП(РеквизитыШапки.НомерТелефона), ЗаписьJSON);
			JSON.ЗаписатьСвойство("email"		, СокрЛП(РеквизитыШапки.Почта), ЗаписьJSON);

			JSON.ЗаписатьСвойство("IDC"   , ОбменMagentoСлужебный.IDC_Строкой(РеквизитыШапки.Контрагент), ЗаписьJSON);
			JSON.ЗаписатьСвойство("IDMGT" , "", ЗаписьJSON);
			JSON.ЗаписатьСвойство("EDRPOU", СокрЛП(РеквизитыШапки.КонтрагентКодПоЕДРПОУ), ЗаписьJSON);

		ЗаписьJSON.ЗаписатьКонецОбъекта();

	//	---------------------------------------------------------------------------------------

		РеквизитыТоваров = РеквизитыТоваровУпаковокПолучить(ДокументОбъект.Товары);	//	соответствие

		ЗаписьJSON.ЗаписатьИмяСвойства("Products");

		ЗаписьJSON.ЗаписатьНачалоМассива();

		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

				JSON.ЗаписатьСвойство("KeyLink"		, СтрокаТабличнойЧасти.КлючСвязи, ЗаписьJSON);
				JSON.ЗаписатьСвойство("KeyLinkBonus", СтрокаТабличнойЧасти.КлючСвязиБонусныхБаллов, ЗаписьJSON);

				JSON.ЗаписатьСвойство("Action"  , JSON.БулевоКакЧисло(СтрокаТабличнойЧасти.АкционнаяЦена), ЗаписьJSON);
				JSON.ЗаписатьСвойство("IDN"		, СокрЛП(РеквизитыТоваров.Получить(СтрокаТабличнойЧасти.Номенклатура).IDN), ЗаписьJSON);

				JSON.ЗаписатьСвойство("Price"	, СтрокаТабличнойЧасти.Цена, ЗаписьJSON);
				JSON.ЗаписатьСвойство("Count"	, СтрокаТабличнойЧасти.КоличествоУпаковок, ЗаписьJSON);
				JSON.ЗаписатьСвойство("Summa"	, СтрокаТабличнойЧасти.Сумма, ЗаписьJSON);

				JSON.ЗаписатьСвойство("SummaAutoDiscount"	, СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки, ЗаписьJSON);
				JSON.ЗаписатьСвойство("SummaManualDiscount"	, СтрокаТабличнойЧасти.СуммаРучнойСкидки, ЗаписьJSON);

				JSON.ЗаписатьСвойство("SummaBonusAccrue", СтрокаТабличнойЧасти.СуммаБонусныхБалловНачислено, ЗаписьJSON);
				JSON.ЗаписатьСвойство("SummaBonusPay"	, СтрокаТабличнойЧасти.СуммаБонусныхБалловСписано, ЗаписьJSON);

				Если НЕ СокращенныйВариант = Истина Тогда

					JSON.ЗаписатьСвойство("TaxSumma", СтрокаТабличнойЧасти.СуммаНДС, ЗаписьJSON);
					JSON.ЗаписатьСвойство("TaxRate"	, НДСОбщегоНазначенияСервер.ПолучитьСтавкуНДСЧислом(СтрокаТабличнойЧасти.СтавкаНДС) * 100, ЗаписьJSON);

					ДанныеУпаковки = РеквизитыТоваров.Получить(СтрокаТабличнойЧасти.Упаковка);
					JSON.ЗаписатьСвойство("PackName", ДанныеУпаковки.Наименование, ЗаписьJSON);
					JSON.ЗаписатьСвойство("PackRate", ДанныеУпаковки.Коэффициент, ЗаписьJSON);

				КонецЕсли;

			ЗаписьJSON.ЗаписатьКонецОбъекта();

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();

	//	---------------------------------------------------------------------------------------

		ЗаписьJSON.ЗаписатьИмяСвойства("Discounts");

		ЗаписьJSON.ЗаписатьНачалоМассива();	//	Начало: СкидкиНаценки

		Для каждого СтрокаТабличнойЧасти Из ПодготовитьСкидкиНаценкиДляВыгрузки(ДокументОбъект.СкидкиНаценки) Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

			JSON.ЗаписатьСвойство("KeyLink"			, СтрокаТабличнойЧасти.КлючСвязи, ЗаписьJSON);
			JSON.ЗаписатьСвойство("DiscountType"	, ОбщегоНазначенияКлиентСервер.РеквизитПеречисления(СтрокаТабличнойЧасти.СпособПредоставления), ЗаписьJSON);
			JSON.ЗаписатьСвойство("Discount"		, ОбменMagentoСлужебный.IDC_Строкой(СтрокаТабличнойЧасти.СкидкаНаценка), ЗаписьJSON);
			JSON.ЗаписатьСвойство("DiscountName"	, СокрЛП(СтрокаТабличнойЧасти.СкидкаНаценка), ЗаписьJSON);
			JSON.ЗаписатьСвойство("TypeApplication"	, ОбменMagentoПовтИсп.СпособПримененияСкидкиИдентификатор(СтрокаТабличнойЧасти.СпособПримененияСкидки), ЗаписьJSON);
			JSON.ЗаписатьСвойство("LoyaltyProgram"	, ОбменMagentoСлужебный.IDC_Строкой(СтрокаТабличнойЧасти.ПрограммаЛояльности), ЗаписьJSON);
			JSON.ЗаписатьСвойство("Summa"			, СтрокаТабличнойЧасти.Сумма, ЗаписьJSON);

			ЗаписьJSON.ЗаписатьКонецОбъекта();

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();	//	Конец: СкидкиНаценки

	//	---------------------------------------------------------------------------------------

		ЗаписьJSON.ЗаписатьИмяСвойства("AccrueBonusPoints");

		ЗаписьJSON.ЗаписатьНачалоМассива();	//	Начало: НачислениеБонусныхБаллов

		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.НачислениеБонусныхБаллов Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

			JSON.ЗаписатьСвойство("LoyaltyProgram"		, ОбменMagentoСлужебный.IDC_Строкой(СтрокаТабличнойЧасти.ПрограммаЛояльности), ЗаписьJSON);
			JSON.ЗаписатьСвойство("LoyaltyProgramName"	, СокрЛП(СтрокаТабличнойЧасти.ПрограммаЛояльности), ЗаписьJSON);
			JSON.ЗаписатьСвойство("TypeBonus"			, ОбменMagentoПовтИсп.ТипБонусовИдентификатор(СтрокаТабличнойЧасти.ПрограммаЛояльности), ЗаписьJSON);
			JSON.ЗаписатьСвойство("DateAccrual"			, Формат(СтрокаТабличнойЧасти.ДатаНачисления, "ДФ=yyyy/MM/dd"), ЗаписьJSON);
			JSON.ЗаписатьСвойство("DateCancel"			, Формат(СтрокаТабличнойЧасти.ДатаСписания, "ДФ=yyyy/MM/dd"), ЗаписьJSON);
			JSON.ЗаписатьСвойство("Summa"				, СтрокаТабличнойЧасти.СуммаБонусныхБаллов, ЗаписьJSON);

			ЗаписьJSON.ЗаписатьКонецОбъекта();

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();	//	Конец: НачислениеБонусныхБаллов

	//	---------------------------------------------------------------------------------------

		ЗаписьJSON.ЗаписатьИмяСвойства("PayBonusPoints");

		ЗаписьJSON.ЗаписатьНачалоМассива();	//	Начало: ОплатаБонуснымиБаллами

		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.ОплатаБонуснымиБаллами Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

			JSON.ЗаписатьСвойство("KeyLinkBonus"		, СтрокаТабличнойЧасти.КлючСвязиБонусныхБаллов, ЗаписьJSON);
			JSON.ЗаписатьСвойство("LoyaltyProgram"		, ОбменMagentoСлужебный.IDC_Строкой(СтрокаТабличнойЧасти.ПрограммаЛояльности), ЗаписьJSON);
			JSON.ЗаписатьСвойство("LoyaltyProgramName"	, СокрЛП(СтрокаТабличнойЧасти.ПрограммаЛояльности), ЗаписьJSON);
			JSON.ЗаписатьСвойство("TypeBonus"			, ОбменMagentoПовтИсп.ТипБонусовИдентификатор(СтрокаТабличнойЧасти.ПрограммаЛояльности), ЗаписьJSON);
			JSON.ЗаписатьСвойство("Summa"				, СтрокаТабличнойЧасти.СуммаБонусныхБаллов, ЗаписьJSON);

			ЗаписьJSON.ЗаписатьКонецОбъекта();

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();	//	Конец: ОплатаБонуснымиБаллами

	//	---------------------------------------------------------------------------------------

		РеквизитыКупонов = РеквизитыКупоновПолучить(ДокументОбъект.ВыдачаСкидочныхКупонов);		//	соответствие
		РеквизитыКупоновПолучить(ДокументОбъект.ПогашениеСкидочныхКупонов, РеквизитыКупонов);	//	соответствие

		ЗаписьJSON.ЗаписатьИмяСвойства("CouponsIssued");

		ЗаписьJSON.ЗаписатьНачалоМассива();	//	ВыдачаСкидочныхКупонов: Начало

		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.ВыдачаСкидочныхКупонов Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();	//	Элемент массива: Начало

				ТипКупона	   = "";
				СкидочныйКупон = "";
				Представление  = "";
				СерийныйНомер  = "";

				Если СтрокаТабличнойЧасти.СкидочныйКупон = Неопределено Тогда

					ТипКупона = "undef";

				ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.СкидочныйКупон) = Тип("Строка") Тогда
				
					ТипКупона = "String";
					СкидочныйКупон = СокрЛП(СтрокаТабличнойЧасти.СкидочныйКупон);
					Представление  = СокрЛП(СтрокаТабличнойЧасти.СкидочныйКупон);

				Иначе

					РеквизитыКупона = РеквизитыКупонов.Получить(СтрокаТабличнойЧасти.СкидочныйКупон);
					ТипКупона		= РеквизитыКупона.Тип;
					СкидочныйКупон	= РеквизитыКупона.СкидочныйКупон;
					Представление	= РеквизитыКупона.Наименование;

				КонецЕсли;

				Если ТипЗнч(СтрокаТабличнойЧасти.СерийныйНомер) = Тип("Строка") Тогда

					СерийныйНомер = СокрЛП(СтрокаТабличнойЧасти.СерийныйНомер);

				ИначеЕсли НЕ СтрокаТабличнойЧасти.СерийныйНомер = Неопределено Тогда

					СерийныйНомер = РеквизитыКупонов.Получить(СтрокаТабличнойЧасти.СерийныйНомер);

				КонецЕсли;

				JSON.ЗаписатьСвойство("Type"		, ТипКупона, ЗаписьJSON);
				JSON.ЗаписатьСвойство("Coupon"		, СкидочныйКупон, ЗаписьJSON);
				JSON.ЗаписатьСвойство("CouponName"	, Представление, ЗаписьJSON);
				JSON.ЗаписатьСвойство("SerialNumber", СерийныйНомер, ЗаписьJSON);
				JSON.ЗаписатьСвойство("Nominal"		, СтрокаТабличнойЧасти.НоминалКупона, ЗаписьJSON);
				JSON.ЗаписатьСвойство("Count"		, СтрокаТабличнойЧасти.Количество, ЗаписьJSON);

			ЗаписьJSON.ЗаписатьКонецОбъекта();	//	Элемент массива: Конец

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();	//	ВыдачаСкидочныхКупонов: Конец

		ЗаписьJSON.ЗаписатьИмяСвойства("CouponsRedeemed");

		ЗаписьJSON.ЗаписатьНачалоМассива();	//	ПогашениеСкидочныхКупонов: Начало

		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.ПогашениеСкидочныхКупонов Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();	//	Элемент массива: Начало

				ТипКупона	   = "";
				СкидочныйКупон = "";
				Представление  = "";
				СерийныйНомер  = "";

				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СкидочныйКупон) Тогда

					ТипКупона = "undef";

				Иначе

					РеквизитыКупона = РеквизитыКупонов.Получить(СтрокаТабличнойЧасти.СкидочныйКупон);
					ТипКупона		= РеквизитыКупона.Тип;
					СкидочныйКупон	= РеквизитыКупона.СкидочныйКупон;
					Представление	= РеквизитыКупона.Наименование;

				КонецЕсли;

				Если ТипЗнч(СтрокаТабличнойЧасти.СерийныйНомер) = Тип("Строка") Тогда

					СерийныйНомер = СокрЛП(СтрокаТабличнойЧасти.СерийныйНомер);

				ИначеЕсли НЕ СтрокаТабличнойЧасти.СерийныйНомер = Неопределено Тогда

					СерийныйНомер = РеквизитыКупонов.Получить(СтрокаТабличнойЧасти.СерийныйНомер);

				КонецЕсли;

				JSON.ЗаписатьСвойство("Type"		, ТипКупона, ЗаписьJSON);
				JSON.ЗаписатьСвойство("Coupon"		, СкидочныйКупон, ЗаписьJSON);
				JSON.ЗаписатьСвойство("CouponName"	, Представление, ЗаписьJSON);
				JSON.ЗаписатьСвойство("SerialNumber", СерийныйНомер, ЗаписьJSON);
				JSON.ЗаписатьСвойство("Nominal"		, СтрокаТабличнойЧасти.НоминалКупона, ЗаписьJSON);
				JSON.ЗаписатьСвойство("Accepted"	, JSON.БулевоКакЧисло(СтрокаТабличнойЧасти.Принят), ЗаписьJSON);
				JSON.ЗаписатьСвойство("ErrorMessage", "", ЗаписьJSON);	//	если купон не был применён.. как это сделать, ещё не знаю.

			ЗаписьJSON.ЗаписатьКонецОбъекта();	//	Элемент массива: Конец

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();	//	ПогашениеСкидочныхКупонов: Конец

КонецПроцедуры

Функция РеквизитыШапкиПолучить(ДокументОбъект)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаОрганизации.КодПоЕДРПОУ, Ведущая.КодПоЕДРПОУ) КАК КодПоЕДРПОУ,
	|	ЕСТЬNULL(ТаблицаМагазины.СкладПродажи.IDN, Ведущая.IDNМагазина) КАК IDNМагазина,
	|	ЕСТЬNULL(ТаблицаПокупатели.Ссылка, Ведущая.Контрагент) КАК Контрагент,
	|	ЕСТЬNULL(ТаблицаПокупатели.КодПоЕДРПОУ, Ведущая.КонтрагентКодПоЕДРПОУ) КАК КонтрагентКодПоЕДРПОУ,
	|	ЕСТЬNULL(ТаблицаКарты.КодКарты, Ведущая.КодКарты) КАК КодКарты,
	|	ЕСТЬNULL(ТаблицаТелефоны.НомерТелефона, Ведущая.НомерТелефона) КАК НомерТелефона,
	|	ЕСТЬNULL(ТаблицаПочта.АдресЭП, Ведущая.Почта) КАК Почта
	|ИЗ
	|	(ВЫБРАТЬ
	|		"""" КАК КодПоЕДРПОУ,
	|		"""" КАК IDNМагазина,
	|		ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|		"""" КАК КонтрагентКодПоЕДРПОУ,
	|		"""" КАК КодКарты,
	|		"""" КАК НомерТелефона,
	|		"""" КАК Почта) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ТаблицаОрганизации
	|		ПО (ТаблицаОрганизации.Ссылка = &Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины КАК ТаблицаМагазины
	|		ПО (ТаблицаМагазины.Ссылка = &Магазин)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаПокупатели
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаТелефоны
	|			ПО ТаблицаПокупатели.Ссылка = ТаблицаТелефоны.Ссылка
	|				И (ТаблицаТелефоны.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаПочта
	|			ПО ТаблицаПокупатели.Ссылка = ТаблицаПочта.Ссылка
	|				И (ТаблицаПочта.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагента))
	|		ПО (ТаблицаПокупатели.Ссылка = &Контрагент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ТаблицаКарты
	|		ПО (ТаблицаКарты.Ссылка = &ДисконтнаяКарта)
	|ГДЕ
	|	ТаблицаОрганизации.Ссылка = &Организация"
	);
	Запрос.УстановитьПараметр("Организация"		, ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("Магазин"			, ДокументОбъект.Магазин);
	Запрос.УстановитьПараметр("Контрагент"		, ДокументОбъект.ВладелецДисконтнойКарты);
	Запрос.УстановитьПараметр("ДисконтнаяКарта"	, ДокументОбъект.ДисконтнаяКарта);
	
	РеквизитыВыборка = Запрос.Выполнить().Выбрать();
	РеквизитыВыборка.Следующий();

	Возврат РеквизитыВыборка;

КонецФункции

Функция РеквизитыТоваровУпаковокПолучить(Товары)

	РеквизитыТоваров = Новый Соответствие;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.IDN = """"
	|			ТОГДА ТаблицаТовары.Код
	|		ИНАЧЕ ТаблицаТовары.IDN
	|	КОНЕЦ КАК IDN
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&СписокТовары)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	""NULL""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУпаковки.Ссылка КАК Упаковка,
	|	ТаблицаУпаковки.Наименование КАК Наименование,
	|	ТаблицаУпаковки.Коэффициент КАК Коэффициент
	|ИЗ
	|	Справочник.УпаковкиНоменклатуры КАК ТаблицаУпаковки
	|ГДЕ
	|	ТаблицаУпаковки.Ссылка В(&СписокУпаковки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка),
	|	""шт."",
	|	1"
	);
	Запрос.УстановитьПараметр("СписокТовары"  , ОбщегоНазначения.ВыгрузитьКоллекцию(Товары,, "Номенклатура").ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("СписокУпаковки", ОбщегоНазначения.ВыгрузитьКоллекцию(Товары,, "Упаковка").ВыгрузитьКолонку("Упаковка"));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();

	Выборка = РезультатыЗапроса[0].Выбрать();	//	Товары

	Пока Выборка.Следующий() Цикл

		РеквизитыТоваров.Вставить(Выборка.Номенклатура, Новый Структура("IDN", СокрЛП(Выборка.IDN)));

	КонецЦикла;

	Выборка = РезультатыЗапроса[1].Выбрать();	//	Упаковки

	Пока Выборка.Следующий() Цикл

		РеквизитыТоваров.Вставить(Выборка.Упаковка, Новый Структура("Наименование, Коэффициент", СокрЛП(Выборка.Наименование), Выборка.Коэффициент));

	КонецЦикла;

	Возврат РеквизитыТоваров;

КонецФункции

Функция РеквизитыКупоновПолучить(ТабличнаяЧасть, РеквизитыКупонов = Неопределено)

	Если РеквизитыКупонов = Неопределено Тогда

		РеквизитыКупонов = Новый Соответствие;

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСкидки.Ссылка КАК Ссылка,
	|	ТаблицаСкидки.Ссылка КАК СкидочныйКупон,
	|	ТаблицаСкидки.Наименование КАК Наименование
	|ИЗ
	|	Справочник.СкидкиНаценки КАК ТаблицаСкидки
	|ГДЕ
	|	ТаблицаСкидки.Ссылка В(&СписокКупоны)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Ссылка,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатура.IDN = """"
	|			ТОГДА ТаблицаНоменклатура.Код
	|		ИНАЧЕ ТаблицаНоменклатура.IDN
	|	КОНЕЦ,
	|	ТаблицаНоменклатура.Наименование
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаНоменклатура
	|ГДЕ
	|	ТаблицаНоменклатура.Ссылка В(&СписокКупоны)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерийныеНомера.Ссылка КАК СерийныйНомер,
	|	СерийныеНомера.КодСерийногоНомера КАК КодСерийногоНомера
	|ИЗ
	|	Справочник.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	СерийныеНомера.Ссылка В(&СписокНомера)"
	);
	Запрос.УстановитьПараметр("СписокКупоны", ОбщегоНазначения.ВыгрузитьКоллекцию(ТабличнаяЧасть,, "СкидочныйКупон").ВыгрузитьКолонку("СкидочныйКупон"));
	Запрос.УстановитьПараметр("СписокНомера", ОбщегоНазначения.ВыгрузитьКоллекцию(ТабличнаяЧасть,, "СерийныйНомер").ВыгрузитьКолонку("СерийныйНомер"));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();

	Выборка = РезультатыЗапроса[0].Выбрать();	//	СкидкиНаценки/Номенклатура
	
	Пока Выборка.Следующий() Цикл

		РеквизитыКупонов.Вставить(Выборка.Ссылка, Новый Структура(
			"СкидочныйКупон, Наименование, Тип"
			, ?(ТипЗнч(Выборка.СкидочныйКупон) = Тип("Строка")
					, СокрЛП(Выборка.СкидочныйКупон)
					, ОбменMagentoСлужебный.IDC_Строкой(Выборка.СкидочныйКупон)
				)
			, СокрЛП(Выборка.Наименование)
			, ?(ТипЗнч(Выборка.СкидочныйКупон) = Тип("Строка"), "Coupon", "Discount")
			)
		);

	КонецЦикла;

	Выборка = РезультатыЗапроса[1].Выбрать();	//	СерийныеНомера

	Пока Выборка.Следующий() Цикл

		РеквизитыКупонов.Вставить(Выборка.СерийныйНомер, СокрЛП(Выборка.КодСерийногоНомера));

	КонецЦикла;

	Возврат РеквизитыКупонов;

КонецФункции

Функция ПодготовитьСкидкиНаценкиДляВыгрузки(СкидкиНаценки)	//	LNK 12.11.2021 10:56:50

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СкидкиНаценки.НомерСтроки КАК НомерСтроки,
	|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	ВЫРАЗИТЬ(СкидкиНаценки.СкидкаНаценка КАК Справочник.СкидкиНаценки) КАК СкидкаНаценка,
	|	СкидкиНаценки.СпособПримененияСкидки КАК СпособПримененияСкидки,
	|	СкидкиНаценки.Сумма КАК Сумма
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&СкидкиНаценки КАК СкидкиНаценки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.НомерСтроки КАК НомерСтроки,
	|	Источник.КлючСвязи КАК КлючСвязи,
	|	Источник.СкидкаНаценка КАК СкидкаНаценка,
	|	Источник.СпособПримененияСкидки КАК СпособПримененияСкидки,
	|	Источник.Сумма КАК Сумма,
	|	Источник.СкидкаНаценка.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	Источник.СкидкаНаценка.СпособПредоставления КАК СпособПредоставления
	|ИЗ
	|	Источник КАК Источник
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	);
	Запрос.УстановитьПараметр("СкидкиНаценки", СкидкиНаценки);

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

//	LNK 20.11.2018 11:22:02
Функция GetGoodsPrice(SKU)

	УстановитьПривилегированныйРежим(Истина);

	КонтекстПриложения.РегистрацияВыполненияWebСервиса("InfoNode", "GetGoodsPrice", SKU);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Номенклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.IDN В(&СписокКодов)
	|	И НЕ Номенклатура.IDN = """"
	|	И НЕ Номенклатура.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействующиеЦены.ОбъектЦенообразования.НомерМагазина КАК НомерМагазина,
	|	ДействующиеЦены.Номенклатура.IDN КАК КодТовара,
	|	ДействующиеЦены.Цена КАК Цена,
	|	ЕСТЬNULL(ДействующиеЦены.Упаковка.Наименование, ""шт."") КАК Упаковка,
	|	ЕСТЬNULL(ДействующиеЦены.Упаковка.Коэффициент, 1) КАК Коэффициент
	|ИЗ
	|	РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
	|			,
	|			ОбъектЦенообразования.ВведенВЭксплуатацию
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						Фильтр.Ссылка
	|					ИЗ
	|						Фильтр)) КАК ДействующиеЦены
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодТовара,
	|	НомерМагазина
	|ИТОГИ ПО
	|	КодТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Фильтр"
	);
	Запрос.УстановитьПараметр("СписокКодов", ОбщегоНазначенияКлиентСервер.lx_FillValueList(, SKU,, ",",,, Новый ОписаниеТипов("Строка")));

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	ЗаписьJSON.ЗаписатьИмяСвойства("query");
	ЗаписьJSON.ЗаписатьЗначение(SKU);

	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		ЗаписьJSON.ЗаписатьИмяСвойства("goods");

		ЗаписьJSON.ЗаписатьНачалоМассива();

		ОбщаяВыборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ОбщаяВыборка.Следующий() Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

				ЗаписьJSON.ЗаписатьИмяСвойства("sku");
				ЗаписьJSON.ЗаписатьЗначение(ОбщаяВыборка.КодТовара);

				ЗаписьJSON.ЗаписатьИмяСвойства("prices");

				ЗаписьJSON.ЗаписатьНачалоМассива();

				ДеталиВыборка = ОбщаяВыборка.Выбрать();

				Пока ДеталиВыборка.Следующий() Цикл

					ЗаписьJSON.ЗаписатьНачалоОбъекта();

						ЗаписьJSON.ЗаписатьИмяСвойства("shopnumber");
						ЗаписьJSON.ЗаписатьЗначение(ДеталиВыборка.НомерМагазина);

						ЗаписьJSON.ЗаписатьИмяСвойства("price");
						ЗаписьJSON.ЗаписатьЗначение(ДеталиВыборка.Цена);

						ЗаписьJSON.ЗаписатьИмяСвойства("unit");
						ЗаписьJSON.ЗаписатьЗначение(ДеталиВыборка.Упаковка);

						ЗаписьJSON.ЗаписатьИмяСвойства("multiplier");
						ЗаписьJSON.ЗаписатьЗначение(ДеталиВыборка.Коэффициент);

					ЗаписьJSON.ЗаписатьКонецОбъекта();

				КонецЦикла;

				ЗаписьJSON.ЗаписатьКонецМассива();

			ЗаписьJSON.ЗаписатьКонецОбъекта();

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();

	КонецЕсли;

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

//	LNK 01.04.2019 12:09:51
Функция NameClassifier()

	УстановитьПривилегированныйРежим(Истина);

	КонтекстПриложения.РегистрацияВыполненияWebСервиса("InfoNode", "NameClassifier");

	ФлагиВыгрузки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"InfoNode", "NameClassifier", Новый Структура("Наименование, Дата", "", НачалоДня(ТекущаяДата())));

	Если НЕ ФлагиВыгрузки.Дата = НачалоДня(ТекущаяДата()) Тогда

		ФлагиВыгрузки.Наименование = "";
		ФлагиВыгрузки.Дата = НачалоДня(ТекущаяДата());

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	ТаблицаСправочник.Наименование КАК Наименование,
	|	ТаблицаСправочник.НаименованиеУкраинское КАК НаименованиеУкраинское,
	|	ВЫБОР
	|		КОГДА ТаблицаСправочник.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Пол
	|ИЗ
	|	Справочник.ИменаЛюдей КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Наименование > &ТочкаОтсчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование"
	);
	Запрос.УстановитьПараметр("ТочкаОтсчета", ФлагиВыгрузки.Наименование);

	Выборка = Запрос.Выполнить().Выбрать();

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	ЗаписьJSON.ЗаписатьИмяСвойства("names");

	ЗаписьJSON.ЗаписатьНачалоМассива();

	Пока Выборка.Следующий() Цикл

		ЗаписьJSON.ЗаписатьНачалоОбъекта();

			JSON.ЗаписатьСвойство("name_ru", Выборка.Наименование, ЗаписьJSON);
			JSON.ЗаписатьСвойство("name_ua", Выборка.НаименованиеУкраинское, ЗаписьJSON);
			JSON.ЗаписатьСвойство("gender" , Выборка.Пол, ЗаписьJSON);

		ЗаписьJSON.ЗаписатьКонецОбъекта();

		ФлагиВыгрузки.Наименование = Выборка.Наименование;

	КонецЦикла;

	ЗаписьJSON.ЗаписатьКонецМассива();

	ЗаписьJSON.ЗаписатьИмяСвойства("count_results");
	ЗаписьJSON.ЗаписатьЗначение(Формат(Выборка.Количество(), "ЧН=0; ЧГ="));

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"InfoNode", 
		"NameClassifier", 
		ФлагиВыгрузки
	);

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

//	LNK 19.03.2018 12:32:59
Функция OrderBuyer(Number, Command)

	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;	//	LNK 18.09.2022 05:33:57

	КонтекстПриложения.РегистрацияВыполненияWebСервиса("InfoNode", "OrderBuyer", Number, Command);

//	Инициализируем пользователя административной учетной записью.
	ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.АдминистраторАвтоматов;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	Если НЕ ПустаяСтрока(Number) Тогда

		Number = СокрЛП(Number);

		Если Command = "canceled" Тогда

			Команда = "WEB_ЗАКРЫТЬ_ЗАКАЗ_ПОКУПАТЕЛЯ";

		Иначе
			
			Команда = "";

		КонецЕсли;

		Если НЕ ПустаяСтрока(Команда) Тогда

			Попытка

				ВнешниеИсточникиСобытия.УстановитьОбъектДляОбработки(Number, Команда);

				ЗаписьJSON.ЗаписатьИмяСвойства("result");
				ЗаписьJSON.ЗаписатьЗначение("number '" + Number + "' accepted for processing in " + Формат(ТекущаяДата(), "ДФ='yyyy-MM-dd ЧЧ:мм:сс'"));

			Исключение

				ТекстОшибки = ОписаниеОшибки();

				ЗаписьJSON.ЗаписатьИмяСвойства("result");
				ЗаписьJSON.ЗаписатьЗначение("error: " + ТекстОшибки);

			КонецПопытки;

		КонецЕсли;

		ЗаписьJSON.ЗаписатьИмяСвойства("command");
		ЗаписьJSON.ЗаписатьЗначение(?(ПустаяСтрока(Команда), "unknown", Команда));

	Иначе

		ЗаписьJSON.ЗаписатьИмяСвойства("result");
		ЗаписьJSON.ЗаписатьЗначение("error: number is wrong");

		ЗаписьJSON.ЗаписатьИмяСвойства("command");
		ЗаписьJSON.ЗаписатьЗначение("non");

	КонецЕсли;

	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;	//	LNK 18.09.2022 05:34:31

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

#Область ОбработкаВходящихЗаказовПокупателейОтMagento

//	Входящий обмен с Magento по заказам покупателей
//
Функция PutOrderBuyer(Command, RequestData)	//	LNK 29.10.2021 11:52:04

//	Command:
//		update, close, cancel

	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;	//	LNK 18.09.2022 05:33:57

	КонтекстПриложения.РегистрацияВыполненияWebСервиса("InfoNode", "PutOrderBuyer", Command);
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\PutOrderBuyer\" + Command, "in", RequestData, Истина);

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(RequestData);
	ДанныеЗапроса = УточнитьДанныеВнешнегоЗапроса(
		ПрочитатьJSON(ЧтениеJSON, Ложь,,, "ПолучитьДатуОтMagento", ОбменMagentoСервер,, ОбменMagentoСервер.ИменаТипаДата())
	);

	СоставОшибки	= Новый Структура("Отказ, СтатусОшибки, ОписаниеОшибки, УжеОформлен, ОбрабатываетсяВ1С", Ложь, "", "", Ложь, Ложь);
	УчетнаяПолитика	= ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	IDBASE = Константы.ИдентификаторУчетнойСистемы.Получить();

	JSON.ЗаписатьСвойство("IDBASE", IDBASE, ЗаписьJSON);
	JSON.ЗаписатьСвойство("Number_PackMGT", 1, ЗаписьJSON);
	JSON.ЗаписатьСвойство("DIFF", СокрЛП(Новый УникальныйИдентификатор), ЗаписьJSON);

	Попытка

	//	Инициализируем пользователя административной учетной записью.
		ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.АдминистраторАвтоматов;

		Если Command = "update" ИЛИ Command = "close" ИЛИ Command = "cancel" Тогда

		//	ДокументОбъект = ПолучитьДокументMagento(ДанныеЗапроса.OrderData, "ЗаказПокупателя", Ложь, УчетнаяПолитика, СоставОшибки);
			ДокументОбъект = ОбменMagentoСервер.ПолучитьДокументMagento(ДанныеЗапроса.OrderData, "ЗаказПокупателя", Ложь, УчетнаяПолитика, СоставОшибки);
			#Если Клиент Тогда
			//ДокументОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
			#КонецЕсли

		//	ПроверитьДокументMagento(ДокументОбъект, СоставОшибки);
			ОбменMagentoСервер.ПроверитьДокументMagento(ДокументОбъект, СоставОшибки);

 			ДокументОбъект.ДополнительныеСвойства.Вставить(
				"ДанныеПолучения"
				, Новый Структура(
					"ДатаИзмененияСтатуса, ДатаПередачи"
					, ?(ТипЗнч(ДанныеЗапроса.TimeChangeStatus) = Тип("Дата"), МестноеВремя(ДанныеЗапроса.TimeChangeStatus, ЧасовойПояс()), ДанныеЗапроса.TimeChangeStatus)
					, ?(ТипЗнч(ДанныеЗапроса.TimeSend) = Тип("Дата"), МестноеВремя(ДанныеЗапроса.TimeSend, ЧасовойПояс()), ДанныеЗапроса.TimeSend)
				)
			);

			Представление = "«" + СокрЛП(ДокументОбъект.Номер) + " від " + СокрЛП(ДокументОбъект.Дата) + " (маг.:" + ДокументОбъект.Магазин + ")»";

			Если НЕ (СоставОшибки.Отказ Или СоставОшибки.ОбрабатываетсяВ1С) Тогда
				
				//08.01.2024 Сичкаренко
				// https://awdev.atlassian.net/browse/RETAIL1C-597
				// Если заказ с дробью, то обрабатывать толко в Мадженте 
				Если ДокументОбъект.ЭтоНовый() Тогда
					ЕстьДробь = СтрНайти(ДокументОбъект.Номер, "-");
					Если Не ЕстьДробь = 0 Тогда
						ДокументОбъект.УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.Magento;
					КонецЕсли;
				КонецЕсли;

				Если Command = "update" Тогда

					ЗаписатьЗаказПокупателя(ДокументОбъект, УчетнаяПолитика, СоставОшибки);

				ИначеЕсли Command = "close" ИЛИ Command = "cancel" Тогда

					Если ДокументОбъект.ЭтоНовый() Тогда

						ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
							, "документ " + Представление + " у базі даних не виявлено і він не може бути закритий або скасований"
							, СоставОшибки.Отказ
						);

					ИначеЕсли НЕ ДокументОбъект.Проведен Тогда

						ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
							, "документ " + Представление + " не проведено і він не може бути закритий або скасований"
							, СоставОшибки.Отказ
						);

					Иначе

						ДокументОбъект.Статус = ?(Command = "cancel"
							, Перечисления.СтатусыЗаказовПокупателей.Отменён
							, Перечисления.СтатусыЗаказовПокупателей.Закрыт
						);
						ЗаписатьЗаказПокупателя(ДокументОбъект, УчетнаяПолитика, СоставОшибки);

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		Иначе

			ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
				, "невідома команда [" + Command + "] для сервісу (наразі можуть бути оброблені команди: 'update', 'close', 'cancel')"
				, СоставОшибки.Отказ
			);

		КонецЕсли;

	Исключение

		СоставОшибки.СтатусОшибки = "SYS_ERROR";
		ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
			, "[SYS]: " + ОписаниеОшибки()
			, СоставОшибки.Отказ
		);

	КонецПопытки;

	JSON.ЗаписатьСвойство("Error"		, JSON.БулевоКакЧисло(СоставОшибки.Отказ), ЗаписьJSON);
	JSON.ЗаписатьСвойство("ErrorMessage", СоставОшибки.ОписаниеОшибки, ЗаписьJSON);
	JSON.ЗаписатьСвойство("ErrorType"	, СоставОшибки.СтатусОшибки, ЗаписьJSON);

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	ТекстJSON = ЗаписьJSON.Закрыть();
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\PutOrderBuyer\" + Command, "out", ТекстJSON, Истина);

	Если НЕ ПустаяСтрока(СоставОшибки.ОписаниеОшибки) ИЛИ СоставОшибки.Отказ Тогда

		УровеньЖурнала =  ?(УчетнаяПолитика.РазрешитьПрямуюИнтеграциюMagento, УровеньЖурналаРегистрации.Примечание
						, ?(СоставОшибки.Отказ, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Предупреждение));

		ЖурналСобытий.Регистрация("MAGENTO.PutOrderBuyer"
			, УровеньЖурнала
			, Метаданные.Документы.ЗаказПокупателя
			, ?(ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПокупателя"), ДокументОбъект.Ссылка, Неопределено)
			, ноВЫЙ ХранилищеЗначения(RequestData)
			, СоставОшибки.ОписаниеОшибки 
			, СокрЛП(ДокументОбъект) + Символы.ПС
				+ "JSON IN:" + Символы.ПС + RequestData + Символы.ПС
				+ "JSON OUT:" + Символы.ПС + ТекстJSON
			, Ложь
			, Ложь
		);
	Иначе	
		УровеньЖурнала =  ?(УчетнаяПолитика.РазрешитьПрямуюИнтеграциюMagento, УровеньЖурналаРегистрации.Примечание
						, ?(СоставОшибки.Отказ, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Предупреждение));

		ЖурналСобытий.Регистрация("MAGENTO.PutOrderBuyer"
			, УровеньЖурнала
			, Метаданные.Документы.ЗаказПокупателя
			, ?(ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПокупателя"), ДокументОбъект.Ссылка, Неопределено)
			, ноВЫЙ ХранилищеЗначения(RequestData)
			, "Успешная загрузка" 
			, СокрЛП(ДокументОбъект) + Символы.ПС
				+ "JSON IN:" + Символы.ПС + RequestData + Символы.ПС
				+ "JSON OUT:" + Символы.ПС + ТекстJSON
			, Ложь
			, Ложь
		);
	КонецЕсли;

	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;	//	LNK 18.09.2022 05:34:31

	Возврат ТекстJSON;

КонецФункции

Функция ЗаписатьЗаказПокупателя(ДокументОбъект, УчетнаяПолитика, СоставОшибки)

	#Если Клиент Тогда
	//ДокументОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
	#КонецЕсли

	ДокументОбъект.ПометкаУдаления	= Ложь;	//	на всякий случай!
	ДокументОбъект.Автор			= Справочники.Пользователи.АдминистраторАвтоматов;
	//ДокументОбъект.Ответственный	= Справочники.Пользователи.АдминистраторАвтоматов;
	ОтветственныйЗаЗаказ	= ЗаказыПокупателейСервер.ОтветственныйЗаЗаказ(ДокументОбъект);
	ДокументОбъект.Ответственный = ОтветственныйЗаЗаказ.Пользователь;
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("СлужебнаяЗапись"			, Истина);
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаДокументаОтMagento"	, Истина);

	ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения"	, Истина);
	ДокументОбъект.УстановитьПериодыНачисленияБонусныхБаллов(Ложь, РежимЗаписиДокумента.Проведение);	//	LNK 29.11.2021 16:37:58

	Попытка

		НачатьТранзакцию();

		Если ДокументОбъект.Проведен ИЛИ ДокументОбъект.ЭтоНовый() Тогда

				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);

		Иначе	ДокументОбъект.Записать();

		КонецЕсли;
		
		ЗаказыПокупателейСервер.СотрудникНовыйЗаказ(ОтветственныйЗаЗаказ.Сотрудник);

		РегистрыСведений.КомментарийИнтернетЗаказа.ЗаписьКомментария(ДокументОбъект.Ссылка,
																		Справочники.Пользователи.АдминистраторАвтоматов,
																		"Заказ получен из Magento");
		Если УчетнаяПолитика.РазрешитьПрямуюИнтеграциюMagento = Истина Тогда

				ЗафиксироватьТранзакцию();

		Иначе	ОтменитьТранзакцию();	//	предохранитель на какое-то время

		КонецЕсли;

	Исключение

		ОтменитьТранзакцию();

		ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
			, "[Товары]: " + ОписаниеОшибки()
			, СоставОшибки.Отказ
		);

	КонецПопытки;

	Возврат НЕ СоставОшибки.Отказ;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедуры

//	LNK 19.01.2018 15:00:52
Процедура ПодготовитьПараметрыЗапроса(SKU, Запрос, ТекстЗапроса)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК Склад
	|ИЗ
	|	Справочник.Склады.ДополнительныеРеквизиты КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.СкладОтраженВОстаткахДляИнтернетМагазина)
	|	И ТаблицаСправочник.Значение = ИСТИНА
	|	И НЕ ТаблицаСправочник.Ссылка.IDN = """"
	|	И НЕ ТаблицаСправочник.Ссылка.Блокирован
	|	И НЕ ТаблицаСправочник.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.IDN В(&СписокКодов)
	|	И НЕ Номенклатура.IDN = """"
	|	И НЕ Номенклатура.ЭтоГруппа"
	);
	Запрос.УстановитьПараметр("СписокКодов", ОбщегоНазначенияКлиентСервер.lx_FillValueList(, SKU,, ",",,, Новый ОписаниеТипов("Строка")));

	Результаты = Запрос.ВыполнитьПакет();

	Запрос.УстановитьПараметр("СписокСкладов"     , Результаты[0].Выгрузить().ВыгрузитьКолонку("Склад"));
	Запрос.УстановитьПараметр("СписокНоменклатура", Результаты[1].Выгрузить().ВыгрузитьКолонку("Ссылка"));

	УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();
	Запрос.УстановитьПараметр("ИнтернетМагазин", УчетнаяПолитика.ИнтернетМагазин);
	Запрос.УстановитьПараметр("СкладЦентральныйИнтернетМагазина", УчетнаяПолитика.СкладЦентральныйИнтернетМагазина);

	Запрос.Текст = ТекстЗапроса;

КонецПроцедуры

Функция ПараметрыИзОбъектаXDTO(ОбъектXDTO, СтрокаКлючей)

	СтруктураПараметров = Новый Структура;

	Для каждого КлючИТип Из ОбщегоНазначенияКлиентСервер.lx_FillValueList(, СтрокаКлючей,, ",",,, Новый ОписаниеТипов("Строка")) Цикл

		ДанныеКлюча = ОбщегоНазначенияКлиентСервер.lx_FillValueList(, КлючИТип,, ":", 2,, Новый ОписаниеТипов("Строка"));
		СтруктураПараметров.Вставить(ДанныеКлюча[0], Неопределено);

		Если НЕ ПустаяСтрока(ДанныеКлюча[1]) Тогда

				ТипКлюча = Новый ОписаниеТипов(ДанныеКлюча[1]);
				СтруктураПараметров[ДанныеКлюча[0]] = ТипКлюча.ПривестиЗначение();

		Иначе	ТипКлюча = Неопределено;

		КонецЕсли;

		Если СервисыСервер.ОбъектXDTOСодержитСвойство(ОбъектXDTO, ДанныеКлюча[0]) Тогда

			Если ТипКлюча = Неопределено Тогда

					СтруктураПараметров[ДанныеКлюча[0]] = ОбъектXDTO[ДанныеКлюча[0]];

			Иначе	СтруктураПараметров[ДанныеКлюча[0]] = ТипКлюча.ПривестиЗначение(ОбъектXDTO[ДанныеКлюча[0]]);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат СтруктураПараметров;

КонецФункции

//	LNK 04.11.2022 05:42:44
Функция УточнитьДанныеВнешнегоЗапроса(ДанныеЗапроса)

	ДанныеЗапроса.OrderData.Вставить("BuyerSpecified", ДанныеЗапроса.OrderData.Свойство("Buyer"));

	Если ДанныеЗапроса.OrderData.BuyerSpecified Тогда

		ДанныеЗапроса.OrderData.BuyerSpecified = (
				НЕ ПустаяСтрока(ДанныеЗапроса.OrderData.Buyer.EDRPOU)
			ИЛИ НЕ ПустаяСтрока(ДанныеЗапроса.OrderData.Buyer.IDC)
			ИЛИ НЕ ПустаяСтрока(ДанныеЗапроса.OrderData.Buyer.IDMGT)
			ИЛИ НЕ ПустаяСтрока(ДанныеЗапроса.OrderData.Buyer.cardNumber)
			ИЛИ НЕ ПустаяСтрока(ДанныеЗапроса.OrderData.Buyer.email)
			ИЛИ НЕ ПустаяСтрока(ДанныеЗапроса.OrderData.Buyer.phoneNumber)
		);

	Иначе

		ДанныеЗапроса.OrderData.Вставить("Buyer"
			, Новый Структура(
				"EDRPOU, IDC, IDMGT, cardNumber, email, phoneNumber"
				, ""
				, ""
				, ""
				, ""
				, ""
				, ""
			)
		);

	КонецЕсли;

	Возврат ДанныеЗапроса;

КонецФункции

#КонецОбласти