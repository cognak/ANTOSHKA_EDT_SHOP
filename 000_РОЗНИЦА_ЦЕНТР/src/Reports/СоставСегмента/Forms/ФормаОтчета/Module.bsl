
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Сегмент = Параметры.Сегмент;
	Если Не Элементы.Найти("ДобавитьВСегмент") = Неопределено Тогда
		
		Элементы.ДобавитьВСегмент.Видимость = (
			Сегмент.СпособФормирования =
			Перечисления.СпособыФормированияСегментов.ФормироватьВручную
		);
		Элементы.УдалитьИзСегмента.Видимость = Элементы.ДобавитьВСегмент.Видимость;
		Элементы.ДобавитьВСегментПоОтбору.Видимость = Элементы.ДобавитьВСегмент.Видимость;
		Элементы.СформироватьСегмент.Видимость = (
			Сегмент.СпособФормирования <>
			Перечисления.СпособыФормированияСегментов.ФормироватьДинамически
		);
		
	КонецЕсли;
	
	Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Вставить(
		"Сегмент", Сегмент
	);
	ХарактеристикиНоменклатуры =
		ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	Элемент = РасшифроватьЭлемент(Расшифровка);
	Если ЗначениеЗаполнено(Элемент) Тогда
		ОткрытьЗначение(Элемент);
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ДобавитьВСегмент(Команда)

	Если ХарактеристикиНоменклатуры Тогда
		Элемент = ОткрытьФормуМодально("Отчет.СоставСегмента.Форма.ВыборНоменклатуры");
		Если ТипЗнч(Элемент) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Элемент = ОткрытьФормуМодально("Справочник.Номенклатура.ФормаВыбора");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		ДобавитьЭлемент(Элемент,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзСегмента(Команда)
	
	мРасшифровки = Новый Массив();
	Области = Результат.ВыделенныеОбласти;
	
	Для Каждого Область Из Области Цикл
		Для Строка = Область.Верх По Область.Низ Цикл
			Для Столбец = 1 По 200 Цикл
				Расшифровка = Результат.Область("R" + Формат(Строка, "ЧГ=0") + "C" + Столбец).Расшифровка;
				Если ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
					мРасшифровки.Добавить(Расшифровка);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	УдалитьЭлементы(мРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСегмент(Команда)

	СегментыСервер.СформироватьНоменклатуруСегмента(Сегмент);
	СкомпоноватьРезультат();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСегментПоОтбору(Команда)
	
	ЗаголовокФормыПодбора = НСтр("ru='Подбор номенклатуры в сегмент'");
	ЗаголовокКнопкиПеренестиФормыПодбора = НСтр("ru='Перенести в сегмент'");
	
	АдресВоВременномХранилище = ОткрытьФормуМодально("Обработка.ПодборТоваровПоОтбору.Форма.Форма",
													Новый Структура("Заголовок,ЗаголовокКнопкиПеренести",ЗаголовокФормыПодбора,ЗаголовокКнопкиПеренестиФормыПодбора),
													ЭтотОбъект);
	Если ЗначениеЗаполнено(АдресВоВременномХранилище) Тогда
		ДобавитьНоменклатуруПоОтборуНаСервере(АдресВоВременномХранилище);
	КонецЕсли;	

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Удаляет выбранные элементы из состава сегмента
&НаСервере
Процедура УдалитьЭлементы(Расшифровки)

	ДанныеРасшифровкиОтчета = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	
	Для Каждого Расшифровка Из Расшифровки Цикл
		ЭлементРасшифровки = ДанныеРасшифровкиОтчета.Элементы[Расшифровка];
		Для Каждого ЗначениеПоляРасшифровки Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			Значение = ЗначениеПоляРасшифровки.Значение;
			Если ТипЗнч(Значение) = Тип("СправочникСсылка.Номенклатура") Тогда
				НаборЗаписей = РегистрыСведений.НоменклатураСегмента.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Сегмент.Установить(Сегмент);
				НаборЗаписей.Отбор.Номенклатура.Установить(Значение);
				Попытка
					ЗначениеСледущейРасшифровки = ДанныеРасшифровкиОтчета.Элементы[Расшифровка+1].ПолучитьПоля()[0].Значение;
					Если ТипЗнч(ЗначениеСледущейРасшифровки) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
						НаборЗаписей.Отбор.Характеристика.Установить(ЗначениеСледущейРасшифровки);
					Иначе
						НаборЗаписей.Отбор.Характеристика.Установить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
					КонецЕсли;	
				Исключение					
				КонецПопытки;									
				НаборЗаписей.Записать(); 
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	СкомпоноватьРезультат();

КонецПроцедуры

// Добавляет отобранную номенклатуру в сегмент и переформирует отчет
//
&НаСервере
Процедура ДобавитьНоменклатуруПоОтборуНаСервере(АдресВоВременномХранилище);

	ТаблицаНоменклатура = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для каждого СтрокаТаблицы Из ТаблицаНоменклатура Цикл
	     ДобавитьЭлемент(СтрокаТаблицы);	
	КонецЦикла;

	СкомпоноватьРезультат();
	
КонецПроцедуры

//Возвращает возможный для просмотра элемент
&НаСервере
Функция РасшифроватьЭлемент(Расшифровка)

	ДанныеРасшифровкиОтчета = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	ЭлементРасшифровки = ДанныеРасшифровкиОтчета.Элементы[Расшифровка];

	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для Каждого ЗначениеПоляРасшифровки Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			Значение = ЗначениеПоляРасшифровки.Значение;
			Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение))
			 ИЛИ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
				Возврат Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

//Добавляет элемент в состав сегмента
&НаСервере
Процедура ДобавитьЭлемент(Элемент, СкомпоноватьРезультат = Ложь, ВыводитьСообщения = Ложь)
	
	Если ТипЗнч(Элемент) = Тип("Массив") Тогда
		Для каждого ЭлементМассива Из Элемент Цикл
			ДобавитьЭлемент(ЭлементМассива,СкомпоноватьРезультат,ВыводитьСообщения);
		КонецЦикла;
		Возврат;
	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.Номенклатура") Тогда
		Номенклатура = Элемент;
	Иначе
		Номенклатура = Элемент.Номенклатура;
	КонецЕсли;
	
	Если Номенклатура.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запись = РегистрыСведений.НоменклатураСегмента.СоздатьМенеджерЗаписи();
	Запись.Сегмент = Сегмент;
	Если ХарактеристикиНоменклатуры Тогда
		Запись.Номенклатура = Номенклатура;
		Если ЗначениеЗаполнено(Элемент.Характеристика) Тогда
			Запись.Характеристика = Элемент.Характеристика;
		КонецЕсли;
	Иначе
		Запись.Номенклатура = Номенклатура;
	КонецЕсли;
	
	
	Запись.Прочитать();
	
	Если Запись.Выбран() Тогда
		Если ВыводитьСообщения Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Строка(Строка(Запись.Номенклатура) + ?(Запись.Характеристика.Пустая(),"","/" + Строка(Запись.Характеристика))) + НСтр("ru=' уже включен в сегмент.'")
				);
			
		КонецЕсли;
	Иначе
		
		Запись.Сегмент = Сегмент;
		Если ХарактеристикиНоменклатуры Тогда
			Запись.Номенклатура = Номенклатура;
			Если ЗначениеЗаполнено(Элемент.Характеристика) Тогда
				Запись.Характеристика = Элемент.Характеристика;
			КонецЕсли;
		Иначе
			Запись.Номенклатура = Номенклатура;
		КонецЕсли;
		
		Запись.Записать();
		Если СкомпоноватьРезультат Тогда
			СкомпоноватьРезультат();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
