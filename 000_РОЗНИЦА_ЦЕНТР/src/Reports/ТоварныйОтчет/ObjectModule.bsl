
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомерОтчета = НомерОтчета + 1;
	
	ДокументРезультат.Вывести(СформироватьОтчетТоварныйОтчет(
		ДатаНачала,
		ДатаОкончания,
		Склад,
		Организация,
		НомерОтчета
	));
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция выполняет формирование табличного документа Товарного отчета.
//
Функция СформироватьОтчетТоварныйОтчет(ДатаНачала, ДатаОкончания, Склад, Организация, НомерОтчета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	//УстановитьПривилегированныйРежим(Истина);
	Макет = ПолучитьМакет("Макет");
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм();
	Макет.КодЯзыкаМакета = КодЯзыкаПечать; 
	
	// Выведем заголовок.
	СведенияОПокупателе = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(Организация, ДатаОкончания);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ОрганизацияПредставление = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе,"ПолноеНаименование,КодПоЕДРПОУ",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.ДатаСоставления = ТекущаяДатаСеанса();
	ОбластьМакета.Параметры.ДатаНачала = ДатаНачала;
	ОбластьМакета.Параметры.ДатаКонца = ДатаОкончания;
	ОбластьМакета.Параметры.Склад = Склад;
	
	ОбластьМакета.Параметры.Номер = НомерОтчета;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Повторение шапки
	ПовторятьПриПечатиСтроки = ТабДокумент.Область(1 + ОбластьМакета.ВысотаТаблицы, ,2 + ОбластьМакета.ВысотаТаблицы);
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Магазин);
	Если ИспользоватьАссортимент Тогда
		СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанныхАссортимент");
	Иначе
		СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	КонецЕсли;
		
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		
		ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных[0].Запрос;

		ЗаменяемыйТекст = 
		"	ВЫБОР
		|		КОГДА ЦеныНоменклатурыА.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ИЛИ ЕСТЬNULL(ЦеныНоменклатурыА.Упаковка.Коэффициент, 0) = 0
		|			ТОГДА ЦеныНоменклатурыА.Цена
		|		ИНАЧЕ ЦеныНоменклатурыА.Цена / ЦеныНоменклатурыА.Упаковка.Коэффициент
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА ЦеныНоменклатурыБ.Цена ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА ЦеныНоменклатурыБ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ИЛИ ЕСТЬNULL(ЦеныНоменклатурыБ.Упаковка.Коэффициент, 0) = 0
		|			ТОГДА ЦеныНоменклатурыБ.Цена
		|		ИНАЧЕ ЦеныНоменклатурыБ.Цена / ЦеныНоменклатурыБ.Упаковка.Коэффициент
		|	КОНЕЦ КАК СтараяЦена,
		|	ВЫБОР
		|		КОГДА ЦеныНоменклатурыА.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ИЛИ ЕСТЬNULL(ЦеныНоменклатурыА.Упаковка.Коэффициент, 0) = 0
		|			ТОГДА ЦеныНоменклатурыА.Цена
		|		ИНАЧЕ ЦеныНоменклатурыА.Цена / ЦеныНоменклатурыА.Упаковка.Коэффициент
		|	КОНЕЦ - ВЫБОР
		|		КОГДА ЦеныНоменклатурыБ.Цена ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА ЦеныНоменклатурыБ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ИЛИ ЕСТЬNULL(ЦеныНоменклатурыБ.Упаковка.Коэффициент, 0) = 0
		|			ТОГДА ЦеныНоменклатурыБ.Цена
		|		ИНАЧЕ ЦеныНоменклатурыБ.Цена / ЦеныНоменклатурыБ.Упаковка.Коэффициент
		|	КОНЕЦ КАК Дельта";
		
		Если Найти(ТекстЗапроса, ЗаменяемыйТекст) = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Некорректный текст запроса'");
		КонецЕсли;
		
		ТекстЗамены = 
		"	ЦеныНоменклатурыА.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА
		|			ЦеныНоменклатурыБ.Цена ЕСТЬ NULL
		|		ТОГДА
		|			0
		|		ИНАЧЕ
		|			ЦеныНоменклатурыБ.Цена
		|	КОНЕЦ КАК СтараяЦена,
		|		ЦеныНоменклатурыА.Цена
		|		- ВЫБОР
		|			КОГДА
		|				ЦеныНоменклатурыБ.Цена ЕСТЬ NULL
		|			ТОГДА
		|				0
		|			ИНАЧЕ
		|				ЦеныНоменклатурыБ.Цена
		|		КОНЕЦ
		|		 КАК Дельта";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменяемыйТекст, ТекстЗамены);
		СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = ТекстЗапроса;
		
	КонецЕсли;
		
	// Подготовка компоновщика макета компоновки данных.
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	// Выбранные поля.
	ОбязательныеПоля = Новый Массив;
	ОбязательныеПоля.Добавить("Регистратор");
	ОбязательныеПоля.Добавить("СуммаНачальныйОстаток");
	ОбязательныеПоля.Добавить("СуммаПриход");
	ОбязательныеПоля.Добавить("СуммаРасход");
	ОбязательныеПоля.Добавить("СуммаКонечныйОстаток");
	Компоновщик.Настройки.Выбор.Элементы.Очистить();
	Для Каждого ОбязательноеПоле Из ОбязательныеПоля Цикл
		ПолеСКД = Обработки.ПечатьЭтикетокИЦенников.НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле);
		Если ПолеСКД <> Неопределено Тогда
			ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ПолеСКД.Поле;
		КонецЕсли;
	КонецЦикла;
	
	// Добавление группировок.
	Компоновщик.Настройки.Структура.Очистить();
	ОбщегоНазначенияРТКлиентСервер.ДобавитьГруппировку(Компоновщик, "Регистратор");
	
	// Отключение итогов.
	ОбщегоНазначенияРТКлиентСервер.УстановитьПараметрВывода(Компоновщик,"ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	ОбщегоНазначенияРТКлиентСервер.УстановитьПараметрВывода(Компоновщик,"ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	// Установка отборов.
	ОбщегоНазначенияРТКлиентСервер.ДобавитьОтбор(Компоновщик, "Организация", Организация);
	ОбщегоНазначенияРТКлиентСервер.ДобавитьОтбор(Компоновщик, "Склад", Склад,,ЗначениеЗаполнено(Склад));
					
	Период = Новый СтандартныйПериод;
	Период.ДатаНачала    = НачалоДня(ДатаНачала);
	Период.ДатаОкончания = КонецДня(ДатаОкончания);
	ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(Компоновщик.Настройки, "ПериодОтчета", Период);
	ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(Компоновщик.Настройки, "Магазин", Магазин);
	ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(Компоновщик.Настройки, "ИспользоватьПрименениеЦен", Магазин.ИспользоватьПрименениеЦен И 
		ПолучитьФункциональнуюОпцию("ИспользоватьПрименениеЦен"));
	Если НЕ ИспользоватьАссортимент Тогда
		ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(Компоновщик.Настройки, "ПравилоЦенообразования", Магазин.ПравилоЦенообразования);
	КонецЕсли;

	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Построение таблицы значений.
	Процессор = Новый ПроцессорКомпоновкиДанных;
	Процессор.Инициализировать(МакетКомпоновкиДанных);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ИсходныеДанные = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ИсходныеДанные);
	ПроцессорВывода.Вывести(Процессор);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.Регистратор                       КАК Документ,
	|	ЕСТЬNULL(Таблица.СуммаНачальныйОстаток,0) КАК НачОст,
	|	ЕСТЬNULL(Таблица.СуммаПриход,0)           КАК Приход,
	|	ЕСТЬNULL(Таблица.СуммаРасход,0)           КАК Расход,
	|	ЕСТЬNULL(Таблица.СуммаКонечныйОстаток,0)  КАК КонОст
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	&ИсходныеДанные КАК Таблица
	|ГДЕ Таблица.Регистратор <> Неопределено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Документ       КАК Документ,
	|	ТаблицаДокументов.Документ.Дата  КАК Дата,
	|	ТаблицаДокументов.Документ.Номер КАК Номер,
	|	СУММА(ТаблицаДокументов.Приход) КАК Приход,
	|	СУММА(ТаблицаДокументов.Расход) КАК Расход
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументов.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ
	|");
	
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ИсходныеДанные.Количество() = 0 Тогда
		
		НачОст = 0;
		КонОст = 0;
		
	Иначе
		
		Если ИсходныеДанные.Количество() > 1 Тогда
			
			Если ИсходныеДанные[0].Регистратор = Неопределено И ИсходныеДанные[1].Регистратор <> Неопределено Тогда
				НачОст = ИсходныеДанные[1].СуммаНачальныйОстаток;
			Иначе
				НачОст = ИсходныеДанные[0].СуммаНачальныйОстаток;
			КонецЕсли;
			
		Иначе
			НачОст = ИсходныеДанные[0].СуммаНачальныйОстаток;
		КонецЕсли;
		
		КонОст = ИсходныеДанные[ИсходныеДанные.Количество()-1].СуммаКонечныйОстаток;
		
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ОстатокНачала");
	ОбластьМакета.Параметры.ДатаНачала = НСтр("ru = 'Остаток на';uk='Залишок на '",КодЯзыкаПечать) + " " + Формат(ДатаНачала, "ДЛФ=Д");
	ОбластьМакета.Параметры.НачСтоимостьВсего = ФормированиеПечатныхФормСервер.ФорматСумм(НачОст,"");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Приход");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ТипыКорректировок = Новый Массив;
	ТипыКорректировок.Добавить(Тип("ДокументСсылка.ВводНачальныхОстатковУзла"));
	ТипыКорректировок.Добавить(Тип("ДокументСсылка.КорректировкаРегистров"));
	
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого СтрокаТЗ Из РезультатЗапроса Цикл
		
		Если СтрокаТЗ.Приход = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Документ       = ПолучитьПредставлениеДокумента(СтрокаТЗ, ТипыКорректировок, "Приход", КодЯзыкаПечать);
		ОбластьМакета.Параметры.Расшифровка    = СтрокаТЗ.Документ;
		ОбластьМакета.Параметры.ДатаДокумента  = СтрокаТЗ.Дата;
		ОбластьМакета.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрокаТЗ.Номер, Ложь, Истина);
		ОбластьМакета.Параметры.СуммаТовара    = ФормированиеПечатныхФормСервер.ФорматСумм(СтрокаТЗ.Приход,"");
		ОбластьМакета.Параметры.СуммаТары      = ФормированиеПечатныхФормСервер.ФорматСумм(0,"");
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Приход = РезультатЗапроса.Итог("Приход");
	
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоПриход");
	ОбластьМакета.Параметры.ПрихСтоимостьВсего = ФормированиеПечатныхФормСервер.ФорматСумм(Приход,"");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ВсегоПриход");
	ОбластьМакета.Параметры.ПриходСОстатком = ФормированиеПечатныхФормСервер.ФорматСумм((Приход + НачОст),"");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	ОбластьМакета = Макет.ПолучитьОбласть("Расход");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого СтрокаТЗ Из РезультатЗапроса Цикл
		
		Если СтрокаТЗ.Расход = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Документ       = ПолучитьПредставлениеДокумента(СтрокаТЗ, ТипыКорректировок, "Расход", КодЯзыкаПечать);
		ОбластьМакета.Параметры.Расшифровка    = СтрокаТЗ.Документ;
		ОбластьМакета.Параметры.ДатаДокумента  = СтрокаТЗ.Дата;
		ОбластьМакета.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрокаТЗ.Номер, Ложь, Истина);
		ОбластьМакета.Параметры.СуммаТовара    = ФормированиеПечатныхФормСервер.ФорматСумм(СтрокаТЗ.Расход, "");
		ОбластьМакета.Параметры.СуммаТары      = ФормированиеПечатныхФормСервер.ФорматСумм(0, "");
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Расход = РезультатЗапроса.Итог("Расход");
	
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоРасход");
	ОбластьМакета.Параметры.РасхСтоимостьВсего = ФормированиеПечатныхФормСервер.ФорматСумм(Расход, "");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ОстатокКонец");
	ОбластьМакета.Параметры.ДатаКонца = НСтр("ru = 'Остаток на';uk='Залишок на '",КодЯзыкаПечать) + " "  + Формат(ДатаОкончания, "ДЛФ=Д");
	ОбластьМакета.Параметры.КонСтоимостьВсего = ФормированиеПечатныхФормСервер.ФорматСумм(КонОст, "");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ТабДокумент.ПовторятьПриПечатиСтроки = ПовторятьПриПечатиСтроки;
	
	Возврат ТабДокумент;
	
КонецФункции // СформироватьОтчетТоварныйОтчет()

Функция ПолучитьПредставлениеДокумента(СтрокаТЗ, ТипыКорректировок, ТипДвижения = "Расход", КодЯзыкаПечать)
	
	ТипДокумента = ТипЗнч(СтрокаТЗ.Документ);
	Представление = СтрокаТЗ.Документ;
	Если ТипДокумента = Тип("ДокументСсылка.УстановкаЦенНоменклатуры") Тогда
		Представление =  ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(СтрокаТЗ, НСтр("ru = 'Установка цен';uk = 'Встановлення цін'", КодЯзыкаПечать), КодЯзыкаПечать);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		Представление =  ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(СтрокаТЗ, НСтр("ru = 'Возврат от покупателя';uk = 'Повернення від покупця'", КодЯзыкаПечать), КодЯзыкаПечать);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Представление =  ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(СтрокаТЗ, НСтр("ru = 'Возврат поставщику';uk = 'Повернення постачальнику'", КодЯзыкаПечать), КодЯзыкаПечать);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		Представление =  ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(СтрокаТЗ, НСтр("ru = 'Акт об оприходовании товаров';uk = 'Акт про оприбуткування товарів'", КодЯзыкаПечать), КодЯзыкаПечать);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		Представление =  ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(СтрокаТЗ, НСтр("ru = 'Отчет о розничных продажах';uk = 'Звіт про роздрібні продажі'", КодЯзыкаПечать), КодЯзыкаПечать);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПеремещениеТоваров")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ОрдерНаПеремещениеТоваров") Тогда
		Представление =  ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(СтрокаТЗ, НСтр("ru = 'Накладная на перемещение';uk = 'Накладна на переміщення'", КодЯзыкаПечать), КодЯзыкаПечать);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		Представление =  ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(СтрокаТЗ, НСтр("ru = 'Приходная накладная';uk = 'Прибуткова накладна'", КодЯзыкаПечать), КодЯзыкаПечать);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		Представление =  ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(СтрокаТЗ, НСтр("ru = 'Расходная накладная';uk = 'Видаткова накладна'", КодЯзыкаПечать), КодЯзыкаПечать);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СборкаТоваров") Тогда
		Представление =  ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(СтрокаТЗ, НСтр("ru = 'Сборка товаров';uk = 'Збирання товарів'", КодЯзыкаПечать), КодЯзыкаПечать);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СписаниеТоваров") Тогда
		Представление =  ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(СтрокаТЗ, НСтр("ru = 'Акт о списании товаров';uk = 'Акт про списання товарів'", КодЯзыкаПечать), КодЯзыкаПечать);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПрименениеЦенНоменклатуры") Тогда
		Представление =  ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(СтрокаТЗ, НСтр("ru = 'Установка цен';uk = 'Встановлення цін'", КодЯзыкаПечать), КодЯзыкаПечать);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПересортицаТоваров") Тогда
		Представление =  ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(СтрокаТЗ, НСтр("ru = 'Акт о пересортице товаров';uk = 'Акт про пересортицю товарів'", КодЯзыкаПечать), КодЯзыкаПечать);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		Если ТипДвижения = "Расход" Тогда
			Представление =  ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(СтрокаТЗ, НСтр("ru = 'Расходная накладная';uk = 'Видаткова накладна'", КодЯзыкаПечать), КодЯзыкаПечать);
		Иначе // Приход
			Представление =  ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(СтрокаТЗ, НСтр("ru = 'Приходная накладная';uk = 'Прибуткова накладна'", КодЯзыкаПечать), КодЯзыкаПечать);
		КонецЕсли;
	ИначеЕсли ТипыКорректировок.Найти(ТипДокумента) <> Неопределено Тогда
		Представление = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(СтрокаТЗ, НСтр("ru = 'Корректировка остатков';uk = 'Коректування залишків'", КодЯзыкаПечать), КодЯзыкаПечать);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип документа!'");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции
