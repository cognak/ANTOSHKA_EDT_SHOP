
&НаСервере
Функция РезультатОбработкаРасшифровкиНаСервере(Расшифровка)
Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки); //Здесь основная «недокументированная фишка»: Переменная ДанныеРасшифровки не описана в хелпе, также не описано что Данные, нужно получать путем извлечения из временного хранилища,

Поля = Данные.Элементы.Получить(Расшифровка).ПолучитьПоля();

СтруктураВозврата= Новый Структура;
СтруктураВозврата.Вставить("Поле",Поля[0].Поле);
СтруктураВозврата.Вставить("Значение",Поля[0].Значение);
Возврат СтруктураВозврата;
КонецФункции

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	СтандартнаяОбработка = Ложь;
СтруктураВозврата =	РезультатОбработкаРасшифровкиНаСервере(Расшифровка);
Если СтруктураВозврата.Поле = "Дата" тогда
	   ОбработкаКомандыДата(СтруктураВозврата.Значение)
   ИначеЕсли СтруктураВозврата.Поле = "Сотрудник" тогда
	   ОбработкаКомандыСотрудник(СтруктураВозврата.Значение,Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение)
КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РезультатОбработкаДополнительнойРасшифровкиНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	РезультатОбработкаДополнительнойРасшифровкиНаСервере();
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаКомандыСотрудник(Сотрудник,Период)
    ПарамтрПериод = Новый СтандартныйПериод;
	ПарамтрПериод.ДатаНачала =  Период.ДатаНачала;
	ПарамтрПериод.ДатаОкончания =  Период.ДатаОкончания;
		
    // Параметры
    стрПараметры = Новый Структура;
    стрПараметры.Вставить("Период", ПарамтрПериод);
    стрОтборы = Новый Структура;
    стрОтборы.Вставить("Сотрудник", Сотрудник);
    ПользовательскиеНастройки = УстановитьНастройкиОтчетаСотрудник("УчетРабочегоВремени", стрПараметры,стрОтборы);
    
    ПараметрыФормы = Новый Структура();
    ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
    ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
    ПараметрыФормы.Вставить("КлючВарианта", "Учет рабочего времени по дням");
    ОткрытьФорму("Отчет.УчетРабочегоВремени.Форма.ФормаОтчета", 
    ПараметрыФормы);
    
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаКомандыДата(Дата)
    
    // Параметры
    стрПараметры = Новый Структура;
    стрПараметры.Вставить("Период", Дата);
	
	
	
    ПользовательскиеНастройки = УстановитьНастройкиОтчета("КоличествоCотрудниковНаCменеФакт", стрПараметры);
    
    ПараметрыФормы = Новый Структура();
    ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
    ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	
	
	
    ОткрытьФорму("Отчет.КоличествоCотрудниковНаCменеФакт.Форма.ФормаОтчета", 
        ПараметрыФормы);
    
КонецПроцедуры

&НаСервере
Функция УстановитьНастройкиОтчетаСотрудник(ВидОтчета, стрПараметры,стрОтборы)
    
    
    ОтчетОбъект = Отчеты[ВидОтчета].Создать();
    
    КомпоновщикНастроек          = ОтчетОбъект.КомпоновщикНастроек;
    Настройки                               = КомпоновщикНастроек.Настройки;
    ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
    
    Для Каждого ЭлПараметр  Из стрПараметры Цикл
        
        ЭлементНастройки = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ЭлПараметр.Ключ));
        ЭлементНастройки.Значение = ЭлПараметр.Значение;
        Если ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда
            ПользовательскийПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
            Если ТипЗнч(ПользовательскийПараметр) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
                ПользовательскийПараметр.Значение = ЭлементНастройки.Значение;
                ПользовательскийПараметр.Использование = Истина;
            КонецЕсли;
        КонецЕсли;
        
    КонецЦикла;
    
	Для Каждого ЭлОтбор  Из стрОтборы Цикл
	    
	    текОтбор = Новый ПолеКомпоновкиДанных(ЭлОтбор.Ключ);
	    Для Каждого ЭлементНастройки Из Настройки.Отбор.Элементы Цикл
	        Если ЭлементНастройки.ЛевоеЗначение = текОтбор Тогда 
	            ЭлементНастройки.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	            ЭлементНастройки.ПравоеЗначение = ЭлОтбор.Значение;
	            ЭлементНастройки.Использование = Истина;
	            Если ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда
	                ПользовательскийПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
	                Если ТипЗнч(ПользовательскийПараметр) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
	                    ПользовательскийПараметр.ВидСравнения   = ЭлементНастройки.ВидСравнения;
	                    ПользовательскийПараметр.ПравоеЗначение = ЭлементНастройки.ПравоеЗначение;
	                    ПользовательскийПараметр.Использование  = ЭлементНастройки.Использование;
	                КонецЕсли;
	            КонецЕсли;
	        КонецЕсли;
	    КонецЦикла;
	    
	КонецЦикла;
    
    Возврат ПользовательскиеНастройки;
КонецФункции



&НаСервере
Функция УстановитьНастройкиОтчета(ВидОтчета, стрПараметры)
    
    
    ОтчетОбъект = Отчеты[ВидОтчета].Создать();
    
    КомпоновщикНастроек          = ОтчетОбъект.КомпоновщикНастроек;
    Настройки                               = КомпоновщикНастроек.Настройки;
    ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
    
    Для Каждого ЭлПараметр  Из стрПараметры Цикл
        
        ЭлементНастройки = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ЭлПараметр.Ключ));
        ЭлементНастройки.Значение = ЭлПараметр.Значение;
        Если ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда
            ПользовательскийПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
            Если ТипЗнч(ПользовательскийПараметр) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
                ПользовательскийПараметр.Значение = ЭлементНастройки.Значение;
                ПользовательскийПараметр.Использование = Истина;
            КонецЕсли;
        КонецЕсли;
        
    КонецЦикла;
    
	//Для Каждого ЭлОтбор  Из стрОтборы Цикл
	//    
	//    текОтбор = Новый ПолеКомпоновкиДанных(ЭлОтбор.Ключ);
	//    Для Каждого ЭлементНастройки Из Настройки.Отбор.Элементы Цикл
	//        Если ЭлементНастройки.ЛевоеЗначение = текОтбор Тогда 
	//            ЭлементНастройки.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	//            ЭлементНастройки.ПравоеЗначение = ЭлОтбор.Значение;
	//            ЭлементНастройки.Использование = Истина;
	//            Если ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда
	//                ПользовательскийПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
	//                Если ТипЗнч(ПользовательскийПараметр) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
	//                    ПользовательскийПараметр.ВидСравнения   = ЭлементНастройки.ВидСравнения;
	//                    ПользовательскийПараметр.ПравоеЗначение = ЭлементНастройки.ПравоеЗначение;
	//                    ПользовательскийПараметр.Использование  = ЭлементНастройки.Использование;
	//                КонецЕсли;
	//            КонецЕсли;
	//        КонецЕсли;
	//    КонецЦикла;
	//    
	//КонецЦикла;
    
    Возврат ПользовательскиеНастройки;
КонецФункции

