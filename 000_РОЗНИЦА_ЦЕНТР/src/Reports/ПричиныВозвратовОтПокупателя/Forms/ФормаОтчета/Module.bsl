
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	АдресХранилищаСКД = ПоместитьВоВременноеХранилище(ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"), Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	Если Параметры.Свойство("ЭтоРасшифровка") Тогда
		ПараметрДанных = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
		Если ПараметрДанных <> Неопределено Тогда
			ПараметрПользовательскойНастройки =
				Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
					ПараметрДанных.ИдентификаторПользовательскойНастройки
				);
			Если ПараметрПользовательскойНастройки <> Неопределено Тогда
					ПараметрПользовательскойНастройки.Значение = Параметры.Период;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(
		ДанныеРасшифровки, 
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресХранилищаСКД)
	);
	
	ДоступныеДействия = Новый Массив();
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	ВыполненноеДействие = Неопределено;
	ПараметрВыполненногоДействия = Неопределено;
	ДополнительноеМеню = Новый СписокЗначений();
	Если КлючТекущегоВарианта <> "ПричиныВозвратовДетальный" Тогда
		ДополнительноеМеню.Добавить("Детально", "Детально по номенклатуре");
	КонецЕсли;
	
	ОбработкаРасшифровки.ВыбратьДействие(
		Расшифровка, 
		ВыполненноеДействие, 
		ПараметрВыполненногоДействия, 
		ДоступныеДействия,
		ДополнительноеМеню
	);
	Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		ОткрытьЗначение(ПараметрВыполненногоДействия);
	ИначеЕсли ВыполненноеДействие = "Детально" Тогда
		СтруктураОтборов = ПолучитьПоляРасшифровки(Расшифровка);
		ПараметрКомпоновкиДанныхПериод = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		ПараметрКомпоновкиДанныхПериод = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрКомпоновкиДанныхПериод.ИдентификаторПользовательскойНастройки);
		СтандартныйПериод = Новый СтандартныйПериод();
		СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		СтандартныйПериод.ДатаНачала = ПараметрКомпоновкиДанныхПериод.Значение.ДатаНачала;
		СтандартныйПериод.ДатаОкончания = ПараметрКомпоновкиДанныхПериод.Значение.ДатаОкончания;
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Отбор", СтруктураОтборов);
		ПараметрыФормы.Вставить("Период", СтандартныйПериод);
		ПараметрыФормы.Вставить("КлючВарианта", "ПричиныВозвратовДетальный");
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПричиныВозвратовОтПокупателяРасшифровка");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("ЭтоРасшифровка");
		ОткрытьФорму("Отчет.ПричиныВозвратовОтПокупателя.Форма", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура получает поля и значения для выбранного поля расшифровки.
// Параметры:
// ЭлементРасшифровки - Тип ЭлементРасшифровкиКомпоновкиДанныхПоля - элемент для которого необходимо получить поля.
// СтруктураОтборов   - Тип Структура - Входной-выходной параметр содержит ключи (дополнительные параметры) необходимые для формирования отчета расшифровки.
//                      По наименованию поля ПолеЗначение.Поле.
&НаСервере
Процедура ПолучитьЗначениеПоляРасшифровки(ЭлементРасшифровки, СтруктураОтборов)
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого ЗначениеПоляРасшифровки Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			Если Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(ЗначениеПоляРасшифровки.Поле)) <> Неопределено Тогда
				СтруктураОтборов.Вставить(ЗначениеПоляРасшифровки.Поле, ЗначениеПоляРасшифровки.Значение);
			КонецЕсли;
			Для Каждого ЗначениеПоляРасшифровкиТест Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
				ПолучитьЗначениеПоляРасшифровки(ЗначениеПоляРасшифровкиТест, СтруктураОтборов);
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
		Для Каждого ЗначениеПоляРасшифровкиТест Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
			ПолучитьЗначениеПоляРасшифровки(ЗначениеПоляРасшифровкиТест, СтруктураОтборов);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Получает значение поля расшифровки.
//
&НаСервере
Функция ПолучитьПоляРасшифровки(Расшифровка)
	
	ДанныеРасшифровкиТест = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	СтруктураОтборов = Новый Структура();
	// Создадим и инициализируем обработчик расшифровки.
	МассивПолейРасшифровки = Новый Массив();
	ЭлементРасшифровки = ДанныеРасшифровкиТест.Элементы.Получить(Расшифровка);
	ПолучитьЗначениеПоляРасшифровки(ЭлементРасшифровки, СтруктураОтборов);
	Возврат СтруктураОтборов;
	
КонецФункции
