#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Объект.Ссылка.Пустая() Тогда
		
		Записать();
		
	КонецЕсли;

	ОтображениеЭлементов();
	ПодключитьОбработчикОжидания("ОтображениеЭлементов", 60);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Статусы.Параметры.УстановитьЗначениеПараметра("Регистратор", Объект.Ссылка);
	
	Элементы.МагазинПолучатель.Видимость = Не Объект.МагазинПолучатель.Пустая();
	
	ВозможностьРедактировать = Не ТехническаяПоддержкаВызовСервера.ИсключительныйРежим();
	
	Элементы.Номер.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.Дата.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.ВнешняяСсылка.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.ДатаДоставки.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.Реестр.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.ЗаказПокупателя.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.ДокументОснование.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.ОператорДоставки.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.ПутьКФайлуСтикера.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.ПутьКФайлуТТН.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.СуммаДоставки.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.НашаСуммаДоставки.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.КонтрагентОтправитель.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.НомерТелефонаОтправитель.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.КонтактноеЛицоОтправитель.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.ГородОтправитель.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.УлицаОтправитель.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.НомерДомаОтправитель.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.АдресОтправитель.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.ОтделениеОтправитель.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.ФамилияПолучатель.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.ИмяПолучатель.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.ОтчествоПолучатель.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.ТелефонПолучатель.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.ОбластьПолучатель.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.ГородПолучатель.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.РайонПолучатель.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.УлицаПолучатель.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.ДомПолучатель.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.КвартираПолучатель.ТолькоПросмотр = ВозможностьРедактировать;
	Элементы.ОтделениеПолучатель.ТолькоПросмотр = ВозможностьРедактировать;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		ВГХНеЗаполнены = ПроверитьВГХ();
	
		Если ВГХНеЗаполнены	Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заповнені ВГХ';uk = 'Не заповнені ВГХ'"),
				,
				,
				,
				Отказ);
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование,"ОператорДоставки")
				= ПредопределенноеЗначение("Перечисление.ОператорыДоставки.ВнутренняяЛогистика") Тогда
		 
			Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЗаказПокупателя,"ДоставкаНаАдрес") Тогда
				
				Отделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЗаказПокупателя,"Отделение");
				
				Если ПустаяСтрока(Отделение)
						Или Отделение = ПредопределенноеЗначение("Справочник.Отделения.ПустаяСсылка")
						Или Отделение = ПредопределенноеЗначение("Справочник.Почтоматы.ПустаяСсылка") Тогда

					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Не заповнене відділення';uk = 'Не заповнене відділення'"),
						,
						,
						,
						Отказ);

				КонецЕсли;
				
				ОбъемныйВесПревышен = ПроверитьОбъемныйВес();  
				Если ОбъемныйВесПревышен Тогда

					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Перевищена максимальна об''ємна вага для цього відділення!';
						|		uk = 'Перевищена максимальна об''ємна вага для цього відділення!'"),
						,
						,
						,
						Отказ);

				КонецЕсли; 
			Иначе

				Если ПустаяСтрока(Объект.ГородПолучатель)
						Или ПустаяСтрока(Объект.УлицаПолучатель)
						Или ПустаяСтрока(Объект.ДомПолучатель)
						Или Объект.ГородПолучатель = ПредопределенноеЗначение("Справочник.ГородаДоставки.ПустаяСсылка")
						Или Объект.УлицаПолучатель = ПредопределенноеЗначение("Справочник.Улицы.ПустаяСсылка") Тогда 

					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Не заповнені адресні дані';uk = 'Не заповнені адресні дані'"),
						,
						,
						,
						Отказ);

				КонецЕсли; 
				
			КонецЕсли;
	
			Если ПустаяСтрока(Объект.ИмяПолучатель) Тогда

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Не заповнено ім''я!';uk = 'Не заповнено ім''я!'"),
					,
					,
					,
					Отказ);

			КонецЕсли;    

			Если ПустаяСтрока(Объект.ФамилияПолучатель) тогда

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Чи не заповнене прізвище!';uk = 'Чи не заповнене прізвище!'"),
					,
					,
					,
					Отказ);

			КонецЕсли;    
			
			Телефон = СокрЛП(Объект.ТелефонПолучатель); 
			Если СтрДлина(Телефон)<> 12 или Лев(Телефон,3)<>"380"	тогда

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Неправильний номер телефону.';uk = 'Неправильний номер телефону.'"),
					,
					,
					,
					Отказ);

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписанаЭлектроннаяНакладная");
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерТелефонаОтправительПриИзменении(Элемент)
	Если Объект.ТелефонПолучатель <> "" тогда
		Поз = Найти(Объект.ТелефонПолучатель, " ");
		Если Поз <> 0 тогда    

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Неправильно введено телефон!';uk = 'Неправильно введено телефон!'"),
				,
				"ТелефонПолучатель",
				"Объект",
				);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправкаИзМагазинаПриИзменении(Элемент)
	ОтображениеЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОтделениеПолучательПриИзменении(Элемент)
	
	ОтображениеЭлементов();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерезаполнитьДокумент(Команда)
	
	ПерезаполнитьДокументНаСервере();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПосылкаПолучена(Команда)
	ПосылкаПолученаНаСервере();
	ОтображениеЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДокументы(Команда)
	ПолучитьДокументыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНакладную(Команда)
	
	ОтменитьНакладнуюНаСервере();
	ОтображениеЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНакладную(Команда)
	Если Модифицированность Или Объект.Ссылка.Пустая() Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Треба записати документ.';uk = 'Треба записати документ.'"));

	Иначе
		
		Если Объект.ОператорДоставки = ПредопределенноеЗначение("Перечисление.ОператорыДоставки.НоваяПочта") Тогда
			Если ПустаяСтрока(Объект.ВнешняяСсылка) тогда
				ТТННаСервере();
			Иначе

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'ТТН вже створено, повторне створення неможливе!';
					|		uk = 'ТТН вже створено, повторне створення неможливе!'"));

			КонецЕсли;
		Иначе 

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Створення ТТН можливе лише для оператора НОВА ПОШТА!';
				|		uk = 'Створення ТТН можливе лише для оператора НОВА ПОШТА!'"));

		КонецЕсли;    
	КонецЕсли;

	ОтображениеЭлементов();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает признак рабочего отделения.
// 
// Параметры:
//  СсылкаНаОтделение - СправочникСсылка, Строка - Ссылка на отделение
// 
// Возвращаемое значение:
//  Булево - Отделение не работает
&НаСервереБезКонтекста
Функция ОтделениеНеРаботает(СсылкаНаОтделение)
	
	Возврат Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОтделение, "Работает", Ложь, Ложь);
	
КонецФункции

&НаСервере
Функция ПроверитьОбъемныйВес() 
	
	Возврат ОбменНПСервер.ПроверитьОбъемныйВес(Объект.ДокументОснование, Объект.ОтделениеПолучатель);

КонецФункции

&НаСервере
Процедура ОтменитьНакладнуюНаСервере()
	
	Если ПустаяСтрока(Объект.Номер) Тогда
		
		РегистрыСведений.СтатусыЭН.ОтменитьПосылку(Объект); 
	
	Иначе 
			
		Если РегистрыСведений.СтатусыЭН.ПосылкаВДороге(Объект) Тогда
	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'За цим документом ініційовано рух посилки, редагування заборонено!';
				|		uk = 'За цим документом ініційовано рух посилки, редагування заборонено!'"));
	
		Иначе
	
			Если СокрЛП(Объект.ВнешняяСсылка) = СокрЛП(ОбменНПСервер.УдалитьНакладную(Объект.ВнешняяСсылка)) Тогда
		
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Накладну видалено';uk = 'Накладну видалено'"));
						
				ОбменНПСервер.ПолучитьСтатусТТН(, Объект.ВнешняяСсылка);
				Объект.ПутьКФайлуСтикера = "";
				Объект.ПутьКФайлуТТН = "";
				Записать();
				
			Иначе
		
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Помилка видалення накладної. Спробуйте через деякий час.';
					|		uk = 'Помилка видалення накладної. Спробуйте через деякий час.'"));
	
			КонецЕсли;
	
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПолучитьДокументыНаСервере()
	СтруктураОтветаЭН = ОбменНПСервер.СтруктураОтветаПоЭНИнициализация(Объект.ДокументОснование);
	
	СтруктураОтветаЭН.НомерТТН = СокрЛП(Объект.Номер);
	СтруктураОтветаЭН.ТТНRef = Объект.ВнешняяСсылка;
	ФайлыДляНакладной = ОбменНПСервер.СохранитьТТНвPDF(СтруктураОтветаЭН);
	
	Объект.ПутьКФайлуТТН = ФайлыДляНакладной.ПутьКФайлуТТН;
	Объект.ПутьКФайлуСтикера = ФайлыДляНакладной.ПутьКФайлуСтикера;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПосылкаПолученаНаСервере()
	
	ТекДата = ТекущаяДатаСеанса();
	
	СтатусПосылки = ПолучитьСтатусЭН();

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КодыСтатусовТТН.Ссылка
		|ИЗ
		|	Справочник.КодыСтатусовТТН КАК КодыСтатусовТТН
		|ГДЕ
		|	КодыСтатусовТТН.ОператорДоставки = &ОператорДоставки
		|	И КодыСтатусовТТН.СтатусПосылки = &СтатусПосылки";
	
	Запрос.УстановитьПараметр("ОператорДоставки", Объект.ОператорДоставки);

	Если СтатусПосылки.СтатусСлужбыДоставки = ПредопределенноеЗначение("Перечисление.СтатусыПосылокСлужбыДоставки.Новая") Тогда
	
		ПараметрСтатусПосылки = Перечисления.СтатусыПосылокСлужбыДоставки.ВДороге;

	ИначеЕсли СтатусПосылки.СтатусСлужбыДоставки = ПредопределенноеЗначение("Перечисление.СтатусыПосылокСлужбыДоставки.ВДороге") Тогда 
	
		ПараметрСтатусПосылки = Перечисления.СтатусыПосылокСлужбыДоставки.Доставлена;

	ИначеЕсли СтатусПосылки.СтатусСлужбыДоставки = ПредопределенноеЗначение("Перечисление.СтатусыПосылокСлужбыДоставки.Доставлена") Тогда 
	
		ПараметрСтатусПосылки = Перечисления.СтатусыПосылокСлужбыДоставки.Получена;

	Иначе
	
		ПараметрСтатусПосылки = Перечисления.СтатусыПосылокСлужбыДоставки.ПустаяСсылка();

	КонецЕсли;
	
	Если Не ПараметрСтатусПосылки = Перечисления.СтатусыПосылокСлужбыДоставки.ПустаяСсылка() Тогда
		
		Запрос.УстановитьПараметр("СтатусПосылки", ПараметрСтатусПосылки);
	
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусТТН = Выборка.Ссылка;
			
			НаборЗаписей = РегистрыСведений.СтатусыЭН.СоздатьНаборЗаписей(); 
	
			НаборЗаписей.Отбор.ДокументРегистратор.Установить(Объект.Ссылка); 
			НаборЗаписей.Отбор.Период.Установить(ТекДата); 
	
			НоваяЗапись 					= НаборЗаписей.Добавить();
			НоваяЗапись.ДокументРегистратор = Объект.Ссылка; 
			НоваяЗапись.Период 				= ТекДата;
			НоваяЗапись.СтатусЭН   			= СтатусТТН; 
			НаборЗаписей.Записать();  
		КонецЕсли;
				
	КонецЕсли;


КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДокументНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьДокумент(ДокументОбъект, Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Функция НакладнаяУОператора()

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СтатусыЭНСрезПоследних.СтатусЭН.СтатусПосылки КАК СтатусПосылки
		|ИЗ
		|	РегистрСведений.СтатусыЭН.СрезПоследних(, ДокументРегистратор = &ДокументРегистратор) КАК СтатусыЭНСрезПоследних";
	
	Запрос.УстановитьПараметр("ДокументРегистратор", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Не (Выборка.СтатусПосылки = Перечисления.СтатусыПосылокСлужбыДоставки.Новая);
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ОтображениеЭлементов()

	СтатусПосылки = ПолучитьСтатусЭН();
	СтатусДокумента = СтатусПосылки.СтатусЭН;
	ПосылкаОтменена = (СтатусПосылки.СтатусСлужбыДоставки = ПредопределенноеЗначение("Перечисление.СтатусыПосылокСлужбыДоставки.Отменена"));
	ПосылкаСоздана = Не ПустаяСтрока(Объект.ВнешняяСсылка);

	Элементы.ГруппаОтправительАдрес.Видимость = Объект.ОтправкаИзМагазина;
	Элементы.ГруппаОтправительОтделение.Видимость = Не Объект.ОтправкаИзМагазина;

	Элементы.ГруппаПолучательАдрес.Видимость = Объект.ДоставкаНаАдрес;
	Элементы.ГруппаПолучательОтделение.Видимость = Не Объект.ДоставкаНаАдрес;
	
	Элементы.ФормаОтменитьНакладную.Видимость = Не НакладнаяУОператора();
												
	Элементы.ФормаСоздатьНакладную.Видимость = Не ПосылкаСоздана И Не ПосылкаОтменена;

	Элементы.ПерезаполнитьДокумент.Видимость = Не ПосылкаСоздана И Не ПосылкаОтменена;

	Элементы.ФормаПолучитьДокументы.Видимость = ПосылкаСоздана И Не ПосылкаОтменена;
												
	Если СтатусПосылки.СтатусСлужбыДоставки = ПредопределенноеЗначение("Перечисление.СтатусыПосылокСлужбыДоставки.Новая") Тогда
		
		ЗаголовокКнопки = "Отдана курьеру";
		ВидимостьКнопки = Истина;
		
	ИначеЕсли СтатусПосылки.СтатусСлужбыДоставки = ПредопределенноеЗначение("Перечисление.СтатусыПосылокСлужбыДоставки.ВДороге") Тогда 
		
		ЗаголовокКнопки = "Посылка доставлена";
		ВидимостьКнопки = Истина;
		
	ИначеЕсли СтатусПосылки.СтатусСлужбыДоставки = ПредопределенноеЗначение("Перечисление.СтатусыПосылокСлужбыДоставки.Доставлена") Тогда 
		
		ЗаголовокКнопки = "Посылка получена";
		ВидимостьКнопки = Истина;
		
	Иначе

		ВидимостьКнопки = Ложь;
		
	КонецЕсли;
	
	Элементы.ПосылкаПолучена.Видимость = ВидимостьКнопки;
	Элементы.ПосылкаПолучена.Заголовок = ЗаголовокКнопки;

	Элементы.Статусы.Обновить();

	Элементы.ОтделениеНеРаботает.Видимость = ОтделениеНеРаботает(Объект.ОтделениеПолучатель);

	Оповестить();

КонецПроцедуры



&НаСервере
Функция ПолучитьСтатусЭН()
	
	Результат = Новый Структура;
	Результат.Вставить("СтатусЭН", Справочники.КодыСтатусовТТН.ПустаяСсылка());
	Результат.Вставить("СтатусСлужбыДоставки", Перечисления.СтатусыПосылокСлужбыДоставки.ПустаяСсылка());

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СтатусыЭНСрезПоследних.СтатусЭН КАК СтатусЭН,
		|	СтатусыЭНСрезПоследних.СтатусЭН.СтатусПосылки КАК СтатусСлужбыДоставки
		|ИЗ
		|	РегистрСведений.СтатусыЭН.СрезПоследних(, ДокументРегистратор = &ДокументРегистратор) КАК СтатусыЭНСрезПоследних";
	
	Запрос.УстановитьПараметр("ДокументРегистратор", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Результат.СтатусЭН = Выборка.СтатусЭН;
		Результат.СтатусСлужбыДоставки = Выборка.СтатусСлужбыДоставки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ТТННаСервере()
	ОтветЭН = ОбменНПСервер.РегистрацияЕН(Объект.Ссылка);
	Если ОтветЭН.Успех Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Електронна накладна зареєстрована';uk = 'Електронна накладна зареєстрована'"));

		Объект.ДатаДоставки = ОтветЭН.ДатаДоставки;
		Объект.СуммаДоставки = ОтветЭН.СуммаОтОператора;
		Объект.Номер = ОтветЭН.НомерТТН;
		Объект.ВнешняяСсылка = ОтветЭН.ТТНRef;
		Объект.ПутьКФайлуСтикера = ОтветЭН.ПутьКФайлуСтикера;
		Объект.ПутьКФайлуТТН = ОтветЭН.ПутьКФайлуТТН;
		Записать();
		ОбменНПСервер.ПолучитьСтатусТТН(, Объект.ВнешняяСсылка);
	Иначе

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Внаслідок реєстрації електронної накладної виникла помилка! Спробуйте через деякий час.';
			|		uk = 'Внаслідок реєстрації електронної накладної виникла помилка! Спробуйте через деякий час.'"));

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьВГХ()
	Результат = Ложь; 
	Если Объект.ДокументОснование.Упаковки.Количество() = 0 тогда 
		Результат = Истина; 
	Иначе 
		Для Каждого Строка Из Объект.ДокументОснование.Упаковки Цикл
			Если Строка.Ширина = 0 Или Строка.Ширина = 0 Или Строка.Ширина = 0 тогда
				Результат = Истина; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Результат; 
КонецФункции

#КонецОбласти
