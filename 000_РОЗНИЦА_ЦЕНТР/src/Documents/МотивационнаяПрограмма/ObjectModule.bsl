#Область ОбработчикиСобытийОбъекта

Процедура ПриКопировании(ОбъектКопирования)

	Ответственный = Пользователи.ТекущийПользователь();
	ДатаНачалаДействия    = '00010101';
	ДатаОкончанияДействия = '00010101';

	СтандартнаяПрограмма = Ложь;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

//	LNK 18.07.2017 12:03:55
	ЗаполнениеОбъектовСобытия.ОбщиеДействияПередЗаписью(ЭтотОбъект, Отказ);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

	Если ОбменДанными.Загрузка Тогда

		Возврат;

	КонецЕсли;

	Если ЭтоНовый() И НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Отказ = Истина;
		Сообщить("Отказано! Документы вида «" + Метаданные().Синоним + "» могут быть созданы только в ЦБ!");

	Иначе

		ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);

		Если ДляВсехМагазинов Тогда

				Магазины.Очистить();

		Иначе	Магазины.Свернуть("Магазин");

		КонецЕсли;

		Если ДляВсехНазначений Тогда

				Назначения.Очистить();

		Иначе	Назначения.Свернуть("РаботаВыполняемаяСотрудниками");


		КонецЕсли;

		ПроверитьПовторяющиесяПредметыПрограммы(Отказ);

	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда

		Возврат;

	КонецЕсли;


КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)

	ИнициализироватьДокумент();

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;

	Если ДляВсехМагазинов Тогда

		МассивНепроверяемыхРеквизитов.Добавить("Магазины");

	КонецЕсли;

	Если ДляВсехНазначений Тогда

		МассивНепроверяемыхРеквизитов.Добавить("Назначения");

	КонецЕсли;

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.МотивационнаяПрограмма.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	МотивационнаяПрограммаСервер.ОтразитьДействиеМотивационныхПрограмм(ДополнительныеСвойства, Движения, Отказ);

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

КонецПроцедуры
	
#КонецОбласти

Процедура ИнициализироватьДокумент()

	ПредметМотивационнойПрограммы = Перечисления.ПредметыМотивационныхПрограмм.СегментНоменклатуры;
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

Функция ПроверитьПовторяющиесяПредметыПрограммы(Отказ)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Программа.НомерСтроки,
	|	Программа.ПредметПрограммы
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	&Программа КАК Программа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведущая.ПредметПрограммы,
	|	ПРЕДСТАВЛЕНИЕ(Ведущая.ПредметПрограммы) КАК Представление,
	|	КОЛИЧЕСТВО(Фильтр.НомерСтроки) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТабличнаяЧасть.ПредметПрограммы КАК ПредметПрограммы
	|	ИЗ
	|		ТабличнаяЧасть КАК ТабличнаяЧасть) КАК Ведущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабличнаяЧасть КАК Фильтр
	|		ПО Ведущая.ПредметПрограммы = Фильтр.ПредметПрограммы
	|
	|СГРУППИРОВАТЬ ПО
	|	Ведущая.ПредметПрограммы
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(Фильтр.НомерСтроки) > 1"
	);
	Запрос.УстановитьПараметр("Программа", Программа);
	
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отказано! Обнаружены повторяющиеся предметы программы:",,,, Отказ);

		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл

			Сообщить(СокрЛП(Выборка.Представление) + " (" + Формат(Выборка.Количество, "ЧДЦ=; ЧГ=") + ")");

		КонецЦикла;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции // ПроверитьПовторяющиесяПредметыПрограммы()





