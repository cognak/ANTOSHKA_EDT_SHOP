#Область ОписаниеПеременных

&НаКлиенте
Перем СтрокаЗапроса;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТЗСтатусовЗапросаДоступности();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// ПодключаемоеОборудование
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "";

		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:
			                      |""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	//РегистрацияАктивностиПользователя(0,,"#Начало работы");//1	
	ПодключитьОбработчикОжидания("ОбновитьДанные", 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// + Бакан 25.05.2023
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
				ДокСсылка = НайтиДокумент(ТекКод);
				Если ЗначениеЗаполнено(ДокСсылка) тогда 
					ОткрытьЗначение(ДокСсылка);
				Иначе
					Сообщить("Ошибка! Документ в базе не найден!");
				КонецЕсли;				
			Иначе
				ТекКод = Параметр[1][1];
				ДокСсылка = НайтиДокумент(ТекКод);
				Если ЗначениеЗаполнено(ДокСсылка) тогда 
					ОткрытьЗначение(ДокСсылка);
				Иначе
					Сообщить("Ошибка! Документ в базе не найден!");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
 
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерЗаказаПриИзменении(Элемент)

	ЗаполнитьТЗСтатусовЗапросаДоступности(); 

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтатусыЗапросовДоступности

&НаКлиенте
Процедура СтатусыЗапросовДоступностиПриАктивизацииСтроки(Элемент)

	Если Не Элементы.СтатусыЗапросовДоступности.ТекущиеДанные = Неопределено Тогда
		СтатусЗапроса = Элементы.СтатусыЗапросовДоступности.ТекущиеДанные.СтатусЗапросаПеречисление;
	Иначе
		СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПустаяСсылка");
	КонецЕсли;
	
	СтрокаЗапроса = СтатусЗапроса;
	
	ЗапросыДоступности.Параметры.УстановитьЗначениеПараметра("СтатусЗапроса", СтатусЗапроса);
	ЗапросыДоступности.Параметры.УстановитьЗначениеПараметра("НомерЗаказа", "%" + СокрЛП(НомерЗаказа) + "%");
	ЗапросыДоступности.Параметры.УстановитьЗначениеПараметра("ВсеЗаказы", ПустаяСтрока(НомерЗаказа));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапросыДоступности

&НаКлиенте
Процедура ЗапросыДоступностиПриАктивизацииСтроки(Элемент)
	ЗаказыПокупателейКлиент.ОформитьКнопкуИзменениеСтатусаДокумента(Элементы.ЗапросыДоступности.ТекущаяСтрока, ЭтотОбъект, "ФормаСписка");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСтатусыЗапросаДоступности(Команда) 
	ОбновитьЗапросыДоступности();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция  НайтиДокумент(ТекКод)
	ДокСсылка = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Штрихкоды.Владелец КАК Владелец
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", ТекКод);
	
	РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДокСсылка=ВыборкаДетальныеЗаписи.Владелец;
		КонецЦикла;
Возврат ДокСсылка;	
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеСвойства(Переменная, Свойство)
	Если Переменная<>Неопределено 
		И ТипЗнч(Переменная)<>Тип("Null")
		И ТипЗнч(Переменная)<>Тип("Строка")
		И ТипЗнч(Переменная)<>Тип("Число")
		И ТипЗнч(Переменная)<>Тип("Дата")
		И ТипЗнч(Переменная)<>Тип("Булево")
		И ТипЗнч(Переменная)<>Тип("ДекорацияФормы")
		Тогда
		Стр = Новый Структура(Свойство, Неопределено);
		ЗаполнитьЗначенияСвойств(Стр, Переменная);
		Возврат Стр[Свойство];
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаСервере
Процедура ЗаполнитьТЗСтатусовЗапросаДоступности()  
	
	СтатусыЗапросовДоступности.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗапросДоступностиТоваров.Ссылка,
		|	ЗапросДоступностиТоваров.СтатусЗапроса,
		|	ЗапросДоступностиТоваров.ДокументОснование,
		|	ЗапросДоступностиТоваров.Номер
		|ПОМЕСТИТЬ ЗапросыДоступности
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров КАК ЗапросДоступностиТоваров
		|ГДЕ
		|	ЗапросДоступностиТоваров.МагазинОтправитель = &Магазин
		|	И (ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Новый)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Изменён)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Согласован)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Сборка)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.КОтправке)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Выдан)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ВыданДоставке)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отправлен)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Получен)
		|	ИЛИ
		|		ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ТоварВМагазине)
		|	ИЛИ
		|		ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтмену)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отменён)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Закрыт))
		|	ИЛИ ЗапросДоступностиТоваров.МагазинПолучатель = &Магазин
		|	И (ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отправлен)
		|	ИЛИ
		|ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ВыданДоставке)
		|	ИЛИ
		|		ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ТоварВМагазине)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Получен)
		|	ИЛИ
		|		ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПродажаБезнал)
		|	ИЛИ
		|		ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПродажаНаКассе)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отменён)
		|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Закрыт))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗапросыДоступности.Ссылка КАК Ссылка,
		|	ЗапросыДоступности.СтатусЗапроса КАК СтатусЗапроса,
		|	ЗапросыДоступности.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ЗаказыСтатус
		|ИЗ
		|	ЗапросыДоступности КАК ЗапросыДоступности
		|ГДЕ
		|	(ЗапросыДоступности.Номер ПОДОБНО &НомерЗаказа
		|	ИЛИ &ВсеЗапросы)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗапросыДоступности.Ссылка,
		|	ЗапросыДоступности.СтатусЗапроса,
		|	ЗапросыДоступности.ДокументОснование
		|ИЗ
		|	ЗапросыДоступности КАК ЗапросыДоступности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяНакладная КАК ЭлектроннаяНакладная
		|		ПО ЗапросыДоступности.Ссылка = ЭлектроннаяНакладная.ДокументОснование
		|		И НЕ ЭлектроннаяНакладная.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Отменена)
		|ГДЕ
		|	(ЭлектроннаяНакладная.Номер ПОДОБНО &НомерЗаказа
		|	ИЛИ &ВсеЗапросы)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗапросыДоступности.Ссылка,
		|	ЗапросыДоступности.СтатусЗапроса,
		|	ЗапросыДоступности.ДокументОснование
		|ИЗ
		|	ЗапросыДоступности КАК ЗапросыДоступности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|			ПО (КонтрагентыКонтактнаяИнформация.Ссылка = ЗаказПокупателя.Контрагент)
		|			И (КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		|		ПО ЗапросыДоступности.ДокументОснование = ЗаказПокупателя.Ссылка
		|ГДЕ
		|	(КонтрагентыКонтактнаяИнформация.НомерТелефона ПОДОБНО &НомерЗаказа
		|	ИЛИ &ВсеЗапросы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.СтатусЗапроса КАК СтатусЗапроса,
		|	СУММА(ВложенныйЗапрос.КоличествоСообщений) КАК КоличествоСообщений
		|ПОМЕСТИТЬ НепрочитанныеСообщения
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ЗаказыСтатус.СтатусЗапроса КАК СтатусЗапроса,
		|		КОЛИЧЕСТВО(ЗаказыСтатус.Ссылка) КАК КоличествоСообщений
		|	ИЗ
		|		ЗаказыСтатус КАК ЗаказыСтатус
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КомментарийПоСтрокам КАК КомментарийПоСтрокам
		|			ПО ЗаказыСтатус.Ссылка = КомментарийПоСтрокам.Документ
		|			И (НЕ КомментарийПоСтрокам.Просмотрен)
		|	СГРУППИРОВАТЬ ПО
		|		ЗаказыСтатус.СтатусЗапроса
		|
		|	ОБЪЕДИНИТЬ
		|
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ЗаказыСтатус.СтатусЗапроса,
		|		КОЛИЧЕСТВО(ЗаказыСтатус.Ссылка)
		|	ИЗ
		|		ЗаказыСтатус КАК ЗаказыСтатус
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КомментарийПоСтрокам КАК КомментарийПоСтрокам
		|			ПО ЗаказыСтатус.ДокументОснование = КомментарийПоСтрокам.Документ
		|			И (НЕ КомментарийПоСтрокам.Просмотрен)
		|	СГРУППИРОВАТЬ ПО
		|		ЗаказыСтатус.СтатусЗапроса) КАК ВложенныйЗапрос
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.СтатусЗапроса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КОЛИЧЕСТВО(ЗаказыСтатус.Ссылка) КАК Количество,
		|	ЗаказыСтатус.СтатусЗапроса КАК СтатусЗапроса,
		|	ЕСТЬNULL(НепрочитанныеСообщения.КоличествоСообщений, 0) КАК КоличествоСообщений
		|ИЗ
		|	ЗаказыСтатус КАК ЗаказыСтатус
		|		ЛЕВОЕ СОЕДИНЕНИЕ НепрочитанныеСообщения КАК НепрочитанныеСообщения
		|		ПО (ЗаказыСтатус.СтатусЗапроса = НепрочитанныеСообщения.СтатусЗапроса)
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыСтатус.СтатусЗапроса,
		|	ЕСТЬNULL(НепрочитанныеСообщения.КоличествоСообщений, 0)";
	
	Запрос.УстановитьПараметр("НомерЗаказа", "%" + СокрЛП(НомерЗаказа) + "%");
	Запрос.УстановитьПараметр("ВсеЗапросы", ПустаяСтрока(НомерЗаказа));
	Запрос.УстановитьПараметр("Магазин", ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);
	
	ТЗСтатусы = Запрос.Выполнить().Выгрузить();
	
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Новый);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Изменён);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе);
	//ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ЧастичноСогласован);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Согласован);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Сборка);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.КОтправке);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Выдан);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ВыданДоставке);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Отправлен);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ТоварВМагазине);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Получен);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПродажаБезнал);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПродажаНаКассе);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтмену);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Отменён);
	ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусы, Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Закрыт);

КонецПроцедуры

&НаСервере
Процедура ДобавитьТЗСтатусовЗапросаДоступности(ТЗСтатусов, Статус)
	
	СтрокаТЗСтатусов = ТЗСтатусов.Найти(Статус,"СтатусЗапроса");
	
	Если Не СтрокаТЗСтатусов = Неопределено Тогда

		НоваяСтрока = СтатусыЗапросовДоступности.Добавить();
		НоваяСтрока.СтатусЗапроса = Строка(Статус);
		НоваяСтрока.СтатусЗапросаПеречисление = Статус;
		НоваяСтрока.Количество = СтрокаТЗСтатусов.Количество;
		НоваяСтрока.Сообщения = СтрокаТЗСтатусов.КоличествоСообщений;
		
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьДанные()
	ЗаполнитьТЗСтатусовЗапросаДоступности(); 
	//ПроверитьАктивностьПользовател();
КонецПроцедуры

 // Активность пользователя
&НаКлиенте
Функция РегистрацияАктивностиПользователя(Хеш,Ссылка=Неопределено,Комментарий = "")  
	ТекДата = ТекущаяДата();
	ЗавершитьСеанс = Ложь;

		Простой = 0;
	Если ЗначениеЗаполнено(ВремяАктивностиПользователей) тогда 
		Если НачалоДня(ТекДата)=НачалоДня(ВремяАктивностиПользователей) Тогда
			Простой = ТекДата-ВремяАктивностиПользователей; // в секундах	
		КонецЕсли;
		ВремяЗавершенияРаботыПриБездействии = ПолучитьЗначениеКонстанты("ВремяЗавершенияРаботыПриБездействии");	
		Если ВремяЗавершенияРаботыПриБездействии = 0 тогда 
			ВремяЗавершенияРаботыПриБездействии = 3600;	
		КонецЕсли;
		// Проверяем простой
		Если Простой > ВремяЗавершенияРаботыПриБездействии	Тогда
			ЗавершитьСеанс=Истина;
		КонецЕсли;
		Если Хеш = ХэшАктивностиПользователей Тогда
				// Активности не было...
			Возврат ЗавершитьСеанс;  
		Иначе
			АктивностьПользователейСервер.СделатьЗаписьВРС(Хеш,ТекДата,Ссылка,Комментарий);
		КонецЕсли; 
	Иначе
		АктивностьПользователейСервер.СделатьЗаписьВРС(Хеш,ТекДата,Ссылка,Комментарий);
		ХэшАктивностиПользователей = Хеш;	
	КонецЕсли;
	
	Возврат ЗавершитьСеанс;
КонецФункции	

&НаСервере
Функция ПолучитьЗначениеКонстанты(ИмяКонстанты)
	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты(ИмяКонстанты)
КонецФункции


&НаКлиенте
Процедура ПроверитьАктивностьПользовател()  
	Окна = ПолучитьОкна();
	ТекстСообщения = "";
	Ссылка = Неопределено;
	АктивнаяФорма = "";
	Для Каждого ТекОкно Из Окна Цикл
		ТекстСообщения = ТекстСообщения + "["+ТекОкно.Заголовок+"] ";
		Формы = ТекОкно.Содержимое;
		Для Каждого Ф Из Формы Цикл
			Если Ф.ВводДоступен() Тогда
				// Это активная форма
				Ссылка = ПолучитьЗначениеСвойства(ПолучитьЗначениеСвойства(Ф,"Объект"),"Ссылка");//3
				Активность="!";
				АктивнаяФорма = Ф.Заголовок;
			Иначе
				Активность="";
			КонецЕсли;	
			ТекстСообщения = ТекстСообщения 
			+ "("+Ф.Заголовок+": "+ПолучитьЗначениеСвойства(Ф.ТекущийЭлемент,"Имя")+Активность+")";
		КонецЦикла;
	КонецЦикла;
	ЗавершитьСеанс = РегистрацияАктивностиПользователя(ПолучитьХэш(ТекстСообщения),Ссылка,АктивнаяФорма); //4
	Если ЗавершитьСеанс Тогда // 5
		ЗавершитьРаботуСистемы(Истина);
	КонецЕсли;
КонецПроцедуры            

&НаКлиенте
Функция ПолучитьХэш(СтрокаХэш, hash=0, M = 31, TABLE_SIZE = 18446744073709551616)
    //TABLE_SIZE = 18446744073709551615; 64 бита
    //M = 31; Умножитель
    ДлинаСтроки = СтрДлина(СтрокаХэш);
    Для к=1 по ДлинаСтроки цикл
        hash = M * hash + КодСимвола(Сред(СтрокаХэш,к,1));
    конеццикла;
    возврат hash%TABLE_SIZE;
КонецФункции

&НаКлиенте
Процедура ОбновитьЗапросыДоступности()
	ЗаполнитьТЗСтатусовЗапросаДоступности();
	
	СтруктураПоиска = Новый Структура("СтатусЗапросаПеречисление", СтрокаЗапроса);
	
	Строки = СтатусыЗапросовДоступности.НайтиСтроки(СтруктураПоиска);
	Если Строки.Количество() >0 Тогда
		Элементы.СтатусыЗапросовДоступности.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти