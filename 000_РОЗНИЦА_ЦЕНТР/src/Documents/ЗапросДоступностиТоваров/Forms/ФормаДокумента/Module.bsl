#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

//	Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект, КартинкаСостоянияДокумента, СостояниеДокумента, РазрешеноПроведение);

	//Если НЕ Объект.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Подготовить Тогда

	//	ТолькоПросмотр = Истина;

	//КонецЕсли;

	УстановитьКоличествоОстаток();

	УправлениеДоступомРТ.ПриСозданииФормыНаСервере(ЭтотОбъект);	//	LNK 17.10.2019 14:30:01
	
	ОтобразитьПричинуИзменения(); 
	
	Если Объект.ДокументОснование.ПолучитьОбъект() = Неопределено Тогда 
		Элементы.ДокументОснование.Видимость = Ложь;
		Элементы.ДокументОснованиеТекст.Видимость = Истина;
	Иначе 
		Элементы.ДокументОснование.Видимость = Истина;
		Элементы.ДокументОснованиеТекст.Видимость = Ложь;
	КонецЕсли;
	
	ПолучитьДанныеПоЭН();
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПоЭН()
	
	НомерТТН = ПолучитьНомерТТН();
	СтатусЭН 	 = ПолучитьСтатус();
	
	Статус = СтатусЭН.СтатусЭН;
	Элементы.Статус.ЦветТекста = СтатусЭН.ЦветТекста;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);

	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	УстановитьКоличествоОстаток();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УстановитьВидимостьДоступностьЭлементов();
	
	ОтобразитьОбсуждение();
	
	ПодключитьОбработчикОжидания("ОтобразитьОбсуждение", 15);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщение(Команда)
	ОтправитьСообщениеНаСервере();
	НовоеСообщение.Очистить();
	ОтобразитьОбсуждение();
КонецПроцедуры

&НаСервере
Процедура ОтправитьСообщениеНаСервере()
	
	СтруктураКомментария = РегистрыСведений.КомментарийПоСтрокам.СтруктураКомментария();
	
	СтруктураКомментария.КлючСвязи = 0;
	СтруктураКомментария.Комментарий = НовоеСообщение.ПолучитьТекст(); 
	СтруктураКомментария.Автор = ПараметрыСеанса.ТекущийПользователь; 
	СтруктураКомментария.Документ = Объект.Ссылка;
	СтруктураКомментария.Дата = ТекущаяДатаСеанса();
	
	РегистрыСведений.КомментарийПоСтрокам.ЗаписьКомментария(СтруктураКомментария);

КонецПроцедуры


&НаКлиенте
Процедура ОтобразитьОбсуждение()
	
	КоличествоНовых = ОтобразитьОбсуждениеНаСервере(ТекстОбсуждения, Объект.Ссылка);
	
	Если Не КоличествоНовых = 0 Тогда
		ТекстНовыхСообщений = " (" + СокрЛП(Строка(Формат(КоличествоНовых, "ЧГ=0;"))) + ")";
	Иначе
		ТекстНовыхСообщений = "";
	КонецЕсли;

	Элементы.СтраницаОбсуждение.Заголовок = "Обсуждение" + ТекстНовыхСообщений;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтобразитьОбсуждениеНаСервере(ТекстОбсуждения, ДокСсылка)
	
	НашУзел = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().ЭлементСтруктуры;
	
	НовыхСообщений = 0;

	Макет = Документы.ЗапросДоступностиТоваров.ПолучитьМакет("Макет");
	ОбластьСообщенияЗаказа = Макет.ПолучитьОбласть("СообщенияЗаказа");
	ОбластьСообщенияНам = Макет.ПолучитьОбласть("СообщенияНам");
	ОбластьСообщенияТоНас = Макет.ПолучитьОбласть("СообщенияТоНас");
	ОбластьНовыеСообщения = Макет.ПолучитьОбласть("НовыеСообщения");

	ТекстОбсуждения.Очистить();
	ТекстОбсуждения.НачатьАвтогруппировкуСтрок();

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КомментарийПоСтрокам.Автор КАК Автор,
		|	КомментарийПоСтрокам.Документ КАК Документ,
		|	КомментарийПоСтрокам.Дата КАК Дата,
		|	КомментарийПоСтрокам.КлючСвязи КАК КлючСвязи,
		|	КомментарийПоСтрокам.Комментарий КАК Комментарий,
		|	КомментарийПоСтрокам.Просмотрен КАК Просмотрен,
		|	КомментарийПоСтрокам.УзелСоздания КАК УзелСоздания,
		|	ЗапросДоступностиТоваровТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров.Товары КАК ЗапросДоступностиТоваровТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КомментарийПоСтрокам КАК КомментарийПоСтрокам
		|		ПО КомментарийПоСтрокам.Документ = ЗапросДоступностиТоваровТовары.Ссылка.ДокументОснование
		|		И КомментарийПоСтрокам.КлючСвязи = ЗапросДоступностиТоваровТовары.КлючСвязи
		|ГДЕ
		|	ЗапросДоступностиТоваровТовары.Ссылка = &Документ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	Запрос.УстановитьПараметр("Документ", ДокСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаСообщений = РезультатЗапроса.Выбрать();

	Пока ВыборкаСообщений.Следующий() Цикл
		
		ОбластьСообщенияЗаказа.Параметры.Заполнить(ВыборкаСообщений);

		ТекстРасшифровки = 	"> " + ВыборкаСообщений.Автор + " " + ВыборкаСообщений.Дата + Символы.ПС + 
							"> " + ВыборкаСообщений.Номенклатура + Символы.ПС + 					
							"> " + ВыборкаСообщений.Комментарий + Символы.ПС;
		
		ОбластьСообщенияЗаказа.Параметры.ТекстДляВставки = ТекстРасшифровки;
		ТекстОбсуждения.Вывести(ОбластьСообщенияЗаказа);
		Если Не ВыборкаСообщений.Просмотрен Тогда
			НовыхСообщений = НовыхСообщений + 1;
		КонецЕсли;
		
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КомментарийПоСтрокам.Автор,
		|	КомментарийПоСтрокам.Документ,
		|	КомментарийПоСтрокам.Дата КАК Дата,
		|	КомментарийПоСтрокам.КлючСвязи,
		|	КомментарийПоСтрокам.Комментарий,
		|	КомментарийПоСтрокам.Просмотрен КАК Просмотрен,
		|	КомментарийПоСтрокам.УзелСоздания
		|ИЗ
		|	РегистрСведений.КомментарийПоСтрокам КАК КомментарийПоСтрокам
		|ГДЕ
		|	КомментарийПоСтрокам.Документ = &Документ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|ИТОГИ
		|ПО
		|	Просмотрен";
	
	Запрос.УстановитьПараметр("Документ", ДокСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаСообщений = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСообщений.Следующий() Цикл
		Выборка = ВыборкаСообщений.Выбрать();
		Если Не ВыборкаСообщений.Просмотрен Тогда
			ТекстОбсуждения.Вывести(ОбластьНовыеСообщения);
			НовыхСообщений = НовыхСообщений + Выборка.Количество();
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.Комментарий, Символы.ПС);

			ТекстРасшифровки = 	"> " + Выборка.Автор + " " + Выборка.Дата + Символы.ПС;

			Для Каждого СтрокаИзМассива Из МассивСтрок Цикл

				ТекстРасшифровки = ТекстРасшифровки + 
								"> " + СтрокаИзМассива + Символы.ПС;
								
			КонецЦикла;

			Если Выборка.УзелСоздания = НашУзел Тогда
				
				ОбластьСообщенияТоНас.Параметры.ТекстДляВставки = ТекстРасшифровки;
				ОбластьСообщенияТоНас.Параметры.Заполнить(Выборка);
				ТекстОбсуждения.Вывести(ОбластьСообщенияТоНас);
			
			Иначе
				
				ОбластьСообщенияНам.Параметры.ТекстДляВставки = ТекстРасшифровки;
				ОбластьСообщенияНам.Параметры.Заполнить(Выборка);
				ТекстОбсуждения.Вывести(ОбластьСообщенияНам);

			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;

	Возврат НовыхСообщений;
КонецФункции

&НаКлиенте
Процедура ТекстОбсужденияОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	
	НовоеСообщение.ДобавитьСтроку(Расшифровка);;

КонецПроцедуры


&НаКлиенте
Процедура ГруппаСтраницыДокументаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "СтраницаОбсуждение" Тогда
		
		ПометитьПрочтение();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПометитьПрочтение()
	
	СтруктураЗаписи = РегистрыСведений.КомментарийПоСтрокам.СтруктураКомментария();

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КомментарийПоСтрокам.Автор,
		|	КомментарийПоСтрокам.Документ,
		|	КомментарийПоСтрокам.Дата,
		|	КомментарийПоСтрокам.КлючСвязи,
		|	КомментарийПоСтрокам.Комментарий,
		|	КомментарийПоСтрокам.Просмотрен,
		|	КомментарийПоСтрокам.УзелСоздания
		|ИЗ
		|	РегистрСведений.КомментарийПоСтрокам КАК КомментарийПоСтрокам
		|ГДЕ
		|	(КомментарийПоСтрокам.Документ = &Документ ИЛИ КомментарийПоСтрокам.Документ = &ДокументОснование)
		|	И Не КомментарийПоСтрокам.УзелСоздания = &УзелСоздания";
	
	Запрос.УстановитьПараметр("УзелСоздания", ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().ЭлементСтруктуры);
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка.ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураЗаписи.Автор = Выборка.Автор;
		СтруктураЗаписи.Дата = Выборка.Дата;
		СтруктураЗаписи.Документ = Выборка.Документ;
		СтруктураЗаписи.КлючСвязи = Выборка.КлючСвязи;
		СтруктураЗаписи.Комментарий = Выборка.Комментарий;
		СтруктураЗаписи.Просмотрен = Истина;
		СтруктураЗаписи.УзелСоздания = Выборка.УзелСоздания;
		РегистрыСведений.КомментарийПоСтрокам.ЗаписьКомментария(СтруктураЗаписи);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи) 
	
	Для Каждого СтрокаТЧ Из ТекущийОбъект.Товары Цикл 
		
		Если СтрокаТЧ.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Отменён 
					Или СтрокаТЧ.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Удалён Тогда 
					
			Продолжить;
				
		ИначеЕсли СтрокаТЧ.Количество = СтрокаТЧ.КоличествоТребование
				Или Не ПустаяСтрока(СтрокаТЧ.Примечание) Тогда
			
			СтрокаТЧ.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Согласован;

		КонецЕсли;   
			
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	УстановитьВидимостьДоступностьЭлементов();

	Оповестить("ЗаписанЗапросДоступностиТоваров", Объект.Ссылка, ЭтотОбъект);
	
	УстановитьКоличествоОстаток();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповестить("ЗаписанЗапросДоступностиТоваров");

	//Если НЕ ЗавершениеРаботы Тогда

	//	Если ОтправитьВнешнейСистеме Тогда

	//		Отказ = Истина;

	//		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВнешнейСистемеЗавершение", ЭтотОбъект);

	//		ПоказатьВопрос(ОписаниеОповещения
	//			, "Документ назначен для отправки в CRM! Подтвердите своё решение:
	//			  |[Да]  - закрыть документ БЕЗ отправки в CRM
	//			  |[Нет] - продолжить работу, при этом Вы сможете записать документ"
	//			, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет
	//			, "Попытка закрытия без записи"
	//		);

	//	КонецЕсли;

	//КонецЕсли;   
	
	//Если Не Модифицированность Тогда 
	//	
	//	Отказ = Истина;
	//	
	//	Если Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Новый")
	//			Или Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Изменён") Тогда 
	//		
	//		ОписаниеОповещения = Новый ОписаниеОповещения("ВзятиеДокументаВРаботуЗавершение", ЭтотОбъект);

	//		ПоказатьВопрос(ОписаниеОповещения
	//			, "Документ новый или изменён! Подтвердите своё решение:
	//			  |[Да]  - взять документ в работу
	//			  |[Нет] - оставить без изменения"
	//			, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет
	//			, "Попытка закрытия без записи"
	//		);
	//
	//	КонецЕсли;
	//КонецЕсли;
		
КонецПроцедуры
	
#КонецОбласти

//&НаКлиенте
//Процедура ОтправитьВнешнейСистемеЗавершение(КодВозврата, ДополнительныеПараметры)	Экспорт

//	Если КодВозврата = КодВозвратаДиалога.Да Тогда

//		ОтправитьВнешнейСистеме = Ложь;
//		Закрыть();

//	КонецЕсли;

//КонецПроцедуры
//&НаКлиенте
//Процедура ВзятиеДокументаВРаботуЗавершение(КодВозврата, ДополнительныеПараметры)	Экспорт

//	Если КодВозврата = КодВозвратаДиалога.Да Тогда

//		Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе");
//		Модифицированность = Истина;
//		
//	КонецЕсли; 
//	
//	Закрыть();

//КонецПроцедуры

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТовароТранспортнаяНакладнаяНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(Объект.ТовароТранспортнаяНакладная);

КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьТаблицуТовары(Команда)

	УстановитьКоличествоОстаток();

КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийТабличногоПоляТовары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ТекущиеДанные = Элемент.ТекущиеДанные;

	Если НоваяСтрока И НЕ ТекущиеДанные = Неопределено Тогда

		ТекущиеДанные.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваров.Подготовить");

	КонецЕсли;

КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличногоПоляТовары

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	Модифицированность = Истина;	//	установим врукопашную, так как этот флаг форма установит после выхода из этого обработчика.
	УстановитьВидимостьДоступностьЭлементов();

КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийТабличногоПоляУпаковки

&НаКлиенте
Процедура УпаковкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Если Объект.Упаковки.Количество() >= 10 Тогда

		Отказ = Истина;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УпаковкиШиринаПриИзменении(Элемент)
	ТекСтрока = Элементы.Упаковки.ТекущиеДанные;
	ТекСтрока.ОбъемныйВес = РассчитатьОбъем(ТекСтрока);
//	Объем = ТабПараметрыМестСтр.Итог("Объем");
КонецПроцедуры

&НаКлиенте
Процедура УпаковкиГлубинаПриИзменении(Элемент)
	ТекСтрока = Элементы.Упаковки.ТекущиеДанные;
	ТекСтрока.ОбъемныйВес = РассчитатьОбъем(ТекСтрока);
//	Объем = ТабПараметрыМестСтр.Итог("Объем");
КонецПроцедуры

&НаКлиенте
Процедура УпаковкиВысотаПриИзменении(Элемент)
	ТекСтрока = Элементы.Упаковки.ТекущиеДанные;
	ТекСтрока.ОбъемныйВес = РассчитатьОбъем(ТекСтрока);
//	Объем = ТабПараметрыМестСтр.Итог("Объем");
КонецПроцедуры

&НаКлиенте
Функция РассчитатьОбъем(Строка)
	Возврат 250*(Строка.Высота*Строка.Глубина*Строка.Ширина)/1000000;
КонецФункции





&НаКлиенте
Процедура УпаковкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда

		Если НЕ Копирование Тогда

			Элемент.ТекущиеДанные.Представление = "Коробка";

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()

	ЗаказыПокупателейКлиент.ОформитьКнопкуИзменениеСтатусаДокумента(Объект.Ссылка, ЭтотОбъект, "ФормаДокумента");
	ЗаказыПокупателейКлиент.ОформитьКнопкуСозданиеНаОснованииПеремещения(ЭтотОбъект);
	Элементы.ГруппаТоваров.ТолькоПросмотр = 
							Не (Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе"));
							
	Элементы.СтатусЗапроса.ТолькоПросмотр = Не ТехническаяПоддержкаВызовСервера.ИсключительныйРежим(); 
	
	Если Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Согласован") 
			Или Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ЧастичноСогласован") Тогда 
		
		Элементы.ТоварыОтредактироватьСтроку.Видимость = Истина;
		
	Иначе 
		
		Элементы.ТоварыОтредактироватьСтроку.Видимость = Ложь;
		
	КонецЕсли; 
	 
	 Элементы.ТоварыЗаполнитьДоступность.Видимость =
	 	(Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе"));
	
	УстановкаИВидимостьПеремещения();
	
КонецПроцедуры

&НаСервере
Процедура УстановкаИВидимостьПеремещения()

	ВидимостьПеремещения = Ложь;
	Если Не Объект.МагазинОтправитель = Объект.МагазинПолучатель 
			И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МагазинОтправитель, "СкладУправляющейСистемы", Ложь, Ложь)
			И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МагазинПолучатель, "СкладУправляющейСистемы", Ложь, Ложь) 
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МагазинОтправитель, "ВведенВЭксплуатацию", Ложь, Ложь)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МагазинПолучатель, "ВведенВЭксплуатацию", Ложь, Ложь) Тогда

		ВидимостьПеремещения = Истина;

	КонецЕсли;
	
	Элементы.ТоварыПремещениеЕсть.Видимость = ВидимостьПеремещения;

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТоварыЗапрос.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТоварыПеремещение.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПремещениеЕсть
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров.Товары КАК ТоварыЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ТоварыПеремещение
		|		ПО ТоварыПеремещение.Ссылка.ДокументОснование = ТоварыЗапрос.Ссылка
		|		И ТоварыПеремещение.Номенклатура = ТоварыЗапрос.Номенклатура
		|ГДЕ
		|	ТоварыЗапрос.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОтборСтрок = Новый Структура("Номенклатура", Выборка.Номенклатура);
		
		МассивСтрок = Объект.Товары.НайтиСтроки(ОтборСтрок);
		
		Для Каждого СтрокаПоиска Из МассивСтрок Цикл
			
			СтрокаПоиска.ПремещениеЕсть = Выборка.ПремещениеЕсть;
			
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьКоличествоОстаток()
	
	Если ТипЗнч(Объект.МагазинОтправитель) = Тип("СправочникСсылка.Магазины") Тогда
		
		СкладРозницы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МагазинОтправитель, "СкладПродажи", Справочники.Склады.ПустаяСсылка(), Ложь);

		МоментВремени = ?(Объект.Ссылка.Пустая(), ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера(), Новый МоментВремени(Объект.Дата, Объект.Ссылка));
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьКоличествоНаСкладе(СкладРозницы, МоментВремени, Объект.Товары);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр)
	Если ИмяСобытия = "ИзменилСледующийСтатусЗапроса" Тогда 
		
		Объект.СтатусЗапроса = Параметр;
		Модифицированность = Истина;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусЗапросаПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры
	
#КонецОбласти 

&НаСервере
Процедура ОтобразитьПричинуИзменения()
	
	ПричинаИзменения = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗапросДоступностиТоваровПричинаИзменений.Причина КАК Причина,
		|	ЗапросДоступностиТоваровПричинаИзменений.ДатаИзменения КАК ДатаИзменения
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров.ПричинаИзменений КАК ЗапросДоступностиТоваровПричинаИзменений
		|ГДЕ
		|	ЗапросДоступностиТоваровПричинаИзменений.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаИзменения УБЫВ";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПричинаИзменения = Выборка.Причина;
		
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи) 
	
	Возврат;
	
//	Если (Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе") 
//		Или Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Изменён")) Тогда  
//	
//		СтрокЗаполнено = 0;
//		
//		Для Каждого СтрокаТЧ Из Объект.Товары Цикл 
//			
//			Если СтрокаТЧ.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён")
//				Или СтрокаТЧ.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён") Тогда 
//				
//				СтрокЗаполнено = СтрокЗаполнено + 1;
//				
//			ИначеЕсли СтрокаТЧ.Количество = СтрокаТЧ.КоличествоТребование 
//				Или Не ПустаяСтрока(СтрокаТЧ.Примечание) Тогда 
//				
//				СтрокЗаполнено = СтрокЗаполнено + 1;
//				
//			КонецЕсли; 
//		КонецЦикла; 
//		
//		ТекстВопроса = "";
//		
//		Если Объект.Товары.Количество() = СтрокЗаполнено И Не РозничныеПродажиСерверПовтИсп.ЭтоУзелИнтернетМагазина() Тогда 
//			
//			ДополнительныеПараметры = Новый Структура(
//				"ПараметрыЗаписи"
//				,ПараметрыЗаписи
//			);  
//			
//			ТекстВопроса = "В документе заполнены все строки." + Символы.ПС + "Изменить статус на «Согласован»?";
//			
//			ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьСтатусДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
//
//			ПоказатьВопрос(ОписаниеОповещения
//				, ТекстВопроса
//				, РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.ОК
//				, "Изменение статуса документа"
//				, КодВозвратаДиалога.Отмена
//			);
//		
//		КонецЕсли;
//	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте	
Процедура ИзменитьСтатусДокументаЗавершение(КодВозврата, ДополнительныеПараметры)	Экспорт

	Если КодВозврата = КодВозвратаДиалога.ОК Тогда
		
		Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Согласован");
		
		Записать(ДополнительныеПараметры.ПараметрыЗаписи);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтредактироватьСтроку(Команда)
	
	Если Не Элементы.Товары.ТекущиеДанные = Неопределено Тогда 
		
		Оповещение = Новый ОписаниеОповещения("ОтредактироватьСтрокуЗавершение", ЭтотОбъект);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура", Элементы.Товары.ТекущиеДанные.Номенклатура);
		ПараметрыФормы.Вставить("Количество", Элементы.Товары.ТекущиеДанные.Количество);
		ПараметрыФормы.Вставить("КоличествоТребование", Элементы.Товары.ТекущиеДанные.КоличествоТребование);
		ПараметрыФормы.Вставить("КлючСвязи", Элементы.Товары.ТекущиеДанные.КлючСвязи);
		
		ОткрытьФорму("Документ.ЗапросДоступностиТоваров.Форма.РедактированиеСтроки", ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РедактированиеПримечания", Истина);

	Если Не Элементы.Товары.ТекущиеДанные = Неопределено Тогда

		ПараметрыФормы.Вставить("Примечание", Элементы.Товары.ТекущиеДанные.Примечание);
		ПараметрыФормы.Вставить("Номенклатура", Элементы.Товары.ТекущиеДанные.Номенклатура);
		ПараметрыФормы.Вставить("КлючСвязи", Элементы.Товары.ТекущиеДанные.КлючСвязи);
		
		Оповещение = Новый ОписаниеОповещения("ОтредактироватьСтрокуЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.ЗапросДоступностиТоваров.Форма.РедактированиеСтроки", ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтредактироватьСтрокуЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Модифицированность = Истина;
		ТекстИзменения = "";
		
		ОтборСтроки = Новый Структура("КлючСвязи", Результат.КлючСвязи);
		НайденнаяСтрока = Объект.Товары.НайтиСтроки(ОтборСтроки);

		Если ПустаяСтрока(НайденнаяСтрока[0].Примечание) Тогда
			
			СтруктураПримечания = Новый Структура;
			МассивСообщений = Новый Массив;
			
		Иначе
			
			СтруктураПримечания = ПростоеЧтениеJSON(НайденнаяСтрока[0].Примечание);
			Если СтруктураПримечания.Свойство("МассивСообщений") Тогда
				
				МассивСообщений = СтруктураПримечания.МассивСообщений;
				
			Иначе
				
				МассивСообщений = Новый Массив;
				
			КонецЕсли;

		КонецЕсли;
		
		Если Результат.ИзменилиКоличество Тогда

			ТекстИзменения = "Изменено количество: было - " + НайденнаяСтрока[0].Количество
							+ " стало - " + Результат.Количество + Символы.ПС;
			ТекстИзменения = ТекстИзменения + "Причина: " + Результат.Причина;
			
			НайденнаяСтрока[0].Количество = Результат.Количество;
			
			СтруктураТекстИзменения = Новый Структура;
			СтруктураТекстИзменения.Вставить("Автор", ТекущийПользователь); 
			СтруктураТекстИзменения.Вставить("Дата", ТекущаяДата()); 
			СтруктураТекстИзменения.Вставить("Сообщение", ТекстИзменения); 

		ИначеЕсли Не ПустаяСтрока(Результат.СообщениеМагазину) Тогда


			ТекстИзменения = Результат.СообщениеМагазину;
			
			СтруктураТекстИзменения = Новый Структура;
			СтруктураТекстИзменения.Вставить("Автор", ТекущийПользователь); 
			СтруктураТекстИзменения.Вставить("Дата", ТекущаяДата()); 
			СтруктураТекстИзменения.Вставить("Сообщение", ТекстИзменения); 
			
		КонецЕсли;
		
		Если Результат.ИзменилиКоличество Или Не ПустаяСтрока(Результат.СообщениеМагазину) Тогда

			НайденнаяСтрока[0].СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваров.Изменён"); 
			
			ИзмененыВсеСтроки = Истина;
			
			Для Каждого СтрокаТЧ Из Объект.Товары Цикл
				
				Если Не СтрокаТЧ.Количество = СтрокаТЧ.КоличествоТребование Тогда
					
					ИзмененыВсеСтроки = Ложь;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ИзмененыВсеСтроки Тогда
				
				Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Изменён");
				
			КонецЕсли;
			
			МассивСообщений.Добавить(СтруктураТекстИзменения);
			СтруктураПримечания.Вставить("МассивСообщений", МассивСообщений);
			НайденнаяСтрока[0].Примечание = ПростаяЗаписьJSON(СтруктураПримечания);
		
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПростоеЧтениеJSON(Данные)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Данные);  		
	Возврат ПрочитатьJSON(ЧтениеJSON);
	
КонецФункции

&НаСервере
Функция ПростаяЗаписьJSON(Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON;			
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,Данные);			
	Возврат ЗаписьJSON.Закрыть();  
	
КонецФункции

&НаСервере
Процедура ТТННаСервере()
	Успех =	ОбменНПСервер.РегистрацияЕН(Объект.Ссылка);
	Если Успех Тогда
		Сообщить("Создана ЭН");
	Иначе
		Сообщить("В результате создания ТТН возникла ошибка!");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТТН(Команда)
	
	Если Модифицированность Тогда
		Сообщить("Треба записати документ");
	Иначе
		
		Если Объект.ОператорДоставки =  ПолучитьПеречислениеНП() Тогда   
			ТТНУжеСоздана = ПроверитьНаявностьТТН();  
			Если НЕ ТТНУжеСоздана тогда 
				ПроверкаУспешна = ВыполнитьПроверкуОбязательныхРеквезитов();
				Если ПроверкаУспешна тогда 
					ТТННаСервере();
				КонецЕсли;
			Иначе
				Сообщить("ТТН создана раенне, повторное создание невозможно!");
			КонецЕсли;
		Иначе 
			Сообщить("Создание ТТН возможно только для оператора НОВАЯ ПОЧТА!");
		КонецЕсли;    
	КонецЕсли;    
	
	ПолучитьДанныеПоЭН();
	
КонецПроцедуры

&НаСервереБезКонтекста	//	LNK 08.02.2019 09:47:25
Функция ПолучитьПеречислениеНП()

	Возврат Перечисления.ОператорыДоставки.НоваяПочта;
   	
КонецФункции

&НаСервереБезКонтекста	//	LNK 08.02.2019 09:47:25
Функция ПроверитьИмяФизЛица(Имя)

	Возврат Справочники.ИменаЛюдей.ИмяКорректно(Имя);
   	
КонецФункции

&НаСервере
Функция ПроверитьНаявностьТТН()

	Возврат ОбменНПСервер.ТТНУжеСоздана(Объект.Ссылка);

КонецФункции  
  


&НаСервере
Функция ПроверитьОбъемныйВес() 
	Отделение = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование,"Отделение");

	Если ЗначениеЗаполнено(Отделение) тогда 
			МаксимальныйВесМеста = 	 ОбщегоНазначения.ПолучитьЗначениеРеквизита(Отделение,"МаксимальныйВесМеста");
			ОбщийМаксимальныйВес = 	 ОбщегоНазначения.ПолучитьЗначениеРеквизита(Отделение,"ОбщийМаксимальныйВес"); 
			МаксимальныйВесОТделения = Макс(МаксимальныйВесМеста,ОбщийМаксимальныйВес);
		Иначе
			Возврат ИСТИНА;
		КонецЕсли;
		ТТН = "";
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЗапросДоступностиТоваровУпаковки.Ширина / 100 * (ЗапросДоступностиТоваровУпаковки.Высота / 100) * (ЗапросДоступностиТоваровУпаковки.Глубина / 100) * 250 КАК Вес
			|ИЗ
			|	Документ.ЗапросДоступностиТоваров.Упаковки КАК ЗапросДоступностиТоваровУпаковки
			|ГДЕ
			|	ЗапросДоступностиТоваровУпаковки.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() тогда 
			Возврат Истина;
		КонецЕсли;
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.Вес > МаксимальныйВесОТделения тогда
				Возврат Истина;
			КонецЕсли;	
		КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаСервере
Функция ПроверитьВГХ() 
Если Объект.Упаковки.Количество() = 0 тогда 
	Возврат Истина; 
Иначе 
	Для каждого строка из  Объект.Упаковки цикл
		Если Строка.Ширина =0 или Строка.Ширина =0  или Строка.Ширина =0  тогда
			Возврат Истина; 
		КонецЕсли;
	КонецЦикла;
КонецЕсли;
Возврат Ложь; 
КонецФункции

 
&НаСервере
Функция ПроверитьАдрес() 
Город = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование,"Город"); 
Улица = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование,"Улица");
Дом = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование,"Дом");
Квартира = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование,"Квартира");
Если Город = "" или Улица = "" или Дом = "" или Квартира = "" или Город =Справочники.ГородаДоставки.ПустаяСсылка() или Улица = Справочники.Улицы.ПустаяСсылка() тогда 
	Возврат Истина;
Иначе
	Возврат Ложь;
КонецЕсли;
КонецФункции



&НаСервере
Функция ВыполнитьПроверкуОбязательныхРеквезитов() 
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) тогда   
		
		ВГХНеЗаполнены = ПроверитьВГХ();
		Если ВГХНеЗаполнены	тогда
			Сообщить("Не заполены ВГХ!");  
	        Возврат Ложь; 			
		КонецЕсли; 
			Если НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование,"ДоставкаНаАдрес") тогда
				Отделение = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование,"Отделение");
				Если Отделение = "" или Отделение = Справочники.Отделения.ПустаяСсылка() или Отделение = Справочники.Почтоматы.ПустаяСсылка() тогда
					Сообщить("Отделение не заполнено!");  
	        		Возврат Ложь; 			
				КонецЕсли;
				ОбъемныйВесПревышен = ПроверитьОбъемныйВес();  
				Если ОбъемныйВесПревышен	тогда
					Сообщить("Превышен максимальный объемный вес для данного отделения!");  
			        Возврат Ложь; 			
				КонецЕсли; 
			Иначе
				АдресНЕЗаполнен = ПроверитьАдрес();
				Если АдресНЕЗаполнен	тогда
					Сообщить("Не заполнен адресные данные!");  
			        Возврат Ложь; 			
				КонецЕсли; 
				
			КонецЕсли;
		Имя = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование,"Имя"); 
		Если ПустаяСтрока(Имя) Тогда
			Сообщить("Не заполнено имя");
	        Возврат Ложь; 
		КонецЕсли;    

		Фамилия = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование,"Фамилия"); 
		Если ПустаяСтрока(Фамилия) тогда
			Сообщить("Не заполнена фамилия!");  
	        Возврат Ложь; 			
		КонецЕсли;    
		
		Телефон = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование,"Телефон"); 
		Если СтрДлина(Телефон)<> 12 или Лев(Телефон,3)<>"380"	тогда
			Сообщить("Неверный номер телефона.");  
	        Возврат Ложь; 			
		КонецЕсли;
		
	КонецЕсли;     
	
    Возврат Истина;
КонецФункции

&НаСервере
Функция ПолучитьНомерТТН() 
	ТТН = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭлектроннаяНакладная.Ссылка
		|ИЗ
		|	Документ.ЭлектроннаяНакладная КАК ЭлектроннаяНакладная
		|ГДЕ
		|	ЭлектроннаяНакладная.ДокументОснование = &Регистратор";
	
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТТН = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
    Возврат ТТН;
КонецФункции

&НаСервере
Функция ПолучитьСтатус() 
	
	СтатусЭН = Новый Структура;
	СтатусЭН.Вставить("СтатусЭН", "Не отправлена");
	СтатусЭН.Вставить("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЭлектроннаяНакладная.Ссылка,
		|	ЕСТЬNULL(СтатусыТТНСрезПоследних.СтатусЭН, ""Не отправлена"") КАК СтатусЭН
		|ИЗ
		|	Документ.ЭлектроннаяНакладная КАК ЭлектроннаяНакладная
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЭН.СрезПоследних(,) КАК СтатусыТТНСрезПоследних
		|		ПО (СтатусыТТНСрезПоследних.ДокументРегистратор = ЭлектроннаяНакладная.Ссылка)
		|ГДЕ
		|	ЭлектроннаяНакладная.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Не Выборка.СтатусЭН = "Не отправлена" Тогда
			СтатусЭН.СтатусЭН = Выборка.СтатусЭН;
			СтатусЭН.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
		КонецЕсли;

	КонецЕсли;

    Возврат СтатусЭН;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДоступность(Команда)
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если СтрокаТЧ.КоличествоНаСкладе > 0 Тогда
			
			Если СтрокаТЧ.КоличествоНаСкладе > СтрокаТЧ.КоличествоТребование Тогда
				
				СтрокаТЧ.Количество = СтрокаТЧ.КоличествоТребование;
				
			Иначе
				
				СтрокаТЧ.Количество = СтрокаТЧ.КоличествоНаСкладе;

			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры
