#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

//	Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);

	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,
											   КартинкаСостоянияДокумента,
											   СостояниеДокумента,
											   РазрешеноПроведение);

	//Если НЕ Объект.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Подготовить Тогда

	//	ТолькоПросмотр = Истина;

	//КонецЕсли;

	УстановитьКоличествоОстаток();

	УправлениеДоступомРТ.ПриСозданииФормыНаСервере(ЭтотОбъект);	//	LNK 17.10.2019 14:30:01

	ОтобразитьПричинуИзменения();

	Если Объект.ДокументОснование.ПолучитьОбъект() = Неопределено Тогда
		Элементы.ДокументОснование.Видимость = Ложь;
		Элементы.ДокументОснованиеТекст.Видимость = Истина;
	Иначе
		Элементы.ДокументОснование.Видимость = Истина;
		Элементы.ДокументОснованиеТекст.Видимость = Ложь;
	КонецЕсли;

	ПолучитьДанныеПоЭН();

	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;

	ТолькоПросмотр = Не ЗаказыПокупателейСервер.ДоступностьДляРедактирования(Объект.Ссылка);

	ОбновитьПредставлениеНоменклатуры();

	УчетнаяПолитика = ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику(Объект.Дата);

	НазначениеСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МагазинОтправитель,
																 "НазначениеСклада",
																 Перечисления.НазначенияСкладов.ПустаяСсылка(),
																 Ложь);

	ПополнениеМагазина = ((НазначениеСклада = Перечисления.НазначенияСкладов.УправляющаяСистема)
		И Не (УчетнаяПолитика.ИнтернетМагазин = Объект.МагазинПолучатель)) Или УчетнаяПолитика.СкладЗакупки
		= Объект.МагазинОтправитель;
	СписокТТН.Параметры.УстановитьЗначениеПараметра("ДокументОснование", Объект.Ссылка);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);

	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект,
															  СостояниеДокумента,
															  КартинкаСостоянияДокумента,
															  РазрешеноПроведение);
	УстановитьКоличествоОстаток();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УстановитьВидимостьДоступностьЭлементов();

	ОтобразитьДинамическиеДанные();

	ПодключитьОбработчикОжидания("ОтобразитьДинамическиеДанные", 15);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект,
															  СостояниеДокумента,
															  КартинкаСостоянияДокумента,
															  РазрешеноПроведение);
	УстановитьВидимостьДоступностьЭлементов();

	Оповестить("ЗаписанЗапросДоступностиТоваров", Объект.Ссылка, ЭтотОбъект);

	УстановитьКоличествоОстаток();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Возврат;
	
//	Если (Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе") 
//		Или Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Изменён")) Тогда  
//	
//		СтрокЗаполнено = 0;
//		
//		Для Каждого СтрокаТЧ Из Объект.Товары Цикл 
//			
//			Если СтрокаТЧ.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён")
//				Или СтрокаТЧ.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён") Тогда 
//				
//				СтрокЗаполнено = СтрокЗаполнено + 1;
//				
//			ИначеЕсли СтрокаТЧ.Количество = СтрокаТЧ.КоличествоТребование 
//				Или Не ПустаяСтрока(СтрокаТЧ.Примечание) Тогда 
//				
//				СтрокЗаполнено = СтрокЗаполнено + 1;
//				
//			КонецЕсли; 
//		КонецЦикла; 
//		
//		ТекстВопроса = "";
//		
//		Если Объект.Товары.Количество() = СтрокЗаполнено И Не РозничныеПродажиСерверПовтИсп.ЭтоУзелИнтернетМагазина() Тогда 
//			
//			ДополнительныеПараметры = Новый Структура(
//				"ПараметрыЗаписи"
//				,ПараметрыЗаписи
//			);  
//			
//			ТекстВопроса = "В документе заполнены все строки." + Символы.ПС + "Изменить статус на «Согласован»?";
//			
//			ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьСтатусДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
//
//			ПоказатьВопрос(ОписаниеОповещения
//				, ТекстВопроса
//				, РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.ОК
//				, "Изменение статуса документа"
//				, КодВозвратаДиалога.Отмена
//			);
//		
//		КонецЕсли;
//	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ЗаписанаЭлектроннаяНакладная" Тогда

		УстановитьВидимостьДоступностьЭлементов();
		ОбновитьОтображениеДанных(элементы.НомерТТН);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Оповестить("ЗаписанЗапросДоступностиТоваров");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекстОбсужденияОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)

	СтандартнаяОбработка = Ложь;

	НовоеСообщение.ДобавитьСтроку(Расшифровка);
	;

КонецПроцедуры

&НаКлиенте

Процедура СтатусЗапросаПриИзменении(Элемент)

	УстановитьВидимостьДоступностьЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыДокументаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "СтраницаОбсуждение" Тогда

		ПометитьПрочтение();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТовароТранспортнаяНакладнаяНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(Объект.ТовароТранспортнаяНакладная);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ТекущиеДанные = Элемент.ТекущиеДанные;

	Если НоваяСтрока И Не ТекущиеДанные = Неопределено Тогда

		ТекущиеДанные.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваров.Подготовить");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураКод Тогда
		Если ПодключитьРасширениеРаботыСФайлами() Тогда

			ЗапуститьПриложение("https://antoshka.ua/"
				+ СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент.ТекущиеДанные.Номенклатура, "Код")));

		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	Модифицированность = Истина;	//	установим врукопашную, так как этот флаг форма установит после выхода из этого обработчика.
	УстановитьВидимостьДоступностьЭлементов();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУпаковки

&НаКлиенте
Процедура УпаковкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Если Объект.Упаковки.Количество() >= 10 Тогда

		Отказ = Истина;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УпаковкиШиринаПриИзменении(Элемент)
	ТекСтрока = Элементы.Упаковки.ТекущиеДанные;
	ТекСтрока.ОбъемныйВес = РассчитатьОбъем(ТекСтрока);
//	Объем = ТабПараметрыМестСтр.Итог("Объем");
КонецПроцедуры

&НаКлиенте
Процедура УпаковкиГлубинаПриИзменении(Элемент)
	ТекСтрока = Элементы.Упаковки.ТекущиеДанные;
	ТекСтрока.ОбъемныйВес = РассчитатьОбъем(ТекСтрока);
//	Объем = ТабПараметрыМестСтр.Итог("Объем");
КонецПроцедуры

&НаКлиенте
Процедура УпаковкиВысотаПриИзменении(Элемент)
	ТекСтрока = Элементы.Упаковки.ТекущиеДанные;
	ТекСтрока.ОбъемныйВес = РассчитатьОбъем(ТекСтрока);
//	Объем = ТабПараметрыМестСтр.Итог("Объем");
КонецПроцедуры

&НаКлиенте
Процедура УпаковкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда

		Если Не Копирование Тогда

			Элемент.ТекущиеДанные.Представление = "Коробка";

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьТаблицуТовары(Команда)

	УстановитьКоличествоОстаток();

КонецПроцедуры

&НаКлиенте
Процедура ОтредактироватьСтроку(Команда)

	Если Не Элементы.Товары.ТекущиеДанные = Неопределено Тогда

		Оповещение = Новый ОписаниеОповещения("ОтредактироватьСтрокуЗавершение", ЭтотОбъект);

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура", Элементы.Товары.ТекущиеДанные.Номенклатура);
		ПараметрыФормы.Вставить("Количество", Элементы.Товары.ТекущиеДанные.Количество);
		ПараметрыФормы.Вставить("КоличествоТребование", Элементы.Товары.ТекущиеДанные.КоличествоТребование);
		ПараметрыФормы.Вставить("КлючСвязи", Элементы.Товары.ТекущиеДанные.КлючСвязи);

		ОткрытьФорму("Документ.ЗапросДоступностиТоваров.Форма.РедактированиеСтроки",
					 ПараметрыФормы,
					 ,
					 ,
					 ,
					 ,
					 Оповещение,
					 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДоступность(Команда)

	Для Каждого СтрокаТЧ Из Объект.Товары Цикл

		Если СтрокаТЧ.КоличествоНаСкладе > 0 Или ПополнениеМагазина Тогда

			Если СтрокаТЧ.КоличествоНаСкладе > СтрокаТЧ.КоличествоТребование Или ПополнениеМагазина Тогда

				СтрокаТЧ.Количество = СтрокаТЧ.КоличествоТребование;

			Иначе

				СтрокаТЧ.Количество = СтрокаТЧ.КоличествоНаСкладе;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ТТН(Команда)

	Если Модифицированность Тогда
		Сообщить("Треба записати документ");
	Иначе

		Если Объект.ОператорДоставки = ПолучитьПеречислениеНП() Тогда
			ТТНУжеСоздана = ПроверитьНаявностьТТН();
			Если Не ТТНУжеСоздана Тогда
				ПроверкаУспешна = ВыполнитьПроверкуОбязательныхРеквезитов();
				Если ПроверкаУспешна Тогда
					ТТННаСервере();
				КонецЕсли;
			Иначе
				Сообщить("ТТН создана раенне, повторное создание невозможно!");
			КонецЕсли;
		Иначе
			Сообщить("Создание ТТН возможно только для оператора НОВАЯ ПОЧТА!");
		КонецЕсли;
	КонецЕсли;

	ПолучитьДанныеПоЭН();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РедактированиеПримечания", Истина);

	Если Не Элементы.Товары.ТекущиеДанные = Неопределено Тогда

		ПараметрыФормы.Вставить("Примечание", Элементы.Товары.ТекущиеДанные.Примечание);
		ПараметрыФормы.Вставить("Номенклатура", Элементы.Товары.ТекущиеДанные.Номенклатура);
		ПараметрыФормы.Вставить("КлючСвязи", Элементы.Товары.ТекущиеДанные.КлючСвязи);

		Оповещение = Новый ОписаниеОповещения("ОтредактироватьСтрокуЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.ЗапросДоступностиТоваров.Форма.РедактированиеСтроки",
					 ПараметрыФормы,
					 ,
					 ,
					 ,
					 ,
					 Оповещение,
					 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщение(Команда)
	ОтправитьСообщениеНаСервере();
	НовоеСообщение.Очистить();
	ОтобразитьДинамическиеДанные();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ИзменитьСтатусДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт

	Если КодВозврата = КодВозвратаДиалога.ОК Тогда

		Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Согласован");

		Записать(ДополнительныеПараметры.ПараметрыЗаписи);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтредактироватьСтрокуЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда

		Модифицированность = Истина;
		ТекстИзменения = "";

		ОтборСтроки = Новый Структура("КлючСвязи", Результат.КлючСвязи);
		НайденнаяСтрока = Объект.Товары.НайтиСтроки(ОтборСтроки);

		Если ПустаяСтрока(НайденнаяСтрока[0].Примечание) Тогда

			СтруктураПримечания = Новый Структура;
			МассивСообщений = Новый Массив;

		Иначе

			СтруктураПримечания = ПростоеЧтениеJSON(НайденнаяСтрока[0].Примечание);
			Если СтруктураПримечания.Свойство("МассивСообщений") Тогда

				МассивСообщений = СтруктураПримечания.МассивСообщений;

			Иначе

				МассивСообщений = Новый Массив;

			КонецЕсли;

		КонецЕсли;

		Если Результат.ИзменилиКоличество Тогда

			ТекстИзменения = "Изменено количество: было - " + НайденнаяСтрока[0].Количество + " стало - "
				+ Результат.Количество + Символы.ПС;
			ТекстИзменения = ТекстИзменения + "Причина: " + Результат.Причина;

			НайденнаяСтрока[0].Количество = Результат.Количество;

			СтруктураТекстИзменения = Новый Структура;
			СтруктураТекстИзменения.Вставить("Автор", ТекущийПользователь);
			СтруктураТекстИзменения.Вставить("Дата", ТекущаяДата());
			СтруктураТекстИзменения.Вставить("Сообщение", ТекстИзменения);

		ИначеЕсли Не ПустаяСтрока(Результат.СообщениеМагазину) Тогда
			ТекстИзменения = Результат.СообщениеМагазину;

			СтруктураТекстИзменения = Новый Структура;
			СтруктураТекстИзменения.Вставить("Автор", ТекущийПользователь);
			СтруктураТекстИзменения.Вставить("Дата", ТекущаяДата());
			СтруктураТекстИзменения.Вставить("Сообщение", ТекстИзменения);

		КонецЕсли;

		Если Результат.ИзменилиКоличество Или Не ПустаяСтрока(Результат.СообщениеМагазину) Тогда

			НайденнаяСтрока[0].СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваров.Изменён");

			ИзмененыВсеСтроки = Истина;

			Для Каждого СтрокаТЧ Из Объект.Товары Цикл

				Если Не СтрокаТЧ.Количество = СтрокаТЧ.КоличествоТребование Тогда

					ИзмененыВсеСтроки = Ложь;

				КонецЕсли;

			КонецЦикла;

			Если ИзмененыВсеСтроки Тогда

				Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Изменён");

			КонецЕсли;

			МассивСообщений.Добавить(СтруктураТекстИзменения);
			СтруктураПримечания.Вставить("МассивСообщений", МассивСообщений);
			НайденнаяСтрока[0].Примечание = ПростаяЗаписьJSON(СтруктураПримечания);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()

	ЗаказыПокупателейКлиент.ОформитьКнопкуИзменениеСтатусаДокумента(Объект.Ссылка, ЭтотОбъект, "ФормаДокумента");
	ЗаказыПокупателейКлиент.ОформитьКнопкуСозданиеНаОснованииПеремещения(ЭтотОбъект);
	ЗаказыПокупателейКлиент.ОформитьКнопкуСозданиеНаОснованииЭлектроннойНакладной(ЭтотОбъект);
	Элементы.ГруппаТоваров.ТолькоПросмотр = Не (Объект.СтатусЗапроса
		= ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе"));

	Элементы.СтатусЗапроса.ТолькоПросмотр = Не ТехническаяПоддержкаВызовСервера.ИсключительныйРежим();
	Элементы.ОтправлятьВNavision.ТолькоПросмотр = Не ТехническаяПоддержкаВызовСервера.ИсключительныйРежим(); 
	
//	Если Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Согласован") 
//			Или Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ЧастичноСогласован") Тогда 
//		
//		Элементы.ТоварыОтредактироватьСтроку.Видимость = Истина;
//		
//	Иначе 

	Элементы.ТоварыОтредактироватьСтроку.Видимость = Ложь;
		
//	КонецЕсли; 

	Элементы.ТоварыЗаполнитьДоступность.Видимость = (Объект.СтатусЗапроса
		= ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе"));

	СтарыйСтатусОплаты = (Объект.СтатусОплаты = ПредопределенноеЗначение("Перечисление.СтатусОплаты.ПустаяСсылка"));
	Элементы.ДокументОснованиеСтатусОплаты.Видимость = СтарыйСтатусОплаты;
	Элементы.СтатусОплаты.Видимость = Не СтарыйСтатусОплаты;

	УстановкаИВидимостьПеремещения();

	УстановитьКоличествоОстаток();

	ПолучитьДанныеПоЭН();

	Для Каждого ТекСтрока Из Объект.Упаковки Цикл

		ТекСтрока.ОбъемныйВес = РассчитатьОбъем(ТекСтрока);

	КонецЦикла;

	ОбновитьПредставлениеНоменклатуры();

КонецПроцедуры

&НаКлиенте
Функция РассчитатьОбъем(Строка)
	Возврат 250 * (Строка.Высота * Строка.Глубина * Строка.Ширина) / 1000000;
КонецФункции

&НаСервере
Процедура ПометитьПрочтение()

	СтруктураЗаписи = РегистрыСведений.КомментарийПоСтрокам.СтруктураКомментария();

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	КомментарийПоСтрокам.Автор,
				   |	КомментарийПоСтрокам.Документ,
				   |	КомментарийПоСтрокам.Дата,
				   |	КомментарийПоСтрокам.КлючСвязи,
				   |	КомментарийПоСтрокам.Комментарий,
				   |	КомментарийПоСтрокам.Просмотрен,
				   |	КомментарийПоСтрокам.УзелСоздания
				   |ИЗ
				   |	РегистрСведений.КомментарийПоСтрокам КАК КомментарийПоСтрокам
				   |ГДЕ
				   |	(КомментарийПоСтрокам.Документ = &Документ ИЛИ КомментарийПоСтрокам.Документ = &ДокументОснование)
				   |	И Не КомментарийПоСтрокам.УзелСоздания = &УзелСоздания";

	Запрос.УстановитьПараметр("УзелСоздания", ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().ЭлементСтруктуры);
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка,
																							 "ДокументОснование"));

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		СтруктураЗаписи.Автор = Выборка.Автор;
		СтруктураЗаписи.Дата = Выборка.Дата;
		СтруктураЗаписи.Документ = Выборка.Документ;
		СтруктураЗаписи.КлючСвязи = Выборка.КлючСвязи;
		СтруктураЗаписи.Комментарий = Выборка.Комментарий;
		СтруктураЗаписи.Просмотрен = Истина;
		СтруктураЗаписи.УзелСоздания = Выборка.УзелСоздания;
		РегистрыСведений.КомментарийПоСтрокам.ЗаписьКомментария(СтруктураЗаписи);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДинамическиеДанные()

	КоличествоНовых = ОтобразитьОбсуждениеНаСервере(ТекстОбсуждения, Объект.Ссылка);

	Если Не КоличествоНовых = 0 Тогда
		ТекстНовыхСообщений = " (" + СокрЛП(Строка(Формат(КоличествоНовых, "ЧГ=0;"))) + ")";
	Иначе
		ТекстНовыхСообщений = "";
	КонецЕсли;

	Элементы.СтраницаОбсуждение.Заголовок = "Обсуждение" + ТекстНовыхСообщений;

КонецПроцедуры

&НаСервере
Процедура ОтправитьСообщениеНаСервере()

	СтруктураКомментария = РегистрыСведений.КомментарийПоСтрокам.СтруктураКомментария();

	СтруктураКомментария.КлючСвязи = 0;
	СтруктураКомментария.Комментарий = НовоеСообщение.ПолучитьТекст();
	СтруктураКомментария.Автор = ПараметрыСеанса.ТекущийПользователь;
	СтруктураКомментария.Документ = Объект.Ссылка;
	СтруктураКомментария.Дата = ТекущаяДатаСеанса();

	РегистрыСведений.КомментарийПоСтрокам.ЗаписьКомментария(СтруктураКомментария);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтобразитьОбсуждениеНаСервере(ТекстОбсуждения, ДокСсылка)

	НашУзел = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().ЭлементСтруктуры;

	НовыхСообщений = 0;

	Макет = Документы.ЗапросДоступностиТоваров.ПолучитьМакет("Макет");
	ОбластьСообщенияЗаказа = Макет.ПолучитьОбласть("СообщенияЗаказа");
	ОбластьСообщенияНам = Макет.ПолучитьОбласть("СообщенияНам");
	ОбластьСообщенияТоНас = Макет.ПолучитьОбласть("СообщенияТоНас");
	ОбластьНовыеСообщения = Макет.ПолучитьОбласть("НовыеСообщения");

	ТекстОбсуждения.Очистить();
	ТекстОбсуждения.НачатьАвтогруппировкуСтрок();

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ТаблицаКомментариев.Автор КАК Автор,
				   |	ТаблицаКомментариев.Документ КАК Документ,
				   |	ТаблицаКомментариев.Дата КАК Дата,
				   |	ТаблицаКомментариев.КлючСвязи КАК КлючСвязи,
				   |	ТаблицаКомментариев.Комментарий КАК Комментарий,
				   |	ТаблицаКомментариев.Просмотрен КАК Просмотрен,
				   |	ТаблицаКомментариев.УзелСоздания КАК УзелСоздания,
				   |	ТаблицаТоваровЗапроса.Номенклатура КАК Номенклатура
				   |ИЗ
				   |	Документ.ЗапросДоступностиТоваров.Товары КАК ТаблицаТоваровЗапроса
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров КАК ТаблицаЗапроса
				   |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ТаблицаЗаказа
				   |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КомментарийПоСтрокам КАК ТаблицаКомментариев
				   |				ПО ТаблицаЗаказа.Ссылка = ТаблицаКомментариев.Документ
				   |			ПО ТаблицаЗапроса.ДокументОснование = ТаблицаЗаказа.Ссылка
				   |		ПО ТаблицаТоваровЗапроса.Ссылка = ТаблицаЗапроса.Ссылка
				   |ГДЕ
				   |	ТаблицаТоваровЗапроса.Ссылка = &Документ
				   |	И ТаблицаТоваровЗапроса.КлючСвязи = ТаблицаКомментариев.КлючСвязи
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	Дата";

	Запрос.УстановитьПараметр("Документ", ДокСсылка);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаСообщений = РезультатЗапроса.Выбрать();

	Пока ВыборкаСообщений.Следующий() Цикл

		ОбластьСообщенияЗаказа.Параметры.Заполнить(ВыборкаСообщений);

		ТекстРасшифровки = "> " + ВыборкаСообщений.Автор + " " + ВыборкаСообщений.Дата + Символы.ПС + "> "
			+ ВыборкаСообщений.УзелСоздания + Символы.ПС + "> " + ВыборкаСообщений.Номенклатура + Символы.ПС + "> "
			+ ВыборкаСообщений.Комментарий + Символы.ПС;

		ОбластьСообщенияЗаказа.Параметры.ТекстДляВставки = ТекстРасшифровки;
		ТекстОбсуждения.Вывести(ОбластьСообщенияЗаказа);
		Если Не ВыборкаСообщений.Просмотрен Тогда
			НовыхСообщений = НовыхСообщений + 1;
		КонецЕсли;

	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	КомментарийПоСтрокам.Автор КАК Автор,
				   |	КомментарийПоСтрокам.Документ КАК Документ,
				   |	КомментарийПоСтрокам.Дата КАК Дата,
				   |	КомментарийПоСтрокам.КлючСвязи КАК КлючСвязи,
				   |	КомментарийПоСтрокам.Комментарий КАК Комментарий,
				   |	КомментарийПоСтрокам.Просмотрен КАК Просмотрен,
				   |	КомментарийПоСтрокам.УзелСоздания КАК УзелСоздания
				   |ИЗ
				   |	РегистрСведений.КомментарийПоСтрокам КАК КомментарийПоСтрокам
				   |ГДЕ
				   |	КомментарийПоСтрокам.Документ = &Документ
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	Дата
				   |ИТОГИ
				   |ПО
				   |	Просмотрен";

	Запрос.УстановитьПараметр("Документ", ДокСсылка);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаСообщений = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаСообщений.Следующий() Цикл
		Выборка = ВыборкаСообщений.Выбрать();
		Если Не ВыборкаСообщений.Просмотрен Тогда
			ТекстОбсуждения.Вывести(ОбластьНовыеСообщения);
			НовыхСообщений = НовыхСообщений + Выборка.Количество();
		КонецЕсли;

		Пока Выборка.Следующий() Цикл

			МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.Комментарий, Символы.ПС);

			ТекстРасшифровки = "> " + Выборка.Автор + " " + Выборка.Дата + Символы.ПС;
			ТекстРасшифровки = ТекстРасшифровки + "> " + Выборка.УзелСоздания + Символы.ПС;

			Для Каждого СтрокаИзМассива Из МассивСтрок Цикл

				ТекстРасшифровки = ТекстРасшифровки + "> " + СтрокаИзМассива + Символы.ПС;

			КонецЦикла;

			Если Выборка.УзелСоздания = НашУзел Тогда

				ОбластьСообщенияТоНас.Параметры.ТекстДляВставки = ТекстРасшифровки;
				ОбластьСообщенияТоНас.Параметры.Заполнить(Выборка);
				ТекстОбсуждения.Вывести(ОбластьСообщенияТоНас);

			Иначе

				ОбластьСообщенияНам.Параметры.ТекстДляВставки = ТекстРасшифровки;
				ОбластьСообщенияНам.Параметры.Заполнить(Выборка);
				ТекстОбсуждения.Вывести(ОбластьСообщенияНам);

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Возврат НовыхСообщений;
КонецФункции

&НаСервере
Процедура ОбновитьПредставлениеНоменклатуры()

	Массив = Объект.Товары.Выгрузить( , "Номенклатура").ВыгрузитьКолонку("Номенклатура");
	Соответствие = ПолучитьСоответствиеПредставлений(Массив);

	Для Каждого Стр Из Объект.Товары Цикл
		Стр.ПолноеНаименованиеТовара = Соответствие[Стр.Номенклатура];
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПоЭН()

	ДанныеОбТТН = ПолучитьДанныеОбТТН();

	НомерТТН = ДанныеОбТТН.ТТН;

	Статус = ДанныеОбТТН.СтатусЭН;
	Элементы.Статус.ЦветТекста = ДанныеОбТТН.ЦветТекста;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСоответствиеПредставлений(Ссылка)

	Соответствие = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ВЫБОР
				   |		КОГДА НоменклатурнаяИнформация.Наименование ЕСТЬ NULL
				   |			ТОГДА Товар.Наименование
				   |		ИНАЧЕ НоменклатурнаяИнформация.Наименование
				   |	КОНЕЦ КАК ПолноеНаименованиеТовара,
				   |	Товар.Ссылка
				   |ИЗ
				   |	Справочник.Номенклатура КАК Товар
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатурнаяИнформация КАК НоменклатурнаяИнформация
				   |		ПО НоменклатурнаяИнформация.Номенклатура = Товар.Ссылка
				   |ГДЕ
				   |	Товар.Ссылка В (&Ссылка)";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Соответствие.Вставить(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.ПолноеНаименованиеТовара);
	КонецЦикла;

	Возврат Соответствие;

КонецФункции

&НаСервере
Процедура УстановкаИВидимостьПеремещения()

	ВидимостьПеремещения = Ложь;
	Если Не Объект.МагазинОтправитель = Объект.МагазинПолучатель
		И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МагазинОтправитель, "СкладУправляющейСистемы", Ложь, Ложь)
		И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МагазинПолучатель, "СкладУправляющейСистемы", Ложь, Ложь)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МагазинОтправитель, "ВведенВЭксплуатацию", Ложь, Ложь)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МагазинПолучатель, "ВведенВЭксплуатацию", Ложь, Ложь) Тогда

		ВидимостьПеремещения = Истина;

	КонецЕсли;

	Элементы.ТоварыПремещениеЕсть.Видимость = ВидимостьПеремещения;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ТоварыЗапрос.Номенклатура,
				   |	ВЫБОР
				   |		КОГДА ТоварыПеремещение.Ссылка ЕСТЬ NULL
				   |			ТОГДА ЛОЖЬ
				   |		ИНАЧЕ ИСТИНА
				   |	КОНЕЦ КАК ПремещениеЕсть
				   |ИЗ
				   |	Документ.ЗапросДоступностиТоваров.Товары КАК ТоварыЗапрос
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ТоварыПеремещение
				   |		ПО ТоварыПеремещение.Ссылка.ДокументОснование = ТоварыЗапрос.Ссылка
				   |		И ТоварыПеремещение.Номенклатура = ТоварыЗапрос.Номенклатура
				   |ГДЕ
				   |	ТоварыЗапрос.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		ОтборСтрок = Новый Структура("Номенклатура", Выборка.Номенклатура);

		МассивСтрок = Объект.Товары.НайтиСтроки(ОтборСтрок);

		Для Каждого СтрокаПоиска Из МассивСтрок Цикл

			СтрокаПоиска.ПремещениеЕсть = Выборка.ПремещениеЕсть;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОтобразитьПричинуИзменения()

	ПричинаИзменения = "";

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				   |	ЗапросДоступностиТоваровПричинаИзменений.Причина КАК Причина,
				   |	ЗапросДоступностиТоваровПричинаИзменений.ДатаИзменения КАК ДатаИзменения
				   |ИЗ
				   |	Документ.ЗапросДоступностиТоваров.ПричинаИзменений КАК ЗапросДоступностиТоваровПричинаИзменений
				   |ГДЕ
				   |	ЗапросДоступностиТоваровПричинаИзменений.Ссылка = &Ссылка
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	ДатаИзменения УБЫВ";

	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		ПричинаИзменения = Выборка.Причина;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПростоеЧтениеJSON(Данные)

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Данные);
	Возврат ПрочитатьJSON(ЧтениеJSON);

КонецФункции

&НаСервереБезКонтекста	//	LNK 08.02.2019 09:47:25
Функция ПроверитьИмяФизЛица(Имя)

	Возврат Справочники.ИменаЛюдей.ИмяКорректно(Имя);

КонецФункции

&НаСервереБезКонтекста	//	LNK 08.02.2019 09:47:25
Функция ПолучитьПеречислениеНП()

	Возврат Перечисления.ОператорыДоставки.НоваяПочта;

КонецФункции

&НаСервере
Процедура ТТННаСервере()
	Успех = ОбменНПСервер.РегистрацияЕН(Объект.Ссылка);
	Если Успех Тогда
		Сообщить("Создана ЭН");
	Иначе
		Сообщить("В результате создания ТТН возникла ошибка!");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьАдрес()
	Город = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование, "Город");
	Улица = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование, "Улица");
	Дом = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование, "Дом");
	Квартира = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование, "Квартира");
	Если Город = "" Или Улица = "" Или Дом = "" Или Квартира = "" Или Город = Справочники.ГородаДоставки.ПустаяСсылка()
		Или Улица = Справочники.Улицы.ПустаяСсылка() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПроверитьНаявностьТТН()

	Возврат ОбменНПСервер.ТТНУжеСоздана(Объект.Ссылка);

КонецФункции

&НаСервере
Функция ПроверитьВГХ()
	Если Объект.Упаковки.Количество() = 0 Тогда
		Возврат Истина;
	Иначе
		Для Каждого строка Из Объект.Упаковки Цикл
			Если Строка.Ширина = 0 Или Строка.Ширина = 0 Или Строка.Ширина = 0 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаСервере
Функция ПолучитьДанныеОбТТН()

	СтатусЭН = Новый Структура;
	СтатусЭН.Вставить("ТТН", Документы.ЭлектроннаяНакладная.ПустаяСсылка());
	СтатусЭН.Вставить("СтатусЭН", "Не отправлена");
	СтатусЭН.Вставить("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				   |	ЭлектроннаяНакладная.Ссылка КАК Ссылка,
				   |	ЕСТЬNULL(СтатусыТТНСрезПоследних.СтатусЭН, ""Не отправлена"") КАК СтатусЭН
				   |ИЗ
				   |	Документ.ЭлектроннаяНакладная КАК ЭлектроннаяНакладная
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЭН.СрезПоследних(,) КАК СтатусыТТНСрезПоследних
				   |		ПО (СтатусыТТНСрезПоследних.ДокументРегистратор = ЭлектроннаяНакладная.Ссылка)
				   |ГДЕ
				   |	ЭлектроннаяНакладная.ДокументОснование = &ДокументОснование
				   |	И (НЕ СтатусыТТНСрезПоследних.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Отменена)
				   |	ИЛИ СтатусыТТНСрезПоследних.СтатусЭН.СтатусПосылки ЕСТЬ NULL)";

	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Если Выборка.Следующий() Тогда

		СтатусЭН.ТТН = Выборка.Ссылка;

		Если Не Выборка.СтатусЭН = "Не отправлена" Тогда
			СтатусЭН.СтатусЭН = Выборка.СтатусЭН;
			СтатусЭН.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
		КонецЕсли;

	КонецЕсли;

	Возврат СтатусЭН;

КонецФункции

&НаСервере
Функция ВыполнитьПроверкуОбязательныхРеквезитов()

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда

		ВГХНеЗаполнены = ПроверитьВГХ();
		Если ВГХНеЗаполнены Тогда
			Сообщить("Не заполены ВГХ!");
			Возврат Ложь;
		КонецЕсли;
		Если Не ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование, "ДоставкаНаАдрес") Тогда
			Отделение = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование, "Отделение");
			Если Отделение = "" Или Отделение = Справочники.Отделения.ПустаяСсылка() Или Отделение
				= Справочники.Почтоматы.ПустаяСсылка() Тогда
				Сообщить("Отделение не заполнено!");
				Возврат Ложь;
			КонецЕсли;
			ОбъемныйВесПревышен = ПроверитьОбъемныйВес();
			Если ОбъемныйВесПревышен Тогда
				Сообщить("Превышен максимальный объемный вес для данного отделения!");
				Возврат Ложь;
			КонецЕсли;
		Иначе
			АдресНЕЗаполнен = ПроверитьАдрес();
			Если АдресНЕЗаполнен Тогда
				Сообщить("Не заполнен адресные данные!");
				Возврат Ложь;
			КонецЕсли;

		КонецЕсли;
		Имя = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование, "Имя");
		Если ПустаяСтрока(Имя) Тогда
			Сообщить("Не заполнено имя");
			Возврат Ложь;
		КонецЕсли;

		Фамилия = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование, "Фамилия");
		Если ПустаяСтрока(Фамилия) Тогда
			Сообщить("Не заполнена фамилия!");
			Возврат Ложь;
		КонецЕсли;

		Телефон = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование, "Телефон");
		Если СтрДлина(Телефон) <> 12 Или Лев(Телефон, 3) <> "380" Тогда
			Сообщить("Неверный номер телефона.");
			Возврат Ложь;
		КонецЕсли;

	КонецЕсли;

	Возврат Истина;
КонецФункции

&НаСервере
Функция ПроверитьОбъемныйВес()
	Отделение = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование, "Отделение");

	Если ЗначениеЗаполнено(Отделение) Тогда
		МаксимальныйВесМеста = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Отделение, "МаксимальныйВесМеста");
		ОбщийМаксимальныйВес = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Отделение, "ОбщийМаксимальныйВес");
		МаксимальныйВесОТделения = Макс(МаксимальныйВесМеста, ОбщийМаксимальныйВес);
	Иначе
		Возврат Истина;
	КонецЕсли;
	ТТН = "";
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				   |	ЗапросДоступностиТоваровУпаковки.Ширина / 100 * (ЗапросДоступностиТоваровУпаковки.Высота / 100) * (ЗапросДоступностиТоваровУпаковки.Глубина / 100) * 250 КАК Вес
				   |ИЗ
				   |	Документ.ЗапросДоступностиТоваров.Упаковки КАК ЗапросДоступностиТоваровУпаковки
				   |ГДЕ
				   |	ЗапросДоступностиТоваровУпаковки.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Вес > МаксимальныйВесОТделения Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

&НаСервере
Функция ПростаяЗаписьJSON(Данные)

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	Возврат ЗаписьJSON.Закрыть();

КонецФункции

&НаСервере
Процедура УстановитьКоличествоОстаток()

	Если ТипЗнч(Объект.МагазинОтправитель) = Тип("СправочникСсылка.Магазины") Тогда

		СкладРозницы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МагазинОтправитель,
																 "СкладПродажи",
																 Справочники.Склады.ПустаяСсылка(),
																 Ложь);

		МоментВремени = ?(Объект.Ссылка.Пустая(),
						  ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера(),
						  Новый МоментВремени(Объект.Дата, Объект.Ссылка));
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьКоличествоНаСкладе(СкладРозницы, МоментВремени, Объект.Товары);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти