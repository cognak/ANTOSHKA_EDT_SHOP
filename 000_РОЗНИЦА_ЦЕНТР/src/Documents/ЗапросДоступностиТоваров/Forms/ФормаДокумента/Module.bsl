#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

//	Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект, КартинкаСостоянияДокумента, СостояниеДокумента, РазрешеноПроведение);

	//Если НЕ Объект.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Подготовить Тогда

	//	ТолькоПросмотр = Истина;

	//КонецЕсли;

	УстановитьКоличествоОстаток();

	УправлениеДоступомРТ.ПриСозданииФормыНаСервере(ЭтотОбъект);	//	LNK 17.10.2019 14:30:01
	
	ОтобразитьПричинуИзменения(); 
	
	Если Объект.ДокументОснование.ПолучитьОбъект() = Неопределено Тогда 
		Элементы.ДокументОснование.Видимость = Ложь;
		Элементы.ДокументОснованиеТекст.Видимость = Истина;
	Иначе 
		Элементы.ДокументОснование.Видимость = Истина;
		Элементы.ДокументОснованиеТекст.Видимость = Ложь;
	КонецЕсли;  
    НомерТТН = ПолучитьНомерТТН();
	Статус 	 = ПолучитьСтатус()
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);

	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УстановитьВидимостьДоступностьЭлементов();

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи) 
	
	Для Каждого СтрокаТЧ Из ТекущийОбъект.Товары Цикл 
		
		Если СтрокаТЧ.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Отменён 
					Или СтрокаТЧ.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Удалён Тогда 
					
			Продолжить;
				
		ИначеЕсли СтрокаТЧ.Количество = СтрокаТЧ.КоличествоТребование
				Или Не ПустаяСтрока(СтрокаТЧ.Примечание) Тогда
			
			СтрокаТЧ.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Согласован;

		КонецЕсли;   
			
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	УстановитьВидимостьДоступностьЭлементов();

	Оповестить("ЗаписанЗапросДоступностиТоваров", Объект.Ссылка, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповестить("ЗаписанЗапросДоступностиТоваров");

	//Если НЕ ЗавершениеРаботы Тогда

	//	Если ОтправитьВнешнейСистеме Тогда

	//		Отказ = Истина;

	//		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВнешнейСистемеЗавершение", ЭтотОбъект);

	//		ПоказатьВопрос(ОписаниеОповещения
	//			, "Документ назначен для отправки в CRM! Подтвердите своё решение:
	//			  |[Да]  - закрыть документ БЕЗ отправки в CRM
	//			  |[Нет] - продолжить работу, при этом Вы сможете записать документ"
	//			, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет
	//			, "Попытка закрытия без записи"
	//		);

	//	КонецЕсли;

	//КонецЕсли;   
	
	//Если Не Модифицированность Тогда 
	//	
	//	Отказ = Истина;
	//	
	//	Если Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Новый")
	//			Или Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Изменён") Тогда 
	//		
	//		ОписаниеОповещения = Новый ОписаниеОповещения("ВзятиеДокументаВРаботуЗавершение", ЭтотОбъект);

	//		ПоказатьВопрос(ОписаниеОповещения
	//			, "Документ новый или изменён! Подтвердите своё решение:
	//			  |[Да]  - взять документ в работу
	//			  |[Нет] - оставить без изменения"
	//			, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет
	//			, "Попытка закрытия без записи"
	//		);
	//
	//	КонецЕсли;
	//КонецЕсли;
		
КонецПроцедуры
	
#КонецОбласти

//&НаКлиенте
//Процедура ОтправитьВнешнейСистемеЗавершение(КодВозврата, ДополнительныеПараметры)	Экспорт

//	Если КодВозврата = КодВозвратаДиалога.Да Тогда

//		ОтправитьВнешнейСистеме = Ложь;
//		Закрыть();

//	КонецЕсли;

//КонецПроцедуры
//&НаКлиенте
//Процедура ВзятиеДокументаВРаботуЗавершение(КодВозврата, ДополнительныеПараметры)	Экспорт

//	Если КодВозврата = КодВозвратаДиалога.Да Тогда

//		Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе");
//		Модифицированность = Истина;
//		
//	КонецЕсли; 
//	
//	Закрыть();

//КонецПроцедуры

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТовароТранспортнаяНакладнаяНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(Объект.ТовароТранспортнаяНакладная);

КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьТаблицуТовары(Команда)

	УстановитьКоличествоОстаток();

КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийТабличногоПоляТовары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ТекущиеДанные = Элемент.ТекущиеДанные;

	Если НоваяСтрока И НЕ ТекущиеДанные = Неопределено Тогда

		ТекущиеДанные.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваров.Подготовить");

	КонецЕсли;

КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличногоПоляТовары

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	Модифицированность = Истина;	//	установим врукопашную, так как этот флаг форма установит после выхода из этого обработчика.
	УстановитьВидимостьДоступностьЭлементов();

КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийТабличногоПоляУпаковки

&НаКлиенте
Процедура УпаковкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Если Объект.Упаковки.Количество() >= 10 Тогда

		Отказ = Истина;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УпаковкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда

		Если НЕ Копирование Тогда

			Элемент.ТекущиеДанные.Представление = "Коробка";

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()

	ЗаказыПокупателейКлиент.ОформитьКнопкуИзменениеСтатусаДокумента(Объект.Ссылка, ЭтотОбъект, "ФормаДокумента");
	Элементы.ГруппаТоваров.ТолькоПросмотр = 
							Не (Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе"));
							
	Элементы.СтатусЗапроса.ТолькоПросмотр = Не ТехническаяПоддержкаВызовСервера.ИсключительныйРежим(); 
	
	Если Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Согласован") 
			Или Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ЧастичноСогласован") Тогда 
		
		Элементы.ТоварыОтредактироватьСтроку.Видимость = Истина;
		
	Иначе 
		
		Элементы.ТоварыОтредактироватьСтроку.Видимость = Ложь;
		
	КонецЕсли;  

КонецПроцедуры

&НаСервере
Процедура УстановитьКоличествоОстаток()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.УникальныйИдентификатор КАК УникальныйИдентификатор
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&Товары КАК ТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад
	|ПОМЕСТИТЬ Склады
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Магазин = &Магазин
	|	И НЕ(Склады.ПометкаУдаления
	|				ИЛИ Склады.Блокирован)
	|	И НЕ Склады.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.Номенклатура КАК Номенклатура,
	|	Источник.Характеристика КАК Характеристика,
	|	Источник.УникальныйИдентификатор КАК УникальныйИдентификатор,
	|	СУММА(ЕСТЬNULL(ТоварыНаСкладах.КоличествоОстаток, 0)) КАК Количество
	|ИЗ
	|	Источник КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				&ГраницаСреза,
	|				Склад В
	|					(ВЫБРАТЬ
	|						Склады.Склад
	|					ИЗ
	|						Склады)) КАК ТоварыНаСкладах
	|		ПО Источник.Номенклатура = ТоварыНаСкладах.Номенклатура
	|			И Источник.Характеристика = ТоварыНаСкладах.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Номенклатура,
	|	Источник.Характеристика,
	|	Источник.УникальныйИдентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Склады"
	);
	Запрос.УстановитьПараметр("Магазин", Объект.МагазинОтправитель);
	Запрос.УстановитьПараметр("Товары" , Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ГраницаСреза", Новый Граница(Новый МоментВремени(Объект.Дата, Объект.Ссылка), ВидГраницы.Исключая));

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		СтрокиИдентификатора = Объект.Товары.НайтиСтроки(
			Новый Структура("УникальныйИдентификатор", Выборка.УникальныйИдентификатор));

		Для каждого СтрокаТабличнойЧасти Из СтрокиИдентификатора Цикл

			СтрокаТабличнойЧасти.КоличествоОстаток = Выборка.Количество;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр)
	Если ИмяСобытия = "ИзменилСледующийСтатусЗапроса" Тогда 
		
		Объект.СтатусЗапроса = Параметр;
		Модифицированность = Истина;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусЗапросаПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры
	
#КонецОбласти 

&НаСервере
Процедура ОтобразитьПричинуИзменения()
	
	ПричинаИзменения = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗапросДоступностиТоваровПричинаИзменений.Причина КАК Причина,
		|	ЗапросДоступностиТоваровПричинаИзменений.ДатаИзменения КАК ДатаИзменения
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров.ПричинаИзменений КАК ЗапросДоступностиТоваровПричинаИзменений
		|ГДЕ
		|	ЗапросДоступностиТоваровПричинаИзменений.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаИзменения УБЫВ";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПричинаИзменения = Выборка.Причина;
		
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи) 
	
	Возврат;
	
	Если (Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе") 
		Или Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Изменён")) Тогда  
	
		СтрокЗаполнено = 0;
		
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл 
			
			Если СтрокаТЧ.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён")
				Или СтрокаТЧ.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён") Тогда 
				
				СтрокЗаполнено = СтрокЗаполнено + 1;
				
			ИначеЕсли СтрокаТЧ.Количество = СтрокаТЧ.КоличествоТребование 
				Или Не ПустаяСтрока(СтрокаТЧ.Примечание) Тогда 
				
				СтрокЗаполнено = СтрокЗаполнено + 1;
				
			КонецЕсли; 
		КонецЦикла; 
		
		ТекстВопроса = "";
		
		Если Объект.Товары.Количество() = СтрокЗаполнено И Не РозничныеПродажиСерверПовтИсп.ЭтоУзелИнтернетМагазина() Тогда 
			
			ДополнительныеПараметры = Новый Структура(
				"ПараметрыЗаписи"
				,ПараметрыЗаписи
			);  
			
			ТекстВопроса = "В документе заполнены все строки." + Символы.ПС + "Изменить статус на «Согласован»?";
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьСтатусДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);

			ПоказатьВопрос(ОписаниеОповещения
				, ТекстВопроса
				, РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.ОК
				, "Изменение статуса документа"
				, КодВозвратаДиалога.Отмена
			);
		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте	
Процедура ИзменитьСтатусДокументаЗавершение(КодВозврата, ДополнительныеПараметры)	Экспорт

	Если КодВозврата = КодВозвратаДиалога.ОК Тогда
		
		Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Согласован");
		
		Записать(ДополнительныеПараметры.ПараметрыЗаписи);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтредактироватьСтроку(Команда)
	
	Если Не Элементы.Товары.ТекущиеДанные = Неопределено Тогда 
		
		Оповещение = Новый ОписаниеОповещения("ОтредактироватьСтрокуЗавершение", ЭтотОбъект);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура", Элементы.Товары.ТекущиеДанные.Номенклатура);
		ПараметрыФормы.Вставить("Количество", Элементы.Товары.ТекущиеДанные.Количество);
		ПараметрыФормы.Вставить("КоличествоТребование", Элементы.Товары.ТекущиеДанные.КоличествоТребование);
		ПараметрыФормы.Вставить("КлючСвязи", Элементы.Товары.ТекущиеДанные.КлючСвязи);
		
		ОткрытьФорму("Документ.ЗапросДоступностиТоваров.Форма.РедактированиеСтроки", ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтредактироватьСтрокуЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Модифицированность = Истина;
		
		ОтборСтроки = Новый Структура("КлючСвязи", Результат.КлючСвязи);
		НайденнаяСтрока = Объект.Товары.НайтиСтроки(ОтборСтроки); 
		
		ТекстИзменения = НайденнаяСтрока[0].Примечание + Символы.ПС; 
		ТекстИзменения = "Изменено количество: было - " + НайденнаяСтрока[0].Количество
						+ " стало - " + Результат.Количество + Символы.ПС;
		ТекстИзменения = ТекстИзменения + "Причина: " + Результат.Причина;
		
		НайденнаяСтрока[0].Количество = Результат.Количество;
		НайденнаяСтрока[0].Примечание = ТекстИзменения; 
		НайденнаяСтрока[0].СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваров.Изменён"); 
		
		Объект.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Изменён");
		
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ТТННаСервере()
	Успех =	ОбменНПСервер.РегистрацияЕН(Объект.Ссылка);
	Если Успех Тогда
		Сообщить("Создана ЭН");
	Иначе
		Сообщить("В результате создания ТТН возникла ошибка!");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТТН(Команда)
	
	Если Объект.ОператорДоставки =  ПолучитьПеречислениеНП() Тогда   
		ТТНУжеСоздана = ПроверитьНаявностьТТН();  
		Если НЕ ТТНУжеСоздана тогда 
			ПроверкаУспешна = ВыполнитьПроверкуОбязательныхРеквезитов();
			Если ПроверкаУспешна тогда 
				ТТННаСервере();
			КонецЕсли;
		Иначе
			Сообщить("ТТН создана раенне, повторное создание невозможно!");
		КонецЕсли;
	Иначе 
		Сообщить("Создание ТТН возможно только для оператора НОВАЯ ПОЧТА!");
	КонецЕсли;    
	
	
КонецПроцедуры

&НаСервереБезКонтекста	//	LNK 08.02.2019 09:47:25
Функция ПолучитьПеречислениеНП()

	Возврат Перечисления.ОператорыДоставки.НоваяПочта;
   	
КонецФункции

&НаСервереБезКонтекста	//	LNK 08.02.2019 09:47:25
Функция ПроверитьИмяФизЛица(Имя)

	Возврат Справочники.ИменаЛюдей.ИмяКорректно(Имя);
   	
КонецФункции

&НаСервере
Функция ПроверитьНаявностьТТН()

	Возврат ОбменНПСервер.ТТНУжеСоздана(Объект.Ссылка);

КонецФункции  
  


&НаСервере
Функция ПроверитьОбъемныйВес() 
	Отделение = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование,"Отделение");

	Если ЗначениеЗаполнено(Отделение) тогда 
			МаксимальныйВесМеста = 	 ОбщегоНазначения.ПолучитьЗначениеРеквизита(Отделение,"МаксимальныйВесМеста");
			ОбщийМаксимальныйВес = 	 ОбщегоНазначения.ПолучитьЗначениеРеквизита(Отделение,"ОбщийМаксимальныйВес"); 
			МаксимальныйВесОТделения = Макс(МаксимальныйВесМеста,ОбщийМаксимальныйВес);
		Иначе
			Возврат ИСТИНА;
		КонецЕсли;
		ТТН = "";
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЗапросДоступностиТоваровУпаковки.Ширина / 100 * (ЗапросДоступностиТоваровУпаковки.Высота / 100) * (ЗапросДоступностиТоваровУпаковки.Глубина / 100) * 250 КАК Вес
			|ИЗ
			|	Документ.ЗапросДоступностиТоваров.Упаковки КАК ЗапросДоступностиТоваровУпаковки
			|ГДЕ
			|	ЗапросДоступностиТоваровУпаковки.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() тогда 
			Возврат Истина;
		КонецЕсли;
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.Вес > МаксимальныйВесОТделения тогда
				Возврат Истина;
			КонецЕсли;	
		КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаСервере
Функция ПроверитьВГХ() 
Если Объект.Упаковки.Количество() = 0 тогда 
	Возврат Истина; 
Иначе 
	Для каждого строка из  Объект.Упаковки цикл
		Если Строка.Ширина =0 или Строка.Ширина =0  или Строка.Ширина =0  тогда
			Возврат Истина; 
		КонецЕсли;
	КонецЦикла;
КонецЕсли;
Возврат Ложь; 
КонецФункции

 
&НаСервере
Функция ПроверитьАдрес() 
Город = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование,"Город"); 
Улица = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование,"Улица");
Дом = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование,"Дом");
Квартира = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование,"Квартира");
Если Город = "" или Улица = "" или Дом = "" или Квартира = "" или Город =Справочники.ГородаДоставки.ПустаяСсылка() или Улица = Справочники.Улицы.ПустаяСсылка() тогда 
	Возврат Истина;
Иначе
	Возврат Ложь;
КонецЕсли;
КонецФункции



&НаСервере
Функция ВыполнитьПроверкуОбязательныхРеквезитов() 
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) тогда   
		
		ВГХНеЗаполнены = ПроверитьВГХ();
		Если ВГХНеЗаполнены	тогда
			Сообщить("Не заполены ВГХ!");  
	        Возврат Ложь; 			
		КонецЕсли; 
			Если НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование,"ДоставкаНаАдрес") тогда
				Отделение = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование,"Отделение");
				Если Отделение = "" или Отделение = Справочники.Отделения.ПустаяСсылка() или Отделение = Справочники.Почтоматы.ПустаяСсылка() тогда
					Сообщить("Отделение не заполнено!");  
	        		Возврат Ложь; 			
				КонецЕсли;
				ОбъемныйВесПревышен = ПроверитьОбъемныйВес();  
				Если ОбъемныйВесПревышен	тогда
					Сообщить("Превышен максимальный объемный вес для данного отделения!");  
			        Возврат Ложь; 			
				КонецЕсли; 
			Иначе
				АдресНЕЗаполнен = ПроверитьАдрес();
				Если АдресНЕЗаполнен	тогда
					Сообщить("Не заполнен адресные данные!");  
			        Возврат Ложь; 			
				КонецЕсли; 
				
			КонецЕсли;
		Имя = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование,"Имя"); 
		Если ПустаяСтрока(Имя) Тогда
			Сообщить("Не заполнено имя");
	        Возврат Ложь; 
		КонецЕсли;    

		Фамилия = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование,"Фамилия"); 
		Если ПустаяСтрока(Фамилия) тогда
			Сообщить("Не заполнена фамилия!");  
	        Возврат Ложь; 			
		КонецЕсли;    
		
		Телефон = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДокументОснование,"Телефон"); 
		Если СтрДлина(Телефон)<> 12 или Лев(Телефон,3)<>"380"	тогда
			Сообщить("Неверный номер телефона.");  
	        Возврат Ложь; 			
		КонецЕсли;
		
	КонецЕсли;     
	
    Возврат Истина;
КонецФункции

&НаСервере
Функция ПолучитьНомерТТН() 
	ТТН = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭлектроннаяНакладная.Ссылка
		|ИЗ
		|	Документ.ЭлектроннаяНакладная КАК ЭлектроннаяНакладная
		|ГДЕ
		|	ЭлектроннаяНакладная.ДокументОснование = &Регистратор";
	
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТТН = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
    Возврат ТТН;
КонецФункции

&НаСервере
Функция ПолучитьСтатус() 
	Статус = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыТТНСрезПоследних.Период КАК Период,
		|	СтатусыТТНСрезПоследних.СтатусЭН КАК СтатусЭН
		|ИЗ
		|	Документ.ЭлектроннаяНакладная КАК ЭлектроннаяНакладная
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЭН.СрезПоследних(, ) КАК СтатусыТТНСрезПоследних
		|		ПО (СтатусыТТНСрезПоследних.ДокументРегистратор = ЭлектроннаяНакладная.Ссылка)
		|ГДЕ
		|	ЭлектроннаяНакладная.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Статус = ВыборкаДетальныеЗаписи.СтатусЭН;
	КонецЦикла; 
    Возврат Статус;
	
КонецФункции
