#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПроверитьЗаполнениеДокумента(СписокОшибок = "")	Экспорт

	Для каждого Реквизит Из Метаданные().Реквизиты Цикл

		Если Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда

			Если НЕ ЗначениеЗаполнено(ЭтотОбъект[Реквизит.Имя]) Тогда

				СписокОшибок = ?(ПустаяСтрока(СписокОшибок), "", Символы.ПС)
				+ "не указан реквизит «" + Реквизит.Имя + "» (" + Реквизит.Синоним + ")";

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат ПустаяСтрока(СписокОшибок);

КонецФункции // ПроверитьЗаполнениеДокумента()

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)

	Автор = Неопределено;
	УзелСоздания = Неопределено;

	СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Подготовить;

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл

		СтрокаТабличнойЧасти.Количество = 0;
		СтрокаТабличнойЧасти.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Подготовить;
		СтрокаТабличнойЧасти.УникальныйИдентификатор = "";
		СтрокаТабличнойЧасти.Примечание = "";

	КонецЦикла;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	ЗаполнениеОбъектовСобытия.ОбщиеДействияПередЗаписью(ЭтотОбъект, Отказ);

	ДополнительныеСвойства.Вставить("ЭтоНовый"   , ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	ДополнительныеСвойства.Вставить("Проведен"   , ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Проведен"));

	Если ОбменДанными.Загрузка Тогда
		
//		ОбменПроходит = Ложь;
//		
//		Если Ссылка.ВерсияИМ < ВерсияИМ Тогда
//			ОбменПроходит = Истина;
//		ИначеЕсли Ссылка.ВерсияИМ = ВерсияИМ И Ссылка.ВерсияП < ВерсияП Тогда
//			ОбменПроходит = Истина;
//		КонецЕсли;
//
//		Если Не ОбменПроходит Тогда
//			Для Каждого Реквизит из Метаданные().Реквизиты Цикл
//				ЭтотОбъект[Реквизит.Имя] = Ссылка[Реквизит.Имя];
//			КонецЦикла;
//		
//			Для Каждого ТабЧасть из Метаданные().ТабличныеЧасти Цикл
//				ЭтотОбъект[ТабЧасть.Имя].Очистить();
//				Для Каждого Строка из Ссылка[ТабЧасть.Имя] Цикл
//					НоваяСтрока = ЭтотОбъект[ТабЧасть.Имя].Добавить();
//					Для Каждого Реквизит из ТабЧасть.Реквизиты Цикл
//						НоваяСтрока[Реквизит.Имя] = Строка[Реквизит.Имя];
//					КонецЦикла;
//				КонецЦикла;
//			КонецЦикла;
//
//		КонецЕсли;
		
		Возврат;

	КонецЕсли;
	
	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда
		
		ЕстьИзменения = Ложь;
		
		Для Каждого Реквизит из Метаданные().Реквизиты Цикл
			Если Реквизит.Имя = "ВерсияИМ" Тогда
				Продолжить;
			КонецЕсли;
			Если Не ЭтотОбъект[Реквизит.Имя] = Ссылка[Реквизит.Имя] Тогда
				ЕстьИзменения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если Не ЕстьИзменения Тогда
			Для Каждого ТабЧасть из Метаданные().ТабличныеЧасти Цикл
				Для Каждого РТЧ Из ТабЧасть.Реквизиты Цикл
					МаксИндекс = Макс(ЭтотОбъект[ТабЧасть.Имя].Количество(), Ссылка[ТабЧасть.Имя].Количество());
					Для Счетчик = 0 По МаксИндекс - 1 Цикл
						Попытка
							Если Не ТипЗнч(ЭтотОбъект[ТабЧасть.Имя][Счетчик][РТЧ.Имя]) = Тип("ХранилищеЗначения") Тогда
								Если ЭтотОбъект[ТабЧасть.Имя][Счетчик][РТЧ.Имя] <> Ссылка[ТабЧасть.Имя][Счетчик][РТЧ.Имя] Тогда
									ЕстьИзменения = Истина;
									Прервать;
								КонецЕсли;
							КонецЕсли;
						Исключение
							ЕстьИзменения = Истина;
							Прервать;
						КонецПопытки;
					КонецЦикла;
					Если ЕстьИзменения Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ЕстьИзменения Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Не ЕстьИзменения Тогда
			Для Каждого Реквизит Из Метаданные().СтандартныеРеквизиты Цикл
				Если Не ЭтотОбъект[Реквизит.Имя] = Ссылка[Реквизит.Имя] Тогда
					ЕстьИзменения = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;

		Если Не ЕстьИзменения Тогда
			Для Каждого Реквизит Из Метаданные.ОбщиеРеквизиты Цикл
				Попытка
					Если Не ЭтотОбъект[Реквизит.Имя] = Ссылка[Реквизит.Имя] Тогда
						ЕстьИзменения = Истина;
						Прервать;
					КонецЕсли;
				Исключение
					а=1;
				КонецПопытки;
			КонецЦикла; 
		КонецЕсли;

		Если ЕстьИзменения Или ЭтоНовый() Тогда
			ВерсияИМ = ВерсияИМ + 1;
		Иначе
			ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
		КонецЕсли;

		Если ДополнительныеСвойства.Свойство("ОтправлятьВNavision") Тогда
			
			ОтправлятьВNavision = Перечисления.СтатусыЗапросаДоступностиВNavision.ПередатьВNavision;
			
		КонецЕсли;
//		
//		Если Не ЭтоНовый() Тогда
//			
//			ЗаписатьОтправкуВNavisionВРегистр();
//			
//		КонецЕсли;
		
	Иначе
		 
		 ВерсияП = ВерсияП + 1;

	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);

	Для каждого НаборЗаписей Из Движения Цикл

		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);

	КонецЦикла;

	Если СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Согласован Тогда
		
		Для Каждого СтрокаТЧ Из Товары Цикл 
			
			Если СтрокаТЧ.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Отменён 
					Или СтрокаТЧ.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Удалён Тогда 
					
				Продолжить;

			ИначеЕсли СтрокаТЧ.Количество = СтрокаТЧ.КоличествоТребование
					Или Не ПустаяСтрока(СтрокаТЧ.Примечание) Тогда
				
				СтрокаТЧ.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Согласован;
	
			КонецЕсли;   

			Если СтрокаТЧ.Количество = СтрокаТЧ.КоличествоТребование Тогда 
				
				Продолжить;
				
			КонецЕсли;

			Отказ = Истина; 
			СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе;
			
			АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Товары""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
			
			ТекстОшибки = НСтр("ru='Доступное количество к требуемому не совпадает'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "Количество"),
				,
				Отказ
				); 
			
//			Иначе 
				
				//СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ЧастичноСогласован;
				
//			КонецЕсли;   
			
		КонецЦикла;
		
	ИначеЕсли СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.КОтправке
			И Не ОператорДоставки = Перечисления.ОператорыДоставки.ВнутренняяЛогистика Тогда 
		
		Если Упаковки.Количество() = 0 Тогда 
			
			Отказ = Истина; 
			СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Сборка; 
			
			ТекстОшибки = НСтр("ru='Не заполнены ВГХ'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				,
				,
				Отказ
				);
			
			КонецЕсли;   

		
	КонецЕсли;
	
	Если ДокументОснование.Статус = Перечисления.СтатусыЗаказовПокупателей.ЗапросДоступности
			И ДокументОснование.ТипОплаты = Перечисления.ТипОплатыЗаказПокупателя.Наличные
			И Не ОператорДоставки = Перечисления.ОператорыДоставки.ВнутренняяЛогистика Тогда


		Для Каждого СтрокаТовара Из Товары Цикл
			
			СтрокаТовара.Сумма = СтрокаТовара.СуммаВсего;
			
		КонецЦикла;
		
		СуммаДокумента = Товары.Выгрузить(, "Сумма").Итог("Сумма");
		СоставТиповНоменклатуры = Новый Соответствие;

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСправочник.Ссылка КАК Номенклатура,
		|	ТаблицаСправочник.ТипНоменклатуры КАК ТипНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК ТаблицаСправочник
		|ГДЕ
		|	ТаблицаСправочник.Ссылка В(&СписокСсылок)"
		);
		Запрос.УстановитьПараметр("СписокСсылок", Товары.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура"));

		Выборка = Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл

			СоставТиповНоменклатуры.Вставить(Выборка.Номенклатура, Выборка.ТипНоменклатуры);

		КонецЦикла;
		
		СкидкиНаценкиКлиентСервер.ОкруглитьТоварыПоСуммеДокумента(СуммаДокумента, Товары, Истина, СоставТиповНоменклатуры);
		
		СуммаДокумента = Товары.Выгрузить(, "Сумма").Итог("Сумма");
		
	КонецЕсли;

	ЗаписьКомментарияПоДокументу();

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.ЗапросДоступностиТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	Если Не (СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Отменён 
		Или СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтменуОтправитель
		Или СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтменуПолучатель
		Или СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Удалён
		Или СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Закрыт) Тогда
			
		ПроведениеСервер.ОтразитьДвиженияПоРегистру("ЗаказыПокупателей", ДополнительныеСвойства, Движения, Отказ);
		
	КонецЕсли;

	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры
	
Процедура ПриЗаписи(Отказ) 
	
	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда
		
		РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ЗаписьСостояниеСтрокЗаказаПокупателя(Ссылка);
		
		Если ДополнительныеСвойства.Свойство("ЗаписатьСтароеКоличество") Тогда
			
			СтрокаЗаписи = РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ИнициализацияСтрокиЗаписи();

			Для Каждого СтрокаТовара Из Товары Цикл
				
				Если СтрокаТовара.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Отменён
						Или СтрокаТовара.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Удалён Тогда
							
					Продолжить;
						
				КонецЕсли;
				
				СтрокаЗаписи.ЗаказПокупателя = ДокументОснование;   
				СтрокаЗаписи.ЗапросДоступностиТоваров = Ссылка;   
				СтрокаЗаписи.КлючСвязи = СтрокаТовара.КлючСвязи; 
				СтрокаЗаписи.СтароеКоличество = СтрокаТовара.КоличествоТребование; 
				
				РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ЗаписьВРегистрСтроки(СтрокаЗаписи);
				
			КонецЦикла;

		КонецЕсли;
		
		Если ДополнительныеСвойства.Свойство("НеЗаписыватьКлючевыеАтрибуты") = Ложь Тогда
			
			ЗаписьКлючевыхАтребутовЗаказаКлиента(ДокументОснование);  
		
		КонецЕсли; 
	
	КонецЕсли;

	Если ОбменДанными.Загрузка Тогда
		
		Возврат;

	КонецЕсли;
	
	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		ЗаписатьОтправкуВNavisionВРегистр();

		ОтветОтправкиПочты = ЗаказыПокупателейСервер.ОтправкаПочтыПоЗапросуДоступности(ЭтотОбъект);
		
		Если Не ПустаяСтрока(ОтветОтправкиПочты.ТекстОтвета) Тогда
			
			РегистрыСведений.КомментарийИнтернетЗаказа.ЗаписьКомментария(ДокументОснование,
															ПараметрыСеанса.ТекущийПользователь,
															ОтветОтправкиПочты.ТекстОтвета);
			
		КонецЕсли;
		
		СтруктураАтрибутов = РегистрыСведений.КлючевыеАтрибутыЗапросовДоступности.ИнициализацияСтруктурыЗаписиРегистра(Ссылка);

		СтруктураАтрибутов.СтатусЗапроса = СтатусЗапроса;
		СтруктураАтрибутов.ОтправкаПочты = ОтветОтправкиПочты.ПочтаОтправлена;

		РегистрыСведений.КлючевыеАтрибутыЗапросовДоступности.ЗаписьКлючевыхАтребутовЗапросаДоступности(СтруктураАтрибутов);

	КонецЕсли;

	Если СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Отменён
			Или СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Удалён Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЭНТаблица.Ссылка
			|ИЗ
			|	Документ.ЗапросДоступностиТоваров КАК ЗДТаблица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяНакладная КАК ЭНТаблица
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЭН.СрезПоследних КАК СтатусыЭНТаблица
			|			ПО ЭНТаблица.Ссылка = СтатусыЭНТаблица.ДокументРегистратор
			|			И НЕ СтатусыЭНТаблица.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Отменена)
			|		ПО ЗДТаблица.Ссылка = ЭНТаблица.ДокументОснование
			|ГДЕ
			|	ЗДТаблица.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			РегистрыСведений.СтатусыЭН.ОтменитьПосылку(Выборка.Ссылка);
	
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьОтправкуВNavisionВРегистр()
	
	СтруктураАтрибутов = РегистрыСведений.КлючевыеАтрибутыЗапросовДоступности.ИнициализацияСтруктурыЗаписиРегистра(Ссылка);
	СтатусОтправкиЗапроса = РегистрыСведений.КлючевыеАтрибутыЗапросовДоступности.ПолучитьСтатусЗаписиВNavision(Ссылка);

	Если СтатусОтправкиЗапроса = Перечисления.СтатусыЗапросаДоступностиВNavision.ПустаяСсылка()
			Или СтатусОтправкиЗапроса = Перечисления.СтатусыЗапросаДоступностиВNavision.ПередатьВNavision Тогда

		Если СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ЧекВКЦ
				Или ДополнительныеСвойства.Свойство("ПроверкаВозможностиЗакрытияВNavision") Тогда
					
			СтруктураАтрибутов.ОправленоВNavision = Перечисления.СтатусыЗапросаДоступностиВNavision.ПроверкаВозможностиЗакрытияВNavision;

//		ИначеЕсли ДополнительныеСвойства.Свойство("ОтправлятьВNavision")
//				Или (СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ВыданДоставке
//					И Не ТипДоставки = Перечисления.ТипДоставкиЗаказПокупателя.Самовывоз) Тогда
		ИначеЕсли ДополнительныеСвойства.Свойство("ОтправлятьВNavision") Тогда
						
			СтруктураАтрибутов.ОправленоВNavision = Перечисления.СтатусыЗапросаДоступностиВNavision.ПередатьВNavision;
			ПланыОбмена.ЗарегистрироватьИзменения(ВнешниеИсточникиПовтИсп.СписокУзловNavision(), ЭтотОбъект);
			
		Иначе 
			СтруктураАтрибутов.ОправленоВNavision = Перечисления.СтатусыЗапросаДоступностиВNavision.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

	РегистрыСведений.КлючевыеАтрибутыЗапросовДоступности.ЗаписьКлючевыхАтребутовЗапросаДоступности(СтруктураАтрибутов);

КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

	Если ОбщегоНазначенияРТ.НужноЗаполнитьСписокРегистровДляКонтроля(ДополнительныеСвойства.РежимЗаписи, Дата) Тогда
		
	//	Массив.Добавить(Движения.ЗаказыПокупателей);
		
	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры
	
Процедура ЗаписьКлючевыхАтребутовЗаказаКлиента(ЗаказПокупателя) 
	
	РегистрыСведений.СостояниеЗаказаПокупателя.ЗаписьСостояния(ЗаказПокупателя);
	
	НовоеСостояние = Документы.ЗаказПокупателя.ПолучитьСостояниеЗаказаПокупателя(ЗаказПокупателя);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Период КАК Период,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ЗаказПокупателя КАК ЗаказПокупателя,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ВнутреннееИзменение КАК ВнутреннееИзменение,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ДатаЗаказаНаСайте КАК ДатаЗаказаНаСайте,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ДатаИзмененияСтатуса КАК ДатаИзмененияСтатуса,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ДатаПередачи КАК ДатаПередачи,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ДатаРезервированияЗаказа КАК ДатаРезервированияЗаказа,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Контрагент КАК Контрагент,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.КоррекцияНачисленийПоПродаже КАК КоррекцияНачисленийПоПродаже,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Магазин КАК Магазин,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.МагазинПолучатель КАК МагазинПолучатель,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.НомерЗаказаНаСайте КАК НомерЗаказаНаСайте,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.НомерЗаказаОсновной КАК НомерЗаказаОсновной,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Организация КАК Организация,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Проведен КАК Проведен,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Статус КАК Статус,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.СтатусИМ КАК СтатусИМ,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.СтатусОплаты КАК СтатусОплаты,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.СуммаДокумента КАК СуммаДокумента,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.СуммаДоставки КАК СуммаДоставки,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.СуммаДоставкиОператор КАК СуммаДоставкиОператор,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.СуммаДоставкиОплачена КАК СуммаДоставкиОплачена,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.СуммаОплаты КАК СуммаОплаты,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ТипДоставки КАК ТипДоставки,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ТипОплаты КАК ТипОплаты,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Состояние КАК Состояние,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ДатаИзменения КАК ДатаИзменения,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Примечание КАК Примечание,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Автор КАК Автор,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.УзелСоздания КАК УзелСоздания,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.АвтоВыполнение
		|ИЗ
		|	РегистрСведений.КлючевыеАтрибутыЗаказовПокупателей.СрезПоследних КАК КлючевыеАтрибутыЗаказовПокупателейСрезПоследних
		|ГДЕ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ЗаказПокупателя = &ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Если НовоеСостояние.Состояние = Выборка.Состояние Тогда 
			
			Продолжить;
			
		КонецЕсли;  
		
		НаборЗаписей = РегистрыСведений.КлючевыеАтрибутыЗаказовПокупателей.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Отбор.Период.Установить(ТекущаяДатаСеанса());
		НаборЗаписей.Отбор.ЗаказПокупателя.Установить(ЗаказПокупателя);

	//	LNK 24.05.2023 06:43:55
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПроверкаРезервовПолная", Новый Структура("Проверить", Истина));

		ЗаписьНабора = НаборЗаписей.Добавить();

		ЗаписьНабора.Период			 = НаборЗаписей.Отбор.Период.Значение;
		ЗаписьНабора.ЗаказПокупателя = НаборЗаписей.Отбор.ЗаказПокупателя.Значение;
		
		ЗаписьНабора.ДатаИзменения	 = ТекущаяДата();

		Для каждого Ресурс Из Метаданные.РегистрыСведений.КлючевыеАтрибутыЗаказовПокупателей.Ресурсы Цикл

			Если Ресурс.ЗаполнятьИзДанныхЗаполнения Тогда 
				
				Если Ресурс.Имя = "Состояние" Тогда
					
					ЗаписьНабора[Ресурс.Имя] = НовоеСостояние.Состояние;
					
				Иначе
					
					ЗаписьНабора[Ресурс.Имя] = Выборка[Ресурс.Имя];
				КонецЕсли; 
				
			КонецЕсли;

		КонецЦикла;
		
		ЗаписьНабора.ВнутреннееИзменение  = Истина; 
		
		НаборЗаписей.Записать();

	КонецЦикла;  
	
КонецПроцедуры

Процедура ЗаписьКомментарияПоДокументу()
	
	ТекстКомментария= "";

	Если ЭтоНовый() Тогда // Объект еще не был записан   

		ТекстКомментария = "Создание нового ЗД";

	Иначе

		ТекстДляЗаписи = "Изменение шапки документа:" + Символы.ПС;
		ШапкаИзменена = Ложь;
		Для Каждого Реквизит Из Ссылка.Метаданные().Реквизиты Цикл
			
			ТекстИзменения = ТекстИзменениеРеквизита(ЭтотОбъект, Реквизит.Имя); 
			Если Не ПустаяСтрока(ТекстИзменения) Тогда 
				ШапкаИзменена = Истина;
				ТекстДляЗаписи = ТекстДляЗаписи + ТекстИзменения + "----------------------" + Символы.ПС; 
			КонецЕсли;
		КонецЦикла;  
		
		Для Каждого Реквизит Из Ссылка.Метаданные().СтандартныеРеквизиты Цикл
			ТекстИзменения = ТекстИзменениеРеквизита(ЭтотОбъект, Реквизит.Имя); 
			Если Не ПустаяСтрока(ТекстИзменения) Тогда 
				ШапкаИзменена = Истина;
				ТекстДляЗаписи = ТекстДляЗаписи + ТекстИзменения + "----------------------" + Символы.ПС; 
			КонецЕсли;
		КонецЦикла; 
		
		Если Не ШапкаИзменена Тогда   
			ТекстДляЗаписи = "";
		КонецЕсли; 
		
		ТекстДляЗаписиТЧ = "Изменение ТЧ документа:" + Символы.ПС;
		ТабЧастьИзменена = Ложь;
		
		Для каждого ТабЧасть из Метаданные().ТабличныеЧасти Цикл 
			Если ЭтотОбъект[ТабЧасть.Имя].Количество()> 0 Тогда
				
				Для Каждого РТЧ Из ТабЧасть.Реквизиты Цикл
					ТекстИзменения = ТекстИзменениеРеквизитаТЧ(ЭтотОбъект, РТЧ.Имя, ТабЧасть.Имя); 
					Если Не ПустаяСтрока(ТекстИзменения) Тогда 
						ТабЧастьИзменена = Истина;
						ТекстДляЗаписиТЧ = ТекстДляЗаписиТЧ + ТекстИзменения + "----------------------" + Символы.ПС; 
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	
		Если ТабЧастьИзменена Тогда   
			ТекстДляЗаписи = ТекстДляЗаписи + ТекстДляЗаписиТЧ;
		КонецЕсли; 
		
        Если ШапкаИзменена Или ТабЧастьИзменена Тогда 

			ТекстКомментария = ТекстДляЗаписи;

		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстКомментария) Тогда

		ТекстКомментария = "Просто запись";

	КонецЕсли;
	
	НоваяСтрока = ПричинаИзменений.Добавить();
	НоваяСтрока.ДатаИзменения = ТекущаяДатаСеанса();
	НоваяСтрока.Причина = "Пользователь: " + ПараметрыСеанса.ТекущийПользователь + Символы.ПС
							+ ТекстКомментария;

КонецПроцедуры 


Функция ТекстИзменениеРеквизита(Данные, ИмяРеквизита)
	Результат = "";
	Если Данные[ИмяРеквизита] <> Данные.Ссылка[ИмяРеквизита] Тогда 
		Результат = "Имя реквизита: " + ИмяРеквизита + Символы.ПС;
		Результат = Результат + "СтароеЗначение: " + Данные.Ссылка[ИмяРеквизита] + Символы.ПС;
		Результат = Результат + "НовоеЗначение: " + Данные[ИмяРеквизита] + Символы.ПС;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ТекстИзменениеРеквизитаТЧ(Данные, ИмяРеквизита, ИмяТЧ)
	Результат = "";
	
	МаксИндекс = Макс(Данные[ИмяТЧ].Количество(), Данные.Ссылка[ИмяТЧ].Количество());
	
	Для Счетчик = 0 По МаксИндекс - 1 Цикл
		
		Попытка

			Если ТипЗнч(Данные[ИмяТЧ][Счетчик][ИмяРеквизита]) = Тип("ХранилищеЗначения") Тогда
				
				ТекФлагИзменения = Ложь;
				
			Иначе
				
				ТекФлагИзменения = Данные[ИмяТЧ][Счетчик][ИмяРеквизита] <> Данные.Ссылка[ИмяТЧ][Счетчик][ИмяРеквизита];
				ТекСтароеЗначение = Данные.Ссылка[ИмяТЧ][Счетчик][ИмяРеквизита];
				ТекНовоеЗначение = Данные[ИмяТЧ][Счетчик][ИмяРеквизита];
				НомерСтроки		= СокрЛП(Данные[ИмяТЧ][Счетчик].НомерСтроки);
				
			КонецЕсли;

		Исключение
			
			ТекФлагИзменения = Истина;
			
			Попытка
				ТекСтароеЗначение = Данные.Ссылка[ИмяТЧ][Счетчик][ИмяРеквизита];
			Исключение
				ТекСтароеЗначение = "";
			КонецПопытки;
			
			Попытка
				ТекНовоеЗначение = Данные[ИмяТЧ][Счетчик][ИмяРеквизита];
			Исключение
				ТекНовоеЗначение = "";
			КонецПопытки;
			
			Попытка
				НомерСтроки		= СокрЛП(Данные[ИмяТЧ][Счетчик].НомерСтроки);
			Исключение
				НомерСтроки = Счетчик + 1;
			КонецПопытки;
			
		КонецПопытки;
		
		Если ТекФлагИзменения Тогда
			Результат = Результат + "Имя реквизита: " + ИмяТЧ + ":" + ИмяРеквизита + " (" + НомерСтроки + ")" + Символы.ПС;
			Результат = Результат + "СтароеЗначение: " + ТекСтароеЗначение + Символы.ПС;
			Результат = Результат + "НовоеЗначение: " + ТекНовоеЗначение + Символы.ПС;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Результат;
КонецФункции


#КонецОбласти

#КонецЕсли
