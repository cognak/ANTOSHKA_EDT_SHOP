#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//	LNK 09.04.2019 09:27:15
Функция ПроверитьЗаполнениеДокумента(СписокОшибок = "")	Экспорт

	Для каждого Реквизит Из Метаданные().Реквизиты Цикл

		Если Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда

			Если НЕ ЗначениеЗаполнено(ЭтотОбъект[Реквизит.Имя]) Тогда

				СписокОшибок = ?(ПустаяСтрока(СписокОшибок), "", Символы.ПС)
				+ "не указан реквизит «" + Реквизит.Имя + "» (" + Реквизит.Синоним + ")";

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат ПустаяСтрока(СписокОшибок);

КонецФункции // ПроверитьЗаполнениеДокумента()

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)

	Автор = Неопределено;
	УзелСоздания = Неопределено;

	СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Подготовить;

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл

		СтрокаТабличнойЧасти.Количество = 0;
		СтрокаТабличнойЧасти.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Подготовить;
		СтрокаТабличнойЧасти.УникальныйИдентификатор = "";
		СтрокаТабличнойЧасти.Примечание = "";

	КонецЦикла;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	ЗаполнениеОбъектовСобытия.ОбщиеДействияПередЗаписью(ЭтотОбъект, Отказ);

	ДополнительныеСвойства.Вставить("ЭтоНовый"   , ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	ДополнительныеСвойства.Вставить("Проведен"   , ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Проведен"));

	Если ОбменДанными.Загрузка Тогда
		
		ОбменПроходит = Ложь;
		
		Если Ссылка.ВерсияИМ < ВерсияИМ Тогда
			ОбменПроходит = Истина;
		ИначеЕсли Ссылка.ВерсияИМ = ВерсияИМ И Ссылка.ВерсияП < ВерсияП Тогда
			ОбменПроходит = Истина;
		КонецЕсли;

		Если Не ОбменПроходит Тогда
			Для Каждого Реквизит из Метаданные().Реквизиты Цикл
				ЭтотОбъект[Реквизит.Имя] = Ссылка[Реквизит.Имя];
			КонецЦикла;
		
			Для Каждого ТабЧасть из Метаданные().ТабличныеЧасти Цикл
				ЭтотОбъект[ТабЧасть.Имя].Очистить();
				Для Каждого Строка из Ссылка[ТабЧасть.Имя] Цикл
					НоваяСтрока = ЭтотОбъект[ТабЧасть.Имя].Добавить();
					Для Каждого Реквизит из ТабЧасть.Реквизиты Цикл
						НоваяСтрока[Реквизит.Имя] = Строка[Реквизит.Имя];
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Возврат;

	КонецЕсли; 
	
	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда
		
		ВерсияИМ = ВерсияИМ + 1;
		
	Иначе
		 
		 ВерсияП = ВерсияП + 1;

	КонецЕсли;
	
	Если СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Согласован Тогда
		
		Для Каждого СтрокаТЧ Из Товары Цикл 
			
			Если СтрокаТЧ.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Отменён 
					Или СтрокаТЧ.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваров.Удалён Тогда 
					
				Продолжить;
				
			КонецЕсли;
			
			Если СтрокаТЧ.Количество = СтрокаТЧ.КоличествоТребование Тогда 
				
				Продолжить;
				
			КонецЕсли;
			
//			Если ПустаяСтрока(СтрокаТЧ.Примечание) Тогда 
//				
//				Отказ = Истина; 
//				СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе;
//				
//				АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Товары""'");
//				АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
//				
//				ТекстОшибки = НСтр("ru='Необходимо указать причину несоответствия доступного количества к требуемому'");
//				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//					ТекстОшибки + АдресОшибки,
//					ЭтотОбъект,
//					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "Номенклатура"),
//					,
//					Отказ
//					); 
//				
//			Иначе 
				
				СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ЧастичноСогласован;
				
//			КонецЕсли;   
			
		КонецЦикла;
		
	ИначеЕсли СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.КОтправке
			И Не ОператорДоставки = Перечисления.ОператорыДоставки.ВнутренняяЛогистика Тогда 
		
		Если Упаковки.Количество() = 0 Тогда 
			
			Отказ = Истина; 
			СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Сборка; 
			
			ТекстОшибки = НСтр("ru='Не заполнены ВГХ'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			,
			,
			Отказ
			);
			
			КонецЕсли;   

		
	КонецЕсли;
	
	Если ДокументОснование.Статус = Перечисления.СтатусыЗаказовПокупателей.ЗапросДоступности
			И ДокументОснование.ТипОплаты = Перечисления.ТипОплатыЗаказПокупателя.Наличные
			И Не ОператорДоставки = Перечисления.ОператорыДоставки.ВнутренняяЛогистика Тогда


		Для Каждого СтрокаТовара Из Товары Цикл
			
			СтрокаТовара.Сумма = СтрокаТовара.СуммаВсего;
			
		КонецЦикла;
		
		СуммаДокумента = Товары.Выгрузить(, "Сумма").Итог("Сумма");
		СоставТиповНоменклатуры = Новый Соответствие;

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСправочник.Ссылка КАК Номенклатура,
		|	ТаблицаСправочник.ТипНоменклатуры КАК ТипНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК ТаблицаСправочник
		|ГДЕ
		|	ТаблицаСправочник.Ссылка В(&СписокСсылок)"
		);
		Запрос.УстановитьПараметр("СписокСсылок", Товары.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура"));

		Выборка = Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл

			СоставТиповНоменклатуры.Вставить(Выборка.Номенклатура, Выборка.ТипНоменклатуры);

		КонецЦикла;
		
		СкидкиНаценкиКлиентСервер.ОкруглитьТоварыПоСуммеДокумента(СуммаДокумента, Товары, Истина, СоставТиповНоменклатуры);
		
		СуммаДокумента = Товары.Выгрузить(, "Сумма").Итог("Сумма");
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.ЗапросДоступностиТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	//ПроведениеСервер.ОтразитьДвиженияПоРегистру("ЗаказыПокупателей", ДополнительныеСвойства, Движения, Отказ); 

	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры
	
Процедура ПриЗаписи(Отказ) 
	
	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел()
			И ДополнительныеСвойства.Свойство("НеЗаписыватьКлючевыеАтрибуты") = Ложь Тогда 
		
		ЗаписьКлючевыхАтребутовЗаказаКлиента(Ссылка.ДокументОснование);  
		
	КонецЕсли; 
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;

	КонецЕсли;
	
	РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ЗаписьСостояниеСтрокЗаказаПокупателя(Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

	Если ОбщегоНазначенияРТ.НужноЗаполнитьСписокРегистровДляКонтроля(ДополнительныеСвойства.РежимЗаписи, Дата) Тогда
		
	//	Массив.Добавить(Движения.ЗаказыПокупателей);
		
	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры
	
Процедура ЗаписьКлючевыхАтребутовЗаказаКлиента(ЗаказПокупателя) 
	
	НовоеСостояние = Документы.ЗаказПокупателя.ПолучитьСостояниеЗаказаПокупателя(ЗаказПокупателя);

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Период КАК Период,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ЗаказПокупателя КАК ЗаказПокупателя,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ВнутреннееИзменение КАК ВнутреннееИзменение,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ДатаЗаказаНаСайте КАК ДатаЗаказаНаСайте,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ДатаИзмененияСтатуса КАК ДатаИзмененияСтатуса,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ДатаПередачи КАК ДатаПередачи,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ДатаРезервированияЗаказа КАК ДатаРезервированияЗаказа,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Контрагент КАК Контрагент,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.КоррекцияНачисленийПоПродаже КАК КоррекцияНачисленийПоПродаже,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Магазин КАК Магазин,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.МагазинПолучатель КАК МагазинПолучатель,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.НомерЗаказаНаСайте КАК НомерЗаказаНаСайте,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.НомерЗаказаОсновной КАК НомерЗаказаОсновной,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Организация КАК Организация,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Проведен КАК Проведен,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Статус КАК Статус,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.СтатусИМ КАК СтатусИМ,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.СтатусОплаты КАК СтатусОплаты,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.СуммаДокумента КАК СуммаДокумента,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.СуммаДоставки КАК СуммаДоставки,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.СуммаДоставкиОператор КАК СуммаДоставкиОператор,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.СуммаДоставкиОплачена КАК СуммаДоставкиОплачена,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.СуммаОплаты КАК СуммаОплаты,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ТипДоставки КАК ТипДоставки,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ТипОплаты КАК ТипОплаты,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Состояние КАК Состояние,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ДатаИзменения КАК ДатаИзменения,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Примечание КАК Примечание,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.Автор КАК Автор,
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.УзелСоздания КАК УзелСоздания
		|ИЗ
		|	РегистрСведений.КлючевыеАтрибутыЗаказовПокупателей.СрезПоследних КАК КлючевыеАтрибутыЗаказовПокупателейСрезПоследних
		|ГДЕ
		|	КлючевыеАтрибутыЗаказовПокупателейСрезПоследних.ЗаказПокупателя = &ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Если НовоеСостояние.Состояние = Выборка.Состояние Тогда 
			
			Продолжить;
			
		КонецЕсли;  
		
		НаборЗаписей = РегистрыСведений.КлючевыеАтрибутыЗаказовПокупателей.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Отбор.Период.Установить(ТекущаяДата());
		НаборЗаписей.Отбор.ЗаказПокупателя.Установить(ЗаказПокупателя);

		ЗаписьНабора = НаборЗаписей.Добавить();

		ЗаписьНабора.Период			 = НаборЗаписей.Отбор.Период.Значение;
		ЗаписьНабора.ЗаказПокупателя = НаборЗаписей.Отбор.ЗаказПокупателя.Значение;
		
		ЗаписьНабора.ДатаИзменения	 = ТекущаяДата();

		Для каждого Ресурс Из Метаданные.РегистрыСведений.КлючевыеАтрибутыЗаказовПокупателей.Ресурсы Цикл

			Если Ресурс.ЗаполнятьИзДанныхЗаполнения Тогда 
				
				Если Ресурс.Имя = "Состояние" Тогда
					
					ЗаписьНабора[Ресурс.Имя] = НовоеСостояние.Состояние;
					
				Иначе
					
					ЗаписьНабора[Ресурс.Имя] = Выборка[Ресурс.Имя];
				КонецЕсли; 
				
			КонецЕсли;

		КонецЦикла;
		
		ЗаписьНабора.ВнутреннееИзменение  = Истина; 
		
		НаборЗаписей.Записать();
	КонецЦикла;  
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
