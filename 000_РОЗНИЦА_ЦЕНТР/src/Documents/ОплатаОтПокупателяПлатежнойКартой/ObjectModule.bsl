
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
		
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваров")
		ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		
		ЗаполнитьПоРеализацияТоваровВозвратТоваровОтПокупателя(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("ЗаполнениеВозвратТоваровОтРозничногоПокупателя") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
			СтрокаПлатежа = РасшифровкаПлатежа.Добавить();
			СтрокаПлатежа.ДокументРасчетовСКонтрагентом = ДанныеЗаполнения.ДокументРасчетовСКонтрагентом;
			СтрокаПлатежа.СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
			СтрокаПлатежа.Сумма = ДанныеЗаполнения.СуммаДокумента;
		Иначе
			Если ДанныеЗаполнения.Свойство("ЭквайринговыйТерминал", ЭквайринговыйТерминал) И ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
				СтруктураРеквизитов = Справочники.ЭквайринговыеТерминалы.РеквизитыЭквайринговогоТерминала(ЭквайринговыйТерминал);
				ДанныеЗаполнения.Вставить("Организация", СтруктураРеквизитов.Организация);
				ДанныеЗаполнения.Вставить("ДоговорЭквайринга", СтруктураРеквизитов.ДоговорЭквайринга);
				ДанныеЗаполнения.Вставить("Касса", СтруктураРеквизитов.Касса);
				ДанныеЗаполнения.Вставить("Эквайрер", СтруктураРеквизитов.ДоговорЭквайринга.Эквайрер);
				ДанныеЗаполнения.Вставить("Магазин", ЭквайринговыйТерминал.Магазин);
			Иначе
				ДанныеЗаполнения.Свойство("Организация", Организация);
				Магазин = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущийМагазин",);
				ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ЭквайринговыйТерминалПоУмолчанию(Неопределено, Организация, Магазин);
				Если ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
					СтруктураРеквизитов = Справочники.ЭквайринговыеТерминалы.РеквизитыЭквайринговогоТерминала(ЭквайринговыйТерминал);
					ДанныеЗаполнения.Вставить("ДоговорЭквайринга", СтруктураРеквизитов.ДоговорЭквайринга);
					ДанныеЗаполнения.Вставить("Касса", СтруктураРеквизитов.Касса);
					ДанныеЗаполнения.Вставить("Эквайрер", СтруктураРеквизитов.Эквайрер);
					ДанныеЗаполнения.Вставить("Магазин", СтруктураРеквизитов.Магазин);
					ДанныеЗаполнения.Вставить("Организация", СтруктураРеквизитов.Организация);
				КонецЕсли;
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДоговорЭквайринга") И ЗначениеЗаполнено(ДанныеЗаполнения.ДоговорЭквайринга) Тогда
				СтруктураПоУмолчанию = Справочники.ДоговорыЭквайринга.ВидОплатыПоУмолчанию(ДанныеЗаполнения.ДоговорЭквайринга);
				Если ЗначениеЗаполнено(СтруктураПоУмолчанию.ВидОплаты) Тогда
					ДанныеЗаполнения.Вставить("ВидОплаты", СтруктураПоУмолчанию.ВидОплаты);
					ДанныеЗаполнения.Вставить("ПроцентТорговойУступки", ЭквайрингСервер.ПолучитьПроцентТорговойУступкиПлатежнаяКарта(ДанныеЗаполнения.ДоговорЭквайринга, СтруктураПоУмолчанию.ВидОплаты));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ИнициализироватьДокумент(ДанныеЗаполнения);
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, Режим);
	
	// Инициализация данных документа
	Документы.ОплатаОтПокупателяПлатежнойКартой.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Движения по денежным средствам.
	ДенежныеСредстваСервер.ОтразитьПродажиПоПлатежнымКартам(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

// В обработке события "ОбработкаПроверкиЗаполнения" выполняются следующие действия:
// - Устанавливает проверку заполнения реквизитов формы и табличной части "Расшифровка платежа"
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ОплатаОтПокупателяПлатежнойКартой.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ОбщегоНазначенияРТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов
	);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	ДенежныеСредстваСерверПривилегированный.ПроверитьЗаполнениеРасшифровкиПлатежа(
		ЭтотОбъект,
		СуммаДокумента,
		ХозяйственнаяОперация,
		Отказ
	);
	
	Если ВидОплаты.ТипОплаты <> Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
		Текст = НСтр("ru = 'В документе выбран вид оплаты неверного типа!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			"ВидОплаты",
			,
			Отказ
		);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
//	LNK 16.02.2017 14:33:05
	ЗаполнениеОбъектовСобытия.ОбщиеДействияПередЗаписью(ЭтотОбъект, Отказ);
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
//	LNK 27.09.2016 16:13:29
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() И НЕ ЭтоНовый() Тогда

		Если ВнешниеИсточникиСобытия.ПередачаNavision(Ссылка) Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ «" + СокрЛП(Ссылка) + "» учтён в КСУ Navision! Изменения запрещены. Отказано.", Ссылка,,, Отказ);
			Возврат;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

//	LNK 27.09.2016 16:13:53
Процедура ПриЗаписи(Отказ)

//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "РегистрацияПередачиВNavision", Ложь) Тогда

		ВнешниеИсточникиСобытия.УстановитьПереданоNavision(Ссылка
			, ОбщегоНазначенияРТСервер.ПолучитьМагазиныПоОбъекту(Ссылка), Перечисления.ВидыПередачиNavision.ПереданВNavision,,,, Истина);

	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	НомерЧекаККМ = 0;
	ОплатаВыполнена = Ложь;
	ИнициализироватьДокумент();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

Процедура ЗаполнитьПоРеализацияТоваровВозвратТоваровОтПокупателя(Знач ДокументОснование, ДанныеЗаполнения)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДокументОснования.Ссылка                                КАК ДокументОснование,
	|	МАКСИМУМ(ДокументОснования.Контрагент)                  КАК Контрагент,
	|	МАКСИМУМ(ДокументОснования.Организация)                 КАК Организация,
	|	МАКСИМУМ(ДокументОснования.Магазин)                     КАК Магазин,
	|	МАКСИМУМ(ДокументОснования.ЦенаВключаетНДС)             КАК ЦенаВключаетНДС,
	|	СУММА(ЕСТЬNULL(ТоварыДокументОснования.Сумма, ДокументОснования.СуммаДокумента)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ТоварыДокументОснования.СуммаНДС, 0.00)) КАК СуммаНДС
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.РеализацияТоваров КАК ДокументОснования
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.РеализацияТоваров.Товары КАК ТоварыДокументОснования
	|ПО
	|	ТоварыДокументОснования.Ссылка = &Ссылка
	|ГДЕ
	|	ДокументОснования.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ДокументОснования.Ссылка
	|;
	|ВЫБРАТЬ
	|	ДанныеДокумента.ДокументОснование            КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент                   КАК Контрагент,
	|	ДанныеДокумента.Организация                  КАК Организация,
	|	ДанныеДокумента.Магазин                      КАК Магазин,
	|	ДанныеДокумента.ЦенаВключаетНДС              КАК ЦенаВключаетНДС,
	|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	ВЫБОР	КОГДА ДанныеДокумента.ЦенаВключаетНДС
	|			ТОГДА ДанныеДокумента.Сумма
	|			ИНАЧЕ ДанныеДокумента.Сумма + ДанныеДокумента.СуммаНДС
	|	КОНЕЦ                                        КАК СуммаДокумента,
	|	ЕСТЬNULL(Контрагенты.Наименование, "")       КАК Наименование,
	|	ЕСТЬNULL(Контрагенты.НаименованиеПолное, "") КАК НаименованиеПолное
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.Контрагенты КАК Контрагенты
	|ПО
	|	Контрагенты.Ссылка = ДанныеДокумента.Контрагент
	|";
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.РеализацияТоваров", "Документ.ВозвратТоваровОтПокупателя");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.РеализацияТоваров.Товары", "Документ.ВозвратТоваровОтПокупателя.Товары");
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	Иначе
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	КонецЕсли;
	РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
	ДанныеЗаполнения = Новый Структура();
	
	Для Каждого РеквизитЗаполнения Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(РеквизитЗаполнения.Имя);
	КонецЦикла;
	ВыборкаДанныхЗаполнения = РезультатЗапроса.Выбрать();
	ВыборкаДанныхЗаполнения.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаДанныхЗаполнения);
	ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(, ДанныеЗаполнения);
	Если ЗначениеЗаполнено(ДанныеЗаполнения.СуммаДокумента) Тогда
		ДанныеЗаполнения.Вставить("СуммаТорговойУступки", ДанныеЗаполнения.СуммаДокумента * ДанныеЗаполнения.ПроцентТорговойУступки / 100.00);
	КонецЕсли;
	
	СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация);
	
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	СтрокаПлатеж.ДокументРасчетовСКонтрагентом = ДокументОснование;
	СтрокаПлатеж.Сумма                         = ВыборкаДанныхЗаполнения.СуммаДокумента;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры