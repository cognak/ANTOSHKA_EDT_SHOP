&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);

//	LNK 27.09.2016 16:09:14
//	NAV:БлокировкаДанныхУчестьДокументВNavision
//	Обработчик подсистемы "NAV"
	ВнешниеИсточникиСобытия.ДобавитьКнопкуУчестьВNavision(ЭтотОбъект, ЭтотОбъект.КоманднаяПанель);
//	Оформление элементов в обработчике подсистемы "NAV"
	ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект);
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,СостояниеДокумента,РазрешеноПроведение);
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УправлениеЭлементамиФормы();
		НомерЧекаККМ = 0;
	КонецЕсли;
	
	ПолучитьСсылкиНаОборудование();
	
	НастроитьФормуПоДополнительнымПравам();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		Элементы.ОплатитьКартой.Заголовок = НСтр("ru = 'Вернуть на карту'"); 
	Иначе
		Элементы.ОплатитьКартой.Заголовок = НСтр("ru = 'Оплатить картой'"); 
	КонецЕсли;

	УправлениеДоступомРТ.ПриСозданииФормыНаСервере(ЭтотОбъект);	//	LNK 17.10.2019 14:30:01
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьДоступностьТерминала();
КонецПроцедуры

//	LNK 27.09.2016 16:09:50
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ИмяСобытия = "РегистрацияПередачиВNavision" Тогда

		ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	УправлениеЭлементамиФормы();
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = ОсновнойОтветственный();
	КонецЕсли;
	
КонецПроцедуры

//	LNK 27.09.2016 16:11:10
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

//	LNK 27.09.2016 16:11:16
//	NAV:БлокировкаДанныхУчестьДокументВNavision
//	Управление блокировкой "УчётВNavision" подсистемы "NAV" (реквизит "РегистрацияПередачиВNavision" создается в обработчике ПриСозданииНаСервере)
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РегистрацияПередачиВNavision", ЭтотОбъект["РегистрацияПередачиВNavision"]);

КонецПроцедуры

//	LNK 27.09.2016 16:11:28
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

//	LNK 27.09.2016 16:11:37
//	NAV:БлокировкаДанныхУчестьДокументВNavision
//	Оформление элементов в обработчике подсистемы "NAV"
	ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
//	LNK 27.09.2016 16:12:10
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	ВнешниеИсточникиКлиент.ВыполнитьОповещениеПередачиДокументаВNavision(Объект.Ссылка, Объект.Ссылка, ЭтотОбъект["РегистрацияПередачиВNavision"]);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидОплатыПриИзменении(Элемент)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДоговорЭквайринга", Объект.ДоговорЭквайринга);
	СтруктураПараметров.Вставить("ВидОплаты", Объект.ВидОплаты);
	ВидОплатыПриИзмененииСервер(СтруктураПараметров);
	Объект.ПроцентТорговойУступки = СтруктураПараметров.ПроцентТорговойУступки;
	ПересчитатьТорговуюУступку();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ФинансыКлиент.ПересчетСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента);
	ПересчитатьТорговуюУступку();
КонецПроцедуры

&НаКлиенте
Процедура ПроцентТорговойУступкиПриИзменении(Элемент)
	
	ПересчитатьТорговуюУступку();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияМногострочногоТекста(Элемент.ТекстРедактирования , Объект.Комментарий, Модифицированность, "Комментарий:");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Перем ФормаВыбора;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Владелец", Элемент);
	СтруктураПараметров.Вставить("ПравоеЗначение", ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта"));
	СтруктураПараметров.Вставить("ИмяПоляОтбораЛевоеЗначение", "ТипОплаты");
	СтруктураПараметров.Вставить("ДоговорЭквайринга", Объект.ДоговорЭквайринга);
	ОтборыСписковКлиентСервер.НачалоВыбораВидаОплатыЧекаККМ(СтруктураПараметров, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении(Элемент)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ВидОплаты", Объект.ВидОплаты);
	
	ЭквайринговыйТерминалПриИзмененииНаСервере(СтруктураПараметров);
	ЭквайринговыйТерминалПриИзмененииКлиент(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ПроцентТорговойУступки", Объект.ПроцентТорговойУступки);
		МагазинПриИзмененииСервер(СтруктураПараметров);
		ЭквайринговыйТерминалПриИзмененииКлиент(СтруктураПараметров);
	КонецЕсли;
	
	УстановитьДоступностьТерминала();
	
КонецПроцедуры

//	NAV:БлокировкаДанныхУчестьДокументВNavision
#Область ОбслуживаниеКнопкиУчестьДокументВNavision

//	LNK 08.09.2016 14:41:31
//	Обработчик события кнопки подсистемы "NAV"
&НаКлиенте
Процедура РегистрацияПередачиВNavisionНажатие(Элемент)

	ВнешниеИсточникиКлиент.ПодтвердитьРешениеУчетВNavision(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте	//	LNK 18.06.2023 06:12:51
Процедура РегистрацияПередачиВNavisionПовторнаяНажатие(Элемент)

	ВнешниеИсточникиКлиент.ПодтвердитьПовторнуюВыгрузкуВNavision(ЭтотОбъект);

КонецПроцедуры

//	LNK 08.09.2016 14:41:31
//	Обработчик события кнопки подсистемы "NAV"
&НаСервере
Процедура РегистрацияПередачиВNavisionНаСервере()	Экспорт

//	Оформление элементов в обработчике подсистемы "NAV"
	ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект, Истина);

КонецПроцедуры

//	LNK 23.10.2017 14:18:28
&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник)

//	LNK 27.09.2016 16:10:00
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ИмяСобытия = "РегистрацияПередачиВNavision" Тогда

		Если НЕ Источник = Объект.Ссылка И (Параметр.Объект = Объект.Ссылка ИЛИ Параметр.Объект = Объект.ДокументОснование) Тогда

		//	Оформление элементов в обработчике подсистемы "NAV"
			ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "Расшифровка платежа"

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		СуммаОстаток = Объект.СуммаДокумента - Объект.РасшифровкаПлатежа.Итог("Сумма");
		Элемент.ТекущиеДанные.Сумма = СуммаОстаток;
		Элемент.ТекущиеДанные.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект.РасшифровкаПлатежа, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект.РасшифровкаПлатежа, Истина);
	ПересчитатьТорговуюУступку();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.РасшифровкаПлатежа.ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(Элементы.РасшифровкаПлатежа.ТекущиеДанные.ДокументРасчетовСКонтрагентом) Тогда
			Элемент.ВыбиратьТип = Ложь;
		Иначе
			Элемент.ВыбиратьТип = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтатьяДвиженияДенежныхСредств = СтрокаТаблицы.СтатьяДвиженияДенежныхСредств;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОплатитьКартой(Команда)
	
	Если Объект.ОплатаВыполнена Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для данного документа уже выполнена оплата платежной картой.'"));
		Возврат;
	КонецЕсли;
	
	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	ОписаниеОшибки            = "";
	
	НомерЧекаККМ        = 0.00;
	СуммаОперации       = 0.00;
	НомерКарты          = "";
	НомерСсылкиОперации = "";
	НомерЧекаЭТ         = "";
	СтрокаСлипЧека      = "";
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		Если НЕ ИспользоватьБезПодключенияОборудования Тогда
			// Выбор устройства ЭТ
			ИдентификаторУстройстваЭТ = ?(ЗначениеЗаполнено(ЭквайринговыйТерминал),
			                              ЭквайринговыйТерминал,
			                              МенеджерОборудованияКлиент.ВыбратьУстройство("ЭквайринговыйТерминал",
			                               НСтр("ru='Выберите эквайринговый терминал'"),
			                               НСтр("ru='Эквайринговый терминал не подключен'"))
			);
			Если ИдентификаторУстройстваЭТ = Неопределено Тогда
				возврат;
			Иначе
				РезультатЭТ = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				                                                                                ИдентификаторУстройстваЭТ,
				                                                                                ОписаниеОшибки
				);
			КонецЕсли;
		Иначе
			РезультатЭТ = Истина;
		КонецЕсли;
		Если РезультатЭТ Тогда
			// Выбор устройства ФР
			ИдентификаторУстройстваФР = МенеджерОборудованияКлиент.ВыбратьУстройство("ФискальныйРегистратор",
			                             НСтр("ru='Выберите фискальный регистратор'"),
			                             НСтр("ru='Фискальный регистратор не подключен'")
			);
			Если ИдентификаторУстройстваФР = Неопределено Тогда
				возврат;
			Иначе
				// Подключение устройства ФР
				РезультатФР = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				                                                                                ИдентификаторУстройстваФР,
				                                                                                ОписаниеОшибки
				);
			КонецЕсли;
			Если РезультатФР Тогда
				
				// Предварительно авторизуем операцию
				ПараметрыФормы = Новый Структура("Сумма, ПределСуммы", Объект.СуммаДокумента, Объект.СуммаДокумента);
				Если ИспользоватьБезПодключенияОборудования Тогда
					ПараметрыФормы.Вставить("ПоказыватьНомерКарты", Истина);
				КонецЕсли;
				
				Ответ = ОткрытьФормуМодально("Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ", ПараметрыФормы);
				
				Если ТипЗнч(Ответ) = Тип("Структура") Тогда
					ВходныеПараметры  = Новый Массив();
					ВыходныеПараметры = Неопределено;
					
					
					ВходныеПараметры.Добавить(Ответ.Сумма);
					ВходныеПараметры.Добавить(Ответ.ДанныеКарты);
					
					СуммаОперации = Ответ.Сумма;  
					
					Если Не ИспользоватьБезПодключенияОборудования Тогда
						ПозицияРазделителя = Найти(Ответ.ДанныеКарты, "=");
						Если ПозицияРазделителя > 16 Тогда
							НомерКарты = "";
							Для Счетчик = 1 По ПозицияРазделителя - 6 Цикл
								НомерКарты = НомерКарты + "*";
							КонецЦикла;
							НомерКарты = НомерКарты
							           + Сред(Ответ.ДанныеКарты, ПозицияРазделителя - 5, 4);
						КонецЕсли;
						
						Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента") Тогда
							// Выполнение операции на ЭТ
							РезультатЭТ = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваЭТ,
							                                                          "AuthorizeSales",
							                                                          ВходныеПараметры,
							                                                          ВыходныеПараметры);
						Иначе
							// Выполнение операции на ЭТ
							РезультатЭТ = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваЭТ,
							                                                          "AuthorizeRefund",
							                                                          ВходныеПараметры,
							                                                          ВыходныеПараметры);
						КонецЕсли;
					КонецЕсли;
					
					Если Не РезультатЭТ Тогда
						ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
						|""%ОписаниеОшибки%"".
						|Оплата по карте не была произведена.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,
						                             "%ОписаниеОшибки%",
						                             ВыходныеПараметры[1]);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Иначе
						Если Не ИспользоватьБезПодключенияОборудования Тогда
							Если Не ПустаяСтрока(ВыходныеПараметры[3][1]) Тогда
								глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", ВыходныеПараметры[3][1]);
							КонецЕсли;
							
							НомерКарты          = ?(Не ПустаяСтрока(НомерКарты)
							                      И ПустаяСтрока(СтрЗаменить(СокрЛП(ВыходныеПараметры[0]), "*", "")),
							                        НомерКарты, ВыходныеПараметры[0]);
							НомерСсылкиОперации = ВыходныеПараметры[1];
							НомерЧекаЭТ         = ВыходныеПараметры[2];
							СтрокаСлипЧека      = ВыходныеПараметры[3][1];
							
						Иначе
							
							ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию оплаты на эквайринговом терминале.'") + Символы.ПС;
							ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'")        + " "+ СуммаОперации  + Символы.ПС;
							ТекстВопроса = ТекстВопроса + Символы.ПС;
							ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция оплаты на эквайринговом терминале прошла успешно?'");
							
							РезультатВопроса = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
							РезультатЭТ = (РезультатВопроса = КодВозвратаДиалога.Да);
							
							Если РезультатЭТ Тогда
								СтрокаСлипЧека = НСтр("ru = 'Произведена оплата на сумму %1% %2%'");
								СтрокаСлипЧека = СтрЗаменить(СтрокаСлипЧека, "%1%", Формат(СуммаОперации, "ЧДЦ=2; ЧГ="));
								СтрокаСлипЧека = СтрЗаменить(СтрокаСлипЧека, "%2%", "грн.");
							Иначе
								СтрокаСлипЧека = "";
								ТекстОписаниеОшибки = НСтр("ru = 'Операция отменена'");
							КонецЕсли;
							
							НомерКарты          = Ответ.НомерКарты;
							НомерСсылкиОперации = Ответ.СсылочныйНомер;
							НомерЧекаЭТ         = Ответ.НомерЧека;
							
						КонецЕсли;
						Если Не ПустаяСтрока(СтрокаСлипЧека) Тогда
							ВходныеПараметры  = Новый Массив();
							ВходныеПараметры.Добавить(СтрокаСлипЧека);
							ВыходныеПараметры = Неопределено;
						
							РезультатФР = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР,
							                                                          "PrintText",
							                                                          ВходныеПараметры,
							                                                          ВыходныеПараметры);
							НомерЧекаККМ = ВыходныеПараметры[1];
						КонецЕсли;
					КонецЕсли;
						
					Если РезультатЭТ И Не РезультатФР Тогда
						ОписаниеОшибкиФР = ВыходныеПараметры[1];
						
						ВходныеПараметры  = Новый Массив();
						ВыходныеПараметры = Неопределено;
						
						ВходныеПараметры.Добавить(СуммаОперации);
						ВходныеПараметры.Добавить(НомерСсылкиОперации);
						ВходныеПараметры.Добавить(НомерЧекаЭТ);
						
						// Выполнение операции на ЭТ
						МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваЭТ,
						                                            "EmergencyVoid",
						                                            ВходныеПараметры,
						                                            ВыходныеПараметры);
						
						ТекстСообщения = НСтр("ru = 'При печати слип-чека возникла ошибка:
						|""%ОписаниеОшибки%"".
						|Операция по карте была отменена.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,
						                             "%ОписаниеОшибки%",
						                             ОписаниеОшибкиФР);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					ИначеЕсли РезультатЭТ Тогда
						Объект.НомерПлатежнойКарты = НомерКарты;
						Объект.ОплатаВыполнена     = Истина;
						Объект.НомерЧекаККМ        = НомерЧекаККМ;
					КонецЕсли;
				КонецЕсли;
				
				// Отключение устройства ФР
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				                                                                 ИдентификаторУстройстваФР
				);
				// Отключение устройства ЭТ
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				                                                                 ИдентификаторУстройстваЭТ
				);
			Иначе
				ТекстСообщения = НСтр("ru = 'При подключении фискального регистратора произошла ошибка:
				|""%ОписаниеОшибки%"".
				|Операция по карте не была выполнена.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'При подключении эквайрингового терминала произошла ошибка:
				|""%ОписаниеОшибки%"".
				|Операция по карте не была выполнена.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ПересчитатьТорговуюУступку()
	
	Объект.СуммаТорговойУступки = Объект.СуммаДокумента * Объект.ПроцентТорговойУступки / 100;
	
КонецПроцедуры

// Функция получает из настроек пользователя настройку основного ответственного
// Параметры - Нет
//
// Возвращаемое значение - СправочникСсылка.Пользователи - Основной ответственный из настроек текущего пользователя
//
&НаСервере
Функция ОсновнойОтветственный()
	
	Возврат Пользователи.ТекущийПользователь();
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Обработчики изменений реквизитов

&НаСервере
Процедура МагазинПриИзмененииСервер(СтруктураПараметров)
	
	Объект.ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ЭквайринговыйТерминалПоУмолчанию(Неопределено, Объект.Организация, Объект.Магазин);
	Если ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Тогда
		ЭквайринговыйТерминалПриИзмененииНаСервере(СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзмененииКлиент(СтруктураПараметров)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорЭквайринга) Тогда
		Объект.Эквайрер               = Неопределено;
		Объект.СуммаТорговойУступки   = 0.00;
		Объект.ПроцентТорговойУступки = 0.00;
		возврат;
	КонецЕсли;
	Если Объект.СуммаДокумента > 0.00 И Объект.ПроцентТорговойУступки <> СтруктураПараметров.ПроцентТорговойУступки Тогда
		Ответ = Вопрос("Пересчитать значение торговой уступки?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.ПроцентТорговойУступки = СтруктураПараметров.ПроцентТорговойУступки;
			ПересчитатьТорговуюУступку();
		КонецЕсли;
	ИначеЕсли Объект.ПроцентТорговойУступки <> СтруктураПараметров.ПроцентТорговойУступки Тогда
		Объект.ПроцентТорговойУступки = СтруктураПараметров.ПроцентТорговойУступки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЭквайринговыйТерминалПриИзмененииНаСервере(СтруктураПараметров)
	
	СтруктураПараметров.Вставить("ПроцентТорговойУступки", 0.00);
	Если ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Тогда
		СтруктураРеквизитов = Справочники.ЭквайринговыеТерминалы.РеквизитыЭквайринговогоТерминала(Объект.ЭквайринговыйТерминал);
		Объект.Организация = СтруктураРеквизитов.Организация;
		Объект.ДоговорЭквайринга = СтруктураРеквизитов.ДоговорЭквайринга;
		Объект.Эквайрер = СтруктураРеквизитов.Эквайрер;
		ПараметрПроцентТорговойУступки = 0.00;
		Если ЗначениеЗаполнено(Объект.ДоговорЭквайринга) Тогда
			Если СтруктураПараметров.Свойство("ВидОплаты") И ЗначениеЗаполнено(СтруктураПараметров.ВидОплаты) Тогда
				ПараметрПроцентТорговойУступки = ЭквайрингСервер.ПолучитьПроцентТорговойУступкиПлатежнаяКарта(Объект.ДоговорЭквайринга, СтруктураПараметров.ВидОплаты);
			Иначе
				СтруктураПоУмолчанию = Справочники.ДоговорыЭквайринга.ВидОплатыПоУмолчанию(Объект.ДоговорЭквайринга);
				Если ЗначениеЗаполнено(СтруктураПоУмолчанию.ВидОплаты) Тогда
					Объект.ВидОплаты = СтруктураПоУмолчанию.ВидОплаты;
					ПараметрПроцентТорговойУступки = ЭквайрингСервер.ПолучитьПроцентТорговойУступкиПлатежнаяКарта(Объект.ДоговорЭквайринга, Объект.ВидОплаты);;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтруктураПараметров.Вставить("ПроцентТорговойУступки", ПараметрПроцентТорговойУступки);
	КонецЕсли;
	
	ПолучитьСсылкиНаОборудование();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВидОплатыПриИзмененииСервер(СтруктураПараметров)
	Перем ПараметрПроцентТорговойУступки, ПараметрДоговорЭквайринга, ПараметрВидОплаты;
	
	ПараметрВидОплаты              = СтруктураПараметров.ВидОплаты;
	ПараметрДоговорЭквайринга      = СтруктураПараметров.ДоговорЭквайринга;
	ПараметрПроцентТорговойУступки = ЭквайрингСервер.ПолучитьПроцентТорговойУступкиПлатежнаяКарта(ПараметрДоговорЭквайринга, ПараметрВидОплаты);
	СтруктураПараметров.Вставить("ПроцентТорговойУступки", ПараметрПроцентТорговойУступки);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Управление свойствами элементов формы

&НаСервере
Процедура УстановитьВидимостьЭлементамПоХозяйственнойОперации()

	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ОплатаОтПокупателяПлатежнойКартой.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);

	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
КонецПроцедуры

// Процедура ОбновитьЭлементыФормыПоВидуОперации инициализирует форму по виду операции
//
&НаСервере
Процедура ОбновитьЭлементыФормыПоВидуОперации()
	
	УстановитьВидимостьЭлементамПоХозяйственнойОперации();
	УстановитьОграничениеТипаДокументРасчетовСКонтрагентом();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОграничениеТипаДокументРасчетовСКонтрагентом()
	
	МассивТиповОграничений = Документы.ОплатаОтПокупателяПлатежнойКартой.ОграничениеТипаДокументаРасчетовПоХозяйственнойОперации(Объект.ХозяйственнаяОперация);

	Если МассивТиповОграничений.Количество() > 0 Тогда
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ВыбиратьТип = МассивТиповОграничений.Количество() > 1;
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ОграничениеТипа = Новый ОписаниеТипов(МассивТиповОграничений);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
//	LNK 04.01.2017 13:54:53
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Номер.ТолькоПросмотр,
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьНомерДокумента);

КонецПроцедуры

// В процедуре выполняется установка свойств элементов формы.
//
&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	ОбновитьЭлементыФормыПоВидуОперации();
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораЭквайринговогоТерминала(Объект, Элементы.ЭквайринговыйТерминал);
	СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(Объект.ХозяйственнаяОперация);
	
КонецПроцедуры

Процедура УстановитьДоступностьТерминала()
	
	Элементы.ЭквайринговыйТерминал.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Магазин);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

// Процедура получает ссылку на торговое оборудование к которому подключен эквайринговый терминал
//
&НаСервере
Процедура ПолучитьСсылкиНаОборудование()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭквайринговыеТерминалы.Ссылка                                 КАК Ссылка,
	|	ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование               КАК ПодключаемоеОборудование,
	|	
	|	ЭквайринговыеТерминалы.Владелец.ТарифыЗаРасчетноеОбслуживание.(
	|		ВидОплаты КАК ВидПлатежнойКарты
	|	) КАК ВидыПлатежныхКарт
	|	
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Ссылка = &ЭквайринговыйТерминал
	|	И ((ЭквайринговыеТерминалы.ПодключаемоеОборудование <> ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|		И ЭквайринговыеТерминалы.ПодключаемоеОборудование.РабочееМесто = &РабочееМесто)
	|		ИЛИ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования)
	|";
	
	Запрос.УстановитьПараметр("ЭквайринговыйТерминал", Объект.ЭквайринговыйТерминал);
	Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЭквайринговыйТерминал = Выборка.ПодключаемоеОборудование;
		ИспользоватьБезПодключенияОборудования = Выборка.ИспользоватьБезПодключенияОборудования;
	Иначе
		ЭквайринговыйТерминал = Справочники.ПодключаемоеОборудование.ПустаяСсылка();
		ИспользоватьБезПодключенияОборудования = Ложь;
	КонецЕсли;
	
КонецПроцедуры


// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры


// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
