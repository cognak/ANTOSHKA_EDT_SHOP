
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.ЗаказНаПеремещение.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ЗакупкиСервер.ОтразитьЗаказыТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияНоменклатураПоставщиков(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ОбработкаФормированиеЗаказов") Тогда
			ДанныеШапкиДокумента = ДанныеЗаполнения.Реквизиты;
			ДанныеТабличнойЧасти = ДанныеЗаполнения.Товары;
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеШапкиДокумента);
			КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			ЗаполнитьТабличнуюЧастьИзОбработкиФормированиеЗаказов(ДанныеТабличнойЧасти, КэшированныеЗначения);
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения)
		КонецЕсли;
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если МагазинОтправитель.СкладУправляющейСистемы Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СкладОтправитель");
	КонецЕсли;
	Если МагазинПолучатель.СкладУправляющейСистемы Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СкладПолучатель");
	КонецЕсли;

	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);

	Если ЗначениеЗаполнено(МагазинОтправитель) И ЗначениеЗаполнено(МагазинПолучатель) Тогда
		
		Если МагазинОтправитель = МагазинПолучатель Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Магазин-заказчик равен магазину-поставщику.'"),
				ЭтотОбъект,
				"МагазинОтправитель",
				,
				Отказ);

		КонецЕсли;
	
	КонецЕсли;

	// Желаемая дата отгрузки в шапке должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления) И ЖелаемаяДатаПоступления < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Желаемая дата поступления должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ЖелаемаяДатаПоступления",
			,
			Отказ);
		
	КонецЕсли;
	
	// "Желаемая дата поступления" - "длительность перемещения" не должна быть меньше даты документа
	Если НЕ (ЗначениеЗаполнено(ЖелаемаяДатаПоступления) И ЖелаемаяДатаПоступления < НачалоДня(Дата)) 
		И (ЗначениеЗаполнено(ЖелаемаяДатаПоступления) И (ЖелаемаяДатаПоступления - ДлительностьПеремещения *86400) < НачалоДня(Дата)) Тогда
		
		ТекстОшибки = НСтр("ru='При длительности перемещения %ДлительностьПеремещения% дн.
								|Желаемая дата поступления должна быть не меньше %РассчитаннаяДатаПоступления%
								|Либо исправьте дату документа (на не более %РассчитаннаяДатаДокумента%).'");
		
		РассчитаннаяДатаПоступления = НачалоДня(Дата) + ДлительностьПеремещения *86400;
		РассчитаннаяДатаДокумента = ЖелаемаяДатаПоступления - ДлительностьПеремещения *86400;
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДлительностьПеремещения%", ДлительностьПеремещения);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%РассчитаннаяДатаПоступления%", Формат(РассчитаннаяДатаПоступления,"ДЛФ=DD"));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%РассчитаннаяДатаДокумента%", Формат(РассчитаннаяДатаДокумента,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ЖелаемаяДатаПоступления",
			,
			Отказ);
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
//	LNK 16.02.2017 14:33:05
	ЗаполнениеОбъектовСобытия.ОбщиеДействияПередЗаписью(ЭтотОбъект, Отказ);
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;

	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ИнициализироватьДокумент();
	
	АссортиментСервер.ПроверитьАссортиментТаблицыТоваровДокументаЗакупки(МагазинПолучатель, Товары, Дата);
	
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Инициализирует внутреннее перемещение ДС
//
Процедура ИнициализироватьДокумент()

	Ответственный      = Пользователи.ТекущийПользователь();
	МагазинПолучатель  = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(МагазинПолучатель);
	Организация        = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация, Ответственный);
	Статус             = Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;
	ЖелаемаяДатаПоступления = ТекущаяДатаСеанса();
	
КонецПроцедуры

// Процедура заполнения табличной части документа из обработки Анализ продаж и формирование заказов
//
Процедура ЗаполнитьТабличнуюЧастьИзОбработкиФормированиеЗаказов(ДанныеТабличнойЧасти, КэшированныеЗначения)
	
	Для каждого СтрокаДанных Из ДанныеТабличнойЧасти Цикл
		СтрокаТоваров = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТоваров, СтрокаДанных);
		СтрокаТоваров.КоличествоУпаковок = СтрокаДанных.Количество;
	КонецЦикла;
	
КонецПроцедуры
