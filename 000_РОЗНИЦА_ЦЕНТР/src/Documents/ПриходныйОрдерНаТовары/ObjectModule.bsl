
///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

//Заполняет тч Товары, товарами к поступлению. Вызывается из модуля формы и модуля объекта
//
Процедура ЗаполнитьТоварыПоТоварамКПоступлению(ВидЗаполнения) Экспорт
	
	СерийныеНомера.Очистить();
	
	Если ВидЗаполнения = "Номенклатура" Или ВидЗаполнения = "НоменклатураКоличество" Тогда
		Товары.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование",	ДокументОснование);
	Запрос.УстановитьПараметр("Ссылка",				Ссылка);
	
	Запрос.УстановитьПараметр("ЗаполнятьКоличество",?(ВидЗаполнения = "Количество", Истина, ВидЗаполнения = "НоменклатураКоличество"));
	Запрос.УстановитьПараметр("ТолькоКоличество", ВидЗаполнения = "Количество");
	
	Если ВидЗаполнения = "Количество" Тогда
		Таблица = Товары.Выгрузить( ,"Номенклатура, Характеристика, НомерСтроки");
	Иначе
		Таблица = Товары.ВыгрузитьКолонки("Номенклатура, Характеристика, НомерСтроки");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Таблица", Таблица);
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику")
	ИЛИ  ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			
			Поступление = Документы.ПоступлениеТоваров.ПолучитьПоступлениеТоваровПоЗаказуПоставщику(ДокументОснование);
			
			Если НЕ Поступление = Неопределено Тогда
				ДокументОснованиеПоступление = Поступление;
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВремДокТЧ
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВремДокТЧ.НомерСтроки) КАК НомерСтроки,
		|	ВремДокТЧ.Номенклатура,
		|	ВремДокТЧ.Характеристика
		|ПОМЕСТИТЬ ДокТЧ
		|ИЗ
		|	ВремДокТЧ КАК ВремДокТЧ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВремДокТЧ.Номенклатура,
		|	ВремДокТЧ.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА &ЗаполнятьКоличество
		|				ТОГДА Товары.Цена / ЕСТЬNULL(Товары.Упаковка.Коэффициент, 1)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Цена,
		|	МИНИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Упаковка) > 1
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|		ИНАЧЕ МАКСИМУМ(Товары.Упаковка)
		|	КОНЕЦ КАК Упаковка,
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Упаковка) > 1
		|				ИЛИ НЕ &ЗаполнятьКоличество
		|			ТОГДА NULL
		|		ИНАЧЕ МАКСИМУМ(Товары.Упаковка.Коэффициент)
		|	КОНЕЦ КАК Коэффициент
		|ПОМЕСТИТЬ ТоварыОснования
		|ИЗ
		|	Документ.%ДокументОснованиеТовары%.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &ДокументОснованиеТовары
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКПоступлениюОбороты.Номенклатура КАК Номенклатура,
		|	ТоварыКПоступлениюОбороты.Характеристика КАК Характеристика,
		|	СУММА(ВЫБОР
		|			КОГДА &ЗаполнятьКоличество
		|				ТОГДА ТоварыКПоступлениюОбороты.КоличествоОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Количество
		|ПОМЕСТИТЬ ТоварыКПоступлению
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Обороты(, , Регистратор, ДокументОснование = &ДокументОснование) КАК ТоварыКПоступлениюОбороты
		|ГДЕ
		|	ТоварыКПоступлениюОбороты.Регистратор <> &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКПоступлениюОбороты.Номенклатура,
		|	ТоварыКПоступлениюОбороты.Характеристика
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТоварыКПоступлениюОбороты.КоличествоОборот) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &ТолькоКоличество
		|			ТОГДА ДокТЧ.НомерСтроки
		|		ИНАЧЕ ТоварыОснования.НомерСтроки
		|	КОНЕЦ КАК НомерСтроки,
		|	ЕСТЬNULL(ДокТЧ.Номенклатура, ТоварыОснования.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ДокТЧ.Характеристика, ТоварыОснования.Характеристика) КАК Характеристика,
		|	ТоварыОснования.Цена,
		|	ТоварыОснования.Упаковка,
		|	ТоварыОснования.Коэффициент
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	ДокТЧ КАК ДокТЧ
		|		ПОЛНОЕ СОЕДИНЕНИЕ ТоварыОснования КАК ТоварыОснования
		|		ПО ДокТЧ.Номенклатура = ТоварыОснования.Номенклатура
		|			И ДокТЧ.Характеристика = ТоварыОснования.Характеристика
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ТолькоКоличество
		|				ТОГДА НЕ ДокТЧ.Номенклатура ЕСТЬ NULL 
		|			ИНАЧЕ НЕ ТоварыОснования.Номенклатура ЕСТЬ NULL 
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки,
		|	ЕСТЬNULL(ТоварыКПоступлению.Номенклатура, Товары.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ТоварыКПоступлению.Характеристика, Товары.Характеристика) КАК Характеристика,
		|	Товары.Цена,
		|	ТоварыКПоступлению.Количество,
		|	ВЫБОР
		|		КОГДА Товары.Коэффициент ЕСТЬ NULL 
		|				ИЛИ (ВЫРАЗИТЬ(ТоварыКПоступлению.Количество / Товары.Коэффициент КАК ЧИСЛО(15, 0))) <> ТоварыКПоступлению.Количество / Товары.Коэффициент
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ИспользоватьУпаковку,
		|	Товары.Упаковка,
		|	Товары.Коэффициент
		|ПОМЕСТИТЬ ИтоговаяТаблица
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыКПоступлению КАК ТоварыКПоступлению
		|		ПО Товары.Номенклатура = ТоварыКПоступлению.Номенклатура
		|			И Товары.Характеристика = ТоварыКПоступлению.Характеристика
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ТолькоКоличество
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НЕ ТоварыКПоступлению.Количество ЕСТЬ NULL 
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговаяТаблица.НомерСтроки КАК НомерСтрокиСорт,
		|	ИтоговаяТаблица.Номенклатура,
		|	ИтоговаяТаблица.Характеристика,
		|	ВЫБОР
		|		КОГДА ИтоговаяТаблица.ИспользоватьУпаковку
		|			ТОГДА ИтоговаяТаблица.Цена * ИтоговаяТаблица.Коэффициент
		|		ИНАЧЕ ИтоговаяТаблица.Цена
		|	КОНЕЦ КАК Цена,
		|	ИтоговаяТаблица.Количество,
		|	ВЫБОР
		|		КОГДА ИтоговаяТаблица.ИспользоватьУпаковку
		|			ТОГДА ИтоговаяТаблица.Количество / ИтоговаяТаблица.Коэффициент
		|		ИНАЧЕ ИтоговаяТаблица.Количество
		|	КОНЕЦ КАК КоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА ИтоговаяТаблица.ИспользоватьУпаковку
		|			ТОГДА ИтоговаяТаблица.Упаковка
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ КАК Упаковка,
		|	ИтоговаяТаблица.Количество * ИтоговаяТаблица.Цена КАК Сумма
		|ИЗ
		|	ИтоговаяТаблица КАК ИтоговаяТаблица
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиСорт"
		;
		
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ДокументОснованиеТовары%", "ВозвратТоваровОтПокупателя");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОснованиеПоступление) Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ДокументОснованиеТовары%", "ПоступлениеТоваров");
			Запрос.УстановитьПараметр("ДокументОснованиеТовары", ДокументОснованиеПоступление);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ДокументОснованиеТовары%", "ЗаказПоставщику");
			Запрос.УстановитьПараметр("ДокументОснованиеТовары", ДокументОснование);
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Товары.Загрузить(РезультатЗапроса.Выгрузить());
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Нет данных для заполнения по основанию ""%ДокументОснование%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", ДокументОснование);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДокументОснование");
			
		КонецЕсли;
		
	Иначе
		// для док.основания ПеремещениеТоваров и ПоступлениеТоваров.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВремДокТЧ
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВремДокТЧ.НомерСтроки) КАК НомерСтроки,
		|	ВремДокТЧ.Номенклатура,
		|	ВремДокТЧ.Характеристика
		|ПОМЕСТИТЬ ДокТЧ
		|ИЗ
		|	ВремДокТЧ КАК ВремДокТЧ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВремДокТЧ.Номенклатура,
		|	ВремДокТЧ.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА &ЗаполнятьКоличество
		|				ТОГДА Товары.Цена / ЕСТЬNULL(Товары.Упаковка.Коэффициент, 1)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Цена,
		|	МИНИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Упаковка) > 1
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|		ИНАЧЕ МАКСИМУМ(Товары.Упаковка)
		|	КОНЕЦ КАК Упаковка,
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Упаковка) > 1
		|				ИЛИ НЕ &ЗаполнятьКоличество
		|			ТОГДА NULL
		|		ИНАЧЕ МАКСИМУМ(Товары.Упаковка.Коэффициент)
		|	КОНЕЦ КАК Коэффициент,
		|	МИНИМУМ(Товары.КлючСвязиСерийныхНомеров) КАК КлючСвязиСерийныхНомеров,
		|	СУММА(Товары.Количество) КАК КоличествоОснования
		|ПОМЕСТИТЬ ТоварыОснования
		|ИЗ
		|	Документ.ПоступлениеТоваров.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &ДокументОснование
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКПоступлениюОбороты.Номенклатура КАК Номенклатура,
		|	ТоварыКПоступлениюОбороты.Характеристика КАК Характеристика,
		|	СУММА(ВЫБОР
		|			КОГДА &ЗаполнятьКоличество
		|				ТОГДА ТоварыКПоступлениюОбороты.КоличествоОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Количество
		|ПОМЕСТИТЬ ТоварыКПоступлению
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Обороты(, , Регистратор, ДокументОснование = &ДокументОснование) КАК ТоварыКПоступлениюОбороты
		|ГДЕ
		|	ТоварыКПоступлениюОбороты.Регистратор <> &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКПоступлениюОбороты.Номенклатура,
		|	ТоварыКПоступлениюОбороты.Характеристика
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТоварыКПоступлениюОбороты.КоличествоОборот) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &ТолькоКоличество
		|			ТОГДА ДокТЧ.НомерСтроки
		|		ИНАЧЕ ТоварыОснования.НомерСтроки
		|	КОНЕЦ КАК НомерСтроки,
		|	ЕСТЬNULL(ДокТЧ.Номенклатура, ТоварыОснования.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ДокТЧ.Характеристика, ТоварыОснования.Характеристика) КАК Характеристика,
		|	ТоварыОснования.Цена,
		|	ТоварыОснования.Упаковка,
		|	ТоварыОснования.Коэффициент,
		|	ТоварыОснования.КлючСвязиСерийныхНомеров,
		|	ТоварыОснования.КоличествоОснования
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	ДокТЧ КАК ДокТЧ
		|		ПОЛНОЕ СОЕДИНЕНИЕ ТоварыОснования КАК ТоварыОснования
		|		ПО ДокТЧ.Номенклатура = ТоварыОснования.Номенклатура
		|			И ДокТЧ.Характеристика = ТоварыОснования.Характеристика
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ТолькоКоличество
		|				ТОГДА НЕ ДокТЧ.Номенклатура ЕСТЬ NULL 
		|			ИНАЧЕ НЕ ТоварыОснования.Номенклатура ЕСТЬ NULL 
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки,
		|	ЕСТЬNULL(ТоварыКПоступлению.Номенклатура, Товары.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ТоварыКПоступлению.Характеристика, Товары.Характеристика) КАК Характеристика,
		|	Товары.Цена,
		|	ТоварыКПоступлению.Количество,
		|	ВЫБОР
		|		КОГДА Товары.Коэффициент ЕСТЬ NULL 
		|				ИЛИ (ВЫРАЗИТЬ(ТоварыКПоступлению.Количество / Товары.Коэффициент КАК ЧИСЛО(15, 0))) <> ТоварыКПоступлению.Количество / Товары.Коэффициент
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ИспользоватьУпаковку,
		|	Товары.Упаковка,
		|	Товары.Коэффициент,
		|	Товары.КоличествоОснования,
		|	ВЫБОР
		|		КОГДА ТоварыКПоступлению.Количество = Товары.КоличествоОснования
		|			ТОГДА Товары.КлючСвязиСерийныхНомеров
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КлючСвязиСерийныхНомеров
		|ПОМЕСТИТЬ ИтоговаяТаблица
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыКПоступлению КАК ТоварыКПоступлению
		|		ПО Товары.Номенклатура = ТоварыКПоступлению.Номенклатура
		|			И Товары.Характеристика = ТоварыКПоступлению.Характеристика
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ТолькоКоличество
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НЕ ТоварыКПоступлению.Количество ЕСТЬ NULL 
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговаяТаблица.НомерСтроки КАК НомерСтрокиСорт,
		|	ИтоговаяТаблица.Номенклатура,
		|	ИтоговаяТаблица.Характеристика,
		|	ВЫБОР
		|		КОГДА ИтоговаяТаблица.ИспользоватьУпаковку
		|			ТОГДА ИтоговаяТаблица.Цена * ИтоговаяТаблица.Коэффициент
		|		ИНАЧЕ ИтоговаяТаблица.Цена
		|	КОНЕЦ КАК Цена,
		|	ИтоговаяТаблица.Количество,
		|	ВЫБОР
		|		КОГДА ИтоговаяТаблица.ИспользоватьУпаковку
		|			ТОГДА ИтоговаяТаблица.Количество / ИтоговаяТаблица.Коэффициент
		|		ИНАЧЕ ИтоговаяТаблица.Количество
		|	КОНЕЦ КАК КоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА ИтоговаяТаблица.ИспользоватьУпаковку
		|			ТОГДА ИтоговаяТаблица.Упаковка
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ КАК Упаковка,
		|	ИтоговаяТаблица.Количество * ИтоговаяТаблица.Цена КАК Сумма,
		|	ИтоговаяТаблица.КлючСвязиСерийныхНомеров
		|ИЗ
		|	ИтоговаяТаблица КАК ИтоговаяТаблица
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиСорт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыОснования.КлючСвязиСерийныхНомеров,
		|	СерийныеНомера.СерийныйНомер
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
		|		ПоступлениеТоваровСерийныеНомера.СерийныйНомер КАК СерийныйНомер
		|	ИЗ
		|		Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров.СерийныеНомера КАК ПоступлениеТоваровСерийныеНомера
		|			ПО ПоступлениеТоваровТовары.КлючСвязиСерийныхНомеров = ПоступлениеТоваровСерийныеНомера.КлючСвязиСерийныхНомеров
		|	ГДЕ
		|		ПоступлениеТоваровСерийныеНомера.Ссылка = &ДокументОснование
		|		И ПоступлениеТоваровТовары.Ссылка = &ДокументОснование) КАК СерийныеНомера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыОснования КАК ТоварыОснования
		|		ПО СерийныеНомера.Номенклатура = ТоварыОснования.Номенклатура
		|ГДЕ
		|	ТоварыОснования.КлючСвязиСерийныхНомеров В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ИтоговаяТаблица.КлючСвязиСерийныхНомеров
		|			ИЗ
		|				ИтоговаяТаблица КАК ИтоговаяТаблица)";
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПоступлениеТоваров","ПеремещениеТоваров");
		КонецЕсли;
		
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		Если Не РезультатыЗапроса[6].Пустой() Тогда
			
			Товары.Загрузить(РезультатыЗапроса[6].Выгрузить());
			СерийныеНомера.Загрузить(РезультатыЗапроса[7].Выгрузить());
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Нет данных для заполнения по основанию ""%ДокументОснование%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", ДокументОснование);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДокументОснование");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Товары.Количество() > 0 Тогда 
		ЗапасыСервер.ЗаполнитьЦеныПоРозничнымЦенам(ЭтотОбъект, "Товары", Магазин, Ложь);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Если ДополнительныеСвойства.АтрибутыОснования.ВидПеремещения = Перечисления.ВидыПеремещенийТоваров.ПоступлениеПереброски
	И НЕ Документы.ПеремещениеТоваров.ПроверитьСерийныеНомераОрдера(ДокументОснование, СерийныеНомера, Ссылка, Отказ) Тогда

		Возврат;	//	LNK 12.03.2020 11:17:20

	КонецЕсли;

	Если НЕ ПодарочныеСертификатыСервер.ОбработкаПроведенияКонтроль("Поступление", ЭтотОбъект, Отказ)	Тогда

		Возврат;	//	LNK 05.03.2020 10:39:13

	КонецЕсли;
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.ПриходныйОрдерНаТовары.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеСервер.ОтразитьДвиженияПоРегистру("ТоварыНаМагазинах", ДополнительныеСвойства, Движения, Отказ); 
	ЗапасыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияСерийныхНомеров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
//	LNK 28.02.2017 17:10:29
	Ценообразование.ОтразитьПрименениеЦенНоменклатуры(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ДополнительныеСвойства.Вставить("ИсключительныйРежимВключен"
		,	ТехническаяПоддержкаВызовСервера.ИсключительныйРежим()
		ИЛИ ПараметрыСеанса.ВыполняютсяСлужебныеДействия
		ИЛИ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ИзменениеСтатусаРаботыСТерминалом", Ложь) = Истина);
//	LNK 16.02.2017 14:33:05 - здесь ИсключительныйРежим будет отлючен для бесправного пользователя
	ЗаполнениеОбъектовСобытия.ОбщиеДействияПередЗаписью(ЭтотОбъект, Отказ);

	РеквизитыСсылки = РеквизитыСсылки();	//	LNK 04.06.2019 10:48:22

	ДополнительныеСвойства.Вставить("ЭтоНовый"   , ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	ДополнительныеСвойства.Вставить("Проведен"   , РеквизитыСсылки.Проведен);
	ДополнительныеСвойства.Вставить("IDN"        , РеквизитыСсылки.IDN);

	ДополнительныеСвойства.Вставить("АтрибутыОснования", Новый Структура(
		"Дата, Номер, Проведен, Склад, ВидПеремещения, ЭтоПеремещение, ПереданNAV"
			, '00010101'
			, Номер
			, ПроведениеСервер.ДокументПроведен(ДокументОснование, Ложь, Ложь)
			, Склад
			, Перечисления.ВидыПеремещенийТоваров.ПустаяСсылка()
			, ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров")
			, Ложь
		)	//	"Номер" и "Склад" - вдруг основание НЕ перемещение..
	);
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;

	ПолучитьАтрибутыПеремещенияТоваров();	//	LNK 29.03.2021 06:35:18
	ПроверитьСоответствиеАтрибутамОснования(Отказ, РежимЗаписи);	//	LNK 29.03.2021 07:11:54

	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);

//	LNK 10.09.2016 10:19:52
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если НЕ ЭтоНовый() Тогда

		Если ВнешниеИсточникиСобытия.ПередачаNavision(Ссылка) Тогда

			Если ДополнительныеСвойства.ИсключительныйРежимВключен ИЛИ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "СлужебнаяЗапись", Ложь) Тогда

				Документы.ПеремещениеТоваров.ЖурналРазрешениеПредоставлено(Ссылка);

			Иначе

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ «" + СокрЛП(Ссылка) + "» учтён в КСУ Navision! Изменения запрещены. Отказано.", Ссылка,,, Отказ);
				Возврат;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

//	LNK 19.07.2019 13:53:48
	Если НЕ (Отказ ИЛИ ДополнительныеСвойства.ИсключительныйРежимВключен)  Тогда

	//	NAV:БлокировкаДанныхУчестьДокументВNavision
		Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
		И  (ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "РегистрацияПередачиВNavision", Ложь) = Истина
		ИЛИ ВнешниеИсточникиСобытия.ПередачаNavision(Ссылка))	Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ «" + СокрЛП(Ссылка) + "» учтён в КСУ Navision! В отмене проведения отказано.", Ссылка,,, Отказ);
			Возврат;

		КонецЕсли;

	КонецЕсли;

//	LNK 06.11.2017 10:23:19
	Если Документы.ПриходныйОрдерНаТовары.ПриПроведенииОтправлятьВNavision(Ссылка, Дата, Магазин, ДокументОснование, РежимЗаписи)
	И НЕ ДополнительныеСвойства.Свойство("РегистрацияПередачиВNavision") Тогда

		ДополнительныеСвойства.Вставить("РегистрацияПередачиВNavision", Истина);

	КонецЕсли;

	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "РегистрацияПередачиВNavision", Ложь) Тогда

		Если ЗначениеЗаполнено(ДокументОснование) Тогда

			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда

				УчетнаяПолитика = ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику();

				Если УчетнаяПолитика.УчитыватьNavisionПоступлениеПереброски Тогда

					ОшибкаУчетаNavision = НЕ ВнешниеИсточникиСобытия.ПередачаNavision(ДокументОснование);

				Иначе

					Запрос = Новый Запрос(
					"ВЫБРАТЬ
					|	ТаблицаДокумента.ВидПеремещения КАК ВидПеремещения
					|ИЗ
					|	Документ.ПеремещениеТоваров КАК ТаблицаДокумента
					|ГДЕ
					|	ТаблицаДокумента.Ссылка = &ДокументОснование
					|	И ТаблицаДокумента.ВидПеремещения = ЗНАЧЕНИЕ(Перечисление.ВидыПеремещенийТоваров.ПоступлениеПереброски)"
					);
					Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

					Если Запрос.Выполнить().Пустой() Тогда

					//	это НЕ переброска!
						ОшибкаУчетаNavision = НЕ ВнешниеИсточникиСобытия.ПередачаNavision(ДокументОснование);

					Иначе

					//	Поступление переброски! Переброска формируется только после учёта в NAV первой части.
					//	А вторая часть (именно это основание) не может быть ещё передано в NAV!
						ОшибкаУчетаNavision = Ложь;

					КонецЕсли;

				КонецЕсли;

			Иначе

				ОшибкаУчетаNavision = НЕ ВнешниеИсточникиСобытия.ПередачаNavision(ДокументОснование);

			КонецЕсли;

			Если ОшибкаУчетаNavision Тогда

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Основание «" + СокрЛП(ДокументОснование) + "» НЕ учтён в КСУ Navision! Учитывать ордер недопустимо.", Ссылка,,, Отказ);
				Возврат;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
	Справочники.СерийныеНомера.ОчиститьВДокументеНеиспользуемыеСерийныеНомера(Товары, СерийныеНомера);
	ОбщегоНазначенияРТСервер.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект, Документы.ПриходныйОрдерНаТовары.ПараметрыУказанияСерий(ЭтотОбъект));

	ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
		ЭтотОбъект,
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Товары, Истина),
		"СуммаДокумента");

КонецПроцедуры

//	LNK 10.09.2016 10:20:42
Процедура ПриЗаписи(Отказ)
	
//	LNK 15.03.2017 12:10:20
	РегистрыСведений.ОбъектыДляОбработки.ФиксироватьПроведениеТоварногоОрдера(ЭтотОбъект);
	
	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда
		
		РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ЗаписьСостояниеСтрокЗаказаПокупателя(Ссылка); 
		
	КонецЕсли;

	Если ОбменДанными.Загрузка И НЕ ОбменДанными.Отправитель = Неопределено Тогда

		ПроверитьНеобходимыеКорректировкиПеремещения(Отказ);	//	LNK 09.07.2022 06:49:38

		Возврат;
		
	КонецЕсли;

	УстановитьДатуПеремещенияПереброскиПриНеобходимости(Отказ);
	
	Если ОбменДанными.Загрузка Тогда

		Возврат;
		
	КонецЕсли;

//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "РегистрацияПередачиВNavision", Ложь) Тогда

		УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаРегистра.УчтеноNavision
		|ИЗ
		|	РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаРегистра
		|ГДЕ
		|	ТаблицаРегистра.Объект = &ДокументОснование"
		);
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			
				УчтеноNavision = Выборка.УчтеноNavision;

		Иначе	УчтеноNavision = Ложь;

		КонецЕсли;

		ВнешниеИсточникиСобытия.УстановитьПереданоNavision(Ссылка
			, ОбщегоНазначенияРТСервер.ПолучитьМагазиныПоОбъекту(Ссылка)
			, ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "РесурсВидПередачиВNavision", Перечисления.ВидыПередачиNavision.ПереданВNavision)
			,, УчтеноNavision,, Истина);

		КлючевыеСвойства = ЗаполнениеОбъектов.КлючевыеСвойстваДокумента(ДокументОснование);

		Если КлючевыеСвойства.СозданВ1СРозница = Истина И НЕ ВнешниеИсточникиСобытия.ПередачаNavision(ДокументОснование) Тогда

			ЗаполнениеОбъектов.ПерезаполнитьПеремещениеПоОрдеру(ДокументОснование, Ссылка);

		КонецЕсли;

	КонецЕсли;

	ПроверитьНеобходимыеКорректировкиПеремещения(Отказ); 

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		
		Основание = ДанныеЗаполнения.ДокументОснование;
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ДанныеЗаполнения)) Тогда

		Основание = ДанныеЗаполнения;
		
	КонецЕсли;
		
	Если  ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") 
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		ИмяПоля = "Ссылка";

	//	LNK 22.11.2016 16:40:19
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда

			Номер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Номер");

		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		
		ИмяПоля = "ЗаказПоставщику";
		
	КонецЕсли;

	Если ИмяПоля <> Неопределено Тогда
		
		ДокументОснование = ?(ЗначениеЗаполнено(Основание[ИмяПоля]), Основание[ИмяПоля], Основание);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда

		ЗаполнитьПоОснованию();

	Иначе

		ТекстСообщения = НСтр("ru='Приходный ордер можно вводить только на основании распоряжения на поступление товаров.'");
		ВызватьИсключение ТекстСообщения;

	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
		
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Серии.Очистить();
	ИнициализироватьДокумент();
	
	АссортиментСервер.ПроверитьАссортиментТаблицыТоваровДокументаЗакупки(Магазин, Товары, Дата);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если Магазин.СкладУправляющейСистемы Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,Документы.ПриходныйОрдерНаТовары.ПараметрыУказанияСерий(ЭтотОбъект),Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеТЧПриНаличииОбменаСУправлениемТорговлей(
		ЭтотОбъект,
		Отказ);

	МаркетинговыеАкцииСервер.ПроверитьЗаполнениеТабличнойЧастиСерийныеНомера(
		ЭтотОбъект,
		"Товары",
		"СерийныеНомера",
		Отказ
	);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Инициализирует документ
//
Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Ответственный = Пользователи.ТекущийПользователь();
	Магазин       = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Магазин);
	Склад         = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Магазин,,Склад, Ответственный);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Склад")
			И НЕ ЗначениеЗаполнено(Склад) Тогда
			Если ЗначениеЗаполнено(Магазин) Тогда
				Если НЕ Справочники.Склады.ПроверитьПринадлежностьСкладаМагазину(Магазин, ДанныеЗаполнения.Склад) Тогда
					ДанныеЗаполнения.Склад = Справочники.Склады.ПустаяСсылка();
				КонецЕсли;
			Иначе
				Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Склад, "Магазин");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПоОснованию()

	Реквизиты = Новый Структура("Магазин, Склад, ИспользоватьОрдернуюСхему, Комментарий");

	Реквизиты.Комментарий = "Комментарий";

	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда

		Реквизиты.Магазин                   = "МагазинПолучатель";
		Реквизиты.Склад                     = "СкладПолучатель";
		Реквизиты.ИспользоватьОрдернуюСхему = "ЕстьNULL(МагазинПолучатель.ИспользоватьОрдернуюСхемуПриПеремещении, Ложь)";
		
	Иначе

		Реквизиты.Магазин                   = "Магазин";
		Реквизиты.Склад                     = "Склад";
		Реквизиты.ИспользоватьОрдернуюСхему = "ЕСТЬNULL(Магазин.ИспользоватьОрдернуюСхемуПриПоступлении, Ложь)";
		
	КонецЕсли;

	ЗначенияРеквизитов = ОбщегоНазначенияРТ.ПолучитьЗначенияРеквизитовОбъекта(ДокументОснование, Реквизиты);

	Если ЗначенияРеквизитов.ИспользоватьОрдернуюСхему Тогда

		Магазин = ЗначенияРеквизитов.Магазин;
		Склад   = ЗначенияРеквизитов.Склад;
		Комментарий = ЗначенияРеквизитов.Комментарий;

		ЗаполнитьТоварыПоТоварамКПоступлению("НоменклатураКоличество");

		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ПоступлениеПоЗаказу = Документы.ПоступлениеТоваров.ПолучитьПоступлениеТоваровПоЗаказуПоставщику(ДокументОснование);
			Если НЕ ПоступлениеПоЗаказу = Неопределено Тогда
				Склад = ПоступлениеПоЗаказу.Склад;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе

		ТекстСообщение = НСтр("ru = 'Для магазина ""%Магазин%"" оформление приходных ордеров не требуется.
									|Заполнение документа не выполнено.'");
		ТекстСообщение = СтрЗаменить(ТекстСообщение, "%Магазин%", Строка(ЗначенияРеквизитов.Магазин));

		ВызватьИсключение ТекстСообщение;

	КонецЕсли;

КонецПроцедуры

//Процедура формирует массив имен регистров для контроля проведения
//
Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

//	При проведении выполняется контроль превышения остатков на складах
//	LNK 14.11.2016 11:11:43
	Если ОбщегоНазначенияРТ.НужноЗаполнитьСписокРегистровДляКонтроля(ДополнительныеСвойства.РежимЗаписи, Дата) Тогда

		Если НЕ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "СлужебнаяЗапись", Ложь) Тогда

		//	Массив.Добавить(Движения.ТоварыКПоступлению);
			Массив.Добавить(Движения.ДвиженияСерийныхНомеров);

		КонецЕсли;

	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Функция РеквизитыСсылки()	//	LNK 04.06.2019 10:45:12

	РеквизитыСсылки = Новый Структура("Проведен, IDN", Ложь, "");

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Проведен КАК Проведен,
	|	ТаблицаДокумента.IDN КАК IDN
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ТекущийДокумент"
	);
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

		ЗаполнитьЗначенияСвойств(РеквизитыСсылки, Выборка);

	КонецЕсли;
	
	Возврат РеквизитыСсылки;

КонецФункции // РеквизитыСсылки()

//	LNK 12.03.2020 11:20:06
Процедура ПолучитьАтрибутыПеремещенияТоваров()

	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") И НЕ ДокументОснование.Пустая() Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПеремещениеТоваров.Дата КАК Дата,
		|	ПеремещениеТоваров.Номер КАК Номер,
		|	ПеремещениеТоваров.СкладПолучатель КАК Склад,
		|	ПеремещениеТоваров.ВидПеремещения КАК ВидПеремещения,
		|	ВЫБОР
		|		КОГДА ТаблицаУчтен.УчтеноNavision ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПереданNAV
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаУчтен
		|		ПО ПеремещениеТоваров.Ссылка = ТаблицаУчтен.Объект
		|			И ПеремещениеТоваров.МагазинПолучатель = ТаблицаУчтен.Магазин
		|ГДЕ
		|	ПеремещениеТоваров.Ссылка = &ДокументОснование"
		);
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();

		ДополнительныеСвойства.АтрибутыОснования.Дата  = Выборка.Дата;
		ДополнительныеСвойства.АтрибутыОснования.Номер = Выборка.Номер;
		ДополнительныеСвойства.АтрибутыОснования.Склад = Выборка.Склад;
		ДополнительныеСвойства.АтрибутыОснования.ВидПеремещения = Выборка.ВидПеремещения;
		ДополнительныеСвойства.АтрибутыОснования.ПереданNAV = Выборка.ПереданNAV;

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьСоответствиеАтрибутамОснования(Отказ, РежимЗаписи)	//	LNK 29.03.2021 06:58:24

	Если НЕ ОбщегоНазначенияКлиентСервер.СсылкаПустая(ДокументОснование) Тогда

		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

			Если НЕ ДополнительныеСвойства.АтрибутыОснования.Проведен Тогда

				Отказ = Истина;
				Сообщить("Отказано! НЕ проведен документ «" + ДокументОснование + "»!");

			КонецЕсли;

			Если НЕ Склад = ДополнительныеСвойства.АтрибутыОснования.Склад Тогда

				Отказ = Истина;
				Сообщить("Отказано! Склад ордера «" + Склад + "» НЕ соответствует складу перемещения «" + ДополнительныеСвойства.АтрибутыОснования.Склад + "»");

			КонецЕсли;

		КонецЕсли;

		Если ДополнительныеСвойства.АтрибутыОснования.ЭтоПеремещение Тогда

			Если НЕ Номер = ДополнительныеСвойства.АтрибутыОснования.Номер Тогда

				Номер = ДополнительныеСвойства.АтрибутыОснования.Номер;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура УстановитьДатуПеремещенияПереброскиПриНеобходимости(Отказ)	//	LNK 29.03.2021 06:19:30

	Если НЕ ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

		Возврат;	//	LNK 06.08.2021 09:56:30

	КонецЕсли;

	Если НЕ (ДополнительныеСвойства.АтрибутыОснования.ЭтоПеремещение И ДополнительныеСвойства.АтрибутыОснования.ВидПеремещения = Перечисления.ВидыПеремещенийТоваров.ПоступлениеПереброски) Тогда

		Возврат;

	КонецЕсли;

	Если НЕ (МесяцСоответствует()
		ИЛИ ДополнительныеСвойства.АтрибутыОснования.ПереданNAV = Истина)	Тогда

		УстановитьПривилегированныйРежим(Истина);

		Попытка

			ДокументОбъект = ДокументОснование.ПолучитьОбъект();
			#Если _ Тогда
			ДокументОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
			#КонецЕсли

			ДокументОбъект.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);
			ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);

			БылаДата  = ДокументОбъект.Дата;
		//	нужно перенести немного раньше.. но, бывает, что ордер прямо в начале месяца "сидит".. например 01.06.2021 00:00:00.
			ДокументОбъект.Дата = Документы.ПеремещениеТоваров.ПолучитьДатуПоОрдеру(Дата);

			ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись), РежимПроведенияДокумента.Неоперативный);

			ЖурналСобытий.Регистрация("ПЕРЕБРОСКА.Дата", УровеньЖурналаРегистрации.Примечание
				, Метаданные.Документы.ПеремещениеТоваров
				, ДокументОбъект.Ссылка
				,
				, "Изменена дата с [" + БылаДата + "] на [" + ДокументОбъект.Дата + "]"
					+ Символы.ПС + "Исполнитель «" + СокрЛП(Ссылка) + "»"
				, СокрЛП(ДокументОснование)
				, Ложь
				, Ложь
			);

		Исключение

			ТекстОшибки = ОписаниеОшибки();

			ЖурналСобытий.Регистрация("ПЕРЕБРОСКА.Дата", УровеньЖурналаРегистрации.Ошибка
				, Метаданные.Документы.ПеремещениеТоваров
				, ДокументОснование
				,
				, ТекстОшибки + Символы.ПС + "Исполнитель «" + СокрЛП(Ссылка) + "»"
				, СокрЛП(ДокументОснование)
				, Ложь
				, Ложь
			);

		КонецПопытки;

	ИначеЕсли ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И	  ДополнительныеСвойства.АтрибутыОснования.ПереданNAV = Истина
		И НЕ  МесяцСоответствует() Тогда

			ЖурналСобытий.Регистрация("ПЕРЕБРОСКА.Дата", УровеньЖурналаРегистрации.Предупреждение
				, Метаданные.Документы.ПеремещениеТоваров
				, ДокументОснование
				,
				, "Перенос даты [" + ДополнительныеСвойства.АтрибутыОснования.Дата + "] не выполнен, так как основание передано в NAV"
					+ Символы.ПС + "Исполнитель «" + СокрЛП(Ссылка) + "»"
				, СокрЛП(ДокументОснование)
				, Ложь
				, Ложь
			);

	КонецЕсли;

КонецПроцедуры

Функция МесяцСоответствует()

	Возврат НачалоМесяца(Дата) = НачалоМесяца(ДополнительныеСвойства.АтрибутыОснования.Дата)
		И	Год(Дата) = Год(ДополнительныеСвойства.АтрибутыОснования.Дата);

КонецФункции

//	LNK 09.07.2022 06:45:52
Процедура ПроверитьНеобходимыеКорректировкиПеремещения(Отказ)

	Если УзелСоздания = ОбменДаннымиПовтИсп.ПолучитьТекущийЭлементСтруктурыУзлов() И ВнешниеИсточникиСобытия.ПередачаNavision(Ссылка) Тогда

	//	В этом месте имеем точку выхода на проверку необходимости создания корректировки перемещения.
	//	Этот вызов производится при интерактивной (не в контексте обмена!) записи документа и в узле-родителе документа.
		Документы.КорректировкаПеремещения.ПроверитьНеобходимыеКорректировки(Ссылка,, ОбменДанными.Загрузка);

	КонецЕсли;

КонецПроцедуры










