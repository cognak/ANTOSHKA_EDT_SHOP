
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	
//	LNK 25.04.2017 09:43:32
	Список.Параметры.УстановитьЗначениеПараметра("Организация"
		, ?(ОбменДаннымиПовтИсп.ЭтоГлавныйУзел()
			, Неопределено
			, ПараметрыСеанса.ТекущаяОрганизация));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Магазины.Ссылка
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	НЕ Магазины.ПометкаУдаления"
	);
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() < 2 Тогда
		Элементы.Поставщик.ВыбиратьТип = Ложь;
		Элементы.Поставщик.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	КонецЕсли;
	
//	LNK 13.11.2016 13:47:42
	ЭлементОтбора = Список.Отбор.Элементы.Вставить(0, Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Магазин = Настройки.Получить("Магазин");
		Склад   = Настройки.Получить("Склад");

	Иначе

		Магазин = ПараметрыСеанса.ТекущийМагазин;
	//	Склад   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "СкладПродажи");

	КонецЕсли;

	УстановитьОтборДинамическогоСписка("Магазин");
	УстановитьОтборДинамическогоСписка("Склад");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьСклада();
	
//	LNK 13.11.2016 13:14:13
	УстановитьОформлениеЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСписокРаспоряженийНаПриемкуТоваров" Тогда

		ЗаполнитьСписокРаспоряжений();

	ИначеЕсли ИмяСобытия = "ПользовательИзменилТекущуюОрганизацию" Тогда

		Если НЕ Параметр.Организация = Список.Параметры.Элементы.Найти("Организация").Значение Тогда

			Список.Параметры.УстановитьЗначениеПараметра("Организация", Параметр.Организация);
			Элементы.Список.Обновить();

		КонецЕсли;

		Если НЕ Магазин = Параметр.Магазин Тогда

			Магазин = Параметр.Магазин;
			ОтборМагазинПриИзменении(Неопределено);

		КонецЕсли;

	ИначеЕсли ИмяСобытия = "ИзменениеОбъектУчтенВNavision" ИЛИ ИмяСобытия = "ОбновитьСписокПеремещений" Тогда	//	LNK 11.09.2020 08:25:19

		Элементы.Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОтборСкладПриИзменении(Элемент)
	
	УстановитьОтборДинамическогоСписка("Склад");
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРаспоряженияНаПриемку Тогда
		ЗаполнитьСписокРаспоряжений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборМагазинПриИзменении(Элемент)
	
	УстановитьВсеОтборыДинамическогоСписка();
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРаспоряженияНаПриемку Тогда
		ЗаполнитьСписокРаспоряжений();
	КонецЕсли;

	УстановитьДоступностьСклада();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	ЗаполнитьСписокРаспоряжений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриемкиПриИзменении(Элемент)
	
	ЗаполнитьСписокРаспоряжений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьВыполненныеРаспоряженияПриИзменении(Элемент)
	ЗаполнитьСписокРаспоряжений();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаРаспоряженияНаПриемку Тогда
		ЗаполнитьСписокРаспоряжений();
		Элементы.СоздатьПриходныйОрдер.КнопкаПоУмолчанию = Истина;
	Иначе
		Элементы.СписокРаспоряженийПустаяКоманда.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПросроченныеПоставкиПриИзменении(Элемент)
	ЗаполнитьСписокРаспоряжений();
КонецПроцедуры

//	LNK 13.11.2016 13:07:36
&НаКлиенте
Процедура ПоказатьВсеИлиНепомеченные(Команда)

	Список.Отбор.Элементы[0].Использование = НЕ Список.Отбор.Элементы[0].Использование;

	УстановитьОформлениеЭлементов();

КонецПроцедуры

#Область ОбработчикиСобытийЭлементаСписок

&НаКлиенте	//	LNK 27.10.2022 06:15:44
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ИменаКолонок = Новый Массив;
	ИменаКолонок.Добавить("Магазин");
	ИменаКолонок.Добавить("Склад");
	ИменаКолонок.Добавить("ДокументОснование");
	ИменаКолонок.Добавить("ЗаказПокупателя");
	ИменаКолонок.Добавить("Ответственный");

	РаботаСФормамиКлиент.ОбработчикСобытияСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ИменаКолонок,, Элементы);

КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "СписокРаспоряжений"

&НаКлиенте
Процедура СписокРаспоряженийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокРаспоряжений.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Распоряжение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРаспоряженийПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СписокРаспоряжений.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПриходныйОрдер(Команда)
	
	ТекущиеДанные = Элементы.СписокРаспоряжений.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ДокументОснование", ТекущиеДанные.Распоряжение);
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
		ОткрытьФорму("Документ.ПриходныйОрдерНаТовары.Форма.ФормаДокумента", ПараметрыОткрытия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСписокРаспоряжений();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьВсеОтборыДинамическогоСписка()
	
	УстановитьОтборДинамическогоСписка("Магазин");
	УстановитьОтборДинамическогоСписка("Склад");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическогоСписка(ИмяРеквизита)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		Список,
		ИмяРеквизита,
		ЭтотОбъект[ИмяРеквизита],
		ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]));
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРаспоряжений()

	СписокРаспоряжений.Очистить();
	
	Запрос = Новый Запрос( 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Ссылка КАК Склад
	|ПОМЕСТИТЬ СкладыМагазина
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Магазин = &Магазин
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыКПоступлениюОбороты.ДокументОснование КАК ДокументРаспоряжение,
	|	ВЫБОР
	|		КОГДА ТоварыКПоступлениюОбороты.ДокументОснование ССЫЛКА Документ.ЗаказПоставщику
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ТоварыКПоступлениюОбороты.ДокументОснование.Закрыт
	|							И НЕ ТоварыКПоступлениюОбороты.ДокументОснование.Бессрочный
	|							И ДОБАВИТЬКДАТЕ(ТоварыКПоступлениюОбороты.ДокументОснование.ДатаПоступления, ДЕНЬ, ТоварыКПоступлениюОбороты.ДокументОснование.ДнейПросрочкиПоставки) < &ТекущаяДатаСеанса
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПросроченаПоставка
	|ПОМЕСТИТЬ Распоряжения
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			ВЫБОР
	|					КОГДА &ОтборПоСкладу
	|						ТОГДА Склад = &Склад
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &ОтборПоМагазину
	|						ТОГДА Склад В
	|								(ВЫБРАТЬ
	|									СкладыМагазина.Склад
	|								ИЗ
	|									СкладыМагазина КАК СкладыМагазина)
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК ТоварыКПоступлениюОбороты
	|ГДЕ
	|	НЕ ТоварыКПоступлениюОбороты.Регистратор ССЫЛКА Документ.ПриходныйОрдерНаТовары
	|	И ВЫБОР
	|			КОГДА &ОтборПоМагазину
	|				ТОГДА ЕСТЬNULL(ТоварыКПоступлениюОбороты.ДокументОснование.Магазин, ТоварыКПоступлениюОбороты.ДокументОснование.МагазинПолучатель) = &Магазин
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ ЗаказПоставщику.Закрыт
	|				И НЕ ЗаказПоставщику.Бессрочный
	|				И ДОБАВИТЬКДАТЕ(ЗаказПоставщику.ДатаПоступления, ДЕНЬ, ЗаказПоставщику.ДнейПросрочкиПоставки) < &ТекущаяДатаСеанса
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Проведен
	|	И (ЗаказПоставщику.Бессрочный
	|			ИЛИ НЕ ЗаказПоставщику.ДнейПросрочкиПоставки = 0)
	|	И ВЫБОР
	|			КОГДА НЕ ЗаказПоставщику.Бессрочный
	|				ТОГДА ЗаказПоставщику.ДатаПоступления МЕЖДУ &НачалоПериода И &КонецПериода
	|						ИЛИ ДОБАВИТЬКДАТЕ(ЗаказПоставщику.ДатаПоступления, ДЕНЬ, ЗаказПоставщику.ДнейПросрочкиПоставки) МЕЖДУ &НачалоПериода И &КонецПериода
	|						ИЛИ ЗаказПоставщику.ДатаПоступления <= &НачалоПериода
	|							И ДОБАВИТЬКДАТЕ(ЗаказПоставщику.ДатаПоступления, ДЕНЬ, ЗаказПоставщику.ДнейПросрочкиПоставки) >= &КонецПериода
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОтборПоСкладу
	|				ТОГДА ЗаказПоставщику.Склад = &Склад
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОтборПоМагазину
	|				ТОГДА ЗаказПоставщику.Магазин = &Магазин
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРаспоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ТаблицаКПоступлению.ДокументОснование.ДатаПоступления, ТаблицаКПоступлению.ДокументОснование.Дата) КАК Дата,
	|	ТаблицаКПоступлению.ДокументОснование КАК Распоряжение,
	|	ЕСТЬNULL(ТаблицаКПоступлению.ДокументОснование.Контрагент, ТаблицаКПоступлению.ДокументОснование.МагазинОтправитель) КАК Поставщик,
	|	ТаблицаКПоступлению.Номенклатура КАК Номенклатура,
	|	ТаблицаКПоступлению.Характеристика КАК Характеристика,
	|	ТаблицаКПоступлению.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
	|	ТаблицаКПоступлению.КоличествоПриход КАК КоличествоПриход,
	|	ВЫБОР
	|		КОГДА ТаблицаКПоступлению.КоличествоКонечныйОстаток > 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Выполнен
	|ПОМЕСТИТЬ Результат
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.ОстаткиИОбороты(
	|			,
	|			,
	|			,
	|			,
	|			ДокументОснование В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Распоряжения.ДокументРаспоряжение
	|				ИЗ
	|					Распоряжения КАК Распоряжения)) КАК ТаблицаКПоступлению
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	Номенклатура,
	|	Характеристика,
	|	Поставщик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Дата КАК Дата,
	|	ВложенныйЗапрос.Распоряжение КАК Распоряжение,
	|	ВложенныйЗапрос.Поставщик КАК Поставщик,
	|	ВложенныйЗапрос.Выполнен КАК Выполнен,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Выполнен
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВложенныйЗапросРаспоряжения.ПросроченаПоставка
	|	КОНЕЦ КАК ПросроченаПоставка
	|ПОМЕСТИТЬ ИтоговыйРезультат
	|ИЗ
	|	(ВЫБРАТЬ
	|		Результат.Дата КАК Дата,
	|		Результат.Распоряжение КАК Распоряжение,
	|		Результат.Поставщик КАК Поставщик,
	|		ВЫБОР
	|			КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Результат.Выполнен) = 1
	|				ТОГДА МАКСИМУМ(Результат.Выполнен)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК Выполнен
	|	ИЗ
	|		Результат КАК Результат
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА &ОтборПоПоставщику
	|					ТОГДА Результат.Поставщик = &Поставщик
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Результат.Дата,
	|		Результат.Поставщик,
	|		Результат.Распоряжение) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Распоряжения.ДокументРаспоряжение КАК ДокументРаспоряжение,
	|			Распоряжения.ПросроченаПоставка КАК ПросроченаПоставка
	|		ИЗ
	|			Распоряжения КАК Распоряжения) КАК ВложенныйЗапросРаспоряжения
	|		ПО ВложенныйЗапрос.Распоряжение = ВложенныйЗапросРаспоряжения.ДокументРаспоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговыйРезультат.Дата КАК Дата,
	|	ИтоговыйРезультат.Распоряжение КАК Распоряжение,
	|	ИтоговыйРезультат.Поставщик КАК Поставщик,
	|	ИтоговыйРезультат.Выполнен КАК Выполнен,
	|	ИтоговыйРезультат.ПросроченаПоставка КАК ПросроченаПоставка,
	|	ИтоговыйРезультат.Распоряжение.Комментарий КАК Комментарий
	|ИЗ
	|	ИтоговыйРезультат КАК ИтоговыйРезультат
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтборПоСтатусу
	|				ТОГДА ИтоговыйРезультат.Выполнен = ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОтборПоСтатусуПросрочки
	|				ТОГДА ИтоговыйРезультат.ПросроченаПоставка = ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИтоговыйРезультат.Дата"
	);
	Запрос.УстановитьПараметр("ОтборПоПоставщику", ЗначениеЗаполнено(Поставщик));
	Запрос.УстановитьПараметр("ОтборПоСтатусу", НЕ ОтображатьВыполненныеРаспоряжения);
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	Запрос.УстановитьПараметр("ОтборПоСкладу", ЗначениеЗаполнено(Склад));
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ОтборПоМагазину", ЗначениеЗаполнено(Магазин));
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ОтборПоСтатусуПросрочки", НЕ ОтображатьПросроченныеПоставки);
	
	Запрос.УстановитьПараметр("НачалоПериода", ПериодПриемки.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода",  ПериодПриемки.ДатаОкончания);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		СписокРаспоряжений.Загрузить(Результат.Выгрузить());
		Элементы.СоздатьПриходныйОрдер.Доступность = Истина;
	Иначе
		Элементы.СоздатьПриходныйОрдер.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСклада()

	Элементы.ОтборСклад.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Магазин);

КонецПроцедуры

&НаСервере
Функция ПодготовитьСтруктуруДанных(Распоряжение)
	
	СтруктураПараметры = Неопределено;
	
	Если ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПоступлениеТоваров")
		ИЛИ ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("Магазин", Распоряжение.Магазин);
		СтруктураПараметры.Вставить("Склад",   Распоряжение.Склад);
		СтруктураПараметры.Вставить("Документ",Распоряжение);
		СтруктураПараметры.Вставить("Режим",   "ПриходТовара");
		
	ИначеЕсли ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("Магазин",                                Распоряжение.МагазинПолучатель);
		СтруктураПараметры.Вставить("Склад",                                  Распоряжение.СкладПолучатель);
		СтруктураПараметры.Вставить("ИспользоватьОрдернуюСхемуПриПоступлении",Распоряжение.МагазинПолучатель.ИспользоватьОрдернуюСхемуПриПеремещении);
		СтруктураПараметры.Вставить("Документ",          Распоряжение);
		СтруктураПараметры.Вставить("Режим",             "ПриходТовара");
		
	КонецЕсли;
	
	Возврат СтруктураПараметры;
КонецФункции

//	LNK 13.11.2016 11:32:18
&НаКлиенте
Процедура УстановитьОформлениеЭлементов()

	НужныйЭлемент = Элементы.СписокПоказатьВсеИлиНепомеченные;

	Если Список.Отбор.Элементы[0].Использование Тогда

		НужныйЭлемент.Картинка  = БиблиотекаКартинок.ПоказыватьБезПомеченных;

	Иначе

		НужныйЭлемент.Картинка  = БиблиотекаКартинок.ПоказыватьВсеОбъекты;

	КонецЕсли;

КонецПроцедуры

#Область РаботаСОбщейФормойРедактированияОтдельныхРеквизитов

&НаКлиенте
Процедура ИзменитьОтдельныеРеквизиты(Команда)

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;

	Если НЕ ТекущиеДанные = Неопределено Тогда

		ПараметрыФормы = Новый Структура("ДокументСсылка", ТекущиеДанные.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ФормаИзмененияОтдельныхРеквизитов"
			, ПараметрыФормы, ЭтотОбъект, ТекущиеДанные.Ссылка,
			,, Новый ОписаниеОповещения("ИзменитьОтдельныеРеквизитыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтдельныеРеквизитыЗавершение(Результат, ДополнительныеПараметры)	Экспорт

	Элементы.Список.Обновить();

КонецПроцедуры

#КонецОбласти










