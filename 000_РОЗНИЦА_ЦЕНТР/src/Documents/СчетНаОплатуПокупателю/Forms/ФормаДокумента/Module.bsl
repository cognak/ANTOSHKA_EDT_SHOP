&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод, Количество = Неопределено, ОбновитьКоличество = Ложь) Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаВесовыхТоваров");
	СтруктураДействий.Вставить("ПроверкаТоваров");
	СтруктураДействий.Вставить("ПроверкаСерийныхНомеров");
	
	СтруктураПараметровДействия = Новый Структура;
	СтруктураПараметровДействия.Вставить("РегистрацияНовойКарты", Истина);
	СтруктураДействий.Вставить("ПроверкаКарт", СтруктураПараметровДействия);
	
	Если НЕ (Количество = Неопределено) Тогда
		
		СтруктураДействий.Вставить("ИспользоватьКоличество", Количество);
		
		Если ОбновитьКоличество Тогда
			СтруктураДействий.Вставить("ОбновитьКоличество", Количество);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПодключаемоеОборудованиеРТ.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

// Обработка данных подключаемого оборудования
//
// Параметры:
//  СтруктураПараметров - Структура действий на сервере
//  СтруктураПараметровКлиента - структура последующих действий на клиенте
//
&НаСервере
Функция ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента) Экспорт
	
	Если НЕ СтруктураПараметров.НеизвестныеДанныеПО Тогда
		
		Если СтруктураПараметров.Действие = "ПроверкаВесовыхТоваров" Тогда
			
			ВходящиеПараметры = СтруктураПараметров.ЗначенияПоиска[0];
			ДобавитьНайденныеПозицииТоваров(СтруктураПараметров.ЗначенияПоиска[0]);
			СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
			
		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаТоваров" Тогда
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				
				Если СтруктураПараметров.ЗначенияПоиска.Количество() = 1 Тогда

					ВходящиеПараметры = СтруктураПараметров.ЗначенияПоиска[0];
					Если СтруктураПараметров.Свойство("ИспользоватьКоличество") Тогда
						ВходящиеПараметры.Вставить("Количество", СтруктураПараметров.ИспользоватьКоличество);
					КонецЕсли;
					Если СтруктураПараметров.Свойство("ОбновитьКоличество") Тогда
						ВходящиеПараметры.Вставить("ОбновитьКоличество", СтруктураПараметров.ИспользоватьКоличество);
					КонецЕсли;
					ДобавитьНайденныеПозицииТоваров(ВходящиеПараметры);
					
				Иначе
					
					ТаблицаТоваров = Новый ТаблицаЗначений;
					ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
					ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
					ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
					
					Для каждого ЗначениеПоиска Из СтруктураПараметров.ЗначенияПоиска Цикл
						ТекущаяСтрока = ТаблицаТоваров.Добавить();
						ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначениеПоиска);
					КонецЦикла;
					
					СтруктураПараметровКлиента.Вставить("ВыборТоваров", ПоместитьВоВременноеХранилище(ТаблицаТоваров));
					
				КонецЕсли;
				
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				
			КонецЕсли;
		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаСерийныхНомеров" Тогда
			
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				
				ОперацияВыполнена = ДобавитьНайденныеСерийныеНомера(СтруктураПараметров.ЗначенияПоиска);
				
				Если НЕ ОперацияВыполнена Тогда
					СтруктураПараметровКлиента.Вставить("ТекстПредупреждения",НСтр("ru = 'По считанному штрихкоду определен номер подарочного сертификата.
						|Он уже присутствует в документе.
						|Повторный ввод данных не требуется.'"));

				КонецЕсли;
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				
			КонецЕсли;
		
		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаКарт" Тогда
			КоличествоКарт = СтруктураПараметров.ЗначенияПоиска.Количество();
			Если КоличествоКарт = 1 Тогда
				ИнформационнаяКарта = СтруктураПараметров.ЗначенияПоиска[0].ИнформационнаяКарта;
				Если ЗначениеЗаполнено(ИнформационнаяКарта) Тогда
					Если ИнформационнаяКарта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная Тогда
						Объект.ДисконтнаяКарта = ИнформационнаяКарта;
						СтруктураПараметровКлиента.Вставить("НайденаДисконтнаяКарта");
						Модифицированность = Истина;
					Иначе
						
						СтруктураПараметровКлиента.Вставить("ТекстПредупреждения",НСтр("ru = 'По считанному штрихкоду определена регистрационная карта. 
						|Ввод данных о регистрационной карте в документе не предусмотрен.'"));
					КонецЕсли;
					СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				КонецЕсли;
			ИначеЕсли КоличествоКарт > 1 Тогда
				МассивТиповВладельцев = Новый Массив;
				МассивТиповВладельцев.Добавить(Тип("СправочникСсылка.Контрагенты"));
				МассивТиповВладельцев.Добавить(Тип("СправочникСсылка.Пользователи"));
				МассивТиповВладельцев.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
				ТаблицаКарт = Новый ТаблицаЗначений;
				ТаблицаКарт.Колонки.Добавить("ИнформационнаяКарта", Новый ОписаниеТипов("СправочникСсылка.ИнформационныеКарты"));
				ТаблицаКарт.Колонки.Добавить("ВладелецКарты", Новый ОписаниеТипов(МассивТиповВладельцев));
				
				Для каждого ЗначениеПоиска Из СтруктураПараметров.ЗначенияПоиска Цикл
					ТекущаяСтрока = ТаблицаКарт.Добавить();
					ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначениеПоиска);
				КонецЦикла;
				
				СтруктураПараметровКлиента.Вставить("ВыборКарт", ПоместитьВоВременноеХранилище(ТаблицаКарт));
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
			КонецЕсли;
		ИначеЕсли СтруктураПараметров.Действие = "РегистрацияНовойКарты" Тогда
			
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				
				Если СтруктураПараметров.ЗначенияПоиска.Количество() > 1 Тогда
					
					ТаблицаШаблонов = Новый ТаблицаЗначений;
					ТаблицаШаблонов.Колонки.Добавить("ТипШтрихкода");
					ТаблицаШаблонов.Колонки.Добавить("КодКарты");
					
					Для каждого КлючИЗначение Из СтруктураПараметров.ЗначенияПоиска[0] Цикл
						ТаблицаШаблонов.Колонки.Добавить(КлючИЗначение.Ключ);
					КонецЦикла;
					
					Для каждого ЗначениеПоиска Из СтруктураПараметров.ЗначенияПоиска Цикл
						ТекущаяСтрока = ТаблицаШаблонов.Добавить();
						ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначениеПоиска);
					КонецЦикла;
					ТаблицаШаблонов.ЗаполнитьЗначения(СтруктураПараметров.ТипШтрихкода, "ТипШтрихкода");
					ТаблицаШаблонов.ЗаполнитьЗначения(СтруктураПараметров.КодКарты, "КодКарты");
					СтруктураПараметровКлиента.Вставить("РегистрацияНовойКартыВыборШаблона", ПоместитьВоВременноеХранилище(ТаблицаШаблонов, Новый УникальныйИдентификатор()));
					
					ТекстВопроса = НСтр("ru = 'Создать новую информационную карту? Карта %КодКарты%.'");
					ТекстВопроса = СтрЗаменить(ТекстВопроса, "%КодКарты%", СтруктураПараметров.КодКарты);
					
					СтруктураПараметровКлиента.Вставить("ТекстВопросаНовойКарты", ТекстВопроса);
				Иначе
					СтруктураПараметровКлиентаРегистрацииНовойКарты = СтруктураПараметров.ЗначенияПоиска[0];
					СтруктураПараметровКлиентаРегистрацииНовойКарты.Вставить("ТипШтрихкода", СтруктураПараметров.ТипШтрихкода);
					СтруктураПараметровКлиентаРегистрацииНовойКарты.Вставить("КодКарты"    , СтруктураПараметров.КодКарты);
					
					СтруктураПараметровКлиента.Вставить("РегистрацияНовойКарты", СтруктураПараметровКлиентаРегистрацииНовойКарты);
					
					ТекстВопроса = НСтр("ru = 'Создать новую информационную карту? Карта %КодКарты%%НаименованиеШаблона%'");
					ТекстВопроса = СтрЗаменить(ТекстВопроса, "%КодКарты%", СтруктураПараметров.КодКарты);
					Если СтруктураПараметровКлиентаРегистрацииНовойКарты.Свойство("НаименованиеШаблона") Тогда
						Если ПустаяСтрока(СтруктураПараметровКлиентаРегистрацииНовойКарты.НаименованиеШаблона) Тогда
							ТекстВопроса = СтрЗаменить(ТекстВопроса, "%НаименованиеШаблона%", ".");
						Иначе
							ТекстВопроса = СтрЗаменить(ТекстВопроса, "%НаименованиеШаблона%", " (" + СтруктураПараметровКлиентаРегистрацииНовойКарты.НаименованиеШаблона+").");
						КонецЕсли;
					КонецЕсли;
					
					СтруктураПараметровКлиента.Вставить("ТекстВопросаНовойКарты", ТекстВопроса);
				КонецЕсли;
				
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураПараметровКлиента;
	
КонецФункции

// Обработка магнитного или штрихового кода на клиенте
//
// Параметры
//  СтруктураПараметровКлиента - структура параметров
//
&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод) Экспорт
	
	Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") 
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
		
		СтрокаСообщения = НСтр("ru = 'Данные по коду не найдены: %1%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекКод);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ТекстПредупреждения") Тогда
		
		ПоказатьПредупреждение(, СтруктураПараметровКлиента.ТекстПредупреждения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойКарты") Тогда
		
		Если ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(СтруктураПараметровКлиента.ТекстВопросаНовойКарты) Тогда
			
			ИнформационнаяКарта = ИнформационныеКарты.СоздатьДисконтнуюКарту(СтруктураПараметровКлиента.РегистрацияНовойКарты);
			ИнформационныеКартыКлиент.ОповеститьОСозданииНовойКарты(ИнформационнаяКарта); 
			
			Если ЗначениеЗаполнено(ИнформационнаяКарта) Тогда
				Объект.ДисконтнаяКарта = ИнформационнаяКарта;
				Модифицированность = Истина;

				ДисконтнаяКартаПриИзменении(Неопределено);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойКартыВыборШаблона") Тогда
		
		Если ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(СтруктураПараметровКлиента.ТекстВопросаНовойКарты) Тогда
			
			ВыбранноеЗначение = ОткрытьФормуМодально("РегистрСведений.ШаблоныРегистрацииНовыхКарт.Форма.ШаблоныНовыхКарт", Новый Структура("АдресШаблоновВХранилище", СтруктураПараметровКлиента.РегистрацияНовойКартыВыборШаблона), ЭтотОбъект);
			Если ВыбранноеЗначение <> Неопределено Тогда
			
				ИнформационнаяКарта = ДобавитьНайденныеИнформационныеКарты(ВыбранноеЗначение, СтруктураПараметровКлиента.РегистрацияНовойКартыВыборШаблона);
				ИнформационныеКартыКлиент.ОповеститьОСозданииНовойКарты(ИнформационнаяКарта); 
				
				Если ЗначениеЗаполнено(ИнформационнаяКарта) Тогда
					Объект.ДисконтнаяКарта = ИнформационнаяКарта;
					Модифицированность = Истина;
					
					ДисконтнаяКартаПриИзменении(Неопределено);
					
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ВыборТоваров") Тогда
		
		ВыбранноеЗначение = ОткрытьФормуМодально("ОбщаяФорма.ВыборНоменклатуры", Новый Структура("АдресТоваровВХранилище", СтруктураПараметровКлиента.ВыборТоваров));
		Если ВыбранноеЗначение <> Неопределено Тогда
			
			ДобавитьНайденныеПозицииТоваров(ВыбранноеЗначение);
			
		КонецЕсли;
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ВыборКарт") Тогда
		
		ВыбранноеЗначение = ОткрытьФормуМодально("ОбщаяФорма.ВыборИнформационнойКарты", Новый Структура("АдресКартВХранилище", СтруктураПараметровКлиента.ВыборКарт));
		Если ВыбранноеЗначение <> Неопределено Тогда
			
			Объект.ДисконтнаяКарта = ВыбранноеЗначение.ИнформационнаяКарта;
			Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
				ДисконтнаяКартаПриИзменении(Неопределено);
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли СтруктураПараметровКлиента.Свойство("НайденаДисконтнаяКарта") Тогда
		
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			
			ДисконтнаяКартаПриИзменении(Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере	//	LNK 10.04.2020 09:54:00
Процедура УстановитьРеквизитыПоСтрокеПрограммы()

	Если НЕ Объект.КредитныеПрограммы.Количество() = 0 Тогда

		СтрокаПрограммы = Объект.КредитныеПрограммы[0];
		КредитУслугаБанка = СтрокаПрограммы.УслугаБанка;
		КредитУслугаБанкаПериодПредоставления = СтрокаПрограммы.УслугаБанкаПериодПредоставления;
		КредитУслугаБанкаКартаКлиента = СтрокаПрограммы.КартаКлиентаДляОплатыЧастями;

	КонецЕсли;

	УстановитьДанныеУслугиБанка(Ложь);

КонецПроцедуры

&НаСервере	//	LNK 10.04.2020 09:55:56
Процедура УстановитьДанныеУслугиБанка(ПриИзменении)

	КредитРеквизиты = ОбменСБанкамиСервер.ПолучитьДанныеПрограммы(КредитУслугаБанка);

	Если ПриИзменении = Истина Тогда

		КредитУслугаБанкаПериодПредоставления = КредитРеквизиты.ПериодПредоставления;
		//Сичкаренко 11.02.2021
		Если КредитРеквизиты.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Альфабанк Тогда 
			
			Объект.НомерТелефонаПодтвержден = Истина;
			
		Иначе 
			
			Объект.НомерТелефонаПодтвержден = Ложь;
			
		КонецЕсли;

	КонецЕсли;

	КредитИспользоватьСкидкиНаценки = КредитРеквизиты.ИспользоватьСкидкиНаценки;
	Элементы.КредитУслугаБанкаПериодПредоставления.МаксимальноеЗначение = КредитРеквизиты.ПериодПредоставления;
	
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации.Пустая() Тогда	//	LNK 21.09.2020 06:13:37

		Объект.ВидОперации = Перечисления.ВидыОперацийСчетНаОплатуПокупателю.ОплатаЧастями;

	КонецЕсли;

////	инициализация, собственно..
//	ПроверитьСостояниеКредитнойПрограммы();

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	
	ПерерасчетПроизведен = НЕ НДСИсходящийСервер.НуженАвторасчетНДС(Объект.Товары, Объект.ЦенаВключаетНДС,,,,Неопределено);
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ИспользоватьАвтоматическиеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,СостояниеДокумента,РазрешеноПроведение);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.СчетНаОплатуПокупателю.ПараметрыУказанияСерий(Объект));
	
	БезНДС = "Без НДС";

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда

		Объект.ОснованиеЗаявки = Параметры.Основание;
		
		ПерезаполнитьНалогообложениеНДС();
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		УстановитьДоступностьЦенаВключаетНДС();

	КонецЕсли;
	
	Если Не Параметры.Основание = Неопределено Тогда
		
		ЧтенииНаСервере();
		
	КонецЕсли;
	
	
//	инициализация, собственно..
	ПроверитьСостояниеКредитнойПрограммы();
	
	ЗаполнитьНаборПравИНастроек();	//	LNK 24.03.2020 13:06:30

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	
	УстановитьТекущуюСтраницуСуммПодвала();
	
	НастроитьФормуПоДополнительнымПравам();
	
	ПодключаемоеОборудованиеРТ.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	
	УправлениеЭлементамиФормыНаСервере();

	УправлениеДоступомРТ.ПриСозданииФормыНаСервере(ЭтотОбъект);	//	LNK 17.10.2019 14:30:01
	
	НомерТелефонаКлиента = Объект.НомерТелефона;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	ЧтенииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЧтенииНаСервере()
	
	ПерезаполнитьНалогообложениеНДС();
	ПриИзмененииМагазинСервер();

	УстановитьРеквизитыПоСтрокеПрограммы();
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	УстановитьТекущуюСтраницуСуммПодвала();
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	УстановитьДоступностьЦенаВключаетНДС();
	
	УправлениеЭлементамиФормыНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПодключитьОбработчикОжидания("Подключаемый_ДоступностьMicrosoftDynamics", 25, Ложь);
	ПодключитьОбработчикОжидания("Подключаемый_СостояниеКредитнойПрограммы", 10, Ложь);

	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "";

		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");

		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:
			                      |""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	УправлениеЭлементамиФормыНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	// ПодключаемоеОборудование
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
		НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;
			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекКод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
		ИначеЕсли ИмяСобытия ="TracksData" Тогда
			ТекКод = Параметр[0];
			ПодключаемоеОборудованиеРТКлиент.ВыбратьМагнитныйКод(ТекКод);
			Если ПустаяСтрока(ТекКод) Тогда
				Возврат;
			КонецЕсли;
			СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПередЗаписьюКлиент(Отказ, ПараметрыЗаписи.РежимЗаписи);
	
КонецПроцедуры

&НаСервере	//	LNK 05.06.2020 08:33:14
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаОплата.ВидОплаты КАК Справочник.ВидыОплатЧекаККМ) КАК ВидОплаты
	|ПОМЕСТИТЬ Оплата
	|ИЗ
	|	&ТаблицаОплата КАК ТаблицаОплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Оплата.ВидОплаты КАК ВидОплаты
	|ИЗ
	|	Оплата КАК Оплата
	|ГДЕ
	|	Оплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.БанковскийКредит)"
	);
	Запрос.УстановитьПараметр("ТаблицаОплата", Объект.Оплата.Выгрузить());
	
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		Отказ = Истина;

		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл

			Сообщить("Недопустимый вид оплаты «" + Выборка.ВидОплаты + "»");

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	LNK 26.09.2016 08:52:00
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВыполнитьДействияПослеЗаписиНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);

	Оповестить("ИзменениеСпискаСчетНаОплатуПокупателю");
	УправлениеЭлементамиФормыНаКлиенте();	//	LNK 02.05.2020 10:57:44

КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте	//	LNK 21.09.2020 06:14:41
Процедура ВидОперацииПриИзменении(Элемент)

	УправлениеЭлементамиФормыНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаДокументаИзмененаВручную = Истина;
	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
	ПерезаполнитьНалогообложениеНДС();
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		ПриИзмененииМагазинСервер();
	КонецЕсли;
	
	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
	
	УправлениеЭлементамиФормыНаКлиенте();	//	LNK 24.03.2020 13:15:54
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ПерезаполнитьНалогообложениеНДС();
	
	ПересчетНДСТабличнойЧастиСервер();

	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	ПриИзмененииКонтрагентаСервер(Ложь);
	УправлениеЭлементамиФормыНаКлиенте();

КонецПроцедуры

#Область РаботаСКонтрагентомОбъекта

&НаКлиенте	//	LNK 09.07.2020 12:55:20
Процедура КонтрагентОткрытие(Элемент, СтандартнаяОбработка)

	Если Объект.Контрагент.Пустая() Тогда

		СтандартнаяОбработка = Ложь;

		Если НЕ Объект.Магазин.Пустая() Тогда

			ОписаниеОповещения = Новый ОписаниеОповещения("КонтрагентОткрытиеЗавершение", ЭтотОбъект);

			ПоказатьВопрос(ОписаниеОповещения
				, "Открыть диалог поиска контрагента по телефону?
				  |В случае отсутствия такого контрагента будет
				  |доступна возможность создания нового покупателя.
				  |
				  |[OK] - диалог поиска по телефону.
				  |[Отмена] - ну, ничего не делаем."
				, РежимДиалогаВопрос.ОКОтмена
				, 60
				, КодВозвратаДиалога.ОК
				, "Контрагент «" + СокрЛП(Объект.Контрагент) + "»"
				, КодВозвратаДиалога.Отмена
			);

		Иначе

			ПоказатьОповещениеПользователя("Поиск не разрешён!",, "Необходимо определить магазин документа.", БиблиотекаКартинок.Информация32);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 09.07.2020 12:57:30
Процедура КонтрагентОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры)	Экспорт

	Если КодВозврата = КодВозвратаДиалога.ОК Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("ПоискПоНомеруТелефонаЗавершение", ЭтотОбъект);

		ПараметрыОткрытия = Новый Структура(
			"Магазин"
			, Объект.Магазин
		);

		ОткрытьФорму("Документ.СчетНаОплатуПокупателю.Форма.ФормаПоискПоНомеруТелефона"
			, ПараметрыОткрытия
			, ЭтотОбъект
			, ЭтотОбъект
			,
			,
			, ОписаниеОповещения
			, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 09.07.2020 13:27:02
Процедура ПоискПоНомеруТелефонаЗавершение(Значение, ДополнительныеПараметры)	Экспорт

	Если ТипЗнч(Значение) = Тип("Структура") Тогда

		Объект.Контрагент		= Значение.Контрагент;
		Объект.ДисконтнаяКарта	= Значение.ДисконтнаяКарта;
		КонтрагентПриИзменении(Элементы.Контрагент);

		Модифицированность = Истина;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДисконтнаяКартаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если НЕ Объект.Контрагент.Пустая() Тогда

		Отборы = Новый Структура(
			"ВладелецКарты, ТипКарты, ПометкаУдаления, Блокирован"
			, Объект.Контрагент
			, ПредопределенноеЗначение("Перечисление.ТипыИнформационныхКарт.Дисконтная")
			, Ложь
			, Ложь
		);

	Иначе	Отборы = Новый Структура;
	
	КонецЕсли;

	ПараметрыОткрытия = Новый Структура("Отбор", Отборы);

	ОписаниеОповещения = Новый ОписаниеОповещения("ДисконтнаяКартаНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент));

	ОткрытьФорму("Справочник.ИнформационныеКарты.ФормаВыбора", ПараметрыОткрытия, Элемент, ЭтотОбъект,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ДисконтнаяКартаНачалоВыбораЗавершение(ЗначениеВыбора, ДополнительныеПараметры)	Экспорт

	Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда

		Объект.ДисконтнаяКарта = ЗначениеВыбора;
		ДисконтнаяКартаПриИзменении(ДополнительныеПараметры.Элемент);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДисконтнаяКартаПриИзменении(Элемент)
	
	ПриИзмененииДисконтнаяКартаСервер();
	
	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
	
	УправлениеЭлементамиФормыНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);

КонецПроцедуры

&НаКлиенте
Процедура УчитыватьНДСПриИзменении(Элемент)
	
	ПриИзмененииУчитыватьНДССервер();
	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, , СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	
	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура АвторасчетНДСПриИзменении(Элемент)
	
	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПересчитатьНДС", "Доступность", Объект.АвторасчетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура КредитУслугаБанкаКартаКлиентаПриИзменении(Элемент)
	
	ПроверкаКредитУслугаБанкаКартаКлиента();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Функция ПроверкаКредитУслугаБанкаКартаКлиента()
	Результат = Истина;
	
	Если ТипЗнч(УслугаБанкаДанные) = Тип("Структура") Тогда
		Если УслугаБанкаДанные.ТипИнтернетБанкинга = ПредопределенноеЗначение("Перечисление.ТипыИнтернетБанкинга.Альфабанк") И
			 УслугаБанкаДанные.ТипУслуги = ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.ОплатаЧастями") Тогда

			Попытка
				ЭтоЧичло = Число(КредитУслугаБанкаКартаКлиента);
			Исключение
				ТекстПредупреждения = НСтр("ru='Код карты клиента должен содержать только цифры!!!'");
				ПоказатьПредупреждение(, ТекстПредупреждения);
				Результат = Ложь;
			КонецПопытки;
			
			Если Не СтрДлина(СокрЛП(КредитУслугаБанкаКартаКлиента)) = 4 Тогда 
				ТекстПредупреждения = НСтр("ru='Код карты клиента должен содержать обязательно 4 цифры!!!'");
				ПоказатьПредупреждение(, ТекстПредупреждения);
				Результат = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции	

&НаКлиенте
Процедура КредитУслугаБанкаПериодПредоставленияПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаКлиентаПриИзменении(Элемент)
	Объект.НомерТелефона = НомерТелефонаКлиента;
	Модифицированность = Истина;
КонецПроцедуры


#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "Товары"

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	Если НЕ ТекущиеДанные = Неопределено Тогда	//	LNK 30.05.2020 10:41:19

		ОбработкаТабличнойЧастиТоварыКлиент.ОчиститьСерийныеНомера(ТекущиеДанные, Объект);

	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		ТекущаяСтрока.КлючСвязиСерийныхНомеров = 0;
		ТекущаяСтрока.СуммаАвтоматическойСкидки   = 0;
		ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;

	ОчиститьКредитнуюПрограмму();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;

	ОчиститьКредитнуюПрограмму();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
	ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"   , ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" , ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина, Истина));
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС" , Объект.УчитыватьНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда

		ТекущаяСтрока.АкционнаяЦена = Истина;

	КонецЕсли;

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина, Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ПриИзмененииТоварыКоличестваУпаковок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
			
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если (Элемент.ТекущийЭлемент = Элементы.ТоварыПроцентАвтоматическойСкидки
		Или Элемент.ТекущийЭлемент = Элементы.ТоварыСуммаАвтоматическойСкидки) 
		И НЕ ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
		
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
			РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
		Иначе
			РабочееМесто = ""
		КонецЕсли;
		
		СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
		
		Если НЕ Объект.СкидкиРассчитаны Тогда
			Результат = Вопрос(НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
			Если Результат = КодВозвратаДиалога.Нет Тогда
				Возврат;
			Иначе
				
				РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
			РассчитатьСкидкиБезПримененияКОбъекту(СтруктураПараметры);
		КонецЕсли;
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтотОбъект);
		
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВвестиПодарочныеСертификаты(Команда)
	Перем ПересчетКоличества;
	
	ПересчетКоличества = Ложь;
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиСерийныеНомераНоменклатурыВТЧ(ЭтотОбъект,
		Объект.СерийныеНомера,
		Элементы.Товары.ТекущиеДанные, 
		ПересчетКоличества);
	
	Если ПересчетКоличества Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
	КонецЕсли;
	
	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	Иначе	
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
		СтруктураОтбора = Новый Структура("ИспользоватьПриПродаже", Истина);
		СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
		ВидЦены = ОткрытьФормуМодально("Справочник.ВидыЦен.Форма.ФормаВыбора",	СтруктураПараметров, ЭтотОбъект);
		
		Если ЗначениеЗаполнено(ВидЦены) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦены);
			ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦены);
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
			НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);

		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенам(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	Иначе	
		
		Если ЗначениеЗаполнено(Объект.Магазин) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенамСервер();
			ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоРозничнымЦенам(ЦеныРассчитаны, Объект.Магазин);
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
			НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
    	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦен(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	Иначе	
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
		СтруктураОтбора = Новый Структура("ИспользоватьПриПродаже", Истина);
		СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
		
		ВидЦены = ОткрытьФормуМодально("Справочник.ВидыЦен.Форма.ФормаВыбора", СтруктураПараметров, ЭтотОбъект);
		
		Если ЗначениеЗаполнено(ВидЦены) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(ВидЦены);
			ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦены);
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
			НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоРозничнымЦенам(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	Иначе	
		
		Если ЗначениеЗаполнено(Объект.Магазин) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныПоРозничнымЦенамСервер();
			ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоРозничнымЦенам(ЦеныРассчитаны, Объект.Магазин);
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
			НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	Если НЕ НаборПравИНастроек.ПродажиАктивированы Тогда

		ВозвращенноеЗначение = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(ВыполнитьПредварительныйРасчетСкидокНаСервере());
		Если ВозвращенноеЗначение <> Неопределено Тогда
			
			УправляемыеСкидки = ВозвращенноеЗначение;
			
			СтруктураПараметры = Новый Структура;
			СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
			СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
			СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
			СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
			СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
			
			Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
				РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
			Иначе
				РабочееМесто = ""
			КонецЕсли;
			
			СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
			
			Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
			
			РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
			
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Скидки (наценки)'"),
				,
				НСтр("ru = 'Скидки (наценки) рассчитаны'"),
				БиблиотекаКартинок.Информация32
			);
			
			НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
			
		КонецЕсли;

	Иначе

		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Скидки (наценки)'"),
			,
			НСтр("ru = 'Отказано! Расчёт должен выполняться во внешней системе.'"),
			БиблиотекаКартинок.Ошибка32
		);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Не СкидкиНаценкиКлиент.ПроверитьНеобходимостьНазначенияРучнойСкидкиНаценки(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДляРучнойСкидки = ПараметрыДляНазначенияРучнойСкидки();
	СуммаРучнойСкидкиНаценки = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(ПараметрыДляРучнойСкидки);
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, "UAH");
	
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
		
		НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	Если НЕ НаборПравИНастроек.ПродажиАктивированы Тогда

		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
		
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
			РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
		Иначе
			РабочееМесто = ""
		КонецЕсли;
		
		СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
		
		Если НЕ Объект.СкидкиРассчитаны Тогда
			Результат = Вопрос(НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
			Если Результат = КодВозвратаДиалога.Нет Тогда
				Возврат;
			Иначе
				
				РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
			
			РассчитатьСкидкиБезПримененияКОбъекту(СтруктураПараметры);
			
		КонецЕсли;
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтотОбъект);

	Иначе

		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Скидки (наценки)'"),
			,
			НСтр("ru = 'Отказано! Расчёт должен выполняться во внешней системе.'"),
			БиблиотекаКартинок.Ошибка32
		);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", "реализацию товаров");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
	ПараметрыФормы.Вставить("РежимПодбораСУчетомЗапрещенныхКПродаже", Истина);	//	LNK 31.07.2020 08:54:02
	ПараметрыФормы.Вставить("РежимПодбораСУчетомМинимальныхЦен", Истина);
	ПараметрыФормы.Вставить("Склад", СкладМагазина);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если НЕ ЕстьПравоИзменятьЦену() Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	Если НЕ СкидкиНаценкиКлиент.ПроверитьНеобходимостьОтменыРучныхСкидокНаценок(Объект, "Товары", "Товары", Ложь) Тогда

		Возврат;

	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	
	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте	//	LNK 25.09.2017 14:04:25
Процедура ОтменитьАвтоматическиеСкидки(Команда)

	ОтменитьАвтоматическиеСкидкиНаСервере();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	
	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ТекКод = "";
	Если ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ТекКод, НСтр("ru = 'Введите магнитный код'")) Тогда
		
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
		
	КонецЕсли;
	
	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекКод = "";
	Если ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ТекКод) Тогда
		
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
		
	КонецЕсли;
	
	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрытьИзФормы(Команда)
	Перем Отказ, Объект_Ссылка;
	
	Отказ = Ложь;
	ПередЗаписьюКлиент(Отказ, РежимЗаписиДокумента.Проведение);
	
	Если НЕ Отказ Тогда
		ПровестиИзФормыСервер(Отказ, Ложь, Объект_Ссылка);
		
		Модифицированность = Отказ;
		Если НЕ Отказ Тогда
			Закрыть();
			ОтобразитьИзменениеДанных(Объект_Ссылка, ВидИзмененияДанных.Изменение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИзФормы(Команда)
	Перем Отказ;
	
	Отказ = Ложь;
	ПередЗаписьюКлиент(Отказ, РежимЗаписиДокумента.Проведение);
	
	Если НЕ Отказ Тогда
		ПровестиИзФормыСервер(Отказ, Истина);
		
		ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
		
		ОбновитьОтображениеДанных();
		Модифицированность = Отказ;
		
		ОтобразитьИзменениеДанных(ЭтотОбъект.Объект.Ссылка, ВидИзмененияДанных.Изменение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтотОбъект,ПараметрыУказанияСерий) Тогда
		ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтотОбъект);
		
		Если ЗначениеВозврата <> Неопределено Тогда
			ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
			
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);

			НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
    
&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	Если ПодключаемоеОборудованиеРТКлиент.ПолучитьВесСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект) Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
		НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДС(Команда)
	
	Если ВыполнитьАвторасчетНДСКлиент() Тогда
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте	//	LNK 24.03.2020 12:46:50
Процедура ИндикаторПодключенияНажатие(Элемент)

	ИндикаторПодключенияНажатиеНаСервере();
	УправлениеЭлементамиФормыНаКлиенте();

КонецПроцедуры

&НаСервере	//	LNK 13.08.2019 09:39:07
Процедура ИндикаторПодключенияНажатиеНаСервере()

	Если НаборПравИНастроек.ПродажиАктивированы Тогда

		НаборПравИНастроек.Вставить("РесурсMicrosoftDynamicsДоступен", РозничныеПродажиСлужебный.РесурсMicrosoftDynamicsДоступен(Истина));

	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
КонецПроцедуры

&НаСервере
Функция ДобавитьНайденныеИнформационныеКарты(ВыбранноеЗначение, АдресШаблоновВХранилище);
	
	ТаблицаШаблонов = ПолучитьИзВременногоХранилища(АдресШаблоновВХранилище);
	СтрокиШаблонов = ТаблицаШаблонов.НайтиСтроки(ВыбранноеЗначение);
	Если СтрокиШаблонов.Количество() > 0 Тогда
		СтруктураШаблонов = Новый Структура;
		ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВСтруктуру(ТаблицаШаблонов, СтрокиШаблонов[0], СтруктураШаблонов);
		Возврат ИнформационныеКарты.СоздатьДисконтнуюКарту(СтруктураШаблонов);
	Иначе
		Возврат Справочники.ИнформационныеКарты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) 
	
	Если СтруктураПараметров.Свойство("Количество") Тогда 
		КоличествоУпаковок = СтруктураПараметров.Количество;
		СтруктураПараметров.Удалить("Количество");
	Иначе
		КоличествоУпаковок = 1;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ОбновитьКоличество") Тогда 
		СтруктураПараметров.Удалить("ОбновитьКоличество");
		ОбновитьКоличество = Истина;
	Иначе
		ОбновитьКоличество = Ложь;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураПараметров);
	Если МассивСтрок.Количество() > 0 Тогда 
		
		ТекущаяСтрока = МассивСтрок[0];
		КоэффициентУпаковки1 = ?(ЗначениеЗаполнено(СтруктураПараметров.Упаковка), СтруктураПараметров.Упаковка.Коэффициент, 1);
		КоэффициентУпаковки2 = ?(ЗначениеЗаполнено(ТекущаяСтрока.Упаковка), ТекущаяСтрока.Упаковка.Коэффициент, 1);
		
		Если ОбновитьКоличество Тогда  
			ТекущаяСтрока.КоличествоУпаковок = КоличествоУпаковок*КоэффициентУпаковки2/КоэффициентУпаковки1;
		Иначе
			ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + КоличествоУпаковок*КоэффициентУпаковки2/КоэффициентУпаковки1;
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
	Иначе 
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ТекущаяСтрока.КоличествоУпаковок = КоличествоУпаковок;	

		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураПараметров);
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина, Истина));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  Объект.УчитыватьНДС);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
	КонецЕсли;
		
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(МассивНомеров) 
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура",МассивНомеров[0].Владелец); 
	МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураОтбора);
	СтруктураДействий = Новый Структура;
	
	Если МассивСтрок.Количество() > 0 Тогда 
		
		ТекущаяСтрока = МассивСтрок[0];		
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("СерийныйНомер", МассивНомеров[0]);
		Если Объект.СерийныеНомера.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда					
			Возврат Ложь;			
		КонецЕсли;		
		
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + 1;		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		СтрокаСерийныхНомеров = Объект.СерийныеНомера.Добавить();
		СтрокаСерийныхНомеров.СерийныйНомер            = МассивНомеров[0];
		СтрокаСерийныхНомеров.КлючСвязиСерийныхНомеров = ТекущаяСтрока.КлючСвязиСерийныхНомеров;

	Иначе 
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ТекущаяСтрока.Количество = 1;
		ТекущаяСтрока.КоличествоУпаковок = 1;
		ТекущаяСтрока.Номенклатура = МассивНомеров[0].Владелец;
		ТекущаяСтрока.КлючСвязиСерийныхНомеров = ОбработкаТабличнойЧастиТоварыСервер.ДобавитьСерийныеНомераВТабличнуюЧасть(Объект.СерийныеНомера, МассивНомеров, 0);
		СтруктураДействий = Новый Структура;
		
		СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина, Истина));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",   Объект.УчитыватьНДС);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
	КонецЕсли;	
		
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);			
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
	
	Модифицированность = Истина;
	
	Возврат Истина;
	
КонецФункции

//Функция заполняет цену выделенных строк по виду цен в ТЧ Товары
//
//  Возвращаемое значение - Булево - Цены рассчитаны
&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦены)
	
	ЦеныРассчитаны = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Объект,	"Товары", ВидЦены, Элементы.Товары.ВыделенныеСтроки, Истина);
	
	РассчитатьСкидкиПриИзмененииЦенСервер();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

//Функция заполняет цену выделенных строк по розничным ценам в ТЧ Товары
//
//  Возвращаемое значение - Булево - Цены рассчитаны
&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенамСервер()
	
	ЦеныРассчитаны  = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенам(Объект, "Товары", Объект.Магазин, Элементы.Товары.ВыделенныеСтроки, Истина,,Истина);
	
	РассчитатьСкидкиПриИзмененииЦенСервер();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

//Функция заполняет цену по виду цен в ТЧ Товары
//
//  Возвращаемое значение - Булево - Цены рассчитаны
&НаСервере
Функция ЗаполнитьЦеныПоВидуЦенСервер(ВидЦены)
	
	ЦеныРассчитаны = ЗапасыСервер.ЗаполнитьЦеныПоВидуЦен(Объект, "Товары", ВидЦены, Истина);
	
	РассчитатьСкидкиПриИзмененииЦенСервер();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);

	Возврат ЦеныРассчитаны;
	
КонецФункции

//Функция заполняет цену по розничным ценам в ТЧ Товары
//
//  Возвращаемое значение - Булево - Цены рассчитаны
&НаСервере
Функция ЗаполнитьЦеныПоРозничнымЦенамСервер()
	
	ЦеныРассчитаны  = ЗапасыСервер.ЗаполнитьЦеныПоРозничнымЦенам(Объект, "Товары", Объект.Магазин, Истина,,Истина);
	
	РассчитатьСкидкиПриИзмененииЦенСервер();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);

	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере	//	LNK 24.03.2020 13:03:39
Процедура ЗаполнитьНаборПравИНастроек()

	НаборПравИНастроек = Новый Структура;

	УстановитьПривилегированныйРежим(Истина);

	КлючиПолитики = ОбменMicrosoftDynamicsПовтИсп.УчетнаяПолитика(?(Объект.Магазин.Пустая(), ПараметрыСеанса.ТекущийМагазин, Объект.Магазин));
	НаборПравИНастроек.Вставить("ПрограммаЛояльности", КлючиПолитики.ПрограммаЛояльности);
	НаборПравИНастроек.Вставить("ПродажиАктивированы", КлючиПолитики.ПродажиАктивированы);

	НаборПравИНастроек.Вставить("РесурсMicrosoftDynamicsДоступен", РозничныеПродажиСлужебный.РесурсMicrosoftDynamicsДоступен());
	НаборПравИНастроек.Вставить("РесурсWebRetailДоступен", РозничныеПродажиСлужебный.РесурсWebRetailДоступен());

КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСуммаРучнойСкидки.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыПроцентРучнойСкидки.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);

	УправлениеПользователями.УстановитьДоступностьДляРеквизитовТабличнойЧасти(Элементы.ТоварыНазначитьРучнуюСкидку.Доступность, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);
	
	УправлениеПользователями.УстановитьДоступностьДляРеквизитовТабличнойЧасти(Элементы.ТоварыОтменитьРучныеСкидки.Доступность, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыЦена.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСумма.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	Элементы.Контрагент.ТолькоПросмотр = Ложь;

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
//	LNK 04.01.2017 13:54:53
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Номер.ТолькоПросмотр,
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьНомерДокумента);
//	LNK 25.09.2017 14:06:09
	Элементы.ТоварыОтменитьАвтоматическиеСкидки.Доступность = РольДоступна(Метаданные.Роли.АдминистраторСистемы)
															И ТехническаяПоддержкаВызовСервера.ИсключительныйРежим();

КонецПроцедуры

//Процедура заполняет товары из подбора
// Параметры: 
//  ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	ТаблицаСерийныхНомеров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресСерийныхНомеровВХранилище);
	ЕстьСерийныеНомера = ТаблицаСерийныхНомеров.Количество() > 0;	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, Упаковка, Цена, КоличествоУпаковок");
		Если ЕстьСерийныеНомера Тогда
			МассивСерийныхНомеров = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(СтрокаТовара.КлючСвязиСерийныхНомеров , ТаблицаСерийныхНомеров);
			ТекущаяСтрока.КлючСвязиСерийныхНомеров = ОбработкаТабличнойЧастиТоварыСервер.ДобавитьСерийныеНомераВТабличнуюЧасть(Объект.СерийныеНомера, МассивСерийныхНомеров, 0);
		КонецЕсли;	
		СтруктураДействий = Новый Структура;

		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  Объект.УчитыватьНДС);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	ЗаполнитьСтатусыУказанияСерийСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПересчетНДСТабличнойЧастиСервер()
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.УчитыватьНДС);
	СтруктураПараметровПересчетаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПараметровПересчетаНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПараметровПересчетаНДС);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	
	Объект.СкидкиРассчитаны = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) 
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаСерийныхНомеров");
	
	СтруктураПараметровДействия = Новый Структура;
	СтруктураПараметровДействия.Вставить("РегистрацияНовойКарты", Истина);
	СтруктураДействий.Вставить("ПроверкаКарт", СтруктураПараметровДействия);
	
	Возврат ПодключаемоеОборудованиеРТ.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

// Процедура- обработчик изменения дисконтная карта на сервере.
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ПриИзмененииДисконтнаяКартаСервер()
	
	ВладелецКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДисконтнаяКарта, "ВладелецКарты");
	
	Если ЗначениеЗаполнено(ВладелецКарты) И ТипЗнч(ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Если НЕ Объект.Контрагент = ВладелецКарты Тогда

			Объект.Контрагент = ВладелецКарты;
			ПриИзмененииКонтрагентаСервер(Истина);

		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере	//	LNK 15.04.2020 07:26:46
Процедура ПриИзмененииКонтрагентаСервер(ПриИзмененииКарты)

	Объект.НомерТелефонаПодтвержден = Ложь;

	Если Объект.Контрагент.Пустая() Тогда

		Объект.ДисконтнаяКарта = Неопределено;
		Объект.НомерТелефона   = "";
		НомерТелефонаКлиента = "";

	Иначе

		ДанныеКонтрагента = ПолучитьДанныеКонтрагента(Объект.Контрагент);

		Объект.НомерТелефона = ДанныеКонтрагента.НомерТелефона;
		НомерТелефонаКлиента = ДанныеКонтрагента.НомерТелефона;

		Если ПриИзмененииКарты = Ложь Тогда

			Объект.ДисконтнаяКарта = ДанныеКонтрагента.ДисконтнаяКарта;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста	//	LNK 15.04.2020 07:30:06
Функция ПолучитьДанныеКонтрагента(Покупатель)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаКонтакты.НомерТелефона, """") КАК НомерТелефона,
	|	ЕСТЬNULL(ТаблицаКарты.Ссылка, ЗНАЧЕНИЕ(Справочник.ИнформационныеКарты.ПустаяСсылка)) КАК ДисконтнаяКарта
	|ИЗ
	|	Справочник.Контрагенты КАК ТаблицаВедущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтакты
	|		ПО ТаблицаВедущая.Ссылка = ТаблицаКонтакты.Ссылка
	|			И (ТаблицаКонтакты.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ТаблицаКарты
	|		ПО (ТаблицаВедущая.Ссылка = ТаблицаКарты.ВладелецКарты
	|				И НЕ(ТаблицаКарты.ПометкаУдаления
	|						ИЛИ ТаблицаКарты.Блокирован))
	|ГДЕ
	|	ТаблицаВедущая.Ссылка = &Покупатель"
	);
	Запрос.УстановитьПараметр("Покупатель", Покупатель);
	
	Результат = Запрос.Выполнить();

	ДанныеКонтрагента = ПодарочныеСертификатыСервер.СтруктураРезультатаЗапроса(Результат, Ложь);

	Если НЕ Результат.Пустой() Тогда

		Выборка = Результат.Выбрать();
		Выборка.Следующий();

		ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, Выборка);

	КонецЕсли;
	
	Возврат ДанныеКонтрагента;

КонецФункции

&НаСервере
Процедура ПриИзмененииМагазинСервер()
	
	СкладМагазина = ЗначениеНастроекПовтИсп.ПолучитьСкладПродажиПоУмолчанию(Объект.Магазин,,, Пользователи.ТекущийПользователь());
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.СчетНаОплатуПокупателю.ПараметрыУказанияСерий(Объект));
	УстановитьВидимостьЭлементовСерий();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
	ЗаполнитьНаборПравИНастроек();	//	LNK 24.03.2020 13:06:30

КонецПроцедуры

// Обрабатывает изменение количества упаковок
//
// Параметры
//  Нет;
//
&НаКлиенте
Процедура ПриИзмененииТоварыКоличестваУпаковок()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);

КонецПроцедуры

// Заполняет реквизиты документа по умолчанию в зависимости от выбранного налогообложения НДС.
//
&НаСервере
Процедура ПриИзмененииУчитыватьНДССервер()
	
	УстановитьДоступностьЦенаВключаетНДС(Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  Объект.УчитыватьНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГруппаАвторасчетНДС");
	МассивЭлементов.Добавить("ПересчитатьНДС");
	
	Объект.АвторасчетНДС = НДСИсходящийСервер.ПолучитьФлагИОбработатьДоступностьАвторасчетаНДС(Объект.УчитыватьНДС, Объект.Магазин, Объект.Дата, Элементы, МассивЭлементов, Ложь);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	УстановитьТекущуюСтраницуСуммПодвала();
	
КонецПроцедуры

&НаКлиенте	//	LNK 27.05.2020 09:01:08
Процедура КредитУслугаБанкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ПараметрыОткрытия = Новый Структура("ТолькоПросмотр, Отбор"
		, Истина
		, Новый Структура("Ссылка"
			, ФинансыВызовСервера.СписокДоступныхУслугБанка(
				ПолучитьМассивНоменклатура(),
				Неопределено,
				ОбменСБанкамиПовтИсп.ТипыУслугБанкаВидамОперацииСчетуНаОплатуПокупателю(Объект.ВидОперации)
			)
		)
	);
	ОткрытьФорму("Справочник.УслугиБанка.ФормаВыбора", ПараметрыОткрытия, Элемент, ЭтотОбъект,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте	//	LNK 10.04.2020 09:38:19
Процедура КредитУслугаБанкаПриИзменении(Элемент)

	УстановитьДанныеУслугиБанка(Истина);
	УстановитьСтрокуПрограммыПоРеквизитам();
	
	ПроверитьСостояниеКредитнойПрограммы();
	
	ОтменитьРучныеСкидки(Неопределено);
	ОтменитьАвтоматическиеСкидки(Неопределено);

	УправлениеЭлементамиФормыНаКлиенте();

КонецПроцедуры

&НаСервере	//	LNK 19.04.2018 09:36:03
Функция ПолучитьМассивНоменклатура()

	Возврат Объект.Товары.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура");

КонецФункции // ПолучитьМассивНоменклатура()

// Рассчитываем скидки при изхменении цен
//
// Параметры:
//  Нет
//
&НаСервере
Процедура РассчитатьСкидкиПриИзмененииЦенСервер()

	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого ТекущаяСтрока Из Объект.Товары Цикл
		
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;

КонецПроцедуры

//Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора
// Параметры:
//  Отказ - Булево
//
&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин"" не заполнено'"), Объект, "Объект.Магазин",,Отказ);
	КонецЕсли;
		
КонецПроцедуры

// Процедура управляет видимостью и доступностью элементов формы на сервере
//
&НаСервере
Процедура УправлениеЭлементамиФормыНаСервере()
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПересчитатьНДС", "Доступность", Объект.АвторасчетНДС);

КонецПроцедуры

&НаКлиенте	//	LNK 24.03.2020 12:54:00
Процедура УправлениеЭлементамиФормыНаКлиенте()

	Перем ТекстСообщения;

	Если НаборПравИНастроек.РесурсMicrosoftDynamicsДоступен Тогда

			Элементы.ИндикаторПодключения.Картинка = БиблиотекаКартинок.RFDIОперацииВыполнены;

	Иначе	Элементы.ИндикаторПодключения.Картинка = БиблиотекаКартинок.RFDIЗапись;

	КонецЕсли;

	Элементы.ИндикаторПодключения.Доступность = НаборПравИНастроек.ПродажиАктивированы;

	Элементы.Контрагент.ТолькоПросмотр = Объект.НомерТелефонаПодтвержден;
	Элементы.ДисконтнаяКарта.ТолькоПросмотр = Объект.НомерТелефонаПодтвержден;

	Элементы.ВыполнитьOTPВерификацию.Доступность = НЕ Объект.НомерТелефонаПодтвержден И НЕ ПустаяСтрока(Объект.НомерТелефона);

	Элементы.ТоварыРассчитатьСкидкиНаценки.Доступность = НЕ ТолькоПросмотр И КредитИспользоватьСкидкиНаценки;
	Элементы.ТоварыНазначитьАвтоматическиеСкидки.Доступность = НЕ ТолькоПросмотр И КредитИспользоватьСкидкиНаценки;

	Элементы.ТоварыНазначитьРучнуюСкидку.Доступность = НЕ ТолькоПросмотр;// И КредитИспользоватьСкидкиНаценки;
	Элементы.ТоварыОтменитьРучныеСкидки.Доступность  = НЕ ТолькоПросмотр;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	Если ТипЗнч(КредитСостояние) = Тип("Структура") Тогда

		Элементы.ВыполнитьOTPВерификацию.Доступность = Истина;

		Элементы.КредитПроверитьСостояниеЗаявкиНаОформлениеКредита.Доступность = Объект.ОформлениеЗавершено 
																				 Или (КредитнаяПрограммаАльфаБанк(КредитРеквизиты)
																				 	  И ПроверитьСтатусЗаявки(КредитСостояние, "Перечисление.СтатусыЗаявкиНаОформлениеКредита.Рассматривается"));
		Если КредитнаяПрограммаАльфаБанк(КредитРеквизиты) Тогда
			Элементы.НомерТелефонаКлиента.ТолькоПросмотр = Объект.ОформлениеЗавершено Или (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетНаОплатуПокупателю.ВозвратОплатаЧастями"));
			Если ПроверитьСтатусЗаявки(КредитСостояние, "Перечисление.СтатусыЗаявкиНаОформлениеКредита.ОжидаетсяОтгрузка")
					И ЕстьПродажаПоПрограмме(КредитСостояние) Тогда 
					
				Элементы.КнопкаКредитПодатьЗаявкуНаОформление.Доступность = Истина;
			Иначе 
					
				Элементы.КнопкаКредитПодатьЗаявкуНаОформление.Доступность = НЕ Объект.ОформлениеЗавершено
					И Объект.НомерТелефонаПодтвержден
					И ФинансыВызовСервера.ТоварыПринадлежатУслугеБанка(ПолучитьМассивНоменклатура(), КредитУслугаБанка, ТекстСообщения)
					И СуммаКредита >= УслугаБанкаДанные.СуммаМинимальногоКредита;	 
			КонецЕсли;		
		Иначе
			Элементы.КнопкаКредитПодатьЗаявкуНаОформление.Доступность = НЕ Объект.ОформлениеЗавершено
				И Объект.НомерТелефонаПодтвержден
				И ФинансыВызовСервера.ТоварыПринадлежатУслугеБанка(ПолучитьМассивНоменклатура(), КредитУслугаБанка, ТекстСообщения)
				И СуммаКредита >= УслугаБанкаДанные.СуммаМинимальногоКредита;	//	ограничение Монобанка
		КонецЕсли;
		
		Элементы.КредитОтменитьЗаявкуНаОформлениеКредита.Доступность = Объект.ОформлениеЗавершено
																		И НЕ КредитСостояние.Отгружено
																		Или (КредитнаяПрограммаАльфаБанк(КредитРеквизиты)
																		 	  И ПроверитьСтатусЗаявки(КредитСостояние, "Перечисление.СтатусыЗаявкиНаОформлениеКредита.Рассматривается"));

		Если НЕ ПустаяСтрока(ТекстСообщения) И НЕ КредитУслугаБанка.Пустая() Тогда

			ПоказатьОповещениеПользователя("Отказано в кредите",, ТекстСообщения, БиблиотекаКартинок.Ошибка32);

		КонецЕсли;

		Элементы.КредитУслугаБанка.ТолькоПросмотр = Объект.ОформлениеЗавершено Или (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетНаОплатуПокупателю.ВозвратОплатаЧастями")) ;
		Элементы.КредитУслугаБанкаПериодПредоставления.ТолькоПросмотр = Объект.ОформлениеЗавершено Или (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетНаОплатуПокупателю.ВозвратОплатаЧастями"));
		Элементы.КредитУслугаБанкаКартаКлиента.ТолькоПросмотр = Объект.ОформлениеЗавершено Или (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетНаОплатуПокупателю.ВозвратОплатаЧастями"));

		Если РежимБезИнтеграции(КредитРеквизиты) Тогда

			ОписаниеСтатусаЗаявки = ?(Объект.ОформлениеЗавершено
				, "Кредитная программа оформлена."
				, "Требуется завершение оформления."
			);
		
		Иначе

			ОписаниеСтатусаЗаявки = КредитСостояние.Описание;

		КонецЕсли;

		Если НЕ КредитСостояние.Статус.Пустая() Тогда

			ТолькоПросмотр = НЕ ЕстьАдминистративныйДоступ(Объект.Ссылка);

		КонецЕсли;

	Иначе

		Элементы.ВыполнитьOTPВерификацию.Доступность = Ложь;

		Элементы.КредитПроверитьСостояниеЗаявкиНаОформлениеКредита.Доступность = Ложь;
		Элементы.КнопкаКредитПодатьЗаявкуНаОформление.Доступность = Ложь;
		Элементы.КредитОтменитьЗаявкуНаОформлениеКредита.Доступность = Ложь;

		Элементы.КредитУслугаБанка.ТолькоПросмотр = Истина;
		Элементы.КредитУслугаБанкаПериодПредоставления.ТолькоПросмотр = Истина;
		Элементы.КредитУслугаБанкаКартаКлиента.ТолькоПросмотр = Истина;

		ОписаниеСтатусаЗаявки = "";

	КонецЕсли;

	УправлениеЭлементамиВидОперации();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьАдминистративныйДоступ(ТекущаяСсылка)

	ЕстьДоступ = ТехническаяПоддержкаВызовСервера.ИсключительныйРежим();

	Если ЕстьДоступ Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаРегистра.ДокументПродажи КАК ДокументПродажи
		|ИЗ
		|	РегистрСведений.ДанныеКредитныхПрограмм КАК ТаблицаРегистра
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ТаблицаПродажа
		|		ПО ТаблицаРегистра.ДокументПродажи = ТаблицаПродажа.Ссылка
		|ГДЕ
		|	ТаблицаРегистра.СчетНаОплатуПокупателю = &ТекущаяСсылка"
		);
		Запрос.УстановитьПараметр("ТекущаяСсылка", ТекущаяСсылка);

		Результат  = Запрос.Выполнить();
		ЕстьДоступ = Результат.Пустой();

	КонецЕсли;

	Возврат ЕстьДоступ;

КонецФункции

&НаКлиенте	//	LNK 22.09.2020 08:51:30
Процедура УправлениеЭлементамиВидОперации()

	Элементы.ВидОперации.ТолькоПросмотр = НЕ Объект.ВидОперации.Пустая();

	РежимБезИнтеграции = РежимБезИнтеграции(КредитРеквизиты);

//	Элементы.ГруппаОплата.Видимость = НЕ РежимБезИнтеграции;

	Элементы.КредитПроверитьСостояниеЗаявкиНаОформлениеКредита.Видимость = НЕ РежимБезИнтеграции;
	Элементы.КредитОтменитьЗаявкуНаОформлениеКредита.Видимость = НЕ РежимБезИнтеграции;

	//Элементы.КнопкаКредитПодатьЗаявкуНаОформление.Заголовок = ?(РежимБезИнтеграции, "ОФОРМИТЬ", "ПОДАТЬ");
	
	Элементы.КнопкаКредитПодатьЗаявкуНаОформление.Заголовок = "ПОДАТЬ";
	СостояниеКнопкиПодать = 1;
	Если РежимБезИнтеграции Тогда 
		Элементы.КнопкаКредитПодатьЗаявкуНаОформление.Заголовок = "ОФОРМИТЬ";
		СостояниеКнопкиПодать = 2;
	Иначе 
		Если КредитнаяПрограммаАльфаБанк(КредитРеквизиты) Тогда
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетНаОплатуПокупателю.ВозвратОплатаЧастями") Тогда 
				Если ПроверитьСтатусЗаявки(КредитСостояние, "Перечисление.СтатусыЗаявкиНаОформлениеКредита.СозданиеВозврата") Тогда
					Элементы.КнопкаКредитПодатьЗаявкуНаОформление.Заголовок = "ПОДАТЬ ВОЗВРАТ";
					СостояниеКнопкиПодать = 5;
				КонецЕсли;
			Иначе 
				Если ПроверитьСтатусЗаявки(КредитСостояние, "Перечисление.СтатусыЗаявкиНаОформлениеКредита.Рассматривается") Тогда
					Элементы.КнопкаКредитПодатьЗаявкуНаОформление.Заголовок = "ОБНОВИТЬ";
					СостояниеКнопкиПодать = 3;
				ИначеЕсли ПроверитьСтатусЗаявки(КредитСостояние, "Перечисление.СтатусыЗаявкиНаОформлениеКредита.ОжидаетсяОтгрузка") Тогда
					Элементы.КнопкаКредитПодатьЗаявкуНаОформление.Заголовок = "ПОДТВЕРДИТЬ";
					СостояниеКнопкиПодать = 4;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РежимБезИнтеграции(КредитРеквизиты)

	Если ТипЗнч(КредитРеквизиты) = Тип("Структура") Тогда

		РежимБезИнтеграции = ?(КредитРеквизиты.УслугаБанка.Пустая()
			, Истина
			, НЕ КредитРеквизиты.Интеграция
		);

	Иначе

		РежимБезИнтеграции = Истина;

	КонецЕсли;

	Возврат РежимБезИнтеграции;

КонецФункции

// Устанавливает доступность поля ЦенаВключаетНДС
//
&НаСервере
Процедура УстановитьДоступностьЦенаВключаетНДС(ПриИзменении = Ложь)

	Если ПриИзменении И Не Объект.УчитыватьНДС И Объект.ЦенаВключаетНДС Тогда
		Объект.ЦенаВключаетНДС = Ложь;
	ИначеЕсли ПриИзменении И Объект.УчитыватьНДС Тогда
		Объект.ЦенаВключаетНДС = Истина;
	КонецЕсли;
	
	Элементы.ЦенаВключаетНДС.ТолькоПросмотр = Не Объект.УчитыватьНДС;

КонецПроцедуры

//Процедура учитывает изменение параметров налогообложения в документе
//
&НаСервере
Процедура УстановитьТекущуюСтраницуСуммПодвала()
	
	Если Объект.УчитыватьНДС Тогда
		Элементы.ГруппаПодвалСтраницы.ТекущаяСтраница = Элементы.ГруппаСуммыНДС;
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаВсего", "Видимость", Истина);
	Иначе
		Элементы.ГруппаПодвалСтраницы.ТекущаяСтраница = Элементы.ГруппаСуммы;
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаВсего", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьПравоИзменятьЦену()
	
	Возврат УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Проведение

&НаСервере
Процедура ПровестиИзФормыСервер(Отказ, ЗапускатьОбработкуПослеЗаписи = Ложь, Объект_Ссылка = Неопределено)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ЗаписываемыйОбъект.ПроверитьЗаполнение() Тогда
		Попытка
			Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
				ЗаписываемыйОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			Иначе
				ЗаписываемыйОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если ЗаписываемыйОбъект.ДополнительныеСвойства.Свойство("Отказ") Тогда
			Если ЗаписываемыйОбъект.ДополнительныеСвойства.Отказ Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаписываемыйОбъект.ДополнительныеСвойства.Свойство("ТаблицыДляДвижений")
			И ЗаписываемыйОбъект.ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаПопыткиПродажПревышающихОстаток") Тогда
			
			ПродажиСервер.ОтразитьПопыткиПродаж(ЗаписываемыйОбъект.ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПопыткиПродажПревышающихОстаток, ЗаписываемыйОбъект.Дата);
			
		КонецЕсли;
		
		Объект_Ссылка = ЗаписываемыйОбъект.Ссылка;
		
		Если Отказ Тогда
		
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось провести ""%1"".'"),
					Строка(ЗаписываемыйОбъект)
					);
			
			ВызватьИсключение Текст;
		ИначеЕсли ЗапускатьОбработкуПослеЗаписи Тогда
			
			ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
			
			ВыполнитьДействияПослеЗаписиНаСервере();
			
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПослеЗаписиНаСервере()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Скидки

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	
	СведенияДокумента = Новый Структура;
	СегментИсключаемойНоменклатуры = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Магазин, "СегментИсключаемойНоменклатуры");
	СведенияДокумента.Вставить("СегментИсключаемойНоменклатуры", СегментИсключаемойНоменклатуры);
	СведенияДокумента.Вставить("Товары", Объект.Товары);
	СтруктураПараметры.Вставить("СведенияДокумента", СведенияДокумента);
	
	Возврат ПоместитьВоВременноеХранилище(СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры), УникальныйИдентификатор);
	
КонецФункции

// Процедура - обработчик команды "РассчитатьСкидкиНаценки".
//
&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	ДанныеРасчетаСкидок = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ДанныеРасчетаСкидок, УникальныйИдентификатор);
	
	Модифицированность = Истина;
	
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
	
		Объект.СкидкиРассчитаны = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

// Запрашивает у пользователя скидку и применяет ее к табличной части Товары.
//
&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки)
	
	Если СуммаСкидкиНаценки <> 0 Тогда
		СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, Истина);
	Иначе
		СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина);
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает скидки (наценки) и помещает их в хранилище, но не применяет к документу
//
&НаСервере
Процедура РассчитатьСкидкиБезПримененияКОбъекту(СтруктураПараметры)
	
	ДанныеРасчетаСкидок = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ДанныеРасчетаСкидок, УникальныйИдентификатор);
	
КонецПроцедуры

// Очищает ручные скидки в табличной части Товары.
//
&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина);
	
КонецПроцедуры

&НаСервере	//	LNK 25.09.2017 14:31:26
Процедура ОтменитьАвтоматическиеСкидкиНаСервере()

	СкидкиНаценкиСервер.ОтменитьАвтоматическиеСкидки(Объект, "Товары", Истина);
	Объект.СкидкиРассчитаны    = Ложь;
	Объект.СкидкиРассчитаныCRM = Ложь;

//	LNK 27.03.2020 10:21:27	- удаляем ВСЕ подарки
	СтрокиДляУдаления = Объект.Товары.НайтиСтроки(Новый Структура("ПродажаПодарка", Истина));

	Для каждого СтрокаТовары Из СтрокиДляУдаления Цикл

		Объект.Товары.Удалить(СтрокаТовары);

	КонецЦикла;

КонецПроцедуры

&НаСервере	//	LNK 24.03.2020 14:26:33
Процедура ПолучитьСкидкиИзВнешнейСистемыНаСервере(ТекстОшибки)

	Перем ДанныеПрограммы;

	Если ОбменСБанкамиСервер.ВыполнитьДвиженияПоРегиструДанныеКредитныхПрограмм(Объект.Ссылка, КредитУслугаБанка, Ложь, ДанныеПрограммы) Тогда

		ЗначенияРеквизитов = Новый Структура(
			"Магазин, Контрагент, ДокументПродажи, БонусБазаСписать, ИспользоватьБонусАкция, СкидочныеКупоны,
			|КупоныПринятые, КупоныВыданные"
			, Объект.Магазин
			, Объект.Контрагент
			, ДанныеПрограммы.ДокументПродажи
			, 0
			, Истина
			, Новый ТаблицаЗначений
			, Ложь, Ложь
		);
		ЗначенияРеквизитов.СкидочныеКупоны.Колонки.Добавить("НомерСтроки"  , Новый ОписаниеТипов("Число"));
		ЗначенияРеквизитов.СкидочныеКупоны.Колонки.Добавить("СерийныйНомер", Новый ОписаниеТипов("СправочникСсылка.СерийныеНомера"));
		ЗначенияРеквизитов.СкидочныеКупоны.Колонки.Добавить("Принят"       , Новый ОписаниеТипов("Булево"));

		ДанныеДокумента  = ОбменMicrosoftDynamicsКлиентСервер.ПодготовитьДанныеДокумента(Объект, ЗначенияРеквизитов);
		ДанныеРасчетаCRM = ОбменMicrosoftDynamicsСлужебный.ПолучитьСкидкиПоДокументуПродажи(ДанныеДокумента, УникальныйИдентификатор, ТекстОшибки);

		Если ПустаяСтрока(ТекстОшибки) И ТипЗнч(ДанныеРасчетаCRM) = Тип("Структура") Тогда

			ОбменMicrosoftDynamicsКлиентСервер.ПрименитьДанныеРасчета(Объект, ДанныеРасчетаCRM, ДанныеДокумента);
			Модифицированность = Истина;

		Иначе

			ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС, "")
			+ "Расчёт скидок невозможен, так как внешний сервер вернул неожиданные данные!";
			ДанныеРасчетаCRM = Неопределено;

		КонецЕсли;

	Иначе

		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС, "")
		+ "Расчёт скидок невозможен, так как возникла ошибка фиксации данных кредитной программы!";
		ДанныеРасчетаCRM = Неопределено;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()

	Если Объект.Товары.Количество() = 0 ИЛИ НЕ КредитИспользоватьСкидкиНаценки Тогда

		Возврат;

	КонецЕсли;

	СоставОповещения = Новый Структура(
		"Заголовок, Сообщение, Картинка"
		, НСтр("ru = 'Скидки (наценки)'")
		, НСтр("ru = 'Скидки (наценки) рассчитаны'")
		, БиблиотекаКартинок.Информация32
	);
	
	Если НаборПравИНастроек.ПродажиАктивированы Тогда

		Если Модифицированность Тогда

			СоставОповещения.Сообщение = НСтр("ru = 'Перед расчётом скидок документ нужно записать.'");
			СоставОповещения.Картинка  = БиблиотекаКартинок.Ошибка32;

		Иначе

			Если НаборПравИНастроек.РесурсMicrosoftDynamicsДоступен Тогда

				Если ПроверитьЗаполнениеПередВыполнениемКоманды() Тогда

					ТекстОшибки = "";
					ПолучитьСкидкиИзВнешнейСистемыНаСервере(ТекстОшибки);

				КонецЕсли;

			Иначе

				СоставОповещения.Сообщение = НСтр("ru = 'При расчёте скидок возникла проблема.'");
				СоставОповещения.Картинка  = БиблиотекаКартинок.Ошибка32;

			КонецЕсли;

		КонецЕсли;

	Иначе

		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
		СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
		СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
		
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
			РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
		Иначе
			РабочееМесто = ""
		КонецЕсли;
		
		СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ДатаДокументаИзмененаВручную Тогда
			Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		КонецЕсли;
		
		РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		
		Если ВывестиСообщения Тогда
			СкидкиНаценкиКлиент.ОткрытьФормуВыводаСообщений(АдресПримененныхСкидокВоВременномХранилище);
		КонецЕсли;

	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	
	ПоказатьОповещениеПользователя(
		СоставОповещения.Заголовок,
		,
		СоставОповещения.Сообщение,
		СоставОповещения.Картинка
	);
	
	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Серии

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.ТоварыСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыУказатьСерии.Видимость        = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУказанияСерий()
	
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	
	ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы ,ПараметрыФормыУказанияСерий,ЭтотОбъект);
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	
КонецФункции

#Область ОбработчикиСобытийТабличногоПоляОплата

&НаКлиенте	//	LNK 05.06.2020 08:24:36
Процедура ОплатаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	УправлениеЭлементамиФормыНаКлиенте();

КонецПроцедуры

&НаКлиенте	//	LNK 05.06.2020 08:24:36
Процедура ОплатаПослеУдаления(Элемент)

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	УправлениеЭлементамиФормыНаКлиенте();

КонецПроцедуры

&НаКлиенте	//	LNK 05.06.2020 08:24:36
Процедура ОплатаСуммаПриИзменении(Элемент)

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммуКредита(Объект.Товары, Объект.Оплата, Объект.ЦенаВключаетНДС, СуммаКредита);
	УправлениеЭлементамиФормыНаКлиенте();

КонецПроцедуры
	
#КонецОбласти

&НаКлиенте	//	LNK 31.07.2021 09:00:50
Процедура БонусныеБаллыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле = Элементы.БонусныеБаллыПрограммаЛояльности И НЕ Элемент.ТекущиеДанные = Неопределено Тогда

		СтандартнаяОбработка = Ложь;
		ОткрытьЗначение(Элемент.ТекущиеДанные.ПрограммаЛояльности);

	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура ПередЗаписьюКлиент(Отказ, РежимЗаписи)
	
	УстановитьСтрокуПрограммыПоРеквизитам();

//	Если документ проводится, рассчитаем скидки
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ НаборПравИНастроек.ПродажиАктивированы Тогда
	
		Если ИспользоватьАвтоматическиеСкидкиВПродажах
			И КредитИспользоватьСкидкиНаценки
			И НЕ Объект.СкидкиРассчитаны 
			И Объект.Товары.Количество() > 0 Тогда
			
			ОтветНаВопрос = СкидкиНаценкиКлиент.ПредложитьПользователюРассчитатьСкидки();
			
			Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда

				Отказ = Истина;
				Возврат;

			ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.ОК Тогда
				
				РассчитатьСкидкиНаценкиКлиент();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьАвторасчетНДСКлиент();
	
	Отказ = Отказ Или Не ПроверкаКредитУслугаБанкаКартаКлиента();
	
КонецПроцедуры

&НаКлиенте	//	LNK 10.04.2020 09:54:57
Процедура УстановитьСтрокуПрограммыПоРеквизитам()

	Объект.КредитныеПрограммы.Очистить();

	СтрокаПрограммы = Объект.КредитныеПрограммы.Добавить();
	СтрокаПрограммы.УслугаБанка = КредитУслугаБанка;
	СтрокаПрограммы.УслугаБанкаПериодПредоставления = КредитУслугаБанкаПериодПредоставления;
	СтрокаПрограммы.КартаКлиентаДляОплатыЧастями = КредитУслугаБанкаКартаКлиента;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Функция ПараметрыДляНазначенияРучнойСкидки()
	
	Возврат СкидкиНаценкиСервер.ПараметрыДляНазначенияРучнойСкидки(Объект);
	
КонецФункции

&НаСервере
Процедура ПерезаполнитьНалогообложениеНДС()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("УчитыватьНДС");
	
	НовоеНалогообложение = НДСОбщегоНазначенияСервер.ПолучитьИОбработатьДоступностьНалогообложениеНДС(Объект.Организация, Объект.Контрагент, Объект.Дата, Истина, Элементы, МассивЭлементов);
	
	Если НДСОбщегоНазначенияСервер.НужноОбработатьНовоеНалогообложениеНДС(Объект.УчитыватьНДС, НовоеНалогообложение) Тогда
		
		Объект.УчитыватьНДС = НовоеНалогообложение;
		ПриИзмененииУчитыватьНДССервер();
		
	Иначе
		
		МассивЭлементов.Очистить();
		МассивЭлементов.Добавить("ГруппаАвторасчетНДС");
		
		НДСИсходящийСервер.ПолучитьФлагИОбработатьДоступностьАвторасчетаНДС(Объект.УчитыватьНДС, Объект.Магазин, Объект.Дата, Элементы, МассивЭлементов, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьАвторасчетНДСКлиент()
	
	Если (НЕ ПерерасчетПроизведен) И Объект.АвторасчетНДС Тогда
		
		ВыполнитьАвторасчетНДССервер();
		ПерерасчетПроизведен = Истина;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ВыполнитьАвторасчетНДССервер()
	
	// соответствие для хранения погрешностей округлений
	ПогрешностиОкругления = Новый Соответствие();
	// пересчет сумм НДС с учетом ошибок округления
	НДСИсходящийСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.Товары, Объект.Ссылка, Объект.ЦенаВключаетНДС, ПогрешностиОкругления, "Товары", "грн",,,Неопределено);
	
	
	
КонецПроцедуры

&НаСервере
Процедура ПечатьНННаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПечатьНН(Команда)
	ПечатьНННаСервере();
КонецПроцедуры

&НаКлиенте	//	LNK 24.03.2020 13:14:09
Процедура Подключаемый_ДоступностьMicrosoftDynamics()

	НаборПравИНастроек.Вставить("РесурсMicrosoftDynamicsДоступен", РозничныеПродажиСлужебный.РесурсMicrosoftDynamicsДоступен());
	НаборПравИНастроек.Вставить("РесурсWebRetailДоступен", РозничныеПродажиСлужебный.РесурсWebRetailДоступен());

	УправлениеЭлементамиФормыНаКлиенте();

КонецПроцедуры

#Область ПроверкаСостоянияКредитнойпрограммы

&НаКлиенте	//	LNK 13.05.2020 06:47:00
Процедура Подключаемый_СостояниеКредитнойПрограммы()

	Если ПроверитьЗаполнениеПередВыполнениемКоманды(Ложь) Тогда

		ПроверитьСостояниеКредитнойПрограммы();

	КонецЕсли;

	УправлениеЭлементамиФормыНаКлиенте();

КонецПроцедуры

&НаКлиенте	//	LNK 27.05.2020 11:10:40
Процедура ОчиститьКредитнуюПрограмму()

	Если НЕ КредитУслугаБанка.Пустая() Тогда

		КредитУслугаБанка = Неопределено;
		КредитГарантированоБанком = Ложь;
		КредитУслугаБанкаПериодПредоставления = 0;
		КредитУслугаБанкаКартаКлиента = "";
		КредитИспользоватьСкидкиНаценки = Ложь;

		ПроверитьСостояниеКредитнойПрограммы();

		УправлениеЭлементамиФормыНаКлиенте();

	КонецЕсли;

КонецПроцедуры

&НаСервере	//	LNK 13.05.2020 06:54:43
Процедура ПроверитьСостояниеКредитнойПрограммы()
	
	Если Объект.ОснованиеЗаявки.Пустая() Тогда 
		КредитСостояние   = ОбменСБанкамиСервер.ПолучитьСостояниеКредитнойПрограммы(Объект.Ссылка, КредитУслугаБанка);
	Иначе 
		КредитСостояние   = ОбменСБанкамиСервер.ПолучитьСостояниеКредитнойПрограммы(Объект.Ссылка, КредитУслугаБанка, Объект.ОснованиеЗаявки);
	КонецЕсли;
	
		
	УслугаБанкаДанные = ФинансыВызовСервера.ПолучитьДанныеУслугаБанка(КредитУслугаБанка, Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура КредитПроверитьСостояниеЗаявкиНаОформлениеКредита(Команда)

	ТекстСообщения = "";

	ПроверитьСостояниеЗаявкиНаОформлениеКредитаНаСервере(ТекстСообщения);
	Подключаемый_СостояниеКредитнойПрограммы();

КонецПроцедуры

&НаСервере
Процедура ПроверитьСостояниеЗаявкиНаОформлениеКредитаНаСервере(ТекстСообщения)

	ОбменСБанкамиСервер.ПроверитьСостояниеЗаявкиНаОформлениеКредита(Объект.Ссылка, КредитУслугаБанка, ТекстСообщения);
	ПроверитьСостояниеКредитнойПрограммы();
	
	//Если КредитнаяПрограммаАльфаБанк(КредитРеквизиты)
	//		И ((Не ПроверитьСтатусЗаявки(КредитСостояние, "Перечисление.СтатусыЗаявкиНаОформлениеКредита.Рассматривается") 
	//			И Не ПроверитьСтатусЗаявки(КредитСостояние, "Перечисление.СтатусыЗаявкиНаОформлениеКредита.ПустаяСсылка"))
	//				Или ПроверитьСтатусЗаявки(КредитСостояние, "Перечисление.СтатусыЗаявкиНаОформлениеКредита.РассматриваетсяВозрат")) Тогда
	Если КредитнаяПрограммаАльфаБанк(КредитРеквизиты)
			И ((Не ПроверитьСтатусЗаявки(КредитСостояние, "Перечисление.СтатусыЗаявкиНаОформлениеКредита.ПустаяСсылка"))
					Или ПроверитьСтатусЗаявки(КредитСостояние, "Перечисление.СтатусыЗаявкиНаОформлениеКредита.РассматриваетсяВозрат")) Тогда
		Объект.ОформлениеЗавершено = Истина;
		Записать();
	КонецЕсли;


КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьСтатусЗаявки(КредитСостояние, СтатусЗаявки)

	Если ТипЗнч(КредитСостояние) = Тип("Структура") Тогда

		ПроверитьСтатусЗаявки = (КредитСостояние.Статус = ПредопределенноеЗначение(СтатусЗаявки));

	Иначе

		ПроверитьСтатусЗаявки = Ложь;

	КонецЕсли;

	Возврат ПроверитьСтатусЗаявки;

КонецФункции

&НаСервереБезКонтекста
Функция КредитнаяПрограммаАльфаБанк(КредитРеквизиты)

	Если ТипЗнч(КредитРеквизиты) = Тип("Структура") Тогда

		КредитнаяПрограммаАльфаБанк = (КредитРеквизиты.ТипИнтернетБанкинга = Перечисления.ТипыИнтернетБанкинга.Альфабанк) И (КредитРеквизиты.ТипУслуги = Перечисления.ТипыУслугБанка.ОплатаЧастями);
		
	Иначе

		КредитнаяПрограммаАльфаБанк = Ложь;

	КонецЕсли;

	Возврат КредитнаяПрограммаАльфаБанк;

КонецФункции

&НаСервереБезКонтекста
Функция ЕстьПродажаПоПрограмме(КредитСостояние)

	Если ТипЗнч(КредитСостояние) = Тип("Структура") Тогда
		
		ЕстьПродажаПоПрограмме = Не (КредитСостояние.ДокументПродажи.ПолучитьОбъект() = Неопределено);

	Иначе

		ЕстьПродажаПоПрограмме = Ложь;

	КонецЕсли;

	Возврат ЕстьПродажаПоПрограмме;

КонецФункции

#КонецОбласти

#Область КомандыКредитнаяПрограмма

&НаСервере	//	LNK 15.04.2020 11:14:10
Функция ВалидацияПокупателя(ДанныеКлиента, ТекстСообщения)

	ТекстСообщения = "";
	Отказ = Ложь;

	ДанныеКлиента = ОбменСБанкамиСервер.Валидация(Объект.НомерТелефона, КредитУслугаБанка, Отказ, ТекстСообщения);

	Возврат НЕ Отказ;

КонецФункции

&НаСервере	//	LNK 10.04.2020 10:48:36
Функция КредитПодатьЗаявкуНаОформлениеНаСервере(ТекстСообщения)

	Отказ = Ложь;

	Если ОбменСБанкамиСервер.ВыполнитьДвиженияПоРегиструДанныеКредитныхПрограмм(Объект.Ссылка, КредитУслугаБанка, Отказ) Тогда

		Если НЕ РежимБезИнтеграции(КредитРеквизиты) Тогда

			Отказ = НЕ ОбменСБанкамиСервер.ПодатьЗаявкуНаОформлениеКредита(Объект.Ссылка, КредитУслугаБанка, ТекстСообщения);

		КонецЕсли;

		Если НЕ Отказ Тогда
			
			Если Не КредитнаяПрограммаАльфаБанк(КредитРеквизиты) Тогда
				Объект.ОформлениеЗавершено = Истина;
				Записать();
			КонецЕсли;
			

		КонецЕсли;

	Иначе

		ТекстСообщения = "Ошибка! Невозможно записать данные кредитной программы";

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

Функция КредитПодатьЗаявкуНаОформлениеВозвратаНаСервере(ТекстСообщения)

	Отказ = Ложь;

	Если ОбменСБанкамиСервер.ВыполнитьДвиженияПоРегиструДанныеКредитныхПрограмм(Объект.Ссылка, КредитУслугаБанка, Отказ,, Истина) Тогда

		Если НЕ РежимБезИнтеграции(КредитРеквизиты) Тогда

			Отказ = НЕ ОбменСБанкамиСервер.ПодатьЗаявкуНаОформлениеВозврата(Объект.Ссылка, КредитУслугаБанка, ТекстСообщения);

		КонецЕсли;

		Если НЕ Отказ Тогда
			Объект.ОформлениеЗавершено = Истина;
			Записать();
		КонецЕсли;

	Иначе

		ТекстСообщения = "Ошибка! Невозможно записать данные кредитной программы";

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

&НаКлиенте	//	LNK 10.04.2020 10:48:31
Процедура КредитПодатьЗаявкуНаОформление(Команда)
	
	Если ПроверитьЗаполнениеПередВыполнениемКоманды() Тогда

		ТекстСообщения = "";

		Если СостояниеКнопкиПодать = 3 Тогда
			СостояниеЗаявки = КредитОбновитьЗаявкуНаОформлениеНаСервере(ТекстСообщения);
		ИначеЕсли СостояниеКнопкиПодать = 4 Тогда 
			СостояниеЗаявки = КредитЗакрытьЗаявкуНаОформлениеНаСервере(ТекстСообщения);
		ИначеЕсли СостояниеКнопкиПодать = 5 Тогда 
			СостояниеЗаявки = КредитПодатьЗаявкуНаОформлениеВозвратаНаСервере(ТекстСообщения);
		Иначе 
			СостояниеЗаявки = КредитПодатьЗаявкуНаОформлениеНаСервере(ТекстСообщения);
		КонецЕсли;
		
		Если СостояниеЗаявки Тогда
			
			ПроверитьСостояниеКредитнойПрограммы();
			КредитПроверитьСостояниеЗаявкиНаОформлениеКредита(Команда);
			
		Иначе
			
			Сообщить(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;

	//КредитПроверитьСостояниеЗаявкиНаОформлениеКредита(Команда);

	УправлениеЭлементамиФормыНаКлиенте();

КонецПроцедуры

&НаКлиенте	//	LNK 10.04.2020 10:48:45
Функция ПроверитьЗаполнениеПередВыполнениемКоманды(ВывестиСообщение = Истина)

	ТекстСообщения = "";

	Если Модифицированность Тогда

		ТекстСообщения = "Необходимо записать текущий документ.";

	КонецЕсли;

	Если ПустаяСтрока(ТекстСообщения) И НЕ Объект.Проведен Тогда

		ТекстСообщения = "Необходимо провести текущий документ.";

	КонецЕсли;

	Если ПустаяСтрока(ТекстСообщения) Тогда

		ПроверитьСостояниеКредитнойПрограммы();	//	обновим значения

		Если КредитУслугаБанка.Пустая() Тогда

			ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
			+ "Необходимо указать кредитную программу.";

		КонецЕсли;

		Если КредитУслугаБанкаПериодПредоставления = 0 Тогда

			ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
			+ "Необходимо указать глубину кредитной программы.";

		КонецЕсли;

		Если ТипЗнч(УслугаБанкаДанные) = Тип("Структура") Тогда

			Если СуммаКредита < УслугаБанкаДанные.СуммаМинимальногоКредита Тогда

				ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
				+ "Сумма кредита НЕДОСТАТОЧНА! Ограничение минимальной суммы кредита (" + Формат(УслугаБанкаДанные.СуммаМинимальногоКредита, "ЧДЦ=2; ЧН=0,00") + ")";

			КонецЕсли;
			
			Если УслугаБанкаДанные.ТипИнтернетБанкинга = ПредопределенноеЗначение("Перечисление.ТипыИнтернетБанкинга.Альфабанк") И
				 УслугаБанкаДанные.ТипУслуги = ПредопределенноеЗначение("Перечисление.ТипыУслугБанка.ОплатаЧастями") И
				 Не СтрДлина(СокрЛП(КредитУслугаБанкаКартаКлиента)) = 4 Тогда 
				 
				ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
				+ "Необходимо указать последние четыре цифры карты клиента.";
			КонецЕсли;		

		КонецЕсли;

	КонецЕсли;

	Если ВывестиСообщение И НЕ ПустаяСтрока(ТекстСообщения) Тогда

		Сообщить(ТекстСообщения);

	КонецЕсли;

	Возврат ПустаяСтрока(ТекстСообщения);

КонецФункции

&НаСервере	//	LNK 31.05.2020 14:02:29
Функция КредитОтменитьЗаявкуНаОформлениеКредитаНаСервере(ТекстСообщения)

	Возврат ОбменСБанкамиСервер.ОтменитьЗаявкуНаОформлениеКредита(Объект.Ссылка, КредитУслугаБанка, ТекстСообщения);

КонецФункции

&НаКлиенте
Процедура КредитОтменитьЗаявкуНаОформлениеКредита(Команда)

	ТекстСообщения = "";
	
	Если КредитнаяПрограммаАльфаБанк(КредитРеквизиты) Тогда 
		
		СостояниеЗаявки = КредитОтменитьЗаявкуНаОформлениеКредитаНаСервере(ТекстСообщения);
		
		Если Не СостояниеЗаявки.Отказ Тогда
			ПроверитьСостояниеЗаявкиНаОформлениеКредитаНаСервере(ТекстСообщения);
		КонецЕсли;
		
		УправлениеЭлементамиФормыНаКлиенте();
		
		Подключаемый_СостояниеКредитнойПрограммы();
		
	Иначе 
		
		КредитОтменитьЗаявкуНаОформлениеКредитаНаСервере(ТекстСообщения);

		УправлениеЭлементамиФормыНаКлиенте();

		ПроверитьСостояниеЗаявкиНаОформлениеКредитаНаСервере(ТекстСообщения);
		Подключаемый_СостояниеКредитнойПрограммы();
	КонецЕсли;
	

КонецПроцедуры

&НаСервере
Функция КредитОбновитьЗаявкуНаОформлениеНаСервере(ТекстСообщения)

	Отказ = Ложь;

	Если ОбменСБанкамиСервер.ВыполнитьДвиженияПоРегиструДанныеКредитныхПрограмм(Объект.Ссылка, КредитУслугаБанка, Отказ,,Истина) Тогда

		Если НЕ РежимБезИнтеграции(КредитРеквизиты) Тогда

			Отказ = НЕ ОбменСБанкамиСервер.ОбновитьЗаявкуНаОформлениеКредита(Объект.Ссылка, КредитУслугаБанка, ТекстСообщения);

		КонецЕсли;

		Если НЕ Отказ Тогда
			
			Если Не КредитнаяПрограммаАльфаБанк(КредитРеквизиты) Тогда
				Объект.ОформлениеЗавершено = Истина;
				Записать();
			КонецЕсли;
			

		КонецЕсли;

	Иначе

		ТекстСообщения = "Ошибка! Невозможно записать данные кредитной программы";

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

&НаСервере
Функция КредитЗакрытьЗаявкуНаОформлениеНаСервере(ТекстСообщения)

	Отказ = Ложь;

	Если ОбменСБанкамиСервер.ВыполнитьДвиженияПоРегиструДанныеКредитныхПрограмм(Объект.Ссылка, КредитУслугаБанка, Отказ) Тогда

		Если НЕ РежимБезИнтеграции(КредитРеквизиты) Тогда

			Отказ = НЕ ОбменСБанкамиСервер.ЗакрытьЗаявкуНаОформлениеКредита(Объект.Ссылка, КредитУслугаБанка, ТекстСообщения);

		КонецЕсли;

	Иначе

		ТекстСообщения = "Ошибка! Невозможно записать данные кредитной программы";

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

#КонецОбласти

#Область OTPВерификацияНомераТелефона

&НаКлиенте	//	LNK 15.04.2020 07:52:39
Процедура ВыполнитьOTPВерификацию(Команда)

	ПараметрыОткрытия  = Новый Структура("НомерТелефона", Объект.НомерТелефона);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьOTPВерификациюЗавершение", ЭтотОбъект);

	ОткрытьФорму("Документ.СчетНаОплатуПокупателю.Форма.ФормаВерификацииКонтрагента"
		, ПараметрыОткрытия
		, ЭтотОбъект
		, ЭтотОбъект
		,,
		, ОписаниеОповещения
		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);

КонецПроцедуры

&НаКлиенте	//	LNK 15.04.2020 08:50:28
Процедура ВыполнитьOTPВерификациюЗавершение(РезультатВерификации, ДополнительныеПараметры)	Экспорт

	Перем ДанныеКлиента, ТекстСообщения;

	Если РезультатВерификации = Истина Тогда

		РежимБезИнтеграции = РежимБезИнтеграции(КредитРеквизиты);

		Если РежимБезИнтеграции Тогда

			РеквизитыПокупателяСоответствуютЗавершение(КодВозвратаДиалога.Да, Неопределено);

		Иначе

			Если ВалидацияПокупателя(ДанныеКлиента, ТекстСообщения) Тогда
				
				ОписаниеОповещения = Новый ОписаниеОповещения("РеквизитыПокупателяСоответствуютЗавершение", ЭтотОбъект);

				ПоказатьВопрос(ОписаниеОповещения
					, "Подтвердите совпадение данных покупателя"
					+ Символы.ПС + "«" + ДанныеКлиента.Представление + "»"
					+ Символы.ПС + "[Да]  - оператор согласен с данными, полученными от банка"
					+ Символы.ПС + "[Нет] - отменить результат верификации"
					, РежимДиалогаВопрос.ДаНет
					, 120
					, КодВозвратаДиалога.Да
					, "Проверка ответа банка"
					, КодВозвратаДиалога.Нет
				);

			Иначе

				ПоказатьОповещениеПользователя("Отказ банка"
				,, "Банк не подтвердил данных клиента" + Символы.ПС + ТекстСообщения
				, БиблиотекаКартинок.Ошибка32);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	УправлениеЭлементамиФормыНаКлиенте();

КонецПроцедуры

&НаКлиенте	//	LNK 16.04.2020 07:21:53
Процедура РеквизитыПокупателяСоответствуютЗавершение(КодВозврата, ДополнительныеПараметры)	Экспорт

	Если КодВозврата = КодВозвратаДиалога.Да Тогда

		Объект.НомерТелефонаПодтвержден = Истина;
		Модифицированность = Истина;

		УправлениеЭлементамиФормыНаКлиенте();

	КонецЕсли;

КонецПроцедуры

#КонецОбласти




