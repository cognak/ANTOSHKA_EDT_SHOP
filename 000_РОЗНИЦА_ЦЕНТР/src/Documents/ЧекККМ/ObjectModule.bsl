////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем РежимРМК Экспорт; // Переменная, указывающая что проведение чека производится из режима регистрации продаж

Перем КонтролироватьОстаткиТоваровПриЗакрытииЧека Экспорт;// Переменная хранит признак контроля остатков при закрытии чека

Перем мСоответствиеТиповСкладов;

#Область ОбработчикиСобытийОбъекта

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		БонусныеБаллыСервер.ПроверитьДокументКлючСвязиБонусныхБаллов(ДанныеЗаполнения);	//	LNK 01.07.2021 11:26:45

		ВызватьИсключение "Запрещен ввод чека на основании другого чека!
						  |Допустима работа только в режиме РМК.";

		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
			
			ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
			ПроверитьВозможностьВводаНаОснованииЧекаККМ(ДанныеЗаполнения);
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект
				, ДанныеЗаполнения
				, "ВладелецДисконтнойКарты, ДисконтнаяКарта, ДоговорСтрахования, КассаККМ, Организация, СуммаДокумента, Магазин, ДоговорЭквайринга, Продавец, ЦенаВключаетНДС,
				  |ЗаказПокупателя, УслугаБанка, УслугаБанкаПериодПредоставления");
			
			ЧекККМПродажа   = ДанныеЗаполнения;
			ВидОперации     = Перечисления.ВидыОперацийЧекККМ.Возврат;
			ДисконтнаяКарта = ДанныеЗаполнения.ДисконтнаяКарта;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.Товары           , Товары);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.Оплата           , Оплата);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.УправляемыеСкидки, УправляемыеСкидки);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.Подарки          , Подарки);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.СкидкиНаценки    , СкидкиНаценки);
			
			ЗапасыСервер.УдалитьПодарочныеСертификаты(Товары);
			
			ТаблицаОплата = Оплата.Выгрузить();
			ТаблицаОплата.ЗаполнитьЗначения(Ложь, "ДанныеПереданыВБанк");
			
			Оплата.Загрузить(ТаблицаОплата);
			
			КолвоЭлементовКоллекции = Оплата.Количество();
			Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
				ЭлементКоллекции = Оплата[КолвоЭлементовКоллекции - ОбратныйИндекс];
				
				Если ЭлементКоллекции.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом Тогда
					Оплата.Удалить(ЭлементКоллекции);
				КонецЕсли;
			КонецЦикла;

		Иначе

			ТекстОшибки = НСтр("ru='Ввод на основании осуществляется только для оформления возврата.
			|Заполнение документа не выполнено.'");
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
//		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
//		
//		Если ДанныеЗаполнения.Статус = Перечисления.СтатусыЗаказовПокупателей.НеСогласован Тогда
//			ТекстОшибки = НСтр("ru='Заказ не согласован.
//			|Заполнение документа не выполнено.'");
//			
//			ВызватьИсключение ТекстОшибки;
//		ИначеЕсли ДанныеЗаполнения.Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт Тогда
//			ТекстОшибки = НСтр("ru='Заказ закрыт.
//			|Заполнение документа не выполнено.'");
//			
//			ВызватьИсключение ТекстОшибки;
//			
//		КонецЕсли;
//		
//		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, "Магазин, ДисконтнаяКарта, ЦенаВключаетНДС, ВладелецДисконтнойКарты, Организация, Продавец");
//		
//		ЗаказПокупателя = ДанныеЗаполнения.Ссылка;
//		ВидОперации     = Перечисления.ВидыОперацийЧекККМ.Продажа;
//		
//		РозничныеПродажиСервер.ЗаполнитьПоОстаткамЗаказа(ЭтотОбъект, ЗаказПокупателя);
//		
//		Если ДанныеЗаполнения.СтатусОплаты = Перечисления.СтатусОплаты.Оплачен Тогда	
//			ТаблицаОплата = Оплата.Добавить();
//			ТаблицаОплата.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПлатежнойКартой;
//			ТаблицаОплата.Сумма = ДанныеЗаполнения.СуммаОплаты;
//		КонецЕсли;
		
		
		
		
		
		УчетнаяПолитика = ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику();
		ДанныеМагазина = РозничныеПродажиСерверПовтИсп.РеквизитыМагазина(УчетнаяПолитика.ИнтернетМагазин);
		ЦенаВключаетНДС = ДанныеМагазина.ЦенаВключаетНДС;
		Дата = ТекущаяДатаСеанса();
		ДанныеЗаказаРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "УчетнаяСистема, ДокументОснование, ТипОплаты");
		ОбработкаВ1С = (ДанныеЗаказаРеквизиты.УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.Розница);
		Запрос = Новый Запрос(ЗаказыПокупателейСервер.ТекстЗапросаДанныеЗаказаПокупателя(ОбработкаВ1С));
		Запрос.УстановитьПараметр("Магазин", УчетнаяПолитика.ИнтернетМагазин);
		Запрос.УстановитьПараметр("ЗаказПокупателя", ДанныеЗаполнения);
		Запрос.УстановитьПараметр("ЭтоУзелИнтернетМагазина", РозничныеПродажиСерверПовтИсп.ЭтоУзелИнтернетМагазина());
		Запрос.УстановитьПараметр("УслугаДоставкиЗаказаПокупателя", ДанныеМагазина.УслугаДоставкиЗаказаПокупателя);
		Запрос.УстановитьПараметр("ВсеПродажиБезНДС", РозничныеПродажиСерверПовтИсп.ВсеПродажиБезНДС(ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("ОбменныйЗаказ", Не ДанныеЗаказаРеквизиты.ДокументОснование.Пустая());
	
		РезультатыЗапроса = Запрос.ВыполнитьПакет();

		Шапка = РезультатыЗапроса[1].Выбрать();
		
		Если Шапка.Следующий() Тогда

			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Шапка);
			ЗаказПокупателя = ДанныеЗаполнения;
			ВладелецДисконтнойКарты = Шапка.Покупатель;
			Магазин = ДанныеМагазина.Магазин;
			Организация = ДанныеМагазина.Организация;
			Если РозничныеПродажиСерверПовтИсп.ЭтоУзелИнтернетМагазина() Тогда
	
				Если НЕ Шапка.СуммаДоставки = Цел(Шапка.СуммаДоставки) Тогда
	
					ВызватьИсключение "Отказано! Сумма доставки не является целой суммой.";
	
				КонецЕсли;
	
			КонецЕсли;

			Товары.Очистить();
			ВыдачаСкидочныхКупонов.Очистить();
			
			ТоварыВыборка = РезультатыЗапроса[2].Выбрать();

			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки"	, Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"			, Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено"	, Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано"	, Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект));

			КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

			Пока ТоварыВыборка.Следующий() Цикл
	
				СтрокаТовары = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовары, ТоварыВыборка);

				Если РозничныеПродажиСерверПовтИсп.ВсеПродажиБезНДС(ТекущаяДатаСеанса())
						И НЕ ТоварыВыборка.СтавкаНДС = ТоварыВыборка.СтавкаНДС_Ссылка	Тогда
	
					СтрокаТовары.СтавкаНДС = ТоварыВыборка.СтавкаНДС_Ссылка;
	
					ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(СтрокаТовары, СтруктураДействий, КэшированныеЗначения);
					ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(СтрокаТовары, ЦенаВключаетНДС);
	
				КонецЕсли;

			КонецЦикла;

			ВыдачаСкидочныхКупонов.Загрузить(РезультатыЗапроса[3].Выгрузить());
			ПогашениеСкидочныхКупонов.Загрузить(РезультатыЗапроса[4].Выгрузить());
			СкидкиНаценки.Загрузить(РезультатыЗапроса[5].Выгрузить());
			НачислениеБонусныхБаллов.Загрузить(РезультатыЗапроса[6].Выгрузить());
			ОплатаБонуснымиБаллами.Загрузить(РезультатыЗапроса[7].Выгрузить());
			
			Если ДанныеЗаказаРеквизиты.ТипОплаты = Перечисления.ТипОплатыЗаказПокупателя.Наличные Тогда
				ВидОплатыЧека = Справочники.ВидыОплатЧекаККМ.Послеплата;
			Иначе
				ВидОплатыЧека = Справочники.ВидыОплатЧекаККМ.Предоплата;
			КонецЕсли;
			НоваяОплата = Оплата.Добавить();
			НоваяОплата.ВидОплаты = ВидОплатыЧека;
			НоваяОплата.Сумма = Шапка.СуммаДокумента;
			 
		КонецЕсли;

	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
	ИначеЕсли НЕ ДанныеЗаполнения = Неопределено Тогда
		
		ИспользоватьЗаказыПокупателей = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПокупателей");
		
		Если ИспользоватьЗаказыПокупателей Тогда
			ТекстОшибки = НСтр("ru='Ввод на основании осуществляется для оформления возврата по чеку ККМ или для оформления продажи по заказу покупателя.
				|Заполнение документа не выполнено.'");
		Иначе
			ТекстОшибки = НСтр("ru='Ввод на основании осуществляется для оформления возврата по чеку ККМ.
				|Заполнение документа не выполнено.'");
		КонецЕсли;
			
		ВызватьИсключение ТекстОшибки;
	
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Если НЕ ПодарочныеСертификатыСервер.ОбработкаПроведенияКонтроль(?(ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, "Возврат", "Продажа"), ЭтотОбъект, Отказ) Тогда

		Возврат;	//	LNK 05.03.2020 10:39:13

	КонецЕсли;

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ПодготовитьНаборыЗаписейКРегистрацииДвижений(Отказ, РежимПроведения);	//	LNK 08.11.2022 06:42:18 - локальный метод

	РаботаемПроведение = Истина;

	Если ДополнительныеСвойства.РежимЗакрытияСмены Тогда

	//	LNK 05.03.2020 10:13:25
	//	Всё время забываю об этой отсечке при закрытии кассовой смены. Разместим здесь ключ поиска.. на всякий случай.
	//	Обработки.ЗакрытиеКассовойСмены.Создать()

		Если ДополнительныеСвойства.УчетнаяПолитика.ИспользоватьЧекиКакРегистраторыНачисленияБонусныхБаллов = Истина Тогда

			КоллекцияДвижений = Новый Массив;
			КоллекцияДвижений.Добавить(Новый Структура("Индекс, НаборЗаписей, Номер", 3, Движения.БонусныеБаллы, "НомерСтроки"));
			КоллекцияДвижений.Добавить(Новый Структура("Индекс, НаборЗаписей, Номер", 4, Движения.БонусныеБаллыВРезерве, "НомерСтроки"));
			КоллекцияДвижений.Добавить(Новый Структура("Индекс, НаборЗаписей, Номер", 5, Движения.СписанныеБонусныеБаллы, "НомерСтрокиДокумента"));

			Документы.ЧекККМ.ВыполнитьДвиженияБонуснаяСистемаЛояльности(Ссылка, Дата,, КоллекцияДвижений, Ложь, Ложь);

		КонецЕсли;

		РегистрыСведений.РеализацияЗаказовПокупателей.ВыполнитьДвиженияРеализацияЗаказовПокупателей(	//	LNK 13.07.2022 06:21:33
			  Ссылка
			, Дата
			,
			, Движения.РеализацияЗаказовПокупателей
			, Ложь
			, Ложь
			, 0
		);

		РаботаемПроведение = Ложь;

	ИначеЕсли ДополнительныеСвойства.Свойство("ЗагрузкаДанныхИзРабочегоМеста") Тогда	//	нет у нас "рабочих мест".. на текущий момент

		Если СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный ИЛИ СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Аннулированный Тогда

			РаботаемПроведение = Ложь;

		КонецЕсли;

	КонецЕсли;

	Если РаботаемПроведение = Истина Тогда
		
		Документы.ЧекККМ.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);	//	получаем таблицы регистров для проведения
		
		ПродажиСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
		ПродажиСервер.ОтразитьПродажиПоДисконтнымКартам(ДополнительныеСвойства, Движения, Отказ);
		
		ПродажиСервер.ОтразитьПродажиПоДисконтнымКартамСкидка(ДополнительныеСвойства, Движения, Отказ);
		
		ПродажиСервер.ОтразитьПродажиПоПлатежнымКартам(ДополнительныеСвойства, Движения, Отказ);
		ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
		ПроведениеСервер.ОтразитьДвиженияПоРегистру("ТоварыНаМагазинах", ДополнительныеСвойства, Движения, Отказ); 
		ЗапасыСервер.ОтразитьДвиженияСерийныхНомеров(ДополнительныеСвойства, Движения, Отказ); 
		ЗапасыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
		ДенежныеСредстваСервер.ОтразитьДенежныеСредстваККМ(ДополнительныеСвойства, Движения, Отказ);

		ПродажиСервер.ОтразитьПродажиПоЧекам(ДополнительныеСвойства, Движения, Отказ);
		ПродажиСервер.ОтразитьПродажиПоСкидкамНаценкам(ДополнительныеСвойства, Движения, Отказ);

		ПродажиСервер.ОтразитьПерсональныеПродажиПродавцов(ДополнительныеСвойства, Движения, Отказ);
		
		ОтразитьДвиженияСерийныхНомеровКупонов(Отказ);	//	LNK 10.06.2019 15:07:36

	//	LNK 22.08.2017 16:08:18
		СтрахованиеСервер.ОтразитьТоварыЗастрахованные(ДополнительныеСвойства, Движения, Отказ);
		СтрахованиеСервер.ОтразитьДоговорыСтрахованияОплаченные(ДополнительныеСвойства, Движения, Отказ);
		
	//	LNK 31.08.2017 13:39:25
		ЛимитыРС_Сервер.ОтразитьЛимитыРучныхСкидокМагазины(ДополнительныеСвойства, Движения, Отказ);
	//	LNK 13.12.2017 12:19:26
		МотивационнаяПрограммаСервер.ОтразитьПродажиПоЗаказамПокупателей(ДополнительныеСвойства, Движения, Отказ);

		Если НЕ ДополнительныеСвойства.УчетнаяПолитика.ИнтернетМагазин = Магазин Тогда	//	LNK 01.04.2020 08:22:14

		//	LNK 03.10.2017 12:13:38
			ПроведениеСервер.ОтразитьДвиженияПоРегистру("ЗаказыПокупателей", ДополнительныеСвойства, Движения, Отказ);

		КонецЕсли;

	//	LNK 07.02.2020 14:10:59
		ПроведениеСервер.ОтразитьДвиженияПоРегистру("СостоянияСерийныхНомеров", ДополнительныеСвойства, Движения, Отказ);
	//	Бакан 17.03.2020
		ПроведениеСервер.ОтразитьДвиженияПоРегистру("ДанныеДляНН", ДополнительныеСвойства, Движения,Отказ);

		Если НЕ Движения.СостоянияСерийныхНомеров.Количество() = 0 Тогда	//	очистка, например, и сама доедет.

			Движения.СостоянияСерийныхНомеров.ДополнительныеСвойства.Вставить("УведомитьОбИзменении", Истина);

		КонецЕсли;

		ПроведениеСервер.ОтразитьДвиженияПоРегистру("БонусныеБаллы"			, ДополнительныеСвойства, Движения, Отказ);
		ПроведениеСервер.ОтразитьДвиженияПоРегистру("БонусныеБаллыВРезерве"	, ДополнительныеСвойства, Движения, Отказ);
		ПроведениеСервер.ОтразитьДвиженияПоРегистру("СписанныеБонусныеБаллы", ДополнительныеСвойства, Движения, Отказ, "НомерСтрокиДокумента");

		Если НЕ Отказ И (СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый ИЛИ СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный) Тогда

			РегистрыСведений.РеализацияЗаказовПокупателей.ВыполнитьДвиженияРеализацияЗаказовПокупателей(	//	LNK 13.07.2022 06:21:33
				  Ссылка
				, Дата
				, ДополнительныеСвойства.ТаблицыДляДвижений.РезультатыЗапроса
				, Движения.РеализацияЗаказовПокупателей
				, Ложь
				, Ложь
				, 42
			);

		КонецЕсли;

		СформироватьСписокРегистровДляКонтроля();
		
	//	Запись наборов записей
		ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

		ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
		
		ДополнительныеСвойства.Вставить("Отказ", Отказ);
		ТекстСообщения = "";

		Если НЕ Отказ И (СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый ИЛИ СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный) Тогда

			Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") И НЕ ЗаказПокупателя.Пустая() И НЕ УслугаБанка.Пустая() Тогда	//	LNK 04.06.2020 07:56:57

				Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда

					Для каждого СтрокаТабличнойЧасти Из Оплата Цикл

						Если СтрокаТабличнойЧасти.ВидОплаты = Справочники.ВидыОплатЧекаККМ.БанковскийКредит И НЕ СтрокаТабличнойЧасти.Сумма = 0 Тогда

							ОбменСБанкамиСервер.ВыполнитьВозвратПоКредитнойПрограмме(ЧекККМПродажа, ЗаказПокупателя, УслугаБанка, Ссылка, СтрокаТабличнойЧасти.Сумма, ТекстСообщения);

							Прервать;	//	LNK 08.08.2020 10:58:53 - предполагаем, что такая строка - единственная! это принципиально

						КонецЕсли;

					КонецЦикла;

				Иначе

					ОбменСБанкамиСервер.ВыполнитьОтгрузкуПоКредитнойПрограмме(Ссылка, ЗаказПокупателя, УслугаБанка, ТекстСообщения);

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда

			ЖурналСобытий.Регистрация("БАНКИ.ОЧ", УровеньЖурналаРегистрации.Ошибка
				, Метаданные()
				, Ссылка
				,
				, ТекстСообщения
				, СокрЛП(Ссылка)
				, Истина
			);
			Сообщить(ТекстСообщения);

		КонецЕсли;

	КонецЕсли;

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, "Подарки");
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Склад");
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ,Новый Структура("ИмяТЧ","Подарки"));
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,Документы.ЧекККМ.ПараметрыУказанияСерий(ЭтотОбъект),Отказ);
	
	Если ЗначениеЗаполнено(КассаККМ)  Тогда
		
		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
		
		КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		
		ТекстОшибки = НСтр("ru='Кассовая смена не открыта!'");

		Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Дата, ТекстОшибки) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"КассаККМ",
				,
				Отказ
			);
		//	LNK 01.10.2016 12:31:20
			Если Отказ И ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда
				
				Отказ = Ложь;

			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда

		МаркетинговыеАкцииСервер.ПроверитьЧтоНетПодарочныхСертификатов(
			ЭтотОбъект,
			"Товары",
			Отказ
		);
		
		МаркетинговыеАкцииСервер.ПроверитьЧтоНетУслуг(
			ЭтотОбъект,
			"Товары",
			Отказ
		);
		
		МаркетинговыеАкцииСервер.ПроверитьЧтоНетОплатыПодарочнымСертификатом(
			ЭтотОбъект,
			"Оплата",
			Отказ
		);
		
		ПродажиСервер.ПроверитьВозможностьВозвратаПоЧекуККМ(
			ЭтотОбъект,
			Отказ
		);
		
		ПродажиСервер.ПроверитьВозможностьПровестиОплатуПоВозвратуЧекККМ(
			ЭтотОбъект,
			Отказ
			);
		
	Иначе // Продажа
		
		ПродажиСервер.ПроверитьЗаполнениеСклада(
			ЭтотОбъект,
			"Товары",
			Отказ
		);
		
		МаркетинговыеАкцииСервер.ПроверитьЦеныСертификатов(
			ЭтотОбъект,
			"Товары",
			Отказ
		);
		
		МаркетинговыеАкцииСервер.ПроверитьЗаполнениеТабличнойЧастиСерийныеНомера(
			ЭтотОбъект,
			"Товары",
			"СерийныеНомера",
			Отказ
		);
		
		МаркетинговыеАкцииСервер.ПроверитьЗаполнениеТабличнойЧастиПогашениеПодарочныхСертификатов(
			ЭтотОбъект,
			"ПогашениеПодарочныхСертификатов",
			Отказ
		);
		
		//МаркетинговыеАкцииСервер.ПроверитьДвиженияСерийныхНомеровДляПогашения( //	****
		//	ЭтотОбъект,
		//	"ПогашениеПодарочныхСертификатов",
		//	Отказ
		//);
		
		АссортиментСервер.ПроверитьАссортиментТаблицыТоваровДокументаПродажи(
			ЭтотОбъект,
			"Товары",
			Отказ
		);
		
		СкидкиНаценкиСерверПереопределяемый.ПроверитьЗапретРозничнойПродажиТаблицыТоваров(
			ЭтотОбъект,
			"Товары",
			Отказ
		);
		
		МассивНепроверяемыхРеквизитов.Добавить("ЧекККМПродажа");
		МассивНепроверяемыхРеквизитов.Добавить("АналитикаХозяйственнойОперации");
		
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	// В погашении только подарочные сертификаты.
	ПродажиСервер.ПроверитьЗаполнениеТабличнойЧастиОплата(
		ЭтотОбъект,
		Отказ
	);
	
	
	// В погашении только подарочные сертификаты.
	МаркетинговыеАкцииСервер.ПроверитьТабличнуюЧастьПогашения(
		ЭтотОбъект,
		Отказ
	);
	
	МаркетинговыеАкцииСервер.ПроверитьЧтоНетПодарочныхСертификатов(
		ЭтотОбъект,
		"Подарки",
		Отказ
	);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбработкаУдаленияПроведенияСПараметром(Отказ, Истина);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведенияСПараметром(Отказ, ВыполнитьКонтроль)	//	LNK 15.12.2021 12:36:59

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();	//	LNK 22.08.2017 17:27:33

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	Если ВыполнитьКонтроль = Истина Тогда

		ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	КонецЕсли;

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
//	LNK 16.02.2017 14:33:05
	ЗаполнениеОбъектовСобытия.ОбщиеДействияПередЗаписью(ЭтотОбъект, Отказ);
	ДополнительныеСвойства.Вставить("УчетнаяПолитика", ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику());	//	LNK 01.04.2020 08:23:01

	УстановитьАтрибутыПередЗаписью(РежимЗаписи);	//	LNK 25.02.2020 10:28:42
	
//	LNK 06.09.2016 09:30:57
	Если ОбменДанными.Загрузка ИЛИ НЕ ПроверитьУникальностьНомераДокумента(Отказ) Тогда

		Если ЭтоНовый() И НЕ Отказ Тогда	//	LNK 04.01.2019 12:23:22

			ЗаполнениеОбъектовСобытия.ПроверитьУстановкуОбщихРеквизитов(ЭтотОбъект, Отказ);

		КонецЕсли;

		Возврат;

	КонецЕсли;
	
	Если ЭтоНовый() И НЕ Год(Дата) = Год(ТекущаяДатаСеанса()) Тогда

		Дата = ТекущаяДатаСеанса();

	КонецЕсли;

	Если НачалоДня(Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда

		ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);

	КонецЕсли;

	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);

	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "СлужебнаяЗапись", Ложь) = Ложь Тогда

		Если ДополнительныеСвойства.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Отложенный Тогда

			Если НЕ РежимРМК И НЕ ДополнительныеСвойства.Свойство("ЗагрузкаДанныхИзРабочегоМеста") И НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда

				Отказ = Истина;	//	LNK 01.11.2017 11:16:54
				Сообщить("Отказано! Изменение отложенного чека запрещено.");
				Возврат;

			КонецЕсли;

		КонецЕсли;

		Если ((Ссылка.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый
		 И НЕ ДополнительныеСвойства.РежимЗакрытияСмены = Истина)
		 ИЛИ Ссылка.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный
		 ИЛИ Ссылка.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Аннулированный) 
		 И (НЕ ДополнительныеСвойства.Свойство("ЗагрузкаДанныхИзРабочегоМеста")) Тогда

		//	LNK 26.09.2016 13:14:13
			Если НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда	//	ну если очень нужно!

				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Чек ККМ имеет статус ""%1"". Операции над этим документом запрещены!'"),
					СтатусЧекаККМ
				);

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ЭтотОбъект,
					,
					,
					Отказ
				);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	ОбщегоНазначенияРТСервер.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект, Документы.ЧекККМ.ПараметрыУказанияСерий(ЭтотОбъект));

	Если НЕ Отказ Тогда

		ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
			ЭтотОбъект,
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС),
			"СуммаДокумента"
		);
		ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
			ЭтотОбъект,
			Товары.Итог("СуммаБонусныхБалловСписано"),
			"СуммаБонусныхБалловСписано"
		);

	//	LNK 20.09.2019 10:19:08
		ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
			ЭтотОбъект, Товары.Итог("БонусАкцияСписан"), "БонусАкцияСписан"
		);
		ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
			ЭтотОбъект, Товары.Итог("БонусБазаСписан"), "БонусБазаСписан"
		);

	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("Отказ", Отказ);

	Если НЕ Отказ Тогда

		БонусныеБаллыСервер.ЗаполнитьКлючСвязиБонусныхБаллов(Товары);	//	LNK 18.06.2021 11:29:37

		РозничныеПродажиСервер.ПроверитьКоличествоПоУпаковкам(Товары);	//	LNK 21.10.2019 10:57:47

		РеквизитыНоменклатуры = Новый Соответствие;

		Если СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый И ОтчетОРозничныхПродажах.Пустая() Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаСправочник.Ссылка КАК Номенклатура,
			|	ТаблицаСправочник.Маржинальность КАК Маржинальность
			|ИЗ
			|	Справочник.Номенклатура КАК ТаблицаСправочник
			|ГДЕ
			|	ТаблицаСправочник.Ссылка В(&СписокНоменклатура)"
			);
			Запрос.УстановитьПараметр("СписокНоменклатура", Товары.ВыгрузитьКолонку("Номенклатура"));

			Выборка = Запрос.Выполнить().Выбрать();

			Пока Выборка.Следующий() Цикл

				РеквизитыНоменклатуры.Вставить(Выборка.Номенклатура, Выборка.Маржинальность);

			КонецЦикла;

			ПроверитьВыданныеКупоныПоРегиструСерийныеНомераДляАкций(РежимЗаписи, Отказ);	//	LNK 06.09.2021 08:49:14

		КонецЕсли;
		
	//	LNK 09.08.2017 12:58:40
		СкладПродажи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "СкладПродажи");

		Для каждого СтрокаТабличнойЧасти Из Товары Цикл

			Если НЕ СтрокаТабличнойЧасти.Склад.Пустая() И НЕ СтрокаТабличнойЧасти.Склад = СкладПродажи Тогда

				СтрокаТабличнойЧасти.Склад = СкладПродажи;

			КонецЕсли;

			ЗначениеМаржинальность = РеквизитыНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);

			Если НЕ ЗначениеМаржинальность = Неопределено Тогда

				СтрокаТабличнойЧасти.Маржинальность = ЗначениеМаржинальность;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

//	LNK 26.10.2023 17:21:34
	Если ОбработчикДрайвера.Пустая() Тогда

		ОбработчикДрайвера = Справочники.КассыККМ.РеквизитыКассыККМ(КассаККМ).ОбработчикДрайвера;

	КонецЕсли;

//	LNK 19.01.2017 16:43:59
	Если НЕ ПогашениеСкидочныхКупонов.Количество() = 0 Тогда

		ПогашениеСкидочныхКупонов.Свернуть("СкидочныйКупон, СерийныйНомер", "НоминалКупона");

	КонецЕсли;

КонецПроцедуры

//	LNK 02.11.2016 16:23:19
Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда
		
		Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел()
		И	(ЗначениеЗаполнено(ОбменДанными.Отправитель) ИЛИ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ДвиженияРасширеннойАналитикиПродаж", Ложь) = Истина)
		Тогда

			Если Проведен
			И	 (СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый ИЛИ СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный)
			Тогда

					Документы.ЧекККМ.ВыполнитьДвиженияРасширеннойАналитикиПродаж(Ссылка, Дата, СтатусЧекаККМ, Истина);

			Иначе	ОбработкаУдаленияПроведенияСПараметром(Отказ, Ложь);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ЗАПИСЬ_РМК", Ложь) = Истина
		//	В режиме РМК записываем любое состояние
		ИЛИ НЕ (ОбменДанными.Загрузка ИЛИ ДополнительныеСвойства.РежимЗакрытияСмены = Истина)
		//	или любые чеки, кроме режимов загрузки и закрытия смены
		Тогда

		//	Не нагружаем сеанс РМК и исключаем ошибки в вызываемых методах - если и возникнет ошибка, то возникнет она в другом процессе. 
			ФоновыеЗадания.Выполнить("ТехническаяПоддержка.НазначитьОбъектуДействие", ОбщегоНазначенияКлиентСервер.AAD(Ссылка, Неопределено, "ПЕРЕДАТЬ_В_ЦЕНТР", Истина, ПараметрыСеанса.ТекущийПользователь));

		КонецЕсли;

	КонецЕсли;

	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() И БонусныеБаллыПовтИсп.ИспользоватьБонуснуюСистему(Дата) Тогда	//	на дату документа

	//	Отрабатываем и при загрузке, и при простой записи.
	//	Важно для чеков, каким-то образом попавших в последовательность, но которых там быть не должно!

		СтатусыУчитываемые = Новый Соответствие;
		СтатусыУчитываемые.Вставить(Перечисления.СтатусыЧековККМ.Пробитый, Истина);

		Если ДополнительныеСвойства.УчетнаяПолитика.ИспользоватьЧекиКакРегистраторыНачисленияБонусныхБаллов Тогда

			СтатусыУчитываемые.Вставить(Перечисления.СтатусыЧековККМ.Архивный, Истина);

		КонецЕсли;

		Если СтатусыУчитываемые.Получить(СтатусЧекаККМ) = Неопределено
		И (ЗначениеЗаполнено(ВладелецДисконтнойКарты) ИЛИ ЗначениеЗаполнено(ДополнительныеСвойства.ВладелецДисконтнойКарты))	 Тогда

			СписокКонтрагентов = Новый Массив;
			СписокКонтрагентов.Добавить(ВладелецДисконтнойКарты);
			СписокКонтрагентов.Добавить(ДополнительныеСвойства.ВладелецДисконтнойКарты);

			БонусныеБаллыПоследовательность.ПроверитьРегистрациюНепробитогоЧека(Ссылка, СписокКонтрагентов);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ТехническаяПоддержкаВызовСервера.ОтладочныйРежимРаботы() Тогда

		ВызватьИсключение "Отказано! Копирование чека запрещено.";

	КонецЕсли;

//	для нужд разработки и отладки.

	СтатусЧекаККМ	= Перечисления.СтатусыЧековККМ.Отложенный;
	НомерЧекаККМ	= 0;
	ОтчетОРозничныхПродажах	= Неопределено;
	КассаККМ = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

Процедура УстановитьАтрибутыПередЗаписью(РежимЗаписи)	//	LNK 25.02.2020 10:27:27

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаДокумента.Проведен, Ведущая.Проведен) КАК Проведен,
	|	ЕСТЬNULL(ТаблицаДокумента.СтатусЧекаККМ, Ведущая.СтатусЧекаККМ) КАК СтатусЧекаККМ,
	|	ЕСТЬNULL(ТаблицаДокумента.ОтчетОРозничныхПродажах, Ведущая.ОтчетОРозничныхПродажах) КАК ОтчетОРозничныхПродажах,
	|	ЕСТЬNULL(ТаблицаДокумента.ВладелецДисконтнойКарты, Ведущая.ВладелецДисконтнойКарты) КАК ВладелецДисконтнойКарты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЛОЖЬ КАК Проведен,
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ПустаяСсылка) КАК СтатусЧекаККМ,
	|		ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка) КАК ОтчетОРозничныхПродажах,
	|		ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК ВладелецДисконтнойКарты) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ТаблицаДокумента
	|		ПО (ТаблицаДокумента.Ссылка = &ТекущаяСсылка)"
	);
	Запрос.УстановитьПараметр("ТекущаяСсылка", Ссылка);

	РеквизитыСсылки = Запрос.Выполнить().Выбрать();
	РеквизитыСсылки.Следующий();

	ДополнительныеСвойства.Вставить("ЭтоНовый",      ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи",   РежимЗаписи);

	ДополнительныеСвойства.Вставить("СтатусЧекаККМ", РеквизитыСсылки.СтатусЧекаККМ);
	ДополнительныеСвойства.Вставить("Проведен"     , РеквизитыСсылки.Проведен);
	ДополнительныеСвойства.Вставить("ВладелецДисконтнойКарты", РеквизитыСсылки.ВладелецДисконтнойКарты);
	ДополнительныеСвойства.Вставить("РежимЗакрытияСмены", НЕ ЗначениеЗаполнено(РеквизитыСсылки.ОтчетОРозничныхПродажах) И ЗначениеЗаполнено(ОтчетОРозничныхПродажах));

КонецПроцедуры

// Процедура выполняет проверку возможности ввода чека на основании
//
// Параметры:
//  ДанныеЗаполнения - данные заполнения на основании
Процедура ПроверитьВозможностьВводаНаОснованииЧекаККМ(ДанныеЗаполнения)

	//Проверить возможность ввода чека на возврат на основании чека ККМ
	
		СтатусЧекаККМЗнач = ДанныеЗаполнения.СтатусЧекаККМ;
		Если СтатусЧекаККМЗнач = Перечисления.СтатусыЧековККМ.Аннулированный
			 ИЛИ СтатусЧекаККМЗнач = Перечисления.СтатусыЧековККМ.Отложенный Тогда
			
				ТекстИсключения = НСтр("ru='Ввод Чека ККМ на возврат на основании Чека ККМ со статусом: %СтатусЧекаККМ% запрещен.'");
				ТекстИсключения = СтрЗаменить(ТекстИсключения, "%СтатусЧекаККМ%", СтатусЧекаККМЗнач);
				ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
КонецПроцедуры

//	LNK 08.11.2022 06:41:46
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Отказ, РежимПроведения)

//	Отключим регистрацию в обмены регистры, формируемые только в ЦБ!
//	При этом неважно, где мы сейчас находимся - ЦБ или ПБ.
	ИменаРегистров = Новый Массив;

	Если ДополнительныеСвойства.РежимЗакрытияСмены Тогда	//	LNK 08.11.2022 06:36:03

		ИменаРегистров.Добавить("СкидкиНаценкиПоЧекам");
		ИменаРегистров.Добавить("ПродажиПоДисконтнымКартамСкидка");
		ИменаРегистров.Добавить("ПродажиПоЧекам");
		ИменаРегистров.Добавить("ДанныеДляНН");

	КонецЕсли;

	Если ДополнительныеСвойства.УчетнаяПолитика.ДвиженияБонусныхБалловТолькоВЦентре = Истина Тогда	//	LNK 08.11.2022 06:37:19

		ИменаРегистров.Добавить("БонусныеБаллы");
		ИменаРегистров.Добавить("БонусныеБаллыВРезерве");
		ИменаРегистров.Добавить("СписанныеБонусныеБаллы");
		ИменаРегистров.Добавить("БонусныеБаллыПоЗаказамПокупателей");
		ИменаРегистров.Добавить("БонусныеБаллыПогашение");
		
	КонецЕсли;

	Для каждого ИмяРегистра Из ИменаРегистров Цикл

		Если НЕ Движения.Найти(ИмяРегистра) = Неопределено Тогда	//	проверка на всякий случай

			Движения[ИмяРегистра].ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

// Инициализирует документ
//
Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда

		Если ДанныеЗаполнения.Свойство("КассаККМ") Тогда

			КассаККМ      = ДанныеЗаполнения.КассаККМ;
			Магазин       = КассаККМ.Магазин;
			Организация   = КассаККМ.Владелец;

		ИначеЕсли ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

			Магазин       = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Магазин);
			Организация   = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация,Ответственный);
			КассаККМ      = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Организация,,КассаККМ,Магазин,);

		КонецЕсли;

		Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() ИЛИ Магазин.Пустая() ИЛИ Организация.Пустая() Тогда

			Магазин       = ПараметрыСеанса.ТекущийМагазин;
			Организация   = ПараметрыСеанса.ТекущаяОрганизация;
			КассаККМ      = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Организация,,КассаККМ,Магазин,);

		КонецЕсли;

	КонецЕсли;
	
	Продавец = ЗначениеНастроекПовтИсп.ПолучитьПродавцаПоУмолчанию(Продавец, Ответственный);
	
	Если НЕ ЗначениеЗаполнено(ЗаказПокупателя) И НЕ ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда

		ЦенаВключаетНДС = ОбщегоНазначенияРТСервер.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(Магазин.ПравилоЦенообразования, "ЦенаВключаетНДС");

	КонецЕсли; 

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		АналитикаХозяйственнойОперации = ЗначениеНастроекПовтИсп.ПолучитьАналитикуХозяйственнойОперацииПоУмолчанию(АналитикаХозяйственнойОперации, Перечисления.ХозяйственныеОперации.ВозвратОтПокупателя);
	Иначе
		АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("КассаККМ")
			И НЕ ЗначениеЗаполнено(КассаККМ) Тогда
			Если ЗначениеЗаполнено(Организация) Тогда
				Если ДанныеЗаполнения.КассаККМ.Владелец <> Организация Тогда
					ДанныеЗаполнения.КассаККМ = Справочники.КассыККМ.ПустаяСсылка();	
				КонецЕсли
			Иначе
				Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.КассаККМ, "Владелец");
			КонецЕсли;
			
			Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.КассаККМ, "Магазин");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

	Если ЛОЖЬ Тогда	//	LNK 14.11.2016 08:45:56
//	Если НЕ РежимРМК = Истина Тогда // Иногда может быть НЕОПРЕДЕЛЕНО
		
		// При проведении выполняется контроль превышения остатков на складах
		Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение 
			И НЕ ДополнительныеСвойства.Свойство("ЗагрузкаДанныхИзРабочегоМеста") Тогда
			
			Массив.Добавить(Движения.ТоварыНаСкладах);
			Массив.Добавить(Движения.ДвиженияСерийныхНомеров);
			
		КонецЕсли;
		
	КонецЕсли;

//	LNK 22.08.2017 17:26:20
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда

		Если НЕ ЗначениеЗаполнено(ДоговорСтрахования) Тогда

				Массив.Добавить(Движения.ТоварыЗастрахованные);

		Иначе	Массив.Добавить(Движения.ДоговорыСтрахованияОплаченные);

		КонецЕсли;

	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Функция ПроверитьУникальностьНомераДокумента(Отказ)

	Если ЭтоНовый() И НЕ ПустаяСтрока(Номер) И НЕ Дата = '00010101'
	И ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ПолучениеИзВнешнегоИсточника", Ложь) = Истина Тогда

		УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаДокументы.Ссылка
		|ИЗ
		|	Документ.ЧекККМ КАК ТаблицаДокументы
		|ГДЕ
		|	ТаблицаДокументы.Номер = &Номер
		|	И ТаблицаДокументы.Дата = &Дата
		|	И ТаблицаДокументы.ВидОперации = &ВидОперации"
		);
		Запрос.УстановитьПараметр("Номер"      , Номер);
		Запрос.УстановитьПараметр("Дата"       , Дата);
		Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда

			Отказ = Истина;
			ТекстСообщения = "Номер#Дата = [" + Номер + "#" + Дата + "] - блокирована попытка создания дубля! Отказано.";
			ЗаписьЖурналаРегистрации("IDN.Уникальность номера", УровеньЖурналаРегистрации.Ошибка, Метаданные(), Выборка.Ссылка, ТекстСообщения, РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
			Сообщить(ТекстСообщения);

		КонецЕсли;

		УстановитьПривилегированныйРежим(Ложь);

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции // ПроверитьУникальностьНомераДокумента()

//	LNK 10.06.2019 15:08:07
Процедура ОтразитьДвиженияСерийныхНомеровКупонов(Отказ)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаКупоны.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаКупоны.СкидочныйКупон КАК Справочник.Номенклатура) КАК СкидочныйКупон,
	|	ТаблицаКупоны.СерийныйНомер КАК СерийныйНомер
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаКупоны КАК ТаблицаКупоны
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(Источник.НомерСтроки) КАК НомерСтроки,
	|	Источник.СкидочныйКупон КАК Купон,
	|	Источник.СерийныйНомер КАК СерийныйНомер,
	|	1 КАК Количество
	|ИЗ
	|	Источник КАК Источник
	|ГДЕ
	|	Источник.СкидочныйКупон.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.СкидочныйКупон)
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.СкидочныйКупон,
	|	Источник.СерийныйНомер
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	);
	Запрос.УстановитьПараметр("ТаблицаКупоны", ПогашениеСкидочныхКупонов.Выгрузить());

	КупоныВыборка = Запрос.Выполнить().Выбрать();

	НаборЗаписей = РегистрыСведений.ДвиженияСерийныхНомеровКупонов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЧекККМ.Установить(Ссылка);

	Пока КупоныВыборка.Следующий() Цикл

		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, КупоныВыборка);

		ЗаписьНабора.ЧекККМ	 = Ссылка;
		ЗаписьНабора.Дата	 = Дата;
		ЗаписьНабора.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.ПогашениеПодарочныхСертификатов;
		ЗаписьНабора.Магазин = Магазин;

	КонецЦикла;

	НаборЗаписей.Записать();

КонецПроцедуры

Процедура ПроверитьВыданныеКупоныПоРегиструСерийныеНомераДляАкций(РежимЗаписи, Отказ)

	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда

		УстановитьПривилегированныйРежим(Истина);

		СписокСсылок = Новый Массив;

		Для каждого СтрокаТабличнойЧасти Из ВыдачаСкидочныхКупонов Цикл

			Если ТипЗнч(СтрокаТабличнойЧасти.СерийныйНомер) = Тип("СправочникСсылка.СерийныеНомера") Тогда

				СписокСсылок.Добавить(СтрокаТабличнойЧасти.СерийныйНомер);

			КонецЕсли;

		КонецЦикла;

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаРегистра.СерийныйНомер.Владелец КАК СкидочныйКупон,
		|	ТаблицаРегистра.СерийныйНомер КАК СерийныйНомер,
		|	ТаблицаРегистра.СерийныйНомер.Владелец.Номинал КАК Номинал,
		|	1 КАК Количество
		|ИЗ
		|	РегистрСведений.СерийныеНомераДляАкций КАК ТаблицаРегистра
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерийныеНомера КАК Фильтр
		|		ПО ТаблицаРегистра.СерийныйНомер = Фильтр.Ссылка
		|ГДЕ
		|	ТаблицаРегистра.ЧекККМПродажи = &ТекущийДокумент
		|	И НЕ Фильтр.Ссылка В (&СписокСсылок)"
		);
		Запрос.УстановитьПараметр("ТекущийДокумент"	, Ссылка);
		Запрос.УстановитьПараметр("СписокСсылок"	, СписокСсылок);
		
		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда

			Выборка = РезультатЗапроса.Выбрать();

			Пока Выборка.Следующий() Цикл

				СтрокаТабличнойЧасти = ВыдачаСкидочныхКупонов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

РежимРМК = Ложь;

КонтролироватьОстаткиТоваровПриЗакрытииЧека = Ложь;









