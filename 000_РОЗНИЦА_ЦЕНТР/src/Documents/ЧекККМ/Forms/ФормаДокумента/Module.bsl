&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ЗначениеПеречислениеВидОперацииПродажа;

&НаКлиенте
Перем ЗначениеПеречислениеВидОперацииВозврат;

&НаКлиенте
Перем ЗначениеСправочникиВидыОплатЧекаККМОплатаПодарочнымСертификатом;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

&НаКлиенте	//	LNK 04.07.2021 06:52:09
Перем ДанныеСтрокиПередИзменением;

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Обработка данных подключаемого оборудования
//
// Параметры:
//  СтруктураПараметров - Структура действий на сервере
//  СтруктураПараметровКлиента - структура последующих действий на клиенте
//
&НаСервере
Функция ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента) Экспорт
	
	Если НЕ СтруктураПараметров.НеизвестныеДанныеПО Тогда
		
		Если СтруктураПараметров.Действие = "ПроверкаВесовыхТоваров" Тогда
			
			ВходящиеПараметры = СтруктураПараметров.ЗначенияПоиска[0];
			ДобавитьНайденныеПозицииТоваров(ВходящиеПараметры);
			СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
			
		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаТоваров" Тогда
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				
				Если СтруктураПараметров.ЗначенияПоиска.Количество() = 1 Тогда
					
					ВходящиеПараметры = СтруктураПараметров.ЗначенияПоиска[0];
					Если СтруктураПараметров.Свойство("ИспользоватьКоличество") Тогда
						ВходящиеПараметры.Вставить("Количество", СтруктураПараметров.ИспользоватьКоличество);
					КонецЕсли;
					ДобавитьНайденныеПозицииТоваров(ВходящиеПараметры);
					
				Иначе
					
					ТаблицаТоваров = Новый ТаблицаЗначений;
					ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
					ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
					ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
					
					Для каждого ЗначениеПоиска Из СтруктураПараметров.ЗначенияПоиска Цикл
						ТекущаяСтрока = ТаблицаТоваров.Добавить();
						ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначениеПоиска);
					КонецЦикла;
					
					СтруктураПараметровКлиента.Вставить("ВыборТоваров", ПоместитьВоВременноеХранилище(ТаблицаТоваров));
					
				КонецЕсли;
				
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				
			КонецЕсли;
		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаСерийныхНомеров" Тогда
			
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				
				ОперацияВыполнена = ДобавитьНайденныеСерийныеНомера(СтруктураПараметров.ЗначенияПоиска);
				
				Если НЕ ОперацияВыполнена Тогда
					СтруктураПараметровКлиента.Вставить("ТекстПредупреждения",НСтр("ru = 'По считанному штрихкоду определен номер подарочного сертификата.
						|Он уже присутствует в документе.
						|Повторный ввод данных не требуется.'"));

				КонецЕсли;
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				
			КонецЕсли;
		
		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаКарт" Тогда
			
			КоличествоКарт = СтруктураПараметров.ЗначенияПоиска.Количество();
			Если КоличествоКарт = 1 Тогда
				ИнформационнаяКарта = СтруктураПараметров.ЗначенияПоиска[0].ИнформационнаяКарта;
				Если ЗначениеЗаполнено(ИнформационнаяКарта) Тогда
					Если ИнформационнаяКарта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная Тогда
						Объект.ДисконтнаяКарта = ИнформационнаяКарта;
						СтруктураПараметровКлиента.Вставить("НайденаДисконтнаяКарта");
						Модифицированность = Истина;
					Иначе
						
						СтруктураПараметровКлиента.Вставить("ТекстПредупреждения",НСтр("ru = 'По считанному штрихкоду определена регистрационная карта. 
						|Ввод данных о регистрационной карте в документе не предусмотрен.'"));
					КонецЕсли;
					СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				КонецЕсли;
			ИначеЕсли КоличествоКарт > 1 Тогда
				МассивТиповВладельцев = Новый Массив;
				МассивТиповВладельцев.Добавить(Тип("СправочникСсылка.Контрагенты"));
				МассивТиповВладельцев.Добавить(Тип("СправочникСсылка.Пользователи"));
				МассивТиповВладельцев.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
				ТаблицаКарт = Новый ТаблицаЗначений;
				ТаблицаКарт.Колонки.Добавить("ИнформационнаяКарта", Новый ОписаниеТипов("СправочникСсылка.ИнформационныеКарты"));
				ТаблицаКарт.Колонки.Добавить("ВладелецКарты", Новый ОписаниеТипов(МассивТиповВладельцев));
				
				Для каждого ЗначениеПоиска Из СтруктураПараметров.ЗначенияПоиска Цикл
					ТекущаяСтрока = ТаблицаКарт.Добавить();
					ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначениеПоиска);
				КонецЦикла;
				
				СтруктураПараметровКлиента.Вставить("ВыборКарт", ПоместитьВоВременноеХранилище(ТаблицаКарт));
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
			КонецЕсли;
				
		ИначеЕсли СтруктураПараметров.Действие = "РегистрацияНовойКарты" Тогда
			
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				
				Если СтруктураПараметров.ЗначенияПоиска.Количество() > 1 Тогда
					
					ТаблицаШаблонов = Новый ТаблицаЗначений;
					ТаблицаШаблонов.Колонки.Добавить("ТипШтрихкода");
					ТаблицаШаблонов.Колонки.Добавить("КодКарты");
					
					Для каждого КлючИЗначение Из СтруктураПараметров.ЗначенияПоиска[0] Цикл
						ТаблицаШаблонов.Колонки.Добавить(КлючИЗначение.Ключ);
					КонецЦикла;
					
					Для каждого ЗначениеПоиска Из СтруктураПараметров.ЗначенияПоиска Цикл
						ТекущаяСтрока = ТаблицаШаблонов.Добавить();
						ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначениеПоиска);
					КонецЦикла;
					ТаблицаШаблонов.ЗаполнитьЗначения(СтруктураПараметров.ТипШтрихкода, "ТипШтрихкода");
					ТаблицаШаблонов.ЗаполнитьЗначения(СтруктураПараметров.КодКарты, "КодКарты");
					СтруктураПараметровКлиента.Вставить("РегистрацияНовойКартыВыборШаблона", ПоместитьВоВременноеХранилище(ТаблицаШаблонов, Новый УникальныйИдентификатор()));
					
					ТекстВопроса = НСтр("ru = 'Создать новую информационную карту? Карта %КодКарты%.'");
					ТекстВопроса = СтрЗаменить(ТекстВопроса, "%КодКарты%", СтруктураПараметров.КодКарты);
					
					СтруктураПараметровКлиента.Вставить("ТекстВопросаНовойКарты", ТекстВопроса);
				Иначе
					СтруктураПараметровКлиентаРегистрацииНовойКарты = СтруктураПараметров.ЗначенияПоиска[0];
					СтруктураПараметровКлиентаРегистрацииНовойКарты.Вставить("ТипШтрихкода", СтруктураПараметров.ТипШтрихкода);
					СтруктураПараметровКлиентаРегистрацииНовойКарты.Вставить("КодКарты"    , СтруктураПараметров.КодКарты);
					
					СтруктураПараметровКлиента.Вставить("РегистрацияНовойКарты", СтруктураПараметровКлиентаРегистрацииНовойКарты);
					
					ТекстВопроса = НСтр("ru = 'Создать новую информационную карту? Карта %КодКарты%%НаименованиеШаблона%'");
					ТекстВопроса = СтрЗаменить(ТекстВопроса, "%КодКарты%", СтруктураПараметров.КодКарты);
					Если СтруктураПараметровКлиентаРегистрацииНовойКарты.Свойство("НаименованиеШаблона") Тогда
						Если ПустаяСтрока(СтруктураПараметровКлиентаРегистрацииНовойКарты.НаименованиеШаблона) Тогда
							ТекстВопроса = СтрЗаменить(ТекстВопроса, "%НаименованиеШаблона%", ".");
						Иначе
							ТекстВопроса = СтрЗаменить(ТекстВопроса, "%НаименованиеШаблона%", " (" + СтруктураПараметровКлиентаРегистрацииНовойКарты.НаименованиеШаблона+").");
						КонецЕсли;
					КонецЕсли;
					
					СтруктураПараметровКлиента.Вставить("ТекстВопросаНовойКарты", ТекстВопроса);
				КонецЕсли;
				
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураПараметровКлиента;
	
КонецФункции

#Область ОбработчикиОсновныхСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда

		Возврат;

	КонецЕсли;
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);

	Если ДанныеХранилища = Неопределено Тогда

		ДанныеХранилища = Документы.ЧекККМ.ПолучитьДанныеХранилища();

	КонецЕсли;
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ПодключаемоеОборудованиеРТ.НастроитьПодключаемоеОборудование(ЭтотОбъект);

	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда

		ДанныеПродажи = БонусныеБаллыВызовСервера.ПолучитьДанныеДокументаПродажи(Объект.ЧекККМПродажа);	//	LNK 13.09.2021 14:51:05

	КонецЕсли;
	
	ИспользоватьАвтоматическиеСкидкиВПродажах	= ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	Элементы.СкидкиХарактеристика.Видимость		= ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	Элементы.СкидкиСуммаБонусныеБаллы.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьБонуснуюСистему");
	
	УслугаБанкаДанные = ФинансыВызовСервера.ПолучитьДанныеУслугаБанка(Объект.УслугаБанка, Объект.ЗаказПокупателя);

	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,СостояниеДокумента,РазрешеноПроведение);
	
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда

		Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда //	ЭтоНовый 

			Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;

		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда //Это новый 

			Объект.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;

		КонецЕсли;

		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		
		СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
		БонусныеБаллыСервер.ОбновитьОтображениеОплатаБонуснымиБаллами(Объект);

	КонецЕсли;

//	LNK 01.10.2016 12:24:06
	Если НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда

		ТолькоПросмотр = Истина;	//	LNK 05.02.2024 16:09:19 
		//ТолькоПросмотр = ТолькоПросмотр 
		//			ИЛИ  Объект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый
		//			ИЛИ  Объект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный
		//			ИЛИ  Объект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Аннулированный;

		Элементы.ИспользоватьПодключаемоеОборудование.Видимость = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
					ПланыВидовХарактеристик.ПраваПользователей.ИзменятьИспользоватьПодключаемоеОборудование, Ложь)
					И РольДоступна(Метаданные.Роли.ДобавлениеИзменениеКассовыхДней)
					ИЛИ РольДоступна(Метаданные.Роли.АдминистраторСистемы);
		Элементы.ГруппаАдминистратора.Видимость = Ложь;

	Иначе

		Элементы.ИспользоватьПодключаемоеОборудование.Видимость = Истина;
		ТолькоПросмотр = Ложь;	//	LNK 25.04.2019 14:41:34

	КонецЕсли;
	
	Элементы.ТоварыГруппаКлючиСвязи.Видимость = ТехническаяПоддержкаВызовСервера.ОтладочныйРежимРаботы();	//	LNK 02.07.2021 13:13:41

	УстановитьДоступностьКнопокПроведенияСервер();
	
	РабочееМесто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КассаККМ, "РабочееМесто");
	
	НастроитьФормуПоДополнительнымПравам(Ложь);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипыОплатВТЧСервер(Объект);
	
	Элементы.ОплатаЗаполнитьОплатыПоДокументуПродажи.Доступность = ЗначениеЗаполнено(Объект.ЧекККМПродажа);
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	
	КонтролироватьОстаткиТоваров = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.КонтролироватьОстатокПриПроведении, Ложь);
	
	Элементы.ПодакцизныеТоварыДляКоммерческогоИспользования.ТолькоПросмотр = ТолькоПросмотр;

	УправлениеДоступомРТ.ПриСозданииФормыНаСервере(ЭтотОбъект);	//	LNK 17.10.2019 14:30:01
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ЗначениеПеречислениеВидОперацииПродажа = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа");
	ЗначениеПеречислениеВидОперацииВозврат = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат");
	
	ЗначениеСправочникиВидыОплатЧекаККМОплатаПодарочнымСертификатом = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом");
	
	УстановитьДоступностьПоВидуОперацииКлиент();
	УстановитьПараметрыВыбораЧекаККМПродажиКлиент();

	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "";

		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");

		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:
			                      |""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	Если Объект.Ссылка = ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка") Тогда

		Модифицированность = Истина;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	// ПодключаемоеОборудование
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение , ИсточникВыбора.ИмяТабличнойЧасти);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;
			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекКод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
		ИначеЕсли ИмяСобытия ="TracksData" Тогда
			ТекКод = Параметр[0];
			ПодключаемоеОборудованиеРТКлиент.ВыбратьМагнитныйКод(ТекКод);
			Если ПустаяСтрока(ТекКод) Тогда
				Возврат;
			КонецЕсли;
			СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипыОплатВТЧСервер(Объект);
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	БонусныеБаллыСервер.ОбновитьОтображениеОплатаБонуснымиБаллами(Объект);
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);

//	LNK 25.10.2023 09:50:54
	ДанныеХранилища = Документы.ЧекККМ.ПолучитьДанныеХранилища(ТекущийОбъект.Хранилище, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Если документ проводится, рассчитаем скидки
	
	ПередЗаписьюКлиент(Отказ, ПараметрыЗаписи.РежимЗаписи);
	
КонецПроцедуры

&НаСервере	//	LNK 24.03.2021 09:13:49
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

//	LNK 25.10.2023 10:06:30
	ТекущийОбъект.Хранилище = Новый ХранилищеЗначения(ДанныеХранилища, Новый СжатиеДанных(9));

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипыОплатВТЧСервер(Объект);
	
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	БонусныеБаллыСервер.ОбновитьОтображениеОплатаБонуснымиБаллами(Объект);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);

КонецПроцедуры
	
#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекККМПродажаПриИзменении(Элемент)
	
	ПриИзмененииЧекККМПродажаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);

КонецПроцедуры

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	ПриИзмененииКассаККМСервер();
	
	УстановитьПараметрыВыбораЧекаККМПродажиКлиент();
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДисконтнаяКартаПриИзменении(Элемент)
	
	ПриИзмененииДисконтнаяКартаСервер();
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Объект.ЧекККМПродажа = "";
	
	ВидОперацииПриИзмененииСервер();
	
	УстановитьДоступностьПоВидуОперацииКлиент();
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
	НастроитьФормуПоДополнительнымПравам(Истина);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "Товары"

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
	ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"   , ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураПараметровДействия = Новый Структура;
	СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
	СтруктураПараметровДействия.Вставить("РабочееМесто", РабочееМесто);
	СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДействия);
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина, Истина));
	
	СтруктураПараметровСтавкиНДС = Новый Структура;
	СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
	СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано", Новый Структура("Очищать", Истина));
	
	СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
	
	Если ИспользоватьАссортимент Тогда
		СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента();
		СтруктураПроверкиАссортимента.Ссылка = Объект.Ссылка;
		СтруктураПроверкиАссортимента.Магазин = Объект.Магазин;
		СтруктураПроверкиАссортимента.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		СтруктураПроверкиАссортимента.ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент магазина или запрещен к продаже.'");
		СтруктураПроверкиАссортимента.ИмяРесурсаАссортимента = "РазрешеныЗакупки";
		СтруктураПроверкиАссортимента.ПровереноМожноДобавлять = Истина;
		СтруктураПроверкиАссортимента.РазрешатьДобавление = Ложь;
		СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);
	КонецЕсли;
	
	СтруктураПроверкиЗапретаПродажи = СкидкиНаценкиКлиентСервер.ПараметрыПроверкиЗапретаРозничнойПродажи();
	СтруктураПроверкиЗапретаПродажи.Магазин = Объект.Магазин;
	СтруктураПроверкиЗапретаПродажи.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	СтруктураПроверкиЗапретаПродажи.ТекстСообщения = НСтр("ru = 'Товар %1 запрещен к продаже.'");
	СтруктураДействий.Вставить("ПроверитьЗапретРозничнойПродажи", СтруктураПроверкиЗапретаПродажи);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина, Истина));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано"  , Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано"  , Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)

	ПриИзмененииТоварыКоличестваУпаковок();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано", Новый Структура("Очищать", Ложь));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано", Новый Структура("Очищать", Ложь));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураПараметровСтавкиНДС = Новый Структура;
	СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
	СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано", Новый Структура("Очищать", Истина));
	
	СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	Если НЕ ТекущиеДанные = Неопределено Тогда	//	LNK 30.05.2020 10:41:19

		ОбработкаТабличнойЧастиТоварыКлиент.ОчиститьСерийныеНомера(ТекущиеДанные, Объект);
		БонусныеБаллыКлиент.ТоварыПередУдалением(ТекущиеДанные, Объект, Отказ, ДанныеПродажи);

	КонецЕсли;

	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ДанныеСтрокиПередИзменением = ОбработкаТабличнойЧастиТоварыКлиент.СкопироватьВСтруктуруЭлементКоллекции(ТекущаяСтрока, Объект.Товары);
	
	Если Копирование Тогда
		
		ТекущаяСтрока.КлючСвязиСерийныхНомеров		= 0;
		ТекущаяСтрока.СуммаАвтоматическойСкидки		= 0;
		ТекущаяСтрока.ПроцентАвтоматическойСкидки	= 0;

		ТекущаяСтрока.КлючСвязиБонусныхБаллов		= 0;
		ТекущаяСтрока.СуммаБонусныхБалловНачислено	= 0;
		ТекущаяСтрока.СуммаБонусныхБалловСписано	= 0;
		
	КонецЕсли;
	
	Если НоваяСтрока Тогда

		ТекущаяСтрока.Продавец = Объект.Продавец;

	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);

	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;

	СкидкиНаценкиКлиентСервер.ОчиститьОкругленияТоваров(Объект.Товары, Истина);	//	LNK 31.01.2020 10:31:19
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);

	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);

	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "Оплата"

&НаКлиенте
Процедура ОплатаСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	ПересчитатьСуммуТорговойУступки(ТекущаяСтрока);
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПроцентТорговойУступкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	ПересчитатьСуммуТорговойУступки(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаВидОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	
	Отбор.Вставить("ИмяПоляОтбораЛевоеЗначение", "Ссылка");
	Отбор.Вставить("ПравоеЗначение"            , ЗначениеСправочникиВидыОплатЧекаККМОплатаПодарочнымСертификатом);
	Отбор.Вставить("Отрицание"                 , Истина);
	
	ОткрытьФорму("Справочник.ВидыОплатЧекаККМ.Форма.ФормаВыбора",Новый Структура("СтруктураПараметрыОтбора", Отбор), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаВидОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	
	ТекущаяСтрока.ПроцентТорговойУступки = ЭквайрингСервер.ПолучитьПроцентТорговойУступкиПоТерминалу(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты);
	ПересчитатьСуммуТорговойУступки(ТекущаяСтрока);
	
	ТекущаяСтрока.ТипОплаты = ТипОплатыПоВиду(ТекущаяСтрока.ВидОплаты);

	СкидкиНаценкиКлиентСервер.ОчиститьОкругленияТоваров(Объект.Товары, Истина);	//	LNK 31.01.2020 10:31:19
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаЭквайринговыйТерминалПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	
	ТекущаяСтрока.ПроцентТорговойУступки = ЭквайрингСервер.ПолучитьПроцентТорговойУступкиПоТерминалу(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты);
	ПересчитатьСуммуТорговойУступки(ТекущаяСтрока);
	
	ТекущаяСтрока.ТипОплаты = ТипОплатыПоВиду(ТекущаяСтрока.ВидОплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПередУдалением(Элемент, Отказ)

	ТекущиеДанные = Элементы.Оплата.ТекущиеДанные;

	Если Не ТекущиеДанные = Неопределено И ТекущиеДанные.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом") 
		  И Объект.ПогашениеПодарочныхСертификатов.Количество() > 0 Тогда
		  
		ТекстВопроса = НСтр("ru = 'Удаляется оплата подарочным сертификатом, при этом удалятся все сертификаты оплаты. Продолжить?'"); 
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
			Объект.ПогашениеПодарочныхСертификатов.Очистить();
		Иначе
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;
	
	Если Не ТекущиеДанные = Неопределено И ТекущиеДанные.ДанныеПереданыВБанк Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			
			СтрокаСообщения = НСтр("ru = 'Данные об оплате отправлены в банк.'") + Символы.ПС;
			СтрокаСообщения = СтрокаСообщения + НСтр("ru = 'Необходимо отменить операцию.'"); 
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрокаСообщения,
				Объект,
				"ОплатаОплатаЧерезТерминал");
			
			Отказ = Истина;
		Иначе
			ТекстВопроса = НСтр("ru = 'Данные об отмене отправлены в банк.'") + Символы.ПС;
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Вы хотите удалить строку с потерей данных?'");
			
			Если НЕ Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	Если НЕ Отказ Тогда

		СкидкиНаценкиКлиентСервер.ОчиститьОкругленияТоваров(Объект.Товары, Истина);	//	LNK 31.01.2020 10:31:19

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		
		ТекущиеДанные = Элементы.Оплата.ТекущиеДанные;
		
		ТекущиеДанные.СсылочныйНомер      = "";
		ТекущиеДанные.НомерЧекаЭТ         = "";
		ТекущиеДанные.НомерПлатежнойКарты = "";
		ТекущиеДанные.ДанныеПереданыВБанк = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПриИзменении(Элемент)
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте	//	LNK 31.01.2020 10:06:00
Процедура ОплатаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	СкидкиНаценкиКлиентСервер.ОчиститьОкругленияТоваров(Объект.Товары, Истина);	//	LNK 31.01.2020 10:31:19

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "Подарки"

&НаКлиенте
Процедура ПодаркиНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Подарки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"   , ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураПараметровДействия = Новый Структура;
	СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
	СтруктураПараметровДействия.Вставить("РабочееМесто", РабочееМесто);
	СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДействия);
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина, Истина));
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Подарки, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ПодаркиХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Подарки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина, Истина));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Подарки, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ПодаркиХарактеристикаНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Подарки.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Подарки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Подарки, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Подарки.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Подарки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Подарки, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиЦенаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Подарки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Подарки, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиСуммаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Подарки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах");
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Подарки, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте	//	LNK 12.09.2020 04:30:51
Процедура СтатусЧекаККМПриИзменении(Элемент)

	Если НЕ (Объект.СтатусЧекаККМ = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый")
		ИЛИ	 Объект.СтатусЧекаККМ = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Архивный")
	)	Тогда

	//	Такое приседание облегчает повторное пробитие чека в процессе разработки и отладки.
		Если Объект.НомерЧекаККМ = 1 Тогда

			Объект.НомерЧекаККМ = 0;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#Область ОбработчикиСобытийНекторыхТабличныхПолей

&НаКлиенте	//	LNK 12.12.2019 11:33:15
Процедура СкидкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле = Элементы.СкидкиСкидкаНаценка И НЕ Элемент.ТекущиеДанные = Неопределено Тогда

		Если ТипЗнч(Элемент.ТекущиеДанные.СкидкаНаценка) = Тип("СправочникСсылка.СкидкиНаценки") Тогда

			СтандартнаяОбработка = Ложь;
			ОткрытьЗначение(Элемент.ТекущиеДанные.СкидкаНаценка);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 31.07.2021 10:59:30
Процедура НачислениеБонусныхБалловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле = Элементы.НачислениеБонусныхБалловПрограммаЛояльности И НЕ Элемент.ТекущиеДанные = Неопределено Тогда

		СтандартнаяОбработка = Ложь;
		ОткрытьЗначение(Элемент.ТекущиеДанные.ПрограммаЛояльности);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 31.07.2021 10:59:30
Процедура ОплатаБонуснымиБалламиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле = Элементы.ОплатаБонуснымиБалламиПрограммаЛояльности И НЕ Элемент.ТекущиеДанные = Неопределено Тогда

		СтандартнаяОбработка = Ложь;
		ОткрытьЗначение(Элемент.ТекущиеДанные.ПрограммаЛояльности);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 20.09.2021 14:58:52
Процедура ПогашениеСкидочныхКупоновВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ИменаКолонок = Новый Массив;
	ИменаКолонок.Добавить("ПогашениеСкидочныхКупоновСкидочныйКупон");
	ИменаКолонок.Добавить("ПогашениеСкидочныхКупоновСерийныйНомер");

	РаботаСФормамиКлиент.ОбработчикСобытияСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ИменаКолонок, "ПогашениеСкидочныхКупонов", Элементы);

КонецПроцедуры

&НаКлиенте	//	LNK 20.09.2021 14:58:56
Процедура ВыдачаСкидочныхКупоновВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ИменаКолонок = Новый Массив;
	ИменаКолонок.Добавить("ВыдачаСкидочныхКупоновСкидочныйКупон");
	ИменаКолонок.Добавить("ВыдачаСкидочныхКупоновСерийныйНомер");

	РаботаСФормамиКлиент.ОбработчикСобытияСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ИменаКолонок, "ВыдачаСкидочныхКупонов", Элементы);

КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВвестиПодарочныеСертификаты(Команда)
	Перем ПересчетКоличества;
	
	ПересчетКоличества = Ложь;
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиСерийныеНомераНоменклатурыВТЧ(ЭтотОбъект,
		Объект.СерийныеНомера,
		Элементы.Товары.ТекущиеДанные, 
		ПересчетКоличества);
		
	Если ПересчетКоличества Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ВвестиПодарочныеСертификатыПогашения(Команда)
	
	ПараметрыЗаполнения = Новый Структура;
	
	АдресВХранилище = ПоместитьПогашениеВХранилище();
	ПараметрыЗаполнения.Вставить("АдресВременногоХранилища_ПогашениеПодарочныхСертификатов", АдресВХранилище);
	
	РезультатВвода = ОткрытьФормуМодально("Документ.ЧекККМ.Форма.ФормаТабличнойЧастиПогашениеПодарочныхСертификатов",ПараметрыЗаполнения, ЭтотОбъект);
	
	Если ЗначениеЗаполнено(РезультатВвода)  Тогда
	
		ПолучитьПогашениеВХранилище(РезультатВвода);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОплатыПоДокументуПродажи(Команда)
	
	ЗаполнитьОплатыПоДокументуПродажиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	ВозвращенноеЗначение = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(ВыполнитьПредварительныйРасчетСкидокНаСервере());

	Если ВозвращенноеЗначение <> Неопределено Тогда
		
		УправляемыеСкидки = ВозвращенноеЗначение;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
		СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
		СтруктураПараметры.Вставить("ПеренестиСкидкиПодаркиВТовары");
		СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	КонтролироватьОстаткиТоваров);
		
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
			РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
		Иначе
			РабочееМесто = ""
		КонецЕсли;
		
		СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
		
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		БонусныеБаллыКлиент.ПроверитьНачисленияПоКредитнойОплате(Объект, ЭтотОбъект);	//	LNK 30.07.2021 13:59:24
		
		Если ВывестиСообщения Тогда
			СкидкиНаценкиКлиент.ОткрытьФормуВыводаСообщений(АдресПримененныхСкидокВоВременномХранилище);
		КонецЕсли;
		
		ОбновитьИтоговыеПоказатели(ЭтотОбъект);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Скидки (наценки)'"),
			,
			НСтр("ru = 'Скидки (наценки) рассчитаны'"),
			БиблиотекаКартинок.Информация32
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Не СкидкиНаценкиКлиент.ПроверитьНеобходимостьНазначенияРучнойСкидкиНаценки(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДляРучнойСкидки = ПараметрыДляНазначенияРучнойСкидки();
	СуммаРучнойСкидкиНаценки = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(ПараметрыДляРучнойСкидки);
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, "RUB");
		
		ОбновитьИтоговыеПоказатели(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиОплатуЧерезТерминал(Команда)
	Перем Отказ;
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущаяСтрока.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта") Тогда
		
		СтрокаСообщения = НСтр("ru = 'Выбирите строку с платежной картой'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрокаСообщения,
			Объект,
			"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "].ВидОплаты");
		
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЭквайринговыйТерминал) Тогда
		
		СтрокаСообщения = НСтр("ru = 'Не выбран эквайринговый терминал'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрокаСообщения,
			Объект,
			"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "].ЭквайринговыйТерминал");
		
		Возврат;
	КонецЕсли;
	
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		
		Отказ = Ложь;
		ПроверитьСкидки(Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ТекущаяСтрока.ДанныеПереданыВБанк Тогда
			
			МаксимальнаяСуммаОплатыБезналом = СуммаВсего - (СуммаБезналичнойОплаты() + СуммаОплатыПодарочнымиСертификатами()) + ТекущаяСтрока.Сумма;
			
			Если МаксимальнаяСуммаОплатыБезналом <= 0 Тогда
				
				СтрокаСообщения = НСтр("ru = 'Безналичная оплата не требуется'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрокаСообщения,
					Объект,
					"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "].Сумма");
				
				Возврат;
			КонецЕсли;
			
			
			Если ТекущаяСтрока.Сумма > МаксимальнаяСуммаОплатыБезналом Тогда
				
				СтрокаСообщения = НСтр("ru = 'Сумма оплаты картой больше возможной суммы безналичной оплаты'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрокаСообщения,
					Объект,
					"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "].Сумма");
				
				Возврат;
			КонецЕсли;
			
			РассчетнаяСумма = ?(ТекущаяСтрока.Сумма = 0 , МаксимальнаяСуммаОплатыБезналом, ТекущаяСтрока.Сумма);
			
			// Передача данных в банк
			ОплатаПлатежнойКартойЧерезЭквайринговыйТерминал(ТекущаяСтрока, РассчетнаяСумма, МаксимальнаяСуммаОплатыБезналом)
			
		Иначе
			
			// Вопрос
			ТекстВопроса = НСтр("ru = 'Данные об оплате уже переданы в банк'") + Символы.ПС; 
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Вы хотите отменить эту операцию?'"); 
			
			РезультатВопроса = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
				// Отмена передачи
				УдалитьОплатуКартой(ТекущаяСтрока);
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Если НЕ ТекущаяСтрока.ДанныеПереданыВБанк Тогда
			
			// Передача данных в банк
			УдалитьОплатуКартой(ТекущаяСтрока);
			
		Иначе
			
			СтрокаСообщения = НСтр("ru = 'Данные об отмене оплаты в банк уже переданны'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрокаСообщения,
				Объект,
				"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "]");
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ПродажаПодарка Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", 				УправляемыеСкидки);
	СтруктураПараметры.Вставить("ПеренестиСкидкиПодаркиВТовары");
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	КонтролироватьОстаткиТоваров);
	
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
		Результат = Вопрос(НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
		Если Результат = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			
			РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
			БонусныеБаллыКлиент.ПроверитьНачисленияПоКредитнойОплате(Объект, ЭтотОбъект);	//	LNK 30.07.2021 13:59:24
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		
		РассчитатьСкидкиБезПримененияКОбъекту(СтруктураПараметры);
		
	КонецЕсли;
	
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)

	Если НЕ СкидкиНаценкиКлиент.ПроверитьНеобходимостьОтменыРучныхСкидокНаценок(Объект, "Товары", "Товары") Тогда

		Возврат;

	КонецЕсли;

	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте	//	LNK 02.04.2020 11:29:29
Процедура ОтменитьАвтоматическиеСкидки(Команда)

	ОтменитьАвтоматическиеСкидкиНаСервере();
	ОтменитьНачислениеБонусныхБаллов();
	
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПодаркиВТовары(Команда);
	
	СтрокаДополнительногоОповещения = "";
	ПеренестиСкидкиПодаркиВТоварыСервер(СтрокаДополнительногоОповещения);
	Если НЕ ПустаяСтрока(СтрокаДополнительногоОповещения) Тогда
		ПоказатьОповещениеПользователя("", , СтрокаДополнительногоОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", "чек ККМ");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
	ПараметрыФормы.Вставить("РежимПодбораСУчетомЗапрещенныхКПродаже", Истина);	//	LNK 31.07.2020 08:54:02
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти", "Подарки");
	ПараметрыФормы.Вставить("РежимПодбораБезСертификатов", Истина);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если НЕ ЕстьПравоИзменятьЦену() Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ТекКод = "";
	Если ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ТекКод, НСтр("ru = 'Введите магнитный код'")) Тогда
		
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекКод = "";
	Если ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ТекКод) Тогда
		
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	Если ПодключаемоеОборудованиеРТКлиент.ПолучитьВесСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект) Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧек(Команда)
	
	ЧекПробит = ПробитьЧекНаКлиенте();
	
	Если ЧекПробит Тогда

		ТолькоПросмотр = Истина;

		УстановитьДоступностьКнопокПроведенияКлиент();

		ПроверитьСообщенияПослеОформленияЧека();

		ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрытьИзФормы(Команда)
	Перем Отказ, Объект_Ссылка;
	
	Отказ = Ложь;
	ПередЗаписьюКлиент(Отказ, РежимЗаписиДокумента.Проведение);
	
	Если НЕ Отказ Тогда
		ПровестиИзФормыСервер(Отказ, Ложь, Объект_Ссылка);
		
		Модифицированность = Отказ;
		Если НЕ Отказ Тогда
			Закрыть();
			ОтобразитьИзменениеДанных(Объект_Ссылка, ВидИзмененияДанных.Изменение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИзФормы(Команда)
	Перем Отказ;
	
	Отказ = Ложь;
	ПередЗаписьюКлиент(Отказ, РежимЗаписиДокумента.Проведение);
	
	Если НЕ Отказ Тогда
		ПровестиИзФормыСервер(Отказ, Истина);
		
		ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
		
		ОбновитьОтображениеДанных();
		Модифицированность = Отказ;
		
		ОтобразитьИзменениеДанных(ЭтотОбъект.Объект.Ссылка, ВидИзмененияДанных.Изменение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", "чек ККМ");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
	ПараметрыФормы.Вставить("РежимПодбораСУчетомЗапрещенныхКПродаже", Истина);	//	LNK 31.07.2020 08:54:02

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСертификатов", Истина);
		ПараметрыФормы.Вставить("РежимПодбораБезУслуг", Истина);
	КонецЕсли;
	ПараметрыФормы.Вставить("РежимПодбораСУчетомМинимальныхЦен", Истина);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если НЕ ЕстьПравоИзменятьЦену() Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	КонецЕсли;
	
	Если ИспользоватьАссортимент Тогда
		ПараметрыФормы.Вставить("МагазинАссортимента", Объект.Магазин);
		ПараметрыФормы.Вставить("РежимПодбораСУчетомАссортимента", Истина);
		ПараметрыФормы.Вставить("УсловиеАссортимента", "РазрешеныПродажи");
	КонецЕсли;
	Если СкидкиНаценкиСерверПереопределяемый.ПолучитьФункциональнуюОпциюИспользованияЗапретаРозничнойПродажи() Тогда
		ПараметрыФормы.Вставить("ПродажиОптовые", Ложь);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтотОбъект,ПараметрыУказанияСерий) Тогда
		ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтотОбъект);
		
		Если ЗначениеВозврата <> Неопределено Тогда
			ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
			
			ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
			
			ОбновитьИтоговыеПоказатели(ЭтотОбъект);
			
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()

	ПриИзмененииЧекККМПродажаСервер();
	ОбновитьСтатусыУказанияСерий();
	
	Объект.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.ПустаяСсылка();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда // ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") 
		Объект.АналитикаХозяйственнойОперации = ЗначениеНастроекПовтИсп.ПолучитьАналитикуХозяйственнойОперацииПоУмолчанию(Объект.АналитикаХозяйственнойОперации, Перечисления.ХозяйственныеОперации.ВозвратОтПокупателя);  //ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтПокупателя")
	Иначе
		Объект.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;//ПредопределенноеЗначение("Справочник.АналитикаХозяйственныхОпераций.РеализацияТоваров");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДисконтнаяКартаСервер()

	Если НЕ Объект.ВладелецДисконтнойКарты = Объект.ДисконтнаяКарта.ВладелецКарты Тогда
	
		Объект.ВладелецДисконтнойКарты = Объект.ДисконтнаяКарта.ВладелецКарты
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКассаККМСервер()

	НДСПересчитан = Ложь;
	
	Если НЕ Объект.Магазин = Объект.КассаККМ.Магазин Тогда
		
		Объект.Магазин = Объект.КассаККМ.Магазин;
		
		Если НЕ Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
			
			ЦенаВключаетНДС = ОбщегоНазначенияРТСервер.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(Объект.Магазин.ПравилоЦенообразования, "ЦенаВключаетНДС");
			
			Если НЕ Объект.ЦенаВключаетНДС = ЦенаВключаетНДС Тогда
			
				Объект.ЦенаВключаетНДС = ЦенаВключаетНДС;
			
				СтруктураДействий = Новый Структура;
				
				СтруктураПараметровСтавкиНДС = Новый Структура;
				СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
				СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
				СтруктураПараметровСтавкиНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
				
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
				
				СтруктураПараметровПересчетаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
				СтруктураПараметровПересчетаНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
				
				
				СтруктураДействий.Вставить("ПересчитатьСумму");
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Истина));
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано", Новый Структура("Очищать", Истина));
				
				СтруктураТЧ = Новый Структура;
				СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
				ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
				
				ОбновитьИтоговыеПоказатели(ЭтотОбъект);
				
				НДСПересчитан = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
		УстановитьВидимостьЭлементовСерий();
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	Если НЕ Объект.Организация = Объект.КассаККМ.Владелец Тогда
		
		Объект.Организация = Объект.КассаККМ.Владелец;
		
		Если НЕ НДСПересчитан Тогда
			СтруктураДействий = Новый Структура;
			
			СтруктураПараметровСтавкиНДС = Новый Структура;
			СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
			СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
			СтруктураПараметровСтавкиНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
			
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
			
			СтруктураПараметровПересчетаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
			СтруктураПараметровПересчетаНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
			
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано", Новый Структура("Очищать", Истина));
			
			СтруктураТЧ = Новый Структура;
			СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
			ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
			
			ОбновитьИтоговыеПоказатели(ЭтотОбъект);
			
		КонецЕсли;
	КонецЕсли;
	
	РабочееМесто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КассаККМ, "РабочееМесто");
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТоварыКоличестваУпаковок()

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	БонусныеБаллыКлиент.ТоварыПриОкончанииРедактирования(ТекущиеДанные, ДанныеСтрокиПередИзменением, Объект,, ДанныеПродажи);	//	LNK 04.07.2021 07:48:28

	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЧекККМПродажаСервер()
	
	Если НЕ Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ЦенаВключаетНДС = ОбщегоНазначенияРТСервер.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(Объект.Магазин.ПравилоЦенообразования, "ЦенаВключаетНДС");
		Объект.ЦенаВключаетНДС = ЦенаВключаетНДС;
		Элементы.ОплатаЗаполнитьОплатыПоДокументуПродажи.Доступность = Ложь;
	Иначе
		Объект.ЦенаВключаетНДС = Объект.ЧекККМПродажа.ЦенаВключаетНДС;
		Элементы.ОплатаЗаполнитьОплатыПоДокументуПродажи.Доступность = ЗначениеЗаполнено(Объект.ЧекККМПродажа);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьПравоИзменятьЦену()
	
	Возврат УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаСервере
Функция ДобавитьНайденныеИнформационныеКарты(ВыбранноеЗначение, АдресШаблоновВХранилище);
	
	ТаблицаШаблонов = ПолучитьИзВременногоХранилища(АдресШаблоновВХранилище);
	СтрокиШаблонов = ТаблицаШаблонов.НайтиСтроки(ВыбранноеЗначение);
	Если СтрокиШаблонов.Количество() > 0 Тогда
		СтруктураШаблонов = Новый Структура;
		ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВСтруктуру(ТаблицаШаблонов, СтрокиШаблонов[0], СтруктураШаблонов);
		Возврат ИнформационныеКарты.СоздатьДисконтнуюКарту(СтруктураШаблонов);
	Иначе
		Возврат Справочники.ИнформационныеКарты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) 
	
	Если СтруктураПараметров.Свойство("Количество") Тогда 
		КоличествоУпаковок = СтруктураПараметров.Количество;
		СтруктураПараметров.Удалить("Количество");
	Иначе
		КоличествоУпаковок = 1;
	КонецЕсли;

	СтруктураДействий = Новый Структура;
	МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураПараметров);
	Если МассивСтрок.Количество() > 0 Тогда 
		
		ТекущаяСтрока = МассивСтрок[0];
		КоэффициентУпаковки1 = ?(ЗначениеЗаполнено(СтруктураПараметров.Упаковка), СтруктураПараметров.Упаковка.Коэффициент, 1);
		КоэффициентУпаковки2 = ?(ЗначениеЗаполнено(ТекущаяСтрока.Упаковка), ТекущаяСтрока.Упаковка.Коэффициент, 1);
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + КоличествоУпаковок * КоэффициентУпаковки2 / КоэффициентУпаковки1;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано", Новый Структура("Очищать", Истина));
		
	Иначе 
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ТекущаяСтрока.КоличествоУпаковок = КоличествоУпаковок;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураПараметров);
		
		СтруктураПараметровДействия = Новый Структура;
		СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
		СтруктураПараметровДействия.Вставить("РабочееМесто", Объект.КассаККМ.РабочееМесто);
		СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДействия);
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина, Истина));
		
		СтруктураПараметровСтавкиНДС = Новый Структура;
		СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
		СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
		
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
		
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
		
	КонецЕсли;
	
	Если ИспользоватьАссортимент Тогда
		СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента();
		СтруктураПроверкиАссортимента.Ссылка = Объект.Ссылка;
		СтруктураПроверкиАссортимента.Магазин = Объект.Магазин;
		СтруктураПроверкиАссортимента.Дата = ТекущаяДатаСеанса();
		СтруктураПроверкиАссортимента.ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент магазина или запрещен к продаже.'");
		СтруктураПроверкиАссортимента.ИмяРесурсаАссортимента = "РазрешеныЗакупки";
		СтруктураПроверкиАссортимента.ПровереноМожноДобавлять = Истина;
		СтруктураПроверкиАссортимента.РазрешатьДобавление = Ложь;
		СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);
	КонецЕсли;
	
	СтруктураПроверкиЗапретаПродажи = СкидкиНаценкиКлиентСервер.ПараметрыПроверкиЗапретаРозничнойПродажи();
	СтруктураПроверкиЗапретаПродажи.Магазин = Объект.Магазин;
	СтруктураПроверкиЗапретаПродажи.Дата = ТекущаяДатаСеанса();
	СтруктураПроверкиЗапретаПродажи.ТекстСообщения = НСтр("ru = 'Товар %1 запрещен к продаже.'");
	СтруктураДействий.Вставить("ПроверитьЗапретРозничнойПродажи", СтруктураПроверкиЗапретаПродажи);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	Иначе
		Объект.Товары.Удалить(ТекущаяСтрока.НомерСтроки - 1);
	КонецЕсли;
		
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	Объект.СкидкиРассчитаны = Ложь;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(МассивНомеров) 
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура",МассивНомеров[0].Владелец); 
	МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураОтбора);
	СтруктураДействий = Новый Структура;
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		ТекущаяСтрока = МассивСтрок[0];
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("СерийныйНомер", МассивНомеров[0]);
		Если Объект.СерийныеНомера.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + 1;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано", Новый Структура("Очищать", Истина));
		
		СтрокаСерийныхНомеров = Объект.СерийныеНомера.Добавить();
		СтрокаСерийныхНомеров.СерийныйНомер            = МассивНомеров[0];
		СтрокаСерийныхНомеров.КлючСвязиСерийныхНомеров = ТекущаяСтрока.КлючСвязиСерийныхНомеров;

	Иначе
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ТекущаяСтрока.Количество = 1;
		ТекущаяСтрока.КоличествоУпаковок = 1;
		ТекущаяСтрока.Номенклатура = МассивНомеров[0].Владелец;
		ТекущаяСтрока.КлючСвязиСерийныхНомеров = ОбработкаТабличнойЧастиТоварыСервер.ДобавитьСерийныеНомераВТабличнуюЧасть(Объект.СерийныеНомера, МассивНомеров, 0);
		
		СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		СтруктураПараметровДействия = Новый Структура;
		СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
		СтруктураПараметровДействия.Вставить("РабочееМесто", РабочееМесто);
		СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДействия);
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект,, Истина));
		СтруктураПараметровСтавкиНДС = Новый Структура;
		СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
		СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
		
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
	КонецЕсли;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	Объект.СкидкиРассчитаны = Ложь;
	
	Модифицированность = Истина;
	Возврат Истина;
	
КонецФункции

// Обработка магнитного или штрихового кода на клиенте
//
// Параметры
//  СтруктураПараметровКлиента - структура параметров
//
&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод)
	
	Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") 
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
		
		СтрокаСообщения = НСтр("ru = 'Данные по коду не найдены: %1%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекКод);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ТекстПредупреждения") Тогда
		
		ПоказатьПредупреждение(, СтруктураПараметровКлиента.ТекстПредупреждения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойКарты") Тогда
		
		Если ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(СтруктураПараметровКлиента.ТекстВопросаНовойКарты) Тогда
			
			ИнформационнаяКарта = ИнформационныеКарты.СоздатьДисконтнуюКарту(СтруктураПараметровКлиента.РегистрацияНовойКарты);
			ИнформационныеКартыКлиент.ОповеститьОСозданииНовойКарты(ИнформационнаяКарта); 
			
			Если ЗначениеЗаполнено(ИнформационнаяКарта) Тогда
				Объект.ДисконтнаяКарта = ИнформационнаяКарта;
				Модифицированность = Истина;
				ДисконтнаяКартаПриИзменении(Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойКартыВыборШаблона") Тогда
		
		Если ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(СтруктураПараметровКлиента.ТекстВопросаНовойКарты) Тогда
			
			ВыбранноеЗначение = ОткрытьФормуМодально("РегистрСведений.ШаблоныРегистрацииНовыхКарт.Форма.ШаблоныНовыхКарт", Новый Структура("АдресШаблоновВХранилище", СтруктураПараметровКлиента.РегистрацияНовойКартыВыборШаблона), ЭтотОбъект);
			Если ВыбранноеЗначение <> Неопределено Тогда
			
				ИнформационнаяКарта = ДобавитьНайденныеИнформационныеКарты(ВыбранноеЗначение, СтруктураПараметровКлиента.РегистрацияНовойКартыВыборШаблона);
				ИнформационныеКартыКлиент.ОповеститьОСозданииНовойКарты(ИнформационнаяКарта); 
				
				Если ЗначениеЗаполнено(ИнформационнаяКарта) Тогда
					Объект.ДисконтнаяКарта = ИнформационнаяКарта;
					Модифицированность = Истина;
					ДисконтнаяКартаПриИзменении(Неопределено);
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ВыборТоваров") Тогда
		
		ВыбранноеЗначение = ОткрытьФормуМодально("ОбщаяФорма.ВыборНоменклатуры", Новый Структура("АдресТоваровВХранилище", СтруктураПараметровКлиента.ВыборТоваров));
		Если ВыбранноеЗначение <> Неопределено Тогда
			
			ДобавитьНайденныеПозицииТоваров(ВыбранноеЗначение);
			
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ВыборКарт") Тогда
		
		ВыбранноеЗначение = ОткрытьФормуМодально("ОбщаяФорма.ВыборИнформационнойКарты", Новый Структура("АдресКартВХранилище", СтруктураПараметровКлиента.ВыборКарт));
		Если ВыбранноеЗначение <> Неопределено Тогда
			
			Объект.ДисконтнаяКарта = ВыбранноеЗначение.ИнформационнаяКарта;
			Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
				ДисконтнаяКартаПриИзменении(Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("НайденаДисконтнаяКарта") Тогда
		
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			
			ДисконтнаяКартаПриИзменении(Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) 
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаСерийныхНомеров");
	
	СтруктураПараметровДействия = Новый Структура;
	СтруктураПараметровДействия.Вставить("РегистрацияНовойКарты", Истина);
	СтруктураДействий.Вставить("ПроверкаКарт", СтруктураПараметровДействия);
	
	Возврат ПодключаемоеОборудованиеРТ.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) 
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаВесовыхТоваров");
	СтруктураДействий.Вставить("ПроверкаТоваров");
	СтруктураДействий.Вставить("ПроверкаСерийныхНомеров");
	
	СтруктураПараметровДействия = Новый Структура;
	СтруктураПараметровДействия.Вставить("РегистрацияНовойКарты", Истина);
	СтруктураДействий.Вставить("ПроверкаКарт", СтруктураПараметровДействия);
	
	Возврат ПодключаемоеОборудованиеРТ.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзТСД(Штрихкод, Количество) 
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаВесовыхТоваров");
	СтруктураДействий.Вставить("ПроверкаТоваров");
	СтруктураДействий.Вставить("ПроверкаСерийныхНомеров");
	СтруктураДействий.Вставить("ИспользоватьКоличество", Количество);

	Возврат ПодключаемоеОборудованиеРТ.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект, СтруктураДействий);

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Серии

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)

	ТаблицаЗагрузкиИзТСД = Неопределено;
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД);
	ОбработатьШтрихкодыИзТСД(ТаблицаЗагрузкиИзТСД);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусыУказанияСерий()

	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
	УстановитьВидимостьЭлементовСерий();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);

КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУказанияСерий()
	
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	
	ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы ,ПараметрыФормыУказанияСерий,ЭтотОбъект);
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.ТоварыСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыУказатьСерии.Видимость        = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Скидки

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", 				УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	КонтролироватьОстаткиТоваров);
	СтруктураПараметры.Вставить("ДатаРасчета", Объект.Дата);	//	LNK 19.05.2021 07:36:49
	
	СведенияДокумента = Новый Структура;
	СегментИсключаемойНоменклатуры = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Магазин, "СегментИсключаемойНоменклатуры");
	СведенияДокумента.Вставить("СегментИсключаемойНоменклатуры", СегментИсключаемойНоменклатуры);
	СведенияДокумента.Вставить("Товары", Объект.Товары);
	СтруктураПараметры.Вставить("СведенияДокумента", СведенияДокумента);
	
	Возврат ПоместитьВоВременноеХранилище(СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры), УникальныйИдентификатор);
	
КонецФункции

// Запрашивает у пользователя скидку и применяет ее к табличной части Товары.
//
&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки)
	
	Если СуммаСкидкиНаценки <> 0 Тогда
		СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, Истина);
	Иначе
		СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина);
	КонецЕсли;
	
КонецПроцедуры

// Очищает ручные скидки в табличной части Товары.
//
&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	
КонецПроцедуры

&НаСервере	//	LNK 25.09.2017 14:31:26
Процедура ОтменитьАвтоматическиеСкидкиНаСервере()

	СкидкиНаценкиСервер.ОтменитьАвтоматическиеСкидки(Объект, "Товары", Истина);

//	LNK 27.03.2020 10:21:27	- удаляем ВСЕ подарки
	СтрокиДляУдаления = Объект.Товары.НайтиСтроки(Новый Структура("ПродажаПодарка", Истина));

	Для каждого СтрокаТовары Из СтрокиДляУдаления Цикл

		Объект.Товары.Удалить(СтрокаТовары);

	КонецЦикла;

КонецПроцедуры

&НаСервере	//	LNK 18.04.2023 04:19:46
Процедура ОтменитьНачислениеБонусныхБаллов()

	Объект.НачислениеБонусныхБаллов.Очистить();

	Для каждого СтрокаТовары Из Объект.Товары Цикл

		СтрокаТовары.СуммаБонусныхБалловНачислено = 0;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПеренестиСкидкиПодаркиВТоварыСервер(СтрокаДополнительногоОповещения)
	
	ЕстьОшибки = Ложь;
	СкидкиНаценкиСерверПереопределяемый.СообщитьОбОстающихсяПодарках(Объект, СтрокаДополнительногоОповещения, ЕстьОшибки);

	Если ЕстьОшибки Тогда

		СтрокаДополнительногоОповещения = "";

	Иначе

		СкидкиНаценкиСерверПереопределяемый.ПеренестиСкидкиПодаркиВТовары(Объект, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
		БонусныеБаллыСервер.ОбновитьОтображениеОплатаБонуснымиБаллами(Объект);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСкидки(Отказ)
	
	Если ИспользоватьАвтоматическиеСкидкиВПродажах
		И НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим()	//	LNK 12.06.2017 11:03:51
		И НЕ Объект.СкидкиРассчитаны 
		И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")
		И Объект.ЗаказПокупателя.Пустая()
		И Объект.Товары.Количество() > 0 Тогда
		
		ОтветНаВопрос = СкидкиНаценкиКлиент.ПредложитьПользователюРассчитатьСкидки();
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			Возврат;
		ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.ОК Тогда
			
			РассчитатьСкидкиНаценкиКлиент();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСообщенияПослеОформленияЧека()

	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
	СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Истина);
	СтруктураПараметры.Вставить("ПеренестиСкидкиПодаркиВТовары");
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	КонтролироватьОстаткиТоваров);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	БонусныеБаллыКлиент.ПроверитьНачисленияПоКредитнойОплате(Объект, ЭтотОбъект);	//	LNK 30.07.2021 13:59:24
	
	Если ВывестиСообщения Тогда
		СкидкиНаценкиКлиент.ОткрытьФормуВыводаСообщений(АдресПримененныхСкидокВоВременномХранилище);
	КонецЕсли;

КонецПроцедуры

// Рассчитывает скидки (наценки) и помещает их в хранилище, но не применяет к документу
//
&НаСервере
Процедура РассчитатьСкидкиБезПримененияКОбъекту(СтруктураПараметры)
	
	СтруктураПараметры.Вставить("ДатаРасчета", Объект.Дата);	//	LNK 19.05.2021 07:36:49
	ДанныеРасчетаСкидок = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ДанныеРасчетаСкидок, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()

	Если Объект.Товары.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	Если НЕ ОбщегоНазначенияКлиентСервер.СсылкаПустая(Объект.ЗаказПокупателя) Тогда

		ПоказатьОповещениеПользователя("Отказано!",, "Скидки недопустимы в чеке на основании заказа покупателя", БиблиотекаКартинок.Ошибка32);
		Возврат;

	КонецЕсли;

	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	СтруктураПараметры.Вставить("ПорядковыйНомерПродажи",           ПорядковыйНомерПродажи);
	СтруктураПараметры.Вставить("ПеренестиСкидкиПодаркиВТовары");
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	КонтролироватьОстаткиТоваров);

	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО

			РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();

	Иначе	РабочееМесто = ""

	КонецЕсли;

	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);

	Если НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда

		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();

	КонецЕсли;

	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	БонусныеБаллыКлиент.ПроверитьНачисленияПоКредитнойОплате(Объект, ЭтотОбъект);	//	LNK 30.07.2021 13:59:24

	Если ВывестиСообщения Тогда

		СкидкиНаценкиКлиент.ОткрытьФормуВыводаСообщений(АдресПримененныхСкидокВоВременномХранилище);

	КонецЕсли;

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32
	);
	
КонецПроцедуры

// Процедура - обработчик команды "РассчитатьСкидкиНаценки".
//
&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	// Сичкаренко 15.12.2020
	СтруктураПараметры.Вставить("ИспользоватьПрограммуЛояльности", 	РозничныеПродажиСервер.ПрограммаЛояльностиСотрудников(Объект));
	
	ДанныеКарты = РозничныеПродажиСервер.ПолучитьДанныеКарты(Объект.Ссылка
		, Объект.ВладелецДисконтнойКарты
		, Объект.ДисконтнаяКарта
		, Объект.Магазин
		, Объект.Товары.Выгрузить(, "Номенклатура, СуммаВсего, Количество")
		, Объект.ЗаказПокупателя
		, СтруктураПараметры.ИспользоватьПрограммуЛояльности
	);
	
	СтруктураПараметры.Вставить("МаксимальнаяСуммаНакопленияЛояльности", ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику(ТекущаяДата()).МаксимальнаяСуммаНакопленияЛояльности);
	Попытка
		СтруктураПараметры.Вставить("Накопленно", ДанныеКарты.СуммаПокупок);
	Исключение
		СтруктураПараметры.Вставить("Накопленно", 0);
	КонецПопытки;

	СкидкиНаценкиКлиентСервер.ОчиститьОкругленияТоваров(Объект.Товары, Истина);	//	LNK 27.05.2021 05:02:20
	СтруктураПараметры.Вставить("ДатаРасчета", Объект.Дата);	//	LNK 19.05.2021 07:36:49

	ДанныеРасчетаСкидок = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	Объект.Подарки.Очистить();	//	LNK 19.05.2021 10:12:36 - выдача только в РМК!
	
	ВывестиСообщения = Ложь;
	
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ДанныеРасчетаСкидок, УникальныйИдентификатор);
	
	Если ДанныеРасчетаСкидок[0].Результаты.ТаблицаСообщений.Количество() > 0 Тогда
		ВывестиСообщения = Истина;
	КонецЕсли;
	
	Модифицированность = НЕ СтруктураПараметры.ТолькоСообщенияПослеОформления;
	
	СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(Объект, "Товары", "СкидкиНаценки");
	
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	БонусныеБаллыСервер.ОбновитьОтображениеОплатаБонуснымиБаллами(Объект);

	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
	
		Объект.СкидкиРассчитаны = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Проведение

&НаСервере
Процедура ПровестиИзФормыСервер(Отказ, ЗапускатьОбработкуПослеЗаписи = Ложь, Объект_Ссылка = Неопределено)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");

	Если ЗаписываемыйОбъект.ПроверитьЗаполнение() Тогда

		Попытка

			Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда

					ЗаписываемыйОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);

			Иначе	ЗаписываемыйОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);

			КонецЕсли;

		Исключение

			ТекстОшибки = ОписаниеОшибки();
			Отказ = Истина;

		КонецПопытки;
		
		Если ЗаписываемыйОбъект.ДополнительныеСвойства.Свойство("Отказ") Тогда
			Если ЗаписываемыйОбъект.ДополнительныеСвойства.Отказ Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаписываемыйОбъект.ДополнительныеСвойства.Свойство("ТаблицыДляДвижений")
			И ЗаписываемыйОбъект.ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаПопыткиПродажПревышающихОстаток") Тогда
			
			ПродажиСервер.ОтразитьПопыткиПродаж(ЗаписываемыйОбъект.ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПопыткиПродажПревышающихОстаток, ЗаписываемыйОбъект.Дата);
			
		КонецЕсли;
		
		Объект_Ссылка = ЗаписываемыйОбъект.Ссылка;
		
		Если Отказ Тогда
		
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось провести ""%1"".'"),
					Строка(ЗаписываемыйОбъект) + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС + ТекстОшибки)
			);

			ВызватьИсключение Текст;

		ИначеЕсли ЗапускатьОбработкуПослеЗаписи Тогда
			
			ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
			
			ПослеЗаписиНаСервере(Объект, РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
	Иначе

		Отказ = Истина;

	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));

	Очищать = НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат");

	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Очищать));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Очищать));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано", Новый Структура("Очищать", Очищать));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОплатыПоДокументуПродажиСервер()
	
	ТаблицаОплатыПродажи = Объект.ЧекККМПродажа.Оплата.Выгрузить();
	ТаблицаОплатыПродажи.ЗаполнитьЗначения(Ложь, "ДанныеПереданыВБанк");
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ДанныеПереданыВБанк", Истина);
	
	СтрокиПереданныеВБанк = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	
	СтруктураПоиска = Новый Структура("ВидОплаты, ЭквайринговыйТерминал, Сумма, ПроцентТорговойУступки, СуммаТорговойУступки, СсылочныйНомер, НомерЧекаЭТ, НомерПлатежнойКарты");
	
	Индекс = 0 ;
	Для каждого СтрокаПереданнаяВБанк Из СтрокиПереданныеВБанк Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПереданнаяВБанк);
		
		СтрокиТаблицыОплатыПродажи = ТаблицаОплатыПродажи.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицыОплатыПродажи.Количество() > 0 Тогда
			Для каждого СтрокаТаблицыОплатыПродажи Из СтрокиТаблицыОплатыПродажи Цикл
				СтрокаТаблицыОплатыПродажи.ДанныеПереданыВБанк = Истина;
			КонецЦикла;
		Иначе
			
			СтрокаТаблицыОплатыПродажи = ТаблицаОплатыПродажи.Вставить(Индекс);
			Индекс = Индекс + 1;
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыОплатыПродажи, СтруктураПоиска);
			СтрокаТаблицыОплатыПродажи.ДанныеПереданыВБанк = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.Оплата.Загрузить(ТаблицаОплатыПродажи);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипыОплатВТЧСервер(Объект);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам(ТолькоЦенообразование)

	Элементы.ТоварыСуммаРучнойСкидки.ТолькоПросмотр   = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Элементы.ТоварыПроцентРучнойСкидки.ТолькоПросмотр = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Элементы.ТоварыНазначитьРучнуюСкидку.Доступность  = НЕ Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Элементы.ТоварыОтменитьРучныеСкидки.Доступность   = НЕ Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Элементы.ТоварыЦена.ТолькоПросмотр                = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Элементы.ТоварыСумма.ТолькоПросмотр               = ?(ТехническаяПоддержкаВызовСервера.ИсключительныйРежим(), Ложь, Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат);
	Элементы.ПодаркиЦена.ТолькоПросмотр               = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Элементы.ПодаркиСумма.ТолькоПросмотр              = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСуммаРучнойСкидки.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыПроцентРучнойСкидки.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);

	УправлениеПользователями.УстановитьДоступностьДляРеквизитовТабличнойЧасти(Элементы.ТоварыНазначитьРучнуюСкидку.Доступность, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);
	
	УправлениеПользователями.УстановитьДоступностьДляРеквизитовТабличнойЧасти(Элементы.ТоварыОтменитьРучныеСкидки.Доступность, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыЦена.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСумма.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ПодаркиЦена.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ПодаркиСумма.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
	
	Если НЕ ТолькоЦенообразование Тогда
		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Продавец.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьПродавца);

		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыПродавец.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьПродавца);

		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
	//	LNK 04.01.2017 13:54:53
		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Номер.ТолькоПросмотр,
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьНомерДокумента);
	 КонецЕсли;

//	LNK 02.04.2020 11:31:28
	Элементы.ТоварыОтменитьАвтоматическиеСкидки.Доступность = РольДоступна(Метаданные.Роли.АдминистраторСистемы)
															И ТехническаяПоддержкаВызовСервера.ИсключительныйРежим();

	СлужебныйРежим = ТехническаяПоддержкаВызовСервера.ВыполняютсяСлужебныеДействия();
	Элементы.ОплатаНомерПлатежнойКарты.Видимость = СлужебныйРежим;
	Элементы.ОплатаНомерЧекаЭТ.Видимость = СлужебныйРежим;
	Элементы.ОплатаСлипЧек.Видимость = СлужебныйРежим;
	Элементы.ТекстСлипЧек.Видимость  = СлужебныйРежим;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста	//	LNK 02.07.2021 08:04:00
Процедура ОбновитьИтоговыеПоказатели(Форма)

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Форма.Объект.Товары, Форма.Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Форма.Объект.Товары, Форма.Объект.ЦенаВключаетНДС, Форма.СуммаВсего);

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыСкидкиНаценки(Форма.Объект.СкидкиНаценки, Форма.СуммаСкидкиНаценки, Истина);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Форма.Объект.Оплата, Истина, Форма.СуммаОплачено);

	СуммаРучныхСкидок = 0;
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуРучныхСкидокДокумента(Форма.Объект.Товары, СуммаРучныхСкидок);
	Форма.СуммаСкидкиНаценки = Форма.СуммаСкидкиНаценки
							+ Форма.Объект.ОплатаБонуснымиБаллами.Итог("СуммаБонусныхБаллов")
							+ СуммаРучныхСкидок
							- Форма.Объект.Товары.Итог("СуммаОкругления");

	Форма.СуммаБезСкидки = Форма.СуммаВсего + Форма.СуммаСкидкиНаценки;
	Форма.СуммаКОплате	 = Форма.СуммаВсего - Форма.СуммаОплачено;

	Форма.СкидкиСуммаБонусныеБаллы	= ПолучитьСуммуСкидки(Форма.Объект.СкидкиНаценки, ПредопределенноеЗначение("Перечисление.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы"));
	Форма.СкидкиСуммаПодарки		= ПолучитьСуммуСкидки(Форма.Объект.СкидкиНаценки,, Истина);

	РассчитатьСдачу(Форма.Сдача, Форма.СуммаВсего, Форма.Объект);	//	LNK 31.08.2020 07:35:34

	ВсегоБонусныхБаллов = Форма.Объект.НачислениеБонусныхБаллов.Количество() + Форма.Объект.ОплатаБонуснымиБаллами.Количество();

	Форма.Элементы.ТоварыСуммаВсего.ТекстПодвала = Формат(Форма.СуммаВсего, "ЧДЦ=2; ЧН=0,00");
	Форма.Элементы.ГруппаБонусныеБаллы.Заголовок = "Бонусные баллы" + ?(ВсегоБонусныхБаллов = 0, "", " (" + Формат(ВсегоБонусныхБаллов, "ЧГ=") + ")");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСуммуСкидки(Таблица, СпособПримененияСкидки = Неопределено, ПодарокРаспределённый = Ложь)

	СуммаНекоторая = 0;

	Если ПодарокРаспределённый = Истина Тогда

		Для каждого СтрокаТаблицы Из Таблица Цикл

			Если НЕ СтрокаТаблицы.ПодарокПозиция.Пустая() Тогда

				СуммаНекоторая = СуммаНекоторая + СтрокаТаблицы.Сумма;

			КонецЕсли;

		КонецЦикла;

	Иначе

		Если СпособПримененияСкидки = Неопределено Тогда


		Иначе

			Отбор = Новый Структура(
				"СпособПримененияСкидки"
				, СпособПримененияСкидки
			);

		КонецЕсли;

		СтрокиСкидок = Таблица.НайтиСтроки(Отбор);

		Для каждого СтрокаТаблицы Из СтрокиСкидок Цикл

			СуммаНекоторая = СуммаНекоторая + СтрокаТаблицы.Сумма;

		КонецЦикла;

	КонецЕсли;

	Возврат СуммаНекоторая;

КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкодыИзТСД(ДанныеШтрикодов)
	
	Для Индекс = 0 По ДанныеШтрикодов.Количество() - 1 Цикл
		ТекКод = ДанныеШтрикодов[Индекс].Штрихкод;
		ТекКоличество = ДанныеШтрикодов[Индекс].Количество;
		СтруктураПараметровКлиента = ПолученШтрихкодИзТСД(ТекКод, ТекКоличество);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
	КонецЦикла;
	
КонецПроцедуры

//Процедура заполняет товары из подбора
// Параметры: 
//  ВыбранноеЗначение - Структура,
//  ИмяТабличнойЧасти  - Строка
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТабличнойЧасти  = "")
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	ИмяТабличнойЧасти = ?(ПустаяСтрока(ИмяТабличнойЧасти), "Товары", ИмяТабличнойЧасти);
	ТаблицаСерийныхНомеров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресСерийныхНомеровВХранилище);
	ЕстьСерийныеНомера = (ИмяТабличнойЧасти = "Товары") И (ТаблицаСерийныхНомеров.Количество() > 0);
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, Упаковка, Цена, КоличествоУпаковок");
		Если ЕстьСерийныеНомера Тогда
			МассивСерийныхНомеров = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(СтрокаТовара.КлючСвязиСерийныхНомеров , ТаблицаСерийныхНомеров);
			ТекущаяСтрока.КлючСвязиСерийныхНомеров = ОбработкаТабличнойЧастиТоварыСервер.ДобавитьСерийныеНомераВТабличнуюЧасть(Объект.СерийныеНомера, МассивСерийныхНомеров, 0);
		КонецЕсли;
		СтруктураДействий = Новый Структура;
		СтруктураПараметровДействия = Новый Структура;
		СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
		СтруктураПараметровДействия.Вставить("РабочееМесто", Объект.КассаККМ.РабочееМесто);
		СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДействия);

		Если ИмяТабличнойЧасти = "Товары" Тогда

			ТекущаяСтрока.Продавец = Объект.Продавец;
			СтруктураПараметровСтавкиНДС = Новый Структура;
			СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
			СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
			
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
			
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано", Новый Структура("Очищать", Истина));

		КонецЕсли;

		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	Если ТаблицаТоваров.Количество() > 0 Тогда
		Объект.СкидкиРассчитаны = Ложь;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект[ИмяТабличнойЧасти]);
	
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	ЗаполнитьСтатусыУказанияСерийСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПлатежнойКартойЧерезЭквайринговыйТерминал(ВыбраннаяСтрока, СуммаОперации, ПределСуммы)
	
	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	ОписаниеОшибки            = "";
	
	НомерКарты          = "";
	НомерСсылкиОперации = "";
	НомерЧекаЭТ         = "";
	СтрокаСлипЧека      = "";
	ВидКарты            = "";
	
	Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	ИндексСтроки = Объект.Оплата.Индекс(ВыбраннаяСтрока);
	
	Если Объект.Проведен Тогда
		РезультатПроведения = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный));
	Иначе
		РезультатПроведения = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Оперативный));
	КонецЕсли;
	
	ВыбраннаяСтрока = Объект.Оплата[ИндексСтроки];
		
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента()Тогда // Проверка на определенность рабочего места ВО
		
			
		СтруктрураЭквайринговыйТерминал = СтруктураДанныхЭТ(ВыбраннаяСтрока.ЭквайринговыйТерминал);
		ИдентификаторУстройстваЭТ = СтруктрураЭквайринговыйТерминал.ПодключаемоеОборудование;
			
		Если ИдентификаторУстройстваЭТ <> Неопределено Тогда
			
			ПараметрыКассыККМ = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(Объект.КассаККМ);
			ИдентификаторУстройстваФР              = ПараметрыКассыККМ.ИдентификаторУстройства;
			ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
			
			Если ЗначениеЗаполнено(ИдентификаторУстройстваФР) ИЛИ ИспользоватьБезПодключенияОборудования Тогда
				
				// Подключение устройства ЭТ
				Если Не СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
					
					РезультатЭТ = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
																									ИдентификаторУстройстваЭТ,
																									ОписаниеОшибки);
					
				Иначе
					
					РезультатЭТ = Истина;
					
				КонецЕсли;
				
				Если РезультатЭТ Тогда
					
					// Подключение устройства ФР
					РезультатФР = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
																									ИдентификаторУстройстваФР,
																									ОписаниеОшибки);
					
					Если РезультатФР ИЛИ ИспользоватьБезПодключенияОборудования Тогда
						
						// Предварительно авторизуем операцию
						ПараметрыФормы = Новый Структура();
						
						ПараметрыФормы.Вставить("Сумма"      , СуммаОперации);
						ПараметрыФормы.Вставить("ПределСуммы", ПределСуммы);
						
						Если СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
							ПараметрыФормы.Вставить("ПоказыватьНомерКарты", Истина);   
						КонецЕсли;
						
						Ответ = ОткрытьФормуМодально("Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ", ПараметрыФормы);
						
						Если ТипЗнч(Ответ) = Тип("Структура") Тогда
							
							ВходныеПараметры  = Новый Массив();
							ВыходныеПараметры = Неопределено;
							
							ВходныеПараметры.Добавить(Ответ.Сумма);
							ВходныеПараметры.Добавить(Ответ.ДанныеКарты);
							
							СуммаОперации = Ответ.Сумма;
							
							Если Не СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
								
								ПозицияРазделителя = СтрНайти(Ответ.ДанныеКарты, "=");
								Если ПозицияРазделителя > 16 Тогда
									НомерКарты = "";
									Для Счетчик = 1 По ПозицияРазделителя - 6 Цикл
										НомерКарты = НомерКарты + "*";
									КонецЦикла;
									НомерКарты = НомерКарты
											   + Сред(Ответ.ДанныеКарты, ПозицияРазделителя - 5, 4);
								КонецЕсли;
								
								// Выполнение операции на ЭТ
								РезультатЭТ = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваЭТ,
																						  "AuthorizeSales",
																						  ВходныеПараметры,
																						  ВыходныеПараметры);
								
								Если РезультатЭТ Тогда
									
									СтрокаСлипЧека = ВыходныеПараметры[3][1];
									Если Не ПустаяСтрока(СтрокаСлипЧека) Тогда
										глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", СтрокаСлипЧека);
									КонецЕсли;
									
									НомерКарты          = ?(Не ПустаяСтрока(НомерКарты)
														И ПустаяСтрока(СтрЗаменить(СокрЛП(ВыходныеПараметры[0]), "*", "")),
														НомерКарты, ВыходныеПараметры[0]);
									НомерСсылкиОперации = ВыходныеПараметры[1];
									НомерЧекаЭТ         = ВыходныеПараметры[2];
									
								Иначе
									
									ТекстОписаниеОшибки = ВыходныеПараметры[1];
									
								КонецЕсли;
								
							Иначе
								
								ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию оплаты на эквайринговом терминале.'") + Символы.ПС;
								ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'")        + " "+ СуммаОперации  + Символы.ПС;
								ТекстВопроса = ТекстВопроса + Символы.ПС;
								ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция оплаты на эквайринговом терминале прошла успешно?'");
								
								РезультатВопроса = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
								РезультатЭТ = (РезультатВопроса = КодВозвратаДиалога.Да);
								
								Если РезультатЭТ Тогда
									СтрокаСлипЧека = НСтр("ru = 'Произведена оплата на сумму %1% %2%'");
									СтрокаСлипЧека = СтрЗаменить(СтрокаСлипЧека, "%1%", Формат(СуммаОперации, "ЧДЦ=2; ЧГ="));
									СтрокаСлипЧека = СтрЗаменить(СтрокаСлипЧека, "%2%", "Грн.");
								Иначе
									СтрокаСлипЧека = "";
									ТекстОписаниеОшибки = НСтр("ru = 'Операция отменена'");
								КонецЕсли;
								
								НомерКарты          = Ответ.НомерКарты;
								НомерСсылкиОперации = Ответ.СсылочныйНомер;
								НомерЧекаЭТ         = Ответ.НомерЧека;
								
							КонецЕсли;
								
							Если Не РезультатЭТ Тогда
								
								ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
								|""%ОписаниеОшибки%"".
								|Оплата по карте не была произведена.'");
								ТекстСообщения = СтрЗаменить(ТекстСообщения,
															 "%ОписаниеОшибки%",
															 ТекстОписаниеОшибки);
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
								
							Иначе
								
								Если Не ПустаяСтрока(СтрокаСлипЧека) И Не ИспользоватьБезПодключенияОборудования Тогда
									
									ВходныеПараметры  = Новый Массив();
									ВходныеПараметры.Добавить(СтрокаСлипЧека);
									ВыходныеПараметры = Неопределено;
									
									РезультатФР = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР,
																							 "PrintText",
																							  ВходныеПараметры,
																							  ВыходныеПараметры);
								КонецЕсли;
								
							КонецЕсли;
							
							Если РезультатЭТ И (Не РезультатФР И Не ИспользоватьБезПодключенияОборудования) Тогда
								
								ОписаниеОшибкиФР = ВыходныеПараметры[1];
								
								ВходныеПараметры  = Новый Массив();
								ВыходныеПараметры = Неопределено;
								
								ВходныеПараметры.Добавить(СуммаОперации);
								ВходныеПараметры.Добавить(НомерСсылкиОперации);
								ВходныеПараметры.Добавить(НомерЧекаЭТ);
								
								// Выполнение операции на ЭТ
								МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваЭТ,
																			"EmergencyVoid",
																			ВходныеПараметры,
																			ВыходныеПараметры);
								
								ТекстСообщения = НСтр("ru = 'При печати слип-чека возникла ошибка:
													  |""%ОписаниеОшибки%"".
													  |Операция по карте была отменена.'");
								ТекстСообщения = СтрЗаменить(ТекстСообщения,
															 "%ОписаниеОшибки%",
															 ОписаниеОшибкиФР);
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
								
							ИначеЕсли РезультатЭТ Тогда
								
								// Сохранить в таблице данные оплаты картой
								
								ВыбраннаяСтрока.НомерПлатежнойКарты = НомерКарты; // Возможна запись пустого номера карты или номера вида "****************"
								ВыбраннаяСтрока.Сумма               = СуммаОперации;
								ВыбраннаяСтрока.СсылочныйНомер      = НомерСсылкиОперации;
								ВыбраннаяСтрока.НомерЧекаЭТ         = НомерЧекаЭТ;
								ВыбраннаяСтрока.ДанныеПереданыВБанк = Истина;
								
								Записать(); // Обязателено необходимо записать документ, для предотвращения потери информации.
								
							КонецЕсли;
							
						КонецЕсли;
						
						// Отключение устройства ФР
						МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
																						 ИдентификаторУстройстваФР);
						
						Если Не СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
							// Отключение устройства ЭТ
							МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
																							 ИдентификаторУстройстваЭТ);
						КонецЕсли;
						
					Иначе
						ТекстСообщения = НСтр("ru = 'При подключении фискального регистратора произошла ошибка:
											 |""%ОписаниеОшибки%"".
											 |Операция по карте не была выполнена.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
					
				Иначе
					ТекстСообщения = НСтр("ru = 'При подключении эквайрингового терминала произошла ошибка:
										  |""%ОписаниеОшибки%"".
										  |Операция по карте не была выполнена.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
			Иначе
				ТекстСообщения = НСтр("ru = 'Не выбран фискальный регистратор.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		Иначе
			
			// Не выбран эквайринговый терминал
			
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюКлиент(Отказ, РежимЗаписи)
	
	// Если документ проводится, рассчитаем скидки
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ПроверитьСкидки(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Установливает доступность элементов по виду операции
//
// Параметры:
//  ТекущаяСтрока - Строка табличной части "Оплата"
//
Процедура ПересчитатьСуммуТорговойУступки(ТекущаяСтрока)
	
	ТекущаяСтрока.СуммаТорговойУступки = ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентТорговойУступки / 100;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПогашениеВХранилище(АдресВременногоХранилища)
	
	Таблица_ПогашениеПодарочныхСертификатов = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.ПогашениеПодарочныхСертификатов.Загрузить(Таблица_ПогашениеПодарочныхСертификатов);
	
	
	Если Таблица_ПогашениеПодарочныхСертификатов.Количество() = 0 Тогда
	
		СтрокиКУдалению = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом));
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		
			Объект.Оплата.Удалить(Объект.Оплата.Индекс(СтрокаКУдалению));
		
		КонецЦикла;
	Иначе
		ИтогоПоНоминалу = Таблица_ПогашениеПодарочныхСертификатов.Итог("Номинал");
		СтрокиТаблицы = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом));
		Если СтрокиТаблицы.Количество() = 0  Тогда
			СтрокаТаблицы = Объект.Оплата.Добавить();
			СтрокаТаблицы.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом;
		Иначе
			СтрокаТаблицы = СтрокиТаблицы[0];
		КонецЕсли;
		
		СуммаДокумента = ?(Объект.ЦенаВключаетНДС, Объект.Товары.Итог("Сумма"), Объект.Товары.Итог("Сумма") + Объект.Товары.Итог("СуммаНДС"));
		
		СтрокаТаблицы.Сумма = Мин(СуммаДокумента, ИтогоПоНоминалу);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СтруктураДанныхЭТ(Терминал)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ Первые 1
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование,
	|	ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования,
	|	ЭквайринговыеТерминалы.Ссылка
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Терминал);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СтруктураВозврата = Новый Структура("ПодключаемоеОборудование, ИспользоватьБезПодключенияОборудования");
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
	Иначе
		СтруктураВозврата.ПодключаемоеОборудование = Неопределено; 
		СтруктураВозврата.ИспользоватьБезПодключенияОборудования = Истина;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
// Функция считает сумму, оплаченную безналичными.
//
// Возвращаемое значение:
//  Число - сумма, оплаченная безналично.
//
Функция СуммаБезналичнойОплаты() 

	СуммаБезналичнойОплаты = 0;
	Для Каждого ТекОплата Из Объект.Оплата Цикл
		Если ЗначениеЗаполнено(ТекОплата.ВидОплаты) И ТекОплата.ВидОплаты.ТипОплаты <> Перечисления.ТипыОплатЧекаККМ.Наличные 
		И НЕ ТекОплата.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом Тогда
			СуммаБезналичнойОплаты = СуммаБезналичнойОплаты + ТекОплата.Сумма;
		КонецЕсли;
	КонецЦикла;

	Возврат СуммаБезналичнойОплаты;

КонецФункции

&НаСервере
// Функция считает сумму, оплаченную подарочными сертификатами.
//
// Возвращаемое значение:
//  Число - сумма, оплаченная подарочными сертификатами.
//
Функция СуммаОплатыПодарочнымиСертификатами() 

	СуммаОплаты = 0;
	Для Каждого ТекОплата Из Объект.Оплата Цикл
		Если ТекОплата.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом Тогда
			СуммаОплаты = СуммаОплаты + ТекОплата.Сумма;
		КонецЕсли;
	КонецЦикла;

	Возврат СуммаОплаты;

КонецФункции

&НаСервере
Функция ТипОплатыПоВиду(ВидОплаты)

	Возврат ВидОплаты.ТипОплаты;

КонецФункции

&НаСервере
Функция ПоместитьПогашениеВХранилище()

	Возврат ОбщегоНазначенияРТ.ПоместитьВоВременноеХранилищеТабличнуюЧастьОбъекта(Объект, "ПогашениеПодарочныхСертификатов", УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция МассивОплатПриПробитииЧекаККМ()
	
	// Подготовка таблицы оплат
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМОплата.Сумма,
	|	ВЫРАЗИТЬ(ЧекККМОплата.ВидОплаты КАК Справочник.ВидыОплатЧекаККМ) КАК ВидОплаты
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	&Оплата КАК ЧекККМОплата
	|ГДЕ
	|	НЕ ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.Сумма,
	|	ТаблицаВЗапросе.ВидОплаты.ТипОплаты КАК ТипОплаты
	|ПОМЕСТИТЬ ТаблицаСТипамиОплат
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТаблицаСТипамиОплат.Сумма) КАК Сумма,
	|	ТаблицаСТипамиОплат.ТипОплаты
	|ИЗ
	|	ТаблицаСТипамиОплат КАК ТаблицаСТипамиОплат
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСТипамиОплат.ТипОплаты
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаСТипамиОплат.Сумма) > 0";
	
	Запрос.УстановитьПараметр("Оплата", Объект.Оплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	ТаблицаПоТипамОплат = Результат.Выгрузить();
	
	МассивОплат = Новый Массив();
	
	// Наличные
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.Наличные, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СтрокаОплаты = Новый СписокЗначений();
		СтрокаОплаты.Добавить(0);
		СтрокаОплаты.Добавить(СтрокаТаблицы.Сумма);
		СтрокаОплаты.Добавить("Наличная оплата");
		СтрокаОплаты.Добавить("");
		МассивОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// Платежная карта
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СтрокаОплаты = Новый СписокЗначений();
		СтрокаОплаты.Добавить(1);
		СтрокаОплаты.Добавить(СтрокаТаблицы.Сумма);
		СтрокаОплаты.Добавить("Платежная карта");
		СтрокаОплаты.Добавить("");
		МассивОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// Банковский кредит
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.БанковскийКредит, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СтрокаОплаты = Новый СписокЗначений();
		СтрокаОплаты.Добавить(2);
		СтрокаОплаты.Добавить(СтрокаТаблицы.Сумма);
		СтрокаОплаты.Добавить("Банковский кредит");
		СтрокаОплаты.Добавить("");
		МассивОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// Подарочный сертификат
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.ПодарочныйСертификат, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СтрокаОплаты = Новый СписокЗначений();
		СтрокаОплаты.Добавить(3);
		СтрокаОплаты.Добавить(СтрокаТаблицы.Сумма);
		СтрокаОплаты.Добавить("Подарочный сертификат");
		СтрокаОплаты.Добавить("");
		МассивОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Возврат МассивОплат;
	
КонецФункции // МассивОплатПриПробитииЧекаККМ()

&НаСервере	//	LNK 23.10.2019 13:17:50
Функция НужноОкруглитьЧекПередПробитием(СоставТиповНоменклатуры)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.ТипОплаты КАК ТипОплаты
	|ИЗ
	|	Справочник.ВидыОплатЧекаККМ КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Ссылка В(&СписокОплат)
	|	И ТаблицаСправочник.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)"
	);
	Запрос.УстановитьПараметр("СписокОплат", Объект.Оплата.Выгрузить(, "ВидОплаты").ВыгрузитьКолонку("ВидОплаты"));

	НужноОкруглить = (Запрос.Параметры.СписокОплат.Количество() = 0 ИЛИ Запрос.Выполнить().Пустой())
				И НЕ Объект.СуммаДокумента = Окр(Объект.СуммаДокумента, 1, РежимОкругления.Окр15как20);

	Если НужноОкруглить Тогда

		СоставТиповНоменклатуры = Новый Соответствие;

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСправочник.Ссылка КАК Номенклатура,
		|	ТаблицаСправочник.ТипНоменклатуры КАК ТипНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК ТаблицаСправочник
		|ГДЕ
		|	ТаблицаСправочник.Ссылка В(&СписокСсылок)"
		);
		Запрос.УстановитьПараметр("СписокСсылок", Объект.Товары.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура"));

		Выборка = Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл

			СоставТиповНоменклатуры.Вставить(Выборка.Номенклатура, Выборка.ТипНоменклатуры);

		КонецЦикла;

	КонецЕсли;

	Возврат НужноОкруглить;

КонецФункции

&НаКлиенте	//	LNK 31.01.2019 11:36:08
Функция ПробитьЧекНаРегистраторе()

	Перем СоставТиповНоменклатуры;

	Отказ     = Ложь;
	ЧекПробит = Ложь;
	
	ОписаниеОшибки = "";
	
	Если НЕ Объект.НомерЧекаККМ = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьСкидки(Отказ);
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ Объект.Проведен Тогда
		
		ТекстСообщения = "Чека ККМ не проведено!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	
	СкидкиНаценкиКлиентСервер.ОчиститьОкругленияТоваров(Объект.Товары, Ложь);	//	LNK 31.01.2020 10:31:19

	Если НужноОкруглитьЧекПередПробитием(СоставТиповНоменклатуры) Тогда
		
	//	LNK 22.10.2019 10:53:59
		СкидкиНаценкиКлиентСервер.ОкруглитьТоварыПоСуммеДокумента(Объект.СуммаДокумента, Объект.Товары, Объект.ЦенаВключаетНДС, СоставТиповНоменклатуры);

	КонецЕсли;

	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		
		Объект.НомерСменыККМ = 0;
		Объект.НомерЧекаККМ  = ПорядковыйНомерПродажи;
		
		Объект.СтатусЧекаККМ = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый");
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Модифицированность = Истина;
		
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		
		Возврат РезультатЗаписи = Истина;

	Иначе

		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		
			ПараметрыКассыККМ = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(Объект.КассаККМ);
			ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
			
			Если НЕ ИдентификаторУстройстваФР = Неопределено Тогда
				
				// Подключаем ФР
				Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				                                                                              ИдентификаторУстройстваФР,
				                                                                              ОписаниеОшибки);
				Если Результат Тогда

				//	Готовим данные
					ВходныеПараметры  = ВходныеПараметрыПолучитьНаСервере(Объект.Ссылка);
					ВыходныеПараметры = Неопределено;
					
					НомерСекции = 1;

				//	Печатаем чек.
					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР,
					                                                        "PrintReceipt",
					                                                        ВходныеПараметры,
					                                                        ВыходныеПараметры);
					Если Результат Тогда
						
					//	Установить полученное значение номера чека реквизиту документа.
						Объект.НомерСменыККМ = ВыходныеПараметры[0];
						Объект.НомерЧекаККМ  = ВыходныеПараметры[1];

					//	LNK 25.10.2023 08:40:01
						УстановитьДанныеХранилища(,, ?(ВыходныеПараметры.Количество() = 3, ВыходныеПараметры[2], Неопределено));

						Если ВыходныеПараметры.Количество() = 3 Тогда

							УстановитьФлагиПроведения(ВыходныеПараметры[2]);	//	LNK 07.02.2024 11:57:04

						КонецЕсли;
						
						Объект.СтатусЧекаККМ = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый");
						Объект.Дата          = ОбщегоНазначенияКлиент.ДатаСеанса();

						Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда

							Объект.НомерЧекаККМ = 1;

						КонецЕсли;

						Модифицированность = Истина;

						РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));

						Если РезультатЗаписи = Истина Тогда

							ЧекПробит = Истина;

						КонецЕсли;

					Иначе

						ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
						                            |Чек не напечатан на фискальном регистраторе.
						                            |Дополнительное описание:
						                            |%ДополнительноеОписание%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,
						                             "%ДополнительноеОписание%",
						                             ВыходныеПараметры[1]);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

					КонецЕсли;
					
				//	Отключаем ФР
					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройстваФР);

				Иначе

					ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
					                            |Чек не напечатан на фискальном регистраторе.
					                            |Дополнительное описание:
					                            |%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

				КонецЕсли;

			Иначе

				ТекстСообщения = НСтр("ru = 'Не выбран фискальный регистратор.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

			КонецЕсли;

		Иначе

			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

		КонецЕсли;

	КонецЕсли;
	
	Возврат ЧекПробит;

КонецФункции

&НаСервере	//	LNK 25.10.2023 08:38:50
Процедура УстановитьДанныеХранилища(ДанныеРасчёта = Неопределено, ОтветЭквайрера = Неопределено, ДанныеПРРО = Неопределено)

	Если НЕ ДанныеРасчёта = Неопределено Тогда

		ДанныеХранилища.ДанныеРасчёта = ДанныеРасчёта;

	КонецЕсли;

	Если НЕ ОтветЭквайрера = Неопределено Тогда

		ДанныеХранилища.ОтветЭквайрера = ОтветЭквайрера;

	КонецЕсли;

	Если НЕ ДанныеПРРО = Неопределено Тогда

		ДанныеХранилища.ДанныеПРРО = ДанныеПРРО;

	КонецЕсли;

КонецПроцедуры

&НаСервере	//	LNK 07.02.2024 12:01:18
Процедура УстановитьФлагиПроведения(ДанныеПРРО)

	Документы.ЧекККМ.УстановитьФлагиПроведения(Объект, ДанныеПРРО);

КонецПроцедуры

//	LNK 02.02.2017 11:43:26
//	Перевел на работу с результатми запроса, а не по ссылке (и к номенклатуре в т.ч.).
&НаСервере
Функция ВходныеПараметрыПолучитьНаСервере(ДокументСсылка)

	Возврат Документы.ЧекККМ.ВходныеПараметрыПолучить(ДокументСсылка);

КонецФункции

// Процедура вызывается при нажатии кнопки "НапечататьЧек" командной панели.
//
&НаКлиенте
Функция ПробитьЧекНаКлиенте()
	
	Результат = Ложь;
	ЕстьОшибки = Ложь;
	
	ОчиститьСообщения();
	
	Если Объект.ПометкаУдаления Тогда
		
		ТекстОшибки = НСтр("ru='Документ помечен на удаление'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Если Не ЕстьОшибки И ПроверитьЗаполнение() Тогда
		
		Результат = ПробитьЧекНаРегистраторе();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста	//	LNK 31.08.2020 07:34:21
Процедура РассчитатьСдачу(Сдача, СуммаВсего, Объект)
	
	СуммаНаличных  = 0;
	СтрокиНаличных = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные")));
	
	Для каждого СтрокаНаличных Из СтрокиНаличных Цикл

		СуммаНаличных = СуммаНаличных + СтрокаНаличных.Сумма;

	КонецЦикла;

	Сдача = Макс(Объект.Оплата.Итог("Сумма") - СуммаВсего, 0);
	Сдача = Мин(Сдача, СуммаНаличных);
	
КонецПроцедуры

//Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора
// Параметры:
//  Отказ - Булево
&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин"" не заполнено'"), Объект, "Объект.Магазин",,Отказ);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОплатуКартой(ТекущиеДанные)
	
	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	ОписаниеОшибки            = "";
	
	СуммаОперации       = ТекущиеДанные.Сумма;
	НомерКарты          = ТекущиеДанные.НомерПлатежнойКарты;
	НомерСсылкиОперации = ТекущиеДанные.СсылочныйНомер;
	НомерЧекаЭТ         = ТекущиеДанные.НомерЧекаЭТ;
	СтрокаСлипЧека      = "";
	
	СтруктрураЭквайринговыйТерминал = СтруктураДанныхЭТ(ТекущиеДанные.ЭквайринговыйТерминал);
	ИдентификаторУстройстваЭТ = СтруктрураЭквайринговыйТерминал.ПодключаемоеОборудование;
	
		
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		
		Если ИдентификаторУстройстваЭТ <> Неопределено Тогда
			
			// Выбор устройства ФР
			ПараметрыКассыККМ = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(Объект.КассаККМ);
			ИдентификаторУстройстваФР              = ПараметрыКассыККМ.ИдентификаторУстройства;
			ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
			
			Если ЗначениеЗаполнено(ИдентификаторУстройстваФР) ИЛИ ИспользоватьБезПодключенияОборудования Тогда
				
				Если Не СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
					
					// Подключение устройства ЭТ
					РезультатЭТ = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
																									ИдентификаторУстройстваЭТ,
																									ОписаниеОшибки);
					
				Иначе
					
					РезультатЭТ = Истина;
					
				КонецЕсли;
				
				Если РезультатЭТ Тогда
					
					// Подключение устройства ФР
					РезультатФР = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
																									ИдентификаторУстройстваФР,
																									ОписаниеОшибки);
					
					Если РезультатФР ИЛИ ИспользоватьБезПодключенияОборудования Тогда
						
						Если Не СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
							
							ВходныеПараметры  = Новый Массив();
							ВыходныеПараметры = Неопределено;
							
							ВходныеПараметры.Добавить(СуммаОперации);
							ВходныеПараметры.Добавить(НомерСсылкиОперации);
							ВходныеПараметры.Добавить(НомерЧекаЭТ);
							
							// Выполнение операции на ЭТ
							РезультатЭТ = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваЭТ,
																					 "AuthorizeVoid",
																					  ВходныеПараметры,
																					  ВыходныеПараметры);
							
							Если РезультатЭТ Тогда
								
								СтрокаСлипЧека = ВыходныеПараметры[0][1];
								Если Не ПустаяСтрока(СтрокаСлипЧека) Тогда
									глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", СтрокаСлипЧека);
								КонецЕсли;
								
								НомерКарты          = "";
								НомерСсылкиОперации = "";
								НомерЧекаЭТ         = "";
								
							Иначе
								
								ТекстОписаниеОшибки = ВыходныеПараметры[1];
								
							КонецЕсли;
							
						Иначе
							
							ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию отмены оплаты на эквайринговом терминале.'") + Символы.ПС;
							ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'")        + " "+ СуммаОперации         + Символы.ПС;
							ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер карты:'")           + " "+ НомерКарты            + Символы.ПС;
							ТекстВопроса = ТекстВопроса + НСтр("ru = 'Ссылочный номер:'")       + " "+ НомерСсылкиОперации   + Символы.ПС;
							ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер чека:'")            + " "+ НомерЧекаЭТ           + Символы.ПС;
							ТекстВопроса = ТекстВопроса + Символы.ПС;
							ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция отмены оплаты на эквайринговом терминале прошла успешно?'");
							
							РезультатВопроса = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
							РезультатЭТ = (РезультатВопроса = КодВозвратаДиалога.Да);
							
							Если РезультатЭТ Тогда
								СтрокаСлипЧека = НСтр("ru = 'Отменена оплата на сумму %1% %2%'");
								СтрокаСлипЧека = СтрЗаменить(СтрокаСлипЧека, "%1%", СуммаОперации);
								СтрокаСлипЧека = СтрЗаменить(СтрокаСлипЧека, "%2%", "Грн.");
							Иначе
								СтрокаСлипЧека = "";
								ТекстОписаниеОшибки = НСтр("ru = 'Операция отменена'");
							КонецЕсли;
							
						КонецЕсли;
						
						Если Не РезультатЭТ Тогда
							ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
												  |""%ОписаниеОшибки%"".
												  |Отмена по карте не была произведена.'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения,
														 "%ОписаниеОшибки%",
														 ТекстОписаниеОшибки);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						Иначе
							
							Если Не ПустаяСтрока(СтрокаСлипЧека) И Не ИспользоватьБезПодключенияОборудования Тогда
								ВходныеПараметры  = Новый Массив();
								ВходныеПараметры.Добавить(СтрокаСлипЧека);
								ВыходныеПараметры = Неопределено;
								
								РезультатФР = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР,
																						 "PrintText",
																						  ВходныеПараметры,
																						  ВыходныеПараметры);
							КонецЕсли;
							
						КонецЕсли;
						
						Если РезультатЭТ И (Не РезультатФР И Не ИспользоватьБезПодключенияОборудования) Тогда
							
							ОписаниеОшибкиФР = ВыходныеПараметры[1];
							
							ТекстСообщения = НСтр("ru = 'При печати слип-чека возникла ошибка:
												  |""%ОписаниеОшибки%"".
												  |Операция по карте была отменена.'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения,
														 "%ОписаниеОшибки%",
														 ОписаниеОшибкиФР);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							
						ИначеЕсли РезультатЭТ Тогда
							
							Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
								ТекущиеДанные.СсылочныйНомер = "";
								ТекущиеДанные.НомерЧекаЭТ    = "";
								ТекущиеДанные.НомерПлатежнойКарты = "";
								ТекущиеДанные.ДанныеПереданыВБанк = Ложь;
							Иначе
								ТекущиеДанные.ДанныеПереданыВБанк = Истина;
							КонецЕсли;
							
							Записать();
							
						КонецЕсли;
						
						// Отключение устройства ФР
						МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
																						 ИдентификаторУстройстваФР);
						
						Если Не СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
							// Отключение устройства ЭТ
							МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
																							 ИдентификаторУстройстваЭТ);
						КонецЕсли;
						
					Иначе
						ТекстСообщения = НСтр("ru = 'При подключении фискального регистратора произошла ошибка:
											  |""%ОписаниеОшибки%"".
											  |Операция по карте не была выполнена.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
					
				Иначе
					ТекстСообщения = НСтр("ru = 'При подключении эквайрингового терминала произошла ошибка:
										  |""%ОписаниеОшибки%"".
										  |Операция по карте не была выполнена.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
			Иначе
				ТекстСообщения = НСтр("ru = 'Не выбран фискальный регистратор.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		Иначе
			
			// Не выбран эквайринговый терминал
			
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокПроведенияКлиент()
	
	Если Элементы.Найти("ФормаПровестиИЗакрытьИзФормы") <> Неопределено Тогда
		Элементы.ФормаПровестиИЗакрытьИзФормы.Доступность = НЕ ТолькоПросмотр;
	КонецЕсли;
	
	Если Элементы.Найти("ФормаПровестиИзФормы") <> Неопределено Тогда
		Элементы.ФормаПровестиИзФормы.Доступность         = НЕ ТолькоПросмотр;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКнопокПроведенияСервер()
	
	Если Элементы.Найти("ФормаПровестиИЗакрытьИзФормы") <> Неопределено Тогда
		Элементы.ФормаПровестиИЗакрытьИзФормы.Доступность = НЕ ТолькоПросмотр;
	КонецЕсли;
	
	Если Элементы.Найти("ФормаПровестиИзФормы") <> Неопределено Тогда
		Элементы.ФормаПровестиИзФормы.Доступность         = НЕ ТолькоПросмотр;
	КонецЕсли;
	
КонецПроцедуры

// Установливает доступность элементов по виду операции
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура УстановитьДоступностьПоВидуОперацииКлиент()

	ОперацияВозврат = (Объект.ВидОперации = ЗначениеПеречислениеВидОперацииВозврат);

	Элементы.АналитикаХозяйственнойОперации.ТолькоПросмотр = НЕ ОперацияВозврат;

	Элементы.ЧекККМПродажа.ТолькоПросмотр = НЕ ОперацияВозврат;
	Элементы.ЧекККМПродажа.АвтоОтметкаНезаполненного = ОперацияВозврат;

	Элементы.ДисконтнаяКарта.ТолькоПросмотр = ОперацияВозврат;

	Элементы.ГруппаТоварыСкидкиНаценки.ТолькоПросмотр = ОперацияВозврат;
 
КонецПроцедуры

// Устанавливает значение выбора чека возврата
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура УстановитьПараметрыВыбораЧекаККМПродажиКлиент()

	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.КассаККМ"   , Объект.КассаККМ));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидОперации",ЗначениеПеречислениеВидОперацииПродажа));
	
	МассивСтатусовЧекаККМ = Новый Массив;
	
	МассивСтатусовЧекаККМ.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка"));
	МассивСтатусовЧекаККМ.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый"));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.СтатусЧекаККМ",Новый ФиксированныйМассив(МассивСтатусовЧекаККМ)));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Проведен", Истина));
	
	Элементы.ЧекККМПродажа.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Функция ПараметрыДляНазначенияРучнойСкидки()
	
	Возврат СкидкиНаценкиСервер.ПараметрыДляНазначенияРучнойСкидки(Объект);
	
КонецФункции

&НаСервереБезКонтекста
Функция hiПолучитьРаеквизитыКарты(ДисконтнаяКарта)

	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДисконтнаяКарта, "ВладелецКарты, КодКарты")

КонецФункции // hiПолучитьРаеквизитыКарты(Объект.ДисконтнаяКарта)()
 
&НаСервереБезКонтекста
Функция  hiПолучитьНакопления(Параметр)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИнформационныеКарты.ВидДисконтнойКарты КАК ВидДисконтнойКарты,
	|	ИнформационныеКарты.ВладелецКарты КАК ВладелецКарты,
	|	ИнформационныеКарты.КодКарты КАК КодКарты,
	|	ИнформационныеКарты.Ссылка КАК Карта
	|ПОМЕСТИТЬ ВТ_Дисконтник
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|ГДЕ
	|	ИнформационныеКарты.КодКарты = &КодКарты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Карта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПродажиПоКартам.СуммаОстаток, 0) КАК СуммаПродаж,
	|	ЕСТЬNULL(ПродажиПоКартам.ДисконтнаяКарта, ВТ_Дисконтник.Карта) КАК Карта,
	|	ВТ_Дисконтник.ВидДисконтнойКарты КАК ВидДисконтнойКарты,
	|	ВТ_Дисконтник.ВладелецКарты КАК ВладелецКарты,
	|	ВТ_Дисконтник.КодКарты КАК КодКарты
	|ПОМЕСТИТЬ ВТОборотПоДК
	|ИЗ
	|	ВТ_Дисконтник КАК ВТ_Дисконтник
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(
	|				,
	|				ДисконтнаяКарта В
	|					(ВЫБРАТЬ
	|						ВТ_Дисконтник.Карта
	|					ИЗ
	|						ВТ_Дисконтник КАК ВТ_Дисконтник)) КАК ПродажиПоКартам
	|		ПО ВТ_Дисконтник.Карта = ПродажиПоКартам.ДисконтнаяКарта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияПредоставленияСкидокНаценок.Ссылка КАК Ссылка,
	|	УсловияПредоставленияСкидокНаценок.ЗначениеУсловияОграничения КАК ЗначениеУсловияОграничения
	|ПОМЕСТИТЬ ВТУсловия
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок КАК УсловияПредоставленияСкидокНаценок,
	|	ВТОборотПоДК КАК ВТОборотПоДК
	|ГДЕ
	|	УсловияПредоставленияСкидокНаценок.УсловиеПредоставления = &УсловиеПредоставления
	|	И ВТОборотПоДК.СуммаПродаж >= УсловияПредоставленияСкидокНаценок.ЗначениеУсловияОграничения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидкиНаценкиУсловияПредоставления.Ссылка.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки
	|ПОМЕСТИТЬ ВТСкидки
	|ИЗ
	|	Справочник.СкидкиНаценки.УсловияПредоставления КАК СкидкиНаценкиУсловияПредоставления
	|ГДЕ
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления В
	|			(ВЫБРАТЬ
	|				ВТУсловия.Ссылка
	|			ИЗ
	|				ВТУсловия КАК ВТУсловия)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТОборотПоДК.СуммаПродаж КАК СуммаПродаж,
	|	ВТОборотПоДК.Карта КАК Карта,
	|	ВТОборотПоДК.ВидДисконтнойКарты КАК ВидДисконтнойКарты,
	|	ВТОборотПоДК.ВладелецКарты КАК ВладелецКарты,
	|	ВТОборотПоДК.КодКарты КАК КодКарты,
	|	ЕСТЬNULL(ВТСкидки.ЗначениеСкидкиНаценки, 0) КАК ЗначениеСкидкиНаценки
	|ИЗ
	|	ВТОборотПоДК КАК ВТОборотПоДК
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТСкидки КАК ВТСкидки
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначениеСкидкиНаценки УБЫВ"
	);
	Запрос.УстановитьПараметр("КодКарты", Параметр);
	Запрос.УстановитьПараметр("УсловиеПредоставления", Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли; 
	Выборка = Результат.Выбрать();
	Возврат Выборка.СуммаПродаж;
	
КонецФункции // hiПолучитьИЗаполнитьДисконтника(Параметр)()

&НаКлиенте	//	LNK 15.11.2021 14:40:50
Процедура ОткрытьФормаИспользованиеБонусов(Команда)

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Контрагент"			, Объект.ВладелецДисконтнойКарты);
	ПараметрыОткрытия.Вставить("Магазин"			, Объект.Магазин);
	ПараметрыОткрытия.Вставить("ТоварыДляОплаты"	, БонусныеБаллыКлиент.ТоварыДляОплатыБонусами(Объект.Товары));
	ПараметрыОткрытия.Вставить("НомерТелефона"		, "");
	ПараметрыОткрытия.Вставить("РежимКонтрольногоОткрытия", Истина);

	Если Истина Тогда

	//	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаИспользованиеБонусовЗавершение", ФормаОплаты);
		ОткрытьФорму("Обработка.РМК.Форма.ФормаИспользованиеБонусов"
			, ПараметрыОткрытия
			, ЭтотОбъект
			, УникальныйИдентификатор
			,,, //ОписаниеОповещения
			, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);

	КонецЕсли;

КонецПроцедуры






