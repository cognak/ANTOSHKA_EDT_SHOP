
///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Обработка данных подключаемого оборудования
//
// Параметры:
//  СтруктураПараметров - Структура действий на сервере
//  СтруктураПараметровКлиента - структура последующих действий на клиенте
//
&НаСервере
Функция ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента) Экспорт
	
	Если НЕ СтруктураПараметров.НеизвестныеДанныеПО Тогда
		
		Если СтруктураПараметров.Действие = "ПроверкаСерийныхНомеров" Тогда
			
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				
				ОперацияВыполнена = ДобавитьНайденныеСерийныеНомера(СтруктураПараметров.ЗначенияПоиска);
				
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураПараметровКлиента;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем АдресВременногоХранилища;
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("АдресВременногоХранилища_ПогашениеПодарочныхСертификатов",АдресВременногоХранилища) Тогда
	
		Отказ = Истина;
		Текст = НСтр("ru = 'Данная форма может быть открыта только с переданными данными чека ККМ'"); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат;
	
	КонецЕсли;
	
	Таблица_ПогашениеПодарочныхСертификатов = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ЗаполнитьТаблицуЗначенийПогашение(Таблица_ПогашениеПодарочныхСертификатов);
	
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекПовтИсп.ИспользоватьПодключаемоеОборудование();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "";

		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");

		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:
			                      |""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	// ПодключаемоеОборудование
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;
			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекКод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
		ИначеЕсли ИмяСобытия ="TracksData" Тогда
			ТекКод = Параметр[0];
			ПодключаемоеОборудованиеРТКлиент.ВыбратьМагнитныйКод(ТекКод);
			Если ПустаяСтрока(ТекКод) Тогда
				Возврат;
			КонецЕсли;
			СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ЧастьКодаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ОбработатьВведенныйТекстСерийногоНомера(Текст, СтандартнаяОбработка, Ложь)
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастьКодаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьВведенныйТекстСерийногоНомера(Текст, СтандартнаяОбработка, Истина)
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "ПогашениеПодарочныхСертификатов"

&НаКлиенте
Процедура ПогашениеПодарочныхСертификатовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		ТекущаяСтрока = Элементы.ПогашениеПодарочныхСертификатов.ТекущиеДанные;
		ТекущаяСтрока.СерийныйНомер = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПогашениеПодарочныхСертификатовПодарочныйСертификатПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПогашениеПодарочныхСертификатов.ТекущиеДанные;
	ЗаполнитьДанныеСтрокиСервер(ТекущаяСтрока.ПодарочныйСертификат, ТекущаяСтрока.Номинал, ТекущаяСтрока.ИспользоватьСерийныеНомера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПогашениеПодарочныхСертификатовСерийныйНомерПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПогашениеПодарочныхСертификатов.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.СерийныйНомер) Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("СерийныйНомер", ТекущаяСтрока.СерийныйНомер);
		
		СтрокиТаблицы = ПогашениеПодарочныхСертификатов.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиТаблицы.Количество() > 1 Тогда
		
			ТекущаяСтрока.СерийныйНомер = "";
			
			ТекстСообщения = НСтр("ru = 'Номер подарочного сертификата уже был указан в документе!'"); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	// ПодключаемоеОборудование
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец ПодключаемоеОборудование
	
	Закрыть(ПоместитьПогашениеВХранилище());
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

// ПодключаемоеОборудование
&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) 
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаСерийныхНомеров");
	
	Возврат ПодключаемоеОборудованиеРТ.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(МассивНомеров) 
	
	СерийныйНомерСчитанный = МассивНомеров[0];
	
	СтрокиССерийнымНомером = ПогашениеПодарочныхСертификатов.НайтиСтроки(Новый Структура("СерийныйНомер",СерийныйНомерСчитанный));
	
	Если СтрокиССерийнымНомером.Количество() > 0 Тогда
		СтрокаОшибки = НСтр("ru = 'Номер подарочного сертификата уже выбран в документе'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибки);
		
		//ЭлементыФормы.ПогашениеПодарочныхСертификатов.ТекущаяСтрока = СтрокаССерийнымНомером;
	Иначе
		СтрокаПогашения = ПогашениеПодарочныхСертификатов.Добавить();
		СтрокаПогашения.ПодарочныйСертификат = СерийныйНомерСчитанный.Владелец;
		СтрокаПогашения.СерийныйНомер        = СерийныйНомерСчитанный;
		СтрокаПогашения.Номинал              = СтрокаПогашения.ПодарочныйСертификат.Номинал;
		
		СтрокаПогашения.ИспользоватьСерийныеНомера = Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Обработка магнитного или штрихового кода на клиенте
//
// Параметры
//  СтруктураПараметровКлиента - структура параметров
//
&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод)
	
	Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") 
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
		
		СтрокаСообщения = НСтр("ru = 'Данные по коду не найдены: %1%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекКод);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ТекстПредупреждения") Тогда
		
		ПоказатьПредупреждение(, СтруктураПараметровКлиента.ТекстПредупреждения);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) 
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаСерийныхНомеров");
	
	Возврат ПодключаемоеОборудованиеРТ.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Функция ПоместитьПогашениеВХранилище()

	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПогашениеПодарочныхСертификатов.Выгрузить());
	
	Возврат АдресВоВременномХранилище;

КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеСтрокиСервер(ПодарочныйСертификат, Номинал, ИспользоватьСерийныеНомера);

	Номинал = ПодарочныйСертификат.Номинал;
	ИспользоватьСерийныеНомера = ПодарочныйСертификат.ИспользоватьСерийныеНомера

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВведенныйТекстСерийногоНомера(Текст, СтандартнаяОбработка, ВыводитьСообщения)

	Если ЗначениеЗаполнено(Текст)  Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЭтоРеализация"                    , Ложь);
		СтруктураПараметров.Вставить("Дата"                             , ОбщегоНазначенияКлиент.ДатаСеанса());
		СтруктураПараметров.Вставить("УникальныйИдентификатор"          , УникальныйИдентификатор);
		СтруктураПараметров.Вставить("СерийныеНомера"                   , ПогашениеПодарочныхСертификатов);
		
		РезультатОбработки = МаркетинговыеАкцииСервер.ОбработатьВведенныйТекстСерийногоНомера(СтруктураПараметров, Текст, СтандартнаяОбработка);
		
		Если ТипЗнч(РезультатОбработки) = Тип("Структура") Тогда
			
			СтрокаТаблицы = ПогашениеПодарочныхСертификатов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, РезультатОбработки);
			ЧастьКода = "";
			
		ИначеЕсли ТипЗнч(РезультатОбработки) = Тип("Массив") Тогда
			
			ПараметрыЗаполнения = Новый Структура;
			
			ПараметрыЗаполнения.Вставить("МассивСерийныхНомеров",РезультатОбработки);
			
			РезультатВыбора = ОткрытьФормуМодально("ОбщаяФорма.ФормаВыбораСерийногоНомера",ПараметрыЗаполнения, ЭтотОбъект);
			
			Если ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
				
				СтрокаТаблицы = ПогашениеПодарочныхСертификатов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, РезультатВыбора);
				ЧастьКода = "";
				
			КонецЕсли;
		ИначеЕсли ВыводитьСообщения Тогда
			ТекстСообщения = НСтр("ru = 'Нет номеров подарочных сертификатов, удовлетворяющих поиску.'"); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
	КонецЕсли;
	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЗначенийПогашение(Таблица_ПогашениеПодарочныхСертификатов)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаВЗапрос.ПодарочныйСертификат,
	|	ТаблицаВЗапрос.СерийныйНомер
	|ПОМЕСТИТЬ ТаблицаЗапроса
	|ИЗ
	|	&ТаблицаВЗапрос КАК ТаблицаВЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапроса.ПодарочныйСертификат,
	|	ТаблицаЗапроса.СерийныйНомер,
	|	ТаблицаЗапроса.ПодарочныйСертификат.Номинал КАК Номинал,
	|	ТаблицаЗапроса.ПодарочныйСертификат.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера
	|ИЗ
	|	ТаблицаЗапроса КАК ТаблицаЗапроса";
	
	Запрос.УстановитьПараметр("ТаблицаВЗапрос", Таблица_ПогашениеПодарочныхСертификатов);
	
	
	Результат = Запрос.Выполнить();
	ПогашениеПодарочныхСертификатов.Загрузить(Результат.Выгрузить());

КонецПроцедуры
