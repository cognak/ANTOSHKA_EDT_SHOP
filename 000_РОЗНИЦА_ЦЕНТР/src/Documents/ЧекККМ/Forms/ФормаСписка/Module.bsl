
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда

		Возврат;

	КонецЕсли;
	
	//А++ 20241229 по задаче оптимизации работы журнала. 
	//роль добавили елси у кого будут проблемы
	Если УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.ИспользоватьСтарыйСписокДокументовЧЕК,Ложь)[0].Значение  ТОгда
	Список.ТекстЗапроса =  "ВЫБРАТЬ
	                       |	ТаблицаСправочник.Ссылка КАК ВидОплаты,
	                       |	ТаблицаСправочник.ТипОплаты КАК ТипОплаты
	                       |ПОМЕСТИТЬ ВидыОплат
	                       |ИЗ
	                       |	Справочник.ВидыОплатЧекаККМ КАК ТаблицаСправочник
	                       |
	                       |ИНДЕКСИРОВАТЬ ПО
	                       |	ВидОплаты
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	ТаблицаДокументы.Ссылка КАК Ссылка,
	                       |	ТаблицаДокументы.ПометкаУдаления КАК ПометкаУдаления,
	                       |	ТаблицаДокументы.Номер КАК Номер,
	                       |	ТаблицаДокументы.Дата КАК Дата,
	                       |	ТаблицаДокументы.Проведен КАК Проведен,
	                       |	ТаблицаДокументы.ВидОперации КАК ВидОперации,
	                       |	ТаблицаДокументы.ВладелецДисконтнойКарты КАК ВладелецДисконтнойКарты,
	                       |	ЕСТЬNULL(ТаблицаДокументы.ВладелецДисконтнойКарты.ФизЛицо.Сотрудник, ЛОЖЬ)
	                       |		И НЕ ЕСТЬNULL(ТаблицаДокументы.ВладелецДисконтнойКарты.ФизЛицо.Уволен, ЛОЖЬ) КАК СотрудникАнтошки,
	                       |	ТаблицаДокументы.ДисконтнаяКарта КАК ДисконтнаяКарта,
	                       |	ТаблицаДокументы.ДоговорЭквайринга КАК ДоговорЭквайринга,
	                       |	ТаблицаДокументы.ДоговорСтрахования КАК ДоговорСтрахования,
	                       |	ТаблицаДокументы.КассаККМ КАК КассаККМ,
	                       |	ТаблицаДокументы.Магазин КАК Магазин,
	                       |	ТаблицаДокументы.НомерСменыККМ КАК НомерСменыККМ,
	                       |	ТаблицаДокументы.НомерЧекаККМ КАК НомерЧекаККМ,
	                       |	ТаблицаДокументы.Организация КАК Организация,
	                       |	ТаблицаДокументы.Ответственный КАК Ответственный,
	                       |	ТаблицаДокументы.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
	                       |	ТаблицаДокументы.СтатусЧекаККМ КАК СтатусЧекаККМ,
	                       |	ТаблицаДокументы.СуммаДокумента КАК СуммаДокумента,
	                       |	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	                       |	ТаблицаТовары.СуммаБонусныхБалловНачислено КАК СуммаБонусныхБалловНачислено,
	                       |	ТаблицаТовары.КоличествоСтрок КАК КоличествоСтрок,
	                       |	ТаблицаДокументы.СуммаБонусныхБалловСписано КАК СуммаБонусныхБалловСписано,
	                       |	ТаблицаДокументы.ЧекККМПродажа КАК ЧекККМПродажа,
	                       |	ТаблицаДокументы.ЗаказПокупателя КАК ЗаказПокупателя,
	                       |	ТаблицаДокументы.Автор КАК Автор,
	                       |	ТаблицаДокументы.УзелСоздания КАК УзелСоздания,
	                       |	ТаблицаДокументы.ОтчетОРозничныхПродажах.КассоваяСмена КАК КассоваяСмена,
	                       |	ТаблицаДокументы.УслугаБанка КАК УслугаБанка,
	                       |	ТаблицаДокументы.УслугаБанкаПериодПредоставления КАК ГлубинаКредита,
	                       |	ТаблицаКупоны.КоличествоКупонов КАК КоличествоКупонов,
	                       |	ТаблицаКупоны.СуммаНоминалов КАК СуммаНоминалов,
	                       |	ТаблицаПодарки.ПозицияПодарки КАК ПозицияПодарки,
	                       |	ТаблицаПодарки.КоличествоПодарки КАК КоличествоПодарки,
	                       |	ТаблицаОплаты.СуммаОплаты КАК СуммаОплаты,
	                       |	ТаблицаОплаты.СуммаБезналичная КАК СуммаБезналичная,
	                       |	ТаблицаОплаты.СуммаСертификатов КАК СуммаСертификатов,
	                       |	ТаблицаДокументы.ФлагиПроведения КАК ФлагиПроведения,
	                       |	ВЫБОР
	                       |		КОГДА ТаблицаДокументы.ОбработчикДрайвера = ЗНАЧЕНИЕ(Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ПустаяСсылка)
	                       |			ТОГДА ВЫБОР
	                       |					КОГДА ЕСТЬNULL(ТаблицаДокументы.КассаККМ.ПодключаемоеОборудование.ОбработчикДрайвера, ЗНАЧЕНИЕ(Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикDeviceManagerФискальныйРегистратор)
	                       |						ТОГДА ИСТИНА
	                       |					ИНАЧЕ ЛОЖЬ
	                       |				КОНЕЦ
	                       |		КОГДА ТаблицаДокументы.ОбработчикДрайвера = ЗНАЧЕНИЕ(Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикDeviceManagerФискальныйРегистратор)
	                       |			ТОГДА ИСТИНА
	                       |		ИНАЧЕ ЛОЖЬ
	                       |	КОНЕЦ КАК ЭтоПРРО
	                       |ИЗ
	                       |	Документ.ЧекККМ КАК ТаблицаДокументы
	                       |		{ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                       |			ТабличнаяЧасть.Ссылка КАК Ссылка,
	                       |			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТабличнаяЧасть.СерийныйНомер) КАК КоличествоКупонов,
	                       |			СУММА(ТабличнаяЧасть.НоминалКупона) КАК СуммаНоминалов
	                       |		ИЗ
	                       |			Документ.ЧекККМ.ПогашениеСкидочныхКупонов КАК ТабличнаяЧасть
	                       |		{ГДЕ
	                       |			ТабличнаяЧасть.Ссылка.*}
	                       |		
	                       |		СГРУППИРОВАТЬ ПО
	                       |			ТабличнаяЧасть.Ссылка) КАК ТаблицаКупоны
	                       |		ПО ТаблицаДокументы.Ссылка = ТаблицаКупоны.Ссылка
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                       |			ТаблицаПодарки.Ссылка КАК Ссылка,
	                       |			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаПодарки.Номенклатура) КАК ПозицияПодарки,
	                       |			СУММА(ТаблицаПодарки.Количество) КАК КоличествоПодарки
	                       |		ИЗ
	                       |			Документ.ЧекККМ.Подарки КАК ТаблицаПодарки
	                       |		{ГДЕ
	                       |			ТаблицаПодарки.Ссылка.*}
	                       |		
	                       |		СГРУППИРОВАТЬ ПО
	                       |			ТаблицаПодарки.Ссылка) КАК ТаблицаПодарки
	                       |		ПО ТаблицаДокументы.Ссылка = ТаблицаПодарки.Ссылка
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                       |			ТаблицаТовары.Ссылка КАК Ссылка,
	                       |			СУММА(ТаблицаТовары.СуммаНДС) КАК СуммаНДС,
	                       |			СУММА(ТаблицаТовары.СуммаБонусныхБалловНачислено) КАК СуммаБонусныхБалловНачислено,
	                       |			СУММА(ТаблицаТовары.СуммаБонусныхБалловСписано) КАК СуммаБонусныхБалловСписано,
	                       |			КОЛИЧЕСТВО(ТаблицаТовары.НомерСтроки) КАК КоличествоСтрок
	                       |		ИЗ
	                       |			Документ.ЧекККМ.Товары КАК ТаблицаТовары
	                       |		{ГДЕ
	                       |			ТаблицаТовары.Ссылка.*}
	                       |		
	                       |		СГРУППИРОВАТЬ ПО
	                       |			ТаблицаТовары.Ссылка) КАК ТаблицаТовары
	                       |		ПО ТаблицаДокументы.Ссылка = ТаблицаТовары.Ссылка
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                       |			ТаблицаВедущая.Ссылка КАК Ссылка,
	                       |			СУММА(ТаблицаДеление.СуммаОплаты) КАК СуммаОплаты,
	                       |			СУММА(ТаблицаДеление.СуммаБезналичная) КАК СуммаБезналичная,
	                       |			СУММА(ТаблицаДеление.СуммаСертификатов) КАК СуммаСертификатов
	                       |		ИЗ
	                       |			Документ.ЧекККМ КАК ТаблицаВедущая
	                       |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                       |					ТаблицаОплата.Ссылка КАК Ссылка,
	                       |					ТаблицаОплата.Сумма КАК СуммаОплаты,
	                       |					0 КАК СуммаБезналичная,
	                       |					0 КАК СуммаСертификатов
	                       |				ИЗ
	                       |					Документ.ЧекККМ.Оплата КАК ТаблицаОплата
	                       |				{ГДЕ
	                       |					ТаблицаОплата.Ссылка.*}
	                       |				
	                       |				ОБЪЕДИНИТЬ ВСЕ
	                       |				
	                       |				ВЫБРАТЬ
	                       |					ТаблицаОплата.Ссылка,
	                       |					0,
	                       |					ТаблицаОплата.Сумма,
	                       |					0
	                       |				ИЗ
	                       |					Документ.ЧекККМ.Оплата КАК ТаблицаОплата
	                       |						ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыОплат КАК ВидыОплат
	                       |						ПО ТаблицаОплата.ВидОплаты = ВидыОплат.ВидОплаты
	                       |				ГДЕ
	                       |					ВидыОплат.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	                       |				{ГДЕ
	                       |					ТаблицаОплата.Ссылка.*}
	                       |				
	                       |				ОБЪЕДИНИТЬ ВСЕ
	                       |				
	                       |				ВЫБРАТЬ
	                       |					ТаблицаОплата.Ссылка,
	                       |					0,
	                       |					ТаблицаОплата.Сумма,
	                       |					0
	                       |				ИЗ
	                       |					Документ.ЧекККМ.Оплата КАК ТаблицаОплата
	                       |						ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыОплат КАК ВидыОплат
	                       |						ПО ТаблицаОплата.ВидОплаты = ВидыОплат.ВидОплаты
	                       |				ГДЕ
	                       |					ВидыОплат.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.БанковскийКредит)
	                       |				{ГДЕ
	                       |					ТаблицаОплата.Ссылка.*}
	                       |				
	                       |				ОБЪЕДИНИТЬ ВСЕ
	                       |				
	                       |				ВЫБРАТЬ
	                       |					ТаблицаОплата.Ссылка,
	                       |					0,
	                       |					ТаблицаОплата.Сумма,
	                       |					0
	                       |				ИЗ
	                       |					Документ.ЧекККМ.Оплата КАК ТаблицаОплата
	                       |						ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыОплат КАК ВидыОплат
	                       |						ПО ТаблицаОплата.ВидОплаты = ВидыОплат.ВидОплаты
	                       |				ГДЕ
	                       |					ВидыОплат.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Предоплата)
	                       |				{ГДЕ
	                       |					ТаблицаОплата.Ссылка.*}
	                       |				
	                       |				ОБЪЕДИНИТЬ ВСЕ
	                       |				
	                       |				ВЫБРАТЬ
	                       |					ТаблицаОплата.Ссылка,
	                       |					0,
	                       |					ТаблицаОплата.Сумма,
	                       |					0
	                       |				ИЗ
	                       |					Документ.ЧекККМ.Оплата КАК ТаблицаОплата
	                       |						ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыОплат КАК ВидыОплат
	                       |						ПО ТаблицаОплата.ВидОплаты = ВидыОплат.ВидОплаты
	                       |				ГДЕ
	                       |					ВидыОплат.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Послеплата)
	                       |				{ГДЕ
	                       |					ТаблицаОплата.Ссылка.*}
	                       |				
	                       |				ОБЪЕДИНИТЬ ВСЕ
	                       |				
	                       |				ВЫБРАТЬ
	                       |					ТаблицаОплата.Ссылка,
	                       |					0,
	                       |					0,
	                       |					ТаблицаОплата.Сумма
	                       |				ИЗ
	                       |					Документ.ЧекККМ.Оплата КАК ТаблицаОплата
	                       |						ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыОплат КАК ВидыОплат
	                       |						ПО ТаблицаОплата.ВидОплаты = ВидыОплат.ВидОплаты
	                       |				ГДЕ
	                       |					ВидыОплат.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПодарочныйСертификат)
	                       |				{ГДЕ
	                       |					ТаблицаОплата.Ссылка.*}) КАК ТаблицаДеление
	                       |				ПО ТаблицаВедущая.Ссылка = ТаблицаДеление.Ссылка
	                       |		{ГДЕ
	                       |			ТаблицаВедущая.Ссылка.*}
	                       |		
	                       |		СГРУППИРОВАТЬ ПО
	                       |			ТаблицаВедущая.Ссылка) КАК ТаблицаОплаты
	                       |		ПО ТаблицаДокументы.Ссылка = ТаблицаОплаты.Ссылка}
	                       |ГДЕ
	                       |	ВЫБОР
	                       |			КОГДА &Организация = НЕОПРЕДЕЛЕНО
	                       |				ТОГДА ИСТИНА
	                       |			ИНАЧЕ ТаблицаДокументы.Организация = &Организация
	                       |		КОНЕЦ
	                       |{ГДЕ
	                       |	ТаблицаДокументы.Ссылка.*}"
	КонецЕсли;
	//А++ 20241229 по задаче оптимизации работы журнала. 

	
//	LNK 28.11.2016 10:52:01
	УправлениеКассовойСменойДоступно = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.УправлениеКассовойСменойВнеРМК, Ложь);
	РаботаетАдминистратор = РольДоступна(Метаданные.Роли.АдминистраторСистемы);	//	LNK 13.12.2021 10:08:22

//	Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	
//	LNK 25.04.2017 14:26:29
	Список.Параметры.УстановитьЗначениеПараметра("Организация"
		, ?(ОбменДаннымиПовтИсп.ЭтоГлавныйУзел()
			, Неопределено
			, ПараметрыСеанса.ТекущаяОрганизация));
	
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекПовтИсп.ИспользоватьПодключаемоеОборудование();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьКомандСозданияДокументов();
	
КонецПроцедуры

&НаКлиенте	//	LNK 24.04.2017 14:58:51
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ПользовательИзменилТекущуюОрганизацию" Тогда

		Если НЕ Организация = Параметр.Организация Тогда

			Организация = Параметр.Организация;
			Магазин     = Параметр.Магазин;
			КассаККМ    = Неопределено;

			Список.Параметры.УстановитьЗначениеПараметра("Организация", Параметр.Организация);

			ОтборОрганизацияПриИзменении(Неопределено);

		КонецЕсли;

	ИначеЕсли ИмяСобытия = "ИзмененыДанныеКассовойСмены" Тогда

		Элементы.Список.Обновить();

	КонецЕсли;

КонецПроцедуры

//	LNK 08.09.2017 09:33:30
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Организация = ПараметрыСеанса.ТекущаяОрганизация;
		Магазин     = ПараметрыСеанса.ТекущийМагазин;
		КассаККМ = Неопределено;

	КонецЕсли;

	УстановитьОтборДинамическихСписковПриИзмененииСервер();

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОтборМагазинПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписковПриИзмененииКлиент();
	УстановитьДоступностьКомандСозданияДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписковПриИзмененииКлиент();
	УстановитьДоступностьКомандСозданияДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКассаККМПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписковПриИзмененииКлиент();
	УстановитьДоступностьКомандСозданияДокументов();
	
КонецПроцедуры

&НаКлиенте	//	LNK 22.07.2021 10:22:25
Процедура СписокПриАктивизацииСтроки(Элемент)


КонецПроцедуры

&НаКлиенте	//	LNK 15.09.2021 06:19:20
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ИменаКолонок = Новый Массив;
	ИменаКолонок.Добавить("ВладелецДисконтнойКарты");
	ИменаКолонок.Добавить("ЗаказПокупателя");
	ИменаКолонок.Добавить("ЧекККМПродажа");

	Если РаботаетАдминистратор Тогда

		ИменаКолонок.Добавить("Магазин");
		ИменаКолонок.Добавить("КассаККМ");
		ИменаКолонок.Добавить("КассоваяСмена");
		ИменаКолонок.Добавить("ОтчетОРозничныхПродажах");

	КонецЕсли;

	РаботаСФормамиКлиент.ОбработчикСобытияСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ИменаКолонок,, Элементы);

КонецПроцедуры

&НаСервере	//	LNK 22.07.2021 09:28:27
Процедура ОтладочнаяПроверкаИсточника()

	Принять = Ложь;

	Если Принять Тогда

		Схема = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
		Настройки = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
		МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки);
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	//	Таб =  ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "СписокРасходныеОрдераКВнесениюДенег"

&НаКлиенте
Процедура СписокРасходныеОрдераКВнесениюДенегВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыполнитьВнесениеДенегВКассуККМКлиент();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗакрытьКассовуюСмену(Команда)

	ОчиститьСообщения();

	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда

		ТекстОшибки = НСтр("ru='Выберите кассу ККМ!'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"КассаККМ"
		);

		Возврат;

	КонецЕсли;

	Если НЕ ВозможностьОткрытияИлиЗакрытияСмены("Закрыть") Тогда

		УстановитьДоступностьКомандСозданияДокументов();

		Возврат;

	КонецЕсли;

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("КассаККМ"              , КассаККМ);
	ПараметрыЗаполнения.Вставить("ВыполнитьЗакрытиеСразу", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьКассовуюСменуЗавершение", ЭтотОбъект, ПараметрыЗаполнения);
	ОткрытьФорму("Обработка.ЗакрытиеКассовойСмены.Форма.Форма"
		, ПараметрыЗаполнения
		, ЭтотОбъект
		,
		,
		,
		, ОписаниеОповещения
		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
//	форма обработки могла не открыться по какой-либо причине (например, не было продаж),
//	но смена при этом будет закрыта.
	УстановитьДоступностьКомандСозданияДокументов();

КонецПроцедуры

&НаКлиенте	//	LNK 14.06.2018 10:21:02
Процедура ЗакрытьКассовуюСменуЗавершение(Значение, ДополнительныеПараметры)	Экспорт

	УстановитьДоступностьКомандСозданияДокументов();

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКСпискуЧековККМ(Команда)
	
	УстановитьТекущуюСтраницуФормы(Элементы.ГруппаСписокЧековККМ);
	
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку "Внесение денег".
//
&НаКлиенте
Процедура ВнесениеДенегВКассу(Команда)
	
	ОчиститьСообщения();
	
	ОтборыСписковКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРасходныеОрдераКВнесениюДенег, "Организация", Организация);
	ОтборыСписковКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРасходныеОрдераКВнесениюДенег, "КассаККМ", КассаККМ);

	УстановитьТекущуюСтраницуФормы(Элементы.ГруппаВнесениеДенег);
	
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку "Выемка денег".
//
&НаКлиенте
Процедура ВыемкаДенег(Команда)
	
	ОчиститьСообщения();
	
	ЗаголовокОкна  = НСтр("ru='Сумма выемки из кассы «" + КассаККМ + "»");
	ИзымаемаяСумма = 0;
	Если ВвестиЧисло(ИзымаемаяСумма, ЗаголовокОкна, 15, 2) И ИзымаемаяСумма > 0.00 Тогда
		ОшибкаТранзакции = Неопределено;
		ДенежныеСредстваКлиент.ВыемкаДенег(ИзымаемаяСумма, КассаККМ, УникальныйИдентификатор, ОшибкаТранзакции);
		Если НЕ ОшибкаТранзакции Тогда
			ТекстСообщения = НСтр("ru='Выполнена выемка денежных средств из %КассаККМ% на сумму %ИзымаемаяСумма%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КассаККМ%", Строка(КассаККМ));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИзымаемаяСумма%", Формат(ИзымаемаяСумма, "ЧЦ=15; ЧДЦ=2"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет создание документа внесение денежных средств в кассу ККМ.
//
&НаКлиенте
Процедура СоздатьДокументВнесениеДенежныхСредствВКассу(Команда)
	
	ВыполнитьВнесениеДенегВКассуККМКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьНулевойЧек(Команда)

	ОчиститьСообщения();

	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда

		ТекстОшибки = НСтр("ru='Выберите кассу ККМ!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"КассаККМ"
		);

		Возврат;

	КонецЕсли;

	Если НЕ ВозможностьОткрытияИлиЗакрытияСмены("Открыть") Тогда

		Возврат;

	КонецЕсли;

	Результат = Ложь;

	ПараметрыКассыККМ       = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;

	Если ИспользоватьПодключаемоеОборудование И ЗначениеЗаполнено(ИдентификаторУстройства)  Тогда

	//	Подключение устройства
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда

			Если ИдентификаторУстройства <> Неопределено  Тогда
	
				ОписаниеОшибки = "";
					
				Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(
					  УникальныйИдентификатор
					, ИдентификаторУстройства
					, ОписаниеОшибки
				);

				Если Результат Тогда
					
					ВыходныеПараметры = Неопределено;
					ВходныеПараметры  = РМККлиент.ВходныеПараметрыПолучить(
						  ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка")
						, Новый Структура(
							"ВладелецКарты, КодКарты, СуммаПокупок, БонусныйСчет"
							, Неопределено
							, ""
							, 0
							, Новый Структура(
								"СуммаБонусныхБаллов, СуммаБонусныхБалловВРезерве"
								, 0
								, 0
							)
						)
						, ПараметрыКассыККМ
						, Истина
					);
					
				//	Открыть смену на фискальном регистраторе
					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
					                                                        "PrintNullReceipt",
					                                                        ВходныеПараметры,
					                                                        ВыходныеПараметры
					);
					
					Если НЕ Результат Тогда

						ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
						                      |Чек не напечатан на фискальном регистраторе.
						                      |Дополнительное описание:
						                      |%ДополнительноеОписание%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,
						                             "%ДополнительноеОписание%",
						                             ВыходныеПараметры[1]);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

					КонецЕсли;

					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
					                                                                 ИдентификаторУстройства);
					
				Иначе
					
					ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
					                            |Чек не напечатан на фискальном регистраторе.
					                            |Дополнительное описание:
					                            |%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
	Иначе
		
	КонецЕсли;
	
	УстановитьДоступностьКомандСозданияДокументов();
	
КонецПроцедуры

//	LNK 01.11.2017 10:23:20
&НаКлиенте
Процедура ПоказатьОтложенные(Команда)

	ПоказатьОтложенныеНаСервере();

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Процедура восстанавливает ранее заданные настройки
//
&НаСервере
Процедура ВосстановитьНастройки()
	Перем ЗначениеНастроек;

	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		ЗначениеНастроек = ХранилищеОбщихНастроек.Загрузить("Документы.РеализацияТоваров", "НастройкиСпискаРеализацияТоваров");
		
		Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
			ЗначениеНастроек.Свойство("Магазин", Магазин);
			ЗначениеНастроек.Свойство("Организация", Организация);
			ЗначениеНастроек.Свойство("КассаККМ", КассаККМ);
		КонецЕсли;

	Иначе

		Организация = ПараметрыСеанса.ТекущаяОрганизация;
		Магазин     = ПараметрыСеанса.ТекущийМагазин;
		КассаККМ = Неопределено;

	КонецЕсли;

КонецПроцедуры

// Процедура - реализовывает алгоритм создания документа внесение денежных средств в кассу ККМ
//
&НаКлиенте
Процедура ВыполнитьВнесениеДенегВКассуККМКлиент()
	Перем ПараметрСуммаВнесения;
	
	ТекущиеДанные = Элементы.СписокРасходныеОрдераКВнесениюДенег.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		возврат;
	ИначеЕсли ТекущиеДанные.Свойство("СуммаВнесения", ПараметрСуммаВнесения) И ПараметрСуммаВнесения <= 0.00 Тогда
		Текст = НСтр("ru = 'По выбранному документу не требуется выполнять внесение денежных средств в кассу ККМ'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		возврат;
	Иначе
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Будет выполнено внесение денежных средств в кассу %1 на сумму %2 грн. %3По документу %4%5Продолжить?'"),
		ТекущиеДанные.КассаККМ,
		Формат(ТекущиеДанные.СуммаВнесения, "ЧЦ=15; ЧДЦ=2"),
		Символы.ПС,
		Строка(ТекущиеДанные.Ссылка),
		Символы.ПС
		);
		Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Внесение денежных стредств в кассу по документу " +  Строка(ТекущиеДанные.Ссылка));
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаТранзакции = Неопределено;
	
	ДенежныеСредстваКлиент.ВнесениеДенег(
		ТекущиеДанные.СуммаВнесения,
		ТекущиеДанные.Ссылка,
		ТекущиеДанные.КассаККМ,
		УникальныйИдентификатор,
		ОшибкаТранзакции
	);
	Если НЕ ОшибкаТранзакции Тогда
		ВернутьсяКСпискуЧековККМ(Команды.ВернутьсяКСпискуЧековККМ);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ОткрытьКассовуюСмену".
//
&НаКлиенте
Процедура ОткрытьКассовуюСмену(Команда)
	
	ОчиститьСообщения();

	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда

		ТекстСообщения = НСтр("ru='Выберите кассу ККМ!'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			"КассаККМ"
		);
		Возврат;

	КонецЕсли;
	
	Результат      = Ложь;
	ОписаниеОшибки = "";

	Если НЕ РозничныеПродажиСервер.ПроверитьВозможностьОткрытияКассовойСмены(КассаККМ, ОписаниеОшибки) Тогда

		ТекстСообщения = НСтр("ru = 'Отказано! При проверке возможности открытия смены
		                            |произошла ошибка. Смена НЕ открыта!
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			"КассаККМ"
		);
		Возврат;

	КонецЕсли;
	
	ПараметрыКассыККМ       = ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;

	Если ИспользоватьПодключаемоеОборудование И ЗначениеЗаполнено(ИдентификаторУстройства)  Тогда

		// Подключение устройства
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда

			Если ИдентификаторУстройства <> Неопределено  Тогда

				ОписаниеОшибки = "";
				Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				                                                                              ИдентификаторУстройства,
				                                                                              ОписаниеОшибки);
				Если Результат Тогда
					
					ВходныеПараметры  = Неопределено;
					ВыходныеПараметры = Неопределено;
					
					//Открыть смену на фискальном регистраторе
					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
					                                                        "OpenDay",
					                                                        ВходныеПараметры,
					                                                        ВыходныеПараметры);

					Если Результат Тогда
						
						Результат = ОткрытьКассовуюСменуНаСервереБезКонтекста(КассаККМ, ОписаниеОшибки);
						
						Если Не Результат Тогда
							
							ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
							                            |Смена не открыта.
							                            |Дополнительное описание:
							                            |%ДополнительноеОписание%'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							
						КонецЕсли;
						
					Иначе
						ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
						                      |Смена не открыта на фискальном регистраторе.
						                      |Дополнительное описание:
						                      |%ДополнительноеОписание%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,
						                             "%ДополнительноеОписание%",
						                             ВыходныеПараметры[1]);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
					
					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
					                                                                 ИдентификаторУстройства);
					
				Иначе
					
					ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
					                            |Смена не открыта на фискальном регистраторе.
					                            |Дополнительное описание:
					                            |%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе

			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

		КонецЕсли;

	Иначе
		
		Результат = ОткрытьКассовуюСменуНаСервереБезКонтекста(КассаККМ, ОписаниеОшибки);
		
		Если Не Результат Тогда
			
			ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
			                            |Смена не открыта.
			                            |Дополнительное описание:
			                            |%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьКомандСозданияДокументов();
	
КонецПроцедуры

// Функция выполняет открытие кассовой смены на сервере.
//
&НаСервереБезКонтекста
Функция ОткрытьКассовуюСменуНаСервереБезКонтекста(КассаККМ, ОписаниеОшибки = "")
	
	Возврат РозничныеПродажиСервер.ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки);
	
КонецФункции

&НаКлиенте
Функция ВозможностьОткрытияИлиЗакрытияСмены(Вариант)
	
	СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	Если Вариант = "Открыть" Тогда

		ОперацияРазрешена = НЕ СтруктураСостояниеКассовойСмены.СменаОткрыта;	//	смена закрыта - разрешено открыть
		ФрагментТекста	  = "УЖЕ открыта";

	Иначе	//	Вариант = "Закрыть"

		ОперацияРазрешена = СтруктураСостояниеКассовойСмены.СменаОткрыта;		// смена открыта - разрешено закрыть
		ФрагментТекста	  = "НЕ открыта";

	КонецЕсли;

	Если НЕ ОперацияРазрешена Тогда
		
		ТекстОшибки = СтрЗаменить(НСтр("ru='Кассовая смена %1! Операция невозможна.'"), "%1", ФрагментТекста);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"КассаККМ"
		);

		Возврат Ложь;

	КонецЕсли;

	Возврат Истина;

КонецФункции

// Процедура устанавливает доступность кнопкам формы "ВнесениеДенег" и "ВыемкаДенег", если заполнено значение касса ККМ
//
&НаКлиенте
Процедура УстановитьДоступностьКомандСозданияДокументов()

	Если УправлениеКассовойСменойДоступно Тогда

		ДоступностьЭлемента = ЗначениеЗаполнено(КассаККМ);

		Если ДоступностьЭлемента Тогда

				СостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
				СменаОткрыта = СостояниеКассовойСмены.СменаОткрыта;

		Иначе	СменаОткрыта = Ложь;

		КонецЕсли;

	Иначе

		ДоступностьЭлемента = Ложь;
		СменаОткрыта        = Ложь;

	КонецЕсли;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВнесениеДенег"       , "Доступность", ДоступностьЭлемента И СменаОткрыта);
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыемкаДенег"         , "Доступность", ДоступностьЭлемента И СменаОткрыта);
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОткрытьКассовуюСмену", "Доступность", ДоступностьЭлемента И НЕ СменаОткрыта);
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СнятьZОтчет"         , "Доступность", ДоступностьЭлемента И СменаОткрыта);
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПробитьНулевойЧек"   , "Доступность", ДоступностьЭлемента И СменаОткрыта);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборДинамическихСписковПриИзмененииКлиент()
	
	УстановитьОтборДинамическихСписковПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическихСписковПриИзмененииСервер()
	
	УстановитьОтборДинамическихСписков("Магазин");
	УстановитьОтборДинамическихСписков("Организация");
	УстановитьОтборДинамическихСписков("КассаККМ");
	
КонецПроцедуры

// Процедура выполняет переход на страницу переданную в параметре
// Параметры:
//           ТекущяяСтраница - ЭлементФормы - Сраница на которую необходимо перейти, сделать активной.
&НаКлиенте
Процедура УстановитьТекущуюСтраницуФормы(ТекущяяСтраница)
	
	Элементы.ГруппаСписок.ТекущаяСтраница = ТекущяяСтраница;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

// Процедура устанавливает отбор динамических списков формы.
//
&НаСервере
Процедура УстановитьОтборДинамическихСписков(ИмяРеквизита)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		Список, 
		ИмяРеквизита, 
		ЭтотОбъект[ИмяРеквизита], 
		ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]));
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		СписокРасходныеОрдераКВнесениюДенег, 
		ИмяРеквизита, 
		ЭтотОбъект[ИмяРеквизита], 
		ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]));
		
	
	ОтборыСписковКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокРасходныеОрдераКВнесениюДенег, 
		ИмяРеквизита, 
		ЭтотОбъект[ИмяРеквизита]);
		
	
КонецПроцедуры

//	LNK 01.11.2017 10:25:13
&НаСервере
Процедура ПоказатьОтложенныеНаСервере()

	УстановленОтборОтложенныеВозвраты = НЕ УстановленОтборОтложенныеВозвраты;

	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		Список, 
		"СтатусЧекаККМ", 
		Перечисления.СтатусыЧековККМ.Отложенный, 
		УстановленОтборОтложенныеВозвраты);

	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		Список, 
		"ВидОперации", 
		Перечисления.ВидыОперацийЧекККМ.Возврат, 
		УстановленОтборОтложенныеВозвраты);

КонецПроцедуры






