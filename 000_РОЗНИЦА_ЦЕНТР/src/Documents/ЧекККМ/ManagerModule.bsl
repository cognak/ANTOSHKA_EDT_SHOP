#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)	//	LNK 06.08.2020 13:25:22

	СтандартнаяОбработка = Ложь;

	Поля.Добавить("Дата");
	Поля.Добавить("Номер");
	Поля.Добавить("Ссылка");

	Поля.Добавить("ВидОперации");

КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)	//	LNK 06.08.2020 13:25:26

	СтандартнаяОбработка = Ложь;

	Представление = "Чек ККМ"
		+ ?(Данные.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, "(ВЗВ)", "")
		+ " "
		+ ?(ПустаяСтрока(Данные.Номер), "<>", СокрЛП(Данные.Номер))
		+ " от "
		+ Формат(Данные.Дата, "ДФ='дд.ММ.ггг ЧЧ:мм:сс'");

КонецПроцедуры

#КонецОбласти

#Область ОбщийПрограммныйИнтерфейс

Функция РеквизитыРедактируемыеВГрупповойОбработке()	Экспорт	//	LNK 13.10.2021 09:29:46

	РедактируемыеРеквизиты = Новый Массив;

	РедактируемыеРеквизиты.Добавить("Комментарий");
	РедактируемыеРеквизиты.Добавить("Ответственный");

	Возврат РедактируемыеРеквизиты;

КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Получает документ для интерфейсной работы шаблона чека ККМ
//
Функция ДокументДляШаблонаЧека() Экспорт
	Перем ДокументДляПечатиШаблона;
	
	ДокументДляПечатиШаблона = Документы.ЧекККМ.ПустаяСсылка();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЧекККМ.Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДокументДляПечатиШаблона = Выборка.Ссылка;
	КонецЕсли;
	
	возврат ДокументДляПечатиШаблона;
	
КонецФункции

// Получает макет фискального чека
//
Функция МакетФискальногоЧека(Ссылка, ШаблонЧека, ШиринаЧека, Параметры) Экспорт
	
	РезультатТовары       = Новый ТаблицаЗначений;
	РезультатПодарки      = Новый ТаблицаЗначений;
	
	МассивСтрокНабора = ШаблонЧека.Строки.НайтиСтроки(Новый Структура("ИмяМакета", "ПоляШаблонаТЧ_Подарки"));
	
	ВШаблонеЕстьПодарки = Ложь;
	
	Для каждого СтрокаПодарки Из МассивСтрокНабора Цикл
		Если СтрокаПодарки.Строки.Количество() > 0 Тогда
			ВШаблонеЕстьПодарки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ВШаблонеЕстьПодарки Тогда
		МассивСтрокШапкииПодвала = ШаблонЧека.Строки.НайтиСтроки(Новый Структура("ИмяМакета", "ПоляШаблонаШапкаПодарки"));
		
		Для каждого СтрокаПодарки Из МассивСтрокШапкииПодвала Цикл
			Если СтрокаПодарки.Строки.Количество() > 0 Тогда
				ВШаблонеЕстьПодарки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИмяМакета = "";
	Если ВШаблонеЕстьПодарки Тогда
		ИмяМакета = "ПоляШаблонаПодарки";
	КонецЕсли;
	
	ИмяМакетаБыло = "";
	СменилиМакет = Ложь;
	Если Параметры.Свойство("ИмяМакета",ИмяМакетаБыло) Тогда
		Если Не ИмяМакетаБыло = ИмяМакета Тогда
			Параметры.КомпоновщикМакета = Неопределено;
			СменилиМакет                = Истина;
			Параметры.ИмяМакета         = ИмяМакета;
		КонецЕсли;
	КонецЕсли;
	
	Значение = Неопределено;
	Если НЕ СменилиМакет И Параметры.Свойство("КэшТаблицыРезультатаКомпоновки", Значение) Тогда
		ТаблицыРезультатаКомпоновки        = Значение;
	Иначе
		// Значение по умолчанию
		ТаблицыРезультатаКомпоновки = УправлениеШаблонами.ВыполнитьКомпоновкуДанныхДляИерархическогоШаблона(ШаблонЧека, Ссылка, Параметры.СхемаКомпоновкиДанных, Параметры.КомпоновщикМакета,,ИмяМакета);
		Параметры.Вставить("КэшТаблицыРезультатаКомпоновки", ТаблицыРезультатаКомпоновки);
	КонецЕсли;
	
	Для каждого Таблицы Из ТаблицыРезультатаКомпоновки.Строки Цикл
		Если Таблицы.ЧастьЗапроса = "Товары" Тогда
			РезультатТовары = Таблицы.Строки;
		КонецЕсли;
		Если Таблицы.ЧастьЗапроса = "Подарки" Тогда
			РезультатПодарки = Таблицы.Строки;
		КонецЕсли;
	КонецЦикла;
	
	Структура = УправлениеШаблонами.ПолучитьИдентификаторыПользовательскихПолей(ШаблонЧека);
	
	// Механизм кэширования макетов
	Если Параметры.КэшМакетов = Неопределено Тогда
		Структура.Вставить("КэшМакетов", Новый Соответствие);
	Иначе
		Структура.Вставить("КэшМакетов", Параметры.КэшМакетов);
	КонецЕсли;
	
	СтруктураМассивы = Новый Структура;
	
	// Подготовка Шапки и Подвала
	СтрокаШапка = ШаблонЧека.Строки.Найти("Шапка",,Ложь);
	Если СтрокаШапка <> Неопределено Тогда
		
		Если РезультатТовары.Количество() > 0 Тогда
			УправлениеШаблонами.ЗаполнитьСтруктуруПараметровШаблонаПоСтрокеТЧ(РезультатТовары.Родитель, Структура, СтрокаШапка);
		КонецЕсли;
		УправлениеШаблонами.ЗаполнитьСоставныеСтрокиПоСтруктуре(СтрокаШапка, Структура);
		
		МассивШапка = Новый Массив;
		Для каждого Строка2Уровня Из СтрокаШапка.Строки Цикл
			Значение = УправлениеШаблонами.ПолучитьМассивСтрокДляСтрокиДереваШаблона(Строка2Уровня, Структура);
			Соответствие = Новый Соответствие;
			Соответствие.Вставить(Строка2Уровня, Значение);
			МассивШапка.Добавить(Соответствие);
		КонецЦикла;
		СтруктураМассивы.Вставить("Шапка",МассивШапка);
		
	КонецЕсли;
	
	МассивПодвал = Новый Массив;
	Если РезультатПодарки.Количество()>0 Тогда
		СтрокаПодаркиЗаголовок = ШаблонЧека.Строки.Найти("Табличная часть ""Подарки"" (Заголовок)",,Ложь);
		
		Если СтрокаПодаркиЗаголовок <> Неопределено Тогда
			
			УправлениеШаблонами.ЗаполнитьСтруктуруПараметровШаблонаПоСтрокеТЧ(РезультатПодарки.Родитель, Структура, СтрокаПодаркиЗаголовок);
			УправлениеШаблонами.ЗаполнитьСоставныеСтрокиПоСтруктуре(СтрокаПодаркиЗаголовок, Структура);
			
			Для каждого Строка2Уровня Из СтрокаПодаркиЗаголовок.Строки Цикл
				Значение = УправлениеШаблонами.ПолучитьМассивСтрокДляСтрокиДереваШаблона(Строка2Уровня, Структура);
				Соответствие = Новый Соответствие;
				Соответствие.Вставить(Строка2Уровня, Значение);
				МассивПодвал.Добавить(Соответствие);
			КонецЦикла;
		КонецЕсли;
		
		СтрокаПодарки = ШаблонЧека.Строки.Найти("Табличная часть ""Подарки""",,Ложь);
		Если СтрокаПодарки <> Неопределено Тогда
			КоличествоСтрокРезультата = РезультатПодарки.Количество() - 1; // Итоговая строка идет последней, ее не включаем в ТЧ
			Для Счетчик = 0 По КоличествоСтрокРезультата Цикл
				УправлениеШаблонами.ЗаполнитьСтруктуруПараметровШаблонаПоСтрокеТЧ(РезультатПодарки[Счетчик], Структура, СтрокаПодарки);
				УправлениеШаблонами.ЗаполнитьСоставныеСтрокиПоСтруктуре(СтрокаПодарки, Структура);
				
				Для каждого Строка2Уровня Из СтрокаПодарки.Строки Цикл
					Значение = УправлениеШаблонами.ПолучитьМассивСтрокДляСтрокиДереваШаблона(Строка2Уровня, Структура);
					Соответствие = Новый Соответствие;
					Соответствие.Вставить(Строка2Уровня, Значение);
					МассивПодвал.Добавить(Соответствие);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		СтрокаПодаркиПодвал = ШаблонЧека.Строки.Найти("Табличная часть ""Подарки"" (Подвал)",,Ложь);
		
		Если СтрокаПодаркиЗаголовок <> Неопределено Тогда
			
			УправлениеШаблонами.ЗаполнитьСтруктуруПараметровШаблонаПоСтрокеТЧ(РезультатПодарки.Родитель, Структура, СтрокаПодаркиПодвал);
			УправлениеШаблонами.ЗаполнитьСоставныеСтрокиПоСтруктуре(СтрокаПодаркиПодвал, Структура);
			
			Для каждого Строка2Уровня Из СтрокаПодаркиПодвал.Строки Цикл
				Значение = УправлениеШаблонами.ПолучитьМассивСтрокДляСтрокиДереваШаблона(Строка2Уровня, Структура);
				Соответствие = Новый Соответствие;
				Соответствие.Вставить(Строка2Уровня, Значение);
				МассивПодвал.Добавить(Соответствие);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаПодвал = ШаблонЧека.Строки.Найти("Подвал",,Ложь);
	Если СтрокаШапка <> Неопределено Тогда
		
		Если РезультатТовары.Количество() > 0 Тогда
			УправлениеШаблонами.ЗаполнитьСтруктуруПараметровШаблонаПоСтрокеТЧ(РезультатТовары.Родитель, Структура, СтрокаПодвал);
		КонецЕсли;
		УправлениеШаблонами.ЗаполнитьСоставныеСтрокиПоСтруктуре(СтрокаПодвал, Структура);
		
		Для каждого Строка2Уровня Из СтрокаПодвал.Строки Цикл
			Значение = УправлениеШаблонами.ПолучитьМассивСтрокДляСтрокиДереваШаблона(Строка2Уровня, Структура);
			Соответствие = Новый Соответствие;
			Соответствие.Вставить(Строка2Уровня, Значение);
			МассивПодвал.Добавить(Соответствие);
		КонецЦикла;
		
		СтруктураМассивы.Вставить("Подвал",МассивПодвал);
		
	КонецЕсли;
	
	КоличествоСтрокРезультата = РезультатТовары.Количество() - 1; // Итоговая строка идет последней, ее не включаем в ТЧ
	Для Счетчик = 0 По КоличествоСтрокРезультата Цикл
		
		ТелоШапка = ШаблонЧека.Строки.Найти("Табличная часть ""Товары"" (Шапка)",,Ложь);
		УправлениеШаблонами.ЗаполнитьСтруктуруПараметровШаблонаПоСтрокеТЧ(РезультатТовары[Счетчик], Структура, ТелоШапка);
		УправлениеШаблонами.ЗаполнитьСоставныеСтрокиПоСтруктуре(ТелоШапка, Структура);
		
		МассивТелоШапка = Новый Массив;
		Для каждого Строка2Уровня Из ТелоШапка.Строки Цикл
			Значение = УправлениеШаблонами.ПолучитьМассивСтрокДляСтрокиДереваШаблона(Строка2Уровня, Структура);
			Соответствие = Новый Соответствие;
			Соответствие.Вставить(Строка2Уровня, Значение);
			МассивТелоШапка.Добавить(Соответствие);
		КонецЦикла;
		
		ТелоПодвал = ШаблонЧека.Строки.Найти("Табличная часть ""Товары"" (Подвал)",,Ложь);
		УправлениеШаблонами.ЗаполнитьСтруктуруПараметровШаблонаПоСтрокеТЧ(РезультатТовары[Счетчик], Структура, ТелоПодвал);
		УправлениеШаблонами.ЗаполнитьСоставныеСтрокиПоСтруктуре(ТелоПодвал, Структура);
		
		МассивТелоПодвал = Новый Массив;
		Для каждого Строка2Уровня Из ТелоПодвал.Строки Цикл
			Значение = УправлениеШаблонами.ПолучитьМассивСтрокДляСтрокиДереваШаблона(Строка2Уровня, Структура);
			Соответствие = Новый Соответствие;
			Соответствие.Вставить(Строка2Уровня, Значение);
			МассивТелоПодвал.Добавить(Соответствие);
		КонецЦикла;
		
		СтруктураМассивы.Вставить("ТелоШапка_"+Счетчик,МассивТелоШапка);
		СтруктураМассивы.Вставить("ТелоПодвал_"+Счетчик,МассивТелоПодвал);
		
	КонецЦикла;
	
	СтруктураМассивы.Вставить("РезультатКомпоновкиДанных", РезультатТовары);
	СтруктураМассивы.Вставить("КоличествоСтрокТабличнойЧасти", Счетчик);
	СтруктураМассивы.Вставить("ШиринаЧека", ШиринаЧека);
	
	// Механизм кэширования макетов
	Кэш = Структура.КэшМакетов;
	
	СкидкиНаценкиСерверПереопределяемый.ОбработатьСтруктуруШаблонаЧекаПриПредварительномПросмотре(СтруктураМассивы, Ссылка);
	
	Возврат СтруктураМассивы;

КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
// Параметры:
//	Объект - ДокументОъъект или ДанныеФормыСтруктура - документ, для которого нужно сфомировать параметры проверки
//
// Возвращаемое значение:
//	Структура - Состав полей определяется требованиями фукнции ОбработкаТабличнойЧастиСервер.ЗаполнитьСтатусыУказанияСерий
//
Функция ПараметрыУказанияСерий(Объект)Экспорт
	
	ПоляСвязи = Новый Массив;
	
	ПараметрыУказанияСерий = Новый Структура;
	ИспользованиеСерийСклад = Ложь;
	
	ИспользованиеСерийСклад = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	ПараметрыУказанияСерий.Вставить("ИспользоватьСерииНоменклатуры", ИспользованиеСерийСклад);
	ПараметрыУказанияСерий.Вставить("ПоляСвязи",ПоляСвязи);
	ПараметрыУказанияСерий.Вставить("ЭтоОрдер", Истина);
	
	СкладскиеОперации = Новый Массив;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаВРозницу);
	Иначе
		СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента);
	КонецЕсли;
	
	ПараметрыУказанияСерий.Вставить("СкладскиеОперации", СкладскиеОперации);
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Определяет отбор на хозяйственную операцию, устанавливаемый на список выбора документа Чек ККМ в форме элемента справочника хранилище шаблонов
//
Функция СвязьПараметровВыбораНаХозяйственнуюОперацию() Экспорт
	
	Возврат Неопределено;
	
КонецФункции

Функция СформироватьПервичнуюСтруктуруШаблона(ИерархическийШаблон, ИмяОбъекта, ПервичнаяСтруктура, Загружать) Экспорт
		// Загрузим ИерархическийШаблон из макета
		Если Загружать Тогда
			ТекстовыйДокумент = Документы.ЧекККМ.ПолучитьМакет("ШаблонФискальногоЧекаПоУмолчанию");
			Попытка
				Шаблон = ЗначениеИзСтрокиВнутр(ТекстовыйДокумент.ПолучитьТекст());
				Если ТипЗнч(Шаблон) <> Тип("ДеревоЗначений") Тогда
					Загружать = Ложь;
				КонецЕсли;
			Исключение
				Загружать = Ложь;
			КонецПопытки;
		КонецЕсли;
		
		Если Загружать Тогда
			ИерархическийШаблон = Шаблон.Скопировать();
		Иначе
			НоваяГруппа = ИерархическийШаблон.Строки.Добавить();
			НоваяГруппа.Элемент = "Шапка";
			НоваяГруппа.Идентификатор = УправлениеШаблонами.ПолучитьИдентификатор();
			НоваяГруппа.ТипЭлемента = "ОбластьЧека";
			НоваяГруппа.ИмяМакета   = "ПоляШаблонаШапка";
			НоваяГруппа.ИмяОбъекта = ИмяОбъекта;
			
			НоваяГруппа = ИерархическийШаблон.Строки.Добавить();
			НоваяГруппа.Элемент = "Табличная часть ""Товары"" (Шапка)";
			НоваяГруппа.Идентификатор = УправлениеШаблонами.ПолучитьИдентификатор();
			НоваяГруппа.ТипЭлемента = "ОбластьЧека";
			НоваяГруппа.ИмяМакета   = "ПоляШаблонаТЧ_Товары";
			НоваяГруппа.ИмяОбъекта = ИмяОбъекта;
			
			НоваяГруппа = ИерархическийШаблон.Строки.Добавить();
			НоваяГруппа.Элемент = "Табличная часть ""Товары"" (Подвал)";
			НоваяГруппа.Идентификатор = УправлениеШаблонами.ПолучитьИдентификатор();
			НоваяГруппа.ТипЭлемента = "ОбластьЧека";
			НоваяГруппа.ИмяМакета   = "ПоляШаблонаТЧ_Товары";
			НоваяГруппа.ИмяОбъекта = ИмяОбъекта;
			
			НоваяГруппа = ИерархическийШаблон.Строки.Добавить();
			НоваяГруппа.Элемент = "Табличная часть ""Подарки"" (Заголовок)";
			НоваяГруппа.Идентификатор = УправлениеШаблонами.ПолучитьИдентификатор();
			НоваяГруппа.ТипЭлемента = "ОбластьЧека";
			НоваяГруппа.ИмяМакета   = "ПоляШаблонаШапкаПодарки";
			НоваяГруппа.ИмяОбъекта = ИмяОбъекта;
			
			НоваяГруппа = ИерархическийШаблон.Строки.Добавить();
			НоваяГруппа.Элемент = "Табличная часть ""Подарки""";
			НоваяГруппа.Идентификатор = УправлениеШаблонами.ПолучитьИдентификатор();
			НоваяГруппа.ТипЭлемента = "ОбластьЧека";
			НоваяГруппа.ИмяМакета   = "ПоляШаблонаТЧ_Подарки";
			НоваяГруппа.ИмяОбъекта = ИмяОбъекта;
			
			НоваяГруппа = ИерархическийШаблон.Строки.Добавить();
			НоваяГруппа.Элемент = "Табличная часть ""Подарки"" (Подвал)";
			НоваяГруппа.Идентификатор = УправлениеШаблонами.ПолучитьИдентификатор();
			НоваяГруппа.ТипЭлемента = "ОбластьЧека";
			НоваяГруппа.ИмяМакета   = "ПоляШаблонаШапкаПодарки";
			НоваяГруппа.ИмяОбъекта = ИмяОбъекта;
			
			НоваяГруппа = ИерархическийШаблон.Строки.Добавить();
			НоваяГруппа.Элемент = "Подвал";
			НоваяГруппа.Идентификатор = УправлениеШаблонами.ПолучитьИдентификатор();
			НоваяГруппа.ТипЭлемента = "ОбластьЧека";
			НоваяГруппа.ИмяМакета   = "ПоляШаблонаШапка";
			НоваяГруппа.ИмяОбъекта = ИмяОбъекта;
		КонецЕсли;
		
		Возврат Документы.ЧекККМ.ПустаяСсылка();
КонецФункции

// Функция выполняет добавление фискальных строк в дерево шаблона перед формированием
//  по нему представления чека ККМ
//
// Параметры
//  КопияШаблона          - КоллекцияСтрокДереваЗначений
//                          Коллекция строк в котрую необходимо добавить фискальные строки
//  ШиринаЧека            - Число
//                          Ширина чека в симолах
//  ОднаФискальнаяСтрока  - Булево
//                          Определяется наличие режима одна фискальная строка
//
// Возвращаемое значение:
//   КоллекцияСтрокДереваЗначений   - Коллекция строк дерева значений
//
Функция СформироватьФискальныеСтроки(КопияШаблона, ШиринаЧека, ОднаФискальнаяСтрока) Экспорт
	
	// Шапка
	
	Если ШиринаЧека < 18 Тогда
		Возврат КопияШаблона;
	КонецЕсли;
	
	ФР_Строка_0_0 = КопияШаблона.Строки.Найти("Шапка",,Ложь);
	Если ФР_Строка_0_0 <> Неопределено Тогда 
		
		// Первая фискальная строка
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР1");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "Таблица");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР1");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ВставитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, 0, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "Касса № 01");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР2");
		ПараметрыФункции.Вставить("Ширина"          , 10);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		Если ШиринаЧека >= 25 Тогда
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.КассаККМ.Владелец.ИНН%%");
			ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаКассаККМОрганизацияИНН");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР3");
			ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека - 10);
			ПараметрыФункции.Вставить("РазмещениеТекста", 1); // Обрезать
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ПараметрыФункции.Вставить("Префикс"         , "ИНН: ");
			ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		КонецЕсли;
		
		// Вторая фискальная строка
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР4");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "Таблица");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР4");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ВставитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, 1, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.Date%%");
		ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаDate");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР5");
		ПараметрыФункции.Вставить("Ширина"          , 16);
		ПараметрыФункции.Вставить("РазмещениеТекста", 2); // Забивать
		ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
		ПараметрыФункции.Вставить("Префикс"         , "Дата  ");
		ПараметрыФункции.Вставить("Формат"         , "ДФ=dd.MM.yyyy");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		// Третья фискальная строка
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР7");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "Таблица");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР7");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ВставитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, 2, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.Date%%");
		ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаDate");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР8");
		ПараметрыФункции.Вставить("Ширина"          , 11);
		ПараметрыФункции.Вставить("РазмещениеТекста", 2); // Забивать
		ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
		ПараметрыФункции.Вставить("Префикс"         , "Время ");
		ПараметрыФункции.Вставить("Формат"          , "ДФ=чч:мм");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		Если ШиринаЧека >= 23 Тогда
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.НомерЧекаККМ%%");
			ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаНомерЧекаККМ");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР9");
			ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека-11);
			ПараметрыФункции.Вставить("РазмещениеТекста", 2); // Забивать
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ПараметрыФункции.Вставить("Префикс"         , "ЧЕК.№ ");
			ПараметрыФункции.Вставить("Формат"          , "ЧЦ=6; ЧВН=; ЧГ=0");
			ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		КонецЕсли;
		
	КонецЕсли;
	
	// Подвал
	
	ФР_Строка_0_0 = КопияШаблона.Строки.Найти("Подвал",,Ложь);
	Если ФР_Строка_0_0 <> Неопределено И ОднаФискальнаяСтрока Тогда
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР11");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "Таблица");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР11");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "Всего:");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР12");
		ПараметрыФункции.Вставить("Ширина"          , 6);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.СуммаДокумента%%");
		ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаСуммаДокумента");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР13");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека - 6);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ПараметрыФункции.Вставить("Формат"          , "ЧДЦ=2");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
	КонецЕсли;
	
	Если ФР_Строка_0_0 <> Неопределено Тогда
		
		Пробелы50 = "**************************************************";
		Пробелы = "";
		n = Цел(ШиринаЧека/50);
		Для Счетчик = 0 По n Цикл
			Пробелы = Пробелы +Пробелы50;
		КонецЦикла;
		Пробелы = Лев(Пробелы, ШиринаЧека);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , Пробелы);
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР14");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР15");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "Таблица");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР15");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ИТОГ");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР16");
		ПараметрыФункции.Вставить("Ширина"          , 4);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.СуммаДокумента%%");
		ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаСуммаДокумента");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР17");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека - 4);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ПараметрыФункции.Вставить("Формат"          , "ЧДЦ=2");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , Пробелы);
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР18");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, ПараметрыФункции);
		
	КонецЕсли;

	// Фискальные строки табличной части
	
	Если НЕ ОднаФискальнаяСтрока Тогда
		
		ФР_Строка_0_0 = КопияШаблона.Строки.Найти("Табличная часть ""Товары"" (Подвал)",,Ложь);
		Если ФР_Строка_0_0 <> Неопределено Тогда
			
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР19");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СоставнаяСтрока");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР19");
			ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
			ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ФР_Строка_1_0 = ПечатьФискальныхЧеков.ВставитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, 0, ПараметрыФункции);
			
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "?(Структура%%Товары.Количество%% = 1,"""",Структура%%Товары.Количество%%)");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР20");
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ПараметрыФункции.Вставить("Формат"          , "ЧДЦ=3");
			ПараметрыФункции.Вставить("Вычислять"       , Истина);
			ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
			
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "?(Структура%%Товары.Количество%% = 1,"""","" Х "")");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР21");
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ПараметрыФункции.Вставить("Вычислять"       , Истина);
			ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
			
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "?(Структура%%Товары.Количество%% = 1,"""",Структура%%Товары.ЦенаБезСкидки%%)");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР22");
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ПараметрыФункции.Вставить("Вычислять"       , Истина);
			ПараметрыФункции.Вставить("Формат"          ,"ЧДЦ=2");
			ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
			
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Товары.Сумма%%");
			ПараметрыФункции.Вставить("ИмяКолонки"      , "ТоварыСумма");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР23");
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
			ПараметрыФункции.Вставить("Формат"          , "ЧДЦ=2");
			ПараметрыФункции.Вставить("Префикс"         , "=");
			ПечатьФискальныхЧеков.ВставитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, 1, ПараметрыФункции);
			
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР24");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "Таблица");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР24");
			ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
			ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ФР_Строка_1_0 = ПечатьФискальныхЧеков.ВставитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, 2, ПараметрыФункции);
			
			// Строка со скидкой
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР25");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СоставнаяСтрока");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР25");
			ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
			ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
			ФР_Строка_2_0  = ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
			
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "?(Структура%%Скидки.ПроцентСкидки%% <> 0,""СКИДКА"", """")");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР26");
			ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
			ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
			ПараметрыФункции.Вставить("Вычислять"       , Истина);
			ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_2_0.Строки, ПараметрыФункции);
			
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Скидки.ПроцентСкидки%%");
			ПараметрыФункции.Вставить("ИмяКолонки"      , "СкидкиПроцентСкидки");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР27");
			ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
			ПараметрыФункции.Вставить("Ширина"          , 6); // Переносить
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ПараметрыФункции.Вставить("Формат"          , "ЧДЦ=2");
			ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
			
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Скидки.СуммаСкидки%%");
			ПараметрыФункции.Вставить("ИмяКолонки"      , "СкидкиСуммаСкидки");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР28");
			ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
			ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека - 12); // Переносить
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ПараметрыФункции.Вставить("Формат"          , "ЧДЦ=2");
			ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КопияШаблона;
	
КонецФункции

//	LNK 26.01.2017 12:48:20
Функция ПолучитьЗапросПроведенияИЗаполнитьРеквизитыШапки(ДокументСсылка, Реквизиты = Неопределено)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Дата КАК Период,
	|	ТаблицаДокумента.ВидОперации КАК ВидОперации,
	|	ТаблицаДокумента.ВладелецДисконтнойКарты КАК ВладелецДисконтнойКарты,
	|	ТаблицаДокумента.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ТаблицаДокумента.КассаККМ КАК КассаККМ,
	|	ТаблицаДокумента.Магазин КАК Магазин,
	|	ТаблицаДокумента.ЧекККМПродажа КАК ЧекККМПродажа,
	|	ТаблицаДокумента.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				ИЛИ ТаблицаДокумента.ЗаказПокупателя = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаказПокупателяЗаполнен,
	|	ЕСТЬNULL(ТаблицаДокумента.ЗаказПокупателя.ТипДоставки, значение(Перечисление.ТипДоставкиЗаказПокупателя.ПустаяСсылка)) КАК ЗаказПокупателяТипДоставки,
	|	ЕСТЬNULL(ТаблицаДокумента.ЗаказПокупателя.ТипОплаты, значение(Перечисление.ТипОплатыЗаказПокупателя.ПустаяСсылка)) КАК ЗаказПокупателяТипОплаты,
	|	ТаблицаДокумента.ДоговорЭквайринга КАК ДоговорЭквайринга,
	|	ТаблицаДокумента.ДоговорСтрахования КАК ДоговорСтрахования,
	|	ТаблицаДокумента.Продавец КАК Продавец,
	|	ТаблицаДокумента.СтатусЧекаККМ КАК СтатусЧекаККМ,
	|	ТаблицаДокумента.АналитикаХозяйственнойОперации КАК АналитикаХозяйственнойОперации,
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Магазин.СкладПродажи КАК СкладПродажи,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ТаблицаДокумента.УслугаБанка КАК УслугаБанка,
	|	ТаблицаДокумента.УслугаБанкаПериодПредоставления КАК УслугаБанкаПериодПредоставления,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробитый)
	|				ИЛИ ТаблицаДокумента.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПробитыйИлиАрхивный
	|ИЗ
	|	Документ.ЧекККМ КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка"
	);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);

	РезультатЗапроса = Запрос.Выполнить();
	
	Реквизиты = РезультатЗапроса.Выбрать();
	Реквизиты.Следующий(); 
	
	ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВПараметрыЗапроса(РезультатЗапроса, Реквизиты, Запрос);

	Запрос.УстановитьПараметр("УслугаСтрахования", СтрахованиеСерверПовтИсп.ПолучитьУслугуСтрахования(Реквизиты.Магазин, Реквизиты.Период));
	Запрос.УстановитьПараметр("ИспользоватьЛимитыРучныхСкидок", ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИспользоватьЛимитыРучныхСкидок"));

	УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику(Реквизиты.Период);
	Запрос.УстановитьПараметр("РазрешитьПрямуюИнтеграциюMagento", УчетнаяПолитика.РазрешитьПрямуюИнтеграциюMagento);

	Возврат Запрос;

КонецФункции

//	LNK 21.02.2020 13:58:45
Функция ПроверитьПодарочныеСертификаты(ДокументСсылка)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура.Наименование КАК Представление,
	|	КОЛИЧЕСТВО(ТаблицаСерийныеНомера.НомерСтроки) КАК КоличествоНомеров
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.СерийныеНомера КАК ТаблицаСерийныеНомера
	|		ПО ТаблицаТовары.Ссылка = ТаблицаСерийныеНомера.Ссылка
	|			И ТаблицаТовары.КлючСвязиСерийныхНомеров = ТаблицаСерийныеНомера.КлючСвязиСерийныхНомеров
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ТекущийДокумент
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И ТаблицаТовары.Номенклатура.ИспользоватьСерийныеНомера
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура.Наименование
	|
	|ИМЕЮЩИЕ
	|	НЕ КОЛИЧЕСТВО(ТаблицаСерийныеНомера.НомерСтроки) = 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	);
	Запрос.УстановитьПараметр("ТекущийДокумент", ДокументСсылка);
	
	Результат = Запрос.Выполнить();

	ДанныеПроверки = Новый Структура("Ошибка, Содержание", Ложь, "");

	Если НЕ Результат.Пустой() Тогда

		ДанныеПроверки.Ошибка = Истина;

		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл

			ДанныеПроверки.Содержание = ?(ПустаяСтрока(ДанныеПроверки.Содержание), "", Символы.ПС)
			+ "№ " + Формат(Выборка.НомерСтроки, "ЧДЦ=; ЧГ=") + ". «" + Выборка.Представление + "» имеет недопустимые связи номеров (" + Формат(Выборка.КоличествоНомеров, "ЧДЦ=; ЧГ=") + ")";

		КонецЦикла;

	КонецЕсли;

	Возврат ДанныеПроверки;

КонецФункции

#Область ПодготовкаДанныхДляПечатиНаФискальномРегистраторе

//	LNK 31.01.2019 10:50:42
Функция ВходныеПараметрыПолучить(ДокументСсылка, ДополнительныеПараметры = Неопределено)	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(3))) = ""   ""
	|			ТОГДА ТаблицаТовары.Номенклатура.Наименование
	|		ИНАЧЕ ТаблицаТовары.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК НаименованиеДляПечати,
	|	ТаблицаТовары.Характеристика.Представление КАК ХарактеристикаПредставление,
	|	ТаблицаТовары.Номенклатура.ПодакцизныйТовар КАК ПодакцизныйТовар,
	|	ТаблицаТовары.Номенклатура.КодПоУКТЗЕД КАК КодПоУКТЗЕД,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ТаблицаТовары.СуммаБонусныхБалловНачислено КАК СуммаБонусныхБалловНачислено,
	|	ТаблицаТовары.СуммаБонусныхБалловСписано КАК СуммаБонусныхБалловСписано,
	|	ТаблицаТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ТаблицаТовары.СуммаОкругления КАК СуммаОкругления,
	|	ТаблицаТовары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|	ТаблицаТовары.Номенклатура.Номинал КАК Номинал,
	|	ТаблицаТовары.Номенклатура.Код КАК Код,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.Артикул = """"
	|			ТОГДА ТаблицаТовары.Номенклатура.Код
	|		ИНАЧЕ ТаблицаТовары.Номенклатура.Артикул
	|	КОНЕЦ КАК Артикул,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Штрихкод = """"
	|			ТОГДА ЕСТЬNULL(ТаблицаТовары.Номенклатура.Код, """")
	|		ИНАЧЕ ТаблицаТовары.Штрихкод
	|	КОНЕЦ КАК Штрихкод,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ""шт.""
	|		ИНАЧЕ ТаблицаТовары.Упаковка
	|	КОНЕЦ КАК Упаковка
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ТекущийДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номер КАК Номер,
	|	ТаблицаДокумента.Дата КАК Дата,
	|	ТаблицаДокумента.Проведен КАК Проведен,
	|	ТаблицаДокумента.ВидОперации КАК ВидОперации,
	|	ТаблицаДокумента.Магазин КАК Магазин,
	|	ТаблицаДокумента.КассаККМ КАК КассаККМ,
	|	ЕСТЬNULL(ТаблицаДокумента.КассаККМ.ПРРО, ЛОЖЬ) КАК ПРРО,
	|	ТаблицаДокумента.КассаККМ.НоваяФормаЧека КАК НоваяФормаЧека,
	|	ТаблицаДокумента.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ТаблицаДокумента.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВладелецДисконтнойКарты В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|			ТОГДА ЕСТЬNULL(ТаблицаДокумента.ДисконтнаяКарта.ВладелецКарты, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ ТаблицаДокумента.ВладелецДисконтнойКарты
	|	КОНЕЦ КАК ВладелецКарты,
	|	ЕСТЬNULL(ТаблицаКонтакты.НомерТелефона, """") КАК НомерТелефона,
	|	ТаблицаДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ТаблицаДокумента.ПодакцизныеТоварыДляКоммерческогоИспользования КАК ПодакцизныеТоварыДляКоммерческогоИспользования,
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаДокумента.Ответственный.ФизЛицо.Наименование, """") = """"
	|			ТОГДА ТаблицаДокумента.Ответственный.Наименование
	|		ИНАЧЕ ТаблицаДокумента.Ответственный.ФизЛицо.Наименование
	|	КОНЕЦ КАК Продавец,
	|	ЕСТЬNULL(ТаблицаДокумента.ЗаказПокупателя.НомерЗаказаНаСайте, """") КАК ИнтернетЗаказ,
	|	ЕСТЬNULL(ТаблицаДокумента.КассаККМ.ПодключаемоеОборудование, ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)) КАК ФР_Идентификатор,
	|	ЕСТЬNULL(ТаблицаДокумента.КассаККМ.ПодключаемоеОборудование.ОбработчикДрайвера, ЗНАЧЕНИЕ(Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ПустаяСсылка)) КАК ФР_ОбработчикДрайвера
	|ИЗ
	|	Документ.ЧекККМ КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтакты
	|		ПО (ТаблицаКонтакты.Ссылка = ВЫБОР
	|				КОГДА ТаблицаДокумента.ВладелецДисконтнойКарты В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|					ТОГДА ТаблицаДокумента.ДисконтнаяКарта.ВладелецКарты
	|				ИНАЧЕ ТаблицаДокумента.ВладелецДисконтнойКарты
	|			КОНЕЦ)
	|			И (ТаблицаКонтакты.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ТекущийДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.НаименованиеДляПечати КАК НаименованиеДляПечати,
	|	ТаблицаТовары.ХарактеристикаПредставление КАК ХарактеристикаПредставление,
	|	ТаблицаТовары.ПодакцизныйТовар КАК ПодакцизныйТовар,
	|	ТаблицаТовары.КодПоУКТЗЕД КАК КодПоУКТЗЕД,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ТаблицаТовары.СуммаБонусныхБалловНачислено КАК СуммаБонусныхБалловНачислено,
	|	ТаблицаТовары.СуммаБонусныхБалловСписано КАК СуммаБонусныхБалловСписано,
	|	ТаблицаТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ТаблицаТовары.СуммаОкругления КАК СуммаОкругления,
	|	0 КАК Номинал,
	|	ТаблицаТовары.Код КАК Код,
	|	ТаблицаТовары.Артикул КАК Артикул,
	|	ТаблицаТовары.Штрихкод КАК Штрихкод,
	|	ЛОЖЬ КАК ПодарочныйСертификат
	|ИЗ
	|	Товары КАК ТаблицаТовары
	|ГДЕ
	|	НЕ(ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|				И ТаблицаТовары.Номенклатура.ИспользоватьСерийныеНомера)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаСерийныеНомера.СерийныйНомер.КодСерийногоНомера,
	|	ТаблицаТовары.ХарактеристикаПредставление,
	|	ТаблицаТовары.ПодакцизныйТовар,
	|	ТаблицаТовары.КодПоУКТЗЕД,
	|	ТаблицаТовары.КоличествоУпаковок,
	|	ТаблицаТовары.Упаковка,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СуммаНДС,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СуммаАвтоматическойСкидки,
	|	ТаблицаТовары.СуммаБонусныхБалловНачислено,
	|	ТаблицаТовары.СуммаБонусныхБалловСписано,
	|	ТаблицаТовары.СуммаРучнойСкидки,
	|	ТаблицаТовары.СуммаОкругления,
	|	ТаблицаТовары.Номинал,
	|	ТаблицаТовары.Код,
	|	ТаблицаТовары.Артикул,
	|	ТаблицаТовары.Штрихкод,
	|	ИСТИНА
	|ИЗ
	|	Товары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.СерийныеНомера КАК ТаблицаСерийныеНомера
	|		ПО ТаблицаТовары.КлючСвязиСерийныхНомеров = ТаблицаСерийныеНомера.КлючСвязиСерийныхНомеров
	|ГДЕ
	|	ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И ТаблицаТовары.Номенклатура.ИспользоватьСерийныеНомера
	|	И ТаблицаСерийныеНомера.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплаты.ВидОплаты.ТипОплаты КАК ТипОплаты,
	|	СУММА(ТаблицаОплаты.Сумма) КАК Сумма,
	|	ТаблицаОплаты.ЭквайринговыйТерминал.Наименование КАК ЭквайринговыйТерминал,
	|	ТаблицаОплаты.СсылочныйНомер КАК КодТранзакции,
	|	ТаблицаОплаты.НомерЧекаЭТ КАК НомерЧекаЭТ,
	|	ТаблицаОплаты.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|	ТаблицаОплаты.СлипЧек КАК СлипЧек
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ТаблицаОплаты
	|ГДЕ
	|	ТаблицаОплаты.Ссылка = &ТекущийДокумент
	|	И НЕ ТаблицаОплаты.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплаты.ВидОплаты.ТипОплаты,
	|	ТаблицаОплаты.ЭквайринговыйТерминал.Наименование,
	|	ТаблицаОплаты.СсылочныйНомер,
	|	ТаблицаОплаты.НомерЧекаЭТ,
	|	ТаблицаОплаты.НомерПлатежнойКарты,
	|	ТаблицаОплаты.СлипЧек
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаОплаты.Сумма) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДоговор.НомерДоговора КАК НомерДоговора,
	|	ТаблицаДоговор.Дата КАК ДатаДоговора,
	|	ВЫБОР
	|		КОГДА ТаблицаДоговор.Фамилия = """"
	|				И ТаблицаДоговор.Имя = """"
	|				И ТаблицаДоговор.Отчество = """"
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ТаблицаДоговор.Контрагент.Наименование, """") = """"
	|						ТОГДА """"
	|					ИНАЧЕ ТаблицаДоговор.Контрагент.Наименование
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаДоговор.Фамилия + "" "" + ТаблицаДоговор.Имя + "" "" + ТаблицаДоговор.Отчество
	|	КОНЕЦ КАК Страховщик,
	|	ТаблицаДоговор.ДокументПродажи.Номер КАК ПродажаНомер,
	|	ТаблицаДоговор.ДокументПродажи.Дата КАК ПродажаДата,
	|	ТаблицаДоговор.ДокументПродажи.НомерЧекаККМ КАК ПродажаНомерЧекаККМ,
	|	ТаблицаДоговор.Номенклатура.Код КАК Код
	|ИЗ
	|	Документ.ЧекККМ КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорСтрахования КАК ТаблицаДоговор
	|		ПО ТаблицаДокумента.ДоговорСтрахования = ТаблицаДоговор.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ТекущийДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСертификатов.СерийныйНомер.КодСерийногоНомера КАК КодСерийногоНомера,
	|	ТаблицаВладельцев.Номинал КАК Номинал
	|ИЗ
	|	Документ.ЧекККМ.ПогашениеПодарочныхСертификатов КАК ТаблицаСертификатов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаВладельцев
	|		ПО ТаблицаСертификатов.ПодарочныйСертификат = ТаблицаВладельцев.Ссылка
	|ГДЕ
	|	ТаблицаСертификатов.Ссылка = &ТекущийДокумент
	|	И ТаблицаВладельцев.ИспользоватьСерийныеНомера
	|	И ТаблицаВладельцев.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номинал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Товары.СуммаБонусныхБалловНачислено) КАК СуммаБонусныхБалловНачислено,
	|	СУММА(Товары.СуммаБонусныхБалловСписано) КАК СуммаБонусныхБалловСписано
	|ИЗ
	|	Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Товары"
	);
	Запрос.УстановитьПараметр("ТекущийДокумент", ДокументСсылка);
	
	Результаты = Запрос.ВыполнитьПакет();

	РеквизитыЧека = Результаты[1].Выбрать();
	РеквизитыЧека.Следующий();
	ТоварыВыборка       = Результаты[2].Выбрать();
	ТаблицаПоТипамОплат = Результаты[3].Выгрузить();
	РеквизитыСтраховки  = Результаты[4].Выбрать();
	ТаблицаСертификаты  = Результаты[5].Выгрузить();

	ДанныеБонусов = Результаты[6].Выбрать();
	ДанныеБонусов.Следующий();

	УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();

	Если ДополнительныеПараметры = Неопределено Тогда

		ПечатьИзРМК = Ложь;	//	вызов, вероятно, из формы чека
	//	информацию по бонусным накоплениям нужно получить полную - поэтому фильтры в виде магазина и товаров не передаём!
		ДанныеКарты = РозничныеПродажиСервер.ПолучитьДанныеКарты(ДокументСсылка, РеквизитыЧека.ВладелецКарты, РеквизитыЧека.ДисконтнаяКарта,,, РеквизитыЧека.ЗаказПокупателя);

		ДополнительныеПараметры = Новый Структура(
			"ВладелецКарты, КодКарты, СуммаПокупок, БонусныйСчет, ПараметрыКассыККМ, ВызовИзРМК"
			, ДанныеКарты.ВладелецКарты
			, ДанныеКарты.КодКарты
			, ДанныеКарты.СуммаПокупокОбычная
			, Новый Структура(
				"СуммаБонусныхБаллов, СуммаБонусныхБалловВРезерве"
				, ДанныеКарты.СуммаБонусныхБаллов
				, ДанныеКарты.СуммаБонусныхБалловВРезерве
			)
			, ЗначениеНастроекПовтИсп.ПолучитьПараметрыКассыККМ(РеквизитыЧека.КассаККМ)
			, Ложь
		);

	Иначе

		ПечатьИзРМК = Истина;

		Если ДополнительныеПараметры.Свойство("СуммаПокупок") Тогда

		//	информацию по бонусным накоплениям нужно получить полную - поэтому фильтры в виде магазина и товаров не передаём!
			ДанныеКарты = РозничныеПродажиСервер.ПолучитьДанныеКарты(ДокументСсылка, РеквизитыЧека.ВладелецКарты, РеквизитыЧека.ДисконтнаяКарта,,, РеквизитыЧека.ЗаказПокупателя); 
			ДополнительныеПараметры.СуммаПокупок = ДанныеКарты.СуммаПокупокОбычная;

		КонецЕсли;

	КонецЕсли;

	ДополнительныеПараметры.БонусныйСчет.Вставить("СуммаБонусныхБалловНачислено", ДанныеБонусов.СуммаБонусныхБалловНачислено);
	ДополнительныеПараметры.БонусныйСчет.Вставить("СуммаБонусныхБалловСписано"	, ДанныеБонусов.СуммаБонусныхБалловСписано);

//	---------------------------------------------------------------------------------------

	ВходныеПараметры = Новый Массив;
	
	НомерСекции = 1;
	
//	Подготовка таблицы товаров
	ТаблицаТоваров  = Новый Массив;

	СуммаВсего		= 0;	//	Сумма документа общая к оплате.
	СуммаСкидкиИтог = 0;
	СуммаОкругления = 0;

	ПРРО = (РеквизитыЧека.ПРРО = Истина);

	Пока ТоварыВыборка.Следующий() Цикл

		СтавкаНДС   = ОбработкаТабличнойЧастиТоварыПовтИсп.ПолучитьСтавкуНДСЧислом(ТоварыВыборка.СтавкаНДС);

		Сумма       = ТоварыВыборка.Сумма + ?(РеквизитыЧека.ЦенаВключаетНДС, 0, ТоварыВыборка.СуммаНДС);
		СуммаСкидки = ТоварыВыборка.СуммаАвтоматическойСкидки + ТоварыВыборка.СуммаБонусныхБалловСписано + ТоварыВыборка.СуммаРучнойСкидки;
		СуммаСкидкиИтог = СуммаСкидкиИтог + СуммаСкидки;

		Если (Сумма + СуммаСкидки) = 0 Тогда

				ПроцентСкидки = 0;

		Иначе	ПроцентСкидки = Окр(100 * СуммаСкидки / (Сумма + СуммаСкидки), 2, 1);

		КонецЕсли;

		Если РеквизитыЧека.ЦенаВключаетНДС ИЛИ ТоварыВыборка.СуммаНДС = 0  Тогда

				Цена = ТоварыВыборка.Цена

		Иначе	Цена = ОКР(Сумма / ТоварыВыборка.КоличествоУпаковок, 2, 1);

		КонецЕсли;
		
		СтавкаНДССтрокой    = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДССтрокой(ТоварыВыборка.СтавкаНДС);
        ЭтоПодакцизныйТовар = НЕ РеквизитыЧека.ПодакцизныеТоварыДляКоммерческогоИспользования
								И ТоварыВыборка.ПодакцизныйТовар = Истина;
		
		СтрокаТаблицыТоваров = Новый СписокЗначений();
		
		Если ТоварыВыборка.ПодарочныйСертификат Тогда	//	LNK 21.02.2020 13:29:40

			НаименованиеТовара = "ПС " + СокрЛП(ТоварыВыборка.НаименованиеДляПечати) + " (" + Формат(ТоварыВыборка.Номинал, "ЧДЦ=; ЧГ=") + ")";

		Иначе

			НаименованиеТовара = СокрЛП(ТоварыВыборка.НаименованиеДляПечати) + 
								 ?(ПустаяСтрока(ТоварыВыборка.ХарактеристикаПредставление)
								 , ""
								 , " (" + Строка(ТоварыВыборка.ХарактеристикаПредставление) + ")"
			);

			Если РеквизитыЧека.НоваяФормаЧека Тогда

				ИдентификаторПозиции = ПолучитьШтрихкод(ТоварыВыборка.Номенклатура, ТоварыВыборка.Упаковка, ТоварыВыборка.Штрихкод);

				НаименованиеТовара =
					?(ПустаяСтрока(ТоварыВыборка.КодПоУКТЗЕД), "", СокрЛП(ТоварыВыборка.КодПоУКТЗЕД) + "#") +
				//	?(ПустаяСтрока(ИдентификаторПозиции), "", СокрЛП(ИдентификаторПозиции) + "#") +
					?(ПустаяСтрока(ИдентификаторПозиции), "", СокрЛП(ИдентификаторПозиции) + " ") +
					НаименованиеТовара;

			КонецЕсли;

		КонецЕсли;
		
		СтрокаТаблицыТоваров.Добавить(НаименованиеТовара);					//  0 - Наименование
		СтрокаТаблицыТоваров.Добавить(?(ПРРО, ТоварыВыборка.Штрихкод, ""));	//  1 - Штрихкод
		СтрокаТаблицыТоваров.Добавить(?(ПРРО, ТоварыВыборка.Артикул, ""));	//  2 - Артикул
		СтрокаТаблицыТоваров.Добавить(НомерСекции);							//  3 - Номер секции
		СтрокаТаблицыТоваров.Добавить(Цена);								//  4 - Цена за позицию без скидки
		СтрокаТаблицыТоваров.Добавить(ТоварыВыборка.КоличествоУпаковок);	//  5 - Количество
		СтрокаТаблицыТоваров.Добавить("");									//  6 - Наименование скидки/наценки
		СтрокаТаблицыТоваров.Добавить(СуммаСкидки);							//  7 - Сумма скидки/наценки
		СтрокаТаблицыТоваров.Добавить(ПроцентСкидки);						//  8 - Процент скидки/наценки
		СтрокаТаблицыТоваров.Добавить(Сумма); 								//  9 - Сумма позиции со скидкой
		СтрокаТаблицыТоваров.Добавить(0);									// 10 - Номер налога (1)
		СтрокаТаблицыТоваров.Добавить(ТоварыВыборка.СуммаНДС);				// 11 - Сумма налога (1)
		СтрокаТаблицыТоваров.Добавить(СтавкаНДС * 100);						// 12 - Процент налога (1)
		СтрокаТаблицыТоваров.Добавить(0);									// 13 - Номер налога (2)
		СтрокаТаблицыТоваров.Добавить(0);									// 14 - Сумма налога (2)
		СтрокаТаблицыТоваров.Добавить(0);									// 15 - Процент налога (2)
		СтрокаТаблицыТоваров.Добавить("");									// 16 - Наименование секции форматирования товарной строки
		СтрокаТаблицыТоваров.Добавить(СтавкаНДССтрокой);					// 17 - Ставка НДС строкой
		СтрокаТаблицыТоваров.Добавить(ЭтоПодакцизныйТовар);					// 18 - Подакцизный товар

		Если РеквизитыЧека.ПРРО = Истина Тогда

			СтрокаТаблицыТоваров.Добавить(ТоварыВыборка.КодПоУКТЗЕД);		// 19 - Подакцизный товар
			СтрокаТаблицыТоваров.Добавить(ТоварыВыборка.Упаковка);			// 20 - Единица измерения
			СтрокаТаблицыТоваров.Добавить(РеквизитыЧека.ЦенаВключаетНДС);	// 21 - ЦенаВключаетНДС

		КонецЕсли;
		
		ТаблицаТоваров.Добавить(СтрокаТаблицыТоваров);

		СуммаВсего		= СуммаВсего + Сумма;
		СуммаОкругления = СуммаОкругления + ТоварыВыборка.СуммаОкругления;

	КонецЦикла;
	
//	Подготовка таблицы оплат
	
	МассивОплат	= Новый Массив;
	ПараметрыДанных = Новый Структура(
		"СуммаДокумента, ТипыОплат"
		, СуммаВсего
		, ПолучитьПараметрТипыОплат(РеквизитыЧека.ФР_Идентификатор, РеквизитыЧека.ФР_ОбработчикДрайвера)
	);
//	LNK 20.02.2022 07:01:59
	УстановитьДанныеОплаты(МассивОплат, ТаблицаПоТипамОплат, ПараметрыДанных);

//	Подготовка таблицы общих параметров
	
	МассивШаблона = Новый Массив;
	МассивШаблона.Добавить(РеквизитыЧека.КассаККМ);
	МассивШаблона.Добавить("ШаблонЧекаККМ");
	МассивШаблона.Добавить(ДокументСсылка);

	ТипЧека = ?(РеквизитыЧека.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, 1, 0);
	ОбщиеПараметры = Новый Массив;

	ОбщиеПараметры.Добавить(ТипЧека);												//  0 - Тип чека
	ОбщиеПараметры.Добавить(Истина);												//  1 - Признак фискального чека
	ОбщиеПараметры.Добавить(Неопределено);											//  2 - Печать на подкладном документе
	ОбщиеПараметры.Добавить(РеквизитыЧека.СуммаДокумента);							//  3 - Сумма по чеку без скидок/наценок
	ОбщиеПараметры.Добавить(РеквизитыЧека.СуммаДокумента);							//  4 - Сумма по чеку с учетом всех скидок/наценок
	ОбщиеПараметры.Добавить("");													//  5 - Номер дисконтной карты
	ОбщиеПараметры.Добавить("");													//  6 - Текст шапки
	ОбщиеПараметры.Добавить("");													//  7 - Текст подвала
	ОбщиеПараметры.Добавить(0);														//  8 - Номер смены (для копии чека)
	ОбщиеПараметры.Добавить(?(ПРРО, РеквизитыЧека.Номер, ""));						//  9 - Номер чека (для копии чека)
	ОбщиеПараметры.Добавить(0);														// 10 - Номер документа (для копии чека)
	ОбщиеПараметры.Добавить(Формат(РеквизитыЧека.Дата, "ДФ='dd.MM.yyyy ЧЧ:мм'"));	// 11 - Дата документа (для копии чека)
	ОбщиеПараметры.Добавить(?(ПРРО, РеквизитыЧека.Продавец, ""));					// 12 - Имя кассира (для копии чека)
	ОбщиеПараметры.Добавить("");													// 13 - Пароль кассира
	ОбщиеПараметры.Добавить(0);														// 14 - Номер шаблона
	ОбщиеПараметры.Добавить("");													// 15 - Наименование секции форматирования шапки
	ОбщиеПараметры.Добавить("");													// 16 - Наименование секции форматирования подвала
	ОбщиеПараметры.Добавить(МассивШаблона);											// 17 - Массив параметров шаблона чека

	ИнформацияПодвала = ?(СуммаСкидкиИтог = 0, ""
	, Символы.ПС
	+ ПодготовитьСтроку("ЗНИЖКА ЗАГАЛОМ " + Формат(СуммаСкидкиИтог, "ЧДЦ=2; ЧГ="))
	) + Символы.ПС;

	Если ЗначениеЗаполнено(ДополнительныеПараметры.ВладелецКарты) Тогда

		ИнформацияПодвала = ИнформацияПодвала
		//	+ ПодготовитьСтроку("КАРТКА:"     + ДополнительныеПараметры.КодКарты) + Символы.ПС
			+ ПодготовитьСтроку("П.І.Б.:"     + ДополнительныеПараметры.ВладелецКарты) + Символы.ПС
		//	LNK 04.02.2022 05:42:08 - В накопления выводим сумму накоплений плюс текущая сумма чека..
		//	но только в случае печати из РМК или, если чек НЕ проведен!
			+ ПодготовитьСтроку("СУМА ПОКУПОК:"	//	было "НАКОПИЧЕНО:"	LNK 30.11.2023 06:38:01
				+ Формат(
					ДополнительныеПараметры.СуммаПокупок
						+ СуммаВсего
				//		+ ?(НЕ РеквизитыЧека.Проведен ИЛИ ПечатьИзРМК = Истина, СуммаВсего, 0)
					, "ЧДЦ=2; ЧН=0.00; ЧГ="
				) + " грн"
			) + Символы.ПС;

	КонецЕсли;

	Если РеквизитыСтраховки.Следующий() Тогда

		ИнформацияПодвала = ИнформацияПодвала
			+ ПодготовитьСтроку("Страховий платіж згiдно договору") + Символы.ПС
			+ ПодготовитьСтроку("№ " + СокрЛП(РеквизитыСтраховки.НомерДоговора) + " вiд " + Формат(РеквизитыСтраховки.ДатаДоговора, "ДФ=dd.MM.yyyy"))
			+ ?(ПустаяСтрока(РеквизитыСтраховки.Страховщик), ""
				, Символы.ПС + ПодготовитьСтроку("Страхувальник " + СокрЛП(СтрЗаменить(РеквизитыСтраховки.Страховщик, "  ", " ")))) + Символы.ПС
			+ ПодготовитьСтроку("продаж [" + СокрЛП(РеквизитыСтраховки.Код) + "]" + СокрЛП(РеквизитыСтраховки.ПродажаНомер)
				+ ":" + Формат(РеквизитыСтраховки.ПродажаНомерЧекаККМ, "ЧДЦ=; ЧН=0; ЧГ=")
				+ " вiд " + Формат(РеквизитыСтраховки.ПродажаДата, "ДФ=dd.MM.yyyy"))
			+ Символы.ПС;

	КонецЕсли;

	ИнформацияПодвала = ИнформацияПодвала
		+ ПодготовитьСтроку("ЧЕК №: " + РеквизитыЧека.Номер) + Символы.ПС
	//	+ ПодготовитьСтроку("№ КАСИ " + ОбщегоНазначения.ПолучитьЗначениеРеквизита(РеквизитыЧека.КассаККМ, "НомерВМагазине")) + Символы.ПС
	//	+ ПодготовитьСтроку("КАСИР "  + Фам_Ини(СокрЛП(РеквизитыЧека.Продавец))) + Символы.ПС;
		;

	Если РеквизитыЧека.НоваяФормаЧека Тогда	//	LNK 02.02.2021 05:22:04

		ИнформацияПодвала = ИнформацияПодвала
		+ ПодготовитьСтроку("Валюта операції: ГРН") + Символы.ПС;

	КонецЕсли;

	Если НЕ ПустаяСтрока(РеквизитыЧека.ИнтернетЗаказ) Тогда

		ИнформацияПодвала = ИнформацияПодвала
		+ ПодготовитьСтроку("ИЗ: " + СокрЛП(РеквизитыЧека.ИнтернетЗаказ)) + Символы.ПС;

	КонецЕсли;

	УстановитьДанныеПечатиСертификаты(ИнформацияПодвала, ТаблицаСертификаты);	//	LNK 25.02.2020 09:51:47

	Если УчетнаяПолитика.ИспользоватьБонуснуюСистему И УчетнаяПолитика.ПечататьВЧекеДанныеБонусногоСчета И ПечатьИзРМК = Истина Тогда

		УстановитьДанныеПрограммыЛояльности(ИнформацияПодвала, ДополнительныеПараметры);

	КонецЕсли;

	Если РеквизитыЧека.НоваяФормаЧека Тогда	//	LNK 27.10.2020 08:18:24

		УстановитьДанныеЭквайринга(ИнформацияПодвала, ТаблицаПоТипамОплат);

	КонецЕсли;

	ИнформацияПодвала = ИнформацияПодвала
	+ ОбщегоНазначенияКлиентСервер.REPEAT("-", 25) + Символы.ПС
	+ РозничныеПродажиСервер.ПолучитьШаблонПодвала(РеквизитыЧека.Магазин) + Символы.ПС;

	УстановитьДанныеПечатиСуммаОкругления(ИнформацияПодвала, РеквизитыЧека.СуммаДокумента, СуммаОкругления);	//	LNK 16.09.2019 15:21:08

	ИнформацияПодвала = СтрЗаменить(ИнформацияПодвала, Символы.ПС + Символы.ПС, Символы.ПС);	//	LNK 05.08.2020 09:45:17

	ОбщиеПараметры.Добавить(ИнформацияПодвала);							// 18 - текст подвала чека

	Если ПРРО Тогда

		ОбщиеПараметры[7] = ИнформацияПодвала;	//	LNK 16.02.2022 12:33:32
	//	LNK 25.03.2022 10:45:06
		ОбщиеПараметры.Добавить(РеквизитыЧека.НомерТелефона);			// 19 - контакты контрагента
		ОбщиеПараметры.Добавить(РеквизитыЧека.ВладелецКарты);			// 20 - контакты контрагента

	КонецЕсли;

//	LNK 25.10.2023 05:50:33
	Если ДополнительныеПараметры.Свойство("ВызовИзРМК") И ТипЗнч(ДополнительныеПараметры.ПараметрыКассыККМ) = Тип("Структура") Тогда

		ДополнительныеПараметры.ПараметрыКассыККМ.Вставить("ВызовИзРМК", ДополнительныеПараметры.ВызовИзРМК);

	КонецЕсли;

//	LNK 30.03.2023 07:24:01	- используется при печати в ПРРО
	ОбщиеПараметры.Добавить(ДополнительныеПараметры.ПараметрыКассыККМ);	// 21 - ПараметрыКассыККМ

	ВходныеПараметры.Добавить(ТаблицаТоваров);
	ВходныеПараметры.Добавить(МассивОплат);
	ВходныеПараметры.Добавить(ОбщиеПараметры);
	
	Возврат ВходныеПараметры;

КонецФункции

Функция Фам_Ини(ФИО)	//	LNK 11.04.2023 05:46:32

	Состав = ОбщегоНазначенияКлиентСервер.lx_FillValueList(, ФИО,, " ",,, Новый ОписаниеТипов("Строка"));

	Если Состав.Количество() = 3 Тогда

		Представление = Состав[0] + " " + ВРег(Лев(Состав[1], 1)) + "." + ВРег(Лев(Состав[2], 1)) + ".";

	Иначе

		Представление = ФИО;

	КонецЕсли;

	Возврат Представление;

КонецФункции

Функция ПолучитьПараметрТипыОплат(ФР_Идентификатор, ФР_ОбработчикДрайвера)

//	LNK 20.02.2022 07:09:39 - для всех РРО, кроме программного (ПРРО)
//0 Наличные
//1 ПлатежнаяКарта
//2 БанковскийКредит
//3 ПодарочныйСертификат
//4 Послеплата
//5 Предоплата

	Если ФР_ОбработчикДрайвера = Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикDeviceManagerФискальныйРегистратор Тогда

	//	ПРРО
		ПараметрТипыОплат = ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.ПолучитьПараметрТипыОплаты(ФР_Идентификатор);

	Иначе

		ПараметрТипыОплат = Новый Массив;

	//	Порядок элементов имеет значение!
		ПараметрТипыОплат.Добавить(Новый Структура(
			"ID, ТипОплаты"
			, 0, Перечисления.ТипыОплатЧекаККМ.Наличные
			)
		);
		ПараметрТипыОплат.Добавить(Новый Структура(
			"ID, ТипОплаты"
			, 1, Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта
			)
		);
		ПараметрТипыОплат.Добавить(Новый Структура(
			"ID, ТипОплаты"
			, 2, Перечисления.ТипыОплатЧекаККМ.БанковскийКредит
			)
		);
		ПараметрТипыОплат.Добавить(Новый Структура(
			"ID, ТипОплаты"
			, 3, Перечисления.ТипыОплатЧекаККМ.ПодарочныйСертификат
			)
		);
		ПараметрТипыОплат.Добавить(Новый Структура(
			"ID, ТипОплаты"
			, 4, Перечисления.ТипыОплатЧекаККМ.Послеплата
			)
		);
		ПараметрТипыОплат.Добавить(Новый Структура(
			"ID, ТипОплаты"
			, 5, Перечисления.ТипыОплатЧекаККМ.Предоплата
			)
		);

	КонецЕсли;

	Возврат ПараметрТипыОплат;

КонецФункции

//	LNK 20.02.2022 06:56:32
Процедура УстановитьДанныеОплаты(МассивОплат, ТаблицаПоТипамОплат, ПараметрыДанных)

	СуммаОплатВсего		= ТаблицаПоТипамОплат.Итог("Сумма");
	СуммаНаличнойОплаты	= 0;
	ТипыИспользованы	= Новый Соответствие;

	Для каждого ОписаниеТипаОплаты Из ПараметрыДанных.ТипыОплат Цикл

		Если ТипыИспользованы.Получить(ОписаниеТипаОплаты.ТипОплаты) = Истина Тогда

				Продолжить;

		Иначе	ТипыИспользованы.Вставить(ОписаниеТипаОплаты.ТипОплаты, Истина);

		КонецЕсли;

		СтрокиТаблицыОплата = ТаблицаПоТипамОплат.НайтиСтроки(Новый Структура("ТипОплаты", ОписаниеТипаОплаты.ТипОплаты));

		Если ОписаниеТипаОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПодарочныйСертификат Тогда

			СуммаСертификатов = 0;

			Для каждого СтрокаТаблицы Из СтрокиТаблицыОплата Цикл

				СуммаСертификатов = СуммаСертификатов + СтрокаТаблицы.Сумма;

			КонецЦикла;

			Если СуммаСертификатов > 0 Тогда

				Если СуммаОплатВсего > ПараметрыДанных.СуммаДокумента Тогда	//	LNK 11.09.2020 10:37:14

					СуммаСдачи = СуммаОплатВсего - ПараметрыДанных.СуммаДокумента;

					Если СуммаСдачи > СуммаНаличнойОплаты Тогда

						СуммаСертификатов = Макс(0, СуммаСертификатов - СуммаСдачи);

					КонецЕсли;

				КонецЕсли;

				Если СуммаСертификатов > 0 Тогда

					СтрокаОплаты = Новый СписокЗначений();
					СтрокаОплаты.Добавить(ОписаниеТипаОплаты.ID);
					СтрокаОплаты.Добавить(СуммаСертификатов);
					СтрокаОплаты.Добавить(СокрЛП(ОписаниеТипаОплаты.ТипОплаты));
					СтрокаОплаты.Добавить("");
					МассивОплат.Добавить(СтрокаОплаты);

				КонецЕсли;

			КонецЕсли;

		Иначе

			Для каждого СтрокаТаблицы Из СтрокиТаблицыОплата Цикл

				СтрокаОплаты = Новый СписокЗначений();
				СтрокаОплаты.Добавить(ОписаниеТипаОплаты.ID);
				СтрокаОплаты.Добавить(СтрокаТаблицы.Сумма);
				СтрокаОплаты.Добавить(СокрЛП(ОписаниеТипаОплаты.ТипОплаты));
				СтрокаОплаты.Добавить("");

				МассивОплат.Добавить(СтрокаОплаты);

				Если ОписаниеТипаОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные Тогда

					СуммаНаличнойОплаты = СуммаНаличнойОплаты + СтрокаТаблицы.Сумма;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//	LNK 16.09.2019 15:19:58
Процедура УстановитьДанныеПечатиСуммаОкругления(ИнформацияПодвала, СуммаДокумента, СуммаОкругления)

	Если НЕ СуммаОкругления = 0 Тогда

		ИнформацияПодвала = ИнформацияПодвала + ?(Прав(ИнформацияПодвала, 1) = Символы.ПС, "", Символы.ПС)
		+ ОбщегоНазначенияКлиентСервер.REPEAT("-", 25) + Символы.ПС
	//	   012345678901234567890123456789
		+ ПодготовитьСтроку(
		  "Загальна вартість придбаних товарів (отриманих послуг) за чеком до заокруглення: " + Формат(СуммаДокумента - СуммаОкругления, "ЧДЦ=2") + " грн"
		)
		+ Символы.ПС
		+ ПодготовитьСтроку(
		  "Заокруглена " + ?(СуммаОкругления < 0, "знижка", "надбавка") + " "
		+ Формат(СуммаОкругления * ?(СуммаОкругления < 0, -1, 1), "ЧДЦ=2")
		);

	КонецЕсли;

КонецПроцедуры

//	LNK 12.11.2019 14:25:38
Процедура УстановитьДанныеПрограммыЛояльности(ИнформацияПодвала, ДополнительныеПараметры)

	Перем БонусныйСчет;

	Попытка

		Если ДополнительныеПараметры.Свойство("БонусныйСчет", БонусныйСчет) Тогда

			ЕстьИнформация = НЕ ( БонусныйСчет.СуммаБонусныхБаллов = 0
								И БонусныйСчет.СуммаБонусныхБалловВРезерве = 0
								И БонусныйСчет.СуммаБонусныхБалловНачислено = 0
								И БонусныйСчет.СуммаБонусныхБалловСписано = 0);

			Если ЕстьИнформация = Истина Тогда

				ИнформацияПодвала = ИнформацияПодвала + Символы.ПС// + Символы.ПС
				+ "Информація по рахунку" + Символы.ПС
				+ ОбщегоНазначенияКлиентСервер.REPEAT("-", 25) + Символы.ПС
				+ "Накопичено: " + Формат(БонусныйСчет.СуммаБонусныхБаллов, "ЧДЦ=2; ЧН=0,00; ЧГ=") + Символы.ПС;

				Если НЕ БонусныйСчет.СуммаБонусныхБалловНачислено = 0 Тогда

					ИнформацияПодвала = ИнформацияПодвала
					+ "Зараховано: " + Формат(БонусныйСчет.СуммаБонусныхБалловНачислено, "ЧДЦ=2; ЧН=0,00; ЧГ=") + Символы.ПС;

				КонецЕсли;

				Если НЕ БонусныйСчет.СуммаБонусныхБалловСписано = 0 Тогда

					ИнформацияПодвала = ИнформацияПодвала
					+ "Використано: " + Формат(БонусныйСчет.СуммаБонусныхБалловСписано, "ЧДЦ=2; ЧН=0,00; ЧГ=") + Символы.ПС;

				КонецЕсли;

				ИнформацияПодвала = ИнформацияПодвала
				+ "Залишилось: " + Формат(Макс(0, БонусныйСчет.СуммаБонусныхБаллов - БонусныйСчет.СуммаБонусныхБалловСписано), "ЧДЦ=2; ЧН=0,00; ЧГ=") + Символы.ПС;

				Если НЕ БонусныйСчет.СуммаБонусныхБалловВРезерве = 0 Тогда

					ИнформацияПодвала = ИнформацияПодвала
					+ "Зарезервовано: " + Формат(БонусныйСчет.СуммаБонусныхБалловВРезерве, "ЧДЦ=2; ЧН=0,00; ЧГ=") + Символы.ПС;

				КонецЕсли;

				ИнформацияПодвала = ИнформацияПодвала + Символы.ПС;

			КонецЕсли;

		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();

	КонецПопытки;

КонецПроцедуры

//	LNK 25.02.2020 09:39:44
Процедура УстановитьДанныеПечатиСертификаты(ИнформацияПодвала, ТаблицаСертификаты)

	Если НЕ ТаблицаСертификаты.Количество() = 0 Тогда

		ИнформацияПодвала = ИнформацияПодвала + Символы.ПС
		+ "ПОГАШЕНI СЕРТИФIКАТИ:" + Символы.ПС;

		Для каждого СтрокаТаблицы Из ТаблицаСертификаты Цикл

			ИнформацияПодвала = ИнформацияПодвала + СтрокаТаблицы.КодСерийногоНомера + " (" + Формат(СтрокаТаблицы.Номинал, "ЧГ=") + ")" + Символы.ПС;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	LNK 27.10.2020 08:20:12
Процедура УстановитьДанныеЭквайринга(ИнформацияПодвала, ТаблицаПоТипамОплат)

	ИнформацияЭквайринга = "";

	Для каждого СтрокаТаблицы Из ТаблицаПоТипамОплат.НайтиСтроки(Новый Структура("ТипОплаты", Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта)) Цикл

		Если ПустаяСтрока(СтрокаТаблицы.КодТранзакции) ИЛИ ПустаяСтрока(СтрокаТаблицы.СлипЧек) Тогда

			Продолжить;

		КонецЕсли;

		ИнформацияЭквайринга = ИнформацияЭквайринга + ?(ПустаяСтрока(ИнформацияЭквайринга), "", Символы.ПС)
		+ ?(ПустаяСтрока(СтрокаТаблицы.НомерПлатежнойКарты), "", "ЕПЗ:" + СокрЛП(СтрокаТаблицы.НомерПлатежнойКарты) + Символы.ПС)
		+ "ПЛАТІЖНА СИСТЕМА:" + СтрокаТаблицы.ЭквайринговыйТерминал + Символы.ПС
		+ ?(ПустаяСтрока(СтрокаТаблицы.НомерЧекаЭТ), "", "Квит.:" + СокрЛП(СтрокаТаблицы.НомерЧекаЭТ) + Символы.ПС)
		+ ?(ПустаяСтрока(СтрокаТаблицы.КодТранзакции), "", "Транзакція:" + СокрЛП(СтрокаТаблицы.КодТранзакции) + Символы.ПС)
		+ "    Підпис не вимагається" + Символы.ПС
		+ ?(ПустаяСтрока(СтрокаТаблицы.СлипЧек), "", СокрЛП(СтрокаТаблицы.СлипЧек) + Символы.ПС)
		;

	КонецЦикла;

	Если НЕ ПустаяСтрока(ИнформацияЭквайринга) Тогда

		ИнформацияПодвала = ИнформацияПодвала
			+ ОбщегоНазначенияКлиентСервер.REPEAT("-", 25) + Символы.ПС
			+ ИнформацияЭквайринга + Символы.ПС;

	КонецЕсли;

КонецПроцедуры

//	LNK 08.10.2019 13:38:19
Функция ПодготовитьСтроку(СтрокаИсточник, Длина = 25)

	СтрокаИсточник  = СтрЗаменить(СтрокаИсточник, Символы.ПС, "");
	СтрокаРезультат = "";

	Пока СтрДлина(СтрокаИсточник) > 0 Цикл

		ПодСтрока = Лев(СтрокаИсточник, Длина);

		СтрокаИсточник = Сред(СтрокаИсточник, Длина + 1);

		СтрокаРезультат = СтрокаРезультат
			+ ?(ПустаяСтрока(СтрокаРезультат), "", Символы.ПС)
			+ ПодСтрока;

	КонецЦикла;

	Возврат СтрокаРезультат;

КонецФункции

Функция ПолучитьШтрихкод(Номенклатура, Упаковка, Знач Штрихкод)

	Если ПустаяСтрока(Штрихкод) Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСправочник.Код КАК Код,
		|	ЕСТЬNULL(ТаблицаРегистра.Штрихкод, """") КАК Штрихкод
		|ИЗ
		|	Справочник.Номенклатура КАК ТаблицаСправочник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК ТаблицаРегистра
		|		ПО (ТаблицаРегистра.Владелец ССЫЛКА Справочник.Номенклатура)
		|			И (ТаблицаРегистра.Упаковка = &Упаковка)
		|			И ТаблицаСправочник.Ссылка = ТаблицаРегистра.Владелец
		|ГДЕ
		|	ТаблицаСправочник.Ссылка = &Номенклатура"
		);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Упаковка", Упаковка);
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда

			Выборка = Результат.Выбрать();
			Выборка.Следующий();

			Если НЕ ПустаяСтрока(Выборка.Штрихкод) Тогда

					Штрихкод = Выборка.Штрихкод;

			Иначе	Штрихкод = Выборка.Код;
			
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат СокрЛП(Штрихкод);

КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ИнициализацияДанныхДляПроведения

// Инициализирует таблицы значений, содержащие данные документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт

	Перем Реквизиты, СуммаБезналичных;

	УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ЧекККМОплата.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &Ссылка
	|	И (НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные))"
	);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);

	Результат = Запрос.Выполнить();

	СуммаБезналичных = 0;

	Если НЕ Результат.Пустой() Тогда

		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СуммаБезналичных = Выборка.Сумма;

		Если НЕ ЗначениеЗаполнено(СуммаБезналичных) Тогда

			СуммаБезналичных = 0;

		КонецЕсли;

	КонецЕсли;

	Запрос = ПолучитьЗапросПроведенияИЗаполнитьРеквизитыШапки(ДокументСсылка, Реквизиты);

	СуммаНаличных = Макс(Реквизиты.СуммаДокумента - СуммаБезналичных, 0);

	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда

		Запрос.УстановитьПараметр("АналитикаХозяйственнойОперации", Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров);
		Запрос.УстановитьПараметр("ЭтоВозврат", Ложь);
		Запрос.УстановитьПараметр("СкладскаяОперация", Перечисления.СкладскиеОперации.ОтгрузкаВРозницу);

	Иначе

		Запрос.УстановитьПараметр("АналитикаХозяйственнойОперации", Реквизиты.АналитикаХозяйственнойОперации);
		Запрос.УстановитьПараметр("ЭтоВозврат"           , Истина);
		Запрос.УстановитьПараметр("СкладскаяОперация", Перечисления.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента);

	КонецЕсли;

	Запрос.УстановитьПараметр("СуммаНаличных"             , СуммаНаличных);
	Запрос.УстановитьПараметр("ФормироватьАналитикуСкидок", ОбменДаннымиВызовСервера.ЭтоГлавныйУзел()
															И  (Реквизиты.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный
															ИЛИ Реквизиты.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый));
	Запрос.УстановитьПараметр("ФормироватьДвижения"       , Реквизиты.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый
														//	И НЕ Запрос.Параметры.ФормироватьАналитикуСкидок
															И НЕ ПланыОбмена.ПоРабочемуМесту.ЭтоРабочееМесто());
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());

//	LNK 08.03.2023 04:46:29
	Запрос.УстановитьПараметр("ЭтоИнтернетМагазин", УчетнаяПолитика.ИнтернетМагазин = Запрос.Параметры.Магазин);

	Запрос.УстановитьПараметр("ФормироватьДвиженияБонусныхБалловНачисление"
		, БонусныеБаллыВызовСервера.ДокументФормируетДвижения("ЧекККМ", УчетнаяПолитика, Реквизиты.ВидОперации, Реквизиты.СтатусЧекаККМ, Реквизиты.ЗаказПокупателя, "Начисление")
	);
	Запрос.УстановитьПараметр("ФормироватьДвиженияБонусныхБалловСписание"
		, БонусныеБаллыВызовСервера.ДокументФормируетДвижения("ЧекККМ", УчетнаяПолитика, Реквизиты.ВидОперации, Реквизиты.СтатусЧекаККМ, Реквизиты.ЗаказПокупателя, "Списание")
	);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(&Магазин КАК Справочник.Магазины) КАК Магазин,
	|	&ВидОперации КАК ВидОперации,
	|	&ЧекККМПродажа КАК ЧекККМПродажа,
	|	&ЗаказПокупателя КАК ЗаказПокупателя,
	|	&ВладелецДисконтнойКарты КАК ВладелецДисконтнойКарты,
	|	&ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	&УслугаБанка КАК УслугаБанка,
	|	&УслугаБанкаПериодПредоставления КАК УслугаБанкаПериодПредоставления,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Количество КАК Количество,
	|	ТабличнаяЧасть.Цена КАК Цена,
	|	ТабличнаяЧасть.Сумма КАК Сумма,
	|	ТабличнаяЧасть.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ТабличнаяЧасть.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ТабличнаяЧасть.СтавкаНДС КАК СтавкаНДС,
	|	ТабличнаяЧасть.СуммаНДС КАК СуммаНДС,
	|	ТабличнаяЧасть.СуммаОкругления КАК СуммаОкругления,
	|	ТабличнаяЧасть.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТабличнаяЧасть.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТабличнаяЧасть.ПричинаРучнойСкидки КАК ПричинаРучнойСкидки,
	|	ТабличнаяЧасть.РегистрацияПродажи КАК РегистрацияПродажи,
	|	ТабличнаяЧасть.Штрихкод КАК Штрихкод,
	|	ТабличнаяЧасть.Склад КАК Склад,
	|	ТабличнаяЧасть.КлючСвязи КАК КлючСвязи,
	|	ТабличнаяЧасть.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|	ТабличнаяЧасть.Продавец КАК Продавец,
	|	ТабличнаяЧасть.ПродажаПодарка КАК ПродажаПодарка,
	|	ТабличнаяЧасть.Упаковка КАК Упаковка,
	|	ТабличнаяЧасть.Маржинальность КАК Маржинальность,
	|	ТабличнаяЧасть.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТабличнаяЧасть.СуммаБонусныхБалловНачислено КАК СуммаБонусныхБалловНачислено,
	|	ТабличнаяЧасть.СуммаБонусныхБалловСписано КАК СуммаБонусныхБалловСписано,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|			ТОГДА 1
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК Знак
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.СтавкаНДС,
	|	ТабличнаяЧасть.КлючСвязи,
	|	ТабличнаяЧасть.КлючСвязиСерийныхНомеров,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7) КАК СтавкаНДС,
	|	7 КАК ПроцентСтавки
	|ПОМЕСТИТЬ СтавкиНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20),
	|	20
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&КассаККМ КАК КассаККМ,
	|	&Период КАК Период,
	|	&СуммаНаличных КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	КОНЕЦ КАК ВидДвижения
	|ГДЕ
	|	&ФормироватьДвижения
	|	И &СуммаНаличных <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	&Ссылка КАК ДокументПродажи,
	|	ТаблицаТовары.Продавец КАК Продавец,
	|	ТаблицаТовары.Маржинальность КАК Маржинальность,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаТовары.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаТовары.Сумма КАК Стоимость,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаТовары.Количество * ТаблицаТовары.Цена / ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ИЛИ ТаблицаТовары.Упаковка.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаТовары.Упаковка.Коэффициент
	|	КОНЕЦ КАК СтоимостьБезСкидок,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаТовары.СуммаНДС КАК НДС,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаТовары.СуммаОкругления КАК СуммаОкругления,
	|	&АналитикаХозяйственнойОперации КАК АналитикаХозяйственнойОперации,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаТовары.СуммаБонусныхБалловНачислено КАК СуммаБонусныхБалловНачислено,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаТовары.СуммаБонусныхБалловСписано КАК СуммаБонусныхБалловСписано,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтавкиНДС КАК СтавкиНДС
	|		ПО ТаблицаТовары.СтавкаНДС = СтавкиНДС.СтавкаНДС
	|ГДЕ
	|	&ФормироватьДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	&ВладелецДисконтнойКарты КАК ВладелецДисконтнойКарты,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаТовары.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаТовары.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * (ТаблицаТовары.СуммаАвтоматическойСкидки + ТаблицаТовары.СуммаРучнойСкидки + ТаблицаТовары.СуммаБонусныхБалловСписано) КАК СуммаСкидки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&ФормироватьДвижения
	|	И НЕ &ВладелецДисконтнойКарты В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМОплата.Ссылка КАК Ссылка,
	|	ЧекККМОплата.НомерСтроки КАК НомерСтроки,
	|	ЧекККМОплата.ВидОплаты КАК ВидОплаты,
	|	ЧекККМОплата.Сумма КАК Сумма,
	|	ЧекККМОплата.ПроцентТорговойУступки КАК ПроцентТорговойУступки,
	|	ЧекККМОплата.СуммаТорговойУступки КАК СуммаТорговойУступки,
	|	ЧекККМОплата.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал
	|ПОМЕСТИТЬ ТаблицаОплата
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ДоговорЭквайринга КАК ДоговорЭквайринга,
	|	&Магазин КАК Магазин,
	|	ТаблицаОплата.ВидОплаты КАК ВидОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА &ЭтоВозврат
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ * ТаблицаОплата.Сумма) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА &ЭтоВозврат
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ * ТаблицаОплата.СуммаТорговойУступки) КАК СуммаТорговойУступки,
	|	ТаблицаОплата.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал
	|ИЗ
	|	ТаблицаОплата КАК ТаблицаОплата
	|ГДЕ
	|	&ФормироватьДвижения
	|	И ТаблицаОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплата.ВидОплаты,
	|	ТаблицаОплата.ЭквайринговыйТерминал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ПродажаПодарка = ИСТИНА
	|				И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.ПродажаПодаркаПодарочныйСертификат)
	|		ИНАЧЕ &АналитикаХозяйственнойОперации
	|	КОНЕЦ КАК АналитикаХозяйственнойОперации,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	&Период КАК Период
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И &ФормироватьДвижения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПодарки.Склад,
	|	ТаблицаПодарки.Номенклатура,
	|	ТаблицаПодарки.Характеристика,
	|	ТаблицаПодарки.Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаПодарки.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.ПередачаПодарочныхСертификатовВПодарок)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.СкидкиПодарки)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ,
	|	ТаблицаПодарки.НомерСтроки,
	|	&Период
	|ИЗ
	|	Документ.ЧекККМ.Подарки КАК ТаблицаПодарки
	|ГДЕ
	|	ТаблицаПодарки.Ссылка = &Ссылка
	|	И &ФормироватьДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура КАК Номенклатура,
	|	ТаблицаСерии.Характеристика КАК Характеристика,
	|	ТаблицаСерии.Серия КАК Серия,
	|	ТаблицаСерии.Количество КАК Количество,
	|	&Магазин КАК Магазин,
	|	&СкладскаяОперация КАК СкладскаяОперация,
	|	&Ссылка КАК Документ,
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ТаблицаСерии.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ЧекККМ.Серии КАК ТаблицаСерии
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаСерии.Количество <> 0
	|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И &ФормироватьДвижения
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки" + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
		
	Запрос.Текст = Запрос.Текст + ТекстЗапросаТаблицаСерийныхНомеров();
	Запрос.Текст = Запрос.Текст + ТекстЗапросаТаблицаПродажПоЧекамИСкидкамНаценкам();	// -HVOYA. 17.08.2016 9:38:37, Львова Е.А.
	Запрос.Текст = Запрос.Текст + ТекстЗапросаТаблицаПерсональныеПродажи();				//-HVOYA YURA G. 30.09.2016 12:59:12
	
//	LNK 22.08.2017 16:00:30
	Запрос.Текст = Запрос.Текст
		+ ТекстЗапросаТаблицаТоварыЗастрахованные()
		+ ТекстЗапросаТаблицаДоговорыСтрахованияОплаченные()
		+ ТекстЗапросаТаблицаЛимитыРучныхСкидокМагазины()
		+ ТекстЗапросаТаблицаЗаказыПокупателей()
		+ ТекстЗапросаТаблицаПродажиПоЗаказамПокупателей()
		+ ТекстЗапросаТаблицаСостоянияСерийныхНомеров()
		+ ТекстЗапросаТаблицаПродажаПоДисконтнымКартамСкидка()
		+ ТекстЗапросаТаблицаБонусныеБаллы()
		+ ТекстЗапросаРеализацияЗаказовПокупателей();

	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;

	ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваККМ"      , Результат[ 2].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаПродажи"                  , Результат[ 3].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнымКартам", Результат[ 4].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоПлатежнымКартам" , Результат[ 6].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаТоварыНаСкладах"          , Результат[ 7].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаТоварыНаМагазинах"		  , Результат[ 7].Выгрузить());	//	LNK 31.08.2021 13:07:46
	ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерийТоваров"     , Результат[ 8].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаСерийныхНомеров"          , Результат[14].Выгрузить());

	ТаблицыДляДвижений.Вставить("ТаблицаПродажПоСкидкамНаценкам"  , Результат[17].Выгрузить());		// +HVOYA. 16.08.2016 16:09:35, Львова Е.А.
	ТаблицыДляДвижений.Вставить("ТаблицаПродажПоЧекам"      	  , Результат[18].Выгрузить());		// -HVOYA. 16.08.2016 16:09:39, Львова Е.А.
	ТаблицыДляДвижений.Вставить("ТаблицаПерсональныеПродажиПродавцов" , Результат[19].Выгрузить());	// -HVOYA YURA G. 30.09.2016 12:59:44
//	LNK 22.08.2017 16:00:45	
	ТаблицыДляДвижений.Вставить("ТаблицаТоварыЗастрахованные"         , Результат[20].Выгрузить());
//	LNK 25.08.2017 15:50:19
	ТаблицыДляДвижений.Вставить("ТаблицаДоговорыСтрахованияОплаченные", Результат[21].Выгрузить());
//	LNK 31.08.2017 13:35:17
	ТаблицыДляДвижений.Вставить("ТаблицаЛимитыРучныхСкидокМагазины"   , Результат[22].Выгрузить());
//	LNK 03.10.2017 12:12:23
	ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПокупателей"            , Результат[24].Выгрузить());
//	LNK 13.12.2017 11:33:07
	ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоЗаказамПокупателей"  , Результат[25].Выгрузить());
//	LNK 07.02.2020 11:02:10
	ТаблицыДляДвижений.Вставить("ТаблицаСостоянияСерийныхНомеров"     , Результат[31].Выгрузить());
//	Бакан 17.03.2020
	ТаблицыДляДвижений.Вставить("ТаблицаДанныеДляНН", ПолучитьТабДляНН(ДокументСсылка));
//	Сичкаренко 10.12.2020
	ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнымКартамСкидка", Результат[34].Выгрузить());

	ТаблицыДляДвижений.Вставить("ТаблицаБонусныеБаллы"			, Результат[39].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаБонусныеБаллыВРезерве"	, Результат[40].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаСписанныеБонусныеБаллы"	, Результат[41].Выгрузить());	//	LNK 26.09.2021 18:22:39

	ТаблицыДляДвижений.Вставить("ТаблицаРеализацияЗаказовПокупателей", Результат[42].Выгрузить());

	ТаблицыДляДвижений.ТаблицаТоварыНаМагазинах.Колонки.Удалить("Склад");	//	LNK 31.08.2021 13:07:46
	ТаблицыДляДвижений.ТаблицаТоварыНаМагазинах.Колонки.Вставить(0, "Магазин", Новый ОписаниеТипов("СправочникСсылка.Магазины"));
	ТаблицыДляДвижений.ТаблицаТоварыНаМагазинах.ЗаполнитьЗначения(Запрос.Параметры.Магазин, "Магазин");

	ТаблицыДляДвижений.Вставить("РезультатыЗапроса", Результат);

КонецПроцедуры

//Функция формирует текст запроса по серийным номерам
//Возвращаемое значение: ТекстЗапроса - Строка
Функция ТекстЗапросаТаблицаСерийныхНомеров()
	
	ТекстЗапроса = Символы.ПС +
	"ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК Номенклатура,
	|	Товары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|	Товары.ПродажаПодарка КАК ПродажаПодарка,
	|	Товары.Склад КАК Склад
	|ПОМЕСТИТЬ ТабТовары
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
	|		ПО Товары.Номенклатура = ТаблицаСправочник.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И &ПробитыйИлиАрхивный = ИСТИНА
	|	И ТаблицаСправочник.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И ТаблицаСправочник.ИспользоватьСерийныеНомера
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязиСерийныхНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СерийныеНомера.СерийныйНомер КАК Справочник.СерийныеНомера) КАК СерийныйНомер,
	|	СерийныеНомера.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров
	|ПОМЕСТИТЬ ТабСерийныеНомера
	|ИЗ
	|	Документ.ЧекККМ.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	&ПробитыйИлиАрхивный = ИСТИНА
	|	И СерийныеНомера.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязиСерийныхНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ТабСерийныеНомера.СерийныйНомер КАК СерийныйНомер,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА NULL
	|		ИНАЧЕ Ведущая.Склад
	|	КОНЕЦ КАК Отправитель,
	|	Ведущая.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Ведущая.ПродажаПодарка = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.ПродажаПодаркаПодарочныйСертификат)
	|		ИНАЧЕ &АналитикаХозяйственнойОперации
	|	КОНЕЦ КАК АналитикаХозяйственнойОперации,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА Ведущая.Склад
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Получатель
	|ПОМЕСТИТЬ ТаблицаДвижений
	|ИЗ
	|	ТабТовары КАК Ведущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабСерийныеНомера КАК ТабСерийныеНомера
	|		ПО Ведущая.КлючСвязиСерийныхНомеров = ТабСерийныеНомера.КлючСвязиСерийныхНомеров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	ТаблицаПодарки.СерийныйНомер,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА NULL
	|		ИНАЧЕ ТаблицаПодарки.Склад
	|	КОНЕЦ,
	|	ТаблицаПодарки.Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.ПередачаПодарочныхСертификатовВПодарок),
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА ТаблицаПодарки.Склад
	|		ИНАЧЕ NULL
	|	КОНЕЦ
	|ИЗ
	|	Документ.ЧекККМ.Подарки КАК ТаблицаПодарки
	|ГДЕ
	|	ТаблицаПодарки.Ссылка = &Ссылка
	|	И &ПробитыйИлиАрхивный = ИСТИНА
	|	И ТаблицаПодарки.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И ТаблицаПодарки.Номенклатура.ИспользоватьСерийныеНомера
	|	И НЕ ТаблицаПодарки.СерийныйНомер = ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	ПогашениеСертификатов.СерийныйНомер,
	|	NULL,
	|	ПогашениеСертификатов.ПодарочныйСертификат,
	|	ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.ПогашениеПодарочныхСертификатов),
	|	&СкладПродажи
	|ИЗ
	|	Документ.ЧекККМ.ПогашениеПодарочныхСертификатов КАК ПогашениеСертификатов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
	|		ПО ПогашениеСертификатов.ПодарочныйСертификат = ТаблицаСправочник.Ссылка
	|ГДЕ
	|	ПогашениеСертификатов.Ссылка = &Ссылка
	|	И &ФормироватьДвижения = ИСТИНА
	|	И ТаблицаСправочник.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И ТаблицаСправочник.ИспользоватьСерийныеНомера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТабТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТабСерийныеНомера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДвижений.Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ТаблицаДвижений.СерийныйНомер КАК СерийныйНомер,
	|	ТаблицаДвижений.Отправитель КАК Отправитель,
	|	ТаблицаДвижений.Номенклатура КАК Номенклатура,
	|	ТаблицаДвижений.АналитикаХозяйственнойОперации КАК АналитикаХозяйственнойОперации,
	|	&Организация КАК Организация,
	|	ТаблицаДвижений.Получатель КАК Получатель,
	|	&Ссылка КАК ЧекККМ
	|ИЗ
	|	ТаблицаДвижений КАК ТаблицаДвижений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДвижений" + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

//	LNK 26.01.2017 13:10:06
//Функция формирует текст запроса по чекам и скидкам-наценкам
//Возвращаемое значение: ТекстЗапроса - Строка
Функция ТекстЗапросаТаблицаПродажПоЧекамИСкидкамНаценкам()
	
	ТекстЗапроса = Символы.ПС +
	"ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК Ссылка,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.Сумма КАК СуммаСкидки,
	|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	СкидкиНаценки.ПодарокПозиция КАК ПодарокПозиция,
	|	СкидкиНаценки.ПодарокКоличество КАК ПодарокКоличество
	|ПОМЕСТИТЬ СкидкиНаценки
	|ИЗ
	|	Документ.ЧекККМ.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка = &Ссылка
	|	И &ФормироватьАналитикуСкидок = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ТаблицаВедущая.Ссылка КАК Регистратор,
	|	ИСТИНА КАК Активность,
	|	ТаблицаВедущая.Магазин КАК Магазин,
	|	ТаблицаВедущая.Продавец КАК Продавец,
	|	ВЫБОР
	|		КОГДА ТаблицаВедущая.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ТаблицаВедущая.ЧекККМПродажа
	|		ИНАЧЕ ТаблицаВедущая.Ссылка
	|	КОНЕЦ КАК ДокументПродажи,
	|	ТаблицаВедущая.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ТаблицаВедущая.ВладелецДисконтнойКарты КАК ВладелецДисконтнойКарты,
	|	ТаблицаВедущая.УслугаБанка КАК УслугаБанка,
	|	ТаблицаВедущая.УслугаБанкаПериодПредоставления КАК УслугаБанкаПериодПредоставления,
	|	ВЫБОР
	|		КОГДА ТаблицаСкидки.ПодарокПозиция = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ТаблицаВедущая.Номенклатура
	|		ИНАЧЕ ТаблицаСкидки.ПодарокПозиция
	|	КОНЕЦ КАК Номенклатура,
	|	ТаблицаСкидки.СкидкаНаценка КАК АвтоматическаяСкидкаНаценка,
	|	ТаблицаВедущая.ПричинаРучнойСкидки КАК РучнаяСкидкаНаценка,
	|	СУММА((ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ТаблицаСкидки.ПодарокКоличество = 0
	|					ТОГДА ТаблицаВедущая.Количество * ТаблицаСкидки.Коэффициент
	|				ИНАЧЕ ТаблицаСкидки.ПодарокКоличество
	|			КОНЕЦ КАК ЧИСЛО(15, 3))) * ВЫБОР
	|			КОГДА ТаблицаВедущая.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Количество,
	|	СУММА((ВЫРАЗИТЬ(ТаблицаВедущая.СуммаАвтоматическойСкидки * ТаблицаСкидки.Коэффициент КАК ЧИСЛО(15, 2))) * ВЫБОР
	|			КОГДА ТаблицаВедущая.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаАвтоматическойСкидки,
	|	СУММА((ВЫРАЗИТЬ(ТаблицаВедущая.СуммаРучнойСкидки * ТаблицаСкидки.Коэффициент КАК ЧИСЛО(15, 2))) * ВЫБОР
	|			КОГДА ТаблицаВедущая.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаРучнойСкидки,
	|	СУММА((ВЫРАЗИТЬ((ТаблицаВедущая.Сумма + ТаблицаВедущая.СуммаАвтоматическойСкидки + ТаблицаВедущая.СуммаРучнойСкидки) * ТаблицаСкидки.Коэффициент КАК ЧИСЛО(15, 2))) * ВЫБОР
	|			КОГДА ТаблицаВедущая.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаБезСкидки,
	|	СУММА((ВЫРАЗИТЬ(ТаблицаВедущая.Сумма * ТаблицаСкидки.Коэффициент КАК ЧИСЛО(15, 2))) * ВЫБОР
	|			КОГДА ТаблицаВедущая.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПродажи,
	|	МИНИМУМ(ТаблицаВедущая.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаВедущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СкидкиНаценки.Ссылка КАК Ссылка,
	|			СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|			СкидкиНаценки.СуммаСкидки КАК СуммаСкидки,
	|			ВЫБОР
	|				КОГДА СкидкиИтоги.СуммаСкидкиИтог = 0
	|					ТОГДА 0
	|				ИНАЧЕ СкидкиНаценки.СуммаСкидки / СкидкиИтоги.СуммаСкидкиИтог
	|			КОНЕЦ КАК Коэффициент,
	|			СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|			СкидкиНаценки.ПодарокПозиция КАК ПодарокПозиция,
	|			СкидкиНаценки.ПодарокКоличество КАК ПодарокКоличество
	|		ИЗ
	|			СкидкиНаценки КАК СкидкиНаценки
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					СкидкиНаценки.Ссылка КАК Ссылка,
	|					СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|					СУММА(СкидкиНаценки.СуммаСкидки) КАК СуммаСкидкиИтог
	|				ИЗ
	|					СкидкиНаценки КАК СкидкиНаценки
	|				
	|				СГРУППИРОВАТЬ ПО
	|					СкидкиНаценки.Ссылка,
	|					СкидкиНаценки.КлючСвязи) КАК СкидкиИтоги
	|				ПО СкидкиНаценки.Ссылка = СкидкиИтоги.Ссылка
	|					И СкидкиНаценки.КлючСвязи = СкидкиИтоги.КлючСвязи) КАК ТаблицаСкидки
	|		ПО ТаблицаВедущая.Ссылка = ТаблицаСкидки.Ссылка
	|			И ТаблицаВедущая.КлючСвязи = ТаблицаСкидки.КлючСвязи
	|ГДЕ
	|	&ФормироватьАналитикуСкидок = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВедущая.Ссылка,
	|	ТаблицаВедущая.Магазин,
	|	ТаблицаВедущая.Продавец,
	|	ТаблицаВедущая.ДисконтнаяКарта,
	|	ТаблицаВедущая.ВладелецДисконтнойКарты,
	|	ТаблицаВедущая.ПричинаРучнойСкидки,
	|	ТаблицаВедущая.УслугаБанка,
	|	ТаблицаВедущая.УслугаБанкаПериодПредоставления,
	|	ВЫБОР
	|		КОГДА ТаблицаВедущая.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ТаблицаВедущая.ЧекККМПродажа
	|		ИНАЧЕ ТаблицаВедущая.Ссылка
	|	КОНЕЦ,
	|	ТаблицаСкидки.СкидкаНаценка,
	|	ВЫБОР
	|		КОГДА ТаблицаСкидки.ПодарокПозиция = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ТаблицаВедущая.Номенклатура
	|		ИНАЧЕ ТаблицаСкидки.ПодарокПозиция
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаВедущая.СуммаАвтоматическойСкидки + ТаблицаВедущая.СуммаРучнойСкидки) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ТаблицаТовары.Ссылка КАК Регистратор,
	|	ИСТИНА КАК Активность,
	|	ТаблицаТовары.Магазин КАК Магазин,
	|	ТаблицаТовары.Продавец КАК Продавец,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ТаблицаТовары.ЧекККМПродажа
	|		ИНАЧЕ ТаблицаТовары.Ссылка
	|	КОНЕЦ КАК ДокументПродажи,
	|	ТаблицаТовары.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ТаблицаТовары.ВладелецДисконтнойКарты КАК ВладелецДисконтнойКарты,
	|	ТаблицаТовары.УслугаБанка КАК УслугаБанка,
	|	ТаблицаТовары.УслугаБанкаПериодПредоставления КАК УслугаБанкаПериодПредоставления,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаТовары.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ * ТаблицаТовары.Количество) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаТовары.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ * ТаблицаТовары.Сумма) КАК СуммаПродажи,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаТовары.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ * (ТаблицаТовары.СуммаАвтоматическойСкидки + ТаблицаТовары.СуммаРучнойСкидки)) КАК СуммаВсехСкидок,
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&ФормироватьАналитикуСкидок = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Продавец,
	|	ТаблицаТовары.Ссылка.ЧекККМПродажа,
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Магазин,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ТаблицаТовары.ЧекККМПродажа
	|		ИНАЧЕ ТаблицаТовары.Ссылка
	|	КОНЕЦ,
	|	ТаблицаТовары.ДисконтнаяКарта,
	|	ТаблицаТовары.ВладелецДисконтнойКарты,
	|	ТаблицаТовары.УслугаБанка,
	|	ТаблицаТовары.УслугаБанкаПериодПредоставления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки" + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстЗапроса;
	
КонецФункции

////+HVOYA YURA G. 29.09.2016 17:10:29
////Возвращаемое значение: ТекстЗапроса - Строка
Функция ТекстЗапросаТаблицаПерсональныеПродажи()
	
	ТекстЗапроса = Символы.ПС +
	"ВЫБРАТЬ
	|	&Магазин КАК Магазин,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА ЧекККМТовары.Ссылка.ЧекККМПродажа
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ КАК ДокументПродажи,
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЧекККМТовары.Продавец КАК Продавец,
	|	ЧекККМТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ВЫБОР
	|			КОГДА &ЭтоВозврат
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ * ЧекККМТовары.Количество) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА &ЭтоВозврат
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ * ЧекККМТовары.Сумма) КАК СуммаПродажи
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЛОЖЬ	//	LNK 05.02.2020 13:08:12
	|	И ЧекККМТовары.Ссылка = &Ссылка
	|	И &ФормироватьДвижения = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Ссылка.ЧекККМПродажа,
	|	ЧекККМТовары.Продавец" + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	 
	Возврат ТекстЗапроса;

КонецФункции
//-HVOYA YURA G. 30.09.2016 13:54:28

//	LNK 22.08.2017 16:01:23
Функция ТекстЗапросаТаблицаТоварыЗастрахованные()

	ТекстЗапроса = Символы.ПС +
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Ссылка КАК ДокументПродажи,
	|	ТаблицаТовары.Количество КАК Количество,
	|	&Магазин КАК Магазин
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ЛОЖЬ	//	LNK 05.02.2020 13:08:12
	|	И &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|	И &ДоговорСтрахования = ЗНАЧЕНИЕ(Документ.ДоговорСтрахования.ПустаяСсылка)
	|	И НЕ ТаблицаТовары.Номенклатура = &УслугаСтрахования
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки" + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаТаблицаТоварыЗастрахованные()

//	LNK 25.08.2017 15:47:51
Функция ТекстЗапросаТаблицаДоговорыСтрахованияОплаченные()

	ТекстЗапроса = Символы.ПС +
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаСтраховка.Номенклатура КАК Номенклатура,
	|	&ДоговорСтрахования КАК ДоговорСтрахования,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	&Магазин КАК Магазин
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорСтрахования КАК ТаблицаСтраховка
	|		ПО (ТаблицаСтраховка.Ссылка = &ДоговорСтрахования)
	|ГДЕ
	|	&ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|	И ТаблицаТовары.НомерСтроки = 1
	|	И &ДоговорСтрахования <> ЗНАЧЕНИЕ(Документ.ДоговорСтрахования.ПустаяСсылка)" + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаТаблицаТоварыЗастрахованные()

//	LNK 31.08.2017 13:34:46
Функция ТекстЗапросаТаблицаЛимитыРучныхСкидокМагазины()

	ТекстЗапроса = Символы.ПС +
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) КАК ПериодЛимита,
	|	ТаблицаТовары.ПричинаРучнойСкидки КАК ПричинаРучнойСкидки,
	|	ТаблицаТовары.Магазин КАК Магазин,
	|	СУММА(ТаблицаТовары.СуммаРучнойСкидки) КАК Сумма
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛимитыРучныхСкидокУстановлены.СрезПоследних(
	|				,
	|				ПериодЛимита = НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|					И (ПричинаРучнойСкидки, ОбособленноеПодразделениеОрганизации) В
	|						(ВЫБРАТЬ
	|							ТаблицаТовары.ПричинаРучнойСкидки,
	|							ВЫРАЗИТЬ(ТаблицаТовары.Магазин КАК Справочник.Магазины).ОбособленноеПодразделениеОрганизации КАК ОбособленноеПодразделениеОрганизации
	|						ИЗ
	|							ТаблицаТовары)) КАК ФильтрЛимитов
	|		ПО ТаблицаТовары.ПричинаРучнойСкидки = ФильтрЛимитов.ПричинаРучнойСкидки
	|			И (ФильтрЛимитов.ПериодЛимита = НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ))
	|			И (ВЫРАЗИТЬ(ТаблицаТовары.Магазин КАК Справочник.Магазины).ОбособленноеПодразделениеОрганизации = ФильтрЛимитов.ОбособленноеПодразделениеОрганизации)
	|ГДЕ
	|	&ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|	И &ИспользоватьЛимитыРучныхСкидок = ИСТИНА
	|	И НЕ ТаблицаТовары.ПричинаРучнойСкидки = ЗНАЧЕНИЕ(Справочник.ПричиныРучнойСкидки.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.ПричинаРучнойСкидки,
	|	ТаблицаТовары.Магазин" + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаТаблицаТоварыЗастрахованные()

//	LNK 03.10.2017 11:47:38
Функция ТекстЗапросаТаблицаЗаказыПокупателей()

	ТекстЗапроса = Символы.ПС +
	"ВЫБРАТЬ
	|	ТоварыЗаказанные.НомерСтроки КАК НомерСтроки,
	|	ТоварыЗаказанные.Номенклатура КАК Номенклатура,
	|	ТоварыЗаказанные.Характеристика КАК Характеристика,
	|	ТоварыЗаказанные.Количество КАК Количество,
	|	ТоварыЗаказанные.Сумма + ВЫБОР
	|		КОГДА ТоварыЗаказанные.Ссылка.УчитыватьНДС
	|				И НЕ ТоварыЗаказанные.Ссылка.ЦенаВключаетНДС
	|			ТОГДА ТоварыЗаказанные.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ТоварыЗаказанные.СуммаНДС КАК СуммаНДС,
	|	ТоварыЗаказанные.Продавец КАК Продавец,
	|	ТоварыЗаказанные.Резервировать КАК Резервировать
	|ПОМЕСТИТЬ ТоварыЗаказанные
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ТоварыЗаказанные
	|ГДЕ
	|	&ФормироватьДвижения = ИСТИНА
	|	И НЕ &РазрешитьПрямуюИнтеграциюMagento = ИСТИНА
	|	И НЕ &ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И ТоварыЗаказанные.Ссылка = &ЗаказПокупателя
	|	И ТоварыЗаказанные.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	РезервТовары.НомерСтроки КАК НомерСтроки,
	|	&Магазин КАК Магазин,
	|	&ЗаказПокупателя КАК Заказ,
	|	РезервТовары.Номенклатура КАК Номенклатура,
	|	РезервТовары.Характеристика КАК Характеристика,
	|	РезервТовары.Количество * ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|			ТОГДА 1
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	ТоварыЗаказанные КАК РезервТовары
	|ГДЕ
	|	&ФормироватьДвижения
	|	И НЕ &РазрешитьПрямуюИнтеграциюMagento = ИСТИНА
	|	И &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|	И РезервТовары.Резервировать
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки" + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";	//	при возврате в резерв НЕ возвращаем - запрос просто на всякий случай.

	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаТаблицаЗаказыПокупателей()

//	LNK 13.12.2017 11:32:12
Функция ТекстЗапросаТаблицаПродажиПоЗаказамПокупателей()

	ТекстЗапроса = Символы.ПС +
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	&Магазин КАК Магазин,
	|	&ЗаказПокупателя КАК Заказ,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	&Ссылка КАК ДокументПродажи,
	|	ТабличнаяЧасть.Продавец КАК Продавец,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Продавец = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|				И (ТоварыВРезерве.Номенклатура ЕСТЬ NULL
	|					ИЛИ ТабличнаяЧасть.Продавец = ТоварыВРезерве.Продавец)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК МотивацияНачислена,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОтгрузкиПоЗаказуПокупателя.Продажа) КАК ВидОтгрузки,
	|	ВЫБОР
	|		КОГДА ТоварыВРезерве.Номенклатура ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СоставЗаказа,
	|	ТабличнаяЧасть.Количество * ТабличнаяЧасть.Знак КАК Количество,
	|	ТабличнаяЧасть.Сумма * ТабличнаяЧасть.Знак КАК Стоимость,
	|	ТабличнаяЧасть.Сумма * ТабличнаяЧасть.Знак КАК СтоимостьБезСкидок,
	|	ТабличнаяЧасть.СуммаНДС * ТабличнаяЧасть.Знак КАК НДС
	|ИЗ
	|	ТаблицаТовары КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварыЗаказанные.Номенклатура КАК Номенклатура,
	|			ТоварыЗаказанные.Характеристика КАК Характеристика,
	|			ТоварыЗаказанные.Продавец КАК Продавец,
	|			ЗНАЧЕНИЕ(Перечисление.ВидыОтгрузкиПоЗаказуПокупателя.Продажа) КАК ВидОтгрузки,
	|			СУММА(ТоварыЗаказанные.Количество) КАК Количество,
	|			СУММА(ТоварыЗаказанные.Сумма) КАК Сумма,
	|			СУММА(ТоварыЗаказанные.СуммаНДС) КАК СуммаНДС
	|		ИЗ
	|			ТоварыЗаказанные КАК ТоварыЗаказанные
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТоварыЗаказанные.Номенклатура,
	|			ТоварыЗаказанные.Характеристика,
	|			ТоварыЗаказанные.Продавец) КАК ТоварыВРезерве
	|		ПО ТабличнаяЧасть.Номенклатура = ТоварыВРезерве.Номенклатура
	|			И ТабличнаяЧасть.Характеристика = ТоварыВРезерве.Характеристика
	|ГДЕ
	|	&ФормироватьДвижения
	|	И НЕ &ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И ТоварыВРезерве.Номенклатура ЕСТЬ НЕ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки" + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстЗапроса;

КонецФункции

//	LNK 07.02.2020 10:08:05
Функция ТекстЗапросаТаблицаСостоянияСерийныхНомеров()

	ТекстЗапроса = Символы.ПС +
	"ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК СерийныйНомер,
	|	ТаблицаТовары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|	ТаблицаСправочник.ТипСрокаДействия КАК ТипСрокаДействия,
	|	ТаблицаСправочник.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	ТаблицаСправочник.Периодичность КАК Периодичность,
	|	ТаблицаСправочник.КоличествоПериодовДействия КАК КоличествоПериодовДействия
	|ПОМЕСТИТЬ ТабТовары
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
	|		ПО ТаблицаТовары.Номенклатура = ТаблицаСправочник.Ссылка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ПробитыйИлиАрхивный = ИСТИНА
	|	И ТаблицаСправочник.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И ТаблицаСправочник.ИспользоватьСерийныеНомера
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка,
	|	ТаблицаПодарки.СерийныйНомер,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаСправочник.ТипСрокаДействия,
	|	ТаблицаСправочник.ДатаОкончанияДействия,
	|	ТаблицаСправочник.Периодичность,
	|	ТаблицаСправочник.КоличествоПериодовДействия
	|ИЗ
	|	Документ.ЧекККМ.Подарки КАК ТаблицаПодарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
	|		ПО ТаблицаПодарки.Номенклатура = ТаблицаСправочник.Ссылка
	|ГДЕ
	|	ТаблицаПодарки.Ссылка = &Ссылка
	|	И &ПробитыйИлиАрхивный = ИСТИНА
	|	И НЕ ТаблицаПодарки.СерийныйНомер = ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)
	|	И ТаблицаСправочник.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И ТаблицаСправочник.ИспользоватьСерийныеНомера
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязиСерийныхНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СерийныеНомера.СерийныйНомер КАК Справочник.СерийныеНомера) КАК СерийныйНомер,
	|	СерийныеНомера.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров
	|ПОМЕСТИТЬ ТабСерийныеНомера
	|ИЗ
	|	Документ.ЧекККМ.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	&ПробитыйИлиАрхивный = ИСТИНА
	|	И СерийныеНомера.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязиСерийныхНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	Ведущая.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Ведущая.СерийныйНомер = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаСерийныеНомера.СерийныйНомер
	|		ИНАЧЕ Ведущая.СерийныйНомер
	|	КОНЕЦ КАК СерийныйНомер,
	|	&Магазин КАК Магазин,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСерийныхНомеров.Возврат)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияСерийныхНомеров.Активен)
	|	КОНЕЦ КАК Состояние,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА NULL
	|		КОГДА Ведущая.ТипСрокаДействия = ЗНАЧЕНИЕ(Перечисление.СрокДействияПодарочныхСертификатов.БезОграниченияСрока)
	|			ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
	|		КОГДА Ведущая.ТипСрокаДействия = ЗНАЧЕНИЕ(Перечисление.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи)
	|			ТОГДА ВЫБОР
	|					КОГДА Ведущая.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|						ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, Ведущая.КоличествоПериодовДействия)
	|					КОГДА Ведущая.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|						ТОГДА ДОБАВИТЬКДАТЕ(&Период, НЕДЕЛЯ, Ведущая.КоличествоПериодовДействия)
	|					КОГДА Ведущая.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|						ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕКАДА, Ведущая.КоличествоПериодовДействия)
	|					КОГДА Ведущая.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|						ТОГДА ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, Ведущая.КоличествоПериодовДействия)
	|					КОГДА Ведущая.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|						ТОГДА ДОБАВИТЬКДАТЕ(&Период, КВАРТАЛ, Ведущая.КоличествоПериодовДействия)
	|					КОГДА Ведущая.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|						ТОГДА ДОБАВИТЬКДАТЕ(&Период, ПОЛУГОДИЕ, Ведущая.КоличествоПериодовДействия)
	|					ИНАЧЕ ДОБАВИТЬКДАТЕ(&Период, ГОД, Ведущая.КоличествоПериодовДействия)
	|				КОНЕЦ
	|		ИНАЧЕ Ведущая.ДатаОкончанияДействия
	|	КОНЕЦ КАК ДатаОкончанияДействия,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА NULL
	|		ИНАЧЕ Ведущая.ТипСрокаДействия
	|	КОНЕЦ КАК ТипСрокаДействия,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА NULL
	|		ИНАЧЕ Ведущая.Периодичность
	|	КОНЕЦ КАК Периодичность,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА NULL
	|		ИНАЧЕ Ведущая.КоличествоПериодовДействия
	|	КОНЕЦ КАК КоличествоПериодовДействия,
	|	ВЫБОР
	|		КОГДА Ведущая.КлючСвязиСерийныхНомеров = НЕОПРЕДЕЛЕНО
	|			ТОГДА -1
	|		ИНАЧЕ Ведущая.КлючСвязиСерийныхНомеров
	|	КОНЕЦ КАК КлючПорядка
	|ПОМЕСТИТЬ ТаблицаДвижений
	|ИЗ
	|	ТабТовары КАК Ведущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабСерийныеНомера КАК ТаблицаСерийныеНомера
	|		ПО (Ведущая.КлючСвязиСерийныхНомеров = ТаблицаСерийныеНомера.КлючСвязиСерийныхНомеров
	|				ИЛИ Ведущая.КлючСвязиСерийныхНомеров = НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	ПогашениеСертификатов.ПодарочныйСертификат,
	|	ПогашениеСертификатов.СерийныйНомер,
	|	&Магазин,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСерийныхНомеров.Возврат)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияСерийныхНомеров.Погашен)
	|	КОНЕЦ,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	-2
	|ИЗ
	|	Документ.ЧекККМ.ПогашениеПодарочныхСертификатов КАК ПогашениеСертификатов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
	|		ПО ПогашениеСертификатов.ПодарочныйСертификат = ТаблицаСправочник.Ссылка
	|ГДЕ
	|	ПогашениеСертификатов.Ссылка = &Ссылка
	|	И &ФормироватьДвижения = ИСТИНА
	|	И ТаблицаСправочник.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И ТаблицаСправочник.ИспользоватьСерийныеНомера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТабТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТабСерийныеНомера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДвижений.Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ТаблицаДвижений.СерийныйНомер КАК СерийныйНомер,
	|	ТаблицаДвижений.Номенклатура КАК Номенклатура,
	|	ТаблицаДвижений.Магазин КАК Магазин,
	|	&Организация КАК Организация,
	|	ТаблицаДвижений.Состояние КАК Состояние,
	|	ТаблицаДвижений.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	ТаблицаДвижений.ТипСрокаДействия КАК ТипСрокаДействия,
	|	ТаблицаДвижений.Периодичность КАК Периодичность,
	|	ТаблицаДвижений.КоличествоПериодовДействия КАК КоличествоПериодовДействия,
	|	ТаблицаДвижений.КлючПорядка КАК КлючПорядка
	|ИЗ
	|	ТаблицаДвижений КАК ТаблицаДвижений
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДвижений" + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаПродажаПоДисконтнымКартамСкидка()

	ТекстЗапроса = Символы.ПС +
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка КАК Ссылка,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.КлючСвязи КАК КлючСвязи,
	|	ТабличнаяЧасть.СкидкаНаценка КАК СкидкаНаценка,
	|	ТабличнаяЧасть.Сумма КАК Сумма,
	|	ТабличнаяЧасть.ПодарокПозиция КАК ПодарокПозиция,
	|	ТабличнаяЧасть.ПодарокКоличество КАК ПодарокКоличество
	|ПОМЕСТИТЬ ТаблицаСкидкиНаценки
	|ИЗ
	|	Документ.ЧекККМ.СкидкиНаценки КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И НЕ ТабличнаяЧасть.СкидкаНаценка.ПрограммаЛояльности = ЗНАЧЕНИЕ(Справочник.ПрограммыЛояльности.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	&ВладелецДисконтнойКарты КАК ВладелецДисконтнойКарты,
	|	ВЫБОР
	|		КОГДА ТаблицаСкидкиНаценки.ПодарокПозиция = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.Номенклатура
	|		ИНАЧЕ ТаблицаСкидкиНаценки.ПодарокПозиция
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаСкидкиНаценки.ПодарокПозиция = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ИЛИ ТаблицаТовары.Номенклатура = ТаблицаСкидкиНаценки.ПодарокПозиция
	|			ТОГДА ТаблицаТовары.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаСкидкиНаценки.Сумма КАК СуммаСкидки,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ТаблицаСкидкиНаценки.ПодарокПозиция = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ИЛИ ТаблицаСкидкиНаценки.ПодарокКоличество = 0
	|			ТОГДА ТаблицаТовары.Количество
	|		ИНАЧЕ ТаблицаСкидкиНаценки.ПодарокКоличество
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСкидкиНаценки КАК ТаблицаСкидкиНаценки
	|		ПО ТаблицаТовары.КлючСвязи = ТаблицаСкидкиНаценки.КлючСвязи
	|ГДЕ
	|	НЕ &ВладелецДисконтнойКарты В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаСкидкиНаценки" + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаБонусныеБаллы()

	ТекстЗапроса = Символы.ПС +
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	&ВладелецДисконтнойКарты КАК Контрагент,
	|	ТабличнаяЧасть.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТабличнаяЧасть.ДатаНачисления КАК ДатаНачисления,
	|	ТабличнаяЧасть.ДатаСписания КАК ДатаСписания,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ВЫБОР
	|					КОГДА &ЗаказПокупателяЗаполнен = ИСТИНА
	|						ТОГДА &ЗаказПокупателя
	|					ИНАЧЕ ВЫРАЗИТЬ(&ЧекККМПродажа КАК Документ.ЧекККМ)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
	|	КОНЕЦ КАК ДокументПродажи,
	|	&ВидОперации КАК ВидОперацииДокумента,
	|	ТабличнаяЧасть.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов
	|ПОМЕСТИТЬ ТаблицаБонусыНачисление
	|ИЗ
	|	Документ.ЧекККМ.НачислениеБонусныхБаллов КАК ТабличнаяЧасть
	|ГДЕ
	|	&ФормироватьДвиженияБонусныхБалловНачисление
	|	И ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(&ВладелецДисконтнойКарты) = ТИП(Справочник.Контрагенты)
	|					И НЕ &ВладелецДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И НЕ ТабличнаяЧасть.СуммаБонусныхБаллов = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаНачисление.ДатаНачисления = НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	|			ТОГДА ВЫБОР
	|					КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|						ТОГДА &Период
	|					ИНАЧЕ ДОБАВИТЬКДАТЕ(&Период, ЧАС, 1)
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаНачисление.ДатаНачисления
	|	КОНЕЦ КАК Период,
	|	ТаблицаНачисление.Регистратор КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаНачисление.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНачисление.Контрагент КАК Контрагент,
	|	ТаблицаНачисление.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТаблицаНачисление.СуммаБонусныхБаллов * ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СуммаБонусныхБаллов,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Возврат)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Начисление)
	|	КОНЕЦ КАК ВидОперации,
	|	ТаблицаНачисление.ВидОперацииДокумента КАК ВидОперацииДокумента,
	|	ТаблицаНачисление.ДатаНачисления КАК ДатаНачисления,
	|	ТаблицаНачисление.ДатаСписания КАК ДатаСписания,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СписаниеПартий,
	|	ТаблицаНачисление.Период КАК ДатаОперации,
	|	ТаблицаНачисление.Регистратор КАК ДокументОперации,
	|	ТаблицаНачисление.ДокументПродажи КАК ДокументПродажи,
	|	ВЫБОР
	|		КОГДА ТаблицаНачисление.ВидОперацииДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаНачисление.ДатаНачисления = НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	|						ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаНачисление.ДокументПродажи.Дата, ЧАС, 1) > &Период
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВозвратДоНачисления,
	|	&ТекущаяДата КАК ДатаИзменения,
	|	1 КАК КлючПорядка
	|ПОМЕСТИТЬ ТаблицаБонусы
	|ИЗ
	|	ТаблицаБонусыНачисление КАК ТаблицаНачисление
	|ГДЕ
	|	&ФормироватьДвиженияБонусныхБалловНачисление
	|	И НЕ ТаблицаНачисление.СуммаБонусныхБаллов = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(ТаблицаНачисление.ДатаСписания, ДЕНЬ),
	|	ТаблицаНачисление.Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаНачисление.НомерСтроки,
	|	ТаблицаНачисление.Контрагент,
	|	ТаблицаНачисление.ПрограммаЛояльности,
	|	ТаблицаНачисление.СуммаБонусныхБаллов * ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Аннуляция),
	|	ТаблицаНачисление.ВидОперацииДокумента,
	|	ТаблицаНачисление.ДатаНачисления,
	|	ТаблицаНачисление.ДатаСписания,
	|	ИСТИНА,
	|	ТаблицаНачисление.Период,
	|	ТаблицаНачисление.Регистратор,
	|	ТаблицаНачисление.ДокументПродажи,
	|	ВЫБОР
	|		КОГДА ТаблицаНачисление.ВидОперацииДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаНачисление.ДатаНачисления = НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	|						ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаНачисление.ДокументПродажи.Дата, ЧАС, 1) > &Период
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	&ТекущаяДата,
	|	3
	|ИЗ
	|	ТаблицаБонусыНачисление КАК ТаблицаНачисление
	|ГДЕ
	|	&ФормироватьДвиженияБонусныхБалловНачисление
	|	И НЕ ТаблицаНачисление.СуммаБонусныхБаллов = 0
	|	И НЕ ТаблицаНачисление.ДатаСписания = ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	&Ссылка,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаОплата.НомерСтроки,
	|	&ВладелецДисконтнойКарты,
	|	ТаблицаОплата.ПрограммаЛояльности,
	|	ТаблицаОплата.СуммаБонусныхБаллов * ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Использование),
	|	&ВидОперации,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ИСТИНА,
	|	&Период,
	|	&Ссылка,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ВЫРАЗИТЬ(&ЧекККМПродажа КАК Документ.ЧекККМ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	&ТекущаяДата,
	|	2
	|ИЗ
	|	Документ.ЧекККМ.ОплатаБонуснымиБаллами КАК ТаблицаОплата
	|ГДЕ
	|	&ФормироватьДвиженияБонусныхБалловСписание
	|	И ВЫБОР
	|			КОГДА &ЗаказПокупателяЗаполнен
	|				ТОГДА ВЫБОР
	|						КОГДА &ЗаказПокупателяТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ТаблицаОплата.Ссылка = &Ссылка
	|	И ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(&ВладелецДисконтнойКарты) = ТИП(Справочник.Контрагенты)
	|					И НЕ &ВладелецДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И НЕ ТаблицаОплата.СуммаБонусныхБаллов = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаБонусыНачисление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаБонусы.Период КАК Период,
	|	ТаблицаБонусы.Регистратор КАК Регистратор,
	|	ТаблицаБонусы.ВидДвижения КАК ВидДвижения,
	|	МИНИМУМ(ТаблицаБонусы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаБонусы.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТаблицаБонусы.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаБонусы.ВидОперацииДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ТаблицаБонусы.ДокументПродажи
	|		КОГДА ТаблицаБонусы.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Начисление), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Аннуляция))
	|			ТОГДА ТаблицаБонусы.ДокументОперации
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументНачисления,
	|	ТаблицаБонусы.ВидОперации КАК ВидОперации,
	|	СУММА(ТаблицаБонусы.СуммаБонусныхБаллов) КАК СуммаБонусныхБаллов,
	|	ТаблицаБонусы.ДатаОперации КАК ДатаОперации,
	|	ТаблицаБонусы.ДокументОперации КАК ДокументОперации,
	|	ТаблицаБонусы.ДатаИзменения КАК ДатаИзменения,
	|	ТаблицаБонусы.КлючПорядка КАК КлючПорядка
	|ИЗ
	|	ТаблицаБонусы КАК ТаблицаБонусы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаБонусы.Период,
	|	ТаблицаБонусы.Регистратор,
	|	ТаблицаБонусы.ВидДвижения,
	|	ТаблицаБонусы.ПрограммаЛояльности,
	|	ТаблицаБонусы.Контрагент,
	|	ТаблицаБонусы.ВидОперации,
	|	ТаблицаБонусы.ДатаОперации,
	|	ТаблицаБонусы.ДокументОперации,
	|	ТаблицаБонусы.ДатаИзменения,
	|	ТаблицаБонусы.КлючПорядка,
	|	ВЫБОР
	|		КОГДА ТаблицаБонусы.ВидОперацииДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ТаблицаБонусы.ДокументПродажи
	|		КОГДА ТаблицаБонусы.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Начисление), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Аннуляция))
	|			ТОГДА ТаблицаБонусы.ДокументОперации
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка,
	|	ПрограммаЛояльности,
	|	Период,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаБонусы.ДатаОперации КАК Период,
	|	ТаблицаБонусы.Регистратор КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	МИНИМУМ(ТаблицаБонусы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаБонусы.Контрагент КАК Контрагент,
	|	ТаблицаБонусы.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТаблицаБонусы.ДокументОперации КАК ДокументНачисления,
	|	СУММА(ТаблицаБонусы.СуммаБонусныхБаллов) КАК СуммаБонусныхБаллов,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Резерв) КАК ВидОперации,
	|	ТаблицаБонусы.ДатаОперации КАК ДатаОперации,
	|	ТаблицаБонусы.ДокументОперации КАК ДокументОперации,
	|	ТаблицаБонусы.ДатаИзменения КАК ДатаИзменения,
	|	1 КАК КлючПорядка
	|ИЗ
	|	ТаблицаБонусы КАК ТаблицаБонусы
	|ГДЕ
	|	ТаблицаБонусы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Начисление)
	|	И НЕ ТаблицаБонусы.ВидОперацииДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|	И НЕ ТаблицаБонусы.СуммаБонусныхБаллов = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаБонусы.ДатаОперации,
	|	ТаблицаБонусы.Регистратор,
	|	ТаблицаБонусы.Контрагент,
	|	ТаблицаБонусы.ПрограммаЛояльности,
	|	ТаблицаБонусы.ДатаИзменения,
	|	ТаблицаБонусы.ДокументОперации,
	|	ТаблицаБонусы.ДатаОперации,
	|	ТаблицаБонусы.ДокументОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаБонусы.Период,
	|	ТаблицаБонусы.Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	МИНИМУМ(ТаблицаБонусы.НомерСтроки),
	|	ТаблицаБонусы.Контрагент,
	|	ТаблицаБонусы.ПрограммаЛояльности,
	|	ТаблицаБонусы.ДокументОперации,
	|	СУММА(-ТаблицаБонусы.СуммаБонусныхБаллов),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Начисление),
	|	ТаблицаБонусы.ДатаОперации,
	|	ТаблицаБонусы.ДокументОперации,
	|	ТаблицаБонусы.ДатаИзменения,
	|	2
	|ИЗ
	|	ТаблицаБонусы КАК ТаблицаБонусы
	|ГДЕ
	|	ТаблицаБонусы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Начисление)
	|	И НЕ ТаблицаБонусы.ВидОперацииДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|	И НЕ ТаблицаБонусы.СуммаБонусныхБаллов = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаБонусы.Период,
	|	ТаблицаБонусы.Регистратор,
	|	ТаблицаБонусы.Контрагент,
	|	ТаблицаБонусы.ПрограммаЛояльности,
	|	ТаблицаБонусы.ДатаИзменения,
	|	ТаблицаБонусы.ДокументОперации,
	|	ТаблицаБонусы.ДатаОперации,
	|	ТаблицаБонусы.ДокументОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаБонусы.ДатаОперации,
	|	ТаблицаБонусы.Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	МИНИМУМ(ТаблицаБонусы.НомерСтроки),
	|	ТаблицаБонусы.Контрагент,
	|	ТаблицаБонусы.ПрограммаЛояльности,
	|	ТаблицаБонусы.ДокументПродажи,
	|	СУММА(ТаблицаБонусы.СуммаБонусныхБаллов),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Резерв),
	|	ТаблицаБонусы.ДатаОперации,
	|	ТаблицаБонусы.ДокументОперации,
	|	ТаблицаБонусы.ДатаИзменения,
	|	1
	|ИЗ
	|	ТаблицаБонусы КАК ТаблицаБонусы
	|ГДЕ
	|	ТаблицаБонусы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Возврат)
	|	И ТаблицаБонусы.ВидОперацииДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|	И ТаблицаБонусы.ВозвратДоНачисления
	|	И НЕ ТаблицаБонусы.СуммаБонусныхБаллов = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаБонусы.ДатаОперации,
	|	ТаблицаБонусы.Регистратор,
	|	ТаблицаБонусы.Контрагент,
	|	ТаблицаБонусы.ПрограммаЛояльности,
	|	ТаблицаБонусы.ДатаИзменения,
	|	ТаблицаБонусы.ДокументПродажи,
	|	ТаблицаБонусы.ДокументОперации,
	|	ТаблицаБонусы.ДатаОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(ТаблицаБонусы.ДокументПродажи.Дата, ЧАС, 1),
	|	ТаблицаБонусы.Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	МИНИМУМ(ТаблицаБонусы.НомерСтроки),
	|	ТаблицаБонусы.Контрагент,
	|	ТаблицаБонусы.ПрограммаЛояльности,
	|	ТаблицаБонусы.ДокументПродажи,
	|	СУММА(-ТаблицаБонусы.СуммаБонусныхБаллов),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Начисление),
	|	ТаблицаБонусы.ДатаОперации,
	|	ТаблицаБонусы.ДокументОперации,
	|	ТаблицаБонусы.ДатаИзменения,
	|	2
	|ИЗ
	|	ТаблицаБонусы КАК ТаблицаБонусы
	|ГДЕ
	|	ТаблицаБонусы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Возврат)
	|	И ТаблицаБонусы.ВидОперацииДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|	И ТаблицаБонусы.ВозвратДоНачисления
	|	И НЕ ТаблицаБонусы.СуммаБонусныхБаллов = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаБонусы.Регистратор,
	|	ТаблицаБонусы.Контрагент,
	|	ТаблицаБонусы.ПрограммаЛояльности,
	|	ТаблицаБонусы.ДатаИзменения,
	|	ТаблицаБонусы.ДатаОперации,
	|	ТаблицаБонусы.ДокументПродажи,
	|	ТаблицаБонусы.ДокументОперации,
	|	ДОБАВИТЬКДАТЕ(ТаблицаБонусы.ДокументПродажи.Дата, ЧАС, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка,
	|	ПрограммаЛояльности,
	|	Период,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаБонусы.Период КАК Период,
	|	ТаблицаБонусы.Регистратор КАК Регистратор,
	|	МИНИМУМ(ТаблицаБонусы.НомерСтроки) КАК НомерСтроки,
	|	0 КАК НомерСтрокиДокумента,
	|	ТаблицаБонусы.ВидОперации КАК ВидОперации,
	|	ТаблицаБонусы.Период КАК ПериодДвижения,
	|	ТаблицаБонусы.ДатаОперации КАК ДатаОперации,
	|	ТаблицаБонусы.ДатаНачисления КАК ДатаНачисления,
	|	ТаблицаБонусы.ДатаСписания КАК ДатаСписания,
	|	ТаблицаБонусы.ДокументОперации КАК ДокументОперации,
	|	ТаблицаБонусы.ДокументПродажи КАК ДокументПродажи,
	|	ТаблицаБонусы.Контрагент КАК Контрагент,
	|	ТаблицаБонусы.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТаблицаБонусы.СписаниеПартий КАК СписаниеПартий,
	|	СУММА(ТаблицаБонусы.СуммаБонусныхБаллов) КАК СуммаБонусныхБаллов,
	|	ТаблицаБонусы.ДатаИзменения КАК ДатаИзменения,
	|	ТаблицаБонусы.КлючПорядка КАК КлючПорядка
	|ИЗ
	|	ТаблицаБонусы КАК ТаблицаБонусы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаБонусы.Период,
	|	ТаблицаБонусы.Регистратор,
	|	ТаблицаБонусы.ВидОперации,
	|	ТаблицаБонусы.ДатаОперации,
	|	ТаблицаБонусы.ДатаНачисления,
	|	ТаблицаБонусы.ДатаСписания,
	|	ТаблицаБонусы.ДокументОперации,
	|	ТаблицаБонусы.ДокументПродажи,
	|	ТаблицаБонусы.Контрагент,
	|	ТаблицаБонусы.ПрограммаЛояльности,
	|	ТаблицаБонусы.СписаниеПартий,
	|	ТаблицаБонусы.ДатаИзменения,
	|	ТаблицаБонусы.КлючПорядка,
	|	ТаблицаБонусы.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	КлючПорядка,
	|	ПрограммаЛояльности,
	|	Период,
	|	НомерСтроки" + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРеализацияЗаказовПокупателей()	Экспорт	//	LNK 12.07.2022 06:02:32

	ТекстЗапроса = Символы.ПС +
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	&ЗаказПокупателя КАК ЗаказПокупателя,
	|	&ВидОперации КАК ВидОперации,
	|	&ВладелецДисконтнойКарты КАК Контрагент,
	|	&Ссылка КАК Объект,
	|	&Ссылка КАК Представление
	|ГДЕ
	|	&СтатусЧекаККМ В (ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробитый), ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный))
	|	И ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(&ЗаказПокупателя) = ТИП(Документ.ЗаказПокупателя)
	|					И НЕ &ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ" + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область ИнициализацияДанныхДляПроведенияЭкспортДополнительный

//	LNK 20.02.2020 14:50:27
Процедура ВыполнитьДвиженияСостояниеСерийныхНомеров(ДокументСсылка)	Экспорт

	Перем Реквизиты;

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

//	здесь реквизиты шапки документа применяются как параметры запроса.
	Запрос = ПолучитьЗапросПроведенияИЗаполнитьРеквизитыШапки(ДокументСсылка, Реквизиты);
	Запрос.УстановитьПараметр("ЭтоВозврат", Реквизиты.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат);
	Запрос.УстановитьПараметр("ФормироватьДвижения", Ложь);

	Запрос.Текст = ТекстЗапросаТаблицаСерийныхНомеров()
				 + ТекстЗапросаТаблицаСостоянияСерийныхНомеров();

	Результаты = Запрос.ВыполнитьПакет();

	Если НЕ ТранзакцияАктивна() Тогда

			НачатьТранзакцию();
			ЗавершитьТранзакцию = Истина;

	Иначе	ЗавершитьТранзакцию = Ложь;

	КонецЕсли;

	НаборЗаписей = РегистрыСведений.ДвиженияСерийныхНомеров.СоздатьНаборЗаписей();

	НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
	НаборЗаписей.Загрузить(Результаты[5].Выгрузить());
	НаборЗаписей.ОбменДанными.Загрузка = Истина;

	НаборЗаписей.Записать();

	НаборЗаписей = РегистрыСведений.СостоянияСерийныхНомеров.СоздатьНаборЗаписей();

	НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
	НаборЗаписей.Загрузить(Результаты[12].Выгрузить());
	НаборЗаписей.ОбменДанными.Загрузка = Истина;

	Если НЕ НаборЗаписей.Количество() = 0 Тогда	//	очистка, например, и сама доедет.

		НаборЗаписей.ДополнительныеСвойства.Вставить("УведомитьОбИзменении", Истина);

		Для каждого ЗаписьНабора Из НаборЗаписей Цикл

			ЗаписьНабора.ДатаИзменения = ТекущаяДата();

		КонецЦикла;

	КонецЕсли;

	НаборЗаписей.Записать();

	Если ЗавершитьТранзакцию Тогда

		ЗафиксироватьТранзакцию();

	КонецЕсли;

КонецПроцедуры

//	LNK 02.11.2016 16:37:01
Процедура ВыполнитьДвиженияРасширеннойАналитикиПродаж(ДокументСсылка, Период, СтатусЧека, РежимЗагрузки = Ложь, СкидкиНаценки = Истина, ПродажиПоЧекам = Истина, БонусныеБаллы = Истина)	Экспорт

	Перем Реквизиты;

	Если НЕ (СкидкиНаценки = Истина ИЛИ ПродажиПоЧекам = Истина ИЛИ БонусныеБаллы = Истина) Тогда

		Возврат;

	КонецЕсли;

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();

	ИспользоватьТаблицыБонусов = (БонусныеБаллы = Истина И УчетнаяПолитика.ИспользоватьЧекиКакРегистраторыНачисленияБонусныхБаллов);

//	здесь реквизиты шапки документа применяются как параметры запроса.
	Запрос = ПолучитьЗапросПроведенияИЗаполнитьРеквизитыШапки(ДокументСсылка, Реквизиты);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка КАК Ссылка,
	|	&Магазин КАК Магазин,
	|	&ВидОперации КАК ВидОперации,
	|	&ЧекККМПродажа КАК ЧекККМПродажа,
	|	&ЗаказПокупателя КАК ЗаказПокупателя,
	|	&ВладелецДисконтнойКарты КАК ВладелецДисконтнойКарты,
	|	&ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	&УслугаБанка КАК УслугаБанка,
	|	&УслугаБанкаПериодПредоставления КАК УслугаБанкаПериодПредоставления,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Количество КАК Количество,
	|	ТабличнаяЧасть.Цена КАК Цена,
	|	ТабличнаяЧасть.Сумма КАК Сумма,
	|	ТабличнаяЧасть.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ТабличнаяЧасть.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ТабличнаяЧасть.СтавкаНДС КАК СтавкаНДС,
	|	ТабличнаяЧасть.СуммаНДС КАК СуммаНДС,
	|	ТабличнаяЧасть.СуммаОкругления КАК СуммаОкругления,
	|	ТабличнаяЧасть.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТабличнаяЧасть.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТабличнаяЧасть.ПричинаРучнойСкидки КАК ПричинаРучнойСкидки,
	|	ТабличнаяЧасть.РегистрацияПродажи КАК РегистрацияПродажи,
	|	ТабличнаяЧасть.Штрихкод КАК Штрихкод,
	|	ТабличнаяЧасть.Склад КАК Склад,
	|	ТабличнаяЧасть.КлючСвязи КАК КлючСвязи,
	|	ТабличнаяЧасть.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|	ТабличнаяЧасть.Продавец КАК Продавец,
	|	ТабличнаяЧасть.ПродажаПодарка КАК ПродажаПодарка,
	|	ТабличнаяЧасть.Упаковка КАК Упаковка,
	|	ТабличнаяЧасть.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.СтавкаНДС,
	|	ТабличнаяЧасть.КлючСвязи,
	|	ТабличнаяЧасть.КлючСвязиСерийныхНомеров,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика" + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+ ТекстЗапросаТаблицаПродажПоЧекамИСкидкамНаценкам()
	+ ТекстЗапросаТаблицаПродажаПоДисконтнымКартамСкидка()
	+ ТекстЗапросаРеализацияЗаказовПокупателей()
	+ ?(ИспользоватьТаблицыБонусов
			, ТекстЗапросаТаблицаБонусныеБаллы()
			, ""
		)
	;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ФормироватьАналитикуСкидок", ОбменДаннымиВызовСервера.ЭтоГлавныйУзел()
											И (СкидкиНаценки ИЛИ ПродажиПоЧекам)
											И (СтатусЧека = Перечисления.СтатусыЧековККМ.Архивный
											ИЛИ СтатусЧека = Перечисления.СтатусыЧековККМ.Пробитый)
										);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());

//	LNK 08.03.2023 04:46:29
	Запрос.УстановитьПараметр("ЭтоИнтернетМагазин", УчетнаяПолитика.ИнтернетМагазин = Запрос.Параметры.Магазин);

	Запрос.УстановитьПараметр("ФормироватьДвиженияБонусныхБалловНачисление"
		, БонусныеБаллы
		И БонусныеБаллыВызовСервера.ДокументФормируетДвижения("ЧекККМ", УчетнаяПолитика, Реквизиты.ВидОперации, СтатусЧека, Реквизиты.ЗаказПокупателя, "Начисление")
	);
	Запрос.УстановитьПараметр("ФормироватьДвиженияБонусныхБалловСписание"
		, БонусныеБаллы
		И БонусныеБаллыВызовСервера.ДокументФормируетДвижения("ЧекККМ", УчетнаяПолитика, Реквизиты.ВидОперации, СтатусЧека, Реквизиты.ЗаказПокупателя, "Списание")
	);

	РезультатыЗапроса = Запрос.ВыполнитьПакет();

	Если НЕ ТранзакцияАктивна() Тогда

			НачатьТранзакцию();
			ЗавершитьТранзакцию = Истина;

	Иначе	ЗавершитьТранзакцию = Ложь;

	КонецЕсли;

	Если СкидкиНаценки = Истина Тогда

		НаборЗаписей = РегистрыНакопления.СкидкиНаценкиПоЧекам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Загрузить(РезультатыЗапроса[2].Выгрузить());
		НаборЗаписей.ОбменДанными.Загрузка = РежимЗагрузки;

		Если НаборЗаписей.ОбменДанными.Загрузка И ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда
		
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);

		КонецЕсли;

		НаборЗаписей.Записать();

		НаборЗаписей = РегистрыНакопления.ПродажиПоДисконтнымКартамСкидка.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Загрузить(РезультатыЗапроса[5].Выгрузить());
		НаборЗаписей.ОбменДанными.Загрузка = РежимЗагрузки;

		Если НаборЗаписей.ОбменДанными.Загрузка И ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда
		
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);

		КонецЕсли;

		НаборЗаписей.Записать();

	КонецЕсли;

	Если ПродажиПоЧекам = Истина Тогда

		НаборЗаписей = РегистрыНакопления.ПродажиПоЧекам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Загрузить(РезультатыЗапроса[3].Выгрузить());
		НаборЗаписей.ОбменДанными.Загрузка = РежимЗагрузки;

		Если НаборЗаписей.ОбменДанными.Загрузка И ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда
		
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);

		КонецЕсли;

		НаборЗаписей.Записать();

	//	Бакан 17.03.2020
		НаборЗаписей = РегистрыСведений.ДанныеДляНН.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Загрузить(ПолучитьТабДляНН(ДокументСсылка));
		НаборЗаписей.ОбменДанными.Загрузка = РежимЗагрузки;

		Если НаборЗаписей.ОбменДанными.Загрузка И ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда
		
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);

		КонецЕсли;

		НаборЗаписей.Записать();

	КонецЕсли;

	//РегистрыСведений.РеализацияЗаказовПокупателей.ВыполнитьДвиженияРеализацияЗаказовПокупателей(
	//	  ДокументСсылка
	//	, Период
	//	, РезультатыЗапроса
	//	, РегистрыСведений.РеализацияЗаказовПокупателей.СоздатьНаборЗаписей()
	//	, Истина
	//	, РежимЗагрузки
	//	, 7
	//);

	Если БонусныеБаллы = Истина
	И	(УчетнаяПолитика.ИспользоватьЧекиКакРегистраторыНачисленияБонусныхБаллов ИЛИ Запрос.Параметры.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый) Тогда

		КоллекцияДвижений = Новый Массив;
		КоллекцияДвижений.Добавить(Новый Структура("Индекс, НаборЗаписей, Номер", 11, РегистрыНакопления.БонусныеБаллы.СоздатьНаборЗаписей(), "НомерСтроки"));
		КоллекцияДвижений.Добавить(Новый Структура("Индекс, НаборЗаписей, Номер", 12, РегистрыНакопления.БонусныеБаллыВРезерве.СоздатьНаборЗаписей(), "НомерСтроки"));
		КоллекцияДвижений.Добавить(Новый Структура("Индекс, НаборЗаписей, Номер", 13, РегистрыСведений.СписанныеБонусныеБаллы.СоздатьНаборЗаписей(), "НомерСтрокиДокумента"));

		ВыполнитьДвиженияБонуснаяСистемаЛояльности(ДокументСсылка, Период, РезультатыЗапроса, КоллекцияДвижений, Истина, РежимЗагрузки);

	КонецЕсли;

	Если ЗавершитьТранзакцию Тогда

		ЗафиксироватьТранзакцию();

	КонецЕсли;

КонецПроцедуры

//	LNK 22.10.2021 10:26:12
Процедура ВыполнитьДвиженияБонуснаяСистемаЛояльности(ДокументСсылка, Период, РезультатыЗапроса = Неопределено, КоллекцияДвижений, Записывать, РежимЗагрузки = Ложь)	Экспорт

	Перем Реквизиты;

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если РезультатыЗапроса = Неопределено Тогда
	//	Это вызов из "ОбработкаПроведения" ЧекККМ в "РежимЗакрытияСмены = Истина" 

		УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику(Период);

	//	здесь реквизиты шапки документа применяются как параметры запроса.
		Запрос = ПолучитьЗапросПроведенияИЗаполнитьРеквизитыШапки(ДокументСсылка, Реквизиты);
		Запрос.Текст = ТекстЗапросаТаблицаБонусныеБаллы();

		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());

		Запрос.УстановитьПараметр("ФормироватьДвиженияБонусныхБалловНачисление"
			, БонусныеБаллыВызовСервера.ДокументФормируетДвижения("ЧекККМ", УчетнаяПолитика, Реквизиты.ВидОперации, Реквизиты.СтатусЧекаККМ, Реквизиты.ЗаказПокупателя, "Начисление")
		);
		Запрос.УстановитьПараметр("ФормироватьДвиженияБонусныхБалловСписание"
			, БонусныеБаллыВызовСервера.ДокументФормируетДвижения("ЧекККМ", УчетнаяПолитика, Реквизиты.ВидОперации, Реквизиты.СтатусЧекаККМ, Реквизиты.ЗаказПокупателя, "Списание")
		);

		РезультатыЗапроса = Запрос.ВыполнитьПакет();

	КонецЕсли;

	Для каждого ЭлементКоллекции Из КоллекцияДвижений Цикл

		НаборЗаписей = ЭлементКоллекции.НаборЗаписей;
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Загрузить(ПроведениеСервер.УстановитьНомерСтрокиВТаблице(РезультатыЗапроса[ЭлементКоллекции.Индекс].Выгрузить(), ЭлементКоллекции.Номер));

		Если Записывать Тогда

			НаборЗаписей.ОбменДанными.Загрузка = РежимЗагрузки;

			Если НаборЗаписей.ОбменДанными.Загрузка И ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда
			
				НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);

			КонецЕсли;

			Попытка

				НаборЗаписей.Записать();

			Исключение 	//	LNK 06.12.2023 06:12:17 в целях отладки

				ТекстОшибки = ОписаниеОшибки();
				ВызватьИсключение ТекстОшибки;

			КонецПопытки;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры
	
#КонецОбласти

Функция ПолучитьТабДляНН(ДокСсылка)
	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() тогда	
		ТабДляНН = НОВый ТаблицаЗначений;
		Возврат ТабДляНН;	
	Иначе
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокСсылка,"ВидОперации") = Перечисления.ВидыОперацийЧекККМ.Продажа тогда 
		Если ЕстьПодарочныеСертификаты(ДокСсылка) тогда
			Если ЕстьДругойТипОплаты(ДокСсылка) тогда
				ТабДляНН =	ПолучитьТабНесколькоОплат(ДокСсылка);	
			Иначе
				ТабДляНН =	ПолучитьТабТолькоСертификаты(ДокСсылка);	
			КонецЕсли;
		Иначе
			ТабДляНН = ПолучитьТабБезСертификатов(ДокСсылка);	
		КонецЕсли;
	Иначе
		ТабДляНН =  ПолучитьТабВозвраты(ДокСсылка);
    КонецЕсли;
	
	
	
	Возврат ТабДляНН;
	КонецЕсли;	
КонецФункции

Функция ПолучитьТабВозвраты(ДокСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧекККМТовары.Номенклатура КАК Номенклатура,
		|	ЧекККМТовары.Ссылка.ВидОперации КАК ВидОперации,
		|	ЧекККМТовары.СтавкаНДС КАК СтавкаНДС,
		|	ЧекККМТовары.Ссылка КАК ЧекККМ,
		|	ЧекККМТовары.Цена КАК Цена,
		|	СУММА(ЧекККМТовары.Количество) КАК Количество,
		|	ЧекККМТовары.Ссылка.ЧекККМПродажа КАК ЧекККМПродажа,
		|	ЧекККМТовары.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТабВозврат
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
		|ГДЕ
		|	ЧекККМТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЧекККМТовары.Номенклатура,
		|	ЧекККМТовары.Ссылка.ВидОперации,
		|	ЧекККМТовары.СтавкаНДС,
		|	ЧекККМТовары.Ссылка,
		|	ЧекККМТовары.Цена,
		|	ЧекККМТовары.Ссылка.ЧекККМПродажа,
		|	ЧекККМТовары.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Цена,
		|	Ссылка,
		|	ЧекККМПродажа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекККМТоварыПродажа.Номенклатура КАК Номенклатура,
		|	ЧекККМТоварыПродажа.Цена КАК Цена,
		|	ЧекККМТоварыПродажа.Ссылка КАК Ссылка,
		|	СУММА(ЧекККМТоварыПродажа.Количество) КАК Количество,
		|	ВЫРАЗИТЬ((ЧекККМТоварыПродажа.Сумма - ЧекККМТоварыПродажа.СуммаОкругления) / ЧекККМТоварыПродажа.Количество КАК ЧИСЛО(15, 2)) КАК ЦенаСОкр
		|ПОМЕСТИТЬ ТабПродажа
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК ЧекККМТоварыПродажа
		|ГДЕ
		|	ЧекККМТоварыПродажа.Ссылка = &ЧекККМПродажа
		|
		|СГРУППИРОВАТЬ ПО
		|	ЧекККМТоварыПродажа.Номенклатура,
		|	ЧекККМТоварыПродажа.Цена,
		|	ЧекККМТоварыПродажа.Ссылка,
		|	ВЫРАЗИТЬ((ЧекККМТоварыПродажа.Сумма - ЧекККМТоварыПродажа.СуммаОкругления) / ЧекККМТоварыПродажа.Количество КАК ЧИСЛО(15, 2))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Ссылка,
		|	ЦенаСОкр,
		|	Цена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляНН.Цена КАК Цена,
		|	ДанныеДляНН.Номинал КАК Номинал,
		|	ДанныеДляНН.ДатаПродажи КАК ДатаПродажи,
		|	ДанныеДляНН.СерийныйНомер КАК СерийныйНомер,
		|	ВЫБОР
		|		КОГДА ДанныеДляНН.Номенклатура.ИспользоватьСерийныеНомера
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ДанныеДляНН.ЕстьПодарочныеСертификаты
		|	КОНЕЦ КАК ЕстьПодарочныеСертификаты,
		|	ДанныеДляНН.МагазинПродажи КАК МагазинПродажи,
		|	СУММА(ДанныеДляНН.Количество) КАК Количество,
		|	ДанныеДляНН.Регистратор КАК Регистратор,
		|	ДанныеДляНН.Номенклатура КАК Номенклатура,
		|	ДанныеДляНН.Контрагент КАК Контрагент,
		|	ДанныеДляНН.Продажа КАК Продажа
		|ПОМЕСТИТЬ ДанныеНН
		|ИЗ
		|	РегистрСведений.ДанныеДляНН КАК ДанныеДляНН
		|ГДЕ
		|	ДанныеДляНН.Регистратор = &ЧекККМПродажа
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДляНН.Цена,
		|	ДанныеДляНН.Номинал,
		|	ДанныеДляНН.ДатаПродажи,
		|	ДанныеДляНН.СерийныйНомер,
		|	ДанныеДляНН.МагазинПродажи,
		|	ДанныеДляНН.Регистратор,
		|	ДанныеДляНН.Номенклатура,
		|	ВЫБОР
		|		КОГДА ДанныеДляНН.Номенклатура.ИспользоватьСерийныеНомера
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ДанныеДляНН.ЕстьПодарочныеСертификаты
		|	КОНЕЦ,
		|	ДанныеДляНН.Контрагент,
		|	ДанныеДляНН.Продажа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Цена,
		|	Регистратор,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабВозврат.Номенклатура КАК Номенклатура,
		|	СУММА(ВЫБОР
		|			КОГДА ТабПродажа.Количество = 0
		|				ТОГДА ДанныеНН.Количество
		|			ИНАЧЕ ДанныеНН.Количество * (ТабВозврат.Количество / ЕСТЬNULL(ТабПродажа.Количество, 1))
		|		КОНЕЦ) КАК Количество,
		|	ТабВозврат.ВидОперации КАК ВидОперации,
		|	ТабВозврат.СтавкаНДС КАК СтавкаНДС,
		|	ДанныеНН.Цена КАК Цена,
		|	ДанныеНН.Номинал КАК Номинал,
		|	ВЫБОР
		|		КОГДА ДанныеНН.ДатаПродажи = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ТабПродажа.Ссылка.Дата
		|		ИНАЧЕ ДанныеНН.ДатаПродажи
		|	КОНЕЦ КАК ДатаПродажи,
		|	ДанныеНН.СерийныйНомер КАК СерийныйНомер,
		|	ДанныеНН.ЕстьПодарочныеСертификаты КАК ЕстьПодарочныеСертификаты,
		|	ДанныеНН.МагазинПродажи КАК МагазинПродажи,
		|	ТабВозврат.Ссылка КАК Регистратор,
		|	ДанныеНН.Контрагент КАК Контрагент,
		|	ТабВозврат.Ссылка КАК ЧекККМ,
		|	ДанныеНН.Продажа КАК Продажа
		|ИЗ
		|	ТабВозврат КАК ТабВозврат
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабПродажа КАК ТабПродажа
		|			ЛЕВОЕ СОЕДИНЕНИЕ ДанныеНН КАК ДанныеНН
		|			ПО ТабПродажа.ЦенаСОкр = ДанныеНН.Цена
		|				И ТабПродажа.Номенклатура = ДанныеНН.Номенклатура
		|				И ТабПродажа.Ссылка = ДанныеНН.Регистратор
		|		ПО ТабВозврат.ЧекККМПродажа = ТабПродажа.Ссылка
		|			И ТабВозврат.Номенклатура = ТабПродажа.Номенклатура
		|			И ТабВозврат.Цена = ТабПродажа.Цена
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабВозврат.Номенклатура,
		|	ТабВозврат.ВидОперации,
		|	ТабВозврат.СтавкаНДС,
		|	ДанныеНН.Цена,
		|	ДанныеНН.Номинал,
		|	ДанныеНН.СерийныйНомер,
		|	ДанныеНН.ЕстьПодарочныеСертификаты,
		|	ДанныеНН.МагазинПродажи,
		|	ТабВозврат.Ссылка,
		|	ВЫБОР
		|		КОГДА ДанныеНН.ДатаПродажи = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ТабПродажа.Ссылка.Дата
		|		ИНАЧЕ ДанныеНН.ДатаПродажи
		|	КОНЕЦ,
		|	ДанныеНН.Контрагент,
		|	ДанныеНН.Продажа,
		|	ТабВозврат.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТабПродажа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДанныеНН
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТабВозврат";
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	Запрос.УстановитьПараметр("ЧекККМПродажа", ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокСсылка,"ЧекККМПродажа"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Таб = РезультатЗапроса.Выгрузить();

	Возврат Таб;
	
	
КонецФункции

Функция ПолучитьТабБезСертификатов(ДокСсылка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЧекККМТовары.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ((ЧекККМТовары.Сумма - ЧекККМТовары.СуммаОкругления) / ЧекККМТовары.Количество КАК ЧИСЛО(15, 2)) КАК Цена,
	|	СУММА(ЧекККМТовары.Количество) КАК Количество,
	|	ЧекККМ.ВидОперации КАК ВидОперации,
	|	ЛОЖЬ КАК ЕстьПодарочныеСертификаты,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПродажи,
	|	0 КАК Номинал,
	|	ЧекККМТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЧекККМ.Ссылка КАК ЧекККМ,
	|	ЧекККМСерийныеНомера.СерийныйНомер КАК СерийныйНомер,
	|	ЧекККМ.Магазин КАК МагазинПродажи,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.СерийныеНомера КАК ЧекККМСерийныеНомера
	|			ПО ЧекККМТовары.Ссылка = ЧекККМСерийныеНомера.Ссылка
	|				И ЧекККМТовары.КлючСвязиСерийныхНомеров = ЧекККМСерийныеНомера.КлючСвязиСерийныхНомеров
	|		ПО ЧекККМ.Ссылка = ЧекККМТовары.Ссылка
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМТовары.Номенклатура,
	|	ВЫРАЗИТЬ((ЧекККМТовары.Сумма - ЧекККМТовары.СуммаОкругления) / ЧекККМТовары.Количество КАК ЧИСЛО(15, 2)),
	|	ЧекККМТовары.СтавкаНДС,
	|	ЧекККМ.ВидОперации,
	|	ЧекККМ.Ссылка,
	|	ЧекККМСерийныеНомера.СерийныйНомер,
	|	ЧекККМ.Магазин"
	);
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Таб = РезультатЗапроса.Выгрузить();

	Возврат Таб;
	
КонецФункции

Функция ПолучитьТабТолькоСертификаты(ДокСсылка)
	ТабДляНН = Новый ТаблицаЗначений;
	ТабДляНН.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабДляНН.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число"));
	ТабДляНН.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	ТабДляНН.Колонки.Добавить("Номинал",Новый ОписаниеТипов("Число"));
	ТабДляНН.Колонки.Добавить("ЕстьПодарочныеСертификаты",Новый ОписаниеТипов("Булево"));
	ТабДляНН.Колонки.Добавить("СерийныйНомер",Новый ОписаниеТипов("СправочникСсылка.СерийныеНомера"));
	ТабДляНН.Колонки.Добавить("ВидОперации",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийЧекККМ"));
	ТабДляНН.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТабДляНН.Колонки.Добавить("ДатаПродажи",Новый ОписаниеТипов("Дата"));
	ТабДляНН.Колонки.Добавить("ЧекККМ",Новый ОписаниеТипов("ДокументСсылка.ЧекККМ")); 
	ТабДляНН.Колонки.Добавить("МагазинПродажи",Новый ОписаниеТипов("СправочникСсылка.Магазины"));         
	ТабДляНН.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));  
	ТабДляНН.Колонки.Добавить("Продажа",Новый ОписаниеТипов("Булево"));  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧекККМТовары.Номенклатура КАК Номенклатура,
		|	ВЫРАЗИТЬ((ЧекККМТовары.Сумма - ЧекККМТовары.СуммаОкругления) / ЧекККМТовары.Количество КАК ЧИСЛО(15, 2)) КАК Цена,
		|	СУММА(ЧекККМТовары.Количество) КАК Количество,
		|	ЧекККМТовары.Ссылка.ВидОперации КАК ВидОперации,
		|	ЕСТЬNULL(ЧекККМСерийныеНомера.СерийныйНомер, ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяССылка)) КАК СерийныйНомер,
		|	ЧекККМТовары.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(ЧекККМТовары.Сумма - ЧекККМТовары.СуммаОкругления) КАК Сумма
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.СерийныеНомера КАК ЧекККМСерийныеНомера
		|		ПО ЧекККМТовары.Ссылка = ЧекККМСерийныеНомера.Ссылка
		|			И ЧекККМТовары.КлючСвязиСерийныхНомеров = ЧекККМСерийныеНомера.КлючСвязиСерийныхНомеров
		|ГДЕ
		|	ЧекККМТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЧекККМТовары.Номенклатура,
		|	ВЫРАЗИТЬ((ЧекККМТовары.Сумма - ЧекККМТовары.СуммаОкругления) / ЧекККМТовары.Количество КАК ЧИСЛО(15, 2)),
		|	ЧекККМТовары.Ссылка.ВидОперации,
		|	ЕСТЬNULL(ЧекККМСерийныеНомера.СерийныйНомер, ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяССылка)),
		|	ЧекККМТовары.СтавкаНДС";
	Запрос.УстановитьПараметр("Ссылка",ДокСсылка);
 	РезультатЗапроса = Запрос.Выполнить();
	
	Таб = РезультатЗапроса.Выгрузить();

	
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧекККМПогашениеПодарочныхСертификатов.СерийныйНомер КАК СерийныйНомер,
		|	ЧекККМПогашениеПодарочныхСертификатов.Ссылка.ВидОперации КАК ВидОперации,
		|	ЧекККМПогашениеПодарочныхСертификатов.ПодарочныйСертификат.Номинал КАК Номинал,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СостоянияСерийныхНомеров.Регистратор) = ТИП(Документ.РеализацияТоваров)
		|			ТОГДА ВЫБОР
		|					КОГДА СостоянияСерийныхНомеров.Регистратор.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА НАЧАЛОПЕРИОДА(СостоянияСерийныхНомеров.Регистратор.Дата, ДЕНЬ)
		|					ИНАЧЕ НАЧАЛОПЕРИОДА(СостоянияСерийныхНомеров.Регистратор.ДатаОплаты, ДЕНЬ)
		|				КОНЕЦ
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(СостоянияСерийныхНомеров.Регистратор.ОтчетОРозничныхПродажах.Дата, ДЕНЬ)
		|	КОНЕЦ КАК ДатаПродажи,
		|	СостоянияСерийныхНомеров.Номенклатура.СтавкаНДС КАК СтавкаНДС,
		|	ЧекККМПогашениеПодарочныхСертификатов.ПодарочныйСертификат КАК Номенклатура,
		|	СостоянияСерийныхНомеров.Регистратор.Магазин КАК МагазинПродажи,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СостоянияСерийныхНомеров.Регистратор) = ТИП(Документ.РеализацияТоваров)
		|			ТОГДА СостоянияСерийныхНомеров.Регистратор.Контрагент
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	КОНЕЦ КАК Контрагент
		|ИЗ
		|	Документ.ЧекККМ.ПогашениеПодарочныхСертификатов КАК ЧекККМПогашениеПодарочныхСертификатов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСерийныхНомеров КАК СостоянияСерийныхНомеров
		|		ПО ЧекККМПогашениеПодарочныхСертификатов.СерийныйНомер = СостоянияСерийныхНомеров.СерийныйНомер
		|			И (СостоянияСерийныхНомеров.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСерийныхНомеров.Активен))
		|ГДЕ
		|	ЧекККМПогашениеПодарочныхСертификатов.Ссылка = &Ссылка
		|	И ЧекККМПогашениеПодарочныхСертификатов.ПодарочныйСертификат.ИспользоватьСерийныеНомера = ИСТИНА";
	Запрос.УстановитьПараметр("Ссылка",ДокСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ТабСерт = РезультатЗапроса.Выгрузить();
	
	СуммаДок = Таб.Итог("Сумма");
	СуммаДок2 = СуммаДок;
	
	Для Каждого строка из ТабСерт цикл
		Если ЗначениеЗаполнено(строка.СерийныйНомер) тогда 
			//Если строка.Номинал <  СуммаДок тогда 
			//	СуммаДок = СуммаДок - строка.Номинал;
				//Номинал = строка.Номинал;
			//Иначе
			//	Номинал = СуммаДок;
			//КонецЕсли;
			Номинал = строка.Номинал;
			Стр = ТабДляНН.Добавить();
			Стр.Номенклатура = строка.Номенклатура;
			Стр.Цена = Номинал;
			Стр.Количество = 1;
			Стр.Номинал = Номинал;
			Стр.ЕстьПодарочныеСертификаты = Истина;
			Стр.СерийныйНомер = строка.СерийныйНомер;
			Стр.ВидОперации = строка.ВидОперации;
			Стр.ДатаПродажи = строка.ДатаПродажи;
			Стр.СтавкаНДС = строка.СтавкаНДС;
			Стр.ЧекККМ = ДокСсылка;
			Стр.МагазинПродажи = строка.МагазинПродажи;
			Стр.Контрагент = строка.Контрагент; 			
		КонецЕсли;
		Для Каждого строка2 из Таб цикл
			КоефСерт = Номинал/?(СуммаДок2=0,1,СуммаДок2);

			Стр = ТабДляНН.Добавить();
			Стр.Номенклатура = строка2.Номенклатура;
			Стр.Цена = строка2.Цена;
			Стр.Количество = строка2.Количество*КоефСерт;
			Стр.Номинал = 0;
			Если строка2.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 или строка2.СтавкаНДС = Перечисления.СтавкиНДС.НДС7 или строка2.СтавкаНДС = Перечисления.СтавкиНДС.НДС14 тогда  
				Стр.ЕстьПодарочныеСертификаты = Истина;
				Стр.ДатаПродажи = строка.ДатаПродажи;	
				Стр.МагазинПродажи = строка.МагазинПродажи;
				Стр.Контрагент = строка.Контрагент; 			
			Иначе
				Стр.ДатаПродажи = Дата(1,1,1);	
				Стр.ЕстьПодарочныеСертификаты = Ложь;	
				Стр.Контрагент = Справочники.Контрагенты.ПустаяСсылка(); 			
			КонецЕсли;
			Стр.МагазинПродажи = строка.МагазинПродажи;
			Стр.СерийныйНомер = строка2.СерийныйНомер;
			Стр.ВидОперации = строка2.ВидОперации;
			Стр.СтавкаНДС = строка2.СтавкаНДС;
			Стр.ЧекККМ = ДокСсылка;
			Стр.МагазинПродажи = строка.МагазинПродажи;
			Стр.Продажа = Истина;
		КонецЦикла;
	КонецЦикла;
	
	ТабДляНН.Свернуть("Номенклатура,Цена,Номинал,ЕстьПодарочныеСертификаты,СерийныйНомер,ВидОперации,ДатаПродажи,СтавкаНДС,ЧекККМ,МагазинПродажи,Контрагент,Продажа","Количество");
	
	Возврат ТабДляНН;
	
КонецФункции

Функция ПолучитьТабНесколькоОплат(ДокСсылка)
	ТабДляНН = Новый ТаблицаЗначений;
	ТабДляНН.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабДляНН.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число"));
	ТабДляНН.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	ТабДляНН.Колонки.Добавить("Номинал",Новый ОписаниеТипов("Число"));
	ТабДляНН.Колонки.Добавить("ЕстьПодарочныеСертификаты",Новый ОписаниеТипов("Булево"));
	ТабДляНН.Колонки.Добавить("СерийныйНомер",Новый ОписаниеТипов("СправочникСсылка.СерийныеНомера"));
	ТабДляНН.Колонки.Добавить("ВидОперации",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийЧекККМ"));
	ТабДляНН.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТабДляНН.Колонки.Добавить("ДатаПродажи",Новый ОписаниеТипов("Дата"));         
	ТабДляНН.Колонки.Добавить("ЧекККМ",Новый ОписаниеТипов("ДокументСсылка.ЧекККМ"));         
	ТабДляНН.Колонки.Добавить("МагазинПродажи",Новый ОписаниеТипов("СправочникСсылка.Магазины"));  
	ТабДляНН.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));  
	ТабДляНН.Колонки.Добавить("Продажа",Новый ОписаниеТипов("Булево"));  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧекККМТовары.Номенклатура КАК Номенклатура,
		|	ВЫРАЗИТЬ((ЧекККМТовары.Сумма - ЧекККМТовары.СуммаОкругления) / ЧекККМТовары.Количество КАК ЧИСЛО(15, 2)) КАК Цена,
		|	СУММА(ЧекККМТовары.Количество) КАК Количество,
		|	ЧекККМТовары.Ссылка.ВидОперации КАК ВидОперации,
		|	ЕСТЬNULL(ЧекККМСерийныеНомера.СерийныйНомер, ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяССылка)) КАК СерийныйНомер,
		|	ЧекККМТовары.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(ЧекККМТовары.Сумма - ЧекККМТовары.СуммаОкругления) КАК Сумма,
		|	ЧекККМТовары.Ссылка.Магазин КАК МагазинПродажи
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.СерийныеНомера КАК ЧекККМСерийныеНомера
		|		ПО ЧекККМТовары.Ссылка = ЧекККМСерийныеНомера.Ссылка
		|			И ЧекККМТовары.КлючСвязиСерийныхНомеров = ЧекККМСерийныеНомера.КлючСвязиСерийныхНомеров
		|ГДЕ
		|	ЧекККМТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЧекККМТовары.Номенклатура,
		|	ВЫРАЗИТЬ((ЧекККМТовары.Сумма - ЧекККМТовары.СуммаОкругления) / ЧекККМТовары.Количество КАК ЧИСЛО(15, 2)),
		|	ЧекККМТовары.Ссылка.ВидОперации,
		|	ЕСТЬNULL(ЧекККМСерийныеНомера.СерийныйНомер, ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяССылка)),
		|	ЧекККМТовары.СтавкаНДС,
		|	ЧекККМТовары.Ссылка.Магазин";
	
	Запрос.УстановитьПараметр("Ссылка",ДокСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Таб = РезультатЗапроса.Выгрузить();

	
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧекККМПогашениеПодарочныхСертификатов.СерийныйНомер КАК СерийныйНомер,
		|	ЧекККМПогашениеПодарочныхСертификатов.Ссылка.ВидОперации КАК ВидОперации,
		|	ЧекККМПогашениеПодарочныхСертификатов.ПодарочныйСертификат.Номинал КАК Номинал,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СостоянияСерийныхНомеров.Регистратор) = ТИП(Документ.РеализацияТоваров)
		|			ТОГДА ВЫБОР
		|					КОГДА СостоянияСерийныхНомеров.Регистратор.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА НАЧАЛОПЕРИОДА(СостоянияСерийныхНомеров.Регистратор.Дата, ДЕНЬ)
		|					ИНАЧЕ НАЧАЛОПЕРИОДА(СостоянияСерийныхНомеров.Регистратор.ДатаОплаты, ДЕНЬ)
		|				КОНЕЦ
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(СостоянияСерийныхНомеров.Регистратор.ОтчетОРозничныхПродажах.Дата, ДЕНЬ)
		|	КОНЕЦ КАК ДатаПродажи,
		|	СостоянияСерийныхНомеров.Номенклатура.СтавкаНДС КАК СтавкаНДС,
		|	ЧекККМПогашениеПодарочныхСертификатов.ПодарочныйСертификат КАК Номенклатура,
		|	СостоянияСерийныхНомеров.Регистратор.Магазин КАК МагазинПродажи,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СостоянияСерийныхНомеров.Регистратор) = ТИП(Документ.РеализацияТоваров)
		|			ТОГДА СостоянияСерийныхНомеров.Регистратор.Контрагент
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	КОНЕЦ КАК Контрагент
		|ИЗ
		|	Документ.ЧекККМ.ПогашениеПодарочныхСертификатов КАК ЧекККМПогашениеПодарочныхСертификатов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСерийныхНомеров КАК СостоянияСерийныхНомеров
		|		ПО ЧекККМПогашениеПодарочныхСертификатов.СерийныйНомер = СостоянияСерийныхНомеров.СерийныйНомер
		|			И (СостоянияСерийныхНомеров.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСерийныхНомеров.Активен))
		|ГДЕ
		|	ЧекККМПогашениеПодарочныхСертификатов.Ссылка = &Ссылка
		|	И ЧекККМПогашениеПодарочныхСертификатов.ПодарочныйСертификат.ИспользоватьСерийныеНомера = ИСТИНА";
	
	Запрос.УстановитьПараметр("Ссылка",ДокСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ТабСерт = РезультатЗапроса.Выгрузить();
	
	СуммаДок = Таб.Итог("Сумма");
	СуммаСерт = ТабСерт.Итог("Номинал");
	СуммаОстальныхОплат = СуммаДок - СуммаСерт;
	КоефОстальныхОплат = СуммаОстальныхОплат/?(СуммаДок=0,1,СуммаДок);
	
	
	Для Каждого строка из ТабСерт цикл
		Если ЗначениеЗаполнено(строка.СерийныйНомер) тогда 
			Номинал = строка.Номинал;
			Стр = ТабДляНН.Добавить();
			Стр.Номенклатура = строка.Номенклатура;
			Стр.Цена = Номинал;
			Стр.Количество = 1;
			Стр.Номинал = Номинал;
			Стр.ЕстьПодарочныеСертификаты = Истина;
			Стр.СерийныйНомер = строка.СерийныйНомер;
			Стр.ВидОперации = строка.ВидОперации;
			Стр.ДатаПродажи = строка.ДатаПродажи; 
			Стр.СтавкаНДС = строка.СтавкаНДС;
			Стр.ЧекККМ = ДокСсылка;
			Стр.МагазинПродажи = строка.МагазинПродажи; 
			Стр.Контрагент = строка.Контрагент; 
		КонецЕсли;
		Для Каждого строка2 из Таб цикл
			КоефСерт = Номинал/?(СуммаДок=0,1,СуммаДок);   
			Стр = ТабДляНН.Добавить();
			Стр.Номенклатура = строка2.Номенклатура;
			Стр.Цена = строка2.Цена;
			Стр.Количество = строка2.Количество*КоефСерт;
			Стр.Номинал = 0;
			Если строка2.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 или строка2.СтавкаНДС = Перечисления.СтавкиНДС.НДС7 или строка2.СтавкаНДС = Перечисления.СтавкиНДС.НДС14 тогда  
				Стр.ЕстьПодарочныеСертификаты = Истина;
				Стр.ДатаПродажи = строка.ДатаПродажи;
				Стр.МагазинПродажи = строка.МагазинПродажи; 
				Стр.Контрагент = строка.Контрагент; 							
			Иначе
				Стр.ЕстьПодарочныеСертификаты = Ложь;	
				Стр.ДатаПродажи = Дата(1,1,1);
				Стр.МагазинПродажи = строка2.МагазинПродажи; 
				Стр.Контрагент = Справочники.Контрагенты.ПустаяСсылка(); 			
			КонецЕсли;
			Стр.СерийныйНомер = строка2.СерийныйНомер;
			Стр.ВидОперации = строка2.ВидОперации;
			Стр.СтавкаНДС = строка2.СтавкаНДС;
			Стр.ЧекККМ = ДокСсылка;
			Стр.Продажа = Истина;
		КонецЦикла;
	КонецЦикла;
		Для Каждого строка2 из Таб цикл
			Стр = ТабДляНН.Добавить();
			Стр.Номенклатура = строка2.Номенклатура;
			Стр.Цена = строка2.Цена;
			Стр.Количество = строка2.Количество*КоефОстальныхОплат;
			Стр.Номинал = 0;
			Стр.ЕстьПодарочныеСертификаты = Ложь;
			Стр.СерийныйНомер = строка2.СерийныйНомер;
			Стр.ВидОперации = строка2.ВидОперации;
			Стр.ДатаПродажи = Дата(1,1,1);
			Стр.СтавкаНДС = строка2.СтавкаНДС;
			Стр.ЧекККМ = ДокСсылка;
			Стр.МагазинПродажи = строка2.МагазинПродажи;
			Стр.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			Стр.Продажа = Истина;	//	LNK 18.06.2021 06:10:11
	КонецЦикла;
	ТабДляНН.Свернуть("Номенклатура,Цена,Номинал,ЕстьПодарочныеСертификаты,СерийныйНомер,ВидОперации,ДатаПродажи,СтавкаНДС,ЧекККМ,МагазинПродажи,Контрагент,Продажа","Количество");
	Возврат ТабДляНН;

	
КонецФункции

Функция ЕстьПодарочныеСертификаты(ДокСсылка)  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧекККМПогашениеПодарочныхСертификатов.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЧекККМ.ПогашениеПодарочныхСертификатов КАК ЧекККМПогашениеПодарочныхСертификатов
		|ГДЕ
		|	ЧекККМПогашениеПодарочныхСертификатов.ПодарочныйСертификат.ИспользоватьСерийныеНомера = ИСТИНА
		|	И ЧекККМПогашениеПодарочныхСертификатов.ПодарочныйСертификат.ТипНоменклатуры = &ТипНоменклатуры
		|	И ЧекККМПогашениеПодарочныхСертификатов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
	
	РезультатЗапроса = Запрос.Выполнить();
Возврат НЕ РезультатЗапроса.Пустой();	
КонецФункции

Функция ЕстьДругойТипОплаты(ДокСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧекККМОплата.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
		|ГДЕ
		|	ЧекККМОплата.Ссылка = &Ссылка
		|	И НЕ ЧекККМОплата.ВидОплаты = &ВидОплаты";
	Запрос.УстановитьПараметр("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом);
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
Возврат НЕ РезультатЗапроса.Пустой();	

КонецФункции

#Область ФункционалПечати

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТоварныйЧек") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТоварныйЧек",
				"Товарный чек",
				ПечатьЧека(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,,Истина);
		
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТоварныйЧекДляПД") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТоварныйЧекДляПД",
				"Товарный чек для принтера документов",
				ПечатьТоварногоЧекаДляПД(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,,Истина);

	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ГарантийныйТалон") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ГарантийныйТалон",
				"Гарантийный талон",
				ПечатьГарантийныйТалон(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,,Истина);

	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НН") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НН",
				"НН",
				ПечатьНН(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,,Истина)
		
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьГарантийныйТалон(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
		
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;

	КолонкаКодов       = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	ВыводитьКоды       = ЗначениеЗаполнено(КолонкаКодов);
	ВыводитьУпаковки   = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Чек ККМ';uk='Чек ККМ'", КодЯзыкаПечать);
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЧеККМ_ТоварныйЧек";
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Магазин КАК Магазин,
	|	Документ.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	ВЫБОР КОГДА Документ.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(Документ.Организация)
	|		ИНАЧЕ " + НСтр("ru=ИП ';uk='ІП '", КодЯзыкаПечать) + "
	|		    ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Фамилия, """") = """"
	|				ТОГДА """"
	|			ИНАЧЕ
	|				ФИОФизЛицСрезПоследнихИП.Фамилия + "" "" +
	|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Имя, """") = """"
	|						ТОГДА """"
	|						ИНАЧЕ ВЫРАЗИТЬ(ФИОФизЛицСрезПоследнихИП.Имя КАК СТРОКА(1)) + "". ""
	|				КОНЕЦ
	|				+
	|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Отчество, """") = """"
	|						ТОГДА """"
	|						ИНАЧЕ ВЫРАЗИТЬ(ФИОФизЛицСрезПоследнихИП.Отчество КАК СТРОКА(1)) + "".""
	|				КОНЕЦ
	|			КОНЕЦ
	|			+ """"
	|	КОНЕЦ КАК НаименованиеОрганизации,
	|	ВЫБОР КОГДА Документ.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрганизацияЮридическоеЛицо,
	|	Документ.Организация КАК Организация,
	|	Документ.СуммаДокумента КАК СуммаДокумента,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Магазин) КАК МагазинПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ОрганизацияПредставление,
	|	Документ.Ответственный.ФизЛицо КАК Ответственный
	|ИЗ
	|	Документ.ЧекККМ КАК Документ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних() КАК ФИОФизЛицСрезПоследнихИП
	|ПО
	|	Документ.Организация = ФИОФизЛицСрезПоследнихИП.ФизЛицо
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|	И Документ.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка, Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.Представление КАК Товар,
	|	" + ?(ВыводитьКоды, "ТаблицаТовары.Номенклатура." + КолонкаКодов +" КАК КолонкаКодов,", "") + "
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ТаблицаТовары.Номенклатура.ВидНоменклатуры.СрокГарантии КАК СрокГарантии,
	|	ТаблицаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ.Серии КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|	И ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|	И ТаблицаТовары.Номенклатура.ВидНоменклатуры.СрокГарантии > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка");
	
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.ПолучитьМакет("Документ.ЧекККМ.ПФ_MXL_ГарантийныйТалон", КодЯзыкаПечать);
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	Если Результаты[1].Пустой() Тогда
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = НСтр("ru='Нет товаров с гарантийным сроком';uk='Немає товарів з гарантійним строком'", КодЯзыкаПечать);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	ОбластьПоставщик = Макет.ПолучитьОбласть("Поставщик");
	ОбластьИНН       = Макет.ПолучитьОбласть("ИНН");
	ОбластьМагазин   = Макет.ПолучитьОбласть("Магазин");
	
	ОбластьШапкаНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьШапкаКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьШапкаДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                  + Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	ОбластьСтрокаНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьСтрокаКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьСтрокаДанных = Макет.ПолучитьОбласть("Строка|Данные");
	
	// Вывести Итого.
	ОбластьИтогоНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьИтогоКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьИтогоДанных = Макет.ПолучитьОбласть("Итого|Данные");
	
	ОбластьПодписей      = Макет.ПолучитьОбласть("Подписи");
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнымЧастям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ВыборкаПоДокументам.ЭтоВозврат Тогда
			СинонимДокумента   = НСтр("ru='Гарантийный талон (возврат)';uk='Гарантійний талон (повернення)'", КодЯзыкаПечать);
		Иначе
			СинонимДокумента   = НСтр("ru='Гарантийный талон';uk='Гарантійний талон'", КодЯзыкаПечать);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента, КодЯзыкаПечать);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		СведенияОПоставщике = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.Дата);
		
		Если ВыборкаПоДокументам.ОрганизацияЮридическоеЛицо Тогда
			ОбластьПоставщик.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование");
		Иначе
			ОбластьПоставщик.Параметры.ПредставлениеПоставщика = ВыборкаПоДокументам.НаименованиеОрганизации;
		КонецЕсли;
		ОбластьПоставщик.Параметры.Поставщик = ВыборкаПоДокументам.Организация;
		ТабличныйДокумент.Вывести(ОбластьПоставщик);
		

		ОбластьИНН.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ТабличныйДокумент.Вывести(ОбластьИНН);

		ОбластьМагазин.Параметры.ПредставлениеМагазина = ВыборкаПоДокументам.МагазинПредставление;
		ОбластьМагазин.Параметры.Магазин = ВыборкаПоДокументам.Магазин;
		ТабличныйДокумент.Вывести(ОбластьМагазин);
		
		//Шапка
		
		ТабличныйДокумент.Вывести(ОбластьШапкаНомера);
		Если ВыводитьКоды Тогда
			ОбластьШапкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ТабличныйДокумент.Присоединить(ОбластьШапкаКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьШапкаДанных);
		
		//СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;

			ОбластьСтрокаНомера.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Вывести(ОбластьСтрокаНомера);

			Если ВыводитьКоды Тогда
				
				ОбластьСтрокаКодов.Параметры.Артикул = ВыборкаПоСтрокамТЧ["КолонкаКодов"];
				ТабличныйДокумент.Присоединить(ОбластьСтрокаКодов);
				
			КонецЕсли;

			ОбластьСтрокаДанных.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаДанных.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаДанных);
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьИтогоНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьИтогоКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьИтогоДанных);
		
		//ПОДПИСИ
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

Функция ПечатьНН(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
		
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;

	КолонкаКодов       = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	ВыводитьУпаковки   = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Счет на оплату';uk='Рахунок на оплату'", КодЯзыкаПечать);
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НН";
	
		Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровТовары.Номенклатура КАК Номенклатура,
		|	СУММА(РеализацияТоваровТовары.Количество) КАК Количество,
		|	РеализацияТоваровТовары.Номенклатура.КодПоУКТЗЕД,
		|	СУММА(РеализацияТоваровТовары.Сумма) КАК Сумма,
		|	СУММА(РеализацияТоваровТовары.СуммаНДС) КАК СуммаНДС,
		|	РеализацияТоваровТовары.СтавкаНДС КАК СтавкаНДС 
		|ИЗ
		|	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
		|ГДЕ
		|	РеализацияТоваровТовары.Ссылка = &МассивОбъектов
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияТоваровТовары.Номенклатура,
		|	РеализацияТоваровТовары.Номенклатура.КодПоУКТЗЕД,
		|	РеализацияТоваровТовары.СтавкаНДС";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Таб = РезультатЗапроса.ВЫгрузить();
	
	
Макет = УправлениеПечатью.ПолучитьМакет("Документ.РеализацияТоваров.НН", КодЯзыкаПечать);
Область = Макет.ПолучитьОбласть("ОбластьЗаголовок");
ТабличныйДокумент.Вывести(Область); 


Область = Макет.ПолучитьОбласть("ОбластьСтрока");

Для Каждого СтрСостава Из Таб Цикл 
     Область.Параметры.Заполнить(СтрСостава);
     ТабличныйДокумент.Вывести(Область); 
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	 
КонецЦикла;

Область = Макет.ПолучитьОбласть("ОбластьИтог");
Область.Параметры.КоличествоИтого = Таб.Итог("Количество");
Область.Параметры.СуммаИтого = Таб.Итог("Сумма");
Область.Параметры.СуммаНДСИтого = Таб.Итог("СуммаНДС");

ТабличныйДокумент.Вывести(Область);
	
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, МассивОбъектов);
		
	
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной формой.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьЧека(МассивОбъектов, ОбъектыПечати, ПараметрыВывода) Экспорт
		
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;

	КолонкаКодов       = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	ВыводитьКоды       = ЗначениеЗаполнено(КолонкаКодов);
	ВыводитьУпаковки   = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Чек ККМ';uk='Чек ККМ'", КодЯзыкаПечать);
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЧеККМ_ТоварныйЧек";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Магазин КАК Магазин,
	|	Документ.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	ВЫБОР
	|		КОГДА Документ.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Документ.Организация)
	|		ИНАЧЕ ""ИП "" + ВЫБОР
	|				КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Фамилия, """") = """"
	|					ТОГДА """"
	|				ИНАЧЕ ФИОФизЛицСрезПоследнихИП.Фамилия + "" "" + ВЫБОР
	|						КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Имя, """") = """"
	|							ТОГДА """"
	|						ИНАЧЕ (ВЫРАЗИТЬ(ФИОФизЛицСрезПоследнихИП.Имя КАК СТРОКА(1))) + "". ""
	|					КОНЕЦ + ВЫБОР
	|						КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Отчество, """") = """"
	|							ТОГДА """"
	|						ИНАЧЕ (ВЫРАЗИТЬ(ФИОФизЛицСрезПоследнихИП.Отчество КАК СТРОКА(1))) + "".""
	|					КОНЕЦ
	|			КОНЕЦ + """"
	|	КОНЕЦ КАК НаименованиеОрганизации,
	|	ВЫБОР
	|		КОГДА Документ.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрганизацияЮридическоеЛицо,
	|	Документ.Организация КАК Организация,
	|	Документ.СуммаДокумента КАК СуммаДокумента,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Магазин) КАК МагазинПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ОрганизацияПредставление,
	|	Документ.Ответственный.ФизЛицо КАК Ответственный
	|ИЗ
	|	Документ.ЧекККМ КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(, ) КАК ФИОФизЛицСрезПоследнихИП
	|		ПО Документ.Организация = ФИОФизЛицСрезПоследнихИП.ФизЛицо
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|	И Документ.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОплата.ВидОплаты.ТипОплаты КАК ТипОплаты,
	|	ТаблицаОплата.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаОплата.ВидОплаты.ТипОплаты) КАК ПредставлениеТипОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|					И ТаблицаОплата.ВидОплаты.ТипОплаты <> ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|				ТОГДА ТаблицаОплата.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезналичныхОплат,
	|	СУММА(ТаблицаОплата.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ТаблицаОплата
	|ГДЕ
	|	ТаблицаОплата.Ссылка В(&МассивОбъектов)
	|	И ТаблицаОплата.Ссылка.Проведен
	|	И НЕ(ТаблицаОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				И ТаблицаОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплата.Ссылка,
	|	ТаблицаОплата.ВидОплаты.ТипОплаты
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(ТаблицаОплата.Сумма) = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.Представление КАК Товар,
	|	ТаблицаТовары.Номенклатура.Код КАК КолонкаКодов,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Упаковка.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.СуммаБонусныхБалловНачислено КАК СуммаБонусныхБалловНачислено,
	|	ТаблицаТовары.СуммаБонусныхБалловСписано КАК СуммаБонусныхБалловСписано,
	|	ВЫБОР
	|		КОГДА ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.ПериодДействия = ЗНАЧЕНИЕ(перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаТовары.Ссылка.Дата, ДЕНЬ, ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.КоличествоПериодовДействия)
	|		КОГДА ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.ПериодДействия = ЗНАЧЕНИЕ(перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаТовары.Ссылка.Дата, НЕДЕЛЯ, ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.КоличествоПериодовДействия)
	|		КОГДА ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.ПериодДействия = ЗНАЧЕНИЕ(перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаТовары.Ссылка.Дата, МЕСЯЦ, ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.КоличествоПериодовДействия)
	|		КОГДА ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.ПериодДействия = ЗНАЧЕНИЕ(перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаТовары.Ссылка.Дата, КВАРТАЛ, ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.КоличествоПериодовДействия)
	|		КОГДА ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.ПериодДействия = ЗНАЧЕНИЕ(перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаТовары.Ссылка.Дата, ДЕКАДА, ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.КоличествоПериодовДействия)
	|		КОГДА ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.ПериодДействия = ЗНАЧЕНИЕ(перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаТовары.Ссылка.Дата, ГОД, ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.КоличествоПериодовДействия)
	|		КОГДА ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.ПериодДействия = ЗНАЧЕНИЕ(перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаТовары.Ссылка.Дата, ПОЛУГОДИЕ, ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.КоличествоПериодовДействия)
	|	КОНЕЦ КАК ПериодДействия,
	|	ВЫБОР
	|		КОГДА ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаТовары.Ссылка.Дата, ДЕНЬ, ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаТовары.Ссылка.Дата, НЕДЕЛЯ, ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаТовары.Ссылка.Дата, МЕСЯЦ, ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаТовары.Ссылка.Дата, КВАРТАЛ, ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаТовары.Ссылка.Дата, ДЕКАДА, ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаТовары.Ссылка.Дата, ГОД, ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаТовары.Ссылка.Дата, ПОЛУГОДИЕ, ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
	|	КОНЕЦ КАК ПериодОтсрочкиНачалаДействия
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.СкидкиНаценки КАК ЧекККМСкидкиНаценки
	|		ПО ТаблицаТовары.Ссылка = ЧекККМСкидкиНаценки.Ссылка
	|			И ТаблицаТовары.НомерСтроки = ЧекККМСкидкиНаценки.КлючСвязи
	|			И (ЧекККМСкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности <> ЗНАЧЕНИЕ(Справочник.ПрограммыЛояльности.ПустаяСсылка))
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка"
	);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.ПолучитьМакет("Документ.ЧекККМ.ПФ_MXL_Накладная", КодЯзыкаПечать);

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПоставщик = Макет.ПолучитьОбласть("Поставщик");
	ОбластьИНН       = Макет.ПолучитьОбласть("ИНН");
	ОбластьМагазин   = Макет.ПолучитьОбласть("Магазин");
	
	ОбластьШапкаНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьШапкаКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьШапкаДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьШапкаСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьШапкаСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                  + Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	ОбластьСтрокаНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьСтрокаКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьСтрокаДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСтрокаСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСтрокаСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
	
	// Вывести Итого.
	ОбластьИтогоНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьИтогоКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьИтогоДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьИтогоСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьИтогоСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
	
	ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьПодписей      = Макет.ПолучитьОбласть("Подписи");
	
	ОбластьОплата = Макет.ПолучитьОбласть("Оплата");
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнойЧастиОплата = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоТабличнымЧастям = Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ВыборкаПоДокументам.ЭтоВозврат Тогда
			СинонимДокумента   = НСтр("ru='Товарный чек (возврат)';uk='Товарний чек (повернення)'", КодЯзыкаПечать);
		Иначе
			СинонимДокумента   = НСтр("ru='Товарный чек';uk='Товарний чек'", КодЯзыкаПечать);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента, КодЯзыкаПечать);

		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		СведенияОПоставщике = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.Дата);
		
		Если ВыборкаПоДокументам.ОрганизацияЮридическоеЛицо Тогда
			ОбластьПоставщик.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование");
		Иначе
			ОбластьПоставщик.Параметры.ПредставлениеПоставщика = ВыборкаПоДокументам.НаименованиеОрганизации;
		КонецЕсли;
		ОбластьПоставщик.Параметры.Поставщик = ВыборкаПоДокументам.Организация;
		ТабличныйДокумент.Вывести(ОбластьПоставщик);
		

		ОбластьИНН.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ТабличныйДокумент.Вывести(ОбластьИНН);

		ОбластьМагазин.Параметры.ПредставлениеМагазина = ВыборкаПоДокументам.МагазинПредставление;
		ОбластьМагазин.Параметры.Магазин = ВыборкаПоДокументам.Магазин;
		ТабличныйДокумент.Вывести(ОбластьМагазин);
		
		//Шапка
		
		ТабличныйДокумент.Вывести(ОбластьШапкаНомера);
		Если ВыводитьКоды Тогда
			ОбластьШапкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ТабличныйДокумент.Присоединить(ОбластьШапкаКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьШапкаДанных);
		ТабличныйДокумент.Присоединить(ОбластьШапкаСкидок);
		ТабличныйДокумент.Присоединить(ОбластьШапкаСуммы);
		
		
		ВсегоНаименований = 0;
		Сумма             = 0;
		ВсегоСкидок       = 0;
		ВсегоБезСкидок    = 0;
		
		//СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;

			ОбластьСтрокаНомера.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Вывести(ОбластьСтрокаНомера);

			Если ВыводитьКоды Тогда
				
				ОбластьСтрокаКодов.Параметры.Артикул = ВыборкаПоСтрокамТЧ["КолонкаКодов"];
				ТабличныйДокумент.Присоединить(ОбластьСтрокаКодов);
				
			КонецЕсли;

			ОбластьСтрокаДанных.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаДанных.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаДанных);
			
			Скидка = ВыборкаПоСтрокамТЧ.Цена * ВыборкаПоСтрокамТЧ.Количество - ВыборкаПоСтрокамТЧ.Сумма;
			ОбластьСтрокаСкидок.Параметры.Скидка         = Скидка;
			ОбластьСтрокаСкидок.Параметры.СуммаБезСкидки = ВыборкаПоСтрокамТЧ.Сумма + Скидка;
			ТабличныйДокумент.Присоединить(ОбластьСтрокаСкидок);

			ОбластьСтрокаСуммы.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			Если ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.ПериодДействия) тогда 
				ОбластьСтрокаСуммы.Параметры.ПериодДействия = Формат(ВыборкаПоСтрокамТЧ.ПериодДействия,"ДФ=dd.MM.yy");	
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.ПериодОтсрочкиНачалаДействия) тогда 
				ОбластьСтрокаСуммы.Параметры.ПериодОтсрочкиНачалаДействия = Формат(ВыборкаПоСтрокамТЧ.ПериодОтсрочкиНачалаДействия,"ДФ=dd.MM.yy");	
			КонецЕсли;	
			ТабличныйДокумент.Присоединить(ОбластьСтрокаСуммы);
			
			ВсегоНаименований = ВсегоНаименований + 1;
			
			Сумма          = Сумма + ВыборкаПоСтрокамТЧ.Сумма;
			ВсегоСкидок    = ВсегоСкидок + Скидка;
			ВсегоБезСкидок = Сумма + ВсегоСкидок;
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьИтогоНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьИтогоКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьИтогоДанных);
		ОбластьИтогоСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьИтогоСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабличныйДокумент.Присоединить(ОбластьИтогоСкидок);
		ОбластьИтогоСуммы.Параметры.Всего = Сумма;
		ТабличныйДокумент.Присоединить(ОбластьИтогоСуммы);
		
		// Вывести Сумму прописью.
		
		ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%, на сумму %Итого%';uk='Усього найменувань %ВсегоНаименований%, на суму %Итого%'", КодЯзыкаПечать);
		
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%", ФормированиеПечатныхФормСервер.ФорматСумм(Сумма));
		
		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
		ОбластьСуммаПрописью.Параметры.СуммаПрописью  = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(Сумма, , КодЯзыкаПечать);
		
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		//Оплата
		Если ВыборкаПоТабличнойЧастиОплата.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			ОплатаДобавлена = Ложь;
			СтрокаОплаты = "";
			СуммаБезналичныхОплат = 0;
			СуммаОплат = 0;
			
			ВыборкаПоОплата = ВыборкаПоТабличнойЧастиОплата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоОплата.Следующий() Цикл
				Если ОплатаДобавлена Тогда
					СтрокаОплаты = СтрокаОплаты + Символы.ПС;
				КонецЕсли;
				ОплатаДобавлена = Истина;
				ПредставлениеТипОплаты = Локализация.ПолучитьЛокализованноеПредставление(ВыборкаПоОплата.ТипОплаты, КодЯзыкаПечать);
				СтрокаОплаты = СтрокаОплаты + ПредставлениеТипОплаты + ": "  + Формат(ВыборкаПоОплата.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				СуммаБезналичныхОплат = СуммаБезналичныхОплат + ВыборкаПоОплата.СуммаБезналичныхОплат;
				СуммаОплат = СуммаОплат + ВыборкаПоОплата.Сумма;
			КонецЦикла;
			
			Если ВыборкаПоДокументам.ЭтоВозврат Тогда
				СуммаНаличных = ВыборкаПоДокументам.СуммаДокумента - СуммаБезналичныхОплат;
				Если СуммаНаличных > 0  Тогда
					Если ОплатаДобавлена Тогда
						СтрокаОплаты = СтрокаОплаты + Символы.ПС;
					КонецЕсли;
					СтрокаОплаты = СтрокаОплаты +  НСтр("ru = 'Наличные: ';uk='Готівка: '", КодЯзыкаПечать)  + Формат(СуммаНаличных, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				КонецЕсли;
				ОбластьОплата.Параметры.Сдача = "0.00";
			Иначе
				ОбластьОплата.Параметры.Сдача = Формат(СуммаОплат - ВыборкаПоДокументам.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			КонецЕсли;
			
			ОбластьОплата.Параметры.Оплата = СтрокаОплаты;
			ТабличныйДокумент.Вывести(ОбластьОплата);
		КонецЕсли;
		
		
		//ПОДПИСИ
		ОбластьПодписей.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьПодписей.Параметры.ФИО = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

#Область ПечатьЧекаИКопииЧекаНаНефискальномПринтере

// Функция формирует табличный документ с печатной формой узкого чека для печати на принтерах с чековой лентой.
//
Функция ПечатьТоварногоЧекаДляПД(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)

	Перем ДанныеПРРО;
	
	Запрос = Новый Запрос(ТекстЗапросаТоварногоЧекаДляПД());
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ПервыйДокумент = Истина;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();

	ВыборкаОбщая = РезультатыЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаОбщая.Следующий() Цикл

		Если ВыборкаОбщая.ОбработчикДрайвера = Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикDeviceManagerФискальныйРегистратор Тогда

			ТабличныйДокумент = Новый ТабличныйДокумент;	//	чеков может быть много!
			ТабличныйДокумент.Вывод = ИспользованиеВывода.Разрешить;
			ТабличныйДокумент.ИмяПараметровПечати = "ПРРО_ПАРАМЕТРЫ_ПЕЧАТИ_ЧЕК_ПРИНТЕР";

			ВыборкаПоДокументам = ВыборкаОбщая.Выбрать();

			Пока ВыборкаПоДокументам.Следующий() Цикл

				ДанныеХранилища = Документы.ЧекККМ.ПолучитьДанныеХранилища(ВыборкаПоДокументам.Хранилище, Ложь);

				Если ДанныеХранилища.Свойство("ДанныеПРРО", ДанныеПРРО) И НЕ ДанныеПРРО.ОтветПРРО.Количество() = 0 Тогда

					ПодключаемоеОборудованиеDeviceManagerФискальныйРегистраторСервер.ПолучитьТабличныйДокументЧек(
						  ДанныеПРРО.ОтветПРРО
						, ДанныеПРРО.ПараметрыЗакрытия
						, ""
						, ДанныеПРРО.URL
						, ТабличныйДокумент
						, Истина
					);

				КонецЕсли;

			КонецЦикла;

		Иначе

			ТабличныйДокумент = ПечатьНаПринтерЧеков(ВыборкаОбщая, РезультатыЗапроса, ОбъектыПечати, ПараметрыВывода, ПервыйДокумент);

		КонецЕсли;

	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции

//	LNK 25.10.2023 15:34:28
Функция ПечатьНаПринтерЧеков(ВыборкаОбщая, РезультатыЗапроса, ОбъектыПечати, ПараметрыВывода, ПервыйДокумент)
		
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;

	ВыводитьУпаковки   = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = "Чек ККМ";
	
	Макет = УправлениеПечатью.ПолучитьМакет("Документ.ЧекККМ.ПФ_MXL_ПД_ЧекПокупателя", КодЯзыкаПечать);
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЧеККМ_ТоварныйЧекДляПД";

	ВыборкаПоДокументам = ВыборкаОбщая.Выбрать();

	ВыборкаПоТабличнойЧастиОплата = РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоТабличнымЧастям = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка", ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;

		ШиринаЛенты = ВыборкаПоДокументам.ШиринаЛенты;

		Если ШиринаЛенты = 0 Тогда

			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"У каси %1 документ (%2) не задана ширина стрічки",
				ВыборкаПоДокументам.КассаККМ,
				ВыборкаПоДокументам.Ссылка
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст);

			Продолжить;

		КонецЕсли;

		ОбластьШапкаЧека         = Макет.ПолучитьОбласть("ШапкаЧека|_"         + ШиринаЛенты);
		ОбластьТелоЧека          = Макет.ПолучитьОбласть("ТелоЧека|_"          + ШиринаЛенты);
		ОбластьТелоЧекаСкидка    = Макет.ПолучитьОбласть("ТелоЧекаСкидка|_"    + ШиринаЛенты);
		ОбластьТелоЧекаОтступ    = Макет.ПолучитьОбласть("ТелоЧекаОтступ|_"    + ШиринаЛенты);
		ОбластьПодвалЧека        = Макет.ПолучитьОбласть("ПодвалЧека|_"        + ШиринаЛенты);
		ОбластьПодвалЧекаОплата  = Макет.ПолучитьОбласть("ПодвалЧекаОплата|_"  + ШиринаЛенты);
		ОбластьПодвалЧекаОстаток = Макет.ПолучитьОбласть("ПодвалЧекаОстаток|_" + ШиринаЛенты);
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ВыборкаПоДокументам.ЭтоВозврат Тогда

				СинонимДокумента   = "Чек (повернення)";

		Иначе	СинонимДокумента   = "Чек";

		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьШапкаЧека.Параметры.Заголовок = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента, КодЯзыкаПечать);

		СведенияОбОрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.Дата);
		
		ОбластьШапкаЧека.Параметры.Организация    = ВыборкаПоДокументам.НаименованиеОрганизации;
		ОбластьШапкаЧека.Параметры.ИНН			  = СведенияОбОрганизации.ИНН;
		ОбластьШапкаЧека.Параметры.НомерЧекаККМ	  = "ФН: " + Формат(ВыборкаПоДокументам.НомерЧекаККМ, "ЧН=0; ЧГ=");
		ОбластьШапкаЧека.Параметры.Магазин		  = СокрЛП(ВыборкаПоДокументам.Магазин) + Символы.ПС + СокрЛП(ВыборкаПоДокументам.АдресМагазина);
		ТабличныйДокумент.Вывести(ОбластьШапкаЧека);
		
		ВсегоНаименований = 0;
		Сумма             = 0;
		ВсегоСкидок       = 0;
		ВсегоБезСкидок    = 0;

		//СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл

			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.Номенклатура) Тогда

				Продолжить;

			КонецЕсли;

			ОбластьТелоЧека.Параметры.НаименованиеТовара = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление)
														 + "(" + ВыборкаПоСтрокамТЧ.ЕдиницаИзмерения + ")";
			ОбластьТелоЧека.Параметры.КоличествоЦена     = Формат( ВыборкаПоСтрокамТЧ.Количество, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧН=; ЧГ=0")
														 + " х "
														 + Формат( ВыборкаПоСтрокамТЧ.Цена, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");

			КонечнаяСкидка =  ВыборкаПоСтрокамТЧ.Количество *  ВыборкаПоСтрокамТЧ.Цена -  ВыборкаПоСтрокамТЧ.Сумма;
			ТабличныйДокумент.Вывести(ОбластьТелоЧека);

			Если КонечнаяСкидка <> 0 Тогда

				ОбластьТелоЧекаСкидка.Параметры.ЗагСкидка = ?(КонечнаяСкидка > 0, НСтр("ru='Скидка:';uk='Знижка:'", КодЯзыкаПечать), НСтр("ru='Надбавка:';uk='Надбавка:'", КодЯзыкаПечать));
				ОбластьТелоЧекаСкидка.Параметры.Скидка    = Формат(?(КонечнаяСкидка > 0, КонечнаяСкидка, -КонечнаяСкидка), "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				ТабличныйДокумент.Вывести(ОбластьТелоЧекаСкидка);

			КонецЕсли;

			ТабличныйДокумент.Вывести(ОбластьТелоЧекаОтступ);

		КонецЦикла;

		// ПОДВАЛ
		ОбластьПодвалЧека.Параметры.Итог = Формат(ВыборкаПоДокументам.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		ТабличныйДокумент.Вывести(ОбластьПодвалЧека);

		СуммаБезналичныхОплат = 0;
		СуммаОплат = 0;

		//Оплата
		Если ВыборкаПоТабличнойЧастиОплата.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда

			ВыборкаПоОплата = ВыборкаПоТабличнойЧастиОплата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоОплата.Следующий() Цикл
				ОбластьПодвалЧекаОплата.Параметры.ТипОплаты = Локализация.ПолучитьЛокализованноеПредставление(ВыборкаПоОплата.ТипОплаты, КодЯзыкаПечать) + ":";
				ОбластьПодвалЧекаОплата.Параметры.Оплата = Формат(ВыборкаПоОплата.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				ТабличныйДокумент.Вывести(ОбластьПодвалЧекаОплата);
				СуммаБезналичныхОплат = СуммаБезналичныхОплат + ВыборкаПоОплата.СуммаБезналичныхОплат;
				СуммаОплат = СуммаОплат + ВыборкаПоОплата.Сумма;
			КонецЦикла;
			
			Если ВыборкаПоДокументам.ЭтоВозврат Тогда
				СуммаНаличных = ВыборкаПоДокументам.СуммаДокумента - СуммаБезналичныхОплат;
				Если СуммаНаличных > 0  Тогда
					ОбластьПодвалЧекаОплата.Параметры.ТипОплаты = НСтр("Наличные: ';uk='Готівка: '", КодЯзыкаПечать);
					ОбластьПодвалЧекаОплата.Параметры.Оплата = Формат(СуммаНаличных, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
					ТабличныйДокумент.Вывести(ОбластьПодвалЧекаОплата);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		//ПОДПИСИ
		Если ВыборкаПоДокументам.ЭтоВозврат Тогда
			ОбластьПодвалЧекаОстаток.Параметры.Сдача = "0.00";
		Иначе
			ОбластьПодвалЧекаОстаток.Параметры.Сдача = Формат(СуммаОплат - ВыборкаПоДокументам.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		КонецЕсли;
		
		ОбластьПодвалЧекаОстаток.Параметры.Сотрудник = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		ТабличныйДокумент.Вывести(ОбластьПодвалЧекаОстаток);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции

//	LNK 25.10.2023 15:43:04
Функция ТекстЗапросаТоварногоЧекаДляПД()

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Магазин КАК Магазин,
	|	Документ.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	ВЫБОР
	|		КОГДА Документ.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Документ.Организация)
	|		ИНАЧЕ ""ФОП "" + ВЫБОР
	|				КОГДА ЕСТЬNULL(ТаблицаФИО.Фамилия, """") = """"
	|					ТОГДА """"
	|				ИНАЧЕ ТаблицаФИО.Фамилия + "" "" + ВЫБОР
	|						КОГДА ЕСТЬNULL(ТаблицаФИО.Имя, """") = """"
	|							ТОГДА """"
	|						ИНАЧЕ (ВЫРАЗИТЬ(ТаблицаФИО.Имя КАК СТРОКА(1))) + "". ""
	|					КОНЕЦ + ВЫБОР
	|						КОГДА ЕСТЬNULL(ТаблицаФИО.Отчество, """") = """"
	|							ТОГДА """"
	|						ИНАЧЕ (ВЫРАЗИТЬ(ТаблицаФИО.Отчество КАК СТРОКА(1))) + "".""
	|					КОНЕЦ
	|			КОНЕЦ + """"
	|	КОНЕЦ КАК НаименованиеОрганизации,
	|	ВЫБОР
	|		КОГДА Документ.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрганизацияЮридическоеЛицо,
	|	Документ.Организация КАК Организация,
	|	Документ.СуммаДокумента КАК СуммаДокумента,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Магазин) КАК МагазинПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ОрганизацияПредставление,
	|	Документ.Ответственный.ФизЛицо КАК Ответственный,
	|	Документ.КассаККМ КАК КассаККМ,
	|	Документ.КассаККМ.ШиринаЛенты КАК ШиринаЛенты,
	|	ВЫБОР
	|		КОГДА Документ.ОбработчикДрайвера = ЗНАЧЕНИЕ(Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(Документ.КассаККМ.ПодключаемоеОборудование.ОбработчикДрайвера, ЗНАЧЕНИЕ(Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ПустаяСсылка))
	|		ИНАЧЕ Документ.ОбработчикДрайвера
	|	КОНЕЦ КАК ОбработчикДрайвера,
	|	Документ.Хранилище КАК Хранилище,
	|	Документ.НомерЧекаККМ КАК НомерЧекаККМ,
	|	ЕСТЬNULL(ТаблицаКонтакты.Представление, """") КАК АдресМагазина
	|ИЗ
	|	Документ.ЧекККМ КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(, ) КАК ТаблицаФИО
	|		ПО Документ.Организация = ТаблицаФИО.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины.КонтактнаяИнформация КАК ТаблицаКонтакты
	|		ПО Документ.Магазин = ТаблицаКонтакты.Ссылка
	|			И (ТаблицаКонтакты.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресМагазина))
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|	И Документ.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбработчикДрайвера,
	|	Ссылка,
	|	Дата
	|ИТОГИ
	|	КОЛИЧЕСТВО(Ссылка)
	|ПО
	|	ОбработчикДрайвера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОплата.ВидОплаты.ТипОплаты КАК ТипОплаты,
	|	ТаблицаОплата.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаОплата.ВидОплаты.ТипОплаты) КАК ПредставлениеТипОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|					И ТаблицаОплата.ВидОплаты.ТипОплаты <> ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|				ТОГДА ТаблицаОплата.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезналичныхОплат,
	|	СУММА(ТаблицаОплата.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ТаблицаОплата
	|ГДЕ
	|	ТаблицаОплата.Ссылка В(&МассивОбъектов)
	|	И ТаблицаОплата.Ссылка.Проведен
	|	И НЕ(ТаблицаОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				И ТаблицаОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплата.Ссылка,
	|	ТаблицаОплата.ВидОплаты.ТипОплаты
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(ТаблицаОплата.Сумма) = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.Представление КАК Товар,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Упаковка.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка"
	;
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область ПечатьКопииЧекаНаФискальномРегистраторе

Функция ТекстПечатиЧекаНаФР(МассивОбъектов, ШиринаЛенты) Экспорт
	
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм();
	
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	
	Результаты = ТекстПечатиЧекаНаФР_РезультатыЗапроса(МассивОбъектов);
	
	ТекстовыйДокумент	= Новый ТекстовыйДокумент;
//	МакетЧекаККМ		= Документы.ЧекККМ.ПолучитьМакет("ПФ_TXT_ФР_ЧекПокупателя");	//	получаем макет
	МакетЧекаККМ		= ПолучитьМакет("ПФ_TXT_ФР_ЧекПокупателя");	//	получаем макет
	
	ОбластьШапкаЧека	= МакетЧекаККМ.ПолучитьОбласть("ШапкаЧека"  + ШиринаЛенты);
	ОбластьТелоЧека		= МакетЧекаККМ.ПолучитьОбласть("ТелоЧека"   + ШиринаЛенты);
	ОбластьСкидкаЧека	= МакетЧекаККМ.ПолучитьОбласть("СкидкаЧека" + ШиринаЛенты);
	ОбластьПодвалЧека	= МакетЧекаККМ.ПолучитьОбласть("ПодвалЧека" + ШиринаЛенты);
	ОбластьРазрывЧека	= МакетЧекаККМ.ПолучитьОбласть("РазрывЧека" + ШиринаЛенты);
	ОбластьПогашения	= МакетЧекаККМ.ПолучитьОбласть("Погашения"  + ШиринаЛенты);
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнойЧастиОплата = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоТабличнымЧастям = Результаты[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоПогашениям = Результаты[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТекстовыйДокумент.Вывести(ОбластьРазрывЧека);
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;

		Если ВыборкаПоДокументам.ЭтоВозврат Тогда

				СинонимДокумента   = "Товарний чек (повернення)";

		Иначе	СинонимДокумента   = "Товарний чек";

		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьШапкаЧека.Параметры.Заголовок = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента, КодЯзыкаПечать, Истина);
		СведенияОПоставщике = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.Дата);
		ОбластьШапкаЧека.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ОбластьШапкаЧека.Параметры.Организация = ВыборкаПоДокументам.Организация;
		
		ТекстовыйДокумент.Вывести(ОбластьШапкаЧека);

	//	СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл

			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.Номенклатура) Тогда

				Продолжить;

			КонецЕсли;

			Если ВыборкаПоСтрокамТЧ.ПодарочныйСертификат = Истина Тогда

				ОбластьТелоЧека.Параметры.НаименованиеТовара = "ПС "
					+ СокрЛП(ВыборкаПоСтрокамТЧ.НоменклатураПредставление)
					+ " (" + Формат(ВыборкаПоСтрокамТЧ.Номинал, "ЧДЦ=; ЧГ=") + ")"
				;

			Иначе

				ОбластьТелоЧека.Параметры.НаименованиеТовара = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
					ВыборкаПоСтрокамТЧ.НоменклатураПредставление,
					ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление
				);

			КонецЕсли;

			ОбластьТелоЧека.Параметры.НаименованиеТовара = СокрЛП(ОбластьТелоЧека.Параметры.НаименованиеТовара) + ":";

			ОбластьТелоЧека.Параметры.КоличествоЦена =
				Формат(ВыборкаПоСтрокамТЧ.Количество, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧН=; ЧГ=0")
				+ " х "
				+ Формат(ВыборкаПоСтрокамТЧ.Цена, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			
			ТекстовыйДокумент.Вывести(ОбластьТелоЧека);
			
			КонечнаяСкидка =  ВыборкаПоСтрокамТЧ.Количество *  ВыборкаПоСтрокамТЧ.Цена -  ВыборкаПоСтрокамТЧ.Сумма;

			Если НЕ КонечнаяСкидка = 0 Тогда

				ОбластьСкидкаЧека.Параметры.ЗагСкидка = ?(КонечнаяСкидка > 0,  "Знижка:", "Надбавка");
				ОбластьСкидкаЧека.Параметры.Скидка    = Формат(?(КонечнаяСкидка > 0, КонечнаяСкидка, -КонечнаяСкидка)
					, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			
				ТекстовыйДокумент.Вывести(ОбластьСкидкаЧека);

			КонецЕсли;
			
		КонецЦикла;

		ТекстовыйДокумент.УдалитьСтроку(ТекстовыйДокумент.КоличествоСтрок());
		
		ОбластьПодвалЧека.Параметры.Итог = Формат(ВыборкаПоДокументам.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		
		ОбластьПодвалЧека.Параметры.Сотрудник =  ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		
		ТекстовыйДокумент.Вывести(ОбластьПодвалЧека);

		Если НЕ ВыборкаПоПогашениям.НайтиСледующий(Новый Структура("Ссылка", ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;

		ВыборкаПогашения = ВыборкаПоПогашениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		ОбластьПогашения.Параметры.ТекстПредставления = "ПОГАШЕНI СЕРТИФIКАТИ:";
		ТекстовыйДокумент.Вывести(ОбластьПогашения);

		Пока ВыборкаПогашения.Следующий() Цикл

			ОбластьПогашения.Параметры.ТекстПредставления = ВыборкаПогашения.КодСерийногоНомера + " (" + Формат(ВыборкаПогашения.Номинал, "ЧГ=") + ")";
			ТекстовыйДокумент.Вывести(ОбластьПогашения);
		
		КонецЦикла;

	КонецЦикла;
	
	ТекстПечати = "";
	
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	
	Для Индекс = 1 По КоличествоСтрок Цикл

		ТекстПечати = ТекстПечати + ТекстовыйДокумент.ПолучитьСтроку(Индекс); 

		Если НЕ Индекс = КоличествоСтрок Тогда

			ТекстПечати = ТекстПечати + Символы.ПС; 

		КонецЕсли;

	КонецЦикла;

	Возврат ТекстПечати
	
КонецФункции

//	LNK 01.02.2023 09:30:16
Функция ТекстПечатиЧекаНаФР_РезультатыЗапроса(МассивОбъектов)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Магазин КАК Магазин,
	|	Документ.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	ВЫБОР
	|		КОГДА Документ.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Документ.Организация)
	|		ИНАЧЕ ""ІП "" + ВЫБОР
	|				КОГДА ЕСТЬNULL(ТаблицаФИО.Фамилия, """") = """"
	|					ТОГДА """"
	|				ИНАЧЕ ТаблицаФИО.Фамилия + "" "" + ВЫБОР
	|						КОГДА ЕСТЬNULL(ТаблицаФИО.Имя, """") = """"
	|							ТОГДА """"
	|						ИНАЧЕ (ВЫРАЗИТЬ(ТаблицаФИО.Имя КАК СТРОКА(1))) + "". ""
	|					КОНЕЦ + ВЫБОР
	|						КОГДА ЕСТЬNULL(ТаблицаФИО.Отчество, """") = """"
	|							ТОГДА """"
	|						ИНАЧЕ (ВЫРАЗИТЬ(ТаблицаФИО.Отчество КАК СТРОКА(1))) + "".""
	|					КОНЕЦ
	|			КОНЕЦ + """"
	|	КОНЕЦ КАК НаименованиеОрганизации,
	|	ВЫБОР
	|		КОГДА Документ.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрганизацияЮридическоеЛицо,
	|	Документ.Организация КАК Организация,
	|	Документ.СуммаДокумента КАК СуммаДокумента,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Магазин) КАК МагазинПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ОрганизацияПредставление,
	|	Документ.Ответственный.ФизЛицо КАК Ответственный
	|ИЗ
	|	Документ.ЧекККМ КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(, ) КАК ТаблицаФИО
	|		ПО Документ.Организация = ТаблицаФИО.ФизЛицо
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|	И Документ.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОплата.ВидОплаты.ТипОплаты КАК ТипОплаты,
	|	ТаблицаОплата.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаОплата.ВидОплаты.ТипОплаты) КАК ПредставлениеТипОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|					И ТаблицаОплата.ВидОплаты.ТипОплаты <> ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|				ТОГДА ТаблицаОплата.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезналичныхОплат,
	|	СУММА(ТаблицаОплата.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ТаблицаОплата
	|ГДЕ
	|	ТаблицаОплата.Ссылка В(&МассивОбъектов)
	|	И ТаблицаОплата.Ссылка.Проведен
	|	И НЕ(ТаблицаОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				И ТаблицаОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплата.Ссылка,
	|	ТаблицаОплата.ВидОплаты.ТипОплаты
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(ТаблицаОплата.Сумма) = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.Представление КАК Товар,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Упаковка.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаТовары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|	ТаблицаТовары.Номенклатура.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
	|	ТаблицаТовары.Номенклатура.Номинал КАК Номинал
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Товар КАК Товар,
	|	ТаблицаТовары.НоменклатураПредставление КАК НоменклатураПредставление,
	|	ТаблицаТовары.ХарактеристикаПредставление КАК ХарактеристикаПредставление,
	|	ТаблицаТовары.ПредставлениеБазовойЕдиницыИзмерения КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	0 КАК Номинал,
	|	ЛОЖЬ КАК ПодарочныйСертификат
	|ИЗ
	|	Товары КАК ТаблицаТовары
	|ГДЕ
	|	НЕ(ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|				И ТаблицаТовары.ИспользоватьСерийныеНомера)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Товар,
	|	ТаблицаСерийныеНомера.СерийныйНомер.КодСерийногоНомера,
	|	ТаблицаТовары.ХарактеристикаПредставление,
	|	ТаблицаТовары.ПредставлениеБазовойЕдиницыИзмерения,
	|	ТаблицаТовары.ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Номинал,
	|	ИСТИНА
	|ИЗ
	|	Товары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.СерийныеНомера КАК ТаблицаСерийныеНомера
	|		ПО ТаблицаТовары.Ссылка = ТаблицаСерийныеНомера.Ссылка
	|			И ТаблицаТовары.КлючСвязиСерийныхНомеров = ТаблицаСерийныеНомера.КлючСвязиСерийныхНомеров
	|ГДЕ
	|	ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И ТаблицаТовары.ИспользоватьСерийныеНомера
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСертификатов.СерийныйНомер.КодСерийногоНомера КАК КодСерийногоНомера,
	|	ТаблицаВладельцев.Номинал КАК Номинал,
	|	ТаблицаСертификатов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ.ПогашениеПодарочныхСертификатов КАК ТаблицаСертификатов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаВладельцев
	|		ПО ТаблицаСертификатов.ПодарочныйСертификат = ТаблицаВладельцев.Ссылка
	|ГДЕ
	|	ТаблицаСертификатов.Ссылка В(&МассивОбъектов)
	|	И ТаблицаСертификатов.Ссылка.Проведен
	|	И ТаблицаВладельцев.ИспользоватьСерийныеНомера
	|	И ТаблицаВладельцев.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Номинал
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Товары"
	);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Возврат Запрос.ВыполнитьПакет();

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область РаботаСРеквизитомХранилище

Функция ПолучитьДанныеХранилища(Хранилище = Неопределено, Очистить = Ложь)	Экспорт

	Перем ДанныеХранилища;

	КлючиДанных = Новый Структура;
	КлючиДанных.Вставить("ДанныеРасчёта" , Новый Структура);
	КлючиДанных.Вставить("ОтветЭквайрера", Новый Соответствие);
	КлючиДанных.Вставить("ДанныеПРРО"	 , Новый Соответствие);

	Если ТипЗнч(Хранилище) = Тип("ХранилищеЗначения") Тогда

		ДанныеХранилища = Хранилище.Получить();

	КонецЕсли;

	Если ДанныеХранилища = Неопределено ИЛИ Очистить = Истина Тогда

		ДанныеХранилища = Новый Структура;

	КонецЕсли;

//	Проверим состав структуры..

	Для каждого КлючЗначение Из КлючиДанных Цикл

		Если НЕ ДанныеХранилища.Свойство(КлючЗначение.Ключ) Тогда

			ДанныеХранилища.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);

		КонецЕсли;

	КонецЦикла;

	Возврат ДанныеХранилища;

КонецФункции
	
#КонецОбласти










