
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.ЗаказПоставщику.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	СформироватьСписокРегистровДляКонтроля();

	ЗапасыСервер.ОтразитьДвиженияНоменклатураПоставщиков(ДополнительныеСвойства, Движения, Отказ);

	Если НЕ ДополнительныеСвойства.РазрешитьПрямуюЗакупку = Истина Тогда

		ЗапасыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
		ЗакупкиСервер.ОтразитьЗаказыТоваров(ДополнительныеСвойства, Движения, Отказ);
		
		ДенежныеСредстваСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);

	КонецЕсли; 
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	ДополнительныеСвойства.Вставить("Отказ", Отказ);
	
	Если НЕ ДополнительныеСвойства.РазрешитьПрямуюЗакупку = Истина Тогда

		ЗакупкиСервер.ОбновитьСостояниеОплатыПоступления(Ссылка);

	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
//	LNK 16.02.2017 14:33:05
	ЗаполнениеОбъектовСобытия.ОбщиеДействияПередЗаписью(ЭтотОбъект, Отказ);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	ДополнительныеСвойства.Вставить("РазрешитьПрямуюЗакупку", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "РазрешитьПрямуюЗакупку"));
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
    
    // +HVOYA. 03.03.2017 11:05:49, Львова Е.А.
    Если РежимЗаписи = РежимЗаписиДокумента.Проведение И НДСИсходящийСервер.НуженАвторасчетНДС(Товары, ЦенаВключаетНДС,,,,Неопределено) Тогда

		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		НДСИсходящийСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары, ЭтотОбъект, ЦенаВключаетНДС, ПогрешностиОкругления, "Товары", "грн",,, Неопределено);
		
	КонецЕсли;
    // -HVOYA. 03.03.2017 11:05:54, Львова Е.А.
    
//	LNK 09.09.2016 08:55:37
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() И НЕ ЭтоНовый() Тогда

		Если ВнешниеИсточникиСобытия.ПередачаNavision(Ссылка) Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ «" + СокрЛП(Ссылка) + "» учтён в КСУ Navision! Изменения запрещены. Отказано.", Ссылка,,, Отказ);
			Возврат;

		КонецЕсли;

	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "РегистрацияПередачиВNavision", Ложь) Тогда

	//	LNK 19.10.2016 13:41:35
		ПроверитьВозможностьВоздействияПриНаличииПодчиненных(Отказ, РежимЗаписи, РежимПроведения);

	КонецЕсли;

	ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
		ЭтотОбъект,
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС),
		"СуммаДокумента");
		
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЗакупкиСервер.ДобавитьЭтапОплаты(ЭтотОбъект, ДатаПоступления);
	КонецЕсли;

//	LNK 05.09.2016 11:59:43
	РеквизитыПоставщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "Поставщик, РазрешитьПрямуюЗакупку");

	Если НЕ РеквизитыПоставщика.Поставщик = Истина Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Контрагент «" + Контрагент + "» не является поставщиком! Отказано.", Контрагент,,, Отказ);

	КонецЕсли;

	Если НЕ РеквизитыПоставщика.РазрешитьПрямуюЗакупку = Истина Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Прямая закупка контрагенту «" + Контрагент + "» НЕ разрешена! Отказано.", Контрагент,,, Отказ);

	КонецЕсли;
//	---------------------------------------------------------------------------------------
	
КонецПроцедуры

//	LNK 09.09.2016 08:24:51
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда

		Возврат;
		
	КонецЕсли;

//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "РегистрацияПередачиВNavision", Ложь) Тогда

		ВнешниеИсточникиСобытия.УстановитьПереданоNavision(Ссылка, ОбщегоНазначенияРТСервер.ПолучитьМагазиныПоОбъекту(Ссылка),,,,, Истина);

		Если Проведен И НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел()
		И НЕ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ЗагрузкаИзNavision", Ложь) = Истина
		Тогда	//	LNK 19.11.2020 05:58:25 Только в периферии!

			СкладскиеОперацииСервер.ПриЗаписиПроверитьПодчинённыеДокументы(Ссылка, Контрагент, ВозвратПоставщику, ДополнительныеСвойства);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ЗакупкиСервер.ОбновитьСостояниеОплатыПоступления(Ссылка, Истина);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ОчиститьДанныеЗаполненияОтЛишнихКлючей(ДанныеЗаполнения);

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда

	//	LNK 20.10.2016 13:21:29
		Если Истина Тогда

			ДанныеОбъект = ДанныеЗаполнения.ПолучитьОбъект();

			Если ДанныеОбъект.ВозвратПоставщику = Истина Тогда

				ВызватьИсключение "Отказано. На основании заказа с признаком «Возврат поставщику» запрещён ввод нового документа «Заказ поставщику»!";

			КонецЕсли;

			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеОбъект);

			Номер = "";
			IDN   = "";
			Дата  = ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера();
			ДатаПоступления = Дата;
			Автор = Неопределено;
			УзелСоздания = Неопределено;
			ВозвратПоставщику = Истина;
			УчитыватьНДС    = ДанныеОбъект.УчитыватьНДС;
			ЦенаВключаетНДС = ДанныеОбъект.ЦенаВключаетНДС;
			Товары.Загрузить(ДанныеОбъект.Товары.Выгрузить());

			ДокументОснование = ДанныеЗаполнения;

		Иначе

			СформироватьДопоставкуТоваровПоЗаказуПоставщику(ДанныеЗаполнения);

		КонецЕсли;
	
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ОбработкаФормированиеЗаказов") Тогда
		
		ДанныеШапкиДокумента = ДанныеЗаполнения.Реквизиты;
		ДанныеТабличнойЧасти = ДанныеЗаполнения.Товары;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеШапкиДокумента);
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ЗаполнитьТабличнуюЧастьИзОбработкиФормированиеЗаказов(ДанныеТабличнойЧасти, КэшированныеЗначения);

	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Закрыт          = Ложь;
	ДатаПоступления = Дата('00010101');
	IDN             = "";
	УзелСоздания    = Неопределено;
	Автор           = Неопределено;
	ЭтапыОплат.Очистить();
	
	ИнициализироватьДокумент();
	
	АссортиментСервер.ПроверитьАссортиментТаблицыТоваровДокументаЗакупки(Магазин, Товары, Дата);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(ДатаПоступления) И НачалоДня(ДатаПоступления) < НачалоДня(Дата) Тогда

		ТекстСообщения = НСтр("ru = 'Дата планируемого поступления
		|не может быть меньше даты документа'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект,
			"ДатаПоступления",
			,
			Отказ);
		
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	
	МассивНепроверяемыхРеквизитов.Добавить("ЭтапыОплат.ВидПлатежа");
	МассивНепроверяемыхРеквизитов.Добавить("ЭтапыОплат.ДатаПлатежа");
	МассивНепроверяемыхРеквизитов.Добавить("ЭтапыОплат.ДокументВзаимозачета");

//	LNK 13.09.2016 13:45:16
	Если НЕ УчитыватьНДС Тогда

		//МассивНепроверяемыхРеквизитов.Добавить("НалоговаяНакладнаяДата");
		//МассивНепроверяемыхРеквизитов.Добавить("НалоговаяНакладнаяНомер");

	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);

	ПроверитьСуществованиеПоступленийПоЗаказу(Отказ);
//	LNK 22.12.2016 15:40:26
//	ЗакупкиСервер.ПроверитьТабличнуюЧастьЭтапыОплат(ЭтотОбъект, Отказ);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Инициализирует документ
//
Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
		Если ДанныеЗаполнения.Свойство("Склад")
			И НЕ ЗначениеЗаполнено(Склад) Тогда
			Если ЗначениеЗаполнено(Магазин) Тогда
				Если НЕ Справочники.Склады.ПроверитьПринадлежностьСкладаМагазину(Магазин, ДанныеЗаполнения.Склад) Тогда
					ДанныеЗаполнения.Склад = Справочники.Склады.ПустаяСсылка();
				КонецЕсли;
			Иначе
				Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Склад, "Магазин");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Ответственный = Пользователи.ТекущийПользователь();
	Магазин       = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Магазин);
	Организация   = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация,Ответственный);
	Склад         = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Магазин,,Склад, Ответственный);
	Контрагент    = ЗначениеНастроекПовтИсп.ПолучитьПоставщикаПоУмолчанию(Контрагент, Ответственный);
	//vikol 2016-11-06
	//т.к. у покупки должен быь только ЦО то по усолчанию ставим его. 
	// в форме запрещаем изменение
	hiМагазинУпрСистемы = Справочники.Магазины.НайтиПоКоду("00-0000OD");
	//vikol
	
//	LNK 11.11.2016 17:04:18
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда

		УчитыватьНДС    = Истина;
		ЦенаВключаетНДС = Истина;

	КонецЕсли;

КонецПроцедуры

Процедура ОчиститьДанныеЗаполненияОтЛишнихКлючей(ДанныеЗаполнения)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда

		КлючиУдалить = Новый Массив;
		КлючиУдалить.Добавить("ВозвратПоставщику");
		КлючиУдалить.Добавить("ПометкаУдаления");

		Для каждого Ключ Из КлючиУдалить Цикл

			ДанныеЗаполнения.Удалить(Ключ);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Процедура проверяет возможность снятия флага Закрыт
// Если существуют поступления по заказу, в этом случае заказ считается закрыт
// Параметры
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьСуществованиеПоступленийПоЗаказу(Отказ)
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	ПРЕДСТАВЛЕНИЕ(ПоступлениеТоваров.Ссылка) КАК ПоступлениеТоваров
		                      |ИЗ
		                      |	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
		                      |ГДЕ
		                      |	ПоступлениеТоваров.ЗаказПоставщику = &ЗаказПоставщику
		                      |	И (НЕ ПоступлениеТоваров.ЗаказПоставщику = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка))
		                      |	И ПоступлениеТоваров.Проведен");
		
		Запрос.УстановитьПараметр("ЗаказПоставщику", Ссылка);
		
		РезультатЗапросаПроверкаЗаказа = Запрос.Выполнить();
		
		Если НЕ РезультатЗапросаПроверкаЗаказа.Пустой() 
			И НЕ Закрыт Тогда
				
			ТекстСообщения = НСтр("ru = 'Существуют документы поступления, оформленные по документу %ЗаказПоставщику% :'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ЗаказПоставщику%",Ссылка);
			
			ВыборкаРезультатаПроверкаЗаказа = РезультатЗапросаПроверкаЗаказа.Выбрать();
			
			Пока ВыборкаРезультатаПроверкаЗаказа.Следующий() Цикл
				
				ТекстСообщения = ТекстСообщения + Символы.ПС + 
				НСтр("ru = '%ПоступлениеТоваров%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ПоступлениеТоваров%",ВыборкаРезультатаПроверкаЗаказа.ПоступлениеТоваров);
				
			КонецЦикла;
			
			ТекстСообщения = ТекстСообщения + Символы.ПС + 
				НСтр("ru = 'Не установлен флаг ""Закрыт""'");

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			"Объект.Закрыт",
			,
			Отказ);
			
		КонецЕсли;
		
КонецПроцедуры

// Процедура заполняет табличную часть товары из данных обработки АнализПродажФормированиеЗаказов
//
Процедура ЗаполнитьТабличнуюЧастьИзОбработкиФормированиеЗаказов(ДанныеТабличнойЧасти, КэшированныеЗначения)
	
	Для каждого СтрокаДанных Из ДанныеТабличнойЧасти Цикл
		СтрокаТоваров = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТоваров, СтрокаДанных, "Номенклатура, Характеристика, Упаковка, Цена");
		СтрокаТоваров.КоличествоУпаковок = СтрокаДанных.Количество;
		
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Истина);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ЭтотОбъект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(СтрокаТоваров, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Товары, Ложь);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Товары, Ложь, СуммаДокумента);
	
КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	
	Если НЕ ДополнительныеСвойства.РазрешитьПрямуюЗакупку = Истина Тогда

		Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Массив.Добавить(Движения.РасчетыСПоставщиками);
		КонецЕсли;

	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

//	LNK 19.10.2016 13:42:04
Функция ПроверитьВозможностьВоздействияПриНаличииПодчиненных(Отказ, РежимЗаписи, РежимПроведения)

	Если НЕ ЭтоНовый() И НЕ РежимЗаписи = РежимЗаписиДокумента.Запись И НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаДокумент.Дата,
		|	ТаблицаДокумент.Ссылка КАК Ссылка,
		|	ТаблицаДокумент.Проведен,
		|	ТаблицаДокумент.Представление
		|ПОМЕСТИТЬ Перемещения
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ТаблицаДокумент
		|ГДЕ
		|	ТаблицаДокумент.ДокументОснование = &ТекущийДокумент
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумент.Дата КАК Дата,
		|	ТаблицаДокумент.Ссылка КАК Ссылка,
		|	ТаблицаДокумент.Проведен,
		|	ТаблицаДокумент.Представление
		|ИЗ
		|	Перемещения КАК ТаблицаДокумент
		|ГДЕ
		|	ТаблицаДокумент.Проведен
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумент.Дата,
		|	ТаблицаДокумент.Ссылка,
		|	ТаблицаДокумент.Проведен,
		|	ТаблицаДокумент.Представление
		|ИЗ
		|	Перемещения КАК Перемещения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары КАК ТаблицаДокумент
		|		ПО Перемещения.Ссылка = ТаблицаДокумент.ДокументОснование
		|ГДЕ
		|	ТаблицаДокумент.Проведен
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумент.Дата,
		|	ТаблицаДокумент.Ссылка,
		|	ТаблицаДокумент.Проведен,
		|	ТаблицаДокумент.Представление
		|ИЗ
		|	Перемещения КАК Перемещения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК ТаблицаДокумент
		|		ПО Перемещения.Ссылка = ТаблицаДокумент.ДокументОснование
		|ГДЕ
		|	ТаблицаДокумент.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка"
		);
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		
		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда

			Отказ = Истина;
			Сообщить("Отказано в «" + РежимЗаписи + "» для " + Ссылка + " по следующим причинам:");

			Выборка = Результат.Выбрать();

			Пока Выборка.Следующий() Цикл

				Сообщить("есть " + ?(Выборка.Проведен, "проведенный", "непроведенный") + " " + Выборка.Представление);

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции // ПроверитьВозможностьВоздействияПриНаличииПодчиненных()

Процедура СформироватьДопоставкуТоваровПоЗаказуПоставщику(ДанныеЗаполнения)

	ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПоставщикуТовары.Номенклатура   КАК Номенклатура,
	|	ЗаказПоставщикуТовары.Характеристика КАК Характеристика,
	|	ЗаказПоставщикуТовары.Количество     КАК КоличествоЗаказ,
	|	0.00                                 КАК КоличествоПоступление,
	|	ЗаказПоставщикуТовары.Сумма          КАК Сумма,
	|	ЗаказПоставщикуТовары.СтавкаНДС      КАК СтавкаНДС
	|ПОМЕСТИТЬ ТоварыПоступленияЗаказа
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|ПО
	|	ПоступлениеТоваров.ЗаказПоставщику = &ЗаказПоставщику
	|	И ПоступлениеТоваров.Проведен = ИСТИНА
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка = &ЗаказПоставщику
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ПоступлениеТоваровТовары.Номенклатура         КАК Номенклатура,
	|	ПоступлениеТоваровТовары.Характеристика       КАК Характеристика,
	|	0.00                                          КАК КоличествоЗаказ,
	|	ПоступлениеТоваровТовары.Количество           КАК КоличествоПоступление,
	|	0.00                                          КАК Сумма,
	|	NULL                                          КАК СтавкаНДС
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|ПО
	|	ПоступлениеТоваров.Ссылка = ПоступлениеТоваровТовары.Ссылка
	|ГДЕ
	|	ПоступлениеТоваров.ЗаказПоставщику = &ЗаказПоставщику
	|	И ПоступлениеТоваров.Проведен
	|;
	|ВЫБРАТЬ
	|	ТоварыПоступленияЗаказа.Номенклатура                   КАК Номенклатура,
	|	ТоварыПоступленияЗаказа.Характеристика                 КАК Характеристика,
	|	СУММА(ТоварыПоступленияЗаказа.КоличествоЗаказ)
	|	-
	|	СУММА(ТоварыПоступленияЗаказа.КоличествоПоступление)   КАК КоличествоУпаковок,
	|	СУММА(ТоварыПоступленияЗаказа.КоличествоЗаказ)
	|	-
	|	СУММА(ТоварыПоступленияЗаказа.КоличествоПоступление)   КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
	|	ВЫБОР	КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТоварыПоступленияЗаказа.СтавкаНДС) > 1.00
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)
	|			ИНАЧЕ МАКСИМУМ(ТоварыПоступленияЗаказа.СтавкаНДС)
	|	КОНЕЦ                                                  КАК СтавкаНДС,
	|	ВЫБОР	КОГДА СУММА(ТоварыПоступленияЗаказа.КоличествоЗаказ) = 0.00
	|			ТОГДА 0.00
	|			ИНАЧЕ СУММА(ТоварыПоступленияЗаказа.Сумма) / СУММА(ТоварыПоступленияЗаказа.КоличествоЗаказ)
	|	КОНЕЦ                                                  КАК Цена,
	|	ВЫБОР	КОГДА СУММА(ТоварыПоступленияЗаказа.КоличествоЗаказ) = 0.00
	|			ТОГДА 0.00
	|			ИНАЧЕ СУММА(ТоварыПоступленияЗаказа.Сумма) / СУММА(ТоварыПоступленияЗаказа.КоличествоЗаказ)
	|	КОНЕЦ
	|	*
	|	(СУММА(ТоварыПоступленияЗаказа.КоличествоЗаказ)
	|	-
	|	СУММА(ТоварыПоступленияЗаказа.КоличествоПоступление))  КАК Сумма
	|ИЗ
	|	ТоварыПоступленияЗаказа КАК ТоварыПоступленияЗаказа
	|СГРУППИРОВАТЬ ПО
	|	ТоварыПоступленияЗаказа.Номенклатура,
	|	ТоварыПоступленияЗаказа.Характеристика
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыПоступленияЗаказа.КоличествоЗаказ) > СУММА(ТоварыПоступленияЗаказа.КоличествоПоступление)
	|";
	Запрос.УстановитьПараметр("ЗаказПоставщику", ДанныеЗаполнения);
	РезультатЗапросаКЗаказу = Запрос.ВыполнитьПакет()[1];
	
	Если РезультатЗапросаКЗаказу.Пустой() Тогда
		ТекстОшибки = НСтр("ru='По документу %1 не требуется допоставка товаров. Ввод на основании документа невозможен'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДанныеЗаполнения);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(
	ЭтотОбъект, 
	ДанныеЗаполнения,
	"Склад, Магазин, Контрагент, УчитыватьНДС, ЦенаВключаетНДС, Организация");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапросаКЗаказу.Выгрузить(), Товары);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ЭтотОбъект));
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ", Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС);

КонецПроцедуры




