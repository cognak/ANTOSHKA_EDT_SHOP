
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	
//	LNK 25.04.2017 09:43:32
	Список.Параметры.УстановитьЗначениеПараметра("Организация"
		, ?(ОбменДаннымиПовтИсп.ЭтоГлавныйУзел()
			, Неопределено
			, ПараметрыСеанса.ТекущаяОрганизация));
	Список.Параметры.УстановитьЗначениеПараметра("Период", ТекущаяДата());	//	LNK 16.11.2023 14:23:13
	
//	LNK 13.11.2016 13:47:42
	ЭлементОтбора = Список.Отбор.Элементы.Вставить(0, Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Магазин = Настройки.Получить("Магазин");
		Склад   = Настройки.Получить("Склад");

	Иначе

		Магазин = ПараметрыСеанса.ТекущийМагазин;
	//	Склад   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "СкладПродажи");

	КонецЕсли;

	УстановитьОтборДинамическогоСписка("Магазин");
	УстановитьОтборДинамическогоСписка("Склад");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьСклада();
	
//	LNK 13.11.2016 13:14:13
	УстановитьОформлениеЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСписокРаспоряженийНаОтгрузкуТоваров" Тогда

		ЗаполнитьСписокРаспоряжений();

	ИначеЕсли ИмяСобытия = "ПользовательИзменилТекущуюОрганизацию" Тогда

		Если НЕ Параметр.Организация = Список.Параметры.Элементы.Найти("Организация").Значение Тогда

			Список.Параметры.УстановитьЗначениеПараметра("Организация", Параметр.Организация);
			Элементы.Список.Обновить();

		КонецЕсли;

		Если НЕ Магазин = Параметр.Магазин Тогда

			Магазин = Параметр.Магазин;
			ОтборМагазинПриИзменении(Неопределено);

		КонецЕсли;

	ИначеЕсли ИмяСобытия = "ИзменениеОбъектУчтенВNavision" ИЛИ ИмяСобытия = "ОбновитьСписокПеремещений" Тогда	//	LNK 11.09.2020 08:25:19

		Элементы.Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОтборСкладПриИзменении(Элемент)
	
	УстановитьОтборДинамическогоСписка("Склад");
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРаспоряженияНаОтгрузку Тогда
		ЗаполнитьСписокРаспоряжений();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтборМагазинПриИзменении(Элемент)
	
	УстановитьВсеОтборыДинамическогоСписка();
	УстановитьДоступностьСклада();
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРаспоряженияНаОтгрузку Тогда
		ЗаполнитьСписокРаспоряжений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтгрузкиПриИзменении(Элемент)
	
	ЗаполнитьСписокРаспоряжений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	ЗаполнитьСписокРаспоряжений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьВыполненныеРаспоряженияПриИзменении(Элемент)
	
	ЗаполнитьСписокРаспоряжений();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаРаспоряженияНаОтгрузку Тогда
		ЗаполнитьСписокРаспоряжений();
		Элементы.СоздатьРасходныйОрдер.КнопкаПоУмолчанию = Истина;
	Иначе
		Элементы.СписокРаспоряженийПустаяКоманда.КнопкаПоУмолчанию = Истина;
	КонецЕсли;

КонецПроцедуры

//	LNK 13.11.2016 13:07:36
&НаКлиенте
Процедура ПоказатьВсеИлиНепомеченные(Команда)

	Список.Отбор.Элементы[0].Использование = НЕ Список.Отбор.Элементы[0].Использование;

	УстановитьОформлениеЭлементов();

КонецПроцедуры

#Область ОбработчикиСобытийЭлементаСписок

&НаКлиенте	//	LNK 27.10.2022 06:15:44
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ИменаКолонок = Новый Массив;
	ИменаКолонок.Добавить("Магазин");
	ИменаКолонок.Добавить("Склад");
	ИменаКолонок.Добавить("ДокументОснование");
	ИменаКолонок.Добавить("ЗаказПокупателя");
	ИменаКолонок.Добавить("Ответственный");
	ИменаКолонок.Добавить("МагазинПолучательКонечный");

	РаботаСФормамиКлиент.ОбработчикСобытияСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ИменаКолонок,, Элементы);

КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "СписокРаспоряжений"

&НаКлиенте
Процедура СписокРаспоряженийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокРаспоряжений.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Распоряжение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРаспоряженийПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СписокРаспоряжений.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ЗаполнитьСписокРаспоряжений();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРасходныйОрдер(Команда)
	
	ТекущиеДанные = Элементы.СписокРаспоряжений.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ДокументОснование", ТекущиеДанные.Распоряжение);
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
		ОткрытьФорму("Документ.РасходныйОрдерНаТовары.Форма.ФормаДокумента", ПараметрыОткрытия);
		
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьВсеОтборыДинамическогоСписка()
	
	УстановитьОтборДинамическогоСписка("Магазин");
	УстановитьОтборДинамическогоСписка("Склад");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическогоСписка(ИмяРеквизита)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		Список, 
		ИмяРеквизита, 
		ЭтотОбъект[ИмяРеквизита], 
		ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]));
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСклада()

	Элементы.ОтборСклад.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Магазин);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРаспоряжений()

	СписокРаспоряжений.Очистить();
	
	Запрос = Новый Запрос( 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Ссылка КАК Склад
	|ПОМЕСТИТЬ СкладыМагазина
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Магазин = &Магазин
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТоварыКОтгрузке.ДокументОснование КАК ДокументРаспоряжение
	|ПОМЕСТИТЬ Распоряжения
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			ВЫБОР
	|					КОГДА &ОтборПоСкладу
	|						ТОГДА Склад = &Склад
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &ОтборПоМагазину
	|						ТОГДА Склад В
	|								(ВЫБРАТЬ
	|									СкладыМагазина.Склад
	|								ИЗ
	|									СкладыМагазина КАК СкладыМагазина)
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК ТоварыКОтгрузке
	|ГДЕ
	|	НЕ ТоварыКОтгрузке.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
	|	И ВЫБОР
	|			КОГДА &ОтборПоМагазину
	|				ТОГДА ЕСТЬNULL(ТоварыКОтгрузке.ДокументОснование.Магазин, ТоварыКОтгрузке.ДокументОснование.МагазинОтправитель) = &Магазин
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРаспоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыКОтгрузке.ДокументОснование.Дата КАК Дата,
	|	ТоварыКОтгрузке.ДокументОснование КАК Распоряжение,
	|	ЕСТЬNULL(ТоварыКОтгрузке.ДокументОснование.Контрагент, ТоварыКОтгрузке.ДокументОснование.МагазинПолучатель) КАК Получатель,
	|	ТоварыКОтгрузке.Склад КАК СкладОтгрузки,
	|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузке.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
	|	ТоварыКОтгрузке.КоличествоПриход КАК КоличествоПриход,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузке.КоличествоКонечныйОстаток > 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Выполнен
	|ПОМЕСТИТЬ Результат
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(
	|			,
	|			,
	|			,
	|			,
	|			ДокументОснование В
	|				(ВЫБРАТЬ
	|					Распоряжения.ДокументРаспоряжение
	|				ИЗ
	|					Распоряжения КАК Распоряжения)) КАК ТоварыКОтгрузке
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	Получатель,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОтгрузки.Дата КАК Дата,
	|	ТаблицаОтгрузки.Распоряжение КАК Распоряжение,
	|	ТаблицаОтгрузки.Получатель КАК Получатель,
	|	ТаблицаОтгрузки.Выполнен КАК Выполнен,
	|	ТаблицаОтгрузки.СкладОтгрузки КАК СкладОтгрузки
	|ИЗ
	|	(ВЫБРАТЬ
	|		Результат.Дата КАК Дата,
	|		Результат.Распоряжение КАК Распоряжение,
	|		Результат.Получатель КАК Получатель,
	|		ВЫБОР
	|			КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Результат.Выполнен) = 1
	|				ТОГДА МАКСИМУМ(Результат.Выполнен)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК Выполнен,
	|		Результат.СкладОтгрузки КАК СкладОтгрузки
	|	ИЗ
	|		Результат КАК Результат
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА &ОтборПоПолучателю
	|					ТОГДА Результат.Получатель = &Получатель
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Результат.Дата,
	|		Результат.Получатель,
	|		Результат.Распоряжение,
	|		Результат.СкладОтгрузки) КАК ТаблицаОтгрузки
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтборПоСтатусу
	|				ТОГДА ТаблицаОтгрузки.Выполнен = ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата"
	);
	Запрос.УстановитьПараметр("ОтборПоПолучателю", ЗначениеЗаполнено(Получатель));
	Запрос.УстановитьПараметр("ОтборПоСтатусу"   , НЕ ОтображатьВыполненныеРаспоряжения);
	Запрос.УстановитьПараметр("Получатель"		 , Получатель);
	Запрос.УстановитьПараметр("ОтборПоСкладу"	 , ЗначениеЗаполнено(Склад));
	Запрос.УстановитьПараметр("Склад"			 , Склад);
	Запрос.УстановитьПараметр("ОтборПоМагазину"  , ЗначениеЗаполнено(Магазин));
	Запрос.УстановитьПараметр("Магазин"			 , Магазин);

	Запрос.УстановитьПараметр("НачалоПериода"	 , ПериодОтгрузки.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода"	 , ?(ПериодОтгрузки.ДатаОкончания = '00010101', ТекущаяДата(), ПериодОтгрузки.ДатаОкончания));
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		СписокРаспоряжений.Загрузить(Результат.Выгрузить());
		Элементы.СоздатьРасходныйОрдер.Доступность = Истина;
	Иначе
		Элементы.СоздатьРасходныйОрдер.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьСтруктуруДанных(Распоряжение)
	
	СтруктураПараметры = Неопределено;
	
	Если ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("Магазин",                             Распоряжение.МагазинОтправитель);
		СтруктураПараметры.Вставить("Склад",                               Распоряжение.СкладОтправитель);
		СтруктураПараметры.Вставить("ИспользоватьОрдернуюСхемуПриОтгрузке",Распоряжение.МагазинОтправитель.ИспользоватьОрдернуюСхемуПриПеремещении);
		
		СтруктураПараметры.Вставить("Документ", Распоряжение);
		СтруктураПараметры.Вставить("Режим",    "РасходТовара");
		
		Возврат СтруктураПараметры;
		
	КонецЕсли;
	
	Возврат СтруктураПараметры;
	
КонецФункции

//	LNK 13.11.2016 11:32:18
&НаКлиенте
Процедура УстановитьОформлениеЭлементов()

	НужныйЭлемент = Элементы.СписокПоказатьВсеИлиНепомеченные;

	Если Список.Отбор.Элементы[0].Использование Тогда

		НужныйЭлемент.Картинка  = БиблиотекаКартинок.ПоказыватьБезПомеченных;

	Иначе

		НужныйЭлемент.Картинка  = БиблиотекаКартинок.ПоказыватьВсеОбъекты;

	КонецЕсли;

КонецПроцедуры

#Область РаботаСОбщейФормойРедактированияОтдельныхРеквизитов

&НаКлиенте
Процедура ИзменитьОтдельныеРеквизиты(Команда)

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;

	Если НЕ ТекущиеДанные = Неопределено Тогда

		ПараметрыФормы = Новый Структура("ДокументСсылка", ТекущиеДанные.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ФормаИзмененияОтдельныхРеквизитов"
			, ПараметрыФормы, ЭтотОбъект, ТекущиеДанные.Ссылка,
			,, Новый ОписаниеОповещения("ИзменитьОтдельныеРеквизитыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтдельныеРеквизитыЗавершение(Результат, ДополнительныеПараметры)	Экспорт

	Элементы.Список.Обновить();

КонецПроцедуры

#КонецОбласти













