
///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Заполняет ТЧ Товары остатками основания по регистру ТоварыКОтгрузке
//
Процедура ЗаполнитьТоварыПоТоварамКОтгрузке() Экспорт
	
	Товары.Очистить();
	СерийныеНомера.Очистить();
	
	Запрос = Новый Запрос(СтрЗаменить(
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	МАКСИМУМ(Товары.Цена / ЕСТЬNULL(Товары.Упаковка.Коэффициент, 1)) КАК Цена,
	|	МИНИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Упаковка) > 1
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ МАКСИМУМ(Товары.Упаковка)
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Упаковка) > 1
	|			ТОГДА NULL
	|		ИНАЧЕ МАКСИМУМ(Товары.Упаковка.Коэффициент)
	|	КОНЕЦ КАК Коэффициент,
	|	МИНИМУМ(Товары.КлючСвязиСерийныхНомеров) КАК КлючСвязиСерийныхНомеров,
	|	СУММА(Товары.Количество) КАК КоличествоОснования
	|ПОМЕСТИТЬ ТоварыОснования
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтгрузкеОбороты.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузкеОбороты.Характеристика КАК Характеристика,
	|	СУММА(ТоварыКОтгрузкеОбороты.КоличествоОборот) КАК Количество
	|ПОМЕСТИТЬ ТоварыКОтгрузке
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , Регистратор, ДокументОснование = &ДокументОснование) КАК ТоварыКОтгрузкеОбороты
	|ГДЕ
	|	ТоварыКОтгрузкеОбороты.Регистратор <> &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузкеОбороты.Номенклатура,
	|	ТоварыКОтгрузкеОбороты.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОтгрузкеОбороты.КоличествоОборот) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОснования.НомерСтроки КАК НомерСтроки,
	|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
	|	ТоварыОснования.Цена КАК Цена,
	|	ТоварыКОтгрузке.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ТоварыОснования.Коэффициент ЕСТЬ NULL
	|				ИЛИ (ВЫРАЗИТЬ(ТоварыКОтгрузке.Количество / ТоварыОснования.Коэффициент КАК ЧИСЛО(15, 0))) <> ТоварыКОтгрузке.Количество / ТоварыОснования.Коэффициент
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИспользоватьУпаковку,
	|	ТоварыОснования.Упаковка КАК Упаковка,
	|	ТоварыОснования.Коэффициент КАК Коэффициент,
	|	ТоварыОснования.КоличествоОснования КАК КоличествоОснования,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузке.Количество = ТоварыОснования.КоличествоОснования
	|			ТОГДА ТоварыОснования.КлючСвязиСерийныхНомеров
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлючСвязиСерийныхНомеров
	|ПОМЕСТИТЬ ИтоговаяТаблица
	|ИЗ
	|	ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыОснования КАК ТоварыОснования
	|		ПО ТоварыКОтгрузке.Номенклатура = ТоварыОснования.Номенклатура
	|			И ТоварыКОтгрузке.Характеристика = ТоварыОснования.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.МагазинОтправитель КАК Магазин,
	|	ТаблицаДокумента.СкладОтправитель КАК Склад
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.НомерСтроки КАК НомерСтрокиСорт,
	|	ИтоговаяТаблица.Номенклатура КАК Номенклатура,
	|	ИтоговаяТаблица.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ИтоговаяТаблица.ИспользоватьУпаковку
	|			ТОГДА ИтоговаяТаблица.Цена * ИтоговаяТаблица.Коэффициент
	|		ИНАЧЕ ИтоговаяТаблица.Цена
	|	КОНЕЦ КАК Цена,
	|	ИтоговаяТаблица.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ИтоговаяТаблица.ИспользоватьУпаковку
	|			ТОГДА ИтоговаяТаблица.Количество / ИтоговаяТаблица.Коэффициент
	|		ИНАЧЕ ИтоговаяТаблица.Количество
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ИтоговаяТаблица.ИспользоватьУпаковку
	|			ТОГДА ИтоговаяТаблица.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Упаковка,
	|	ИтоговаяТаблица.Количество * ИтоговаяТаблица.Цена КАК Сумма,
	|	ИтоговаяТаблица.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиСорт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОснования.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|	СерийныеНомера.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|		ПоступлениеТоваровСерийныеНомера.СерийныйНомер КАК СерийныйНомер
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.СерийныеНомера КАК ПоступлениеТоваровСерийныеНомера
	|			ПО ПоступлениеТоваровТовары.КлючСвязиСерийныхНомеров = ПоступлениеТоваровСерийныеНомера.КлючСвязиСерийныхНомеров
	|	ГДЕ
	|		ПоступлениеТоваровСерийныеНомера.Ссылка = &ДокументОснование
	|		И ПоступлениеТоваровТовары.Ссылка = &ДокументОснование) КАК СерийныеНомера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыОснования КАК ТоварыОснования
	|		ПО СерийныеНомера.Номенклатура = ТоварыОснования.Номенклатура
	|ГДЕ
	|	ТоварыОснования.КлючСвязиСерийныхНомеров В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ИтоговаяТаблица.КлючСвязиСерийныхНомеров
	|			ИЗ
	|				ИтоговаяТаблица КАК ИтоговаяТаблица)"
	, "Документ.ПеремещениеТоваров", "Документ." + ДокументОснование.Метаданные().Имя)
	);

	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();

	Шапка = РезультатыЗапроса[3].Выбрать();

	Если Шапка.Следующий() Тогда

		Если НЕ Магазин = Шапка.Магазин Тогда

			Магазин = Шапка.Магазин;

		КонецЕсли;

		Если НЕ Склад = Шапка.Склад Тогда

			Склад = Шапка.Склад;

		КонецЕсли;

	КонецЕсли;

	Если НЕ РезультатыЗапроса[4].Пустой() Тогда
		
		Товары.Загрузить(РезультатыЗапроса[4].Выгрузить());
		СерийныеНомера.Загрузить(РезультатыЗапроса[5].Выгрузить());
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Нет данных для заполнения по основанию ""%ДокументОснование%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", ДокументОснование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДокументОснование");
		
	КонецЕсли;
	
	Если Товары.Количество() > 0 Тогда

		ЗапасыСервер.ЗаполнитьЦеныПоРозничнымЦенам(ЭтотОбъект, "Товары", Магазин, Ложь);

	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Если НЕ Документы.ПеремещениеТоваров.ПроверитьСерийныеНомераОрдера(ДокументОснование, СерийныеНомера, Ссылка, Отказ) Тогда

		Возврат;	//	LNK 12.03.2020 11:17:20

	КонецЕсли;

	Если НЕ ПодарочныеСертификатыСервер.ОбработкаПроведенияКонтроль("Списание", ЭтотОбъект, Отказ) Тогда

		Возврат;	//	LNK 05.03.2020 10:39:13

	КонецЕсли;
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.РасходныйОрдерНаТовары.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеСервер.ОтразитьДвиженияПоРегистру("ТоварыНаМагазинах", ДополнительныеСвойства, Движения, Отказ); 
	ЗапасыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияСерийныхНомеров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеСервер.ОтразитьДвиженияПоРегистру("ЗаказыПокупателей", ДополнительныеСвойства, Движения, Отказ); 
//	LNK 12.12.2017 13:54:59
	МотивационнаяПрограммаСервер.ОтразитьПродажиПоЗаказамПокупателей(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ДополнительныеСвойства.Вставить("ИсключительныйРежимВключен"
		,	ТехническаяПоддержкаВызовСервера.ИсключительныйРежим()
		ИЛИ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ИзменениеСтатусаРаботыСТерминалом", Ложь) = Истина);
//	LNK 16.02.2017 14:33:05 - здесь ИсключительныйРежим будет отлючен для бесправного пользователя
	ЗаполнениеОбъектовСобытия.ОбщиеДействияПередЗаписью(ЭтотОбъект, Отказ);

	РеквизитыСсылки = РеквизитыСсылки();	//	LNK 04.06.2019 10:48:22

	ДополнительныеСвойства.Вставить("ЭтоНовый"   , ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	ДополнительныеСвойства.Вставить("Проведен"   , РеквизитыСсылки.Проведен);
	ДополнительныеСвойства.Вставить("IDN"        , РеквизитыСсылки.IDN);
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;	

	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

		Если НЕ ПроведениеСервер.ДокументПроведен(ДокументОснование, Отказ, Истина)	//	LNK 09.01.2019 13:16:16
		ИЛИ  НЕ ПроверитьРеквизитыПоОснованию(Отказ)								//	LNK 13.01.2021 06:31:26
		Тогда

			Возврат;

		КонецЕсли;

	КонецЕсли;
	
	УстановитьНомерПоОснованию(Отказ);
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);

//	LNK 14.09.2016 13:00:51
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если НЕ ЭтоНовый() Тогда

		Если ВнешниеИсточникиСобытия.ПередачаNavision(Ссылка) Тогда

			Если ДополнительныеСвойства.ИсключительныйРежимВключен ИЛИ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "СлужебнаяЗапись", Ложь) Тогда

				Документы.ПеремещениеТоваров.ЖурналРазрешениеПредоставлено(Ссылка);

			Иначе

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ «" + СокрЛП(Ссылка) + "» учтён в КСУ Navision! Изменения запрещены. Отказано.", Ссылка,,, Отказ);
				Возврат;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

//	LNK 19.07.2019 13:53:48
	Если НЕ (Отказ ИЛИ ДополнительныеСвойства.ИсключительныйРежимВключен)  Тогда

	//	NAV:БлокировкаДанныхУчестьДокументВNavision
		Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
		И  (ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "РегистрацияПередачиВNavision", Ложь) = Истина
		ИЛИ ВнешниеИсточникиСобытия.ПередачаNavision(Ссылка))	Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ «" + СокрЛП(Ссылка) + "» учтён в КСУ Navision! В отмене проведения отказано.", Ссылка,,, Отказ);
			Возврат;

		КонецЕсли;

	КонецЕсли;
	
	Справочники.СерийныеНомера.ОчиститьВДокументеНеиспользуемыеСерийныеНомера(Товары, СерийныеНомера);
	ОбщегоНазначенияРТСервер.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект,Документы.РасходныйОрдерНаТовары.ПараметрыУказанияСерий(ЭтотОбъект));

	ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
		ЭтотОбъект,
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Товары, Истина),
		"СуммаДокумента");

//	LNK 31.10.2017 15:19:38 - Резервирование
	ПроверитьДоступноеКоличествоТоваров(РежимЗаписи, Отказ);

КонецПроцедуры

//	LNK 14.09.2016 13:01:55
Процедура ПриЗаписи(Отказ)
	
//	LNK 15.03.2017 12:10:20
	РегистрыСведений.ОбъектыДляОбработки.ФиксироватьПроведениеТоварногоОрдера(ЭтотОбъект);
	
	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда
		
		РегистрыСведений.СостояниеСтрокЗаказаПокупателя.ЗаписьСостояниеСтрокЗаказаПокупателя(Ссылка); 
		
	КонецЕсли;

	Если ОбменДанными.Загрузка Тогда

		ПроверитьНеобходимыеКорректировкиПеремещения(Отказ);	//	LNK 09.07.2022 06:49:25

		Возврат;
		
	КонецЕсли;

//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "РегистрацияПередачиВNavision", Ложь) Тогда

		УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаРегистра.УчтеноNavision
		|ИЗ
		|	РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаРегистра
		|ГДЕ
		|	ТаблицаРегистра.Объект = &ДокументОснование"
		);
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			
				УчтеноNavision = Выборка.УчтеноNavision;

		Иначе	УчтеноNavision = Ложь;

		КонецЕсли;

		ВнешниеИсточникиСобытия.УстановитьПереданоNavision(Ссылка
			, ОбщегоНазначенияРТСервер.ПолучитьМагазиныПоОбъекту(Ссылка)
			, Перечисления.ВидыПередачиNavision.ПереданВNavision
			,, УчтеноNavision,, Истина);

		КлючевыеСвойства = ЗаполнениеОбъектов.КлючевыеСвойстваДокумента(ДокументОснование);

		Если КлючевыеСвойства.СозданВ1СРозница = Истина И НЕ ВнешниеИсточникиСобытия.ПередачаNavision(ДокументОснование) Тогда

			ЗаполнениеОбъектов.ПерезаполнитьПеремещениеПоОрдеру(ДокументОснование, Ссылка);

		КонецЕсли;

	КонецЕсли;

	ПроверитьНеобходимыеКорректировкиПеремещения(Отказ);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда

		ДокументОснование = ДанныеЗаполнения.ДокументОснование;
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ДанныеЗаполнения)) Тогда

		ДокументОснование = ДанныеЗаполнения;
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДокументОснование) Тогда

		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДокументОснование);
		ЗаполнитьПоОснованию();

	//	LNK 22.11.2016 16:40:19
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда

			Номер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Номер");

		КонецЕсли;

	Иначе

		ТекстСообщения = НСтр("ru='Расходный ордер можно вводить только на основании распоряжения на отгрузку товаров.'");
		ВызватьИсключение ТекстСообщения;

	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Серии.Очистить();
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;

	Если Магазин.СкладУправляющейСистемы Тогда

		МассивНепроверяемыхРеквизитов.Добавить("Склад");

	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,Документы.РасходныйОрдерНаТовары.ПараметрыУказанияСерий(ЭтотОбъект),Отказ);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);

	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеТЧПриНаличииОбменаСУправлениемТорговлей(
		ЭтотОбъект, 
		Отказ
	); 
	МаркетинговыеАкцииСервер.ПроверитьЗаполнениеТабличнойЧастиСерийныеНомера(
		ЭтотОбъект,
		"Товары",
		"СерийныеНомера",
		Отказ
	);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Инициализирует документ
//
Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Ответственный = Пользователи.ТекущийПользователь();
	Магазин       = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Магазин);
	Склад         = ЗначениеНастроекПовтИсп.ПолучитьСкладПродажиПоУмолчанию(Магазин,,Склад, Ответственный);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Склад")
			И НЕ ЗначениеЗаполнено(Склад) Тогда
			Если ЗначениеЗаполнено(Магазин) Тогда
				Если НЕ Справочники.Склады.ПроверитьПринадлежностьСкладаМагазину(Магазин, ДанныеЗаполнения.Склад) Тогда
					ДанныеЗаполнения.Склад = Справочники.Склады.ПустаяСсылка();
				КонецЕсли;
			Иначе
				Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Склад, "Магазин");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПоОснованию()

	Реквизиты = Новый Структура("Магазин, Склад, ИспользоватьОрдернуюСхему");

	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда

		Реквизиты.Магазин                   = "МагазинОтправитель";
		Реквизиты.Склад                     = "СкладОтправитель";
		Реквизиты.ИспользоватьОрдернуюСхему = "ЕстьNULL(МагазинОтправитель.ИспользоватьОрдернуюСхемуПриПеремещении, Ложь)";
		
	Иначе

		Реквизиты.Магазин                   = "Магазин";
		Реквизиты.Склад                     = "Склад";		
		Реквизиты.ИспользоватьОрдернуюСхему = "ЕстьNULL(Магазин.ИспользоватьОрдернуюСхемуПриОтгрузке, Ложь)";
		
	КонецЕсли;

	ЗначенияРеквизитов = ОбщегоНазначенияРТ.ПолучитьЗначенияРеквизитовОбъекта(ДокументОснование, Реквизиты);
	Если ЗначенияРеквизитов.ИспользоватьОрдернуюСхему Тогда

		Магазин = ЗначенияРеквизитов.Магазин;
		Склад   = ЗначенияРеквизитов.Склад;
		ЗаполнитьТоварыПоТоварамКОтгрузке();

	Иначе

		ТекстСообщение = НСтр("ru = 'Для магазина ""%Магазин%"" оформление расходных ордеров не требуется.
									|Заполнение документа не выполнено.'");
		ТекстСообщение = СтрЗаменить(ТекстСообщение, "%Магазин%", Строка(ЗначенияРеквизитов.Магазин));

		ВызватьИсключение ТекстСообщение;

	КонецЕсли;

КонецПроцедуры

//	LNK 02.01.2019 11:57:20
Процедура УстановитьНомерПоОснованию(Отказ)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Номер КАК Номер
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ДокументОснование
	|	И НЕ ПеремещениеТоваров.Номер = &Номер"
	);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Номер", Номер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

		Номер = Выборка.Номер;

	КонецЕсли;

КонецПроцедуры

Функция РеквизитыСсылки()	//	LNK 04.06.2019 10:45:12

	РеквизитыСсылки = Новый Структура("Проведен, IDN", Ложь, "");

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Проведен КАК Проведен,
	|	ТаблицаДокумента.IDN КАК IDN
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ТекущийДокумент"
	);
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

		ЗаполнитьЗначенияСвойств(РеквизитыСсылки, Выборка);

	КонецЕсли;
	
	Возврат РеквизитыСсылки;

КонецФункции // РеквизитыСсылки()

///////////////////////////////////////////////////////////////////////////////
// Прочее

//Процедура формирует массив имен регистров для контроля проведения
//
Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

//	При проведении выполняется контроль превышения остатков на складах
//	LNK 14.11.2016 11:11:43
	Если ОбщегоНазначенияРТ.НужноЗаполнитьСписокРегистровДляКонтроля(ДополнительныеСвойства.РежимЗаписи, Дата) Тогда

		Если НЕ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "СлужебнаяЗапись", Ложь) Тогда

			Массив.Добавить(Движения.ТоварыНаСкладах);
			Массив.Добавить(Движения.ТоварыКОтгрузке);
			Массив.Добавить(Движения.ДвиженияСерийныхНомеров);

		КонецЕсли;

	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

#Область ПроверкаДоступногоОстаткаСУчетомРезерва

//	LNK 31.10.2017 15:16:25
Функция ПроверитьДоступноеКоличествоТоваров(РежимЗаписи, Отказ)

	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ ДополнительныеСвойства.Проведен = Истина Тогда
	
		Если РезервированиеТоваровСерверПовтИсп.ПроверятьРезервТовараПриОтгрузке(Магазин, Дата) Тогда

			РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "ЗаказПокупателя, ДокументОснование");

			СтруктураПараметров = Новый Структура(
				"Граница, ЗаказПокупателя, ПропуститьКонтрольРезультатовПроведения, Товары"
				, Новый Граница(МоментВремени(), ВидГраницы.Исключая)
				, ?(ТипЗнч(РеквизитыОснования.ДокументОснование) = Тип("ДокументСсылка.ЗапросДоступностиТоваров"), РеквизитыОснования.ДокументОснование, РеквизитыОснования.ЗаказПокупателя)
				, ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ПропуститьКонтрольРезультатовПроведения", Ложь) = Истина
				, Товары.Выгрузить(, "Номенклатура, Характеристика, Количество"));

			СтруктураПараметров.Товары.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.Магазины"));
			СтруктураПараметров.Товары.Колонки.Добавить("Склад"  , Новый ОписаниеТипов("СправочникСсылка.Склады"));

			СтруктураПараметров.Товары.ЗаполнитьЗначения(Магазин, "Магазин");
			СтруктураПараметров.Товары.ЗаполнитьЗначения(Склад  , "Склад");
			
			РезервированиеТоваровСервер.ПроверитьДоступностьТоваровСУчетомРезерва(СтруктураПараметров, РежимЗаписи, Отказ);

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

#КонецОбласти

#Область ПоддержкаИнтерактивногоИзмененияСерийныхНомеровУчтённогоДокумента

//	LNK 13.03.2020 10:21:32
Функция ПрименитьИзменениеСерийныхНомеров(КлючСвязиСерийныхНомеров, ТекстСообщения)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда

		Заблокировать();
		Отказ = НЕ Заблокирован();
		ТекстСообщения = "";

		Если НЕ Отказ Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	&ДокументОснование КАК ДокументСсылка,
			|	1 КАК Порядок
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаДокументы.Ссылка,
			|	2
			|ИЗ
			|	Документ.ПеремещениеТоваров КАК ТаблицаДокументы
			|ГДЕ
			|	ТаблицаДокументы.ДокументОснование = &ДокументОснование
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок"
			);
			Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
			
			Результат = Запрос.Выполнить();

			Если НЕ Результат.Пустой() Тогда

				СписокСерийныхНомеров = СерийныеНомера.Выгрузить(Новый Структура("КлючСвязиСерийныхНомеров", КлючСвязиСерийныхНомеров), "СерийныйНомер").ВыгрузитьКолонку("СерийныйНомер");

				НачатьТранзакцию();

				Попытка

					ДокументыВыборка = Результат.Выбрать();
					
					Пока ДокументыВыборка.Следующий() Цикл

						ПрименитьСерийныеНомераВДокументе(ДокументыВыборка.ДокументСсылка, СписокСерийныхНомеров, ТекстСообщения, Отказ);

						Если Отказ Тогда

							Прервать;

						КонецЕсли;

					КонецЦикла;

					Если НЕ Отказ Тогда

						ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);

						Если Проведен Тогда

							Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
							ДобавитьТекст(ТекстСообщения, "Изменён и проведен «" + Ссылка + "»");

						Иначе

							Записать();
							ДобавитьТекст(ТекстСообщения, "Изменён и записан «" + Ссылка + "»");

						КонецЕсли;

						ЗафиксироватьТранзакцию();
					
					Иначе

						ОтменитьТранзакцию();

					КонецЕсли;

				Исключение

					Отказ = Истина;
					ТекстСообщения = ОписаниеОшибки();
					ОтменитьТранзакцию();

				КонецПопытки;

			КонецЕсли;

		КонецЕсли;

	Иначе

		Отказ = Истина;
		ДобавитьТекст(ТекстСообщения, "Ордер должен быть оформлен на основании перемещения.");

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

//	LNK 13.03.2020 11:33:02
Процедура ПрименитьСерийныеНомераВДокументе(ДокументСсылка, СписокСерийныхНомеров, ТекстСообщения, Отказ)

	Запрос = Новый Запрос(СтрЗаменить(
	"ВЫБРАТЬ
	|	ТаблицаСерийныеНомера.Ссылка КАК СерийныйНомер,
	|	ТаблицаСерийныеНомера.Владелец КАК Номенклатура
	|ПОМЕСТИТЬ СерийныеНомера
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаВладельца
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерийныеНомера КАК ТаблицаСерийныеНомера
	|		ПО ТаблицаВладельца.Ссылка = ТаблицаСерийныеНомера.Владелец
	|ГДЕ
	|	ТаблицаСерийныеНомера.Ссылка В(&СписокСерийныхНомеров)
	|	И ТаблицаВладельца.ИспользоватьСерийныеНомера
	|	И ТаблицаВладельца.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СерийныеНомера.Номенклатура КАК Номенклатура
	|		ИЗ
	|			СерийныеНомера КАК СерийныеНомера) КАК Фильтр
	|		ПО ТаблицаТовары.Номенклатура = Фильтр.Номенклатура
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СерийныеНомера"
	, "Документ.ПеремещениеТоваров.Товары", "Документ." + ДокументСсылка.Метаданные().Имя + ".Товары")
	);
	Запрос.УстановитьПараметр("СписокСерийныхНомеров", СписокСерийныхНомеров);
	Запрос.УстановитьПараметр("ДокументСсылка"       , ДокументСсылка);
	
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		ДанныеВладельца = Результат.Выбрать();

		Если ДанныеВладельца.Количество() = 1 Тогда

			ДанныеВладельца.Следующий();

			Если ДанныеВладельца.КоличествоУпаковок = СписокСерийныхНомеров.Количество() Тогда

				ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
				ДокументОбъект.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);

			//	очищаем от старых строк..
				СтрокиКлючаСвязи = ДокументОбъект.СерийныеНомера.НайтиСтроки(Новый Структура("КлючСвязиСерийныхНомеров", ДанныеВладельца.КлючСвязиСерийныхНомеров));

				Для каждого СтрокаКлючаСвязи Из СтрокиКлючаСвязи Цикл

					ДокументОбъект.СерийныеНомера.Удалить(СтрокаКлючаСвязи);

				КонецЦикла;

			//	добавляем новые строки с тем же ключем связи.
				Для каждого СерийныйНомер Из СписокСерийныхНомеров Цикл

					СтрокаКлючаСвязи = ДокументОбъект.СерийныеНомера.Добавить();
					СтрокаКлючаСвязи.КлючСвязиСерийныхНомеров = ДанныеВладельца.КлючСвязиСерийныхНомеров;
					СтрокаКлючаСвязи.СерийныйНомер = СерийныйНомер;

				КонецЦикла;

				Если ДокументОбъект.Проведен Тогда

					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					ДобавитьТекст(ТекстСообщения, "Изменён и проведен «" + ДокументСсылка + "»");

				Иначе

					ДокументОбъект.Записать();
					ДобавитьТекст(ТекстСообщения, "Изменён и записан «" + ДокументСсылка + "»");

				КонецЕсли;

			Иначе

				Отказ = Истина;
				ДобавитьТекст(ТекстСообщения, "Количество владельца ошибочное в «" + ДокументСсылка + "»");

			КонецЕсли;

		Иначе

			Отказ = Истина;
			ДобавитьТекст(ТекстСообщения, "Владелец сертификата указан в нескольких строках в «" + ДокументСсылка + "»");

		КонецЕсли;

	Иначе

		Отказ = Истина;
		ДобавитьТекст(ТекстСообщения, "Отсутствует владелец сертификата в «" + ДокументСсылка + "»");

	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьТекст(ТекстСообщения, ЧастьТекста)

	ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
	+ ЧастьТекста;

КонецПроцедуры

#КонецОбласти

Функция ПроверитьРеквизитыПоОснованию(Отказ)	//	LNK 13.01.2021 06:32:51

	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") И НЕ ДокументОснование.Пустая() Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПеремещениеТоваров.СкладОтправитель КАК Склад
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|ГДЕ
		|	ПеремещениеТоваров.Ссылка = &ДокументОснование"
		);
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();

		Если НЕ Склад = Выборка.Склад Тогда

			Отказ = Истина;
			Сообщить("Отказано! Склад ордера «" + Склад + "» НЕ соответствует складу перемещения «" + Выборка.Склад + "»");

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

//	LNK 09.07.2022 06:48:32
Процедура ПроверитьНеобходимыеКорректировкиПеремещения(Отказ)

	Если УзелСоздания = ОбменДаннымиПовтИсп.ПолучитьТекущийЭлементСтруктурыУзлов() И ВнешниеИсточникиСобытия.ПередачаNavision(Ссылка) Тогда

	//	В этом месте имеем точку выхода на проверку необходимости создания корректировки перемещения.
	//	Этот вызов производится при интерактивной (не в контексте обмена!) записи документа и в узле-родителе документа.
		Документы.КорректировкаПеремещения.ПроверитьНеобходимыеКорректировки(Ссылка,, ОбменДанными.Загрузка);

	КонецЕсли;

КонецПроцедуры







