&НаКлиенте
Перем КэшированныеЗначения;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/
//	ПРОГРАММНЫЙ ИНТЕРФЕЙС

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод, Количество = Неопределено, ОбновитьКоличество = Ложь) Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаВесовыхТоваров");
	СтруктураДействий.Вставить("ПроверкаТоваров");
	
	Если НЕ (Количество = Неопределено) Тогда
		
		СтруктураДействий.Вставить("ИспользоватьКоличество", Количество);
		
		Если ОбновитьКоличество Тогда
			СтруктураДействий.Вставить("ОбновитьКоличество", Количество);
		КонецЕсли;
		
	КонецЕсли;

	Возврат ПодключаемоеОборудованиеРТ.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

&НаСервере
Функция ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента) Экспорт
	
	Если НЕ СтруктураПараметров.НеизвестныеДанныеПО Тогда
		Если СтруктураПараметров.Действие = "ПроверкаВесовыхТоваров" Тогда
			ВходящиеПараметры = СтруктураПараметров.ЗначенияПоиска[0];
			НомерСтроки = ДобавитьНайденныеПозицииТоваров(ВходящиеПараметры);
			Если НомерСтроки > 0 Тогда
				СтруктураПараметровКлиента.Вставить("АктивизироватьСтроку", НомерСтроки);
			КонецЕсли;
			СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаТоваров" Тогда
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				Если СтруктураПараметров.ЗначенияПоиска.Количество() = 1 Тогда
					ВходящиеПараметры = СтруктураПараметров.ЗначенияПоиска[0];
					Если СтруктураПараметров.Свойство("ИспользоватьКоличество") Тогда
						ВходящиеПараметры.Вставить("Количество", СтруктураПараметров.ИспользоватьКоличество);
					КонецЕсли;
					Если СтруктураПараметров.Свойство("ОбновитьКоличество") Тогда
						ВходящиеПараметры.Вставить("ОбновитьКоличество", СтруктураПараметров.ИспользоватьКоличество);
					КонецЕсли;
					НомерСтроки = ДобавитьНайденныеПозицииТоваров(ВходящиеПараметры);
					Если НомерСтроки > 0 Тогда
						СтруктураПараметровКлиента.Вставить("АктивизироватьСтроку", НомерСтроки);
					КонецЕсли;
				Иначе
					ТаблицаТоваров = Новый ТаблицаЗначений;
					ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
					ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
					ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
					Для каждого ЗначениеПоиска Из СтруктураПараметров.ЗначенияПоиска Цикл
						ТекущаяСтрока = ТаблицаТоваров.Добавить();
						ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначениеПоиска);
					КонецЦикла;
					СтруктураПараметровКлиента.Вставить("ВыборТоваров", ПоместитьВоВременноеХранилище(ТаблицаТоваров));
				КонецЕсли;
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат СтруктураПараметровКлиента;

КонецФункции

&НаСервере
Функция ОбработатьМассивДанныхПОВФормеСервер(СтруктураПараметров) Экспорт
	
	МассивДанных = СтруктураПараметров.ЗначенияПоиска;
	ОбновитьКоличество = СтруктураПараметров.ОбновитьКоличество;
	
	НомерСтроки = 0;
	Для Каждого СтрокаМасива ИЗ МассивДанных Цикл
		Если ОбновитьКоличество Тогда
			СтрокаМасива.Вставить("ОбновитьКоличество", СтрокаМасива.Количество);
		КонецЕсли;
		НомерСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаМасива);
		Если НомерСтроки > 0 Тогда
			ТекущаяСтрока = Объект.Товары[НомерСтроки - 1];
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницФакт","Факт");
			
			КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Обработка магнитного или штрихового кода на клиенте
//
// Параметры
//  СтруктураПараметровКлиента - структура параметров
//
&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод) Экспорт
	
	Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") 
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
		
		СтрокаСообщения = НСтр("ru = 'Данные по коду не найдены: %1%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекКод);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ТекстПредупреждения") Тогда
		
		ПоказатьПредупреждение(, СтруктураПараметровКлиента.ТекстПредупреждения, 45, "Поиск по коду");
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ВыборТоваров") Тогда
		
		ВыбранноеЗначение = ОткрытьФормуМодально("ОбщаяФорма.ВыборНоменклатуры", Новый Структура("АдресТоваровВХранилище", СтруктураПараметровКлиента.ВыборТоваров));
		Если ВыбранноеЗначение <> Неопределено Тогда
			
			НомерСтроки = ДобавитьНайденныеПозицииТоваров(ВыбранноеЗначение);
			Если НомерСтроки > 0 Тогда
				СтруктураПараметровКлиента.Вставить("АктивизироватьСтроку", НомерСтроки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НомерСтроки = 0;
	Если СтруктураПараметровКлиента.Свойство("АктивизироватьСтроку", НомерСтроки) Тогда
		
		Если НомерСтроки > 0  Тогда
            НомерСтрокиФормы = Объект.Товары[НомерСтроки - 1].ПолучитьИдентификатор();
			Элементы.Товары.ТекущаяСтрока = НомерСтрокиФормы;      
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/
//	ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

//	LNK 26.12.2016 11:33:34
	Если НЕ УправлениеДоступомРТ.ДоступныДокументыИнвентаризации(Отказ) Тогда

		Возврат;

	КонецЕсли;

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);

//	LNK 19.12.2016 11:49:54
//	Сортировка по "вторичным" полям
	РаботаСФормами.ДобавитьКнопкиПорядкаКодАртикул(ЭтотОбъект, Элементы.ТоварыДополнительнаяСортировка);
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект, КартинкаСостоянияДокумента, СостояниеДокумента, РазрешеноПроведение);

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда

		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);

	КонецЕсли;
	
	ПодключаемоеОборудованиеРТ.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	УправлениеЭлементамиФормыНаСервере();
	НастроитьФормуПоДополнительнымПравам();
	
	Элементы.Склад.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Магазин);
	ЭтотОбъект.ТолькоПросмотр = Объект.ДокументОснование.Статус = Перечисления.СтатусыПриказовНаПроведениеИнвентаризацийТоваров.Закрыт;

	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ИсторияКодПоиска = ХранилищеОбщихНастроек.Загрузить("Документ.ВедомостьИнвентаризационная", "ИсторияКодПоиска");

	Если НЕ ИсторияКодПоиска = Неопределено Тогда
		
		Элементы.КодПоиска.СписокВыбора.ЗагрузитьЗначения(ИсторияКодПоиска);
		
	КонецЕсли;

	Если НЕ Параметры.Номенклатура.Пустая() Тогда

		СтрокиВОтборе = Объект.Товары.НайтиСтроки(
			Новый Структура(
				"Номенклатура, Характеристика"
				, Параметры.Номенклатура, Параметры.Характеристика));

		Если НЕ СтрокиВОтборе.Количество() = 0 Тогда

			Элементы.Товары.ТекущаяСтрока  = СтрокиВОтборе[0].ПолучитьИдентификатор();
			Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок;

		КонецЕсли;

	КонецЕсли;

	УправлениеДоступомРТ.ПриСозданииФормыНаСервере(ЭтотОбъект);	//	LNK 17.10.2019 14:30:01
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "";

		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:
			                      |""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	// ПодключаемоеОборудование
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
  	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;
			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекКод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
			
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
//	LNK 22.12.2016 10:10:34
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ИсключитьЗапретПоИнвентаризации", ТекущийОбъект.ДокументОснование);
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)


КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)


КонецПроцедуры

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/
//	ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) 
		И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПриИзмененииСклада();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		ПриИзмененииМагазина();
	КонецЕсли;
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовПоСтатусуКлиент();

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	Если ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекШтрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекШтрихкод);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", "Ведомость инвентаризационная");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	ПараметрыФормы.Вставить("РежимПодбораБезУслуг", Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуВвестиСерийныеНомера", Истина);
	ПараметрыФормы.Вставить("ИспользоватьОтборПоТипамНоменклатуры", Истина);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

#Область ОбработчикиСобытийТабличногоПоляТовары

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если РежимКодаПоиска Тогда

		АктивизироватьЭлементКодПоиска();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

#КонецОбласти

//	LNK 19.12.2016 12:37:21
//	Сортировка по "вторичным" полям
#Область СортировкаПоВторичнымПолям

&НаКлиенте
Процедура ТоварыПорядокКодПоВозрастаниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Код", "Возр");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокКодПоУбываниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Код", "Убыв");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокАртикулПоВозрастаниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Артикул", "Возр");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокАртикулПоУбываниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Артикул", "Убыв");

КонецПроцедуры

&НаСервере
Процедура ТоварыСортироватьПоРеквизитуНоменклатурыСервер(ИмяРеквизита, Направление)

	РаботаСФормами.ТоварыСортироватьПоРеквизитуНоменклатуры(ИмяРеквизита, Направление, Объект.Товары);

КонецПроцедуры


&НаКлиенте
Процедура ТоварыПорядокПроизводительПоУбываниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Производитель", "Убыв");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокПроизводительПоВозрастаниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Производитель", "Возр");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокТорговаяМаркаПоУбываниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("ТорговаяМарка", "Убыв");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокТорговаяМаркаПоВозрастаниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("ТорговаяМарка", "Возр");

КонецПроцедуры


#КонецОбласти

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/
//	СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УправлениеЭлементамиФормыНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Элементы.Магазин.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Магазин);
		Элементы.Склад.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Склад);
		Элементы.Организация.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Организация);

	Иначе

		Элементы.ГруппаОснование.Видимость = Ложь;
		Элементы.Магазин.ТолькоПросмотр = Ложь;
		Элементы.Склад.ТолькоПросмотр = Ложь;
		Элементы.Организация.ТолькоПросмотр = Ложь;

	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		
		Элементы.Склад.ТолькоПросмотр = Истина;
		
	КонецЕсли;

	Если Элементы.КодПоиска.ТолькоПросмотр = РежимКодаПоиска Тогда

		Элементы.КодПоиска.ТолькоПросмотр = НЕ РежимКодаПоиска;

	КонецЕсли;
	
КонецПроцедуры

//Процедура заполняет организацию при изменении склада
//
&НаСервере
Процедура ПриИзмененииСклада()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		                                              
		Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Организация");
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура заполняет склад при изменении магазина
//
&НаСервере
Процедура ПриИзмененииМагазина()
	
	Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Объект.Магазин,,Объект.Склад, Пользователи.ТекущийПользователь());
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПриИзмененииСклада();
	КонецЕсли;	
	
КонецПроцедуры

//Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора
//Параметры:
//Отказ - Булево
&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин"" не заполнено'"), Объект, "Объект.Магазин",,Отказ);
	КонецЕсли;
		
КонецПроцедуры

//Процедура заполняет товары из подбора
//Параметры: 
//ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, Упаковка, КоличествоУпаковок");
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;

	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
//	LNK 04.01.2017 13:54:53
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Номер.ТолькоПросмотр,
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьНомерДокумента);
КонецПроцедуры

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) 
	
	Если СтруктураПараметров.Свойство("Количество") Тогда 
		КоличествоУпаковок = СтруктураПараметров.Количество;
		СтруктураПараметров.Удалить("Количество");
	Иначе
		КоличествоУпаковок = 1;
	КонецЕсли;

	Если СтруктураПараметров.Свойство("ОбновитьКоличество") Тогда 
		СтруктураПараметров.Удалить("ОбновитьКоличество");
		ОбновитьКоличество = Истина;
	Иначе
		ОбновитьКоличество = Ложь;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Штрихкод") Тогда 
		СтруктураПараметров.Удалить("Штрихкод");
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураПараметров);
	
	НомерСтроки = 0;
	Если МассивСтрок.Количество() > 0 Тогда 
		
		ТекущаяСтрока = МассивСтрок[0];
		КоэффициентУпаковки1 = ?(ЗначениеЗаполнено(СтруктураПараметров.Упаковка), СтруктураПараметров.Упаковка.Коэффициент, 1);
		КоэффициентУпаковки2 = ?(ЗначениеЗаполнено(ТекущаяСтрока.Упаковка), ТекущаяСтрока.Упаковка.Коэффициент, 1);

		Если ОбновитьКоличество Тогда  
			ТекущаяСтрока.КоличествоУпаковок = КоличествоУпаковок*КоэффициентУпаковки2/КоэффициентУпаковки1;
		Иначе
			ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковокФакт + КоличествоУпаковок*КоэффициентУпаковки2/КоэффициентУпаковки1;
		КонецЕсли;

		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		НомерСтроки = ТекущаяСтрока.НомерСтроки;
	Иначе 
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ТекущаяСтрока.КоличествоУпаковок = КоличествоУпаковок;

		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураПараметров);
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		НомерСтроки = ТекущаяСтрока.НомерСтроки;
	КонецЕсли;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары, Неопределено, НомерСтроки);
	
	Модифицированность = Истина;
	Возврат НомерСтроки;
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	Элементы.Склад.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Магазин);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусу(ПересчетВыполнен)

	Элементы.Товары.ТолькоПросмотр				= ПересчетВыполнен;
	Элементы.Склад.ТолькоПросмотр				= ПересчетВыполнен;
	Элементы.Дата.ТолькоПросмотр				= ПересчетВыполнен;
	Элементы.ТоварыПоискПоШтрихкоду.Доступность	= НЕ ПересчетВыполнен;
	Элементы.ТоварыОткрытьПодбор.Доступность	= НЕ ПересчетВыполнен;
	Элементы.ТоварыЗагрузитьРезультатыПересчетаИзExcel.Доступность	= НЕ ПересчетВыполнен;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()

	УстановитьДоступностьЭлементовПоСтатусу(Объект.Статус = Перечисления.СтатусыПересчетовТоваров.Выполнено);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовПоСтатусуКлиент()

	УстановитьДоступностьЭлементовПоСтатусу(Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.Выполнено"));

КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#Область ЗагрузкаРезультатовИзТаблицыExcel

&НаКлиенте
Процедура СвойстваТаблицыExcel(Команда)	Экспорт

	СвойстваТаблицыExcelЗавершение(Новый Структура);

КонецПроцедуры

&НаКлиенте
Процедура СвойстваТаблицыExcelЗавершение(ДополнительныеПараметры)	Экспорт

	ПараметрыФормы = Новый Структура(
		"КолонкаКоличество, КолонкаКод, ПерваяСтрокаДанных", КолонкаКоличество, КолонкаКод, ПерваяСтрокаДанных);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановкаПараметровТаблицыExcel", ЭтотОбъект);
	ОткрытьФорму("Документ.ВедомостьИнвентаризационная.Форма.ПараметрыТаблицыExcel"
		, ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура УстановкаПараметровТаблицыExcel(ПараметрыТаблицыExcel, ДополнительныеПараметры)	Экспорт

	Если НЕ ПараметрыТаблицыExcel = Неопределено Тогда

		КолонкаКод         = ПараметрыТаблицыExcel.КолонкаКод;
		КолонкаКоличество  = ПараметрыТаблицыExcel.КолонкаКоличество;
		ПерваяСтрокаДанных = ПараметрыТаблицыExcel.ПерваяСтрокаДанных;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультатыПересчетаНажатие(Команда)

	Если КолонкаКод = 0 Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("СвойстваТаблицыExcelЗавершение", ЭтотОбъект);
		ПоказатьПредупреждение(ОписаниеОповещения, "Укажите правильные параметры таблицы Excel!", 30, "Загрузка невозможна");

	Иначе

		ПроверитьВозможностьИВыполнитьЗагрузку(Новый Структура("Режим", "XLS"));
		Модифицированность = Истина;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультатыПересчетаИзTXT(Команда)

	ПроверитьВозможностьИВыполнитьЗагрузку(Новый Структура("Режим", "TXT"));
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьИВыполнитьЗагрузку(ПараметрыЗагрузки)

	Если Объект.Товары.Количество() = 0 Тогда
		
		ЗагрузитьРезультатыПересчетаВыполнение(КодВозвратаДиалога.ОК, ПараметрыЗагрузки);

	Иначе

		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьРезультатыПересчетаВыполнение", ЭтотОбъект, ПараметрыЗагрузки);
		ПоказатьВопрос(ОписаниеОповещения
			, "Табличная часть Товары будет очищена.
			  |Подтвердите своё решение:"
			, РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.ОК
			, "Предупреждение(перед загрузкой)", КодВозвратаДиалога.Отмена);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультатыПересчетаВыполнение(КодВозврата, ПараметрыЗагрузки)	Экспорт

	Если КодВозврата = КодВозвратаДиалога.ОК Тогда

		Если ПараметрыЗагрузки.Режим = "XLS" Тогда

				ЗагрузитьРезультатыПересчетаИзExcel();

		Иначе	ЗагрузитьРезультатыПересчетаИзТекстовогоФайла();

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультатыПересчетаИзExcel()

	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗагрузкуДанныхИзТаблицыExcel", ЭтотОбъект);
	ДиалогВыбораФайла  = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = "Выберите файл книги Excel";
	ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Лист Excel'") + " (*.xls)|*.xls|" + НСтр("ru = 'Лист Excel2007'") + " (*.xlsx)|*.xlsx";
	ДиалогВыбораФайла.ПолноеИмяФайла = ПолноеИмяИмпортируемогоФайла;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;

	ДиалогВыбораФайла.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультатыПересчетаИзТекстовогоФайла()

	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗагрузкуДанныхИзТекстовогоФайла", ЭтотОбъект);
	ДиалогВыбораФайла  = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = "Выберите текстовый файл";
	ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Текстовый файл'") + " (*.txt)|*.txt|" + НСтр("ru = 'Файл с разделителями CSV'") + " (*.csv)|*.csv";
	ДиалогВыбораФайла.ПолноеИмяФайла = ПолноеИмяИмпортируемогоФайла;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;

	ДиалогВыбораФайла.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхИзТаблицыExcel(СписокФайлов, ДополнительныеПараметры)	Экспорт

	Если СписокФайлов = Неопределено ИЛИ СписокФайлов.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	ВыполнитьЗагрузкуДанныхИзТаблицыExcelНаСервере(
		ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СписокФайлов[0]), УникальныйИдентификатор),
		ОбщегоНазначенияКлиентСервер.lx_GetTooken(СписокФайлов[0], ".")
	);
	Элементы.Товары.Обновить();

КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуДанныхИзТаблицыExcelНаСервере(АдресВХранилище, Расширение)

	ТабличныйДокумент  = Новый ТабличныйДокумент;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные     = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);

	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("НомерСтроки" , Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("Код"         , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(11)));
	ТаблицаЗначений.Колонки.Добавить("Количество"  , Новый ОписаниеТипов("Число"));

	СоставСтроки = Новый Массив;
	СоставСтроки.Добавить(Новый Структура("Колонка, Имя", КолонкаКод       , "Код"));
	СоставСтроки.Добавить(Новый Структура("Колонка, Имя", КолонкаКоличество, "Количество"));
	ТипЧисло = Новый ОписаниеТипов("Число");

	Попытка

		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);

		Для НомерСтроки = ПерваяСтрокаДанных По ТабличныйДокумент.ВысотаТаблицы Цикл

			Для каждого Позиция Из СоставСтроки Цикл

				ТекущаяОбласть = ТабличныйДокумент.ПолучитьОбласть(
					"R" + Формат(НомерСтроки, "ЧДЦ=; ЧН=0; ЧГ=") +
					"C" + Формат(Позиция.Колонка, "ЧДЦ=; ЧН=0; ЧГ=")).ТекущаяОбласть;

				Попытка

					ЗначениеЯчейки = ТекущаяОбласть.Значение;

				Исключение
					
					ЗначениеЯчейки = ТипЧисло.ПривестиЗначение(СтрЗаменить(ТекущаяОбласть.Текст, ",", "."));

				КонецПопытки;

				Если ТипЗнч(ЗначениеЯчейки) = Тип("Число") И Позиция.Имя = "Код" Тогда

					ЗначениеЯчейки = Формат(ЗначениеЯчейки, "ЧДЦ=; ЧГ=");

				КонецЕсли;

				Если Позиция.Имя = "Код" Тогда

					Если НЕ ПустаяСтрока(ЗначениеЯчейки) И СтрДлина(ЗначениеЯчейки) > 5 И СтрДлина(ЗначениеЯчейки) <= 11 Тогда

						СтрокаТаблицы = ТаблицаЗначений.Добавить();
						СтрокаТаблицы.НомерСтроки = НомерСтроки;

					Иначе

						Прервать;

					КонецЕсли;

				КонецЕсли;

				СтрокаТаблицы[Позиция.Имя] = ЗначениеЯчейки;

			КонецЦикла;

		КонецЦикла;

	//	---------------------------------------------------------------------------------------
	//	Почистим за собой...

		ТабличныйДокумент = Неопределено;

		Попытка

			УдалитьФайлы(ИмяВременногоФайла);

		Исключение	КонецПопытки;

	//	Заполняем табличную часть товары.
		УстановитьПолученныеДанныеВТабличнойЧасти(ТаблицаЗначений);

	Исключение

		ТекстОшибки = ОписаниеОшибки();
		Сообщить(ТекстОшибки);

		Попытка

			УдалитьФайлы(ИмяВременногоФайла);

		Исключение	КонецПопытки;

	КонецПопытки;	

КонецПроцедуры

&НаСервере	//	LNK 27.09.2017 12:47:50
Процедура УстановитьПолученныеДанныеВТабличнойЧасти(ТаблицаЗначений)

//	Новый вариант загрузки. Загрузку из текста тоже нужно привести к этому виду.

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаЗагрузки.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЗагрузки.Код КАК Код,
	|	ТаблицаЗагрузки.Количество КАК Количество
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаЗначений КАК ТаблицаЗагрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ТаблицаСправочник.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	Источник.Количество КАК Количество,
	|	Источник.Код КАК Код
	|ИЗ
	|	Источник КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
	|		ПО Источник.Код = ТаблицаСправочник.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	);
	Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаЗначений);
	Объект.Товары.Очистить();
	
	ТоварыВыборка = Запрос.Выполнить().Выбрать();

	Пока ТоварыВыборка.Следующий() Цикл

		Если ТоварыВыборка.Номенклатура.Пустая() Тогда

			ОтправленЗапрос = ВнешниеИсточникиСобытия.УстановитьОбъектДляОбработки(ТоварыВыборка.Код);
			Сообщить("Код " + ТоварыВыборка.Код + " в строке " + Формат(ТоварыВыборка.НомерСтроки, "ЧДЦ=; ЧГ=") + " НЕ обнаружен!"
			+ ?(ОтправленЗапрос = Истина, Символы.ПС + "Отправлен запрос IDN в Navision. Ожидайте получения позиции товара (не менее 30-40 минут).", ""));

		КонецЕсли;

		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ТоварыВыборка);
		СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.Количество;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхИзТекстовогоФайла(СписокФайлов, ДополнительныеПараметры)	Экспорт

	Если СписокФайлов = Неопределено ИЛИ СписокФайлов.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	НомерСтроки  = 0;
	ЧтениеТекста = Новый ЧтениеТекста(СписокФайлов[0]);

	Объект.Товары.Очистить();
	ТаблицаЗагрузки.Очистить();

	Пока Истина Цикл

		СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();

		Если ПустаяСтрока(СтрокаТекста) Тогда

			Прервать;

		КонецЕсли;

		НомерСтроки  = НомерСтроки + 1;
		ДанныеСтроки = ОбщегоНазначенияКлиентСервер.lx_FillValueList(, СтрЗаменить(СтрокаТекста, "^", ""),, "|");

		Если ДанныеСтроки.Количество() >= 2 Тогда

			КодТовара  = СокрЛП(ДанныеСтроки[0]);
			Количество = СокрЛП(ДанныеСтроки[1]);

			НоваяСтрока = ТаблицаЗагрузки.Добавить();
			НоваяСтрока.Код = СтрЗаменить(КодТовара, Символы.НПП, "");
			НоваяСтрока.Количество  = Количество;
			НоваяСтрока.НомерСтроки = НомерСтроки;

			Если НомерСтроки % 100 = 0 Тогда

				ПоказатьОповещениеПользователя("Прочитано " + Формат(НомерСтроки, "ЧДЦ=; ЧГ="));

			КонецЕсли;

		Иначе

			Сообщить("в строке №" + Формат(НомерСтроки, "ЧГ=") + " недопустимые данные [" + СтрокаТекста + "]" + Символы.ПС + "СТРОКА ПРОПУЩЕНА!");

		КонецЕсли;

	КонецЦикла;

	ЧтениеТекста.Закрыть();

	УстановитьТаблицуЗагрузкиВТабличнойЧасти();

КонецПроцедуры

&НаСервере
Процедура УстановитьТаблицуЗагрузкиВТабличнойЧасти()

	УстановитьНоменклатураТаблицаЗагрузки();

	Для каждого СтрокаТаблицы Из ТаблицаЗагрузки Цикл

		Если СтрокаТаблицы.Номенклатура.Пустая() Тогда

			ОтправленЗапрос = ВнешниеИсточникиСобытия.УстановитьОбъектДляОбработки(СтрокаТаблицы.Код);
			Сообщить("Код " + СтрокаТаблицы.Код + " в строке " + Формат(СтрокаТаблицы.НомерСтроки, "ЧДЦ=; ЧГ=") + " НЕ обнаружен!"
			+ ?(ОтправленЗапрос = Истина, Символы.ПС + "Отправлен запрос IDN в Navision. Ожидайте получения позиции товара (не менее 30-40 минут).", ""));

		КонецЕсли;

		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы);
		СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.Количество;

	КонецЦикла;

	Элементы.Товары.Обновить();
	ТаблицаЗагрузки.Очистить();

КонецПроцедуры

&НаСервере
Процедура УстановитьНоменклатураТаблицаЗагрузки()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаЗагрузки.НомерСтроки,
	|	ТаблицаЗагрузки.Код,
	|	ТаблицаЗагрузки.Количество
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаЗагрузки КАК ТаблицаЗагрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСправочник.Ссылка КАК Номенклатура,
	|	Источник.Количество,
	|	Источник.Код
	|ИЗ
	|	Источник КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
	|		ПО Источник.Код = ТаблицаСправочник.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	);
	Запрос.УстановитьПараметр("ТаблицаЗагрузки", ТаблицаЗагрузки.Выгрузить());
	ТаблицаЗагрузки.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		СтрокаТаблицы = ТаблицаЗагрузки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ОткрытьКнигуExcel(ПолноеИмяФайла, Отказ)

	ПолноеИмяИмпортируемогоФайла = ПолноеИмяФайла;

	Книга = Новый Структура(
		"Объект, ВсегоСтрок, ВсегоКолонок",, 0, 0);

//	Пытаемся подключиться к Excel
	Попытка

		Книга.Объект = Новый COMОбъект("Excel.Application");

	Исключение

		Отказ = Истина;
		ПоказатьОповещениеПользователя("Операция не выполнена!"
		,, "Вероятно, «Excel» на Вашем компьютере не установлен. Для выполнения данной операции необходимо установить систему «Excel»."
		, БиблиотекаКартинок.Предупреждение32);

	КонецПопытки;

	Если НЕ Отказ Тогда

	//	Подключились удачно, открываем файл
		Книга.Объект.Workbooks.Open(ПолноеИмяФайла);
	//	Открываем первый лист
		Книга.Объект.Sheets(1).select();

	//	Получаем количество строк и колонок.
	//	В разных версиях Excel получаются по-разному, поэтому сначала определим версию Excel

		Версия = Лев(Книга.Объект.Version, Найти(Книга.Объект.Version, ".") - 1);

		Если Версия = "8" тогда

			Книга.ВсегоСтрок   = Книга.Объект.Cells.CurrentRegion.Rows.Count;
			Книга.ВсегоКолонок = Макс(Книга.Объект.Cells.CurrentRegion.Columns.Count, 13);

		Иначе

			Книга.ВсегоСтрок   = Книга.Объект.Cells(1,1).SpecialCells(11).Row;
			Книга.ВсегоКолонок = Книга.Объект.Cells(1,1).SpecialCells(11).Column;   

		Конецесли;

	КонецЕсли;

	Возврат Книга;

КонецФункции // ОткрытьКнигуExcel()
	
#КонецОбласти

#Область ГруппаПоискПоКоду

&НаКлиенте
Процедура РежимКодаПоискаПриИзменении(Элемент)

	УправлениеЭлементамиФормыНаСервере();
	АктивизироватьЭлементКодПоиска();

КонецПроцедуры

&НаКлиенте
Процедура КодПоискаПриИзменении(Элемент)

	Установлено  = Ложь;
	Номенклатура = НайтиНоменклатуруПоКоду(СокрЛП(КодПоиска));

	Если Номенклатура.Пустая() Тогда

		ПоказатьОповещениеПользователя("Код [" + КодПоиска + "] не найден"
			,, "Указанный код отсутствует в справочнике «Номенклатура»", БиблиотекаКартинок.Предупреждение32);

	Иначе

		СтрокиВОтборе = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));

		Если СтрокиВОтборе.Количество() = 0 Тогда

			ПоказатьОповещениеПользователя("Код [" + КодПоиска + "] добавлен"
				,, "Позиция добавлена в табличную часть «Товары»", БиблиотекаКартинок.Предупреждение32);
		//	в этом случае тоже учитываем введенный код - всё-таки товар имеется в справочнике!
			СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Элементы.КодПоиска.СписокВыбора, СокрЛП(КодПоиска));

			СтрокаТовары = Объект.Товары.Добавить();
			СтрокаТовары.Номенклатура = Номенклатура;
			СтрокиВОтборе.Добавить(СтрокаТовары);

		КонецЕсли;

		Установлено = Истина;
		Элементы.Товары.ТекущаяСтрока  = СтрокиВОтборе[0].ПолучитьИдентификатор();
		Элементы.Товары.Обновить();
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок;

		Если НЕ (ТолькоПросмотр ИЛИ Элементы.Товары.ТекущийЭлемент.ТолькоПросмотр) Тогда

			Элементы.Товары.ИзменитьСтроку();

		КонецЕсли;

		СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Элементы.КодПоиска.СписокВыбора, СокрЛП(КодПоиска));

		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("Документ.ВедомостьИнвентаризационная", "ИсторияКодПоиска", Элементы.КодПоиска.СписокВыбора.ВыгрузитьЗначения());

	КонецЕсли;

	Если НЕ Установлено Тогда

		АктивизироватьЭлементКодПоиска();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция НайтиНоменклатуруПоКоду(Код)

	Номенклатура = Справочники.Номенклатура.ПустаяСсылка();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Код = &Код
	|	И НЕ ТаблицаСправочник.ЭтоГруппа"
	);
	Запрос.УстановитьПараметр("Код", Код);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

		Номенклатура = Выборка.Номенклатура;

	КонецЕсли;

	Возврат Номенклатура;

КонецФункции // НайтиНоменклатуруПоКоду()

&НаКлиенте
Процедура АктивизироватьЭлементКодПоиска()

	ПодключитьОбработчикОжидания("АктивизироватьЭлементКодПоискаОбработчик", 0.2, Истина);

КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЭлементКодПоискаОбработчик()

	ТекущийЭлемент = Элементы.КодПоиска;

КонецПроцедуры

#КонецОбласти








