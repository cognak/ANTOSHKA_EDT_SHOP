///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);

	Если Объект.ВидОперации = Перечисления.ВидыОперацийПереоценкаТоваровНаСкладах.РегламентнаяПереоценка Тогда

	//	LNK 20.09.2016 09:35:33
	//	NAV:БлокировкаДанныхУчестьДокументВNavision
	//	Обработчик подсистемы "NAV"
		ВнешниеИсточникиСобытия.ДобавитьКнопкуУчестьВNavision(ЭтотОбъект, ЭтотОбъект.КоманднаяПанель);
	//	Оформление элементов в обработчике подсистемы "NAV"
		ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект);

	КонецЕсли;

//	LNK 26.12.2016 12:19:55
//	Сортировка по "вторичным" полям
	РаботаСФормами.ДобавитьКнопкиПорядкаКодАртикул(ЭтотОбъект, Элементы.ТоварыДополнительнаяСортировка, РаботаСФормамиПовтИсп.КлючиСортировки() + ", ЦенаРазница");

	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект, КартинкаСостоянияДокумента, СостояниеДокумента, РазрешеноПроведение);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда

		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ЗаполнитьРазницуЦенТоваров();

	КонецЕсли;
	
	НастроитьФормуПоДополнительнымПравам();

	УправлениеДоступомРТ.ПриСозданииФормыНаСервере(ЭтотОбъект);	//	LNK 17.10.2019 14:30:01
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	ЗаполнитьРазницуЦенТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СтатусТСД = ПолучитьСтатусТСД_БезИзменения();
	Если НЕ СтатусТСД = Неопределено тогда 
		ЭтотОбъект.СтутусДОКТСД = СтатусТСД;
	Если СтатусТСД = ПредопределенноеЗначение("Перечисление.СтатусДокТСД.ВыгрузитьВТСД") ИЛИ  СтатусТСД = ПредопределенноеЗначение("Перечисление.СтатусДокТСД.НОВЫЙ") ИЛИ СтатусТСД = ПредопределенноеЗначение("Перечисление.СтатусДокТСД.ОТМЕНЕНО") тогда
			Элементы.ФормаВыгрузитьВТСД.Доступность = Истина; 			
	КонецЕсли; 		
	
	Иначе
			Элементы.ФормаВыгрузитьВТСД.Доступность = Истина; 			
	КонецЕсли;

КонецПроцедуры

//	LNK 20.09.2016 09:36:14
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПереоценкаТоваровНаСкладах.РегламентнаяПереоценка") Тогда

	//	NAV:БлокировкаДанныхУчестьДокументВNavision
		Если ИмяСобытия = "РегистрацияПередачиВNavision" Тогда

			ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 20.09.2016 09:37:10
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПереоценкаТоваровНаСкладах.РегламентнаяПереоценка Тогда

	//	LNK 20.09.2016 09:37:10
	//	NAV:БлокировкаДанныхУчестьДокументВNavision
	//	Управление блокировкой "УчётВNavision" подсистемы "NAV" (реквизит "РегистрацияПередачиВNavision" создается в обработчике ПриСозданииНаСервере)
		ТекущийОбъект.ДополнительныеСвойства.Вставить("РегистрацияПередачиВNavision", ЭтотОбъект["РегистрацияПередачиВNavision"]);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ЗаполнитьРазницуЦенТоваров();
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПереоценкаТоваровНаСкладах.РегламентнаяПереоценка Тогда
	
	//	LNK 20.09.2016 09:37:54
	//	NAV:БлокировкаДанныхУчестьДокументВNavision
	//	Оформление элементов в обработчике подсистемы "NAV"
		ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект);

	КонецЕсли;

КонецПроцедуры

//	LNK 06.10.2016 12:45:12
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПереоценкаТоваровНаСкладах.РегламентнаяПереоценка") Тогда
	
	//	LNK 20.09.2016 09:38:50
	//	NAV:БлокировкаДанныхУчестьДокументВNavision
		ВнешниеИсточникиКлиент.ВыполнитьОповещениеПередачиДокументаВNavision(Объект.Ссылка, Объект.Ссылка, ЭтотОбъект["РегистрацияПередачиВNavision"]);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстОшибки = НСтр("ru='Не введено ни одной строки в список ""Товары"".'");
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Объект,
			"Товары",
			,
			Отказ);
			
	Иначе
			
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Объект.ДатаНовыхЦен = КонецДня(Объект.Дата) + 1;
//	Обязательно очищаем! Пользователи мутят, переставляя даты, а потом предлагают решать загадки.
//	Такое же действие необходимо выполнить в "связанной" процедуре "ДатаНовыхЦенПриИзменении"
	Объект.Товары.Очистить();
	
КонецПроцедуры

//	LNK 24.11.2016 09:39:08
&НаКлиенте
Процедура ДатаНовыхЦенПриИзменении(Элемент)

	Объект.Товары.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура МагазинНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 Тогда
		Ответ = Вопрос(НСтр("ru = 'Табличная часть будет очищена.
			|Продолжить редактирование?'"), РежимДиалогаВопрос.ДаНет); 
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)

	Объект.Товары.Очистить();

КонецПроцедуры

//	NAV:БлокировкаДанныхУчестьДокументВNavision
#Область ОбслуживаниеКнопкиУчестьДокументВNavision

//	LNK 20.09.2016 09:39:43
//	Обработчик события кнопки подсистемы "NAV"
&НаКлиенте
Процедура РегистрацияПередачиВNavisionНажатие(Элемент)

	ВнешниеИсточникиКлиент.ПодтвердитьРешениеУчетВNavision(ЭтотОбъект);

КонецПроцедуры

//	LNK 20.09.2016 09:39:43
//	Обработчик события кнопки подсистемы "NAV"
&НаСервере
Процедура РегистрацияПередачиВNavisionНаСервере()	Экспорт

//	Оформление элементов в обработчике подсистемы "NAV"
	ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект, Истина);

КонецПроцедуры

//	LNK 23.10.2017 14:18:28
&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник)

//	LNK 20.09.2016 09:36:30
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ИмяСобытия = "РегистрацияПередачиВNavision" Тогда

		Если НЕ Источник = Объект.Ссылка И Параметр.Объект = Объект.Ссылка Тогда

		//	Оформление элементов в обработчике подсистемы "NAV"
			ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

//	LNK 19.12.2016 12:37:21
//	Сортировка по "вторичным" полям
#Область СортировкаПоВторичнымПолям

&НаКлиенте
Процедура ТоварыПорядокКодПоВозрастаниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Код", "Возр");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокКодПоУбываниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Код", "Убыв");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокАртикулПоВозрастаниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Артикул", "Возр");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокАртикулПоУбываниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Артикул", "Убыв");

КонецПроцедуры

&НаСервере
Процедура ТоварыСортироватьПоРеквизитуНоменклатурыСервер(ИмяРеквизита, Направление)

	РаботаСФормами.ТоварыСортироватьПоРеквизитуНоменклатуры(ИмяРеквизита, Направление, Объект.Товары);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокПроизводительПоУбываниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Производитель", "Убыв");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокПроизводительПоВозрастаниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Производитель", "Возр");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокТорговаяМаркаПоУбываниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("ТорговаяМарка", "Убыв");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокТорговаяМаркаПоВозрастаниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("ТорговаяМарка", "Возр");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокЦенаРазницаПоУбываниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("ЦенаРазница", "Убыв");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокЦенаРазницаПоВозрастаниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("ЦенаРазница", "Возр");

КонецПроцедуры


#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "Товары"

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьДанныеПереоценки(Команда)

	Если НЕ ВозможностьЗаполненияТабличнойЧасти() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьДанныеПереоценкиНаСервере();
	
	ПоказатьОповещениеПользователя(
			НСтр("ru = 'Заполнение:'"),
			,
			СтрЗаменить(НСтр("ru = 'Заполнено %КоличествоСтрок% строк в таблице Товары'"), "%КоличествоСтрок%", Объект.Товары.Количество()),
			БиблиотекаКартинок.Информация32);

КонецПроцедуры

//	LNK 06.03.2017 11:20:30
&НаКлиенте
Процедура ЗагрузитьТоварыИзТаблицыExcel(Команда)

	Если Объект.Товары.Количество() > 0 Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьТоварыИзТаблицыExcelЗавершение", ЭтотОбъект, Новый Структура);
		ПоказатьВопрос(ОписаниеОповещения
			, "Табличная часть Товары будет очищена.
			  |Подтвердите своё решение:"
			, РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.ОК
			, "Предупреждение(перед загрузкой)", КодВозвратаДиалога.Отмена);

	Иначе

		ЗагрузитьТоварыИзТаблицыExcelЗавершение(КодВозвратаДиалога.ОК, Новый Структура);

	КонецЕсли;

КонецПроцедуры

//	LNK 27.12.2017 12:13:00
&НаСервере
Процедура ЗаполнитьКоличествоФактПоКоличествуНаСервере()

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл

		СтрокаТабличнойЧасти.КоличествоФакт = СтрокаТабличнойЧасти.Количество;

	КонецЦикла;

КонецПроцедуры

//	LNK 27.12.2017 12:13:31
&НаКлиенте
Процедура ЗаполнитьКоличествоФактПоКоличеству(Команда)

	ЗаполнитьКоличествоФактПоКоличествуНаСервере();

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
//	LNK 04.01.2017 13:54:53
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Номер.ТолькоПросмотр,
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьНомерДокумента);

КонецПроцедуры

//Осуществляет проверки на заполненность реквизитов, нужных для заполнения
//Очищает табличную часть в случае необходимости
//Возвращаемое значение - Булево (Истина - все проверки и действия успешны)
&НаКлиенте
Функция ВозможностьЗаполненияТабличнойЧасти()
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		
		ТекстОшибки = НСтр("ru='Поле %1 не заполнено'");
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, "Магазин"),
			Объект.Ссылка,
			"Объект.Магазин");
			
		Возврат Ложь;
			
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		
		ТекстОшибки = НСтр("ru='Поле %1 не заполнено'");
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, "ВидНоменклатуры"),
			Объект.Ссылка,
			"Объект.ВидНоменклатуры");
			
		Возврат Ложь;
			
	КонецЕсли;
		
	Если Объект.Товары.Количество() = 0 Тогда
		
		Возврат Истина;
		
	КонецЕсли; 
	
	Ответ = Вопрос(НСтр("ru = 'Табличная часть будет очищена! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.Товары.Очистить();
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
 
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ЗаполнитьДанныеПереоценкиНаСервере()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьДанныеПереоценки(ИспользоватьОстаткиТоваровНаДатуНовыхЦен);

	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ЗаполнитьРазницуЦенТоваров();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПереоценкиНаСервереСоСкидками()
	КлючиПолитики = ОбменMicrosoftDynamicsПовтИсп.УчетнаяПолитика(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Если КлючиПолитики.УправлениеЦенниками = Истина Тогда
		ДокументОбъект.ЗаполнитьДанныеПереоценкиСоСкидкамиЦРМ(ИспользоватьОстаткиТоваровНаДатуНовыхЦен);
	Иначе
		ДокументОбъект.ЗаполнитьДанныеПереоценкиСоСкидками(ИспользоватьОстаткиТоваровНаДатуНовыхЦен);
	КонецЕсли;


	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ЗаполнитьРазницуЦенТоваров();

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВТСДПриИзменении(Элемент)
	ВыгрузитьВТСДПриИзмененииНаСервере(ВыгрузитьВТСД);
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьВТСДПриИзмененииНаСервере(Выгружать)
	УстановитьПривилегированныйРежим(Истина);
	Если Выгружать тогда 
		Если НЕ ЗначениеЗаполнено(Объект.СтатусТСД) ИЛИ Объект.СтатусТСД = ПредопределенноеЗначение("Перечисление.СтатусДокТСД.ОТМЕНЕНО") тогда
			Объект.СтатусТСД = Перечисления.СтатусДокТСД.ВыгрузитьВТСД;
		КонецЕсли;
	Иначе
		Если Объект.СтатусТСД = Перечисления.СтатусДокТСД.ВыгрузитьВТСД тогда
			Объект.СтатусТСД = Перечисления.СтатусДокТСД.ПустаяСсылка();
		КонецЕсли; 		
	КонецЕсли;
	
//	LNK 17.02.2017 06:55:19
	ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	ОбъектДокумент.ДополнительныеСвойства.Вставить("ИзменениеСтатусаРаботыСТерминалом", Истина);
	ОбъектДокумент.Записать();
	ЗначениеВРеквизитФормы(ОбъектДокумент, "Объект");
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Процедура ВыгрузитьВТСДНаСервере()
	
	ТранспортТерминалов.ВыгрузитьДокументПереоценка(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВТСД(Команда)
	
	Если Объект.ПометкаУдаления тогда
		Сообщить("Документ помечен на удаление! Выгрузка в ТСД невозможна!");
	    Возврат;
	КонецЕсли;
		СтатусТСД = ПолучитьСтатусТСД();
		ЭтотОбъект.СтутусДОКТСД =  СтатусТСД;
	Если ЗначениеЗаполнено(СтатусТСД) тогда
		Если СтатусТСД = ПредопределенноеЗначение("Перечисление.СтатусДокТСД.ВыгрузитьВТСД") или СтатусТСД = ПредопределенноеЗначение("Перечисление.СтатусДокТСД.НОВЫЙ")  тогда
			ВыгрузитьВТСДНаСервере();
			Сообщить("Документ выгружен в ТСД !");
		ИначеЕсли  СтатусТСД = ПредопределенноеЗначение("Перечисление.СтатусДокТСД.ОТМЕНЕНО") тогда	
			ЭтотОбъект.СтутусДОКТСД = ПредопределенноеЗначение("Перечисление.СтатусДокТСД.ВыгрузитьВТСД"); 
			УстановитьСтатусТСД();  			
			ВыгрузитьВТСДНаСервере();
			Сообщить("Документ выгружен в ТСД !"); 			
		КонецЕсли;
	Иначе
		Сообщить("Установите флажок выгрузить в ТСД!")
	КонецЕсли;

	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазницуЦенТоваров()

	Для каждого СтрокаТовары Из Объект.Товары Цикл

		СтрокаТовары.ЦенаРазница = СтрокаТовары.ЦенаНовая - СтрокаТовары.Цена;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УдалитьИзТСДНаСервере()

	ТипДок = "ПЕРЕОЦЕНКА";  	
	ТранспортТерминалов.УстановитьСтатусОтмена(ТипДок,Объект.Номер,Объект.Дата);
	ЭтотОбъект.СтутусДОКТСД = Перечисления.СтатусДокТСД.ОТМЕНЕНО;
	УстановитьСтатусТСДОтмена();

КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзТСД(Команда)
	УдалитьИзТСДНаСервере();
КонецПроцедуры


&НаСервере
Процедура ОтменитьСтатусНаСервере()
	Если ЗначениеЗаполнено(Объект.СтатусТСД) тогда  	
		Если НЕ Объект.СтатусТСД = Перечисления.СтатусДокТСД.ОТМЕНЕНО тогда 		
			Объект.СтатусТСД = Перечисления.СтатусДокТСД.ОТМЕНЕНО;
		//	Записать();	
		//	LNK 17.02.2017 06:55:19
			ОбъектДокумент = РеквизитФормыВЗначение("Объект");
			ОбъектДокумент.ДополнительныеСвойства.Вставить("ИзменениеСтатусаРаботыСТерминалом", Истина);
			ОбъектДокумент.Записать();
			ЗначениеВРеквизитФормы(ОбъектДокумент, "Объект");
		КонецЕсли;		
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтатусТСД_БезИзменения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТАБСтатусТСД.СтатусТСД  КАК  СтатусДок
		|ИЗ
		|	РегистрСведений.СтатусТСД КАК ТАБСтатусТСД
		|ГДЕ
		|	ТАБСтатусТСД.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() тогда
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтатусДок = ВыборкаДетальныеЗаписи.СтатусДок;
	КонецЦикла;
	Иначе
    	СтатусДок = Неопределено;
	КонецЕсли;
	Возврат СтатусДок;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

&НаСервере
Процедура УстановитьСтатусТСДОтмена()
	
	
		НаборЗаписей = РегистрыСведений.СтатусТСД.СоздатьНаборЗаписей(); 
		Магазин = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин; 
		НаборЗаписей.Отбор.Магазин.Установить(Магазин);
		НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка); 

		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Магазин = Магазин;
		НоваяЗапись.Объект = Объект.Ссылка;
		НоваяЗапись.СтатусТСД = Перечисления.СтатусДокТСД.ОТМЕНЕНО; 
		НоваяЗапись.ВремяИзменения = ТекущаяДата(); 
		НаборЗаписей.Записать();
	
		
КонецПроцедуры

&НаСервере
Функция ПолучитьСтатусТСД()
	СтатусДок = Перечисления.СтатусДокТСД.НОВЫЙ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабСтатусТСД.СтатусТСД  КАК  СтатусДок
		|ИЗ
		|	РегистрСведений.СтатусТСД КАК ТабСтатусТСД
		|ГДЕ
		|	ТабСтатусТСД.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() тогда
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтатусДок = ВыборкаДетальныеЗаписи.СтатусДок;
	КонецЦикла;
	Иначе
    	СтатусДок = Перечисления.СтатусДокТСД.ВыгрузитьВТСД;
		УстановитьСтатусТСД();
	КонецЕсли;
	Возврат СтатусДок;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

&НаСервере
Процедура УстановитьСтатусТСД()
	
	
		НаборЗаписей = РегистрыСведений.СтатусТСД.СоздатьНаборЗаписей(); 
		Магазин = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин; 
		НаборЗаписей.Отбор.Магазин.Установить(Магазин);
		НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка); 

		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Магазин = Магазин;
		НоваяЗапись.Объект = Объект.Ссылка;
		НоваяЗапись.СтатусТСД = Перечисления.СтатусДокТСД.НОВЫЙ; 
		НоваяЗапись.ВремяИзменения = ТекущаяДата(); 
		НаборЗаписей.Записать();
	
		
КонецПроцедуры


//	LNK 06.03.2017 11:24:55
&НаКлиенте
Процедура ЗагрузитьТоварыИзТаблицыExcelЗавершение(КодВозврата, ДополнительныеПараметры)	Экспорт

	Если КодВозврата = КодВозвратаДиалога.ОК Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗагрузкуДанныхИзТаблицыExcel", ЭтотОбъект);
		ДиалогВыбораФайла  = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Заголовок = "Выберите файл книги Excel";
		ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Лист Excel'") + " (*.xls)|*.xls|" + НСтр("ru = 'Лист Excel2007'") + " (*.xlsx)|*.xlsx";
		ДиалогВыбораФайла.ПолноеИмяФайла = ПолноеИмяИмпортируемогоФайла;
		ДиалогВыбораФайла.МножественныйВыбор = Ложь;
		ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;

		ДиалогВыбораФайла.Показать(ОписаниеОповещения);

	Иначе

		Сообщить("Отменено пользователем.");

	КонецЕсли;

КонецПроцедуры

//	LNK 06.03.2017 11:48:00
&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхИзТаблицыExcel(СписокФайлов, ДополнительныеПараметры)	Экспорт

	Если ТипЗнч(СписокФайлов) = Тип("Массив") И НЕ СписокФайлов.Количество() = 0 Тогда

		Объект.Товары.Очистить();

		ПолноеИмяИмпортируемогоФайла = СписокФайлов[0];

		ПоказатьОповещениеПользователя("Загрузка данных из файла ...",, "Выполняется загрузка «" + ПолноеИмяИмпортируемогоФайла + "»", БиблиотекаКартинок.Предупреждение32);

		МассивТоваров = ЗаполнениеОбъектов.ЗагрузитьДанныеВМассивИзТаблицыExcel(
			ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяИмпортируемогоФайла), УникальныйИдентификатор),
			ОбщегоНазначенияКлиентСервер.lx_GetTooken(ПолноеИмяИмпортируемогоФайла, ".")
		);

		Для каждого СоставСтроки Из МассивТоваров Цикл

			СтрокаТовары = Объект.Товары.Добавить();
			СтрокаТовары.Номенклатура = СоставСтроки.Номенклатура;

		КонецЦикла;

		ПоказатьОповещениеПользователя("Проверка остатков ...",, "Проверка остатков по загруженным товарам (" + Формат(Объект.Товары.Количество(), "ЧДЦ=; ЧН=0; ЧГ=") + ")", БиблиотекаКартинок.Предупреждение32);

		ОбновитьДанныеПереоценкиПоСоставу();

		ПоказатьОповещениеПользователя("Загрузка данных выполнена!",,, БиблиотекаКартинок.Предупреждение32);
	
	Иначе

		Сообщить("Выбор не был сделан. Операция не выполнена");
	
	КонецЕсли;

КонецПроцедуры

//	LNK 20.03.2017 15:02:05
&НаСервере
Процедура ОбновитьДанныеПереоценкиПоСоставу()	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(&Магазин КАК Справочник.Магазины) КАК Магазин,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.Магазин.СкладПродажи КАК Склад,
	|	Источник.Магазин.ПравилоЦенообразования.ВидЦен КАК ВидЦен,
	|	Источник.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладах.Характеристика КАК Характеристика,
	|	ТоварыНаСкладах.КоличествоОстаток КАК Количество,
	|	Источник.НомерСтроки КАК КлючПорядка
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Источник КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&ДатаОстатков, ДЕНЬ), СЕКУНДА, 1),
	|				(Склад.Магазин, Номенклатура) В
	|					(ВЫБРАТЬ
	|						Источник.Магазин,
	|						Источник.Номенклатура
	|					ИЗ
	|						Источник)) КАК ТоварыНаСкладах
	|		ПО Источник.Магазин = ТоварыНаСкладах.Склад.Магазин
	|			И Источник.Номенклатура = ТоварыНаСкладах.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦен,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.Склад КАК Склад,
	|	ТаблицаДанных.Номенклатура КАК Номенклатура,
	|	ТаблицаДанных.Характеристика КАК Характеристика,
	|	ТаблицаДанных.Количество КАК Количество,
	|	ТаблицаДанных.Цена КАК Цена,
	|	ТаблицаДанных.ЦенаНовая КАК ЦенаНовая,
	|	ТаблицаДанных.Акция КАК Акция,
	|	ТаблицаДанных.Цена * ТаблицаДанных.Количество КАК Сумма,
	|	ТаблицаДанных.ЦенаНовая * ТаблицаДанных.Количество КАК СуммаНовая,
	|	ТаблицаДанных.ЦенаНовая * ТаблицаДанных.Количество - ТаблицаДанных.Цена * ТаблицаДанных.Количество КАК СуммаПереоценки,
	|	ТаблицаДанных.КлючПорядка КАК КлючПорядка,
	|	ТаблицаДанных.ТорговаяМарка КАК ТорговаяМарка,
	|	ТаблицаДанных.Производитель КАК Производитель
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.Склад КАК Склад,
	|		Товары.Номенклатура КАК Номенклатура,
	|		Товары.Характеристика КАК Характеристика,
	|		Товары.Количество КАК Количество,
	|		ЕСТЬNULL(ОпорныеЦеныНоменклатуры.Цена, 0) / ЕСТЬNULL(ОпорныеЦеныНоменклатуры.Упаковка.Коэффициент, 1) КАК Цена,
	|		ЕСТЬNULL(ЦеныНовые.Цена, 0) / ЕСТЬNULL(ЦеныНовые.Упаковка.Коэффициент, 1) КАК ЦенаНовая,
	|		ЦеныНовые.Акция КАК Акция,
	|		Товары.КлючПорядка КАК КлючПорядка,
	|		ЕСТЬNULL(ТаблицаРеквизиты.Значение, ЗНАЧЕНИЕ(Справочник.Марки.ПустаяСсылка)) КАК ТорговаяМарка,
	|		Товары.Номенклатура.Производитель КАК Производитель
	|	ИЗ
	|		Товары КАК Товары
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(&ДатаДокумента, ОбъектЦенообразования = &Магазин) КАК ЦеныПредыдущие
	|			ПО Товары.Номенклатура = ЦеныПредыдущие.Номенклатура
	|				И Товары.Характеристика = ЦеныПредыдущие.Характеристика
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|					КОНЕЦПЕРИОДА(&ДатаНовыхЦен, ДЕНЬ),
	|					(ВидЦены, Номенклатура) В
	|						(ВЫБРАТЬ
	|							Товары.ВидЦен,
	|							Товары.Номенклатура
	|						ИЗ
	|							Товары)) КАК ЦеныНовые
	|			ПО Товары.Номенклатура = ЦеныНовые.Номенклатура
	|				И Товары.Характеристика = ЦеныНовые.Характеристика
	|				И Товары.ВидЦен = ЦеныНовые.ВидЦены
	|				И (ЦеныНовые.Период >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаНовыхЦен, ДЕНЬ), ДЕНЬ, -1))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ТаблицаРеквизиты
	|			ПО Товары.Номенклатура = ТаблицаРеквизиты.Ссылка
	|				И (ТаблицаРеквизиты.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ТорговыеМарки))
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОпорныеЦеныНоменклатуры.СрезПоследних(, ) КАК ОпорныеЦеныНоменклатуры
	|			ПО Товары.Номенклатура = ОпорныеЦеныНоменклатуры.Номенклатура
	|				И Товары.Склад.Магазин = ОпорныеЦеныНоменклатуры.Магазин
	|				И Товары.Характеристика = ОпорныеЦеныНоменклатуры.Характеристика) КАК ТаблицаДанных
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка"
	);
	Запрос.УстановитьПараметр("ТабличнаяЧасть", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ДатаДокумента" , Объект.Дата);
	Запрос.УстановитьПараметр("ДатаНовыхЦен"  , Объект.ДатаНовыхЦен);
	Запрос.УстановитьПараметр("ДатаОстатков"  ,
		?(ИспользоватьОстаткиТоваровНаДатуНовыхЦен = Истина, Объект.ДатаНовыхЦен, Объект.Дата));
	Запрос.УстановитьПараметр("Магазин"       , Объект.Магазин);
	
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьДанныеПереоценкиСоСкидками(Команда)
	
	
	Если НЕ ВозможностьЗаполненияТабличнойЧасти() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьДанныеПереоценкиНаСервереСоСкидками();
	
	ПоказатьОповещениеПользователя(
			НСтр("ru = 'Заполнение:'"),
			,
			СтрЗаменить(НСтр("ru = 'Заполнено %КоличествоСтрок% строк в таблице Товары'"), "%КоличествоСтрок%", Объект.Товары.Количество()),
			БиблиотекаКартинок.Информация32);
КонецПроцедуры


&НаКлиенте
Процедура ТипПереоценкиПриИзменении(Элемент)
		УстановитьОтборНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНаКлиенте() 
	Элементы.Товары.ОтборСтрок= Неопределено;
	
	Если ЗначениеЗаполнено(ТипПереоценки) тогда
		Если  ТипПереоценки = ПредопределенноеЗначение("Перечисление.ТипыПереоценок.Переоценка") тогда
			Для каждого СтрокаТовары Из Объект.Товары Цикл
				Если СтрокаТовары.ТипПереоценки = ПредопределенноеЗначение("Перечисление.ТипыПереоценок.Переоценка") или СтрокаТовары.ТипПереоценки = ПредопределенноеЗначение("Перечисление.ТипыПереоценок.ПустаяСсылка") тогда
					 СтрокаТовары.КлючОтбора = Истина;
						Элементы.Товары.ОтборСтрок= Новый ФиксированнаяСтруктура("КлючОтбора", Истина);
					 
				КонецЕсли;
            КонецЦикла;
		Иначе
			Элементы.Товары.ОтборСтрок= Новый ФиксированнаяСтруктура("ТипПереоценки", ТипПереоценки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // УстановитьОтборДинамическихСписковНаКлиенте()

&НаКлиенте
Процедура ТипПереоценкиОчистка(Элемент, СтандартнаяОбработка)
	Элементы.Товары.ОтборСтрок= Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПоТипуПереоценки(Команда)
		АдресВХранилище = ПодготовитьСтруктуруДанных(ТипПереоценки);
		
		СтруктураПараметры = Новый Структура("АдресВХранилище", АдресВХранилище);
		
		ОткрытьФорму(
			"Обработка.ПечатьЭтикетокИЦенников.Форма.Форма",
			СтруктураПараметры,            // Параметры
			,                              // Владелец
			Новый УникальныйИдентификатор  // Уникальность
		);
		

КонецПроцедуры

&НаСервере  
Функция ПодготовитьСтруктуруДанных(ОтборТипПереоценки)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	СУММА(Товары.Количество) КАК Количество,
	|	Товары.ЦенаНовая КАК Цена,
	|	Товары.Цена КАК СтараяЦена,
	|	Товары.ТипСкидкиНаценки,
	|	Товары.СкидкаНаценка,
	|	МАКСИМУМ(Товары.ЗначениеСкидкиНаценки) КАК ЗначениеСкидкиНаценки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Товары.Номенклатура.Марка.ВысокомаржинальнаяТМ, ЛОЖЬ) = ИСТИНА
	|			ТОГДА ""8""
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК Маржинальность
	|ИЗ
	|	Документ.ПереоценкаТоваровНаСкладах.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &МассивДокументов
	|	И Товары.ТипПереоценки В (&ТипПереоценки)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.ЦенаНовая,
	|	Товары.Цена,
	|	Товары.ТипСкидкиНаценки,
	|	Товары.СкидкаНаценка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Шапка.Магазин.СкладПродажи КАК Склад,
	|	Шапка.Магазин.ПравилоЦенообразования КАК ПравилоЦенообразования,
	|	Шапка.Магазин КАК Магазин,
	|	МАКСИМУМ(Шапка.ДатаНовыхЦен) КАК ДатаНовыхЦен
	|ИЗ
	|	Документ.ПереоценкаТоваровНаСкладах КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Шапка.Магазин.СкладПродажи,
	|	Шапка.Магазин.ПравилоЦенообразования,
	|	Шапка.Магазин"
	);
	Запрос.УстановитьПараметр("МассивДокументов", Объект.Ссылка );
	Если ОтборТипПереоценки = Перечисления.ТипыПереоценок.Переоценка тогда
		ТипыПереценок = Новый Массив;
		ТипыПереценок.Добавить(Перечисления.ТипыПереоценок.Переоценка);
		ТипыПереценок.Добавить(Перечисления.ТипыПереоценок.ПустаяСсылка());
	ИначеЕсли ОтборТипПереоценки = Перечисления.ТипыПереоценок.ПромоЗавершение ИЛИ ОтборТипПереоценки = Перечисления.ТипыПереоценок.ПромоНачало тогда
		ТипыПереценок = Новый Массив;
		ТипыПереценок.Добавить(ОтборТипПереоценки);
	Иначе
		ТипыПереценок = Новый Массив;
		ТипыПереценок.Добавить(Перечисления.ТипыПереоценок.Переоценка);
		ТипыПереценок.Добавить(Перечисления.ТипыПереоценок.ПустаяСсылка());
		ТипыПереценок.Добавить(Перечисления.ТипыПереоценок.ПромоНачало());
		ТипыПереценок.Добавить(Перечисления.ТипыПереоценок.ПромоЗавершение()); 		
	КонецЕсли;
	Запрос.УстановитьПараметр("ТипПереоценки", ТипыПереценок);
	МассивРезультатов = Запрос.ВыполнитьПакет();
//	МассивПроведенныхДокументов = МассивРезультатов[2].Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивСкладов     = Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Склад").ВыгрузитьКолонку(0);
	МассивПравилЦенообразования    = Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПравилоЦенообразования").ВыгрузитьКолонку(0);
	МассивМагазинов = Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Магазин").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьМагазин", ?(МассивМагазинов.Количество() = 1,МассивМагазинов[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад", ?(МассивСкладов.Количество() = 1,МассивСкладов[0], МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьПравилоЦенообразования", ?(МассивПравилЦенообразования.Количество() = 1,МассивПравилЦенообразования[0], Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");

//	LNK 01.11.2016 17:00:25
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу", Истина);
	СтруктураДействий.Вставить("УстановитьДатуПолученияЦен", ?(ТаблицаРеквизитыДокументов.Количество() = 0, '00010101', ТаблицаРеквизитыДокументов[0].ДатаНовыхЦен));
	СтруктураДействий.Вставить("УстановитьЦеныИзИсточника" , Истина);

	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	
	// Подготовка данных для заполенения табличной части обработки печати ценников и этикеток
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции // ПодготовитьДанные()

&НаКлиенте
Процедура ЗаполнитьАкции(Команда)
	Если НЕ ВозможностьЗаполненияТабличнойЧасти() Тогда
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьДанныеАкции();
	
	ПоказатьОповещениеПользователя(
			НСтр("ru = 'Заполнение:'"),
			,
			СтрЗаменить(НСтр("ru = 'Заполнено %КоличествоСтрок% строк в таблице Товары'"), "%КоличествоСтрок%", Объект.Товары.Количество()),
			БиблиотекаКартинок.Информация32);
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьДанныеАкции()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьДанныеСкидками(ИспользоватьОстаткиТоваровНаДатуНовыхЦен);

	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ЗаполнитьРазницуЦенТоваров();

КонецПроцедуры



