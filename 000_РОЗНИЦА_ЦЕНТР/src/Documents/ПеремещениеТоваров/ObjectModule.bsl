#Область ОбработчикиОсновныхСобытийОбъекта

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Если НЕ ПодарочныеСертификатыСервер.ОбработкаПроведенияКонтроль("Списание", ЭтотОбъект, Отказ) Тогда

		Возврат;	//	LNK 05.03.2020 10:39:13

	КонецЕсли;

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.ПеремещениеТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеСервер.ОтразитьДвиженияПоРегистру("ТоварыНаМагазинах", ДополнительныеСвойства, Движения, Отказ); 
	ЗапасыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияСерийныхНомеров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияНоменклатураПоставщиков(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗакупкиСервер.ОтразитьЗаказыТоваров(ДополнительныеСвойства, Движения, Отказ);
//	LNK 12.12.2017 13:54:59
	МотивационнаяПрограммаСервер.ОтразитьПродажиПоЗаказамПокупателей(ДополнительныеСвойства, Движения, Отказ);

	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ДополнительныеСвойства.Вставить("ИсключительныйРежимВключен"
		, ТехническаяПоддержкаВызовСервера.ИсключительныйРежим()
		ИЛИ РежимЗаписи = РежимЗаписиДокумента.Запись И ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ИзменениеСтатусаРаботыСТерминалом", Ложь) = Истина);
//	LNK 16.02.2017 14:33:05 - здесь ИсключительныйРежим будет отлючен для бесправного пользователя
	ЗаполнениеОбъектовСобытия.ОбщиеДействияПередЗаписью(ЭтотОбъект, Отказ);
	
	Если ВидПеремещения.Пустая() Тогда	//	LNK 18.09.2016 08:27:24 - перенесено из "ОбработкаПроверкиЗаполнения"

		ВидПеремещения = Перечисления.ВидыПеремещенийТоваров.ОперационныйДокумент;

	КонецЕсли;

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

	РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Номер, Дата, Проведен, ПометкаУдаления, СкладПолучатель, ЗаказПокупателя");
	ДополнительныеСвойства.Вставить("ПометкаУдаления", РеквизитыСсылки.ПометкаУдаления);
	ДополнительныеСвойства.Вставить("Проведен"       , РеквизитыСсылки.Проведен);
	ДополнительныеСвойства.Вставить("Номер"          , РеквизитыСсылки.Номер);
	ДополнительныеСвойства.Вставить("Дата"           , РеквизитыСсылки.Дата);
	ДополнительныеСвойства.Вставить("СкладПолучатель", РеквизитыСсылки.СкладПолучатель);
	ДополнительныеСвойства.Вставить("ЗаказПокупателя", РеквизитыСсылки.ЗаказПокупателя);

	Если ПометкаУдаления Тогда

		ДополнительныеСвойства.Вставить("НеПроверятьРегистрациюВОбменNavision", Истина);

	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда

		Возврат;
		
	КонецЕсли;
	
//	LNK 09.09.2016 08:55:37
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если НЕ ЭтоНовый() Тогда

		Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ЗагрузкаИзNavision", Ложь) Тогда

			ПередЗаписьюВосстановитьСерийныеНомера(Отказ);	//	LNK 04.11.2020 12:09:28

		Иначе

			Если ВнешниеИсточникиСобытия.ПередачаNavision(Ссылка) Тогда

				Если ДополнительныеСвойства.ИсключительныйРежимВключен ИЛИ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "СлужебнаяЗапись", Ложь) Тогда

					Документы.ПеремещениеТоваров.ЖурналРазрешениеПредоставлено(Ссылка);

				Иначе

					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ «" + СокрЛП(Ссылка) + "» учтён в КСУ Navision! Изменения запрещены. Отказано.", Ссылка,,, Отказ);
					Возврат;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

//	LNK 19.07.2019 13:53:48
	Если НЕ (Отказ ИЛИ ДополнительныеСвойства.ИсключительныйРежимВключен)  Тогда

	//	NAV:БлокировкаДанныхУчестьДокументВNavision
		Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
		И  (ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "РегистрацияПередачиВNavision", Ложь) = Истина
		ИЛИ ВнешниеИсточникиСобытия.ПередачаNavision(Ссылка))	Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ «" + СокрЛП(Ссылка) + "» учтён в КСУ Navision! В отмене проведения отказано.", Ссылка,,, Отказ);
			Возврат;

		КонецЕсли;

	КонецЕсли;

	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "РегистрацияПередачиВNavision", Ложь) = Истина Тогда

		Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику")
		И НЕ ВнешниеИсточникиСобытия.ПередачаNavision(ДокументОснование)
		И НЕ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "СлужебнаяЗапись", Ложь)	Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Основание «" + СокрЛП(ДокументОснование) + "» НЕ учтён в КСУ Navision! Учитывать перемещение недопустимо.", Ссылка,,, Отказ);
			Возврат;

		КонецЕсли;

	КонецЕсли;

//	LNK 23.12.2016 11:40:56
	Если НЕ ПроверитьСоответствиеОтправителяПолучателю(Отказ) Тогда

		Возврат;

	КонецЕсли;

//	LNK 19.10.2016 13:14:48 - эта проверка уже в подписке на события
//	ПроверитьВозможностьВоздействияПриНаличииПодчиненных(Отказ, РежимЗаписи, РежимПроведения);

	УстановитьСтатусЗаказаНаПеремещение(РежимЗаписи);
	
	Справочники.СерийныеНомера.ОчиститьВДокументеНеиспользуемыеСерийныеНомера(Товары, СерийныеНомера);
	
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	
	ОбщегоНазначенияРТСервер.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект, Документы.ОприходованиеТоваров.ПараметрыУказанияСерий(ЭтотОбъект));
	
	ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
		ЭтотОбъект,
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Товары, Истина),
		"СуммаДокумента");

//	LNK 31.10.2017 15:19:38 - Резервирование
	ПроверитьДоступноеКоличествоТоваров(РежимЗаписи, Отказ);
	
	Если НЕ Отказ Тогда

		Если НЕ ПустаяСтрока(НомерВнешнегоДокумента) И ЗаказПокупателя.Пустая() Тогда

			ЗаказПокупателя = РезервированиеТоваровСервер.ПолучитьЗаказПокупателяПоНомеруМагазину(
				НомерВнешнегоДокумента,
				Справочники.Магазины.ПолучитьМагазинИзСписка(ОбщегоНазначенияКлиентСервер.AAD(МагазинОтправитель, МагазинПолучатель), Ложь));

		КонецЕсли;

		УстановитьВидНоменклатуры();	//	LNK 21.05.2021 11:30:09

	КонецЕсли;

КонецПроцедуры

//	LNK 09.09.2016 09:50:26
Процедура ПриЗаписи(Отказ)
	
	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ЭтоНовый", Ложь) = Истина Тогда

	//	LNK 13.05.2020 07:19:30 - фиксация создания объекта в узле.
		ЖурналСобытий.Регистрация("ЭТО_НОВЫЙ", УровеньЖурналаРегистрации.Примечание
			, Метаданные()
			, Ссылка
			,
			, "Объект [" + Ссылка + "]" + Символы.ПС + "Проведен: " + Проведен + Символы.ПС + "ПометкаУдаления: " + ПометкаУдаления
			,, Ложь
		);

	ИначеЕсли ДополнительныеСвойства.Свойство("Дата") И ВидПеремещения = Перечисления.ВидыПеремещенийТоваров.ПоступлениеПереброски Тогда

	//	LNK 05.07.2021 10:31:45 - НЕ ЭтоНовый

		Если НЕ ДополнительныеСвойства.Дата = Дата Тогда

			ЖурналСобытий.Регистрация("ПЕРЕБРОСКА.Дата", УровеньЖурналаРегистрации.Информация
				, Метаданные.Документы.ПеремещениеТоваров
				, Ссылка
				,
				, "Изменена дата с [" + ДополнительныеСвойства.Дата + "] на [" + Дата + "]"
					+ Символы.ПС + "Исполнитель «"
					+ ?(ОбменДанными.Загрузка И ЗначениеЗаполнено(ОбменДанными.Отправитель)
						, "ОБМЕН ДАННЫМИ с [" + СокрЛП(ОбменДанными.Отправитель) + "]"
						, СокрЛП(Ссылка)
					) + "»"
				, СокрЛП(ЭтотОбъект)
				, Ложь
				, Ложь
			);

		КонецЕсли;

	КонецЕсли;

	Если ОбменДанными.Загрузка Тогда

	//	По значению "Отправитель" убеждаемся, что находимся в контексте обмена, а не просто записи с признаком "Загрузка".
		Если Проведен И ЗначениеЗаполнено(ОбменДанными.Отправитель) Тогда

			МагазинДокумента = ПолучитьМагазинДокумента();

			Если ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин = МагазинДокумента Тогда

				ЖурналСобытий.Регистрация("КорректировкаПеремещения.Формирование", УровеньЖурналаРегистрации.Информация, Метаданные()
				, Ссылка,, "01. Начало проверки необходимости формирования корректировки");

			//	Здесь документ приехал в "обмене"... возможно, он уже утверждён в Navision. Кроме того,
			//	в текущий момент находимся в узле, который является "Магазином" документа (а не складом управляющей системы).
			//	Это важно! Для создания возможно необходимой корректировки перемещения обращаемся к нижеуказанному методу.
				Документы.КорректировкаПеремещения.ПроверитьНеобходимыеКорректировки(Ссылка,, ОбменДанными.Загрузка);

			//	---------------------------------------------------------------------------------------

				Если Проведен И МагазинДокумента = МагазинПолучатель Тогда

					Документы.ПрименениеЦенНоменклатуры.ОформитьПриНеобходимостиПоПеремещению(Ссылка);

				КонецЕсли;

			ИначеЕсли НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

				ЖурналСобытий.Регистрация("КорректировкаПеремещения.Формирование", УровеньЖурналаРегистрации.Предупреждение, Метаданные()
				, Ссылка,, "01. [" + СокрЛП(МагазинДокумента) + "] - значение не совпадает с данными узла!");

			КонецЕсли;

		КонецЕсли;

	//	---------------------------------------------------------------------------------------

		Возврат;

	КонецЕсли;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	Если  НЕ ДополнительныеСвойства.ЭтоНовый И НЕ ДополнительныеСвойства.Номер = Номер
		И НЕ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ФлагИсключенияРекурсии", Ложь) = Истина Тогда

		ПроверитьНомерПодчиненныхОбъектов(Отказ);

	КонецЕсли;

	Если ПометкаУдаления Тогда

		Если  НЕ ДополнительныеСвойства.ПометкаУдаления = Истина И ПометкаУдаления И ДополнительныеСвойства.ИсключительныйРежимВключен
			И НЕ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ФлагИсключенияРекурсии", Ложь) = Истина	Тогда

		//	Документ помечается к удалению... ТОЛЬКО для администратора - пометить на удаление все подчинённые
		//	и удалить записи регистра ОбъектУчтенВNavision по этому и подчинённым объектам.

			ВыполнитьПометкуУдаленияПодчиненныхОбъектов(Отказ);

		КонецЕсли;

//	NAV:БлокировкаДанныхУчестьДокументВNavision
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "РегистрацияПередачиВNavision", Ложь) Тогда

		ВнешниеИсточникиСобытия.УстановитьПереданоNavision(Ссылка, ОбщегоНазначенияРТСервер.ПолучитьМагазиныПоОбъекту(Ссылка),,,,, Истина);

	КонецЕсли;

//	---------------------------------------------------------------------------------------

	Если ВнешниеИсточникиСобытия.ПередачаNavision(Ссылка) И ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин = ПолучитьМагазинДокумента() Тогда

	//	В этом месте имеем точку выхода на проверку необходимости создания корректировки перемещения.
	//	Этот вызов производится при интерактивной (не в контексте обмена!) записи документа и в узле,
	//	который является магазином (а не центральной базой, например).
		Документы.КорректировкаПеремещения.ПроверитьНеобходимыеКорректировки(Ссылка,, ОбменДанными.Загрузка);

	КонецЕсли;

	Если  НЕ ЗначениеЗаполнено(ДополнительныеСвойства.ЗаказПокупателя) И НЕ ЗаказПокупателя.Пустая()
		И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МагазинОтправитель, "СкладУправляющейСистемы", Ложь)
		И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

		РезервированиеТоваровСервер.ПровестиПодчиненныйРасходныйОрдер(Ссылка);
		Документы.ЗаказПокупателя.ЗакрытьЗаказПокупателя(ЗаказПокупателя, Ложь, НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел());

	КонецЕсли;

	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ЗагрузкаИзNavision", Ложь) = Истина Тогда

	//	LNK 21.03.2022 07:11:22
		Если ДополнительныеСвойства.Свойство("NavisionПакетТСД") Тогда

			Документы.ПеремещениеТоваров.УстановитьДанныеПакетаТСД(Ссылка, ДополнительныеСвойства.NavisionПакетТСД);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
			
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		Дата = ТекущаяДатаСеанса();
		СкладОтправитель   = ДанныеЗаполнения.Склад;
		МагазинОтправитель = ДанныеЗаполнения.Магазин;
		Организация        = ДанныеЗаполнения.Организация;
		ДокументОснование  = ДанныеЗаполнения;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.Товары, Товары);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.СерийныеНомера, СерийныеНомера);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда	//	LNK 25.05.2020 09:11:01
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);

		ТекстОшибки = "";
		ПодарочныеСертификатыСервер.ЗаполнитьПеремещениеПоОтчетуОРозничныхПродажах(ЭтотОбъект, ДанныеЗаполнения, ТекстОшибки);

		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда

			ВызватьИсключение ТекстОшибки;

		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		Дата = ТекущаяДатаСеанса();
		СкладОтправитель   = ДанныеЗаполнения.Склад;
		МагазинОтправитель = ДанныеЗаполнения.Магазин;
		Организация        = ДанныеЗаполнения.ОрганизацияПолучатель;
		ДокументОснование  = ДанныеЗаполнения;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.Товары, Товары);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.СерийныеНомера, СерийныеНомера);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		Дата = ТекущаяДатаСеанса();
		МагазинОтправитель = ДанныеЗаполнения.МагазинОтправитель;
		МагазинПолучатель  = ДанныеЗаполнения.МагазинПолучатель;
		Организация        = ДанныеЗаполнения.Организация;
		ДокументОснование  = ДанныеЗаполнения;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.Товары, Товары);		
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ИзменениеАссортимента") Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		Дата = ТекущаяДатаСеанса();
		ДокументОснование  = ДанныеЗаполнения;
		ПредставлениеДокументаОснования = Строка(ДанныеЗаполнения);
		Ответственный = Пользователи.ТекущийПользователь();
		МагазинОтправитель = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(МагазинОтправитель);
		СкладОтправитель = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(МагазинОтправитель,,СкладОтправитель, Ответственный);
		
		ТаблицаОстаткиСЦенами=АссортиментСервер.ТаблицаОстатковСЦенамиПоВыводуИзАссортимента(ДанныеЗаполнения, МагазинОтправитель, СкладОтправитель);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаОстаткиСЦенами, Товары);

	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда

		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		Дата = ТекущаяДатаСеанса();
		ДокументОснование  = ДанныеЗаполнения;
		ПредставлениеДокументаОснования = Строка(ДанныеЗаполнения);
		Ответственный = Пользователи.ТекущийПользователь();
		МагазинОтправитель = ДанныеЗаполнения.Магазин;
		СкладОтправитель   = ДанныеЗаполнения.Склад;
		Организация = ДанныеЗаполнения.Организация;
		ЗаполнитьПоПоступлению(ДанныеЗаполнения);

	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		Дата = ТекущаяДатаСеанса();
		ДокументОснование  = ДанныеЗаполнения;
		ПредставлениеДокументаОснования = Строка(ДанныеЗаполнения);
		Ответственный = Пользователи.ТекущийПользователь();

		РеквизитыДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Номер, Магазин, hiМагазинУпрСистемы, Склад, Организация, ВозвратПоставщику, Комментарий");
		Организация     = РеквизитыДанных.Организация;
		Комментарий     = РеквизитыДанных.Комментарий;

		Если НЕ РеквизитыДанных.ВозвратПоставщику = Истина Тогда

			МагазинОтправитель = РеквизитыДанных.hiМагазинУпрСистемы;
			СкладОтправитель   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МагазинОтправитель, "СкладПоступления");

			МагазинПолучатель  = РеквизитыДанных.Магазин;
			СкладПолучатель    = РеквизитыДанных.Склад;

		Иначе

			МагазинПолучатель  = РеквизитыДанных.hiМагазинУпрСистемы;
			СкладПолучатель    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МагазинПолучатель, "СкладПоступления");

			МагазинОтправитель = РеквизитыДанных.Магазин;
			СкладОтправитель   = РеквизитыДанных.Склад;

		КонецЕсли; 

		ЗаполнитьПоЗаказуПоставщику(ДанныеЗаполнения);

	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

	//	LNK 02.08.2018 06:46:24
		Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Статус") = Перечисления.СтатусыЗаказовПокупателей.Согласован Тогда

			ТекстОшибки = НСтр("ru='Отказано! «%1» не согласован (или уже закрыт). Ввод на основании такого документа невозможен.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДанныеЗаполнения);

			Если НЕ ТехническаяПоддержкаПовтИсп.ОтладочныйРежимРаботы() Тогда	//	LNK 27.06.2023 05:53:13

				ВызватьИсключение ТекстОшибки;

			КонецЕсли;

		ИначеЕсли ЛОЖЬ Тогда	//	LNK 19.11.2021 07:26:41 - ВРЕМЕННО! миграция заказа возможна по МагазинПолучатель и тогда резервы в него не поедут..

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СУММА(ТаблицаРезервы.КоличествоОстаток) КАК Количество
			|ИЗ
			|	РегистрНакопления.ЗаказыПокупателей.Остатки(, Заказ = &ДанныеЗаполнения) КАК ТаблицаРезервы
			|
			|ИМЕЮЩИЕ
			|	СУММА(ТаблицаРезервы.КоличествоОстаток) > 0"
			);
			Запрос.УстановитьПараметр("ДанныеЗаполнения", ДанныеЗаполнения);

			Если Запрос.Выполнить().Пустой() Тогда

				ТекстОшибки = НСтр("ru='Отказано! Резервы закрыты по «%1». Ввод на основании такого документа невозможен.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДанныеЗаполнения);

				ВызватьИсключение ТекстОшибки;
			
			КонецЕсли;

		КонецЕсли;
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаОснования.Дата КАК Дата,
		|	ТаблицаОснования.Номер КАК Номер,
		|	ТаблицаОснования.Организация КАК Организация,
		|	ТаблицаОснования.Комментарий КАК Комментарий,
		|	ВЫБОР
		|		КОГДА ТаблицаОснования.МагазинПолучатель = &ТекущийМагазин
		|				И НЕ ТаблицаОснования.МагазинПолучатель = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|			ТОГДА ТаблицаОснования.МагазинПолучатель
		|		ИНАЧЕ ТаблицаОснования.Магазин
		|	КОНЕЦ КАК Магазин,
		|	ВЫБОР
		|		КОГДА ТаблицаОснования.МагазинПолучатель = &ТекущийМагазин
		|				И НЕ ТаблицаОснования.МагазинПолучатель = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|			ТОГДА ТаблицаОснования.МагазинПолучатель.СкладПродажи
		|		ИНАЧЕ ТаблицаОснования.Склад
		|	КОНЕЦ КАК Склад
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ТаблицаОснования
		|ГДЕ
		|	ТаблицаОснования.Ссылка = &ДокументОснование"
		);
		Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
		Запрос.УстановитьПараметр("ТекущийМагазин"	 , ПараметрыСеанса.ТекущийМагазин);

		РезультатЗапроса = Запрос.Выполнить();

		РеквизитыДанных = РезультатЗапроса.Выбрать();
		РеквизитыДанных.Следующий(); 

		Дата = ТекущаяДатаСеанса();
		ДокументОснование = ДанныеЗаполнения;
		ПредставлениеДокументаОснования = Строка(ДанныеЗаполнения);
		Ответственный   = Пользователи.ТекущийПользователь();
		ЗаказПокупателя = ДанныеЗаполнения;
		НомерВнешнегоДокумента = СокрЛП(РеквизитыДанных.Номер);

		Организация        = РеквизитыДанных.Организация;
		МагазинОтправитель = РеквизитыДанных.Магазин;
		СкладОтправитель   = РеквизитыДанных.Склад;
		Комментарий        = РеквизитыДанных.Комментарий;

		ЗаполнитьПоЗаказуПокупателя(ДанныеЗаполнения);

	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗапросДоступностиТоваров") Тогда 
		
		Если Не (ДанныеЗаполнения.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.КОтправке
				Или ДанныеЗаполнения.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Выдан) Тогда
			
			ТекстОшибки = НСтр("ru='Отказано! «%1» не собран (выдан/закрыт). Ввод на основании такого документа невозможен.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДанныеЗаполнения);
			
			ВызватьИсключение ТекстОшибки;

		КонецЕсли;
		
		Если ДанныеЗаполнения.МагазинОтправитель = ДанныеЗаполнения.МагазинПолучатель
				И Не ДанныеЗаполнения.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Выдан Тогда
			
			ТекстОшибки = НСтр("ru='Отказано! В «%1» магазины получателя и отправителя совпадают. Ввод на основании такого документа невозможен.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДанныеЗаполнения);
			
			ВызватьИсключение ТекстОшибки;

		КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.МагазинОтправитель, "СкладУправляющейСистемы", Ложь, Ложь) Тогда
				
			ТекстОшибки = НСтр("ru='Отказано! В «%1» создается в NAVISION. Ввод на основании такого документа невозможен.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДанныеЗаполнения);
			
			ВызватьИсключение ТекстОшибки;

		КонецЕсли;

		ОснованиеДляЗаполнения = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеЗаполнения,"ДокументОснование");
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТоварыЗапрос.Ссылка КАК Ссылка,
			|	ВЫБОР
			|		КОГДА ТоварыПеремещение.Ссылка ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ПеремещениеЕсть
			|ИЗ
			|	Документ.ЗапросДоступностиТоваров.Товары КАК ТоварыЗапрос
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ТоварыПеремещение
			|		ПО ТоварыЗапрос.Ссылка = ТоварыПеремещение.Ссылка.ДокументОснование
			|		И ТоварыПеремещение.Номенклатура = ТоварыЗапрос.Номенклатура
			|		И НЕ ТоварыПеремещение.Ссылка.ПометкаУдаления
			|ГДЕ
			|	ТоварыЗапрос.Ссылка = &Ссылка
			|	И НЕ (ТоварыЗапрос.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён)
			|	ИЛИ ТоварыЗапрос.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён))";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();  
		
		Если Выборка.Количество() = 1 Тогда
			
			Если Выборка.Следующий() Тогда
				ПеремещениеУжеЕсть = Выборка.ПеремещениеЕсть;
			КонецЕсли;
			
		Иначе
			ПеремещениеУжеЕсть = Ложь;
		КонецЕсли;
		
		ДополнительныеСвойства.Вставить("ПеремещениеУжеЕсть", ПеремещениеУжеЕсть);

		Если Не ПеремещениеУжеЕсть Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаДокумента.Организация КАК Организация,
			|	ТаблицаДокумента.ДокументОснование КАК ЗаказПокупателя,
			|	ТаблицаДокумента.СтатусЗапроса КАК СтатусЗапроса,
			|	ВЫБОР
			|		КОГДА ТаблицаДокумента.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Выдан)
			|			ТОГДА ТаблицаДокумента.МагазинПолучатель
			|		ИНАЧЕ ТаблицаДокумента.МагазинОтправитель
			|	КОНЕЦ КАК МагазинОтправитель,
			|	ВЫБОР
			|		КОГДА ТаблицаДокумента.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Выдан)
			|			ТОГДА ТаблицаДокумента.МагазинПолучатель.СкладПродажи
			|		ИНАЧЕ ТаблицаДокумента.МагазинОтправитель.СкладПродажи
			|	КОНЕЦ КАК СкладОтправитель,
			|	ЕСТЬNULL(УчетнаяПолитика.СкладЦентральныйИнтернетМагазина.Магазин, ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК
			|		МагазинПолучатель,
			|	ЕСТЬNULL(УчетнаяПолитика.СкладЦентральныйИнтернетМагазина, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК
			|		СкладПолучатель,
			|	ВЫБОР
			|		КОГДА ТаблицаДокумента.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Выдан)
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
			|		ИНАЧЕ ВЫБОР
			|			КОГДА ТаблицаДокумента.МагазинПолучатель = ЕСТЬNULL(УчетнаяПолитика.ИнтернетМагазин,
			|				ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
			|				ТОГДА ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
			|			ИНАЧЕ ТаблицаДокумента.МагазинПолучатель
			|		КОНЕЦ
			|	КОНЕЦ КАК МагазинПолучательКонечный,
			|	ТаблицаДокумента.Комментарий КАК Комментарий,
			|	ВЫБОР
			|		КОГДА ТаблицаДокумента.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Выдан)
			|			ТОГДА ТаблицаДокумента.МагазинПолучатель.СкладПродажи.IDN
			|		ИНАЧЕ ТаблицаДокумента.МагазинОтправитель.СкладПродажи.IDN
			|	КОНЕЦ КАК МагазинОтправительIDN,
			|	ТаблицаДокумента.МагазинПолучатель.СкладПродажи.IDN КАК МагазинПолучательIDN
			|ИЗ
			|	Документ.ЗапросДоступностиТоваров КАК ТаблицаДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних(&ТекущаяДата,) КАК УчетнаяПолитика
			|		ПО (ИСТИНА)
			|ГДЕ
			|	ТаблицаДокумента.Ссылка = &ДанныеЗаполнения"
			);
			Запрос.УстановитьПараметр("ДанныеЗаполнения", ДанныеЗаполнения);
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			
			РеквизитыДанных = Запрос.Выполнить().Выбрать();
			РеквизитыДанных.Следующий();

//			Если НЕ (РеквизитыДанных.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ПродажаБезнал
//					Или РеквизитыДанных.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.КОтправке) Тогда
//
//				ТекстОшибки = НСтр("ru='Отказано! «%1» не согласован (или уже закрыт). Ввод на основании такого документа невозможен.'");
//				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДанныеЗаполнения);
//
//				ВызватьИсключение ТекстОшибки;
//
//			Иначе

				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	СУММА(ТаблицаРезервы.КоличествоОстаток) КАК Количество
				|ИЗ
				|	РегистрНакопления.ЗаказыПокупателей.Остатки(, Заказ = &ДанныеЗаполнения) КАК ТаблицаРезервы
				|
				|ИМЕЮЩИЕ
				|	СУММА(ТаблицаРезервы.КоличествоОстаток) > 0"
				);
				Запрос.УстановитьПараметр("ДанныеЗаполнения", ДанныеЗаполнения);

				Если Ложь И Запрос.Выполнить().Пустой() Тогда

					ТекстОшибки = НСтр("ru='Отказано! Резервы закрыты по «%1». Ввод на основании такого документа невозможен.'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДанныеЗаполнения);

					ВызватьИсключение ТекстОшибки;
				
				КонецЕсли;

		//	КонецЕсли;

			ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);

			Дата = ТекущаяДатаСеанса();
			ДокументОснование = ДанныеЗаполнения;
			ПредставлениеДокументаОснования = Строка(ДанныеЗаполнения);
			Ответственный   = Пользователи.ТекущийПользователь();

			ЗаказПокупателя    = РеквизитыДанных.ЗаказПокупателя;
			Организация        = РеквизитыДанных.Организация;
			МагазинОтправитель = РеквизитыДанных.МагазинОтправитель;
			СкладОтправитель   = РеквизитыДанных.СкладОтправитель;
			МагазинПолучатель  = РеквизитыДанных.МагазинПолучатель;
			СкладПолучатель    = РеквизитыДанных.СкладПолучатель;
			
			Если Не РеквизитыДанных.МагазинОтправитель = РеквизитыДанных.МагазинПолучательКонечный Тогда
				МагазинПолучательКонечный = РеквизитыДанных.МагазинПолучательКонечный;
			КонецЕсли;
			
			КодМагазинаОтправителя = СокрЛП(РеквизитыДанных.МагазинОтправительIDN);
			КодМагазинаМагазинПолучательКонечный = СокрЛП(РеквизитыДанных.МагазинПолучательIDN);
			НомерИнтернетЗаказа = Лев(ДанныеЗаполнения.Номер, 9);

			Комментарий        = "из " + КодМагазинаОтправителя + " в " + КодМагазинаМагазинПолучательКонечный 
					+ " для WEB заказа 1C8 #" + НомерИнтернетЗаказа + Символы.ПС + РеквизитыДанных.Комментарий;

			ЗаполнитьПоЗаказуПокупателя(ДанныеЗаполнения);    
			
		КонецЕсли;
		

	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда

	//	LNK 17.11.2016 11:51:07
	//	В этом месте производится заполнение "конечного" перемещения по схеме "Переброска между магазинами".

		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		Дата = ТекущаяДатаСеанса();

		УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаОснования.Ссылка КАК ДокументОснование,
		|	ТаблицаОснования.МагазинПолучатель КАК МагазинОтправитель,
		|	ТаблицаОснования.МагазинПолучательКонечный КАК МагазинПолучатель,
		|	ТаблицаОснования.МагазинПолучательКонечный.Организация КАК Организация
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ТаблицаОснования
		|ГДЕ
		|	ТаблицаОснования.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПеремещениеТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Данные КАК Данные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|		ПО Данные.ДокументОснование = ПеремещениеТоваров.ДокументОснование
		|			И Данные.МагазинОтправитель = ПеремещениеТоваров.МагазинОтправитель
		|			И Данные.МагазинПолучатель = ПеремещениеТоваров.МагазинПолучатель
		|ГДЕ
		|	ПеремещениеТоваров.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.МагазинОтправитель КАК МагазинОтправитель,
		|	Данные.МагазинПолучатель КАК МагазинПолучатель,
		|	Данные.Организация КАК Организация,
		|	Данные.МагазинОтправитель.СкладУправляющейСистемы КАК ОтправительСкладУправляющейСистемы,
		|	Данные.МагазинОтправитель.СкладПереброски КАК СкладОтправитель,
		|	Данные.МагазинПолучатель.СкладПоступления КАК СкладПолучатель
		|ИЗ
		|	Данные КАК Данные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Данные"
		);
		Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
		
	//	Документ "переброски" можно ввести только один. Проверим существование таких документов.
		Результаты = Запрос.ВыполнитьПакет();

		Если Результаты[1].Пустой() Тогда

			ДанныеВыборка = Результаты[2].Выбрать();
			ДанныеВыборка.Следующий();
			ДанныеОбъект  = ДанныеЗаполнения.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеОбъект,, "Номер, Организация, НомерВнешнегоДокумента, ДокументОснование, ПредставлениеДокументаОснования, СтатусТСД, РазрешитьДобавлятьСтрокиВТСД");

			IDN = "";
			УзелСоздания = Неопределено;

			Дата = ТекущаяДатаСеанса();
			Организация        = ДанныеВыборка.Организация;
			МагазинОтправитель = ДанныеВыборка.МагазинОтправитель;
			МагазинПолучатель  = ДанныеВыборка.МагазинПолучатель;
			МагазинПолучательКонечный = Неопределено;

			Если НЕ ДанныеВыборка.ОтправительСкладУправляющейСистемы = Истина Тогда

			//	Лучше выпадем в ошибку, чем потом выгребать проблемы из КСУ.
				ТекстОшибки = "Финал переброски по «" + ДанныеЗаполнения + "» НЕ завершен. Отправитель не является складом управляющей системы!";
				ВызватьИсключение ТекстОшибки;

			КонецЕсли;

			Если МагазинПолучатель.Пустая() Тогда

			//	Лучше выпадем в ошибку, чем потом выгребать проблемы из КСУ.
				ТекстОшибки = "Финал переброски по «" + ДанныеЗаполнения + "» НЕ завершен. Получатель не определён!";
				ВызватьИсключение ТекстОшибки;

			КонецЕсли;

			ДокументОснование = ДанныеЗаполнения;

		//	Отправителем должен быть склад управляющей системы, у которого заполнен реквизит "СкладПереброски"
			СкладОтправитель = ДанныеВыборка.СкладОтправитель;
			СкладПолучатель  = ДанныеВыборка.СкладПолучатель;

			Товары.Загрузить(ДанныеОбъект.Товары.Выгрузить());
			СерийныеНомера.Загрузить(ДанныеОбъект.СерийныеНомера.Выгрузить());
			Серии.Загрузить(ДанныеОбъект.Серии.Выгрузить());

		КонецЕсли;

	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	ПредставлениеДокументаОснования = "";
	IDN = "";
	НомерВнешнегоДокумента = "";
	ЗаказПокупателя = Неопределено;
	Серии.Очистить();
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	Если ВидПеремещения.Пустая() Тогда

		ВидПеремещения = Перечисления.ВидыПеремещенийТоваров.ОперационныйДокумент;

	КонецЕсли;

	МассивНепроверяемыхРеквизитов = Новый Массив;

	Если ОбменДанными.Загрузка
	ИЛИ  ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "РегистрацияПередачиВNavision", Ложь) = Истина
	ИЛИ  ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "СлужебнаяЗапись", Ложь) = Истина
	ИЛИ  ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "СлужебныйРежимЗаписи", Ложь) = Истина
	Тогда

		МассивНепроверяемыхРеквизитов.Добавить("Товары.Цена");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Сумма");

		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

	КонецЕсли;

	ДанныеМагазинов = СкладскиеОперацииСервер.ДанныеМагазиновПеремещения(МагазинОтправитель, МагазинПолучатель);

	Если СкладОтправитель = СкладПолучатель Тогда
		
		ТекстСообщения = НСтр("ru = 'Склад отправитель и склад получатель не может быть одним и тем же складом'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект,
			"СкладПолучатель",
			,
			Отказ);
			
	ИначеЕсли МагазинОтправитель = МагазинПолучатель Тогда
			
		ТекстСообщения = НСтр("ru = 'Перемещения между складами одного магазина оформляется документом ""Ордер на перемещение товаров""'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект,
			"МагазинПолучатель",
			,
			Отказ);
			
			
	ИначеЕсли ДанныеМагазинов.Отправитель.СкладУправляющейСистемы И ДанныеМагазинов.Получатель.СкладУправляющейСистемы Тогда
		
		ТекстСообщения = НСтр("ru = 'Перемещение между складами управляющей системы оформляется в управляющей системе'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект,
			"МагазинПолучатель",
			,
			Отказ);
              		
	ИначеЕсли МагазинОтправитель <> МагазинПолучатель Тогда
		    		
		Если НЕ ДанныеМагазинов.Отправитель.СкладУправляющейСистемы 
			И НЕ ДанныеМагазинов.Отправитель.ИспользоватьОрдернуюСхемуПриПеремещении Тогда
			
			ТекстСообщения = НСтр("ru = 'Перемещение между магазинами возможно только по ордерной схеме.
			|У магазина %1 не установлен признак использования ордерной схемы при перемещении товаров'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, МагазинОтправитель),
				ЭтотОбъект,
				"МагазинОтправитель",
				,
				Отказ);
			 			
		КонецЕсли;	
		
		Если НЕ ДанныеМагазинов.Получатель.СкладУправляющейСистемы 
			И НЕ ДанныеМагазинов.Получатель.ИспользоватьОрдернуюСхемуПриПеремещении  Тогда
			
			ТекстСообщения = НСтр("ru = 'Перемещение между магазинами возможно только по ордерной схеме.
			|У магазина %1 не установлен признак использования ордерной схемы при перемещении товаров'");
						
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, МагазинПолучатель),
				ЭтотОбъект,
				"МагазинПолучатель",
				,
				Отказ);
			
		КонецЕсли; 
		
		
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,Документы.ОприходованиеТоваров.ПараметрыУказанияСерий(ЭтотОбъект),Отказ);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеТЧПриНаличииОбменаСУправлениемТорговлей(
		ЭтотОбъект, 
		Отказ); 
	
	МаркетинговыеАкцииСервер.ПроверитьЗаполнениеТабличнойЧастиСерийныеНомера(
		ЭтотОбъект,
		"Товары",
		"СерийныеНомера",
		Отказ,
		,,
		ДанныеМагазинов.Отправитель.СкладУправляющейСистемы
	);
	
КонецПроцедуры
	
#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Инициализирует документ
//
Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Ответственный      = Пользователи.ТекущийПользователь();
	МагазинОтправитель = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(МагазинОтправитель);
	Организация        = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация,Ответственный);	
	СкладОтправитель   = ЗначениеНастроекПовтИсп.ПолучитьСкладПродажиПоУмолчанию(МагазинОтправитель,,СкладОтправитель, Ответственный);
	СкладПолучатель    = ЗначениеНастроекПовтИсп.ПолучитьСкладПродажиПоУмолчанию(МагазинПолучатель,,СкладПолучатель, Ответственный);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("СкладОтправитель")
			И НЕ ЗначениеЗаполнено(СкладОтправитель) Тогда
			Если ЗначениеЗаполнено(МагазинОтправитель) Тогда
				Если НЕ Справочники.Склады.ПроверитьПринадлежностьСкладаМагазину(МагазинОтправитель, ДанныеЗаполнения.СкладОтправитель) Тогда
					ДанныеЗаполнения.СкладОтправитель = Справочники.Склады.ПустаяСсылка();
				КонецЕсли;
			Иначе
				МагазинОтправитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.СкладОтправитель, "Магазин");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ОпределитьСтатусЗаказаНаПеремещение(РежимЗаписи)

	
	ЗаказНаПеремещение = ДокументОснование;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Количество
	|ПОМЕСТИТЬ ДокТЧ
	|ИЗ
	|	&ДокТЧ КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПеремещения.Номенклатура,
	|	ТоварыПеремещения.Характеристика,
	|	СУММА(ТоварыПеремещения.Количество) КАК КоличествоПоступления
	|ПОМЕСТИТЬ ТоварыПоступления
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
	|		ПеремещениеТоваровТовары.Характеристика КАК Характеристика,
	|		ПеремещениеТоваровТовары.Количество КАК Количество
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|	ГДЕ
	|		ПеремещениеТоваровТовары.Ссылка <> &Ссылка
	|		И ПеремещениеТоваровТовары.Ссылка.ДокументОснование = &ЗаказНаПеремещение
	|		И ПеремещениеТоваровТовары.Ссылка.Проведен
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДокТЧ.Номенклатура,
	|		ДокТЧ.Характеристика,
	|		ДокТЧ.Количество
	|	ИЗ
	|		ДокТЧ КАК ДокТЧ) КАК ТоварыПеремещения
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыПеремещения.Характеристика,
	|	ТоварыПеремещения.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаПеремещениеТовары.Номенклатура,
	|	ЗаказНаПеремещениеТовары.Характеристика,
	|	ЗаказНаПеремещениеТовары.Количество,
	|	ТоварыПоступления.КоличествоПоступления
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ЗаказНаПеремещениеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыПоступления КАК ТоварыПоступления
	|		ПО ЗаказНаПеремещениеТовары.Номенклатура = ТоварыПоступления.Номенклатура
	|			И ЗаказНаПеремещениеТовары.Характеристика = ТоварыПоступления.Характеристика
	|ГДЕ
	|	ЗаказНаПеремещениеТовары.Ссылка = &ЗаказНаПеремещение
	|	И ЗаказНаПеремещениеТовары.Количество - ЕСТЬNULL(ТоварыПоступления.КоличествоПоступления, 0) > 0";
	
	Запрос.УстановитьПараметр("ЗаказНаПеремещение", ЗаказНаПеремещение);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Запрос.УстановитьПараметр("ДокТЧ", Товары.Выгрузить(,"Номенклатура, Характеристика, Количество"));
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Запрос.УстановитьПараметр("ДокТЧ", Товары.ВыгрузитьКолонки("Номенклатура, Характеристика, Количество"));
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
	Иначе
		Возврат Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;
	КонецЕсли;

	
КонецФункции

Процедура УстановитьСтатусЗаказаНаПеремещение(РежимЗаписи)
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование)
		ИЛИ ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.ЗаказНаПеремещение") ИЛИ ДокументОснование.МагазинОтправитель.СкладУправляющейСистемы Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументОснование.МагазинОтправитель.СкладУправляющейСистемы ИЛИ ДокументОснование.ЗакрытВручную Тогда
		Возврат;
	КонецЕсли;
	
	Статус = ОпределитьСтатусЗаказаНаПеремещение(РежимЗаписи);
	
	Если ДокументОснование.Статус <> Статус Тогда
		
		ЗаказНаПеремещениеОбъект = ДокументОснование.ПолучитьОбъект();
		ЗаказНаПеремещениеОбъект.Статус = Статус;
		ЗаказНаПеремещениеОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;
	
КонецПроцедуры

//	LNK 19.10.2016 13:16:14
Функция ПроверитьВозможностьВоздействияПриНаличииПодчиненных(Отказ, РежимЗаписи, РежимПроведения)

	Если НЕ ЭтоНовый() И НЕ РежимЗаписи = РежимЗаписиДокумента.Запись И НЕ ДополнительныеСвойства.ИсключительныйРежимВключен Тогда

		УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Дата КАК Дата,
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Проведен,
		|	ТаблицаДокумента.Представление
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары КАК ТаблицаДокумента
		|ГДЕ
		|	&ПроверяемПроведенные = ИСТИНА
		|	И ТаблицаДокумента.Проведен
		|	И ТаблицаДокумента.ДокументОснование = &ТекущийДокумент
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Дата,
		|	ТаблицаДокумента.Ссылка,
		|	ТаблицаДокумента.Проведен,
		|	ТаблицаДокумента.Представление
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК ТаблицаДокумента
		|ГДЕ
		|	&ПроверяемПроведенные = ИСТИНА
		|	И ТаблицаДокумента.Проведен
		|	И ТаблицаДокумента.ДокументОснование = &ТекущийДокумент
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Дата,
		|	ТаблицаДокумента.Ссылка,
		|	ТаблицаДокумента.Проведен,
		|	ТаблицаДокумента.Представление
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &ДокументОснование
		|	И ВЫБОР
		|			КОГДА &ПроверяемПроведенные = ЛОЖЬ
		|				ТОГДА НЕ ТаблицаДокумента.Проведен
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка"
		);
		Запрос.УстановитьПараметр("ТекущийДокумент"     , Ссылка);
		Запрос.УстановитьПараметр("ДокументОснование"   , ДокументОснование);
		Запрос.УстановитьПараметр("ПроверяемПроведенные", ?(РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения, Истина, Ложь));
		
		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда

			Отказ = Истина;
			Сообщить("Отказано в «" + РежимЗаписи + "» для " + Ссылка + " по следующим причинам:");

			Выборка = Результат.Выбрать();

			Пока Выборка.Следующий() Цикл

				Сообщить("есть " + ?(Выборка.Проведен, "проведенный", "непроведенный") + " " + Выборка.Представление);

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции

//	LNK 23.11.2016 09:27:38
Процедура ВыполнитьПометкуУдаленияПодчиненныхОбъектов(Отказ)

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	NULL КАК Дата,
	|	ВЫРАЗИТЬ(&ДокументОснование КАК Документ.ПеремещениеТоваров) КАК Основание,
	|	NULL КАК ПометкаУдаления
	|ПОМЕСТИТЬ Ведущая
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументы.Дата,
	|	ТаблицаДокументы.Ссылка,
	|	ТаблицаДокументы.ПометкаУдаления
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ТаблицаДокументы
	|ГДЕ
	|	ТаблицаДокументы.ДокументОснование = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПодчиненных.Дата КАК Период,
	|	ТаблицаПодчиненных.Ссылка КАК Регистратор,
	|	ТаблицаПодчиненных.ПометкаУдаления
	|ИЗ
	|	Ведущая КАК Ведущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары КАК ТаблицаПодчиненных
	|		ПО Ведущая.Основание = ТаблицаПодчиненных.ДокументОснование
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаПодчиненных.Дата,
	|	ТаблицаПодчиненных.Ссылка,
	|	ТаблицаПодчиненных.ПометкаУдаления
	|ИЗ
	|	Ведущая КАК Ведущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК ТаблицаПодчиненных
	|		ПО Ведущая.Основание = ТаблицаПодчиненных.ДокументОснование
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Ведущая.Дата,
	|	Ведущая.Основание,
	|	Ведущая.ПометкаУдаления
	|ИЗ
	|	Ведущая КАК Ведущая
	|ГДЕ
	|	Ведущая.Дата ЕСТЬ НЕ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор"
	);
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		КомплексПометкаУдаленияОбъекта(Выборка.Регистратор, Выборка.ПометкаУдаления);

	КонецЦикла;

//	В эту процедуру попадаем только, когда ПометкаУдаления = Истина.
//	Поэтому вызов ниже только для почистить регистр.
	КомплексПометкаУдаленияОбъекта(Ссылка, Истина);

КонецПроцедуры

//	LNK 23.11.2016 09:39:40
Процедура КомплексПометкаУдаленияОбъекта(Регистратор, ТекущаяПометкаУдаления)

	Если НЕ ТекущаяПометкаУдаления = Истина Тогда

		ОбъектПометить = Регистратор.ПолучитьОбъект();
		ОбъектПометить.ДополнительныеСвойства.Вставить("НеПроверятьРегистрациюВОбменNavision", Истина);
		ОбъектПометить.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);
		ОбъектПометить.ДополнительныеСвойства.Вставить("ФлагИсключенияРекурсии", Истина);
		ОбъектПометить.УстановитьПометкуУдаления(Истина);
		Сообщить("- помечен на удаление «" + Регистратор + "»");

	КонецЕсли;

//	---------------------------------------------------------------------------------------
	
	//СписокУзлов = ВнешниеИсточникиПовтИсп.СписокУзловNavision(Истина);

	//Если НЕ СписокУзлов.Количество() = 0 Тогда

	//	ПланыОбмена.УдалитьРегистрациюИзменений(СписокУзлов, Регистратор);

	//КонецЕсли;

КонецПроцедуры

//	LNK 02.01.2019 11:43:33
Процедура ПроверитьНомерПодчиненныхОбъектов(Отказ)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаОрдеры.Дата КАК Период,
	|	ТаблицаОрдеры.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ТаблицаОрдеры
	|ГДЕ
	|	ТаблицаОрдеры.ДокументОснование = &ДокументОснование
	|	И НЕ ТаблицаОрдеры.Номер = &Номер
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаОрдеры.Дата,
	|	ТаблицаОрдеры.Ссылка
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК ТаблицаОрдеры
	|ГДЕ
	|	ТаблицаОрдеры.ДокументОснование = &ДокументОснование
	|	И НЕ ТаблицаОрдеры.Номер = &Номер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор"
	);
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("Номер", Номер);

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		ОрдерОбъект = Выборка.Регистратор.ПолучитьОбъект();
		ОрдерОбъект.ДополнительныеСвойства.Вставить("НеПроверятьРегистрациюВОбменNavision", Истина);
		ОрдерОбъект.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);
		ОрдерОбъект.ДополнительныеСвойства.Вставить("ФлагИсключенияРекурсии", Истина);
		ОрдерОбъект.ОбменДанными.Загрузка = Истина;

		ОрдерОбъект.Номер = Номер;

		ОрдерОбъект.Записать();

	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

//Процедура формирует массив имен регистров для контроля проведения
//
Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

//	При проведении выполняется контроль превышения остатков на складах
//	LNK 14.11.2016 11:11:43
	Если НЕ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "СлужебнаяЗапись", Ложь) = Истина
		И   ОбщегоНазначенияРТ.НужноЗаполнитьСписокРегистровДляКонтроля(ДополнительныеСвойства.РежимЗаписи, Дата)
	    И НЕ ДополнительныеСвойства.Свойство("ПропуститьКонтрольДоступногоКоличества")	Тогда
		
		Массив.Добавить(Движения.ТоварыНаСкладах);
		Массив.Добавить(Движения.ДвиженияСерийныхНомеров);

		Если НуженКонтрольПоРегиструТоварыКОтгрузке() Тогда

			Массив.Добавить(Движения.ТоварыКОтгрузке);

		КонецЕсли;
		
	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Процедура ЗаполнитьПоПоступлению(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	МАКСИМУМ(Товары.Цена / ЕСТЬNULL(Товары.Упаковка.Коэффициент, 1)) КАК Цена,
	|	МИНИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Упаковка) > 1
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ МАКСИМУМ(Товары.Упаковка)
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Упаковка) > 1
	|			ТОГДА NULL
	|		ИНАЧЕ МАКСИМУМ(Товары.Упаковка.Коэффициент)
	|	КОНЕЦ КАК Коэффициент,
	|	МИНИМУМ(Товары.КлючСвязиСерийныхНомеров) КАК КлючСвязиСерийныхНомеров,
	|	СУММА(Товары.Количество) КАК КоличествоОснования
	|ПОМЕСТИТЬ ТоварыОснования
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыКПеремещению
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
	|		ПеремещениеТоваровТовары.Характеристика КАК Характеристика,
	|		-ПеремещениеТоваровТовары.Количество КАК Количество
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|			ПО ПеремещениеТоваровТовары.Ссылка = ПеремещениеТоваров.Ссылка
	|	ГДЕ
	|		ПеремещениеТоваров.Проведен
	|		И ПеремещениеТоваров.ДокументОснование = &ДокументОснование
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыОснования.Номенклатура,
	|		ТоварыОснования.Характеристика,
	|		ТоварыОснования.КоличествоОснования
	|	ИЗ
	|		ТоварыОснования КАК ТоварыОснования) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Номенклатура
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОснования.НомерСтроки,
	|	ЕСТЬNULL(ТоварыКПеремещению.Номенклатура, ТоварыОснования.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ТоварыКПеремещению.Характеристика, ТоварыОснования.Характеристика) КАК Характеристика,
	|	ТоварыОснования.Цена,
	|	ТоварыКПеремещению.Количество,
	|	ВЫБОР
	|		КОГДА ТоварыОснования.Коэффициент ЕСТЬ NULL 
	|				ИЛИ (ВЫРАЗИТЬ(ТоварыКПеремещению.Количество / ТоварыОснования.Коэффициент КАК ЧИСЛО(15, 0))) <> ТоварыКПеремещению.Количество / ТоварыОснования.Коэффициент
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИспользоватьУпаковку,
	|	ТоварыОснования.Упаковка,
	|	ТоварыОснования.Коэффициент,
	|	ТоварыОснования.КоличествоОснования,
	|	ВЫБОР
	|		КОГДА ТоварыКПеремещению.Количество = ТоварыОснования.КоличествоОснования
	|			ТОГДА ТоварыОснования.КлючСвязиСерийныхНомеров
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлючСвязиСерийныхНомеров
	|ПОМЕСТИТЬ ИтоговаяТаблица
	|ИЗ
	|	ТоварыОснования КАК ТоварыОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыКПеремещению КАК ТоварыКПеремещению
	|		ПО ТоварыОснования.Номенклатура = ТоварыКПеремещению.Номенклатура
	|			И ТоварыОснования.Характеристика = ТоварыКПеремещению.Характеристика
	|ГДЕ
	|	НЕ ТоварыКПеремещению.Количество ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.НомерСтроки КАК НомерСтрокиСорт,
	|	ИтоговаяТаблица.Номенклатура,
	|	ИтоговаяТаблица.Характеристика,
	|	ВЫБОР
	|		КОГДА ИтоговаяТаблица.ИспользоватьУпаковку
	|			ТОГДА ИтоговаяТаблица.Цена * ИтоговаяТаблица.Коэффициент
	|		ИНАЧЕ ИтоговаяТаблица.Цена
	|	КОНЕЦ КАК Цена,
	|	ИтоговаяТаблица.Количество,
	|	ВЫБОР
	|		КОГДА ИтоговаяТаблица.ИспользоватьУпаковку
	|			ТОГДА ИтоговаяТаблица.Количество / ИтоговаяТаблица.Коэффициент
	|		ИНАЧЕ ИтоговаяТаблица.Количество
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ИтоговаяТаблица.ИспользоватьУпаковку
	|			ТОГДА ИтоговаяТаблица.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Упаковка,
	|	ИтоговаяТаблица.Количество * ИтоговаяТаблица.Цена КАК Сумма,
	|	ИтоговаяТаблица.КлючСвязиСерийныхНомеров
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиСорт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОснования.КлючСвязиСерийныхНомеров,
	|	СерийныеНомера.СерийныйНомер
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|		ПоступлениеТоваровСерийныеНомера.СерийныйНомер КАК СерийныйНомер
	|	ИЗ
	|		Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров.СерийныеНомера КАК ПоступлениеТоваровСерийныеНомера
	|			ПО ПоступлениеТоваровТовары.КлючСвязиСерийныхНомеров = ПоступлениеТоваровСерийныеНомера.КлючСвязиСерийныхНомеров
	|	ГДЕ
	|		ПоступлениеТоваровСерийныеНомера.Ссылка = &ДокументОснование
	|		И ПоступлениеТоваровТовары.Ссылка = &ДокументОснование) КАК СерийныеНомера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыОснования КАК ТоварыОснования
	|		ПО СерийныеНомера.Номенклатура = ТоварыОснования.Номенклатура
	|ГДЕ
	|	ТоварыОснования.КлючСвязиСерийныхНомеров В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ИтоговаяТаблица.КлючСвязиСерийныхНомеров
	|			ИЗ
	|				ИтоговаяТаблица КАК ИтоговаяТаблица)";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Результат = Запрос.ВыполнитьПакет();
	
	
	Если НЕ Результат[3].Пустой() Тогда
		Товары.Загрузить(Результат[3].Выгрузить());
		СерийныеНомера.Загрузить(Результат[4].Выгрузить());
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Нет данных для заполнения по основанию ""%ДокументОснование%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", ДокументОснование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДокументОснование");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуПоставщику(ДанныеЗаполнения)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка.Магазин КАК Магазин,
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаТовары.Количество = 0
	|					И НЕ ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ТаблицаТовары.КоличествоУпаковок * ТаблицаТовары.Упаковка.Коэффициент
	|			ИНАЧЕ ТаблицаТовары.Количество
	|		КОНЕЦ) КАК Количество,
	|	ВЫРАЗИТЬ(&МагазинОтправитель КАК Справочник.Магазины) КАК МагазинОтправитель,
	|	ВЫРАЗИТЬ(&МагазинПолучатель КАК Справочник.Магазины) КАК МагазинПолучатель
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДанныеЗаполнения
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка.Магазин,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказы.Магазин КАК Магазин,
	|	ТаблицаЗаказы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказы.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаЗаказы.КоличествоОстаток) КАК Количество
	|ПОМЕСТИТЬ Заказы
	|ИЗ
	|	РегистрНакопления.ЗаказыТоваров.Остатки(, Заказ = &ДанныеЗаполнения) КАК ТаблицаЗаказы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказы.Магазин,
	|	ТаблицаЗаказы.Номенклатура,
	|	ТаблицаЗаказы.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Магазин КАК Магазин,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество - ЕСТЬNULL(Заказы.Количество, 0) КАК Количество,
	|	Товары.Количество - ЕСТЬNULL(Заказы.Количество, 0) КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА Товары.МагазинОтправитель.СкладУправляющейСистемы = ИСТИНА
	|			ТОГДА Товары.МагазинПолучатель
	|		ИНАЧЕ Товары.МагазинОтправитель
	|	КОНЕЦ КАК МагазинДляЦен
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Заказы КАК Заказы
	|		ПО Товары.Номенклатура = Заказы.Номенклатура
	|			И Товары.Характеристика = Заказы.Характеристика
	|ГДЕ
	|	Товары.Количество - ЕСТЬNULL(Заказы.Количество, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	);
	Запрос.УстановитьПараметр("ДанныеЗаполнения"  , ДанныеЗаполнения);
	Запрос.УстановитьПараметр("МагазинОтправитель", МагазинОтправитель);
	Запрос.УстановитьПараметр("МагазинПолучатель" , МагазинПолучатель);

	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		ТаблицаТовары = Результат.Выгрузить();
		Товары.Загрузить(ТаблицаТовары);

		Если НЕ Товары.Количество() = 0 Тогда 

			ЗапасыСервер.ЗаполнитьЦеныПоРозничнымЦенам(ЭтотОбъект, "Товары", ТаблицаТовары[0].МагазинДляЦен, Ложь);

		КонецЕсли;

	Иначе

		ТекстСообщения = НСтр("ru = 'Нет данных для заполнения по основанию ""%ДанныеЗаполнения%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеЗаполнения%", ДанныеЗаполнения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДокументОснование");

	КонецЕсли;

КонецПроцедуры

//	LNK 07.12.2017 14:13:58
Процедура ЗаполнитьПоЗаказуПокупателя(ДанныеЗаполнения)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТоварыЗапрос.Ссылка КАК Ссылка,
	|	ТоварыЗапрос.Номенклатура КАК Номенклатура,
	|	ТоварыЗапрос.Номенклатура.ВидНоменклатуры КАК Проект,
	|	ВЫБОР
	|		КОГДА ТоварыПеремещение.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьПеремещение
	|ПОМЕСТИТЬ ВсеСтрокиЗапроса
	|ИЗ
	|	Документ.ЗапросДоступностиТоваров.Товары КАК ТоварыЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ТоварыПеремещение
	|		ПО (ТоварыЗапрос.Ссылка = ТоварыПеремещение.Ссылка.ДокументОснование)
	|			И (ТоварыПеремещение.Номенклатура = ТоварыЗапрос.Номенклатура)
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&ДанныеЗаполнения) = ТИП(Документ.ЗапросДоступностиТоваров)
	|	И ТоварыЗапрос.Ссылка = &ДанныеЗаполнения
	|	И НЕ(ТоварыЗапрос.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён)
	|				ИЛИ ТоварыЗапрос.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВсеСтрокиЗапроса.Проект КАК Проект
	|ПОМЕСТИТЬ ПроектДляПеремещения
	|ИЗ
	|	ВсеСтрокиЗапроса КАК ВсеСтрокиЗапроса
	|ГДЕ
	|	НЕ ВсеСтрокиЗапроса.ЕстьПеремещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Упаковка КАК Упаковка,
	|	ТабличнаяЧасть.Количество КАК Количество,
	|	ТабличнаяЧасть.КоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ТабличнаяЧасть
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&ДанныеЗаполнения) = ТИП(Документ.ЗаказПокупателя)
	|	И ТабличнаяЧасть.Ссылка = &ДанныеЗаполнения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведущая.НомерСтроки,
	|	Ведущая.Номенклатура,
	|	Ведущая.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка),
	|	Ведущая.Количество,
	|	Ведущая.Количество
	|ИЗ
	|	Документ.ЗапросДоступностиТоваров.Товары КАК Ведущая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроектДляПеремещения КАК ПроектДляПеремещения
	|		ПО Ведущая.Номенклатура.ВидНоменклатуры = ПроектДляПеремещения.Проект
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&ДанныеЗаполнения) = ТИП(Документ.ЗапросДоступностиТоваров)
	|	И Ведущая.Ссылка = &ДанныеЗаполнения
	|	И НЕ(Ведущая.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён)
	|				ИЛИ Ведущая.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	);
	Запрос.УстановитьПараметр("ДанныеЗаполнения", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("ГраницаСреза", ?(ЭтоНовый(), ТекущаяДата(), Новый Граница(МоментВремени(), ВидГраницы.Исключая)));
	
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		Товары.Загрузить(Результат.Выгрузить());

		Если НЕ Товары.Количество() = 0 Тогда 

			ЗапасыСервер.ЗаполнитьЦеныПоРозничнымЦенам(ЭтотОбъект, "Товары", МагазинОтправитель, Ложь);

		КонецЕсли;

	Иначе

		ТекстСообщения = НСтр("ru = 'Нет данных для заполнения по основанию ""%ДанныеЗаполнения%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеЗаполнения%", ДанныеЗаполнения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДокументОснование");

	КонецЕсли;

КонецПроцедуры

// + HVOYA 30.08.2016 15:38:32, Латышев А.А.
Процедура hiЗаполнитьПоЗаказу(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПоставщикуТовары.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ЗаказПоставщикуТовары.Цена / ЕСТЬNULL(ЗаказПоставщикуТовары.Упаковка.Коэффициент, 1)) КАК Цена,
	|	МИНИМУМ(ЗаказПоставщикуТовары.НомерСтроки) КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПоставщикуТовары.Упаковка) > 1
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ МАКСИМУМ(ЗаказПоставщикуТовары.Упаковка)
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПоставщикуТовары.Упаковка) > 1
	|			ТОГДА NULL
	|		ИНАЧЕ МАКСИМУМ(ЗаказПоставщикуТовары.Упаковка.Коэффициент)
	|	КОНЕЦ КАК Коэффициент,
	|	СУММА(ЗаказПоставщикуТовары.Количество) КАК КоличествоОснования
	|ПОМЕСТИТЬ ТоварыОснования
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщикуТовары.Номенклатура,
	|	ЗаказПоставщикуТовары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыКПеремещению
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
	|		ПеремещениеТоваровТовары.Характеристика КАК Характеристика,
	|		-ПеремещениеТоваровТовары.Количество КАК Количество
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|			ПО ПеремещениеТоваровТовары.Ссылка = ПеремещениеТоваров.Ссылка
	|	ГДЕ
	|		ПеремещениеТоваров.Проведен
	|		И ПеремещениеТоваров.ДокументОснование = &ДокументОснование
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыОснования.Номенклатура,
	|		ТоварыОснования.Характеристика,
	|		ТоварыОснования.КоличествоОснования
	|	ИЗ
	|		ТоварыОснования КАК ТоварыОснования) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Номенклатура
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОснования.НомерСтроки,
	|	ЕСТЬNULL(ТоварыКПеремещению.Номенклатура, ТоварыОснования.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ТоварыКПеремещению.Характеристика, ТоварыОснования.Характеристика) КАК Характеристика,
	|	ТоварыОснования.Цена,
	|	ТоварыКПеремещению.Количество,
	|	ВЫБОР
	|		КОГДА ТоварыОснования.Коэффициент ЕСТЬ NULL 
	|				ИЛИ (ВЫРАЗИТЬ(ТоварыКПеремещению.Количество / ТоварыОснования.Коэффициент КАК ЧИСЛО(15, 0))) <> ТоварыКПеремещению.Количество / ТоварыОснования.Коэффициент
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИспользоватьУпаковку,
	|	ТоварыОснования.Упаковка,
	|	ТоварыОснования.Коэффициент,
	|	ТоварыОснования.КоличествоОснования
	|ПОМЕСТИТЬ ИтоговаяТаблица
	|ИЗ
	|	ТоварыОснования КАК ТоварыОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыКПеремещению КАК ТоварыКПеремещению
	|		ПО ТоварыОснования.Номенклатура = ТоварыКПеремещению.Номенклатура
	|			И ТоварыОснования.Характеристика = ТоварыКПеремещению.Характеристика
	|ГДЕ
	|	НЕ ТоварыКПеремещению.Количество ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.НомерСтроки КАК НомерСтрокиСорт,
	|	ИтоговаяТаблица.Номенклатура,
	|	ИтоговаяТаблица.Характеристика,
	|	ВЫБОР
	|		КОГДА ИтоговаяТаблица.ИспользоватьУпаковку
	|			ТОГДА ИтоговаяТаблица.Цена * ИтоговаяТаблица.Коэффициент
	|		ИНАЧЕ ИтоговаяТаблица.Цена
	|	КОНЕЦ КАК Цена,
	|	ИтоговаяТаблица.Количество,
	|	ВЫБОР
	|		КОГДА ИтоговаяТаблица.ИспользоватьУпаковку
	|			ТОГДА ИтоговаяТаблица.Количество / ИтоговаяТаблица.Коэффициент
	|		ИНАЧЕ ИтоговаяТаблица.Количество
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ИтоговаяТаблица.ИспользоватьУпаковку
	|			ТОГДА ИтоговаяТаблица.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Упаковка,
	|	ИтоговаяТаблица.Количество * ИтоговаяТаблица.Цена КАК Сумма
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиСорт";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Результат = Запрос.ВыполнитьПакет();
	
	
	Если НЕ Результат[3].Пустой() Тогда
		Товары.Загрузить(Результат[3].Выгрузить());
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Нет данных для заполнения по основанию ""%ДокументОснование%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", ДокументОснование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДокументОснование");
		
	КонецЕсли;
	
КонецПроцедуры
// - HVOYA 30.08.2016 15:38:32, Латышев А.А. 

//	LNK 23.12.2016 13:50:04
Процедура ЗаполнитьЗапасыПоОстаткамНаСкладе(КомпоновщикНастроек)	Экспорт

	ПараметрыКомпоновки = КомпоновщикНастроек.Настройки.ПараметрыДанных; 
	ПараметрыКомпоновки.УстановитьЗначениеПараметра("Период" , Дата);
	ПараметрыКомпоновки.УстановитьЗначениеПараметра("Склад"  , СкладОтправитель);
	ПараметрыКомпоновки.УстановитьЗначениеПараметра("Магазин", МагазинОтправитель);

	КомпоновщикНастроек.Настройки.Структура.Очистить();
	ГруппировкаДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДетальныеЗаписи.Использование = Истина;
	
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Номенклатура");
	ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Характеристика");
	ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Количество");
	ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "КоличествоУпаковок");
	ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Цена");
	ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Сумма");

	СхемаКомпоновкиДанных = ПолучитьМакет("СхемаЗаполненияПоОстаткам");
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

//	Создаем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);

//	Выводим в таблицу значений
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

	ТаблицаТовары = Новый ТаблицаЗначений();
	ПроцессорВывода.УстановитьОбъект(ТаблицаТовары);
	ТаблицаТовары = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если НЕ ТаблицаТовары.Количество() = 0 Тогда

		Товары.Загрузить(ТаблицаТовары);

	Иначе
		
		ТекстСообщения = НСтр("ru = 'Нет данных для заполнения по складу ""%СкладОтправитель%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СкладОтправитель%", СкладОтправитель);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СкладОтправитель");
		
	КонецЕсли;

КонецПроцедуры

// Добавляет выбранное поле схемы компоновки данных
//
// Параметры:
// ГруппировкаКомпоновкиДанных - ГруппировкаКомпоновкиДанных
// Поле - Строка
//
Процедура ДобавитьВыбранноеПолеСКД(ГруппировкаКомпоновкиДанных, Поле)
	
	ВыбранноеПоле               = ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных(Поле);
	ВыбранноеПоле.Использование = Истина;
	
КонецПроцедуры

//	LNK 04.11.2020 12:09:57
Процедура ПередЗаписьюВосстановитьСерийныеНомера(Отказ)

	Если НЕ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ЗагрузкаИзNavision", Ложь)
	ИЛИ НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел()
	ИЛИ УзелСоздания = Справочники.СтруктураУзлов.КСУ_Navision	Тогда

		Возврат;

	КонецЕсли;

//	Работает ТОЛЬКО в случае "ДополнительныеСвойства.ЗагрузкаИзNavision = Истина"
//	В NAV нет понятия подарочных сертификатов и их серийных номеров.

	Если СерийныеНомера.Количество() = 0 Тогда

		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаСерийныеНомера.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
		|	ТаблицаСерийныеНомера.СерийныйНомер КАК СерийныйНомер,
		|	ТаблицаСерийныеНомера.СерийныйНомер.Владелец КАК Номенклатура
		|ИЗ
		|	Документ.ПеремещениеТоваров.СерийныеНомера КАК ТаблицаСерийныеНомера
		|ГДЕ
		|	ТаблицаСерийныеНомера.Ссылка = &ТекущаяСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	КлючСвязиСерийныхНомеров
		|ИТОГИ
		|	МАКСИМУМ(КлючСвязиСерийныхНомеров),
		|	КОЛИЧЕСТВО(СерийныйНомер)
		|ПО
		|	Номенклатура"
		;

	Иначе

		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаСерийныеНомера.СерийныйНомер КАК Справочник.СерийныеНомера) КАК СерийныйНомер,
		|	ТаблицаСерийныеНомера.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров
		|ПОМЕСТИТЬ Источник
		|ИЗ
		|	&СерийныеНомера КАК ТаблицаСерийныеНомера
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Источник.СерийныйНомер КАК СерийныйНомер,
		|	Источник.СерийныйНомер.Владелец КАК Номенклатура,
		|	Источник.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров
		|ИЗ
		|	Источник КАК Источник
		|ИТОГИ
		|	КОЛИЧЕСТВО(СерийныйНомер),
		|	МАКСИМУМ(КлючСвязиСерийныхНомеров)
		|ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Источник"
		;

	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекущаяСсылка" , Ссылка);
	Запрос.УстановитьПараметр("СерийныеНомера", СерийныеНомера.Выгрузить());

	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВыборкаНоменклатура.Следующий() Цикл

			СтрокиТовары = Товары.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаНоменклатура.Номенклатура));

			Если НЕ СтрокиТовары.Количество() = 0 Тогда

				СтрокаВладельца = СтрокиТовары[0];

				Если НЕ СтрокаВладельца.Количество = ВыборкаНоменклатура.СерийныйНомер Тогда	//	это итог по владельцу

					ВызватьИсключение "Ошибка количества по номенклатуре " + ВыборкаНоменклатура.Номенклатура;

				КонецЕсли;

				СтрокаВладельца.КлючСвязиСерийныхНомеров = ВыборкаНоменклатура.КлючСвязиСерийныхНомеров;
				СерийныеНомера.Очистить();

				ВыборкаСерийныеНомера = ВыборкаНоменклатура.Выбрать();

				Пока ВыборкаСерийныеНомера.Следующий() Цикл

					СтрокаСерийныеНомера = СерийныеНомера.Добавить();
					СтрокаСерийныеНомера.СерийныйНомер = ВыборкаСерийныеНомера.СерийныйНомер;
					СтрокаСерийныеНомера.КлючСвязиСерийныхНомеров = ВыборкаСерийныеНомера.КлючСвязиСерийныхНомеров;

				КонецЦикла;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	LNK 23.12.2016 11:29:42
Функция ПроверитьСоответствиеОтправителяПолучателю(Отказ)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(&МагазинОтправитель КАК Справочник.Магазины) КАК МагазинОтправитель,
	|	ВЫРАЗИТЬ(&МагазинПолучатель КАК Справочник.Магазины) КАК МагазинПолучатель,
	|	ВЫРАЗИТЬ(&МагазинПолучательКонечный КАК Справочник.Магазины) КАК МагазинПолучательКонечный
	|ПОМЕСТИТЬ Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Один из магазинов (отправитель или получатель) должен быть складом управляющей системы, а другой - именно магазином"" КАК ТекстСообщения
	|ИЗ
	|	Источник КАК Источник
	|ГДЕ
	|	Источник.МагазинОтправитель.СкладУправляющейСистемы = Источник.МагазинПолучатель.СкладУправляющейСистемы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Конечный получатель не может быть складом управляющей системы""
	|ИЗ
	|	Источник КАК Источник
	|ГДЕ
	|	Источник.МагазинПолучательКонечный.СкладУправляющейСистемы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Магазин конечного назначения (переброски) должен отличаться от получателя и отправителя""
	|ИЗ
	|	Источник КАК Источник
	|ГДЕ
	|	(Источник.МагазинОтправитель = Источник.МагазинПолучательКонечный
	|			ИЛИ Источник.МагазинПолучатель = Источник.МагазинПолучательКонечный)
	|	И НЕ Источник.МагазинПолучательКонечный = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)"
	);
	Запрос.УстановитьПараметр("МагазинОтправитель", МагазинОтправитель);
	Запрос.УстановитьПараметр("МагазинПолучатель" , МагазинПолучатель);
	Запрос.УстановитьПараметр("МагазинПолучательКонечный", МагазинПолучательКонечный);
	
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Отказано в записи! Проверка соответствия указанных магазинов выявила следующие ошибки:",,,, Отказ);

		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл

			Сообщить("- " + Выборка.ТекстСообщения);

			Если ДополнительныеСвойства.Свойство("ЗагрузкаИзNavision") Тогда

				ТекстЗаголовка = "WHDOC_MOVE_HEAD.ПередЗаписью";
				ТекстСообщения = "Загрузка номера [ПЕРЕМЕЩ " + IDN + "]: " + Выборка.ТекстСообщения;

				ЗаписьЖурналаРегистрации(ТекстЗаголовка
					, УровеньЖурналаРегистрации.Ошибка, Метаданные(), Ссылка
					, ТекстСообщения, РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);

				ДополнительныеСвойства.Вставить(
					"ДанныеОшибки"
					, Новый Структура(
						"Заголовок, Сообщение, Выполнено"
						, ТекстЗаголовка, ТекстСообщения, 1));

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции // ПроверитьСоответствиеОтправителяПолучателю()

//	LNK 09.02.2017 16:16:47
Функция НуженКонтрольПоРегиструТоварыКОтгрузке()

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходныйОрдерНаТовары.Ссылка
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ГДЕ
	|	РасходныйОрдерНаТовары.ДокументОснование = &ТекущийДокумент
	|	И РасходныйОрдерНаТовары.Проведен"
	);
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);

	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции // НуженКонтрольПоРегиструТоварыКОтгрузке()

//	LNK 20.01.2017 12:09:11
Функция ПолучитьМагазинДокумента()

	Перем Магазин;

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(&МагазинОтправитель КАК Справочник.Магазины) КАК МагазинОтправитель,
	|	ВЫРАЗИТЬ(&МагазинПолучатель КАК Справочник.Магазины) КАК МагазинПолучатель
	|ПОМЕСТИТЬ Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Источник.МагазинОтправитель.СкладУправляющейСистемы = ЛОЖЬ
	|			ТОГДА Источник.МагазинОтправитель
	|		КОГДА Источник.МагазинПолучатель.СкладУправляющейСистемы = ЛОЖЬ
	|			ТОГДА Источник.МагазинПолучатель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Магазин
	|ИЗ
	|	Источник КАК Источник"
	);
	Запрос.УстановитьПараметр("МагазинОтправитель", МагазинОтправитель);
	Запрос.УстановитьПараметр("МагазинПолучатель" , МагазинПолучатель);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		Магазин = Выборка.Магазин;

	КонецЕсли;

	Возврат Магазин;

КонецФункции // ПолучитьМагазинДокумента()

#Область ПроверкаДоступногоОстаткаСУчетомРезерва

//	LNK 31.10.2017 15:16:25
Функция ПроверитьДоступноеКоличествоТоваров(РежимЗаписи, Отказ)

	Если  НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение
		И НЕ ДополнительныеСвойства.Проведен = Истина
		И НЕ ДополнительныеСвойства.Свойство("ЗагрузкаИзNavision")
		И НЕ ДополнительныеСвойства.Свойство("ПропуститьКонтрольДоступногоКоличества") Тогда
	
		Если РезервированиеТоваровСерверПовтИсп.ПроверятьРезервТовараПриОтгрузке(МагазинОтправитель, Дата) Тогда

			СтруктураПараметров = Новый Структура(
				"Граница, ЗаказПокупателя, ПропуститьКонтрольРезультатовПроведения, Товары"
				, Новый Граница(МоментВремени(), ВидГраницы.Исключая)
				, ?(ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗапросДоступностиТоваров"), ДокументОснование, ЗаказПокупателя)
				, ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ПропуститьКонтрольРезультатовПроведения", Ложь) = Истина
				, Товары.Выгрузить(, "Номенклатура, Характеристика, Количество"));

			СтруктураПараметров.Товары.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.Магазины"));
			СтруктураПараметров.Товары.Колонки.Добавить("Склад"  , Новый ОписаниеТипов("СправочникСсылка.Склады"));

			СтруктураПараметров.Товары.ЗаполнитьЗначения(МагазинОтправитель, "Магазин");
			СтруктураПараметров.Товары.ЗаполнитьЗначения(СкладОтправитель  , "Склад");
			
			РезервированиеТоваровСервер.ПроверитьДоступностьТоваровСУчетомРезерва(СтруктураПараметров, РежимЗаписи, Отказ);

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции // ПроверитьДоступноеКоличествоТоваров()

#КонецОбласти

Процедура УстановитьВидНоменклатуры(Принудительно = Ложь)	Экспорт	//	LNK 21.05.2021 11:31:11

	Если НЕ ВидНоменклатуры.Пустая() И НЕ Принудительно ИЛИ Товары.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаСправочник.ВидНоменклатуры) КАК ВидНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Ссылка В(&СписокТоваров)"
	);
	Запрос.УстановитьПараметр("СписокТоваров", Товары.ВыгрузитьКолонку("Номенклатура"));

	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		Выборка = Результат.Выбрать();
		Выборка.Следующий();

		ВидНоменклатуры = Выборка.ВидНоменклатуры;

	КонецЕсли;

КонецПроцедуры















