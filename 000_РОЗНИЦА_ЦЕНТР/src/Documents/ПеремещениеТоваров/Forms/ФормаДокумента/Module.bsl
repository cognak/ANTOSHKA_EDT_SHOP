&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод, Количество = Неопределено, ОбновитьКоличество = Ложь) Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаВесовыхТоваров");
	СтруктураДействий.Вставить("ПроверкаТоваров");
	СтруктураДействий.Вставить("ПроверкаСерийныхНомеров");
	
	Если НЕ (Количество = Неопределено) Тогда
		
		СтруктураДействий.Вставить("ИспользоватьКоличество", Количество);
		
		Если ОбновитьКоличество Тогда
			СтруктураДействий.Вставить("ОбновитьКоличество", Количество);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПодключаемоеОборудованиеРТ.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции
 
&НаСервере
Функция ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента) Экспорт
	
	Если НЕ СтруктураПараметров.НеизвестныеДанныеПО Тогда
		Если СтруктураПараметров.Действие = "ПроверкаВесовыхТоваров" Тогда
			
			ВходящиеПараметры = СтруктураПараметров.ЗначенияПоиска[0];
			ДобавитьНайденныеПозицииТоваров(ВходящиеПараметры);
			СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
			
		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаТоваров" Тогда
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				Если СтруктураПараметров.ЗначенияПоиска.Количество() = 1 Тогда
					
					ВходящиеПараметры = СтруктураПараметров.ЗначенияПоиска[0];
					Если СтруктураПараметров.Свойство("ИспользоватьКоличество") Тогда
						ВходящиеПараметры.Вставить("Количество", СтруктураПараметров.ИспользоватьКоличество);
					КонецЕсли;
					Если СтруктураПараметров.Свойство("ОбновитьКоличество") Тогда
						ВходящиеПараметры.Вставить("ОбновитьКоличество", СтруктураПараметров.ИспользоватьКоличество);
					КонецЕсли;
					
					ДобавитьНайденныеПозицииТоваров(ВходящиеПараметры);
					
				Иначе
					ТаблицаТоваров = Новый ТаблицаЗначений;
					ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
					ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
					ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
					Для каждого ЗначениеПоиска Из СтруктураПараметров.ЗначенияПоиска Цикл
						ТекущаяСтрока = ТаблицаТоваров.Добавить();
						ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначениеПоиска)
					КонецЦикла;	
					СтруктураПараметровКлиента.Вставить("ВыборТоваров", ПоместитьВоВременноеХранилище(ТаблицаТоваров));
				КонецЕсли;
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
			КонецЕсли;
		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаСерийныхНомеров" Тогда
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				ОперацияВыполнена = ДобавитьНайденныеСерийныеНомера(СтруктураПараметров.ЗначенияПоиска);
				Если НЕ ОперацияВыполнена Тогда
					СтруктураПараметровКлиента.Вставить("ТекстПредупреждения",НСтр("ru = 'По считанному штрихкоду определен номер подарочного сертификата.
						|Он уже присутствует в документе.
						|Повторный ввод данных не требуется.'"));
				КонецЕсли;	
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураПараметровКлиента;
	
КонецФункции

// Обработка магнитного или штрихового кода на клиенте
//
// Параметры
//  СтруктураПараметровКлиента - структура параметров
//
&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод) Экспорт
	
	Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") 
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
		
		СтрокаСообщения = НСтр("ru = 'Данные по коду не найдены: %1%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекКод);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ТекстПредупреждения") Тогда
		
		ПоказатьПредупреждение(, СтруктураПараметровКлиента.ТекстПредупреждения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ВыборТоваров") Тогда
		
		ВыбранноеЗначение = ОткрытьФормуМодально("ОбщаяФорма.ВыборНоменклатуры", Новый Структура("АдресТоваровВХранилище", СтруктураПараметровКлиента.ВыборТоваров));
		Если ВыбранноеЗначение <> Неопределено Тогда
			
			ДобавитьНайденныеПозицииТоваров(ВыбранноеЗначение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиОсновныхСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда

		Возврат;

	КонецЕсли;
	
//	LNK 16.02.2017 14:33:05
	ЗаполнениеОбъектовСобытия.ОбщиеДействияПередЗаписью(Неопределено, Отказ);
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);

//	LNK 08.09.2016 14:32:47
//	NAV:БлокировкаДанныхУчестьДокументВNavision
//	Обработчик подсистемы "NAV"
	ВнешниеИсточникиСобытия.ДобавитьКнопкуУчестьВNavision(ЭтотОбъект, ЭтотОбъект.КоманднаяПанель);
//	Оформление элементов в обработчике подсистемы "NAV"
	ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект,, ДоступностьКнопкиУчестьВNavision());

//	LNK 19.12.2016 11:49:54
//	Сортировка по "вторичным" полям
	РаботаСФормами.ДобавитьКнопкиПорядкаКодАртикул(ЭтотОбъект, Элементы.ТоварыДополнительнаяСортировка);
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,СостояниеДокумента,РазрешеноПроведение);
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ПеремещениеТоваров.ПараметрыУказанияСерий(Объект));
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.ДокументОснование.Видимость = Ложь;
		Элементы.ПредставлениеДокументаОснования.Видимость = Ложь;
	Иначе
		
		ОснованиеОбъект = Объект.ДокументОснование.ПолучитьОбъект();
		
		Если ОснованиеОбъект = Неопределено Тогда
			Элементы.ДокументОснование.Видимость = Ложь;
		Иначе
			Элементы.ПредставлениеДокументаОснования.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Элементы.ВидНоменклатуры.Видимость = ТехническаяПоддержкаВызовСервера.ОтладочныйРежимРаботы();	//	LNK 20.05.2021 06:33:39

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда

		Для каждого Ключ Из ОбщегоНазначенияКлиентСервер.AAD("Отправитель", "Получатель") Цикл

			Если НЕ Объект["Магазин" + Ключ].Пустая() И Объект["Склад" + Ключ].Пустая() Тогда

				ПриИзмененииМагазина(Ключ);

			КонецЕсли;

		КонецЦикла;

		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);	
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		
		УстановитьМагазинРозница();	//	LNK 30.12.2016 07:53:11
	//	LNK 29.12.2016 16:58:28
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьКоличествоНаСкладе(ЗначениеМагазинРозница(), ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера(), Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьКоличествоАМпоСкладу(ЗначениеМагазинРозница(), Объект.Товары);

		УправлениеЭлементамиФормыНаСервере();
		УстановитьСостояниеОтклоненийПриПеремещении();

	КонецЕсли;
	
	ИспользоватьПередачиТоваровМеждуОрганизациями = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИспользоватьПередачиТоваровМеждуОрганизациями") 
		И ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями");
	
	ПодключаемоеОборудованиеРТ.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	НастроитьФормуПоДополнительнымПравам();
	УстановитьВидимостьЭлементовСерий();

//	Порядок может быть важен! Сначала проверяем получателя по отправителю, а потом наоборот.
	ПараметрыВыбораМагазина(Объект.МагазинОтправитель, Объект.МагазинПолучатель, Элементы.МагазинОтправитель.ПараметрыВыбора);
	ПараметрыВыбораМагазина(Объект.МагазинПолучатель, Объект.МагазинОтправитель, Элементы.МагазинПолучатель.ПараметрыВыбора);

//	---------------------------------------------------------------------------------------
	СхемаКомпоновки = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СхемаЗаполненияПоОстаткам");
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновки, Новый УникальныйИдентификатор());
	НастройкаЗаполнения.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	НастройкаЗаполнения.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);

	УправлениеДоступомРТ.ПриСозданииФормыНаСервере(ЭтотОбъект);	//	LNK 17.10.2019 14:30:01

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "";

		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:
			                      |""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	ДанныеТСД = ПолучитьДанныеТСД(Объект.Ссылка);

	Если НЕ ДанныеТСД.СтатусТСД = Неопределено тогда

		СтатусДОКТСД = ДанныеТСД.СтатусТСД;

		Если ДанныеТСД.СтатусТСД = ПредопределенноеЗначение("Перечисление.СтатусДокТСД.ВыгрузитьВТСД")
		ИЛИ  ДанныеТСД.СтатусТСД = ПредопределенноеЗначение("Перечисление.СтатусДокТСД.НОВЫЙ")
		ИЛИ  ДанныеТСД.СтатусТСД = ПредопределенноеЗначение("Перечисление.СтатусДокТСД.ОТМЕНЕНО") тогда

			Элементы.ФормаВыгрузитьВТСД.Доступность = Истина;

		КонецЕсли; 		

	Иначе	Элементы.ФормаВыгрузитьВТСД.Доступность = Истина;

	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	// ПодключаемоеОборудование
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
  	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда

		Если ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[1] = Неопределено Тогда

					ТекКод = Параметр[0];

			Иначе	ТекКод = Параметр[1][1];

			КонецЕсли;

			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекКод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);

		КонецЕсли;

	КонецЕсли;
	// Конец ПодключаемоеОборудование

//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ИмяСобытия = "РегистрацияПередачиВNavision" Тогда

		ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	УправлениеЭлементамиФормыНаСервере();
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
		
	УстановитьМагазинРозница();	//	LNK 30.12.2016 07:53:11
//	LNK 29.12.2016 16:59:00
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьКоличествоНаСкладе(ЗначениеМагазинРозница(), ТекущийОбъект.МоментВремени(), Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьКоличествоАМпоСкладу(ЗначениеМагазинРозница(), Объект.Товары);
	УстановитьСостояниеОтклоненийПриПеремещении();

КонецПроцедуры

//	LNK 16.02.2017 12:19:09
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если ПустаяСтрока(Объект.IDN) И НЕ РазрешеноСозданиеНовогоДокумента()	Тогда

		Отказ = Истина;
		Сообщить("Отказано! Входящие перемещения, созданные в магазине, допустимы только на основании заказа поставщику.");

	КонецЕсли;

	Если НЕ Объект.МагазинПолучательКонечный.Пустая() И Объект.УзелСоздания = ПредопределенноеЗначение("Справочник.СтруктураУзлов.КСУ_Navision") Тогда

		Отказ = Истина;
		Сообщить("Отказано! «Переброска» не может быть выполнена документом, созданным в КСУ NAV.");

	КонецЕсли;

КонецПроцедуры

//	LNK 09.09.2016 09:45:34
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

//	LNK 09.09.2016 08:23:08
//	NAV:БлокировкаДанныхУчестьДокументВNavision
//	Управление блокировкой "УчётВNavision" подсистемы "NAV" (реквизит "РегистрацияПередачиВNavision" создается в обработчике ПриСозданииНаСервере)
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РегистрацияПередачиВNavision", ЭтотОбъект["РегистрацияПередачиВNavision"]);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	УстановитьСостояниеОтклоненийПриПеремещении();

//	LNK 29.12.2016 16:59:36
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьКоличествоНаСкладе(ЗначениеМагазинРозница(), ТекущийОбъект.МоментВремени(), Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьКоличествоАМпоСкладу(ЗначениеМагазинРозница(), Объект.Товары);
	
	НастроитьФормуПоДополнительнымПравам();	//	LNK 18.09.2020 06:20:30

//	LNK 09.09.2016 08:23:14
//	NAV:БлокировкаДанныхУчестьДокументВNavision
//	Оформление элементов в обработчике подсистемы "NAV"
	ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект,, ДоступностьКнопкиУчестьВNavision());
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
//	LNK 09.09.2016 09:30:59
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	ВнешниеИсточникиКлиент.ВыполнитьОповещениеПередачиДокументаВNavision(Объект.Ссылка, Объект.Ссылка, ЭтотОбъект["РегистрацияПередачиВNavision"]);

	Оповестить("ОбновитьСписокПеремещений");	//	LNK 31.07.2021 12:09:15

КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);

КонецПроцедуры

&НаКлиенте	//	LNK 12.10.2018 14:02:50
Процедура ОрганизацияПриИзменении(Элемент)

	Объект.МагазинОтправитель = Неопределено;
	Объект.МагазинПолучатель  = Неопределено;
	Объект.МагазинПолучательКонечный = Неопределено;

	Объект.СкладОтправитель = Неопределено;
	Объект.СкладПолучатель  = Неопределено;

	ПриИзмененииМагазина("Отправитель");
	ПриИзмененииМагазина("Получатель");

	СкладПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура МагазинОтправительПриИзменении(Элемент)
	
	ПриИзмененииМагазина("Отправитель");
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПолучательПриИзменении(Элемент)
	
	ПриИзмененииМагазина("Получатель");
	
КонецПроцедуры

//	LNK 17.11.2016 12:47:20
&НаКлиенте
Процедура МагазинПолучательКонечныйПриИзменении(Элемент)

	ПриИзмененииМагазина("Получатель");

КонецПроцедуры

//	LNK 29.12.2016 17:03:07
&НаКлиенте
Процедура СкладОтправительПриИзменении(Элемент)

	СкладПриИзмененииНаСервере();

КонецПроцедуры

//	LNK 29.12.2016 17:03:07
&НаКлиенте
Процедура СкладПолучательПриИзменении(Элемент)

	СкладПриИзмененииНаСервере();

КонецПроцедуры

//	NAV:БлокировкаДанныхУчестьДокументВNavision
#Область ОбслуживаниеКнопкиУчестьДокументВNavision

//	LNK 08.09.2016 14:41:31
//	Обработчик события кнопки подсистемы "NAV"
&НаКлиенте
Процедура РегистрацияПередачиВNavisionНажатие(Элемент)

	ВнешниеИсточникиКлиент.ПодтвердитьРешениеУчетВNavision(ЭтотОбъект);

КонецПроцедуры

//	LNK 08.09.2016 14:41:31
//	Обработчик события кнопки подсистемы "NAV"
&НаСервере
Процедура РегистрацияПередачиВNavisionНаСервере()	Экспорт

//	Оформление элементов в обработчике подсистемы "NAV"
	ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект, Истина, ДоступностьКнопкиУчестьВNavision());

КонецПроцедуры

//	LNK 23.10.2017 14:18:28
&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник)

//	LNK 09.09.2016 09:34:22
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ИмяСобытия = "РегистрацияПередачиВNavision" Тогда

		Если НЕ Источник = Объект.Ссылка И (Параметр.Объект = Объект.Ссылка ИЛИ Параметр.Объект = Объект.ДокументОснование) Тогда

		//	Оформление элементов в обработчике подсистемы "NAV"
			ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект,, ДоступностьКнопкиУчестьВNavision());

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

//	LNK 19.12.2016 12:37:21
//	Сортировка по "вторичным" полям
#Область СортировкаПоВторичнымПолям

&НаКлиенте
Процедура ТоварыПорядокКодПоВозрастаниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Код", "Возр");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокКодПоУбываниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Код", "Убыв");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокАртикулПоВозрастаниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Артикул", "Возр");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокАртикулПоУбываниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Артикул", "Убыв");

КонецПроцедуры

&НаСервере
Процедура ТоварыСортироватьПоРеквизитуНоменклатурыСервер(ИмяРеквизита, Направление)

	РаботаСФормами.ТоварыСортироватьПоРеквизитуНоменклатуры(ИмяРеквизита, Направление, Объект.Товары);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокПроизводительПоУбываниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Производитель", "Убыв");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокПроизводительПоВозрастаниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Производитель", "Возр");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокТорговаяМаркаПоУбываниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("ТорговаяМарка", "Убыв");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокТорговаяМаркаПоВозрастаниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("ТорговаяМарка", "Возр");

КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "ТОВАРЫ"

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
	ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата", Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("ОбъектЦенообразования", Объект.МагазинОтправитель);
	СтруктураЗаполненияЦены.Вставить("ПриводитьКМинимальнойЦене", Ложь);
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" , СтруктураЗаполненияЦены);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПолучитьОстатокСклада", СтруктураДляПолученияОстаткаСклада());
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата", Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("ОбъектЦенообразования", Объект.МагазинОтправитель);
	СтруктураЗаполненияЦены.Вставить("ПриводитьКМинимальнойЦене", Ложь);
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" , СтруктураЗаполненияЦены);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
				
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
		
	КонецЕсли;
		
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ПриИзмененииТоварыКоличестваУпаковок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
			
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	    ТекущаяСтрока.КлючСвязиСерийныхНомеров = 0;
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);
	

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВвестиПодарочныеСертификаты(Команда)
	Перем ПересчетКоличества;
	
	ПересчетКоличества = Ложь;
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиСерийныеНомераНоменклатурыВТЧ(ЭтотОбъект,
		Объект.СерийныеНомера,
		Элементы.Товары.ТекущиеДанные, 
		ПересчетКоличества);
	
	Если ПересчетКоличества Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоРозничнымЦенам(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	Иначе	
		
		Если ЗначениеЗаполнено(Объект.МагазинОтправитель) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныПоРозничнымЦенамСервер();
			ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоРозничнымЦенам(ЦеныРассчитаны, Объект.МагазинОтправитель);
			
		КонецЕсли;
		
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦен(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	Иначе	
		
		СтруктураПараметров = Новый Структура;
		СтруктураОтбора     = Новый Структура;
		Если ИспользоватьПередачиТоваровМеждуОрганизациями Тогда
			СтруктураОтбора.Вставить("ИспользоватьПриПередачеМеждуОрганизациями", Истина);
		КонецЕсли;
		СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
		СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
		ВидЦены = ОткрытьФормуМодально("Справочник.ВидыЦен.Форма.ФормаВыбора",	СтруктураПараметров, ЭтотОбъект);
        		
		Если ЗначениеЗаполнено(ВидЦены) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(ВидЦены);
			ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦены);
                                  			
		КонецЕсли;
             		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенам(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	Иначе	
		
		Если ЗначениеЗаполнено(Объект.МагазинОтправитель) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенамСервер();
			ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоРозничнымЦенам(ЦеныРассчитаны, Объект.МагазинОтправитель);
			
		КонецЕсли;
		
	КонецЕсли;
    	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	Иначе	
		
		СтруктураПараметров = Новый Структура;
		СтруктураОтбора     = Новый Структура;
		Если ИспользоватьПередачиТоваровМеждуОрганизациями Тогда		
			СтруктураОтбора.Вставить("ИспользоватьПриПередачеМеждуОрганизациями", Истина);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
		СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
		ВидЦены = ОткрытьФормуМодально("Справочник.ВидыЦен.Форма.ФормаВыбора",	СтруктураПараметров, ЭтотОбъект);
		
		Если ЗначениеЗаполнено(ВидЦены) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦены);
			ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦены);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.МагазинОтправитель) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", "перемещение товаров");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.МагазинОтправитель);
	ПараметрыФормы.Вставить("РежимПодбораБезУслуг", Истина);
	ПараметрыФормы.Вставить("ИспользоватьОтборПоТипамНоменклатуры", Истина);
	ПараметрыФормы.Вставить("Склад", Объект.СкладОтправитель);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если НЕ ЕстьПравоИзменятьЦену() Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	Если ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекШтрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекШтрихкод);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтотОбъект,ПараметрыУказанияСерий) Тогда
		ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтотОбъект);
		
		Если ЗначениеВозврата <> Неопределено Тогда
			ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)

	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект)
	
КонецПроцедуры

//	LNK 18.11.2016 14:40:59
&НаСервере
Процедура СоздатьДокументПереброскиНаСервере()

	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Документы.ПеремещениеТоваров.ПроверитьПоступлениеНаМагазинПолучательКонечный(Объект.Ссылка);

	КонецЕсли;

КонецПроцедуры

//	LNK 18.11.2016 14:41:03
&НаКлиенте
Процедура СоздатьДокументПереброски(Команда)
	СоздатьДокументПереброскиНаСервере();
КонецПроцедуры

//	LNK 29.12.2016 17:01:00
&НаКлиенте
Процедура ОбновитьКоличествоНаСкладе(Команда)

	СкладПриИзмененииНаСервере();

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Функция заполняет цену по розничным ценам в ТЧ Товары
//Возвращаемое значение - Булево - Цены рассчитаны
&НаСервере
Функция ЗаполнитьЦеныПоРозничнымЦенамСервер()
	
	ЦеныРассчитаны  = ЗапасыСервер.ЗаполнитьЦеныПоРозничнымЦенам(Объект, "Товары", Объект.МагазинОтправитель, Ложь);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

//Функция заполняет цену выделенных строк по розничным ценам в ТЧ Товары
//Возвращаемое значение - Булево - Цены рассчитаны
&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенамСервер()
	
	ЦеныРассчитаны  = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенам(Объект, "Товары", Объект.МагазинОтправитель, Элементы.Товары.ВыделенныеСтроки, Ложь);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

//Функция заполняет цену по виду цен в ТЧ Товары
//Возвращаемое значение - Булево - Цены рассчитаны
&НаСервере
Функция ЗаполнитьЦеныПоВидуЦенСервер(ВидЦены)
	
	ЦеныРассчитаны = ЗапасыСервер.ЗаполнитьЦеныПоВидуЦен(Объект, "Товары", ВидЦены, Ложь);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

//Функция заполняет цену выделенных строк по виду цен в ТЧ Товары
//Возвращаемое значение - Булево - Цены рассчитаны
&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦены)
	
	ЦеныРассчитаны = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Объект,	"Товары", ВидЦены, Элементы.Товары.ВыделенныеСтроки, Ложь);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

//Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора
//Параметры:
//Отказ - Булево
&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.МагазинОтправитель) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин отправитель"" не заполнено'"), Объект, "Объект.МагазинОтправитель",,Отказ);
	КонецЕсли;
		
КонецПроцедуры

//Процедура заполняет товары из подбора
//Параметры: 
//ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	ТаблицаСерийныхНомеров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресСерийныхНомеровВХранилище);
	ЕстьСерийныеНомера = ТаблицаСерийныхНомеров.Количество() > 0;
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, Упаковка, Цена, КоличествоУпаковок, Сумма");
		Если ЕстьСерийныеНомера Тогда
			МассивСерийныхНомеров = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(СтрокаТовара.КлючСвязиСерийныхНомеров , ТаблицаСерийныхНомеров);
			ТекущаяСтрока.КлючСвязиСерийныхНомеров = ОбработкаТабличнойЧастиТоварыСервер.ДобавитьСерийныеНомераВТабличнуюЧасть(Объект.СерийныеНомера, МассивСерийныхНомеров, 0);
		КонецЕсли;	
		СтруктураДействий = Новый Структура;
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ЗаполнитьСтатусыУказанияСерийСервер();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()

	Если Объект.ВидПеремещения = Перечисления.ВидыПеремещенийТоваров.ПоступлениеПереброски
	И НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим()	Тогда

		ТолькоПросмотр = Истина;

	Иначе

		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыЦена.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСумма.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр
				, ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДатуПеремещений
				, НЕ Объект.Проведен И УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату, Ложь)
		);
	//	LNK 04.01.2017 13:54:53
		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Номер.ТолькоПросмотр,
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьНомерДокумента);

	//	LNK 18.11.2016 14:42:24

		Элементы.ФормаСоздатьДокументПереброски.Видимость = РольДоступна(Метаданные.Роли.АдминистраторСистемы)
														И НЕ Объект.МагазинПолучательКонечный.Пустая()
														И ВнешниеИсточникиСобытия.ПередачаNavision(Объект.Ссылка);
		Элементы.НомерВнешнегоДокумента.ТолькоПросмотр = НЕ(ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() И РольДоступна(Метаданные.Роли.АдминистраторСистемы));
		Элементы.ЗаказПокупателя.ТолькоПросмотр        = НЕ(ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() И РольДоступна(Метаданные.Роли.АдминистраторСистемы));

	КонецЕсли;

КонецПроцедуры

// Процедура управляет видимостью и доступностью элементов формы на сервере
//
&НаСервере
Процедура УправлениеЭлементамиФормыНаСервере()

	ДанныеМагазинов = СкладскиеОперацииСервер.ДанныеМагазиновПеремещения(Объект.МагазинОтправитель, Объект.МагазинПолучатель);

	Если ДанныеМагазинов.Получатель.СкладУправляющейСистемы = Истина И НЕ Объект.МагазинОтправитель.Пустая() Тогда

			Элементы.МагазинПолучательКонечный.ТолькоПросмотр = Ложь;
			Элементы.МагазинПолучательКонечный.КнопкаВыбора   = Истина;

	Иначе	Элементы.МагазинПолучательКонечный.ТолькоПросмотр = Истина;
			Элементы.МагазинПолучательКонечный.КнопкаВыбора   = Ложь;

	КонецЕсли;

	Если Объект.МагазинПолучательКонечный.Пустая() Тогда

			Элементы.МагазинПолучатель.ТолькоПросмотр = Ложь;
			Элементы.МагазинПолучатель.КнопкаВыбора   = Истина;
			Элементы.СкладПолучатель.ТолькоПросмотр   = Ложь;
			Элементы.СкладПолучатель.КнопкаВыбора     = Истина;

	Иначе	Элементы.МагазинПолучатель.ТолькоПросмотр = Истина;
			Элементы.МагазинПолучатель.КнопкаВыбора   = Ложь;
			Элементы.СкладПолучатель.ТолькоПросмотр   = Истина;
			Элементы.СкладПолучатель.КнопкаВыбора     = Ложь;

	КонецЕсли;
		
КонецПроцедуры

//Процедура заполняет склад при изменении магазина
//Параметры:
//ИмяРеквизита - Тип: Строка, "Отправитель" или "Получатель"
&НаСервере
Процедура ПриИзмененииМагазина(ИмяРеквизита)
	
	Антонимы = Новый Соответствие;
	Антонимы.Вставить("Отправитель", "Получатель" );
	Антонимы.Вставить("Получатель" , "Отправитель");

	Если ЗначениеЗаполнено(Объект["Магазин" + ИмяРеквизита]) Тогда

		Если ИмяРеквизита = "Получатель" И ЗначениеЗаполнено(Объект.МагазинПолучательКонечный) Тогда

				ИмяРеквизитаСклад = "СкладПереброски";

		Иначе	ИмяРеквизитаСклад = "СкладПоступления";

		КонецЕсли;

		Объект["Склад" + ИмяРеквизита] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект["Магазин" + ИмяРеквизита], ИмяРеквизитаСклад);

	КонецЕсли;

	УправлениеЭлементамиФормыНаСервере();
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ПеремещениеТоваров.ПараметрыУказанияСерий(Объект));
	УстановитьВидимостьЭлементовСерий();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
	Если НЕ Антонимы.Получить(ИмяРеквизита) = Неопределено Тогда

		ИмяСравнение  = "Магазин" + ИмяРеквизита;
		ИмяПрименение = "Магазин" + Антонимы.Получить(ИмяРеквизита);

		ПараметрыВыбораМагазина(Объект[ИмяПрименение], Объект[ИмяСравнение], Элементы[ИмяПрименение].ПараметрыВыбора);

	КонецЕсли;

	СкладПриИзмененииНаСервере();

КонецПроцедуры

// Обрабатывает изменение количества упаковок
//
// Параметры
//  Нет;
//
&НаКлиенте
Процедура ПриИзмененииТоварыКоличестваУпаковок()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

Функция ЕстьПравоИзменятьЦену()
	
	Возврат УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
	
КонецФункции

&НаСервере
Процедура ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) 
	
	Если СтруктураПараметров.Свойство("Количество") Тогда 
		КоличествоУпаковок = СтруктураПараметров.Количество;
		СтруктураПараметров.Удалить("Количество");
	Иначе
		КоличествоУпаковок = 1;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ОбновитьКоличество") Тогда 
		СтруктураПараметров.Удалить("ОбновитьКоличество");
		ОбновитьКоличество = Истина;
	Иначе
		ОбновитьКоличество = Ложь;
	КонецЕсли;

	
	СтруктураДействий = Новый Структура;
	МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураПараметров);
	
	Если МассивСтрок.Количество() > 0 Тогда 
		
		ТекущаяСтрока = МассивСтрок[0];
		КоэффициентУпаковки1 = ?(ЗначениеЗаполнено(СтруктураПараметров.Упаковка), СтруктураПараметров.Упаковка.Коэффициент, 1);
		КоэффициентУпаковки2 = ?(ЗначениеЗаполнено(ТекущаяСтрока.Упаковка), ТекущаяСтрока.Упаковка.Коэффициент, 1);
		
		Если ОбновитьКоличество Тогда  
			ТекущаяСтрока.КоличествоУпаковок = КоличествоУпаковок*КоэффициентУпаковки2/КоэффициентУпаковки1;
		Иначе
			ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + КоличествоУпаковок*КоэффициентУпаковки2/КоэффициентУпаковки1;
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
	Иначе 
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ТекущаяСтрока.КоличествоУпаковок = КоличествоУпаковок;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураПараметров);

		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураЗаполненияЦены = Новый Структура;
		СтруктураЗаполненияЦены.Вставить("Дата", Объект.Дата);
		СтруктураЗаполненияЦены.Вставить("ОбъектЦенообразования", Объект.МагазинОтправитель);
		СтруктураЗаполненияЦены.Вставить("ПриводитьКМинимальнойЦене", Ложь);
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" , СтруктураЗаполненияЦены);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
	КонецЕсли;

	Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ЗаполнитьСтатусыУказанияСерийСервер();

	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(МассивНомеров) 
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура",МассивНомеров[0].Владелец); 
	МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураОтбора);
	СтруктураДействий = Новый Структура;
	
	Если МассивСтрок.Количество() > 0 Тогда 
		
		ТекущаяСтрока = МассивСтрок[0];		
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("СерийныйНомер", МассивНомеров[0]);
		Если Объект.СерийныеНомера.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда					
			Возврат Ложь;			
		КонецЕсли;		
		
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + 1;		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		СтрокаСерийныхНомеров = Объект.СерийныеНомера.Добавить();
		СтрокаСерийныхНомеров.СерийныйНомер            = МассивНомеров[0];
		СтрокаСерийныхНомеров.КлючСвязиСерийныхНомеров = ТекущаяСтрока.КлючСвязиСерийныхНомеров;

	Иначе 
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ТекущаяСтрока.Количество = 1;
		ТекущаяСтрока.КоличествоУпаковок = 1;
		ТекущаяСтрока.Номенклатура = МассивНомеров[0].Владелец;
		ТекущаяСтрока.Цена = ТекущаяСтрока.Номенклатура.Номинал;
		ТекущаяСтрока.КлючСвязиСерийныхНомеров = ОбработкаТабличнойЧастиТоварыСервер.ДобавитьСерийныеНомераВТабличнуюЧасть(Объект.СерийныеНомера, МассивНомеров, 0);
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
	КонецЕсли;	
		
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);			
	
	Модифицированность = Истина;
	Возврат Истина;
	
КонецФункции

&НаСервере	//	LNK 19.10.2022 06:19:56
Процедура УстановитьСостояниеОтклоненийПриПеремещении()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ТаблицаУчета.КоличествоКОтгрузке) КАК КоличествоКОтгрузке,
	|	СУММА(ТаблицаУчета.КоличествоКПоступлению) КАК КоличествоКПоступлению
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаКОтгрузке.КоличествоОстаток КАК КоличествоКОтгрузке,
	|		0 КАК КоличествоКПоступлению
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОснование = &Объект) КАК ТаблицаКОтгрузке
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		ТаблицаКОтгрузке.КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыКПоступлению.Остатки(, ДокументОснование = &Объект) КАК ТаблицаКОтгрузке) КАК ТаблицаУчета"
	);
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();

	КартинкаСостоянияОтклонениеПриПеремещении = 0;

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();

		Если Выборка.КоличествоКОтгрузке = 0 И Выборка.КоличествоКПоступлению = 0  Тогда

			КартинкаСостоянияОтклонениеПриПеремещении = 1;

		КонецЕсли;

	КонецЕсли;
	
	Элементы.КартинкаСостоянияОтклонениеПриПеремещении.Видимость = (КартинкаСостоянияОтклонениеПриПеремещении = 0);

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеОтклонениеПриПеремещении_УДАЛИТЬ()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТоварыКОтгрузке.ДокументОснование КАК ДокументОснование,
	|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузке.КоличествоПриход КАК КОтгрузке,
	|	ТоварыКОтгрузке.КоличествоРасход КАК Отгружено,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузке.КоличествоКонечныйОстаток > 0
	|			ТОГДА ТоварыКОтгрузке.КоличествоКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Недорасход,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузке.КоличествоКонечныйОстаток < 0
	|			ТОГДА -ТоварыКОтгрузке.КоличествоКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Перерасход
	|ПОМЕСТИТЬ ТоварыКОтгрузке
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(, , , , ДокументОснование = &ДокументОснование) КАК ТоварыКОтгрузке
	|ГДЕ
	|	НЕ ТоварыКОтгрузке.КоличествоОборот = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКПоступлению.ДокументОснование КАК ДокументОснование,
	|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
	|	ТоварыКПоступлению.Характеристика КАК Характеристика,
	|	ТоварыКПоступлению.КоличествоПриход КАК КПоступлению,
	|	ТоварыКПоступлению.КоличествоРасход КАК Поступило,
	|	ВЫБОР
	|		КОГДА ТоварыКПоступлению.КоличествоКонечныйОстаток > 0
	|			ТОГДА ТоварыКПоступлению.КоличествоКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Недопоставка,
	|	ВЫБОР
	|		КОГДА ТоварыКПоступлению.КоличествоКонечныйОстаток < 0
	|			ТОГДА -ТоварыКПоступлению.КоличествоКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Перепоставка
	|ПОМЕСТИТЬ ТоварыКПриемке
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.ОстаткиИОбороты(, , , , ДокументОснование = &ДокументОснование) КАК ТоварыКПоступлению
	|ГДЕ
	|	НЕ ТоварыКПоступлению.КоличествоОборот = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(ТоварыКОтгрузке.ДокументОснование, ТоварыКПриемке.ДокументОснование) КАК ДокументОснование,
	|	ЕСТЬNULL(ТоварыКОтгрузке.Номенклатура, ТоварыКПриемке.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ТоварыКОтгрузке.Характеристика, ТоварыКПриемке.Характеристика) КАК Характеристика,
	|	ТоварыКОтгрузке.КОтгрузке КАК КОтгрузке,
	|	ТоварыКОтгрузке.Отгружено КАК Отгружено,
	|	ТоварыКОтгрузке.Недорасход КАК Недорасход,
	|	ТоварыКОтгрузке.Перерасход КАК Перерасход,
	|	ТоварыКПриемке.КПоступлению КАК КПоступлению,
	|	ТоварыКПриемке.Поступило КАК Поступило,
	|	ТоварыКПриемке.Недопоставка КАК Недопоставка,
	|	ТоварыКПриемке.Перепоставка КАК Перепоставка
	|ИЗ
	|	ТоварыКПриемке КАК ТоварыКПриемке
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|		ПО ТоварыКПриемке.ДокументОснование = ТоварыКОтгрузке.ДокументОснование
	|			И ТоварыКПриемке.Номенклатура = ТоварыКОтгрузке.Номенклатура
	|			И ТоварыКПриемке.Характеристика = ТоварыКОтгрузке.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыКОтгрузке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыКПриемке"
	);
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда

			КартинкаСостоянияОтклонениеПриПеремещении = 1;

	Иначе	КартинкаСостоянияОтклонениеПриПеремещении = 0;

	КонецЕсли;
	
	Элементы.КартинкаСостоянияОтклонениеПриПеремещении.Видимость = КартинкаСостоянияОтклонениеПриПеремещении = 0;
	
КонецПроцедуры

//	LNK 14.09.2016 13:46:45
&НаСервере
Процедура ПараметрыВыбораМагазина(ВыбираемоеЗначение, СравниваемоеЗначение, СтруктураПараметров)

	СравниваемСоСкладомУправляющейСистемы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СравниваемоеЗначение, "СкладУправляющейСистемы") = Истина;

	МассивПараметров = ОбщегоНазначенияКлиентСервер.AAD(
		  Новый ПараметрВыбора("Отбор.СкладУправляющейСистемы", НЕ СравниваемСоСкладомУправляющейСистемы)
		, Новый ПараметрВыбора("Отбор.ВведенВЭксплуатацию", СравниваемСоСкладомУправляющейСистемы)
		, Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь)
		, Новый ПараметрВыбора("Отбор.Блокирован", Ложь));

	Если СравниваемСоСкладомУправляющейСистемы Тогда

		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));

	КонецЕсли;

	СтруктураПараметров = Новый ФиксированныйМассив(МассивПараметров);

КонецПроцедуры

&НаСервере
Процедура УстановитьМагазинРозница()

	ЗначенияОтправителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.МагазинОтправитель, "СкладУправляющейСистемы, НомерМагазина");
	ЗначенияПолучателя  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.МагазинПолучатель , "СкладУправляющейСистемы, НомерМагазина");

	Если  НЕ ЗначенияПолучателя.СкладУправляющейСистемы = Истина
		И НЕ Объект.СкладПолучатель.Пустая()	Тогда

		МагазинРозница   = "СкладПолучатель";
		ЗаголовокКолонки = "Склад(" + СокрЛП(ЗначенияПолучателя.НомерМагазина) + ")";

	ИначеЕсли НЕ ЗначенияОтправителя.СкладУправляющейСистемы = Истина
			И НЕ Объект.СкладОтправитель.Пустая()	Тогда

		МагазинРозница   = "СкладОтправитель";
		ЗаголовокКолонки = "Склад(" + СокрЛП(ЗначенияОтправителя.НомерМагазина) + ")";

	Иначе

		МагазинРозница   = "";
		ЗаголовокКолонки = "Склад";

	КонецЕсли;

	Элементы.ТоварыКоличествоНаСкладе.Заголовок = ЗаголовокКолонки + ",шт.";

КонецПроцедуры // УстановитьМагазинРозница()

//	LNK 30.12.2016 08:21:26
&НаСервере
Функция ЗначениеМагазинРозница()

	Возврат ?(ПустаяСтрока(МагазинРозница), Справочники.Склады.ПустаяСсылка(), Объект[МагазинРозница]);

КонецФункции // ЗначениеМагазинРозница()

//	LNK 29.12.2016 17:01:54
&НаСервере
Процедура СкладПриИзмененииНаСервере()

	УстановитьМагазинРозница();
	МоментВремени = ?(Объект.Ссылка.Пустая(), ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера(), Новый МоментВремени(Объект.Дата, Объект.Ссылка));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьКоличествоНаСкладе(ЗначениеМагазинРозница(), МоментВремени, Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьКоличествоАМпоСкладу(ЗначениеМагазинРозница(), Объект.Товары);

КонецПроцедуры

//	LNK 15.11.2016 14:54:41
&НаКлиенте
Функция СтруктураДляПолученияОстаткаСклада()

	Если Объект.Ссылка.Пустая() Тогда

			Граница = ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера();

	Иначе	Граница = Новый Структура("Ссылка, Дата", Объект.Ссылка, Объект.Дата);

	КонецЕсли;

	СоставДействия = Новый Структура(
		"Склад, Граница"
		, ?(ПустаяСтрока(МагазинРозница), ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"), Объект[МагазинРозница])
		, Граница);

	Возврат СоставДействия;

КонецФункции // СтруктураДляПолученияОстаткаСклада()

///////////////////////////////////////////////////////////////////////////////
// Серии

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.ТоварыСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыУказатьСерии.Видимость        = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУказанияСерий()
	
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	
	ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы ,ПараметрыФормыУказанияСерий,ЭтотОбъект);
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	Если ПодключаемоеОборудованиеРТКлиент.ПолучитьВесСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект) Тогда
		ТоварыКоличествоУпаковокПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиПоСкладуНаСервере()

		Документ = РеквизитФормыВЗначение("Объект");
		Документ.ЗаполнитьЗапасыПоОстаткамНаСкладе(НастройкаЗаполнения);
		ЗначениеВРеквизитФормы(Документ, "Объект");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиПоСкладу(Команда)
	Если ЗначениеЗаполнено(Объект.СкладОтправитель) тогда
	 
		Если Объект.Товары.Количество() > 0 Тогда
			Ответ = Неопределено;

			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОстаткамНаСкладеЗавершение", ЭтотОбъект), НСтр("ru = 'Табличная часть будет очищена! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	        Возврат; 
		КонецЕсли;
		ЗаполнитьОстаткамиПоСкладуНаСервере();
		
	Иначе
		Сообщить("Запоните склад отправитель");	
	КонецЕсли;
КонецПроцедуры

//	LNK 06.03.2017 11:20:30
&НаКлиенте
Процедура ЗагрузитьТоварыИзТаблицыExcel(Команда)

	Если Объект.Товары.Количество() > 0 Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьТоварыИзТаблицыExcelЗавершение", ЭтотОбъект, Новый Структура);
		ПоказатьВопрос(ОписаниеОповещения
			, "Табличная часть Товары будет очищена.
			  |Подтвердите своё решение:"
			, РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.ОК
			, "Предупреждение(перед загрузкой)", КодВозвратаДиалога.Отмена);

	Иначе

		ЗагрузитьТоварыИзТаблицыExcelЗавершение(КодВозвратаДиалога.ОК, Новый Структура);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамНаСкладеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли; 
    
    ЗаполнитьОстаткамиПоСкладуНаСервере();

КонецПроцедуры

#Область РаботаПоТерминалуСбораДанных
	
&НаСервере
Процедура ВыгрузитьВТСДНаСервере()

	Если  Объект.Товары.Количество() = 0 и Объект.РазрешитьДобавлятьСтрокиВТСД тогда
		РазрешитьДобавлятьСтрокиВТСД  = Истина;
	Иначе
		РазрешитьДобавлятьСтрокиВТСД  = Ложь;
	КонецЕсли;

	ТранспортТерминалов.ВыгрузитьДокументПеремещение(Объект.Ссылка,РазрешитьДобавлятьСтрокиВТСД);

КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусТСД()
	
	
		НаборЗаписей = РегистрыСведений.СтатусТСД.СоздатьНаборЗаписей(); 
		Магазин = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин; 
		НаборЗаписей.Отбор.Магазин.Установить(Магазин);
		НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка); 

		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Магазин = Магазин;
		НоваяЗапись.Объект = Объект.Ссылка;
		НоваяЗапись.СтатусТСД = Перечисления.СтатусДокТСД.НОВЫЙ; 
		НоваяЗапись.ВремяИзменения = ТекущаяДата(); 
		НоваяЗапись.Проект = Проект; 
		НаборЗаписей.Записать();
	
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВТСД(Команда)
	ПакетДокумнтов = ПолучитьНомерПакетаДокумнтов(Объект.Ссылка);
	Если  ПакетДокумнтов = "" тогда 
		Если Объект.ПометкаУдаления тогда
			Сообщить("Документ помечен на удаление! Выгрузка в ТСД невозможна!");
		    Возврат;
		КонецЕсли;
			
		Если Объект.Проведен  тогда	
			Если Объект.РазрешитьДобавлятьСтрокиВТСД тогда 
				Если НЕ ЗначениеЗаполнено(Проект) тогда 
					Сообщить("Выбирете проект!");
				Иначе
					СтатусТСД = ПолучитьСтатусТСД();
					СтатусДОКТСД =  СтатусТСД;
					Если СтатусТСД = ПредопределенноеЗначение("Перечисление.СтатусДокТСД.ВыгрузитьВТСД") или СтатусТСД = ПредопределенноеЗначение("Перечисление.СтатусДокТСД.НОВЫЙ")  тогда
						ВыгрузитьВТСДНаСервере();
						Сообщить("Документ выгружен в ТСД !");
					ИначеЕсли  СтатусТСД = ПредопределенноеЗначение("Перечисление.СтатусДокТСД.ОТМЕНЕНО") тогда	
						СтатусДОКТСД = ПредопределенноеЗначение("Перечисление.СтатусДокТСД.ВыгрузитьВТСД"); 
						ВыгрузитьВТСДНаСервере();
						Сообщить("Документ выгружен в ТСД !"); 			
					КонецЕсли;
				КонецЕсли;
			Иначе
					СтатусТСД = ПолучитьСтатусТСД();
					СтатусДОКТСД =  СтатусТСД;
					Если СтатусТСД = ПредопределенноеЗначение("Перечисление.СтатусДокТСД.ВыгрузитьВТСД") или СтатусТСД = ПредопределенноеЗначение("Перечисление.СтатусДокТСД.НОВЫЙ")  тогда
						ВыгрузитьВТСДНаСервере();
						Сообщить("Документ выгружен в ТСД !");
					ИначеЕсли  СтатусТСД = ПредопределенноеЗначение("Перечисление.СтатусДокТСД.ОТМЕНЕНО") тогда	
						СтатусДОКТСД = ПредопределенноеЗначение("Перечисление.СтатусДокТСД.ВыгрузитьВТСД"); 
						ВыгрузитьВТСДНаСервере();
						Сообщить("Документ выгружен в ТСД !"); 			
					КонецЕсли;
			КонецЕсли;
		Иначе 
			Сообщить("Документ не проведен! Выгрузка в ТСД невозможна! Проведите документ !");
		КонецЕсли;
	Иначе
		ТранспортТерминалов.ВыгрузитьПакетДокументов(ПакетДокумнтов);
		Сообщить("Выгружен пакет документов в ТСД !");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВТСДПриИзменении(Элемент)
	
	//ВыгрузитьВТСДПриИзмененииНаСервере(ВыгрузитьВТСД);
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьВТСДПриИзмененииНаСервере(Выгружать)

	УстановитьПривилегированныйРежим(Истина);
	ИзменитьСтатусНаСервере(Выгружать);
	УстановитьПривилегированныйРежим(Ложь);
	// Посмотреть почему убирается тольк просмотр, строчка ниже временно !!!
	ТолькоПросмотр = Истина;

КонецПроцедуры

&НаСервере
Процедура ИзменитьСтатусНаСервере(Выгружать)
	Если Выгружать тогда 		
		Если НЕ ЗначениеЗаполнено(Объект.СтатусТСД) ИЛИ Объект.СтатусТСД = ПредопределенноеЗначение("Перечисление.СтатусДокТСД.ОТМЕНЕНО") тогда
			Объект.СтатусТСД = Перечисления.СтатусДокТСД.ВыгрузитьВТСД;
		КонецЕсли;
	Иначе
		Если Объект.СтатусТСД = Перечисления.СтатусДокТСД.ВыгрузитьВТСД тогда
			Объект.СтатусТСД = Перечисления.СтатусДокТСД.ПустаяСсылка();
		КонецЕсли; 		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) тогда
	    Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
//	LNK 17.02.2017 06:55:19
	ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	ОбъектДокумент.ДополнительныеСвойства.Вставить("ИзменениеСтатусаРаботыСТерминалом", Истина);
	ОбъектДокумент.Записать();
	ЗначениеВРеквизитФормы(ОбъектДокумент, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьСтатусНаСервере()
	Если ЗначениеЗаполнено(Объект.СтатусТСД) тогда  	
		Если НЕ Объект.СтатусТСД = Перечисления.СтатусДокТСД.ОТМЕНЕНО тогда 		
			Объект.СтатусТСД = Перечисления.СтатусДокТСД.ОТМЕНЕНО;

		//	LNK 17.02.2017 06:55:19
			ОбъектДокумент = РеквизитФормыВЗначение("Объект");
			ОбъектДокумент.ДополнительныеСвойства.Вставить("ИзменениеСтатусаРаботыСТерминалом", Истина);
			ОбъектДокумент.Записать();
			ЗначениеВРеквизитФормы(ОбъектДокумент, "Объект");

		КонецЕсли;		
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура УдалитьИзТСДНаСервере()
	Если Объект.МагазинОтправитель.СкладУправляющейСистемы тогда 
		ТипДок = "ПРИХОД";
	Иначе
		ТипДок = "РАСХОД";
	КонецЕсли;
		
	ТранспортТерминалов.УстановитьСтатусОтмена(ТипДок,Объект.Номер,Объект.Дата);
	СтатусДОКТСД = Перечисления.СтатусДокТСД.ОТМЕНЕНО;
	УстановитьСтатусТСДОтмена();

КонецПроцедуры

&НаСервере
Процедура УдалитьПакетДокументовИзТСДНаСервере(НомерПакета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПакетыДокументов.Объект КАК ДокСсылка,
		|	ПакетыДокументов.Объект.Номер КАК Номер,
		|	ПакетыДокументов.Объект.Дата КАК Дата
		|ИЗ
		|	РегистрСведений.ПакетыДокументов КАК ПакетыДокументов
		|ГДЕ
		|	ПакетыДокументов.НомерПакета = &НомерПакета
		|
		|СГРУППИРОВАТЬ ПО
		|	ПакетыДокументов.Объект,
		|	ПакетыДокументов.Объект.Номер,
		|	ПакетыДокументов.Объект.Дата";
	
	Запрос.УстановитьПараметр("НомерПакета", НомерПакета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Объект.МагазинОтправитель.СкладУправляющейСистемы тогда 
			ТипДок = "ПРИХОД";
		Иначе
			ТипДок = "РАСХОД";
		КонецЕсли;
			
		ТранспортТерминалов.УстановитьСтатусОтмена(ТипДок,ВыборкаДетальныеЗаписи.Номер,ВыборкаДетальныеЗаписи.Дата);
		УстановитьСтатусТСДОтменаДляПакета(ВыборкаДетальныеЗаписи.ДокСсылка);
	КонецЦикла;

КонецПроцедуры


&НаКлиенте
Процедура УдалитьИзТСД(Команда)
	ПакетДокумнтов = ПолучитьНомерПакетаДокумнтов(Объект.Ссылка);
	Если  ПакетДокумнтов = "" тогда 
		УдалитьИзТСДНаСервере();
	Иначе
		УдалитьПакетДокументовИзТСДНаСервере(ПакетДокумнтов);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Функция ОснованиеПереданоNavision()

	Передано = Истина;

	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда

		Передано = ВнешниеИсточникиСобытия.ПередачаNavision(Объект.ДокументОснование);

	КонецЕсли;

	Возврат Передано;

КонецФункции // ОснованиеПереданоNavision()

//	LNK 16.02.2017 12:30:30
&НаКлиенте
Функция РазрешеноСозданиеНовогоДокумента()

	Если ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда

		Разрешено = Истина;

	Иначе

		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МагазинПолучатель, "СкладУправляющейСистемы") = Ложь Тогда

		//		Для "входящего" документа разрешаем ввод нового только на основании "прямой закупки"
				Разрешено = ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") И ЗначениеЗаполнено(Объект.ДокументОснование);

		Иначе	Разрешено = Истина;

		КонецЕсли;

	КонецЕсли;

	Возврат Разрешено;

КонецФункции

//	LNK 16.02.2017 13:39:02
&НаСервере
Функция ДоступностьКнопкиУчестьВNavision()

	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда

		КнопкаДоступна = ОснованиеПереданоNavision();

	Иначе

		КнопкаДоступна = Ложь;

	КонецЕсли;

	Возврат КнопкаДоступна;

КонецФункции

//	LNK 06.03.2017 11:24:55
&НаКлиенте
Процедура ЗагрузитьТоварыИзТаблицыExcelЗавершение(КодВозврата, ДополнительныеПараметры)	Экспорт

	Если КодВозврата = КодВозвратаДиалога.ОК Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗагрузкуДанныхИзТаблицыExcel", ЭтотОбъект);
		ДиалогВыбораФайла  = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Заголовок = "Выберите файл книги MS Excel";
		ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Лист Excel'") + " (*.xls)|*.xls|" + НСтр("ru = 'Лист Excel2007'") + " (*.xlsx)|*.xlsx";
		ДиалогВыбораФайла.ПолноеИмяФайла = ПолноеИмяИмпортируемогоФайла;
		ДиалогВыбораФайла.МножественныйВыбор = Ложь;
		ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;

		ДиалогВыбораФайла.Показать(ОписаниеОповещения);

	Иначе

		Сообщить("Отменено пользователем.");

	КонецЕсли;

КонецПроцедуры

//	LNK 06.03.2017 11:48:00
&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхИзТаблицыExcel(СписокФайлов, ДополнительныеПараметры)	Экспорт

	Если ТипЗнч(СписокФайлов) = Тип("Массив") И НЕ СписокФайлов.Количество() = 0 Тогда

		Объект.Товары.Очистить();
		Объект.СерийныеНомера.Очистить();
		Объект.Серии.Очистить();

		ПолноеИмяИмпортируемогоФайла = СписокФайлов[0];

		ПоказатьОповещениеПользователя("Загрузка данных из файла ...",, "Выполняется загрузка «" + ПолноеИмяИмпортируемогоФайла + "»", БиблиотекаКартинок.Предупреждение32);

		МассивТоваров = ЗаполнениеОбъектов.ЗагрузитьДанныеВМассивИзТаблицыExcel(
			ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяИмпортируемогоФайла), УникальныйИдентификатор),
			ОбщегоНазначенияКлиентСервер.lx_GetTooken(ПолноеИмяИмпортируемогоФайла, ".")
		);

		Для каждого СоставСтроки Из МассивТоваров Цикл

			СтрокаТовары = Объект.Товары.Добавить();
			СтрокаТовары.Номенклатура = СоставСтроки.Номенклатура;
			СтрокаТовары.Количество = СоставСтроки.Количество;
			СтрокаТовары.КоличествоУпаковок = СоставСтроки.Количество;
			СтрокаТовары.Цена  = СоставСтроки.Цена;
			СтрокаТовары.Сумма = СтрокаТовары.Цена * СтрокаТовары.Количество;

		КонецЦикла;

		ПоказатьОповещениеПользователя("Проверка остатков ...",, "Проверка остатков по загруженным товарам (" + Формат(Объект.Товары.Количество(), "ЧДЦ=; ЧН=0; ЧГ=") + ")", БиблиотекаКартинок.Предупреждение32);

		СкладПриИзмененииНаСервере();

		ПоказатьОповещениеПользователя("Загрузка данных выполнена!",,, БиблиотекаКартинок.Предупреждение32);
	
	Иначе

		Сообщить("Выбор не был сделан. Операция не выполнена");
	
	КонецЕсли;

КонецПроцедуры

//	LNK 06.03.2017 11:48:42	--- думал заполнить по остаткам, но пока отложим. Потом удалить процедуру
&НаСервере
Процедура ЗаполнитьТоварыПоДаннымМассива(МассивТоваров)

	Объект.Товары.Очистить();
	Объект.СерийныеНомера.Очистить();
	Объект.Серии.Очистить();

	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("НомерСтроки" , Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));

	НомерСтроки = 0;

	Для каждого СоставСтроки Из МассивТоваров Цикл

		НомерСтроки = НомерСтроки + 1;
		СтрокаТаблицы = ТаблицаЗначений.Добавить();
		СтрокаТаблицы.НомерСтроки  = НомерСтроки;
		СтрокаТаблицы.Номенклатура = СоставСтроки.Номенклатура;
		СтрокаТаблицы.Количество = СоставСтроки.Количество;
		СтрокаТаблицы.КоличествоУпаковок = СоставСтроки.Количество;
		СтрокаТаблицы.Цена  = СоставСтроки.Цена;
		СтрокаТаблицы.Сумма = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;

	КонецЦикла;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаЗначений.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаЗначений.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаЗначений КАК ТаблицаЗначений"
	);
	Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаЗначений);

	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

#Область ОтборыТабличнойЧастиТовары

&НаКлиенте
Процедура ОтборОстатокОтключить(Команда)

	Элементы.Товары.ОтборСтрок = Неопределено;
	Элементы.Товары.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура ОтборОстатокНеРавно(Команда)

	УстановитьКлючОтбораОстаткаТоваров(0);

КонецПроцедуры

&НаКлиенте
Процедура ОтборОстатокРавно(Команда)

	УстановитьКлючОтбораОстаткаТоваров(1);

КонецПроцедуры

&НаКлиенте
Процедура ОтборОстатокБольшеКоличества(Команда)

	УстановитьКлючОтбораОстаткаТоваров(2);

КонецПроцедуры

&НаКлиенте
Процедура ОтборОстатокМеньшеКоличества(Команда)

	УстановитьКлючОтбораОстаткаТоваров(3);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьКлючОтбораОстаткаТоваров(Ключ)

	Для каждого СтрокаТовары Из Объект.Товары Цикл

		Если Ключ = 0 Тогда

			СтрокаТовары.КлючОтбораОстатков = НЕ СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоНаСкладе;

		ИначеЕсли Ключ = 1 Тогда

			СтрокаТовары.КлючОтбораОстатков = СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоНаСкладе;

		ИначеЕсли Ключ = 2 Тогда

			СтрокаТовары.КлючОтбораОстатков = СтрокаТовары.КоличествоУпаковок < СтрокаТовары.КоличествоНаСкладе;

		ИначеЕсли Ключ = 3 Тогда

			СтрокаТовары.КлючОтбораОстатков = СтрокаТовары.КоличествоУпаковок > СтрокаТовары.КоличествоНаСкладе;

		Иначе

			СтрокаТовары.КлючОтбораОстатков = Ложь;

		КонецЕсли;

	КонецЦикла;

	Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючОтбораОстатков", Истина);
	Элементы.Товары.Обновить();

КонецПроцедуры

#КонецОбласти



&НаСервере
Функция ПолучитьСтатусТСД()
	СтатусДок = Перечисления.СтатусДокТСД.НОВЫЙ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабСтатусТСД.СтатусТСД  КАК  СтатусДок
		|ИЗ
		|	РегистрСведений.СтатусТСД КАК ТабСтатусТСД
		|ГДЕ
		|	ТабСтатусТСД.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() тогда
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтатусДок = ВыборкаДетальныеЗаписи.СтатусДок;
	КонецЦикла;
	Иначе
    	СтатусДок = Перечисления.СтатусДокТСД.ВыгрузитьВТСД;
		УстановитьСтатусТСД();
	КонецЕсли;
	Возврат СтатусДок;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

&НаСервере
Функция ПолучитьПроектТСД_УДАЛИТЬ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТАБСтатусТСД.Проект  КАК  Проект
		|ИЗ
		|	РегистрСведений.СтатусТСД КАК ТАБСтатусТСД
		|ГДЕ
		|	ТАБСтатусТСД.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() тогда
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Проект = ВыборкаДетальныеЗаписи.Проект;
	КонецЦикла;
	Иначе
    	Проект = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	Возврат Проект;

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

&НаСервере
Функция ПолучитьСтатусТСД_БезИзменения_УДАЛИТЬ()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаРегистра.СтатусТСД КАК СтатусДок
	|ИЗ
	|	РегистрСведений.СтатусТСД КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Объект = &Объект"
	);
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() тогда

		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл

			СтатусДок = Выборка.СтатусДок;

		КонецЦикла;

	Иначе

    	СтатусДок = Неопределено;

	КонецЕсли;

	Возврат СтатусДок;

КонецФункции

&НаСервереБезКонтекста	//	LNK 19.10.2022 06:44:54
Функция ПолучитьДанныеТСД(Ссылка)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаРегистра.СтатусТСД КАК СтатусТСД,
	|	ТаблицаРегистра.Проект КАК Проект
	|ИЗ
	|	РегистрСведений.СтатусТСД КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Объект = &Объект"
	);
	Запрос.УстановитьПараметр("Объект", Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	ДанныеТСД = Новый Структура("СтатусТСД, Проект");

	Если НЕ РезультатЗапроса.Пустой() тогда

		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеТСД, Выборка);

	КонецЕсли;

	Возврат ДанныеТСД;

КонецФункции

&НаСервере
Процедура УстановитьСтатусТСДОтмена()
	
	
		НаборЗаписей = РегистрыСведений.СтатусТСД.СоздатьНаборЗаписей(); 
		Магазин = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин; 
		НаборЗаписей.Отбор.Магазин.Установить(Магазин);
		НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка); 

		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Магазин = Магазин;
		НоваяЗапись.Объект = Объект.Ссылка;
		НоваяЗапись.СтатусТСД = Перечисления.СтатусДокТСД.ОТМЕНЕНО; 
		НоваяЗапись.ВремяИзменения = ТекущаяДата(); 
		НаборЗаписей.Записать();
	
		
КонецПроцедуры


&НаСервере
Процедура УстановитьСтатусТСДОтменаДляПакета(ДокССылка)
	
	
		НаборЗаписей = РегистрыСведений.СтатусТСД.СоздатьНаборЗаписей(); 
		Магазин = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин; 
		НаборЗаписей.Отбор.Магазин.Установить(Магазин);
		НаборЗаписей.Отбор.Объект.Установить(ДокССылка); 

		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Магазин = Магазин;
		НоваяЗапись.Объект = ДокССылка;
		НоваяЗапись.СтатусТСД = Перечисления.СтатусДокТСД.ОТМЕНЕНО; 
		НоваяЗапись.ВремяИзменения = ТекущаяДата(); 
		НаборЗаписей.Записать();
	
		
КонецПроцедуры


&НаКлиенте
Процедура РазрешитьДобавлятьСтрокиВТСДПриИзменении(Элемент)
	Если Объект.Товары.Количество() <> 0 тогда 
		Сообщить("Установка не возможно в документе есть товары! Очистите их!");
		Объект.РазрешитьДобавлятьСтрокиВТСД = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Объект.РазрешитьДобавлятьСтрокиВТСД = Истина	Тогда
		Объект.РазрешитьДобавлятьСтрокиВТСД = Ложь;
	КонецЕсли;    
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПереоценку(Команда)
	СсылкаДокПереоценка = СоздатьДокПереоценка();
	Если Модифицированность тогда 
		Сообщить("Сначало нужно провести документ!");
	КонецЕсли;
	Если не Объект.Проведен тогда 
		Сообщить("Сначало нужно провести документ!");
	КонецЕсли;
	Если ЗначениеЗаполнено(СсылкаДокПереоценка) тогда
		ОткрытьЗначение(СсылкаДокПереоценка);
	Иначе 
		Сообщить("Документ не создан! Товары не в промо периоде!");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СоздатьДокПереоценка()
	Записывать = Ложь;	
	Если Объект.Товары.Количество() = 0 тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ДокПереоценка = ПолучитьДокПереоценку(Объект.Ссылка);
	Если Не ЗначениеЗаполнено(ДокПереоценка) тогда 
		ДокПереоценка = Документы.ПереоценкаТоваровНаСкладах.СоздатьДокумент();
	Иначе
		ДокПереоценка.Товары.Очистить();
	КонецЕсли;
	ДокПереоценка.Акционная 	= Истина;
	ДокПереоценка.Комментарий 	= "Создано на основании переоценки!";
	ДокПереоценка.ВидОперации 	= Перечисления.ВидыОперацийПереоценкаТоваровНаСкладах.ЭтикетировкаТоваров;	
	ДокПереоценка.Магазин 		= Объект.МагазинПолучатель;	
	
	Для каждого СтрокаТЧ из Объект.Товары цикл
		ТипПереоценки = ПолучитьТипПереценки(СтрокаТЧ.Номенклатура);
		Если ЗначениеЗаполнено(ТипПереоценки) тогда
			Если ТипПереоценки = Перечисления.ТипыПереоценок.ПромоНачало тогда 
				НоваяСтрока 			  = ДокПереоценка.Товары.Добавить(); 	
				НоваяСтрока.Номенклатура  = СтрокаТЧ.Номенклатура;
				НоваяСтрока.ЦенаНовая     = ПолучитьНовуюЦену(СтрокаТЧ.Номенклатура);
				НоваяСтрока.Цена 		  = ПолучитьОпорнуюЦену(СтрокаТЧ.Номенклатура);
				НоваяСтрока.ТипПереоценки = ТипПереоценки;
				НоваяСтрока.Количество 	  = СтрокаТЧ.Количество;
				НоваяСтрока.Сумма 		  = СтрокаТЧ.Количество*НоваяСтрока.ЦенаНовая;
				НоваяСтрока.Склад         = Объект.СкладПолучатель;
				НоваяСтрока.ТипПереоценки = Перечисления.ТипыПереоценок.ПромоНачало;
				ВидНоменклатуры 		  =  ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаТЧ.Номенклатура,"ВидНоменклатуры"); 
				Записывать 				  = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;                         
	ДокПереоценка.Дата 			  = ТекущаяДата();	
	ДокПереоценка.ДатаНовыхЦен 	  = ТекущаяДата();	
	ДокПереоценка.ДатаОстатков	  = ТекущаяДата();	
	ДокПереоценка.ВидНоменклатуры = ВидНоменклатуры;
	Если Записывать тогда 
		ДокПереоценка.Записать(РежимЗаписиДокумента.Запись);
		Возврат ДокПереоценка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьДокПереоценку(ДокСсылка)
	
	ДокПереоценка = Неопределено;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПереоценкаТоваровНаСкладах.Ссылка КАК ДокСсылка
		|ИЗ
		|	Документ.ПереоценкаТоваровНаСкладах КАК ПереоценкаТоваровНаСкладах
		|ГДЕ
		|	ПереоценкаТоваровНаСкладах.ДокументПеремещение = &ДокументПеремещение";
	
	Запрос.УстановитьПараметр("ДокументПеремещение", ДокСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокПереоценка = ДокСсылка;
	КонецЦикла;
	
	Возврат ДокПереоценка;	
КонецФункции


&НаСервере
Функция ПолучитьТипПереценки(Номенклатура)
		ПравилоЦенообразования = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.МагазинПолучатель,"ПравилоЦенообразования");
		ВидЦены =   ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПравилоЦенообразования,"ВидЦен");
		
	
	ТипПереоценки = Неопределено;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЦеныНоменклатурыСрезПоследних.ТипПереоценки КАК ТипПереоценки
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&ТекДата,
		|			Номенклатура = &Номенклатура
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		|ГДЕ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТипПереоценки = ВыборкаДетальныеЗаписи.ТипПереоценки;
	КонецЦикла;
	Возврат ТипПереоценки;

КонецФункции



&НаСервере
Функция ПолучитьНовуюЦену(Номенклатура)
	
	Цена = 0;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействующиеЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
		|			&ТекДата,
		|			ОбъектЦенообразования = &Магазин
		|				И Номенклатура = &Номенклатура) КАК ДействующиеЦеныНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("Магазин", Объект.МагазинПолучатель);
	Запрос.УстановитьПараметр("ТекДата", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Цена = ВыборкаДетальныеЗаписи.Цена; 
	КонецЦикла;
	
	Возврат цена;	
	
КонецФункции

&НаСервере
Функция ПолучитьОпорнуюЦену(Номенклатура)
	
	Цена = 0;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОпорныеЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ОпорныеЦеныНоменклатуры.СрезПоследних(
		|			&ТекДата,
		|			Номенклатура = &Номенклатура
		|				И Магазин = &Магазин) КАК ОпорныеЦеныНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("Магазин", Объект.МагазинПолучатель);
	Запрос.УстановитьПараметр("ТекДата", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Цена = ВыборкаДетальныеЗаписи.Цена; 
	КонецЦикла;
	
	Возврат цена;	
	
КонецФункции


&НаСервере
Функция ПолучитьНомерПакетаДокумнтов(ДокСсылка)
	НомерПакета = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПакетыДокументов.НомерПакета КАК НомерПакета
		|ИЗ
		|	РегистрСведений.ПакетыДокументов КАК ПакетыДокументов
		|ГДЕ
		|	ПакетыДокументов.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", ДокСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл            
		НомерПакета = ВыборкаДетальныеЗаписи.НомерПакета;
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
	
	Возврат НомерПакета;
	
КонецФункции


