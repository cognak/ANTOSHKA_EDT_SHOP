///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НомерВПределахДня = ДатаДокументаСервер(Объект.Дата) - НачалоДня(ДатаДокументаСервер(Объект.Дата)) + 1;
	Иначе
		НомерВПределахДня = РассчитатьНомерВПределахДня(ДатаДокументаСервер(Объект.Дата), Объект.Ссылка);
		Объект.Дата = РассчитатьДатуДокумента(ДатаДокументаСервер(Объект.Дата), НомерВПределахДня);
	КонецЕсли;
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик механизма отображения дополнительных колонок номенклатуры
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,СостояниеДокумента,РазрешеноПроведение);
	
	НастроитьФормуПоДополнительнымПравам();
	
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.ОбъектПланирования) Тогда
		ДоступностьПравилаЦенообразования = ОбщегоНазначенияРТСервер.ПроверитьДоступКРеквизиту(Объект.ОбъектПланирования, "ПравилоЦенообразования"  , "Справочник.ПравилаЦенообразования");
		Если НЕ ДоступностьПравилаЦенообразования Тогда
			Объект.ОбъектПланирования = Неопределено;
		КонецЕсли;
	КонецЕсли;

	УправлениеДоступомРТ.ПриСозданииФормыНаСервере(ЭтотОбъект);	//	LNK 17.10.2019 14:30:01
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборПоТоварнымКатегориям.Форма.ПодборПоКатегориям" Тогда	
		ОбработкаВыбораПодборПоКатегориямНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	ОперацияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПланированияПриИзменении(Элемент)
	
	ДоступностьПравилаЦенообразования = ОбщегоНазначенияРТСервер.ПроверитьДоступКРеквизиту(Объект.ОбъектПланирования, "ПравилоЦенообразования"  , "Справочник.ПравилаЦенообразования");
	
	Если НЕ ДоступностьПравилаЦенообразования Тогда
		ТекстСообщения = НСтр("ru = 'Нет доступа к правилу ценообразования формата магазинов. Использование данного формата невозможно.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ОбъектПланирования");
		Объект.ОбъектПланирования = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВПределахДняПриИзменении(Элемент)
	
	Если НомерВПределахДня >= 86400 Тогда
		НомерВПределахДня = РассчитатьНомерВПределахДня(ДатаДокумента(Объект.Дата), Объект.Ссылка);
		Объект.Дата = РассчитатьДатуДокумента(ДатаДокумента(Объект.Дата), НомерВПределахДня);
		Возврат;
	КонецЕсли;
	
	Объект.Дата = РассчитатьДатуДокумента(ДатаДокумента(Объект.Дата), НомерВПределахДня);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьДатуДокумента(ДатаДокумента, НомерВПределахДня)
	
	Возврат НачалоДня(ДатаДокумента) + НомерВПределахДня - 1;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "Товары"

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ИДТекущейСтроки=Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	ТоварыНоменклатураПриИзмененииСервер(ИДТекущейСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦенПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если НЕ ВидЦенМожетИспользоваться(ТекущаяСтрока.ВидЦен) Тогда
		ТекущаяСтрока.ВидЦен = Неопределено;
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// Основной вариант подбора в документ
&НаКлиенте
Процедура ОткрытьПодборПоКатегориям(Команда)
	Отказ = Ложь;
	ПроверитьВозможностьПодбора(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НачальнаяСтраница", "СтраницаПодборТоваров");
	ПараметрыФормы.Вставить("ОбъектПланирования", Объект.ОбъектПланирования);
	ПараметрыФормы.Вставить("Операция", Объект.Операция);
	ПараметрыФормы.Вставить("Стадия", Объект.Стадия);
	ПараметрыФормы.Вставить("ДатаНачалаДействия", Объект.Дата);
	ПараметрыФормы.Вставить("ФормироватьДеревоПриОткрытии", Истина);
	ПараметрыФормы.Вставить("РежимПодбора", Истина);
	
	ОткрытьФорму("Обработка.ПодборПоТоварнымКатегориям.Форма.ПодборПоКатегориям", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	ПроверитьВозможностьПодбора(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", "изменение ассортимента");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИспользоватьОтборПоТипамНоменклатуры", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуЗапрашиватьКоличество", Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуОстаткиНаСкладах", Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуВвестиСерийныеНомера", Истина);
	ПараметрыФормы.Вставить("ЗапрашиватьКоличество", Ложь);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоОтбору(Команда)
	Отказ = Ложь;
	ПроверитьВозможностьПодбора(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	АдресВоВременномХранилище = ОткрытьФормуМодально("Обработка.ПодборТоваровПоОтбору.Форма.Форма", , ЭтотОбъект);
	Если ЗначениеЗаполнено(АдресВоВременномХранилище) Тогда
		ДобавитьТоварыИзВременногоХранилищаНаСервере(АдресВоВременномХранилище, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоАссортиментуФормата(Команда)
	ПараметрыЗаполнения=Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяКоманды","ЗаполнитьПоАссортиментуФормата");
	ЗаполнитьТоварыПоЗапросуНаКлиенте(ПараметрыЗаполнения);	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСкладскимОстаткамИОборотам(Команда)
	ПараметрыЗаполнения=Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяКоманды","ЗаполнитьПоСкладскимОстаткамИОборотам");
	ЗаполнитьТоварыПоЗапросуНаКлиенте(ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРольДляВсехТоваров(Команда)
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Роль не может быть заполнена'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	ВыбраннаяРоль = ОткрытьФормуМодально("Перечисление.РолиАссортимента.ФормаВыбора", , ЭтотОбъект);
	Если ВыбраннаяРоль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Стр ИЗ Объект.Товары Цикл
		Стр.РОльАссортимента=ВыбраннаяРоль;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидЦенДляВсехТоваров(Команда)
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Вид цен не может быть заполнен'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	ВыбранныйВидЦен = ОткрытьФормуМодально("Справочник.ВидыЦен.ФормаВыбора", , ЭтотОбъект);
	Если ВыбранныйВидЦен = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ВидЦенМожетИспользоваться(ВыбранныйВидЦен) Тогда
		Для Каждого Стр ИЗ Объект.Товары Цикл
			Стр.ВидЦен=ВыбранныйВидЦен;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам();
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
//	LNK 04.01.2017 13:54:53
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Номер.ТолькоПросмотр,
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьНомерДокумента);
	
КонецПроцедуры

// Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора
//	Параметры:
//	Отказ - Булево
&НаКлиенте
Процедура ПроверитьВозможностьПодбора(Отказ)
	
	ОчиститьСообщения();
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Отказ=Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Дата"" не заполнено'"), Объект, "Объект.Дата",,Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Стадия) Тогда
		Отказ=Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Операция"" не заполнено'"), Объект, "Объект.Операция",,Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектПланирования) Тогда
		Отказ=Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Формат магазина"" не заполнено'"), Объект, "Объект.ОбъектПланирования",,Отказ);
	КонецЕсли;
		
КонецПроцедуры

// Функция определяет режим заполнения табличной части "Товары"
&НаКлиенте
Функция ОпределитьРежимЗаполнения()
	ВыбранныйРежим=0;
	Если Объект.Товары.Количество()=0 Тогда
		ВыбранныйРежим=1;
	Иначе
		Ответ = Вопрос("Табличная часть содержит строки."+Символы.ПС+"Очистить табличную часть?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВыбранныйРежим=1;
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
			ВыбранныйРежим=2;
		КонецЕсли;
	КонецЕсли;
	Возврат ВыбранныйРежим;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТоварыПоЗапросуНаКлиенте(ПараметрыЗаполнения)
	
	РежимЗаполнения=ОпределитьРежимЗаполнения();
	Если РежимЗаполнения=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ИмяКоманды="ЗаполнитьПоАссортиментуФормата" Тогда
		ВыбранныйФормат = ОткрытьФормуМодально("Справочник.ФорматыМагазинов.ФормаВыбора", , ЭтотОбъект);
		Если ВыбранныйФормат = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПараметрыЗаполнения.Вставить("ОбъектПланирования",ВыбранныйФормат);
		ПараметрыЗаполнения.Вставить("Период",НачалоДня(Объект.Дата));
			
	ИначеЕсли ПараметрыЗаполнения.ИмяКоманды="ЗаполнитьПоСкладскимОстаткамИОборотам" Тогда
		ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
		ДатаПериода = Объект.Дата;
		ДиалогПериода.Период = Новый СтандартныйПериод(НачалоМесяца(ДатаПериода), ДатаПериода);
		Если ДиалогПериода.Редактировать() Тогда 
		    ВыбранныйПериод = ДиалогПериода.Период;
			ПараметрыЗаполнения.Вставить("ДатаНачала",НачалоДня(ВыбранныйПериод.ДатаНачала));
			ПараметрыЗаполнения.Вставить("ДатаКонца",КонецДня(ВыбранныйПериод.ДатаОкончания));
		Иначе
			Возврат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ОбъектПланирования) Тогда
			ВыбранныйФормат = ОткрытьФормуМодально("Справочник.ФорматыМагазинов.ФормаВыбора", , ЭтотОбъект);
			Если ВыбранныйФормат = Неопределено Тогда
				Возврат;
			КонецЕсли;
			Объект.ОбъектПланирования = ВыбранныйФормат;
		КонецЕсли;
		ПараметрыЗаполнения.Вставить("ФорматМагазина",Объект.ОбъектПланирования);
	КонецЕсли;
	ПараметрыЗаполнения.Вставить("РежимЗаполнения",РежимЗаполнения);
	ЗаполнитьТоварыПоЗапросуНаСервере(ПараметрыЗаполнения);
КонецПроцедуры

// Процедура заполняет товары на основании данных запроса
// запрос формируется в зависимости от имени команды заполнения
// Параметры: 
//  	ПараметрыЗаполнения - структура параметров для выполнения команды
&НаСервере
Процедура ЗаполнитьТоварыПоЗапросуНаСервере(ПараметрыЗаполнения)
	
	Если ПараметрыЗаполнения.РежимЗаполнения=1 Тогда
		Объект.Товары.Очистить();
	Иначе
		ПараметрыЗаполнения.Вставить("МассивТоваров",Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	КонецЕсли;
	//
	Запрос=Новый Запрос;
	ТекстЗапроса=СформироватьТекстДляКоманды(ПараметрыЗаполнения.ИмяКоманды,ПараметрыЗаполнения.РежимЗаполнения);
	Запрос.Текст=ТекстЗапроса;
	//
	Для Каждого Параметр ИЗ ПараметрыЗаполнения Цикл
		Если Параметр.Ключ="РежимЗаполнения" ИЛИ Параметр.Ключ="ИмяКоманды" Тогда
			Продолжить;
		КонецЕсли;
		Запрос.УстановитьПараметр(Параметр.Ключ,Параметр.Значение);
	КонецЦикла;
	Если ПараметрыЗаполнения.ИмяКоманды="ЗаполнитьПоСкладскимОстаткамИОборотам" Тогда
		Запрос.УстановитьПараметр("ВидЦенФормата", Объект.ОбъектПланирования.ПравилоЦенообразования.ВидЦен);
		Запрос.УстановитьПараметр("ПравилоЦенообразования", Объект.ОбъектПланирования.ПравилоЦенообразования);
	КонецЕсли;
	//
	Результат=Запрос.Выполнить();
	Выборка=Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "Номенклатура, РольАссортимента, ВидЦен");
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирует текст запроса, используемого для заполнения товаров
&НаСервере
Функция СформироватьТекстДляКоманды(ИмяКомандыЗаполнения,РежимЗаполнения)
	
	ТекстЗапроса="";
	
	Если ИмяКомандыЗаполнения="ЗаполнитьПоСкладскимОстаткамИОборотам" Тогда
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		             |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
		             |	ЗНАЧЕНИЕ(Перечисление.РолиАссортимента.ДополнительныйАссортимент) КАК РольАссортимента,
		             |	ЕСТЬNULL(ПравилаЦенообразованияЦеновыеГруппы.ВидЦен, &ВидЦенФормата) КАК ВидЦен
		             |ИЗ
		             |	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&ДатаНачала, &ДатаКонца, , , Склад.Магазин.ФорматМагазина = &ФорматМагазина"+?(РежимЗаполнения=2," И (НЕ Номенклатура В (&МассивТоваров))","")+") КАК ТоварыНаСкладахОстаткиИОбороты
		             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ПравилаЦенообразованияЦеновыеГруппы
		             |		ПО ТоварыНаСкладахОстаткиИОбороты.Номенклатура.ЦеноваяГруппа = ПравилаЦенообразованияЦеновыеГруппы.ЦеноваяГруппа
		             |			И (ПравилаЦенообразованияЦеновыеГруппы.Ссылка = &ПравилоЦенообразования)
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
		             |	ЕСТЬNULL(ПравилаЦенообразованияЦеновыеГруппы.ВидЦен, &ВидЦенФормата)
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Наименование";
		
	ИначеЕсли ИмяКомандыЗаполнения="ЗаполнитьПоАссортиментуФормата" Тогда
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		             |	Ассортимент.Номенклатура КАК Номенклатура,
		             |	Ассортимент.РольАссортимента КАК РольАссортимента,
		             |	Ассортимент.ВидЦен КАК ВидЦен
		             |ИЗ
		             |	РегистрСведений.Ассортимент.СрезПоследних(КОНЕЦПЕРИОДА(&Период, ДЕНЬ),
					 |												ОбъектПланирования = &ОбъектПланирования
					 |												"+?(РежимЗаполнения=2,"И НЕ Номенклатура В (&МассивТоваров)","")+"
					 |		) КАК Ассортимент
		             |ГДЕ
		             |	Ассортимент.РазрешеныЗакупки
		             |УПОРЯДОЧИТЬ ПО
		             |	Ассортимент.Номенклатура.Наименование";
	Иначе //такой команды не предусмотрено - надо вызвать исключение
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Неизвестный вариант заполнения: %1'"),
									ИмяКомандыЗаполнения);
		ВызватьИсключение(ТекстСообщенияОбОшибке);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура заполняет товары из подбора
// Параметры: 
//  	ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение.АдресТоваровВХранилище) Тогда
		ДобавитьТоварыИзВременногоХранилищаНаСервере(ВыбранноеЗначение.АдресТоваровВХранилище,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет товары из подбора по категориям
// Параметры: 
//  	ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборПокатегориямНаСервере(ВыбранноеЗначение)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение.АдресТоваровВХранилище) Тогда
		ДобавитьТоварыИзВременногоХранилищаНаСервере(ВыбранноеЗначение.АдресТоваровВХранилище, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТоварыИзВременногоХранилищаНаСервере(АдресВоВременномХранилище, ДополнятьТаблицуТоваров)
	
	Если ДополнятьТаблицуТоваров Тогда
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
		ТаблицаТоваровДополненная = ТаблицаТоваровДополненнаяАссортиментомОбъекта(ТаблицаТоваров);
	Иначе
		ТаблицаТоваровДополненная = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваровДополненная Цикл
		ПараметрыОтбора = Новый Структура("Номенклатура", СтрокаТовара.Номенклатура);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара, "Номенклатура, РольАссортимента, ВидЦен");
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.РольАссортимента) Тогда
				НоваяСтрока.РольАссортимента = Перечисления.РолиАссортимента.ДополнительныйАссортимент;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.ВидЦен) Тогда
				НоваяСтрока.ВидЦен = Объект.ОбъектПланирования.ПравилоЦенообразования.ВидЦен;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция дополняет таблицу товаров данными регистра "Ассортимент" для текущего формата магазинов
// установленными на дату начала действия
// Параметры: 
//  	ТаблицаТоваров - ТаблицаЗначений
&НаСервере
Функция ТаблицаТоваровДополненнаяАссортиментомОбъекта(ТаблицаТоваров)
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(Ассортимент.РольАссортимента, ЗНАЧЕНИЕ(Перечисление.РолиАссортимента.ДополнительныйАссортимент)) КАК РольАссортимента,
	|	ЕСТЬNULL(Ассортимент.ВидЦен, &ВидЦенФормата) КАК ВидЦен
	|ИЗ
	|	втТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент.СрезПоследних(КОНЕЦПЕРИОДА(&НаДату, ДЕНЬ), ОбъектПланирования = &ОбъектПланирования) КАК Ассортимент
	|		ПО (Ассортимент.Номенклатура = Товары.Номенклатура)";
	Запрос.МенеджерВременныхТаблиц=МенеджерВТ;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("НаДату", Объект.Дата);
	Запрос.УстановитьПараметр("ОбъектПланирования", Объект.ОбъектПланирования);
	ВидЦенФормата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ОбъектПланирования, Новый Структура("ВидЦен", "ПравилоЦенообразования.ВидЦен")).ВидЦен;
	Запрос.УстановитьПараметр("ВидЦенФормата", ВидЦенФормата);
	ТаблицаТоваровДополненная = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаТоваровДополненная;
КонецФункции

&НаСервере
Процедура ОперацияПриИзмененииСервер()
	
	Если Объект.Операция = Перечисления.ОперацииИзмененияАссортимента.ВводВАссортимент
		ИЛИ Объект.Операция = Перечисления.ОперацииИзмененияАссортимента.ИзменениеСостоянияАссортимента Тогда
		Объект.Стадия=Перечисления.СтадииАссортимента.РазрешеныЗакупкиИПродажи;
	ИначеЕсли Объект.Операция = Перечисления.ОперацииИзмененияАссортимента.ВводВАссортиментСОтсрочкойНачалаПродаж Тогда
		Объект.Стадия=Перечисления.СтадииАссортимента.РазрешеныТолькоЗакупки;
	ИначеЕсли Объект.Операция = Перечисления.ОперацииИзмененияАссортимента.ВыводИзАссортимента Тогда
		Объект.Стадия=Перечисления.СтадииАссортимента.РазрешеныТолькоПродажи;
	ИначеЕсли Объект.Операция = Перечисления.ОперацииИзмененияАссортимента.ПереносВАрхивОтзыв Тогда
		Объект.Стадия=Перечисления.СтадииАссортимента.ЗапрещеныЗакупкиИПродажи;
	Иначе
		Объект.Стадия=Перечисления.СтадииАссортимента.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииСервер(ИДТекущейСтроки)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИДТекущейСтроки);
	СтруктураАссортимента = АссортиментСервер.СтруктураСостоянияАссортиментаТовараВФормате(ТекущаяСтрока.Номенклатура,
																						 Объект.ОбъектПланирования,
																						 Объект.Дата);
	
	ТекущаяСтрока.РольАссортимента = ?(ЗначениеЗаполнено(СтруктураАссортимента.РольАссортимента),
															СтруктураАссортимента.РольАссортимента,
															Перечисления.РолиАссортимента.ДополнительныйАссортимент);
	
	Если ЗначениеЗаполнено(СтруктураАссортимента.ВидЦен) Тогда
		ТекущаяСтрока.ВидЦен = СтруктураАссортимента.ВидЦен;
	Иначе
		ТекущаяСтрока.ВидЦен = ВидЦенПоПравиламФормата(ТекущаяСтрока.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВидЦенПоПравиламФормата(Номенклатура)
	ВидЦен = Объект.ОбъектПланирования.ПравилоЦенообразования.ВидЦен;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПравилаЦенообразованияЦеновыеГруппы.ВидЦен КАК ВидЦен
	               |ИЗ
	               |	Справочник.Номенклатура КАК СправочникНоменклатура
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ПравилаЦенообразованияЦеновыеГруппы
	               |		ПО СправочникНоменклатура.ЦеноваяГруппа = ПравилаЦенообразованияЦеновыеГруппы.ЦеноваяГруппа
	               |		И ПравилаЦенообразованияЦеновыеГруппы.Ссылка = &ПравилоЦенообразования
	               |ГДЕ
	               |	СправочникНоменклатура.Ссылка = &Номенклатура";
	Запрос.УстановитьПараметр("ПравилоЦенообразования", Объект.ОбъектПланирования.ПравилоЦенообразования);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ВидЦен = Выборка.ВидЦен;
	КонецЕсли;
	Возврат ВидЦен;
КонецФункции

&НаСервере
Функция ВидЦенМожетИспользоваться(ВидЦен)
	
	Результат = Истина;
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		РеквизитыВидаЦен = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидЦен, Новый Структура("ИспользоватьПриПродаже, ЦенаВключаетНДС"));
		Если НЕ РеквизитыВидаЦен.ИспользоватьПриПродаже Тогда
			ТекстСообщения = НСтр("ru = 'Можно назначить только виды цен, используемые при продаже.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Результат = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ОбъектПланирования) Тогда
			РеквизитыОбъектаПланирования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ОбъектПланирования, Новый Структура("ЦенаВключаетНДС", "ПравилоЦенообразования.ЦенаВключаетНДС"));
			Если РеквизитыВидаЦен.ЦенаВключаетНДС <> РеквизитыОбъектаПланирования.ЦенаВключаетНДС Тогда
				ТекстСообщения = НСтр("ru = 'Метод учета НДС выбранного вида цен должен соответствовать методу учета НДС в правилах ценообразования формата.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Результат = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	НомерВПределахДня = РассчитатьНомерВПределахДня(ДатаДокумента(Объект.Дата), Объект.Ссылка);
	Объект.Дата = РассчитатьДатуДокумента(ДатаДокумента(Объект.Дата), НомерВПределахДня);
	
КонецПроцедуры

&НаКлиенте
Функция ДатаДокумента(Дата)
	
	Возврат ?(ЗначениеЗаполнено(Дата), Дата, НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()));
	
КонецФункции

&НаСервереБезКонтекста
Функция ДатаДокументаСервер(Дата)
	
	Возврат ?(ЗначениеЗаполнено(Дата), Дата, НачалоДня(ТекущаяДатаСеанса()));
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьНомерВПределахДня(ДатаДокумента, Ссылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ИзменениеАссортимента.Дата) КАК Дата
	|ИЗ
	|	Документ.ИзменениеАссортимента КАК ИзменениеАссортимента
	|ГДЕ
	|	ИзменениеАссортимента.Ссылка <> &Ссылка
	|	И ИзменениеАссортимента.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаДокумента, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаДокумента, ДЕНЬ)");
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() И Выборка.Дата <> Null Тогда
		// Начало дня - 0 секунда. Так как как минимум один документ уже существует, то
		// нужно прибавить 1 (0 секунда соответствует номеру документа 1).
		// Так же прибавим единицу, так как нам требуется номер слудующего документа.
		Возврат Выборка.Дата - НачалоДня(ДатаДокумента) + 2;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
