///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
		
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	
	Если ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда

		Элементы.ДействующиеЦеныНоменклатуры.ТолькоПросмотр = Ложь;
		Элементы.ДенежныеСредстваККМ.ТолькоПросмотр = Ложь;
		Элементы.ДенежныеСредстваНаличные.ТолькоПросмотр = Ложь;
		Элементы.СебестоимостьНоменклатуры.ТолькоПросмотр = Ложь;
		Элементы.ТоварыКПоступлению.ТолькоПросмотр = Ложь;
		Элементы.ТоварыНаСкладах.ТолькоПросмотр = Ложь;
		Элементы.ТоварыОрганизаций.ТолькоПросмотр = Ложь;
		Элементы.ЦеныНоменклатуры.ТолькоПросмотр = Ложь;
		Элементы.ТоварыКОтгрузке.ТолькоПросмотр = Ложь;

	КонецЕсли;

	УправлениеДоступомРТ.ПриСозданииФормыНаСервере(ЭтотОбъект);	//	LNK 17.10.2019 14:30:01

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)


КонецПроцедуры

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/
//	Процедуры загрузки данных из файла
//	---------------------------------------------------------------------------------------

&НаКлиенте
Процедура ПолноеИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.ПолноеИмяФайла = ПолноеИмяФайла;
//	Диалог.ПредварительныйПросмотр = Истина;
	Диалог.Фильтр = "Все файлы (*.*)|*.*";
	Если Диалог.Выбрать() Тогда
		ПолноеИмяФайла = Диалог.ПолноеИмяФайла
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолноеИмяФайлаОчистка(Элемент, СтандартнаяОбработка)

	ДанныеВнешнегоФайла.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеВнешнегоФайла(Команда)

	Если ПустаяСтрока(ПолноеИмяФайла)	Тогда

		ПоказатьОповещениеПользователя("Не указано имя файла для загрузки!",,, БиблиотекаКартинок.Ошибка32);
		Возврат

	КонецЕсли;
	
	ДанныеВнешнегоФайла.Очистить();

	ПерваяСтрока      = 1;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПолноеИмяФайла);

	Для НомерСтроки = ПерваяСтрока по ТекстовыйДокумент.КоличествоСтрок() Цикл

		ОбработкаПрерыванияПользователя();

		СоставСтроки  = ОбщегоНазначенияКлиентСервер.lx_FillValueList(, ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки),, ";",, Ложь,);
		СтрокаТаблицы = ДанныеВнешнегоФайла.Добавить();

		СтрокаТаблицы.НомерСтроки = НомерСтроки - ПерваяСтрока + 1;
		СтрокаТаблицы.IDN         = СоставСтроки[0];
		СтрокаТаблицы.Количество  = СоставСтроки[1]; 
		СтрокаТаблицы.Сумма       = Число(СоставСтроки[2]) * ?(СтрокаТаблицы.Количество < 0, -1, 1); 

		Если НЕ СтрокаТаблицы.Количество = 0 тогда

			СтрокаТаблицы.Цена = Макс(СтрокаТаблицы.Сумма, -СтрокаТаблицы.Сумма) / Макс(СтрокаТаблицы.Количество, -СтрокаТаблицы.Количество);

		КонецЕсли;

		Если НомерСтроки % 500 = 0 Тогда

			ПоказатьОповещениеПользователя("загружено " + Формат(ДанныеВнешнегоФайла.Количество(), "ЧН=0; ЧГ=") + " строк.");

		КонецЕсли;

	КонецЦикла;

	ПоказатьОповещениеПользователя("сопоставление данных по IDN",, "Выполняется сопоставление полученных кодов с информацией в базе данных", БиблиотекаКартинок.Информация32);
	УточнитьДанныеВнешнегоФайла();

	ПоказатьОповещениеПользователя("Загрузка завершена!",, "Всего загружено " + Формат(ДанныеВнешнегоФайла.Количество(), "ЧН=0; ЧГ=") + " строк.", БиблиотекаКартинок.Информация32);

КонецПроцедуры

&НаСервере
Процедура УточнитьДанныеВнешнегоФайла()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВнешниеДанные.НомерСтроки,
	|	ВнешниеДанные.IDN,
	|	ВнешниеДанные.Количество,
	|	ВнешниеДанные.Цена,
	|	ВнешниеДанные.Сумма
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ВнешниеДанные КАК ВнешниеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.НомерСтроки КАК НомерСтроки,
	|	Источник.IDN,
	|	ТаблицаСправочник.Ссылка КАК Номенклатура,
	|	Источник.Количество,
	|	Источник.Цена,
	|	Источник.Сумма
	|ИЗ
	|	Источник КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
	|		ПО Источник.IDN = ТаблицаСправочник.IDN
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	);
	Запрос.УстановитьПараметр("ВнешниеДанные", ДанныеВнешнегоФайла.Выгрузить());

	ДанныеВнешнегоФайла.Загрузить(Запрос.Выполнить().Выгрузить());

	ПустыеСтроки = ДанныеВнешнегоФайла.НайтиСтроки(Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка()));

	Для каждого СтрокаДанных Из ПустыеСтроки Цикл

		Сообщить("в строке " + Формат(СтрокаДанных.НомерСтроки, "ЧГ=") + " товар по коду [" + СокрЛП(СтрокаДанных.IDN) + "] НЕ найден.");

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокумент(Команда)

	ЗаполнитьДокументНаСервере();

	ПоказатьОповещениеПользователя("Заполнение закончено",
	, "Заполнены табличные части:" + Символы.ПС
	+ "«ТоварыНаСкладах» = " + Формат(Объект.ТоварыНаСкладах.Количество(), "ЧН=0; ЧГ=") + " строк" + Символы.ПС
	+ "«ДействующиеЦеныНоменклатуры» = " + Формат(Объект.ДействующиеЦеныНоменклатуры.Количество(), "ЧН=0; ЧГ=") + " строк" + Символы.ПС
	+ "«ЦеныНоменклатуры» = " + Формат(Объект.ЦеныНоменклатуры.Количество(), "ЧН=0; ЧГ=") + " строк", БиблиотекаКартинок.Информация32);

	Элементы.ТоварыНаСкладах.Обновить();
	Элементы.ДействующиеЦеныНоменклатуры.Обновить();
	Элементы.ЦеныНоменклатуры.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОтсутствующиеТоварныеПозиции(Команда)

	ПроверитьОтсутствующиеТоварныеПозицииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПроверитьОтсутствующиеТоварныеПозицииНаСервере()

	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВнешниеДанные.НомерСтроки,
		|	ВнешниеДанные.IDN
		|ПОМЕСТИТЬ Источник
		|ИЗ
		|	&ВнешниеДанные КАК ВнешниеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	Источник.НомерСтроки КАК НомерСтроки,
		|	Источник.IDN,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура
		|ИЗ
		|	Источник КАК Источник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаСправочник
		|		ПО Источник.IDN = ТаблицаСправочник.IDN
		|ГДЕ
		|	ТаблицаСправочник.Ссылка ЕСТЬ NULL 
		|	И НЕ Источник.IDN В (&СписокОтработанныхКодов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		);
		Запрос.УстановитьПараметр("ВнешниеДанные", ДанныеВнешнегоФайла.Выгрузить(Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка())));
		Запрос.УстановитьПараметр("СписокОтработанныхКодов", Новый Массив);

		Пока Истина Цикл

			ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
			Запрос.УстановитьПараметр("СписокОтработанныхКодов", ТаблицаЗначений.ВыгрузитьКолонку("IDN"));

			Если ТаблицаЗначений.Количество() = 0 Тогда

				Прервать;

			Иначе

				НомерСтроки = 0;

				Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

					НомерСтроки = НомерСтроки + 1;
					СтрокаТаблицы.НомерСтроки = НомерСтроки;

				КонецЦикла;

				ТоварыПодготовленные = Новый ПостроительЗапроса;
				ТоварыПодготовленные.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаЗначений);
				ТоварыПодготовленные.Выполнить();

				ПараметрыВыборки = Новый Структура(
					"ВыборкаДанных,
					| СписокКодов"
					, ТоварыПодготовленные.Результат.Выбрать()
					, ВнешниеИсточники.ПолучитьСтрокуIDNТоваров(ТаблицаЗначений.ВыгрузитьКолонку("IDN")));

				ВнешниеИсточники.УстановитьНоменклатуруВТаблицеПодготовки(ТаблицаЗначений, Истина, Новый Массив, ПараметрыВыборки);

			КонецЕсли;

		КонецЦикла;

	Иначе

		Сообщить("Операция доступна только в ЦБ");

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументНаСервере()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаУзлы.Магазин КАК Магазин,
	|	ТаблицаУзлы.Магазин.ПравилоЦенообразования.ВидЦен КАК ВидЦены,
	|	ТаблицаУзлы.Магазин.СкладПоступления КАК Склад
	|ИЗ
	|	ПланОбмена.ПоМагазину КАК ТаблицаУзлы
	|ГДЕ
	|	ТаблицаУзлы.Ссылка = &Узел"
	);
	Запрос.УстановитьПараметр("Узел", Объект.Узел);
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();

	Объект.ТоварыНаСкладах.Очистить();
	Объект.ДействующиеЦеныНоменклатуры.Очистить();
	Объект.ЦеныНоменклатуры.Очистить();

	Для Каждого СтрокаДанных из ДанныеВнешнегоФайла цикл

		СтрокаТабличнойЧасти = Объект.ТоварыНаСкладах.Добавить();
		СтрокаТабличнойЧасти.Склад        = Реквизиты.Склад;			
		СтрокаТабличнойЧасти.Номенклатура = СтрокаДанных.Номенклатура;
		СтрокаТабличнойЧасти.Количество   = СтрокаДанных.Количество;
		
		Если НЕ СтрокаДанных.Цена = 0 Тогда

			СтрокаТабличнойЧасти = Объект.ДействующиеЦеныНоменклатуры.Добавить();
			СтрокаТабличнойЧасти.Магазин      = Реквизиты.Магазин;			
			СтрокаТабличнойЧасти.Номенклатура = СтрокаДанных.Номенклатура;
			СтрокаТабличнойЧасти.Цена         = СтрокаДанных.Цена;
			
			//СтрокаТабличнойЧасти = Объект.ЦеныНоменклатуры.Добавить();
			//СтрокаТабличнойЧасти.ВидЦены      = Реквизиты.ВидЦены;
			//СтрокаТабличнойЧасти.Номенклатура = СтрокаДанных.Номенклатура;
			//СтрокаТабличнойЧасти.Цена         = СтрокаДанных.Цена;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура УзелПриИзменении(Элемент)

	УзелПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура УзелПриИзмененииНаСервере()

	Объект.КодУзлаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Узел, "Код");

КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
