///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, Режим);
	
	// Инициализация данных документа
	Документы.ПриходныйКассовыйОрдер.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Движения по денежным средствам.
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваНаличные(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваКПоступлениюНаличные(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипОснования = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипОснования <> Тип("Неопределено") И Документы.ТипВсеСсылки().СодержитТип(ТипОснования) Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		
		Если ТипОснования = Тип("ДокументСсылка.РеализацияТоваров")
			ИЛИ ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		Тогда
			
			ЗаполнитьПоРеализацияТоваровВозвратТоваровПоставщику(
				ДанныеЗаполнения,
				ДанныеЗаполнения
			);
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			ЗаполнитьПоРасходномуКассовомуОрдеру(
				ДанныеЗаполнения,
				ДанныеЗаполнения
			);
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВыемкаДенежныхСредствИзКассыККМ") Тогда
			
			ЗаполнитьПоВыемкеДенежныхСредствИзКассыККМ(ДанныеЗаполнения, ДанныеЗаполнения);
			
		КонецЕсли;

	ИначеЕсли ТипОснования = Тип("Структура") Тогда
		
		// Заполнение Организации и Кассы из данных заполнения или из ХранилищеОбщихНастроек
		// Значения ХранилищеОбщихНастроек заполняют поля отборов на форме списка документа
		// Если ХранилищеОбщихНастроек не содержит заполненных значений,
		// в этом случае данные заполняются из ДанныеЗаполнения
		// Входящие параметры из данных заполнений или из ХранилищеОбщихНастроек не могут содержать
		// Организацию отличную от организации владельца кассы
		
		Если ДанныеЗаполнения.Свойство("Организация", Организация) И НЕ Организация.Пустая() Тогда
		
		//	LNK 27.09.2017
			ДанныеЗаполнения.Свойство("Касса", Касса);
		
		Иначе

			Касса = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущаяКасса",);
			Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущаяОрганизация",);
			Если НЕ ЗначениеЗаполнено(Организация) Тогда
				Если ДанныеЗаполнения.Свойство("Организация", Организация) И НЕ ЗначениеЗаполнено(Организация) Тогда
					Если ЗначениеЗаполнено(Пользователи.ТекущийПользователь()) Тогда
						Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПользователяПоУмолчанию(Пользователи.ТекущийПользователь());
						Если ЗначениеЗаполнено(Организация) Тогда
							ДанныеЗаполнения.Вставить("ОрганизацияИзНастроекПользователя");
						Иначе
							Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
						КонецЕсли;
					Иначе
						Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	//	LNK 20.02.2017 13:00:50
		Если НЕ ЗначениеЗаполнено(Касса) И ЗначениеЗаполнено(Организация) Тогда

			Касса = ФинансыВызовСервера.ПолучитьКассуПоУмолчанию(Организация);

		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Касса)	Тогда

		//	... контрольный
			ДанныеЗаполнения.Свойство("Касса", Касса);

		КонецЕсли;
		
		// Заполнение банковского счета по умолчанию, если заполнена организация
		
		Если ДанныеЗаполнения.Свойство("ХозяйственнаяОперация")
			И ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка
			И ЗначениеЗаполнено(Организация)
		Тогда

			ДанныеЗаполнения.Вставить("БанковскийСчет");
			ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(Перечисления.ФормыОплаты.Безналичная, ДанныеЗаполнения);

		КонецЕсли;

	Иначе

		Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация, Пользователи.ТекущийПользователь());

		Если ЗначениеЗаполнено(Организация) Тогда

		//	LNK 20.02.2017 11:39:24
			Касса = ФинансыВызовСервера.ПолучитьКассуПоУмолчанию(Организация);

		КонецЕсли;

	КонецЕсли;

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("СуммаДокумента")
	Тогда

		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;

		Если СуммаДокумента <> 0 Тогда

			МассивДокументов = РасшифровкаПлатежа.Выгрузить(,"ДокументРасчетовСКонтрагентом").ВыгрузитьКолонку("ДокументРасчетовСКонтрагентом");
			МассивДокументов.Добавить(ДокументОснование);
			ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(
				СуммаДокумента,
				МассивДокументов,
				Ложь // ДобавлятьТекстВТомЧисле
			);

		КонецЕсли;

	КонецЕсли;

	ИнициализироватьДокумент(ДанныеЗаполнения);

КонецПроцедуры

// В обработчике события ОбработкаПроверкиЗаполнения документа выполняются следующие действия:
// - Устанавливает проверку заполнения реквизитов формы и табличной части "Расшифровка платежа".
// - Проверка соответствия организации документа и организации кассы ККМ.
// - При поступлении денег из банка, проверяется на соответствие организация документа и организация банковского счета.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ПриходныйКассовыйОрдер.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ОбщегоНазначенияРТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов
	);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	ДенежныеСредстваСерверПривилегированный.ПроверитьЗаполнениеРасшифровкиПлатежа(
		ЭтотОбъект,
		СуммаДокумента,
		ХозяйственнаяОперация,
		Отказ
	);
	ДенежныеСредстваСервер.ПроверитьКассуККМ(
		ЭтотОбъект,
		Отказ
	);
	ПроверитьБанковскийСчет(Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
//	LNK 16.02.2017 14:33:05
	ЗаполнениеОбъектовСобытия.ОбщиеДействияПередЗаписью(ЭтотОбъект, Отказ);
	
	Если ОбменДанными.Загрузка Тогда

		Возврат;

	КонецЕсли;
	
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый"   , ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	ДополнительныеСвойства.Вставить("Ссылка"     , ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Проведен, ПометкаУдаления", Ложь));	//	LNK 18.02.2019 11:56:52

	Если НЕ Проводился Тогда

	//	LNK 23.05.2019 13:16:00	
		Проводился = ДополнительныеСвойства.Ссылка.Проведен;

	КонецЕсли;
	
//	LNK 26.09.2016 09:02:34
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ЛОЖЬ И НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() И НЕ ЭтоНовый() Тогда

		Если ВнешниеИсточникиСобытия.ПередачаNavision(Ссылка) Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ «" + СокрЛП(Ссылка) + "» учтён в КСУ Navision! Изменения запрещены. Отказано.", Ссылка,,, Отказ);
			Возврат;

		КонецЕсли;

	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НомерОрдера) ИЛИ ЭтоНовый() Тогда

		СформироватьНомерОрдера();

	КонецЕсли;
	
	Если НЕ РасшифровкаПлатежа.Количество() = 0  И ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации
		//И (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы
		//ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
	Тогда
		РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ПустаяСтрока(ВТомЧислеНДС) Тогда
			МассивДокументов = РасшифровкаПлатежа.Выгрузить(, "ДокументРасчетовСКонтрагентом").ВыгрузитьКолонку("ДокументРасчетовСКонтрагентом");
			МассивДокументов.Добавить(ДокументОснование);
			ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(
				СуммаДокумента,
				МассивДокументов,
				Ложь // ДобавлятьТекстВТомЧисле
			);
		КонецЕсли;
	КонецЕсли;

//	LNK 20.02.2017 13:55:15
	Основание  = СокрЛП(Основание);
	ПринятоОт  = СокрЛП(ПринятоОт);
	Приложение = СокрЛП(Приложение);
	
КонецПроцедуры

//	LNK 26.09.2016 09:03:10
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда

		Возврат;
		
	КонецЕсли;

//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "РегистрацияПередачиВNavision", Ложь) Тогда

		ВнешниеИсточникиСобытия.УстановитьПереданоNavision(Ссылка
			, ОбщегоНазначенияРТСервер.ПолучитьМагазиныПоОбъекту(Ссылка), Перечисления.ВидыПередачиNavision.ПереданВNavision,,,, Истина);

	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	СуммаДокумента = 0;
	РасшифровкаПлатежа.Очистить();
	НомерОрдера = "";
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура проверяет организацию банковского счета на соответствие организации выбранной в документе.
//
Процедура ПроверитьБанковскийСчет(Отказ)
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка
	   И ЗначениеЗаполнено(Касса)
	   И ЗначениеЗаполнено(БанковскийСчет)
	Тогда
		
		РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.РеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
		Если Организация <> РеквизитыСчета.Организация Тогда
			Текст = НСтр("ru = 'Организация счета не соответствует организации документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"БанковскийСчет",
				,
				Отказ
			);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;

	Если ОбщегоНазначенияРТ.НужноЗаполнитьСписокРегистровДляКонтроля(ДополнительныеСвойства.РежимЗаписи, Дата) Тогда

		Массив.Добавить(Движения.ДенежныеСредстваНаличные);

		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ Тогда

			Массив.Добавить(Движения.ДенежныеСредстваКПоступлениюНаличные);

		КонецЕсли;
		
	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

Процедура ЗаполнитьПоВыемкеДенежныхСредствИзКассыККМ(Знач ДокументОснование, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДанныеДокумента.КассаККМ.Магазин.КассаМагазина КАК Касса,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.КассаККМ КАК КассаККМ,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ЕСТЬNULL(ДенежныеСредстваКПоступлению.СуммаОстаток, 0) КАК СуммаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ) КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.КассаККМ.Магазин КАК Магазин
	|ИЗ
	|	Документ.ВыемкаДенежныхСредствИзКассыККМ КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваКПоступлениюНаличные.Остатки(, Документ = &Ссылка) КАК ДенежныеСредстваКПоступлению
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка"
	);
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить приходный кассовый ордер на основании документа %1'"),
			ДокументОснование
		);
		ВызватьИсключение Текст;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(Перечисления.ФормыОплаты.Наличная, ДанныеЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоРасходномуКассовомуОрдеру(Знач ДокументОснование, ДанныеЗаполнения)
	Если ДокументОснование.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
		ИЛИ ДокументОснование.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию Тогда
		// Заполним данные шапки документа.
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу) ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы)
		|	КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию) ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
		|	КОНЕЦ КАК ХозяйственнаяОперация,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу)
		|		ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию)
		|	ТОГДА
		|		Документ.КассаПолучатель
		|	ИНАЧЕ
		|		Неопределено
		|	КОНЕЦ КАК Касса,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию) ТОГДА
		|		Документ.КассаПолучатель.Владелец
		|	ИНАЧЕ
		|		ДанныеДокумента.Организация
		|	КОНЕЦ КАК Организация,
		
		|	ДанныеДокумента.Ссылка КАК ДокументОснование,
		|
		|	ЕСТЬNULL(ДенежныеСредстваКПоступлению.СуммаОстаток, 0.00) КАК СуммаДокумента
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрНакопления.ДенежныеСредстваКПоступлениюНаличные.Остатки(,
		|			Документ = &Ссылка
		|		) КАК ДенежныеСредстваКПоступлению
		|	ПО
		|		Истина
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|	И ДанныеДокумента.ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию)
		|	)
		|	И НЕ ДанныеДокумента.КассаПолучатель.КассаУправляющейСистемы
		|");
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
		
		Если РезультатЗапроса.Пустой() Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не требуется вводить приходный кассовый ордер на основании документа %1'"),
				ДокументОснование
			);
			ВызватьИсключение Текст;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
			
		КонецЕсли;
	ИначеЕсли ДокументОснование.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить приходный кассовый ордер на основании документа %1'"),
			ДокументОснование
		);
		ВызватьИсключение Текст;
	Иначе
		Если ДокументОснование.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
			ДанныеЗаполнения = Новый Структура();
			ДанныеЗаполнения.Вставить("Касса", ДокументОснование.Касса);
			ДанныеЗаполнения.Вставить("Организация", ДокументОснование.Организация);
			ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснование);
			ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
			ДанныеЗаполнения.Вставить("Контрагент", ДокументОснование.Контрагент);
			ДанныеЗаполнения.Вставить("СуммаДокумента", ДокументОснование.РасшифровкаПлатежа.Итог("Сумма"));
			
			СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация);
			СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = ДокументОснование;
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
			СтрокаПлатеж.Сумма                         = ДокументОснование.РасшифровкаПлатежа.Итог("Сумма");
			
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не требуется вводить приходный кассовый ордер на основании документа %1'"),
				ДокументОснование
			);
			ВызватьИсключение Текст;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоРеализацияТоваровВозвратТоваровПоставщику(Знач ДокументОснование, ДанныеЗаполнения)
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДокументОснования.Ссылка                                КАК ДокументОснование,
	|	МАКСИМУМ(ДокументОснования.Контрагент)                  КАК Контрагент,
	|	МАКСИМУМ(ДокументОснования.Организация)                 КАК Организация,
	|	МАКСИМУМ(ДокументОснования.Магазин)                     КАК Магазин,
	|	МАКСИМУМ(ДокументОснования.ЦенаВключаетНДС)             КАК ЦенаВключаетНДС,
	|	СУММА(ЕСТЬNULL(ТоварыДокументОснования.Сумма, ДокументОснования.СуммаДокумента)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ТоварыДокументОснования.СуммаНДС, 0.00)) КАК СуммаНДС
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.РеализацияТоваров КАК ДокументОснования
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.РеализацияТоваров.Товары КАК ТоварыДокументОснования
	|ПО
	|	ТоварыДокументОснования.Ссылка = &Ссылка
	|ГДЕ
	|	ДокументОснования.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ДокументОснования.Ссылка
	|;
	|ВЫБРАТЬ
	|	ДанныеДокумента.ДокументОснование            КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент                   КАК Контрагент,
	|	ДанныеДокумента.Организация                  КАК Организация,
	|	ДанныеДокумента.Магазин                      КАК Магазин,
	|	ДанныеДокумента.ЦенаВключаетНДС              КАК ЦенаВключаетНДС,
	|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	ВЫБОР	КОГДА ДанныеДокумента.ЦенаВключаетНДС
	|			ТОГДА ДанныеДокумента.Сумма
	|			ИНАЧЕ ДанныеДокумента.Сумма + ДанныеДокумента.СуммаНДС
	|	КОНЕЦ                                        КАК СуммаДокумента,
	|	ЕСТЬNULL(Контрагенты.Наименование, "")       КАК Наименование,
	|	ЕСТЬNULL(Контрагенты.НаименованиеПолное, "") КАК НаименованиеПолное
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.Контрагенты КАК Контрагенты
	|ПО
	|	Контрагенты.Ссылка = ДанныеДокумента.Контрагент
	|";
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.РеализацияТоваров", "Документ.ВозвратТоваровПоставщику");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.РеализацияТоваров.Товары", "Документ.ВозвратТоваровПоставщику.Товары");
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	Иначе
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	КонецЕсли;
	РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
	ДанныеЗаполнения = Новый Структура();
	
	Для Каждого РеквизитЗаполнения Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(РеквизитЗаполнения.Имя);
	КонецЦикла;
	ВыборкаДанныхЗаполнения = РезультатЗапроса.Выбрать();
	ВыборкаДанныхЗаполнения.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаДанныхЗаполнения);
	
	Если Не ЗначениеЗаполнено(Касса) Тогда
		ДанныеЗаполнения.Вставить("Касса");
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(Перечисления.ФормыОплаты.Наличная, ДанныеЗаполнения);
	КонецЕсли;
	
	СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация);
	
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	СтрокаПлатеж.ДокументРасчетовСКонтрагентом = ДокументОснование;
	СтрокаПлатеж.Сумма = ВыборкаДанныхЗаполнения.СуммаДокумента;
	
	Если ПринятоОт = "" И ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент) Тогда
		
		ЕстьРасчетыСКонтрагентами = ДенежныеСредстваСервер.ЕстьРасчетыСКонтрагентами(ДанныеЗаполнения.ХозяйственнаяОперация);
			
		Если ЕстьРасчетыСКонтрагентами Тогда
			
			ПринятоОт = ?(ВыборкаДанныхЗаполнения.НаименованиеПолное="", ВыборкаДанныхЗаполнения.Наименование, ВыборкаДанныхЗаполнения.НаименованиеПолное);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Ответственный = Пользователи.ТекущийПользователь();

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда

		ДанныеЗаполнения.Свойство("ХозяйственнаяОперация", ХозяйственнаяОперация);
		ДанныеЗаполнения.Свойство("БанковскийСчет"   , БанковскийСчет);
		ДанныеЗаполнения.Свойство("ДокументОснование", ДокументОснование);
		ДанныеЗаполнения.Свойство("Касса"   , Касса);
		ДанныеЗаполнения.Свойство("КассаККМ", КассаККМ);

	КонецЕсли;

	Если ЗначениеЗаполнено(БанковскийСчет) Тогда

		ПринятоОт = ФинансыВызовСервера.ПолучитьТекстПринятоОт(БанковскийСчет);

	ИначеЕсли ЗначениеЗаполнено(ДокументОснование) Тогда
		
		ПринятоОт = ФинансыВызовСервера.ПринятоОтОтветственного(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Ответственный"));

	КонецЕсли;

	Основание = ФинансыВызовСервера.ПолучитьТекстОснованиеПлатежа(Касса, "ПриходныйКассовыйОрдер", ХозяйственнаяОперация);

	ГлавныйБухгалтер = ФинансыВызовСервера.ПолучитьПоследнегоОтветственного(Касса, "ПриходныйКассовыйОрдер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);

КонецПроцедуры

Процедура СформироватьНомерОрдера()

//	LNK 01.07.2017 09:49:15
	Если НЕ ДополнительныеСвойства.Свойство("НеФормироватьНомерОрдера") Тогда

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Нумератор", 	   Перечисления.Нумераторы.ПриходныйКассовыйОрдер);
		СтруктураПараметров.Вставить("Дата",           Дата);
		СтруктураПараметров.Вставить("Организация",    Организация);
	//	СтруктураПараметров.Вставить("ОбособленноеПодразделение", Касса.ОбособленноеПодразделениеОрганизации);
		СтруктураПараметров.Вставить("ОбособленноеПодразделение", Касса);	//	LNK 30.06.2017 18:44:41
		
		ДенежныеСредстваСервер.СформироватьСтроковыйНомерДокумента(СтруктураПараметров, НомерОрдера);
		ДенежныеСредстваСервер.ЗаписатьОчереднойНомер(СтруктураПараметров, НомерОрдера);

	КонецЕсли;
	
КонецПроцедуры







