#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция получает реквизиты документа для обмена с конфигурацией "Бухгалтерия для Украины".
//
// Параметры:
//	ДокументСсылка - Документ, для которого необходимо получить реквизиты.
//
// Возвращаемое значение:
//	Структура - Структура реквизитов документа
//
Функция РеквизитыДокументаДляОбменаСБухгалтерией(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств.КорреспондирующийСчет КАК КорреспондирующийСчет,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочиеДоходы)
	|	И ДанныеДокумента.СтатьяДвиженияДенежныхСредств.КорреспондирующийСчет <> """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.НомерСтроки");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КорреспондирующийСчет = Выборка.КорреспондирующийСчет;
		СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДвиженияДенежныхСредств;
	Иначе
		КорреспондирующийСчет = "";
		СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	КонецЕсли;                              	
	
	Если Найти(КорреспондирующийСчет, "66") <> 0
		ИЛИ Найти(КорреспондирующийСчет, "67") <> 0 Тогда
		ВидОперации = "РасчетыПоКредитамИЗаймам";
	Иначе
		ВидОперации = "ПрочееПоступление";  		
	КонецЕсли;
		
	СтруктураРеквизитов = Новый Структура("ВидОперации, Счет, СтатьяДвиженияДенежныхСредств",
		ВидОперации,
		КорреспондирующийСчет,
		СтатьяДвиженияДенежныхСредств
	);
	
	Возврат СтруктураРеквизитов;
		
КонецФункции

//	LNK 23.05.2019 14:03:52
Функция ИспользоватьСелективнуюДоступностьЭлементов(ХозяйственнаяОперация)	Экспорт

	СписокОпераций = Новый Соответствие;
	СписокОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ, Истина);
	СписокОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка, Истина);

	Возврат СписокОпераций.Получить(ХозяйственнаяОперация) = Истина;

КонецФункции // ИспользоватьСелективнуюДоступностьЭлементов()

//	LNK 23.05.2019 14:20:06
Функция ЭлементыСелективнойДоступности(ХозяйственнаяОперация)	Экспорт

	ИменаРеквизитов = Новый Соответствие;

	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы Тогда

	//	Дата, Номер ордера, Статья ДДС, Основание, Принято от, Приложение, Кассир, Бухгалтер, Комментарий
		ИменаРеквизитов.Вставить("Объект.Дата", Истина);
		ИменаРеквизитов.Вставить("Объект.НомерОрдера", Истина);
		ИменаРеквизитов.Вставить("Объект.РасшифровкаПлатежа", Истина);
		ИменаРеквизитов.Вставить("Объект.РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств", Истина);
		ИменаРеквизитов.Вставить("СтатьяДвиженияДенежныхСредств", Истина);
		ИменаРеквизитов.Вставить("Объект.Основание", Истина);
		ИменаРеквизитов.Вставить("Объект.ПринятоОт", Истина);
		ИменаРеквизитов.Вставить("Объект.Приложение", Истина);
		ИменаРеквизитов.Вставить("Объект.Ответственный", Истина);	//	Кассир
		ИменаРеквизитов.Вставить("Объект.ГлавныйБухгалтер", Истина);
		ИменаРеквизитов.Вставить("Объект.Комментарий", Истина);

	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка Тогда

	//	Дата, Номер ордера, Банковский счет, Основание, Принято от, Приложение, Кассир, Бухгалтер, Комментарий
		ИменаРеквизитов.Вставить("Объект.Дата", Истина);
		ИменаРеквизитов.Вставить("Объект.НомерОрдера", Истина);
		ИменаРеквизитов.Вставить("Объект.БанковскийСчет", Истина);
		ИменаРеквизитов.Вставить("Объект.Основание", Истина);
		ИменаРеквизитов.Вставить("Объект.ПринятоОт", Истина);
		ИменаРеквизитов.Вставить("Объект.Приложение", Истина);
		ИменаРеквизитов.Вставить("Объект.Ответственный", Истина);	//	Кассир
		ИменаРеквизитов.Вставить("Объект.ГлавныйБухгалтер", Истина);
		ИменаРеквизитов.Вставить("Объект.Комментарий", Истина);

	КонецЕсли;

	Возврат ИменаРеквизитов;

КонецФункции // ЭлементыСелективнойДоступности()

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает массив типов для ограничения типов элемента формы РасшифровкаПлатежаДокументРасчетовСКонтрагентом
// Параметры:
//           ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хоз. операции документа для которого необходимо получить массив типов
// Возвращаемое значение:
//           МассивТиповОграничений - Массив - Массив типов ограничивающих типы для реквизита формы РасшифровкаПлатежаДокументРасчетовСКонтрагентом
//
Функция ОграничениеТипаДокументаРасчетовПоХозяйственнойОперации(ХозяйственнаяОперация) Экспорт
	
	Перем МассивТиповОграничений;
	МассивТиповОграничений = Новый Массив();
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
		МассивТиповОграничений.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
		МассивТиповОграничений.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		МассивТиповОграничений.Добавить(Тип("ДокументСсылка.РеализацияТоваров"));
	КонецЕсли;
	Возврат МассивТиповОграничений;
	
КонецФункции

// Функция возвращает массив типов для ограничения типов элемента формы ДокументОснование
// Параметры:
//           ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хоз. операции документа для которого необходимо получить массив типов
// Возвращаемое значение:
//           МассивТиповОграничений - Массив - Массив типов ограничивающих типы для реквизита формы ДокументОснование
//
Функция ОграничениеТипаДокументаОснованияРасходаИзКассы(ХозяйственнаяОперация) Экспорт
	
	Перем МассивТиповОграничений;
	МассивТиповОграничений = Новый Массив();
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы ИЛИ 
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
		МассивТиповОграничений.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ Тогда
		МассивТиповОграничений.Добавить(Тип("ДокументСсылка.ВыемкаДенежныхСредствИзКассыККМ"));
	КонецЕсли;
	Возврат МассивТиповОграничений;
	
КонецФункции

// Процедура заполняет массивы реквизитов, зависимых от хозяйственной операции документа.
// Параметры:
//           ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хоз. операции документа для которого необходимо получить массив реквизитов
//           МассивВсехРеквизитов - Неопределено - Выходной параметр с типом Массив в который будут помещены имена всех реквизитов документов
//           МассивРеквизитовОперации - Неопределено - Выходной параметр с типом Массив в который будут помещены имена реквизитов по виду операции документа
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("Организация");
	МассивВсехРеквизитов.Добавить("Касса");
	МассивВсехРеквизитов.Добавить("Контрагент");
	МассивВсехРеквизитов.Добавить("КонтрагентПрочийДоход");
	МассивВсехРеквизитов.Добавить("ДокументОснование");
	МассивВсехРеквизитов.Добавить("БанковскийСчет");
	МассивВсехРеквизитов.Добавить("КассаККМ");
	МассивВсехРеквизитов.Добавить("ВТомЧислеНДС");
	МассивВсехРеквизитов.Добавить("СуммаДокумента");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.Сумма");
	МассивВсехРеквизитов.Добавить("СтатьяДвиженияДенежныхСредств");	//	LNK 27.06.2017 11:42:18
	
	МассивРеквизитовОперации = Новый Массив;

	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
		МассивРеквизитовОперации.Добавить("Организация");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("Контрагент");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("ВТомЧислеНДС");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Сумма");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом");
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		МассивРеквизитовОперации.Добавить("Организация");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("ВТомЧислеНДС");
		МассивРеквизитовОперации.Добавить("Контрагент");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Сумма");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом");
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы Тогда
		МассивРеквизитовОперации.Добавить("Организация");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("КонтрагентПрочийДоход");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("ВТомЧислеНДС");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Сумма");
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ Тогда
		МассивРеквизитовОперации.Добавить("Организация");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("КассаККМ");
		МассивРеквизитовОперации.Добавить("ДокументОснование");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("СтатьяДвиженияДенежныхСредств");	//	LNK 27.06.2017 11:43:02
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка Тогда
		МассивРеквизитовОперации.Добавить("Организация");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("БанковскийСчет");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы Тогда
		МассивРеквизитовОперации.Добавить("Организация");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("ДокументОснование");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Сумма");		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
		МассивРеквизитовОперации.Добавить("Организация");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("ДокументОснование");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
	КонецЕсли;
	
КонецПроцедуры

// Определяет отбор на хозяйственную операцию, устанавливаемый на список выбора документа Приходный кассовый ордер в форме элемента справочника хранилище шаблонов
//
Функция СвязьПараметровВыбораНаХозяйственнуюОперацию() Экспорт
	МассивПараметровВыбора = Новый Массив();
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента));
	возврат Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Проведение

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка"
	);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	ТекстЗапроса = ТекстЗапросаТаблицаДенежныеСредстваНаличные()
		+ ТекстЗапросаТаблицаДенежныеСредстваКПоступлениюНаличные()
		+ ТекстЗапросаТаблицаРасчетыСПоставщиками();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", ЗначениеНастроекПовтИсп.ПредопределеннаяСтатьяДвиженияДенежныхСредств(Реквизиты.ХозяйственнаяОперация, Ложь));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваНаличные",               МассивРезультатов[0].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваКПоступлениюНаличные",   МассивРезультатов[1].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПоставщиками",                   МассивРезультатов[2].Выгрузить());
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаДенежныеСредстваНаличные()
	
	ТекстЗапроса = Символы.ПС +
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Касса КАК Касса,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧастьРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств ЕСТЬ NULL 
	|				ИЛИ ТабличнаяЧастьРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|			ТОГДА &СтатьяДвиженияДенежныхСредств
	|		ИНАЧЕ ТабличнаяЧастьРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЕСТЬNULL(ТабличнаяЧастьРасшифровкаПлатежа.Сумма, ДанныеДокумента.СуммаДокумента) КАК Сумма
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТабличнаяЧастьРасшифровкаПлатежа
	|		ПО (ТабличнаяЧастьРасшифровкаПлатежа.Ссылка = &Ссылка)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧастьРасшифровкаПлатежа.НомерСтроки" + "
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДенежныеСредстваКПоступлениюНаличные()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата                   КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация            КАК Организация,
	|	ДанныеДокумента.Касса                  КАК Касса,
	|	ДанныеДокумента.ДокументОснование КАК Документ,
	|	ДанныеДокумента.ХозяйственнаяОперация  КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СуммаДокумента         КАК Сумма,
	|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РасходныйКассовыйОрдер).Касса КАК КассаОтправитель
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
	|	)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата                     КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)   КАК ВидДвижения,
	|	ДанныеДокумента.Организация              КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) КАК Касса,
	|	ДанныеДокумента.ДокументОснование        КАК Документ,
	|	ДанныеДокумента.ХозяйственнаяОперация    КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СуммаДокумента           КАК Сумма,
	|	ДанныеДокумента.КассаККМ                 КАК КассаОтправитель
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСПоставщиками()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.Магазин ЕСТЬ НЕ NULL 
	|			ТОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.Магазин
	|		ИНАЧЕ РасшифровкаПлатежа.Ссылка.Касса.Магазин
	|	КОНЕЦ КАК Магазин,
	|	&Контрагент КАК Поставщик,
	|	РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом КАК ДокументРасчета,
	|	РасшифровкаПлатежа.Сумма КАК Сумма,
	|	РасшифровкаПлатежа.Сумма КАК КОплате,
	|	0 КАК КПоступлению,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) КАК ФормаОплаты,
	|	ЛОЖЬ КАК Взаимозачет
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика)
	|	И РасшифровкаПлатежа.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Печать

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПКО") Тогда
	
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПКО",
				"Приходный кассовый ордер",
				СформироватьПечатнуюФормуКО1(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуКО1(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	СинонимДокумента   = НСтр("ru='Приходный кассовый ордер'");
	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КорСчета.Ссылка КАК Ссылка,
	|	КорСчета.КорреспондирующийСчет КАК КорреспондирующийСчет
	|ИЗ
	|	КорСчета КАК КорСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.Номер КАК Номер,
	|	ТаблицаДокумента.Дата КАК ДатаДокумента,
	|	ТаблицаДокумента.НомерОрдера КАК НомерОрдера,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Организация КАК ЮрФизЛицо,
	|	ТаблицаДокумента.Организация КАК Руководители,
	|	ТаблицаДокумента.Организация.Префикс КАК Префикс,
	|	ТаблицаДокумента.СуммаДокумента КАК Сумма,
	|	ТаблицаДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ТаблицаДокумента.Организация.НаименованиеПолное КАК СТРОКА(3))) = ""   ""
	|			ТОГДА ТаблицаДокумента.Организация.Наименование
	|		ИНАЧЕ ТаблицаДокумента.Организация.НаименованиеПолное
	|	КОНЕЦ КАК НаименованиеПолное,
	|	ТаблицаДокумента.Касса.ОбособленноеПодразделениеОрганизации.НаименованиеПолное КАК ОбособленноеПодразделениеОрганизацииПредставление,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Контрагент.Представление КАК ФИОПолучателя,
	|	ТаблицаДокумента.Приложение КАК Приложение,
	|	ТаблицаДокумента.Основание КАК Основание,
	|	ТаблицаДокумента.Контрагент.Наименование КАК Наименование,
	|	ТаблицаДокумента.ПринятоОт КАК ПринятоОт,
	|	ТаблицаДокумента.ДокументОснование КАК ДокументОснование,
	|	ТаблицаДокумента.ВыводитьНаПечатьСуммуНДС КАК ВыводитьНаПечатьСуммуНДС,
	|	ТаблицаДокумента.ВТомЧислеНДС КАК ВТомЧислеНДС,
	|	ТаблицаДокумента.Ответственный.ФизЛицо КАК Кассир,
	|	ТаблицаДокумента.Касса.Магазин.Наименование КАК МагазинНаименование,
	|	ТаблицаКонтакты.Представление КАК АдресМагазина,
	|	ТаблицаДокумента.ГлавныйБухгалтер.Наименование КАК ФИОГлавногоБухгалтера
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины.КонтактнаяИнформация КАК ТаблицаКонтакты
	|		ПО ТаблицаДокумента.Касса.Магазин = ТаблицаКонтакты.Ссылка
	|			И (ТаблицаКонтакты.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресМагазина))
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Ссылка"
	);
	Запрос.МенеджерВременныхТаблиц = ДенежныеСредстваСервер.ПолучитьМенеджерТаблицыКорСчетов(Документы.ПриходныйКассовыйОрдер.ПустаяСсылка(), МассивОбъектов);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаКорСчетаДебет = МассивРезультатов[0].Выгрузить();
	ДанныеПечати = МассивРезультатов[1].Выбрать();
	
	ПервыйДокумент = Истина;
	КодЯзыкаПечать = "uk";
	ДатаДок = ОбщегоНазначения.ПолучитьЗначениеРеквизита(МассивОбъектов[0],"Дата");
	Если ЗначениеЗаполнено(ДатаДок) тогда
		Если ДатаДок < Дата('20180106') тогда
			ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйКассовыйОрдер_ПФ_MXL_КО1"; 			
			Макет = УправлениеПечатью.ПолучитьМакет("ОбщийМакет.ПФ_MXL_КО1");
		Иначе
			ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйКассовыйОрдер_ПФ_MXL_UK_КО1_05012018"; 			
			Макет = УправлениеПечатью.ПолучитьМакет("ОбщийМакет.ПФ_MXL_UK_КО1_05012018");
		КонецЕсли;
	КонецЕсли;	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		ЕстьРасчетыСКонтрагентами = ДенежныеСредстваСервер.ЕстьРасчетыСКонтрагентами(ДанныеПечати.ХозяйственнаяОперация);
		
		СведенияОбОрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаДокумента);
		
		// Шапка накладной
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		Если НЕ ЗначениеЗаполнено(ДанныеПечати.ОбособленноеПодразделениеОрганизацииПредставление) Тогда

			ОбластьМакета.Параметры.ПолноеНаименование = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");

		Иначе
			ОбластьМакета.Параметры.ПолноеНаименование = ДанныеПечати.ОбособленноеПодразделениеОрганизацииПредставление;
		КонецЕсли;

	//	LNK 21.02.2017 12:28:37
		Если НЕ ПустаяСтрока(ДанныеПечати.МагазинНаименование) Тогда
			
			ОбластьМакета.Параметры.ПолноеНаименование = ОбластьМакета.Параметры.ПолноеНаименование
			+ " (магазин " + СокрЛП(ДанныеПечати.МагазинНаименование)
			+ ?(ПустаяСтрока(ДанныеПечати.АдресМагазина), "", ", " + СокрЛП(ДанныеПечати.АдресМагазина)) + ")";

		КонецЕсли;
		
		ОбластьМакета.Параметры.КодПоЕДРПОУ = СведенияОбОрганизации.КодПоЕДРПОУ;
		
		Если Не ЗначениеЗаполнено(ДанныеПечати.НомерОрдера) Тогда
			ОбластьМакета.Параметры.НомерОрдера = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(
		 	ДанныеПечати.Номер, 
		 	Ложь,
		 	Истина
		 	)
		КонецЕсли;
		
		ОбластьМакета.Параметры.СуммаПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(ДанныеПечати.Сумма, , КодЯзыкаПечать);
		ОбластьМакета.Параметры.Сумма = Формат(ДанныеПечати.Сумма, "ЧДЦ=2; ЧН=0.00") + " грн";
		
		МассивКорСчетов = ТаблицаКорСчетаДебет.НайтиСтроки(Новый Структура("Ссылка", ДанныеПечати.Ссылка));
		КодыСчетДебет = "";
		Для каждого СтрокаКорСчета Из МассивКорСчетов Цикл
			КодыСчетДебет = КодыСчетДебет + ?(ПустаяСтрока(КодыСчетДебет), "", ",") + СтрокаКорСчета.КорреспондирующийСчет;
		КонецЦикла;
		
	//	ОбластьМакета.Параметры.Счет = Сред(КодыСчетДебет, 2);
		ОбластьМакета.Параметры.Счет = СокрЛП(КодыСчетДебет);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ДанныеПечати.ВыводитьНаПечатьСуммуНДС Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("СекцияВТомЧисле");
		
			Если ПустаяСтрока(ДанныеПечати.ВТомЧислеНДС) Тогда
				ОбластьМакета.Параметры.ВТомЧисле = "Без податку (ПДВ)";
			Иначе
				ОбластьМакета.Параметры.ВТомЧисле = ДанныеПечати.ВТомЧислеНДС;				
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
	//	LNK 21.02.2017 12:28:46
		//Руководители = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(ДанныеПечати.Руководители, КонецДня(ДанныеПечати.ДатаДокумента));
		//
		//Бухгалтер    = Руководители.ГлавныйБухгалтер;
		
		ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = ДанныеПечати.ФИОГлавногоБухгалтера;
		ОбластьМакета.Параметры.ФИОКассира            = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ДанныеПечати.Кассир);
		
		ОбластьМакета.Параметры.Приложение = ДанныеПечати.Приложение;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецЕсли
