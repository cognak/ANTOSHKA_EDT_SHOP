&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);

//	LNK 26.09.2016 08:51:17
//	NAV:БлокировкаДанныхУчестьДокументВNavision
//	Обработчик подсистемы "NAV"
	ВнешниеИсточникиСобытия.ДобавитьКнопкуУчестьВNavision(ЭтотОбъект, ЭтотОбъект.КоманднаяПанель);
//	Оформление элементов в обработчике подсистемы "NAV"
	ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект,, Ложь);
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,СостояниеДокумента,РазрешеноПроведение);

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
		УправлениеЭлементамиФормы();
			
	КонецЕсли;

	Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Касса, "Магазин");
	
	НастроитьФормуПоДополнительнымПравам();
	
//	LNK 14.09.2017 12:56:33
	ОбновитьНекторыеСпискиВыбора();

	УправлениеДоступомРТ.ПриСозданииФормыНаСервере(ЭтотОбъект);	//	LNK 17.10.2019 14:30:01
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УправлениеЭлементамиФормы();
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.Ответственный.Пустая() Тогда

		ТекущийОбъект.Ответственный = Пользователи.ТекущийПользователь()

	КонецЕсли;

//	LNK 26.09.2016 08:52:13
//	NAV:БлокировкаДанныхУчестьДокументВNavision
//	Управление блокировкой "УчётВNavision" подсистемы "NAV" (реквизит "РегистрацияПередачиВNavision" создается в обработчике ПриСозданииНаСервере)
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РегистрацияПередачиВNavision", ЭтотОбъект["РегистрацияПередачиВNavision"]);
	
КонецПроцедуры

//	LNK 26.09.2016 09:16:36
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
//	LNK 26.09.2016 08:52:48
//	NAV:БлокировкаДанныхУчестьДокументВNavision
//	Оформление элементов в обработчике подсистемы "NAV"
	ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект,, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
//	LNK 27.06.2017 13:57:32
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ") ИЛИ  Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка") ИЛИ Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы") Тогда

	//	В типовой конфигурации табличная часть пустая... уроды! Сделано для возможности изменения СтатьиДДС
		Объект.РасшифровкаПлатежа.Очистить();

		СтрокаРасшифровки = Объект.РасшифровкаПлатежа.Добавить();
		СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
		СтрокаРасшифровки.Сумма = Объект.СуммаДокумента;

		
	КонецЕсли;

	ФинансыКлиент.ПересчетСуммыДокументаПоРасшифровкеПлатежа(Объект);
	УстановленныеПараметры = Новый Массив();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	Оповестить("ЗаписанПриходныйКассовыйОрдер");

//	LNK 26.09.2016 08:56:20
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	ВнешниеИсточникиКлиент.ВыполнитьОповещениеПередачиДокументаВNavision(Объект.Ссылка, Объект.Ссылка, ЭтотОбъект["РегистрацияПередачиВNavision"]);
	
//	LNK 14.09.2017 12:56:33
	ОбновитьНекторыеСпискиВыбора();

	НастроитьФормуПоДополнительнымПравам();	//	LNK 05.10.2017 14:37:43

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНеоплаченныхДокументов.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНеоплаченныхДокументов(ВыбранноеЗначение);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;

КонецПроцедуры

//	LNK 26.09.2016 09:14:07
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ИмяСобытия = "РегистрацияПередачиВNavision" Тогда

		ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник);

	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

//	LNK 20.02.2017 13:15:29
&НаКлиенте
Процедура БанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если ОбщегоНазначенияВызовСервера.ФункциональнаяОпция("ИспользоватьУчетДенежныхСредствПоОбособленнымПодразделениям") Тогда

		ДанныеВыбора = ФинансыВызовСервера.СписокДоступныхРасчетныхСчетов(Объект.Организация, Объект.Касса, Истина);
		СтандартнаяОбработка = Ложь;

	КонецЕсли;

КонецПроцедуры

//	LNK 20.02.2017 13:15:29
&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)

	Объект.ПринятоОт = ФинансыВызовСервера.ПолучитьТекстПринятоОт(Объект.БанковскийСчет);

КонецПроцедуры

//	LNK 20.02.2017 10:59:18
&НаКлиенте
Процедура КассаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если НЕ Объект.Организация.Пустая() Тогда

		ДанныеВыбора = ФинансыВызовСервера.СписокДоступныхКасс(, Объект.Организация, Истина);
		СтандартнаяОбработка = Ложь;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Касса) Тогда
		КассаПриИзмененииСервер();
	Иначе
		Магазин = ПредопределенноеЗначение("Справочник.Магазины.ПустаяСсылка");
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ") Тогда
			Объект.ДокументОснование = ПредопределенноеЗначение("Документ.ВыемкаДенежныхСредствИзКассыККМ.ПустаяСсылка");
		ИначеЕсли Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка") Тогда
			Объект.БанковскийСчет = ПредопределенноеЗначение("Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка");
		КонецЕсли;
		
		МагазинПриИзмененииКлиент();
	КонецЕсли;
	
//	LNK 03.08.2018 13:35:48
	ОбновитьНекторыеСпискиВыбора();

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияМногострочногоТекста(Элемент.ТекстРедактирования , Объект.Комментарий, Модифицированность, "Комментарий:");
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	СуммаДокументаПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПрочийДоходПриИзменении(Элемент)
	
	КонтрагентПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Функция ДокументОснованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда

		ЗаполнитьДокументНаОснованииДокументаОснование();
		ПринятоОтОткрытие(Элемент, Ложь)

	КонецЕсли;
	
КонецФункции

//	LNK 20.02.2017 16:16:41
&НаКлиенте
Процедура ГлавныйБухгалтерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И НЕ ВыбранноеЗначение.Количество() = 0 Тогда

		ВыбранноеЗначение = ВыбранноеЗначение[0];

	КонецЕсли;

КонецПроцедуры

//	NAV:БлокировкаДанныхУчестьДокументВNavision
#Область ОбслуживаниеКнопкиУчестьДокументВNavision

//	LNK 08.09.2016 14:41:31
//	Обработчик события кнопки подсистемы "NAV"
&НаКлиенте
Процедура РегистрацияПередачиВNavisionНажатие(Элемент)

	ВнешниеИсточникиКлиент.ПодтвердитьРешениеУчетВNavision(ЭтотОбъект);

КонецПроцедуры

//	LNK 08.09.2016 14:41:31
//	Обработчик события кнопки подсистемы "NAV"
&НаСервере
Процедура РегистрацияПередачиВNavisionНаСервере()	Экспорт

//	Оформление элементов в обработчике подсистемы "NAV"
	ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект, Истина, Ложь);

КонецПроцедуры

//	LNK 23.10.2017 14:18:28
&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник)

//	LNK 26.09.2016 08:58:49
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ИмяСобытия = "РегистрацияПередачиВNavision" Тогда

		Если НЕ Источник = Объект.Ссылка И Параметр.Объект = Объект.Ссылка Тогда

		//	Оформление элементов в обработчике подсистемы "NAV"
			ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект,, Ложь);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "Расшифровка платежа"

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		СуммаОстаток = Объект.СуммаДокумента - Объект.РасшифровкаПлатежа.Итог("Сумма");
		Элемент.ТекущиеДанные.Сумма = СуммаОстаток;
		Элемент.ТекущиеДанные.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект.РасшифровкаПлатежа, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект.РасшифровкаПлатежа, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтатьяДвиженияДенежныхСредств = СтрокаТаблицы.СтатьяДвиженияДенежныхСредств;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументРасчетовСКонтрагентом) Тогда
			
			СтрокаТаблицы.Сумма = ДенежныеСредстваСервер.ПолучитьСуммуДокумента(СтрокаТаблицы.ДокументРасчетовСКонтрагентом);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ


&НаКлиенте
Процедура ЗаполнитьВТомЧислеНДС(Команда)
	
	ЗаполнитьВТомЧислеНДССервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьНеоплаченные(Команда)
	
Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Касса)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		АдресХранилищаРасшифровкаПлатежа = ПоместитьВХранилищеРасшифровкуПлатежа();
	Иначе
		АдресХранилищаРасшифровкаПлатежа = "";
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин", 		ОбщегоНазначенияРТСервер.ЗначениеРеквизитаОбъекта(Объект.Касса, "Магазин"));
	ПараметрыФормы.Вставить("Контрагент", 	Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация", 	Объект.Организация);
	ПараметрыФормы.Вставить("ФормаОплаты", 	ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная"));
	ПараметрыФормы.Вставить("Операция", 	Объект.ХозяйственнаяОперация);
	ПараметрыФормы.Вставить("АдресХранилищаРасшифровкаПлатежа", АдресХранилищаРасшифровкаПлатежа);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);

	ОткрытьФорму("Обработка.ПодборНеоплаченныхДокументов.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ЗаполнитьВТомЧислеНДССервер()
	
	МассивДокументов = Объект.РасшифровкаПлатежа.Выгрузить(,"ДокументРасчетовСКонтрагентом").ВыгрузитьКолонку("ДокументРасчетовСКонтрагентом");
	МассивДокументов.Добавить(Объект.ДокументОснование);
	Объект.ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(
		Объект.СуммаДокумента,
		МассивДокументов,
		Ложь, // ДобавлятьТекстВТомЧисле
	);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()

	Если Объект.Проведен И НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда

		ТолькоПросмотр = Истина;

	ИначеЕсли НЕ Объект.Проведен И Объект.Проводился И Документы.ПриходныйКассовыйОрдер.ИспользоватьСелективнуюДоступностьЭлементов(Объект.ХозяйственнаяОперация) Тогда

		ТолькоПросмотр  = Ложь;	//	LNK 28.05.2019 09:34:56

		Если НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда

			ИсточникиДанных = Документы.ПриходныйКассовыйОрдер.ЭлементыСелективнойДоступности(Объект.ХозяйственнаяОперация);
			ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьЭлементыФормы(Элементы, ИсточникиДанных);

		КонецЕсли;

	Иначе

		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
	//	LNK 04.01.2017 13:54:53
		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Номер.ТолькоПросмотр,
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьНомерДокумента);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Касса"" не заполнено'"), Объект, "Объект.Касса",,Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Контрагент"" не заполнено'"), Объект, "Объект.Контрагент",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНеоплаченныхДокументов(ВыбранноеЗначение)
	
	ТаблицаДокументов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресКорзиныВХранилище);
	Объект.РасшифровкаПлатежа.Очистить();
	
	Для каждого Строка Из ТаблицаДокументов Цикл
		
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект.РасшифровкаПлатежа, Истина);
	
КонецПроцедуры

&НаСервере	//	LNK 03.08.2018 13:33:24
Процедура ОбновитьНекторыеСпискиВыбора()

	Элементы.Основание.СписокВыбора.ЗагрузитьЗначения(ФинансыВызовСервера.СписокПоследнихОснованийХозяйственнойОперации(Объект.Касса, "ПриходныйКассовыйОрдер", Объект.ХозяйственнаяОперация));
	Элементы.ГлавныйБухгалтер.СписокВыбора.ЗагрузитьЗначения(ФинансыВызовСервера.СписокПоследнихОтветственныхЛиц(Объект.Касса, "ПриходныйКассовыйОрдер", ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер")));

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Управление свойствами элементов формы


&НаСервере
Процедура УстановитьСвязьПараметровВыбораДокументаОснованияПоХозОперации()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.КассаПолучатель", "Объект.Касса"));
		Элементы.ДокументОснование.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу));
		Элементы.ДокументОснование.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.КассаПолучатель", "Объект.Касса"));
		Элементы.ДокументОснование.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию));
		Элементы.ДокументОснование.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));
		Элементы.ДокументОснование.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		МассивПараметров = Новый Массив();
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", "Объект.Организация"));
		НовыеПараметры = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.ДокументОснование.ПараметрыВыбора = НовыеПараметры;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура ограничивает выбора типа для элементов формы
// РасшифровкаПлатежаДокументРасчетовСКонтрагентом
// ДокументОснование
&НаСервере
Процедура УстановитьОграничениеТипаПоХозяйственнойОперации()
	
	МассивТиповОграниченийДокументРасчетов = Документы.ПриходныйКассовыйОрдер.ОграничениеТипаДокументаРасчетовПоХозяйственнойОперации(Объект.ХозяйственнаяОперация);
	МассивТиповОграниченийДокументРасходаИзКассы = Документы.ПриходныйКассовыйОрдер.ОграничениеТипаДокументаОснованияРасходаИзКассы(Объект.ХозяйственнаяОперация);
	Если МассивТиповОграниченийДокументРасчетов.Количество() > 0.00 Тогда
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ВыбиратьТип = МассивТиповОграниченийДокументРасчетов.Количество() > 1;
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ОграничениеТипа = Новый ОписаниеТипов(МассивТиповОграниченийДокументРасчетов);
	КонецЕсли;
	Если МассивТиповОграниченийДокументРасходаИзКассы.Количество() > 0.00 Тогда
		Элементы.ДокументОснование.ВыбиратьТип = МассивТиповОграниченийДокументРасчетов.Количество() > 1;
		Элементы.ДокументОснование.ОграничениеТипа = Новый ОписаниеТипов(МассивТиповОграниченийДокументРасходаИзКассы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвойстваЭлементовФормыПоХозяйственнойОперации()
	
	УстановитьВидимостьЭлементамПоХозяйственнойОперации();
	УстановитьОграничениеТипаПоХозяйственнойОперации();
	УстановитьОграничениеСтатьиДвиженияДенежныхСредствПоХозяйственнойОперации();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементамПоХозяйственнойОперации()

	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ПриходныйКассовыйОрдер.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);

	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
	Если Элементы.ЗаполнитьВТомЧислеНДС.Видимость <> Элементы.ВТомЧислеНДС.Видимость Тогда
		Элементы.ЗаполнитьВТомЧислеНДС.Видимость = Элементы.ВТомЧислеНДС.Видимость;
	КонецЕсли;
	
КонецПроцедуры

//	LNK 27.06.2017 12:02:51
&НаСервере
Процедура УстановитьОграничениеСтатьиДвиженияДенежныхСредствПоХозяйственнойОперации()

	Элементы.СтатьяДвиженияДенежныхСредств.СписокВыбора.ЗагрузитьЗначения(
		Справочники.СтатьиДвиженияДенежныхСредств.СтатьиДвиженияДенежныхСредствПоХозяйственнойОперации(Объект.ХозяйственнаяОперация));

КонецПроцедуры

// В процедуре выполняется установка свойств элементов формы.
//
&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	ОбновитьСвойстваЭлементовФормыПоХозяйственнойОперации();
	УстановитьСвязьПараметровВыбораДокументаОснованияПоХозОперации();
	ЭтоОрганизацияИзНастроекПользователя = ?(Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("Структура"), Параметры.Основание.Свойство("ОрганизацияИзНастроекПользователя"), Ложь);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораКассы(Объект, Элементы.Касса, ЭтоОрганизацияИзНастроекПользователя);
	
//	LNK 27.06.2017 14:06:35
	Если (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ") ИЛИ  Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка"))
	И НЕ Объект.РасшифровкаПлатежа.Количество() = 0	Тогда

			СтатьяДвиженияДенежныхСредств = Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;

	Иначе	СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(Объект.ХозяйственнаяОперация);

	КонецЕсли;

	Элементы.РасшифровкаПлатежаПодобратьНеоплаченные.Видимость = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики изменений реквизитов

&НаКлиенте
Процедура КонтрагентПриИзмененииКлиент()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И Не ЗначениеЗаполнено(Объект.ПринятоОт) Тогда
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
		КонтрагентПриИзмененииСервер(СтруктураПараметров);
		Объект.ПринятоОт = СтруктураПараметров.ПринятоОт;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзмененииКлиент()
	
	ФинансыКлиент.ПересчетСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументНаОснованииДокументаОснование()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура КассаПриИзмененииСервер()
	СтруктураРеквизитов = ДенежныеСредстваСервер.ПолучитьРеквизитыКассы(Объект.Касса);
	Объект.Организация = СтруктураРеквизитов.Организация;
	Магазин = Объект.Касса.Магазин;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ Тогда
		Если ЗначениеЗаполнено(Объект.ДокументОснование) И СтруктураРеквизитов.Организация <> Объект.ДокументОснование.Организация Тогда
			Объект.ДокументОснование = Документы.ВыемкаДенежныхСредствИзКассыККМ.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка Тогда
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			РеквизитыБанковскогоСчета = Справочники.БанковскиеСчетаОрганизаций.РеквизитыБанковскогоСчетаОрганизации(Объект.БанковскийСчет);
			Если РеквизитыБанковскогоСчета.Организация <> Объект.Организация Тогда
				Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
						Объект.Организация,
						Перечисления.ФормыОплаты.Безналичная
					);
			КонецЕсли;
		Иначе
			Объект.БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	МагазинПриИзмененииСервер();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтрагентПриИзмененииСервер(СтруктураПараметров)
	
	СтруктураПараметров.Вставить("ПринятоОт", Справочники.Контрагенты.ПолучитьНаименованиеКонтрагента(СтруктураПараметров.Контрагент));
	
КонецПроцедуры

//	LNK 27.06.2017 12:24:26
&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)

	Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл

		СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;

	КонецЦикла;
	
//	LNK 03.08.2018 13:35:48
	ОбновитьНекторыеСпискиВыбора();

КонецПроцедуры

&НаСервере
Функция ПоместитьВХранилищеРасшифровкуПлатежа()

	РасшифровкаПлатежа = Объект.РасшифровкаПлатежа.Выгрузить();
	
	Адрес = ПоместитьВоВременноеХранилище(РасшифровкаПлатежа, УникальныйИдентификатор);
	
	Возврат Адрес;

КонецФункции

&НаКлиенте
Процедура МагазинПриИзмененииКлиент()
	
	Для Каждого Строка Из Объект.РасшифровкаПлатежа Цикл 
		
		Строка.ДокументРасчетовСКонтрагентом = Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура МагазинПриИзмененииСервер()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РасшифровкаПлатежа", Объект.РасшифровкаПлатежа.Выгрузить(,"ДокументРасчетовСКонтрагентом"));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом
		|ПОМЕСТИТЬ ДокРасчетов
		|ИЗ
		|	&РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокРасчетов.ДокументРасчетовСКонтрагентом.Магазин КАК Магазин
		|ИЗ
		|	ДокРасчетов КАК ДокРасчетов
		|ГДЕ НЕ ДокРасчетов.ДокументРасчетовСКонтрагентом.Магазин ЕСТЬ NULL";

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если Магазин = Выборка.Магазин Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектФормы = РеквизитФормыВЗначение("Объект");
	РасшифровкаПлатежа = ОбъектФормы.РасшифровкаПлатежа;
	
	РасшифровкаПлатежа.ЗагрузитьКолонку(Новый Массив(РасшифровкаПлатежа.Количество()), "ДокументРасчетовСКонтрагентом");
	Объект.РасшифровкаПлатежа.Загрузить(РасшифровкаПлатежа.Выгрузить());
	
КонецПроцедуры

//	LNK 29.06.2017 11:22:58
&НаКлиенте
Процедура ПринятоОтОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда

		Объект.ПринятоОт = ФинансыВызовСервера.ПринятоОтОтветственного(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "Ответственный"));

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
