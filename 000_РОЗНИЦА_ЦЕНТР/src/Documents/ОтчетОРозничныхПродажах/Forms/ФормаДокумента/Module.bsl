&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте	//	LNK 09.07.2020 05:30:55
Перем КлючиОповещения;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

&НаКлиенте	//	LNK 04.07.2021 06:52:09
Перем ДанныеСтрокиПередИзменением;

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Обработка данных подключаемого оборудования
//
// Параметры:
//  СтруктураПараметров - Структура действий на сервере
//  СтруктураПараметровКлиента - структура последующих действий на клиенте
//
&НаСервере
Функция ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента) Экспорт
	
	Если НЕ СтруктураПараметров.НеизвестныеДанныеПО Тогда
		Если СтруктураПараметров.Действие = "ПроверкаВесовыхТоваров" Тогда
			ВходящиеПараметры = СтруктураПараметров.ЗначенияПоиска[0];
			ДобавитьНайденныеПозицииТоваров(ВходящиеПараметры);
			СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаТоваров" Тогда
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				Если СтруктураПараметров.ЗначенияПоиска.Количество() = 1 Тогда
					ВходящиеПараметры = СтруктураПараметров.ЗначенияПоиска[0];
					Если СтруктураПараметров.Свойство("ИспользоватьКоличество") Тогда
						ВходящиеПараметры.Вставить("Количество", СтруктураПараметров.ИспользоватьКоличество);
					КонецЕсли;
					ДобавитьНайденныеПозицииТоваров(ВходящиеПараметры);
				Иначе
					ТаблицаТоваров = Новый ТаблицаЗначений;
					ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
					ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
					ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
					Для каждого ЗначениеПоиска Из СтруктураПараметров.ЗначенияПоиска Цикл
						ТекущаяСтрока = ТаблицаТоваров.Добавить();
						ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначениеПоиска);
					КонецЦикла;
					СтруктураПараметровКлиента.Вставить("ВыборТоваров", ПоместитьВоВременноеХранилище(ТаблицаТоваров));
				КонецЕсли;
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат СтруктураПараметровКлиента;

КонецФункции

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда

		Возврат;

	КонецЕсли;

	Параметры.Свойство("РежимЗакрытияСмены", РежимЗакрытияСмены);	//	LNK 08.04.2020 08:28:39

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект, КартинкаСостоянияДокумента, СостояниеДокумента, РазрешеноПроведение);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ОтчетОРозничныхПродажах.ПараметрыУказанияСерий(Объект));
	
	БезНДС = "Без НДС";
	
	ПерерасчетПроизведен = НЕ НДСИсходящийСервер.НуженАвторасчетНДС(Объект.Товары, Объект.ЦенаВключаетНДС,,,,Неопределено);
	
	ВыполнитьПодготовкуОбъектаПередОткрытиемФормы(Истина);
	
	ПодключаемоеОборудованиеРТ.НастроитьПодключаемоеОборудование(ЭтотОбъект);

	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
	
	УстановитьПараметрыВыбораЭлементовФормы();
	
	НастроитьФормуПоДополнительнымПравам();
	
	УстановитьТекущуюСтраницуСуммПодвала();
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) Тогда

		Элементы.КассаККМ.ТолькоПросмотр = Истина;

	КонецЕсли;

//	LNK 20.09.2016 09:35:33
//	NAV:БлокировкаДанныхУчестьДокументВNavision
//	Обработчик подсистемы "NAV"
	ВнешниеИсточникиСобытия.ДобавитьКнопкуУчестьВNavision(ЭтотОбъект, ЭтотОбъект.КоманднаяПанель);
//	Оформление элементов в обработчике подсистемы "NAV"
	ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект);

	Если ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() И РольДоступна(Метаданные.Роли.АдминистраторСистемы) Тогда

		Элементы.КассоваяСмена.Вид = ВидПоляФормы.ПолеВвода;
		Элементы.КассоваяСмена.ТолькоПросмотр = Ложь;

		Элементы.ПогашениеПодарочныхСертификатов.ТолькоПросмотр = Ложь;

	Иначе

		Элементы.ПогашениеПодарочныхСертификатов.ТолькоПросмотр = Истина;

	КонецЕсли;

	УправлениеДоступомРТ.ПриСозданииФормыНаСервере(ЭтотОбъект);	//	LNK 17.10.2019 14:30:01
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	УстановитьТекущуюСтраницуСуммПодвала();

	ВыполнитьПодготовкуОбъектаПередОткрытиемФормы(Ложь);
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	УстановитьДоступностьЦенаВключаетНДС();
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);

	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "";

		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:
			                      |""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	Если НЕ ТолькоПросмотр Тогда

		Если НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда

			ОбщегоНазначенияКлиент.УстановитьТолькоПросмотрДляФормы(Элементы, Команды, Истина
			, "ФормаПровестиИЗакрыть, ФормаПровести, ФормаЗаписать, ФормаПеречитать, ФормаДокументОтчетОРозничныхПродажахПечатьОтчетОРозничныхПродажах, Комментарий");

		КонецЕсли;

	КонецЕсли;
	УстановитьДоступностьАдмДоп();	//А++ 20241210 по задаче https://awdev.atlassian.net/browse/RETAIL1C-1004
			////ОбщегоНазначенияКлиент.УстановитьТолькоПросмотрДляФормы(Элементы, Команды, ЛОЖЬ
			////, "ФормаСервис,ПерезаполнитьДаннымиИзЗакрытыхЧеков");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	// ПодключаемоеОборудование
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец ПодключаемоеОборудование

	Если ТипЗнч(КлючиОповещения) = Тип("Структура") Тогда

	//	LNK 04.09.2020 06:34:23 - оповещение выполнено не было, хоть и запланировано.
	//	Такое может быть при нажатии кнопки "ПровестиИЗакрыть".
		ОповеститьОПередачеСертификатов();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	

		НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение , ИсточникВыбора.ИмяТабличнойЧасти);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
//	Если Источник = "ПодключаемоеОборудование" И ВводДоступен()
	Если Ложь	//	LNK 04.07.2023 10:22:09
	Тогда

		Если ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;            
			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекКод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);

		КонецЕсли;

	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ИмяСобытия = "РегистрацияПередачиВNavision" Тогда

		ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник);

	КонецЕсли;

КонецПроцедуры

//	LNK 20.09.2016 09:37:10
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ТекущийОбъект.ДополнительныеСвойства.Вставить("РежимЗакрытияСмены", РежимЗакрытияСмены);

//	LNK 20.09.2016 09:37:10
//	NAV:БлокировкаДанныхУчестьДокументВNavision
//	Управление блокировкой "УчётВNavision" подсистемы "NAV" (реквизит "РегистрацияПередачиВNavision" создается в обработчике ПриСозданииНаСервере)
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РегистрацияПередачиВNavision", ЭтотОбъект["РегистрацияПередачиВNavision"]);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.ВозвращенныеТовары);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.ВозвращенныеТовары);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПодакцизныйТоварВТЧСервер(Объект.Товары);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПодакцизныйТоварВТЧСервер(Объект.ВозвращенныеТовары);
 	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
		
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС, СуммаВсегоВозврат);
	
	ЗаполнитьРеквизитыПогашенияПодарочныхСертификатов();
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвращенныеТовары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
	
//	LNK 20.09.2016 09:37:54
//	NAV:БлокировкаДанныхУчестьДокументВNavision
//	Оформление элементов в обработчике подсистемы "NAV"
	ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Перем Выполнено, ТекстСообщения, АдресСсылки;
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
//	LNK 20.09.2016 09:38:50
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	ВнешниеИсточникиКлиент.ВыполнитьОповещениеПередачиДокументаВNavision(Объект.Ссылка, Объект.Ссылка, ЭтотОбъект["РегистрацияПередачиВNavision"]);

	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда

		ВыполнитьПередачуСертификатовВУправляющуюСистемуНаСервере(Объект.Ссылка, Выполнено, ТекстСообщения, АдресСсылки);

		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда

			КлючиОповещения = Новый Структура("Отказ, Текст, АдресСсылки", НЕ Выполнено, ТекстСообщения, АдресСсылки);
			ПодключитьОбработчикОжидания("ОповеститьОПередачеСертификатов", 1, Истина);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 09.07.2020 05:33:32
Процедура ОповеститьОПередачеСертификатов()

	Если ТипЗнч(КлючиОповещения) = Тип("Структура") Тогда

		ПоказатьОповещениеПользователя(
			  ?(НЕ КлючиОповещения.Отказ, "Перемещение ПС", "Ошибка перемещения ПС")
			, КлючиОповещения.АдресСсылки
			, КлючиОповещения.Текст
			, ?(НЕ КлючиОповещения.Отказ, БиблиотекаКартинок.Информация32, БиблиотекаКартинок.Ошибка32)
			, ?(НЕ КлючиОповещения.Отказ, СтатусОповещенияПользователя.Информация, СтатусОповещенияПользователя.Важное)
		);

	КонецЕсли;

	КлючиОповещения = Неопределено;

КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте	//	LNK 28.06.2021 06:30:30
Процедура ДатаПриИзменении(Элемент)

	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
	ПерезаполнитьНалогообложениеНДС();

КонецПроцедуры

&НаКлиенте	//	LNK 28.06.2021 06:32:41
Процедура ОрганизацияПриИзменении(Элемент)

	ПерезаполнитьНалогообложениеНДС();
	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте	//	LNK 28.06.2021 06:35:26
Процедура МагазинПриИзменении(Элемент)

	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);

КонецПроцедуры

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	ПриИзмененииКассаККМСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьНДСПриИзменении(Элемент)
	
	ПриИзмененииУчитыватьНДССервер();
	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, , СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ВозвращенныеТовары, , СтруктураДействий, КэшированныеЗначения);
		
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС, СуммаВсегоВозврат);

	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
	
	ЦенаВключаетНДСПриИзмененииСервер();
	
	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторасчетНДСПриИзменении(Элемент)
	
	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПересчитатьНДС", "Доступность", Объект.АвторасчетНДС);
	
КонецПроцедуры

//	LNK 24.09.2016 12:38:56
&НаКлиенте
Процедура ПерезаполнитьДаннымиИзЗакрытыхЧеков(Команда)

	ПерезаполнитьДаннымиИзЗакрытыхЧековНаСервере();

	ПерерасчетПроизведен = Ложь;
	ВыполнитьАвторасчетНДСКлиент();

КонецПроцедуры

//	NAV:БлокировкаДанныхУчестьДокументВNavision
#Область ОбслуживаниеКнопкиУчестьДокументВNavision

//	LNK 20.09.2016 09:39:43
//	Обработчик события кнопки подсистемы "NAV"
&НаКлиенте
Процедура РегистрацияПередачиВNavisionНажатие(Элемент)

	ПоказатьОповещениеПользователя("Регистрация в Navision не допускается"
		,, "Назначить текущие продажи для учёта в КСУ Navision можно только с помощью документа «Закрытие кассового дня»!"
		, БиблиотекаКартинок.Предупреждение32);

КонецПроцедуры

&НаКлиенте	//	LNK 18.06.2023 06:12:51
Процедура РегистрацияПередачиВNavisionПовторнаяНажатие(Элемент)

	ВнешниеИсточникиКлиент.ПодтвердитьПовторнуюВыгрузкуВNavision(ЭтотОбъект);

КонецПроцедуры

//	LNK 20.09.2016 09:39:43
//	Обработчик события кнопки подсистемы "NAV"
&НаСервере
Процедура РегистрацияПередачиВNavisionНаСервере()	Экспорт

//	Оформление элементов в обработчике подсистемы "NAV"
	ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект, Истина);

КонецПроцедуры

//	LNK 23.10.2017 14:18:28
&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник)

//	LNK 20.09.2016 09:36:30
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ИмяСобытия = "РегистрацияПередачиВNavision" Тогда

		Если НЕ Источник = Объект.Ссылка И Параметр.Объект = Объект.Ссылка Тогда

		//	Оформление элементов в обработчике подсистемы "NAV"
			ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "Товары"

&НаКлиенте	//	LNK 04.07.2023 10:23:41
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)


	Если СтрНайти("ТоварыПродавец,ТоварыДисконтнаяКарта,ТоварыВладелецДисконтнойКарты,ВозвращенныеТоварыПродавец,
				  |ВозвращенныеТоварыДисконтнаяКарта,ВозвращенныеТоварыВладелецДисконтнойКарты", Элемент.ТекущийЭлемент.Имя) Тогда
		Отказ = ЛОЖЬ ;
		Возврат;
	КонецЕсли;
	
	Если НЕ ИсключительныйРежим Тогда

		Отказ = Истина;	//	LNK 04.07.2023 10:31:51

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если НЕ ИсключительныйРежим Тогда

		Отказ = Истина;	//	LNK 04.07.2023 10:31:51

	Иначе

		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

		Если НЕ ТекущиеДанные = Неопределено Тогда	//	LNK 30.05.2020 10:41:19

			ОбработкаТабличнойЧастиТоварыКлиент.ОчиститьСерийныеНомера(ТекущиеДанные, Объект);
			БонусныеБаллыКлиент.ТоварыПередУдалением(ТекущиеДанные, Объект, Отказ);

		КонецЕсли;
		
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ДанныеСтрокиПередИзменением = ОбработкаТабличнойЧастиТоварыКлиент.СкопироватьВСтруктуруЭлементКоллекции(ТекущаяСтрока, Объект.Товары);

	Если Копирование Тогда
		
		ТекущаяСтрока.КлючСвязиСерийныхНомеров = 0;

		ТекущаяСтрока.КлючСвязиБонусныхБаллов		= 0;
		ТекущаяСтрока.СуммаБонусныхБалловНачислено	= 0;
		ТекущаяСтрока.СуммаБонусныхБалловСписано	= 0;
		
	КонецЕсли;

	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	БонусныеБаллыКлиент.ТоварыПриОкончанииРедактирования(ТекущиеДанные, ДанныеСтрокиПередИзменением, Объект, ОтменаРедактирования);	//	LNK 04.07.2021 07:48:28

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);

	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);

	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;

	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
	ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"   , ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	СтруктураДействий.Вставить("ЗаполнитьПодакцизныйТовар");

	НДСОбщегоНазначенияКлиентСервер.СброситьПроверитьФлагПерерасчетПроизведен(ЭтотОбъект);

	СтруктураПараметровСтавкиНДС = Новый Структура;
	СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
	СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСиАкцизногоНалога", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
 	СтруктураДействий.Вставить("ПересчитатьСуммуНДСиАкцизногоНалога", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
			
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
		
	КонецЕсли;

 	СтруктураДействий.Вставить("ПересчитатьСуммуНДСиАкцизногоНалога", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ПриИзмененииТоварыКоличестваУпаковок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
			
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСиАкцизногоНалога", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
 	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСиАкцизногоНалога", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВсегоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураПересчета = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСПоСуммеСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьСуммуПоСуммеСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках", СтруктураПересчета);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСиАкцизногоНалога", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПодакцизныеТоварыДляКоммерческогоИспользованияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСиАкцизногоНалога", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры
 

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "ВозвращенныеТовары"

&НаКлиенте
Процедура ВозвращенныеТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращенныеТовары.ТекущиеДанные;
	
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"   , ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	//СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	СтруктураПараметровСтавкиНДС = Новый Структура;
	СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
	СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
	
	СтруктураДействий.Вставить("ЗаполнитьПодакцизныйТовар");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСиАкцизногоНалога", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
 	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ВозвращенныеТовары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
 	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС, Истина);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС, СуммаВсегоВозврат, Истина);
	
	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращенныеТовары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСиАкцизногоНалога", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ВозвращенныеТовары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС, СуммаВсегоВозврат);
	
	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
			
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.ВозвращенныеТовары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращенныеТовары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСиАкцизногоНалога", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ВозвращенныеТовары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС, СуммаВсегоВозврат);
	
	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.ВозвращенныеТовары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращенныеТовары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСиАкцизногоНалога", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ВозвращенныеТовары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС, СуммаВсегоВозврат);
	
	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращенныеТовары.ТекущиеДанные;
			
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСиАкцизногоНалога", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ВозвращенныеТовары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС, СуммаВсегоВозврат);
	
	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращенныеТовары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСиАкцизногоНалога", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ВозвращенныеТовары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС, СуммаВсегоВозврат);
	
	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыСуммаВсегоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращенныеТовары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураПересчета = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСПоСуммеСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьСуммуПоСуммеСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках", СтруктураПересчета);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ВозвращенныеТовары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС, СуммаВсегоВозврат);
	
	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыСтавкаНДСПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.ВозвращенныеТовары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ВозвращенныеТовары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС, СуммаВсегоВозврат);
	
	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС, СуммаВсегоВозврат);
	
	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте	//	LNK 30.05.2020 10:56:54
Процедура ВозвращенныеТоварыПередУдалением(Элемент, Отказ)

	ТекущиеДанные = Элементы.ВозвращенныеТовары.ТекущиеДанные;

	Если НЕ ТекущиеДанные = Неопределено Тогда	//	LNK 30.05.2020 10:41:19

		ОбработкаТабличнойЧастиТоварыКлиент.ОчиститьСерийныеНомера(ТекущиеДанные, Объект,, "ВозвращенныеТовары");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыПослеУдаления(Элемент)
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС, СуммаВсегоВозврат);
	
	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыВозвратНеЭтойСменыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращенныеТовары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ВозвращенныеТовары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыПодакцизныеТоварыДляКоммерческогоИспользованияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращенныеТовары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСиАкцизногоНалога", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ВозвращенныеТовары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "ОплатаПлатежнымиКартами"

&НаКлиенте
Процедура ОплатаПлатежнымиКартамиВидОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОплатаПлатежнымиКартами.ТекущиеДанные;
	
	ТекущаяСтрока.ПроцентТорговойУступки = ЭквайрингСервер.ПолучитьПроцентТорговойУступкиПлатежнаяКарта(Объект.ДоговорЭквайринга, ТекущаяСтрока.ВидОплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПлатежнымиКартамиСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОплатаПлатежнымиКартами.ТекущиеДанные;
	
	ПересчитатьСуммуТорговойУступки(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПлатежнымиКартамиПроцентТорговойУступкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОплатаПлатежнымиКартами.ТекущиеДанные;
	
	ПересчитатьСуммуТорговойУступки(ТекущаяСтрока);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "ОплатаБанковскимиКредитами"

&НаКлиенте
Процедура ОплатаБанковскимиКредитамиВидОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОплатаБанковскимиКредитами.ТекущиеДанные;
	
	ЭквайрингСервер.ЗаполнитьБанкиПроцентКомиссии(ТекущаяСтрока.ВидОплаты, ТекущаяСтрока.БанкКредитор, ТекущаяСтрока.ПроцентБанковскойКомиссии);
	
	ПересчитатьСуммуБанковскойКомиссии(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаБанковскимиКредитамиСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОплатаБанковскимиКредитами.ТекущиеДанные;
	
	ПересчитатьСуммуБанковскойКомиссии(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаБанковскимиКредитамиПроцентБанковскойКомиссииПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОплатаБанковскимиКредитами.ТекущиеДанные;
	
	ПересчитатьСуммуБанковскойКомиссии(ТекущаяСтрока);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "ПродажиПоДисконтнымКартам"

&НаКлиенте
Процедура ПродажиПоДисконтнымКартамДисконтнаяКартаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПродажиПоДисконтнымКартам.ТекущиеДанные;
	
	ТекущаяСтрока.ВладелецДисконтнойКарты = ВладелецДисконтнойКарты(ТекущаяСтрока.ДисконтнаяКарта)
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "ПогашениеПодарочныхСертификатов"

&НаКлиенте
Процедура ПогашениеПодарочныхСертификатовПодарочныйСертификатПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПогашениеПодарочныхСертификатов.ТекущиеДанные;
	
	ЗаполнитьРеквизитыСтрокиПогашенияПодарочныхСертификатов(ТекущаяСтрока.ПодарочныйСертификат, ТекущаяСтрока.ИспользоватьСерийныеНомера, ТекущаяСтрока.Номинал);
	Если ТекущаяСтрока.ИспользоватьСерийныеНомера Тогда
		ТекущаяСтрока.Количество = 1;
	КонецЕсли;
	
	РассчитатьСуммуНоминала(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПогашениеПодарочныхСертификатовКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПогашениеПодарочныхСертификатов.ТекущиеДанные;
	
	РассчитатьСуммуНоминала(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПогашениеПодарочныхСертификатовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока и Копирование Тогда
		ТекущиеДанные = Элементы.ПогашениеПодарочныхСертификатов.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.СерийныйНомер) Тогда
			ТекущиеДанные.СерийныйНомер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийТабличныхЧастейБонусныеБаллы

&НаКлиенте	//	LNK 23.09.2021 07:34:46
Процедура НачислениеБонусныхБалловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ИменаКолонок = Новый Массив;
	ИменаКолонок.Добавить("НачислениеБонусныхБалловКонтрагент");
	ИменаКолонок.Добавить("НачислениеБонусныхБалловПрограммаЛояльности");
	ИменаКолонок.Добавить("НачислениеБонусныхБалловДокументПродажи");

	РаботаСФормамиКлиент.ОбработчикСобытияСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ИменаКолонок, "НачислениеБонусныхБаллов", Элементы);

КонецПроцедуры

&НаКлиенте	//	LNK 23.09.2021 07:34:46
Процедура ОплатаБонуснымиБалламиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ИменаКолонок = Новый Массив;
	ИменаКолонок.Добавить("ОплатаБонуснымиБалламиКонтрагент");
	ИменаКолонок.Добавить("ОплатаБонуснымиБалламиПрограммаЛояльности");
	ИменаКолонок.Добавить("ОплатаБонуснымиБалламиДокументПродажи");

	РаботаСФормамиКлиент.ОбработчикСобытияСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ИменаКолонок, "ОплатаБонуснымиБаллами", Элементы);

КонецПроцедуры

#КонецОбласти
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВвестиПодарочныеСертификаты(Команда)

	Перем ПересчетКоличества;
	
	ПересчетКоличества = Ложь;

	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиСерийныеНомераНоменклатурыВТЧ(ЭтотОбъект,
		Объект.СерийныеНомера,
		Элементы.Товары.ТекущиеДанные, 
		ПересчетКоличества,
		"Товары"
	);
		
	Если ПересчетКоличества Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
	КонецЕсли

КонецПроцедуры

&НаКлиенте	//	LNK 12.02.2020 12:00:53
Процедура ВвестиПодарочныеСертификатыВозврат(Команда)

	Перем ПересчетКоличества;
	
	ПересчетКоличества = Ложь;

	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиСерийныеНомераНоменклатурыВТЧ(ЭтотОбъект,
		Объект.СерийныеНомера,
		Элементы.ВозвращенныеТовары.ТекущиеДанные, 
		ПересчетКоличества,
		"ВозвращенныеТовары"
	);
		
	Если ПересчетКоличества Тогда
		ВозвращенныеТоварыКоличествоУпаковокПриИзменении(Неопределено);
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ТоварыОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", "отчет о розничных продажах");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
	ПараметрыФормы.Вставить("РежимПодбораСУчетомЗапрещенныхКПродаже", Истина);	//	LNK 31.07.2020 08:54:02
	ПараметрыФормы.Вставить("РежимПодбораСУчетомМинимальныхЦен", Истина);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если НЕ ЕстьПравоИзменятьЦену() Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", "отчет о розничных продажах");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
	ПараметрыФормы.Вставить("РежимПодбораСУчетомЗапрещенныхКПродаже", Истина);	//	LNK 31.07.2020 08:54:02
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти", "ВозвращенныеТовары");
	ПараметрыФормы.Вставить("РежимПодбораБезСертификатов", Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуВвестиСерийныеНомера", Истина);	
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если НЕ ЕстьПравоИзменятьЦену() Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтотОбъект,ПараметрыУказанияСерий) Тогда
		ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтотОбъект);
		
		Если ЗначениеВозврата <> Неопределено Тогда
			ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	Если ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекШтрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекШтрихкод);
				
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере	//	LNK 01.07.2021 10:56:14
Процедура ВыполнитьПодготовкуОбъектаПередОткрытиемФормы(ПриСоздании)	Экспорт
	
	Если ПриСоздании = Ложь ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПерезаполнитьНалогообложениеНДС();

		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.ВозвращенныеТовары);
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.ВозвращенныеТовары);
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПодакцизныйТоварВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПодакцизныйТоварВТЧСервер(Объект.ВозвращенныеТовары);

		УстановитьДоступностьЦенаВключаетНДС();

	КонецЕсли;
	
	Если ПриСоздании = Истина Тогда

		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);

	КонецЕсли;

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС, СуммаВсегоВозврат);

	Если ПриСоздании = Ложь Тогда	//	только при вызове из "ПриЧтенииНаСервере"

		ЗаполнитьРеквизитыПогашенияПодарочныхСертификатов();

	КонецЕсли;

	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвращенныеТовары, ПолучитьСтруктуруЗависимыхРеквизитов());

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) 
	
	Если СтруктураПараметров.Свойство("Количество") Тогда 
		КоличествоУпаковок = СтруктураПараметров.Количество;
		СтруктураПараметров.Удалить("Количество");
	Иначе
		КоличествоУпаковок = 1;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураПараметров);
	
	Если МассивСтрок.Количество() > 0 Тогда 
		
		ТекущаяСтрока = МассивСтрок[0];
		КоэффициентУпаковки1 = ?(ЗначениеЗаполнено(СтруктураПараметров.Упаковка), СтруктураПараметров.Упаковка.Коэффициент, 1);
		КоэффициентУпаковки2 = ?(ЗначениеЗаполнено(ТекущаяСтрока.Упаковка), ТекущаяСтрока.Упаковка.Коэффициент, 1);
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + КоличествоУпаковок*КоэффициентУпаковки2/КоэффициентУпаковки1;			
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
	Иначе 
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ТекущаяСтрока.КоличествоУпаковок = КоличествоУпаковок;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураПараметров);
		
		СтруктураДействий = Новый Структура;
		
		СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
		СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"   , ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
		
		СтруктураПараметровСтавкиНДС = Новый Структура;
		СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
		СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
		
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
		
		СтруктураДействий.Вставить("ЗаполнитьПодакцизныйТовар", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДСи АкцизногоНалога", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
	КонецЕсли;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПогашенияПодарочныхСертификатов()
	
	Если Объект.ПогашениеПодарочныхСертификатов.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ПогашениеПодарочныхСертификатов.ПодарочныйСертификат КАК Справочник.Номенклатура) КАК ПодарочныйСертификат,
	|	ПогашениеПодарочныхСертификатов.Количество
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	&ПогашениеПодарочныхСертификатов КАК ПогашениеПодарочныхСертификатов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.ПодарочныйСертификат.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
	|	ТаблицаВЗапросе.ПодарочныйСертификат.Номинал КАК Номинал,
	|	ТаблицаВЗапросе.Количество * ТаблицаВЗапросе.ПодарочныйСертификат.Номинал КАК СуммаНоминала
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе"
	);
	
	Запрос.УстановитьПараметр("ПогашениеПодарочныхСертификатов", Объект.ПогашениеПодарочныхСертификатов.Выгрузить());
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Для Индекс = 0 По ТаблицаЗапроса.Количество() - 1 Цикл
		ЗаполнитьЗначенияСвойств(Объект.ПогашениеПодарочныхСертификатов[Индекс], ТаблицаЗапроса[Индекс]);
	КонецЦикла;
	
	РассчитатьСуммуНоминаловВсего(СуммаНоминаловВсего);
	
КонецПроцедуры

// Заполняются реквизиты ТЧ из подарочного реквизита
//
// Параметры
//  ПодарочныйСертификат - Справочник. Номенклатура
//  ИспользоватьСерийныеНомера - Булево
//  Номинал - Число
//
&НаСервере
Процедура ЗаполнитьРеквизитыСтрокиПогашенияПодарочныхСертификатов(ПодарочныйСертификат, ИспользоватьСерийныеНомера, Номинал)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.ИспользоватьСерийныеНомера,
	|	Номенклатура.Номинал
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ПодарочныйСертификат);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ИспользоватьСерийныеНомера = Выборка.ИспользоватьСерийныеНомера;
		Номинал                    = Выборка.Номинал;
	Иначе
		ИспользоватьСерийныеНомера = Ложь;
		Номинал                    = 0;
	КонецЕсли;
	

КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()

	ИсключительныйРежим = ТехническаяПоддержкаПовтИсп.ИсключительныйРежим();	//	LNK 04.07.2023 10:26:04

	Если НЕ ИсключительныйРежим Тогда	//	LNK 04.07.2023 10:29:44

		Элементы.Товары.ТолькоПросмотр							= Истина;
		Элементы.ВозвращенныеТовары.ТолькоПросмотр				= Истина;
		Элементы.НачислениеБонусныхБаллов.ТолькоПросмотр		= Истина;
		Элементы.ОплатаБонуснымиБаллами.ТолькоПросмотр			= Истина;
		Элементы.ОплатаПлатежнымиКартами.ТолькоПросмотр			= Истина;
		Элементы.ОплатаБанковскимиКредитами.ТолькоПросмотр		= Истина;
		Элементы.ПродажиПоДисконтнымКартам.ТолькоПросмотр		= Истина;
		Элементы.ПогашениеПодарочныхСертификатов.ТолькоПросмотр	= Истина;

	КонецЕсли;

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыЦена.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСумма.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ВозвращенныеТоварыЦена.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ВозвращенныеТоварыСумма.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
//	LNK 04.01.2017 13:54:53
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Номер.ТолькоПросмотр,
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьНомерДокумента);
КонецПроцедуры

// Обработка магнитного или штрихового кода на клиенте
//
// Параметры
//  СтруктураПараметровКлиента - структура параметров
//
&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод)
	
	Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") 
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
		
		СтрокаСообщения = НСтр("ru = 'Данные по коду не найдены: %1%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекКод);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ТекстПредупреждения") Тогда
		
		ПоказатьПредупреждение(, СтруктураПараметровКлиента.ТекстПредупреждения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ВыборТоваров") Тогда
		
		ВыбранноеЗначение = ОткрытьФормуМодально("ОбщаяФорма.ВыборНоменклатуры", Новый Структура("АдресТоваровВХранилище", СтруктураПараметровКлиента.ВыборТоваров));
		Если ВыбранноеЗначение <> Неопределено Тогда
			
			ДобавитьНайденныеПозицииТоваров(ВыбранноеЗначение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура обработатки штрих-кодов из ТСД
//
&НаКлиенте
Процедура ОбработатьШтрихкодыИзТСД(ДанныеШтрикодов)
	
	Для Индекс = 0 По ДанныеШтрикодов.Количество() - 1 Цикл
		ТекКод = ДанныеШтрикодов[Индекс].Штрихкод;
		ТекКоличество = ДанныеШтрикодов[Индекс].Количество;
		СтруктураПараметровКлиента = ПолученШтрихкодИзТСД(ТекКод, ТекКоличество);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
	КонецЦикла;
	
КонецПроцедуры

//Процедура заполняет товары из подбора
//Параметры: 
//ВыбранноеЗначение - Структура,
//ИмяТабличнойЧасти  - Строка
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТабличнойЧасти  = "")
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	ИмяТабличнойЧасти = ?(ПустаяСтрока(ИмяТабличнойЧасти), "Товары", ИмяТабличнойЧасти);
	ТаблицаСерийныхНомеров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресСерийныхНомеровВХранилище);
	ЕстьСерийныеНомера = (ИмяТабличнойЧасти = "Товары") И (ТаблицаСерийныхНомеров.Количество() > 0);
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, Упаковка, Цена, КоличествоУпаковок, Сумма");
		Если ЕстьСерийныеНомера Тогда
			МассивСерийныхНомеров = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(СтрокаТовара.КлючСвязиСерийныхНомеров , ТаблицаСерийныхНомеров);
			ТекущаяСтрока.КлючСвязиСерийныхНомеров = ОбработкаТабличнойЧастиТоварыСервер.ДобавитьСерийныеНомераВТабличнуюЧасть(Объект.СерийныеНомера, МассивСерийныхНомеров, 0);
		КонецЕсли;
		СтруктураДействий = Новый Структура;
		
		СтруктураПараметровСтавкиНДС = Новый Структура;
		СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
		СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
	
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
		
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект[ИмяТабличнойЧасти]);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС, СуммаВсегоВозврат);
	ЗаполнитьСтатусыУказанияСерийСервер();
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвращенныеТовары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
	
КонецПроцедуры

// Рассчет суммы банковской комиссии
//
// Параметры
//  ТекущаяСтрока - текущая строка таблицы оплаты платежными картами
//
&НаКлиенте
Процедура ПересчитатьСуммуБанковскойКомиссии(ТекущаяСтрока)

	ТекущаяСтрока.СуммаБанковскойКомиссии = ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентБанковскойКомиссии / 100;

КонецПроцедуры

// Рассчет суммы торговой уступки
//
// Параметры
//  ТекущаяСтрока - текущая строка таблицы оплаты платежными картами
//
&НаКлиенте
Процедура ПересчитатьСуммуТорговойУступки(ТекущаяСтрока)

	ТекущаяСтрока.СуммаТорговойУступки = ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентТорговойУступки / 100;

КонецПроцедуры

// ПодключаемоеОборудование
&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) 
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаВесовыхТоваров");
	СтруктураДействий.Вставить("ПроверкаТоваров");
	
	Возврат ПодключаемоеОборудованиеРТ.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзТСД(Штрихкод, Количество) 
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаВесовыхТоваров");
	СтруктураДействий.Вставить("ПроверкаТоваров");
	СтруктураДействий.Вставить("ИспользоватьКоличество", Количество);

	Возврат ПодключаемоеОборудованиеРТ.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

//Получаем с сервера 
&НаСервере
Функция ВладелецДисконтнойКарты(ДисконтнаяКарта)

	Возврат ДисконтнаяКарта.ВладелецКарты;

КонецФункции

// Процедура- обработчик изменения кассы ККМ на сервере.
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ПриИзмененииКассаККМСервер()

	Если НЕ Объект.Магазин = Объект.КассаККМ.Магазин Тогда
	
		Объект.Магазин = Объект.КассаККМ.Магазин;
	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ОтчетОРозничныхПродажах.ПараметрыУказанияСерий(Объект));
		УстановитьВидимостьЭлементовСерий();
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ЦенаВключаетНДС = ОбщегоНазначенияРТСервер.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "ПравилоЦенообразования"), "ЦенаВключаетНДС");
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КассаККМ, "Владелец");

	Если НЕ Объект.Организация = Организация 
		ИЛИ НЕ Объект.ЦенаВключаетНДС = ЦенаВключаетНДС Тогда
	
		Объект.Организация     = Организация;
		Объект.ЦенаВключаетНДС = ЦенаВключаетНДС;
		
		СтруктураДействий = Новый Структура;
		
		СтруктураПараметровСтавкиНДС = Новый Структура;
		СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
		СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
		СтруктураПараметровСтавкиНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
		
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
		
		СтруктураПараметровПересчетаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		СтруктураПараметровПересчетаНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
		
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПараметровПересчетаНДС);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		СтруктураТЧ = Новый Структура;
		СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		
		СтруктураТЧ = Новый Структура;
		СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.ВозвращенныеТовары);
		ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС, СуммаВсегоВозврат);
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвращенныеТовары, ПолучитьСтруктуруЗависимыхРеквизитов());
		
		ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает изменение количества упаковок
//
// Параметры
//  Нет;
//
&НаКлиенте
Процедура ПриИзмененииТоварыКоличестваУпаковок()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);

КонецПроцедуры

// Заполняет реквизиты документа по умолчанию в зависимости от выбранного налогообложения НДС.
//
&НаСервере
Процедура ПриИзмененииУчитыватьНДССервер(ПересчитыватьНДС = Истина)

	УстановитьДоступностьЦенаВключаетНДС(Истина);
	УстановитьТекущуюСтраницуСуммПодвала();
	
	Если ПересчитыватьНДС = Истина Тогда

		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.УчитыватьНДС);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
		
		СтруктураТЧ = Новый Структура;
		СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
		
		СтруктураТЧ = Новый Структура;
		СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.ВозвращенныеТовары);
		ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);

	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС, СуммаВсегоВозврат);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвращенныеТовары, ПолучитьСтруктуруЗависимыхРеквизитов());

	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвращенныеТовары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
КонецПроцедуры

// Расчет суммы номинала
//
// Параметры
//  ТекущаяСтрока - текущая строка ТЧ ПогашениеПодарочныхСертификатов
//
&НаКлиенте
Процедура РассчитатьСуммуНоминала(ТекущаяСтрока)

	ТекущаяСтрока.СуммаНоминала = ТекущаяСтрока.Количество * ТекущаяСтрока.Номинал;
	
	РассчитатьСуммуНоминаловВсего(СуммаНоминаловВсего);

КонецПроцедуры

// Рассчитать сумму номиналов всего
//
// Параметры
//  СуммаНоминаловВсего - Число;
//
&НаСервере
Процедура РассчитатьСуммуНоминаловВсего(СуммаНоминаловВсего)

	СуммаНоминаловВсего =  Объект.ПогашениеПодарочныхСертификатов.Итог("СуммаНоминала");

КонецПроцедуры

//Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора
//Параметры:
//Отказ - Булево
&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин"" не заполнено'"), Объект, "Объект.Магазин",,Отказ);
	КонецЕсли;
		
КонецПроцедуры

// Устанавливает доступность поля ЦенаВключаетНДС
//
&НаСервере
Процедура УстановитьДоступностьЦенаВключаетНДС(ПриИзменении = Ложь)

	Если ПриИзменении Тогда

		Если НЕ Объект.УчитыватьНДС И Объект.ЦенаВключаетНДС Тогда

			Объект.ЦенаВключаетНДС = Ложь;
			Объект.АвторасчетНДС   = Ложь;

		ИначеЕсли Объект.УчитыватьНДС И Объект.Ссылка.Пустая() Тогда

			Объект.ЦенаВключаетНДС = ОбщегоНазначенияРТСервер.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(Объект.Магазин.ПравилоЦенообразования, "ЦенаВключаетНДС");
			Объект.АвторасчетНДС   = НДСИсходящийСервер.ПолучитьФлагАвторасчетНДС(Объект.УчитыватьНДС, Объект.Магазин, Объект.Дата, Истина);

		КонецЕсли;

	КонецЕсли;

	Элементы.АвторасчетНДС.ТолькоПросмотр	= НЕ Объект.УчитыватьНДС;
	Элементы.ЦенаВключаетНДС.ТолькоПросмотр	= НЕ Объект.УчитыватьНДС;

	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПересчитатьНДС", "Доступность", Объект.АвторасчетНДС);

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
// Установить параметры выбора элементов формы
//
// Параметры
//  Нет
//
&НаСервере
Процедура УстановитьПараметрыВыбораЭлементовФормы()

	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипОплаты", Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта));
	Элементы.ОплатаПлатежнымиКартамиВидОплаты.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипОплаты", Перечисления.ТипыОплатЧекаККМ.БанковскийКредит));
	Элементы.ОплатаБанковскимиКредитамиВидОплаты.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	Элементы.ГруппаПродажиПоДисконтнымКартам.Видимость = НЕ Объект.ПродажиПоДисконтнымКартам.Количество() = 0;
	
КонецПроцедуры

//Процедура учитывает изменение параметров налогообложения в документе
//
&НаСервере
Процедура УстановитьТекущуюСтраницуСуммПодвала()
	
	Если Объект.УчитыватьНДС Тогда
		Элементы.СтраницыИтогоПродажа.ТекущаяСтраница = Элементы.ИтогоСНДСПродажа;
		Элементы.СтраницыИтогоВозврат.ТекущаяСтраница = Элементы.ИтогоСНДСВозврат;
		Элементы.СтраницыИтогоВыручка.ТекущаяСтраница = Элементы.ИтогоСНДСВыручка;
	Иначе
		Элементы.СтраницыИтогоПродажа.ТекущаяСтраница = Элементы.ИтогоБезНДСПродажа;
		Элементы.СтраницыИтогоВозврат.ТекущаяСтраница = Элементы.ИтогоБезНДСВозврат;
		Элементы.СтраницыИтогоВыручка.ТекущаяСтраница = Элементы.ИтогоБезНДСВыручка;
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьПравоИзменятьЦену()
	
	Возврат УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруЗависимыхРеквизитов()
	
	Возврат Новый Структура("ВозвратНеЭтойСмены", "Сумма, СуммаНДС");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСуммуВыручкиПодвала(Форма)
	
	КоллекцияТовары = Форма.Объект.Товары;
	КоллекцияВозвраты = Форма.Объект.ВозвращенныеТовары;
	
	Форма.СуммаВсегоВыручки = Форма.СуммаВсего - КоллекцияВозвраты.Итог("СуммаВозвратНеЭтойСмены");
	Форма.СуммаВсегоВыручкиНДС = КоллекцияТовары.Итог("СуммаНДС") - КоллекцияВозвраты.Итог("СуммаНДСВозвратНеЭтойСмены");
	Форма.СуммаВсегоВыручкиАкциз = КоллекцияТовары.Итог("СуммаАкцизногоНалога") - КоллекцияВозвраты.Итог("СуммаАкцизногоНалога");

	Форма.Элементы.ТоварыСуммаВсего.ТекстПодвала = Формат(КоллекцияТовары.Итог("СуммаВсего"), "ЧДЦ=2");
	Форма.Элементы.ВозвращенныеТоварыСуммаВсего.ТекстПодвала = Формат(КоллекцияВозвраты.Итог("СуммаВсего"), "ЧДЦ=2");

	ВсегоБонусныхБаллов = Форма.Объект.НачислениеБонусныхБаллов.Количество() + Форма.Объект.ОплатаБонуснымиБаллами.Количество();

	Форма.Элементы.ГруппаБонусныеБаллы.Заголовок = "Бонусные баллы" + ?(ВсегоБонусныхБаллов = 0, "", " (" + Формат(ВсегоБонусныхБаллов, "ЧГ=") + ")");
	 
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Серии

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.ТоварыСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыУказатьСерии.Видимость        = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвращенныеТовары, ПолучитьСтруктуруЗависимыхРеквизитов());

	ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУказанияСерий()
	
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	
	ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы ,ПараметрыФормыУказанияСерий,ЭтотОбъект);
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ТаблицаЗагрузкиИзТСД = Неопределено;
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД);
	ОбработатьШтрихкодыИзТСД(ТаблицаЗагрузкиИзТСД);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПерезаполнитьДаннымиИзЗакрытыхЧековНаСервере()

	Если НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда

		Сообщить("Не установлен режим исключительного доступа! Отказано.");
		Возврат;

	КонецЕсли;

	ДокументОбъект = РеквизитФормыВЗначение("Объект");

	Отказ = Ложь;
	ОбработкаЗаполнения = Обработки.ЗакрытиеКассовойСмены.Создать();
	ОбработкаЗаполнения.КассаККМ = ДокументОбъект.КассаККМ;
	ОбработкаЗаполнения.ОбработатьЧекиКассовойСмены(ДокументОбъект, Отказ, Новый СписокЗначений,,,, Истина);

	Если НЕ Отказ Тогда

		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

		ПриИзмененииУчитыватьНДССервер(Ложь);

		Модифицированность = Истина;

		Сообщить("Документ перезаполнен. Но Вам необходимо проверить состояние чеков в составе этого отчёта о продажах, а так же возможно присутствующих документов списания подарков!");

	Иначе

		Сообщить("В процессе заполнения произошла ошибка. Отказано.");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ВыполнитьАвторасчетНДСКлиент()
    
	Если НЕ ПерерасчетПроизведен И Объект.АвторасчетНДС Тогда
		
		ВыполнитьАвторасчетНДССервер();
		ПерерасчетПроизведен = Истина;

		ПоказатьОповещениеПользователя("Авторасчет НДС",, "Перерасчёт НДС выполнен!", БиблиотекаКартинок.Информация32);

		Возврат Истина;

	КонецЕсли;

	Возврат Ложь;
    
КонецФункции

&НаСервере
Процедура ВыполнитьАвторасчетНДССервер()
    
    // соответствие для хранения погрешностей округлений
    ПогрешностиОкругления = Новый Соответствие();
    // пересчет сумм НДС с учетом ошибок округления
    НДСИсходящийСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.Товары, Объект.Ссылка, Объект.ЦенаВключаетНДС, ПогрешностиОкругления, "Товары", "грн",,,Неопределено);
    
КонецПроцедуры  

&НаСервере
Процедура ПерезаполнитьНалогообложениеНДС()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("УчитыватьНДС");
	
	НовоеНалогообложение = НДСОбщегоНазначенияСервер.ПолучитьИОбработатьДоступностьНалогообложениеНДС(Объект.Организация,, Объект.Дата, Истина, Элементы, МассивЭлементов);
	
	Если НДСОбщегоНазначенияСервер.НужноОбработатьНовоеНалогообложениеНДС(Объект.УчитыватьНДС, НовоеНалогообложение) Тогда
		
		Объект.УчитыватьНДС = НовоеНалогообложение;
		ПриИзмененииУчитыватьНДССервер();
		
	Иначе
		
		МассивЭлементов.Очистить();
		МассивЭлементов.Добавить("ГруппаАвторасчетНДС");

		НДСИсходящийСервер.ПолучитьФлагИОбработатьДоступностьАвторасчетаНДС(Объект.УчитыватьНДС, Объект.Магазин, Объект.Дата, Элементы, МассивЭлементов, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДС(Команда)
    
    Если ВыполнитьАвторасчетНДСКлиент() Тогда
        
        ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
        ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
        
    КонецЕсли;
    
    ОбновитьСуммуВыручкиПодвала(ЭтотОбъект);
    
КонецПроцедуры

// -HVOYA. 21.02.2017 17:22:38, Львова Е.А.

&НаСервереБезКонтекста	//	LNK 08.07.2020 12:14:13
Процедура ВыполнитьПередачуСертификатовВУправляющуюСистемуНаСервере(ТекущаяСсылка, Выполнено, ТекстСообщения, АдресСсылки)

	Выполнено = Ложь;
	ТекстСообщения = "";

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		СписокПроектов = РозничныеПродажиСервер.ПолучитьПроектыПогашенныхСертификатов(ТекущаяСсылка);

		Для каждого Проект Из СписокПроектов Цикл

			Выполнено = ПодарочныеСертификатыСервер.ВыполнитьПередачуСертификатовВУправляющуюСистему(ТекущаяСсылка, Проект, ТекстСообщения, АдресСсылки);

			Если Выполнено Тогда

				ТехническаяПоддержка.УдалитьЗаписьВоздействия(ТекущаяСсылка, Проект, "ВЕРНУТЬ_СЕРТИФИКАТЫ");

			Иначе

				ТехническаяПоддержка.НазначитьОбъектуДействие(ТекущаяСсылка, Проект, "ВЕРНУТЬ_СЕРТИФИКАТЫ", Ложь, ПараметрыСеанса.ТекущийПользователь);	//	LNK 08.07.2020 07:11:52

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаСервере
//А++ 20241210 по задаче https://awdev.atlassian.net/browse/RETAIL1C-1004
Процедура УстановитьДоступностьАдмДоп()
	Если РольДоступна("АдминистраторСистемы") или РольДоступна("Администрирование") ТОгда
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаПерезаполнитьДаннымиИзЗакрытыхЧеков").Доступность = истина;
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаПерезаполнитьДаннымиИзЗакрытыхЧеков").Видимость = истина;
		
		Если ТолькоПросмотр Тогда
			Возврат;
			//ТолькоПросмотр = НЕ ТолькоПросмотр; - надо уточнить у Сергея
		КОнецЕсли;
		
		Элементы.Товары.ТолькоПросмотр = ЛОЖЬ;
		Элементы.ВозвращенныеТовары.ТолькоПросмотр = ЛОЖЬ;
		
		Элементы.ТоварыПродавец.ТолькоПросмотр = ЛОЖЬ;
		Элементы.ТоварыДисконтнаяКарта.ТолькоПросмотр = ЛОЖЬ;
		Элементы.ТоварыВладелецДисконтнойКарты.ТолькоПросмотр = ЛОЖЬ;
		
		Элементы.ВозвращенныеТоварыПродавец.ТолькоПросмотр = ЛОЖЬ;
		Элементы.ВозвращенныеТоварыДисконтнаяКарта.ТолькоПросмотр = ЛОЖЬ;
		Элементы.ВозвращенныеТоварыВладелецДисконтнойКарты.ТолькоПросмотр = ЛОЖЬ;
		
		Элементы.Товары.ИзменятьСоставСтрок = ЛОЖЬ;
		Элементы.ВозвращенныеТовары.ИзменятьСоставСтрок = ЛОЖЬ;
		Элементы.Товары.КоманднаяПанель.Видимость = ЛОЖЬ;
		Элементы.ВозвращенныеТовары.КоманднаяПанель.Видимость = ЛОжь;
		Элементы.Товары.КонтекстноеМеню.Видимость = ЛОЖь;
		Элементы.ВозвращенныеТовары.КонтекстноеМеню.Видимость = ЛОЖь;
		
		
	Иначе
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаПерезаполнитьДаннымиИзЗакрытыхЧеков").Доступность = ЛОЖЬ;
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаПерезаполнитьДаннымиИзЗакрытыхЧеков").Видимость = ЛОЖЬ;
		
	КонецЕсли;
	//А++ 20241210 по задаче https://awdev.atlassian.net/browse/RETAIL1C-1004
КонецПроцедуры;











