
Перем ЕстьРасчетыСКонтрагентами Экспорт; // Тип Булево, значение Истина, если хозяйственная операция отражает расчеты с контрагентом

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипОснования = ТипЗнч(ДанныеЗаполнения);

	Если ТипОснования <> Тип("Неопределено") И Документы.ТипВсеСсылки().СодержитТип(ТипОснования) Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		
		Если ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ЗаполнитьВозвратТоваровОтПокупателя(ДанныеЗаполнения, ДанныеЗаполнения);
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
			
			ЗаполнитьПоЗаказПоставщику(ДанныеЗаполнения, ДанныеЗаполнения);
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			
			ЗаполнитьПоПриходномуКассовомуОрдеру(ДанныеЗаполнения, ДанныеЗаполнения);
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			
			ЗаполнитьПоЗаказПоставщику(ДанныеЗаполнения, ДанныеЗаполнения);
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			
			ЗаполнитьПоЗаявкеНаРасходование(ДанныеЗаполнения, ДанныеЗаполнения);
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
			
			ЗаполнитьПоВедомостиНаЗарплату(ДанныеЗаполнения, ДанныеЗаполнения);
			
		КонецЕсли;
	ИначеЕсли ТипОснования = Тип("Структура") Тогда

		Если ДанныеЗаполнения.Свойство("ЗаполнениеВозвратТоваровОтРозничногоПокупателя") Тогда

			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
			СтрокаПлатежа = РасшифровкаПлатежа.Добавить();
			СтрокаПлатежа.ДокументРасчетовСКонтрагентом = ДанныеЗаполнения.ДокументРасчетовСКонтрагентом;
			СтрокаПлатежа.СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
			СтрокаПлатежа.Сумма = ДанныеЗаполнения.СуммаДокумента;

		ИначеЕсли ДанныеЗаполнения.Свойство("ВыплатаЗарплаты") Тогда

			ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения.Основание);
			ЗаполнитьПоВедомостиНаЗарплату(ДанныеЗаполнения.Основание, ДанныеЗаполнения, ДанныеЗаполнения);

		Иначе

			// Заполнение Организации и Кассы из данных заполнения или из ХранилищеОбщихНастроек      //
			// Значения ХранилищеОбщихНастроек заполняют поля отборов на форме списка документа        //
			// Если ХранилищеОбщихНастроек не содержит заполненных значений,                           //
			// в этом случае данные заполняются из ДанныеЗаполнения                                    //
			// Входящие параметры из данных заполнений или из ХранилищеОбщихНастроек не могут содержать //
			// Организацию отличную от организации владельца кассы                                     //
			ПроверитьВозможностьВводаНаОснованииБезЗаявки(ДанныеЗаполнения.ХозяйственнаяОперация);
			
			Если ДанныеЗаполнения.Свойство("Организация", Организация) И НЕ Организация.Пустая() Тогда
				
			//	LNK 27.09.2017
				ДанныеЗаполнения.Свойство("Касса", Касса);
			
			Иначе

				Касса = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущаяКасса",);
				Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущаяОрганизация",);
				Если НЕ ЗначениеЗаполнено(Организация) Тогда
					Если ДанныеЗаполнения.Свойство("Организация", Организация) И НЕ ЗначениеЗаполнено(Организация) Тогда
						Если ЗначениеЗаполнено(Пользователи.ТекущийПользователь()) Тогда
							Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПользователяПоУмолчанию(Пользователи.ТекущийПользователь());
							Если ЗначениеЗаполнено(Организация) Тогда
								ДанныеЗаполнения.Вставить("ОрганизацияИзНастроекПользователя");
							Иначе
								Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
							КонецЕсли;
						Иначе
							Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеЗаполнено(Касса)
				И НЕ ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДанныеЗаполнения, "Касса")) Тогда

					ДанныеЗаполнения.Свойство("Касса", Касса);

				КонецЕсли;

			//	LNK 20.02.2017 13:00:50
				Если ЗначениеЗаполнено(Организация) Тогда

					Касса = ФинансыВызовСервера.ПолучитьКассуПоУмолчанию(Организация);
					ДанныеЗаполнения.Вставить("Касса", Касса);

				КонецЕсли;

			КонецЕсли;
			
			Если ДанныеЗаполнения.Свойство("ХозяйственнаяОперация")
				И ЗначениеЗаполнено(Организация)
				Тогда

				Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк
					Тогда

					ДанныеЗаполнения.Вставить("БанковскийСчет");
					ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(Перечисления.ФормыОплаты.Безналичная, ДанныеЗаполнения);

				ИначеЕсли ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ
					Тогда

					Если ЗначениеЗаполнено(Касса) Тогда

						КассаККМ = ЗначениеНастроекПовтИсп.ПолучитьКассуККМПоУмолчанию(Организация, , Касса.Магазин);

					КонецЕсли;

				ИначеЕсли ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеРасхожденийДенежныхСредств Тогда

					ДанныеЗаполнения.Вставить("Основание" , "Пояснювальна записка");
					ДанныеЗаполнения.Вставить("Приложение", "Акт списання");

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	Иначе

		Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация, Пользователи.ТекущийПользователь());
		ПроверитьВозможностьВводаНаОснованииБезЗаявки(ЭтотОбъект.ХозяйственнаяОперация);

		Если ЗначениеЗаполнено(Организация) Тогда
		//	Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Организация, , , Касса, Пользователи.ТекущийПользователь());
		//	LNK 20.02.2017 11:39:24
			Касса = ФинансыВызовСервера.ПолучитьКассуПоУмолчанию(Организация);
		КонецЕсли;

	КонецЕсли;

	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, Режим);
	
	// Инициализация данных документа
	Документы.РасходныйКассовыйОрдер.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Движения по денежным средствам.
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваНаличные(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваКПоступлениюНаличные(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьВыплаченнаяЗарплата(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваКВыплате(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	ЗакупкиСервер.ОбновитьСостояниеОплаты(ЭтотОбъект);
	
КонецПроцедуры

// В обработчике события ОбработкаПроверкиЗаполнения документа выполняются следующие действия:
// - Устанавливает проверку заполнения реквизитов формы и табличной части "Расшифровка платежа".
// - Проверка соответствия организации документа и организации кассы ККМ.
// - При инкассации денег в банк, проверяется на соответствие организация документа и организация банковского счета.
// - При передаче денег между кассами, в зависимости от хозяйственной операции, проверяется соответствие организаций касс и организации документа.
// - При выплате зарплаты, проверяется ведомость на выплату.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.РасходныйКассовыйОрдер.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ОбщегоНазначенияРТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов
	);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику
	ИЛИ  ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ	Тогда
		ПроверяемыеРеквизиты.Добавить("Контрагент");
	КонецЕсли;
	
	ДенежныеСредстваСерверПривилегированный.ПроверитьЗаполнениеРасшифровкиПлатежа(
		ЭтотОбъект,
		СуммаДокумента,
		ХозяйственнаяОперация,
		Отказ
	);
	ДенежныеСредстваСервер.ПроверитьКассуККМ(
		ЭтотОбъект,
		Отказ
	);
	ПроверитьБанковскийСчет(Отказ);
	ДенежныеСредстваСервер.ПроверитьКассуПолучателя(ЭтотОбъект, Отказ);
	ПроверитьЗаполнениеДокументаПриВыдачеЗарплаты(Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

	ЗакупкиСервер.ОбновитьСостояниеОплаты(ЭтотОбъект);

КонецПроцедуры

// В обработчике события ПередЗаписью документа выполняется:
// - Удаление строк в табличной части расшифровка платежа для операций отражающих выдачу денег в другие кассы и инкассации.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
//	LNK 16.02.2017 14:33:05
	ЗаполнениеОбъектовСобытия.ОбщиеДействияПередЗаписью(ЭтотОбъект, Отказ);
	
	Если ОбменДанными.Загрузка Тогда

		Возврат;

	КонецЕсли;

	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый"   , ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	ДополнительныеСвойства.Вставить("Ссылка"     , ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Проведен, ПометкаУдаления", Ложь));	//	LNK 18.02.2019 11:56:52

	Если НЕ Проводился Тогда

	//	LNK 23.05.2019 13:16:00	
		Проводился = ДополнительныеСвойства.Ссылка.Проведен;

	КонецЕсли;

//	LNK 26.09.2016 09:02:34
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ЛОЖЬ И НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() И НЕ ЭтоНовый() Тогда

		Если ВнешниеИсточникиСобытия.ПередачаNavision(Ссылка) Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ «" + СокрЛП(Ссылка) + "» учтён в КСУ Navision! Изменения запрещены. Отказано.", Ссылка,,, Отказ);
			Возврат;

		КонецЕсли;

	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НомерОрдера) ИЛИ ЭтоНовый() Тогда

		СформироватьНомерОрдера();

	КонецЕсли;

	Если НЕ РасшифровкаПлатежа.Количество() = 0
		И (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
	//	LNK 27.06.2017 14:15:18
	//	ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию)
	Тогда
		РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	
КонецПроцедуры

//	LNK 26.09.2016 09:03:10
Процедура ПриЗаписи(Отказ)

//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "РегистрацияПередачиВNavision", Ложь) Тогда

		ВнешниеИсточникиСобытия.УстановитьПереданоNavision(Ссылка
			, ОбщегоНазначенияРТСервер.ПолучитьМагазиныПоОбъекту(Ссылка), Перечисления.ВидыПередачиNavision.ПереданВNavision,,,, Истина);

	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	НомерОрдера = "";
	СуммаДокумента = 0;
	РасшифровкаПлатежа.Очистить();
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

// Заполняет документ формируемый из рабочего места кассира
//
Процедура ЗаполнитьПоВедомостиНаЗарплату(Знач ДокументОснованиеВедомостьНаВыплатуЗарплаты, ДанныеЗаполнения, Знач ДанныеЗаполненияСтруктура = Неопределено)
	
	Если ДанныеЗаполненияСтруктура = Неопределено Тогда
		
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснованиеВедомостьНаВыплатуЗарплаты);
		ДанныеЗаполнения.Вставить("ПлатежнаяВедомость", ДокументОснованиеВедомостьНаВыплатуЗарплаты);
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям);
		ДанныеЗаполнения.Вставить("Организация", ДокументОснованиеВедомостьНаВыплатуЗарплаты.Организация);
		СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация);
		ДанныеЗаполнения.Вставить("СуммаДокумента", СуммаДокументаПоВедомости(ДокументОснованиеВедомостьНаВыплатуЗарплаты));
		ДанныеЗаполнения.Вставить("Касса");
		Если ЗначениеЗаполнено(ДокументОснованиеВедомостьНаВыплатуЗарплаты)  Тогда
			ДанныеЗаполнения.Вставить("Магазин", ДокументОснованиеВедомостьНаВыплатуЗарплаты.Магазин);
		Иначе
			ДанныеЗаполнения.Вставить("Магазин");
		КонецЕсли;
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(Перечисления.ФормыОплаты.Наличная, ДанныеЗаполнения);
	Иначе
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснованиеВедомостьНаВыплатуЗарплаты);
		ДанныеЗаполнения.Вставить("ПлатежнаяВедомость", ДокументОснованиеВедомостьНаВыплатуЗарплаты);
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ДанныеЗаполненияСтруктура.ХозяйственнаяОперация);
		ДанныеЗаполнения.Вставить("Организация", ДокументОснованиеВедомостьНаВыплатуЗарплаты.Организация);
		Если ДанныеЗаполненияСтруктура.Свойство("Касса") Тогда
			ДанныеЗаполнения.Вставить("Касса", ДанныеЗаполненияСтруктура.Касса);
		Иначе
			ДанныеЗаполнения.Вставить("Касса");
			Если ЗначениеЗаполнено(ДокументОснованиеВедомостьНаВыплатуЗарплаты)  Тогда
				ДанныеЗаполнения.Вставить("Магазин", ДокументОснованиеВедомостьНаВыплатуЗарплаты.Магазин);
			Иначе
				ДанныеЗаполнения.Вставить("Магазин");
			КонецЕсли;
			ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(Перечисления.ФормыОплаты.Наличная, ДанныеЗаполнения);
		КонецЕсли; 
		
		СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ДанныеЗаполненияСтруктура.ХозяйственнаяОперация);
		Если ДанныеЗаполненияСтруктура.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику Тогда
			Если ДанныеЗаполненияСтруктура.Свойство("Контрагент") И ДанныеЗаполненияСтруктура.Свойство("СуммаДокумента") Тогда
				ДанныеЗаполнения.Вставить("Контрагент", ДанныеЗаполненияСтруктура.Контрагент);
				ДанныеЗаполнения.Вставить("СуммаДокумента", ДанныеЗаполненияСтруктура.СуммаДокумента);
				Дата = ТекущаяДатаСеанса();
			Иначе
				ВыборкаРаботниковВедомости = Документы.РасходныйКассовыйОрдер.РаботникиНаПолучениеЗарплаты(ДокументОснованиеВедомостьНаВыплатуЗарплаты);
				Если ВыборкаРаботниковВедомости.Количество() = 1.00 Тогда
					ВыборкаРаботниковВедомости.Следующий();
					ДанныеЗаполнения.Вставить("Контрагент", ВыборкаРаботниковВедомости.Работник);
					ДанныеЗаполнения.Вставить("СуммаДокумента", ВыборкаРаботниковВедомости.Сумма);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Запрос = Новый Запрос();
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ВЫБОР	КОГДА
			|			МАКСИМУМ(
			|						ВЫБОР	КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.НеВыплачено)
			|								ТОГДА ИСТИНА
			|								ИНАЧЕ ЛОЖЬ
			|						КОНЕЦ
			|					) = ИСТИНА
			|			ТОГДА ""Ведомость на выплату зарплаты содержит строки с невыплаченной зарплатой!""
			|			КОГДА
			|			СУММА(
			|					ВЫБОР	КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
			|							ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Сумма
			|							ИНАЧЕ 0.00
			|					КОНЕЦ
			|				) = СУММА(ЕСТЬNULL(ВыплаченнаяЗарплата.Сумма, 0.00))
			|			ТОГДА ""По текущей ведомости нет сумм к выплате!""
			|			ИНАЧЕ """" // Ошибок нет
			|	КОНЕЦ КАК СтрокаОшибок,
			|	ВЫБОР
			|			КОГДА
			|			МАКСИМУМ(
			|						ВЫБОР	КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.НеВыплачено)
			|								ТОГДА ИСТИНА
			|								ИНАЧЕ ЛОЖЬ
			|						КОНЕЦ
			|					) = ИСТИНА
			|			ТОГДА ИСТИНА
			|			КОГДА
			|			СУММА(
			|					ВЫБОР	КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
			|							ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Сумма
			|							ИНАЧЕ 0.00
			|					КОНЕЦ
			|				) = СУММА(ЕСТЬNULL(ВыплаченнаяЗарплата.Сумма, 0.00))
			|			ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК Отказ
			|ИЗ
			|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
			|ПО
			|	ЗарплатаКВыплатеОрганизаций.Ссылка = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ВыплаченнаяЗарплата КАК ВыплаченнаяЗарплата
			|ПО
			|	ВыплаченнаяЗарплата.ПлатежнаяВедомость = &Ссылка
			|	И ВыплаченнаяЗарплата.Работник = ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо
			|	И ВыплаченнаяЗарплата.Магазин = ЗарплатаКВыплатеОрганизаций.Магазин
			|	И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
			|ГДЕ
			|	ЗарплатаКВыплатеОрганизаций.Ссылка = &Ссылка
			|СГРУППИРОВАТЬ ПО
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
			|";
			Запрос.УстановитьПараметр("Ссылка", ДокументОснованиеВедомостьНаВыплатуЗарплаты);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если Выборка.Отказ = Истина Тогда
					ВызватьИсключение Выборка.СтрокаОшибок;
				КонецЕсли;
			КонецЕсли;
			СуммаДокумента = СуммаДокументаПоВедомости(ДокументОснованиеВедомостьНаВыплатуЗарплаты);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет документ введенный на основании документа "Заказ поставщику"
// Параметры:
//           ДокументОснование - ДокументСсылка - Ссылка на документ основания
//           ДанныеЗаполнения - ДокументСсылка - в процедуре параметр переопределяется в тип структура в которую добавляются данные заполнения.
Процедура ЗаполнитьПоЗаказПоставщику(Знач ДокументОснование, ДанныеЗаполнения)
	
	ПроверитьВозможностьВводаНаОснованииБезЗаявки(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснование);
	ДанныеЗаполнения.Вставить("Контрагент", ДокументОснование.Контрагент);
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	ДанныеЗаполнения.Вставить("Организация", ДокументОснование.Организация);
	ДанныеЗаполнения.Вставить("Магазин", ДокументОснование.Магазин);
	СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация);
	
	Если Не ЗначениеЗаполнено(Касса) Тогда
		ДанныеЗаполнения.Вставить("Касса");
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(Перечисления.ФормыОплаты.Наличная, ДанныеЗаполнения);
	КонецЕсли;
	
	СуммаНеОплаченногоЭтапа = ЗакупкиСервер.ПолучитьСуммуНеОплаченногоЭтапа(ДокументОснование, Перечисления.ФормыОплаты.Наличная);
	
	Если СуммаНеОплаченногоЭтапа = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Нет задолженности по запланированным оплатам на дату: %Дата% (наличная форма оплаты) по документу ""%ДокументОснование%"".
									|Перепланируйте этапы оплат или введите сумму вручную.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(ТекущаяДатаСеанса(),"ДФ=dd.MM.yyyy"));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДокументОснование%", ДокументОснование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "РасшифровкаПлатежа");
	КонецЕсли;
	
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.ДокументРасчетовСКонтрагентом = ДокументОснование;
	СтрокаПлатеж.Сумма = СуммаНеОплаченногоЭтапа;
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	СуммаДокумента = СуммаНеОплаченногоЭтапа;
	
	ДанныеЗаполнения.Вставить("СуммаДокумента", СуммаДокумента);
	Если Выдать="" И ЗначениеЗаполнено(ДокументОснование.Контрагент) Тогда
		
		ЕстьРасчетыСКонтрагентами = ДенежныеСредстваСервер.ЕстьРасчетыСКонтрагентами(ДанныеЗаполнения.ХозяйственнаяОперация);
		
		Если ЕстьРасчетыСКонтрагентами Тогда
			ДанныеЗаполнения.Вставить("Выдать", ?(ДокументОснование.Контрагент.НаименованиеПолное="",ДокументОснование.Контрагент.Наименование, ДокументОснование.Контрагент.НаименованиеПолное));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет документ введенный на основании документов "Поступление товаров", "Возврат товаров от покупателя"
// Параметры:
//           ДокументОснование - ДокументСсылка - Ссылка на документ основания
//           ДанныеЗаполнения - ДокументСсылка - в процедуре параметр переопределяется в тип структура в которую добавляются данные заполнения.
Процедура ЗаполнитьВозвратТоваровОтПокупателя(Знач ДокументОснование, ДанныеЗаполнения)
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДокументОснования.Ссылка                                КАК ДокументОснование,
	|	МАКСИМУМ(ДокументОснования.Контрагент)                  КАК Контрагент,
	|	МАКСИМУМ(ДокументОснования.Организация)                 КАК Организация,
	|	МАКСИМУМ(ДокументОснования.Магазин)                     КАК Магазин,
	|	МАКСИМУМ(ДокументОснования.ЦенаВключаетНДС)             КАК ЦенаВключаетНДС,
	|	СУММА(ЕСТЬNULL(ТоварыДокументОснования.Сумма, ДокументОснования.СуммаДокумента)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ТоварыДокументОснования.СуммаНДС, 0.00)) КАК СуммаНДС
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ДокументОснования
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ПоступлениеТоваров.Товары КАК ТоварыДокументОснования
	|ПО
	|	ТоварыДокументОснования.Ссылка = &Ссылка
	|ГДЕ
	|	ДокументОснования.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ДокументОснования.Ссылка
	|;
	|ВЫБРАТЬ
	|	ДанныеДокумента.ДокументОснование            КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент                   КАК Контрагент,
	|	ДанныеДокумента.Организация                  КАК Организация,
	|	ДанныеДокумента.Магазин                      КАК Магазин,
	|	ДанныеДокумента.ЦенаВключаетНДС              КАК ЦенаВключаетНДС,
	|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	ВЫБОР	КОГДА ДанныеДокумента.ЦенаВключаетНДС
	|			ТОГДА ДанныеДокумента.Сумма
	|			ИНАЧЕ ДанныеДокумента.Сумма + ДанныеДокумента.СуммаНДС
	|	КОНЕЦ                                        КАК СуммаДокумента,
	|	ЕСТЬNULL(Контрагенты.Наименование, "")       КАК Наименование,
	|	ЕСТЬNULL(Контрагенты.НаименованиеПолное, "") КАК НаименованиеПолное
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.Контрагенты КАК Контрагенты
	|ПО
	|	Контрагенты.Ссылка = ДанныеДокумента.Контрагент
	|";
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПоступлениеТоваров", "Документ.ВозвратТоваровОтПокупателя");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПоступлениеТоваров.Товары", "Документ.ВозвратТоваровОтПокупателя.Товары");
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	Иначе
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	КонецЕсли;
	РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
	ДанныеЗаполнения = Новый Структура();
	
	Для Каждого РеквизитЗаполнения Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(РеквизитЗаполнения.Имя);
	КонецЦикла;
	ВыборкаДанныхЗаполнения = РезультатЗапроса.Выбрать();
	ВыборкаДанныхЗаполнения.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаДанныхЗаполнения);
	
	Если Не ЗначениеЗаполнено(Касса) Тогда
		ДанныеЗаполнения.Вставить("Касса");
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(Перечисления.ФормыОплаты.Наличная, ДанныеЗаполнения);
	КонецЕсли;
	
	СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация);
	
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	СтрокаПлатеж.ДокументРасчетовСКонтрагентом = ДокументОснование;
	СтрокаПлатеж.Сумма = ВыборкаДанныхЗаполнения.СуммаДокумента;
		
		Если Выдать="" И ЗначениеЗаполнено(ДокументОснование.Контрагент) Тогда
			
			ЕстьРасчетыСКонтрагентами = ДенежныеСредстваСервер.ЕстьРасчетыСКонтрагентами(ДанныеЗаполнения.ХозяйственнаяОперация);
				
			Если ЕстьРасчетыСКонтрагентами Тогда
				ДанныеЗаполнения.Вставить("Выдать", ?(ДанныеЗаполнения.НаименованиеПолное="",ДанныеЗаполнения.Наименование, ДанныеЗаполнения.НаименованиеПолное));
			КонецЕсли;
			
		КонецЕсли;
	
КонецПроцедуры

// Заполняет документ введенный на основании документа "Приходный кассовый ордер"
// Параметры:
//           ДокументОснование - ДокументСсылка - Ссылка на документ основания
//           ДанныеЗаполнения - ДокументСсылка - в процедуре параметр переопределяется в тип структура в которую добавляются данные заполнения.
Процедура ЗаполнитьПоПриходномуКассовомуОрдеру(Знач ДокументОснованиеПриходныйКассовыйОрдер, ДанныеЗаполнения)
	
	Если ДокументОснованиеПриходныйКассовыйОрдер.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		// Документ не вводится на основании ПКО с другими хоз. операциями
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить расходный кассовый ордер на основании документа %1'"),
			ДокументОснованиеПриходныйКассовыйОрдер
		);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("Касса", ДокументОснованиеПриходныйКассовыйОрдер.Касса);
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснованиеПриходныйКассовыйОрдер);
	ДанныеЗаполнения.Вставить("Контрагент", ДокументОснованиеПриходныйКассовыйОрдер.Контрагент);
	ДанныеЗаполнения.Вставить("Организация", ДокументОснованиеПриходныйКассовыйОрдер.Организация);
	ДанныеЗаполнения.Вставить("СуммаДокумента", ДокументОснованиеПриходныйКассовыйОрдер.РасшифровкаПлатежа.Итог("Сумма"));
	
	СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация);
	
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.Сумма                         = ДокументОснованиеПриходныйКассовыйОрдер.РасшифровкаПлатежа.Итог("Сумма");
	СтрокаПлатеж.ДокументРасчетовСКонтрагентом = ДокументОснованиеПриходныйКассовыйОрдер;
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Ответственный = Пользователи.ТекущийПользователь();

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда

		ДанныеЗаполнения.Свойство("ХозяйственнаяОперация", ХозяйственнаяОперация);
		ДанныеЗаполнения.Свойство("БанковскийСчет"   , БанковскийСчет);
		ДанныеЗаполнения.Свойство("ДокументОснование", ДокументОснование);
		ДанныеЗаполнения.Свойство("Касса"     , Касса);
		ДанныеЗаполнения.Свойство("КассаККМ"  , КассаККМ);
		ДанныеЗаполнения.Свойство("Основание" , Основание);
		ДанныеЗаполнения.Свойство("Приложение", Приложение);

	КонецЕсли;

	Если ПустаяСтрока(Основание) Тогда

		Основание = ФинансыВызовСервера.ПолучитьТекстОснованиеПлатежа(Касса, "РасходныйКассовыйОрдер", ХозяйственнаяОперация);

	КонецЕсли;

	ГлавныйБухгалтер = ФинансыВызовСервера.ПолучитьПоследнегоОтветственного(Касса, "РасходныйКассовыйОрдер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);

	Если НЕ ДанныеЗаполнения = Неопределено И РасшифровкаПлатежа.Количество() = 0 Тогда

		СтрокаПлатеж       = РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.Сумма = СуммаДокумента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация);

	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаявкеНаРасходование(Знач ДокументОснование, ДанныеЗаполнения)

	Если ДокументОснование.Статус <> Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена Тогда
		
		Текст = НСтр("ru = 'Расходный кассовый ордер возможно вводить на основании заявки со статусом ""Утверждена""'");
		ВызватьИсключение Текст;
		
	КонецЕсли;
	
	Если НЕ (ДокументОснование.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная ИЛИ ДокументОснование.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.ПустаяСсылка()) Тогда
		
		Текст = НСтр("ru = 'Расходный кассовый ордер возможно вводить на основании заявки с формой оплаты ""Наличные"" или ""Любая""'");
		ВызватьИсключение Текст;
		
	КонецЕсли;

	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснование);
	ДанныеЗаполнения.Вставить("Контрагент", ДокументОснование.Контрагент);
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ДокументОснование.ХозяйственнаяОперация);
	ДанныеЗаполнения.Вставить("Организация", ДокументОснование.Организация);
	ДанныеЗаполнения.Вставить("Магазин", ДокументОснование.Магазин);
	ДанныеЗаполнения.Вставить("Касса", ДокументОснование.Касса);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.НомерСтроки,
		|	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом,
		|	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств
		|ПОМЕСТИТЬ ТЧДок
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа
		|ГДЕ
		|	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Ссылка = &РаспоряжениеНаРасходованиеДенежныхСредств
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДенежныеСредстваКВыплатеОстатки.ДокументРасчета КАК ДокументРасчетовСКонтрагентом,
		|	ДенежныеСредстваКВыплатеОстатки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	-ДенежныеСредстваКВыплатеОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(, РаспоряжениеНаРасходованиеДенежныхСредств = &РаспоряжениеНаРасходованиеДенежныхСредств) КАК ДенежныеСредстваКВыплатеОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТЧДок КАК ТЧДок
		|		ПО ДенежныеСредстваКВыплатеОстатки.ДокументРасчета = ТЧДок.ДокументРасчетовСКонтрагентом
		|			И ДенежныеСредстваКВыплатеОстатки.СтатьяДвиженияДенежныхСредств = ТЧДок.СтатьяДвиженияДенежныхСредств
		|ГДЕ
		|	ДенежныеСредстваКВыплатеОстатки.СуммаОстаток < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТЧДок.НомерСтроки";
	
	Запрос.УстановитьПараметр("РаспоряжениеНаРасходованиеДенежныхСредств", ДокументОснование);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Текст = НСтр("ru = 'Заявка на расходование ДС полностью оплачена.
							|Ввод документов оплаты не требуется.'");
		ВызватьИсключение Текст;
	Иначе
		РасшифровкаПлатежа.Загрузить(Результат.Выгрузить());
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("СуммаДокумента", РасшифровкаПлатежа.Итог("Сумма"));
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	
	Если ОбщегоНазначенияРТ.НужноЗаполнитьСписокРегистровДляКонтроля(ДополнительныеСвойства.РежимЗаписи, Дата) Тогда

		Массив.Добавить(Движения.ДенежныеСредстваНаличные);
		Массив.Добавить(Движения.ДенежныеСредстваКВыплате);
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ Тогда

			Массив.Добавить(Движения.ДенежныеСредстваКПоступлениюНаличные);

		КонецЕсли;

	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

// Получает из ведомости сумму выплаченной заработной платы на которую не сформирован расходный кассовый ордер
// 
// Параметры:
//   ПлатежнаяВедомость - Тип ДокументСсылка.ЗарплатаКВыплатеОрганизаций - Ведомость на которую формируется расходный кассовый ордер
//Возвращаемое значение:
//   Тип Число - Сумма не выплаченной расходным кассовым ордером зарплаты по ведомости
//
Функция СуммаДокументаПоВедомости(ПлатежнаяВедомость)
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ВыплаченнаяЗарплата КАК ВыплаченнаяЗарплата
	|ПО
	|	ВыплаченнаяЗарплата.ПлатежнаяВедомость = &Ссылка
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.ФизЛицо = ВыплаченнаяЗарплата.Работник
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Ссылка
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
	|	И ВыплаченнаяЗарплата.Работник ЕСТЬ NULL
	|";
	Запрос.УстановитьПараметр("Ссылка", ПлатежнаяВедомость);
	ВыборкаСумма = Запрос.Выполнить().Выбрать();
	Если ВыборкаСумма.Следующий() Тогда
		Возврат ВыборкаСумма.Сумма;
	Иначе
		Возврат 0.00;
	КонецЕсли;
	
КонецФункции

// Процедура проверяет организацию банковского счета на соответствие организации выбранной в документе.
//
Процедура ПроверитьБанковскийСчет(Отказ)
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк
	   И ЗначениеЗаполнено(Касса)
	   И ЗначениеЗаполнено(БанковскийСчет)
	Тогда
		
		РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.РеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
		Если Организация <> РеквизитыСчета.Организация Тогда
			Текст = НСтр("ru = 'Организация счета получателя не соответствует организации документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"БанковскийСчет",
				,
				Отказ
			);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаПриВыдачеЗарплаты(Отказ)
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику Тогда
		Если НЕ ЗначениеЗаполнено(Контрагент) ИЛИ НЕ ЗначениеЗаполнено(ПлатежнаяВедомость) Тогда
			возврат;
		КонецЕсли;
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		Если НЕ ЗначениеЗаполнено(ПлатежнаяВедомость) Тогда
			возврат;
		КонецЕсли;
	Иначе
		возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	&Ссылка                КАК Ссылка,
	|	&ПлатежнаяВедомость    КАК ПлатежнаяВедомость,
	|	&Физлицо               КАК Физлицо,
	|	&СуммаДокумента        КАК СуммаДокумента,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Касса                 КАК Касса
	|ПОМЕСТИТЬ РасходныйКассовыйОрдер
	|ИНДЕКСИРОВАТЬ ПО
	|	ПлатежнаяВедомость,
	|	Физлицо
	|;
	|ВЫБРАТЬ
	|	ВЫБОР	КОГДА ВыплаченнаяЗарплата.Работник ЕСТЬ НЕ NULL
	|			ТОГДА ""По этому работнику указанной платежной ведомости уже есть расходный кассовый ордер!""
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
	|			ТОГДА ""По этому работнику указанной платежной ведомости сумма задепонирована!""
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо ЕСТЬ NULL
	|			ТОГДА ""Работник отсутствует в ведомости!""
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.НеВыплачено)
	|			ТОГДА ""Работнику не выплачена заработная плата!""
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Сумма <> РасходныйКассовыйОрдер.СуммаДокумента
	|			ТОГДА ""Сумма документа не соответствует выплаченной зарплаты в ведомости!""
	|			КОГДА Кассы.Магазин <> ЗарплатаКВыплатеОрганизаций.Магазин
	|			ТОГДА ""Магазин кассы не должен отличается от магазина указанного в платежной ведомости!""
	|			ИНАЧЕ """" // Ошибок нет
	|	КОНЕЦ КАК СтрокаОшибок,
	|	ВЫБОР	КОГДА ВыплаченнаяЗарплата.Работник ЕСТЬ НЕ NULL
	|			ТОГДА ИСТИНА
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
	|			ТОГДА ИСТИНА
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.НеВыплачено)
	|			ТОГДА ИСТИНА
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Сумма <> РасходныйКассовыйОрдер.СуммаДокумента
	|			ТОГДА ИСТИНА
	|			КОГДА Кассы.Магазин <> ЗарплатаКВыплатеОрганизаций.Магазин
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отказ,
	|	ВЫБОР	КОГДА ВыплаченнаяЗарплата.Работник ЕСТЬ НЕ NULL
	|			ТОГДА ""Контрагент""
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
	|			ТОГДА ""Контрагент""
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо ЕСТЬ NULL
	|			ТОГДА ""Контрагент""
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.НеВыплачено)
	|			ТОГДА ""Контрагент""
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Сумма <> РасходныйКассовыйОрдер.СуммаДокумента
	|			ТОГДА ""Контрагент""
	|			КОГДА Кассы.Магазин <> ЗарплатаКВыплатеОрганизаций.Магазин
	|			ТОГДА ""ПлатежнаяВедомость""
	|			ИНАЧЕ """" // Ошибок нет
	|	КОНЕЦ НаименованиеПоляОшибки
	|ИЗ
	|	РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ПО
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РасходныйКассовыйОрдер.ПлатежнаяВедомость
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = РасходныйКассовыйОрдер.Физлицо
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
	|ПО
	|	ЗарплатаКВыплатеОрганизаций.Ссылка = РасходныйКассовыйОрдер.ПлатежнаяВедомость
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ВыплаченнаяЗарплата КАК ВыплаченнаяЗарплата
	|ПО
	|	ВыплаченнаяЗарплата.ПлатежнаяВедомость = РасходныйКассовыйОрдер.ПлатежнаяВедомость
	|	И ВыплаченнаяЗарплата.Работник = РасходныйКассовыйОрдер.Физлицо
	|	И ВыплаченнаяЗарплата.Регистратор <> &Ссылка
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.Кассы КАК Кассы
	|ПО
	|	Кассы.Ссылка = РасходныйКассовыйОрдер.Касса
	|ГДЕ
	|	РасходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику)
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ВЫБОР
	|			КОГДА МАКСИМУМ(ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплатаНеВыплачено.ВыплаченностьЗарплаты, ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.ПустаяСсылка))) = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.НеВыплачено)
	|			ТОГДА ""Ведомость на выплату зарплаты содержит строки с невыплаченной зарплатой!""
	|			КОГДА СУММА(ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма, 0.00)) = СУММА(ЕСТЬNULL(ВыплаченнаяЗарплата.Сумма, 0.00))
	|			ТОГДА ""По текущей ведомости нет сумм к выплате!""
	|			КОГДА СУММА(ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма, 0.00)) - СУММА(ЕСТЬNULL(ВыплаченнаяЗарплата.Сумма, 0.00)) <> МАКСИМУМ(РасходныйКассовыйОрдер.СуммаДокумента)
	|			ТОГДА ""Сумма документа не соответствует выплаченной зарплате в ведомости!""
	|			КОГДА МАКСИМУМ(Кассы.Магазин) <> МАКСИМУМ(ЗарплатаКВыплатеОрганизаций.Магазин)
	|			ТОГДА ""Магазин кассы не должен отличается от магазина указанного в платежной ведомости!""
	|			ИНАЧЕ """" // Ошибок нет
	|	КОНЕЦ КАК СтрокаОшибок,
	|	ВЫБОР
	|			КОГДА МАКСИМУМ(ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплатаНеВыплачено.ВыплаченностьЗарплаты, ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.ПустаяСсылка))) = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.НеВыплачено)
	|			ТОГДА ИСТИНА
	|			КОГДА СУММА(ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма, 0.00)) = СУММА(ЕСТЬNULL(ВыплаченнаяЗарплата.Сумма, 0.00))
	|			ТОГДА ИСТИНА
	|			КОГДА СУММА(ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма, 0.00)) - СУММА(ЕСТЬNULL(ВыплаченнаяЗарплата.Сумма, 0.00)) <> МАКСИМУМ(РасходныйКассовыйОрдер.СуммаДокумента)
	|			ТОГДА ИСТИНА
	|			КОГДА МАКСИМУМ(Кассы.Магазин) <> МАКСИМУМ(ЗарплатаКВыплатеОрганизаций.Магазин)
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отказ,
	|	ВЫБОР
	|			КОГДА МАКСИМУМ(ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплатаНеВыплачено.ВыплаченностьЗарплаты, ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.ПустаяСсылка))) = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.НеВыплачено)
	|			ТОГДА ""ПлатежнаяВедомость""
	|			КОГДА СУММА(ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма, 0.00)) = СУММА(ЕСТЬNULL(ВыплаченнаяЗарплата.Сумма, 0.00))
	|			ТОГДА ""Контрагент""
	|			КОГДА СУММА(ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма, 0.00)) - СУММА(ЕСТЬNULL(ВыплаченнаяЗарплата.Сумма, 0.00)) <> МАКСИМУМ(РасходныйКассовыйОрдер.СуммаДокумента)
	|			ТОГДА ""Контрагент""
	|			КОГДА МАКСИМУМ(Кассы.Магазин) <> МАКСИМУМ(ЗарплатаКВыплатеОрганизаций.Магазин)
	|			ТОГДА ""ПлатежнаяВедомость""
	|			ИНАЧЕ """" // Ошибок нет
	|	КОНЕЦ КАК НаименованиеПоляОшибки
	|ИЗ
	|	РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ПО
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РасходныйКассовыйОрдер.ПлатежнаяВедомость
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
	|ПО
	|	ЗарплатаКВыплатеОрганизаций.Ссылка = РасходныйКассовыйОрдер.ПлатежнаяВедомость
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплатаНеВыплачено
	|ПО
	|	ЗарплатаКВыплатеОрганизацийЗарплатаНеВыплачено.Ссылка = РасходныйКассовыйОрдер.ПлатежнаяВедомость
	|	И ЗарплатаКВыплатеОрганизацийЗарплатаНеВыплачено.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.НеВыплачено)
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ВыплаченнаяЗарплата КАК ВыплаченнаяЗарплата
	|ПО
	|	ВыплаченнаяЗарплата.ПлатежнаяВедомость = РасходныйКассовыйОрдер.ПлатежнаяВедомость
	|	И ВыплаченнаяЗарплата.Работник = ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо
	|	И ВыплаченнаяЗарплата.Регистратор <> &Ссылка
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.Кассы КАК Кассы
	|ПО
	|	Кассы.Ссылка = РасходныйКассовыйОрдер.Касса
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдерРегистратор
	|ПО
	|	РасходныйКассовыйОрдерРегистратор.Ссылка = ВыплаченнаяЗарплата.Регистратор
	|ГДЕ
	|	РасходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям)
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдер.Ссылка
	|
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ПлатежнаяВедомость", ПлатежнаяВедомость);
	Запрос.УстановитьПараметр("Физлицо", Контрагент);
	Запрос.УстановитьПараметр("СуммаДокумента", СуммаДокумента);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("Касса", Касса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Отказ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Выборка.СтрокаОшибок,
				ЭтотОбъект,
				Выборка.НаименованиеПоляОшибки,
				,
				Отказ
			);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьВозможностьВводаНаОснованииБезЗаявки(Операция)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДС")
		И НЕ УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОформлениеРКОРБОБезЗаявки, Ложь) Тогда
		
		ХозОперация = ?(ЗначениеЗаполнено(Операция), Операция, Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
		
		Если НЕ (ХозОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику ИЛИ ХозОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы) Тогда
			Возврат;
		КонецЕсли;
		
		ТекстОшибки = НСтр("ru='Расходный кассовый ордер с операцией ""%1"" необходимо вводить на основании
								|заявки на расходование денежных средств.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ХозОперация);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьНомерОрдера()

//	LNK 01.07.2017 09:49:15
	Если НЕ ДополнительныеСвойства.Свойство("НеФормироватьНомерОрдера") Тогда

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Нумератор", 	   Перечисления.Нумераторы.РасходныйКассовыйОрдер);
		СтруктураПараметров.Вставить("Дата",           Дата);
		СтруктураПараметров.Вставить("Организация",    Организация);
	//	СтруктураПараметров.Вставить("ОбособленноеПодразделение", Касса.ОбособленноеПодразделениеОрганизации);
		СтруктураПараметров.Вставить("ОбособленноеПодразделение", Касса);	//	LNK 30.06.2017 18:44:15
		
		ДенежныеСредстваСервер.СформироватьСтроковыйНомерДокумента(СтруктураПараметров, НомерОрдера);
		ДенежныеСредстваСервер.ЗаписатьОчереднойНомер(СтруктураПараметров, НомерОрдера);

	КонецЕсли;
	
КонецПроцедуры
