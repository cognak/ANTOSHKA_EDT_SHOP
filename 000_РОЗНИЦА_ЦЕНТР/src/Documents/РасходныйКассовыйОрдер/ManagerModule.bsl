#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС


// Определяет отбор на хозяйственную операцию, устанавливаемый на список выбора документа Расходный кассовый ордер
// в форме элемента справочника хранилище шаблонов
//
Функция СвязьПараметровВыбораНаХозяйственнуюОперацию() Экспорт

	МассивПараметровВыбора = Новый Массив();
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту));

	Возврат Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецФункции

// Процедура заполняет массивы реквизитов, зависимых от хозяйственной операции документа.
// Параметры:
//           ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хоз. операции документа для которого необходимо получить массив реквизитов
//           МассивВсехРеквизитов - Неопределено - Выходной параметр с типом Массив в который будут помещены имена всех реквизитов документов
//           МассивРеквизитовОперации - Неопределено - Выходной параметр с типом Массив в который будут помещены имена реквизитов по виду операции документа
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("Организация");
	МассивВсехРеквизитов.Добавить("Касса");
	МассивВсехРеквизитов.Добавить("Контрагент");
	МассивВсехРеквизитов.Добавить("Работник");
	МассивВсехРеквизитов.Добавить("КонтрагентПрочиеРасходы");
	МассивВсехРеквизитов.Добавить("ФизическоеЛицо");
	МассивВсехРеквизитов.Добавить("КассирКассыККМ");
	МассивВсехРеквизитов.Добавить("КассаПолучатель");
	МассивВсехРеквизитов.Добавить("КассаККМ");
	МассивВсехРеквизитов.Добавить("БанковскийСчет");
	МассивВсехРеквизитов.Добавить("ОрганизацияПолучатель");
	МассивВсехРеквизитов.Добавить("ОрганизацияШапка");
	МассивВсехРеквизитов.Добавить("СуммаДокумента");
	МассивВсехРеквизитов.Добавить("ПлатежнаяВедомость");
	МассивВсехРеквизитов.Добавить("НомерСумки");
	МассивВсехРеквизитов.Добавить("СуммаБанкнот");
	МассивВсехРеквизитов.Добавить("ТаблицаОписьСкладываемыхНаличныхДенег");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.Сумма");
	МассивВсехРеквизитов.Добавить("СтатьяДвиженияДенежныхСредств");	//	LNK 27.06.2017 11:42:18

	МассивРеквизитовОперации = Новый Массив;

	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		МассивРеквизитовОперации.Добавить("ОрганизацияШапка");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("БанковскийСчет");
		МассивРеквизитовОперации.Добавить("ПредставлениеРасчетногоСчета");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("НомерСумки");
		МассивРеквизитовОперации.Добавить("СуммаБанкнот");
		МассивРеквизитовОперации.Добавить("ТаблицаОписьСкладываемыхНаличныхДенег");
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		МассивРеквизитовОперации.Добавить("ОрганизацияШапка");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("Контрагент");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Сумма");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом");
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу Тогда
		МассивРеквизитовОперации.Добавить("ОрганизацияШапка");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("КассаПолучатель");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		МассивРеквизитовОперации.Добавить("ОрганизацияШапка");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("Контрагент");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Сумма");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом");
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ Тогда
		МассивРеквизитовОперации.Добавить("ОрганизацияШапка");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("КассаККМ");
		МассивРеквизитовОперации.Добавить("КассирКассыККМ");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("СтатьяДвиженияДенежныхСредств");	//	LNK 27.06.2017 11:43:02
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы Тогда
		МассивРеквизитовОперации.Добавить("ОрганизацияШапка");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("КонтрагентПрочиеРасходы");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Сумма");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию Тогда
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("КассаПолучатель");
		МассивРеквизитовОперации.Добавить("Организация");
		МассивРеквизитовОперации.Добавить("ОрганизацияПолучатель");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику
	Тогда
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("ОрганизацияШапка");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("ПлатежнаяВедомость");
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику Тогда
			МассивРеквизитовОперации.Добавить("Работник");
		КонецЕсли;

//	LNK 22.02.2017 14:06:56
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаФизическомуЛицу Тогда

		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("ОрганизацияШапка");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("ФизическоеЛицо");
	//	МассивРеквизитовОперации.Добавить("СтатьяДвиженияДенежныхСредств");

//	LNK 24.10.2019 11:24:01
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеРасхожденийДенежныхСредств Тогда

		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("ОрганизацияШапка");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("СтатьяДвиженияДенежныхСредств");

	КонецЕсли;

КонецПроцедуры

// Функция возвращает массив типов для ограничения типов элемента формы РасшифровкаПлатежаДокументРасчетовСКонтрагентом
// Параметры:
//           ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Вид операции документа для которого необходимо получить массив типов
// Возвращаемое значение:
//           МассивТиповОграничений - Массив - Массив типов ограничивающих типы для реквизита формы РасшифровкаПлатежаДокументРасчетовСКонтрагентом
//
Функция ОграничениеТипаДокументаРасчетовПоХозяйственнойОперации(ХозяйственнаяОперация) Экспорт
	
	Перем МассивТиповОграничений;
	МассивТиповОграничений = Новый Массив();
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		МассивТиповОграничений.Добавить(Тип("ДокументСсылка.ПоступлениеТоваров"));
		МассивТиповОграничений.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		МассивТиповОграничений.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
		МассивТиповОграничений.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	КонецЕсли;
	Возврат МассивТиповОграничений;
	
КонецФункции

// Функция получет работников по ведости которые не получили зарплату
// Возвращаемое значение:
//           ВыборкаРаботниковВедомости - ВыборкаРезультатаЗапроса
Функция РаботникиНаПолучениеЗарплаты(ПлатежнаяВедомость) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо                КАК Работник,
	|	ПРЕДСТАВЛЕНИЕ(ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо) КАК РаботникПредставление,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма                  КАК Сумма
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ВыплаченнаяЗарплата КАК ВыплаченнаяЗарплата
	|ПО
	|	ВыплаченнаяЗарплата.ПлатежнаяВедомость = &ПлатежнаяВедомость
	|	И ВыплаченнаяЗарплата.Работник = ЗарплатаКВыплатеОрганизацийЗарплата.ФизЛицо
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &ПлатежнаяВедомость
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
	|	И ВыплаченнаяЗарплата.Работник ЕСТЬ NULL
	|";
	Запрос.УстановитьПараметр("ПлатежнаяВедомость", ПлатежнаяВедомость);
	ВыборкаРаботниковВедомости = Запрос.Выполнить().Выбрать();
	Возврат ВыборкаРаботниковВедомости;
	
КонецФункции

// Функция получает реквизиты документа для обмена с конфигурацией "Бухгалтерия для Украины".
//
// Параметры:
//	ДокументСсылка - Документ, для которого необходимо получить реквизиты.
//
// Возвращаемое значение:
//	Структура - Структура реквизитов документа
//
Функция РеквизитыДокументаДляОбменаСБухгалтерией(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств.КорреспондирующийСчет КАК КорреспондирующийСчет,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочиеРасходы)
	|	И ДанныеДокумента.СтатьяДвиженияДенежныхСредств.КорреспондирующийСчет <> """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.НомерСтроки");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КорреспондирующийСчет = Выборка.КорреспондирующийСчет;
		СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДвиженияДенежныхСредств;
	Иначе
		КорреспондирующийСчет = "";
		СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	КонецЕсли;
			
	ВидОперации = "ПрочийРасход";
	
	Если Найти(КорреспондирующийСчет, "66") <> 0
		ИЛИ Найти(КорреспондирующийСчет, "67") <> 0 Тогда
		ВидОперации = "РасчетыПоКредитамИЗаймам";		
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("ВидОперации, Счет, СтатьяДвиженияДенежныхСредств",
		ВидОперации,
		КорреспондирующийСчет,
		СтатьяДвиженияДенежныхСредств
	);
	
	Возврат СтруктураРеквизитов;
		
КонецФункции

//	LNK 23.05.2019 14:03:52
Функция ИспользоватьСелективнуюДоступностьЭлементов(ХозяйственнаяОперация)	Экспорт

	СписокОпераций = Новый Соответствие;
	СписокОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ, Истина);
	СписокОпераций.Вставить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк, Истина);

	Возврат СписокОпераций.Получить(ХозяйственнаяОперация) = Истина;

КонецФункции // ИспользоватьСелективнуюДоступностьЭлементов()

//	LNK 24.05.2019 08:59:46
Функция ЭлементыСелективнойДоступности(ХозяйственнаяОперация)	Экспорт

	ИменаРеквизитов = Новый Соответствие;

	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ Тогда

	//	Дата, Номер ордера, Кассир ККМ, Статья ДДС, Выдать, Основание, Приложение, По документу, Кассир, Бухгалтер и Комментарий
	//	ИменаРеквизитов.Вставить("Объект.Дата", Истина);
		ИменаРеквизитов.Вставить("Объект.НомерОрдера", Истина);
		ИменаРеквизитов.Вставить("Объект.Контрагент", Истина);	//	Кассир ККМ
		ИменаРеквизитов.Вставить("Объект.РасшифровкаПлатежа", Истина);
		ИменаРеквизитов.Вставить("Объект.РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств", Истина);
		ИменаРеквизитов.Вставить("СтатьяДвиженияДенежныхСредств", Истина);
		ИменаРеквизитов.Вставить("Объект.Выдать", Истина);
		ИменаРеквизитов.Вставить("Объект.Основание", Истина);
		ИменаРеквизитов.Вставить("Объект.Приложение", Истина);
		ИменаРеквизитов.Вставить("Объект.ПоДокументу", Истина);
		ИменаРеквизитов.Вставить("Объект.Ответственный", Истина);	//	Кассир
		ИменаРеквизитов.Вставить("Объект.ГлавныйБухгалтер", Истина);
		ИменаРеквизитов.Вставить("Объект.Комментарий", Истина);

	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда

	//	Дата, Номер ордера, БанковскийСчет, Номер сумки, Номер пломбы, Кассир, Бухгалтер, Комментарий
	//	закладка печать - Выдать, Основание, Приложение, по документу
		ИменаРеквизитов.Вставить("Объект.Дата", Истина);
		ИменаРеквизитов.Вставить("Объект.НомерОрдера", Истина);
		ИменаРеквизитов.Вставить("Объект.БанковскийСчет", Истина);
		ИменаРеквизитов.Вставить("Объект.НомерСумки", Истина);
		ИменаРеквизитов.Вставить("Объект.НомерПломбы", Истина);
		ИменаРеквизитов.Вставить("Объект.Ответственный", Истина);	//	Кассир
		ИменаРеквизитов.Вставить("Объект.ГлавныйБухгалтер", Истина);
		ИменаРеквизитов.Вставить("Объект.Комментарий", Истина);
		ИменаРеквизитов.Вставить("Объект.Выдать", Истина);
		ИменаРеквизитов.Вставить("Объект.Основание", Истина);
		ИменаРеквизитов.Вставить("Объект.Приложение", Истина);
		ИменаРеквизитов.Вставить("Объект.ПоДокументу", Истина);

	КонецЕсли;

	Возврат ИменаРеквизитов;

КонецФункции // ЭлементыСелективнойДоступности()

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция проверяет корректность заполнения документа для печати форм сопровождающих инкассацию
// Параметры:
//           ДанныеДокумента      - ВыборкаИзРезультатаЗапроса - Содержит данные документа выводимого на печать
//           ТекстОшибки          - Строка - Параметр формирует команда объекта документа печати, будет заполнен если печать выполняется из формы списка документа.
//                                           Правильное поведение, выполнять из открытой формы документа, так как форма содержит не сохраняемую в объекте таблицу с перечнем банкнот
//           ТаблицаСпискаБанкнот - ДанныеФормыКоллекция - Коллекция строк таблицы (с банкнотами) расположенной на форме документа.
// Возвращаемое значение:
//           РезультатОтрицательнойПроверки - Булево - Если ошибки ИСТИНА, необходимо не выполнять печать.
Функция ЕстьОшибкиПечатиИнкассации(ДанныеДокумента, ТекстОшибки = "", ТаблицаСпискаБанкнот = Неопределено)
	Если ДанныеДокумента.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		РезультатОтрицательнойПроверки = Истина;
		ТекстОшибки = НСтр("ru = 'Хозяйственная операция документа не соответствует выбранной печатной форме'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	Иначе
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			РезультатОтрицательнойПроверки = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ИначеЕсли ЗначениеЗаполнено(ТаблицаСпискаБанкнот) И ТаблицаСпискаБанкнот.Итог("Сумма") <> ДанныеДокумента.СуммаДокумента Тогда
			РезультатОтрицательнойПроверки = Истина;
			ТекстОшибки = НСтр("ru = 'Сумма документа не соответствует сумме банкнот'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Иначе
			РезультатОтрицательнойПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	возврат РезультатОтрицательнойПроверки;
	
КонецФункции

// Процедура заполняет параметы области макета табличного документа выводимого на печать
// Параметы:
//           ОбластьМакетаЛицеваяСторона - ТабличныйДокумент - Область табличного документа для которой необходимо заполнить параметры
//           СведенияООрганизации        - Структура - Содержит значения для заполнения параметров
//           ДанныеПечати                - ВыборкаИзРезультатаЗапроса - Содержит данные документа выводимого на печать.
Процедура ЗаполнитьПараметрыМакетаДляПечатиЛицевойСтороныИнкассации(ОбластьМакетаЛицеваяСторона, СведенияООрганизации, ДанныеПечати)
	Касса = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеПечати.Ссылка,"Касса");
	Директор = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеПечати.Ссылка,"ГлавныйБухгалтер");
	Касир = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеПечати.Ссылка,"Ответственный");
	КасирФизЛицо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Касир,"ФизЛицо");	
	Магазин = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Касса,"Магазин");
	НомерМагазина = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Магазин,"НомерМагазина");
	НомерПломбы =  ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеПечати.Ссылка,"НомерПломбы");
	ОбластьМакетаЛицеваяСторона.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияООрганизации, "ПолноеНаименование", Ложь)+" "+НомерМагазина;
	ОбластьМакетаЛицеваяСторона.Параметры.ПредставлениеОрганизации_ЕДРПОУ = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияООрганизации, "ПолноеНаименование,КодПоЕДРПОУ,", Истина, "uk");
	ОбластьМакетаЛицеваяСторона.Параметры.РасчетныйСчет = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияООрганизации, "Банк,МФО,НомерСчета", Истина, "uk");
	ОбластьМакетаЛицеваяСторона.Параметры.СуммаПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(ДанныеПечати.СуммаДокумента,, "uk");
	ОбластьМакетаЛицеваяСторона.Параметры.СуммаЦифрами = ФормированиеПечатныхФормСервер.ФорматСумм(ДанныеПечати.СуммаДокумента, "");
	ОбластьМакетаЛицеваяСторона.Параметры.НомерСумки = ДанныеПечати.НомерСумки;
	ОбластьМакетаЛицеваяСторона.Параметры.ДатаВедомости = Формат(ДанныеПечати.ДатаДокумента, "Л=uk_UA; ДЛФ=DD");
	ОбластьМакетаЛицеваяСторона.Параметры.НомерПломбы = НомерПломбы;
	ОбластьМакетаЛицеваяСторона.Параметры.Директор = ФизическиеЛица.ФамилияИнициалыФизЛица(Директор);
	ОбластьМакетаЛицеваяСторона.Параметры.Касир = ФизическиеЛица.ФамилияИнициалыФизЛица(КасирФизЛицо);
	
КонецПроцедуры

// Процедура заполняет параметы области макета табличного документа выводимого на печать
// Параметы:
//           ОбластьМакетаЛицеваяСторона - ТабличныйДокумент - Область табличного документа для которой необходимо заполнить параметры
//           СведенияООрганизации        - Структура - Содержит значения для заполнения параметров
//           ДанныеПечати                - ВыборкаИзРезультатаЗапроса - Содержит данные документа выводимого на печать.
Процедура ЗаполнитьПараметрыМакетаДляПечатиЛицевойСтороныИнкассацииПивд(ОбластьМакетаЛицеваяСторона, СведенияООрганизации, ДанныеПечати)
	Касса = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеПечати.Ссылка,"Касса");
	Директор = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеПечати.Ссылка,"ГлавныйБухгалтер");
	Касир = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеПечати.Ссылка,"Ответственный");
	КасирФизЛицо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Касир,"ФизЛицо");	
	Магазин = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Касса,"Магазин");
	НомерМагазина = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Магазин,"НомерМагазина");
	НомерПломбы =  ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеПечати.Ссылка,"НомерПломбы");
	ОбластьМакетаЛицеваяСторона.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияООрганизации, "ПолноеНаименование", Ложь)+" "+НомерМагазина;
//	ОбластьМакетаЛицеваяСторона.Параметры.ПредставлениеОрганизации_ЕДРПОУ = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияООрганизации, "ПолноеНаименование,КодПоЕДРПОУ,", Истина, "uk");
//	ОбластьМакетаЛицеваяСторона.Параметры.РасчетныйСчет = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияООрганизации, "НомерСчета", Истина, "uk");
	ОбластьМакетаЛицеваяСторона.Параметры.РасчетныйСчет = ДанныеПечати.РС;

	ОбластьМакетаЛицеваяСторона.Параметры.СуммаПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(ДанныеПечати.СуммаДокумента,, "uk");
	ОбластьМакетаЛицеваяСторона.Параметры.СуммаЦифрами = ФормированиеПечатныхФормСервер.ФорматСумм(ДанныеПечати.СуммаДокумента, "");
	ОбластьМакетаЛицеваяСторона.Параметры.НомерСумки = ДанныеПечати.НомерСумки;
	ОбластьМакетаЛицеваяСторона.Параметры.ДатаВедомости = Формат(ДанныеПечати.ДатаДокумента, "Л=uk_UA; ДЛФ=DD");
	ОбластьМакетаЛицеваяСторона.Параметры.НомерПломбы = НомерПломбы;
	ОбластьМакетаЛицеваяСторона.Параметры.Банк = ДанныеПечати.Банк;
	ОбластьМакетаЛицеваяСторона.Параметры.НаименованиеИнкассатора =  ДанныеПечати.НаименованиеИнкассатора;
	Если ДанныеПечати.ПолучательИнкассации тогда 
		ОбластьМакетаЛицеваяСторона.Параметры.ПолучательИнкассации =  "до " + ДанныеПечати.Банк;
	Иначе
		ОбластьМакетаЛицеваяСторона.Параметры.ПолучательИнкассации =  "до " + ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияООрганизации, "ПолноеНаименование", Ложь) + "  код за ЄДРПОУ  " + ДанныеПечати.КодПоЕДРПОУ;
	КонецЕсли;
	ОбластьМакетаЛицеваяСторона.Параметры.НаименованиеИнкассатора =  ДанныеПечати.НаименованиеИнкассатора;
	ОбластьМакетаЛицеваяСторона.Параметры.ВидУпаковки =  ДанныеПечати.ВидУпаковкиПриИнкассации;
	
	//ОбластьМакетаЛицеваяСторона.Параметры.Директор = ФизическиеЛица.ФамилияИнициалыФизЛица(Директор);
	ОбластьМакетаЛицеваяСторона.Параметры.Касир = ФизическиеЛица.ФамилияИнициалыФизЛица(КасирФизЛицо);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Проведение

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата                    КАК Период,
	|	ДанныеДокумента.Организация             КАК Организация,
	|	ДанныеДокумента.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.КассаПолучатель         КАК КассаПолучатель,
	|	ДанныеДокумента.ДокументОснование       КАК ДокументОснование,
	|	ДанныеДокумента.Касса                   КАК Касса,
	|	ДанныеДокумента.КассаККМ                КАК КассаККМ,
	|	ВЫБОР	КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу)
	|			ТОГДА ЕСТЬNULL(СправочникКассыПолучатель.КассаУправляющейСистемы, ЛОЖЬ) // Это ошибочная ситуация, если СправочникКассы.КассаУправляющейСистемы равно NULL
	|			ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                   КАК КассаПолучательУправляющейСистемы,
	// Касса отправитель может быть кассой центрального офиса только в случае если документ был создан в Управляющей системе
	|	ЕСТЬNULL(СправочникКассы.КассаУправляющейСистемы, ЛОЖЬ) КАК КассаОтправительУправляющаяСистема
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.Кассы КАК СправочникКассыПолучатель
	|ПО
	|	СправочникКассыПолучатель.Ссылка = ДанныеДокумента.КассаПолучатель
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.Кассы КАК СправочникКассы
	|ПО
	|	СправочникКассы.Ссылка = ДанныеДокумента.Касса
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();

	
	ТекстЗапроса = ТекстЗапросаТаблицаДенежныеСредстваНаличные() +
	ТекстЗапросаТаблицаДенежныеСредстваКПоступлениюНаличные() +
	ТекстЗапросТаблицаВыплатаЗарплаты() + ТекстЗапросТаблицаРасчетыСПоставщиками() +
	ТекстЗапросТаблицаДенежныеСредстваКВыплате();
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ДокументОснование", Реквизиты.ДокументОснование);
	Запрос.УстановитьПараметр("ПолучательКассаРТ", НЕ Реквизиты.КассаПолучательУправляющейСистемы);
	Запрос.УстановитьПараметр("ОтправительКассаУС", Реквизиты.КассаОтправительУправляющаяСистема);
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(Реквизиты.ХозяйственнаяОперация));
	
	ПоРаспоряжению = Ложь;
	
	Если ЗначениеЗаполнено(Реквизиты.ДокументОснование) И (ТипЗнч(Реквизиты.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") 
		ИЛИ ТипЗнч(Реквизиты.ДокументОснование) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций")) Тогда
		ПоРаспоряжению = Истина;
	КонецЕсли;
	Запрос.УстановитьПараметр("ПоРаспоряжению", ПоРаспоряжению);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицыДляДвижений = СтруктураДополнительныеСвойства.ТаблицыДляДвижений;
	ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваНаличные",             МассивРезультатов[0].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваКПоступлениюНаличные", МассивРезультатов[1].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаВыплаченнаяЗарплата",                  МассивРезультатов[2].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПоставщиками",                 МассивРезультатов[3].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваКВыплате",             МассивРезультатов[4].Выгрузить());
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаДенежныеСредстваНаличные()
	
	ТекстЗапроса = Символы.ПС +
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Касса КАК Касса,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЕСТЬNULL(ТабличнаяЧастьРасшифровкаПлатежа.Сумма, ДанныеДокумента.СуммаДокумента) КАК Сумма,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧастьРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств ЕСТЬ NULL 
	|				ИЛИ ТабличнаяЧастьРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|			ТОГДА &СтатьяДвиженияДенежныхСредств
	|		ИНАЧЕ ТабличнаяЧастьРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТабличнаяЧастьРасшифровкаПлатежа
	|		ПО (ТабличнаяЧастьРасшифровкаПлатежа.Ссылка = &Ссылка)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ &ОтправительКассаУС
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧастьРасшифровкаПлатежа.НомерСтроки" + "
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДенежныеСредстваКПоступлениюНаличные()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата                     КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)   КАК ВидДвижения,
	|	ДанныеДокумента.КассаПолучатель.Владелец КАК Организация,
	|	ДанныеДокумента.КассаПолучатель          КАК Касса,
	|	ДанныеДокумента.Ссылка                   КАК Документ,
	|	ДанныеДокумента.СуммаДокумента           КАК Сумма,
	|	ДанныеДокумента.Касса                    КАК КассаОтправитель
	|	
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию)
	|	)
	|	И (&ПолучательКассаРТ ИЛИ &ОтправительКассаУС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата                   КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация            КАК Организация,
	|	ДанныеДокумента.КассаККМ               КАК Касса,
	|	ДанныеДокумента.Ссылка                 КАК Документ,
	|	ДанныеДокумента.СуммаДокумента         КАК Сумма,
	|	ДанныеДокумента.Касса                  КАК КассаОтправитель
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросТаблицаВыплатаЗарплаты()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Касса.Магазин         КАК Магазин,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо  КАК Работник,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма    КАК Сумма,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка   КАК ПлатежнаяВедомость
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ПО
	|	РасходныйКассовыйОрдер.ПлатежнаяВедомость = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ВыплаченнаяЗарплата КАК ВыплаченнаяЗарплата
	|ПО
	|	ВыплаченнаяЗарплата.ПлатежнаяВедомость = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
	|	И ВыплаченнаяЗарплата.Работник = ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо
	|	И ВыплаченнаяЗарплата.Регистратор <> РасходныйКассовыйОрдер.Ссылка
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &Ссылка
	|	И РасходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям)
	|	И ВыплаченнаяЗарплата.Работник ЕСТЬ NULL
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Касса.Магазин                                      КАК Магазин,
	|	ВЫРАЗИТЬ(РасходныйКассовыйОрдер.Контрагент КАК Справочник.ФизическиеЛица) КАК Работник,
	|	РасходныйКассовыйОрдер.СуммаДокумента                                     КАК Сумма,
	|	РасходныйКассовыйОрдер.ПлатежнаяВедомость                                 КАК ПлатежнаяВедомость
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &Ссылка
	|	И РасходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику)
	|;
	|";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросТаблицаРасчетыСПоставщиками()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	РасшифровкаПлатежа.Ссылка.Дата КАК Период,
	|	РасшифровкаПлатежа.Ссылка.Контрагент КАК Поставщик,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ПоступлениеТоваров
	|			ТОГДА ВЫБОР
	|					КОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.ЗаказПоставщику = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|						ТОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом
	|					ИНАЧЕ РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.ЗаказПоставщику
	|				КОНЕЦ
	|		ИНАЧЕ РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом
	|	КОНЕЦ КАК ДокументРасчета,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.Магазин ЕСТЬ НЕ NULL 
	|			ТОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.Магазин
	|		ИНАЧЕ РасшифровкаПлатежа.Ссылка.Касса.Магазин
	|	КОНЕЦ КАК Магазин,
	|	РасшифровкаПлатежа.Сумма КАК Сумма,
	|	РасшифровкаПлатежа.Сумма КАК КОплате,
	|	0 КАК КПоступлению,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) КАК ФормаОплаты
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка = &Ссылка И НЕ &ОтправительКассаУС
	|	И РасшифровкаПлатежа.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";

	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросТаблицаДенежныеСредстваКВыплате()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.Ссылка.Дата                   КАК Период,
	|	РасшифровкаПлатежа.Ссылка.ХозяйственнаяОперация  КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)           КАК ВидДвижения,
	|	&ДокументОснование                               КАК РаспоряжениеНаРасходованиеДенежныхСредств,
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом КАК ДокументРасчета,
	|	РасшифровкаПлатежа.Сумма                         КАК Сумма,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.Магазин ЕСТЬ НЕ NULL 
	|			ТОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.Магазин
	|		ИНАЧЕ РасшифровкаПлатежа.Ссылка.Касса.Магазин
	|	КОНЕЦ КАК Магазин
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка = &Ссылка И &ПоРаспоряжению И НЕ &ОтправительКассаУС
	|УПОРЯДОЧИТЬ ПО
	|	РасшифровкаПлатежа.НомерСтроки";
	
	Возврат ТекстЗапроса;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Печать

// Функция формирует печатные формы документа
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РКО") Тогда
	
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РКО",
				"Расходный кассовый ордер",
				СформироватьПечатнуюФормуКО2(МассивОбъектов, ОбъектыПечати));
	
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьПрепроводительнаяВедомостьКСумке") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечатьПрепроводительнаяВедомостьКСумке",
				"Препроводительная ведомость к сумке",
				СформироватьПечатнуюФормуПрепроводительнаяВедомостьКСумке(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	
	КонецЕсли;
			
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПрепроводительнаяВедомостьКСумке_Пивденный") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_ПрепроводительнаяВедомостьКСумке_Пивденный",
				"Препроводительная ведомость к сумке",
				СформироватьПечатнуюФормуПрепроводительнаяВедомостьКСумкеПивденный(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
				
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПрепроводительнаяВедомостьКСумке_ТОВ_СИТ") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_ПрепроводительнаяВедомостьКСумке_ТОВ_СИТ",
				"Препроводительная ведомость к сумке",
				СформироватьПечатнуюФормуПрепроводительнаяВедомостьКСумкеТОВСИТ(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	
	
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПрепроводительнаяВедомостьКСумке_Райфайзен") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_ПрепроводительнаяВедомостьКСумке_Райфайзен",
				"Препроводительная ведомость к сумке",
				СформироватьПечатнуюФормуПрепроводительнаяВедомостьКСумкеРАЙФАЙЗЕН(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	
	
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьОписьЦенностейПриложение4") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечатьОписьЦенностейПриложение4",
				"Опись ценностей",
				СформироватьПечатнуюФормуОписьЦенностейПриложение4(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСписанияДенежныхСредств") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктСписанияДенежныхСредств",
				"Акт списания денежных средств",
				СформироватьПечатнуюФормуАктСписанияДенежныхСредств(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));

	КонецЕсли;

КонецПроцедуры

#Область ФормированиеПечатныхФорм

Функция СформироватьПечатнуюФормуОписьЦенностейПриложение4(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	СинонимДокумента  = НСтр("ru='Опись ценностей'");
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПФ_MXL_ОписьЦенностей";
	
	ТабличныйДокумент.ПолеСлева  = 10;
	ТабличныйДокумент.ПолеСправа = 10;
	ТабличныйДокумент.ПолеСверху = 10;
	ТабличныйДокумент.ПолеСнизу  = 10;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходныйКассовыйОрдер.Ссылка                         КАК Ссылка,
	|	РасходныйКассовыйОрдер.Дата                           КАК ДатаДокумента,
	|	РасходныйКассовыйОрдер.Организация                    КАК Организация,
	|	РасходныйКассовыйОрдер.БанковскийСчет                 КАК БанковскийСчет,
	|	РасходныйКассовыйОрдер.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
	|	РасходныйКассовыйОрдер.СуммаДокумента                 КАК СуммаДокумента,
	|	РасходныйКассовыйОрдер.НомерОрдера                    КАК НомерОрдера
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка В(&МассивОбъектов)
	|";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ДанныеПечати = Запрос.Выполнить().Выбрать();
	ПервыйДокумент = Истина;
	Макет = УправлениеПечатью.ПолучитьМакет("Документ.РасходныйКассовыйОрдер.ПФ_MXL_ОписьЦенностейПриложение4");
	Пока ДанныеПечати.Следующий() Цикл
		
		Если НЕ ЕстьОшибкиПечатиИнкассации(ДанныеПечати, ПараметрыПечати.ТекстОшибки, ПараметрыПечати.ТаблицаОписьСдаваемыхНаличныхДенег) Тогда
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			СведенияОбОрганизации       = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаДокумента, , ДанныеПечати.БанковскийСчет);
			
			ОбластьМакетаЛицеваяСторонаШапка = Макет.ПолучитьОбласть("ЛицеваяСторонаШапка");
			ОбластьМакетаЛицеваяСторонаШапка.Параметры.ПредставлениеОрганизации =  ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,КодПоЕДРПОУ,", Истина, "uk");
			ДатаДокумента = Формат(ДанныеПечати.ДатаДокумента, "Л=uk_UA; ДФ=dd/MMMM/yyyy");
			ДатаДокумента = СтрЗаменить(ДатаДокумента, Формат(ДанныеПечати.ДатаДокумента, "ДФ=dd/"), """" +Формат(ДанныеПечати.ДатаДокумента, "ДФ=dd")+""" ");
			ДатаДокумента = СтрЗаменить(ДатаДокумента, "/", " ") + " року";
			ОбластьМакетаЛицеваяСторонаШапка.Параметры.ДатаДокумента = ДатаДокумента;
			ОбластьМакетаЛицеваяСторонаШапка.Параметры.НомерОрдера   = ДанныеПечати.НомерОрдера;
			ТабличныйДокумент.Вывести(ОбластьМакетаЛицеваяСторонаШапка);
			
			Для Каждого СтрокаНоминалаБанкноты Из ПараметрыПечати.ТаблицаОписьСдаваемыхНаличныхДенег Цикл
				
				Если СтрокаНоминалаБанкноты.КоличествоБанкнот = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
				
				Если СтрокаНоминалаБанкноты.НаименованиеБанкноты = "коп." Тогда
					ОбластьСтрока.Параметры.Монеты = Строка(СтрокаНоминалаБанкноты.Номинал) + " коп.";
					ОбластьСтрока.Параметры.Сумма = СтрокаНоминалаБанкноты.Сумма;
				Иначе
					ОбластьСтрока.Параметры.Банкноты = Строка(СтрокаНоминалаБанкноты.Номинал) + " грн.";
					ОбластьСтрока.Параметры.Сумма = СтрокаНоминалаБанкноты.Сумма;
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьСтрока);
				
			КонецЦикла;
			ОбластьЛицеваяСторонаПодвал = Макет.ПолучитьОбласть("ЛицеваяСторонаПодвал");
			ОбластьЛицеваяСторонаПодвал.Параметры.СуммаЦифрамиСловами = Строка(ДанныеПечати.СуммаДокумента) + " грн, " + ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(ДанныеПечати.СуммаДокумента, , "uk");
			ТабличныйДокумент.Вывести(ОбластьЛицеваяСторонаПодвал);
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ОбластьОбратнаяСторонаШапка = Макет.ПолучитьОбласть("ОбратнаяСторонаШапка");
			ТабличныйДокумент.Вывести(ОбластьОбратнаяСторонаШапка);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
КонецФункции

Функция СформироватьПечатнуюФормуПрепроводительнаяВедомостьКСумке(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	Макет = УправлениеПечатью.ПолучитьМакет("Документ.РасходныйКассовыйОрдер.ПФ_MXL_ПрепроводительнаяВедомостьКСумке");
	ТабличныйДокумент = Новый ТабличныйДокумент();
	
	ТабличныйДокумент.ПолеСлева  = 10;
	ТабличныйДокумент.ПолеСправа = 10;
	ТабличныйДокумент.ПолеСверху = 10;
	ТабличныйДокумент.ПолеСнизу  = 10;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходныйКассовыйОрдер.Ссылка                КАК Ссылка,
	|	РасходныйКассовыйОрдер.Дата                  КАК ДатаДокумента,
	|	РасходныйКассовыйОрдер.Организация           КАК Организация,
	|	РасходныйКассовыйОрдер.БанковскийСчет        КАК БанковскийСчет,
	|	РасходныйКассовыйОрдер.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РасходныйКассовыйОрдер.СуммаДокумента        КАК СуммаДокумента,
	|	РасходныйКассовыйОрдер.НомерСумки            КАК НомерСумки
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка В(&МассивОбъектов)
	|";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ДанныеПечати = Запрос.Выполнить().Выбрать();
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		Если НЕ ЕстьОшибкиПечатиИнкассации(ДанныеПечати, ПараметрыПечати.ТекстОшибки, ПараметрыПечати.ТаблицаОписьСдаваемыхНаличныхДенег) Тогда
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало    = ТабличныйДокумент.ВысотаТаблицы + 1;
			СведенияООрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаДокумента, , ДанныеПечати.БанковскийСчет);
			
			ОбластьМакетаЛицеваяСторона = Макет.ПолучитьОбласть("ЛицеваяСторонаПрепроводительнаяВедомость|ВертикальнаяСекция"); 
			ЗаполнитьПараметрыМакетаДляПечатиЛицевойСтороныИнкассации(ОбластьМакетаЛицеваяСторона, СведенияООрганизации, ДанныеПечати);
			Касса = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеПечати.Ссылка,"Касса");
			Магазин =  ОбщегоНазначения.ПолучитьЗначениеРеквизита(Касса,"Магазин");
			АдресМагазина = ПолучитьАдресМагазина(Магазин);
			ОбластьМакетаЛицеваяСторона.Параметры.АдресМагазина = АдресМагазина;
			ТабличныйДокумент.Вывести(ОбластьМакетаЛицеваяСторона);
			
		//	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			ОбластьМакетаОбратнаяСторонаОпись = Макет.ПолучитьОбласть("ОборотнаяСторона|ВертикальнаяСекция");
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
			Для Каждого СтрокаНоминалаБанкноты Из ПараметрыПечати.ТаблицаОписьСдаваемыхНаличныхДенег Цикл
				ОбластьМакетаОбратнаяСторонаОпись.Параметры[СтрокаНоминалаБанкноты.ПараметрКоличествоБанкнот] = СтрокаНоминалаБанкноты.КоличествоБанкнот;
				ОбластьМакетаОбратнаяСторонаОпись.Параметры[СтрокаНоминалаБанкноты.ПараметрСуммаБанкнот] = СтрокаНоминалаБанкноты.Сумма;
			КонецЦикла;
			ОбластьМакетаОбратнаяСторонаОпись.Параметры.СуммаИтог = ПараметрыПечати.ТаблицаОписьСдаваемыхНаличныхДенег.Итог("Сумма");
			ТабличныйДокумент.Вывести(ОбластьМакетаОбратнаяСторонаОпись);
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			ОбластьМакетаЛицеваяСторона = Макет.ПолучитьОбласть("ЛицеваяСторонаВторогоЭкземпляра|ВертикальнаяСекция"); 
			ОбластьМакетаЛицеваяСторона.Параметры.АдресМагазина = АдресМагазина;  
			ЗаполнитьПараметрыМакетаДляПечатиЛицевойСтороныИнкассации(ОбластьМакетаЛицеваяСторона, СведенияООрганизации, ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакетаЛицеваяСторона);
			
			//ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			ТабличныйДокумент.Вывести(ОбластьМакетаОбратнаяСторонаОпись);
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			ОбластьМакетаЛицеваяСторона = Макет.ПолучитьОбласть("ЛицеваяСторонаТретегоЭкземпляра|ВертикальнаяСекция"); 
			ЗаполнитьПараметрыМакетаДляПечатиЛицевойСтороныИнкассации(ОбластьМакетаЛицеваяСторона, СведенияООрганизации, ДанныеПечати);
			ОбластьМакетаЛицеваяСторона.Параметры.АдресМагазина = АдресМагазина;  			
			ТабличныйДокумент.Вывести(ОбластьМакетаЛицеваяСторона);
			
		//	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			ОбластьМакетаОбратнаяСторонаТретегоЭкземпляра = Макет.ПолучитьОбласть("ОборотнаяСторонаТретегоЭкземпляра|ВертикальнаяСекция");
			ТабличныйДокумент.Вывести(ОбластьМакетаОбратнаяСторонаТретегоЭкземпляра);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
КонецФункции


Функция СформироватьПечатнуюФормуПрепроводительнаяВедомостьКСумкеПивденный(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	Макет = УправлениеПечатью.ПолучитьМакет("Документ.РасходныйКассовыйОрдер.ПФ_MXL_ПрепроводительнаяВедомостьКСумке_Пивденный");
	ТабличныйДокумент = Новый ТабличныйДокумент();
	
	ТабличныйДокумент.ПолеСлева  = 10;
	ТабличныйДокумент.ПолеСправа = 10;
	ТабличныйДокумент.ПолеСверху = 10;
	ТабличныйДокумент.ПолеСнизу  = 10;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	               |	РасходныйКассовыйОрдер.Дата КАК ДатаДокумента,
	               |	РасходныйКассовыйОрдер.Организация КАК Организация,
	               |	РасходныйКассовыйОрдер.БанковскийСчет КАК БанковскийСчет,
	               |	РасходныйКассовыйОрдер.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	               |	РасходныйКассовыйОрдер.СуммаДокумента КАК СуммаДокумента,
	               |	РасходныйКассовыйОрдер.НомерСумки КАК НомерСумки,
	               |	РасходныйКассовыйОрдер.БанковскийСчет.Банк.Наименование КАК Банк,
	               |	РасходныйКассовыйОрдер.БанковскийСчет.НомерСчета КАК РС,
	               |	РасходныйКассовыйОрдер.БанковскийСчет.Банк.НаименованиеИнкассатора КАК НаименованиеИнкассатора,
	               |	РасходныйКассовыйОрдер.БанковскийСчет.Банк.ВидУпаковкиПриИнкассации КАК ВидУпаковкиПриИнкассации,
	               |	РасходныйКассовыйОрдер.Организация.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	               |	РасходныйКассовыйОрдер.БанковскийСчет.Банк.ПолучательИнкассации КАК ПолучательИнкассации
	               |ИЗ
	               |	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	               |ГДЕ
	               |	РасходныйКассовыйОрдер.Ссылка В(&МассивОбъектов)";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ДанныеПечати = Запрос.Выполнить().Выбрать();
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		Если НЕ ЕстьОшибкиПечатиИнкассации(ДанныеПечати, ПараметрыПечати.ТекстОшибки, ПараметрыПечати.ТаблицаОписьСдаваемыхНаличныхДенег) Тогда
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало    = ТабличныйДокумент.ВысотаТаблицы + 1;
			СведенияООрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаДокумента, , ДанныеПечати.БанковскийСчет);
			
			ОбластьМакетаЛицеваяСторона = Макет.ПолучитьОбласть("ЛицеваяСторонаПрепроводительнаяВедомость|ВертикальнаяСекция"); 
			ЗаполнитьПараметрыМакетаДляПечатиЛицевойСтороныИнкассацииПивд(ОбластьМакетаЛицеваяСторона, СведенияООрганизации, ДанныеПечати);
			Касса = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеПечати.Ссылка,"Касса");
			Магазин =  ОбщегоНазначения.ПолучитьЗначениеРеквизита(Касса,"Магазин");
			АдресМагазина = ПолучитьАдресМагазина(Магазин);
			ОбластьМакетаЛицеваяСторона.Параметры.АдресМагазина = АдресМагазина;
			ТабличныйДокумент.Вывести(ОбластьМакетаЛицеваяСторона);
			
			//ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			ОбластьМакетаОбратнаяСторонаОпись = Макет.ПолучитьОбласть("ОборотнаяСторона|ВертикальнаяСекция");
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
			Для Каждого СтрокаНоминалаБанкноты Из ПараметрыПечати.ТаблицаОписьСдаваемыхНаличныхДенег Цикл
				Попытка
				ОбластьМакетаОбратнаяСторонаОпись.Параметры[СтрокаНоминалаБанкноты.ПараметрКоличествоБанкнот] = СтрокаНоминалаБанкноты.КоличествоБанкнот;
				ОбластьМакетаОбратнаяСторонаОпись.Параметры[СтрокаНоминалаБанкноты.ПараметрСуммаБанкнот] = СтрокаНоминалаБанкноты.Сумма;
			Исключение
			КонецПопытки;
		КонецЦикла;
			ОбластьМакетаОбратнаяСторонаОпись.Параметры.НомерСумки = ДанныеПечати.НомерСумки;
			ОбластьМакетаОбратнаяСторонаОпись.Параметры.ДатаВедомости = Формат(ДанныеПечати.ДатаДокумента, "Л=uk_UA; ДЛФ=DD");
			ОбластьМакетаОбратнаяСторонаОпись.Параметры.СуммаПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(ДанныеПечати.СуммаДокумента,, "uk");		
			ОбластьМакетаОбратнаяСторонаОпись.Параметры.РасчетныйСчет = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияООрганизации, "Банк,МФО,НомерСчета", Истина, "uk");
			ОбластьМакетаОбратнаяСторонаОпись.Параметры.СуммаИтог = ПараметрыПечати.ТаблицаОписьСдаваемыхНаличныхДенег.Итог("Сумма");
			ОбластьМакетаОбратнаяСторонаОпись.Параметры.колитог = ПараметрыПечати.ТаблицаОписьСдаваемыхНаличныхДенег.Итог("КоличествоБанкнот");
			ТабличныйДокумент.Вывести(ОбластьМакетаОбратнаяСторонаОпись);
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьМакетаЛицеваяСторона);
			//ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьМакетаОбратнаяСторонаОпись);
			//
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьМакетаЛицеваяСторона);
			//ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьМакетаОбратнаяСторонаОпись);
			//
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
КонецФункции

Функция СформироватьПечатнуюФормуПрепроводительнаяВедомостьКСумкеТОВСИТ(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	Макет = УправлениеПечатью.ПолучитьМакет("Документ.РасходныйКассовыйОрдер.ПФ_MXL_ПрепроводительнаяВедомостьКСумке_ТОВ_СИТ");
	ТабличныйДокумент = Новый ТабличныйДокумент();
	
	ТабличныйДокумент.ПолеСлева  = 10;
	ТабличныйДокумент.ПолеСправа = 10;
	ТабличныйДокумент.ПолеСверху = 10;
	ТабличныйДокумент.ПолеСнизу  = 10;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	               |	РасходныйКассовыйОрдер.Дата КАК ДатаДокумента,
	               |	РасходныйКассовыйОрдер.Организация КАК Организация,
	               |	РасходныйКассовыйОрдер.БанковскийСчет КАК БанковскийСчет,
	               |	РасходныйКассовыйОрдер.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	               |	РасходныйКассовыйОрдер.СуммаДокумента КАК СуммаДокумента,
	               |	РасходныйКассовыйОрдер.НомерСумки КАК НомерСумки,
	               |	РасходныйКассовыйОрдер.БанковскийСчет.Банк.Наименование КАК Банк,
	               |	РасходныйКассовыйОрдер.БанковскийСчет.НомерСчета КАК РС,
	               |	""інкасатора ТОВ """"СІТ СЕК' ЮРИТІ"""" "" КАК НаименованиеИнкассатора,
	               |	""сейф-пакет"" КАК ВидУпаковкиПриИнкассации,
	               |	РасходныйКассовыйОрдер.Организация.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	               |	РасходныйКассовыйОрдер.БанковскийСчет.Банк.ПолучательИнкассации КАК ПолучательИнкассации
	               |ИЗ
	               |	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	               |ГДЕ
	               |	РасходныйКассовыйОрдер.Ссылка В(&МассивОбъектов)";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ДанныеПечати = Запрос.Выполнить().Выбрать();
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		Если НЕ ЕстьОшибкиПечатиИнкассации(ДанныеПечати, ПараметрыПечати.ТекстОшибки, ПараметрыПечати.ТаблицаОписьСдаваемыхНаличныхДенег) Тогда
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало    = ТабличныйДокумент.ВысотаТаблицы + 1;
			СведенияООрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаДокумента, , ДанныеПечати.БанковскийСчет);
			
			ОбластьМакетаЛицеваяСторона = Макет.ПолучитьОбласть("ЛицеваяСторонаПрепроводительнаяВедомость|ВертикальнаяСекция"); 
			ЗаполнитьПараметрыМакетаДляПечатиЛицевойСтороныИнкассацииПивд(ОбластьМакетаЛицеваяСторона, СведенияООрганизации, ДанныеПечати);
			Касса = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеПечати.Ссылка,"Касса");
			Магазин =  ОбщегоНазначения.ПолучитьЗначениеРеквизита(Касса,"Магазин");
			АдресМагазина = ПолучитьАдресМагазина(Магазин);
			ОбластьМакетаЛицеваяСторона.Параметры.АдресМагазина = АдресМагазина;
			ТабличныйДокумент.Вывести(ОбластьМакетаЛицеваяСторона);
			
			//ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			ОбластьМакетаОбратнаяСторонаОпись = Макет.ПолучитьОбласть("ОборотнаяСторона|ВертикальнаяСекция");
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
			Для Каждого СтрокаНоминалаБанкноты Из ПараметрыПечати.ТаблицаОписьСдаваемыхНаличныхДенег Цикл
				Попытка
				ОбластьМакетаОбратнаяСторонаОпись.Параметры[СтрокаНоминалаБанкноты.ПараметрКоличествоБанкнот] = СтрокаНоминалаБанкноты.КоличествоБанкнот;
				ОбластьМакетаОбратнаяСторонаОпись.Параметры[СтрокаНоминалаБанкноты.ПараметрСуммаБанкнот] = СтрокаНоминалаБанкноты.Сумма;
			Исключение
			КонецПопытки;
		КонецЦикла;
			ОбластьМакетаОбратнаяСторонаОпись.Параметры.НомерСумки = ДанныеПечати.НомерСумки;
			ОбластьМакетаОбратнаяСторонаОпись.Параметры.ДатаВедомости = Формат(ДанныеПечати.ДатаДокумента, "Л=uk_UA; ДЛФ=DD");
			ОбластьМакетаОбратнаяСторонаОпись.Параметры.СуммаПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(ДанныеПечати.СуммаДокумента,, "uk");		
			ОбластьМакетаОбратнаяСторонаОпись.Параметры.РасчетныйСчет = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияООрганизации, "Банк,МФО,НомерСчета", Истина, "uk");
			ОбластьМакетаОбратнаяСторонаОпись.Параметры.СуммаИтог = ПараметрыПечати.ТаблицаОписьСдаваемыхНаличныхДенег.Итог("Сумма");
			ОбластьМакетаОбратнаяСторонаОпись.Параметры.колитог = ПараметрыПечати.ТаблицаОписьСдаваемыхНаличныхДенег.Итог("КоличествоБанкнот");
			ТабличныйДокумент.Вывести(ОбластьМакетаОбратнаяСторонаОпись);
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьМакетаЛицеваяСторона);
			//ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьМакетаОбратнаяСторонаОпись);
			//
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьМакетаЛицеваяСторона);
			//ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьМакетаОбратнаяСторонаОпись);
			//
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
КонецФункции

Функция СформироватьПечатнуюФормуПрепроводительнаяВедомостьКСумкеРАЙФАЙЗЕН(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	Макет = УправлениеПечатью.ПолучитьМакет("Документ.РасходныйКассовыйОрдер.ПФ_MXL_ПрепроводительнаяВедомостьКСумке_Райфайзен");
	ТабличныйДокумент = Новый ТабличныйДокумент();
	
	ТабличныйДокумент.ПолеСлева  = 10;
	ТабличныйДокумент.ПолеСправа = 10;
	ТабличныйДокумент.ПолеСверху = 10;
	ТабличныйДокумент.ПолеСнизу  = 10;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	               |	РасходныйКассовыйОрдер.Дата КАК ДатаДокумента,
	               |	РасходныйКассовыйОрдер.Организация КАК Организация,
	               |	РасходныйКассовыйОрдер.БанковскийСчет КАК БанковскийСчет,
	               |	РасходныйКассовыйОрдер.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	               |	РасходныйКассовыйОрдер.СуммаДокумента КАК СуммаДокумента,
	               |	РасходныйКассовыйОрдер.НомерСумки КАК НомерСумки,
	               |	РасходныйКассовыйОрдер.БанковскийСчет.Банк.Наименование КАК Банк,
	               |	РасходныйКассовыйОрдер.БанковскийСчет.НомерСчета КАК РС,
	               |	""інкасатора АТ """"Райффайзен Банк"""" "" КАК НаименованиеИнкассатора,
	               |	""сейф-пакет"" КАК ВидУпаковкиПриИнкассации,
	               |	РасходныйКассовыйОрдер.Организация.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	               |	РасходныйКассовыйОрдер.БанковскийСчет.Банк.ПолучательИнкассации КАК ПолучательИнкассации
	               |ИЗ
	               |	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	               |ГДЕ
	               |	РасходныйКассовыйОрдер.Ссылка В(&МассивОбъектов)";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ДанныеПечати = Запрос.Выполнить().Выбрать();
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		Если НЕ ЕстьОшибкиПечатиИнкассации(ДанныеПечати, ПараметрыПечати.ТекстОшибки, ПараметрыПечати.ТаблицаОписьСдаваемыхНаличныхДенег) Тогда
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало    = ТабличныйДокумент.ВысотаТаблицы + 1;
			СведенияООрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаДокумента, , ДанныеПечати.БанковскийСчет);
			
			ОбластьМакетаЛицеваяСторона = Макет.ПолучитьОбласть("ЛицеваяСторонаПрепроводительнаяВедомость|ВертикальнаяСекция"); 
			ЗаполнитьПараметрыМакетаДляПечатиЛицевойСтороныИнкассацииПивд(ОбластьМакетаЛицеваяСторона, СведенияООрганизации, ДанныеПечати);
			Касса = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеПечати.Ссылка,"Касса");
			Магазин =  ОбщегоНазначения.ПолучитьЗначениеРеквизита(Касса,"Магазин");
			АдресМагазина = ПолучитьАдресМагазина(Магазин);
			ОбластьМакетаЛицеваяСторона.Параметры.АдресМагазина = АдресМагазина;
			ТабличныйДокумент.Вывести(ОбластьМакетаЛицеваяСторона);
			
			//ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			ОбластьМакетаОбратнаяСторонаОпись = Макет.ПолучитьОбласть("ОборотнаяСторона|ВертикальнаяСекция");
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
			Для Каждого СтрокаНоминалаБанкноты Из ПараметрыПечати.ТаблицаОписьСдаваемыхНаличныхДенег Цикл
				Попытка
				ОбластьМакетаОбратнаяСторонаОпись.Параметры[СтрокаНоминалаБанкноты.ПараметрКоличествоБанкнот] = СтрокаНоминалаБанкноты.КоличествоБанкнот;
				ОбластьМакетаОбратнаяСторонаОпись.Параметры[СтрокаНоминалаБанкноты.ПараметрСуммаБанкнот] = СтрокаНоминалаБанкноты.Сумма;
			Исключение
			КонецПопытки;
		КонецЦикла;
			ОбластьМакетаОбратнаяСторонаОпись.Параметры.НомерСумки = ДанныеПечати.НомерСумки;
			ОбластьМакетаОбратнаяСторонаОпись.Параметры.ДатаВедомости = Формат(ДанныеПечати.ДатаДокумента, "Л=uk_UA; ДЛФ=DD");
			ОбластьМакетаОбратнаяСторонаОпись.Параметры.СуммаПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(ДанныеПечати.СуммаДокумента,, "uk");		
			ОбластьМакетаОбратнаяСторонаОпись.Параметры.РасчетныйСчет = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияООрганизации, "Банк,МФО,НомерСчета", Истина, "uk");
			ОбластьМакетаОбратнаяСторонаОпись.Параметры.СуммаИтог = ПараметрыПечати.ТаблицаОписьСдаваемыхНаличныхДенег.Итог("Сумма");
			ОбластьМакетаОбратнаяСторонаОпись.Параметры.колитог = ПараметрыПечати.ТаблицаОписьСдаваемыхНаличныхДенег.Итог("КоличествоБанкнот");
			ТабличныйДокумент.Вывести(ОбластьМакетаОбратнаяСторонаОпись);
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьМакетаЛицеваяСторона);
			//ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьМакетаОбратнаяСторонаОпись);
			//
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьМакетаЛицеваяСторона);
			//ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьМакетаОбратнаяСторонаОпись);
			//
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
КонецФункции

// Функция формирует табличный документ для печати Расходного кассового ордера
//
Функция СформироватьПечатнуюФормуКО2(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	СинонимДокумента   = НСтр("ru='Расходный кассовый ордер'uk='Видатковий касовий ордер'");
	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КорСчета.Ссылка КАК Ссылка,
	|	КорСчета.КорреспондирующийСчет КАК КорреспондирующийСчет
	|ИЗ
	|	КорСчета КАК КорСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.Номер КАК Номер,
	|	ТаблицаДокумента.НомерОрдера КАК НомерОрдера,
	|	ТаблицаДокумента.Дата КАК ДатаДокумента,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Организация КАК ЮрФизЛицо,
	|	ТаблицаДокумента.Организация КАК Руководители,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ТаблицаДокумента.Организация.НаименованиеПолное КАК СТРОКА(3))) = ""   ""
	|			ТОГДА ТаблицаДокумента.Организация.Наименование
	|		ИНАЧЕ ТаблицаДокумента.Организация.НаименованиеПолное
	|	КОНЕЦ КАК НаименованиеПолное,
	|	ТаблицаДокумента.Касса.ОбособленноеПодразделениеОрганизации.НаименованиеПолное КАК ОбособленноеПодразделениеОрганизацииПредставление,
	|	ТаблицаДокумента.Организация.Префикс КАК Префикс,
	|	ТаблицаДокумента.СуммаДокумента КАК Сумма,
	|	ТаблицаДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Контрагент.Представление КАК ФИОПолучателя,
	|	ТаблицаДокумента.Выдать КАК Выдать,
	|	ТаблицаДокумента.Приложение КАК Приложение,
	|	ТаблицаДокумента.ПоДокументу КАК ПоДокументу,
	|	ТаблицаДокумента.Основание КАК Основание,
	|	ТаблицаДокумента.Контрагент.Наименование КАК Наименование,
	|	ТаблицаДокумента.Ответственный.ФизЛицо КАК Кассир,
	|	ТаблицаДокумента.Касса.Магазин.Наименование КАК МагазинНаименование,
	|	ТаблицаКонтакты.Представление КАК АдресМагазина,
	|	ТаблицаДокумента.ГлавныйБухгалтер.Наименование КАК ФИОГлавногоБухгалтера,
	|	ТаблицаДокумента.КоррСчет КАК КоррСчет,
	|	ТаблицаДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ТаблицаДокумента.БанковскийСчет.Представление КАК БанковскийСчетПредставление
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины.КонтактнаяИнформация КАК ТаблицаКонтакты
	|		ПО ТаблицаДокумента.Касса.Магазин = ТаблицаКонтакты.Ссылка
	|			И (ТаблицаКонтакты.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресМагазина))
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Ссылка"
	);
	Запрос.МенеджерВременныхТаблиц = ДенежныеСредстваСервер.ПолучитьМенеджерТаблицыКорСчетов(Документы.РасходныйКассовыйОрдер.ПустаяСсылка(), МассивОбъектов);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаКорСчетаДебет = МассивРезультатов[0].Выгрузить();
	ДанныеПечати = МассивРезультатов[1].Выбрать();
	ПервыйДокумент = Истина;
	КодЯзыкаПечать = "uk";
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйКассовыйОрдер_ПФ_MXL_КО2"; 	
	Макет = УправлениеПечатью.ПолучитьМакет("ОбщийМакет.ПФ_MXL_КО2");
	ДатаДок = ОбщегоНазначения.ПолучитьЗначениеРеквизита(МассивОбъектов[0],"Дата");
	Если ЗначениеЗаполнено(ДатаДок) тогда
		Если ДатаДок < Дата('20180106') тогда
			ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйКассовыйОрдер_ПФ_MXL_КО2"; 	
			Макет = УправлениеПечатью.ПолучитьМакет("ОбщийМакет.ПФ_MXL_КО2");
		Иначе
			ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйКассовыйОрдер_ПФ_MXL_UK_КО2_05012018"; 	
			Макет = УправлениеПечатью.ПолучитьМакет("ОбщийМакет.ПФ_MXL_UK_КО2_05012018");
		КонецЕсли;
	КонецЕсли;	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		ЕстьРасчетыСКонтрагентами = ДенежныеСредстваСервер.ЕстьРасчетыСКонтрагентами(ДанныеПечати.ХозяйственнаяОперация);
		
		СведенияОбОрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.ЮрФизЛицо, ДанныеПечати.ДатаДокумента);
		
		// Выводим шапку накладной
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		Если НЕ ЗначениеЗаполнено(ДанныеПечати.ОбособленноеПодразделениеОрганизацииПредставление) Тогда
			ОбластьМакета.Параметры.ПолноеНаименование = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		Иначе
			ОбластьМакета.Параметры.ПолноеНаименование = ДанныеПечати.ОбособленноеПодразделениеОрганизацииПредставление;
		КонецЕсли;

	//	LNK 21.02.2017 12:28:37
		Если НЕ ПустаяСтрока(ДанныеПечати.МагазинНаименование) Тогда
			
			ОбластьМакета.Параметры.ПолноеНаименование = ОбластьМакета.Параметры.ПолноеНаименование
			+ " (магазин " + СокрЛП(ДанныеПечати.МагазинНаименование)
			+ ?(ПустаяСтрока(ДанныеПечати.АдресМагазина), "", ", " + СокрЛП(ДанныеПечати.АдресМагазина)) + ")";

		КонецЕсли;
		
		ОбластьМакета.Параметры.КодПоЕДРПОУ = СведенияОбОрганизации.КодПоЕДРПОУ;
		
		ОбластьМакета.Параметры.СуммаПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(ДанныеПечати.Сумма, , КодЯзыкаПечать);
		ОбластьМакета.Параметры.СуммаПрописьюПолучил = ОбластьМакета.Параметры.СуммаПрописью;
		ОбластьМакета.Параметры.Сумма = Формат(ДанныеПечати.Сумма, "ЧДЦ=2; ЧН=0.00") + " грн";
		ОбластьМакета.Параметры.ДатаДокумента = ДанныеПечати.ДатаДокумента;
		
		Если Не ЗначениеЗаполнено(ДанныеПечати.НомерОрдера) Тогда
			ОбластьМакета.Параметры.НомерОрдера = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(
		 	ДанныеПечати.Номер, 
		 	Ложь,
		 	Истина
		 	)
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ДанныеПечати.КоррСчет) Тогда

			КодыСчетДебет = СокрЛП(ДанныеПечати.КоррСчет);

		Иначе

			МассивКорСчетов = ТаблицаКорСчетаДебет.НайтиСтроки(Новый Структура("Ссылка", ДанныеПечати.Ссылка));
			КодыСчетДебет = "";
			Для каждого СтрокаКорСчета Из МассивКорСчетов Цикл
				КодыСчетДебет = КодыСчетДебет + ?(ПустаяСтрока(КодыСчетДебет), "", ",") + СтрокаКорСчета.КорреспондирующийСчет;
			КонецЦикла;

		КонецЕсли;

		Руководители          = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(ДанныеПечати.Руководители, КонецДня(ДанныеПечати.ДатаДокумента));
		Руководитель          = Руководители.Руководитель;
		РуководительДолжность = Руководители.РуководительДолжность;
	//	Бухгалтер             = Руководители.ГлавныйБухгалтер;
		
		ОбластьМакета.Параметры.ФИОРуководителя       = ДанныеПечати.ФИОГлавногоБухгалтера;//	Руководитель;
		ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = ДанныеПечати.ФИОГлавногоБухгалтера;//	Бухгалтер
		ОбластьМакета.Параметры.ФИОКассира            = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ДанныеПечати.Кассир);
		
	//	ОбластьМакета.Параметры.Счет = Сред(КодыСчетДебет, 2);	//	LNK 23.02.2017 11:14:13
		ОбластьМакета.Параметры.Счет = СокрЛП(КодыСчетДебет);
		
	//	LNK 23.02.2017 11:27:34
		Если ДанныеПечати.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда

			ОбластьМакета.Параметры.Выдать = СокрЛП(ДанныеПечати.БанковскийСчетПредставление) + " через " + СокрЛП(ОбластьМакета.Параметры.ФИОКассира);

		Иначе

			ТекстВыдать = ДанныеПечати.Выдать;

		КонецЕсли;

		ТекстПоДокументу = ДанныеПечати.ПоДокументу;
		
		Если ТекстВыдать="" И ЗначениеЗаполнено(ДанныеПечати.Контрагент) Тогда
			Если ЕстьРасчетыСКонтрагентами Тогда
				ТекстВыдать =?(ДанныеПечати.НаименованиеПолное="",ДанныеПечати.Наименование, ДанныеПечати.НаименованиеПолное);
			КонецЕсли;
		КонецЕсли;
			
		ОбластьМакета.Параметры.Выдать = ТекстВыдать;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;

	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

//	LNK 30.10.2019 11:36:00
Функция СформироватьПечатнуюФормуАктСписанияДенежныхСредств(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	СинонимДокумента   = НСтр("ru='Акт списания денежных средств'uk='Акт списання грошових коштів'");

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Номер КАК Номер,
	|	ТаблицаДокумента.Дата КАК Дата,
	|	ТаблицаОрганизация.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	|	ЕСТЬNULL(ТаблицаКонтактМагазина.Представление, """") КАК АдресМагазина,
	|	ТаблицаДокумента.Ссылка КАК КассовыйОрдер,
	|	ТаблицаОрганизация.НаименованиеПолное КАК Организация
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК ТаблицаОрганизация
	|		ПО ТаблицаДокумента.Организация = ТаблицаОрганизация.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Кассы КАК ТаблицаКассы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины.КонтактнаяИнформация КАК ТаблицаКонтактМагазина
	|			ПО ТаблицаКассы.Магазин = ТаблицаКонтактМагазина.Ссылка
	|				И (ТаблицаКонтактМагазина.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресМагазина))
	|		ПО ТаблицаДокумента.Касса = ТаблицаКассы.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В(&МассивОбъектов)"
	);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	ДанныеПечати = Запрос.Выполнить().Выбрать();

	ПервыйДокумент = Истина;
	Макет = УправлениеПечатью.ПолучитьМакет("Документ.РасходныйКассовыйОрдер.ПФ_MXL_АктСписанияДенежныхСредств");

	ОбластьМакета = Макет.ПолучитьОбласть("Тело");

	Пока ДанныеПечати.Следующий() Цикл

		Если НЕ ПервыйДокумент Тогда

			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ПервыйДокумент = Ложь;

	КонецЦикла;

	ТабличныйДокумент.АвтоМасштаб = Истина;

	Возврат ТабличныйДокумент;

КонецФункции
	
#КонецОбласти

Функция ПолучитьАдресМагазина(Магазин)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаКонтакты.Представление КАК Представление
	|ИЗ
	|	Справочник.Магазины.КонтактнаяИнформация КАК ТаблицаКонтакты
	|ГДЕ
	|	ТаблицаКонтакты.Ссылка = &Магазин
	|	И ТаблицаКонтакты.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресМагазина)"
	);
	Запрос.УстановитьПараметр("Магазин", Магазин);

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		АдресМагазина = Выборка.Представление;
	Иначе
		АдресМагазина = "";		
	КонецЕсли;
	Возврат АдресМагазина;
КонецФункции

#КонецЕсли


