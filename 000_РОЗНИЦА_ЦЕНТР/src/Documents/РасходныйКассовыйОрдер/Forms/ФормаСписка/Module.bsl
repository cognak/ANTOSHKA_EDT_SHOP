
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	
	ВыплачиватьЗарплатуВМагазинах = ПолучитьФункциональнуюОпцию("ВыплачиватьЗарплатуВМагазинах");
	Элементы.ГруппаВыплатаЗаработнойПлаты.Видимость = ВыплачиватьЗарплатуВМагазинах;
	
	Если ВыплачиватьЗарплатуВМагазинах Тогда
		УстановитьОтборДинамическихСписков("Список,ВедомостиНаВыдачуЗарплаты,СотрудникиНаПолучениеЗарплаты", "Организация,Касса,Магазин");
	КонецЕсли;
	
	ЗаполнитьСписокХозяйственныхОпераций();
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.РасходныйКассовыйОрдер) Тогда
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСоздать", "Видимость", Ложь);
	КонецЕсли;

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() И Организация.Пустая() Тогда

		ПриЗагрузкеДанныхИзНастроекНаСервере(Новый Соответствие);

	КонецЕсли;
	
КонецПроцедуры

// В процедуре обновляется список документов ведомость на выплату зарплаты и список сотрудников к выплате зарплаты.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыполненаВыплатаРКО" Тогда
		Элементы.ВедомостиНаВыдачуЗарплаты.Обновить();
		Элементы.СотрудникиНаПолучениеЗарплаты.Обновить();
	ИначеЕсли ИмяСобытия = "ИзмененаПлатежнаяВедомость" Тогда
		Элементы.СотрудникиНаПолучениеЗарплаты.Обновить();
		ОбновитьСписокСотрудников();

	ИначеЕсли ИмяСобытия = "ПользовательИзменилТекущуюОрганизацию" Тогда

		Если НЕ Организация = Параметр.Организация Тогда

			Организация = Параметр.Организация;
			Касса = Неопределено;
			ОтборОрганизацияПриИзменении(Неопределено);

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

//	LNK 14.09.2017 13:12:44
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Организация = Настройки.Получить("Организация");
		Магазин = Настройки.Получить("Магазин");
		Касса = Настройки.Получить("Касса");

		Если ЗначениеЗаполнено(Касса) Тогда

			РеквизитыКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Касса, "Магазин, КассаУправляющейСистемы");
			Магазин = РеквизитыКассы.Магазин;
			ОтборВыбранаКассаУправляющейСистемы = РеквизитыКассы.КассаУправляющейСистемы;

		КонецЕсли;
	
	Иначе

		Организация = ПараметрыСеанса.ТекущаяОрганизация;
		Касса   = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Организация, Перечисления.ФормыОплаты.Наличная,, ПараметрыСеанса.ТекущийМагазин);
		Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Касса, "Магазин");
		ОтборВыбранаКассаУправляющейСистемы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Касса, "КассаУправляющейСистемы");

	КонецЕсли;
	
	Элементы.ОтборКасса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Организация);
	
	УстановитьОтборДинамическихСписков("Список,ВедомостиНаВыдачуЗарплаты,СотрудникиНаПолучениеЗарплаты", "Организация,Касса,Магазин");

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОтборКассаПриИзменении(Элемент)
	
	ОтборКассаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	Магазин = ПредопределенноеЗначение("Справочник.Магазины.ПустаяСсылка");
	УстановитьОтборДинамическихСписков("Список", "Организация, Касса");
	
	Если ВыплачиватьЗарплатуВМагазинах Тогда
		УстановитьОтборДинамическихСписков("ВедомостиНаВыдачуЗарплаты, СотрудникиНаПолучениеЗарплаты", "Организация, Магазин");
		Если ДанныеОбновленияИнфоСтроки <> Неопределено Тогда
			ОбновитьИнфоСтроку();
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ОтборКасса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабельныйНомерАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ТабельныйНомер = Текст;
	УстановитьОтборыСотрудникамПолученяЗарплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабельныйНомерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	Если ПустаяСтрока(ТабельныйНомер) Тогда
		УстановитьОтборыСотрудникамПолученяЗарплаты();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабельныйНомерОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьОтборыСотрудникамПолученяЗарплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабельныйНомерПриИзменении(Элемент)
	Если ПустаяСтрока(ТабельныйНомер) Тогда
		УстановитьОтборыСотрудникамПолученяЗарплаты();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФамилияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ФИО = Текст;
	УстановитьОтборыСотрудникамПолученяЗарплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ФамилияОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьОтборыСотрудникамПолученяЗарплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)
	Если ПустаяСтрока(ФИО) Тогда
		УстановитьОтборыСотрудникамПолученяЗарплаты();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФИООкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	Если ПустаяСтрока(ФИО) Тогда
		УстановитьОтборыСотрудникамПолученяЗарплаты();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаРабочееМестоПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ДанныеОбновленияИнфоСтроки = Неопределено Тогда
		СоздатьДанныеОбновленияИнфоСтроки();
	ИначеЕсли ТекущаяСтраница.Имя = "ГруппаВыплатаЗаработнойПлаты" Тогда
		ОбновитьИнфоСтроку();
	КонецЕсли;
		
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "СотрудникиНаПолучениеЗарплаты"

&НаКлиенте
Процедура СотрудникиНаПолучениеЗарплатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	Если Поле.Имя = "СотрудникиНаПолучениеЗарплатыФИО"
		ИЛИ Поле.Имя = "СотрудникиНаПолучениеЗарплатыФизЛицо"
	Тогда
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", Новый Структура("Ключ", Элемент.ТекущиеДанные.ФизЛицо));
	ИначеЕсли Поле.Имя = "СотрудникиНаПолучениеЗарплатыСсылка" Тогда
		ОткрытьФорму("Документ.ЗарплатаКВыплатеОрганизаций.ФормаОбъекта", Новый Структура("Ключ", Элемент.ТекущиеДанные.ПлатежнаяВедомость));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиНаПолучениеЗарплатыПриАктивизацииСтроки(Элемент)
	
	ОбновитьСписокСотрудников();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "Список"

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Копирование Тогда
		НовыйДокументРасходныйКассовыйОрдер(0, Отказ);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыплатитьЗарплатуКакСтороннемуСотруднику(Команда)
	Если ОтборВыбранаКассаУправляющейСистемы = Истина Тогда
		ТекстСообщения = НСтр("ru = 'На выбранную кассу нельзя формировать документы, выбрана касса управляющей системы!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				"ЭтотОбъект",
				"Касса",
			);
		Возврат;
	КонецЕсли;
	
	Если Элементы.СотрудникиНаПолучениеЗарплаты.ВыделенныеСтроки.Количество() > 0.00 Тогда
		МассивСтрок = Новый Массив();
		Для Каждого СотрудникПолученияЗарплаты Из Элементы.СотрудникиНаПолучениеЗарплаты.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.СотрудникиНаПолучениеЗарплаты.ДанныеСтроки(СотрудникПолученияЗарплаты);
			
			МассивСтрок.Добавить(
									Новый Структура("
										|ПлатежнаяВедомость,
										|НомерСтроки,
										|ФизЛицо,
										|Сумма,
										|ХозяйственнаяОперация,
										|ВыплаченностьЗарплаты",
										ДанныеСтроки.ПлатежнаяВедомость,
										ДанныеСтроки.НомерСтроки,
										ДанныеСтроки.ФизЛицо,
										ДанныеСтроки.Сумма,
										ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику"),
										ПредопределенноеЗначение("Перечисление.ВыплаченностьЗарплаты.Выплачено")));
		КонецЦикла;
		СсылкиДокументовРКО = Новый Массив();
		ВыплатитьЗарплатуСотрудникуСервер(МассивСтрок, СсылкиДокументовРКО);
		Для каждого СсылкаРКО Из СсылкиДокументовРКО Цикл
			ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта", Новый Структура("Ключ", СсылкаРКО), ЭтотОбъект);
		КонецЦикла;
		Элементы.СотрудникиНаПолучениеЗарплаты.Обновить();
		Элементы.ВедомостиНаВыдачуЗарплаты.Обновить();
		
		ОбновитьИнфоСтроку();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатитьЗарплатуПоВедомости(Команда)
	
	Если Элементы.ВедомостиНаВыдачуЗарплаты.ТекущиеДанные = Неопределено Тогда
		возврат;
	КонецЕсли;
	
	Если ОтборВыбранаКассаУправляющейСистемы = Истина Тогда
		ТекстСообщения = НСтр("ru = 'На выбранную кассу нельзя формировать документы, выбрана касса управляющей системы!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				"ЭтотОбъект",
				"Касса",
			);
		Возврат;
	КонецЕсли;
	
	НовыйДокументРКОПоПлатежнойВедомости(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям"), Элементы.ВедомостиНаВыдачуЗарплаты.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатитьЗарплатуСотруднику(Команда)
	Если Элементы.СотрудникиНаПолучениеЗарплаты.ВыделенныеСтроки.Количество() > 0.00 Тогда
		МассивСтрок = Новый Массив();
		Для Каждого СотрудникПолученияЗарплаты Из Элементы.СотрудникиНаПолучениеЗарплаты.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.СотрудникиНаПолучениеЗарплаты.ДанныеСтроки(СотрудникПолученияЗарплаты);
			МассивСтрок.Добавить(
									Новый Структура("
										|ПлатежнаяВедомость,
										|НомерСтроки,
										|ФизЛицо,
										|Сумма,
										|ХозяйственнаяОперация,
										|ВыплаченностьЗарплаты",
										ДанныеСтроки.ПлатежнаяВедомость,
										ДанныеСтроки.НомерСтроки,
										Неопределено,
										Неопределено,
										Неопределено,
										ПредопределенноеЗначение("Перечисление.ВыплаченностьЗарплаты.Выплачено")));
		КонецЦикла;
		ВыплатитьЗарплатуСотрудникуСервер(МассивСтрок);
		Элементы.СотрудникиНаПолучениеЗарплаты.Обновить();
	КонецЕсли;
	
	ОбновитьИнфоСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура Депонировать(Команда)
	
	Если Элементы.СотрудникиНаПолучениеЗарплаты.ВыделенныеСтроки.Количество() > 0.00 Тогда
		МассивСтрок = Новый Массив();
		Для Каждого СотрудникПолученияЗарплаты Из Элементы.СотрудникиНаПолучениеЗарплаты.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.СотрудникиНаПолучениеЗарплаты.ДанныеСтроки(СотрудникПолученияЗарплаты);
			МассивСтрок.Добавить(
									Новый Структура("
										|ПлатежнаяВедомость,
										|НомерСтроки,
										|ФизЛицо,
										|Сумма,
										|ХозяйственнаяОперация,
										|ВыплаченностьЗарплаты",
										ДанныеСтроки.ПлатежнаяВедомость,
										ДанныеСтроки.НомерСтроки,
										Неопределено,
										Неопределено,
										Неопределено,
										ПредопределенноеЗначение("Перечисление.ВыплаченностьЗарплаты.Задепонировано")));
		КонецЦикла;
		ВыплатитьЗарплатуСотрудникуСервер(МассивСтрок);
		Элементы.СотрудникиНаПолучениеЗарплаты.Обновить();
		Элементы.ВедомостиНаВыдачуЗарплаты.Обновить();
		СуммаЗарплаты = 0.00;
		
		ОбновитьИнфоСтроку();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументРасходныйКассовыйОрдер(ХозяйственнаяОперацияИндекс, Отказ = Ложь)
	
	Если ПроверитьКассуНаКоторуюСоздаетсяДокументРКО(Отказ) Тогда

		Возврат;

	КонецЕсли;
	
	ХозяйственнаяОперация = СписокХозяйственныхОпераций[ХозяйственнаяОперацияИндекс].Значение;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Основание", Новый Структура("ХозяйственнаяОперация, Организация, Касса", ХозяйственнаяОперация, Организация, Касса));
	
	ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта", СтруктураПараметры, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументРКОВозвратОплатыКлиенту(Команда)
	
	НовыйДокументРасходныйКассовыйОрдер(3);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументРКОВыдачаДенежныхСредствВДругуюКассу(Команда)
	
	НовыйДокументРасходныйКассовыйОрдер(2);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументРКОВыдачаДенежныхСредствВДругуюОрганизацию(Команда)
	
	НовыйДокументРасходныйКассовыйОрдер(6);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументРКОВыдачаДенежныхСредствВКассуККМ(Команда)
	
	НовыйДокументРасходныйКассовыйОрдер(4);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументРКОВыплатаЗарплатыПоВедомости(Команда)
	
	НовыйДокументРасходныйКассовыйОрдер(7);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументРКОВыплатаЗарплатыРаботнику(Команда)
	
	НовыйДокументРасходныйКассовыйОрдер(8);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументРКОПрочаяВыдачаДенежныхСредств(Команда)
	
	НовыйДокументРасходныйКассовыйОрдер(5);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументРКОСдачаДенежныхСредствВБанк(Команда)
	
	НовыйДокументРасходныйКассовыйОрдер(1);
	
КонецПроцедуры

&НаКлиенте	//	LNK 22.02.2017 14:00:31
Процедура НовыйДокументРКООплатаФизическомуЛицу(Команда)

	НовыйДокументРасходныйКассовыйОрдер(9);

КонецПроцедуры

&НаКлиенте	//	LNK 24.10.2019 11:38:24
Процедура НовыйДокументРКОСписаниеРасхожденийДенежныхСредств(Команда)

	НовыйДокументРасходныйКассовыйОрдер(10);

КонецПроцедуры

&НаСервере
Процедура ОтборКассаПриИзмененииНаСервере()
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Касса, "Магазин, КассаУправляющейСистемы");
	ОтборВыбранаКассаУправляющейСистемы = Реквизиты.КассаУправляющейСистемы;
	
	Если НЕ ОтборВыбранаКассаУправляющейСистемы Тогда
		Магазин = Реквизиты.Магазин;
	Иначе
		Магазин = Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
	Если ВыплачиватьЗарплатуВМагазинах Тогда
		УстановитьОтборДинамическихСписков("ВедомостиНаВыдачуЗарплаты, СотрудникиНаПолучениеЗарплаты", "Магазин");
		Если ДанныеОбновленияИнфоСтроки <> Неопределено Тогда
			ОбновитьИнфоСтроку();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОтборДинамическихСписков("Список", "Касса,Магазин");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСпискуВедомостей(Команда)
	
	Элементы.СписокСотрудниковПлатежныеВедомости.ТекущаяСтраница = Элементы.ПлатежныеВедомости;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСпискуСотрудниковВыплатыЗарплаты(Команда)
	
	Элементы.СписокСотрудниковПлатежныеВедомости.ТекущаяСтраница = Элементы.СписокСотрудников;
	
	Элементы.СотрудникиНаПолучениеЗарплаты.Обновить();
	ОбновитьИнфоСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура СправочнаяИнформацияВедомости(Команда)
	
	ОткрытьСправку("Документ.ЗарплатаКВыплатеОрганизаций")
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ВыплатитьЗарплатуСотрудникуСервер(МассивСтрок, СсылкиДокументовРКО = Неопределено)
	
	Если ТипЗнч(СсылкиДокументовРКО) = Тип("Массив") Тогда
		
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("Касса");
		ДанныеЗаполнения.Вставить("Магазин");
		ДанныеЗаполнения.Вставить("Организация", ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущаяОрганизация",));
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(Перечисления.ФормыОплаты.Наличная, ДанныеЗаполнения);
		ДанныеЗаполнения.Свойство("Касса", Касса);
		
		Если НЕ ЗначениеЗаполнено(Касса) Тогда
			Текст = НСтр("ru = 'Программе не удалось определить кассу для оформления расходного кассового ордера. Для выполнения данного действия выберите кассу в поле отбора.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, ,"Касса", );
			возврат;
		Иначе
			Если Касса.КассаУправляющейСистемы = Истина Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не корректно оформлять расходный кассовый ордер на кассу управляющей системы %1'"),
					Касса
				);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, ,"Касса", );
				возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	МассивВедомостей = Новый Массив();
	СоответствиеВедомостей = Новый Соответствие();
	Для Каждого ДанныеСтроки Из МассивСтрок Цикл
		Если СоответствиеВедомостей.Получить(ДанныеСтроки.ПлатежнаяВедомость) = Неопределено Тогда
			СоответствиеВедомостей.Вставить(ДанныеСтроки.ПлатежнаяВедомость, ДанныеСтроки.ПлатежнаяВедомость.ПолучитьОбъект());
		КонецЕсли;
		СтрокаДокумента = СоответствиеВедомостей[ДанныеСтроки.ПлатежнаяВедомость].Зарплата.Получить(ДанныеСтроки.НомерСтроки-1);
		СтрокаДокумента.ВыплаченностьЗарплаты = ДанныеСтроки.ВыплаченностьЗарплаты;
	КонецЦикла;
	Для Каждого ДанныеСтроки Из МассивСтрок Цикл
		ПлатежнаяВедомостьОбъект = СоответствиеВедомостей[ДанныеСтроки.ПлатежнаяВедомость];
		Если ПлатежнаяВедомостьОбъект.Ответственный.Пустая() Тогда
			ПлатежнаяВедомостьОбъект.Ответственный = Пользователи.ТекущийПользователь();
		КонецЕсли;
		ПлатежнаяВедомостьОбъект.Записать(РежимЗаписиДокумента.Запись);
		Если ТипЗнч(СсылкиДокументовРКО) = Тип("Массив") Тогда
			ДокументРКО = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			СтруктураПараметры = Новый Структура("Основание, ХозяйственнаяОперация, ВыплатаЗарплаты, Контрагент, СуммаДокумента, Касса", ПлатежнаяВедомостьОбъект.Ссылка, ДанныеСтроки.ХозяйственнаяОперация, , ДанныеСтроки.ФизЛицо, ДанныеСтроки.Сумма, Касса);
			ДокументРКО.Ответственный = Пользователи.ТекущийПользователь();
			ДокументРКО.Заполнить(СтруктураПараметры);
			ДокументРКО.Записать(РежимЗаписиДокумента.Проведение);
			СсылкиДокументовРКО.Добавить(ДокументРКО.Ссылка);
		КонецЕсли;
	КонецЦикла;
	СуммаЗарплаты = 0.00;
КонецПроцедуры

// Параметры
//  <ПлатежнаяВедомость>  - <ДокументСсылка.ЗарплатаКВыплатеОрганизаций> - Ведомость по которой формируется документ РКО
//                 <продолжение описания параметра>
//  <СпособВыплатыЗарплаты>  - <ПеречислениеСсылка.ХозяйственныеОперации.ВыплатаЗарплатыПоВедомости> - Хоз. операция на которую будет создан документа Расходный кассовый ордер
//
&НаКлиенте
Процедура НовыйДокументРКОПоПлатежнойВедомости(СпособВыплатыЗарплаты, ПлатежнаяВедомость)
	
	МассивПараметрКоманды = Новый Массив();
	МассивПараметрКоманды.Добавить(Элементы.ВедомостиНаВыдачуЗарплаты.ТекущиеДанные.Ссылка);
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Основание", Новый Структура("Основание, ХозяйственнаяОперация, ВыплатаЗарплаты", ПлатежнаяВедомость, СпособВыплатыЗарплаты, , ));
	ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта", СтруктураПараметры, Элементы.ВедомостиНаВыдачуЗарплаты);
	
КонецПроцедуры

// Функция проверяет что касса на которую будет сформирован документ РКО не касса управляющей системы
// Возвращаемое значение:
// Булево - касса отправитель не может быть кассой управляющей системы.
&НаКлиенте
Функция ПроверитьКассуНаКоторуюСоздаетсяДокументРКО(Отказ)
	Если ОтборВыбранаКассаУправляющейСистемы Тогда
		ТекстСообщения = НСтр("ru = 'На выбранную кассу нельзя формировать документы, выбрана касса управляющей системы!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				"ЭтотОбъект",
				"Касса",
				,Отказ
			);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ОбновитьИнфоСтроку()

	Если ДанныеОбновленияИнфоСтроки = Неопределено ИЛИ ИСТИНА Тогда	//	LNK 23.03.2017 10:35:53
		Возврат;
	КонецЕсли;
	КассаПолеКД = Новый ПолеКомпоновкиДанных("Касса");
	
	//СписокВедомостей
	СКД = ПолучитьИзВременногоХранилища(ДанныеОбновленияИнфоСтроки.АдресСКДВедомостиНаЗарплату);
	КомпоновщикНастроек = ПолучитьИзВременногоХранилища(ДанныеОбновленияИнфоСтроки.АдресКомпоновщикаНастроекВедомостиНаЗарплату);
	КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	
	Для Каждого ЭлементОтбор Из ВедомостиНаВыдачуЗарплаты.Отбор.Элементы Цикл
		ДобавитьОтбор(КомпоновщикНастроек.Настройки.Отбор.Элементы, ЭлементОтбор, КассаПолеКД);
	КонецЦикла;
	
	НовыйЭлемент = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПроведенПолеКД = Новый ПолеКомпоновкиДанных("Ссылка.Проведен");
	НовыйЭлемент.ЛевоеЗначение = ПроведенПолеКД;
	НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлемент.ПравоеЗначение = Истина;
	
	НовыйЭлемент = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПроведенПолеКД = Новый ПолеКомпоновкиДанных("ЗарплатаВыплачена");
	НовыйЭлемент.ЛевоеЗначение = ПроведенПолеКД;
	НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлемент.ПравоеЗначение = Ложь;
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКД = КомпоновщикМакета.Выполнить(СКД, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКД.Инициализировать(МакетКД);

	СписокВедомостей = Новый ТаблицаЗначений;
	ПроцессорВыводаРезультатаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультатаКД.УстановитьОбъект(СписокВедомостей);
	ПроцессорВыводаРезультатаКД.Вывести(ПроцессорКД);
	
	//Сотрудники
	СКД = ПолучитьИзВременногоХранилища(ДанныеОбновленияИнфоСтроки.АдресСКДСотрудники);
	КомпоновщикНастроек = ПолучитьИзВременногоХранилища(ДанныеОбновленияИнфоСтроки.АдресКомпоновщикаНастроекСотрудники);
	КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	
	Для Каждого ЭлементОтбор Из СотрудникиНаПолучениеЗарплаты.Отбор.Элементы Цикл
		ДобавитьОтбор(КомпоновщикНастроек.Настройки.Отбор.Элементы, ЭлементОтбор, КассаПолеКД);
	КонецЦикла;

	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКД = КомпоновщикМакета.Выполнить(СКД, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКД.Инициализировать(МакетКД);

	СписокСотрудников = Новый ТаблицаЗначений;
	ПроцессорВыводаРезультатаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультатаКД.УстановитьОбъект(СписокСотрудников);
	ПроцессорВыводаРезультатаКД.Вывести(ПроцессорКД);
	
	Если СписокВедомостей.Количество() > 0 Тогда
		ИнфоСтрока = НСтр("ru = 'Имеются незакрытые ведомости на выплату зарплаты'");
	Иначе
		ИнфоСтрока = "";
	КонецЕсли;
	
	Если СписокСотрудников.Количество() = 0 И СписокВедомостей.Количество() > 0 Тогда
		Элементы.ИнфоСтрока.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	Иначе
		Элементы.ИнфоСтрока.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СоздатьДанныеОбновленияИнфоСтроки()
	
	ДанныеОбновленияИнфоСтроки = Новый Структура;
	
	//СКД ВедомостиНаВыдачуЗарплаты
	СКД = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	НаборДанных.Запрос = ВедомостиНаВыдачуЗарплаты.ТекстЗапроса;
	
	ВыбранноеПолеКомпоновкиДанных = СКД.ВариантыНастроек.Основной.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	
	ГруппировкаКомпоновкиДанных = СКД.ВариантыНастроек.Основной.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	АвтоВыбранноеПолеКомпоновкиДанных = СКД.ВариантыНастроек.Основной.Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	АдресСКД = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	
	АдресКомпоновщикаНастроек = ПоместитьВоВременноеХранилище(КомпоновщикНастроек, УникальныйИдентификатор);
	
	ДанныеОбновленияИнфоСтроки.Вставить("АдресСКДВедомостиНаЗарплату", АдресСКД);
	ДанныеОбновленияИнфоСтроки.Вставить("АдресКомпоновщикаНастроекВедомостиНаЗарплату", АдресКомпоновщикаНастроек);
	
	
	//СКД СотрудникиНаПолучениеЗарплаты
	СКД = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	НаборДанных.Запрос = СотрудникиНаПолучениеЗарплаты.ТекстЗапроса;
	
	ВыбранноеПолеКомпоновкиДанных = СКД.ВариантыНастроек.Основной.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных("ФизЛицо");
	
	ГруппировкаКомпоновкиДанных = СКД.ВариантыНастроек.Основной.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	АвтоВыбранноеПолеКомпоновкиДанных = СКД.ВариантыНастроек.Основной.Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	АдресСКД = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	
	АдресКомпоновщикаНастроек = ПоместитьВоВременноеХранилище(КомпоновщикНастроек, УникальныйИдентификатор);
	
	ДанныеОбновленияИнфоСтроки.Вставить("АдресСКДСотрудники", АдресСКД);
	ДанныеОбновленияИнфоСтроки.Вставить("АдресКомпоновщикаНастроекСотрудники", АдресКомпоновщикаНастроек);
	
	ОбновитьИнфоСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтбор(Элементы, ЭлементОтбор, КассаПолеКД)
	
	Если Тип(ЭлементОтбор) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбор.ЛевоеЗначение = КассаПолеКД Тогда
		Возврат;
	КонецЕсли;
		
	НовыйЭлемент = Элементы.Добавить(Тип(ЭлементОтбор));
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементОтбор);
		
	Если Тип(ЭлементОтбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ЭлементОтбор.Элементы.Количество() > 0 Тогда
		
		Для Каждого ЭлементОтбора Из ЭлементОтбор.Элементы Цикл
			ДобавитьОтбор(НовыйЭлемент.Элементы, ЭлементОтбора, КассаПолеКД);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Управление свойствами элементов формы

&НаСервере
Процедура ЗаполнитьСписокХозяйственныхОпераций()
	
	СписокХозяйственныхОпераций.Очистить();
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику); // 0
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк); // 1
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу); // 2
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту); // 3
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ); // 4
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПрочиеРасходы); // 5
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию); // 6
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям); // 7
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику); // 8
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаФизическомуЛицу); // 9
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СписаниеРасхожденийДенежныхСредств); // 10
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокСотрудников()
	
	СуммаЗарплаты = 0.00;
	Для каждого СотрудникПолученияЗарплаты Из Элементы.СотрудникиНаПолучениеЗарплаты.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.СотрудникиНаПолучениеЗарплаты.ДанныеСтроки(СотрудникПолученияЗарплаты);
		Если ДанныеСтроки = Неопределено Тогда
			продолжить;
		КонецЕсли;
		СуммаЗарплаты = СуммаЗарплаты + ДанныеСтроки.Сумма;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическихСписков(СтрокаСписокДинамическийСписок, СтрокаСписокИмяРеквизита)
	Перем ПараметрВидСравнения, ЗначениеОтбора;
	СтруктураДинамическихСписков = Новый Структура(СтрокаСписокДинамическийСписок);
	СтруктураИменРеквизитов = Новый Структура(СтрокаСписокИмяРеквизита);
	Для Каждого НаименованиеДинамическогоСписка Из СтруктураДинамическихСписков Цикл
		ДинамическийСписок = ЭтотОбъект[НаименованиеДинамическогоСписка.Ключ];
		Для Каждого НаименованиеРеквизита Из СтруктураИменРеквизитов Цикл
			ИмяРеквизита = НаименованиеРеквизита.Ключ;
			Если (НаименованиеДинамическогоСписка.Ключ = "ВедомостиНаВыдачуЗарплаты"
					ИЛИ НаименованиеДинамическогоСписка.Ключ = "СотрудникиНаПолучениеЗарплаты")
					И ИмяРеквизита = "Магазин"
			Тогда
				ЗначениеОтбора = Новый СписокЗначений();
				ЗначениеОтбора.Добавить(ЭтотОбъект[ИмяРеквизита]);
				ЗначениеОтбора.Добавить(Справочники.Магазины.ПустаяСсылка());
				ПараметрВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				ЗначениеОтбора = ЭтотОбъект[ИмяРеквизита];
			КонецЕсли;
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
				ДинамическийСписок,
				ИмяРеквизита,
				ЗначениеОтбора,
				ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]),
				ПараметрВидСравнения
				);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыСотрудникамПолученяЗарплаты()
	
	Для каждого ЭлементОтбора Из СотрудникиНаПолучениеЗарплаты.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СотрудникиНаПолучениеЗарплаты.Отбор.Элементы.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ЭтотОбъект["ФИО"])
		ИЛИ НЕ ПустаяСтрока(ЭтотОбъект["ТабельныйНомер"])
	Тогда
		ГруппаЭлементов = СотрудникиНаПолучениеЗарплаты.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ГруппаЭлементов.Использование = Истина;
		Если НЕ ПустаяСтрока(ЭтотОбъект["ФИО"]) Тогда
			Отбор = ГруппаЭлементов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФИО");
			Отбор.Использование = Истина;
			Отбор.ПравоеЗначение = ЭтотОбъект["ФИО"];
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
		КонецЕсли;
		Если НЕ ПустаяСтрока(ЭтотОбъект["ТабельныйНомер"]) Тогда
			Отбор = ГруппаЭлементов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТабельныйНомер");
			Отбор.Использование = Истина;
			Отбор.ПравоеЗначение = ЭтотОбъект["ТабельныйНомер"];
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры




