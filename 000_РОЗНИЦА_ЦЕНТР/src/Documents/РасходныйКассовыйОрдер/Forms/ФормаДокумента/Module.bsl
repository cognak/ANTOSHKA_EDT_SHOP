&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда

		Возврат;

	КонецЕсли;

//	Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);

//	Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);

//	LNK 26.09.2016 08:51:17
//	NAV:БлокировкаДанныхУчестьДокументВNavision
//	Обработчик подсистемы "NAV"
	ВнешниеИсточникиСобытия.ДобавитьКнопкуУчестьВNavision(ЭтотОбъект, ЭтотОбъект.КоманднаяПанель);
//	Оформление элементов в обработчике подсистемы "NAV"
	ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект,, Ложь);
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект, КартинкаСостоянияДокумента, СостояниеДокумента, РазрешеноПроведение);

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		УправлениеЭлементамиФормы();
		
	КонецЕсли;
	
	НастроитьФормуПоДополнительнымПравам();
	
	УстановитьДоступностьПоляВводаНомерОрдера();

//	LNK 14.09.2017 13:02:14
	ОбновитьНекторыеСпискиВыбора();

	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда

		Элементы.НомерПломбы.Видимость = Истина;

	КонецЕсли;

	УправлениеДоступомРТ.ПриСозданииФормыНаСервере(ЭтотОбъект);	//	LNK 17.10.2019 14:30:01

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УправлениеЭлементамиФормы();
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.Ответственный.Пустая() Тогда

		ТекущийОбъект.Ответственный = Пользователи.ТекущийПользователь()

	КонецЕсли;

//	LNK 26.09.2016 08:52:13
//	NAV:БлокировкаДанныхУчестьДокументВNavision
//	Управление блокировкой "УчётВNavision" подсистемы "NAV" (реквизит "РегистрацияПередачиВNavision" создается в обработчике ПриСозданииНаСервере)
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РегистрацияПередачиВNavision", ЭтотОбъект["РегистрацияПередачиВNavision"]);

КонецПроцедуры

//	LNK 26.09.2016 09:16:36
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
//	LNK 26.09.2016 08:52:48
//	NAV:БлокировкаДанныхУчестьДокументВNavision
//	Оформление элементов в обработчике подсистемы "NAV"
	ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект,, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНеоплаченныхДокументов.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНеоплаченныхДокументов(ВыбранноеЗначение);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

//	LNK 26.09.2016 09:14:07
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ИмяСобытия = "РегистрацияПередачиВNavision" Тогда

		ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник);

	КонецЕсли;

КонецПроцедуры

&НаСервере	//	LNK 30.10.2019 12:59:35
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеРасхожденийДенежныхСредств Тогда

		Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда	//	LNK 05.07.2021 06:14:15 - был какой-то сбой.. хез

			СтрокаРасшифровки = Объект.РасшифровкаПлатежа.Добавить();
			СтрокаРасшифровки.Сумма = Объект.СуммаДокумента;
			СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;

		Иначе

			СтрокаРасшифровки = Объект.РасшифровкаПлатежа[0];

		КонецЕсли;

		Если СтрокаРасшифровки.Сумма > 0.09 Тогда

			ТекстОшибки = НСтр("ru='Сумма документа НЕ может превышать 9 копеек!'");
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект,
				"СуммаДокумента",
				,
				Отказ
			);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
//	LNK 27.06.2017 13:57:32
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ") Тогда

	//	В типовой конфигурации табличная часть пустая... уроды! Сделано для возможности изменения СтатьиДДС
		Объект.РасшифровкаПлатежа.Очистить();

		СтрокаРасшифровки = Объект.РасшифровкаПлатежа.Добавить();
		СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
		СтрокаРасшифровки.Сумма = Объект.СуммаДокумента;

	КонецЕсли;

	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк")
		И НЕ Объект.РасшифровкаПлатежа.Количество() = 0	Тогда

		Объект.РасшифровкаПлатежа[0].Сумма = Объект.ТаблицаОписьСдаваемыхНаличныхДенег.Итог("Сумма");

	КонецЕсли;

	Если ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) тогда 

		Объект.КоррСчет = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтатьяДвиженияДенежныхСредств, "КорреспондирующийСчет");

	КонецЕсли;

	ФинансыКлиент.ПересчетСуммыДокументаПоРасшифровкеПлатежа(Объект);
	УстановленныеПараметры = Новый Массив();
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям")
		ИЛИ Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику")
	Тогда
		
		Оповестить("ВыполненаВыплатаРКО");
		
	КонецЕсли;

//	LNK 26.09.2016 08:56:20
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	ВнешниеИсточникиКлиент.ВыполнитьОповещениеПередачиДокументаВNavision(Объект.Ссылка, Объект.Ссылка, ЭтотОбъект["РегистрацияПередачиВNavision"]);

//	LNK 14.09.2017 13:02:14
	ОбновитьНекторыеСпискиВыбора();

	ЗаполнитьСписокВыбораРаботникПоВедомостиНаЗарплату();

	НастроитьФормуПоДополнительнымПравам();	//	LNK 05.10.2017 14:37:11

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	СброситьУстановленныйНомерОрдера();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоБанкнотПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаОписьСдаваемыхНаличныхДенег.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Номинал * ТекущиеДанные.КоличествоБанкнот / ТекущиеДанные.Коэффициент;
	СуммаБанкнот = Объект.ТаблицаОписьСдаваемыхНаличныхДенег.Итог("Сумма");
	Объект.СуммаДокумента = СуммаБанкнот;
	СуммаПодвалаНоминалыБанкнот = Формат(СуммаБанкнот, "ЧЦ=15; ЧДЦ=2");
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Касса) Тогда
		КассаПриИзмененииСервер();
	Иначе
		Магазин = ПредопределенноеЗначение("Справочник.Магазины.ПустаяСсылка");
		Объект.БанковскийСчет = ПредопределенноеЗначение("Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка");
		Объект.КассаККМ = ПредопределенноеЗначение("Справочник.КассыККМ.ПустаяСсылка");
		МагазинПриИзмененииКлиент();
	КонецЕсли;
	
//	LNK 03.08.2018 13:40:25
	ОбновитьНекторыеСпискиВыбора();

	СброситьУстановленныйНомерОрдера();
	
КонецПроцедуры

//	LNK 20.02.2017 10:59:18
&НаКлиенте
Процедура КассаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если НЕ Объект.Организация.Пустая() Тогда

		ДанныеВыбора = ФинансыВызовСервера.СписокДоступныхКасс(, Объект.Организация, Истина);
		СтандартнаяОбработка = Ложь;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КассаККМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Магазин) Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Магазин", Магазин);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.КассаККМ.ПараметрыВыбора = НовыеПараметры;
	Иначе
		Элементы.КассаККМ.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ФинансыКлиент.ПересчетСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента);
	
КонецПроцедуры

//	LNK 22.02.2017 13:49:09
&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И НЕ ВыбранноеЗначение.Количество() = 0 Тогда

		ВыбранноеЗначение = ВыбранноеЗначение[0];

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияМногострочногоТекста(Элемент.ТекстРедактирования , Объект.Комментарий, Модифицированность, "Комментарий:");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииКлиент();
	
КонецПроцедуры

//	LNK 20.02.2017 16:16:41
&НаКлиенте
Процедура ГлавныйБухгалтерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И НЕ ВыбранноеЗначение.Количество() = 0 Тогда

		ВыбранноеЗначение = ВыбранноеЗначение[0];

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПрочиеРасходыПриИзменении(Элемент)
	
	КонтрагентПриИзмененииКлиент();
	
КонецПроцедуры

//	LNK 22.02.2017 16:49:14
&НаКлиенте
Процедура ФизическоеЛицоПриИзменении(Элемент)

	УстановитьТекстПоДокументуФизическогоЛица();

КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяВедомостьПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПлатежнаяВедомость)
		ИЛИ Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям")
	Тогда
		Объект.ДокументОснование = Объект.ПлатежнаяВедомость;
		возврат;
	КонецЕсли;
	
	ЗаполнитьДокументНаОснованииПлатежнойВедомости();
	ЗаполнитьСписокВыбораРаботникПоВедомостиНаЗарплату();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникПриИзменении(Элемент)
	МассивРаботникиВедомости = РаботникиВедомости.НайтиСтроки(Новый Структура("Работник", Объект.Контрагент));
	Если МассивРаботникиВедомости.Количество() > 0.00 Тогда
		Объект.СуммаДокумента = МассивРаботникиВедомости[0].Сумма;
	КонецЕсли;
КонецПроцедуры

//	NAV:БлокировкаДанныхУчестьДокументВNavision
#Область ОбслуживаниеКнопкиУчестьДокументВNavision

//	LNK 08.09.2016 14:41:31
//	Обработчик события кнопки подсистемы "NAV"
&НаКлиенте
Процедура РегистрацияПередачиВNavisionНажатие(Элемент)

	ВнешниеИсточникиКлиент.ПодтвердитьРешениеУчетВNavision(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте	//	LNK 18.06.2023 06:12:51
Процедура РегистрацияПередачиВNavisionПовторнаяНажатие(Элемент)

	ВнешниеИсточникиКлиент.ПодтвердитьПовторнуюВыгрузкуВNavision(ЭтотОбъект);

КонецПроцедуры

//	LNK 08.09.2016 14:41:31
//	Обработчик события кнопки подсистемы "NAV"
&НаСервере
Процедура РегистрацияПередачиВNavisionНаСервере()	Экспорт

//	Оформление элементов в обработчике подсистемы "NAV"
	ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект, Истина, Ложь);

КонецПроцедуры

//	LNK 23.10.2017 14:18:28
&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник)

//	LNK 26.09.2016 08:58:49
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ИмяСобытия = "РегистрацияПередачиВNavision" Тогда

		Если НЕ Источник = Объект.Ссылка И Параметр.Объект = Объект.Ссылка Тогда

		//	Оформление элементов в обработчике подсистемы "NAV"
			ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект,, Ложь);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "РасшифровкаПлатежа"

&НаКлиенте
Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.РасшифровкаПлатежа.ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(Элементы.РасшифровкаПлатежа.ТекущиеДанные.ДокументРасчетовСКонтрагентом) Тогда
			Элемент.ВыбиратьТип = Ложь;
		Иначе
			Элемент.ВыбиратьТип = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументРасчетовСКонтрагентом) Тогда
			
			СтрокаТаблицы.Сумма = ДенежныеСредстваСервер.ПолучитьСуммуДокумента(СтрокаТаблицы.ДокументРасчетовСКонтрагентом);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект.РасшифровкаПлатежа, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект.РасшифровкаПлатежа, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	СтрокаРасшифровки = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтатьяДвиженияДенежныхСредств = СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока И НЕ Копирование Тогда

		СуммаОстаток = Объект.СуммаДокумента - Объект.РасшифровкаПлатежа.Итог("Сумма");
		Элемент.ТекущиеДанные.Сумма = СуммаОстаток;
		Элемент.ТекущиеДанные.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;

	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "ТаблицаОписьСдаваемыхНаличныхДенег"

&НаКлиенте
Процедура ТаблицаОписьСдаваемыхНаличныхДенегПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОписьСдаваемыхНаличныхДенегПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПодобратьНеоплаченные(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Касса)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		АдресХранилищаРасшифровкаПлатежа = ПоместитьВХранилищеРасшифровкуПлатежа();
	Иначе
		АдресХранилищаРасшифровкаПлатежа = "";
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин", 		ОбщегоНазначенияРТСервер.ЗначениеРеквизитаОбъекта(Объект.Касса, "Магазин"));
	ПараметрыФормы.Вставить("Контрагент", 	Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация", 	Объект.Организация);
	ПараметрыФормы.Вставить("ФормаОплаты", 	ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная"));
	ПараметрыФормы.Вставить("Операция", 	Объект.ХозяйственнаяОперация);
	ПараметрыФормы.Вставить("АдресХранилищаРасшифровкаПлатежа", АдресХранилищаРасшифровкаПлатежа);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);

	ОткрытьФорму("Обработка.ПодборНеоплаченныхДокументов.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере	//	LNK 03.08.2018 13:33:24
Процедура ОбновитьНекторыеСпискиВыбора()

	Элементы.Основание.СписокВыбора.ЗагрузитьЗначения(ФинансыВызовСервера.СписокПоследнихОснованийХозяйственнойОперации(Объект.Касса, "РасходныйКассовыйОрдер", Объект.ХозяйственнаяОперация));
	Элементы.ГлавныйБухгалтер.СписокВыбора.ЗагрузитьЗначения(ФинансыВызовСервера.СписокПоследнихОтветственныхЛиц(Объект.Касса, "РасходныйКассовыйОрдер", ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер")));

КонецПроцедуры

// Процедура получает список работников (физических лиц) из документа "Ведомость на выплату зараплаты".
//
&НаСервере
Процедура ЗаполнитьСписокВыбораРаботникПоВедомостиНаЗарплату()
	
	Элементы.Работник.СписокВыбора.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаРаботниковВедомости = Документы.РасходныйКассовыйОрдер.РаботникиНаПолучениеЗарплаты(Объект.ПлатежнаяВедомость);
	
	Пока ВыборкаРаботниковВедомости.Следующий() Цикл
		СтрокаРаботника = РаботникиВедомости.Добавить();
		СтрокаРаботника.Работник = ВыборкаРаботниковВедомости.Работник;
		СтрокаРаботника.Сумма = ВыборкаРаботниковВедомости.Сумма;
		Элементы.Работник.СписокВыбора.Добавить(ВыборкаРаботниковВедомости.Работник, ВыборкаРаботниковВедомости.РаботникПредставление + " - " + ВыборкаРаботниковВедомости.Сумма + " грн.");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Касса"" не заполнено'"), Объект, "Объект.Касса",,Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Контрагент"" не заполнено'"), Объект, "Объект.Контрагент",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНеоплаченныхДокументов(ВыбранноеЗначение)
	
	ТаблицаДокументов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресКорзиныВХранилище);
	Объект.РасшифровкаПлатежа.Очистить();
	
	Для каждого СтрокаТаблицы Из ТаблицаДокументов Цикл

		СтрокаРасшифровки = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаТаблицы);

		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств) Тогда

			СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;

		КонецЕсли;

	КонецЦикла;

	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект.РасшифровкаПлатежа, Истина);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаКлиенте
Процедура КонтрагентПриИзмененииКлиент()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И Не ЗначениеЗаполнено(Объект.Выдать) Тогда
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
		КонтрагентПриИзмененииСервер(СтруктураПараметров);
		Объект.Выдать = СтруктураПараметров.Выдать;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтрагентПриИзмененииСервер(СтруктураПараметров)
	
	СтруктураПараметров.Вставить("Выдать", Справочники.Контрагенты.ПолучитьНаименованиеКонтрагента(СтруктураПараметров.Контрагент));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументНаОснованииПлатежнойВедомости()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.ПлатежнаяВедомость);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура КассаПриИзмененииСервер()

		СтруктураРеквизитов = ДенежныеСредстваСервер.ПолучитьРеквизитыКассы(Объект.Касса);
		
		Если НЕ Магазин = СтруктураРеквизитов.Магазин Тогда
			Магазин = СтруктураРеквизитов.Магазин;
			Объект.ПлатежнаяВедомость = "";
		КонецЕсли;
		
		Если НЕ Объект.Организация = СтруктураРеквизитов.Организация Тогда
			Объект.Организация = СтруктураРеквизитов.Организация;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
				РеквизитыБанковскогоСчета = Справочники.БанковскиеСчетаОрганизаций.РеквизитыБанковскогоСчетаОрганизации(Объект.БанковскийСчет);
				Если РеквизитыБанковскогоСчета.Организация <> Объект.Организация Тогда
					Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
							Объект.Организация,
							Перечисления.ФормыОплаты.Безналичная
						);
				КонецЕсли;
			ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ Тогда
				РеквизитыКассыККМ = Справочники.КассыККМ.РеквизитыКассыККМ(Объект.КассаККМ);
				Если РеквизитыКассыККМ.Организация <> Объект.Организация Тогда
					Объект.КассаККМ = ЗначениеНастроекПовтИсп.ПолучитьКассуККМПоУмолчанию(Объект.Организация, , Магазин);
				КонецЕсли;
			ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу Тогда
				РеквизитыКассаПолучатель = Справочники.Кассы.РеквизитыКассы(Объект.КассаПолучатель);
				Если РеквизитыКассаПолучатель.Организация <> Объект.Организация Тогда
					Объект.КассаПолучатель = Справочники.Кассы.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
		Иначе
			Объект.БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
			Объект.КассаККМ = Справочники.КассыККМ.ПустаяСсылка();
			Объект.КассаПолучатель = Справочники.Кассы.ПустаяСсылка();
		КонецЕсли;
		
		МагазинПриИзмененииСервер();
		
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстПоДокументуФизическогоЛица()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ФизическиеЛица.НомерПаспорта,
	|	ФизическиеЛица.ДатаВыдачиПаспорта,
	|	ФизическиеЛица.КемВыданПаспорт
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &Контрагент"
	);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

		Объект.ПоДокументу = "паспорт, серiя/номер: " + СокрЛП(Выборка.НомерПаспорта)
			+ ", виданий: " + Формат(Выборка.ДатаВыдачиПаспорта, "Л=uk_UA; ДЛФ=DD") + " " + СокрЛП(Выборка.КемВыданПаспорт);

	КонецЕсли;

	Объект.Выдать = СокрЛП(Объект.Контрагент);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Управление свойствами элементов формы

// В процедуре выполняется установка свойств элементов формы.
//
&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	ОбновитьЭлементыФормыПоХозяйственнойОперации();
	УстановитьСвязьПараметровВыбораБанковскийСчетОрганизации();
	УстановитьСвязьПараметровВыбораКассаПолучатель();
	ЗаполнитьСписокВыбораРаботникПоВедомостиНаЗарплату();
	
	ЭтоОрганизацияИзНастроекПользователя = ?(Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("Структура"), Параметры.Основание.Свойство("ОрганизацияИзНастроекПользователя"), Ложь);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораКассы(Объект, Элементы.Касса, ЭтоОрганизацияИзНастроекПользователя);
	Магазин = ДенежныеСредстваСервер.ПолучитьРеквизитыКассы(Объект.Касса).Магазин;
	
//	LNK 27.06.2017 14:06:35
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ")
	И НЕ Объект.РасшифровкаПлатежа.Количество() = 0	Тогда

			СтатьяДвиженияДенежныхСредств = Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;

	Иначе	СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(Объект.ХозяйственнаяОперация);

	КонецЕсли;

	Если ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) тогда

		Объект.КоррСчет = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтатьяДвиженияДенежныхСредств, "КорреспондирующийСчет")	

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Магазин) И ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
	
		Магазин = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ПлатежнаяВедомость, "Магазин");
	
	КонецЕсли;

	Элементы.РасшифровкаПлатежаПодобратьНеоплаченные.Видимость = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику);

	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда

			Элементы.ДокументОснование.Видимость = Истина;

	Иначе	Элементы.ДокументОснование.Видимость = Ложь;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементамПоХозяйственнойОперации()

	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.РасходныйКассовыйОрдер.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);

	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
КонецПроцедуры

//	LNK 27.06.2017 12:02:51
&НаСервере
Процедура УстановитьОграничениеСтатьиДвиженияДенежныхСредствПоХозяйственнойОперации()

	Элементы.СтатьяДвиженияДенежныхСредств.СписокВыбора.ЗагрузитьЗначения(
		Справочники.СтатьиДвиженияДенежныхСредств.СтатьиДвиженияДенежныхСредствПоХозяйственнойОперации(Объект.ХозяйственнаяОперация));

КонецПроцедуры

// Процедура заполняет и отображает табличную часть "Опись сдаваемых наличных денег", если хозяйственная операция документа "Сдача денежных средств в банк".
// Для хозяйственных операций передач денег в другие кассы, отображает реквизиты формы для группы получатель.
&НаСервере
Процедура ОбновитьЭлементыФормыПоХозяйственнойОперации()
	
	УстановитьВидимостьЭлементамПоХозяйственнойОперации();
	УстановитьОграничениеТипаЭлементамФормыПоХозяйственнойОперации();
	УстановитьОграничениеСтатьиДвиженияДенежныхСредствПоХозяйственнойОперации();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		Если Объект.ТаблицаОписьСдаваемыхНаличныхДенег.Количество() = 0 Тогда
			
			// Таблица ТаблицаОписьСдаваемыхНаличныхДенег заполняется один раз при создании на сервере или при чтении на сервере
			// В случае, если форма перечитывается на сервере неоднократно, таблицу ТаблицаОписьСдаваемыхНаличныхДенег не нужно перезаполнять.
			// Таблица ТаблицаОписьСдаваемыхНаличныхДенег заполняется константными строками(значениями) из макета НоминалыБанкнот
			
			МакетНоминалыБанкнот = Документы.РасходныйКассовыйОрдер.ПолучитьМакет("ПФ_MXL_ПрепроводительнаяВедомостьКСумке");
			ОбластьНоминалыБанкнот = МакетНоминалыБанкнот.ПолучитьОбласть("НоминалыБанкнотСтроки|ВертикальнаяСекция");
			ОбластьКоличествоБанкнот = МакетНоминалыБанкнот.ПолучитьОбласть("НоминалыБанкнотСтроки|КоличествоБанкнот");
			ОбластьСуммаБанкнотБанкнот = МакетНоминалыБанкнот.ПолучитьОбласть("НоминалыБанкнотСтроки|СуммаБанкнот");
			
			Для Высота = 1 По ОбластьНоминалыБанкнот.ВысотаТаблицы Цикл
				СтрокаОписьБанкнот = Объект.ТаблицаОписьСдаваемыхНаличныхДенег.Добавить();
				
				// Данный программный блок получает строку с параметром, например "коп_1_100" или "грн_1000_1"
				// Данная строка структурирована символом "_", этот символ заменяется на символ "ПС",
				// в результате получаем строку состоящую из трех строк:
				// Первая строка "коп" - наименование банкноты
				// Вторая строка "1"   - достоинство банкноты
				// Третья строка "100" - коэффициент пересчета к гривне
				// или
				// Первая строка "грн"  - наименование банкноты
				// Вторая строка "1000" - достоинство банкноты
				// Третья строка "1"    - коэффициент пересчета к гривне
				
				СтрокаСФорматированнымПараметром = ОбластьКоличествоБанкнот.ПолучитьОбласть(высота, 1, высота, 1).ТекущаяОбласть.Параметр;
				СтрокаСФорматированнымПараметромМногоСтрочная = СтрЗаменить(СтрокаСФорматированнымПараметром, "_", Символы.ПС);
				СтрокаОписьБанкнот.НаименованиеБанкноты = СтрПолучитьСтроку(СтрокаСФорматированнымПараметромМногоСтрочная, 1) + ".";
				СтрокаОписьБанкнот.Номинал = Число(СтрПолучитьСтроку(СтрокаСФорматированнымПараметромМногоСтрочная, 2));
				СтрокаОписьБанкнот.Коэффициент = Число(СтрПолучитьСтроку(СтрокаСФорматированнымПараметромМногоСтрочная, 3));
				СтрокаОписьБанкнот.ПараметрКоличествоБанкнот = СтрокаСФорматированнымПараметром;
				СтрокаОписьБанкнот.ПараметрСуммаБанкнот = ОбластьСуммаБанкнотБанкнот.ПолучитьОбласть(высота, 1, высота, 1).ТекущаяОбласть.Параметр;
			КонецЦикла;
			Объект.ТаблицаОписьСдаваемыхНаличныхДенег.Сортировать("Коэффициент Возр, Номинал Убыв");
			Элементы.Сумма.ОтображатьВПодвале = Истина;
		КонецЕсли;
		Элементы.ПанельОбложка.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.ПанельОбложка.ТекущаяСтраница = Элементы.ОписьСдаваемыхНаличныхДенег;
	Иначе
		Элементы.ПанельОбложка.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ПанельОбложка.ТекущаяСтраница = Элементы.Печать;
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
			И ЗначениеЗаполнено(Объект.Касса)
			И Объект.Касса.КассаУправляющейСистемы Тогда
			Элементы.Касса.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ
	Тогда
		Элементы.ГруппаОтправитель.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
		Элементы.ГруппаПолучатель.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
		Элементы.ГруппаОтправитель.ОтображатьЗаголовок = Истина;
	Иначе
		Элементы.ГруппаОтправитель.Отображение = ОтображениеОбычнойГруппы.Нет;
		Элементы.ГруппаПолучатель.Отображение = ОтображениеОбычнойГруппы.Нет;
		Элементы.ГруппаОтправитель.ОтображатьЗаголовок = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОграничениеТипаЭлементамФормыПоХозяйственнойОперации()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику Тогда

		Элементы.Работник.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");

	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ Тогда

		Элементы.КассирКассыККМ.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");

	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаФизическомуЛицу Тогда

		Элементы.ФизическоеЛицо.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");

	Иначе

		Элементы.Работник.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");

	КонецЕсли;

	Элементы.Работник.ВыбиратьТип = Ложь;
	Элементы.Контрагент.ВыбиратьТип = Ложь;
	Элементы.ФизическоеЛицо.ВыбиратьТип = Ложь;
	Элементы.КассирКассыККМ.ВыбиратьТип = Ложь;
	
	МассивТиповОграничений = Документы.РасходныйКассовыйОрдер.ОграничениеТипаДокументаРасчетовПоХозяйственнойОперации(Объект.ХозяйственнаяОперация);
	
	Если МассивТиповОграничений.Количество() > 0 Тогда
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ВыбиратьТип = МассивТиповОграничений.Количество() > 1;
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ОграничениеТипа = Новый ОписаниеТипов(МассивТиповОграничений);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоляВводаНомерОрдера()

	Элементы.НомерОрдера.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.НомерОрдера);
	Если Элементы.НомерОрдера.ТолькоПросмотр Тогда
		Элементы.НомерОрдера.Подсказка =  НСтр("ru='Номер ордера будет присвоен при записи объекта.';uk=""Номер ордера буде привласнений при записі об'єкта.""");
	Иначе
		Элементы.НомерОрдера.Подсказка =  НСтр("ru='Номер ордера';uk='Номер ордера'");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьСвязьПараметровВыбораКассаПолучатель()
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию Тогда
		возврат;
	КонецЕсли;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ Тогда
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация", РежимИзмененияСвязанногоЗначения.НеИзменять));
		Элементы.КассаПолучатель.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Иначе
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.КассаУправляющейСистемы", Ложь));
		Элементы.КассаПолучатель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязьПараметровВыбораБанковскийСчетОрганизации()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация", РежимИзмененияСвязанногоЗначения.НеИзменять));
		Элементы.БанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()

//	ИначеЕсли НЕ Объект.Проведен И Объект.Проводился И Документы.РасходныйКассовыйОрдер.ИспользоватьСелективнуюДоступностьЭлементов(Объект.ХозяйственнаяОперация) Тогда
	Если (Объект.Проведен ИЛИ НЕ Объект.Проведен И Объект.Проводился) И Документы.РасходныйКассовыйОрдер.ИспользоватьСелективнуюДоступностьЭлементов(Объект.ХозяйственнаяОперация) Тогда

		ТолькоПросмотр  = Ложь;	//	LNK 28.05.2019 09:34:56

		Если НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда	//	LNK 03.06.2019 08:53:16

			ИсточникиДанных = Документы.РасходныйКассовыйОрдер.ЭлементыСелективнойДоступности(Объект.ХозяйственнаяОперация);
			ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьЭлементыФормы(Элементы, ИсточникиДанных);

		КонецЕсли;

	ИначеЕсли Объект.Проведен И НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() Тогда

		ТолькоПросмотр = Истина;

	Иначе

		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
	//	LNK 04.01.2017 13:54:53
		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Номер.ТолькоПросмотр,
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьНомерДокумента);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПоместитьВХранилищеРасшифровкуПлатежа()

	РасшифровкаПлатежа = Объект.РасшифровкаПлатежа.Выгрузить();
	
	Адрес = ПоместитьВоВременноеХранилище(РасшифровкаПлатежа, УникальныйИдентификатор);
	
	Возврат Адрес;

КонецФункции

&НаКлиенте
Процедура МагазинПриИзмененииКлиент()
	
	Для Каждого Строка Из Объект.РасшифровкаПлатежа Цикл 
		
		Строка.ДокументРасчетовСКонтрагентом = Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура МагазинПриИзмененииСервер()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РасшифровкаПлатежа", Объект.РасшифровкаПлатежа.Выгрузить(,"ДокументРасчетовСКонтрагентом"));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом
		|ПОМЕСТИТЬ ДокРасчетов
		|ИЗ
		|	&РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокРасчетов.ДокументРасчетовСКонтрагентом.Магазин КАК Магазин
		|ИЗ
		|	ДокРасчетов КАК ДокРасчетов
		|ГДЕ НЕ ДокРасчетов.ДокументРасчетовСКонтрагентом.Магазин ЕСТЬ NULL";

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если Магазин = Выборка.Магазин Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектФормы = РеквизитФормыВЗначение("Объект");
	РасшифровкаПлатежа = ОбъектФормы.РасшифровкаПлатежа;
	
	РасшифровкаПлатежа.ЗагрузитьКолонку(Новый Массив(РасшифровкаПлатежа.Количество()), "ДокументРасчетовСКонтрагентом");
	Объект.РасшифровкаПлатежа.Загрузить(РасшифровкаПлатежа.Выгрузить());
	
КонецПроцедуры

&НаКлиенте	//	LNK 23.03.2017 09:48:47
Процедура БанковскийСчетПриИзменении(Элемент)


КонецПроцедуры

&НаКлиенте	//	LNK 23.03.2017 09:48:47
Процедура БанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если ОбщегоНазначенияВызовСервера.ФункциональнаяОпция("ИспользоватьУчетДенежныхСредствПоОбособленнымПодразделениям") Тогда

		ДанныеВыбора = ФинансыВызовСервера.СписокДоступныхРасчетныхСчетов(Объект.Организация, Объект.Касса, Истина);
		СтандартнаяОбработка = Ложь;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 27.06.2017 12:24:18
Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)

	Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл

		СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;

	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура СброситьУстановленныйНомерОрдера()
	
	Если Объект.НомерОрдера <> "" Тогда
		Объект.НомерОрдера = "";
	КонецЕсли;
	УстановитьДоступностьПоляВводаНомерОрдера();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСумкиПриИзменении(Элемент)
	Если Элемент.ТекстРедактирования <> "" тогда 
		Если Объект.Приложение = "" тогда 
			Объект.Приложение = "Копія супровідної відомості до сумки з готівкою №" + Элемент.ТекстРедактирования;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры






