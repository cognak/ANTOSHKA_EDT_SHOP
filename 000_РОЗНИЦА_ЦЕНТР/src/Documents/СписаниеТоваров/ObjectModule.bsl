
///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС


// Заполняет ТЧ Товары по регистру ТоварыКОформлениюИзлишковНедостач
//
Процедура ЗаполнитьТабличнуюЧастьТовары(Проект, СообщатьПриЗаполнении) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика КАК Характеристика,
	|	-СУММА(ТоварыКОформлению.КОформлениюАктовОстаток) КАК Количество
	|ПОМЕСТИТЬ ТаблицаЗапроса
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКОформлению.Номенклатура КАК Номенклатура,
	|		ТоварыКОформлению.Характеристика КАК Характеристика,
	|		ТоварыКОформлению.КОформлениюАктовОстаток КАК КОформлениюАктовОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыКОформлениюИзлишковНедостач.Остатки(
	|				,
	|				ДокументОснование = &ДокументОснование
	|					И Склад = &Склад
	|					И ВЫБОР
	|						КОГДА &Проект = НЕОПРЕДЕЛЕНО
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ Номенклатура.ВидНоменклатуры = &Проект
	|					КОНЕЦ) КАК ТоварыКОформлению
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКОформлению.Номенклатура,
	|		ТоварыКОформлению.Характеристика,
	|		ВЫБОР
	|			КОГДА ТоварыКОформлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ТоварыКОформлению.КОформлениюАктов
	|			ИНАЧЕ ТоварыКОформлению.КОформлениюАктов
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ТоварыКОформлениюИзлишковНедостач КАК ТоварыКОформлению
	|	ГДЕ
	|		ТоварыКОформлению.Регистратор = &СписаниеНедостачТоваров
	|		И ТоварыКОформлению.ДокументОснование = &ДокументОснование
	|		И ТоварыКОформлению.Активность = ИСТИНА
	|		И ВЫБОР
	|				КОГДА &Проект = НЕОПРЕДЕЛЕНО
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТоварыКОформлению.Номенклатура.ВидНоменклатуры = &Проект
	|			КОНЕЦ) КАК ТоварыКОформлению
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.КОформлениюАктовОстаток) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапроса.Номенклатура,
	|	ТаблицаЗапроса.Характеристика,
	|	ТаблицаЗапроса.Количество,
	|	ТаблицаЗапроса.Количество КАК КоличествоУпаковок
	|ИЗ
	|	ТаблицаЗапроса КАК ТаблицаЗапроса"
	);
	Запрос.УстановитьПараметр("СписаниеНедостачТоваров", Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Склад" , Склад);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда

		Товары.Загрузить(Результат.Выгрузить());

	ИначеЕсли СообщатьПриЗаполнении = Истина Тогда

		ТекстСообщения = НСтр("ru = 'Нет данных для заполнения по основанию ""%ДокументОснование%"" .'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", ДокументОснование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДокументОснование");

	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Если НЕ ПодарочныеСертификатыСервер.ОбработкаПроведенияКонтроль("Списание", ЭтотОбъект, Отказ) Тогда

		Возврат;	//	LNK 05.03.2020 10:39:13

	КонецЕсли;

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.СписаниеТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеСервер.ОтразитьДвиженияПоРегистру("ТоварыНаМагазинах", ДополнительныеСвойства, Движения, Отказ); 
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияСерийныхНомеров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКОформлениюИзлишковНедостач(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);

//	LNK 06.03.2020 11:00:47
	ПроведениеСервер.ОтразитьДвиженияПоРегистру("СостоянияСерийныхНомеров", ДополнительныеСвойства, Движения, Отказ); 

	Если НЕ Движения.СостоянияСерийныхНомеров.Количество() = 0 Тогда	//	очистка, например, и сама доедет.

		Движения.СостоянияСерийныхНомеров.ДополнительныеСвойства.Вставить("УведомитьОбИзменении", Истина);

	КонецЕсли;
	
	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
//	LNK 16.02.2017 14:33:05
	ЗаполнениеОбъектовСобытия.ОбщиеДействияПередЗаписью(ЭтотОбъект, Отказ);

	ДополнительныеСвойства.Вставить("ЭтоНовый"   , ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	ДополнительныеСвойства.Вставить("Проведен"   , ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Проведен"));
	ДополнительныеСвойства.Вставить("ИсключитьЗапретПоИнвентаризации", ДокументОснование);

	Если ОбменДанными.Загрузка Тогда

		Возврат;

	КонецЕсли;	

//	LNK 26.12.2016 11:46:41
	Если НЕ УправлениеДоступомРТ.ДоступныДокументыИнвентаризации(Отказ, Истина, ДокументОснование) Тогда

		Возврат;

	КонецЕсли;
	
	Справочники.СерийныеНомера.ОчиститьВДокументеНеиспользуемыеСерийныеНомера(Товары, СерийныеНомера);
	ОбщегоНазначенияРТСервер.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект,Документы.СписаниеТоваров.ПараметрыУказанияСерий(ЭтотОбъект));
	
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);

	ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
		ЭтотОбъект,
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Товары, Истина),
		"СуммаДокумента");

//	LNK 10.09.2016 10:19:52
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() И НЕ ЭтоНовый() Тогда

		Если ВнешниеИсточникиСобытия.ПередачаNavision(Ссылка) Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ «" + СокрЛП(Ссылка) + "» учтён в КСУ Navision! Изменения запрещены. Отказано.", Ссылка,,, Отказ);
			Возврат;

		КонецЕсли;

	КонецЕсли;

//	LNK 31.10.2017 15:19:38 - Резервирование
	ПроверитьДоступноеКоличествоТоваров(РежимЗаписи, Отказ);

КонецПроцедуры

//	LNK 10.09.2016 10:20:42
Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда

		Возврат;

	КонецЕсли;	

//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "РегистрацияПередачиВNavision", Ложь) Тогда

		ВнешниеИсточникиСобытия.УстановитьПереданоNavision(Ссылка, ОбщегоНазначенияРТСервер.ПолучитьМагазиныПоОбъекту(Ссылка)
			, ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "РесурсВидПередачиВNavision", Перечисления.ВидыПередачиNavision.ПереданВNavision),,,, Истина);

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	Перем Проект;
	
	СообщатьПриЗаполнении = Истина;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда

	//	LNK 06.12.2016 14:30:46
		ДанныеЗаполнения.Свойство("Проект", Проект);

	//	LNK 06.12.2016 14:30:46
		ДанныеЗаполнения.Свойство("Проект", Проект);

		Если ДанныеЗаполнения.Свойство("СообщатьПриЗаполнении") Тогда

			СообщатьПриЗаполнении = ДанныеЗаполнения.СообщатьПриЗаполнении;

		КонецЕсли;

		Если ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
			ДанныеЗаполнения = ДанныеЗаполнения.ДокументОснование;
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект,ДанныеЗаполнения);
		КонецЕсли;

	КонецЕсли;
	
	ДокументОснование = ЗапасыСервер.ПолучитьОснованиеОформленияИзлишковНедостачТоваров(ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриказНаПроведениеИнвентаризацииТоваров") 
	 ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОрдерНаОтражениеНедостачТоваров") 
	 ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОрдерНаОтражениеРезультатовПересчетовТоваров") Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		
		ЗаполнитьЗначенияСвойств(
			ЭтотОбъект, 
			ДанныеЗаполнения,
			"Склад, Магазин, Организация");
			
		
		Если ЗначениеЗаполнено(Магазин)
			И Магазин.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
			И Не ЗначениеЗаполнено(ДокументОснование) Тогда
			
			ТекстСообщения = НСтр("ru='В магазине ""%1%"" используется ордерная схема для отражения излишков и недостач, поэтому ""Списание товаров"" нужно вводить по основанию.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1%",Склад);
			
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
		ЗаполнитьТабличнуюЧастьТовары(Проект, СообщатьПриЗаполнении);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ИзменениеАссортимента") Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		ДокументОснование  = ДанныеЗаполнения;
		//
		Ответственный = Пользователи.ТекущийПользователь();
		Магазин = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Магазин);
		Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Магазин,,Склад, Ответственный);
		//
		ТаблицаОстаткиСЦенами=АссортиментСервер.ТаблицаОстатковСЦенамиПоВыводуИзАссортимента(ДанныеЗаполнения, Магазин, Склад);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаОстаткиСЦенами, Товары);
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	IDN = "";
	Серии.Очистить();
	ДокументОснование = Неопределено;

	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если Магазин.СкладУправляющейСистемы Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,Документы.СписаниеТоваров.ПараметрыУказанияСерий(ЭтотОбъект),Отказ);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеТЧПриНаличииОбменаСУправлениемТорговлей(
		ЭтотОбъект, 
		Отказ); 
	
	МаркетинговыеАкцииСервер.ПроверитьЗаполнениеТабличнойЧастиСерийныеНомера(
		ЭтотОбъект,
		"Товары",
		"СерийныеНомера",
		Отказ
	);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Инициализирует документ
//
Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Ответственный = Пользователи.ТекущийПользователь();
	Магазин       = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Магазин);
	Организация   = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация,Ответственный);
	Склад         = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Магазин,,Склад, Ответственный);
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ИзменениеАссортимента") Тогда
			АналитикаХозяйственнойОперации = ЗначениеНастроекПовтИсп.ПолучитьАналитикуХозяйственнойОперацииПоУмолчанию(АналитикаХозяйственнойОперации, Перечисления.ХозяйственныеОперации.СписаниеНаЗатраты);
		Иначе
			АналитикаХозяйственнойОперации = ЗначениеНастроекПовтИсп.ПолучитьАналитикуХозяйственнойОперацииПоУмолчанию(АналитикаХозяйственнойОперации, Перечисления.ХозяйственныеОперации.СписаниеПоИнвентаризации);
		//	LNK 14.08.2017 07:39:54
			АналитикаРасходов = Справочники.СтатьиРасходов.Инвентаризация;
		КонецЕсли;
	Иначе
		АналитикаХозяйственнойОперации = ЗначениеНастроекПовтИсп.ПолучитьАналитикуХозяйственнойОперацииПоУмолчанию(АналитикаХозяйственнойОперации, Перечисления.ХозяйственныеОперации.СписаниеНаЗатраты);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Склад")
			И НЕ ЗначениеЗаполнено(Склад) Тогда
			Если ЗначениеЗаполнено(Магазин) Тогда
				Если НЕ Справочники.Склады.ПроверитьПринадлежностьСкладаМагазину(Магазин, ДанныеЗаполнения.Склад) Тогда
					ДанныеЗаполнения.Склад = Справочники.Склады.ПустаяСсылка();
				КонецЕсли;
			Иначе
				Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Склад, "Магазин");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

//Процедура формирует массив имен регистров для контроля проведения
//
Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

//	При проведении выполняется контроль превышения остатков на складах
//	LNK 14.11.2016 11:11:43
	Если ОбщегоНазначенияРТ.НужноЗаполнитьСписокРегистровДляКонтроля(ДополнительныеСвойства.РежимЗаписи, Дата) Тогда
		
		Если НЕ(ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриказНаПроведениеИнвентаризацииТоваров")) Тогда

			Массив.Добавить(Движения.ТоварыНаСкладах);
			Массив.Добавить(Движения.ДвиженияСерийныхНомеров);

		КонецЕсли;
		
	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

#Область ПроверкаДоступногоОстаткаСУчетомРезерва

//	LNK 31.10.2017 15:16:25
Функция ПроверитьДоступноеКоличествоТоваров(РежимЗаписи, Отказ)

	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ ДополнительныеСвойства.Проведен = Истина Тогда
	
		Если РезервированиеТоваровСерверПовтИсп.ПроверятьРезервТовараПриОтгрузке(Магазин, Дата)
		И НЕ (ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриказНаПроведениеИнвентаризацииТоваров")) Тогда

			СтруктураПараметров = Новый Структура(
				"Граница, ПропуститьКонтрольРезультатовПроведения, Товары"
				, Новый Граница(МоментВремени(), ВидГраницы.Исключая)
				, ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ПропуститьКонтрольРезультатовПроведения", Ложь) = Истина
				, Товары.Выгрузить(, "Номенклатура, Характеристика, Количество"));

			СтруктураПараметров.Товары.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.Магазины"));
			СтруктураПараметров.Товары.Колонки.Добавить("Склад"  , Новый ОписаниеТипов("СправочникСсылка.Склады"));

			СтруктураПараметров.Товары.ЗаполнитьЗначения(Магазин, "Магазин");
			СтруктураПараметров.Товары.ЗаполнитьЗначения(Склад  , "Склад");
			
			РезервированиеТоваровСервер.ПроверитьДоступностьТоваровСУчетомРезерва(СтруктураПараметров, РежимЗаписи, Отказ);

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции // ПроверитьДоступноеКоличествоТоваров()

#КонецОбласти



