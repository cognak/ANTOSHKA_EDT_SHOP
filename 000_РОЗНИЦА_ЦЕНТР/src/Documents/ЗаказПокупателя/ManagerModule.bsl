#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует таблицы значений, содержащие данные документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт

	Перем Реквизиты;

	Запрос = ПолучитьЗапросПроведенияИЗаполнитьРеквизитыШапки(ДокументСсылка, Реквизиты, ДополнительныеСвойства);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.Отменено КАК Отменено,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.Резервировать КАК Резервировать,
	|	Товары.ПричинаОтмены КАК ПричинаОтмены,
	|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Товары.СуммаБонусныхБалловСписано КАК СуммаБонусныхБалловСписано,
	|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И &ФормироватьДвижения
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Согласован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК ЗапросДоступности
	|ПОМЕСТИТЬ Запросы
	|ИЗ
	|	Документ.ЗапросДоступностиТоваров КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &Ссылка
	|	И ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.МагазинОтправитель = &Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
	|	&Магазин КАК Магазин,
	|	&Ссылка КАК Заказ,
	|	ТаблицаДанных.Номенклатура КАК Номенклатура,
	|	ТаблицаДанных.Характеристика КАК Характеристика,
	|	ТаблицаДанных.Количество КАК Количество,
	|	ТаблицаДанных.ПричинаОтмены КАК ПричинаОтмены,
	|	ТаблицаДанных.Порядок КАК Порядок,
	|	1 КАК КлючДвижения
	|ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(Источник.НомерСтроки) КАК НомерСтроки,
	|		Источник.Номенклатура КАК Номенклатура,
	|		Источник.Характеристика КАК Характеристика,
	|		СУММА(Источник.Количество) КАК Количество,
	|		ЗНАЧЕНИЕ(Справочник.ПричиныОтменыЗаказовПокупателей.ПустаяСсылка) КАК ПричинаОтмены,
	|		1 КАК Порядок
	|	ИЗ
	|		Источник КАК Источник
	|	ГДЕ
	|		Источник.Резервировать = ИСТИНА
	|		И &ФормироватьРезервыТоваров = ИСТИНА
	|	СГРУППИРОВАТЬ ПО
	|		Источник.Номенклатура,
	|		Источник.Характеристика
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(Источник.НомерСтроки),
	|		Источник.Номенклатура,
	|		Источник.Характеристика,
	|		СУММА(-Источник.Количество),
	|		Источник.ПричинаОтмены,
	|		2
	|	ИЗ
	|		Источник КАК Источник
	|	ГДЕ
	|		Источник.Отменено
	|		И &ФормироватьРезервыТоваров = ИСТИНА
	|	СГРУППИРОВАТЬ ПО
	|		Источник.Номенклатура,
	|		Источник.Характеристика,
	|		Источник.ПричинаОтмены) КАК ТаблицаДанных
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	&Ссылка,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаРезервы.НомерСтроки,
	|	ТаблицаРезервы.Магазин,
	|	ТаблицаРезервы.Заказ,
	|	ТаблицаРезервы.Номенклатура,
	|	ТаблицаРезервы.Характеристика,
	|	-ТаблицаРезервы.Количество,
	|	ЗНАЧЕНИЕ(Справочник.ПричиныОтменыЗаказовПокупателей.ПустаяСсылка),
	|	0,
	|	0
	|ИЗ
	|	Запросы КАК Запросы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей КАК ТаблицаРезервы
	|		ПО (ТаблицаРезервы.Заказ ССЫЛКА Документ.ЗапросДоступностиТоваров)
	|		И Запросы.ЗапросДоступности = ТаблицаРезервы.Заказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючДвижения,
	|	НомерСтроки,
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	&Контрагент КАК ВладелецДисконтнойКарты,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаАвтоматическойСкидки + ТаблицаТовары.СуммаРучнойСкидки +
	|		ТаблицаТовары.СуммаБонусныхБалловСписано КАК СуммаСкидки
	|ИЗ
	|	Источник КАК ТаблицаТовары
	|ГДЕ
	|	&ФормироватьДвиженияПродажиПоДисконтнымКартам = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки" + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+ ТекстЗапросаТаблицаБонусныеБаллы()
	;
	Результат = Запрос.ВыполнитьПакет();

	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПокупателей"					, Результат[2].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнымКартам"			, Результат[3].Выгрузить());

	ТаблицыДляДвижений.Вставить("ТаблицаБонусныеБаллы"						, Результат[ 7].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаБонусныеБаллыВРезерве"				, Результат[ 8].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаБонусныеБаллыПоЗаказамПокупателей"	, Результат[ 9].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаСписанныеБонусныеБаллы"				, Результат[10].Выгрузить());	//	LNK 26.09.2021 18:22:39

КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Заказ покупателя
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаказПокупателя";
	КомандаПечати.Представление = НСтр("ru = 'Заказ покупателя'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказПокупателя") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказПокупателя",
				НСтр("ru = 'Заказ покупателя'"),
				ПечатьЗаказаПокупателя(МассивОбъектов, ОбъектыПечати));
	
	КонецЕсли;
	
КонецПроцедуры

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеМеханизмыПроведения

Функция ПолучитьЗапросПроведенияИЗаполнитьРеквизитыШапки(ДокументСсылка, Реквизиты = Неопределено, ДополнительныеСвойства = Неопределено)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Дата КАК Период,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Склад КАК Склад,
	|	ТаблицаДокумента.Магазин КАК Магазин,
	|	ТаблицаДокумента.Ссылка КАК Основание,
	|	ТаблицаДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ТаблицаДокумента.УчитыватьНДС КАК УчитыватьНДС,
	|	ТаблицаДокумента.Статус КАК Статус,
	|	ТаблицаДокумента.СтатусИМ КАК СтатусИМ,
	|	ВЫБОР
	|		КОГДА ТаблицаКлючей.ЗаказПокупателя ЕСТЬ NULL
	|			ТОГДА ТаблицаДокумента.Статус
	|		ИНАЧЕ ТаблицаКлючей.Статус
	|	КОНЕЦ КАК СтатусАтрибуты,
	|	ВЫБОР
	|		КОГДА ТаблицаКлючей.ЗаказПокупателя ЕСТЬ NULL
	|			ТОГДА ТаблицаДокумента.СтатусИМ
	|		ИНАЧЕ ТаблицаКлючей.СтатусИМ
	|	КОНЕЦ КАК СтатусИМАтрибуты,
	|	ТаблицаДокумента.ТипДоставки КАК ТипДоставки,
	|	ТаблицаДокумента.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ТаблицаДокумента.ДисконтнаяКарта.ВладелецКарты КАК ВладелецДисконтнойКарты,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ТаблицаДокумента.ДисконтнаяКарта.ВладелецКарты
	|		ИНАЧЕ ТаблицаДокумента.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|		ИЛИ ТаблицаДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Отменён)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ
	|		НЕ ТаблицаДокумента.Магазин.СкладУправляющейСистемы
	|	КОНЕЦ КАК ФормироватьДвижения,
	|	ВЫБОР
	|		КОГДА ТаблицаКлючей.ЗаказПокупателя ЕСТЬ NULL
	|			ТОГДА ТаблицаДокумента.Статус
	|		ИНАЧЕ ТаблицаКлючей.Статус
	|	КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
	|	И ВЫБОР
	|		КОГДА ТаблицаДокумента.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.Magento)
	|			ТОГДА ВЫБОР
	|				КОГДА ТаблицаКлючей.ЗаказПокупателя ЕСТЬ NULL
	|					ТОГДА ТаблицаДокумента.СтатусИМ
	|				ИНАЧЕ ТаблицаКлючей.СтатусИМ
	|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СтатусыИнтернетМагазина.delivered)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НужныДвиженияБонусов,
	|	ТаблицаКлючей.Период КАК ПериодАтрибуты
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлючевыеАтрибутыЗаказовПокупателей КАК ТаблицаКлючей
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаКлючей.ЗаказПокупателя
	|		И (ТаблицаКлючей.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
	|		И ТаблицаКлючей.СтатусИМ = ЗНАЧЕНИЕ(Перечисление.СтатусыИнтернетМагазина.delivered)
	|		ИЛИ ТаблицаКлючей.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Отменён)
	|		И ТаблицаКлючей.СтатусИМ = ЗНАЧЕНИЕ(Перечисление.СтатусыИнтернетМагазина.canceled))
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОтгрузка.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ТаблицаОтгрузка.КоличествоЧеков) КАК КоличествоЧеков,
	|	СУММА(ТаблицаОтгрузка.КоличествоОрдеров) КАК КоличествоОрдеров
	|ПОМЕСТИТЬ Отгрузка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЧеки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		КОЛИЧЕСТВО(ТаблицаЧеки.Ссылка) КАК КоличествоЧеков,
	|		0 КАК КоличествоОрдеров
	|	ИЗ
	|		Документ.ЧекККМ КАК ТаблицаЧеки
	|	ГДЕ
	|		ТаблицаЧеки.ЗаказПокупателя = &Ссылка
	|		И ТаблицаЧеки.Проведен
	|		И ТаблицаЧеки.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаЧеки.ЗаказПокупателя
	|
	|	ОБЪЕДИНИТЬ
	|
	|	ВЫБРАТЬ
	|		ТаблицаЧеки.ЗаказПокупателя,
	|		КОЛИЧЕСТВО(ТаблицаЧеки.Ссылка),
	|		0
	|	ИЗ
	|		Документ.ЧекККМ КАК ТаблицаЧеки
	|	ГДЕ
	|		ТаблицаЧеки.ЗаказПокупателя = &Ссылка
	|		И ТаблицаЧеки.Проведен
	|		И ТаблицаЧеки.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробитый)
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаЧеки.ЗаказПокупателя
	|
	|	ОБЪЕДИНИТЬ
	|
	|	ВЫБРАТЬ
	|		ТаблицаПеремещения.ЗаказПокупателя,
	|		0,
	|		КОЛИЧЕСТВО(ТаблицаРасход.Ссылка)
	|	ИЗ
	|		Документ.ПеремещениеТоваров КАК ТаблицаПеремещения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК ТаблицаРасход
	|			ПО ТаблицаПеремещения.Ссылка = ТаблицаРасход.ДокументОснование
	|	ГДЕ
	|		ТаблицаПеремещения.ЗаказПокупателя = &Ссылка
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПеремещения.ЗаказПокупателя
	|
	|	ОБЪЕДИНИТЬ
	|
	|	ВЫБРАТЬ
	|		ТаблицаПеремещения.ЗаказПокупателя,
	|		0,
	|		КОЛИЧЕСТВО(ТаблицаРасход.Ссылка)
	|	ИЗ
	|		Документ.ПеремещениеТоваров КАК ТаблицаПеремещения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК ТаблицаРасход
	|			ПО ТаблицаПеремещения.Ссылка = ТаблицаРасход.ДокументОснование
	|	ГДЕ
	|		ТаблицаПеремещения.ДокументОснование ССЫЛКА Документ.ЗаказПокупателя
	|		И ТаблицаПеремещения.ДокументОснование = &Ссылка
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПеремещения.ЗаказПокупателя) КАК ТаблицаОтгрузка
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОтгрузка.ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Источник.Период КАК Период,
	|	Источник.Ссылка КАК Ссылка,
	|	Источник.Организация КАК Организация,
	|	Источник.Склад КАК Склад,
	|	Источник.Магазин КАК Магазин,
	|	Источник.Основание КАК Основание,
	|	Источник.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	Источник.УчитыватьНДС КАК УчитыватьНДС,
	|	Источник.СтатусАтрибуты КАК Статус,
	|	Источник.СтатусИМАтрибуты КАК СтатусИМ,
	|	Источник.ТипДоставки КАК ТипДоставки,
	|	Источник.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	Источник.ВладелецДисконтнойКарты КАК ВладелецДисконтнойКарты,
	|	Источник.Контрагент КАК Контрагент,
	|	Источник.ФормироватьДвижения КАК ФормироватьДвижения,
	|	ВЫБОР
	|		КОГДА Источник.НужныДвиженияБонусов
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|	И Источник.ФормироватьДвижения КАК ФормироватьДвиженияБонусныхБалловНачисление,
	|	ВЫБОР
	|		КОГДА Источник.НужныДвиженияБонусов
	|			ТОГДА НЕ Источник.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|	И Источник.ФормироватьДвижения КАК ФормироватьДвиженияБонусныхБалловСписание,
	|	ВЫБОР
	|		КОГДА Источник.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ЕСТЬNULL(Отгрузка.КоличествоЧеков, 0) = 0
	|	КОНЕЦ
	|	И Источник.НужныДвиженияБонусов КАК ФормироватьДвиженияПродажиПоДисконтнымКартам,
	|	ЕСТЬNULL(Отгрузка.КоличествоЧеков, 0) КАК КоличествоЧеков,
	|	ЕСТЬNULL(Отгрузка.КоличествоОрдеров, 0) КАК КоличествоОрдеров,
	|	Источник.ПериодАтрибуты КАК ПериодАтрибуты
	|ИЗ
	|	Источник КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Отгрузка КАК Отгрузка
	|		ПО Источник.Ссылка = Отгрузка.ЗаказПокупателя
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодАтрибуты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Отгрузка"
	);      
//	"ВЫБРАТЬ
//	|	ТаблицаДокумента.Дата КАК Период,
//	|	ТаблицаДокумента.Ссылка КАК Ссылка,
//	|	ТаблицаДокумента.Организация КАК Организация,
//	|	ТаблицаДокумента.Склад КАК Склад,
//	|	ТаблицаДокумента.Магазин КАК Магазин,
//	|	ТаблицаДокумента.Ссылка КАК Основание,
//	|	ТаблицаДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
//	|	ТаблицаДокумента.УчитыватьНДС КАК УчитыватьНДС,
//	|	ТаблицаДокумента.Статус КАК Статус,
//	|	ТаблицаДокумента.СтатусИМ КАК СтатусИМ,
//	|	ВЫБОР
//	|		КОГДА ТаблицаКлючей.ЗаказПокупателя ЕСТЬ NULL
//	|			ТОГДА ТаблицаДокумента.Статус
//	|		ИНАЧЕ ТаблицаКлючей.Статус
//	|	КОНЕЦ КАК СтатусАтрибуты,
//	|	ВЫБОР
//	|		КОГДА ТаблицаКлючей.ЗаказПокупателя ЕСТЬ NULL
//	|			ТОГДА ТаблицаДокумента.СтатусИМ
//	|		ИНАЧЕ ТаблицаКлючей.СтатусИМ
//	|	КОНЕЦ КАК СтатусИМАтрибуты,
//	|	ТаблицаДокумента.ТипДоставки КАК ТипДоставки,
//	|	ТаблицаДокумента.ДисконтнаяКарта КАК ДисконтнаяКарта,
//	|	ТаблицаДокумента.ДисконтнаяКарта.ВладелецКарты КАК ВладелецДисконтнойКарты,
//	|	ВЫБОР
//	|		КОГДА ТаблицаДокумента.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
//	|			ТОГДА ТаблицаДокумента.ДисконтнаяКарта.ВладелецКарты
//	|		ИНАЧЕ ТаблицаДокумента.Контрагент
//	|	КОНЕЦ КАК Контрагент,
//	|	ВЫБОР
//	|		КОГДА ТаблицаДокумента.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
//	|				ИЛИ ТаблицаДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Отменён)
//	|			ТОГДА ЛОЖЬ
//	|		ИНАЧЕ НЕ ТаблицаДокумента.Магазин.СкладУправляющейСистемы
//	|	КОНЕЦ КАК ФормироватьДвижения,
//	|	ИСТИНА КАК НужныДвиженияБонусов,
//	|	ТаблицаКлючей.Период КАК ПериодАтрибуты
//	|ПОМЕСТИТЬ Источник
//	|ИЗ
//	|	Документ.ЗаказПокупателя КАК ТаблицаДокумента
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлючевыеАтрибутыЗаказовПокупателей КАК ТаблицаКлючей
//	|		ПО ТаблицаДокумента.Ссылка = ТаблицаКлючей.ЗаказПокупателя
//	|			И (ТаблицаКлючей.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
//	|					И ТаблицаКлючей.СтатусИМ = ЗНАЧЕНИЕ(Перечисление.СтатусыИнтернетМагазина.delivered)
//	|				ИЛИ ТаблицаКлючей.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Отменён)
//	|					И ТаблицаКлючей.СтатусИМ = ЗНАЧЕНИЕ(Перечисление.СтатусыИнтернетМагазина.canceled))
//	|ГДЕ
//	|	ТаблицаДокумента.Ссылка = &Ссылка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ТаблицаОтгрузка.ЗаказПокупателя КАК ЗаказПокупателя,
//	|	СУММА(ТаблицаОтгрузка.КоличествоЧеков) КАК КоличествоЧеков,
//	|	СУММА(ТаблицаОтгрузка.КоличествоОрдеров) КАК КоличествоОрдеров
//	|ПОМЕСТИТЬ Отгрузка
//	|ИЗ
//	|	(ВЫБРАТЬ
//	|		ТаблицаЧеки.ЗаказПокупателя КАК ЗаказПокупателя,
//	|		КОЛИЧЕСТВО(ТаблицаЧеки.Ссылка) КАК КоличествоЧеков,
//	|		0 КАК КоличествоОрдеров
//	|	ИЗ
//	|		Документ.ЧекККМ КАК ТаблицаЧеки
//	|	ГДЕ
//	|		ТаблицаЧеки.ЗаказПокупателя = &Ссылка
//	|		И ТаблицаЧеки.Проведен
//	|		И ТаблицаЧеки.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
//	|	
//	|	СГРУППИРОВАТЬ ПО
//	|		ТаблицаЧеки.ЗаказПокупателя
//	|	
//	|	ОБЪЕДИНИТЬ
//	|	
//	|	ВЫБРАТЬ
//	|		ТаблицаЧеки.ЗаказПокупателя,
//	|		КОЛИЧЕСТВО(ТаблицаЧеки.Ссылка),
//	|		0
//	|	ИЗ
//	|		Документ.ЧекККМ КАК ТаблицаЧеки
//	|	ГДЕ
//	|		ТаблицаЧеки.ЗаказПокупателя = &Ссылка
//	|		И ТаблицаЧеки.Проведен
//	|		И ТаблицаЧеки.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробитый)
//	|	
//	|	СГРУППИРОВАТЬ ПО
//	|		ТаблицаЧеки.ЗаказПокупателя
//	|	
//	|	ОБЪЕДИНИТЬ
//	|	
//	|	ВЫБРАТЬ
//	|		ТаблицаПеремещения.ЗаказПокупателя,
//	|		0,
//	|		КОЛИЧЕСТВО(ТаблицаРасход.Ссылка)
//	|	ИЗ
//	|		Документ.ПеремещениеТоваров КАК ТаблицаПеремещения
//	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК ТаблицаРасход
//	|			ПО ТаблицаПеремещения.Ссылка = ТаблицаРасход.ДокументОснование
//	|	ГДЕ
//	|		ТаблицаПеремещения.ЗаказПокупателя = &Ссылка
//	|	
//	|	СГРУППИРОВАТЬ ПО
//	|		ТаблицаПеремещения.ЗаказПокупателя
//	|	
//	|	ОБЪЕДИНИТЬ
//	|	
//	|	ВЫБРАТЬ
//	|		ТаблицаПеремещения.ЗаказПокупателя,
//	|		0,
//	|		КОЛИЧЕСТВО(ТаблицаРасход.Ссылка)
//	|	ИЗ
//	|		Документ.ПеремещениеТоваров КАК ТаблицаПеремещения
//	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК ТаблицаРасход
//	|			ПО ТаблицаПеремещения.Ссылка = ТаблицаРасход.ДокументОснование
//	|	ГДЕ
//	|		ТаблицаПеремещения.ДокументОснование ССЫЛКА Документ.ЗаказПокупателя
//	|		И ТаблицаПеремещения.ДокументОснование = &Ссылка
//	|	
//	|	СГРУППИРОВАТЬ ПО
//	|		ТаблицаПеремещения.ЗаказПокупателя) КАК ТаблицаОтгрузка
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ТаблицаОтгрузка.ЗаказПокупателя
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	Источник.Период КАК Период,
//	|	Источник.Ссылка КАК Ссылка,
//	|	Источник.Организация КАК Организация,
//	|	Источник.Склад КАК Склад,
//	|	Источник.Магазин КАК Магазин,
//	|	Источник.Основание КАК Основание,
//	|	Источник.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
//	|	Источник.УчитыватьНДС КАК УчитыватьНДС,
//	|	Источник.СтатусАтрибуты КАК Статус,
//	|	Источник.СтатусИМАтрибуты КАК СтатусИМ,
//	|	Источник.ТипДоставки КАК ТипДоставки,
//	|	Источник.ДисконтнаяКарта КАК ДисконтнаяКарта,
//	|	Источник.ВладелецДисконтнойКарты КАК ВладелецДисконтнойКарты,
//	|	Источник.Контрагент КАК Контрагент,
//	|	Источник.ФормироватьДвижения КАК ФормироватьДвижения,
//	|	ВЫБОР
//	|			КОГДА Источник.НужныДвиженияБонусов
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ
//	|		И Источник.ФормироватьДвижения КАК ФормироватьДвиженияБонусныхБалловНачисление,
//	|	ВЫБОР
//	|			КОГДА Источник.НужныДвиженияБонусов
//	|				ТОГДА НЕ Источник.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз)
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ
//	|		И Источник.ФормироватьДвижения КАК ФормироватьДвиженияБонусныхБалловСписание,
//	|	ВЫБОР
//	|			КОГДА Источник.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз)
//	|				ТОГДА ЛОЖЬ
//	|			ИНАЧЕ ЕСТЬNULL(Отгрузка.КоличествоЧеков, 0) = 0
//	|		КОНЕЦ
//	|		И Источник.НужныДвиженияБонусов КАК ФормироватьДвиженияПродажиПоДисконтнымКартам,
//	|	ЕСТЬNULL(Отгрузка.КоличествоЧеков, 0) КАК КоличествоЧеков,
//	|	ЕСТЬNULL(Отгрузка.КоличествоОрдеров, 0) КАК КоличествоОрдеров,
//	|	Источник.ПериодАтрибуты КАК ПериодАтрибуты
//	|ИЗ
//	|	Источник КАК Источник
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Отгрузка КАК Отгрузка
//	|		ПО Источник.Ссылка = Отгрузка.ЗаказПокупателя
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ПериодАтрибуты
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ Источник
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ Отгрузка"
//	);
	
//	LNK 09.06.2022 06:55:36
//	Сортировка по "ПериодАтрибуты" связана с тем, что используются значения "Статус" и "СтатусИМ"
//	из регистра "КлючевыеАтрибутыЗаказовПокупателей".
//	То есть, эти значения получаем по самому первому (раннему) событию.
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	РезультатЗапроса = Запрос.Выполнить();

	Реквизиты = РезультатЗапроса.Выбрать();
	Реквизиты.Следующий(); 

	ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВПараметрыЗапроса(РезультатЗапроса, Реквизиты, Запрос);

	УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику(Реквизиты.Период);

	Запрос.УстановитьПараметр("ФормироватьРезервыТоваров", Запрос.Параметры.ФормироватьДвижения
		И ?(УчетнаяПолитика.РазрешитьПрямуюИнтеграциюMagento
			, НЕ (Реквизиты.Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт ИЛИ Реквизиты.Статус = Перечисления.СтатусыЗаказовПокупателей.Отменён)
			, Истина
		)
	);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());

	РазрешениеПолитики = ?(УчетнаяПолитика.ДвиженияБонусныхБалловТолькоВЦентре = Истина, ОбменДаннымиПовтИсп.ЭтоГлавныйУзел(), Истина);

	Запрос.Параметры.ФормироватьДвиженияБонусныхБалловНачисление = РазрешениеПолитики И Запрос.Параметры.ФормироватьДвиженияБонусныхБалловНачисление;
	Запрос.Параметры.ФормироватьДвиженияБонусныхБалловСписание	 = РазрешениеПолитики И Запрос.Параметры.ФормироватьДвиженияБонусныхБалловСписание;

	Если ТипЗнч(ДополнительныеСвойства) = Тип("Структура")
	И	 ДополнительныеСвойства.Свойство("ДатаИзмененияСтатуса")
	И	 ТипЗнч(ДополнительныеСвойства.ДатаИзмененияСтатуса) = Тип("Дата")
	Тогда

		Запрос.УстановитьПараметр("ПериодБонусов", ДополнительныеСвойства.ДатаИзмененияСтатуса);

	Иначе

		Запрос.УстановитьПараметр("ПериодБонусов", Документы.ЗаказПокупателя.ПолучитьДатуИзмененияСтатусаИМ(ДокументСсылка));

	КонецЕсли;

	Возврат Запрос;

КонецФункции

Процедура ВыполнитьДвиженияРасширеннойАналитикиПродаж(ДокументСсылка, Период, РежимЗагрузки = Ложь)	Экспорт

	Перем Реквизиты;

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

//	здесь реквизиты шапки документа применяются как параметры запроса.
	Запрос = ПолучитьЗапросПроведенияИЗаполнитьРеквизитыШапки(ДокументСсылка, Реквизиты);

	Если Запрос.Параметры.ФормироватьДвиженияБонусныхБалловНачисление = Истина
			ИЛИ  Запрос.Параметры.ФормироватьДвиженияБонусныхБалловСписание = Истина
			ИЛИ  ДокументСсылка.УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.Розница Тогда

		Запрос.Текст = ТекстЗапросаТаблицаБонусныеБаллы();
		Результаты = Запрос.ВыполнитьПакет();

		КоллекцияДвижений = Новый Массив;
		КоллекцияДвижений.Добавить(Новый Структура("Индекс, НаборЗаписей, Номер", 3, РегистрыНакопления.БонусныеБаллы.СоздатьНаборЗаписей(), "НомерСтроки"));
		КоллекцияДвижений.Добавить(Новый Структура("Индекс, НаборЗаписей, Номер", 4, РегистрыНакопления.БонусныеБаллыВРезерве.СоздатьНаборЗаписей(), "НомерСтроки"));
		КоллекцияДвижений.Добавить(Новый Структура("Индекс, НаборЗаписей, Номер", 5, РегистрыНакопления.БонусныеБаллыПоЗаказамПокупателей.СоздатьНаборЗаписей(), "НомерСтроки"));
	//	---------------------------------------------------------------------------------------
		КоллекцияДвижений.Добавить(Новый Структура("Индекс, НаборЗаписей, Номер", 6, РегистрыСведений.СписанныеБонусныеБаллы.СоздатьНаборЗаписей(), "НомерСтрокиДокумента"));

		ВыполнитьДвиженияБонуснаяСистемаЛояльности(ДокументСсылка, Период, Результаты, КоллекцияДвижений, Истина, РежимЗагрузки);

	КонецЕсли;

	ПараметрыРегистрации = Новый Структура("ДатаНачисления", Запрос.Параметры.ПериодБонусов);
	РегистрыСведений.РегистрацияОбъектовMagento.Регистрация(ДокументСсылка, Перечисления.ТипыРегистрацииMagento.БонусныеНакопления, ПараметрыРегистрации);

КонецПроцедуры

//	LNK 24.11.2021 13:03:56
Процедура ВыполнитьДвиженияБонуснаяСистемаЛояльности(ДокументСсылка, Период, РезультатыЗапроса, КоллекцияДвижений, Записывать, РежимЗагрузки = Ложь)	Экспорт

	Перем Реквизиты;

	Для каждого ЭлементКоллекции Из КоллекцияДвижений Цикл

		НаборЗаписей = ЭлементКоллекции.НаборЗаписей;
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Загрузить(ПроведениеСервер.УстановитьНомерСтрокиВТаблице(РезультатыЗапроса[ЭлементКоллекции.Индекс].Выгрузить(), ЭлементКоллекции.Номер));

		Если Записывать Тогда

			НаборЗаписей.ОбменДанными.Загрузка = РежимЗагрузки;

			Если НаборЗаписей.ОбменДанными.Загрузка И ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда
			
				НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);

			КонецЕсли;

			НаборЗаписей.Записать();

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#Область ТаблицыДанныхДляПроведения

Функция ТекстЗапросаТаблицаБонусныеБаллы()

	ТекстЗапроса = Символы.ПС +
	"ВЫБРАТЬ
	|	&ПериодБонусов КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	&Контрагент КАК Контрагент,
	|	ТабличнаяЧасть.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТабличнаяЧасть.ДатаНачисления КАК ДатаНачисления,
	|	ТабличнаяЧасть.ДатаСписания КАК ДатаСписания,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ДокументПродажи,
	|	ТабличнаяЧасть.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов
	|ПОМЕСТИТЬ ТаблицаБонусыНачисление
	|ИЗ
	|	Документ.ЗаказПокупателя.НачислениеБонусныхБаллов КАК ТабличнаяЧасть
	|ГДЕ
	|	&ФормироватьДвиженияБонусныхБалловНачисление
	|	И ТабличнаяЧасть.Ссылка = &Ссылка
	|	И НЕ &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И НЕ ТабличнаяЧасть.СуммаБонусныхБаллов = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаНачисление.ДатаНачисления = НАЧАЛОПЕРИОДА(&ПериодБонусов, ДЕНЬ)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ПериодБонусов, ЧАС, 1)
	|		ИНАЧЕ ТаблицаНачисление.ДатаНачисления
	|	КОНЕЦ КАК Период,
	|	ТаблицаНачисление.Регистратор КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаНачисление.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНачисление.Контрагент КАК Контрагент,
	|	ТаблицаНачисление.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТаблицаНачисление.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Начисление) КАК ВидОперации,
	|	ТаблицаНачисление.ДатаНачисления КАК ДатаНачисления,
	|	ТаблицаНачисление.ДатаСписания КАК ДатаСписания,
	|	ЛОЖЬ КАК СписаниеПартий,
	|	ТаблицаНачисление.Период КАК ДатаОперации,
	|	ТаблицаНачисление.Регистратор КАК ДокументОперации,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ДокументПродажи,
	|	&ТекущаяДата КАК ДатаИзменения,
	|	1 КАК КлючПорядка
	|ПОМЕСТИТЬ ТаблицаБонусы
	|ИЗ
	|	ТаблицаБонусыНачисление КАК ТаблицаНачисление
	|ГДЕ
	|	&ФормироватьДвиженияБонусныхБалловНачисление
	|	И НЕ ТаблицаНачисление.СуммаБонусныхБаллов = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(ТаблицаНачисление.ДатаСписания, ДЕНЬ),
	|	ТаблицаНачисление.Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаНачисление.НомерСтроки,
	|	ТаблицаНачисление.Контрагент,
	|	ТаблицаНачисление.ПрограммаЛояльности,
	|	ТаблицаНачисление.СуммаБонусныхБаллов,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Аннуляция),
	|	ТаблицаНачисление.ДатаНачисления,
	|	ТаблицаНачисление.ДатаСписания,
	|	ИСТИНА,
	|	ТаблицаНачисление.Период,
	|	ТаблицаНачисление.Регистратор,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
	|	&ТекущаяДата,
	|	3
	|ИЗ
	|	ТаблицаБонусыНачисление КАК ТаблицаНачисление
	|ГДЕ
	|	&ФормироватьДвиженияБонусныхБалловНачисление
	|	И НЕ ТаблицаНачисление.СуммаБонусныхБаллов = 0
	|	И НЕ ТаблицаНачисление.ДатаСписания = ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ПериодБонусов,
	|	&Ссылка,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаОплата.НомерСтроки,
	|	&Контрагент,
	|	ТаблицаОплата.ПрограммаЛояльности,
	|	ТаблицаОплата.СуммаБонусныхБаллов,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Использование),
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ИСТИНА,
	|	&ПериодБонусов,
	|	&Ссылка,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
	|	&ТекущаяДата,
	|	2
	|ИЗ
	|	Документ.ЗаказПокупателя.ОплатаБонуснымиБаллами КАК ТаблицаОплата
	|ГДЕ
	|	&ФормироватьДвиженияБонусныхБалловСписание
	|	И ТаблицаОплата.Ссылка = &Ссылка
	|	И НЕ &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И НЕ ТаблицаОплата.СуммаБонусныхБаллов = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаБонусыНачисление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаБонусы.Период КАК Период,
	|	ТаблицаБонусы.Регистратор КАК Регистратор,
	|	ТаблицаБонусы.ВидДвижения КАК ВидДвижения,
	|	МИНИМУМ(ТаблицаБонусы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаБонусы.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТаблицаБонусы.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаБонусы.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Начисление), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Аннуляция))
	|			ТОГДА ТаблицаБонусы.ДокументОперации
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументНачисления,
	|	ТаблицаБонусы.ВидОперации КАК ВидОперации,
	|	СУММА(ТаблицаБонусы.СуммаБонусныхБаллов) КАК СуммаБонусныхБаллов,
	|	ТаблицаБонусы.ДатаОперации КАК ДатаОперации,
	|	ТаблицаБонусы.ДокументОперации КАК ДокументОперации,
	|	ТаблицаБонусы.ДатаИзменения КАК ДатаИзменения,
	|	ТаблицаБонусы.КлючПорядка КАК КлючПорядка
	|ИЗ
	|	ТаблицаБонусы КАК ТаблицаБонусы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаБонусы.Период,
	|	ТаблицаБонусы.Регистратор,
	|	ТаблицаБонусы.ВидДвижения,
	|	ТаблицаБонусы.ПрограммаЛояльности,
	|	ТаблицаБонусы.Контрагент,
	|	ТаблицаБонусы.ВидОперации,
	|	ТаблицаБонусы.ДатаОперации,
	|	ТаблицаБонусы.ДокументОперации,
	|	ТаблицаБонусы.ДатаИзменения,
	|	ТаблицаБонусы.КлючПорядка,
	|	ВЫБОР
	|		КОГДА ТаблицаБонусы.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Начисление), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Аннуляция))
	|			ТОГДА ТаблицаБонусы.ДокументОперации
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка,
	|	ПрограммаЛояльности,
	|	Период,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаБонусы.ДатаОперации КАК Период,
	|	ТаблицаБонусы.Регистратор КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	МИНИМУМ(ТаблицаБонусы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаБонусы.Контрагент КАК Контрагент,
	|	ТаблицаБонусы.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТаблицаБонусы.ДокументОперации КАК ДокументНачисления,
	|	СУММА(ТаблицаБонусы.СуммаБонусныхБаллов) КАК СуммаБонусныхБаллов,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Резерв) КАК ВидОперации,
	|	ТаблицаБонусы.ДатаОперации КАК ДатаОперации,
	|	ТаблицаБонусы.ДокументОперации КАК ДокументОперации,
	|	ТаблицаБонусы.ДатаИзменения КАК ДатаИзменения,
	|	1 КАК КлючПорядка
	|ИЗ
	|	ТаблицаБонусы КАК ТаблицаБонусы
	|ГДЕ
	|	ТаблицаБонусы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Начисление)
	|	И НЕ ТаблицаБонусы.СуммаБонусныхБаллов = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаБонусы.ДатаОперации,
	|	ТаблицаБонусы.Регистратор,
	|	ТаблицаБонусы.Контрагент,
	|	ТаблицаБонусы.ПрограммаЛояльности,
	|	ТаблицаБонусы.ДатаИзменения,
	|	ТаблицаБонусы.ДокументОперации,
	|	ТаблицаБонусы.ДатаОперации,
	|	ТаблицаБонусы.ДокументОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаБонусы.Период,
	|	ТаблицаБонусы.Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	МИНИМУМ(ТаблицаБонусы.НомерСтроки),
	|	ТаблицаБонусы.Контрагент,
	|	ТаблицаБонусы.ПрограммаЛояльности,
	|	ТаблицаБонусы.ДокументОперации,
	|	СУММА(-ТаблицаБонусы.СуммаБонусныхБаллов),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Начисление),
	|	ТаблицаБонусы.ДатаОперации,
	|	ТаблицаБонусы.ДокументОперации,
	|	ТаблицаБонусы.ДатаИзменения,
	|	2
	|ИЗ
	|	ТаблицаБонусы КАК ТаблицаБонусы
	|ГДЕ
	|	ТаблицаБонусы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийБонусныхБаллов.Начисление)
	|	И НЕ ТаблицаБонусы.СуммаБонусныхБаллов = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаБонусы.Период,
	|	ТаблицаБонусы.Регистратор,
	|	ТаблицаБонусы.Контрагент,
	|	ТаблицаБонусы.ПрограммаЛояльности,
	|	ТаблицаБонусы.ДатаИзменения,
	|	ТаблицаБонусы.ДокументОперации,
	|	ТаблицаБонусы.ДатаОперации,
	|	ТаблицаБонусы.ДокументОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	&Контрагент КАК Контрагент,
	|	&Ссылка КАК ЗаказПокупателя,
	|	&ТекущаяДата КАК ДатаИзменения,
	|	ОплатаБонуснымиБаллами.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ОплатаБонуснымиБаллами.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов
	|ИЗ
	|	Документ.ЗаказПокупателя.ОплатаБонуснымиБаллами КАК ОплатаБонуснымиБаллами
	|ГДЕ
	|	ОплатаБонуснымиБаллами.Ссылка = &Ссылка
	|	И &ФормироватьДвижения
	|	И НЕ &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Отменён))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаБонусы.Период КАК Период,
	|	ТаблицаБонусы.Регистратор КАК Регистратор,
	|	МИНИМУМ(ТаблицаБонусы.НомерСтроки) КАК НомерСтроки,
	|	0 КАК НомерСтрокиДокумента,
	|	ТаблицаБонусы.ВидОперации КАК ВидОперации,
	|	ТаблицаБонусы.Период КАК ПериодДвижения,
	|	ТаблицаБонусы.ДатаОперации КАК ДатаОперации,
	|	ТаблицаБонусы.ДатаНачисления КАК ДатаНачисления,
	|	ТаблицаБонусы.ДатаСписания КАК ДатаСписания,
	|	ТаблицаБонусы.ДокументОперации КАК ДокументОперации,
	|	ТаблицаБонусы.ДокументПродажи КАК ДокументПродажи,
	|	ТаблицаБонусы.Контрагент КАК Контрагент,
	|	ТаблицаБонусы.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	ТаблицаБонусы.СписаниеПартий КАК СписаниеПартий,
	|	СУММА(ТаблицаБонусы.СуммаБонусныхБаллов) КАК СуммаБонусныхБаллов,
	|	ТаблицаБонусы.ДатаИзменения КАК ДатаИзменения,
	|	ТаблицаБонусы.КлючПорядка КАК КлючПорядка
	|ИЗ
	|	ТаблицаБонусы КАК ТаблицаБонусы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаБонусы.Период,
	|	ТаблицаБонусы.Регистратор,
	|	ТаблицаБонусы.ВидОперации,
	|	ТаблицаБонусы.ДатаОперации,
	|	ТаблицаБонусы.ДатаНачисления,
	|	ТаблицаБонусы.ДатаСписания,
	|	ТаблицаБонусы.ДокументОперации,
	|	ТаблицаБонусы.ДокументПродажи,
	|	ТаблицаБонусы.Контрагент,
	|	ТаблицаБонусы.ПрограммаЛояльности,
	|	ТаблицаБонусы.СписаниеПартий,
	|	ТаблицаБонусы.ДатаИзменения,
	|	ТаблицаБонусы.КлючПорядка,
	|	ТаблицаБонусы.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	КлючПорядка,
	|	ПрограммаЛояльности,
	|	Период,
	|	НомерСтроки" + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#КонецОбласти

//	LNK 29.11.2021 17:34:52
Функция ПолучитьДатуИзмененияСтатусаИМ(ТекущаяСсылка)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА ТаблицаРегистра.ДатаИзмененияСтатуса = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ТаблицаРегистра.Период
	|		ИНАЧЕ ТаблицаРегистра.ДатаИзмененияСтатуса
	|	КОНЕЦ КАК ДатаИзмененияСтатуса
	|ИЗ
	|	РегистрСведений.КлючевыеАтрибутыЗаказовПокупателей КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.ЗаказПокупателя = &ТекущаяСсылка
	|	И ТаблицаРегистра.СтатусИМ = ЗНАЧЕНИЕ(Перечисление.СтатусыИнтернетМагазина.delivered)
	|	И НЕ ТаблицаРегистра.ВнутреннееИзменение
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаРегистра.Период
	|ИЗ
	|	РегистрСведений.КлючевыеАтрибутыЗаказовПокупателей КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.ЗаказПокупателя = &ТекущаяСсылка
	|	И ТаблицаРегистра.СтатусИМ = ЗНАЧЕНИЕ(Перечисление.СтатусыИнтернетМагазина.delivered)
	|	И ТаблицаРегистра.ВнутреннееИзменение
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаИзмененияСтатуса"
	);
	Запрос.УстановитьПараметр("ТекущаяСсылка", ТекущаяСсылка);

	//ДатаИзмененияСтатуса = '00010101';
	ДатаИзмененияСтатуса = ТекущаяДатаСеанса();

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();

		ДатаИзмененияСтатуса = Выборка.ДатаИзмененияСтатуса;

	КонецЕсли;

	Возврат ДатаИзмененияСтатуса;

КонецФункции

#Область ПроцедураЗакрытияЗаказаПокупателя

//	LNK 23.11.2021 05:48:03
Процедура ЗакрытьЗаказПокупателя(ЗаказПокупателя, УстановитьДоставлен = Истина, ПередатьВЦентр = Ложь, ТоварыПродажи = Неопределено, Отладка = Ложь)	Экспорт

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	Попытка

		ДокументОбъект = ЗаказПокупателя.ПолучитьОбъект();
		
		Если ДокументОбъект.УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.Magento Тогда

			Если НЕ (ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт И ДокументОбъект.СтатусИМ = Перечисления.СтатусыИнтернетМагазина.delivered)
				ИЛИ	 Отладка = Истина	//	для отладки и изменений во внешней отладочной обработке
			Тогда
	
				//ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт;
	
				Если УстановитьДоставлен = Истина Тогда
	
					ДокументОбъект.СтатусИМ	= Перечисления.СтатусыИнтернетМагазина.delivered;
	
				КонецЕсли;
	
				Если НЕ ДокументОбъект.КоррекцияНачисленийПоПродаже Тогда
	
					ПривестиНачислениеБонусныхБалловКТоварамПродажи(ДокументОбъект, ТоварыПродажи);
	
				КонецЕсли;
	
				ДокументОбъект.ДополнительныеСвойства.Вставить("СлужебнаяЗапись", Истина);
				ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
				ДокументОбъект.ДополнительныеСвойства.Вставить("ПередатьВЦентр", ПередатьВЦентр);
	
				Если НЕ Отладка = Истина Тогда
	
					Если ДокументОбъект.Проведен Тогда
	
							ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	
					Иначе	ДокументОбъект.Записать();
					
					КонецЕсли;
	
				КонецЕсли;
	
			КонецЕсли;
	
		КонецЕсли;

	Исключение

		ТекстОшибки = ОписаниеОшибки();

	КонецПопытки;

КонецПроцедуры

//	LNK 22.12.2021 05:28:42
Процедура ПривестиНачислениеБонусныхБалловКТоварамПродажи(ДокументОбъект, ТоварыПродажи)

//	#Если _ Тогда
//	ДокументОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
//	ТоварыПродажи  = Новый ТаблицаЗначений;
//	#КонецЕсли

	Если ТипЗнч(ТоварыПродажи) = Тип("ТаблицаЗначений") Тогда

		ТоварыПродажи.Свернуть("Номенклатура", "Количество");

		Для каждого СтрокаТовары Из ДокументОбъект.Товары Цикл

			Если СтрокаТовары.СуммаБонусныхБалловНачислено = 0 Тогда

				Продолжить;	//	отрабатываем только начисления

			КонецЕсли;

			СтрокаПродажи = ТоварыПродажи.Найти(СтрокаТовары.Номенклатура, "Номенклатура");

			Если СтрокаПродажи = Неопределено ИЛИ СтрокаПродажи.Количество < СтрокаТовары.Количество Тогда

				Если СтрокаПродажи = Неопределено ИЛИ СтрокаТовары.Количество = 0 Тогда

						Коэффициент = 0;

				Иначе	Коэффициент = СтрокаПродажи.Количество / СтрокаТовары.Количество;

				КонецЕсли;

				СтрокиСкидкиНаценки = ДокументОбъект.СкидкиНаценки.НайтиСтроки(
					Новый Структура(
						"КлючСвязи, СпособПримененияСкидки"
						, СтрокаТовары.КлючСвязи
						, Перечисления.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы
					)
				);

				СуммаБонусныхБалловНачислено = 0;
				СтрокиСкидокУдалить = Новый Массив;

				Для каждого СтрокаСкидкиНаценки Из СтрокиСкидкиНаценки Цикл

					СтрокаСкидкиНаценки.Сумма = СтрокаСкидкиНаценки.Сумма * Коэффициент;
					СуммаБонусныхБалловНачислено = СуммаБонусныхБалловНачислено + СтрокаСкидкиНаценки.Сумма;

					Если СтрокаСкидкиНаценки.Сумма = 0 Тогда

						СтрокиСкидокУдалить.Добавить(СтрокаСкидкиНаценки);

					КонецЕсли;

				КонецЦикла;

				Для каждого СтрокаСкидкиНаценки Из СтрокиСкидокУдалить Цикл

					ДокументОбъект.СкидкиНаценки.Удалить(СтрокаСкидкиНаценки);

				КонецЦикла;

				ДокументОбъект.КоррекцияНачисленийПоПродаже	= Истина;
				СтрокаТовары.СуммаБонусныхБалловНачислено	= СуммаБонусныхБалловНачислено;

			КонецЕсли;

		КонецЦикла;

		Если ДокументОбъект.КоррекцияНачисленийПоПродаже Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ТаблицаСкидкиНаценки.СкидкаНаценка КАК Справочник.СкидкиНаценки) КАК СкидкаНаценка,
			|	ТаблицаСкидкиНаценки.СпособПримененияСкидки КАК СпособПримененияСкидки,
			|	ТаблицаСкидкиНаценки.Сумма КАК Сумма
			|ПОМЕСТИТЬ СкидкиНаценки
			|ИЗ
			|	&СкидкиНаценки КАК ТаблицаСкидкиНаценки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности КАК ПрограммаЛояльности,
			|	СУММА(СкидкиНаценки.Сумма) КАК СуммаБонусныхБаллов
			|ИЗ
			|	СкидкиНаценки КАК СкидкиНаценки
			|ГДЕ
			|	СкидкиНаценки.СпособПримененияСкидки = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы)
			|
			|СГРУППИРОВАТЬ ПО
			|	СкидкиНаценки.СкидкаНаценка.ПрограммаЛояльности
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ СкидкиНаценки"
			);
			Запрос.УстановитьПараметр("СкидкиНаценки", ДокументОбъект.СкидкиНаценки.Выгрузить());
			
			ИтогиВыборка = Запрос.Выполнить().Выбрать();
			
			Пока ИтогиВыборка.Следующий() Цикл

				СтрокаНачисление = ДокументОбъект.НачислениеБонусныхБаллов.Найти(ИтогиВыборка.ПрограммаЛояльности, "ПрограммаЛояльности");

				Если НЕ СтрокаНачисление = Неопределено Тогда

					СтрокаНачисление.СуммаБонусныхБаллов = ИтогиВыборка.СуммаБонусныхБаллов;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ФункционалВыбораЗаказаПокупателяВРМК

//	LNK 20.11.2021 18:32:11
Функция РеквизитыДанныхВыбора(Ссылка)	Экспорт

	РеквизитыВыбора = Новый Структура(
		"Ссылка, Номер, Дата, СкидкиРассчитаны, Статус, СтатусИМ, СтатусОплаты, ТипДоставки, ТипОплаты, Отгружен, ОтгруженПредставление, КоличествоЧеков, КоличествоПеремещений"
		, Документы.ЗаказПокупателя.ПустаяСсылка()
		, ""
		, '00010101'
		, Ложь
		, Перечисления.СтатусыЗаказовПокупателей.ПустаяСсылка()
		, Перечисления.СтатусыИнтернетМагазина.ПустаяСсылка()
		, Перечисления.СтатусОплаты.ПустаяСсылка()
		, Перечисления.ТипДоставкиЗаказПокупателя.ПустаяСсылка()
		, Перечисления.ТипОплатыЗаказПокупателя.ПустаяСсылка()		
		, Ложь
		, ""
		, 0
		, 0
	);

	Если ЗначениеЗаполнено(Ссылка) Тогда

		Если НЕ ПривилегированныйРежим() Тогда

			УстановитьПривилегированныйРежим(Истина);

		КонецЕсли;

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаЗаказы.Ссылка КАК Ссылка,
		|	ТаблицаЗаказы.Номер КАК Номер,
		|	ТаблицаЗаказы.Дата КАК Дата,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаказы.СтатусИМ = ЗНАЧЕНИЕ(Перечисление.СтатусыИнтернетМагазина.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК СкидкиРассчитаны,
		|	ТаблицаЗаказы.Статус КАК Статус,
		|	ТаблицаЗаказы.СтатусИМ КАК СтатусИМ,
		|	ТаблицаЗаказы.СтатусОплаты КАК СтатусОплаты,
		|	ТаблицаЗаказы.ТипДоставки КАК ТипДоставки,
		|	ТаблицаЗаказы.ТипОплаты КАК ТипОплаты
		|ПОМЕСТИТЬ Фильтр
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ТаблицаЗаказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ТаблицаЧеки
		|		ПО ТаблицаЗаказы.Ссылка = ТаблицаЧеки.ЗаказПокупателя
		|			И (ТаблицаЧеки.Проведен = ИСТИНА)
		|			И (ТаблицаЧеки.СтатусЧекаККМ В (ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный), ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробитый)))
		|ГДЕ
		|	ТаблицаЗаказы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОбщая.Ссылка КАК Ссылка,
		|	ТаблицаОбщая.Номер КАК Номер,
		|	ТаблицаОбщая.Дата КАК Дата,
		|	ТаблицаОбщая.СкидкиРассчитаны КАК СкидкиРассчитаны,
		|	ТаблицаОбщая.Статус КАК Статус,
		|	ТаблицаОбщая.СтатусИМ КАК СтатусИМ,
		|	ТаблицаОбщая.СтатусОплаты КАК СтатусОплаты,
		|	ТаблицаОбщая.ТипДоставки КАК ТипДоставки,
		|	ТаблицаОбщая.ТипОплаты КАК ТипОплаты,
		|	СУММА(ТаблицаОбщая.КоличествоЧеков) КАК КоличествоЧеков,
		|	СУММА(ТаблицаОбщая.КоличествоПеремещений) КАК КоличествоПеремещений
		|ИЗ
		|	(ВЫБРАТЬ
		|		Ведущая.Ссылка КАК Ссылка,
		|		Ведущая.Номер КАК Номер,
		|		Ведущая.Дата КАК Дата,
		|		Ведущая.СкидкиРассчитаны КАК СкидкиРассчитаны,
		|		Ведущая.Статус КАК Статус,
		|		Ведущая.СтатусИМ КАК СтатусИМ,
		|		Ведущая.СтатусОплаты КАК СтатусОплаты,
		|		Ведущая.ТипДоставки КАК ТипДоставки,
		|		Ведущая.ТипОплаты КАК ТипОплаты,
		|		ЕСТЬNULL(КОЛИЧЕСТВО(ТаблицаПодчиненные.Ссылка), 0) КАК КоличествоЧеков,
		|		0 КАК КоличествоПеремещений
		|	ИЗ
		|		Фильтр КАК Ведущая
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ТаблицаПодчиненные
		|			ПО Ведущая.Ссылка = ТаблицаПодчиненные.ЗаказПокупателя
		|				И (ТаблицаПодчиненные.Проведен = ИСТИНА)
		|				И (ТаблицаПодчиненные.СтатусЧекаККМ В (ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный), ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробитый)))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Ведущая.Ссылка,
		|		Ведущая.Статус,
		|		Ведущая.СтатусОплаты,
		|		Ведущая.СкидкиРассчитаны,
		|		Ведущая.СтатусИМ,
		|		Ведущая.Номер,
		|		Ведущая.Дата,
		|		Ведущая.ТипДоставки,
		|		Ведущая.ТипОплаты
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		Ведущая.Ссылка,
		|		Ведущая.Номер,
		|		Ведущая.Дата,
		|		Ведущая.СкидкиРассчитаны,
		|		Ведущая.Статус,
		|		Ведущая.СтатусИМ,
		|		Ведущая.СтатусОплаты,
		|		Ведущая.ТипДоставки,
		|		Ведущая.ТипОплаты,
		|		0,
		|		ЕСТЬNULL(КОЛИЧЕСТВО(ТаблицаПодчиненные.Ссылка), 0)
		|	ИЗ
		|		Фильтр КАК Ведущая
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ТаблицаПодчиненные
		|			ПО Ведущая.Ссылка = ТаблицаПодчиненные.ЗаказПокупателя
		|				И (ТаблицаПодчиненные.Проведен = ИСТИНА)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Ведущая.Ссылка,
		|		Ведущая.Статус,
		|		Ведущая.СтатусОплаты,
		|		Ведущая.СкидкиРассчитаны,
		|		Ведущая.СтатусИМ,
		|		Ведущая.Номер,
		|		Ведущая.Дата,
		|		Ведущая.ТипДоставки,
		|		Ведущая.ТипОплаты
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		Ведущая.Ссылка,
		|		Ведущая.Номер,
		|		Ведущая.Дата,
		|		Ведущая.СкидкиРассчитаны,
		|		Ведущая.Статус,
		|		Ведущая.СтатусИМ,
		|		Ведущая.СтатусОплаты,
		|		Ведущая.ТипДоставки,
		|		Ведущая.ТипОплаты,
		|		0,
		|		ЕСТЬNULL(КОЛИЧЕСТВО(ТаблицаПодчиненные.Ссылка), 0)
		|	ИЗ
		|		Фильтр КАК Ведущая
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ТаблицаПодчиненные
		|			ПО Ведущая.Ссылка = ТаблицаПодчиненные.ДокументОснование
		|				И (ТаблицаПодчиненные.ДокументОснование ССЫЛКА Документ.ЗаказПокупателя)
		|				И (ТаблицаПодчиненные.Проведен = ИСТИНА)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Ведущая.Ссылка,
		|		Ведущая.Статус,
		|		Ведущая.СтатусОплаты,
		|		Ведущая.СкидкиРассчитаны,
		|		Ведущая.СтатусИМ,
		|		Ведущая.Номер,
		|		Ведущая.Дата,
		|		Ведущая.ТипДоставки,
		|		Ведущая.ТипОплаты) КАК ТаблицаОбщая
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОбщая.Ссылка,
		|	ТаблицаОбщая.СкидкиРассчитаны,
		|	ТаблицаОбщая.Статус,
		|	ТаблицаОбщая.СтатусИМ,
		|	ТаблицаОбщая.СтатусОплаты,
		|	ТаблицаОбщая.Номер,
		|	ТаблицаОбщая.Дата,
		|	ТаблицаОбщая.ТипДоставки,
		|	ТаблицаОбщая.ТипОплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРеализация.Период КАК Период,
		|	ТаблицаРеализация.Представление КАК Представление,
		|	ТаблицаРеализация.ВидОперации КАК ВидОперации
		|ИЗ
		|	РегистрСведений.РеализацияЗаказовПокупателей КАК ТаблицаРеализация
		|ГДЕ
		|	ТаблицаРеализация.ЗаказПокупателя = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Фильтр"
		);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);

		РезультатыЗапроса = Запрос.ВыполнитьПакет();

		Если НЕ РезультатыЗапроса[1].Пустой() Тогда

			Выборка = РезультатыЗапроса[1].Выбрать();
			Выборка.Следующий();

			ЗаполнитьЗначенияСвойств(РеквизитыВыбора, Выборка);

		КонецЕсли;

		Если НЕ РезультатыЗапроса[2].Пустой() Тогда

			Выборка = РезультатыЗапроса[2].Выбрать();

			Пока Выборка.Следующий() Цикл

				Если Выборка.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда

					РеквизитыВыбора.Отгружен = Истина;
					РеквизитыВыбора.ОтгруженПредставление = Выборка.Представление;

					Прервать;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Возврат РеквизитыВыбора;

КонецФункции
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция формирует табличный документ с печатной формой.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьЗаказаПокупателя(МассивОбъектов, ОбъектыПечати)

	КолонкаКодов       = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	ВыводитьКоды       = ЗначениеЗаполнено(КолонкаКодов);
	ВыводитьУпаковки   = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Заказ покупателя'");
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_Накладная";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Магазин КАК Магазин,
	|	ВЫБОР
	|		КОГДА Документ.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрганизацияЮридическоеЛицо,
	|	Документ.Организация КАК Поставщик,
	|	Документ.СуммаДокумента КАК СуммаДокумента,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Магазин) КАК МагазинПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ПредставлениеПоставщика,
	|	Документ.Ответственный.ФизЛицо КАК Ответственный,
	|	Документ.УчитыватьНДС,
	|	Документ.ЦенаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПокупателя КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|	И Документ.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	" + ?(ВыводитьКоды, "ТаблицаТовары.Номенклатура." + КолонкаКодов +" КАК КолонкаКодов,", "") + "
	|	ТаблицаТовары.Номенклатура.Представление КАК Товар,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Упаковка.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВЫБОР КОГДА ТаблицаТовары.Количество = 0 ТОГДА ТаблицаТовары.Количество
	|	ИНАЧЕ ТаблицаТовары.Сумма / ТаблицаТовары.Количество
	|	КОНЕЦ КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Сумма +
	|	ТаблицаТовары.СуммаРучнойСкидки +
	|	ТаблицаТовары.СуммаАвтоматическойСкидки   КАК СуммаБезСкидки,
	|	ТаблицаТовары.СуммаРучнойСкидки +
	|	ТаблицаТовары.СуммаАвтоматическойСкидки   КАК Скидка,
	|	ТаблицаТовары.СуммаНДС,
	|	ТаблицаТовары.СтавкаНДС
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка");
	
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПокупателя.ПФ_MXL_ЗаказПокупателя");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьШапкаНомера         = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьШапкаКодов          = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьШапкаДанных         = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьШапкаСкидок         = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьШапкаСуммы          = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                  + Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	ОбластьСтрокаНомера         = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьСтрокаКодов          = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьСтрокаДанных         = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСтрокаСкидок         = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСтрокаСуммы          = Макет.ПолучитьОбласть("Строка|Сумма");
	
	ОбластьИтогоНДСНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
	ОбластьИтогоНДСКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
	ОбластьИтогоНДСДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
	ОбластьИтогоНДССкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
	ОбластьИтогоНДССуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
	
	// Вывести Итого.
	ОбластьИтогоНомера         = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьИтогоКодов          = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьИтогоДанных         = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьИтогоСкидок         = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьИтогоСуммы          = Макет.ПолучитьОбласть("Итого|Сумма");
	
	ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьПодписей      = Макет.ПолучитьОбласть("Подписи");
	
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнымЧастям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаПоДокументам);
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		
		ПредставлениеПоставщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Поставщик, ВыборкаПоДокументам.Дата), "ПолноеНаименование,");
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// Шапка
		
		ТабличныйДокумент.Вывести(ОбластьШапкаНомера);
		Если ВыводитьКоды Тогда
			ОбластьШапкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ТабличныйДокумент.Присоединить(ОбластьШапкаКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьШапкаДанных);
		ТабличныйДокумент.Присоединить(ОбластьШапкаСкидок);
		ТабличныйДокумент.Присоединить(ОбластьШапкаСуммы);
		
		
		ВсегоНаименований = 0;
		Сумма             = 0;
		ВсегоСкидок       = 0;
		ВсегоБезСкидок    = 0;
		СуммаНДС          = 0;
		
		// СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;

			ОбластьСтрокаНомера.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Вывести(ОбластьСтрокаНомера);

			Если ВыводитьКоды Тогда
				
				ОбластьСтрокаКодов.Параметры.Артикул = ВыборкаПоСтрокамТЧ["КолонкаКодов"];
				ТабличныйДокумент.Присоединить(ОбластьСтрокаКодов);
				
			КонецЕсли;

			ОбластьСтрокаДанных.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			//ОбластьСтрокаДанных.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаДанных);
			
			ОбластьСтрокаСкидок.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаСкидок);

			ОбластьСтрокаСуммы.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаСуммы);
			
			ВсегоНаименований = ВсегоНаименований + 1;
			
			Сумма          = Сумма       + ВыборкаПоСтрокамТЧ.Сумма;
			ВсегоСкидок    = ВсегоСкидок + ВыборкаПоСтрокамТЧ.Скидка;
			ВсегоБезСкидок = Сумма       + ВсегоСкидок;
			СуммаНДС       = СуммаНДС    + Окр(ВыборкаПоСтрокамТЧ.СуммаНДС, 2, 1);
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьИтогоНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьИтогоКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьИтогоДанных);
		ОбластьИтогоСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьИтогоСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабличныйДокумент.Присоединить(ОбластьИтогоСкидок);
		ОбластьИтогоСуммы.Параметры.Всего = Сумма;
		ТабличныйДокумент.Присоединить(ОбластьИтогоСуммы);
		
		
		// Вывести ИтогоНДС
		ТабличныйДокумент.Вывести(ОбластьИтогоНДСНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьИтогоНДСКодов);
		КонецЕсли;
		
		ОбластьИтогоНДСДанных.Параметры.НДС = ?(ВыборкаПоДокументам.ЦенаВключаетНДС, НСтр("ru = 'В том числе НДС:'"), НСтр("ru = 'Сумма НДС:'"));
		ТабличныйДокумент.Присоединить(ОбластьИтогоНДСДанных);
		ТабличныйДокумент.Присоединить(ОбластьИтогоНДССкидок);
		
		Если НЕ ВыборкаПоДокументам.УчитыватьНДС Тогда
			СуммаНДССтрока = НСтр("ru = 'Без НДС'");
		Иначе
			СуммаНДССтрока = Строка(СуммаНДС);
		КонецЕсли;
		
		ОбластьИтогоНДССуммы.Параметры.ВсегоНДС = СуммаНДССтрока;
		ТабличныйДокумент.Присоединить(ОбластьИтогоНДССуммы);
		
		
		// Вывести Сумму прописью.
		
		ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%, на сумму %Итого%'");
		
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%", ФормированиеПечатныхФормСервер.ФорматСумм(Сумма));
		
		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
		ОбластьСуммаПрописью.Параметры.СуммаПрописью  = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(Сумма);
		
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		// ПОДПИСИ
		ОбластьПодписей.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьПодписей.Параметры.ОтветственныйПредставление = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

Функция ПолучитьСостояниеЗаказаПокупателя(ДокументСтатуса) Экспорт 
	
	СтрокиЗаказа = Новый ТаблицаЗначений;
	СтрокиЗаказа.Колонки.Добавить("КлючСвязиЗапросаДоступности", Новый ОписаниеТипов("Число"));
	СтрокиЗаказа.Колонки.Добавить("Обеспечение", Новый ОписаниеТипов("Булево"));
	
	Результат = Новый Структура("Состояние, СтрокиЗаказа"
		, Перечисления.СостоянияЗаказовПокупателей.ПустаяСсылка()
		, СтрокиЗаказа);
		
	Если ДокументСтатуса.Статус = Перечисления.СтатусыЗаказовПокупателей.Новый Тогда 
		
		Результат.Состояние = Перечисления.СостоянияЗаказовПокупателей.ГотовКРаботе;
		
    ИначеЕсли ДокументСтатуса.Статус = Перечисления.СтатусыЗаказовПокупателей.Отменён Тогда 
		
		Результат.Состояние = Перечисления.СостоянияЗаказовПокупателей.Закрыт;
		
    ИначеЕсли ДокументСтатуса.Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт Тогда 
		
		Результат.Состояние = Перечисления.СостоянияЗаказовПокупателей.Закрыт;
		
	ИначеЕсли ДокументСтатуса.Статус = Перечисления.СтатусыЗаказовПокупателей.ВРаботе Тогда 
		
		Если ЗаказыПокупателейСервер.ЗаполненностьДокументаДляЗапроса(ДокументСтатуса.Ссылка).СтрокиЗаполнены Тогда
			
			Результат.Состояние = Перечисления.СостоянияЗаказовПокупателей.ГотовКЗапросу;
			
		Иначе 
			
			Результат.Состояние = Перечисления.СостоянияЗаказовПокупателей.ОбрабатываетсяМенеджером;
			
		КонецЕсли;
		
	ИначеЕсли ДокументСтатуса.Статус = Перечисления.СтатусыЗаказовПокупателей.ЗапросДоступности Тогда 
		
		Результат.Состояние = Перечисления.СостоянияЗаказовПокупателей.ОжидаетсяСогласование;
		
 		СтруктураОплат = ЗаказыПокупателейКлиентСервер.СтруктураПодсчетаОплат();
		СуммаВсего = 0;
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(ДокументСтатуса.Товары, ДокументСтатуса.ЦенаВключаетНДС, СуммаВсего);
		СтруктураОплат.СуммаВсего = СуммаВсего;
		ПодсчетОплаты = ЗаказыПокупателейКлиентСервер.ПодсчетОплаты(ДокументСтатуса, СтруктураОплат);
		
		Если ПодсчетОплаты.Предоплата И Не ПодсчетОплаты.Оплачено Тогда
		
			Результат.Состояние = Перечисления.СостоянияЗаказовПокупателей.ОжидаетсяОплата;
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗапросДоступностиТоваров.Ссылка) КАК ВсегоЗапросов,
				|	СУММА(ВЫБОР
				|		КОГДА ЗапросДоступностиТоваров.МагазинОтправитель = ЗапросДоступностиТоваров.МагазинПолучатель
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ) КАК ВМагазине,
				|	СУММА(ВЫБОР
				|		КОГДА
				|			ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Согласован)
				|		ИЛИ
				|			ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПродажаНаКассе)
				|		ИЛИ
				|			ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПродажаБезнал)
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ) КАК Согласовано,
				|	СУММА(ВЫБОР
				|		КОГДА
				|			ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ЧастичноСогласован)
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ) КАК Частично,
				|	СУММА(ВЫБОР
				|		КОГДА ЗапросДоступностиТоваров.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз)
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ) КАК ЕстьСамовывоз
				|ИЗ
				|	Документ.ЗапросДоступностиТоваров КАК ЗапросДоступностиТоваров
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
				|			ЗапросДоступностиТоваровТовары.Ссылка КАК Ссылка
				|		ИЗ
				|			Документ.ЗапросДоступностиТоваров.Товары КАК ЗапросДоступностиТоваровТовары
				|		ГДЕ
				|			ЗапросДоступностиТоваровТовары.Ссылка.ДокументОснование = &ДокументОснование
				|			И НЕ
				|				(ЗапросДоступностиТоваровТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён)
				|			ИЛИ
				|				ЗапросДоступностиТоваровТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён))) КАК
				|			ВложенныйЗапрос
				|		ПО ЗапросДоступностиТоваров.Ссылка = ВложенныйЗапрос.Ссылка
				|ГДЕ
				|	ЗапросДоступностиТоваров.ДокументОснование = &ДокументОснование
				|	И НЕ (ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отменён)
				|	ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Удалён))";
			
			Запрос.УстановитьПараметр("ДокументОснование", ДокументСтатуса);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать(); 
			
			Если Выборка.Следующий() И Не Выборка.ВсегоЗапросов = 0 Тогда  
				
				Если Выборка.ВсегоЗапросов = (Выборка.Частично + Выборка.Согласовано) Тогда
					
					Если Не Выборка.Частично = 0 Тогда
						
						Результат.Состояние = Перечисления.СостоянияЗаказовПокупателей.ЧастичноСолгласовано; 
						
					Иначе
						Если Выборка.ВсегоЗапросов = Выборка.ВМагазине Тогда
							
							Результат.Состояние = Перечисления.СостоянияЗаказовПокупателей.ГотовКПродаже;
							
						Иначе
							
							Если Выборка.ЕстьСамовывоз = 0 Тогда 
								
								Результат.Состояние = Перечисления.СостоянияЗаказовПокупателей.ГотовКДоставке;
								
							Иначе 
								
								Результат.Состояние = Перечисления.СостоянияЗаказовПокупателей.ГотовКПеремещению;
								
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли ДокументСтатуса.Статус = Перечисления.СтатусыЗаказовПокупателей.Перемещение Тогда
		
		Результат.Состояние = Перечисления.СостоянияЗаказовПокупателей.ЗаказВДороге; 

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗапросДоступностиТоваров.Ссылка КАК Ссылка,
			|	ЗапросДоступностиТоваров.СтатусЗапроса КАК СтатусЗапроса,
			|	ЗапросДоступностиТоваров.МагазинОтправитель КАК МагазинОтправитель,
			|	ЗапросДоступностиТоваров.МагазинПолучатель КАК МагазинПолучатель
			|ИЗ
			|	Документ.ЗапросДоступностиТоваров КАК ЗапросДоступностиТоваров
			|ГДЕ
			|	ЗапросДоступностиТоваров.ДокументОснование = &ДокументОснование
			|	И НЕ(ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Отменён)
			|				ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Удалён)
			|				ИЛИ ЗапросДоступностиТоваров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.ПодтвердитьОтмену))
			|	И НЕ ЗапросДоступностиТоваров.МагазинОтправитель = ЗапросДоступностиТоваров.МагазинПолучатель";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументСтатуса);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ГотовКОтправке = Истина; 
		ГотовКПродаже = Истина; 
		
		Пока Выборка.Следующий() Цикл  
			
			Если Не Выборка.МагазинОтправитель = Выборка.МагазинПолучатель Тогда
				
				Если Выборка.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Сборка Тогда
					
					ГотовКОтправке = Ложь;
					Прервать;
					
				КонецЕсли;
				
				Если Не Выборка.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Получен Тогда
					
					ГотовКПродаже = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;  
			
		КонецЦикла; 
		
		Если ГотовКОтправке Тогда 
			
			Результат.Состояние = Перечисления.СостоянияЗаказовПокупателей.ГотовКОтправке; 
			
		КонецЕсли;

	ИначеЕсли ДокументСтатуса.Статус = Перечисления.СтатусыЗаказовПокупателей.Продажа
			Или ДокументСтатуса.Статус = Перечисления.СтатусыЗаказовПокупателей.Доставка Тогда
		
		Если ДокументСтатуса.Статус = Перечисления.СтатусыЗаказовПокупателей.Доставка Тогда
			Результат.Состояние = Перечисления.СостоянияЗаказовПокупателей.ЗаказВДороге;
		Иначе
			Результат.Состояние = Перечисления.СостоянияЗаказовПокупателей.ОжидаетсяПродажа;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаказПокупателяТовары.Ссылка,
			|	ЕСТЬNULL(СостояниеСтрокЗаказаПокупателя.Продано, ЛОЖЬ) КАК Продано
			|ИЗ
			|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеСтрокЗаказаПокупателя КАК СостояниеСтрокЗаказаПокупателя
			|		ПО ЗаказПокупателяТовары.Ссылка = СостояниеСтрокЗаказаПокупателя.ЗаказПокупателя
			|		И ЗаказПокупателяТовары.КлючСвязиЗапросаДоступности = СостояниеСтрокЗаказаПокупателя.КлючСвязи
			|ГДЕ
			|	ЗаказПокупателяТовары.Ссылка = &Ссылка
			|	И НЕ ЗаказПокупателяТовары.Отменено";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументСтатуса);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			
			Выборка.Следующий();
			
			Если Выборка.Продано Тогда
				
				Результат.Состояние = Перечисления.СостоянияЗаказовПокупателей.ГотовКЗакрытию;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура РаспределениеЗаказов(Ответственный = Неопределено, МассивДокументов = Неопределено) Экспорт
	ПериодРаспределения = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка,
		|	ЗаказПокупателя.Дата КАК Дата,
		|	ЗаказПокупателя.Контрагент КАК Контрагент
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиКоллЦентра КАК СотрудникиКоллЦентра
		|		ПО ЗаказПокупателя.Ответственный = СотрудникиКоллЦентра.Владелец
		|ГДЕ
		|	(ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Новый)
		|			ИЛИ НЕ &ТолькоНовые)
		|	И (НЕ(ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
		|					ИЛИ ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Отменён))
		|			ИЛИ &ТолькоНовые)
		|	И (ЗаказПокупателя.Ответственный = &Ответственный
		|			ИЛИ ЗаказПокупателя.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ИЛИ &ТолькоНовые
		|				И СотрудникиКоллЦентра.ЗаказыПоУмолчанию)
		|	И ЗаказПокупателя.Проведен
		|	И (ЗаказПокупателя.Ссылка В (&МассивДокументов)
		|			ИЛИ &ТолькоНовые)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ТолькоНовые", (МассивДокументов = Неопределено));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Если ПериодРаспределения = Неопределено Тогда 
			ПериодРаспределения = Выборка.Дата;
		КонецЕсли;
		
		ДокументЗаказа = Выборка.Ссылка.ПолучитьОбъект();
		ОтветственныйЗаЗаказ = ЗаказыПокупателейСервер.ОтветственныйЗаЗаказ(Выборка.Контрагент, Ложь, ПериодРаспределения, Ответственный);
		Если ОтветственныйЗаЗаказ.Пустая() Тогда 
			Продолжить;
		КонецЕсли;
		ДокументЗаказа.Ответственный = ОтветственныйЗаЗаказ.Владелец;
		ДокументЗаказа.Записать();
		ЗаказыПокупателейСервер.СотрудникНовыйЗаказ(ОтветственныйЗаЗаказ);
	КонецЦикла; 

КонецПроцедуры

#КонецОбласти

#КонецЕсли
