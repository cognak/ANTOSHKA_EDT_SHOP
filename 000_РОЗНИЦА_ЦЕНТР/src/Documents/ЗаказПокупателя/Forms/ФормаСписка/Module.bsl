
&НаКлиенте
Процедура НомерЗаказаПриИзменении(Элемент)
	УстановитьОтборДинамическихСписков();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийКЗаказуПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЯвляетсяСуперВайзером = Ложь;

	//Если НЕ ИспользоватьРезервированиеПоЗаказамПокупателей Тогда
	//	
	//	ЭлементСпискаЗначений = Элементы.ОтборСостояние.СписокВыбора.НайтиПоЗначению(Перечисления.СостоянияЗаказовПокупателей.ОжидаетсяРезервирование);
	//	Если НЕ ЭлементСпискаЗначений = Неопределено Тогда
	//		Элементы.ОтборСостояние.СписокВыбора.Удалить(ЭлементСпискаЗначений);
	//	КонецЕсли;
	//КонецЕсли;
	
	Элементы.ГруппаДоставка.Видимость = РозничныеПродажиСерверПовтИсп.ЭтоУзелИнтернетМагазина()
									ИЛИ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел();

	Элементы.ФормаЗагрузитьXML.Доступность = ТехническаяПоддержкаВызовСервера.ВыполняютсяСлужебныеДействия()
		ИЛИ УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьИнтерактивнуюЗагрузкуФайлаЗаказПокупателя, Ложь);

	СотрудникКоллЦентраСтруктура = ЗаказыПокупателейСервер.ЯвляетсяСотрудникомКоллЦентра(ПараметрыСеанса.ТекущийПользователь);
	СотрудникКоллЦентра = СотрудникКоллЦентраСтруктура.СотрудникКоллЦентра;
	НераспределенныеЗаказы = СотрудникКоллЦентраСтруктура.НераспределенныеЗаказы;
	ВыбранТекущийПользовательОтветственным = СотрудникКоллЦентраСтруктура.ВыбранТекущийПользовательОтветственным;
	
	Если Не СотрудникКоллЦентра.Пустая() Тогда
		
		Если СотрудникКоллЦентра.РольСотрудника = Перечисления.РолиСотрудниковКоллЦентра.СуперВайзер Тогда  
			ЯвляетсяСуперВайзером = Истина;
		КонецЕсли;
		Ответственный = СотрудникКоллЦентра.Владелец;
		ТекущийСотрудникКЦ = СотрудникКоллЦентра.Владелец;  
		СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.Новый;
		СотрудникНаРаботе = ЗаказыПокупателейСервер.СотрудникРаботает(СотрудникКоллЦентра);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля "Магазин".
&НаКлиенте
Процедура ОтборМагазинПриИзменении(Элемент)
	
	МагазинОтборПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
	
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("РежимВыбора", Истина);
	//ПараметрыФормы.Вставить("ТекущаяСтрока", ?(
	//	Ответственный.Пустая(),
	//	Неопределено,
	//	Ответственный));

	//
	//ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	//ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	//ПараметрыФормы.Вставить("ОтборСотрудниковКЦ", Истина);
	//
	//
	//ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элемент);

	ДанныеВыбора = Новый СписокЗначений;
	ЗаказыПокупателейСервер.ВыборСотрудникаКЦ(ДанныеВыбора, Истина);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	//УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура МагазинОтборПриИзмененииНаСервере()
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйПриИзменении(Элемент)

	СотрудникКоллЦентраСтруктура = ЗаказыПокупателейСервер.ЯвляетсяСотрудникомКоллЦентра(Ответственный);
	СотрудникКоллЦентра = СотрудникКоллЦентраСтруктура.СотрудникКоллЦентра;
	ВыбранТекущийПользовательОтветственным = СотрудникКоллЦентраСтруктура.ВыбранТекущийПользовательОтветственным;
	СотрудникНаРаботе = ЗаказыПокупателейСервер.СотрудникРаботает(СотрудникКоллЦентра);
	НераспределенныеЗаказы = СотрудникКоллЦентраСтруктура.НераспределенныеЗаказы;
	ОтображениеКнопокКЦ();
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// Прочее

// Функция возвращает массив динамических списков, для которых требуется установка отбора.
//
&НаСервере
Функция ПолучитьМассивДинамическихСписковНаСервере()

	МассивСписков = Новый Массив;
	МассивСписков.Добавить(Список);
	
	Возврат МассивСписков;

КонецФункции

// Процедура устанавливает отбор динамических списков формы.
//
&НаСервере
Процедура УстановитьОтборДинамическихСписков()
	
	Для Каждого ДинамическийСписок Из ПолучитьМассивДинамическихСписковНаСервере() Цикл
		
		//ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ДинамическийСписок, "Магазин"      , Магазин                  , ЗначениеЗаполнено(Магазин)                  , ВидСравненияКомпоновкиДанных.Равно);
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ДинамическийСписок, "Номер"      , НомерЗаказаДляПоиска                  , ЗначениеЗаполнено(НомерЗаказаДляПоиска)                  , ВидСравненияКомпоновкиДанных.Равно);
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ДинамическийСписок, "Ответственный", Ответственный            , ЗначениеЗаполнено(Ответственный)            , ВидСравненияКомпоновкиДанных.Равно);
		//ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ДинамическийСписок, "Состояние"    , СостояниеЗаказаПокупателя, ЗначениеЗаполнено(СостояниеЗаказаПокупателя), ВидСравненияКомпоновкиДанных.Равно);
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ДинамическийСписок, "Статус"   	 , СтатусыЗаказовПокупателей, ЗначениеЗаполнено(СтатусыЗаказовПокупателей), ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЦикла; 
	
	Элементы.Новый.Заголовок				= "0";
	Элементы.ВРаботе.Заголовок				= "0";
	Элементы.ЗапросДоступности.Заголовок	= "0";
	Элементы.Перемещение.Заголовок			= "0";
    Элементы.Продажа.Заголовок				= "0";
    Элементы.Доставка.Заголовок				= "0";
	
	Элементы.Новый.Гиперссылка				= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.Новый);
	Элементы.ВРаботе.Гиперссылка			= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.ВРаботе);
	Элементы.ЗапросДоступности.Гиперссылка	= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.ЗапросДоступности);
	Элементы.Перемещение.Гиперссылка		= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.Перемещение);
	Элементы.Продажа.Гиперссылка			= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.Продажа);
	Элементы.Доставка.Гиперссылка			= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.Доставка);

	Элементы.НовыйТекст.Гиперссылка				= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.Новый);
	Элементы.ВРаботеТекст.Гиперссылка			= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.ВРаботе);
	Элементы.ЗапросДоступностиТекст.Гиперссылка	= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.ЗапросДоступности);
	Элементы.ПеремещениеТекст.Гиперссылка		= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.Перемещение);
	Элементы.ПродажаТекст.Гиперссылка			= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.Продажа);
	Элементы.ДоставкаТекст.Гиперссылка			= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.Доставка);
	Элементы.ВсеТекст.Гиперссылка				= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.ПустаяСсылка());
	Элементы.ЗакрытыеТекст.Гиперссылка			= Не (СтатусыЗаказовПокупателей = Перечисления.СтатусыЗаказовПокупателей.Закрыт);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостояниеЗаказаПокупателя.ЗаказПокупателя) КАК Количество,
		|	СостояниеЗаказаПокупателя.Статус КАК Статус,
		|	СУММА(ВЫБОР
		|		КОГДА СостояниеЗаказаПокупателя.СообщениеЦентр
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА СостояниеЗаказаПокупателя.СообщениеМагазин
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК ЕстьСообщение
		|ИЗ
		|	РегистрСведений.СостояниеЗаказаПокупателя КАК СостояниеЗаказаПокупателя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ТаблицаЗаказ
		|		ПО СостояниеЗаказаПокупателя.ЗаказПокупателя = ТаблицаЗаказ.Ссылка
		|ГДЕ
		|	(ТаблицаЗаказ.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.ПустаяСсылка)
		|	И ТаблицаЗаказ.Дата >= &НачальнаяДата
		|	ИЛИ ТаблицаЗаказ.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.Розница))
		|	И (СостояниеЗаказаПокупателя.Ответственный = &Ответственный
		|	ИЛИ &ВсеОтветственный)
		|	И ТаблицаЗаказ.Проведен
		|СГРУППИРОВАТЬ ПО
		|	СостояниеЗаказаПокупателя.Статус";
	
	
	Запрос.УстановитьПараметр("ВсеОтветственный", Не ЗначениеЗаполнено(Ответственный));
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	Запрос.УстановитьПараметр("НачальнаяДата", Дата(2023,11,12));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Статус = Перечисления.СтатусыЗаказовПокупателей.Новый Тогда 
			Элементы.Новый.Заголовок				= Строка(Выборка.Количество) + "(" + Строка(Выборка.ЕстьСообщение) + ")";
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыЗаказовПокупателей.ВРаботе Тогда 
			Элементы.ВРаботе.Заголовок				= Строка(Выборка.Количество) + "(" + Строка(Выборка.ЕстьСообщение) + ")";
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыЗаказовПокупателей.ЗапросДоступности Тогда 
			Элементы.ЗапросДоступности.Заголовок	= Строка(Выборка.Количество) + "(" + Строка(Выборка.ЕстьСообщение) + ")";
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыЗаказовПокупателей.Перемещение Тогда 
			Элементы.Перемещение.Заголовок			= Строка(Выборка.Количество) + "(" + Строка(Выборка.ЕстьСообщение) + ")";
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыЗаказовПокупателей.Продажа Тогда 
			Элементы.Продажа.Заголовок 				= Строка(Выборка.Количество) + "(" + Строка(Выборка.ЕстьСообщение) + ")";
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыЗаказовПокупателей.Доставка Тогда 
			Элементы.Доставка.Заголовок 			= Строка(Выборка.Количество) + "(" + Строка(Выборка.ЕстьСообщение) + ")";
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ЗагрузитьФайлXML(ИмяВременногоФайла, ОписаниеОшибки)
	
	УстановитьПривилегированныйРежим(Истина);

	//создадим структуры для загрузки
	ПараметрыЗагрузки = Новый Структура;
	ПрикладныеПараметры = Новый Структура;
	ПрикладныеПараметры.Вставить("Организация", Справочники.Организации.ПолучитьОрганизациюПоУмолчанию());
	ПрикладныеПараметры.Вставить("ИсточникЗагрузки", НСтр("ru = 'Файл'"));

	ПараметрыЗагрузки.Вставить("ПрикладныеПараметры", ПрикладныеПараметры);

	СтруктураСтатистики = Новый Структура;

	СтруктураСтатистики.Вставить("ОбработаноНаЗагрузке", 0);
	СтруктураСтатистики.Вставить("Загружено", Новый Массив);
	СтруктураСтатистики.Вставить("Пропущено", Новый Массив);
	СтруктураСтатистики.Вставить("Обновлено", Новый Массив);
	СтруктураСтатистики.Вставить("Создано"  , Новый Массив);
	СтруктураСтатистики.Вставить("Выгружено", Новый Массив);
	
	ПараметрыЗагрузки.Вставить("СтруктураСтатистики", СтруктураСтатистики);
	
	ИспользоватьХарактеристики = Истина;
	ОбменССайтомПереопределяемый.УстановитьПризнакИспользоватьХарактеристики(ИспользоватьХарактеристики);
	ПараметрыЗагрузки.Вставить("ИспользоватьХарактеристики", ИспользоватьХарактеристики);

	СтрокаИзФайла = Новый ТекстовыйДокумент;
	СтрокаИзФайла.Прочитать(ИмяВременногоФайла, КодировкаТекста.UTF8);
	СтрокаСодержимого = СтрокаИзФайла.ПолучитьТекст();
	СтрокаXML = СтрокаСодержимого;

	Если ПустаяСтрока(СтрокаXML) Тогда
		
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Не удалось прочитать данные'"));
		Возврат Ложь;
		
	КонецЕсли;

	Если НЕ ОбменССайтом.ЗагрузитьЗаказы(СтрокаXML, ПараметрыЗагрузки, ОписаниеОшибки) Тогда 
		
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, 
		НСтр("ru = 'Не удалось обработать документы'"));
		Возврат Ложь;

	КонецЕсли;

	Возврат Истина;
	
КонецФункции	

//Криворучко
&НаСервере
Процедура ЗагрузитьЗаказПокупателяНаСервере(АдресВременногоХранилища)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ОписаниеОшибки = "";

	Успешно = ЗагрузитьФайлXML(ИмяВременногоФайла, ОписаниеОшибки);
		
	Если Успешно И ПустаяСтрока(ОписаниеОшибки) Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документ загружен!'"));

	Иначе	

	    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(?(Успешно, "Операция выполнена:", НСтр("ru = 'Загрузка не выполнена по причинам:'")) + Символы.ПС + ОписаниеОшибки);

	КонецЕсли;	

	Попытка

		УдалитьИзВременногоХранилища(АдресВременногоХранилища);

	Исключение	КонецПопытки;
	
	Попытка

		УдалитьФайлы(ИмяВременногоФайла);

	Исключение	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаказПокупателя(Команда)

	Если НЕ Элементы.ФормаЗагрузитьXML.Доступность Тогда	//	LNK 31.10.2019 11:43:37

		Сообщить("Операция недоступна!");
		Возврат;

	КонецЕсли;

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр             = "Файл XML (*.xml)|*.xml";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок          = "Выберите файл, содержащий заказ покупателя";

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьЗаказПокупателяЗавершение", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте	//	LNK 15.01.2018 11:16:27
Процедура ЗагрузитьЗаказПокупателяЗавершение(ВыбранныеФайлы, ДополнительныеПараметры)	Экспорт

	Перем АдресВременногоХранилища;

	Если НЕ ВыбранныеФайлы = Неопределено И НЕ ВыбранныеФайлы.Количество() = 0 Тогда

		ПоместитьФайл(АдресВременногоХранилища, ВыбранныеФайлы[0], , Ложь, УникальныйИдентификатор);
		ЗагрузитьЗаказПокупателяНаСервере(АдресВременногоХранилища);

		Элементы.Список.Обновить();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтображениеКнопокКЦ()
	Элементы.РаспределитьЗаказы.Видимость = ЯвляетсяСуперВайзером;      
	//Элементы.КомаднаПоСтатусам.Видимость = ((СотрудникНаРаботе И Элементы.КомаднаПоСтатусам.Доступность)
											//Или ЯвляетсяСуперВайзером) 
											//И Не Элементы.Список.ТекущаяСтрока = Неопределено;
	
	Элементы.ПередатьДругомуОператору.Доступность = ВыбранТекущийПользовательОтветственным;
	
											
	Если СотрудникКоллЦентра.Пустая() Тогда
		Элементы.НачатьРаботу.Видимость = Ложь;
		Элементы.ЗакончитьРаботу.Видимость = Ложь;
	Иначе 
		Элементы.НачатьРаботу.Видимость = Не СотрудникНаРаботе;
		Элементы.ЗакончитьРаботу.Видимость = СотрудникНаРаботе;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	СтандартнаяОбработка	=	Ложь;
	Элементы.Список.ВыделенныеСтроки.Добавить(Строка);
	Элементы.Список.Обновить();    

КонецПроцедуры
 

&НаКлиенте
Процедура НачатьРаботу(Команда)
	ЗаказыПокупателейСервер.СотрудникНаРаботе(СотрудникКоллЦентра, Истина);
	СотрудникНаРаботе = ЗаказыПокупателейСервер.СотрудникРаботает(СотрудникКоллЦентра);
	ОтображениеКнопокКЦ(); 
	СделатьЗаписьВРегистрПриходУход(ПредопределенноеЗначение("Перечисление.ТипВремени.Приход"));

КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРаботу(Команда)
	ЗаказыПокупателейСервер.СотрудникНаРаботе(СотрудникКоллЦентра, Ложь);
	СотрудникНаРаботе = ЗаказыПокупателейСервер.СотрудникРаботает(СотрудникКоллЦентра);
	ОтображениеКнопокКЦ(); 
	СделатьЗаписьВРегистрПриходУход(ПредопределенноеЗначение("Перечисление.ТипВремени.Уход"));

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьОсновнойСписок();
	ПодключитьОбработчикОжидания("ОбновитьОсновнойСписок", 120);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура СделатьЗаписьВрегистрПриходУход(ТипВремени)
	
	УстановитьПривилегированныйРежим(Истина);
	ТекДата =ТекущаяДатаСеанса();
	МагазинРаботы = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин;
	
	ОрганизацияРаботы = Справочники.Магазины.РеквизитыМагазина(Магазин, ТекДата).Организация;

	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "ФизЛицо");
	
	НаборЗаписей = РегистрыСведений.УчетРабочегоВремениФакт.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.Организация.Установить(ОрганизацияРаботы);
	НаборЗаписей.Отбор.Магазин.Установить(МагазинРаботы);    
	НаборЗаписей.Отбор.Сотрудник.Установить(ФизЛицо); 
	НаборЗаписей.Отбор.период.Установить(текДАта); 
	НаборЗаписей.Отбор.ТипВремени.Установить(ТипВремени); 
	НовЗапись = НаборЗаписей.Добавить();
	НовЗапись.Организация = ОрганизацияРаботы;
	НовЗапись.Магазин = МагазинРаботы;
	НовЗапись.Сотрудник = ФизЛицо;
	НовЗапись.период = текДАта;
	НовЗапись.ЗаписаноЗаданием = Ложь;
	НовЗапись.ТипВремени = ТипВремени;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Ответственный = ВыбранноеЗначение;
КонецПроцедуры

&НаСервере
Процедура РаспределитьЗаказыНаСервере()
	
	Документы.ЗаказПокупателя.РаспределениеЗаказов(ПараметрыСеанса.ТекущийПользователь);

КонецПроцедуры

&НаКлиенте
Процедура РаспределитьЗаказы(Команда)
	РаспределитьЗаказыНаСервере();
	УстановитьОтборДинамическихСписков();
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда 
		СписокЗапросаДоступности.Параметры.УстановитьЗначениеПараметра("ДокументОснование", "");
		КомментарийКЗаказу.Параметры.УстановитьЗначениеПараметра("ЗаказПокупателя", "");
		Элементы.КомаднаПоСтатусам.Доступность = Ложь;
		//Элементы.ЧастичнаяПродажаКнопка.Доступность = Ложь;
		Элементы.ПередатьДругомуОператору.Доступность = Ложь;
	Иначе
		СписокЗапросаДоступности.Параметры.УстановитьЗначениеПараметра("ДокументОснование", Элементы.Список.ТекущиеДанные.Ссылка);
		КомментарийКЗаказу.Параметры.УстановитьЗначениеПараметра("ЗаказПокупателя", Элементы.Список.ТекущиеДанные.Ссылка);
		ЗаголовокКомандыПоСтатусам(Элементы.Список.ТекущиеДанные);
		ОтображениеКнопокКЦ(); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийКЗаказуПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если Не Элементы.Список.ТекущаяСтрока = Неопределено Тогда
		КомментарийПараметры = Новый Структура("ЗаказКлиента", Элементы.Список.ТекущаяСтрока);
		ОткрытьФорму("РегистрСведений.КомментарийИнтернетЗаказа.ФормаЗаписи", КомментарийПараметры, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийКЗаказуПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	Если Не Элементы.Список.ТекущаяСтрока = Неопределено Тогда
		КомментарийПараметры = Новый Структура("ПросмотрКомментария, ДанныеДляПросмотра, ЗаказКлиента", 
												Истина,
												Элемент.ТекущиеДанные,
												Элементы.Список.ТекущаяСтрока);
		ОткрытьФорму("РегистрСведений.КомментарийИнтернетЗаказа.ФормаЗаписи", КомментарийПараметры, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокКомандыПоСтатусам(СтрокаТаблицы) 
	
	СтруктураЗаголовка = ЗаголовокКомандыПоСтатусамСеревер(СтрокаТаблицы.Статус, СтрокаТаблицы.Состояние);
	
	Элементы.КомаднаПоСтатусам.Доступность = СтруктураЗаголовка.Доступность 
											И ((СотрудникНаРаботе И ВыбранТекущийПользовательОтветственным)
												Или ЯвляетсяСуперВайзером
												Или НераспределенныеЗаказы);
											
	Элементы.КомаднаПоСтатусам.Заголовок = СтруктураЗаголовка.Заголовок;
	
	//Элементы.ЧастичнаяПродажаКнопка.Доступность = ПроверкаЧастичнойПродажи(СтрокаТаблицы.Ссылка) 
	//										И ((СотрудникНаРаботе И ВыбранТекущийПользовательОтветственным) Или ЯвляетсяСуперВайзером);
											

КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПроверкаЧастичнойПродажи(ДокументЧастичнойПродажи)  
	
	//Если ДокументЧастичнойПродажи.ЧастичнаяПродажа Тогда
	//	
	//	Результат = Ложь; 
	//	
	//Иначе 
		
		Результат = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗапросДоступностиТоваровТовары.Количество = ЗапросДоступностиТоваровТовары.КоличествоТребование КАК ЧастичнаяПродажа
			|ИЗ
			|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров.Товары КАК ЗапросДоступностиТоваровТовары
			|		ПО ЗаказПокупателяТовары.Ссылка = ЗапросДоступностиТоваровТовары.Ссылка.ДокументОснование
			|			И ЗаказПокупателяТовары.КлючСвязи = ЗапросДоступностиТоваровТовары.КлючСвязи
			|			И (ЗапросДоступностиТоваровТовары.Ссылка.МагазинОтправитель = ЗапросДоступностиТоваровТовары.Ссылка.МагазинПолучатель)
			|ГДЕ
			|	ЗаказПокупателяТовары.Ссылка = &Ссылка
			|	И ЗапросДоступностиТоваровТовары.Ссылка.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваровШапка.Согласован)
			|	И ЗаказПокупателяТовары.Ссылка.Проведен
			|	И ЗапросДоступностиТоваровТовары.Ссылка.Проведен
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Ссылка) > 1
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ЗапросДоступностиТоваровТовары.Ссылка КАК Ссылка
			|	ИЗ
			|		Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров.Товары КАК ЗапросДоступностиТоваровТовары
			|			ПО ЗаказПокупателяТовары.Ссылка = ЗапросДоступностиТоваровТовары.Ссылка.ДокументОснование
			|	ГДЕ
			|		ЗаказПокупателяТовары.Ссылка = &Ссылка
			|		И ЗаказПокупателяТовары.Ссылка.Проведен
			|		И ЗапросДоступностиТоваровТовары.Ссылка.Проведен) КАК ВложенныйЗапрос";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументЧастичнойПродажи);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл  
			
			Результат = Истина И Выборка.ЧастичнаяПродажа;
			
			Если Не Результат Тогда 
				
				Прервать;
				
			КонецЕсли; 
			
		КонецЦикла;
		
	//КонецЕсли; 
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ЗаголовокКомандыПоСтатусамСеревер(Статус, Состояние)
	
	СтруктураЗаголовка = Новый Структура("Доступность, Заголовок");
	
	СтруктураЗаголовка.Доступность = Ложь;

	
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.Новый") Тогда 
		
		СтруктураЗаголовка.Заголовок = "В работу"; 
		СтруктураЗаголовка.Доступность = Истина;

	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.ВРаботе") Тогда 
		
		СтруктураЗаголовка.Заголовок = "Запрос доступности";
		
		СтруктураЗаголовка.Доступность = (Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказовПокупателей.ГотовКЗапросу"));

	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.ЗапросДоступности") Тогда
		
		СтруктураЗаголовка.Заголовок = "Перемещение заказа";
		
		Если Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказовПокупателей.ГотовКПеремещению") Тогда
			
			СтруктураЗаголовка.Доступность = Истина;
			
		ИначеЕсли Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказовПокупателей.ГотовКПродаже") Тогда
			
			СтруктураЗаголовка.Заголовок = "Продать заказ";
			СтруктураЗаголовка.Доступность = Истина;
			
		ИначеЕсли Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказовПокупателей.ГотовКДоставке") Тогда
			
			СтруктураЗаголовка.Заголовок = "Доставить заказ";
			СтруктураЗаголовка.Доступность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.Продажа") Тогда
		
		СтруктураЗаголовка.Заголовок = "Закрыть заказ";
		
		Если Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказовПокупателей.ГотовКЗакрытию") Тогда
			
			СтруктураЗаголовка.Доступность = Истина;
			
		КонецЕсли;
		
	Иначе
		
		СтруктураЗаголовка.Заголовок = "Нет действий";
		
	КонецЕсли;  
	
	Возврат СтруктураЗаголовка;
	
КонецФункции 

&НаКлиенте
Процедура КомаднаПоСтатусам(Команда)
	
	КомаднаПоСтатусамНаСервере(Элементы.Список.ТекущиеДанные.Ссылка);
	Если Не Элементы.Список.ТекущиеДанные = Неопределено Тогда
		//Если Не ПустаяСтрока(ОтветОСменеСтатуса) Тогда
		//	Предупреждение(ОтветОСменеСтатуса);
		//КонецЕсли;
		ОтображениеКнопокКЦ();
		ЗаголовокКомандыПоСтатусам(Элементы.Список.ТекущиеДанные);
		Элементы.Список.Обновить();  
	КонецЕсли;
КонецПроцедуры 

&НаСервере
Процедура КомаднаПоСтатусамНаСервере(АктивныйДокумент)
	
	СтарыйСтатус = АктивныйДокумент.Статус;
	СостояниеДокумента = ЗаказыПокупателейСервер.ПолучитьСостаяниеЗаказаПокупателя(АктивныйДокумент);
	
	ДокументОбъект = АктивныйДокумент.ПолучитьОбъект();
	
	Если АктивныйДокумент.Статус = Перечисления.СтатусыЗаказовПокупателей.Новый Тогда
		
		ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПокупателей.ВРаботе;
		
	ИначеЕсли АктивныйДокумент.Статус = Перечисления.СтатусыЗаказовПокупателей.ВРаботе 
			И СостояниеДокумента = Перечисления.СостоянияЗаказовПокупателей.ГотовКЗапросу Тогда
		
		ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПокупателей.ЗапросДоступности; 
		
	ИначеЕсли АктивныйДокумент.Статус = Перечисления.СтатусыЗаказовПокупателей.ЗапросДоступности Тогда
		
		Если СостояниеДокумента = Перечисления.СостоянияЗаказовПокупателей.ГотовКПеремещению Тогда
			
			ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПокупателей.Перемещение; 
			
		ИначеЕсли СостояниеДокумента = Перечисления.СостоянияЗаказовПокупателей.ГотовКПродаже Тогда
			
			ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПокупателей.Продажа; 
			
		ИначеЕсли СостояниеДокумента = Перечисления.СостоянияЗаказовПокупателей.ГотовКДоставке Тогда
			
			ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПокупателей.Доставка; 
			//ДокументОбъект.ЧастичнаяПродажа = Истина; 
			
		КонецЕсли; 
		
	ИначеЕсли АктивныйДокумент.Статус = Перечисления.СтатусыЗаказовПокупателей.Продажа
			И СостояниеДокумента = Перечисления.СостоянияЗаказовПокупателей.ГотовКЗакрытию Тогда
			
			ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт;
		
	КонецЕсли;
	
	Если Не (СтарыйСтатус = ДокументОбъект.Статус) И ДокументОбъект.ПроверитьЗаполнение() Тогда 
		
		ДокументОбъект.Записать();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
//	Если ИмяСобытия = "ЗакрытиеИнтернетЗаказа" Тогда
//		
//		ОбновитьОсновнойСписок();
//		
//	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОсновнойСписок()
	
	ОтображениеКнопокКЦ();
	
	Если Не Элементы.Список.ТекущиеДанные = Неопределено Тогда 
		
		ЗаголовокКомандыПоСтатусам(Элементы.Список.ТекущиеДанные); 
		
	КонецЕсли;
	
	Элементы.Список.Обновить(); 
	Элементы.КомментарийКЗаказу.Обновить(); 
	Элементы.СписокЗапросаДоступности.Обновить(); 
	УстановитьОтборДинамическихСписков();

КонецПроцедуры

&НаКлиенте
Процедура НовыйТекстНажатие(Элемент)
	
	СтатусыЗаказовПокупателей = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.Новый");
	УстановитьОтборДинамическихСписков(); 

КонецПроцедуры

&НаКлиенте
Процедура ВРаботеТекстНажатие(Элемент)
	
	СтатусыЗаказовПокупателей = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.ВРаботе");
	УстановитьОтборДинамическихСписков(); 

КонецПроцедуры

&НаКлиенте
Процедура ЗапросДоступностиТекстНажатие(Элемент)
	
	СтатусыЗаказовПокупателей = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.ЗапросДоступности");
	УстановитьОтборДинамическихСписков(); 

КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеТекстНажатие(Элемент)
	
	СтатусыЗаказовПокупателей = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.Перемещение");
	УстановитьОтборДинамическихСписков(); 

КонецПроцедуры

&НаКлиенте
Процедура ПродажаТекстНажатие(Элемент)
	
	СтатусыЗаказовПокупателей = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.Продажа");
	УстановитьОтборДинамическихСписков(); 

КонецПроцедуры

&НаКлиенте
Процедура ВсеТекстНажатие(Элемент)
	
	СтатусыЗаказовПокупателей = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.ПустаяСсылка");
	УстановитьОтборДинамическихСписков(); 

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытыеТекстНажатие(Элемент)
	
	СтатусыЗаказовПокупателей = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.Закрыт");
	УстановитьОтборДинамическихСписков(); 

КонецПроцедуры

&НаКлиенте
Процедура ЧастичнаяПродажа(Команда)
	ЧастичнаяПродажаНаСервере(Элементы.Список.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ЧастичнаяПродажаНаСервере(ДокументЧастичнойПродажи)
	
	ДокументОбъект = ДокументЧастичнойПродажи.ПолучитьОбъект();
	ДокументОбъект.ЧастичнаяПродажа = Истина;
	ДокументОбъект.Записать(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму(Команда)
	ОбновитьОсновнойСписок();
КонецПроцедуры

&НаКлиенте
Процедура ПередатьДругомуОператору(Команда)

	
	Оповещение = Новый ОписаниеОповещения("ПередатьДругомуОператоруЗавершение", ЭтотОбъект);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	//ПараметрыФормы.Вставить("ТекущаяСтрока", ?(
	//	Ответственный.Пустая(),
	//	Неопределено,
	//	Ответственный));

	
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормы.Вставить("ОтборСотрудниковКЦ", Истина);
	
	
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, ЭтаФорма, , , , Оповещение);


КонецПроцедуры

&НаКлиенте
Процедура ПередатьДругомуОператоруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда 
		ПередатьДругомуОператоруНаСервере(Результат, Элементы.Список.ВыделенныеСтроки);
		ОбновитьОсновнойСписок();
	КонецЕсли;
	
КонецПроцедуры     

&НаСервере
Процедура ПередатьДругомуОператоруНаСервере(ПолучательЗаказа, Знач МассивДокументов)
	
	Для Каждого ДокументЗаказаСсылка Из МассивДокументов Цикл 
		
		ДокументЗаказа = ДокументЗаказаСсылка.ПолучитьОбъект();
		ДокументЗаказа.Ответственный = ПолучательЗаказа;
		ДокументЗаказа.Записать();  
		ПолучательЗаказаСотрудник = Справочники.СотрудникиКоллЦентра.Выбрать(, ПолучательЗаказа);  
		ПолучательЗаказаСотрудник.Следующий();
		ЗаказыПокупателейСервер.СотрудникНовыйЗаказ(ПолучательЗаказаСотрудник.Ссылка);   
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоставкаТекстНажатие(Элемент)
	
	СтатусыЗаказовПокупателей = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.Доставка");
	УстановитьОтборДинамическихСписков(); 

КонецПроцедуры
