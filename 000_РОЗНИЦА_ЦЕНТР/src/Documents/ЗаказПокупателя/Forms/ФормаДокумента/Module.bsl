&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; // Используется для передачи текущей строки в обработчик ожидания.

&НаКлиенте	//	LNK 04.07.2021 06:52:09
Перем ДанныеСтрокиПередИзменением;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Действие") Тогда
		СтрокаДействие = Параметры.Действие;
		Если СтрокаДействие = "ДействиеСогласование" Тогда
			Объект.Статус = Перечисления.СтатусыЗаказовПокупателей.Согласован;
		ИначеЕсли СтрокаДействие = "ДействиеРезерв" Тогда
			КоличествоСтрокРезервирования = РезервироватьПоДаннымОстатковСервер();
		ИначеЕсли СтрокаДействие = "ДействиеОтмена" Тогда
			КоличествоСтрокОтменено = ОтменитьСНепроданнымиТоварамиСервер(Параметры.ПричинаОтмены, Истина);
		ИначеЕсли СтрокаДействие = "ДействиеЗакрытие" Тогда
			Объект.Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект, КартинкаСостоянияДокумента, СостояниеДокумента, РазрешеноПроведение);

	БезНДС = НСтр("ru = 'Без НДС'");
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьДоступностьЦенаВключаетНДС();
		Объект.ДатаПродажиЖелаемая = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	УстановитьТекущуюСтраницуСуммПодвала();
	ПараметрыСобытийПО = Новый Структура;
	ПараметрыСобытийПО.Вставить("РегистрацияНовойКарты", Истина);
	
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	БонусныеБаллыСервер.ОбновитьОтображениеОплатаБонуснымиБаллами(Объект);
	
	ЯвляетсяСуперВайзером = ЗаказыПокупателейСервер.ЯвляетсяСуперВайзеромКоллЦентра(ПараметрыСеанса.ТекущийПользователь);
	СотрудникКЦ = ЗаказыПокупателейСервер.ЯвляетсяСотрудникомКоллЦентра(ПараметрыСеанса.ТекущийПользователь).СотрудникКоллЦентра;
	ДокументСотрудникаКЦ = (СотрудникКЦ.Владелец = Объект.Ответственный);
	ЯвляетсяСотрудникомКЦ = (СотрудникКЦ.РольСотрудника = Перечисления.РолиСотрудниковКоллЦентра.СуперВайзер);
	
	Если (Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь) 
			И (Объект.Статус = Перечисления.СтатусыЗаказовПокупателей.Новый) Тогда 
			
		Объект.Статус = Перечисления.СтатусыЗаказовПокупателей.ВРаботе;
		
	КонецЕсли;
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	//НастроитьФормуПоДополнительнымПравам();

	ИспользоватьПричиныОтменыЗаказовПокупателей = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПокупателей"); 
	ИспользоватьАвтоматическиеСкидкиВПродажах	= ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");

	Элементы.ТоварыГруппаОтмена.Видимость                        = ИспользоватьПричиныОтменыЗаказовПокупателей;
	Элементы.ТоварыОтмененоПричиныОтменыНеИспользуются.Видимость = НЕ ИспользоватьПричиныОтменыЗаказовПокупателей;

	Элементы.СтатусИМ.Доступность = ТехническаяПоддержкаВызовСервера.ОтладочныйРежимРаботы();	//	LNK 14.04.2022 07:39:09
	
	//Если НЕ РозничныеПродажиСерверПовтИсп.ЭтоУзелИнтернетМагазина() Тогда	//	LNK 20.11.2020 06:55:17
	Если ложь Тогда	//	LNK 20.11.2020 06:55:17

		//Криворучко
		Если (Объект.СтатусОплаты = Перечисления.СтатусОплаты.Оплачен) или (Объект.Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт) Тогда
			Если НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() = Истина Тогда
				
				Модифицированность = Ложь;

				ТолькоПросмотр = Истина;	
				
			КонецЕсли;
		КонецЕсли;

	Иначе
		
		Если (Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь) 
			Или ЗаказыПокупателейСервер.ЯвляетсяСуперВайзеромКоллЦентра(ПараметрыСеанса.ТекущийПользователь) Тогда  

			ТолькоПросмотр = Ложь;	
			Элементы.СуммаДоставкиОплачена.ТолькоПросмотр = Ложь;

		КонецЕсли;
	КонецЕсли;
	ЗаполнитьТелефонКлиента();   
	//Если Объект.Имя = "" или Объект.Фамилия = "" тогда
	//	ЗаполнитьФИОКлиента();	 
	//КонецЕсли;
	СписокКомментариев.Параметры.УстановитьЗначениеПараметра("ЗаказПокупателя", Объект.Ссылка);

	УправлениеДоступомРТ.ПриСозданииФормыНаСервере(ЭтотОбъект);	//	LNK 17.10.2019 14:30:01

	УстановитьОформлениеЭлементов(ЭтотОбъект);	//	LNK 03.02.2021 08:55:34
	ПрверитьВидимостьДоставкиИПолучателя();
	УтсановитьЗначенияПоУмолчанию();
	ЗаполнитьСтатусДляВыбора(); 
	
	Если Не (Объект.УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.Розница 
		Или Объект.УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.ПустаяСсылка()) Тогда 
		
		ТолькоПросмотр = Истина; 
		
	КонецЕсли;  

КонецПроцедуры

&НаСервере
Процедура УтсановитьЗначенияПоУмолчанию()
	Если Не ЗначениеЗаполнено(Объект.Город) тогда
		Объект.Город = Справочники.ГородаДоставки.ПустаяСсылка();	
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(Объект.Отделение) тогда
		Объект.Отделение = Справочники.Отделения.ПустаяСсылка();	
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(Объект.Улица) тогда
		Объект.Улица = Справочники.Улицы.ПустаяСсылка();	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	
	Элементы.ТоварыХарактеристика.Видимость = Ложь;
	Элементы.ТоварыВыгрузитьДанныеВТСД.Видимость = Ложь;
	Элементы.ТоварыЗагрузитьДанныеИзТСД.Видимость = Ложь;
	Элементы.ТоварыПоискПоМагнитномуКоду.Видимость = Ложь;
	Элементы.ГруппаРезерв.Видимость = Ложь;
	Элементы.НеПерезванивать.Видимость = Объект.НеПерезванивать;

	Элементы.Комментарий.Видимость = Не ПустаяСтрока(Объект.Комментарий);
	
	ВидимостьЭлементов();
	УстановитьТипПоУмолчанию();
	
	Если Объект.УчетнаяСистема = ПредопределенноеЗначение("Перечисление.УчетныеСистемыКомпании.Розница") Тогда
		
		Элементы.ТипДоставки.РежимВыбораИзСписка = Истина;
		
	КонецЕсли;
	
	ОтобразитьРасчетныеКолонки(Истина);
	ПодключитьОбработчикОжидания("Подключаемая_ОтобразитьРасчетныеКолонки", 60); 

КонецПроцедуры 

&НаКлиенте
Процедура УстановитьТипПоУмолчанию()
	Массив = Новый Массив(); 
	Массив.Добавить(Тип("СправочникСсылка.ГородаДоставки")); 
	НашеОписание = Новый ОписаниеТипов(Массив);

	Если НЕ ЗначениеЗаполнено(Объект.Город) тогда
		Элементы.Город.ОграничениеТипа = НашеОписание;    
		Элементы.Город2.ОграничениеТипа = НашеОписание;
	КонецЕсли;

	Массив = Новый Массив(); 
	Массив.Добавить(Тип("СправочникСсылка.Улицы")); 
	НашеОписание = Новый ОписаниеТипов(Массив);
	Если НЕ ЗначениеЗаполнено(Объект.Улица) тогда
		Элементы.Улица.ОграничениеТипа = НашеОписание; 
    КонецЕсли;
	Массив = Новый Массив(); 
	Массив.Добавить(Тип("СправочникСсылка.Отделения")); 
	НашеОписание = Новый ОписаниеТипов(Массив);
	Если НЕ ЗначениеЗаполнено(Объект.Отделение) тогда
		Элементы.Отделение.ОграничениеТипа = НашеОписание;  
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// +HVOYA. 2016-09-07 Юлия_Ж
	// ПодключаемоеОборудование
	//МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	// -HVOYA. 2016-09-07 Юлия_Ж
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		
		СтрокиИзменены = ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТабличнойЧасти);
		Если СтрокиИзменены Тогда
			ПересчитатьИлиОтменитьСкидки();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
// +HVOYA. 2016-09-07 Юлия_Ж	
	//Если ВводДоступен() И ВозможностьВводаПоШК() Тогда
	//	ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	//КонецЕсли;
// -HVOYA. 2016-09-07 Юлия_Ж	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);

	УстановитьТекущуюСтраницуСуммПодвала();
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	ПродажиСервер.ОбновитьСостояниеЗаказа(Объект.Ссылка, СостояниеЗаказа);
	
	УстановитьДоступностьЦенаВключаетНДС();
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПередЗаписьюКлиент(Отказ, ПараметрыЗаписи);
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// +HVOYA. 2016-09-07 Юлия_Ж
	//ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	//ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	//ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакЕстьПродажиПоСтроке(Объект.Ссылка, Объект.Товары);
	//ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(Объект.Товары);
	// -HVOYA. 2016-09-07 Юлия_Ж
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	УстановитьТекущуюСтраницуСуммПодвала();
	
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	БонусныеБаллыСервер.ОбновитьОтображениеОплатаБонуснымиБаллами(Объект);

	ПродажиСервер.ОбновитьСостояниеЗаказа(Объект.Ссылка, СостояниеЗаказа);
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗакрытиеИнтернетЗаказа"); 
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	СтрокОтменено = 0;
	СтрокЗаполнено = 0;
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл 
		
		Если СтрокаТЧ.Отменено Тогда 
			
			СтрокОтменено = СтрокОтменено + 1;
			
		КонецЕсли;
		
		Если Не СтрокаТЧ.Склад.Пустая() Тогда 
			Если НЕ Объект.ТипДоставки = ПредопределенноеЗначение("Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз") 
					И Не СтрокаТЧ.Самовывоз Тогда
					
				СтрокЗаполнено = СтрокЗаполнено + 1;
				
			ИначеЕсли Не СтрокаТЧ.МагазинПолучатель.Пустая() Тогда
				
				СтрокЗаполнено = СтрокЗаполнено + 1;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	ТекстВопроса = "";
	
	Если Объект.Товары.Количество() = СтрокОтменено
			И Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.Отменён") Тогда 
		
		
		ДополнительныеПараметры = Новый Структура(
			"ВсеОтменены, СтрокиЗаполнены, ПараметрыЗаписи"
			, Истина
			, Ложь
			, ПараметрыЗаписи
		); 
		
		ТекстВопроса = "В документе отменены все строки." + Символы.ПС + "Изменить статус на «Отменено»?";
		
	ИначеЕсли Объект.Товары.Количество() = СтрокЗаполнено
			И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.ВРаботе")
			И Объект.Проведен Тогда 
		
		ДополнительныеПараметры = Новый Структура(
			"ВсеОтменены, СтрокиЗаполнены, ПараметрыЗаписи"
			, Ложь
			, Истина
			,ПараметрыЗаписи
		); 
		
		ТекстВопроса = "В документе заполнены все строки." + Символы.ПС + "Создать «Запрос доступности»?";
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстВопроса) Тогда 
	
	
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьСтатусДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);

		ПоказатьВопрос(ОписаниеОповещения
			, ТекстВопроса
			, РежимДиалогаВопрос.ОКОтмена
			, 60
			, КодВозвратаДиалога.ОК
			, "Изменение статуса документа"
			, КодВозвратаДиалога.Отмена
		);
	
	КонецЕсли; 
	
	ОтобразитьРасчетныеКолонки(Истина);
	
КонецПроцедуры 


&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	СкрыватьОтмененныеСтроки = Настройки.Получить("СкрыватьОтмененныеСтроки");
	
	Если СкрыватьОтмененныеСтроки Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ТоварыСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтроки;
КонецПроцедуры

&НаКлиенте	
Процедура ИзменитьСтатусДокументаЗавершение(КодВозврата, ДополнительныеПараметры)	Экспорт

	Если КодВозврата = КодВозвратаДиалога.ОК Тогда
		
		Если ДополнительныеПараметры.ВсеОтменены Тогда 
			
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.Отменён");
			
		ИначеЕсли ДополнительныеПараметры.СтрокиЗаполнены Тогда 
			
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.ЗапросДоступности");
			
		КонецЕсли;
		
		Записать(ДополнительныеПараметры.ПараметрыЗаписи);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаДокументаИзмененаВручную = Истина;
	
	Если НачалоДня(Объект.Дата) > НачалоДня(Объект.ДатаПродажиЖелаемая) Тогда
		Объект.ДатаПродажиЖелаемая = НачалоДня(Объект.Дата)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПриИзмененииСкладСервер();
		ПересчитатьИлиОтменитьСкидки();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпциюКонтроляАссортимента();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ЗаполнитьСтатусДляВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		ПриИзмененииМагазинСервер();
		ПересчитатьИлиОтменитьСкидки();
	КонецЕсли;
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПересчетНДСТабличнойЧастиСервер();
	ПересчитатьИлиОтменитьСкидки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДисконтнаяКартаПриИзменении(Элемент)
	
	ПриИзмененииДисконтнаяКартаСервер();
	ПересчитатьИлиОтменитьСкидки();
	ЗаполнитьТелефонКлиента();
	ЗаполнитьФИОКлиента();	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьНДСПриИзменении(Элемент)
	
	ПриИзмененииУчитыватьНДССервер();
	ПересчитатьИлиОтменитьСкидки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, , СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ПересчитатьИлиОтменитьСкидки();
		
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

&НаКлиенте	//	LNK 03.02.2021 08:49:41
Процедура СуммаДоставкиОплаченаПриИзменении(Элемент)

	УстановитьОформлениеЭлементов(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ИзмененОтветственный = Истина;
	
	СтандартнаяОбработка = Ложь;
	
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("РежимВыбора", Истина);
	//ПараметрыФормы.Вставить("ТекущаяСтрока", ?(
	//	Объект.Ответственный.Пустая(),
	//	Неопределено,
	//	Объект.Ответственный));
	
	//
	//ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	//ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	//ПараметрыФормы.Вставить("ОтборСотрудниковКЦ", Истина);
	//
	//
	//ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элемент); 
	
	ДанныеВыбора = Новый СписокЗначений;
	ЗаказыПокупателейСервер.ВыборСотрудникаКЦ(ДанныеВыбора, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Объект.Ответственный = ВыбранноеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	ПересчитатьИлиОтменитьСкидки();
	ЗаполнитьТелефонКлиента();
	ЗаполнитьФИОКлиента();	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("КонтрагентЗавершениеВыбора", ЭтотОбъект);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НомерТелефона", НомерТелефонаКлиента);
	//ПараметрыФормы.Вставить("РежимВыбора", Истина);
	//ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	//ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораДляИМ", ПараметрыФормы, Элемент,,,, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОткрытие(Элемент, СтандартнаяОбработка) 
	Если Не ПустаяСтрока(НомерТелефонаКлиента) Тогда 
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОткрытиеКонтрагенте", Истина); 
		
		Оповещение = Новый ОписаниеОповещения("КонтрагентЗавершениеВыбора", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НомерТелефона", НомерТелефонаКлиента);
		ПараметрыФормы.Вставить("ПросмотрКлиента", Истина);
		//ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
		//ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
		
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораДляИМ", ПараметрыФормы, Элемент,,,, Оповещение); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентЗавершениеВыбора(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Не ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Объект.Контрагент = Результат.Контрагент;
		Иначе 
			Объект.Контрагент = "";
		КонецЕсли;
	КонецЕсли;
	
	КонтрагентПриИзмененииНаСервере();
	ПересчитатьИлиОтменитьСкидки();
	ЭтаФорма.ОбновитьОтображениеДанных();
	Элементы.Контрагент.ОбновитьТекстРедактирования();
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		УправляемыеСкидки = Результат;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
		СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
		
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
			РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
		Иначе
			РабочееМесто = ""
		КонецЕсли;
		
		СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
		
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);

		ОбновитьИтоговыеПоказатели(ЭтотОбъект);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Скидки (наценки)'"),
			,
			НСтр("ru = 'Скидки (наценки) рассчитаны'"),
			БиблиотекаКартинок.Информация32
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(Результат);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(Результат, "RUB");
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

		ОбновитьИтоговыеПоказатели(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросРассчитатьИОткрытьСкидки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	//Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
	//	ЭтотОбъект.Модифицированность = Истина;
	//	РассчитатьСкидкиНаценкиКлиент();
	//	ОткрытьИнформациюОСкидкахЗавершитьОбработкуВопроса();
	//КонецЕсли;
	//
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыдатьПодаркиНаВыбор(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат <> Неопределено Тогда
		ВыдатьПодаркиНаВыборНаСервере(Результат, ДополнительныеПараметры);
	КонецЕсли;

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		?(Объект.Ссылка.Пустая(), "", ПолучитьНавигационнуюСсылку(Объект.Ссылка)),
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораВидаЦены(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(РезультатОткрытияФормы) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(РезультатОткрытияФормы);
		ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, РезультатОткрытияФормы);
		ПересчитатьИлиОтменитьСкидки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуОтменыВыделенныхСтрок(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(РезультатОткрытияФормы) Тогда
		
		ПричинаОтмены = РезультатОткрытияФормы;
		ЗавершитьОтменуВыделенныхСтрок();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуОтменыВыделенныхНеЗарезервированныхСтрок(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(РезультатОткрытияФормы) Тогда
		
		ПричинаОтмены = РезультатОткрытияФормы;
		ЗавершитьОтменуВыделенныхНеЗарезервированныхСтрок();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуОтменыНепроданныхТоваров(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(РезультатОткрытияФормы) Тогда
		
		ПричинаОтмены = РезультатОткрытияФормы;
		ЗавершитьОтменуНепроданныхТоваров();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеРазбитьСтроку(Количество, ДополнительныеПараметры) Экспорт
	
	НоваяСтрока = ДополнительныеПараметры.НоваяСтрока;
	Если НоваяСтрока = Неопределено Тогда
		ОбработкаТабличнойЧастиТоварыКлиент.РазбитьСтрокуТЧПроверитьЧисло(Количество, ДополнительныеПараметры);
	КонецЕсли;
	
	НоваяСтрока = ДополнительныеПараметры.НоваяСтрока;
	Если НЕ НоваяСтрока = Неопределено Тогда
		ТекущаяСтрока              = ДополнительныеПараметры.ТекущаяСтрока;
		НоваяСтрока.КодСтроки = 0;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(НоваяСтрока, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		
		ПересчитатьИлиОтменитьСкидки();
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	//Если НЕ ПустаяСтрока(Штрихкод) Тогда
	//	СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
	//	ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	//Если Не ПустаяСтрока(ТекКод) Тогда
	//	СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
	//	ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	//Если Результат <> Неопределено Тогда
	//	ОбработатьДанныеПоКодуСервер(Результат);
	//	ОбработатьДанныеПоКодуКлиент(Результат)
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	//СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	//Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) 
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаВесовыхТоваров");
	СтруктураДействий.Вставить("ПроверкаТоваров");
	СтруктураДействий.Вставить("ПроверкаСерийныхНомеров");
	
	СтруктураПараметровДействия = Новый Структура;
	СтруктураПараметровДействия.Вставить("РегистрацияНовойКарты", Истина);
	СтруктураДействий.Вставить("ПроверкаКарт", СтруктураПараметровДействия);
	
	Возврат ПодключаемоеОборудованиеРТ.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	Если СтрокаРезультата.Свойство("Карта") Тогда
		Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
			Объект.Продавец = СтрокаРезультата.ВладелецКарты;
		Иначе
			Объект.ДисконтнаяКарта = СтрокаРезультата.Карта;
			СтруктураРезультат.Вставить("НайденаДисконтнаяКарта");
		КонецЕсли;
		Модифицированность = Истина;
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		
	Иначе // Номенклатура.
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод) Экспорт
	
	//ОткрытаБлокирующаяФорма = Ложь;
	//
	//Если СтруктураПараметровКлиента.Свойство("НайденаДисконтнаяКарта") Тогда
	//	
	//	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
	//		
	//		ДисконтнаяКартаПриИзменении(Неопределено);
	//		
	//	КонецЕсли;
	//	
	//Иначе
	//	
	//	//ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	//
	//КонецЕсли;
	//
	//Если НЕ ОткрытаБлокирующаяФорма Тогда
	//	ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	//КонецЕсли;  
	
	Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") 
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
		
		СтрокаСообщения = НСтр("ru = 'Данные по коду не найдены: %1%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекКод);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ТекстПредупреждения") Тогда
		
		ПоказатьПредупреждение(, СтруктураПараметровКлиента.ТекстПредупреждения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойКарты") Тогда
		
		Если ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(СтруктураПараметровКлиента.ТекстВопросаНовойКарты) Тогда
			
			ИнформационнаяКарта = ИнформационныеКарты.СоздатьДисконтнуюКарту(СтруктураПараметровКлиента.РегистрацияНовойКарты);
			ИнформационныеКартыКлиент.ОповеститьОСозданииНовойКарты(ИнформационнаяКарта); 
			
			Если ЗначениеЗаполнено(ИнформационнаяКарта) Тогда
				Объект.ДисконтнаяКарта = ИнформационнаяКарта;
				Модифицированность = Истина;
				ДисконтнаяКартаПриИзменении(Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	//ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойКартыВыборШаблона") Тогда
	//	
	//	Если ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(СтруктураПараметровКлиента.ТекстВопросаНовойКарты) Тогда
	//		
	//		ВыбранноеЗначение = ОткрытьФормуМодально("РегистрСведений.ШаблоныРегистрацииНовыхКарт.Форма.ШаблоныНовыхКарт", Новый Структура("АдресШаблоновВХранилище", СтруктураПараметровКлиента.РегистрацияНовойКартыВыборШаблона), ЭтотОбъект);
	//		Если ВыбранноеЗначение <> Неопределено Тогда
	//		
	//			ИнформационнаяКарта = ДобавитьНайденныеИнформационныеКарты(ВыбранноеЗначение, СтруктураПараметровКлиента.РегистрацияНовойКартыВыборШаблона);
	//			ИнформационныеКартыКлиент.ОповеститьОСозданииНовойКарты(ИнформационнаяКарта); 
	//			
	//			Если ЗначениеЗаполнено(ИнформационнаяКарта) Тогда
	//				Объект.ДисконтнаяКарта = ИнформационнаяКарта;
	//				Модифицированность = Истина;
	//				ДисконтнаяКартаПриИзменении(Неопределено);
	//			КонецЕсли;
	//			
	//		КонецЕсли;

	//	КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ВыборТоваров") Тогда
		
		ВыбранноеЗначение = ОткрытьФормуМодально("ОбщаяФорма.ВыборНоменклатуры", Новый Структура("АдресТоваровВХранилище", СтруктураПараметровКлиента.ВыборТоваров));
		Если ВыбранноеЗначение <> Неопределено Тогда
			
			ДобавитьНайденныеПозицииТоваров(ВыбранноеЗначение);
			
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ВыборКарт") Тогда
		
		ВыбранноеЗначение = ОткрытьФормуМодально("ОбщаяФорма.ВыборИнформационнойКарты", Новый Структура("АдресКартВХранилище", СтруктураПараметровКлиента.ВыборКарт));
		Если ВыбранноеЗначение <> Неопределено Тогда
			
			Объект.ДисконтнаяКарта = ВыбранноеЗначение.ИнформационнаяКарта;
			Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
				ДисконтнаяКартаПриИзменении(Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("НайденаДисконтнаяКарта") Тогда
		
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			
			ДисконтнаяКартаПриИзменении(Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	//Результат = ПодключаемоеОборудованиеРТВызовСервера.ОбработатьДанныеПоНоменклатуреИзТСДСервер(ЭтотОбъект, СтруктураПараметров);
	//Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	//
	//ДобавленаСтрока = Ложь;
	////ТекущаяСтрока = ПодключаемоеОборудованиеРТВызовСервера.ИнициализацияСтрокиТоваров(ЭтотОбъект, СтруктураПараметров, ДобавленаСтрока);
	//
	//СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	//СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	//СтруктураДействий.Вставить("ПересчитатьСумму");
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	//
	//Если ДобавленаСтрока Тогда
	//	СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
	//	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	//	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВШапке(Объект));
	//	Если ИспользоватьАссортимент Тогда
	//		СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", АссортиментКлиентСервер.ПараметрыПроверкиАссортимента(Объект, Истина));
	//	КонецЕсли;
	//	СтруктураДействий.Вставить("ПроверитьЗапретРозничнойПродажи", СкидкиНаценкиКлиентСервер.ПараметрыПроверкиЗапретаРозничнойПродажи(Объект));
	//	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	//	СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента");
	//КонецЕсли;
	//
	//ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ЗавершениеОбработкиСтрокиТоваров(ЭтотОбъект, ТекущаяСтрока, СтруктураДействий);
	//
	//Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(МассивНомеров) 
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура",МассивНомеров[0].Владелец); 
	МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураОтбора);
	СтруктураДействий = Новый Структура;
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		ТекущаяСтрока = МассивСтрок[0];
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("СерийныйНомер", МассивНомеров[0]);
		Если Объект.СерийныеНомера.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + 1;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловНачислено", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомБонусныхБалловСписано", Новый Структура("Очищать", Истина));
		
		СтрокаСерийныхНомеров = Объект.СерийныеНомера.Добавить();
		СтрокаСерийныхНомеров.СерийныйНомер            = МассивНомеров[0];
		СтрокаСерийныхНомеров.КлючСвязиСерийныхНомеров = ТекущаяСтрока.КлючСвязиСерийныхНомеров;

	Иначе
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ТекущаяСтрока.Количество = 1;
		ТекущаяСтрока.КоличествоУпаковок = 1;
		ТекущаяСтрока.Номенклатура = МассивНомеров[0].Владелец;
		ТекущаяСтрока.КлючСвязиСерийныхНомеров = ОбработкаТабличнойЧастиТоварыСервер.ДобавитьСерийныеНомераВТабличнуюЧасть(Объект.СерийныеНомера, МассивНомеров, 0);
		
		СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		СтруктураПараметровДействия = Новый Структура;
		СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
		СтруктураПараметровДействия.Вставить("РабочееМесто", РабочееМесто);
		СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДействия);
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект,, Истина));
		СтруктураПараметровСтавкиНДС = Новый Структура;
		СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
		СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
		
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
	КонецЕсли;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	Объект.СкидкиРассчитаны = Ложь;
	
	Модифицированность = Истина;
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ДанныеСтрокиПередИзменением = ОбработкаТабличнойЧастиТоварыКлиент.СкопироватьВСтруктуруЭлементКоллекции(ТекущаяСтрока, Объект.Товары);

	Если НоваяСтрока Тогда

		ТекущаяСтрока.КодСтроки = 0;

	КонецЕсли;
	
	Если Копирование Тогда
		
		ТекущаяСтрока.СуммаАвтоматическойСкидки   = 0;
		ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;

		ТекущаяСтрока.КлючСвязиБонусныхБаллов		= 0;
		ТекущаяСтрока.СуммаБонусныхБалловНачислено	= 0;
		ТекущаяСтрока.СуммаБонусныхБалловСписано	= 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	БонусныеБаллыКлиент.ТоварыПриОкончанииРедактирования(ТекущиеДанные, ДанныеСтрокиПередИзменением, Объект, ОтменаРедактирования);	//	LNK 04.07.2021 07:48:28

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);

	Если ПропуститьАвтоматическийРасчетСкидок Тогда

		ПропуститьАвтоматическийРасчетСкидок = Ложь;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 18.06.2021 13:50:46
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Отказ = Не Объект.Ссылка.Пустая();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	Если НЕ ТекущиеДанные = Неопределено Тогда

		БонусныеБаллыКлиент.ТоварыПередУдалением(ТекущиеДанные, Объект, Отказ);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ПроверитьФлагРезервирования");
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"   , ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	
	СтруктураПараметровСтавкиНДС = Новый Структура;
	СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
	СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
	СтруктураПараметровСтавкиНДС.Вставить("Склад"      , Объект.Склад);
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", СтруктураПараметровСтавкиНДС);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	Если ИспользоватьАссортимент Тогда
		СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", АссортиментКлиентСервер.ПараметрыПроверкиАссортимента(Объект, Истина));
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	Если ПропуститьАвтоматическийРасчетСкидок Тогда
		ПропуститьАвтоматическийРасчетСкидок = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи",ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС" , ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
// +HVOYA. 2016-09-07 Юлия_Ж	
	//ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
// -HVOYA. 2016-09-07 Юлия_Ж	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" , ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ПриИзмененииТоварыКоличестваУпаковок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
			
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтмененоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Не ТекущаяСтрока.Отменено Тогда
		ТекущаяСтрока.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовПокупателей.ПустаяСсылка");
	КонецЕсли;

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) 
	
	Если (Элемент.ТекущийЭлемент = Элементы.ТоварыПроцентАвтоматическойСкидки
		Или Элемент.ТекущийЭлемент = Элементы.ТоварыСуммаАвтоматическойСкидки) 
		И НЕ ТолькоПросмотр Тогда
		
		ОткрытьИнформациюОСкидкахКлиент()
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураКод Тогда 
		Если ПодключитьРасширениеРаботыСФайлами() Тогда 
			
			ЗапуститьПриложение("https://antoshka.ua/" + СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент.ТекущиеДанные.Номенклатура, "Код")));  
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если АвтоматическийРасчетСкидок Тогда
		ПропуститьАвтоматическийРасчетСкидок = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ПересчитатьИлиОтменитьСкидки();
	
	Если Не Объект.ТипДоставки = ПредопределенноеЗначение("Перечисление.ТипДоставкиЗаказПокупателя.Смешаный") Тогда 
		Элемент.ТекущиеДанные.Самовывоз = (Объект.ТипДоставки = ПредопределенноеЗначение("Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз"));
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодарки

&НаКлиенте
Процедура ПодаркиНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Подарки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"   , ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураПараметровДействия = Новый Структура;
	СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
	СтруктураПараметровДействия.Вставить("РабочееМесто", РабочееМесто);
	СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДействия);
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Подарки, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Подарки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Подарки, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// +HVOYA. 2016-09-07 Юлия_Ж
	//ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Подарки.ТекущиеДанные);
	// -HVOYA. 2016-09-07 Юлия_Ж
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Подарки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Подарки, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Подарки.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Подарки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Подарки, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиЦенаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Подарки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Подарки, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиСуммаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Подарки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах");
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Подарки, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
		СтруктураОтбора = Новый Структура("ИспользоватьПриПродаже", Истина);
		ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
		// +HVOYA. 2016-09-07 Юлия_Ж
		//ОбработчикОповещения= Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораВидаЦены", ЭтотОбъект);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		//ОткрытьФорму("Справочник.ВидыЦен.Форма.ФормаВыбора", ПараметрыФормы,ЭтотОбъект,,,, ОбработчикОповещения, Режим);
		// -HVOYA. 2016-09-07 Юлия_Ж
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенам(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
	Иначе	
		
		Если ЗначениеЗаполнено(Объект.Магазин) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенамСервер();
			ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоРозничнымЦенам(ЦеныРассчитаны, Объект.Магазин);
			ПересчитатьИлиОтменитьСкидки();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	// +HVOYA. 2016-09-07 Юлия_Ж
	//ОбработчикОповещения = Новый ОписаниеОповещения("НазначитьАвтоматическиеСкидкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ВыполнитьПредварительныйРасчетСкидокНаСервере());
	//ОткрытьФорму("ОбщаяФорма.НазначениеАвтоматическихУправляемыхСкидокНаценок", ПараметрыФормы, ЭтотОбъект, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	 // -HVOYA. 2016-09-07 Юлия_Ж
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если НЕ СкидкиНаценкиКлиент.ПроверитьНеобходимостьНазначенияРучнойСкидкиНаценки(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДляРучнойСкидки = ПараметрыДляНазначенияРучнойСкидки();
	ДополнительныеПараметры = Новый Структура;
	// +HVOYA. 2016-09-07 Юлия_Ж
	//ОбработчикОповещения = Новый ОписаниеОповещения("НазначитьРучнуюСкидкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	//ОткрытьФорму("ОбщаяФорма.НазначениеРучнойСкидкиНаценки", ПараметрыДляРучнойСкидки, ЭтотОбъект, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	 // -HVOYA. 2016-09-07 Юлия_Ж
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ПродажаПодарка Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахКлиент()
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'реализацию товаров'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
	ПараметрыФормы.Вставить("РежимПодбораСУчетомЗапрещенныхКПродаже", Истина);	//	LNK 31.07.2020 08:54:02
	ПараметрыФормы.Вставить("РежимПодбораСУчетомМинимальныхЦен", Истина);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если НЕ ЕстьПравоИзменятьЦену() Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	КонецЕсли;
	
	Если ИспользоватьАссортимент Тогда
		ПараметрыФормы.Вставить("МагазинАссортимента", Объект.Магазин);
		ПараметрыФормы.Вставить("РежимПодбораСУчетомАссортимента", Истина);
		ПараметрыФормы.Вставить("УсловиеАссортимента", "РазрешеныПродажи");
	КонецЕсли;
	 // +HVOYA. 2016-09-07 Юлия_Ж
	//ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	 // -HVOYA. 2016-09-07 Юлия_Ж
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	Если Не СкидкиНаценкиКлиент.ПроверитьНеобходимостьОтменыРучныхСкидокНаценок(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахКлиент()
	// +HVOYA. 2016-09-07 Юлия_Ж
	//Если Объект.СкидкиРассчитаны Тогда
	//	ОткрытьИнформациюОСкидкахЗавершитьОбработкуВопроса();
	//Иначе
	//	ДополнительныеПараметры = Новый Структура; 
	//	//ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросРассчитатьИОткрытьСкидки", ЭтотОбъект, ДополнительныеПараметры);
	//	ТекстВопроса = НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'");
	//	ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	//КонецЕсли;
	// -HVOYA. 2016-09-07 Юлия_Ж
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;  
	
	КлючСвязиЗапросаДоступностиМакс = 0;
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		КлючСвязиЗапросаДоступностиМакс = Макс(СтрокаТЧ.КлючСвязиЗапросаДоступности, КлючСвязиЗапросаДоступностиМакс);
		
	КонецЦикла;
	
	НоваяСтрока = ОбработкаТабличнойЧастиТоварыКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы);
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КлючСвязи = 0;
		НоваяСтрока.КлючСвязиБонусныхБаллов = 0;
		НоваяСтрока.КлючСвязиЗапросаДоступности = КлючСвязиЗапросаДоступностиМакс + 1;
		НоваяСтрока.Склад = Неопределено;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, НоваяСтрока  , СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	ПересчитатьИлиОтменитьСкидки();

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПодаркиВТовары(Команда)
	
	ПеренестиСкидкиПодаркиВТоварыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'заказ покупателя'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
	ПараметрыФормы.Вставить("РежимПодбораСУчетомЗапрещенныхКПродаже", Истина);	//	LNK 31.07.2020 08:54:02
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти", "Подарки");
	ПараметрыФормы.Вставить("РежимПодбораБезСертификатов", Истина);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если НЕ ЕстьПравоИзменятьЦену() Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	КонецЕсли;
	// +HVOYA. 2016-09-07 Юлия_Ж
	//ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	// -HVOYA. 2016-09-07 Юлия_Ж
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенныеСтроки(Команда)
	// +HVOYA. 2016-09-07 Юлия_Ж
	//Если Не РозничныеПродажиКлиент.НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(Объект.Товары, НСтр("ru='Товары'"), Элементы.Товары.ВыделенныеСтроки) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовПокупателей.ПустаяСсылка");
	//Если ИспользоватьПричиныОтменыЗаказовПокупателей Тогда
	//	
	//	//ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуОтменыВыделенныхСтрок", ЭтотОбъект);
	//	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	//	ОткрытьФорму("Справочник.ПричиныОтменыЗаказовПокупателей.ФормаВыбора",,,,,, ОбработчикОповещения, Режим); 
	//	
	//Иначе
	//	ЗавершитьОтменуВыделенныхСтрок();
	//КонецЕсли;
	// -HVOYA. 2016-09-07 Юлия_Ж
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНеЗарезервированныеСтроки(Команда)
	// +HVOYA. 2016-09-07 Юлия_Ж
	//Если Не РозничныеПродажиКлиент.НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(Объект.Товары, НСтр("ru='Товары'"), Элементы.Товары.ВыделенныеСтроки) Тогда
	//	Возврат;
	//КонецЕсли;
	
	//ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовПокупателей.ПустаяСсылка");
	//Если ИспользоватьПричиныОтменыЗаказовПокупателей Тогда
	//	
		//ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуОтменыВыделенныхНеЗарезервированныхСтрок", ЭтотОбъект);
	//	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	//	ОткрытьФорму("Справочник.ПричиныОтменыЗаказовПокупателей.ФормаВыбора",,,,,, ОбработчикОповещения, Режим); 
	//	
	//Иначе
	//	ЗавершитьОтменуВыделенныхНеЗарезервированныхСтрок()
	//КонецЕсли;
// -HVOYA. 2016-09-07 Юлия_Ж	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНепроданныеТовары(Команда)
	// +HVOYA. 2016-09-07 Юлия_Ж
	//Если Не РозничныеПродажиКлиент.НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(Объект.Товары, НСтр("ru='Товары'"), Элементы.Товары.ВыделенныеСтроки) Тогда
	//	Возврат;
	//КонецЕсли;
	
	//ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовПокупателей.ПустаяСсылка");
	//Если ИспользоватьПричиныОтменыЗаказовПокупателей Тогда
	//	
	//	//ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуОтменыНепроданныхТоваров", ЭтотОбъект);
	//	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	//	ОткрытьФорму("Справочник.ПричиныОтменыЗаказовПокупателей.ФормаВыбора",,,,,, ОбработчикОповещения, Режим); 
	//	
	//Иначе
	//	ЗавершитьОтменуНепроданныхТоваров();
	//КонецЕсли;
	// -HVOYA. 2016-09-07 Юлия_Ж
КонецПроцедуры

&НаКлиенте
Процедура СкрыватьОтмененныеСтроки(Команда)
	
	СкрыватьОтмененныеСтроки = Не СкрыватьОтмененныеСтроки;
	
	Если СкрыватьОтмененныеСтроки Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ТоварыСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура РезервироватьПоДаннымОстатков(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%.'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", НСтр("ru = 'Товары'"));
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрокРезервирования = РезервироватьПоДаннымОстатковСервер();
	
	ПодключитьОбработчикОжидания("ОповеститьОбРезервировании", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	УстановитьДоступностьЭлементовПоСтатусуСервер(Истина);
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	РазвернутьСвернутьТЧНаСервере();
КонецПроцедуры

// +HVOYA. 2016-09-07 Юлия_Ж
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	//Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	//КонецЕсли;
	
КонецПроцедуры
// -HVOYA. 2016-09-07 Юлия_Ж

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	// +HVOYA. 2016-09-07 Юлия_Ж
	//УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	// -HVOYA. 2016-09-07 Юлия_Ж
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	//ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура("ВыбиратьНенайденные", Ложь);
	ДополнительныеПараметры.Вставить("УчитыватьСерийныеНомераПриСвертке", Ложь);
	// +HVOYA. 2016-09-07 Юлия_Ж
	//ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);
	// -HVOYA. 2016-09-07 Юлия_Ж
	ПересчитатьИлиОтменитьСкидки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	// +HVOYA. 2016-09-07 Юлия_Ж
	//ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
// -HVOYA. 2016-09-07 Юлия_Ж	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	Если ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекШтрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекШтрихкод);
				
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТелефонКлиента()
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаКонтакты.НомерТелефона КАК НомерТелефона
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтакты
		|ГДЕ
		|	ТаблицаКонтакты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|	И ТаблицаКонтакты.Ссылка = &Ссылка"
		);
	Запрос.УстановитьПараметр("Ссылка", Объект.Контрагент);
	
	Результат = Запрос.Выполнить();
	Найден    = НЕ Результат.Пустой();

	Если Найден Тогда

		СписокТелефонов = Результат.Выгрузить().ВыгрузитьКолонку("НомерТелефона");

		НомерТелефонаКлиента = СписокТелефонов[0]; 
		
	Иначе 
		
		НомерТелефонаКлиента = "";
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ВозможностьВводаПоШК()
	
	Результат = Истина;
	
	Если Элементы.Товары.ТолькоПросмотр Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Если НЕ Результат Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Форма заблокирована. Ввод невозможен.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	 // +HVOYA. 2016-09-07 Юлия_Ж
	//ЭтотОбъект.ПоложениеКоманднойПанели               = ?(ВидимостьЭлементов, ПоложениеКоманднойПанелиФормы.Авто, ПоложениеКоманднойПанелиФормы.Нет);
	// -HVOYA. 2016-09-07 Юлия_Ж
	Элементы.Шапка.Видимость                          = ВидимостьЭлементов;
	
	Элементы.РазвернутьСвернутьТЧ.Картинка = ?(ВидимостьЭлементов, БиблиотекаКартинок.РазвернутьТабличнуюЧасть, БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
КонецПроцедуры

// Функция заполняет цену выделенных строк по виду цен в ТЧ Товары.
//
//  Возвращаемое значение - Булево - Цены рассчитаны.
&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦены)
	
	СтруктураПараметров                                          = ЗапасыСервер.СтруктураПараметровЗаполненияПоВидуЦен();
	СтруктураПараметров.Объект                                   = Объект;
	СтруктураПараметров.ИмяТабличнойЧасти                        = "Товары";
	СтруктураПараметров.ВидЦен                                   = ВидЦены;
	СтруктураПараметров.ВыделенныеСтроки                         = Элементы.Товары.ВыделенныеСтроки;
	СтруктураПараметров.Дата                                     = ЗапасыСервер.ДатаДляЦенообразованияДляДокумента(Объект);
	СтруктураПараметров.НеобходимостьПересчетаСуммыСУчетомСкидок = Истина;
	
	ЦеныРассчитаны = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(СтруктураПараметров);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Функция заполняет цену выделенных строк по розничным ценам в ТЧ Товары.
//
//  Возвращаемое значение - Булево - Цены рассчитаны.
&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенамСервер()
	
	СтруктураПараметров                                          = ЗапасыСервер.СтруктураПараметровЗаполненияПоРозничнымЦенам();
	СтруктураПараметров.Объект                                   = Объект;
	СтруктураПараметров.ИмяТабличнойЧасти                        = "Товары";
	СтруктураПараметров.Магазин                                  = Объект.Магазин;
	СтруктураПараметров.ВыделенныеСтроки                         = Элементы.Товары.ВыделенныеСтроки;
	СтруктураПараметров.Дата                                     = ЗапасыСервер.ДатаДляЦенообразованияДляДокумента(Объект);
	СтруктураПараметров.ПриводитьКМинимальнойЦене                = Истина;
	СтруктураПараметров.НеобходимостьПересчетаСуммыСУчетомСкидок = Истина;
	
	ЦеныРассчитаны  = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенам(СтруктураПараметров);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()

	АдминистративныйДоступ = РольДоступна(Метаданные.Роли.АдминистраторСистемы) И ТехническаяПоддержкаВызовСервера.ИсключительныйРежим();

	Если НЕ АдминистративныйДоступ Тогда

		ТолькоПросмотр = Истина;

	Иначе

		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСуммаРучнойСкидки.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);

		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыПроцентРучнойСкидки.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);

		УправлениеПользователями.УстановитьДоступностьДляРеквизитовТабличнойЧасти(Элементы.ТоварыНазначитьРучнуюСкидку.Доступность, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);
		
		УправлениеПользователями.УстановитьДоступностьДляРеквизитовТабличнойЧасти(Элементы.ТоварыОтменитьРучныеСкидки.Доступность, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);
		
		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыЦена.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСумма.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ПодаркиЦена.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ПодаркиСумма.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
		
		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Продавец.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьПродавца);

		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыПродавец.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьПродавца);

		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
	//	LNK 04.01.2017 13:54:53
	//Криворучко
		Если НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() = Истина Тогда

			УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Номер.ТолькоПросмотр,
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьНомерДокумента);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура заполняет товары из подбора.
// Параметры: 
//  ВыбранноеЗначение - Структура
&НаСервере
Функция ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТабличнойЧасти  = "")
	
	СтрокиИзменены = Ложь;
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	ИмяТабличнойЧасти = ?(ПустаяСтрока(ИмяТабличнойЧасти), "Товары", ИмяТабличнойЧасти);
	ТаблицаСерийныхНомеров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресСерийныхНомеровВХранилище);
	ЕстьСерийныеНомера = (ИмяТабличнойЧасти = "Товары") И (ТаблицаСерийныхНомеров.Количество() > 0);
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, Упаковка, Цена, КоличествоУпаковок");
		Если ЕстьСерийныеНомера Тогда
			МассивСерийныхНомеров = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(СтрокаТовара.КлючСвязиСерийныхНомеров , ТаблицаСерийныхНомеров);
			ТекущаяСтрока.КлючСвязиСерийныхНомеров = ОбработкаТабличнойЧастиТоварыСервер.ДобавитьСерийныеНомераВТабличнуюЧасть(Объект.СерийныеНомера, МассивСерийныхНомеров, 0);
		КонецЕсли;
		СтруктураДействий = Новый Структура;

		Если ИмяТабличнойЧасти = "Товары" Тогда
			
			СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
			СтруктураПараметровСтавкиНДС = Новый Структура;
			СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
			СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
			СтруктураПараметровСтавкиНДС.Вставить("Склад"      , Объект.Склад);
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", СтруктураПараметровСтавкиНДС);
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
			
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			
			СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
		ИначеЕсли ИмяТабличнойЧасти = "Подарки" Тогда
			ТекущаяСтрока.Склад = Объект.Склад;
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		СтрокиИзменены = Истина;
		
	КонецЦикла;
	 // +HVOYA. 2016-09-07 Юлия_Ж
	//ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект[ИмяТабличнойЧасти]);
	 // -HVOYA. 2016-09-07 Юлия_Ж
	Если ИмяТабличнойЧасти = "Товары" Тогда

		ОбновитьИтоговыеПоказатели(ЭтотОбъект);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакЕстьПродажиПоСтроке(Объект.Ссылка, Объект.Товары);

	КонецЕсли;
	
	Возврат СтрокиИзменены;
	
КонецФункции

&НаСервере
Процедура ПересчетНДСТабличнойЧастиСервер()
	
	СтруктураДействий = Новый Структура;
	
	СтруктураПараметровСтавкиНДС = Новый Структура;
	СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
	СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
	СтруктураПараметровСтавкиНДС.Вставить("Склад"      , Объект.Склад);
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", СтруктураПараметровСтавкиНДС);
	
	СтруктураПараметровПересчетаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПараметровПересчетаНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПараметровПересчетаНДС);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	Объект.СкидкиРассчитаны = Ложь;
	
КонецПроцедуры

// Процедура- обработчик изменения дисконтная карта на сервере.
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ПриИзмененииДисконтнаяКартаСервер()
	
	Объект.Контрагент = Объект.ДисконтнаяКарта.ВладелецКарты;
	Объект.ВладелецДисконтнойКарты = Объект.Контрагент;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	Объект.ДисконтнаяКарта = Справочники.ИнформационныеКарты.НайтиПоРеквизиту("ВладелецКарты", Объект.Контрагент);
	Объект.ВладелецДисконтнойКарты = Объект.Контрагент; 
	ЗаполнитьФИОКлиента();
	ЗаполнитьТелефонКлиента();
	
КонецПроцедуры

// Процедура заполняет склад при изменении магазина.
//
&НаСервере
Процедура ПриИзмененииМагазинСервер()
	
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпциюКонтроляАссортимента();
	
	Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПродажиПоУмолчанию(Объект.Магазин,,Объект.Склад, Пользователи.ТекущийПользователь());
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПриИзмененииСкладСервер();
	КонецЕсли;
	
КонецПроцедуры

// Процедура- обработчик изменения склада на сервере.
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ПриИзмененииСкладСервер()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Объект.Организация = Объект.Склад.Организация;
		
	КонецЕсли;
	
	ПересчетНДСТабличнойЧастиСервер();
	
КонецПроцедуры

// Обрабатывает изменение количества упаковок.
//
// Параметры:
//  Нет;
//
&НаКлиенте
Процедура ПриИзмененииТоварыКоличестваУпаковок()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

// Заполняет реквизиты документа по умолчанию в зависимости от выбранного налогообложения НДС.
//
&НаСервере
Процедура ПриИзмененииУчитыватьНДССервер()
	
	УстановитьДоступностьЦенаВключаетНДС(Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  Объект.УчитыватьНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	УстановитьТекущуюСтраницуСуммПодвала();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыДляНазначенияРучнойСкидки()
	
	Возврат СкидкиНаценкиСервер.ПараметрыДляНазначенияРучнойСкидки(Объект);
	
КонецФункции

// Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора.
// Параметры:
//  Отказ - Булево
//
&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин"" не заполнено'"), Объект, "Объект.Магазин",,Отказ);
	КонецЕсли;
		
КонецПроцедуры

// Процедура управляет видимостью и доступностью элементов формы на сервере.
//
&НаСервере
Процедура УстановитьДоступностьЭлементовНаСервере(ТолькоПросмотрЭлементов)

	Если НЕ ТолькоПросмотрЭлементов Тогда

		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Склад", "ТолькоПросмотр", НЕ ЗначениеЗаполнено(Объект.Магазин));
		
		ДоступностьРезервирования = Объект.Проведен И Объект.Статус = Перечисления.СтатусыЗаказовПокупателей.Согласован И Объект.НаличиеНезарезервированныхСтрок;
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
																	   "ТоварыРезервироватьПоДаннымОстатков", 
																	   "Доступность", 
																	   ДоступностьРезервирования);
   КонецЕсли; 
   
   ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Контрагент", "ТолькоПросмотр", НЕ Объект.Ссылка.Пустая());
   ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДисконтнаяКарта", "ТолькоПросмотр", НЕ Объект.Ссылка.Пустая());

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер(РазрешитьРедактирование = Ложь)
	
	ТолькоПросмотрЭлементов = (Объект.Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт)
							Или (Объект.Статус = Перечисления.СтатусыЗаказовПокупателей.Новый);

	//ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Статус", "ТолькоПросмотр", Не ДокументСотрудникаКЦ);
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ответственный", "ТолькоПросмотр", Не ЯвляетсяСуперВайзером);
	
	Если РазрешитьРедактирование ИЛИ ТехническаяПоддержкаВызовСервера.ОтладочныйРежимРаботы() Или ЯвляетсяСуперВайзером Тогда

		ТолькоПросмотрЭлементов = Ложь;
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Статус", "ТолькоПросмотр", Ложь);
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ответственный", "ТолькоПросмотр", Ложь);

	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
		
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Номер");
	МассивЭлементов.Добавить("ДисконтнаяКарта");
	МассивЭлементов.Добавить("Продавец");
	МассивЭлементов.Добавить("ДатаПродажиЖелаемая");
	МассивЭлементов.Добавить("Магазин");
	МассивЭлементов.Добавить("Склад");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("ТипДоставки");
	МассивЭлементов.Добавить("Ответственный");
	//МассивЭлементов.Добавить("Комментарий");
	МассивЭлементов.Добавить("УчитыватьНДС");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("АдресДоставки");
	МассивЭлементов.Добавить("Товары");
	МассивЭлементов.Добавить("Скидки");
	МассивЭлементов.Добавить("НачислениеБонусныхБаллов");
	МассивЭлементов.Добавить("ОплатаБонуснымиБаллами");
	МассивЭлементов.Добавить("СтраницаДополнительно");
	МассивЭлементов.Добавить("Подарки");
	МассивЭлементов.Добавить("Подарки");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", ТолькоПросмотрЭлементов);
	
	МассивЭлементов = Новый Массив;
	
	МассивЭлементов.Добавить("ТоварыРазбитьСтроку");
	МассивЭлементов.Добавить("ТоварыПоискПоШтрихкоду");
	МассивЭлементов.Добавить("ТоварыВыгрузитьДанныеВТСД");
	МассивЭлементов.Добавить("ТоварыЗагрузитьДанныеИзТСД");
	МассивЭлементов.Добавить("ТоварыПоискПоМагнитномуКоду");
	МассивЭлементов.Добавить("ТоварыОткрытьПодбор");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоРозничнымЦенам");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоВидуЦен");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенам");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦен");
	МассивЭлементов.Добавить("ТоварыРассчитатьСкидкиНаценки");
	МассивЭлементов.Добавить("ТоварыНазначитьАвтоматическиеСкидки");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("ТоварыОткрытьИнформациюОСкидках");
	МассивЭлементов.Добавить("ТоварыРезервироватьПоДаннымОстатков");
	МассивЭлементов.Добавить("ТоварыОтменитьВыделенныеСтроки");
	МассивЭлементов.Добавить("ТоварыОтменитьНезарезервированныеСтроки");
	МассивЭлементов.Добавить("ТоварыОтменитьНеПроданныеТовары");
	МассивЭлементов.Добавить("ТоварыСкрыватьОтмененныеСтроки");
	МассивЭлементов.Добавить("ПодаркиОткрытьПодбор");
	МассивЭлементов.Добавить("ПодаркиПеренестиПодаркиВТовары");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Не ТолькоПросмотрЭлементов);
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Изменить", "Доступность", ТолькоПросмотрЭлементов);
	
	УстановитьДоступностьЭлементовНаСервере(ТолькоПросмотрЭлементов);
	
КонецПроцедуры

// Устанавливает доступность поля ЦенаВключаетНДС.
//
&НаСервере
Процедура УстановитьДоступностьЦенаВключаетНДС(ПриИзменении = Ложь)

	Если ПриИзменении И Не Объект.УчитыватьНДС И Объект.ЦенаВключаетНДС Тогда
		Объект.ЦенаВключаетНДС = Ложь;
	ИначеЕсли ПриИзменении И Объект.УчитыватьНДС Тогда
		Объект.ЦенаВключаетНДС = Истина;
	КонецЕсли;
	
	Элементы.ЦенаВключаетНДС.ТолькоПросмотр = Не Объект.УчитыватьНДС;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Склад", "ТолькоПросмотр", НЕ ЗначениеЗаполнено(Объект.Магазин));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста	//	LNK 03.02.2021 08:54:30
Процедура УстановитьОформлениеЭлементов(Форма)

	Форма.Элементы.ДекорацияСуммаДоставкиОплачена.Картинка = ?(Форма.Объект.СуммаДоставкиОплачена
		, БиблиотекаКартинок.КолокольчикЖелтый
		, БиблиотекаКартинок.КолокольчикНеактивный);

КонецПроцедуры

// Процедура учитывает изменение параметров налогообложения в документе.
//
&НаСервере
Процедура УстановитьТекущуюСтраницуСуммПодвала()
	
	Если Объект.УчитыватьНДС Тогда
		Элементы.ГруппаПодвалСтраницы.ТекущаяСтраница = Элементы.ГруппаСуммыНДС;
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаВсего", "Видимость", Истина);
	Иначе
		Элементы.ГруппаПодвалСтраницы.ТекущаяСтраница = Элементы.ГруппаСуммы;
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаВсего", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьПравоИзменятьЦену()
	
	Возврат УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Скидки

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров",		Ложь);
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	СтруктураПараметры.Вставить("ДатаРасчета" , Объект.Дата);	//	LNK 19.05.2021 07:36:49
	
	СведенияДокумента = Новый Структура;
	СегментИсключаемойНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "СегментИсключаемойНоменклатуры");
	СведенияДокумента.Вставить("СегментИсключаемойНоменклатуры", СегментИсключаемойНоменклатуры);
	СведенияДокумента.Вставить("Товары", Объект.Товары);
	СтруктураПараметры.Вставить("СведенияДокумента", СведенияДокумента);
	
	ДанныеРасчетаСкидок = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеРасчетаСкидок, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПоместитьСкидкиВХранилище()

	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("СкидкиНаценки", Объект.СкидкиНаценки.Выгрузить());
	СтруктураТаблиц.Вставить("Подарки", Объект.Подарки.Выгрузить());
	СтруктураТаблиц.Вставить("НачислениеБонусныхБаллов", Объект.НачислениеБонусныхБаллов.Выгрузить());
	
	Адрес = ПоместитьВоВременноеХранилище(СтруктураТаблиц, УникальныйИдентификатор);
	
	Возврат Адрес;

КонецФункции

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахЗавершитьОбработкуВопроса()
	
	АдресСкидок = ПоместитьСкидкиВХранилище();
	// +HVOYA. 2016-09-07 Юлия_Ж
	//СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(Элементы.Товары.ТекущиеДанные, Объект, ЭтотОбъект, АдресСкидок);
// -HVOYA. 2016-09-07 Юлия_Ж	
КонецПроцедуры

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина);
	
КонецПроцедуры

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки)
	
	Если СуммаСкидкиНаценки <> 0 Тогда
		СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, Истина);
	Иначе
		СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиСкидкиПодаркиВТоварыСервер()
	
	ЕстьОшибки = Ложь;
	СкидкиНаценкиСерверПереопределяемый.СообщитьОбОстающихсяПодарках(Объект, ЕстьОшибки);
	Если НЕ ЕстьОшибки Тогда
		СкидкиНаценкиСерверПереопределяемый.ПеренестиСкидкиПодаркиВТовары(Объект, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		// +HVOYA. 2016-09-07 Юлия_Ж
		//ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		//ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
		// -HVOYA. 2016-09-07 Юлия_Ж
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакЕстьПродажиПоСтроке(Объект.Ссылка, Объект.Товары);

		СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
		БонусныеБаллыСервер.ОбновитьОтображениеОплатаБонуснымиБаллами(Объект);

		ОбновитьИтоговыеПоказатели(ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	СтруктураПараметры.Вставить("ПеренестиСкидкиПодаркиВТовары");
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров",		Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ДатаДокументаИзмененаВручную Тогда
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
	Если ПустаяСтрока(АдресПримененныхСкидокВоВременномХранилище) Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Скидки (наценки)'"),
			?(Объект.Ссылка.Пустая(), "", ПолучитьНавигационнуюСсылку(Объект.Ссылка)),
			НСтр("ru = 'Отказано! Скидки (наценки) НЕ рассчитаны'"),
			БиблиотекаКартинок.Ошибка32);

	Иначе

		Если ВыдатьПодаркиНаВыбор
			И ЗначениеЗаполнено(АдресПодарковНаВыбор) Тогда
			ДополнительныеПараметры = Новый Структура;
			// +HVOYA. 2016-09-07 Юлия_Ж
			//ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВыдатьПодаркиНаВыбор", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресПодарковНаВыбор);
			//ОткрытьФорму("ОбщаяФорма.ПодаркиНаВыбор",
			//	ПараметрыФормы,
			//	ЭтотОбъект,
			//	,
			//	,
			//	,
			//	ОбработчикОповещения,
			//	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			// -HVOYA. 2016-09-07 Юлия_Ж
		Иначе

			ОповещениеВыдатьПодаркиНаВыбор();

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	СтруктураПараметры.Вставить("ДатаРасчета", Объект.Дата);	//	LNK 19.05.2021 07:36:49
	ДанныеРасчетаСкидок = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	Если ТипЗнч(ДанныеРасчетаСкидок) = Тип("Массив") Тогда

		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ДанныеРасчетаСкидок, УникальныйИдентификатор);
		
		Если ДанныеРасчетаСкидок[0].Результаты.Свойство("ТаблицаПодарковНаВыбор") Тогда
			АдресПодарковНаВыбор = ПоместитьВоВременноеХранилище(ДанныеРасчетаСкидок[0].Результаты.ТаблицаПодарковНаВыбор, УникальныйИдентификатор);
			ВыдатьПодаркиНаВыбор = Истина;
		Иначе
			АдресПодарковНаВыбор = "";
			ВыдатьПодаркиНаВыбор = Ложь;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
		БонусныеБаллыСервер.ОбновитьОтображениеОплатаБонуснымиБаллами(Объект);
		
		Если НЕ Объект.СкидкиРассчитаны Тогда
		
			Объект.СкидкиРассчитаны = Истина;
		
		КонецЕсли;

	Иначе

		АдресПримененныхСкидокВоВременномХранилище = "";

	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура ПередЗаписьюКлиент(Отказ, ПараметрыЗаписи)
	
	// Если документ проводится, рассчитаем скидки.
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	
		Если ИспользоватьАвтоматическиеСкидкиВПродажах
		И Не Объект.СкидкиРассчитаны 
			И Объект.Товары.Количество() > 0 Тогда
			
			РассчитатьСкидкиНаценкиКлиент();
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ОтменитьСНепроданнымиТоварамиСервер(ПричинаОтмены, Знач ПроверятьОстатки = Ложь)
	
	КоличествоОтмененныхСтрок = РозничныеПродажиСервер.ОтменитьСНепроданнымиТоварами(Объект, "Товары", ПричинаОтмены, ПроверятьОстатки);
	
	Возврат КоличествоОтмененныхСтрок;
	
КонецФункции

&НаСервере
Функция РезервироватьПоДаннымОстатковСервер()
	
	КоличествоСтрок = РозничныеПродажиСервер.РезервироватьПоДаннымОстатков(Объект, "Товары");
	
	Возврат КоличествоСтрок;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОбРезервировании()
	
	Если КоличествоСтрокРезервирования = 0 Тогда
			
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Нет возможности для резерва'"),
			,
			НСтр("ru='Нет возможности для резерва. Товары по заказу или уже проданы, или нет остатка на складе'"),
			БиблиотекаКартинок.Информация32
		);
			
	Иначе
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Товары готовы к резерву'"),
				,
				НСтр("ru = 'Товары готовы к резерву. Выбраны все возможные товары к резерву.'"),
				БиблиотекаКартинок.Информация32
			);
			
		КоличествоСтрокРезервирования = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьФункциональнуюОпциюКонтроляАссортимента()
	//
	//Если НЕ ЗначениеЗаполнено(Объект.Магазин) ИЛИ Объект.Статус = Перечисления.СтатусыЗаказовПокупателей.НеСогласован Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	//Возврат АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин, "КонтролироватьАссортиментВЗаказеПокупателя");
	
КонецФункции // ПолучитьФункциональнуюОпциюКонтроляАссортимента()

&НаКлиентеНаСервереБезКонтекста	//	LNK 09.11.2021 06:33:43
Процедура ОбновитьИтоговыеПоказатели(Форма)

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Форма.Объект.Товары, Форма.Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Форма.Объект.Товары, Форма.Объект.ЦенаВключаетНДС, Форма.СуммаВсего);

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыСкидкиНаценки(Форма.Объект.СкидкиНаценки, Форма.СуммаСкидкиНаценки, Истина);
	
	СуммаРучныхСкидок = 0;
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуРучныхСкидокДокумента(Форма.Объект.Товары, СуммаРучныхСкидок);
	Форма.СуммаСкидкиНаценки = Форма.СуммаСкидкиНаценки + СуммаРучныхСкидок;
	
	Форма.СуммаБезСкидки = Форма.СуммаВсего + Форма.СуммаСкидкиНаценки;

	ВсегоБонусныхБаллов = Форма.Объект.НачислениеБонусныхБаллов.Количество() + Форма.Объект.ОплатаБонуснымиБаллами.Количество();
	
	Форма.Элементы.ГруппаБонусныеБаллы.Заголовок = "Бонусные баллы" + ?(ВсегоБонусныхБаллов = 0, "", " (" + Формат(ВсегоБонусныхБаллов, "ЧГ=") + ")");
	
	Если Не Форма.Объект.СуммаДоставкиВРучную И Не Форма.Объект.СуммаДоставкиОплачена Тогда
		Если Форма.Объект.ТипДоставки = ПредопределенноеЗначение("Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз") Тогда
			Если Форма.Объект.СуммаДоставки = 59 Тогда
				Форма.Объект.СуммаДоставки = 0;
				Форма.Модифицированность = Истина;
			КонецЕсли;
		Иначе
			Если Форма.СуммаВсего >= 1000 Тогда
				Если Не Форма.Объект.СуммаДоставки = 0 Тогда
					Форма.Объект.СуммаДоставки = 0;
					Форма.Модифицированность = Истина;
				КонецЕсли;
			Иначе
				Если Не Форма.Объект.СуммаДоставки = 59 Тогда
					Форма.Объект.СуммаДоставки = 59;
					Форма.Модифицированность = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураОплат = ЗаказыПокупателейКлиентСервер.СтруктураПодсчетаОплат();
	СтруктураОплат.СуммаВсего = Форма.СуммаВсего;
	ПодсчетОплаты = ЗаказыПокупателейКлиентСервер.ПодсчетОплаты(Форма.Объект, СтруктураОплат);

	Форма.СуммаОплачено = СтруктураОплат.СуммаОплачено; 
	Форма.СуммаОжидаетОплаты = СтруктураОплат.СуммаОжидаетОплаты; 
	Форма.СуммаСформированныхОплат = СтруктураОплат.СуммаСформированныхОплат;
	Форма.СуммаСформированныхВозвратов = СтруктураОплат.СуммаСформированныхВозвратов;

	Форма.СуммаВсегоДляОплаты = Форма.СуммаВсего + Форма.Объект.СуммаДоставки; 
	Форма.СуммаВсегоОплаты = Форма.СуммаОплачено - Форма.СуммаСформированныхВозвратов; 

	Форма.Элементы.СостояниеОплатыЗаказа.Заголовок = ПодсчетОплаты.ЗаголовокДляФормы;
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
// +HVOYA. 2016-09-07 Юлия_Ж	
	//ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	 // -HVOYA. 2016-09-07 Юлия_Ж
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	// +HVOYA. 2016-09-07 Юлия_Ж
	//ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента);
	// -HVOYA. 2016-09-07 Юлия_Ж
	ПересчитатьИлиОтменитьСкидки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОтменуВыделенныхСтрок()
	// +HVOYA. 2016-09-07 Юлия_Ж
	//РозничныеПродажиКлиент.ОтменитьВыделенныеСтроки(
	//	Объект.Товары,
	//	Элементы.Товары.ВыделенныеСтроки,
	//	ПричинаОтмены
	//);
	//
	//РозничныеПродажиКлиент.ОповеститьОбОтменеВыделенныхСтрок(ПричинаОтмены);
// -HVOYA. 2016-09-07 Юлия_Ж	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОтменуВыделенныхНеЗарезервированныхСтрок()
	 // +HVOYA. 2016-09-07 Юлия_Ж
	//РозничныеПродажиКлиент.ОтменитьВыделенныеНеЗарезервированныеСтроки(
	//	Объект.Товары,
	//	Элементы.Товары.ВыделенныеСтроки,
	//	ПричинаОтмены
	//);
	
	//РозничныеПродажиКлиент.ОповеститьОбОтменеВыделенныхНеЗарезервированныхСтрок(ПричинаОтмены);
	// -HVOYA. 2016-09-07 Юлия_Ж
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОтменуНепроданныхТоваров()
	
	ПроверятьОстатки = Истина;
	
	КоличествоСтрокОтменено = ОтменитьСНепроданнымиТоварамиСервер(ПричинаОтмены, ПроверятьОстатки);
	// +HVOYA. 2016-09-07 Юлия_Ж
	//РозничныеПродажиКлиент.ОповеститьОбОтменеНепроданныхТоваров(ПричинаОтмены, КоличествоСтрокОтменено, ПроверятьОстатки);
// -HVOYA. 2016-09-07 Юлия_Ж	
КонецПроцедуры

&НаСервере
Процедура ОтменитьСкидки()
	
	Если Объект.СкидкиРассчитаны Тогда
		СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "Товары");
		Объект.Подарки.Очистить();
		Объект.НачислениеБонусныхБаллов.Очистить();
		Объект.СкидкиРассчитаны = Ложь;
	КонецЕсли;

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИлиОтменитьСкидки()
	
	Если АвтоматическийРасчетСкидок Тогда
		Если НЕ ПропуститьАвтоматическийРасчетСкидок Тогда
			РассчитатьСкидкиНаценкиКлиент();
		КонецЕсли;
	Иначе
		ОтменитьСкидки();
	КонецЕсли;

	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВыдатьПодаркиНаВыборНаСервере(Результат, ДополнительныеПараметры) Экспорт
	
	ПереноситьВПродажи = Ложь;
	ТаблицаПодарков = ПолучитьИзВременногоХранилища(Результат);
	Для Каждого СтрокаПодарка Из ТаблицаПодарков Цикл
	    НоваяСтрока = Объект.Подарки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодарка);
		УчитыватьПодарокКакПродажу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПодарка.СкидкаНаценка, "УчитыватьПодарокКакПродажу");
		Если УчитыватьПодарокКакПродажу Тогда
			ПереноситьВПродажи = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПереноситьВПродажи Тогда
		КоличествоПеренесенных = 0;
		СкидкиНаценкиСерверПереопределяемый.ПеренестиСкидкиПодаркиВТовары(Объект, Объект.ЦенаВключаетНДС, , КоличествоПеренесенных);
		Если КоличествоПеренесенных > 0 Тогда
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
			// +HVOYA. 2016-09-07 Юлия_Ж
			//ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
			//ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
			// -HVOYA. 2016-09-07 Юлия_Ж
			ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакЕстьПродажиПоСтроке(Объект.Ссылка, Объект.Товары);
			СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
			БонусныеБаллыСервер.ОбновитьОтображениеОплатаБонуснымиБаллами(Объект);

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКомментариевПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	КомментарийПараметры = Новый Структура("ЗаказКлиента", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.КомментарийИнтернетЗаказа.ФормаЗаписи", КомментарийПараметры, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СписокКомментариевПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	КомментарийПараметры = Новый Структура("ПросмотрКомментария, ДанныеДляПросмотра, ЗаказКлиента", 
											Истина,
											Элемент.ТекущиеДанные,
											Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.КомментарийИнтернетЗаказа.ФормаЗаписи", КомментарийПараметры, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) 
	
	Если  ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Номенклатура) Тогда 
		СтандартнаяОбработка = Ложь; 
		
		ДанныеВыбора = Новый СписокЗначений;
		ТоварыСкладВыбор(Элементы.Товары.ТекущиеДанные.Номенклатура, ДанныеВыбора);
		
	КонецЕсли;

КонецПроцедуры
				
&НаСервереБезКонтекста
Процедура ТоварыСкладВыбор(СписокТоваров, ДанныеВыбора)
	
	ДанныеЗапроса = Новый Структура;
	
	ДанныеЗапроса.Вставить("Command", "get_sku_list");
	Если ТипЗнч(СписокТоваров) = Тип("Массив") Тогда 
		
		ВыборДляМассива = Истина; 
		
		Результат = "";
		
		Для Каждого Элемент Из СписокТоваров Цикл 
			
			Подстрока = Элемент.IDN;
			РазделительПодстрок = ?(ПустаяСтрока(Результат), "", ",");
			Результат = Результат + РазделительПодстрок + Подстрока;
			
		КонецЦикла; 
		
		ДанныеЗапроса.Вставить("SKU", Результат);
		
	Иначе 
		
		ВыборДляМассива = Ложь;
		ДанныеЗапроса.Вставить("SKU", СписокТоваров.IDN);
		
	КонецЕсли;
	
	//Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда 
	Если Ложь Тогда 
		
		ЗаписьJSON = ОбменMagentoСервер.СоздатьJSON(-1, ДанныеЗапроса);  
		
		СоставОшибки = Новый Структура("Ошибка, КодОшибки, ОписаниеОшибки", Ложь, "", "");
		
		ОбменMagentoСервер.ВыполнитьВыгрузкуИзмененийВУзелMagento(Неопределено, ДанныеЗапроса, ЗаписьJSON, СоставОшибки);	
		
		JSON.ЗаписатьСвойство("Error", JSON.БулевоКакЧисло(СоставОшибки.Ошибка), ЗаписьJSON);
		JSON.ЗаписатьСвойство("ErrorCode", СоставОшибки.КодОшибки, ЗаписьJSON);
		JSON.ЗаписатьСвойство("ErrorMessage", СоставОшибки.ОписаниеОшибки, ЗаписьJSON);
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ТекстJSON = ЗаписьJSON.Закрыть();
		
		ЧтениеJSON = Новый ЧтениеJSON;   
		ЧтениеJSON.УстановитьСтроку(ТекстJSON);
		
	Иначе 
		
		УстановитьПривилегированныйРежим(Истина);
		
		//Определения = Новый WSОпределения(УправлениеДоступомСлужебныйПовтИсп.ПолучитьСтрокуWebСоединения(ПараметрыСеанса.ТекущийМагазин) + "ws/" + "inode83" + ".1cws?wsdl"
		//	, УправлениеДоступомСлужебныйПовтИсп.ИдентификаторВнешнегоПосредника()
		//	, УправлениеДоступомСлужебныйПовтИсп.ПарольВнешнегоПосредника()
		//	,, 40);
		Определения = Новый WSОпределения("http://77.88.224.242:80/retail/ws/inode83.1cws?wsdl"
			, УправлениеДоступомСлужебныйПовтИсп.ИдентификаторВнешнегоПосредника()
			, УправлениеДоступомСлужебныйПовтИсп.ПарольВнешнегоПосредника()
			,, 40);
		Прокси = Новый WSПрокси(Определения, "http://antoshka/retail/" + НРег("InfoNode"), "InfoNode", "InfoNode"  + "Soap",, 40);

		Прокси.Пользователь = УправлениеДоступомСлужебныйПовтИсп.ИдентификаторВнешнегоПосредника();
		Прокси.Пароль       = УправлениеДоступомСлужебныйПовтИсп.ПарольВнешнегоПосредника(); 
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON,ДанныеЗапроса);	
		ДанныеЗапросаJSON = ЗаписьJSON.Закрыть(); 
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Прокси.GetRegisteredBalances(ДанныеЗапросаJSON)); 
		
	КонецЕсли; 
	
	ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON, Ложь,,, "ПолучитьДатуОтMagento", ОбменMagentoСервер,, ОбменMagentoСервер.ИменаТипаДата()); 
	
	ПервыйЭлементМассива = Истина;
	МассивВыбора = Новый Массив;
	МассивВыбораПромежуточный = Новый Массив;
	
	Для Каждого СтрокаТовара Из ДанныеЗапроса.goods Цикл
		
		Для Каждого СтрокаСклада Из СтрокаТовара.stock Цикл 
			
			Если ВыборДляМассива Тогда 
				
				Если ПервыйЭлементМассива Тогда 
					
					МассивВыбораПромежуточный.Добавить(СтрокаСклада.wh_code);
					
				Иначе
					
					Если Не МассивВыбора.Найти(СтрокаСклада.wh_code) = Неопределено Тогда
						
						МассивВыбораПромежуточный.Добавить(СтрокаСклада.wh_code);
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				КодСклада = СтрокаСклада.wh_code;
				КоличествоОстаток = СтрокаСклада.qty;
				КоличествоВЗаказе = СтрокаСклада.qty_r1;
				
				ДанныеВыбора.Добавить(ОбменMagentoСервер.ПолучитьСкладMagentoПоIDN(КодСклада),
				КодСклада + " (" + Строка(КоличествоОстаток - ?(КоличествоВЗаказе<0, 0, КоличествоВЗаказе)) + ")");
				
			КонецЕсли;
			
		КонецЦикла;
		
		МассивВыбора = МассивВыбораПромежуточный;
		СЗДляКопирования = Новый СписокЗначений;
		СЗДляКопирования.ЗагрузитьЗначения(МассивВыбораПромежуточный); 
		МассивВыбора = СЗДляКопирования.ВыгрузитьЗначения();
		ПервыйЭлементМассива = Ложь; 
		МассивВыбораПромежуточный.Очистить();
		
		КонецЦикла;
		
	Если ВыборДляМассива Тогда
		Для Каждого СтрокаМассива Из МассивВыбора Цикл 
			ДанныеВыбора.Добавить(ОбменMagentoСервер.ПолучитьСкладMagentoПоIDN(СтрокаМассива), СтрокаМассива);  
	КонецЦикла;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	НаименованиеОбъекта = ТекущийОбъект.Ссылка.Метаданные().Имя;
	Менеджер = Документы[НаименованиеОбъекта]; 
	Дата = ТекущаяДата();
	Ссылка = ТекущийОбъект.Ссылка;
	ЭтоНовый = ТекущийОбъект.Ссылка.Пустая();
	Если ЭтоНовый Тогда // Объект еще не был записан   
		Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор);
		ТекущийОбъект.УстановитьСсылкуНового(Ссылка);

	КонецЕсли;
	

	СписокКомментариев.Параметры.УстановитьЗначениеПараметра("ЗаказПокупателя", Ссылка); 
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ИзмененОтветственный", ИзмененОтветственный);  
	
	МассивКомментарийСтрок = Новый Массив;
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если СтрокаТЧ.ЕстьКомментарий Тогда 
			
			СтруктураКомментария = РегистрыСведений.КомментарийПоСтрокам.СтруктураКомментария();
			
			СтруктураКомментария.КлючСвязи = СтрокаТЧ.КлючСвязиЗапросаДоступности;
			СтруктураКомментария.Комментарий = СтрокаТЧ.КомментарийПоСтроке; 
			
			МассивКомментарийСтрок.Добавить(СтруктураКомментария);
			
		КонецЕсли;
		
	КонецЦикла; 
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("МассивКомментарийСтрок", МассивКомментарийСтрок); 
КонецПроцедуры  

&НаКлиенте
Процедура ТоварыТипДоставкиПриИзменении(Элемент) 
	Если Не Элементы.Товары.ТекущиеДанные.ТипДоставки = ПредопределенноеЗначение("Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз") Тогда 
		
		Элементы.Товары.ТекущиеДанные.МагазинПолучатель =  ПредопределенноеЗначение("Справочник.Магазины.ПустаяСсылка");
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДоставкиПриИзменении(Элемент)
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл 
		
		Если Не Объект.ТипДоставки = ПредопределенноеЗначение("Перечисление.ТипДоставкиЗаказПокупателя.Смешаный") Тогда 
			СтрокаТЧ.Самовывоз = (Объект.ТипДоставки = ПредопределенноеЗначение("Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз"));
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ТипДоставки = ПредопределенноеЗначение("Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз") Тогда 
		
		Объект.ОператорДоставки = ПредопределенноеЗначение("Перечисление.ОператорыДоставки.ВнутренняяЛогистика");
		
	ИначеЕсли Объект.ОператорДоставки = ПредопределенноеЗначение("Перечисление.ОператорыДоставки.ВнутренняяЛогистика") Тогда 
		
		Объект.ОператорДоставки = ПредопределенноеЗначение("Перечисление.ОператорыДоставки.ПустаяСсылка"); 
		
	КонецЕсли;
	
	ВидимостьЭлементов();
	
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);

КонецПроцедуры
	
&НаКлиенте
Процедура ВидимостьЭлементов()
	Элементы.ТоварыСамовывоз.Видимость = Не  
						(Объект.ТипДоставки = ПредопределенноеЗначение("Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз")
						Или Объект.ТипДоставки = ПредопределенноеЗначение("Перечисление.ТипДоставкиЗаказПокупателя.СлужбаДоставки"));
						
	Элементы.ТоварыМагазинПолучатель.Видимость =   
						(Объект.ТипДоставки = ПредопределенноеЗначение("Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз")
						Или Объект.ТипДоставки = ПредопределенноеЗначение("Перечисление.ТипДоставкиЗаказПокупателя.Смешаный"));
						
	Элементы.ГруппаВидДоставки.Видимость = Не (Объект.ТипДоставки = ПредопределенноеЗначение("Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз"));
	Элементы.ИнформацияОДоставке.Видимость = Не (Объект.ТипДоставки = ПредопределенноеЗначение("Перечисление.ТипДоставкиЗаказПокупателя.Самовывоз"));
	
	Элементы.СуммаДоставки.ТолькоПросмотр = Не Объект.СуммаДоставкиВРучную;
КонецПроцедуры

&НаКлиенте
Процедура СуммаДоставкиВРучнуюПриИзменении(Элемент)
	Элементы.СуммаДоставки.ТолькоПросмотр = Не Объект.СуммаДоставкиВРучную;
КонецПроцедуры


&НаСервере
Процедура ДоставкаНаАдресПриИзмененииНаСервере()
	Если Объект.ДоставкаНаАдрес тогда
		Элементы.НаОтделение.Видимость	= ложь;	
		Элементы.НаАдрес.Видимость 		= Истина;			
	Иначе
		Элементы.НаОтделение.Видимость 	= Истина;	
		Элементы.НаАдрес.Видимость 		= ложь;			
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоставкаНаАдресПриИзменении(Элемент)
	ДоставкаНаАдресПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучательТЛПриИзмененииНаСервере()
	//Если Объект.ПолучательТретееЛицо тогда
	//	Элементы.ГруппаКлиент.Видимость			= ложь;	
	//	Элементы.ГруппаКлиент2.Видимость		= ложь;	
	//	Элементы.ГруппаТретееЛицо.Видимость		= Истина;	
	//	Элементы.ГруппаТретееЛицо2.Видимость	= Истина;	
	//Иначе
	//	Элементы.ГруппаКлиент.Видимость			= Истина;	
	//	Элементы.ГруппаКлиент2.Видимость		= Истина;	
	//	Элементы.ГруппаТретееЛицо.Видимость		= ложь;	
	//	Элементы.ГруппаТретееЛицо2.Видимость	= ложь;	
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучательТЛПриИзменении(Элемент)
	ПолучательТЛПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура 	ПрверитьВидимостьДоставкиИПолучателя();
	//Если Объект.ПолучательТретееЛицо тогда
	//	Элементы.ГруппаКлиент.Видимость			= ложь;	
	//	Элементы.ГруппаКлиент2.Видимость		= ложь;	
	//	Элементы.ГруппаТретееЛицо.Видимость		= Истина;	
	//	Элементы.ГруппаТретееЛицо2.Видимость	= Истина;	
	//Иначе
	//	Элементы.ГруппаКлиент.Видимость			= Истина;	
	//	Элементы.ГруппаКлиент2.Видимость		= Истина;	
	//	Элементы.ГруппаТретееЛицо.Видимость		= ложь;	
	//	Элементы.ГруппаТретееЛицо2.Видимость	= ложь;	
	//КонецЕсли;
	
	Если Объект.ДоставкаНаАдрес тогда
		Элементы.НаОтделение.Видимость	= ложь;	
		Элементы.НаАдрес.Видимость 		= Истина;			
	Иначе
		Элементы.НаОтделение.Видимость 	= Истина;	
		Элементы.НаАдрес.Видимость 		= ложь;			
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГородОчистка(Элемент, СтандартнаяОбработка)
	Массив = Новый Массив(); 
	Массив.Добавить(Тип("СправочникСсылка.ГородаДоставки")); 
	Массив.Добавить(Тип("Строка")); 
	НашеОписание = Новый ОписаниеТипов(Массив);

	Элементы.Город.ОграничениеТипа = НашеОписание; 
КонецПроцедуры

&НаКлиенте
Процедура ОтделениеОчистка(Элемент, СтандартнаяОбработка)
	Массив = Новый Массив(); 
	Массив.Добавить(Тип("СправочникСсылка.Отделения")); 
	Массив.Добавить(Тип("СправочникСсылка.Почтоматы")); 	
	Массив.Добавить(Тип("Строка")); 
	НашеОписание = Новый ОписаниеТипов(Массив);

	Элементы.Отделение.ОграничениеТипа = НашеОписание; 
КонецПроцедуры

&НаКлиенте
Процедура Город2Очистка(Элемент, СтандартнаяОбработка)
	Массив = Новый Массив(); 
	Массив.Добавить(Тип("СправочникСсылка.ГородаДоставки")); 
	Массив.Добавить(Тип("Строка")); 
	
	НашеОписание 					= Новый ОписаниеТипов(Массив);
	Элементы.Город2.ОграничениеТипа = НашеОписание;  
	ОчиститьРайонИОбластьНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРайонИОбластьНаСервере()
	Объект.Область = Справочники.Области.ПустаяСсылка();  
	Объект.Район   = Справочники.Районы.ПустаяСсылка(); 
КонецПроцедуры // СогласованноеКоличество()


&НаКлиенте
Процедура УлицаОчистка(Элемент, СтандартнаяОбработка)
	Массив = Новый Массив(); 
	Массив.Добавить(Тип("СправочникСсылка.Улицы")); 
	Массив.Добавить(Тип("Строка")); 
	НашеОписание = Новый ОписаниеТипов(Массив);

	Элементы.Улица.ОграничениеТипа = НашеОписание; 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусДляВыбора()
	
	//Элементы.Статус.СписокВыбора.Очистить();
	//СостояниеДокумента = ЗаказыПокупателейСервер.ПолучитьСостаяниеЗаказаПокупателя(Объект.Ссылка);
	//
	//Если Объект.Статус = Перечисления.СтатусыЗаказовПокупателей.Новый Тогда
	//	
	//	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаказовПокупателей.Новый, "Новый");		
	//	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаказовПокупателей.ВРаботе, "В работу");		
	//	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаказовПокупателей.Отменён, "Отменён"); 
	//	
	//ИначеЕсли Объект.Статус = Перечисления.СтатусыЗаказовПокупателей.ВРаботе Тогда 
	//	
	//	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаказовПокупателей.ВРаботе, "В работу");		
	//	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаказовПокупателей.ЗапросДоступности, "Запрос доступности");		
	//	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаказовПокупателей.Отменён, "Отменён"); 
	//	
	//ИначеЕсли Объект.Статус = Перечисления.СтатусыЗаказовПокупателей.ЗапросДоступности Тогда 
	//	
	//	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаказовПокупателей.ЗапросДоступности, "Запрос доступности");
	//	Если СостояниеДокумента = Перечисления.СостоянияЗаказовПокупателей.ГотовКПродаже Тогда 
	//		Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаказовПокупателей.Продажа, "Продажа");
	//	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияЗаказовПокупателей.ГотовКПеремещению Тогда 
	//		Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаказовПокупателей.Перемещение, "Сборка заказа");
	//	КонецЕсли;
	//	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаказовПокупателей.Отменён, "Отменён"); 
	//	
	//ИначеЕсли Объект.Статус = Перечисления.СтатусыЗаказовПокупателей.Продажа Тогда 
	//	
	//	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаказовПокупателей.Продажа, "Продажа");
	//	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаказовПокупателей.Отменён, "Отменён"); 
	//	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаказовПокупателей.Закрыт, "Закрыт"); 
	//	
	//ИначеЕсли Объект.Статус = Перечисления.СтатусыЗаказовПокупателей.Перемещение Тогда 
	//	
	//	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаказовПокупателей.Перемещение, "Сборка заказа");
	//	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаказовПокупателей.Отменён, "Отменён"); 
	//	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаказовПокупателей.Закрыт, "Закрыт"); 
	//	
	//ИначеЕсли Объект.Статус = Перечисления.СтатусыЗаказовПокупателей.Отменён Тогда 
	//	
	//	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаказовПокупателей.ВРаботе, "В работу");		
	//	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаказовПокупателей.Отменён, "Отменён"); 
	//	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаказовПокупателей.Закрыт, "Закрыт"); 
	//	
	//ИначеЕсли Объект.Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт Тогда 
	//	
	//	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаказовПокупателей.Закрыт, "Закрыт"); 
	//	
	//КонецЕсли;
	
 КонецПроцедуры

&НаКлиенте
Процедура Подключаемая_ОтобразитьРасчетныеКолонки()
	
	ОтобразитьРасчетныеКолонки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьРасчетныеКолонки(НачальныйВызов = Ложь)

	МассивСогласованногоКоличество = СогласованноеКоличество(); 
	
	ОтобразитьРасчетнуюКолонку(МассивСогласованногоКоличество, "СогласованноеКоличество");
	
	Если НачальныйВызов Тогда 
		
		МассивЕстьКомментарий = ЕстьКомментарий(); 
		
		ОтобразитьРасчетнуюКолонку(МассивЕстьКомментарий, "ЕстьКомментарий");
		ОтобразитьРасчетнуюКолонку(МассивЕстьКомментарий, "КомментарийПоСтроке"); 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьРасчетнуюКолонку(МассивКолонок, ИмяКолонки)
	
	Для Каждого СтрокаМассива Из МассивКолонок Цикл
		
		ОтборСтрок = Новый Структура("КлючСвязиЗапросаДоступности", СтрокаМассива.КлючСвязиЗапросаДоступности);
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ОтборСтрок);
		
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			СтрокаТЧ[ИмяКолонки] = СтрокаМассива[ИмяКолонки];
			
		КонецЦикла;  
		
	КонецЦикла; 
	
КонецПроцедуры 

&НаСервере
Функция СогласованноеКоличество()
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателяТовары.КлючСвязиЗапросаДоступности КАК КлючСвязиЗапросаДоступности,
		|	ЕСТЬNULL(ЗапросДоступностиТоваровТовары.Количество, 0) КАК СогласованноеКоличество
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров.Товары КАК ЗапросДоступностиТоваровТовары
		|		ПО ЗаказПокупателяТовары.Ссылка = ЗапросДоступностиТоваровТовары.Ссылка.ДокументОснование
		|			И ЗаказПокупателяТовары.КлючСвязиЗапросаДоступности = ЗапросДоступностиТоваровТовары.КлючСвязи
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Результат.Добавить(Новый Структура("КлючСвязиЗапросаДоступности, СогласованноеКоличество"
					, Выборка.КлючСвязиЗапросаДоступности
					, Выборка.СогласованноеКоличество));
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // СогласованноеКоличество()

&НаСервере
Функция ЕстьКомментарий()
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КомментарийПоСтрокам.КлючСвязи КАК КлючСвязи,
		|	КомментарийПоСтрокам.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.КомментарийПоСтрокам КАК КомментарийПоСтрокам
		|ГДЕ
		|	КомментарийПоСтрокам.Документ = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Результат.Добавить(Новый Структура("КлючСвязиЗапросаДоступности, ЕстьКомментарий, КомментарийПоСтроке"
					, Выборка.КлючСвязи
					, Истина
					, Выборка.Комментарий));
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // СогласованноеКоличество()

#КонецОбласти  

&НаСервере
Процедура ЗаполнитьФИОКлиента()
	//Запрос = Новый Запрос(
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ФИОФизЛиц.Фамилия КАК Фамилия,
	//	|	ФИОФизЛиц.Имя КАК Имя,
	//	|	ФИОФизЛиц.Отчество КАК Отчество
	//	|ИЗ
	//	|	РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	//	|ГДЕ
	//	|	ФИОФизЛиц.ФизЛицо = &ФизЛицо"
	//	);
	//Запрос.УстановитьПараметр("ФизЛицо", Объект.Контрагент);
	//
	//Результат = Запрос.Выполнить();
	//Найден    = НЕ Результат.Пустой();

	//Если Найден Тогда
	//	Выборка = Результат.Выбрать();
	//	Пока Выборка.Следующий() цикл
	//		Имя 		= Выборка.Имя;
	//		Фамилия 	= Выборка.Фамилия;
	//		Отчество 	= Выборка.Отчество;
	//	КонецЦикла;
	//Иначе 
	//	Имя 		= "";
	//	Фамилия 	= "";
	//	Отчество 	= "";
	//КонецЕсли;         
	Если ЗначениеЗаполнено(Объект.Контрагент) и НЕ Объект.ПолучательТретееЛицо тогда
		Наименование = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Контрагент,"Наименование");
		СоставНаименования = ОбщегоНазначенияКлиентСервер.lx_FillValueList(, СокрЛП(Наименование),, " ", 3,, Новый ОписаниеТипов("Строка"));

		Объект.Фамилия  = СоставНаименования[0];
		Объект.Имя      = СоставНаименования[1];
		Объект.Отчество = СоставНаименования[2];   
		Объект.Телефон  = ПолучитьНомерТелефона(Объект.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;
			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекКод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
			
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента) Экспорт
	
	Если НЕ СтруктураПараметров.НеизвестныеДанныеПО Тогда
		
		Если СтруктураПараметров.Действие = "ПроверкаВесовыхТоваров" Тогда
			
			ВходящиеПараметры = СтруктураПараметров.ЗначенияПоиска[0];
			ДобавитьНайденныеПозицииТоваров(ВходящиеПараметры);
			СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
			
		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаТоваров" Тогда
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				
				Если СтруктураПараметров.ЗначенияПоиска.Количество() = 1 Тогда
					
					ВходящиеПараметры = СтруктураПараметров.ЗначенияПоиска[0];
					Если СтруктураПараметров.Свойство("ИспользоватьКоличество") Тогда
						ВходящиеПараметры.Вставить("Количество", СтруктураПараметров.ИспользоватьКоличество);
					КонецЕсли;
					ДобавитьНайденныеПозицииТоваров(ВходящиеПараметры);
					
				Иначе
					
					ТаблицаТоваров = Новый ТаблицаЗначений;
					ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
					ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
					ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
					
					Для каждого ЗначениеПоиска Из СтруктураПараметров.ЗначенияПоиска Цикл
						ТекущаяСтрока = ТаблицаТоваров.Добавить();
						ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначениеПоиска);
					КонецЦикла;
					
					СтруктураПараметровКлиента.Вставить("ВыборТоваров", ПоместитьВоВременноеХранилище(ТаблицаТоваров));
					
				КонецЕсли;
				
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				
			КонецЕсли;
		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаСерийныхНомеров" Тогда
			
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				
				ОперацияВыполнена = ДобавитьНайденныеСерийныеНомера(СтруктураПараметров.ЗначенияПоиска);
				
				Если НЕ ОперацияВыполнена Тогда
					СтруктураПараметровКлиента.Вставить("ТекстПредупреждения",НСтр("ru = 'По считанному штрихкоду определен номер подарочного сертификата.
						|Он уже присутствует в документе.
						|Повторный ввод данных не требуется.'"));

				КонецЕсли;
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				
			КонецЕсли;
		
		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаКарт" Тогда
			
			КоличествоКарт = СтруктураПараметров.ЗначенияПоиска.Количество();
			Если КоличествоКарт = 1 Тогда
				ИнформационнаяКарта = СтруктураПараметров.ЗначенияПоиска[0].ИнформационнаяКарта;
				Если ЗначениеЗаполнено(ИнформационнаяКарта) Тогда
					Если ИнформационнаяКарта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная Тогда
						Объект.ДисконтнаяКарта = ИнформационнаяКарта;
						СтруктураПараметровКлиента.Вставить("НайденаДисконтнаяКарта");
						Модифицированность = Истина;
					Иначе
						
						СтруктураПараметровКлиента.Вставить("ТекстПредупреждения",НСтр("ru = 'По считанному штрихкоду определена регистрационная карта. 
						|Ввод данных о регистрационной карте в документе не предусмотрен.'"));
					КонецЕсли;
					СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				КонецЕсли;
			ИначеЕсли КоличествоКарт > 1 Тогда
				МассивТиповВладельцев = Новый Массив;
				МассивТиповВладельцев.Добавить(Тип("СправочникСсылка.Контрагенты"));
				МассивТиповВладельцев.Добавить(Тип("СправочникСсылка.Пользователи"));
				МассивТиповВладельцев.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
				ТаблицаКарт = Новый ТаблицаЗначений;
				ТаблицаКарт.Колонки.Добавить("ИнформационнаяКарта", Новый ОписаниеТипов("СправочникСсылка.ИнформационныеКарты"));
				ТаблицаКарт.Колонки.Добавить("ВладелецКарты", Новый ОписаниеТипов(МассивТиповВладельцев));
				
				Для каждого ЗначениеПоиска Из СтруктураПараметров.ЗначенияПоиска Цикл
					ТекущаяСтрока = ТаблицаКарт.Добавить();
					ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначениеПоиска);
				КонецЦикла;
				
				СтруктураПараметровКлиента.Вставить("ВыборКарт", ПоместитьВоВременноеХранилище(ТаблицаКарт));
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
			КонецЕсли;
				
		ИначеЕсли СтруктураПараметров.Действие = "РегистрацияНовойКарты" Тогда
			
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				
				Если СтруктураПараметров.ЗначенияПоиска.Количество() > 1 Тогда
					
					ТаблицаШаблонов = Новый ТаблицаЗначений;
					ТаблицаШаблонов.Колонки.Добавить("ТипШтрихкода");
					ТаблицаШаблонов.Колонки.Добавить("КодКарты");
					
					Для каждого КлючИЗначение Из СтруктураПараметров.ЗначенияПоиска[0] Цикл
						ТаблицаШаблонов.Колонки.Добавить(КлючИЗначение.Ключ);
					КонецЦикла;
					
					Для каждого ЗначениеПоиска Из СтруктураПараметров.ЗначенияПоиска Цикл
						ТекущаяСтрока = ТаблицаШаблонов.Добавить();
						ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначениеПоиска);
					КонецЦикла;
					ТаблицаШаблонов.ЗаполнитьЗначения(СтруктураПараметров.ТипШтрихкода, "ТипШтрихкода");
					ТаблицаШаблонов.ЗаполнитьЗначения(СтруктураПараметров.КодКарты, "КодКарты");
					СтруктураПараметровКлиента.Вставить("РегистрацияНовойКартыВыборШаблона", ПоместитьВоВременноеХранилище(ТаблицаШаблонов, Новый УникальныйИдентификатор()));
					
					ТекстВопроса = НСтр("ru = 'Создать новую информационную карту? Карта %КодКарты%.'");
					ТекстВопроса = СтрЗаменить(ТекстВопроса, "%КодКарты%", СтруктураПараметров.КодКарты);
					
					СтруктураПараметровКлиента.Вставить("ТекстВопросаНовойКарты", ТекстВопроса);
				Иначе
					СтруктураПараметровКлиентаРегистрацииНовойКарты = СтруктураПараметров.ЗначенияПоиска[0];
					СтруктураПараметровКлиентаРегистрацииНовойКарты.Вставить("ТипШтрихкода", СтруктураПараметров.ТипШтрихкода);
					СтруктураПараметровКлиентаРегистрацииНовойКарты.Вставить("КодКарты"    , СтруктураПараметров.КодКарты);
					
					СтруктураПараметровКлиента.Вставить("РегистрацияНовойКарты", СтруктураПараметровКлиентаРегистрацииНовойКарты);
					
					ТекстВопроса = НСтр("ru = 'Создать новую информационную карту? Карта %КодКарты%%НаименованиеШаблона%'");
					ТекстВопроса = СтрЗаменить(ТекстВопроса, "%КодКарты%", СтруктураПараметров.КодКарты);
					Если СтруктураПараметровКлиентаРегистрацииНовойКарты.Свойство("НаименованиеШаблона") Тогда
						Если ПустаяСтрока(СтруктураПараметровКлиентаРегистрацииНовойКарты.НаименованиеШаблона) Тогда
							ТекстВопроса = СтрЗаменить(ТекстВопроса, "%НаименованиеШаблона%", ".");
						Иначе
							ТекстВопроса = СтрЗаменить(ТекстВопроса, "%НаименованиеШаблона%", " (" + СтруктураПараметровКлиентаРегистрацииНовойКарты.НаименованиеШаблона+").");
						КонецЕсли;
					КонецЕсли;
					
					СтруктураПараметровКлиента.Вставить("ТекстВопросаНовойКарты", ТекстВопроса);
				КонецЕсли;
				
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураПараметровКлиента;
	
КонецФункции


&НаСервере
Функция ПолучитьНомерТелефона(КонтрагентСсылка) Экспорт
	НомерТелефона = "";	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.НомерТелефона КАК НомерТелефона
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Вид = &Вид
		|	И КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	Запрос.УстановитьПараметр("Ссылка", КонтрагентСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НомерТелефона = ВыборкаДетальныеЗаписи.НомерТелефона;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат НомерТелефона;
	
КонецФункции


&НаКлиенте
Процедура СкладСборкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если  Не Объект.Товары.Количество() = 0 Тогда 
		СтандартнаяОбработка = Ложь; 
		
		МассивТоваров = Новый Массив;
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			МассивТоваров.Добавить(СтрокаТЧ.Номенклатура);
		КонецЦикла; 
		
		ДанныеВыбора = Новый СписокЗначений;
		ТоварыСкладВыбор(МассивТоваров, ДанныеВыбора);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкладСборкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)  
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл 
		СтрокаТЧ.Склад = ВыбранноеЗначение;
	КонецЦикла;   
КонецПроцедуры

&НаКлиенте
Процедура Город2ПриИзменении(Элемент)
	Если ТипЗнч(Объект.Город) = Тип("Строка") тогда
		Массив = Новый Массив(); 
		Массив.Добавить(Тип("Строка")); 
		НашеОписание = Новый ОписаниеТипов(Массив);

		Элементы.Улица.ОграничениеТипа = НашеОписание; 
	Иначе
		Массив = Новый Массив(); 
	//	Массив.Добавить(Тип("Строка")); 
		Массив.Добавить(Тип("СправочникСсылка.Улицы")); 		
		НашеОписание = Новый ОписаниеТипов(Массив);

		Элементы.Улица.ОграничениеТипа = НашеОписание;   
		Если ЗначениеЗаполнено(Объект.Город) тогда
			Объект.Область = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Город,"Область");  
			Объект.Район   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Город,"Район");
		Иначе
			ОчиститьРайонИОбластьНаСервере();		
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТоварыКомментарийПоСтрокеПриИзменении(Элемент)
	
	Если ПустаяСтрока(Элементы.Товары.ТекущиеДанные.КомментарийПоСтроке) Тогда 
		Элементы.Товары.ТекущиеДанные.ЕстьКомментарий = Ложь;
	Иначе 
		Элементы.Товары.ТекущиеДанные.ЕстьКомментарий = Истина;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ОтправитьСообщениеКлиенту(Команда) 
	Если Не ПустаяСтрока(НомерТелефонаКлиента) И Не Объект.Контрагент.Пустая() Тогда 
		СтандартнаяОбработка = Ложь;
		
		//Оповещение = Новый ОписаниеОповещения("ОтправитьСообщениеКлиентуЗавершение", ЭтотОбъект);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НомерТелефона", НомерТелефонаКлиента);
		ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
		ПараметрыФормы.Вставить("ЗаказКлиента", Объект.Ссылка);
		
		//ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаОтправкиСообщения", ПараметрыФормы,,,,, Оповещение); 
		ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаОтправкиСообщения", ПараметрыФормы); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщениеКлиентуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	//Если ТипЗнч(Результат) = Тип("Структура") Тогда
	//	РегистрыСведений.КомментарийИнтернетЗаказа.ЗаписьКомментария(Объект.Ссылка, Результат.Автор, Результат.ТекстСообщения)
	//КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура Оплатить(Команда)
	Если ЭтотОбъект.Модифицированность или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Сообщить("Сначало запишите документ");
	Иначе
		Если Элементы.ОплатаЗаказа.ТекущиеДанные.Сумма = 0 Тогда 
			Сообщить("Не указанна сумма");
		Иначе
			Элементы.ОплатаЗаказа.ТекущиеДанные.ИДОплаты = ОбменСБанкамиLiqPayСервер.ОплатитьНаСервере(
				Объект.Номер, 
				Объект.Ссылка, 
				НомерТелефонаКлиента, 
				Элементы.ОплатаЗаказа.ТекущиеДанные.НомерОплаты,
				Элементы.ОплатаЗаказа.ТекущиеДанные.Сумма,
				Элементы.ОплатаЗаказа.ТекущиеДанные.ИДОплаты); 
				
			Элементы.ОплатаЗаказа.ТекущиеДанные.СтатусОплаты = ПредопределенноеЗначение("Перечисление.СтатусОплаты.ОтправленаСсылка");
			Записать();
			//Модифицированность = Истина;
		КонецЕсли;  
	КонецЕсли;
	ВидимостьКнопкиОплаты();
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОплату(Команда)
	Если ЭтотОбъект.Модифицированность или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Сообщить("Сначало запишите документ");
	Иначе
		ОтветСервера = ПроверитьОплатуНаСервере(Элементы.ОплатаЗаказа.ТекущиеДанные.НомерОплаты);
		
		Если ОтветСервера.ОплатаПроизведена	Тогда 	
			Элементы.ОплатаЗаказа.ТекущиеДанные.СтатусОплаты = ПредопределенноеЗначение("Перечисление.СтатусОплаты.Оплачен"); 
			Элементы.ОплатаЗаказа.ТекущиеДанные.Сумма = ОтветСервера.Сумма; 
			Элементы.ОплатаЗаказа.ТекущиеДанные.Отменён = Ложь;
			Записать();
			//Модифицированность = Истина;
		Иначе 
			Сообщить(ОтветСервера.ТекстОшибки);
		КонецЕсли; 
	КонецЕсли; 
	ВидимостьКнопкиОплаты();
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция ПроверитьОплатуНаСервере(НомерОплаты)
	
	СтруктураОтвета = Новый Структура("ОплатаПроизведена, ТекстОшибки, Сумма", Ложь, "", 0);
	
	public_key = "sandbox_i1420262809"; 
 	order_id = СокрЛП(Объект.Номер) + ?(НомерОплаты = 0, "", "-" + Строка(НомерОплаты));;
	
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("public_key", public_key);
	СтруктураЗапроса.Вставить("version", "3");
	СтруктураЗапроса.Вставить("action", "status");
	СтруктураЗапроса.Вставить("order_id", order_id);
    ЗаписьJSON = Новый ЗаписьJSON; 
    ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));  
	ЗаписатьJSON(ЗаписьJSON,СтруктураЗапроса);
    СтрокаJSON = ЗаписьJSON.Закрыть();
	
	ДанныеДляОтправки = ОбменСБанкамиСервер.СформироватьДанныеLiqPay(СтрокаJSON);
	
	Заголовки = Новый Соответствие();
    Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
    Соединение = Новый HTTPСоединение("liqpay.ua", , , , , , Новый ЗащищенноеСоединениеOpenSSL());
    HTTPЗапрос = 
        Новый HTTPЗапрос(
                "/api/request"
            ,    Заголовки
        );
		
	HTTPЗапрос.УстановитьТелоИзСтроки("&data=" + ДанныеДляОтправки.Данные + "&signature=" + ДанныеДляОтправки.Сигнатура);
    HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	СтрокаЗапроса = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаЗапроса);
	Результат = ПрочитатьJSON(ЧтениеJSON);
	
	РегистрыСведений.КомментарийИнтернетЗаказа.ЗаписьКомментария(Объект.Ссылка, ПараметрыСеанса.ТекущийПользователь, СтрокаЗапроса);
	
	Если Результат.Свойство("status")
			И Результат.Свойство("order_id")
			И Результат.status = "success" Тогда 
			
		СтруктураОтвета.ОплатаПроизведена = Истина;
		СтруктураОтвета.Сумма = Результат.amount;
		
		СтрокаКомментария = "Заказ на оплату №" + order_id + " оплачен";
		
		РегистрыСведений.КомментарийИнтернетЗаказа.ЗаписьКомментария(Объект.Ссылка, ПараметрыСеанса.ТекущийПользователь, СтрокаКомментария);
		
	Иначе
		
		Если Результат.Свойство("err_description") Тогда
			
			СтруктураОтвета.ТекстОшибки = "Нет оплаты. Статус: " + Результат.err_description;
			
		Иначе 
			 СтруктураОтвета.ТекстОшибки = "Ошибка запроса. Повторите позже";
			 
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат СтруктураОтвета;

КонецФункции

&НаКлиенте
Процедура ВидимостьКнопкиОплаты() 
	
	ОплатаПриват = Ложь;
	ОтправитьСсылку = Ложь;
	Отменён = Ложь; 
	СсылкаОтправлена = Ложь; 
	
	Если Не Элементы.ОплатаЗаказа.ТекущиеДанные = Неопределено
			И Элементы.ОплатаЗаказа.ТекущиеДанные.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплатыЗаказаПокупателя.Оплата") Тогда
		
		ОплатаПриват = (Элементы.ОплатаЗаказа.ТекущиеДанные.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипОплатыЗаказПокупателя.ОплатаКартойПриват"));
		ОтправитьСсылку = (Элементы.ОплатаЗаказа.ТекущиеДанные.СтатусОплаты = ПредопределенноеЗначение("Перечисление.СтатусОплаты.НеОплачен"));
		СсылкаОтправлена = (Элементы.ОплатаЗаказа.ТекущиеДанные.СтатусОплаты = ПредопределенноеЗначение("Перечисление.СтатусОплаты.ОтправленаСсылка"));
		Отменён = Элементы.ОплатаЗаказа.ТекущиеДанные.Отменён;
		
	КонецЕсли;
	
	Элементы.Оплатить.Видимость = 								ОплатаПриват И ОтправитьСсылку И Не СсылкаОтправлена И Не Отменён;
	Элементы.ПроверитьОплату.Видимость =						ОплатаПриват;
	Элементы.ОплатаЗаказаРедактироватьСуммуОплаты.Видимость = 	ОплатаПриват И Не ОтправитьСсылку И СсылкаОтправлена И Не Отменён;
	
	Элементы.ОплатаЗаказаСтатусОплаты.ТолькоПросмотр = ОплатаПриват; 

КонецПроцедуры

&НаКлиенте
Процедура ОплатаЗаказаПриАктивизацииСтроки(Элемент)
	
	ВидимостьКнопкиОплаты();

КонецПроцедуры

&НаКлиенте
Процедура ОплатаЗаказаПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.Сумма = 0 Тогда
		Отказ = Ложь;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	 
КонецПроцедуры

&НаКлиенте
Процедура ОплатаЗаказаПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	Если Не Элементы.ОплатаЗаказа.ТекущиеДанные = Неопределено 
			И Не Элементы.ОплатаЗаказа.ТекущиеДанные.Отменён Тогда
		Если Элементы.ОплатаЗаказа.ТекущиеДанные.СтатусОплаты = ПредопределенноеЗначение("Перечисление.СтатусОплаты.НеОплачен") Тогда
			Отказ = Ложь; 
		ИначеЕсли Не Элементы.ОплатаЗаказа.ТекущиеДанные.СтатусОплаты = ПредопределенноеЗначение("Перечисление.СтатусОплаты.Оплачен") 
				И Элемент.ТекущийЭлемент.Имя = "ОплатаЗаказаОтменен" Тогда 
			Отказ = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ОплатаЗаказаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Копирование;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсчетДанныхСтрокОплаты(СуммаОплаченныхСтрок, МаксимальныйНомерОплаты)
	Для Каждого СтрокиОплаты Из Объект.ОплатаЗаказа Цикл
		Если Не СтрокиОплаты.Отменён Тогда 
			СуммаОплаченныхСтрок = СуммаОплаченныхСтрок 
				+ СтрокиОплаты.Сумма 
				* ?(СтрокиОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплатыЗаказаПокупателя.Возврат"), -1, 1); 
		КонецЕсли;
		
		Если МаксимальныйНомерОплаты <= СтрокиОплаты.НомерОплаты Тогда
			МаксимальныйНомерОплаты = СтрокиОплаты.НомерОплаты + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОплатаЗаказаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СуммаОплаченныхСтрок = 0; 
		Элемент.ТекущиеДанные.Сумма = СуммаВсегоДляОплаты;
		МаксимальныйНомерОплаты = 0;
		ПодсчетДанныхСтрокОплаты(СуммаОплаченныхСтрок, МаксимальныйНомерОплаты); 
		Элемент.ТекущиеДанные.СтатусОплаты = ПредопределенноеЗначение("Перечисление.СтатусОплаты.НеОплачен");
		Элемент.ТекущиеДанные.НомерОплаты = МаксимальныйНомерОплаты; 
		СуммаСтрокиДляОплаты = 0;
		
		Если СуммаОплаченныхСтрок > СуммаВсегоДляОплаты Тогда 
			СуммаСтрокиДляОплаты = СуммаВсегоДляОплаты - (СуммаОплаченныхСтрок - Элемент.ТекущиеДанные.Сумма); 
			Элемент.ТекущиеДанные.Сумма = СуммаСтрокиДляОплаты;
		КонецЕсли;
		
		Если СуммаСтрокиДляОплаты >= 0 Тогда
			Элемент.ТекущиеДанные.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплатыЗаказаПокупателя.Оплата");
		Иначе
			Элемент.ТекущиеДанные.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплатыЗаказаПокупателя.Возврат");
			Элемент.ТекущиеДанные.Сумма = - СуммаСтрокиДляОплаты;
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОплатаЗаказаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		Если Элемент.ТекущиеДанные.Отменён И Не ПустаяСтрока(Элемент.ТекущиеДанные.ИДОплаты) Тогда
			ОбменСБанкамиLiqPayСервер.ОплатитьНаСервере(Объект.Номер, Объект.Ссылка, НомерТелефонаКлиента, 0, 0, Элемент.ТекущиеДанные.ИДОплаты, Ложь);
			Элемент.ТекущиеДанные.ИДОплаты = "";
		КонецЕсли;
		
		ВидимостьКнопкиОплаты();
		Если Не Элемент.ТекущиеДанные.Отменён Тогда 
			СуммаОплаченныхСтрок = 0; 
			МаксимальныйНомерОплаты = 0;
			ПодсчетДанныхСтрокОплаты(СуммаОплаченныхСтрок, МаксимальныйНомерОплаты);
			Если СуммаОплаченныхСтрок > СуммаВсегоДляОплаты Тогда 
				Элемент.ТекущиеДанные.Сумма = СуммаВсегоДляОплаты - (СуммаОплаченныхСтрок - Элемент.ТекущиеДанные.Сумма); 
			КонецЕсли;   
		КонецЕсли;
	КонецЕсли; 
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСуммуОплаты(Команда)  
	
	Если Не Элементы.ОплатаЗаказа.ТекущиеДанные = Неопределено Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеОтветаНаВопрос",
			ЭтотОбъект);
			
		ПоказатьВопрос(Оповещение,
			"Ссылка на оплату этой суммы отправленна. Для редактирования суммы ссылку нужно удалить. Желаете это сделать?",  // вместо привычного "Вопрос", теперь "ПоказатьВопрос"
			РежимДиалогаВопрос.ДаНет,
			0,  // задержка (секунды). необязательно
			КодВозвратаДиалога.Нет, // задает кнопку по умолчанию. необязательно
			"Редактирование суммы оплаты" // устанавливаем заголовок. необязательно
		);   
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопрос(Результат, Параметры) Экспорт // здесь, думаю, комментировать нечего
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		
		ОбменСБанкамиLiqPayСервер.ОплатитьНаСервере(
			Объект.Номер, 
			Объект.Ссылка, 
			НомерТелефонаКлиента, 
			0, 
			0, 
			Элементы.ОплатаЗаказа.ТекущиеДанные.ИДОплаты, 
			Ложь);
		Элементы.ОплатаЗаказа.ТекущиеДанные.ИДОплаты = "";
		Элементы.ОплатаЗаказа.ТекущиеДанные.СтатусОплаты = ПредопределенноеЗначение("Перечисление.СтатусОплаты.НеОплачен");
		ВидимостьКнопкиОплаты();
		ОбновитьИтоговыеПоказатели(ЭтотОбъект);
		
	КонецЕсли; 

КонецПроцедуры
 
#Область БонусныеБаллы

&НаКлиенте	//	LNK 28.02.2021 08:24:18
Функция ПроверитьВозможностьИспользованияБонусов(ПараметрыОткрытия)

	ТекстСообщения = "";
	
	Если ПустаяСтрока(ПараметрыОткрытия.НомерТелефона) Тогда

		ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС)
		+ "Не указан номер телефона для авторизации.";

	КонецЕсли;

	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда

		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМК("Авторизация невозможна.", ТекстСообщения);

	КонецЕсли;

	Возврат ПустаяСтрока(ТекстСообщения);

КонецФункции

&НаКлиенте
Процедура ОткрытьФормуИспользованияБонусов()	

	ОтменитьРучнуюОплатуБонуснымиБалламиНаСервере();
//	обновим открывающую форму после очистки управляемых типов бонусной оплаты.
	//ФормаОплаты.КомандаИспользованиеБонусовОбновитьДанныеФормы(ПолучитьПараметрыОплатыСуммы(ТабличноеПолеЧеков[0]));
	Если ЗначениеЗаполнено(Объект.Телефон) тогда
		Телефон = Объект.Телефон;	
	Иначе	
		Телефон = ПолучитьНомерТелефона(Объект.Контрагент);	
	КонецЕсли;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Контрагент"			, Объект.ВладелецДисконтнойКарты);
	ПараметрыОткрытия.Вставить("Магазин"			, Объект.Магазин);
	ПараметрыОткрытия.Вставить("ТоварыДляОплаты"	, БонусныеБаллыКлиент.ТоварыДляОплатыБонусами(Объект.Товары,Истина));
	ПараметрыОткрытия.Вставить("НомерТелефона"		, Телефон);

	Если ПроверитьВозможностьИспользованияБонусов(ПараметрыОткрытия) Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаИспользованиеБонусовЗавершение", ЭтаФорма);
		ОткрытьФорму(РМККлиент.КонтекстИмениФормы("Обработка.РМК.Форма.ФормаИспользованиеБонусов", "Интернет заказ")
			, ПараметрыОткрытия
			, ЭтаФорма
			, УникальныйИдентификатор
			,,, ОписаниеОповещения
			, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);

	КонецЕсли;
КонецПроцедуры

&НаСервере	//	LNK 23.06.2021 09:48:36
Функция ОтменитьРучнуюОплатуБонуснымиБалламиНаСервере()	

	ТаблицаОплатаИзменена = БонусныеБаллыВызовСервера.ОчиститьОплатуБонуснымиБаллами(Объект, "Товары", "ОплатаБонуснымиБаллами", БонусныеБаллыПовтИсп.УправляемыеТипыБонусов(), Объект.ОплатаБонуснымиБаллами.Количество() = 0);

	//СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(Объект, "Товары", "СкидкиНаценки");
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

	//ТабличноеПолеЧеков[0].Сумма = Объект.Товары.Итог("СуммаВсего");	//	LNK 23.06.2021 10:35:23

	Возврат ТаблицаОплатаИзменена;

КонецФункции

&НаКлиенте	//	LNK 26.02.2021 13:10:01
Функция КомандаИспользованиеБонусовЗавершение(ДанныеПрименения, ДополнительныеПараметры) Экспорт	

	Если ТипЗнч(ДанныеПрименения) = Тип("Структура") Тогда

		ПрименитьКОбъектуОплатуБонуснымиБаллами(ДанныеПрименения);
		ЗаписатьЧекККМПоВсемДанным(Объект.Организация, ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка"), Истина);

	КонецЕсли;

	//ОтобразитьСкидки();
	//ОбновитьИнформациюОбщейСуммы();

	//ТабличноеПолеЧеков[0].Сумма = Объект.Товары.Итог("СуммаВсего");	//	LNK 23.06.2021 10:35:23
	ЭтаФорма.Прочитать();
	Возврат ПолучитьПараметрыОплатыСуммы();

КонецФункции

&НаСервере
Функция ЗаписатьЧекККМПоВсемДанным(Организация, СтатусЧекаККМ = Неопределено, ЗагрузкаДанных = Ложь)
  ОбъектЧекККМ = РеквизитФормыВЗначение("Объект");

	//Если НЕ ОбъектЧекККМ = Неопределено Тогда

	//	ОбъектЧекККМ.Дата = ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера();

	//Иначе

	//	ОбъектЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
	//	ОбъектЧекККМ.УстановитьСсылкуНового(?(ЧекККМВОбработке.Пустая(), Документы.ЧекККМ.ПолучитьСсылку(), ЧекККМВОбработке));
	//	ОбъектЧекККМ.Дата = ОбщегоНазначенияВызовСервера.ТекущаяДатаСервера();

	//	ЧекККМВОбработке = ОбъектЧекККМ.ПолучитьСсылкуНового();

	//КонецЕсли;
	ЗаполнитьЧекПоВсемДанным(ОбъектЧекККМ);
	
	//ОбъектЧекККМ.РежимРМК      = Истина;
	//ОбъектЧекККМ.Ответственный = ПараметрыСеанса.ТекущийПользователь;

	//Если НЕ СтатусЧекаККМ = Неопределено Тогда

	//	ОбъектЧекККМ.СтатусЧекаККМ = СтатусЧекаККМ;

	//КонецЕсли;

	ОбъектЧекККМ.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(ОбъектЧекККМ.Товары, Объект.ЦенаВключаетНДС);

	Если ЗагрузкаДанных = Истина Тогда

		ОбъектЧекККМ.ОбменДанными.Загрузка = Истина;

	КонецЕсли;

	ОбъектЧекККМ.Записать(РежимЗаписиДокумента.Запись);

	ЧекККМВОбработке = ОбъектЧекККМ.Ссылка;

	Возврат ЧекККМВОбработке;

КонецФункции

&НаСервере
Процедура ЗаполнитьЧекПоВсемДанным(ОбъектЧекККМ)

//	LNK 30.08.2017 15:10:25
	Для каждого СтрокаТовары Из ОбъектЧекККМ.Товары Цикл

		Если СтрокаТовары.ПричинаРучнойСкидки.Пустая() Тогда

			СтрокаТовары.Содержание = "";

		КонецЕсли;
		СтрокаТовары.Сумма =  	СтрокаТовары.Цена*СтрокаТовары.Количество- СтрокаТовары.СуммаАвтоматическойСкидки - СтрокаТовары.СуммаРучнойСкидки -СтрокаТовары.СуммаБонусныхБалловСписано ;
	КонецЦикла;
	
	Объект.СуммаБонусныхБалловСписано = Объект.Товары.Итог("СуммаБонусныхБалловСписано");
	БонусныеБаллыСервер.ЗаполнитьКлючСвязиБонусныхБаллов(Объект.Товары);

	//ЗаполнитьЗначенияСвойств(ОбъектЧекККМ, Объект,, "Ссылка, Дата");
	//
	//ОбработатьТоварыПодарочныеСертификаты("Сохранение");	//	LNK 18.02.2020 11:17:19

	//ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.Товары                         , ОбъектЧекККМ.Товары, Истина);
	//ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.УправляемыеСкидки              , ОбъектЧекККМ.УправляемыеСкидки, Истина);
	//ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.Подарки                        , ОбъектЧекККМ.Подарки, Истина);
	//ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.СкидкиНаценки                  , ОбъектЧекККМ.СкидкиНаценки, Истина);
	//ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.СерийныеНомера                 , ОбъектЧекККМ.СерийныеНомера, Истина);
	//ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.Серии                          , ОбъектЧекККМ.Серии, Истина);
	//ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.Оплата                         , ОбъектЧекККМ.Оплата, Истина);
	//ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.ПогашениеПодарочныхСертификатов, ОбъектЧекККМ.ПогашениеПодарочныхСертификатов, Истина);
	//ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.ПогашениеСкидочныхКупонов	 	 , ОбъектЧекККМ.ПогашениеСкидочныхКупонов, Истина);
	//ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.ВыдачаСкидочныхКупонов	 	 , ОбъектЧекККМ.ВыдачаСкидочныхКупонов, Истина);	//	LNK 19.11.2019 10:59:09
	//ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.НачислениеБонусныхБаллов	 	 , ОбъектЧекККМ.НачислениеБонусныхБаллов, Истина);				//	LNK 01.02.2021 11:28:08
	//ОбщегоНазначенияРТСервер.ЗагрузитьВТаблицуЗначений(Объект.ОплатаБонуснымиБаллами	 	 , ОбъектЧекККМ.ОплатаБонуснымиБаллами, Истина);				//	LNK 01.02.2021 11:28:08

	//ОбработатьТоварыПодарочныеСертификаты("Восстановление");	//	LNK 18.02.2020 15:01:40

	//ДанныеХранилища = Документы.ЧекККМ.ПолучитьДанныеХранилища(ОбъектЧекККМ.Хранилище, Истина);	//	LNK 29.10.2020 05:18:55

	//Для каждого СтрокаОплата Из Объект.Оплата Цикл	//	LNK 29.10.2020 05:47:11

	//	Если НЕ ПустаяСтрока(СтрокаОплата.ОтветЭквайрера) Тогда

	//		ДанныеХранилища.ОтветЭквайрера.Вставить(СтрокаОплата.ВидОплаты, ЗначениеИзСтрокиВнутр(СтрокаОплата.ОтветЭквайрера));

	//	КонецЕсли;

	//КонецЦикла;

	//ОбъектЧекККМ.Хранилище = Новый ХранилищеЗначения(ДанныеХранилища, Новый СжатиеДанных(9));

КонецПроцедуры

&НаСервере	//	LNK 19.06.2021 08:06:42
Процедура ПрименитьКОбъектуОплатуБонуснымиБаллами(ДанныеПрименения)

	ДанныеРаспределения = ПолучитьИзВременногоХранилища(ДанныеПрименения.АдресДанныеРаспределенияВоВременномХранилище);

	БонусныеБаллыВызовСервера.ПрименитьРезультатыРаспределенияОплатыБонуснымиБалламиКОбъекту(Объект, "Товары", "ОплатаБонуснымиБаллами", ДанныеРаспределения);

	Если НЕ Объект.ОплатаБонуснымиБаллами.Количество() = 0 тогда // ИЛИ ЗаказПокупателяЗаполнен(Объект.ЗаказПокупателя, "ЗаказПокупателя")) Тогда  

		БонусныеБаллыВызовСервера.ОчиститьСкидкиНачислениеБонусныхБаллов(Объект, "Товары", "СкидкиНаценки");

		БонусныеБаллыВызовСервера.ПересчитатьНачислениеБонусныхБаллов(Объект);

	КонецЕсли;

	//СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(Объект, "Товары", "СкидкиНаценки");
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);

КонецПроцедуры


&НаКлиенте	//	LNK 23.06.2021 08:49:47
Функция ПолучитьПараметрыОплатыСуммы()

	//Если ПараметрыОткрытия = Неопределено Тогда

		ПараметрыОткрытия = Новый Структура;

	//КонецЕсли;

//	В разных формах оплаты используются разные имена сумм.. оххх! тяжка наша чоловича доля!
	ПараметрыОткрытия.Вставить("ИтогПоОрганизации"	, Объект.Товары.Итог("Сумма"));
	ПараметрыОткрытия.Вставить("ИтогПоЧеку"			, Объект.Товары.Итог("Сумма") - ПолучитьСуммуКупонов());
	ПараметрыОткрытия.Вставить("СуммаИтоговая"		, Объект.Товары.Итог("Сумма"));
	ПараметрыОткрытия.Вставить("СуммаСкидки"		, Объект.Товары.Итог("СуммаАвтоматическойСкидки")+Объект.Товары.Итог("СуммаРучнойСкидки"));

	Возврат ПараметрыОткрытия;

КонецФункции

 
&НаКлиенте	//	LNK 21.09.2017 11:40:09
Функция ПолучитьСуммуКупонов()

	СуммаКупонов = 0;
	
	//Если ЭтоПогашениеКупона Тогда    

	//	СтрокиКупонов = Объект.Товары.НайтиСтроки(Новый Структура("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.СкидочныйКупон")));

	//	Для каждого СтрокаКупона Из СтрокиКупонов Цикл

	//		СуммаКупонов = СуммаКупонов + СтрокаКупона.СуммаВсего;

	//	КонецЦикла; 

	//КонецЕсли; 

	Возврат СуммаКупонов;

КонецФункции


#КонецОбласти

