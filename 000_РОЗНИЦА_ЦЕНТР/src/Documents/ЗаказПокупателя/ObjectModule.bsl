#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// LNK 29.11.2021 16:38:37
// 
// Параметры:
//  Отказ - Булево - Отказ
//  РежимЗаписи - РежимЗаписиДокумента - Режим записи
Процедура УстановитьПериодыНачисленияБонусныхБаллов(Отказ, РежимЗаписи)	Экспорт

	Перем ДанныеПолучения;

	Если НЕ РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

		Возврат;

	КонецЕсли;

	ДополнительныеСвойства.Вставить("ДатаИзмененияСтатуса", Документы.ЗаказПокупателя.ПолучитьДатуИзмененияСтатусаИМ(Ссылка));

//	Нет, статус "Доставлен" установлен ранее НЕ БЫЛ! 
	Если ДополнительныеСвойства.ДатаИзмененияСтатуса = '00010101' Тогда

		Если ДополнительныеСвойства.Свойство("ДанныеПолучения", ДанныеПолучения) Тогда

		//	Сейчас документ загружается от ИМ процедурой "PutOrderBuyer"
			ДополнительныеСвойства.ДатаИзмененияСтатуса = ДанныеПолучения.ДатаИзмененияСтатуса;

		Иначе

		//	всё равно это ни на что не влияет.. если статус не соответствует, соответственно, движений не будет.
			ДополнительныеСвойства.ДатаИзмененияСтатуса = Дата;

		КонецЕсли;

	КонецЕсли;

	Если СтатусИМ = Перечисления.СтатусыИнтернетМагазина.delivered
	И НЕ НачислениеБонусныхБаллов.Количество() = 0
	Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(ТабличнаяЧасть.ПрограммаЛояльности КАК Справочник.ПрограммыЛояльности) КАК ПрограммаЛояльности,
		|	ТабличнаяЧасть.ДатаНачисления КАК ДатаНачисления,
		|	ТабличнаяЧасть.ДатаСписания КАК ДатаСписания,
		|	ТабличнаяЧасть.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов
		|ПОМЕСТИТЬ ТабличнаяЧасть
		|ИЗ
		|	&ТаблицаНачисление КАК ТабличнаяЧасть
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
		|	ТабличнаяЧасть.ПрограммаЛояльности КАК ПрограммаЛояльности,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовДействия > 0
		|			ТОГДА ВЫБОР
		|					КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
		|						ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, ДЕНЬ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
		|					КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
		|						ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, НЕДЕЛЯ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
		|					КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
		|						ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, МЕСЯЦ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
		|					КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|						ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, КВАРТАЛ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
		|					КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
		|						ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, ГОД, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
		|					КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
		|						ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, ДЕКАДА, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
		|					КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
		|						ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, ПОЛУГОДИЕ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
		|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, ЧАС, 1)
		|				КОНЕЦ
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК ДатаСписания,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
		|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
		|		КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
		|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, НЕДЕЛЯ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
		|		КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
		|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
		|		КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, КВАРТАЛ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
		|		КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
		|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, ГОД, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
		|		КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
		|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕКАДА, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
		|		КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
		|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, ПОЛУГОДИЕ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовОтсрочкиНачалаДействия)
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(&Период, ЧАС, 1)
		|	КОНЕЦ КАК ДатаНачисления,
		|	ТабличнаяЧасть.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
		|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовДействия)
		|			КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
		|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, НЕДЕЛЯ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовДействия)
		|			КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
		|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовДействия)
		|			КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, КВАРТАЛ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовДействия)
		|			КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
		|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, ГОД, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовДействия)
		|			КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
		|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕКАДА, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовДействия)
		|			КОГДА ТабличнаяЧасть.ПрограммаЛояльности.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
		|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, ПОЛУГОДИЕ, ТабличнаяЧасть.ПрограммаЛояльности.КоличествоПериодовДействия)
		|			ИНАЧЕ &Период
		|		КОНЕЦ КАК Период,
		|		ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
		|		ТабличнаяЧасть.ПрограммаЛояльности КАК ПрограммаЛояльности,
		|		ТабличнаяЧасть.ДатаНачисления КАК ДатаНачисления,
		|		ТабличнаяЧасть.ДатаСписания КАК ДатаСписания,
		|		ТабличнаяЧасть.СуммаБонусныхБаллов КАК СуммаБонусныхБаллов
		|	ИЗ
		|		ТабличнаяЧасть КАК ТабличнаяЧасть) КАК ТабличнаяЧасть
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТабличнаяЧасть"
		);
		Запрос.УстановитьПараметр("Период"			 , ДополнительныеСвойства.ДатаИзмененияСтатуса);
		Запрос.УстановитьПараметр("ТаблицаНачисление", НачислениеБонусныхБаллов.Выгрузить());
		
		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда

			СтрокиВыборка = РезультатЗапроса.Выбрать();
			
			Пока СтрокиВыборка.Следующий() Цикл

				СтрокаТабличнойЧасти = НачислениеБонусныхБаллов[СтрокиВыборка.НомерСтроки - 1];
				СтрокаТабличнойЧасти.ДатаНачисления = СтрокиВыборка.ДатаНачисления;
				СтрокаТабличнойЧасти.ДатаСписания	= СтрокиВыборка.ДатаСписания;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Отразить движения серийных номеров купонов.
// 
// Параметры:
//  ТаблицаКупоны - ТаблицаЗначений - Таблица купоны
//  Очищать - Булево - Очищать
Процедура ОтразитьДвиженияСерийныхНомеровКупонов(ТаблицаКупоны, Очищать = Ложь) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаКупоны.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаКупоны.СкидочныйКупон КАК Справочник.Номенклатура) КАК СкидочныйКупон,
	|	ТаблицаКупоны.СерийныйНомер КАК СерийныйНомер
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаКупоны КАК ТаблицаКупоны
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(Источник.НомерСтроки) КАК НомерСтроки,
	|	Источник.СкидочныйКупон КАК Купон,
	|	Источник.СерийныйНомер КАК СерийныйНомер,
	|	1 КАК Количество
	|ПОМЕСТИТЬ КупоныДляСписания
	|ИЗ
	|	Источник КАК Источник
	|ГДЕ
	|	Источник.СкидочныйКупон.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.СкидочныйКупон)
	|СГРУППИРОВАТЬ ПО
	|	Источник.СкидочныйКупон,
	|	Источник.СерийныйНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Купоны.НомерСтроки КАК НомерСтроки,
	|	Купоны.Купон,
	|	Купоны.СерийныйНомер КАК СерийныйНомер,
	|	ЕСТЬNULL(ДвиженияСерийныхНомеровКупонов.ЧекККМ, НЕОПРЕДЕЛЕНО) КАК ЧекККМ,
	|	ЕСТЬNULL(ДвиженияСерийныхНомеровКупонов.Магазин, НЕОПРЕДЕЛЕНО) КАК Магазин,
	|	Купоны.Количество
	|ИЗ
	|	КупоныДляСписания КАК Купоны
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДвиженияСерийныхНомеровКупонов КАК ДвиженияСерийныхНомеровКупонов
	|		ПО Купоны.Купон = ДвиженияСерийныхНомеровКупонов.Купон
	|		И Купоны.СерийныйНомер = ДвиженияСерийныхНомеровКупонов.СерийныйНомер
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|ПО
	|	ЧекККМ"
	);
	Запрос.УстановитьПараметр("ТаблицаКупоны", ТаблицаКупоны);

	ДокументВыборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ДокументВыборка.Следующий() Цикл
	
		НаборЗаписей = РегистрыСведений.ДвиженияСерийныхНомеровКупонов.СоздатьНаборЗаписей();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);

		Если ДокументВыборка.ЧекККМ = Неопределено Тогда
			СсылкаНаЧек = Документы.ЧекККМ.ПолучитьСсылку();
		Иначе
			СсылкаНаЧек = ДокументВыборка.ЧекККМ;
		КонецЕсли;

		НаборЗаписей.Отбор.ЧекККМ.Установить(СсылкаНаЧек);
		
		Если Не Очищать Тогда

			КупоныВыборка = ДокументВыборка.Выбрать();
		
			Пока КупоныВыборка.Следующий() Цикл
			
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаписьНабора.ЧекККМ	 = СсылкаНаЧек;
				ЗаписьНабора.Купон	 = КупоныВыборка.Купон;
				ЗаписьНабора.СерийныйНомер	 = КупоныВыборка.СерийныйНомер;
				ЗаписьНабора.Дата	 = ТекущаяДатаСеанса();
				ЗаписьНабора.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.ПогашениеПодарочныхСертификатов;
				Если КупоныВыборка.Магазин = Неопределено Тогда
					ЗаписьНабора.Магазин = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику().ИнтернетМагазин;
				Иначе
					ЗаписьНабора.Магазин = КупоныВыборка.Магазин;
				КонецЕсли;
				ЗаписьНабора.Количество = КупоныВыборка.Количество;
			
			КонецЦикла;
			
		КонецЕсли;

		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	//СЮП 19.05.2024 18.47.01 
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВозвратИнтернетЗаказа") Тогда
		
		СтруктураЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "ДокументОснование, СуммаДокумента");
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураЗаполнения.ДокументОснование);
		Номер = "";
		Дата = ТекущаяДатаСеанса();
		Статус = Перечисления.СтатусыЗаказовПокупателей.ВРаботе;
		ДокументОснование = ДанныеЗаполнения;
		ДатаРезервированияЗаказа = Дата(1, 1, 1);
		СуммаДоставки = 0;
		СуммаДоставкиВРучную = Истина;
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
		
		СуммаОплаты = СтруктураЗаполнения.СуммаДокумента;
		СтатусОплаты = Перечисления.СтатусОплаты.Оплачен;
		
		НоваяСтрока = ОплатаЗаказа.Добавить();
		НоваяСтрока.ВидОплаты = Перечисления.ВидыОплатыЗаказаПокупателя.Оплата;
		НоваяСтрока.НомерОплаты = 0;
		НоваяСтрока.СтатусОплаты = Перечисления.СтатусОплаты.Оплачен;
		НоваяСтрока.ТипОплаты = ТипОплаты;
		НоваяСтрока.Сумма = СтруктураЗаполнения.СуммаДокумента;

	Иначе
		
		ИнициализироватьДокумент(ДанныеЗаполнения);
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ВыполнитьДвиженияКлючевыеАтрибутыЗаказовПокупателей(Отказ);	//	непосредственно перед проведением

	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ЗагрузкаДокументаОтMagento", Ложь) = Истина Тогда

		ПриЗаписиРегистрацияMagento(ДополнительныеСвойства.ДанныеПолучения.ДатаИзмененияСтатуса);

	КонецЕсли;

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.ЗаказПокупателя.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ПодготовитьНаборыЗаписейКРегистрацииДвижений(Отказ, РежимПроведения);	//	локальный метод

	Если УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.Magento Тогда
		
		ПроведениеСервер.ОтразитьДвиженияПоРегистру("ЗаказыПокупателей", ДополнительныеСвойства, Движения, Отказ); 
		
	КонецЕсли;
	
	ПродажиСервер.ОтразитьПродажиПоДисконтнымКартам(ДополнительныеСвойства, Движения, Отказ);

	ПроведениеСервер.ОтразитьДвиженияПоРегистру("БонусныеБаллы", ДополнительныеСвойства, Движения, Отказ); 
	ПроведениеСервер.ОтразитьДвиженияПоРегистру("БонусныеБаллыВРезерве", ДополнительныеСвойства, Движения, Отказ); 
	ПроведениеСервер.ОтразитьДвиженияПоРегистру("СписанныеБонусныеБаллы", ДополнительныеСвойства, Движения, Отказ, "НомерСтрокиДокумента"); 
	ПроведениеСервер.ОтразитьДвиженияПоРегистру("БонусныеБаллыПоЗаказамПокупателей", ДополнительныеСвойства, Движения, Отказ); 
	
	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	ДополнительныеСвойства.Вставить("Отказ", Отказ);
	Если Не Отказ тогда 
		ПроверитьЗаписьВРССтатусы(Ссылка,Ответственный,Статус);	
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;

	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, "Товары");
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, "Подарки");
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);

	МассивНепроверяемыхРеквизитов.Добавить("Товары.ПричинаОтмены");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ПричинаРучнойСкидки");
	
	Для ТекИндекс = 0 По Товары.Количество()-1 Цикл
		
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Товары""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Товары[ТекИндекс].НомерСтроки);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПокупателей") Тогда	
			
			// Причина отмены обязательна для заполнения в строках без признака Отменено.
			Если Товары[ТекИндекс].Отменено 
				И НЕ ЗначениеЗаполнено(Товары[ТекИндекс].ПричинаОтмены) Тогда
				
				ТекстОшибки = НСтр("ru='Необходимо указать причину отмены'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "ПричинаОтмены"),
					,
					Отказ
					);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не Товары[ТекИндекс].ПроцентРучнойСкидки = 0
			И НЕ ЗначениеЗаполнено(Товары[ТекИндекс].ПричинаРучнойСкидки)
			И Не Товары[ТекИндекс].Отменено Тогда
			
			ТекстОшибки = НСтр("ru='Необходимо указать причину ручной скидки'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "ПричинаРучнойСкидки"),
				,
				Отказ
				);
			
		КонецЕсли;
		
			
	КонецЦикла;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.МагазинПолучатель");
	МассивНепроверяемыхРеквизитов.Добавить("Телефон");
	МассивНепроверяемыхРеквизитов.Добавить("Город");
	МассивНепроверяемыхРеквизитов.Добавить("Отделение");
	МассивНепроверяемыхРеквизитов.Добавить("Улица");
	МассивНепроверяемыхРеквизитов.Добавить("Дом");
	МассивНепроверяемыхРеквизитов.Добавить("ДатаРезервированияЗаказа");
	МассивНепроверяемыхРеквизитов.Добавить("ПричинаОтмены");
	
	Если УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.Розница Тогда
		
		Если Статус = Перечисления.СтатусыЗаказовПокупателей.Отменён
				И ПричинаОтмены.Пустая() Тогда
					
			ТекстОшибки = НСтр("ru='Необходимо указать причину отмены заказа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"ПричинаОтмены",
				,
				Отказ
				);

		КонецЕсли;

		Если Не (Статус = Перечисления.СтатусыЗаказовПокупателей.Новый
				Или Статус = Перечисления.СтатусыЗаказовПокупателей.ВРаботе
				Или Статус = Перечисления.СтатусыЗаказовПокупателей.Отменён
				Или Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт) Тогда
	
			Для ТекИндекс = 0 По Товары.Количество()-1 Цикл
				
				АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Товары""'");
				АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Товары[ТекИндекс].НомерСтроки);
				
				// Причина отмены обязательна для заполнения в строках без признака Отменено.
				Если (ТипДоставки = Перечисления.ТипДоставкиЗаказПокупателя.Самовывоз
					Или (ТипДоставки = Перечисления.ТипДоставкиЗаказПокупателя.Смешаный 
						И Товары[ТекИндекс].Самовывоз))
					И НЕ ЗначениеЗаполнено(Товары[ТекИндекс].МагазинПолучатель)
					И Не Товары[ТекИндекс].Отменено Тогда
					
					ТекстОшибки = НСтр("ru='Необходимо указать магазин самовывоза'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки + АдресОшибки,
						ЭтотОбъект,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "МагазинПолучатель"),
						,
						Отказ
						);
					
				КонецЕсли;
				
				Если Товары[ТекИндекс].Склад.Пустая() И Не Товары[ТекИндекс].Отменено Тогда
					
					ТекстОшибки = НСтр("ru='Необходимо указать склад отгрузки товара'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки + АдресОшибки,
						ЭтотОбъект,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "Склад"),
						,
						Отказ
						);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		КоличествоДней = (НачалоДня(ДатаРезервированияЗаказа) - НачалоДня(ТекущаяДатаСеанса()))/(24 * 60 * 60);
		
		Если КоличествоДней > 31 Тогда
		
			ТекстОшибки = НСтр("ru='Не можна встановлювати дату більше ніж на 31 день..'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"ДатаРезервированияЗаказа",
				,
				Отказ
				);

		КонецЕсли;

		Для ТекИндекс = 0 По Товары.Количество()-2 Цикл
			Для ТекИндекПроверки = ТекИндекс+1 По Товары.Количество()-1 Цикл

				АдресОшибки = НСтр("ru=' В строках %НомерСтроки1% и %НомерСтроки2% списка ""Товары""'");
				АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки1%", Товары[ТекИндекс].НомерСтроки);
				АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки2%", Товары[ТекИндекПроверки].НомерСтроки);
			
				Если Не Товары[ТекИндекс].Склад.Пустая()
						И Не Товары[ТекИндекс].Отменено
						И Не Товары[ТекИндекПроверки].Склад.Пустая()
						И Не Товары[ТекИндекПроверки].Отменено
						И Товары[ТекИндекс].Склад = Товары[ТекИндекПроверки].Склад
						И Товары[ТекИндекс].Номенклатура = Товары[ТекИндекПроверки].Номенклатура Тогда
				
					ТекстОшибки = НСтр("ru='Товар в разных строках не может отправлятся с одного склада.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки + АдресОшибки,
						ЭтотОбъект,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекПроверки].НомерСтроки, "Склад"),
						,
						Отказ
						);
					
				КонецЕсли;
				
			КонецЦикла; 
		КонецЦикла; 
	
		Если Не ТипДоставки = Перечисления.ТипДоставкиЗаказПокупателя.Самовывоз
				И Не (ОператорДоставки = Перечисления.ОператорыДоставки.МеждународнаяДоставка
					Или ОператорДоставки = Перечисления.ОператорыДоставки.ДоставкаКурьером) Тогда
			
			Если Не СтрДлина(СокрЛП(Телефон)) = 12 Тогда

				ТекстОшибки = НСтр("ru='Неверно указан номер телефона клиента для службы доставки'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект,
					"Телефон",
					,
					Отказ
					);
				
			КонецЕсли;
			
			Если (ТипЗнч(Город) = Тип("Строка") И ПустаяСтрока(Город))
					Или (ТипЗнч(Город) = Тип("СправочникСсылка.Города") И Город.Пустая()) Тогда

				ТекстОшибки = НСтр("ru='Не выбран город доставки'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект,
					"Город",
					,
					Отказ
					);
				
			КонецЕсли;
			
			Если ДоставкаНаАдрес Тогда
				
				Если (ТипЗнч(Улица) = Тип("Строка") И ПустаяСтрока(Улица))
						Или (ТипЗнч(Улица) = Тип("СправочникСсылка.Улицы") И Улица.Пустая()) Тогда

					ТекстОшибки = НСтр("ru='Не выбрана улица доставки'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ЭтотОбъект,
						"Улица",
						,
						Отказ
						);
					
				КонецЕсли;
				
				Если ПустаяСтрока(Дом) Тогда
		
					ТекстОшибки = НСтр("ru='Не выбран дом доставки'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ЭтотОбъект,
						"Дом",
						,
						Отказ
						);
					
				КонецЕсли;
				
			Иначе
				
				Если (ТипЗнч(Отделение) = Тип("Строка") И ПустаяСтрока(Отделение))
						Или ((ТипЗнч(Отделение) = Тип("СправочникСсылка.Отделения") Или ТипЗнч(Отделение) = Тип("СправочникСсылка.Почтоматы"))
							 И Отделение.Пустая()) Тогда

					ТекстОшибки = НСтр("ru='Не выбрано отделение доставки'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ЭтотОбъект,
						"Отделение",
						,
						Отказ
						);
					
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;
	
	КонецЕсли;
	
	Если Не УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.Розница Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ТипДоставки");
		
	КонецЕсли;
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбработкаУдаленияПроведенияСПараметром(Отказ, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения) 
	
	Если Не ЭтоНовый() И ПустаяСтрока(НомерЗаказаНаСайте) Тогда 
		
		НомерЗаказаНаСайте = Номер;
		НомерЗаказаОсновной = Номер;
		ДатаЗаказаНаСайте = Дата;
		
	КонецЕсли;
	
	Если УчетнаяСистема.Пустая()
		И Не Статус = Перечисления.СтатусыЗаказовПокупателей.Новый Тогда 
		
		//Сделать проверку не обрабатывается ли заказ в Мадженте. Если нет, то меняем учетную систему. 
		Если СтатусИМ = Перечисления.СтатусыИнтернетМагазина.pending
				Или СтатусИМ = Перечисления.СтатусыИнтернетМагазина.paid Тогда
			
			УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.Розница; 
			
			Если Не (ТипДоставки = Перечисления.ТипДоставкиЗаказПокупателя.Самовывоз
					Или ТипДоставки = Перечисления.ТипДоставкиЗаказПокупателя.Смешаный) Тогда
				
				ТипДоставки = Перечисления.ТипДоставкиЗаказПокупателя.СлужбаДоставки;
			
			КонецЕсли;
			
		Иначе 
			
			УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.Magento;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.Розница Тогда
		
		Для Каждого СтрокаТЧ Из Товары Цикл 
		
			Если Не ТипДоставки = Перечисления.ТипДоставкиЗаказПокупателя.Смешаный Тогда 
				СтрокаТЧ.Самовывоз = (ТипДоставки = Перечисления.ТипДоставкиЗаказПокупателя.Самовывоз);
			КонецЕсли;
		
		КонецЦикла;
	КонецЕсли;

//	LNK 16.02.2017 14:33:05
	ЗаполнениеОбъектовСобытия.ОбщиеДействияПередЗаписью(ЭтотОбъект, Отказ);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый"	 , ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	ДополнительныеСвойства.Вставить("Отказ"		 , Отказ);
	ДополнительныеСвойства.Вставить("УчетнаяПолитика", ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику());

	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ЗагрузкаДокументаОтMagento", Ложь) = Истина Тогда

	//	Ключевые атрибуты здесь не проверяем, так как запись в регистр всё равно нужно сделать
		УстановитьПроцентыСуммСкидокДляТовары();
		ЗаписьКомментарияПоДокументу(); 
		ЗаказыПокупателейСервер.ЗаполнитьКлючСвязиЗапросаДоступности(Товары, ЭтоНовый());
		СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(ЭтотОбъект, "Товары");
		КонтрольОплаты();	

		Возврат;

	КонецЕсли;

//	LNK 25.10.2018 09:40:38	- при загрузке из файла на периферии, если клиент не найден,
//	в заказе устанавливается предопределённое "Розничный покупатель". Заказ попадает в ЦБ,
//	где должен быть создан нужный клиент и установлен для текущего заказа.
//	А в это время пробивают чек.. если заказ уже приехал из ЦБ, то вновь установленного
//	потерять нельзя.. что и делаем в процедуре ниже. Предохранитель, в общем.
	ВосстановитьПокупателяПоСсылке();
	
	Если ОбменДанными.Загрузка Тогда
		
		Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() И ЗначениеЗаполнено(ОбменДанными.Отправитель) И НЕ ЭтоНовый() Тогда

		//	скорее всего, это обычный обмен между центром и периферией
			КлючевыеАтрибутыЗаказаПоСсылке();	//	LNK 26.12.2021 06:06:09

		КонецЕсли;

		Возврат;
		
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		
		ОбменMagentoСервер.РегистрацияМаркетенговойГруппыКлиента(Контрагент);
		
	КонецЕсли;

	ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(ЭтотОбъект, "Товары");

	Для каждого НаборЗаписей Из Движения Цикл

		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);

	КонецЦикла;
	
	//	В режиме "ЗагрузкаДокументаОтMagento" эта процедура вызывается из записывающего модуля.
	УстановитьПериодыНачисленияБонусныхБаллов(Отказ, РежимЗаписи);	//	LNK 29.11.2021 16:37:58

	УстановитьПроцентыСуммСкидокДляТовары();
	
	ПолучитьОкругленияИзЗапросаДоступности();

	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	
	РозничныеПродажиСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Товары");
	
	ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
		ЭтотОбъект,
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС),
		"СуммаДокумента");

	КлючевыеАтрибутыЗаказаПоСсылке();	//	LNK 11.11.2021 08:15:00 
		
	//	LNK 06.12.2017 14:18:06
	Если ЭтоНовый() И НЕ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "НеИзменятьФлагиРезервирования", Ложь)
			ИЛИ
		НЕ ЭтоНовый() И Дата < '20171212'	//	пока такая отсечка - до тех пор, пока ИМ не будет выгружать такие флаги
	Тогда

		Для каждого СтрокаТабличнойЧасти Из Товары Цикл

			СтрокаТабличнойЧасти.Резервировать = Истина;

		КонецЦикла;

	КонецЕсли;

	БонусныеБаллыСервер.ЗаполнитьКлючСвязиБонусныхБаллов(Товары);	//	LNK 18.06.2021 11:29:37
	ЗаказыПокупателейСервер.ЗаполнитьКлючСвязиЗапросаДоступности(Товары, ЭтоНовый());	
	ДополнительныеСвойства.Отказ = Отказ;	//	скорректируем возможный отказ
	
	Если Статус = Перечисления.СтатусыЗаказовПокупателей.ЗапросДоступности Тогда 
		
		ЗаполнитьОбеспечениеЗаказа();  
		
	КонецЕсли; 
	
	ИзменениеОтветственного();  
	// Корректировка для наличной оплаты

	КонтрольОплаты();

	ЗаписьКомментарияПоДокументу(); 
	
	//СЮП 07.02.2024 15.04.23 
	//https://awdev.atlassian.net/browse/RETAIL1C-602
	Если УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.Розница
			И Статус = Перечисления.СтатусыЗаказовПокупателей.Отменён Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЭлектроннаяНакладная.Ссылка
			|ИЗ
			|	РегистрСведений.СтатусыЭН.СрезПоследних КАК СтатусыЭНСрезПоследних
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяНакладная КАК ЭлектроннаяНакладная
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров КАК ЗапросДоступностиТоваров
			|			ПО ЭлектроннаяНакладная.ДокументОснование = ЗапросДоступностиТоваров.Ссылка
			|		ПО СтатусыЭНСрезПоследних.ДокументРегистратор = ЭлектроннаяНакладная.Ссылка
			|ГДЕ
			|	ЭлектроннаяНакладная.ЗаказПокупателя = &ЗаказПокупателя
			|	И (НЕ (СтатусыЭНСрезПоследних.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(перечисление.СтатусыПосылокСлужбыДоставки.Новая)
			|	ИЛИ СтатусыЭНСрезПоследних.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(перечисление.СтатусыПосылокСлужбыДоставки.Отменена)))
			|	И НЕ ЗапросДоступностиТоваров.ОператорДоставки = ЗНАЧЕНИЕ(Перечисление.ОператорыДоставки.ВнутренняяЛогистика)";
		
		Запрос.УстановитьПараметр("ЗаказПокупателя", Ссылка);
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Скасувати замовлення не можна! Є відправлення клієнту поштою.';
				|		uk = 'Скасувати замовлення не можна! Є відправлення клієнту поштою.'"));
			Отказ = Истина;
			
		КонецЕсли;

	КонецЕсли;

	//СЮП 18.03.2024 21.13.46 
	Если УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.Розница
		И Не (Статус = Перечисления.СтатусыЗаказовПокупателей.Новый
			Или Статус = Перечисления.СтатусыЗаказовПокупателей.ВРаботе
			Или Статус = Перечисления.СтатусыЗаказовПокупателей.Отменён) Тогда
		
		ФизЛицо = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ЮрФизЛицо") = Перечисления.ЮрФизЛицо.ФизЛицо);
		БезНалОплата = (ТипОплаты = Перечисления.ТипОплатыЗаказПокупателя.БРПостоплата
					Или ТипОплаты = Перечисления.ТипОплатыЗаказПокупателя.БРПредоплата);
					
		Если (ФизЛицо И БезНалОплата) Или (Не ФизЛицо И Не БезНалОплата) Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Тип оплати не відповідає типу контрагента!';
				|		uk = 'Тип оплати не відповідає типу контрагента!'"));
			Отказ = Истина;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 06.12.2017 14:19:59
Процедура ПриЗаписи(Отказ)
	
	Если ДополнительныеСвойства.Свойство("ТекстКомментарияСтруктура") Тогда 

		РегистрыСведений.КомментарийИнтернетЗаказа.ЗаписьКомментария(Ссылка,
														ДополнительныеСвойства.ТекстКомментарияСтруктура.Пользователь,
														ДополнительныеСвойства.ТекстКомментарияСтруктура.ТекстКомментария);

	КонецЕсли;

	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() И Не ОбменДанными.Загрузка Тогда

		ОтразитьДвиженияСерийныхНомеровКупонов(ПогашениеСкидочныхКупонов.Выгрузить());
		РегистрыСведений.СостояниеЗаказаПокупателя.ЗаписьСостояния(ЭтотОбъект);

	КонецЕсли;

	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ЗагрузкаДокументаОтMagento", Ложь) = Истина Тогда

		Если НЕ ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

			ВыполнитьДвиженияКлючевыеАтрибутыЗаказовПокупателей(Отказ);	//	непосредственно перед проведением

			ПриЗаписиРегистрацияMagento(ДополнительныеСвойства.ДанныеПолучения.ДатаИзмененияСтатуса);
		
		КонецЕсли;
		
		ЗаписьВРегистрОплаты();
		Документы.ЗапросДоступностиТоваров.СозданиеИзменениеЗапросовДоступности(Ссылка);

		Возврат;

	КонецЕсли;

//	LNK 24.10.2018 14:47:58
	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ПередатьВЦентр", Ложь) = Истина Тогда


		//	Не нагружаем текущий сеанс и исключаем ошибки в вызываемых методах - если и возникнет ошибка, то возникнет она в другом процессе. 
			ФоновыеЗадания.Выполнить("ТехническаяПоддержка.НазначитьОбъектуДействие", ОбщегоНазначенияКлиентСервер.AAD(Ссылка, Неопределено, "ПЕРЕДАТЬ_В_ЦЕНТР", Истина, ПараметрыСеанса.ТекущийПользователь));

		КонецЕсли;

		Если ДополнительныеСвойства.Свойство("РеквизитыПокупателя")
		И НЕ ДополнительныеСвойства.РеквизитыПокупателя.Идентифицирован Тогда

			РегистрыСведений.ДанныеКонтрагентовОтложенные.ВыполнитьРегистрацию(Ссылка, ДополнительныеСвойства.РеквизитыПокупателя, Перечисления.НазначениеКонтрагентовОтложенных.Magento);

		КонецЕсли;

	КонецЕсли;

	ПриЗаписиРегистрацияMagento();	//	LNK 05.12.2021 04:13:33

	Если ОбменДанными.Загрузка Тогда
		
		Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел()	//	LNK 24.11.2021 12:58:26
		И	(ЗначениеЗаполнено(ОбменДанными.Отправитель) ИЛИ ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ДвиженияРасширеннойАналитикиПродаж", Ложь) = Истина)
		Тогда

			Если Проведен Тогда

					ВыполнитьДвиженияКлючевыеАтрибутыЗаказовПокупателей(Отказ);	//	непосредственно перед проведением

					Документы.ЗаказПокупателя.ВыполнитьДвиженияРасширеннойАналитикиПродаж(Ссылка, Дата, Истина);

			Иначе	ОбработкаУдаленияПроведенияСПараметром(Отказ, Ложь);

			КонецЕсли;

		КонецЕсли;

		Возврат;

	КонецЕсли;
	
	ЗаписьВРегистрОплаты();

	Если НЕ ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

		ВыполнитьДвиженияКлючевыеАтрибутыЗаказовПокупателей(Отказ);	//	непосредственно перед проведением
	
	КонецЕсли; 
	
	Если ДополнительныеСвойства.Свойство("МассивКомментарийСтрок") Тогда 
		Для Каждого СтрокаКомментария Из ДополнительныеСвойства.МассивКомментарийСтрок Цикл 
			
			СтрокаКомментария.Документ = Ссылка;
			СтрокаКомментария.Автор = ПараметрыСеанса.ТекущийПользователь;
			СтрокаКомментария.Дата = ТекущаяДатаСеанса();
			
			РегистрыСведений.КомментарийПоСтрокам.ЗаписьКомментария(СтрокаКомментария, Истина);
			
		КонецЦикла;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("МассивЦеныCompeteraОтвет") Тогда 
		
		Для Каждого СтрокаКомментария Из ДополнительныеСвойства.МассивЦеныCompeteraОтвет Цикл 
			
			РегистрыСведений.КомментарийИнтернетЗаказа.ЗаписьКомментария(Ссылка,
															ПараметрыСеанса.ТекущийПользователь,
															СтрокаКомментария);

		КонецЦикла;
	КонецЕсли;

	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда
		
		Документы.ЗапросДоступностиТоваров.СозданиеИзменениеЗапросовДоступности(Ссылка);
		
	КонецЕсли;

	ФоновыеЗадания.Выполнить("РезервированиеТоваровСервер.ПроверитьЗаказПокупателяВПеремещенииТоваров", ОбщегоНазначенияКлиентСервер.AAD(Ссылка, СокрЛП(Номер), Дата, Магазин));

КонецПроцедуры

// Процедура - обработчик события "ПриКопировании".
//
Процедура ПриКопировании(ОбъектКопирования)
	
	СкидкиРассчитаны = Ложь;
	ЧастичнаяПродажа = Ложь;
	СкидкиНаценкиСервер.ОтменитьСкидки(ЭтотОбъект, "Товары", "ОплатаБонуснымиБаллами");
	
	Статус = Перечисления.СтатусыЗаказовПокупателей.Новый;
	СтатусИМ = Перечисления.СтатусыИнтернетМагазина.pending;
	ДатаРезервированияЗаказа = Дата(1, 1, 1);
	
	УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.ПустаяСсылка();
	
	НомерЗаказаНаСайте = "";
	НомерЗаказаОсновной = "";
	ДатаЗаказаНаСайте = "";
	СуммаБонусныхБалловСписано = 0;
	
	Подарки.Очистить();
	ПогашениеСкидочныхКупонов.Очистить();
	ОплатаЗаказа.Очистить();
	СерийныеНомера.Очистить();
	ВыдачаСкидочныхКупонов.Очистить();
	ОплатаБонуснымиБаллами.Очистить();
	НачислениеБонусныхБаллов.Очистить();
	
	МаксимальныйКодСтроки = 0;
	
	Для каждого ЭлементТовары Из Товары Цикл
		
		ЭлементТовары.Отменено 			= Ложь;
		ЭлементТовары.Резервировать 	= Ложь;
		ЭлементТовары.ПричинаОтмены 	= Справочники.ПричиныОтменыЗаказовПокупателей.ПустаяСсылка();
		ЭлементТовары.КодСтроки 		= 0;
		ЭлементТовары.Склад 			= Справочники.Склады.ПустаяСсылка();
		ЭлементТовары.МагазинПолучатель = Справочники.Магазины.ПустаяСсылка();

	КонецЦикла;
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Если ПустаяСтрока(Номер) Тогда
		
		СтандартнаяОбработка = Ложь;
		УстановитьПривилегированныйРежим(Истина);
		НовыйНомер = Константы.ПоследнийНомерИнтернетЗаказа.Получить() + 1;
		Номер = Строка(Формат(НовыйНомер,"ЧГ=;"));
		Константы.ПоследнийНомерИнтернетЗаказа.Установить(НовыйНомер);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Инициализирует документ
//
Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
		Если ДанныеЗаполнения.Свойство("Магазин")
			И НЕ ЗначениеЗаполнено(Магазин) Тогда
			Склад  = ЗначениеНастроекПовтИсп.ПолучитьСкладПродажиПоУмолчанию(ДанныеЗаполнения.Магазин,,Склад, Ответственный);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("Организация")
			И НЕ ЗначениеЗаполнено(Организация) Тогда
			БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ДанныеЗаполнения.Организация,,БанковскийСчетОрганизации);
		КонецЕсли;
		
		Номер = "";
	КонецЕсли;
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	УчетнаяПолитика = ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику();

//	Магазин       = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Магазин);
//	Организация   = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация,Ответственный);
//	Склад         = ЗначениеНастроекПовтИсп.ПолучитьСкладПродажиПоУмолчанию(Магазин,,Склад, Ответственный);
	Магазин       = УчетнаяПолитика.ИнтернетМагазин;
	Организация   = УчетнаяПолитика.ОрганизацияИнтернетМагазина;
	Склад         = УчетнаяПолитика.СкладПродажиИнтернетМагазина;
	БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация,,БанковскийСчетОрганизации);
	Продавец      = ЗначениеНастроекПовтИсп.ПолучитьПродавцаПоУмолчанию(Ответственный, Продавец);

	Если УчетнаяСистема.Пустая() Тогда

		УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.Розница;

	КонецЕсли;

КонецПроцедуры

// Процедура формирует массив имен регистров для контроля проведения.
//
Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;
	
	// При проведении выполняется контроль превышения остатков на складах.
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И НЕ ДополнительныеСвойства.Свойство("ЗагрузкаДанныхИзРабочегоМеста") Тогда
		
		Массив.Добавить(Движения.ТоварыНаСкладах);
		Массив.Добавить(Движения.ЗаказыПокупателей);
		
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Процедура УстановитьПроцентыСуммСкидокДляТовары()	//	LNK 21.11.2021 07:04:54

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл

		СуммаБезСкидок = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.КоличествоУпаковок;

		Если НЕ СуммаБезСкидок = 0 Тогда

			СтрокаТабличнойЧасти.ПроцентРучнойСкидки		 = 100 * СтрокаТабличнойЧасти.СуммаРучнойСкидки / СуммаБезСкидок;
			СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 100 * СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки / СуммаБезСкидок;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//	LNK 25.10.2018 09:41:14
Процедура ВосстановитьПокупателяПоСсылке()

	Если НЕ ЭтоНовый() И Контрагент = Справочники.Контрагенты.РозничныйПокупатель Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.ДисконтнаяКарта КАК ДисконтнаяКарта
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &ТекущийДокумент
		|	И НЕ ТаблицаДокумента.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.РозничныйПокупатель)"
		);
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда

			Контрагент = Выборка.Контрагент;
			ДисконтнаяКарта = Выборка.ДисконтнаяКарта;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//	LNK 11.11.2021 08:08:43
Процедура ВыполнитьДвиженияКлючевыеАтрибутыЗаказовПокупателей(Отказ)

	Перем КлючевыеАтрибуты, ДанныеПолучения;

	Если ОбменДанными.Загрузка И УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.Розница Тогда

		Возврат;

	КонецЕсли;

	ВыполнитьДвижение = Истина; 
	
	НовоеСостояние = Документы.ЗаказПокупателя.ПолучитьСостояниеЗаказаПокупателя(Ссылка);

	Если НЕ ДополнительныеСвойства.Свойство("ДанныеПолучения", ДанныеПолучения)
	И	 ДополнительныеСвойства.Свойство("КлючевыеАтрибуты", КлючевыеАтрибуты)
	И НЕ КлючевыеАтрибуты = Неопределено	Тогда

		АтрибутыРавны = Истина;

		Для каждого КлючЗначение Из КлючевыеАтрибуты Цикл

			Если КлючЗначение.Ключ = "СлужебныйЕстьЗаписи" Тогда

				Продолжить;

			КонецЕсли;

			Если КлючЗначение.Ключ = "Состояние" Тогда
				Если Не КлючЗначение.Значение = НовоеСостояние.Состояние Тогда 
					АтрибутыРавны = Ложь;
					Прервать;
				КонецЕсли;

			ИначеЕсли НЕ КлючЗначение.Значение = ЭтотОбъект[КлючЗначение.Ключ] Тогда

				АтрибутыРавны = Ложь;
				Прервать;

			КонецЕсли;

		КонецЦикла;

		Если АтрибутыРавны = Истина Тогда

			ВыполнитьДвижение = Ложь;

		КонецЕсли;

	КонецЕсли;

	Если ВыполнитьДвижение Тогда

		НаборЗаписей = РегистрыСведений.КлючевыеАтрибутыЗаказовПокупателей.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Отбор.Период.Установить(?(ДанныеПолучения = Неопределено, ТекущаяДатаСеанса(), ДанныеПолучения.ДатаПередачи));
		НаборЗаписей.Отбор.ЗаказПокупателя.Установить(Ссылка);

	//	LNK 24.05.2023 06:43:55
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПроверкаРезервовПолная", Новый Структура("Проверить", Истина));

		ЗаписьНабора = НаборЗаписей.Добавить();

		ЗаписьНабора.Период			 = НаборЗаписей.Отбор.Период.Значение;
		ЗаписьНабора.ЗаказПокупателя = НаборЗаписей.Отбор.ЗаказПокупателя.Значение;

		Если ДополнительныеСвойства.Свойство("Авторство") Тогда

			ЗаписьНабора.Автор		  = ДополнительныеСвойства.Авторство.Автор;
			ЗаписьНабора.УзелСоздания = ДополнительныеСвойства.Авторство.УзелСоздания;

		Иначе

			ЗаписьНабора.Автор		  = ПараметрыСеанса.ТекущийПользователь;
			ЗаписьНабора.УзелСоздания = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().ЭлементСтруктуры;

		КонецЕсли;

		ЗаписьНабора.ДатаИзменения	 = ТекущаяДатаСеанса();

		Для каждого Ресурс Из Метаданные.РегистрыСведений.КлючевыеАтрибутыЗаказовПокупателей.Ресурсы Цикл

			Если Ресурс.ЗаполнятьИзДанныхЗаполнения Тогда

				Попытка  
					
					Если Ресурс.Имя = "Состояние" Тогда
						
						ЗаписьНабора[Ресурс.Имя] = НовоеСостояние.Состояние;

					Иначе
						
						ЗаписьНабора[Ресурс.Имя] = ЭтотОбъект[Ресурс.Имя];
						
					КонецЕсли;   
					
				Исключение

				//	мало-ли.. вдруг когда-то кто-то забыл об использовании свойства "ЗаполнятьИзДанныхЗаполнения"
					ТекстОшибки = ОписаниеОшибки();

				КонецПопытки;

			КонецЕсли;

		КонецЦикла;

		Если ДанныеПолучения = Неопределено Тогда

				ЗаписьНабора.ВнутреннееИзменение  = Истина;
				ЗаписьНабора.ДатаИзмененияСтатуса = '00010101';
				ЗаписьНабора.ДатаПередачи		  = '00010101';

		Иначе	ЗаписьНабора.ВнутреннееИзменение  = ?(ДанныеПолучения.Свойство("ВнутреннееИзменение"), ДанныеПолучения.ВнутреннееИзменение, Ложь);
				ЗаписьНабора.ДатаИзмененияСтатуса = ДанныеПолучения.ДатаИзмененияСтатуса;
				ЗаписьНабора.ДатаПередачи		  = ДанныеПолучения.ДатаПередачи;

				Если КоррекцияНачисленийПоПродаже Тогда

					ЗаписьНабора.Примечание = "ТЧ_НЕ_ИЗМЕНЕНЫ";

				КонецЕсли;

		КонецЕсли;

		НаборЗаписей.Записать();

	КонецЕсли;

КонецПроцедуры

//	LNK 11.11.2021 08:10:53
Процедура КлючевыеАтрибутыЗаказаПоСсылке()

	ДополнительныеСвойства.Вставить("КлючевыеАтрибуты");

	Если НЕ ДополнительныеСвойства.ЭтоНовый Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаДокумента.ДатаЗаказаНаСайте КАК ДатаЗаказаНаСайте,
		|	ТаблицаДокумента.ДатаРезервированияЗаказа КАК ДатаРезервированияЗаказа,
		|	ТаблицаДокумента.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.КоррекцияНачисленийПоПродаже КАК КоррекцияНачисленийПоПродаже,
		|	ТаблицаДокумента.Магазин КАК Магазин,
		|	ТаблицаДокумента.МагазинПолучатель КАК МагазинПолучатель,
		|	ТаблицаДокумента.НомерЗаказаНаСайте КАК НомерЗаказаНаСайте,
		|	ТаблицаДокумента.НомерЗаказаОсновной КАК НомерЗаказаОсновной,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Проведен КАК Проведен,
		|	ТаблицаДокумента.Статус КАК Статус,
		|	ТаблицаДокумента.СтатусИМ КАК СтатусИМ,
		|	ТаблицаДокумента.СтатусОплаты КАК СтатусОплаты,
		|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента,
		|	ТаблицаДокумента.СуммаДоставки КАК СуммаДоставки,
		|	ТаблицаДокумента.СуммаДоставкиОператор КАК СуммаДоставкиОператор,
		|	ТаблицаДокумента.СуммаДоставкиОплачена КАК СуммаДоставкиОплачена,
		|	ТаблицаДокумента.СуммаОплаты КАК СуммаОплаты,
		|	ТаблицаДокумента.ТипДоставки КАК ТипДоставки,
		|	ТаблицаДокумента.ТипОплаты КАК ТипОплаты,
		|	ВЫБОР
		|		КОГДА ТаблицаКлючевыеАтрибуты.ЗаказПокупателя ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК СлужебныйЕстьЗаписи,
		|	ТаблицаКлючевыеАтрибуты.Состояние КАК Состояние
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлючевыеАтрибутыЗаказовПокупателей.СрезПоследних КАК ТаблицаКлючевыеАтрибуты
		|		ПО ТаблицаДокумента.Ссылка = ТаблицаКлючевыеАтрибуты.ЗаказПокупателя
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &ТекущаяСсылка"
		);
		Запрос.УстановитьПараметр("ТекущаяСсылка", Ссылка);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда

			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();

			Если Выборка.СлужебныйЕстьЗаписи = Истина Тогда	//	а иначе всё равно записать нужно!

				ДополнительныеСвойства.КлючевыеАтрибуты = Новый Структура;

				Для каждого Колонка Из РезультатЗапроса.Колонки Цикл

					ДополнительныеСвойства.КлючевыеАтрибуты.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);

				КонецЦикла;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаписьКомментарияПоДокументу()
	
	ТекстКомментарияСтруктура = Новый Структура;
	ТекстКомментарияСтруктура.Вставить("ТекстКомментария", "");
	ТекстКомментарияСтруктура.Вставить("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	

	Если ЭтоНовый() Тогда // Объект еще не был записан   

		ТекстКомментарияСтруктура.ТекстКомментария = "Создание нового заказа в КЦ";

	Иначе 
		ТекстДляЗаписи = "Изменение шапки документа:" + Символы.ПС;
		ШапкаИзменена = Ложь;
		Для Каждого Реквизит Из Ссылка.Метаданные().Реквизиты Цикл
			
			ТекстИзменения = ТекстИзменениеРеквизита(ЭтотОбъект, Реквизит.Имя); 
			Если Не ПустаяСтрока(ТекстИзменения) Тогда 
				ШапкаИзменена = Истина;
				ТекстДляЗаписи = ТекстДляЗаписи + ТекстИзменения + "----------------------" + Символы.ПС; 
			КонецЕсли;
		КонецЦикла;  
		
		Для Каждого Реквизит Из Ссылка.Метаданные().СтандартныеРеквизиты Цикл
			ТекстИзменения = ТекстИзменениеРеквизита(ЭтотОбъект, Реквизит.Имя); 
			Если Не ПустаяСтрока(ТекстИзменения) Тогда 
				ШапкаИзменена = Истина;
				ТекстДляЗаписи = ТекстДляЗаписи + ТекстИзменения + "----------------------" + Символы.ПС; 
			КонецЕсли;
		КонецЦикла; 
		
		Если Не ШапкаИзменена Тогда   
			ТекстДляЗаписи = "";
		КонецЕсли; 
		
		ТекстДляЗаписиТЧ = "Изменение ТЧ документа:" + Символы.ПС;
		ТабЧастьИзменена = Ложь;
		
		Для каждого ТабЧасть из Метаданные().ТабличныеЧасти Цикл 
			Если ЭтотОбъект[ТабЧасть.Имя].Количество()> 0 Тогда
				
				Для Каждого РТЧ Из ТабЧасть.Реквизиты Цикл
					ТекстИзменения = ТекстИзменениеРеквизитаТЧ(ЭтотОбъект, РТЧ.Имя, ТабЧасть.Имя); 
					Если Не ПустаяСтрока(ТекстИзменения) Тогда 
						ТабЧастьИзменена = Истина;
						ТекстДляЗаписиТЧ = ТекстДляЗаписиТЧ + ТекстИзменения + "----------------------" + Символы.ПС; 
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	
		Если ТабЧастьИзменена Тогда   
			ТекстДляЗаписи = ТекстДляЗаписи + ТекстДляЗаписиТЧ;
		КонецЕсли; 
		
        Если ШапкаИзменена Или ТабЧастьИзменена Тогда 

			ТекстКомментарияСтруктура.ТекстКомментария = ТекстДляЗаписи;

		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстКомментарияСтруктура.ТекстКомментария) Тогда
		
		ДополнительныеСвойства.Вставить("ТекстКомментарияСтруктура", ТекстКомментарияСтруктура);
		
	Иначе
		
		ТекстКомментарияСтруктура.ТекстКомментария = "Просто запись";
		ТекстКомментарияСтруктура.Пользователь = ПараметрыСеанса.ТекущийПользователь;		
		
		ДополнительныеСвойства.Вставить("ТекстКомментарияСтруктура", ТекстКомментарияСтруктура);
		
	КонецЕсли;

КонецПроцедуры 

Функция ТекстИзменениеРеквизита(Данные, ИмяРеквизита)
	Результат = "";
	Если Данные[ИмяРеквизита] <> Данные.Ссылка[ИмяРеквизита] Тогда 
		Результат = "Имя реквизита: " + ИмяРеквизита + Символы.ПС;
		Результат = Результат + "СтароеЗначение: " + Данные.Ссылка[ИмяРеквизита] + Символы.ПС;
		Результат = Результат + "НовоеЗначение: " + Данные[ИмяРеквизита] + Символы.ПС;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ТекстИзменениеРеквизитаТЧ(Данные, ИмяРеквизита, ИмяТЧ)
	Результат = "";
	
	МаксИндекс = Макс(Данные[ИмяТЧ].Количество(), Данные.Ссылка[ИмяТЧ].Количество());
	
	Для Счетчик = 0 По МаксИндекс - 1 Цикл
		
		Попытка

			Если ТипЗнч(Данные[ИмяТЧ][Счетчик][ИмяРеквизита]) = Тип("ХранилищеЗначения") Тогда
				
				ТекФлагИзменения = Ложь;
				
			Иначе
				
				ТекФлагИзменения = Данные[ИмяТЧ][Счетчик][ИмяРеквизита] <> Данные.Ссылка[ИмяТЧ][Счетчик][ИмяРеквизита];
				ТекСтароеЗначение = Данные.Ссылка[ИмяТЧ][Счетчик][ИмяРеквизита];
				ТекНовоеЗначение = Данные[ИмяТЧ][Счетчик][ИмяРеквизита];
				НомерСтроки		= СокрЛП(Данные[ИмяТЧ][Счетчик].НомерСтроки);
				
			КонецЕсли;

		Исключение
			
			ТекФлагИзменения = Истина;
			
			Попытка
				ТекСтароеЗначение = Данные.Ссылка[ИмяТЧ][Счетчик][ИмяРеквизита];
			Исключение
				ТекСтароеЗначение = "";
			КонецПопытки;
			
			Попытка
				ТекНовоеЗначение = Данные[ИмяТЧ][Счетчик][ИмяРеквизита];
			Исключение
				ТекНовоеЗначение = "";
			КонецПопытки;
			
			Попытка
				НомерСтроки		= СокрЛП(Данные[ИмяТЧ][Счетчик].НомерСтроки);
			Исключение
				НомерСтроки = Счетчик + 1;
			КонецПопытки;
			
		КонецПопытки;
		
		Если ТекФлагИзменения Тогда
			Результат = Результат + "Имя реквизита: " + ИмяТЧ + ":" + ИмяРеквизита + " (" + НомерСтроки + ")" + Символы.ПС;
			Результат = Результат + "СтароеЗначение: " + ТекСтароеЗначение + Символы.ПС;
			Результат = Результат + "НовоеЗначение: " + ТекНовоеЗначение + Символы.ПС;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура ИзменениеОтветственного()
	
	Если ДополнительныеСвойства.Свойство("ИзмененОтветственный") И
		ДополнительныеСвойства.ИзмененОтветственный Тогда 
		
		ОтветственныйИзСсылки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Ответственный");
		ЗаказыПокупателейСервер.СотрудникИзменениеОтветственного(
			ЗаказыПокупателейСервер.ЯвляетсяСотрудникомКоллЦентра(ОтветственныйИзСсылки).СотрудникКоллЦентра,
			ЗаказыПокупателейСервер.ЯвляетсяСотрудникомКоллЦентра(Ответственный).СотрудникКоллЦентра,
			Дата);
		
	КонецЕсли; 
		
	Если ЭтоНовый() Тогда 

		ЗаказыПокупателейСервер.СотрудникНовыйЗаказ(ЗаказыПокупателейСервер.ЯвляетсяСотрудникомКоллЦентра(Ответственный).СотрудникКоллЦентра);
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьОбеспечениеЗаказа()
	
	НовоеСостояние = Документы.ЗаказПокупателя.ПолучитьСостояниеЗаказаПокупателя(Ссылка);
	ТоварыЗаказа = Товары.Выгрузить(); 
	ТоварыЗаказа.ЗаполнитьЗначения(Ложь, "Обеспечение");

	Для Каждого СтрокаТЗ Из НовоеСостояние.СтрокиЗаказа Цикл  
		
		НайденныеСтроки = ТоварыЗаказа.НайтиСтроки(
				Новый Структура("КлючСвязиЗапросаДоступности", СтрокаТЗ.КлючСвязиЗапросаДоступности)); 
				
		НайденныеСтроки[0].Обеспечение = СтрокаТЗ.Обеспечение;

	КонецЦикла;
	
	Товары.Загрузить(ТоварыЗаказа);

КонецПроцедуры

Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Отказ, РежимПроведения)

//	Отключим регистрацию в обмены регистры, формируемые только в ЦБ!
//	При этом неважно, где мы сейчас находимся - ЦБ или ПБ.
	ИменаРегистров = Новый Массив;

	Если ДополнительныеСвойства.УчетнаяПолитика.ДвиженияБонусныхБалловТолькоВЦентре = Истина Тогда	//	LNK 08.11.2022 06:37:19

		ИменаРегистров.Добавить("БонусныеБаллы");
		ИменаРегистров.Добавить("БонусныеБаллыВРезерве");
		ИменаРегистров.Добавить("СписанныеБонусныеБаллы");
		ИменаРегистров.Добавить("БонусныеБаллыПоЗаказамПокупателей");
		ИменаРегистров.Добавить("БонусныеБаллыПогашение");
		
	КонецЕсли;

	Для каждого ИмяРегистра Из ИменаРегистров Цикл

		Если НЕ Движения.Найти(ИмяРегистра) = Неопределено Тогда	//	проверка на всякий случай

			Движения[ИмяРегистра].ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ЗаписьВРегистрОплаты()
	
	Для Каждого СтрокаОплаты Из ОплатаЗаказа Цикл
	
		СтруктураЗаписи = РегистрыСведений.ОплатаЗаказаКлиента.ИнициализацияСтруктурыЗаписи();
		
		СтруктураЗаписи.ВидОплаты	 	= СтрокаОплаты.ВидОплаты;
		СтруктураЗаписи.ЗаказКлиента 	= Ссылка;
		СтруктураЗаписи.НомерОплаты 	= СтрокаОплаты.НомерОплаты;
		СтруктураЗаписи.ТипОплаты 		= СтрокаОплаты.ТипОплаты; 
		СтруктураЗаписи.Сумма 			= СтрокаОплаты.Сумма;
		СтруктураЗаписи.СтатусОплаты 	= СтрокаОплаты.СтатусОплаты;
		СтруктураЗаписи.Отменён 		= СтрокаОплаты.Отменён;
		СтруктураЗаписи.ДатаОплаты 		= ?(СтрокаОплаты.СтатусОплаты = Перечисления.СтатусОплаты.Оплачен, ТекущаяДатаСеанса(), Дата(1,1,1));
		СтруктураЗаписи.ИДОплаты 		= СтрокаОплаты.ИДОплаты;
		СтруктураЗаписи.СтруктураОтвета	= СтрокаОплаты.СтруктураОтвета;
		
		РегистрыСведений.ОплатаЗаказаКлиента.ЗаписьСтрокиВРегистр(СтруктураЗаписи);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьОкругленияИзЗапросаДоступности()

	СтатусИзСсылки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Статус");
	Если СтатусИзСсылки = Перечисления.СтатусыЗаказовПокупателей.ЗапросДоступности
			И Не Статус = Перечисления.СтатусыЗаказовПокупателей.ЗапросДоступности Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТоварыЗП.Ссылка,
			|	ТоварыЗП.Сумма - ТоварыЗП.СуммаОкругления КАК Сумма,
			|	ТоварыЗП.КлючСвязиЗапросаДоступности,
			|	ЕСТЬNULL(ТоварыЗД.СуммаОкругления, 0) КАК СуммаОкругления
			|ПОМЕСТИТЬ СтрокиДляОкругления
			|ИЗ
			|	Документ.ЗаказПокупателя.Товары КАК ТоварыЗП
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросДоступностиТоваров.Товары КАК ТоварыЗД
			|		ПО ТоварыЗП.Ссылка = ТоварыЗД.Ссылка.ДокументОснование
			|		И ТоварыЗП.КлючСвязиЗапросаДоступности = ТоварыЗД.КлючСвязи
			|ГДЕ
			|	ТоварыЗП.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СтрокиДляОкругления.Ссылка,
			|	СтрокиДляОкругления.Сумма + СтрокиДляОкругления.СуммаОкругления КАК Сумма,
			|	СтрокиДляОкругления.КлючСвязиЗапросаДоступности,
			|	СтрокиДляОкругления.СуммаОкругления
			|ПОМЕСТИТЬ ОкругленныеСтроки
			|ИЗ
			|	СтрокиДляОкругления КАК СтрокиДляОкругления
			|ГДЕ
			|	НЕ СтрокиДляОкругления.СуммаОкругления = 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТоварыЗП.Ссылка,
			|	ТоварыЗП.НомерСтроки,
			|	ТоварыЗП.АкционнаяЦена,
			|	ТоварыЗП.БонусАкцияНачислен,
			|	ТоварыЗП.БонусАкцияСписан,
			|	ТоварыЗП.БонусБазаНачислен,
			|	ТоварыЗП.БонусБазаСписан,
			|	ТоварыЗП.КлючСвязи,
			|	ТоварыЗП.КлючСвязиБонусныхБаллов,
			|	ТоварыЗП.КодСтроки,
			|	ТоварыЗП.Количество,
			|	ТоварыЗП.КоличествоУпаковок,
			|	ТоварыЗП.Номенклатура,
			|	ТоварыЗП.Отменено,
			|	ТоварыЗП.ПричинаОтмены,
			|	ТоварыЗП.Продавец,
			|	ТоварыЗП.ПродажаПодарка,
			|	ТоварыЗП.ПроцентАвтоматическойСкидки,
			|	ТоварыЗП.ПроцентРучнойСкидки,
			|	ТоварыЗП.Резервировать,
			|	ТоварыЗП.СтавкаНДС,
			|	ЕСТЬNULL(ОкругленныеСтроки.Сумма, ТоварыЗП.Сумма) КАК Сумма,
			|	ТоварыЗП.СуммаАвтоматическойСкидки,
			|	ТоварыЗП.СуммаБонусныхБалловНачислено,
			|	ТоварыЗП.СуммаБонусныхБалловСписано,
			|	ТоварыЗП.СуммаНДС,
			|	ТоварыЗП.СуммаРучнойСкидки,
			|	ТоварыЗП.УникальныйИдентификатор,
			|	ТоварыЗП.Упаковка,
			|	ТоварыЗП.Характеристика,
			|	ТоварыЗП.Цена,
			|	ТоварыЗП.Склад,
			|	ТоварыЗП.ТипДоставки,
			|	ТоварыЗП.МагазинПолучатель,
			|	ТоварыЗП.Самовывоз,
			|	ТоварыЗП.Обеспечение,
			|	ТоварыЗП.КлючСвязиЗапросаДоступности,
			|	ТоварыЗП.КлючСвязиСерийныхНомеров,
			|	ТоварыЗП.ПричинаРучнойСкидки,
			|	ТоварыЗП.Содержание,
			|	ЕСТЬNULL(ОкругленныеСтроки.СуммаОкругления, 0) КАК СуммаОкругления
			|ИЗ
			|	Документ.ЗаказПокупателя.Товары КАК ТоварыЗП
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОкругленныеСтроки КАК ОкругленныеСтроки
			|		ПО ТоварыЗП.Ссылка = ОкругленныеСтроки.Ссылка
			|		И ТоварыЗП.КлючСвязиЗапросаДоступности = ОкругленныеСтроки.КлючСвязиЗапросаДоступности
			|ГДЕ
			|	ТоварыЗП.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Товары.Загрузить(РезультатЗапроса.Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтрольОплаты()

	ДобавитьОплату = (Не СуммаДокумента = 0);
	
	Если ЭтоНовый() Тогда
		
		Для Каждого СтрокаОплаты Из ОплатаЗаказа Цикл
			
			Если Не СтрокаОплаты.Отменён Тогда
				
				ДобавитьОплату = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
 		
	КонецЕсли;	
	
	ИнформацияОбОплате = РегистрыСведений.ОплатаЗаказаКлиента.ИнформацияОбОплате(Ссылка);
	СуммаВсегоДляОплаты = СуммаДокумента + СуммаДоставки;
	Если ИнформацияОбОплате.АктивныеСтроки = 0 И ДобавитьОплату Тогда
		
		НоваяСтрока = ОплатаЗаказа.Добавить();
		НоваяСтрока.ВидОплаты = Перечисления.ВидыОплатыЗаказаПокупателя.Оплата;
		НоваяСтрока.НомерОплаты = ИнформацияОбОплате.ПоследнийНомерОплаты + 1;
		НоваяСтрока.СтатусОплаты = Перечисления.СтатусОплаты.НеОплачен;
		НоваяСтрока.ТипОплаты = Перечисления.ТипОплатыЗаказПокупателя.Наличные;
		НоваяСтрока.Сумма = СуммаВсегоДляОплаты;
		
	ИначеЕсли ИнформацияОбОплате.ТипОплаты = Перечисления.ТипОплатыЗаказПокупателя.Наличные Тогда 
		
		УжеОплачено = 0;
		
		Для Каждого СтрокаОплаты Из ОплатаЗаказа Цикл
			
			Если СтрокаОплаты.СтатусОплаты = Перечисления.СтатусОплаты.Оплачен Тогда
				
				УжеОплачено = УжеОплачено
					 + ?(СтрокаОплаты.ВидОплаты = Перечисления.ВидыОплатыЗаказаПокупателя.Оплата, 1, -1)
					 * СтрокаОплаты.Сумма;
			Иначе
				 
				 Если ИнформацияОбОплате.ПоследнийНомерОплаты = СтрокаОплаты.НомерОплаты Тогда
				 	
				 	Если (УжеОплачено > СуммаВсегоДляОплаты И СтрокаОплаты.ВидОплаты = Перечисления.ВидыОплатыЗаказаПокупателя.Возврат)
				 			Или ((УжеОплачено < СуммаВсегоДляОплаты И СтрокаОплаты.ВидОплаты = Перечисления.ВидыОплатыЗаказаПокупателя.Оплата)) Тогда

				 		ОстатокОплаты = УжеОплачено - СуммаВсегоДляОплаты;
				 		СтрокаОплаты.Сумма = Макс(ОстатокОплаты, - ОстатокОплаты);
				 			
				 	Иначе
				 			
				 		СтрокаОплаты.Отменён = Истина;
				 			
				 	КонецЕсли;
				 		
				 Иначе
			
					СтрокаОплаты.Отменён = Истина;
				
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыЗаказовПокупателей.Отменён Тогда 
		
		Для Каждого СтрокаОплаты Из ОплатаЗаказа Цикл 
			
			Если Не ПустаяСтрока(СтрокаОплаты.ИДОплаты) Тогда 
				
				ОбменСБанкамиLiqPayСервер.ОплатитьНаСервере(Номер, Ссылка,"", 0, 0, СтрокаОплаты.ИДОплаты, Ложь); 
				СтрокаОплаты.ИДОплаты = "";
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если УчетнаяСистема = Перечисления.УчетныеСистемыКомпании.Розница Тогда
	
		СуммаОплат = 0;
		ТипОплаты = Перечисления.ТипОплатыЗаказПокупателя.ПустаяСсылка();
		ПерваяОплата = Истина;
		
		Для Каждого СтрокаОплаты Из ОплатаЗаказа Цикл
					
			Если СтрокаОплаты.Отменён Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ПерваяОплата Тогда
				ТипОплаты = СтрокаОплаты.ТипОплаты;
			КонецЕсли;
			
			Если ПерваяОплата
					И (СтрокаОплаты.ВидОплаты = Перечисления.ВидыОплатыЗаказаПокупателя.Оплата
						И ДокументОснование = Документы.ВозвратИнтернетЗаказа.ПустаяСсылка())
					Или (Не ДокументОснование = Документы.ВозвратИнтернетЗаказа.ПустаяСсылка()
						И Не СтрокаОплаты.НомерОплаты = 0) Тогда
								
				ТипОплаты = СтрокаОплаты.ТипОплаты;
				ПерваяОплата = Ложь;
				
			КонецЕсли;
	
			Если СтрокаОплаты.ВидОплаты = Перечисления.ВидыОплатыЗаказаПокупателя.Оплата Тогда
				
				Если СтрокаОплаты.СтатусОплаты = Перечисления.СтатусОплаты.Оплачен Тогда
					
					Если СтрокаОплаты.ТипОплаты = Перечисления.ТипОплатыЗаказПокупателя.ОплатаКартойПриват
							И ПустаяСтрока(СтрокаОплаты.СтруктураОтвета) Тогда
					
						ОтветСервера = ОбменСБанкамиLiqPayСервер.ПроверитьОплатуНаСервере(Ссылка,
								Номер,
								СтрокаОплаты.НомерОплаты);
			
						Если ОтветСервера.ОплатаПроизведена	Тогда 	
							СтрокаОплаты.СтруктураОтвета = ОтветСервера.СтруктураОтвета; 
						КонецЕсли; 
						
					КонецЕсли;

					СуммаОплат = СуммаОплат + СтрокаОплаты.Сумма;
					
				ИначеЕсли СтрокаОплаты.ТипОплаты = Перечисления.ТипОплатыЗаказПокупателя.БРПостоплата Тогда 
					
					СуммаОплат = СуммаОплат + СтрокаОплаты.Сумма;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаОплаты.ВидОплаты = Перечисления.ВидыОплатыЗаказаПокупателя.Возврат Тогда
				
				СуммаОплат = СуммаОплат - СтрокаОплаты.Сумма;
				
			КонецЕсли;

		КонецЦикла;
		
		Если СуммаОплат = (СуммаДокумента + СуммаДоставки) Тогда
			СтатусОплаты = Перечисления.СтатусОплаты.Оплачен;
		Иначе
			СтатусОплаты = Перечисления.СтатусОплаты.НеОплачен;
		КонецЕсли;

		Если Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт
				И ТипОплаты = Перечисления.ТипОплатыЗаказПокупателя.Наличные
				И ТипДоставки = Перечисления.ТипДоставкиЗаказПокупателя.Самовывоз Тогда
			
			СтатусОплаты = Перечисления.СтатусОплаты.Оплачен;
			
		КонецЕсли;
		
		СуммаОплаты = СуммаДокумента + ?(СуммаДоставкиОплачена, 0, СуммаДоставки);
		
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаписьВРССтатусы(Заказ,Ответственный,Статус)   
	ДанныеПредыдущейЗаписи = ПолучитьПредыдущийСтатус(Заказ);
	Если НЕ ДанныеПредыдущейЗаписи = Неопределено тогда 
		Если ДанныеПредыдущейЗаписи.Ответственный <> Ответственный Или  ДанныеПредыдущейЗаписи.Статус <> Статус тогда
			ЗаписатьВРССтатус(Заказ,Ответственный,Статус,ДанныеПредыдущейЗаписи.ВремяРеакции);	
		КонецЕсли;
	Иначе
		ЗаписатьВРССтатус(Заказ,Ответственный,Статус,0);	
	КонецЕсли;	
КонецПроцедуры

Процедура ЗаписатьВРССтатус(Заказ,Ответственный,Статус,ВремяРеакции) 
	ТекДата = ТекущаяДатаСеанса();
  	НаборЗаписей = РегистрыСведений.СтатусыЗаказовПокупателей.СоздатьНаборЗаписей(); 

	НаборЗаписей.Отбор.Заказ.Установить(Заказ);
	НаборЗаписей.Отбор.Статус.Установить(Статус); 
	НаборЗаписей.Отбор.Ответственный.Установить(Ответственный); 
	НаборЗаписей.Отбор.Период.Установить(ТекДата); 
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = ТекДата;
	НоваяЗапись.Заказ = Заказ;
	НоваяЗапись.Статус = Статус; 
	НоваяЗапись.ВремяРеакции = ВремяРеакции; 
	НоваяЗапись.Ответственный = Ответственный; 
	НоваяЗапись.ДатаИзменения = ТекущаяДатаСеанса();
	НоваяЗапись.Автор = ПараметрыСеанса.ТекущийПользователь;
	
	НаборЗаписей.Записать();
КонецПроцедуры

Функция ПолучитьПредыдущийСтатус(Заказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(СтатусыЗаказовПокупателей.Период) КАК Период,
		|	СтатусыЗаказовПокупателей.Заказ КАК Заказ
		|ПОМЕСТИТЬ ТабДата
		|ИЗ
		|	РегистрСведений.СтатусыЗаказовПокупателей КАК СтатусыЗаказовПокупателей
		|ГДЕ
		|	СтатусыЗаказовПокупателей.Заказ = &Заказ
		|
		|СГРУППИРОВАТЬ ПО
		|	СтатусыЗаказовПокупателей.Заказ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатусыЗаказовПокупателей.Статус КАК Статус,
		|	ТабДата.Период КАК Период,
		|	ТабДата.Заказ КАК Заказ,
		|	СтатусыЗаказовПокупателей.Ответственный КАК Ответственный,
		|	СтатусыЗаказовПокупателей.ВремяРеакции КАК ВремяРеакции
		|ИЗ
		|	ТабДата КАК ТабДата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаказовПокупателей КАК СтатусыЗаказовПокупателей
		|		ПО ТабДата.Заказ = СтатусыЗаказовПокупателей.Заказ
		|			И ТабДата.Период = СтатусыЗаказовПокупателей.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТабДата";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда 
		Возврат Неопределено;
	Иначе	
		ДанныеПредыдущейЗаписи = Новый Структура;	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДанныеПредыдущейЗаписи.Вставить("Статус",ВыборкаДетальныеЗаписи.Статус);  
			ДанныеПредыдущейЗаписи.Вставить("Ответственный",ВыборкаДетальныеЗаписи.Ответственный);
			ДанныеПредыдущейЗаписи.Вставить("Заказ",ВыборкаДетальныеЗаписи.Заказ); 
			Если ВыборкаДетальныеЗаписи.ВремяРеакции = 0 тогда 
				ВремяРеакции =ТекущаяДатаСеанса() - ВыборкаДетальныеЗаписи.Период;
			Иначе
				ВремяРеакции = ВыборкаДетальныеЗаписи.ВремяРеакции;
			КонецЕсли;
			ДанныеПредыдущейЗаписи.Вставить("ВремяРеакции",ВремяРеакции);		
		КонецЦикла;       
		Возврат ДанныеПредыдущейЗаписи; 
	КонецЕсли;
	
КонецФункции

Процедура ПриЗаписиРегистрацияMagento(Знач ДатаИзмененияСтатуса = Неопределено)	//	LNK 05.12.2021 04:09:24

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Возврат;

	КонецЕсли;

	Если НЕ ТипЗнч(ДатаИзмененияСтатуса) = Тип("Дата") Тогда

		Если НЕ ДополнительныеСвойства.Свойство("ДатаИзмененияСтатуса") Тогда	//	LNK 05.12.2021 04:04:43

			ДополнительныеСвойства.Вставить("ДатаИзмененияСтатуса", Документы.ЗаказПокупателя.ПолучитьДатуИзмененияСтатусаИМ(Ссылка));

		КонецЕсли;

		ДатаИзмененияСтатуса = ДополнительныеСвойства.ДатаИзмененияСтатуса;

	КонецЕсли;

	ПараметрыРегистрации = Новый Структура("ДатаНачисления", ДатаИзмененияСтатуса);
	РегистрыСведений.РегистрацияОбъектовMagento.Регистрация(Ссылка, Перечисления.ТипыРегистрацииMagento.БонусныеНакопления, ПараметрыРегистрации);

КонецПроцедуры

//	LNK 23.12.2021 07:17:13
Процедура ОбработкаУдаленияПроведенияСПараметром(Отказ, ВыполнитьКонтроль)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	Если ВыполнитьКонтроль Тогда

		ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	КонецЕсли;

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры


#КонецОбласти

#КонецЕсли  

