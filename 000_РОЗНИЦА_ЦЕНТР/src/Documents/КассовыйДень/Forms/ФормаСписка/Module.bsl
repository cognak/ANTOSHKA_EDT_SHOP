
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда

		Возврат;

	КонецЕсли;

	УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();	//	LNK 22.10.2022 07:31:12

	Список.Параметры.УстановитьЗначениеПараметра("ИнтернетМагазин", УчетнаяПолитика.ИнтернетМагазин);

//	Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);

	Если Магазин.Пустая() И НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Магазин = ПараметрыСеанса.ТекущийМагазин;
		УстановитьОтборДинамическихСписковПриИзмененииСервер();

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Магазин = Настройки.Получить("Магазин");

	Иначе

		Магазин = ПараметрыСеанса.ТекущийМагазин;

	КонецЕсли;

	УстановитьОтборДинамическихСписковПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УстановитьДоступностьКомандСозданияДокументов();
	
КонецПроцедуры

//	LNK 24.04.2017 12:49:55
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ПользовательИзменилТекущуюОрганизацию" Тогда

		Если НЕ Магазин = Параметр.Магазин Тогда

			Магазин = Параметр.Магазин;
			МагазинОтборПриИзменении(Неопределено);

		КонецЕсли;

	ИначеЕсли ИмяСобытия = "ИзменениеОбъектУчтенВNavision" Тогда	//	LNK 11.09.2020 08:25:19

		Элементы.Список.Обновить();

	КонецЕсли;

	УстановитьДоступностьКомандСозданияДокументов();

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура МагазинОтборПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписковНаКлиенте();
	УстановитьДоступностьКомандСозданияДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинОтборОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если НЕ МагазинОтборОбработкаВыбораНаСервере(ВыбранноеЗначение, СтандартнаяОбработка) Тогда

		ПоказатьОповещениеПользователя("Выбор отклонён!",, "Допустимо выбирать только розничный магазин! Отказано", БиблиотекаКартинок.Ошибка32);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтатусКассовогоДняОтборПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписковНаКлиенте();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//	LNK 18.09.2016 09:29:58
&НаКлиенте
Процедура УстановитьДоступностьКомандСозданияДокументов()

	ДоступностьЭлемента = ЗначениеЗаполнено(Магазин);
	
	СостояниеКассовогоДня = РозничныеПродажиСервер.ПолучитьСостояниеКассовогоДня(Магазин, Истина);	//	LNK 19.11.2022 06:21:14 - ТолькоОткрытый = Истина
	КассовыйДеньОткрыт    = СостояниеКассовогоДня.КассовыйДеньОткрыт;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КассовыйДеньОткрыть", "Доступность", ДоступностьЭлемента И НЕ КассовыйДеньОткрыт);
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КассовыйДеньЗакрыть", "Доступность", ДоступностьЭлемента И КассовыйДеньОткрыт);

	Элементы.Список.Обновить();

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

// Процедура устанавливает отбор динамических списков формы.
//
&НаСервере
Процедура УстановитьОтборДинамическихСписковПриИзмененииСервер()
	
	УстановитьОтборДинамическихСписков("Магазин");
	УстановитьОтборДинамическихСписков("СтатусКассовогоДня");
	
КонецПроцедуры

// Процедура устанавливает отбор динамических списков формы.
//
&НаКлиенте
Процедура УстановитьОтборДинамическихСписковНаКлиенте()
	
	УстановитьОтборДинамическихСписковПриИзмененииСервер();
	
КонецПроцедуры

#Область ОткрытиеЗакрытиеКассовогоДняПоМагазину

&НаСервереБезКонтекста
Функция КассовыйДеньОткрытьНаСервере(Магазин)

	Возврат РозничныеПродажиСервер.ОткрытьКассовыйДень(Магазин);

КонецФункции

&НаСервереБезКонтекста
Функция КассовыйДеньЗакрытьНаСервере(Магазин)

	Возврат РозничныеПродажиСервер.ЗакрытьКассовыйДень(Магазин);

КонецФункции

&НаКлиенте
Процедура КассовыйДеньОткрыть(Команда)

	ОчиститьСообщения();

	Если НЕ ЗначениеЗаполнено(Магазин) Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Необхідно вказати магазин!",,"Магазин"
		);

	Иначе

		ДанныеКассовогоДня = КассовыйДеньОткрытьНаСервере(Магазин);

		Если ДанныеКассовогоДня.СтатусКассовогоДня = ПредопределенноеЗначение("Перечисление.СтатусыКассовойСмены.Открыта") Тогда

			Элементы.Список.ТекущаяСтрока = ДанныеКассовогоДня.КассовыйДень;	//	LNK 15.10.2022 06:58:41

			Если ДанныеКассовогоДня.Выполнено Тогда

					ПоказатьОповещениеПользователя(
						"Касового дня відкрито!",
						,
						"Дія виконана для магазину «" + Магазин + "»",
						БиблиотекаКартинок.Информация32
					);

			Иначе	ПоказатьОповещениеПользователя(
						"Касового дня було відкрито раніше!",
						,
						"Стан обліку не вимагає виконання операції для магазину «" + Магазин + "»",
						БиблиотекаКартинок.Предупреждение32
					);
			
			КонецЕсли;

		Иначе

			ТекстСообщения = СтрЗаменить(
				"При відкритті касового дня сталася помилка.
				|День не відкрито.
				|Додатковий опис події:
				|%ДополнительноеОписание%"
			, "%ДополнительноеОписание%", ДанныеКассовогоДня.Сообщение
			);
			ПоказатьОповещениеПользователя(
				"КАСОВОГО ДНЯ НЕ ВІДКРИТО!"
				,,
				ТекстСообщения,
				?(ДанныеКассовогоДня.Ошибка = Истина, БиблиотекаКартинок.Ошибка32, БиблиотекаКартинок.Информация32)
			);

		КонецЕсли;

	КонецЕсли;
	
	УстановитьДоступностьКомандСозданияДокументов();

КонецПроцедуры

&НаКлиенте
Процедура КассовыйДеньЗакрыть(Команда)

	ОчиститьСообщения();

	Если НЕ ЗначениеЗаполнено(Магазин) Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Необхідно вказати магазин!",,"Магазин"
		);
		УстановитьДоступностьКомандСозданияДокументов();

	Иначе

		ОписаниеОповещения = Новый ОписаниеОповещения("КассовыйДеньЗакрытьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения
			, "Відкритий касовий день буде закрито!
			  |Підтвердіть своє рішення:
			  |[Да] - закрити відкритий касовий день
			  |[Ні] - не закривати"
			, РежимДиалогаВопрос.ДаНет
			, 60
			, КодВозвратаДиалога.Да
			, "Для магазину «" + Магазин + "»"
			, КодВозвратаДиалога.Нет
		);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 27.08.2019 10:15:28
Процедура КассовыйДеньЗакрытьЗавершение(КодВозврата, ДополнительныеПараметры)	Экспорт

	Если КодВозврата = КодВозвратаДиалога.Да Тогда

		ДанныеКассовогоДня = КассовыйДеньЗакрытьНаСервере(Магазин);

		Если НЕ ДанныеКассовогоДня.Ошибка = Истина И ДанныеКассовогоДня.СтатусКассовогоДня = ПредопределенноеЗначение("Перечисление.СтатусыКассовойСмены.Закрыта") Тогда

			Элементы.Список.ТекущаяСтрока = ДанныеКассовогоДня.КассовыйДень;	//	LNK 15.10.2022 06:58:41

			Если ДанныеКассовогоДня.Выполнено Тогда

					ПоказатьОповещениеПользователя(
						"Касового дня закрито!",
						,
						"Дія виконана для магазину «" + Магазин + "»",
						БиблиотекаКартинок.Предупреждение32
					);

			Иначе	ПоказатьОповещениеПользователя(
						"Касового дня було закрито раніше!",
						,
						"Стан обліку не вимагає виконання операції для магазину «" + Магазин + "»",
						БиблиотекаКартинок.Предупреждение32
					);
			
			КонецЕсли;

		Иначе

			ТекстСообщения = СтрЗаменить(
				"При закритті касового дня сталася помилка.
				|Додатковий опис події:
				|%ДополнительноеОписание%"
			, "%ДополнительноеОписание%", ДанныеКассовогоДня.Сообщение
			);
			ПоказатьОповещениеПользователя(
				"КАСОВОГО ДНЯ НЕ ЗАКРИТО!"
				,,
				ТекстСообщения,
				?(ДанныеКассовогоДня.Ошибка = Истина, БиблиотекаКартинок.Ошибка32, БиблиотекаКартинок.Информация32)
			);

		КонецЕсли;

	Иначе

		ПоказатьОповещениеПользователя(
			"Операцію не виконано!",
			,
			"Операцію закриття скасовано користувачем",
			БиблиотекаКартинок.Предупреждение32
		);

	КонецЕсли;
	
	УстановитьДоступностьКомандСозданияДокументов();

КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// Прочее

// Процедура устанавливает отбор динамических списков формы.
//
&НаСервере
Процедура УстановитьОтборДинамическихСписков(ИмяРеквизита)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		Список, 
		ИмяРеквизита, 
		ЭтотОбъект[ИмяРеквизита], 
		ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита])
	);

КонецПроцедуры

&НаСервереБезКонтекста
Функция МагазинОтборОбработкаВыбораНаСервере(ВыбранноеЗначение, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Магазины.ВведенВЭксплуатацию,
		|	Магазины.НомерМагазина,
		|	Магазины.СкладУправляющейСистемы
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|ГДЕ
		|	(Магазины.НомерМагазина = 0
		|			ИЛИ Магазины.СкладУправляющейСистемы = ИСТИНА)
		|	И Магазины.Ссылка = &ВыбранноеЗначение"
		);
		Запрос.УстановитьПараметр("ВыбранноеЗначение", ВыбранноеЗначение);

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда

			СтандартнаяОбработка = Ложь;

		КонецЕсли;

	КонецЕсли;

	Возврат СтандартнаяОбработка;

КонецФункции







