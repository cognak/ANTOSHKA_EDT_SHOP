///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

//	LNK 26.12.2016 11:33:34
	Если НЕ УправлениеДоступомРТ.ДоступныДокументыИнвентаризации(Отказ) Тогда

		Возврат;

	КонецЕсли;
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,СостояниеДокумента,РазрешеноПроведение);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьДанныеПриИзмененииПравилОтбораТоваровИнвентаризации(Истина);
		СкладПриИзмененииСервер();
	Иначе
		ЗначениеНастройкиКомпоновкиДанных = Объект.Ссылка.НастройкиКомпоновкиДанных.Получить();
		Если ЗначениеНастройкиКомпоновкиДанных = Неопределено Тогда
			ОбновитьДанныеПриИзмененииПравилОтбораТоваровИнвентаризации(Истина);
		Иначе
			НастройкиКомпоновкиДанных = Объект.Ссылка.НастройкиКомпоновкиДанных.Получить();
			ОбновитьДанныеПриИзмененииПравилОтбораТоваровИнвентаризации(Ложь);
		КонецЕсли;
		
	КонецЕсли;

	УправлениеДоступомРТ.ПриСозданииФормыНаСервере(ЭтотОбъект);	//	LNK 17.10.2019 14:30:01
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
//	LNK 22.12.2016 10:10:34
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ИсключитьЗапретПоИнвентаризации", ТекущийОбъект.Ссылка);
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

//	LNK 14.09.2017 12:29:14
	ДолжностьЧленаКомиссииСписокВыбора("ПредседательКомиссии");
	ДолжностьЧленаКомиссииСписокВыбора("ЧленКомиссии1");
	ДолжностьЧленаКомиссииСписокВыбора("ЧленКомиссии1");
	ДолжностьЧленаКомиссииСписокВыбора("ЧленКомиссии1");

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.НастройкиКомпоновкиДанных = Новый ХранилищеЗначения(НастройкиКомпоновкиДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);

КонецПроцедуры

&НаКлиенте
Процедура ПравилаОтбораТоваровИнвентаризацииПриИзменении(Элемент)
	
	ОбновитьДанныеПриИзмененииПравилОтбораТоваровИнвентаризации(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредседательКомиссииПриИзменении(Элемент)
	ДанныеДляВыбора = ЗначениеНастроекПовтИсп.СписокДолжностейФизическогоЛица(Объект.ПредседательКомиссии);
	Если ДанныеДляВыбора.Количество() = 1 Тогда
		Объект.ДолжностьПредседателяКомиссии = ДанныеДляВыбора[0];
	КонецЕсли;

//	LNK 14.09.2017 12:29:14
	ДолжностьЧленаКомиссииСписокВыбора("ПредседательКомиссии");

КонецПроцедуры

&НаКлиенте
Процедура ЧленКомиссии1ПриИзменении(Элемент)
	ДанныеДляВыбора = ЗначениеНастроекПовтИсп.СписокДолжностейФизическогоЛица(Объект.ЧленКомиссии1);
	Если ДанныеДляВыбора.Количество() = 1 Тогда
		Объект.ДолжностьЧленаКомиссии1 = ДанныеДляВыбора[0];
	КонецЕсли;

//	LNK 14.09.2017 12:29:14
	ДолжностьЧленаКомиссииСписокВыбора("ЧленКомиссии1");

КонецПроцедуры

&НаКлиенте
Процедура ЧленКомиссии2ПриИзменении(Элемент)
	ДанныеДляВыбора = ЗначениеНастроекПовтИсп.СписокДолжностейФизическогоЛица(Объект.ЧленКомиссии2);
	Если ДанныеДляВыбора.Количество() = 1 Тогда
		Объект.ДолжностьЧленаКомиссии2 = ДанныеДляВыбора[0];
	КонецЕсли;

//	LNK 14.09.2017 12:29:14
	ДолжностьЧленаКомиссииСписокВыбора("ЧленКомиссии1");

КонецПроцедуры

&НаКлиенте
Процедура ЧленКомиссии3ПриИзменении(Элемент)
	ДанныеДляВыбора = ЗначениеНастроекПовтИсп.СписокДолжностейФизическогоЛица(Объект.ЧленКомиссии3);
	Если ДанныеДляВыбора.Количество() = 1 Тогда
		Объект.ДолжностьЧленаКомиссии3 = ДанныеДляВыбора[0];
	КонецЕсли;

//	LNK 14.09.2017 12:29:14
	ДолжностьЧленаКомиссииСписокВыбора("ЧленКомиссии1");

КонецПроцедуры

&НаКлиенте
Процедура ДолжностьЧленаКомиссииСписокВыбора(Атрибут)

	Элемент = Элементы[Атрибут];

	Элемент.СписокВыбора.Очистить();
	Для каждого ЭлементСпискаЗначений Из ЗначениеНастроекПовтИсп.СписокДолжностейФизическогоЛица(Объект[Атрибут]) Цикл
		Элемент.СписокВыбора.Добавить(ЭлементСпискаЗначений.Значение);
	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура УстановитьИнтервалВыполнить()
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.ДатаНачала    = Объект.ДатаНачала;
	Диалог.Период.ДатаОкончания = Объект.ДатаОкончания;
	
	Если Диалог.Редактировать() Тогда
		
		Объект.ДатаНачала    = Диалог.Период.ДатаНачала;
		Объект.ДатаОкончания = Диалог.Период.ДатаОкончания;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройки(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПравилаОтбораТоваровИнвентаризации) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Редактировать настройки невозможно. Не выбраны правила отбора товаров'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.ПравилаОтбораТоваровИнвентаризации = ПредопределенноеЗначение("Справочник.ПравилаОтбораТоваров.ПолнаяИнвентаризация") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Редактировать настройки невозможно. Выбрана полная инвентаризация'"));
		Возврат;
	ИначеЕсли Объект.ПравилаОтбораТоваровИнвентаризации = ПредопределенноеЗначение("Справочник.ПравилаОтбораТоваров.ИнвентаризацияЗапрещенныхКПродаже") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Редактировать настройки невозможно. Выбрана инвентаризация запрещенных к продаже'"));
		Возврат;
	КонецЕсли;
	
	// Открыть редактор настроек схемы компоновки данных
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru = 'Настройка параметров схемы инвентаризации ""%1""'");
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = СтрЗаменить(ЗаголовокФормыНастройкиСхемыКомпоновкиДанных, "%1", Объект.ПравилаОтбораТоваровИнвентаризации);
	
	АдресХранилищаНастройкиКомпоновщика = ОткрытьФормуМодально("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных",
		Новый Структура(
			"НеПомещатьНастройкиВСхемуКомпоновкиДанных,
			|НеРедактироватьСхемуКомпоновкиДанных,
			|НеНастраиватьУсловноеОформление,
			|НеНастраиватьВыбор,
			|НеНастраиватьПорядок,
			|АдресСхемыКомпоновкиДанных,
			|АдресНастроекКомпоновкиДанных,
			|УникальныйИдентификатор,
			|Заголовок",
			Истина,
			Истина,
			Истина,
			Истина,
			Истина,
			АдресСхемыКомпоновкиДанных,
			АдресНастройкиКомпоновкиДанных,
			УникальныйИдентификатор,
			ЗаголовокФормыНастройкиСхемыКомпоновкиДанных)
	);
	
	Если АдресХранилищаНастройкиКомпоновщика <> Неопределено Тогда
		
		УстановитьНастройкиКомпоновкиДанных(АдресСхемыКомпоновкиДанных, АдресХранилищаНастройкиКомпоновщика);
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура СкладПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Склад)  Тогда
		Объект.Магазин     = Объект.Склад.Магазин;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.Склад)
		И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Объект.Склад.Организация;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПриИзмененииПравилОтбораТоваровИнвентаризации(ПерезаполнятьНастрокиКомпоновкиДанных)
	
	Элементы.ДекорацияОписаниеПараметров.Заголовок = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.ПравилаОтбораТоваровИнвентаризации) Тогда
		Элементы.РедактироватьНастройки.Доступность = Ложь;
		Элементы.ДекорацияОписаниеПараметров.Заголовок = "<Произвольный список товаров>";
		Возврат;
	КонецЕсли;
	
	Если Объект.ПравилаОтбораТоваровИнвентаризации = Справочники.ПравилаОтбораТоваров.ПолнаяИнвентаризация Тогда
		СхемаИНастройки = Справочники.ПравилаОтбораТоваров.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(Объект.ПравилаОтбораТоваровИнвентаризации, "ПолнаяИнвентаризация");
		Элементы.РедактироватьНастройки.Доступность = Ложь;
	ИначеЕсли Объект.ПравилаОтбораТоваровИнвентаризации = Справочники.ПравилаОтбораТоваров.ИнвентаризацияЗапрещенныхКПродаже Тогда
		СхемаИНастройки = Справочники.ПравилаОтбораТоваров.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(Объект.ПравилаОтбораТоваровИнвентаризации, "ИнвентаризацияЗапрещенныхКПродаже");
		Элементы.РедактироватьНастройки.Доступность = Ложь;
	Иначе
		СхемаИНастройки = Справочники.ПравилаОтбораТоваров.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(Объект.ПравилаОтбораТоваровИнвентаризации, Объект.ПравилаОтбораТоваровИнвентаризации.СхемаКомпоновкиДанных);
		Элементы.РедактироватьНастройки.Доступность = Истина;
	КонецЕсли; 
	
	СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	Если ПерезаполнятьНастрокиКомпоновкиДанных Тогда
		Если Не ЗначениеЗаполнено(СхемаИНастройки.НастройкиКомпоновкиДанных) Тогда
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			УстановитьПривилегированныйРежим(Истина);
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
			УстановитьПривилегированныйРежим(Ложь);
			КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			
			НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
		Иначе
			НастройкиКомпоновкиДанных = СхемаИНастройки.НастройкиКомпоновкиДанных;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьОписаниеПараметровНастройки(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных);
	АдресНастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОписаниеПараметровНастройки(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных)
	
	ОписаниеПараметров = ОбщегоНазначенияРТСервер.ОписаниеПараметровНастройки(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных);
	
	Элементы.ДекорацияОписаниеПараметров.Заголовок = ОписаниеПараметров;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиКомпоновкиДанных(АдресСхемыКомпоновкиДанных, АдресХранилищаНастройкиКомпоновщика)
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	НастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновщика);
	ОбновитьОписаниеПараметровНастройки(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных);
	АдресНастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, УникальныйИдентификатор);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
