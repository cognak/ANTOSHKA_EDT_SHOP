&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда

		Возврат;

	КонецЕсли;

	Магазин = ПараметрыСеанса.ТекущийМагазин;
	ЭтоГлавныйУзел = ОбменДаннымиПовтИсп.ЭтоГлавныйУзел();

	Если НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		Элементы.Магазин.ТолькоПросмотр = Истина;

	КонецЕсли;

	Если Параметры.Свойство("СписокПриказов") И Параметры.СписокПриказов.Количество() > 1 Тогда

		ПроверитьСписокПриказовИЗаполнитьТаблицу(Параметры.СписокПриказов);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПроверитьПометкуТаблицыПриказов();

КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)

	ТаблицаПриказов.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборПриказовНаИнвентаризацию(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПодборПриказовНаИнвентаризациюЗавершение", ЭтотОбъект);

	ОткрытьФорму("Документ.ПриказНаПроведениеИнвентаризацииТоваров.ФормаВыбора"
		, ПараметрыФормыПодбора(Истина)
		, Элементы.ТаблицаПриказов
		, ЭтотОбъект
		,
		,
		, ОписаниеОповещения
	);

КонецПроцедуры

&НаКлиенте
Процедура КомандаПересчетТоваров(Команда)

	ПечатьТабличногоДокумента("ПересчетТоваров");

КонецПроцедуры

&НаКлиенте
Процедура КомандаПересчетТоваровСОтклонением(Команда)

	ПечатьТабличногоДокумента("ПересчетТоваровСОтклонением");

КонецПроцедуры

&НаКлиенте
Процедура ПечатьТабличногоДокумента(ИмяМакета)

	Перем СписокДокументов;

	Если ПроверитьОбязательноеЗаполнение(СписокДокументов) Тогда

		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
				"Документ.ПересчетТоваров",
				ИмяМакета,
				СписокДокументов,
				ЭтотОбъект,
				Новый Структура("СводныйДокумент", Истина)
		);

	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПодборПриказовНаИнвентаризациюЗавершение(Результаты, ДополнительныеПараметры)	Экспорт

	Если НЕ Результаты = Неопределено Тогда

		ПроверитьСписокПриказовИЗаполнитьТаблицу(Результаты);
		ПроверитьПометкуТаблицыПриказов();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПриказовПриказНаПроведениеИнвентаризацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОткрытьФорму("Документ.ПриказНаПроведениеИнвентаризацииТоваров.ФормаВыбора"
		, ПараметрыФормыПодбора(Ложь)
		, Элемент
		, ЭтотОбъект
	);

КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормыПодбора(МножественныйВыбор)

	СсылкаНеВСписке = Новый Массив;

	Для каждого СтрокаТаблицы Из ТаблицаПриказов Цикл

		Если Элементы.ТаблицаПриказов.ТекущиеДанные = Неопределено
		ИЛИ НЕ СтрокаТаблицы.ПриказНаПроведениеИнвентаризации = Элементы.ТаблицаПриказов.ТекущиеДанные.ПриказНаПроведениеИнвентаризации Тогда

			СсылкаНеВСписке.Добавить(СтрокаТаблицы.ПриказНаПроведениеИнвентаризации);

		КонецЕсли;

	КонецЦикла;

	ПараметрыФормы = Новый Структура(
		"Проведен, МножественныйВыбор, Отбор"
		, Истина
		, МножественныйВыбор
		, Новый Структура(
			"Магазин, СсылкаНеВСписке"
			, Магазин
			, СсылкаНеВСписке
		)
	);

	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Процедура ТаблицаПриказовПриказНаПроведениеИнвентаризацииПриИзменении(Элемент)

	ЗаполнитьРеквизитыСтрокиПриказов(Элементы.ТаблицаПриказов.ТекущаяСтрока);
	ПроверитьПометкуТаблицыПриказов();

КонецПроцедуры

&НаСервере
Процедура ПроверитьСписокПриказовИЗаполнитьТаблицу(СписокПриказов)

	ТаблицаПриказов.Очистить();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Дата КАК Дата,
	|	ТаблицаДокументы.Ссылка КАК ПриказНаПроведениеИнвентаризации,
	|	ВЫБОР
	|			КОГДА НЕ &ЭтоГлавныйУзел
	|				ТОГДА ТаблицаДокументы.Магазин = &Магазин
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|		И НЕ ТаблицаДокументы.ПометкаУдаления КАК Пометка,
	|	ТаблицаДокументы.Проведен КАК Проведен,
	|	ТаблицаДокументы.ПометкаУдаления КАК ПометкаУдаления,
	|	ТаблицаДокументы.Магазин КАК Магазин
	|ИЗ
	|	Документ.ПриказНаПроведениеИнвентаризацииТоваров КАК ТаблицаДокументы
	|ГДЕ
	|	ТаблицаДокументы.Ссылка В(&СписокПриказов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ПриказНаПроведениеИнвентаризации"
	);
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("СписокПриказов", СписокПриказов);
	Запрос.УстановитьПараметр("ЭтоГлавныйУзел", ОбменДаннымиПовтИсп.ЭтоГлавныйУзел());
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(Магазин) И ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

			Если НЕ Выборка.ПометкаУдаления Тогда

				Магазин = Выборка.Магазин;

			КонецЕсли;

		КонецЕсли;

		СтрокаТаблицы = ТаблицаПриказов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПометкуТаблицыПриказов()

	Для каждого СтрокаТаблицы Из ТаблицаПриказов Цикл

		Если ЭтоГлавныйУзел Тогда

			СтрокаТаблицы.Пометка = НЕ СтрокаТаблицы.ПометкаУдаления И СтрокаТаблицы.Магазин = Магазин;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПриказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле = Элементы.ТаблицаПриказовМагазин Тогда

		СтандартнаяОбработка = Ложь;

		Если ЭтоГлавныйУзел Тогда

			ТекущиеДанные = Элементы.ТаблицаПриказов.ТекущиеДанные;
			СтарыйМагазин = Магазин;

			Если НЕ ТекущиеДанные = Неопределено Тогда

				Магазин = ТекущиеДанные.Магазин;

			КонецЕсли;

			ПроверитьПометкуТаблицыПриказов();

			Если НЕ СтарыйМагазин = Магазин Тогда

				ПоказатьОповещениеПользователя("Магазин изменён!"
					,
					, "Установлено значение магазина «" + Магазин + "»"
					, БиблиотекаКартинок.Информация32
				);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыСтрокиПриказов(ИдентификаторСтроки)

	ТекущаяСтрока = ТаблицаПриказов.НайтиПоИдентификатору(ИдентификаторСтроки);
	ТекущаяСтрока.Проведен = Ложь;
	ТекущаяСтрока.Магазин  = Неопределено;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка КАК ПриказНаПроведениеИнвентаризации,
	|	ТаблицаДокументы.Проведен КАК Проведен,
	|	ТаблицаДокументы.Магазин КАК Магазин,
	|	ТаблицаДокументы.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.ПриказНаПроведениеИнвентаризацииТоваров КАК ТаблицаДокументы
	|ГДЕ
	|	ТаблицаДокументы.Ссылка = &ПриказНаПроведениеИнвентаризации"
	);
	Запрос.УстановитьПараметр("ПриказНаПроведениеИнвентаризации", ТекущаяСтрока.ПриказНаПроведениеИнвентаризации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

		ТекущаяСтрока.Проведен = Выборка.Проведен;
		ТекущаяСтрока.ПометкаУдаления = Выборка.ПометкаУдаления;
		ТекущаяСтрока.Магазин  = Выборка.Магазин;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьIDNМагазина()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Магазины.СкладПродажи.IDN КАК IDN
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.Ссылка = &Магазин"
	);
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		IDN = СокрЛП(Выборка.IDN);

	Иначе

		IDN = "";

	КонецЕсли;
	
	Возврат IDN;

КонецФункции

&НаКлиенте
Функция ПроверитьОбязательноеЗаполнение(СписокДокументов)

	ТекстСообщения   = "";

	СписокПриказов = Новый Массив;

	Для каждого СтрокаТаблицы Из ТаблицаПриказов Цикл

		Если СтрокаТаблицы.Пометка Тогда

			СписокПриказов.Добавить(СтрокаТаблицы.ПриказНаПроведениеИнвентаризации);

		КонецЕсли;

	КонецЦикла;

	Если Магазин.Пустая() Тогда

		ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", "; ")
		+ "не указан магазин";

	КонецЕсли;

	Если ВидНоменклатуры.Пустая() Тогда

		ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", "; ")
		+ "не указан проект";

	КонецЕсли;

	Если СписокПриказов.Количество() = 0 Тогда

		ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", "; ")
		+ "не указаны приказы на инвентаризацию";

	ИначеЕсли НЕ ВидНоменклатуры.Пустая() Тогда

		СписокДокументов = ПолучитьСписокПересчетыТоваров(СписокПриказов, ВидНоменклатуры);

		Если СписокДокументов.Количество() = 0 Тогда

			ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", "; ")
			+ "не найдены пересчёты товаров по указанным критериям";

		КонецЕсли;

	КонецЕсли;

	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда

		ПоказатьОповещениеПользователя("Источник не определён!",
			, "Ошибки заполнения:" + Символы.ПС + ТекстСообщения
			, БиблиотекаКартинок.Предупреждение32
		);

	КонецЕсли;

	Возврат ПустаяСтрока(ТекстСообщения);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокПересчетыТоваров(СписокПриказов, ВидНоменклатуры)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПересчетТоваров КАК ТаблицаДокументы
	|ГДЕ
	|	ТаблицаДокументы.ДокументОснование В(&СписокПриказов)
	|	И НЕ ТаблицаДокументы.ПометкаУдаления
	|	И ТаблицаДокументы.ВидНоменклатуры = &ВидНоменклатуры"
	);
	Запрос.УстановитьПараметр("СписокПриказов", СписокПриказов);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

&НаКлиенте
Процедура ЗаписатьРезультатыВТекстовыйФайл(Команда)

	Перем СписокДокументов;

	Если ПроверитьОбязательноеЗаполнение(СписокДокументов) Тогда

		СкладскиеОперацииКлиентСервер.ЗаписатьРезультатыИнвентаризацииВТекстовыйФайл(
			СписокДокументов,
			ВидНоменклатуры,
			"",
			ПолучитьIDNМагазина()
		);

	КонецЕсли;

КонецПроцедуры







