
// Функция выполняет проверку возможности печати документов.
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы
//
// Возвращаемое значение:
//	Массив - Массив не проведенных документов
//
&НаСервере
Функция ПроверитьПроведенностьДокументов(МассивДокументов)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Проведен КАК Проведен
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры КАК Документ
	|ГДЕ
	|	Документ.Ссылка В (&МассивДокументов)
	|	И Не Документ.Проведен
	|");
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивНепроведенныхДокументов = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивНепроведенныхДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивНепроведенныхДокументов;

КонецФункции // ПроверитьПроведенностьДокументов()

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//   Адрес   - адрес структуры данных во временном хранилище
//
Функция ПодготовитьСтруктуруДанных(МассивДокументов, МассивНепроведенныхДокументов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УстановкаЦенНоменклатурыТовары.Номенклатура КАК Номенклатура,
	|	УстановкаЦенНоменклатурыТовары.Характеристика КАК Характеристика,
	|	УстановкаЦенНоменклатурыТовары.Упаковка КАК Упаковка,
	|	УстановкаЦенНоменклатурыТовары.НомерСтроки,
	|	СУММА(1) КАК Количество,
	|	УстановкаЦенНоменклатурыТовары.Цена
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатурыТовары
	|ГДЕ
	|	УстановкаЦенНоменклатурыТовары.Ссылка В(&МассивДокументов)
	|	И НЕ УстановкаЦенНоменклатурыТовары.Ссылка В (&МассивНепроведенныхДокументов)
	|	И НЕ(УстановкаЦенНоменклатурыТовары.Номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики
	|				И УстановкаЦенНоменклатурыТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	УстановкаЦенНоменклатурыТовары.Номенклатура,
	|	УстановкаЦенНоменклатурыТовары.Характеристика,
	|	УстановкаЦенНоменклатурыТовары.Упаковка,
	|	УстановкаЦенНоменклатурыТовары.НомерСтроки,
	|	УстановкаЦенНоменклатурыТовары.Цена
	|
	|УПОРЯДОЧИТЬ ПО
	|	УстановкаЦенНоменклатурыТовары.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УстановкаЦенНоменклатуры.ВидЦены КАК ВидЦены
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.ВидыЦен КАК УстановкаЦенНоменклатуры
	|ГДЕ
	|	УстановкаЦенНоменклатуры.Ссылка В(&МассивДокументов)
	|	И НЕ УстановкаЦенНоменклатуры.Ссылка В (&МассивНепроведенныхДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УстановкаЦенНоменклатуры.Ссылка
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
	|ГДЕ
	|	УстановкаЦенНоменклатуры.Ссылка В(&МассивДокументов)
	|	И НЕ УстановкаЦенНоменклатуры.Ссылка В (&МассивНепроведенныхДокументов)";
	
	Запрос.УстановитьПараметр("МассивНепроведенныхДокументов", МассивНепроведенныхДокументов);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	МассивПроведенныхДокументов = МассивРезультатов[2].Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивВидовЦен = ТаблицаРеквизитыДокументов.ВыгрузитьКолонку(0);
	
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСклад", Неопределено);
	СтруктураДействий.Вставить("ЗаполнитьВидЦены", ?(МассивВидовЦен.Количество() > 0, МассивВидовЦен[0], Неопределено));
	СтруктураДействий.Вставить("УстановитьСпособПолученияЦен", 1);
	СтруктураДействий.Вставить("ВидимостьГруппыЦен", Истина);
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Ложь);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоОстаткамНаСкладе");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("СкрыватьКомандуЗаполненияПоДокументу");
	
	
	// Подготовка данных для заполенения табличной части обработки печати ценников и этикеток
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	СтруктураРезультат.Вставить("МассивДокументов", МассивПроведенныхДокументов);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции // ПодготовитьДанные()

// Процедура обработки команды "ПечатьПКО".
//
&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
	
	МассивНепроведенныхДокументов = ПроверитьПроведенностьДокументов(ПараметрКоманды);
	КоличествоНепроведенныхДокументов = МассивНепроведенныхДокументов.Количество();
	Если КоличествоНепроведенныхДокументов > 0 Тогда
		
		Если КоличествоНепроведенныхДокументов = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Печать этикеток возможна только после проведения документа, провести документ?'")
		Иначе
			ТекстВопроса = НСтр("ru = 'Печать этикеток возможна только после проведения документов, провести документы?'")
		КонецЕсли;
		
		КодОтвета = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если КодОтвета = КодВозвратаДиалога.Да Тогда
			МассивНепроведенныхДокументов = ФормированиеПечатныхФормСервер.ПровестиДокументы(МассивНепроведенныхДокументов);
		КонецЕсли;
	
	КонецЕсли;
	
	Если ПараметрКоманды.Количество() - МассивНепроведенныхДокументов.Количество() > 0 Тогда
		
		АдресВХранилище = ПодготовитьСтруктуруДанных(ПараметрКоманды, МассивНепроведенныхДокументов);
		
		СтруктураПараметры = Новый Структура("АдресВХранилище", АдресВХранилище);
		
		ОткрытьФорму(
			"Обработка.ПечатьЭтикетокИЦенников.Форма.Форма",
			СтруктураПараметры,            // Параметры
			,                              // Владелец
			Новый УникальныйИдентификатор  // Уникальность
		);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаКоманды()
