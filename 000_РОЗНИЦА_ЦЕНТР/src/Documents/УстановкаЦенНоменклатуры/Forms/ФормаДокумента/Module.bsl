&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ДобавитьХарактеристику;

&НаСервере
Перем ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров; // Кэш, используемый для быстрого поиска строки дерева по номенклатуре

&НаСервере
Перем СоответствиеВидовЦенИменамКолонокТаблицыТоваров; // Кэш имет колонок видов цен

&НаСервере
Перем СправочникВидовЦен;

&НаКлиенте
Перем СтараяНоменклатура; // Используется в механизмах обработчиков событий табличной части Товары
&НаКлиенте
Перем СтараяХарактеристика; // Используется в механизмах обработчиков событий табличной части Товары
&НаКлиенте
Перем ИзмененаЦена; // Используется в механизмах обработчиков событий табличной части Товары

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ФлагОткрытияФормы = Истина;
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);

//	LNK 08.09.2016 14:32:47
//	NAV:БлокировкаДанныхУчестьДокументВNavision
//	Обработчик подсистемы "NAV"
	ВнешниеИсточникиСобытия.ДобавитьКнопкуУчестьВNavision(ЭтотОбъект, ЭтотОбъект.КоманднаяПанель);
//	Оформление элементов в обработчике подсистемы "NAV"
	ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект);
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект, КартинкаСостоянияДокумента, СостояниеДокумента, РазрешеноПроведение);
	
	ИспользоватьЦеновыеГруппы              = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры       = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	ПустаяУпаковка                         = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	ПустаяХарактеристика                   = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ПустаяЕдиницаИзмерения                 = Справочники.БазовыеЕдиницыИзмерения.ПустаяСсылка();
	
	СпособЗаданияЦеныВручную = Перечисления.СпособыЗаданияЦен.Вручную;
	
	// Таблица настроек СКД для видов цен с алгоритмом расчета цены "Заполнять по данным ИБ".
	ТаблицаНастройкиКомпоновкиДанных = ЗагрузитьТаблицуНастройкиКомпоновкиДанных();
	ЗагрузитьСправочникВидовЦен(ТаблицаНастройкиКомпоновкиДанных);
	
	ИнициализироватьВыбранныеЦены(ТаблицаНастройкиКомпоновкиДанных);
	
	АдресХранилищаНастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(ТаблицаНастройкиКомпоновкиДанных, УникальныйИдентификатор);
	
	ОтображатьВлияющиеЦены = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(,"УстановкаЦенНоменклатурыОтображатьВлияющиеЦены");
	
	ЗаполнитьДокумент();
	
	УстановитьРассчитыватьАвтоматически(Истина);
	УстановитьЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре(Истина);
	ЗафиксироватьКолонкуНоменклатура(Истина);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьДоступностьЭлементовСервер();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.Основание.Видимость = Истина;
		Элементы.ПерезаполнитьПоОснованию.Видимость = Истина;
	Иначе
		Элементы.Основание.Видимость = Ложь;
		Элементы.ПерезаполнитьПоОснованию.Видимость = Ложь;
	КонецЕсли;

	УправлениеДоступомРТ.ПриСозданииФормыНаСервере(ЭтотОбъект);	//	LNK 17.10.2019 14:30:01
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ОтображениеТаблицыЦен = Настройки.Получить("ОтображениеТаблицыЦен");
	
	Если ЗначениеЗаполнено(ОтображениеТаблицыЦен) Тогда
		Если ОтображениеТаблицыЦен = "Дерево" Тогда
			Элементы.ДеревоЦен.Отображение = ОтображениеТаблицы.Дерево;
		ИначеЕсли ОтображениеТаблицыЦен = "ИерархическийСписок" Тогда
			Элементы.ДеревоЦен.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		ИначеЕсли ОтображениеТаблицыЦен = "Список" Тогда
			Элементы.ДеревоЦен.Отображение = ОтображениеТаблицы.Список;
		КонецЕсли;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УстановитьРассчитыватьАвтоматически(Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ДеревоЦенРассчитыватьАвтоматически", "Видимость", Ложь);
		
	#Иначе
		
		РассчитыватьАвтоматически = Настройки.Получить("РассчитыватьАвтоматически");
		УстановитьРассчитыватьАвтоматически(РассчитыватьАвтоматически);
		
	#КонецЕсли
	
	ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре = Настройки.Получить("ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре");
	УстановитьЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре(ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре);
	
	ЗафиксироватьКолонкуНоменклатура = Настройки.Получить("ЗафиксироватьКолонкуНоменклатура");
	ЗафиксироватьКолонкуНоменклатура(ЗафиксироватьКолонкуНоменклатура);
	
	ОтображатьВлияющиеЦены = Настройки.Получить("ОтображатьВлияющиеЦены");
	Элементы.ДеревоЦенПереключательОтображатьВлияющиеЦены.Пометка = ОтображатьВлияющиеЦены;
	
	АвтоматическиДобавлятьХарактеристики = Настройки.Получить("АвтоматическиДобавлятьХарактеристики");
	УстановитьАвтоматическиДобавлятьХарактеристики(АвтоматическиДобавлятьХарактеристики);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Если Настройки.Получить("ОтображениеТаблицыЦен") <> Неопределено Тогда
		ОтображениеТаблицыЦен = Строка(Элементы.ДеревоЦен.Отображение);
		Настройки["ОтображениеТаблицыЦен"] = ОтображениеТаблицыЦен;
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(,"УстановкаЦенНоменклатурыОтображатьВлияющиеЦены", ОтображатьВлияющиеЦены);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ВыбранныеЦеныИзменены И ДеревоЦен.ПолучитьЭлементы().Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Состав цен изменился. Необходимо перейти к установке цен.'"));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ПроверитьКорректностьЗаполненияДокумента(Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоместитьВидыЦенВТабличнуюЧасть(ТекущийОбъект);
		ПоместитьЦеныВТабличнуюЧасть(ТекущийОбъект, Ложь);
	КонецЕсли;

//	LNK 09.09.2016 08:23:08
//	NAV:БлокировкаДанныхУчестьДокументВNavision
//	Управление блокировкой "УчётВNavision" подсистемы "NAV" (реквизит "РегистрацияПередачиВNavision" создается в обработчике ПриСозданииНаСервере)
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РегистрацияПередачиВNavision", ЭтотОбъект["РегистрацияПередачиВNavision"]);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ДеревоЦен.ПолучитьЭлементы().Количество() = 0 Тогда
	
		ТекстОшибки = НСтр("ru='Не введено ни одной строки в список ""Товары"".'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Объект.Ссылка,
			"ДеревоЦен",
			,
			Отказ
		);
		
	Иначе
		
		ПроверитьКорректностьЗаполненияДокумента(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	Если ФлагОткрытияФормы = Истина Тогда
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			НомерВПределахДня = ДатаДокументаСервер(Объект.Дата) - НачалоДня(ДатаДокументаСервер(Объект.Дата)) + 1;
		Иначе
			НомерВПределахДня = РассчитатьНомерВПределахДня(ДатаДокументаСервер(Объект.Дата), Объект.Ссылка);
			Объект.Дата = РассчитатьДатуДокумента(ДатаДокументаСервер(Объект.Дата), НомерВПределахДня);
		КонецЕсли;
		
		// Таблица настроек СКД для видов цен с алгоритмом расчета цены "Заполнять по данным ИБ".
		ТаблицаНастройкиКомпоновкиДанных = ЗагрузитьТаблицуНастройкиКомпоновкиДанных();
		
		ИнициализироватьВыбранныеЦены(ТаблицаНастройкиКомпоновкиДанных);
		
		ЗаполнитьДокумент();
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовСервер();
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.Основание.Видимость = Истина;
		Элементы.ПерезаполнитьПоОснованию.Видимость = Истина;
	Иначе
		Элементы.Основание.Видимость = Ложь;
		Элементы.ПерезаполнитьПоОснованию.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьЭлементовСервер();

//	LNK 09.09.2016 08:23:14
//	NAV:БлокировкаДанныхУчестьДокументВNavision
//	Оформление элементов в обработчике подсистемы "NAV"
	ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
//	LNK 09.09.2016 09:30:59
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	ВнешниеИсточникиКлиент.ВыполнитьОповещениеПередачиДокументаВNavision(Объект.Ссылка, Объект.Ссылка, ЭтотОбъект["РегистрацияПередачиВNavision"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;

КонецПроцедуры

//	LNK 09.09.2016 09:37:46
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ИмяСобытия = "РегистрацияПередачиВNavision" Тогда

		ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник);

	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ДеревоЦен.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
//	ПереформироватьТаблицуЦен(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаУстановкаЦен Тогда
		
		ПриПереходеКУстановкеЦен();
		ВыбранныеЦеныИзменены = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);
	
КонецПроцедуры

//	NAV:БлокировкаДанныхУчестьДокументВNavision
#Область ОбслуживаниеКнопкиУчестьДокументВNavision

//	LNK 08.09.2016 14:41:31
//	Обработчик события кнопки подсистемы "NAV"
&НаКлиенте
Процедура РегистрацияПередачиВNavisionНажатие(Элемент)

	ВнешниеИсточникиКлиент.ПодтвердитьРешениеУчетВNavision(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте	//	LNK 18.06.2023 06:12:51
Процедура РегистрацияПередачиВNavisionПовторнаяНажатие(Элемент)

	ВнешниеИсточникиКлиент.ПодтвердитьПовторнуюВыгрузкуВNavision(ЭтотОбъект);

КонецПроцедуры

//	LNK 08.09.2016 14:41:31
//	Обработчик события кнопки подсистемы "NAV"
&НаСервере
Процедура РегистрацияПередачиВNavisionНаСервере()	Экспорт

//	Оформление элементов в обработчике подсистемы "NAV"
	ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект, Истина);

КонецПроцедуры

//	LNK 23.10.2017 14:18:28
&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник)

//	LNK 09.09.2016 09:34:22
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ИмяСобытия = "РегистрацияПередачиВNavision" Тогда

		Если НЕ Источник = Объект.Ссылка И Параметр.Объект = Объект.Ссылка Тогда

		//	Оформление элементов в обработчике подсистемы "NAV"
			ВнешниеИсточникиСобытия.ПроверитьКнопкуУчестьВNavision(ЭтотОбъект);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Изменить(Команда)
	
	Если Объект.Согласован Тогда
		Объект.Согласован = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоЦеновойГруппе(Команда)
	
	ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.ЦеновыеГруппы.ФормаВыбора", Новый Структура("МножественныйВыбор", Истина), ЭтотОбъект);
	ДобавитьНоменклатуруЦеновойГруппы(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоОтбору(Команда)
	
	АдресВоВременномХранилище = ОткрытьФормуМодально("Обработка.ПодборТоваровПоОтбору.Форма.Форма", , ЭтотОбъект);
	Если ЗначениеЗаполнено(АдресВоВременномХранилище) Тогда
		ДобавитьТоварыПоОтборуНаСервере(АдресВоВременномХранилище);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоЦеновойГруппе(Команда)
	
	ОчищатьТаблицу = Ложь;
	
	Если ДеревоЦен.ПолучитьЭлементы().Количество() > 0 Тогда
		
		ОтветНаВопрос = Вопрос(НСтр("ru='Таблица цен будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			ОчищатьТаблицу = Истина;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.ЦеновыеГруппы.ФормаВыбора", Новый Структура("МножественныйВыбор", Истина), ЭтотОбъект);

	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Если ОчищатьТаблицу Тогда
			ДеревоЦен.ПолучитьЭлементы().Очистить();
		КонецЕсли;
		
		ДобавитьНоменклатуруЦеновойГруппы(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСтарыеЦены(Команда)
	
	ЗапуститьРасчетЦен(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкруглитьРучныеЦены(Команда)
	
	ЗапуститьРасчетЦен(Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКРедактированиюСпискаВидовЦен(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаВидыЦен;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКУстановкеЦен(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаУстановкаЦен;
	ПриПереходеКУстановкеЦен();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательРассчитыватьАвтоматически(Команда)
	
	УстановитьРассчитыватьАвтоматическиНаКлиенте(Не РассчитыватьАвтоматически);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре(Команда)
	
	УстановитьЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуреНаКлиенте(Не ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательАвтоматическиДобавлятьХарактеристики(Команда)
	
	УстановитьАвтоматическиДобавлятьХарактеристикиНаКлиенте(Не АвтоматическиДобавлятьХарактеристики);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательЗафиксироватьКолонкуНоменклатура(Команда)
	
	ЗафиксироватьКолонкуНоменклатураНаКлиенте(Не ЗафиксироватьКолонкуНоменклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтображатьВлияющиеЦены(Команда)
	
	ОтображатьВлияющиеЦены = Не ОтображатьВлияющиеЦены;
	
	Элементы.ДеревоЦенПереключательОтображатьВлияющиеЦены.Пометка = ОтображатьВлияющиеЦены;
	
	ПереформироватьТаблицуЦен = Ложь;
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		Если Не ВидЦены.Выбрана И ВидЦены.Влияет Тогда
			ПереформироватьТаблицуЦен = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПереформироватьТаблицуЦен Тогда
		ПереформироватьТаблицуЦен(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	ЗапуститьРасчетЦен();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеВидыЦен(Команда)
	
	Для Каждого СтрокаТаблицы Из ВыбранныеЦены Цикл
		Если НЕ СтрокаТаблицы.Выбрана И НЕ СтрокаТаблицы.ЗапрещенныйВидЦены Тогда
			СтрокаТаблицы.Выбрана = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ВыбранныеЦеныИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьВсеВидыЦен(Команда)
	
	Для Каждого СтрокаТаблицы Из ВыбранныеЦены Цикл
		Если СтрокаТаблицы.Выбрана Тогда
			СтрокаТаблицы.Выбрана = Ложь;
		КонецЕсли;
	КонецЦикла;

	ВыбранныеЦеныИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеЗависимые(Команда)
	
	ВыбратьВсеЗависимыеЦены();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеВлияющие(Команда)
	
	ВыбратьВсеВлияющиеЦены();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьХарактеристику(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для того, чтобы выбрать характеристику Вам необходимо предварительно выбрать номенклатуру.'"));
		Возврат;
	КонецЕсли;
	
	ВладелецХарактеристики = Неопределено;
	Если ОбработкаТабличнойЧастиТоварыСервер.ПроверитьИспользованиеХарактеристикИПолучитьВладельцаДляВыбора(ТекущиеДанные.Номенклатура, ВладелецХарактеристики) Тогда
		Если ВладелецХарактеристики = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для данной номенклатуры характеристики не заданы.'"));
			Возврат;
		Иначе
			
			ПараметрыФормыВыбора = Новый Структура;
			ПараметрыФормыВыбора.Вставить("ТекущийЭлемент"  , ТекущиеДанные.Характеристика);
			ПараметрыФормыВыбора.Вставить("ПараметрВладелец", ВладелецХарактеристики);
			ПараметрыФормыВыбора.Вставить("Номенклатура"    , ТекущиеДанные.Номенклатура);
			
			ТекущийЭлемент = Элементы.ДеревоЦенХарактеристика;
			
			Характеристика = ОткрытьФормуМодально("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыФормыВыбора);
			Если Характеристика = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ЭлементыХарактеристики = ДеревоЦен.НайтиПоИдентификатору(Элементы.ДеревоЦен.ТекущаяСтрока);
			Если ЭлементыХарактеристики.ПолучитьРодителя() = Неопределено Тогда
				ЭлементыХарактеристики = ЭлементыХарактеристики.ПолучитьЭлементы();
			Иначе
				ЭлементыХарактеристики = ЭлементыХарактеристики.ПолучитьРодителя().ПолучитьЭлементы();
			КонецЕсли;
			Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				Если ЭлементХарактеристика.Характеристика = Характеристика Тогда
					Элементы.ДеревоЦен.ТекущаяСтрока = ЭлементХарактеристика.ПолучитьИдентификатор();;
					ПоказатьПредупреждение(, НСтр("ru = 'Такая характеристика уже введена.'"));
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
			ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
			Если ТекущийРодитель = Неопределено Тогда
				ТекущийРодитель = ТекущиеДанные;
			КонецЕсли;
			НоваяСтрока = ТекущийРодитель.ПолучитьЭлементы().Добавить();
			Элементы.ДеревоЦен.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			
			Если ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийРодитель, , "Характеристика");
			Иначе
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийРодитель, "Номенклатура, ХарактеристикиИспользуются, ЦеноваяГруппа, ЕдиницаИзмерения");
			КонецЕсли;
			НоваяСтрока.Характеристика = Характеристика;
			
			ЗаполнитьИндексКартинкиСтрокиДереваЦен(НоваяСтрока);
			ДеревоЦенХарактеристикаПриИзмененииСервер(Элементы.ДеревоЦен.ТекущаяСтрока);
			
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Для данной номенклатуры отключено использование характеристик.'"));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуру(Команда)
	
	ТекущийЭлемент = Элементы.ДеревоЦенНоменклатура;
	
	ПараметрыФормы = Новый Структура(
		"РежимВыбора, ТекущаяСтрока"
		, Истина
		, ?(ТекущийЭлемент.ТекущиеДанные = Неопределено, Неопределено, ТекущийЭлемент.ТекущиеДанные.Номенклатура));

	Номенклатура = ОткрытьФормуМодально("Справочник.Номенклатура.ФормаСписка", ПараметрыФормы);
	Если Номенклатура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
	Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		Если ЭлементНоменклатура.Номенклатура = Номенклатура Тогда
			Элементы.ДеревоЦен.ТекущаяСтрока = ЭлементНоменклатура.ПолучитьИдентификатор();
			ПоказатьПредупреждение(, НСтр("ru = 'Такая номенклатура уже введена.'"));
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	НоваяСтрока = ДеревоЦен.ПолучитьЭлементы().Добавить();
	Элементы.ДеревоЦен.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	НоваяСтрока.Номенклатура = Номенклатура;
	
	ЗаполнитьИндексКартинкиСтрокиДереваЦен(НоваяСтрока);
	ДобавитьНоменклатуруСервер(Элементы.ДеревоЦен.ТекущаяСтрока)

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройки(Команда)
	
	ТекущиеДанные = Элементы.ВыбранныеЦены.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Редактировать настройки невозможно. Не выбран вид цены'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Согласован Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТекущиеДанные.СпособЗаданияЦены <> ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ")
		И ТекущиеДанные.СпособЗаданияЦены <> ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении") )
		ИЛИ Не ТекущиеДанные.Выбрана Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Редактировать настройки схемы компоновки можно только для выбранных видов цен
			                          |со способом задания цены ""Заполнять по данным ИБ""'"));
		Возврат;
	КонецЕсли;
	
	// Открыть редактор настроек схемы компоновки данных
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru = 'Настройка параметров для для вида цены ""%1""'");
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = СтрЗаменить(ЗаголовокФормыНастройкиСхемыКомпоновкиДанных, "%1", Строка(ТекущиеДанные.Ссылка));
	
	АдресХранилищаНастройкиКомпоновщика = ОткрытьФормуМодально("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных",
		Новый Структура(
			"НеПомещатьНастройкиВСхемуКомпоновкиДанных,
			|НеРедактироватьСхемуКомпоновкиДанных,
			|НеНастраиватьУсловноеОформление,
			|НеНастраиватьВыбор,
			|НеНастраиватьПорядок,
			|АдресСхемыКомпоновкиДанных,
			|АдресНастроекКомпоновкиДанных,
			|УникальныйИдентификатор,
			|Заголовок",
			Истина,
			Истина,
			Истина,
			Истина,
			Истина,
			ТекущиеДанные.АдресСхемыКомпоновкиДанных,
			АдресНастроекКомпоновкиДанныхДляВидаЦены(ТекущиеДанные.Ссылка, АдресХранилищаНастройкиКомпоновкиДанных, УникальныйИдентификатор),
			УникальныйИдентификатор,
			ЗаголовокФормыНастройкиСхемыКомпоновкиДанных)
	);
	
	Если АдресХранилищаНастройкиКомпоновщика <> Неопределено Тогда
		ВыбранныеЦеныИзменены = Истина;
		СтруктураДанных = УстановитьНастройкиКомпоновкиДанныхДляВидаЦены(ТекущиеДанные.Ссылка, АдресХранилищаНастройкиКомпоновщика, АдресХранилищаНастройкиКомпоновкиДанных, АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен);
		ТекущиеДанные.Параметры = СтруктураДанных.ОписаниеПараметров;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиПоУмолчанию(Команда)
	
	ТекущиеДанные = Элементы.ВыбранныеЦены.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Редактировать настройки невозможно. Не выбран вид цены'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Согласован Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТекущиеДанные.СпособЗаданияЦены <> ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ")
		И ТекущиеДанные.СпособЗаданияЦены <> ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении") )
		ИЛИ Не ТекущиеДанные.Выбрана Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Редактировать настройки схемы компоновки можно только для выбранных видов цен
			                          |со способом задания цены ""Заполнять по данным ИБ""'"));
		Возврат;
	КонецЕсли;
	
	АдресХранилищаНастройкиКомпоновщика = НастройкиСхемыКомпоновкиДанныхПоУмолчанию(ТекущиеДанные.Ссылка, ТекущиеДанные.АдресСхемыКомпоновкиДанных);
	
	Если АдресХранилищаНастройкиКомпоновщика <> Неопределено Тогда
		ВыбранныеЦеныИзменены = Истина;
		СтруктураДанных = УстановитьНастройкиКомпоновкиДанныхДляВидаЦены(ТекущиеДанные.Ссылка, АдресХранилищаНастройкиКомпоновщика, АдресХранилищаНастройкиКомпоновкиДанных, АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен);
		ТекущиеДанные.Параметры = СтруктураДанных.ОписаниеПараметров;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru = 'Перезаполнить документ по данным основания?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПерезаполнитьПоОснованиюСервер();
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Основание не указано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", "установка цен номенклатуры");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИспользоватьОтборПоТипамНоменклатуры", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуЗапрашиватьКоличество", Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуОстаткиНаСкладах", Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуВвестиСерийныеНомера", Истина);
	ПараметрыФормы.Вставить("ЗапрашиватьКоличество", Ложь);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "ДеревоЦен"

// Процедура - обработчик события "ПередНачаломДобавления" таблицы " ДеревоЦен".
//
&НаКлиенте
Процедура ДеревоЦенПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если Не Копирование Тогда
		ДобавитьНоменклатуру(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные.Номенклатура <> СтараяНоменклатура Тогда
		
		ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
		Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
			Если ЭлементНоменклатура.Номенклатура = ТекущиеДанные.Номенклатура Тогда
				Если ТекущиеДанные.ПолучитьИдентификатор() <> ЭлементНоменклатура.ПолучитьИдентификатор() Тогда
					Если Не ОтменаРедактирования Тогда
						Ответ = Вопрос(НСтр("ru = 'Такая номенклатура уже введена. Продолжить редактирование?'"), РежимДиалогаВопрос.ДаНет);
						Если Ответ = КодВозвратаДиалога.Да Тогда
							Отказ = Истина;
						Иначе
							Элементы.ДеревоЦен.ЗакончитьРедактированиеСтроки(Истина);
						КонецЕсли;
					Иначе
						ТекущиеДанные.Номенклатура = СтараяНоменклатура;
						ТекущиеДанные.Характеристика = СтараяХарактеристика;
					КонецЕсли;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДеревоЦенНоменклатураПриИзмененииСервер(Элементы.ДеревоЦен.ТекущиеДанные.ПолучитьИдентификатор(), Не ИзмененаЦена);
		
	КонецЕсли;
	
	Если ТекущиеДанные.Характеристика <> СтараяХарактеристика Тогда
		
		ЭлементыХарактеристики = ДеревоЦен.НайтиПоИдентификатору(Элементы.ДеревоЦен.ТекущаяСтрока);
		
		Если ЭлементыХарактеристики.ПолучитьРодителя() = Неопределено Тогда
			ЭлементыХарактеристики = ЭлементыХарактеристики.ПолучитьЭлементы();
		Иначе
			ЭлементыХарактеристики = ЭлементыХарактеристики.ПолучитьРодителя().ПолучитьЭлементы();
		КонецЕсли;
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			Если ЭлементХарактеристика.Характеристика = ТекущиеДанные.Характеристика Тогда
				Если ТекущиеДанные.ПолучитьИдентификатор() <> ЭлементХарактеристика.ПолучитьИдентификатор() Тогда
					Если Не ОтменаРедактирования Тогда
						Ответ = Вопрос(НСтр("ru = 'Такая номенклатура уже введена. Продолжить редактирование?'"), РежимДиалогаВопрос.ДаНет);
						Если Ответ = КодВозвратаДиалога.Да Тогда
							Отказ = Истина;
						Иначе
							Элементы.ДеревоЦен.ЗакончитьРедактированиеСтроки(Истина);
						КонецЕсли;
					Иначе
						ТекущиеДанные.Номенклатура = СтараяНоменклатура;
						ТекущиеДанные.Характеристика = СтараяХарактеристика;
					КонецЕсли;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДеревоЦенХарактеристикаПриИзмененииСервер(Элементы.ДеревоЦен.ТекущиеДанные.ПолучитьИдентификатор(), Не ИзмененаЦена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	СтараяНоменклатура = ТекущиеДанные.Номенклатура;
	СтараяХарактеристика = ТекущиеДанные.Характеристика;
	ИзмененаЦена = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.УстановкаЦенНоменклатурыПрисоединенныеФайлы") Тогда
		
		ЗагрузитьИзExcelНаКлиенте(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииЯчейки" таблицы "ДеревоЦен".
//
&НаКлиенте
Процедура ДеревоЦенПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
		Или Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ДеревоЦенХарактеристика" Тогда
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		Иначе
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ДеревоЦенНоменклатура" Тогда
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		Иначе
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля "ДеревоЦенХарактеристика".
//
&НаКлиенте
Процедура ДеревоЦенХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ЦенообразованиеКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.ДеревоЦен.ТекущиеДанные);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля "ДеревоЦенУпаковка".
//
&НаКлиенте
Процедура ДеревоЦенУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ЦенообразованиеКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.ДеревоЦен.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенНоменклатураПриИзменении(Элемент)
	
	ДеревоЦенНоменклатураПриИзмененииСервер(Элементы.ДеревоЦен.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ДеревоЦенХарактеристика".
//
&НаКлиенте
Процедура ДеревоЦенХарактеристикаПриИзменении(Элемент)
	
	ДеревоЦенХарактеристикаПриИзмененииСервер(Элементы.ДеревоЦен.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "ВыбранныеЦены"

// Процедура - обработчик события "ПриИзменении" поля "ВыбранныеЦеныВыбрана".
//
&НаКлиенте
Процедура ВыбранныеЦеныВыбранаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыбранныеЦены.ТекущиеДанные;
	Если ТекущиеДанные.ЗапрещенныйВидЦены Тогда
		ТекущиеДанные.Выбрана = Ложь;
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет прав на установку цен по данному виду цены'"), Объект.Ссылка, "ВыбранныеЦены[" + ВыбранныеЦены.Индекс(ТекущиеДанные) + "].Ссылка");
		Возврат;
	КонецЕсли;
	
	ПроставитьФлагиВлияетЗависитНаКлиенте();
	ВыбранныеЦеныИзменены = Истина;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля "ВыбранныеЦеныСсылка".
//
&НаКлиенте
Процедура ВыбранныеЦеныСсылкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля "ВыбранныеЦеныСсылка".
//
&НаКлиенте
Процедура ВыбранныеЦеныСсылкаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "Выбор" таблицы "ВыбранныеЦены".
//
&НаКлиенте
Процедура ВыбранныеЦеныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВыбранныеЦены.ТекущиеДанные;
	Если ТекущиеДанные.ЗапрещенныйВидЦены Тогда
		ТекущиеДанные.Выбрана = Ложь;
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет прав на установку цен по данному виду цены'"), Объект.Ссылка, "ВыбранныеЦены[" + ВыбранныеЦены.Индекс(ТекущиеДанные) + "].Ссылка");
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		Если Поле = Элементы.ВыбранныеЦеныВлияющиеЦены Тогда
			Если Элемент.ТекущиеДанные.ВлияющиеЦены.Количество() > 0 Тогда
				ОткрытьЗначение(Элемент.ТекущиеДанные.ВлияющиеЦены);
			КонецЕсли;
		ИначеЕсли Поле = Элементы.ВыбранныеЦеныЗависимыеЦены Тогда
			Если Элемент.ТекущиеДанные.ЗависимыеЦены.Количество() > 0 Тогда
				ОткрытьЗначение(Элемент.ТекущиеДанные.ЗависимыеЦены);
			КонецЕсли;
		ИначеЕсли Поле = Элементы.ВыбранныеЦеныПараметры Тогда
			
			РедактироватьНастройки(Команды["РедактироватьНастройки"]);
			
		Иначе
			ОткрытьЗначение(Элемент.ТекущиеДанные.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервереБезКонтекста
Функция АдресНастроекКомпоновкиДанныхДляВидаЦены(ВидЦены, АдресХранилищаНастройкиКомпоновкиДанных, УникальныйИдентификатор)
	
	ТаблицаНастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновкиДанных);
	
	НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Найти(ВидЦены, "ВидЦены");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ПоместитьВоВременноеХранилище(НайденнаяСтрока.НастройкиКомпоновкиДанных, УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

// Процедура - обработчик события "ПриИзменении" поля "ДеревоЦенНоменклатура".
//
&НаСервере
Процедура ДеревоЦенНоменклатураПриИзмененииСервер(ИдентификаторСтроки, РассчитатьЦены = Истина)
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекущаяСтрока.ПолучитьРодителя() = Неопределено Тогда
		Характеристики = ТекущаяСтрока.ПолучитьЭлементы();
		Если Характеристики.Количество() > 0 Тогда
			Если Характеристики[0].Номенклатура <> ТекущаяСтрока.Номенклатура Тогда
				ТекущаяСтрока.ПолучитьЭлементы().Очистить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВидыЦен = ВыбранныеСтрокиТаблицыВидовЦен();
	Для Каждого ВидЦены Из ВидыЦен Цикл
		
		ИмяКолонки         = ВидЦены.ИмяКолонки;
		ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока[ИмяКолонки]) И РассчитатьЦены Тогда
			ТекущаяСтрока[ИмяКолонки] = 0;
		КонецЕсли;
		
		Если ИспользоватьУпаковкиНоменклатуры И ЗначениеЗаполнено(ТекущаяСтрока[ИмяКолонкиУпаковка]) Тогда
			ТекущаяСтрока[ИмяКолонкиУпаковка] = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СправочникНоменклатура.ЦеноваяГруппа    КАК ЦеноваяГруппа,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры) ТОГДА Истина
		|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры) ТОГДА Истина
		|	ИНАЧЕ Ложь КОНЕЦ КАК ХарактеристикиИспользуются
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|ГДЕ
		|	СправочникНоменклатура.Ссылка = &Номенклатура
		|");
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|;
			|ВЫБРАТЬ
			|	ЦеныНоменклатуры.Характеристика  КАК Характеристика,
			|	ЦеныНоменклатуры.ВидЦены         КАК ВидЦены,
			|	ЦеныНоменклатуры.Упаковка        КАК Упаковка
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента,
			|													Номенклатура = &Номенклатура
			|													И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|													И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры
			|";
			
			Запрос.УстановитьПараметр("ВидыЦен",       ВыбранныеВидыЦен());
			Запрос.УстановитьПараметр("ДатаДокумента", ДатаДляЗапросаЦенНоменклатуры());
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		ВыборкаНоменклатура = МассивРезультатов[0].Выбрать();
		
		Если ВыборкаНоменклатура.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВыборкаНоменклатура);
		КонецЕсли;
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			ВыборкаУпаковки = МассивРезультатов[1].Выбрать();
			Пока ВыборкаУпаковки.Следующий() Цикл
				ТекущаяСтрока["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены)] = ВыборкаУпаковки.Упаковка;
			КонецЦикла;
		КонецЕсли;
		
		Если АвтоматическиДобавлятьХарактеристики И ИспользоватьХарактеристикиНоменклатуры Тогда
			ЗаполнитьХарактеристикиНоменклатуры(ТекущаяСтрока, Не РассчитатьЦены И ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре);
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		ТекущаяСтрока.ЦеноваяГруппа    = Справочники.ЦеновыеГруппы.ПустаяСсылка();
		
	КонецЕсли;
	
	
	// Загрузка старых цен и процента изменения
	ТаблицаЗначений = ПустаяТаблицаТовары();
	Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
		
		Если СтрокаВидЦены.Выбрана ИЛИ СтрокаВидЦены.Влияет Тогда
			
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
			
			НоваяСтрока = ТаблицаЗначений.Добавить();
			НоваяСтрока.Номенклатура   = ТекущаяСтрока.Номенклатура;
			НоваяСтрока.Характеристика = ТекущаяСтрока.Характеристика;
			НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
			НоваяСтрока.Цена           = ТекущаяСтрока[ИмяКолонки];
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
			КонецЕсли;
			
			Для Каждого ПодчиненнаяСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
				
				НоваяСтрока = ТаблицаЗначений.Добавить();
				НоваяСтрока.Номенклатура   = ПодчиненнаяСтрока.Номенклатура;
				НоваяСтрока.Характеристика = ПодчиненнаяСтрока.Характеристика;
				НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
				НоваяСтрока.Цена           = ПодчиненнаяСтрока[ИмяКолонки];
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагрузитьСтарыеЦеныНоменклатуры(ТаблицаЗначений);
	
	Если РассчитатьЦены Тогда
		РассчитатьЦеныПоИдентификаторуСтроки(ИдентификаторСтроки, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенУпаковкаПриИзменении(Элемент)

	ДеревоЦенУпаковкаПриИзмененииКлиент(Элемент);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ДеревоЦенУпаковка".
//
&НаКлиенте
Процедура ДеревоЦенУпаковкаПриИзмененииКлиент(Элемент)
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущейКолонки = СтрЗаменить(Элемент.Имя, "ДеревоЦен", "");

	Если ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре Тогда
		
		ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
		
		Если ТекущаяСтрока.ПолучитьРодителя() = Неопределено Тогда
			
			ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
			ТекущееЗначение   = ТекущиеДанные[ИмяТекущейКолонки];
			
			Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				Если ЭлементХарактеристика[ИмяТекущейКолонки] <> ТекущееЗначение Тогда
					ЭлементХарактеристика[ИмяТекущейКолонки] = ТекущееЗначение;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДеревоЦенУпаковкаПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), ИмяТекущейКолонки);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЦенУпаковкаПриИзмененииНаСервере(ИдентификаторСтроки, ИмяТекущейКолонки)
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	// Загрузка старых цен и процента изменения
	ТаблицаЗначений = ПустаяТаблицаТовары();
	Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
		
		Если СтрокаВидЦены.Выбрана ИЛИ СтрокаВидЦены.Влияет Тогда
			
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
			
			НоваяСтрока = ТаблицаЗначений.Добавить();
			НоваяСтрока.Номенклатура   = ТекущаяСтрока.Номенклатура;
			НоваяСтрока.Характеристика = ТекущаяСтрока.Характеристика;
			НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
			НоваяСтрока.Цена           = ТекущаяСтрока[ИмяКолонки];
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
			КонецЕсли;
			
			Для Каждого ПодчиненнаяСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
				
				НоваяСтрока = ТаблицаЗначений.Добавить();
				НоваяСтрока.Номенклатура   = ПодчиненнаяСтрока.Номенклатура;
				НоваяСтрока.Характеристика = ПодчиненнаяСтрока.Характеристика;
				НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
				НоваяСтрока.Цена           = ПодчиненнаяСтрока[ИмяКолонки];
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагрузитьСтарыеЦеныНоменклатуры(ТаблицаЗначений);
	
	РассчитатьЦеныПоИдентификаторуСтроки(ИдентификаторСтроки,, ИмяТекущейКолонки);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ДеревоЦенХарактеристика".
//
&НаСервере
Процедура ДеревоЦенХарактеристикаПриИзмененииСервер(ИдентификаторСтроки, РассчитатьЦены = Истина)
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			ВидыЦен = ВыбранныеВидыЦен();
			ТаблицаУпаковок = ПоследниеУпаковкиЦен(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика, ВидыЦен);
			
			Для Каждого ТекСтрока Из ТаблицаУпаковок Цикл
				ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонкиПоВидуЦены(ТекСтрока.ВидЦены);
				Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
					ТекущаяСтрока[ИмяКолонкиУпаковка] = ТекСтрока.Упаковка;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	// Загрузка старых цен и процента изменения
	ТаблицаЗначений = ПустаяТаблицаТовары();
	Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
		
		Если СтрокаВидЦены.Выбрана ИЛИ СтрокаВидЦены.Влияет Тогда
			
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
			
			НоваяСтрока = ТаблицаЗначений.Добавить();
			НоваяСтрока.Номенклатура   = ТекущаяСтрока.Номенклатура;
			НоваяСтрока.Характеристика = ТекущаяСтрока.Характеристика;
			НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
			НоваяСтрока.Цена           = ТекущаяСтрока[ИмяКолонки];
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
			КонецЕсли;
			
			Для Каждого ПодчиненнаяСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
				
				НоваяСтрока = ТаблицаЗначений.Добавить();
				НоваяСтрока.Номенклатура   = ПодчиненнаяСтрока.Номенклатура;
				НоваяСтрока.Характеристика = ПодчиненнаяСтрока.Характеристика;
				НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
				НоваяСтрока.Цена           = ПодчиненнаяСтрока[ИмяКолонки];
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагрузитьСтарыеЦеныНоменклатуры(ТаблицаЗначений);
	
	Если РассчитатьЦены Тогда
		РассчитатьЦеныПоИдентификаторуСтроки(ИдентификаторСтроки, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенЦенаПриИзменении(Элемент)
	
	ИзмененаЦена = Истина;
	ДеревоЦенЦенаПриИзмененииКлиент(Элемент);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ДеревоЦенЦена".
//
&НаКлиенте
Процедура ДеревоЦенЦенаПриИзмененииКлиент(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущейКолонки  = СтрЗаменить(Элемент.Имя, "ДеревоЦен", "");
	Если Найти(ИмяТекущейКолонки, "ПроцентИзмененияВидЦены") Тогда
		ИмяТекущейКолонки = СтрЗаменить(ИмяТекущейКолонки, "ПроцентИзмененияВидЦены", "ВидЦены");
		ТекущиеДанные[ИмяТекущейКолонки] = Окр(ТекущиеДанные["СтараяЦена"+ИмяТекущейКолонки]*((ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки]/100)+1),15,2);
	КонецЕсли;
	
	ИмяКолонкиУпаковка = СтрЗаменить(СтрЗаменить(Элемент.Имя, "ПроцентИзмененияВидЦены", "ВидЦены"), "ДеревоЦенВидЦены", "УпаковкаВидЦены");
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
	
	ТекущиеДанные["ИзмененаВручную"+ИмяТекущейКолонки] = Истина;
	
	Если ТекущиеДанные["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
		ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(100*(ТекущиеДанные[ИмяТекущейКолонки] - ТекущиеДанные["СтараяЦена"+ИмяТекущейКолонки])/ТекущиеДанные["СтараяЦена"+ИмяТекущейКолонки],5,2);
	Иначе
		ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
	КонецЕсли;
	
	Если ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре Тогда
		
		МассивУпаковок = Новый Массив();
		СоответствиеУпаковок = Неопределено;
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			ТекущееЗначениеУпаковки = ТекущиеДанные[ИмяКолонкиУпаковка];
			Если ЗначениеЗаполнено(ТекущееЗначениеУпаковки) Тогда
				МассивУпаковок.Добавить(ТекущееЗначениеУпаковки);
			КонецЕсли;
			
			ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
			Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				
				ЗначениеКолонкиУпаковка = ЭлементХарактеристика[ИмяКолонкиУпаковка];
				Если ЗначениеЗаполнено(ЗначениеКолонкиУпаковка) И МассивУпаковок.Найти(ЗначениеКолонкиУпаковка) = Неопределено Тогда
					МассивУпаковок.Добавить(ЗначениеКолонкиУпаковка);
				КонецЕсли;
				
			КонецЦикла;
		
			Если МассивУпаковок.Количество() > 0 Тогда
				СоответствиеУпаковок = КоэффициентыУпаковокНоменклатуры(МассивУпаковок);
			КонецЕсли;
			
		КонецЕсли;
		
		// Определим коэффициент упаковки текущей цены
		КоэффициентУпаковкиЦеныИсточника = 1;
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			Если ЗначениеЗаполнено(ТекущееЗначениеУпаковки) И СоответствиеУпаковок <> Неопределено Тогда
				НайденноеЗначение = СоответствиеУпаковок.Получить(ТекущееЗначениеУпаковки);
				Если НайденноеЗначение <> Неопределено Тогда
					КоэффициентУпаковкиЦеныИсточника = НайденноеЗначение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТекущееЗначение = ТекущиеДанные[ИмяТекущейКолонки];
		ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				
				ЗначениеКолонкиУпаковка = ЭлементХарактеристика[ИмяКолонкиУпаковка];
				Если ТекущееЗначениеУпаковки = ЗначениеКолонкиУпаковка И
					
					ЭлементХарактеристика[ИмяТекущейКолонки] <> ТекущееЗначение Тогда
					ЭлементХарактеристика[ИмяТекущейКолонки] = ТекущееЗначение;
					ЭлементХарактеристика["ИзмененаВручную"+ИмяТекущейКолонки] = Истина;
					
					Если ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
						ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(100*(ЭлементХарактеристика[ИмяТекущейКолонки] - ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки])/ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки],5,2);
					Иначе
						ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
					КонецЕсли;
					
				Иначе
					
					// Определим коэффициент упаковки влияющей цены
					КоэффициентУпаковкиЦеныНазначения = 1;
					
					Если ЗначениеЗаполнено(ЗначениеКолонкиУпаковка) И СоответствиеУпаковок <> Неопределено Тогда
						НайденноеЗначение = СоответствиеУпаковок.Получить(ЗначениеКолонкиУпаковка);
						Если НайденноеЗначение <> Неопределено Тогда
							КоэффициентУпаковкиЦеныНазначения = НайденноеЗначение;
						КонецЕсли;
					КонецЕсли;
					
					Если КоэффициентУпаковкиЦеныИсточника = КоэффициентУпаковкиЦеныНазначения Тогда
						НоваяЦена = ТекущееЗначение;
					Иначе
						НоваяЦена = ТекущееЗначение / КоэффициентУпаковкиЦеныИсточника * КоэффициентУпаковкиЦеныНазначения;
					КонецЕсли;
					
					Если ЭлементХарактеристика[ИмяТекущейКолонки] <> НоваяЦена Тогда
						
						ЭлементХарактеристика[ИмяТекущейКолонки] = НоваяЦена;
						ЭлементХарактеристика["ИзмененаВручную"+ИмяТекущейКолонки] = Истина;
						
						Если ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
							ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(100*(ЭлементХарактеристика[ИмяТекущейКолонки] - ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки])/ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки],5,2);
						Иначе
							ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				НоваяЦена = ТекущееЗначение;
				
				Если ЭлементХарактеристика[ИмяТекущейКолонки] <> НоваяЦена Тогда
					
					ЭлементХарактеристика[ИмяТекущейКолонки] = НоваяЦена;
					ЭлементХарактеристика["ИзмененаВручную"+ИмяТекущейКолонки] = Истина;
					
					Если ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
						ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(100*(ЭлементХарактеристика[ИмяТекущейКолонки] - ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки])/ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки],5,2);
					Иначе
						ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РассчитатьЦеныПоИдентификаторуСтроки(ТекущиеДанные.ПолучитьИдентификатор(),, ИмяТекущейКолонки);
	
КонецПроцедуры

//Процедура - обработчик команды "ДобавитьНоменклатуру"
//
&НаСервере
Процедура ДобавитьНоменклатуруСервер(ИдентификаторСтроки)
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Если ТекущаяСтрока.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик <> Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать Тогда
			ТекущаяСтрока.ХарактеристикиИспользуются = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ДеревоЦенНоменклатураПриИзмененииСервер(ИдентификаторСтроки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИменаРазрешенныхПараметров()
	
	РазрешенныеИмена = Новый Массив;
	РазрешенныеИмена.Добавить("ДатаДокумента");
	РазрешенныеИмена.Добавить("ЭтоВводНаОсновании");
	РазрешенныеИмена.Добавить("ВидЦены");
	РазрешенныеИмена.Добавить("Основание");
	
	Возврат РазрешенныеИмена;
	
КонецФункции

&НаСервере
Функция НастройкиСхемыКомпоновкиДанныхПоУмолчанию(ВидЦены, АдресСхемыКомпоновкиДанных)
	
	НастройкиКомпоновкиДанных = ВидЦены.ХранилищеНастроекКомпоновкиДанных.Получить();
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	Если Не ЗначениеЗаполнено(НастройкиКомпоновкиДанных) Тогда
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		УстановитьПривилегированныйРежим(Истина);
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		УстановитьПривилегированныйРежим(Ложь);
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
		Возврат ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), УникальныйИдентификатор);
		
	Иначе
		Возврат ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеПараметров(ВидЦены, НастройкиКомпоновкиДанных, ПараметрыСхемКомпоновкиДанныхВидовЦен)
	
	РазрешенныеИмена = ИменаРазрешенныхПараметров();
	
	Для Каждого Элемент Из НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы Цикл
		НайденныеСтроки = ПараметрыСхемКомпоновкиДанныхВидовЦен.НайтиСтроки(Новый Структура("Имя, ВидЦены", Строка(Элемент.Параметр), ВидЦены));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.Значение = Элемент.Значение;
		КонецЦикла;
	КонецЦикла;
	
	ОписаниеПараметров = "";
	Для Каждого Параметр Из ПараметрыСхемКомпоновкиДанныхВидовЦен.НайтиСтроки(Новый Структура("ВидЦены", ВидЦены)) Цикл
		
		ЗначениеПараметра = Неопределено;
		Если Параметр.ДоступныеЗначения = Неопределено Тогда
			ЗначениеПараметра = Параметр.Значение;
		Иначе
			ДоступноеЗначение = Параметр.ДоступныеЗначения.НайтиПоЗначению(Параметр.Значение);
			Если ДоступноеЗначение <> Неопределено Тогда
				ЗначениеПараметра = ?(ЗначениеЗаполнено(ДоступноеЗначение.Представление), ДоступноеЗначение.Представление, Параметр.Значение);
			Иначе
				ЗначениеПараметра = Параметр.Значение;
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеПараметров = ?(ЗначениеЗаполнено(ОписаниеПараметров), ОписаниеПараметров, НСтр("ru = 'Параметры:'") + " ") + ?(Не ЗначениеЗаполнено(ОписаниеПараметров),"",", ") + Параметр.Заголовок + " = " + ?(ЗначениеЗаполнено(ЗначениеПараметра), Строка(ЗначениеПараметра),"<не заполнен>");
	КонецЦикла;
	
	ОписаниеПараметров = ОписаниеПараметров + ?(ЗначениеЗаполнено(Строка(НастройкиКомпоновкиДанных.Отбор))," " + НСтр("ru = 'Отбор:'") + " " + Строка(НастройкиКомпоновкиДанных.Отбор),"");
	
	Возврат Новый Структура("ОписаниеПараметров", ОписаниеПараметров);
	
КонецФункции

&НаКлиенте
Процедура ПроставитьФлагиВлияетЗависитНаКлиенте()
	
	Для Каждого Цена Из ВыбранныеЦены Цикл
		
		Цена.Зависит = Ложь;
		Цена.Влияет  = Ложь;
		
	КонецЦикла;
	
	Для Каждого Цена Из ВыбранныеЦены Цикл
		
		Если Цена.Выбрана Тогда 
			
			Для Каждого ЗависимаяЦена Из Цена.ЗависимыеЦены Цикл
				
				СтрокаЗависимойЦены         = НайтиСтрокуВидаЦенНаКлиенте(ВыбранныеЦены, ЗависимаяЦена.Значение);
				СтрокаЗависимойЦены.Зависит = Не СтрокаЗависимойЦены.Выбрана;
				
			КонецЦикла;
			
			Для Каждого ВлияющаяЦена Из Цена.ВлияющиеЦены Цикл
				
				СтрокаВыбраннойЦены        = НайтиСтрокуВидаЦенНаКлиенте(ВыбранныеЦены, ВлияющаяЦена.Значение);
				СтрокаВыбраннойЦены.Влияет = Не СтрокаВыбраннойЦены.Выбрана;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьНастройкиКомпоновкиДанныхДляВидаЦены(ВидЦены, АдресНастроекВоВременномХранилище, АдресХранилищаНастройкиКомпоновкиДанных, АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен)
	
	НастройкиКомпоновкиДанных        = ПолучитьИзВременногоХранилища(АдресНастроекВоВременномХранилище);
	ТаблицаНастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновкиДанных);
	
	НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Найти(ВидЦены, "ВидЦены");
	Если НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Добавить();
		НайденнаяСтрока.ВидЦены = ВидЦены;
	КонецЕсли;
	НайденнаяСтрока.НастройкиКомпоновкиДанных = НастройкиКомпоновкиДанных;
	
	ПоместитьВоВременноеХранилище(ТаблицаНастройкиКомпоновкиДанных, АдресХранилищаНастройкиКомпоновкиДанных);
	
	ПараметрыСхемКомпоновкиДанныхВидовЦен = ПолучитьИзВременногоХранилища(АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен);
	Возврат ОписаниеПараметров(ВидЦены, НастройкиКомпоновкиДанных, ПараметрыСхемКомпоновкиДанныхВидовЦен);
	
КонецФункции

&НаСервере
Процедура УстановитьПризнакРучногоИзмененияВычисляемыхЦен(ТаблицаНоменклатуры, ИзмененноеПоле = Неопределено)
	
	СтрокаИзмененныйВидЦены = СтрокаВидаЦеныПоИмениПоля(ВыбранныеЦены, ИзмененноеПоле);
	Если СтрокаИзмененныйВидЦены <> Неопределено Тогда
	
		МассивСтрокЗависимыхВидовЦен = ЗависимыеОтВидаЦеныВидыЦен(СтрокаИзмененныйВидЦены);
		УстановитьПризнакРучногоИзмененияДляВидовЦен(ТаблицаНоменклатуры, МассивСтрокЗависимыхВидовЦен);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакРучногоИзмененияДляВидовЦен(ТаблицаНоменклатуры, МассивСтрокЗависимыхВидовЦен)
	
	Для Каждого ПозицияНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		СтрокаТаблицыЦен = НайтиСтрокуДереваЦен(ПозицияНоменклатуры);
		
		Для Каждого СтрокаВидЦены Из МассивСтрокЗависимыхВидовЦен Цикл
			
			Если СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоДругимВидамЦен Тогда
				СтрокаТаблицыЦен["ИзмененаВручную" + СтрокаВидЦены.ИмяКолонки] = Истина;;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Функция ВыбранныеВидыЦен()
	
	ВидыЦен = Новый Массив();
	
	Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
		Если ТекСтрока.Выбрана Тогда
			ВидыЦен.Добавить(ТекСтрока.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыЦен;
	
КонецФункции

&НаСервере
Функция ВыбранныеСтрокиТаблицыВидовЦен()
	
	ВидыЦен = Новый Массив();
	
	Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
		Если ТекСтрока.Выбрана Тогда
			ВидыЦен.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыЦен;
	
КонецФункции

// Заполняет значения цен, рассчитываемым по данным информационной базы
//
// Параметры:
//  ТаблицаНоменклатуры - ТаблицаЗначений
//  ВидЦены - СправочникСсылка.ВидыЦен
//  ТолькоНезаполненные - Указывает на необходимость вычисления только незаполненных цен
//
&НаСервере
Процедура ВычислитьЗначенияЦеныПоДаннымИБ(ТаблицаНоменклатуры, СтрокаВидЦены, ТолькоНезаполненные = Ложь, НастройкиКомпоновкиДанных = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТаблицаНоменклатуры.Количество() > 0 Тогда
		
		Если СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
			ИЛИ СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении Тогда
			
			// Копирование схемы компоновки данных
			Схема = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаВидЦены.АдресСхемыКомпоновкиДанных));
			СхемаКомпоновкиДанных = Схема.Получить();
			
			Если Ценообразование.ПроверитьСхемуКомпоновкиДанных(СхемаКомпоновкиДанных, СтрЗаменить(НСтр("ru='Вид цены ""%ВидЦены%""'"), "%ВидЦены%", СтрокаВидЦены.Ссылка)) Тогда
				
				// Заполнение набора данных ТаблицаНоменклатуры
				РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
				
				НаборДанныхНоменклатура                = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
				НаборДанныхНоменклатура.Имя            = "ТаблицаНоменклатуры";
				НаборДанныхНоменклатура.ИмяОбъекта     = "ТаблицаНоменклатуры";
				НаборДанныхНоменклатура.ИсточникДанных = РабочийНаборДанных.ИсточникДанных;
				
				ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "Номенклатура", "СправочникСсылка.Номенклатура");
				Если ИспользоватьХарактеристикиНоменклатуры Тогда
					ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "Характеристика", "СправочникСсылка.ХарактеристикиНоменклатуры");
				КонецЕсли;
				
				СхемаКомпоновкиДанных.СвязиНаборовДанных.Очистить();
				ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "Номенклатура");
				
				Если ИспользоватьХарактеристикиНоменклатуры Тогда
					ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "Характеристика");
				КонецЕсли;
				
				
				// Подготовка компоновщика макета компоновки данных, загрузка настроек
				КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
				КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
				
				Если НастройкиКомпоновкиДанных <> Неопределено Тогда
					КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
					КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
				Иначе
					КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
				КонецЕсли;
				
				
				// Заполнение структуры отчета и выбранных полей.
				КомпоновщикНастроек.Настройки.Структура.Очистить();
				
				ГруппировкаДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
				ГруппировкаДетальныеЗаписи.Использование = Истина;
				
				КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Номенклатура");
				
				Если ИспользоватьХарактеристикиНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Характеристика");
				КонецЕсли;
				
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Упаковка");
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Коэффициент");
				КонецЕсли;
				
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Цена");
				
				
				// Компоновка макета и исполнение запроса.
				КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
				
				
				Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("Основание");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = Объект.ДокументОснование;
				КонецЕсли;
				Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ДатаДокумента");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = ДатаДляЗапросаЦенНоменклатуры();
				КонецЕсли;
				Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ВидЦены");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = СтрокаВидЦены.Ссылка;
				КонецЕсли;
				Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ЭтоВводНаОсновании");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = ЗначениеЗаполнено(Объект.ДокументОснование);
				КонецЕсли;
				
				ВнешниеНаборыДанных = Новый Структура;
				ВнешниеНаборыДанных.Вставить("ТаблицаНоменклатуры", ТаблицаНоменклатуры.Скопировать(, "Номенклатура, Характеристика"));
				
				ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
				ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

				ДанныеОтчета = Новый ТаблицаЗначений();
				ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
				ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
				
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					СоответствиеУпаковок = КоэффициентыУпаковокНоменклатурыДереваТоваров(ТаблицаНоменклатуры);
				Иначе
					СоответствиеУпаковок = Неопределено;
				КонецЕсли;

				ЗагрузитьЦеныИзТаблицыЗначений(ДанныеОтчета, СоответствиеУпаковок, СтрокаВидЦены, ТолькоНезаполненные, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вычисляет цены, рассчитываемые по данным информационной базы
//
// Параметры:
//  ТаблицаНоменклатуры - ТаблицаЗначений - Таблица, в которой необходимо заполнить цены
//  ВидЦены - Массив - виды цен, для которых необходимо вычислить цены
//  ТолькоНезаполненные - Булево - указывает на необходимость вычисления только незаполненных цен
//
&НаСервере
Процедура ВычислитьЦеныПоДаннымИБ(ТаблицаНоменклатуры, МассивСтрокВидовЦен = Неопределено, ТолькоНезаполненные = Ложь)
	
	Если МассивСтрокВидовЦен = Неопределено Тогда
		
		ВидыЦенПоДаннымИБ = Новый Массив();
		Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
			Если СтрокаВидЦены.Выбрана И СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
				ИЛИ СтрокаВидЦены.Выбрана И СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении Тогда
				ВидыЦенПоДаннымИБ.Добавить(СтрокаВидЦены);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ВидыЦенПоДаннымИБ = Новый Массив();
		Для Каждого СтрокаВидЦены Из МассивСтрокВидовЦен Цикл
			
			НайденнаяСтрока = Неопределено;
			Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
				НайденнаяСтрока = ТекСтрока;
				Если ТекСтрока.Ссылка = СтрокаВидЦены.Ссылка Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НайденнаяСтрока <> Неопределено Тогда
				Если НайденнаяСтрока.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
					ИЛИ НайденнаяСтрока.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении Тогда
					ВидыЦенПоДаннымИБ.Добавить(СтрокаВидЦены);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ТолькоНезаполненные Тогда
		ОчиститьЦены(ТаблицаНоменклатуры, ВидыЦенПоДаннымИБ);
	КонецЕсли;
	
	ТаблицаНастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновкиДанных);
	
	Для Каждого ВидЦеныПоДаннымИБ Из ВидыЦенПоДаннымИБ Цикл
		НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Найти(ВидЦеныПоДаннымИБ.Ссылка);
		ВычислитьЗначенияЦеныПоДаннымИБ(ТаблицаНоменклатуры, ВидЦеныПоДаннымИБ, ТолькоНезаполненные, ?(НайденнаяСтрока <> Неопределено,НайденнаяСтрока.НастройкиКомпоновкиДанных,Неопределено));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДатаДляЗапросаЦенНоменклатуры()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДатаДляЗапроса = ДатаДокументаСервер(Объект.Дата) - 1;
	Иначе
		ДатаСеанса = ТекущаяДатаСеанса();
		Если НачалоДня(Объект.Дата) = НачалоДня(ДатаСеанса) Тогда
			ДатаДляЗапроса = ДатаСеанса;
		Иначе
			ДатаДляЗапроса = КонецДня(Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДатаДляЗапроса;
	
КонецФункции

&НаКлиенте
Функция ДатаДокумента(Дата)
	
	Возврат ?(ЗначениеЗаполнено(Дата), Дата, ОбщегоНазначенияКлиент.ДатаСеанса());
	
КонецФункции

&НаСервереБезКонтекста
Функция ДатаДокументаСервер(Дата)
	
	Возврат ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	
КонецФункции

// Добавляет товары из ценовой группы в таблицу цен
//
// Параметры:
//  ЦеновыеГруппы - Массив
//
&НаСервере
Процедура ДобавитьНоменклатуруЦеновойГруппы(ЦеновыеГруппы)
	
	ВидыЦен = ВыбранныеВидыЦен();
	
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникНоменклатура.Ссылка КАК Номенклатура,
		|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
		|			ТОГДА ИСТИНА
		|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (ХарактеристикиНоменклатуры.Владелец = СправочникНоменклатура.Ссылка
		|				ИЛИ ХарактеристикиНоменклатуры.Владелец = СправочникНоменклатура.ВидНоменклатуры)
		|ГДЕ
		|	СправочникНоменклатура.ЦеноваяГруппа В(&ЦеновыеГруппы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СправочникНоменклатура.ЦеноваяГруппа
		|ИТОГИ ПО
		|	Номенклатура");
			
	Иначе
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СправочникНоменклатура.Ссылка           КАК Номенклатура,
			|	СправочникНоменклатура.ЦеноваяГруппа 	КАК ЦеноваяГруппа,
			|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ВЫБОР
			|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры) 
			|		ТОГДА ИСТИНА
			|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры) 
			|		ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ХарактеристикиИспользуются
			|ИЗ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|ГДЕ
			|	СправочникНоменклатура.ЦеноваяГруппа В (&ЦеновыеГруппы)
			|УПОРЯДОЧИТЬ ПО
			|	СправочникНоменклатура.ЦеноваяГруппа
			|ИТОГИ ПО
			|	Номенклатура
			|");
		
	КонецЕсли;
		
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатуры.Номенклатура   КАК Номенклатура,
		|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
		|	ЦеныНоменклатуры.Упаковка       КАК Упаковка,
		|	ЦеныНоменклатуры.ВидЦены        КАК ВидЦены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура.ЦеноваяГруппа В (&ЦеновыеГруппы) И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры
		|";
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ЦеновыеГруппы", ЦеновыеГруппы);
	Запрос.УстановитьПараметр("ВидыЦен",       ВидыЦен);
	Запрос.УстановитьПараметр("Дата",          ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаНоменклатура = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		ВыборкаУпаковки = РезультатЗапроса[1].Выбрать();
	КонецЕсли;
	
	ДеревоЦенЗначение = РеквизитФормыВЗначение("ДеревоЦен", Тип("ДеревоЗначений"));
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура("Номенклатура", ВыборкаНоменклатура.Номенклатура);
		НайденныеСтроки = ДеревоЦенЗначение.Строки.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЭлементНоменклатура = НайденныеСтроки[0];
		Иначе
			ЭлементНоменклатура = ДеревоЦенЗначение.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементНоменклатура, ВыборкаНоменклатура);
			ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементНоменклатура);
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				
				ПараметрыПоиска = Новый Структура("Номенклатура", ЭлементНоменклатура.Номенклатура);
				
				Пока ВыборкаУпаковки.НайтиСледующий(ПараметрыПоиска) Цикл
					ЭлементНоменклатура[ПолучитьИмяКолонкиУпаковки(ВыборкаУпаковки.ВидЦены)] = ВыборкаУпаковки.Упаковка;
				КонецЦикла;
				
				ВыборкаУпаковки.Сбросить();
				
			КонецЕсли;
				
		КонецЕсли;
		
		Если ИспользоватьХарактеристикиНоменклатуры Тогда
			
			ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаХарактеристики.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
					
					ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", ВыборкаХарактеристики.Номенклатура, ВыборкаХарактеристики.Характеристика);
					НайденныеСтроки = ЭлементНоменклатура.Строки.НайтиСтроки(ПараметрыОтбора);
					
					Если НайденныеСтроки.Количество() > 0 Тогда
						ЭлементХарактеристика = НайденныеСтроки[0];
					Иначе
						ЭлементХарактеристика = ЭлементНоменклатура.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
						ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
						
						Если ИспользоватьУпаковкиНоменклатуры Тогда
							
							ПараметрыПоиска = Новый Структура("Номенклатура,Характеристика", ЭлементХарактеристика.Номенклатура, ЭлементХарактеристика.Характеристика);
							
							Пока ВыборкаУпаковки.НайтиСледующий(ПараметрыПоиска) Цикл
								ЭлементХарактеристика[ПолучитьИмяКолонкиУпаковки(ВыборкаУпаковки.ВидЦены)] = ВыборкаУпаковки.Упаковка;
							КонецЦикла;
							
							ВыборкаУпаковки.Сбросить();
							
						КонецЕсли;
							
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

	ЗначениеВРеквизитФормы(ДеревоЦенЗначение, "ДеревоЦен");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТоварыПоОтборуНаСервере(АдресВоВременномХранилище)
	
	ВидыЦен = ВыбранныеВидыЦен();
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	&Таблица КАК Таблица
	|";
	
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникНоменклатура.Ссылка           КАК Номенклатура,
		|	СправочникНоменклатура.ЦеноваяГруппа 	КАК ЦеноваяГруппа,
		|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры) 
		|       ТОГДА ИСТИНА
		|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры) 
		|       ТОГДА ИСТИНА
		|   	ИНАЧЕ ЛОЖЬ 
		|	КОНЕЦ КАК ХарактеристикиИспользуются, 
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|	ПО (ХарактеристикиНоменклатуры.Владелец = СправочникНоменклатура.Ссылка
		|		ИЛИ ХарактеристикиНоменклатуры.Владелец = СправочникНоменклатура.ВидНоменклатуры)
		|ГДЕ
		|	(СправочникНоменклатура.Ссылка, ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))) В (ВЫБРАТЬ Т.Номенклатура, Т.Характеристика ИЗ ТаблицаНоменклатура КАК Т)
		|УПОРЯДОЧИТЬ ПО
		|	СправочникНоменклатура.Наименование
		|ИТОГИ ПО
		|	Номенклатура
		|";
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникНоменклатура.Ссылка           КАК Номенклатура,
		|	СправочникНоменклатура.ЦеноваяГруппа 	КАК ЦеноваяГруппа,
		|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры) 
		|       ТОГДА ИСТИНА
		|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры) 
		|       ТОГДА ИСТИНА
		|   	ИНАЧЕ ЛОЖЬ 
		|	КОНЕЦ КАК ХарактеристикиИспользуются 
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|ГДЕ
		|	СправочникНоменклатура.Ссылка В (ВЫБРАТЬ Т.Номенклатура ИЗ ТаблицаНоменклатура КАК Т)
		|УПОРЯДОЧИТЬ ПО
		|	СправочникНоменклатура.ЦеноваяГруппа
		|ИТОГИ ПО
		|	Номенклатура
		|";
		
	КонецЕсли;
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатуры.Номенклатура   КАК Номенклатура,
		|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
		|	ЦеныНоменклатуры.Упаковка       КАК Упаковка,
		|	ЦеныНоменклатуры.ВидЦены        КАК ВидЦены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, (Номенклатура, Характеристика) В (ВЫБРАТЬ Т.Номенклатура, Т.Характеристика ИЗ ТаблицаНоменклатура КАК Т) И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры
		|";
	КонецЕсли;

	Запрос.УстановитьПараметр("Таблица", ТаблицаТовары);
	Запрос.УстановитьПараметр("ВидыЦен", ВидыЦен);
	Запрос.УстановитьПараметр("Дата",    ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаНоменклатура = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		ВыборкаУпаковки = РезультатЗапроса[2].Выбрать();
	КонецЕсли;
	
	ДеревоЦенЗначение = РеквизитФормыВЗначение("ДеревоЦен", Тип("ДеревоЗначений"));
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура("Номенклатура", ВыборкаНоменклатура.Номенклатура);
		НайденныеСтроки = ДеревоЦенЗначение.Строки.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЭлементНоменклатура = НайденныеСтроки[0];
		Иначе
			ЭлементНоменклатура = ДеревоЦенЗначение.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементНоменклатура, ВыборкаНоменклатура);
			ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементНоменклатура);
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				
				ПараметрыПоиска = Новый Структура("Номенклатура", ЭлементНоменклатура.Номенклатура);
				
				Пока ВыборкаУпаковки.НайтиСледующий(ПараметрыПоиска) Цикл
					ЭлементНоменклатура[ПолучитьИмяКолонкиУпаковки(ВыборкаУпаковки.ВидЦены)] = ВыборкаУпаковки.Упаковка;
				КонецЦикла;
				
				ВыборкаУпаковки.Сбросить();
				
			КонецЕсли;
				
		КонецЕсли;
		
		Если ИспользоватьХарактеристикиНоменклатуры Тогда
			
			ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаХарактеристики.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
					
					ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", ВыборкаХарактеристики.Номенклатура, ВыборкаХарактеристики.Характеристика);
					НайденныеСтроки = ЭлементНоменклатура.Строки.НайтиСтроки(ПараметрыОтбора);
 
					Если НайденныеСтроки.Количество() > 0 Тогда
						ЭлементХарактеристика = НайденныеСтроки[0];
					Иначе
						ЭлементХарактеристика = ЭлементНоменклатура.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
						ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
						
						Если ИспользоватьУпаковкиНоменклатуры Тогда
							
							ПараметрыПоиска = Новый Структура("Номенклатура,Характеристика", ЭлементХарактеристика.Номенклатура, ЭлементХарактеристика.Характеристика);
							
							Пока ВыборкаУпаковки.НайтиСледующий(ПараметрыПоиска) Цикл
								ЭлементХарактеристика[ПолучитьИмяКолонкиУпаковки(ВыборкаУпаковки.ВидЦены)] = ВыборкаУпаковки.Упаковка;
							КонецЦикла;
							
							ВыборкаУпаковки.Сбросить();
							
						КонецЕсли;
							
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЦенЗначение, "ДеревоЦен");
	 	
КонецПроцедуры

// Добавляет упаковки элемента дерева в массив упаковок
//
// Параметры:
// ЭлементДерева       - ДанныеФормыКоллекцияЭлементовДерева - элемент дерева значений
// ТаблицаНоменклатуры - ТаблицаЗначений - необходима для определения необходимости добавления упаковок
// МассивВидовЦен      - Массив - массив видов цен для поиска колонок в дереве значений
// МассивУпаковок      - Массив - массив, в который необходимо добавить упаковки
//
&НаСервереБезКонтекста
Процедура ДобавитьУпаковкиСтрокиТаблицыЦенВМассив(Знач ЭлементДерева, Знач ТаблицаНоменклатуры, Знач МассивВидовЦен, МассивУпаковок)
	
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика", ЭлементДерева.Номенклатура, ЭлементДерева.Характеристика);
	НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
			
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВидЦен Из МассивВидовЦен Цикл
		ИмяКолонки = ПолучитьИмяКолонкиУпаковки(ВидЦен);
		Если ЭлементДерева.Свойство(ИмяКолонки) Тогда
			Упаковка = ЭлементДерева[ИмяКолонки];
			Если ЗначениеЗаполнено(Упаковка) И МассивУпаковок.Найти(Упаковка) = Неопределено Тогда
				МассивУпаковок.Добавить(Упаковка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет загрузку базовых цен в таблицу цен
//
&НаСервере
Процедура ЗагрузитьБазовыеЦены()
	
	ТаблицаНоменклатуры = СоздатьПустуюТаблицуНоменклатуры();
	ЗаполнитьТаблицуНоменклатурыПоДеревуЦен(ТаблицаНоменклатуры);
	ЗагрузитьЗначенияБазовыхЦен(ТаблицаНоменклатуры, Неопределено);
	
КонецПроцедуры

// Загружает значения базовых цен в таблицу
//
// Параметры:
//  ТаблицаНоменклатуры - ТаблицаЗначений - Таблица, в которую будут загружены значения цен
//  ВидыЦен - Массив - виды цен, для которых необходимо загрузить значения цен
//  Дата - Дата загрузки цен
//  ПроцентИзмененияЦены - Число - Процент, на который необходимо изменить цену
//  ПрименятьОкругление - Булево - Указывает на необходимость применения округления
//
&НаСервере
Процедура ЗагрузитьЗначенияБазовыхЦен(ТаблицаНоменклатуры, МассивСтрокВидовЦен, ДатаДокумента = Неопределено, ПроцентИзмененияЦены = 0, ПрименятьОкругление = Ложь)
	
	Если МассивСтрокВидовЦен = Неопределено Тогда
		
		МассивСтрокВидовЦен = Новый Массив();
		Для Каждого ВидЦены Из ВыбранныеЦены Цикл
			Если ВидЦены.Влияет Тогда
				МассивСтрокВидовЦен.Добавить(ВидЦены);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОчиститьЦены(ТаблицаНоменклатуры, МассивСтрокВидовЦен);
	
	Если МассивСтрокВидовЦен.Количество() > 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ТаблицаНоменклатуры.Номенклатура   КАК Номенклатура,
			|	ТаблицаНоменклатуры.Характеристика КАК Характеристика
			|ПОМЕСТИТЬ ТаблицаНоменклатуры
			|ИЗ
			|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
			|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика
			|;
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура   КАК Номенклатура,
			|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
			|	ЦеныНоменклатурыСрезПоследних.Упаковка                          КАК Упаковка,
			|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент, 1) КАК Коэффициент,
			|	ЦеныНоменклатурыСрезПоследних.ВидЦены                                                                    КАК ВидЦены,
			|	ЦеныНоменклатурыСрезПоследних.Цена + ЦеныНоменклатурыСрезПоследних.Цена * &ПроцентИзмененияЦены / 100.00 КАК Цена
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|			&ДатаДокумента,
			|			(Номенклатура, Характеристика) В
			|					(ВЫБРАТЬ
			|						ТаблицаНоменклатуры.Номенклатура   КАК Номенклатура,
			|						ТаблицаНоменклатуры.Характеристика КАК Характеристика
			|					ИЗ
			|						ТаблицаНоменклатуры КАК ТаблицаНоменклатуры)
			|				И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатурыСрезПоследних");
		
		Запрос.УстановитьПараметр("ТаблицаНоменклатуры",  ТаблицаНоменклатуры);
		
		ВидыЦен = Новый Массив;
		Для Каждого СтрокаВидЦены Из МассивСтрокВидовЦен Цикл
			ВидыЦен.Добавить(СтрокаВидЦены.Ссылка);
		КонецЦикла;
		Запрос.УстановитьПараметр("ВидыЦен",              ВидыЦен);
		Запрос.УстановитьПараметр("ПроцентИзмененияЦены", ПроцентИзмененияЦены);
		Запрос.УстановитьПараметр("ДатаДокумента",        ?(ДатаДокумента = Неопределено, ДатаДляЗапросаЦенНоменклатуры(), ДатаДокумента));
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			СоответствиеУпаковок = КоэффициентыУпаковокНоменклатурыДереваТоваров(ТаблицаНоменклатуры);
		Иначе
			СоответствиеУпаковок = Неопределено;
		КонецЕсли;
		
		ЗагрузитьЦеныИзТаблицыЗначений(Выгрузка, СоответствиеУпаковок, Неопределено, Ложь, ПрименятьОкругление);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьСправочникВидовЦен(НастройкиКомпоновкиДанных)
	
	ЗапросРазрешенныеВидыЦен = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Магазины.ПравилоЦенообразования.ВидЦен КАК ВидЦен
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	НЕ Магазины.Блокирован
	|	И Магазины.ВведенВЭксплуатацию
	|	И НЕ Магазины.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЦеновыеГруппы.ВидЦен
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ЦеновыеГруппы
	|		ПО Магазины.ПравилоЦенообразования = ЦеновыеГруппы.Ссылка
	|ГДЕ
	|	НЕ Магазины.Блокирован
	|	И Магазины.ВведенВЭксплуатацию
	|	И НЕ Магазины.ПометкаУдаления"
	);
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыЦен.Ссылка                       КАК Ссылка,
	|	ВидыЦен.Наименование                 КАК Наименование,
	|	ВидыЦен.ПометкаУдаления              КАК ПометкаУдаления,
	|	ВидыЦен.РеквизитДопУпорядочивания    КАК РеквизитДопУпорядочивания,
	|	ВидыЦен.СпособЗаданияЦены            КАК СпособЗаданияЦены,
	|	ВидыЦен.Идентификатор                КАК Идентификатор,
	|	ВидыЦен.ПорогСрабатывания            КАК ПорогСрабатывания,
	|	ВидыЦен.АлгоритмРасчетаЦены          КАК АлгоритмРасчетаЦены,
	|	ВидыЦен.СхемаКомпоновкиДанных        КАК СхемаКомпоновкиДанных,
	|	
	|	ВЫБОР КОГДА ВидыЦен.Ссылка НЕ В (&РазрешенныеВидыЦен) ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ КАК ЗапрещенныйВидЦены,
	|	
	|	ВидыЦен.ЦеновыеГруппы.(
	|		ЦеноваяГруппа                 КАК ЦеноваяГруппа,
	|		АлгоритмРасчетаЦены           КАК АлгоритмРасчетаЦены
	|	),
	|	
	|	ВидыЦен.ПорогиСрабатывания.(
	|		ЦеноваяГруппа                 КАК ЦеноваяГруппа,
	|		ПорогСрабатывания             КАК ПорогСрабатывания
	|	),
	|	
	|	ВидыЦен.ВлияющиеВидыЦен.(
	|		ВлияющийВидЦен                КАК ВлияющийВидЦен
	|	),
	|	
	|	ВидыЦен.ПравилаОкругленияЦены.(
	|		НижняяГраницаДиапазонаЦен     КАК НижняяГраницаДиапазонаЦен,
	|		ТочностьОкругления            КАК ТочностьОкругления,
	|		ПсихологическоеОкругление     КАК ПсихологическоеОкругление
	|	),
	|	
	|	ВидыЦен.ОкруглятьВБольшуюСторону  КАК ОкруглятьВБольшуюСторону
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|УПОРЯДОЧИТЬ ПО
	|	ВидыЦен.РеквизитДопУпорядочивания"
	);
	Запрос.Параметры.Вставить("РазрешенныеВидыЦен", ЗапросРазрешенныеВидыЦен.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидЦен"));
		
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаВидовЦен = Запрос.Выполнить().Выгрузить();
	
	ТаблицаВидовЦен.Колонки.Добавить("Уровень",       Новый ОписаниеТипов("Число"));
	ТаблицаВидовЦен.Колонки.Добавить("ВлияющиеЦены",  Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаВидовЦен.Колонки.Добавить("ЗависимыеЦены", Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаВидовЦен.Колонки.Добавить("ИмяКолонки",    Новый ОписаниеТипов("Строка"));
	
	// Служебные колонки для работы с настройками СКД
	ТаблицаВидовЦен.Колонки.Добавить("АдресСхемыКомпоновкиДанных",   Новый ОписаниеТипов("Строка"));
	ТаблицаВидовЦен.Колонки.Добавить("НайденыОбязательныеПараметры", Новый ОписаниеТипов("Булево"));
	ТаблицаВидовЦен.Колонки.Добавить("Параметры",                    Новый ОписаниеТипов("Строка"));
	// Индексирование
	ТаблицаВидовЦен.Индексы.Добавить("Ссылка");
	
	ПараметрыСхемКомпоновкиДанныхВидовЦен = Новый ТаблицаЗначений;
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("ВидЦены");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("Имя");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("Заголовок");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("Значение");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("ДоступныеЗначения");
	
	МассивУдаляемыхВидовЦен = Новый Массив();
	
	Для Каждого СтрокаВидаЦен Из ТаблицаВидовЦен Цикл
		
		НайтиЗависящиеИВлияющиеЦены(ТаблицаВидовЦен, СтрокаВидаЦен.Ссылка);
		
		СтрокаВидаЦен.ИмяКолонки = ИмяКолонкиПоВидуЦены(СтрокаВидаЦен.Ссылка);
		
		Если СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
			ИЛИ СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении Тогда
			
			СхемаИНастройки = Справочники.ВидыЦен.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(СтрокаВидаЦен.Ссылка, СтрокаВидаЦен.СхемаКомпоновкиДанных);
			
			СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
			
			СтрокаВидаЦен.АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
			
			РазрешенныеИмена = ИменаРазрешенныхПараметров();
			Для Каждого ПараметрДанных Из СхемаКомпоновкиДанных.Параметры Цикл
				
				Если РазрешенныеИмена.Найти(ПараметрДанных.Имя) = Неопределено Тогда
					Если Найти(СхемаКомпоновкиДанных.НаборыДанных[0].Запрос,"&"+ПараметрДанных.Имя) Тогда
						СтрокаВидаЦен.НайденыОбязательныеПараметры = Истина;
					КонецЕсли;
				Иначе
					ПараметрДанных.ОграничениеИспользования = Истина;
					ПараметрДанных.ВключатьВДоступныеПоля   = Ложь;
				КонецЕсли;
				
				НайденныеСтроки = ПараметрыСхемКомпоновкиДанныхВидовЦен.НайтиСтроки(Новый Структура("Имя, ВидЦены",ПараметрДанных.Имя, СтрокаВидаЦен.Ссылка));
				Если НайденныеСтроки.Количество() = 0
					И РазрешенныеИмена.Найти(ПараметрДанных.Имя) = Неопределено
					И Не ПараметрДанных.ОграничениеИспользования ТОгда
					
					НовыйПараметр = ПараметрыСхемКомпоновкиДанныхВидовЦен.Добавить();
					НовыйПараметр.ВидЦены           = СтрокаВидаЦен.Ссылка;
					НовыйПараметр.Имя               = ПараметрДанных.Имя;
					НовыйПараметр.Заголовок         = ПараметрДанных.Заголовок;
					НовыйПараметр.Значение          = ПараметрДанных.Значение;
					НовыйПараметр.ДоступныеЗначения = ПараметрДанных.ПолучитьДоступныеЗначения();
					
				КонецЕсли;
				
			КонецЦикла;
			
			ПользовательскаяНастройка = НастройкиКомпоновкиДанных.Найти(СтрокаВидаЦен.Ссылка, "ВидЦены");
			Если ПользовательскаяНастройка = Неопределено
				И СтрокаВидаЦен.НайденыОбязательныеПараметры Тогда
				
				ПользовательскаяНастройка = НастройкиКомпоновкиДанных.Добавить();
				ПользовательскаяНастройка.ВидЦены                   = СтрокаВидаЦен.Ссылка;
				
				Если Не ЗначениеЗаполнено(СхемаИНастройки.НастройкиКомпоновкиДанных) Тогда
					КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
					УстановитьПривилегированныйРежим(Истина);
					КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
					УстановитьПривилегированныйРежим(Ложь);
					КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
					
					ПользовательскаяНастройка.НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
				Иначе
					ПользовательскаяНастройка.НастройкиКомпоновкиДанных = СхемаИНастройки.НастройкиКомпоновкиДанных;
				КонецЕсли;
				
				СтруктураДанных = ОписаниеПараметров(СтрокаВидаЦен.Ссылка, ПользовательскаяНастройка.НастройкиКомпоновкиДанных, ПараметрыСхемКомпоновкиДанныхВидовЦен);
				
			ИначеЕсли ПользовательскаяНастройка = Неопределено
				И Не СтрокаВидаЦен.НайденыОбязательныеПараметры Тогда
				
				СтруктураДанных = ОписаниеПараметров(СтрокаВидаЦен.Ссылка, СхемаКомпоновкиДанных.НастройкиПоУмолчанию, ПараметрыСхемКомпоновкиДанныхВидовЦен);
				
			Иначе
				
				СтруктураДанных = ОписаниеПараметров(СтрокаВидаЦен.Ссылка, ПользовательскаяНастройка.НастройкиКомпоновкиДанных, ПараметрыСхемКомпоновкиДанныхВидовЦен);
				
			КонецЕсли;
			
			СтрокаВидаЦен.Параметры = СтруктураДанных.ОписаниеПараметров;
			
		КонецЕсли;
		
	КонецЦикла;
	
	АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен = ПоместитьВоВременноеХранилище(ПараметрыСхемКомпоновкиДанныхВидовЦен, УникальныйИдентификатор);
	
	Для Каждого СтрокаВидаЦен Из ТаблицаВидовЦен Цикл
		НайтиЗависящиеИВлияющиеЦены(ТаблицаВидовЦен, СтрокаВидаЦен.Ссылка);
	КонецЦикла;
	
	АдресХранилищаСправочникаВидовЦен = ПоместитьВоВременноеХранилище(ТаблицаВидовЦен, УникальныйИдентификатор);
	
	Возврат ТаблицаВидовЦен;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьСтарыеЦеныНоменклатуры(ТаблицаНоменклатуры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Цена                           КАК Цена,
	|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка
	|ПОМЕСТИТЬ
	|	ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК ВременнаяТаблицаТовары
	|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика, ВидЦены
	|;
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Цена                           КАК Цена,
	|	
	|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
	|		ЦеныНоменклатуры.Цена
	|	ИНАЧЕ
	|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент,1)*ЕСТЬNULL(ВременнаяТаблицаТовары.Упаковка.Коэффициент,1)
	|	КОНЕЦ КАК ДействующаяЦена,
	|	
	|	ВЫРАЗИТЬ(ВЫБОР КОГДА ЦеныНоменклатуры.Цена <> 0 Тогда 100*(ВременнаяТаблицаТовары.Цена - ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
	|		ЦеныНоменклатуры.Цена
	|	ИНАЧЕ
	|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент,1)*ЕСТЬNULL(ВременнаяТаблицаТовары.Упаковка.Коэффициент,1)
	|	КОНЕЦ)/ 
	|	
	|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
	|		ЦеныНоменклатуры.Цена
	|	ИНАЧЕ
	|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент,1)*ЕСТЬNULL(ВременнаяТаблицаТовары.Упаковка.Коэффициент,1)
	|	КОНЕЦ ИНАЧЕ 0.00 КОНЕЦ КАК Число(10,2)) КАК Процент,
	|	
	|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента, (Номенклатура, Характеристика, ВидЦены) В (Выбрать Т.Номенклатура, Т.Характеристика, Т.ВидЦены Из ВременнаяТаблицаТовары КАК Т)) КАК ЦеныНоменклатуры
	|			ПО ЦеныНоменклатуры.Номенклатура   = ВременнаяТаблицаТовары.Номенклатура
	|			 И ЦеныНоменклатуры.Характеристика = ВременнаяТаблицаТовары.Характеристика
	|			 И ЦеныНоменклатуры.ВидЦены        = ВременнаяТаблицаТовары.ВидЦены
	|	
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика
	|");
	
	Запрос.УстановитьПараметр("Товары",        ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДляЗапросаЦенНоменклатуры());
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристики.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
				
				ЭлементХарактеристика = НайтиСтрокуДереваЦен(ВыборкаХарактеристики);
		
				ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВидыЦен.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
						Продолжить;
					КонецЕсли;
					
					ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены);
					
					ЭлементХарактеристика["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
					ЭлементХарактеристика["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
					
				КонецЦикла;
				
			Иначе
				
				ЭлементНоменклатура = НайтиСтрокуДереваЦен(ВыборкаХарактеристики);
				
				ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВидыЦен.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
						Продолжить;
					КонецЕсли;
					
					ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены);
					
					ЭлементНоменклатура["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
					ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьТаблицуНастройкиКомпоновкиДанных()
	
	ТаблицаНастройкиКомпоновкиДанных = Новый ТаблицаЗначений;
	ТаблицаНастройкиКомпоновкиДанных.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТаблицаНастройкиКомпоновкиДанных.Колонки.Добавить("НастройкиКомпоновкиДанных");
	ТаблицаНастройкиКомпоновкиДанных.Колонки.Добавить("ПараметрыКомпоновкиДанных");
	// Для существующего документа - загрузить настройки схем компоновки.
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УстановкаЦенНоменклатурыВидыЦен.ВидЦены                   КАК ВидЦены,
		|	УстановкаЦенНоменклатурыВидыЦен.НастройкиКомпоновкиДанных КАК НастройкиКомпоновкиДанных
		|ИЗ
		|	Документ.УстановкаЦенНоменклатуры.ВидыЦен КАК УстановкаЦенНоменклатурыВидыЦен
		|ГДЕ
		|	УстановкаЦенНоменклатурыВидыЦен.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НастройкиКомпоновкиДанных = Выборка.НастройкиКомпоновкиДанных.Получить();
			Если НастройкиКомпоновкиДанных <> Неопределено Тогда
				НоваяСтрока = ТаблицаНастройкиКомпоновкиДанных.Добавить();
				НоваяСтрока.ВидЦены                   = Выборка.ВидЦены;
				НоваяСтрока.НастройкиКомпоновкиДанных = НастройкиКомпоновкиДанных;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаНастройкиКомпоновкиДанных;
	
КонецФункции

// Осуществляет загрузку цен для всех строк табличной части товары
//
&НаСервере
Процедура ЗагрузитьТабличнуюЧастьТовары()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = СоздатьПустуюТаблицуНоменклатуры();
	ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Колонки.Добавить("СтрокаДереваЦен");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Индекс                         КАК Индекс,
	|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Цена                           КАК Цена,
	|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка,
	|	ВременнаяТаблицаТовары.ЦенаИзмененаВручную            КАК ЦенаИзмененаВручную
	|ПОМЕСТИТЬ
	|	ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК ВременнаяТаблицаТовары
	|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика, ВидЦены
	|;
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Индекс                         КАК Индекс,
	|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
	|	ВременнаяТаблицаТовары.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|	ВременнаяТаблицаТовары.Номенклатура.ЦеноваяГруппа     КАК ЦеноваяГруппа,
	|
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры) ТОГДА Истина
	|		КОГДА ВременнаяТаблицаТовары.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры) ТОГДА Истина
	|	ИНАЧЕ Ложь КОНЕЦ КАК ХарактеристикиИспользуются,
	|
	|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Цена                           КАК Цена,
	|	ВременнаяТаблицаТовары.ЦенаИзмененаВручную            КАК ЦенаИзмененаВручную,
	|	
	|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
	|		ЦеныНоменклатуры.Цена
	|	ИНАЧЕ
	|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент,1)*ЕСТЬNULL(ВременнаяТаблицаТовары.Упаковка.Коэффициент,1)
	|	КОНЕЦ КАК ДействующаяЦена,
	|	
	|	ВЫРАЗИТЬ(ВЫБОР КОГДА ЦеныНоменклатуры.Цена <> 0 Тогда 100*(ВременнаяТаблицаТовары.Цена - ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
	|		ЦеныНоменклатуры.Цена
	|	ИНАЧЕ
	|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент,1)*ЕСТЬNULL(ВременнаяТаблицаТовары.Упаковка.Коэффициент,1)
	|	КОНЕЦ)/ 
	|	
	|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
	|		ЦеныНоменклатуры.Цена
	|	ИНАЧЕ
	|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент,1)*ЕСТЬNULL(ВременнаяТаблицаТовары.Упаковка.Коэффициент,1)
	|	КОНЕЦ ИНАЧЕ 0.00 КОНЕЦ КАК Число(10,2)) КАК Процент,
	|	
	|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, (Номенклатура, Характеристика) В (Выбрать Номенклатура, Характеристика Из ВременнаяТаблицаТовары)) КАК ЦеныНоменклатуры
	|			ПО ЦеныНоменклатуры.Номенклатура   = ВременнаяТаблицаТовары.Номенклатура
	|			 И ЦеныНоменклатуры.Характеристика = ВременнаяТаблицаТовары.Характеристика
	|			 И ЦеныНоменклатуры.ВидЦены        = ВременнаяТаблицаТовары.ВидЦены
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Индекс
	|	
	|ИТОГИ
	|	МИНИМУМ(ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|ПО
	|	Номенклатура,
	|	Характеристика
	|");
	
	ТаблицаТоваров =  Объект.Товары.Выгрузить();
	ОбщегоНазначенияРТ.ПронумероватьТаблицуЗначений(ТаблицаТоваров, "Индекс");
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	Запрос.УстановитьПараметр("Дата",   ДатаДляЗапросаЦенНоменклатуры());
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЭлементыДереваЦен = ДеревоЦен.ПолучитьЭлементы();
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
	
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			ЭлементНоменклатура = ЭлементыДереваЦен.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементНоменклатура, ВыборкаНоменклатура);
			ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементНоменклатура);
			
			НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			НоваяСтрокаТЗ.Номенклатура = ВыборкаНоменклатура.Номенклатура;
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			
			ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристики.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
					
					ЭлементХарактеристика = ЭлементНоменклатура.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
					ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
					
					НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
					НоваяСтрокаТЗ.Номенклатура    = ВыборкаХарактеристики.Номенклатура;
					НоваяСтрокаТЗ.Характеристика  = ВыборкаХарактеристики.Характеристика;
					НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементХарактеристика;
					
					ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаВидыЦен.Следующий() Цикл
						
						Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
							Продолжить;
						КонецЕсли;
						
						ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены);
						
						ЭлементХарактеристика[                     ИмяКолонки] = ВыборкаВидыЦен.Цена;
						ЭлементХарактеристика["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
						ЭлементХарактеристика["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
						ЭлементХарактеристика["ИзмененаВручную"  + ИмяКолонки] = ВыборкаВидыЦен.ЦенаИзмененаВручную;
						ЭлементХарактеристика["Упаковка"         + ИмяКолонки] = ВыборкаВидыЦен.Упаковка;
						
					КонецЦикла;
					
				Иначе
					
					ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаВидыЦен.Следующий() Цикл
						
						Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
							Продолжить;
						КонецЕсли;
						
						ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены);
						
						ЭлементНоменклатура[                     ИмяКолонки] = ВыборкаВидыЦен.Цена;
						ЭлементНоменклатура["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
						ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
						ЭлементНоменклатура["ИзмененаВручную"  + ИмяКолонки] = ВыборкаВидыЦен.ЦенаИзмененаВручную;
						ЭлементНоменклатура["Упаковка"         + ИмяКолонки] = ВыборкаВидыЦен.Упаковка;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
	
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			ЭлементНоменклатура = ЭлементыДереваЦен.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементНоменклатура, ВыборкаНоменклатура);
			ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементНоменклатура);
			
			НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			НоваяСтрокаТЗ.Номенклатура = ВыборкаНоменклатура.Номенклатура;
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			
			ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристики.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
					
					ЭлементХарактеристика = ЭлементНоменклатура.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
					ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
					
					НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
					НоваяСтрокаТЗ.Номенклатура    = ВыборкаХарактеристики.Номенклатура;
					НоваяСтрокаТЗ.Характеристика  = ВыборкаХарактеристики.Характеристика;
					НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементХарактеристика;
					
					ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаВидыЦен.Следующий() Цикл
						
						Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
							Продолжить;
						КонецЕсли;
						
						ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены);
						
						ЭлементХарактеристика[                     ИмяКолонки] = ВыборкаВидыЦен.Цена;
						ЭлементХарактеристика["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
						ЭлементХарактеристика["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
						ЭлементХарактеристика["ИзмененаВручную"  + ИмяКолонки] = ВыборкаВидыЦен.ЦенаИзмененаВручную;
						
					КонецЦикла;
					
				Иначе
					
					ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаВидыЦен.Следующий() Цикл
						
						Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
							Продолжить;
						КонецЕсли;
						
						ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены);
						
						ЭлементНоменклатура[                     ИмяКолонки] = ВыборкаВидыЦен.Цена;
						ЭлементНоменклатура["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
						ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
						ЭлементНоменклатура["ИзмененаВручную"  + ИмяКолонки] = ВыборкаВидыЦен.ЦенаИзмененаВручную;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Индексы.Добавить("Номенклатура, Характеристика");
	
КонецПроцедуры

// Загружает цены в таблицу цен из переданной таблицы
//
// Параметры:
//  ДеревоЦенИсточник - ТаблицаЗначений - Таблица, из которой необходимо загрузить цены
//  СоответствиеУпаковок - Соответствие - содержит упаковки и их коэффициенты
//  ВидЦены - СправочникСсылка.ВидыЦен
//  ТолькоНезаполненные - Булево - указывает на необходимость вычисления только незаполненных цен
//  ПрименитьОкругление - Булево - указывает на необходимость применения округления к ценам
//
&НаСервере
Процедура ЗагрузитьЦеныИзТаблицыЗначений(Таблица, СоответствиеУпаковок, СтрокаЗагружаемыйВидЦены, ТолькоНезаполненные = Ложь, ПрименитьОкругление = Ложь, ЗагружатьУпаковку = Ложь)
	
	Для Каждого СтрокаИсточник Из Таблица Цикл
	
		СтрокаТаблицыЦен = НайтиСтрокуДереваЦен(СтрокаИсточник);
		
		Если СтрокаЗагружаемыйВидЦены = Неопределено Тогда
			СтрокаВидЦены = НайтиСтрокуВидаЦен(СтрокаИсточник.ВидЦены);
		Иначе
			СтрокаВидЦены = СтрокаЗагружаемыйВидЦены;
		КонецЕсли;
		
		ЦеновыеГруппыПорогов = СтрокаВидЦены.ПорогиСрабатывания.НайтиСтроки(Новый Структура("ЦеноваяГруппа", СтрокаТаблицыЦен.ЦеноваяГруппа));
		Если ЦеновыеГруппыПорогов.Количество() > 0 Тогда
			ПорогСрабатывания = ЦеновыеГруппыПорогов[0].ПорогСрабатывания;
		Иначе
			ПорогСрабатывания = СтрокаВидЦены.ПорогСрабатывания;
		КонецЕсли;
		
		ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
		
		Если (СтрокаТаблицыЦен[ИмяКолонки] = 0 Или Не ТолькоНезаполненные) И СтрокаИсточник.Цена <> Null Тогда
			
			Цена = СтрокаИсточник.Цена;
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				
				Если СоответствиеУпаковок <> Неопределено Тогда
					
					ТекущаяУпаковка = СтрокаТаблицыЦен["Упаковка" + ИмяКолонки];
					ТекущийКоэффициент = 1;
					
					Если ЗначениеЗаполнено(СтрокаИсточник.Коэффициент)
						И (ЗначениеЗаполнено(СтрокаИсточник.Упаковка) Или ЗначениеЗаполнено(ТекущаяУпаковка)) Тогда
						
						Если ЗначениеЗаполнено(ТекущаяУпаковка) Тогда
							
							НайденноеЗначение = СоответствиеУпаковок.Получить(ТекущаяУпаковка);
							Если НайденноеЗначение <> Неопределено Тогда
								ТекущийКоэффициент = НайденноеЗначение;
							КонецЕсли;
							
						КонецЕсли;
						
						Цена = Цена / СтрокаИсточник.Коэффициент * ТекущийКоэффициент;
						
					КонецЕсли;
					
				ИначеЕсли ЗагружатьУпаковку Тогда
					СтрокаТаблицыЦен["Упаковка" + ИмяКолонки] = СтрокаИсточник.Упаковка;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПрименитьОкругление Тогда
				Цена = ОкруглитьЦену(Цена, СтрокаВидЦены);
			КонецЕсли;
			
			Если СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки] <> 0 Тогда
				ПроцентИзменения = Окр(100 * (Цена - СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки]) / СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки], 10, 2);
			Иначе
				ПроцентИзменения = 0;
			КонецЕсли;
			
			Если    ПорогСрабатывания = 0
				ИЛИ СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки] = 0
				ИЛИ ?(ПроцентИзменения > 0, ПроцентИзменения >= ПорогСрабатывания, -ПроцентИзменения >= ПорогСрабатывания) Тогда
				
				СтрокаТаблицыЦен[ИмяКолонки] = Цена;
				Если СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки] <> 0 Тогда
					СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] = ПроцентИзменения;
				Иначе
					СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] = 0;
				КонецЕсли;
				
			Иначе
				СтрокаТаблицыЦен[ИмяКолонки] = СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки];
				СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] = 0;
			КонецЕсли;
			
			СтрокаТаблицыЦен["ИзмененаВручную" + ИмяКолонки] = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокумент()
	
	Если Объект.ВидыЦен.Количество() > 0 Или Объект.Товары.Количество() > 0 Тогда
		
		Если ВыбранныеСтрокиТаблицыВидовЦен().Количество() > 0 Тогда
			ПостроитьДеревоЦен();
			ЗагрузитьТабличнуюЧастьТовары();
			ЗагрузитьБазовыеЦены();
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУстановкаЦен;
		Иначе
			
			// Документ вводится на основании Поступления товаров и услуг.
			// Необходимо выбрать цены, расчитываемые по документу поступления и переформировать таблицу цен.
			Если ЗначениеЗаполнено(Объект.ДокументОснование)
				И Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
					Если ТекСтрока.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении Тогда
						ТекСтрока.Выбрана = Истина;
						НоваяСтрока = Объект.ВидыЦен.Добавить();
						НоваяСтрока.ВидЦены = ТекСтрока.Ссылка;
					КонецЕсли;
				КонецЦикла;
				
				ВыбратьВсеЗависимыеЦены();
				ВыбранныеЦеныИзменены = Ложь;
				
				ВидыЗагружаемыхСтарыхЦен = Новый Массив();
				Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
					Если ТекСтрока.Выбрана И (ТекСтрока.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную) Тогда
						ВидыЗагружаемыхСтарыхЦен.Добавить(ТекСтрока.Ссылка);
					КонецЕсли;
				КонецЦикла;
				
				ПостроитьДеревоЦен();
				ЗагрузитьТабличнуюЧастьТовары();
				
				ПоместитьВидыЦенВТабличнуюЧасть(Объект);
				ПоместитьЦеныВТабличнуюЧасть(Объект, Ложь);
				ОбновитьСтарыеЦеныНоменклатуры();
				
				ТаблицаНоменклатуры = СоздатьТаблицуНоменклатурыПоДеревуЦен();
				ЗагрузитьЗначенияБазовыхЦен(ТаблицаНоменклатуры, ВидыЗагружаемыхСтарыхЦен, , 0, Истина);
				
				Если ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанныхНаСервере(Ложь) Тогда
					
					ВычислитьЦеныПоДаннымИБ(ТаблицаНоменклатуры);
					РассчитатьВычисляемыеЦены(ТаблицаНоменклатуры);
					
					Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУстановкаЦен;
					
				Иначе
					ПроверитьЗаполнениеПараметровПриОткрытии = Истина;
				КонецЕсли;
				
			Иначе
				
				ПостроитьДеревоЦен();
				ЗагрузитьТабличнуюЧастьТовары();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИндексКартинкиСтрокиДереваЦен(СтрокаДереваЦен)
	
	Если ТипЗнч(СтрокаДереваЦен) = Тип("ДанныеФормыЭлементДерева") Тогда
		Если СтрокаДереваЦен.ПолучитьРодителя() = Неопределено Тогда
			СтрокаДереваЦен.ИндексКартинки = 0;
		Иначе
			СтрокаДереваЦен.ИндексКартинки = 2;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СтрокаДереваЦен) = Тип("СтрокаДереваЗначений") Тогда
		Если СтрокаДереваЦен.Родитель = Неопределено Тогда
			СтрокаДереваЦен.ИндексКартинки = 0;
		Иначе
			СтрокаДереваЦен.ИндексКартинки = 2;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Коприрует в таблицу значений номенклатуру с характеристикой из дерева цен
//
// Возвращаемое значение:
// ТаблицаЗначений
//
&НаСервере
Процедура ЗаполнитьТаблицуНоменклатурыПоДеревуЦен(ТаблицаНоменклатуры)

	ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
		
	Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
			
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементНоменклатура);
			
		ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
			
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				
			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементХарактеристика);
				
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

// Получает все характеристики номенклатуры
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура, для которой необходимо получить характеристики
//
&НаСервере
Процедура ЗаполнитьХарактеристикиНоменклатуры(Знач ТекущаяСтрока, СкопироватьЦеныИзТекущейСтроки = Ложь)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка           КАК Номенклатура,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.ЦеноваяГруппа    КАК ЦеноваяГруппа,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры) ТОГДА Истина
	|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры) ТОГДА Истина
	|	ИНАЧЕ Ложь КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ХарактеристикиНоменклатуры.Ссылка       КАК Характеристика
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|	ПО (ХарактеристикиНоменклатуры.Владелец = СправочникНоменклатура.Ссылка
	|		ИЛИ ХарактеристикиНоменклатуры.Владелец = СправочникНоменклатура.ВидНоменклатуры)
	|ГДЕ
	|	СправочникНоменклатура.Ссылка = &Номенклатура
	|	И ХарактеристикиНоменклатуры.Ссылка ЕСТЬ НЕ NULL
	|УПОРЯДОЧИТЬ ПО
	|	ХарактеристикиНоменклатуры.Ссылка
	|");
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|;
			|ВЫБРАТЬ
			|	ЦеныНоменклатуры.Характеристика  КАК Характеристика,
			|	ЦеныНоменклатуры.ВидЦены         КАК ВидЦены,
			|	ЦеныНоменклатуры.Упаковка        КАК Упаковка
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента, Номенклатура = &Номенклатура И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры
			|";
			
		Запрос.УстановитьПараметр("ВидыЦен",       ВыбранныеВидыЦен());
		Запрос.УстановитьПараметр("ДатаДокумента", ДатаДляЗапросаЦенНоменклатуры());
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		Упаковки = МассивРезультатов[1].Выгрузить();
		Упаковки.Индексы.Добавить("Характеристика");
	КонецЕсли;
	
	ВидыЦен = ВыбранныеВидыЦен();
	
	ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
	ВыборкаХарактеристики = МассивРезультатов[0].Выбрать();
	Пока ВыборкаХарактеристики.Следующий() Цикл
		
		ЭлементХарактеристика = ЭлементыХарактеристики.Добавить();
		
		ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
		ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			ПараметрыПоиска = Новый Структура("Характеристика", ЭлементХарактеристика.Характеристика);
			
			НайденныеСтроки = Упаковки.НайтиСтроки(ПараметрыПоиска);
			Для Каждого ВыборкаУпаковки Из НайденныеСтроки Цикл
				ЭлементХарактеристика["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены)] = ВыборкаУпаковки.Упаковка;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СкопироватьЦеныИзТекущейСтроки Тогда
		
		МассивУпаковок = Новый Массив();
		СоответствиеУпаковок = Неопределено;
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			Для Каждого ВидЦены Из ВидыЦен Цикл
				ИмяКолонки = ИмяКолонкиПоВидуЦены(ВидЦены);
				
				Если ЗначениеЗаполнено(ТекущаяСтрока["Упаковка" + ИмяКолонки]) Тогда
					МассивУпаковок.Добавить(ТекущаяСтрока["Упаковка" + ИмяКолонки]);
				КонецЕсли;
				
				ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
				Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
					
					Упаковка = ЭлементХарактеристика["Упаковка" + ИмяКолонки];
					Если ЗначениеЗаполнено(Упаковка) И МассивУпаковок.Найти(Упаковка) = Неопределено Тогда
						МассивУпаковок.Добавить(Упаковка);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если МассивУпаковок.Количество() > 0 Тогда
				СоответствиеУпаковок = КоэффициентыУпаковокНоменклатуры(МассивУпаковок);
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого ВидЦены Из ВидыЦен Цикл
			ИмяКолонки = ИмяКолонкиПоВидуЦены(ВидЦены);
			
			Если ТекущаяСтрока["ИзмененаВручную" + ИмяКолонки] Тогда
				
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					
					// Определим коэффициент упаковки текущей цены
					КоэффициентУпаковкиЦеныИсточника = 1;
					Если ИспользоватьУпаковкиНоменклатуры Тогда
						Упаковка = ТекущаяСтрока["Упаковка" + ИмяКолонки];
						Если ЗначениеЗаполнено(Упаковка) И СоответствиеУпаковок <> Неопределено Тогда
							НайденноеЗначение = СоответствиеУпаковок.Получить(Упаковка);
							Если НайденноеЗначение <> Неопределено Тогда
								КоэффициентУпаковкиЦеныИсточника = НайденноеЗначение;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
					
					ЭлементХарактеристика["ИзмененаВручную" + ИмяКолонки] = Истина;
					
					Если Не ИспользоватьУпаковкиНоменклатуры ИЛИ ТекущаяСтрока["Упаковка" + ИмяКолонки] = ЭлементХарактеристика["Упаковка" + ИмяКолонки] Тогда
						ЭлементХарактеристика[ИмяКолонки] = ТекущаяСтрока[ИмяКолонки];
					Иначе
						
						// Определим коэффициент упаковки влияющей цены
						КоэффициентУпаковкиЦеныНазначения = 1;
						
						Упаковка = ЭлементХарактеристика["Упаковка" + ИмяКолонки];
						Если ЗначениеЗаполнено(Упаковка) И СоответствиеУпаковок <> Неопределено Тогда
							НайденноеЗначение = СоответствиеУпаковок.Получить(Упаковка);
							Если НайденноеЗначение <> Неопределено Тогда
								КоэффициентУпаковкиЦеныНазначения = НайденноеЗначение;
							КонецЕсли;
						КонецЕсли;
						
						Если КоэффициентУпаковкиЦеныИсточника = КоэффициентУпаковкиЦеныНазначения Тогда
							ЭлементХарактеристика[ИмяКолонки] = ТекущаяСтрока[ИмяКолонки];
						Иначе
							ЭлементХарактеристика[ИмяКолонки] = ТекущаяСтрока[ИмяКолонки] / КоэффициентУпаковкиЦеныИсточника * КоэффициентУпаковкиЦеныНазначения;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает цены в таблице цен
//
// Параметры:
// ЗагрузкаСтарыхЦен - Булево - Указывает на необходимость загрузки старых значений ручных цен
// ОкруглениеРучныхЦен - Булево - Указывает на необходимость округления ручных цен
//
&НаКлиенте
Процедура ЗапуститьРасчетЦен(ЗагрузкаСтарыхЦен = Ложь, ОкруглениеРучныхЦен = Ложь)
	
	ПараметрыРасчета = ОткрытьФормуМодально("Документ.УстановкаЦенНоменклатуры.Форма.ФормаВыбораПараметровРасчета", ПараметрыРасчетаЦены(ЗагрузкаСтарыхЦен, ОкруглениеРучныхЦен), ЭтотОбъект);
	
	Если ПараметрыРасчета <> Неопределено Тогда
		
		РассчитатьЦены(ПараметрыРасчета);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак фиксации колонки "Номенклатура"
//
// Параметры:
// НовоеЗначение - Булево
//
&НаКлиенте
Процедура ЗафиксироватьКолонкуНоменклатураНаКлиенте(НовоеЗначение)
	
	ЗафиксироватьКолонкуНоменклатура = НовоеЗначение;
	
	Элементы.ДеревоЦенНоменклатура.ФиксацияВТаблице 	= ?(ЗафиксироватьКолонкуНоменклатура,ФиксацияВТаблице.Лево,ФиксацияВТаблице.Нет);
	Элементы.ДеревоЦенХарактеристика.ФиксацияВТаблице 	= ?(ЗафиксироватьКолонкуНоменклатура,ФиксацияВТаблице.Лево,ФиксацияВТаблице.Нет);
     	
	Элементы.ДеревоЦенПереключательЗафиксироватьКолонкуНоменклатура.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Возвращает таблицу с колонками Упаковка и Коэффициент
//
// Параметры:
//  МассивУпаковок - Массив - содержит упаковки номенклатуры, для которых необходимо получить коэффициенты
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
&НаСервереБезКонтекста
Функция КоэффициентыУпаковокНоменклатуры(МассивУпаковок)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	УпаковкиНоменклатуры.Ссылка      КАК Упаковка,
		|	УпаковкиНоменклатуры.Коэффициент КАК Коэффициент
		|ИЗ
		|	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Ссылка В(&МассивНоменклатуры)");
		
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивУпаковок);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеУпаковок = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		СоответствиеУпаковок.Вставить(Выборка.Упаковка, Выборка.Коэффициент);
	КонецЦикла;
	
	Возврат СоответствиеУпаковок;
	
КонецФункции

// Возвращает таблицу с колонками Упаковка и Коэффициент
//
// Параметры:
// СтрокаТаблицы - строка таблицаЗначений
//
// Возвращаемое значение:
// ТаблицаЗначений
//
&НаСервере
Функция КоэффициентыУпаковокНоменклатурыДереваТоваров(ТаблицаНоменклатуры)
	
	МассивВидовЦен = Новый Массив();
		
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		Если ВидЦены.Выбрана Тогда
			МассивВидовЦен.Добавить(ВидЦены.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	МассивУпаковок = Новый Массив();
	
	ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
		
	Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		
		ДобавитьУпаковкиСтрокиТаблицыЦенВМассив(ЭлементНоменклатура, ТаблицаНоменклатуры, МассивВидовЦен, МассивУпаковок);
		ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
		
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			ДобавитьУпаковкиСтрокиТаблицыЦенВМассив(ЭлементХарактеристика, ТаблицаНоменклатуры, МассивВидовЦен, МассивУпаковок);
		КонецЦикла;
		
	КонецЦикла;
		
	Возврат КоэффициентыУпаковокНоменклатуры(МассивУпаковок);
	
КонецФункции

// Осуществляет поиск строки с определенным видом цен в таблице
//
// Параметры:
//  ТаблицаВидовЦен - ДанныеФормыКоллекция - Таблица, в которой осуществляется поиск
//  ВидЦен - СправочникСсылка.ВидыЦен - Ссылка на вид цен, который необходимо найти
//
// Возвращаемое значение:
//  ДанныеФормыЭлементКоллекции - найденный вид цен
//
&НаСервере
Функция НайтиСтрокуВидаЦен(ВидЦены)
	
	Возврат ВыбранныеЦены.НайтиСтроки(Новый Структура("Ссылка", ВидЦены.Ссылка))[0];
	
КонецФункции

// Осуществляет поиск строки с определенным видом цен в таблице
//
// Параметры:
//  ТаблицаВидовЦен - ДанныеФормыКоллекция - Таблица, в которой осуществляется поиск
//  ВидЦен - СправочникСсылка.ВидыЦен - Ссылка на вид цен, который необходимо найти
//
// Возвращаемое значение:
//  ДанныеФормыЭлементКоллекции - найденный вид цен
//
&НаКлиенте
Функция НайтиСтрокуВидаЦенНаКлиенте(Таблица, ВидЦены)
	
	Возврат Таблица.НайтиСтроки(Новый Структура("Ссылка", ВидЦены))[0];
	
КонецФункции

// Осуществляет поиск строк в таблице по полям строки
//
// Параметры:
// Таблица - ДанныеФормыКоллекция - Таблица, в которой необходимо найти строки
// СтрокаКлюч - ДанныеФормыЭлементКоллеккции - Строка, по полям которой должен
// осуществляться поиск
//
// Возвращаемое значение:
// Массив найденных строк таблицы
//
&НаСервере
Функция НайтиСтрокуДереваЦен(СтрокаНоменклатуры)
	
	Если ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = Неопределено Тогда
		ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = ТаблицаСоответствия();
	КонецЕсли;
	
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		Отбор = Новый Структура("Номенклатура, Характеристика", СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.Характеристика);
	Иначе
		Отбор = Новый Структура("Номенклатура, Характеристика", СтрокаНоменклатуры.Номенклатура, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	МассивСтрок = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.НайтиСтроки(Отбор);
	Для Каждого СтрокаТЗ Из МассивСтрок Цикл
		Возврат СтрокаТЗ.СтрокаДереваЦен;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Осуществляет округление цены в соответствии с правилами округления для вида цен
//
// Параметры:
//  ЗначениеЦены - Число - значение цены, которое необходимо округлить
//  СтрокаСправочникаВидовЦен - СтрокаТаблицыЗначений - вид цены, в соответствии с которым необходимо округлить цену
//
// Возвращаемое значение:
//  Число - Округленное значение цены
//
&НаСервере
Функция ОкруглитьЦену(ЗначениеЦены, СтрокаСправочникаВидовЦен)
	
	КоличествоСтрок = СтрокаСправочникаВидовЦен.ПравилаОкругленияЦены.Количество();
	
	Для Индекс = 1 По КоличествоСтрок Цикл
		
		ПравилаОкругления = СтрокаСправочникаВидовЦен.ПравилаОкругленияЦены[КоличествоСтрок - Индекс];
		
		Если ПравилаОкругления.НижняяГраницаДиапазонаЦен <= ЗначениеЦены Тогда
			
			Если ЗначениеЗаполнено(ПравилаОкругления.ТочностьОкругления) Тогда
				ЗначениеЦены = Ценообразование.ОкруглитьЦену(ЗначениеЦены, ПравилаОкругления.ТочностьОкругления, СтрокаСправочникаВидовЦен.ОкруглятьВБольшуюСторону);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПравилаОкругления.ПсихологическоеОкругление) Тогда
				ЗначениеЦены = ЦенообразованиеКлиентСервер.ПрименитьПсихологическоеОкругление(ЗначениеЦены, ПравилаОкругления.ПсихологическоеОкругление);
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗначениеЦены;
	
КонецФункции

// Обнуляет цены в таблице
//
// Параметры:
//  ТаблицаНоменклатуры - ТаблицаЗначений - Таблица, в которой необходимо очистить цены
//  ВидЦены - Массив - виды цен, для которых необходимо очистить цены
//
&НаСервере
Процедура ОчиститьЦены(ТаблицаНоменклатуры, МассивСтрокВидовЦен)
	
	Для Каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		СтрокаДереваЦен = НайтиСтрокуДереваЦен(СтрокаНоменклатуры);
		Для Каждого СтрокаВидЦены Из МассивСтрокВидовЦен Цикл
			СтрокаДереваЦен[СтрокаВидЦены.ИмяКолонки] = 0;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для расчета цен
//
// Параметры:
// ЗагрузкаСтарыхЦен - Булево - Указывает на необходимость загрузки старых значений ручных цен
// ОкруглениеРучныхЦен - Булево - Указывает на необходимость округления ручных цен
//
// Возвращаемое значение:
// Структура
// Ключи структуры:
// ЗагрузкаСтарыхЦен - Булево
// ОкруглениеРучныхЦен - Булево
// ВидыЦен - Массив
//
&НаКлиенте
Функция ПараметрыРасчетаЦены(ЗагрузкаСтарыхЦен = Ложь, ОкруглениеРучныхЦен = Ложь)
	
	ВидыЦен = Новый Массив();
	
	Для Каждого Цена Из ВыбранныеЦены Цикл
		
		Если Цена.Выбрана И ((Цена.СпособЗаданияЦены = СпособЗаданияЦеныВручную) = (ЗагрузкаСтарыхЦен Или ОкруглениеРучныхЦен)) Тогда
			ВидыЦен.Добавить(Цена.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("ЗагрузкаСтарыхЦен,ОкруглениеРучныхЦен,ВидыЦен", ЗагрузкаСтарыхЦен, ОкруглениеРучныхЦен, ВидыЦен);
	
КонецФункции

// Формирует таблицу цен на форме
//
// Параметры:
//  ПересчитатьЦены - Булево - Указывает на необходимость перерасчета цен
//
&НаСервере
Процедура ПереформироватьТаблицуЦен(ПересчитатьЦены)
	
	ПоместитьЦеныВТабличнуюЧасть(Объект);
	ПостроитьДеревоЦен();
	ЗагрузитьТабличнуюЧастьТовары();
	
	Если ПересчитатьЦены Тогда
		РассчитатьВсеЦены();
	Иначе
		ЗагрузитьБазовыеЦены();
	КонецЕсли;
	
КонецПроцедуры

// Формирует уникальное имя колонки таблицы
//
&НаСервереБезКонтекста
Функция ПолучитьИмяКолонкиУпаковки(ВидЦены)
	
	Возврат "УпаковкаВидЦены" + СтрЗаменить(ВидЦены.УникальныйИдентификатор(), "-", "");
	
КонецФункции

// Копирует виды цен из таблицы формы ВыбранныеЦены в табличную часть ВидыЦен объекта
//
&НаСервере
Процедура ПоместитьВидыЦенВТабличнуюЧасть(ТекущийОбъект)
	
	ТекущийОбъект.ВидыЦен.Очистить();
	
	Для Каждого Цена Из ВыбранныеЦены Цикл
		
		Если Цена.Выбрана Тогда
			
			НоваяСтрока         = ТекущийОбъект.ВидыЦен.Добавить();
			НоваяСтрока.ВидЦены = Цена.Ссылка;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Копирует цены по всем видам из таблицы формы ДеревоЦен в строку табличой части Товары объекта
//
// Параметры:
//  Товары           - табличная часть, в которую необходимо поместить строку с ценами
//  СохранятьБазовые - Булево -указывает на необходимость помещения в табличную часть базовых видов цен
//
&НаСервере
Процедура ПоместитьСтрокуЦенВтабличнуюЧасть(Товары, СтрокаЦен, СохранятьБазовые = Истина)
	
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		
		Если ВидЦены.Выбрана Или СохранятьБазовые И ВидЦены.Влияет Тогда
			
			НоваяСтрока                = Товары.Добавить();
			НоваяСтрока.Номенклатура   = СтрокаЦен.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаЦен.Характеристика;
			НоваяСтрока.ВидЦены        = ВидЦены.Ссылка;
			
			ИмяКолонки = ВидЦены.ИмяКолонки;
			Если СтрокаЦен.Свойство(ИмяКолонки) Тогда
				НоваяСтрока.Цена = СтрокаЦен[ИмяКолонки];
				НоваяСтрока.ЦенаИзмененаВручную = СтрокаЦен["ИзмененаВручную" + ИмяКолонки];
			КонецЕсли;
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				ИмяКолонки = "Упаковка" + ИмяКолонки;
				Если СтрокаЦен.Свойство(ИмяКолонки) Тогда
					НоваяСтрока.Упаковка = СтрокаЦен[ИмяКолонки];
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Копирует цены из таблицы формы ДеревоЦен в табличную часть Товары объекта
//
// Параметры:
// ТекущийОбъект    - объект, в табличную часть которого необходимо поместить цены
// СохранятьБазовые - Булево -указывает на необходимость помещения в табличную часть базовых видов цен
//
&НаСервере
Процедура ПоместитьЦеныВТабличнуюЧасть(ТекущийОбъект, СохранятьБазовые = Истина)
	
	ТекущийОбъект.Товары.Очистить();
	
	ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
	
	Для Каждого ТекЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		
		ПоместитьСтрокуЦенВтабличнуюЧасть(ТекущийОбъект.Товары, ТекЭлементНоменклатура, СохранятьБазовые);
		
		ЭлементыХарактеристики = ТекЭлементНоменклатура.ПолучитьЭлементы();
		
		Для Каждого ТекЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			ПоместитьСтрокуЦенВтабличнуюЧасть(ТекущийОбъект.Товары, ТекЭлементХарактеристика, СохранятьБазовые);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает упаковки, на которые ранее были установлены цены номенклатуре
// для подстановки в документы при изменении номенклатуры
//
// Параметры:
// Номенклатура - СправочникСсылка.Номенклатура - Ссылка на номенклатуру, для которой необходимо получить упаковку цен
//
// Возвращаемое значение:
// ТаблицаЗначений
//
&НаСервереБезКонтекста
Функция ПоследниеУпаковкиЦен(Знач Номенклатура, Знач Характеристика, Знач ВидыЦен, Знач Дата = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЦеныНоменклатуры.ВидЦены  КАК ВидЦены,
		|	ЦеныНоменклатуры.Упаковка КАК Упаковка
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура И Характеристика = &Характеристика И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры
		|";
	
	Запрос.УстановитьПараметр("Номенклатура",   Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("ВидыЦен",        ВидыЦен);
	Запрос.УстановитьПараметр("Дата",           ?(Дата = Неопределено, ТекущаяДатаСеанса(), Дата));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ПостроитьДеревоЦен()
	
	ДобавляемыеКолонкиТаблицыЦен = Новый Массив();
	УдаляемыеКолонкиТаблицыЦен   = Новый Массив();
	УдаляемыеЭлементы            = Новый Массив();
	УсловныеОформления           = Новый Массив();
	
	ДеревоЗначений = СоздатьПустоеДеревоНоменклатуры();
	
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		
		Если ВидЦены.Выбрана Или ВидЦены.Влияет Тогда
			
			ИмяКолонки = ВидЦены.ИмяКолонки;
			
			ДеревоЗначений.Колонки.Добавить(                     ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)), ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("СтараяЦена"       + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)), ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("ПроцентИзменения" + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(05, 2, ДопустимыйЗнак.Любой)),           ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("ИзмененаВручную"  + ИмяКолонки, Новый ОписаниеТипов("Булево"),                                                                 ВидЦены.Наименование);
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				ДеревоЗначений.Колонки.Добавить("Упаковка" + ИмяКолонки, Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"), "Упаковка");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	РеквизитыТаблицыЦен = ПолучитьРеквизиты("ДеревоЦен");
	Для Каждого Реквизит Из РеквизитыТаблицыЦен Цикл
		Если Найти(Реквизит.Имя, "ВидЦены") Тогда
			УдаляемыеКолонкиТаблицыЦен.Добавить("ДеревоЦен." + Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
		Если Найти(Колонка.Имя, "ВидЦены") Тогда
			УдаляемаяКолонка = УдаляемыеКолонкиТаблицыЦен.Найти("ДеревоЦен." + Колонка.Имя);
			Если УдаляемаяКолонка <> Неопределено Тогда
				УдаляемыеКолонкиТаблицыЦен.Удалить(УдаляемаяКолонка);
			Иначе
				ДобавляемыеКолонкиТаблицыЦен.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ДеревоЦен", Колонка.Заголовок, Истина));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если УдаляемыеКолонкиТаблицыЦен.Количество() > 0 Или ДобавляемыеКолонкиТаблицыЦен.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеКолонкиТаблицыЦен, УдаляемыеКолонкиТаблицыЦен);
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из Элементы.ДеревоЦен.ПодчиненныеЭлементы Цикл
		Если Найти(ТекЭлемент.Имя, "ВидЦены") Тогда
			УдаляемыеЭлементы.Добавить(ТекЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Для Каждого Оформление Из ЭтотОбъект.УсловноеОформление.Элементы Цикл
		Если Оформление.Представление = "СозданоПрограммно" Тогда
			УсловныеОформления.Добавить(Оформление);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Оформление Из УсловныеОформления Цикл
		УсловноеОформление.Элементы.Удалить(Оформление);
	КонецЦикла;
	
	
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		
		ИмяКолонки = ВидЦены.ИмяКолонки;
		
		Если ВидЦены.Выбрана ИЛИ ?(ОтображатьВлияющиеЦены, ВидЦены.Влияет, Ложь) Тогда
			
			ЦветЗаголовка = Неопределено;
			ЦветФона      = Неопределено;
			КартинкаШапки = Неопределено;
			
			Если ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную Тогда
				
				КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенЗадаватьВручную;
				
			ИначеЕсли ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
				ИЛИ ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении Тогда
				
				ЦветФона      = Метаданные.ЭлементыСтиля.КолонкаЦенЗаполнятьПоДаннымИБ.Значение;
				КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенЗаполнятьПоДаннымИБ;
				
			ИначеЕсли ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоДругимВидамЦен Тогда
				
				ЦветФона      = Метаданные.ЭлементыСтиля.КолонкаЦенРассчитыватьПоДругимВидамЦен.Значение;
				КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенРассчитыватьПоДругимВидамЦен;
				
			КонецЕсли;
			
			НоваяГруппа = ДобавитьГруппуФормы("ГруппаЦены" + ИмяКолонки, Строка(ВидЦены.Ссылка), Истина, КартинкаШапки, ГруппировкаКолонок.Горизонтальная);
			
			ЗаголовокКолонкиСтараяЦена = ?(ВидЦены.Выбрана, НСтр("ru='Старая цена'"), НСтр("ru='Цена'"));
			
			НовоеПоле = ДобавитьПолеФормы("СтараяЦена" + ИмяКолонки, ЗаголовокКолонкиСтараяЦена, , , 12, ЦветФона, ЦветЗаголовка, НоваяГруппа,,,Истина);
			НовоеПоле.ЦветТекста = WebЦвета.Серый;
			
			Если ВидЦены.Выбрана Тогда
				
				НовоеПоле = ДобавитьПолеФормы("ПроцентИзменения" + ИмяКолонки, "%", "ДеревоЦенЦенаПриИзменении", , 6, ЦветФона, ЦветЗаголовка, НоваяГруппа);
				НовоеПоле.ЦветТекста = WebЦвета.Серый;
				НовоеПоле.ВыделятьОтрицательные = Истина;
				НовоеПоле.Подсказка = НСтр("ru = 'Процент изменения стоимости'");
				
				НовоеПоле = ДобавитьПолеФормы(ИмяКолонки, НСтр("ru='Новая цена'"), "ДеревоЦенЦенаПриИзменении", , 12, ЦветФона, ЦветЗаголовка, НоваяГруппа);
				
				НовоеПоле = ДобавитьПолеФормы("ИзмененаВручную" + ИмяКолонки, НСтр("ru='Изм.'"), , , 6, ЦветФона, ЦветЗаголовка, НоваяГруппа,,,Истина);
				НовоеПоле.ЦветТекста = WebЦвета.Серый;
				НовоеПоле.Видимость  = Ложь;
				
			КонецЕсли;
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяГруппаУпаковка = ДобавитьГруппуФормы("ГруппаУпаковки" + ИмяКолонки, НСтр("ru='Упаковка, ед. изм'"), Ложь, Неопределено, ГруппировкаКолонок.ВЯчейке, НоваяГруппа);
				
				НоваяСвязь = Новый СвязьПараметраВыбора("Номенклатура", "Элементы.ДеревоЦен.ТекущиеДанные.Номенклатура", РежимИзмененияСвязанногоЗначения.НеИзменять);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НоваяСвязь);
				НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);

				ДобавитьПолеФормы("Упаковка" + ИмяКолонки,
									НСтр("ru='Упаковка'"),
									"ДеревоЦенУпаковкаПриИзменении",
									"ДеревоЦенУпаковкаНачалоВыбора",
									12,
									ЦветФона,
									ЦветЗаголовка,
									НоваяГруппаУпаковка
									,
									,
									,
									,
									НовыеСвязи);
				ДобавитьПолеФормы("ЕдиницаИзмерения" + ИмяКолонки, НСтр("ru='Ед. изм.'"), , , 8, ЦветФона, ЦветЗаголовка, НоваяГруппаУпаковка, , "ДеревоЦен.ЕдиницаИзмерения", Истина);
			Иначе
				ДобавитьПолеФормы("ЕдиницаИзмерения" + ИмяКолонки, НСтр("ru='Ед. изм.'"), , , 8, ЦветФона, ЦветЗаголовка, НоваяГруппа, , "ДеревоЦен.ЕдиницаИзмерения", Истина);
			КонецЕсли;
			
			// Условное оформление цен, измененных вручную
			НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
			НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
			НовыйЭлементУсловногоОформления.Использование = Истина;
			
			ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.ИзмененаВручную" + ИмяКолонки);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Истина;
			
			НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
			НовоеПоле.Использование = Истина;
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЦен" + ИмяКолонки);
			
			НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоЦенЗначение = РеквизитФормыВЗначение("ДеревоЦен");
	ДеревоЦенЗначение.Колонки.Очистить();
	
	Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
		ДеревоЦенЗначение.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЦенЗначение, "ДеревоЦен");
	
КонецПроцедуры

// Округляет ручные цены в таблице
//
// Параметры:
//  ТаблицаНоменклатуры - ТаблицаЗначений - Таблица, в которой применяется округление
//  ВидыЦен - Массив - виды цен, для которых необходимо применить округление
//
&НаСервере
Процедура ПрименитьОкруглениеКРучнымЦенам(ТаблицаНоменклатуры, ВидыЦен)
	
	Для Каждого СтрокаТаблицыНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		СтрокаТаблицыЦен = НайтиСтрокуДереваЦен(СтрокаТаблицыНоменклатуры);
		
		Для Каждого СтрокаВидЦены Из ВидыЦен Цикл
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			СтрокаТаблицыЦен[ИмяКолонки] = ОкруглитьЦену(СтрокаТаблицыЦен[ИмяКолонки], СтрокаВидЦены);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет необходимые действия при переходе к странице установки цен
//
&НаКлиенте
Процедура ПриПереходеКУстановкеЦен()
	
	ЕстьВыбранныеЦены = Ложь;
	
	Для Каждого Цена Из ВыбранныеЦены Цикл
		
		Если Цена.Выбрана Тогда
			
			ЕстьВыбранныеЦены = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьВыбранныеЦены Тогда
		
		Если ВыбранныеЦеныИзменены Тогда
			
			ПересчитатьЦены = ?(ДеревоЦен.ПолучитьЭлементы().Количество() > 0, Вопрос(НСтр("ru='Состав цен изменился. Пересчитать цены?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да, Истина);
			ПереформироватьТаблицуЦен(ПересчитатьЦены);
			
			ВыбранныеЦеныИзменены = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для перехода к установке цен, необходимо выбрать один или несколько видов цен'"));
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВидыЦен;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность заполнения документа установки цен
//
// Параметры:
// Отказ = Булево - признак отказа от записи документа
//
&НаСервере
Процедура ПроверитьКорректностьЗаполненияДокумента(Отказ)
	
	// Для корректного построения таблицы цен по тч Товары не должно быть дублей товаров и пустых строк
	ДеревоЦенДляПроверки = СоздатьПустуюТаблицуНоменклатуры();
	ДеревоЦенДляПроверки.Колонки.Добавить("НомерСтроки",    Новый ОписаниеТипов("Число"));
	ДеревоЦенДляПроверки.Колонки.Добавить("ЭтоГруппа",      Новый ОписаниеТипов("Булево"));
	
	ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
	НомерСтроки = 1;
	
	Для Каждого ТекЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		
		СтрокаТаблицы = ДеревоЦенДляПроверки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТекЭлементНоменклатура);
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		СтрокаТаблицы.ЭтоГруппа   = Истина;
		
		ЭлементыХарактеристики = ТекЭлементНоменклатура.ПолучитьЭлементы();
		
		НомерСтроки = НомерСтроки + 1;
		
		Если ТекЭлементНоменклатура.ХарактеристикиИспользуются Тогда
	
			ДобавленыХарактеристики = Ложь;
			
			Для Каждого ТекЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				
				СтрокаТаблицы = ДеревоЦенДляПроверки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТекЭлементХарактеристика);
				СтрокаТаблицы.НомерСтроки = НомерСтроки;
				СтрокаТаблицы.ЭтоГруппа   = Ложь;
				
				НомерСтроки = НомерСтроки + 1;
				ДобавленыХарактеристики = Истина;
				
			КонецЦикла;
			
			Если Не ДобавленыХарактеристики Тогда
				ТекстОшибки = НСтр("ru='Для номенклатуры ""%1"" в строке ""%2"" списка ""Таблица цен"" включено использование характеристик,
				|Но ни одной характеристики не указано. Добавьте характеристики и укажите их цены или удалите данную номенклатуру из списка.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					Объект.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоЦен", СтрокаТаблицы.НомерСтроки, "Номенклатура"),
					,
					Отказ
					);
			КонецЕсли;
			
		КонецЕсли; 		
		
	КонецЦикла;
	
	Если ДеревоЦенДляПроверки.Количество() = 0 Тогда
		
		ТекстОшибки = НСтр("ru='Не введено ни одной строки в список ""Товары"".'");
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Объект,
			"ДеревоЦен",
			,
			Отказ);
			
	Иначе
		
		Ценообразование.ПроверитьКорректностьЗаполненияДокументаУстановкиЦенНоменклатуры(Объект, ДеревоЦенДляПроверки, ВыбранныеВидыЦен(), Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПустаяТаблицаТовары()
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	
	ТаблицаЗначений.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗначений.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаЗначений.Колонки.Добавить("ВидЦены",        Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТаблицаЗначений.Колонки.Добавить("Цена",           Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("Упаковка",       Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Осуществляет расчет базовых, заполняемых по данным информационной базы и рассчитываемых цен
//
&НаСервере
Процедура РассчитатьВсеЦены()
	
	ТаблицаНоменклатуры = СоздатьПустуюТаблицуНоменклатуры();
	ЗаполнитьТаблицуНоменклатурыПоДеревуЦен(ТаблицаНоменклатуры);
	
	ЗагрузитьЗначенияБазовыхЦен(ТаблицаНоменклатуры, Неопределено);
	
	ВычислитьЦеныПоДаннымИБ(ТаблицаНоменклатуры);
	РассчитатьВычисляемыеЦены(ТаблицаНоменклатуры);
	
КонецПроцедуры

// Осуществляет расчет вычисляемых цен
//
// Параметры:
//  ТаблицаНоменклатуры - ДанныеФормыКоллекция - Таблица, в которой осуществляется расчет цен
//  ВидыЦен - Массив - Виды цен, которые необходимо рассчитать
//  ТолькоНезаполенные - Указывает на необходимость расчета ранее заполненных цен
//
&НаСервере
Процедура РассчитатьВычисляемыеЦены(ТаблицаНоменклатуры, ВидыЦен = Неопределено, ТолькоНезаполенные = Ложь, ИзмененноеПоле = Неопределено)
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		СоответствиеУпаковок = КоэффициентыУпаковокНоменклатурыДереваТоваров(ТаблицаНоменклатуры);
	Иначе
		СоответствиеУпаковок = Неопределено;
	КонецЕсли;
	
	Если ВидыЦен = Неопределено Тогда
		Если ИзмененноеПоле = Неопределено Тогда
			ВидыЦен = ВыбранныеСтрокиТаблицыВидовЦен();
		Иначе
			СтрокаИзмененныйВидЦены = СтрокаВидаЦеныПоИмениПоля(ВыбранныеЦены, ИзмененноеПоле);
			Если СтрокаИзмененныйВидЦены <> Неопределено Тогда
				ВидыЦен = ЗависимыеОтВидаЦеныВидыЦен(СтрокаИзмененныйВидЦены);
			Иначе
				ВидыЦен = ВыбранныеСтрокиТаблицыВидовЦен();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ПозицияНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		СтрокаТаблицыЦен = НайтиСтрокуДереваЦен(ПозицияНоменклатуры);
		СтруктураЦеноваяГруппа = Новый Структура("ЦеноваяГруппа", СтрокаТаблицыЦен.ЦеноваяГруппа);
		
		Для Каждого ВидЦены Из ВидыЦен Цикл
			
			Если ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоДругимВидамЦен Тогда
				
				Если Не ТолькоНезаполенные Тогда
					СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] = 0;
				КонецЕсли;
				
				ТекущаяЦена = СтрокаТаблицыЦен[ВидЦены.ИмяКолонки];
				Если ТекущаяЦена = 0 Или Не ТолькоНезаполенные Тогда
					
					ЦеновыеГруппыАлгоритмов = ВидЦены.ЦеновыеГруппы.НайтиСтроки(СтруктураЦеноваяГруппа);
					Если ЦеновыеГруппыАлгоритмов.Количество() > 0 Тогда
						АлгоритмРасчетаЦены = ЦеновыеГруппыАлгоритмов[0].АлгоритмРасчетаЦены;
					Иначе
						АлгоритмРасчетаЦены = ВидЦены.АлгоритмРасчетаЦены;
					КонецЕсли;
					
					ЦеновыеГруппыПорогов = ВидЦены.ПорогиСрабатывания.НайтиСтроки(СтруктураЦеноваяГруппа);
					Если ЦеновыеГруппыПорогов.Количество() > 0 Тогда
						ПорогСрабатывания = ЦеновыеГруппыПорогов[0].ПорогСрабатывания;
					Иначе
						ПорогСрабатывания = ВидЦены.ПорогСрабатывания;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(АлгоритмРасчетаЦены) Тогда
						
						Для Каждого БазоваяЦена Из ВидЦены.ВлияющиеЦены Цикл
							
							СтрокаБазовойЦены = НайтиСтрокуВидаЦен(БазоваяЦена.Значение);
							
							СтрокаПересчетаУпаковок = СтрокаПересчетаУпаковок(СтрокаТаблицыЦен, СтрокаБазовойЦены, ВидЦены, СоответствиеУпаковок);
							
							СтрокаЗамены = " СтрокаТаблицыЦен." + СтрокаБазовойЦены.ИмяКолонки + " " + СтрокаПересчетаУпаковок;
							АлгоритмРасчетаЦены = СтрЗаменить(АлгоритмРасчетаЦены, "[" + СтрокаБазовойЦены.Идентификатор + "]", СтрокаЗамены);
							
						КонецЦикла;
						
						Попытка
							
							ЗначениеЦены = ОкруглитьЦену(Вычислить(АлгоритмРасчетаЦены), ВидЦены);
							
							Если СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки] <> 0 Тогда
								ПроцентИзменения = Окр(100*(ЗначениеЦены - СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки])/СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки],5,2);
							Иначе
								ПроцентИзменения = 0;
							КонецЕсли;
							
							Если    ПорогСрабатывания = 0
								ИЛИ СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки] = 0
								ИЛИ ?(ПроцентИзменения > 0, ПроцентИзменения >= ПорогСрабатывания, -ПроцентИзменения >= ПорогСрабатывания) Тогда
								
								СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] = ЗначениеЦены;
								Если СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки] <> 0 Тогда
									СтрокаТаблицыЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] = ПроцентИзменения;
								Иначе
									СтрокаТаблицыЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] = 0;
								КонецЕсли;
								
							Иначе
								СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] = СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки];
								СтрокаТаблицыЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] = 0;
							КонецЕсли;
							
							СтрокаТаблицыЦен["ИзмененаВручную" + ВидЦены.ИмяКолонки] = Ложь;
							
						Исключение
							
							Если ЗначениеЗаполнено(СтрокаТаблицыЦен.Характеристика) Тогда
								ТекстСообщения = НСтр("ru='Для номенклатуры ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не рассчитана цена по виду цен ""%ВидЦены%"" по причине: %ОписаниеОшибки%'");
							Иначе
								ТекстСообщения = НСтр("ru='Для номенклатуры ""%Номенклатура%"" не рассчитана цена по виду цен ""%ВидЦены%"" по причине: %ОписаниеОшибки%'");
							КонецЕсли;
							
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидЦены%"       , ВидЦены.Ссылка);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номенклатура%"  , СтрокаТаблицыЦен.Номенклатура);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Характеристика%", СтрокаТаблицыЦен.Характеристика);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								ТекстСообщения,
								Объект.Ссылка,
								"ДеревоЦен"
							);
							
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьДатуДокумента(ДатаДокумента, НомерВПределахДня)
	
	Возврат НачалоДня(ДатаДокумента) + НомерВПределахДня - 1;
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьНомерВПределахДня(ДатаДокумента, Ссылка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(УстановкаЦенНоменклатуры.Дата) КАК Дата
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
	|ГДЕ
	|	УстановкаЦенНоменклатуры.Ссылка <> &Ссылка
	|	И УстановкаЦенНоменклатуры.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаДокумента, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаДокумента, ДЕНЬ)");
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() И Выборка.Дата <> Null Тогда
		Возврат Выборка.Дата - НачалоДня(ДатаДокумента) + 2;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

// Рассчитывает цены в таблице цен
//
// Параметры:
//  ПараметрыРасчета - Структура
//
&НаСервере
Процедура РассчитатьЦены(ПараметрыРасчета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивВидовЦен = Новый Массив;
	Для Каждого ВидЦены Из ПараметрыРасчета.ВидыЦен Цикл
		МассивВидовЦен.Добавить(НайтиСтрокуВидаЦен(ВидЦены));
	КонецЦикла;
	
	Если Не ПараметрыРасчета.ТолькоВыделенныеСтроки Тогда
		
		ТаблицаНоменклатуры = СоздатьПустуюТаблицуНоменклатуры();
		ЗаполнитьТаблицуНоменклатурыПоДеревуЦен(ТаблицаНоменклатуры);
		
	Иначе
		
		ТаблицаНоменклатуры = СоздатьПустуюТаблицуНоменклатуры();
		
		Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
			
			СтрокаТаблицыЦен           = ДеревоЦен.НайтиПоИдентификатору(ВыделеннаяСтрока);
			НоваяСтрока                = ТаблицаНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура   = СтрокаТаблицыЦен.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаТаблицыЦен.Характеристика;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыРасчета.ЗагрузкаСтарыхЦен Тогда
		ЗагрузитьЗначенияБазовыхЦен(ТаблицаНоменклатуры, МассивВидовЦен, ПараметрыРасчета.ДатаСтарыхЦен, ПараметрыРасчета.ПроцентИзмененияЦены, ПараметрыРасчета.ПрименятьОкругление);
	КонецЕсли;
	
	Если ПараметрыРасчета.ОкруглениеРучныхЦен Тогда
		ПрименитьОкруглениеКРучнымЦенам(ТаблицаНоменклатуры, МассивВидовЦен);
	КонецЕсли;
	
	Если Не ПараметрыРасчета.ЗагрузкаСтарыхЦен И Не ПараметрыРасчета.ОкруглениеРучныхЦен Или РассчитыватьАвтоматически Тогда
		
		ЗагрузитьЗначенияБазовыхЦен(ТаблицаНоменклатуры, Неопределено);
		
		Если Не ПараметрыРасчета.ЗагрузкаСтарыхЦен И Не ПараметрыРасчета.ОкруглениеРучныхЦен Тогда 
			ВычислитьЦеныПоДаннымИБ(ТаблицаНоменклатуры, МассивВидовЦен, ПараметрыРасчета.ТолькоНезаполненные);
		КонецЕсли;
		
		РассчитатьВычисляемыеЦены(ТаблицаНоменклатуры, ?(Не ПараметрыРасчета.ЗагрузкаСтарыхЦен, МассивВидовЦен, Неопределено), ПараметрыРасчета.ТолькоНезаполненные);
		
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет расчет цен в строке по идентификатору
//
// Параметры:
//  ИдентификаторСтроки - Число
//  ЗагружатьЦеныИзИБ - Булево - Указывает на необходимость загрузки цен из информационной базы
//  ИзмененноеПоле - Строка - поле, в котором изменена цена
//
&НаСервере
Процедура РассчитатьЦеныПоИдентификаторуСтроки(ИдентификаторСтроки, ЗагружатьЦеныИзИБ = Ложь, ИзмененноеПоле = Неопределено)
	СтрокаТаблицыЦен = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ТаблицаНоменклатуры = СоздатьПустуюТаблицуНоменклатуры();
	ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), СтрокаТаблицыЦен, "Номенклатура, Характеристика");
	
	ЭлементыХарактеристики = СтрокаТаблицыЦен.ПолучитьЭлементы();
	
	Если ИспользоватьХарактеристикиНоменклатуры И ЭлементыХарактеристики.Количество() > 0 Тогда
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), ЭлементХарактеристика, "Номенклатура, Характеристика");
		КонецЦикла;
	КонецЕсли;
	
	Если РассчитыватьАвтоматически Тогда
		
		Если ЗагружатьЦеныИзИБ Тогда
			ЗагрузитьЗначенияБазовыхЦен(ТаблицаНоменклатуры, Неопределено);
			ВычислитьЦеныПоДаннымИБ(ТаблицаНоменклатуры);
		КонецЕсли;
		
		РассчитатьВычисляемыеЦены(ТаблицаНоменклатуры,,,ИзмененноеПоле);
		
	Иначе
		
		УстановитьПризнакРучногоИзмененияВычисляемыхЦен(ТаблицаНоменклатуры, ИзмененноеПоле);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует дерево значений с колонками Номенклатура, Характеристика, ИндексКартинки
//
// Возвращаемое значение:
// ДеревоЗначений
//
&НаСервереБезКонтекста
Функция СоздатьПустоеДеревоНоменклатуры()
	
	ДеревоЗначений = Новый ДеревоЗначений();
	
	ДеревоЗначений.Колонки.Добавить("Номенклатура",               Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДеревоЗначений.Колонки.Добавить("Характеристика",             Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ДеревоЗначений.Колонки.Добавить("ИндексКартинки",             Новый ОписаниеТипов("Число"));
	ДеревоЗначений.Колонки.Добавить("ЕдиницаИзмерения",           Новый ОписаниеТипов("СправочникСсылка.БазовыеЕдиницыИзмерения"));
	ДеревоЗначений.Колонки.Добавить("ЦеноваяГруппа",              Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"));
	ДеревоЗначений.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
	
	Возврат ДеревоЗначений;
	
КонецФункции

// Формирует таблицу значений с колонками Номенклатура, Характеристика
//
// Возвращаемое значение:
// ТаблицаЗначений
//
&НаСервереБезКонтекста
Функция СоздатьПустуюТаблицуНоменклатуры()
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	
	ТаблицаЗначений.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗначений.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Коприрует в таблицу значений номенклатуру с характеристикой из дерева цен
//
// Возвращаемое значение:
// ТаблицаЗначений
//
&НаСервере
Функция СоздатьТаблицуНоменклатурыПоДеревуЦен()
	
	ТаблицаНоменклатуры = СоздатьПустуюТаблицуНоменклатуры();
	
	ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
	
	Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементНоменклатура);
		
		ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
		
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			
			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементХарактеристика);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВидаЦеныПоИмениПоля(ВыбранныеЦены, Знач ИзмененноеПоле)
	
	СтрокаИзмененныйВидЦены = Неопределено;
	Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
		Если СтрокаВидЦены.ИмяКолонки = ИзмененноеПоле
			Или "Упаковка" + СтрокаВидЦены.ИмяКолонки = ИзмененноеПоле
			Или "СтараяЦена" + СтрокаВидЦены.ИмяКолонки = ИзмененноеПоле
			Или "ПроцентИзменения" + СтрокаВидЦены.ИмяКолонки = ИзмененноеПоле Тогда
			СтрокаИзмененныйВидЦены = СтрокаВидЦены;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаИзмененныйВидЦены;
	
КонецФункции

// Возвращает строку для пересчета цен из упаковки в упаковку
//
// Параметры:
// СтрокаТаблицыЦен       - ДанныеФормыЭлементКоллекции - строка таблицы
// ВидЦеныИсточник        - СправочникСсылка.ВидыЦен - вид цен, из которого необходимо пересчитать
// ВидЦеныНазначение      - СправочникСсылка.ВидыЦен - вид цен, в который необходимо пересчитать
// СоответствиеУпаковок   - Соответствие - таблица, в которой можно найти коээфициент упаковки
//
// Возвращаемое значение:
// Строка, выражение для пересчета цены из упаковки в упаковку
//
&НаСервере
Функция СтрокаПересчетаУпаковок(СтрокаТаблицыЦен, ВидЦеныИсточник, ВидЦеныНазначение, СоответствиеУпаковок)
	
	СтрокаПересчетаУпаковок = "";
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		
		// Определение коэффициента упаковки текущей цены
		УпаковкаЦеныИсточника = СтрокаТаблицыЦен["Упаковка" + ВидЦеныИсточник.ИмяКолонки];
		КоэффициентУпаковкиЦеныИсточника = 1;
		Если ЗначениеЗаполнено(УпаковкаЦеныИсточника) Тогда
			
			НайденноеЗначение = СоответствиеУпаковок.Получить(УпаковкаЦеныИсточника);
			Если НайденноеЗначение <> Неопределено Тогда
				КоэффициентУпаковкиЦеныИсточника = НайденноеЗначение;
			КонецЕсли;
			
		КонецЕсли;
		
		// Определение коэффициента упаковки влияющей цены
		УпаковкаЦеныНазначения = СтрокаТаблицыЦен["Упаковка" + ВидЦеныНазначение.ИмяКолонки];
		КоэффициентУпаковкиЦеныНазначения = 1;
		Если ЗначениеЗаполнено(УпаковкаЦеныНазначения) Тогда
			
			НайденноеЗначение = СоответствиеУпаковок.Получить(УпаковкаЦеныНазначения);
			Если НайденноеЗначение <> Неопределено Тогда
				КоэффициентУпаковкиЦеныНазначения = НайденноеЗначение;
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоэффициентУпаковкиЦеныИсточника <> КоэффициентУпаковкиЦеныНазначения Тогда
			СтрокаПересчетаУпаковок = "/" + Строка(Формат(КоэффициентУпаковкиЦеныИсточника, "ЧРД=.")) + "*" + Строка(Формат(КоэффициентУпаковкиЦеныНазначения, "ЧРД=."));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПересчетаУпаковок;
	
	
КонецФункции

// Осуществляет поиск строк в таблице по полям строки
//
// Параметры:
// Таблица - ДанныеФормыКоллекция - Таблица, в которой необходимо найти строки
// СтрокаКлюч - ДанныеФормыЭлементКоллеккции - Строка, по полям которой должен
// осуществляться поиск
//
// Возвращаемое значение:
// Массив найденных строк таблицы
//
&НаСервере
Функция ТаблицаСоответствия()
	
	ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = СоздатьПустуюТаблицуНоменклатуры();
	ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Колонки.Добавить("СтрокаДереваЦен");
	
	ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
	
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		
		Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
			
			НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			НоваяСтрокаТЗ.Номенклатура    = ЭлементНоменклатура.Номенклатура;
			НоваяСтрокаТЗ.Характеристика  = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			
			ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
			Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				
				НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
				НоваяСтрокаТЗ.Номенклатура    = ЭлементХарактеристика.Номенклатура;
				НоваяСтрокаТЗ.Характеристика  = ЭлементХарактеристика.Характеристика;
				НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементХарактеристика;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
			
			НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			НоваяСтрокаТЗ.Номенклатура    = ЭлементНоменклатура.Номенклатура;
			НоваяСтрокаТЗ.Характеристика  = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Индексы.Добавить("Номенклатура, Характеристика");
	
	Возврат ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров;
	
КонецФункции

// Устанавливает признак автозаполнения цен характеристик по номенклатуре
//
// Параметры:
// НовоеЗначение - Булево
//
&НаКлиенте
Процедура УстановитьАвтоматическиДобавлятьХарактеристикиНаКлиенте(НовоеЗначение)
	
	АвтоматическиДобавлятьХарактеристики = НовоеЗначение;
	Элементы.ДеревоЦенПереключательАвтоматическиДобавлятьХарактеристики.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Изменяет доступность элементов в соответствии с признаком согласованности документа
//
&НаСервере
Процедура УстановитьДоступностьЭлементовСервер()
	
	ТолькоПросмотрЭлементов = Объект.Согласован;
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("Ответственный");
	МассивЭлементов.Добавить("Номер");
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("ВыбранныеЦены");
	МассивЭлементов.Добавить("ДеревоЦен");
	
	Для Каждого ИмяЭлемента Из МассивЭлементов Цикл
		
		Элементы[ИмяЭлемента].ТолькоПросмотр = ТолькоПросмотрЭлементов;
		
	КонецЦикла;
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ДеревоЦенДобавитьТоварыПоЦеновойГруппе");
	МассивЭлементов.Добавить("ДеревоЦенДобавитьТоварыПоОтбору");
	МассивЭлементов.Добавить("ДеревоЦенДобавитьНоменклатуру");
	МассивЭлементов.Добавить("ДеревоЦенДобавитьХарактеристику");
	МассивЭлементов.Добавить("ДеревоЦенЗагрузитьСтарыеЦены");
	МассивЭлементов.Добавить("ДеревоЦенРассчитать");
	МассивЭлементов.Добавить("ДеревоЦенОкруглитьРучныеЦены");
	МассивЭлементов.Добавить("КонтекстноеМенюДеревоЦенДобавитьХарактеристику");
	МассивЭлементов.Добавить("КонтекстноеМенюДеревоЦенДобавитьНоменклатуру");
	МассивЭлементов.Добавить("ВыбранныеЦеныИсключитьВсеВидыЦен");
	МассивЭлементов.Добавить("ВыбранныеЦеныВыбратьВсеВидыЦен");
	МассивЭлементов.Добавить("ПерезаполнитьПоОснованию");
	
	Для Каждого ИмяЭлемента Из МассивЭлементов Цикл
		
		Элементы[ИмяЭлемента].Доступность = НЕ ТолькоПросмотрЭлементов;
		
	КонецЦикла;
	
	Элементы.Изменить.Доступность = ТолькоПросмотрЭлементов;
		
КонецПроцедуры

// Устанавливает признак автозаполнения цен характеристик по номенклатуре
//
// Параметры:
// НовоеЗначение - Булево
//
&НаКлиенте
Процедура УстановитьЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуреНаКлиенте(НовоеЗначение)
	
	ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре = НовоеЗначение;
	Элементы.ДеревоЦенПереключательЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак автоматического перерасчета цен
//
// Параметры:
// НовоеЗначение - Булево
//
&НаКлиенте
Процедура УстановитьРассчитыватьАвтоматическиНаКлиенте(НовоеЗначение)
	
	РассчитыватьАвтоматически = НовоеЗначение;
	Элементы.ДеревоЦенПереключательРассчитыватьАвтоматически.Пометка = НовоеЗначение;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер()
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоместитьВидыЦенВТабличнуюЧасть(Объект);
		ПоместитьЦеныВТабличнуюЧасть(Объект, Ложь);
	КонецЕсли;
	ЦенообразованиеПереопределяемый.ОбработкаЗаполненияУстановкиЦенНоменклатуры(Объект, Объект.ДокументОснование, Истина);
	// Таблица настроек СКД для видов цен с алгоритмом расчета цены "Заполнять по данным ИБ".
	ТаблицаНастройкиКомпоновкиДанных = ЗагрузитьТаблицуНастройкиКомпоновкиДанных();
	ИнициализироватьВыбранныеЦены(ТаблицаНастройкиКомпоновкиДанных);
	ЗаполнитьДокумент();
	
КонецПроцедуры

// Процедура заполняет товары из подбора
// Параметры: 
//  	ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение.АдресТоваровВХранилище) Тогда
		ДобавитьТоварыПоОтборуНаСервере(ВыбранноеЗначение.АдресТоваровВХранилище);
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// Работа с формой

// Устанавливает признак автоматического перерасчета цен
//
// Параметры:
// НовоеЗначение - Булево
//
&НаСервере
Процедура УстановитьРассчитыватьАвтоматически(НовоеЗначение)
	
	РассчитыватьАвтоматически = НовоеЗначение;
	Элементы.ДеревоЦенПереключательРассчитыватьАвтоматически.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак автозаполнения цен характеристик по номенклатуре
//
// Параметры:
// НовоеЗначение - Булево
//
&НаСервере
Процедура УстановитьЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре(НовоеЗначение)
	
	ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре = НовоеЗначение;
	Элементы.ДеревоЦенПереключательЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак фиксации колонок "Номенклатура" и "Характеристика" слева
//
// Параметры:
// НовоеЗначение - Булево
//
&НаСервере
Процедура ЗафиксироватьКолонкуНоменклатура(НовоеЗначение)
	
	ЗафиксироватьКолонкуНоменклатура = НовоеЗначение;
	
	Элементы.ДеревоЦенНоменклатура.ФиксацияВТаблице 	= ?(ЗафиксироватьКолонкуНоменклатура,ФиксацияВТаблице.Лево,ФиксацияВТаблице.Нет);
	Элементы.ДеревоЦенХарактеристика.ФиксацияВТаблице 	= ?(ЗафиксироватьКолонкуНоменклатура,ФиксацияВТаблице.Лево,ФиксацияВТаблице.Нет);
	
	Элементы.ДеревоЦенПереключательЗафиксироватьКолонкуНоменклатура.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак автозаполнения цен характеристик по номенклатуре
//
// Параметры:
// НовоеЗначение - Булево
//
&НаСервере
Процедура УстановитьАвтоматическиДобавлятьХарактеристики(НовоеЗначение)
	
	Если НовоеЗначение = Неопределено Тогда
		НовоеЗначение = Истина;
	КонецЕсли;
	
	АвтоматическиДобавлятьХарактеристики = НовоеЗначение;
	Элементы.ДеревоЦенПереключательАвтоматическиДобавлятьХарактеристики.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Заполняет флаг Выбрана в таблице выбранных цен
//
&НаСервере
Процедура ИнициализироватьВыбранныеЦены(ТаблицаНастройкиКомпоновкиДанных)
	
	ВыбранныеЦены.Очистить();
	
	Таблица = ЗагрузитьСправочникВидовЦен(ТаблицаНастройкиКомпоновкиДанных);
	Для Каждого СтрокаТЧ Из Таблица Цикл

		НоваяСтрока = ВыбранныеЦены.Добавить();
		
		НоваяСтрока.АлгоритмРасчетаЦены          = СтрокаТЧ.АлгоритмРасчетаЦены;
		НоваяСтрока.Идентификатор                = СтрокаТЧ.Идентификатор;
		НоваяСтрока.ИмяКолонки                   = СтрокаТЧ.ИмяКолонки;
		НоваяСтрока.Наименование                 = СтрокаТЧ.Наименование;
		НоваяСтрока.ОкруглятьВБольшуюСторону     = СтрокаТЧ.ОкруглятьВБольшуюСторону;
		НоваяСтрока.ПорогСрабатывания            = СтрокаТЧ.ПорогСрабатывания;
		НоваяСтрока.РеквизитДопУпорядочивания    = СтрокаТЧ.РеквизитДопУпорядочивания;
		НоваяСтрока.СпособЗаданияЦены            = СтрокаТЧ.СпособЗаданияЦены;
		НоваяСтрока.Ссылка                       = СтрокаТЧ.Ссылка;
		НоваяСтрока.Уровень                      = СтрокаТЧ.Уровень;
		НоваяСтрока.ЗапрещенныйВидЦены           = СтрокаТЧ.ЗапрещенныйВидЦены;
		
		// Служебные поля для работы с настройками СКД
		НоваяСтрока.АдресСхемыКомпоновкиДанных   = СтрокаТЧ.АдресСхемыКомпоновкиДанных;
		НоваяСтрока.НайденыОбязательныеПараметры = СтрокаТЧ.НайденыОбязательныеПараметры;
		НоваяСтрока.Параметры                    = СтрокаТЧ.Параметры;
		
		НоваяСтрока.ПорогиСрабатывания.Загрузить(СтрокаТЧ.ПорогиСрабатывания);
		НоваяСтрока.ПравилаОкругленияЦены.Загрузить(СтрокаТЧ.ПравилаОкругленияЦены);
		НоваяСтрока.ЦеновыеГруппы.Загрузить(СтрокаТЧ.ЦеновыеГруппы);
		НоваяСтрока.ВлияющиеВидыЦен.Загрузить(СтрокаТЧ.ВлияющиеВидыЦен);
		НоваяСтрока.ВлияющиеЦены.ЗагрузитьЗначения(СтрокаТЧ.ВлияющиеЦены.ВыгрузитьЗначения());
		НоваяСтрока.ЗависимыеЦены.ЗагрузитьЗначения(СтрокаТЧ.ЗависимыеЦены.ВыгрузитьЗначения());
		
	КонецЦикла;
	ВыбранныеЦены.Сортировать("Уровень, РеквизитДопУпорядочивания");
	
	Для Каждого СтрокаТЧ Из Объект.ВидыЦен Цикл
		СтрокаВидаЦен = НайтиСтрокуВидаЦен(СтрокаТЧ.ВидЦены);
		СтрокаВидаЦен.Выбрана = Истина;
	КонецЦикла;
	
	// Заполнить флаги "Влияет" и "Зависит"
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		ВидЦены.Зависит = Ложь;
		ВидЦены.Влияет  = Ложь;
	КонецЦикла;
	
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		
		Если ВидЦены.Выбрана Тогда
			
			Для Каждого ЗависимаяЦена Из ВидЦены.ЗависимыеЦены Цикл
				СтрокаЗависимойЦены         = НайтиСтрокуВидаЦен(ЗависимаяЦена.Значение);
				СтрокаЗависимойЦены.Зависит = Не СтрокаЗависимойЦены.Выбрана;
			КонецЦикла;
			
			Для Каждого ВлияющаяЦена Из ВидЦены.ВлияющиеЦены Цикл
				СтрокаВыбраннойЦены        = НайтиСтрокуВидаЦен(ВлияющаяЦена.Значение);
				СтрокаВыбраннойЦены.Влияет = Не СтрокаВыбраннойЦены.Выбрана;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьВсеЗависимыеЦены()
	
	Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
		ТекСтрока.Зависит  = Ложь;
	КонецЦикла;
	
	Заполнять = Истина;
	Пока Заполнять Цикл
		
		Заполнять = Ложь;
		Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
			
			Если ТекСтрока.Выбрана Тогда 
				
				Для Каждого ЗависимаяЦена Из ТекСтрока.ЗависимыеЦены Цикл
					СтрокаЗависимойЦены = НайтиСтрокуВидаЦен(ЗависимаяЦена.Значение);
					Если Не СтрокаЗависимойЦены.Выбрана И Не СтрокаЗависимойЦены.ЗапрещенныйВидЦены Тогда
						СтрокаЗависимойЦены.Выбрана = Истина;
						ВыбранныеЦеныИзменены = Истина;
						Заполнять = Истина;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьВсеВлияющиеЦены()
	
	Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
		ТекСтрока.Влияет  = Ложь;
	КонецЦикла;
	
	Заполнять = Истина;
	Пока Заполнять Цикл
		
		Заполнять = Ложь;
		Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
			
			Если ТекСтрока.Выбрана Тогда 
				
				Для Каждого ВлияющаяЦена Из ТекСтрока.ВлияющиеЦены Цикл
					СтрокаВыбраннойЦены = НайтиСтрокуВидаЦен(ВлияющаяЦена.Значение);
					Если Не СтрокаВыбраннойЦены.Выбрана И Не СтрокаВыбраннойЦены.ЗапрещенныйВидЦены Тогда
						СтрокаВыбраннойЦены.Выбрана = Истина;
						ВыбранныеЦеныИзменены = Истина;
						Заполнять = Истина;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗависимыеОтВидаЦеныВидыЦен(СтрокаВидЦены)
	
	ЗависимыеВидыЦен = Новый Массив;
	Для Каждого ЗависимаяЦена Из СтрокаВидЦены.ЗависимыеЦены Цикл
		СтрокаЗависимойЦены = НайтиСтрокуВидаЦен(ЗависимаяЦена.Значение);
		Если СтрокаЗависимойЦены.Выбрана Тогда
			ЗависимыеВидыЦен.Добавить(СтрокаЗависимойЦены);
		КонецЕсли;
	КонецЦикла;
	
	Заполнять = Истина;
	Пока Заполнять Цикл
		
		Заполнять = Ложь;
		Для Каждого ТекСтрока Из ЗависимыеВидыЦен Цикл
			
			Для Каждого ЗависимаяЦена Из ТекСтрока.ЗависимыеЦены Цикл
				СтрокаЗависимойЦены = НайтиСтрокуВидаЦен(ЗависимаяЦена.Значение);
				Если СтрокаЗависимойЦены.Выбрана И ЗависимыеВидыЦен.Найти(СтрокаЗависимойЦены) = Неопределено Тогда
					ЗависимыеВидыЦен.Добавить(СтрокаЗависимойЦены);
					Заполнять = Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЗависимыеВидыЦен;
	
КонецФункции

// Осуществляет поиск влияющих и зависящих видов цен в таблице видов цен
//
// Параметры:
// ТаблицаВидовЦен - ТаблицаЗначений - таблица, в которой осуществляется поиск
// ТекущаяЦена - Ссылка на вид цен, для которого осуществляется поиск
// Стек - Массив - Массив для кэширования 
//
// Возвращаемое значение:
// Число
//
&НаСервере
Функция НайтиЗависящиеИВлияющиеЦены(ТаблицаВидовЦен, ТекущаяЦена, Стек = Неопределено)
	
	СтрокаСправочника = ТаблицаВидовЦен.Найти(ТекущаяЦена, "Ссылка");
	Уровень           = 0;
	
	Для Каждого БазоваяЦена Из СтрокаСправочника.ВлияющиеВидыЦен Цикл
		
		СтрокаБазовойЦены  = ТаблицаВидовЦен.Найти(БазоваяЦена.ВлияющийВидЦен, "Ссылка");
		УровеньБазовойЦены = СтрокаБазовойЦены.Уровень;
		
		Если Стек = Неопределено Тогда
			Стек = Новый Массив();
		КонецЕсли;
		
		Стек.Добавить(СтрокаСправочника);
			УровеньБазовойЦены = НайтиЗависящиеИВлияющиеЦены(ТаблицаВидовЦен, БазоваяЦена.ВлияющийВидЦен, Стек);
		
		Если УровеньБазовойЦены > Уровень Тогда
			Уровень = УровеньБазовойЦены;
		КонецЕсли;
		
		Для Каждого ЭлементСтека Из Стек Цикл
			
			Если ЭлементСтека.ВлияющиеЦены.НайтиПоЗначению(СтрокаБазовойЦены.Ссылка) = Неопределено Тогда
				ЭлементСписка = ЭлементСтека.ВлияющиеЦены.Добавить(СтрокаБазовойЦены.Ссылка);
				Если СтрокаБазовойЦены.ЗапрещенныйВидЦены Тогда
					ЭлементСписка.Представление = НСтр("ru = '<объект запрещен к просмотру>'");
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаБазовойЦены.ЗависимыеЦены.НайтиПоЗначению(ЭлементСтека.Ссылка) = Неопределено Тогда
				ЭлементСписка = СтрокаБазовойЦены.ЗависимыеЦены.Добавить(ЭлементСтека.Ссылка);
				
				СтрокаСтека = ТаблицаВидовЦен.Найти(ЭлементСтека.Ссылка, "Ссылка");
				Если НЕ СтрокаСтека = Неопределено И СтрокаСтека.ЗапрещенныйВидЦены Тогда
					ЭлементСписка.Представление = НСтр("ru = '<объект запрещен к просмотру>'");
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Стек.Удалить(Стек.Количество() - 1);
		
	КонецЦикла;
	
	Уровень                   = Уровень + 1;
	СтрокаСправочника.Уровень = Уровень;
	
	Возврат Уровень;
	
КонецФункции

&НаСервере
Процедура ОбновитьСтарыеЦеныНоменклатуры()
	
	Если ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = Неопределено Тогда
		ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = ТаблицаСоответствия();
	КонецЕсли;
	
	// Загрузка старых цен и процента изменения
	ТаблицаЗначений = ПустаяТаблицаТовары();
	Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
		
		Если СтрокаВидЦены.Выбрана ИЛИ СтрокаВидЦены.Влияет Тогда
			
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			ИмяКолонкиУпаковка = "Упаковка" + СтрокаВидЦены.ИмяКолонки;
			
			Для Каждого СтрокаТЗ Из ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров Цикл
				
				СтрокаДереваЦен = СтрокаТЗ.СтрокаДереваЦен;
				
				НоваяСтрока = ТаблицаЗначений.Добавить();
				НоваяСтрока.Номенклатура   = СтрокаДереваЦен.Номенклатура;
				НоваяСтрока.Характеристика = СтрокаДереваЦен.Характеристика;
				НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
				НоваяСтрока.Цена           = СтрокаДереваЦен[ИмяКолонки];
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					НоваяСтрока.Упаковка   = СтрокаДереваЦен[ИмяКолонкиУпаковка];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагрузитьСтарыеЦеныНоменклатуры(ТаблицаЗначений);
	
КонецПроцедуры

&НаСервере
// Формирует уникальное имя колонки таблицы
//
Функция ИмяКолонкиПоВидуЦены(ВидЦены)
	
	Значение = СоответствиеВидовЦенИменамКолонокТаблицыТоваров.Получить(ВидЦены);
	Если Значение = Неопределено Тогда
		Значение = "ВидЦены" + СтрЗаменить(ВидЦены.УникальныйИдентификатор(), "-", "");
		СоответствиеВидовЦенИменамКолонокТаблицыТоваров.Вставить(ВидЦены, Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Работа с СКД

&НаСервереБезКонтекста
Функция ПроверитьЗаполненностьОбязательныхПараметровСхемыКомпоновкиДанных(ВыбранныеЦены, АдресХранилищаНастройкиКомпоновкиДанных, АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен)
	
	Ошибки = Новый Массив;
	
	РазрешенныеИмена = ИменаРазрешенныхПараметров();
	
	ПараметрыСхемКомпоновкиДанныхВидовЦен = ПолучитьИзВременногоХранилища(АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен);
	ТаблицаНастройкиКомпоновкиДанных      = ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновкиДанных);
	
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Найти(ВидЦены, "ВидЦены");
		Если НайденнаяСтрока = Неопределено Тогда
			Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполены обязательные параметры для вида цены ""%1""'"), Строка(ВидЦены));
			Ошибки.Добавить(Новый Структура("ВидЦены, Описание", ВидЦены, Описание));
		Иначе
			
			НайденныеСтроки = ПараметрыСхемКомпоновкиДанныхВидовЦен.НайтиСтроки(Новый Структура("ВидЦены", ВидЦены));
			Для Каждого ПараметрДанных Из НайденныеСтроки Цикл
				Если Не ЗначениеЗаполнено(ПараметрДанных.Значение) И РазрешенныеИмена.Найти(ПараметрДанных.Имя) = Неопределено Тогда
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполено значение параметра ""%1"" для вида цены ""%2""'"), ПараметрДанных.Заголовок, Строка(ВидЦены));
					Ошибки.Добавить(Новый Структура("ВидЦены, Описание", ВидЦены, Описание));
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ошибки;
	
КонецФункции

&НаСервере
Функция ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанныхНаСервере(СообщатьПользователюОбОшибках = Истина)
	
	ВидыЦен = Новый Массив;
	Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
		Если СтрокаВидЦены.Выбрана И СтрокаВидЦены.НайденыОбязательныеПараметры Тогда
			ВидыЦен.Добавить(СтрокаВидЦены.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Ошибки = ПроверитьЗаполненностьОбязательныхПараметровСхемыКомпоновкиДанных(ВидыЦен, АдресХранилищаНастройкиКомпоновкиДанных, АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен);
	Если СообщатьПользователюОбОшибках Тогда
		Для Каждого СтруктураОшибки Из Ошибки Цикл
			СтрокаВидЦены = НайтиСтрокуВидаЦен(СтруктураОшибки.ВидЦены);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураОшибки.Описание, Объект.Ссылка, "ВыбранныеЦены[" + ВыбранныеЦены.Индекс(СтрокаВидЦены) + "].Параметры");
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ошибки.Количество() = 0;
	
КонецФункции

// Добавляет колонку на форму
//
// Параметры:
// Имя - Строка - имя колонки на форме
// Заголовок - Строка - заголовок колонки на форме
// ОбработчикПриИзменении - Строка - путь к обработчику поля ПриИзменении()
// ОбработчикНачалоВыбора - Строка - путь к обработчику поля НачалоВыбора()
// ЦветФона - Цвет - цвет фона поля 
// ЦветФонаЗаголовка - Цвет - цвет фона заголовка поля
//
// Возвращаемое значение:
// ПолеФормы
//
&НаСервере
Функция ДобавитьПолеФормы(Имя,
						 Заголовок = Неопределено,
						 ОбработчикПриИзменении = "",
						 ОбработчикНачалоВыбора = "",
						 ШиринаПоля,
						 ЦветФона = Неопределено,
						 ЦветФонаЗаголовка = Неопределено,
						 Родитель = Неопределено,
						 КартинкаШапки = Неопределено,
						 ПутьКДанным = Неопределено,
						 ТолькоПросмотрПоля = Ложь,
						 СвязиПараметровВыбора = Неопределено)
	
	НовоеПоле                     = Элементы.Добавить("ДеревоЦен" + Имя, Тип("ПолеФормы"), ?(Родитель = Неопределено, Элементы.ДеревоЦен, Родитель));
	НовоеПоле.ПутьКДанным         = ?(ЗначениеЗаполнено(ПутьКДанным), ПутьКДанным, "ДеревоЦен." + Имя);
	НовоеПоле.Заголовок           = ?(ЗначениеЗаполнено(Заголовок), Заголовок, Имя);
	НовоеПоле.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	НовоеПоле.Вид                 = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ТолькоПросмотр      = ТолькоПросмотрПоля;
	НовоеПоле.Ширина              = ШиринаПоля;
	
	Если СвязиПараметровВыбора <> Неопределено Тогда
		НовоеПоле.СвязиПараметровВыбора = СвязиПараметровВыбора;
	КонецЕсли;
	
	Если ЦветФонаЗаголовка <> Неопределено Тогда
		НовоеПоле.ЦветФонаЗаголовка = ЦветФонаЗаголовка;
	КонецЕсли;
	
	Если ЦветФона <> Неопределено Тогда
		НовоеПоле.ЦветФона = ЦветФона;
	КонецЕсли;
		
	Если КартинкаШапки <> Неопределено Тогда
		НовоеПоле.КартинкаШапки = КартинкаШапки;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОбработчикПриИзменении) Тогда
		НовоеПоле.УстановитьДействие("ПриИзменении", ОбработчикПриИзменении);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбработчикНачалоВыбора) Тогда
		НовоеПоле.УстановитьДействие("НачалоВыбора", ОбработчикНачалоВыбора);
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции

// Добавляет колонку на форму
//
// Параметры:
// Имя - Строка - имя колонки на форме
// Заголовок - Строка - заголовок колонки на форме
// ОбработчикПриИзменении - Строка - путь к обработчику поля ПриИзменении()
// ОбработчикНачалоВыбора - Строка - путь к обработчику поля НачалоВыбора()
// ЦветФона - Цвет - цвет фона поля 
// ЦветФонаЗаголовка - Цвет - цвет фона заголовка поля
//
// Возвращаемое значение:
// ПолеФормы
//
&НаСервере
Функция ДобавитьГруппуФормы(Имя, Заголовок, ОтображатьВШапке, КартинкаШапки, ГруппировкаКолонок, Родитель = Неопределено)
	
	НоваяГруппа                  = Элементы.Добавить("ДеревоЦен" + Имя, Тип("ГруппаФормы"), ?(Родитель = Неопределено, Элементы.ДеревоЦен, Родитель));
	НоваяГруппа.Заголовок        = ?(ЗначениеЗаполнено(Заголовок), Заголовок, Имя);
	НоваяГруппа.Вид              = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппа.Группировка      = ГруппировкаКолонок;
	НоваяГруппа.ОтображатьВШапке = ОтображатьВШапке;
	
	Если ОтображатьВШапке И КартинкаШапки <> Неопределено Тогда
		НоваяГруппа.КартинкаШапки = КартинкаШапки;
	КонецЕсли;
	
	Возврат НоваяГруппа;
	
КонецФункции

// Добавляет поле набора данных схемы компоновки данных
//
// Параметры:
// НаборДанных - НаборДанныхОбъектСхемыКомпоновкиДанных
// ИмяПоля - Строка
// ТипЗначения - Произвольный
//
&НаСервере
Процедура ДобавитьПолеНабораДанныхСКД(НаборДанных, ИмяПоля, ТипЗначения)
	
	ПолеНабораДанных             = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораДанных.Поле        = ИмяПоля;
	ПолеНабораДанных.ПутьКДанным = ИмяПоля;
	ПолеНабораДанных.ТипЗначения = Новый ОписаниеТипов(ТипЗначения);
	
КонецПроцедуры

// Добавляет связь наборов данных схемы компоновки данных
//
// Параметры:
// СКД - СхемаКомпоновкиДанных
// НаборДанныхНоменклатура - НаборДанныхОбъектСхемыКомпоновкиДанных
// РабочийНаборДанных - НаборДанныхОбъектСхемыКомпоновкиДанных
// Поле - Строка
//
&НаСервере
Процедура ДобавитьСвязьНаборовДанныхСКД(СКД, НаборДанныхНоменклатура, РабочийНаборДанных, Поле)
	
	Связь                     = СКД.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = НаборДанныхНоменклатура.Имя;
	Связь.НаборДанныхПриемник = РабочийНаборДанных.Имя;
	Связь.ВыражениеИсточник   = Поле;
	Связь.ВыражениеПриемник   = Поле;
	Связь.Обязательная        = Истина;
	
КонецПроцедуры

// Добавляет выбранное поле схемы компоновки данных
//
// Параметры:
// ГруппировкаКомпоновкиДанных - ГруппировкаКомпоновкиДанных
// Поле - Строка
//
&НаСервере
Процедура ДобавитьВыбранноеПолеСКД(ГруппировкаКомпоновкиДанных, Поле)
	
	ВыбранноеПоле               = ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных(Поле);
	ВыбранноеПоле.Использование = Истина;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// РАБОТА С EXCEL

&НаКлиенте
Функция ЗагрузитьИзExcelНаКлиенте(ПрисоединенныйФайл)
	
	Попытка
		COMОбъект = Новый COMОбъект("Excel.Application");
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось загрузить цены из файла Excel. Убедитесь, что на сервере установлена программа Microsoft Excel. Подробности:'")
		                    + " " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

ДобавитьХарактеристику = Ложь;
СоответствиеВидовЦенИменамКолонокТаблицыТоваров = Новый Соответствие;

