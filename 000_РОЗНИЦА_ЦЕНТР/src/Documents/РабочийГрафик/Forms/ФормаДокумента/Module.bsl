
&НаКлиенте
Процедура МесяцРегистрацииСтрокойПриИзменении(Элемент)
	Объект.ДанныеОВремени.Очистить();
	Объект.ПоставкаТовара.Очистить();
	Объект.СостоянияСотрудников.Очистить();

	
	ЗаполнитьПланыПродаж();
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой", Модифицированность);
	
	ПериодРегистрацииПриИзменении();
	SPHФакт = ПолучитьФактSPH();
	SPHПлан = ПолучитьПланSPH();
	
	ЭтаФорма.Элементы.ДанныеОВремениНомерСтроки.Заголовок ="Факт" + SPHФакт  + " /План " + SPHПлан;
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	Оповещение = Новый ОписаниеОповещения("ПериодРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой", , Оповещение);

КонецПроцедуры

&НаСервере
Процедура ПериодРегистрацииПриИзменении()
	УчетРабочегоВремениРасширенныйФормы.ТабельПериодРегистрацииПриИзменении(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
		
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой", Направление, Модифицированность);
	
	ПериодРегистрацииПриИзменении();
	

КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если не ЗначениеЗаполнено(Объект.ПериодРегистрации) тогда 
		
		Объект.ПериодРегистрации = ТекущаяДата() + 15*24*60*60;	
	КонецЕсли;
	Если не ЗначениеЗаполнено(Объект.ПериодРегистрации) тогда 
		
		Объект.ПериодРегистрации = ТекущаяДата() + 15*24*60*60;	
	КонецЕсли;
	Если не ЗначениеЗаполнено(Объект.ПериодВводаДанныхОВремени) тогда 
		Если НачалоМесяца(Объект.ПериодРегистрации) =  НачалоМесяца(ТекущаяДата()) тогда 
			Объект.ПериодВводаДанныхОВремени = ПредопределенноеЗначение("Перечисление.ПериодыВводаДанныхОВремени.ВтораяПоловинаТекущегоМесяца");	
		Иначе
			Объект.ПериодВводаДанныхОВремени = ПредопределенноеЗначение("Перечисление.ПериодыВводаДанныхОВремени.ПерваяПоловинаТекущегоМесяца");	
		КонецЕсли;
	КонецЕсли;
	УчетРабочегоВремениРасширенныйФормы.ТабельПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	
	Если не ЗначениеЗаполнено(Объект.Магазин) тогда 
		Объект.Магазин = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин;	
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(Объект.Организация) тогда 
		//Объект.Организация = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин,"Организация");	
		Объект.Организация = ПолучитьОрганизацию(ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);	
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(Объект.Ответственный) тогда 
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;	
	КонецЕсли;
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой");
	УчетРабочегоВремениРасширенныйФормы.ТабельПериодРегистрацииПриИзменении(ЭтаФорма);
	ПроверитьПоставку();	
	ПроверитьОтсутвиеСотрудникаПриОткритии();
КонецПроцедуры


&НаСервере()
Функция ПолучитьОрганизацию(Магазин)
	ОрганизацИЯ = Справочники.Организации.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	ОрганизацииПодразделенийСрезПоследних.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.ОрганизацииПодразделений.СрезПоследних(&ТекДата, Владелец = &Владелец) КАК ОрганизацииПодразделенийСрезПоследних";
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Владелец", Магазин);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОрганизацИЯ = ВыборкаДетальныеЗаписи.Организация;	
	КонецЦикла;
	Возврат Организация;
КонецФункции

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПериодРегистрацииПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодВводаДанныхОВремениПриИзменении(Элемент)
	
	ПериодВводаДанныхОВремениПриИзмененииНаСервере();
	ЗаполнитьПланыПродаж();
	SPHФакт = ПолучитьФактSPH();
	SPHПлан = ПолучитьПланSPH();
	
	ЭтаФорма.Элементы.ДанныеОВремениНомерСтроки.Заголовок ="Факт " + SPHФакт  + " /План " + SPHПлан;

КонецПроцедуры
	
&НаСервере
Процедура ПериодВводаДанныхОВремениПриИзмененииНаСервере()
	//Если Объект.ДанныеОВремени.Количество() <> 0 или  Объект.ПоставкаТовара.Количество()<> 0 ИЛИ Объект.ДанныеОВремени.Количество() <>0 тогда 
	УчетРабочегоВремениРасширенныйФормы.ТабельПериодРегистрацииПриИзменении(ЭтаФорма);
КонецПроцедуры
&НаСервере
Процедура ОчиститьОформление()
ЭтаФорма.УсловноеОформление.Элементы.Очистить();
КонецПроцедуры


&НаСервере
Процедура ПроверитьОтсутвиеСотрудникаПриОткритии()
	Для каждого строка из Объект.ДанныеОВремени цикл 
		ПроверитьОтсутвиеСотрудника(строка.Сотрудник);	
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Объект.ДанныеОВремени.Очистить();
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ ПЕРВЫЕ 1
	//	|	ФизическиеЛица.Ссылка КАК Ссылка,
	//	|	РаботникиОрганизаций.Должность КАК Должность,
	//	|	РаботникиОрганизаций.ПериодНачала КАК ПериодНачала
	//	|ИЗ
	//	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	//	|		ПО ФизическиеЛица.Ссылка = РаботникиОрганизаций.Сотрудник
	//	|ГДЕ
	//	|	ФизическиеЛица.Магазин = &Магазин
	//	|	И ФизическиеЛица.ПометкаУдаления = ЛОЖЬ
	//	|	И ФизическиеЛица.Уволен = ЛОЖЬ
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	ПериодНачала УБЫВ";
	//
	//Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(СостояниеРаботниковОрганизаций.Период) КАК Период,
		|	СостояниеРаботниковОрганизаций.Сотрудник КАК Сотрудник,
		|	СостояниеРаботниковОрганизаций.Организация КАК Организация
		|ПОМЕСТИТЬ ТабСостояниеСрез
		|ИЗ
		|	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
		|ГДЕ
		|	СостояниеРаботниковОрганизаций.Организация = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	СостояниеРаботниковОрганизаций.Организация,
		|	СостояниеРаботниковОрганизаций.Сотрудник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Сотрудник,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабСостояниеСрез.Сотрудник КАК Сотрудник,
		|	ТабСостояниеСрез.Организация КАК Организация,
		|	СостояниеРаботниковОрганизаций.Состояние КАК Состояние,
		|	СостояниеРаботниковОрганизаций.СостояниеЗавершения КАК СостояниеЗавершения,
		|	СостояниеРаботниковОрганизаций.ПериодЗавершения КАК ПериодЗавершения
		|ПОМЕСТИТЬ ТабСостояние
		|ИЗ
		|	ТабСостояниеСрез КАК ТабСостояниеСрез
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
		|		ПО ТабСостояниеСрез.Сотрудник = СостояниеРаботниковОрганизаций.Сотрудник
		|			И ТабСостояниеСрез.Организация = СостояниеРаботниковОрганизаций.Организация
		|			И ТабСостояниеСрез.Период = СостояниеРаботниковОрганизаций.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ФизЛицо КАК ФизЛицо,
		|	РаботникиОрганизаций.Должность КАК Должность
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаботникиОрганизаций.Сотрудник КАК ФизЛицо,
		|		МАКСИМУМ(РаботникиОрганизаций.ПериодНачала) КАК ПериодНачала
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|	ГДЕ
		|		(РаботникиОрганизаций.ВидЗанятости = &ВидЗанятости
		|				ИЛИ РаботникиОрганизаций.ВидЗанятости = &ВидЗанятостиСовмещение)
		|		И РаботникиОрганизаций.Магазин = &Магазин
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиОрганизаций.Сотрудник) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО ВложенныйЗапрос.ФизЛицо = РаботникиОрганизаций.Сотрудник
		|			И ВложенныйЗапрос.ПериодНачала = РаботникиОрганизаций.ПериодНачала
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабСостояние КАК ТабСостояние
		|		ПО ВложенныйЗапрос.ФизЛицо = ТабСостояние.Сотрудник
		|ГДЕ
		|	(РаботникиОрганизаций.ВидЗанятости = &ВидЗанятости
		|			ИЛИ РаботникиОрганизаций.ВидЗанятости = &ВидЗанятостиСовмещение)
		|	И НЕ РаботникиОрганизаций.ЗанимаемыхСтавок = 0
		|	И РаботникиОрганизаций.Магазин = &Магазин
		|	И ВложенныйЗапрос.ФизЛицо.Уволен = ЛОЖЬ
		|	И ВложенныйЗапрос.ФизЛицо.Сотрудник = ИСТИНА
		|	И (ТабСостояние.Состояние ЕСТЬ NULL
		|			ИЛИ ТабСостояние.Состояние = &Состояние
		|			ИЛИ ТабСостояние.Состояние = &СостояниеПриостановкаДоговора
		|			ИЛИ ТабСостояние.Состояние = &СостояниеМобилизован
		|			ИЛИ ТабСостояние.СостояниеЗавершения = &Состояние
		|				И ТабСостояние.ПериодЗавершения < &ДатаОкончанияПериода
		|			ИЛИ ТабСостояние.СостояниеЗавершения = &СостояниеПриостановкаДоговора
		|				И ТабСостояние.ПериодЗавершения < &ДатаОкончанияПериода
		|			ИЛИ ТабСостояние.СостояниеЗавершения = &СостояниеМобилизован
		|				И ТабСостояние.ПериодЗавершения < &ДатаОкончанияПериода)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ФизЛицо,
		|	РаботникиОрганизаций.Должность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТабСостояниеСрез
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТабСостояние";
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	Запрос.УстановитьПараметр("ВидЗанятости", Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
	Запрос.УстановитьПараметр("ВидЗанятостиСовмещение", Перечисления.ВидыЗанятости.Совместительство);
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияРаботникаОрганизации.Работает);
	Запрос.УстановитьПараметр("СостояниеПриостановкаДоговора", Перечисления.СостоянияРаботникаОрганизации.ПриостановкаТрудовогоДоговора);	
	Запрос.УстановитьПараметр("СостояниеМобилизован", Перечисления.СостоянияРаботникаОрганизации.Мобилизован);		
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДатаДок", Объект.Дата);
	Запрос.УстановитьПараметр("ДатаОкончанияПериода", Объект.ДатаОкончанияПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Стр = Объект.ДанныеОВремени.Добавить();
		Стр.Сотрудник =  ВыборкаДетальныеЗаписи.ФизЛицо;
		Стр.Должность =  ВыборкаДетальныеЗаписи.Должность;
	КонецЦикла;
	



КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Ответ = Вопрос(НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет); 
	Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаполнитьНаСервере();
	КонецЕсли;
КонецПроцедуры

//&НаСервере
//Функция ПроверитьSPH()
//		Отказ = Ложь;
//	
//		НомерДняНачалаПериода = День(Объект.ДатаНачалаПериода);
//		НомерДняОкончанияПериода = День(Объект.ДатаОкончанияПериода);
//		Для НомерДня = НомерДняНачалаПериода По НомерДняОкончанияПериода Цикл
//			Коэфициент = ПолучитьКоэф(НачалоМесяца(Объект.ДатаНачалаПериода)+ (НомерДня-1)*24*60*60);
//			SPHплан = 0;
//			Для НомерЧаса = 8 По 23 Цикл
//				Время = НачалоМесяца(Объект.ДатаНачалаПериода)+ (НомерДня-1)*24*60*60  + НомерЧаса*60*60; 
//				SPH = ПолучитьSPH(Время,Объект.Организация,Объект.Магазин);
//				SPHплан =SPHплан + SPH;
//				SPHфакт = 0;
//				Для Каждого Строка из Объект.ДанныеОВремени цикл
//					Если  Час(Строка["ВремяУхода" + НомерДня]) >= НомерЧаса и Час(Строка["ВремяПрихода" + НомерДня]) <= НомерЧаса тогда
//					SPHфакт = SPHфакт +1;	
//					КонецЕсли;
//				КонецЦикла;
//				Если SPHфакт > SPH тогда 
//					Элементы["ДанныеОВремениВремяПрихода" + НомерДня].ТекстПодвала = "SPМH превышен!";
//					Отказ = Истина;
//				КонецЕсли;
//		    КонецЦикла;
// 	    КонецЦикла;
//	  	Возврат Отказ;
//КонецФункции

//&НаСервере
//Функция ПроверитьSPH()
//		Отказ = Ложь;
//	
//		НомерДняНачалаПериода = День(Объект.ДатаНачалаПериода);
//		НомерДняОкончанияПериода = День(Объект.ДатаОкончанияПериода);
//		Для НомерДня = НомерДняНачалаПериода По НомерДняОкончанияПериода Цикл
//			Коэфициент = ПолучитьКоэф(НачалоМесяца(Объект.ДатаНачалаПериода)+ (НомерДня-1)*24*60*60);
//			SPHплан = 0;
//			Для НомерЧаса = 8 По 23 Цикл
//				Время = НачалоМесяца(Объект.ДатаНачалаПериода)+ (НомерДня-1)*24*60*60  + НомерЧаса*60*60; 
//				SPH = ПолучитьSPH(Время,Объект.Организация,Объект.Магазин);
//				SPHплан =SPHплан + SPH;
//				SPHфакт = 0;
//				Для Каждого Строка из Объект.ДанныеОВремени цикл
//					Если  Час(Строка["ВремяУхода" + НомерДня]) >= НомерЧаса и Час(Строка["ВремяПрихода" + НомерДня]) <= НомерЧаса тогда
//					SPHфакт = SPHфакт +1;	
//					КонецЕсли;
//				КонецЦикла;
//				Если SPHфакт > SPH тогда 
//					Элементы["ДанныеОВремениВремяПрихода" + НомерДня].ТекстПодвала = "SPМH превышен!";
//					Отказ = Истина;
//				КонецЕсли;
//		    КонецЦикла;
// 	    КонецЦикла;
//	  	Возврат Отказ;
//КонецФункции

&НаСервере
Функция ПроверитьSPH()
		Отказ = Ложь;
		Коэфициент = ПолучитьКоэф(Объект.ДатаОкончанияПериода);
	    ИтогSPHЧ = 0;
		НомерДняНачалаПериода = День(Объект.ДатаНачалаПериода);
		НомерДняОкончанияПериода = День(Объект.ДатаОкончанияПериода);
		Для НомерДня = НомерДняНачалаПериода По НомерДняОкончанияПериода Цикл
			ПланПродаж = ПолучитьПланSPMH(НомерДня);
			Для каждого Строка из Объект.ДанныеОВремени цикл
				SPHЧ =  Час(Строка["ВремяУхода" + НомерДня]) - Час(Строка["ВремяПрихода" + НомерДня]);
				Если SPHЧ > 8 тогда 
					SPHЧ = SPHЧ - 1;	
				КонецЕсли;
				ИтогSPHЧ = ИтогSPHЧ + SPHЧ;
			КонецЦикла;
			Если ИтогSPHЧ > 0 тогда 
				ФактИтогSPHЧ = ПланПродаж/ИтогSPHЧ;	
			КонецЕсли;
			SPHплан = 0;
			Элементы["ДанныеОВремениВремяПрихода" + НомерДня].ТекстПодвала = Строка(Коэфициент) + "/"+Формат(ФактИтогSPHЧ,"ЧДЦ=");
 	    КонецЦикла;
	  	Возврат Отказ;
КонецФункции




&НаСервере
Функция ПолучитьФактSPH()
		//  SPHфакт = 0;  
		//SPH = ПолучитьИзРегистраSPH(Объект.ДатаНачалаПериода,Объект.Организация,Объект.Магазин);
		//НомерДняНачалаПериода = День(Объект.ДатаНачалаПериода);
		//НомерДняОкончанияПериода = День(Объект.ДатаОкончанияПериода);
		//Для каждого Строка из Объект.ДанныеОВремени цикл
		//Для НомерДня = НомерДняНачалаПериода По НомерДняОкончанияПериода Цикл
		//	SPHплан = 0;
		//	SPHЧ =  Час(Строка["ВремяУхода" + НомерДня]) - Час(Строка["ВремяПрихода" + НомерДня]);
		//	Если SPHЧ > 8 тогда 
		//		SPHЧ = SPHЧ - 1;	
		//	КонецЕсли;
		//	SPHфакт = SPHфакт +SPHЧ;	
		//    КонецЦикла;
		//КонецЦикла;
		//SPHфактВ = SPHфакт *SPH;
		//SPHфактВ = Формат(SPHфактВ,"ЧДЦ=");
		
		
		
	ИтогКПлан = 0;	
		НомерДняНачалаПериода = День(Объект.ДатаНачалаПериода);
		НомерДняОкончанияПериода = День(Объект.ДатаОкончанияПериода);
	
	
	Для НомерДня = НомерДняНачалаПериода По НомерДняОкончанияПериода Цикл
		Коэфициент = ПолучитьКоэф(НачалоМесяца(Объект.ДатаНачалаПериода)+ (НомерДня-1)*24*60*60);
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СУММА(ПланПродажПоЧасам.ПланПродаж) КАК ПланПродаж
			|ИЗ
			|	РегистрСведений.ПланПродажПоЧасам КАК ПланПродажПоЧасам
			|ГДЕ
			|	ПланПродажПоЧасам.Период МЕЖДУ &ПериодС И &ПериодПо
			|	И ПланПродажПоЧасам.Организация = &Организация
			|	И ПланПродажПоЧасам.Магазин = &Магазин
			|ИМЕЮЩИЕ
			|	НЕ СУММА(ПланПродажПоЧасам.ПланПродаж) ЕСТЬ NULL";
		День = НачалоМесяца(Объект.ДатаНачалаПериода) + (НомерДня-1)*24*60*60;
		Запрос.УстановитьПараметр("ПериодС", НачалоДня(День));
		Запрос.УстановитьПараметр("ПериодПо", КонецДня(День));
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
		выборка = Запрос.Выполнить().Выбрать();
		Пока выборка.Следующий() цикл
			ПолеПлан = ЭтаФорма.Элементы["ДанныеОВремениГруппа"+НомерДня];
			КПлан =  выборка.ПланПродаж * Коэфициент;
			ИтогКПлан = ИтогКПлан + КПлан;	
		КонецЦикла;
	КонецЦикла;
	//
		
		
		

		  SPHфакт = 0;  
		//SPH = ПолучитьИзРегистраSPH(Объект.ДатаНачалаПериода,Объект.Организация,Объект.Магазин);
		НомерДняНачалаПериода = День(Объект.ДатаНачалаПериода);
		НомерДняОкончанияПериода = День(Объект.ДатаОкончанияПериода);
		Для каждого Строка из Объект.ДанныеОВремени цикл
		Для НомерДня = НомерДняНачалаПериода По НомерДняОкончанияПериода Цикл
			SPHплан = 0;
			SPHЧ =  Час(Строка["ВремяУхода" + НомерДня]) - Час(Строка["ВремяПрихода" + НомерДня]);
			Если SPHЧ > 8 тогда 
				SPHЧ = SPHЧ - 1;	
			КонецЕсли;
			SPHфакт = SPHфакт +SPHЧ;	
		    КонецЦикла;
		КонецЦикла;
		если SPHфакт > 0 тогда
			SPHфактВ = ИтогКПлан/SPHфакт;
			SPHфактВ = Формат(SPHфактВ,"ЧДЦ=");
		Иначе
			SPHфактВ = 0;
		КонецЕсли;
		
		
		
	  	Возврат SPHфактВ;
КонецФункции


&НаСервере
Функция ПолучитьКоэф(ДеньКоэф)
	Коэф = 1;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("День", ДеньКоэф);
	
	МассивТЧ = Объект.ПоставкаТовара.НайтиСтроки(СтруктураПоиска);
	Если НЕ МассивТЧ.Количество() = 0 тогда 
		Если ЗначениеЗаполнено(МассивТЧ[0].Переоценка) тогда 
			Коэф = 0.8;
		КонецЕсли;
	КонецЕсли;
	Если ДеньНедели(ДеньКоэф) = 6 или ДеньНедели(ДеньКоэф) = 7 тогда
			Коэф = Коэф*1.2;
	КонецЕсли;
	Возврат Коэф;
КонецФункции


&НаСервере
Функция ПолучитьПланSPH()
	
	//ИтогКПлан = 0;	
	//	НомерДняНачалаПериода = День(Объект.ДатаНачалаПериода);
	//	НомерДняОкончанияПериода = День(Объект.ДатаОкончанияПериода);
	//
	//
	//Для НомерДня = НомерДняНачалаПериода По НомерДняОкончанияПериода Цикл
	//	Коэфициент = ПолучитьКоэф(НачалоМесяца(Объект.ДатаНачалаПериода)+ (НомерДня-1)*24*60*60);
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	СУММА(ПланПродажПоЧасам.ПланПродаж) КАК ПланПродаж
	//		|ИЗ
	//		|	РегистрСведений.ПланПродажПоЧасам КАК ПланПродажПоЧасам
	//		|ГДЕ
	//		|	ПланПродажПоЧасам.Период МЕЖДУ &ПериодС И &ПериодПо
	//		|	И ПланПродажПоЧасам.Организация = &Организация
	//		|	И ПланПродажПоЧасам.Магазин = &Магазин
	//		|ИМЕЮЩИЕ
	//		|	НЕ СУММА(ПланПродажПоЧасам.ПланПродаж) ЕСТЬ NULL";
	//	День = НачалоМесяца(Объект.ДатаНачалаПериода) + (НомерДня-1)*24*60*60;
	//	Запрос.УстановитьПараметр("ПериодС", НачалоДня(День));
	//	Запрос.УстановитьПараметр("ПериодПо", КонецДня(День));
	//	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	//	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	//	выборка = Запрос.Выполнить().Выбрать();
	//	Пока выборка.Следующий() цикл
	//		ПолеПлан = ЭтаФорма.Элементы["ДанныеОВремениГруппа"+НомерДня];
	//		КПлан =  выборка.ПланПродаж * Коэфициент;
	//		ИтогКПлан = ИтогКПлан + КПлан;	
	//	КонецЦикла;
	//КонецЦикла;
	//
	
	КПлан = 0;	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РекомендуемыПоказателиSPHСрезПоследних.SPH КАК SPH
		|ИЗ
		|	РегистрСведений.РекомендуемыПоказателиSPH.СрезПоследних(&Период, Магазин = &Период) КАК РекомендуемыПоказателиSPHСрезПоследних";
	Запрос.УстановитьПараметр("Период", Объект.ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	выборка = Запрос.Выполнить().Выбрать();
	Пока выборка.Следующий() цикл
		КПлан =  выборка.SPH;
	КонецЦикла;
	
	Возврат КПлан;
КонецФункции



&НаСервере
Функция ПолучитьПланSPMH(НомерДня)
	    КПлан = 0;
		День = НачалоМесяца(Объект.ДатаНачалаПериода) + (НомерДня-1)*24*60*60;
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СУММА(ПланПродажПоЧасам.ПланПродаж) КАК ПланПродаж
			|ИЗ
			|	РегистрСведений.ПланПродажПоЧасам КАК ПланПродажПоЧасам
			|ГДЕ
			|	ПланПродажПоЧасам.Период МЕЖДУ &ПериодС И &ПериодПо
			|	И ПланПродажПоЧасам.Организация = &Организация
			|	И ПланПродажПоЧасам.Магазин = &Магазин
			|ИМЕЮЩИЕ
			|	НЕ СУММА(ПланПродажПоЧасам.ПланПродаж) ЕСТЬ NULL";
		Запрос.УстановитьПараметр("ПериодС", НачалоДня(День));
		Запрос.УстановитьПараметр("ПериодПо", КонецДня(День));
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
		выборка = Запрос.Выполнить().Выбрать();
		Пока выборка.Следующий() цикл
			КПлан =  выборка.ПланПродаж;
		КонецЦикла;
	//
	
	
	Возврат КПлан;
КонецФункции



&НаСервере
Функция ПолучитьSPH(Период,Организация,Магазин)
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	SPH = 0;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланПродажПоЧасамСрезПоследних.ПланПродаж / РекомендуемыПоказателиSPHСрезПоследних.SPH КАК ПланПродаж
		|ИЗ
		|	РегистрСведений.ПланПродажПоЧасам.СрезПоследних(&Период, ) КАК ПланПродажПоЧасамСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РекомендуемыПоказателиSPH.СрезПоследних(&Период, ) КАК РекомендуемыПоказателиSPHСрезПоследних
		|		ПО ПланПродажПоЧасамСрезПоследних.Организация = РекомендуемыПоказателиSPHСрезПоследних.Организация
		|			И ПланПродажПоЧасамСрезПоследних.Магазин = РекомендуемыПоказателиSPHСрезПоследних.Магазин
		|ГДЕ
		|	ПланПродажПоЧасамСрезПоследних.Организация = &Организация
		|	И ПланПродажПоЧасамСрезПоследних.Магазин = &Магазин
		|	И ПланПродажПоЧасамСрезПоследних.Период = &Период";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		SPH =  Окр(ВыборкаДетальныеЗаписи.ПланПродаж,5);
	КонецЦикла;
	
	Возврат SPH;
	
	
КонецФункции


&НаСервере
Функция ПолучитьИзРегистраSPH(Период,Организация,Магазин)
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	SPH = 0;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РекомендуемыПоказателиSPHСрезПоследних.SPH КАК SPH
		|ИЗ
		|	РегистрСведений.РекомендуемыПоказателиSPH.СрезПоследних(&Период, ) КАК РекомендуемыПоказателиSPHСрезПоследних";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		SPH =  Окр(ВыборкаДетальныеЗаписи.SPH,0);
	КонецЦикла;
	
	Возврат SPH;
	
	
КонецФункции




&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//ПревышенSPH = ПроверитьSPH();
	//Если ПревышенSPH тогда 
	//	Ответ = Вопрос("Превышен SPМH записать документ ?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет); 
	//	Если Ответ = КодВозвратаДиалога.Нет Тогда
	//		Отказ = Истина;
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Группа3ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ОчиститьОформление();
	ПроверитьОтсутвиеСотрудникаПриОткритии();	
	ПроверитьПоставку();	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьПланыПродаж()
		НомерДняНачалаПериода = День(Объект.ДатаНачалаПериода);
		НомерДняОкончанияПериода = День(Объект.ДатаОкончанияПериода);
			Для НомерДня = НомерДняНачалаПериода По НомерДняОкончанияПериода Цикл
				ЗапонитьПланыПродажь(НомерДня);
			КонецЦикла;
			
КонецПроцедуры


&НаСервере
Процедура ПроверитьПоставку()
		НомерДняНачалаПериода = День(Объект.ДатаНачалаПериода);
		НомерДняОкончанияПериода = День(Объект.ДатаОкончанияПериода);
			Для НомерДня = НомерДняНачалаПериода По НомерДняОкончанияПериода Цикл
				ПроверитьПоставку2(НомерДня);
				ЗапонитьПланыПродажь(НомерДня);
				ПроверитьПереоценку(НомерДня);
	        КонецЦикла;
		КонецПроцедуры
		
&НаСервере
 Процедура ПроверитьПереоценку(НомерДня) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочийГрафикПоставкаТовара.Переоценка КАК Поставка
		|ПОМЕСТИТЬ Таб
		|ИЗ
		|	&ПоставкаТовара КАК РабочийГрафикПоставкаТовара
		|ГДЕ
		|	РабочийГрафикПоставкаТовара.День = &День
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таб.Поставка КАК Поставка
		|ИЗ
		|	Таб КАК Таб
		|ГДЕ
		|	Таб.Поставка <> &Поставка";
	
	День = НачалоМесяца(Объект.ДатаНачалаПериода) + (НомерДня-1)*24*60*60;
	Запрос.УстановитьПараметр("День", День);
	Запрос.УстановитьПараметр("Поставка", Перечисления.ТипыПереоценок.ПустаяСсылка());		
	Запрос.УстановитьПараметр("ПоставкаТовара", Объект.ПоставкаТовара.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда 
	Иначе
		Колонка = ЭтаФорма.Элементы[СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ДанныеОВремениВремя%1Представление", НомерДня)];
		Колонка.ЦветФонаЗаголовка = ЦветаСтиля.УдаленныйРеквизитФон;	
	КонецЕсли;
	
КонецПроцедуры
		
		
&НаСервере
 Процедура ЗапонитьПланыПродажь(НомерДня) 
	Коэфициент = ПолучитьКоэф(НачалоМесяца(Объект.ДатаНачалаПериода)+ (НомерДня-1)*24*60*60);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ПланПродажПоЧасам.ПланПродаж) КАК ПланПродаж
		|ИЗ
		|	РегистрСведений.ПланПродажПоЧасам КАК ПланПродажПоЧасам
		|ГДЕ
		|	ПланПродажПоЧасам.Период МЕЖДУ &ПериодС И &ПериодПо
		|	И ПланПродажПоЧасам.Организация = &Организация
		|	И ПланПродажПоЧасам.Магазин = &Магазин
		|
		|ИМЕЮЩИЕ
		|	НЕ СУММА(ПланПродажПоЧасам.ПланПродаж) ЕСТЬ NULL";
	
	День = НачалоМесяца(Объект.ДатаНачалаПериода) + (НомерДня-1)*24*60*60;
	Запрос.УстановитьПараметр("ПериодС", НачалоДня(День));
	Запрос.УстановитьПараметр("ПериодПо", КонецДня(День));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	выборка = Запрос.Выполнить().Выбрать();
	Пока выборка.Следующий() цикл
		ПолеПлан = ЭтаФорма.Элементы["ДанныеОВремениГруппа"+НомерДня];
		КПлан =  выборка.ПланПродаж * Коэфициент;
		ПолеПлан.Заголовок = КПлан;	
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
 Процедура ПроверитьПоставку2(НомерДня) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочийГрафикПоставкаТовара.Поставка КАК Поставка
		|ПОМЕСТИТЬ Таб
		|ИЗ
		|	&ПоставкаТовара КАК РабочийГрафикПоставкаТовара
		|ГДЕ
		|	РабочийГрафикПоставкаТовара.День = &День
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таб.Поставка КАК Поставка
		|ИЗ
		|	Таб КАК Таб
		|ГДЕ
		|	Таб.Поставка <> &Поставка";
	
	День = НачалоМесяца(Объект.ДатаНачалаПериода) + (НомерДня-1)*24*60*60;
	Запрос.УстановитьПараметр("День", День);
	Запрос.УстановитьПараметр("Поставка", Перечисления.ВидыПоставокТоваров.ПустаяСсылка());	
	Запрос.УстановитьПараметр("ПоставкаТовара", Объект.ПоставкаТовара.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда 
	Иначе
		Колонка = ЭтаФорма.Элементы[СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ДанныеОВремениВремя%1Представление", НомерДня)];
		Колонка.ЦветФонаЗаголовка = ЦветаСтиля.ДобавленныйРеквизитФон;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОВремениПередУдалением(Элемент, Отказ)
		Ответ = Вопрос(НСтр("ru = 'Удалить строку с данным сотрудником ?'"), РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет); 
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОВремениСотрудникПриИзменении(Элемент)
	ТекДанные = Элементы.ДанныеОВремени.ТекущиеДанные;
	ТекДанные.Должность = ПолучитьДолжность(ТекДанные.Сотрудник);
	ПроверитьОтсутвиеСотрудника(ТекДанные.Сотрудник);
КонецПроцедуры


&НаСервере
Процедура ПроверитьОтсутвиеСотрудника(Сотрудник)
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Сотрудник", Сотрудник);
		МассивТЧ = Объект.СостоянияСотрудников.НайтиСтроки(СтруктураПоиска);
		
		Если НЕ МассивТЧ.Количество() = 0 тогда 
		НомерДняНачалаПериода = День(Объект.ДатаНачалаПериода);
		НомерДняОкончанияПериода = День(Объект.ДатаОкончанияПериода);
		Для НомерДня = НомерДняНачалаПериода По НомерДняОкончанияПериода Цикл
			Если  (МассивТЧ[0]["День" + НомерДня]) = Перечисления.СостоянияСотрудника.Болеет тогда
				УстановитьЦвет(Сотрудник,WebЦвета.БледноСиреневый,НомерДня);
			ИначеЕсли (МассивТЧ[0]["День" + НомерДня]) = Перечисления.СостоянияСотрудника.Отгул тогда
				УстановитьЦвет(Сотрудник,WebЦвета.НасыщенноНебесноГолубой,НомерДня);
			ИначеЕсли 	(МассивТЧ[0]["День" + НомерДня]) = Перечисления.СостоянияСотрудника.Отпуск тогда
				УстановитьЦвет(Сотрудник,WebЦвета.Золотой,НомерДня);
			КонецЕсли;
        КонецЦикла;
		КонецЕсли;	
КонецПроцедуры


&НаСервере
Процедура УстановитьЦвет(Сотрудник,Цвет,НомерДня)
		
	НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементУсловногоОформления.Представление = Сотрудник;
	НовыйЭлементУсловногоОформления.Использование = Истина;

	ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДанныеОВремени.Сотрудник");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Сотрудник;
	ИмяОформляемогоПоля = "ДанныеОВремениВремяПрихода" + НомерДня;
		
	ПолеОформления = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяОформляемогоПоля);
	ПолеОформления.Использование = Истина;
				
	ИмяОформляемогоПоля = "ДанныеОВремениВремяУхода" + НомерДня;
	ПолеОформления = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяОформляемогоПоля);
	ПолеОформления.Использование = Истина;
	
    НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Цвет);	
	//ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	//ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяОформляемогоПоля);
	//ПолеОформления.Использование = Истина;
	//			
	//			
	//			
	//			  ЭлементОформления = УсловноеОформление.Элементы.Добавить();	
	//
	//ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДанныеОВремени.Сотрудник"); //Объект.ДанныеОВремени.Сотрудник 
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	//ЭлементОтбора.ПравоеЗначение = Справочники.ФизическиеЛица.ВременныйРабочий;
	//ЭлементОтбора.Использование = Истина;
	//
	//ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДанныеОВремени.ФИО"); //Объект.ДанныеОВремени.Сотрудник 
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно; 
	//ЭлементОтбора.ПравоеЗначение = "";
	//ЭлементОтбора.Использование = Истина;
	//
	//ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДанныеОВремени.ФИО"); //Объект.ДанныеОВремени.Сотрудник 
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	//ЭлементОтбора.ПравоеЗначение = ФИОСтрока;
	//ЭлементОтбора.Использование = Истина;
	//
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", ФИОСтрока );
	//ЭлементОформления.Использование = Истина;
	//
	//// Создаем поля оформления
	//
	//ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	//ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяОформляемогоПоля);
	//ПолеОформления.Использование = Истина;
КонецПроцедуры


&НаСервере
Функция ПолучитьДолжность(Сотрудник)
	Должность = Справочники.РаботаВыполняемаяСотрудниками.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РаботникиОрганизаций.Должность КАК Должность,
		|	РаботникиОрганизаций.ПериодНачала КАК ПериодНачала
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.Сотрудник = &Сотрудник
		|	И РаботникиОрганизаций.ВидЗанятости = &ВидЗанятости
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодНачала УБЫВ";
	Запрос.УстановитьПараметр("ВидЗанятости", Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Должность =  ВыборкаДетальныеЗаписи.Должность;
	КонецЦикла;
	
Возврат Должность;
КонецФункции

&НаСервере
Процедура ЗапонитьПоЧасамНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЗапонитьПоЧасам(Команда)
	Если ЗначениеЗаполнено(ЭтаФорма.ТекущийЭлемент.ТекущийЭлемент.Имя) тогда 
		Если Лев(ЭтаФорма.ТекущийЭлемент.ТекущийЭлемент.Имя,19) = "ДанныеОВремениВремя" тогда 
			Если СтрДлина(ЭтаФорма.ТекущийЭлемент.ТекущийЭлемент.Имя) = 28 или СтрДлина(ЭтаФорма.ТекущийЭлемент.ТекущийЭлемент.Имя) = 26 тогда			
				НомерДня = Прав(ЭтаФорма.ТекущийЭлемент.ТекущийЭлемент.Имя,2);
			Иначе
				НомерДня = Прав(ЭтаФорма.ТекущийЭлемент.ТекущийЭлемент.Имя,1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
ПараметрыФормы   = Новый Структура();
ПараметрыФормы.Вставить("РабочийГрафик",Объект.Ссылка);
ПараметрыФормы.Вставить("НомерДня",НомерДня);
ПараметрыФормы.Вставить("ДанныеОввремени",Объект);
ОткрытьФорму("Обработка.ЗаполнениеРабочегоГрафика.Форма.Форма",ПараметрыФормы,ЭтаФорма,,,,,);
КонецПроцедуры


&НаКлиенте
Процедура СостоянияСотрудниковПередУдалением(Элемент, Отказ)
	Ответ = Вопрос(НСтр("ru = 'Удалить строку с данным сотрудником ?'"), РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет); 
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СостоянияСотрудниковСотрудникПриИзменении(Элемент)
	ТекДанные = Элементы.СостоянияСотрудников.ТекущиеДанные;
	ТекДанные.Должность = ПолучитьДолжность(ТекДанные.Сотрудник);
КонецПроцедуры




&НаКлиенте
Процедура ЗаполнитьСотрудников(Команда)
	Ответ = Вопрос(НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет); 
	Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаполнитьСотрудниковНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСотрудниковНаСервере()
Объект.ДанныеОВремени.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.ФизЛицо КАК ФизЛицо,
		|	РаботникиОрганизаций.Должность КАК Должность
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаботникиОрганизаций.Сотрудник КАК ФизЛицо,
		|		МАКСИМУМ(РаботникиОрганизаций.ПериодНачала) КАК ПериодНачала
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|	ГДЕ
		|		РаботникиОрганизаций.ВидЗанятости = &ВидЗанятости
		|		И РаботникиОрганизаций.Магазин = &Магазин
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиОрганизаций.Сотрудник) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО ВложенныйЗапрос.ФизЛицо = РаботникиОрганизаций.Сотрудник
		|			И ВложенныйЗапрос.ПериодНачала = РаботникиОрганизаций.ПериодНачала
		|ГДЕ
		|	РаботникиОрганизаций.ВидЗанятости = &ВидЗанятости
		|	И НЕ РаботникиОрганизаций.ЗанимаемыхСтавок = 0
		|	И РаботникиОрганизаций.Магазин = &Магазин";
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	Запрос.УстановитьПараметр("ВидЗанятости", Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Стр = Объект.СостоянияСотрудников.Добавить();
		Стр.Сотрудник =  ВыборкаДетальныеЗаписи.ФизЛицо;
		Стр.Должность =  ВыборкаДетальныеЗаписи.Должность;
	КонецЦикла;
	



КонецПроцедуры

&НаКлиенте
Процедура ДанныеОВремениПриИзменении(Элемент)
	SPHФакт = ПолучитьФактSPH();
	SPHПлан = ПолучитьПланSPH();
	
	ЭтаФорма.Элементы.ДанныеОВремениНомерСтроки.Заголовок ="Факт" + SPHФакт  + " /План " + SPHПлан;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	SPHФакт = ПолучитьФактSPH();
	SPHПлан = ПолучитьПланSPH();
	
	ЭтаФорма.Элементы.ДанныеОВремениНомерСтроки.Заголовок ="Факт" + SPHФакт  + " /План " + SPHПлан;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПланФакт(Команда)
	
ПроверитьSPH();	
ЗаполнитьПланФактНаСервре();
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьПланФактНаСервре()
	
	Для Каждого Строка из Объект.ДанныеОВремени цикл
		  Строка.ПланФакт = ПолучитьПланФактНАсеревер(Строка.Сотрудник);
	КонецЦикла;
	//ПроверитьSPH();	
//ЗаполнитьПланФактНАсеревер();
КонецПроцедуры

&НаСервере
Функция ПолучитьПланФактНАсеревер(Сотрудник)
	План = "0";
	Факт = "0";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(РабочийГрафик.Часы) КАК План
		|ИЗ
		|	РегистрНакопления.РабочийГрафик КАК РабочийГрафик
		|ГДЕ
		|	РабочийГрафик.Регистратор = &Регистратор
		|	И РабочийГрафик.Сотрудник = &Сотрудник";
	
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		План =   Строка(ВыборкаДетальныеЗаписи.План);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА УчетРабочегоВремени.КоличествоЧасовФакт = 0
		|				ТОГДА УчетРабочегоВремени.КоличествоЧасовФактАвто
		|			ИНАЧЕ УчетРабочегоВремени.КоличествоЧасовФакт
		|		КОНЕЦ) КАК Факт
		|ИЗ
		|	РегистрНакопления.УчетРабочегоВремени КАК УчетРабочегоВремени
		|ГДЕ
		|	УчетРабочегоВремени.Сотрудник = &Сотрудник
		|	И УчетРабочегоВремени.Период МЕЖДУ &ПериодС И &ПериодПо";
	
	Запрос.УстановитьПараметр("ПериодС", Объект.ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ПериодПо", Объект.ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Факт =   Строка(ВыборкаДетальныеЗаписи.Факт);
	КонецЦикла;
	ТекстПланФакт = План +"/" + Факт; 
	Возврат ТекстПланФакт;
КонецФункции

&НаСервере
Процедура ЗаполнитьПланФактНАсеревер()


КонецПроцедуры
