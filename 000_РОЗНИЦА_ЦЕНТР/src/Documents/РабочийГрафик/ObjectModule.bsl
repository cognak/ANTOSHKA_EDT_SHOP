
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
		// Проведение документа
	//ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	//	
	//ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	ДанныеДляПроведения = ТаблицаДанныхОВремени();
	ДанныеДляПроведенияПлана = ТаблицаДанныхОПриходе();
	ДанныеДляОтсутствий = ТаблицаОтсутствий();
	РеквизитыДляПроведения = Новый Структура();
	РеквизитыДляПроведения.Вставить("ПериодРегистрации", ПериодРегистрации);
	РеквизитыДляПроведения.Вставить("СотрудникиДокумента", СотрудникиДокумента());
	УчетРабочегоВремениРасширенный.ЗарегистрироватьДанныеИндивидуальногоГрафика(Движения, ДанныеДляПроведения, ПериодРегистрации); 
	УчетРабочегоВремениРасширенный.ЗарегистрироватьДанныеУчетРабочегоВремениПлан(Движения, ДанныеДляПроведенияПлана, ПериодРегистрации); 
	УчетРабочегоВремениРасширенный.ЗарегистрироватьДанныеГрафика(Движения, ДанныеДляОтсутствий); 
КонецПроцедуры


Функция ТаблицаДанныхОПриходе()
	ТаблицаДанныхОВремени = Новый ТаблицаЗначений;
	ТаблицаДанныхОВремени.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.Магазины"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДанныхОВремени.Колонки.Добавить("ТипВремени", Новый ОписаниеТипов("ПеречислениеСсылка.ТипВремени"));
	
	НомерДняНачалаПериода = День(ДатаНачалаПериода);
	НомерДняОкончанияПериода = День(ДатаОкончанияПериода);
	Для Каждого СтрокаДанныхОВремени Из ДанныеОВремени Цикл 
		
		ОбрабатываемаяДата = ДатаНачалаПериода;
		Для НомерДня = НомерДняНачалаПериода По НомерДняОкончанияПериода Цикл
			Если ЗначениеЗаполнено(СтрокаДанныхОВремени["ВремяПрихода" + НомерДня]) И ЗначениеЗаполнено(СтрокаДанныхОВремени["ВремяУхода" + НомерДня]) Тогда
				ДанныеПоВидуВремениНаДату = ТаблицаДанныхОВремени.Добавить();
				ДанныеПоВидуВремениНаДату.Дата = ОбрабатываемаяДата;
				ДанныеПоВидуВремениНаДату.Сотрудник = СтрокаДанныхОВремени.Сотрудник;
				ДанныеПоВидуВремениНаДату.Организация = Организация;
				ДанныеПоВидуВремениНаДату.Магазин = Магазин;
				ДанныеПоВидуВремениНаДату.Период = ОбрабатываемаяДата + (СтрокаДанныхОВремени["ВремяПрихода" + НомерДня]- Дата(1,1,1));
				ДанныеПоВидуВремениНаДату.ТипВремени = Перечисления.ТипВремени.Приход;
				ДанныеПоВидуВремениНаДату = ТаблицаДанныхОВремени.Добавить();
				ДанныеПоВидуВремениНаДату.Дата = ОбрабатываемаяДата;
				ДанныеПоВидуВремениНаДату.Сотрудник = СтрокаДанныхОВремени.Сотрудник;
				ДанныеПоВидуВремениНаДату.Организация = Организация;
				ДанныеПоВидуВремениНаДату.Магазин = Магазин;
				ДанныеПоВидуВремениНаДату.Период = ОбрабатываемаяДата + (СтрокаДанныхОВремени["ВремяУхода" + НомерДня]- Дата(1,1,1));
				ДанныеПоВидуВремениНаДату.ТипВремени = Перечисления.ТипВремени.Уход;
			КонецЕсли;	
			ОбрабатываемаяДата = ОбрабатываемаяДата + 86400;
		КонецЦикла;	
	КонецЦикла;	
	
	Возврат ТаблицаДанныхОВремени;
КонецФункции	


Функция ТаблицаДанныхОВремени()
	ТаблицаДанныхОВремени = Новый ТаблицаЗначений;
	ТаблицаДанныхОВремени.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.Магазины"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Часов", Новый ОписаниеТипов("Число"));
		
	
	НомерДняНачалаПериода = День(ДатаНачалаПериода);
	НомерДняОкончанияПериода = День(ДатаОкончанияПериода);
	Для Каждого СтрокаДанныхОВремени Из ДанныеОВремени Цикл 
		
		ОбрабатываемаяДата = ДатаНачалаПериода;
		Для НомерДня = НомерДняНачалаПериода По НомерДняОкончанияПериода Цикл
			Если ЗначениеЗаполнено(СтрокаДанныхОВремени["ВремяПрихода" + НомерДня]) И ЗначениеЗаполнено(СтрокаДанныхОВремени["ВремяУхода" + НомерДня]) Тогда
				Часов = (СтрокаДанныхОВремени["ВремяУхода" + НомерДня] - СтрокаДанныхОВремени["ВремяПрихода" + НомерДня])/3600; 
				ДанныеПоВидуВремениНаДату = ТаблицаДанныхОВремени.Добавить();
				ДанныеПоВидуВремениНаДату.Дата = ОбрабатываемаяДата;
				ДанныеПоВидуВремениНаДату.Сотрудник = СтрокаДанныхОВремени.Сотрудник;
				ДанныеПоВидуВремениНаДату.Организация = Организация;
				ДанныеПоВидуВремениНаДату.Магазин = Магазин;
				ДанныеПоВидуВремениНаДату.Часов = Часов;
			КонецЕсли;	
			ОбрабатываемаяДата = ОбрабатываемаяДата + 86400;
		КонецЦикла;	
	КонецЦикла;	
	
	Возврат ТаблицаДанныхОВремени;
КонецФункции	

Функция ТаблицаОтсутствий()
	ТаблицаДанныхОВремени = Новый ТаблицаЗначений;
	ТаблицаДанныхОВремени.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.Магазины"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияСотрудника"));
		
	
	НомерДняНачалаПериода = День(ДатаНачалаПериода);
	НомерДняОкончанияПериода = День(ДатаОкончанияПериода);
	Для Каждого СтрокаДанныхОВремени Из СостоянияСотрудников Цикл 
		
		ОбрабатываемаяДата = ДатаНачалаПериода;
		Для НомерДня = НомерДняНачалаПериода По НомерДняОкончанияПериода Цикл
			Если ЗначениеЗаполнено(СтрокаДанныхОВремени["День" + НомерДня])  Тогда
				ДанныеПоВидуВремениНаДату = ТаблицаДанныхОВремени.Добавить();
				ДанныеПоВидуВремениНаДату.Дата = ОбрабатываемаяДата;
				ДанныеПоВидуВремениНаДату.Сотрудник = СтрокаДанныхОВремени.Сотрудник;
				ДанныеПоВидуВремениНаДату.Организация = Организация;
				ДанныеПоВидуВремениНаДату.Магазин = Магазин;
				ДанныеПоВидуВремениНаДату.Состояние = СтрокаДанныхОВремени["День" + НомерДня];
			КонецЕсли;	
			ОбрабатываемаяДата = ОбрабатываемаяДата + 86400;
		КонецЦикла;	
	КонецЦикла;	
	
	Возврат ТаблицаДанныхОВремени;
КонецФункции	


Функция СтрокиПоСотрудникам()
	СтрокиПоСотрудникам = Новый Соответствие;
	Для Каждого СтрокаДанных Из ДанныеОВремени Цикл
		МассивСтрок = СтрокиПоСотрудникам.Получить(СтрокаДанных.Сотрудник);
		Если МассивСтрок = Неопределено Тогда
			МассивСтрок = Новый Массив;
			СтрокиПоСотрудникам.Вставить(СтрокаДанных.Сотрудник, МассивСтрок);
		КонецЕсли;	
		МассивСтрок.Добавить(СтрокаДанных);
	КонецЦикла;	
	
	Возврат СтрокиПоСотрудникам;
КонецФункции	


Функция СотрудникиДокумента()
	Сотрудники = Новый Массив;
	
	Для Каждого СтрокаДанныхОВремени Из ДанныеОВремени Цикл
		Если Сотрудники.Найти(СтрокаДанныхОВремени.Сотрудник) = Неопределено Тогда
			Сотрудники.Добавить(СтрокаДанныхОВремени.Сотрудник);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Сотрудники;
КонецФункции	

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	
	Если ОбменДанными.Загрузка Тогда

		Возврат;
		
	КонецЕсли;

КонецПроцедуры
