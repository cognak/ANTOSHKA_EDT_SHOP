&НаСервере
Функция ПолучитьКонтактОтветственногоЛица(Магазин)
	Если Объект.Сотрудники[0].ВидКорректировки = 0 Тогда
		//Возврат "oleksandr.danyliuk@antoshka.ua";	
		Возврат "vitalii.borschevskyi@antoshka.ua";	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФизическиеЛицаКонтактнаяИнформация.АдресЭП КАК АдресЭП
	               |ИЗ
	               |	РегистрСведений.РуководителиМагазинов КАК РуководителиМагазинов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	               |		ПО (РуководителиМагазинов.Сотрудник = ФизическиеЛицаКонтактнаяИнформация.Ссылка
	               |				И ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	               |ГДЕ
	               |	РуководителиМагазинов.Магазин = &Магазин";
	Запрос.УстановитьПараметр("Магазин",Магазин);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.АдресЭП;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьОтправкиПисьма()
	Если Объект.Сообщения.Количество() > 0 Тогда
		вТЗ = Объект.Сообщения.Выгрузить();
		вТЗ.Сортировать("Дата Убыв");
		ПоследнееПисьмо = вТЗ[0].Дата;
		Разница = ТекущаяДата() - ПоследнееПисьмо;
		Если Разница < 600 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьАвтоподтвержденияКорректировкиПоПричинеТревог() 
	Если Объект.Сотрудники.Количество()>0 Тогда
		КорректируемаяДата = Объект.Сотрудники[0].ДатаК;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Города.Ссылка КАК Город,
	               |	Города.КодТерритории КАК КодТерритории,
	               |	Магазины.Ссылка КАК Магазин
	               |ПОМЕСТИТЬ Магазины
	               |ИЗ
	               |	Справочник.Магазины КАК Магазины
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Города КАК Города
	               |		ПО Магазины.Город = Города.Ссылка
	               |ГДЕ
	               |	Магазины.Ссылка = &Магазин
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КартаТревог.Период КАК ДатаНачала,
	               |	КартаТревог.КодТерритории КАК КодТерритории,
	               |	КартаТревог.НазваниеТерритории КАК НазваниеТерритории,
	               |	КартаТревог.ДатаОкончания КАК ДатаОкончания,
	               |	КартаТревог.ТипТерритории КАК ТипТерритории,
	               |	КартаТревог.ТипТревоги КАК ТипТревоги,
	               |	КартаТревог.Примечание КАК Примечание
	               |ИЗ
	               |	РегистрСведений.КартаТревог КАК КартаТревог
	               |ГДЕ
	               |	КартаТревог.Период >= &ДатаНач
	               |	И КартаТревог.ДатаОкончания <= &ДатаКон
	               |	И КартаТревог.КодТерритории В
	               |			(ВЫБРАТЬ
	               |				Т.КодТерритории
	               |			ИЗ
	               |				Магазины КАК Т)"; 
	Запрос.УстановитьПараметр("Магазин",Объект.Магазин);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(КорректируемаяДата));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(КорректируемаяДата));
	
	Рез = Запрос.Выполнить().Выбрать();
	ДопустимоеКорректируемоеВремя = 0;
	ЖелаемоеВремяКорректировки = ФактВремя - КорректируемоеВремя;
	Если ЖелаемоеВремяКорректировки < 0 Тогда  //Разрешаем подтверждать фактически отработанное время меньше чем записано в базе (по принципу меньше не больше)
		Возврат Истина;
	КонецЕсли;
	
		
	Пока Рез.Следующий() Цикл         
		//Сообщить("Тревога с "+Рез.ДатаНачала+" по "+Рез.ДатаОкончания);
		//Учитываем только тревоги с 7-00 утра до 23-00 вечера  
		//Если окончание тревоги раньше 7 утра, то ее не учитываем.
		Если Рез.ДатаОкончания <= НачалоДня(Рез.ДатаОкончания)+7*3600 Тогда
			Продолжить;                                                   
			
		//Если начало тревоги позже 23 вечера, то ее не учитываем.
		ИначеЕсли Рез.ДатаНачала >= КонецДня(Рез.ДатаНачала)-1*3600 Тогда 
			Продолжить;
		КонецЕсли;
		
		//Если тревога началась раньше 7 утра, то началом берем именно 7 утра.
		Если Рез.ДатаНачала <= НачалоДня(Рез.ДатаНачала)+7*3600 И
				Рез.ДатаОкончания >= НачалоДня(Рез.ДатаНачала)+7*3600 Тогда 
			НачалоТревоги = НачалоДня(Рез.ДатаНачала)+7*3600;
		Иначе
			НачалоТревоги = Рез.ДатаНачала;
		КонецЕсли;                         
		
		//Если тревога началась до 23 вечера и продолжилась после, то окончанием тревоги считаем 23 вечера.
		Если Рез.ДатаНачала <= НачалоДня(Рез.ДатаНачала)+23*3600 И
				Рез.ДатаОкончания >= НачалоДня(Рез.ДатаОкончания)+23*3600 Тогда 
			КонецТревоги = НачалоДня(Рез.ДатаНачала)+23*3600;
		Иначе
			КонецТревоги = Рез.ДатаОкончания;
		КонецЕсли;                         
		Сообщить("Тревога з "+НачалоТревоги+" по "+КонецТревоги);
		
		
		ДопустимоеКорректируемоеВремя = ДопустимоеКорректируемоеВремя + (КонецТревоги - НачалоТревоги);
	КонецЦикла;                                                         
	Если ДопустимоеКорректируемоеВремя > 0 Тогда 
		ДопустимоеКорректируемоеВремя = ДопустимоеКорректируемоеВремя + 30*60; //Если были тревоги, то накидываем дополнительно 30 минут на вход/выход из убежища.
		//Сообщить("ДопустимоеКорректируемоеВремя = "+ДопустимоеКорректируемоеВремя);
		Если ДопустимоеКорректируемоеВремя >= ЖелаемоеВремяКорректировки Тогда
			Возврат Истина;
		Иначе     
			Сообщить("Автоматичне коригування не може підтвердити більше часу, ніж сумарний час тривог.");
			//Сообщить("Суммарное время тревог: "+ДопустимоеКорректируемоеВремя);
			//Сообщить("Желаемое время корректировки: "+ЖелаемоеВремяКорректировки);
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	
	
	
КонецФункции


&НаКлиенте
Процедура КомандаОтправитьКодПодтверждения(Команда)
	//2025-08-18 sa добавили в базу официальную карту тревог и решили что тревоги можем подтверждать автоматически.
	//Время разрешенное для подтверждения не должно превышать ВремяТревоги за этот день (учитываются рабочие часы с 07-00 по 22-00) + 30 минут на вход/выход из убежища или необходимость быстро обслужить клиентов. 
	Если АвтоПодтверждение = Истина Тогда 
		Если Не ЗначениеЗаполнено(ФактВремя) Тогда
			Сообщить("Не вказано фактично відпрацьовану кількість годин!"); 
			Возврат;
		КонецЕсли;

		Если ПроверитьВозможностьАвтоподтвержденияКорректировкиПоПричинеТревог() Тогда
			ПровестиКорректировкуТабеля();	
		Иначе
			//Если корректируемое время превысило то что система может подтвердить, то тогда работайте через письмо и обычное подтверждение.
			АвтоПодтверждение = Ложь;
			УстановитьВидимость();
			
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьВозможностьОтправкиПисьма() Тогда
		Сообщить("Ви вже відправили листа, вам потрібно почекати 5 хвилин, щоб мати можливість відправити його повторно");
		Возврат;
	КонецЕсли;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	
	КодПодтверждения_ = ГСЧ.СлучайноеЧисло(100134,999982);
	Адрес = ПолучитьКонтактОтветственногоЛица(Объект.Магазин);
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		Сообщить("Не заповнено адресу електронної пошти відповідальної особи для магазину "+Объект.Магазин+"! Зверніться будь ласка в тех.підтримку!");
		Возврат;	
	КонецЕсли;
	МассивСотрудники = Новый Массив;
	Для Каждого Строка_ Из Объект.Сотрудники Цикл 
		Строка_.КодПодтверждения = КодПодтверждения_; 
		СтрокаСотрудник = Новый Структура;
		СтрокаСотрудник.Вставить("Сотрудник",Строка_.Сотрудник);			
		СтрокаСотрудник.Вставить("КорректируемаяДата",Формат(Строка_.ДатаК,"ДФ=dd.MM.yyyy"));			
		СтрокаСотрудник.Вставить("ЧасовФакт",Формат(Строка_.ЧасовФакт,"ДФ=мм:сс"));
		СтрокаСотрудник.Вставить("ЧасовКорр",Формат(Строка_.ЧасовКорр,"ДФ=мм:сс"));
		СтрокаСотрудник.Вставить("Комментарий",Строка_.Комментарий);
		СтрокаСотрудник.Вставить("Причина",Строка_.ПричинаКорректировки);
		СтрокаСотрудник.Вставить("КодПодтверждения",Строка_.КодПодтверждения);
		МассивСотрудники.Добавить(СтрокаСотрудник);
		Строка_.Статус = ПредопределенноеЗначение("Перечисление.СтатусыКорректировокТабеляУчетаРабочегоВремени.НаСогласовании");
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Адрес",Адрес);
	СтруктураПараметров.Вставить("Магазин",Объект.Магазин);
	СтруктураПараметров.Вставить("Номер",Объект.Номер);
	СтруктураПараметров.Вставить("Дата",Формат(Объект.Дата,"ДФ=dd.MM.yyyy"));
	СтруктураПараметров.Вставить("Сотрудники",МассивСотрудники);
	ОтправитьКорректировкуНаСогласование(СтруктураПараметров);
	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВвестиКодПодтверждения(Команда)
	
	Строка_ = Объект.Сотрудники[0];
	СтруктураПараметров = Новый Структура("КодПодтверждения",Строка_.КодПодтверждения);
	
	ОткрытьФорму("Документ.ТабельУчетаРабочегоВремениКорректировка.Форма.ФормаВводаКода",СтруктураПараметров,ЭтаФорма,,,,Новый ОписаниеОповещения("КодПодтвержденияЗавершение",ЭтаФорма,Новый Структура),РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
	
КонецПроцедуры
&НаКлиенте
Процедура КодПодтвержденияЗавершение(СтруктураПараметров,ДопПараметры) Экспорт
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") И СтруктураПараметров.Свойство("Успешно") И СтруктураПараметров.Успешно = Истина Тогда
		ПровестиКорректировкуТабеля();	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПровестиКорректировкуТабеля()
	ДокОбъект = Объект.ДокументОснование.ПолучитьОбъект();
	Если ДокОбъект.Заблокирован() Тогда
		Сообщение_ = Новый СообщениеПользователю;
		Сообщение_.Текст = "Табель "+Объект.ДокументОснование + " Заблокований та недоступний для обробки. Повторіть спробу пізніше.";
		Сообщение_.Сообщить();
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Объект.Сотрудники[0];
	ТекСтрока.Статус = Перечисления.СтатусыКорректировокТабеляУчетаРабочегоВремени.Утверждена;
	МассивСтрок = ДокОбъект.ДанныеОВремени.НайтиСтроки(Новый Структура("Сотрудник,Должность",ТекСтрока.Сотрудник,ТекСтрока.Должность));
	Для Каждого Строка_ Из МассивСтрок Цикл
		Строка_["ЧасовФакт"+Формат(ТекСтрока.ДатаК,"ДФ=д")] = ТекСтрока.ЧасовФакт;
		Строка_["Комментарий"+Формат(ТекСтрока.ДатаК,"ДФ=д")] = ТекСтрока.Комментарий;
	КонецЦикла;
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщение_ = Новый СообщениеПользователю;
		Сообщение_.Текст = "Помилка під час проведення табеля "+Объект.ДокументОснование + ": "+ОписаниеОшибки();
		Сообщение_.Сообщить();
	КонецПопытки;
	
	Попытка                                               
		ДокКорр = РеквизитФормыВЗначение("Объект");
		
		ДокКорр.Записать(РежимЗаписиДокумента.Проведение);         
		
		ЭтаФорма.ТолькоПросмотр = Истина;
		ЭтаФорма.Модифицированность = Ложь;  
		Элементы.ФактВремя.ТолькоПросмотр = Истина;
		Элементы.ПричинаКорректирвки.ТолькоПросмотр = Истина;
		Элементы.СотрудникиКомментарий1.ТолькоПросмотр =Истина;
		
	Исключение
		Сообщение_ = Новый СообщениеПользователю;
		Сообщение_.Текст = "Помилка під час коригування "+Объект.Ссылка+ ": "+ОписаниеОшибки();
		Сообщение_.Сообщить();
	КонецПопытки;
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Дата = ТекущаяДата();
		ЗаполнитьЗначенияСвойств(Объект,Параметры);
		Строка_ = Объект.Сотрудники.Добавить();
		ЗаполнитьЗначенияСвойств(Строка_,Параметры);
		Строка_.ВидКорректировки = 1;
		Если Параметры.Свойство("ДатаК") Тогда
			Строка_.ДатаК = Параметры.ДатаК;  
			КорректирумаяДатаПриИзмененииНаСервере();
		КонецЕсли; 
		АвтоПодтверждение = Ложь;
	Иначе
		КорректируемоеВремя = ПреобразоватьЧасыВвремя(Объект.Сотрудники[0].ЧасовКорр);
		ФактВремя =  ПреобразоватьЧасыВвремя(Объект.Сотрудники[0].ЧасовФакт);
		ПричинаКорректировки = Объект.Сотрудники[0].ПричинаКорректировки;
		Комментарий = Объект.Сотрудники[0].Комментарий;
	КонецЕсли;
	
	Элементы.Сообщения.Видимость = РольДоступна("АдминистраторСистемы");
	Если Объект.Сотрудники.Количество() > 0 Тогда
		Строка_ = Объект.Сотрудники[0];
		Если ЗначениеЗаполнено(Строка_.КодПодтверждения) Тогда
			ЭтаФорма.ТолькоПросмотр = Истина;	
			Элементы.КомандаВвестиКодПодтверждения.Видимость = Истина;
		Иначе
			Элементы.КомандаВвестиКодПодтверждения.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.КомандаВвестиКодПодтверждения.Видимость = Ложь;
	КонецЕсли;

	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПреобразоватьЧасыВвремя(Часов)
	Возврат Дата("00010101") + Часов * 3600;	
КонецФункции
&НаСервереБезКонтекста
Функция ПреобразоватьВремяВЧасы(Время)
	Возврат (Час(Время)*60 + Минута(Время))/60;	
КонецФункции


&НаСервере
Процедура ОтправитьКорректировкуНаСогласование(СтруктураПараметров)
	УчетныеДанныеОтправителя = РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись();
	
	Если УчетныеДанныеОтправителя.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда

		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить("Кому", СтруктураПараметров.Адрес);
		ПараметрыПисьма.Вставить("Тема", "Магазин: "+СтруктураПараметров.Магазин+" Корректировка табеля №"+СтруктураПараметров.Номер+" от "+СтруктураПараметров.Дата);
		ТелоПисьма = "Шановний панове!"+Символы.ПС+"Це автоматичний лист. Прохання не відповідати на нього."+Символы.ПС
			+"Вам надійшов запит на коригування табеля обліку робочого часу. Всю необхідну інформацію про коригування ви знайдете в листі нижче."
			+Символы.ПС+Символы.ПС
			+Символы.ПС+"Магазин просить виправити відпрацьований час наступним працівникам: "+Символы.ПС;
		Для Каждого Строка_ Из СтруктураПараметров.Сотрудники Цикл
			ТелоПисьма = ТелоПисьма +Строка_.Сотрудник+" за "+Строка_.КорректируемаяДата+" число на "+Строка_.ЧасовФакт+" г. Попередне значення було: ("+Строка_.ЧасовКорр+" г.)"+Символы.ПС;
			Комментарий_ = Строка_.Комментарий;
			ПричинаКорректировки_ = Строка_.Причина;
			КодПодтверждения_ = Строка_.КодПодтверждения;
		КонецЦикла;																
		ТелоПисьма = ТелоПисьма+"через таки обставини: "+Символы.ПС+Комментарий_+" ("+ПричинаКорректировки_ +")"
			+Символы.ПС+"Якщо ви згодні підтвердити коригування, то повідомте код підтвердження "+КодПодтверждения_+" директору магазину.";
		ПараметрыПисьма.Вставить("Тело", ТелоПисьма);

		ЭлектроннаяПочта.ОтправитьПочтовоеСообщение(УчетныеДанныеОтправителя, ПараметрыПисьма);
		
		СтрокаСообщения = Объект.Сообщения.Добавить();
		СтрокаСообщения.Дата = ТекущаяДата();
		СтрокаСообщения.Адресат = СтруктураПараметров.Адрес;
		СтрокаСообщения.ТекстСообщения = ТелоПисьма;
		ЭтотОбъект.Записать();
		ЭтаФорма.ТолькоПросмотр = Истина;
		Элементы.КомандаВвестиКодПодтверждения.Видимость = Истина;
		
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
Процедура КорректирумаяДатаПриИзмененииНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник КАК Сотрудник,
	               |	ТабельУчетаРабочегоВремениДанныеОВремени.Должность КАК Должность,
	               |	ТабельУчетаРабочегоВремениДанныеОВремени.ЧасовФактАвто1 КАК ЧасовКорр
	               |ИЗ
	               |	Документ.ТабельУчетаРабочегоВремени.ДанныеОВремени КАК ТабельУчетаРабочегоВремениДанныеОВремени
	               |ГДЕ
	               |	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка = &ДокОснование
	               |	И ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник = &Сотрудник
	               |	И ТабельУчетаРабочегоВремениДанныеОВремени.Должность = &Должность";
	ТекСтрока = Объект.Сотрудники[0];
	Запрос.УстановитьПараметр("ДокОснование",Объект.ДокументОснование);
	Запрос.УстановитьПараметр("Сотрудник",ТекСтрока.Сотрудник);
	Запрос.УстановитьПараметр("Должность",ТекСтрока.Должность);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ЧасовФактАвто1",".ЧасовФактАвто"+Формат(ТекСтрока.ДатаК,"ДФ=d"));
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ТекСтрока.ЧасовКорр = Результат.ЧасовКорр;
		КорректируемоеВремя = ПреобразоватьЧасыВвремя(ТекСтрока.ЧасовКорр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорректирумаяДатаПриИзменении(Элемент)
	КорректирумаяДатаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ФактВремяПриИзменении(Элемент)        
	ЧасовФакт_ = ПреобразоватьВремяВЧасы(ФактВремя);
	Для Каждого Строка_ Из Объект.Сотрудники Цикл
		Строка_.ЧасовФакт = ЧасовФакт_;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование)  Тогда
		Предупреждение("Корректировка вводится на основании табеля учета рабочего времени");
		Отказ = Истина;
	КонецЕсли;
	УстановитьВидимость();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКорректировкиПриИзменении(Элемент)
	ПричинаКорректировки = ""; 
	ПричинаКорректирвкиПриИзменении(Неопределено);
	УстановитьВидимость();
	н = 0;    
	//Если корректировка техническая, то разрешаем редактировать списком.
	//Ксли корректировка не техническая, то корректируем время индивидуально по каждому сотруднику
	ВсегоСотрудников = Объект.Сотрудники.Количество();
	Если ВсегоСотрудников > 0 Тогда
		ВидКорректировки = Объект.Сотрудники[0].ВидКорректировки;
	Иначе
		ВидКорректировки = 1;
	КонецЕсли;     
	
	Для Каждого Строка_ Из Объект.Сотрудники Цикл
		Если ВидКорректировки = 0 Тогда
			Строка_.ВидКорректировки = 0;
		Иначе    
			Пока Объект.Сотрудники.Количество()>1 Цикл
				Объект.Сотрудники.Удалить(1); 
			КонецЦикла;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры  

&НаКлиенте
Процедура УстановитьВидимость() 
	Если Объект.Сотрудники.Количество() > 0 Тогда
		ВидКорректировки = Объект.Сотрудники[0].ВидКорректировки;
	Иначе
		ВидКорректировки = 1;
	КонецЕсли;
	
	УстановитьВыборКомментария(ВидКорректировки);   
	
	Если ВидКорректировки = 0 Тогда
		Элементы.ГруппаКорректировкаСписок.Видимость = Истина;
		Элементы.Сотрудник.Видимость = Ложь;
		Элементы.Должность.Видимость = Ложь;
	Иначе
		Элементы.ГруппаКорректировкаСписок.Видимость = Ложь;
		Элементы.Сотрудник.Видимость = Истина;
		Элементы.Должность.Видимость = Ложь;
	КонецЕсли;    
	
	Если АвтоПодтверждение Тогда
		Элементы.КомандаОтправитьКодПодтверждения.Заголовок = "Підтвердити коригування";
	Иначе
		Элементы.КомандаОтправитьКодПодтверждения.Заголовок = "Надіслати код";
	КонецЕсли;
	

КонецПроцедуры   

&НаКлиенте
Процедура УстановитьВыборКомментария(ВидКорректировки)

	СписокДоступныхКомментариев = Новый Массив;
	Если ВидКорректировки = 0 Тогда
		СписокДоступныхКомментариев.Добавить("отсутствие света");
		СписокДоступныхКомментариев.Добавить("тревога");
		СписокДоступныхКомментариев.Добавить("технические проблемы");
		СписокДоступныхКомментариев.Добавить("надзвичайна ситуація");
	Иначе
		СписокДоступныхКомментариев.Добавить("отпуск");
		СписокДоступныхКомментариев.Добавить("не отсканировался");
		СписокДоступныхКомментариев.Добавить("не правильно отсканировался");
		СписокДоступныхКомментариев.Добавить("отгул");
		СписокДоступныхКомментариев.Добавить("прогул");
		СписокДоступныхКомментариев.Добавить("болел");
		СписокДоступныхКомментариев.Добавить("дист.работа/работа в другой ТТ");
	Конецесли;

	ЭлементФормыКомментарий = Элементы.ПричинаКорректирвки;
	ЭлементФормыКомментарий.КнопкаВыпадающегоСписка = Истина;
	ЭлементФормыКомментарий.СписокВыбора.ЗагрузитьЗначения(СписокДоступныхКомментариев);
	ЭлементФормыКомментарий.РедактированиеТекста = Ложь;
	
КонецПроцедуры


&НаКлиенте
Процедура ПричинаКорректирвкиПриИзменении(Элемент)
	Для Каждого Строка_ Из Объект.Сотрудники Цикл
		Строка_.Комментарий = Комментарий;
		Строка_.ПричинаКорректировки = ПричинаКорректировки;
	КонецЦикла;
	Если ПричинаКорректировки = "тревога" Тогда
		АвтоПодтверждение = Истина;
	Иначе
		АвтоПодтверждение = Ложь;
	КонецЕсли;
	
	УстановитьВидимость();
КонецПроцедуры


&НаКлиенте
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	Если Объект.Сотрудники.Количество() <2 Тогда
		Возврат;
	КонецЕсли;
	ПерваяСтрока = Объект.Сотрудники[0];
	ТекСтрока = Элементы.Сотрудники.ТекущиеДанные; 
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Сотрудник",ТекСтрока.Сотрудник);
	СтруктураПараметров.Вставить("ВидКорректировки",ПерваяСтрока.ВидКорректировки);
	СтруктураПараметров.Вставить("ДатаК", ПерваяСтрока.ДатаК);
	СтруктураПараметров.Вставить("ЧасовФакт", ПреобразоватьВремяВЧасы(ФактВремя));
	СтруктураПараметров.Вставить("ПричинаКорректировки",ПерваяСтрока.ПричинаКорректировки);
	СтруктураПараметров.Вставить("Комментарий",ПерваяСтрока.Комментарий);
	ЗаполнитьДанныеПоСотруднику(СтруктураПараметров); 
	ЗаполнитьЗначенияСвойств(ТекСтрока,СтруктураПараметров);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоСотруднику(СтруктураПараметров)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник КАК Сотрудник,
	               |	ТабельУчетаРабочегоВремениДанныеОВремени.Должность КАК Должность,
	               |	ТабельУчетаРабочегоВремениДанныеОВремени.ЧасовФактАвто1 КАК ЧасовКорр
	               |ИЗ
	               |	Документ.ТабельУчетаРабочегоВремени.ДанныеОВремени КАК ТабельУчетаРабочегоВремениДанныеОВремени
	               |ГДЕ
	               |	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка = &Ссылка
	               |	И ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник = &Сотрудник";
	Запрос.УстановитьПараметр("Ссылка", Объект.ДокументОснование);
	Запрос.УстановитьПараметр("Сотрудник",СтруктураПараметров.Сотрудник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,".ЧасовФактАвто1",".ЧасовФактАвто"+Формат(СтруктураПараметров.ДатаК,"ДФ=d"));
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		СтруктураПараметров.Вставить("Должность",Результат.Должность);
		СтруктураПараметров.Вставить("ЧасовКорр",Результат.ЧасовКорр);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СотрудникиКомментарий1ПриИзменении(Элемент)
	 ПричинаКорректирвкиПриИзменении(Элемент);
КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекущийОбъект.УстановитьНовыйНомер(Формат(Объект.ДокументОснование.Магазин.НомерМагазина,"ЧЦ=3; ЧДЦ=0; ЧВН=; ЧГ=; ЧФ=Ч-"));
	КонецЕсли;
	
КонецПроцедуры

