///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура заполняет учетное количество товаров в документе
//
Процедура ЗаполнитьКоличествоПоУчету(ТаблицаНоменклатуры = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.КоличествоФакт КАК КоличествоФакт,
	|	Таблица.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт,
	|	Таблица.Цена КАК Цена,
	|	Таблица.СуммаФакт КАК СуммаФакт,
	|	Таблица.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК Количество,
	|	ТаблицаНоменклатуры.КоличествоФакт КАК КоличествоФакт,
	|	ТаблицаНоменклатуры.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт,
	|	ТаблицаНоменклатуры.СуммаФакт КАК СуммаФакт,
	|	ТаблицаНоменклатуры.Цена КАК Цена,
	|	ТаблицаНоменклатуры.Цена * ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК Сумма
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				&ДатаОстатков,
	|				(Номенклатура, Характеристика, Склад) В
	|					(ВЫБРАТЬ
	|						Таблица.Номенклатура,
	|						Таблица.Характеристика,
	|						&Склад
	|					ИЗ
	|						ТаблицаНоменклатуры КАК Таблица)) КАК ТоварыНаСкладахОстатки
	|		ПО ТаблицаНоменклатуры.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ТоварыНаСкладахОстатки.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНоменклатуры.НомерСтроки"
	);
	Запрос.УстановитьПараметр("Склад", Склад);
	ТаблицаНоменклатуры = ?(ТаблицаНоменклатуры = Неопределено, Товары.Выгрузить(), ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
//	LNK 28.02.2017 14:32:30 - с Образовым договрились на "правую" дату приказа
//	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДатаОкончания")));
//	LNK 28.09.2017 14:39:25 - Концепция поменялась. Лавренюк попросил на дату документа, чтобы они могли управлять получением остатков
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Дата"));
	Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	УчетныеДанныеЗаполнены = Истина;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.ПересчетТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ЗапасыСервер.ОтразитьТоварыКОформлениюИзлишковНедостач(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыПересчитанные(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ОбъектКопирования.ДокументОснование.Статус = Перечисления.СтатусыПриказовНаПроведениеИнвентаризацийТоваров.Закрыт Тогда
		
			ТекстСообщения = НСтр("ru='По документу ""%1%"" пересчет завершен'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1%",ОбъектКопирования.ДокументОснование);
			
			ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Статус = Перечисления.СтатусыПересчетовТоваров.ВРаботе;
	ИнициализироватьДокумент();

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
//	LNK 16.02.2017 14:33:05
	ЗаполнениеОбъектовСобытия.ОбщиеДействияПередЗаписью(ЭтотОбъект, Отказ);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

	ДополнительныеСвойства.Вставить("ИсключитьЗапретПоИнвентаризации", ДокументОснование);
	
	Если ОбменДанными.Загрузка ИЛИ ПараметрыСеанса.ВыполняютсяСлужебныеДействия Тогда
		
		Возврат;
		
	КонецЕсли;

	Если НЕ УправлениеДоступомРТ.ДоступныДокументыИнвентаризации(Отказ) Тогда

		Возврат;

	КонецЕсли;
	
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	
	ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
		ЭтотОбъект,
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Товары, Истина),
		"СуммаДокумента");

	Если ДокументОснование.Статус = Перечисления.СтатусыПриказовНаПроведениеИнвентаризацийТоваров.Закрыт Тогда

		ТекстСообщения = НСтр("ru='По документу ""%1%"" пересчет завершен'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1%",ДокументОснование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект,
			"ДокументОснование" ,
			,
			Отказ
		);

	Иначе

		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

			Если НЕ УчетныеДанныеЗаполнены 
				И НЕ Отказ Тогда
				ЗаполнитьКоличествоПоУчету();
			КонецЕсли;

		ИначеЕсли  РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда	

			УчетныеДанныеЗаполнены = Ложь;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если Не УчетныеДанныеЗаполнены Тогда
		ПроверитьНаличиеДублейСтрокВТЧТовары(Отказ);
	КонецЕсли;
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	СкладскиеОперацииСервер.ПроверитьДублиВДругихПересчетах(
		ЭтотОбъект,
		"Товары",
		Отказ,
	);

	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеТЧПриНаличииОбменаСУправлениемТорговлей(
		ЭтотОбъект, 
		Отказ); 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Инициализирует документ
//
Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриказНаПроведениеИнвентаризацииТоваров") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, "Магазин, Организация, Склад");
	КонецЕсли;
	
	Ответственный = Пользователи.ТекущийПользователь();
	Магазин       = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Магазин);
	Организация   = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация,Ответственный);
	Склад         = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Магазин,,Склад, Ответственный);

	УчетныеДанныеЗаполнены = Ложь;

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда

		Если ДанныеЗаполнения.Свойство("Склад")	И НЕ ЗначениеЗаполнено(Склад) Тогда

			Если ЗначениеЗаполнено(Магазин) Тогда

				Если НЕ Справочники.Склады.ПроверитьПринадлежностьСкладаМагазину(Магазин, ДанныеЗаполнения.Склад) Тогда

					ДанныеЗаполнения.Склад = Справочники.Склады.ПустаяСсылка();

				КонецЕсли;

			Иначе

				Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Склад, "Магазин");

			КонецЕсли;

		КонецЕсли;

	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриказНаПроведениеИнвентаризацииТоваров") Тогда
		Если ДанныеЗаполнения.Статус = Перечисления.СтатусыПриказовНаПроведениеИнвентаризацийТоваров.Закрыт Тогда
		
			ТекстСообщения = НСтр("ru='По документу ""%1%"" пересчет завершен'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1%",ДанныеЗаполнения);
			
			ВызватьИсключение ТекстСообщения;

		КонецЕсли;

		ДокументОснование = ДанныеЗаполнения;
		Дата = ТекущаяДатаСеанса();
		
		Если ЗначениеЗаполнено(ДокументОснование.ПравилаОтбораТоваровИнвентаризации) Тогда
			
			Документы.ПересчетТоваров.ЗаполнитьСУчетомОтбора(ЭтотОбъект);

		КонецЕсли;

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда

		ТекстСообщения = НСтр("ru='Пересчет товаров можно вводить только на основании приказа на проведение инвентаризации товаров.'");
		ВызватьИсключение ТекстСообщения;

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьНаличиеДублейСтрокВТЧТовары(Отказ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	СУММА(1) КАК КоличествоДублей
	|ПОМЕСТИТЬ ДублирующиесяСтроки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДублирующиесяСтроки КАК ДублирующиесяСтроки
	|		ПО ТаблицаТовары.Номенклатура = ДублирующиесяСтроки.Номенклатура
	|			И ТаблицаТовары.Характеристика = ДублирующиесяСтроки.Характеристика
	|			И ТаблицаТовары.НомерСтроки <> ДублирующиесяСтроки.НомерСтроки"
	);
	Запрос.УстановитьПараметр("ТаблицаТовары", Товары.Выгрузить(, "НомерСтроки,Номенклатура,Характеристика"));

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		ТекстСообщения = НСтр("ru = 'Строка %НомерСтроки% списка «Товары» дублирует другую строку.'");
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);

		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "НомерСтроки");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);

	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

//Процедура формирует массив имен регистров для контроля проведения
//
Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

//	При проведении выполняется контроль превышения остатков на складах
//	LNK 14.11.2016 11:11:43
	Если ОбщегоНазначенияРТ.НужноЗаполнитьСписокРегистровДляКонтроля(ДополнительныеСвойства.РежимЗаписи, Дата)
	И НЕ ПараметрыСеанса.ВыполняютсяСлужебныеДействия Тогда
		
		Массив.Добавить(Движения.ТоварыПересчитанные);
		
	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

