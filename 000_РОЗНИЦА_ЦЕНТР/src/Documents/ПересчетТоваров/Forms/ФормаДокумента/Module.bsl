&НаКлиенте
Перем КэшированныеЗначения;

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод, Количество = Неопределено, ОбновитьКоличество = Ложь) Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаВесовыхТоваров");
	СтруктураДействий.Вставить("ПроверкаТоваров");
	
	Если НЕ (Количество = Неопределено) Тогда
		
		СтруктураДействий.Вставить("ИспользоватьКоличество", Количество);
		
		Если ОбновитьКоличество Тогда
			СтруктураДействий.Вставить("ОбновитьКоличество", Количество);
		КонецЕсли;
		
	КонецЕсли;

	Возврат ПодключаемоеОборудованиеРТ.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

&НаСервере
Функция ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента) Экспорт
	
	Если НЕ СтруктураПараметров.НеизвестныеДанныеПО Тогда
		Если СтруктураПараметров.Действие = "ПроверкаВесовыхТоваров" Тогда
			ВходящиеПараметры = СтруктураПараметров.ЗначенияПоиска[0];
			НомерСтроки = ДобавитьНайденныеПозицииТоваров(ВходящиеПараметры);
			Если НомерСтроки > 0 Тогда
				СтруктураПараметровКлиента.Вставить("АктивизироватьСтроку", НомерСтроки);
			КонецЕсли;
			СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаТоваров" Тогда
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				Если СтруктураПараметров.ЗначенияПоиска.Количество() = 1 Тогда
					ВходящиеПараметры = СтруктураПараметров.ЗначенияПоиска[0];
					Если СтруктураПараметров.Свойство("ИспользоватьКоличество") Тогда
						ВходящиеПараметры.Вставить("Количество", СтруктураПараметров.ИспользоватьКоличество);
					КонецЕсли;
					Если СтруктураПараметров.Свойство("ОбновитьКоличество") Тогда
						ВходящиеПараметры.Вставить("ОбновитьКоличество", СтруктураПараметров.ИспользоватьКоличество);
					КонецЕсли;
					НомерСтроки = ДобавитьНайденныеПозицииТоваров(ВходящиеПараметры);
					Если НомерСтроки > 0 Тогда
						СтруктураПараметровКлиента.Вставить("АктивизироватьСтроку", НомерСтроки);
					КонецЕсли;
				Иначе
					ТаблицаТоваров = Новый ТаблицаЗначений;
					ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
					ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
					ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
					Для каждого ЗначениеПоиска Из СтруктураПараметров.ЗначенияПоиска Цикл
						ТекущаяСтрока = ТаблицаТоваров.Добавить();
						ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначениеПоиска);
					КонецЦикла;
					СтруктураПараметровКлиента.Вставить("ВыборТоваров", ПоместитьВоВременноеХранилище(ТаблицаТоваров));
				КонецЕсли;
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат СтруктураПараметровКлиента;

КонецФункции

&НаСервере
Функция ОбработатьМассивДанныхПОВФормеСервер(СтруктураПараметров) Экспорт
	
	МассивДанных = СтруктураПараметров.ЗначенияПоиска;
	ОбновитьКоличество = СтруктураПараметров.ОбновитьКоличество;
	
	НомерСтроки = 0;
	Для Каждого СтрокаМасива ИЗ МассивДанных Цикл
		Если ОбновитьКоличество Тогда
			СтрокаМасива.Вставить("ОбновитьКоличество", СтрокаМасива.Количество);
		КонецЕсли;
		НомерСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаМасива);
		Если НомерСтроки > 0 Тогда
			ТекущаяСтрока = Объект.Товары[НомерСтроки - 1];
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницФакт","Факт");
			
			КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Обработка магнитного или штрихового кода на клиенте
//
// Параметры
//  СтруктураПараметровКлиента - структура параметров
//
&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод) Экспорт
	
	Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") 
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
		
		СтрокаСообщения = НСтр("ru = 'Данные по коду не найдены: %1%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекКод);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ТекстПредупреждения") Тогда
		
		ПоказатьПредупреждение(, СтруктураПараметровКлиента.ТекстПредупреждения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ВыборТоваров") Тогда
		
		ВыбранноеЗначение = ОткрытьФормуМодально("ОбщаяФорма.ВыборНоменклатуры", Новый Структура("АдресТоваровВХранилище", СтруктураПараметровКлиента.ВыборТоваров));
		Если ВыбранноеЗначение <> Неопределено Тогда
			
			НомерСтроки = ДобавитьНайденныеПозицииТоваров(ВыбранноеЗначение);
			Если НомерСтроки > 0 Тогда
				СтруктураПараметровКлиента.Вставить("АктивизироватьСтроку", НомерСтроки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НомерСтроки = 0;
	Если СтруктураПараметровКлиента.Свойство("АктивизироватьСтроку", НомерСтроки) Тогда
		
		Если НомерСтроки > 0  Тогда
            НомерСтрокиФормы = Объект.Товары[НомерСтроки - 1].ПолучитьИдентификатор();
			Элементы.Товары.ТекущаяСтрока = НомерСтрокиФормы;      
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда

		Возврат;

	КонецЕсли;

//	LNK 26.12.2016 11:33:34
	Если НЕ УправлениеДоступомРТ.ДоступныДокументыИнвентаризации(Отказ,,, РольДоступна("ЧтениеПересчетовТоваров")) Тогда

		Возврат;

	КонецЕсли;

//	Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);

//	LNK 19.12.2016 11:49:54
//	Сортировка по "вторичным" полям
	РаботаСФормами.ДобавитьКнопкиПорядкаКодАртикул(ЭтотОбъект, Элементы.ТоварыДополнительнаяСортировка);
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект, КартинкаСостоянияДокумента, СостояниеДокумента, РазрешеноПроведение);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбновитьДанныеТЧТовары();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ДокументОснование.ПравилаОтбораТоваровИнвентаризации) Тогда
		СхемаКомпоновкиДанных = Неопределено;
	Иначе
		СхемаИНастройки = Справочники.ПравилаОтбораТоваров.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(Объект.ДокументОснование.ПравилаОтбораТоваровИнвентаризации, Объект.ДокументОснование.ПравилаОтбораТоваровИнвентаризации.СхемаКомпоновкиДанных);
		
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаИНастройки = Справочники.ПравилаОтбораТоваров.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(Объект.ДокументОснование.ПравилаОтбораТоваровИнвентаризации, "ПолнаяИнвентаризация");
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	КонецЕсли;
	
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	
	ОтборПересчетаТоваров.Инициализировать(ИсточникНастроек);
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекНастройки = ТекОбъект.ОтборПересчетаТоваров.Получить();
	Если ТекНастройки = Неопределено Тогда
		ОтборПересчетаТоваров.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		ОтборПересчетаТоваров.Настройки.Отбор.Элементы.Очистить();
	Иначе
		ОтборПересчетаТоваров.ЗагрузитьНастройки(ТекНастройки);
	КонецЕсли;
	
	ПодключаемоеОборудованиеРТ.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	УправлениеЭлементамиФормыНаСервере();
	НастроитьФормуПоДополнительнымПравам();
	
	Элементы.Склад.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Магазин);
	ЭтотОбъект.ТолькоПросмотр = Объект.ДокументОснование.Статус = Перечисления.СтатусыПриказовНаПроведениеИнвентаризацийТоваров.Закрыт;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();

	УправлениеДоступомРТ.ПриСозданииФормыНаСервере(ЭтотОбъект);	//	LNK 17.10.2019 14:30:01
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "";

		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:
			                      |""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	// ПодключаемоеОборудование
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
  	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;
			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекКод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод);
			
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ДокументОснование.ПравилаОтбораТоваровИнвентаризации) Тогда
		СхемаКомпоновкиДанных = Неопределено;
	Иначе
		СхемаИНастройки = Справочники.ПравилаОтбораТоваров.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(Объект.ДокументОснование.ПравилаОтбораТоваровИнвентаризации, Объект.ДокументОснование.ПравилаОтбораТоваровИнвентаризации.СхемаКомпоновкиДанных);
		
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаИНастройки = Справочники.ПравилаОтбораТоваров.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(Объект.ДокументОснование.ПравилаОтбораТоваровИнвентаризации, "ПолнаяИнвентаризация");
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	КонецЕсли;
	
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	
	ОтборПересчетаТоваров.Инициализировать(ИсточникНастроек);
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекНастройки = ТекОбъект.ОтборПересчетаТоваров.Получить();
	Если ТекНастройки = Неопределено Тогда
		ОтборПересчетаТоваров.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		ОтборПересчетаТоваров.Настройки.Отбор.Элементы.Очистить();
	Иначе
		ОтборПересчетаТоваров.ЗагрузитьНастройки(ТекНастройки);
	КонецЕсли;
	
	ОбновитьДанныеТЧТовары();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
//	LNK 22.12.2016 10:10:34
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ИсключитьЗапретПоИнвентаризации", ТекущийОбъект.ДокументОснование);
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И Не Объект.УчетныеДанныеЗаполнены 
		И Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='При проведении будет перезаполнено учетное количество во всех строках табличной части. Продолжить?'");
		
		Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ОКОтмена,,КодВозвратаДиалога.ОК);
		
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.ОтборПересчетаТоваров = Новый ХранилищеЗначения(ОтборПересчетаТоваров.Настройки, Новый СжатиеДанных(9));
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьДанныеТЧТовары();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) 
		И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПриИзмененииСклада();
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОчиститьКоличествоУчет", Новый Структура("НеобходимоОбработатьВсюТЧ", Истина));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, , СтруктураДействий, КэшированныеЗначения);
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
	ОбновитьДанныеТЧТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		ПриИзмененииМагазина();
	КонецЕсли;
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоРасхожденияПриИзменении(Элемент)
	
	Если ТолькоРасхождения Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Расхождение",Истина);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовПоСтатусуКлиент();

КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)

	Объект.Товары.Очистить();
	Объект.ВедомостьИнвентаризационная.Очистить();

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "ТОВАРЫ"

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницФакт", "Факт");
	СтруктураДействий.Вставить("ОчиститьКоличествоУчет");
	СтруктураДействий.Вставить("ПересчитатьСуммуФакт");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
	ОбновитьПоказателиТЧТоварыКлиент(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
		
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокФактПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницФакт","Факт");
	СтруктураДействий.Вставить("ПересчитатьСуммуФакт");  	

	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьПоказателиТЧТоварыКлиент(ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуФакт");

	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьПоказателиТЧТоварыКлиент(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаФактПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеФакт");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьПоказателиТЧТоварыКлиент(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования
		И НоваяСтрока Тогда
		
		Объект.УчетныеДанныеЗаполнены = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		Элементы.Товары.ТекущиеДанные.Количество = 0;
		Элементы.Товары.ТекущиеДанные.КоличествоФакт = 0;
		Элементы.Товары.ТекущиеДанные.КоличествоУпаковок = 0;
		Элементы.Товары.ТекущиеДанные.КоличествоУпаковокФакт = 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьПодвалКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле.Имя = "ТоварыКоличествоУпаковокФакт"
	И НЕ Элемент.ТекущиеДанные.КоличествоФакт = 0
	И НЕ Объект.ВедомостьИнвентаризационная.Количество() = 0	Тогда

		СтандартнаяОбработка = Ложь;
		СоставПараметров = Новый Структура(
			"Номенклатура, Характеристика"
			, Элемент.ТекущиеДанные.Номенклатура, Элемент.ТекущиеДанные.Характеристика);
		СоставПараметров.Вставить("ВедомостьИнвентаризационная", Объект.ВедомостьИнвентаризационная);
		СоставПараметров.Вставить("Ссылка", Объект.Ссылка);

		ОткрытьФорму("Документ.ПересчетТоваров.Форма.ФормаВедомостиПоТовару", СоставПараметров, ЭтотОбъект, ЭтотОбъект,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьЦеныПоРозничнымЦенам(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	Иначе	
		
		Если ЗначениеЗаполнено(Объект.Магазин) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныПоРозничнымЦенамСервер();
			ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоРозничнымЦенам(ЦеныРассчитаны, Объект.Магазин);
			
		КонецЕсли;
		
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦен(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	Иначе	
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
		ВидЦены = ОткрытьФормуМодально("Справочник.ВидыЦен.Форма.ФормаВыбора",	СтруктураПараметров, ЭтотОбъект);
        		
		Если ЗначениеЗаполнено(ВидЦены) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(ВидЦены);
			ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦены);
                                  			
		КонецЕсли;
             		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСебестоимости(Команда)
	
	ЦеныРассчитаны = ЗаполнитьЦеныПоСебестоимостиСервер();
	ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСебестоимости(ЦеныРассчитаны);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", "списание товаров");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	ПараметрыФормы.Вставить("РежимПодбораБезУслуг", Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуВвестиСерийныеНомера", Истина);
	ПараметрыФормы.Вставить("ИспользоватьОтборПоТипамНоменклатуры", Истина);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	Если ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекШтрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекШтрихкод);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, Новый Структура("ПострочнаяЗагрузка", Ложь))
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	Если ПодключаемоеОборудованиеРТКлиент.ПолучитьВесСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, , Истина) Тогда
		ТоварыКоличествоУпаковокФактПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

//	LNK 01.12.2016 15:50:00
&НаКлиенте
Процедура ЗаполнитьПоВедомостямИнвентаризации(Команда)

	ЗаполнитьПоВедомостямИнвентаризацииСервер();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСУчетомОтбора(Команда)
	
	ЗаполнитьПоСхемеИнвентаризацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактПоУчету(Команда)
	
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.КоличествоФакт         = СтрокаТЧ.Количество;
		СтрокаТЧ.КоличествоУпаковокФакт = СтрокаТЧ.КоличествоУпаковок;
	КонецЦикла;
	
	ОбновитьДанныеТЧТовары();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчетноеКоличество(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Текст = НСтр("ru = 'Поле ""Дата"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.Дата",,);
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		Текст = НСтр("ru = 'Поле ""Склад"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.Склад",,);
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ЗаполнитьУчетноеКоличествоСервер();
		ОбновитьДанныеТЧТовары();
	КонецЕсли;
	
КонецПроцедуры

//	LNK 19.12.2016 12:37:21
//	Сортировка по "вторичным" полям
#Область СортировкаПоВторичнымПолям

&НаСервере	//	Общий метод сортировки
Процедура ТоварыСортироватьПоРеквизитуНоменклатурыСервер(ИмяРеквизита, Направление)

	РаботаСФормами.ТоварыСортироватьПоРеквизитуНоменклатуры(ИмяРеквизита, Направление, Объект.Товары);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокКодПоВозрастаниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Код", "Возр");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокКодПоУбываниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Код", "Убыв");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокАртикулПоВозрастаниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Артикул", "Возр");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокАртикулПоУбываниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Артикул", "Убыв");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокПроизводительПоУбываниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Производитель", "Убыв");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокПроизводительПоВозрастаниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Производитель", "Возр");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокТорговаяМаркаПоУбываниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("ТорговаяМарка", "Убыв");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокТорговаяМаркаПоВозрастаниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("ТорговаяМарка", "Возр");

КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УправлениеЭлементамиФормыНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Элементы.Магазин.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Магазин);
		Элементы.Склад.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Склад);
		Элементы.Организация.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Организация);
		
		ОписаниеПравил = Документы.ПриказНаПроведениеИнвентаризацииТоваров.ОписаниеПравилОтбораТоваров(Объект.ДокументОснование);
	Иначе
		
		Элементы.ГруппаОснование.Видимость = Ложь;
		Элементы.Магазин.ТолькоПросмотр = Ложь;
		Элементы.Склад.ТолькоПросмотр = Ложь;
		Элементы.Организация.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		
		Элементы.Склад.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

//	LNK 01.12.2016 15:51:24
&НаСервере
Процедура ЗаполнитьПоВедомостямИнвентаризацииСервер()

	Документы.ПересчетТоваров.ЗаполнитьПоВедомостямИнвентаризации(Объект);

	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);

	ОбновитьДанныеТЧТовары();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСхемеИнвентаризацииСервер()
	
	ОтборИзХранилища = ОтборПересчетаТоваров;
	
	Документы.ПересчетТоваров.ЗаполнитьСУчетомОтбора(Объект, ОтборИзХранилища.ПолучитьНастройки());
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	
	ОбновитьДанныеТЧТовары();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеКартинкиДвижения(ОтклонениеПоКоличеству)

	Если ОтклонениеПоКоличеству = 0 Тогда
		Возврат -1;
	ИначеЕсли ОтклонениеПоКоличеству > 0 Тогда
		Возврат 0;
	Иначе
		Возврат 2;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ОбновитьПодвалСервер()
	
	ИтогОтклонениеПоСумме   = Объект.Товары.Итог("ОтклонениеПоСумме");
	
	ИтогИзлишкиПоПозициям   = Объект.Товары.Итог("ИзлишкиПозиция");
	ИтогИзлишкиПоСумме      = Объект.Товары.Итог("ИзлишкиПоСумме");
	ИтогИзлишкиПоКоличеству = Объект.Товары.Итог("ИзлишкиПоКоличеству");
	
	ИтогНедостачиПоПозициям   = Объект.Товары.Итог("НедостачаПозиция");
	ИтогНедостачиПоСумме      = Объект.Товары.Итог("НедостачиПоСумме");
	ИтогНедостачиПоКоличеству = Объект.Товары.Итог("НедостачиПоКоличеству");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодвалКлиент()
	
	ИтогОтклонениеПоСумме   = Объект.Товары.Итог("ОтклонениеПоСумме");
	
	ИтогИзлишкиПоПозициям   = Объект.Товары.Итог("ИзлишкиПозиция");
	ИтогИзлишкиПоСумме      = Объект.Товары.Итог("ИзлишкиПоСумме");
	ИтогИзлишкиПоКоличеству = Объект.Товары.Итог("ИзлишкиПоКоличеству");
	
	ИтогНедостачиПоПозициям   = Объект.Товары.Итог("НедостачаПозиция");
	ИтогНедостачиПоСумме      = Объект.Товары.Итог("НедостачиПоСумме");
	ИтогНедостачиПоКоличеству = Объект.Товары.Итог("НедостачиПоКоличеству");
	
КонецПроцедуры

//Рассчитывает показатели в ТЧ "Товары"
//
&НаКлиенте
Процедура ОбновитьПоказателиТЧТоварыКлиент(ТекущаяСтрока)
	
	ТекущаяСтрока.ОтклонениеПоСумме      = ТекущаяСтрока.СуммаФакт - ТекущаяСтрока.Сумма;
	ТекущаяСтрока.ОтклонениеПоКоличеству = ТекущаяСтрока.КоличествоУпаковокФакт - ТекущаяСтрока.КоличествоУпаковок; 
	ТекущаяСтрока.Расхождение            = ТекущаяСтрока.ОтклонениеПоКоличеству <> 0 ИЛИ ТекущаяСтрока.Количество <> ТекущаяСтрока.КоличествоФакт;
	ТекущаяСтрока.КартинкаДвижения       = ЗначениеКартинкиДвижения(ТекущаяСтрока.ОтклонениеПоКоличеству);
	
	Если ТекущаяСтрока.ОтклонениеПоКоличеству > 0 Тогда
		ТекущаяСтрока.НедостачиПоСумме      = 0;
		ТекущаяСтрока.НедостачаПозиция      = 0;
		ТекущаяСтрока.НедостачиПоКоличеству = 0;
		ТекущаяСтрока.ИзлишкиПоСумме        = ТекущаяСтрока.ОтклонениеПоСумме;
		ТекущаяСтрока.ИзлишкиПозиция        = 1;
		ТекущаяСтрока.ИзлишкиПоКоличеству   = ТекущаяСтрока.ОтклонениеПоКоличеству;
	ИначеЕсли ТекущаяСтрока.ОтклонениеПоКоличеству < 0 Тогда
		ТекущаяСтрока.НедостачиПоСумме      = - ТекущаяСтрока.ОтклонениеПоСумме;
		ТекущаяСтрока.НедостачаПозиция      = 1;
		ТекущаяСтрока.НедостачиПоКоличеству = - ТекущаяСтрока.ОтклонениеПоКоличеству;
		ТекущаяСтрока.ИзлишкиПоСумме        = 0;
		ТекущаяСтрока.ИзлишкиПозиция        = 0;
		ТекущаяСтрока.ИзлишкиПоКоличеству   = 0;
	Иначе
		ТекущаяСтрока.НедостачиПоСумме      = 0;
		ТекущаяСтрока.НедостачаПозиция      = 0;
		ТекущаяСтрока.НедостачиПоКоличеству = 0;
		ТекущаяСтрока.ИзлишкиПоСумме        = 0;
		ТекущаяСтрока.ИзлишкиПозиция        = 0;
		ТекущаяСтрока.ИзлишкиПоКоличеству   = 0;
	КонецЕсли;
	
КонецПроцедуры

//Процедура заполняет организацию при изменении склада
//
&НаСервере
Процедура ПриИзмененииСклада()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		                                              
		Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Организация");
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура заполняет склад при изменении магазина
//
&НаСервере
Процедура ПриИзмененииМагазина()
	
	Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Объект.Магазин,,Объект.Склад, Пользователи.ТекущийПользователь());
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПриИзмененииСклада();
	КонецЕсли;	
	
КонецПроцедуры

//Функция заполняет цену по себестоимости в ТЧ Товары
//Возвращаемое значение - Булево - Цены рассчитаны
&НаСервере
Функция ЗаполнитьЦеныПоСебестоимостиСервер()
	
	ЦеныРассчитаны  = ЗапасыСервер.ЗаполнитьЦеныПоСебестоимости(Объект, "Товары");
	
	Если ЦеныРассчитаны Тогда
	    ОбновитьДанныеТЧТовары();
	КонецЕсли;	
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

//Функция заполняет цену по розничным ценам в ТЧ Товары
//Возвращаемое значение - Булево - Цены рассчитаны
&НаСервере
Функция ЗаполнитьЦеныПоРозничнымЦенамСервер()
	
	ЦеныРассчитаны  = ЗапасыСервер.ЗаполнитьЦеныПоРозничнымЦенам(Объект, "Товары", Объект.Магазин, Ложь);
	
	Если ЦеныРассчитаны Тогда
	    ОбновитьДанныеТЧТовары();
	КонецЕсли;	
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

//Функция заполняет цену по виду цен в ТЧ Товары
//Возвращаемое значение - Булево - Цены рассчитаны
&НаСервере
Функция ЗаполнитьЦеныПоВидуЦенСервер(ВидЦены)
	
	ЦеныРассчитаны = ЗапасыСервер.ЗаполнитьЦеныПоВидуЦен(Объект, "Товары", ВидЦены, Ложь);
		
	Если ЦеныРассчитаны Тогда
	    ОбновитьДанныеТЧТовары();
	КонецЕсли;	
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеТЧТовары(НомерСтроки = 0)
	Если НомерСтроки = 0 Тогда
		Для каждого СтрокаТЧ Из Объект.Товары Цикл
			ОбновитьДанныеСтрокиТЧТовары(СтрокаТЧ);
		КонецЦикла;
	Иначе
		СтрокаТЧ = Объект.Товары[НомерСтроки - 1];
		ОбновитьДанныеСтрокиТЧТовары(СтрокаТЧ);
	КонецЕсли;
	
	ОбновитьПодвалСервер();
КонецПроцедуры

//Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора
//Параметры:
//Отказ - Булево
&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин"" не заполнено'"), Объект, "Объект.Магазин",,Отказ);
	КонецЕсли;
		
КонецПроцедуры

//Процедура заполняет товары из подбора
//Параметры: 
//ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		СтруктураСтроки.Вставить("Характеристика", СтрокаТовара.Характеристика);
		СтруктураСтроки.Вставить("Упаковка", СтрокаТовара.Упаковка);
		СтруктураСтроки.Вставить("Количество", СтрокаТовара.КоличествоУпаковок);
		
		НомерСтроки = ДобавитьНайденныеПозицииТоваров(СтруктураСтроки);
		Если НомерСтроки > 0 Тогда
			ТекущаяСтрока = Объект.Товары[НомерСтроки - 1];
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницФакт","Факт");
			
			КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЦикла;
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()

	ИзменятьЦену = ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену;
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыЦена.ТолькоПросмотр, ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСуммаФакт.ТолькоПросмотр, ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
//	LNK 04.01.2017 13:54:53
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Номер.ТолькоПросмотр,
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьНомерДокумента);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	Элементы.Склад.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Магазин);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) 
	
	Если СтруктураПараметров.Свойство("Количество") Тогда 
		КоличествоУпаковок = СтруктураПараметров.Количество;
		СтруктураПараметров.Удалить("Количество");
	Иначе
		КоличествоУпаковок = 1;
	КонецЕсли;

	Если СтруктураПараметров.Свойство("ОбновитьКоличество") Тогда 
		СтруктураПараметров.Удалить("ОбновитьКоличество");
		ОбновитьКоличество = Истина;
	Иначе
		ОбновитьКоличество = Ложь;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Штрихкод") Тогда 
		СтруктураПараметров.Удалить("Штрихкод");
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураПараметров);
	
	НомерСтроки = 0;
	Если МассивСтрок.Количество() > 0 Тогда 
		
		ТекущаяСтрока = МассивСтрок[0];
		КоэффициентУпаковки1 = ?(ЗначениеЗаполнено(СтруктураПараметров.Упаковка), СтруктураПараметров.Упаковка.Коэффициент, 1);
		КоэффициентУпаковки2 = ?(ЗначениеЗаполнено(ТекущаяСтрока.Упаковка), ТекущаяСтрока.Упаковка.Коэффициент, 1);

		Если ОбновитьКоличество Тогда  
			ТекущаяСтрока.КоличествоУпаковокФакт = КоличествоУпаковок*КоэффициентУпаковки2/КоэффициентУпаковки1;
		Иначе
			ТекущаяСтрока.КоличествоУпаковокФакт = ТекущаяСтрока.КоличествоУпаковокФакт + КоличествоУпаковок*КоэффициентУпаковки2/КоэффициентУпаковки1;
		КонецЕсли;

		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницФакт", "Факт");
		СтруктураДействий.Вставить("ПересчитатьСуммуФакт");
		
		НомерСтроки = ТекущаяСтрока.НомерСтроки;
	Иначе 
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ТекущаяСтрока.КоличествоУпаковокФакт = КоличествоУпаковок;

		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураПараметров);
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницФакт", "Факт");
		СтруктураДействий.Вставить("ПересчитатьСуммуФакт");
		
		НомерСтроки = ТекущаяСтрока.НомерСтроки;
	КонецЕсли;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	Объект.УчетныеДанныеЗаполнены = Ложь;
	ОбновитьДанныеТЧТовары(НомерСтроки);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары, Неопределено, НомерСтроки);
	
	Модифицированность = Истина;
	Возврат НомерСтроки;
КонецФункции

&НаСервере
Процедура ОбновитьДанныеСтрокиТЧТовары(СтрокаТЧ)
		СтрокаТЧ.СуммаФакт              = СтрокаТЧ.Цена * СтрокаТЧ.КоличествоУпаковокФакт;
		СтрокаТЧ.ОтклонениеПоСумме      = СтрокаТЧ.СуммаФакт - СтрокаТЧ.Сумма; 
		СтрокаТЧ.ОтклонениеПоКоличеству = СтрокаТЧ.КоличествоУпаковокФакт - СтрокаТЧ.КоличествоУпаковок; 
		СтрокаТЧ.Расхождение            = СтрокаТЧ.ОтклонениеПоКоличеству <> 0 ИЛИ СтрокаТЧ.Количество <> СтрокаТЧ.КоличествоФакт;
		СтрокаТЧ.КартинкаДвижения       = ЗначениеКартинкиДвижения(СтрокаТЧ.ОтклонениеПоКоличеству);
		
		Если СтрокаТЧ.ОтклонениеПоКоличеству > 0 Тогда
			СтрокаТЧ.НедостачиПоСумме      = 0;
			СтрокаТЧ.НедостачаПозиция      = 0;
			СтрокаТЧ.НедостачиПоКоличеству = 0;
			СтрокаТЧ.ИзлишкиПоСумме        = СтрокаТЧ.ОтклонениеПоСумме;
			СтрокаТЧ.ИзлишкиПозиция        = 1;
			СтрокаТЧ.ИзлишкиПоКоличеству   = СтрокаТЧ.ОтклонениеПоКоличеству;
		ИначеЕсли СтрокаТЧ.ОтклонениеПоКоличеству < 0 Тогда
			СтрокаТЧ.НедостачиПоСумме      = - СтрокаТЧ.ОтклонениеПоСумме;
			СтрокаТЧ.НедостачаПозиция      = 1;
			СтрокаТЧ.НедостачиПоКоличеству = - СтрокаТЧ.ОтклонениеПоКоличеству;
			СтрокаТЧ.ИзлишкиПоСумме        = 0;
			СтрокаТЧ.ИзлишкиПозиция        = 0;
			СтрокаТЧ.ИзлишкиПоКоличеству   = 0;
		Иначе
			СтрокаТЧ.НедостачиПоСумме      = 0;
			СтрокаТЧ.НедостачаПозиция      = 0;
			СтрокаТЧ.НедостачиПоКоличеству = 0;
			СтрокаТЧ.ИзлишкиПоСумме        = 0;
			СтрокаТЧ.ИзлишкиПозиция        = 0;
			СтрокаТЧ.ИзлишкиПоКоличеству   = 0;
		КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУчетноеКоличествоСервер()
	
	ОбъектЗнач = РеквизитФормыВЗначение("Объект");
	ОбъектЗнач.ЗаполнитьКоличествоПоУчету(Объект.Товары.Выгрузить());
	ЗначениеВРеквизитФормы(ОбъектЗнач, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусу(ПересчетВыполнен)
	
	Элементы.Товары.ТолькоПросмотр 						= ПересчетВыполнен;
	Элементы.Склад.ТолькоПросмотр 						= ПересчетВыполнен;
	Элементы.Дата.ТолькоПросмотр 						= ПересчетВыполнен;
	Элементы.ОтборПересчетаТоваровНастройкиОтбор.ТолькоПросмотр = ПересчетВыполнен;
	Элементы.ТоварыЗаполнить.Доступность 				= НЕ ПересчетВыполнен;
	Элементы.ТоварыЦены.Доступность 					= НЕ ПересчетВыполнен;
	Элементы.ТоварыПоискПоШтрихкоду.Доступность 		= НЕ ПересчетВыполнен;
	Элементы.ТоварыЗагрузитьДанныеИзТСД.Доступность 	= НЕ ПересчетВыполнен;
	Элементы.ТоварыПолучитьВес.Доступность 				= НЕ ПересчетВыполнен;

	Если НЕ ПересчетВыполнен Тогда

		УстановитьДоступностьЭлемента(Элементы.Товары, НЕ Объект.ВедомостьИнвентаризационная.Количество() = 0);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлемента(ЭлементФормы, ЗакрытьДоступ)

	Если ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") ИЛИ ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") Тогда

		Если ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") Тогда

			ЭлементФормы.ИзменятьСоставСтрок = НЕ ЗакрытьДоступ;

		КонецЕсли;

		Для каждого ПодчиненныйЭлемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл

			УстановитьДоступностьЭлемента(ПодчиненныйЭлемент, ЗакрытьДоступ);

		КонецЦикла;

	Иначе

		ЭлементФормы.ТолькоПросмотр = ЗакрытьДоступ;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьДоступностьЭлементовПоСтатусу(Объект.Статус = Перечисления.СтатусыПересчетовТоваров.Выполнено);

//	LNK 27.02.2017 13:11:46
	Если НЕ Объект.Статус = Перечисления.СтатусыПересчетовТоваров.Выполнено Тогда

		Элементы.ТоварыЦена.ТолькоПросмотр  = Ложь;	//	сбросим флаг - в процедуре ниже он будет восстановлен, если не разрешено.
		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыЦена.ТолькоПросмотр, ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовПоСтатусуКлиент()

	УстановитьДоступностьЭлементовПоСтатусу(Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.Выполнено"));

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРезультатыВТекстовыйФайл(Команда)

	Если Модифицированность Тогда

		ПоказатьПредупреждение(, "Отказано! Перед выгрузкой данных необходимо записать документ", 60, "Документ изменён");

	Иначе

		СкладскиеОперацииКлиентСервер.ЗаписатьРезультатыИнвентаризацииВТекстовыйФайл(
			Объект.Ссылка,
			Объект.ВидНоменклатуры,
			ПолноеИмяФайлаTXT,
			СокрЛП(Объект.Номер)
		);

	КонецЕсли;

КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки











