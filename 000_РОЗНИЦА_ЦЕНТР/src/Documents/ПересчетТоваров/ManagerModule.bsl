#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ЗаполнитьСУчетомОтбора(Объект, НастройкиПересчета = Неопределено) Экспорт
	
	ДокументОснование = Объект.ДокументОснование;
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) 
		ИЛИ НЕ ЗначениеЗаполнено(ДокументОснование.ПравилаОтбораТоваровИнвентаризации) Тогда
		СхемаИНастройки = Справочники.ПравилаОтбораТоваров.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(Объект.ДокументОснование.ПравилаОтбораТоваровИнвентаризации, "ПолнаяИнвентаризация");
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
		НастройкиКомпоновкиДанныхПоПриказу = Неопределено;
		НастройкиКомпоновкиДанныхПоСхеме   = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Иначе
		ХранилищеНастроекКомпоновкиДанных = ДокументОснование.ПравилаОтбораТоваровИнвентаризации.ХранилищеНастроекКомпоновкиДанных;
		ХранилищеНастроекКомпоновкиДанныхПоПриказу = ДокументОснование.НастройкиКомпоновкиДанных;
		
		СхемаИНастройки = Справочники.ПравилаОтбораТоваров.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(ДокументОснование.ПравилаОтбораТоваровИнвентаризации, ДокументОснование.ПравилаОтбораТоваровИнвентаризации.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
		НастройкиКомпоновкиДанныхПоПриказу = ХранилищеНастроекКомпоновкиДанныхПоПриказу.Получить();
		НастройкиКомпоновкиДанныхПоСхеме   = ХранилищеНастроекКомпоновкиДанных.Получить();
	КонецЕсли;
	
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапасыСервер.ПроверитьСхемуКомпоновкиДанных(СхемаКомпоновкиДанных, СтрЗаменить(НСтр("ru='Правила отбора товаров ""%ПравилаОтбораТоваров%""'"), "%ПравилаОтбораТоваров%", ДокументОснование.ПравилаОтбораТоваровИнвентаризации)) Тогда
		
		// Заполнение набора данных ТаблицаНоменклатуры
		ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент");
		
		// Подготовка компоновщика макета компоновки данных, загрузка настроек
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		
		
		Если НастройкиПересчета = Неопределено Тогда
			Если НастройкиКомпоновкиДанныхПоПриказу <> Неопределено Тогда
				КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанныхПоПриказу);
				КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
			ИначеЕсли НастройкиКомпоновкиДанныхПоСхеме <> Неопределено Тогда
				КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанныхПоСхеме);
				КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
			Иначе
				КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			КонецЕсли;
		Иначе
			Если НастройкиКомпоновкиДанныхПоПриказу <> Неопределено Тогда
				КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанныхПоПриказу);
			ИначеЕсли НастройкиКомпоновкиДанныхПоСхеме <> Неопределено Тогда
				КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанныхПоСхеме);
			Иначе
				КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			КонецЕсли;
			ОбщегоНазначенияРТКлиентСервер.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Отбор, НастройкиПересчета.Отбор,,Ложь);
			КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
		КонецЕсли;
		
		// Заполнение структуры отчета и выбранных полей.
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		
		ГруппировкаДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаДетальныеЗаписи.Использование = Истина;
		
		КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Номенклатура");
		
		Если ИспользоватьХарактеристикиНоменклатуры Тогда
			ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Характеристика");
		КонецЕсли;
		
		Если ИспользоватьАссортимент Тогда
			ПараметрАссортимента = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИспользоватьАссортимент");
			Если ПараметрАссортимента <> Неопределено Тогда
				ПараметрАссортимента.Значение = Истина;
				ПараметрАссортимента.Использование = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Количество");
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "КоличествоУпаковок");
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "КоличествоФакт");
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "КоличествоУпаковокФакт");
		
		// Компоновка макета и исполнение запроса.
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("Период");
		Если Параметр <> Неопределено Тогда

			Если ЗначениеЗаполнено(Объект.Ссылка) Тогда

				Параметр.Значение = Новый Граница(Новый МоментВремени(Объект.Дата, Объект.Ссылка), ВидГраницы.Исключая);
			
			Иначе

				Параметр.Значение = КонецДня(Объект.Дата);

			КонецЕсли;

		КонецЕсли;

		Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ВидНоменклатуры");
		Если Параметр <> Неопределено Тогда

			Параметр.Значение = Объект.ВидНоменклатуры;

		КонецЕсли;
		
		Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("КонецПериода");
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = КонецДня(Объект.Дата);
		КонецЕсли;
		
		Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("Склад");
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = Объект.Склад;
		КонецЕсли;
		
		Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ФорматМагазина");
		Если Параметр <> Неопределено Тогда
			ФорматМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Склад, Новый Структура("ФорматМагазина", "Магазин.ФорматМагазина")).ФорматМагазина;
			Параметр.Значение = ФорматМагазина;
		КонецЕсли;
		
		Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ДокументОснование");
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = Объект.ДокументОснование;
		КонецЕсли;
		
		Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ПересчетТоваров");
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = Объект.Ссылка;
		КонецЕсли;
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ДанныеОтчета = Новый ТаблицаЗначений();
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		Объект.Товары.Загрузить(ДанныеОтчета);
		Объект.УчетныеДанныеЗаполнены = Истина;
		
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура заполняет табличную часть "Товары" по остаткам
//
Процедура ЗаполнитьПоОстаткамНаСкладе(Объект) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.Номенклатура КАК Номенклатура,
	|	Остатки.Характеристика КАК Характеристика,
	|	Остатки.КоличествоОстаток КАК КоличествоФакт,
	|	Остатки.КоличествоОстаток КАК Количество,
	|	Остатки.КоличествоОстаток КАК КоличествоУпаковокФакт,
	|	Остатки.КоличествоОстаток КАК КоличествоУпаковок
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&Период, Склад = &Склад) КАК Остатки
	|ГДЕ
	|	Остатки.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Остатки.Номенклатура.Наименование");
	
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	Объект.УчетныеДанныеЗаполнены = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьПоВедомостямИнвентаризации(Объект)	Экспорт

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл

		СтрокаТабличнойЧасти.КоличествоФакт = 0;
		СтрокаТабличнойЧасти.КоличествоУпаковокФакт = 0;

	КонецЦикла;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТоварыПересчитанные.Ведомость КАК Ведомость,
	|	ТоварыПересчитанные.Номенклатура,
	|	ТоварыПересчитанные.Характеристика,
	|	СУММА(ТоварыПересчитанные.КоличествоОстаток) КАК Количество
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	РегистрНакопления.ТоварыПересчитанные.Остатки(
	|			,
	|			ДокументОснование = &ДокументОснование
	|				И Номенклатура.ВидНоменклатуры = &ВидНоменклатуры) КАК ТоварыПересчитанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыПересчитанные.Номенклатура,
	|	ТоварыПересчитанные.Характеристика,
	|	ТоварыПересчитанные.Ведомость
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыПересчитанные.КоличествоОстаток) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.Ведомость КАК ВедомостьИнвентаризационная,
	|	Источник.Номенклатура,
	|	Источник.Характеристика,
	|	Источник.Количество,
	|	Источник.Количество КАК КоличествоУпаковок
	|ИЗ
	|	Источник КАК Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.Номенклатура,
	|	Источник.Характеристика,
	|	СУММА(Источник.Количество) КАК КоличествоФакт,
	|	СУММА(Источник.Количество) КАК КоличествоУпаковокФакт
	|ИЗ
	|	Источник КАК Источник
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Номенклатура,
	|	Источник.Характеристика"
	);
	Запрос.УстановитьПараметр("ВидНоменклатуры"  , Объект.ВидНоменклатуры);
	Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументОснование);

	Результаты = Запрос.ВыполнитьПакет();

	Объект.ВедомостьИнвентаризационная.Загрузить(Результаты[1].Выгрузить());

	ТоварыВыборка = Результаты[2].Выбрать();

	Пока ТоварыВыборка.Следующий() Цикл

		СтрокиТовара = Объект.Товары.НайтиСтроки(Новый Структура(
				"Номенклатура, Характеристика"
				, ТоварыВыборка.Номенклатура, ТоварыВыборка.Характеристика));

		Если НЕ СтрокиТовара.Количество() = 0 Тогда

			СтрокаТабличнойЧасти = СтрокиТовара[0];

		Иначе

			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			СтрокаТабличнойЧасти.Номенклатура   = ТоварыВыборка.Номенклатура;
			СтрокаТабличнойЧасти.Характеристика = ТоварыВыборка.Характеристика;

		КонецЕсли;

		СтрокаТабличнойЧасти.КоличествоФакт = ТоварыВыборка.КоличествоФакт;
		СтрокаТабличнойЧасти.КоличествоУпаковокФакт = ТоварыВыборка.КоличествоУпаковокФакт;

	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


////////////////////////////////////////////////////////////////////////////////
// Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПересчетТоваров.Дата КАК Период,
	|	ПересчетТоваров.Ссылка КАК Ссылка,
	|	ПересчетТоваров.Склад КАК Склад,
	|	ПересчетТоваров.Магазин.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач КАК ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач,
	|	ПересчетТоваров.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.ПересчетТоваров КАК ПересчетТоваров
	|ГДЕ
	|	ПересчетТоваров.Ссылка = &Ссылка"
	);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Реквизиты = РезультатЗапроса.Выбрать();
	Реквизиты.Следующий(); 
	
	ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВПараметрыЗапроса(РезультатЗапроса, Реквизиты, Запрос);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПересчетТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПересчетТоваровТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|			ТОГДА СУММА(ПересчетТоваровТовары.КоличествоФакт - ПересчетТоваровТовары.Количество)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КОформлениюОрдеров,
	|	ВЫБОР
	|		КОГДА &ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(ПересчетТоваровТовары.КоличествоФакт - ПересчетТоваровТовары.Количество)
	|	КОНЕЦ КАК КОформлениюАктов,
	|	&Период КАК Период,
	|	&Склад КАК Склад,
	|	&ДокументОснование КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	МАКСИМУМ(ПересчетТоваровТовары.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ПересчетТоваров.Товары КАК ПересчетТоваровТовары
	|ГДЕ
	|	ПересчетТоваровТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПересчетТоваровТовары.Номенклатура,
	|	ПересчетТоваровТовары.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПересчетТоваровТовары.КоличествоФакт - ПересчетТоваровТовары.Количество) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПересчетТоваровТовары.Номенклатура,
	|	ПересчетТоваровТовары.Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|			ТОГДА -СУММА(ПересчетТоваровТовары.КоличествоФакт - ПересчетТоваровТовары.Количество)
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|			ТОГДА 0
	|		ИНАЧЕ -СУММА(ПересчетТоваровТовары.КоличествоФакт - ПересчетТоваровТовары.Количество)
	|	КОНЕЦ,
	|	&Период,
	|	&Склад,
	|	&ДокументОснование,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	МАКСИМУМ(ПересчетТоваровТовары.НомерСтроки)
	|ИЗ
	|	Документ.ПересчетТоваров.Товары КАК ПересчетТоваровТовары
	|ГДЕ
	|	ПересчетТоваровТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПересчетТоваровТовары.Номенклатура,
	|	ПересчетТоваровТовары.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПересчетТоваровТовары.КоличествоФакт - ПересчетТоваровТовары.Количество) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	МИНИМУМ(ТабличнаяЧасть.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&ДокументОснование КАК ДокументОснование,
	|	ТабличнаяЧасть.ВедомостьИнвентаризационная КАК Ведомость,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	СУММА(ТабличнаяЧасть.Количество) КАК Количество
	|ИЗ
	|	Документ.ПересчетТоваров.ВедомостьИнвентаризационная КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.ВедомостьИнвентаризационная,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Результат = Запрос.ВыполнитьПакет();

	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаТоварыКОформлениюИзлишковНедостач", Результат[0].Выгрузить());
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаТоварыПересчитанные", Результат[1].Выгрузить());

КонецПроцедуры // ИнициализироватьДанныеДокумента()


// Добавляет выбранное поле схемы компоновки данных
//
// Параметры:
// ГруппировкаКомпоновкиДанных - ГруппировкаКомпоновкиДанных
// Поле - Строка
//
Процедура ДобавитьВыбранноеПолеСКД(ГруппировкаКомпоновкиДанных, Поле)
	
	ВыбранноеПоле               = ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных(Поле);
	ВыбранноеПоле.Использование = Истина;
	
КонецПроцедуры

#Область ФункционалПечати

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	СводныйДокумент = ?(ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("СводныйДокумент")
		, ПараметрыПечати.СводныйДокумент = Истина И МассивОбъектов.Количество() > 1
		, Ложь);

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПересчетТоваров") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПересчетТоваров", 
			"Инвентаризация товаров", 
			ПечатьИнветаризацияТоваров(МассивОбъектов, ОбъектыПечати, Ложь, СводныйДокумент, ПараметрыВывода),,,Истина);

	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПересчетТоваровПустограф") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПересчетТоваровПустограф", 
			"Инвентаризация товаров (пустая)", 
			ПечатьИнветаризацияТоваров(МассивОбъектов, ОбъектыПечати, Истина, СводныйДокумент, ПараметрыВывода),,,Истина);

	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПересчетТоваровСОтклонением") Тогда	//+HVOYA YURA G. 19.11.2016 13:31:31
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПересчетТоваровСОтклонением", 
		"Инвентаризация товаров (отклонения)", 
		ПечатьИнветаризацияТоваровСОтклонением(МассивОбъектов, ОбъектыПечати, Ложь, СводныйДокумент, ПараметрыВывода),,,Истина);
		
	КонецЕсли;
		
КонецПроцедуры

Функция ПечатьИнветаризацияТоваров(МассивОбъектов, ОбъектыПечати, Пустографка = Ложь, СводныйДокумент, ПараметрыВывода)
		
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;

	КолонкаКодов       = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	ВыводитьКоды       = НЕ ПустаяСтрока(КолонкаКодов);
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Инвентаризация товаров';uk='Інвентаризація товарів'", КодЯзыкаПечать);

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПересчетТоваров_ПересчетТоваров";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&Ключ КАК Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Организация КАК Организация,
	|	Документ.Склад КАК Склад,
	|	Документ.Ответственный.ФизЛицо КАК Ответственный,
	|	Документ.Склад.Организация.Префикс КАК Префикс,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Склад) КАК СкладПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ОрганизацияПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Ответственный.ФизЛицо) КАК ОтветственныйПредставление
	|ИЗ
	|	Документ.ПересчетТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	Товары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА Товары.КоличествоУпаковок = 0
	|			ТОГДА Товары.Цена
	|		ИНАЧЕ Товары.Сумма / Товары.КоличествоУпаковок
	|	КОНЕЦ КАК Цена,
	|	Товары.КоличествоФакт КАК Количество,
	|	Товары.Количество КАК КоличествоУчет,
	|	Товары.СуммаФакт КАК Сумма,
	|	Товары.Сумма КАК СуммаУчет,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА &СводныйДокумент
	|			ТОГДА &Ключ
	|		ИНАЧЕ Товары.Ссылка
	|	КОНЕЦ КАК КлючИтогов,
	|	ВЫБОР
	|		КОГДА &СводныйДокумент
	|			ТОГДА Товары.Номенклатура.Код
	|		ИНАЧЕ Товары.НомерСтроки
	|	КОНЕЦ КАК КлючПорядка
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	Документ.ПересчетТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&МассивОбъектов)
	|	И Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ТаблицаТовары.Номенклатура.Код КАК Код,
	|	ТаблицаТовары.Номенклатура.Артикул КАК Артикул,
	|	ТаблицаТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияПредставление,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА &БезФактическихДанных
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА &БезФактическихДанных
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.КоличествоУчет
	|	КОНЕЦ КАК КоличествоУчет,
	|	ВЫБОР
	|		КОГДА &БезФактическихДанных
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА &БезФактическихДанных
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.СуммаУчет
	|	КОНЕЦ КАК СуммаУчет,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура) КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ТаблицаТовары.КлючИтогов КАК КлючИтогов,
	|	ТаблицаТовары.КлючПорядка КАК КлючПорядка
	|ИЗ
	|	Источник КАК ТаблицаТовары
	|ГДЕ
	|	НЕ &СводныйДокумент = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Ключ,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное,
	|	ТаблицаТовары.Номенклатура.Код,
	|	ТаблицаТовары.Номенклатура.Артикул,
	|	ТаблицаТовары.ЕдиницаИзмерения.Представление,
	|	ТаблицаТовары.ЕдиницаИзмерения,
	|	ТаблицаТовары.Характеристика,
	|	МАКСИМУМ(ТаблицаТовары.Цена),
	|	СУММА(ВЫБОР
	|			КОГДА &БезФактическихДанных
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаТовары.Количество
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА &БезФактическихДанных
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаТовары.КоличествоУчет
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА &БезФактическихДанных
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаТовары.Сумма
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА &БезФактическихДанных
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаТовары.СуммаУчет
	|		КОНЕЦ),
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки),
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура),
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика),
	|	ТаблицаТовары.КлючИтогов,
	|	ТаблицаТовары.КлючПорядка
	|ИЗ
	|	Источник КАК ТаблицаТовары
	|ГДЕ
	|	&СводныйДокумент = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное,
	|	ТаблицаТовары.Номенклатура.Код,
	|	ТаблицаТовары.Номенклатура.Артикул,
	|	ТаблицаТовары.ЕдиницаИзмерения.Представление,
	|	ТаблицаТовары.ЕдиницаИзмерения,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.КлючИтогов,
	|	ТаблицаТовары.КлючПорядка
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючИтогов,
	|	КлючПорядка
	|ИТОГИ ПО
	|	КлючИтогов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	);
	Запрос.УстановитьПараметр("МассивОбъектов"      , МассивОбъектов);
	Запрос.УстановитьПараметр("СводныйДокумент"		, СводныйДокумент);
	Запрос.УстановитьПараметр("Ключ"				, "СВОДНЫЙ");
	Запрос.УстановитьПараметр("БезФактическихДанных", Пустографка);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.ПолучитьМакет("Документ.ПересчетТоваров.ПФ_MXL_ПересчетТоваров" + ?(Пустографка, "Пустая", ""), КодЯзыкаПечать);

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка     = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	
	ОбластьШапкаТаблицыНачало  = Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
	ОбластьСтрокаТаблицыНачало = Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
	ОбластьПодвалТаблицыНачало = Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
	
	ОбластьШапкаТаблицыКолонкаКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьСтрокаТаблицыКолонкаКодов = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
	ОбластьПодвалТаблицыКолонкаКодов = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
	
	ОбластьШапкаТаблицыКолонкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов; 
	
	ОбластьКолонкаТоваров = Макет.Область("КолонкаТоваров");
	
	Если НЕ ВыводитьКоды Тогда
		
		ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		
	КонецЕсли;
	
	ОбластьШапкаТаблицыКолонкаТоваров  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
	ОбластьСтрокаТаблицыКолонкаТоваров = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
	ОбластьПодвалТаблицыКолонкаТоваров = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
	
	ОбластьШапкаТаблицыКонец  = Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	ОбластьСтрокаТаблицыКонец = Макет.ПолучитьОбласть("СтрокаТаблицы|КонецСтроки");
	ОбластьПодвалТаблицыКонец = Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");
	
	ОбластьПодписей      = Макет.ПолучитьОбласть("Подписи");
	ОбластьИтого         = Макет.ПолучитьОбласть("Итого");
	ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");

	СоставШапки = Неопределено;
	
	Если СводныйДокумент Тогда

		СоставШапки = УстановитьИтоговыйТекст(Результаты[1]);

	КонецЕсли;

	ВыборкаПоДокументам = Результаты[?(СводныйДокумент, 0, 1)].Выбрать();
	ВыборкаПоТабличнымЧастям = Результаты[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	ПервыйДокумент = Истина;
	НомерСтрокиСводный = 0;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("КлючИтогов", ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//ЗАГОЛОВОК

		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ?(СводныйДокумент
			, СоставШапки.Заголовок
			, ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента, КодЯзыкаПечать)
		);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		//ШАПКА
		ОбластьШапка.Параметры.Заполнить(ВыборкаПоДокументам);

		Если СводныйДокумент Тогда

			ОбластьШапка.Параметры.Заполнить(СоставШапки);

		КонецЕсли;

		ТабличныйДокумент.Вывести(ОбластьШапка);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаКодов);
			
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров);
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);
		ВсегоНаименований  = 0;
		Итого              = 0;
		ИтогоУчет          = 0;
		
		//СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);

			НомерСтрокиСводный = НомерСтрокиСводный + 1;

			Если СводныйДокумент Тогда

				ОбластьСтрокаТаблицыНачало.Параметры.НомерСтроки = НомерСтрокиСводный;

			КонецЕсли;

			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
			
			Если ВыводитьКоды Тогда
				
				ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Артикул = СокрЛП(ВыборкаПоСтрокамТЧ[КолонкаКодов]);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
				
			КонецЕсли;
			
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
			
			ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);	
			
			ВсегоНаименований = ВсегоНаименований + 1;
			Итого             = Итого + ВыборкаПоСтрокамТЧ.Сумма;
			ИтогоУчет         = ИтогоУчет + ВыборкаПоСтрокамТЧ.СуммаУчет;
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаКодов);
			
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
		
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
		
		//ИТОГО
		Если НЕ Пустографка Тогда

			ОбластьИтого.Параметры.Итого     = Итого;
			ОбластьИтого.Параметры.ИтогоУчет = ИтогоУчет;

		КонецЕсли;

		ТабличныйДокумент.Вывести(ОбластьИтого);

		//СУММА ПРОПИСЬЮ

		Если НЕ Пустографка Тогда

			ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%, на сумму %Итого%';uk='Усього найменувань %ВсегоНаименований%, на суму %Итого%'", КодЯзыкаПечать);
			СуммаКПрописи = Итого;
			
			ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
			ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%", ФормированиеПечатныхФормСервер.ФорматСумм(СуммаКПрописи));
			
			ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
			ОбластьСуммаПрописью.Параметры.СуммаПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(СуммаКПрописи, , КодЯзыкаПечать);

		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		//ПОДПИСИ
		ОбластьПодписей.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьПодписей.Параметры.ОтветственныйПредставление = ?(СводныйДокумент
			, СоставШапки.Ответственный
			, ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный)
		);
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
    	
КонецФункции

//+HVOYA YURA G. 19.11.2016 13:33:33
Функция ПечатьИнветаризацияТоваровСОтклонением(МассивОбъектов, ОбъектыПечати, Пустографка = Ложь, СводныйДокумент, ПараметрыВывода)
		
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;

	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Инвентаризация товаров';uk='Інвентаризація товарів'", КодЯзыкаПечать);

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПересчетТоваров_ПересчетТоваров";
	
	Запрос = Новый Запрос (
	"ВЫБРАТЬ
	|	&Ключ КАК Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Организация КАК Организация,
	|	Документ.Склад КАК Склад,
	|	Документ.Ответственный.ФизЛицо КАК Ответственный,
	|	Документ.Склад.Организация.Префикс КАК Префикс,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Склад) КАК СкладПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ОрганизацияПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Ответственный.ФизЛицо) КАК ОтветственныйПредставление
	|ИЗ
	|	Документ.ПересчетТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &СводныйДокумент
	|			ТОГДА &Ключ
	|		ИНАЧЕ ТаблицаВедущая.Ссылка
	|	КОНЕЦ КАК Ссылка,
	|	ТаблицаВедущая.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаВедущая.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаВедущая.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ТаблицаВедущая.Упаковка.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ТаблицаВедущая.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаВедущая.КоличествоУпаковок = 0
	|			ТОГДА ТаблицаВедущая.Цена
	|		ИНАЧЕ ТаблицаВедущая.Сумма / ТаблицаВедущая.КоличествоУпаковок
	|	КОНЕЦ КАК Цена,
	|	ТаблицаВедущая.КоличествоФакт КАК Количество,
	|	ТаблицаВедущая.Количество КАК КоличествоУчет,
	|	ТаблицаВедущая.СуммаФакт КАК Сумма,
	|	ТаблицаВедущая.Сумма КАК СуммаУчет,
	|	ВЫБОР
	|		КОГДА &СводныйДокумент
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаВедущая.НомерСтроки
	|	КОНЕЦ КАК НомерСтроки,
	|	ТаблицаВедущая.КоличествоФакт - ТаблицаВедущая.Количество КАК Отклонение,
	|	ЕСТЬNULL(ТаблицаРеквизиты.Значение, """") КАК Размер,
	|	ВЫБОР
	|		КОГДА &СводныйДокумент
	|			ТОГДА &Ключ
	|		ИНАЧЕ ТаблицаВедущая.Ссылка
	|	КОНЕЦ КАК КлючИтогов,
	|	ВЫБОР
	|		КОГДА &СводныйДокумент
	|			ТОГДА ТаблицаВедущая.Номенклатура.Код
	|		ИНАЧЕ ТаблицаВедущая.НомерСтроки
	|	КОНЕЦ КАК КлючПорядка
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	Документ.ПересчетТоваров.Товары КАК ТаблицаВедущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ТаблицаРеквизиты
	|		ПО ТаблицаВедущая.Номенклатура = ТаблицаРеквизиты.Ссылка
	|			И (ТаблицаРеквизиты.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.РазмерностьТовара))
	|ГДЕ
	|	ТаблицаВедущая.Ссылка В(&МассивОбъектов)
	|	И ТаблицаВедущая.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ТаблицаТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияПредставление,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Цена КАК Цена,
	|	СУММА(ВЫБОР
	|			КОГДА &БезФактическихДанных
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаТовары.Количество
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА &БезФактическихДанных
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаТовары.КоличествоУчет
	|		КОНЕЦ) КАК КоличествоУчет,
	|	СУММА(ВЫБОР
	|			КОГДА &БезФактическихДанных
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаТовары.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА &БезФактическихДанных
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаТовары.СуммаУчет
	|		КОНЕЦ) КАК СуммаУчет,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура) КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ТаблицаТовары.Номенклатура.Код КАК НоменклатураКод,
	|	ТаблицаТовары.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ТаблицаТовары.Номенклатура.Производитель КАК НоменклатураПроизводитель,
	|	ТаблицаТовары.Размер КАК Размер,
	|	ТаблицаТовары.КлючИтогов КАК КлючИтогов,
	|	ТаблицаТовары.КлючПорядка КАК КлючПорядка
	|ИЗ
	|	Источник КАК ТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное,
	|	ТаблицаТовары.ЕдиницаИзмерения.Представление,
	|	ТаблицаТовары.ЕдиницаИзмерения,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура.Код,
	|	ТаблицаТовары.Номенклатура.Артикул,
	|	ТаблицаТовары.Номенклатура.Производитель,
	|	ТаблицаТовары.Размер,
	|	ТаблицаТовары.КлючИтогов,
	|	ТаблицаТовары.КлючПорядка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТовары.Отклонение) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючИтогов,
	|	КлючПорядка
	|ИТОГИ ПО
	|	КлючИтогов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	);
	Запрос.УстановитьПараметр("МассивОбъектов"      , МассивОбъектов);
	Запрос.УстановитьПараметр("СводныйДокумент"		, СводныйДокумент);
	Запрос.УстановитьПараметр("Ключ"				, "СВОДНЫЙ");
	Запрос.УстановитьПараметр("БезФактическихДанных", Пустографка);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.ПолучитьМакет("Документ.ПересчетТоваров.ПФ_MXL_ПересчетТоваровСОтклонением" + ?(Пустографка, "Пустая", ""), КодЯзыкаПечать);

	// ОБЩИЕ ОБЛАСТИ
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка     		= Макет.ПолучитьОбласть("Шапка");
	ОбластьКолонкаТоваров 	= Макет.Область("КолонкаТоваров");
	ОбластьСтрокаТаблицы 	= Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьПодвалТаблицы 	= Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьИтого         	= Макет.ПолучитьОбласть("Итого"); 
	ОбластьСуммаПрописью 	= Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьПодписи      	= Макет.ПолучитьОбласть("Подписи");    
	
	// ОБЛАСТЬ НАЧАЛО СТРОКИ	
	ОбластьЗаголовокНачало  	= Макет.ПолучитьОбласть("Заголовок|НачалоСтроки");
	ОбластьШапкаНачало  		= Макет.ПолучитьОбласть("Шапка|НачалоСтроки");
	ОбластьШапкаТаблицыНачало  	= Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
	ОбластьСтрокаТаблицыНачало 	= Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
	ОбластьПодвалТаблицыНачало 	= Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
	ОбластьИтогоНачало 			= Макет.ПолучитьОбласть("Итого|НачалоСтроки");
	ОбластьПодписиНачало 		= Макет.ПолучитьОбласть("Подписи|НачалоСтроки");
	
	// ОБЛАСТЬ КОЛОНКА ТОВАРОВ
	ОбластьЗаголовокКолонкаТоваров  	= Макет.ПолучитьОбласть("Заголовок|КолонкаТоваров");
	ОбластьШапкаКолонкаТоваров  		= Макет.ПолучитьОбласть("Шапка|КолонкаТоваров");
	ОбластьШапкаТаблицыКолонкаТоваров  	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
	ОбластьСтрокаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
	ОбластьПодвалТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
	ОбластьИтогоКолонкаТоваров 			= Макет.ПолучитьОбласть("Итого|КолонкаТоваров");
	ОбластьПодписиКолонкаТоваров 		= Макет.ПолучитьОбласть("Подписи|КолонкаТоваров");
	
	// ОБЛАСТЬ КОНЕЦ СТРОКИ
	ОбластьЗаголовокКонец  		= Макет.ПолучитьОбласть("Заголовок|КонецСтроки");
	ОбластьШапкаКонец  			= Макет.ПолучитьОбласть("Шапка|КонецСтроки");
	ОбластьШапкаТаблицыКонец  	= Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	ОбластьСтрокаТаблицыКонец 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КонецСтроки");
	ОбластьПодвалТаблицыКонец 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");
	ОбластьИтогоКонец 			= Макет.ПолучитьОбласть("Итого|КонецСтроки");
	ОбластьПодписиКонец 		= Макет.ПолучитьОбласть("Подписи|КонецСтроки");

	СоставШапки = Неопределено;
	
	Если СводныйДокумент Тогда

		СоставШапки = УстановитьИтоговыйТекст(Результаты[1]);

	КонецЕсли;
	
	// ЗАПОЛНЕНИЕ	
	ВыборкаПоДокументам = Результаты[?(СводныйДокумент, 0, 1)].Выбрать();   	
	ВыборкаПоТабличнымЧастям = Результаты[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	ПервыйДокумент = Истина;
	НомерСтрокиСводный = 0;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("КлючИтогов", ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//ЗАГОЛОВОК
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовокКолонкаТоваров.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьЗаголовокКолонкаТоваров.Параметры.ТекстЗаголовка = ?(СводныйДокумент
			, СоставШапки.Заголовок
			, ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента, КодЯзыкаПечать)
		);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовокНачало);
		ТабличныйДокумент.Присоединить(ОбластьЗаголовокКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьЗаголовокКонец);
		   		
		//ШАПКА
		ОбластьШапкаКолонкаТоваров.Параметры.Заполнить(ВыборкаПоДокументам);	

		Если СводныйДокумент Тогда

			ОбластьШапкаКолонкаТоваров.Параметры.Заполнить(СоставШапки);

		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапкаНачало);
		ТабличныйДокумент.Присоединить(ОбластьШапкаКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьШапкаКонец);
		
		//ШАПКА ТАБЛИЦА
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров); 		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);
		
		ВсегоНаименований  = 0;
		Итого              = 0;
		ИтогоУчет          = 0;
		
		//СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);

			НомерСтрокиСводный = НомерСтрокиСводный + 1;

			Если СводныйДокумент Тогда

				ОбластьСтрокаТаблицыНачало.Параметры.НомерСтроки = НомерСтрокиСводный;

			КонецЕсли;

			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
			
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Производитель = ВыборкаПоСтрокамТЧ.НоменклатураПроизводитель;
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Код = ВыборкаПоСтрокамТЧ.НоменклатураКод;
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Артикул     = ВыборкаПоСтрокамТЧ.НоменклатураАртикул;
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Размерность = ВыборкаПоСтрокамТЧ.Размер;
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
			
			ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);	
			
			ВсегоНаименований = ВсегоНаименований + 1;
			Итого             = Итого + ВыборкаПоСтрокамТЧ.Сумма;
			ИтогоУчет         = ИтогоУчет + ВыборкаПоСтрокамТЧ.СуммаУчет;
			
		КонецЦикла;
		
		//ПОДВАЛ (пустой)
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
		
		//ИТОГО
		Если НЕ Пустографка Тогда
			ОбластьИтогоКонец.Параметры.Итого     = Итого;
			ОбластьИтогоКонец.Параметры.ИтогоУчет = ИтогоУчет;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьИтогоНачало);
		ТабличныйДокумент.Присоединить(ОбластьИтогоКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьИтогоКонец);

		ОбластьПодписиКонец.Параметры.РазницаФактическая = Итого - ИтогоУчет ;
		
		ТабличныйДокумент.Вывести(ОбластьПодписиНачало);
		ТабличныйДокумент.Присоединить(ОбластьПодписиКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьПодписиКонец);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция УстановитьИтоговыйТекст(РезультатЗапроса)

	СоставШапки = Новый Структура(
		"Заголовок, Ответственный, ОрганизацияПредставление, СкладПредставление"
		, ""
		, ""
		, ""
		, ""
	);

	СписокСсылок = Новый Соответствие;

	ВыборкаРеестр = РезультатЗапроса.Выбрать();

	Пока ВыборкаРеестр.Следующий() Цикл

		СоставШапки.Заголовок = СоставШапки.Заголовок + ?(ПустаяСтрока(СоставШапки.Заголовок), "", "; ")
		+ СокрЛП(ВыборкаРеестр.Номер) + " от " + Формат(ВыборкаРеестр.Дата, "ДФ=dd.MM.yyyy");

		Если ЗначениеЗаполнено(ВыборкаРеестр.ОрганизацияПредставление) И СписокСсылок.Получить(ВыборкаРеестр.ОрганизацияПредставление) = Неопределено Тогда

			СоставШапки.ОрганизацияПредставление = СоставШапки.ОрганизацияПредставление + ?(ПустаяСтрока(СоставШапки.ОрганизацияПредставление), "", "; ")
			+ СокрЛП(ВыборкаРеестр.ОрганизацияПредставление);

			СписокСсылок.Вставить(ВыборкаРеестр.ОрганизацияПредставление, Истина);

		КонецЕсли;

		Если ЗначениеЗаполнено(ВыборкаРеестр.СкладПредставление) И СписокСсылок.Получить(ВыборкаРеестр.СкладПредставление) = Неопределено Тогда

			СоставШапки.СкладПредставление = СоставШапки.СкладПредставление + ?(ПустаяСтрока(СоставШапки.СкладПредставление), "", "; ")
			+ СокрЛП(ВыборкаРеестр.СкладПредставление);

			СписокСсылок.Вставить(ВыборкаРеестр.СкладПредставление, Истина);

		КонецЕсли;

		Если ЗначениеЗаполнено(ВыборкаРеестр.Ответственный) И СписокСсылок.Получить(ВыборкаРеестр.Ответственный) = Неопределено Тогда

			СоставШапки.Ответственный = СоставШапки.Ответственный + ?(ПустаяСтрока(СоставШапки.Ответственный), "", "; ")
			+ СокрЛП(ВыборкаРеестр.Ответственный);

			СписокСсылок.Вставить(ВыборкаРеестр.Ответственный, Истина);

		КонецЕсли;

	КонецЦикла;

	СоставШапки.Заголовок = "ИНВЕНТАРИЗАЦИЯ " + СоставШапки.Заголовок;

	Возврат СоставШапки;

КонецФункции

#КонецОбласти

Функция ПечатьИнветаризацияТоваров_УДАЛИТЬ(МассивОбъектов, ОбъектыПечати, Пустографка = Ложь, СводныйДокумент, ПараметрыВывода)
		
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;

	КолонкаКодов       = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	ВыводитьКоды       = НЕ ПустаяСтрока(КолонкаКодов);
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Инвентаризация товаров';uk='Інвентаризація товарів'", КодЯзыкаПечать);

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПересчетТоваров_ПересчетТоваров";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Организация КАК Организация,
	|	Документ.Склад КАК Склад,
	|	Документ.Ответственный.ФизЛицо КАК Ответственный,
	|	Документ.Склад.Организация.Префикс КАК Префикс,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Склад) КАК СкладПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ОрганизацияПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Ответственный.ФизЛицо) КАК ОтветственныйПредставление
	|ИЗ
	|	Документ.ПересчетТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ТаблицаТовары.Номенклатура.Код КАК Код,
	|	ТаблицаТовары.Номенклатура.Артикул КАК Артикул,
	|	ТаблицаТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияПредставление,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА &БезФактическихДанных
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА &БезФактическихДанных
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.КоличествоУчет
	|	КОНЕЦ КАК КоличествоУчет,
	|	ВЫБОР
	|		КОГДА &БезФактическихДанных
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА &БезФактическихДанных
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.СуммаУчет
	|	КОНЕЦ КАК СуммаУчет,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура) КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ТаблицаТовары.КлючИтогов КАК КлючИтогов,
	|	ТаблицаТовары.КлючПорядка КАК КлючПорядка
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.Ссылка КАК Ссылка,
	|		Товары.Номенклатура КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА Товары.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		Товары.Характеристика КАК Характеристика,
	|		ВЫБОР
	|			КОГДА Товары.КоличествоУпаковок = 0
	|				ТОГДА Товары.Цена
	|			ИНАЧЕ Товары.Сумма / Товары.КоличествоУпаковок
	|		КОНЕЦ КАК Цена,
	|		Товары.КоличествоФакт КАК Количество,
	|		Товары.Количество КАК КоличествоУчет,
	|		Товары.СуммаФакт КАК Сумма,
	|		Товары.Сумма КАК СуммаУчет,
	|		Товары.НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА &СводныйДокумент
	|				ТОГДА ""СВОДНЫЙ""
	|			ИНАЧЕ Товары.Ссылка
	|		КОНЕЦ КАК КлючИтогов,
	|		ВЫБОР
	|			КОГДА &СводныйДокумент
	|				ТОГДА Товары.Номенклатура.Код
	|			ИНАЧЕ Товары.НомерСтроки
	|		КОНЕЦ КАК КлючПорядка
	|	ИЗ
	|		Документ.ПересчетТоваров.Товары КАК Товары
	|	ГДЕ
	|		Товары.Ссылка В(&МассивОбъектов)
	|		И Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)) КАК ТаблицаТовары
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючИтогов,
	|	КлючПорядка
	|ИТОГИ ПО
	|	КлючИтогов"
	);
	Запрос.УстановитьПараметр("МассивОбъектов"      , МассивОбъектов);
	Запрос.УстановитьПараметр("СводныйДокумент"		, СводныйДокумент);
	Запрос.УстановитьПараметр("БезФактическихДанных", Пустографка);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.ПолучитьМакет("Документ.ПересчетТоваров.ПФ_MXL_ПересчетТоваров" + ?(Пустографка, "Пустая", ""), КодЯзыкаПечать);

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка     = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	
	ОбластьШапкаТаблицыНачало  = Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
	ОбластьСтрокаТаблицыНачало = Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
	ОбластьПодвалТаблицыНачало = Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
	
	ОбластьШапкаТаблицыКолонкаКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьСтрокаТаблицыКолонкаКодов = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
	ОбластьПодвалТаблицыКолонкаКодов = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
	
	ОбластьШапкаТаблицыКолонкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов; 
	
	ОбластьКолонкаТоваров = Макет.Область("КолонкаТоваров");
	
	Если НЕ ВыводитьКоды Тогда
		
		ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		
	КонецЕсли;
	
	ОбластьШапкаТаблицыКолонкаТоваров  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
	ОбластьСтрокаТаблицыКолонкаТоваров = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
	ОбластьПодвалТаблицыКолонкаТоваров = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
	
	ОбластьШапкаТаблицыКонец  = Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	ОбластьСтрокаТаблицыКонец = Макет.ПолучитьОбласть("СтрокаТаблицы|КонецСтроки");
	ОбластьПодвалТаблицыКонец = Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");
	
	ОбластьПодписей      = Макет.ПолучитьОбласть("Подписи");
	ОбластьИтого         = Макет.ПолучитьОбласть("Итого");
	ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	
	ВыборкаПоТабличнымЧастям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("КлючИтогов", ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//ЗАГОЛОВОК
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента, КодЯзыкаПечать);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		//ШАПКА
		ОбластьШапка.Параметры.Заполнить(ВыборкаПоДокументам);	
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаКодов);
			
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров);
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);
		ВсегоНаименований  = 0;
		Итого              = 0;
		ИтогоУчет          = 0;
		
		//СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
			
			Если ВыводитьКоды Тогда
				
				ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Артикул = СокрЛП(ВыборкаПоСтрокамТЧ[КолонкаКодов]);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
				
			КонецЕсли;
			
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
			
			ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);	
			
			ВсегоНаименований = ВсегоНаименований + 1;
			Итого             = Итого + ВыборкаПоСтрокамТЧ.Сумма;
			ИтогоУчет         = ИтогоУчет + ВыборкаПоСтрокамТЧ.СуммаУчет;
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаКодов);
			
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
		
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
		
		//ИТОГО
		Если НЕ Пустографка Тогда

			ОбластьИтого.Параметры.Итого     = Итого;
			ОбластьИтого.Параметры.ИтогоУчет = ИтогоУчет;

		КонецЕсли;

		ТабличныйДокумент.Вывести(ОбластьИтого);

		//СУММА ПРОПИСЬЮ

		Если НЕ Пустографка Тогда

			ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%, на сумму %Итого%';uk='Усього найменувань %ВсегоНаименований%, на суму %Итого%'", КодЯзыкаПечать);
			СуммаКПрописи = Итого;
			
			ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
			ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%", ФормированиеПечатныхФормСервер.ФорматСумм(СуммаКПрописи));
			
			ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
			ОбластьСуммаПрописью.Параметры.СуммаПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(СуммаКПрописи, , КодЯзыкаПечать);

		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		//ПОДПИСИ
		ОбластьПодписей.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьПодписей.Параметры.ОтветственныйПредставление = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
    	
КонецФункции

//+HVOYA YURA G. 19.11.2016 13:33:33
Функция ПечатьИнветаризацияТоваровСОтклонением_УДАЛИТЬ(МассивОбъектов, ОбъектыПечати, Пустографка = Ложь, СводныйДокумент, ПараметрыВывода)
		
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;

	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Инвентаризация товаров';uk='Інвентаризація товарів'", КодЯзыкаПечать);

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПересчетТоваров_ПересчетТоваров";
	
	Запрос = Новый Запрос (
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Организация КАК Организация,
	|	Документ.Склад КАК Склад,
	|	Документ.Ответственный.ФизЛицо КАК Ответственный,
	|	Документ.Склад.Организация.Префикс КАК Префикс,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Склад) КАК СкладПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ОрганизацияПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Ответственный.ФизЛицо) КАК ОтветственныйПредставление
	|ИЗ
	|	Документ.ПересчетТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ТаблицаТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияПредставление,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА &БезФактическихДанных
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА &БезФактическихДанных
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.КоличествоУчет
	|	КОНЕЦ КАК КоличествоУчет,
	|	ВЫБОР
	|		КОГДА &БезФактическихДанных
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА &БезФактическихДанных
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.СуммаУчет
	|	КОНЕЦ КАК СуммаУчет,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура) КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ТаблицаТовары.Номенклатура.Код КАК НоменклатураКод,
	|	ТаблицаТовары.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ТаблицаТовары.Номенклатура.Производитель КАК НоменклатураПроизводитель,
	|	ТаблицаТовары.Размер КАК Размер,
	|	ТаблицаТовары.КлючИтогов КАК КлючИтогов,
	|	ТаблицаТовары.КлючПорядка КАК КлючПорядка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаВедущая.Ссылка КАК Ссылка,
	|		ТаблицаВедущая.Номенклатура КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА ТаблицаВедущая.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ТаблицаВедущая.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ ТаблицаВедущая.Упаковка.ЕдиницаИзмерения
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		ТаблицаВедущая.Характеристика КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ТаблицаВедущая.КоличествоУпаковок = 0
	|				ТОГДА ТаблицаВедущая.Цена
	|			ИНАЧЕ ТаблицаВедущая.Сумма / ТаблицаВедущая.КоличествоУпаковок
	|		КОНЕЦ КАК Цена,
	|		ТаблицаВедущая.КоличествоФакт КАК Количество,
	|		ТаблицаВедущая.Количество КАК КоличествоУчет,
	|		ТаблицаВедущая.СуммаФакт КАК Сумма,
	|		ТаблицаВедущая.Сумма КАК СуммаУчет,
	|		ТаблицаВедущая.НомерСтроки КАК НомерСтроки,
	|		ТаблицаВедущая.КоличествоФакт - ТаблицаВедущая.Количество КАК Отклонение,
	|		ЕСТЬNULL(ТаблицаРеквизиты.Значение, """") КАК Размер,
	|		ВЫБОР
	|			КОГДА &СводныйДокумент
	|				ТОГДА ""СВОДНЫЙ""
	|			ИНАЧЕ ТаблицаВедущая.Ссылка
	|		КОНЕЦ КАК КлючИтогов,
	|		ВЫБОР
	|			КОГДА &СводныйДокумент
	|				ТОГДА ТаблицаВедущая.Номенклатура.Код
	|			ИНАЧЕ ТаблицаВедущая.НомерСтроки
	|		КОНЕЦ КАК КлючПорядка
	|	ИЗ
	|		Документ.ПересчетТоваров.Товары КАК ТаблицаВедущая
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ТаблицаРеквизиты
	|			ПО ТаблицаВедущая.Номенклатура = ТаблицаРеквизиты.Ссылка
	|				И (ТаблицаРеквизиты.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.РазмерностьТовара))
	|	ГДЕ
	|		ТаблицаВедущая.Ссылка В(&МассивОбъектов)
	|		И ТаблицаВедущая.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)) КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Отклонение <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючИтогов,
	|	КлючПорядка
	|ИТОГИ ПО
	|	КлючИтогов"
	);
	Запрос.УстановитьПараметр("МассивОбъектов"      , МассивОбъектов);
	Запрос.УстановитьПараметр("СводныйДокумент"		, СводныйДокумент);
	Запрос.УстановитьПараметр("БезФактическихДанных", Пустографка);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.ПолучитьМакет("Документ.ПересчетТоваров.ПФ_MXL_ПересчетТоваровСОтклонением" + ?(Пустографка, "Пустая", ""), КодЯзыкаПечать);

	// ОБЩИЕ ОБЛАСТИ
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка     		= Макет.ПолучитьОбласть("Шапка");
	ОбластьКолонкаТоваров 	= Макет.Область("КолонкаТоваров");
	ОбластьСтрокаТаблицы 	= Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьПодвалТаблицы 	= Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьИтого         	= Макет.ПолучитьОбласть("Итого"); 
	ОбластьСуммаПрописью 	= Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьПодписи      	= Макет.ПолучитьОбласть("Подписи");    
	
	// ОБЛАСТЬ НАЧАЛО СТРОКИ	
	ОбластьЗаголовокНачало  	= Макет.ПолучитьОбласть("Заголовок|НачалоСтроки");
	ОбластьШапкаНачало  		= Макет.ПолучитьОбласть("Шапка|НачалоСтроки");
	ОбластьШапкаТаблицыНачало  	= Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
	ОбластьСтрокаТаблицыНачало 	= Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
	ОбластьПодвалТаблицыНачало 	= Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
	ОбластьИтогоНачало 			= Макет.ПолучитьОбласть("Итого|НачалоСтроки");
	ОбластьПодписиНачало 		= Макет.ПолучитьОбласть("Подписи|НачалоСтроки");
	
	// ОБЛАСТЬ КОЛОНКА ТОВАРОВ
	ОбластьЗаголовокКолонкаТоваров  	= Макет.ПолучитьОбласть("Заголовок|КолонкаТоваров");
	ОбластьШапкаКолонкаТоваров  		= Макет.ПолучитьОбласть("Шапка|КолонкаТоваров");
	ОбластьШапкаТаблицыКолонкаТоваров  	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
	ОбластьСтрокаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
	ОбластьПодвалТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
	ОбластьИтогоКолонкаТоваров 			= Макет.ПолучитьОбласть("Итого|КолонкаТоваров");
	ОбластьПодписиКолонкаТоваров 		= Макет.ПолучитьОбласть("Подписи|КолонкаТоваров");
	
	// ОБЛАСТЬ КОНЕЦ СТРОКИ
	ОбластьЗаголовокКонец  		= Макет.ПолучитьОбласть("Заголовок|КонецСтроки");
	ОбластьШапкаКонец  			= Макет.ПолучитьОбласть("Шапка|КонецСтроки");
	ОбластьШапкаТаблицыКонец  	= Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	ОбластьСтрокаТаблицыКонец 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КонецСтроки");
	ОбластьПодвалТаблицыКонец 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");
	ОбластьИтогоКонец 			= Макет.ПолучитьОбласть("Итого|КонецСтроки");
	ОбластьПодписиКонец 		= Макет.ПолучитьОбласть("Подписи|КонецСтроки");
	
	// ЗАПОЛНЕНИЕ	
	ВыборкаПоДокументам = Результаты[0].Выбрать();   	
	ВыборкаПоТабличнымЧастям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("КлючИтогов", ВыборкаПоДокументам.Ссылка)) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//ЗАГОЛОВОК
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовокКолонкаТоваров.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьЗаголовокКолонкаТоваров.Параметры.ТекстЗаголовка = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента, КодЯзыкаПечать);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовокНачало);
		ТабличныйДокумент.Присоединить(ОбластьЗаголовокКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьЗаголовокКонец);
		   		
		//ШАПКА
		ОбластьШапкаКолонкаТоваров.Параметры.Заполнить(ВыборкаПоДокументам);	
		
		ТабличныйДокумент.Вывести(ОбластьШапкаНачало);
		ТабличныйДокумент.Присоединить(ОбластьШапкаКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьШапкаКонец);
		
		//ШАПКА ТАБЛИЦА
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров); 		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);
		
		ВсегоНаименований  = 0;
		Итого              = 0;
		ИтогоУчет          = 0;
		
		//СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
			
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Производитель = ВыборкаПоСтрокамТЧ.НоменклатураПроизводитель;
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Код = ВыборкаПоСтрокамТЧ.НоменклатураКод;
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Артикул     = ВыборкаПоСтрокамТЧ.НоменклатураАртикул;
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Размерность = ВыборкаПоСтрокамТЧ.Размер;
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
			
			ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);	
			
			ВсегоНаименований = ВсегоНаименований + 1;
			Итого             = Итого + ВыборкаПоСтрокамТЧ.Сумма;
			ИтогоУчет         = ИтогоУчет + ВыборкаПоСтрокамТЧ.СуммаУчет;
			
		КонецЦикла;
		
		//ПОДВАЛ (пустой)
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
		
		//ИТОГО
		Если НЕ Пустографка Тогда
			ОбластьИтогоКонец.Параметры.Итого     = Итого;
			ОбластьИтогоКонец.Параметры.ИтогоУчет = ИтогоУчет;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьИтогоНачало);
		ТабличныйДокумент.Присоединить(ОбластьИтогоКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьИтогоКонец);

		//СУММА ПРОПИСЬЮ  		
		//Если НЕ Пустографка Тогда
		//	ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%, на сумму %Итого%';uk='Усього найменувань %ВсегоНаименований%, на суму %Итого%'", КодЯзыкаПечать);
		//	СуммаКПрописи = Итого;
		//	
		//	ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		//	ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%", ФормированиеПечатныхФормСервер.ФорматСумм(СуммаКПрописи));
		//	
		//	ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
		//	ОбластьСуммаПрописью.Параметры.СуммаПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(СуммаКПрописи, , КодЯзыкаПечать);
		//КонецЕсли;
		//ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		//ПОДПИСИ
		//ОбластьПодписей.Параметры.Заполнить(ВыборкаПоДокументам);
		//ОбластьПодписей.Параметры.ОтветственныйПредставление = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		ОбластьПодписиКонец.Параметры.РазницаФактическая = Итого - ИтогоУчет ;
		
		ТабличныйДокумент.Вывести(ОбластьПодписиНачало);
		ТабличныйДокумент.Присоединить(ОбластьПодписиКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьПодписиКонец);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецЕсли







