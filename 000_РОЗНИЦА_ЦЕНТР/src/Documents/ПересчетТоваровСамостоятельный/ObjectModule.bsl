#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьКоличествоПоУчету(ТаблицаНоменклатуры = Неопределено) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.КоличествоФакт КАК КоличествоФакт,
	|	Таблица.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт,
	|	Таблица.Цена КАК Цена,
	|	Таблица.СуммаФакт КАК СуммаФакт,
	|	Таблица.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК Количество,
	|	ТаблицаНоменклатуры.КоличествоФакт КАК КоличествоФакт,
	|	ТаблицаНоменклатуры.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт,
	|	ТаблицаНоменклатуры.СуммаФакт КАК СуммаФакт,
	|	ТаблицаНоменклатуры.Цена КАК Цена,
	|	ТаблицаНоменклатуры.Цена * ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК Сумма
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				&ДатаОстатков,
	|				(Номенклатура, Характеристика, Склад) В
	|					(ВЫБРАТЬ
	|						Таблица.Номенклатура,
	|						Таблица.Характеристика,
	|						&Склад
	|					ИЗ
	|						ТаблицаНоменклатуры КАК Таблица)) КАК ТоварыНаСкладахОстатки
	|		ПО ТаблицаНоменклатуры.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ТоварыНаСкладахОстатки.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНоменклатуры.НомерСтроки"
	);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ?(ТаблицаНоменклатуры = Неопределено, Товары.Выгрузить(), ТаблицаНоменклатуры));

	Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	УчетныеДанныеЗаполнены = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийОбъекта

Процедура ПриКопировании(ОбъектКопирования)

	IDN = "";
	Комментарий = "";

	Если НЕ ТехническаяПоддержкаВызовСервера.ОтладочныйРежимРаботы() Тогда

		Товары.Очистить();

	КонецЕсли;

	ИнициализироватьДокумент();

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
//	LNK 16.02.2017 14:33:05
	ЗаполнениеОбъектовСобытия.ОбщиеДействияПередЗаписью(ЭтотОбъект, Отказ);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый"   , ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	ДополнительныеСвойства.Вставить("Проведен"   , ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Проведен", Ложь));

	Если ОбменДанными.Загрузка Тогда

		Возврат;

	КонецЕсли;

	Если ЭтоНовый() Тогда

		УстановитьСсылкуНового(Документы.ПересчетТоваровСамостоятельный.ПолучитьСсылку());
		ДополнительныеСвойства.Вставить("ИсключитьЗапретПоИнвентаризации", ПолучитьСсылкуНового());

	Иначе

		ДополнительныеСвойства.Вставить("ИсключитьЗапретПоИнвентаризации", Ссылка);

	КонецЕсли;

	Если ВидНоменклатуры.Пустая() И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

		Отказ = Истина;
		Сообщить("В проведении отказано! Проект не указан.");
		Возврат;

	КонецЕсли;

	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	
	ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
		ЭтотОбъект,
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Товары, Истина),
		"СуммаДокумента");

	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

		Если ПроверитьТабличнуюЧастьТовары(Отказ) Тогда

			Если НЕ УчетныеДанныеЗаполнены И НЕ Отказ Тогда

				ЗаполнитьКоличествоПоУчету();

			КонецЕсли;

		КонецЕсли;

		Если НЕ (Отказ ИЛИ ВнешниеИсточникиСобытия.ПередачаNavision(Ссылка)) Тогда

			ДополнительныеСвойства.Вставить("РегистрацияПередачиВNavision", Истина);

		КонецЕсли;

	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда	

		УчетныеДанныеЗаполнены = Ложь;

	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда

		Возврат;

	КонецЕсли;

//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
	И	 ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "РегистрацияПередачиВNavision", Ложь) Тогда

		ВнешниеИсточникиСобытия.УстановитьПереданоNavision(Ссылка, ОбщегоНазначенияРТСервер.ПолучитьМагазиныПоОбъекту(Ссылка)
			, Перечисления.ВидыПередачиNavision.ПереданВNavision,,,, Истина);

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПереоценкаТоваровНаСкладах") Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Шапка.Дата КАК Дата,
		|	Шапка.ВидНоменклатуры КАК ВидНоменклатуры,
		|	Шапка.Магазин КАК Магазин,
		|	Шапка.Магазин.СкладПродажи КАК Склад,
		|	Шапка.Магазин.Организация КАК Организация
		|ИЗ
		|	Документ.ПереоценкаТоваровНаСкладах КАК Шапка
		|ГДЕ
		|	Шапка.Ссылка = &ДанныеЗаполнения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.КоличествоФакт * ВЫБОР
		|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА 1
		|		ИНАЧЕ Товары.Упаковка.Коэффициент
		|	КОНЕЦ КАК КоличествоФакт,
		|	Товары.КоличествоФакт КАК КоличествоУпаковокФакт,
		|	Товары.Упаковка КАК Упаковка
		|ИЗ
		|	Документ.ПереоценкаТоваровНаСкладах.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &ДанныеЗаполнения
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		);
		Запрос.УстановитьПараметр("ДанныеЗаполнения", ДанныеЗаполнения);
		
		Результаты = Запрос.ВыполнитьПакет();

		Шапка = Результаты[0].Выбрать();
		Шапка.Следующий();

		Дата            = Шапка.Дата;
		ДатаОстатков    = Шапка.Дата - 1;
		ДатаГлубиныИнвентаризации = ДобавитьМесяц(Дата, -1);
		Магазин         = Шапка.Магазин;
		Склад           = Шапка.Склад;
		Организация     = Шапка.Организация;
		ВидНоменклатуры = Шапка.ВидНоменклатуры;
		Ответственный   = Пользователи.ТекущийПользователь();
		
		Товары.Загрузить(Результаты[1].Выгрузить());

		ЗапасыСервер.ЗаполнитьЦеныПоРозничнымЦенам(ЭтотОбъект, "Товары", Магазин, Ложь);
		ЗаполнитьКоличествоПоУчету(Товары.Выгрузить());

		УчетныеДанныеЗаполнены = Истина;

	Иначе

		ИнициализироватьДокумент(ДанныеЗаполнения);

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;

	Если НЕ УчетныеДанныеЗаполнены Тогда

		ПроверитьНаличиеДублейСтрокВТЧТовары(Отказ);

	КонецЕсли;

	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.ПересчетТоваровСамостоятельный.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеСервер.ОтразитьДвиженияПоРегистру("ТоварыНаМагазинах", ДополнительныеСвойства, Движения, Отказ); 
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОграниченияДвиженийПоИнвентаризации(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Магазин = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Магазин);

	РеквизитыМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Магазин, "Организация, СкладПродажи");

	Дата          = ТекущаяДатаСеанса();
	Организация   = РеквизитыМагазина.Организация;
	Склад         = РеквизитыМагазина.СкладПродажи;
	Ответственный = Пользователи.ТекущийПользователь();

	ДатаОстатков  = НачалоДня(ТекущаяДатаСеанса()) - 1;
	ДатаГлубиныИнвентаризации = ДобавитьМесяц(Дата, -1);

	УчетныеДанныеЗаполнены = Ложь;

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда


	КонецЕсли;

КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

//	При проведении выполняется контроль превышения остатков на складах
	Если ОбщегоНазначенияРТ.НужноЗаполнитьСписокРегистровДляКонтроля(ДополнительныеСвойства.РежимЗаписи, Дата) Тогда
		
		Массив.Добавить(Движения.ТоварыНаСкладах);
		
	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Процедура ПроверитьНаличиеДублейСтрокВТЧТовары(Отказ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	СУММА(1) КАК КоличествоДублей
	|ПОМЕСТИТЬ ДублирующиесяСтроки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДублирующиесяСтроки КАК ДублирующиесяСтроки
	|		ПО ТаблицаТовары.Номенклатура = ДублирующиесяСтроки.Номенклатура
	|			И ТаблицаТовары.Характеристика = ДублирующиесяСтроки.Характеристика
	|			И ТаблицаТовары.НомерСтроки <> ДублирующиесяСтроки.НомерСтроки"
	);
	Запрос.УстановитьПараметр("ТаблицаТовары", Товары.Выгрузить(, "НомерСтроки,Номенклатура,Характеристика"));

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		ТекстСообщения = НСтр("ru = 'Строка %НомерСтроки% списка «Товары» дублирует другую строку.'");
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);

		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "НомерСтроки");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);

	КонецЦикла;

КонецПроцедуры

Функция ПроверитьТабличнуюЧастьТовары(Отказ)

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл

		Если СтрокаТабличнойЧасти.КоличествоФакт < 0 Тогда

			Отказ = Истина;
			Сообщить("Отрицательный факт в строке " + СтрокаТабличнойЧасти.НомерСтроки);

		КонецЕсли;

	КонецЦикла;

	Возврат НЕ Отказ;

КонецФункции

#КонецОбласти










