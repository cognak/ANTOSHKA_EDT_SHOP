&НаКлиенте
Перем КэшированныеЗначения;

&НаСервере
Перем ДанныеНоменклатуры;

&НаКлиенте
Перем БылоИзменениеКоличествоФакт;

#Область ПрограммныйИнтерфейс

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод, Количество = Неопределено, ОбновитьКоличество = Ложь) Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверкаВесовыхТоваров");
	СтруктураДействий.Вставить("ПроверкаТоваров");
	
	Если НЕ (Количество = Неопределено) Тогда
		
		СтруктураДействий.Вставить("ИспользоватьКоличество", Количество);
		
		Если ОбновитьКоличество Тогда
			СтруктураДействий.Вставить("ОбновитьКоличество", Количество);
		КонецЕсли;
		
	КонецЕсли;

	Возврат ПодключаемоеОборудованиеРТ.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект, СтруктураДействий);
	
КонецФункции

&НаСервере
Функция ОбработатьДанныеПОВФормеСервер(СтруктураПараметров, СтруктураПараметровКлиента) Экспорт
	
	Если НЕ СтруктураПараметров.НеизвестныеДанныеПО Тогда
		Если СтруктураПараметров.Действие = "ПроверкаВесовыхТоваров" Тогда
			ВходящиеПараметры = СтруктураПараметров.ЗначенияПоиска[0];
			НомерСтроки = ДобавитьНайденныеПозицииТоваров(ВходящиеПараметры);
			Если НомерСтроки > 0 Тогда
				СтруктураПараметровКлиента.Вставить("АктивизироватьСтроку", НомерСтроки);
			КонецЕсли;
			СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
		ИначеЕсли СтруктураПараметров.Действие = "ПроверкаТоваров" Тогда
			Если СтруктураПараметров.ЗначенияПоиска.Количество() > 0 Тогда
				Если СтруктураПараметров.ЗначенияПоиска.Количество() = 1 Тогда
					ВходящиеПараметры = СтруктураПараметров.ЗначенияПоиска[0];
					Если СтруктураПараметров.Свойство("ИспользоватьКоличество") Тогда
						ВходящиеПараметры.Вставить("Количество", СтруктураПараметров.ИспользоватьКоличество);
					КонецЕсли;
					Если СтруктураПараметров.Свойство("ОбновитьКоличество") Тогда
						ВходящиеПараметры.Вставить("ОбновитьКоличество", СтруктураПараметров.ИспользоватьКоличество);
					КонецЕсли;
					НомерСтроки = ДобавитьНайденныеПозицииТоваров(ВходящиеПараметры);
					Если НомерСтроки > 0 Тогда
						СтруктураПараметровКлиента.Вставить("АктивизироватьСтроку", НомерСтроки);
					КонецЕсли;
				Иначе
					ТаблицаТоваров = Новый ТаблицаЗначений;
					ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
					ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
					ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
					Для каждого ЗначениеПоиска Из СтруктураПараметров.ЗначенияПоиска Цикл
						ТекущаяСтрока = ТаблицаТоваров.Добавить();
						ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначениеПоиска);
					КонецЦикла;
					СтруктураПараметровКлиента.Вставить("ВыборТоваров", ПоместитьВоВременноеХранилище(ТаблицаТоваров));
				КонецЕсли;
				СтруктураПараметровКлиента.Вставить("ПрекратитьПоиск");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат СтруктураПараметровКлиента;

КонецФункции

&НаСервере
Функция ОбработатьМассивДанныхПОВФормеСервер(СтруктураПараметров) Экспорт
	
	МассивДанных = СтруктураПараметров.ЗначенияПоиска;
	ОбновитьКоличество = СтруктураПараметров.ОбновитьКоличество;
	
	НомерСтроки = 0;
	Для Каждого СтрокаМасива ИЗ МассивДанных Цикл
		Если ОбновитьКоличество Тогда
			СтрокаМасива.Вставить("ОбновитьКоличество", СтрокаМасива.Количество);
		КонецЕсли;
		НомерСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаМасива);
		Если НомерСтроки > 0 Тогда
			ТекущаяСтрока = Объект.Товары[НомерСтроки - 1];
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницФакт","Факт");
			
			КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Обработка магнитного или штрихового кода на клиенте
//
// Параметры
//  СтруктураПараметровКлиента - структура параметров
//
&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекКод) Экспорт
	
	Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") 
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
		
		СтрокаСообщения = НСтр("ru = 'Данные по коду не найдены: %1%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекКод);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ТекстПредупреждения") Тогда
		
		ПоказатьПредупреждение(, СтруктураПараметровКлиента.ТекстПредупреждения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ВыборТоваров") Тогда
		
		ВыбранноеЗначение = ОткрытьФормуМодально("ОбщаяФорма.ВыборНоменклатуры", Новый Структура("АдресТоваровВХранилище", СтруктураПараметровКлиента.ВыборТоваров));
		Если ВыбранноеЗначение <> Неопределено Тогда
			
			НомерСтроки = ДобавитьНайденныеПозицииТоваров(ВыбранноеЗначение);
			Если НомерСтроки > 0 Тогда
				СтруктураПараметровКлиента.Вставить("АктивизироватьСтроку", НомерСтроки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НомерСтроки = 0;
	Если СтруктураПараметровКлиента.Свойство("АктивизироватьСтроку", НомерСтроки) Тогда
		
		Если НомерСтроки > 0  Тогда
            НомерСтрокиФормы = Объект.Товары[НомерСтроки - 1].ПолучитьИдентификатор();
			Элементы.Товары.ТекущаяСтрока = НомерСтрокиФормы;      
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиОсновныхСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

//	Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда

		Возврат;

	КонецЕсли;

//	Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);

//	Сортировка по "вторичным" полям
	РаботаСФормами.ДобавитьКнопкиПорядкаКодАртикул(ЭтотОбъект, Элементы.ТоварыДополнительнаяСортировка);

	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");

	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект, КартинкаСостоянияДокумента, СостояниеДокумента, РазрешеноПроведение);

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда

		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбновитьДанныеТЧТовары();

	КонецЕсли;

	Если Объект.Ссылка.Пустая() Тогда

		ИнициализироватьОтборПересчетаТоваров();

	КонецЕсли;
	
	ИсторияКодПоиска = ХранилищеОбщихНастроек.Загрузить("Документ.ПересчетТоваровСамостоятельный", "ИсторияКодПоиска");

	Если НЕ ИсторияКодПоиска = Неопределено Тогда
		
		Элементы.КодПоиска.СписокВыбора.ЗагрузитьЗначения(ИсторияКодПоиска);
		
	КонецЕсли;
	
	ПодключаемоеОборудованиеРТ.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	НастроитьФормуПоДополнительнымПравам();

	УправлениеДоступомРТ.ПриСозданииФормыНаСервере(ЭтотОбъект);	//	LNK 17.10.2019 14:30:01

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	Если Объект.ДатаГлубиныИнвентаризации = '00010101' Тогда

		Объект.ДатаГлубиныИнвентаризации = НачалоДня(ТекущаяДатаСеанса() - 86400 * 2);
		Модифицированность = Истина;

	КонецЕсли;

	ИнициализироватьОтборПересчетаТоваров();
	
	ОбновитьДанныеТЧТовары();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ИсключитьЗапретПоИнвентаризации", ТекущийОбъект.Ссылка);	//	LNK 05.01.2018 09:28:10
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УправлениеЭлементамиФормы();

	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "";

		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:
			                      |""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	// ПодключаемоеОборудование
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда

		Если ИмяСобытия = "ScanData" Тогда

			Если Параметр[1] = Неопределено Тогда

					КодПолученный = Параметр[0];

			Иначе	КодПолученный = Параметр[1][1];

			КонецЕсли;

			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(КодПолученный);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, КодПолученный);

		КонецЕсли;

	КонецЕсли;
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
  	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение	И НЕ Объект.УчетныеДанныеЗаполнены Тогда

		Отказ = Истина;
		ПередЗаписьюНаКлиенте(Отказ, ПараметрыЗаписи);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ТекущийОбъект.ОтборПересчетаТоваров = Новый ХранилищеЗначения(ОтборПересчетаТоваров.Настройки, Новый СжатиеДанных(9));

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ОбновитьДанныеТЧТовары();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	УправлениеЭлементамиФормы();

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Если Объект.ВидНоменклатуры.Пустая() Тогда

		ТекстОшибки = НСтр("ru='Проект не заполнен!'");
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Объект,
			"Проект",
			,
			Отказ);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПередЗаписьюРаботаСПредупреждениями

&НаКлиенте	//	LNK 22.12.2017 13:05:07
Процедура ПередЗаписьюНаКлиенте(Отказ, ПараметрыЗаписи)

	Если Объект.Товары.Количество() = 0 Тогда

		Объект.УчетныеДанныеЗаполнены = Истина;
		ЗаписатьТекущийОбъект(ПараметрыЗаписи);

	Иначе

		ТекстВопроса = НСтр("ru='При проведении будет перезаполнено учетное количество во всех строках табличной части. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюНаКлиентеЗавершение", ЭтотОбъект, ПараметрыЗаписи);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.ОК, "Контроль заполнения документа", КодВозвратаДиалога.Отмена);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте	//	LNK 22.12.2017 13:10:48
Процедура ПередЗаписьюНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда

		ЗаписатьТекущийОбъект(ДополнительныеПараметры);
		ПослеЗаписи(ДополнительныеПараметры);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьТекущийОбъект(ПараметрыЗаписи)

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
//	ПередЗаписьюНаСервере
//	ДокументОбъект.ОтборПересчетаТоваров = Новый ХранилищеЗначения(ОтборПересчетаТоваров.Настройки, Новый СжатиеДанных(9));
	ПередЗаписьюНаСервере(Ложь, ДокументОбъект, ПараметрыЗаписи);

	ДокументОбъект.Записать(ПараметрыЗаписи.РежимЗаписи);

	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	Модифицированность = Ложь;

	ПослеЗаписиНаСервере(ДокументОбъект, ПараметрыЗаписи);
	//ОбновитьДанныеТЧТовары();
	//ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОстатковПриИзменении(Элемент)

	ОчиститьУчетнуюИнформацию();

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ОчиститьУчетнуюИнформацию();
	Объект.УчетныеДанныеЗаполнены = Ложь;

	Если ЗначениеЗаполнено(Объект.Склад) И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда

		ПриИзмененииСклада();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	ОчиститьУчетнуюИнформацию();
	Объект.УчетныеДанныеЗаполнены = Ложь;

	Если ЗначениеЗаполнено(Объект.Магазин) Тогда

		ПриИзмененииМагазина();

	КонецЕсли;

	УправлениеЭлементамиФормы();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	СкладПриИзменении(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)

	Объект.Товары.Очистить();

	Объект.УчетныеДанныеЗаполнены = Ложь;

	ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(ОтборПересчетаТоваров.Настройки, "Проект", Объект.ВидНоменклатуры);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПересчетаТоваровНастройкиОтборПриИзменении(Элемент)

	Объект.Товары.Очистить();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличногоПоляТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	ОбновитьПодвалКлиент();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	БылоИзменениеКоличествоФакт = Ложь;

	Если НоваяСтрока Тогда

		Элементы.Товары.ТекущиеДанные.Количество = 0;
		Элементы.Товары.ТекущиеДанные.КоличествоФакт = 0;
		Элементы.Товары.ТекущиеДанные.КоличествоУпаковок = 0;
		Элементы.Товары.ТекущиеДанные.КоличествоУпаковокФакт = 0;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НЕ ОтменаРедактирования И БылоИзменениеКоличествоФакт Тогда

		Если НоваяСтрока Тогда

			Объект.УчетныеДанныеЗаполнены = Ложь;

		КонецЕсли;

		Если НЕ РежимКодаПоиска И Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковокФакт Тогда

			АктивизироватьКоличествоФактСледующейСтроки();

		КонецЕсли;

	КонецЕсли;

	Если РежимКодаПоиска Тогда

		АктивизироватьЭлементКодПоиска();

	КонецЕсли;

КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличногоПоляТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ПриИзмененииНоменклатуры(Элементы.Товары.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
		
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Объект.УчетныеДанныеЗаполнены = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуФакт");

	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьПоказателиТЧТоварыКлиент(ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокФактПриИзменении(Элемент)

	БылоИзменениеКоличествоФакт = Истина;

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницФакт","Факт");
	СтруктураДействий.Вставить("ПересчитатьСуммуФакт");  	

	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьПоказателиТЧТоварыКлиент(ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаФактПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеФакт");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьПоказателиТЧТоварыКлиент(ТекущаяСтрока);

КонецПроцедуры
	
#КонецОбласти

#Область ПроцедурыОбработкиТаблицыТоваров

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		СтруктураСтроки.Вставить("Характеристика", СтрокаТовара.Характеристика);
		СтруктураСтроки.Вставить("Упаковка", СтрокаТовара.Упаковка);
		СтруктураСтроки.Вставить("Количество", СтрокаТовара.КоличествоУпаковок);

		НомерСтроки = ДобавитьНайденныеПозицииТоваров(СтруктураСтроки);

		Если НомерСтроки > 0 Тогда

			ТекущаяСтрока = Объект.Товары[НомерСтроки - 1];
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницФакт","Факт");

			КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

		КонецЕсли;

	КонецЦикла;

	Объект.УчетныеДанныеЗаполнены = Ложь;
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);

КонецПроцедуры

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) 
	
	Если СтруктураПараметров.Свойство("Количество") Тогда 
		КоличествоУпаковок = СтруктураПараметров.Количество;
		СтруктураПараметров.Удалить("Количество");
	Иначе
		КоличествоУпаковок = 1;
	КонецЕсли;

	Если СтруктураПараметров.Свойство("ОбновитьКоличество") Тогда 
		СтруктураПараметров.Удалить("ОбновитьКоличество");
		ОбновитьКоличество = Истина;
	Иначе
		ОбновитьКоличество = Ложь;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Штрихкод") Тогда 
		СтруктураПараметров.Удалить("Штрихкод");
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураПараметров);
	
	НомерСтроки = 0;
	Если МассивСтрок.Количество() > 0 Тогда 
		
		ТекущаяСтрока = МассивСтрок[0];
		КоэффициентУпаковки1 = ?(ЗначениеЗаполнено(СтруктураПараметров.Упаковка), СтруктураПараметров.Упаковка.Коэффициент, 1);
		КоэффициентУпаковки2 = ?(ЗначениеЗаполнено(ТекущаяСтрока.Упаковка), ТекущаяСтрока.Упаковка.Коэффициент, 1);

		Если ОбновитьКоличество Тогда  
			ТекущаяСтрока.КоличествоУпаковокФакт = КоличествоУпаковок*КоэффициентУпаковки2/КоэффициентУпаковки1;
		Иначе
			ТекущаяСтрока.КоличествоУпаковокФакт = ТекущаяСтрока.КоличествоУпаковокФакт + КоличествоУпаковок*КоэффициентУпаковки2/КоэффициентУпаковки1;
		КонецЕсли;

		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницФакт", "Факт");
		СтруктураДействий.Вставить("ПересчитатьСуммуФакт");
		
		НомерСтроки = ТекущаяСтрока.НомерСтроки;
	Иначе 
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ТекущаяСтрока.КоличествоУпаковокФакт = КоличествоУпаковок;

		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураПараметров);
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницФакт", "Факт");
		СтруктураДействий.Вставить("ПересчитатьСуммуФакт");
		
		НомерСтроки = ТекущаяСтрока.НомерСтроки;
	КонецЕсли;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	Объект.УчетныеДанныеЗаполнены = Ложь;
	ОбновитьДанныеТЧТовары(НомерСтроки);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары, Неопределено, НомерСтроки);
	
	Модифицированность = Истина;
	Возврат НомерСтроки;

КонецФункции

&НаСервере
Процедура ОбновитьДанныеТЧТовары(НомерСтроки = 0)

	Если НомерСтроки = 0 Тогда

		ЗаполнитьДополнительныеРеквизиты();

		Для каждого СтрокаТЧ Из Объект.Товары Цикл

			ОбновитьДанныеСтрокиТЧТовары(СтрокаТЧ);

		КонецЦикла;

	Иначе

		СтрокаТЧ = Объект.Товары[НомерСтроки - 1];
		ЗаполнитьДополнительныеРеквизиты(СтрокаТЧ.Номенклатура);
		ОбновитьДанныеСтрокиТЧТовары(СтрокаТЧ);

	КонецЕсли;

	ОбновитьПодвалСервер();

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСтрокиТЧТовары(СтрокаТЧ)

	СтрокаТЧ.СуммаФакт              = СтрокаТЧ.Цена * СтрокаТЧ.КоличествоУпаковокФакт;
	СтрокаТЧ.ОтклонениеПоСумме      = СтрокаТЧ.СуммаФакт - СтрокаТЧ.Сумма; 
	СтрокаТЧ.ОтклонениеПоКоличеству = СтрокаТЧ.КоличествоУпаковокФакт - СтрокаТЧ.КоличествоУпаковок; 
	СтрокаТЧ.Расхождение            = СтрокаТЧ.ОтклонениеПоКоличеству <> 0 ИЛИ СтрокаТЧ.Количество <> СтрокаТЧ.КоличествоФакт;
	СтрокаТЧ.КартинкаДвижения       = ЗначениеКартинкиДвижения(СтрокаТЧ.ОтклонениеПоКоличеству);

	Если СтрокаТЧ.ОтклонениеПоКоличеству > 0 Тогда

		СтрокаТЧ.НедостачиПоСумме      = 0;
		СтрокаТЧ.НедостачаПозиция      = 0;
		СтрокаТЧ.НедостачиПоКоличеству = 0;
		СтрокаТЧ.ИзлишкиПоСумме        = СтрокаТЧ.ОтклонениеПоСумме;
		СтрокаТЧ.ИзлишкиПозиция        = 1;
		СтрокаТЧ.ИзлишкиПоКоличеству   = СтрокаТЧ.ОтклонениеПоКоличеству;

	ИначеЕсли СтрокаТЧ.ОтклонениеПоКоличеству < 0 Тогда

		СтрокаТЧ.НедостачиПоСумме      = - СтрокаТЧ.ОтклонениеПоСумме;
		СтрокаТЧ.НедостачаПозиция      = 1;
		СтрокаТЧ.НедостачиПоКоличеству = - СтрокаТЧ.ОтклонениеПоКоличеству;
		СтрокаТЧ.ИзлишкиПоСумме        = 0;
		СтрокаТЧ.ИзлишкиПозиция        = 0;
		СтрокаТЧ.ИзлишкиПоКоличеству   = 0;

	Иначе

		СтрокаТЧ.НедостачиПоСумме      = 0;
		СтрокаТЧ.НедостачаПозиция      = 0;
		СтрокаТЧ.НедостачиПоКоличеству = 0;
		СтрокаТЧ.ИзлишкиПоСумме        = 0;
		СтрокаТЧ.ИзлишкиПозиция        = 0;
		СтрокаТЧ.ИзлишкиПоКоличеству   = 0;

	КонецЕсли;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	ДанныеСтроки = ДанныеНоменклатуры.Получить(СтрокаТЧ.Номенклатура);

	Если ДанныеСтроки = Неопределено Тогда

		ДанныеСтроки = Новый Структура("Размер, ТорговаяМарка, Цвет");

	КонецЕсли;

	ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДанныеСтроки);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизиты(Знач Номенклатура = Неопределено)

	Если ДанныеНоменклатуры = Неопределено Тогда

		ДанныеНоменклатуры = Новый Соответствие;

	КонецЕсли;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	Если Номенклатура = Неопределено Тогда

		СписокНоменклатуры = Объект.Товары.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура");

	Иначе

		СписокНоменклатуры = Новый Массив;
		СписокНоменклатуры.Добавить(Номенклатура);

	КонецЕсли;

	СписокПолучения = Новый Массив;

	Для каждого Номенклатура Из СписокНоменклатуры Цикл

		Если ЗначениеЗаполнено(Номенклатура) И ДанныеНоменклатуры.Получить(Номенклатура) = Неопределено Тогда

			СписокПолучения.Добавить(Номенклатура);

		КонецЕсли;

	КонецЦикла;

	Если НЕ СписокПолучения.Количество() = 0 Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Ведущая.Ссылка КАК Номенклатура,
		|	ЕСТЬNULL(РеквизитыРазмер.Значение, """") КАК Размер,
		|	ЕСТЬNULL(РеквизитыТорговыеМарки.Значение, ЗНАЧЕНИЕ(Справочник.Марки.ПустаяСсылка)) КАК ТорговаяМарка,
		|	ЕСТЬNULL(РеквизитыЦвет.Значение, """") КАК Цвет
		|ИЗ
		|	Справочник.Номенклатура КАК Ведущая
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК РеквизитыРазмер
		|		ПО Ведущая.Ссылка = РеквизитыРазмер.Ссылка
		|			И (РеквизитыРазмер.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.РазмерностьТовара))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК РеквизитыТорговыеМарки
		|		ПО Ведущая.Ссылка = РеквизитыТорговыеМарки.Ссылка
		|			И (РеквизитыТорговыеМарки.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ТорговыеМарки))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК РеквизитыЦвет
		|		ПО Ведущая.Ссылка = РеквизитыЦвет.Ссылка
		|			И (РеквизитыЦвет.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Цвет))
		|ГДЕ
		|	Ведущая.Ссылка В(&СписокНоменклатуры)"
		);
		Запрос.УстановитьПараметр("СписокНоменклатуры", СписокПолучения);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДанныеНоменклатуры.Вставить(Выборка.Номенклатура
				, Новый Структура(
					"Размер, ТорговаяМарка, Цвет"
					, СокрЛП(Выборка.Размер), Выборка.ТорговаяМарка, СокрЛП(Выборка.Цвет)));

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//	Рассчитывает показатели в ТЧ "Товары"
//
&НаКлиенте
Процедура ОбновитьПоказателиТЧТоварыКлиент(ТекущаяСтрока)

	ТекущаяСтрока.ОтклонениеПоСумме      = ТекущаяСтрока.СуммаФакт - ТекущаяСтрока.Сумма;
	ТекущаяСтрока.ОтклонениеПоКоличеству = ТекущаяСтрока.КоличествоУпаковокФакт - ТекущаяСтрока.КоличествоУпаковок; 
	ТекущаяСтрока.Расхождение            = ТекущаяСтрока.ОтклонениеПоКоличеству <> 0 ИЛИ ТекущаяСтрока.Количество <> ТекущаяСтрока.КоличествоФакт;
	ТекущаяСтрока.КартинкаДвижения       = ЗначениеКартинкиДвижения(ТекущаяСтрока.ОтклонениеПоКоличеству);

	Если ТекущаяСтрока.ОтклонениеПоКоличеству > 0 Тогда

		ТекущаяСтрока.НедостачиПоСумме      = 0;
		ТекущаяСтрока.НедостачаПозиция      = 0;
		ТекущаяСтрока.НедостачиПоКоличеству = 0;
		ТекущаяСтрока.ИзлишкиПоСумме        = ТекущаяСтрока.ОтклонениеПоСумме;
		ТекущаяСтрока.ИзлишкиПозиция        = 1;
		ТекущаяСтрока.ИзлишкиПоКоличеству   = ТекущаяСтрока.ОтклонениеПоКоличеству;

	ИначеЕсли ТекущаяСтрока.ОтклонениеПоКоличеству < 0 Тогда

		ТекущаяСтрока.НедостачиПоСумме      = - ТекущаяСтрока.ОтклонениеПоСумме;
		ТекущаяСтрока.НедостачаПозиция      = 1;
		ТекущаяСтрока.НедостачиПоКоличеству = - ТекущаяСтрока.ОтклонениеПоКоличеству;
		ТекущаяСтрока.ИзлишкиПоСумме        = 0;
		ТекущаяСтрока.ИзлишкиПозиция        = 0;
		ТекущаяСтрока.ИзлишкиПоКоличеству   = 0;

	Иначе

		ТекущаяСтрока.НедостачиПоСумме      = 0;
		ТекущаяСтрока.НедостачаПозиция      = 0;
		ТекущаяСтрока.НедостачиПоКоличеству = 0;
		ТекущаяСтрока.ИзлишкиПоСумме        = 0;
		ТекущаяСтрока.ИзлишкиПозиция        = 0;
		ТекущаяСтрока.ИзлишкиПоКоличеству   = 0;

	КонецЕсли;

	ОбновитьПодвалСервер();	//	LNK 13.05.2022 06:41:49

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", "списание товаров");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	ПараметрыФормы.Вставить("РежимПодбораБезУслуг", Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуВвестиСерийныеНомера", Истина);
	ПараметрыФормы.Вставить("ИспользоватьОтборПоТипамНоменклатуры", Истина);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";

	Если ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекШтрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ТекШтрихкод);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)


КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)


КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСхемеИнвентаризации(Команда)

	ЗаполнитьПоСхемеИнвентаризацииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчетноеКоличество(Команда)
	
	Если ПроверитьЗаполнение() Тогда

		ЗаполнитьУчетноеКоличествоСервер();
		ОбновитьДанныеТЧТовары();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоРозничнымЦенам(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица «Товары». Цены не могут быть заполнены'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	Иначе	
		
		Если ЗначениеЗаполнено(Объект.Магазин) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныПоРозничнымЦенамСервер();
			ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоРозничнымЦенам(ЦеныРассчитаны, Объект.Магазин);
			
		КонецЕсли;
		
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОСостоянииСклада(Команда)

	ОтчетОСостоянииСкладаНаСервере();

КонецПроцедуры

#Область ОбработкаЗаполненияКолонокФактПоУчету

&НаКлиенте
Процедура ЗаполнитьФактПоУчетуВсе(Команда)

	ЗаполнитьФактПоУчету(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактПоУчетуПустые(Команда)

	ЗаполнитьФактПоУчету(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактПоУчету(ТолькоПустые)

	Если Элементы.Товары.ВыделенныеСтроки.Количество() <= 1 Тогда

			КоллекцияСтрок = Объект.Товары;

	Иначе	КоллекцияСтрок = Элементы.Товары.ВыделенныеСтроки;

	КонецЕсли;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницФакт","Факт");
	СтруктураДействий.Вставить("ПересчитатьСуммуФакт");  	

	Для каждого СтрокаТабличнойЧасти Из КоллекцияСтрок Цикл

		НужноЗаполнить = ?(ТолькоПустые, СтрокаТабличнойЧасти.КоличествоУпаковокФакт = 0, Истина);

		Если НужноЗаполнить Тогда

			СтрокаТабличнойЧасти.КоличествоФакт = Макс(0, СтрокаТабличнойЧасти.Количество);
			СтрокаТабличнойЧасти.КоличествоУпаковокФакт = Макс(0, СтрокаТабличнойЧасти.КоличествоУпаковок);

			ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
			ОбновитьПоказателиТЧТоварыКлиент(СтрокаТабличнойЧасти);

		КонецЕсли;

	КонецЦикла;

	ОбновитьПодвалСервер();

КонецПроцедуры

#КонецОбласти
	
#КонецОбласти

#Область ПроцедурыЗаполненияДокумента

&НаСервере
Процедура ЗаполнитьПоСхемеИнвентаризацииНаСервере()

	Документы.ПересчетТоваровСамостоятельный.ЗаполнитьСУчетомОтбора(Объект, ОтборПересчетаТоваров.ПолучитьНастройки());

	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);

	ОбновитьДанныеТЧТовары();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУчетноеКоличествоСервер()
	
	ОбъектЗнач = РеквизитФормыВЗначение("Объект");
	ОбъектЗнач.ЗаполнитьКоличествоПоУчету(Объект.Товары.Выгрузить());
	ЗначениеВРеквизитФормы(ОбъектЗнач, "Объект");
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЦеныПоРозничнымЦенамСервер()

	ЦеныРассчитаны = ЗапасыСервер.ЗаполнитьЦеныПоРозничнымЦенам(Объект, "Товары", Объект.Магазин, Ложь);

	Если ЦеныРассчитаны Тогда

	    ОбновитьДанныеТЧТовары();

	КонецЕсли;	

	Возврат ЦеныРассчитаны;

КонецФункции

&НаСервере
Процедура ОтчетОСостоянииСкладаНаСервере()


КонецПроцедуры
	
#КонецОбласти

#Область КомандаЗагрузкаИзТаблицыExel

&НаКлиенте
Процедура ЗагрузитьТоварыИзТаблицыExcel(Команда)

	Если Объект.Товары.Количество() > 0 Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьТоварыИзТаблицыExcelЗавершение", ЭтотОбъект, Новый Структура);
		ПоказатьВопрос(ОписаниеОповещения
			, "Табличная часть Товары будет очищена.
			  |Подтвердите своё решение:"
			, РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.ОК
			, "Предупреждение(перед загрузкой)", КодВозвратаДиалога.Отмена);

	Иначе

		ЗагрузитьТоварыИзТаблицыExcelЗавершение(КодВозвратаДиалога.ОК, Новый Структура);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТоварыИзТаблицыExcelЗавершение(КодВозврата, ДополнительныеПараметры)	Экспорт

	Если КодВозврата = КодВозвратаДиалога.ОК Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗагрузкуДанныхИзТаблицыExcel", ЭтотОбъект);
		ДиалогВыбораФайла  = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Заголовок = "Выберите файл книги MS Excel";
		ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Лист Excel'") + " (*.xls)|*.xls|" + НСтр("ru = 'Лист Excel2007'") + " (*.xlsx)|*.xlsx";
		ДиалогВыбораФайла.ПолноеИмяФайла = ПолноеИмяИмпортируемогоФайла;
		ДиалогВыбораФайла.МножественныйВыбор = Ложь;
		ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;

		ДиалогВыбораФайла.Показать(ОписаниеОповещения);

	Иначе

		Сообщить("Отменено пользователем.");

	КонецЕсли;

КонецПроцедуры

//	LNK 06.03.2017 11:48:00
&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхИзТаблицыExcel(СписокФайлов, ДополнительныеПараметры)	Экспорт

	Если ТипЗнч(СписокФайлов) = Тип("Массив") И НЕ СписокФайлов.Количество() = 0 Тогда

		ОчиститьУчетнуюИнформацию();

		Объект.Товары.Очистить();

		ПолноеИмяИмпортируемогоФайла = СписокФайлов[0];

		ПоказатьОповещениеПользователя("Загрузка данных из файла ...",, "Выполняется загрузка «" + ПолноеИмяИмпортируемогоФайла + "»", БиблиотекаКартинок.Предупреждение32);

		МассивТоваров = ЗаполнениеОбъектов.ЗагрузитьДанныеВМассивИзТаблицыExcel(
			ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяИмпортируемогоФайла), УникальныйИдентификатор),
			ОбщегоНазначенияКлиентСервер.lx_GetTooken(ПолноеИмяИмпортируемогоФайла, ".")
		);

		Для каждого СоставСтроки Из МассивТоваров Цикл

			СтрокаТовары = Объект.Товары.Добавить();
			СтрокаТовары.Номенклатура = СоставСтроки.Номенклатура;
			СтрокаТовары.КоличествоФакт = СоставСтроки.Количество;
			СтрокаТовары.КоличествоУпаковокФакт = СоставСтроки.Количество;

		КонецЦикла;

		Если ЗначениеЗаполнено(Объект.Магазин) Тогда

			ЦеныРассчитаны = ЗаполнитьЦеныПоРозничнымЦенамСервер();
			ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоРозничнымЦенам(ЦеныРассчитаны, Объект.Магазин);

		КонецЕсли;

		Объект.УчетныеДанныеЗаполнены = Ложь;
		ПриИзмененииМагазина();

		УправлениеЭлементамиФормы();

		ПоказатьОповещениеПользователя("Загрузка данных выполнена!",,, БиблиотекаКартинок.Предупреждение32);
	
	Иначе

		Сообщить("Выбор не был сделан. Операция не выполнена");
	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьПодвалСервер()
	
	ИтогОтклонениеПоСумме		= Объект.Товары.Итог("ОтклонениеПоСумме");
	ИтогОтклонениеПоКоличеству	= Объект.Товары.Итог("ОтклонениеПоКоличеству");
	
	ИтогИзлишкиПоПозициям   = Объект.Товары.Итог("ИзлишкиПозиция");
	ИтогИзлишкиПоСумме      = Объект.Товары.Итог("ИзлишкиПоСумме");
	ИтогИзлишкиПоКоличеству = Объект.Товары.Итог("ИзлишкиПоКоличеству");
	
	ИтогНедостачиПоПозициям   = Объект.Товары.Итог("НедостачаПозиция");
	ИтогНедостачиПоСумме      = Объект.Товары.Итог("НедостачиПоСумме");
	ИтогНедостачиПоКоличеству = Объект.Товары.Итог("НедостачиПоКоличеству");

	Элементы.ТоварыОтклонениеПоСумме.ТекстПодвала		= Формат(ИтогОтклонениеПоСумме, "ЧДЦ=2; ЧН=0,00; ЧГ=");
	Элементы.ТоварыОтклонениеПоКоличеству.ТекстПодвала	= Формат(ИтогОтклонениеПоКоличеству, "ЧДЦ=3; ЧН=0,00; ЧГ=");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодвалКлиент()
	
	ИтогОтклонениеПоСумме   = Объект.Товары.Итог("ОтклонениеПоСумме");
	
	ИтогИзлишкиПоПозициям   = Объект.Товары.Итог("ИзлишкиПозиция");
	ИтогИзлишкиПоСумме      = Объект.Товары.Итог("ИзлишкиПоСумме");
	ИтогИзлишкиПоКоличеству = Объект.Товары.Итог("ИзлишкиПоКоличеству");
	
	ИтогНедостачиПоПозициям   = Объект.Товары.Итог("НедостачаПозиция");
	ИтогНедостачиПоСумме      = Объект.Товары.Итог("НедостачиПоСумме");
	ИтогНедостачиПоКоличеству = Объект.Товары.Итог("НедостачиПоКоличеству");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеКартинкиДвижения(ОтклонениеПоКоличеству)

	Если ОтклонениеПоКоличеству = 0 Тогда
		Возврат -1;
	ИначеЕсли ОтклонениеПоКоличеству > 0 Тогда
		Возврат 0;
	Иначе
		Возврат 2;
	КонецЕсли;

КонецФункции

//Процедура заполняет организацию при изменении склада
//
&НаСервере
Процедура ПриИзмененииСклада()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда

		Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "Организация");

	КонецЕсли;
	
КонецПроцедуры

//Процедура заполняет склад при изменении магазина
//
&НаСервере
Процедура ПриИзмененииМагазина()

	Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Объект.Магазин,, Объект.Склад, Пользователи.ТекущийПользователь());

	Если ЗначениеЗаполнено(Объект.Склад) Тогда

		ПриИзмененииСклада();

	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте	//	LNK 04.01.2018 13:38:30
Процедура ПриИзмененииНоменклатуры(ТекущаяСтрока)

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"   , ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницФакт", "Факт");
	СтруктураДействий.Вставить("ОчиститьКоличествоУчет");
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуФакт");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
	ОбновитьПоказателиТЧТоварыКлиент(ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьУчетнуюИнформацию()

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОчиститьКоличествоУчет", Новый Структура("НеобходимоОбработатьВсюТЧ", Истина));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, , СтруктураДействий, КэшированныеЗначения);

	Объект.УчетныеДанныеЗаполнены = Ложь;
	ОбновитьДанныеТЧТовары();

КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭлементамиФормы()

	Элементы.Склад.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Магазин);

	Если Элементы.КодПоиска.ТолькоПросмотр = РежимКодаПоиска Тогда

		Элементы.КодПоиска.ТолькоПросмотр = НЕ РежимКодаПоиска;

	КонецЕсли;

	Если Объект.Проведен Тогда

		ТолькоПросмотр = Истина;

	КонецЕсли;

	Элементы.ТоварыВыгрузитьДанныеВТСД.Доступность  = НЕ (Объект.Ссылка.Пустая() ИЛИ ТолькоПросмотр);
	Элементы.ТоварыЗагрузитьДанныеИзТСД.Доступность = НЕ (Объект.Ссылка.Пустая() ИЛИ ТолькоПросмотр);

КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()

	ИзменятьЦену = ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену;
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыЦена.ТолькоПросмотр, ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСуммаФакт.ТолькоПросмотр, ИзменятьЦену);

	Если Объект.ДокументОснование.Пустая() Тогда

		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);

	Иначе

		Элементы.Дата.ТолькоПросмотр = Истина;
		Элементы.ДатаОстатков.ТолькоПросмотр = Истина;

	КонецЕсли;

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Номер.ТолькоПросмотр,
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьНомерДокумента);

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОтборПересчетаТоваров()

	СхемаКомпоновкиДанных = Документы.ПересчетТоваровСамостоятельный.ПолучитьМакет("ТоварыПоВидуНоменклатуры");

	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);

	ОтборПересчетаТоваров.Инициализировать(ИсточникНастроек);

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	НастройкиПересчета = ДокументОбъект.ОтборПересчетаТоваров.Получить();

	Если НастройкиПересчета = Неопределено Тогда

			ОтборПересчетаТоваров.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			ОтборПересчетаТоваров.Настройки.Отбор.Элементы.Очистить();

	Иначе	ОтборПересчетаТоваров.ЗагрузитьНастройки(НастройкиПересчета);

	КонецЕсли;

	ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(ОтборПересчетаТоваров.Настройки, "Проект", Объект.ВидНоменклатуры);

КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)

	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин"" не заполнено'"), Объект, "Объект.Магазин",,Отказ);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьКоличествоФактСледующейСтроки()

	ПодключитьОбработчикОжидания("АктивизироватьКоличествоФактСледующейСтрокиОбработчик", 0.2, Истина);

КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьКоличествоФактСледующейСтрокиОбработчик()

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	Если НЕ ТекущиеДанные = Неопределено Тогда

		Если ТекущиеДанные.НомерСтроки < Объект.Товары.Количество() Тогда

			Элементы.Товары.ТекущаяСтрока  = Объект.Товары[ТекущиеДанные.НомерСтроки].ПолучитьИдентификатор();
			Элементы.Товары.Обновить();
			Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковокФакт;

			Если НЕ (ТолькоПросмотр ИЛИ Элементы.Товары.ТекущийЭлемент.ТолькоПросмотр) Тогда

				Элементы.Товары.ИзменитьСтроку();

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СортировкаПоВторичнымПолям

&НаСервере	//	Общий метод сортировки
Процедура ТоварыСортироватьПоРеквизитуНоменклатурыСервер(ИмяРеквизита, Направление)

	РаботаСФормами.ТоварыСортироватьПоРеквизитуНоменклатуры(ИмяРеквизита, Направление, Объект.Товары);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокКодПоВозрастаниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Код", "Возр");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокКодПоУбываниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Код", "Убыв");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокАртикулПоВозрастаниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Артикул", "Возр");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокАртикулПоУбываниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Артикул", "Убыв");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокПроизводительПоУбываниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Производитель", "Убыв");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокПроизводительПоВозрастаниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("Производитель", "Возр");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокТорговаяМаркаПоУбываниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("ТорговаяМарка", "Убыв");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорядокТорговаяМаркаПоВозрастаниюНажатие(Элемент)

	ТоварыСортироватьПоРеквизитуНоменклатурыСервер("ТорговаяМарка", "Возр");

КонецПроцедуры

#КонецОбласти

#Область ГруппаПоискПоКоду

&НаКлиенте
Процедура РежимКодаПоискаПриИзменении(Элемент)

	УправлениеЭлементамиФормы();
	АктивизироватьЭлементКодПоиска();

КонецПроцедуры

&НаКлиенте
Процедура КодПоискаПриИзменении(Элемент)

	Установлено  = Ложь;
	Номенклатура = НайтиНоменклатуруПоКоду(СокрЛП(КодПоиска));

	Если Номенклатура.Пустая() Тогда

		ПоказатьОповещениеПользователя("Код [" + КодПоиска + "] не найден"
			,, "Указанный код отсутствует в справочнике «Номенклатура»", БиблиотекаКартинок.Предупреждение32);

	Иначе

		СтрокиВОтборе = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));

		Если СтрокиВОтборе.Количество() = 0 Тогда

			ПоказатьОповещениеПользователя("Код [" + КодПоиска + "] добавлен"
				,, "Позиция добавлена в табличную часть «Товары»", БиблиотекаКартинок.Предупреждение32);
		//	в этом случае тоже учитываем введенный код - всё-таки товар имеется в справочнике!
			СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Элементы.КодПоиска.СписокВыбора, СокрЛП(КодПоиска));

			СтрокаТовары = Объект.Товары.Добавить();
			СтрокаТовары.Номенклатура = Номенклатура;
			СтрокиВОтборе.Добавить(СтрокаТовары);
			ПриИзмененииНоменклатуры(СтрокаТовары);

		КонецЕсли;

		Установлено = Истина;
		Элементы.Товары.ТекущаяСтрока  = СтрокиВОтборе[0].ПолучитьИдентификатор();
		Элементы.Товары.Обновить();
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковокФакт;

		Если НЕ (ТолькоПросмотр ИЛИ Элементы.Товары.ТекущийЭлемент.ТолькоПросмотр) Тогда

			Элементы.Товары.ИзменитьСтроку();

		КонецЕсли;

		СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Элементы.КодПоиска.СписокВыбора, СокрЛП(КодПоиска));

		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("Документ.ПересчетТоваровСамостоятельный", "ИсторияКодПоиска", Элементы.КодПоиска.СписокВыбора.ВыгрузитьЗначения());

	КонецЕсли;

	Если НЕ Установлено Тогда

		АктивизироватьЭлементКодПоиска();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция НайтиНоменклатуруПоКоду(Код)

	Номенклатура = Справочники.Номенклатура.ПустаяСсылка();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Код = &Код
	|	И НЕ ТаблицаСправочник.ЭтоГруппа"
	);
	Запрос.УстановитьПараметр("Код", Код);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

		Номенклатура = Выборка.Номенклатура;

	КонецЕсли;

	Возврат Номенклатура;

КонецФункции // НайтиНоменклатуруПоКоду()

&НаКлиенте
Процедура АктивизироватьЭлементКодПоиска()

	ПодключитьОбработчикОжидания("АктивизироватьЭлементКодПоискаОбработчик", 0.2, Истина);

КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЭлементКодПоискаОбработчик()

	ТекущийЭлемент = Элементы.КодПоиска;

КонецПроцедуры

#КонецОбласти












