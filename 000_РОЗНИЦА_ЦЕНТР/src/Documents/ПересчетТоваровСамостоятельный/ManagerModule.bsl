#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПересчетТоваров.Дата КАК Период,
	|	ПересчетТоваров.Ссылка КАК Ссылка,
	|	ПересчетТоваров.Склад КАК Склад,
	|	ПересчетТоваров.Магазин КАК Магазин,
	|	ПересчетТоваров.Организация КАК Организация
	|ИЗ
	|	Документ.ПересчетТоваровСамостоятельный КАК ПересчетТоваров
	|ГДЕ
	|	ПересчетТоваров.Ссылка = &Ссылка"
	);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);

	РезультатЗапроса = Запрос.Выполнить();
	Реквизиты = РезультатЗапроса.Выбрать();
	Реквизиты.Следующий(); 

	ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВПараметрыЗапроса(РезультатЗапроса, Реквизиты, Запрос);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Склад КАК Склад,
	|	&Магазин КАК Магазин,
	|	&Организация КАК Организация,
	|	ДанныеПриведенные.Номенклатура КАК Номенклатура,
	|	ДанныеПриведенные.Характеристика КАК Характеристика,
	|	ДанныеПриведенные.КоличествоПриход КАК КоличествоПриход,
	|	ДанныеПриведенные.КоличествоРасход КАК КоличествоРасход,
	|	ДанныеПриведенные.НомерСтроки КАК КлючПорядка
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|		ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|		ТабличнаяЧасть.Характеристика КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.КоличествоФакт > ТабличнаяЧасть.Количество
	|				ТОГДА ТабличнаяЧасть.КоличествоФакт - ТабличнаяЧасть.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК КоличествоПриход,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Количество > ТабличнаяЧасть.КоличествоФакт
	|				ТОГДА ТабличнаяЧасть.Количество - ТабличнаяЧасть.КоличествоФакт
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК КоличествоРасход
	|	ИЗ
	|		Документ.ПересчетТоваровСамостоятельный.Товары КАК ТабличнаяЧасть
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка = &Ссылка) КАК ДанныеПриведенные
	|ГДЕ
	|	(ДанныеПриведенные.КоличествоПриход > 0
	|			ИЛИ ДанныеПриведенные.КоличествоРасход > 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Период КАК Период,
	|	ВЫБОР
	|		КОГДА НЕ Товары.КоличествоПриход = 0
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	Товары.Склад КАК Склад,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА НЕ Товары.КоличествоПриход = 0
	|			ТОГДА Товары.КоличествоПриход
	|		ИНАЧЕ Товары.КоличествоРасход
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА НЕ Товары.КоличествоПриход = 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.ОприходованиеПоИнвентаризацииСамостоятельной)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.СписаниеПоИнвентаризацииСамостоятельной)
	|	КОНЕЦ КАК АналитикаХозяйственнойОперации,
	|	Товары.КлючПорядка КАК КлючПорядка
	|ИЗ
	|	Товары КАК Товары
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Период КАК Период,
	|	ВЫБОР
	|		КОГДА НЕ Товары.КоличествоПриход = 0
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	Товары.Магазин КАК Магазин,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА НЕ Товары.КоличествоПриход = 0
	|			ТОГДА Товары.КоличествоПриход
	|		ИНАЧЕ Товары.КоличествоРасход
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА НЕ Товары.КоличествоПриход = 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.ОприходованиеПоИнвентаризацииСамостоятельной)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.СписаниеПоИнвентаризацииСамостоятельной)
	|	КОНЕЦ КАК АналитикаХозяйственнойОперации,
	|	Товары.КлючПорядка КАК КлючПорядка
	|ИЗ
	|	Товары КАК Товары
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Период КАК Период,
	|	ВЫБОР
	|		КОГДА НЕ Товары.КоличествоПриход = 0
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	Товары.Склад КАК Склад,
	|	Товары.Организация КАК Организация,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА НЕ Товары.КоличествоПриход = 0
	|			ТОГДА Товары.КоличествоПриход
	|		ИНАЧЕ Товары.КоличествоРасход
	|	КОНЕЦ КАК Количество,
	|	Товары.КлючПорядка КАК КлючПорядка
	|ИЗ
	|	Товары КАК Товары
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючПорядка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПересчета.Дата КАК Период,
	|	ТаблицаПересчета.Магазин КАК Магазин,
	|	ТаблицаПересчета.Склад КАК Склад,
	|	ТаблицаПересчета.Ссылка КАК ДокументОграничения,
	|	ТаблицаПересчета.Дата КАК ГраницаЗапрета
	|ИЗ
	|	Документ.ПересчетТоваровСамостоятельный КАК ТаблицаПересчета
	|ГДЕ
	|	ТаблицаПересчета.Ссылка = &Ссылка"
	;
	Результат = Запрос.ВыполнитьПакет();
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ТаблицыДляДвижений.Вставить("ТаблицаТоварыНаСкладах"  , Результат[1].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаТоварыНаМагазинах", Результат[2].Выгрузить());	//	LNK 31.08.2021 13:07:46
	ТаблицыДляДвижений.Вставить("ТаблицаТоварыОрганизаций", Результат[3].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаОграниченияДвиженийПоИнвентаризации", Результат[4].Выгрузить());

КонецПроцедуры

Процедура ЗаполнитьСУчетомОтбора(Объект, НастройкиПересчета)	Экспорт

	СхемаКомпоновкиДанных = Документы.ПересчетТоваровСамостоятельный.ПолучитьМакет("ТоварыПоВидуНоменклатуры");

	Если ЗапасыСервер.ПроверитьСхемуКомпоновкиДанных(СхемаКомпоновкиДанных, "Встроенная схема компоновки данных не прошла проверку.") Тогда

	//	Подготовка компоновщика макета компоновки данных и загрузка настроек
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));

		Если НастройкиПересчета = Неопределено Тогда

				КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

		Иначе	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиПересчета);

		КонецЕсли;

		ОбщегоНазначенияРТКлиентСервер.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Отбор, НастройкиПересчета.Отбор,, Ложь);
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);

	//	Заполнение структуры отчета и выбранных полей.
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		
		ГруппировкаДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаДетальныеЗаписи.Использование = Истина;
		
		КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ОбщегоНазначенияРТКлиентСервер.ДобавитьВыбранноеПолеВГруппировку(ГруппировкаДетальныеЗаписи, "Номенклатура");
		
		Если Ложь Тогда //ИспользоватьХарактеристикиНоменклатуры Тогда	резервируем на будущее
			ОбщегоНазначенияРТКлиентСервер.ДобавитьВыбранноеПолеВГруппировку(ГруппировкаДетальныеЗаписи, "Характеристика");
		КонецЕсли;

		ОбщегоНазначенияРТКлиентСервер.ДобавитьВыбранноеПолеВГруппировку(ГруппировкаДетальныеЗаписи, "Количество");
		ОбщегоНазначенияРТКлиентСервер.ДобавитьВыбранноеПолеВГруппировку(ГруппировкаДетальныеЗаписи, "КоличествоУпаковок");
		ОбщегоНазначенияРТКлиентСервер.ДобавитьВыбранноеПолеВГруппировку(ГруппировкаДетальныеЗаписи, "КоличествоФакт");
		ОбщегоНазначенияРТКлиентСервер.ДобавитьВыбранноеПолеВГруппировку(ГруппировкаДетальныеЗаписи, "КоличествоУпаковокФакт");

		ОбщегоНазначенияРТКлиентСервер.ДобавитьВыбранноеПолеВГруппировку(ГруппировкаДетальныеЗаписи, "Цена");
		ОбщегоНазначенияРТКлиентСервер.ДобавитьВыбранноеПолеВГруппировку(ГруппировкаДетальныеЗаписи, "Сумма");

		ОбщегоНазначенияРТКлиентСервер.ДобавитьВыбранноеПолеВГруппировку(ГруппировкаДетальныеЗаписи, "Размер");
		ОбщегоНазначенияРТКлиентСервер.ДобавитьВыбранноеПолеВГруппировку(ГруппировкаДетальныеЗаписи, "ТорговаяМарка");
		ОбщегоНазначенияРТКлиентСервер.ДобавитьВыбранноеПолеВГруппировку(ГруппировкаДетальныеЗаписи, "Цвет");

	//	Компоновка макета и исполнение запроса.
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

		МакетКомпоновки.ЗначенияПараметров.Период.Значение = Объект.ДатаОстатков;
		МакетКомпоновки.ЗначенияПараметров.ДатаПересчета.Значение = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДатаСеанса());
		МакетКомпоновки.ЗначенияПараметров.ГлубинаИнвентаризации.Значение = Объект.ДатаГлубиныИнвентаризации;
		МакетКомпоновки.ЗначенияПараметров.Проект.Значение  = Объект.ВидНоменклатуры;
		МакетКомпоновки.ЗначенияПараметров.Магазин.Значение = Объект.Магазин;
		МакетКомпоновки.ЗначенияПараметров.Склад.Значение   = Объект.Склад;
		МакетКомпоновки.ЗначенияПараметров.ТекущийДокумент.Значение = Объект.Ссылка;

		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

		ДанныеОтчета = Новый ТаблицаЗначений();
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);

		Объект.Товары.Загрузить(ДанныеОтчета);
		Объект.УчетныеДанныеЗаполнены = Истина;

	КонецЕсли;

КонецПроцедуры

#Область ПроцедурыПечати

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПересчетТоваровСамостоятельный") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПересчетТоваровСамостоятельный", 
			"Инвентаризация магазина" + ?(ПараметрыПечати["Пустографка"], " (пустая)", ""), 
			ПечатьИнветаризацияТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыПечати["Пустографка"], ПараметрыВывода),,,Истина);

	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПересчетТоваровСамостоятельныйСОтклонением") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПересчетТоваровСамостоятельныйСОтклонением", 
		"Инвентаризация магазина" + ?(ПараметрыПечати["Пустографка"], " (пустая)", ""), 
		ПечатьИнветаризацияТоваровСОтклонением(МассивОбъектов, ОбъектыПечати, ПараметрыПечати["Пустографка"], ПараметрыВывода),,,Истина);
		
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетОСостоянииСклада") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОтчетОСостоянииСклада", 
		"Состояние складского учёта", 
		ПечатьОтчетОСостоянииСклада(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,,Истина);
		
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РезультатыПересчетовТоваровСамостоятельных") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РезультатыПересчетовТоваровСамостоятельных", 
		"Результат инвентаризации магазина (с)", 
		ПечатьРезультатыПересчетовТоваровСамостоятельных(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,,Истина);
		
	КонецЕсли;

КонецПроцедуры

//	LNK 16.02.2018 12:34:32
Функция ПечатьРезультатыПересчетовТоваровСамостоятельных(ПараметрыОтборов, ОбъектыПечати, ПараметрыВывода)

	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;

	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Пересчет магазина самостотельный';uk='Перерахунок магазину самостійний'", КодЯзыкаПечать);

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПересчетТоваровСамостоятельный_РезультатыПересчетовТоваровСамостоятельных";

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Реестр
	|ИЗ
	|	Документ.ПересчетТоваровСамостоятельный КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Магазин = &Магазин
	|	И ТаблицаДокумента.Склад = &Склад
	|	И ТаблицаДокумента.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)
	|	И ТаблицаДокумента.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура.ВидНоменклатуры.IDN КАК Проект,
	|	Товары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	Товары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА СУММА(Товары.КоличествоУпаковок) = 0
	|			ТОГДА Товары.Цена
	|		ИНАЧЕ СУММА(Товары.Сумма) / СУММА(Товары.КоличествоУпаковок)
	|	КОНЕЦ КАК Цена,
	|	СУММА(Товары.КоличествоФакт) КАК Количество,
	|	СУММА(Товары.Количество) КАК КоличествоУчет,
	|	СУММА(Товары.СуммаФакт) КАК Сумма,
	|	СУММА(Товары.Сумма) КАК СуммаУчет
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Реестр КАК Реестр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПересчетТоваровСамостоятельный.Товары КАК Товары
	|		ПО Реестр.Ссылка = Товары.Ссылка
	|ГДЕ
	|	Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Цена,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения
	|	КОНЕЦ,
	|	Товары.Номенклатура.ВидНоменклатуры.IDN
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(Товары.Сумма) = СУММА(Товары.СуммаФакт)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реестр.Ссылка.Ссылка КАК СсылкаСсылка,
	|	Реестр.Ссылка.Дата КАК СсылкаДата,
	|	Реестр.Ссылка.Номер КАК СсылкаНомер,
	|	Реестр.Ссылка.Представление КАК СсылкаПредставление
	|ИЗ
	|	Реестр КАК Реестр
	|
	|УПОРЯДОЧИТЬ ПО
	|	СсылкаДата,
	|	СсылкаСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВедущая.Проект КАК Проект,
	|	ТаблицаВедущая.Номенклатура КАК Номенклатура,
	|	ТаблицаВедущая.Номенклатура.НаименованиеПолное КАК Товар,
	|	ТаблицаВедущая.Номенклатура.Код КАК Код,
	|	ТаблицаВедущая.Номенклатура.Артикул КАК Артикул,
	|	ТаблицаВедущая.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияПредставление,
	|	ТаблицаВедущая.Номенклатура.Производитель КАК Производитель,
	|	ТаблицаВедущая.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаВедущая.Характеристика КАК Характеристика,
	|	ТаблицаВедущая.Цена КАК Цена,
	|	ТаблицаВедущая.Количество КАК Количество,
	|	ТаблицаВедущая.КоличествоУчет КАК КоличествоУчет,
	|	ТаблицаВедущая.Сумма КАК Сумма,
	|	ТаблицаВедущая.СуммаУчет КАК СуммаУчет,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаВедущая.Номенклатура) КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаВедущая.Характеристика) КАК ХарактеристикаПредставление,
	|	ЕСТЬNULL(ТаблицаРеквизиты.Значение, 0) КАК Размерность
	|ИЗ
	|	Товары КАК ТаблицаВедущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ТаблицаРеквизиты
	|		ПО ТаблицаВедущая.Номенклатура = ТаблицаРеквизиты.Ссылка
	|			И (ТаблицаРеквизиты.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.РазмерностьТовара))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Артикул,
	|	Код
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаУчет)
	|ПО
	|	ОБЩИЕ,
	|	Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Штрихкоды.Владелец КАК Номенклатура,
	|	Штрихкоды.Характеристика КАК Характеристика,
	|	Штрихкоды.Штрихкод КАК Штрихкод
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Владелец
	|			И Товары.Характеристика = Штрихкоды.Характеристика
	|ГДЕ
	|	Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
	|	И ЕСТЬNULL(Штрихкоды.Упаковка.Коэффициент, 1) = 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	Штрихкод"
	);
	Запрос.УстановитьПараметр("Магазин", ПараметрыОтборов.Магазин);
	Запрос.УстановитьПараметр("Склад"  , ПараметрыОтборов.Склад);
	Запрос.УстановитьПараметр("ДатаНачала", ПараметрыОтборов.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПараметрыОтборов.ДатаОкончания);

	Результаты = Запрос.ВыполнитьПакет();
	РеестрВыборка = Результаты[2].Выбрать();
	ОбщаяВыборка  = Результаты[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Штрихкоды = Новый ПостроительЗапроса;
	Штрихкоды.ИсточникДанных = Новый ОписаниеИсточникаДанных(Результаты[4].Выгрузить());
	Штрихкоды.Отбор.Добавить("Номенклатура");
	Штрихкоды.Отбор.Добавить("Характеристика");
	
	Макет = УправлениеПечатью.ПолучитьМакет("Документ.ПересчетТоваровСамостоятельный.ПФ_MXL_ПересчетТоваровСамостоятельныйСОтклонением", КодЯзыкаПечать);

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьРеестр    = Макет.ПолучитьОбласть("ЗаголовокРеестр");
	ОбластьШапка     = Макет.ПолучитьОбласть("Шапка");
	ОбластьПроект    = Макет.ПолучитьОбласть("Проект");
	ОбластьИтого     = Макет.ПолучитьОбласть("Итого");
	
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");

//	ЗАГОЛОВОК
	ОбластьЗаголовок.Параметры.ТекстЗаголовка = "Результат перерахункiв самостiйних за перiод з "
		+ Формат(ПараметрыОтборов.ДатаНачала   , "ДФ=dd.MM.yyyy") + " по "
		+ Формат(ПараметрыОтборов.ДатаОкончания, "ДФ=dd.MM.yyyy");

	ТабличныйДокумент.Вывести(ОбластьЗаголовок);

	ОбластьШапка.Параметры.СкладПредставление = СокрЛП(ПараметрыОтборов.Склад);
	ТабличныйДокумент.Вывести(ОбластьШапка);

	ОбластьРеестр.Параметры.РеестрПредставление = "";

	Пока РеестрВыборка.Следующий() Цикл

		ОбластьРеестр.Параметры.РеестрПредставление = ОбластьРеестр.Параметры.РеестрПредставление
		+ РеестрВыборка.СсылкаПредставление + Символы.ПС;

	КонецЦикла;

	ТабличныйДокумент.Вывести(ОбластьРеестр);

	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицы"));

	ВсегоНаименований = 0;

//	ТАБЛИЧНАЯ ЧАСТЬ
	Если ОбщаяВыборка.Следующий() Тогда

		ПроектыВыборка = ОбщаяВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ПроектыВыборка.Следующий() Цикл

			ОбластьПроект.Параметры.Проект = СокрЛП(ПроектыВыборка.Проект);
			ТабличныйДокумент.Вывести(ОбластьПроект);

			ТоварыВыборка = ПроектыВыборка.Выбрать();

			Пока ТоварыВыборка.Следующий() Цикл

				Штрихкоды.Отбор.Номенклатура.Установить(ТоварыВыборка.Номенклатура);
				Штрихкоды.Отбор.Характеристика.Установить(ТоварыВыборка.Характеристика);
				Штрихкоды.Выполнить();

				ТекстШтрихкодов  = "";
				ШтрихкодыВыборка = Штрихкоды.Результат.Выбрать();

				Пока ШтрихкодыВыборка.Следующий() Цикл

					Если НЕ ПустаяСтрока(ШтрихкодыВыборка.Штрихкод) Тогда

						ТекстШтрихкодов = ТекстШтрихкодов + ?(ПустаяСтрока(ТекстШтрихкодов), "", Символы.ПС) + СокрЛП(ШтрихкодыВыборка.Штрихкод);

					КонецЕсли;

				КонецЦикла;

				ВсегоНаименований = ВсегоНаименований + 1;

				ОбластьСтрокаТаблицы.Параметры.Заполнить(ТоварыВыборка);
				ОбластьСтрокаТаблицы.Параметры.Штрихкод    = ТекстШтрихкодов;
				ОбластьСтрокаТаблицы.Параметры.НомерСтроки = ВсегоНаименований;

				ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);

			КонецЦикла;

			ОбластьИтого.Параметры.ЗаголовокИтого = "итого по проекту: «" + СокрЛП(ПроектыВыборка.Проект) + "»";
			ОбластьИтого.Параметры.Итого     = ПроектыВыборка.Сумма;
			ОбластьИтого.Параметры.ИтогоУчет = ПроектыВыборка.СуммаУчет;

			ТабличныйДокумент.Вывести(ОбластьИтого);

		КонецЦикла;

		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПодвалТаблицы"));

		ОбластьПодписей      = Макет.ПолучитьОбласть("Подписи");
		ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");

		ОбластьИтого.Параметры.ЗаголовокИтого = "Итого:";
		ОбластьИтого.Параметры.Итого     = ОбщаяВыборка.Сумма;
		ОбластьИтого.Параметры.ИтогоУчет = ОбщаяВыборка.СуммаУчет;

		ТабличныйДокумент.Вывести(ОбластьИтого);
		
	//	ПОДПИСИ
		ОбластьПодписей.Параметры.РазницаФактическая = ОбщаяВыборка.Сумма - ОбщаяВыборка.СуммаУчет ;
	//	ОбластьПодписей.Параметры.ОтветственныйПредставление = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ПараметрыСеанса.ТекущийПользователь);
		ТабличныйДокумент.Вывести(ОбластьПодписей);

	КонецЕсли;
	
//	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);

	Возврат ТабличныйДокумент;

КонецФункции // ПечатьРезультатыПересчетовТоваровСамостоятельных()

Функция ПечатьИнветаризацияТоваров(МассивОбъектов, ОбъектыПечати, Пустографка = Ложь, ПараметрыВывода)
		
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;

	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Инвентаризация магазина';uk='Інвентаризація магазина'", КодЯзыкаПечать);

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПересчетТоваровСамостоятельный_ПересчетТоваровСамостоятельный";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Организация КАК Организация,
	|	Документ.Склад КАК Склад,
	|	Документ.Ответственный.ФизЛицо КАК Ответственный,
	|	ВЫБОР
	|		КОГДА ТаблицаОрганизаций.Организация ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ТаблицаОрганизаций.Организация.Префикс
	|	КОНЕЦ КАК Префикс,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Склад) КАК СкладПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ОрганизацияПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Ответственный.ФизЛицо) КАК ОтветственныйПредставление
	|ИЗ
	|	Документ.ПересчетТоваровСамостоятельный КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииПодразделений.СрезПоследних КАК ТаблицаОрганизаций
	|		ПО Документ.Склад.Магазин = ТаблицаОрганизаций.Владелец
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	Товары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА Товары.КоличествоУпаковок = 0
	|			ТОГДА Товары.Цена
	|		ИНАЧЕ Товары.Сумма / Товары.КоличествоУпаковок
	|	КОНЕЦ КАК Цена,
	|	Товары.КоличествоФакт КАК Количество,
	|	Товары.Количество КАК КоличествоУчет,
	|	Товары.СуммаФакт КАК Сумма,
	|	Товары.Сумма КАК СуммаУчет,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ПересчетТоваровСамостоятельный.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&МассивОбъектов)
	|	И Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ТаблицаТовары.Номенклатура.Код КАК Код,
	|	ТаблицаТовары.Номенклатура.Артикул КАК Артикул,
	|	ТаблицаТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияПредставление,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА &БезФактическихДанных
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА &БезФактическихДанных
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.КоличествоУчет
	|	КОНЕЦ КАК КоличествоУчет,
	|	ВЫБОР
	|		КОГДА &БезФактическихДанных
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА &БезФактическихДанных
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.СуммаУчет
	|	КОНЕЦ КАК СуммаУчет,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура) КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление
	|ИЗ
	|	Товары КАК ТаблицаТовары
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Штрихкоды.Владелец КАК Номенклатура,
	|	Штрихкоды.Характеристика КАК Характеристика,
	|	Штрихкоды.Штрихкод КАК Штрихкод
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Владелец
	|			И Товары.Характеристика = Штрихкоды.Характеристика
	|ГДЕ
	|	Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
	|	И ЕСТЬNULL(Штрихкоды.Упаковка.Коэффициент, 1) = 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	Штрихкод"
	);
	Запрос.УстановитьПараметр("МассивОбъектов"      , МассивОбъектов);
	Запрос.УстановитьПараметр("БезФактическихДанных", Пустографка);

	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.ПолучитьМакет("Документ.ПересчетТоваровСамостоятельный.ПФ_MXL_ПересчетТоваровСамостоятельный" + ?(Пустографка, "Пустая", ""), КодЯзыкаПечать);

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка     = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	
	ОбластьШапкаТаблицыНачало  = Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
	ОбластьСтрокаТаблицыНачало = Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
	ОбластьПодвалТаблицыНачало = Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
	
	ОбластьШапкаТаблицыКолонкаКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьСтрокаТаблицыКолонкаКодов = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
	ОбластьПодвалТаблицыКолонкаКодов = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
	
	ОбластьКолонкаТоваров = Макет.Область("КолонкаТоваров");
	ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
	
	ОбластьШапкаТаблицыКолонкаТоваров  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
	ОбластьСтрокаТаблицыКолонкаТоваров = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
	ОбластьПодвалТаблицыКолонкаТоваров = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
	
	ОбластьШапкаТаблицыКонец  = Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	ОбластьСтрокаТаблицыКонец = Макет.ПолучитьОбласть("СтрокаТаблицы|КонецСтроки");
	ОбластьПодвалТаблицыКонец = Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");
	
	ОбластьПодписей      = Макет.ПолучитьОбласть("Подписи");
	ОбластьИтого         = Макет.ПолучитьОбласть("Итого");
	ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	
	ВыборкаПоТабличнымЧастям = Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	

	Штрихкоды = Новый ПостроительЗапроса;
	Штрихкоды.ИсточникДанных = Новый ОписаниеИсточникаДанных(Результаты[3].Выгрузить());
	Штрихкоды.Отбор.Добавить("Номенклатура");
	Штрихкоды.Отбор.Добавить("Характеристика");

	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//ЗАГОЛОВОК
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента, КодЯзыкаПечать);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		//ШАПКА
		ОбластьШапка.Параметры.Заполнить(ВыборкаПоДокументам);	
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаКодов);
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров);
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);
		ВсегоНаименований  = 0;
		Итого              = 0;
		ИтогоУчет          = 0;
		
		//СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
		//	LNK 05.02.2018 12:25:10
			Штрихкоды.Отбор.Номенклатура.Установить(ВыборкаПоСтрокамТЧ.Номенклатура);
			Штрихкоды.Отбор.Характеристика.Установить(ВыборкаПоСтрокамТЧ.Характеристика);
			Штрихкоды.Выполнить();

			ТекстШтрихкодов  = "";
			ШтрихкодыВыборка = Штрихкоды.Результат.Выбрать();

			Пока ШтрихкодыВыборка.Следующий() Цикл

				Если НЕ ПустаяСтрока(ШтрихкодыВыборка.Штрихкод) Тогда

					ТекстШтрихкодов = ТекстШтрихкодов + ?(ПустаяСтрока(ТекстШтрихкодов), "", Символы.ПС) + СокрЛП(ШтрихкодыВыборка.Штрихкод);

				КонецЕсли;

			КонецЦикла;

			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);

		//	LNK 05.02.2018 12:25:46
			ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Штрихкод = ТекстШтрихкодов;
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
			
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
			
			ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);	
			
			ВсегоНаименований = ВсегоНаименований + 1;
			Итого             = Итого + ВыборкаПоСтрокамТЧ.Сумма;
			ИтогоУчет         = ИтогоУчет + ВыборкаПоСтрокамТЧ.СуммаУчет;
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаКодов);
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
		
		//ИТОГО
		Если НЕ Пустографка Тогда
			ОбластьИтого.Параметры.Итого     = Итого;
			ОбластьИтого.Параметры.ИтогоУчет = ИтогоУчет;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьИтого);

		//СУММА ПРОПИСЬЮ
		
		Если НЕ Пустографка Тогда
			ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%, на сумму %Итого%';uk='Усього найменувань %ВсегоНаименований%, на суму %Итого%'", КодЯзыкаПечать);
			СуммаКПрописи = Итого;
			
			ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
			ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%", ФормированиеПечатныхФормСервер.ФорматСумм(СуммаКПрописи));
			
			ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
			ОбластьСуммаПрописью.Параметры.СуммаПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(СуммаКПрописи, , КодЯзыкаПечать);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		//ПОДПИСИ
		ОбластьПодписей.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьПодписей.Параметры.ОтветственныйПредставление = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
    	
КонецФункции

Функция ПечатьИнветаризацияТоваровСОтклонением(МассивОбъектов, ОбъектыПечати, Пустографка = Ложь, ПараметрыВывода)
		
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;

	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Инвентаризация магазина';uk='Інвентаризація магазина'", КодЯзыкаПечать);

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПересчетТоваровСамостоятельный_ПересчетТоваровСамостоятельный";
	
	Запрос = Новый Запрос (
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Организация КАК Организация,
	|	Документ.Склад КАК Склад,
	|	Документ.Ответственный.ФизЛицо КАК Ответственный,
	|	ВЫБОР
	|		КОГДА ТаблицаОрганизаций.Организация ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ТаблицаОрганизаций.Организация.Префикс
	|	КОНЕЦ КАК Префикс,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Склад) КАК СкладПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ОрганизацияПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Ответственный.ФизЛицо) КАК ОтветственныйПредставление
	|ИЗ
	|	Документ.ПересчетТоваровСамостоятельный КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииПодразделений.СрезПоследних КАК ТаблицаОрганизаций
	|		ПО Документ.Склад.Магазин = ТаблицаОрганизаций.Владелец
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВедущая.Ссылка КАК Ссылка,
	|	ТаблицаВедущая.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаВедущая.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаВедущая.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ТаблицаВедущая.Упаковка.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ТаблицаВедущая.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаВедущая.КоличествоУпаковок = 0
	|			ТОГДА ТаблицаВедущая.Цена
	|		ИНАЧЕ ТаблицаВедущая.Сумма / ТаблицаВедущая.КоличествоУпаковок
	|	КОНЕЦ КАК Цена,
	|	ТаблицаВедущая.КоличествоФакт КАК Количество,
	|	ТаблицаВедущая.Количество КАК КоличествоУчет,
	|	ТаблицаВедущая.СуммаФакт КАК Сумма,
	|	ТаблицаВедущая.Сумма КАК СуммаУчет,
	|	ТаблицаВедущая.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВедущая.КоличествоФакт - ТаблицаВедущая.Количество КАК Отклонение,
	|	ЕСТЬNULL(ТаблицаРеквизиты.Значение, """") КАК Размер
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ПересчетТоваровСамостоятельный.Товары КАК ТаблицаВедущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ТаблицаРеквизиты
	|		ПО ТаблицаВедущая.Номенклатура = ТаблицаРеквизиты.Ссылка
	|			И (ТаблицаРеквизиты.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.РазмерностьТовара))
	|ГДЕ
	|	ТаблицаВедущая.Ссылка В(&МассивОбъектов)
	|	И ТаблицаВедущая.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ТаблицаТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияПредставление,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА &БезФактическихДанных
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА &БезФактическихДанных
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.КоличествоУчет
	|	КОНЕЦ КАК КоличествоУчет,
	|	ВЫБОР
	|		КОГДА &БезФактическихДанных
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА &БезФактическихДанных
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.СуммаУчет
	|	КОНЕЦ КАК СуммаУчет,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура) КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ТаблицаТовары.Номенклатура.Код КАК НоменклатураКод,
	|	ТаблицаТовары.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ТаблицаТовары.Номенклатура.Производитель КАК НоменклатураПроизводитель,
	|	ТаблицаТовары.Размер КАК Размер
	|ИЗ
	|	Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Отклонение <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Штрихкоды.Владелец КАК Номенклатура,
	|	Штрихкоды.Характеристика КАК Характеристика,
	|	Штрихкоды.Штрихкод КАК Штрихкод
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Владелец
	|			И Товары.Характеристика = Штрихкоды.Характеристика
	|ГДЕ
	|	Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
	|	И ЕСТЬNULL(Штрихкоды.Упаковка.Коэффициент, 1) = 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	Штрихкод"
	);
	Запрос.УстановитьПараметр("МассивОбъектов"      , МассивОбъектов);
	Запрос.УстановитьПараметр("БезФактическихДанных", Пустографка);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.ПолучитьМакет("Документ.ПересчетТоваровСамостоятельный.ПФ_MXL_ПересчетТоваровСамостоятельныйСОтклонением" + ?(Пустографка, "Пустая", ""), КодЯзыкаПечать);

	// ОБЩИЕ ОБЛАСТИ
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка     		= Макет.ПолучитьОбласть("Шапка");
	ОбластьКолонкаТоваров 	= Макет.Область("КолонкаТоваров");
	ОбластьСтрокаТаблицы 	= Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьПодвалТаблицы 	= Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьИтого         	= Макет.ПолучитьОбласть("Итого"); 
	ОбластьСуммаПрописью 	= Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьПодписи      	= Макет.ПолучитьОбласть("Подписи");    
	
	// ОБЛАСТЬ НАЧАЛО СТРОКИ	
	ОбластьЗаголовокНачало  	= Макет.ПолучитьОбласть("Заголовок|НачалоСтроки");
	ОбластьШапкаНачало  		= Макет.ПолучитьОбласть("Шапка|НачалоСтроки");
	ОбластьШапкаТаблицыНачало  	= Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
	ОбластьСтрокаТаблицыНачало 	= Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
	ОбластьПодвалТаблицыНачало 	= Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
	ОбластьИтогоНачало 			= Макет.ПолучитьОбласть("Итого|НачалоСтроки");
	ОбластьПодписиНачало 		= Макет.ПолучитьОбласть("Подписи|НачалоСтроки");
	
	// ОБЛАСТЬ КОЛОНКА ТОВАРОВ
	ОбластьЗаголовокКолонкаТоваров  	= Макет.ПолучитьОбласть("Заголовок|КолонкаТоваров");
	ОбластьШапкаКолонкаТоваров  		= Макет.ПолучитьОбласть("Шапка|КолонкаТоваров");
	ОбластьШапкаТаблицыКолонкаТоваров  	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
	ОбластьСтрокаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
	ОбластьПодвалТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
	ОбластьИтогоКолонкаТоваров 			= Макет.ПолучитьОбласть("Итого|КолонкаТоваров");
	ОбластьПодписиКолонкаТоваров 		= Макет.ПолучитьОбласть("Подписи|КолонкаТоваров");
	
	// ОБЛАСТЬ КОНЕЦ СТРОКИ
	ОбластьЗаголовокКонец  		= Макет.ПолучитьОбласть("Заголовок|КонецСтроки");
	ОбластьШапкаКонец  			= Макет.ПолучитьОбласть("Шапка|КонецСтроки");
	ОбластьШапкаТаблицыКонец  	= Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	ОбластьСтрокаТаблицыКонец 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КонецСтроки");
	ОбластьПодвалТаблицыКонец 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");
	ОбластьИтогоКонец 			= Макет.ПолучитьОбласть("Итого|КонецСтроки");
	ОбластьПодписиКонец 		= Макет.ПолучитьОбласть("Подписи|КонецСтроки");
	
	// ЗАПОЛНЕНИЕ	
	ВыборкаПоДокументам = Результаты[0].Выбрать();   	
	ВыборкаПоТабличнымЧастям = Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	Штрихкоды = Новый ПостроительЗапроса;
	Штрихкоды.ИсточникДанных = Новый ОписаниеИсточникаДанных(Результаты[3].Выгрузить());
	Штрихкоды.Отбор.Добавить("Номенклатура");
	Штрихкоды.Отбор.Добавить("Характеристика");

	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//ЗАГОЛОВОК
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовокКолонкаТоваров.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьЗаголовокКолонкаТоваров.Параметры.ТекстЗаголовка = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента, КодЯзыкаПечать);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовокНачало);
		ТабличныйДокумент.Присоединить(ОбластьЗаголовокКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьЗаголовокКонец);
		   		
		//ШАПКА
		ОбластьШапкаКолонкаТоваров.Параметры.Заполнить(ВыборкаПоДокументам);	
		
		ТабличныйДокумент.Вывести(ОбластьШапкаНачало);
		ТабличныйДокумент.Присоединить(ОбластьШапкаКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьШапкаКонец);
		
		//ШАПКА ТАБЛИЦА
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров); 		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);
		
		ВсегоНаименований  = 0;
		Итого              = 0;
		ИтогоУчет          = 0;
		
		//СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
		//	LNK 05.02.2018 12:41:22
			Штрихкоды.Отбор.Номенклатура.Установить(ВыборкаПоСтрокамТЧ.Номенклатура);
			Штрихкоды.Отбор.Характеристика.Установить(ВыборкаПоСтрокамТЧ.Характеристика);
			Штрихкоды.Выполнить();

			ТекстШтрихкодов  = "";
			ШтрихкодыВыборка = Штрихкоды.Результат.Выбрать();

			Пока ШтрихкодыВыборка.Следующий() Цикл

				Если НЕ ПустаяСтрока(ШтрихкодыВыборка.Штрихкод) Тогда

					ТекстШтрихкодов = ТекстШтрихкодов + ?(ПустаяСтрока(ТекстШтрихкодов), "", Символы.ПС) + СокрЛП(ШтрихкодыВыборка.Штрихкод);

				КонецЕсли;

			КонецЦикла;

			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
			
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Производитель = ВыборкаПоСтрокамТЧ.НоменклатураПроизводитель;
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Код = ВыборкаПоСтрокамТЧ.НоменклатураКод;
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Артикул     = ВыборкаПоСтрокамТЧ.НоменклатураАртикул;
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Размерность = ВыборкаПоСтрокамТЧ.Размер;
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Штрихкод = ТекстШтрихкодов;
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
			
			ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);	
			
			ВсегоНаименований = ВсегоНаименований + 1;
			Итого             = Итого + ВыборкаПоСтрокамТЧ.Сумма;
			ИтогоУчет         = ИтогоУчет + ВыборкаПоСтрокамТЧ.СуммаУчет;
			
		КонецЦикла;
		
		//ПОДВАЛ (пустой)
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
		
		//ИТОГО
		Если НЕ Пустографка Тогда
			ОбластьИтогоКонец.Параметры.Итого     = Итого;
			ОбластьИтогоКонец.Параметры.ИтогоУчет = ИтогоУчет;
		КонецЕсли;
		
		ОбластьИтогоКонец.Параметры.ЗаголовокИтого = "Итого:";
		ТабличныйДокумент.Вывести(ОбластьИтогоНачало);
		ТабличныйДокумент.Присоединить(ОбластьИтогоКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьИтогоКонец);

		//СУММА ПРОПИСЬЮ  		
		//Если НЕ Пустографка Тогда
		//	ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%, на сумму %Итого%';uk='Усього найменувань %ВсегоНаименований%, на суму %Итого%'", КодЯзыкаПечать);
		//	СуммаКПрописи = Итого;
		//	
		//	ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		//	ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%", ФормированиеПечатныхФормСервер.ФорматСумм(СуммаКПрописи));
		//	
		//	ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
		//	ОбластьСуммаПрописью.Параметры.СуммаПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(СуммаКПрописи, , КодЯзыкаПечать);
		//КонецЕсли;
		//ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		//ПОДПИСИ
		//ОбластьПодписей.Параметры.Заполнить(ВыборкаПоДокументам);
		//ОбластьПодписей.Параметры.ОтветственныйПредставление = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		ОбластьПодписиКонец.Параметры.РазницаФактическая = Итого - ИтогоУчет ;
		
		ТабличныйДокумент.Вывести(ОбластьПодписиНачало);
		ТабличныйДокумент.Присоединить(ОбластьПодписиКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьПодписиКонец);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьОтчетОСостоянииСклада(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)	Экспорт

	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;

	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Инвентаризация магазина';uk='Інвентаризація магазина'", КодЯзыкаПечать);

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПересчетТоваровСамостоятельный_ОтчетОСостоянииСклада";
	Макет = УправлениеПечатью.ПолучитьМакет("Документ.ПересчетТоваровСамостоятельный.ПФ_MXL_ОтчетОСостоянииСклада", КодЯзыкаПечать);

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьСтрока    = Макет.ПолучитьОбласть("Строка");

	Для каждого ДокументСсылка Из МассивОбъектов Цикл

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПересчетТоваров.Дата КАК Период,
		|	ПересчетТоваров.Номер КАК Номер,
		|	ПересчетТоваров.Ссылка КАК Ссылка,
		|	ПересчетТоваров.Склад КАК Склад,
		|	ПересчетТоваров.Магазин КАК Магазин,
		|	ПересчетТоваров.МоментВремени КАК МоментВремени
		|ИЗ
		|	Документ.ПересчетТоваровСамостоятельный КАК ПересчетТоваров
		|ГДЕ
		|	ПересчетТоваров.Ссылка = &Ссылка"
		);
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Реквизиты = РезультатЗапроса.Выбрать();
		Реквизиты.Следующий(); 
		
		ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВПараметрыЗапроса(РезультатЗапроса, Реквизиты, Запрос);

		Запрос.УстановитьПараметр("ГраницаСреза", Новый Граница(Реквизиты.МоментВремени, ВидГраницы.Исключая));

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ОграниченияПоИнвентаризации.ГраницаЗапрета, СЕКУНДА, 1), Ведущая.Период) КАК ГраницаЗапрета,
		|	ОграниченияПоИнвентаризации.ДокументОграничения КАК ДокументОграничения,
		|	ПРЕДСТАВЛЕНИЕ(ОграниченияПоИнвентаризации.ДокументОграничения) КАК ДокументОграниченияПредставление
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Период, ДЕНЬ), МЕСЯЦ, -1) КАК Период) КАК Ведущая
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОграниченияДвиженийПоИнвентаризации.СрезПоследних(&ГраницаСреза, Магазин = &Магазин) КАК ОграниченияПоИнвентаризации
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				МАКСИМУМ(ОграниченияПоИнвентаризации.ГраницаЗапрета) КАК ГраницаЗапрета
		|			ИЗ
		|				РегистрСведений.ОграниченияДвиженийПоИнвентаризации.СрезПоследних(&ГраницаСреза, Магазин = &Магазин) КАК ОграниченияПоИнвентаризации
		|			ГДЕ
		|				ОграниченияПоИнвентаризации.Склад = &Склад) КАК Фильтр
		|			ПО ОграниченияПоИнвентаризации.ГраницаЗапрета = Фильтр.ГраницаЗапрета
		|				И (ОграниченияПоИнвентаризации.Склад = &Склад)
		|		ПО (ИСТИНА)"
		;
		РезультатЗапроса = Запрос.Выполнить();
		НачалоПериода    = РезультатЗапроса.Выбрать();
		НачалоПериода.Следующий();
		
		ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВПараметрыЗапроса(РезультатЗапроса, НачалоПериода, Запрос);

	//	ЗАГОЛОВОК
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, Реквизиты);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента, КодЯзыкаПечать);
		ОбластьЗаголовок.Параметры.ТекстНачалоПериода = "Начало периода оценки состояния склада: "
			+ Формат(НачалоПериода.ГраницаЗапрета, "ДЛФ=DT")
			+ ?(ЗначениеЗаполнено(НачалоПериода.ДокументОграничения), ", ограничено документом «" + НачалоПериода.ДокументОграниченияПредставление + "»", "");
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Шапка"));

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокументы.Дата КАК Дата,
		|	ТаблицаДокументы.Ссылка КАК Ссылка,
		|	ТаблицаДокументы.Представление КАК Представление,
		|	ВЫБОР
		|		КОГДА НЕ ТаблицаДокументы.Проведен
		|			ТОГДА ""должен быть проведен""
		|		КОГДА ТаблицаУчета.Объект ЕСТЬ NULL
		|			ТОГДА ""необходимо учесть для выгрузки в Navision""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ТекстПроблемы
		|ИЗ
		|	Документ.ОприходованиеТоваров КАК ТаблицаДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаУчета
		|		ПО ТаблицаДокументы.Ссылка = ТаблицаУчета.Объект
		|			И ТаблицаДокументы.Магазин = ТаблицаУчета.Магазин
		|ГДЕ
		|	(НЕ ТаблицаДокументы.Проведен
		|			ИЛИ ТаблицаУчета.Магазин ЕСТЬ NULL)
		|	И НЕ ТаблицаДокументы.ПометкаУдаления
		|	И (ТаблицаДокументы.ДокументОснование = НЕОПРЕДЕЛЕНО
		|			ИЛИ ТаблицаДокументы.ДокументОснование = ЗНАЧЕНИЕ(Документ.ПриказНаПроведениеИнвентаризацииТоваров.ПустаяСсылка))
		|	И ТаблицаДокументы.Дата МЕЖДУ &ГраницаЗапрета И &Период
		|	И ТаблицаДокументы.Магазин = &Магазин
		|	И ТаблицаДокументы.Склад = &Склад
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокументы.Дата,
		|	ТаблицаДокументы.Ссылка,
		|	ТаблицаДокументы.Представление,
		|	ВЫБОР
		|		КОГДА НЕ ТаблицаДокументы.Проведен
		|			ТОГДА ""должен быть проведен""
		|		КОГДА ТаблицаУчета.Объект ЕСТЬ NULL
		|			ТОГДА ""необходимо учесть для выгрузки в Navision""
		|		ИНАЧЕ """"
		|	КОНЕЦ
		|ИЗ
		|	Документ.СписаниеТоваров КАК ТаблицаДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаУчета
		|		ПО ТаблицаДокументы.Ссылка = ТаблицаУчета.Объект
		|			И ТаблицаДокументы.Магазин = ТаблицаУчета.Магазин
		|ГДЕ
		|	(НЕ ТаблицаДокументы.Проведен
		|			ИЛИ ТаблицаУчета.Магазин ЕСТЬ NULL)
		|	И НЕ ТаблицаДокументы.ПометкаУдаления
		|			И (ТаблицаДокументы.ДокументОснование = НЕОПРЕДЕЛЕНО
		|				ИЛИ ТаблицаДокументы.ДокументОснование = ЗНАЧЕНИЕ(Документ.ПриказНаПроведениеИнвентаризацииТоваров.ПустаяСсылка))
		|	И ТаблицаДокументы.Дата МЕЖДУ &ГраницаЗапрета И &Период
		|	И ТаблицаДокументы.Магазин = &Магазин
		|	И ТаблицаДокументы.Склад = &Склад
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокументы.Дата,
		|	ТаблицаДокументы.Ссылка,
		|	ТаблицаДокументы.Представление,
		|	ВЫБОР
		|		КОГДА НЕ ТаблицаДокументы.Проведен
		|			ТОГДА ""должен быть проведен""
		|		КОГДА ТаблицаУчета.Объект ЕСТЬ NULL
		|			ТОГДА ""необходимо учесть для выгрузки в Navision""
		|		ИНАЧЕ """"
		|	КОНЕЦ
		|ИЗ
		|	Документ.ПересортицаТоваров КАК ТаблицаДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаУчета
		|		ПО ТаблицаДокументы.Ссылка = ТаблицаУчета.Объект
		|			И ТаблицаДокументы.Магазин = ТаблицаУчета.Магазин
		|ГДЕ
		|	(НЕ ТаблицаДокументы.Проведен
		|			ИЛИ ТаблицаУчета.Магазин ЕСТЬ NULL)
		|	И НЕ ТаблицаДокументы.ПометкаУдаления
		|	И ТаблицаДокументы.Дата МЕЖДУ &ГраницаЗапрета И &Период
		|	И ТаблицаДокументы.Магазин = &Магазин
		|	И ТаблицаДокументы.Склад = &Склад
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокументы.Дата,
		|	ТаблицаДокументы.Ссылка,
		|	ТаблицаДокументы.Представление,
		|	ВЫБОР
		|		КОГДА НЕ ТаблицаДокументы.Проведен
		|			ТОГДА ""должен быть проведен""
		|		КОГДА ТаблицаУчета.Объект ЕСТЬ NULL
		|			ТОГДА ""необходимо учесть для выгрузки в Navision""
		|		ИНАЧЕ """"
		|	КОНЕЦ
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ТаблицаДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаУчета
		|		ПО ТаблицаДокументы.Ссылка = ТаблицаУчета.Объект
		|			И (ТаблицаДокументы.МагазинОтправитель = ТаблицаУчета.Магазин
		|				ИЛИ ТаблицаДокументы.МагазинПолучатель = ТаблицаУчета.Магазин)
		|ГДЕ
		|	(НЕ ТаблицаДокументы.Проведен
		|			ИЛИ ТаблицаУчета.Магазин ЕСТЬ NULL)
		|	И НЕ ТаблицаДокументы.ПометкаУдаления
		|	И ТаблицаДокументы.Дата МЕЖДУ &ГраницаЗапрета И &Период
		|	И &Магазин В (ТаблицаДокументы.МагазинОтправитель, ТаблицаДокументы.МагазинПолучатель)
		|	И &Склад В (ТаблицаДокументы.СкладОтправитель, ТаблицаДокументы.СкладПолучатель)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокументы.Дата,
		|	ТаблицаДокументы.Ссылка,
		|	ТаблицаДокументы.Представление,
		|	ВЫБОР
		|		КОГДА НЕ ТаблицаДокументы.Проведен
		|			ТОГДА ""должен быть проведен""
		|		КОГДА ТаблицаУчета.Объект ЕСТЬ NULL
		|			ТОГДА ""необходимо учесть для выгрузки в Navision""
		|		ИНАЧЕ """"
		|	КОНЕЦ
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары КАК ТаблицаДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаУчета
		|		ПО ТаблицаДокументы.Ссылка = ТаблицаУчета.Объект
		|			И ТаблицаДокументы.Магазин = ТаблицаУчета.Магазин
		|ГДЕ
		|	(НЕ ТаблицаДокументы.Проведен
		|			ИЛИ ТаблицаУчета.Магазин ЕСТЬ NULL)
		|	И НЕ ТаблицаДокументы.ПометкаУдаления
		|	И ТаблицаДокументы.Дата МЕЖДУ &ГраницаЗапрета И &Период
		|	И ТаблицаДокументы.Магазин = &Магазин
		|	И ТаблицаДокументы.Склад = &Склад
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокументы.Дата,
		|	ТаблицаДокументы.Ссылка,
		|	ТаблицаДокументы.Представление,
		|	ВЫБОР
		|		КОГДА НЕ ТаблицаДокументы.Проведен
		|			ТОГДА ""должен быть проведен""
		|		КОГДА ТаблицаУчета.Объект ЕСТЬ NULL
		|			ТОГДА ""необходимо учесть для выгрузки в Navision""
		|		ИНАЧЕ """"
		|	КОНЕЦ
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК ТаблицаДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектУчтенВNavision КАК ТаблицаУчета
		|		ПО ТаблицаДокументы.Ссылка = ТаблицаУчета.Объект
		|			И ТаблицаДокументы.Магазин = ТаблицаУчета.Магазин
		|ГДЕ
		|	(НЕ ТаблицаДокументы.Проведен
		|			ИЛИ ТаблицаУчета.Магазин ЕСТЬ NULL)
		|	И НЕ ТаблицаДокументы.ПометкаУдаления
		|	И ТаблицаДокументы.Дата МЕЖДУ &ГраницаЗапрета И &Период
		|	И ТаблицаДокументы.Магазин = &Магазин
		|	И ТаблицаДокументы.Склад = &Склад
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка"
		;
		ВыборкаПроблем = Запрос.Выполнить().Выбрать();

		Пока ВыборкаПроблем.Следующий() Цикл

			ОбластьСтрока.Параметры.Заполнить(ВыборкаПроблем);
			ТабличныйДокумент.Вывести(ОбластьСтрока);

		КонецЦикла;

	КонецЦикла;

	ТабличныйДокумент.АвтоМасштаб    = Истина;
	ТабличныйДокумент.ТолькоПросмотр = Истина;

	Возврат ТабличныйДокумент;

КонецФункции // ПечатьОтчетОСостоянииСклада()

#КонецОбласти

#КонецЕсли





