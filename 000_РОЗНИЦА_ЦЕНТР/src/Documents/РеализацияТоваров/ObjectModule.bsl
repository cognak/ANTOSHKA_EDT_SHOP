
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Если НЕ ПодарочныеСертификатыСервер.ОбработкаПроведенияКонтроль("Продажа", ЭтотОбъект, Отказ) Тогда

		Возврат;	//	LNK 05.03.2020 10:39:13

	КонецЕсли;

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.РеализацияТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПродажиСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	ПродажиСервер.ОтразитьПродажиПоДисконтнымКартам(ДополнительныеСвойства, Движения, Отказ);

	Если НЕ Услуги Тогда

		ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
		ПроведениеСервер.ОтразитьДвиженияПоРегистру("ТоварыНаМагазинах", ДополнительныеСвойства, Движения, Отказ); 
		ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
		ЗапасыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
		ЗапасыСервер.ОтразитьДвиженияСерийныхНомеров(ДополнительныеСвойства, Движения, Отказ);
		ЗапасыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
		ЗапасыСервер.ОтразитьДвиженияДанныеДляНН(ДополнительныеСвойства, Движения, Отказ);
	//	LNK 07.02.2020 14:10:59
		ПроведениеСервер.ОтразитьДвиженияПоРегистру("СостоянияСерийныхНомеров", ДополнительныеСвойства, Движения, Отказ); 

		Если НЕ Движения.СостоянияСерийныхНомеров.Количество() = 0 Тогда	//	очистка, например, и сама доедет.

			Движения.СостоянияСерийныхНомеров.ДополнительныеСвойства.Вставить("УведомитьОбИзменении", Истина);

		КонецЕсли;

		ПроведениеСервер.ОтразитьДвиженияПоРегистру("БонусныеБаллы"			, ДополнительныеСвойства, Движения, Отказ); 
		ПроведениеСервер.ОтразитьДвиженияПоРегистру("БонусныеБаллыВРезерве"	, ДополнительныеСвойства, Движения, Отказ); 
		ПроведениеСервер.ОтразитьДвиженияПоРегистру("СписанныеБонусныеБаллы", ДополнительныеСвойства, Движения, Отказ, "НомерСтрокиДокумента"); 

	КонецЕсли;
	
	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	ДополнительныеСвойства.Вставить("Отказ", Отказ);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Услуги Тогда

		Если НЕ СерийныеНомера.Количество() = 0 Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Отказано! Продажа серийных номеров запрещена в документе продажи услуг.",
				ЭтотОбъект,
				,
				,
				Отказ
			);

		КонецЕсли;

	КонецЕсли;

	МассивНепроверяемыхРеквизитов = Новый Массив;

	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,Документы.РеализацияТоваров.ПараметрыУказанияСерий(ЭтотОбъект),Отказ);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);

	МаркетинговыеАкцииСервер.ПроверитьЦеныСертификатов(
		ЭтотОбъект,
		"Товары",
		Отказ
	);
	
	МаркетинговыеАкцииСервер.ПроверитьЗаполнениеТабличнойЧастиСерийныеНомера(
		ЭтотОбъект,
		"Товары",
		"СерийныеНомера",
		Отказ
	);

	Если Услуги Тогда

		ПроверяемыеРеквизиты.Добавить("ТипОплаты");

	Иначе

		ТипОплаты = Неопределено;

	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
//	LNK 16.02.2017 14:33:05
	ЗаполнениеОбъектовСобытия.ОбщиеДействияПередЗаписью(ЭтотОбъект, Отказ);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый"   , ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	ДополнительныеСвойства.Вставить("Проведен"   , ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Проведен"));
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	Справочники.СерийныеНомера.ОчиститьВДокументеНеиспользуемыеСерийныеНомера(Товары, СерийныеНомера);
	ОбщегоНазначенияРТСервер.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект,Документы.РеализацияТоваров.ПараметрыУказанияСерий(ЭтотОбъект));
	
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	
//	LNK 26.09.2016 09:02:34
//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если НЕ ТехническаяПоддержкаВызовСервера.ИсключительныйРежим() И НЕ ЭтоНовый() Тогда

		Если ВнешниеИсточникиСобытия.ПередачаNavision(Ссылка) Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ «" + СокрЛП(Ссылка) + "» учтён в КСУ Navision! Изменения запрещены. Отказано.", Ссылка,,, Отказ);
			Возврат;

		КонецЕсли;

	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если АвторасчетНДС И НДСИсходящийСервер.НуженАвторасчетНДС(Товары, ЦенаВключаетНДС,,,,Неопределено) Тогда

			// соответствие для хранения погрешностей округлений
			ПогрешностиОкругления = Новый Соответствие();
			// пересчет сумм НДС с учетом ошибок округления
			НДСИсходящийСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары, ЭтотОбъект, ЦенаВключаетНДС, ПогрешностиОкругления, "Товары", "грн",,,Неопределено);

		КонецЕсли;

		Если Организация = ОбщегоНазначенияРТ.ПолучитьУчетнуюПолитику().ОсновнаяОрганизация тогда 

			Если ДатаОплаты = дата(1,1,1) тогда 
				Отказ = Истина;	
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В документе «" + СокрЛП(Ссылка) + "» не заполнена дата оплаты! Проведение запрещено.", Ссылка,,, Отказ);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
	Если НЕ Отказ Тогда
	
		ПроверитьНаличиеПодчинённыхДокументов(РежимЗаписи, Отказ);	//	LNK 19.08.2020 07:24:02
		ПроверитьДоступноеКоличествоТоваров(РежимЗаписи, Отказ);	//	LNK 31.10.2017 15:19:38 - Резервирование

		ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
			ЭтотОбъект,
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС),
			"СуммаДокумента");

	КонецЕсли;
		
	ДополнительныеСвойства.Вставить("Отказ", Отказ);

КонецПроцедуры

//	LNK 26.09.2016 09:03:10
Процедура ПриЗаписи(Отказ)

//	NAV:БлокировкаДанныхУчестьДокументВNavision
	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "РегистрацияПередачиВNavision", Ложь) Тогда

		ВнешниеИсточникиСобытия.УстановитьПереданоNavision(Ссылка
			, ОбщегоНазначенияРТСервер.ПолучитьМагазиныПоОбъекту(Ссылка), Перечисления.ВидыПередачиNavision.ПереданВNavision,,,, Истина);

	КонецЕсли;
	Если ОбменДанными.Загрузка Тогда
		
		Если Проведен И ЗначениеЗаполнено(ОбменДанными.Отправитель) И ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

			Документы.РеализацияТоваров.ВыполнитьДвиженияРасширеннойАналитикиПродаж(Ссылка);

		КонецЕсли;
	КонецЕсли;
КонецПроцедуры    

// Процедура - обработчик события "ПриКопировании".
//
Процедура ПриКопировании(ОбъектКопирования)
	
	СкидкиРассчитаны = Ложь;
	СкидкиНаценкиСервер.ОтменитьСкидки(ЭтотОбъект, "Товары");
	
	Серии.Очистить();
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

// Инициализирует документ
//
Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
		Если ДанныеЗаполнения.Свойство("Магазин")
			И НЕ ЗначениеЗаполнено(Магазин) Тогда
			Склад  = ЗначениеНастроекПовтИсп.ПолучитьСкладПродажиПоУмолчанию(ДанныеЗаполнения.Магазин,,Склад, Ответственный);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Организация")
			И НЕ ЗначениеЗаполнено(Организация) Тогда
			БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ДанныеЗаполнения.Организация,,БанковскийСчетОрганизации);
		КонецЕсли;
		
	КонецЕсли;

	Ответственный = Пользователи.ТекущийПользователь();
	
	Магазин       = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Магазин);
	Склад         = ЗначениеНастроекПовтИсп.ПолучитьСкладПродажиПоУмолчанию(Магазин,,Склад, Ответственный);
	Если ЗначениеЗаполнено(Склад) Тогда
		Организация = Склад.Организация;
	КонецЕсли;
	Организация   = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация,Ответственный);
	Контрагент    = ЗначениеНастроекПовтИсп.ПолучитьПокупателяПоУмолчанию(Контрагент, Ответственный);
	БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация,,БанковскийСчетОрганизации);
	Продавец      = ЗначениеНастроекПовтИсп.ПолучитьПродавцаПоУмолчанию(Продавец, Ответственный);
	
	УчитыватьНДС     = НЕ НДСОбщегоНазначенияСервер.ПоставщикНеплательщикНДС(Организация, Контрагент, Дата, Истина);
	АвторасчетНДС    = НДСИсходящийСервер.ПолучитьФлагАвторасчетНДС(УчитыватьНДС, Магазин, Дата, Ложь);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

//Процедура формирует массив имен регистров для контроля проведения
//
Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

	// При проведении выполняется контроль превышения остатков на складах
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ Услуги Тогда
		
		Массив.Добавить(Движения.ТоварыНаСкладах);
		Массив.Добавить(Движения.ДвиженияСерийныхНомеров);
		
	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	ДополнительныеСвойства.ДляПроведения.Вставить("ПопыткиПродажПревышающихОстаток");

КонецПроцедуры

Процедура ПроверитьНаличиеПодчинённыхДокументов(РежимЗаписи, Отказ)	//	LNK 19.08.2020 07:22:59

	Если НЕ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда

		Возврат;

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Дата КАК Дата,
	|	ТаблицаДокумента.Номер КАК Номер,
	|	ТаблицаДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &ТекущийДокумент
	|	И ТаблицаДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Номер,
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &ТекущийДокумент
	|	И ТаблицаДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Номер,
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &ТекущийДокумент
	|	И ТаблицаДокумента.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка"
	);
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		Отказ = Истина;
		Сообщить("Отказано в отмене проведения! Существуют проведенные подчинённые документы:");
		Выборка = Результат.Выбрать();

		Пока Выборка.Следующий() Цикл

			Сообщить("- " + Выборка.Ссылка);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

#Область ПроверкаДоступногоОстаткаСУчетомРезерва

//	LNK 31.10.2017 15:16:25
Функция ПроверитьДоступноеКоличествоТоваров(РежимЗаписи, Отказ)

	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ ДополнительныеСвойства.Проведен = Истина И НЕ Услуги Тогда
	
		Если РезервированиеТоваровСерверПовтИсп.ПроверятьРезервТовараПриОтгрузке(Магазин, Дата) Тогда

			СтруктураПараметров = Новый Структура(
				"Граница, ПропуститьКонтрольРезультатовПроведения, Товары"
				, Новый Граница(МоментВремени(), ВидГраницы.Исключая)
				, ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "ПропуститьКонтрольРезультатовПроведения", Ложь) = Истина
				, Товары.Выгрузить(, "Номенклатура, Характеристика, Количество"));

			СтруктураПараметров.Товары.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.Магазины"));
			СтруктураПараметров.Товары.Колонки.Добавить("Склад"  , Новый ОписаниеТипов("СправочникСсылка.Склады"));

			СтруктураПараметров.Товары.ЗаполнитьЗначения(Магазин, "Магазин");
			СтруктураПараметров.Товары.ЗаполнитьЗначения(Склад  , "Склад");
			
			РезервированиеТоваровСервер.ПроверитьДоступностьТоваровСУчетомРезерва(СтруктураПараметров, РежимЗаписи, Отказ);

		КонецЕсли;

	КонецЕсли;

	Возврат НЕ Отказ;

КонецФункции // ПроверитьДоступноеКоличествоТоваров()

#КонецОбласти
