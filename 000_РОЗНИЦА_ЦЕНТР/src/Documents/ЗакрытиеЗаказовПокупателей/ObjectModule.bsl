#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьРеестрПросроченнымиРезевами()	Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокументы.Дата КАК Дата,
	|	ТаблицаРегистра.Заказ КАК ЗаказПокупателя,
	|	ЗНАЧЕНИЕ(Справочник.ПричиныОтменыЗаказовПокупателей.ПревышениеГлубиныРезерва) КАК ПричинаОтмены
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, Магазин = &Магазин) КАК ТаблицаРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ТаблицаДокументы
	|		ПО ТаблицаРегистра.Заказ = ТаблицаДокументы.Ссылка
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ТаблицаДокументы.Дата, ДЕНЬ) <= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ), ДЕНЬ, -1 * &ГлубинаРезерва)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ЗаказПокупателя"
	);
	Запрос.УстановитьПараметр("Дата"   , Дата);
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ГлубинаРезерва", ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ГлубинаРезерваПоЗаказуПокупателя"));

	Реестр.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОсновныхСобытийОбъекта

Процедура ПриКопировании(ОбъектКопирования)


КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
//	LNK 16.02.2017 14:33:05
	ЗаполнениеОбъектовСобытия.ОбщиеДействияПередЗаписью(ЭтотОбъект, Отказ);
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТабличнаяЧасть.ПричинаОтмены КАК ПричинаОтмены
	|ПОМЕСТИТЬ Реестр
	|ИЗ
	|	&Реестр КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(Реестр.НомерСтроки) КАК НомерСтроки,
	|	Реестр.ЗаказПокупателя КАК ЗаказПокупателя,
	|	МИНИМУМ(Реестр.ПричинаОтмены) КАК ПричинаОтмены
	|ИЗ
	|	Реестр КАК Реестр
	|
	|СГРУППИРОВАТЬ ПО
	|	Реестр.ЗаказПокупателя
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	);
	Запрос.УстановитьПараметр("Реестр", Реестр);
	
	Реестр.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)

	ИнициализироватьДокумент(ДанныеЗаполнения);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)


КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.ЗакрытиеЗаказовПокупателей.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПроведениеСервер.ОтразитьДвиженияПоРегистру("ЗаказыПокупателей", ДополнительныеСвойства, Движения, Отказ); 
	
	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	Если НЕ Отказ Тогда

		ЗакрытьЗаказыПоСтатусу(ДополнительныеСвойства.ТаблицыДляДвижений.РеестрЗаказовПокупателей, Отказ);

	КонецЕсли;

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры
	
#КонецОбласти

Процедура ЗакрытьЗаказыПоСтатусу(РеестрЗаказовПокупателей, Отказ)

	УстановитьПривилегированныйРежим(Истина);

	Для каждого СтрокаТаблицы Из РеестрЗаказовПокупателей Цикл

		Попытка

			ДокументОбъект = СтрокаТаблицы.Заказ.ПолучитьОбъект();
			ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт;

			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
			ДокументОбъект.Записать();

		Исключение

			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ОтменаСтатуса", УровеньЖурналаРегистрации.Предупреждение
				, Метаданные(), Ссылка
				, "При записи «" + СтрокаТаблицы.Заказ + "»" + Символы.ПС + ТекстОшибки, РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

// Инициализирует документ
//
Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда

		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);

	КонецЕсли;

	Ответственный = Пользователи.ТекущийПользователь();
	Магазин       = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Магазин);
	Организация   = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация,Ответственный);

КонецПроцедуры

// Процедура формирует массив имен регистров для контроля проведения.
//
Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;
	
	Массив.Добавить(Движения.ЗаказыПокупателей);
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

#КонецОбласти

#КонецЕсли






