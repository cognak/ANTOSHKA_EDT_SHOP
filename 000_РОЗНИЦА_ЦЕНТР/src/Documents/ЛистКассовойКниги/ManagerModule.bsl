#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Лист кассовой книги
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЛистКассовойКниги";
	КомандаПечати.Представление = НСтр("ru='Лист кассовой книги';uk='Лист касової книги'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

	// Титульный лист кассовой книги
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Титул";
	КомандаПечати.Представление = НСтр("ru='Титульный лист кассовой книги';uk='Титульний лист касової книги'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЛистКассовойКниги") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЛистКассовойКниги",
			"Лист кассовой книги",
			СформироватьПечатнуюФормуЛистаКассовойКниги(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Титул") Тогда	
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Титул",
			"Титульный лист кассовой книги",
			СформироватьПечатнуюФормуТитул(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКоличествоЛистовКассовойКнигиЗаПериодПоОрганизации(Организация, Магазин, ДатаНач, ДатаКон)	
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КассоваяКнигаДокументы.НомерЛиста) КАК КоличествоЛистов
	|ИЗ
	|	Документ.ЛистКассовойКниги КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ЛистКассовойКниги.КассовыеОрдера КАК КассоваяКнигаДокументы
	|	ПО	
	|		ДанныеДокумента.Ссылка = КассоваяКнигаДокументы.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ДанныеДокумента.Организация = &Организация
	|	И ДанныеДокумента.Магазин = &Магазин
	|	И ДанныеДокумента.Проведен
	|");
	
	Запрос.УстановитьПараметр("ДатаНач",       ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",       ДатаКон);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоЛистов;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьОбороты(РабочаяТаблица, Приход, Расход)	

	Если РабочаяТаблица.Количество() = 0 Тогда
		
		СтрокаТаблицы = РабочаяТаблица.Добавить();

		СтрокаТаблицы.Остаток = 0;
		СтрокаТаблицы.Приход  = Приход;
		СтрокаТаблицы.Расход  = Расход;
		
	Иначе
		
		СтрокаТаблицы = РабочаяТаблица[0];
		СтрокаТаблицы.Приход = СтрокаТаблицы.Приход + ?(Приход=null,0,Приход);
		СтрокаТаблицы.Расход = СтрокаТаблицы.Расход + ?(Расход=null,0,Расход);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуТитул(МассивОбъектов, ОбъектыПечати)
	
	// Печать обложки и титульного листа
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОбложкаКассовойКниги";
	ДатаДок = ОбщегоНазначения.ПолучитьЗначениеРеквизита(МассивОбъектов[0],"Дата");
	Если ДатаДок < Дата('20180106') тогда
		МакетОбложка 	  = УправлениеПечатью.МакетПечатнойФормы("Документ.ЛистКассовойКниги.ПФ_MXL_Титул");
	Иначе
		МакетОбложка 	  = УправлениеПечатью.МакетПечатнойФормы("Документ.ЛистКассовойКниги.ПФ_MXL_Титул_2018");
	КонецЕсли;
	ОбластьТитулОтчет = МакетОбложка.ПолучитьОбласть("Титул");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументКассоваяКнига.Дата КАК Дата,
	|	ДокументКассоваяКнига.Организация КАК Организация
	//|	ДокументКассоваяКнига.Магазин КАК Магазин,	
	//|	ВЫРАЗИТЬ(ДокументКассоваяКнига.Магазин.Наименование КАК СТРОКА(1000))       КАК МагазинПредставление,
	//|	ВЫРАЗИТЬ(ДокументКассоваяКнига.Магазин.НаименованиеПолное КАК СТРОКА(1000)) КАК МагазинНаименованиеПолное
	|ИЗ
	|	Документ.ЛистКассовойКниги КАК ДокументКассоваяКнига
	|ГДЕ
	|	ДокументКассоваяКнига.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результат = Запрос.Выполнить();
	ВыборкаПоДокументамКассоваяКнига = Результат.Выбрать();
	
	Пока ВыборкаПоДокументамКассоваяКнига.Следующий() Цикл
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СведенияОбОрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументамКассоваяКнига.Организация, КонецДня(ВыборкаПоДокументамКассоваяКнига.Дата));
		
		ОбластьТитулОтчет.Параметры.Год				 		= Формат(Год(ВыборкаПоДокументамКассоваяКнига.Дата), "ЧЦ=4;ЧГ=0");
		//ОбластьТитулОтчет.Параметры.КодЕДРПОУ 				= ФормированиеПечатныхФормСервер.ПолучитьКодОрганизаци(СведенияОбОрганизации);
		ОбластьТитулОтчет.Параметры.КодЕДРПОУ = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации, "КодПоЕДРПОУ");

		//Если ВыборкаПоДокументамКассоваяКнига.ПоОбособленномуПодразделению Тогда
		//	Если ЗначениеЗаполнено(ВыборкаПоДокументамКассоваяКнига.ОбособленноеПодразделениеНаименованиеПолное) Тогда
		//		ОбластьТитулОтчет.Параметры.НаименованиеОрганизации = ВыборкаПоДокументамКассоваяКнига.ОбособленноеПодразделениеНаименованиеПолное;
		//	Иначе
		//		ОбластьТитулОтчет.Параметры.НаименованиеОрганизации = ВыборкаПоДокументамКассоваяКнига.ОбособленноеПодразделениеПредставление;
		//	КонецЕсли;
		//Иначе
			//ОбластьТитулОтчет.Параметры.НаименованиеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
			
		//КонецЕсли;
		ОбластьТитулОтчет.Параметры.НаименованиеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
		ТабличныйДокумент.Вывести(ОбластьТитулОтчет);
		
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			Неопределено); // Ссылка
		
	КонецЦикла;
	
	ТабличныйДокумент.ОтображатьСетку     = Ложь;
	ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуЛистаКассовойКниги(МассивОбъектов, ОбъектыПечати, ПараметрыПечати = Неопределено)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	//ВыводитьОснования = Ложь;                 	
	ВыводитьОснования = Истина;                 	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументКассоваяКнига.Ссылка КАК Ссылка,
	|	ДокументКассоваяКнига.ТипЛиста КАК ТипЛиста,
	|	ДокументКассоваяКнига.КоличествоДокументовНаЛисте КАК КоличествоДокументовНаЛисте,
	|	ДокументКассоваяКнига.Дата КАК Дата,
	|	ДокументКассоваяКнига.Организация КАК Организация,
	|	ДокументКассоваяКнига.Ответственный.ФизЛицо КАК Ответственный,
	|	ДокументКассоваяКнига.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	ДокументКассоваяКнига.Магазин
	|ИЗ
	|	Документ.ЛистКассовойКниги КАК ДокументКассоваяКнига
	|ГДЕ
	|	ДокументКассоваяКнига.Ссылка В(&МассивДокументов)
	|	И ДокументКассоваяКнига.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка"
	);
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	Результат = Запрос.Выполнить();
	ВыборкаПоДокументамКассоваяКнига = Результат.Выбрать();
	
	Пока ВыборкаПоДокументамКассоваяКнига.Следующий() Цикл
		
		ЛистКассовойКниги = ВыборкаПоДокументамКассоваяКнига.Ссылка;
		
		ДатаНач = НачалоДня(ВыборкаПоДокументамКассоваяКнига.Дата); 
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Организация = ВыборкаПоДокументамКассоваяКнига.Организация;
		
		Магазин = ВыборкаПоДокументамКассоваяКнига.Магазин;
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЛистКассовойКниги.ПФ_MXL_ЛистКассовойКниги");
		
		ОбластьШапкаОтчет                   = Макет.ПолучитьОбласть("Шапка");
		ОбластьНачальныйОстатокОтчет        = Макет.ПолучитьОбласть("ОстатокНачало");
		ОбластьСтрокаОтчет                  = Макет.ПолучитьОбласть("Строка");
		ОбластьКонечныйОстатокОтчет         = Макет.ПолучитьОбласть("ОстатокКонец");
		
		ЗапросПоИтогам = Новый Запрос;
		ЗапросПоИтогам.Текст =
		"ВЫБРАТЬ
		|	Кассы.Ссылка КАК Касса
		|ПОМЕСТИТЬ ТаблицаКассы
		|ИЗ
		|	Справочник.Кассы КАК Кассы
		|ГДЕ
		|	Кассы.Владелец = &Организация
		|	И Кассы.Магазин = &Магазин
		|	И НЕ Кассы.КассаУправляющейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДенежныеСредстваНаличныеОстаткиИОбороты.Период КАК Период,
		|	ДенежныеСредстваНаличныеОстаткиИОбороты.СуммаНачальныйОстаток КАК СуммаНачальныйОстатокДт,
		|	0 КАК СуммаОборотДт,
		|	0 КАК СуммаОборотКт,
		|	0 КАК СуммаОборот
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваНаличные.ОстаткиИОбороты(
		|			&НачИтоги,
		|			&ДатаКон,
		|			ДЕНЬ,
		|			ДвиженияИГраницыПериода,
		|			Организация = &Организация
		|				И Касса В
		|					(ВЫБРАТЬ
		|						ТаблицаКассы.Касса
		|					ИЗ
		|						ТаблицаКассы КАК ТаблицаКассы)) КАК ДенежныеСредстваНаличныеОстаткиИОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКассы КАК ТаблицаКассы
		|		ПО ДенежныеСредстваНаличныеОстаткиИОбороты.Касса = ТаблицаКассы.Касса
		|ГДЕ
		|	НЕ ДенежныеСредстваНаличныеОстаткиИОбороты.Касса.КассаУправляющейСистемы
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ДенежныеСредства.Период, ДЕНЬ),
		|	0,
		|	ВЫБОР
		|		КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА ДенежныеСредства.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|			ТОГДА -ДенежныеСредства.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|			ТОГДА -ДенежныеСредства.Сумма
		|		ИНАЧЕ ДенежныеСредства.Сумма
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваНаличные КАК ДенежныеСредства
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКассы КАК ТаблицаКассы
		|		ПО ДенежныеСредства.Касса = ТаблицаКассы.Касса
		|ГДЕ
		|	ДенежныеСредства.Период МЕЖДУ &НачИтоги И &ДатаКон
		|	И ДенежныеСредства.Организация = &Организация
		|	И ДенежныеСредства.Касса В
		|			(ВЫБРАТЬ
		|				ТаблицаКассы.Касса
		|			ИЗ
		|				ТаблицаКассы КАК ТаблицаКассы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(СуммаНачальныйОстатокДт),
		|	СУММА(СуммаОборотДт),
		|	СУММА(СуммаОборотКт),
		|	СУММА(СуммаОборот)
		|ПО
		|	ОБЩИЕ,
		|	Период ПЕРИОДАМИ(ДЕНЬ, , )";
		
		
		ЗапросПоИтогам.УстановитьПараметр("НачИтоги",НачалоДня(ДатаНач));
		ЗапросПоИтогам.УстановитьПараметр("ДатаКон", КонецДня(ДатаНач));
		ЗапросПоИтогам.УстановитьПараметр("Организация",Организация);
		Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда     
			ЗапросПоИтогам.УстановитьПараметр("Магазин",Магазин);
		Иначе
			ЗапросПоИтогам.УстановитьПараметр("Магазин",ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);
		КонецЕсли;
		       		 	

		РезультатЗапросаПоИтогам = ЗапросПоИтогам.Выполнить();
		
		Если РезультатЗапросаПоИтогам.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		ЗапросПоДокументам = Новый Запрос("
		|ВЫБРАТЬ
		|	КассоваяКнигаДокументы.Документ КАК Документ,
		|	НАЧАЛОПЕРИОДА(КассоваяКнигаДокументы.Документ.Дата, ДЕНЬ) КАК День,
		|	КассоваяКнигаДокументы.Документ.Дата КАК ДатаДок,
		|	КассоваяКнигаДокументы.Документ.Номер КАК НомерДок,
		|	КассоваяКнигаДокументы.Документ.НомерОрдера КАК НомерОрдера,
		|	КассоваяКнигаДокументы.Документ.Контрагент КАК Контрагент,
		|	ПОДСТРОКА(КассоваяКнигаДокументы.Документ.Основание, 1, 200) КАК Основание,
		|	ВЫБОР
		|		КОГДА КассоваяКнигаДокументы.Документ ССЫЛКА Документ.ПриходныйКассовыйОрдер
		|			ТОГДА КассоваяКнигаДокументы.Документ.ПринятоОт
		|		ИНАЧЕ КассоваяКнигаДокументы.Документ.Выдать
		|	КОНЕЦ КАК ТекстДок,
		|	ЕСТЬNULL(КассоваяКнигаДокументы.Приход, 0) КАК Приход,
		|	ЕСТЬNULL(КассоваяКнигаДокументы.Расход, 0) КАК Расход,
		|	КассоваяКнигаДокументы.КорреспондирующийСчет КАК КоррСчет,
		|	КассоваяКнигаДокументы.НомерЛиста КАК НомерЛиста,
		|	КассоваяКнигаДокументы.НомерСтроки КАК НомерСтроки,
		|	ДанныеДокумента.ТипЛиста КАК ТипЛиста
		|ИЗ
		|	Документ.ЛистКассовойКниги КАК ДанныеДокумента
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.ЛистКассовойКниги.КассовыеОрдера КАК КассоваяКнигаДокументы
		|	ПО
		|		ДанныеДокумента.Ссылка = КассоваяКнигаДокументы.Ссылка
		|ГДЕ
		|	ДанныеДокумента.Дата МЕЖДУ &НачИтоги И &ДатаКон
		|	И ДанныеДокумента.Организация = &Организация
		|	И ДанныеДокумента.Проведен
		|   И ДанныеДокумента.Магазин = &Магазин
		|
		|УПОРЯДОЧИТЬ ПО
		|	День,
		|	НомерЛиста,
		|	НомерСтроки
		|ИТОГИ
		|	СУММА(Приход),
		|	СУММА(Расход),
		|	МИНИМУМ(НомерЛиста)
		|ПО
		|	День,
		|	Документ,
		|	КоррСчет
		|");
		
		ЗапросПоДокументам.УстановитьПараметр("НачИтоги",НачалоДня(ДатаНач));
		ЗапросПоДокументам.УстановитьПараметр("ДатаКон",КонецДня(ДатаНач));
		ЗапросПоДокументам.УстановитьПараметр("Организация",Организация);
		Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда     
			ЗапросПоДокументам.УстановитьПараметр("Магазин",Магазин);
		Иначе
			ЗапросПоДокументам.УстановитьПараметр("Магазин",ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин);
		КонецЕсли;
		РезультатЗапросаПоДокументам = ЗапросПоДокументам.Выполнить();
		
		ТаблицаДокументы = РезультатЗапросаПоДокументам.Выгрузить();
		ТаблицаДокументы.Очистить();
		ТаблицаДокументы.Колонки.Добавить("СтрокаСчет");
		ТаблицаДокументы.Колонки.Добавить("Валютный");
		ТаблицаДокументы.Колонки.Добавить("ВидДокумента");
		
		ТипЧисло = ОбщегоНазначенияРТ.ПолучитьОписаниеТиповЧисла(15,2);
		
		РабочаяТаблица = Новый ТаблицаЗначений;
		РабочаяТаблица.Колонки.Добавить("Остаток",   ТипЧисло);
		РабочаяТаблица.Колонки.Добавить("Приход",    ТипЧисло);
		РабочаяТаблица.Колонки.Добавить("Расход",    ТипЧисло);
//		РабочаяТаблица.Индексы.Добавить("Валюта");
		//
		//ВыборкаПоВалюте = РезультатЗапросаПоИтогам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Валюта");
		//
		//Пока ВыборкаПоВалюте.Следующий() Цикл
		//	Если НЕ ВыборкаПоВалюте.Валюта = Справочники.Валюты.ПустаяСсылка() Тогда
		//		Строка            = РабочаяТаблица.Добавить();
		//		Строка.Валюта     = ВыборкаПоВалюте.Валюта;
		//		Строка.Остаток    = ВыборкаПоВалюте.СуммаНачальныйОстатокДт;
		//		Строка.ВалОстаток = ВыборкаПоВалюте.ВалютнаяСуммаНачальныйОстатокДт;
		//	КонецЕсли;
		//КонецЦикла;
		
		ВыборкаОбщихИтогов = РезультатЗапросаПоИтогам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Общие");
		
		Строка        = РабочаяТаблица.Добавить();
//		Строка.Валюта = Справочники.Валюты.ПустаяСсылка();
		
		Если ВыборкаОбщихИтогов.Следующий() Тогда
			
			Строка.Остаток    = ВыборкаОбщихИтогов["СуммаНачальныйОстатокДт"]-РабочаяТаблица.Итог("Остаток");
	//		Строка.ВалОстаток = ВыборкаОбщихИтогов["ВалютнаяСуммаНачальныйОстатокДт"]-РабочаяТаблица.Итог("ВалОстаток");
			
		Иначе
			
			Строка.Остаток    = 0;
			Строка.ВалОстаток = 0;
			
		КонецЕсли;
		
		//РабочаяТаблица.Сортировать("Валюта");
		
		ВыборкаИтоговПоДням     = РезультатЗапросаПоИтогам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Период");
		ВыборкаДокументовПоДням = РезультатЗапросаПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"День");
		
		ПоПроводкам  = ВыборкаИтоговПоДням.Следующий();
		ПоДокументам = ВыборкаДокументовПоДням.Следующий();
		
		БылиОшибки    = Ложь;
		ВывестиПодвал = Ложь;
		
		ТипПКО = Тип("ДокументСсылка.ПриходныйКассовыйОрдер");
		ТипРКО = Тип("ДокументСсылка.РасходныйКассовыйОрдер");
		
		Пока ПоПроводкам Или ПоДокументам  Цикл
			
			Если НЕ ПоПроводкам  Тогда
				ДатаЛиста = ВыборкаДокументовПоДням.День;
			ИначеЕсли НЕ ПоДокументам Тогда
				ДатаЛиста = ВыборкаИтоговПоДням.Период;
			Иначе
				ДатаЛиста = Мин(ВыборкаДокументовПоДням.День, ВыборкаИтоговПоДням.Период);
			КонецЕсли;
			
			Если ВыборкаИтоговПоДням.СуммаОборотДт = 0 И ВыборкаИтоговПоДням.СуммаОборотКт = 0 Тогда
				Если НЕ ПоДокументам ИЛИ ДатаЛиста <> ВыборкаДокументовПоДням.День Тогда
					ПоПроводкам = ВыборкаИтоговПоДням.Следующий();
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			КоличествоПриходныхДокументов = 0;
			КоличествоРасходныхДокументов = 0;
			
			
			Остаток = РабочаяТаблица.Итог("Остаток");
			Если ДатаЛиста >= ДатаНач Тогда
				
				
				ОбластьШапкаОтчет.Параметры.ДатаПрописью = ВыборкаДокументовПоДням.День;
				ОбластьШапкаОтчет.Параметры.НомерЛиста = ВыборкаДокументовПоДням.НомерЛиста;
				
				
				ТабличныйДокумент.Вывести(ОбластьШапкаОтчет);
				
				ОбластьНачальныйОстатокОтчет.Параметры.ОстатокНачало = Формат(Остаток, "ЧЦ=15; ЧДЦ=2; ЧН=0,00");
				ОбластьНачальныйОстатокОтчет.Параметры.Валюта   = "ГРН";
				ТабличныйДокумент.Вывести(ОбластьНачальныйОстатокОтчет);
				
			КонецЕсли;
			
			ТаблицаДокументы.Очистить();
			
			Если ПоДокументам И ВыборкаДокументовПоДням.День = ДатаЛиста Тогда
				
				ВыборкаДокументов = ВыборкаДокументовПоДням.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Документ");
				
				Пока ВыборкаДокументов.Следующий() Цикл
					
					НоваяСтрока = ТаблицаДокументы.Добавить();
					НоваяСтрока.ВидДокумента = ?(ТипЗнч(ВыборкаДокументов.Документ) = ТипПКО, "ПриходныйОрдер", "РасходныйОрдер");
					НоваяСтрока.Документ     = ВыборкаДокументов.Документ;
					НоваяСтрока.ДатаДок      = ВыборкаДокументов.ДатаДок;
					НоваяСтрока.День         = ВыборкаДокументов.День;
					НоваяСтрока.НомерДок     = ВыборкаДокументов.НомерДок;
					НоваяСтрока.Приход       = ВыборкаДокументов.Приход;
					НоваяСтрока.Расход       = ВыборкаДокументов.Расход;
					НоваяСтрока.Основание    = ВыборкаДокументов.Основание;
					НоваяСтрока.ТекстДок     = ВыборкаДокументов.ТекстДок;
					НоваяСтрока.НомерЛиста   = ВыборкаДокументов.НомерЛиста;
					НоваяСтрока.НомерОрдера  = ВыборкаДокументов.НомерОрдера;
					
					НоваяСтрока.Валютный = Ложь;
					
					ВыборкаСчетов = ВыборкаДокументов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"КоррСчет");
					СписокСчетов  = Новый ТаблицаЗначений;
					СписокСчетов.Колонки.Добавить("КоррСчет");
					Пока ВыборкаСчетов.Следующий() Цикл
						
						СтрокаТаблицыСчетов      = СписокСчетов.Добавить();
						СтрокаТаблицыСчетов.КоррСчет = ВыборкаСчетов.КоррСчет;
						
					КонецЦикла;
					
					СписокСчетов.Свернуть("КоррСчет");
					
					СтрокаСчет = "";
					Для Каждого СтрокаТаблицыСчетов Из СписокСчетов Цикл
						СтрокаСчет = СтрокаСчет + СтрокаТаблицыСчетов.КоррСчет + Символы.ПС;
					КонецЦикла;
					
					
					НоваяСтрока.СтрокаСчет = СтрокаСчет;
					
				КонецЦикла;
				
			КонецЕсли;
			
			СумПриход    = 0;
			СумРасход    = 0;
			ПерваяСтрока = 1;
			
			
			ПредыдущийНомерЛиста = ВыборкаДокументовПоДням.НомерЛиста;
			
			Для Каждого Документ Из ТаблицаДокументы Цикл
				//
				//Если Документ.ВидДокумента = "РасходныйОрдер" Тогда
				//	Клиент = "Видати " + СокрЛП(Документ.ТекстДок) + ?(ВыводитьОснования = 1, " " + СокрЛП(Документ.Основание), "");
				//	КоличествоРасходныхДокументов = КоличествоРасходныхДокументов + 1;
				//	Расход    = Документ.Расход;
				//	Приход    = 0;
				//	
				//Иначе
				//	Клиент = "Прийнято від " + СокрЛП(Документ.ТекстДок) + ?(ВыводитьОснования = 1, " " + СокрЛП(Документ.Основание), "");
				//	КоличествоПриходныхДокументов = КоличествоПриходныхДокументов + 1;
				//	Приход    = Документ.Приход;
				//	Расход    = 0;
				//	
				//КонецЕсли;
				//
				 
					
				Если Документ.ВидДокумента = "РасходныйОрдер" Тогда
					Клиент = "Видати " + СокрЛП(Документ.ТекстДок) + ?(ВыводитьОснования = 1, " " + СокрЛП(Документ.Основание), "");
					КоличествоРасходныхДокументов = КоличествоРасходныхДокументов + 1;
					Расход    = Документ.Расход;
					Приход    = 0;
					
				Иначе  
					ТекстДок =   СокрЛП(Документ.ТекстДок);
					НомерСимвола = СтрНайти(ТекстДок,".");
					Если НЕ НомерСимвола = 0 тогда
						ТекстДок = Лев(ТекстДок,НомерСимвола-1);
					КонецЕсли;
					Клиент = "Прийнято від " + СокрЛП(ТекстДок) + ?(ВыводитьОснования = 1, " " + СокрЛП(Документ.Основание), "");
					КоличествоПриходныхДокументов = КоличествоПриходныхДокументов + 1;
					Приход    = Документ.Приход;
					Расход    = 0;
					
				КонецЕсли;
				
				
				НомерОрдера = Документ.НомерОрдера;
				КоррСчет = Документ.СтрокаСчет;
				
				// Начинаем новую страницу
				Если ПредыдущийНомерЛиста <> Документ.НомерЛиста Тогда
					
					ПриходЗаДень = РабочаяТаблица.Итог("Приход");
					РасходЗаДень = РабочаяТаблица.Итог("Расход");
					
					Если ДатаЛиста >= ДатаНач Тогда
						
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						ОбластьШапкаОтчет.Параметры.НомерЛиста = Документ.НомерЛиста;
						ОбластьШапкаОтчет.Параметры.ДатаПрописью = Документ.день;
						ТабличныйДокумент.Вывести(ОбластьШапкаОтчет);
						
					КонецЕсли;
					
					ПредыдущийНомерЛиста = Документ.НомерЛиста;
					
				КонецЕсли;
				
				Если ДатаЛиста >= ДатаНач Тогда
					
					ОбластьСтрокаОтчет.Параметры.НомерОрдера = НомерОрдера;
					ОбластьСтрокаОтчет.Параметры.Контрагент = Клиент;
					ОбластьСтрокаОтчет.Параметры.КоррСчет   = КоррСчет;
					ОбластьСтрокаОтчет.Параметры.Приход     = Формат(Приход, "ЧЦ=15; ЧДЦ=2; ЧН=0,00");
					ОбластьСтрокаОтчет.Параметры.Расход     = Формат(Расход, "ЧЦ=15; ЧДЦ=2; ЧН=0,00");
					ОбластьСтрокаОтчет.Параметры.Ордер   = Документ.Документ;
					ОбластьСтрокаОтчет.Параметры.Валюта   = "ГРН";
					ТабличныйДокумент.Вывести(ОбластьСтрокаОтчет);
				КонецЕсли;
				
				ДобавитьОбороты(РабочаяТаблица, Приход, Расход);
				
			КонецЦикла;
			
			ПриходЗаДень = РабочаяТаблица.Итог("Приход");
			РасходЗаДень = РабочаяТаблица.Итог("Расход");
			Если ДатаЛиста >= ДатаНач Тогда
				
				ОбластьКонечныйОстатокОтчет.Параметры.Приход = Формат(ПриходЗаДень, "ЧЦ=15; ЧДЦ=2; ЧН=0,00");
				ОбластьКонечныйОстатокОтчет.Параметры.Расход = Формат(РасходЗаДень, "ЧЦ=15; ЧДЦ=2; ЧН=0,00");
				
				ПерваяСтрока = Истина;
				Остаток      = Остаток + ПриходЗаДень - РасходЗаДень;
				
				ОбластьКонечныйОстатокОтчет.Параметры.ОстатокКонец = Остаток;
				
				ОбластьКонечныйОстатокОтчет.Параметры.Валюта   = "ГРН";
				
				ОбластьКонечныйОстатокОтчет.Параметры.КоличествоПКО = ?(КоличествоПриходныхДокументов = 0, "", Нрег(ЧислоПрописью(КоличествоПриходныхДокументов,"Л=uk"," , , , , , , , , 0")));
				ОбластьКонечныйОстатокОтчет.Параметры.КоличествоРКО = ?(КоличествоРасходныхДокументов = 0, "", Нрег(ЧислоПрописью(КоличествоРасходныхДокументов,"Л=uk"," , , , , , , , , 0")));
				
				ОбластьКонечныйОстатокОтчет.Параметры.Бухгалтер = ФизическиеЛица.ФамилияИнициалыФизЛица(ВыборкаПоДокументамКассоваяКнига.ГлавныйБухгалтер);
				ОбластьКонечныйОстатокОтчет.Параметры.Кассир    = ФизическиеЛица.ФамилияИнициалыФизЛица(ВыборкаПоДокументамКассоваяКнига.Ответственный);
				
			КонецЕсли;
			
			Сортировать = Ложь;
//			ВыборкаПоВалюте = ВыборкаИтоговПоДням.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Валюта");
			
			Если (ДатаЛиста = ВыборкаИтоговПоДням.Период) Тогда
				СуммаКонечныйОстатокДт = ВыборкаИтоговПоДням.СуммаНачальныйОстатокДт + ВыборкаИтоговПоДням.СуммаОборот;
				Строка.Остаток = СуммаКонечныйОстатокДт - РабочаяТаблица.Итог("Остаток");
			Иначе
				Если ПоПроводкам Тогда
					Строка.Остаток = ВыборкаИтоговПоДням.СуммаНачальныйОстатокДт - РабочаяТаблица.Итог("Остаток");
				Иначе
					Строка.Остаток = -РабочаяТаблица.Итог("Остаток");
				КонецЕсли;
			КонецЕсли;
			
			//Если Сортировать Тогда
			//	РабочаяТаблица.Сортировать("Валюта");
			//КонецЕсли;
			РабочаяТаблица.ЗаполнитьЗначения(0,"Приход, Расход");
			
			Если ПоПроводкам И ДатаЛиста = ВыборкаИтоговПоДням.Период Тогда
				ПоПроводкам = ВыборкаИтоговПоДням.Следующий();
			КонецЕсли;
			Если ПоДокументам И ДатаЛиста = ВыборкаДокументовПоДням.День Тогда
				ПоДокументам = ВыборкаДокументовПоДням.Следующий();
			КонецЕсли;
			
			ВывестиПодвал = Истина;
			
		КонецЦикла;
		
		Если ВывестиПодвал Тогда
			
			Если ВыборкаПоДокументамКассоваяКнига.ТипЛиста = Перечисления.ТипыЛистовКассовойКниги.ПоследнийВМесяце Тогда
				
				КоличествоЛистов = ПолучитьКоличествоЛистовКассовойКнигиЗаПериодПоОрганизации(
					ВыборкаПоДокументамКассоваяКнига.Организация,
					Магазин,
					НачалоМесяца(ВыборкаПоДокументамКассоваяКнига.Дата),
					КонецМесяца(ВыборкаПоДокументамКассоваяКнига.Дата)
				);
				
				ОбластьКонечныйОстатокОтчет.Параметры.КоличествоЛистовМесяц = "Листів з початку місяця: " + КоличествоЛистов;
				
			КонецЕсли;
			
			Если ВыборкаПоДокументамКассоваяКнига.ТипЛиста = Перечисления.ТипыЛистовКассовойКниги.ПоследнийВГоду Тогда
				
				КоличествоЛистовМесяц = ПолучитьКоличествоЛистовКассовойКнигиЗаПериодПоОрганизации(
					ВыборкаПоДокументамКассоваяКнига.Организация,
					Магазин,
					НачалоМесяца(ВыборкаПоДокументамКассоваяКнига.Дата),
					КонецМесяца(ВыборкаПоДокументамКассоваяКнига.Дата)
				);
				
				
				КоличествоЛистов = ПолучитьКоличествоЛистовКассовойКнигиЗаПериодПоОрганизации(
					ВыборкаПоДокументамКассоваяКнига.Организация,
					Магазин,
					НачалоГода(ВыборкаПоДокументамКассоваяКнига.Дата),
					КонецГода(ВыборкаПоДокументамКассоваяКнига.Дата)
				);
				
				ОбластьКонечныйОстатокОтчет.Параметры.КоличествоЛистовМесяц = "Листів з початку місяця: " +КоличествоЛистовМесяц;
				ОбластьКонечныйОстатокОтчет.Параметры.КоличествоЛистовГод   = "Листів з початку року " + КоличествоЛистов;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьКонечныйОстатокОтчет);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ВыборкаПоДокументамКассоваяКнига.Ссылка
		);
		
	КонецЦикла; // Цикл по выделенным документам
	
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления УТ 3.1.1.93
// Заполняет новые реквизиты в листах кассовых книг: суммы поступления, выдачи, конечного остатка
// 
// Параметры:
//    Параметры - структура
//
Процедура ЗаполнитьЛистыКассовыхКниг(Параметры) Экспорт
	
	ПараметрыОбработчиковОбновления = Константы.ПараметрыОбработчиковОбновления.Получить().Получить();
	ИдентификаторПараметров = "ЛистКассовойКнигиЗаполнитьЛистыКассовыхКниг";
	Если ТипЗнч(ПараметрыОбработчиковОбновления) = Тип("Соответствие") Тогда
		МоментВремени = ПараметрыОбработчиковОбновления.Получить(ИдентификаторПараметров);
	Иначе
		ПараметрыОбработчиковОбновления = Новый Соответствие;
	КонецЕсли;

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	КассовыеОрдера.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ НеобработанныеЛисты
	|ИЗ
	|	Документ.ЛистКассовойКниги.КассовыеОрдера КАК КассовыеОрдера
	|	
	|ГДЕ
	|	КассовыеОрдера.Ссылка.Проведен
	|	И КассовыеОрдера.Ссылка.МоментВремени < &МоментВремени
	|;
	|/////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	КассовыеОрдера.Ссылка                                  КАК Ссылка,
	|	ЕСТЬNULL(СУММА(ДенежныеСредства.СуммаПриход), 0)   КАК СуммаПоступления,
	|	ЕСТЬNULL(СУММА(ДенежныеСредства.СуммаРасход), 0)   КАК СуммаВыдачи
	|ПОМЕСТИТЬ ОборотыВКассе
	|ИЗ
	|	Документ.ЛистКассовойКниги.КассовыеОрдера КАК КассовыеОрдера
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		НеобработанныеЛисты КАК НеобработанныеЛисты
	|	ПО
	|		НеобработанныеЛисты.Ссылка = КассовыеОрдера.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваНаличные.Обороты(,, Регистратор) КАК ДенежныеСредства
	|	ПО
	|		ДенежныеСредства.Регистратор = КассовыеОрдера.Документ
	|	
	|СГРУППИРОВАТЬ ПО
	|	КассовыеОрдера.Ссылка
	|;
	|/////////////////////////////////////////////////////////////////////
	|
	|
	|ВЫБРАТЬ
	|	ДокументКассоваяКнига.Ссылка                                          КАК Ссылка,
	|	ДокументКассоваяКнига.МоментВремени                                   КАК МоментВремени,
	|	ОборотыВКассе.СуммаПоступления                                        КАК СуммаПоступления,
	|	ОборотыВКассе.СуммаВыдачи                                             КАК СуммаВыдачи,
	|	ЕСТЬNULL(СУММА(ДенежныеСредстваОстатки.СуммаКонечныйОстаток), 0)      КАК СуммаКонечныйОстаток
	|ИЗ
	|	Документ.ЛистКассовойКниги КАК ДокументКассоваяКнига
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		НеобработанныеЛисты КАК НеобработанныеЛисты
	|	ПО
	|		НеобработанныеЛисты.Ссылка = ДокументКассоваяКнига.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваНаличные.ОстаткиИОбороты(, , Авто, , 
	|		) КАК ДенежныеСредстваОстатки
	|	ПО
	|		НАЧАЛОПЕРИОДА(ДокументКассоваяКнига.Дата, ДЕНЬ) = ДенежныеСредстваОстатки.ПериодДень
	|		И ДенежныеСредстваОстатки.Организация = ДокументКассоваяКнига.Организация
	|		И ДенежныеСредстваОстатки.Касса.ВалютаДенежныхСредств = ДокументКассоваяКнига.ВалютаДенежныхСредств
	|		И ДенежныеСредстваОстатки.Касса.Магазин = ДокументКассоваяКнига.Магазин
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ОборотыВКассе КАК ОборотыВКассе
	|	ПО
	|		ОборотыВКассе.Ссылка = ДокументКассоваяКнига.Ссылка
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДокументКассоваяКнига.Ссылка,
	|	ОборотыВКассе.СуммаПоступления,
	|	ОборотыВКассе.СуммаВыдачи
	|УПОРЯДОЧИТЬ ПО
	|	ДокументКассоваяКнига.МоментВремени УБЫВ
	|");
	
	Запрос.УстановитьПараметр("МоментВремени", ?(МоментВремени = Неопределено, Новый МоментВремени(Дата(2099,1,1)), МоментВремени));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаЛистов = Результат[0].Выбрать();
	ВыборкаЛистов.Следующий();
	
	Выборка = Результат[2].Выбрать();
	
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ." + Выборка.Ссылка.Метаданные().Имя);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
			Если ДокументОбъект = Неопределено Тогда
				
				ОтменитьТранзакцию();
				Продолжить;
				
			КонецЕсли;
			
			ДокументОбъект.СуммаПоступления     = Выборка.СуммаПоступления;
			ДокументОбъект.СуммаВыдачи          = Выборка.СуммаВыдачи;
			ДокументОбъект.СуммаКонечныйОстаток = Выборка.СуммаКонечныйОстаток;
			
			
			
			Если ДокументОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект, Истина);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru='Не удалось обработать документ: %Ссылка% по причине: %Причина%';uk='Не вдалося обробити документ: %Ссылка% з причини: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				, Выборка.Ссылка, ТекстСообщения);
			
		КонецПопытки;
		
		МоментВремени = Выборка.МоментВремени;
			
	КонецЦикла;
	
	Если Выборка.Количество() = 0 Тогда
		ПараметрыОбработчиковОбновления.Удалить(ИдентификаторПараметров);
	Иначе
		ПараметрыОбработчиковОбновления.Вставить(ИдентификаторПараметров, МоментВремени);
	КонецЕсли;
	Константы.ПараметрыОбработчиковОбновления.Установить(Новый ХранилищеЗначения(ПараметрыОбработчиковОбновления));
	
	Параметры.ОбработкаЗавершена = (ВыборкаЛистов.Количество = 0);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ПараметрыОбособленногоПодразделения(Объект) Экспорт
	
	ИспользованиеОбособленногоПодразделения = Ложь;
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыОбособленногоПодразделения = Новый Структура;
	ИспользованиеОбособленногоПодразделения = ПолучитьФункциональнуюОпцию("ИспользоватьУчетДенежныхСредствПоОбособленнымПодразделениямОрганизация", Новый Структура("Организация", Объект.Организация));
	
	ПараметрыОбособленногоПодразделения.Вставить("ИспользованиеОбособленногоПодразделения", ИспользованиеОбособленногоПодразделения);
	
	Возврат ПараметрыОбособленногоПодразделения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
