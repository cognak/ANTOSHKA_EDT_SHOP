
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	//ИспользоватьНесколькоКасс = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс");
	//ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	
	//ПараметрыОбособленногоПодразделения = Новый ФиксированнаяСтруктура(Документы.ЛистКассовойКниги.ПараметрыОбособленногоПодразделения(Объект));
	//УстановитьВидимостьОбособленногоПодразделения();
	//ЗаполнитьСписокВыбораОбособленныхПодразделений();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		РассчитатьОстатокПоРегистрам();
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	// Контроль создания документа в подчиенном узле РИБ с фильтрами"
	//ОбменДаннымиУТУП.КонтрольСозданияДокументовВРаспределеннойИБ(Объект, Отказ);
	
	//СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) тогда
		Объект.Магазин = ОбменДаннымиПовтИсп.ПолучитьДанныеУзла().Магазин;
	КонецЕсли;

	УправлениеДоступомРТ.ПриСозданииФормыНаСервере(ЭтотОбъект);	//	LNK 17.10.2019 14:30:01

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	//МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	//МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УправлениеЭлементамиФормы();
	
	//МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.КассовыеОрдера.Очистить();
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	
	ПараметрыОбособленногоПодразделения = Новый ФиксированнаяСтруктура(Документы.ЛистКассовойКниги.ПараметрыОбособленногоПодразделения(Объект));
	
	//УстановитьВидимостьОбособленногоПодразделения();
	ЗаполнитьСписокВыбораОбособленныхПодразделений();
	
КонецПроцедуры


&НаКлиенте
Процедура ПоОбособленномуПодразделениюПриИзменении(Элемент)
	ПоОбособленномуПодразделениюПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ПоОбособленномуПодразделениюПриИзмененииСервер()
	
	Объект.КассовыеОрдера.Очистить();
	
	Элементы.ОбособленноеПодразделениеОрганизации.Видимость = Объект.ПоОбособленномуПодразделению;
	//Если Не Объект.ПоОбособленномуПодразделению Тогда
	//	Объект.ОбособленноеПодразделениеОрганизации = Справочники.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка();
	//КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументы

&НаКлиенте
Процедура ДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "Документ" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Документ) Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПриАктивизацииСтроки(Элемент)
	
	УстановитьПредупреждениеПриРедактировании();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.КассовыеОрдера.ТекущиеДанные;
	ТекущаяСтрока.НомерОрдера = ПолучитьНомерОрдера(ТекущаяСтрока.Документ);
	
	УстановитьПредупреждениеПриРедактировании();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура АвтоТест_ЗаполнитьДокументы(Команда) Экспорт

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("Дата");
	//СтруктураРеквизитов.Вставить("ВалютаДенежныхСредств");
	//Если ПараметрыОбособленногоПодразделения.ИспользованиеОбособленногоПодразделения Тогда
	//	СтруктураРеквизитов.Вставить("ПоОбособленномуПодразделению");
	//	Если Объект.ПоОбособленномуПодразделению Тогда
	//		СтруктураРеквизитов.Вставить("ОбособленноеПодразделениеОрганизации");
	//	КонецЕсли;
	//КонецЕсли;
	
	Если ОбщегоНазначенияРТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(ЭтотОбъект, Объект.КассовыеОрдера, СтруктураРеквизитов) Тогда
		ЗаполнитьДокументы();
		Модифицированность = Истина;	//	LNK 10.09.2018 11:35:45
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	//СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Надпись в пустом поле Документ для суммы переоценки
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Документ.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.КассовыеОрдера.Документ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.DarkGray);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Переоценка валютных денежных средств>';uk='<Переоцінка валютних коштів>'"));
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСписокВыбораОбособленныхПодразделений()
	//Если ПараметрыОбособленногоПодразделения.ИспользованиеОбособленногоПодразделения Тогда
	//	Справочники.ОбособленныеПодразделенияОрганизаций.ОбособленныеПодразделенияОрганизации(Объект.Организация, Элементы.ОбособленноеПодразделениеОрганизации.СписокВыбора);
	//Иначе
	//	Элементы.ОбособленноеПодразделениеОрганизации.СписокВыбора.Очистить();
	//КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура РассчитатьОстатокПоРегистрам()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Кассы.Ссылка КАК Касса
	|ПОМЕСТИТЬ Кассы
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	Кассы.Владелец = &Организация
	//|	И Кассы.ОбособленноеПодразделениеОрганизации = &ОбособленноеПодразделениеОрганизации
	//|	И Кассы.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
	|;
	|////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредстваНаличныеОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваНаличные.Остатки(
	|		&КонецДняГраница,
	|		Организация = &Организация
	|		И Касса В (ВЫБРАТЬ Кассы.Касса ИЗ Кассы)) КАК ДенежныеСредстваНаличныеОстатки
	|;
	|////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(
	|		ВЫБОР КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|			ДенежныеСредства.Сумма
	|		КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			-ДенежныеСредства.Сумма
	|		КОНЕЦ
	|	), 0) КАК СуммаИнвентаризации
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваНаличные КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.Период МЕЖДУ &НачалоДня И &КонецДня
	|	И Организация = &Организация
	|	И Касса В (ВЫБРАТЬ Кассы.Касса ИЗ Кассы)
	//|	И ДенежныеСредства.ХозяйственнаяОперация В
	//|		(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтражениеИзлишкаПриИнвентаризацииДенежныхСредств),
	//|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтражениеНедостачиПриИнвентаризацииДенежныхСредств))
	|");
	
	Запрос.УстановитьПараметр("КонецДняГраница", Новый Граница(КонецДня(Объект.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("КонецДня", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	//ИспользованиеОбособленногоПодразделения = ПараметрыОбособленногоПодразделения.ИспользованиеОбособленногоПодразделения;
	//Если ИспользованиеОбособленногоПодразделения Тогда
	//	Если Объект.ПоОбособленномуПодразделению Тогда
	//		Запрос.УстановитьПараметр("ОбособленноеПодразделениеОрганизации", Объект.ОбособленноеПодразделениеОрганизации);
	//	Иначе
	//		Запрос.УстановитьПараметр("ОбособленноеПодразделениеОрганизации", Справочники.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка());
	//	КонецЕсли;
	//Иначе
	//	Запрос.УстановитьПараметр("ОбособленноеПодразделениеОрганизации", Справочники.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка());	
	//КонецЕсли;
	//Запрос.УстановитьПараметр("ВалютаДенежныхСредств", Объект.ВалютаДенежныхСредств);	
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаОстаткаНаНачалоДня = Результат[1].Выбрать();
	ВыборкаОстаткаНаНачалоДня.Следующий();
	ВыборкаСуммыИнвентаризации = Результат[2].Выбрать();
	ВыборкаСуммыИнвентаризации.Следующий();
	
	СуммаКонечныйОстатокПоРегистру = ВыборкаОстаткаНаНачалоДня.СуммаОстаток - ВыборкаСуммыИнвентаризации.СуммаИнвентаризации;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	
	Элементы.СуммаКонечныйОстатокПоРегистру.Видимость =
		(Объект.СуммаКонечныйОстаток <> СуммаКонечныйОстатокПоРегистру)
		И Объект.Проведен;
//	LNK 19.03.2018 12:07:17 - закомментировал
//	Элементы.Ответственный.ТолькоПросмотр = НЕ РольДоступна(Метаданные.Роли.АдминистраторСистемы);
		
	//УстановитьВидимостьОбособленногоПодразделения();
	
//	Элементы.ОбособленноеПодразделениеОрганизации.КнопкаОткрытия = ЗначениеЗаполнено(Объект.ОбособленноеПодразделениеОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументы()
	
	Объект.КассовыеОрдера.Очистить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументКассоваяКнига.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЛистКассовойКниги КАК ДокументКассоваяКнига
	|ГДЕ
	|	ДокументКассоваяКнига.Ссылка <> &ТекущийДокумент
	|	И ДокументКассоваяКнига.Организация = &Организация
	|	И ДокументКассоваяКнига.Проведен
	|	И НАЧАЛОПЕРИОДА(ДокументКассоваяКнига.Дата, ДЕНЬ) = &ДатаНач
	|	И ДокументКассоваяКнига.Магазин = &Магазин
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументКассоваяКнига.Дата";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекущийДокумент", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация"    , Объект.Организация);
	Запрос.УстановитьПараметр("Магазин"        , Объект.Магазин);
	//ИспользованиеОбособленногоПодразделения = ПараметрыОбособленногоПодразделения.ИспользованиеОбособленногоПодразделения;
	//Запрос.УстановитьПараметр("ИспользованиеОбособленногоПодразделения", ИспользованиеОбособленногоПодразделения);
	//Если ИспользованиеОбособленногоПодразделения Тогда
	//	Если Объект.ПоОбособленномуПодразделению Тогда
	//		Запрос.УстановитьПараметр("ОбособленноеПодразделениеОрганизации", Объект.ОбособленноеПодразделениеОрганизации);
	//	Иначе
	//		Запрос.УстановитьПараметр("ОбособленноеПодразделениеОрганизации", Справочники.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка());
	//	КонецЕсли;
	//Иначе
	//	Запрос.УстановитьПараметр("ОбособленноеПодразделениеОрганизации", Справочники.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка());	
	//КонецЕсли;
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Объект.Дата));
	
	ЗаполнятьДокументы = Истина;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='На дату %1 уже существует документ: %2';uk='На дату %1 вже існує документ: %2'"),
			Объект.Дата, Выборка.Ссылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			, // КлючДанных
			"Объект.Дата");
		ЗаполнятьДокументы = Ложь;
		
	КонецЦикла;

	Если ЗаполнятьДокументы Тогда

		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДенежныеСредства.Регистратор КАК Документ,
		|	ДенежныеСредства.Регистратор.Номер КАК НомерДокумента,
		|	ВЫБОР
		|		КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА 0
		|		КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|			ТОГДА 1
		|	КОНЕЦ КАК ЗначениеУпорядочивания,
		|	СУММА(ВЫБОР
		|			КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА ДенежныеСредства.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Приход,
		|	СУММА(ВЫБОР
		|			КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА ДенежныеСредства.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Расход,
		|	ВЫБОР
		|		КОГДА ДенежныеСредства.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ВидДок,
		|	ДенежныеСредства.Регистратор.НомерОрдера КАК НомерОрдера,
		|	МАКСИМУМ(ЕСТЬNULL(СтатьиДДС.КорреспондирующийСчет, """")) КАК КорреспондирующийСчет
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваНаличные КАК ДенежныеСредства
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДДС
		|		ПО (СтатьиДДС.Ссылка = ДенежныеСредства.СтатьяДвиженияДенежныхСредств)
		|ГДЕ
		|	ДенежныеСредства.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ДенежныеСредства.Организация = &Организация
		|	И ДенежныеСредства.Касса.Магазин = &Магазин
		|	И ДенежныеСредства.Касса.ИспользоватьВКассовойКниге
		|	И НЕ ДенежныеСредства.Регистратор ССЫЛКА Документ.ВводНачальныхОстатковУзла
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА 0
		|		КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|			ТОГДА 1
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ДенежныеСредства.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ,
		|	ДенежныеСредства.Регистратор.НомерОрдера,
		|	ДенежныеСредства.Регистратор,
		|	ДенежныеСредства.Регистратор.Номер
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДенежныеСредства.Регистратор.Дата";

		
			//ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			//           |	ДенежныеСредства.Регистратор КАК Документ,
			//           |	ДенежныеСредства.Регистратор.Номер КАК НомерДокумента,
			//           |	ВЫБОР
			//           |		КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			//           |			ТОГДА 0
			//           |		КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			//           |			ТОГДА 1
			//           |	КОНЕЦ КАК ЗначениеУпорядочивания,
			//           |	СУММА(ВЫБОР
			//           |			КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			//           |				ТОГДА ДенежныеСредства.Сумма
			//           |			ИНАЧЕ 0
			//           |		КОНЕЦ) КАК Приход,
			//           |	СУММА(ВЫБОР
			//           |			КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			//           |				ТОГДА ДенежныеСредства.Сумма
			//           |			ИНАЧЕ 0
			//           |		КОНЕЦ) КАК Расход,
			//           |	ВЫБОР
			//           |		КОГДА ДенежныеСредства.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер
			//           |			ТОГДА 1
			//           |		ИНАЧЕ 2
			//           |	КОНЕЦ КАК ВидДок,
			//           |	ДенежныеСредства.Регистратор.НомерОрдера КАК НомерОрдера,
			//           |	МАКСИМУМ(СтатьиДДС.КорреспондирующийСчет) КАК КорреспондирующийСчет
			//           |ИЗ
			//           |	РегистрНакопления.ДенежныеСредстваНаличные КАК ДенежныеСредства
			//           |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДДС
			//           |		ПО (СтатьиДДС.Ссылка = ДенежныеСредства.СтатьяДвиженияДенежныхСредств)
			//           |ГДЕ
			//           |	ДенежныеСредства.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
			//           |	И ДенежныеСредства.Организация = &Организация
			//           |	И ДенежныеСредства.Касса.ИспользоватьВКассовойКниге
			//           |	И НЕ ДенежныеСредства.Регистратор ССЫЛКА Документ.ВводНачальныхОстатковУзла
			//           |
			//           |СГРУППИРОВАТЬ ПО
			//           |	ВЫБОР
			//           |		КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			//           |			ТОГДА 0
			//           |		КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			//           |			ТОГДА 1
			//           |	КОНЕЦ,
			//           |	ВЫБОР
			//           |		КОГДА ДенежныеСредства.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер
			//           |			ТОГДА 1
			//           |		ИНАЧЕ 2
			//           |	КОНЕЦ,
			//           |	ДенежныеСредства.Регистратор.НомерОрдера,
			//           |	ДенежныеСредства.Регистратор,
			//           |	ДенежныеСредства.Регистратор.Номер
			//           |
			//           |УПОРЯДОЧИТЬ ПО
			//           |	ВидДок,
			//           |	ДенежныеСредства.Регистратор.НомерОрдера";
		

		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Объект.Дата));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.Дата));
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
		//Запрос.УстановитьПараметр("ВалютаДенежныхСредств", Объект.ВалютаДенежныхСредств);
		//Запрос.УстановитьПараметр("ИспользованиеОбособленногоПодразделения", ИспользованиеОбособленногоПодразделения);
		//Если ИспользованиеОбособленногоПодразделения Тогда
		//	Если Объект.ПоОбособленномуПодразделению Тогда
		//		Запрос.УстановитьПараметр("ОбособленноеПодразделениеОрганизации", Объект.ОбособленноеПодразделениеОрганизации);
		//	Иначе
		//		Запрос.УстановитьПараметр("ОбособленноеПодразделениеОрганизации", Справочники.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка());
		//	КонецЕсли;
		//Иначе
		//	Запрос.УстановитьПараметр("ОбособленноеПодразделениеОрганизации", Справочники.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка());	
		//КонецЕсли;
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
//		Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='На дату %1  нет документов для заполнения листа кассовой книги';uk='На дату %1 немає документів для заповнення аркуша касової книги'"),
				Объект.Дата, Выборка.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				, // КлючДанных
				"Дата");
		Иначе
			ТаблицаДляСортировки = Новый ТаблицаЗначений;
			ТаблицаДляСортировки = Объект.КассовыеОрдера.Выгрузить().СкопироватьКолонки();
			ТаблицаДляСортировки.Колонки.Добавить("ЧислоНомерОрдера");
			ТаблицаДляСортировки.Колонки.Добавить("ВидДок");
			Бухгалтер = Справочники.ФизическиеЛица.ПустаяСсылка();
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Строка = ТаблицаДляСортировки.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, Выборка);
				Строка.ЧислоНомерОрдера = СформироватьНомерОрдера(Выборка.НомерОрдера);
				Бухгалтер = Выборка.Документ.ГлавныйБухгалтер;
			КонецЦикла;
			//ТаблицаДляСортировки.Индексы.Добавить("ВидДок, ЧислоНомерОрдера");
			//ТаблицаДляСортировки.Сортировать("ВидДок, ЧислоНомерОрдера");
			Объект.КассовыеОрдера.Загрузить(ТаблицаДляСортировки);
			Объект.ГлавныйБухгалтер = Бухгалтер;
			Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте                                            
Процедура УстановитьПредупреждениеПриРедактировании()
	
	СтрокаТаблицы = Элементы.КассовыеОрдера.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
			Если ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
				Элементы.Приход.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
				Элементы.Расход.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
			Иначе
				Элементы.Приход.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
				Элементы.Расход.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
			КонецЕсли;
			Элементы.НомерОрдера.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
		Иначе
			Элементы.Приход.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
			Элементы.Расход.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
			Элементы.НомерОрдера.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
КонецПроцедуры


Функция СформироватьНомерОрдера(Строка)
	СтрокаНули = "0000000000";
	Возврат Сред(СтрокаНули, 1, 10 - СтрДлина(Строка)) + Строка;
КонецФункции

&НаСервере
Функция ПолучитьНомерОрдера(Документ)
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат "";	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "НомерОрдера");
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьОбособленногоПодразделения()
	
	//Элементы.ГруппаОбособленноеПодразделение.Видимость  = ПараметрыОбособленногоПодразделения.ИспользованиеОбособленногоПодразделения;
	//Элементы.ОбособленноеПодразделениеОрганизации.Видимость = Объект.ПоОбособленномуПодразделению;
	//Если Не ПараметрыОбособленногоПодразделения.ИспользованиеОбособленногоПодразделения Тогда
	//	Объект.ПоОбособленномуПодразделению = Ложь;
	//	Объект.ОбособленноеПодразделениеОрганизации = Справочники.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка();
	//КонецЕсли;
	
КонецПроцедуры


#КонецОбласти
