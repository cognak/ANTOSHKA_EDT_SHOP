#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтотОбъект, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Организация = Настройки.Получить("Организация");
	Магазин = Настройки.Получить("Магазин");
	
	ЗаполнитьСписокВыбораМагазинов(); 
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияОтборПриИзменении(Элемент)
	
	ОрганизацияОтборПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияОтборПриИзмененииСервер()
	
	ЗаполнитьСписокВыбораМагазинов();
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры


&НаКлиенте
Процедура МагазинОтборПриИзменении(Элемент)
	МагазинОтборПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура МагазинОтборПриИзмененииСервер()
	УстановитьОтборДинамическихСписков();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьДиначескиеСписки();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОстаткиДенежныхСредств(Команда)
	
	ПараметрыФормы = Новый Структура("Отбор, ФиксированныеНастройки, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбор = Новый Структура("Организация", Организация, Истина);
	Иначе
		СтруктураОтбор = Новый Структура("", Истина);
	КонецЕсли;
	ПараметрыФормы.Отбор = СтруктураОтбор;
	
	ПараметрыФормы.КлючНазначенияИспользования = "ОстаткиНаличныхДенежныхСредствОднаВалютаКонтекст";
	ПараметрыФормы.КлючВарианта = "ОстаткиНаличныхДенежныхСредствОднаВалютаКонтекст";
	
	ОткрытьФорму("Отчет.ОстаткиИДвиженияДенежныхСредств.Форма", ПараметрыФормы);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПриходныеОрдера Тогда
		Источник = Элементы.ПриходныеКассовыеОрдера;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасходныеОрдера Тогда
		Источник = Элементы.РасходныеКассовыеОрдера;
	Иначе
		Источник = Элементы.КассовыеКниги;
	КонецЕсли;
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Источник);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Списки = Новый Массив;
	Списки.Добавить(КассовыеКниги);
	Списки.Добавить(ПриходныеКассовыеОрдера);
	Списки.Добавить(РасходныеКассовыеОрдера);
	
	Для каждого Список из Списки Цикл
	
		СписокУсловноеОформление = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
		СписокУсловноеОформление.Элементы.Очистить();
	
		Элемент = СписокУсловноеОформление.Элементы.Добавить();
		Элемент.Представление = НСтр("ru='<Основная кассовая книга организации>';uk='<Основна касова книга організації>'");
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Магазин");
	
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Магазин");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Справочники.Магазины.ПустаяСсылка();
	
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Основная кассовая книга организации>';uk='<Основна касова книга організації>'"));
		
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСписокВыбораМагазинов()

	Элементы.МагазинОтбор.СписокВыбора.Очистить();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Магазины.Ссылка КАК Магазин,
	|	Магазины.Наименование КАК Представление,
	|	Магазины.НомерМагазина КАК НомерМагазина
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.Организация = &Организация
	|	И Магазины.ВведенВЭксплуатацию
	|	И НЕ Магазины.СкладУправляющейСистемы
	|	И НЕ Магазины.Блокирован
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерМагазина"
	);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	МагазиныВыборка = Запрос.Выполнить().Выбрать();

	Пока МагазиныВыборка.Следующий() Цикл

		Элементы.МагазинОтбор.СписокВыбора.Добавить(МагазиныВыборка.Магазин
			, "(" + Формат(МагазиныВыборка.НомерМагазина, "ЧЦ=3; ЧН=---; ЧВН=; ЧГ=") + ") " + СокрЛП(МагазиныВыборка.Представление));

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическихСписков()

	Для Каждого ДинамическийСписок Из МассивДинамическихСписков() Цикл

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ДинамическийСписок, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Организация));

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ДинамическийСписок, "Магазин", Магазин, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Магазин));//Магазин <> Неопределено);

	КонецЦикла;

КонецПроцедуры

#Область Прочее

&НаСервере
Функция МассивДинамическихСписков()

	МассивСписков = Новый Массив;
	МассивСписков.Добавить(КассовыеКниги);
	МассивСписков.Добавить(ПриходныеКассовыеОрдера);
	МассивСписков.Добавить(РасходныеКассовыеОрдера);
	
	Возврат МассивСписков;

КонецФункции

&НаКлиенте
Процедура ОбновитьДиначескиеСписки()
	
	Элементы.КассовыеКниги.Обновить();
	Элементы.ПриходныеКассовыеОрдера.Обновить();
	Элементы.РасходныеКассовыеОрдера.Обновить();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
