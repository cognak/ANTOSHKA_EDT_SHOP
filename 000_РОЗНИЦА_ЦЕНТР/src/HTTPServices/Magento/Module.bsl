#Область ОбработчикиШаблонаCustomer

//	LNK 24.04.2024 08:26:22		http://localhost/LNK/hs/magento/Customer
//	Экспорт (исключительно!) в целях отладки и разработки во внешней обработке
//
Функция CustomerDo(HTTPЗапрос)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Действие	= HTTPЗапрос.ПараметрыURL["Action"];

	Если ТипЗнч(HTTPЗапрос) = Тип("Структура") Тогда	//	LNK 11.05.2024 07:14:42

	//		В целях разработки и отладки процессов, не связанных с HTTP.
	//		Вызываем данную функцию из внешней обработки, предварительно
	//		эмулировав параметр "HTTPЗапрос" как структуру.
			RequestData	= HTTPЗапрос.ТелоЗапросаСтрока;			//	отладочный вариант

	Иначе	RequestData	= HTTPЗапрос.ПолучитьТелоКакСтроку();	//	"боевой" вариант

	КонецЕсли;

	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO_2\Customer.Do." + Действие
		, "in"
		, КонтекстПриложения.ПредставлениеЗаголовка(HTTPЗапрос.Заголовки)
		+ Символы.ПС + RequestData
		, Истина
	);

	СоставОшибки = Новый Структура("Отказ, СтатусОшибки, ОписаниеОшибки", Ложь, "", "");

	Если ТипЗнч(HTTPЗапрос) = Тип("Структура") Тогда
		
			HTTPОтвет = Новый Структура(			// отладочный вариант
				"ТелоЗапросаСтрока, Заголовки, КодСостояния"
				, ""
				, Новый Соответствие
				, 200
			);

	Иначе	HTTPОтвет = Новый HTTPСервисОтвет(200);	//	"боевой" вариант

	КонецЕсли;

	HTTPОтвет.Заголовки.Вставить("Content-Type"	, "application/json; text/plain; charset=utf-8");
	HTTPОтвет.Заголовки.Вставить("ErrorStatus"	, "");
	HTTPОтвет.Заголовки.Вставить("ErrorMessage"	, "");

	Если Действие = Неопределено ИЛИ ПустаяСтрока(Действие) Тогда

	//	https://developer.mozilla.org/ru/docs/Web/HTTP/Status
		HTTPОтвет.КодСостояния	= 400;	//	400 Bad Request
										//	Сервер не может или не будет обрабатывать запрос из-за чего-то,
										//	что воспринимается как ошибка клиента (например, неправильный синтаксис,
										//	формат или маршрутизация запроса).
		HTTPОтвет.Заголовки.Вставить("ErrorStatus"	, "ACTION_UNKNOWN");
		HTTPОтвет.Заголовки.Вставить("ErrorMessage"	, СтроковыеФункцииКлиентСервер.СтрокаЛатиницей("Дія для ресурсу не визначена. Помилка!"));

	Иначе

		Попытка

			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(RequestData);

		//	Формат даты ISO вида: "ГГГГ-ММ-ДДTЧЧ:ММ:ССZ". Дата сериализуется в дату стандарта UTC.
		//	Например: "2009-02-15T00:00:00Z".
			ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON,, ОбменMagentoСервер.ИменаТипаДата(2), ФорматДатыJSON.ISO);

			Если ДанныеЗапроса.IDBASE = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторУчетнойСистемы")
			Тогда

				Если Действие = "GetClients" Тогда	//	/Customer/{Action} - последняя лексема

					ПолучитьКлиентовПоСписку(ДанныеЗапроса, HTTPОтвет);	//	переводим в ТЗ и т.д.

				Иначе

				//	https://developer.mozilla.org/ru/docs/Web/HTTP/Status
					HTTPОтвет.КодСостояния	= 400;	//	400 Bad Request
													//	Сервер не может или не будет обрабатывать запрос из-за чего-то,
													//	что воспринимается как ошибка клиента (например, неправильный синтаксис,
													//	формат или маршрутизация запроса).
					HTTPОтвет.Заголовки.Вставить("ErrorStatus"	, "ACTION_UNKNOWN");
					HTTPОтвет.Заголовки.Вставить("ErrorMessage"	, СтроковыеФункцииКлиентСервер.СтрокаЛатиницей("Вказана дія [" + Действие + "] не може бути опрацьована. Помилка!"));

				КонецЕсли;

			Иначе

			//	https://developer.mozilla.org/ru/docs/Web/HTTP/Status
				HTTPОтвет.КодСостояния	= 412;	//	412 Precondition Failed
												//	Клиент указал в заголовках запроса условия, которым сервер не соответствует.
				HTTPОтвет.Заголовки.Вставить("ErrorStatus"	, "IDBASE_UNKNOWN");
				HTTPОтвет.Заголовки.Вставить("ErrorMessage"	, СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ОписаниеОшибки()));

			КонецЕсли;

		Исключение

			ТекстОшибки	= ОписаниеОшибки();	//	отдельной строкой для облегчения отладки
		//	https://developer.mozilla.org/ru/docs/Web/HTTP/Status
			HTTPОтвет.КодСостояния	= 406;	//	406 Not Acceptable
											//	Сервер после выполнения согласования контента не нашёл содержимого,
											//	соответствующего критериям, заданным пользовательским агентом.
			HTTPОтвет.Заголовки.Вставить("ErrorStatus"	, "SYS_ERROR");
			HTTPОтвет.Заголовки.Вставить("ErrorMessage"	, СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ТекстОшибки));

		КонецПопытки;

	КонецЕсли;

	Если ТипЗнч(HTTPОтвет) = Тип("Структура") Тогда

			ТекстJSON = HTTPОтвет.ТелоЗапросаСтрока;		//	отладочный вариант

	Иначе	ТекстJSON = HTTPОтвет.ПолучитьТелоКакСтроку();	//	"боевой" вариант

	КонецЕсли;

	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO_2\Customer.Do." + Действие
		, "out"
		, КонтекстПриложения.ПредставлениеЗаголовка(HTTPОтвет.Заголовки)
		+ Символы.ПС + ТекстJSON
		, Истина
	);

	Возврат HTTPОтвет;

КонецФункции

#КонецОбласти

#Область КомплексПроцедуры_GetClients

//	LNK 26.04.2024 17:28:49
Процедура ПолучитьКлиентовПоСписку(ДанныеЗапроса, HTTPОтвет)

	#Если _ Тогда
	HTTPОтвет = Новый HTTPСервисОтвет(200);
	#КонецЕсли

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

//	LNK 29.04.2024 15:14:05 - обговорили с Мишинским
//	IDC является приоритетным ключём! Если указан - принимаем эту ссылку.

	Запрос = Новый Запрос(ТекстЗапросаИсточник());
	Запрос.МенеджерВременныхТаблиц	= Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаКлиентов", ПолучитьТаблицуВходящихДанных(ДанныеЗапроса));
	Запрос.Выполнить();								//	получим временную таблицу на основании данных входящего http-запроса
	Запрос.Параметры.Удалить("ТаблицаКлиентов");	//	очистим параметр - он уже не нужен.

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	JSON.ЗаписатьСвойство("IDBASE"	, ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторУчетнойСистемы"), ЗаписьJSON);
	JSON.ЗаписатьСвойство("DIFF"	, СокрЛП(Новый УникальныйИдентификатор), ЗаписьJSON);

		ЗаписьJSON.ЗаписатьИмяСвойства("Clients");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		
		Счётчик = 0;

		Запрос.Текст	 = ТекстЗапросаКлиентыЧтение();
		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда

			КлиентыВыборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока КлиентыВыборка.Следующий() Цикл

				ЗаписьJSON.ЗаписатьНачалоОбъекта();
			//	1. ---------------------------------------------------------------------------------------

					JSON.ЗаписатьСвойство("IDC"				, ОбменMagentoСлужебный.IDC_Строкой(КлиентыВыборка.Контрагент), ЗаписьJSON);
					JSON.ЗаписатьСвойство("ClientPhone"		, КлиентыВыборка.НомерТелефона, ЗаписьJSON);
					JSON.ЗаписатьСвойство("ClientEmail"		, СокрЛП(КлиентыВыборка.Электропочта1С), ЗаписьJSON);

					JSON.ЗаписатьСвойство("ClientFirstName" , КлиентыВыборка.Имя1С, ЗаписьJSON);
					JSON.ЗаписатьСвойство("ClientMiddleName", КлиентыВыборка.Отчество1С, ЗаписьJSON);
					JSON.ЗаписатьСвойство("ClientLastName"  , КлиентыВыборка.Фамилия1С, ЗаписьJSON);

					JSON.ЗаписатьСвойство("ClientDateBorn"	, ОбменMagentoСервер.ФорматДаты(КлиентыВыборка.ДатаРождения1С, ФорматДатыJSON.ISO), ЗаписьJSON);
					JSON.ЗаписатьСвойство("ClientGender"	, КлиентыВыборка.Пол, ЗаписьJSON);
				//	JSON.ЗаписатьСвойство("ClientEmployee"	, ??? хез, ЗаписьJSON);

					ДетиВыборка = КлиентыВыборка.Выбрать();

					ЗаписьJSON.ЗаписатьИмяСвойства("Children");
					ЗаписьJSON.ЗаписатьНачалоМассива();
				//	2. ---------------------------------------------------------------------------------------

					Пока ДетиВыборка.Следующий() Цикл

						Если НЕ ДетиВыборка.РебёнокИмя = NULL Тогда

							ЗаписьJSON.ЗаписатьНачалоОбъекта();

								JSON.ЗаписатьСвойство("ChildId"			, ДетиВыборка.РебёнокUUID, ЗаписьJSON);
								JSON.ЗаписатьСвойство("ChildFirstName"	, ДетиВыборка.РебёнокИмя, ЗаписьJSON);
								JSON.ЗаписатьСвойство("ChildGender"		, ДетиВыборка.РебёнокПол, ЗаписьJSON);
								JSON.ЗаписатьСвойство("ChildDateBorn"	, ОбменMagentoСервер.ФорматДаты(ДетиВыборка.РебёнокДатаРождения, ФорматДатыJSON.ISO), ЗаписьJSON);
							//	JSON.ЗаписатьСвойство("ChildKinship"	, "да вы охренели!", ЗаписьJSON);

							ЗаписьJSON.ЗаписатьКонецОбъекта();

						КонецЕсли;

					КонецЦикла;

				//	2. ---------------------------------------------------------------------------------------
					ЗаписьJSON.ЗаписатьКонецМассива();

			//	УстановитьКлючиАдреса(КлиентыВыборка, ЗаписьJSON);

			//	1. ---------------------------------------------------------------------------------------
				ЗаписьJSON.ЗаписатьКонецОбъекта();

				Счётчик = Счётчик + 1;

			КонецЦикла;

		КонецЕсли;

		ЗаписьJSON.ЗаписатьКонецМассива();
	ЗаписьJSON.ЗаписатьКонецОбъекта();

	ТекстJSON = ЗаписьJSON.Закрыть();

	Если ТипЗнч(HTTPОтвет) = Тип("Структура") Тогда
		
			HTTPОтвет.ТелоЗапросаСтрока	= ТекстJSON;

	Иначе	HTTPОтвет.УстановитьТелоИзСтроки(ТекстJSON);

	КонецЕсли;

КонецПроцедуры

//	LNK 29.04.2024 07:48:11
Функция ТекстЗапросаИсточник()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВнешниеДанные.IDC КАК IDC,
	|	ВнешниеДанные.НомерТелефона КАК НомерТелефона,
	|	ВнешниеДанные.НомерТелефона КАК Имя,
	|	ВнешниеДанные.НомерТелефона КАК Отчество,
	|	ВнешниеДанные.НомерТелефона КАК Фамилия,
	|	ВнешниеДанные.ДатаРождения КАК ДатаРождения
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаКлиентов КАК ВнешниеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерТелефона"
	;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаКлиентыЧтение()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Источник.IDC КАК IDC,
	|	ЕСТЬNULL(ТаблицаСправочник.IDN, """") КАК IDN,
	|	ЕСТЬNULL(ТаблицаСправочник.Ссылка, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
	|	Источник.НомерТелефона КАК НомерТелефона,
	|	Источник.Имя КАК Имя,
	|	Источник.Отчество КАК Отчество,
	|	Источник.Фамилия КАК Фамилия,
	|	Источник.ДатаРождения КАК ДатаРождения,
	|	ЕСТЬNULL(ТаблицаФИО.Имя, """") КАК Имя1С,
	|	ЕСТЬNULL(ТаблицаФИО.Отчество, """") КАК Отчество1С,
	|	ЕСТЬNULL(ТаблицаФИО.Фамилия, """") КАК Фамилия1С,
	|	ЕСТЬNULL(ТаблицаСправочник.ДатаРождения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРождения1С,
	|	ЕСТЬNULL(ТаблицаКонтактыПочта.АдресЭП, """") КАК Электропочта1С,
	|	ВЫБОР
	|		КОГДА ТаблицаСправочник.Пол ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаСправочник.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|					ТОГДА ""female""
	|				КОГДА ТаблицаСправочник.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|					ТОГДА ""male""
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК Пол,
	|	ТаблицаДети.Имя КАК РебёнокИмя,
	|	ТаблицаДети.ДатаРождения КАК РебёнокДатаРождения,
	|	ВЫБОР
	|		КОГДА ТаблицаДети.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|			ТОГДА ""female""
	|		КОГДА ТаблицаДети.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|			ТОГДА ""male""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК РебёнокПол,
	|	ТаблицаДети.УникальныйИдентификатор КАК РебёнокUUID,
	|	ВЫРАЗИТЬ(ТаблицаКонтактыАдрес.ЗначенияПолей КАК СТРОКА(1000)) КАК АдресXML
	|ИЗ
	|	Источник КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтактыТелефон
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаСправочник
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ТаблицаФИО
	|				ПО ТаблицаСправочник.Ссылка = ТаблицаФИО.ФизЛицо
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтактыПочта
	|				ПО ТаблицаСправочник.Ссылка = ТаблицаКонтактыПочта.Ссылка
	|					И (ТаблицаКонтактыПочта.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагента))
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.Дети КАК ТаблицаДети
	|				ПО ТаблицаСправочник.Ссылка = ТаблицаДети.Ссылка
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтактыАдрес
	|				ПО ТаблицаСправочник.Ссылка = ТаблицаКонтактыАдрес.Ссылка
	|					И (ТаблицаКонтактыАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента))
	|			ПО ТаблицаКонтактыТелефон.Ссылка = ТаблицаСправочник.Ссылка
	|		ПО (ТаблицаКонтактыТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
	|			И Источник.НомерТелефона = ТаблицаКонтактыТелефон.НомерТелефона
	|ИТОГИ
	|	МАКСИМУМ(IDC),
	|	МАКСИМУМ(IDN),
	|	МАКСИМУМ(НомерТелефона),
	|	МАКСИМУМ(Имя1С),
	|	МАКСИМУМ(Отчество1С),
	|	МАКСИМУМ(Фамилия1С),
	|	МАКСИМУМ(ДатаРождения1С),
	|	МАКСИМУМ(Электропочта1С),
	|	МАКСИМУМ(Пол),
	|	МАКСИМУМ(АдресXML)
	|ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	;

	Возврат ТекстЗапроса;

КонецФункции

#Область АдресКлиента_Определение

//	LNK 28.04.2024 11:04:19
//СоставАдреса	Структура
//	Город	"Каролино-Бугаз"
//	ГородСокращение	""
//	Долгота	"0"
//	Дом	"11"
//	Индекс	"65020 "
//	Квартира	"41"
//	КодСтраны	"804"
//	Корпус	"А"
//	НаселенныйПункт	"Затока"
//	НаселенныйПунктСокращение	""
//	Представление	"65020, Одесская, Овидиопольский, Каролино-Бугаз, Затока, Амосова, дом № 11, корпус А, квартира 41"
//	Район	"Овидиопольский"
//	РайонСокращение	""
//	Страна	"УКРАЇНА"
//	ТипДома	"Дом"
//	ТипКвартиры	"Квартира"
//	ТипКорпуса	"Корпус"
//	Улица	"Амосова"
//	УлицаСокращение	""
//	Широта	"0"
//
Процедура УстановитьКлючиАдреса(КлиентыВыборка, ЗаписьJSON)

//	Такие поля в задаче.. совсем всё оторвано от действительности!
//	AddressName			- Название адреса доставки (только адреса по умолчанию), дом, работа и т.д.
//	AddressType			- Способ доставки, на адрес - address или на отделение - warehouse.
//	AddressOperator		- Тип почтового оператора, Новая почта - newposhta.
//	AddressCity			- Код КОАТУУ населённого пункта.
//	AddressStreet		- Название улицы и типа улицы в формате: тип улицы+ [пробел] + название улицы со справочника
//	AddressHouse		- Номер дома, включая дополнения(дробь, корпус и т.д.).
//	AddressEntrance		- Подъезд.
//	AddressFloor		- Этаж.
//	AddressFlat			- Номер квартиры.
//	AddressIntercom		- Домофон.
//	AddressElevator		- Наличие лифта, есть - 1, нет - 0.
//	AddressWarehouse	- ID почтового отделения.

	СоставАдреса = КонтактнаяИнформацияСлужебный.ПредыдущаяСтруктураКонтактнойИнформацииXML(КлиентыВыборка.АдресXML);

	ЗаписьJSON.ЗаписатьИмяСвойства("Addres");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	Если НЕ СоставАдреса.Количество() = 0 Тогда

		JSON.ЗаписатьСвойство("AddressName"		, "Actual Home Address", ЗаписьJSON);
		JSON.ЗаписатьСвойство("AddressCity"		, "", ЗаписьJSON);	//	Код КОАТУУ населённого пункта.
		JSON.ЗаписатьСвойство("AddressStreet"	, ЭлементАдреса("Улица", СоставАдреса), ЗаписьJSON);
		JSON.ЗаписатьСвойство("AddressHouse"	, ЭлементАдреса("Дом", СоставАдреса)
			+ ?(ПустаяСтрока(ЭлементАдреса("Корпус", СоставАдреса))
					, ""
					, "/" + ЭлементАдреса("Корпус", СоставАдреса))
		, ЗаписьJSON
		);
		JSON.ЗаписатьСвойство("AddressFlat"		, ЭлементАдреса("Квартира", СоставАдреса), ЗаписьJSON);
		JSON.ЗаписатьСвойство("AddressWarehouse", ЭлементАдреса("Индекс", СоставАдреса), ЗаписьJSON);

	КонецЕсли;

	ЗаписьJSON.ЗаписатьКонецОбъекта();

КонецПроцедуры

//	LNK 29.04.2024 09:10:03
Функция ЭлементАдреса(Ключ, СоставАдреса, ЗначениеПоУмолчанию = "")

	#Если _ Тогда
	СоставАдреса = Новый Структура;
	#КонецЕсли

	Если СоставАдреса.Свойство(Ключ) Тогда

			ЗначениеВозврата = СоставАдреса[Ключ];

	Иначе	ЗначениеВозврата = ЗначениеПоУмолчанию;

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции

#КонецОбласти

Функция ПолучитьТаблицуВходящихДанных(ДанныеЗапроса)

	ТаблицаКлиентов = Новый ТаблицаЗначений;

	ТаблицаКлиентов.Колонки.Добавить("IDC"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
//	такая длина в поле "НомерТелефона" ТЧ Контрагенты "КонтактнаяИнформация".. длиннее быть не может!
	ТаблицаКлиентов.Колонки.Добавить("НомерТелефона", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
//	такая длина в "РегистрыСведений.ФИОФизЛиц"
	ТаблицаКлиентов.Колонки.Добавить("Имя"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	ТаблицаКлиентов.Колонки.Добавить("Отчество"		, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	ТаблицаКлиентов.Колонки.Добавить("Фамилия"		, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	ТаблицаКлиентов.Колонки.Добавить("ДатаРождения"	, Новый ОписаниеТипов("Дата"));

	Для каждого Состав Из ДанныеЗапроса.Clients Цикл

		СтрокаТаблицы = ТаблицаКлиентов.Добавить();

		СтрокаТаблицы.IDC			= СокрЛП(Состав.IDC);

		СтрокаТаблицы.НомерТелефона = СокрЛП(Состав.ClientPhone);
		СтрокаТаблицы.Имя			= СокрЛП(Состав.ClientFirstName);
		СтрокаТаблицы.Отчество		= СокрЛП(Состав.ClientMiddleName);
		СтрокаТаблицы.Фамилия		= СокрЛП(Состав.ClientLastName);

		СтрокаТаблицы.ДатаРождения	= Состав.ClientDateBorn;

	КонецЦикла;

	Возврат ТаблицаКлиентов;

КонецФункции

#КонецОбласти












