#Область ОбработчикиШаблонаCustomer

//	LNK 24.04.2024 08:26:22		http://localhost/LNK/hs/magento/Customer
//	Экспорт (исключительно!) в целях отладки и разработки во внешней обработке
//
Функция CustomerDo(HTTPЗапрос)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Действие = HTTPЗапрос.ПараметрыURL["Action"];

	Если ТипЗнч(HTTPЗапрос) = Тип("Структура") Тогда	//	LNK 11.05.2024 07:14:42

	//		В целях разработки и отладки процессов, не связанных с HTTP.
	//		Вызываем данную функцию из внешней обработки, предварительно
	//		эмулировав параметр "HTTPЗапрос" как структуру.
			RequestData	= HTTPЗапрос.ТелоЗапросаСтрока;			//	отладочный вариант

	Иначе	RequestData	= HTTPЗапрос.ПолучитьТелоКакСтроку();	//	"боевой" вариант

	КонецЕсли;

	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO_2\Customer.Do." + Действие
		, "in"
		, КонтекстПриложения.ПредставлениеЗаголовка(HTTPЗапрос.Заголовки)
		+ Символы.ПС + RequestData
		, Истина
	);

	СоставОшибки = Новый Структура("Отказ, СтатусОшибки, ОписаниеОшибки", Ложь, "", "");

	Если ТипЗнч(HTTPЗапрос) = Тип("Структура") Тогда
		
			HTTPОтвет = Новый Структура(			// отладочный вариант
				"ТелоЗапросаСтрока, Заголовки, КодСостояния"
				, ""
				, Новый Соответствие
				, 200
			);

	Иначе	HTTPОтвет = Новый HTTPСервисОтвет(200);	//	"боевой" вариант

	КонецЕсли;

	HTTPОтвет.Заголовки.Вставить("Content-Type"	, "application/json; text/plain; charset=utf-8");
	HTTPОтвет.Заголовки.Вставить("ErrorStatus"	, "");
	HTTPОтвет.Заголовки.Вставить("ErrorMessage"	, "");

	Если Действие = Неопределено ИЛИ ПустаяСтрока(Действие) Тогда

	//	https://developer.mozilla.org/ru/docs/Web/HTTP/Status
		HTTPОтвет.КодСостояния	= 400;	//	400 Bad Request
										//	Сервер не может или не будет обрабатывать запрос из-за чего-то,
										//	что воспринимается как ошибка клиента (например, неправильный синтаксис,
										//	формат или маршрутизация запроса).
		HTTPОтвет.Заголовки.Вставить("ErrorStatus"	, "ACTION_UNKNOWN");
		HTTPОтвет.Заголовки.Вставить("ErrorMessage"	, СтроковыеФункцииКлиентСервер.СтрокаЛатиницей("Дія для ресурсу не визначена. Помилка!"));

	Иначе

		Попытка

			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(RequestData);

		//	Формат даты ISO вида: "ГГГГ-ММ-ДДTЧЧ:ММ:ССZ". Дата сериализуется в дату стандарта UTC.
		//	Например: "2009-02-15T00:00:00Z".
			ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON,, ОбменMagentoСервер.ИменаТипаДата(2), ФорматДатыJSON.ISO);

//			Если ДанныеЗапроса.IDBASE = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторУчетнойСистемы")
//			Тогда

				Если Действие = "GetClients" Тогда	//	/Customer/{Action} - последняя лексема

					РазрешеноСоздание = ?(HTTPЗапрос.Заголовки["Create-If-Need"] = 1 ИЛИ HTTPЗапрос.Заголовки["Create-If-Need"] = "1", Истина, Ложь);
					ПолучитьКлиентовПоСписку(ДанныеЗапроса, HTTPОтвет, РазрешеноСоздание);	//	переводим в ТЗ и т.д.
				ИначеЕсли Действие = "GetBuyerBonusInfo" Тогда	//	/Customer/{Action} - последняя лексема

					//РазрешеноСоздание = ?(HTTPЗапрос.Заголовки["Create-If-Need"] = 1 ИЛИ HTTPЗапрос.Заголовки["Create-If-Need"] = "1", Истина, Ложь);
					ТекстОтвета = GetBuyerBonusInfo(RequestData);	//	
					HTTPОтвет = СформироватьHTTPОтвет(ТекстОтвета);
				ИначеЕсли Действие = "GetBuyerInfo" Тогда	//	/Customer/{Action} - последняя лексема
					ТекстОтвета = GetBuyerInfo(RequestData);	//	
					HTTPОтвет = СформироватьHTTPОтвет(ТекстОтвета);
				ИначеЕсли Действие = "GetRegisteredBalances" Тогда	//	/Customer/{Action} - последняя лексема
					ТекстОтвета = GetRegisteredBalances(RequestData);	//	
					HTTPОтвет = СформироватьHTTPОтвет(ТекстОтвета);
				ИначеЕсли Действие = "GetDistributedBonus" Тогда	//	/Customer/{Action} - последняя лексема
					ТекстОтвета = GetDistributedBonus(RequestData);	//	
					HTTPОтвет = СформироватьHTTPОтвет(ТекстОтвета);
				ИначеЕсли Действие = "GetBuyerExtendedInfo" Тогда	//	/Customer/{Action} - последняя лексема
					ТекстОтвета = GetBuyerExtendedInfo(RequestData);	//	
					HTTPОтвет = СформироватьHTTPОтвет(ТекстОтвета);
				ИначеЕсли Действие = "GetDiscountCalc" Тогда	//	/Customer/{Action} - последняя лексема
					ТекстОтвета = GetDiscountCalc(RequestData);	//	
					HTTPОтвет = СформироватьHTTPОтвет(ТекстОтвета);
				Иначе

				//	https://developer.mozilla.org/ru/docs/Web/HTTP/Status
					HTTPОтвет.КодСостояния	= 400;	//	400 Bad Request
													//	Сервер не может или не будет обрабатывать запрос из-за чего-то,
													//	что воспринимается как ошибка клиента (например, неправильный синтаксис,
													//	формат или маршрутизация запроса).
					HTTPОтвет.Заголовки.Вставить("ErrorStatus"	, "ACTION_UNKNOWN");
					HTTPОтвет.Заголовки.Вставить("ErrorMessage"	, "Вказана дія [" + Действие + "] не може бути опрацьована. Помилка!");

				КонецЕсли;

			//Иначе

			////	https://developer.mozilla.org/ru/docs/Web/HTTP/Status
			//	HTTPОтвет.КодСостояния	= 412;	//	412 Precondition Failed
			//									//	Клиент указал в заголовках запроса условия, которым сервер не соответствует.
			//	HTTPОтвет.Заголовки.Вставить("ErrorStatus"	, "IDBASE_UNKNOWN");
			//	HTTPОтвет.Заголовки.Вставить("ErrorMessage"	, ОписаниеОшибки());

			//КонецЕсли;

		Исключение

			ТекстОшибки	= ОписаниеОшибки();	//	отдельной строкой для облегчения отладки
		//	https://developer.mozilla.org/ru/docs/Web/HTTP/Status
			HTTPОтвет.КодСостояния	= 406;	//	406 Not Acceptable
											//	Сервер после выполнения согласования контента не нашёл содержимого,
											//	соответствующего критериям, заданным пользовательским агентом.
			HTTPОтвет.Заголовки.Вставить("ErrorStatus"	, "SYS_ERROR");
			HTTPОтвет.Заголовки.Вставить("ErrorMessage"	, ТекстОшибки);

		КонецПопытки;

	КонецЕсли;

	Если ТипЗнч(HTTPОтвет) = Тип("Структура") Тогда

			ТекстJSON = HTTPОтвет.ТелоЗапросаСтрока;		//	отладочный вариант

	Иначе	ТекстJSON = HTTPОтвет.ПолучитьТелоКакСтроку();	//	"боевой" вариант

	КонецЕсли;

	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO_2\Customer.Do." + Действие
		, "out"
		, КонтекстПриложения.ПредставлениеЗаголовка(HTTPОтвет.Заголовки)
		+ Символы.ПС + ТекстJSON
		, Истина
	);

	Возврат HTTPОтвет;

КонецФункции

#КонецОбласти

#Область КомплексПроцедуры_GetClients

//	LNK 26.04.2024 17:28:49
Процедура ПолучитьКлиентовПоСписку(ДанныеЗапроса, HTTPОтвет, РазрешеноСоздание)

	#Если _ Тогда
	HTTPОтвет = Новый HTTPСервисОтвет(200);
	#КонецЕсли

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

//	LNK 29.04.2024 15:14:05 - обговорили с Мишинским
//	IDC является приоритетным ключём! Если указан - принимаем эту ссылку.

	Для Итерация = 1 По 2 Цикл

	//	Две итерации получения временных таблиц по причине возможного
	//	создания новых элементов.
	//	В первой итерации такие "новые" могут быть созданы, а во второй они
	//	обновляются в таблице "Найдено".

		ДанныеВходящие = ПолучитьТаблицуВходящихДанных(ДанныеЗапроса);

		Если Итерация = 1 Тогда

			Запрос = Новый Запрос(ТекстЗапросаИсточник());
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("ТаблицаКлиентов", ДанныеВходящие.ТаблицаКлиентов);
			Запрос.Выполнить();	//	получим временные таблицы на основании данных входящего http-запроса

			ТаблицаНовых = ВыполнитьСозданиеКлиентов(Запрос, ДанныеВходящие.ТаблицаДетей, РазрешеноСоздание);	//	LNK 17.05.2024 09:48:28

		Иначе

			Если НЕ ТаблицаНовых.Количество() = 0 И РазрешеноСоздание = Истина Тогда

				Запрос.Текст =
				"УНИЧТОЖИТЬ Источник
				|;
				|УНИЧТОЖИТЬ Найдено"
				;
				Запрос.Выполнить();	//	удаляем временные таблицы..

			//	необходимо обновить "источники", а именно выборку "Найдено".
				Запрос.Текст = ТекстЗапросаИсточник();
				Запрос.Выполнить();	//	обновим временные таблицы..

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Запрос.Параметры.Удалить("ТаблицаКлиентов");	//	очистим параметр - он уже не нужен.

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	JSON.ЗаписатьСвойство("IDBASE"	, ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторУчетнойСистемы"), ЗаписьJSON);
	JSON.ЗаписатьСвойство("DIFF"	, СокрЛП(Новый УникальныйИдентификатор), ЗаписьJSON);

		ЗаписьJSON.ЗаписатьИмяСвойства("Clients");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		
		Счётчик = 0;

		Запрос.Текст	= ТекстЗапросаКлиентыЧтение();
		ТаблицаКлиентов	= ПолучитьЛокальнуюТаблицуКлиентов(Запрос.Выполнить(), ТаблицаНовых);

		Для каждого СтрокаКлиенты Из ТаблицаКлиентов Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();
		//	1. ---------------------------------------------------------------------------------------

				JSON.ЗаписатьСвойство("IDC"				, ОбменMagentoСлужебный.IDC_Строкой(СтрокаКлиенты.Контрагент), ЗаписьJSON);
				JSON.ЗаписатьСвойство("ClientPhone"		, СтрокаКлиенты.НомерТелефона, ЗаписьJSON);
				JSON.ЗаписатьСвойство("ClientEmail"		, СокрЛП(СтрокаКлиенты.Электропочта), ЗаписьJSON);

				JSON.ЗаписатьСвойство("ClientFirstName" , СтрокаКлиенты.Имя, ЗаписьJSON);
				JSON.ЗаписатьСвойство("ClientMiddleName", СтрокаКлиенты.Отчество, ЗаписьJSON);
				JSON.ЗаписатьСвойство("ClientLastName"  , СтрокаКлиенты.Фамилия, ЗаписьJSON);

				JSON.ЗаписатьСвойство("ClientDateBorn"	, ОбменMagentoСервер.ФорматДаты(СтрокаКлиенты.ДатаРождения, ФорматДатыJSON.ISO), ЗаписьJSON);
				JSON.ЗаписатьСвойство("ClientGender"	, СтрокаКлиенты.Пол, ЗаписьJSON);

				JSON.ЗаписатьСвойство("Message"			, СтрокаКлиенты.ТекстСообщения, ЗаписьJSON);
				JSON.ЗаписатьСвойство("Error"			, ?(СтрокаКлиенты.Ошибка, 1, 0), ЗаписьJSON);

				ЗаписьJSON.ЗаписатьИмяСвойства("Children");
				ЗаписьJSON.ЗаписатьНачалоМассива();
			//	2. ---------------------------------------------------------------------------------------

				Для каждого СтрокаРебёнок Из СтрокаКлиенты.Дети Цикл
				
					ЗаписьJSON.ЗаписатьНачалоОбъекта();

						JSON.ЗаписатьСвойство("ChildId"			, СтрокаРебёнок.РебёнокUUID, ЗаписьJSON);
						JSON.ЗаписатьСвойство("ChildFirstName"	, СтрокаРебёнок.РебёнокИмя, ЗаписьJSON);
						JSON.ЗаписатьСвойство("ChildGender"		, СтрокаРебёнок.РебёнокПол, ЗаписьJSON);
						JSON.ЗаписатьСвойство("ChildDateBorn"	, ОбменMagentoСервер.ФорматДаты(СтрокаРебёнок.РебёнокДатаРождения, ФорматДатыJSON.ISO), ЗаписьJSON);

					ЗаписьJSON.ЗаписатьКонецОбъекта();

				КонецЦикла;

			//	2. ---------------------------------------------------------------------------------------
				ЗаписьJSON.ЗаписатьКонецМассива();

		//	УстановитьКлючиАдреса(КлиентыВыборка, ЗаписьJSON);

		//	1. ---------------------------------------------------------------------------------------
			ЗаписьJSON.ЗаписатьКонецОбъекта();

			Счётчик = Счётчик + 1;

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();
	ЗаписьJSON.ЗаписатьКонецОбъекта();

	ТекстJSON = ЗаписьJSON.Закрыть();

	Если ТипЗнч(HTTPОтвет) = Тип("Структура") Тогда
		
			HTTPОтвет.ТелоЗапросаСтрока	= ТекстJSON;

	Иначе	HTTPОтвет.УстановитьТелоИзСтроки(ТекстJSON);

	КонецЕсли;

КонецПроцедуры

//	LNK 17.05.2024 09:49:42
Функция ВыполнитьСозданиеКлиентов(Запрос, ТаблицаДетей, РазрешеноСоздание)

	Перем УИ;

	Запрос.Текст	 = ТекстЗапросаКлиентыСоздание();
	РезультатЗапроса = Запрос.Выполнить();

	ТаблицаНовых = ПолучитьСтруктуруТаблицыКлиентов("Входящие", РезультатЗапроса.Выгрузить());
	#Если _ Тогда
	ТаблицаНовых = Новый ТаблицаЗначений;
	#КонецЕсли

	Если РазрешеноСоздание = Истина Тогда

		Для каждого СтрокаТаблицы Из ТаблицаНовых Цикл

			Если НЕ ПустаяСтрока(СтрокаТаблицы.IDC) Тогда

				Попытка

					УИ = Новый УникальныйИдентификатор(СтрокаТаблицы.IDC);

					КонтрагентСсылка = Справочники.Контрагенты.ПолучитьСсылку(УИ);	//	проверяем ещё раз!
				//	.. если такая ссылка существует, то ничего не делаем и не сообщаем.
				//	в принципе, данные этой ссылки вернутся в следующей итерации внешнего запроса (наверное).

					Если НЕ КонтрагентСсылка.Пустая() Тогда

						СтрокаТаблицы.Ошибка		 = Истина;
						СтрокаТаблицы.ТекстСообщения = СтрокаТаблицы.ТекстСообщения + ?(ПустаяСтрока(СтрокаТаблицы.ТекстСообщения), "", Символы.ПС)
							+ "Клієнта виявлено під час перевірки IDC! Можливо, виконуються паралельні зовнішні запити.";

					КонецЕсли;

				Исключение

					УИ = Неопределено;
				//	.. гасим ошибку возможной чуши в IDC
					СтрокаТаблицы.ТекстСообщения = СтрокаТаблицы.ТекстСообщения + ?(ПустаяСтрока(СтрокаТаблицы.ТекстСообщения), "", Символы.ПС)
						+ ОписаниеОшибки();

				КонецПопытки;

			КонецЕсли;

			Если НЕ СтрокаТаблицы.Ошибка Тогда

			//	Предварительный контроль дублей!
				КонтрагентСсылка = Справочники.Контрагенты.НайтиПоТелефону(СтрокаТаблицы.НомерТелефона, Перечисления.ЮрФизЛицо.ФизЛицо, Истина, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);

				Если КонтрагентСсылка.Пустая() Тогда

					КонтрагентСсылка = СоздатьКонтрагента(УИ
						, СтрокаТаблицы
						, ТаблицаДетей.Скопировать(ТаблицаДетей.НайтиСтроки(Новый Структура("ID_Parent", СтрокаТаблицы.ID_Parent)))
					);

				Иначе

					СтрокаТаблицы.Ошибка		 = Истина;
					СтрокаТаблицы.ТекстСообщения = СтрокаТаблицы.ТекстСообщения + ?(ПустаяСтрока(СтрокаТаблицы.ТекстСообщения), "", Символы.ПС)
						+ "Поганий (невірна структура) номер телефону «" + СтрокаТаблицы.НомерТелефона + "». Існують такі номери";

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат ТаблицаНовых;

КонецФункции

//	LNK 24.05.2024 07:48:54
Функция СоздатьКонтрагента(Знач УИ, СтрокаТаблицы, ТаблицаДетей)

	ТекстОшибки		 = "";
	КонтрагентСсылка = Справочники.Контрагенты.ПустаяСсылка();

	Попытка

		Блокиратор = Справочники.БлокираторыПроцессов.НовыйКонтрагент.ПолучитьОбъект();
		Блокиратор.Заблокировать();

		Попытка

			НачатьТранзакцию();

			КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();

			КонтрагентОбъект.УстановитьСсылкуНового(Справочники.Контрагенты.ПолучитьСсылку(?(УИ = Неопределено, Новый УникальныйИдентификатор, УИ)));

		//	---------------------------------------------------------------------------------------
			КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
			КонтрагентОбъект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			КонтрагентОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
			ОбменДаннымиСервер.УстановитьВсехПолучателей(КонтрагентОбъект.ОбменДанными.Получатели, "ПоМагазину");

			КонтрагентОбъект.Блокирован		= Ложь;
			КонтрагентОбъект.Родитель		= Справочники.Контрагенты.Покупатели;
			КонтрагентОбъект.ЮрФизЛицо		= Перечисления.ЮрФизЛицо.ФизЛицо;
			КонтрагентОбъект.Пол			= ?(НРег(СтрокаТаблицы.Пол) = "male"	, Перечисления.ПолФизическогоЛица.Мужской,
											  ?(НРег(СтрокаТаблицы.Пол) = "female"	, Перечисления.ПолФизическогоЛица.Мужской
											  										, Перечисления.ПолФизическогоЛица.ПустаяСсылка()));
			КонтрагентОбъект.Покупатель		= Истина;
			КонтрагентОбъект.ДатаРождения	= СтрокаТаблицы.ДатаРождения;
			КонтрагентОбъект.ДатаСоздания	= ТекущаяДата();

			КонтрагентОбъект.ДополнительныеСвойства.Вставить("ПрефиксНеДополнять");
			КонтрагентОбъект.ДополнительныеСвойства.Вставить("Префикс", "MG2");
			КонтрагентОбъект.УстановитьНовыйКод();

			КонтрагентОбъект.IDN = КонтрагентОбъект.Код;

		//	---------------------------------------------------------------------------------------
			СтроковыеФункцииКлиентСервер.ПривестиНаименование(СтрокаТаблицы.Имя, Истина, Истина);
			СтроковыеФункцииКлиентСервер.ПривестиНаименование(СтрокаТаблицы.Отчество, Истина, Истина);
			СтроковыеФункцииКлиентСервер.ПривестиНаименование(СтрокаТаблицы.Фамилия, Истина, Истина);

			МенеджерЗаписи = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период	= ТекущаяДата();
			МенеджерЗаписи.ФизЛицо	= КонтрагентОбъект.ПолучитьСсылкуНового();
			МенеджерЗаписи.Фамилия	= СтрокаТаблицы.Фамилия;
			МенеджерЗаписи.Имя		= СтрокаТаблицы.Имя;
			МенеджерЗаписи.Отчество	= СтрокаТаблицы.Отчество;

			МенеджерЗаписи.Записать();

			КонтрагентОбъект.Наименование		= СтроковыеФункцииКлиентСервер.ПривестиНаименование(СтрокаТаблицы.Фамилия + " " + СтрокаТаблицы.Имя + " " + СтрокаТаблицы.Отчество, Ложь, Истина);
			КонтрагентОбъект.НаименованиеПолное	= КонтрагентОбъект.Наименование;

		//	---------------------------------------------------------------------------------------
			СтрокаКонтакты = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
			СтрокаКонтакты.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			СтрокаКонтакты.Тип = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаКонтакты.Вид, "Тип");
			СтрокаКонтакты.НомерТелефона = СокрЛП(СтрокаТаблицы.НомерТелефона);
			СтрокаКонтакты.Представление = СтрокаКонтакты.НомерТелефона;

			Представление = Лев( СтрокаКонтакты.НомерТелефона,  3)
					+ " " + Сред(СтрокаКонтакты.НомерТелефона,  4, 2)
					+ " " + Сред(СтрокаКонтакты.НомерТелефона,  6, 3)
					+ " " + Сред(СтрокаКонтакты.НомерТелефона,  9, 2)
					+ " " + Сред(СтрокаКонтакты.НомерТелефона, 11, 2);
			СтрокаКонтакты.ЗначенияПолей = ВерификацияКлиентовСервер.СформироватьДанныеТелефона(Представление, СтрокаКонтакты.НомерТелефонаБезКодов);

			Для каждого СтрокаРебёнок Из ТаблицаДетей Цикл

				СтрокаТабличнойЧасти = КонтрагентОбъект.Дети.Добавить();

				СтрокаТабличнойЧасти.УникальныйИдентификатор = СтрокаРебёнок.РебёнокUUID;
				СтрокаТабличнойЧасти.ДатаРождения	= СтрокаРебёнок.РебёнокДатаРождения;
				СтрокаТабличнойЧасти.Имя			= СтрокаРебёнок.РебёнокИмя;
				СтрокаТабличнойЧасти.Пол			= СтрокаРебёнок.РебёнокПол;

			КонецЦикла;

			КонтрагентОбъект.Записать();
			КонтрагентСсылка = КонтрагентОбъект.Ссылка;

			ЗафиксироватьТранзакцию();

		Исключение

			ТекстОшибки = "Ошибка при создании [" + СтрокаТаблицы.НомерТелефона + "]" + ОписаниеОшибки();
			ОтменитьТранзакцию();

		КонецПопытки;

		Блокиратор.Разблокировать();

	Исключение

		ТекстОшибки = "Отказано в создании клиента [" + СтрокаТаблицы.НомерТелефона + "]. Не удалось получить управление процессом.";

	КонецПопытки;

	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда

		СтрокаТаблицы.Ошибка		 = Истина;
		СтрокаТаблицы.ТекстСообщения = СтрокаТаблицы.ТекстСообщения + ?(ПустаяСтрока(СтрокаТаблицы.ТекстСообщения), "", Символы.ПС)
			+ ТекстОшибки;

		ЖурналСобытий.Регистрация("MAG2.Клиенты.Создание", УровеньЖурналаРегистрации.Предупреждение
			, Метаданные.Справочники.Контрагенты
			,
			,
			, ТекстОшибки
			, "Клиент [" + СтрокаТаблицы.НомерТелефона + "]"
			, Истина
			, Ложь
		);

	КонецЕсли;

	Возврат КонтрагентСсылка;

КонецФункции

//	LNK 22.05.2024 07:29:58
Функция ПолучитьЛокальнуюТаблицуКлиентов(РезультатЗапроса, ТаблицаНовых)

	ТаблицаКлиентов = ПолучитьСтруктуруТаблицыКлиентов("Полный");
	#Если _ Тогда
	ТаблицаКлиентов = Новый ТаблицаЗначений;
	ТаблицаНовых	= Новый ТаблицаЗначений;
	#КонецЕсли

	Если НЕ РезультатЗапроса.Пустой() Тогда

		КлиентыВыборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока КлиентыВыборка.Следующий() Цикл

			СтрокаКлиенты = ТаблицаКлиентов.Добавить();

			СтрокаКлиенты.Дети = ПолучитьСтруктуруТаблицыКлиентов("Дети", СтрокаКлиенты.Дети);

			СтрокаКлиенты.IDC			= ОбменMagentoСлужебный.IDC_Строкой(КлиентыВыборка.Контрагент);
			СтрокаКлиенты.Контрагент	= КлиентыВыборка.Контрагент;
			СтрокаКлиенты.НомерТелефона	= КлиентыВыборка.НомерТелефона;
			СтрокаКлиенты.Электропочта	= СокрЛП(КлиентыВыборка.Электропочта);

			СтрокаКлиенты.Имя			= КлиентыВыборка.Имя;
			СтрокаКлиенты.Отчество		= КлиентыВыборка.Отчество;
			СтрокаКлиенты.Фамилия		= КлиентыВыборка.Фамилия;

			СтрокаКлиенты.ДатаРождения	= КлиентыВыборка.ДатаРождения;
			СтрокаКлиенты.Пол			= КлиентыВыборка.Пол;

			ДетиВыборка = КлиентыВыборка.Выбрать();

			Пока ДетиВыборка.Следующий() Цикл

				Если НЕ ДетиВыборка.РебёнокИмя = NULL Тогда

					СтрокаРебёнок = СтрокаКлиенты.Дети.Добавить();

					СтрокаРебёнок.РебёнокUUID			= ДетиВыборка.РебёнокUUID;
					СтрокаРебёнок.РебёнокИмя			= ДетиВыборка.РебёнокИмя;
					СтрокаРебёнок.РебёнокПол			= ДетиВыборка.РебёнокПол;
					СтрокаРебёнок.РебёнокДатаРождения	= ДетиВыборка.РебёнокДатаРождения;

				КонецЕсли;

			КонецЦикла;

			Если НЕ КлиентыВыборка.Контрагент.Пустая() И НЕ КлиентыВыборка.КлиентMagentoII = Истина Тогда

				УстановитьРеквизитыКонтрагентов(КлиентыВыборка);

			КонецЕсли;

		//	.. устанавливаем обнаруженные при создании замечания или ошибки
			СтрокаНовых = ТаблицаНовых.Найти(СтрокаКлиенты.НомерТелефона, "НомерТелефона");

			Если НЕ СтрокаНовых = Неопределено Тогда

				СтрокаКлиенты.Ошибка		 = СтрокаНовых.Ошибка;
				СтрокаКлиенты.ТекстСообщения = СтрокаКлиенты.ТекстСообщения + ?(ПустаяСтрока(СтрокаКлиенты.ТекстСообщения), "", Символы.ПС)
					+ СтрокаНовых.ТекстСообщения;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат ТаблицаКлиентов;

КонецФункции

//	LNK 24.05.2024 08:56:06
Процедура УстановитьРеквизитыКонтрагентов(ДанныеКонтрагента)

	ПериодЗаписи = ПолучитьПериодРеквизитыКонтрагентов(ДанныеКонтрагента.Контрагент);

	НаборЗаписей = РегистрыСведений.РеквизитыКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Контрагент.Установить(ДанныеКонтрагента.Контрагент);

	Если ПериодЗаписи = '00010101' Тогда

			НаборЗаписей.Отбор.Период.Установить(ТекущаяДата());
			ЗаписьНабора = НаборЗаписей.Добавить();

			ЗаписьНабора.Период		= НаборЗаписей.Отбор.Период.Значение;
			ЗаписьНабора.Контрагент	= НаборЗаписей.Отбор.Контрагент.Значение;

			ЗаписьНабора.Блокирован	= ДанныеКонтрагента.РК_Блокирован;
			ЗаписьНабора.Код		= ДанныеКонтрагента.IDN;
			ЗаписьНабора.Наименование			= СокрЛП(ДанныеКонтрагента.РК_Наименование);
			ЗаписьНабора.НаименованиеУкраинское	= СокрЛП(ДанныеКонтрагента.РК_НаименованиеУкраинское);

	Иначе	НаборЗаписей.Отбор.Период.Установить(ПериодЗаписи);
			НаборЗаписей.Прочитать();
			ЗаписьНабора = НаборЗаписей[0];

	КонецЕсли;

	ЗаписьНабора.КлиентMagentoII = Истина;

	НаборЗаписей.Записать();

КонецПроцедуры

//	LNK 24.05.2024 06:40:02
Функция ПолучитьПериодРеквизитыКонтрагентов(Контрагент)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаРеквизиты.Период КАК Период
	|ИЗ
	|	РегистрСведений.РеквизитыКонтрагентов.СрезПоследних(, Контрагент = &Контрагент) КАК ТаблицаРеквизиты"
	);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();

			ПериодЗаписи = Выборка.Период;

	Иначе	ПериодЗаписи = '00010101';

	КонецЕсли;

	Возврат ПериодЗаписи;

КонецФункции

//	LNK 22.05.2024 10:48:27
Процедура КолонкиДобавить(Имя, ОписаниеТипов, Колонки)

	Если Колонки.Найти(Имя) = Неопределено Тогда

		Колонки.Добавить(Имя, ОписаниеТипов);

	КонецЕсли;

КонецПроцедуры

//	LNK 29.04.2024 07:48:11
Функция ТекстЗапросаИсточник()

//	Поле "Контрагент" для заполнения по IDC
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВнешниеДанные.IDC КАК IDC,
	|	ВнешниеДанные.ID_Parent КАК ID_Parent,
	|	ВнешниеДанные.Контрагент КАК Контрагент,
	|	ВнешниеДанные.НомерТелефона КАК НомерТелефона,
	|	ВнешниеДанные.Имя КАК Имя,
	|	ВнешниеДанные.Отчество КАК Отчество,
	|	ВнешниеДанные.Фамилия КАК Фамилия,
	|	ВнешниеДанные.ДатаРождения КАК ДатаРождения
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаКлиентов КАК ВнешниеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерТелефона
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.IDC КАК IDC,
	|	ТаблицаСправочник.IDN КАК IDN,
	|	Источник.ID_Parent КАК ID_Parent,
	|	ТаблицаСправочник.Ссылка КАК Контрагент,
	|	Источник.НомерТелефона КАК НомерТелефона,
	|	Источник.Имя КАК Имя,
	|	Источник.Отчество КАК Отчество,
	|	Источник.Фамилия КАК Фамилия,
	|	Источник.ДатаРождения КАК ДатаРождения,
	|	ТаблицаСправочник.ДатаРождения КАК ДатаРождения1С,
	|	ТаблицаСправочник.Пол КАК Пол
	|ПОМЕСТИТЬ Найдено
	|ИЗ
	|	Источник КАК Источник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаСправочник
	|		ПО Источник.Контрагент = ТаблицаСправочник.Ссылка
	|ГДЕ
	|	НЕ Источник.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Источник.IDC,
	|	ТаблицаСправочник.IDN,
	|	Источник.ID_Parent,
	|	ТаблицаСправочник.Ссылка,
	|	Источник.НомерТелефона,
	|	Источник.Имя,
	|	Источник.Отчество,
	|	Источник.Фамилия,
	|	Источник.ДатаРождения,
	|	ТаблицаСправочник.ДатаРождения,
	|	ТаблицаСправочник.Пол
	|ИЗ
	|	Источник КАК Источник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтактыТелефон
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаСправочник
	|			ПО ТаблицаКонтактыТелефон.Ссылка = ТаблицаСправочник.Ссылка
	|		ПО (ТаблицаКонтактыТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
	|			И Источник.НомерТелефона = ТаблицаКонтактыТелефон.НомерТелефона
	|ГДЕ
	|	Источник.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И НЕ Источник.НомерТелефона = """""
	;

	Возврат ТекстЗапроса;

КонецФункции

//	LNK 17.05.2024 09:42:04
Функция ТекстЗапросаКлиентыСоздание()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Источник.IDC КАК IDC,
	|	Источник.ID_Parent КАК ID_Parent,
	|	Источник.Контрагент КАК Контрагент,
	|	Источник.НомерТелефона КАК НомерТелефона,
	|	Источник.Имя КАК Имя,
	|	Источник.Отчество КАК Отчество,
	|	Источник.Фамилия КАК Фамилия,
	|	Источник.ДатаРождения КАК ДатаРождения
	|ИЗ
	|	Источник КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Найдено КАК Найдено
	|		ПО Источник.НомерТелефона = Найдено.НомерТелефона
	|ГДЕ
	|	Найдено.НомерТелефона ЕСТЬ NULL"
	;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаКлиентыЧтение()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Найдено.IDC, Ведущая.IDC) КАК IDC,
	|	ЕСТЬNULL(Найдено.IDN, """") КАК IDN,
	|	ЕСТЬNULL(Найдено.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
	|	Ведущая.НомерТелефона КАК НомерТелефона,
	|	Ведущая.Имя КАК ИмяПолучено,
	|	Ведущая.Отчество КАК ОтчествоПолучено,
	|	Ведущая.Фамилия КАК ФамилияПолучено,
	|	Ведущая.ДатаРождения КАК ДатаРожденияПолучено,
	|	ЕСТЬNULL(ТаблицаФИО.Имя, Ведущая.Имя) КАК Имя,
	|	ЕСТЬNULL(ТаблицаФИО.Отчество, Ведущая.Отчество) КАК Отчество,
	|	ЕСТЬNULL(ТаблицаФИО.Фамилия, Ведущая.Фамилия) КАК Фамилия,
	|	ЕСТЬNULL(Найдено.ДатаРождения1С, Ведущая.ДатаРождения) КАК ДатаРождения,
	|	ЕСТЬNULL(ТаблицаКонтактыПочта.АдресЭП, """") КАК Электропочта,
	|	ВЫБОР
	|		КОГДА Найдено.Пол ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Найдено.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|					ТОГДА ""female""
	|				КОГДА Найдено.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|					ТОГДА ""male""
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК Пол,
	|	ЕСТЬNULL(ТаблицаРеквизиты.КлиентMagentoII, ЛОЖЬ) КАК КлиентMagentoII,
	|	ТаблицаДети.Имя КАК РебёнокИмя,
	|	ТаблицаДети.ДатаРождения КАК РебёнокДатаРождения,
	|	ВЫБОР
	|		КОГДА ТаблицаДети.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|			ТОГДА ""female""
	|		КОГДА ТаблицаДети.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|			ТОГДА ""male""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК РебёнокПол,
	|	ТаблицаДети.УникальныйИдентификатор КАК РебёнокUUID,
	|	ВЫРАЗИТЬ(ТаблицаКонтактыАдрес.ЗначенияПолей КАК СТРОКА(1000)) КАК АдресXML,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(Найдено.Контрагент КАК Справочник.Контрагенты).Блокирован, ЛОЖЬ) КАК РК_Блокирован,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(Найдено.Контрагент КАК Справочник.Контрагенты).Наименование, """") КАК РК_Наименование,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫРАЗИТЬ(Найдено.Контрагент КАК Справочник.Контрагенты).НаименованиеПолное КАК СТРОКА(1000)), """") КАК РК_НаименованиеУкраинское
	|ИЗ
	|	Источник КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Найдено КАК Найдено
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ТаблицаФИО
	|			ПО Найдено.Контрагент = ТаблицаФИО.ФизЛицо
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.Дети КАК ТаблицаДети
	|			ПО Найдено.Контрагент = ТаблицаДети.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтактыПочта
	|			ПО Найдено.Контрагент = ТаблицаКонтактыПочта.Ссылка
	|				И (ТаблицаКонтактыПочта.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагента))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтактыАдрес
	|			ПО Найдено.Контрагент = ТаблицаКонтактыАдрес.Ссылка
	|				И (ТаблицаКонтактыАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента))
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыКонтрагентов.СрезПоследних КАК ТаблицаРеквизиты
	|			ПО Найдено.Контрагент = ТаблицаРеквизиты.Контрагент
	|				И (НЕ Найдено.Контрагент = ЗНАЧЕНИЕ(справочник.Контрагенты.ПустаяСсылка))
	|		ПО Ведущая.НомерТелефона = Найдено.НомерТелефона
	|ИТОГИ
	|	МАКСИМУМ(IDC),
	|	МАКСИМУМ(IDN),
	|	МАКСИМУМ(НомерТелефона),
	|	МАКСИМУМ(ИмяПолучено),
	|	МАКСИМУМ(ОтчествоПолучено),
	|	МАКСИМУМ(ФамилияПолучено),
	|	МАКСИМУМ(ДатаРожденияПолучено),
	|	МАКСИМУМ(Имя),
	|	МАКСИМУМ(Отчество),
	|	МАКСИМУМ(Фамилия),
	|	МАКСИМУМ(ДатаРождения),
	|	МАКСИМУМ(Электропочта),
	|	МАКСИМУМ(Пол),
	|	МАКСИМУМ(КлиентMagentoII),
	|	МАКСИМУМ(АдресXML),
	|	МАКСИМУМ(РК_Блокирован),
	|	МАКСИМУМ(РК_Наименование),
	|	МАКСИМУМ(РК_НаименованиеУкраинское)
	|ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Найдено"
	;

	Возврат ТекстЗапроса;

КонецФункции

#Область АдресКлиента_Определение

//	LNK 28.04.2024 11:04:19
//СоставАдреса	Структура
//	Город	"Каролино-Бугаз"
//	ГородСокращение	""
//	Долгота	"0"
//	Дом	"11"
//	Индекс	"65020 "
//	Квартира	"41"
//	КодСтраны	"804"
//	Корпус	"А"
//	НаселенныйПункт	"Затока"
//	НаселенныйПунктСокращение	""
//	Представление	"65020, Одесская, Овидиопольский, Каролино-Бугаз, Затока, Амосова, дом № 11, корпус А, квартира 41"
//	Район	"Овидиопольский"
//	РайонСокращение	""
//	Страна	"УКРАЇНА"
//	ТипДома	"Дом"
//	ТипКвартиры	"Квартира"
//	ТипКорпуса	"Корпус"
//	Улица	"Амосова"
//	УлицаСокращение	""
//	Широта	"0"
//
Процедура УстановитьКлючиАдреса(КлиентыВыборка, ЗаписьJSON)

//	Такие поля в задаче.. совсем всё оторвано от действительности!
//	AddressName			- Название адреса доставки (только адреса по умолчанию), дом, работа и т.д.
//	AddressType			- Способ доставки, на адрес - address или на отделение - warehouse.
//	AddressOperator		- Тип почтового оператора, Новая почта - newposhta.
//	AddressCity			- Код КОАТУУ населённого пункта.
//	AddressStreet		- Название улицы и типа улицы в формате: тип улицы+ [пробел] + название улицы со справочника
//	AddressHouse		- Номер дома, включая дополнения(дробь, корпус и т.д.).
//	AddressEntrance		- Подъезд.
//	AddressFloor		- Этаж.
//	AddressFlat			- Номер квартиры.
//	AddressIntercom		- Домофон.
//	AddressElevator		- Наличие лифта, есть - 1, нет - 0.
//	AddressWarehouse	- ID почтового отделения.

	СоставАдреса = КонтактнаяИнформацияСлужебный.ПредыдущаяСтруктураКонтактнойИнформацииXML(КлиентыВыборка.АдресXML);

	ЗаписьJSON.ЗаписатьИмяСвойства("Addres");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	Если НЕ СоставАдреса.Количество() = 0 Тогда

		JSON.ЗаписатьСвойство("AddressName"		, "Actual Home Address", ЗаписьJSON);
		JSON.ЗаписатьСвойство("AddressCity"		, "", ЗаписьJSON);	//	Код КОАТУУ населённого пункта.
		JSON.ЗаписатьСвойство("AddressStreet"	, ЭлементАдреса("Улица", СоставАдреса), ЗаписьJSON);
		JSON.ЗаписатьСвойство("AddressHouse"	, ЭлементАдреса("Дом", СоставАдреса)
			+ ?(ПустаяСтрока(ЭлементАдреса("Корпус", СоставАдреса))
					, ""
					, "/" + ЭлементАдреса("Корпус", СоставАдреса))
		, ЗаписьJSON
		);
		JSON.ЗаписатьСвойство("AddressFlat"		, ЭлементАдреса("Квартира", СоставАдреса), ЗаписьJSON);
		JSON.ЗаписатьСвойство("AddressWarehouse", ЭлементАдреса("Индекс", СоставАдреса), ЗаписьJSON);

	КонецЕсли;

	ЗаписьJSON.ЗаписатьКонецОбъекта();

КонецПроцедуры

//	LNK 29.04.2024 09:10:03
Функция ЭлементАдреса(Ключ, СоставАдреса, ЗначениеПоУмолчанию = "")

	#Если _ Тогда
	СоставАдреса = Новый Структура;
	#КонецЕсли

	Если СоставАдреса.Свойство(Ключ) Тогда

			ЗначениеВозврата = СоставАдреса[Ключ];

	Иначе	ЗначениеВозврата = ЗначениеПоУмолчанию;

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции

#КонецОбласти

Функция ПолучитьТаблицуВходящихДанных(ДанныеЗапроса)

	ДанныеВходящие = Новый Структура(
		"ТаблицаКлиентов, ТаблицаДетей"
		, ПолучитьСтруктуруТаблицыКлиентов("Входящие")
		, ПолучитьСтруктуруТаблицыКлиентов("Входящие.Дети")
	);

	Для каждого Состав Из ДанныеЗапроса.Clients Цикл

		СтрокаТаблицы = ДанныеВходящие.ТаблицаКлиентов.Добавить();

		СтрокаТаблицы.IDC			= СокрЛП(Состав.IDC);
		СтрокаТаблицы.НомерТелефона = СокрЛП(Состав.ClientPhone);
		СтрокаТаблицы.ID_Parent		= СтрокаТаблицы.IDC + "#" + СтрокаТаблицы.НомерТелефона;

		СтрокаТаблицы.Имя			= СокрЛП(Состав.ClientFirstName);
		СтрокаТаблицы.Отчество		= СокрЛП(Состав.ClientMiddleName);
		СтрокаТаблицы.Фамилия		= СокрЛП(Состав.ClientLastName);

		СтрокаТаблицы.ДатаРождения	= Состав.ClientDateBorn;
		СтрокаТаблицы.Пол			= Состав.ClientGender;
		СтрокаТаблицы.Электропочта	= Состав.ClientEmail;

		Для каждого ДетиСписок Из Состав.Children Цикл

			СтрокаРебёнка	= ДанныеВходящие.ТаблицаДетей.Добавить();

			СтрокаРебёнка.ID_Parent				= СтрокаТаблицы.ID_Parent;
			СтрокаРебёнка.РебёнокUUID			= ДетиСписок.ChildId;
			СтрокаРебёнка.РебёнокИмя			= ДетиСписок.ChildFirstName;
			СтрокаРебёнка.РебёнокДатаРождения	= ДетиСписок.ChildDateBorn;
			СтрокаРебёнка.РебёнокПол			= ?(ДетиСписок.ChildGender = "female",	Перечисления.ПолФизическогоЛица.Женский,
												  ?(ДетиСписок.ChildGender = "male"  ,	Перечисления.ПолФизическогоЛица.Мужской,
																						Перечисления.ПолФизическогоЛица.ПустаяСсылка()));

		КонецЦикла;

		Если НЕ ПустаяСтрока(СтрокаТаблицы.IDC) Тогда

			Попытка

				СтрокаТаблицы.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаблицы.IDC));

			Исключение

			//	Возможную ошибку по "хреновому" IDC гасим... дальше будет поиск по телефону.
				ТекстОшибки = ОписаниеОшибки();

			КонецПопытки;

		КонецЕсли;

	КонецЦикла;

	Возврат ДанныеВходящие;

КонецФункции

//	LNK 22.05.2024 10:42:34
Функция ПолучитьСтруктуруТаблицыКлиентов(Режим, ТаблицаКлиентов = Неопределено)

	Если ТаблицаКлиентов = Неопределено Тогда

		ТаблицаКлиентов = Новый ТаблицаЗначений;

	КонецЕсли;

	Если НЕ Режим = "Дети" Тогда

		КолонкиДобавить("IDC"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)), ТаблицаКлиентов.Колонки);
		КолонкиДобавить("Контрагент"	, Новый ОписаниеТипов("СправочникСсылка.Контрагенты"), ТаблицаКлиентов.Колонки);
	//	такая длина в поле "НомерТелефона" ТЧ Контрагенты "КонтактнаяИнформация".. длиннее быть не может!
		КолонкиДобавить("НомерТелефона"	, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)), ТаблицаКлиентов.Колонки);
		КолонкиДобавить("Электропочта"	, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)), ТаблицаКлиентов.Колонки);
	//	такая длина в "РегистрыСведений.ФИОФизЛиц"
		КолонкиДобавить("Имя"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)), ТаблицаКлиентов.Колонки);
		КолонкиДобавить("Отчество"		, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)), ТаблицаКлиентов.Колонки);
		КолонкиДобавить("Фамилия"		, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)), ТаблицаКлиентов.Колонки);

		КолонкиДобавить("ДатаРождения"	, Новый ОписаниеТипов("Дата"), ТаблицаКлиентов.Колонки);
		КолонкиДобавить("Пол"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(10)), ТаблицаКлиентов.Колонки);

		КолонкиДобавить("ТекстСообщения", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(500)), ТаблицаКлиентов.Колонки);
		КолонкиДобавить("Ошибка"		, Новый ОписаниеТипов("Булево"), ТаблицаКлиентов.Колонки);

		Если Режим = "Полный" Тогда

			КолонкиДобавить("Дети"		, Новый ОписаниеТипов("ТаблицаЗначений"), ТаблицаКлиентов.Колонки);

		ИначеЕсли Режим = "Входящие" Тогда

			КолонкиДобавить("ID_Parent"				, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(60)), ТаблицаКлиентов.Колонки);

		ИначеЕсли Режим = "Входящие.Дети" Тогда

			КолонкиДобавить("ID_Parent"				, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(60)), ТаблицаКлиентов.Колонки);
			КолонкиДобавить("РебёнокUUID"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)), ТаблицаКлиентов.Колонки);
			КолонкиДобавить("РебёнокИмя"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)), ТаблицаКлиентов.Колонки);
			КолонкиДобавить("РебёнокДатаРождения"	, Новый ОписаниеТипов("Дата"), ТаблицаКлиентов.Колонки);
			КолонкиДобавить("РебёнокПол"			, Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическогоЛица") , ТаблицаКлиентов.Колонки);

			ТаблицаКлиентов.Индексы.Добавить("ID_Parent");

		КонецЕсли;

	Иначе	//	Дети!

		КолонкиДобавить("РебёнокUUID"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)), ТаблицаКлиентов.Колонки);
		КолонкиДобавить("РебёнокИмя"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)), ТаблицаКлиентов.Колонки);
		КолонкиДобавить("РебёнокДатаРождения"	, Новый ОписаниеТипов("Дата"), ТаблицаКлиентов.Колонки);
		КолонкиДобавить("РебёнокПол"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(10)), ТаблицаКлиентов.Колонки);

	КонецЕсли;

	Возврат ТаблицаКлиентов;

КонецФункции

#КонецОбласти

//2024-08-05 sa договорились переделать веб-сервисы на http-сервисы.
Функция СформироватьHTTPОтвет(ТекстОтвета)
	HTTPОтвет = Новый HTTPСервисОтвет(200);	//	"боевой" вариант
	HTTPОтвет.Заголовки.Вставить("Content-Type"	, "application/json; text/plain; charset=utf-8");
	HTTPОтвет.Заголовки.Вставить("ErrorStatus"	, "");
	HTTPОтвет.Заголовки.Вставить("ErrorMessage"	, "");
	HTTPОтвет.УстановитьТелоИзСтроки(ТекстОтвета);

	Возврат HTTPОтвет;
КонецФункции

#Область КомплексПроцедуры_GetBuyerBonusInfo
//	LNK 11.10.2021 05:48:25
Функция GetBuyerBonusInfo(RequestData)
	
	Command = "rest";
	
	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;	//	LNK 18.09.2022 05:33:57

	КонтекстПриложения.РегистрацияВыполненияHttpСервиса("Magento", "GetBuyerBonusInfo", Command);
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\GetBuyerBonusInfo\" + Command, "in", RequestData, Истина);

	СоставОшибки = Новый Структура("Ошибка, ОписаниеОшибки", Ложь, "");

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(RequestData);
	ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON, Ложь,,, "ПолучитьДатуОтMagento", ОбменMagentoСервер,, ОбменMagentoСервер.ИменаТипаДата());

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	JSON.ЗаписатьСвойство("IDBASE", Константы.ИдентификаторУчетнойСистемы.Получить(), ЗаписьJSON);
	JSON.ЗаписатьСвойство("Number_PackMGT", -1, ЗаписьJSON);
	JSON.ЗаписатьСвойство("DIFF", СокрЛП(Новый УникальныйИдентификатор), ЗаписьJSON);

	ЗаписьJSON.ЗаписатьИмяСвойства("Clients");

	ЗаписьJSON.ЗаписатьНачалоМассива();

	Попытка

	//	Инициализируем пользователя административной учетной записью.
		ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.АдминистраторАвтоматов;

		Если Command = "rest" Тогда

			ТаблицаВнешняя = ОбменMagentoСлужебный.ИнициализацияТаблицыКонтрагентовДляВнешнихДанных();

			НомерСтроки = 0;

			Для каждого ДанныеВнешние Из ДанныеЗапроса.Clients Цикл

				НомерСтроки = НомерСтроки + 1;
				
				СтрокаВнешняя = ТаблицаВнешняя.Добавить();
				СтрокаВнешняя.НомерСтроки = НомерСтроки;
				СтрокаВнешняя.НомерТелефона	= ДанныеВнешние.phoneNumber;

			КонецЦикла;

			Справочники.Контрагенты.НайтиКонтрагентовПоСпискуMagento(ТаблицаВнешняя);

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Таблица.НомерСтроки КАК НомерСтроки,
			|	ВЫРАЗИТЬ(Таблица.Контрагент КАК Справочник.Контрагенты) КАК Контрагент
			|ПОМЕСТИТЬ ТаблицаВнешняя
			|ИЗ
			|	&ТаблицаВнешняя КАК Таблица
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаБонусныеБаллы.Контрагент КАК Контрагент,
			|	СУММА(ТаблицаБонусныеБаллы.СуммаБонусныхБаллов) КАК СуммаБонусныхБаллов
			|ПОМЕСТИТЬ ДанныеБонусов
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТаблицаАктивные.Контрагент КАК Контрагент,
			|		ТаблицаАктивные.СуммаБонусныхБалловОстаток КАК СуммаБонусныхБаллов
			|	ИЗ
			|		РегистрНакопления.БонусныеБаллы.Остатки(
			|				&ТекущаяДата,
			|				Контрагент В
			|					(ВЫБРАТЬ
			|						ТаблицаВнешняя.Контрагент КАК Контрагент
			|					ИЗ
			|						ТаблицаВнешняя КАК ТаблицаВнешняя)) КАК ТаблицаАктивные
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ТаблицаБлокировано.Контрагент,
			|		ВЫБОР
			|			КОГДА ТаблицаБлокировано.СуммаБонусныхБалловОстаток > 0
			|				ТОГДА -ТаблицаБлокировано.СуммаБонусныхБалловОстаток
			|			ИНАЧЕ 0
			|		КОНЕЦ
			|	ИЗ
			|		РегистрНакопления.БонусныеБаллыПоЗаказамПокупателей.Остатки(
			|				&ТекущаяДата,
			|				Контрагент В
			|					(ВЫБРАТЬ
			|						ТаблицаВнешняя.Контрагент КАК Контрагент
			|					ИЗ
			|						ТаблицаВнешняя КАК ТаблицаВнешняя)) КАК ТаблицаБлокировано) КАК ТаблицаБонусныеБаллы
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаБонусныеБаллы.Контрагент
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаВнешняя.НомерСтроки КАК НомерСтроки,
			|	ТаблицаВнешняя.Контрагент КАК Контрагент,
			|	ЕСТЬNULL(ТаблицаДоступно.СуммаБонусныхБаллов, 0) КАК СуммаБонусныхБалловАктивно,
			|	ЕСТЬNULL(ТаблицаРезервы.СуммаБонусныхБалловОстаток, 0) КАК СуммаБонусныхБалловРезерв,
			|	ЕСТЬNULL(ТаблицаПродажи.СуммаОстаток, 0) КАК СуммаПокупок
			|ИЗ
			|	ТаблицаВнешняя КАК ТаблицаВнешняя
			|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеБонусов КАК ТаблицаДоступно
			|		ПО ТаблицаВнешняя.Контрагент = ТаблицаДоступно.Контрагент
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БонусныеБаллыВРезерве.Остатки(
			|				&ТекущаяДата,
			|				Контрагент В
			|					(ВЫБРАТЬ
			|						ТаблицаВнешняя.Контрагент КАК Контрагент
			|					ИЗ
			|						ТаблицаВнешняя КАК ТаблицаВнешняя)) КАК ТаблицаРезервы
			|		ПО ТаблицаВнешняя.Контрагент = ТаблицаРезервы.Контрагент
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(
			|				&ТекущаяДата,
			|				ВладелецДисконтнойКарты В
			|					(ВЫБРАТЬ
			|						ТаблицаВнешняя.Контрагент КАК Контрагент
			|					ИЗ
			|						ТаблицаВнешняя КАК ТаблицаВнешняя)) КАК ТаблицаПродажи
			|		ПО ТаблицаВнешняя.Контрагент = ТаблицаПродажи.ВладелецДисконтнойКарты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ТаблицаВнешняя
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ДанныеБонусов"
			);
			Запрос.УстановитьПараметр("ТекущаяДата"		, ТекущаяДата());
			Запрос.УстановитьПараметр("ТаблицаВнешняя"	, ТаблицаВнешняя);
			
			ДанныеВыборка = Запрос.Выполнить().Выбрать();
			
			Пока ДанныеВыборка.Следующий() Цикл

				ЗаписьJSON.ЗаписатьНачалоОбъекта();

				СтрокаВнешняя = ТаблицаВнешняя.Найти(ДанныеВыборка.НомерСтроки, "НомерСтроки");

				JSON.ЗаписатьСвойство("IDC"				, ОбменMagentoСлужебный.IDC_Строкой(ДанныеВыборка.Контрагент), ЗаписьJSON);
				JSON.ЗаписатьСвойство("phoneNumber"		, СтрокаВнешняя.НомерТелефона, ЗаписьJSON);
				JSON.ЗаписатьСвойство("BonusesActive"	, ДанныеВыборка.СуммаБонусныхБалловАктивно, ЗаписьJSON);
				JSON.ЗаписатьСвойство("BonusesReserved"	, ДанныеВыборка.СуммаБонусныхБалловРезерв, ЗаписьJSON);
				JSON.ЗаписатьСвойство("AmountPurchases"	, ДанныеВыборка.СуммаПокупок, ЗаписьJSON);

				Если НЕ ПустаяСтрока(СтрокаВнешняя.ОписаниеОшибки) Тогда

					JSON.ЗаписатьСвойство("ErrorMessage", СтрокаВнешняя.ОписаниеОшибки, ЗаписьJSON);

				КонецЕсли;

				ЗаписьJSON.ЗаписатьКонецОбъекта();

			КонецЦикла;

		Иначе

			ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
				, "невідома команда [" + Command + "] для сервісу (наразі можуть бути оброблені команди: 'rest')"
				, СоставОшибки.Ошибка
			);

		КонецЕсли;

	Исключение

		СоставОшибки.СтатусОшибки = "SYS_ERROR";
		ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
			, "[SYS]: " + ОписаниеОшибки()
			, СоставОшибки.Ошибка
		);

	КонецПопытки;

	ЗаписьJSON.ЗаписатьКонецМассива();

	JSON.ЗаписатьСвойство("Error", JSON.БулевоКакЧисло(СоставОшибки.Ошибка), ЗаписьJSON);
	JSON.ЗаписатьСвойство("ErrorMessage", СоставОшибки.ОписаниеОшибки, ЗаписьJSON);

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	ТекстJSON = ЗаписьJSON.Закрыть();
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\GetBuyerBonusInfo\" + Command, "out", ТекстJSON, Истина);

	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;	//	LNK 18.09.2022 05:34:31
	

	
	Возврат ТекстJSON;

КонецФункции

#КонецОбласти

#Область КомплексПроцедуры_GetBuyerInfo

Функция GetBuyerInfo(RequestData)	//	LNK 03.10.2018 11:10:54

	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;	//	LNK 18.09.2022 05:33:57

	КонтекстПриложения.РегистрацияВыполненияHttpСервиса("Magento", "GetBuyerInfo", RequestData);
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\GetBuyerInfo\", RequestData, Истина);

//	Инициализируем пользователя административной учетной записью.
	ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.АдминистраторАвтоматов;

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(RequestData);
	
	Параметры = ПараметрыИзОбъектаXDTO(ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON), "identifier:строка, idtype:строка, mode:строка");

	ДанныеВозврата = Новый Структура(
		"Код, Наименование, Блокирован, ДатаРождения, СуммаНакоплений, НомерТелефона, КартыДисконта"
		, ""
		, ""
		, Ложь
		, '00010101'
		, 0
		, ""
		, Новый ТаблицаЗначений		
	);
	ДанныеВозврата.КартыДисконта.Колонки.Добавить("НомерКарты");
	ДанныеВозврата.КартыДисконта.Колонки.Добавить("Город");
	ДанныеВозврата.КартыДисконта.Колонки.Добавить("СуммаНакоплений");

	Если Параметры.idtype = "phone" Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаКонтакты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтакты
		|ГДЕ
		|	ТаблицаКонтакты.НомерТелефона В(&СписокНомеров)
		|	И ТаблицаКонтакты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)"
		);
		Запрос.УстановитьПараметр("СписокНомеров", КонтактнаяИнформацияСлужебный.ПолучитьВариантыНомераТелефона(СокрЛП(Параметры.identifier)));
		
		СписокКонтрагенты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");

	ИначеЕсли Параметры.idtype = "cardnumber" Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСправочник.ВладелецКарты КАК Контрагент
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ТаблицаСправочник
		|ГДЕ
		|	ТаблицаСправочник.ВладелецКарты ССЫЛКА Справочник.Контрагенты
		|			И ТаблицаСправочник.КодКарты = &КодКарты
		|	И НЕ(ТаблицаСправочник.Блокирован
		|				ИЛИ ТаблицаСправочник.ПометкаУдаления)"
		);
		Запрос.УстановитьПараметр("НомерКарты", СокрЛП(Параметры.identifier));
		
		СписокКонтрагенты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");

	Иначе

		СписокКонтрагенты = Новый Массив;

	КонецЕсли;

	Если НЕ СписокКонтрагенты.Количество() = 0 Тогда

		Если СписокКонтрагенты.Количество() > 1 Тогда

			Если Параметры.mode = "lastpurchase" Тогда

				Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ТаблицаПродажи.Период КАК Период,
				|	ТаблицаПродажи.Регистратор КАК Регистратор,
				|	ТаблицаПродажи.ВладелецДисконтнойКарты КАК Контрагент
				|ИЗ
				|	РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(
				|			,
				|			,
				|			Регистратор,
				|			ВладелецДисконтнойКарты ССЫЛКА Справочник.Контрагенты
				|				И ВладелецДисконтнойКарты В (&СписокКонтрагенты)) КАК ТаблицаПродажи
				|
				|УПОРЯДОЧИТЬ ПО
				|	Период УБЫВ,
				|	Регистратор УБЫВ"
				);
				Запрос.УстановитьПараметр("СписокКонтрагенты", СписокКонтрагенты);
				
				Результат = Запрос.Выполнить();

			//	Но тут контрагента(ов) может и не оказаться.. мало-ли, не было продаж (или продажа и возврат - в эту таблицу не попадет)!
			//	Поэтому второй вариант <Параметры.mode = "maximum"> отрабатывается ниже
			//	в любом виде вариантов, но, когда клиентов больше одного.

				Если НЕ Результат.Пустой() Тогда

					Выборка = Результат.Выбрать();
					Выборка.Следующий();

					СписокКонтрагенты = Новый Массив;
					СписокКонтрагенты.Добавить(Выборка.Контрагент);

				КонецЕсли;

			КонецЕсли;

			Если СписокКонтрагенты.Количество() > 1 Тогда

				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ТаблицаНакоплений.Контрагент КАК Контрагент,
				|	ТаблицаНакоплений.СуммаНакоплений КАК СуммаНакоплений
				|ИЗ
				|	(ВЫБРАТЬ
				|		ТаблицаНакоплений.ВладелецДисконтнойКарты КАК Контрагент,
				|		СУММА(ТаблицаНакоплений.СуммаОстаток) КАК СуммаНакоплений
				|	ИЗ
				|		РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(
				|				,
				|				ВладелецДисконтнойКарты ССЫЛКА Справочник.Контрагенты
				|					И ВладелецДисконтнойКарты В (&СписокКонтрагенты)) КАК ТаблицаНакоплений
				|	
				|	СГРУППИРОВАТЬ ПО
				|		ТаблицаНакоплений.ВладелецДисконтнойКарты) КАК ТаблицаНакоплений
				|
				|УПОРЯДОЧИТЬ ПО
				|	СуммаНакоплений УБЫВ"
				);
				Запрос.УстановитьПараметр("СписокКонтрагенты", СписокКонтрагенты);

				Результат = Запрос.Выполнить();

				Если НЕ Результат.Пустой() Тогда

					Выборка = Результат.Выбрать();
					Выборка.Следующий();

					СписокКонтрагенты = Новый Массив;
					СписокКонтрагенты.Добавить(Выборка.Контрагент);

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	//	Итоговый запрос, возвращающий все данные по выбранному контрагенту.

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаКонтрагенты.Код КАК Код,
		|	ТаблицаКонтрагенты.Наименование КАК Наименование,
		|	ТаблицаКонтрагенты.Блокирован КАК Блокирован,
		|	ТаблицаКонтрагенты.ДатаРождения КАК ДатаРождения,
		|	ТаблицаКарты.КодКарты КАК НомерКарты,
		|	ЕСТЬNULL(ТаблицаНакоплений.СуммаОстаток, 0) КАК СуммаНакоплений,
		|	ЕСТЬNULL(ТаблицаКарты.Магазин.Город.Наименование, """") КАК Город
		|ИЗ
		|	Справочник.Контрагенты КАК ТаблицаКонтрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ТаблицаКарты
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(
		|					,
		|					ВладелецДисконтнойКарты ССЫЛКА Справочник.Контрагенты
		|						И ВладелецДисконтнойКарты = &Контрагент) КАК ТаблицаНакоплений
		|			ПО ТаблицаКарты.Ссылка = ТаблицаНакоплений.ДисконтнаяКарта
		|		ПО (ТаблицаКарты.ВладелецКарты ССЫЛКА Справочник.Контрагенты)
		|			И ТаблицаКонтрагенты.Ссылка = ТаблицаКарты.ВладелецКарты
		|			И (НЕ(ТаблицаКарты.ПометкаУдаления
		|					ИЛИ ТаблицаКарты.Блокирован))
		|ГДЕ
		|	ТаблицаКонтрагенты.Ссылка = &Контрагент
		|ИТОГИ
		|	МАКСИМУМ(Код),
		|	МАКСИМУМ(Наименование),
		|	МАКСИМУМ(Блокирован),
		|	МАКСИМУМ(ДатаРождения),
		|	СУММА(СуммаНакоплений)
		|ПО
		|	НомерКарты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаКонтакты.НомерТелефона КАК НомерТелефона
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтакты
		|ГДЕ
		|	ТаблицаКонтакты.Ссылка = &Контрагент
		|	И ТаблицаКонтакты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)"
		);
		Запрос.УстановитьПараметр("Контрагент", СписокКонтрагенты[0]);
		
		Результаты = Запрос.ВыполнитьПакет();
		Запрос     = Неопределено;

		ОбщаяВыборка = Результаты[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ОбщаяВыборка.Следующий();

		ДанныеВозврата.Код = СокрЛП(ОбщаяВыборка.Код);
		ДанныеВозврата.Наименование = СокрЛП(ОбщаяВыборка.Наименование);
		ДанныеВозврата.Блокирован   = ОбщаяВыборка.Блокирован;
		ДанныеВозврата.ДатаРождения = ОбщаяВыборка.ДатаРождения;

		КартыВыборка = ОбщаяВыборка.Выбрать();

		Пока КартыВыборка.Следующий() Цикл

			Если НЕ ЗначениеЗаполнено(КартыВыборка.СуммаНакоплений) Тогда

				Продолжить;

			КонецЕсли;

			СтрокаТаблицы = ДанныеВозврата.КартыДисконта.Добавить();
			СтрокаТаблицы.НомерКарты = СокрЛП(КартыВыборка.НомерКарты);
			СтрокаТаблицы.Город      = КартыВыборка.Город;
			СтрокаТаблицы.СуммаНакоплений = КартыВыборка.СуммаНакоплений;

			ДанныеВозврата.СуммаНакоплений = ДанныеВозврата.СуммаНакоплений + КартыВыборка.СуммаНакоплений;

		КонецЦикла;

		Если НЕ Результаты[1].Пустой() Тогда

			ОбщаяВыборка = Результаты[1].Выбрать();
			ОбщаяВыборка.Следующий();

			ДанныеВозврата.НомерТелефона = СокрЛП(ОбщаяВыборка.НомерТелефона);

		КонецЕсли;

	КонецЕсли;

//	Формируем структуру возвращаемой информации
//	---------------------------------------------------------------------------------------
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	ЗаписьJSON.ЗаписатьИмяСвойства("code");
	ЗаписьJSON.ЗаписатьЗначение(ДанныеВозврата.Код);

	ЗаписьJSON.ЗаписатьИмяСвойства("fullname");
	ЗаписьJSON.ЗаписатьЗначение(ДанныеВозврата.Наименование);

	ЗаписьJSON.ЗаписатьИмяСвойства("blocked");
	ЗаписьJSON.ЗаписатьЗначение(?(ДанныеВозврата.Блокирован, 1, 0));

	ЗаписьJSON.ЗаписатьИмяСвойства("dateofbirth");
	ЗаписьJSON.ЗаписатьЗначение(Формат(ДанныеВозврата.ДатаРождения, "ДФ=dd.MM.yyyy"));

	ЗаписьJSON.ЗаписатьИмяСвойства("phonenumber");
	ЗаписьJSON.ЗаписатьЗначение(ДанныеВозврата.НомерТелефона);

	ЗаписьJSON.ЗаписатьИмяСвойства("summa");
	ЗаписьJSON.ЗаписатьЗначение(ДанныеВозврата.СуммаНакоплений);

	ЗаписьJSON.ЗаписатьИмяСвойства("cardinfo");

		ЗаписьJSON.ЗаписатьНачалоМассива();

		Для каждого СтрокаТаблицы Из ДанныеВозврата.КартыДисконта Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();
				ЗаписьJSON.ЗаписатьИмяСвойства("cardnumber");	ЗаписьJSON.ЗаписатьЗначение(СтрокаТаблицы.НомерКарты);
				ЗаписьJSON.ЗаписатьИмяСвойства("summa");		ЗаписьJSON.ЗаписатьЗначение(СтрокаТаблицы.СуммаНакоплений);
				ЗаписьJSON.ЗаписатьИмяСвойства("city");			ЗаписьJSON.ЗаписатьЗначение(СтрокаТаблицы.Город);
			ЗаписьJSON.ЗаписатьКонецОбъекта();

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;	//	LNK 18.09.2022 05:34:31

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

#КонецОбласти


#Область КомплексПроцедуры_GetRegisteredBalances
//	LNK 23.04.2022 06:45:54
Функция GetRegisteredBalances(RequestData)

	Перем ДанныеЗапроса;	//	чтобы всегда существовала

	УстановитьПривилегированныйРежим(Истина);

	КонтекстПриложения.РегистрацияВыполненияHttpСервиса("Magento", "GetRegisteredBalances");
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\GetRegisteredBalances", "in", RequestData, Истина);

	СоставОшибки = Новый Структура("Ошибка, КодОшибки, ОписаниеОшибки", Ложь, "", "");

	Если ОбменMagentoПовтИсп.ОбменАктивен() Тогда

		Попытка

			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(RequestData);
			ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON, Ложь,,, "ПолучитьДатуОтMagento", ОбменMagentoСервер,, ОбменMagentoСервер.ИменаТипаДата());

			ПодниматьНомер = (ДанныеЗапроса.Command = "get_reg_data");	//	LNK 06.05.2022 07:15:13
			УзелОбъект = ОбменMagentoПовтИсп.ПолучитьАктивныйУзел(Истина);

			Если НЕ УзелОбъект = Неопределено Тогда

				#Если _ Тогда
				УзелОбъект = ПланыОбмена.ОбменРозницаMagento.СоздатьУзел();
				#КонецЕсли

				Попытка

					Если ПодниматьНомер Тогда

						ДанныеПротокола = ОбменMagentoСервер.ВыполнитьПолнуюРегистрацию_ПротоколПолучить();
					//	ДанныеПротокола = ВыполнитьПолнуюРегистрацию_ПротоколПолучить();

						Если НЕ(ПустаяСтрока(ДанныеПротокола.Статус) ИЛИ ДанныеПротокола.Статус = "PROC:End") Тогда

							СоставОшибки.Ошибка			= Истина;
							СоставОшибки.КодОшибки		= "NO_BLOCK_NODE";
							СоставОшибки.ОписаниеОшибки = "Полная регистрация не завершена:" + ДанныеПротокола.Статус;

						ИначеЕсли ДанныеЗапроса.Number_PackMGT < УзелОбъект.НомерОтправленного Тогда

						//	Меньшие номера сообщений НЕ принимаем.
							СоставОшибки.Ошибка			= Истина;
							СоставОшибки.КодОшибки		= "BAD_MESSAGE_NUMBER";
							СоставОшибки.ОписаниеОшибки = "Номер сообщения уже обрабатывался: " + ДанныеЗапроса.Number_PackMGT;

						КонецЕсли;

					КонецЕсли;

					Если НЕ СоставОшибки.Ошибка = Истина Тогда

						Если НЕ (ДанныеЗапроса.Command = "get_sku_list") Тогда

							УзелОбъект.Заблокировать();

						КонецЕсли;

						Если ПодниматьНомер Тогда

						//	сразу увеличим счётчик узла:
							УзелОбъект.НомерОтправленного = УзелОбъект.НомерОтправленного + 1;

						КонецЕсли;

						ЗаписьJSON = ОбменMagentoСервер.СоздатьJSON(?(ПодниматьНомер, УзелОбъект.НомерОтправленного, -1), ДанныеЗапроса);

						Если ДанныеЗапроса.Command = "full_registration" Тогда

							ДанныеЗапроса.Вставить("IDP", СокрЛП(Новый УникальныйИдентификатор));

							Попытка

								СоставОшибки.ОписаниеОшибки = "Процесс регистрации выполняется. Предполагаемое время - в пределах 60 минут.";
							//	Выполнить полную регистрацию всех товарных остатков и резервов по заказам покупателей.

								Если Истина Тогда	//	рабочий вариант

									ПараметрыЗадания = Новый Массив;
									ПараметрыЗадания.Добавить(УзелОбъект.Ссылка);
									ПараметрыЗадания.Добавить(ДанныеЗапроса);
									ПараметрыЗадания.Добавить(СоставОшибки);
									ФоновыеЗадания.Выполнить("ОбменMagentoСервер.ВыполнитьПолнуюРегистрациюТоварногоСостояния"
										, ПараметрыЗадания
										, "MAGENTO_FULL_REGISTRATION"
										, "MAGENTO_FULL_REGISTRATION"
									);

								Иначе

									УзелОбъект.Разблокировать();	//	отладочный момент, так как в процедуре ниже опять будет блокировка
									ОбменMagentoСервер.ВыполнитьПолнуюРегистрациюТоварногоСостояния(УзелОбъект.Ссылка, ДанныеЗапроса, СоставОшибки);
								//	ВыполнитьПолнуюРегистрациюТоварногоСостояния(УзелОбъект.Ссылка, ДанныеЗапроса, СоставОшибки);

								КонецЕсли;

								JSON.ЗаписатьСвойство("IDP", ДанныеЗапроса.IDP, ЗаписьJSON);

							Исключение

								СоставОшибки.Ошибка			= Истина;
								СоставОшибки.КодОшибки		= "NO_REGISTRATION";
								СоставОшибки.ОписаниеОшибки = "Регистрация не выполнена:" + Символы.ПС + ОписаниеОшибки();

							КонецПопытки;

						Иначе

							ОбменMagentoСервер.ВыполнитьВыгрузкуИзмененийВУзелMagento(УзелОбъект, ДанныеЗапроса, ЗаписьJSON, СоставОшибки);
						//	ВыполнитьВыгрузкуИзмененийВУзелMagento(УзелОбъект, ДанныеЗапроса, ЗаписьJSON, СоставОшибки);

						КонецЕсли;

						Если ПодниматьНомер Тогда

							УзелОбъект.Записать();

						КонецЕсли;

						Если УзелОбъект.Заблокирован() Тогда

							УзелОбъект.Разблокировать();

						КонецЕсли;

					КонецЕсли;

				Исключение

					СоставОшибки.Ошибка			= Истина;
					СоставОшибки.КодОшибки		= "BLOCK_NODE_ERROR";
					СоставОшибки.ОписаниеОшибки = "Не удалось заблокировать объект [" + УзелОбъект.Код + "]!";

				КонецПопытки;

			Иначе

				СоставОшибки.Ошибка			= Истина;
				СоставОшибки.КодОшибки		= "";
				СоставОшибки.ОписаниеОшибки = "Не назначен активный узел обмена с внешней системой!";

			КонецЕсли;

			Если ЗаписьJSON = Неопределено Тогда

				ЗаписьJSON = ОбменMagentoСервер.СоздатьJSON(, ДанныеЗапроса);

			КонецЕсли;

		//	Оставляем возможность сообщения об ошибке не только системной, но и ошибке в данных..
		//	Например, номер сообщения какой "левый"
			JSON.ЗаписатьСвойство("Error", JSON.БулевоКакЧисло(СоставОшибки.Ошибка), ЗаписьJSON);
			JSON.ЗаписатьСвойство("ErrorCode", СоставОшибки.КодОшибки, ЗаписьJSON);
			JSON.ЗаписатьСвойство("ErrorMessage", СоставОшибки.ОписаниеОшибки, ЗаписьJSON);

		Исключение

			СоставОшибки.Ошибка			= Истина;
			СоставОшибки.КодОшибки		= "SYSTEM_ERROR";
			СоставОшибки.ОписаниеОшибки = ОписаниеОшибки();

			ЗаписьJSON = ОбменMagentoСервер.СоздатьJSON(, ДанныеЗапроса, СоставОшибки);

		КонецПопытки;

	Иначе

		СоставОшибки.Ошибка			= Истина;
		СоставОшибки.КодОшибки		= "NO_ACTIVE_NODE";
		СоставОшибки.ОписаниеОшибки = "Обмен с Magento НЕ активен (отсутствует узел назначения)";

		ЗаписьJSON = ОбменMagentoСервер.СоздатьJSON(, ДанныеЗапроса, СоставОшибки);

	КонецЕсли;

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	ТекстJSON = ЗаписьJSON.Закрыть();
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\GetRegisteredBalances", "out", ТекстJSON, Истина);
	
	Возврат ТекстJSON;

КонецФункции

#КонецОбласти


#Область КомплексПроцедуры_GetDistributedBonus
Функция GetDistributedBonus(RequestData)	//	LNK 06.11.2021 05:35:13

	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;	//	LNK 18.09.2022 05:33:57

	КонтекстПриложения.РегистрацияВыполненияHttpСервиса("Magento", "GetDistributedBonus", RequestData);
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\GetDistributedBonus", "in", RequestData, Истина);

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(RequestData);
	ДанныеЗапроса = УточнитьДанныеВнешнегоЗапроса(
		ПрочитатьJSON(ЧтениеJSON, Ложь,,, "ПолучитьДатуОтMagento", ОбменMagentoСервер,, ОбменMagentoСервер.ИменаТипаДата())
	);

	СоставОшибки	= Новый Структура("Отказ, СтатусОшибки, ОписаниеОшибки, УжеОформлен", Ложь, "", "", Ложь);
	УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	JSON.ЗаписатьСвойство("IDBASE", Константы.ИдентификаторУчетнойСистемы.Получить(), ЗаписьJSON);
	JSON.ЗаписатьСвойство("Number_PackMGT", 1, ЗаписьJSON);
	JSON.ЗаписатьСвойство("DIFF", СокрЛП(Новый УникальныйИдентификатор), ЗаписьJSON);

	Попытка

	//	Инициализируем пользователя административной учетной записью.
		ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.АдминистраторАвтоматов;

	//	ДокументОбъект = ПолучитьДокументMagento(ДанныеЗапроса.OrderData, "ЧекККМ", Истина, УчетнаяПолитика, СоставОшибки);
		ДокументОбъект = ОбменMagentoСервер.ПолучитьДокументMagento(ДанныеЗапроса.OrderData, "ЧекККМ", Истина, УчетнаяПолитика, СоставОшибки);
		#Если _ Тогда
		ДокументОбъект = Документы.ЧекККМ.СоздатьДокумент();
		#КонецЕсли

		ПараметрыРаспределения = Новый Структура(
			"СуммаБонусныхБалловДляПогашения, ТоварыДляОплаты"
			, Мин(ДанныеЗапроса.OrderData.SummaBonusPay, ДокументОбъект.Товары.Итог("СуммаВсего"))
			, БонусныеБаллыВызовСервера.ПолучитьТаблицуТоварыДляОплаты(ДокументОбъект.Товары, Новый Структура, УчетнаяПолитика)
			, Истина
		);
		
		ПараметрыЗапроса = Новый Структура(
			"Магазин, ТоварыДляОплаты, ПрограммаЛояльности, ТипыБонусов, ТолькоТекущийОстаток"
			, ДокументОбъект.Магазин
			, ПараметрыРаспределения.ТоварыДляОплаты
			,
			, ОбщегоНазначенияКлиентСервер.AAD(Перечисления.ТипыБонусов.Привлечение, Перечисления.ТипыБонусов.Органический)
			, Истина
		);

		ДанныеРаспределения = БонусныеБаллыВызовСервера.РаспределитьСуммуБонусныхБаллов(ДокументОбъект
			, "Товары"
			, БонусныеБаллыСервер.BPS_ПолучитьОстаткиИДвиженияБонусныхБаллов(ДокументОбъект.ВладелецДисконтнойКарты, ПараметрыЗапроса)
			, ПараметрыРаспределения
		);
		БонусныеБаллыВызовСервера.ПрименитьРезультатыРаспределенияОплатыБонуснымиБалламиКОбъекту(ДокументОбъект, "Товары", "ОплатаБонуснымиБаллами", ДанныеРаспределения);

		Если НЕ ДокументОбъект.ОплатаБонуснымиБаллами.Количество() = 0 Тогда

			БонусныеБаллыВызовСервера.ПересчитатьНачислениеБонусныхБаллов(ДокументОбъект);

		КонецЕсли;

		ЗаписатьРасчётСкидкиВJSON(ДокументОбъект, ЗаписьJSON);

	Исключение

		СоставОшибки.СтатусОшибки = "SYS_ERROR";
		ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
			, "[SYS]: " + ОписаниеОшибки()
			, СоставОшибки.Отказ
		);

	КонецПопытки;

	JSON.ЗаписатьСвойство("Error"		, JSON.БулевоКакЧисло(СоставОшибки.Отказ), ЗаписьJSON);
	JSON.ЗаписатьСвойство("ErrorMessage", СоставОшибки.ОписаниеОшибки, ЗаписьJSON);
	JSON.ЗаписатьСвойство("ErrorType"	, СоставОшибки.СтатусОшибки, ЗаписьJSON);

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	ТекстJSON = ЗаписьJSON.Закрыть();
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\GetDistributedBonus", "out", ТекстJSON, Истина);

	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;	//	LNK 18.09.2022 05:34:31

	Возврат ТекстJSON;

КонецФункции
#КонецОбласти

#Область КомплексПроцедуры_GetBuyerExtendedInfo

//	Параметры:
//	RequestData	- текст JSON, содержащий массив ключевых данных клиентов.
//		Образец текста:
//		{"Clients":[{"phoneNumber":"380662028207","email":"juliafrsv@gmail.com","IDC":"","IDMGT":"","EDRPOU":null,"Last_Name":null,"First_Name":"\u042e\u043b\u0456\u044f","Middle_Name":null,"Date_Born":"","Gender":"","Blocked":1,"childs":[]}]}
//
Функция GetBuyerExtendedInfo(RequestData)	//	LNK 27.09.2022 08:12:07

	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;	//	LNK 18.09.2022 05:33:57

	КонтекстПриложения.РегистрацияВыполненияHttpСервиса("Magento", "GetBuyerExtendedInfo", RequestData);
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\GetBuyerExtendedInfo", "in", RequestData, Истина);

	СоставОшибки = Новый Структура("Отказ, СтатусОшибки, ОписаниеОшибки, УжеОформлен", Ложь, "", "", Ложь);
	ДанныеОтвета = Новый Структура(
		"IDBASE, Number_PackMGT, DIFF, Clients, Error, ErrorMessage, ErrorType"
		, Константы.ИдентификаторУчетнойСистемы.Получить()
		, 1
		, СокрЛП(Новый УникальныйИдентификатор)
		, Новый Массив
		, Ложь
		, ""
		, ""
	);

	Попытка

		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(RequestData);
		ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON, Ложь,,, "ПолучитьДатуОтMagento", ОбменMagentoСервер,, ОбменMagentoСервер.ИменаТипаДата());

		Попытка

		//	Инициализируем пользователя административной учетной записью.
			ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.АдминистраторАвтоматов;

			ТаблицаВнешняя = ОбменMagentoСлужебный.ИнициализацияТаблицыКонтрагентовДляВнешнихДанных();

			НомерСтроки = 0;

			Для каждого ДанныеВнешние Из ДанныеЗапроса.Clients Цикл

				НомерСтроки = НомерСтроки + 1;
				
				СтрокаВнешняя = ТаблицаВнешняя.Добавить();
				СтрокаВнешняя.НомерСтроки = НомерСтроки;
				СтрокаВнешняя.ДанныеКонтрагента = ОбменMagentoСервер.ЗаполнитьСтруктуруПоВнешнимДанным(, ДанныеВнешние);
				СтрокаВнешняя.IDC = СтрокаВнешняя.ДанныеКонтрагента.КОДЫ.IDC;
				СтрокаВнешняя.НомерТелефона	= СтрокаВнешняя.ДанныеКонтрагента.КОНТАКТЫ.НомерТелефона;
				СтрокаВнешняя.Email			= СтрокаВнешняя.ДанныеКонтрагента.КОНТАКТЫ.Email;

			КонецЦикла;

			Справочники.Контрагенты.НайтиКонтрагентовПоСпискуMagento(ТаблицаВнешняя);

			Для каждого СтрокаВнешняя Из ТаблицаВнешняя Цикл

				Если НЕ ПустаяСтрока(СтрокаВнешняя.НомерТелефона) И СтрДлина(СтрокаВнешняя.НомерТелефона) = 12 Тогда

					Попытка

					//	фиксация полученных данных или создание нового элемента справочника.
						Справочники.Контрагенты.ПрименитьКонтрагентаПоДаннымMagento(СтрокаВнешняя);

					Исключение

						ОбменMagentoСлужебный.ОшибкаMagento(СтрокаВнешняя.ОписаниеОшибки
							, ОписаниеОшибки()
						);

					КонецПопытки;

				КонецЕсли;

			КонецЦикла;

			GetBuyerExtendedInfo_Clients(ТаблицаВнешняя, ДанныеОтвета.Clients, СоставОшибки);

		Исключение

			СоставОшибки.СтатусОшибки = "SYS_ERROR";
			ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
				, "[SYS]: " + ОписаниеОшибки()
				, СоставОшибки.Отказ
			);

		КонецПопытки;

	Исключение

		СоставОшибки.Отказ			= Истина;
		СоставОшибки.СтатусОшибки	= "JSON_WRONG_FORMAT";
		СоставОшибки.ОписаниеОшибки	= ОписаниеОшибки();

	КонецПопытки;

	ДанныеОтвета.Error			= JSON.БулевоКакЧисло(СоставОшибки.Отказ);
	ДанныеОтвета.ErrorMessage	= СоставОшибки.ОписаниеОшибки;
	ДанныеОтвета.ErrorType		= СоставОшибки.СтатусОшибки;

//	---------------------------------------------------------------------------------------

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	НастройкиJSON = Новый НастройкиСериализацииJSON;
	НастройкиJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;

	ЗаписатьJSON(ЗаписьJSON, ДанныеОтвета, НастройкиJSON, "ПередатьДатуДляMagento", ОбменMagentoСервер);

	ТекстJSON = ЗаписьJSON.Закрыть();

	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\GetBuyerExtendedInfo", "out", ТекстJSON, Истина);

	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;	//	LNK 18.09.2022 05:34:31

	Возврат ТекстJSON;

КонецФункции

//	LNK 28.09.2022 06:27:06
Процедура GetBuyerExtendedInfo_Clients(ТаблицаВнешняя, Clients, СоставОшибки)

	#Если _ Тогда
	ТаблицаВнешняя = Новый ТаблицаЗначений;
	Clients = Новый Массив;
	#КонецЕсли

	Запрос = Новый Запрос(ТекстЗапросаКонтрагенты());
	Запрос.УстановитьПараметр("ТаблицаВнешняя", ТаблицаВнешняя);
	ДанныеВыборка = Запрос.Выполнить().Выбрать();

	ЕстьБезОшибки = Ложь;
	ТекстОшибки	  = "";

	Пока ДанныеВыборка.Следующий() Цикл

		СтрокаВнешняя = ТаблицаВнешняя.Найти(ДанныеВыборка.НомерСтроки, "НомерСтроки");

		ДанныеКлиента = Новый Структура;
	//	---------------------------------------------------------------------------------------
		ДанныеКлиента.Вставить("phoneNumber", ДанныеВыборка.НомерТелефона);
		ДанныеКлиента.Вставить("email"		, ДанныеВыборка.Email);

		ДанныеКлиента.Вставить("IDC"	, ?(ДанныеВыборка.Контрагент.Пустая(), "", СокрЛП(ДанныеВыборка.Контрагент.УникальныйИдентификатор())));
		ДанныеКлиента.Вставить("IDMGT"	, СтрокаВнешняя.ДанныеКонтрагента.КОДЫ.IDMGT);
		ДанныеКлиента.Вставить("EDRPOU"	, СокрЛП(ДанныеВыборка.КодПоЕДРПОУ));

		ДанныеКлиента.Вставить("Found"			 , ?(СтрокаВнешняя.Найден, 1, 0));
		ДанныеКлиента.Вставить("ErrorDescription", ?(СтрокаВнешняя.Найден, "", СокрЛП(СтрокаВнешняя.ОписаниеОшибки)));

		ДанныеКлиента.Вставить("Blocked"	, ДанныеВыборка.Блокирован);
		ДанныеКлиента.Вставить("Employee"	, ДанныеВыборка.Сотрудник);
		ДанныеКлиента.Вставить("Gender"		, ДанныеВыборка.Пол);
		ДанныеКлиента.Вставить("Date_Born"	, ОбменMagentoСервер.ХитраяДата(ДанныеВыборка.ДатаРождения));

		ДанныеКлиента.Вставить("First_Name"	, СокрЛП(ДанныеВыборка.Имя));
		ДанныеКлиента.Вставить("Middle_Name", СокрЛП(ДанныеВыборка.Отчество));
		ДанныеКлиента.Вставить("Last_Name"	, СокрЛП(ДанныеВыборка.Фамилия));

		ДетиВыборка = ДанныеВыборка.Дети.Выбрать();

		ДанныеКлиента.Вставить("childs", Новый Массив);

		Пока ДетиВыборка.Следующий() Цикл

			ДанныеДети = Новый Структура;

			ДанныеДети.Вставить("Child_Name"		, СокрЛП(ДетиВыборка.Имя));
			ДанныеДети.Вставить("Date_Child_Born"	, ОбменMagentoСервер.ХитраяДата(ДетиВыборка.ДатаРождения));
			ДанныеДети.Вставить("Child_Gender"		, ДетиВыборка.Пол);

			ДанныеКлиента.childs.Добавить(ДанныеДети);

		КонецЦикла;

	//	---------------------------------------------------------------------------------------
		Clients.Добавить(ДанныеКлиента);

		Если ПустаяСтрока(ДанныеКлиента.ErrorDescription) Тогда

			ЕстьБезОшибки = Истина;

		Иначе

			ОбменMagentoСлужебный.ОшибкаMagento(ТекстОшибки
				, ДанныеКлиента.ErrorDescription
			);

		КонецЕсли;

	КонецЦикла;

	Если ЕстьБезОшибки Тогда

		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда

			СоставОшибки.СтатусОшибки = "WARNING_CLIENTS";

		КонецЕсли;

	Иначе	СоставОшибки.СтатусОшибки = "ERROR_CLIENTS";

	КонецЕсли;

	ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
		, ТекстОшибки
		, ?(ЕстьБезОшибки, Неопределено, СоставОшибки.Отказ)
	);

КонецПроцедуры

Функция ТекстЗапросаКонтрагенты()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Таблица.Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
	|	Таблица.НомерТелефона КАК НомерТелефона
	|ПОМЕСТИТЬ ТаблицаВнешняя
	|ИЗ
	|	&ТаблицаВнешняя КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВнешняя.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ТаблицаЗаголовки.Ссылка, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаголовки.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаЗаголовки.Блокирован
	|						ИЛИ ТаблицаЗаголовки.ПометкаУдаления
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК Блокирован,
	|	ЕСТЬNULL(ТаблицаКонтактыТелефон.НомерТелефона, ТаблицаВнешняя.НомерТелефона) КАК НомерТелефона,
	|	ЕСТЬNULL(ТаблицаКонтактыПочта.АдресЭП, """") КАК Email,
	|	ЕСТЬNULL(ТаблицаФИО.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(ТаблицаФИО.Имя, """") КАК Имя,
	|	ЕСТЬNULL(ТаблицаФИО.Отчество, """") КАК Отчество,
	|	ЕСТЬNULL(ТаблицаЗаголовки.КодПоЕДРПОУ, """") КАК КодПоЕДРПОУ,
	|	ЕСТЬNULL(ТаблицаЗаголовки.ДатаРождения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРождения,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаголовки.Ссылка ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаЗаголовки.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|					ТОГДА ""female""
	|				ИНАЧЕ ""male""
	|			КОНЕЦ
	|	КОНЕЦ КАК Пол,
	|	ВЫБОР
	|		КОГДА ТаблицаФизЛица.Ссылка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаФизЛица.Сотрудник = ИСТИНА
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК Сотрудник,
	|	ТаблицаЗаголовки.Дети.(
	|		Имя КАК Имя,
	|		ДатаРождения КАК ДатаРождения,
	|		ВЫБОР
	|			КОГДА ТаблицаЗаголовки.Дети.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|				ТОГДА ""female""
	|			ИНАЧЕ ""male""
	|		КОНЕЦ КАК Пол
	|	) КАК Дети
	|ИЗ
	|	ТаблицаВнешняя КАК ТаблицаВнешняя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаЗаголовки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ТаблицаФизЛица
	|			ПО ТаблицаЗаголовки.ФизЛицо = ТаблицаФизЛица.Ссылка
	|		ПО ТаблицаВнешняя.Контрагент = ТаблицаЗаголовки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтактыТелефон
	|		ПО ТаблицаВнешняя.Контрагент = ТаблицаКонтактыТелефон.Ссылка
	|			И (ТаблицаКонтактыТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтактыПочта
	|		ПО ТаблицаВнешняя.Контрагент = ТаблицаКонтактыПочта.Ссылка
	|			И (ТаблицаКонтактыПочта.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагента))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ТаблицаФИО
	|		ПО ТаблицаВнешняя.Контрагент = ТаблицаФИО.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаВнешняя"
	;

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область КомплексПроцедуры_GetDiscountCalc

//	"RequestData" - текст JSON, содержащий данные ОДНОГО чека для расчёта скидок.
//
Функция GetDiscountCalc(RequestData)	//	LNK 08.06.2021 07:07:47

	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;	//	LNK 18.09.2022 05:33:57

	КонтекстПриложения.РегистрацияВыполненияHttpСервиса("Magento", "GetDiscountCalc", RequestData);
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\GetDiscountCalc", "in", RequestData, Истина);

	СоставОшибки	= Новый Структура("Отказ, СтатусОшибки, ОписаниеОшибки, УжеОформлен", Ложь, "", "", Ложь);
	УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	JSON.ЗаписатьСвойство("IDBASE", Константы.ИдентификаторУчетнойСистемы.Получить(), ЗаписьJSON);
	JSON.ЗаписатьСвойство("Number_PackMGT", 1, ЗаписьJSON);
	JSON.ЗаписатьСвойство("DIFF", СокрЛП(Новый УникальныйИдентификатор), ЗаписьJSON);

	Попытка

		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(RequestData);
		ДанныеЗапроса = УточнитьДанныеВнешнегоЗапроса(
			ПрочитатьJSON(ЧтениеJSON, Ложь,,, "ПолучитьДатуОтMagento", ОбменMagentoСервер,, ОбменMagentoСервер.ИменаТипаДата())
		);

		Попытка

			Если ДанныеЗапроса.OrderData.BuyerSpecified Тогда	//	LNK 04.11.2022 05:52:50

					РезультатЗащиты = РегистрыСведений.ПротоколСервисов.Разрешено(
						  ДанныеЗапроса.OrderData.Buyer.phoneNumber
						, "GetDiscountCalc"
						, ?(ПустаяСтрока(ДанныеЗапроса.OrderData.Number)
							, "Card."  + ?(ПустаяСтрока(ДанныеЗапроса.OrderData.Buyer.cardNumber), "NO_CARD", ДанныеЗапроса.OrderData.Buyer.cardNumber)
							, "Order." + ДанныеЗапроса.OrderData.Number
						)
					);

			Иначе	РезультатЗащиты = РегистрыСведений.ПротоколСервисов.СоставРезультата();
				//	Разрешаем без клиента, если указаны купоны в ТЧ "ПогашениеСкидочныхКупонов"
					РезультатЗащиты.Принять = ДанныеЗапроса.OrderData.Свойство("CouponsRedeemed") И ДанныеЗапроса.OrderData.CouponsRedeemed.Количество() > 0;

			КонецЕсли;

			Если РезультатЗащиты.Принять Тогда

			//	Инициализируем пользователя административной учетной записью.
				ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.АдминистраторАвтоматов;

			//	ДокументОбъект = ПолучитьДокументMagento(ДанныеЗапроса.OrderData, "ЧекККМ", Истина, УчетнаяПолитика, СоставОшибки);
				ДокументОбъект = ОбменMagentoСервер.ПолучитьДокументMagento(ДанныеЗапроса.OrderData, "ЧекККМ", Истина, УчетнаяПолитика, СоставОшибки);

				Если НЕ СоставОшибки.Отказ = Истина Тогда

				//	и вот переходим к расчёту скидок!
					СтруктураПараметры = Новый Структура;
					СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
					СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
					СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
					СтруктураПараметры.Вставить("УправляемыеСкидки");
					СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
					СтруктураПараметры.Вставить("ПорядковыйНомерПродажи",           0);
					СтруктураПараметры.Вставить("ПеренестиСкидкиПодаркиВТовары");
					СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	Ложь);
					СтруктураПараметры.Вставить("РабочееМесто", "");
					СтруктураПараметры.Вставить("ДатаРасчета" , ДокументОбъект.Дата);	//	LNK 19.05.2021 07:36:49
					СтруктураПараметры.Вставить("СкидкиПоЗаказуПокупателя", Истина);	//	LNK 25.10.2022 05:40:50

					Попытка

						ДанныеРасчетаСкидок = СкидкиНаценкиСерверПереопределяемый.Рассчитать(ДокументОбъект, СтруктураПараметры);

						ЗаписьJSON.ЗаписатьИмяСвойства("OrderData");

						ЗаписьJSON.ЗаписатьНачалоОбъекта();

							ЗаписатьРасчётСкидкиВJSON(ДокументОбъект, ЗаписьJSON, Ложь);

						ЗаписьJSON.ЗаписатьКонецОбъекта();

					Исключение

						СоставОшибки.СтатусОшибки = "SYS_ERROR";
						ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
							, "[SYS]: " + ОписаниеОшибки()
							, СоставОшибки.Отказ
						);

					КонецПопытки;

				КонецЕсли;

			Иначе

				СоставОшибки.Отказ = Истина;

				Если ДанныеЗапроса.OrderData.BuyerSpecified Тогда

					СоставОшибки.ОписаниеОшибки = "Відмовлено. Запит повторюється надто часто (" + Формат(РезультатЗащиты.Секунды, "ЧН=0; ЧГ=") + " сек.).";
					СоставОшибки.СтатусОшибки	= "DDoS_DEFENSE";

					ЗаписьJSON.ЗаписатьИмяСвойства("Buyer");

					ЗаписьJSON.ЗаписатьНачалоОбъекта();
					
						JSON.ЗаписатьСвойство("cardNumber"	, ДанныеЗапроса.OrderData.Buyer.cardNumber, ЗаписьJSON);
						JSON.ЗаписатьСвойство("phoneNumber"	, ДанныеЗапроса.OrderData.Buyer.phoneNumber, ЗаписьJSON);
						JSON.ЗаписатьСвойство("email"		, ДанныеЗапроса.OrderData.Buyer.email, ЗаписьJSON);

						JSON.ЗаписатьСвойство("IDC"   , ДанныеЗапроса.OrderData.Buyer.IDC, ЗаписьJSON);
						JSON.ЗаписатьСвойство("IDMGT" , ДанныеЗапроса.OrderData.Buyer.IDMGT, ЗаписьJSON);
						JSON.ЗаписатьСвойство("EDRPOU", ДанныеЗапроса.OrderData.Buyer.EDRPOU, ЗаписьJSON);

					ЗаписьJSON.ЗаписатьКонецОбъекта();

				Иначе

					СоставОшибки.ОписаниеОшибки = "Відмовлено. Не вказана інформація про покупця.";
					СоставОшибки.СтатусОшибки	= "BUYER:UNDEF";

				КонецЕсли;

			КонецЕсли;

		Исключение

			СоставОшибки.СтатусОшибки = "SYS_ERROR";
			ОбменMagentoСлужебный.ОшибкаMagento(СоставОшибки.ОписаниеОшибки
				, "[SYS]: " + ОписаниеОшибки()
				, СоставОшибки.Отказ
			);

		КонецПопытки;

	Исключение

		СоставОшибки.Отказ			= Истина;
		СоставОшибки.СтатусОшибки	= "JSON_WRONG_FORMAT";
		СоставОшибки.ОписаниеОшибки	= ОписаниеОшибки();

	КонецПопытки;

	JSON.ЗаписатьСвойство("Error"		, JSON.БулевоКакЧисло(СоставОшибки.Отказ), ЗаписьJSON);
	JSON.ЗаписатьСвойство("ErrorMessage", СоставОшибки.ОписаниеОшибки, ЗаписьJSON);
	JSON.ЗаписатьСвойство("ErrorType"	, СоставОшибки.СтатусОшибки, ЗаписьJSON);

	ЗаписьJSON.ЗаписатьКонецОбъекта();

	ТекстJSON = ЗаписьJSON.Закрыть();
	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO\GetDiscountCalc", "out", ТекстJSON, Истина);

	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;	//	LNK 18.09.2022 05:34:31

	Возврат ТекстJSON;

КонецФункции

Процедура ЗаписатьРасчётСкидкиВJSON(ДокументОбъект, ЗаписьJSON, СокращенныйВариант = Ложь)

	#Если _ Тогда
	ЗаписьJSON = Новый ЗаписьJSON;
	ДокументОбъект = Документы.ЧекККМ.СоздатьДокумент();
	#КонецЕсли

//	Здесь документ может быть как "образом" (т.е. структурой) при расчете скидок,
//	так и обычным объектом.. например, при выгрузке. Учитываем такой факт.

	РеквизитыШапки = РеквизитыШапкиПолучить(ДокументОбъект);

	JSON.ЗаписатьСвойство("Number" , ДокументОбъект.Номер, ЗаписьJSON);
	JSON.ЗаписатьСвойство("Date"   , Формат(ДокументОбъект.Дата, "ДФ='yyyy/MM/dd ЧЧ:мм:сс'"), ЗаписьJSON);

	Если НЕ СокращенныйВариант = Истина Тогда

		JSON.ЗаписатьСвойство("Сompany", СокрЛП(РеквизитыШапки.КодПоЕДРПОУ), ЗаписьJSON);
		JSON.ЗаписатьСвойство("Depot"  , СокрЛП(РеквизитыШапки.IDNМагазина), ЗаписьJSON);
		JSON.ЗаписатьСвойство("TaxInclud" 	 , JSON.БулевоКакЧисло(ДокументОбъект.ЦенаВключаетНДС), ЗаписьJSON);
		JSON.ЗаписатьСвойство("CreditProgram", ОбменMagentoСлужебный.IDC_Строкой(ДокументОбъект.УслугаБанка), ЗаписьJSON);
		JSON.ЗаписатьСвойство("CreditDepth"  , ?(ДокументОбъект.УслугаБанка.Пустая(), 0, ДокументОбъект.УслугаБанкаПериодПредоставления), ЗаписьJSON);

	КонецЕсли;

	//	---------------------------------------------------------------------------------------

		ЗаписьJSON.ЗаписатьИмяСвойства("Buyer");

		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
			JSON.ЗаписатьСвойство("cardNumber"	, СокрЛП(РеквизитыШапки.КодКарты), ЗаписьJSON);
			JSON.ЗаписатьСвойство("phoneNumber"	, СокрЛП(РеквизитыШапки.НомерТелефона), ЗаписьJSON);
			JSON.ЗаписатьСвойство("email"		, СокрЛП(РеквизитыШапки.Почта), ЗаписьJSON);

			JSON.ЗаписатьСвойство("IDC"   , ОбменMagentoСлужебный.IDC_Строкой(РеквизитыШапки.Контрагент), ЗаписьJSON);
			JSON.ЗаписатьСвойство("IDMGT" , "", ЗаписьJSON);
			JSON.ЗаписатьСвойство("EDRPOU", СокрЛП(РеквизитыШапки.КонтрагентКодПоЕДРПОУ), ЗаписьJSON);

		ЗаписьJSON.ЗаписатьКонецОбъекта();

	//	---------------------------------------------------------------------------------------

		РеквизитыТоваров = РеквизитыТоваровУпаковокПолучить(ДокументОбъект.Товары);	//	соответствие

		ЗаписьJSON.ЗаписатьИмяСвойства("Products");

		ЗаписьJSON.ЗаписатьНачалоМассива();

		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

				JSON.ЗаписатьСвойство("KeyLink"		, СтрокаТабличнойЧасти.КлючСвязи, ЗаписьJSON);
				JSON.ЗаписатьСвойство("KeyLinkBonus", СтрокаТабличнойЧасти.КлючСвязиБонусныхБаллов, ЗаписьJSON);

				JSON.ЗаписатьСвойство("Action"  , JSON.БулевоКакЧисло(СтрокаТабличнойЧасти.АкционнаяЦена), ЗаписьJSON);
				JSON.ЗаписатьСвойство("IDN"		, СокрЛП(РеквизитыТоваров.Получить(СтрокаТабличнойЧасти.Номенклатура).IDN), ЗаписьJSON);

				JSON.ЗаписатьСвойство("Price"	, СтрокаТабличнойЧасти.Цена, ЗаписьJSON);
				JSON.ЗаписатьСвойство("Count"	, СтрокаТабличнойЧасти.КоличествоУпаковок, ЗаписьJSON);
				JSON.ЗаписатьСвойство("Summa"	, СтрокаТабличнойЧасти.Сумма, ЗаписьJSON);

				JSON.ЗаписатьСвойство("SummaAutoDiscount"	, СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки, ЗаписьJSON);
				JSON.ЗаписатьСвойство("SummaManualDiscount"	, СтрокаТабличнойЧасти.СуммаРучнойСкидки, ЗаписьJSON);

				JSON.ЗаписатьСвойство("SummaBonusAccrue", СтрокаТабличнойЧасти.СуммаБонусныхБалловНачислено, ЗаписьJSON);
				JSON.ЗаписатьСвойство("SummaBonusPay"	, СтрокаТабличнойЧасти.СуммаБонусныхБалловСписано, ЗаписьJSON);

				Если НЕ СокращенныйВариант = Истина Тогда

					JSON.ЗаписатьСвойство("TaxSumma", СтрокаТабличнойЧасти.СуммаНДС, ЗаписьJSON);
					JSON.ЗаписатьСвойство("TaxRate"	, НДСОбщегоНазначенияСервер.ПолучитьСтавкуНДСЧислом(СтрокаТабличнойЧасти.СтавкаНДС) * 100, ЗаписьJSON);

					ДанныеУпаковки = РеквизитыТоваров.Получить(СтрокаТабличнойЧасти.Упаковка);
					JSON.ЗаписатьСвойство("PackName", ДанныеУпаковки.Наименование, ЗаписьJSON);
					JSON.ЗаписатьСвойство("PackRate", ДанныеУпаковки.Коэффициент, ЗаписьJSON);

				КонецЕсли;

			ЗаписьJSON.ЗаписатьКонецОбъекта();

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();

	//	---------------------------------------------------------------------------------------

		ЗаписьJSON.ЗаписатьИмяСвойства("Discounts");

		ЗаписьJSON.ЗаписатьНачалоМассива();	//	Начало: СкидкиНаценки

		Для каждого СтрокаТабличнойЧасти Из ПодготовитьСкидкиНаценкиДляВыгрузки(ДокументОбъект.СкидкиНаценки) Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

			JSON.ЗаписатьСвойство("KeyLink"			, СтрокаТабличнойЧасти.КлючСвязи, ЗаписьJSON);
			JSON.ЗаписатьСвойство("DiscountType"	, ОбщегоНазначенияКлиентСервер.РеквизитПеречисления(СтрокаТабличнойЧасти.СпособПредоставления), ЗаписьJSON);
			JSON.ЗаписатьСвойство("Discount"		, ОбменMagentoСлужебный.IDC_Строкой(СтрокаТабличнойЧасти.СкидкаНаценка), ЗаписьJSON);
			JSON.ЗаписатьСвойство("DiscountName"	, СокрЛП(СтрокаТабличнойЧасти.СкидкаНаценка), ЗаписьJSON);
			JSON.ЗаписатьСвойство("TypeApplication"	, ОбменMagentoПовтИсп.СпособПримененияСкидкиИдентификатор(СтрокаТабличнойЧасти.СпособПримененияСкидки), ЗаписьJSON);
			JSON.ЗаписатьСвойство("LoyaltyProgram"	, ОбменMagentoСлужебный.IDC_Строкой(СтрокаТабличнойЧасти.ПрограммаЛояльности), ЗаписьJSON);
			JSON.ЗаписатьСвойство("Summa"			, СтрокаТабличнойЧасти.Сумма, ЗаписьJSON);

			ЗаписьJSON.ЗаписатьКонецОбъекта();

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();	//	Конец: СкидкиНаценки

	//	---------------------------------------------------------------------------------------

		ЗаписьJSON.ЗаписатьИмяСвойства("AccrueBonusPoints");

		ЗаписьJSON.ЗаписатьНачалоМассива();	//	Начало: НачислениеБонусныхБаллов

		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.НачислениеБонусныхБаллов Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

			JSON.ЗаписатьСвойство("LoyaltyProgram"		, ОбменMagentoСлужебный.IDC_Строкой(СтрокаТабличнойЧасти.ПрограммаЛояльности), ЗаписьJSON);
			JSON.ЗаписатьСвойство("LoyaltyProgramName"	, СокрЛП(СтрокаТабличнойЧасти.ПрограммаЛояльности), ЗаписьJSON);
			JSON.ЗаписатьСвойство("TypeBonus"			, ОбменMagentoПовтИсп.ТипБонусовИдентификатор(СтрокаТабличнойЧасти.ПрограммаЛояльности), ЗаписьJSON);
			JSON.ЗаписатьСвойство("DateAccrual"			, Формат(СтрокаТабличнойЧасти.ДатаНачисления, "ДФ=yyyy/MM/dd"), ЗаписьJSON);
			JSON.ЗаписатьСвойство("DateCancel"			, Формат(СтрокаТабличнойЧасти.ДатаСписания, "ДФ=yyyy/MM/dd"), ЗаписьJSON);
			JSON.ЗаписатьСвойство("Summa"				, СтрокаТабличнойЧасти.СуммаБонусныхБаллов, ЗаписьJSON);

			ЗаписьJSON.ЗаписатьКонецОбъекта();

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();	//	Конец: НачислениеБонусныхБаллов

	//	---------------------------------------------------------------------------------------

		ЗаписьJSON.ЗаписатьИмяСвойства("PayBonusPoints");

		ЗаписьJSON.ЗаписатьНачалоМассива();	//	Начало: ОплатаБонуснымиБаллами

		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.ОплатаБонуснымиБаллами Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();

			JSON.ЗаписатьСвойство("KeyLinkBonus"		, СтрокаТабличнойЧасти.КлючСвязиБонусныхБаллов, ЗаписьJSON);
			JSON.ЗаписатьСвойство("LoyaltyProgram"		, ОбменMagentoСлужебный.IDC_Строкой(СтрокаТабличнойЧасти.ПрограммаЛояльности), ЗаписьJSON);
			JSON.ЗаписатьСвойство("LoyaltyProgramName"	, СокрЛП(СтрокаТабличнойЧасти.ПрограммаЛояльности), ЗаписьJSON);
			JSON.ЗаписатьСвойство("TypeBonus"			, ОбменMagentoПовтИсп.ТипБонусовИдентификатор(СтрокаТабличнойЧасти.ПрограммаЛояльности), ЗаписьJSON);
			JSON.ЗаписатьСвойство("Summa"				, СтрокаТабличнойЧасти.СуммаБонусныхБаллов, ЗаписьJSON);

			ЗаписьJSON.ЗаписатьКонецОбъекта();

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();	//	Конец: ОплатаБонуснымиБаллами

	//	---------------------------------------------------------------------------------------

		РеквизитыКупонов = РеквизитыКупоновПолучить(ДокументОбъект.ВыдачаСкидочныхКупонов);		//	соответствие
		РеквизитыКупоновПолучить(ДокументОбъект.ПогашениеСкидочныхКупонов, РеквизитыКупонов);	//	соответствие

		ЗаписьJSON.ЗаписатьИмяСвойства("CouponsIssued");

		ЗаписьJSON.ЗаписатьНачалоМассива();	//	ВыдачаСкидочныхКупонов: Начало

		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.ВыдачаСкидочныхКупонов Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();	//	Элемент массива: Начало

				ТипКупона	   = "";
				СкидочныйКупон = "";
				Представление  = "";
				СерийныйНомер  = "";

				Если СтрокаТабличнойЧасти.СкидочныйКупон = Неопределено Тогда

					ТипКупона = "undef";

				ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.СкидочныйКупон) = Тип("Строка") Тогда
				
					ТипКупона = "String";
					СкидочныйКупон = СокрЛП(СтрокаТабличнойЧасти.СкидочныйКупон);
					Представление  = СокрЛП(СтрокаТабличнойЧасти.СкидочныйКупон);

				Иначе

					РеквизитыКупона = РеквизитыКупонов.Получить(СтрокаТабличнойЧасти.СкидочныйКупон);
					ТипКупона		= РеквизитыКупона.Тип;
					СкидочныйКупон	= РеквизитыКупона.СкидочныйКупон;
					Представление	= РеквизитыКупона.Наименование;

				КонецЕсли;

				Если ТипЗнч(СтрокаТабличнойЧасти.СерийныйНомер) = Тип("Строка") Тогда

					СерийныйНомер = СокрЛП(СтрокаТабличнойЧасти.СерийныйНомер);

				ИначеЕсли НЕ СтрокаТабличнойЧасти.СерийныйНомер = Неопределено Тогда

					СерийныйНомер = РеквизитыКупонов.Получить(СтрокаТабличнойЧасти.СерийныйНомер);

				КонецЕсли;

				JSON.ЗаписатьСвойство("Type"		, ТипКупона, ЗаписьJSON);
				JSON.ЗаписатьСвойство("Coupon"		, СкидочныйКупон, ЗаписьJSON);
				JSON.ЗаписатьСвойство("CouponName"	, Представление, ЗаписьJSON);
				JSON.ЗаписатьСвойство("SerialNumber", СерийныйНомер, ЗаписьJSON);
				JSON.ЗаписатьСвойство("Nominal"		, СтрокаТабличнойЧасти.НоминалКупона, ЗаписьJSON);
				JSON.ЗаписатьСвойство("Count"		, СтрокаТабличнойЧасти.Количество, ЗаписьJSON);

			ЗаписьJSON.ЗаписатьКонецОбъекта();	//	Элемент массива: Конец

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();	//	ВыдачаСкидочныхКупонов: Конец

		ЗаписьJSON.ЗаписатьИмяСвойства("CouponsRedeemed");

		ЗаписьJSON.ЗаписатьНачалоМассива();	//	ПогашениеСкидочныхКупонов: Начало

		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.ПогашениеСкидочныхКупонов Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();	//	Элемент массива: Начало

				ТипКупона	   = "";
				СкидочныйКупон = "";
				Представление  = "";
				СерийныйНомер  = "";

				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СкидочныйКупон) Тогда

					ТипКупона = "undef";

				Иначе

					РеквизитыКупона = РеквизитыКупонов.Получить(СтрокаТабличнойЧасти.СкидочныйКупон);
					ТипКупона		= РеквизитыКупона.Тип;
					СкидочныйКупон	= РеквизитыКупона.СкидочныйКупон;
					Представление	= РеквизитыКупона.Наименование;

				КонецЕсли;

				Если ТипЗнч(СтрокаТабличнойЧасти.СерийныйНомер) = Тип("Строка") Тогда

					СерийныйНомер = СокрЛП(СтрокаТабличнойЧасти.СерийныйНомер);

				ИначеЕсли НЕ СтрокаТабличнойЧасти.СерийныйНомер = Неопределено Тогда

					СерийныйНомер = РеквизитыКупонов.Получить(СтрокаТабличнойЧасти.СерийныйНомер);

				КонецЕсли;

				JSON.ЗаписатьСвойство("Type"		, ТипКупона, ЗаписьJSON);
				JSON.ЗаписатьСвойство("Coupon"		, СкидочныйКупон, ЗаписьJSON);
				JSON.ЗаписатьСвойство("CouponName"	, Представление, ЗаписьJSON);
				JSON.ЗаписатьСвойство("SerialNumber", СерийныйНомер, ЗаписьJSON);
				JSON.ЗаписатьСвойство("Nominal"		, СтрокаТабличнойЧасти.НоминалКупона, ЗаписьJSON);
				JSON.ЗаписатьСвойство("Accepted"	, JSON.БулевоКакЧисло(СтрокаТабличнойЧасти.Принят), ЗаписьJSON);
				JSON.ЗаписатьСвойство("ErrorMessage", "", ЗаписьJSON);	//	если купон не был применён.. как это сделать, ещё не знаю.

			ЗаписьJSON.ЗаписатьКонецОбъекта();	//	Элемент массива: Конец

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();	//	ПогашениеСкидочныхКупонов: Конец

КонецПроцедуры

Функция РеквизитыШапкиПолучить(ДокументОбъект)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаОрганизации.КодПоЕДРПОУ, Ведущая.КодПоЕДРПОУ) КАК КодПоЕДРПОУ,
	|	ЕСТЬNULL(ТаблицаМагазины.СкладПродажи.IDN, Ведущая.IDNМагазина) КАК IDNМагазина,
	|	ЕСТЬNULL(ТаблицаПокупатели.Ссылка, Ведущая.Контрагент) КАК Контрагент,
	|	ЕСТЬNULL(ТаблицаПокупатели.КодПоЕДРПОУ, Ведущая.КонтрагентКодПоЕДРПОУ) КАК КонтрагентКодПоЕДРПОУ,
	|	ЕСТЬNULL(ТаблицаКарты.КодКарты, Ведущая.КодКарты) КАК КодКарты,
	|	ЕСТЬNULL(ТаблицаТелефоны.НомерТелефона, Ведущая.НомерТелефона) КАК НомерТелефона,
	|	ЕСТЬNULL(ТаблицаПочта.АдресЭП, Ведущая.Почта) КАК Почта
	|ИЗ
	|	(ВЫБРАТЬ
	|		"""" КАК КодПоЕДРПОУ,
	|		"""" КАК IDNМагазина,
	|		ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|		"""" КАК КонтрагентКодПоЕДРПОУ,
	|		"""" КАК КодКарты,
	|		"""" КАК НомерТелефона,
	|		"""" КАК Почта) КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ТаблицаОрганизации
	|		ПО (ТаблицаОрганизации.Ссылка = &Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины КАК ТаблицаМагазины
	|		ПО (ТаблицаМагазины.Ссылка = &Магазин)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаПокупатели
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаТелефоны
	|			ПО ТаблицаПокупатели.Ссылка = ТаблицаТелефоны.Ссылка
	|				И (ТаблицаТелефоны.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаПочта
	|			ПО ТаблицаПокупатели.Ссылка = ТаблицаПочта.Ссылка
	|				И (ТаблицаПочта.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагента))
	|		ПО (ТаблицаПокупатели.Ссылка = &Контрагент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ТаблицаКарты
	|		ПО (ТаблицаКарты.Ссылка = &ДисконтнаяКарта)
	|ГДЕ
	|	ТаблицаОрганизации.Ссылка = &Организация"
	);
	Запрос.УстановитьПараметр("Организация"		, ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("Магазин"			, ДокументОбъект.Магазин);
	Запрос.УстановитьПараметр("Контрагент"		, ДокументОбъект.ВладелецДисконтнойКарты);
	Запрос.УстановитьПараметр("ДисконтнаяКарта"	, ДокументОбъект.ДисконтнаяКарта);
	
	РеквизитыВыборка = Запрос.Выполнить().Выбрать();
	РеквизитыВыборка.Следующий();

	Возврат РеквизитыВыборка;

КонецФункции

Функция РеквизитыТоваровУпаковокПолучить(Товары)

	РеквизитыТоваров = Новый Соответствие;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.IDN = """"
	|			ТОГДА ТаблицаТовары.Код
	|		ИНАЧЕ ТаблицаТовары.IDN
	|	КОНЕЦ КАК IDN
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&СписокТовары)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	""NULL""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУпаковки.Ссылка КАК Упаковка,
	|	ТаблицаУпаковки.Наименование КАК Наименование,
	|	ТаблицаУпаковки.Коэффициент КАК Коэффициент
	|ИЗ
	|	Справочник.УпаковкиНоменклатуры КАК ТаблицаУпаковки
	|ГДЕ
	|	ТаблицаУпаковки.Ссылка В(&СписокУпаковки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка),
	|	""шт."",
	|	1"
	);
	Запрос.УстановитьПараметр("СписокТовары"  , ОбщегоНазначения.ВыгрузитьКоллекцию(Товары,, "Номенклатура").ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("СписокУпаковки", ОбщегоНазначения.ВыгрузитьКоллекцию(Товары,, "Упаковка").ВыгрузитьКолонку("Упаковка"));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();

	Выборка = РезультатыЗапроса[0].Выбрать();	//	Товары

	Пока Выборка.Следующий() Цикл

		РеквизитыТоваров.Вставить(Выборка.Номенклатура, Новый Структура("IDN", СокрЛП(Выборка.IDN)));

	КонецЦикла;

	Выборка = РезультатыЗапроса[1].Выбрать();	//	Упаковки

	Пока Выборка.Следующий() Цикл

		РеквизитыТоваров.Вставить(Выборка.Упаковка, Новый Структура("Наименование, Коэффициент", СокрЛП(Выборка.Наименование), Выборка.Коэффициент));

	КонецЦикла;

	Возврат РеквизитыТоваров;

КонецФункции

Функция РеквизитыКупоновПолучить(ТабличнаяЧасть, РеквизитыКупонов = Неопределено)

	Если РеквизитыКупонов = Неопределено Тогда

		РеквизитыКупонов = Новый Соответствие;

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСкидки.Ссылка КАК Ссылка,
	|	ТаблицаСкидки.Ссылка КАК СкидочныйКупон,
	|	ТаблицаСкидки.Наименование КАК Наименование
	|ИЗ
	|	Справочник.СкидкиНаценки КАК ТаблицаСкидки
	|ГДЕ
	|	ТаблицаСкидки.Ссылка В(&СписокКупоны)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Ссылка,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатура.IDN = """"
	|			ТОГДА ТаблицаНоменклатура.Код
	|		ИНАЧЕ ТаблицаНоменклатура.IDN
	|	КОНЕЦ,
	|	ТаблицаНоменклатура.Наименование
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаНоменклатура
	|ГДЕ
	|	ТаблицаНоменклатура.Ссылка В(&СписокКупоны)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерийныеНомера.Ссылка КАК СерийныйНомер,
	|	СерийныеНомера.КодСерийногоНомера КАК КодСерийногоНомера
	|ИЗ
	|	Справочник.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	СерийныеНомера.Ссылка В(&СписокНомера)"
	);
	Запрос.УстановитьПараметр("СписокКупоны", ОбщегоНазначения.ВыгрузитьКоллекцию(ТабличнаяЧасть,, "СкидочныйКупон").ВыгрузитьКолонку("СкидочныйКупон"));
	Запрос.УстановитьПараметр("СписокНомера", ОбщегоНазначения.ВыгрузитьКоллекцию(ТабличнаяЧасть,, "СерийныйНомер").ВыгрузитьКолонку("СерийныйНомер"));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();

	Выборка = РезультатыЗапроса[0].Выбрать();	//	СкидкиНаценки/Номенклатура
	
	Пока Выборка.Следующий() Цикл

		РеквизитыКупонов.Вставить(Выборка.Ссылка, Новый Структура(
			"СкидочныйКупон, Наименование, Тип"
			, ?(ТипЗнч(Выборка.СкидочныйКупон) = Тип("Строка")
					, СокрЛП(Выборка.СкидочныйКупон)
					, ОбменMagentoСлужебный.IDC_Строкой(Выборка.СкидочныйКупон)
				)
			, СокрЛП(Выборка.Наименование)
			, ?(ТипЗнч(Выборка.СкидочныйКупон) = Тип("Строка"), "Coupon", "Discount")
			)
		);

	КонецЦикла;

	Выборка = РезультатыЗапроса[1].Выбрать();	//	СерийныеНомера

	Пока Выборка.Следующий() Цикл

		РеквизитыКупонов.Вставить(Выборка.СерийныйНомер, СокрЛП(Выборка.КодСерийногоНомера));

	КонецЦикла;

	Возврат РеквизитыКупонов;

КонецФункции

Функция ПодготовитьСкидкиНаценкиДляВыгрузки(СкидкиНаценки)	//	LNK 12.11.2021 10:56:50

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СкидкиНаценки.НомерСтроки КАК НомерСтроки,
	|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	ВЫРАЗИТЬ(СкидкиНаценки.СкидкаНаценка КАК Справочник.СкидкиНаценки) КАК СкидкаНаценка,
	|	СкидкиНаценки.СпособПримененияСкидки КАК СпособПримененияСкидки,
	|	СкидкиНаценки.Сумма КАК Сумма
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&СкидкиНаценки КАК СкидкиНаценки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.НомерСтроки КАК НомерСтроки,
	|	Источник.КлючСвязи КАК КлючСвязи,
	|	Источник.СкидкаНаценка КАК СкидкаНаценка,
	|	Источник.СпособПримененияСкидки КАК СпособПримененияСкидки,
	|	Источник.Сумма КАК Сумма,
	|	Источник.СкидкаНаценка.ПрограммаЛояльности КАК ПрограммаЛояльности,
	|	Источник.СкидкаНаценка.СпособПредоставления КАК СпособПредоставления
	|ИЗ
	|	Источник КАК Источник
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник"
	);
	Запрос.УстановитьПараметр("СкидкиНаценки", СкидкиНаценки);

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедуры

//	LNK 19.01.2018 15:00:52
Процедура ПодготовитьПараметрыЗапроса(SKU, Запрос, ТекстЗапроса)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСправочник.Ссылка КАК Склад
	|ИЗ
	|	Справочник.Склады.ДополнительныеРеквизиты КАК ТаблицаСправочник
	|ГДЕ
	|	ТаблицаСправочник.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.СкладОтраженВОстаткахДляИнтернетМагазина)
	|	И ТаблицаСправочник.Значение = ИСТИНА
	|	И НЕ ТаблицаСправочник.Ссылка.IDN = """"
	|	И НЕ ТаблицаСправочник.Ссылка.Блокирован
	|	И НЕ ТаблицаСправочник.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.IDN В(&СписокКодов)
	|	И НЕ Номенклатура.IDN = """"
	|	И НЕ Номенклатура.ЭтоГруппа"
	);
	Запрос.УстановитьПараметр("СписокКодов", ОбщегоНазначенияКлиентСервер.lx_FillValueList(, SKU,, ",",,, Новый ОписаниеТипов("Строка")));

	Результаты = Запрос.ВыполнитьПакет();

	Запрос.УстановитьПараметр("СписокСкладов"     , Результаты[0].Выгрузить().ВыгрузитьКолонку("Склад"));
	Запрос.УстановитьПараметр("СписокНоменклатура", Результаты[1].Выгрузить().ВыгрузитьКолонку("Ссылка"));

	УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику();
	Запрос.УстановитьПараметр("ИнтернетМагазин", УчетнаяПолитика.ИнтернетМагазин);
	Запрос.УстановитьПараметр("СкладЦентральныйИнтернетМагазина", УчетнаяПолитика.СкладЦентральныйИнтернетМагазина);

	Запрос.Текст = ТекстЗапроса;

КонецПроцедуры

Функция ПараметрыИзОбъектаXDTO(ОбъектXDTO, СтрокаКлючей)

	СтруктураПараметров = Новый Структура;

	Для каждого КлючИТип Из ОбщегоНазначенияКлиентСервер.lx_FillValueList(, СтрокаКлючей,, ",",,, Новый ОписаниеТипов("Строка")) Цикл

		ДанныеКлюча = ОбщегоНазначенияКлиентСервер.lx_FillValueList(, КлючИТип,, ":", 2,, Новый ОписаниеТипов("Строка"));
		СтруктураПараметров.Вставить(ДанныеКлюча[0], Неопределено);

		Если НЕ ПустаяСтрока(ДанныеКлюча[1]) Тогда

				ТипКлюча = Новый ОписаниеТипов(ДанныеКлюча[1]);
				СтруктураПараметров[ДанныеКлюча[0]] = ТипКлюча.ПривестиЗначение();

		Иначе	ТипКлюча = Неопределено;

		КонецЕсли;

		Если СервисыСервер.ОбъектXDTOСодержитСвойство(ОбъектXDTO, ДанныеКлюча[0]) Тогда

			Если ТипКлюча = Неопределено Тогда

					СтруктураПараметров[ДанныеКлюча[0]] = ОбъектXDTO[ДанныеКлюча[0]];

			Иначе	СтруктураПараметров[ДанныеКлюча[0]] = ТипКлюча.ПривестиЗначение(ОбъектXDTO[ДанныеКлюча[0]]);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат СтруктураПараметров;

КонецФункции

//	LNK 04.11.2022 05:42:44
Функция УточнитьДанныеВнешнегоЗапроса(ДанныеЗапроса)

	ДанныеЗапроса.OrderData.Вставить("BuyerSpecified", ДанныеЗапроса.OrderData.Свойство("Buyer"));

	Если ДанныеЗапроса.OrderData.BuyerSpecified Тогда

		ДанныеЗапроса.OrderData.BuyerSpecified = (
				НЕ ПустаяСтрока(ДанныеЗапроса.OrderData.Buyer.EDRPOU)
			ИЛИ НЕ ПустаяСтрока(ДанныеЗапроса.OrderData.Buyer.IDC)
			ИЛИ НЕ ПустаяСтрока(ДанныеЗапроса.OrderData.Buyer.IDMGT)
			ИЛИ НЕ ПустаяСтрока(ДанныеЗапроса.OrderData.Buyer.cardNumber)
			ИЛИ НЕ ПустаяСтрока(ДанныеЗапроса.OrderData.Buyer.email)
			ИЛИ НЕ ПустаяСтрока(ДанныеЗапроса.OrderData.Buyer.phoneNumber)
		);

	Иначе

		ДанныеЗапроса.OrderData.Вставить("Buyer"
			, Новый Структура(
				"EDRPOU, IDC, IDMGT, cardNumber, email, phoneNumber"
				, ""
				, ""
				, ""
				, ""
				, ""
				, ""
			)
		);

	КонецЕсли;

	Возврат ДанныеЗапроса;

КонецФункции

#КонецОбласти

