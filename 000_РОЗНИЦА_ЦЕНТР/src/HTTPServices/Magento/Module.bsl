#Область ОбработчикиШаблонаCustomer

//	LNK 24.04.2024 08:26:22		http://localhost/LNK/hs/magento/Customer
//	Экспорт (исключительно!) в целях отладки и разработки во внешней обработке
//
Функция CustomerDo(HTTPЗапрос)	Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Действие = HTTPЗапрос.ПараметрыURL["Action"];

	Если ТипЗнч(HTTPЗапрос) = Тип("Структура") Тогда	//	LNK 11.05.2024 07:14:42

	//		В целях разработки и отладки процессов, не связанных с HTTP.
	//		Вызываем данную функцию из внешней обработки, предварительно
	//		эмулировав параметр "HTTPЗапрос" как структуру.
			RequestData	= HTTPЗапрос.ТелоЗапросаСтрока;			//	отладочный вариант

	Иначе	RequestData	= HTTPЗапрос.ПолучитьТелоКакСтроку();	//	"боевой" вариант

	КонецЕсли;

	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO_2\Customer.Do." + Действие
		, "in"
		, КонтекстПриложения.ПредставлениеЗаголовка(HTTPЗапрос.Заголовки)
		+ Символы.ПС + RequestData
		, Истина
	);

	СоставОшибки = Новый Структура("Отказ, СтатусОшибки, ОписаниеОшибки", Ложь, "", "");

	Если ТипЗнч(HTTPЗапрос) = Тип("Структура") Тогда
		
			HTTPОтвет = Новый Структура(			// отладочный вариант
				"ТелоЗапросаСтрока, Заголовки, КодСостояния"
				, ""
				, Новый Соответствие
				, 200
			);

	Иначе	HTTPОтвет = Новый HTTPСервисОтвет(200);	//	"боевой" вариант

	КонецЕсли;

	HTTPОтвет.Заголовки.Вставить("Content-Type"	, "application/json; text/plain; charset=utf-8");
	HTTPОтвет.Заголовки.Вставить("ErrorStatus"	, "");
	HTTPОтвет.Заголовки.Вставить("ErrorMessage"	, "");

	Если Действие = Неопределено ИЛИ ПустаяСтрока(Действие) Тогда

	//	https://developer.mozilla.org/ru/docs/Web/HTTP/Status
		HTTPОтвет.КодСостояния	= 400;	//	400 Bad Request
										//	Сервер не может или не будет обрабатывать запрос из-за чего-то,
										//	что воспринимается как ошибка клиента (например, неправильный синтаксис,
										//	формат или маршрутизация запроса).
		HTTPОтвет.Заголовки.Вставить("ErrorStatus"	, "ACTION_UNKNOWN");
		HTTPОтвет.Заголовки.Вставить("ErrorMessage"	, СтроковыеФункцииКлиентСервер.СтрокаЛатиницей("Дія для ресурсу не визначена. Помилка!"));

	Иначе

		Попытка

			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(RequestData);

		//	Формат даты ISO вида: "ГГГГ-ММ-ДДTЧЧ:ММ:ССZ". Дата сериализуется в дату стандарта UTC.
		//	Например: "2009-02-15T00:00:00Z".
			ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON,, ОбменMagentoСервер.ИменаТипаДата(2), ФорматДатыJSON.ISO);

			Если ДанныеЗапроса.IDBASE = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторУчетнойСистемы")
			Тогда

				Если Действие = "GetClients" Тогда	//	/Customer/{Action} - последняя лексема

					РазрешеноСоздание = ?(HTTPЗапрос.Заголовки["Create-If-Need"] = 1 ИЛИ HTTPЗапрос.Заголовки["Create-If-Need"] = "1", Истина, Ложь);
					ПолучитьКлиентовПоСписку(ДанныеЗапроса, HTTPОтвет, РазрешеноСоздание);	//	переводим в ТЗ и т.д.

				Иначе

				//	https://developer.mozilla.org/ru/docs/Web/HTTP/Status
					HTTPОтвет.КодСостояния	= 400;	//	400 Bad Request
													//	Сервер не может или не будет обрабатывать запрос из-за чего-то,
													//	что воспринимается как ошибка клиента (например, неправильный синтаксис,
													//	формат или маршрутизация запроса).
					HTTPОтвет.Заголовки.Вставить("ErrorStatus"	, "ACTION_UNKNOWN");
					HTTPОтвет.Заголовки.Вставить("ErrorMessage"	, "Вказана дія [" + Действие + "] не може бути опрацьована. Помилка!");

				КонецЕсли;

			Иначе

			//	https://developer.mozilla.org/ru/docs/Web/HTTP/Status
				HTTPОтвет.КодСостояния	= 412;	//	412 Precondition Failed
												//	Клиент указал в заголовках запроса условия, которым сервер не соответствует.
				HTTPОтвет.Заголовки.Вставить("ErrorStatus"	, "IDBASE_UNKNOWN");
				HTTPОтвет.Заголовки.Вставить("ErrorMessage"	, ОписаниеОшибки());

			КонецЕсли;

		Исключение

			ТекстОшибки	= ОписаниеОшибки();	//	отдельной строкой для облегчения отладки
		//	https://developer.mozilla.org/ru/docs/Web/HTTP/Status
			HTTPОтвет.КодСостояния	= 406;	//	406 Not Acceptable
											//	Сервер после выполнения согласования контента не нашёл содержимого,
											//	соответствующего критериям, заданным пользовательским агентом.
			HTTPОтвет.Заголовки.Вставить("ErrorStatus"	, "SYS_ERROR");
			HTTPОтвет.Заголовки.Вставить("ErrorMessage"	, ТекстОшибки);

		КонецПопытки;

	КонецЕсли;

	Если ТипЗнч(HTTPОтвет) = Тип("Структура") Тогда

			ТекстJSON = HTTPОтвет.ТелоЗапросаСтрока;		//	отладочный вариант

	Иначе	ТекстJSON = HTTPОтвет.ПолучитьТелоКакСтроку();	//	"боевой" вариант

	КонецЕсли;

	КонтекстПриложения.ЖурналированиеВходящихЗапросов("MAGENTO_2\Customer.Do." + Действие
		, "out"
		, КонтекстПриложения.ПредставлениеЗаголовка(HTTPОтвет.Заголовки)
		+ Символы.ПС + ТекстJSON
		, Истина
	);

	Возврат HTTPОтвет;

КонецФункции

#КонецОбласти

#Область КомплексПроцедуры_GetClients

//	LNK 26.04.2024 17:28:49
Процедура ПолучитьКлиентовПоСписку(ДанныеЗапроса, HTTPОтвет, РазрешеноСоздание)

	#Если _ Тогда
	HTTPОтвет = Новый HTTPСервисОтвет(200);
	#КонецЕсли

	Если НЕ ПривилегированныйРежим() Тогда

		УстановитьПривилегированныйРежим(Истина);

	КонецЕсли;

//	LNK 29.04.2024 15:14:05 - обговорили с Мишинским
//	IDC является приоритетным ключём! Если указан - принимаем эту ссылку.

	Для Итерация = 1 По 2 Цикл

	//	Две итерации получения временных таблиц по причине возможного
	//	создания новых элементов.
	//	В первой итерации такие "новые" могут быть созданы, а во второй они
	//	обновляются в таблице "Найдено".

		ДанныеВходящие = ПолучитьТаблицуВходящихДанных(ДанныеЗапроса);

		Если Итерация = 1 Тогда

			Запрос = Новый Запрос(ТекстЗапросаИсточник());
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("ТаблицаКлиентов", ДанныеВходящие.ТаблицаКлиентов);
			Запрос.Выполнить();	//	получим временные таблицы на основании данных входящего http-запроса

			ТаблицаНовых = ВыполнитьСозданиеКлиентов(Запрос, ДанныеВходящие.ТаблицаДетей, РазрешеноСоздание);	//	LNK 17.05.2024 09:48:28

		Иначе

			Если НЕ ТаблицаНовых.Количество() = 0 И РазрешеноСоздание = Истина Тогда

				Запрос.Текст =
				"УНИЧТОЖИТЬ Источник
				|;
				|УНИЧТОЖИТЬ Найдено"
				;
				Запрос.Выполнить();	//	удаляем временные таблицы..

			//	необходимо обновить "источники", а именно выборку "Найдено".
				Запрос.Текст = ТекстЗапросаИсточник();
				Запрос.Выполнить();	//	обновим временные таблицы..

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Запрос.Параметры.Удалить("ТаблицаКлиентов");	//	очистим параметр - он уже не нужен.

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	JSON.ЗаписатьСвойство("IDBASE"	, ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторУчетнойСистемы"), ЗаписьJSON);
	JSON.ЗаписатьСвойство("DIFF"	, СокрЛП(Новый УникальныйИдентификатор), ЗаписьJSON);

		ЗаписьJSON.ЗаписатьИмяСвойства("Clients");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		
		Счётчик = 0;

		Запрос.Текст	= ТекстЗапросаКлиентыЧтение();
		ТаблицаКлиентов	= ПолучитьЛокальнуюТаблицуКлиентов(Запрос.Выполнить(), ТаблицаНовых);

		Для каждого СтрокаКлиенты Из ТаблицаКлиентов Цикл

			ЗаписьJSON.ЗаписатьНачалоОбъекта();
		//	1. ---------------------------------------------------------------------------------------

				JSON.ЗаписатьСвойство("IDC"				, ОбменMagentoСлужебный.IDC_Строкой(СтрокаКлиенты.Контрагент), ЗаписьJSON);
				JSON.ЗаписатьСвойство("ClientPhone"		, СтрокаКлиенты.НомерТелефона, ЗаписьJSON);
				JSON.ЗаписатьСвойство("ClientEmail"		, СокрЛП(СтрокаКлиенты.Электропочта), ЗаписьJSON);

				JSON.ЗаписатьСвойство("ClientFirstName" , СтрокаКлиенты.Имя, ЗаписьJSON);
				JSON.ЗаписатьСвойство("ClientMiddleName", СтрокаКлиенты.Отчество, ЗаписьJSON);
				JSON.ЗаписатьСвойство("ClientLastName"  , СтрокаКлиенты.Фамилия, ЗаписьJSON);

				JSON.ЗаписатьСвойство("ClientDateBorn"	, ОбменMagentoСервер.ФорматДаты(СтрокаКлиенты.ДатаРождения, ФорматДатыJSON.ISO), ЗаписьJSON);
				JSON.ЗаписатьСвойство("ClientGender"	, СтрокаКлиенты.Пол, ЗаписьJSON);

				JSON.ЗаписатьСвойство("Message"			, СтрокаКлиенты.ТекстСообщения, ЗаписьJSON);
				JSON.ЗаписатьСвойство("Error"			, ?(СтрокаКлиенты.Ошибка, 1, 0), ЗаписьJSON);

				ЗаписьJSON.ЗаписатьИмяСвойства("Children");
				ЗаписьJSON.ЗаписатьНачалоМассива();
			//	2. ---------------------------------------------------------------------------------------

				Для каждого СтрокаРебёнок Из СтрокаКлиенты.Дети Цикл
				
					ЗаписьJSON.ЗаписатьНачалоОбъекта();

						JSON.ЗаписатьСвойство("ChildId"			, СтрокаРебёнок.РебёнокUUID, ЗаписьJSON);
						JSON.ЗаписатьСвойство("ChildFirstName"	, СтрокаРебёнок.РебёнокИмя, ЗаписьJSON);
						JSON.ЗаписатьСвойство("ChildGender"		, СтрокаРебёнок.РебёнокПол, ЗаписьJSON);
						JSON.ЗаписатьСвойство("ChildDateBorn"	, ОбменMagentoСервер.ФорматДаты(СтрокаРебёнок.РебёнокДатаРождения, ФорматДатыJSON.ISO), ЗаписьJSON);

					ЗаписьJSON.ЗаписатьКонецОбъекта();

				КонецЦикла;

			//	2. ---------------------------------------------------------------------------------------
				ЗаписьJSON.ЗаписатьКонецМассива();

		//	УстановитьКлючиАдреса(КлиентыВыборка, ЗаписьJSON);

		//	1. ---------------------------------------------------------------------------------------
			ЗаписьJSON.ЗаписатьКонецОбъекта();

			Счётчик = Счётчик + 1;

		КонецЦикла;

		ЗаписьJSON.ЗаписатьКонецМассива();
	ЗаписьJSON.ЗаписатьКонецОбъекта();

	ТекстJSON = ЗаписьJSON.Закрыть();

	Если ТипЗнч(HTTPОтвет) = Тип("Структура") Тогда
		
			HTTPОтвет.ТелоЗапросаСтрока	= ТекстJSON;

	Иначе	HTTPОтвет.УстановитьТелоИзСтроки(ТекстJSON);

	КонецЕсли;

КонецПроцедуры

//	LNK 17.05.2024 09:49:42
Функция ВыполнитьСозданиеКлиентов(Запрос, ТаблицаДетей, РазрешеноСоздание)

	Перем УИ;

	Запрос.Текст	 = ТекстЗапросаКлиентыСоздание();
	РезультатЗапроса = Запрос.Выполнить();

	ТаблицаНовых = ПолучитьСтруктуруТаблицыКлиентов("Входящие", РезультатЗапроса.Выгрузить());
	#Если _ Тогда
	ТаблицаНовых = Новый ТаблицаЗначений;
	#КонецЕсли

	Если РазрешеноСоздание = Истина Тогда

		Для каждого СтрокаТаблицы Из ТаблицаНовых Цикл

			Если НЕ ПустаяСтрока(СтрокаТаблицы.IDC) Тогда

				Попытка

					УИ = Новый УникальныйИдентификатор(СтрокаТаблицы.IDC);

					КонтрагентСсылка = Справочники.Контрагенты.ПолучитьСсылку(УИ);	//	проверяем ещё раз!
				//	.. если такая ссылка существует, то ничего не делаем и не сообщаем.
				//	в принципе, данные этой ссылки вернутся в следующей итерации внешнего запроса (наверное).

					Если НЕ КонтрагентСсылка.Пустая() Тогда

						СтрокаТаблицы.Ошибка		 = Истина;
						СтрокаТаблицы.ТекстСообщения = СтрокаТаблицы.ТекстСообщения + ?(ПустаяСтрока(СтрокаТаблицы.ТекстСообщения), "", Символы.ПС)
							+ "Клієнта виявлено під час перевірки IDC! Можливо, виконуються паралельні зовнішні запити.";

					КонецЕсли;

				Исключение

					УИ = Неопределено;
				//	.. гасим ошибку возможной чуши в IDC
					СтрокаТаблицы.ТекстСообщения = СтрокаТаблицы.ТекстСообщения + ?(ПустаяСтрока(СтрокаТаблицы.ТекстСообщения), "", Символы.ПС)
						+ ОписаниеОшибки();

				КонецПопытки;

			КонецЕсли;

			Если НЕ СтрокаТаблицы.Ошибка Тогда

			//	Предварительный контроль дублей!
				КонтрагентСсылка = Справочники.Контрагенты.НайтиПоТелефону(СтрокаТаблицы.НомерТелефона, Перечисления.ЮрФизЛицо.ФизЛицо, Истина, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);

				Если КонтрагентСсылка.Пустая() Тогда

					КонтрагентСсылка = СоздатьКонтрагента(УИ
						, СтрокаТаблицы
						, ТаблицаДетей.Скопировать(ТаблицаДетей.НайтиСтроки(Новый Структура("ID_Parent", СтрокаТаблицы.ID_Parent)))
					);

				Иначе

					СтрокаТаблицы.Ошибка		 = Истина;
					СтрокаТаблицы.ТекстСообщения = СтрокаТаблицы.ТекстСообщения + ?(ПустаяСтрока(СтрокаТаблицы.ТекстСообщения), "", Символы.ПС)
						+ "Поганий (невірна структура) номер телефону «" + СтрокаТаблицы.НомерТелефона + "». Існують такі номери";

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат ТаблицаНовых;

КонецФункции

//	LNK 24.05.2024 07:48:54
Функция СоздатьКонтрагента(Знач УИ, СтрокаТаблицы, ТаблицаДетей)

	ТекстОшибки		 = "";
	КонтрагентСсылка = Справочники.Контрагенты.ПустаяСсылка();

	Попытка

		Блокиратор = Справочники.БлокираторыПроцессов.НовыйКонтрагент.ПолучитьОбъект();
		Блокиратор.Заблокировать();

		Попытка

			НачатьТранзакцию();

			КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();

			КонтрагентОбъект.УстановитьСсылкуНового(Справочники.Контрагенты.ПолучитьСсылку(?(УИ = Неопределено, Новый УникальныйИдентификатор, УИ)));

		//	---------------------------------------------------------------------------------------
			КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
			КонтрагентОбъект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			КонтрагентОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
			ОбменДаннымиСервер.УстановитьВсехПолучателей(КонтрагентОбъект.ОбменДанными.Получатели, "ПоМагазину");

			КонтрагентОбъект.Блокирован		= Ложь;
			КонтрагентОбъект.Родитель		= Справочники.Контрагенты.Покупатели;
			КонтрагентОбъект.ЮрФизЛицо		= Перечисления.ЮрФизЛицо.ФизЛицо;
			КонтрагентОбъект.Пол			= ?(НРег(СтрокаТаблицы.Пол) = "male"	, Перечисления.ПолФизическогоЛица.Мужской,
											  ?(НРег(СтрокаТаблицы.Пол) = "female"	, Перечисления.ПолФизическогоЛица.Мужской
											  										, Перечисления.ПолФизическогоЛица.ПустаяСсылка()));
			КонтрагентОбъект.Покупатель		= Истина;
			КонтрагентОбъект.ДатаРождения	= СтрокаТаблицы.ДатаРождения;
			КонтрагентОбъект.ДатаСоздания	= ТекущаяДата();

			КонтрагентОбъект.ДополнительныеСвойства.Вставить("ПрефиксНеДополнять");
			КонтрагентОбъект.ДополнительныеСвойства.Вставить("Префикс", "MG2");
			КонтрагентОбъект.УстановитьНовыйКод();

			КонтрагентОбъект.IDN = КонтрагентОбъект.Код;

		//	---------------------------------------------------------------------------------------
			СтроковыеФункцииКлиентСервер.ПривестиНаименование(СтрокаТаблицы.Имя, Истина, Истина);
			СтроковыеФункцииКлиентСервер.ПривестиНаименование(СтрокаТаблицы.Отчество, Истина, Истина);
			СтроковыеФункцииКлиентСервер.ПривестиНаименование(СтрокаТаблицы.Фамилия, Истина, Истина);

			МенеджерЗаписи = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период	= ТекущаяДата();
			МенеджерЗаписи.ФизЛицо	= КонтрагентОбъект.ПолучитьСсылкуНового();
			МенеджерЗаписи.Фамилия	= СтрокаТаблицы.Фамилия;
			МенеджерЗаписи.Имя		= СтрокаТаблицы.Имя;
			МенеджерЗаписи.Отчество	= СтрокаТаблицы.Отчество;

			МенеджерЗаписи.Записать();

			КонтрагентОбъект.Наименование		= СтроковыеФункцииКлиентСервер.ПривестиНаименование(СтрокаТаблицы.Фамилия + " " + СтрокаТаблицы.Имя + " " + СтрокаТаблицы.Отчество, Ложь, Истина);
			КонтрагентОбъект.НаименованиеПолное	= КонтрагентОбъект.Наименование;

		//	---------------------------------------------------------------------------------------
			СтрокаКонтакты = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
			СтрокаКонтакты.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			СтрокаКонтакты.Тип = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаКонтакты.Вид, "Тип");
			СтрокаКонтакты.НомерТелефона = СокрЛП(СтрокаТаблицы.НомерТелефона);
			СтрокаКонтакты.Представление = СтрокаКонтакты.НомерТелефона;

			Представление = Лев( СтрокаКонтакты.НомерТелефона,  3)
					+ " " + Сред(СтрокаКонтакты.НомерТелефона,  4, 2)
					+ " " + Сред(СтрокаКонтакты.НомерТелефона,  6, 3)
					+ " " + Сред(СтрокаКонтакты.НомерТелефона,  9, 2)
					+ " " + Сред(СтрокаКонтакты.НомерТелефона, 11, 2);
			СтрокаКонтакты.ЗначенияПолей = ВерификацияКлиентовСервер.СформироватьДанныеТелефона(Представление, СтрокаКонтакты.НомерТелефонаБезКодов);

			Для каждого СтрокаРебёнок Из ТаблицаДетей Цикл

				СтрокаТабличнойЧасти = КонтрагентОбъект.Дети.Добавить();

				СтрокаТабличнойЧасти.УникальныйИдентификатор = СтрокаРебёнок.РебёнокUUID;
				СтрокаТабличнойЧасти.ДатаРождения	= СтрокаРебёнок.РебёнокДатаРождения;
				СтрокаТабличнойЧасти.Имя			= СтрокаРебёнок.РебёнокИмя;
				СтрокаТабличнойЧасти.Пол			= СтрокаРебёнок.РебёнокПол;

			КонецЦикла;

			КонтрагентОбъект.Записать();
			КонтрагентСсылка = КонтрагентОбъект.Ссылка;

			ЗафиксироватьТранзакцию();

		Исключение

			ТекстОшибки = "Ошибка при создании [" + СтрокаТаблицы.НомерТелефона + "]" + ОписаниеОшибки();
			ОтменитьТранзакцию();

		КонецПопытки;

		Блокиратор.Разблокировать();

	Исключение

		ТекстОшибки = "Отказано в создании клиента [" + СтрокаТаблицы.НомерТелефона + "]. Не удалось получить управление процессом.";

	КонецПопытки;

	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда

		СтрокаТаблицы.Ошибка		 = Истина;
		СтрокаТаблицы.ТекстСообщения = СтрокаТаблицы.ТекстСообщения + ?(ПустаяСтрока(СтрокаТаблицы.ТекстСообщения), "", Символы.ПС)
			+ ТекстОшибки;

		ЖурналСобытий.Регистрация("MAG2.Клиенты.Создание", УровеньЖурналаРегистрации.Предупреждение
			, Метаданные.Справочники.Контрагенты
			,
			,
			, ТекстОшибки
			, "Клиент [" + СтрокаТаблицы.НомерТелефона + "]"
			, Истина
			, Ложь
		);

	КонецЕсли;

	Возврат КонтрагентСсылка;

КонецФункции

//	LNK 22.05.2024 07:29:58
Функция ПолучитьЛокальнуюТаблицуКлиентов(РезультатЗапроса, ТаблицаНовых)

	ТаблицаКлиентов = ПолучитьСтруктуруТаблицыКлиентов("Полный");
	#Если _ Тогда
	ТаблицаКлиентов = Новый ТаблицаЗначений;
	ТаблицаНовых	= Новый ТаблицаЗначений;
	#КонецЕсли

	Если НЕ РезультатЗапроса.Пустой() Тогда

		КлиентыВыборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока КлиентыВыборка.Следующий() Цикл

			СтрокаКлиенты = ТаблицаКлиентов.Добавить();

			СтрокаКлиенты.Дети = ПолучитьСтруктуруТаблицыКлиентов("Дети", СтрокаКлиенты.Дети);

			СтрокаКлиенты.IDC			= ОбменMagentoСлужебный.IDC_Строкой(КлиентыВыборка.Контрагент);
			СтрокаКлиенты.Контрагент	= КлиентыВыборка.Контрагент;
			СтрокаКлиенты.НомерТелефона	= КлиентыВыборка.НомерТелефона;
			СтрокаКлиенты.Электропочта	= СокрЛП(КлиентыВыборка.Электропочта);

			СтрокаКлиенты.Имя			= КлиентыВыборка.Имя;
			СтрокаКлиенты.Отчество		= КлиентыВыборка.Отчество;
			СтрокаКлиенты.Фамилия		= КлиентыВыборка.Фамилия;

			СтрокаКлиенты.ДатаРождения	= КлиентыВыборка.ДатаРождения;
			СтрокаКлиенты.Пол			= КлиентыВыборка.Пол;

			ДетиВыборка = КлиентыВыборка.Выбрать();

			Пока ДетиВыборка.Следующий() Цикл

				Если НЕ ДетиВыборка.РебёнокИмя = NULL Тогда

					СтрокаРебёнок = СтрокаКлиенты.Дети.Добавить();

					СтрокаРебёнок.РебёнокUUID			= ДетиВыборка.РебёнокUUID;
					СтрокаРебёнок.РебёнокИмя			= ДетиВыборка.РебёнокИмя;
					СтрокаРебёнок.РебёнокПол			= ДетиВыборка.РебёнокПол;
					СтрокаРебёнок.РебёнокДатаРождения	= ДетиВыборка.РебёнокДатаРождения;

				КонецЕсли;

			КонецЦикла;

			Если НЕ КлиентыВыборка.Контрагент.Пустая() И НЕ КлиентыВыборка.КлиентMagentoII = Истина Тогда

				УстановитьРеквизитыКонтрагентов(КлиентыВыборка);

			КонецЕсли;

		//	.. устанавливаем обнаруженные при создании замечания или ошибки
			СтрокаНовых = ТаблицаНовых.Найти(СтрокаКлиенты.НомерТелефона, "НомерТелефона");

			Если НЕ СтрокаНовых = Неопределено Тогда

				СтрокаКлиенты.Ошибка		 = СтрокаНовых.Ошибка;
				СтрокаКлиенты.ТекстСообщения = СтрокаКлиенты.ТекстСообщения + ?(ПустаяСтрока(СтрокаКлиенты.ТекстСообщения), "", Символы.ПС)
					+ СтрокаНовых.ТекстСообщения;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат ТаблицаКлиентов;

КонецФункции

//	LNK 24.05.2024 08:56:06
Процедура УстановитьРеквизитыКонтрагентов(ДанныеКонтрагента)

	ПериодЗаписи = ПолучитьПериодРеквизитыКонтрагентов(ДанныеКонтрагента.Контрагент);

	НаборЗаписей = РегистрыСведений.РеквизитыКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Контрагент.Установить(ДанныеКонтрагента.Контрагент);

	Если ПериодЗаписи = '00010101' Тогда

			НаборЗаписей.Отбор.Период.Установить(ТекущаяДата());
			ЗаписьНабора = НаборЗаписей.Добавить();

			ЗаписьНабора.Период		= НаборЗаписей.Отбор.Период.Значение;
			ЗаписьНабора.Контрагент	= НаборЗаписей.Отбор.Контрагент.Значение;

			ЗаписьНабора.Блокирован	= ДанныеКонтрагента.РК_Блокирован;
			ЗаписьНабора.Код		= ДанныеКонтрагента.IDN;
			ЗаписьНабора.Наименование			= СокрЛП(ДанныеКонтрагента.РК_Наименование);
			ЗаписьНабора.НаименованиеУкраинское	= СокрЛП(ДанныеКонтрагента.РК_НаименованиеУкраинское);

	Иначе	НаборЗаписей.Отбор.Период.Установить(ПериодЗаписи);
			НаборЗаписей.Прочитать();
			ЗаписьНабора = НаборЗаписей[0];

	КонецЕсли;

	ЗаписьНабора.КлиентMagentoII = Истина;

	НаборЗаписей.Записать();

КонецПроцедуры

//	LNK 24.05.2024 06:40:02
Функция ПолучитьПериодРеквизитыКонтрагентов(Контрагент)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаРеквизиты.Период КАК Период
	|ИЗ
	|	РегистрСведений.РеквизитыКонтрагентов.СрезПоследних(, Контрагент = &Контрагент) КАК ТаблицаРеквизиты"
	);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();

			ПериодЗаписи = Выборка.Период;

	Иначе	ПериодЗаписи = '00010101';

	КонецЕсли;

	Возврат ПериодЗаписи;

КонецФункции

//	LNK 22.05.2024 10:48:27
Процедура КолонкиДобавить(Имя, ОписаниеТипов, Колонки)

	Если Колонки.Найти(Имя) = Неопределено Тогда

		Колонки.Добавить(Имя, ОписаниеТипов);

	КонецЕсли;

КонецПроцедуры

//	LNK 29.04.2024 07:48:11
Функция ТекстЗапросаИсточник()

//	Поле "Контрагент" для заполнения по IDC
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВнешниеДанные.IDC КАК IDC,
	|	ВнешниеДанные.ID_Parent КАК ID_Parent,
	|	ВнешниеДанные.Контрагент КАК Контрагент,
	|	ВнешниеДанные.НомерТелефона КАК НомерТелефона,
	|	ВнешниеДанные.Имя КАК Имя,
	|	ВнешниеДанные.Отчество КАК Отчество,
	|	ВнешниеДанные.Фамилия КАК Фамилия,
	|	ВнешниеДанные.ДатаРождения КАК ДатаРождения
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаКлиентов КАК ВнешниеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерТелефона
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Источник.IDC КАК IDC,
	|	ТаблицаСправочник.IDN КАК IDN,
	|	Источник.ID_Parent КАК ID_Parent,
	|	ТаблицаСправочник.Ссылка КАК Контрагент,
	|	Источник.НомерТелефона КАК НомерТелефона,
	|	Источник.Имя КАК Имя,
	|	Источник.Отчество КАК Отчество,
	|	Источник.Фамилия КАК Фамилия,
	|	Источник.ДатаРождения КАК ДатаРождения,
	|	ТаблицаСправочник.ДатаРождения КАК ДатаРождения1С,
	|	ТаблицаСправочник.Пол КАК Пол
	|ПОМЕСТИТЬ Найдено
	|ИЗ
	|	Источник КАК Источник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаСправочник
	|		ПО Источник.Контрагент = ТаблицаСправочник.Ссылка
	|ГДЕ
	|	НЕ Источник.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Источник.IDC,
	|	ТаблицаСправочник.IDN,
	|	Источник.ID_Parent,
	|	ТаблицаСправочник.Ссылка,
	|	Источник.НомерТелефона,
	|	Источник.Имя,
	|	Источник.Отчество,
	|	Источник.Фамилия,
	|	Источник.ДатаРождения,
	|	ТаблицаСправочник.ДатаРождения,
	|	ТаблицаСправочник.Пол
	|ИЗ
	|	Источник КАК Источник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтактыТелефон
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаСправочник
	|			ПО ТаблицаКонтактыТелефон.Ссылка = ТаблицаСправочник.Ссылка
	|		ПО (ТаблицаКонтактыТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
	|			И Источник.НомерТелефона = ТаблицаКонтактыТелефон.НомерТелефона
	|ГДЕ
	|	Источник.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И НЕ Источник.НомерТелефона = """""
	;

	Возврат ТекстЗапроса;

КонецФункции

//	LNK 17.05.2024 09:42:04
Функция ТекстЗапросаКлиентыСоздание()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Источник.IDC КАК IDC,
	|	Источник.ID_Parent КАК ID_Parent,
	|	Источник.Контрагент КАК Контрагент,
	|	Источник.НомерТелефона КАК НомерТелефона,
	|	Источник.Имя КАК Имя,
	|	Источник.Отчество КАК Отчество,
	|	Источник.Фамилия КАК Фамилия,
	|	Источник.ДатаРождения КАК ДатаРождения
	|ИЗ
	|	Источник КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Найдено КАК Найдено
	|		ПО Источник.НомерТелефона = Найдено.НомерТелефона
	|ГДЕ
	|	Найдено.НомерТелефона ЕСТЬ NULL"
	;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаКлиентыЧтение()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Найдено.IDC, Ведущая.IDC) КАК IDC,
	|	ЕСТЬNULL(Найдено.IDN, """") КАК IDN,
	|	ЕСТЬNULL(Найдено.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
	|	Ведущая.НомерТелефона КАК НомерТелефона,
	|	Ведущая.Имя КАК ИмяПолучено,
	|	Ведущая.Отчество КАК ОтчествоПолучено,
	|	Ведущая.Фамилия КАК ФамилияПолучено,
	|	Ведущая.ДатаРождения КАК ДатаРожденияПолучено,
	|	ЕСТЬNULL(ТаблицаФИО.Имя, Ведущая.Имя) КАК Имя,
	|	ЕСТЬNULL(ТаблицаФИО.Отчество, Ведущая.Отчество) КАК Отчество,
	|	ЕСТЬNULL(ТаблицаФИО.Фамилия, Ведущая.Фамилия) КАК Фамилия,
	|	ЕСТЬNULL(Найдено.ДатаРождения1С, Ведущая.ДатаРождения) КАК ДатаРождения,
	|	ЕСТЬNULL(ТаблицаКонтактыПочта.АдресЭП, """") КАК Электропочта,
	|	ВЫБОР
	|		КОГДА Найдено.Пол ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Найдено.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|					ТОГДА ""female""
	|				КОГДА Найдено.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|					ТОГДА ""male""
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК Пол,
	|	ЕСТЬNULL(ТаблицаРеквизиты.КлиентMagentoII, ЛОЖЬ) КАК КлиентMagentoII,
	|	ТаблицаДети.Имя КАК РебёнокИмя,
	|	ТаблицаДети.ДатаРождения КАК РебёнокДатаРождения,
	|	ВЫБОР
	|		КОГДА ТаблицаДети.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|			ТОГДА ""female""
	|		КОГДА ТаблицаДети.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|			ТОГДА ""male""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК РебёнокПол,
	|	ТаблицаДети.УникальныйИдентификатор КАК РебёнокUUID,
	|	ВЫРАЗИТЬ(ТаблицаКонтактыАдрес.ЗначенияПолей КАК СТРОКА(1000)) КАК АдресXML,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(Найдено.Контрагент КАК Справочник.Контрагенты).Блокирован, ЛОЖЬ) КАК РК_Блокирован,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(Найдено.Контрагент КАК Справочник.Контрагенты).Наименование, """") КАК РК_Наименование,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫРАЗИТЬ(Найдено.Контрагент КАК Справочник.Контрагенты).НаименованиеПолное КАК СТРОКА(1000)), """") КАК РК_НаименованиеУкраинское
	|ИЗ
	|	Источник КАК Ведущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Найдено КАК Найдено
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ТаблицаФИО
	|			ПО Найдено.Контрагент = ТаблицаФИО.ФизЛицо
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.Дети КАК ТаблицаДети
	|			ПО Найдено.Контрагент = ТаблицаДети.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтактыПочта
	|			ПО Найдено.Контрагент = ТаблицаКонтактыПочта.Ссылка
	|				И (ТаблицаКонтактыПочта.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагента))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтактыАдрес
	|			ПО Найдено.Контрагент = ТаблицаКонтактыАдрес.Ссылка
	|				И (ТаблицаКонтактыАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента))
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыКонтрагентов.СрезПоследних КАК ТаблицаРеквизиты
	|			ПО Найдено.Контрагент = ТаблицаРеквизиты.Контрагент
	|				И (НЕ Найдено.Контрагент = ЗНАЧЕНИЕ(справочник.Контрагенты.ПустаяСсылка))
	|		ПО Ведущая.НомерТелефона = Найдено.НомерТелефона
	|ИТОГИ
	|	МАКСИМУМ(IDC),
	|	МАКСИМУМ(IDN),
	|	МАКСИМУМ(НомерТелефона),
	|	МАКСИМУМ(ИмяПолучено),
	|	МАКСИМУМ(ОтчествоПолучено),
	|	МАКСИМУМ(ФамилияПолучено),
	|	МАКСИМУМ(ДатаРожденияПолучено),
	|	МАКСИМУМ(Имя),
	|	МАКСИМУМ(Отчество),
	|	МАКСИМУМ(Фамилия),
	|	МАКСИМУМ(ДатаРождения),
	|	МАКСИМУМ(Электропочта),
	|	МАКСИМУМ(Пол),
	|	МАКСИМУМ(КлиентMagentoII),
	|	МАКСИМУМ(АдресXML),
	|	МАКСИМУМ(РК_Блокирован),
	|	МАКСИМУМ(РК_Наименование),
	|	МАКСИМУМ(РК_НаименованиеУкраинское)
	|ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Найдено"
	;

	Возврат ТекстЗапроса;

КонецФункции

#Область АдресКлиента_Определение

//	LNK 28.04.2024 11:04:19
//СоставАдреса	Структура
//	Город	"Каролино-Бугаз"
//	ГородСокращение	""
//	Долгота	"0"
//	Дом	"11"
//	Индекс	"65020 "
//	Квартира	"41"
//	КодСтраны	"804"
//	Корпус	"А"
//	НаселенныйПункт	"Затока"
//	НаселенныйПунктСокращение	""
//	Представление	"65020, Одесская, Овидиопольский, Каролино-Бугаз, Затока, Амосова, дом № 11, корпус А, квартира 41"
//	Район	"Овидиопольский"
//	РайонСокращение	""
//	Страна	"УКРАЇНА"
//	ТипДома	"Дом"
//	ТипКвартиры	"Квартира"
//	ТипКорпуса	"Корпус"
//	Улица	"Амосова"
//	УлицаСокращение	""
//	Широта	"0"
//
Процедура УстановитьКлючиАдреса(КлиентыВыборка, ЗаписьJSON)

//	Такие поля в задаче.. совсем всё оторвано от действительности!
//	AddressName			- Название адреса доставки (только адреса по умолчанию), дом, работа и т.д.
//	AddressType			- Способ доставки, на адрес - address или на отделение - warehouse.
//	AddressOperator		- Тип почтового оператора, Новая почта - newposhta.
//	AddressCity			- Код КОАТУУ населённого пункта.
//	AddressStreet		- Название улицы и типа улицы в формате: тип улицы+ [пробел] + название улицы со справочника
//	AddressHouse		- Номер дома, включая дополнения(дробь, корпус и т.д.).
//	AddressEntrance		- Подъезд.
//	AddressFloor		- Этаж.
//	AddressFlat			- Номер квартиры.
//	AddressIntercom		- Домофон.
//	AddressElevator		- Наличие лифта, есть - 1, нет - 0.
//	AddressWarehouse	- ID почтового отделения.

	СоставАдреса = КонтактнаяИнформацияСлужебный.ПредыдущаяСтруктураКонтактнойИнформацииXML(КлиентыВыборка.АдресXML);

	ЗаписьJSON.ЗаписатьИмяСвойства("Addres");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	Если НЕ СоставАдреса.Количество() = 0 Тогда

		JSON.ЗаписатьСвойство("AddressName"		, "Actual Home Address", ЗаписьJSON);
		JSON.ЗаписатьСвойство("AddressCity"		, "", ЗаписьJSON);	//	Код КОАТУУ населённого пункта.
		JSON.ЗаписатьСвойство("AddressStreet"	, ЭлементАдреса("Улица", СоставАдреса), ЗаписьJSON);
		JSON.ЗаписатьСвойство("AddressHouse"	, ЭлементАдреса("Дом", СоставАдреса)
			+ ?(ПустаяСтрока(ЭлементАдреса("Корпус", СоставАдреса))
					, ""
					, "/" + ЭлементАдреса("Корпус", СоставАдреса))
		, ЗаписьJSON
		);
		JSON.ЗаписатьСвойство("AddressFlat"		, ЭлементАдреса("Квартира", СоставАдреса), ЗаписьJSON);
		JSON.ЗаписатьСвойство("AddressWarehouse", ЭлементАдреса("Индекс", СоставАдреса), ЗаписьJSON);

	КонецЕсли;

	ЗаписьJSON.ЗаписатьКонецОбъекта();

КонецПроцедуры

//	LNK 29.04.2024 09:10:03
Функция ЭлементАдреса(Ключ, СоставАдреса, ЗначениеПоУмолчанию = "")

	#Если _ Тогда
	СоставАдреса = Новый Структура;
	#КонецЕсли

	Если СоставАдреса.Свойство(Ключ) Тогда

			ЗначениеВозврата = СоставАдреса[Ключ];

	Иначе	ЗначениеВозврата = ЗначениеПоУмолчанию;

	КонецЕсли;

	Возврат ЗначениеВозврата;

КонецФункции

#КонецОбласти

Функция ПолучитьТаблицуВходящихДанных(ДанныеЗапроса)

	ДанныеВходящие = Новый Структура(
		"ТаблицаКлиентов, ТаблицаДетей"
		, ПолучитьСтруктуруТаблицыКлиентов("Входящие")
		, ПолучитьСтруктуруТаблицыКлиентов("Входящие.Дети")
	);

	Для каждого Состав Из ДанныеЗапроса.Clients Цикл

		СтрокаТаблицы = ДанныеВходящие.ТаблицаКлиентов.Добавить();

		СтрокаТаблицы.IDC			= СокрЛП(Состав.IDC);
		СтрокаТаблицы.НомерТелефона = СокрЛП(Состав.ClientPhone);
		СтрокаТаблицы.ID_Parent		= СтрокаТаблицы.IDC + "#" + СтрокаТаблицы.НомерТелефона;

		СтрокаТаблицы.Имя			= СокрЛП(Состав.ClientFirstName);
		СтрокаТаблицы.Отчество		= СокрЛП(Состав.ClientMiddleName);
		СтрокаТаблицы.Фамилия		= СокрЛП(Состав.ClientLastName);

		СтрокаТаблицы.ДатаРождения	= Состав.ClientDateBorn;
		СтрокаТаблицы.Пол			= Состав.ClientGender;
		СтрокаТаблицы.Электропочта	= Состав.ClientEmail;

		Для каждого ДетиСписок Из Состав.Children Цикл

			СтрокаРебёнка	= ДанныеВходящие.ТаблицаДетей.Добавить();

			СтрокаРебёнка.ID_Parent				= СтрокаТаблицы.ID_Parent;
			СтрокаРебёнка.РебёнокUUID			= ДетиСписок.ChildId;
			СтрокаРебёнка.РебёнокИмя			= ДетиСписок.ChildFirstName;
			СтрокаРебёнка.РебёнокДатаРождения	= ДетиСписок.ChildDateBorn;
			СтрокаРебёнка.РебёнокПол			= ?(ДетиСписок.ChildGender = "female",	Перечисления.ПолФизическогоЛица.Женский,
												  ?(ДетиСписок.ChildGender = "male"  ,	Перечисления.ПолФизическогоЛица.Мужской,
																						Перечисления.ПолФизическогоЛица.ПустаяСсылка()));

		КонецЦикла;

		Если НЕ ПустаяСтрока(СтрокаТаблицы.IDC) Тогда

			Попытка

				СтрокаТаблицы.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаблицы.IDC));

			Исключение

			//	Возможную ошибку по "хреновому" IDC гасим... дальше будет поиск по телефону.
				ТекстОшибки = ОписаниеОшибки();

			КонецПопытки;

		КонецЕсли;

	КонецЦикла;

	Возврат ДанныеВходящие;

КонецФункции

//	LNK 22.05.2024 10:42:34
Функция ПолучитьСтруктуруТаблицыКлиентов(Режим, ТаблицаКлиентов = Неопределено)

	Если ТаблицаКлиентов = Неопределено Тогда

		ТаблицаКлиентов = Новый ТаблицаЗначений;

	КонецЕсли;

	Если НЕ Режим = "Дети" Тогда

		КолонкиДобавить("IDC"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)), ТаблицаКлиентов.Колонки);
		КолонкиДобавить("Контрагент"	, Новый ОписаниеТипов("СправочникСсылка.Контрагенты"), ТаблицаКлиентов.Колонки);
	//	такая длина в поле "НомерТелефона" ТЧ Контрагенты "КонтактнаяИнформация".. длиннее быть не может!
		КолонкиДобавить("НомерТелефона"	, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)), ТаблицаКлиентов.Колонки);
		КолонкиДобавить("Электропочта"	, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)), ТаблицаКлиентов.Колонки);
	//	такая длина в "РегистрыСведений.ФИОФизЛиц"
		КолонкиДобавить("Имя"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)), ТаблицаКлиентов.Колонки);
		КолонкиДобавить("Отчество"		, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)), ТаблицаКлиентов.Колонки);
		КолонкиДобавить("Фамилия"		, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)), ТаблицаКлиентов.Колонки);

		КолонкиДобавить("ДатаРождения"	, Новый ОписаниеТипов("Дата"), ТаблицаКлиентов.Колонки);
		КолонкиДобавить("Пол"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(10)), ТаблицаКлиентов.Колонки);

		КолонкиДобавить("ТекстСообщения", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(500)), ТаблицаКлиентов.Колонки);
		КолонкиДобавить("Ошибка"		, Новый ОписаниеТипов("Булево"), ТаблицаКлиентов.Колонки);

		Если Режим = "Полный" Тогда

			КолонкиДобавить("Дети"		, Новый ОписаниеТипов("ТаблицаЗначений"), ТаблицаКлиентов.Колонки);

		ИначеЕсли Режим = "Входящие" Тогда

			КолонкиДобавить("ID_Parent"				, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(60)), ТаблицаКлиентов.Колонки);

		ИначеЕсли Режим = "Входящие.Дети" Тогда

			КолонкиДобавить("ID_Parent"				, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(60)), ТаблицаКлиентов.Колонки);
			КолонкиДобавить("РебёнокUUID"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)), ТаблицаКлиентов.Колонки);
			КолонкиДобавить("РебёнокИмя"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)), ТаблицаКлиентов.Колонки);
			КолонкиДобавить("РебёнокДатаРождения"	, Новый ОписаниеТипов("Дата"), ТаблицаКлиентов.Колонки);
			КолонкиДобавить("РебёнокПол"			, Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическогоЛица") , ТаблицаКлиентов.Колонки);

			ТаблицаКлиентов.Индексы.Добавить("ID_Parent");

		КонецЕсли;

	Иначе	//	Дети!

		КолонкиДобавить("РебёнокUUID"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)), ТаблицаКлиентов.Колонки);
		КолонкиДобавить("РебёнокИмя"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)), ТаблицаКлиентов.Колонки);
		КолонкиДобавить("РебёнокДатаРождения"	, Новый ОписаниеТипов("Дата"), ТаблицаКлиентов.Колонки);
		КолонкиДобавить("РебёнокПол"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(10)), ТаблицаКлиентов.Колонки);

	КонецЕсли;

	Возврат ТаблицаКлиентов;

КонецФункции

#КонецОбласти












