#Область ОбработчикиСобытий

Функция PrintPOST(ЗапросСервиса)

	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОтвета = ПустаяСтруктураОтвета();
	СтруктураОтвета.КодОтвета = 0;
	
	СтрокаЗапроса = ЗапросСервиса.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаЗапроса);
	Результат = ПрочитатьJSON(ЧтениеJSON);
	
	ДанныеОЗапросе = ДанныеОЗапросеДоступности(Результат.order);
	
	Если Не (Результат.Свойство("order") И ДанныеОЗапросе.ЕстьЗаказ) Тогда
		
		СтруктураОтвета.КодОтвета = 1;
		
	ИначеЕсли Не (Результат.Свойство("type") 
			И (Результат.type = "docs" ИЛИ Результат.type = "sticker")) Тогда 	
		
		СтруктураОтвета.КодОтвета = 6;
		
	Иначе
		
		СтруктураДанных = Новый Структура;

		Если Результат.type = "docs" Тогда

			СтруктураДанных.Вставить("doc", ДанныеОЗапросе.СсылкаНаЭН.ПутьКФайлуТТН); 

		Иначе
			
			СтруктураДанных.Вставить("doc", ДанныеОЗапросе.СсылкаНаЭН.ПутьКФайлуСтикера); 
			
		КонецЕсли;

		СтруктураДанных.Вставить("status", "OK"); 
		СтруктураДанных.Вставить("roznica", Истина); 
		
		МассивДанных = Новый Массив;
		МассивДанных.Добавить(СтруктураДанных);
		
		ОтветСервераСтруктура = Новый Структура;
		ОтветСервераСтруктура.Вставить("success", МассивДанных); 
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		ЗаписатьJSON(ЗаписьJSON, ОтветСервераСтруктура);
		Результат = ЗаписьJSON.Закрыть();
		
		СтруктураОтвета.ОтветJSON = Результат;

	КонецЕсли;
		
	Возврат ОтветСервиса(СтруктураОтвета);

КонецФункции

Функция ParcelPOST(ЗапросСервиса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОтвета = ПустаяСтруктураОтвета();
	СтруктураОтвета.КодОтвета = 0;
	
	СтрокаЗапроса = ЗапросСервиса.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаЗапроса);
	Результат = ПрочитатьJSON(ЧтениеJSON);
	
	ДанныеОЗапросе = ДанныеОЗапросеДоступности(Результат.order);
	
	Если Не (Результат.Свойство("order") И ДанныеОЗапросе.ЕстьЗаказ) Тогда
		
		СтруктураОтвета.КодОтвета = 1;
		
	ИначеЕсли Не (Результат.Свойство("data")
			И ТипЗнч(Результат.data) = Тип("Массив")
			И Результат.data.Количество() <> 0) Тогда  
		
		СтруктураОтвета.КодОтвета = 2;

	ИначеЕсли Не (Результат.Свойство("skus")
			И ТипЗнч(Результат.data) = Тип("Массив")
			И Результат.skus.Количество() <> 0) Тогда  
		
		СтруктураОтвета.КодОтвета = 7;

	ИначеЕсли Не СопоставитьТовары(Результат, ДанныеОЗапросе) Тогда  
		
		СтруктураОтвета.КодОтвета = 8;

	Иначе
	
		ДокументОбъект = ДанныеОЗапросе.СсылкаНаЗапрос.ПолучитьОбъект();
		
		ДокументОбъект.Упаковки.Очистить();
	
		Для Каждого СтрокаВГХ Из Результат.data Цикл
		
			НоваяСтрока = ДокументОбъект.Упаковки.Добавить();
			НоваяСтрока.Ширина = СтрокаВГХ.seat_width;
			НоваяСтрока.Высота = СтрокаВГХ.seat_height;
			НоваяСтрока.Глубина = СтрокаВГХ.seat_length;
			НоваяСтрока.Вес = СтрокаВГХ.seat_weight;
			
		КонецЦикла;
		
		Попытка
			
			Если ДокументОбъект.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Сборка Тогда
			
				ДокументОбъект.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.КОтправке;
			
			КонецЕсли;
			
			ДокументОбъект.Записать();
		
		Исключение
			СтруктураОтвета.КодОтвета = 3;
		КонецПопытки;
		
	КонецЕсли;

	Если СтруктураОтвета.КодОтвета = 0 Тогда

		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("status", "OK"); 
		
		МассивДанных = Новый Массив;
		МассивДанных.Добавить(СтруктураДанных);
		
		ОтветСервераСтруктура = Новый Структура;
		ОтветСервераСтруктура.Вставить("success", МассивДанных); 
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		ЗаписатьJSON(ЗаписьJSON, ОтветСервераСтруктура);
		Результат = ЗаписьJSON.Закрыть();
		
		СтруктураОтвета.ОтветJSON = Результат;

	КонецЕсли;
	
	Возврат ОтветСервиса(СтруктураОтвета);
КонецФункции

Функция TTNPOST(ЗапросСервиса)
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОтвета = ПустаяСтруктураОтвета();
	СтруктураОтвета.КодОтвета = 0;
	
	СтрокаЗапроса = ЗапросСервиса.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаЗапроса);
	Результат = ПрочитатьJSON(ЧтениеJSON);
	
	ДанныеОЗапросе = ДанныеОЗапросеДоступности(Результат.order);
	
	Если Не (Результат.Свойство("order") И ДанныеОЗапросе.ЕстьЗаказ) Тогда
		
		СтруктураОтвета.КодОтвета = 1;
	
	ИначеЕсли (ДанныеОЗапросе.СсылкаНаЭН = Документы.ЭлектроннаяНакладная.ПустаяСсылка()) Тогда
		
		НовыйДокумент = Документы.ЭлектроннаяНакладная.СоздатьДокумент();
		НовыйДокумент.Заполнить(ДанныеОЗапросе.СсылкаНаЗапрос);
		Попытка
			
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			ДанныеОЗапросе.СсылкаНаЭН = НовыйДокумент.Ссылка;
			
		Исключение
			СтруктураОтвета.КодОтвета = 4;
		КонецПопытки;
	
	КонецЕсли;
	
	Попытка
		
		Если ПустаяСтрока(ДанныеОЗапросе.СсылкаНаЭН.ВнешняяСсылка) Тогда
			ОтветЭН = ОбменНПСервер.РегистрацияЕН(ДанныеОЗапросе.СсылкаНаЭН);
			Если ОтветЭН.Успех Тогда
				ДокументОбъект = ДанныеОЗапросе.СсылкаНаЭН.ПолучитьОбъект();
				ДокументОбъект.ДатаДоставки = ОтветЭН.ДатаДоставки;
				ДокументОбъект.СуммаДоставки = ОтветЭН.СуммаОтОператора;
				ДокументОбъект.Номер = ОтветЭН.НомерТТН;
				ДокументОбъект.ВнешняяСсылка = ОтветЭН.ТТНRef;
				ДокументОбъект.ПутьКФайлуСтикера = ОтветЭН.ПутьКФайлуСтикера;
				ДокументОбъект.ПутьКФайлуТТН = ОтветЭН.ПутьКФайлуТТН;
				ДокументОбъект.Записать();
			Иначе
				СтруктураОтвета.КодОтвета = 5;
			КонецЕсли;
		КонецЕсли;

		НомерТТН = ДанныеОЗапросе.СсылкаНаЭН.Номер;
		
	Исключение
		
		СтруктураОтвета.КодОтвета = 4;
		
	КонецПопытки;

	Если СтруктураОтвета.КодОтвета = 0 Тогда
	
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("status", "OK"); 
		СтруктураДанных.Вставить("np_number", НомерТТН); 
		
		МассивДанных = Новый Массив;
		МассивДанных.Добавить(СтруктураДанных);
		
		ОтветСервераСтруктура = Новый Структура;
		ОтветСервераСтруктура.Вставить("success", МассивДанных); 
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		ЗаписатьJSON(ЗаписьJSON, ОтветСервераСтруктура);
		Результат = ЗаписьJSON.Закрыть();
		
		СтруктураОтвета.ОтветJSON = Результат;

	КонецЕсли;
	
	Возврат ОтветСервиса(СтруктураОтвета);
КонецФункции

Функция LiqPayPOST(ЗапросСервиса)
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОтвета = ПустаяСтруктураОтвета();
	СтруктураОтвета.КодОтвета = 0;
	
	СтрокаЗапроса = ЗапросСервиса.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	ОбменСБанкамиСервер.ОбработкаОтветаПоЗаказуLiqPay(СтрокаЗапроса);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("status", "OK"); 
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(СтруктураДанных);
	
	ОтветСервераСтруктура = Новый Структура;
	ОтветСервераСтруктура.Вставить("success", МассивДанных); 
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, ОтветСервераСтруктура);
	Результат = ЗаписьJSON.Закрыть();
	
	СтруктураОтвета.ОтветJSON = Результат;
	
	
	Возврат ОтветСервиса(СтруктураОтвета);  

КонецФункции

#КонецОбласти

#Область Вспомогательные_методы

Функция СопоставитьТовары(ДанныеОЗаказе, ДанныеОЗапросе)
	
	ВсеТоварыЕсть = Ложь;

	ТаблицаТоваров = Новый ТаблицаЗначений();
	КвалификаторыЧисла = Новый КвалификаторыЧисла(10);
    ОписаниеЧисла = Новый ОписаниеТипов("Число", КвалификаторыЧисла);

    КвалификаторыСтроки = Новый КвалификаторыСтроки(20);
    ОписаниеСтроки = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
	
	ТаблицаТоваров.Колонки.Добавить("ТоварКод", ОписаниеСтроки);
	ТаблицаТоваров.Колонки.Добавить("Количество", ОписаниеЧисла);

	Для Каждого СтрокаСТоварами Из ДанныеОЗаказе.skus Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		НоваяСтрока.ТоварКод = СокрЛП(СтрокаСТоварами.sku);
		НоваяСтрока.Количество = СтрокаСТоварами.qty;

	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблица.ТоварКод КАК ТоварКод,
		|	ВременнаяТаблица.Количество КАК Количество
		|ПОМЕСТИТЬ ТоварыКодВГХ
		|ИЗ
		|	&ТаблицаТоваров КАК ВременнаяТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	ТоварыКодВГХ.Количество КАК Количество
		|ПОМЕСТИТЬ ТоварыВГХ
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыКодВГХ КАК ТоварыКодВГХ
		|		ПО Номенклатура.IDN = ТоварыКодВГХ.ТоварКод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ЗДТТовары.КоличествоТребование = ТоварыВГХ.Количество, ЛОЖЬ) КАК СовпадениеСтрок
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров.Товары КАК ЗДТТовары
		|		ПОЛНОЕ СОЕДИНЕНИЕ ТоварыВГХ КАК ТоварыВГХ
		|		ПО ЗДТТовары.Номенклатура = ТоварыВГХ.Ссылка
		|ГДЕ
		|	ЗДТТовары.Ссылка = &Ссылка
		|	И НЕ(ЗДТТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён)
		|				ИЛИ ЗДТТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён))";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеОЗапросе.СсылкаНаЗапрос);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		
		ВсеТоварыЕсть = Выборка.СовпадениеСтрок;

	КонецЕсли;

	Возврат ВсеТоварыЕсть;

КонецФункции

Функция ДанныеОЗапросеДоступности(НомерЗапроса)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьЗаказ", Ложь);
	Результат.Вставить("СсылкаНаЗапрос", Документы.ЗапросДоступностиТоваров.ПустаяСсылка());
	Результат.Вставить("СсылкаНаЭН", Документы.ЭлектроннаяНакладная.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗДТ.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ЭН.Ссылка, ЗНАЧЕНИЕ(Документ.ЭлектроннаяНакладная.ПустаяСсылка)) КАК СсылкаЭН
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров КАК ЗДТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяНакладная КАК ЭН
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЭН.СрезПоследних КАК СтатусыЭН
		|			ПО (ЭН.Ссылка = СтатусыЭН.ДокументРегистратор)
		|				И (НЕ СтатусыЭН.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Отменена))
		|		ПО (ЗДТ.Ссылка = ЭН.ДокументОснование)
		|ГДЕ
		|	ЗДТ.Номер = &Номер
		|	И НЕ ЗДТ.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Номер", СокрЛП(НомерЗапроса));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();

	Если Выборка.Следующий() Тогда
		
		Результат.ЕстьЗаказ = Истина;
		Результат.СсылкаНаЗапрос = Выборка.Ссылка;
		Результат.СсылкаНаЭН = Выборка.СсылкаЭН;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ОтветСервиса(СтруктураОтвета)
	Если СтруктураОтвета.КодОтвета = 0 Тогда 
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки(СтруктураОтвета.ОтветJSON); 
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Иначе
		Если СтруктураОтвета.КодОтвета = 1 Тогда
			КодОшибки = "NO_1";
			ТекстОшибки = "Нет такого заказа";
		ИначеЕсли СтруктураОтвета.КодОтвета = 2 Тогда
			КодОшибки = "NO_2";
			ТекстОшибки = "ВГХ нет данных";
		ИначеЕсли СтруктураОтвета.КодОтвета = 3 Тогда
			КодОшибки = "NO_3";
			ТекстОшибки = "Ошибка записи документа в Рознице. Свяжитесь с ними";
		ИначеЕсли СтруктураОтвета.КодОтвета = 4 Тогда
			КодОшибки = "NO_4";
			ТекстОшибки = "Ошибка записи электронной накладной в Рознице. Свяжитесь с ними";
		ИначеЕсли СтруктураОтвета.КодОтвета = 5 Тогда
			КодОшибки = "NO_5";
			ТекстОшибки = "Ошибка создания ТТН в Рознице. Свяжитесь с ними";
		ИначеЕсли СтруктураОтвета.КодОтвета = 6 Тогда
			КодОшибки = "NO_6";
			ТекстОшибки = "Неверный тип докумена для печати";
		ИначеЕсли СтруктураОтвета.КодОтвета = 7 Тогда
			КодОшибки = "NO_7";
			ТекстОшибки = "Нет данных о списке товаров";
		ИначеЕсли СтруктураОтвета.КодОтвета = 8 Тогда
			КодОшибки = "NO_8";
			ТекстОшибки = "Не совпадает состав товаров в Рознице. Свяжитесь с ними";
		ИначеЕсли СтруктураОтвета.КодОтвета = 9 Тогда
			КодОшибки = "INVALID_DATAOFBIRTH";
			ТекстОшибки = "Неверная дата рождения";
		ИначеЕсли СтруктураОтвета.КодОтвета = 10 Тогда
			КодОшибки = "INVALID_KIDS";
			ТекстОшибки = "Неверно заполнены данные о детях";
		ИначеЕсли СтруктураОтвета.КодОтвета = 11 Тогда
			КодОшибки = "INVALID_GIFT_CODE";
			ТекстОшибки = "Сертификат не найден или не верный код";
		ИначеЕсли СтруктураОтвета.КодОтвета = 12 Тогда
			КодОшибки = "NO_CLIENT";
			ТекстОшибки = "Клиент по заданным параметрам не найден";
		ИначеЕсли СтруктураОтвета.КодОтвета = 13 Тогда
			КодОшибки = "INVALID_LANGUAGE";
			ТекстОшибки = "Не верно указан язык. Только UKR или RUS";
		ИначеЕсли СтруктураОтвета.КодОтвета = 14 Тогда
			КодОшибки = "INVALID_PHONENUMBER";
			ТекстОшибки = "Не верно указан номер телефона или клиент не найден";
		КонецЕсли;  
		
		ТекстОшибкиСтруктура = Новый Структура;
		ТекстОшибкиСтруктура.Вставить("message", ТекстОшибки);
		
		ИнформацияОбОшибке = Новый Структура;
		ИнформацияОбОшибке.Вставить("info", ТекстОшибкиСтруктура); 
		
		МассивОшибки = Новый Массив;
		МассивОшибки.Добавить(ИнформацияОбОшибке);
		
		ОтветСервераСтруктура = Новый Структура;
		ОтветСервераСтруктура.Вставить("error", МассивОшибки); 
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		ЗаписатьJSON(ЗаписьJSON, ОтветСервераСтруктура);
		Результат = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки(Результат); 
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		
		
	КонецЕсли;
	
	Возврат Ответ;
	
	
	
КонецФункции

Функция ПустаяСтруктураОтвета()
	Возврат Новый Структура("КодОтвета, ОтветJSON, Комментарий");
	
КонецФункции

Функция ПроверкаИмени(ИмяДляПроверки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИменаЛюдей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИменаЛюдей КАК ИменаЛюдей
		|ГДЕ
		|	(ИменаЛюдей.Наименование = &Наименование
		|			ИЛИ ИменаЛюдей.НаименованиеУкраинское = &Наименование)";
	
	Запрос.УстановитьПараметр("Наименование", ТРег(ИмяДляПроверки));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
КонецФункции

Функция Пол(ПолКлиента)
	Если ВРег(ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ПолФизическогоЛица.Женский)) = ВРег(ПолКлиента) Тогда 
		Результат = Перечисления.ПолФизическогоЛица.Женский;
	ИначеЕсли ВРег(ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ПолФизическогоЛица.Мужской)) = ВРег(ПолКлиента) Тогда
		Результат = Перечисления.ПолФизическогоЛица.Мужской;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ДанныеОПользователе (СсылкаНаКонтрагента)
	ДанныеВозврата = Новый Структура(
		"Код, Наименование, Блокирован, Верифицирован, 
		|ДатаРождения, СуммаНакоплений, НомерТелефона, 
		|КартыДисконта, Дети, Язык, СуммаБонусныхБалловАктивно,
		|СуммаБонусныхБалловРезерв"
		, ""
		, ""
		, Ложь
		, Ложь
		, '00010101'
		, 0
		, ""
		, Новый ТаблицаЗначений		
		, Новый ТаблицаЗначений		
		, ""
		, 0
		, 0
	);
	ДанныеВозврата.КартыДисконта.Колонки.Добавить("НомерКарты");
	ДанныеВозврата.КартыДисконта.Колонки.Добавить("Город");
	ДанныеВозврата.КартыДисконта.Колонки.Добавить("СуммаНакоплений");
	ДанныеВозврата.КартыДисконта.Колонки.Добавить("ПроцентСкидки");
	ДанныеВозврата.КартыДисконта.Колонки.Добавить("Блокирована");
	
	ДанныеВозврата.Дети.Колонки.Добавить("ИмяРебенка");
	ДанныеВозврата.Дети.Колонки.Добавить("ДатаРождения");
	ДанныеВозврата.Дети.Колонки.Добавить("Пол");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаКонтрагенты.Код КАК Код,
	|	ТаблицаКонтрагенты.Наименование КАК Наименование,
	|	ТаблицаКонтрагенты.Блокирован КАК Блокирован,
	|	ТаблицаКонтрагенты.ДатаРождения КАК ДатаРождения,
	|	ЕСТЬNULL(ТаблицаКарты.КодКарты, 0) КАК НомерКарты,
	|	ЕСТЬNULL(ТаблицаНакоплений.СуммаОстаток, 0) КАК СуммаНакоплений,
	|	ЕСТЬNULL(ТаблицаКарты.Магазин.Город.Наименование, """") КАК Город,
	|	ЕСТЬNULL(ТаблицаКарты.Блокирован, ИСТИНА) КАК Блокирована,
	|	ЕСТЬNULL(ТаблицаКарты.ДатаСледующегоОпроса <= &ТекДата
	|			И ТаблицаКарты.ДатаСледующегоОпроса <> ДАТАВРЕМЯ(1, 1, 1), ИСТИНА) КАК НужнаВерификация,
	|	ТаблицаКарты.ДатаСледующегоОпроса КАК ДатаСледующегоОпроса,
	|	ТаблицаКарты.ДатаПоследнегоОпроса КАК ДатаПоследнегоОпроса,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаАтрибутов.Язык, ЗНАЧЕНИЕ(Перечисление.ЯзыкКонтрагента.Украинский)) = ЗНАЧЕНИЕ(Перечисление.ЯзыкКонтрагента.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ЯзыкКонтрагента.Украинский)
	|		ИНАЧЕ ТаблицаАтрибутов.Язык
	|	КОНЕЦ КАК Язык
	|ИЗ
	|	Справочник.Контрагенты КАК ТаблицаКонтрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ТаблицаКарты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(
	|					,
	|					ВладелецДисконтнойКарты ССЫЛКА Справочник.Контрагенты
	|						И ВладелецДисконтнойКарты = &Контрагент) КАК ТаблицаНакоплений
	|			ПО ТаблицаКарты.Ссылка = ТаблицаНакоплений.ДисконтнаяКарта
	|		ПО (ТаблицаКарты.ВладелецКарты ССЫЛКА Справочник.Контрагенты)
	|			И ТаблицаКонтрагенты.Ссылка = ТаблицаКарты.ВладелецКарты
	|			И (НЕ ТаблицаКарты.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлючевыеАтрибутыКонтрагентов.СрезПоследних(
	|				&ТекДата,
	|				Объект = &Контрагент
	|					И УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.Magento)) КАК ТаблицаАтрибутов
	|		ПО (ТаблицаАтрибутов.Объект = ТаблицаКонтрагенты.Ссылка)
	|ГДЕ
	|	ТаблицаКонтрагенты.Ссылка = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКонтакты.НомерТелефона КАК НомерТелефона
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтакты
	|ГДЕ
	|	ТаблицаКонтакты.Ссылка = &Контрагент
	|	И ТаблицаКонтакты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыДети.Имя КАК ИмяРебенка,
	|	КонтрагентыДети.ДатаРождения КАК ДатаРождения,
	|	КонтрагентыДети.Пол КАК Пол
	|ИЗ
	|	Справочник.Контрагенты.Дети КАК КонтрагентыДети
	|ГДЕ
	|	КонтрагентыДети.Ссылка = &Контрагент"
	);
	Запрос.УстановитьПараметр("Контрагент", СсылкаНаКонтрагента);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаСеанса());
	
	Результаты = Запрос.ВыполнитьПакет();
	Запрос     = Неопределено;

	КартыВыборка = Результаты[0].Выбрать();
	
	УжеПолучено = Ложь;

	Пока КартыВыборка.Следующий() Цикл
		Если Не УжеПолучено Тогда 
			ДанныеВозврата.Код = СокрЛП(КартыВыборка.Код);
			ДанныеВозврата.Наименование = СокрЛП(КартыВыборка.Наименование);
			ДанныеВозврата.Блокирован   = КартыВыборка.Блокирован;
			ДанныеВозврата.ДатаРождения = КартыВыборка.ДатаРождения;
			ДанныеВозврата.Язык = КартыВыборка.Язык;
			ДанныеВозврата.Верифицирован = Не КартыВыборка.НужнаВерификация;
			
			ИспользоватьБонуснуюСистему = БонусныеБаллыПовтИсп.ИспользоватьБонуснуюСистему();
			
			СуммаБонусныхБаллов			= 0; 
			СуммаБонусныхБалловВРезерве	= 0;
			
			Если ИспользоватьБонуснуюСистему Тогда
				
				ПараметрыЗапроса = Новый Структура(
				"ТипыБонусов, ТолькоТекущийОстаток, Команда"
				, ОбщегоНазначенияКлиентСервер.AAD(Перечисления.ТипыБонусов.Привлечение, Перечисления.ТипыБонусов.Органический, Перечисления.ТипыБонусов.Акционный)
				, Истина
				, "ОбщееСостояниеСчёта"
				);
				
				ДанныеОтвета = БонусныеБаллыСервер.BPS_ПолучитьОстатокБонусныхБаллов(СсылкаНаКонтрагента, ПараметрыЗапроса);
				
				Если ДанныеОтвета.Ошибка = Ложь Тогда
					
					ББ_ПериодРасчета = ДанныеОтвета.ДанныеСчёта.Период;
					
					СуммаБонусныхБаллов			= ДанныеОтвета.ДанныеСчёта.СуммаБонусныхБаллов;
					СуммаБонусныхБалловВРезерве	= ДанныеОтвета.ДанныеСчёта.СуммаБонусныхБалловВРезерве;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ДанныеВозврата.СуммаБонусныхБалловАктивно = СуммаБонусныхБаллов;
			ДанныеВозврата.СуммаБонусныхБалловРезерв = СуммаБонусныхБалловВРезерве;

			
			УжеПолучено = Истина;
		КонецЕсли;
		
		СтрокаТаблицы = ДанныеВозврата.КартыДисконта.Добавить();
		СтрокаТаблицы.НомерКарты = СокрЛП(КартыВыборка.НомерКарты);
		СтрокаТаблицы.Город      = КартыВыборка.Город;
		СтрокаТаблицы.СуммаНакоплений = КартыВыборка.СуммаНакоплений;
		СтрокаТаблицы.Блокирована = КартыВыборка.Блокирована;			
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ТаблицаСкидки.ЗначениеСкидкиНаценки), 0) КАК ПроцентСкидки
		|ИЗ
		|	Справочник.СкидкиНаценки КАК ТаблицаСкидки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК ТабличнаяЧасть
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК ТаблицаУсловия
		|			ПО ТабличнаяЧасть.УсловиеПредоставления = ТаблицаУсловия.Ссылка
		|		ПО ТаблицаСкидки.Ссылка = ТабличнаяЧасть.Ссылка
		|ГДЕ
		|	НЕ ТаблицаСкидки.ПометкаУдаления
		|	И ТаблицаСкидки.ДисконтныйКлуб = ИСТИНА
		|	И ТаблицаСкидки.Родитель = ЗНАЧЕНИЕ(Справочник.СкидкиНаценки.ДисконтныеКарты)
		|	И ТаблицаУсловия.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж)
		|	И ТаблицаУсловия.ЗначениеУсловияОграничения <= &СуммаПокупок"
		);
		Запрос.УстановитьПараметр("СуммаПокупок", КартыВыборка.СуммаНакоплений);

		ДанныеВыборка = Запрос.Выполнить().Выбрать();
		ДанныеВыборка.Следующий();

		СтрокаТаблицы.ПроцентСкидки = ДанныеВыборка.ПроцентСкидки;
		
		ДанныеВозврата.СуммаНакоплений = ДанныеВозврата.СуммаНакоплений + КартыВыборка.СуммаНакоплений;
		
	КонецЦикла;
	
	Если НЕ Результаты[1].Пустой() Тогда

		ОбщаяВыборка = Результаты[1].Выбрать();
		ОбщаяВыборка.Следующий();

		ДанныеВозврата.НомерТелефона = СокрЛП(ОбщаяВыборка.НомерТелефона);

	КонецЕсли;

	Если НЕ Результаты[2].Пустой() Тогда

		ОбщаяВыборка = Результаты[2].Выбрать();
		Пока ОбщаяВыборка.Следующий() Цикл 
			СтрокаТаблицы = ДанныеВозврата.Дети.Добавить();
			СтрокаТаблицы.ИмяРебенка = СокрЛП(ОбщаяВыборка.ИмяРебенка);
			СтрокаТаблицы.Пол      = ОбщаяВыборка.Пол;
			СтрокаТаблицы.ДатаРождения = ОбщаяВыборка.ДатаРождения;
		КонецЦикла;
		
	КонецЕсли;
	
	возврат ДанныеВозврата;
	
КонецФункции

Процедура ИзменитьЯзыкКонтрагента(СоставДанных, ЯзыкКонтрагента)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаАтрибуты.ID КАК ID,
	|	ТаблицаАтрибуты.Наименование КАК Наименование,
	|	ТаблицаАтрибуты.Фамилия КАК Фамилия,
	|	ТаблицаАтрибуты.Имя КАК Имя,
	|	ТаблицаАтрибуты.Отчество КАК Отчество,
	|	ТаблицаАтрибуты.ДатаРождения КАК ДатаРождения,
	|	ТаблицаАтрибуты.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	|	ТаблицаАтрибуты.Язык КАК Язык
	|ИЗ
	|	РегистрСведений.КлючевыеАтрибутыКонтрагентов.СрезПоследних КАК ТаблицаАтрибуты
	|ГДЕ
	|	ТаблицаАтрибуты.Объект = &Контрагент
	|	И ТаблицаАтрибуты.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.Magento)"
	);
	Запрос.УстановитьПараметр("Контрагент", СоставДанных.Контрагент);

	РезультатЗапроса = Запрос.Выполнить();

	//Если Не РезультатЗапроса.Пустой() Тогда
		
		АтрибутыВыборка = РезультатЗапроса.Выбрать();
		АтрибутыВыборка.Следующий();
		
		Если Не ((ЯзыкКонтрагента = "UKR" И АтрибутыВыборка.Язык = Перечисления.ЯзыкКонтрагента.Украинский) 
				Или (ЯзыкКонтрагента = "RUS" И АтрибутыВыборка.Язык = Перечисления.ЯзыкКонтрагента.Русский)) Тогда 

			ТекущаяДатаЗаписи = ТекущаяДатаСеанса();	
			НаборЗаписей = РегистрыСведений.КлючевыеАтрибутыКонтрагентов.СоздатьНаборЗаписей();
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			ОбменДаннымиСервер.УстановитьВсехПолучателей(НаборЗаписей.ОбменДанными.Получатели, "ПоМагазину");

			НаборЗаписей.Отбор.Период.Установить(ТекущаяДатаЗаписи);
			НаборЗаписей.Отбор.Объект.Установить(СоставДанных.Контрагент);
			НаборЗаписей.Отбор.УчетнаяСистема.Установить(Перечисления.УчетныеСистемыКомпании.Magento);

			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.Период = НаборЗаписей.Отбор.Период.Значение;
			ЗаписьНабора.Объект = НаборЗаписей.Отбор.Объект.Значение;
			ЗаписьНабора.УчетнаяСистема = НаборЗаписей.Отбор.УчетнаяСистема.Значение;

			ЗаписьНабора.ID				= АтрибутыВыборка.ID;
			ЗаписьНабора.Наименование	= АтрибутыВыборка.Наименование;
			ЗаписьНабора.Фамилия		= АтрибутыВыборка.Фамилия;
			ЗаписьНабора.Имя			= АтрибутыВыборка.Имя;
			ЗаписьНабора.Отчество		= АтрибутыВыборка.Отчество;
			ЗаписьНабора.ДатаРождения	= АтрибутыВыборка.ДатаРождения;
			ЗаписьНабора.Язык 			= ?(ЯзыкКонтрагента = "UKR", Перечисления.ЯзыкКонтрагента.Украинский, Перечисления.ЯзыкКонтрагента.Русский);
			
			ЗаписьНабора.ДатаСоздания	= ОбщегоНазначенияКлиентСервер.УникальныйИдентификаторВремя(СоставДанных.Контрагент.УникальныйИдентификатор());
			ЗаписьНабора.ДатаИзменения	= ТекущаяДатаЗаписи;

			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	//КонецЕсли;

КонецПроцедуры

Функция VGHPOST(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции

#КонецОбласти
