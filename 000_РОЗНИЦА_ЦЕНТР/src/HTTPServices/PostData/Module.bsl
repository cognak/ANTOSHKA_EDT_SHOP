#Область ОбработчикиСобытий

Функция PrintPOST(ЗапросСервиса)

	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОтвета = ПустаяСтруктураОтвета();
	СтруктураОтвета.КодОтвета = 0;
	
	СтрокаЗапроса = ЗапросСервиса.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаЗапроса);
	Результат = ПрочитатьJSON(ЧтениеJSON);
	
	ДанныеОЗапросе = ДанныеОЗапросеДоступности(Результат.order);
	
	Если Не (Результат.Свойство("order") И ДанныеОЗапросе.ЕстьЗаказ) И Результат.type <> "reestr" Тогда
		
		СтруктураОтвета.КодОтвета = 1;
		
	ИначеЕсли Не (Результат.Свойство("type") 
			И (Результат.type = "docs" ИЛИ Результат.type = "sticker" ИЛИ Результат.type = "reestr")) Тогда 	
		
		СтруктураОтвета.КодОтвета = 6;
		
	Иначе
		
		ОтветСервераСтруктура = Новый Структура;

		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("status", "OK"); 
		
		Если Результат.type = "docs" Тогда

			СтруктураДанных.Вставить("doc", ДанныеОЗапросе.ПутьКФайлуТТННакладная); 

		ИначеЕсли Результат.type = "sticker" Тогда 
			
			СтруктураДанных.Вставить("doc", ДанныеОЗапросе.ПутьКФайлуСтикера); 
			
		Иначе

			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
				|	РеестрЭН.Дата КАК Дата,
				|	РеестрЭН.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.РеестрЭН КАК РеестрЭН
				|ГДЕ
				|	РеестрЭН.Номер = &Номер
				|
				|УПОРЯДОЧИТЬ ПО
				|	Дата УБЫВ";
				
			Запрос.УстановитьПараметр("Номер", Результат.number);

			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				РеестрНПСтруктура = ОбменНПСервер.ПолучитьФайлРеестра(Выборка.Ссылка);
				Если РеестрНПСтруктура.ЕстьДокумет Тогда
					СтруктураДанных.Вставить("doc", РеестрНПСтруктура.СсылкаНаДокумент);
				Иначе
					СтруктураДанных.Вставить("error", "Реестр пуст");
				КонецЕсли;
				
				ОбъектДокумент = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектДокумент.Напечатан = Истина;
				ОбъектДокумент.Записать();
				
			Иначе

				ОтветСервераСтруктура.Вставить("info",
					Новый Структура("message", "Реестр не создан")); 
				
				СтруктураДанных.Вставить("error", "Реестр не создан");
				СтруктураДанных.Вставить("status", "error"); 
			КонецЕсли;
		КонецЕсли;

		СтруктураДанных.Вставить("roznica", Истина); 
		
		МассивДанных = Новый Массив;
		МассивДанных.Добавить(СтруктураДанных);
		
		ОтветСервераСтруктура.Вставить("success", МассивДанных); 
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		ЗаписатьJSON(ЗаписьJSON, ОтветСервераСтруктура);
		Результат = ЗаписьJSON.Закрыть();
		
		СтруктураОтвета.ОтветJSON = Результат;

	КонецЕсли;
		
	Возврат ОтветСервиса(СтруктураОтвета);

КонецФункции

Функция ParcelPOST(ЗапросСервиса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОтвета = ПустаяСтруктураОтвета();
	СтруктураОтвета.КодОтвета = 0;
	
	СтрокаЗапроса = ЗапросСервиса.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаЗапроса);
	Результат = ПрочитатьJSON(ЧтениеJSON);
	
	ДанныеОЗапросе = ДанныеОЗапросеДоступности(Результат.order);
	
	Если Не (Результат.Свойство("order") И ДанныеОЗапросе.ЕстьЗаказ) Тогда
		
		СтруктураОтвета.КодОтвета = 1;
		
	ИначеЕсли Не (Результат.Свойство("data")
			И ТипЗнч(Результат.data) = Тип("Массив")
			И Результат.data.Количество() <> 0) Тогда  
		
		СтруктураОтвета.КодОтвета = 2;

	ИначеЕсли Не (Результат.Свойство("skus")
			И ТипЗнч(Результат.data) = Тип("Массив")
			И Результат.skus.Количество() <> 0) Тогда  
		
		СтруктураОтвета.КодОтвета = 7;

	ИначеЕсли Не СопоставитьТовары(Результат, ДанныеОЗапросе) Тогда  
		
		СтруктураОтвета.КодОтвета = 8;

	Иначе
	
		ДокументОбъект = ДанныеОЗапросе.СсылкаНаЗапрос.ПолучитьОбъект();
		
		ДокументОбъект.Упаковки.Очистить();
	
		Для Каждого СтрокаВГХ Из Результат.data Цикл
		
			НоваяСтрока = ДокументОбъект.Упаковки.Добавить();
			НоваяСтрока.Ширина = СтрокаВГХ.seat_width;
			НоваяСтрока.Высота = СтрокаВГХ.seat_height;
			НоваяСтрока.Глубина = СтрокаВГХ.seat_length;
			НоваяСтрока.Вес = СтрокаВГХ.seat_weight;
			
		КонецЦикла;

		Попытка
			
			ДокументОбъект.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.КОтправке;

			ДокументОбъект.Записать();
		
		Исключение
			СтруктураОтвета.КодОтвета = 3;
			СтруктураОтвета.ТекстОшибки = ОписаниеОшибки();
		КонецПопытки;
		
	КонецЕсли;

	Если СтруктураОтвета.КодОтвета = 0 Тогда

		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("status", "OK"); 
		
		МассивДанных = Новый Массив;
		МассивДанных.Добавить(СтруктураДанных);
		
		ОтветСервераСтруктура = Новый Структура;
		ОтветСервераСтруктура.Вставить("success", МассивДанных); 
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		ЗаписатьJSON(ЗаписьJSON, ОтветСервераСтруктура);
		Результат = ЗаписьJSON.Закрыть();
		
		СтруктураОтвета.ОтветJSON = Результат;

	КонецЕсли;
	
	Возврат ОтветСервиса(СтруктураОтвета);
КонецФункции

Функция ParcelGET(ЗапросСервиса)

	УстановитьПривилегированныйРежим(Истина);

	СтруктураОтвета = ПустаяСтруктураОтвета();
	СтруктураОтвета.КодОтвета = 0;
	
	Токен = ЗапросСервиса.ПараметрыЗапроса.Получить("key");
	НомерЗаказа = ЗапросСервиса.ПараметрыЗапроса.Получить("order");

	Если Токен = Неопределено Тогда

		СтруктураОтвета.КодОтвета = 9;
		
	ИначеЕсли НомерЗаказа = Неопределено Тогда 

		СтруктураОтвета.КодОтвета = 10;
				
	ИначеЕсли Не Токен = "9a23a849787bb1388b8b8fa23f3aa789" Тогда 

		СтруктураОтвета.КодОтвета = 11;
				
	КонецЕсли;
		
	Если СтруктураОтвета.КодОтвета = 0 Тогда

		МассивДанныхЗаказа = Новый Массив;

		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаЗапросаТовары.Номенклатура.IDN КАК НоменклатураIDN,
			|	ТаблицаЗапросаТовары.Номенклатура.Наименование КАК НоменклатураНаименование,
			|	ТаблицаЗапросаТовары.КоличествоТребование КАК Количество,
			|	ТаблицаЗапросаТовары.Ссылка КАК Ссылка,
			|	ТаблицаЗапросаТовары.Ссылка.СтатусЗапроса КАК СтатусЗапроса
			|ИЗ
			|	Документ.ЗапросДоступностиТоваров.Товары КАК ТаблицаЗапросаТовары
			|ГДЕ
			|	ТаблицаЗапросаТовары.Ссылка.Номер = &Номер
			|	И НЕ (ТаблицаЗапросаТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён)
			|	ИЛИ ТаблицаЗапросаТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён))";
		
		Запрос.УстановитьПараметр("Номер", СокрЛП(НомерЗаказа));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			СтруктураОтвета.КодОтвета = 12;
			
		Иначе
		
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				СсылкаНаДокумент = Выборка.Ссылка;
				
				СтрокаЗаказаСтруктура = Новый Структура("sku, title, qty",
						Выборка.НоменклатураIDN,
						Выборка.НоменклатураНаименование,
						Выборка.Количество);
				
				МассивДанныхЗаказа.Добавить(СтрокаЗаказаСтруктура);
				
				СтатусЗапроса = Выборка.СтатусЗапроса;
				
			КонецЦикла;
			
			Попытка
			
				Если СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Новый
						Или СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.ВРаботе Тогда
			
					ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
		
					Для Каждого СтрокаТовара Из ДокументОбъект.Товары Цикл
						
						СтрокаТовара.Количество = СтрокаТовара.КоличествоТребование;
						
					КонецЦикла;

					ДокументОбъект.СтатусЗапроса = Перечисления.СтатусыЗапросовДоступностиТоваровШапка.Согласован;
					ДокументОбъект.Записать();
					
				КонецЕсли;

				СтруктураДанныхЗаказа = Новый Структура;
				СтруктураДанныхЗаказа.Вставить("cargo", Новый Массив); 
				СтруктураДанныхЗаказа.Вставить("products", МассивДанныхЗаказа); 
		
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("status", "OK"); 
				СтруктураДанных.Вставить("data", СтруктураДанныхЗаказа); 
				
				МассивДанных = Новый Массив;
				МассивДанных.Добавить(СтруктураДанных);
				
				ОтветСервераСтруктура = Новый Структура;
				ОтветСервераСтруктура.Вставить("success", МассивДанных); 
				
				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку();
				
				ЗаписатьJSON(ЗаписьJSON, ОтветСервераСтруктура);
				Результат = ЗаписьJSON.Закрыть();
				
				СтруктураОтвета.ОтветJSON = Результат;
			
			Исключение
				СтруктураОтвета.КодОтвета = 3;
				СтруктураОтвета.ТекстОшибки = ОписаниеОшибки();
			КонецПопытки;

		КонецЕсли;

	КонецЕсли;

	Возврат ОтветСервиса(СтруктураОтвета);

КонецФункции

Функция TTNPOST(ЗапросСервиса)
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОтвета = ПустаяСтруктураОтвета();
	СтруктураОтвета.КодОтвета = 0;
	
	СтрокаЗапроса = ЗапросСервиса.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаЗапроса);
	Результат = ПрочитатьJSON(ЧтениеJSON);
	
	ДанныеОЗапросе = ДанныеОЗапросеДоступности(Результат.order);
	
	СтруктураОтвета.НомерЗаказа = ДанныеОЗапросе.НомерЗаказа;
	СтруктураОтвета.НомерЗапроса = ДанныеОЗапросе.НомерЗапроса;
	СтруктураОтвета.Ответственный = ДанныеОЗапросе.Ответственный;

	Если Не (Результат.Свойство("order") И ДанныеОЗапросе.ЕстьЗаказ) Тогда
		
		СтруктураОтвета.КодОтвета = 1;
	
	ИначеЕсли Не ДанныеОЗапросе.ПрошлаБезнальнаяОплата Тогда
		
		СтруктураОтвета.КодОтвета = 13;
	
	ИначеЕсли (ДанныеОЗапросе.СсылкаНаЭН = Документы.ЭлектроннаяНакладная.ПустаяСсылка()) Тогда
		
		НовыйДокумент = Документы.ЭлектроннаяНакладная.СоздатьДокумент();
		НовыйДокумент.Заполнить(ДанныеОЗапросе.СсылкаНаЗапрос);
		Попытка
			
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			ДанныеОЗапросе.СсылкаНаЭН = НовыйДокумент.Ссылка;
			
		Исключение
			СтруктураОтвета.КодОтвета = 4;
		КонецПопытки;
	
	КонецЕсли;
	
	Если СтруктураОтвета.КодОтвета = 0 Тогда

		Попытка
			
			Если ПустаяСтрока(ДанныеОЗапросе.ВнешняяСсылка) Тогда
				ОтветЭН = ОбменНПСервер.РегистрацияЕН(ДанныеОЗапросе.СсылкаНаЭН);
				Если ОтветЭН.Успех Тогда
	
					ДокументОбъект = ДанныеОЗапросе.СсылкаНаЭН.ПолучитьОбъект();
					ДокументОбъект.ДатаДоставки = ОтветЭН.ДатаДоставки;
					ДокументОбъект.СуммаДоставки = ОтветЭН.СуммаОтОператора;
					ДокументОбъект.Номер = ОтветЭН.НомерТТН;
					ДокументОбъект.ВнешняяСсылка = ОтветЭН.ТТНRef;
					ДокументОбъект.Записать();
					ОбменНПСервер.ПолучитьСтатусТТН(, ДокументОбъект.Номер, Истина);
					ФайлыДляНакладной = ОбменНПСервер.СохранитьТТНвPDF(ОтветЭН);
					ДокументОбъект.ПутьКФайлуТТН = ФайлыДляНакладной.ПутьКФайлуТТН;
					ДокументОбъект.ПутьКФайлуТТННакладная = ФайлыДляНакладной.ПутьКФайлуТТННакладная;
					ДокументОбъект.ПутьКФайлуСтикера = ФайлыДляНакладной.ПутьКФайлуСтикера;
					ДокументОбъект.Записать();
					
					ДанныеОЗапросе = ДанныеОЗапросеДоступности(Результат.order);
	
				Иначе
					СтруктураОтвета.КодОтвета = 5;
					СтруктураОтвета.ТекстОшибки = ОтветЭН.ТексОшибки;
				КонецЕсли;
			КонецЕсли;
	
			НомерТТН = ДанныеОЗапросе.Номер;
			РеестрВнешняяСсылка = ДанныеОЗапросе.РеестрВнешняяСсылка;
			РеестрНапечатан = ДанныеОЗапросе.РеестрНапечатан;
			РеестрНомер = ДанныеОЗапросе.РеестрНомер;
			РеестрДата = Формат(ДанныеОЗапросе.РеестрДата,"ДФ=yyyyMMddHHmmss;");
			
		Исключение
			
			СтруктураОтвета.КодОтвета = 4;
			
		КонецПопытки;
		
	КонецЕсли;

	Если СтруктураОтвета.КодОтвета = 0 Тогда
	
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("status", "OK"); 
		СтруктураДанных.Вставить("np_number", НомерТТН); 
		СтруктураДанных.Вставить("reestr_ref", РеестрВнешняяСсылка); 
		СтруктураДанных.Вставить("reestr_printing", РеестрНапечатан); 
		СтруктураДанных.Вставить("reestr_number", РеестрНомер); 
		СтруктураДанных.Вставить("reestr_date", РеестрДата); 
		
		МассивДанных = Новый Массив;
		МассивДанных.Добавить(СтруктураДанных);
		
		ОтветСервераСтруктура = Новый Структура;
		ОтветСервераСтруктура.Вставить("success", МассивДанных); 
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		ЗаписатьJSON(ЗаписьJSON, ОтветСервераСтруктура);
		Результат = ЗаписьJSON.Закрыть();
		
		СтруктураОтвета.ОтветJSON = Результат;

	КонецЕсли;
	
	Возврат ОтветСервиса(СтруктураОтвета);
КонецФункции

Функция LiqPayPOST(ЗапросСервиса)
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОтвета = ПустаяСтруктураОтвета();
	СтруктураОтвета.КодОтвета = 0;
	
	СтрокаЗапроса = ЗапросСервиса.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	ЖурналСобытий.Регистрация("LiqPay.Оплата"
		, 
		, 
		, 
		, Новый ХранилищеЗначения(СтрокаЗапроса)
		,  
		, СтрокаЗапроса
		, Ложь
		, Ложь);
		
	ОбменСБанкамиСервер.ОбработкаОтветаПоЗаказуLiqPay(СтрокаЗапроса);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("status", "OK"); 
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(СтруктураДанных);
	
	ОтветСервераСтруктура = Новый Структура;
	ОтветСервераСтруктура.Вставить("success", МассивДанных); 
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, ОтветСервераСтруктура);
	Результат = ЗаписьJSON.Закрыть();
	
	СтруктураОтвета.ОтветJSON = Результат;
	
	
	Возврат ОтветСервиса(СтруктураОтвета);  

КонецФункции

Функция EsputnikPOST(ЗапросСервиса)

	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОтвета = ПустаяСтруктураОтвета();
	СтруктураОтвета.КодОтвета = 0;
	
	СтрокаЗапроса = ЗапросСервиса.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаЗапроса);
	ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON);
	
	Для Каждого СтрокаДанных Из ДанныеОтвета Цикл
		
		Если СтрокаДанных.mediaType = "viber" Тогда

			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ЗаказПокупателя.Ссылка
				|ИЗ
				|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
				|ГДЕ
				|	ЗаказПокупателя.Номер = &Номер";
			
			Запрос.УстановитьПараметр("Номер", СтрокаДанных.sourceEventKey);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				Если СтрокаДанных.messageTag = "order_new" Тогда
					
					ТипСообщенияТекст = "новый заказ"; 
					
				ИначеЕсли СтрокаДанных.messageTag = "order_complectation" Тогда
					
					ТипСообщенияТекст = "комплектация заказа"; 
					
				ИначеЕсли СтрокаДанных.messageTag = "order_delievery" Тогда
					
					ТипСообщенияТекст = "сборка заказа"; 
					
				ИначеЕсли СтрокаДанных.messageTag = "order_paidonline" Тогда
					
					ТипСообщенияТекст = "забрать оплаченый заказ"; 
					
				ИначеЕсли СтрокаДанных.messageTag = "order_paycash" Тогда
					
					ТипСообщенияТекст = "забрать и оплатить на кассе"; 
					
				ИначеЕсли СтрокаДанных.messageTag = "order_readynp6day" Тогда
					
					ТипСообщенияТекст = "напоминание, что посылка ждёт на почте"; 
					
				ИначеЕсли СтрокаДанных.messageTag = "order_delivered" Тогда
					
					ТипСообщенияТекст = "получена клиентом или отказ от получения"; 
					
				ИначеЕсли СтрокаДанных.messageTag = "order_readynp" Тогда
					
					ТипСообщенияТекст = "готово к отправке";
					
				Иначе
					 
					ТипСообщенияТекст = СтрокаДанных.messageTag;

				КонецЕсли;
				
				Если СтрокаДанных.activityStatus = "READ" Тогда
					
					СтатусТекст = "ПРОЧТЕНО"; 
					
				ИначеЕсли СтрокаДанных.activityStatus = "DELIVERED" Тогда
					
					СтатусТекст = "ДОСТАВЛЕНО"; 
					
				Иначе
					 
					СтатусТекст = СтрокаДанных.activityStatus;

				КонецЕсли;
				
				РегистрыСведений.КомментарийИнтернетЗаказа.ЗаписьКомментария(Выборка.Ссылка,
					,
					"Событие " + СтрокаДанных.messageName + " (" + ТипСообщенияТекст + ") в статусе " + СтатусТекст);
			
			КонецЕсли;

		КонецЕсли;
	
	КонецЦикла;

	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("status", "OK"); 
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(СтруктураДанных);
	
	ОтветСервераСтруктура = Новый Структура;
	ОтветСервераСтруктура.Вставить("success", МассивДанных); 
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, ОтветСервераСтруктура);
	Результат = ЗаписьJSON.Закрыть();
	
	СтруктураОтвета.ОтветJSON = Результат;
	
	
	Возврат ОтветСервиса(СтруктураОтвета);  
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ОтправкаПочты(СтруктураОтправки) Экспорт

	//УчетныеДанныеОтправителя = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("СостояниеЗД", Истина);
	УчетныеДанныеОтправителя = РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись();
	Результат = Новый Структура("ПочтаОтправлена, ТекстОтвета", Ложь, "");
	ОтправлятьПочту = Ложь;
	
	Если Не УчетныеДанныеОтправителя.Пустая() Тогда
		Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
			Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("УправлениеКонтактнойИнформацией");
			ОтветственныйПочта = Модуль.ПолучитьКонтактнуюИнформацияОбъекта(
					СтруктураОтправки.Ответственный, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
			Адрес = "sklad3@redhead.ua;
			|im@antoshka.ua;
			|e-comm@antoshka.ua;
			|yana.tsviatkova@redhead.ua;" + ОтветственныйПочта;
			
			Если СтруктураОтправки.КодОтвета = 5 Тогда
				ОтправлятьПочту = Истина;
				Тема = "Ошибка при формировании ТТН на Центральном складе по заказу №"
						+ СтруктураОтправки.НомерЗаказа
						+ ", запрос №"
						+ СтруктураОтправки.НомерЗапроса;

				ТелоПисьма =  "Ошибка при формировании ТТН на Центральном складе по заказу №"
						+ СтруктураОтправки.НомерЗаказа
						+ ", запрос №"
						+ СтруктураОтправки.НомерЗапроса
						+ "." + Символы.ПС
						+ "ОШИБКА НОВОЙ ПОЧТЫ!!!" + Символы.ПС
						+ СтруктураОтправки.ТекстОшибки;

			ИначеЕсли СтруктураОтправки.КодОтвета = 13 Тогда
				ОтправлятьПочту = Истина;
				Тема = "Не сформирована ТТН, недостаточно оплат по заказу №"
						+ СтруктураОтправки.НомерЗаказа
						+ ", запрос №"
						+ СтруктураОтправки.НомерЗапроса;

				ТелоПисьма =  "Не сформирована ТТН, недостаточно оплат по заказу №"
						+ СтруктураОтправки.НомерЗаказа
						+ ", запрос №"
						+ СтруктураОтправки.НомерЗапроса
						+ ".";

			КонецЕсли;
			
			ПараметрыПисьма = Новый Структура;
			ПараметрыПисьма.Вставить("Кому", Адрес);
			ПараметрыПисьма.Вставить("Тема", Тема);
			ПараметрыПисьма.Вставить("Тело", ТелоПисьма);
			
			Если ОтправлятьПочту Тогда
				Результат.ТекстОтвета = ЭлектроннаяПочта.ОтправитьПочтовоеСообщение(УчетныеДанныеОтправителя, ПараметрыПисьма);
			КонецЕсли;

			Результат.ПочтаОтправлена = Истина;
	
		КонецЕсли;
	
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция СопоставитьТовары(ДанныеОЗаказе, ДанныеОЗапросе)
	
	ВсеТоварыЕсть = Ложь;

	ТаблицаТоваров = Новый ТаблицаЗначений();
	КвалификаторыЧисла = Новый КвалификаторыЧисла(10);
    ОписаниеЧисла = Новый ОписаниеТипов("Число", КвалификаторыЧисла);

    КвалификаторыСтроки = Новый КвалификаторыСтроки(20);
    ОписаниеСтроки = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
	
	ТаблицаТоваров.Колонки.Добавить("ТоварКод", ОписаниеСтроки);
	ТаблицаТоваров.Колонки.Добавить("Количество", ОписаниеЧисла);

	Для Каждого СтрокаСТоварами Из ДанныеОЗаказе.skus Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		НоваяСтрока.ТоварКод = СокрЛП(СтрокаСТоварами.sku);
		НоваяСтрока.Количество = СтрокаСТоварами.qty;

	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблица.ТоварКод КАК ТоварКод,
		|	ВременнаяТаблица.Количество КАК Количество
		|ПОМЕСТИТЬ ТоварыКодВГХ
		|ИЗ
		|	&ТаблицаТоваров КАК ВременнаяТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	ТоварыКодВГХ.Количество КАК Количество
		|ПОМЕСТИТЬ ТоварыВГХ
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыКодВГХ КАК ТоварыКодВГХ
		|		ПО Номенклатура.IDN = ТоварыКодВГХ.ТоварКод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ЗДТТовары.КоличествоТребование = ТоварыВГХ.Количество, ЛОЖЬ) КАК СовпадениеСтрок
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров.Товары КАК ЗДТТовары
		|		ПОЛНОЕ СОЕДИНЕНИЕ ТоварыВГХ КАК ТоварыВГХ
		|		ПО ЗДТТовары.Номенклатура = ТоварыВГХ.Ссылка
		|ГДЕ
		|	ЗДТТовары.Ссылка = &Ссылка
		|	И НЕ(ЗДТТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Отменён)
		|				ИЛИ ЗДТТовары.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапросовДоступностиТоваров.Удалён))";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеОЗапросе.СсылкаНаЗапрос);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		
		ВсеТоварыЕсть = Выборка.СовпадениеСтрок;

	КонецЕсли;

	Возврат ВсеТоварыЕсть;

КонецФункции

Функция ДанныеОЗапросеДоступности(НомерЗапроса)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьЗаказ", Ложь);
	Результат.Вставить("СсылкаНаЗапрос", Документы.ЗапросДоступностиТоваров.ПустаяСсылка());
	Результат.Вставить("СсылкаНаЭН", Документы.ЭлектроннаяНакладная.ПустаяСсылка());
	Результат.Вставить("ПутьКФайлуТТННакладная", "");
	Результат.Вставить("ПутьКФайлуСтикера", "");
	Результат.Вставить("ВнешняяСсылка", "");
	Результат.Вставить("Номер", "");
	Результат.Вставить("РеестрНомер", "");
	Результат.Вставить("РеестрНапечатан", "");
	Результат.Вставить("РеестрВнешняяСсылка", "");
	Результат.Вставить("РеестрДата", "");
	Результат.Вставить("ПрошлаБезнальнаяОплата", Ложь);
	Результат.Вставить("НомерЗаказа", "");
	Результат.Вставить("НомерЗапроса", "");
	Результат.Вставить("Ответственный", Справочники.Пользователи.ПустаяСсылка());

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗДТ.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ЭН.Ссылка, ЗНАЧЕНИЕ(Документ.ЭлектроннаяНакладная.ПустаяСсылка)) КАК СсылкаЭН,
		|	ЕСТЬNULL(ЭН.ПутьКФайлуСтикера, """") КАК ПутьКФайлуСтикера,
		|	ЕСТЬNULL(ЭН.ПутьКФайлуТТННакладная, """") КАК ПутьКФайлуТТННакладная,
		|	ЕСТЬNULL(ЭН.ВнешняяСсылка, """") КАК ВнешняяСсылка,
		|	ЕСТЬNULL(РеестрЭН.Номер, """") КАК РеестрНомер,
		|	ЕСТЬNULL(РеестрЭН.Напечатан, """") КАК РеестрНапечатан,
		|	ЕСТЬNULL(РеестрЭН.ВнешняяСсылка, """") КАК РеестрВнешняяСсылка,
		|	ЕСТЬNULL(РеестрЭН.Дата, """") КАК РеестрДата,
		|	ЕСТЬNULL(ЭН.Номер, """") КАК Номер,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаказа.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипОплатыЗаказПокупателя.Наличные)
		|		ИЛИ ТаблицаЗаказа.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипОплатыЗаказПокупателя.БРПостоплата)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ТаблицаЗаказа.СтатусОплаты = ЗНАЧЕНИЕ(Перечисление.СтатусОплаты.Оплачен)
		|	КОНЕЦ КАК ПрошлаБезнальнаяОплата,
		|	ТаблицаЗаказа.Номер КАК НомерЗаказа,
		|	ЗДТ.Номер КАК НомерЗапроса,
		|	ТаблицаЗаказа.Ответственный КАК Ответственный
		|ИЗ
		|	Документ.ЗапросДоступностиТоваров КАК ЗДТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектроннаяНакладная КАК ЭН
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЭН.СрезПоследних КАК СтатусыЭН
		|			ПО ЭН.Ссылка = СтатусыЭН.ДокументРегистратор
		|			И (НЕ СтатусыЭН.СтатусЭН.СтатусПосылки = ЗНАЧЕНИЕ(Перечисление.СтатусыПосылокСлужбыДоставки.Отменена))
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеестрЭН КАК РеестрЭН
		|			ПО ЭН.Реестр = РеестрЭН.Ссылка
		|		ПО ЗДТ.Ссылка = ЭН.ДокументОснование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ТаблицаЗаказа
		|		ПО ЗДТ.ДокументОснование = ТаблицаЗаказа.Ссылка
		|ГДЕ
		|	ЗДТ.Номер = &Номер
		|	И НЕ ЗДТ.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Номер", СокрЛП(НомерЗапроса));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();

	Если Выборка.Следующий() Тогда
		
		Результат.ЕстьЗаказ = Истина;
		Результат.СсылкаНаЗапрос = Выборка.Ссылка;
		Результат.СсылкаНаЭН = Выборка.СсылкаЭН;
		Результат.ПутьКФайлуСтикера = Выборка.ПутьКФайлуСтикера;
		Результат.ПутьКФайлуТТННакладная = Выборка.ПутьКФайлуТТННакладная;
		Результат.ВнешняяСсылка = Выборка.ВнешняяСсылка;
		Результат.Номер = Выборка.Номер;
		Результат.РеестрВнешняяСсылка = Выборка.РеестрВнешняяСсылка;
		Результат.РеестрНапечатан = Выборка.РеестрНапечатан;
		Результат.РеестрНомер = Выборка.РеестрНомер;
		Результат.РеестрДата = Выборка.РеестрДата;
		Результат.ПрошлаБезнальнаяОплата = Выборка.ПрошлаБезнальнаяОплата;
		Результат.НомерЗаказа = Выборка.НомерЗаказа;
		Результат.НомерЗапроса = Выборка.НомерЗапроса;
		Результат.Ответственный = Выборка.Ответственный;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ОтветСервиса(СтруктураОтвета)
	Если СтруктураОтвета.КодОтвета = 0 Тогда 
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки(СтруктураОтвета.ОтветJSON); 
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Иначе
		
		СтатусОтправки = ОтправкаПочты(СтруктураОтвета);
		
		Если СтруктураОтвета.КодОтвета = 1 Тогда
			КодОшибки = "NO_1";
			ТекстОшибки = "Нет такого заказа";
		ИначеЕсли СтруктураОтвета.КодОтвета = 2 Тогда
			КодОшибки = "NO_2";
			ТекстОшибки = "ВГХ нет данных";
		ИначеЕсли СтруктураОтвета.КодОтвета = 3 Тогда
			КодОшибки = "NO_3";
			ТекстОшибки = "Ошибка записи документа в Рознице. Свяжитесь с ними";
		ИначеЕсли СтруктураОтвета.КодОтвета = 4 Тогда
			КодОшибки = "NO_4";
			ТекстОшибки = "Ошибка записи электронной накладной в Рознице. Свяжитесь с ними";
		ИначеЕсли СтруктураОтвета.КодОтвета = 5 Тогда
			КодОшибки = "NO_5";
			ТекстОшибки = "Ошибка создания ТТН в Рознице. Свяжитесь с ними";
			ТекстОшибки = ТекстОшибки + Символы.ПС + СтруктураОтвета.ТекстОшибки;
			Если СтатусОтправки.ПочтаОтправлена Тогда
				ТекстОшибки = ТекстОшибки + Символы.ПС + "Уведомление отправлено по почте";
			Иначе
				ТекстОшибки = ТекстОшибки + Символы.ПС + "Ошибка отправки уведомления";
			КонецЕсли;
		ИначеЕсли СтруктураОтвета.КодОтвета = 6 Тогда
			КодОшибки = "NO_6";
			ТекстОшибки = "Неверный тип докумена для печати";
		ИначеЕсли СтруктураОтвета.КодОтвета = 7 Тогда
			КодОшибки = "NO_7";
			ТекстОшибки = "Нет данных о списке товаров";
		ИначеЕсли СтруктураОтвета.КодОтвета = 8 Тогда
			КодОшибки = "NO_8";
			ТекстОшибки = "Не совпадает состав товаров в Рознице. Свяжитесь с ними";
		ИначеЕсли СтруктураОтвета.КодОтвета = 9 Тогда
			КодОшибки = "NO_9";
			ТекстОшибки = "Не указан токен";
		ИначеЕсли СтруктураОтвета.КодОтвета = 10 Тогда
			КодОшибки = "NO_10";
			ТекстОшибки = "Не указан заказ";
		ИначеЕсли СтруктураОтвета.КодОтвета = 11 Тогда
			КодОшибки = "NO_11";
			ТекстОшибки = "Не верный токен";
		ИначеЕсли СтруктураОтвета.КодОтвета = 12 Тогда
			КодОшибки = "NO_12";
			ТекстОшибки = "Нет такого заказа";
		ИначеЕсли СтруктураОтвета.КодОтвета = 13 Тогда
			КодОшибки = "NO_13";
			ТекстОшибки = "Заказ имеет безналичную форму оплаты, но не оплачен. Свяжитесь с Розницей";
			Если СтатусОтправки.ПочтаОтправлена Тогда
				ТекстОшибки = ТекстОшибки + Символы.ПС + "Уведомление отправлено по почте";
			Иначе
				ТекстОшибки = ТекстОшибки + Символы.ПС + "Ошибка отправки уведомления";
			КонецЕсли;
		ИначеЕсли СтруктураОтвета.КодОтвета = 14 Тогда
			КодОшибки = "INVALID_PHONENUMBER";
			ТекстОшибки = "Не верно указан номер телефона или клиент не найден";
		КонецЕсли;  
		
		ТекстОшибкиСтруктура = Новый Структура;
		ТекстОшибкиСтруктура.Вставить("message", ТекстОшибки);
		
		ИнформацияОбОшибке = Новый Структура;
		ИнформацияОбОшибке.Вставить("info", ТекстОшибкиСтруктура); 
		
		МассивОшибки = Новый Массив;
		МассивОшибки.Добавить(ИнформацияОбОшибке);
		
		ОтветСервераСтруктура = Новый Структура;
		ОтветСервераСтруктура.Вставить("error", МассивОшибки); 
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		ЗаписатьJSON(ЗаписьJSON, ОтветСервераСтруктура);
		Результат = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки(Результат); 
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		
		
	КонецЕсли;
	
	Возврат Ответ;
	
	
	
КонецФункции

Функция ПустаяСтруктураОтвета()

	Результат = Новый Структура;
	Результат.Вставить("КодОтвета");
	Результат.Вставить("ОтветJSON");
	Результат.Вставить("Комментарий");
	Результат.Вставить("ТекстОшибки");
	Результат.Вставить("НомерЗаказа");
	Результат.Вставить("НомерЗапроса");
	Результат.Вставить("Ответственный");
	Возврат Результат;
	
КонецФункции

#КонецОбласти


