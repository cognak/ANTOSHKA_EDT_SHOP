#Область Методы_API
Функция GetBuyerInfoGET(ЗапросСервиса)
	УстановитьПривилегированныйРежим(Истина);

	СтруктураОтвета = ПустаяСтруктураОтвета();
	
	НомерКарты = ЗапросСервиса.ПараметрыЗапроса.Получить("cardnumber");
	НомерТелефона = ЗапросСервиса.ПараметрыЗапроса.Получить("phone");
	ИДКлиента = ЗапросСервиса.ПараметрыЗапроса.Получить("id");
	Токен = ЗапросСервиса.ПараметрыЗапроса.Получить("token");
	
	ОшибкаВЗапросе = Ложь;
	
	Если ТокенАктуален(Токен) Тогда 

		Если Не НомерТелефона = Неопределено И Не ПустаяСтрока(НомерТелефона) Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаКонтакты.Ссылка КАК Контрагент
			|ИЗ
			|	Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтакты
			|ГДЕ
			|	ТаблицаКонтакты.НомерТелефона В(&СписокНомеров)
			|	И ТаблицаКонтакты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)"
			);
			Запрос.УстановитьПараметр("СписокНомеров", КонтактнаяИнформацияСлужебный.ПолучитьВариантыНомераТелефона(СокрЛП(НомерТелефона)));
			
			СписокКонтрагенты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");

		ИначеЕсли Не НомерКарты = Неопределено И Не ПустаяСтрока(НомерКарты) Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаСправочник.ВладелецКарты КАК Контрагент
			|ИЗ
			|	Справочник.ИнформационныеКарты КАК ТаблицаСправочник
			|ГДЕ
			|	ТаблицаСправочник.ВладелецКарты ССЫЛКА Справочник.Контрагенты
			|			И ТаблицаСправочник.КодКарты = &НомерКарты
			|	И НЕ(ТаблицаСправочник.Блокирован
			|				ИЛИ ТаблицаСправочник.ПометкаУдаления)"
			);
			Запрос.УстановитьПараметр("НомерКарты", СокрЛП(НомерКарты));
			
			СписокКонтрагенты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");

		ИначеЕсли Не ИДКлиента = Неопределено И Не ПустаяСтрока(ИДКлиента) Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Контрагенты.Ссылка КАК Контрагент
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Код = &Код"
			);
			Запрос.УстановитьПараметр("Код", СокрЛП(ИДКлиента));
			
			СписокКонтрагенты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
			
			
		Иначе

			СписокКонтрагенты = Новый Массив;
			
			ОшибкаВЗапросе = Истина;
			СтруктураОтвета.КодОтвета = 2;
			
		КонецЕсли;
	Иначе 
		ОшибкаВЗапросе = Истина;
		СтруктураОтвета.КодОтвета = 3;
	КонецЕсли;
	
	
	Если Не ОшибкаВЗапросе Тогда
		
		Если НЕ СписокКонтрагенты.Количество() = 0 Тогда
			
			ДанныеВозврата = Новый Структура;
			ДанныеВозврата = ДанныеОПользователе(СписокКонтрагенты[0]);
			
			//	Формируем структуру возвращаемой информации
			//	---------------------------------------------------------------------------------------
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			
			ЗаписьJSON.ЗаписатьИмяСвойства("personFound");
			ЗаписьJSON.ЗаписатьЗначение(1);
			
			ЗаписьJSON.ЗаписатьИмяСвойства("comment");
			ЗаписьJSON.ЗаписатьЗначение("");
			
			ЗаписьJSON.ЗаписатьИмяСвойства("person");
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			
			ЗаписьJSON.ЗаписатьИмяСвойства("id");
			ЗаписьJSON.ЗаписатьЗначение(ДанныеВозврата.Код);
			
			ЗаписьJSON.ЗаписатьИмяСвойства("fullname");
			ЗаписьJSON.ЗаписатьЗначение(ДанныеВозврата.Наименование);
			
			ЗаписьJSON.ЗаписатьИмяСвойства("blocked");
			ЗаписьJSON.ЗаписатьЗначение(?(ДанныеВозврата.Блокирован, 1, 0));
			
			ЗаписьJSON.ЗаписатьИмяСвойства("verified");
			ЗаписьJSON.ЗаписатьЗначение(?(ДанныеВозврата.Верифицирован, 1, 0));
			
			ЗаписьJSON.ЗаписатьИмяСвойства("dateofbirth");
			ЗаписьJSON.ЗаписатьЗначение(Формат(ДанныеВозврата.ДатаРождения, "ДФ=dd.MM.yyyy"));
			
			ЗаписьJSON.ЗаписатьИмяСвойства("phonenumber");
			ЗаписьJSON.ЗаписатьЗначение(ДанныеВозврата.НомерТелефона);
			
			ЗаписьJSON.ЗаписатьИмяСвойства("summa");
			ЗаписьJSON.ЗаписатьЗначение(ДанныеВозврата.СуммаНакоплений);
			
			ЗаписьJSON.ЗаписатьИмяСвойства("bonusesactive");
			ЗаписьJSON.ЗаписатьЗначение(ДанныеВозврата.СуммаБонусныхБалловАктивно);
			
			ЗаписьJSON.ЗаписатьИмяСвойства("bonusesreserved");
			ЗаписьJSON.ЗаписатьЗначение(ДанныеВозврата.СуммаБонусныхБалловРезерв);
			
			ЗаписьJSON.ЗаписатьИмяСвойства("language");
			ЗаписьJSON.ЗаписатьЗначение(Строка(ДанныеВозврата.Язык));
			
			ЗаписьJSON.ЗаписатьИмяСвойства("cardinfo");
			
			ЗаписьJSON.ЗаписатьНачалоМассива();
			
			Для каждого СтрокаТаблицы Из ДанныеВозврата.КартыДисконта Цикл
				
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				ЗаписьJSON.ЗаписатьИмяСвойства("cardnumber");	ЗаписьJSON.ЗаписатьЗначение(СтрокаТаблицы.НомерКарты);
				ЗаписьJSON.ЗаписатьИмяСвойства("summa");		ЗаписьJSON.ЗаписатьЗначение(СтрокаТаблицы.СуммаНакоплений);
				ЗаписьJSON.ЗаписатьИмяСвойства("city");			ЗаписьJSON.ЗаписатьЗначение(СтрокаТаблицы.Город);
				ЗаписьJSON.ЗаписатьИмяСвойства("blocked");		ЗаписьJSON.ЗаписатьЗначение(?(СтрокаТаблицы.Блокирована, 1, 0));
				ЗаписьJSON.ЗаписатьИмяСвойства("discount");		ЗаписьJSON.ЗаписатьЗначение(СтрокаТаблицы.ПроцентСкидки);
				ЗаписьJSON.ЗаписатьКонецОбъекта();
				
			КонецЦикла;
			
			ЗаписьJSON.ЗаписатьКонецМассива();
			
			ЗаписьJSON.ЗаписатьИмяСвойства("kids");
			
			ЗаписьJSON.ЗаписатьНачалоМассива();
			
			Для каждого СтрокаТаблицы Из ДанныеВозврата.Дети Цикл
				
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				ЗаписьJSON.ЗаписатьИмяСвойства("name");			ЗаписьJSON.ЗаписатьЗначение(СтрокаТаблицы.ИмяРебенка);
				ЗаписьJSON.ЗаписатьИмяСвойства("dateofbirth");	ЗаписьJSON.ЗаписатьЗначение(Формат(СтрокаТаблицы.ДатаРождения, "ДФ=dd.MM.yyyy"));
				ЗаписьJSON.ЗаписатьИмяСвойства("sex");			ЗаписьJSON.ЗаписатьЗначение(Строка(СтрокаТаблицы.Пол));
				ЗаписьJSON.ЗаписатьКонецОбъекта();
				
			КонецЦикла;
			
			ЗаписьJSON.ЗаписатьКонецМассива();
			
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			
			СтруктураОтвета.КодОтвета = 0;
			СтруктураОтвета.ОтветJSON = ЗаписьJSON.Закрыть();
		Иначе 
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			
			ЗаписьJSON.ЗаписатьИмяСвойства("personFound");
			ЗаписьJSON.ЗаписатьЗначение(0);
			ЗаписьJSON.ЗаписатьИмяСвойства("comment");
			ЗаписьJSON.ЗаписатьЗначение("Клиент не найден");
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			
			СтруктураОтвета.КодОтвета = 0;
			СтруктураОтвета.ОтветJSON = ЗаписьJSON.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтветСервиса(СтруктураОтвета);
	
	
КонецФункции

Функция NewBuyerPOST(ЗапросСервиса)
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОтвета = ПустаяСтруктураОтвета();
	СтруктураОтвета.КодОтвета = 0;
	
	СтрокаЗапроса = ЗапросСервиса.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаЗапроса);
	Результат = ПрочитатьJSON(ЧтениеJSON);
	Если Не (Результат.Свойство("token") И ТокенАктуален(Результат.token)) Тогда
		СтруктураОтвета.КодОтвета = 3;
	Иначе
		Если Результат.Свойство("verificationcode") И Результат.Свойство("phonenumber") Тогда 
			ДанныеКлиента = ВерификацияКлиентовСервер.ПолучитьКодПодтверждения(ОтправкаSMS.ПодготовитьНомерТелефона(Результат.phonenumber), Истина);
			Если Не (ДанныеКлиента.Указан И ДанныеКлиента.КодКлиента = Результат.verificationcode) Тогда
				СтруктураОтвета.КодОтвета = 4;
			КонецЕсли;
		Иначе 
			СтруктураОтвета.КодОтвета = 2;
		КонецЕсли;
		
		Если Результат.Свойство("sex") Тогда
			Если Пол(Результат.sex) = Неопределено Тогда 
				СтруктураОтвета.КодОтвета = 5;
			КонецЕсли;
		Иначе
			Результат.Вставить("sex", Перечисления.ПолФизическогоЛица.ПустаяСсылка());
		КонецЕсли;
		
		Если Результат.Свойство("firstname") Тогда
			Если ПустаяСтрока(Результат.firstname) Тогда 
				СтруктураОтвета.КодОтвета = 6;
			ИначеЕсли ПроверкаИмени(Результат.firstname) Тогда 
				СтруктураОтвета.КодОтвета = 7;
			КонецЕсли;
		Иначе 
			СтруктураОтвета.КодОтвета = 2;
		КонецЕсли;
		
		Если Не Результат.Свойство("lastname") Тогда
			Результат.Вставить("lastname", "");
		КонецЕсли;
		
		Если Не Результат.Свойство("surname") Тогда
			Результат.Вставить("surname", "");
		КонецЕсли;
		
		Если Результат.Свойство("dateofbirth") Тогда
			Попытка
				ДеньРождения = Дата(Результат.dateofbirth);
			Исключение
				СтруктураОтвета.КодОтвета = 9;
			КонецПопытки;
		Иначе 
			Результат.Вставить("dateofbirth", "00010101");
		КонецЕсли;
		
		Если Результат.Свойство("language") Тогда 
			Если Не (СокрЛП(Результат.language) = "UKR" Или СокрЛП(Результат.language) = "RUS") Тогда
				СтруктураОтвета.КодОтвета = 13;
			КонецЕсли;
		Иначе 
			Результат.Вставить("language", "UKR");
		КонецЕсли;
		
		Если Результат.Свойство("kids") Тогда
			Для Каждого Дети Из Результат.kids Цикл
				Если Дети.Свойство("name") И Дети.Свойство("dateofbirth") И Дети.Свойство("sex") Тогда 
					Если ПустаяСтрока(Дети.name) Или Пол(Дети.sex) = Неопределено Тогда 
						СтруктураОтвета.КодОтвета = 10;
					Иначе 
						Попытка
							ДеньРожденияРебенка = Дата(Дети.dateofbirth);
						Исключение
							СтруктураОтвета.КодОтвета = 10;
						КонецПопытки;
					КонецЕсли;
				Иначе
					СтруктураОтвета.КодОтвета = 2;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураОтвета.КодОтвета = 0 Тогда
		
		ДанныеКонтрагента = ОбменMicrosoftDynamicsСервер.ИнициализацияДанныхКонтрагента();

		ДанныеКонтрагента.НомерТелефона = ОтправкаSMS.ПодготовитьНомерТелефона(Результат.phonenumber);
		ДанныеКонтрагента.Пол      = Пол(Результат.sex);
		ДанныеКонтрагента.Фамилия  = СтроковыеФункцииКлиентСервер.ПривестиНаименование(Результат.lastname, Истина);
		ДанныеКонтрагента.Имя      = СтроковыеФункцииКлиентСервер.ПривестиНаименование(Результат.firstname, Истина);
		ДанныеКонтрагента.Отчество = СтроковыеФункцииКлиентСервер.ПривестиНаименование(Результат.surname, Истина);
		ДанныеКонтрагента.ДатаРождения = ДеньРождения;
		Если Результат.Свойство("kids") Тогда
			Для Каждого СтрокаОДетях Из Результат.kids Цикл 
				
				ДанныеОДетях = Новый Структура("IDD, IDC, Имя, Пол, ДатаРождения",
												"", 
												"",
												СтрокаОДетях.name,
												Пол(СтрокаОДетях.sex),
												Дата(СтрокаОДетях.dateofbirth));
				ДанныеКонтрагента.Дети.Добавить(ДанныеОДетях);
			КонецЦикла;
		КонецЕсли;
		
		
		СоставДанных = РозничныеПродажиСлужебный.ВыполнитьКомплексДанныхКонтрагента(
				  ""
				, ДанныеКонтрагента.НомерТелефона
				, ДанныеКонтрагента
				, Перечисления.НазначениеКонтрагентовОтложенных.ПроверкаВРознице
				, Неопределено
			);
		Если СоставДанных.Ошибка Тогда 
			СтруктураОтвета.КодОтвета = 8;
			СтруктураОтвета.Комментарий = СоставДанных.ОписаниеОшибки;
		Иначе 
			
			ИзменитьЯзыкКонтрагента(СоставДанных, Результат.language); 
//Создание дисконтной карты - ВРЕМЕННО!!!

			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ИнформационныеКарты.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
				|ГДЕ
				|	НЕ ИнформационныеКарты.Блокирован
				|	И ИнформационныеКарты.ВладелецКарты = &ВладелецКарты";
			
			Запрос.УстановитьПараметр("ВладелецКарты", СоставДанных.Контрагент);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда 
				
				ИнформационнаяКарта = Справочники.ИнформационныеКарты.СоздатьЭлемент();
				ИнформационнаяКарта.Наименование = Строка(Новый УникальныйИдентификатор());
				
				ИнформационнаяКарта.ВидКарты = Перечисления.ВидыИнформационныхКарт.Магнитная;
				ИнформационнаяКарта.ДатаОткрытия = ТекущаяДатаСеанса();
				ИнформационнаяКарта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная;
				ИнформационнаяКарта.ВладелецКарты = СоставДанных.Контрагент;
				
				ИнформационнаяКарта.КодКарты = ИнформационнаяКарта.Наименование;
				
				ИнформационнаяКарта.ВидДисконтнойКарты = Справочники.ВидыДисконтныхКарт.ВиртуальныеКарты;
				
				ИнформационнаяКарта.Записать();
			КонецЕсли;
			
				
			
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			
			ЗаписьJSON.ЗаписатьИмяСвойства("id");
			ЗаписьJSON.ЗаписатьЗначение(СоставДанных.Контрагент.IDN);
			
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			
			СтруктураОтвета.КодОтвета = 0;
			СтруктураОтвета.ОтветJSON = ЗаписьJSON.Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОтветСервиса(СтруктураОтвета);
КонецФункции

Функция SendPhoneVerificationCodeGET(ЗапросСервиса)
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОтвета = ПустаяСтруктураОтвета();
	
	НомерТелефона = ЗапросСервиса.ПараметрыЗапроса.Получить("phone");
	Токен = ЗапросСервиса.ПараметрыЗапроса.Получить("token");
	
	Если ТокенАктуален(Токен) Тогда 
		СтруктураОтвета.КодОтвета = 2;	
		СтруктураОтвета.ОтветJSON = "";
		Если Не НомерТелефона = Неопределено Тогда 
			ДополнительныеПараметры = Новый Структура(
			"ИмяКомпьютера, Контрагент", "Чат-бот", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));

			ВерификацияКлиентовСервер.ОтправитьКодПодтверждения(ОтправкаSMS.ПодготовитьНомерТелефона(НомерТелефона), ДополнительныеПараметры, Истина);
			СтруктураОтвета.КодОтвета = 0		
		КонецЕсли;
	Иначе 
		СтруктураОтвета.КодОтвета = 3;
	КонецЕсли;
	
	Возврат ОтветСервиса(СтруктураОтвета);
	
КонецФункции

Функция AuthorizationPOST(ЗапросСервиса)
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОтвета = ПустаяСтруктураОтвета();
	
	
	//СтрокаЗапроса = ЗапросСервиса.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	//ЧтениеJSON = Новый ЧтениеJSON;
	//ЧтениеJSON.УстановитьСтроку(СтрокаЗапроса);
	//Результат = ПрочитатьJSON(ЧтениеJSON);
	//
	//Если Результат.Свойство("login") И Результат.Свойство("password")
	//	 И Результат.login = "test" И Результат.password = "test" Тогда 
		 
		НовыйТокен = Строка(Новый УникальныйИдентификатор());
		ЗаписьТокена(НовыйТокен);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("token");
		ЗаписьJSON.ЗаписатьЗначение(НовыйТокен);
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		СтруктураОтвета.КодОтвета = 0;
		СтруктураОтвета.ОтветJSON = ЗаписьJSON.Закрыть();
	//Иначе 
	//	СтруктураОтвета.КодОтвета = 1;
	//	
	//КонецЕсли;
	
	Возврат ОтветСервиса(СтруктураОтвета);

КонецФункции

Функция GiftCertificateInfoGET(ЗапросСервиса)
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОтвета = ПустаяСтруктураОтвета();
	
	НомерСертификата = ЗапросСервиса.ПараметрыЗапроса.Получить("certificate");
	Токен = ЗапросСервиса.ПараметрыЗапроса.Получить("token");
	
	Если ТокенАктуален(Токен) Тогда 
		СтруктураОтвета.КодОтвета = 2;	
		СтруктураОтвета.ОтветJSON = "";
		Если Не НомерСертификата = Неопределено Тогда
			ДанныеПоСертификату = ПодарочныеСертификатыСервер.ПолучитьСостояниеПодарочногоСертификатаКод(НомерСертификата, Ложь);
			
			Если ДанныеПоСертификату.Найден Тогда
				
				//	Формируем структуру возвращаемой информации
				//	---------------------------------------------------------------------------------------
				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку();
				
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				
				ЗаписьJSON.ЗаписатьИмяСвойства("price");
				ЗаписьJSON.ЗаписатьЗначение(ДанныеПоСертификату.Номинал);
				
				ЗаписьJSON.ЗаписатьИмяСвойства("state");
				ЗаписьJSON.ЗаписатьЗначение(Строка(ДанныеПоСертификату.Состояние));
				
				ЗаписьJSON.ЗаписатьИмяСвойства("valid");
				ЗаписьJSON.ЗаписатьЗначение(Формат(ДанныеПоСертификату.ДатаОкончанияДействия, "ДФ=dd.MM.yyyy"));
				
				ЗаписьJSON.ЗаписатьКонецОбъекта();
		
				СтруктураОтвета.КодОтвета = 0;
				СтруктураОтвета.ОтветJSON = ЗаписьJSON.Закрыть();
				
			Иначе 
				СтруктураОтвета.КодОтвета = 11;
			КонецЕсли;
		КонецЕсли;
		
	Иначе 
		СтруктураОтвета.КодОтвета = 3;
	КонецЕсли;
	
	Возврат ОтветСервиса(СтруктураОтвета);
КонецФункции

Функция ShopInfoGET(ЗапросСервиса)
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОтвета = ПустаяСтруктураОтвета();
	
	Токен = ЗапросСервиса.ПараметрыЗапроса.Получить("token");
	Если ТокенАктуален(Токен) Тогда
		
		СтруктураОтвета.КодОтвета = 0;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	МагазиныКонтактнаяИнформация.Представление КАК Представление,
			|	МагазиныКонтактнаяИнформация.Ссылка.Наименование КАК Наименование,
			|	МагазиныКонтактнаяИнформация.Ссылка.НомерМагазина КАК НомерМагазина,
			|	МагазиныКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей
			|ИЗ
			|	Справочник.Магазины.КонтактнаяИнформация КАК МагазиныКонтактнаяИнформация
			|ГДЕ
			|	МагазиныКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
			|	И НЕ МагазиныКонтактнаяИнформация.Ссылка.ПометкаУдаления
			|	И МагазиныКонтактнаяИнформация.Ссылка.ВведенВЭксплуатацию
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерМагазина";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписьJSON.ЗаписатьНачалоМассива();
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураАдреса = КонтактнаяИнформацияСлужебный.ПредыдущаяСтруктураКонтактнойИнформацииXML(Выборка.ЗначенияПолей);
			
			
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			
			ЗаписьJSON.ЗаписатьИмяСвойства("code");
			ЗаписьJSON.ЗаписатьЗначение(Строка(Выборка.НомерМагазина));
			
			ЗаписьJSON.ЗаписатьИмяСвойства("name");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(Выборка.Наименование));
			
			ЗаписьJSON.ЗаписатьИмяСвойства("city");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтруктураАдреса.Город));
			
			ЗаписьJSON.ЗаписатьИмяСвойства("latitude");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтруктураАдреса.Широта));
			
			ЗаписьJSON.ЗаписатьИмяСвойства("longitude");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтруктураАдреса.Долгота));
			
			ЗаписьJSON.ЗаписатьИмяСвойства("street");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтруктураАдреса.Улица));
			
			ЗаписьJSON.ЗаписатьИмяСвойства("number");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(СтруктураАдреса.Дом));
			
			
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			
		КонецЦикла;
		
		ЗаписьJSON.ЗаписатьКонецМассива();
		
		СтруктураОтвета.ОтветJSON = ЗаписьJSON.Закрыть();
		
	Иначе
		
		СтруктураОтвета.КодОтвета = 3;
		
	КонецЕсли;
	
	Возврат ОтветСервиса(СтруктураОтвета);
КонецФункции

Функция UpdateBuyerPOST(ЗапросСервиса)
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОтвета = ПустаяСтруктураОтвета();
	СтруктураОтвета.КодОтвета = 0;
	
	СтрокаЗапроса = ЗапросСервиса.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаЗапроса);
	Результат = ПрочитатьJSON(ЧтениеJSON);
	Если Не (Результат.Свойство("token") И ТокенАктуален(Результат.token)) Тогда
		СтруктураОтвета.КодОтвета = 3;
	Иначе
		Если Результат.Свойство("phonenumber") Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаКонтакты.Ссылка КАК Контрагент
			|ИЗ
			|	Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтакты
			|ГДЕ
			|	ТаблицаКонтакты.НомерТелефона В(&СписокНомеров)
			|	И ТаблицаКонтакты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)"
			);
			Запрос.УстановитьПараметр("СписокНомеров", КонтактнаяИнформацияСлужебный.ПолучитьВариантыНомераТелефона(СокрЛП(Результат.phonenumber)));
			
			СписокКонтрагенты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
			
			Если СписокКонтрагенты.Количество() = 0 Тогда
				СтруктураОтвета.КодОтвета = 14;
			КонецЕсли;
		Иначе 
			СтруктураОтвета.КодОтвета = 2;
		КонецЕсли;
		
		Если Результат.Свойство("sex") Тогда
			Если Пол(Результат.sex) = Неопределено Тогда 
				СтруктураОтвета.КодОтвета = 5;
			КонецЕсли;
		Иначе
			Результат.Вставить("sex", Перечисления.ПолФизическогоЛица.ПустаяСсылка());
		КонецЕсли;
		
		Если Результат.Свойство("firstname") Тогда
			Если ПустаяСтрока(Результат.firstname) Тогда 
				СтруктураОтвета.КодОтвета = 6;
			ИначеЕсли ПроверкаИмени(Результат.firstname) Тогда 
				СтруктураОтвета.КодОтвета = 7;
			КонецЕсли;
		Иначе 
			СтруктураОтвета.КодОтвета = 2;
		КонецЕсли;
		
		Если Не Результат.Свойство("lastname") Тогда
			Результат.Вставить("lastname", "");
		КонецЕсли;
		
		Если Не Результат.Свойство("surname") Тогда
			Результат.Вставить("surname", "");
		КонецЕсли;
		
		Если Результат.Свойство("dateofbirth") Тогда
			Попытка
				ДеньРождения = Дата(Результат.dateofbirth);
			Исключение
				СтруктураОтвета.КодОтвета = 9;
			КонецПопытки;
		Иначе 
			Результат.Вставить("dateofbirth", "00010101");
		КонецЕсли;
		
		Если Результат.Свойство("language") Тогда 
			Если Не (СокрЛП(Результат.language) = "UKR" Или СокрЛП(Результат.language) = "RUS") Тогда
				СтруктураОтвета.КодОтвета = 13;
			КонецЕсли;
		Иначе 
			Результат.Вставить("language", "UKR");
		КонецЕсли;
		
		Если Результат.Свойство("kids") Тогда
			Для Каждого Дети Из Результат.kids Цикл
				Если Дети.Свойство("name") И Дети.Свойство("dateofbirth") И Дети.Свойство("sex") Тогда 
					Если ПустаяСтрока(Дети.name) Или Пол(Дети.sex) = Неопределено Тогда 
						СтруктураОтвета.КодОтвета = 10;
					Иначе 
						Попытка
							ДеньРожденияРебенка = Дата(Дети.dateofbirth);
						Исключение
							СтруктураОтвета.КодОтвета = 10;
						КонецПопытки;
					КонецЕсли;
				Иначе
					СтруктураОтвета.КодОтвета = 2;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураОтвета.КодОтвета = 0 Тогда
		
		ДанныеКонтрагента = ОбменMicrosoftDynamicsСервер.ИнициализацияДанныхКонтрагента();

		ДанныеКонтрагента.НомерТелефона = ОтправкаSMS.ПодготовитьНомерТелефона(Результат.phonenumber);
		ДанныеКонтрагента.Пол      = Пол(Результат.sex);
		ДанныеКонтрагента.Фамилия  = СтроковыеФункцииКлиентСервер.ПривестиНаименование(Результат.lastname, Истина);
		ДанныеКонтрагента.Имя      = СтроковыеФункцииКлиентСервер.ПривестиНаименование(Результат.firstname, Истина);
		ДанныеКонтрагента.Отчество = СтроковыеФункцииКлиентСервер.ПривестиНаименование(Результат.surname, Истина);
		ДанныеКонтрагента.ДатаРождения = ДеньРождения;
		Если Результат.Свойство("kids") Тогда
			Для Каждого СтрокаОДетях Из Результат.kids Цикл 
				
				ДанныеОДетях = Новый Структура("IDD, IDC, Имя, Пол, ДатаРождения",
												"", 
												"",
												СтрокаОДетях.name,
												Пол(СтрокаОДетях.sex),
												Дата(СтрокаОДетях.dateofbirth));
				ДанныеКонтрагента.Дети.Добавить(ДанныеОДетях);
			КонецЦикла;
		КонецЕсли;
		
		
		СоставДанных = РозничныеПродажиСлужебный.ВыполнитьКомплексДанныхКонтрагента(
				  ""
				, ДанныеКонтрагента.НомерТелефона
				, ДанныеКонтрагента
				, Перечисления.НазначениеКонтрагентовОтложенных.ПроверкаВРознице
				, Неопределено
			);
		Если СоставДанных.Ошибка Тогда 
			СтруктураОтвета.КодОтвета = 8;
			СтруктураОтвета.Комментарий = СоставДанных.ОписаниеОшибки;
		Иначе
			
			СоставДанных = Справочники.Контрагенты.ПрименитьКонтрагентаПоДаннымCRM(ДанныеКонтрагента, СоставДанных,, Ложь);

			ИзменитьЯзыкКонтрагента(СоставДанных, Результат.language); 
			
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			
			ЗаписьJSON.ЗаписатьИмяСвойства("id");
			ЗаписьJSON.ЗаписатьЗначение(СоставДанных.Контрагент.IDN);
			
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			
			СтруктураОтвета.КодОтвета = 0;
			СтруктураОтвета.ОтветJSON = ЗаписьJSON.Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОтветСервиса(СтруктураОтвета);
КонецФункции


	


#КонецОбласти

#Область Вспомогательные_методы
Процедура ЗаписьТокена(Токен)
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписейТокенов = РегистрыСведений.ТокенHTTPАутентификации.СоздатьНаборЗаписей();
	НаборЗаписейТокенов.Прочитать();
	
	Если НаборЗаписейТокенов.Количество() = 0 Тогда 
		СтрокаСТокеном = НаборЗаписейТокенов.Добавить();
	Иначе
		СтрокаСТокеном = НаборЗаписейТокенов[0];
	КонецЕсли;
	
	СтрокаСТокеном.Токен = Токен;
	СтрокаСТокеном.ДатаТокена = ТекущаяДата();
	
	НаборЗаписейТокенов.Записать(Истина);
КонецПроцедуры

Функция ТокенАктуален (Токен)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТокенHTTPАутентификации.Токен КАК Токен
		|ИЗ
		|	РегистрСведений.ТокенHTTPАутентификации КАК ТокенHTTPАутентификации
		|ГДЕ
		|	ТокенHTTPАутентификации.Токен = &Токен
		|	И ТокенHTTPАутентификации.ДатаТокена >= &ДатаТокена";
	
	Запрос.УстановитьПараметр("ДатаТокена", ТекущаяДата() - 60000000);
	Запрос.УстановитьПараметр("Токен", Токен);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Результат = Ложь;
		
	Иначе 
		ЗаписьТокена(Токен);
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтветСервиса(СтруктураОтвета)
	Если СтруктураОтвета.КодОтвета = 0 Тогда 
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки(СтруктураОтвета.ОтветJSON); 
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Иначе
		Если СтруктураОтвета.КодОтвета = 1 Тогда
			КодОшибки = "NO_AUTH";
			ТекстОшибки = "Неверный логин или пароль";
		ИначеЕсли СтруктураОтвета.КодОтвета = 2 Тогда
			КодОшибки = "NO_PARAM";
			ТекстОшибки = "Неверно указаны параметры";
		ИначеЕсли СтруктураОтвета.КодОтвета = 3 Тогда
			КодОшибки = "INVALID_TOKEN";
			ТекстОшибки = "Неверный токен сессии";
		ИначеЕсли СтруктураОтвета.КодОтвета = 4 Тогда
			КодОшибки = "INVALID_VERIFICATION_CODE";
			ТекстОшибки = "Неверный код верификации телефона";
		ИначеЕсли СтруктураОтвета.КодОтвета = 5 Тогда
			КодОшибки = "INVALID_SEX";
			ТекстОшибки = "Неверный указан пол клиента";
		ИначеЕсли СтруктураОтвета.КодОтвета = 6 Тогда
			КодОшибки = "INVALID_NAME";
			ТекстОшибки = "Имя или фамилия не могут быть пустыми";
		ИначеЕсли СтруктураОтвета.КодОтвета = 7 Тогда
			КодОшибки = "INVALID_FIRSTNAME";
			ТекстОшибки = "Имя не соответствует стандартным именам";
		ИначеЕсли СтруктураОтвета.КодОтвета = 8 Тогда
			КодОшибки = "ERROR_CREATE_CLIENT";
			ТекстОшибки = "Ошибка при создании клиента";
		ИначеЕсли СтруктураОтвета.КодОтвета = 9 Тогда
			КодОшибки = "INVALID_DATAOFBIRTH";
			ТекстОшибки = "Неверная дата рождения";
		ИначеЕсли СтруктураОтвета.КодОтвета = 10 Тогда
			КодОшибки = "INVALID_KIDS";
			ТекстОшибки = "Неверно заполнены данные о детях";
		ИначеЕсли СтруктураОтвета.КодОтвета = 11 Тогда
			КодОшибки = "INVALID_GIFT_CODE";
			ТекстОшибки = "Сертификат не найден или не верный код";
		ИначеЕсли СтруктураОтвета.КодОтвета = 12 Тогда
			КодОшибки = "NO_CLIENT";
			ТекстОшибки = "Клиент по заданным параметрам не найден";
		ИначеЕсли СтруктураОтвета.КодОтвета = 13 Тогда
			КодОшибки = "INVALID_LANGUAGE";
			ТекстОшибки = "Не верно указан язык. Только UKR или RUS";
		ИначеЕсли СтруктураОтвета.КодОтвета = 14 Тогда
			КодОшибки = "INVALID_PHONENUMBER";
			ТекстОшибки = "Не верно указан номер телефона или клиент не найден";
		КонецЕсли;
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("codeError");
		ЗаписьJSON.ЗаписатьЗначение(КодОшибки);
		ЗаписьJSON.ЗаписатьИмяСвойства("error");
		ЗаписьJSON.ЗаписатьЗначение(ТекстОшибки);
		ЗаписьJSON.ЗаписатьИмяСвойства("comment");
		ЗаписьJSON.ЗаписатьЗначение(СтруктураОтвета.Комментарий);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть()); 
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		
		
	КонецЕсли;
	
	Возврат Ответ;
	
	
	
КонецФункции

Функция ПустаяСтруктураОтвета()
	Возврат Новый Структура("КодОтвета, ОтветJSON, Комментарий");
	
КонецФункции

Функция ПроверкаИмени(ИмяДляПроверки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИменаЛюдей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИменаЛюдей КАК ИменаЛюдей
		|ГДЕ
		|	(ИменаЛюдей.Наименование = &Наименование
		|			ИЛИ ИменаЛюдей.НаименованиеУкраинское = &Наименование)";
	
	Запрос.УстановитьПараметр("Наименование", ТРег(ИмяДляПроверки));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
КонецФункции

Функция Пол(ПолКлиента)
	Если ВРег(ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ПолФизическогоЛица.Женский)) = ВРег(ПолКлиента) Тогда 
		Результат = Перечисления.ПолФизическогоЛица.Женский;
	ИначеЕсли ВРег(ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ПолФизическогоЛица.Мужской)) = ВРег(ПолКлиента) Тогда
		Результат = Перечисления.ПолФизическогоЛица.Мужской;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ДанныеОПользователе (СсылкаНаКонтрагента)
	ДанныеВозврата = Новый Структура(
		"Код, Наименование, Блокирован, Верифицирован, 
		|ДатаРождения, СуммаНакоплений, НомерТелефона, 
		|КартыДисконта, Дети, Язык, СуммаБонусныхБалловАктивно,
		|СуммаБонусныхБалловРезерв"
		, ""
		, ""
		, Ложь
		, Ложь
		, '00010101'
		, 0
		, ""
		, Новый ТаблицаЗначений		
		, Новый ТаблицаЗначений		
		, ""
		, 0
		, 0
	);
	ДанныеВозврата.КартыДисконта.Колонки.Добавить("НомерКарты");
	ДанныеВозврата.КартыДисконта.Колонки.Добавить("Город");
	ДанныеВозврата.КартыДисконта.Колонки.Добавить("СуммаНакоплений");
	ДанныеВозврата.КартыДисконта.Колонки.Добавить("ПроцентСкидки");
	ДанныеВозврата.КартыДисконта.Колонки.Добавить("Блокирована");
	
	ДанныеВозврата.Дети.Колонки.Добавить("ИмяРебенка");
	ДанныеВозврата.Дети.Колонки.Добавить("ДатаРождения");
	ДанныеВозврата.Дети.Колонки.Добавить("Пол");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаКонтрагенты.Код КАК Код,
	|	ТаблицаКонтрагенты.Наименование КАК Наименование,
	|	ТаблицаКонтрагенты.Блокирован КАК Блокирован,
	|	ТаблицаКонтрагенты.ДатаРождения КАК ДатаРождения,
	|	ЕСТЬNULL(ТаблицаКарты.КодКарты, 0) КАК НомерКарты,
	|	ЕСТЬNULL(ТаблицаНакоплений.СуммаОстаток, 0) КАК СуммаНакоплений,
	|	ЕСТЬNULL(ТаблицаКарты.Магазин.Город.Наименование, """") КАК Город,
	|	ЕСТЬNULL(ТаблицаКарты.Блокирован, ИСТИНА) КАК Блокирована,
	|	ЕСТЬNULL(ТаблицаКарты.ДатаСледующегоОпроса <= &ТекДата
	|			И ТаблицаКарты.ДатаСледующегоОпроса <> ДАТАВРЕМЯ(1, 1, 1), ИСТИНА) КАК НужнаВерификация,
	|	ТаблицаКарты.ДатаСледующегоОпроса КАК ДатаСледующегоОпроса,
	|	ТаблицаКарты.ДатаПоследнегоОпроса КАК ДатаПоследнегоОпроса,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаАтрибутов.Язык, ЗНАЧЕНИЕ(Перечисление.ЯзыкКонтрагента.Украинский)) = ЗНАЧЕНИЕ(Перечисление.ЯзыкКонтрагента.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ЯзыкКонтрагента.Украинский)
	|		ИНАЧЕ ТаблицаАтрибутов.Язык
	|	КОНЕЦ КАК Язык
	|ИЗ
	|	Справочник.Контрагенты КАК ТаблицаКонтрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ТаблицаКарты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоДисконтнымКартам.Остатки(
	|					,
	|					ВладелецДисконтнойКарты ССЫЛКА Справочник.Контрагенты
	|						И ВладелецДисконтнойКарты = &Контрагент) КАК ТаблицаНакоплений
	|			ПО ТаблицаКарты.Ссылка = ТаблицаНакоплений.ДисконтнаяКарта
	|		ПО (ТаблицаКарты.ВладелецКарты ССЫЛКА Справочник.Контрагенты)
	|			И ТаблицаКонтрагенты.Ссылка = ТаблицаКарты.ВладелецКарты
	|			И (НЕ ТаблицаКарты.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлючевыеАтрибутыКонтрагентов.СрезПоследних(
	|				&ТекДата,
	|				Объект = &Контрагент
	|					И УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.Magento)) КАК ТаблицаАтрибутов
	|		ПО (ТаблицаАтрибутов.Объект = ТаблицаКонтрагенты.Ссылка)
	|ГДЕ
	|	ТаблицаКонтрагенты.Ссылка = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКонтакты.НомерТелефона КАК НомерТелефона
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтакты
	|ГДЕ
	|	ТаблицаКонтакты.Ссылка = &Контрагент
	|	И ТаблицаКонтакты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыДети.Имя КАК ИмяРебенка,
	|	КонтрагентыДети.ДатаРождения КАК ДатаРождения,
	|	КонтрагентыДети.Пол КАК Пол
	|ИЗ
	|	Справочник.Контрагенты.Дети КАК КонтрагентыДети
	|ГДЕ
	|	КонтрагентыДети.Ссылка = &Контрагент"
	);
	Запрос.УстановитьПараметр("Контрагент", СсылкаНаКонтрагента);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаСеанса());
	
	Результаты = Запрос.ВыполнитьПакет();
	Запрос     = Неопределено;

	КартыВыборка = Результаты[0].Выбрать();
	
	УжеПолучено = Ложь;

	Пока КартыВыборка.Следующий() Цикл
		Если Не УжеПолучено Тогда 
			ДанныеВозврата.Код = СокрЛП(КартыВыборка.Код);
			ДанныеВозврата.Наименование = СокрЛП(КартыВыборка.Наименование);
			ДанныеВозврата.Блокирован   = КартыВыборка.Блокирован;
			ДанныеВозврата.ДатаРождения = КартыВыборка.ДатаРождения;
			ДанныеВозврата.Язык = КартыВыборка.Язык;
			ДанныеВозврата.Верифицирован = Не КартыВыборка.НужнаВерификация;
			
			ИспользоватьБонуснуюСистему = БонусныеБаллыПовтИсп.ИспользоватьБонуснуюСистему();
			
			СуммаБонусныхБаллов			= 0; 
			СуммаБонусныхБалловВРезерве	= 0;
			
			Если ИспользоватьБонуснуюСистему Тогда
				
				ПараметрыЗапроса = Новый Структура(
				"ТипыБонусов, ТолькоТекущийОстаток, Команда"
				, ОбщегоНазначенияКлиентСервер.AAD(Перечисления.ТипыБонусов.Привлечение, Перечисления.ТипыБонусов.Органический, Перечисления.ТипыБонусов.Акционный)
				, Истина
				, "ОбщееСостояниеСчёта"
				);
				
				ДанныеОтвета = БонусныеБаллыСервер.BPS_ПолучитьОстатокБонусныхБаллов(СсылкаНаКонтрагента, ПараметрыЗапроса);
				
				Если ДанныеОтвета.Ошибка = Ложь Тогда
					
					ББ_ПериодРасчета = ДанныеОтвета.ДанныеСчёта.Период;
					
					СуммаБонусныхБаллов			= ДанныеОтвета.ДанныеСчёта.СуммаБонусныхБаллов;
					СуммаБонусныхБалловВРезерве	= ДанныеОтвета.ДанныеСчёта.СуммаБонусныхБалловВРезерве;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ДанныеВозврата.СуммаБонусныхБалловАктивно = СуммаБонусныхБаллов;
			ДанныеВозврата.СуммаБонусныхБалловРезерв = СуммаБонусныхБалловВРезерве;

			
			УжеПолучено = Истина;
		КонецЕсли;
		
		СтрокаТаблицы = ДанныеВозврата.КартыДисконта.Добавить();
		СтрокаТаблицы.НомерКарты = СокрЛП(КартыВыборка.НомерКарты);
		СтрокаТаблицы.Город      = КартыВыборка.Город;
		СтрокаТаблицы.СуммаНакоплений = КартыВыборка.СуммаНакоплений;
		СтрокаТаблицы.Блокирована = КартыВыборка.Блокирована;			
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ТаблицаСкидки.ЗначениеСкидкиНаценки), 0) КАК ПроцентСкидки
		|ИЗ
		|	Справочник.СкидкиНаценки КАК ТаблицаСкидки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК ТабличнаяЧасть
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК ТаблицаУсловия
		|			ПО ТабличнаяЧасть.УсловиеПредоставления = ТаблицаУсловия.Ссылка
		|		ПО ТаблицаСкидки.Ссылка = ТабличнаяЧасть.Ссылка
		|ГДЕ
		|	НЕ ТаблицаСкидки.ПометкаУдаления
		|	И ТаблицаСкидки.ДисконтныйКлуб = ИСТИНА
		|	И ТаблицаСкидки.Родитель = ЗНАЧЕНИЕ(Справочник.СкидкиНаценки.ДисконтныеКарты)
		|	И ТаблицаУсловия.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж)
		|	И ТаблицаУсловия.ЗначениеУсловияОграничения <= &СуммаПокупок"
		);
		Запрос.УстановитьПараметр("СуммаПокупок", КартыВыборка.СуммаНакоплений);

		ДанныеВыборка = Запрос.Выполнить().Выбрать();
		ДанныеВыборка.Следующий();

		СтрокаТаблицы.ПроцентСкидки = ДанныеВыборка.ПроцентСкидки;
		
		ДанныеВозврата.СуммаНакоплений = ДанныеВозврата.СуммаНакоплений + КартыВыборка.СуммаНакоплений;
		
	КонецЦикла;
	
	Если НЕ Результаты[1].Пустой() Тогда

		ОбщаяВыборка = Результаты[1].Выбрать();
		ОбщаяВыборка.Следующий();

		ДанныеВозврата.НомерТелефона = СокрЛП(ОбщаяВыборка.НомерТелефона);

	КонецЕсли;

	Если НЕ Результаты[2].Пустой() Тогда

		ОбщаяВыборка = Результаты[2].Выбрать();
		Пока ОбщаяВыборка.Следующий() Цикл 
			СтрокаТаблицы = ДанныеВозврата.Дети.Добавить();
			СтрокаТаблицы.ИмяРебенка = СокрЛП(ОбщаяВыборка.ИмяРебенка);
			СтрокаТаблицы.Пол      = ОбщаяВыборка.Пол;
			СтрокаТаблицы.ДатаРождения = ОбщаяВыборка.ДатаРождения;
		КонецЦикла;
		
	КонецЕсли;
	
	возврат ДанныеВозврата;
	
КонецФункции

Процедура ИзменитьЯзыкКонтрагента(СоставДанных, ЯзыкКонтрагента)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаАтрибуты.ID КАК ID,
	|	ТаблицаАтрибуты.Наименование КАК Наименование,
	|	ТаблицаАтрибуты.Фамилия КАК Фамилия,
	|	ТаблицаАтрибуты.Имя КАК Имя,
	|	ТаблицаАтрибуты.Отчество КАК Отчество,
	|	ТаблицаАтрибуты.ДатаРождения КАК ДатаРождения,
	|	ТаблицаАтрибуты.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	|	ТаблицаАтрибуты.Язык КАК Язык
	|ИЗ
	|	РегистрСведений.КлючевыеАтрибутыКонтрагентов.СрезПоследних КАК ТаблицаАтрибуты
	|ГДЕ
	|	ТаблицаАтрибуты.Объект = &Контрагент
	|	И ТаблицаАтрибуты.УчетнаяСистема = ЗНАЧЕНИЕ(Перечисление.УчетныеСистемыКомпании.Magento)"
	);
	Запрос.УстановитьПараметр("Контрагент", СоставДанных.Контрагент);

	РезультатЗапроса = Запрос.Выполнить();

	//Если Не РезультатЗапроса.Пустой() Тогда
		
		АтрибутыВыборка = РезультатЗапроса.Выбрать();
		АтрибутыВыборка.Следующий();
		
		Если Не ((ЯзыкКонтрагента = "UKR" И АтрибутыВыборка.Язык = Перечисления.ЯзыкКонтрагента.Украинский) 
				Или (ЯзыкКонтрагента = "RUS" И АтрибутыВыборка.Язык = Перечисления.ЯзыкКонтрагента.Русский)) Тогда 

			ТекущаяДатаЗаписи = ТекущаяДатаСеанса();	
			НаборЗаписей = РегистрыСведений.КлючевыеАтрибутыКонтрагентов.СоздатьНаборЗаписей();
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			ОбменДаннымиСервер.УстановитьВсехПолучателей(НаборЗаписей.ОбменДанными.Получатели, "ПоМагазину");

			НаборЗаписей.Отбор.Период.Установить(ТекущаяДатаЗаписи);
			НаборЗаписей.Отбор.Объект.Установить(СоставДанных.Контрагент);
			НаборЗаписей.Отбор.УчетнаяСистема.Установить(Перечисления.УчетныеСистемыКомпании.Magento);

			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.Период = НаборЗаписей.Отбор.Период.Значение;
			ЗаписьНабора.Объект = НаборЗаписей.Отбор.Объект.Значение;
			ЗаписьНабора.УчетнаяСистема = НаборЗаписей.Отбор.УчетнаяСистема.Значение;

			ЗаписьНабора.ID				= АтрибутыВыборка.ID;
			ЗаписьНабора.Наименование	= АтрибутыВыборка.Наименование;
			ЗаписьНабора.Фамилия		= АтрибутыВыборка.Фамилия;
			ЗаписьНабора.Имя			= АтрибутыВыборка.Имя;
			ЗаписьНабора.Отчество		= АтрибутыВыборка.Отчество;
			ЗаписьНабора.ДатаРождения	= АтрибутыВыборка.ДатаРождения;
			ЗаписьНабора.Язык 			= ?(ЯзыкКонтрагента = "UKR", Перечисления.ЯзыкКонтрагента.Украинский, Перечисления.ЯзыкКонтрагента.Русский);
			
			ЗаписьНабора.ДатаСоздания	= ОбщегоНазначенияКлиентСервер.УникальныйИдентификаторВремя(СоставДанных.Контрагент.УникальныйИдентификатор());
			ЗаписьНабора.ДатаИзменения	= ТекущаяДатаЗаписи;

			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	//КонецЕсли;

КонецПроцедуры


#КонецОбласти

