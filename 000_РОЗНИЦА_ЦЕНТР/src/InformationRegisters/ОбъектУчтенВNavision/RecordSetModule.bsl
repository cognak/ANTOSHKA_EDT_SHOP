//	LNK 10.11.2016 11:20:16
Процедура ПередЗаписью(Отказ, Замещение)

	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "УстановкаВерсииОбъекта", Ложь) = Истина Тогда

		Возврат;

	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	БылоИзменениеЗаписи = Ложь;

	Для каждого ЗаписьНабора Из ЭтотОбъект Цикл

		ЗаписьНабора.ИмяОбъекта = ЗаписьНабора.Объект.Метаданные().ПолноеИмя();

		Если ЗаписьНабора.ОтменаТребуется И НЕ (ЗаписьНабора.ОтменаАкцептована ИЛИ ЗаписьНабора.ОтменаНевозможна) Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаОснование.Ссылка КАК ДокументОснование
			|ПОМЕСТИТЬ Ведущая
			|ИЗ
			|	Документ.ПеремещениеТоваров КАК ТаблицаОснование
			|ГДЕ
			|	ТаблицаОснование.Ссылка = &Объект
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ДокументОснование
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Данные.Основание,
			|	КОЛИЧЕСТВО(Данные.Ордер) КАК СчетчикОрдеров
			|ИЗ
			|	(ВЫБРАТЬ
			|		Ведущая.ДокументОснование КАК Основание,
			|		ТаблицаДокументы.Ссылка КАК Ордер
			|	ИЗ
			|		Ведущая КАК Ведущая
			|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары КАК ТаблицаДокументы
			|			ПО Ведущая.ДокументОснование = ТаблицаДокументы.ДокументОснование
			|				И (НЕ ТаблицаДокументы.ПометкаУдаления)
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		Ведущая.ДокументОснование,
			|		ТаблицаДокументы.Ссылка
			|	ИЗ
			|		Ведущая КАК Ведущая
			|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК ТаблицаДокументы
			|			ПО Ведущая.ДокументОснование = ТаблицаДокументы.ДокументОснование
			|				И (НЕ ТаблицаДокументы.ПометкаУдаления)) КАК Данные
			|
			|СГРУППИРОВАТЬ ПО
			|	Данные.Основание"
			);
			Запрос.УстановитьПараметр("Объект", ЗаписьНабора.Объект);
			
			Выборка = Запрос.Выполнить().Выбрать();

			Если Выборка.Следующий() Тогда

			//	"Объект" выбираем по ссылке - во избежание возможных проблем в "других" перифериях (мало-ли!)

				Если НЕ Выборка.СчетчикОрдеров = 0 И НЕ ЗаписьНабора.ОтменаАкцептована Тогда

				//	Подчиненный документ обнаружен. Независимо от узла устанавливаем флаг отказа.
					ЗаписьНабора.ОтменаНевозможна  = Истина;
					ЗаписьНабора.УведомитьNavision = Истина;
					ЗаписьНабора.Сообщение = "Отказ установлен " + ТекущаяДатаСеанса() + " в узле «" + ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПоМагазинуИлиПоРабочемуМесту() + "»";
					БылоИзменениеЗаписи    = Истина;

				ИначеЕсли НЕ ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() И НЕ ЗаписьНабора.ОтменаНевозможна Тогда

				//	Подчинённого документа нет - "Объект" не принят в работу.
				//	Так же учитываем, что сейчас находимся в периферийном узле.
					ЗаписьНабора.ОтменаАкцептована  = Истина;
					ЗаписьНабора.УведомитьNavision  = Истина;
					ЗаписьНабора.Сообщение = "Акцепт установлен " + ТекущаяДатаСеанса() + " в узле «" + ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПоМагазинуИлиПоРабочемуМесту() + "»";
					БылоИзменениеЗаписи    = Истина;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	Если БылоИзменениеЗаписи Тогда

		Если ОбменДанными.Загрузка И ЗначениеЗаполнено(ОбменДанными.Отправитель) Тогда

			ПланыОбмена.ЗарегистрироватьИзменения(ОбщегоНазначенияКлиентСервер.AAD(ОбменДанными.Отправитель), ЭтотОбъект);

		КонецЕсли;

	КонецЕсли;

//	Получаем временную таблицу, содержащую информацию о состоянии объектов (был учтён или нет?).
//	Используем эту временную таблицу как фильтр для обеспечения однократного вызова процедуры
//	формирования корректировок перемещений только для вновь устанавливаемого флага "УчтеноNavision"
	ДополнительныеСвойства.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Отборы.Объект КАК Объект,
	|	Отборы.Магазин КАК Магазин
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	&Отборы КАК Отборы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицРегистра.Объект КАК Объект,
	|	МАКСИМУМ(ТаблицРегистра.УчтеноNavision) КАК УчтеноNavision
	|ПОМЕСТИТЬ ТаблицаПередЗаписью
	|ИЗ
	|	РегистрСведений.ОбъектУчтенВNavision КАК ТаблицРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
	|		ПО ТаблицРегистра.Объект = Фильтр.Объект
	|			И ТаблицРегистра.Магазин = Фильтр.Магазин
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицРегистра.Объект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Фильтр"
	);
	Запрос.УстановитьПараметр("Отборы", Выгрузить(, "Объект, Магазин"));

	Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.МенеджерВременныхТаблиц;
	Запрос.Выполнить();

КонецПроцедуры

//	LNK 09.09.2016 12:59:46
Процедура ПриЗаписи(Отказ, Замещение)

	Если ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "УстановкаВерсииОбъекта", Ложь) = Истина Тогда

		Возврат;

	КонецЕсли;

	Если ОбменДаннымиПовтИсп.ЭтоГлавныйУзел() Тогда

		ПроверитьРегистрацию = ?(ОбменДанными.Загрузка И НЕ ОбменДанными.Отправитель = Неопределено
			, Истина
			, ОбщегоНазначенияКлиентСервер.ЗначениеКлючаСтруктуры(ДополнительныеСвойства, "НеПроверятьРегистрациюВОбменNavision", Ложь) = Ложь
		);

		Если ПроверитьРегистрацию Тогда

			ПроверитьРегистрациюВОбменNavisionРозница();

		КонецЕсли;

	КонецЕсли;

	Если НЕ Отказ Тогда

		Если НЕ Количество() = 0 Тогда

			МетаОбъекта = ЭтотОбъект[0].Объект.Метаданные();

			Если ОбщегоНазначения.ЭтоДокумент(МетаОбъекта) Тогда

				Запрос = Новый Запрос(СтрЗаменить(
				"ВЫБРАТЬ
				|	ВЫРАЗИТЬ(НаборЗаписей.Объект КАК Документ.ПеремещениеТоваров) КАК Объект,
				|	НаборЗаписей.УчтеноNavision,
				|	НаборЗаписей.ВерсияОбъекта
				|ПОМЕСТИТЬ Фильтр
				|ИЗ
				|	&НаборЗаписей КАК НаборЗаписей
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Фильтр.ВерсияОбъекта КАК ВерсияОбъекта,
				|	Фильтр.Объект.ВерсияДанных КАК ВерсияДанных
				|ИЗ
				|	Фильтр КАК Фильтр
				|ГДЕ
				|	Фильтр.УчтеноNavision = ИСТИНА
				|	И НЕ Фильтр.ВерсияОбъекта = """""
				, " КАК Документ.ПеремещениеТоваров)", " КАК Документ." + МетаОбъекта.Имя + ")")
				);
				Запрос.УстановитьПараметр("НаборЗаписей", Выгрузить(, "Объект, УчтеноNavision, ВерсияОбъекта"));

				Выборка = Запрос.Выполнить().Выбрать();

				Пока Выборка.Следующий() Цикл

					Если Выборка.ВерсияОбъекта = Выборка.ВерсияДанных Тогда

						ПроверитьКорректировкиПеремещенияВУзлеНазначения();
						Прервать;
					
					КонецЕсли;

				КонецЦикла;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

//	LNK 09.09.2016 13:00:40
Процедура ПроверитьРегистрациюВОбменNavisionРозница()

	Если Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаУзлы.Ссылка КАК Узел,
	|	ТаблицаУзлы.СверкаДокументов КАК СверкаДокументов
	|ИЗ
	|	ПланОбмена.ОбменNavisionРозница КАК ТаблицаУзлы
	|ГДЕ
	|	НЕ(ТаблицаУзлы.ПометкаУдаления
	|				ИЛИ ТаблицаУзлы.ЭтотУзел)"
	);
	ВыборкаУзлов = Запрос.Выполнить().Выбрать();

	Пока ВыборкаУзлов.Следующий() Цикл

		Для каждого ЗаписьНабора Из ЭтотОбъект Цикл

			Если НЕ ЗаписьНабора.ВидПередачи = Перечисления.ВидыПередачиNavision.ПереданВNavision Тогда

			//	Объект в этой записи набора не требует синхронизации с Navision.
				Продолжить;

			КонецЕсли;

			Если НЕ ОбменДаннымиПовтИсп.ПланОбменаСодержитОбъект(
					ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(ВыборкаУзлов.Узел), ЗаписьНабора.Объект.Метаданные().ПолноеИмя())
			Тогда

			//	Нет такого в составе плана обмена. Нормальный случай - есть объекты, которые блокируем, но в NAV они едут
			//	в других структурах... или не едут вообще?
				Продолжить;

			КонецЕсли;

			ПланыОбмена.ЗарегистрироватьИзменения(ВыборкаУзлов.Узел, ЗаписьНабора.Объект);

		КонецЦикла;

	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

//	LNK 30.12.2016 16:01:47
Процедура ПроверитьКорректировкиПеремещенияВУзлеНазначения()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСсылок.Объект КАК Объект,
	|	ТаблицаСсылок.УчтеноNavision КАК УчтеноNavision
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&ТаблицаСсылок КАК ТаблицаСсылок
	|ГДЕ
	|	ТаблицаСсылок.УчтеноNavision = ИСТИНА
	|	И ТИПЗНАЧЕНИЯ(ТаблицаСсылок.Объект) = ТИП(Документ.ПеремещениеТоваров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	УчтеноNavision
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПриЗаписи.Объект,
	|	ТаблицаПриЗаписи.УчтеноNavision
	|ИЗ
	|	Источник КАК ТаблицаПриЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПередЗаписью КАК ТаблицаПередЗаписью
	|		ПО ТаблицаПриЗаписи.Объект = ТаблицаПередЗаписью.Объект
	|ГДЕ
	|	ЕСТЬNULL(ТаблицаПередЗаписью.УчтеноNavision, ЛОЖЬ) = ЛОЖЬ"
	);
	Запрос.УстановитьПараметр("ТаблицаСсылок", Выгрузить(, "Объект, УчтеноNavision"));
	
	Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		Если Выборка.УчтеноNavision Тогда

			Документы.КорректировкаПеремещения.ПроверитьНеобходимыеКорректировки(Выборка.Объект,, ОбменДанными.Загрузка);

		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры




