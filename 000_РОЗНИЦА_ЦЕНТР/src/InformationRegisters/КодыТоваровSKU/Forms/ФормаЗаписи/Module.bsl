////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ  
                       
//Функци производит проверки при окончании ввода текста в поле "Код"
//Параметры - НовыйSKU - Число, введенный пользователем SKU
//Возвращаемое значение - Структура с описанием действий на клиенте
&НаСервере    
Функция ОбработатьИзменениеSKU(НовыйSKU)
	
	СписокСвободныхSKU.Очистить(); 
	СтруктураДействий = Новый Структура;
	
	Если НовыйSKU < НижняяГраницаДиапазонаSKUВесовогоТовара ИЛИ НовыйSKU > ВерхняяГраницаДиапазонаSKUВесовогоТовара Тогда
		Запись.SKU = ИсходныйSKU;
		СтруктураДействий.Вставить("ОповещениеПользователю", НСтр("ru = 'Значение SKU не в выбранном диапазоне, перемещение невозможно'"));
	Иначе
		СвободныеSKU = РегистрыСведений.КодыТоваровSKU.ПолучитьСвободныеSKUМетодомОбъединения(НовыйSKU, НовыйSKU);
		Если СвободныеSKU.Количество() = 0 Тогда
			Запись.SKU = ИсходныйSKU;
			СтруктураДействий.Вставить("ОповещениеПользователю", НСтр("ru = 'Выбранный SKU занят, перемещение невозможно'"));
		Иначе
			Запись.SKU = НовыйSKU;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураДействий;
	
КонецФункции

//Формирует список свободных SKU при использовании кнопки выбора поля "Кода"
//
&НаСервере
Процедура СформироватьСписокСвободныхSKU()
	
	СписокСвободныхSKU.Очистить();
	
	НовыйSKU = Запись.SKU;
	
	Верх = ВерхняяГраницаДиапазонаSKUВесовогоТовара - 1;
	Низ  = НижняяГраницаДиапазонаSKUВесовогоТовара  + 1;
	
	СвободныеSKU = РегистрыСведений.КодыТоваровSKU.ПолучитьСвободныеSKUМетодомОбъединения(Низ, Верх);
	КоличествоСвободныхSKU = СвободныеSKU.Итог("КоличествоСвободныхSKU");
		
	Итератор = 0;
	
	Пока Итератор < СвободныеSKU.Количество() Цикл
		Если СвободныеSKU[Итератор].SKU <> НижняяГраницаДиапазонаSKUВесовогоТовара Тогда
			ЭлементСписка = СписокСвободныхSKU.Добавить(СвободныеSKU[Итератор].SKU);
			
			Если ЭлементСписка.Значение > НовыйSKU Тогда
				НачальноеЗначение = ЭлементСписка;
			КонецЕсли;
			
			Если СписокСвободныхSKU.Количество() >= 100 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СвободныеSKU[Итератор].SKU = СвободныеSKU[Итератор].КонецИнтервала Тогда
			Итератор = Итератор + 1;
		Иначе
			СвободныеSKU[Итератор].SKU = СвободныеSKU[Итератор].SKU + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСвободныхSKU.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	Если НачальноеЗначение = 0 Тогда
		НачальноеЗначение = СписокСвободныхSKU.Получить(СписокСвободныхSKU.Количество()-1);
	КонецЕсли;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//Процедура - обработчик события "ПриСозданииНаСервере" формы
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	   
	ИсходныйSKU                       = Запись.SKU;
	ВерхняяГраницаДиапазонаSKUВесовогоТовара   = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВерхняяГраницаДиапазонаSKUВесовогоТовара");
	НижняяГраницаДиапазонаSKUВесовогоТовара    = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("НижняяГраницаДиапазонаSKUВесовогоТовара");
	
КонецПроцедуры

//Процедура - обработчик события "ПриЗаписиНаСервере" формы
//
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИсходныйSKU <> ТекущийОбъект.SKU И ТекущийОбъект.SKU >= НижняяГраницаДиапазонаSKUВесовогоТовара Тогда
		SKU                = РегистрыСведений.КодыТоваровSKU.СоздатьМенеджерЗаписи();
		SKU.SKU            = ИсходныйSKU;
		SKU.Номенклатура   = Справочники.Номенклатура.ПустаяСсылка();
		SKU.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		SKU.Упаковка       = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
		SKU.Записать();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

//Процедура - обработчик события "НачалоВыбораИзСписка" поля "SKU"
//
&НаКлиенте
Процедура SKUНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СформироватьСписокСвободныхSKU();
	
	СтароеЗначение = Запись.SKU;
	
	ВыбранноеЗначение = ВыбратьИзСписка(СписокСвободныхSKU, Элемент, НачальноеЗначение);
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Запись.SKU = ВыбранноеЗначение.Значение;
	Иначе
		Запись.SKU = СтароеЗначение;
	КонецЕсли;

КонецПроцедуры

//Процедура - обработчик события "ОкончаниеВводаТекста" поля "SKU"
//
&НаКлиенте
Процедура SKUОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СтруктураДействий = ОбработатьИзменениеSKU(Число(Текст));
	
	Если СтруктураДействий.Свойство("ОповещениеПользователю") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураДействий.ОповещениеПользователю,,"Запись.SKU");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ВыбратьИзСписка") Тогда
		ВыбранноеЗначение = ВыбратьИзСписка(СписокСвободныхSKU, Элемент, НачальноеЗначение);
		Если ВыбранноеЗначение = Неопределено Тогда
			Запись.SKU = ИсходныйSKU;
		Иначе
			Запись.SKU = ВыбранноеЗначение.Значение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
