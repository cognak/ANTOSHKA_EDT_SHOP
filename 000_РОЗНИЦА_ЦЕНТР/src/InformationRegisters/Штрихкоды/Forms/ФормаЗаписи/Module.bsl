////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьДоступностьПоВладельцу()
	
	Если ЗначениеЗаполнено(Запись.Владелец)
		И ТипЗнч(Запись.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		Элементы.Характеристика.Доступность = Истина;
		Элементы.Упаковка.Доступность = Истина;	
		Элементы.ФормаНовыйШтрихкод.Доступность = Истина;
	Иначе	
		Элементы.Характеристика.Доступность = Ложь;
		Элементы.Упаковка.Доступность = Ложь;	
		Элементы.ФормаНовыйШтрихкод.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьТекстЗаголовкаПоТипуВладельца(ТипВладельца)
	
	ТекстЗаголовка = "";
	Если ТипВладельца = Тип("СправочникСсылка.Номенклатура") Тогда
		ТекстЗаголовка = НСтр("ru = 'Номенклатура'");		
	ИначеЕсли ТипВладельца = Тип("СправочникСсылка.ИнформационныеКарты") Тогда
		ТекстЗаголовка = НСтр("ru = 'Информационная карта'");
	ИначеЕсли ТипВладельца = Тип("СправочникСсылка.СерийныеНомера") Тогда
		ТекстЗаголовка = НСтр("ru = 'Номер подарочного сертификата'");
	КонецЕсли;	        
	
	Если ТекстЗаголовка <> "" Тогда
		Элементы.Владелец.Заголовок = ТекстЗаголовка;
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьВидимостьПоТипуВладельца(ТипВладельца)
	
	ВидимостьЭлементовПоВладельцу = ТипВладельца = Тип("СправочникСсылка.Номенклатура");
	Элементы.Характеристика.Видимость = ВидимостьЭлементовПоВладельцу;
	Элементы.Упаковка.Видимость = ВидимостьЭлементовПоВладельцу;
	Элементы.ФормаНовыйШтрихкод.Доступность = ВидимостьЭлементовПоВладельцу;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьТекстЗаголовкаПоВладельцу(Владелец)
	
	ТекстЗаголовка = "";
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		ТекстЗаголовка = НСтр("ru = 'Номенклатура'");
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.ИнформационныеКарты") Тогда
		ТекстЗаголовка = НСтр("ru = 'Информационная карта'");
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.СерийныеНомера") Тогда
		ТекстЗаголовка = НСтр("ru = 'Номер подарочного сертификата'");
	КонецЕсли;
	
	Если ТекстЗаголовка <> "" Тогда
		Элементы.Владелец.Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоВладельцу(Владелец)
	
	ВидимостьЭлементовПоВладельцу = ТипЗнч(Владелец) = Тип("СправочникСсылка.Номенклатура");
	Элементы.Характеристика.Видимость = ВидимостьЭлементовПоВладельцу;
	Элементы.Упаковка.Видимость = ВидимостьЭлементовПоВладельцу;
	Элементы.Владелец.ТолькоПросмотр = Истина;
	Элементы.ФормаНовыйШтрихкод.Видимость = ВидимостьЭлементовПоВладельцу;
	
КонецПроцедуры	

&НаСервере
Процедура ВладелецПриИзмененииСервер()
	
	УстановитьДоступностьПоВладельцу();
	
	Если ЗначениеЗаполнено(Запись.Владелец)
		И ТипЗнч(Запись.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
				
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", Запись.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , Запись.Упаковка);
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("Номенклатура", Запись.Владелец);
		СтруктураСтроки.Вставить("Характеристика", Запись.Характеристика);
		СтруктураСтроки.Вставить("Упаковка", Запись.Упаковка);
		СтруктураСтроки.Вставить("ХарактеристикиИспользуются", ХарактеристикиИспользуются);
				
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(СтруктураСтроки, СтруктураДействий, КэшированныеЗначения);

		ЗаполнитьЗначенияСвойств(Запись, СтруктураСтроки);
		
		ХарактеристикиИспользуются = СтруктураСтроки.ХарактеристикиИспользуются;
		Элементы.Характеристика.Доступность = ХарактеристикиИспользуются;
				
	Иначе     	
		Запись.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		Запись.Упаковка = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьШтрихкодEAN13()
	
	Возврат ПодключаемоеОборудованиеРТ.СформироватьШтрихкод();
	
КонецФункции

// МеханизмВнешнегоОборудования
&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) 
	
	Запись.ТипШтрихкода = ПодключаемоеОборудованиеРТ.ОпределитьТипШтрихкода(Штрихкод); 	
	Если Запись.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128 Тогда
		Запись.ПредставлениеШтрихкода = Запись.Штрихкод;
	Иначе
		Запись.ПредставлениеШтрихкода = "";
	КонецЕсли;	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//Процедура - обработчик события "ПриСозданииНаСервере" формы
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.ЗначенияЗаполнения.Свойство("Владелец")
		И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Владелец)	Тогда
		
		УстановитьТекстЗаголовкаПоВладельцу(Параметры.ЗначенияЗаполнения.Владелец);                   		
		УстановитьВидимостьПоВладельцу(Параметры.ЗначенияЗаполнения.Владелец);
		
	ИначеЕсли ЗначениеЗаполнено(Запись.Владелец) Тогда     		
		
		УстановитьТекстЗаголовкаПоВладельцу(Запись.Владелец);
		УстановитьВидимостьПоВладельцу(Запись.Владелец);
		
	ИначеЕсли Параметры.ЗначенияЗаполнения.Свойство("ТипВладельца") Тогда
		
		Если Параметры.ЗначенияЗаполнения.ТипВладельца <> Тип("Неопределено") Тогда
			
			УстановитьТекстЗаголовкаПоТипуВладельца(Параметры.ЗначенияЗаполнения.ТипВладельца);
			Элементы.Владелец.ВыбиратьТип = Ложь;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Параметры.ЗначенияЗаполнения.ТипВладельца);
			Элементы.Владелец.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
			
		Иначе
			
			УстановитьДоступностьПоВладельцу();
			
		КонецЕсли;	
		
		УстановитьВидимостьПоТипуВладельца(Параметры.ЗначенияЗаполнения.ТипВладельца);
		
	Иначе
		
		УстановитьДоступностьПоВладельцу();
		
	КонецЕсли;	
	
	Если Запись.ИсходныйКлючЗаписи.Пустой() Тогда
		ХарактеристикиИспользуются = Справочники.Номенклатура.ПроверитьИспользованиеХарактеристик(Запись.Владелец);
		Элементы.Характеристика.Доступность = ХарактеристикиИспользуются;
	КонецЕсли; 
	
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекПовтИсп.ИспользоватьПодключаемоеОборудование();

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// МеханизмВнешнегоОборудования
	Если ИспользоватьПодключаемоеОборудование
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "";

		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:
			                      |""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	// Конец МеханизмВнешнегоОборудования
	
КонецПроцедуры

//Процедура - обработчик события "ПриЗакрытии" формы
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	// МеханизмВнешнегоОборудования
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец МеханизмВнешнегоОборудования

КонецПроцедуры

// Процедура - обработчик команды "ОбработкаОповещения".
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[1] = Неопределено Тогда
				Запись.Штрихкод  = Параметр[0];
			Иначе
				Запись.Штрихкод  = Параметр[1][1];
			КонецЕсли;             			
			// МеханизмВнешнегоОборудования
			ПолученШтрихкодИзСШК(Запись.Штрихкод); 
			
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

КонецПроцедуры // ОбработкаОповещения()  

// Процедура - обработчик команды "ОбработкаПроверкиЗаполненияНаСервере".
//
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ТипЗнч(Запись.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если ХарактеристикиИспользуются 
			И НЕ ЗначениеЗаполнено(Запись.Характеристика) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Характеристика"" не заполнено'"),
				,
				"Запись.Характеристика",
				,
				Отказ);				
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик команды "ПриЧтенииНаСервере".
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ХарактеристикиИспользуются = Справочники.Номенклатура.ПроверитьИспользованиеХарактеристик(Запись.Владелец);
	Элементы.Характеристика.Доступность = ХарактеристикиИспользуются;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ

//Процедура - обработчик события "ПриИзменении" поля формы "Владелец"
//
&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	ВладелецПриИзмененииСервер();
	
КонецПроцедуры

//Процедура - обработчик события "НачалоВыбора" поля формы "Характеристика"
//
&НаКлиенте
Процедура ХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если ЗначениеЗаполнено(Запись.Владелец) Тогда
		ВладелецХарактеристики = Неопределено;
		Если ОбработкаТабличнойЧастиТоварыСервер.ПроверитьИспользованиеХарактеристикИПолучитьВладельцаДляВыбора(Запись.Владелец, ВладелецХарактеристики) Тогда
			Если ВладелецХарактеристики = Неопределено Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Для данной номенклатуры характеристики не заданы.'"));
			Иначе
				ПараметрыФормыВыбора = Новый Структура;
				ПараметрыФормыВыбора.Вставить("ТекущийЭлемент"  , Запись.Характеристика);
				ПараметрыФормыВыбора.Вставить("ПараметрВладелец", ВладелецХарактеристики);
				ПараметрыФормыВыбора.Вставить("Номенклатура"    , Запись.Владелец);
    			ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
			КонецЕсли;
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Для данной номенклатуры отключено использование характеристик.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Процедура - обработчик события "НачалоВыбора" поля формы "Упаковка"
//
&НаКлиенте
Процедура УпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если ЗначениеЗаполнено(Запись.Владелец) Тогда
		ДанныеВыбора = Новый СписокЗначений;
		ОбработкаТабличнойЧастиТоварыСервер.ПолучитьСписокДляВыбораУпаковок(Запись.Владелец, ДанныеВыбора, Ложь);
	КонецЕсли;
    
КонецПроцедуры

//Процедура - обработчик события "ПриИзменении" поля формы "Штрихкод"
//
&НаКлиенте
Процедура ШтрихкодПриИзменении(Элемент)
	ПолученШтрихкодИзСШК(Запись.Штрихкод);	
КонецПроцедуры

//Процедура - обработчик события "ПриИзменении" поля формы "ТипШтрихкода"
//
&НаКлиенте
Процедура ТипШтрихкодаПриИзменении(Элемент)
	Если Запись.ТипШтрихкода = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.EAN128") Тогда
		Запись.ПредставлениеШтрихкода = Запись.Штрихкод;
	Иначе
		Запись.ПредставлениеШтрихкода = "";		
	КонецЕсли;	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура НовыйШтрихкод(Команда)
	
	Запись.Штрихкод = СформироватьШтрихкодEAN13();
	Запись.ТипШтрихкода = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.EAN13");
	Запись.ПредставлениеШтрихкода = "";
	
КонецПроцедуры






