Процедура ЗаписьСтрокиВРегистр(СтруктураЗаписи) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Отличается = Ложь;
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Отбор.ЗаказКлиента.Установить(СтруктураЗаписи.ЗаказКлиента);
		НаборЗаписей.Отбор.НомерОплаты.Установить(СтруктураЗаписи.НомерОплаты);

		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда 
			НоваяЗапись = НаборЗаписей.Добавить();
			СтруктураЗаписи.ДатаСоздания = ТекущаяДатаСеанса();
			НоваяЗаписьВРегистр = Истина;
			Отличается = Истина;
			ДатаСоздания = СтруктураЗаписи.ДатаСоздания;
		Иначе 
			НоваяЗапись = НаборЗаписей[0];

			ДатаСоздания = НоваяЗапись.ДатаСоздания;

			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ОплатаЗаказаКлиента.ЗаказКлиента
				|ИЗ
				|	РегистрСведений.ОплатаЗаказаКлиента КАК ОплатаЗаказаКлиента
				|ГДЕ
				|	ОплатаЗаказаКлиента.ТипОплаты = &ТипОплаты
				|	И ОплатаЗаказаКлиента.Сумма = &Сумма
				|	И ОплатаЗаказаКлиента.СтатусОплаты = &СтатусОплаты
				|	И ОплатаЗаказаКлиента.Отменён = &Отменён
				|	И ОплатаЗаказаКлиента.ВидОплаты = &ВидОплаты
				|	И ОплатаЗаказаКлиента.ЗаказКлиента = &ЗаказКлиента
				|	И ОплатаЗаказаКлиента.НомерОплаты = &НомерОплаты";
			
			Запрос.УстановитьПараметр("СтатусОплаты", СтруктураЗаписи.СтатусОплаты);
			Запрос.УстановитьПараметр("Отменён", СтруктураЗаписи.Отменён);
			Запрос.УстановитьПараметр("ТипОплаты", СтруктураЗаписи.ТипОплаты);
			Запрос.УстановитьПараметр("Сумма", СтруктураЗаписи.Сумма);
			Запрос.УстановитьПараметр("ВидОплаты", СтруктураЗаписи.ВидОплаты);
			Запрос.УстановитьПараметр("ЗаказКлиента", СтруктураЗаписи.ЗаказКлиента);
			Запрос.УстановитьПараметр("НомерОплаты", СтруктураЗаписи.НомерОплаты);
			
			Отличается = Запрос.Выполнить().Пустой();
			НоваяЗаписьВРегистр = Ложь;

		КонецЕсли;
		
		Если Отличается Тогда
			
			НоваяЗапись.ВидОплаты 				= СтруктураЗаписи.ВидОплаты;
			НоваяЗапись.ДатаОплаты				= СтруктураЗаписи.ДатаОплаты; 
			НоваяЗапись.ДатаСоздания 			= ДатаСоздания;
			НоваяЗапись.ЗаказКлиента 			= СтруктураЗаписи.ЗаказКлиента;
			НоваяЗапись.НомерОплаты 			= СтруктураЗаписи.НомерОплаты;
			НоваяЗапись.Отменён 				= СтруктураЗаписи.Отменён;  
			НоваяЗапись.СтатусОплаты 			= СтруктураЗаписи.СтатусОплаты;  
			НоваяЗапись.Сумма 					= СтруктураЗаписи.Сумма;  
			НоваяЗапись.ТипОплаты 				= СтруктураЗаписи.ТипОплаты;  
			
			Если НоваяЗаписьВРегистр Тогда
				НоваяЗапись.ИДОплаты 			= СтруктураЗаписи.ИДОплаты;
			Иначе
				Если Не СтруктураЗаписи.ИДОплаты = Неопределено Тогда
					НоваяЗапись.ИДОплаты 		= СтруктураЗаписи.ИДОплаты;
				КонецЕсли;
			КонецЕсли;

			НаборЗаписей.Записать(Истина); 
			
		КонецЕсли;

		ЗафиксироватьТранзакцию();

	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ОписаниеОшибки();
		ЖурналСобытий.Регистрация("LiqPay.Оплата"
			, УровеньЖурналаРегистрации.Ошибка
			, Метаданные.Документы.ЗаказПокупателя
			, СтруктураЗаписи.ЗаказКлиента
			,
			, ТекстОшибки
			, СокрЛП(СтруктураЗаписи.ЗаказКлиента)
			, Ложь
			, Ложь);

	КонецПопытки;

КонецПроцедуры

Функция ИнициализацияСтруктурыЗаписи() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВидОплаты");
	Результат.Вставить("ЗаказКлиента");
	Результат.Вставить("НомерОплаты");
	Результат.Вставить("ТипОплаты");
	Результат.Вставить("Сумма");
	Результат.Вставить("СтатусОплаты");
	Результат.Вставить("Отменён");
	Результат.Вставить("ДатаОплаты");
	Результат.Вставить("ДатаСоздания");
	Результат.Вставить("ИДОплаты", Неопределено);
	
	Возврат Результат;
	
КонецФункции