#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Запись строки в регистр.
// 
// Параметры:
//  СтруктураЗаписи - см. ИнициализацияСтруктурыЗаписи
Процедура ЗаписьСтрокиВРегистр(СтруктураЗаписи) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Отличается = Ложь;
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Отбор.ЗаказКлиента.Установить(СтруктураЗаписи.ЗаказКлиента);
		НаборЗаписей.Отбор.НомерОплаты.Установить(СтруктураЗаписи.НомерОплаты);

		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда 
			НоваяЗапись = НаборЗаписей.Добавить();
			СтруктураЗаписи.ДатаСоздания = ТекущаяДатаСеанса();
			НоваяЗаписьВРегистр = Истина;
			Отличается = Истина;
			ДатаСоздания = СтруктураЗаписи.ДатаСоздания;
		Иначе 
			НоваяЗапись = НаборЗаписей[0];

			ДатаСоздания = НоваяЗапись.ДатаСоздания;

			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ОплатаЗаказаКлиента.ЗаказКлиента
				|ИЗ
				|	РегистрСведений.ОплатаЗаказаКлиента КАК ОплатаЗаказаКлиента
				|ГДЕ
				|	ОплатаЗаказаКлиента.ТипОплаты = &ТипОплаты
				|	И ОплатаЗаказаКлиента.Сумма = &Сумма
				|	И ОплатаЗаказаКлиента.СтатусОплаты = &СтатусОплаты
				|	И ОплатаЗаказаКлиента.Отменён = &Отменён
				|	И ОплатаЗаказаКлиента.ВидОплаты = &ВидОплаты
				|	И ОплатаЗаказаКлиента.ЗаказКлиента = &ЗаказКлиента
				|	И ОплатаЗаказаКлиента.НомерОплаты = &НомерОплаты
				|	И ВЫРАЗИТЬ(ОплатаЗаказаКлиента.СтруктураОтвета КАК СТРОКА(20)) = &СтруктураОтвета";
			
			Запрос.УстановитьПараметр("СтатусОплаты", СтруктураЗаписи.СтатусОплаты);
			Запрос.УстановитьПараметр("Отменён", СтруктураЗаписи.Отменён);
			Запрос.УстановитьПараметр("ТипОплаты", СтруктураЗаписи.ТипОплаты);
			Запрос.УстановитьПараметр("Сумма", СтруктураЗаписи.Сумма);
			Запрос.УстановитьПараметр("ВидОплаты", СтруктураЗаписи.ВидОплаты);
			Запрос.УстановитьПараметр("ЗаказКлиента", СтруктураЗаписи.ЗаказКлиента);
			Запрос.УстановитьПараметр("НомерОплаты", СтруктураЗаписи.НомерОплаты);
			Запрос.УстановитьПараметр("СтруктураОтвета", СокрЛП(Лев(СтруктураЗаписи.СтруктураОтвета, 20)));
			
			Отличается = Запрос.Выполнить().Пустой();
			НоваяЗаписьВРегистр = Ложь;

		КонецЕсли;
		
		Если Отличается Тогда
			
			НоваяЗапись.ВидОплаты 				= СтруктураЗаписи.ВидОплаты;
			НоваяЗапись.ДатаОплаты				= СтруктураЗаписи.ДатаОплаты; 
			НоваяЗапись.ДатаСоздания 			= ДатаСоздания;
			НоваяЗапись.ЗаказКлиента 			= СтруктураЗаписи.ЗаказКлиента;
			НоваяЗапись.НомерОплаты 			= СтруктураЗаписи.НомерОплаты;
			НоваяЗапись.Отменён 				= СтруктураЗаписи.Отменён;  
			НоваяЗапись.СтатусОплаты 			= СтруктураЗаписи.СтатусОплаты;  
			НоваяЗапись.Сумма 					= СтруктураЗаписи.Сумма;  
			НоваяЗапись.ТипОплаты 				= СтруктураЗаписи.ТипОплаты;  
			НоваяЗапись.СтруктураОтвета			= СтруктураЗаписи.СтруктураОтвета;  
			
			Если НоваяЗаписьВРегистр Тогда
				НоваяЗапись.ИДОплаты 			= СтруктураЗаписи.ИДОплаты;
			Иначе
				Если Не СтруктураЗаписи.ИДОплаты = Неопределено Тогда
					НоваяЗапись.ИДОплаты 		= СтруктураЗаписи.ИДОплаты;
				КонецЕсли;
			КонецЕсли;

			НаборЗаписей.Записать(Истина); 
			
		КонецЕсли;

		ЗафиксироватьТранзакцию();

	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ОписаниеОшибки();
		ЖурналСобытий.Регистрация("LiqPay.Оплата"
			, УровеньЖурналаРегистрации.Ошибка
			, Метаданные.Документы.ЗаказПокупателя
			, СтруктураЗаписи.ЗаказКлиента
			,
			, ТекстОшибки
			, СокрЛП(СтруктураЗаписи.ЗаказКлиента)
			, Ложь
			, Ложь);

	КонецПопытки;

КонецПроцедуры

// Возвращает структуру Инициализация структуры записи
// 
// Возвращаемое значение:
// 	Структура - Структура записи:
// 		* ВидОплаты - ПеречислениеСсылка.ВидыОплатыЗаказаПокупателя - виды оплаты заказа.
// 		* ЗаказКлиента - ДокументСсылка.ЗаказПокупателя - ссылка на документ заказа.
// 		* НомерОплаты - Число - номер оплаты.
// 		* ТипОплаты - ПеречислениеСсылка.ТипОплатыЗаказПокупателя - тип оплаты заказа
// 		* Сумма - Число - суммы оплаты
// 		* СтатусОплаты - ПеречислениеСсылка.СтатусОплаты - статус оплаты
// 		* Отменён - Булево - признак отмены оплаты
// 		* ДатаОплаты - Дата - дата оплаты
// 		* ДатаСоздания - Дата - дата создания оплаты
// 		* ИДОплаты - Строка - идентификатор оплаты
// 		* СтруктураОтвета - Строка - структура ответа сервера оплаты
Функция ИнициализацияСтруктурыЗаписи() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВидОплаты",			Перечисления.ВидыОплатыЗаказаПокупателя.ПустаяСсылка());
	Результат.Вставить("ЗаказКлиента",		Документы.ЗаказПокупателя.ПустаяСсылка());
	Результат.Вставить("НомерОплаты",		0);
	Результат.Вставить("ТипОплаты",			Перечисления.ТипОплатыЗаказПокупателя.ПустаяСсылка());
	Результат.Вставить("Сумма",				0);
	Результат.Вставить("СтатусОплаты",		Перечисления.СтатусОплаты.ПустаяСсылка());
	Результат.Вставить("Отменён",			Ложь);
	Результат.Вставить("ДатаОплаты",		Дата(1,1,1));
	Результат.Вставить("ДатаСоздания",		Дата(1,1,1));
	Результат.Вставить("ИДОплаты",			"");
	Результат.Вставить("СтруктураОтвета",	"");
	
	Возврат Результат;
	
КонецФункции

// Получить оплаты по заказу.
// 
// Параметры:
//  СсылкаНаЗаказ - ДокументСсылка.ЗаказПокупателя - Ссылка на заказ
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Получить оплаты по заказу
Функция ПолучитьОплатыПоЗаказу(СсылкаНаЗаказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказКлиента", СсылкаНаЗаказ);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОплатаЗаказаКлиента.ЗаказКлиента,
		|	ОплатаЗаказаКлиента.НомерОплаты КАК НомерОплаты,
		|	ОплатаЗаказаКлиента.ТипОплаты,
		|	ОплатаЗаказаКлиента.Сумма,
		|	ОплатаЗаказаКлиента.СтатусОплаты,
		|	ОплатаЗаказаКлиента.Отменён,
		|	ОплатаЗаказаКлиента.ВидОплаты,
		|	ОплатаЗаказаКлиента.ДатаОплаты,
		|	ОплатаЗаказаКлиента.ДатаСоздания,
		|	ОплатаЗаказаКлиента.ИДОплаты,
		|	ОплатаЗаказаКлиента.СтруктураОтвета
		|ИЗ
		|	РегистрСведений.ОплатаЗаказаКлиента КАК ОплатаЗаказаКлиента
		|ГДЕ
		|	ОплатаЗаказаКлиента.ЗаказКлиента = &ЗаказКлиента
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерОплаты";
	
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Информация об оплате.
// 
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.ЗаказПокупателя - Ссылка на заказ
// 
// Возвращаемое значение:
//  Структура - Информация об оплате:
// 		* КоличествоСтрок - Число - Всего строк оплаты
// 		* КоличествоОтменённых - Число - Количество отмененных строк оплаты
// 		* АктивныеСтроки - Число - Количество активных строк
// 		* ПоследнийНомерОплаты - Число - Последний номер оплаты
// 		* ТипОплаты - ПеречислениеСсылка.ТипОплатыЗаказПокупателя - Тип оплаты, который можно использовать
// 		* ЭтоОбмен - Булево - Признак, что оплата для заказа обмена
Функция ИнформацияОбОплате(СсылкаНаДокумент) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("КоличествоСтрок", 0);
	Результат.Вставить("КоличествоОтменённых", 0);
	Результат.Вставить("АктивныеСтроки", 0);
	Результат.Вставить("ПоследнийНомерОплаты", 0);
	Результат.Вставить("ТипОплаты", Перечисления.ТипОплатыЗаказПокупателя.ПустаяСсылка());
	Результат.Вставить("ЭтоОбмен", Ложь);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОплатаЗаказаКлиента.ЗаказКлиента КАК ЗаказКлиента,
		|	ОплатаЗаказаКлиента.НомерОплаты КАК НомерОплаты,
		|	ОплатаЗаказаКлиента.ТипОплаты КАК ТипОплаты,
		|	НЕ ЗаказПокупателя.ДокументОснование = ЗНАЧЕНИЕ(Документ.ВозвратИнтернетЗаказа.ПустаяСсылка) КАК ЭтоОбмен
		|ПОМЕСТИТЬ ПервыйТипОплаты
		|ИЗ
		|	РегистрСведений.ОплатаЗаказаКлиента КАК ОплатаЗаказаКлиента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ПО (ОплатаЗаказаКлиента.ЗаказКлиента = ЗаказПокупателя.Ссылка)
		|ГДЕ
		|	ОплатаЗаказаКлиента.ЗаказКлиента = &ЗаказКлиента
		|	И НЕ ОплатаЗаказаКлиента.Отменён
		|	И ВЫБОР
		|		КОГДА ЗаказПокупателя.ДокументОснование = ЗНАЧЕНИЕ(Документ.ВозвратИнтернетЗаказа.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ
		|		НЕ ОплатаЗаказаКлиента.НомерОплаты = 0
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерОплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОплатаЗаказаКлиента.ЗаказКлиента.Ссылка КАК ЗаказКлиентаСсылка,
		|	КОЛИЧЕСТВО(ОплатаЗаказаКлиента.НомерОплаты) КАК КоличествоСтрок,
		|	СУММА(ВЫБОР
		|		КОГДА ОплатаЗаказаКлиента.Отменён
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК КоличествоОтменённых,
		|	ЕСТЬNULL(ПервыйТипОплаты.ТипОплаты, ЗНАЧЕНИЕ(Перечисление.ТипОплатыЗаказПокупателя.ПустаяСсылка)) КАК ТипОплаты,
		|	МАКСИМУМ(ОплатаЗаказаКлиента.НомерОплаты) КАК ПоследнийНомерОплаты,
		|	ЕСТЬNULL(ПервыйТипОплаты.ЭтоОбмен, ЛОЖЬ) КАК ЭтоОбмен
		|ИЗ
		|	РегистрСведений.ОплатаЗаказаКлиента КАК ОплатаЗаказаКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПервыйТипОплаты КАК ПервыйТипОплаты
		|		ПО ОплатаЗаказаКлиента.ЗаказКлиента.Ссылка = ПервыйТипОплаты.ЗаказКлиента.Ссылка
		|ГДЕ
		|	ОплатаЗаказаКлиента.ЗаказКлиента = &ЗаказКлиента
		|СГРУППИРОВАТЬ ПО
		|	ОплатаЗаказаКлиента.ЗаказКлиента.Ссылка,
		|	ЕСТЬNULL(ПервыйТипОплаты.ТипОплаты, ЗНАЧЕНИЕ(Перечисление.ТипОплатыЗаказПокупателя.ПустаяСсылка)),
		|	ЕСТЬNULL(ПервыйТипОплаты.ЭтоОбмен, ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", СсылкаНаДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		Результат.АктивныеСтроки = Результат.КоличествоСтрок - Результат.КоличествоОтменённых;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Структура оплаты заказа.
// 
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.ЗаказПокупателя - Ссылка на заказ
// 
// Возвращаемое значение:
//  Структура - Структура оплаты заказа. Если оплата была не через терминал, то возвращается пустая структура
Функция СтруктураОплатыЗаказа(СсылкаНаДокумент) Экспорт

	Результат = Новый Структура;

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОплатаЗаказаКлиента.СтруктураОтвета
		|ИЗ
		|	РегистрСведений.ОплатаЗаказаКлиента КАК ОплатаЗаказаКлиента
		|ГДЕ
		|	ОплатаЗаказаКлиента.ЗаказКлиента = &ЗаказКлиента
		|	И НЕ ОплатаЗаказаКлиента.Отменён
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОплатаЗаказаКлиента.НомерОплаты";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", СсылкаНаДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Попытка
		
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Выборка.СтруктураОтвета);
			Результат = ПрочитатьJSON(ЧтениеJSON);
			
		Исключение
			
			Результат = Новый Структура;
			
		КонецПопытки;

	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

// Код процедур и функций

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Код процедур и функций

#КонецОбласти

#КонецЕсли

