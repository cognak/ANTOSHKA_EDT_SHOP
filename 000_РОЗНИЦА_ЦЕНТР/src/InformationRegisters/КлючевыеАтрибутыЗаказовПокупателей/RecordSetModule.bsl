#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, Замещение)

	Если ДополнительныеСвойства.Свойство("ПроверкаРезервовПолная")
	И	 ДополнительныеСвойства.ПроверкаРезервовПолная.Проверить = Истина
	Тогда	//	LNK 29.05.2023 06:04:36

		ПроверитьЗаполнениеСостояния();

	КонецЕсли;

//	\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/

	Если ОбменДанными.Загрузка Тогда

		Возврат;

	КонецЕсли;

	Для каждого ЗаписьНабора Из ЭтотОбъект Цикл

		ЗаписьНабора.ДатаИзменения = ТекущаяДатаСеанса();

	КонецЦикла;

КонецПроцедуры

//	LNK 24.05.2023 06:33:52
Процедура ПриЗаписи(Отказ, Замещение)

	Если ДополнительныеСвойства.Свойство("ПроверкаРезервовПолная")
	И	 ДополнительныеСвойства.ПроверкаРезервовПолная.Проверить = Истина
	Тогда

	//	Выполняем, если назначено, не обращая внимания на флаг загрузки.
		ПроверитьДвиженияЗаказыПокупателейДляПодчинённых(ПолучитьМинимальныйПериод());

	КонецЕсли;

	Если ОбменДанными.Загрузка Тогда

		Возврат;

	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//	LNK 24.05.2023 06:32:29
Процедура ПроверитьДвиженияЗаказыПокупателейДляПодчинённых(Период, ВыполнитьПринудительно = Ложь)
		
	УчетнаяПолитика = ОбщегоНазначенияРТповтИсп.ПолучитьУчетнуюПолитику(Период);

	Если ПроверкаНеобходима(УчетнаяПолитика)
	И	 (УчетнаяПолитика.РазрешитьПрямуюИнтеграциюMagento ИЛИ ВыполнитьПринудительно = Истина)
	Тогда

		ЗаказыПокупателейСервер.ПроверитьДвиженияДляПодчинённыхДокументов(Отбор.ЗаказПокупателя.Значение);

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьМинимальныйПериод()	//	LNK 24.05.2023 06:48:04

	Период = '00010101';

	Для каждого ЗаписьНабора Из ЭтотОбъект Цикл

		Если Период = '00010101' ИЛИ ЗаписьНабора.Период < Период Тогда

			Период = ЗаписьНабора.Период;

		КонецЕсли;

	КонецЦикла;

	Возврат Период;

КонецФункции

Функция ПроверкаНеобходима(УчетнаяПолитика)

	Проверить = Ложь;

	Для каждого ЗаписьНабора Из ЭтотОбъект Цикл

		Если ЗаписьНабора.Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт ИЛИ ЗаписьНабора.Статус = Перечисления.СтатусыЗаказовПокупателей.Отменён Тогда

		//	в этом случае заказ покупателя не делает движений!
			Проверить = Истина;
			Прервать;

		КонецЕсли;

	КонецЦикла;

	Возврат Проверить;

КонецФункции

//	LNK 29.05.2023 06:05:51
Процедура ПроверитьЗаполнениеСостояния()

	НужноПолучитьПоследнее = Ложь;

	Для каждого ЗаписьНабора Из ЭтотОбъект Цикл

		Если НЕ ЗначениеЗаполнено(ЗаписьНабора.Состояние) Тогда

			НужноПолучитьПоследнее = Истина;
			Прервать;

		КонецЕсли;

	КонецЦикла;

	Если НужноПолучитьПоследнее Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаРегистра.Период КАК Период,
		|	ТаблицаРегистра.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.КлючевыеАтрибутыЗаказовПокупателей КАК ТаблицаРегистра
		|ГДЕ
		|	 ТаблицаРегистра.ЗаказПокупателя = &ЗаказПокупателя
		|	и НЕ ТаблицаРегистра.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ"
		);
		Запрос.УстановитьПараметр("ЗаказПокупателя", Отбор.ЗаказПокупателя.Значение);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда

			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();

			Для каждого ЗаписьНабора Из ЭтотОбъект Цикл

				Если НЕ ЗначениеЗаполнено(ЗаписьНабора.Состояние) Тогда

					ЗаписьНабора.Состояние = Выборка.Состояние;

				КонецЕсли;

			КонецЦикла;
		
		КонецЕсли;
		

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Инициализация

#КонецОбласти

#КонецЕсли